
display_pcb_code_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006478  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00006478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000069c  20000010  00006488  00020010  2**2
                  ALLOC
  3 .stack        00002004  200006ac  00006b24  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003fa62  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a58  00000000  00000000  0005faf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005344  00000000  00000000  0006454b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e88  00000000  00000000  0006988f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cf8  00000000  00000000  0006a717  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008dd8  00000000  00000000  0006b40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000089d0  00000000  00000000  000741e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003334  00000000  00000000  0007cbb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 26 00 20 45 58 00 00 3d 59 00 00 3d 59 00 00     .&. EX..=Y..=Y..
	...
      2c:	3d 59 00 00 00 00 00 00 00 00 00 00 3d 59 00 00     =Y..........=Y..
      3c:	3d 59 00 00 3d 59 00 00 3d 59 00 00 3d 59 00 00     =Y..=Y..=Y..=Y..
      4c:	3d 59 00 00 45 02 00 00 3d 59 00 00 3d 59 00 00     =Y..E...=Y..=Y..
      5c:	3d 59 00 00 3d 59 00 00 41 11 00 00 59 11 00 00     =Y..=Y..A...Y...
      6c:	71 11 00 00 89 11 00 00 a1 11 00 00 b9 11 00 00     q...............
      7c:	3d 59 00 00 3d 59 00 00 3d 59 00 00 3d 59 00 00     =Y..=Y..=Y..=Y..
      8c:	3d 59 00 00 3d 59 00 00 3d 59 00 00 3d 59 00 00     =Y..=Y..=Y..=Y..
      9c:	3d 59 00 00 3d 59 00 00 3d 59 00 00 3d 59 00 00     =Y..=Y..=Y..=Y..
      ac:	3d 59 00 00 00 00 00 00                             =Y......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00006478 	.word	0x00006478

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00006478 	.word	0x00006478
     10c:	00006478 	.word	0x00006478
     110:	00000000 	.word	0x00000000

00000114 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	0952      	lsrs	r2, r2, #5
     12a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     12c:	230f      	movs	r3, #15
     12e:	18fb      	adds	r3, r7, r3
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d10c      	bne.n	150 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <_extint_get_eic_from_channel+0x48>)
     138:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     13a:	230f      	movs	r3, #15
     13c:	18fb      	adds	r3, r7, r3
     13e:	781b      	ldrb	r3, [r3, #0]
     140:	009b      	lsls	r3, r3, #2
     142:	2210      	movs	r2, #16
     144:	4694      	mov	ip, r2
     146:	44bc      	add	ip, r7
     148:	4463      	add	r3, ip
     14a:	3b08      	subs	r3, #8
     14c:	681b      	ldr	r3, [r3, #0]
     14e:	e000      	b.n	152 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     150:	2300      	movs	r3, #0
	}
}
     152:	0018      	movs	r0, r3
     154:	46bd      	mov	sp, r7
     156:	b004      	add	sp, #16
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	40001800 	.word	0x40001800

00000160 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     160:	b580      	push	{r7, lr}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	0002      	movs	r2, r0
     168:	1dfb      	adds	r3, r7, #7
     16a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     16c:	1dfb      	adds	r3, r7, #7
     16e:	781b      	ldrb	r3, [r3, #0]
     170:	0018      	movs	r0, r3
     172:	4b0b      	ldr	r3, [pc, #44]	; (1a0 <extint_chan_is_detected+0x40>)
     174:	4798      	blx	r3
     176:	0003      	movs	r3, r0
     178:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     17a:	1dfb      	adds	r3, r7, #7
     17c:	781b      	ldrb	r3, [r3, #0]
     17e:	221f      	movs	r2, #31
     180:	4013      	ands	r3, r2
     182:	2201      	movs	r2, #1
     184:	409a      	lsls	r2, r3
     186:	0013      	movs	r3, r2
     188:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	691b      	ldr	r3, [r3, #16]
     18e:	68ba      	ldr	r2, [r7, #8]
     190:	4013      	ands	r3, r2
     192:	1e5a      	subs	r2, r3, #1
     194:	4193      	sbcs	r3, r2
     196:	b2db      	uxtb	r3, r3
}
     198:	0018      	movs	r0, r3
     19a:	46bd      	mov	sp, r7
     19c:	b004      	add	sp, #16
     19e:	bd80      	pop	{r7, pc}
     1a0:	00000115 	.word	0x00000115

000001a4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	b084      	sub	sp, #16
     1a8:	af00      	add	r7, sp, #0
     1aa:	0002      	movs	r2, r0
     1ac:	1dfb      	adds	r3, r7, #7
     1ae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	781b      	ldrb	r3, [r3, #0]
     1b4:	0018      	movs	r0, r3
     1b6:	4b09      	ldr	r3, [pc, #36]	; (1dc <extint_chan_clear_detected+0x38>)
     1b8:	4798      	blx	r3
     1ba:	0003      	movs	r3, r0
     1bc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     1be:	1dfb      	adds	r3, r7, #7
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	221f      	movs	r2, #31
     1c4:	4013      	ands	r3, r2
     1c6:	2201      	movs	r2, #1
     1c8:	409a      	lsls	r2, r3
     1ca:	0013      	movs	r3, r2
     1cc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     1ce:	68fb      	ldr	r3, [r7, #12]
     1d0:	68ba      	ldr	r2, [r7, #8]
     1d2:	611a      	str	r2, [r3, #16]
}
     1d4:	46c0      	nop			; (mov r8, r8)
     1d6:	46bd      	mov	sp, r7
     1d8:	b004      	add	sp, #16
     1da:	bd80      	pop	{r7, pc}
     1dc:	00000115 	.word	0x00000115

000001e0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     1e0:	b580      	push	{r7, lr}
     1e2:	b082      	sub	sp, #8
     1e4:	af00      	add	r7, sp, #0
     1e6:	6078      	str	r0, [r7, #4]
     1e8:	0008      	movs	r0, r1
     1ea:	0011      	movs	r1, r2
     1ec:	1cfb      	adds	r3, r7, #3
     1ee:	1c02      	adds	r2, r0, #0
     1f0:	701a      	strb	r2, [r3, #0]
     1f2:	1cbb      	adds	r3, r7, #2
     1f4:	1c0a      	adds	r2, r1, #0
     1f6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     1f8:	1cbb      	adds	r3, r7, #2
     1fa:	781b      	ldrb	r3, [r3, #0]
     1fc:	2b00      	cmp	r3, #0
     1fe:	d001      	beq.n	204 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     200:	2317      	movs	r3, #23
     202:	e019      	b.n	238 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     204:	1cfb      	adds	r3, r7, #3
     206:	781a      	ldrb	r2, [r3, #0]
     208:	4b0d      	ldr	r3, [pc, #52]	; (240 <extint_register_callback+0x60>)
     20a:	0092      	lsls	r2, r2, #2
     20c:	58d3      	ldr	r3, [r2, r3]
     20e:	2b00      	cmp	r3, #0
     210:	d107      	bne.n	222 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     212:	1cfb      	adds	r3, r7, #3
     214:	781a      	ldrb	r2, [r3, #0]
     216:	4b0a      	ldr	r3, [pc, #40]	; (240 <extint_register_callback+0x60>)
     218:	0092      	lsls	r2, r2, #2
     21a:	6879      	ldr	r1, [r7, #4]
     21c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     21e:	2300      	movs	r3, #0
     220:	e00a      	b.n	238 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     222:	1cfb      	adds	r3, r7, #3
     224:	781a      	ldrb	r2, [r3, #0]
     226:	4b06      	ldr	r3, [pc, #24]	; (240 <extint_register_callback+0x60>)
     228:	0092      	lsls	r2, r2, #2
     22a:	58d2      	ldr	r2, [r2, r3]
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	429a      	cmp	r2, r3
     230:	d101      	bne.n	236 <extint_register_callback+0x56>
		return STATUS_OK;
     232:	2300      	movs	r3, #0
     234:	e000      	b.n	238 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     236:	231d      	movs	r3, #29
}
     238:	0018      	movs	r0, r3
     23a:	46bd      	mov	sp, r7
     23c:	b002      	add	sp, #8
     23e:	bd80      	pop	{r7, pc}
     240:	200000f4 	.word	0x200000f4

00000244 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     244:	b580      	push	{r7, lr}
     246:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     248:	4b15      	ldr	r3, [pc, #84]	; (2a0 <EIC_Handler+0x5c>)
     24a:	2200      	movs	r2, #0
     24c:	701a      	strb	r2, [r3, #0]
     24e:	e020      	b.n	292 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     250:	4b13      	ldr	r3, [pc, #76]	; (2a0 <EIC_Handler+0x5c>)
     252:	781b      	ldrb	r3, [r3, #0]
     254:	0018      	movs	r0, r3
     256:	4b13      	ldr	r3, [pc, #76]	; (2a4 <EIC_Handler+0x60>)
     258:	4798      	blx	r3
     25a:	1e03      	subs	r3, r0, #0
     25c:	d013      	beq.n	286 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     25e:	4b10      	ldr	r3, [pc, #64]	; (2a0 <EIC_Handler+0x5c>)
     260:	781b      	ldrb	r3, [r3, #0]
     262:	0018      	movs	r0, r3
     264:	4b10      	ldr	r3, [pc, #64]	; (2a8 <EIC_Handler+0x64>)
     266:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     268:	4b0d      	ldr	r3, [pc, #52]	; (2a0 <EIC_Handler+0x5c>)
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	001a      	movs	r2, r3
     26e:	4b0f      	ldr	r3, [pc, #60]	; (2ac <EIC_Handler+0x68>)
     270:	0092      	lsls	r2, r2, #2
     272:	58d3      	ldr	r3, [r2, r3]
     274:	2b00      	cmp	r3, #0
     276:	d006      	beq.n	286 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     278:	4b09      	ldr	r3, [pc, #36]	; (2a0 <EIC_Handler+0x5c>)
     27a:	781b      	ldrb	r3, [r3, #0]
     27c:	001a      	movs	r2, r3
     27e:	4b0b      	ldr	r3, [pc, #44]	; (2ac <EIC_Handler+0x68>)
     280:	0092      	lsls	r2, r2, #2
     282:	58d3      	ldr	r3, [r2, r3]
     284:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     286:	4b06      	ldr	r3, [pc, #24]	; (2a0 <EIC_Handler+0x5c>)
     288:	781b      	ldrb	r3, [r3, #0]
     28a:	3301      	adds	r3, #1
     28c:	b2da      	uxtb	r2, r3
     28e:	4b04      	ldr	r3, [pc, #16]	; (2a0 <EIC_Handler+0x5c>)
     290:	701a      	strb	r2, [r3, #0]
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <EIC_Handler+0x5c>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b0f      	cmp	r3, #15
     298:	d9da      	bls.n	250 <EIC_Handler+0xc>
			}
		}
	}
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	bd80      	pop	{r7, pc}
     2a0:	200000f0 	.word	0x200000f0
     2a4:	00000161 	.word	0x00000161
     2a8:	000001a5 	.word	0x000001a5
     2ac:	200000f4 	.word	0x200000f4

000002b0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     2b0:	b580      	push	{r7, lr}
     2b2:	b082      	sub	sp, #8
     2b4:	af00      	add	r7, sp, #0
     2b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	2200      	movs	r2, #0
     2bc:	701a      	strb	r2, [r3, #0]
}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	46bd      	mov	sp, r7
     2c2:	b002      	add	sp, #8
     2c4:	bd80      	pop	{r7, pc}
	...

000002c8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     2c8:	b580      	push	{r7, lr}
     2ca:	b082      	sub	sp, #8
     2cc:	af00      	add	r7, sp, #0
     2ce:	0002      	movs	r2, r0
     2d0:	6039      	str	r1, [r7, #0]
     2d2:	1dfb      	adds	r3, r7, #7
     2d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     2d6:	1dfb      	adds	r3, r7, #7
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	2b01      	cmp	r3, #1
     2dc:	d00a      	beq.n	2f4 <system_apb_clock_set_mask+0x2c>
     2de:	2b02      	cmp	r3, #2
     2e0:	d00f      	beq.n	302 <system_apb_clock_set_mask+0x3a>
     2e2:	2b00      	cmp	r3, #0
     2e4:	d114      	bne.n	310 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     2e6:	4b0e      	ldr	r3, [pc, #56]	; (320 <system_apb_clock_set_mask+0x58>)
     2e8:	4a0d      	ldr	r2, [pc, #52]	; (320 <system_apb_clock_set_mask+0x58>)
     2ea:	6991      	ldr	r1, [r2, #24]
     2ec:	683a      	ldr	r2, [r7, #0]
     2ee:	430a      	orrs	r2, r1
     2f0:	619a      	str	r2, [r3, #24]
			break;
     2f2:	e00f      	b.n	314 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     2f4:	4b0a      	ldr	r3, [pc, #40]	; (320 <system_apb_clock_set_mask+0x58>)
     2f6:	4a0a      	ldr	r2, [pc, #40]	; (320 <system_apb_clock_set_mask+0x58>)
     2f8:	69d1      	ldr	r1, [r2, #28]
     2fa:	683a      	ldr	r2, [r7, #0]
     2fc:	430a      	orrs	r2, r1
     2fe:	61da      	str	r2, [r3, #28]
			break;
     300:	e008      	b.n	314 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     302:	4b07      	ldr	r3, [pc, #28]	; (320 <system_apb_clock_set_mask+0x58>)
     304:	4a06      	ldr	r2, [pc, #24]	; (320 <system_apb_clock_set_mask+0x58>)
     306:	6a11      	ldr	r1, [r2, #32]
     308:	683a      	ldr	r2, [r7, #0]
     30a:	430a      	orrs	r2, r1
     30c:	621a      	str	r2, [r3, #32]
			break;
     30e:	e001      	b.n	314 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     310:	2317      	movs	r3, #23
     312:	e000      	b.n	316 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     314:	2300      	movs	r3, #0
}
     316:	0018      	movs	r0, r3
     318:	46bd      	mov	sp, r7
     31a:	b002      	add	sp, #8
     31c:	bd80      	pop	{r7, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	40000400 	.word	0x40000400

00000324 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     324:	b580      	push	{r7, lr}
     326:	b082      	sub	sp, #8
     328:	af00      	add	r7, sp, #0
     32a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	2280      	movs	r2, #128	; 0x80
     330:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     332:	687b      	ldr	r3, [r7, #4]
     334:	2200      	movs	r2, #0
     336:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     338:	687b      	ldr	r3, [r7, #4]
     33a:	2201      	movs	r2, #1
     33c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     33e:	687b      	ldr	r3, [r7, #4]
     340:	2200      	movs	r2, #0
     342:	70da      	strb	r2, [r3, #3]
}
     344:	46c0      	nop			; (mov r8, r8)
     346:	46bd      	mov	sp, r7
     348:	b002      	add	sp, #8
     34a:	bd80      	pop	{r7, pc}

0000034c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
     352:	0002      	movs	r2, r0
     354:	1dfb      	adds	r3, r7, #7
     356:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     358:	4b06      	ldr	r3, [pc, #24]	; (374 <system_interrupt_enable+0x28>)
     35a:	1dfa      	adds	r2, r7, #7
     35c:	7812      	ldrb	r2, [r2, #0]
     35e:	0011      	movs	r1, r2
     360:	221f      	movs	r2, #31
     362:	400a      	ands	r2, r1
     364:	2101      	movs	r1, #1
     366:	4091      	lsls	r1, r2
     368:	000a      	movs	r2, r1
     36a:	601a      	str	r2, [r3, #0]
}
     36c:	46c0      	nop			; (mov r8, r8)
     36e:	46bd      	mov	sp, r7
     370:	b002      	add	sp, #8
     372:	bd80      	pop	{r7, pc}
     374:	e000e100 	.word	0xe000e100

00000378 <_extint_get_eic_from_channel>:
{
     378:	b580      	push	{r7, lr}
     37a:	b084      	sub	sp, #16
     37c:	af00      	add	r7, sp, #0
     37e:	0002      	movs	r2, r0
     380:	1dfb      	adds	r3, r7, #7
     382:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     384:	230f      	movs	r3, #15
     386:	18fb      	adds	r3, r7, r3
     388:	1dfa      	adds	r2, r7, #7
     38a:	7812      	ldrb	r2, [r2, #0]
     38c:	0952      	lsrs	r2, r2, #5
     38e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
     390:	230f      	movs	r3, #15
     392:	18fb      	adds	r3, r7, r3
     394:	781b      	ldrb	r3, [r3, #0]
     396:	2b00      	cmp	r3, #0
     398:	d10c      	bne.n	3b4 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     39a:	4b09      	ldr	r3, [pc, #36]	; (3c0 <_extint_get_eic_from_channel+0x48>)
     39c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
     39e:	230f      	movs	r3, #15
     3a0:	18fb      	adds	r3, r7, r3
     3a2:	781b      	ldrb	r3, [r3, #0]
     3a4:	009b      	lsls	r3, r3, #2
     3a6:	2210      	movs	r2, #16
     3a8:	4694      	mov	ip, r2
     3aa:	44bc      	add	ip, r7
     3ac:	4463      	add	r3, ip
     3ae:	3b08      	subs	r3, #8
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	e000      	b.n	3b6 <_extint_get_eic_from_channel+0x3e>
		return NULL;
     3b4:	2300      	movs	r3, #0
}
     3b6:	0018      	movs	r0, r3
     3b8:	46bd      	mov	sp, r7
     3ba:	b004      	add	sp, #16
     3bc:	bd80      	pop	{r7, pc}
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	40001800 	.word	0x40001800

000003c4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     3c4:	b580      	push	{r7, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     3ca:	4b0f      	ldr	r3, [pc, #60]	; (408 <extint_is_syncing+0x44>)
     3cc:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     3ce:	2300      	movs	r3, #0
     3d0:	607b      	str	r3, [r7, #4]
     3d2:	e011      	b.n	3f8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	009b      	lsls	r3, r3, #2
     3d8:	2208      	movs	r2, #8
     3da:	4694      	mov	ip, r2
     3dc:	44bc      	add	ip, r7
     3de:	4463      	add	r3, ip
     3e0:	3b08      	subs	r3, #8
     3e2:	681b      	ldr	r3, [r3, #0]
     3e4:	785b      	ldrb	r3, [r3, #1]
     3e6:	b2db      	uxtb	r3, r3
     3e8:	b25b      	sxtb	r3, r3
     3ea:	2b00      	cmp	r3, #0
     3ec:	da01      	bge.n	3f2 <extint_is_syncing+0x2e>
			return true;
     3ee:	2301      	movs	r3, #1
     3f0:	e006      	b.n	400 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     3f2:	687b      	ldr	r3, [r7, #4]
     3f4:	3301      	adds	r3, #1
     3f6:	607b      	str	r3, [r7, #4]
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	2b00      	cmp	r3, #0
     3fc:	d0ea      	beq.n	3d4 <extint_is_syncing+0x10>
		}
	}
	return false;
     3fe:	2300      	movs	r3, #0
}
     400:	0018      	movs	r0, r3
     402:	46bd      	mov	sp, r7
     404:	b002      	add	sp, #8
     406:	bd80      	pop	{r7, pc}
     408:	40001800 	.word	0x40001800

0000040c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     40c:	b580      	push	{r7, lr}
     40e:	b084      	sub	sp, #16
     410:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     412:	4b2d      	ldr	r3, [pc, #180]	; (4c8 <_system_extint_init+0xbc>)
     414:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     416:	2140      	movs	r1, #64	; 0x40
     418:	2000      	movs	r0, #0
     41a:	4b2c      	ldr	r3, [pc, #176]	; (4cc <_system_extint_init+0xc0>)
     41c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     41e:	003b      	movs	r3, r7
     420:	0018      	movs	r0, r3
     422:	4b2b      	ldr	r3, [pc, #172]	; (4d0 <_system_extint_init+0xc4>)
     424:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     426:	003b      	movs	r3, r7
     428:	2200      	movs	r2, #0
     42a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     42c:	003b      	movs	r3, r7
     42e:	0019      	movs	r1, r3
     430:	2005      	movs	r0, #5
     432:	4b28      	ldr	r3, [pc, #160]	; (4d4 <_system_extint_init+0xc8>)
     434:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     436:	2005      	movs	r0, #5
     438:	4b27      	ldr	r3, [pc, #156]	; (4d8 <_system_extint_init+0xcc>)
     43a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     43c:	2300      	movs	r3, #0
     43e:	60fb      	str	r3, [r7, #12]
     440:	e018      	b.n	474 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     442:	68fb      	ldr	r3, [r7, #12]
     444:	009b      	lsls	r3, r3, #2
     446:	2210      	movs	r2, #16
     448:	4694      	mov	ip, r2
     44a:	44bc      	add	ip, r7
     44c:	4463      	add	r3, ip
     44e:	3b0c      	subs	r3, #12
     450:	681a      	ldr	r2, [r3, #0]
     452:	68fb      	ldr	r3, [r7, #12]
     454:	009b      	lsls	r3, r3, #2
     456:	2110      	movs	r1, #16
     458:	468c      	mov	ip, r1
     45a:	44bc      	add	ip, r7
     45c:	4463      	add	r3, ip
     45e:	3b0c      	subs	r3, #12
     460:	681b      	ldr	r3, [r3, #0]
     462:	781b      	ldrb	r3, [r3, #0]
     464:	b2db      	uxtb	r3, r3
     466:	2101      	movs	r1, #1
     468:	430b      	orrs	r3, r1
     46a:	b2db      	uxtb	r3, r3
     46c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     46e:	68fb      	ldr	r3, [r7, #12]
     470:	3301      	adds	r3, #1
     472:	60fb      	str	r3, [r7, #12]
     474:	68fb      	ldr	r3, [r7, #12]
     476:	2b00      	cmp	r3, #0
     478:	d0e3      	beq.n	442 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	4b17      	ldr	r3, [pc, #92]	; (4dc <_system_extint_init+0xd0>)
     47e:	4798      	blx	r3
     480:	1e03      	subs	r3, r0, #0
     482:	d1fb      	bne.n	47c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     484:	230b      	movs	r3, #11
     486:	18fb      	adds	r3, r7, r3
     488:	2200      	movs	r2, #0
     48a:	701a      	strb	r2, [r3, #0]
     48c:	e00d      	b.n	4aa <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     48e:	230b      	movs	r3, #11
     490:	18fb      	adds	r3, r7, r3
     492:	781a      	ldrb	r2, [r3, #0]
     494:	4b12      	ldr	r3, [pc, #72]	; (4e0 <_system_extint_init+0xd4>)
     496:	0092      	lsls	r2, r2, #2
     498:	2100      	movs	r1, #0
     49a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     49c:	230b      	movs	r3, #11
     49e:	18fb      	adds	r3, r7, r3
     4a0:	781a      	ldrb	r2, [r3, #0]
     4a2:	230b      	movs	r3, #11
     4a4:	18fb      	adds	r3, r7, r3
     4a6:	3201      	adds	r2, #1
     4a8:	701a      	strb	r2, [r3, #0]
     4aa:	230b      	movs	r3, #11
     4ac:	18fb      	adds	r3, r7, r3
     4ae:	781b      	ldrb	r3, [r3, #0]
     4b0:	2b0f      	cmp	r3, #15
     4b2:	d9ec      	bls.n	48e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     4b4:	2004      	movs	r0, #4
     4b6:	4b0b      	ldr	r3, [pc, #44]	; (4e4 <_system_extint_init+0xd8>)
     4b8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     4ba:	4b0b      	ldr	r3, [pc, #44]	; (4e8 <_system_extint_init+0xdc>)
     4bc:	4798      	blx	r3
}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	46bd      	mov	sp, r7
     4c2:	b004      	add	sp, #16
     4c4:	bd80      	pop	{r7, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	40001800 	.word	0x40001800
     4cc:	000002c9 	.word	0x000002c9
     4d0:	000002b1 	.word	0x000002b1
     4d4:	000054d1 	.word	0x000054d1
     4d8:	00005515 	.word	0x00005515
     4dc:	000003c5 	.word	0x000003c5
     4e0:	200000f4 	.word	0x200000f4
     4e4:	0000034d 	.word	0x0000034d
     4e8:	000004ed 	.word	0x000004ed

000004ec <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     4ec:	b580      	push	{r7, lr}
     4ee:	b082      	sub	sp, #8
     4f0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     4f2:	4b15      	ldr	r3, [pc, #84]	; (548 <_extint_enable+0x5c>)
     4f4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     4f6:	2300      	movs	r3, #0
     4f8:	607b      	str	r3, [r7, #4]
     4fa:	e018      	b.n	52e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	009b      	lsls	r3, r3, #2
     500:	2208      	movs	r2, #8
     502:	4694      	mov	ip, r2
     504:	44bc      	add	ip, r7
     506:	4463      	add	r3, ip
     508:	3b08      	subs	r3, #8
     50a:	681a      	ldr	r2, [r3, #0]
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	009b      	lsls	r3, r3, #2
     510:	2108      	movs	r1, #8
     512:	468c      	mov	ip, r1
     514:	44bc      	add	ip, r7
     516:	4463      	add	r3, ip
     518:	3b08      	subs	r3, #8
     51a:	681b      	ldr	r3, [r3, #0]
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	b2db      	uxtb	r3, r3
     520:	2102      	movs	r1, #2
     522:	430b      	orrs	r3, r1
     524:	b2db      	uxtb	r3, r3
     526:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     528:	687b      	ldr	r3, [r7, #4]
     52a:	3301      	adds	r3, #1
     52c:	607b      	str	r3, [r7, #4]
     52e:	687b      	ldr	r3, [r7, #4]
     530:	2b00      	cmp	r3, #0
     532:	d0e3      	beq.n	4fc <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     534:	46c0      	nop			; (mov r8, r8)
     536:	4b05      	ldr	r3, [pc, #20]	; (54c <_extint_enable+0x60>)
     538:	4798      	blx	r3
     53a:	1e03      	subs	r3, r0, #0
     53c:	d1fb      	bne.n	536 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     53e:	46c0      	nop			; (mov r8, r8)
     540:	46bd      	mov	sp, r7
     542:	b002      	add	sp, #8
     544:	bd80      	pop	{r7, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	40001800 	.word	0x40001800
     54c:	000003c5 	.word	0x000003c5

00000550 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     550:	b580      	push	{r7, lr}
     552:	b086      	sub	sp, #24
     554:	af00      	add	r7, sp, #0
     556:	0002      	movs	r2, r0
     558:	6039      	str	r1, [r7, #0]
     55a:	1dfb      	adds	r3, r7, #7
     55c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     55e:	2308      	movs	r3, #8
     560:	18fb      	adds	r3, r7, r3
     562:	0018      	movs	r0, r3
     564:	4b36      	ldr	r3, [pc, #216]	; (640 <extint_chan_set_config+0xf0>)
     566:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     568:	683b      	ldr	r3, [r7, #0]
     56a:	685b      	ldr	r3, [r3, #4]
     56c:	b2da      	uxtb	r2, r3
     56e:	2308      	movs	r3, #8
     570:	18fb      	adds	r3, r7, r3
     572:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     574:	2308      	movs	r3, #8
     576:	18fb      	adds	r3, r7, r3
     578:	2200      	movs	r2, #0
     57a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     57c:	683b      	ldr	r3, [r7, #0]
     57e:	7a1a      	ldrb	r2, [r3, #8]
     580:	2308      	movs	r3, #8
     582:	18fb      	adds	r3, r7, r3
     584:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     586:	683b      	ldr	r3, [r7, #0]
     588:	681b      	ldr	r3, [r3, #0]
     58a:	b2db      	uxtb	r3, r3
     58c:	2208      	movs	r2, #8
     58e:	18ba      	adds	r2, r7, r2
     590:	0011      	movs	r1, r2
     592:	0018      	movs	r0, r3
     594:	4b2b      	ldr	r3, [pc, #172]	; (644 <extint_chan_set_config+0xf4>)
     596:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     598:	1dfb      	adds	r3, r7, #7
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	0018      	movs	r0, r3
     59e:	4b2a      	ldr	r3, [pc, #168]	; (648 <extint_chan_set_config+0xf8>)
     5a0:	4798      	blx	r3
     5a2:	0003      	movs	r3, r0
     5a4:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     5a6:	1dfb      	adds	r3, r7, #7
     5a8:	781b      	ldrb	r3, [r3, #0]
     5aa:	2207      	movs	r2, #7
     5ac:	4013      	ands	r3, r2
     5ae:	009b      	lsls	r3, r3, #2
     5b0:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     5b2:	683b      	ldr	r3, [r7, #0]
     5b4:	7adb      	ldrb	r3, [r3, #11]
     5b6:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     5b8:	683b      	ldr	r3, [r7, #0]
     5ba:	7a9b      	ldrb	r3, [r3, #10]
     5bc:	2b00      	cmp	r3, #0
     5be:	d003      	beq.n	5c8 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     5c0:	697b      	ldr	r3, [r7, #20]
     5c2:	2208      	movs	r2, #8
     5c4:	4313      	orrs	r3, r2
     5c6:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     5c8:	1dfb      	adds	r3, r7, #7
     5ca:	781b      	ldrb	r3, [r3, #0]
     5cc:	08db      	lsrs	r3, r3, #3
     5ce:	b2db      	uxtb	r3, r3
     5d0:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     5d2:	1dfb      	adds	r3, r7, #7
     5d4:	781b      	ldrb	r3, [r3, #0]
     5d6:	08db      	lsrs	r3, r3, #3
     5d8:	b2db      	uxtb	r3, r3
     5da:	001a      	movs	r2, r3
     5dc:	693b      	ldr	r3, [r7, #16]
     5de:	3206      	adds	r2, #6
     5e0:	0092      	lsls	r2, r2, #2
     5e2:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     5e4:	210f      	movs	r1, #15
     5e6:	68fa      	ldr	r2, [r7, #12]
     5e8:	4091      	lsls	r1, r2
     5ea:	000a      	movs	r2, r1
     5ec:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     5ee:	401a      	ands	r2, r3
			(new_config << config_pos);
     5f0:	6979      	ldr	r1, [r7, #20]
     5f2:	68fb      	ldr	r3, [r7, #12]
     5f4:	4099      	lsls	r1, r3
     5f6:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     5f8:	431a      	orrs	r2, r3
     5fa:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     5fc:	693b      	ldr	r3, [r7, #16]
     5fe:	1d82      	adds	r2, r0, #6
     600:	0092      	lsls	r2, r2, #2
     602:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     604:	683b      	ldr	r3, [r7, #0]
     606:	7a5b      	ldrb	r3, [r3, #9]
     608:	2b00      	cmp	r3, #0
     60a:	d00a      	beq.n	622 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     60c:	693b      	ldr	r3, [r7, #16]
     60e:	695a      	ldr	r2, [r3, #20]
     610:	1dfb      	adds	r3, r7, #7
     612:	781b      	ldrb	r3, [r3, #0]
     614:	2101      	movs	r1, #1
     616:	4099      	lsls	r1, r3
     618:	000b      	movs	r3, r1
     61a:	431a      	orrs	r2, r3
     61c:	693b      	ldr	r3, [r7, #16]
     61e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
     620:	e00a      	b.n	638 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     622:	693b      	ldr	r3, [r7, #16]
     624:	695b      	ldr	r3, [r3, #20]
     626:	1dfa      	adds	r2, r7, #7
     628:	7812      	ldrb	r2, [r2, #0]
     62a:	2101      	movs	r1, #1
     62c:	4091      	lsls	r1, r2
     62e:	000a      	movs	r2, r1
     630:	43d2      	mvns	r2, r2
     632:	401a      	ands	r2, r3
     634:	693b      	ldr	r3, [r7, #16]
     636:	615a      	str	r2, [r3, #20]
}
     638:	46c0      	nop			; (mov r8, r8)
     63a:	46bd      	mov	sp, r7
     63c:	b006      	add	sp, #24
     63e:	bd80      	pop	{r7, pc}
     640:	00000325 	.word	0x00000325
     644:	000057bd 	.word	0x000057bd
     648:	00000379 	.word	0x00000379

0000064c <system_gclk_chan_get_config_defaults>:
{
     64c:	b580      	push	{r7, lr}
     64e:	b082      	sub	sp, #8
     650:	af00      	add	r7, sp, #0
     652:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     654:	687b      	ldr	r3, [r7, #4]
     656:	2200      	movs	r2, #0
     658:	701a      	strb	r2, [r3, #0]
}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	46bd      	mov	sp, r7
     65e:	b002      	add	sp, #8
     660:	bd80      	pop	{r7, pc}
	...

00000664 <system_apb_clock_set_mask>:
{
     664:	b580      	push	{r7, lr}
     666:	b082      	sub	sp, #8
     668:	af00      	add	r7, sp, #0
     66a:	0002      	movs	r2, r0
     66c:	6039      	str	r1, [r7, #0]
     66e:	1dfb      	adds	r3, r7, #7
     670:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     672:	1dfb      	adds	r3, r7, #7
     674:	781b      	ldrb	r3, [r3, #0]
     676:	2b01      	cmp	r3, #1
     678:	d00a      	beq.n	690 <system_apb_clock_set_mask+0x2c>
     67a:	2b02      	cmp	r3, #2
     67c:	d00f      	beq.n	69e <system_apb_clock_set_mask+0x3a>
     67e:	2b00      	cmp	r3, #0
     680:	d114      	bne.n	6ac <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     682:	4b0e      	ldr	r3, [pc, #56]	; (6bc <system_apb_clock_set_mask+0x58>)
     684:	4a0d      	ldr	r2, [pc, #52]	; (6bc <system_apb_clock_set_mask+0x58>)
     686:	6991      	ldr	r1, [r2, #24]
     688:	683a      	ldr	r2, [r7, #0]
     68a:	430a      	orrs	r2, r1
     68c:	619a      	str	r2, [r3, #24]
			break;
     68e:	e00f      	b.n	6b0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     690:	4b0a      	ldr	r3, [pc, #40]	; (6bc <system_apb_clock_set_mask+0x58>)
     692:	4a0a      	ldr	r2, [pc, #40]	; (6bc <system_apb_clock_set_mask+0x58>)
     694:	69d1      	ldr	r1, [r2, #28]
     696:	683a      	ldr	r2, [r7, #0]
     698:	430a      	orrs	r2, r1
     69a:	61da      	str	r2, [r3, #28]
			break;
     69c:	e008      	b.n	6b0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     69e:	4b07      	ldr	r3, [pc, #28]	; (6bc <system_apb_clock_set_mask+0x58>)
     6a0:	4a06      	ldr	r2, [pc, #24]	; (6bc <system_apb_clock_set_mask+0x58>)
     6a2:	6a11      	ldr	r1, [r2, #32]
     6a4:	683a      	ldr	r2, [r7, #0]
     6a6:	430a      	orrs	r2, r1
     6a8:	621a      	str	r2, [r3, #32]
			break;
     6aa:	e001      	b.n	6b0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     6ac:	2317      	movs	r3, #23
     6ae:	e000      	b.n	6b2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     6b0:	2300      	movs	r3, #0
}
     6b2:	0018      	movs	r0, r3
     6b4:	46bd      	mov	sp, r7
     6b6:	b002      	add	sp, #8
     6b8:	bd80      	pop	{r7, pc}
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	40000400 	.word	0x40000400

000006c0 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
     6c0:	b580      	push	{r7, lr}
     6c2:	b084      	sub	sp, #16
     6c4:	af00      	add	r7, sp, #0
     6c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	681b      	ldr	r3, [r3, #0]
     6cc:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     6ce:	68fb      	ldr	r3, [r7, #12]
     6d0:	7a9b      	ldrb	r3, [r3, #10]
     6d2:	b2db      	uxtb	r3, r3
     6d4:	b25b      	sxtb	r3, r3
     6d6:	2b00      	cmp	r3, #0
     6d8:	da01      	bge.n	6de <rtc_calendar_is_syncing+0x1e>
                return true;
     6da:	2301      	movs	r3, #1
     6dc:	e000      	b.n	6e0 <rtc_calendar_is_syncing+0x20>
        }

        return false;
     6de:	2300      	movs	r3, #0
}
     6e0:	0018      	movs	r0, r3
     6e2:	46bd      	mov	sp, r7
     6e4:	b004      	add	sp, #16
     6e6:	bd80      	pop	{r7, pc}

000006e8 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
     6e8:	b580      	push	{r7, lr}
     6ea:	b084      	sub	sp, #16
     6ec:	af00      	add	r7, sp, #0
     6ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	681b      	ldr	r3, [r3, #0]
     6f4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	0018      	movs	r0, r3
     6fc:	4b07      	ldr	r3, [pc, #28]	; (71c <rtc_calendar_enable+0x34>)
     6fe:	4798      	blx	r3
     700:	1e03      	subs	r3, r0, #0
     702:	d1f9      	bne.n	6f8 <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     704:	68fb      	ldr	r3, [r7, #12]
     706:	881b      	ldrh	r3, [r3, #0]
     708:	b29b      	uxth	r3, r3
     70a:	2202      	movs	r2, #2
     70c:	4313      	orrs	r3, r2
     70e:	b29a      	uxth	r2, r3
     710:	68fb      	ldr	r3, [r7, #12]
     712:	801a      	strh	r2, [r3, #0]
}
     714:	46c0      	nop			; (mov r8, r8)
     716:	46bd      	mov	sp, r7
     718:	b004      	add	sp, #16
     71a:	bd80      	pop	{r7, pc}
     71c:	000006c1 	.word	0x000006c1

00000720 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     720:	b580      	push	{r7, lr}
     722:	b084      	sub	sp, #16
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     728:	687b      	ldr	r3, [r7, #4]
     72a:	681b      	ldr	r3, [r3, #0]
     72c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     72e:	46c0      	nop			; (mov r8, r8)
     730:	687b      	ldr	r3, [r7, #4]
     732:	0018      	movs	r0, r3
     734:	4b0a      	ldr	r3, [pc, #40]	; (760 <rtc_calendar_disable+0x40>)
     736:	4798      	blx	r3
     738:	1e03      	subs	r3, r0, #0
     73a:	d1f9      	bne.n	730 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     73c:	68fb      	ldr	r3, [r7, #12]
     73e:	22c1      	movs	r2, #193	; 0xc1
     740:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     742:	68fb      	ldr	r3, [r7, #12]
     744:	22c1      	movs	r2, #193	; 0xc1
     746:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     748:	68fb      	ldr	r3, [r7, #12]
     74a:	881b      	ldrh	r3, [r3, #0]
     74c:	b29b      	uxth	r3, r3
     74e:	2202      	movs	r2, #2
     750:	4393      	bics	r3, r2
     752:	b29a      	uxth	r2, r3
     754:	68fb      	ldr	r3, [r7, #12]
     756:	801a      	strh	r2, [r3, #0]
}
     758:	46c0      	nop			; (mov r8, r8)
     75a:	46bd      	mov	sp, r7
     75c:	b004      	add	sp, #16
     75e:	bd80      	pop	{r7, pc}
     760:	000006c1 	.word	0x000006c1

00000764 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     764:	b580      	push	{r7, lr}
     766:	b084      	sub	sp, #16
     768:	af00      	add	r7, sp, #0
     76a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	681b      	ldr	r3, [r3, #0]
     770:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     772:	687b      	ldr	r3, [r7, #4]
     774:	0018      	movs	r0, r3
     776:	4b0a      	ldr	r3, [pc, #40]	; (7a0 <rtc_calendar_reset+0x3c>)
     778:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	0018      	movs	r0, r3
     780:	4b08      	ldr	r3, [pc, #32]	; (7a4 <rtc_calendar_reset+0x40>)
     782:	4798      	blx	r3
     784:	1e03      	subs	r3, r0, #0
     786:	d1f9      	bne.n	77c <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     788:	68fb      	ldr	r3, [r7, #12]
     78a:	881b      	ldrh	r3, [r3, #0]
     78c:	b29b      	uxth	r3, r3
     78e:	2201      	movs	r2, #1
     790:	4313      	orrs	r3, r2
     792:	b29a      	uxth	r2, r3
     794:	68fb      	ldr	r3, [r7, #12]
     796:	801a      	strh	r2, [r3, #0]
}
     798:	46c0      	nop			; (mov r8, r8)
     79a:	46bd      	mov	sp, r7
     79c:	b004      	add	sp, #16
     79e:	bd80      	pop	{r7, pc}
     7a0:	00000721 	.word	0x00000721
     7a4:	000006c1 	.word	0x000006c1

000007a8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     7a8:	b580      	push	{r7, lr}
     7aa:	b084      	sub	sp, #16
     7ac:	af00      	add	r7, sp, #0
     7ae:	6078      	str	r0, [r7, #4]
     7b0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     7b2:	683b      	ldr	r3, [r7, #0]
     7b4:	88db      	ldrh	r3, [r3, #6]
     7b6:	001a      	movs	r2, r3
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	88db      	ldrh	r3, [r3, #6]
     7bc:	1ad3      	subs	r3, r2, r3
     7be:	069b      	lsls	r3, r3, #26
     7c0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     7c2:	683b      	ldr	r3, [r7, #0]
     7c4:	795b      	ldrb	r3, [r3, #5]
     7c6:	059b      	lsls	r3, r3, #22
     7c8:	001a      	movs	r2, r3
     7ca:	68fb      	ldr	r3, [r7, #12]
     7cc:	4313      	orrs	r3, r2
     7ce:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	791b      	ldrb	r3, [r3, #4]
     7d4:	045b      	lsls	r3, r3, #17
     7d6:	001a      	movs	r2, r3
     7d8:	68fb      	ldr	r3, [r7, #12]
     7da:	4313      	orrs	r3, r2
     7dc:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     7de:	683b      	ldr	r3, [r7, #0]
     7e0:	789b      	ldrb	r3, [r3, #2]
     7e2:	031b      	lsls	r3, r3, #12
     7e4:	001a      	movs	r2, r3
     7e6:	68fb      	ldr	r3, [r7, #12]
     7e8:	4313      	orrs	r3, r2
     7ea:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	791b      	ldrb	r3, [r3, #4]
     7f0:	2201      	movs	r2, #1
     7f2:	4053      	eors	r3, r2
     7f4:	b2db      	uxtb	r3, r3
     7f6:	2b00      	cmp	r3, #0
     7f8:	d008      	beq.n	80c <rtc_calendar_time_to_register_value+0x64>
     7fa:	683b      	ldr	r3, [r7, #0]
     7fc:	78db      	ldrb	r3, [r3, #3]
     7fe:	2b00      	cmp	r3, #0
     800:	d004      	beq.n	80c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     802:	68fb      	ldr	r3, [r7, #12]
     804:	2280      	movs	r2, #128	; 0x80
     806:	0252      	lsls	r2, r2, #9
     808:	4313      	orrs	r3, r2
     80a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     80c:	683b      	ldr	r3, [r7, #0]
     80e:	785b      	ldrb	r3, [r3, #1]
     810:	019b      	lsls	r3, r3, #6
     812:	001a      	movs	r2, r3
     814:	68fb      	ldr	r3, [r7, #12]
     816:	4313      	orrs	r3, r2
     818:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     81a:	683b      	ldr	r3, [r7, #0]
     81c:	781b      	ldrb	r3, [r3, #0]
     81e:	001a      	movs	r2, r3
     820:	68fb      	ldr	r3, [r7, #12]
     822:	4313      	orrs	r3, r2
     824:	60fb      	str	r3, [r7, #12]

	return register_value;
     826:	68fb      	ldr	r3, [r7, #12]
}
     828:	0018      	movs	r0, r3
     82a:	46bd      	mov	sp, r7
     82c:	b004      	add	sp, #16
     82e:	bd80      	pop	{r7, pc}

00000830 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
     830:	b580      	push	{r7, lr}
     832:	b084      	sub	sp, #16
     834:	af00      	add	r7, sp, #0
     836:	6078      	str	r0, [r7, #4]
     838:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	681b      	ldr	r3, [r3, #0]
     83e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     840:	683b      	ldr	r3, [r7, #0]
     842:	881a      	ldrh	r2, [r3, #0]
     844:	230e      	movs	r3, #14
     846:	18fb      	adds	r3, r7, r3
     848:	2108      	movs	r1, #8
     84a:	430a      	orrs	r2, r1
     84c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
     84e:	683b      	ldr	r3, [r7, #0]
     850:	791b      	ldrb	r3, [r3, #4]
     852:	2201      	movs	r2, #1
     854:	4053      	eors	r3, r2
     856:	b2db      	uxtb	r3, r3
     858:	2b00      	cmp	r3, #0
     85a:	d007      	beq.n	86c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     85c:	230e      	movs	r3, #14
     85e:	18fb      	adds	r3, r7, r3
     860:	220e      	movs	r2, #14
     862:	18ba      	adds	r2, r7, r2
     864:	8812      	ldrh	r2, [r2, #0]
     866:	2140      	movs	r1, #64	; 0x40
     868:	430a      	orrs	r2, r1
     86a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
     86c:	683b      	ldr	r3, [r7, #0]
     86e:	789b      	ldrb	r3, [r3, #2]
     870:	2b00      	cmp	r3, #0
     872:	d007      	beq.n	884 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     874:	230e      	movs	r3, #14
     876:	18fb      	adds	r3, r7, r3
     878:	220e      	movs	r2, #14
     87a:	18ba      	adds	r2, r7, r2
     87c:	8812      	ldrh	r2, [r2, #0]
     87e:	2180      	movs	r1, #128	; 0x80
     880:	430a      	orrs	r2, r1
     882:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     884:	68bb      	ldr	r3, [r7, #8]
     886:	220e      	movs	r2, #14
     888:	18ba      	adds	r2, r7, r2
     88a:	8812      	ldrh	r2, [r2, #0]
     88c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     88e:	683b      	ldr	r3, [r7, #0]
     890:	78db      	ldrb	r3, [r3, #3]
     892:	2b00      	cmp	r3, #0
     894:	d008      	beq.n	8a8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     896:	68bb      	ldr	r3, [r7, #8]
     898:	885b      	ldrh	r3, [r3, #2]
     89a:	b29b      	uxth	r3, r3
     89c:	2280      	movs	r2, #128	; 0x80
     89e:	01d2      	lsls	r2, r2, #7
     8a0:	4313      	orrs	r3, r2
     8a2:	b29a      	uxth	r2, r3
     8a4:	68bb      	ldr	r3, [r7, #8]
     8a6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     8a8:	230d      	movs	r3, #13
     8aa:	18fb      	adds	r3, r7, r3
     8ac:	2200      	movs	r2, #0
     8ae:	701a      	strb	r2, [r3, #0]
     8b0:	e017      	b.n	8e2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     8b2:	230d      	movs	r3, #13
     8b4:	18fb      	adds	r3, r7, r3
     8b6:	781a      	ldrb	r2, [r3, #0]
     8b8:	0013      	movs	r3, r2
     8ba:	009b      	lsls	r3, r3, #2
     8bc:	189b      	adds	r3, r3, r2
     8be:	005b      	lsls	r3, r3, #1
     8c0:	3308      	adds	r3, #8
     8c2:	683a      	ldr	r2, [r7, #0]
     8c4:	18d1      	adds	r1, r2, r3
     8c6:	230d      	movs	r3, #13
     8c8:	18fb      	adds	r3, r7, r3
     8ca:	781a      	ldrb	r2, [r3, #0]
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	0018      	movs	r0, r3
     8d0:	4b08      	ldr	r3, [pc, #32]	; (8f4 <_rtc_calendar_set_config+0xc4>)
     8d2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     8d4:	230d      	movs	r3, #13
     8d6:	18fb      	adds	r3, r7, r3
     8d8:	781a      	ldrb	r2, [r3, #0]
     8da:	230d      	movs	r3, #13
     8dc:	18fb      	adds	r3, r7, r3
     8de:	3201      	adds	r2, #1
     8e0:	701a      	strb	r2, [r3, #0]
     8e2:	230d      	movs	r3, #13
     8e4:	18fb      	adds	r3, r7, r3
     8e6:	781b      	ldrb	r3, [r3, #0]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d0e2      	beq.n	8b2 <_rtc_calendar_set_config+0x82>
	}
}
     8ec:	46c0      	nop			; (mov r8, r8)
     8ee:	46bd      	mov	sp, r7
     8f0:	b004      	add	sp, #16
     8f2:	bd80      	pop	{r7, pc}
     8f4:	000009d1 	.word	0x000009d1

000008f8 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
     8f8:	b580      	push	{r7, lr}
     8fa:	b086      	sub	sp, #24
     8fc:	af00      	add	r7, sp, #0
     8fe:	60f8      	str	r0, [r7, #12]
     900:	60b9      	str	r1, [r7, #8]
     902:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     904:	68fb      	ldr	r3, [r7, #12]
     906:	68ba      	ldr	r2, [r7, #8]
     908:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     90a:	2120      	movs	r1, #32
     90c:	2000      	movs	r0, #0
     90e:	4b18      	ldr	r3, [pc, #96]	; (970 <rtc_calendar_init+0x78>)
     910:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     912:	2314      	movs	r3, #20
     914:	18fb      	adds	r3, r7, r3
     916:	0018      	movs	r0, r3
     918:	4b16      	ldr	r3, [pc, #88]	; (974 <rtc_calendar_init+0x7c>)
     91a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     91c:	2314      	movs	r3, #20
     91e:	18fb      	adds	r3, r7, r3
     920:	2202      	movs	r2, #2
     922:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     924:	2314      	movs	r3, #20
     926:	18fb      	adds	r3, r7, r3
     928:	0019      	movs	r1, r3
     92a:	2004      	movs	r0, #4
     92c:	4b12      	ldr	r3, [pc, #72]	; (978 <rtc_calendar_init+0x80>)
     92e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     930:	2004      	movs	r0, #4
     932:	4b12      	ldr	r3, [pc, #72]	; (97c <rtc_calendar_init+0x84>)
     934:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
     936:	68fb      	ldr	r3, [r7, #12]
     938:	0018      	movs	r0, r3
     93a:	4b11      	ldr	r3, [pc, #68]	; (980 <rtc_calendar_init+0x88>)
     93c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
     93e:	687b      	ldr	r3, [r7, #4]
     940:	791a      	ldrb	r2, [r3, #4]
     942:	68fb      	ldr	r3, [r7, #12]
     944:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     946:	687b      	ldr	r3, [r7, #4]
     948:	78da      	ldrb	r2, [r3, #3]
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
     94e:	687b      	ldr	r3, [r7, #4]
     950:	88da      	ldrh	r2, [r3, #6]
     952:	68fb      	ldr	r3, [r7, #12]
     954:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     956:	4b0b      	ldr	r3, [pc, #44]	; (984 <rtc_calendar_init+0x8c>)
     958:	68fa      	ldr	r2, [r7, #12]
     95a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
     95c:	687a      	ldr	r2, [r7, #4]
     95e:	68fb      	ldr	r3, [r7, #12]
     960:	0011      	movs	r1, r2
     962:	0018      	movs	r0, r3
     964:	4b08      	ldr	r3, [pc, #32]	; (988 <rtc_calendar_init+0x90>)
     966:	4798      	blx	r3
}
     968:	46c0      	nop			; (mov r8, r8)
     96a:	46bd      	mov	sp, r7
     96c:	b006      	add	sp, #24
     96e:	bd80      	pop	{r7, pc}
     970:	00000665 	.word	0x00000665
     974:	0000064d 	.word	0x0000064d
     978:	000054d1 	.word	0x000054d1
     97c:	00005515 	.word	0x00005515
     980:	00000765 	.word	0x00000765
     984:	20000134 	.word	0x20000134
     988:	00000831 	.word	0x00000831

0000098c <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     98c:	b580      	push	{r7, lr}
     98e:	b084      	sub	sp, #16
     990:	af00      	add	r7, sp, #0
     992:	6078      	str	r0, [r7, #4]
     994:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     996:	687b      	ldr	r3, [r7, #4]
     998:	681b      	ldr	r3, [r3, #0]
     99a:	60fb      	str	r3, [r7, #12]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     99c:	683a      	ldr	r2, [r7, #0]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	0011      	movs	r1, r2
     9a2:	0018      	movs	r0, r3
     9a4:	4b08      	ldr	r3, [pc, #32]	; (9c8 <rtc_calendar_set_time+0x3c>)
     9a6:	4798      	blx	r3
     9a8:	0003      	movs	r3, r0
     9aa:	60bb      	str	r3, [r7, #8]

	while (rtc_calendar_is_syncing(module)) {
     9ac:	46c0      	nop			; (mov r8, r8)
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	0018      	movs	r0, r3
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <rtc_calendar_set_time+0x40>)
     9b4:	4798      	blx	r3
     9b6:	1e03      	subs	r3, r0, #0
     9b8:	d1f9      	bne.n	9ae <rtc_calendar_set_time+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     9ba:	68fb      	ldr	r3, [r7, #12]
     9bc:	68ba      	ldr	r2, [r7, #8]
     9be:	611a      	str	r2, [r3, #16]
}
     9c0:	46c0      	nop			; (mov r8, r8)
     9c2:	46bd      	mov	sp, r7
     9c4:	b004      	add	sp, #16
     9c6:	bd80      	pop	{r7, pc}
     9c8:	000007a9 	.word	0x000007a9
     9cc:	000006c1 	.word	0x000006c1

000009d0 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     9d0:	b580      	push	{r7, lr}
     9d2:	b086      	sub	sp, #24
     9d4:	af00      	add	r7, sp, #0
     9d6:	60f8      	str	r0, [r7, #12]
     9d8:	60b9      	str	r1, [r7, #8]
     9da:	1dfb      	adds	r3, r7, #7
     9dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9de:	68fb      	ldr	r3, [r7, #12]
     9e0:	681b      	ldr	r3, [r3, #0]
     9e2:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     9e4:	1dfb      	adds	r3, r7, #7
     9e6:	781b      	ldrb	r3, [r3, #0]
     9e8:	2b01      	cmp	r3, #1
     9ea:	d901      	bls.n	9f0 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
     9ec:	2317      	movs	r3, #23
     9ee:	e021      	b.n	a34 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     9f0:	68ba      	ldr	r2, [r7, #8]
     9f2:	68fb      	ldr	r3, [r7, #12]
     9f4:	0011      	movs	r1, r2
     9f6:	0018      	movs	r0, r3
     9f8:	4b10      	ldr	r3, [pc, #64]	; (a3c <rtc_calendar_set_alarm+0x6c>)
     9fa:	4798      	blx	r3
     9fc:	0003      	movs	r3, r0
     9fe:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
     a00:	46c0      	nop			; (mov r8, r8)
     a02:	68fb      	ldr	r3, [r7, #12]
     a04:	0018      	movs	r0, r3
     a06:	4b0e      	ldr	r3, [pc, #56]	; (a40 <rtc_calendar_set_alarm+0x70>)
     a08:	4798      	blx	r3
     a0a:	1e03      	subs	r3, r0, #0
     a0c:	d1f9      	bne.n	a02 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     a0e:	1dfb      	adds	r3, r7, #7
     a10:	781a      	ldrb	r2, [r3, #0]
     a12:	697b      	ldr	r3, [r7, #20]
     a14:	3203      	adds	r2, #3
     a16:	00d2      	lsls	r2, r2, #3
     a18:	6939      	ldr	r1, [r7, #16]
     a1a:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     a1c:	1dfb      	adds	r3, r7, #7
     a1e:	781b      	ldrb	r3, [r3, #0]
     a20:	68ba      	ldr	r2, [r7, #8]
     a22:	7a11      	ldrb	r1, [r2, #8]
     a24:	697a      	ldr	r2, [r7, #20]
     a26:	3303      	adds	r3, #3
     a28:	00db      	lsls	r3, r3, #3
     a2a:	18d3      	adds	r3, r2, r3
     a2c:	3304      	adds	r3, #4
     a2e:	1c0a      	adds	r2, r1, #0
     a30:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
     a32:	2300      	movs	r3, #0
}
     a34:	0018      	movs	r0, r3
     a36:	46bd      	mov	sp, r7
     a38:	b006      	add	sp, #24
     a3a:	bd80      	pop	{r7, pc}
     a3c:	000007a9 	.word	0x000007a9
     a40:	000006c1 	.word	0x000006c1

00000a44 <rtc_calendar_frequency_correction>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_calendar_frequency_correction(
		struct rtc_module *const module,
		const int8_t value)
{
     a44:	b580      	push	{r7, lr}
     a46:	b084      	sub	sp, #16
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
     a4c:	000a      	movs	r2, r1
     a4e:	1cfb      	adds	r3, r7, #3
     a50:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a52:	687b      	ldr	r3, [r7, #4]
     a54:	681b      	ldr	r3, [r3, #0]
     a56:	60bb      	str	r3, [r7, #8]

	/* Check if valid argument. */
	if (abs(value) > 0x7F) {
     a58:	1cfb      	adds	r3, r7, #3
     a5a:	781b      	ldrb	r3, [r3, #0]
     a5c:	b25b      	sxtb	r3, r3
     a5e:	17da      	asrs	r2, r3, #31
     a60:	189b      	adds	r3, r3, r2
     a62:	4053      	eors	r3, r2
     a64:	2b7f      	cmp	r3, #127	; 0x7f
     a66:	dd01      	ble.n	a6c <rtc_calendar_frequency_correction+0x28>
		/* Value bigger than allowed, return invalid argument. */
		return STATUS_ERR_INVALID_ARG;
     a68:	2317      	movs	r3, #23
     a6a:	e01a      	b.n	aa2 <rtc_calendar_frequency_correction+0x5e>
	}

	uint32_t new_correction_value;

	/* Load the new correction value as a positive value, sign added later */
	new_correction_value = abs(value);
     a6c:	1cfb      	adds	r3, r7, #3
     a6e:	781b      	ldrb	r3, [r3, #0]
     a70:	b25b      	sxtb	r3, r3
     a72:	17da      	asrs	r2, r3, #31
     a74:	189b      	adds	r3, r3, r2
     a76:	4053      	eors	r3, r2
     a78:	60fb      	str	r3, [r7, #12]

	/* Convert to positive value and adjust register sign bit. */
	if (value < 0) {
     a7a:	1cfb      	adds	r3, r7, #3
     a7c:	781b      	ldrb	r3, [r3, #0]
     a7e:	2b7f      	cmp	r3, #127	; 0x7f
     a80:	d903      	bls.n	a8a <rtc_calendar_frequency_correction+0x46>
		new_correction_value |= RTC_FREQCORR_SIGN;
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	2280      	movs	r2, #128	; 0x80
     a86:	4313      	orrs	r3, r2
     a88:	60fb      	str	r3, [r7, #12]
	}

	while (rtc_calendar_is_syncing(module)) {
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	687b      	ldr	r3, [r7, #4]
     a8e:	0018      	movs	r0, r3
     a90:	4b06      	ldr	r3, [pc, #24]	; (aac <rtc_calendar_frequency_correction+0x68>)
     a92:	4798      	blx	r3
     a94:	1e03      	subs	r3, r0, #0
     a96:	d1f9      	bne.n	a8c <rtc_calendar_frequency_correction+0x48>
		/* Wait for synchronization */
	}

	/* Set value. */
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;
     a98:	68fb      	ldr	r3, [r7, #12]
     a9a:	b2da      	uxtb	r2, r3
     a9c:	68bb      	ldr	r3, [r7, #8]
     a9e:	731a      	strb	r2, [r3, #12]

	return STATUS_OK;
     aa0:	2300      	movs	r3, #0
}
     aa2:	0018      	movs	r0, r3
     aa4:	46bd      	mov	sp, r7
     aa6:	b004      	add	sp, #16
     aa8:	bd80      	pop	{r7, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	000006c1 	.word	0x000006c1

00000ab0 <system_gclk_chan_get_config_defaults>:
{
     ab0:	b580      	push	{r7, lr}
     ab2:	b082      	sub	sp, #8
     ab4:	af00      	add	r7, sp, #0
     ab6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	2200      	movs	r2, #0
     abc:	701a      	strb	r2, [r3, #0]
}
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	46bd      	mov	sp, r7
     ac2:	b002      	add	sp, #8
     ac4:	bd80      	pop	{r7, pc}

00000ac6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
     ac8:	b08d      	sub	sp, #52	; 0x34
     aca:	af00      	add	r7, sp, #0
     acc:	60b8      	str	r0, [r7, #8]
     ace:	60f9      	str	r1, [r7, #12]
     ad0:	603a      	str	r2, [r7, #0]
     ad2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     ad4:	2300      	movs	r3, #0
     ad6:	2400      	movs	r4, #0
     ad8:	623b      	str	r3, [r7, #32]
     ada:	627c      	str	r4, [r7, #36]	; 0x24
     adc:	2300      	movs	r3, #0
     ade:	2400      	movs	r4, #0
     ae0:	61bb      	str	r3, [r7, #24]
     ae2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     ae4:	233f      	movs	r3, #63	; 0x3f
     ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
     ae8:	e053      	b.n	b92 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     aec:	3b20      	subs	r3, #32
     aee:	2b00      	cmp	r3, #0
     af0:	db04      	blt.n	afc <long_division+0x36>
     af2:	2201      	movs	r2, #1
     af4:	409a      	lsls	r2, r3
     af6:	0013      	movs	r3, r2
     af8:	617b      	str	r3, [r7, #20]
     afa:	e00b      	b.n	b14 <long_division+0x4e>
     afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     afe:	2220      	movs	r2, #32
     b00:	1ad3      	subs	r3, r2, r3
     b02:	2201      	movs	r2, #1
     b04:	40da      	lsrs	r2, r3
     b06:	0013      	movs	r3, r2
     b08:	2100      	movs	r1, #0
     b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b0c:	4091      	lsls	r1, r2
     b0e:	000a      	movs	r2, r1
     b10:	4313      	orrs	r3, r2
     b12:	617b      	str	r3, [r7, #20]
     b14:	2201      	movs	r2, #1
     b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b18:	409a      	lsls	r2, r3
     b1a:	0013      	movs	r3, r2
     b1c:	613b      	str	r3, [r7, #16]

		r = r << 1;
     b1e:	69bb      	ldr	r3, [r7, #24]
     b20:	69fc      	ldr	r4, [r7, #28]
     b22:	18db      	adds	r3, r3, r3
     b24:	4164      	adcs	r4, r4
     b26:	61bb      	str	r3, [r7, #24]
     b28:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     b2a:	68bb      	ldr	r3, [r7, #8]
     b2c:	693a      	ldr	r2, [r7, #16]
     b2e:	401a      	ands	r2, r3
     b30:	0015      	movs	r5, r2
     b32:	68fb      	ldr	r3, [r7, #12]
     b34:	697a      	ldr	r2, [r7, #20]
     b36:	401a      	ands	r2, r3
     b38:	0016      	movs	r6, r2
     b3a:	002b      	movs	r3, r5
     b3c:	4333      	orrs	r3, r6
     b3e:	d007      	beq.n	b50 <long_division+0x8a>
			r |= 0x01;
     b40:	69bb      	ldr	r3, [r7, #24]
     b42:	2201      	movs	r2, #1
     b44:	4313      	orrs	r3, r2
     b46:	61bb      	str	r3, [r7, #24]
     b48:	69fb      	ldr	r3, [r7, #28]
     b4a:	2200      	movs	r2, #0
     b4c:	4313      	orrs	r3, r2
     b4e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     b50:	687a      	ldr	r2, [r7, #4]
     b52:	69fb      	ldr	r3, [r7, #28]
     b54:	429a      	cmp	r2, r3
     b56:	d819      	bhi.n	b8c <long_division+0xc6>
     b58:	687a      	ldr	r2, [r7, #4]
     b5a:	69fb      	ldr	r3, [r7, #28]
     b5c:	429a      	cmp	r2, r3
     b5e:	d103      	bne.n	b68 <long_division+0xa2>
     b60:	683a      	ldr	r2, [r7, #0]
     b62:	69bb      	ldr	r3, [r7, #24]
     b64:	429a      	cmp	r2, r3
     b66:	d811      	bhi.n	b8c <long_division+0xc6>
			r = r - d;
     b68:	69b9      	ldr	r1, [r7, #24]
     b6a:	69fa      	ldr	r2, [r7, #28]
     b6c:	683b      	ldr	r3, [r7, #0]
     b6e:	687c      	ldr	r4, [r7, #4]
     b70:	1ac9      	subs	r1, r1, r3
     b72:	41a2      	sbcs	r2, r4
     b74:	000b      	movs	r3, r1
     b76:	0014      	movs	r4, r2
     b78:	61bb      	str	r3, [r7, #24]
     b7a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     b7c:	6a3a      	ldr	r2, [r7, #32]
     b7e:	693b      	ldr	r3, [r7, #16]
     b80:	4313      	orrs	r3, r2
     b82:	623b      	str	r3, [r7, #32]
     b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b86:	697b      	ldr	r3, [r7, #20]
     b88:	4313      	orrs	r3, r2
     b8a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b8e:	3b01      	subs	r3, #1
     b90:	62fb      	str	r3, [r7, #44]	; 0x2c
     b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b94:	2b00      	cmp	r3, #0
     b96:	daa8      	bge.n	aea <long_division+0x24>
		}
	}

	return q;
     b98:	6a3b      	ldr	r3, [r7, #32]
     b9a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     b9c:	0018      	movs	r0, r3
     b9e:	0021      	movs	r1, r4
     ba0:	46bd      	mov	sp, r7
     ba2:	b00d      	add	sp, #52	; 0x34
     ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ba6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     ba6:	b580      	push	{r7, lr}
     ba8:	b086      	sub	sp, #24
     baa:	af00      	add	r7, sp, #0
     bac:	60f8      	str	r0, [r7, #12]
     bae:	60b9      	str	r1, [r7, #8]
     bb0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     bb2:	2316      	movs	r3, #22
     bb4:	18fb      	adds	r3, r7, r3
     bb6:	2200      	movs	r2, #0
     bb8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     bba:	68bb      	ldr	r3, [r7, #8]
     bbc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     bbe:	68bb      	ldr	r3, [r7, #8]
     bc0:	085a      	lsrs	r2, r3, #1
     bc2:	68fb      	ldr	r3, [r7, #12]
     bc4:	429a      	cmp	r2, r3
     bc6:	d201      	bcs.n	bcc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bc8:	2340      	movs	r3, #64	; 0x40
     bca:	e026      	b.n	c1a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     bcc:	68bb      	ldr	r3, [r7, #8]
     bce:	085b      	lsrs	r3, r3, #1
     bd0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     bd2:	e00a      	b.n	bea <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     bd4:	693a      	ldr	r2, [r7, #16]
     bd6:	68fb      	ldr	r3, [r7, #12]
     bd8:	1ad3      	subs	r3, r2, r3
     bda:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     bdc:	2316      	movs	r3, #22
     bde:	18fb      	adds	r3, r7, r3
     be0:	881a      	ldrh	r2, [r3, #0]
     be2:	2316      	movs	r3, #22
     be4:	18fb      	adds	r3, r7, r3
     be6:	3201      	adds	r2, #1
     be8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     bea:	693a      	ldr	r2, [r7, #16]
     bec:	68fb      	ldr	r3, [r7, #12]
     bee:	429a      	cmp	r2, r3
     bf0:	d2f0      	bcs.n	bd4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     bf2:	2316      	movs	r3, #22
     bf4:	18fb      	adds	r3, r7, r3
     bf6:	2216      	movs	r2, #22
     bf8:	18ba      	adds	r2, r7, r2
     bfa:	8812      	ldrh	r2, [r2, #0]
     bfc:	3a01      	subs	r2, #1
     bfe:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     c00:	2316      	movs	r3, #22
     c02:	18fb      	adds	r3, r7, r3
     c04:	881b      	ldrh	r3, [r3, #0]
     c06:	2bff      	cmp	r3, #255	; 0xff
     c08:	d901      	bls.n	c0e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c0a:	2340      	movs	r3, #64	; 0x40
     c0c:	e005      	b.n	c1a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	2216      	movs	r2, #22
     c12:	18ba      	adds	r2, r7, r2
     c14:	8812      	ldrh	r2, [r2, #0]
     c16:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     c18:	2300      	movs	r3, #0
	}
}
     c1a:	0018      	movs	r0, r3
     c1c:	46bd      	mov	sp, r7
     c1e:	b006      	add	sp, #24
     c20:	bd80      	pop	{r7, pc}
	...

00000c24 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     c24:	b5f0      	push	{r4, r5, r6, r7, lr}
     c26:	b0a1      	sub	sp, #132	; 0x84
     c28:	af00      	add	r7, sp, #0
     c2a:	64f8      	str	r0, [r7, #76]	; 0x4c
     c2c:	64b9      	str	r1, [r7, #72]	; 0x48
     c2e:	647a      	str	r2, [r7, #68]	; 0x44
     c30:	2243      	movs	r2, #67	; 0x43
     c32:	18ba      	adds	r2, r7, r2
     c34:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     c36:	2300      	movs	r3, #0
     c38:	2400      	movs	r4, #0
     c3a:	673b      	str	r3, [r7, #112]	; 0x70
     c3c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     c3e:	2300      	movs	r3, #0
     c40:	2400      	movs	r4, #0
     c42:	66bb      	str	r3, [r7, #104]	; 0x68
     c44:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     c46:	2300      	movs	r3, #0
     c48:	2400      	movs	r4, #0
     c4a:	67bb      	str	r3, [r7, #120]	; 0x78
     c4c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     c4e:	2300      	movs	r3, #0
     c50:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c52:	2358      	movs	r3, #88	; 0x58
     c54:	2240      	movs	r2, #64	; 0x40
     c56:	4694      	mov	ip, r2
     c58:	44bc      	add	ip, r7
     c5a:	4463      	add	r3, ip
     c5c:	781a      	ldrb	r2, [r3, #0]
     c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     c60:	435a      	muls	r2, r3
     c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     c64:	429a      	cmp	r2, r3
     c66:	d901      	bls.n	c6c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c68:	2340      	movs	r3, #64	; 0x40
     c6a:	e0b3      	b.n	dd4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     c6c:	2343      	movs	r3, #67	; 0x43
     c6e:	18fb      	adds	r3, r7, r3
     c70:	781b      	ldrb	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d13d      	bne.n	cf2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     c76:	2358      	movs	r3, #88	; 0x58
     c78:	2240      	movs	r2, #64	; 0x40
     c7a:	4694      	mov	ip, r2
     c7c:	44bc      	add	ip, r7
     c7e:	4463      	add	r3, ip
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	b2db      	uxtb	r3, r3
     c84:	613b      	str	r3, [r7, #16]
     c86:	2300      	movs	r3, #0
     c88:	617b      	str	r3, [r7, #20]
     c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     c8c:	60bb      	str	r3, [r7, #8]
     c8e:	2300      	movs	r3, #0
     c90:	60fb      	str	r3, [r7, #12]
     c92:	4c52      	ldr	r4, [pc, #328]	; (ddc <_sercom_get_async_baud_val+0x1b8>)
     c94:	68ba      	ldr	r2, [r7, #8]
     c96:	68fb      	ldr	r3, [r7, #12]
     c98:	6938      	ldr	r0, [r7, #16]
     c9a:	6979      	ldr	r1, [r7, #20]
     c9c:	47a0      	blx	r4
     c9e:	0003      	movs	r3, r0
     ca0:	000c      	movs	r4, r1
     ca2:	001b      	movs	r3, r3
     ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
     ca6:	2300      	movs	r3, #0
     ca8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     cac:	603b      	str	r3, [r7, #0]
     cae:	2300      	movs	r3, #0
     cb0:	607b      	str	r3, [r7, #4]
     cb2:	6db8      	ldr	r0, [r7, #88]	; 0x58
     cb4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     cb6:	683a      	ldr	r2, [r7, #0]
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	4c49      	ldr	r4, [pc, #292]	; (de0 <_sercom_get_async_baud_val+0x1bc>)
     cbc:	47a0      	blx	r4
     cbe:	0003      	movs	r3, r0
     cc0:	000c      	movs	r4, r1
     cc2:	673b      	str	r3, [r7, #112]	; 0x70
     cc4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     cc6:	2100      	movs	r1, #0
     cc8:	2201      	movs	r2, #1
     cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     ccc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     cce:	1ac9      	subs	r1, r1, r3
     cd0:	41a2      	sbcs	r2, r4
     cd2:	000b      	movs	r3, r1
     cd4:	0014      	movs	r4, r2
     cd6:	66bb      	str	r3, [r7, #104]	; 0x68
     cd8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     cdc:	0c1b      	lsrs	r3, r3, #16
     cde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     ce0:	0416      	lsls	r6, r2, #16
     ce2:	431e      	orrs	r6, r3
     ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     ce6:	041d      	lsls	r5, r3, #16
     ce8:	0033      	movs	r3, r6
     cea:	67bb      	str	r3, [r7, #120]	; 0x78
     cec:	2300      	movs	r3, #0
     cee:	67fb      	str	r3, [r7, #124]	; 0x7c
     cf0:	e06a      	b.n	dc8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     cf2:	2343      	movs	r3, #67	; 0x43
     cf4:	18fb      	adds	r3, r7, r3
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	2b01      	cmp	r3, #1
     cfa:	d165      	bne.n	dc8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     cfe:	633b      	str	r3, [r7, #48]	; 0x30
     d00:	2300      	movs	r3, #0
     d02:	637b      	str	r3, [r7, #52]	; 0x34
     d04:	2358      	movs	r3, #88	; 0x58
     d06:	2240      	movs	r2, #64	; 0x40
     d08:	4694      	mov	ip, r2
     d0a:	44bc      	add	ip, r7
     d0c:	4463      	add	r3, ip
     d0e:	781b      	ldrb	r3, [r3, #0]
     d10:	b2db      	uxtb	r3, r3
     d12:	62bb      	str	r3, [r7, #40]	; 0x28
     d14:	2300      	movs	r3, #0
     d16:	62fb      	str	r3, [r7, #44]	; 0x2c
     d18:	4c30      	ldr	r4, [pc, #192]	; (ddc <_sercom_get_async_baud_val+0x1b8>)
     d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
     d20:	6b79      	ldr	r1, [r7, #52]	; 0x34
     d22:	47a0      	blx	r4
     d24:	0003      	movs	r3, r0
     d26:	000c      	movs	r4, r1
     d28:	65bb      	str	r3, [r7, #88]	; 0x58
     d2a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     d2e:	623b      	str	r3, [r7, #32]
     d30:	2300      	movs	r3, #0
     d32:	627b      	str	r3, [r7, #36]	; 0x24
     d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     d36:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     d38:	001a      	movs	r2, r3
     d3a:	0023      	movs	r3, r4
     d3c:	6a38      	ldr	r0, [r7, #32]
     d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
     d40:	4c27      	ldr	r4, [pc, #156]	; (de0 <_sercom_get_async_baud_val+0x1bc>)
     d42:	47a0      	blx	r4
     d44:	0003      	movs	r3, r0
     d46:	000c      	movs	r4, r1
     d48:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     d4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     d4c:	2380      	movs	r3, #128	; 0x80
     d4e:	019b      	lsls	r3, r3, #6
     d50:	429a      	cmp	r2, r3
     d52:	d901      	bls.n	d58 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d54:	2340      	movs	r3, #64	; 0x40
     d56:	e03d      	b.n	dd4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     d5a:	61bb      	str	r3, [r7, #24]
     d5c:	2300      	movs	r3, #0
     d5e:	61fb      	str	r3, [r7, #28]
     d60:	69b9      	ldr	r1, [r7, #24]
     d62:	69fa      	ldr	r2, [r7, #28]
     d64:	000b      	movs	r3, r1
     d66:	0f5b      	lsrs	r3, r3, #29
     d68:	0010      	movs	r0, r2
     d6a:	00c0      	lsls	r0, r0, #3
     d6c:	63f8      	str	r0, [r7, #60]	; 0x3c
     d6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     d70:	4318      	orrs	r0, r3
     d72:	63f8      	str	r0, [r7, #60]	; 0x3c
     d74:	000b      	movs	r3, r1
     d76:	00db      	lsls	r3, r3, #3
     d78:	63bb      	str	r3, [r7, #56]	; 0x38
     d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     d7c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     d7e:	001a      	movs	r2, r3
     d80:	0023      	movs	r3, r4
     d82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     d84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     d86:	4c16      	ldr	r4, [pc, #88]	; (de0 <_sercom_get_async_baud_val+0x1bc>)
     d88:	47a0      	blx	r4
     d8a:	0003      	movs	r3, r0
     d8c:	000c      	movs	r4, r1
     d8e:	65bb      	str	r3, [r7, #88]	; 0x58
     d90:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     d94:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     d96:	b2d9      	uxtb	r1, r3
     d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     d9a:	b2db      	uxtb	r3, r3
     d9c:	00db      	lsls	r3, r3, #3
     d9e:	b2da      	uxtb	r2, r3
     da0:	2317      	movs	r3, #23
     da2:	2040      	movs	r0, #64	; 0x40
     da4:	4684      	mov	ip, r0
     da6:	44bc      	add	ip, r7
     da8:	4463      	add	r3, ip
     daa:	1a8a      	subs	r2, r1, r2
     dac:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     dae:	2317      	movs	r3, #23
     db0:	2240      	movs	r2, #64	; 0x40
     db2:	4694      	mov	ip, r2
     db4:	44bc      	add	ip, r7
     db6:	4463      	add	r3, ip
     db8:	781b      	ldrb	r3, [r3, #0]
     dba:	035b      	lsls	r3, r3, #13
     dbc:	001a      	movs	r2, r3
     dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     dc0:	4313      	orrs	r3, r2
     dc2:	67bb      	str	r3, [r7, #120]	; 0x78
     dc4:	2300      	movs	r3, #0
     dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     dca:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     dcc:	b29a      	uxth	r2, r3
     dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     dd0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     dd2:	2300      	movs	r3, #0
}
     dd4:	0018      	movs	r0, r3
     dd6:	46bd      	mov	sp, r7
     dd8:	b021      	add	sp, #132	; 0x84
     dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ddc:	00005f11 	.word	0x00005f11
     de0:	00000ac7 	.word	0x00000ac7

00000de4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     de4:	b580      	push	{r7, lr}
     de6:	b084      	sub	sp, #16
     de8:	af00      	add	r7, sp, #0
     dea:	0002      	movs	r2, r0
     dec:	1dfb      	adds	r3, r7, #7
     dee:	701a      	strb	r2, [r3, #0]
     df0:	1dbb      	adds	r3, r7, #6
     df2:	1c0a      	adds	r2, r1, #0
     df4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     df6:	4b1a      	ldr	r3, [pc, #104]	; (e60 <sercom_set_gclk_generator+0x7c>)
     df8:	781b      	ldrb	r3, [r3, #0]
     dfa:	2201      	movs	r2, #1
     dfc:	4053      	eors	r3, r2
     dfe:	b2db      	uxtb	r3, r3
     e00:	2b00      	cmp	r3, #0
     e02:	d103      	bne.n	e0c <sercom_set_gclk_generator+0x28>
     e04:	1dbb      	adds	r3, r7, #6
     e06:	781b      	ldrb	r3, [r3, #0]
     e08:	2b00      	cmp	r3, #0
     e0a:	d01b      	beq.n	e44 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     e0c:	230c      	movs	r3, #12
     e0e:	18fb      	adds	r3, r7, r3
     e10:	0018      	movs	r0, r3
     e12:	4b14      	ldr	r3, [pc, #80]	; (e64 <sercom_set_gclk_generator+0x80>)
     e14:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     e16:	230c      	movs	r3, #12
     e18:	18fb      	adds	r3, r7, r3
     e1a:	1dfa      	adds	r2, r7, #7
     e1c:	7812      	ldrb	r2, [r2, #0]
     e1e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e20:	230c      	movs	r3, #12
     e22:	18fb      	adds	r3, r7, r3
     e24:	0019      	movs	r1, r3
     e26:	2013      	movs	r0, #19
     e28:	4b0f      	ldr	r3, [pc, #60]	; (e68 <sercom_set_gclk_generator+0x84>)
     e2a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e2c:	2013      	movs	r0, #19
     e2e:	4b0f      	ldr	r3, [pc, #60]	; (e6c <sercom_set_gclk_generator+0x88>)
     e30:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     e32:	4b0b      	ldr	r3, [pc, #44]	; (e60 <sercom_set_gclk_generator+0x7c>)
     e34:	1dfa      	adds	r2, r7, #7
     e36:	7812      	ldrb	r2, [r2, #0]
     e38:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     e3a:	4b09      	ldr	r3, [pc, #36]	; (e60 <sercom_set_gclk_generator+0x7c>)
     e3c:	2201      	movs	r2, #1
     e3e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     e40:	2300      	movs	r3, #0
     e42:	e008      	b.n	e56 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     e44:	4b06      	ldr	r3, [pc, #24]	; (e60 <sercom_set_gclk_generator+0x7c>)
     e46:	785b      	ldrb	r3, [r3, #1]
     e48:	1dfa      	adds	r2, r7, #7
     e4a:	7812      	ldrb	r2, [r2, #0]
     e4c:	429a      	cmp	r2, r3
     e4e:	d101      	bne.n	e54 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     e50:	2300      	movs	r3, #0
     e52:	e000      	b.n	e56 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e54:	231d      	movs	r3, #29
}
     e56:	0018      	movs	r0, r3
     e58:	46bd      	mov	sp, r7
     e5a:	b004      	add	sp, #16
     e5c:	bd80      	pop	{r7, pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	2000002c 	.word	0x2000002c
     e64:	00000ab1 	.word	0x00000ab1
     e68:	000054d1 	.word	0x000054d1
     e6c:	00005515 	.word	0x00005515

00000e70 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     e70:	b580      	push	{r7, lr}
     e72:	b082      	sub	sp, #8
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
     e78:	000a      	movs	r2, r1
     e7a:	1cfb      	adds	r3, r7, #3
     e7c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	4a4d      	ldr	r2, [pc, #308]	; (fb8 <_sercom_get_default_pad+0x148>)
     e82:	4293      	cmp	r3, r2
     e84:	d03f      	beq.n	f06 <_sercom_get_default_pad+0x96>
     e86:	4a4c      	ldr	r2, [pc, #304]	; (fb8 <_sercom_get_default_pad+0x148>)
     e88:	4293      	cmp	r3, r2
     e8a:	d806      	bhi.n	e9a <_sercom_get_default_pad+0x2a>
     e8c:	4a4b      	ldr	r2, [pc, #300]	; (fbc <_sercom_get_default_pad+0x14c>)
     e8e:	4293      	cmp	r3, r2
     e90:	d00f      	beq.n	eb2 <_sercom_get_default_pad+0x42>
     e92:	4a4b      	ldr	r2, [pc, #300]	; (fc0 <_sercom_get_default_pad+0x150>)
     e94:	4293      	cmp	r3, r2
     e96:	d021      	beq.n	edc <_sercom_get_default_pad+0x6c>
     e98:	e089      	b.n	fae <_sercom_get_default_pad+0x13e>
     e9a:	4a4a      	ldr	r2, [pc, #296]	; (fc4 <_sercom_get_default_pad+0x154>)
     e9c:	4293      	cmp	r3, r2
     e9e:	d100      	bne.n	ea2 <_sercom_get_default_pad+0x32>
     ea0:	e05b      	b.n	f5a <_sercom_get_default_pad+0xea>
     ea2:	4a49      	ldr	r2, [pc, #292]	; (fc8 <_sercom_get_default_pad+0x158>)
     ea4:	4293      	cmp	r3, r2
     ea6:	d100      	bne.n	eaa <_sercom_get_default_pad+0x3a>
     ea8:	e06c      	b.n	f84 <_sercom_get_default_pad+0x114>
     eaa:	4a48      	ldr	r2, [pc, #288]	; (fcc <_sercom_get_default_pad+0x15c>)
     eac:	4293      	cmp	r3, r2
     eae:	d03f      	beq.n	f30 <_sercom_get_default_pad+0xc0>
     eb0:	e07d      	b.n	fae <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     eb2:	1cfb      	adds	r3, r7, #3
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	2b01      	cmp	r3, #1
     eb8:	d00a      	beq.n	ed0 <_sercom_get_default_pad+0x60>
     eba:	dc02      	bgt.n	ec2 <_sercom_get_default_pad+0x52>
     ebc:	2b00      	cmp	r3, #0
     ebe:	d005      	beq.n	ecc <_sercom_get_default_pad+0x5c>
     ec0:	e075      	b.n	fae <_sercom_get_default_pad+0x13e>
     ec2:	2b02      	cmp	r3, #2
     ec4:	d006      	beq.n	ed4 <_sercom_get_default_pad+0x64>
     ec6:	2b03      	cmp	r3, #3
     ec8:	d006      	beq.n	ed8 <_sercom_get_default_pad+0x68>
     eca:	e070      	b.n	fae <_sercom_get_default_pad+0x13e>
     ecc:	4b40      	ldr	r3, [pc, #256]	; (fd0 <_sercom_get_default_pad+0x160>)
     ece:	e06f      	b.n	fb0 <_sercom_get_default_pad+0x140>
     ed0:	4b40      	ldr	r3, [pc, #256]	; (fd4 <_sercom_get_default_pad+0x164>)
     ed2:	e06d      	b.n	fb0 <_sercom_get_default_pad+0x140>
     ed4:	4b40      	ldr	r3, [pc, #256]	; (fd8 <_sercom_get_default_pad+0x168>)
     ed6:	e06b      	b.n	fb0 <_sercom_get_default_pad+0x140>
     ed8:	4b40      	ldr	r3, [pc, #256]	; (fdc <_sercom_get_default_pad+0x16c>)
     eda:	e069      	b.n	fb0 <_sercom_get_default_pad+0x140>
     edc:	1cfb      	adds	r3, r7, #3
     ede:	781b      	ldrb	r3, [r3, #0]
     ee0:	2b01      	cmp	r3, #1
     ee2:	d00a      	beq.n	efa <_sercom_get_default_pad+0x8a>
     ee4:	dc02      	bgt.n	eec <_sercom_get_default_pad+0x7c>
     ee6:	2b00      	cmp	r3, #0
     ee8:	d005      	beq.n	ef6 <_sercom_get_default_pad+0x86>
     eea:	e060      	b.n	fae <_sercom_get_default_pad+0x13e>
     eec:	2b02      	cmp	r3, #2
     eee:	d006      	beq.n	efe <_sercom_get_default_pad+0x8e>
     ef0:	2b03      	cmp	r3, #3
     ef2:	d006      	beq.n	f02 <_sercom_get_default_pad+0x92>
     ef4:	e05b      	b.n	fae <_sercom_get_default_pad+0x13e>
     ef6:	2303      	movs	r3, #3
     ef8:	e05a      	b.n	fb0 <_sercom_get_default_pad+0x140>
     efa:	4b39      	ldr	r3, [pc, #228]	; (fe0 <_sercom_get_default_pad+0x170>)
     efc:	e058      	b.n	fb0 <_sercom_get_default_pad+0x140>
     efe:	4b39      	ldr	r3, [pc, #228]	; (fe4 <_sercom_get_default_pad+0x174>)
     f00:	e056      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f02:	4b39      	ldr	r3, [pc, #228]	; (fe8 <_sercom_get_default_pad+0x178>)
     f04:	e054      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f06:	1cfb      	adds	r3, r7, #3
     f08:	781b      	ldrb	r3, [r3, #0]
     f0a:	2b01      	cmp	r3, #1
     f0c:	d00a      	beq.n	f24 <_sercom_get_default_pad+0xb4>
     f0e:	dc02      	bgt.n	f16 <_sercom_get_default_pad+0xa6>
     f10:	2b00      	cmp	r3, #0
     f12:	d005      	beq.n	f20 <_sercom_get_default_pad+0xb0>
     f14:	e04b      	b.n	fae <_sercom_get_default_pad+0x13e>
     f16:	2b02      	cmp	r3, #2
     f18:	d006      	beq.n	f28 <_sercom_get_default_pad+0xb8>
     f1a:	2b03      	cmp	r3, #3
     f1c:	d006      	beq.n	f2c <_sercom_get_default_pad+0xbc>
     f1e:	e046      	b.n	fae <_sercom_get_default_pad+0x13e>
     f20:	4b32      	ldr	r3, [pc, #200]	; (fec <_sercom_get_default_pad+0x17c>)
     f22:	e045      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f24:	4b32      	ldr	r3, [pc, #200]	; (ff0 <_sercom_get_default_pad+0x180>)
     f26:	e043      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f28:	4b32      	ldr	r3, [pc, #200]	; (ff4 <_sercom_get_default_pad+0x184>)
     f2a:	e041      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f2c:	4b32      	ldr	r3, [pc, #200]	; (ff8 <_sercom_get_default_pad+0x188>)
     f2e:	e03f      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f30:	1cfb      	adds	r3, r7, #3
     f32:	781b      	ldrb	r3, [r3, #0]
     f34:	2b01      	cmp	r3, #1
     f36:	d00a      	beq.n	f4e <_sercom_get_default_pad+0xde>
     f38:	dc02      	bgt.n	f40 <_sercom_get_default_pad+0xd0>
     f3a:	2b00      	cmp	r3, #0
     f3c:	d005      	beq.n	f4a <_sercom_get_default_pad+0xda>
     f3e:	e036      	b.n	fae <_sercom_get_default_pad+0x13e>
     f40:	2b02      	cmp	r3, #2
     f42:	d006      	beq.n	f52 <_sercom_get_default_pad+0xe2>
     f44:	2b03      	cmp	r3, #3
     f46:	d006      	beq.n	f56 <_sercom_get_default_pad+0xe6>
     f48:	e031      	b.n	fae <_sercom_get_default_pad+0x13e>
     f4a:	4b2c      	ldr	r3, [pc, #176]	; (ffc <_sercom_get_default_pad+0x18c>)
     f4c:	e030      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f4e:	4b2c      	ldr	r3, [pc, #176]	; (1000 <_sercom_get_default_pad+0x190>)
     f50:	e02e      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f52:	4b2c      	ldr	r3, [pc, #176]	; (1004 <_sercom_get_default_pad+0x194>)
     f54:	e02c      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f56:	4b2c      	ldr	r3, [pc, #176]	; (1008 <_sercom_get_default_pad+0x198>)
     f58:	e02a      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f5a:	1cfb      	adds	r3, r7, #3
     f5c:	781b      	ldrb	r3, [r3, #0]
     f5e:	2b01      	cmp	r3, #1
     f60:	d00a      	beq.n	f78 <_sercom_get_default_pad+0x108>
     f62:	dc02      	bgt.n	f6a <_sercom_get_default_pad+0xfa>
     f64:	2b00      	cmp	r3, #0
     f66:	d005      	beq.n	f74 <_sercom_get_default_pad+0x104>
     f68:	e021      	b.n	fae <_sercom_get_default_pad+0x13e>
     f6a:	2b02      	cmp	r3, #2
     f6c:	d006      	beq.n	f7c <_sercom_get_default_pad+0x10c>
     f6e:	2b03      	cmp	r3, #3
     f70:	d006      	beq.n	f80 <_sercom_get_default_pad+0x110>
     f72:	e01c      	b.n	fae <_sercom_get_default_pad+0x13e>
     f74:	4b25      	ldr	r3, [pc, #148]	; (100c <_sercom_get_default_pad+0x19c>)
     f76:	e01b      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f78:	4b25      	ldr	r3, [pc, #148]	; (1010 <_sercom_get_default_pad+0x1a0>)
     f7a:	e019      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f7c:	4b25      	ldr	r3, [pc, #148]	; (1014 <_sercom_get_default_pad+0x1a4>)
     f7e:	e017      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f80:	4b25      	ldr	r3, [pc, #148]	; (1018 <_sercom_get_default_pad+0x1a8>)
     f82:	e015      	b.n	fb0 <_sercom_get_default_pad+0x140>
     f84:	1cfb      	adds	r3, r7, #3
     f86:	781b      	ldrb	r3, [r3, #0]
     f88:	2b01      	cmp	r3, #1
     f8a:	d00a      	beq.n	fa2 <_sercom_get_default_pad+0x132>
     f8c:	dc02      	bgt.n	f94 <_sercom_get_default_pad+0x124>
     f8e:	2b00      	cmp	r3, #0
     f90:	d005      	beq.n	f9e <_sercom_get_default_pad+0x12e>
     f92:	e00c      	b.n	fae <_sercom_get_default_pad+0x13e>
     f94:	2b02      	cmp	r3, #2
     f96:	d006      	beq.n	fa6 <_sercom_get_default_pad+0x136>
     f98:	2b03      	cmp	r3, #3
     f9a:	d006      	beq.n	faa <_sercom_get_default_pad+0x13a>
     f9c:	e007      	b.n	fae <_sercom_get_default_pad+0x13e>
     f9e:	4b1f      	ldr	r3, [pc, #124]	; (101c <_sercom_get_default_pad+0x1ac>)
     fa0:	e006      	b.n	fb0 <_sercom_get_default_pad+0x140>
     fa2:	4b1f      	ldr	r3, [pc, #124]	; (1020 <_sercom_get_default_pad+0x1b0>)
     fa4:	e004      	b.n	fb0 <_sercom_get_default_pad+0x140>
     fa6:	4b1f      	ldr	r3, [pc, #124]	; (1024 <_sercom_get_default_pad+0x1b4>)
     fa8:	e002      	b.n	fb0 <_sercom_get_default_pad+0x140>
     faa:	4b1f      	ldr	r3, [pc, #124]	; (1028 <_sercom_get_default_pad+0x1b8>)
     fac:	e000      	b.n	fb0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     fae:	2300      	movs	r3, #0
}
     fb0:	0018      	movs	r0, r3
     fb2:	46bd      	mov	sp, r7
     fb4:	b002      	add	sp, #8
     fb6:	bd80      	pop	{r7, pc}
     fb8:	42001000 	.word	0x42001000
     fbc:	42000800 	.word	0x42000800
     fc0:	42000c00 	.word	0x42000c00
     fc4:	42001800 	.word	0x42001800
     fc8:	42001c00 	.word	0x42001c00
     fcc:	42001400 	.word	0x42001400
     fd0:	00040003 	.word	0x00040003
     fd4:	00050003 	.word	0x00050003
     fd8:	00060003 	.word	0x00060003
     fdc:	00070003 	.word	0x00070003
     fe0:	00010003 	.word	0x00010003
     fe4:	001e0003 	.word	0x001e0003
     fe8:	001f0003 	.word	0x001f0003
     fec:	00080003 	.word	0x00080003
     ff0:	00090003 	.word	0x00090003
     ff4:	000a0003 	.word	0x000a0003
     ff8:	000b0003 	.word	0x000b0003
     ffc:	00100003 	.word	0x00100003
    1000:	00110003 	.word	0x00110003
    1004:	00120003 	.word	0x00120003
    1008:	00130003 	.word	0x00130003
    100c:	000c0003 	.word	0x000c0003
    1010:	000d0003 	.word	0x000d0003
    1014:	000e0003 	.word	0x000e0003
    1018:	000f0003 	.word	0x000f0003
    101c:	00160003 	.word	0x00160003
    1020:	00170003 	.word	0x00170003
    1024:	00180003 	.word	0x00180003
    1028:	00190003 	.word	0x00190003

0000102c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    102c:	b590      	push	{r4, r7, lr}
    102e:	b08b      	sub	sp, #44	; 0x2c
    1030:	af00      	add	r7, sp, #0
    1032:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1034:	230c      	movs	r3, #12
    1036:	18fb      	adds	r3, r7, r3
    1038:	4a0f      	ldr	r2, [pc, #60]	; (1078 <_sercom_get_sercom_inst_index+0x4c>)
    103a:	ca13      	ldmia	r2!, {r0, r1, r4}
    103c:	c313      	stmia	r3!, {r0, r1, r4}
    103e:	ca13      	ldmia	r2!, {r0, r1, r4}
    1040:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1042:	2300      	movs	r3, #0
    1044:	627b      	str	r3, [r7, #36]	; 0x24
    1046:	e00e      	b.n	1066 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1048:	230c      	movs	r3, #12
    104a:	18fb      	adds	r3, r7, r3
    104c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    104e:	0092      	lsls	r2, r2, #2
    1050:	58d3      	ldr	r3, [r2, r3]
    1052:	001a      	movs	r2, r3
    1054:	687b      	ldr	r3, [r7, #4]
    1056:	429a      	cmp	r2, r3
    1058:	d102      	bne.n	1060 <_sercom_get_sercom_inst_index+0x34>
			return i;
    105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    105c:	b2db      	uxtb	r3, r3
    105e:	e006      	b.n	106e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1062:	3301      	adds	r3, #1
    1064:	627b      	str	r3, [r7, #36]	; 0x24
    1066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1068:	2b05      	cmp	r3, #5
    106a:	d9ed      	bls.n	1048 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    106c:	2300      	movs	r3, #0
}
    106e:	0018      	movs	r0, r3
    1070:	46bd      	mov	sp, r7
    1072:	b00b      	add	sp, #44	; 0x2c
    1074:	bd90      	pop	{r4, r7, pc}
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	000061dc 	.word	0x000061dc

0000107c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    107c:	b580      	push	{r7, lr}
    107e:	b082      	sub	sp, #8
    1080:	af00      	add	r7, sp, #0
    1082:	0002      	movs	r2, r0
    1084:	1dfb      	adds	r3, r7, #7
    1086:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    1088:	46c0      	nop			; (mov r8, r8)
    108a:	46bd      	mov	sp, r7
    108c:	b002      	add	sp, #8
    108e:	bd80      	pop	{r7, pc}

00001090 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1090:	b580      	push	{r7, lr}
    1092:	b084      	sub	sp, #16
    1094:	af00      	add	r7, sp, #0
    1096:	0002      	movs	r2, r0
    1098:	6039      	str	r1, [r7, #0]
    109a:	1dfb      	adds	r3, r7, #7
    109c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    109e:	4b13      	ldr	r3, [pc, #76]	; (10ec <_sercom_set_handler+0x5c>)
    10a0:	781b      	ldrb	r3, [r3, #0]
    10a2:	2201      	movs	r2, #1
    10a4:	4053      	eors	r3, r2
    10a6:	b2db      	uxtb	r3, r3
    10a8:	2b00      	cmp	r3, #0
    10aa:	d015      	beq.n	10d8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10ac:	2300      	movs	r3, #0
    10ae:	60fb      	str	r3, [r7, #12]
    10b0:	e00c      	b.n	10cc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10b2:	4b0f      	ldr	r3, [pc, #60]	; (10f0 <_sercom_set_handler+0x60>)
    10b4:	68fa      	ldr	r2, [r7, #12]
    10b6:	0092      	lsls	r2, r2, #2
    10b8:	490e      	ldr	r1, [pc, #56]	; (10f4 <_sercom_set_handler+0x64>)
    10ba:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    10bc:	4b0e      	ldr	r3, [pc, #56]	; (10f8 <_sercom_set_handler+0x68>)
    10be:	68fa      	ldr	r2, [r7, #12]
    10c0:	0092      	lsls	r2, r2, #2
    10c2:	2100      	movs	r1, #0
    10c4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10c6:	68fb      	ldr	r3, [r7, #12]
    10c8:	3301      	adds	r3, #1
    10ca:	60fb      	str	r3, [r7, #12]
    10cc:	68fb      	ldr	r3, [r7, #12]
    10ce:	2b05      	cmp	r3, #5
    10d0:	d9ef      	bls.n	10b2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    10d2:	4b06      	ldr	r3, [pc, #24]	; (10ec <_sercom_set_handler+0x5c>)
    10d4:	2201      	movs	r2, #1
    10d6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    10d8:	1dfb      	adds	r3, r7, #7
    10da:	781a      	ldrb	r2, [r3, #0]
    10dc:	4b04      	ldr	r3, [pc, #16]	; (10f0 <_sercom_set_handler+0x60>)
    10de:	0092      	lsls	r2, r2, #2
    10e0:	6839      	ldr	r1, [r7, #0]
    10e2:	50d1      	str	r1, [r2, r3]
}
    10e4:	46c0      	nop			; (mov r8, r8)
    10e6:	46bd      	mov	sp, r7
    10e8:	b004      	add	sp, #16
    10ea:	bd80      	pop	{r7, pc}
    10ec:	2000002e 	.word	0x2000002e
    10f0:	20000030 	.word	0x20000030
    10f4:	0000107d 	.word	0x0000107d
    10f8:	20000138 	.word	0x20000138

000010fc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    10fc:	b590      	push	{r4, r7, lr}
    10fe:	b085      	sub	sp, #20
    1100:	af00      	add	r7, sp, #0
    1102:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1104:	2308      	movs	r3, #8
    1106:	18fb      	adds	r3, r7, r3
    1108:	4a0b      	ldr	r2, [pc, #44]	; (1138 <_sercom_get_interrupt_vector+0x3c>)
    110a:	6811      	ldr	r1, [r2, #0]
    110c:	6019      	str	r1, [r3, #0]
    110e:	8892      	ldrh	r2, [r2, #4]
    1110:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1112:	230f      	movs	r3, #15
    1114:	18fc      	adds	r4, r7, r3
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	0018      	movs	r0, r3
    111a:	4b08      	ldr	r3, [pc, #32]	; (113c <_sercom_get_interrupt_vector+0x40>)
    111c:	4798      	blx	r3
    111e:	0003      	movs	r3, r0
    1120:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1122:	230f      	movs	r3, #15
    1124:	18fb      	adds	r3, r7, r3
    1126:	781b      	ldrb	r3, [r3, #0]
    1128:	2208      	movs	r2, #8
    112a:	18ba      	adds	r2, r7, r2
    112c:	5cd3      	ldrb	r3, [r2, r3]
    112e:	b25b      	sxtb	r3, r3
}
    1130:	0018      	movs	r0, r3
    1132:	46bd      	mov	sp, r7
    1134:	b005      	add	sp, #20
    1136:	bd90      	pop	{r4, r7, pc}
    1138:	000061f4 	.word	0x000061f4
    113c:	0000102d 	.word	0x0000102d

00001140 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1140:	b580      	push	{r7, lr}
    1142:	af00      	add	r7, sp, #0
    1144:	4b03      	ldr	r3, [pc, #12]	; (1154 <SERCOM0_Handler+0x14>)
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	2000      	movs	r0, #0
    114a:	4798      	blx	r3
    114c:	46c0      	nop			; (mov r8, r8)
    114e:	46bd      	mov	sp, r7
    1150:	bd80      	pop	{r7, pc}
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	20000030 	.word	0x20000030

00001158 <SERCOM1_Handler>:
    1158:	b580      	push	{r7, lr}
    115a:	af00      	add	r7, sp, #0
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <SERCOM1_Handler+0x14>)
    115e:	685b      	ldr	r3, [r3, #4]
    1160:	2001      	movs	r0, #1
    1162:	4798      	blx	r3
    1164:	46c0      	nop			; (mov r8, r8)
    1166:	46bd      	mov	sp, r7
    1168:	bd80      	pop	{r7, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	20000030 	.word	0x20000030

00001170 <SERCOM2_Handler>:
    1170:	b580      	push	{r7, lr}
    1172:	af00      	add	r7, sp, #0
    1174:	4b03      	ldr	r3, [pc, #12]	; (1184 <SERCOM2_Handler+0x14>)
    1176:	689b      	ldr	r3, [r3, #8]
    1178:	2002      	movs	r0, #2
    117a:	4798      	blx	r3
    117c:	46c0      	nop			; (mov r8, r8)
    117e:	46bd      	mov	sp, r7
    1180:	bd80      	pop	{r7, pc}
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	20000030 	.word	0x20000030

00001188 <SERCOM3_Handler>:
    1188:	b580      	push	{r7, lr}
    118a:	af00      	add	r7, sp, #0
    118c:	4b03      	ldr	r3, [pc, #12]	; (119c <SERCOM3_Handler+0x14>)
    118e:	68db      	ldr	r3, [r3, #12]
    1190:	2003      	movs	r0, #3
    1192:	4798      	blx	r3
    1194:	46c0      	nop			; (mov r8, r8)
    1196:	46bd      	mov	sp, r7
    1198:	bd80      	pop	{r7, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	20000030 	.word	0x20000030

000011a0 <SERCOM4_Handler>:
    11a0:	b580      	push	{r7, lr}
    11a2:	af00      	add	r7, sp, #0
    11a4:	4b03      	ldr	r3, [pc, #12]	; (11b4 <SERCOM4_Handler+0x14>)
    11a6:	691b      	ldr	r3, [r3, #16]
    11a8:	2004      	movs	r0, #4
    11aa:	4798      	blx	r3
    11ac:	46c0      	nop			; (mov r8, r8)
    11ae:	46bd      	mov	sp, r7
    11b0:	bd80      	pop	{r7, pc}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	20000030 	.word	0x20000030

000011b8 <SERCOM5_Handler>:
    11b8:	b580      	push	{r7, lr}
    11ba:	af00      	add	r7, sp, #0
    11bc:	4b03      	ldr	r3, [pc, #12]	; (11cc <SERCOM5_Handler+0x14>)
    11be:	695b      	ldr	r3, [r3, #20]
    11c0:	2005      	movs	r0, #5
    11c2:	4798      	blx	r3
    11c4:	46c0      	nop			; (mov r8, r8)
    11c6:	46bd      	mov	sp, r7
    11c8:	bd80      	pop	{r7, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	20000030 	.word	0x20000030

000011d0 <system_gclk_chan_get_config_defaults>:
{
    11d0:	b580      	push	{r7, lr}
    11d2:	b082      	sub	sp, #8
    11d4:	af00      	add	r7, sp, #0
    11d6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	2200      	movs	r2, #0
    11dc:	701a      	strb	r2, [r3, #0]
}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	46bd      	mov	sp, r7
    11e2:	b002      	add	sp, #8
    11e4:	bd80      	pop	{r7, pc}
	...

000011e8 <system_apb_clock_set_mask>:
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b082      	sub	sp, #8
    11ec:	af00      	add	r7, sp, #0
    11ee:	0002      	movs	r2, r0
    11f0:	6039      	str	r1, [r7, #0]
    11f2:	1dfb      	adds	r3, r7, #7
    11f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    11f6:	1dfb      	adds	r3, r7, #7
    11f8:	781b      	ldrb	r3, [r3, #0]
    11fa:	2b01      	cmp	r3, #1
    11fc:	d00a      	beq.n	1214 <system_apb_clock_set_mask+0x2c>
    11fe:	2b02      	cmp	r3, #2
    1200:	d00f      	beq.n	1222 <system_apb_clock_set_mask+0x3a>
    1202:	2b00      	cmp	r3, #0
    1204:	d114      	bne.n	1230 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1206:	4b0e      	ldr	r3, [pc, #56]	; (1240 <system_apb_clock_set_mask+0x58>)
    1208:	4a0d      	ldr	r2, [pc, #52]	; (1240 <system_apb_clock_set_mask+0x58>)
    120a:	6991      	ldr	r1, [r2, #24]
    120c:	683a      	ldr	r2, [r7, #0]
    120e:	430a      	orrs	r2, r1
    1210:	619a      	str	r2, [r3, #24]
			break;
    1212:	e00f      	b.n	1234 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1214:	4b0a      	ldr	r3, [pc, #40]	; (1240 <system_apb_clock_set_mask+0x58>)
    1216:	4a0a      	ldr	r2, [pc, #40]	; (1240 <system_apb_clock_set_mask+0x58>)
    1218:	69d1      	ldr	r1, [r2, #28]
    121a:	683a      	ldr	r2, [r7, #0]
    121c:	430a      	orrs	r2, r1
    121e:	61da      	str	r2, [r3, #28]
			break;
    1220:	e008      	b.n	1234 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1222:	4b07      	ldr	r3, [pc, #28]	; (1240 <system_apb_clock_set_mask+0x58>)
    1224:	4a06      	ldr	r2, [pc, #24]	; (1240 <system_apb_clock_set_mask+0x58>)
    1226:	6a11      	ldr	r1, [r2, #32]
    1228:	683a      	ldr	r2, [r7, #0]
    122a:	430a      	orrs	r2, r1
    122c:	621a      	str	r2, [r3, #32]
			break;
    122e:	e001      	b.n	1234 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1230:	2317      	movs	r3, #23
    1232:	e000      	b.n	1236 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1234:	2300      	movs	r3, #0
}
    1236:	0018      	movs	r0, r3
    1238:	46bd      	mov	sp, r7
    123a:	b002      	add	sp, #8
    123c:	bd80      	pop	{r7, pc}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	40000400 	.word	0x40000400

00001244 <system_pinmux_get_config_defaults>:
{
    1244:	b580      	push	{r7, lr}
    1246:	b082      	sub	sp, #8
    1248:	af00      	add	r7, sp, #0
    124a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	2280      	movs	r2, #128	; 0x80
    1250:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1252:	687b      	ldr	r3, [r7, #4]
    1254:	2200      	movs	r2, #0
    1256:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1258:	687b      	ldr	r3, [r7, #4]
    125a:	2201      	movs	r2, #1
    125c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    125e:	687b      	ldr	r3, [r7, #4]
    1260:	2200      	movs	r2, #0
    1262:	70da      	strb	r2, [r3, #3]
}
    1264:	46c0      	nop			; (mov r8, r8)
    1266:	46bd      	mov	sp, r7
    1268:	b002      	add	sp, #8
    126a:	bd80      	pop	{r7, pc}

0000126c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    126c:	b580      	push	{r7, lr}
    126e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1270:	4b05      	ldr	r3, [pc, #20]	; (1288 <system_is_debugger_present+0x1c>)
    1272:	789b      	ldrb	r3, [r3, #2]
    1274:	b2db      	uxtb	r3, r3
    1276:	001a      	movs	r2, r3
    1278:	2302      	movs	r3, #2
    127a:	4013      	ands	r3, r2
    127c:	1e5a      	subs	r2, r3, #1
    127e:	4193      	sbcs	r3, r2
    1280:	b2db      	uxtb	r3, r3
}
    1282:	0018      	movs	r0, r3
    1284:	46bd      	mov	sp, r7
    1286:	bd80      	pop	{r7, pc}
    1288:	41002000 	.word	0x41002000

0000128c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    128c:	b580      	push	{r7, lr}
    128e:	b084      	sub	sp, #16
    1290:	af00      	add	r7, sp, #0
    1292:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	681b      	ldr	r3, [r3, #0]
    1298:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    129a:	68fb      	ldr	r3, [r7, #12]
    129c:	69db      	ldr	r3, [r3, #28]
    129e:	1e5a      	subs	r2, r3, #1
    12a0:	4193      	sbcs	r3, r2
    12a2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    12a4:	0018      	movs	r0, r3
    12a6:	46bd      	mov	sp, r7
    12a8:	b004      	add	sp, #16
    12aa:	bd80      	pop	{r7, pc}

000012ac <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    12ac:	b580      	push	{r7, lr}
    12ae:	b082      	sub	sp, #8
    12b0:	af00      	add	r7, sp, #0
    12b2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    12b4:	46c0      	nop			; (mov r8, r8)
    12b6:	687b      	ldr	r3, [r7, #4]
    12b8:	0018      	movs	r0, r3
    12ba:	4b04      	ldr	r3, [pc, #16]	; (12cc <_usart_wait_for_sync+0x20>)
    12bc:	4798      	blx	r3
    12be:	1e03      	subs	r3, r0, #0
    12c0:	d1f9      	bne.n	12b6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	46bd      	mov	sp, r7
    12c6:	b002      	add	sp, #8
    12c8:	bd80      	pop	{r7, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	0000128d 	.word	0x0000128d

000012d0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    12d0:	b5b0      	push	{r4, r5, r7, lr}
    12d2:	b08c      	sub	sp, #48	; 0x30
    12d4:	af02      	add	r7, sp, #8
    12d6:	6078      	str	r0, [r7, #4]
    12d8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	681b      	ldr	r3, [r3, #0]
    12de:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	681b      	ldr	r3, [r3, #0]
    12e4:	0018      	movs	r0, r3
    12e6:	4bab      	ldr	r3, [pc, #684]	; (1594 <_usart_set_config+0x2c4>)
    12e8:	4798      	blx	r3
    12ea:	0003      	movs	r3, r0
    12ec:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12ee:	697b      	ldr	r3, [r7, #20]
    12f0:	3314      	adds	r3, #20
    12f2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    12f4:	2300      	movs	r3, #0
    12f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    12f8:	2300      	movs	r3, #0
    12fa:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    12fc:	230a      	movs	r3, #10
    12fe:	18fb      	adds	r3, r7, r3
    1300:	2200      	movs	r2, #0
    1302:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1304:	231f      	movs	r3, #31
    1306:	18fb      	adds	r3, r7, r3
    1308:	2200      	movs	r2, #0
    130a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    130c:	231e      	movs	r3, #30
    130e:	18fb      	adds	r3, r7, r3
    1310:	2210      	movs	r2, #16
    1312:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1314:	683b      	ldr	r3, [r7, #0]
    1316:	8a1b      	ldrh	r3, [r3, #16]
    1318:	2280      	movs	r2, #128	; 0x80
    131a:	01d2      	lsls	r2, r2, #7
    131c:	4293      	cmp	r3, r2
    131e:	d01c      	beq.n	135a <_usart_set_config+0x8a>
    1320:	2280      	movs	r2, #128	; 0x80
    1322:	01d2      	lsls	r2, r2, #7
    1324:	4293      	cmp	r3, r2
    1326:	dc06      	bgt.n	1336 <_usart_set_config+0x66>
    1328:	2b00      	cmp	r3, #0
    132a:	d00d      	beq.n	1348 <_usart_set_config+0x78>
    132c:	2280      	movs	r2, #128	; 0x80
    132e:	0192      	lsls	r2, r2, #6
    1330:	4293      	cmp	r3, r2
    1332:	d024      	beq.n	137e <_usart_set_config+0xae>
    1334:	e035      	b.n	13a2 <_usart_set_config+0xd2>
    1336:	22c0      	movs	r2, #192	; 0xc0
    1338:	01d2      	lsls	r2, r2, #7
    133a:	4293      	cmp	r3, r2
    133c:	d028      	beq.n	1390 <_usart_set_config+0xc0>
    133e:	2280      	movs	r2, #128	; 0x80
    1340:	0212      	lsls	r2, r2, #8
    1342:	4293      	cmp	r3, r2
    1344:	d012      	beq.n	136c <_usart_set_config+0x9c>
    1346:	e02c      	b.n	13a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1348:	231f      	movs	r3, #31
    134a:	18fb      	adds	r3, r7, r3
    134c:	2200      	movs	r2, #0
    134e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1350:	231e      	movs	r3, #30
    1352:	18fb      	adds	r3, r7, r3
    1354:	2210      	movs	r2, #16
    1356:	701a      	strb	r2, [r3, #0]
			break;
    1358:	e023      	b.n	13a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    135a:	231f      	movs	r3, #31
    135c:	18fb      	adds	r3, r7, r3
    135e:	2200      	movs	r2, #0
    1360:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1362:	231e      	movs	r3, #30
    1364:	18fb      	adds	r3, r7, r3
    1366:	2208      	movs	r2, #8
    1368:	701a      	strb	r2, [r3, #0]
			break;
    136a:	e01a      	b.n	13a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    136c:	231f      	movs	r3, #31
    136e:	18fb      	adds	r3, r7, r3
    1370:	2200      	movs	r2, #0
    1372:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1374:	231e      	movs	r3, #30
    1376:	18fb      	adds	r3, r7, r3
    1378:	2203      	movs	r2, #3
    137a:	701a      	strb	r2, [r3, #0]
			break;
    137c:	e011      	b.n	13a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    137e:	231f      	movs	r3, #31
    1380:	18fb      	adds	r3, r7, r3
    1382:	2201      	movs	r2, #1
    1384:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1386:	231e      	movs	r3, #30
    1388:	18fb      	adds	r3, r7, r3
    138a:	2210      	movs	r2, #16
    138c:	701a      	strb	r2, [r3, #0]
			break;
    138e:	e008      	b.n	13a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1390:	231f      	movs	r3, #31
    1392:	18fb      	adds	r3, r7, r3
    1394:	2201      	movs	r2, #1
    1396:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1398:	231e      	movs	r3, #30
    139a:	18fb      	adds	r3, r7, r3
    139c:	2208      	movs	r2, #8
    139e:	701a      	strb	r2, [r3, #0]
			break;
    13a0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    13a2:	683b      	ldr	r3, [r7, #0]
    13a4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    13a6:	683b      	ldr	r3, [r7, #0]
    13a8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    13aa:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    13ac:	683b      	ldr	r3, [r7, #0]
    13ae:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    13b0:	4313      	orrs	r3, r2
		config->sample_rate |
    13b2:	683a      	ldr	r2, [r7, #0]
    13b4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    13b6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    13b8:	683a      	ldr	r2, [r7, #0]
    13ba:	7e12      	ldrb	r2, [r2, #24]
    13bc:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    13be:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    13c0:	683a      	ldr	r2, [r7, #0]
    13c2:	2126      	movs	r1, #38	; 0x26
    13c4:	5c52      	ldrb	r2, [r2, r1]
    13c6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    13c8:	4313      	orrs	r3, r2
    13ca:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    13cc:	231d      	movs	r3, #29
    13ce:	18fb      	adds	r3, r7, r3
    13d0:	2200      	movs	r2, #0
    13d2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    13d4:	683b      	ldr	r3, [r7, #0]
    13d6:	685b      	ldr	r3, [r3, #4]
    13d8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    13da:	68fb      	ldr	r3, [r7, #12]
    13dc:	2b00      	cmp	r3, #0
    13de:	d01e      	beq.n	141e <_usart_set_config+0x14e>
    13e0:	2280      	movs	r2, #128	; 0x80
    13e2:	0552      	lsls	r2, r2, #21
    13e4:	4293      	cmp	r3, r2
    13e6:	d14f      	bne.n	1488 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    13e8:	683b      	ldr	r3, [r7, #0]
    13ea:	2227      	movs	r2, #39	; 0x27
    13ec:	5c9b      	ldrb	r3, [r3, r2]
    13ee:	2201      	movs	r2, #1
    13f0:	4053      	eors	r3, r2
    13f2:	b2db      	uxtb	r3, r3
    13f4:	2b00      	cmp	r3, #0
    13f6:	d046      	beq.n	1486 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    13f8:	683b      	ldr	r3, [r7, #0]
    13fa:	6a1d      	ldr	r5, [r3, #32]
    13fc:	693b      	ldr	r3, [r7, #16]
    13fe:	b2db      	uxtb	r3, r3
    1400:	0018      	movs	r0, r3
    1402:	4b65      	ldr	r3, [pc, #404]	; (1598 <_usart_set_config+0x2c8>)
    1404:	4798      	blx	r3
    1406:	0001      	movs	r1, r0
    1408:	231d      	movs	r3, #29
    140a:	18fc      	adds	r4, r7, r3
    140c:	230a      	movs	r3, #10
    140e:	18fb      	adds	r3, r7, r3
    1410:	001a      	movs	r2, r3
    1412:	0028      	movs	r0, r5
    1414:	4b61      	ldr	r3, [pc, #388]	; (159c <_usart_set_config+0x2cc>)
    1416:	4798      	blx	r3
    1418:	0003      	movs	r3, r0
    141a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    141c:	e033      	b.n	1486 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    141e:	683b      	ldr	r3, [r7, #0]
    1420:	2227      	movs	r2, #39	; 0x27
    1422:	5c9b      	ldrb	r3, [r3, r2]
    1424:	2b00      	cmp	r3, #0
    1426:	d014      	beq.n	1452 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1428:	683b      	ldr	r3, [r7, #0]
    142a:	6a18      	ldr	r0, [r3, #32]
    142c:	683b      	ldr	r3, [r7, #0]
    142e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    1430:	231d      	movs	r3, #29
    1432:	18fc      	adds	r4, r7, r3
    1434:	231f      	movs	r3, #31
    1436:	18fb      	adds	r3, r7, r3
    1438:	781d      	ldrb	r5, [r3, #0]
    143a:	230a      	movs	r3, #10
    143c:	18fa      	adds	r2, r7, r3
    143e:	231e      	movs	r3, #30
    1440:	18fb      	adds	r3, r7, r3
    1442:	781b      	ldrb	r3, [r3, #0]
    1444:	9300      	str	r3, [sp, #0]
    1446:	002b      	movs	r3, r5
    1448:	4d55      	ldr	r5, [pc, #340]	; (15a0 <_usart_set_config+0x2d0>)
    144a:	47a8      	blx	r5
    144c:	0003      	movs	r3, r0
    144e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1450:	e01a      	b.n	1488 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    1452:	683b      	ldr	r3, [r7, #0]
    1454:	6a1d      	ldr	r5, [r3, #32]
    1456:	693b      	ldr	r3, [r7, #16]
    1458:	b2db      	uxtb	r3, r3
    145a:	0018      	movs	r0, r3
    145c:	4b4e      	ldr	r3, [pc, #312]	; (1598 <_usart_set_config+0x2c8>)
    145e:	4798      	blx	r3
				status_code =
    1460:	231d      	movs	r3, #29
    1462:	18fc      	adds	r4, r7, r3
    1464:	231f      	movs	r3, #31
    1466:	18fb      	adds	r3, r7, r3
    1468:	7819      	ldrb	r1, [r3, #0]
    146a:	230a      	movs	r3, #10
    146c:	18fa      	adds	r2, r7, r3
    146e:	231e      	movs	r3, #30
    1470:	18fb      	adds	r3, r7, r3
    1472:	781b      	ldrb	r3, [r3, #0]
    1474:	9300      	str	r3, [sp, #0]
    1476:	000b      	movs	r3, r1
    1478:	0001      	movs	r1, r0
    147a:	0028      	movs	r0, r5
    147c:	4d48      	ldr	r5, [pc, #288]	; (15a0 <_usart_set_config+0x2d0>)
    147e:	47a8      	blx	r5
    1480:	0003      	movs	r3, r0
    1482:	7023      	strb	r3, [r4, #0]
			break;
    1484:	e000      	b.n	1488 <_usart_set_config+0x1b8>
			break;
    1486:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1488:	231d      	movs	r3, #29
    148a:	18fb      	adds	r3, r7, r3
    148c:	781b      	ldrb	r3, [r3, #0]
    148e:	2b00      	cmp	r3, #0
    1490:	d003      	beq.n	149a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    1492:	231d      	movs	r3, #29
    1494:	18fb      	adds	r3, r7, r3
    1496:	781b      	ldrb	r3, [r3, #0]
    1498:	e077      	b.n	158a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    149a:	683b      	ldr	r3, [r7, #0]
    149c:	7e5b      	ldrb	r3, [r3, #25]
    149e:	2b00      	cmp	r3, #0
    14a0:	d003      	beq.n	14aa <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    14a2:	683b      	ldr	r3, [r7, #0]
    14a4:	7e9a      	ldrb	r2, [r3, #26]
    14a6:	69bb      	ldr	r3, [r7, #24]
    14a8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    14aa:	687b      	ldr	r3, [r7, #4]
    14ac:	0018      	movs	r0, r3
    14ae:	4b3d      	ldr	r3, [pc, #244]	; (15a4 <_usart_set_config+0x2d4>)
    14b0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    14b2:	230a      	movs	r3, #10
    14b4:	18fb      	adds	r3, r7, r3
    14b6:	881a      	ldrh	r2, [r3, #0]
    14b8:	69bb      	ldr	r3, [r7, #24]
    14ba:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    14bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    14be:	68fb      	ldr	r3, [r7, #12]
    14c0:	4313      	orrs	r3, r2
    14c2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    14c4:	683b      	ldr	r3, [r7, #0]
    14c6:	2227      	movs	r2, #39	; 0x27
    14c8:	5c9b      	ldrb	r3, [r3, r2]
    14ca:	2201      	movs	r2, #1
    14cc:	4053      	eors	r3, r2
    14ce:	b2db      	uxtb	r3, r3
    14d0:	2b00      	cmp	r3, #0
    14d2:	d003      	beq.n	14dc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    14d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14d6:	2204      	movs	r2, #4
    14d8:	4313      	orrs	r3, r2
    14da:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    14dc:	683b      	ldr	r3, [r7, #0]
    14de:	7e5b      	ldrb	r3, [r3, #25]
    14e0:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14e2:	683b      	ldr	r3, [r7, #0]
    14e4:	7f1b      	ldrb	r3, [r3, #28]
    14e6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    14e8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14ea:	683b      	ldr	r3, [r7, #0]
    14ec:	7f5b      	ldrb	r3, [r3, #29]
    14ee:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14f0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14f2:	683b      	ldr	r3, [r7, #0]
    14f4:	2124      	movs	r1, #36	; 0x24
    14f6:	5c5b      	ldrb	r3, [r3, r1]
    14f8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14fa:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    14fc:	683b      	ldr	r3, [r7, #0]
    14fe:	2125      	movs	r1, #37	; 0x25
    1500:	5c5b      	ldrb	r3, [r3, r1]
    1502:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1504:	4313      	orrs	r3, r2
	ctrlb =  
    1506:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1508:	683b      	ldr	r3, [r7, #0]
    150a:	7a9b      	ldrb	r3, [r3, #10]
    150c:	001a      	movs	r2, r3
    150e:	6a3b      	ldr	r3, [r7, #32]
    1510:	4313      	orrs	r3, r2
    1512:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    1514:	683b      	ldr	r3, [r7, #0]
    1516:	7adb      	ldrb	r3, [r3, #11]
    1518:	001a      	movs	r2, r3
    151a:	6a3b      	ldr	r3, [r7, #32]
    151c:	4313      	orrs	r3, r2
    151e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1520:	683b      	ldr	r3, [r7, #0]
    1522:	891b      	ldrh	r3, [r3, #8]
    1524:	2bff      	cmp	r3, #255	; 0xff
    1526:	d00b      	beq.n	1540 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    152a:	2280      	movs	r2, #128	; 0x80
    152c:	0452      	lsls	r2, r2, #17
    152e:	4313      	orrs	r3, r2
    1530:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    1532:	683b      	ldr	r3, [r7, #0]
    1534:	891b      	ldrh	r3, [r3, #8]
    1536:	001a      	movs	r2, r3
    1538:	6a3b      	ldr	r3, [r7, #32]
    153a:	4313      	orrs	r3, r2
    153c:	623b      	str	r3, [r7, #32]
    153e:	e008      	b.n	1552 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1540:	683b      	ldr	r3, [r7, #0]
    1542:	7edb      	ldrb	r3, [r3, #27]
    1544:	2b00      	cmp	r3, #0
    1546:	d004      	beq.n	1552 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    154a:	2280      	movs	r2, #128	; 0x80
    154c:	04d2      	lsls	r2, r2, #19
    154e:	4313      	orrs	r3, r2
    1550:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1552:	683b      	ldr	r3, [r7, #0]
    1554:	222c      	movs	r2, #44	; 0x2c
    1556:	5c9b      	ldrb	r3, [r3, r2]
    1558:	2b00      	cmp	r3, #0
    155a:	d103      	bne.n	1564 <_usart_set_config+0x294>
    155c:	4b12      	ldr	r3, [pc, #72]	; (15a8 <_usart_set_config+0x2d8>)
    155e:	4798      	blx	r3
    1560:	1e03      	subs	r3, r0, #0
    1562:	d003      	beq.n	156c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1566:	2280      	movs	r2, #128	; 0x80
    1568:	4313      	orrs	r3, r2
    156a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	0018      	movs	r0, r3
    1570:	4b0c      	ldr	r3, [pc, #48]	; (15a4 <_usart_set_config+0x2d4>)
    1572:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1574:	69bb      	ldr	r3, [r7, #24]
    1576:	6a3a      	ldr	r2, [r7, #32]
    1578:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	0018      	movs	r0, r3
    157e:	4b09      	ldr	r3, [pc, #36]	; (15a4 <_usart_set_config+0x2d4>)
    1580:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1582:	69bb      	ldr	r3, [r7, #24]
    1584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1586:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    1588:	2300      	movs	r3, #0
}
    158a:	0018      	movs	r0, r3
    158c:	46bd      	mov	sp, r7
    158e:	b00a      	add	sp, #40	; 0x28
    1590:	bdb0      	pop	{r4, r5, r7, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	0000102d 	.word	0x0000102d
    1598:	000055f5 	.word	0x000055f5
    159c:	00000ba7 	.word	0x00000ba7
    15a0:	00000c25 	.word	0x00000c25
    15a4:	000012ad 	.word	0x000012ad
    15a8:	0000126d 	.word	0x0000126d

000015ac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    15ac:	b590      	push	{r4, r7, lr}
    15ae:	b093      	sub	sp, #76	; 0x4c
    15b0:	af00      	add	r7, sp, #0
    15b2:	60f8      	str	r0, [r7, #12]
    15b4:	60b9      	str	r1, [r7, #8]
    15b6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    15b8:	233b      	movs	r3, #59	; 0x3b
    15ba:	18fb      	adds	r3, r7, r3
    15bc:	2200      	movs	r2, #0
    15be:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    15c0:	68fb      	ldr	r3, [r7, #12]
    15c2:	68ba      	ldr	r2, [r7, #8]
    15c4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15c6:	68fb      	ldr	r3, [r7, #12]
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    15cc:	68fb      	ldr	r3, [r7, #12]
    15ce:	681b      	ldr	r3, [r3, #0]
    15d0:	0018      	movs	r0, r3
    15d2:	4b86      	ldr	r3, [pc, #536]	; (17ec <usart_init+0x240>)
    15d4:	4798      	blx	r3
    15d6:	0003      	movs	r3, r0
    15d8:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    15da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    15dc:	3302      	adds	r3, #2
    15de:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    15e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    15e2:	3314      	adds	r3, #20
    15e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    15e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15e8:	681b      	ldr	r3, [r3, #0]
    15ea:	2201      	movs	r2, #1
    15ec:	4013      	ands	r3, r2
    15ee:	d001      	beq.n	15f4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    15f0:	2305      	movs	r3, #5
    15f2:	e0f6      	b.n	17e2 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    15f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15f6:	681b      	ldr	r3, [r3, #0]
    15f8:	2202      	movs	r2, #2
    15fa:	4013      	ands	r3, r2
    15fc:	d001      	beq.n	1602 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    15fe:	231c      	movs	r3, #28
    1600:	e0ef      	b.n	17e2 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1602:	2201      	movs	r2, #1
    1604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1606:	409a      	lsls	r2, r3
    1608:	0013      	movs	r3, r2
    160a:	0019      	movs	r1, r3
    160c:	2002      	movs	r0, #2
    160e:	4b78      	ldr	r3, [pc, #480]	; (17f0 <usart_init+0x244>)
    1610:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1612:	2324      	movs	r3, #36	; 0x24
    1614:	18fb      	adds	r3, r7, r3
    1616:	0018      	movs	r0, r3
    1618:	4b76      	ldr	r3, [pc, #472]	; (17f4 <usart_init+0x248>)
    161a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	222d      	movs	r2, #45	; 0x2d
    1620:	5c9a      	ldrb	r2, [r3, r2]
    1622:	2324      	movs	r3, #36	; 0x24
    1624:	18fb      	adds	r3, r7, r3
    1626:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1628:	6abb      	ldr	r3, [r7, #40]	; 0x28
    162a:	b2db      	uxtb	r3, r3
    162c:	2224      	movs	r2, #36	; 0x24
    162e:	18ba      	adds	r2, r7, r2
    1630:	0011      	movs	r1, r2
    1632:	0018      	movs	r0, r3
    1634:	4b70      	ldr	r3, [pc, #448]	; (17f8 <usart_init+0x24c>)
    1636:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1638:	6abb      	ldr	r3, [r7, #40]	; 0x28
    163a:	b2db      	uxtb	r3, r3
    163c:	0018      	movs	r0, r3
    163e:	4b6f      	ldr	r3, [pc, #444]	; (17fc <usart_init+0x250>)
    1640:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	222d      	movs	r2, #45	; 0x2d
    1646:	5c9b      	ldrb	r3, [r3, r2]
    1648:	2100      	movs	r1, #0
    164a:	0018      	movs	r0, r3
    164c:	4b6c      	ldr	r3, [pc, #432]	; (1800 <usart_init+0x254>)
    164e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	7ada      	ldrb	r2, [r3, #11]
    1654:	68fb      	ldr	r3, [r7, #12]
    1656:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	2224      	movs	r2, #36	; 0x24
    165c:	5c9a      	ldrb	r2, [r3, r2]
    165e:	68fb      	ldr	r3, [r7, #12]
    1660:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	2225      	movs	r2, #37	; 0x25
    1666:	5c9a      	ldrb	r2, [r3, r2]
    1668:	68fb      	ldr	r3, [r7, #12]
    166a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	7eda      	ldrb	r2, [r3, #27]
    1670:	68fb      	ldr	r3, [r7, #12]
    1672:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1674:	687b      	ldr	r3, [r7, #4]
    1676:	7f1a      	ldrb	r2, [r3, #28]
    1678:	68fb      	ldr	r3, [r7, #12]
    167a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    167c:	233b      	movs	r3, #59	; 0x3b
    167e:	18fc      	adds	r4, r7, r3
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	68fb      	ldr	r3, [r7, #12]
    1684:	0011      	movs	r1, r2
    1686:	0018      	movs	r0, r3
    1688:	4b5e      	ldr	r3, [pc, #376]	; (1804 <usart_init+0x258>)
    168a:	4798      	blx	r3
    168c:	0003      	movs	r3, r0
    168e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    1690:	233b      	movs	r3, #59	; 0x3b
    1692:	18fb      	adds	r3, r7, r3
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	2b00      	cmp	r3, #0
    1698:	d003      	beq.n	16a2 <usart_init+0xf6>
		return status_code;
    169a:	233b      	movs	r3, #59	; 0x3b
    169c:	18fb      	adds	r3, r7, r3
    169e:	781b      	ldrb	r3, [r3, #0]
    16a0:	e09f      	b.n	17e2 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    16a2:	2320      	movs	r3, #32
    16a4:	18fb      	adds	r3, r7, r3
    16a6:	0018      	movs	r0, r3
    16a8:	4b57      	ldr	r3, [pc, #348]	; (1808 <usart_init+0x25c>)
    16aa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    16ac:	2320      	movs	r3, #32
    16ae:	18fb      	adds	r3, r7, r3
    16b0:	2200      	movs	r2, #0
    16b2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    16b4:	2320      	movs	r3, #32
    16b6:	18fb      	adds	r3, r7, r3
    16b8:	2200      	movs	r2, #0
    16ba:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    16c0:	2310      	movs	r3, #16
    16c2:	18fb      	adds	r3, r7, r3
    16c4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    16ca:	2310      	movs	r3, #16
    16cc:	18fb      	adds	r3, r7, r3
    16ce:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    16d4:	2310      	movs	r3, #16
    16d6:	18fb      	adds	r3, r7, r3
    16d8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    16de:	2310      	movs	r3, #16
    16e0:	18fb      	adds	r3, r7, r3
    16e2:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    16e4:	2347      	movs	r3, #71	; 0x47
    16e6:	18fb      	adds	r3, r7, r3
    16e8:	2200      	movs	r2, #0
    16ea:	701a      	strb	r2, [r3, #0]
    16ec:	e02c      	b.n	1748 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16ee:	2347      	movs	r3, #71	; 0x47
    16f0:	18fb      	adds	r3, r7, r3
    16f2:	781a      	ldrb	r2, [r3, #0]
    16f4:	2310      	movs	r3, #16
    16f6:	18fb      	adds	r3, r7, r3
    16f8:	0092      	lsls	r2, r2, #2
    16fa:	58d3      	ldr	r3, [r2, r3]
    16fc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    16fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1700:	2b00      	cmp	r3, #0
    1702:	d109      	bne.n	1718 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1704:	2347      	movs	r3, #71	; 0x47
    1706:	18fb      	adds	r3, r7, r3
    1708:	781a      	ldrb	r2, [r3, #0]
    170a:	68bb      	ldr	r3, [r7, #8]
    170c:	0011      	movs	r1, r2
    170e:	0018      	movs	r0, r3
    1710:	4b3e      	ldr	r3, [pc, #248]	; (180c <usart_init+0x260>)
    1712:	4798      	blx	r3
    1714:	0003      	movs	r3, r0
    1716:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    171a:	3301      	adds	r3, #1
    171c:	d00d      	beq.n	173a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    171e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1720:	b2da      	uxtb	r2, r3
    1722:	2320      	movs	r3, #32
    1724:	18fb      	adds	r3, r7, r3
    1726:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    172a:	0c1b      	lsrs	r3, r3, #16
    172c:	b2db      	uxtb	r3, r3
    172e:	2220      	movs	r2, #32
    1730:	18ba      	adds	r2, r7, r2
    1732:	0011      	movs	r1, r2
    1734:	0018      	movs	r0, r3
    1736:	4b36      	ldr	r3, [pc, #216]	; (1810 <usart_init+0x264>)
    1738:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    173a:	2347      	movs	r3, #71	; 0x47
    173c:	18fb      	adds	r3, r7, r3
    173e:	781a      	ldrb	r2, [r3, #0]
    1740:	2347      	movs	r3, #71	; 0x47
    1742:	18fb      	adds	r3, r7, r3
    1744:	3201      	adds	r2, #1
    1746:	701a      	strb	r2, [r3, #0]
    1748:	2347      	movs	r3, #71	; 0x47
    174a:	18fb      	adds	r3, r7, r3
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	2b03      	cmp	r3, #3
    1750:	d9cd      	bls.n	16ee <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1752:	2300      	movs	r3, #0
    1754:	63fb      	str	r3, [r7, #60]	; 0x3c
    1756:	e00a      	b.n	176e <usart_init+0x1c2>
		module->callback[i]            = NULL;
    1758:	68fa      	ldr	r2, [r7, #12]
    175a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    175c:	3302      	adds	r3, #2
    175e:	009b      	lsls	r3, r3, #2
    1760:	18d3      	adds	r3, r2, r3
    1762:	3304      	adds	r3, #4
    1764:	2200      	movs	r2, #0
    1766:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    176a:	3301      	adds	r3, #1
    176c:	63fb      	str	r3, [r7, #60]	; 0x3c
    176e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1770:	2b05      	cmp	r3, #5
    1772:	d9f1      	bls.n	1758 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    1774:	68fb      	ldr	r3, [r7, #12]
    1776:	2200      	movs	r2, #0
    1778:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    177a:	68fb      	ldr	r3, [r7, #12]
    177c:	2200      	movs	r2, #0
    177e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1780:	68fb      	ldr	r3, [r7, #12]
    1782:	2200      	movs	r2, #0
    1784:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1786:	68fb      	ldr	r3, [r7, #12]
    1788:	2200      	movs	r2, #0
    178a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    178c:	68fb      	ldr	r3, [r7, #12]
    178e:	2230      	movs	r2, #48	; 0x30
    1790:	2100      	movs	r1, #0
    1792:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	2231      	movs	r2, #49	; 0x31
    1798:	2100      	movs	r1, #0
    179a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	2232      	movs	r2, #50	; 0x32
    17a0:	2100      	movs	r1, #0
    17a2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    17a4:	68fb      	ldr	r3, [r7, #12]
    17a6:	2233      	movs	r2, #51	; 0x33
    17a8:	2100      	movs	r1, #0
    17aa:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    17ac:	68fb      	ldr	r3, [r7, #12]
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	2227      	movs	r2, #39	; 0x27
    17b2:	18bc      	adds	r4, r7, r2
    17b4:	0018      	movs	r0, r3
    17b6:	4b0d      	ldr	r3, [pc, #52]	; (17ec <usart_init+0x240>)
    17b8:	4798      	blx	r3
    17ba:	0003      	movs	r3, r0
    17bc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    17be:	4a15      	ldr	r2, [pc, #84]	; (1814 <usart_init+0x268>)
    17c0:	2327      	movs	r3, #39	; 0x27
    17c2:	18fb      	adds	r3, r7, r3
    17c4:	781b      	ldrb	r3, [r3, #0]
    17c6:	0011      	movs	r1, r2
    17c8:	0018      	movs	r0, r3
    17ca:	4b13      	ldr	r3, [pc, #76]	; (1818 <usart_init+0x26c>)
    17cc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    17ce:	2327      	movs	r3, #39	; 0x27
    17d0:	18fb      	adds	r3, r7, r3
    17d2:	781a      	ldrb	r2, [r3, #0]
    17d4:	4b11      	ldr	r3, [pc, #68]	; (181c <usart_init+0x270>)
    17d6:	0092      	lsls	r2, r2, #2
    17d8:	68f9      	ldr	r1, [r7, #12]
    17da:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    17dc:	233b      	movs	r3, #59	; 0x3b
    17de:	18fb      	adds	r3, r7, r3
    17e0:	781b      	ldrb	r3, [r3, #0]
}
    17e2:	0018      	movs	r0, r3
    17e4:	46bd      	mov	sp, r7
    17e6:	b013      	add	sp, #76	; 0x4c
    17e8:	bd90      	pop	{r4, r7, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	0000102d 	.word	0x0000102d
    17f0:	000011e9 	.word	0x000011e9
    17f4:	000011d1 	.word	0x000011d1
    17f8:	000054d1 	.word	0x000054d1
    17fc:	00005515 	.word	0x00005515
    1800:	00000de5 	.word	0x00000de5
    1804:	000012d1 	.word	0x000012d1
    1808:	00001245 	.word	0x00001245
    180c:	00000e71 	.word	0x00000e71
    1810:	000057bd 	.word	0x000057bd
    1814:	00001865 	.word	0x00001865
    1818:	00001091 	.word	0x00001091
    181c:	20000138 	.word	0x20000138

00001820 <usart_is_syncing>:
{
    1820:	b580      	push	{r7, lr}
    1822:	b084      	sub	sp, #16
    1824:	af00      	add	r7, sp, #0
    1826:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    182e:	68fb      	ldr	r3, [r7, #12]
    1830:	69db      	ldr	r3, [r3, #28]
    1832:	1e5a      	subs	r2, r3, #1
    1834:	4193      	sbcs	r3, r2
    1836:	b2db      	uxtb	r3, r3
}
    1838:	0018      	movs	r0, r3
    183a:	46bd      	mov	sp, r7
    183c:	b004      	add	sp, #16
    183e:	bd80      	pop	{r7, pc}

00001840 <_usart_wait_for_sync>:
{
    1840:	b580      	push	{r7, lr}
    1842:	b082      	sub	sp, #8
    1844:	af00      	add	r7, sp, #0
    1846:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    1848:	46c0      	nop			; (mov r8, r8)
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	0018      	movs	r0, r3
    184e:	4b04      	ldr	r3, [pc, #16]	; (1860 <_usart_wait_for_sync+0x20>)
    1850:	4798      	blx	r3
    1852:	1e03      	subs	r3, r0, #0
    1854:	d1f9      	bne.n	184a <_usart_wait_for_sync+0xa>
}
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	46bd      	mov	sp, r7
    185a:	b002      	add	sp, #8
    185c:	bd80      	pop	{r7, pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	00001821 	.word	0x00001821

00001864 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1864:	b580      	push	{r7, lr}
    1866:	b088      	sub	sp, #32
    1868:	af00      	add	r7, sp, #0
    186a:	0002      	movs	r2, r0
    186c:	1dfb      	adds	r3, r7, #7
    186e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1870:	1dfb      	adds	r3, r7, #7
    1872:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    1874:	4ba3      	ldr	r3, [pc, #652]	; (1b04 <_usart_interrupt_handler+0x2a0>)
    1876:	0092      	lsls	r2, r2, #2
    1878:	58d3      	ldr	r3, [r2, r3]
    187a:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    187c:	69bb      	ldr	r3, [r7, #24]
    187e:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    1880:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    1882:	69bb      	ldr	r3, [r7, #24]
    1884:	0018      	movs	r0, r3
    1886:	4ba0      	ldr	r3, [pc, #640]	; (1b08 <_usart_interrupt_handler+0x2a4>)
    1888:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    188a:	697b      	ldr	r3, [r7, #20]
    188c:	7e1b      	ldrb	r3, [r3, #24]
    188e:	b2da      	uxtb	r2, r3
    1890:	2312      	movs	r3, #18
    1892:	18fb      	adds	r3, r7, r3
    1894:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    1896:	697b      	ldr	r3, [r7, #20]
    1898:	7d9b      	ldrb	r3, [r3, #22]
    189a:	b2db      	uxtb	r3, r3
    189c:	b29a      	uxth	r2, r3
    189e:	2312      	movs	r3, #18
    18a0:	18fb      	adds	r3, r7, r3
    18a2:	2112      	movs	r1, #18
    18a4:	1879      	adds	r1, r7, r1
    18a6:	8809      	ldrh	r1, [r1, #0]
    18a8:	400a      	ands	r2, r1
    18aa:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    18ac:	69bb      	ldr	r3, [r7, #24]
    18ae:	2230      	movs	r2, #48	; 0x30
    18b0:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    18b2:	69ba      	ldr	r2, [r7, #24]
    18b4:	2131      	movs	r1, #49	; 0x31
    18b6:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    18b8:	4013      	ands	r3, r2
    18ba:	b2da      	uxtb	r2, r3
    18bc:	2310      	movs	r3, #16
    18be:	18fb      	adds	r3, r7, r3
    18c0:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    18c2:	2312      	movs	r3, #18
    18c4:	18fb      	adds	r3, r7, r3
    18c6:	881b      	ldrh	r3, [r3, #0]
    18c8:	2201      	movs	r2, #1
    18ca:	4013      	ands	r3, r2
    18cc:	d044      	beq.n	1958 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    18ce:	69bb      	ldr	r3, [r7, #24]
    18d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    18d2:	b29b      	uxth	r3, r3
    18d4:	2b00      	cmp	r3, #0
    18d6:	d03c      	beq.n	1952 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18d8:	69bb      	ldr	r3, [r7, #24]
    18da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18dc:	781b      	ldrb	r3, [r3, #0]
    18de:	b2da      	uxtb	r2, r3
    18e0:	231c      	movs	r3, #28
    18e2:	18fb      	adds	r3, r7, r3
    18e4:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    18e6:	69bb      	ldr	r3, [r7, #24]
    18e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18ea:	1c5a      	adds	r2, r3, #1
    18ec:	69bb      	ldr	r3, [r7, #24]
    18ee:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18f0:	69bb      	ldr	r3, [r7, #24]
    18f2:	795b      	ldrb	r3, [r3, #5]
    18f4:	2b01      	cmp	r3, #1
    18f6:	d113      	bne.n	1920 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18f8:	69bb      	ldr	r3, [r7, #24]
    18fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18fc:	781b      	ldrb	r3, [r3, #0]
    18fe:	b2db      	uxtb	r3, r3
    1900:	021b      	lsls	r3, r3, #8
    1902:	b21a      	sxth	r2, r3
    1904:	231c      	movs	r3, #28
    1906:	18fb      	adds	r3, r7, r3
    1908:	2100      	movs	r1, #0
    190a:	5e5b      	ldrsh	r3, [r3, r1]
    190c:	4313      	orrs	r3, r2
    190e:	b21a      	sxth	r2, r3
    1910:	231c      	movs	r3, #28
    1912:	18fb      	adds	r3, r7, r3
    1914:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1916:	69bb      	ldr	r3, [r7, #24]
    1918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    191a:	1c5a      	adds	r2, r3, #1
    191c:	69bb      	ldr	r3, [r7, #24]
    191e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1920:	231c      	movs	r3, #28
    1922:	18fb      	adds	r3, r7, r3
    1924:	881b      	ldrh	r3, [r3, #0]
    1926:	05db      	lsls	r3, r3, #23
    1928:	0ddb      	lsrs	r3, r3, #23
    192a:	b29a      	uxth	r2, r3
    192c:	697b      	ldr	r3, [r7, #20]
    192e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1930:	69bb      	ldr	r3, [r7, #24]
    1932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1934:	b29b      	uxth	r3, r3
    1936:	3b01      	subs	r3, #1
    1938:	b29b      	uxth	r3, r3
    193a:	69ba      	ldr	r2, [r7, #24]
    193c:	1c19      	adds	r1, r3, #0
    193e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    1940:	2b00      	cmp	r3, #0
    1942:	d109      	bne.n	1958 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1944:	697b      	ldr	r3, [r7, #20]
    1946:	2201      	movs	r2, #1
    1948:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    194a:	697b      	ldr	r3, [r7, #20]
    194c:	2202      	movs	r2, #2
    194e:	759a      	strb	r2, [r3, #22]
    1950:	e002      	b.n	1958 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1952:	697b      	ldr	r3, [r7, #20]
    1954:	2201      	movs	r2, #1
    1956:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1958:	2312      	movs	r3, #18
    195a:	18fb      	adds	r3, r7, r3
    195c:	881b      	ldrh	r3, [r3, #0]
    195e:	2202      	movs	r2, #2
    1960:	4013      	ands	r3, r2
    1962:	d011      	beq.n	1988 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1964:	697b      	ldr	r3, [r7, #20]
    1966:	2202      	movs	r2, #2
    1968:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    196a:	69bb      	ldr	r3, [r7, #24]
    196c:	2233      	movs	r2, #51	; 0x33
    196e:	2100      	movs	r1, #0
    1970:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1972:	2310      	movs	r3, #16
    1974:	18fb      	adds	r3, r7, r3
    1976:	881b      	ldrh	r3, [r3, #0]
    1978:	2201      	movs	r2, #1
    197a:	4013      	ands	r3, r2
    197c:	d004      	beq.n	1988 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    197e:	69bb      	ldr	r3, [r7, #24]
    1980:	68db      	ldr	r3, [r3, #12]
    1982:	69ba      	ldr	r2, [r7, #24]
    1984:	0010      	movs	r0, r2
    1986:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1988:	2312      	movs	r3, #18
    198a:	18fb      	adds	r3, r7, r3
    198c:	881b      	ldrh	r3, [r3, #0]
    198e:	2204      	movs	r2, #4
    1990:	4013      	ands	r3, r2
    1992:	d100      	bne.n	1996 <_usart_interrupt_handler+0x132>
    1994:	e0bd      	b.n	1b12 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    1996:	69bb      	ldr	r3, [r7, #24]
    1998:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    199a:	b29b      	uxth	r3, r3
    199c:	2b00      	cmp	r3, #0
    199e:	d100      	bne.n	19a2 <_usart_interrupt_handler+0x13e>
    19a0:	e0b4      	b.n	1b0c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    19a2:	697b      	ldr	r3, [r7, #20]
    19a4:	8b5b      	ldrh	r3, [r3, #26]
    19a6:	b29b      	uxth	r3, r3
    19a8:	b2da      	uxtb	r2, r3
    19aa:	231f      	movs	r3, #31
    19ac:	18fb      	adds	r3, r7, r3
    19ae:	213f      	movs	r1, #63	; 0x3f
    19b0:	400a      	ands	r2, r1
    19b2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    19b4:	231f      	movs	r3, #31
    19b6:	18fb      	adds	r3, r7, r3
    19b8:	781b      	ldrb	r3, [r3, #0]
    19ba:	2208      	movs	r2, #8
    19bc:	4013      	ands	r3, r2
    19be:	d007      	beq.n	19d0 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    19c0:	231f      	movs	r3, #31
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	221f      	movs	r2, #31
    19c6:	18ba      	adds	r2, r7, r2
    19c8:	7812      	ldrb	r2, [r2, #0]
    19ca:	2108      	movs	r1, #8
    19cc:	438a      	bics	r2, r1
    19ce:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    19d0:	231f      	movs	r3, #31
    19d2:	18fb      	adds	r3, r7, r3
    19d4:	781b      	ldrb	r3, [r3, #0]
    19d6:	2b00      	cmp	r3, #0
    19d8:	d050      	beq.n	1a7c <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    19da:	231f      	movs	r3, #31
    19dc:	18fb      	adds	r3, r7, r3
    19de:	781b      	ldrb	r3, [r3, #0]
    19e0:	2202      	movs	r2, #2
    19e2:	4013      	ands	r3, r2
    19e4:	d007      	beq.n	19f6 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    19e6:	69bb      	ldr	r3, [r7, #24]
    19e8:	2232      	movs	r2, #50	; 0x32
    19ea:	211a      	movs	r1, #26
    19ec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    19ee:	697b      	ldr	r3, [r7, #20]
    19f0:	2202      	movs	r2, #2
    19f2:	835a      	strh	r2, [r3, #26]
    19f4:	e036      	b.n	1a64 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    19f6:	231f      	movs	r3, #31
    19f8:	18fb      	adds	r3, r7, r3
    19fa:	781b      	ldrb	r3, [r3, #0]
    19fc:	2204      	movs	r2, #4
    19fe:	4013      	ands	r3, r2
    1a00:	d007      	beq.n	1a12 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1a02:	69bb      	ldr	r3, [r7, #24]
    1a04:	2232      	movs	r2, #50	; 0x32
    1a06:	211e      	movs	r1, #30
    1a08:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1a0a:	697b      	ldr	r3, [r7, #20]
    1a0c:	2204      	movs	r2, #4
    1a0e:	835a      	strh	r2, [r3, #26]
    1a10:	e028      	b.n	1a64 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1a12:	231f      	movs	r3, #31
    1a14:	18fb      	adds	r3, r7, r3
    1a16:	781b      	ldrb	r3, [r3, #0]
    1a18:	2201      	movs	r2, #1
    1a1a:	4013      	ands	r3, r2
    1a1c:	d007      	beq.n	1a2e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1a1e:	69bb      	ldr	r3, [r7, #24]
    1a20:	2232      	movs	r2, #50	; 0x32
    1a22:	2113      	movs	r1, #19
    1a24:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1a26:	697b      	ldr	r3, [r7, #20]
    1a28:	2201      	movs	r2, #1
    1a2a:	835a      	strh	r2, [r3, #26]
    1a2c:	e01a      	b.n	1a64 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1a2e:	231f      	movs	r3, #31
    1a30:	18fb      	adds	r3, r7, r3
    1a32:	781b      	ldrb	r3, [r3, #0]
    1a34:	2210      	movs	r2, #16
    1a36:	4013      	ands	r3, r2
    1a38:	d007      	beq.n	1a4a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1a3a:	69bb      	ldr	r3, [r7, #24]
    1a3c:	2232      	movs	r2, #50	; 0x32
    1a3e:	2142      	movs	r1, #66	; 0x42
    1a40:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1a42:	697b      	ldr	r3, [r7, #20]
    1a44:	2210      	movs	r2, #16
    1a46:	835a      	strh	r2, [r3, #26]
    1a48:	e00c      	b.n	1a64 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1a4a:	231f      	movs	r3, #31
    1a4c:	18fb      	adds	r3, r7, r3
    1a4e:	781b      	ldrb	r3, [r3, #0]
    1a50:	2220      	movs	r2, #32
    1a52:	4013      	ands	r3, r2
    1a54:	d006      	beq.n	1a64 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1a56:	69bb      	ldr	r3, [r7, #24]
    1a58:	2232      	movs	r2, #50	; 0x32
    1a5a:	2141      	movs	r1, #65	; 0x41
    1a5c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1a5e:	697b      	ldr	r3, [r7, #20]
    1a60:	2220      	movs	r2, #32
    1a62:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1a64:	2310      	movs	r3, #16
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	881b      	ldrh	r3, [r3, #0]
    1a6a:	2204      	movs	r2, #4
    1a6c:	4013      	ands	r3, r2
				if (callback_status
    1a6e:	d050      	beq.n	1b12 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1a70:	69bb      	ldr	r3, [r7, #24]
    1a72:	695b      	ldr	r3, [r3, #20]
    1a74:	69ba      	ldr	r2, [r7, #24]
    1a76:	0010      	movs	r0, r2
    1a78:	4798      	blx	r3
    1a7a:	e04a      	b.n	1b12 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1a7c:	697b      	ldr	r3, [r7, #20]
    1a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1a80:	b29a      	uxth	r2, r3
    1a82:	230e      	movs	r3, #14
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	05d2      	lsls	r2, r2, #23
    1a88:	0dd2      	lsrs	r2, r2, #23
    1a8a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a8c:	69bb      	ldr	r3, [r7, #24]
    1a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a90:	220e      	movs	r2, #14
    1a92:	18ba      	adds	r2, r7, r2
    1a94:	8812      	ldrh	r2, [r2, #0]
    1a96:	b2d2      	uxtb	r2, r2
    1a98:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a9a:	69bb      	ldr	r3, [r7, #24]
    1a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a9e:	1c5a      	adds	r2, r3, #1
    1aa0:	69bb      	ldr	r3, [r7, #24]
    1aa2:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1aa4:	69bb      	ldr	r3, [r7, #24]
    1aa6:	795b      	ldrb	r3, [r3, #5]
    1aa8:	2b01      	cmp	r3, #1
    1aaa:	d10d      	bne.n	1ac8 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1aac:	69bb      	ldr	r3, [r7, #24]
    1aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ab0:	220e      	movs	r2, #14
    1ab2:	18ba      	adds	r2, r7, r2
    1ab4:	8812      	ldrh	r2, [r2, #0]
    1ab6:	0a12      	lsrs	r2, r2, #8
    1ab8:	b292      	uxth	r2, r2
    1aba:	b2d2      	uxtb	r2, r2
    1abc:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1abe:	69bb      	ldr	r3, [r7, #24]
    1ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ac2:	1c5a      	adds	r2, r3, #1
    1ac4:	69bb      	ldr	r3, [r7, #24]
    1ac6:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1ac8:	69bb      	ldr	r3, [r7, #24]
    1aca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1acc:	b29b      	uxth	r3, r3
    1ace:	3b01      	subs	r3, #1
    1ad0:	b29b      	uxth	r3, r3
    1ad2:	69ba      	ldr	r2, [r7, #24]
    1ad4:	1c19      	adds	r1, r3, #0
    1ad6:	8591      	strh	r1, [r2, #44]	; 0x2c
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d11a      	bne.n	1b12 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1adc:	697b      	ldr	r3, [r7, #20]
    1ade:	2204      	movs	r2, #4
    1ae0:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    1ae2:	69bb      	ldr	r3, [r7, #24]
    1ae4:	2232      	movs	r2, #50	; 0x32
    1ae6:	2100      	movs	r1, #0
    1ae8:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1aea:	2310      	movs	r3, #16
    1aec:	18fb      	adds	r3, r7, r3
    1aee:	881b      	ldrh	r3, [r3, #0]
    1af0:	2202      	movs	r2, #2
    1af2:	4013      	ands	r3, r2
					if (callback_status
    1af4:	d00d      	beq.n	1b12 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1af6:	69bb      	ldr	r3, [r7, #24]
    1af8:	691b      	ldr	r3, [r3, #16]
    1afa:	69ba      	ldr	r2, [r7, #24]
    1afc:	0010      	movs	r0, r2
    1afe:	4798      	blx	r3
    1b00:	e007      	b.n	1b12 <_usart_interrupt_handler+0x2ae>
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	20000138 	.word	0x20000138
    1b08:	00001841 	.word	0x00001841
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1b0c:	697b      	ldr	r3, [r7, #20]
    1b0e:	2204      	movs	r2, #4
    1b10:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1b12:	2312      	movs	r3, #18
    1b14:	18fb      	adds	r3, r7, r3
    1b16:	881b      	ldrh	r3, [r3, #0]
    1b18:	2210      	movs	r2, #16
    1b1a:	4013      	ands	r3, r2
    1b1c:	d010      	beq.n	1b40 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1b1e:	697b      	ldr	r3, [r7, #20]
    1b20:	2210      	movs	r2, #16
    1b22:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1b24:	697b      	ldr	r3, [r7, #20]
    1b26:	2210      	movs	r2, #16
    1b28:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1b2a:	2310      	movs	r3, #16
    1b2c:	18fb      	adds	r3, r7, r3
    1b2e:	881b      	ldrh	r3, [r3, #0]
    1b30:	2210      	movs	r2, #16
    1b32:	4013      	ands	r3, r2
    1b34:	d004      	beq.n	1b40 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1b36:	69bb      	ldr	r3, [r7, #24]
    1b38:	69db      	ldr	r3, [r3, #28]
    1b3a:	69ba      	ldr	r2, [r7, #24]
    1b3c:	0010      	movs	r0, r2
    1b3e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1b40:	2312      	movs	r3, #18
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	881b      	ldrh	r3, [r3, #0]
    1b46:	2220      	movs	r2, #32
    1b48:	4013      	ands	r3, r2
    1b4a:	d010      	beq.n	1b6e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1b4c:	697b      	ldr	r3, [r7, #20]
    1b4e:	2220      	movs	r2, #32
    1b50:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1b52:	697b      	ldr	r3, [r7, #20]
    1b54:	2220      	movs	r2, #32
    1b56:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1b58:	2310      	movs	r3, #16
    1b5a:	18fb      	adds	r3, r7, r3
    1b5c:	881b      	ldrh	r3, [r3, #0]
    1b5e:	2208      	movs	r2, #8
    1b60:	4013      	ands	r3, r2
    1b62:	d004      	beq.n	1b6e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1b64:	69bb      	ldr	r3, [r7, #24]
    1b66:	699b      	ldr	r3, [r3, #24]
    1b68:	69ba      	ldr	r2, [r7, #24]
    1b6a:	0010      	movs	r0, r2
    1b6c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1b6e:	2312      	movs	r3, #18
    1b70:	18fb      	adds	r3, r7, r3
    1b72:	881b      	ldrh	r3, [r3, #0]
    1b74:	2208      	movs	r2, #8
    1b76:	4013      	ands	r3, r2
    1b78:	d010      	beq.n	1b9c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1b7a:	697b      	ldr	r3, [r7, #20]
    1b7c:	2208      	movs	r2, #8
    1b7e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1b80:	697b      	ldr	r3, [r7, #20]
    1b82:	2208      	movs	r2, #8
    1b84:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1b86:	2310      	movs	r3, #16
    1b88:	18fb      	adds	r3, r7, r3
    1b8a:	881b      	ldrh	r3, [r3, #0]
    1b8c:	2220      	movs	r2, #32
    1b8e:	4013      	ands	r3, r2
    1b90:	d004      	beq.n	1b9c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1b92:	69bb      	ldr	r3, [r7, #24]
    1b94:	6a1b      	ldr	r3, [r3, #32]
    1b96:	69ba      	ldr	r2, [r7, #24]
    1b98:	0010      	movs	r0, r2
    1b9a:	4798      	blx	r3
		}
	}
#endif
}
    1b9c:	46c0      	nop			; (mov r8, r8)
    1b9e:	46bd      	mov	sp, r7
    1ba0:	b008      	add	sp, #32
    1ba2:	bd80      	pop	{r7, pc}

00001ba4 <system_interrupt_enable>:
{
    1ba4:	b580      	push	{r7, lr}
    1ba6:	b082      	sub	sp, #8
    1ba8:	af00      	add	r7, sp, #0
    1baa:	0002      	movs	r2, r0
    1bac:	1dfb      	adds	r3, r7, #7
    1bae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1bb0:	4b06      	ldr	r3, [pc, #24]	; (1bcc <system_interrupt_enable+0x28>)
    1bb2:	1dfa      	adds	r2, r7, #7
    1bb4:	7812      	ldrb	r2, [r2, #0]
    1bb6:	0011      	movs	r1, r2
    1bb8:	221f      	movs	r2, #31
    1bba:	400a      	ands	r2, r1
    1bbc:	2101      	movs	r1, #1
    1bbe:	4091      	lsls	r1, r2
    1bc0:	000a      	movs	r2, r1
    1bc2:	601a      	str	r2, [r3, #0]
}
    1bc4:	46c0      	nop			; (mov r8, r8)
    1bc6:	46bd      	mov	sp, r7
    1bc8:	b002      	add	sp, #8
    1bca:	bd80      	pop	{r7, pc}
    1bcc:	e000e100 	.word	0xe000e100

00001bd0 <usart_is_syncing>:
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b084      	sub	sp, #16
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	681b      	ldr	r3, [r3, #0]
    1bdc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    1bde:	68fb      	ldr	r3, [r7, #12]
    1be0:	69db      	ldr	r3, [r3, #28]
    1be2:	1e5a      	subs	r2, r3, #1
    1be4:	4193      	sbcs	r3, r2
    1be6:	b2db      	uxtb	r3, r3
}
    1be8:	0018      	movs	r0, r3
    1bea:	46bd      	mov	sp, r7
    1bec:	b004      	add	sp, #16
    1bee:	bd80      	pop	{r7, pc}

00001bf0 <_usart_wait_for_sync>:
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b082      	sub	sp, #8
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    1bf8:	46c0      	nop			; (mov r8, r8)
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	0018      	movs	r0, r3
    1bfe:	4b04      	ldr	r3, [pc, #16]	; (1c10 <_usart_wait_for_sync+0x20>)
    1c00:	4798      	blx	r3
    1c02:	1e03      	subs	r3, r0, #0
    1c04:	d1f9      	bne.n	1bfa <_usart_wait_for_sync+0xa>
}
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	46bd      	mov	sp, r7
    1c0a:	b002      	add	sp, #8
    1c0c:	bd80      	pop	{r7, pc}
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	00001bd1 	.word	0x00001bd1

00001c14 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    1c14:	b580      	push	{r7, lr}
    1c16:	b082      	sub	sp, #8
    1c18:	af00      	add	r7, sp, #0
    1c1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	2280      	movs	r2, #128	; 0x80
    1c20:	05d2      	lsls	r2, r2, #23
    1c22:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	2200      	movs	r2, #0
    1c28:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	22ff      	movs	r2, #255	; 0xff
    1c2e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	2200      	movs	r2, #0
    1c34:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	2200      	movs	r2, #0
    1c3a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	2296      	movs	r2, #150	; 0x96
    1c40:	0192      	lsls	r2, r2, #6
    1c42:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	2224      	movs	r2, #36	; 0x24
    1c48:	2101      	movs	r1, #1
    1c4a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	2225      	movs	r2, #37	; 0x25
    1c50:	2101      	movs	r1, #1
    1c52:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    1c54:	687b      	ldr	r3, [r7, #4]
    1c56:	2226      	movs	r2, #38	; 0x26
    1c58:	2100      	movs	r1, #0
    1c5a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	2227      	movs	r2, #39	; 0x27
    1c60:	2100      	movs	r1, #0
    1c62:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	2200      	movs	r2, #0
    1c68:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	2288      	movs	r2, #136	; 0x88
    1c6e:	0352      	lsls	r2, r2, #13
    1c70:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    1c72:	687b      	ldr	r3, [r7, #4]
    1c74:	222c      	movs	r2, #44	; 0x2c
    1c76:	2100      	movs	r1, #0
    1c78:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	222d      	movs	r2, #45	; 0x2d
    1c7e:	2100      	movs	r1, #0
    1c80:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	2200      	movs	r2, #0
    1c86:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	2200      	movs	r2, #0
    1c8c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1c8e:	687b      	ldr	r3, [r7, #4]
    1c90:	2200      	movs	r2, #0
    1c92:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	2200      	movs	r2, #0
    1c98:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	2200      	movs	r2, #0
    1c9e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	2200      	movs	r2, #0
    1ca4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	2200      	movs	r2, #0
    1caa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1cac:	687b      	ldr	r3, [r7, #4]
    1cae:	2200      	movs	r2, #0
    1cb0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	2200      	movs	r2, #0
    1cb6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	2200      	movs	r2, #0
    1cbc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	2213      	movs	r2, #19
    1cc2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1cc4:	687b      	ldr	r3, [r7, #4]
    1cc6:	2200      	movs	r2, #0
    1cc8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	46bd      	mov	sp, r7
    1cce:	b002      	add	sp, #8
    1cd0:	bd80      	pop	{r7, pc}
	...

00001cd4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    1cd4:	b580      	push	{r7, lr}
    1cd6:	b084      	sub	sp, #16
    1cd8:	af00      	add	r7, sp, #0
    1cda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1cdc:	687b      	ldr	r3, [r7, #4]
    1cde:	681b      	ldr	r3, [r3, #0]
    1ce0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	0018      	movs	r0, r3
    1ce8:	4b09      	ldr	r3, [pc, #36]	; (1d10 <usart_enable+0x3c>)
    1cea:	4798      	blx	r3
    1cec:	0003      	movs	r3, r0
    1cee:	0018      	movs	r0, r3
    1cf0:	4b08      	ldr	r3, [pc, #32]	; (1d14 <usart_enable+0x40>)
    1cf2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	0018      	movs	r0, r3
    1cf8:	4b07      	ldr	r3, [pc, #28]	; (1d18 <usart_enable+0x44>)
    1cfa:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1cfc:	68fb      	ldr	r3, [r7, #12]
    1cfe:	681b      	ldr	r3, [r3, #0]
    1d00:	2202      	movs	r2, #2
    1d02:	431a      	orrs	r2, r3
    1d04:	68fb      	ldr	r3, [r7, #12]
    1d06:	601a      	str	r2, [r3, #0]
}
    1d08:	46c0      	nop			; (mov r8, r8)
    1d0a:	46bd      	mov	sp, r7
    1d0c:	b004      	add	sp, #16
    1d0e:	bd80      	pop	{r7, pc}
    1d10:	000010fd 	.word	0x000010fd
    1d14:	00001ba5 	.word	0x00001ba5
    1d18:	00001bf1 	.word	0x00001bf1

00001d1c <uartfiber_init>:
/************************************************************************/
static struct usart_module uartfiber_inst;


void uartfiber_init(void)
{
    1d1c:	b580      	push	{r7, lr}
    1d1e:	b090      	sub	sp, #64	; 0x40
    1d20:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    1d22:	003b      	movs	r3, r7
    1d24:	0018      	movs	r0, r3
    1d26:	4b18      	ldr	r3, [pc, #96]	; (1d88 <uartfiber_init+0x6c>)
    1d28:	4798      	blx	r3
    
    config_usart.baudrate    = UART_FIBER_BAUD;
    1d2a:	003b      	movs	r3, r7
    1d2c:	2296      	movs	r2, #150	; 0x96
    1d2e:	0192      	lsls	r2, r2, #6
    1d30:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX;
    1d32:	003b      	movs	r3, r7
    1d34:	2290      	movs	r2, #144	; 0x90
    1d36:	0352      	lsls	r2, r2, #13
    1d38:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = UTX_FIBER;
    1d3a:	003b      	movs	r3, r7
    1d3c:	4a13      	ldr	r2, [pc, #76]	; (1d8c <uartfiber_init+0x70>)
    1d3e:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = URX_FIBER;
    1d40:	003b      	movs	r3, r7
    1d42:	4a13      	ldr	r2, [pc, #76]	; (1d90 <uartfiber_init+0x74>)
    1d44:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    1d46:	003b      	movs	r3, r7
    1d48:	2201      	movs	r2, #1
    1d4a:	4252      	negs	r2, r2
    1d4c:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    1d4e:	003b      	movs	r3, r7
    1d50:	2201      	movs	r2, #1
    1d52:	4252      	negs	r2, r2
    1d54:	63da      	str	r2, [r3, #60]	; 0x3c
    config_usart.generator_source = UART_FIBER_CLK;
    1d56:	003b      	movs	r3, r7
    1d58:	222d      	movs	r2, #45	; 0x2d
    1d5a:	2100      	movs	r1, #0
    1d5c:	5499      	strb	r1, [r3, r2]
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    1d5e:	003b      	movs	r3, r7
    1d60:	2200      	movs	r2, #0
    1d62:	605a      	str	r2, [r3, #4]
    
    while (usart_init(&uartfiber_inst, UART_FIBER, &config_usart) != STATUS_OK);
    1d64:	46c0      	nop			; (mov r8, r8)
    1d66:	003a      	movs	r2, r7
    1d68:	490a      	ldr	r1, [pc, #40]	; (1d94 <uartfiber_init+0x78>)
    1d6a:	4b0b      	ldr	r3, [pc, #44]	; (1d98 <uartfiber_init+0x7c>)
    1d6c:	0018      	movs	r0, r3
    1d6e:	4b0b      	ldr	r3, [pc, #44]	; (1d9c <uartfiber_init+0x80>)
    1d70:	4798      	blx	r3
    1d72:	1e03      	subs	r3, r0, #0
    1d74:	d1f7      	bne.n	1d66 <uartfiber_init+0x4a>
    
    // enable the uart
    usart_enable(&uartfiber_inst);
    1d76:	4b08      	ldr	r3, [pc, #32]	; (1d98 <uartfiber_init+0x7c>)
    1d78:	0018      	movs	r0, r3
    1d7a:	4b09      	ldr	r3, [pc, #36]	; (1da0 <uartfiber_init+0x84>)
    1d7c:	4798      	blx	r3
}
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	46bd      	mov	sp, r7
    1d82:	b010      	add	sp, #64	; 0x40
    1d84:	bd80      	pop	{r7, pc}
    1d86:	46c0      	nop			; (mov r8, r8)
    1d88:	00001c15 	.word	0x00001c15
    1d8c:	00040003 	.word	0x00040003
    1d90:	00050003 	.word	0x00050003
    1d94:	42000800 	.word	0x42000800
    1d98:	20000048 	.word	0x20000048
    1d9c:	000015ad 	.word	0x000015ad
    1da0:	00001cd5 	.word	0x00001cd5

00001da4 <system_interrupt_enable>:
{
    1da4:	b580      	push	{r7, lr}
    1da6:	b082      	sub	sp, #8
    1da8:	af00      	add	r7, sp, #0
    1daa:	0002      	movs	r2, r0
    1dac:	1dfb      	adds	r3, r7, #7
    1dae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1db0:	4b06      	ldr	r3, [pc, #24]	; (1dcc <system_interrupt_enable+0x28>)
    1db2:	1dfa      	adds	r2, r7, #7
    1db4:	7812      	ldrb	r2, [r2, #0]
    1db6:	0011      	movs	r1, r2
    1db8:	221f      	movs	r2, #31
    1dba:	400a      	ands	r2, r1
    1dbc:	2101      	movs	r1, #1
    1dbe:	4091      	lsls	r1, r2
    1dc0:	000a      	movs	r2, r1
    1dc2:	601a      	str	r2, [r3, #0]
}
    1dc4:	46c0      	nop			; (mov r8, r8)
    1dc6:	46bd      	mov	sp, r7
    1dc8:	b002      	add	sp, #8
    1dca:	bd80      	pop	{r7, pc}
    1dcc:	e000e100 	.word	0xe000e100

00001dd0 <usart_is_syncing>:
{
    1dd0:	b580      	push	{r7, lr}
    1dd2:	b084      	sub	sp, #16
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	681b      	ldr	r3, [r3, #0]
    1ddc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    1dde:	68fb      	ldr	r3, [r7, #12]
    1de0:	69db      	ldr	r3, [r3, #28]
    1de2:	1e5a      	subs	r2, r3, #1
    1de4:	4193      	sbcs	r3, r2
    1de6:	b2db      	uxtb	r3, r3
}
    1de8:	0018      	movs	r0, r3
    1dea:	46bd      	mov	sp, r7
    1dec:	b004      	add	sp, #16
    1dee:	bd80      	pop	{r7, pc}

00001df0 <_usart_wait_for_sync>:
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b082      	sub	sp, #8
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    1df8:	46c0      	nop			; (mov r8, r8)
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	0018      	movs	r0, r3
    1dfe:	4b04      	ldr	r3, [pc, #16]	; (1e10 <_usart_wait_for_sync+0x20>)
    1e00:	4798      	blx	r3
    1e02:	1e03      	subs	r3, r0, #0
    1e04:	d1f9      	bne.n	1dfa <_usart_wait_for_sync+0xa>
}
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	46bd      	mov	sp, r7
    1e0a:	b002      	add	sp, #8
    1e0c:	bd80      	pop	{r7, pc}
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	00001dd1 	.word	0x00001dd1

00001e14 <usart_get_config_defaults>:
{
    1e14:	b580      	push	{r7, lr}
    1e16:	b082      	sub	sp, #8
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
	config->data_order       = USART_DATAORDER_LSB;
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	2280      	movs	r2, #128	; 0x80
    1e20:	05d2      	lsls	r2, r2, #23
    1e22:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	2200      	movs	r2, #0
    1e28:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	22ff      	movs	r2, #255	; 0xff
    1e2e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	2200      	movs	r2, #0
    1e34:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	2200      	movs	r2, #0
    1e3a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	2296      	movs	r2, #150	; 0x96
    1e40:	0192      	lsls	r2, r2, #6
    1e42:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	2224      	movs	r2, #36	; 0x24
    1e48:	2101      	movs	r1, #1
    1e4a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	2225      	movs	r2, #37	; 0x25
    1e50:	2101      	movs	r1, #1
    1e52:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    1e54:	687b      	ldr	r3, [r7, #4]
    1e56:	2226      	movs	r2, #38	; 0x26
    1e58:	2100      	movs	r1, #0
    1e5a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	2227      	movs	r2, #39	; 0x27
    1e60:	2100      	movs	r1, #0
    1e62:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	2200      	movs	r2, #0
    1e68:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	2288      	movs	r2, #136	; 0x88
    1e6e:	0352      	lsls	r2, r2, #13
    1e70:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	222c      	movs	r2, #44	; 0x2c
    1e76:	2100      	movs	r1, #0
    1e78:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	222d      	movs	r2, #45	; 0x2d
    1e7e:	2100      	movs	r1, #0
    1e80:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	2200      	movs	r2, #0
    1e86:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	2200      	movs	r2, #0
    1e8c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	2200      	movs	r2, #0
    1e92:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	2200      	movs	r2, #0
    1e98:	63da      	str	r2, [r3, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	2200      	movs	r2, #0
    1e9e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	2200      	movs	r2, #0
    1ea4:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
    1ea6:	687b      	ldr	r3, [r7, #4]
    1ea8:	2200      	movs	r2, #0
    1eaa:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
    1eac:	687b      	ldr	r3, [r7, #4]
    1eae:	2200      	movs	r2, #0
    1eb0:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	2200      	movs	r2, #0
    1eb6:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	2200      	movs	r2, #0
    1ebc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    1ebe:	687b      	ldr	r3, [r7, #4]
    1ec0:	2213      	movs	r2, #19
    1ec2:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	2200      	movs	r2, #0
    1ec8:	775a      	strb	r2, [r3, #29]
}
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	46bd      	mov	sp, r7
    1ece:	b002      	add	sp, #8
    1ed0:	bd80      	pop	{r7, pc}
	...

00001ed4 <usart_enable>:
{
    1ed4:	b580      	push	{r7, lr}
    1ed6:	b084      	sub	sp, #16
    1ed8:	af00      	add	r7, sp, #0
    1eda:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1edc:	687b      	ldr	r3, [r7, #4]
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	681b      	ldr	r3, [r3, #0]
    1ee6:	0018      	movs	r0, r3
    1ee8:	4b09      	ldr	r3, [pc, #36]	; (1f10 <usart_enable+0x3c>)
    1eea:	4798      	blx	r3
    1eec:	0003      	movs	r3, r0
    1eee:	0018      	movs	r0, r3
    1ef0:	4b08      	ldr	r3, [pc, #32]	; (1f14 <usart_enable+0x40>)
    1ef2:	4798      	blx	r3
	_usart_wait_for_sync(module);
    1ef4:	687b      	ldr	r3, [r7, #4]
    1ef6:	0018      	movs	r0, r3
    1ef8:	4b07      	ldr	r3, [pc, #28]	; (1f18 <usart_enable+0x44>)
    1efa:	4798      	blx	r3
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1efc:	68fb      	ldr	r3, [r7, #12]
    1efe:	681b      	ldr	r3, [r3, #0]
    1f00:	2202      	movs	r2, #2
    1f02:	431a      	orrs	r2, r3
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	601a      	str	r2, [r3, #0]
}
    1f08:	46c0      	nop			; (mov r8, r8)
    1f0a:	46bd      	mov	sp, r7
    1f0c:	b004      	add	sp, #16
    1f0e:	bd80      	pop	{r7, pc}
    1f10:	000010fd 	.word	0x000010fd
    1f14:	00001da5 	.word	0x00001da5
    1f18:	00001df1 	.word	0x00001df1

00001f1c <uartib_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes the UART SERCOM for inter-board communication
 */
void uartib_init(void)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	b090      	sub	sp, #64	; 0x40
    1f20:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    1f22:	003b      	movs	r3, r7
    1f24:	0018      	movs	r0, r3
    1f26:	4b18      	ldr	r3, [pc, #96]	; (1f88 <uartib_init+0x6c>)
    1f28:	4798      	blx	r3
    
    config_usart.baudrate    = UART_IB_BAUD;
    1f2a:	003b      	movs	r3, r7
    1f2c:	2296      	movs	r2, #150	; 0x96
    1f2e:	0192      	lsls	r2, r2, #6
    1f30:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = UART_IB_PINMUX;
    1f32:	003b      	movs	r3, r7
    1f34:	2290      	movs	r2, #144	; 0x90
    1f36:	0352      	lsls	r2, r2, #13
    1f38:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = UTX_IB;
    1f3a:	003b      	movs	r3, r7
    1f3c:	4a13      	ldr	r2, [pc, #76]	; (1f8c <uartib_init+0x70>)
    1f3e:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = URX_IB;
    1f40:	003b      	movs	r3, r7
    1f42:	4a13      	ldr	r2, [pc, #76]	; (1f90 <uartib_init+0x74>)
    1f44:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    1f46:	003b      	movs	r3, r7
    1f48:	2201      	movs	r2, #1
    1f4a:	4252      	negs	r2, r2
    1f4c:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    1f4e:	003b      	movs	r3, r7
    1f50:	2201      	movs	r2, #1
    1f52:	4252      	negs	r2, r2
    1f54:	63da      	str	r2, [r3, #60]	; 0x3c
    config_usart.generator_source = UART_IB_CLK;
    1f56:	003b      	movs	r3, r7
    1f58:	222d      	movs	r2, #45	; 0x2d
    1f5a:	2100      	movs	r1, #0
    1f5c:	5499      	strb	r1, [r3, r2]
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    1f5e:	003b      	movs	r3, r7
    1f60:	2200      	movs	r2, #0
    1f62:	605a      	str	r2, [r3, #4]
    
    while (usart_init(&uartib_inst, UART_IB, &config_usart) != STATUS_OK);
    1f64:	46c0      	nop			; (mov r8, r8)
    1f66:	003a      	movs	r2, r7
    1f68:	490a      	ldr	r1, [pc, #40]	; (1f94 <uartib_init+0x78>)
    1f6a:	4b0b      	ldr	r3, [pc, #44]	; (1f98 <uartib_init+0x7c>)
    1f6c:	0018      	movs	r0, r3
    1f6e:	4b0b      	ldr	r3, [pc, #44]	; (1f9c <uartib_init+0x80>)
    1f70:	4798      	blx	r3
    1f72:	1e03      	subs	r3, r0, #0
    1f74:	d1f7      	bne.n	1f66 <uartib_init+0x4a>
    
    // enable the uart
    usart_enable(&uartib_inst);
    1f76:	4b08      	ldr	r3, [pc, #32]	; (1f98 <uartib_init+0x7c>)
    1f78:	0018      	movs	r0, r3
    1f7a:	4b09      	ldr	r3, [pc, #36]	; (1fa0 <uartib_init+0x84>)
    1f7c:	4798      	blx	r3
}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	46bd      	mov	sp, r7
    1f82:	b010      	add	sp, #64	; 0x40
    1f84:	bd80      	pop	{r7, pc}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	00001e15 	.word	0x00001e15
    1f8c:	00080003 	.word	0x00080003
    1f90:	00090003 	.word	0x00090003
    1f94:	42001000 	.word	0x42001000
    1f98:	2000007c 	.word	0x2000007c
    1f9c:	000015ad 	.word	0x000015ad
    1fa0:	00001ed5 	.word	0x00001ed5

00001fa4 <Ft_Gpu_CoCmd_Text>:
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*2));  
}
#endif

ft_void_t Ft_Gpu_CoCmd_Text(Ft_Gpu_Hal_Context_t *phost,ft_int16_t x, ft_int16_t y, ft_int16_t font, ft_uint16_t options, const ft_char8_t* s)
{
    1fa4:	b590      	push	{r4, r7, lr}
    1fa6:	b087      	sub	sp, #28
    1fa8:	af00      	add	r7, sp, #0
    1faa:	60f8      	str	r0, [r7, #12]
    1fac:	000c      	movs	r4, r1
    1fae:	0010      	movs	r0, r2
    1fb0:	0019      	movs	r1, r3
    1fb2:	230a      	movs	r3, #10
    1fb4:	18fb      	adds	r3, r7, r3
    1fb6:	1c22      	adds	r2, r4, #0
    1fb8:	801a      	strh	r2, [r3, #0]
    1fba:	2308      	movs	r3, #8
    1fbc:	18fb      	adds	r3, r7, r3
    1fbe:	1c02      	adds	r2, r0, #0
    1fc0:	801a      	strh	r2, [r3, #0]
    1fc2:	1dbb      	adds	r3, r7, #6
    1fc4:	1c0a      	adds	r2, r1, #0
    1fc6:	801a      	strh	r2, [r3, #0]
  ft_uint16_t len = strlen((const char*)s);
    1fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1fca:	0018      	movs	r0, r3
    1fcc:	4b25      	ldr	r3, [pc, #148]	; (2064 <STACK_SIZE+0x64>)
    1fce:	4798      	blx	r3
    1fd0:	0002      	movs	r2, r0
    1fd2:	2316      	movs	r3, #22
    1fd4:	18fb      	adds	r3, r7, r3
    1fd6:	801a      	strh	r2, [r3, #0]
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*3 + len + 1);
    1fd8:	2316      	movs	r3, #22
    1fda:	18fb      	adds	r3, r7, r3
    1fdc:	881b      	ldrh	r3, [r3, #0]
    1fde:	330d      	adds	r3, #13
    1fe0:	b29a      	uxth	r2, r3
    1fe2:	68fb      	ldr	r3, [r7, #12]
    1fe4:	0011      	movs	r1, r2
    1fe6:	0018      	movs	r0, r3
    1fe8:	4b1f      	ldr	r3, [pc, #124]	; (2068 <STACK_SIZE+0x68>)
    1fea:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_TEXT);
    1fec:	23f4      	movs	r3, #244	; 0xf4
    1fee:	425a      	negs	r2, r3
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	0011      	movs	r1, r2
    1ff4:	0018      	movs	r0, r3
    1ff6:	4b1d      	ldr	r3, [pc, #116]	; (206c <STACK_SIZE+0x6c>)
    1ff8:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    1ffa:	2308      	movs	r3, #8
    1ffc:	18fb      	adds	r3, r7, r3
    1ffe:	2200      	movs	r2, #0
    2000:	5e9b      	ldrsh	r3, [r3, r2]
    2002:	041a      	lsls	r2, r3, #16
    2004:	230a      	movs	r3, #10
    2006:	18fb      	adds	r3, r7, r3
    2008:	2100      	movs	r1, #0
    200a:	5e5b      	ldrsh	r3, [r3, r1]
    200c:	041b      	lsls	r3, r3, #16
    200e:	0c1b      	lsrs	r3, r3, #16
    2010:	431a      	orrs	r2, r3
    2012:	68fb      	ldr	r3, [r7, #12]
    2014:	0011      	movs	r1, r2
    2016:	0018      	movs	r0, r3
    2018:	4b14      	ldr	r3, [pc, #80]	; (206c <STACK_SIZE+0x6c>)
    201a:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    201c:	2328      	movs	r3, #40	; 0x28
    201e:	18fb      	adds	r3, r7, r3
    2020:	881b      	ldrh	r3, [r3, #0]
    2022:	041a      	lsls	r2, r3, #16
    2024:	1dbb      	adds	r3, r7, #6
    2026:	2100      	movs	r1, #0
    2028:	5e5b      	ldrsh	r3, [r3, r1]
    202a:	041b      	lsls	r3, r3, #16
    202c:	0c1b      	lsrs	r3, r3, #16
    202e:	431a      	orrs	r2, r3
    2030:	68fb      	ldr	r3, [r7, #12]
    2032:	0011      	movs	r1, r2
    2034:	0018      	movs	r0, r3
    2036:	4b0d      	ldr	r3, [pc, #52]	; (206c <STACK_SIZE+0x6c>)
    2038:	4798      	blx	r3
  Ft_Gpu_CoCmd_SendStr(phost, s);
    203a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	0011      	movs	r1, r2
    2040:	0018      	movs	r0, r3
    2042:	4b0b      	ldr	r3, [pc, #44]	; (2070 <STACK_SIZE+0x70>)
    2044:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*3 + len + 1));
    2046:	2316      	movs	r3, #22
    2048:	18fb      	adds	r3, r7, r3
    204a:	881b      	ldrh	r3, [r3, #0]
    204c:	330d      	adds	r3, #13
    204e:	b29a      	uxth	r2, r3
    2050:	68fb      	ldr	r3, [r7, #12]
    2052:	0011      	movs	r1, r2
    2054:	0018      	movs	r0, r3
    2056:	4b07      	ldr	r3, [pc, #28]	; (2074 <STACK_SIZE+0x74>)
    2058:	4798      	blx	r3
}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	46bd      	mov	sp, r7
    205e:	b007      	add	sp, #28
    2060:	bd90      	pop	{r4, r7, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	000061cf 	.word	0x000061cf
    2068:	00002141 	.word	0x00002141
    206c:	000020f9 	.word	0x000020f9
    2070:	0000211d 	.word	0x0000211d
    2074:	0000217d 	.word	0x0000217d

00002078 <Ft_Gpu_CoCmd_Swap>:
  Ft_Gpu_Copro_SendCmd(phost, CMD_BGCOLOR);
  Ft_Gpu_Copro_SendCmd(phost, c);
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*2));           
}
ft_void_t Ft_Gpu_CoCmd_Swap(Ft_Gpu_Hal_Context_t *phost)
{
    2078:	b580      	push	{r7, lr}
    207a:	b082      	sub	sp, #8
    207c:	af00      	add	r7, sp, #0
    207e:	6078      	str	r0, [r7, #4]
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*1);         
    2080:	687b      	ldr	r3, [r7, #4]
    2082:	2104      	movs	r1, #4
    2084:	0018      	movs	r0, r3
    2086:	4b09      	ldr	r3, [pc, #36]	; (20ac <Ft_Gpu_CoCmd_Swap+0x34>)
    2088:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_SWAP);
    208a:	23ff      	movs	r3, #255	; 0xff
    208c:	425a      	negs	r2, r3
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	0011      	movs	r1, r2
    2092:	0018      	movs	r0, r3
    2094:	4b06      	ldr	r3, [pc, #24]	; (20b0 <Ft_Gpu_CoCmd_Swap+0x38>)
    2096:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*1));         
    2098:	687b      	ldr	r3, [r7, #4]
    209a:	2104      	movs	r1, #4
    209c:	0018      	movs	r0, r3
    209e:	4b05      	ldr	r3, [pc, #20]	; (20b4 <Ft_Gpu_CoCmd_Swap+0x3c>)
    20a0:	4798      	blx	r3
}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	46bd      	mov	sp, r7
    20a6:	b002      	add	sp, #8
    20a8:	bd80      	pop	{r7, pc}
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	00002141 	.word	0x00002141
    20b0:	000020f9 	.word	0x000020f9
    20b4:	0000217d 	.word	0x0000217d

000020b8 <Ft_Gpu_CoCmd_Dlstart>:
}
#endif


ft_void_t Ft_Gpu_CoCmd_Dlstart(Ft_Gpu_Hal_Context_t *phost)
{
    20b8:	b580      	push	{r7, lr}
    20ba:	b082      	sub	sp, #8
    20bc:	af00      	add	r7, sp, #0
    20be:	6078      	str	r0, [r7, #4]
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*1);           
    20c0:	687b      	ldr	r3, [r7, #4]
    20c2:	2104      	movs	r1, #4
    20c4:	0018      	movs	r0, r3
    20c6:	4b08      	ldr	r3, [pc, #32]	; (20e8 <Ft_Gpu_CoCmd_Dlstart+0x30>)
    20c8:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_DLSTART);
    20ca:	4a08      	ldr	r2, [pc, #32]	; (20ec <Ft_Gpu_CoCmd_Dlstart+0x34>)
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	0011      	movs	r1, r2
    20d0:	0018      	movs	r0, r3
    20d2:	4b07      	ldr	r3, [pc, #28]	; (20f0 <Ft_Gpu_CoCmd_Dlstart+0x38>)
    20d4:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*1));             
    20d6:	687b      	ldr	r3, [r7, #4]
    20d8:	2104      	movs	r1, #4
    20da:	0018      	movs	r0, r3
    20dc:	4b05      	ldr	r3, [pc, #20]	; (20f4 <Ft_Gpu_CoCmd_Dlstart+0x3c>)
    20de:	4798      	blx	r3
}
    20e0:	46c0      	nop			; (mov r8, r8)
    20e2:	46bd      	mov	sp, r7
    20e4:	b002      	add	sp, #8
    20e6:	bd80      	pop	{r7, pc}
    20e8:	00002141 	.word	0x00002141
    20ec:	ffffff00 	.word	0xffffff00
    20f0:	000020f9 	.word	0x000020f9
    20f4:	0000217d 	.word	0x0000217d

000020f8 <Ft_Gpu_Copro_SendCmd>:
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4));             
}


ft_void_t Ft_Gpu_Copro_SendCmd(Ft_Gpu_Hal_Context_t *phost,ft_uint32_t cmd)
{ 
    20f8:	b580      	push	{r7, lr}
    20fa:	b082      	sub	sp, #8
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
    2100:	6039      	str	r1, [r7, #0]
   Ft_Gpu_Hal_Transfer32(phost,cmd);
    2102:	683a      	ldr	r2, [r7, #0]
    2104:	687b      	ldr	r3, [r7, #4]
    2106:	0011      	movs	r1, r2
    2108:	0018      	movs	r0, r3
    210a:	4b03      	ldr	r3, [pc, #12]	; (2118 <Ft_Gpu_Copro_SendCmd+0x20>)
    210c:	4798      	blx	r3
}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	46bd      	mov	sp, r7
    2112:	b002      	add	sp, #8
    2114:	bd80      	pop	{r7, pc}
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	000023b1 	.word	0x000023b1

0000211c <Ft_Gpu_CoCmd_SendStr>:


ft_void_t Ft_Gpu_CoCmd_SendStr(Ft_Gpu_Hal_Context_t *phost,const ft_char8_t *s)
{
    211c:	b580      	push	{r7, lr}
    211e:	b082      	sub	sp, #8
    2120:	af00      	add	r7, sp, #0
    2122:	6078      	str	r0, [r7, #4]
    2124:	6039      	str	r1, [r7, #0]
    Ft_Gpu_Hal_TransferString(phost,s);
    2126:	683a      	ldr	r2, [r7, #0]
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	0011      	movs	r1, r2
    212c:	0018      	movs	r0, r3
    212e:	4b03      	ldr	r3, [pc, #12]	; (213c <Ft_Gpu_CoCmd_SendStr+0x20>)
    2130:	4798      	blx	r3
}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	46bd      	mov	sp, r7
    2136:	b002      	add	sp, #8
    2138:	bd80      	pop	{r7, pc}
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	00002279 	.word	0x00002279

00002140 <Ft_Gpu_CoCmd_StartFunc>:


ft_void_t Ft_Gpu_CoCmd_StartFunc(Ft_Gpu_Hal_Context_t *phost,ft_uint16_t count)
{
    2140:	b580      	push	{r7, lr}
    2142:	b082      	sub	sp, #8
    2144:	af00      	add	r7, sp, #0
    2146:	6078      	str	r0, [r7, #4]
    2148:	000a      	movs	r2, r1
    214a:	1cbb      	adds	r3, r7, #2
    214c:	801a      	strh	r2, [r3, #0]
    // wait until the copro circular buffer has enough space for this command
  	Ft_Gpu_Hal_CheckCmdBuffer(phost,count);
    214e:	1cbb      	adds	r3, r7, #2
    2150:	881a      	ldrh	r2, [r3, #0]
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	0011      	movs	r1, r2
    2156:	0018      	movs	r0, r3
    2158:	4b06      	ldr	r3, [pc, #24]	; (2174 <Ft_Gpu_CoCmd_StartFunc+0x34>)
    215a:	4798      	blx	r3
    // start the transfer if it does
    Ft_Gpu_Hal_StartCmdTransfer(phost,FT_GPU_WRITE,count);
    215c:	1cbb      	adds	r3, r7, #2
    215e:	881a      	ldrh	r2, [r3, #0]
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	2101      	movs	r1, #1
    2164:	0018      	movs	r0, r3
    2166:	4b04      	ldr	r3, [pc, #16]	; (2178 <Ft_Gpu_CoCmd_StartFunc+0x38>)
    2168:	4798      	blx	r3
}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	46bd      	mov	sp, r7
    216e:	b002      	add	sp, #8
    2170:	bd80      	pop	{r7, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	000025f5 	.word	0x000025f5
    2178:	0000223d 	.word	0x0000223d

0000217c <Ft_Gpu_CoCmd_EndFunc>:


ft_void_t Ft_Gpu_CoCmd_EndFunc(Ft_Gpu_Hal_Context_t *phost,ft_uint16_t count)
{
    217c:	b580      	push	{r7, lr}
    217e:	b082      	sub	sp, #8
    2180:	af00      	add	r7, sp, #0
    2182:	6078      	str	r0, [r7, #4]
    2184:	000a      	movs	r2, r1
    2186:	1cbb      	adds	r3, r7, #2
    2188:	801a      	strh	r2, [r3, #0]

    Ft_Gpu_Hal_EndTransfer(phost);
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	0018      	movs	r0, r3
    218e:	4b06      	ldr	r3, [pc, #24]	; (21a8 <Ft_Gpu_CoCmd_EndFunc+0x2c>)
    2190:	4798      	blx	r3
    Ft_Gpu_Hal_Updatecmdfifo(phost,count);
    2192:	1cbb      	adds	r3, r7, #2
    2194:	881a      	ldrh	r2, [r3, #0]
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	0011      	movs	r1, r2
    219a:	0018      	movs	r0, r3
    219c:	4b03      	ldr	r3, [pc, #12]	; (21ac <Ft_Gpu_CoCmd_EndFunc+0x30>)
    219e:	4798      	blx	r3

}
    21a0:	46c0      	nop			; (mov r8, r8)
    21a2:	46bd      	mov	sp, r7
    21a4:	b002      	add	sp, #8
    21a6:	bd80      	pop	{r7, pc}
    21a8:	00002419 	.word	0x00002419
    21ac:	0000254d 	.word	0x0000254d

000021b0 <Ft_Gpu_Hal_Open>:
	return true;
}


ft_bool_t Ft_Gpu_Hal_Open(Ft_Gpu_Hal_Context_t *host)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
     * the pinmux settings and the SPI init, so it's all done
     * in Ft_Gpu_Hal_Init().
     */
    
    // init current write buffer to zero, since we're just starting up
	host->ft_cmd_fifo_wp = host->ft_dl_buff_wp = 0;
    21b8:	687b      	ldr	r3, [r7, #4]
    21ba:	2200      	movs	r2, #0
    21bc:	815a      	strh	r2, [r3, #10]
    21be:	687b      	ldr	r3, [r7, #4]
    21c0:	895a      	ldrh	r2, [r3, #10]
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	811a      	strh	r2, [r3, #8]
    // by default ft800/801/810/811 goes with single dummy byte for read
	host->spinumdummy = 1;
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	2201      	movs	r2, #1
    21ca:	755a      	strb	r2, [r3, #21]
    // technically one channel, but zero for how the FT library does things
	host->spichannel = 0;
    21cc:	687b      	ldr	r3, [r7, #4]
    21ce:	2200      	movs	r2, #0
    21d0:	751a      	strb	r2, [r3, #20]
    // indicate it's ready to go
	host->status = FT_GPU_HAL_OPENED;
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	2200      	movs	r2, #0
    21d6:	731a      	strb	r2, [r3, #12]

    lcd_set_ft_host_ptr(host);
    21d8:	687b      	ldr	r3, [r7, #4]
    21da:	0018      	movs	r0, r3
    21dc:	4b03      	ldr	r3, [pc, #12]	; (21ec <Ft_Gpu_Hal_Open+0x3c>)
    21de:	4798      	blx	r3

	return true;
    21e0:	2301      	movs	r3, #1
}
    21e2:	0018      	movs	r0, r3
    21e4:	46bd      	mov	sp, r7
    21e6:	b002      	add	sp, #8
    21e8:	bd80      	pop	{r7, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	00003ad9 	.word	0x00003ad9

000021f0 <Ft_Gpu_Hal_StartTransfer>:
}


/*The APIs for reading/writing transfer continuously only with small buffer system*/
ft_void_t  Ft_Gpu_Hal_StartTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint32_t addr)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	b084      	sub	sp, #16
    21f4:	af00      	add	r7, sp, #0
    21f6:	60f8      	str	r0, [r7, #12]
    21f8:	607a      	str	r2, [r7, #4]
    21fa:	230b      	movs	r3, #11
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	1c0a      	adds	r2, r1, #0
    2200:	701a      	strb	r2, [r3, #0]
    /* determine if it's a read or write. This affects the preamble send to the
     * LCD (preamble = direction bits and address). */
	if (FT_GPU_READ == rw)
    2202:	230b      	movs	r3, #11
    2204:	18fb      	adds	r3, r7, r3
    2206:	781b      	ldrb	r3, [r3, #0]
    2208:	2b00      	cmp	r3, #0
    220a:	d108      	bne.n	221e <Ft_Gpu_Hal_StartTransfer+0x2e>
    {
        // begin a read transfer
        lcd_start_xfer(addr, READ);
    220c:	687b      	ldr	r3, [r7, #4]
    220e:	2100      	movs	r1, #0
    2210:	0018      	movs	r0, r3
    2212:	4b09      	ldr	r3, [pc, #36]	; (2238 <Ft_Gpu_Hal_StartTransfer+0x48>)
    2214:	4798      	blx	r3

		host->status = FT_GPU_HAL_READING;
    2216:	68fb      	ldr	r3, [r7, #12]
    2218:	2201      	movs	r2, #1
    221a:	731a      	strb	r2, [r3, #12]
        // begin a write transfer
	    lcd_start_xfer(addr, WRT);
    
		host->status = FT_GPU_HAL_WRITING;
	}
}
    221c:	e007      	b.n	222e <Ft_Gpu_Hal_StartTransfer+0x3e>
	    lcd_start_xfer(addr, WRT);
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	2101      	movs	r1, #1
    2222:	0018      	movs	r0, r3
    2224:	4b04      	ldr	r3, [pc, #16]	; (2238 <Ft_Gpu_Hal_StartTransfer+0x48>)
    2226:	4798      	blx	r3
		host->status = FT_GPU_HAL_WRITING;
    2228:	68fb      	ldr	r3, [r7, #12]
    222a:	2202      	movs	r2, #2
    222c:	731a      	strb	r2, [r3, #12]
}
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	46bd      	mov	sp, r7
    2232:	b004      	add	sp, #16
    2234:	bd80      	pop	{r7, pc}
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	000034f9 	.word	0x000034f9

0000223c <Ft_Gpu_Hal_StartCmdTransfer>:


/*The APIs for writing transfer continuously only*/
ft_void_t  Ft_Gpu_Hal_StartCmdTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint16_t count)
{
    223c:	b580      	push	{r7, lr}
    223e:	b082      	sub	sp, #8
    2240:	af00      	add	r7, sp, #0
    2242:	6078      	str	r0, [r7, #4]
    2244:	0008      	movs	r0, r1
    2246:	0011      	movs	r1, r2
    2248:	1cfb      	adds	r3, r7, #3
    224a:	1c02      	adds	r2, r0, #0
    224c:	701a      	strb	r2, [r3, #0]
    224e:	003b      	movs	r3, r7
    2250:	1c0a      	adds	r2, r1, #0
    2252:	801a      	strh	r2, [r3, #0]
    // RAM_CMD = 0x308000
    // starting a transfer = sending preamble (read/write bits and address)
	Ft_Gpu_Hal_StartTransfer(host,rw,host->ft_cmd_fifo_wp + RAM_CMD);
    2254:	687b      	ldr	r3, [r7, #4]
    2256:	891b      	ldrh	r3, [r3, #8]
    2258:	22c2      	movs	r2, #194	; 0xc2
    225a:	0392      	lsls	r2, r2, #14
    225c:	189a      	adds	r2, r3, r2
    225e:	1cfb      	adds	r3, r7, #3
    2260:	7819      	ldrb	r1, [r3, #0]
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	0018      	movs	r0, r3
    2266:	4b03      	ldr	r3, [pc, #12]	; (2274 <Ft_Gpu_Hal_StartCmdTransfer+0x38>)
    2268:	4798      	blx	r3
}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	46bd      	mov	sp, r7
    226e:	b002      	add	sp, #8
    2270:	bd80      	pop	{r7, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	000021f1 	.word	0x000021f1

00002278 <Ft_Gpu_Hal_TransferString>:


ft_void_t Ft_Gpu_Hal_TransferString(Ft_Gpu_Hal_Context_t *host, const ft_char8_t *string)
{
    2278:	b580      	push	{r7, lr}
    227a:	b084      	sub	sp, #16
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
    2280:	6039      	str	r1, [r7, #0]
    // get length of the string
    ft_uint16_t length = strlen((const char*) string);
    2282:	683b      	ldr	r3, [r7, #0]
    2284:	0018      	movs	r0, r3
    2286:	4b12      	ldr	r3, [pc, #72]	; (22d0 <Ft_Gpu_Hal_TransferString+0x58>)
    2288:	4798      	blx	r3
    228a:	0002      	movs	r2, r0
    228c:	230e      	movs	r3, #14
    228e:	18fb      	adds	r3, r7, r3
    2290:	801a      	strh	r2, [r3, #0]
    
    // send out the string
    while(length--)
    2292:	e00b      	b.n	22ac <Ft_Gpu_Hal_TransferString+0x34>
    {
       Ft_Gpu_Hal_Transfer8(host, *string);
    2294:	683b      	ldr	r3, [r7, #0]
    2296:	781b      	ldrb	r3, [r3, #0]
    2298:	b25b      	sxtb	r3, r3
    229a:	b2da      	uxtb	r2, r3
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	0011      	movs	r1, r2
    22a0:	0018      	movs	r0, r3
    22a2:	4b0c      	ldr	r3, [pc, #48]	; (22d4 <Ft_Gpu_Hal_TransferString+0x5c>)
    22a4:	4798      	blx	r3
       string ++;
    22a6:	683b      	ldr	r3, [r7, #0]
    22a8:	3301      	adds	r3, #1
    22aa:	603b      	str	r3, [r7, #0]
    while(length--)
    22ac:	230e      	movs	r3, #14
    22ae:	18fb      	adds	r3, r7, r3
    22b0:	881b      	ldrh	r3, [r3, #0]
    22b2:	220e      	movs	r2, #14
    22b4:	18ba      	adds	r2, r7, r2
    22b6:	1e59      	subs	r1, r3, #1
    22b8:	8011      	strh	r1, [r2, #0]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d1ea      	bne.n	2294 <Ft_Gpu_Hal_TransferString+0x1c>
    }
    
    //Append one null as ending flag
    Ft_Gpu_Hal_Transfer8(host,0);
    22be:	687b      	ldr	r3, [r7, #4]
    22c0:	2100      	movs	r1, #0
    22c2:	0018      	movs	r0, r3
    22c4:	4b03      	ldr	r3, [pc, #12]	; (22d4 <Ft_Gpu_Hal_TransferString+0x5c>)
    22c6:	4798      	blx	r3
}
    22c8:	46c0      	nop			; (mov r8, r8)
    22ca:	46bd      	mov	sp, r7
    22cc:	b004      	add	sp, #16
    22ce:	bd80      	pop	{r7, pc}
    22d0:	000061cf 	.word	0x000061cf
    22d4:	000022d9 	.word	0x000022d9

000022d8 <Ft_Gpu_Hal_Transfer8>:


ft_uint8_t Ft_Gpu_Hal_Transfer8(Ft_Gpu_Hal_Context_t *host, ft_uint8_t value)
{
    22d8:	b580      	push	{r7, lr}
    22da:	b084      	sub	sp, #16
    22dc:	af00      	add	r7, sp, #0
    22de:	6078      	str	r0, [r7, #4]
    22e0:	000a      	movs	r2, r1
    22e2:	1cfb      	adds	r3, r7, #3
    22e4:	701a      	strb	r2, [r3, #0]
    ft_uint8_t read_byte = 0;
    22e6:	230f      	movs	r3, #15
    22e8:	18fb      	adds	r3, r7, r3
    22ea:	2200      	movs	r2, #0
    22ec:	701a      	strb	r2, [r3, #0]
    
    // transmit or receive a byte
    if(host->status == FT_GPU_HAL_WRITING)
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	7b1b      	ldrb	r3, [r3, #12]
    22f2:	2b02      	cmp	r3, #2
    22f4:	d105      	bne.n	2302 <Ft_Gpu_Hal_Transfer8+0x2a>
        lcd_host_write(&value, 1);
    22f6:	1cfb      	adds	r3, r7, #3
    22f8:	2101      	movs	r1, #1
    22fa:	0018      	movs	r0, r3
    22fc:	4b07      	ldr	r3, [pc, #28]	; (231c <Ft_Gpu_Hal_Transfer8+0x44>)
    22fe:	4798      	blx	r3
    2300:	e005      	b.n	230e <Ft_Gpu_Hal_Transfer8+0x36>
    else
        lcd_host_read(&read_byte, 1);
    2302:	230f      	movs	r3, #15
    2304:	18fb      	adds	r3, r7, r3
    2306:	2101      	movs	r1, #1
    2308:	0018      	movs	r0, r3
    230a:	4b05      	ldr	r3, [pc, #20]	; (2320 <Ft_Gpu_Hal_Transfer8+0x48>)
    230c:	4798      	blx	r3
    
    return read_byte;
    230e:	230f      	movs	r3, #15
    2310:	18fb      	adds	r3, r7, r3
    2312:	781b      	ldrb	r3, [r3, #0]
}
    2314:	0018      	movs	r0, r3
    2316:	46bd      	mov	sp, r7
    2318:	b004      	add	sp, #16
    231a:	bd80      	pop	{r7, pc}
    231c:	0000371d 	.word	0x0000371d
    2320:	00003659 	.word	0x00003659

00002324 <Ft_Gpu_Hal_Transfer16>:


ft_uint16_t Ft_Gpu_Hal_Transfer16(Ft_Gpu_Hal_Context_t *host, ft_uint16_t value)
{
    2324:	b580      	push	{r7, lr}
    2326:	b084      	sub	sp, #16
    2328:	af00      	add	r7, sp, #0
    232a:	6078      	str	r0, [r7, #4]
    232c:	000a      	movs	r2, r1
    232e:	1cbb      	adds	r3, r7, #2
    2330:	801a      	strh	r2, [r3, #0]
	ft_uint16_t retVal = 0;
    2332:	230e      	movs	r3, #14
    2334:	18fb      	adds	r3, r7, r3
    2336:	2200      	movs	r2, #0
    2338:	801a      	strh	r2, [r3, #0]

    // transmit or receive two bytes
    if (host->status == FT_GPU_HAL_WRITING)
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	7b1b      	ldrb	r3, [r3, #12]
    233e:	2b02      	cmp	r3, #2
    2340:	d112      	bne.n	2368 <Ft_Gpu_Hal_Transfer16+0x44>
    {
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
    2342:	1cbb      	adds	r3, r7, #2
    2344:	881b      	ldrh	r3, [r3, #0]
    2346:	b2da      	uxtb	r2, r3
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	0011      	movs	r1, r2
    234c:	0018      	movs	r0, r3
    234e:	4b17      	ldr	r3, [pc, #92]	; (23ac <Ft_Gpu_Hal_Transfer16+0x88>)
    2350:	4798      	blx	r3
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
    2352:	1cbb      	adds	r3, r7, #2
    2354:	881b      	ldrh	r3, [r3, #0]
    2356:	0a1b      	lsrs	r3, r3, #8
    2358:	b29b      	uxth	r3, r3
    235a:	b2da      	uxtb	r2, r3
    235c:	687b      	ldr	r3, [r7, #4]
    235e:	0011      	movs	r1, r2
    2360:	0018      	movs	r0, r3
    2362:	4b12      	ldr	r3, [pc, #72]	; (23ac <Ft_Gpu_Hal_Transfer16+0x88>)
    2364:	4798      	blx	r3
    2366:	e01a      	b.n	239e <Ft_Gpu_Hal_Transfer16+0x7a>
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer8(host,0);
    2368:	687b      	ldr	r3, [r7, #4]
    236a:	2100      	movs	r1, #0
    236c:	0018      	movs	r0, r3
    236e:	4b0f      	ldr	r3, [pc, #60]	; (23ac <Ft_Gpu_Hal_Transfer16+0x88>)
    2370:	4798      	blx	r3
    2372:	0003      	movs	r3, r0
    2374:	001a      	movs	r2, r3
    2376:	230e      	movs	r3, #14
    2378:	18fb      	adds	r3, r7, r3
    237a:	801a      	strh	r2, [r3, #0]
		retVal |= (ft_uint16_t)Ft_Gpu_Hal_Transfer8(host,0) << 8;
    237c:	687b      	ldr	r3, [r7, #4]
    237e:	2100      	movs	r1, #0
    2380:	0018      	movs	r0, r3
    2382:	4b0a      	ldr	r3, [pc, #40]	; (23ac <Ft_Gpu_Hal_Transfer16+0x88>)
    2384:	4798      	blx	r3
    2386:	0003      	movs	r3, r0
    2388:	021b      	lsls	r3, r3, #8
    238a:	b21a      	sxth	r2, r3
    238c:	230e      	movs	r3, #14
    238e:	18fb      	adds	r3, r7, r3
    2390:	2100      	movs	r1, #0
    2392:	5e5b      	ldrsh	r3, [r3, r1]
    2394:	4313      	orrs	r3, r2
    2396:	b21a      	sxth	r2, r3
    2398:	230e      	movs	r3, #14
    239a:	18fb      	adds	r3, r7, r3
    239c:	801a      	strh	r2, [r3, #0]
	}

	return retVal;
    239e:	230e      	movs	r3, #14
    23a0:	18fb      	adds	r3, r7, r3
    23a2:	881b      	ldrh	r3, [r3, #0]
}
    23a4:	0018      	movs	r0, r3
    23a6:	46bd      	mov	sp, r7
    23a8:	b004      	add	sp, #16
    23aa:	bd80      	pop	{r7, pc}
    23ac:	000022d9 	.word	0x000022d9

000023b0 <Ft_Gpu_Hal_Transfer32>:


ft_uint32_t Ft_Gpu_Hal_Transfer32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t value)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	b084      	sub	sp, #16
    23b4:	af00      	add	r7, sp, #0
    23b6:	6078      	str	r0, [r7, #4]
    23b8:	6039      	str	r1, [r7, #0]
	ft_uint32_t retVal = 0;
    23ba:	2300      	movs	r3, #0
    23bc:	60fb      	str	r3, [r7, #12]
    
    // transmit or receive four bytes
	if (host->status == FT_GPU_HAL_WRITING)
    23be:	687b      	ldr	r3, [r7, #4]
    23c0:	7b1b      	ldrb	r3, [r3, #12]
    23c2:	2b02      	cmp	r3, #2
    23c4:	d10f      	bne.n	23e6 <Ft_Gpu_Hal_Transfer32+0x36>
    {
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
    23c6:	683b      	ldr	r3, [r7, #0]
    23c8:	b29a      	uxth	r2, r3
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	0011      	movs	r1, r2
    23ce:	0018      	movs	r0, r3
    23d0:	4b10      	ldr	r3, [pc, #64]	; (2414 <Ft_Gpu_Hal_Transfer32+0x64>)
    23d2:	4798      	blx	r3
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
    23d4:	683b      	ldr	r3, [r7, #0]
    23d6:	0c1b      	lsrs	r3, r3, #16
    23d8:	b29a      	uxth	r2, r3
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	0011      	movs	r1, r2
    23de:	0018      	movs	r0, r3
    23e0:	4b0c      	ldr	r3, [pc, #48]	; (2414 <Ft_Gpu_Hal_Transfer32+0x64>)
    23e2:	4798      	blx	r3
    23e4:	e010      	b.n	2408 <Ft_Gpu_Hal_Transfer32+0x58>
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer16(host,0);
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	2100      	movs	r1, #0
    23ea:	0018      	movs	r0, r3
    23ec:	4b09      	ldr	r3, [pc, #36]	; (2414 <Ft_Gpu_Hal_Transfer32+0x64>)
    23ee:	4798      	blx	r3
    23f0:	0003      	movs	r3, r0
    23f2:	60fb      	str	r3, [r7, #12]
		retVal |= (ft_uint32_t)Ft_Gpu_Hal_Transfer16(host,0) << 16;
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	2100      	movs	r1, #0
    23f8:	0018      	movs	r0, r3
    23fa:	4b06      	ldr	r3, [pc, #24]	; (2414 <Ft_Gpu_Hal_Transfer32+0x64>)
    23fc:	4798      	blx	r3
    23fe:	0003      	movs	r3, r0
    2400:	041b      	lsls	r3, r3, #16
    2402:	68fa      	ldr	r2, [r7, #12]
    2404:	4313      	orrs	r3, r2
    2406:	60fb      	str	r3, [r7, #12]
	}
    
	return retVal;
    2408:	68fb      	ldr	r3, [r7, #12]
}
    240a:	0018      	movs	r0, r3
    240c:	46bd      	mov	sp, r7
    240e:	b004      	add	sp, #16
    2410:	bd80      	pop	{r7, pc}
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	00002325 	.word	0x00002325

00002418 <Ft_Gpu_Hal_EndTransfer>:


ft_void_t Ft_Gpu_Hal_EndTransfer(Ft_Gpu_Hal_Context_t *host)
{
    2418:	b580      	push	{r7, lr}
    241a:	b082      	sub	sp, #8
    241c:	af00      	add	r7, sp, #0
    241e:	6078      	str	r0, [r7, #4]
    // deselect the slave (let slave CS float high for SIM System)
    lcd_stop_xfer();
    2420:	4b04      	ldr	r3, [pc, #16]	; (2434 <Ft_Gpu_Hal_EndTransfer+0x1c>)
    2422:	4798      	blx	r3
    
	host->status = FT_GPU_HAL_OPENED;
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	2200      	movs	r2, #0
    2428:	731a      	strb	r2, [r3, #12]
}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	46bd      	mov	sp, r7
    242e:	b002      	add	sp, #8
    2430:	bd80      	pop	{r7, pc}
    2432:	46c0      	nop			; (mov r8, r8)
    2434:	00003635 	.word	0x00003635

00002438 <Ft_Gpu_Hal_Rd16>:
	return value;
}


ft_uint16_t Ft_Gpu_Hal_Rd16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    2438:	b590      	push	{r4, r7, lr}
    243a:	b085      	sub	sp, #20
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
    2440:	6039      	str	r1, [r7, #0]
	ft_uint16_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    2442:	683a      	ldr	r2, [r7, #0]
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	2100      	movs	r1, #0
    2448:	0018      	movs	r0, r3
    244a:	4b0b      	ldr	r3, [pc, #44]	; (2478 <Ft_Gpu_Hal_Rd16+0x40>)
    244c:	4798      	blx	r3
    
    // read 2 bytes
	value = Ft_Gpu_Hal_Transfer16(host,0);
    244e:	230e      	movs	r3, #14
    2450:	18fc      	adds	r4, r7, r3
    2452:	687b      	ldr	r3, [r7, #4]
    2454:	2100      	movs	r1, #0
    2456:	0018      	movs	r0, r3
    2458:	4b08      	ldr	r3, [pc, #32]	; (247c <Ft_Gpu_Hal_Rd16+0x44>)
    245a:	4798      	blx	r3
    245c:	0003      	movs	r3, r0
    245e:	8023      	strh	r3, [r4, #0]
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	0018      	movs	r0, r3
    2464:	4b06      	ldr	r3, [pc, #24]	; (2480 <Ft_Gpu_Hal_Rd16+0x48>)
    2466:	4798      	blx	r3
    
	return value;
    2468:	230e      	movs	r3, #14
    246a:	18fb      	adds	r3, r7, r3
    246c:	881b      	ldrh	r3, [r3, #0]
}
    246e:	0018      	movs	r0, r3
    2470:	46bd      	mov	sp, r7
    2472:	b005      	add	sp, #20
    2474:	bd90      	pop	{r4, r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	000021f1 	.word	0x000021f1
    247c:	00002325 	.word	0x00002325
    2480:	00002419 	.word	0x00002419

00002484 <Ft_Gpu_Hal_Wr8>:
	return value;
}


ft_void_t Ft_Gpu_Hal_Wr8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint8_t v)
{	
    2484:	b580      	push	{r7, lr}
    2486:	b084      	sub	sp, #16
    2488:	af00      	add	r7, sp, #0
    248a:	60f8      	str	r0, [r7, #12]
    248c:	60b9      	str	r1, [r7, #8]
    248e:	1dfb      	adds	r3, r7, #7
    2490:	701a      	strb	r2, [r3, #0]
    
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    2492:	68ba      	ldr	r2, [r7, #8]
    2494:	68fb      	ldr	r3, [r7, #12]
    2496:	2101      	movs	r1, #1
    2498:	0018      	movs	r0, r3
    249a:	4b08      	ldr	r3, [pc, #32]	; (24bc <Ft_Gpu_Hal_Wr8+0x38>)
    249c:	4798      	blx	r3
    
    // read a byte
	Ft_Gpu_Hal_Transfer8(host,v);
    249e:	1dfb      	adds	r3, r7, #7
    24a0:	781a      	ldrb	r2, [r3, #0]
    24a2:	68fb      	ldr	r3, [r7, #12]
    24a4:	0011      	movs	r1, r2
    24a6:	0018      	movs	r0, r3
    24a8:	4b05      	ldr	r3, [pc, #20]	; (24c0 <Ft_Gpu_Hal_Wr8+0x3c>)
    24aa:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    24ac:	68fb      	ldr	r3, [r7, #12]
    24ae:	0018      	movs	r0, r3
    24b0:	4b04      	ldr	r3, [pc, #16]	; (24c4 <Ft_Gpu_Hal_Wr8+0x40>)
    24b2:	4798      	blx	r3
}
    24b4:	46c0      	nop			; (mov r8, r8)
    24b6:	46bd      	mov	sp, r7
    24b8:	b004      	add	sp, #16
    24ba:	bd80      	pop	{r7, pc}
    24bc:	000021f1 	.word	0x000021f1
    24c0:	000022d9 	.word	0x000022d9
    24c4:	00002419 	.word	0x00002419

000024c8 <Ft_Gpu_Hal_Wr16>:


ft_void_t Ft_Gpu_Hal_Wr16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint16_t v)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	60f8      	str	r0, [r7, #12]
    24d0:	60b9      	str	r1, [r7, #8]
    24d2:	1dbb      	adds	r3, r7, #6
    24d4:	801a      	strh	r2, [r3, #0]
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    24d6:	68ba      	ldr	r2, [r7, #8]
    24d8:	68fb      	ldr	r3, [r7, #12]
    24da:	2101      	movs	r1, #1
    24dc:	0018      	movs	r0, r3
    24de:	4b08      	ldr	r3, [pc, #32]	; (2500 <Ft_Gpu_Hal_Wr16+0x38>)
    24e0:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer16(host,v);
    24e2:	1dbb      	adds	r3, r7, #6
    24e4:	881a      	ldrh	r2, [r3, #0]
    24e6:	68fb      	ldr	r3, [r7, #12]
    24e8:	0011      	movs	r1, r2
    24ea:	0018      	movs	r0, r3
    24ec:	4b05      	ldr	r3, [pc, #20]	; (2504 <Ft_Gpu_Hal_Wr16+0x3c>)
    24ee:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    24f0:	68fb      	ldr	r3, [r7, #12]
    24f2:	0018      	movs	r0, r3
    24f4:	4b04      	ldr	r3, [pc, #16]	; (2508 <Ft_Gpu_Hal_Wr16+0x40>)
    24f6:	4798      	blx	r3
}
    24f8:	46c0      	nop			; (mov r8, r8)
    24fa:	46bd      	mov	sp, r7
    24fc:	b004      	add	sp, #16
    24fe:	bd80      	pop	{r7, pc}
    2500:	000021f1 	.word	0x000021f1
    2504:	00002325 	.word	0x00002325
    2508:	00002419 	.word	0x00002419

0000250c <Ft_Gpu_Hal_Wr32>:


ft_void_t Ft_Gpu_Hal_Wr32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint32_t v)
{
    250c:	b580      	push	{r7, lr}
    250e:	b084      	sub	sp, #16
    2510:	af00      	add	r7, sp, #0
    2512:	60f8      	str	r0, [r7, #12]
    2514:	60b9      	str	r1, [r7, #8]
    2516:	607a      	str	r2, [r7, #4]
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    2518:	68ba      	ldr	r2, [r7, #8]
    251a:	68fb      	ldr	r3, [r7, #12]
    251c:	2101      	movs	r1, #1
    251e:	0018      	movs	r0, r3
    2520:	4b07      	ldr	r3, [pc, #28]	; (2540 <Ft_Gpu_Hal_Wr32+0x34>)
    2522:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer32(host,v);
    2524:	687a      	ldr	r2, [r7, #4]
    2526:	68fb      	ldr	r3, [r7, #12]
    2528:	0011      	movs	r1, r2
    252a:	0018      	movs	r0, r3
    252c:	4b05      	ldr	r3, [pc, #20]	; (2544 <Ft_Gpu_Hal_Wr32+0x38>)
    252e:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    2530:	68fb      	ldr	r3, [r7, #12]
    2532:	0018      	movs	r0, r3
    2534:	4b04      	ldr	r3, [pc, #16]	; (2548 <Ft_Gpu_Hal_Wr32+0x3c>)
    2536:	4798      	blx	r3
}
    2538:	46c0      	nop			; (mov r8, r8)
    253a:	46bd      	mov	sp, r7
    253c:	b004      	add	sp, #16
    253e:	bd80      	pop	{r7, pc}
    2540:	000021f1 	.word	0x000021f1
    2544:	000023b1 	.word	0x000023b1
    2548:	00002419 	.word	0x00002419

0000254c <Ft_Gpu_Hal_Updatecmdfifo>:
	lcd_host_cmd((cmd & 0xFF), ((cmd >> 8) & 0xFF));
}


ft_void_t Ft_Gpu_Hal_Updatecmdfifo(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    254c:	b580      	push	{r7, lr}
    254e:	b082      	sub	sp, #8
    2550:	af00      	add	r7, sp, #0
    2552:	6078      	str	r0, [r7, #4]
    2554:	6039      	str	r1, [r7, #0]
	host->ft_cmd_fifo_wp  = (host->ft_cmd_fifo_wp + count) & 4095;
    2556:	687b      	ldr	r3, [r7, #4]
    2558:	891a      	ldrh	r2, [r3, #8]
    255a:	683b      	ldr	r3, [r7, #0]
    255c:	b29b      	uxth	r3, r3
    255e:	18d3      	adds	r3, r2, r3
    2560:	b29b      	uxth	r3, r3
    2562:	051b      	lsls	r3, r3, #20
    2564:	0d1b      	lsrs	r3, r3, #20
    2566:	b29a      	uxth	r2, r3
    2568:	687b      	ldr	r3, [r7, #4]
    256a:	811a      	strh	r2, [r3, #8]

	//4 byte alignment
	host->ft_cmd_fifo_wp = (host->ft_cmd_fifo_wp + 3) & 0xffc;
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	891b      	ldrh	r3, [r3, #8]
    2570:	3303      	adds	r3, #3
    2572:	b29b      	uxth	r3, r3
    2574:	4a07      	ldr	r2, [pc, #28]	; (2594 <Ft_Gpu_Hal_Updatecmdfifo+0x48>)
    2576:	4013      	ands	r3, r2
    2578:	b29a      	uxth	r2, r3
    257a:	687b      	ldr	r3, [r7, #4]
    257c:	811a      	strh	r2, [r3, #8]
    
	Ft_Gpu_Hal_Wr16(host,REG_CMD_WRITE,host->ft_cmd_fifo_wp);
    257e:	687b      	ldr	r3, [r7, #4]
    2580:	891a      	ldrh	r2, [r3, #8]
    2582:	4905      	ldr	r1, [pc, #20]	; (2598 <Ft_Gpu_Hal_Updatecmdfifo+0x4c>)
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	0018      	movs	r0, r3
    2588:	4b04      	ldr	r3, [pc, #16]	; (259c <Ft_Gpu_Hal_Updatecmdfifo+0x50>)
    258a:	4798      	blx	r3
}
    258c:	46c0      	nop			; (mov r8, r8)
    258e:	46bd      	mov	sp, r7
    2590:	b002      	add	sp, #8
    2592:	bd80      	pop	{r7, pc}
    2594:	00000ffc 	.word	0x00000ffc
    2598:	003020fc 	.word	0x003020fc
    259c:	000024c9 	.word	0x000024c9

000025a0 <Ft_Gpu_Cmdfifo_Freespace>:


ft_uint16_t Ft_Gpu_Cmdfifo_Freespace(Ft_Gpu_Hal_Context_t *host)
{
    25a0:	b590      	push	{r4, r7, lr}
    25a2:	b085      	sub	sp, #20
    25a4:	af00      	add	r7, sp, #0
    25a6:	6078      	str	r0, [r7, #4]
    /* calculate the free space for the coprocessor FIFO. Refer to pg 150 in
     * the FT81X_Series_Programmers_Guide datasheet */
	ft_uint16_t fullness,retval;

    // REG_CMD_READ = 0x3020F8
	fullness = (host->ft_cmd_fifo_wp - Ft_Gpu_Hal_Rd16(host,REG_CMD_READ)) & 4095;
    25a8:	687b      	ldr	r3, [r7, #4]
    25aa:	891c      	ldrh	r4, [r3, #8]
    25ac:	4a0e      	ldr	r2, [pc, #56]	; (25e8 <Ft_Gpu_Cmdfifo_Freespace+0x48>)
    25ae:	687b      	ldr	r3, [r7, #4]
    25b0:	0011      	movs	r1, r2
    25b2:	0018      	movs	r0, r3
    25b4:	4b0d      	ldr	r3, [pc, #52]	; (25ec <Ft_Gpu_Cmdfifo_Freespace+0x4c>)
    25b6:	4798      	blx	r3
    25b8:	0003      	movs	r3, r0
    25ba:	1ae3      	subs	r3, r4, r3
    25bc:	b29a      	uxth	r2, r3
    25be:	230e      	movs	r3, #14
    25c0:	18fb      	adds	r3, r7, r3
    25c2:	0512      	lsls	r2, r2, #20
    25c4:	0d12      	lsrs	r2, r2, #20
    25c6:	801a      	strh	r2, [r3, #0]
    
	retval = (FT_CMD_FIFO_SIZE - 4) - fullness;
    25c8:	230c      	movs	r3, #12
    25ca:	18fb      	adds	r3, r7, r3
    25cc:	220e      	movs	r2, #14
    25ce:	18ba      	adds	r2, r7, r2
    25d0:	8812      	ldrh	r2, [r2, #0]
    25d2:	4907      	ldr	r1, [pc, #28]	; (25f0 <Ft_Gpu_Cmdfifo_Freespace+0x50>)
    25d4:	1a8a      	subs	r2, r1, r2
    25d6:	801a      	strh	r2, [r3, #0]
    
	return (retval);
    25d8:	230c      	movs	r3, #12
    25da:	18fb      	adds	r3, r7, r3
    25dc:	881b      	ldrh	r3, [r3, #0]
}
    25de:	0018      	movs	r0, r3
    25e0:	46bd      	mov	sp, r7
    25e2:	b005      	add	sp, #20
    25e4:	bd90      	pop	{r4, r7, pc}
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	003020f8 	.word	0x003020f8
    25ec:	00002439 	.word	0x00002439
    25f0:	00000ffc 	.word	0x00000ffc

000025f4 <Ft_Gpu_Hal_CheckCmdBuffer>:
}
#endif


ft_void_t Ft_Gpu_Hal_CheckCmdBuffer(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    25f4:	b590      	push	{r4, r7, lr}
    25f6:	b085      	sub	sp, #20
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
    25fc:	6039      	str	r1, [r7, #0]
   ft_uint16_t getfreespace;
   do{
       // This "fixme" was here in the original code.
	   // FIXME: This can get stuck, non-even is returned in case of coprocessor issue
        getfreespace = Ft_Gpu_Cmdfifo_Freespace(host);
    25fe:	230e      	movs	r3, #14
    2600:	18fc      	adds	r4, r7, r3
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	0018      	movs	r0, r3
    2606:	4b07      	ldr	r3, [pc, #28]	; (2624 <Ft_Gpu_Hal_CheckCmdBuffer+0x30>)
    2608:	4798      	blx	r3
    260a:	0003      	movs	r3, r0
    260c:	8023      	strh	r3, [r4, #0]
        
   // loop until there is free space, else break if there is enough free space
   }while(getfreespace < count);
    260e:	230e      	movs	r3, #14
    2610:	18fb      	adds	r3, r7, r3
    2612:	881a      	ldrh	r2, [r3, #0]
    2614:	683b      	ldr	r3, [r7, #0]
    2616:	429a      	cmp	r2, r3
    2618:	d3f1      	bcc.n	25fe <Ft_Gpu_Hal_CheckCmdBuffer+0xa>
}
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	46bd      	mov	sp, r7
    261e:	b005      	add	sp, #20
    2620:	bd90      	pop	{r4, r7, pc}
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	000025a1 	.word	0x000025a1

00002628 <Ft_Gpu_Hal_WaitCmdfifo_empty>:


ft_void_t Ft_Gpu_Hal_WaitCmdfifo_empty(Ft_Gpu_Hal_Context_t *host)
{
    2628:	b590      	push	{r4, r7, lr}
    262a:	b083      	sub	sp, #12
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
   /* wait for the FIFO read and write pointers to equal each other.
    * This is the naive way to do it, refer to pg 154 in 
    * the FT81X_Series_Programmers_Guide datasheet */
   while(Ft_Gpu_Hal_Rd16(host,REG_CMD_READ) != Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE));
    2630:	46c0      	nop			; (mov r8, r8)
    2632:	4a0f      	ldr	r2, [pc, #60]	; (2670 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x48>)
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	0011      	movs	r1, r2
    2638:	0018      	movs	r0, r3
    263a:	4b0e      	ldr	r3, [pc, #56]	; (2674 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x4c>)
    263c:	4798      	blx	r3
    263e:	0003      	movs	r3, r0
    2640:	001c      	movs	r4, r3
    2642:	4a0d      	ldr	r2, [pc, #52]	; (2678 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x50>)
    2644:	687b      	ldr	r3, [r7, #4]
    2646:	0011      	movs	r1, r2
    2648:	0018      	movs	r0, r3
    264a:	4b0a      	ldr	r3, [pc, #40]	; (2674 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x4c>)
    264c:	4798      	blx	r3
    264e:	0003      	movs	r3, r0
    2650:	429c      	cmp	r4, r3
    2652:	d1ee      	bne.n	2632 <Ft_Gpu_Hal_WaitCmdfifo_empty+0xa>
   
   host->ft_cmd_fifo_wp = Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE);
    2654:	4a08      	ldr	r2, [pc, #32]	; (2678 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x50>)
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	0011      	movs	r1, r2
    265a:	0018      	movs	r0, r3
    265c:	4b05      	ldr	r3, [pc, #20]	; (2674 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x4c>)
    265e:	4798      	blx	r3
    2660:	0003      	movs	r3, r0
    2662:	001a      	movs	r2, r3
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	811a      	strh	r2, [r3, #8]
}
    2668:	46c0      	nop			; (mov r8, r8)
    266a:	46bd      	mov	sp, r7
    266c:	b003      	add	sp, #12
    266e:	bd90      	pop	{r4, r7, pc}
    2670:	003020f8 	.word	0x003020f8
    2674:	00002439 	.word	0x00002439
    2678:	003020fc 	.word	0x003020fc

0000267c <Ft_Gpu_Hal_WrCmd32>:
    host->ft_cmd_fifo_wp = 0;
}


ft_void_t Ft_Gpu_Hal_WrCmd32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t cmd)
{
    267c:	b580      	push	{r7, lr}
    267e:	b082      	sub	sp, #8
    2680:	af00      	add	r7, sp, #0
    2682:	6078      	str	r0, [r7, #4]
    2684:	6039      	str	r1, [r7, #0]
    Ft_Gpu_Hal_CheckCmdBuffer(host, sizeof(cmd));
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	2104      	movs	r1, #4
    268a:	0018      	movs	r0, r3
    268c:	4b0a      	ldr	r3, [pc, #40]	; (26b8 <Ft_Gpu_Hal_WrCmd32+0x3c>)
    268e:	4798      	blx	r3
    
    Ft_Gpu_Hal_Wr32(host, RAM_CMD + host->ft_cmd_fifo_wp, cmd);
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	891b      	ldrh	r3, [r3, #8]
    2694:	22c2      	movs	r2, #194	; 0xc2
    2696:	0392      	lsls	r2, r2, #14
    2698:	1899      	adds	r1, r3, r2
    269a:	683a      	ldr	r2, [r7, #0]
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	0018      	movs	r0, r3
    26a0:	4b06      	ldr	r3, [pc, #24]	; (26bc <Ft_Gpu_Hal_WrCmd32+0x40>)
    26a2:	4798      	blx	r3
    
    Ft_Gpu_Hal_Updatecmdfifo(host, sizeof(cmd));
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	2104      	movs	r1, #4
    26a8:	0018      	movs	r0, r3
    26aa:	4b05      	ldr	r3, [pc, #20]	; (26c0 <Ft_Gpu_Hal_WrCmd32+0x44>)
    26ac:	4798      	blx	r3
}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	46bd      	mov	sp, r7
    26b2:	b002      	add	sp, #8
    26b4:	bd80      	pop	{r7, pc}
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	000025f5 	.word	0x000025f5
    26bc:	0000250d 	.word	0x0000250d
    26c0:	0000254d 	.word	0x0000254d

000026c4 <system_clock_source_osc32k_get_config_defaults>:
{
    26c4:	b580      	push	{r7, lr}
    26c6:	b082      	sub	sp, #8
    26c8:	af00      	add	r7, sp, #0
    26ca:	6078      	str	r0, [r7, #4]
	config->enable_1khz_output  = true;
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	2201      	movs	r2, #1
    26d0:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	2201      	movs	r2, #1
    26d6:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	2200      	movs	r2, #0
    26dc:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	2201      	movs	r2, #1
    26e2:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	2207      	movs	r2, #7
    26e8:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	2200      	movs	r2, #0
    26ee:	715a      	strb	r2, [r3, #5]
}
    26f0:	46c0      	nop			; (mov r8, r8)
    26f2:	46bd      	mov	sp, r7
    26f4:	b002      	add	sp, #8
    26f6:	bd80      	pop	{r7, pc}

000026f8 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    26f8:	b580      	push	{r7, lr}
    26fa:	b082      	sub	sp, #8
    26fc:	af00      	add	r7, sp, #0
    26fe:	6078      	str	r0, [r7, #4]
	time->second = 0;
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	2200      	movs	r2, #0
    2704:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	2200      	movs	r2, #0
    270a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	2200      	movs	r2, #0
    2710:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    2712:	687b      	ldr	r3, [r7, #4]
    2714:	2200      	movs	r2, #0
    2716:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	2201      	movs	r2, #1
    271c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	2201      	movs	r2, #1
    2722:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	22fa      	movs	r2, #250	; 0xfa
    2728:	00d2      	lsls	r2, r2, #3
    272a:	80da      	strh	r2, [r3, #6]
}
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	46bd      	mov	sp, r7
    2730:	b002      	add	sp, #8
    2732:	bd80      	pop	{r7, pc}

00002734 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    2734:	b580      	push	{r7, lr}
    2736:	b086      	sub	sp, #24
    2738:	af00      	add	r7, sp, #0
    273a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    273c:	230c      	movs	r3, #12
    273e:	18fb      	adds	r3, r7, r3
    2740:	0018      	movs	r0, r3
    2742:	4b23      	ldr	r3, [pc, #140]	; (27d0 <rtc_calendar_get_config_defaults+0x9c>)
    2744:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	22a0      	movs	r2, #160	; 0xa0
    274a:	0112      	lsls	r2, r2, #4
    274c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	2200      	movs	r2, #0
    2752:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	2200      	movs	r2, #0
    2758:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	2200      	movs	r2, #0
    275e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	22fa      	movs	r2, #250	; 0xfa
    2764:	00d2      	lsls	r2, r2, #3
    2766:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    2768:	2317      	movs	r3, #23
    276a:	18fb      	adds	r3, r7, r3
    276c:	2200      	movs	r2, #0
    276e:	701a      	strb	r2, [r3, #0]
    2770:	e025      	b.n	27be <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    2772:	2317      	movs	r3, #23
    2774:	18fb      	adds	r3, r7, r3
    2776:	781a      	ldrb	r2, [r3, #0]
    2778:	6879      	ldr	r1, [r7, #4]
    277a:	2008      	movs	r0, #8
    277c:	0013      	movs	r3, r2
    277e:	009b      	lsls	r3, r3, #2
    2780:	189b      	adds	r3, r3, r2
    2782:	005b      	lsls	r3, r3, #1
    2784:	18cb      	adds	r3, r1, r3
    2786:	181a      	adds	r2, r3, r0
    2788:	230c      	movs	r3, #12
    278a:	18fb      	adds	r3, r7, r3
    278c:	0010      	movs	r0, r2
    278e:	0019      	movs	r1, r3
    2790:	2308      	movs	r3, #8
    2792:	001a      	movs	r2, r3
    2794:	4b0f      	ldr	r3, [pc, #60]	; (27d4 <rtc_calendar_get_config_defaults+0xa0>)
    2796:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    2798:	2317      	movs	r3, #23
    279a:	18fb      	adds	r3, r7, r3
    279c:	781a      	ldrb	r2, [r3, #0]
    279e:	6879      	ldr	r1, [r7, #4]
    27a0:	0013      	movs	r3, r2
    27a2:	009b      	lsls	r3, r3, #2
    27a4:	189b      	adds	r3, r3, r2
    27a6:	005b      	lsls	r3, r3, #1
    27a8:	18cb      	adds	r3, r1, r3
    27aa:	3310      	adds	r3, #16
    27ac:	2206      	movs	r2, #6
    27ae:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    27b0:	2317      	movs	r3, #23
    27b2:	18fb      	adds	r3, r7, r3
    27b4:	781a      	ldrb	r2, [r3, #0]
    27b6:	2317      	movs	r3, #23
    27b8:	18fb      	adds	r3, r7, r3
    27ba:	3201      	adds	r2, #1
    27bc:	701a      	strb	r2, [r3, #0]
    27be:	2317      	movs	r3, #23
    27c0:	18fb      	adds	r3, r7, r3
    27c2:	781b      	ldrb	r3, [r3, #0]
    27c4:	2b00      	cmp	r3, #0
    27c6:	d0d4      	beq.n	2772 <rtc_calendar_get_config_defaults+0x3e>
	}
}
    27c8:	46c0      	nop			; (mov r8, r8)
    27ca:	46bd      	mov	sp, r7
    27cc:	b006      	add	sp, #24
    27ce:	bd80      	pop	{r7, pc}
    27d0:	000026f9 	.word	0x000026f9
    27d4:	000061ad 	.word	0x000061ad

000027d8 <appAttn>:
/* Function Name    : appAttn
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Put the attenuation background to RAM_DL to reduce MPU workload
 */
void appAttn(void){
    27d8:	b5b0      	push	{r4, r5, r7, lr}
    27da:	af00      	add	r7, sp, #0
	//start sequence for the display
	Ft_Gpu_CoCmd_Dlstart(phost);
    27dc:	4b32      	ldr	r3, [pc, #200]	; (28a8 <appAttn+0xd0>)
    27de:	681b      	ldr	r3, [r3, #0]
    27e0:	0018      	movs	r0, r3
    27e2:	4b32      	ldr	r3, [pc, #200]	; (28ac <appAttn+0xd4>)
    27e4:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));	
    27e6:	4b30      	ldr	r3, [pc, #192]	; (28a8 <appAttn+0xd0>)
    27e8:	681a      	ldr	r2, [r3, #0]
    27ea:	2380      	movs	r3, #128	; 0x80
    27ec:	049b      	lsls	r3, r3, #18
    27ee:	0019      	movs	r1, r3
    27f0:	0010      	movs	r0, r2
    27f2:	4b2f      	ldr	r3, [pc, #188]	; (28b0 <appAttn+0xd8>)
    27f4:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,0,0));
    27f6:	4b2c      	ldr	r3, [pc, #176]	; (28a8 <appAttn+0xd0>)
    27f8:	681a      	ldr	r2, [r3, #0]
    27fa:	2398      	movs	r3, #152	; 0x98
    27fc:	059b      	lsls	r3, r3, #22
    27fe:	0019      	movs	r1, r3
    2800:	0010      	movs	r0, r2
    2802:	4b2b      	ldr	r3, [pc, #172]	; (28b0 <appAttn+0xd8>)
    2804:	4798      	blx	r3

	//draw the attenuation backgound
	drawRect(400, 100, 40.68);
    2806:	492b      	ldr	r1, [pc, #172]	; (28b4 <appAttn+0xdc>)
    2808:	4a2b      	ldr	r2, [pc, #172]	; (28b8 <appAttn+0xe0>)
    280a:	23c8      	movs	r3, #200	; 0xc8
    280c:	0058      	lsls	r0, r3, #1
    280e:	0013      	movs	r3, r2
    2810:	000a      	movs	r2, r1
    2812:	2164      	movs	r1, #100	; 0x64
    2814:	4c29      	ldr	r4, [pc, #164]	; (28bc <appAttn+0xe4>)
    2816:	47a0      	blx	r4
	drawRect(400, 230, 915);
    2818:	2100      	movs	r1, #0
    281a:	4a29      	ldr	r2, [pc, #164]	; (28c0 <appAttn+0xe8>)
    281c:	23c8      	movs	r3, #200	; 0xc8
    281e:	0058      	lsls	r0, r3, #1
    2820:	0013      	movs	r3, r2
    2822:	000a      	movs	r2, r1
    2824:	21e6      	movs	r1, #230	; 0xe6
    2826:	4c25      	ldr	r4, [pc, #148]	; (28bc <appAttn+0xe4>)
    2828:	47a0      	blx	r4
	drawRect(400, 360, 2.45);
    282a:	4926      	ldr	r1, [pc, #152]	; (28c4 <appAttn+0xec>)
    282c:	4a26      	ldr	r2, [pc, #152]	; (28c8 <appAttn+0xf0>)
    282e:	23b4      	movs	r3, #180	; 0xb4
    2830:	005c      	lsls	r4, r3, #1
    2832:	23c8      	movs	r3, #200	; 0xc8
    2834:	0058      	lsls	r0, r3, #1
    2836:	0013      	movs	r3, r2
    2838:	000a      	movs	r2, r1
    283a:	0021      	movs	r1, r4
    283c:	4c1f      	ldr	r4, [pc, #124]	; (28bc <appAttn+0xe4>)
    283e:	47a0      	blx	r4
	//wait for command to empty
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    2840:	4b19      	ldr	r3, [pc, #100]	; (28a8 <appAttn+0xd0>)
    2842:	681b      	ldr	r3, [r3, #0]
    2844:	0018      	movs	r0, r3
    2846:	4b21      	ldr	r3, [pc, #132]	; (28cc <appAttn+0xf4>)
    2848:	4798      	blx	r3

	//calculate the number of command 
	attnEnd = Ft_Gpu_Hal_Rd16(phost,REG_CMD_DL) - 3*4;
    284a:	4b17      	ldr	r3, [pc, #92]	; (28a8 <appAttn+0xd0>)
    284c:	681b      	ldr	r3, [r3, #0]
    284e:	4a20      	ldr	r2, [pc, #128]	; (28d0 <appAttn+0xf8>)
    2850:	0011      	movs	r1, r2
    2852:	0018      	movs	r0, r3
    2854:	4b1f      	ldr	r3, [pc, #124]	; (28d4 <appAttn+0xfc>)
    2856:	4798      	blx	r3
    2858:	0003      	movs	r3, r0
    285a:	3b0c      	subs	r3, #12
    285c:	001a      	movs	r2, r3
    285e:	4b1e      	ldr	r3, [pc, #120]	; (28d8 <appAttn+0x100>)
    2860:	601a      	str	r2, [r3, #0]
	//coppy the command and put it into RAM_DL
	Ft_Gpu_Hal_WrCmd32(phost,CMD_MEMCPY);
    2862:	4b11      	ldr	r3, [pc, #68]	; (28a8 <appAttn+0xd0>)
    2864:	681a      	ldr	r2, [r3, #0]
    2866:	23e3      	movs	r3, #227	; 0xe3
    2868:	425b      	negs	r3, r3
    286a:	0019      	movs	r1, r3
    286c:	0010      	movs	r0, r2
    286e:	4b10      	ldr	r3, [pc, #64]	; (28b0 <appAttn+0xd8>)
    2870:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,attnStart);
    2872:	4b0d      	ldr	r3, [pc, #52]	; (28a8 <appAttn+0xd0>)
    2874:	681a      	ldr	r2, [r3, #0]
    2876:	4b19      	ldr	r3, [pc, #100]	; (28dc <appAttn+0x104>)
    2878:	681b      	ldr	r3, [r3, #0]
    287a:	0019      	movs	r1, r3
    287c:	0010      	movs	r0, r2
    287e:	4b0c      	ldr	r3, [pc, #48]	; (28b0 <appAttn+0xd8>)
    2880:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,RAM_DL);
    2882:	4b09      	ldr	r3, [pc, #36]	; (28a8 <appAttn+0xd0>)
    2884:	681a      	ldr	r2, [r3, #0]
    2886:	23c0      	movs	r3, #192	; 0xc0
    2888:	039b      	lsls	r3, r3, #14
    288a:	0019      	movs	r1, r3
    288c:	0010      	movs	r0, r2
    288e:	4b08      	ldr	r3, [pc, #32]	; (28b0 <appAttn+0xd8>)
    2890:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,attnEnd);
    2892:	4b05      	ldr	r3, [pc, #20]	; (28a8 <appAttn+0xd0>)
    2894:	681a      	ldr	r2, [r3, #0]
    2896:	4b10      	ldr	r3, [pc, #64]	; (28d8 <appAttn+0x100>)
    2898:	681b      	ldr	r3, [r3, #0]
    289a:	0019      	movs	r1, r3
    289c:	0010      	movs	r0, r2
    289e:	4b04      	ldr	r3, [pc, #16]	; (28b0 <appAttn+0xd8>)
    28a0:	4798      	blx	r3
}//end appAttn
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	46bd      	mov	sp, r7
    28a6:	bdb0      	pop	{r4, r5, r7, pc}
    28a8:	20000470 	.word	0x20000470
    28ac:	000020b9 	.word	0x000020b9
    28b0:	0000267d 	.word	0x0000267d
    28b4:	3d70a3d7 	.word	0x3d70a3d7
    28b8:	4044570a 	.word	0x4044570a
    28bc:	00002a91 	.word	0x00002a91
    28c0:	408c9800 	.word	0x408c9800
    28c4:	9999999a 	.word	0x9999999a
    28c8:	40039999 	.word	0x40039999
    28cc:	00002629 	.word	0x00002629
    28d0:	00302100 	.word	0x00302100
    28d4:	00002439 	.word	0x00002439
    28d8:	200000b4 	.word	0x200000b4
    28dc:	200000b0 	.word	0x200000b0

000028e0 <appRssi>:
/* Function Name    : appRssi
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Put the RSSI background to RAM_DL to reduce MPU workload
 */
void appRssi(){
    28e0:	b580      	push	{r7, lr}
    28e2:	af00      	add	r7, sp, #0
	//start sequence for the display
	rssiStart = attnStart + attnEnd + 4;
    28e4:	4b29      	ldr	r3, [pc, #164]	; (298c <appRssi+0xac>)
    28e6:	681a      	ldr	r2, [r3, #0]
    28e8:	4b29      	ldr	r3, [pc, #164]	; (2990 <appRssi+0xb0>)
    28ea:	681b      	ldr	r3, [r3, #0]
    28ec:	18d3      	adds	r3, r2, r3
    28ee:	1d1a      	adds	r2, r3, #4
    28f0:	4b28      	ldr	r3, [pc, #160]	; (2994 <appRssi+0xb4>)
    28f2:	601a      	str	r2, [r3, #0]
	Ft_Gpu_CoCmd_Dlstart(phost);
    28f4:	4b28      	ldr	r3, [pc, #160]	; (2998 <appRssi+0xb8>)
    28f6:	681b      	ldr	r3, [r3, #0]
    28f8:	0018      	movs	r0, r3
    28fa:	4b28      	ldr	r3, [pc, #160]	; (299c <appRssi+0xbc>)
    28fc:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    28fe:	4b26      	ldr	r3, [pc, #152]	; (2998 <appRssi+0xb8>)
    2900:	681a      	ldr	r2, [r3, #0]
    2902:	2380      	movs	r3, #128	; 0x80
    2904:	049b      	lsls	r3, r3, #18
    2906:	0019      	movs	r1, r3
    2908:	0010      	movs	r0, r2
    290a:	4b25      	ldr	r3, [pc, #148]	; (29a0 <appRssi+0xc0>)
    290c:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,0,0));
    290e:	4b22      	ldr	r3, [pc, #136]	; (2998 <appRssi+0xb8>)
    2910:	681a      	ldr	r2, [r3, #0]
    2912:	2398      	movs	r3, #152	; 0x98
    2914:	059b      	lsls	r3, r3, #22
    2916:	0019      	movs	r1, r3
    2918:	0010      	movs	r0, r2
    291a:	4b21      	ldr	r3, [pc, #132]	; (29a0 <appRssi+0xc0>)
    291c:	4798      	blx	r3

	//draw the attenuation background
	drawRssi();
    291e:	4b21      	ldr	r3, [pc, #132]	; (29a4 <appRssi+0xc4>)
    2920:	4798      	blx	r3
	//wait for command to empty
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    2922:	4b1d      	ldr	r3, [pc, #116]	; (2998 <appRssi+0xb8>)
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	0018      	movs	r0, r3
    2928:	4b1f      	ldr	r3, [pc, #124]	; (29a8 <appRssi+0xc8>)
    292a:	4798      	blx	r3
	
	//calculate the number of command 
	rssiEnd = Ft_Gpu_Hal_Rd16(phost,REG_CMD_DL) - 3*4;
    292c:	4b1a      	ldr	r3, [pc, #104]	; (2998 <appRssi+0xb8>)
    292e:	681b      	ldr	r3, [r3, #0]
    2930:	4a1e      	ldr	r2, [pc, #120]	; (29ac <appRssi+0xcc>)
    2932:	0011      	movs	r1, r2
    2934:	0018      	movs	r0, r3
    2936:	4b1e      	ldr	r3, [pc, #120]	; (29b0 <appRssi+0xd0>)
    2938:	4798      	blx	r3
    293a:	0003      	movs	r3, r0
    293c:	3b0c      	subs	r3, #12
    293e:	001a      	movs	r2, r3
    2940:	4b1c      	ldr	r3, [pc, #112]	; (29b4 <appRssi+0xd4>)
    2942:	601a      	str	r2, [r3, #0]
	//copy the command and put it into RAM_DL
	Ft_Gpu_Hal_WrCmd32(phost,CMD_MEMCPY);
    2944:	4b14      	ldr	r3, [pc, #80]	; (2998 <appRssi+0xb8>)
    2946:	681a      	ldr	r2, [r3, #0]
    2948:	23e3      	movs	r3, #227	; 0xe3
    294a:	425b      	negs	r3, r3
    294c:	0019      	movs	r1, r3
    294e:	0010      	movs	r0, r2
    2950:	4b13      	ldr	r3, [pc, #76]	; (29a0 <appRssi+0xc0>)
    2952:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,rssiStart);
    2954:	4b10      	ldr	r3, [pc, #64]	; (2998 <appRssi+0xb8>)
    2956:	681a      	ldr	r2, [r3, #0]
    2958:	4b0e      	ldr	r3, [pc, #56]	; (2994 <appRssi+0xb4>)
    295a:	681b      	ldr	r3, [r3, #0]
    295c:	0019      	movs	r1, r3
    295e:	0010      	movs	r0, r2
    2960:	4b0f      	ldr	r3, [pc, #60]	; (29a0 <appRssi+0xc0>)
    2962:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,RAM_DL);
    2964:	4b0c      	ldr	r3, [pc, #48]	; (2998 <appRssi+0xb8>)
    2966:	681a      	ldr	r2, [r3, #0]
    2968:	23c0      	movs	r3, #192	; 0xc0
    296a:	039b      	lsls	r3, r3, #14
    296c:	0019      	movs	r1, r3
    296e:	0010      	movs	r0, r2
    2970:	4b0b      	ldr	r3, [pc, #44]	; (29a0 <appRssi+0xc0>)
    2972:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,rssiEnd);
    2974:	4b08      	ldr	r3, [pc, #32]	; (2998 <appRssi+0xb8>)
    2976:	681a      	ldr	r2, [r3, #0]
    2978:	4b0e      	ldr	r3, [pc, #56]	; (29b4 <appRssi+0xd4>)
    297a:	681b      	ldr	r3, [r3, #0]
    297c:	0019      	movs	r1, r3
    297e:	0010      	movs	r0, r2
    2980:	4b07      	ldr	r3, [pc, #28]	; (29a0 <appRssi+0xc0>)
    2982:	4798      	blx	r3
}//end appRssi
    2984:	46c0      	nop			; (mov r8, r8)
    2986:	46bd      	mov	sp, r7
    2988:	bd80      	pop	{r7, pc}
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	200000b0 	.word	0x200000b0
    2990:	200000b4 	.word	0x200000b4
    2994:	200000b8 	.word	0x200000b8
    2998:	20000470 	.word	0x20000470
    299c:	000020b9 	.word	0x000020b9
    29a0:	0000267d 	.word	0x0000267d
    29a4:	00002d4d 	.word	0x00002d4d
    29a8:	00002629 	.word	0x00002629
    29ac:	00302100 	.word	0x00302100
    29b0:	00002439 	.word	0x00002439
    29b4:	200000bc 	.word	0x200000bc

000029b8 <appHist>:
/* Function Name    : appHist
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Put the history background to RAM_DL to reduce MPU workload
 */
void appHist(){
    29b8:	b580      	push	{r7, lr}
    29ba:	af00      	add	r7, sp, #0
	//start sequence for the display
	histStart = rssiEnd + rssiStart + 4;Ft_Gpu_CoCmd_Dlstart(phost);
    29bc:	4b29      	ldr	r3, [pc, #164]	; (2a64 <appHist+0xac>)
    29be:	681a      	ldr	r2, [r3, #0]
    29c0:	4b29      	ldr	r3, [pc, #164]	; (2a68 <appHist+0xb0>)
    29c2:	681b      	ldr	r3, [r3, #0]
    29c4:	18d3      	adds	r3, r2, r3
    29c6:	1d1a      	adds	r2, r3, #4
    29c8:	4b28      	ldr	r3, [pc, #160]	; (2a6c <appHist+0xb4>)
    29ca:	601a      	str	r2, [r3, #0]
    29cc:	4b28      	ldr	r3, [pc, #160]	; (2a70 <appHist+0xb8>)
    29ce:	681b      	ldr	r3, [r3, #0]
    29d0:	0018      	movs	r0, r3
    29d2:	4b28      	ldr	r3, [pc, #160]	; (2a74 <appHist+0xbc>)
    29d4:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    29d6:	4b26      	ldr	r3, [pc, #152]	; (2a70 <appHist+0xb8>)
    29d8:	681a      	ldr	r2, [r3, #0]
    29da:	2380      	movs	r3, #128	; 0x80
    29dc:	049b      	lsls	r3, r3, #18
    29de:	0019      	movs	r1, r3
    29e0:	0010      	movs	r0, r2
    29e2:	4b25      	ldr	r3, [pc, #148]	; (2a78 <appHist+0xc0>)
    29e4:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,0,0));
    29e6:	4b22      	ldr	r3, [pc, #136]	; (2a70 <appHist+0xb8>)
    29e8:	681a      	ldr	r2, [r3, #0]
    29ea:	2398      	movs	r3, #152	; 0x98
    29ec:	059b      	lsls	r3, r3, #22
    29ee:	0019      	movs	r1, r3
    29f0:	0010      	movs	r0, r2
    29f2:	4b21      	ldr	r3, [pc, #132]	; (2a78 <appHist+0xc0>)
    29f4:	4798      	blx	r3

	//draw the attenuation background
	drawHist();
    29f6:	4b21      	ldr	r3, [pc, #132]	; (2a7c <appHist+0xc4>)
    29f8:	4798      	blx	r3
	//wait for command to empty
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    29fa:	4b1d      	ldr	r3, [pc, #116]	; (2a70 <appHist+0xb8>)
    29fc:	681b      	ldr	r3, [r3, #0]
    29fe:	0018      	movs	r0, r3
    2a00:	4b1f      	ldr	r3, [pc, #124]	; (2a80 <appHist+0xc8>)
    2a02:	4798      	blx	r3
	
	//wait for command to empty
	histEnd = Ft_Gpu_Hal_Rd16(phost,REG_CMD_DL) - 3*4;
    2a04:	4b1a      	ldr	r3, [pc, #104]	; (2a70 <appHist+0xb8>)
    2a06:	681b      	ldr	r3, [r3, #0]
    2a08:	4a1e      	ldr	r2, [pc, #120]	; (2a84 <appHist+0xcc>)
    2a0a:	0011      	movs	r1, r2
    2a0c:	0018      	movs	r0, r3
    2a0e:	4b1e      	ldr	r3, [pc, #120]	; (2a88 <appHist+0xd0>)
    2a10:	4798      	blx	r3
    2a12:	0003      	movs	r3, r0
    2a14:	3b0c      	subs	r3, #12
    2a16:	001a      	movs	r2, r3
    2a18:	4b1c      	ldr	r3, [pc, #112]	; (2a8c <appHist+0xd4>)
    2a1a:	601a      	str	r2, [r3, #0]
	//wait for command to empty
	Ft_Gpu_Hal_WrCmd32(phost,CMD_MEMCPY);
    2a1c:	4b14      	ldr	r3, [pc, #80]	; (2a70 <appHist+0xb8>)
    2a1e:	681a      	ldr	r2, [r3, #0]
    2a20:	23e3      	movs	r3, #227	; 0xe3
    2a22:	425b      	negs	r3, r3
    2a24:	0019      	movs	r1, r3
    2a26:	0010      	movs	r0, r2
    2a28:	4b13      	ldr	r3, [pc, #76]	; (2a78 <appHist+0xc0>)
    2a2a:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,histStart);
    2a2c:	4b10      	ldr	r3, [pc, #64]	; (2a70 <appHist+0xb8>)
    2a2e:	681a      	ldr	r2, [r3, #0]
    2a30:	4b0e      	ldr	r3, [pc, #56]	; (2a6c <appHist+0xb4>)
    2a32:	681b      	ldr	r3, [r3, #0]
    2a34:	0019      	movs	r1, r3
    2a36:	0010      	movs	r0, r2
    2a38:	4b0f      	ldr	r3, [pc, #60]	; (2a78 <appHist+0xc0>)
    2a3a:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,RAM_DL);
    2a3c:	4b0c      	ldr	r3, [pc, #48]	; (2a70 <appHist+0xb8>)
    2a3e:	681a      	ldr	r2, [r3, #0]
    2a40:	23c0      	movs	r3, #192	; 0xc0
    2a42:	039b      	lsls	r3, r3, #14
    2a44:	0019      	movs	r1, r3
    2a46:	0010      	movs	r0, r2
    2a48:	4b0b      	ldr	r3, [pc, #44]	; (2a78 <appHist+0xc0>)
    2a4a:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,histEnd);
    2a4c:	4b08      	ldr	r3, [pc, #32]	; (2a70 <appHist+0xb8>)
    2a4e:	681a      	ldr	r2, [r3, #0]
    2a50:	4b0e      	ldr	r3, [pc, #56]	; (2a8c <appHist+0xd4>)
    2a52:	681b      	ldr	r3, [r3, #0]
    2a54:	0019      	movs	r1, r3
    2a56:	0010      	movs	r0, r2
    2a58:	4b07      	ldr	r3, [pc, #28]	; (2a78 <appHist+0xc0>)
    2a5a:	4798      	blx	r3
}//end appHist
    2a5c:	46c0      	nop			; (mov r8, r8)
    2a5e:	46bd      	mov	sp, r7
    2a60:	bd80      	pop	{r7, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	200000bc 	.word	0x200000bc
    2a68:	200000b8 	.word	0x200000b8
    2a6c:	200000c0 	.word	0x200000c0
    2a70:	20000470 	.word	0x20000470
    2a74:	000020b9 	.word	0x000020b9
    2a78:	0000267d 	.word	0x0000267d
    2a7c:	00002f25 	.word	0x00002f25
    2a80:	00002629 	.word	0x00002629
    2a84:	00302100 	.word	0x00302100
    2a88:	00002439 	.word	0x00002439
    2a8c:	200000c4 	.word	0x200000c4

00002a90 <drawRect>:
/* Function Name    : drawRect
 * Parameters       : int x, int y, double freq
 * Return Values(s) : void
 * Description      : Draw the background for attenuation screen
 */
void drawRect(int x, int y, double freq){
    2a90:	b590      	push	{r4, r7, lr}
    2a92:	b087      	sub	sp, #28
    2a94:	af02      	add	r7, sp, #8
    2a96:	60f8      	str	r0, [r7, #12]
    2a98:	60b9      	str	r1, [r7, #8]
    2a9a:	603a      	str	r2, [r7, #0]
    2a9c:	607b      	str	r3, [r7, #4]
	// draw rounded rectangles
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    2a9e:	4b94      	ldr	r3, [pc, #592]	; (2cf0 <drawRect+0x260>)
    2aa0:	681b      	ldr	r3, [r3, #0]
    2aa2:	4a94      	ldr	r2, [pc, #592]	; (2cf4 <drawRect+0x264>)
    2aa4:	0011      	movs	r1, r2
    2aa6:	0018      	movs	r0, r3
    2aa8:	4b93      	ldr	r3, [pc, #588]	; (2cf8 <drawRect+0x268>)
    2aaa:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 16));
    2aac:	4b90      	ldr	r3, [pc, #576]	; (2cf0 <drawRect+0x260>)
    2aae:	681b      	ldr	r3, [r3, #0]
    2ab0:	4a92      	ldr	r2, [pc, #584]	; (2cfc <drawRect+0x26c>)
    2ab2:	0011      	movs	r1, r2
    2ab4:	0018      	movs	r0, r3
    2ab6:	4b90      	ldr	r3, [pc, #576]	; (2cf8 <drawRect+0x268>)
    2ab8:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(50));		// transparency apparently
    2aba:	4b8d      	ldr	r3, [pc, #564]	; (2cf0 <drawRect+0x260>)
    2abc:	681b      	ldr	r3, [r3, #0]
    2abe:	4a90      	ldr	r2, [pc, #576]	; (2d00 <drawRect+0x270>)
    2ac0:	0011      	movs	r1, r2
    2ac2:	0018      	movs	r0, r3
    2ac4:	4b8c      	ldr	r3, [pc, #560]	; (2cf8 <drawRect+0x268>)
    2ac6:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2ac8:	4b89      	ldr	r3, [pc, #548]	; (2cf0 <drawRect+0x260>)
    2aca:	681b      	ldr	r3, [r3, #0]
    2acc:	4a8d      	ldr	r2, [pc, #564]	; (2d04 <drawRect+0x274>)
    2ace:	0011      	movs	r1, r2
    2ad0:	0018      	movs	r0, r3
    2ad2:	4b89      	ldr	r3, [pc, #548]	; (2cf8 <drawRect+0x268>)
    2ad4:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(x * 16, y * 16) );
    2ad6:	4b86      	ldr	r3, [pc, #536]	; (2cf0 <drawRect+0x260>)
    2ad8:	6818      	ldr	r0, [r3, #0]
    2ada:	68fb      	ldr	r3, [r7, #12]
    2adc:	011b      	lsls	r3, r3, #4
    2ade:	03db      	lsls	r3, r3, #15
    2ae0:	4a89      	ldr	r2, [pc, #548]	; (2d08 <drawRect+0x278>)
    2ae2:	401a      	ands	r2, r3
    2ae4:	68bb      	ldr	r3, [r7, #8]
    2ae6:	011b      	lsls	r3, r3, #4
    2ae8:	0019      	movs	r1, r3
    2aea:	4b88      	ldr	r3, [pc, #544]	; (2d0c <drawRect+0x27c>)
    2aec:	400b      	ands	r3, r1
    2aee:	4313      	orrs	r3, r2
    2af0:	2280      	movs	r2, #128	; 0x80
    2af2:	05d2      	lsls	r2, r2, #23
    2af4:	4313      	orrs	r3, r2
    2af6:	0019      	movs	r1, r3
    2af8:	4b7f      	ldr	r3, [pc, #508]	; (2cf8 <drawRect+0x268>)
    2afa:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + boxWid) * 16, (y + boxHei) * 16));
    2afc:	4b7c      	ldr	r3, [pc, #496]	; (2cf0 <drawRect+0x260>)
    2afe:	6818      	ldr	r0, [r3, #0]
    2b00:	68fb      	ldr	r3, [r7, #12]
    2b02:	332d      	adds	r3, #45	; 0x2d
    2b04:	33ff      	adds	r3, #255	; 0xff
    2b06:	011b      	lsls	r3, r3, #4
    2b08:	03db      	lsls	r3, r3, #15
    2b0a:	4a7f      	ldr	r2, [pc, #508]	; (2d08 <drawRect+0x278>)
    2b0c:	401a      	ands	r2, r3
    2b0e:	68bb      	ldr	r3, [r7, #8]
    2b10:	3364      	adds	r3, #100	; 0x64
    2b12:	011b      	lsls	r3, r3, #4
    2b14:	0019      	movs	r1, r3
    2b16:	4b7d      	ldr	r3, [pc, #500]	; (2d0c <drawRect+0x27c>)
    2b18:	400b      	ands	r3, r1
    2b1a:	4313      	orrs	r3, r2
    2b1c:	2280      	movs	r2, #128	; 0x80
    2b1e:	05d2      	lsls	r2, r2, #23
    2b20:	4313      	orrs	r3, r2
    2b22:	0019      	movs	r1, r3
    2b24:	4b74      	ldr	r3, [pc, #464]	; (2cf8 <drawRect+0x268>)
    2b26:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, END());
    2b28:	4b71      	ldr	r3, [pc, #452]	; (2cf0 <drawRect+0x260>)
    2b2a:	681a      	ldr	r2, [r3, #0]
    2b2c:	2384      	movs	r3, #132	; 0x84
    2b2e:	059b      	lsls	r3, r3, #22
    2b30:	0019      	movs	r1, r3
    2b32:	0010      	movs	r0, r2
    2b34:	4b70      	ldr	r3, [pc, #448]	; (2cf8 <drawRect+0x268>)
    2b36:	4798      	blx	r3
	//draw lines
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(LINES));
    2b38:	4b6d      	ldr	r3, [pc, #436]	; (2cf0 <drawRect+0x260>)
    2b3a:	681b      	ldr	r3, [r3, #0]
    2b3c:	4a74      	ldr	r2, [pc, #464]	; (2d10 <drawRect+0x280>)
    2b3e:	0011      	movs	r1, r2
    2b40:	0018      	movs	r0, r3
    2b42:	4b6d      	ldr	r3, [pc, #436]	; (2cf8 <drawRect+0x268>)
    2b44:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(2 * 16));
    2b46:	4b6a      	ldr	r3, [pc, #424]	; (2cf0 <drawRect+0x260>)
    2b48:	681b      	ldr	r3, [r3, #0]
    2b4a:	4a72      	ldr	r2, [pc, #456]	; (2d14 <drawRect+0x284>)
    2b4c:	0011      	movs	r1, r2
    2b4e:	0018      	movs	r0, r3
    2b50:	4b69      	ldr	r3, [pc, #420]	; (2cf8 <drawRect+0x268>)
    2b52:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(100));
    2b54:	4b66      	ldr	r3, [pc, #408]	; (2cf0 <drawRect+0x260>)
    2b56:	681b      	ldr	r3, [r3, #0]
    2b58:	4a6f      	ldr	r2, [pc, #444]	; (2d18 <drawRect+0x288>)
    2b5a:	0011      	movs	r1, r2
    2b5c:	0018      	movs	r0, r3
    2b5e:	4b66      	ldr	r3, [pc, #408]	; (2cf8 <drawRect+0x268>)
    2b60:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + boxWid/4) * 16, (y + 10) * 16) );
    2b62:	4b63      	ldr	r3, [pc, #396]	; (2cf0 <drawRect+0x260>)
    2b64:	6818      	ldr	r0, [r3, #0]
    2b66:	68fb      	ldr	r3, [r7, #12]
    2b68:	334b      	adds	r3, #75	; 0x4b
    2b6a:	011b      	lsls	r3, r3, #4
    2b6c:	03db      	lsls	r3, r3, #15
    2b6e:	4a66      	ldr	r2, [pc, #408]	; (2d08 <drawRect+0x278>)
    2b70:	401a      	ands	r2, r3
    2b72:	68bb      	ldr	r3, [r7, #8]
    2b74:	330a      	adds	r3, #10
    2b76:	011b      	lsls	r3, r3, #4
    2b78:	0019      	movs	r1, r3
    2b7a:	4b64      	ldr	r3, [pc, #400]	; (2d0c <drawRect+0x27c>)
    2b7c:	400b      	ands	r3, r1
    2b7e:	4313      	orrs	r3, r2
    2b80:	2280      	movs	r2, #128	; 0x80
    2b82:	05d2      	lsls	r2, r2, #23
    2b84:	4313      	orrs	r3, r2
    2b86:	0019      	movs	r1, r3
    2b88:	4b5b      	ldr	r3, [pc, #364]	; (2cf8 <drawRect+0x268>)
    2b8a:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + boxWid/4) * 16, (y+boxHei - 10) * 16) );
    2b8c:	4b58      	ldr	r3, [pc, #352]	; (2cf0 <drawRect+0x260>)
    2b8e:	6818      	ldr	r0, [r3, #0]
    2b90:	68fb      	ldr	r3, [r7, #12]
    2b92:	334b      	adds	r3, #75	; 0x4b
    2b94:	011b      	lsls	r3, r3, #4
    2b96:	03db      	lsls	r3, r3, #15
    2b98:	4a5b      	ldr	r2, [pc, #364]	; (2d08 <drawRect+0x278>)
    2b9a:	401a      	ands	r2, r3
    2b9c:	68bb      	ldr	r3, [r7, #8]
    2b9e:	335a      	adds	r3, #90	; 0x5a
    2ba0:	011b      	lsls	r3, r3, #4
    2ba2:	0019      	movs	r1, r3
    2ba4:	4b59      	ldr	r3, [pc, #356]	; (2d0c <drawRect+0x27c>)
    2ba6:	400b      	ands	r3, r1
    2ba8:	4313      	orrs	r3, r2
    2baa:	2280      	movs	r2, #128	; 0x80
    2bac:	05d2      	lsls	r2, r2, #23
    2bae:	4313      	orrs	r3, r2
    2bb0:	0019      	movs	r1, r3
    2bb2:	4b51      	ldr	r3, [pc, #324]	; (2cf8 <drawRect+0x268>)
    2bb4:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, END());
    2bb6:	4b4e      	ldr	r3, [pc, #312]	; (2cf0 <drawRect+0x260>)
    2bb8:	681a      	ldr	r2, [r3, #0]
    2bba:	2384      	movs	r3, #132	; 0x84
    2bbc:	059b      	lsls	r3, r3, #22
    2bbe:	0019      	movs	r1, r3
    2bc0:	0010      	movs	r0, r2
    2bc2:	4b4d      	ldr	r3, [pc, #308]	; (2cf8 <drawRect+0x268>)
    2bc4:	4798      	blx	r3
	// put the labels on
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    2bc6:	4b4a      	ldr	r3, [pc, #296]	; (2cf0 <drawRect+0x260>)
    2bc8:	681b      	ldr	r3, [r3, #0]
    2bca:	4a54      	ldr	r2, [pc, #336]	; (2d1c <drawRect+0x28c>)
    2bcc:	0011      	movs	r1, r2
    2bce:	0018      	movs	r0, r3
    2bd0:	4b49      	ldr	r3, [pc, #292]	; (2cf8 <drawRect+0x268>)
    2bd2:	4798      	blx	r3
	if (freq == 2.45){
    2bd4:	4c52      	ldr	r4, [pc, #328]	; (2d20 <drawRect+0x290>)
    2bd6:	4a53      	ldr	r2, [pc, #332]	; (2d24 <drawRect+0x294>)
    2bd8:	4b53      	ldr	r3, [pc, #332]	; (2d28 <drawRect+0x298>)
    2bda:	6838      	ldr	r0, [r7, #0]
    2bdc:	6879      	ldr	r1, [r7, #4]
    2bde:	47a0      	blx	r4
    2be0:	1e03      	subs	r3, r0, #0
    2be2:	d028      	beq.n	2c36 <drawRect+0x1a6>
		Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-30,28,OPT_CENTERX|OPT_CENTERY,"GHz");
    2be4:	4b42      	ldr	r3, [pc, #264]	; (2cf0 <drawRect+0x260>)
    2be6:	6818      	ldr	r0, [r3, #0]
    2be8:	68fb      	ldr	r3, [r7, #12]
    2bea:	b29b      	uxth	r3, r3
    2bec:	3324      	adds	r3, #36	; 0x24
    2bee:	b29b      	uxth	r3, r3
    2bf0:	b219      	sxth	r1, r3
    2bf2:	68bb      	ldr	r3, [r7, #8]
    2bf4:	b29b      	uxth	r3, r3
    2bf6:	3346      	adds	r3, #70	; 0x46
    2bf8:	b29b      	uxth	r3, r3
    2bfa:	b21a      	sxth	r2, r3
    2bfc:	4b4b      	ldr	r3, [pc, #300]	; (2d2c <drawRect+0x29c>)
    2bfe:	9301      	str	r3, [sp, #4]
    2c00:	23c0      	movs	r3, #192	; 0xc0
    2c02:	00db      	lsls	r3, r3, #3
    2c04:	9300      	str	r3, [sp, #0]
    2c06:	231c      	movs	r3, #28
    2c08:	4c49      	ldr	r4, [pc, #292]	; (2d30 <drawRect+0x2a0>)
    2c0a:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-75,30,OPT_CENTERX|OPT_CENTERY,"2.45");
    2c0c:	4b38      	ldr	r3, [pc, #224]	; (2cf0 <drawRect+0x260>)
    2c0e:	6818      	ldr	r0, [r3, #0]
    2c10:	68fb      	ldr	r3, [r7, #12]
    2c12:	b29b      	uxth	r3, r3
    2c14:	3324      	adds	r3, #36	; 0x24
    2c16:	b29b      	uxth	r3, r3
    2c18:	b219      	sxth	r1, r3
    2c1a:	68bb      	ldr	r3, [r7, #8]
    2c1c:	b29b      	uxth	r3, r3
    2c1e:	3319      	adds	r3, #25
    2c20:	b29b      	uxth	r3, r3
    2c22:	b21a      	sxth	r2, r3
    2c24:	4b43      	ldr	r3, [pc, #268]	; (2d34 <drawRect+0x2a4>)
    2c26:	9301      	str	r3, [sp, #4]
    2c28:	23c0      	movs	r3, #192	; 0xc0
    2c2a:	00db      	lsls	r3, r3, #3
    2c2c:	9300      	str	r3, [sp, #0]
    2c2e:	231e      	movs	r3, #30
    2c30:	4c3f      	ldr	r4, [pc, #252]	; (2d30 <drawRect+0x2a0>)
    2c32:	47a0      	blx	r4
    2c34:	e044      	b.n	2cc0 <drawRect+0x230>
	}else {
		Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-30,28,OPT_CENTERX|OPT_CENTERY,"MHz");
    2c36:	4b2e      	ldr	r3, [pc, #184]	; (2cf0 <drawRect+0x260>)
    2c38:	6818      	ldr	r0, [r3, #0]
    2c3a:	68fb      	ldr	r3, [r7, #12]
    2c3c:	b29b      	uxth	r3, r3
    2c3e:	3324      	adds	r3, #36	; 0x24
    2c40:	b29b      	uxth	r3, r3
    2c42:	b219      	sxth	r1, r3
    2c44:	68bb      	ldr	r3, [r7, #8]
    2c46:	b29b      	uxth	r3, r3
    2c48:	3346      	adds	r3, #70	; 0x46
    2c4a:	b29b      	uxth	r3, r3
    2c4c:	b21a      	sxth	r2, r3
    2c4e:	4b3a      	ldr	r3, [pc, #232]	; (2d38 <drawRect+0x2a8>)
    2c50:	9301      	str	r3, [sp, #4]
    2c52:	23c0      	movs	r3, #192	; 0xc0
    2c54:	00db      	lsls	r3, r3, #3
    2c56:	9300      	str	r3, [sp, #0]
    2c58:	231c      	movs	r3, #28
    2c5a:	4c35      	ldr	r4, [pc, #212]	; (2d30 <drawRect+0x2a0>)
    2c5c:	47a0      	blx	r4
		if (freq == 915)
    2c5e:	4c30      	ldr	r4, [pc, #192]	; (2d20 <drawRect+0x290>)
    2c60:	2200      	movs	r2, #0
    2c62:	4b36      	ldr	r3, [pc, #216]	; (2d3c <drawRect+0x2ac>)
    2c64:	6838      	ldr	r0, [r7, #0]
    2c66:	6879      	ldr	r1, [r7, #4]
    2c68:	47a0      	blx	r4
    2c6a:	1e03      	subs	r3, r0, #0
    2c6c:	d014      	beq.n	2c98 <drawRect+0x208>
			Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-75,30,OPT_CENTERX|OPT_CENTERY,"915");
    2c6e:	4b20      	ldr	r3, [pc, #128]	; (2cf0 <drawRect+0x260>)
    2c70:	6818      	ldr	r0, [r3, #0]
    2c72:	68fb      	ldr	r3, [r7, #12]
    2c74:	b29b      	uxth	r3, r3
    2c76:	3324      	adds	r3, #36	; 0x24
    2c78:	b29b      	uxth	r3, r3
    2c7a:	b219      	sxth	r1, r3
    2c7c:	68bb      	ldr	r3, [r7, #8]
    2c7e:	b29b      	uxth	r3, r3
    2c80:	3319      	adds	r3, #25
    2c82:	b29b      	uxth	r3, r3
    2c84:	b21a      	sxth	r2, r3
    2c86:	4b2e      	ldr	r3, [pc, #184]	; (2d40 <drawRect+0x2b0>)
    2c88:	9301      	str	r3, [sp, #4]
    2c8a:	23c0      	movs	r3, #192	; 0xc0
    2c8c:	00db      	lsls	r3, r3, #3
    2c8e:	9300      	str	r3, [sp, #0]
    2c90:	231e      	movs	r3, #30
    2c92:	4c27      	ldr	r4, [pc, #156]	; (2d30 <drawRect+0x2a0>)
    2c94:	47a0      	blx	r4
    2c96:	e013      	b.n	2cc0 <drawRect+0x230>
		else	Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-75,30,OPT_CENTERX|OPT_CENTERY,"169");
    2c98:	4b15      	ldr	r3, [pc, #84]	; (2cf0 <drawRect+0x260>)
    2c9a:	6818      	ldr	r0, [r3, #0]
    2c9c:	68fb      	ldr	r3, [r7, #12]
    2c9e:	b29b      	uxth	r3, r3
    2ca0:	3324      	adds	r3, #36	; 0x24
    2ca2:	b29b      	uxth	r3, r3
    2ca4:	b219      	sxth	r1, r3
    2ca6:	68bb      	ldr	r3, [r7, #8]
    2ca8:	b29b      	uxth	r3, r3
    2caa:	3319      	adds	r3, #25
    2cac:	b29b      	uxth	r3, r3
    2cae:	b21a      	sxth	r2, r3
    2cb0:	4b24      	ldr	r3, [pc, #144]	; (2d44 <drawRect+0x2b4>)
    2cb2:	9301      	str	r3, [sp, #4]
    2cb4:	23c0      	movs	r3, #192	; 0xc0
    2cb6:	00db      	lsls	r3, r3, #3
    2cb8:	9300      	str	r3, [sp, #0]
    2cba:	231e      	movs	r3, #30
    2cbc:	4c1c      	ldr	r4, [pc, #112]	; (2d30 <drawRect+0x2a0>)
    2cbe:	47a0      	blx	r4
	}
	Ft_Gpu_CoCmd_Text(phost,x+boxWid-60,y+boxHei/2,31,OPT_CENTERX|OPT_CENTERY," dB ");
    2cc0:	4b0b      	ldr	r3, [pc, #44]	; (2cf0 <drawRect+0x260>)
    2cc2:	6818      	ldr	r0, [r3, #0]
    2cc4:	68fb      	ldr	r3, [r7, #12]
    2cc6:	b29b      	uxth	r3, r3
    2cc8:	33f0      	adds	r3, #240	; 0xf0
    2cca:	b29b      	uxth	r3, r3
    2ccc:	b219      	sxth	r1, r3
    2cce:	68bb      	ldr	r3, [r7, #8]
    2cd0:	b29b      	uxth	r3, r3
    2cd2:	3332      	adds	r3, #50	; 0x32
    2cd4:	b29b      	uxth	r3, r3
    2cd6:	b21a      	sxth	r2, r3
    2cd8:	4b1b      	ldr	r3, [pc, #108]	; (2d48 <drawRect+0x2b8>)
    2cda:	9301      	str	r3, [sp, #4]
    2cdc:	23c0      	movs	r3, #192	; 0xc0
    2cde:	00db      	lsls	r3, r3, #3
    2ce0:	9300      	str	r3, [sp, #0]
    2ce2:	231f      	movs	r3, #31
    2ce4:	4c12      	ldr	r4, [pc, #72]	; (2d30 <drawRect+0x2a0>)
    2ce6:	47a0      	blx	r4
}//end drawRect
    2ce8:	46c0      	nop			; (mov r8, r8)
    2cea:	46bd      	mov	sp, r7
    2cec:	b005      	add	sp, #20
    2cee:	bd90      	pop	{r4, r7, pc}
    2cf0:	20000470 	.word	0x20000470
    2cf4:	1f000009 	.word	0x1f000009
    2cf8:	0000267d 	.word	0x0000267d
    2cfc:	0e0000a0 	.word	0x0e0000a0
    2d00:	10000032 	.word	0x10000032
    2d04:	04ffffff 	.word	0x04ffffff
    2d08:	3ff80000 	.word	0x3ff80000
    2d0c:	00007ff0 	.word	0x00007ff0
    2d10:	1f000003 	.word	0x1f000003
    2d14:	0e000020 	.word	0x0e000020
    2d18:	10000064 	.word	0x10000064
    2d1c:	100000ff 	.word	0x100000ff
    2d20:	00005eb5 	.word	0x00005eb5
    2d24:	9999999a 	.word	0x9999999a
    2d28:	40039999 	.word	0x40039999
    2d2c:	0000635c 	.word	0x0000635c
    2d30:	00001fa5 	.word	0x00001fa5
    2d34:	00006360 	.word	0x00006360
    2d38:	00006368 	.word	0x00006368
    2d3c:	408c9800 	.word	0x408c9800
    2d40:	0000636c 	.word	0x0000636c
    2d44:	00006370 	.word	0x00006370
    2d48:	00006374 	.word	0x00006374

00002d4c <drawRssi>:
/* Function Name    : drawRssi
 * Parameters       : void
 * Return Values(s) : void
 * Description      : draw rssi background
 */
void drawRssi(){
    2d4c:	b590      	push	{r4, r7, lr}
    2d4e:	b083      	sub	sp, #12
    2d50:	af02      	add	r7, sp, #8
	//draw lines in table style
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(LINES));
    2d52:	4b5c      	ldr	r3, [pc, #368]	; (2ec4 <drawRssi+0x178>)
    2d54:	681b      	ldr	r3, [r3, #0]
    2d56:	4a5c      	ldr	r2, [pc, #368]	; (2ec8 <drawRssi+0x17c>)
    2d58:	0011      	movs	r1, r2
    2d5a:	0018      	movs	r0, r3
    2d5c:	4b5b      	ldr	r3, [pc, #364]	; (2ecc <drawRssi+0x180>)
    2d5e:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(2 * 16));
    2d60:	4b58      	ldr	r3, [pc, #352]	; (2ec4 <drawRssi+0x178>)
    2d62:	681b      	ldr	r3, [r3, #0]
    2d64:	4a5a      	ldr	r2, [pc, #360]	; (2ed0 <drawRssi+0x184>)
    2d66:	0011      	movs	r1, r2
    2d68:	0018      	movs	r0, r3
    2d6a:	4b58      	ldr	r3, [pc, #352]	; (2ecc <drawRssi+0x180>)
    2d6c:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(150));
    2d6e:	4b55      	ldr	r3, [pc, #340]	; (2ec4 <drawRssi+0x178>)
    2d70:	681b      	ldr	r3, [r3, #0]
    2d72:	4a58      	ldr	r2, [pc, #352]	; (2ed4 <drawRssi+0x188>)
    2d74:	0011      	movs	r1, r2
    2d76:	0018      	movs	r0, r3
    2d78:	4b54      	ldr	r3, [pc, #336]	; (2ecc <drawRssi+0x180>)
    2d7a:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(50 * 16, 150 * 16) );
    2d7c:	4b51      	ldr	r3, [pc, #324]	; (2ec4 <drawRssi+0x178>)
    2d7e:	681b      	ldr	r3, [r3, #0]
    2d80:	4a55      	ldr	r2, [pc, #340]	; (2ed8 <drawRssi+0x18c>)
    2d82:	0011      	movs	r1, r2
    2d84:	0018      	movs	r0, r3
    2d86:	4b51      	ldr	r3, [pc, #324]	; (2ecc <drawRssi+0x180>)
    2d88:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(750 * 16, 150 * 16) );
    2d8a:	4b4e      	ldr	r3, [pc, #312]	; (2ec4 <drawRssi+0x178>)
    2d8c:	681b      	ldr	r3, [r3, #0]
    2d8e:	4a53      	ldr	r2, [pc, #332]	; (2edc <drawRssi+0x190>)
    2d90:	0011      	movs	r1, r2
    2d92:	0018      	movs	r0, r3
    2d94:	4b4d      	ldr	r3, [pc, #308]	; (2ecc <drawRssi+0x180>)
    2d96:	4798      	blx	r3
		
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(50 * 16, 250 * 16) );
    2d98:	4b4a      	ldr	r3, [pc, #296]	; (2ec4 <drawRssi+0x178>)
    2d9a:	681b      	ldr	r3, [r3, #0]
    2d9c:	4a50      	ldr	r2, [pc, #320]	; (2ee0 <drawRssi+0x194>)
    2d9e:	0011      	movs	r1, r2
    2da0:	0018      	movs	r0, r3
    2da2:	4b4a      	ldr	r3, [pc, #296]	; (2ecc <drawRssi+0x180>)
    2da4:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(750 * 16, 250 * 16) );
    2da6:	4b47      	ldr	r3, [pc, #284]	; (2ec4 <drawRssi+0x178>)
    2da8:	681b      	ldr	r3, [r3, #0]
    2daa:	4a4e      	ldr	r2, [pc, #312]	; (2ee4 <drawRssi+0x198>)
    2dac:	0011      	movs	r1, r2
    2dae:	0018      	movs	r0, r3
    2db0:	4b46      	ldr	r3, [pc, #280]	; (2ecc <drawRssi+0x180>)
    2db2:	4798      	blx	r3
		
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(50 * 16, 350 * 16) );
    2db4:	4b43      	ldr	r3, [pc, #268]	; (2ec4 <drawRssi+0x178>)
    2db6:	681b      	ldr	r3, [r3, #0]
    2db8:	4a4b      	ldr	r2, [pc, #300]	; (2ee8 <drawRssi+0x19c>)
    2dba:	0011      	movs	r1, r2
    2dbc:	0018      	movs	r0, r3
    2dbe:	4b43      	ldr	r3, [pc, #268]	; (2ecc <drawRssi+0x180>)
    2dc0:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(750 * 16, 350 * 16) );
    2dc2:	4b40      	ldr	r3, [pc, #256]	; (2ec4 <drawRssi+0x178>)
    2dc4:	681b      	ldr	r3, [r3, #0]
    2dc6:	4a49      	ldr	r2, [pc, #292]	; (2eec <drawRssi+0x1a0>)
    2dc8:	0011      	movs	r1, r2
    2dca:	0018      	movs	r0, r3
    2dcc:	4b3f      	ldr	r3, [pc, #252]	; (2ecc <drawRssi+0x180>)
    2dce:	4798      	blx	r3
		
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(525 * 16, 75 * 16) );
    2dd0:	4b3c      	ldr	r3, [pc, #240]	; (2ec4 <drawRssi+0x178>)
    2dd2:	681b      	ldr	r3, [r3, #0]
    2dd4:	4a46      	ldr	r2, [pc, #280]	; (2ef0 <drawRssi+0x1a4>)
    2dd6:	0011      	movs	r1, r2
    2dd8:	0018      	movs	r0, r3
    2dda:	4b3c      	ldr	r3, [pc, #240]	; (2ecc <drawRssi+0x180>)
    2ddc:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(525 * 16, 425 * 16) );
    2dde:	4b39      	ldr	r3, [pc, #228]	; (2ec4 <drawRssi+0x178>)
    2de0:	681b      	ldr	r3, [r3, #0]
    2de2:	4a44      	ldr	r2, [pc, #272]	; (2ef4 <drawRssi+0x1a8>)
    2de4:	0011      	movs	r1, r2
    2de6:	0018      	movs	r0, r3
    2de8:	4b38      	ldr	r3, [pc, #224]	; (2ecc <drawRssi+0x180>)
    2dea:	4798      	blx	r3
		
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(275 * 16, 75 * 16) );
    2dec:	4b35      	ldr	r3, [pc, #212]	; (2ec4 <drawRssi+0x178>)
    2dee:	681b      	ldr	r3, [r3, #0]
    2df0:	4a41      	ldr	r2, [pc, #260]	; (2ef8 <drawRssi+0x1ac>)
    2df2:	0011      	movs	r1, r2
    2df4:	0018      	movs	r0, r3
    2df6:	4b35      	ldr	r3, [pc, #212]	; (2ecc <drawRssi+0x180>)
    2df8:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(275 * 16, 425 * 16) );
    2dfa:	4b32      	ldr	r3, [pc, #200]	; (2ec4 <drawRssi+0x178>)
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	4a3f      	ldr	r2, [pc, #252]	; (2efc <drawRssi+0x1b0>)
    2e00:	0011      	movs	r1, r2
    2e02:	0018      	movs	r0, r3
    2e04:	4b31      	ldr	r3, [pc, #196]	; (2ecc <drawRssi+0x180>)
    2e06:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, END());
    2e08:	4b2e      	ldr	r3, [pc, #184]	; (2ec4 <drawRssi+0x178>)
    2e0a:	681a      	ldr	r2, [r3, #0]
    2e0c:	2384      	movs	r3, #132	; 0x84
    2e0e:	059b      	lsls	r3, r3, #22
    2e10:	0019      	movs	r1, r3
    2e12:	0010      	movs	r0, r2
    2e14:	4b2d      	ldr	r3, [pc, #180]	; (2ecc <drawRssi+0x180>)
    2e16:	4798      	blx	r3
	
	//put label into the "table"
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    2e18:	4b2a      	ldr	r3, [pc, #168]	; (2ec4 <drawRssi+0x178>)
    2e1a:	681b      	ldr	r3, [r3, #0]
    2e1c:	4a38      	ldr	r2, [pc, #224]	; (2f00 <drawRssi+0x1b4>)
    2e1e:	0011      	movs	r1, r2
    2e20:	0018      	movs	r0, r3
    2e22:	4b2a      	ldr	r3, [pc, #168]	; (2ecc <drawRssi+0x180>)
    2e24:	4798      	blx	r3
	Ft_Gpu_CoCmd_Text(phost, 150, 100, 30, OPT_CENTER,"Unit");
    2e26:	4b27      	ldr	r3, [pc, #156]	; (2ec4 <drawRssi+0x178>)
    2e28:	6818      	ldr	r0, [r3, #0]
    2e2a:	4b36      	ldr	r3, [pc, #216]	; (2f04 <drawRssi+0x1b8>)
    2e2c:	9301      	str	r3, [sp, #4]
    2e2e:	23c0      	movs	r3, #192	; 0xc0
    2e30:	00db      	lsls	r3, r3, #3
    2e32:	9300      	str	r3, [sp, #0]
    2e34:	231e      	movs	r3, #30
    2e36:	2264      	movs	r2, #100	; 0x64
    2e38:	2196      	movs	r1, #150	; 0x96
    2e3a:	4c33      	ldr	r4, [pc, #204]	; (2f08 <drawRssi+0x1bc>)
    2e3c:	47a0      	blx	r4
	Ft_Gpu_CoCmd_Text(phost, 150, 200, 30, OPT_CENTER,"169 MHz");
    2e3e:	4b21      	ldr	r3, [pc, #132]	; (2ec4 <drawRssi+0x178>)
    2e40:	6818      	ldr	r0, [r3, #0]
    2e42:	4b32      	ldr	r3, [pc, #200]	; (2f0c <drawRssi+0x1c0>)
    2e44:	9301      	str	r3, [sp, #4]
    2e46:	23c0      	movs	r3, #192	; 0xc0
    2e48:	00db      	lsls	r3, r3, #3
    2e4a:	9300      	str	r3, [sp, #0]
    2e4c:	231e      	movs	r3, #30
    2e4e:	22c8      	movs	r2, #200	; 0xc8
    2e50:	2196      	movs	r1, #150	; 0x96
    2e52:	4c2d      	ldr	r4, [pc, #180]	; (2f08 <drawRssi+0x1bc>)
    2e54:	47a0      	blx	r4
	Ft_Gpu_CoCmd_Text(phost, 150, 300, 30, OPT_CENTER,"915 MHz");
    2e56:	4b1b      	ldr	r3, [pc, #108]	; (2ec4 <drawRssi+0x178>)
    2e58:	6818      	ldr	r0, [r3, #0]
    2e5a:	2396      	movs	r3, #150	; 0x96
    2e5c:	005a      	lsls	r2, r3, #1
    2e5e:	4b2c      	ldr	r3, [pc, #176]	; (2f10 <drawRssi+0x1c4>)
    2e60:	9301      	str	r3, [sp, #4]
    2e62:	23c0      	movs	r3, #192	; 0xc0
    2e64:	00db      	lsls	r3, r3, #3
    2e66:	9300      	str	r3, [sp, #0]
    2e68:	231e      	movs	r3, #30
    2e6a:	2196      	movs	r1, #150	; 0x96
    2e6c:	4c26      	ldr	r4, [pc, #152]	; (2f08 <drawRssi+0x1bc>)
    2e6e:	47a0      	blx	r4
	Ft_Gpu_CoCmd_Text(phost, 150, 400, 30, OPT_CENTER,"2.45 GHz");
    2e70:	4b14      	ldr	r3, [pc, #80]	; (2ec4 <drawRssi+0x178>)
    2e72:	6818      	ldr	r0, [r3, #0]
    2e74:	23c8      	movs	r3, #200	; 0xc8
    2e76:	005a      	lsls	r2, r3, #1
    2e78:	4b26      	ldr	r3, [pc, #152]	; (2f14 <drawRssi+0x1c8>)
    2e7a:	9301      	str	r3, [sp, #4]
    2e7c:	23c0      	movs	r3, #192	; 0xc0
    2e7e:	00db      	lsls	r3, r3, #3
    2e80:	9300      	str	r3, [sp, #0]
    2e82:	231e      	movs	r3, #30
    2e84:	2196      	movs	r1, #150	; 0x96
    2e86:	4c20      	ldr	r4, [pc, #128]	; (2f08 <drawRssi+0x1bc>)
    2e88:	47a0      	blx	r4
	Ft_Gpu_CoCmd_Text(phost, 400, 100, 30, OPT_CENTER,"Display");
    2e8a:	4b0e      	ldr	r3, [pc, #56]	; (2ec4 <drawRssi+0x178>)
    2e8c:	6818      	ldr	r0, [r3, #0]
    2e8e:	23c8      	movs	r3, #200	; 0xc8
    2e90:	0059      	lsls	r1, r3, #1
    2e92:	4b21      	ldr	r3, [pc, #132]	; (2f18 <drawRssi+0x1cc>)
    2e94:	9301      	str	r3, [sp, #4]
    2e96:	23c0      	movs	r3, #192	; 0xc0
    2e98:	00db      	lsls	r3, r3, #3
    2e9a:	9300      	str	r3, [sp, #0]
    2e9c:	231e      	movs	r3, #30
    2e9e:	2264      	movs	r2, #100	; 0x64
    2ea0:	4c19      	ldr	r4, [pc, #100]	; (2f08 <drawRssi+0x1bc>)
    2ea2:	47a0      	blx	r4
	Ft_Gpu_CoCmd_Text(phost, 650, 100, 30, OPT_CENTER," Receiver ");
    2ea4:	4b07      	ldr	r3, [pc, #28]	; (2ec4 <drawRssi+0x178>)
    2ea6:	6818      	ldr	r0, [r3, #0]
    2ea8:	491c      	ldr	r1, [pc, #112]	; (2f1c <drawRssi+0x1d0>)
    2eaa:	4b1d      	ldr	r3, [pc, #116]	; (2f20 <drawRssi+0x1d4>)
    2eac:	9301      	str	r3, [sp, #4]
    2eae:	23c0      	movs	r3, #192	; 0xc0
    2eb0:	00db      	lsls	r3, r3, #3
    2eb2:	9300      	str	r3, [sp, #0]
    2eb4:	231e      	movs	r3, #30
    2eb6:	2264      	movs	r2, #100	; 0x64
    2eb8:	4c13      	ldr	r4, [pc, #76]	; (2f08 <drawRssi+0x1bc>)
    2eba:	47a0      	blx	r4
}//end drawRssi
    2ebc:	46c0      	nop			; (mov r8, r8)
    2ebe:	46bd      	mov	sp, r7
    2ec0:	b001      	add	sp, #4
    2ec2:	bd90      	pop	{r4, r7, pc}
    2ec4:	20000470 	.word	0x20000470
    2ec8:	1f000003 	.word	0x1f000003
    2ecc:	0000267d 	.word	0x0000267d
    2ed0:	0e000020 	.word	0x0e000020
    2ed4:	10000096 	.word	0x10000096
    2ed8:	41900960 	.word	0x41900960
    2edc:	57700960 	.word	0x57700960
    2ee0:	41900fa0 	.word	0x41900fa0
    2ee4:	57700fa0 	.word	0x57700fa0
    2ee8:	419015e0 	.word	0x419015e0
    2eec:	577015e0 	.word	0x577015e0
    2ef0:	506804b0 	.word	0x506804b0
    2ef4:	50681a90 	.word	0x50681a90
    2ef8:	489804b0 	.word	0x489804b0
    2efc:	48981a90 	.word	0x48981a90
    2f00:	100000ff 	.word	0x100000ff
    2f04:	000063a4 	.word	0x000063a4
    2f08:	00001fa5 	.word	0x00001fa5
    2f0c:	000063ac 	.word	0x000063ac
    2f10:	000063b4 	.word	0x000063b4
    2f14:	000063bc 	.word	0x000063bc
    2f18:	000063c8 	.word	0x000063c8
    2f1c:	0000028a 	.word	0x0000028a
    2f20:	000063d0 	.word	0x000063d0

00002f24 <drawHist>:
/* Function Name       : drawHist
 * Parameters       : void
 * Return Values(s) : void
 * Description      : draw history background
 */
void drawHist(){
    2f24:	b590      	push	{r4, r7, lr}
    2f26:	b083      	sub	sp, #12
    2f28:	af02      	add	r7, sp, #8
	//put label to the background
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    2f2a:	4b1e      	ldr	r3, [pc, #120]	; (2fa4 <drawHist+0x80>)
    2f2c:	681b      	ldr	r3, [r3, #0]
    2f2e:	4a1e      	ldr	r2, [pc, #120]	; (2fa8 <drawHist+0x84>)
    2f30:	0011      	movs	r1, r2
    2f32:	0018      	movs	r0, r3
    2f34:	4b1d      	ldr	r3, [pc, #116]	; (2fac <drawHist+0x88>)
    2f36:	4798      	blx	r3
	Ft_Gpu_CoCmd_Text(phost, 100, 110, 28, OPT_CENTER," Date and Time ");
    2f38:	4b1a      	ldr	r3, [pc, #104]	; (2fa4 <drawHist+0x80>)
    2f3a:	6818      	ldr	r0, [r3, #0]
    2f3c:	4b1c      	ldr	r3, [pc, #112]	; (2fb0 <drawHist+0x8c>)
    2f3e:	9301      	str	r3, [sp, #4]
    2f40:	23c0      	movs	r3, #192	; 0xc0
    2f42:	00db      	lsls	r3, r3, #3
    2f44:	9300      	str	r3, [sp, #0]
    2f46:	231c      	movs	r3, #28
    2f48:	226e      	movs	r2, #110	; 0x6e
    2f4a:	2164      	movs	r1, #100	; 0x64
    2f4c:	4c19      	ldr	r4, [pc, #100]	; (2fb4 <drawHist+0x90>)
    2f4e:	47a0      	blx	r4
	Ft_Gpu_CoCmd_Text(phost, 100, 400, 28, OPT_CENTER," 169 MHz ");
    2f50:	4b14      	ldr	r3, [pc, #80]	; (2fa4 <drawHist+0x80>)
    2f52:	6818      	ldr	r0, [r3, #0]
    2f54:	23c8      	movs	r3, #200	; 0xc8
    2f56:	005a      	lsls	r2, r3, #1
    2f58:	4b17      	ldr	r3, [pc, #92]	; (2fb8 <drawHist+0x94>)
    2f5a:	9301      	str	r3, [sp, #4]
    2f5c:	23c0      	movs	r3, #192	; 0xc0
    2f5e:	00db      	lsls	r3, r3, #3
    2f60:	9300      	str	r3, [sp, #0]
    2f62:	231c      	movs	r3, #28
    2f64:	2164      	movs	r1, #100	; 0x64
    2f66:	4c13      	ldr	r4, [pc, #76]	; (2fb4 <drawHist+0x90>)
    2f68:	47a0      	blx	r4
	Ft_Gpu_CoCmd_Text(phost, 100, 550, 28, OPT_CENTER," 915 MHz ");
    2f6a:	4b0e      	ldr	r3, [pc, #56]	; (2fa4 <drawHist+0x80>)
    2f6c:	6818      	ldr	r0, [r3, #0]
    2f6e:	4a13      	ldr	r2, [pc, #76]	; (2fbc <drawHist+0x98>)
    2f70:	4b13      	ldr	r3, [pc, #76]	; (2fc0 <drawHist+0x9c>)
    2f72:	9301      	str	r3, [sp, #4]
    2f74:	23c0      	movs	r3, #192	; 0xc0
    2f76:	00db      	lsls	r3, r3, #3
    2f78:	9300      	str	r3, [sp, #0]
    2f7a:	231c      	movs	r3, #28
    2f7c:	2164      	movs	r1, #100	; 0x64
    2f7e:	4c0d      	ldr	r4, [pc, #52]	; (2fb4 <drawHist+0x90>)
    2f80:	47a0      	blx	r4
	Ft_Gpu_CoCmd_Text(phost, 100, 700, 28, OPT_CENTER," 2.45 GHz ");
    2f82:	4b08      	ldr	r3, [pc, #32]	; (2fa4 <drawHist+0x80>)
    2f84:	6818      	ldr	r0, [r3, #0]
    2f86:	23af      	movs	r3, #175	; 0xaf
    2f88:	009a      	lsls	r2, r3, #2
    2f8a:	4b0e      	ldr	r3, [pc, #56]	; (2fc4 <drawHist+0xa0>)
    2f8c:	9301      	str	r3, [sp, #4]
    2f8e:	23c0      	movs	r3, #192	; 0xc0
    2f90:	00db      	lsls	r3, r3, #3
    2f92:	9300      	str	r3, [sp, #0]
    2f94:	231c      	movs	r3, #28
    2f96:	2164      	movs	r1, #100	; 0x64
    2f98:	4c06      	ldr	r4, [pc, #24]	; (2fb4 <drawHist+0x90>)
    2f9a:	47a0      	blx	r4
}//end drawHist
    2f9c:	46c0      	nop			; (mov r8, r8)
    2f9e:	46bd      	mov	sp, r7
    2fa0:	b001      	add	sp, #4
    2fa2:	bd90      	pop	{r4, r7, pc}
    2fa4:	20000470 	.word	0x20000470
    2fa8:	100000ff 	.word	0x100000ff
    2fac:	0000267d 	.word	0x0000267d
    2fb0:	000063dc 	.word	0x000063dc
    2fb4:	00001fa5 	.word	0x00001fa5
    2fb8:	000063ec 	.word	0x000063ec
    2fbc:	00000226 	.word	0x00000226
    2fc0:	000063f8 	.word	0x000063f8
    2fc4:	00006404 	.word	0x00006404

00002fc8 <disStart>:
/* Function Name    : disStart
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display start sequence
 */
void disStart(){
    2fc8:	b580      	push	{r7, lr}
    2fca:	af00      	add	r7, sp, #0
	Ft_Gpu_CoCmd_Dlstart(phost);
    2fcc:	4b0b      	ldr	r3, [pc, #44]	; (2ffc <disStart+0x34>)
    2fce:	681b      	ldr	r3, [r3, #0]
    2fd0:	0018      	movs	r0, r3
    2fd2:	4b0b      	ldr	r3, [pc, #44]	; (3000 <disStart+0x38>)
    2fd4:	4798      	blx	r3
    //change this for initial bg
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    2fd6:	4b09      	ldr	r3, [pc, #36]	; (2ffc <disStart+0x34>)
    2fd8:	681a      	ldr	r2, [r3, #0]
    2fda:	2380      	movs	r3, #128	; 0x80
    2fdc:	049b      	lsls	r3, r3, #18
    2fde:	0019      	movs	r1, r3
    2fe0:	0010      	movs	r0, r2
    2fe2:	4b08      	ldr	r3, [pc, #32]	; (3004 <disStart+0x3c>)
    2fe4:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(1,1,1));
    2fe6:	4b05      	ldr	r3, [pc, #20]	; (2ffc <disStart+0x34>)
    2fe8:	681b      	ldr	r3, [r3, #0]
    2fea:	4a07      	ldr	r2, [pc, #28]	; (3008 <disStart+0x40>)
    2fec:	0011      	movs	r1, r2
    2fee:	0018      	movs	r0, r3
    2ff0:	4b04      	ldr	r3, [pc, #16]	; (3004 <disStart+0x3c>)
    2ff2:	4798      	blx	r3
}//end disStart
    2ff4:	46c0      	nop			; (mov r8, r8)
    2ff6:	46bd      	mov	sp, r7
    2ff8:	bd80      	pop	{r7, pc}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	20000470 	.word	0x20000470
    3000:	000020b9 	.word	0x000020b9
    3004:	0000267d 	.word	0x0000267d
    3008:	26000007 	.word	0x26000007

0000300c <disEnd>:
/* Function Name    : disEnd
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display end sequence
 */
void disEnd(){
    300c:	b580      	push	{r7, lr}
    300e:	af00      	add	r7, sp, #0
	Ft_Gpu_Hal_WrCmd32(phost,DISPLAY());
    3010:	4b09      	ldr	r3, [pc, #36]	; (3038 <disEnd+0x2c>)
    3012:	681b      	ldr	r3, [r3, #0]
    3014:	2100      	movs	r1, #0
    3016:	0018      	movs	r0, r3
    3018:	4b08      	ldr	r3, [pc, #32]	; (303c <disEnd+0x30>)
    301a:	4798      	blx	r3
	Ft_Gpu_CoCmd_Swap(phost);
    301c:	4b06      	ldr	r3, [pc, #24]	; (3038 <disEnd+0x2c>)
    301e:	681b      	ldr	r3, [r3, #0]
    3020:	0018      	movs	r0, r3
    3022:	4b07      	ldr	r3, [pc, #28]	; (3040 <disEnd+0x34>)
    3024:	4798      	blx	r3
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    3026:	4b04      	ldr	r3, [pc, #16]	; (3038 <disEnd+0x2c>)
    3028:	681b      	ldr	r3, [r3, #0]
    302a:	0018      	movs	r0, r3
    302c:	4b05      	ldr	r3, [pc, #20]	; (3044 <disEnd+0x38>)
    302e:	4798      	blx	r3
}//end disEnd
    3030:	46c0      	nop			; (mov r8, r8)
    3032:	46bd      	mov	sp, r7
    3034:	bd80      	pop	{r7, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	20000470 	.word	0x20000470
    303c:	0000267d 	.word	0x0000267d
    3040:	00002079 	.word	0x00002079
    3044:	00002629 	.word	0x00002629

00003048 <configure_ext_ints>:
/* Function Name    : configure_ext_ints
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt
	*/
void configure_ext_ints(void){
    3048:	b580      	push	{r7, lr}
    304a:	b084      	sub	sp, #16
    304c:	af00      	add	r7, sp, #0
	// struct for external interrupt config
	struct extint_chan_conf ext_int_config;
	    
	// configure the external interrupt
	ext_int_config.gpio_pin            = LCD_INT;
    304e:	1d3b      	adds	r3, r7, #4
    3050:	2209      	movs	r2, #9
    3052:	601a      	str	r2, [r3, #0]
	ext_int_config.gpio_pin_mux        = LCD_INT_PINMUX;
    3054:	1d3b      	adds	r3, r7, #4
    3056:	2209      	movs	r2, #9
    3058:	605a      	str	r2, [r3, #4]
	ext_int_config.gpio_pin_pull       = LCD_INT_PULL;
    305a:	1d3b      	adds	r3, r7, #4
    305c:	2200      	movs	r2, #0
    305e:	721a      	strb	r2, [r3, #8]
	ext_int_config.wake_if_sleeping    = true;
    3060:	1d3b      	adds	r3, r7, #4
    3062:	2201      	movs	r2, #1
    3064:	725a      	strb	r2, [r3, #9]
	ext_int_config.filter_input_signal = false;
    3066:	1d3b      	adds	r3, r7, #4
    3068:	2200      	movs	r2, #0
    306a:	729a      	strb	r2, [r3, #10]
	ext_int_config.detection_criteria  = LCD_INT_DETECT;
    306c:	1d3b      	adds	r3, r7, #4
    306e:	2205      	movs	r2, #5
    3070:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(LCD_INT_LINE, &ext_int_config);
    3072:	1d3b      	adds	r3, r7, #4
    3074:	0019      	movs	r1, r3
    3076:	2009      	movs	r0, #9
    3078:	4b02      	ldr	r3, [pc, #8]	; (3084 <configure_ext_ints+0x3c>)
    307a:	4798      	blx	r3
}//end configure_ext_ints
    307c:	46c0      	nop			; (mov r8, r8)
    307e:	46bd      	mov	sp, r7
    3080:	b004      	add	sp, #16
    3082:	bd80      	pop	{r7, pc}
    3084:	00000551 	.word	0x00000551

00003088 <configure_ext_int_callback>:
/* Function Name    : configure_ext_int_callback
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt callback
	*/
void configure_ext_int_callback(void){
    3088:	b580      	push	{r7, lr}
    308a:	af00      	add	r7, sp, #0
	// register callback for the LCD's interrupt
	extint_register_callback(lcd_interrupt_callback, LCD_INT_LINE, \
    308c:	4b04      	ldr	r3, [pc, #16]	; (30a0 <configure_ext_int_callback+0x18>)
    308e:	2205      	movs	r2, #5
    3090:	2109      	movs	r1, #9
    3092:	0018      	movs	r0, r3
    3094:	4b03      	ldr	r3, [pc, #12]	; (30a4 <configure_ext_int_callback+0x1c>)
    3096:	4798      	blx	r3
	    LCD_INT_DETECT);
}//end configure_ext_int_callback
    3098:	46c0      	nop			; (mov r8, r8)
    309a:	46bd      	mov	sp, r7
    309c:	bd80      	pop	{r7, pc}
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	00003af5 	.word	0x00003af5
    30a4:	000001e1 	.word	0x000001e1

000030a8 <configure_rtc_calendar>:
/* Function Name    : configure_rtc_calendar
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config the rtc and set time to 00:00:00 01/01/2000
	*/
void configure_rtc_calendar(void){
    30a8:	b580      	push	{r7, lr}
    30aa:	b086      	sub	sp, #24
    30ac:	af00      	add	r7, sp, #0
	//initial time
	time.year   = 2017;
    30ae:	4b19      	ldr	r3, [pc, #100]	; (3114 <configure_rtc_calendar+0x6c>)
    30b0:	4a19      	ldr	r2, [pc, #100]	; (3118 <configure_rtc_calendar+0x70>)
    30b2:	80da      	strh	r2, [r3, #6]
	time.month  = 12;
    30b4:	4b17      	ldr	r3, [pc, #92]	; (3114 <configure_rtc_calendar+0x6c>)
    30b6:	220c      	movs	r2, #12
    30b8:	715a      	strb	r2, [r3, #5]
	time.day    = 31;
    30ba:	4b16      	ldr	r3, [pc, #88]	; (3114 <configure_rtc_calendar+0x6c>)
    30bc:	221f      	movs	r2, #31
    30be:	711a      	strb	r2, [r3, #4]
	time.hour   = 23;
    30c0:	4b14      	ldr	r3, [pc, #80]	; (3114 <configure_rtc_calendar+0x6c>)
    30c2:	2217      	movs	r2, #23
    30c4:	709a      	strb	r2, [r3, #2]
	time.minute = 59;
    30c6:	4b13      	ldr	r3, [pc, #76]	; (3114 <configure_rtc_calendar+0x6c>)
    30c8:	223b      	movs	r2, #59	; 0x3b
    30ca:	705a      	strb	r2, [r3, #1]
	time.second = 55;
    30cc:	4b11      	ldr	r3, [pc, #68]	; (3114 <configure_rtc_calendar+0x6c>)
    30ce:	2237      	movs	r2, #55	; 0x37
    30d0:	701a      	strb	r2, [r3, #0]
		
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    30d2:	1d3b      	adds	r3, r7, #4
    30d4:	0018      	movs	r0, r3
    30d6:	4b11      	ldr	r3, [pc, #68]	; (311c <configure_rtc_calendar+0x74>)
    30d8:	4798      	blx	r3
	config_rtc_calendar.clock_24h     = true;
    30da:	1d3b      	adds	r3, r7, #4
    30dc:	2201      	movs	r2, #1
    30de:	711a      	strb	r2, [r3, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    30e0:	1d3a      	adds	r2, r7, #4
    30e2:	490f      	ldr	r1, [pc, #60]	; (3120 <configure_rtc_calendar+0x78>)
    30e4:	4b0f      	ldr	r3, [pc, #60]	; (3124 <configure_rtc_calendar+0x7c>)
    30e6:	0018      	movs	r0, r3
    30e8:	4b0f      	ldr	r3, [pc, #60]	; (3128 <configure_rtc_calendar+0x80>)
    30ea:	4798      	blx	r3
		
	rtc_calendar_set_time(&rtc_instance, &time);
    30ec:	4a09      	ldr	r2, [pc, #36]	; (3114 <configure_rtc_calendar+0x6c>)
    30ee:	4b0d      	ldr	r3, [pc, #52]	; (3124 <configure_rtc_calendar+0x7c>)
    30f0:	0011      	movs	r1, r2
    30f2:	0018      	movs	r0, r3
    30f4:	4b0d      	ldr	r3, [pc, #52]	; (312c <configure_rtc_calendar+0x84>)
    30f6:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    30f8:	4b0a      	ldr	r3, [pc, #40]	; (3124 <configure_rtc_calendar+0x7c>)
    30fa:	0018      	movs	r0, r3
    30fc:	4b0c      	ldr	r3, [pc, #48]	; (3130 <configure_rtc_calendar+0x88>)
    30fe:	4798      	blx	r3
	// adjust the frequency (the clock is slow atm)
	rtc_calendar_frequency_correction(&rtc_instance, 127);
    3100:	4b08      	ldr	r3, [pc, #32]	; (3124 <configure_rtc_calendar+0x7c>)
    3102:	217f      	movs	r1, #127	; 0x7f
    3104:	0018      	movs	r0, r3
    3106:	4b0b      	ldr	r3, [pc, #44]	; (3134 <configure_rtc_calendar+0x8c>)
    3108:	4798      	blx	r3
}//end configure_rtc_calendar
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	46bd      	mov	sp, r7
    310e:	b006      	add	sp, #24
    3110:	bd80      	pop	{r7, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	20000468 	.word	0x20000468
    3118:	000007e1 	.word	0x000007e1
    311c:	00002735 	.word	0x00002735
    3120:	40001400 	.word	0x40001400
    3124:	20000150 	.word	0x20000150
    3128:	000008f9 	.word	0x000008f9
    312c:	0000098d 	.word	0x0000098d
    3130:	000006e9 	.word	0x000006e9
    3134:	00000a45 	.word	0x00000a45

00003138 <clock_osc32k_init>:
/* Function Name    : clock_osc32k_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config internal oscillator 32 kHz
	*/
void clock_osc32k_init(void){
    3138:	b580      	push	{r7, lr}
    313a:	b082      	sub	sp, #8
    313c:	af00      	add	r7, sp, #0
	struct system_clock_source_osc32k_config osc32_config;
	system_clock_source_osc32k_get_config_defaults(&osc32_config);
    313e:	003b      	movs	r3, r7
    3140:	0018      	movs	r0, r3
    3142:	4b0e      	ldr	r3, [pc, #56]	; (317c <clock_osc32k_init+0x44>)
    3144:	4798      	blx	r3
		
	osc32_config.enable_1khz_output		= true;
    3146:	003b      	movs	r3, r7
    3148:	2201      	movs	r2, #1
    314a:	705a      	strb	r2, [r3, #1]
	osc32_config.enable_32khz_output	= true;
    314c:	003b      	movs	r3, r7
    314e:	2201      	movs	r2, #1
    3150:	709a      	strb	r2, [r3, #2]
	osc32_config.on_demand				= true;
    3152:	003b      	movs	r3, r7
    3154:	2201      	movs	r2, #1
    3156:	711a      	strb	r2, [r3, #4]
	osc32_config.run_in_standby			= false;
    3158:	003b      	movs	r3, r7
    315a:	2200      	movs	r2, #0
    315c:	70da      	strb	r2, [r3, #3]
	osc32_config.startup_time			= SYSTEM_OSC32K_STARTUP_130;
    315e:	003b      	movs	r3, r7
    3160:	2207      	movs	r2, #7
    3162:	701a      	strb	r2, [r3, #0]
	osc32_config.write_once				= false;
    3164:	003b      	movs	r3, r7
    3166:	2200      	movs	r2, #0
    3168:	715a      	strb	r2, [r3, #5]
	
	system_clock_source_osc32k_set_config(&osc32_config);
    316a:	003b      	movs	r3, r7
    316c:	0018      	movs	r0, r3
    316e:	4b04      	ldr	r3, [pc, #16]	; (3180 <clock_osc32k_init+0x48>)
    3170:	4798      	blx	r3
}//end clock_osc32k_init
    3172:	46c0      	nop			; (mov r8, r8)
    3174:	46bd      	mov	sp, r7
    3176:	b002      	add	sp, #8
    3178:	bd80      	pop	{r7, pc}
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	000026c5 	.word	0x000026c5
    3180:	00004e71 	.word	0x00004e71

00003184 <clock_gclk2_init>:
/* Function Name    : clock_gclk2_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : turn on glck using internal 32 kHz oscillator
	*/
void clock_gclk2_init(void){
    3184:	b580      	push	{r7, lr}
    3186:	b084      	sub	sp, #16
    3188:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk2_config;
		
	system_gclk_init();
    318a:	4b0e      	ldr	r3, [pc, #56]	; (31c4 <clock_gclk2_init+0x40>)
    318c:	4798      	blx	r3
		
	gclk2_config.source_clock			= SYSTEM_CLOCK_SOURCE_OSC32K;
    318e:	1d3b      	adds	r3, r7, #4
    3190:	2204      	movs	r2, #4
    3192:	701a      	strb	r2, [r3, #0]
	gclk2_config.output_enable			= false;
    3194:	1d3b      	adds	r3, r7, #4
    3196:	2200      	movs	r2, #0
    3198:	725a      	strb	r2, [r3, #9]
	gclk2_config.high_when_disabled		= false;
    319a:	1d3b      	adds	r3, r7, #4
    319c:	2200      	movs	r2, #0
    319e:	705a      	strb	r2, [r3, #1]
	gclk2_config.division_factor		= 32;
    31a0:	1d3b      	adds	r3, r7, #4
    31a2:	2220      	movs	r2, #32
    31a4:	605a      	str	r2, [r3, #4]
	gclk2_config.run_in_standby			= false;
    31a6:	1d3b      	adds	r3, r7, #4
    31a8:	2200      	movs	r2, #0
    31aa:	721a      	strb	r2, [r3, #8]
		
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclk2_config);
    31ac:	1d3b      	adds	r3, r7, #4
    31ae:	0019      	movs	r1, r3
    31b0:	2002      	movs	r0, #2
    31b2:	4b05      	ldr	r3, [pc, #20]	; (31c8 <clock_gclk2_init+0x44>)
    31b4:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    31b6:	2002      	movs	r0, #2
    31b8:	4b04      	ldr	r3, [pc, #16]	; (31cc <clock_gclk2_init+0x48>)
    31ba:	4798      	blx	r3
}//end clock_gclk2_init
    31bc:	46c0      	nop			; (mov r8, r8)
    31be:	46bd      	mov	sp, r7
    31c0:	b004      	add	sp, #16
    31c2:	bd80      	pop	{r7, pc}
    31c4:	00005249 	.word	0x00005249
    31c8:	00005279 	.word	0x00005279
    31cc:	0000539d 	.word	0x0000539d

000031d0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    31d0:	b580      	push	{r7, lr}
    31d2:	b084      	sub	sp, #16
    31d4:	af00      	add	r7, sp, #0
    31d6:	0002      	movs	r2, r0
    31d8:	1dfb      	adds	r3, r7, #7
    31da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    31dc:	230f      	movs	r3, #15
    31de:	18fb      	adds	r3, r7, r3
    31e0:	1dfa      	adds	r2, r7, #7
    31e2:	7812      	ldrb	r2, [r2, #0]
    31e4:	09d2      	lsrs	r2, r2, #7
    31e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    31e8:	230e      	movs	r3, #14
    31ea:	18fb      	adds	r3, r7, r3
    31ec:	1dfa      	adds	r2, r7, #7
    31ee:	7812      	ldrb	r2, [r2, #0]
    31f0:	0952      	lsrs	r2, r2, #5
    31f2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    31f4:	4b0d      	ldr	r3, [pc, #52]	; (322c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    31f6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    31f8:	230f      	movs	r3, #15
    31fa:	18fb      	adds	r3, r7, r3
    31fc:	781b      	ldrb	r3, [r3, #0]
    31fe:	2b00      	cmp	r3, #0
    3200:	d10f      	bne.n	3222 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3202:	230f      	movs	r3, #15
    3204:	18fb      	adds	r3, r7, r3
    3206:	781b      	ldrb	r3, [r3, #0]
    3208:	009b      	lsls	r3, r3, #2
    320a:	2210      	movs	r2, #16
    320c:	4694      	mov	ip, r2
    320e:	44bc      	add	ip, r7
    3210:	4463      	add	r3, ip
    3212:	3b08      	subs	r3, #8
    3214:	681a      	ldr	r2, [r3, #0]
    3216:	230e      	movs	r3, #14
    3218:	18fb      	adds	r3, r7, r3
    321a:	781b      	ldrb	r3, [r3, #0]
    321c:	01db      	lsls	r3, r3, #7
    321e:	18d3      	adds	r3, r2, r3
    3220:	e000      	b.n	3224 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3222:	2300      	movs	r3, #0
	}
}
    3224:	0018      	movs	r0, r3
    3226:	46bd      	mov	sp, r7
    3228:	b004      	add	sp, #16
    322a:	bd80      	pop	{r7, pc}
    322c:	41004400 	.word	0x41004400

00003230 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3230:	b580      	push	{r7, lr}
    3232:	b082      	sub	sp, #8
    3234:	af00      	add	r7, sp, #0
    3236:	0002      	movs	r2, r0
    3238:	1dfb      	adds	r3, r7, #7
    323a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    323c:	1dfb      	adds	r3, r7, #7
    323e:	781b      	ldrb	r3, [r3, #0]
    3240:	0018      	movs	r0, r3
    3242:	4b03      	ldr	r3, [pc, #12]	; (3250 <port_get_group_from_gpio_pin+0x20>)
    3244:	4798      	blx	r3
    3246:	0003      	movs	r3, r0
}
    3248:	0018      	movs	r0, r3
    324a:	46bd      	mov	sp, r7
    324c:	b002      	add	sp, #8
    324e:	bd80      	pop	{r7, pc}
    3250:	000031d1 	.word	0x000031d1

00003254 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3254:	b580      	push	{r7, lr}
    3256:	b082      	sub	sp, #8
    3258:	af00      	add	r7, sp, #0
    325a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	2200      	movs	r2, #0
    3260:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	2201      	movs	r2, #1
    3266:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	2200      	movs	r2, #0
    326c:	709a      	strb	r2, [r3, #2]
}
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	46bd      	mov	sp, r7
    3272:	b002      	add	sp, #8
    3274:	bd80      	pop	{r7, pc}
	...

00003278 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3278:	b580      	push	{r7, lr}
    327a:	b084      	sub	sp, #16
    327c:	af00      	add	r7, sp, #0
    327e:	0002      	movs	r2, r0
    3280:	1dfb      	adds	r3, r7, #7
    3282:	701a      	strb	r2, [r3, #0]
    3284:	1dbb      	adds	r3, r7, #6
    3286:	1c0a      	adds	r2, r1, #0
    3288:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    328a:	1dfb      	adds	r3, r7, #7
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	0018      	movs	r0, r3
    3290:	4b0d      	ldr	r3, [pc, #52]	; (32c8 <port_pin_set_output_level+0x50>)
    3292:	4798      	blx	r3
    3294:	0003      	movs	r3, r0
    3296:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3298:	1dfb      	adds	r3, r7, #7
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	221f      	movs	r2, #31
    329e:	4013      	ands	r3, r2
    32a0:	2201      	movs	r2, #1
    32a2:	409a      	lsls	r2, r3
    32a4:	0013      	movs	r3, r2
    32a6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    32a8:	1dbb      	adds	r3, r7, #6
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d003      	beq.n	32b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    32b0:	68fb      	ldr	r3, [r7, #12]
    32b2:	68ba      	ldr	r2, [r7, #8]
    32b4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    32b6:	e002      	b.n	32be <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    32b8:	68fb      	ldr	r3, [r7, #12]
    32ba:	68ba      	ldr	r2, [r7, #8]
    32bc:	615a      	str	r2, [r3, #20]
}
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	46bd      	mov	sp, r7
    32c2:	b004      	add	sp, #16
    32c4:	bd80      	pop	{r7, pc}
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	00003231 	.word	0x00003231

000032cc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	b084      	sub	sp, #16
    32d0:	af00      	add	r7, sp, #0
    32d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	681b      	ldr	r3, [r3, #0]
    32d8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    32da:	68fb      	ldr	r3, [r7, #12]
    32dc:	69db      	ldr	r3, [r3, #28]
    32de:	1e5a      	subs	r2, r3, #1
    32e0:	4193      	sbcs	r3, r2
    32e2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    32e4:	0018      	movs	r0, r3
    32e6:	46bd      	mov	sp, r7
    32e8:	b004      	add	sp, #16
    32ea:	bd80      	pop	{r7, pc}

000032ec <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    32ec:	b580      	push	{r7, lr}
    32ee:	b082      	sub	sp, #8
    32f0:	af00      	add	r7, sp, #0
    32f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    32f4:	687b      	ldr	r3, [r7, #4]
    32f6:	2201      	movs	r2, #1
    32f8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    32fa:	687b      	ldr	r3, [r7, #4]
    32fc:	2200      	movs	r2, #0
    32fe:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3300:	687b      	ldr	r3, [r7, #4]
    3302:	2200      	movs	r2, #0
    3304:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_E;
    3306:	687b      	ldr	r3, [r7, #4]
    3308:	2280      	movs	r2, #128	; 0x80
    330a:	0252      	lsls	r2, r2, #9
    330c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	2200      	movs	r2, #0
    3312:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	2200      	movs	r2, #0
    3318:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	2201      	movs	r2, #1
    331e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	2201      	movs	r2, #1
    3324:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	2200      	movs	r2, #0
    332a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	2224      	movs	r2, #36	; 0x24
    3330:	2100      	movs	r1, #0
    3332:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	3318      	adds	r3, #24
    3338:	220c      	movs	r2, #12
    333a:	2100      	movs	r1, #0
    333c:	0018      	movs	r0, r3
    333e:	4b0a      	ldr	r3, [pc, #40]	; (3368 <spi_get_config_defaults+0x7c>)
    3340:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    3342:	687b      	ldr	r3, [r7, #4]
    3344:	4a09      	ldr	r2, [pc, #36]	; (336c <spi_get_config_defaults+0x80>)
    3346:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    3348:	687b      	ldr	r3, [r7, #4]
    334a:	2200      	movs	r2, #0
    334c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	2200      	movs	r2, #0
    3352:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	2200      	movs	r2, #0
    3358:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	2200      	movs	r2, #0
    335e:	635a      	str	r2, [r3, #52]	; 0x34

};
    3360:	46c0      	nop			; (mov r8, r8)
    3362:	46bd      	mov	sp, r7
    3364:	b002      	add	sp, #8
    3366:	bd80      	pop	{r7, pc}
    3368:	000061bf 	.word	0x000061bf
    336c:	000186a0 	.word	0x000186a0

00003370 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    3370:	b580      	push	{r7, lr}
    3372:	b082      	sub	sp, #8
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 47;
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	222f      	movs	r2, #47	; 0x2f
    337c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    337e:	687b      	ldr	r3, [r7, #4]
    3380:	2200      	movs	r2, #0
    3382:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    3384:	687b      	ldr	r3, [r7, #4]
    3386:	2200      	movs	r2, #0
    3388:	709a      	strb	r2, [r3, #2]
}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	46bd      	mov	sp, r7
    338e:	b002      	add	sp, #8
    3390:	bd80      	pop	{r7, pc}
	...

00003394 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    3394:	b580      	push	{r7, lr}
    3396:	b084      	sub	sp, #16
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
    339c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    339e:	683b      	ldr	r3, [r7, #0]
    33a0:	781a      	ldrb	r2, [r3, #0]
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    33a6:	683b      	ldr	r3, [r7, #0]
    33a8:	785a      	ldrb	r2, [r3, #1]
    33aa:	687b      	ldr	r3, [r7, #4]
    33ac:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    33ae:	683b      	ldr	r3, [r7, #0]
    33b0:	789a      	ldrb	r2, [r3, #2]
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    33b6:	230c      	movs	r3, #12
    33b8:	18fb      	adds	r3, r7, r3
    33ba:	0018      	movs	r0, r3
    33bc:	4b0b      	ldr	r3, [pc, #44]	; (33ec <spi_attach_slave+0x58>)
    33be:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    33c0:	230c      	movs	r3, #12
    33c2:	18fb      	adds	r3, r7, r3
    33c4:	2201      	movs	r2, #1
    33c6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    33c8:	687b      	ldr	r3, [r7, #4]
    33ca:	781b      	ldrb	r3, [r3, #0]
    33cc:	220c      	movs	r2, #12
    33ce:	18ba      	adds	r2, r7, r2
    33d0:	0011      	movs	r1, r2
    33d2:	0018      	movs	r0, r3
    33d4:	4b06      	ldr	r3, [pc, #24]	; (33f0 <spi_attach_slave+0x5c>)
    33d6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	781b      	ldrb	r3, [r3, #0]
    33dc:	2101      	movs	r1, #1
    33de:	0018      	movs	r0, r3
    33e0:	4b04      	ldr	r3, [pc, #16]	; (33f4 <spi_attach_slave+0x60>)
    33e2:	4798      	blx	r3
}
    33e4:	46c0      	nop			; (mov r8, r8)
    33e6:	46bd      	mov	sp, r7
    33e8:	b004      	add	sp, #16
    33ea:	bd80      	pop	{r7, pc}
    33ec:	00003255 	.word	0x00003255
    33f0:	00004ab1 	.word	0x00004ab1
    33f4:	00003279 	.word	0x00003279

000033f8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    33f8:	b580      	push	{r7, lr}
    33fa:	b084      	sub	sp, #16
    33fc:	af00      	add	r7, sp, #0
    33fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3400:	687b      	ldr	r3, [r7, #4]
    3402:	681b      	ldr	r3, [r3, #0]
    3404:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	687b      	ldr	r3, [r7, #4]
    340a:	0018      	movs	r0, r3
    340c:	4b06      	ldr	r3, [pc, #24]	; (3428 <spi_enable+0x30>)
    340e:	4798      	blx	r3
    3410:	1e03      	subs	r3, r0, #0
    3412:	d1f9      	bne.n	3408 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3414:	68fb      	ldr	r3, [r7, #12]
    3416:	681b      	ldr	r3, [r3, #0]
    3418:	2202      	movs	r2, #2
    341a:	431a      	orrs	r2, r3
    341c:	68fb      	ldr	r3, [r7, #12]
    341e:	601a      	str	r2, [r3, #0]
}
    3420:	46c0      	nop			; (mov r8, r8)
    3422:	46bd      	mov	sp, r7
    3424:	b004      	add	sp, #16
    3426:	bd80      	pop	{r7, pc}
    3428:	000032cd 	.word	0x000032cd

0000342c <lcd_spi_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for communicating with the LCD
 */
void lcd_spi_init(void)
{
    342c:	b580      	push	{r7, lr}
    342e:	b090      	sub	sp, #64	; 0x40
    3430:	af00      	add	r7, sp, #0
    if(lcd_init_complete == true)
    3432:	4b24      	ldr	r3, [pc, #144]	; (34c4 <lcd_spi_init+0x98>)
    3434:	781b      	ldrb	r3, [r3, #0]
    3436:	2b00      	cmp	r3, #0
    3438:	d13f      	bne.n	34ba <lcd_spi_init+0x8e>
    struct spi_slave_inst_config lcd_init_slave_config;
    // initialize card detect pin
    struct port_config pin_conf;

    // get default configs for slave
    spi_slave_inst_get_config_defaults(&lcd_init_slave_config);
    343a:	1d3b      	adds	r3, r7, #4
    343c:	0018      	movs	r0, r3
    343e:	4b22      	ldr	r3, [pc, #136]	; (34c8 <lcd_spi_init+0x9c>)
    3440:	4798      	blx	r3
    // change configs as necessary
    lcd_init_slave_config.ss_pin = LCD_CS;
    3442:	1d3b      	adds	r3, r7, #4
    3444:	222d      	movs	r2, #45	; 0x2d
    3446:	701a      	strb	r2, [r3, #0]
    // attach the slave configs to the slave
    spi_attach_slave(&lcd_slave, &lcd_init_slave_config);
    3448:	1d3a      	adds	r2, r7, #4
    344a:	4b20      	ldr	r3, [pc, #128]	; (34cc <lcd_spi_init+0xa0>)
    344c:	0011      	movs	r1, r2
    344e:	0018      	movs	r0, r3
    3450:	4b1f      	ldr	r3, [pc, #124]	; (34d0 <lcd_spi_init+0xa4>)
    3452:	4798      	blx	r3
    //port_get_config_defaults(&pin_conf); commented out because 
    
	
	
    // get defaults for lcd master config
    spi_get_config_defaults(&lcd_init_master_config);
    3454:	2308      	movs	r3, #8
    3456:	18fb      	adds	r3, r7, r3
    3458:	0018      	movs	r0, r3
    345a:	4b1e      	ldr	r3, [pc, #120]	; (34d4 <lcd_spi_init+0xa8>)
    345c:	4798      	blx	r3

    lcd_init_master_config.mux_setting = LCD_PINMUX_SETTING;
    345e:	2308      	movs	r3, #8
    3460:	18fb      	adds	r3, r7, r3
    3462:	2280      	movs	r2, #128	; 0x80
    3464:	0252      	lsls	r2, r2, #9
    3466:	60da      	str	r2, [r3, #12]
    lcd_init_master_config.pinmux_pad0 = LCD_MISO_PAD;
    3468:	2308      	movs	r3, #8
    346a:	18fb      	adds	r3, r7, r3
    346c:	4a1a      	ldr	r2, [pc, #104]	; (34d8 <lcd_spi_init+0xac>)
    346e:	629a      	str	r2, [r3, #40]	; 0x28
    lcd_init_master_config.pinmux_pad1 = LCD_UNUSED; 
    3470:	2308      	movs	r3, #8
    3472:	18fb      	adds	r3, r7, r3
    3474:	2201      	movs	r2, #1
    3476:	4252      	negs	r2, r2
    3478:	62da      	str	r2, [r3, #44]	; 0x2c
    lcd_init_master_config.pinmux_pad2 = LCD_MOSI_PAD;
    347a:	2308      	movs	r3, #8
    347c:	18fb      	adds	r3, r7, r3
    347e:	4a17      	ldr	r2, [pc, #92]	; (34dc <lcd_spi_init+0xb0>)
    3480:	631a      	str	r2, [r3, #48]	; 0x30
    lcd_init_master_config.pinmux_pad3 = LCD_SCK_PAD;
    3482:	2308      	movs	r3, #8
    3484:	18fb      	adds	r3, r7, r3
    3486:	4a16      	ldr	r2, [pc, #88]	; (34e0 <lcd_spi_init+0xb4>)
    3488:	635a      	str	r2, [r3, #52]	; 0x34
    
	
	
    //clock source should always be GLCK0
	lcd_init_master_config.generator_source = LCD_SPI_SOURCE_CLOCK;
    348a:	2308      	movs	r3, #8
    348c:	18fb      	adds	r3, r7, r3
    348e:	2224      	movs	r2, #36	; 0x24
    3490:	2100      	movs	r1, #0
    3492:	5499      	strb	r1, [r3, r2]
	lcd_init_master_config.mode_specific.master.baudrate = LCD_SPI_MAX_CLOCK;
    3494:	2308      	movs	r3, #8
    3496:	18fb      	adds	r3, r7, r3
    3498:	4a12      	ldr	r2, [pc, #72]	; (34e4 <lcd_spi_init+0xb8>)
    349a:	619a      	str	r2, [r3, #24]
    
	// enable the master
    spi_init(&lcd_master, LCD_SPI, &lcd_init_master_config);
    349c:	2308      	movs	r3, #8
    349e:	18fa      	adds	r2, r7, r3
    34a0:	4911      	ldr	r1, [pc, #68]	; (34e8 <lcd_spi_init+0xbc>)
    34a2:	4b12      	ldr	r3, [pc, #72]	; (34ec <lcd_spi_init+0xc0>)
    34a4:	0018      	movs	r0, r3
    34a6:	4b12      	ldr	r3, [pc, #72]	; (34f0 <lcd_spi_init+0xc4>)
    34a8:	4798      	blx	r3
    spi_enable(&lcd_master);
    34aa:	4b10      	ldr	r3, [pc, #64]	; (34ec <lcd_spi_init+0xc0>)
    34ac:	0018      	movs	r0, r3
    34ae:	4b11      	ldr	r3, [pc, #68]	; (34f4 <lcd_spi_init+0xc8>)
    34b0:	4798      	blx	r3
	

    
    lcd_init_complete = true;
    34b2:	4b04      	ldr	r3, [pc, #16]	; (34c4 <lcd_spi_init+0x98>)
    34b4:	2201      	movs	r2, #1
    34b6:	701a      	strb	r2, [r3, #0]
    34b8:	e000      	b.n	34bc <lcd_spi_init+0x90>
        return;
    34ba:	46c0      	nop			; (mov r8, r8)
}
    34bc:	46bd      	mov	sp, r7
    34be:	b010      	add	sp, #64	; 0x40
    34c0:	bd80      	pop	{r7, pc}
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	200000c8 	.word	0x200000c8
    34c8:	00003371 	.word	0x00003371
    34cc:	2000069c 	.word	0x2000069c
    34d0:	00003395 	.word	0x00003395
    34d4:	000032ed 	.word	0x000032ed
    34d8:	002c0002 	.word	0x002c0002
    34dc:	002e0002 	.word	0x002e0002
    34e0:	002f0002 	.word	0x002f0002
    34e4:	000f4240 	.word	0x000f4240
    34e8:	42001800 	.word	0x42001800
    34ec:	200006a0 	.word	0x200006a0
    34f0:	00004315 	.word	0x00004315
    34f4:	000033f9 	.word	0x000033f9

000034f8 <lcd_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Starts the SPI transfer by selecting the slave (pulling 
 *  CS low) and sending LCD address. For use in the FT library.
 */
status_code_genare_t lcd_start_xfer(LCD_ADDRESS param_addr, LCD_XFER_DIR dir)
{
    34f8:	b590      	push	{r4, r7, lr}
    34fa:	b085      	sub	sp, #20
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    3500:	000a      	movs	r2, r1
    3502:	1cfb      	adds	r3, r7, #3
    3504:	701a      	strb	r2, [r3, #0]
        uint8_t preamble[4];
    } lcd_xfer_preamble;
    
    status_code_genare_t read_status;
    
    if(dir == READ)
    3506:	1cfb      	adds	r3, r7, #3
    3508:	781b      	ldrb	r3, [r3, #0]
    350a:	2b00      	cmp	r3, #0
    350c:	d105      	bne.n	351a <lcd_start_xfer+0x22>
        // LCD read address should only be 22 bits
        lcd_xfer_preamble.addr = (0x3FFFFF & param_addr) << 8;
    350e:	687b      	ldr	r3, [r7, #4]
    3510:	021b      	lsls	r3, r3, #8
    3512:	4a43      	ldr	r2, [pc, #268]	; (3620 <lcd_start_xfer+0x128>)
    3514:	4013      	ands	r3, r2
    3516:	60bb      	str	r3, [r7, #8]
    3518:	e00b      	b.n	3532 <lcd_start_xfer+0x3a>
    else if(dir == WRT)
    351a:	1cfb      	adds	r3, r7, #3
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	2b01      	cmp	r3, #1
    3520:	d107      	bne.n	3532 <lcd_start_xfer+0x3a>
        /* LCD read address should only be 22 bits. Also OR 0x800000 because the
         * host must send a 1-bit and then a 0-bit to indicate a write */
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	021b      	lsls	r3, r3, #8
    3526:	4a3e      	ldr	r2, [pc, #248]	; (3620 <lcd_start_xfer+0x128>)
    3528:	4013      	ands	r3, r2
    352a:	2280      	movs	r2, #128	; 0x80
    352c:	0612      	lsls	r2, r2, #24
    352e:	4313      	orrs	r3, r2
    3530:	60bb      	str	r3, [r7, #8]
    
    // preamble bytes need to be swapped so MSB is transmitted first
    XORSWAP(lcd_xfer_preamble.preamble[0], lcd_xfer_preamble.preamble[3]);
    3532:	2308      	movs	r3, #8
    3534:	18fb      	adds	r3, r7, r3
    3536:	781a      	ldrb	r2, [r3, #0]
    3538:	2308      	movs	r3, #8
    353a:	18fb      	adds	r3, r7, r3
    353c:	78db      	ldrb	r3, [r3, #3]
    353e:	4053      	eors	r3, r2
    3540:	b2da      	uxtb	r2, r3
    3542:	2308      	movs	r3, #8
    3544:	18fb      	adds	r3, r7, r3
    3546:	701a      	strb	r2, [r3, #0]
    3548:	2308      	movs	r3, #8
    354a:	18fb      	adds	r3, r7, r3
    354c:	78da      	ldrb	r2, [r3, #3]
    354e:	2308      	movs	r3, #8
    3550:	18fb      	adds	r3, r7, r3
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	4053      	eors	r3, r2
    3556:	b2da      	uxtb	r2, r3
    3558:	2308      	movs	r3, #8
    355a:	18fb      	adds	r3, r7, r3
    355c:	70da      	strb	r2, [r3, #3]
    355e:	2308      	movs	r3, #8
    3560:	18fb      	adds	r3, r7, r3
    3562:	781a      	ldrb	r2, [r3, #0]
    3564:	2308      	movs	r3, #8
    3566:	18fb      	adds	r3, r7, r3
    3568:	78db      	ldrb	r3, [r3, #3]
    356a:	4053      	eors	r3, r2
    356c:	b2da      	uxtb	r2, r3
    356e:	2308      	movs	r3, #8
    3570:	18fb      	adds	r3, r7, r3
    3572:	701a      	strb	r2, [r3, #0]
    XORSWAP(lcd_xfer_preamble.preamble[1], lcd_xfer_preamble.preamble[2]);
    3574:	2308      	movs	r3, #8
    3576:	18fb      	adds	r3, r7, r3
    3578:	785a      	ldrb	r2, [r3, #1]
    357a:	2308      	movs	r3, #8
    357c:	18fb      	adds	r3, r7, r3
    357e:	789b      	ldrb	r3, [r3, #2]
    3580:	4053      	eors	r3, r2
    3582:	b2da      	uxtb	r2, r3
    3584:	2308      	movs	r3, #8
    3586:	18fb      	adds	r3, r7, r3
    3588:	705a      	strb	r2, [r3, #1]
    358a:	2308      	movs	r3, #8
    358c:	18fb      	adds	r3, r7, r3
    358e:	789a      	ldrb	r2, [r3, #2]
    3590:	2308      	movs	r3, #8
    3592:	18fb      	adds	r3, r7, r3
    3594:	785b      	ldrb	r3, [r3, #1]
    3596:	4053      	eors	r3, r2
    3598:	b2da      	uxtb	r2, r3
    359a:	2308      	movs	r3, #8
    359c:	18fb      	adds	r3, r7, r3
    359e:	709a      	strb	r2, [r3, #2]
    35a0:	2308      	movs	r3, #8
    35a2:	18fb      	adds	r3, r7, r3
    35a4:	785a      	ldrb	r2, [r3, #1]
    35a6:	2308      	movs	r3, #8
    35a8:	18fb      	adds	r3, r7, r3
    35aa:	789b      	ldrb	r3, [r3, #2]
    35ac:	4053      	eors	r3, r2
    35ae:	b2da      	uxtb	r2, r3
    35b0:	2308      	movs	r3, #8
    35b2:	18fb      	adds	r3, r7, r3
    35b4:	705a      	strb	r2, [r3, #1]
    
    do{
        // select the slave
        read_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    35b6:	230f      	movs	r3, #15
    35b8:	18fc      	adds	r4, r7, r3
    35ba:	491a      	ldr	r1, [pc, #104]	; (3624 <lcd_start_xfer+0x12c>)
    35bc:	4b1a      	ldr	r3, [pc, #104]	; (3628 <lcd_start_xfer+0x130>)
    35be:	2201      	movs	r2, #1
    35c0:	0018      	movs	r0, r3
    35c2:	4b1a      	ldr	r3, [pc, #104]	; (362c <lcd_start_xfer+0x134>)
    35c4:	4798      	blx	r3
    35c6:	0003      	movs	r3, r0
    35c8:	7023      	strb	r3, [r4, #0]
    }while(read_status == STATUS_BUSY);
    35ca:	230f      	movs	r3, #15
    35cc:	18fb      	adds	r3, r7, r3
    35ce:	781b      	ldrb	r3, [r3, #0]
    35d0:	2b05      	cmp	r3, #5
    35d2:	d0f0      	beq.n	35b6 <lcd_start_xfer+0xbe>
    
    if(dir == READ)
    35d4:	1cfb      	adds	r3, r7, #3
    35d6:	781b      	ldrb	r3, [r3, #0]
    35d8:	2b00      	cmp	r3, #0
    35da:	d10b      	bne.n	35f4 <lcd_start_xfer+0xfc>
        // send preamble = two read bits, 22 bit address, and dummy byte
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    35dc:	230f      	movs	r3, #15
    35de:	18fc      	adds	r4, r7, r3
    35e0:	2308      	movs	r3, #8
    35e2:	18f9      	adds	r1, r7, r3
    35e4:	4b10      	ldr	r3, [pc, #64]	; (3628 <lcd_start_xfer+0x130>)
    35e6:	2204      	movs	r2, #4
    35e8:	0018      	movs	r0, r3
    35ea:	4b11      	ldr	r3, [pc, #68]	; (3630 <lcd_start_xfer+0x138>)
    35ec:	4798      	blx	r3
    35ee:	0003      	movs	r3, r0
    35f0:	7023      	strb	r3, [r4, #0]
    35f2:	e00e      	b.n	3612 <lcd_start_xfer+0x11a>
    else if(dir == WRT)
    35f4:	1cfb      	adds	r3, r7, #3
    35f6:	781b      	ldrb	r3, [r3, #0]
    35f8:	2b01      	cmp	r3, #1
    35fa:	d10a      	bne.n	3612 <lcd_start_xfer+0x11a>
        // send preamble = two wrt bits and 22 bit address
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    35fc:	230f      	movs	r3, #15
    35fe:	18fc      	adds	r4, r7, r3
    3600:	2308      	movs	r3, #8
    3602:	18f9      	adds	r1, r7, r3
    3604:	4b08      	ldr	r3, [pc, #32]	; (3628 <lcd_start_xfer+0x130>)
    3606:	2203      	movs	r2, #3
    3608:	0018      	movs	r0, r3
    360a:	4b09      	ldr	r3, [pc, #36]	; (3630 <lcd_start_xfer+0x138>)
    360c:	4798      	blx	r3
    360e:	0003      	movs	r3, r0
    3610:	7023      	strb	r3, [r4, #0]
    
    return read_status;
    3612:	230f      	movs	r3, #15
    3614:	18fb      	adds	r3, r7, r3
    3616:	781b      	ldrb	r3, [r3, #0]
}
    3618:	0018      	movs	r0, r3
    361a:	46bd      	mov	sp, r7
    361c:	b005      	add	sp, #20
    361e:	bd90      	pop	{r4, r7, pc}
    3620:	3fffff00 	.word	0x3fffff00
    3624:	2000069c 	.word	0x2000069c
    3628:	200006a0 	.word	0x200006a0
    362c:	000045c9 	.word	0x000045c9
    3630:	000046b9 	.word	0x000046b9

00003634 <lcd_stop_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Stops the SPI transfer by deselecting the slave (letting 
 *  CS float high). For use in the FT library.
 */
status_code_genare_t lcd_stop_xfer(void)
{
    3634:	b580      	push	{r7, lr}
    3636:	af00      	add	r7, sp, #0
    // deselect slave
    return spi_select_slave(&lcd_master, &lcd_slave, false);
    3638:	4904      	ldr	r1, [pc, #16]	; (364c <lcd_stop_xfer+0x18>)
    363a:	4b05      	ldr	r3, [pc, #20]	; (3650 <lcd_stop_xfer+0x1c>)
    363c:	2200      	movs	r2, #0
    363e:	0018      	movs	r0, r3
    3640:	4b04      	ldr	r3, [pc, #16]	; (3654 <lcd_stop_xfer+0x20>)
    3642:	4798      	blx	r3
    3644:	0003      	movs	r3, r0
}
    3646:	0018      	movs	r0, r3
    3648:	46bd      	mov	sp, r7
    364a:	bd80      	pop	{r7, pc}
    364c:	2000069c 	.word	0x2000069c
    3650:	200006a0 	.word	0x200006a0
    3654:	000045c9 	.word	0x000045c9

00003658 <lcd_host_read>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 15.
 */
status_code_genare_t lcd_host_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
    3658:	b5b0      	push	{r4, r5, r7, lr}
    365a:	b084      	sub	sp, #16
    365c:	af00      	add	r7, sp, #0
    365e:	6078      	str	r0, [r7, #4]
    3660:	000a      	movs	r2, r1
    3662:	1cbb      	adds	r3, r7, #2
    3664:	801a      	strh	r2, [r3, #0]
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&lcd_master, \
    3666:	230f      	movs	r3, #15
    3668:	18fc      	adds	r4, r7, r3
    366a:	1cbb      	adds	r3, r7, #2
    366c:	881a      	ldrh	r2, [r3, #0]
    366e:	6879      	ldr	r1, [r7, #4]
    3670:	4806      	ldr	r0, [pc, #24]	; (368c <lcd_host_read+0x34>)
    3672:	2300      	movs	r3, #0
    3674:	4d06      	ldr	r5, [pc, #24]	; (3690 <lcd_host_read+0x38>)
    3676:	47a8      	blx	r5
    3678:	0003      	movs	r3, r0
    367a:	7023      	strb	r3, [r4, #0]
                        read_buff, amount_bytes, 0x0000);
    
    return read_status;
    367c:	230f      	movs	r3, #15
    367e:	18fb      	adds	r3, r7, r3
    3680:	781b      	ldrb	r3, [r3, #0]
}
    3682:	0018      	movs	r0, r3
    3684:	46bd      	mov	sp, r7
    3686:	b004      	add	sp, #16
    3688:	bdb0      	pop	{r4, r5, r7, pc}
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	200006a0 	.word	0x200006a0
    3690:	0000441d 	.word	0x0000441d

00003694 <lcd_rd8>:
 * Return Values(s) : uint8_t
 * Description      : Reads a 8-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint8_t lcd_rd8(LCD_ADDRESS read_addr)
{
    3694:	b580      	push	{r7, lr}
    3696:	b084      	sub	sp, #16
    3698:	af00      	add	r7, sp, #0
    369a:	6078      	str	r0, [r7, #4]
    uint8_t read_byte = 0;
    369c:	230f      	movs	r3, #15
    369e:	18fb      	adds	r3, r7, r3
    36a0:	2200      	movs	r2, #0
    36a2:	701a      	strb	r2, [r3, #0]
    
    lcd_start_xfer(read_addr, READ);
    36a4:	687b      	ldr	r3, [r7, #4]
    36a6:	2100      	movs	r1, #0
    36a8:	0018      	movs	r0, r3
    36aa:	4b08      	ldr	r3, [pc, #32]	; (36cc <lcd_rd8+0x38>)
    36ac:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    lcd_host_read(&read_byte, 1);
    36ae:	230f      	movs	r3, #15
    36b0:	18fb      	adds	r3, r7, r3
    36b2:	2101      	movs	r1, #1
    36b4:	0018      	movs	r0, r3
    36b6:	4b06      	ldr	r3, [pc, #24]	; (36d0 <lcd_rd8+0x3c>)
    36b8:	4798      	blx	r3
    
    lcd_stop_xfer();
    36ba:	4b06      	ldr	r3, [pc, #24]	; (36d4 <lcd_rd8+0x40>)
    36bc:	4798      	blx	r3
    
    return read_byte; 
    36be:	230f      	movs	r3, #15
    36c0:	18fb      	adds	r3, r7, r3
    36c2:	781b      	ldrb	r3, [r3, #0]
}
    36c4:	0018      	movs	r0, r3
    36c6:	46bd      	mov	sp, r7
    36c8:	b004      	add	sp, #16
    36ca:	bd80      	pop	{r7, pc}
    36cc:	000034f9 	.word	0x000034f9
    36d0:	00003659 	.word	0x00003659
    36d4:	00003635 	.word	0x00003635

000036d8 <lcd_rd16>:
 * Return Values(s) : uint16_t
 * Description      : Reads a 16-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint16_t lcd_rd16(LCD_ADDRESS read_addr)
{
    36d8:	b580      	push	{r7, lr}
    36da:	b084      	sub	sp, #16
    36dc:	af00      	add	r7, sp, #0
    36de:	6078      	str	r0, [r7, #4]
    uint16_t read_word = 0;
    36e0:	230e      	movs	r3, #14
    36e2:	18fb      	adds	r3, r7, r3
    36e4:	2200      	movs	r2, #0
    36e6:	801a      	strh	r2, [r3, #0]
    
    lcd_start_xfer(read_addr, READ);
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	2100      	movs	r1, #0
    36ec:	0018      	movs	r0, r3
    36ee:	4b08      	ldr	r3, [pc, #32]	; (3710 <lcd_rd16+0x38>)
    36f0:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    lcd_host_read((uint8_t*) &read_word, 2);
    36f2:	230e      	movs	r3, #14
    36f4:	18fb      	adds	r3, r7, r3
    36f6:	2102      	movs	r1, #2
    36f8:	0018      	movs	r0, r3
    36fa:	4b06      	ldr	r3, [pc, #24]	; (3714 <lcd_rd16+0x3c>)
    36fc:	4798      	blx	r3
    
    lcd_stop_xfer();
    36fe:	4b06      	ldr	r3, [pc, #24]	; (3718 <lcd_rd16+0x40>)
    3700:	4798      	blx	r3
    
    return read_word;
    3702:	230e      	movs	r3, #14
    3704:	18fb      	adds	r3, r7, r3
    3706:	881b      	ldrh	r3, [r3, #0]
}    
    3708:	0018      	movs	r0, r3
    370a:	46bd      	mov	sp, r7
    370c:	b004      	add	sp, #16
    370e:	bd80      	pop	{r7, pc}
    3710:	000034f9 	.word	0x000034f9
    3714:	00003659 	.word	0x00003659
    3718:	00003635 	.word	0x00003635

0000371c <lcd_host_write>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 16.
 */
status_code_genare_t lcd_host_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
    371c:	b590      	push	{r4, r7, lr}
    371e:	b085      	sub	sp, #20
    3720:	af00      	add	r7, sp, #0
    3722:	6078      	str	r0, [r7, #4]
    3724:	000a      	movs	r2, r1
    3726:	1cbb      	adds	r3, r7, #2
    3728:	801a      	strh	r2, [r3, #0]
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&lcd_master, \
    372a:	230f      	movs	r3, #15
    372c:	18fc      	adds	r4, r7, r3
    372e:	1cbb      	adds	r3, r7, #2
    3730:	881a      	ldrh	r2, [r3, #0]
    3732:	6879      	ldr	r1, [r7, #4]
    3734:	4b06      	ldr	r3, [pc, #24]	; (3750 <lcd_host_write+0x34>)
    3736:	0018      	movs	r0, r3
    3738:	4b06      	ldr	r3, [pc, #24]	; (3754 <lcd_host_write+0x38>)
    373a:	4798      	blx	r3
    373c:	0003      	movs	r3, r0
    373e:	7023      	strb	r3, [r4, #0]
                        wrt_buff, amount_bytes);
    
    return wrt_status;
    3740:	230f      	movs	r3, #15
    3742:	18fb      	adds	r3, r7, r3
    3744:	781b      	ldrb	r3, [r3, #0]
    
}
    3746:	0018      	movs	r0, r3
    3748:	46bd      	mov	sp, r7
    374a:	b005      	add	sp, #20
    374c:	bd90      	pop	{r4, r7, pc}
    374e:	46c0      	nop			; (mov r8, r8)
    3750:	200006a0 	.word	0x200006a0
    3754:	000046b9 	.word	0x000046b9

00003758 <lcd_wr8>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 8-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr8(LCD_ADDRESS wrt_addr, uint8_t wrt_byte)
{
    3758:	b590      	push	{r4, r7, lr}
    375a:	b085      	sub	sp, #20
    375c:	af00      	add	r7, sp, #0
    375e:	6078      	str	r0, [r7, #4]
    3760:	000a      	movs	r2, r1
    3762:	1cfb      	adds	r3, r7, #3
    3764:	701a      	strb	r2, [r3, #0]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);    
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	2101      	movs	r1, #1
    376a:	0018      	movs	r0, r3
    376c:	4b09      	ldr	r3, [pc, #36]	; (3794 <lcd_wr8+0x3c>)
    376e:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = lcd_host_write(&wrt_byte, 1);
    3770:	230f      	movs	r3, #15
    3772:	18fc      	adds	r4, r7, r3
    3774:	1cfb      	adds	r3, r7, #3
    3776:	2101      	movs	r1, #1
    3778:	0018      	movs	r0, r3
    377a:	4b07      	ldr	r3, [pc, #28]	; (3798 <lcd_wr8+0x40>)
    377c:	4798      	blx	r3
    377e:	0003      	movs	r3, r0
    3780:	7023      	strb	r3, [r4, #0]
    
    lcd_stop_xfer();
    3782:	4b06      	ldr	r3, [pc, #24]	; (379c <lcd_wr8+0x44>)
    3784:	4798      	blx	r3
    
    return status_result;
    3786:	230f      	movs	r3, #15
    3788:	18fb      	adds	r3, r7, r3
    378a:	781b      	ldrb	r3, [r3, #0]
}
    378c:	0018      	movs	r0, r3
    378e:	46bd      	mov	sp, r7
    3790:	b005      	add	sp, #20
    3792:	bd90      	pop	{r4, r7, pc}
    3794:	000034f9 	.word	0x000034f9
    3798:	0000371d 	.word	0x0000371d
    379c:	00003635 	.word	0x00003635

000037a0 <lcd_wr16>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 16-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr16(LCD_ADDRESS wrt_addr, uint16_t wrt_word)
{
    37a0:	b590      	push	{r4, r7, lr}
    37a2:	b085      	sub	sp, #20
    37a4:	af00      	add	r7, sp, #0
    37a6:	6078      	str	r0, [r7, #4]
    37a8:	000a      	movs	r2, r1
    37aa:	1cbb      	adds	r3, r7, #2
    37ac:	801a      	strh	r2, [r3, #0]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	2101      	movs	r1, #1
    37b2:	0018      	movs	r0, r3
    37b4:	4b09      	ldr	r3, [pc, #36]	; (37dc <lcd_wr16+0x3c>)
    37b6:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    status_result = lcd_host_write((uint8_t*) &wrt_word, 2);
    37b8:	230f      	movs	r3, #15
    37ba:	18fc      	adds	r4, r7, r3
    37bc:	1cbb      	adds	r3, r7, #2
    37be:	2102      	movs	r1, #2
    37c0:	0018      	movs	r0, r3
    37c2:	4b07      	ldr	r3, [pc, #28]	; (37e0 <lcd_wr16+0x40>)
    37c4:	4798      	blx	r3
    37c6:	0003      	movs	r3, r0
    37c8:	7023      	strb	r3, [r4, #0]
    
    lcd_stop_xfer();
    37ca:	4b06      	ldr	r3, [pc, #24]	; (37e4 <lcd_wr16+0x44>)
    37cc:	4798      	blx	r3
    
    return status_result;
    37ce:	230f      	movs	r3, #15
    37d0:	18fb      	adds	r3, r7, r3
    37d2:	781b      	ldrb	r3, [r3, #0]
}
    37d4:	0018      	movs	r0, r3
    37d6:	46bd      	mov	sp, r7
    37d8:	b005      	add	sp, #20
    37da:	bd90      	pop	{r4, r7, pc}
    37dc:	000034f9 	.word	0x000034f9
    37e0:	0000371d 	.word	0x0000371d
    37e4:	00003635 	.word	0x00003635

000037e8 <lcd_wr32>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 32-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr32(LCD_ADDRESS wrt_addr, uint32_t wrt_dword)
{
    37e8:	b590      	push	{r4, r7, lr}
    37ea:	b085      	sub	sp, #20
    37ec:	af00      	add	r7, sp, #0
    37ee:	6078      	str	r0, [r7, #4]
    37f0:	6039      	str	r1, [r7, #0]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	2101      	movs	r1, #1
    37f6:	0018      	movs	r0, r3
    37f8:	4b09      	ldr	r3, [pc, #36]	; (3820 <lcd_wr32+0x38>)
    37fa:	4798      	blx	r3
    
    // cast the dword pointer to an 8-bit pointer and use a 4 byte length
    status_result = lcd_host_write((uint8_t *) &wrt_dword, 4);
    37fc:	230f      	movs	r3, #15
    37fe:	18fc      	adds	r4, r7, r3
    3800:	003b      	movs	r3, r7
    3802:	2104      	movs	r1, #4
    3804:	0018      	movs	r0, r3
    3806:	4b07      	ldr	r3, [pc, #28]	; (3824 <lcd_wr32+0x3c>)
    3808:	4798      	blx	r3
    380a:	0003      	movs	r3, r0
    380c:	7023      	strb	r3, [r4, #0]
    
    lcd_stop_xfer();
    380e:	4b06      	ldr	r3, [pc, #24]	; (3828 <lcd_wr32+0x40>)
    3810:	4798      	blx	r3
    
    return status_result;
    3812:	230f      	movs	r3, #15
    3814:	18fb      	adds	r3, r7, r3
    3816:	781b      	ldrb	r3, [r3, #0]
}
    3818:	0018      	movs	r0, r3
    381a:	46bd      	mov	sp, r7
    381c:	b005      	add	sp, #20
    381e:	bd90      	pop	{r4, r7, pc}
    3820:	000034f9 	.word	0x000034f9
    3824:	0000371d 	.word	0x0000371d
    3828:	00003635 	.word	0x00003635

0000382c <lcd_host_cmd>:
 * Description      : Sends a host command to the LCD. Host commands are
 *  for basic hardware configurations (like power mode, clock stuff, etc.).
 *  Refer to DS-FT81x datasheet pg 16 if the command has a parameter byte.
 */
status_code_genare_t lcd_host_cmd(uint8_t cmd, uint8_t param_byte)
{
    382c:	b590      	push	{r4, r7, lr}
    382e:	b085      	sub	sp, #20
    3830:	af00      	add	r7, sp, #0
    3832:	0002      	movs	r2, r0
    3834:	1dfb      	adds	r3, r7, #7
    3836:	701a      	strb	r2, [r3, #0]
    3838:	1dbb      	adds	r3, r7, #6
    383a:	1c0a      	adds	r2, r1, #0
    383c:	701a      	strb	r2, [r3, #0]
    // variable for holding ASF status code
    status_code_genare_t wrt_status;
    
    // 3 byte array for sending host command to the LCD
    uint8_t cmd_packet[3] = {cmd, param_byte, 0x00};
    383e:	230c      	movs	r3, #12
    3840:	18fb      	adds	r3, r7, r3
    3842:	1dfa      	adds	r2, r7, #7
    3844:	7812      	ldrb	r2, [r2, #0]
    3846:	701a      	strb	r2, [r3, #0]
    3848:	230c      	movs	r3, #12
    384a:	18fb      	adds	r3, r7, r3
    384c:	1dba      	adds	r2, r7, #6
    384e:	7812      	ldrb	r2, [r2, #0]
    3850:	705a      	strb	r2, [r3, #1]
    3852:	230c      	movs	r3, #12
    3854:	18fb      	adds	r3, r7, r3
    3856:	2200      	movs	r2, #0
    3858:	709a      	strb	r2, [r3, #2]
   
    // select the slave
    do{
        // select the slave
        wrt_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    385a:	230f      	movs	r3, #15
    385c:	18fc      	adds	r4, r7, r3
    385e:	4918      	ldr	r1, [pc, #96]	; (38c0 <lcd_host_cmd+0x94>)
    3860:	4b18      	ldr	r3, [pc, #96]	; (38c4 <lcd_host_cmd+0x98>)
    3862:	2201      	movs	r2, #1
    3864:	0018      	movs	r0, r3
    3866:	4b18      	ldr	r3, [pc, #96]	; (38c8 <lcd_host_cmd+0x9c>)
    3868:	4798      	blx	r3
    386a:	0003      	movs	r3, r0
    386c:	7023      	strb	r3, [r4, #0]
		//port_pin_set_output_level(PIN_PA10, true);
    }while(wrt_status == STATUS_BUSY);
    386e:	230f      	movs	r3, #15
    3870:	18fb      	adds	r3, r7, r3
    3872:	781b      	ldrb	r3, [r3, #0]
    3874:	2b05      	cmp	r3, #5
    3876:	d0f0      	beq.n	385a <lcd_host_cmd+0x2e>
    
    // send host command
    wrt_status = spi_write_buffer_wait(&lcd_master, cmd_packet, 3);
    3878:	230f      	movs	r3, #15
    387a:	18fc      	adds	r4, r7, r3
    387c:	230c      	movs	r3, #12
    387e:	18f9      	adds	r1, r7, r3
    3880:	4b10      	ldr	r3, [pc, #64]	; (38c4 <lcd_host_cmd+0x98>)
    3882:	2203      	movs	r2, #3
    3884:	0018      	movs	r0, r3
    3886:	4b11      	ldr	r3, [pc, #68]	; (38cc <lcd_host_cmd+0xa0>)
    3888:	4798      	blx	r3
    388a:	0003      	movs	r3, r0
    388c:	7023      	strb	r3, [r4, #0]

    // status check
    if(wrt_status != STATUS_OK)
    388e:	230f      	movs	r3, #15
    3890:	18fb      	adds	r3, r7, r3
    3892:	781b      	ldrb	r3, [r3, #0]
    3894:	2b00      	cmp	r3, #0
    3896:	d005      	beq.n	38a4 <lcd_host_cmd+0x78>
    {
        // deselect slave
        lcd_stop_xfer();
    3898:	4b0d      	ldr	r3, [pc, #52]	; (38d0 <lcd_host_cmd+0xa4>)
    389a:	4798      	blx	r3
        // return an error
        return wrt_status;
    389c:	230f      	movs	r3, #15
    389e:	18fb      	adds	r3, r7, r3
    38a0:	781b      	ldrb	r3, [r3, #0]
    38a2:	e008      	b.n	38b6 <lcd_host_cmd+0x8a>
    }
    else
        // deselect slave
        wrt_status = lcd_stop_xfer();
    38a4:	230f      	movs	r3, #15
    38a6:	18fc      	adds	r4, r7, r3
    38a8:	4b09      	ldr	r3, [pc, #36]	; (38d0 <lcd_host_cmd+0xa4>)
    38aa:	4798      	blx	r3
    38ac:	0003      	movs	r3, r0
    38ae:	7023      	strb	r3, [r4, #0]
    
    return wrt_status;
    38b0:	230f      	movs	r3, #15
    38b2:	18fb      	adds	r3, r7, r3
    38b4:	781b      	ldrb	r3, [r3, #0]
}
    38b6:	0018      	movs	r0, r3
    38b8:	46bd      	mov	sp, r7
    38ba:	b005      	add	sp, #20
    38bc:	bd90      	pop	{r4, r7, pc}
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	2000069c 	.word	0x2000069c
    38c4:	200006a0 	.word	0x200006a0
    38c8:	000045c9 	.word	0x000045c9
    38cc:	000046b9 	.word	0x000046b9
    38d0:	00003635 	.word	0x00003635

000038d4 <lcd_powerdown>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Pull down the LCD_PD pin to force power down the LCD
 */
void lcd_powerdown(void)
{
    38d4:	b580      	push	{r7, lr}
    38d6:	af00      	add	r7, sp, #0
    port_pin_set_output_level(LCD_PD, LCD_PD_EN);
    38d8:	2100      	movs	r1, #0
    38da:	2008      	movs	r0, #8
    38dc:	4b02      	ldr	r3, [pc, #8]	; (38e8 <lcd_powerdown+0x14>)
    38de:	4798      	blx	r3
}
    38e0:	46c0      	nop			; (mov r8, r8)
    38e2:	46bd      	mov	sp, r7
    38e4:	bd80      	pop	{r7, pc}
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	00003279 	.word	0x00003279

000038ec <lcd_powerup>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Pull up the LCD_PD pin to force power up the LCD
 */
void lcd_powerup(void)
{
    38ec:	b580      	push	{r7, lr}
    38ee:	af00      	add	r7, sp, #0
    port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
    38f0:	2101      	movs	r1, #1
    38f2:	2008      	movs	r0, #8
    38f4:	4b02      	ldr	r3, [pc, #8]	; (3900 <lcd_powerup+0x14>)
    38f6:	4798      	blx	r3
}
    38f8:	46c0      	nop			; (mov r8, r8)
    38fa:	46bd      	mov	sp, r7
    38fc:	bd80      	pop	{r7, pc}
    38fe:	46c0      	nop			; (mov r8, r8)
    3900:	00003279 	.word	0x00003279

00003904 <lcd_init_seq>:
 * Return Values(s) : ASF general status code
 * Description      : Initialization sequence as described by the 
 *  FT81X_Series_Programmer_Guide datasheet pg 11.
 */
void lcd_init_seq(void)
{
    3904:	b580      	push	{r7, lr}
    3906:	b082      	sub	sp, #8
    3908:	af00      	add	r7, sp, #0
    /* medium rare power cycle to get the LCD into a known state.
     * Medium rare because it resets a lot of things, but sometimes display
     * list behavior is funky even after this power cycle. It is recommended
     * that the user performs a hard power reset when testing display 
     * list stuff. */
    lcd_powerdown();
    390a:	4b50      	ldr	r3, [pc, #320]	; (3a4c <lcd_init_seq+0x148>)
    390c:	4798      	blx	r3
    delay_ms(20);
    390e:	2014      	movs	r0, #20
    3910:	4b4f      	ldr	r3, [pc, #316]	; (3a50 <lcd_init_seq+0x14c>)
    3912:	4798      	blx	r3
    lcd_powerup();
    3914:	4b4f      	ldr	r3, [pc, #316]	; (3a54 <lcd_init_seq+0x150>)
    3916:	4798      	blx	r3
    delay_ms(20);
    3918:	2014      	movs	r0, #20
    391a:	4b4d      	ldr	r3, [pc, #308]	; (3a50 <lcd_init_seq+0x14c>)
    391c:	4798      	blx	r3
    
    // indicate that an external clock is being used
    lcd_host_cmd(CLKEXT, NO_PARAM);
    391e:	2100      	movs	r1, #0
    3920:	2044      	movs	r0, #68	; 0x44
    3922:	4b4d      	ldr	r3, [pc, #308]	; (3a58 <lcd_init_seq+0x154>)
    3924:	4798      	blx	r3
    
    // wait a little bit, because CLKEXT triggers a software reset
    delay_ms(50);
    3926:	2032      	movs	r0, #50	; 0x32
    3928:	4b49      	ldr	r3, [pc, #292]	; (3a50 <lcd_init_seq+0x14c>)
    392a:	4798      	blx	r3
    // wake up the LCD
    lcd_host_cmd(ACTIVE, NO_PARAM);
    392c:	2100      	movs	r1, #0
    392e:	2000      	movs	r0, #0
    3930:	4b49      	ldr	r3, [pc, #292]	; (3a58 <lcd_init_seq+0x154>)
    3932:	4798      	blx	r3
    
    // wait until the LCD is active
	do{
	    result = lcd_rd16(REG_ID);
    3934:	4b49      	ldr	r3, [pc, #292]	; (3a5c <lcd_init_seq+0x158>)
    3936:	0018      	movs	r0, r3
    3938:	4b49      	ldr	r3, [pc, #292]	; (3a60 <lcd_init_seq+0x15c>)
    393a:	4798      	blx	r3
    393c:	0003      	movs	r3, r0
    393e:	001a      	movs	r2, r3
    3940:	1dfb      	adds	r3, r7, #7
    3942:	701a      	strb	r2, [r3, #0]
	} while(result != 0x7c);  
    3944:	1dfb      	adds	r3, r7, #7
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	2b7c      	cmp	r3, #124	; 0x7c
    394a:	d1f3      	bne.n	3934 <lcd_init_seq+0x30>
    
    // Register settings, refer to NHD-5.0-800480FT-CTXL-CTP datasheet:
    // horizontal configuration registers
    lcd_wr16(REG_HSIZE, 800);
    394c:	23c8      	movs	r3, #200	; 0xc8
    394e:	009b      	lsls	r3, r3, #2
    3950:	4a44      	ldr	r2, [pc, #272]	; (3a64 <lcd_init_seq+0x160>)
    3952:	0019      	movs	r1, r3
    3954:	0010      	movs	r0, r2
    3956:	4b44      	ldr	r3, [pc, #272]	; (3a68 <lcd_init_seq+0x164>)
    3958:	4798      	blx	r3
    lcd_wr16(REG_HCYCLE, 928);
    395a:	23e8      	movs	r3, #232	; 0xe8
    395c:	009b      	lsls	r3, r3, #2
    395e:	4a43      	ldr	r2, [pc, #268]	; (3a6c <lcd_init_seq+0x168>)
    3960:	0019      	movs	r1, r3
    3962:	0010      	movs	r0, r2
    3964:	4b40      	ldr	r3, [pc, #256]	; (3a68 <lcd_init_seq+0x164>)
    3966:	4798      	blx	r3
    lcd_wr16(REG_HOFFSET, 88);
    3968:	4b41      	ldr	r3, [pc, #260]	; (3a70 <lcd_init_seq+0x16c>)
    396a:	2158      	movs	r1, #88	; 0x58
    396c:	0018      	movs	r0, r3
    396e:	4b3e      	ldr	r3, [pc, #248]	; (3a68 <lcd_init_seq+0x164>)
    3970:	4798      	blx	r3
    lcd_wr16(REG_HSYNC0, 0);
    3972:	4b40      	ldr	r3, [pc, #256]	; (3a74 <lcd_init_seq+0x170>)
    3974:	2100      	movs	r1, #0
    3976:	0018      	movs	r0, r3
    3978:	4b3b      	ldr	r3, [pc, #236]	; (3a68 <lcd_init_seq+0x164>)
    397a:	4798      	blx	r3
    lcd_wr16(REG_HSYNC1, 48);
    397c:	4b3e      	ldr	r3, [pc, #248]	; (3a78 <lcd_init_seq+0x174>)
    397e:	2130      	movs	r1, #48	; 0x30
    3980:	0018      	movs	r0, r3
    3982:	4b39      	ldr	r3, [pc, #228]	; (3a68 <lcd_init_seq+0x164>)
    3984:	4798      	blx	r3
    
    // vertical configuration registers
    lcd_wr16(REG_VSIZE, 480);
    3986:	23f0      	movs	r3, #240	; 0xf0
    3988:	005b      	lsls	r3, r3, #1
    398a:	4a3c      	ldr	r2, [pc, #240]	; (3a7c <lcd_init_seq+0x178>)
    398c:	0019      	movs	r1, r3
    398e:	0010      	movs	r0, r2
    3990:	4b35      	ldr	r3, [pc, #212]	; (3a68 <lcd_init_seq+0x164>)
    3992:	4798      	blx	r3
    lcd_wr16(REG_VCYCLE, 525);
    3994:	4a3a      	ldr	r2, [pc, #232]	; (3a80 <lcd_init_seq+0x17c>)
    3996:	4b3b      	ldr	r3, [pc, #236]	; (3a84 <lcd_init_seq+0x180>)
    3998:	0011      	movs	r1, r2
    399a:	0018      	movs	r0, r3
    399c:	4b32      	ldr	r3, [pc, #200]	; (3a68 <lcd_init_seq+0x164>)
    399e:	4798      	blx	r3
    lcd_wr16(REG_VOFFSET, 32);
    39a0:	4b39      	ldr	r3, [pc, #228]	; (3a88 <lcd_init_seq+0x184>)
    39a2:	2120      	movs	r1, #32
    39a4:	0018      	movs	r0, r3
    39a6:	4b30      	ldr	r3, [pc, #192]	; (3a68 <lcd_init_seq+0x164>)
    39a8:	4798      	blx	r3
    lcd_wr16(REG_VSYNC0, 0);
    39aa:	4b38      	ldr	r3, [pc, #224]	; (3a8c <lcd_init_seq+0x188>)
    39ac:	2100      	movs	r1, #0
    39ae:	0018      	movs	r0, r3
    39b0:	4b2d      	ldr	r3, [pc, #180]	; (3a68 <lcd_init_seq+0x164>)
    39b2:	4798      	blx	r3
    lcd_wr16(REG_VSYNC1, 3);
    39b4:	4b36      	ldr	r3, [pc, #216]	; (3a90 <lcd_init_seq+0x18c>)
    39b6:	2103      	movs	r1, #3
    39b8:	0018      	movs	r0, r3
    39ba:	4b2b      	ldr	r3, [pc, #172]	; (3a68 <lcd_init_seq+0x164>)
    39bc:	4798      	blx	r3

    // misc. screen configuration registers
	lcd_wr8(REG_SWIZZLE, 0);
    39be:	4b35      	ldr	r3, [pc, #212]	; (3a94 <lcd_init_seq+0x190>)
    39c0:	2100      	movs	r1, #0
    39c2:	0018      	movs	r0, r3
    39c4:	4b34      	ldr	r3, [pc, #208]	; (3a98 <lcd_init_seq+0x194>)
    39c6:	4798      	blx	r3
	lcd_wr8(REG_PCLK_POL, 0);
    39c8:	4b34      	ldr	r3, [pc, #208]	; (3a9c <lcd_init_seq+0x198>)
    39ca:	2100      	movs	r1, #0
    39cc:	0018      	movs	r0, r3
    39ce:	4b32      	ldr	r3, [pc, #200]	; (3a98 <lcd_init_seq+0x194>)
    39d0:	4798      	blx	r3
	lcd_wr8(REG_CSPREAD, 1);
    39d2:	4b33      	ldr	r3, [pc, #204]	; (3aa0 <lcd_init_seq+0x19c>)
    39d4:	2101      	movs	r1, #1
    39d6:	0018      	movs	r0, r3
    39d8:	4b2f      	ldr	r3, [pc, #188]	; (3a98 <lcd_init_seq+0x194>)
    39da:	4798      	blx	r3
	lcd_wr8(REG_DITHER, 1);
    39dc:	4b31      	ldr	r3, [pc, #196]	; (3aa4 <lcd_init_seq+0x1a0>)
    39de:	2101      	movs	r1, #1
    39e0:	0018      	movs	r0, r3
    39e2:	4b2d      	ldr	r3, [pc, #180]	; (3a98 <lcd_init_seq+0x194>)
    39e4:	4798      	blx	r3

    // clear the display
    lcd_wr32(RAM_DL+0, CLEAR_COLOR_RGB(1, 1, 1));
    39e6:	4a30      	ldr	r2, [pc, #192]	; (3aa8 <lcd_init_seq+0x1a4>)
    39e8:	23c0      	movs	r3, #192	; 0xc0
    39ea:	039b      	lsls	r3, r3, #14
    39ec:	0011      	movs	r1, r2
    39ee:	0018      	movs	r0, r3
    39f0:	4b2e      	ldr	r3, [pc, #184]	; (3aac <lcd_init_seq+0x1a8>)
    39f2:	4798      	blx	r3
    lcd_wr32(RAM_DL+4, COLOR_RGB(255,255,255));
    39f4:	4a2e      	ldr	r2, [pc, #184]	; (3ab0 <lcd_init_seq+0x1ac>)
    39f6:	4b2f      	ldr	r3, [pc, #188]	; (3ab4 <lcd_init_seq+0x1b0>)
    39f8:	0011      	movs	r1, r2
    39fa:	0018      	movs	r0, r3
    39fc:	4b2b      	ldr	r3, [pc, #172]	; (3aac <lcd_init_seq+0x1a8>)
    39fe:	4798      	blx	r3
    lcd_wr32(RAM_DL+8, CLEAR(1,1,1));
    3a00:	4a2d      	ldr	r2, [pc, #180]	; (3ab8 <lcd_init_seq+0x1b4>)
    3a02:	4b2e      	ldr	r3, [pc, #184]	; (3abc <lcd_init_seq+0x1b8>)
    3a04:	0011      	movs	r1, r2
    3a06:	0018      	movs	r0, r3
    3a08:	4b28      	ldr	r3, [pc, #160]	; (3aac <lcd_init_seq+0x1a8>)
    3a0a:	4798      	blx	r3
    lcd_wr32(RAM_DL+12, DISPLAY());
    3a0c:	4b2c      	ldr	r3, [pc, #176]	; (3ac0 <lcd_init_seq+0x1bc>)
    3a0e:	2100      	movs	r1, #0
    3a10:	0018      	movs	r0, r3
    3a12:	4b26      	ldr	r3, [pc, #152]	; (3aac <lcd_init_seq+0x1a8>)
    3a14:	4798      	blx	r3

    // display list swap
    lcd_wr8(REG_DLSWAP,DLSWAP_FRAME);
    3a16:	4b2b      	ldr	r3, [pc, #172]	; (3ac4 <lcd_init_seq+0x1c0>)
    3a18:	2102      	movs	r1, #2
    3a1a:	0018      	movs	r0, r3
    3a1c:	4b1e      	ldr	r3, [pc, #120]	; (3a98 <lcd_init_seq+0x194>)
    3a1e:	4798      	blx	r3

    // set the pin drive strength
    lcd_wr16(REG_GPIOX_DIR, 0xffff);
    3a20:	4a29      	ldr	r2, [pc, #164]	; (3ac8 <lcd_init_seq+0x1c4>)
    3a22:	4b2a      	ldr	r3, [pc, #168]	; (3acc <lcd_init_seq+0x1c8>)
    3a24:	0011      	movs	r1, r2
    3a26:	0018      	movs	r0, r3
    3a28:	4b0f      	ldr	r3, [pc, #60]	; (3a68 <lcd_init_seq+0x164>)
    3a2a:	4798      	blx	r3
    lcd_wr16(REG_GPIOX, 0xffff);
    3a2c:	4a26      	ldr	r2, [pc, #152]	; (3ac8 <lcd_init_seq+0x1c4>)
    3a2e:	4b28      	ldr	r3, [pc, #160]	; (3ad0 <lcd_init_seq+0x1cc>)
    3a30:	0011      	movs	r1, r2
    3a32:	0018      	movs	r0, r3
    3a34:	4b0c      	ldr	r3, [pc, #48]	; (3a68 <lcd_init_seq+0x164>)
    3a36:	4798      	blx	r3

    // enable the clock
    lcd_wr8(REG_PCLK,2);
    3a38:	4b26      	ldr	r3, [pc, #152]	; (3ad4 <lcd_init_seq+0x1d0>)
    3a3a:	2102      	movs	r1, #2
    3a3c:	0018      	movs	r0, r3
    3a3e:	4b16      	ldr	r3, [pc, #88]	; (3a98 <lcd_init_seq+0x194>)
    3a40:	4798      	blx	r3
}
    3a42:	46c0      	nop			; (mov r8, r8)
    3a44:	46bd      	mov	sp, r7
    3a46:	b002      	add	sp, #8
    3a48:	bd80      	pop	{r7, pc}
    3a4a:	46c0      	nop			; (mov r8, r8)
    3a4c:	000038d5 	.word	0x000038d5
    3a50:	00004a59 	.word	0x00004a59
    3a54:	000038ed 	.word	0x000038ed
    3a58:	0000382d 	.word	0x0000382d
    3a5c:	00302000 	.word	0x00302000
    3a60:	000036d9 	.word	0x000036d9
    3a64:	00302034 	.word	0x00302034
    3a68:	000037a1 	.word	0x000037a1
    3a6c:	0030202c 	.word	0x0030202c
    3a70:	00302030 	.word	0x00302030
    3a74:	00302038 	.word	0x00302038
    3a78:	0030203c 	.word	0x0030203c
    3a7c:	00302048 	.word	0x00302048
    3a80:	0000020d 	.word	0x0000020d
    3a84:	00302040 	.word	0x00302040
    3a88:	00302044 	.word	0x00302044
    3a8c:	0030204c 	.word	0x0030204c
    3a90:	00302050 	.word	0x00302050
    3a94:	00302064 	.word	0x00302064
    3a98:	00003759 	.word	0x00003759
    3a9c:	0030206c 	.word	0x0030206c
    3aa0:	00302068 	.word	0x00302068
    3aa4:	00302060 	.word	0x00302060
    3aa8:	02010101 	.word	0x02010101
    3aac:	000037e9 	.word	0x000037e9
    3ab0:	04ffffff 	.word	0x04ffffff
    3ab4:	00300004 	.word	0x00300004
    3ab8:	26000007 	.word	0x26000007
    3abc:	00300008 	.word	0x00300008
    3ac0:	0030000c 	.word	0x0030000c
    3ac4:	00302054 	.word	0x00302054
    3ac8:	0000ffff 	.word	0x0000ffff
    3acc:	00302098 	.word	0x00302098
    3ad0:	0030209c 	.word	0x0030209c
    3ad4:	00302070 	.word	0x00302070

00003ad8 <lcd_set_ft_host_ptr>:
 * Return Values(s) : void
 * Description      : Sets the sim_system_glcd_software global pointer for the
 *  FTDI context struct.
 */
void lcd_set_ft_host_ptr(Ft_Gpu_Hal_Context_t* phost)
{
    3ad8:	b580      	push	{r7, lr}
    3ada:	b082      	sub	sp, #8
    3adc:	af00      	add	r7, sp, #0
    3ade:	6078      	str	r0, [r7, #4]
    lcd_firmware_phost = phost;
    3ae0:	4b03      	ldr	r3, [pc, #12]	; (3af0 <lcd_set_ft_host_ptr+0x18>)
    3ae2:	687a      	ldr	r2, [r7, #4]
    3ae4:	601a      	str	r2, [r3, #0]
}
    3ae6:	46c0      	nop			; (mov r8, r8)
    3ae8:	46bd      	mov	sp, r7
    3aea:	b002      	add	sp, #8
    3aec:	bd80      	pop	{r7, pc}
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	200000cc 	.word	0x200000cc

00003af4 <lcd_interrupt_callback>:
 * Return Values(s) : void
 * Description      : Callback for the LCD interrupt. Reads the LCD's flag
 *  register.
 */
void lcd_interrupt_callback(void)
{
    3af4:	b580      	push	{r7, lr}
    3af6:	af00      	add	r7, sp, #0
    lcd_int_flags = lcd_rd8(REG_INT_FLAGS);
    3af8:	4b05      	ldr	r3, [pc, #20]	; (3b10 <lcd_interrupt_callback+0x1c>)
    3afa:	0018      	movs	r0, r3
    3afc:	4b05      	ldr	r3, [pc, #20]	; (3b14 <lcd_interrupt_callback+0x20>)
    3afe:	4798      	blx	r3
    3b00:	0003      	movs	r3, r0
    3b02:	001a      	movs	r2, r3
    3b04:	4b04      	ldr	r3, [pc, #16]	; (3b18 <lcd_interrupt_callback+0x24>)
    3b06:	701a      	strb	r2, [r3, #0]
}
    3b08:	46c0      	nop			; (mov r8, r8)
    3b0a:	46bd      	mov	sp, r7
    3b0c:	bd80      	pop	{r7, pc}
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	003020a8 	.word	0x003020a8
    3b14:	00003695 	.word	0x00003695
    3b18:	20000000 	.word	0x20000000

00003b1c <system_pinmux_get_config_defaults>:
{
    3b1c:	b580      	push	{r7, lr}
    3b1e:	b082      	sub	sp, #8
    3b20:	af00      	add	r7, sp, #0
    3b22:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3b24:	687b      	ldr	r3, [r7, #4]
    3b26:	2280      	movs	r2, #128	; 0x80
    3b28:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	2200      	movs	r2, #0
    3b2e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	2201      	movs	r2, #1
    3b34:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3b36:	687b      	ldr	r3, [r7, #4]
    3b38:	2200      	movs	r2, #0
    3b3a:	70da      	strb	r2, [r3, #3]
}
    3b3c:	46c0      	nop			; (mov r8, r8)
    3b3e:	46bd      	mov	sp, r7
    3b40:	b002      	add	sp, #8
    3b42:	bd80      	pop	{r7, pc}

00003b44 <system_pinmux_get_group_from_gpio_pin>:
{
    3b44:	b580      	push	{r7, lr}
    3b46:	b084      	sub	sp, #16
    3b48:	af00      	add	r7, sp, #0
    3b4a:	0002      	movs	r2, r0
    3b4c:	1dfb      	adds	r3, r7, #7
    3b4e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3b50:	230f      	movs	r3, #15
    3b52:	18fb      	adds	r3, r7, r3
    3b54:	1dfa      	adds	r2, r7, #7
    3b56:	7812      	ldrb	r2, [r2, #0]
    3b58:	09d2      	lsrs	r2, r2, #7
    3b5a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3b5c:	230e      	movs	r3, #14
    3b5e:	18fb      	adds	r3, r7, r3
    3b60:	1dfa      	adds	r2, r7, #7
    3b62:	7812      	ldrb	r2, [r2, #0]
    3b64:	0952      	lsrs	r2, r2, #5
    3b66:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3b68:	4b0d      	ldr	r3, [pc, #52]	; (3ba0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3b6a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3b6c:	230f      	movs	r3, #15
    3b6e:	18fb      	adds	r3, r7, r3
    3b70:	781b      	ldrb	r3, [r3, #0]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d10f      	bne.n	3b96 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3b76:	230f      	movs	r3, #15
    3b78:	18fb      	adds	r3, r7, r3
    3b7a:	781b      	ldrb	r3, [r3, #0]
    3b7c:	009b      	lsls	r3, r3, #2
    3b7e:	2210      	movs	r2, #16
    3b80:	4694      	mov	ip, r2
    3b82:	44bc      	add	ip, r7
    3b84:	4463      	add	r3, ip
    3b86:	3b08      	subs	r3, #8
    3b88:	681a      	ldr	r2, [r3, #0]
    3b8a:	230e      	movs	r3, #14
    3b8c:	18fb      	adds	r3, r7, r3
    3b8e:	781b      	ldrb	r3, [r3, #0]
    3b90:	01db      	lsls	r3, r3, #7
    3b92:	18d3      	adds	r3, r2, r3
    3b94:	e000      	b.n	3b98 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3b96:	2300      	movs	r3, #0
}
    3b98:	0018      	movs	r0, r3
    3b9a:	46bd      	mov	sp, r7
    3b9c:	b004      	add	sp, #16
    3b9e:	bd80      	pop	{r7, pc}
    3ba0:	41004400 	.word	0x41004400

00003ba4 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b086      	sub	sp, #24
    3ba8:	af00      	add	r7, sp, #0
    3baa:	0002      	movs	r2, r0
    3bac:	1dfb      	adds	r3, r7, #7
    3bae:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3bb0:	1dfb      	adds	r3, r7, #7
    3bb2:	781b      	ldrb	r3, [r3, #0]
    3bb4:	0018      	movs	r0, r3
    3bb6:	4b19      	ldr	r3, [pc, #100]	; (3c1c <system_pinmux_pin_get_mux_position+0x78>)
    3bb8:	4798      	blx	r3
    3bba:	0003      	movs	r3, r0
    3bbc:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    3bbe:	1dfb      	adds	r3, r7, #7
    3bc0:	781b      	ldrb	r3, [r3, #0]
    3bc2:	221f      	movs	r2, #31
    3bc4:	4013      	ands	r3, r2
    3bc6:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3bc8:	697a      	ldr	r2, [r7, #20]
    3bca:	2140      	movs	r1, #64	; 0x40
    3bcc:	693b      	ldr	r3, [r7, #16]
    3bce:	18d3      	adds	r3, r2, r3
    3bd0:	185b      	adds	r3, r3, r1
    3bd2:	781b      	ldrb	r3, [r3, #0]
    3bd4:	b2db      	uxtb	r3, r3
    3bd6:	001a      	movs	r2, r3
    3bd8:	2301      	movs	r3, #1
    3bda:	4013      	ands	r3, r2
    3bdc:	d101      	bne.n	3be2 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    3bde:	2380      	movs	r3, #128	; 0x80
    3be0:	e018      	b.n	3c14 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3be2:	693b      	ldr	r3, [r7, #16]
    3be4:	085b      	lsrs	r3, r3, #1
    3be6:	697a      	ldr	r2, [r7, #20]
    3be8:	2130      	movs	r1, #48	; 0x30
    3bea:	18d3      	adds	r3, r2, r3
    3bec:	185b      	adds	r3, r3, r1
    3bee:	781b      	ldrb	r3, [r3, #0]
    3bf0:	b2db      	uxtb	r3, r3
    3bf2:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    3bf4:	693b      	ldr	r3, [r7, #16]
    3bf6:	2201      	movs	r2, #1
    3bf8:	4013      	ands	r3, r2
    3bfa:	d006      	beq.n	3c0a <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    3bfc:	68fb      	ldr	r3, [r7, #12]
    3bfe:	091b      	lsrs	r3, r3, #4
    3c00:	b2db      	uxtb	r3, r3
    3c02:	220f      	movs	r2, #15
    3c04:	4013      	ands	r3, r2
    3c06:	b2db      	uxtb	r3, r3
    3c08:	e004      	b.n	3c14 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    3c0a:	68fb      	ldr	r3, [r7, #12]
    3c0c:	b2db      	uxtb	r3, r3
    3c0e:	220f      	movs	r2, #15
    3c10:	4013      	ands	r3, r2
    3c12:	b2db      	uxtb	r3, r3
	}
}
    3c14:	0018      	movs	r0, r3
    3c16:	46bd      	mov	sp, r7
    3c18:	b006      	add	sp, #24
    3c1a:	bd80      	pop	{r7, pc}
    3c1c:	00003b45 	.word	0x00003b45

00003c20 <port_get_group_from_gpio_pin>:
{
    3c20:	b580      	push	{r7, lr}
    3c22:	b082      	sub	sp, #8
    3c24:	af00      	add	r7, sp, #0
    3c26:	0002      	movs	r2, r0
    3c28:	1dfb      	adds	r3, r7, #7
    3c2a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3c2c:	1dfb      	adds	r3, r7, #7
    3c2e:	781b      	ldrb	r3, [r3, #0]
    3c30:	0018      	movs	r0, r3
    3c32:	4b03      	ldr	r3, [pc, #12]	; (3c40 <port_get_group_from_gpio_pin+0x20>)
    3c34:	4798      	blx	r3
    3c36:	0003      	movs	r3, r0
}
    3c38:	0018      	movs	r0, r3
    3c3a:	46bd      	mov	sp, r7
    3c3c:	b002      	add	sp, #8
    3c3e:	bd80      	pop	{r7, pc}
    3c40:	00003b45 	.word	0x00003b45

00003c44 <port_pin_set_output_level>:
{
    3c44:	b580      	push	{r7, lr}
    3c46:	b084      	sub	sp, #16
    3c48:	af00      	add	r7, sp, #0
    3c4a:	0002      	movs	r2, r0
    3c4c:	1dfb      	adds	r3, r7, #7
    3c4e:	701a      	strb	r2, [r3, #0]
    3c50:	1dbb      	adds	r3, r7, #6
    3c52:	1c0a      	adds	r2, r1, #0
    3c54:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3c56:	1dfb      	adds	r3, r7, #7
    3c58:	781b      	ldrb	r3, [r3, #0]
    3c5a:	0018      	movs	r0, r3
    3c5c:	4b0d      	ldr	r3, [pc, #52]	; (3c94 <port_pin_set_output_level+0x50>)
    3c5e:	4798      	blx	r3
    3c60:	0003      	movs	r3, r0
    3c62:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c64:	1dfb      	adds	r3, r7, #7
    3c66:	781b      	ldrb	r3, [r3, #0]
    3c68:	221f      	movs	r2, #31
    3c6a:	4013      	ands	r3, r2
    3c6c:	2201      	movs	r2, #1
    3c6e:	409a      	lsls	r2, r3
    3c70:	0013      	movs	r3, r2
    3c72:	60bb      	str	r3, [r7, #8]
	if (level) {
    3c74:	1dbb      	adds	r3, r7, #6
    3c76:	781b      	ldrb	r3, [r3, #0]
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d003      	beq.n	3c84 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3c7c:	68fb      	ldr	r3, [r7, #12]
    3c7e:	68ba      	ldr	r2, [r7, #8]
    3c80:	619a      	str	r2, [r3, #24]
}
    3c82:	e002      	b.n	3c8a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3c84:	68fb      	ldr	r3, [r7, #12]
    3c86:	68ba      	ldr	r2, [r7, #8]
    3c88:	615a      	str	r2, [r3, #20]
}
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	46bd      	mov	sp, r7
    3c8e:	b004      	add	sp, #16
    3c90:	bd80      	pop	{r7, pc}
    3c92:	46c0      	nop			; (mov r8, r8)
    3c94:	00003c21 	.word	0x00003c21

00003c98 <system_gclk_chan_get_config_defaults>:
{
    3c98:	b580      	push	{r7, lr}
    3c9a:	b082      	sub	sp, #8
    3c9c:	af00      	add	r7, sp, #0
    3c9e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	2200      	movs	r2, #0
    3ca4:	701a      	strb	r2, [r3, #0]
}
    3ca6:	46c0      	nop			; (mov r8, r8)
    3ca8:	46bd      	mov	sp, r7
    3caa:	b002      	add	sp, #8
    3cac:	bd80      	pop	{r7, pc}
	...

00003cb0 <system_apb_clock_set_mask>:
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b082      	sub	sp, #8
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	0002      	movs	r2, r0
    3cb8:	6039      	str	r1, [r7, #0]
    3cba:	1dfb      	adds	r3, r7, #7
    3cbc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3cbe:	1dfb      	adds	r3, r7, #7
    3cc0:	781b      	ldrb	r3, [r3, #0]
    3cc2:	2b01      	cmp	r3, #1
    3cc4:	d00a      	beq.n	3cdc <system_apb_clock_set_mask+0x2c>
    3cc6:	2b02      	cmp	r3, #2
    3cc8:	d00f      	beq.n	3cea <system_apb_clock_set_mask+0x3a>
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d114      	bne.n	3cf8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3cce:	4b0e      	ldr	r3, [pc, #56]	; (3d08 <system_apb_clock_set_mask+0x58>)
    3cd0:	4a0d      	ldr	r2, [pc, #52]	; (3d08 <system_apb_clock_set_mask+0x58>)
    3cd2:	6991      	ldr	r1, [r2, #24]
    3cd4:	683a      	ldr	r2, [r7, #0]
    3cd6:	430a      	orrs	r2, r1
    3cd8:	619a      	str	r2, [r3, #24]
			break;
    3cda:	e00f      	b.n	3cfc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3cdc:	4b0a      	ldr	r3, [pc, #40]	; (3d08 <system_apb_clock_set_mask+0x58>)
    3cde:	4a0a      	ldr	r2, [pc, #40]	; (3d08 <system_apb_clock_set_mask+0x58>)
    3ce0:	69d1      	ldr	r1, [r2, #28]
    3ce2:	683a      	ldr	r2, [r7, #0]
    3ce4:	430a      	orrs	r2, r1
    3ce6:	61da      	str	r2, [r3, #28]
			break;
    3ce8:	e008      	b.n	3cfc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3cea:	4b07      	ldr	r3, [pc, #28]	; (3d08 <system_apb_clock_set_mask+0x58>)
    3cec:	4a06      	ldr	r2, [pc, #24]	; (3d08 <system_apb_clock_set_mask+0x58>)
    3cee:	6a11      	ldr	r1, [r2, #32]
    3cf0:	683a      	ldr	r2, [r7, #0]
    3cf2:	430a      	orrs	r2, r1
    3cf4:	621a      	str	r2, [r3, #32]
			break;
    3cf6:	e001      	b.n	3cfc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3cf8:	2317      	movs	r3, #23
    3cfa:	e000      	b.n	3cfe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3cfc:	2300      	movs	r3, #0
}
    3cfe:	0018      	movs	r0, r3
    3d00:	46bd      	mov	sp, r7
    3d02:	b002      	add	sp, #8
    3d04:	bd80      	pop	{r7, pc}
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	40000400 	.word	0x40000400

00003d0c <system_is_debugger_present>:
{
    3d0c:	b580      	push	{r7, lr}
    3d0e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3d10:	4b05      	ldr	r3, [pc, #20]	; (3d28 <system_is_debugger_present+0x1c>)
    3d12:	789b      	ldrb	r3, [r3, #2]
    3d14:	b2db      	uxtb	r3, r3
    3d16:	001a      	movs	r2, r3
    3d18:	2302      	movs	r3, #2
    3d1a:	4013      	ands	r3, r2
    3d1c:	1e5a      	subs	r2, r3, #1
    3d1e:	4193      	sbcs	r3, r2
    3d20:	b2db      	uxtb	r3, r3
}
    3d22:	0018      	movs	r0, r3
    3d24:	46bd      	mov	sp, r7
    3d26:	bd80      	pop	{r7, pc}
    3d28:	41002000 	.word	0x41002000

00003d2c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b084      	sub	sp, #16
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d34:	687b      	ldr	r3, [r7, #4]
    3d36:	681b      	ldr	r3, [r3, #0]
    3d38:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d3a:	68fb      	ldr	r3, [r7, #12]
    3d3c:	7e1b      	ldrb	r3, [r3, #24]
    3d3e:	b2db      	uxtb	r3, r3
    3d40:	001a      	movs	r2, r3
    3d42:	2302      	movs	r3, #2
    3d44:	4013      	ands	r3, r2
    3d46:	1e5a      	subs	r2, r3, #1
    3d48:	4193      	sbcs	r3, r2
    3d4a:	b2db      	uxtb	r3, r3
}
    3d4c:	0018      	movs	r0, r3
    3d4e:	46bd      	mov	sp, r7
    3d50:	b004      	add	sp, #16
    3d52:	bd80      	pop	{r7, pc}

00003d54 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    3d54:	b580      	push	{r7, lr}
    3d56:	b084      	sub	sp, #16
    3d58:	af00      	add	r7, sp, #0
    3d5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d5c:	687b      	ldr	r3, [r7, #4]
    3d5e:	681b      	ldr	r3, [r3, #0]
    3d60:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d62:	68fb      	ldr	r3, [r7, #12]
    3d64:	7e1b      	ldrb	r3, [r3, #24]
    3d66:	b2db      	uxtb	r3, r3
    3d68:	001a      	movs	r2, r3
    3d6a:	2301      	movs	r3, #1
    3d6c:	4013      	ands	r3, r2
    3d6e:	1e5a      	subs	r2, r3, #1
    3d70:	4193      	sbcs	r3, r2
    3d72:	b2db      	uxtb	r3, r3
}
    3d74:	0018      	movs	r0, r3
    3d76:	46bd      	mov	sp, r7
    3d78:	b004      	add	sp, #16
    3d7a:	bd80      	pop	{r7, pc}

00003d7c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    3d7c:	b580      	push	{r7, lr}
    3d7e:	b084      	sub	sp, #16
    3d80:	af00      	add	r7, sp, #0
    3d82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d84:	687b      	ldr	r3, [r7, #4]
    3d86:	681b      	ldr	r3, [r3, #0]
    3d88:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d8a:	68fb      	ldr	r3, [r7, #12]
    3d8c:	7e1b      	ldrb	r3, [r3, #24]
    3d8e:	b2db      	uxtb	r3, r3
    3d90:	001a      	movs	r2, r3
    3d92:	2304      	movs	r3, #4
    3d94:	4013      	ands	r3, r2
    3d96:	1e5a      	subs	r2, r3, #1
    3d98:	4193      	sbcs	r3, r2
    3d9a:	b2db      	uxtb	r3, r3
}
    3d9c:	0018      	movs	r0, r3
    3d9e:	46bd      	mov	sp, r7
    3da0:	b004      	add	sp, #16
    3da2:	bd80      	pop	{r7, pc}

00003da4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    3da4:	b580      	push	{r7, lr}
    3da6:	b084      	sub	sp, #16
    3da8:	af00      	add	r7, sp, #0
    3daa:	6078      	str	r0, [r7, #4]
    3dac:	000a      	movs	r2, r1
    3dae:	1cbb      	adds	r3, r7, #2
    3db0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3db2:	687b      	ldr	r3, [r7, #4]
    3db4:	681b      	ldr	r3, [r3, #0]
    3db6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	0018      	movs	r0, r3
    3dbc:	4b0a      	ldr	r3, [pc, #40]	; (3de8 <spi_write+0x44>)
    3dbe:	4798      	blx	r3
    3dc0:	0003      	movs	r3, r0
    3dc2:	001a      	movs	r2, r3
    3dc4:	2301      	movs	r3, #1
    3dc6:	4053      	eors	r3, r2
    3dc8:	b2db      	uxtb	r3, r3
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d001      	beq.n	3dd2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3dce:	2305      	movs	r3, #5
    3dd0:	e006      	b.n	3de0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3dd2:	1cbb      	adds	r3, r7, #2
    3dd4:	881b      	ldrh	r3, [r3, #0]
    3dd6:	05db      	lsls	r3, r3, #23
    3dd8:	0dda      	lsrs	r2, r3, #23
    3dda:	68fb      	ldr	r3, [r7, #12]
    3ddc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    3dde:	2300      	movs	r3, #0
}
    3de0:	0018      	movs	r0, r3
    3de2:	46bd      	mov	sp, r7
    3de4:	b004      	add	sp, #16
    3de6:	bd80      	pop	{r7, pc}
    3de8:	00003d55 	.word	0x00003d55

00003dec <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    3dec:	b580      	push	{r7, lr}
    3dee:	b084      	sub	sp, #16
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
    3df4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	681b      	ldr	r3, [r3, #0]
    3dfa:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	0018      	movs	r0, r3
    3e00:	4b1b      	ldr	r3, [pc, #108]	; (3e70 <spi_read+0x84>)
    3e02:	4798      	blx	r3
    3e04:	0003      	movs	r3, r0
    3e06:	001a      	movs	r2, r3
    3e08:	2301      	movs	r3, #1
    3e0a:	4053      	eors	r3, r2
    3e0c:	b2db      	uxtb	r3, r3
    3e0e:	2b00      	cmp	r3, #0
    3e10:	d001      	beq.n	3e16 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    3e12:	2310      	movs	r3, #16
    3e14:	e027      	b.n	3e66 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    3e16:	230f      	movs	r3, #15
    3e18:	18fb      	adds	r3, r7, r3
    3e1a:	2200      	movs	r2, #0
    3e1c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e1e:	68bb      	ldr	r3, [r7, #8]
    3e20:	8b5b      	ldrh	r3, [r3, #26]
    3e22:	b29b      	uxth	r3, r3
    3e24:	001a      	movs	r2, r3
    3e26:	2304      	movs	r3, #4
    3e28:	4013      	ands	r3, r2
    3e2a:	d006      	beq.n	3e3a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3e2c:	230f      	movs	r3, #15
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	221e      	movs	r2, #30
    3e32:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e34:	68bb      	ldr	r3, [r7, #8]
    3e36:	2204      	movs	r2, #4
    3e38:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	799b      	ldrb	r3, [r3, #6]
    3e3e:	2b01      	cmp	r3, #1
    3e40:	d108      	bne.n	3e54 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3e42:	68bb      	ldr	r3, [r7, #8]
    3e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e46:	b29b      	uxth	r3, r3
    3e48:	05db      	lsls	r3, r3, #23
    3e4a:	0ddb      	lsrs	r3, r3, #23
    3e4c:	b29a      	uxth	r2, r3
    3e4e:	683b      	ldr	r3, [r7, #0]
    3e50:	801a      	strh	r2, [r3, #0]
    3e52:	e005      	b.n	3e60 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e54:	68bb      	ldr	r3, [r7, #8]
    3e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e58:	b2db      	uxtb	r3, r3
    3e5a:	b29a      	uxth	r2, r3
    3e5c:	683b      	ldr	r3, [r7, #0]
    3e5e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    3e60:	230f      	movs	r3, #15
    3e62:	18fb      	adds	r3, r7, r3
    3e64:	781b      	ldrb	r3, [r3, #0]
}
    3e66:	0018      	movs	r0, r3
    3e68:	46bd      	mov	sp, r7
    3e6a:	b004      	add	sp, #16
    3e6c:	bd80      	pop	{r7, pc}
    3e6e:	46c0      	nop			; (mov r8, r8)
    3e70:	00003d7d 	.word	0x00003d7d

00003e74 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    3e74:	b580      	push	{r7, lr}
    3e76:	b084      	sub	sp, #16
    3e78:	af00      	add	r7, sp, #0
    3e7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	681b      	ldr	r3, [r3, #0]
    3e80:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3e82:	68fb      	ldr	r3, [r7, #12]
    3e84:	2202      	movs	r2, #2
    3e86:	761a      	strb	r2, [r3, #24]
}
    3e88:	46c0      	nop			; (mov r8, r8)
    3e8a:	46bd      	mov	sp, r7
    3e8c:	b004      	add	sp, #16
    3e8e:	bd80      	pop	{r7, pc}

00003e90 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    3e90:	b590      	push	{r4, r7, lr}
    3e92:	b093      	sub	sp, #76	; 0x4c
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
    3e98:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e9a:	687b      	ldr	r3, [r7, #4]
    3e9c:	681b      	ldr	r3, [r3, #0]
    3e9e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	681b      	ldr	r3, [r3, #0]
    3ea4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3ea6:	231c      	movs	r3, #28
    3ea8:	18fb      	adds	r3, r7, r3
    3eaa:	0018      	movs	r0, r3
    3eac:	4b85      	ldr	r3, [pc, #532]	; (40c4 <_spi_set_config+0x234>)
    3eae:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3eb0:	231c      	movs	r3, #28
    3eb2:	18fb      	adds	r3, r7, r3
    3eb4:	2200      	movs	r2, #0
    3eb6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    3eb8:	683b      	ldr	r3, [r7, #0]
    3eba:	781b      	ldrb	r3, [r3, #0]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d103      	bne.n	3ec8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3ec0:	231c      	movs	r3, #28
    3ec2:	18fb      	adds	r3, r7, r3
    3ec4:	2200      	movs	r2, #0
    3ec6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3ec8:	683b      	ldr	r3, [r7, #0]
    3eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    3ecc:	230c      	movs	r3, #12
    3ece:	18fb      	adds	r3, r7, r3
    3ed0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    3ed2:	683b      	ldr	r3, [r7, #0]
    3ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    3ed6:	230c      	movs	r3, #12
    3ed8:	18fb      	adds	r3, r7, r3
    3eda:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    3edc:	683b      	ldr	r3, [r7, #0]
    3ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    3ee0:	230c      	movs	r3, #12
    3ee2:	18fb      	adds	r3, r7, r3
    3ee4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    3ee6:	683b      	ldr	r3, [r7, #0]
    3ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    3eea:	230c      	movs	r3, #12
    3eec:	18fb      	adds	r3, r7, r3
    3eee:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3ef0:	2347      	movs	r3, #71	; 0x47
    3ef2:	18fb      	adds	r3, r7, r3
    3ef4:	2200      	movs	r2, #0
    3ef6:	701a      	strb	r2, [r3, #0]
    3ef8:	e02c      	b.n	3f54 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3efa:	2347      	movs	r3, #71	; 0x47
    3efc:	18fb      	adds	r3, r7, r3
    3efe:	781a      	ldrb	r2, [r3, #0]
    3f00:	230c      	movs	r3, #12
    3f02:	18fb      	adds	r3, r7, r3
    3f04:	0092      	lsls	r2, r2, #2
    3f06:	58d3      	ldr	r3, [r2, r3]
    3f08:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    3f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d109      	bne.n	3f24 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3f10:	2347      	movs	r3, #71	; 0x47
    3f12:	18fb      	adds	r3, r7, r3
    3f14:	781a      	ldrb	r2, [r3, #0]
    3f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3f18:	0011      	movs	r1, r2
    3f1a:	0018      	movs	r0, r3
    3f1c:	4b6a      	ldr	r3, [pc, #424]	; (40c8 <_spi_set_config+0x238>)
    3f1e:	4798      	blx	r3
    3f20:	0003      	movs	r3, r0
    3f22:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3f26:	3301      	adds	r3, #1
    3f28:	d00d      	beq.n	3f46 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3f2c:	b2da      	uxtb	r2, r3
    3f2e:	231c      	movs	r3, #28
    3f30:	18fb      	adds	r3, r7, r3
    3f32:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3f36:	0c1b      	lsrs	r3, r3, #16
    3f38:	b2db      	uxtb	r3, r3
    3f3a:	221c      	movs	r2, #28
    3f3c:	18ba      	adds	r2, r7, r2
    3f3e:	0011      	movs	r1, r2
    3f40:	0018      	movs	r0, r3
    3f42:	4b62      	ldr	r3, [pc, #392]	; (40cc <_spi_set_config+0x23c>)
    3f44:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    3f46:	2347      	movs	r3, #71	; 0x47
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	781a      	ldrb	r2, [r3, #0]
    3f4c:	2347      	movs	r3, #71	; 0x47
    3f4e:	18fb      	adds	r3, r7, r3
    3f50:	3201      	adds	r2, #1
    3f52:	701a      	strb	r2, [r3, #0]
    3f54:	2347      	movs	r3, #71	; 0x47
    3f56:	18fb      	adds	r3, r7, r3
    3f58:	781b      	ldrb	r3, [r3, #0]
    3f5a:	2b03      	cmp	r3, #3
    3f5c:	d9cd      	bls.n	3efa <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    3f5e:	683b      	ldr	r3, [r7, #0]
    3f60:	781a      	ldrb	r2, [r3, #0]
    3f62:	687b      	ldr	r3, [r7, #4]
    3f64:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    3f66:	683b      	ldr	r3, [r7, #0]
    3f68:	7c1a      	ldrb	r2, [r3, #16]
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    3f6e:	683b      	ldr	r3, [r7, #0]
    3f70:	7c9a      	ldrb	r2, [r3, #18]
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3f76:	683b      	ldr	r3, [r7, #0]
    3f78:	7d1a      	ldrb	r2, [r3, #20]
    3f7a:	687b      	ldr	r3, [r7, #4]
    3f7c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    3f7e:	230a      	movs	r3, #10
    3f80:	18fb      	adds	r3, r7, r3
    3f82:	2200      	movs	r2, #0
    3f84:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    3f86:	2300      	movs	r3, #0
    3f88:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    3f8a:	2300      	movs	r3, #0
    3f8c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    3f8e:	683b      	ldr	r3, [r7, #0]
    3f90:	781b      	ldrb	r3, [r3, #0]
    3f92:	2b01      	cmp	r3, #1
    3f94:	d129      	bne.n	3fea <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	681b      	ldr	r3, [r3, #0]
    3f9a:	0018      	movs	r0, r3
    3f9c:	4b4c      	ldr	r3, [pc, #304]	; (40d0 <_spi_set_config+0x240>)
    3f9e:	4798      	blx	r3
    3fa0:	0003      	movs	r3, r0
    3fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fa6:	3314      	adds	r3, #20
    3fa8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fac:	b2db      	uxtb	r3, r3
    3fae:	0018      	movs	r0, r3
    3fb0:	4b48      	ldr	r3, [pc, #288]	; (40d4 <_spi_set_config+0x244>)
    3fb2:	4798      	blx	r3
    3fb4:	0003      	movs	r3, r0
    3fb6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3fb8:	683b      	ldr	r3, [r7, #0]
    3fba:	699b      	ldr	r3, [r3, #24]
    3fbc:	2223      	movs	r2, #35	; 0x23
    3fbe:	18bc      	adds	r4, r7, r2
    3fc0:	220a      	movs	r2, #10
    3fc2:	18ba      	adds	r2, r7, r2
    3fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3fc6:	0018      	movs	r0, r3
    3fc8:	4b43      	ldr	r3, [pc, #268]	; (40d8 <_spi_set_config+0x248>)
    3fca:	4798      	blx	r3
    3fcc:	0003      	movs	r3, r0
    3fce:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3fd0:	2323      	movs	r3, #35	; 0x23
    3fd2:	18fb      	adds	r3, r7, r3
    3fd4:	781b      	ldrb	r3, [r3, #0]
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d001      	beq.n	3fde <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3fda:	2317      	movs	r3, #23
    3fdc:	e06d      	b.n	40ba <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    3fde:	230a      	movs	r3, #10
    3fe0:	18fb      	adds	r3, r7, r3
    3fe2:	881b      	ldrh	r3, [r3, #0]
    3fe4:	b2da      	uxtb	r2, r3
    3fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fe8:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    3fea:	683b      	ldr	r3, [r7, #0]
    3fec:	781b      	ldrb	r3, [r3, #0]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d11a      	bne.n	4028 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    3ff2:	683b      	ldr	r3, [r7, #0]
    3ff4:	699b      	ldr	r3, [r3, #24]
    3ff6:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    3ff8:	683b      	ldr	r3, [r7, #0]
    3ffa:	8b9b      	ldrh	r3, [r3, #28]
    3ffc:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    3ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4002:	683a      	ldr	r2, [r7, #0]
    4004:	7f92      	ldrb	r2, [r2, #30]
    4006:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    4008:	683a      	ldr	r2, [r7, #0]
    400a:	7fd2      	ldrb	r2, [r2, #31]
    400c:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    400e:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    4010:	431a      	orrs	r2, r3
    4012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4014:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    4016:	683b      	ldr	r3, [r7, #0]
    4018:	2220      	movs	r2, #32
    401a:	5c9b      	ldrb	r3, [r3, r2]
    401c:	2b00      	cmp	r3, #0
    401e:	d003      	beq.n	4028 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    4020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4022:	2240      	movs	r2, #64	; 0x40
    4024:	4313      	orrs	r3, r2
    4026:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    4028:	683b      	ldr	r3, [r7, #0]
    402a:	685b      	ldr	r3, [r3, #4]
    402c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    402e:	4313      	orrs	r3, r2
    4030:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4032:	683b      	ldr	r3, [r7, #0]
    4034:	689b      	ldr	r3, [r3, #8]
    4036:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4038:	4313      	orrs	r3, r2
    403a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    403c:	683b      	ldr	r3, [r7, #0]
    403e:	68db      	ldr	r3, [r3, #12]
    4040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4042:	4313      	orrs	r3, r2
    4044:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4046:	683b      	ldr	r3, [r7, #0]
    4048:	7c1b      	ldrb	r3, [r3, #16]
    404a:	001a      	movs	r2, r3
    404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    404e:	4313      	orrs	r3, r2
    4050:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4052:	683b      	ldr	r3, [r7, #0]
    4054:	7c5b      	ldrb	r3, [r3, #17]
    4056:	2b00      	cmp	r3, #0
    4058:	d103      	bne.n	4062 <_spi_set_config+0x1d2>
    405a:	4b20      	ldr	r3, [pc, #128]	; (40dc <_spi_set_config+0x24c>)
    405c:	4798      	blx	r3
    405e:	1e03      	subs	r3, r0, #0
    4060:	d003      	beq.n	406a <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4064:	2280      	movs	r2, #128	; 0x80
    4066:	4313      	orrs	r3, r2
    4068:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    406a:	683b      	ldr	r3, [r7, #0]
    406c:	7c9b      	ldrb	r3, [r3, #18]
    406e:	2b00      	cmp	r3, #0
    4070:	d004      	beq.n	407c <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4074:	2280      	movs	r2, #128	; 0x80
    4076:	0292      	lsls	r2, r2, #10
    4078:	4313      	orrs	r3, r2
    407a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    407c:	683b      	ldr	r3, [r7, #0]
    407e:	7cdb      	ldrb	r3, [r3, #19]
    4080:	2b00      	cmp	r3, #0
    4082:	d004      	beq.n	408e <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4086:	2280      	movs	r2, #128	; 0x80
    4088:	0092      	lsls	r2, r2, #2
    408a:	4313      	orrs	r3, r2
    408c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    408e:	683b      	ldr	r3, [r7, #0]
    4090:	7d1b      	ldrb	r3, [r3, #20]
    4092:	2b00      	cmp	r3, #0
    4094:	d004      	beq.n	40a0 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4098:	2280      	movs	r2, #128	; 0x80
    409a:	0192      	lsls	r2, r2, #6
    409c:	4313      	orrs	r3, r2
    409e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    40a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40a2:	681a      	ldr	r2, [r3, #0]
    40a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    40a6:	431a      	orrs	r2, r3
    40a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40aa:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    40ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40ae:	685a      	ldr	r2, [r3, #4]
    40b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    40b2:	431a      	orrs	r2, r3
    40b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40b6:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    40b8:	2300      	movs	r3, #0
}
    40ba:	0018      	movs	r0, r3
    40bc:	46bd      	mov	sp, r7
    40be:	b013      	add	sp, #76	; 0x4c
    40c0:	bd90      	pop	{r4, r7, pc}
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	00003b1d 	.word	0x00003b1d
    40c8:	00000e71 	.word	0x00000e71
    40cc:	000057bd 	.word	0x000057bd
    40d0:	0000102d 	.word	0x0000102d
    40d4:	000055f5 	.word	0x000055f5
    40d8:	00000ba7 	.word	0x00000ba7
    40dc:	00003d0d 	.word	0x00003d0d

000040e0 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    40e0:	b590      	push	{r4, r7, lr}
    40e2:	b091      	sub	sp, #68	; 0x44
    40e4:	af00      	add	r7, sp, #0
    40e6:	6078      	str	r0, [r7, #4]
    40e8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    40f6:	683b      	ldr	r3, [r7, #0]
    40f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    40fa:	230c      	movs	r3, #12
    40fc:	18fb      	adds	r3, r7, r3
    40fe:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    4100:	683b      	ldr	r3, [r7, #0]
    4102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    4104:	230c      	movs	r3, #12
    4106:	18fb      	adds	r3, r7, r3
    4108:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
    410a:	683b      	ldr	r3, [r7, #0]
    410c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    410e:	230c      	movs	r3, #12
    4110:	18fb      	adds	r3, r7, r3
    4112:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
    4114:	683b      	ldr	r3, [r7, #0]
    4116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4118:	230c      	movs	r3, #12
    411a:	18fb      	adds	r3, r7, r3
    411c:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    411e:	233f      	movs	r3, #63	; 0x3f
    4120:	18fb      	adds	r3, r7, r3
    4122:	2200      	movs	r2, #0
    4124:	701a      	strb	r2, [r3, #0]
    4126:	e030      	b.n	418a <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4128:	233f      	movs	r3, #63	; 0x3f
    412a:	18fb      	adds	r3, r7, r3
    412c:	781a      	ldrb	r2, [r3, #0]
    412e:	230c      	movs	r3, #12
    4130:	18fb      	adds	r3, r7, r3
    4132:	0092      	lsls	r2, r2, #2
    4134:	58d3      	ldr	r3, [r2, r3]
    4136:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    4138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    413a:	2b00      	cmp	r3, #0
    413c:	d109      	bne.n	4152 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    413e:	233f      	movs	r3, #63	; 0x3f
    4140:	18fb      	adds	r3, r7, r3
    4142:	781a      	ldrb	r2, [r3, #0]
    4144:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4146:	0011      	movs	r1, r2
    4148:	0018      	movs	r0, r3
    414a:	4b6e      	ldr	r3, [pc, #440]	; (4304 <_spi_check_config+0x224>)
    414c:	4798      	blx	r3
    414e:	0003      	movs	r3, r0
    4150:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    4152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4154:	3301      	adds	r3, #1
    4156:	d010      	beq.n	417a <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    4158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    415a:	041b      	lsls	r3, r3, #16
    415c:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4160:	0c1b      	lsrs	r3, r3, #16
    4162:	b2db      	uxtb	r3, r3
    4164:	0018      	movs	r0, r3
    4166:	4b68      	ldr	r3, [pc, #416]	; (4308 <_spi_check_config+0x228>)
    4168:	4798      	blx	r3
    416a:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
    416c:	429c      	cmp	r4, r3
    416e:	d005      	beq.n	417c <_spi_check_config+0x9c>
			module->hw = NULL;
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	2200      	movs	r2, #0
    4174:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    4176:	231c      	movs	r3, #28
    4178:	e0bf      	b.n	42fa <_spi_check_config+0x21a>
			continue;
    417a:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
    417c:	233f      	movs	r3, #63	; 0x3f
    417e:	18fb      	adds	r3, r7, r3
    4180:	781a      	ldrb	r2, [r3, #0]
    4182:	233f      	movs	r3, #63	; 0x3f
    4184:	18fb      	adds	r3, r7, r3
    4186:	3201      	adds	r2, #1
    4188:	701a      	strb	r2, [r3, #0]
    418a:	233f      	movs	r3, #63	; 0x3f
    418c:	18fb      	adds	r3, r7, r3
    418e:	781b      	ldrb	r3, [r3, #0]
    4190:	2b03      	cmp	r3, #3
    4192:	d9c9      	bls.n	4128 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    4194:	2013      	movs	r0, #19
    4196:	4b5d      	ldr	r3, [pc, #372]	; (430c <_spi_check_config+0x22c>)
    4198:	4798      	blx	r3
    419a:	0003      	movs	r3, r0
    419c:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    419e:	2300      	movs	r3, #0
    41a0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    41a2:	2300      	movs	r3, #0
    41a4:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    41a6:	2300      	movs	r3, #0
    41a8:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    41aa:	683b      	ldr	r3, [r7, #0]
    41ac:	781b      	ldrb	r3, [r3, #0]
    41ae:	2b01      	cmp	r3, #1
    41b0:	d121      	bne.n	41f6 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
    41b2:	683b      	ldr	r3, [r7, #0]
    41b4:	699b      	ldr	r3, [r3, #24]
    41b6:	221f      	movs	r2, #31
    41b8:	18bc      	adds	r4, r7, r2
    41ba:	220a      	movs	r2, #10
    41bc:	18ba      	adds	r2, r7, r2
    41be:	6a79      	ldr	r1, [r7, #36]	; 0x24
    41c0:	0018      	movs	r0, r3
    41c2:	4b53      	ldr	r3, [pc, #332]	; (4310 <_spi_check_config+0x230>)
    41c4:	4798      	blx	r3
    41c6:	0003      	movs	r3, r0
    41c8:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    41ca:	231f      	movs	r3, #31
    41cc:	18fb      	adds	r3, r7, r3
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	2b00      	cmp	r3, #0
    41d2:	d001      	beq.n	41d8 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    41d4:	2317      	movs	r3, #23
    41d6:	e090      	b.n	42fa <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    41d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    41da:	7b1b      	ldrb	r3, [r3, #12]
    41dc:	b2da      	uxtb	r2, r3
    41de:	230a      	movs	r3, #10
    41e0:	18fb      	adds	r3, r7, r3
    41e2:	881b      	ldrh	r3, [r3, #0]
    41e4:	b2db      	uxtb	r3, r3
    41e6:	429a      	cmp	r2, r3
    41e8:	d001      	beq.n	41ee <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
    41ea:	231c      	movs	r3, #28
    41ec:	e085      	b.n	42fa <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    41ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41f0:	220c      	movs	r2, #12
    41f2:	4313      	orrs	r3, r2
    41f4:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    41f6:	683b      	ldr	r3, [r7, #0]
    41f8:	781b      	ldrb	r3, [r3, #0]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d129      	bne.n	4252 <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    41fe:	683b      	ldr	r3, [r7, #0]
    4200:	699b      	ldr	r3, [r3, #24]
    4202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4204:	4313      	orrs	r3, r2
    4206:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    4208:	683b      	ldr	r3, [r7, #0]
    420a:	8b9b      	ldrh	r3, [r3, #28]
    420c:	001a      	movs	r2, r3
    420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4210:	4313      	orrs	r3, r2
    4212:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4214:	683b      	ldr	r3, [r7, #0]
    4216:	7f9b      	ldrb	r3, [r3, #30]
    4218:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    421a:	683b      	ldr	r3, [r7, #0]
    421c:	7fdb      	ldrb	r3, [r3, #31]
    421e:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4220:	4313      	orrs	r3, r2
    4222:	001a      	movs	r2, r3
    4224:	6a3b      	ldr	r3, [r7, #32]
    4226:	4313      	orrs	r3, r2
    4228:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
    422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    422c:	681a      	ldr	r2, [r3, #0]
    422e:	6a3b      	ldr	r3, [r7, #32]
    4230:	429a      	cmp	r2, r3
    4232:	d001      	beq.n	4238 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    4234:	231c      	movs	r3, #28
    4236:	e060      	b.n	42fa <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
    4238:	683b      	ldr	r3, [r7, #0]
    423a:	2220      	movs	r2, #32
    423c:	5c9b      	ldrb	r3, [r3, r2]
    423e:	2b00      	cmp	r3, #0
    4240:	d003      	beq.n	424a <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    4242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4244:	2240      	movs	r2, #64	; 0x40
    4246:	4313      	orrs	r3, r2
    4248:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    424a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    424c:	2208      	movs	r2, #8
    424e:	4313      	orrs	r3, r2
    4250:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    4252:	683b      	ldr	r3, [r7, #0]
    4254:	685b      	ldr	r3, [r3, #4]
    4256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4258:	4313      	orrs	r3, r2
    425a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    425c:	683b      	ldr	r3, [r7, #0]
    425e:	689b      	ldr	r3, [r3, #8]
    4260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4262:	4313      	orrs	r3, r2
    4264:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    4266:	683b      	ldr	r3, [r7, #0]
    4268:	68db      	ldr	r3, [r3, #12]
    426a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    426c:	4313      	orrs	r3, r2
    426e:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4270:	683b      	ldr	r3, [r7, #0]
    4272:	7c1b      	ldrb	r3, [r3, #16]
    4274:	001a      	movs	r2, r3
    4276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4278:	4313      	orrs	r3, r2
    427a:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    427c:	683b      	ldr	r3, [r7, #0]
    427e:	7c5b      	ldrb	r3, [r3, #17]
    4280:	2b00      	cmp	r3, #0
    4282:	d003      	beq.n	428c <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4286:	2280      	movs	r2, #128	; 0x80
    4288:	4313      	orrs	r3, r2
    428a:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    428c:	683b      	ldr	r3, [r7, #0]
    428e:	7c9b      	ldrb	r3, [r3, #18]
    4290:	2b00      	cmp	r3, #0
    4292:	d004      	beq.n	429e <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4296:	2280      	movs	r2, #128	; 0x80
    4298:	0292      	lsls	r2, r2, #10
    429a:	4313      	orrs	r3, r2
    429c:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    429e:	683b      	ldr	r3, [r7, #0]
    42a0:	7cdb      	ldrb	r3, [r3, #19]
    42a2:	2b00      	cmp	r3, #0
    42a4:	d004      	beq.n	42b0 <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    42a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    42a8:	2280      	movs	r2, #128	; 0x80
    42aa:	0092      	lsls	r2, r2, #2
    42ac:	4313      	orrs	r3, r2
    42ae:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    42b0:	683b      	ldr	r3, [r7, #0]
    42b2:	7d1b      	ldrb	r3, [r3, #20]
    42b4:	2b00      	cmp	r3, #0
    42b6:	d004      	beq.n	42c2 <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    42b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    42ba:	2280      	movs	r2, #128	; 0x80
    42bc:	0192      	lsls	r2, r2, #6
    42be:	4313      	orrs	r3, r2
    42c0:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    42c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42c4:	2202      	movs	r2, #2
    42c6:	4313      	orrs	r3, r2
    42c8:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    42ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    42cc:	681a      	ldr	r2, [r3, #0]
    42ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42d0:	429a      	cmp	r2, r3
    42d2:	d10e      	bne.n	42f2 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    42d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    42d6:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    42d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    42da:	429a      	cmp	r2, r3
    42dc:	d109      	bne.n	42f2 <_spi_check_config+0x212>
		module->mode           = config->mode;
    42de:	683b      	ldr	r3, [r7, #0]
    42e0:	781a      	ldrb	r2, [r3, #0]
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    42e6:	683b      	ldr	r3, [r7, #0]
    42e8:	7c1a      	ldrb	r2, [r3, #16]
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    42ee:	2300      	movs	r3, #0
    42f0:	e003      	b.n	42fa <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    42f2:	687b      	ldr	r3, [r7, #4]
    42f4:	2200      	movs	r2, #0
    42f6:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    42f8:	231c      	movs	r3, #28
}
    42fa:	0018      	movs	r0, r3
    42fc:	46bd      	mov	sp, r7
    42fe:	b011      	add	sp, #68	; 0x44
    4300:	bd90      	pop	{r4, r7, pc}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	00000e71 	.word	0x00000e71
    4308:	00003ba5 	.word	0x00003ba5
    430c:	000055f5 	.word	0x000055f5
    4310:	00000ba7 	.word	0x00000ba7

00004314 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4314:	b580      	push	{r7, lr}
    4316:	b08a      	sub	sp, #40	; 0x28
    4318:	af00      	add	r7, sp, #0
    431a:	60f8      	str	r0, [r7, #12]
    431c:	60b9      	str	r1, [r7, #8]
    431e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4320:	68fb      	ldr	r3, [r7, #12]
    4322:	68ba      	ldr	r2, [r7, #8]
    4324:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4326:	68fb      	ldr	r3, [r7, #12]
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    432e:	681b      	ldr	r3, [r3, #0]
    4330:	2202      	movs	r2, #2
    4332:	4013      	ands	r3, r2
    4334:	d007      	beq.n	4346 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    4336:	687a      	ldr	r2, [r7, #4]
    4338:	68fb      	ldr	r3, [r7, #12]
    433a:	0011      	movs	r1, r2
    433c:	0018      	movs	r0, r3
    433e:	4b2f      	ldr	r3, [pc, #188]	; (43fc <spi_init+0xe8>)
    4340:	4798      	blx	r3
    4342:	0003      	movs	r3, r0
    4344:	e055      	b.n	43f2 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	2201      	movs	r2, #1
    434c:	4013      	ands	r3, r2
    434e:	d001      	beq.n	4354 <spi_init+0x40>
		return STATUS_BUSY;
    4350:	2305      	movs	r3, #5
    4352:	e04e      	b.n	43f2 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4354:	68fb      	ldr	r3, [r7, #12]
    4356:	681b      	ldr	r3, [r3, #0]
    4358:	0018      	movs	r0, r3
    435a:	4b29      	ldr	r3, [pc, #164]	; (4400 <spi_init+0xec>)
    435c:	4798      	blx	r3
    435e:	0003      	movs	r3, r0
    4360:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4362:	6a3b      	ldr	r3, [r7, #32]
    4364:	3302      	adds	r3, #2
    4366:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4368:	6a3b      	ldr	r3, [r7, #32]
    436a:	3314      	adds	r3, #20
    436c:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    436e:	2201      	movs	r2, #1
    4370:	69fb      	ldr	r3, [r7, #28]
    4372:	409a      	lsls	r2, r3
    4374:	0013      	movs	r3, r2
    4376:	0019      	movs	r1, r3
    4378:	2002      	movs	r0, #2
    437a:	4b22      	ldr	r3, [pc, #136]	; (4404 <spi_init+0xf0>)
    437c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    437e:	2314      	movs	r3, #20
    4380:	18fb      	adds	r3, r7, r3
    4382:	0018      	movs	r0, r3
    4384:	4b20      	ldr	r3, [pc, #128]	; (4408 <spi_init+0xf4>)
    4386:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	2224      	movs	r2, #36	; 0x24
    438c:	5c9a      	ldrb	r2, [r3, r2]
    438e:	2314      	movs	r3, #20
    4390:	18fb      	adds	r3, r7, r3
    4392:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4394:	69bb      	ldr	r3, [r7, #24]
    4396:	b2db      	uxtb	r3, r3
    4398:	2214      	movs	r2, #20
    439a:	18ba      	adds	r2, r7, r2
    439c:	0011      	movs	r1, r2
    439e:	0018      	movs	r0, r3
    43a0:	4b1a      	ldr	r3, [pc, #104]	; (440c <spi_init+0xf8>)
    43a2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    43a4:	69bb      	ldr	r3, [r7, #24]
    43a6:	b2db      	uxtb	r3, r3
    43a8:	0018      	movs	r0, r3
    43aa:	4b19      	ldr	r3, [pc, #100]	; (4410 <spi_init+0xfc>)
    43ac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	2224      	movs	r2, #36	; 0x24
    43b2:	5c9b      	ldrb	r3, [r3, r2]
    43b4:	2100      	movs	r1, #0
    43b6:	0018      	movs	r0, r3
    43b8:	4b16      	ldr	r3, [pc, #88]	; (4414 <spi_init+0x100>)
    43ba:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	781b      	ldrb	r3, [r3, #0]
    43c0:	2b01      	cmp	r3, #1
    43c2:	d105      	bne.n	43d0 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    43c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    43c6:	681b      	ldr	r3, [r3, #0]
    43c8:	220c      	movs	r2, #12
    43ca:	431a      	orrs	r2, r3
    43cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    43ce:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    43d0:	687b      	ldr	r3, [r7, #4]
    43d2:	781b      	ldrb	r3, [r3, #0]
    43d4:	2b00      	cmp	r3, #0
    43d6:	d105      	bne.n	43e4 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    43d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    43da:	681b      	ldr	r3, [r3, #0]
    43dc:	2208      	movs	r2, #8
    43de:	431a      	orrs	r2, r3
    43e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    43e2:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    43e4:	687a      	ldr	r2, [r7, #4]
    43e6:	68fb      	ldr	r3, [r7, #12]
    43e8:	0011      	movs	r1, r2
    43ea:	0018      	movs	r0, r3
    43ec:	4b0a      	ldr	r3, [pc, #40]	; (4418 <spi_init+0x104>)
    43ee:	4798      	blx	r3
    43f0:	0003      	movs	r3, r0
}
    43f2:	0018      	movs	r0, r3
    43f4:	46bd      	mov	sp, r7
    43f6:	b00a      	add	sp, #40	; 0x28
    43f8:	bd80      	pop	{r7, pc}
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	000040e1 	.word	0x000040e1
    4400:	0000102d 	.word	0x0000102d
    4404:	00003cb1 	.word	0x00003cb1
    4408:	00003c99 	.word	0x00003c99
    440c:	000054d1 	.word	0x000054d1
    4410:	00005515 	.word	0x00005515
    4414:	00000de5 	.word	0x00000de5
    4418:	00003e91 	.word	0x00003e91

0000441c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    441c:	b590      	push	{r4, r7, lr}
    441e:	b089      	sub	sp, #36	; 0x24
    4420:	af00      	add	r7, sp, #0
    4422:	60f8      	str	r0, [r7, #12]
    4424:	60b9      	str	r1, [r7, #8]
    4426:	0019      	movs	r1, r3
    4428:	1dbb      	adds	r3, r7, #6
    442a:	801a      	strh	r2, [r3, #0]
    442c:	1d3b      	adds	r3, r7, #4
    442e:	1c0a      	adds	r2, r1, #0
    4430:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    4432:	1dbb      	adds	r3, r7, #6
    4434:	881b      	ldrh	r3, [r3, #0]
    4436:	2b00      	cmp	r3, #0
    4438:	d101      	bne.n	443e <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
    443a:	2317      	movs	r3, #23
    443c:	e0b2      	b.n	45a4 <spi_read_buffer_wait+0x188>
	}

	if (!(module->receiver_enabled)) {
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	79db      	ldrb	r3, [r3, #7]
    4442:	2201      	movs	r2, #1
    4444:	4053      	eors	r3, r2
    4446:	b2db      	uxtb	r3, r3
    4448:	2b00      	cmp	r3, #0
    444a:	d001      	beq.n	4450 <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    444c:	231c      	movs	r3, #28
    444e:	e0a9      	b.n	45a4 <spi_read_buffer_wait+0x188>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    4450:	68fb      	ldr	r3, [r7, #12]
    4452:	795b      	ldrb	r3, [r3, #5]
    4454:	2b00      	cmp	r3, #0
    4456:	d109      	bne.n	446c <spi_read_buffer_wait+0x50>
    4458:	68fb      	ldr	r3, [r7, #12]
    445a:	0018      	movs	r0, r3
    445c:	4b53      	ldr	r3, [pc, #332]	; (45ac <spi_read_buffer_wait+0x190>)
    445e:	4798      	blx	r3
    4460:	1e03      	subs	r3, r0, #0
    4462:	d003      	beq.n	446c <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    4464:	68fb      	ldr	r3, [r7, #12]
    4466:	0018      	movs	r0, r3
    4468:	4b51      	ldr	r3, [pc, #324]	; (45b0 <spi_read_buffer_wait+0x194>)
    446a:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    446c:	231e      	movs	r3, #30
    446e:	18fb      	adds	r3, r7, r3
    4470:	2200      	movs	r2, #0
    4472:	801a      	strh	r2, [r3, #0]

	while (length--) {
    4474:	e08d      	b.n	4592 <spi_read_buffer_wait+0x176>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    4476:	68fb      	ldr	r3, [r7, #12]
    4478:	795b      	ldrb	r3, [r3, #5]
    447a:	2b01      	cmp	r3, #1
    447c:	d112      	bne.n	44a4 <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    447e:	46c0      	nop			; (mov r8, r8)
    4480:	68fb      	ldr	r3, [r7, #12]
    4482:	0018      	movs	r0, r3
    4484:	4b4b      	ldr	r3, [pc, #300]	; (45b4 <spi_read_buffer_wait+0x198>)
    4486:	4798      	blx	r3
    4488:	0003      	movs	r3, r0
    448a:	001a      	movs	r2, r3
    448c:	2301      	movs	r3, #1
    448e:	4053      	eors	r3, r2
    4490:	b2db      	uxtb	r3, r3
    4492:	2b00      	cmp	r3, #0
    4494:	d1f4      	bne.n	4480 <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    4496:	1d3b      	adds	r3, r7, #4
    4498:	881a      	ldrh	r2, [r3, #0]
    449a:	68fb      	ldr	r3, [r7, #12]
    449c:	0011      	movs	r1, r2
    449e:	0018      	movs	r0, r3
    44a0:	4b45      	ldr	r3, [pc, #276]	; (45b8 <spi_read_buffer_wait+0x19c>)
    44a2:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    44a4:	68fb      	ldr	r3, [r7, #12]
    44a6:	795b      	ldrb	r3, [r3, #5]
    44a8:	2b00      	cmp	r3, #0
    44aa:	d12a      	bne.n	4502 <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    44ac:	2300      	movs	r3, #0
    44ae:	61bb      	str	r3, [r7, #24]
    44b0:	e008      	b.n	44c4 <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
    44b2:	68fb      	ldr	r3, [r7, #12]
    44b4:	0018      	movs	r0, r3
    44b6:	4b41      	ldr	r3, [pc, #260]	; (45bc <spi_read_buffer_wait+0x1a0>)
    44b8:	4798      	blx	r3
    44ba:	1e03      	subs	r3, r0, #0
    44bc:	d107      	bne.n	44ce <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    44be:	69bb      	ldr	r3, [r7, #24]
    44c0:	3301      	adds	r3, #1
    44c2:	61bb      	str	r3, [r7, #24]
    44c4:	69bb      	ldr	r3, [r7, #24]
    44c6:	4a3e      	ldr	r2, [pc, #248]	; (45c0 <spi_read_buffer_wait+0x1a4>)
    44c8:	4293      	cmp	r3, r2
    44ca:	d9f2      	bls.n	44b2 <spi_read_buffer_wait+0x96>
    44cc:	e000      	b.n	44d0 <spi_read_buffer_wait+0xb4>
					break;
    44ce:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    44d0:	68fb      	ldr	r3, [r7, #12]
    44d2:	0018      	movs	r0, r3
    44d4:	4b35      	ldr	r3, [pc, #212]	; (45ac <spi_read_buffer_wait+0x190>)
    44d6:	4798      	blx	r3
    44d8:	1e03      	subs	r3, r0, #0
    44da:	d005      	beq.n	44e8 <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
    44dc:	68fb      	ldr	r3, [r7, #12]
    44de:	0018      	movs	r0, r3
    44e0:	4b33      	ldr	r3, [pc, #204]	; (45b0 <spi_read_buffer_wait+0x194>)
    44e2:	4798      	blx	r3
				return STATUS_ABORTED;
    44e4:	2304      	movs	r3, #4
    44e6:	e05d      	b.n	45a4 <spi_read_buffer_wait+0x188>
			}

			if (!spi_is_ready_to_read(module)) {
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	0018      	movs	r0, r3
    44ec:	4b33      	ldr	r3, [pc, #204]	; (45bc <spi_read_buffer_wait+0x1a0>)
    44ee:	4798      	blx	r3
    44f0:	0003      	movs	r3, r0
    44f2:	001a      	movs	r2, r3
    44f4:	2301      	movs	r3, #1
    44f6:	4053      	eors	r3, r2
    44f8:	b2db      	uxtb	r3, r3
    44fa:	2b00      	cmp	r3, #0
    44fc:	d001      	beq.n	4502 <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    44fe:	2312      	movs	r3, #18
    4500:	e050      	b.n	45a4 <spi_read_buffer_wait+0x188>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    4502:	46c0      	nop			; (mov r8, r8)
    4504:	68fb      	ldr	r3, [r7, #12]
    4506:	0018      	movs	r0, r3
    4508:	4b2c      	ldr	r3, [pc, #176]	; (45bc <spi_read_buffer_wait+0x1a0>)
    450a:	4798      	blx	r3
    450c:	0003      	movs	r3, r0
    450e:	001a      	movs	r2, r3
    4510:	2301      	movs	r3, #1
    4512:	4053      	eors	r3, r2
    4514:	b2db      	uxtb	r3, r3
    4516:	2b00      	cmp	r3, #0
    4518:	d1f4      	bne.n	4504 <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
    451a:	2314      	movs	r3, #20
    451c:	18fb      	adds	r3, r7, r3
    451e:	2200      	movs	r2, #0
    4520:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    4522:	2317      	movs	r3, #23
    4524:	18fc      	adds	r4, r7, r3
    4526:	2314      	movs	r3, #20
    4528:	18fa      	adds	r2, r7, r3
    452a:	68fb      	ldr	r3, [r7, #12]
    452c:	0011      	movs	r1, r2
    452e:	0018      	movs	r0, r3
    4530:	4b24      	ldr	r3, [pc, #144]	; (45c4 <spi_read_buffer_wait+0x1a8>)
    4532:	4798      	blx	r3
    4534:	0003      	movs	r3, r0
    4536:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    4538:	2317      	movs	r3, #23
    453a:	18fb      	adds	r3, r7, r3
    453c:	781b      	ldrb	r3, [r3, #0]
    453e:	2b00      	cmp	r3, #0
    4540:	d003      	beq.n	454a <spi_read_buffer_wait+0x12e>
			/* Overflow, abort */
			return retval;
    4542:	2317      	movs	r3, #23
    4544:	18fb      	adds	r3, r7, r3
    4546:	781b      	ldrb	r3, [r3, #0]
    4548:	e02c      	b.n	45a4 <spi_read_buffer_wait+0x188>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    454a:	231e      	movs	r3, #30
    454c:	18fb      	adds	r3, r7, r3
    454e:	881b      	ldrh	r3, [r3, #0]
    4550:	221e      	movs	r2, #30
    4552:	18ba      	adds	r2, r7, r2
    4554:	1c59      	adds	r1, r3, #1
    4556:	8011      	strh	r1, [r2, #0]
    4558:	001a      	movs	r2, r3
    455a:	68bb      	ldr	r3, [r7, #8]
    455c:	189b      	adds	r3, r3, r2
    455e:	2214      	movs	r2, #20
    4560:	18ba      	adds	r2, r7, r2
    4562:	8812      	ldrh	r2, [r2, #0]
    4564:	b2d2      	uxtb	r2, r2
    4566:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4568:	68fb      	ldr	r3, [r7, #12]
    456a:	799b      	ldrb	r3, [r3, #6]
    456c:	2b01      	cmp	r3, #1
    456e:	d110      	bne.n	4592 <spi_read_buffer_wait+0x176>
			rx_data[rx_pos++] = (received_data >> 8);
    4570:	231e      	movs	r3, #30
    4572:	18fb      	adds	r3, r7, r3
    4574:	881b      	ldrh	r3, [r3, #0]
    4576:	221e      	movs	r2, #30
    4578:	18ba      	adds	r2, r7, r2
    457a:	1c59      	adds	r1, r3, #1
    457c:	8011      	strh	r1, [r2, #0]
    457e:	001a      	movs	r2, r3
    4580:	68bb      	ldr	r3, [r7, #8]
    4582:	189b      	adds	r3, r3, r2
    4584:	2214      	movs	r2, #20
    4586:	18ba      	adds	r2, r7, r2
    4588:	8812      	ldrh	r2, [r2, #0]
    458a:	0a12      	lsrs	r2, r2, #8
    458c:	b292      	uxth	r2, r2
    458e:	b2d2      	uxtb	r2, r2
    4590:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4592:	1dbb      	adds	r3, r7, #6
    4594:	881b      	ldrh	r3, [r3, #0]
    4596:	1dba      	adds	r2, r7, #6
    4598:	1e59      	subs	r1, r3, #1
    459a:	8011      	strh	r1, [r2, #0]
    459c:	2b00      	cmp	r3, #0
    459e:	d000      	beq.n	45a2 <spi_read_buffer_wait+0x186>
    45a0:	e769      	b.n	4476 <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
    45a2:	2300      	movs	r3, #0
}
    45a4:	0018      	movs	r0, r3
    45a6:	46bd      	mov	sp, r7
    45a8:	b009      	add	sp, #36	; 0x24
    45aa:	bd90      	pop	{r4, r7, pc}
    45ac:	00003d2d 	.word	0x00003d2d
    45b0:	00003e75 	.word	0x00003e75
    45b4:	00003d55 	.word	0x00003d55
    45b8:	00003da5 	.word	0x00003da5
    45bc:	00003d7d 	.word	0x00003d7d
    45c0:	00002710 	.word	0x00002710
    45c4:	00003ded 	.word	0x00003ded

000045c8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    45c8:	b580      	push	{r7, lr}
    45ca:	b086      	sub	sp, #24
    45cc:	af00      	add	r7, sp, #0
    45ce:	60f8      	str	r0, [r7, #12]
    45d0:	60b9      	str	r1, [r7, #8]
    45d2:	1dfb      	adds	r3, r7, #7
    45d4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    45d6:	68fb      	ldr	r3, [r7, #12]
    45d8:	795b      	ldrb	r3, [r3, #5]
    45da:	2b01      	cmp	r3, #1
    45dc:	d001      	beq.n	45e2 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    45de:	2315      	movs	r3, #21
    45e0:	e05c      	b.n	469c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    45e2:	68fb      	ldr	r3, [r7, #12]
    45e4:	7a1b      	ldrb	r3, [r3, #8]
    45e6:	2201      	movs	r2, #1
    45e8:	4053      	eors	r3, r2
    45ea:	b2db      	uxtb	r3, r3
    45ec:	2b00      	cmp	r3, #0
    45ee:	d054      	beq.n	469a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    45f0:	1dfb      	adds	r3, r7, #7
    45f2:	781b      	ldrb	r3, [r3, #0]
    45f4:	2b00      	cmp	r3, #0
    45f6:	d04a      	beq.n	468e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    45f8:	68bb      	ldr	r3, [r7, #8]
    45fa:	785b      	ldrb	r3, [r3, #1]
    45fc:	2b00      	cmp	r3, #0
    45fe:	d03f      	beq.n	4680 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4600:	68fb      	ldr	r3, [r7, #12]
    4602:	0018      	movs	r0, r3
    4604:	4b27      	ldr	r3, [pc, #156]	; (46a4 <spi_select_slave+0xdc>)
    4606:	4798      	blx	r3
    4608:	0003      	movs	r3, r0
    460a:	001a      	movs	r2, r3
    460c:	2301      	movs	r3, #1
    460e:	4053      	eors	r3, r2
    4610:	b2db      	uxtb	r3, r3
    4612:	2b00      	cmp	r3, #0
    4614:	d007      	beq.n	4626 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    4616:	68bb      	ldr	r3, [r7, #8]
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	2101      	movs	r1, #1
    461c:	0018      	movs	r0, r3
    461e:	4b22      	ldr	r3, [pc, #136]	; (46a8 <spi_select_slave+0xe0>)
    4620:	4798      	blx	r3
					return STATUS_BUSY;
    4622:	2305      	movs	r3, #5
    4624:	e03a      	b.n	469c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4626:	68bb      	ldr	r3, [r7, #8]
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	2100      	movs	r1, #0
    462c:	0018      	movs	r0, r3
    462e:	4b1e      	ldr	r3, [pc, #120]	; (46a8 <spi_select_slave+0xe0>)
    4630:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    4632:	68bb      	ldr	r3, [r7, #8]
    4634:	789b      	ldrb	r3, [r3, #2]
    4636:	b29a      	uxth	r2, r3
    4638:	68fb      	ldr	r3, [r7, #12]
    463a:	0011      	movs	r1, r2
    463c:	0018      	movs	r0, r3
    463e:	4b1b      	ldr	r3, [pc, #108]	; (46ac <spi_select_slave+0xe4>)
    4640:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4642:	68fb      	ldr	r3, [r7, #12]
    4644:	79db      	ldrb	r3, [r3, #7]
    4646:	2201      	movs	r2, #1
    4648:	4053      	eors	r3, r2
    464a:	b2db      	uxtb	r3, r3
    464c:	2b00      	cmp	r3, #0
    464e:	d024      	beq.n	469a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4650:	46c0      	nop			; (mov r8, r8)
    4652:	68fb      	ldr	r3, [r7, #12]
    4654:	0018      	movs	r0, r3
    4656:	4b16      	ldr	r3, [pc, #88]	; (46b0 <spi_select_slave+0xe8>)
    4658:	4798      	blx	r3
    465a:	0003      	movs	r3, r0
    465c:	001a      	movs	r2, r3
    465e:	2301      	movs	r3, #1
    4660:	4053      	eors	r3, r2
    4662:	b2db      	uxtb	r3, r3
    4664:	2b00      	cmp	r3, #0
    4666:	d1f4      	bne.n	4652 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4668:	2316      	movs	r3, #22
    466a:	18fb      	adds	r3, r7, r3
    466c:	2200      	movs	r2, #0
    466e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4670:	2316      	movs	r3, #22
    4672:	18fa      	adds	r2, r7, r3
    4674:	68fb      	ldr	r3, [r7, #12]
    4676:	0011      	movs	r1, r2
    4678:	0018      	movs	r0, r3
    467a:	4b0e      	ldr	r3, [pc, #56]	; (46b4 <spi_select_slave+0xec>)
    467c:	4798      	blx	r3
    467e:	e00c      	b.n	469a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4680:	68bb      	ldr	r3, [r7, #8]
    4682:	781b      	ldrb	r3, [r3, #0]
    4684:	2100      	movs	r1, #0
    4686:	0018      	movs	r0, r3
    4688:	4b07      	ldr	r3, [pc, #28]	; (46a8 <spi_select_slave+0xe0>)
    468a:	4798      	blx	r3
    468c:	e005      	b.n	469a <spi_select_slave+0xd2>
				
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    468e:	68bb      	ldr	r3, [r7, #8]
    4690:	781b      	ldrb	r3, [r3, #0]
    4692:	2101      	movs	r1, #1
    4694:	0018      	movs	r0, r3
    4696:	4b04      	ldr	r3, [pc, #16]	; (46a8 <spi_select_slave+0xe0>)
    4698:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    469a:	2300      	movs	r3, #0
}
    469c:	0018      	movs	r0, r3
    469e:	46bd      	mov	sp, r7
    46a0:	b006      	add	sp, #24
    46a2:	bd80      	pop	{r7, pc}
    46a4:	00003d55 	.word	0x00003d55
    46a8:	00003c45 	.word	0x00003c45
    46ac:	00003da5 	.word	0x00003da5
    46b0:	00003d7d 	.word	0x00003d7d
    46b4:	00003ded 	.word	0x00003ded

000046b8 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    46b8:	b580      	push	{r7, lr}
    46ba:	b08a      	sub	sp, #40	; 0x28
    46bc:	af00      	add	r7, sp, #0
    46be:	60f8      	str	r0, [r7, #12]
    46c0:	60b9      	str	r1, [r7, #8]
    46c2:	1dbb      	adds	r3, r7, #6
    46c4:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    46c6:	1dbb      	adds	r3, r7, #6
    46c8:	881b      	ldrh	r3, [r3, #0]
    46ca:	2b00      	cmp	r3, #0
    46cc:	d101      	bne.n	46d2 <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    46ce:	2317      	movs	r3, #23
    46d0:	e16a      	b.n	49a8 <spi_write_buffer_wait+0x2f0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    46d2:	68fb      	ldr	r3, [r7, #12]
    46d4:	795b      	ldrb	r3, [r3, #5]
    46d6:	2b00      	cmp	r3, #0
    46d8:	d109      	bne.n	46ee <spi_write_buffer_wait+0x36>
    46da:	68fb      	ldr	r3, [r7, #12]
    46dc:	0018      	movs	r0, r3
    46de:	4bb4      	ldr	r3, [pc, #720]	; (49b0 <spi_write_buffer_wait+0x2f8>)
    46e0:	4798      	blx	r3
    46e2:	1e03      	subs	r3, r0, #0
    46e4:	d003      	beq.n	46ee <spi_write_buffer_wait+0x36>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    46e6:	68fb      	ldr	r3, [r7, #12]
    46e8:	0018      	movs	r0, r3
    46ea:	4bb2      	ldr	r3, [pc, #712]	; (49b4 <spi_write_buffer_wait+0x2fc>)
    46ec:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    46ee:	2326      	movs	r3, #38	; 0x26
    46f0:	18fb      	adds	r3, r7, r3
    46f2:	2200      	movs	r2, #0
    46f4:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    46f6:	2324      	movs	r3, #36	; 0x24
    46f8:	18fb      	adds	r3, r7, r3
    46fa:	1dba      	adds	r2, r7, #6
    46fc:	8812      	ldrh	r2, [r2, #0]
    46fe:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4700:	e0fe      	b.n	4900 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    4702:	68fb      	ldr	r3, [r7, #12]
    4704:	795b      	ldrb	r3, [r3, #5]
    4706:	2b00      	cmp	r3, #0
    4708:	d12a      	bne.n	4760 <spi_write_buffer_wait+0xa8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    470a:	2300      	movs	r3, #0
    470c:	623b      	str	r3, [r7, #32]
    470e:	e008      	b.n	4722 <spi_write_buffer_wait+0x6a>
				if (spi_is_ready_to_write(module)) {
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	0018      	movs	r0, r3
    4714:	4ba8      	ldr	r3, [pc, #672]	; (49b8 <spi_write_buffer_wait+0x300>)
    4716:	4798      	blx	r3
    4718:	1e03      	subs	r3, r0, #0
    471a:	d107      	bne.n	472c <spi_write_buffer_wait+0x74>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    471c:	6a3b      	ldr	r3, [r7, #32]
    471e:	3301      	adds	r3, #1
    4720:	623b      	str	r3, [r7, #32]
    4722:	6a3b      	ldr	r3, [r7, #32]
    4724:	4aa5      	ldr	r2, [pc, #660]	; (49bc <spi_write_buffer_wait+0x304>)
    4726:	4293      	cmp	r3, r2
    4728:	d9f2      	bls.n	4710 <spi_write_buffer_wait+0x58>
    472a:	e000      	b.n	472e <spi_write_buffer_wait+0x76>
					break;
    472c:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    472e:	68fb      	ldr	r3, [r7, #12]
    4730:	0018      	movs	r0, r3
    4732:	4b9f      	ldr	r3, [pc, #636]	; (49b0 <spi_write_buffer_wait+0x2f8>)
    4734:	4798      	blx	r3
    4736:	1e03      	subs	r3, r0, #0
    4738:	d005      	beq.n	4746 <spi_write_buffer_wait+0x8e>
				_spi_clear_tx_complete_flag(module);
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	0018      	movs	r0, r3
    473e:	4b9d      	ldr	r3, [pc, #628]	; (49b4 <spi_write_buffer_wait+0x2fc>)
    4740:	4798      	blx	r3
				return STATUS_ABORTED;
    4742:	2304      	movs	r3, #4
    4744:	e130      	b.n	49a8 <spi_write_buffer_wait+0x2f0>
			}

			if (!spi_is_ready_to_write(module)) {
    4746:	68fb      	ldr	r3, [r7, #12]
    4748:	0018      	movs	r0, r3
    474a:	4b9b      	ldr	r3, [pc, #620]	; (49b8 <spi_write_buffer_wait+0x300>)
    474c:	4798      	blx	r3
    474e:	0003      	movs	r3, r0
    4750:	001a      	movs	r2, r3
    4752:	2301      	movs	r3, #1
    4754:	4053      	eors	r3, r2
    4756:	b2db      	uxtb	r3, r3
    4758:	2b00      	cmp	r3, #0
    475a:	d001      	beq.n	4760 <spi_write_buffer_wait+0xa8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    475c:	2312      	movs	r3, #18
    475e:	e123      	b.n	49a8 <spi_write_buffer_wait+0x2f0>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    4760:	46c0      	nop			; (mov r8, r8)
    4762:	68fb      	ldr	r3, [r7, #12]
    4764:	0018      	movs	r0, r3
    4766:	4b94      	ldr	r3, [pc, #592]	; (49b8 <spi_write_buffer_wait+0x300>)
    4768:	4798      	blx	r3
    476a:	0003      	movs	r3, r0
    476c:	001a      	movs	r2, r3
    476e:	2301      	movs	r3, #1
    4770:	4053      	eors	r3, r2
    4772:	b2db      	uxtb	r3, r3
    4774:	2b00      	cmp	r3, #0
    4776:	d1f4      	bne.n	4762 <spi_write_buffer_wait+0xaa>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    4778:	2326      	movs	r3, #38	; 0x26
    477a:	18fb      	adds	r3, r7, r3
    477c:	881b      	ldrh	r3, [r3, #0]
    477e:	2226      	movs	r2, #38	; 0x26
    4780:	18ba      	adds	r2, r7, r2
    4782:	1c59      	adds	r1, r3, #1
    4784:	8011      	strh	r1, [r2, #0]
    4786:	001a      	movs	r2, r3
    4788:	68bb      	ldr	r3, [r7, #8]
    478a:	189b      	adds	r3, r3, r2
    478c:	781a      	ldrb	r2, [r3, #0]
    478e:	231e      	movs	r3, #30
    4790:	18fb      	adds	r3, r7, r3
    4792:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4794:	68fb      	ldr	r3, [r7, #12]
    4796:	799b      	ldrb	r3, [r3, #6]
    4798:	2b01      	cmp	r3, #1
    479a:	d115      	bne.n	47c8 <spi_write_buffer_wait+0x110>
			data_to_send |= (tx_data[tx_pos++] << 8);
    479c:	2326      	movs	r3, #38	; 0x26
    479e:	18fb      	adds	r3, r7, r3
    47a0:	881b      	ldrh	r3, [r3, #0]
    47a2:	2226      	movs	r2, #38	; 0x26
    47a4:	18ba      	adds	r2, r7, r2
    47a6:	1c59      	adds	r1, r3, #1
    47a8:	8011      	strh	r1, [r2, #0]
    47aa:	001a      	movs	r2, r3
    47ac:	68bb      	ldr	r3, [r7, #8]
    47ae:	189b      	adds	r3, r3, r2
    47b0:	781b      	ldrb	r3, [r3, #0]
    47b2:	021b      	lsls	r3, r3, #8
    47b4:	b21a      	sxth	r2, r3
    47b6:	231e      	movs	r3, #30
    47b8:	18fb      	adds	r3, r7, r3
    47ba:	2100      	movs	r1, #0
    47bc:	5e5b      	ldrsh	r3, [r3, r1]
    47be:	4313      	orrs	r3, r2
    47c0:	b21a      	sxth	r2, r3
    47c2:	231e      	movs	r3, #30
    47c4:	18fb      	adds	r3, r7, r3
    47c6:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    47c8:	231e      	movs	r3, #30
    47ca:	18fb      	adds	r3, r7, r3
    47cc:	881a      	ldrh	r2, [r3, #0]
    47ce:	68fb      	ldr	r3, [r7, #12]
    47d0:	0011      	movs	r1, r2
    47d2:	0018      	movs	r0, r3
    47d4:	4b7a      	ldr	r3, [pc, #488]	; (49c0 <spi_write_buffer_wait+0x308>)
    47d6:	4798      	blx	r3

		if (module->receiver_enabled) {
    47d8:	68fb      	ldr	r3, [r7, #12]
    47da:	79db      	ldrb	r3, [r3, #7]
    47dc:	2224      	movs	r2, #36	; 0x24
    47de:	18ba      	adds	r2, r7, r2
    47e0:	2124      	movs	r1, #36	; 0x24
    47e2:	1879      	adds	r1, r7, r1
    47e4:	8809      	ldrh	r1, [r1, #0]
    47e6:	8011      	strh	r1, [r2, #0]
    47e8:	2b00      	cmp	r3, #0
    47ea:	d100      	bne.n	47ee <spi_write_buffer_wait+0x136>
    47ec:	e088      	b.n	4900 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    47ee:	68fb      	ldr	r3, [r7, #12]
    47f0:	795b      	ldrb	r3, [r3, #5]
    47f2:	2b00      	cmp	r3, #0
    47f4:	d000      	beq.n	47f8 <spi_write_buffer_wait+0x140>
    47f6:	e069      	b.n	48cc <spi_write_buffer_wait+0x214>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    47f8:	2300      	movs	r3, #0
    47fa:	61bb      	str	r3, [r7, #24]
    47fc:	e047      	b.n	488e <spi_write_buffer_wait+0x1d6>
					if (length && spi_is_ready_to_write(module)) {
    47fe:	1dbb      	adds	r3, r7, #6
    4800:	881b      	ldrh	r3, [r3, #0]
    4802:	2b00      	cmp	r3, #0
    4804:	d03a      	beq.n	487c <spi_write_buffer_wait+0x1c4>
    4806:	68fb      	ldr	r3, [r7, #12]
    4808:	0018      	movs	r0, r3
    480a:	4b6b      	ldr	r3, [pc, #428]	; (49b8 <spi_write_buffer_wait+0x300>)
    480c:	4798      	blx	r3
    480e:	1e03      	subs	r3, r0, #0
    4810:	d034      	beq.n	487c <spi_write_buffer_wait+0x1c4>
						data_to_send = tx_data[tx_pos++];
    4812:	2326      	movs	r3, #38	; 0x26
    4814:	18fb      	adds	r3, r7, r3
    4816:	881b      	ldrh	r3, [r3, #0]
    4818:	2226      	movs	r2, #38	; 0x26
    481a:	18ba      	adds	r2, r7, r2
    481c:	1c59      	adds	r1, r3, #1
    481e:	8011      	strh	r1, [r2, #0]
    4820:	001a      	movs	r2, r3
    4822:	68bb      	ldr	r3, [r7, #8]
    4824:	189b      	adds	r3, r3, r2
    4826:	781a      	ldrb	r2, [r3, #0]
    4828:	231e      	movs	r3, #30
    482a:	18fb      	adds	r3, r7, r3
    482c:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    482e:	68fb      	ldr	r3, [r7, #12]
    4830:	799b      	ldrb	r3, [r3, #6]
    4832:	2b01      	cmp	r3, #1
    4834:	d115      	bne.n	4862 <spi_write_buffer_wait+0x1aa>
							data_to_send |= (tx_data[tx_pos++] << 8);
    4836:	2326      	movs	r3, #38	; 0x26
    4838:	18fb      	adds	r3, r7, r3
    483a:	881b      	ldrh	r3, [r3, #0]
    483c:	2226      	movs	r2, #38	; 0x26
    483e:	18ba      	adds	r2, r7, r2
    4840:	1c59      	adds	r1, r3, #1
    4842:	8011      	strh	r1, [r2, #0]
    4844:	001a      	movs	r2, r3
    4846:	68bb      	ldr	r3, [r7, #8]
    4848:	189b      	adds	r3, r3, r2
    484a:	781b      	ldrb	r3, [r3, #0]
    484c:	021b      	lsls	r3, r3, #8
    484e:	b21a      	sxth	r2, r3
    4850:	231e      	movs	r3, #30
    4852:	18fb      	adds	r3, r7, r3
    4854:	2100      	movs	r1, #0
    4856:	5e5b      	ldrsh	r3, [r3, r1]
    4858:	4313      	orrs	r3, r2
    485a:	b21a      	sxth	r2, r3
    485c:	231e      	movs	r3, #30
    485e:	18fb      	adds	r3, r7, r3
    4860:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    4862:	231e      	movs	r3, #30
    4864:	18fb      	adds	r3, r7, r3
    4866:	881a      	ldrh	r2, [r3, #0]
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	0011      	movs	r1, r2
    486c:	0018      	movs	r0, r3
    486e:	4b54      	ldr	r3, [pc, #336]	; (49c0 <spi_write_buffer_wait+0x308>)
    4870:	4798      	blx	r3
						length--;
    4872:	1dbb      	adds	r3, r7, #6
    4874:	881a      	ldrh	r2, [r3, #0]
    4876:	1dbb      	adds	r3, r7, #6
    4878:	3a01      	subs	r2, #1
    487a:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    487c:	68fb      	ldr	r3, [r7, #12]
    487e:	0018      	movs	r0, r3
    4880:	4b50      	ldr	r3, [pc, #320]	; (49c4 <spi_write_buffer_wait+0x30c>)
    4882:	4798      	blx	r3
    4884:	1e03      	subs	r3, r0, #0
    4886:	d107      	bne.n	4898 <spi_write_buffer_wait+0x1e0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    4888:	69bb      	ldr	r3, [r7, #24]
    488a:	3301      	adds	r3, #1
    488c:	61bb      	str	r3, [r7, #24]
    488e:	69bb      	ldr	r3, [r7, #24]
    4890:	4a4a      	ldr	r2, [pc, #296]	; (49bc <spi_write_buffer_wait+0x304>)
    4892:	4293      	cmp	r3, r2
    4894:	d9b3      	bls.n	47fe <spi_write_buffer_wait+0x146>
    4896:	e000      	b.n	489a <spi_write_buffer_wait+0x1e2>
						break;
    4898:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    489a:	68fb      	ldr	r3, [r7, #12]
    489c:	0018      	movs	r0, r3
    489e:	4b44      	ldr	r3, [pc, #272]	; (49b0 <spi_write_buffer_wait+0x2f8>)
    48a0:	4798      	blx	r3
    48a2:	1e03      	subs	r3, r0, #0
    48a4:	d005      	beq.n	48b2 <spi_write_buffer_wait+0x1fa>
					_spi_clear_tx_complete_flag(module);
    48a6:	68fb      	ldr	r3, [r7, #12]
    48a8:	0018      	movs	r0, r3
    48aa:	4b42      	ldr	r3, [pc, #264]	; (49b4 <spi_write_buffer_wait+0x2fc>)
    48ac:	4798      	blx	r3
					return STATUS_ABORTED;
    48ae:	2304      	movs	r3, #4
    48b0:	e07a      	b.n	49a8 <spi_write_buffer_wait+0x2f0>
				}

				if (!spi_is_ready_to_read(module)) {
    48b2:	68fb      	ldr	r3, [r7, #12]
    48b4:	0018      	movs	r0, r3
    48b6:	4b43      	ldr	r3, [pc, #268]	; (49c4 <spi_write_buffer_wait+0x30c>)
    48b8:	4798      	blx	r3
    48ba:	0003      	movs	r3, r0
    48bc:	001a      	movs	r2, r3
    48be:	2301      	movs	r3, #1
    48c0:	4053      	eors	r3, r2
    48c2:	b2db      	uxtb	r3, r3
    48c4:	2b00      	cmp	r3, #0
    48c6:	d001      	beq.n	48cc <spi_write_buffer_wait+0x214>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    48c8:	2312      	movs	r3, #18
    48ca:	e06d      	b.n	49a8 <spi_write_buffer_wait+0x2f0>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    48cc:	46c0      	nop			; (mov r8, r8)
    48ce:	68fb      	ldr	r3, [r7, #12]
    48d0:	0018      	movs	r0, r3
    48d2:	4b3c      	ldr	r3, [pc, #240]	; (49c4 <spi_write_buffer_wait+0x30c>)
    48d4:	4798      	blx	r3
    48d6:	0003      	movs	r3, r0
    48d8:	001a      	movs	r2, r3
    48da:	2301      	movs	r3, #1
    48dc:	4053      	eors	r3, r2
    48de:	b2db      	uxtb	r3, r3
    48e0:	2b00      	cmp	r3, #0
    48e2:	d1f4      	bne.n	48ce <spi_write_buffer_wait+0x216>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    48e4:	2312      	movs	r3, #18
    48e6:	18fa      	adds	r2, r7, r3
    48e8:	68fb      	ldr	r3, [r7, #12]
    48ea:	0011      	movs	r1, r2
    48ec:	0018      	movs	r0, r3
    48ee:	4b36      	ldr	r3, [pc, #216]	; (49c8 <spi_write_buffer_wait+0x310>)
    48f0:	4798      	blx	r3
			flush_length--;
    48f2:	2324      	movs	r3, #36	; 0x24
    48f4:	18fb      	adds	r3, r7, r3
    48f6:	881a      	ldrh	r2, [r3, #0]
    48f8:	2324      	movs	r3, #36	; 0x24
    48fa:	18fb      	adds	r3, r7, r3
    48fc:	3a01      	subs	r2, #1
    48fe:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4900:	1dbb      	adds	r3, r7, #6
    4902:	881b      	ldrh	r3, [r3, #0]
    4904:	1dba      	adds	r2, r7, #6
    4906:	1e59      	subs	r1, r3, #1
    4908:	8011      	strh	r1, [r2, #0]
    490a:	2b00      	cmp	r3, #0
    490c:	d000      	beq.n	4910 <spi_write_buffer_wait+0x258>
    490e:	e6f8      	b.n	4702 <spi_write_buffer_wait+0x4a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4910:	68fb      	ldr	r3, [r7, #12]
    4912:	795b      	ldrb	r3, [r3, #5]
    4914:	2b01      	cmp	r3, #1
    4916:	d10b      	bne.n	4930 <spi_write_buffer_wait+0x278>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4918:	46c0      	nop			; (mov r8, r8)
    491a:	68fb      	ldr	r3, [r7, #12]
    491c:	0018      	movs	r0, r3
    491e:	4b24      	ldr	r3, [pc, #144]	; (49b0 <spi_write_buffer_wait+0x2f8>)
    4920:	4798      	blx	r3
    4922:	0003      	movs	r3, r0
    4924:	001a      	movs	r2, r3
    4926:	2301      	movs	r3, #1
    4928:	4053      	eors	r3, r2
    492a:	b2db      	uxtb	r3, r3
    492c:	2b00      	cmp	r3, #0
    492e:	d1f4      	bne.n	491a <spi_write_buffer_wait+0x262>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    4930:	68fb      	ldr	r3, [r7, #12]
    4932:	795b      	ldrb	r3, [r3, #5]
    4934:	2b00      	cmp	r3, #0
    4936:	d136      	bne.n	49a6 <spi_write_buffer_wait+0x2ee>
		if (module->receiver_enabled) {
    4938:	68fb      	ldr	r3, [r7, #12]
    493a:	79db      	ldrb	r3, [r3, #7]
    493c:	2b00      	cmp	r3, #0
    493e:	d032      	beq.n	49a6 <spi_write_buffer_wait+0x2ee>
			while (flush_length) {
    4940:	e02c      	b.n	499c <spi_write_buffer_wait+0x2e4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    4942:	2300      	movs	r3, #0
    4944:	617b      	str	r3, [r7, #20]
    4946:	e008      	b.n	495a <spi_write_buffer_wait+0x2a2>
					if (spi_is_ready_to_read(module)) {
    4948:	68fb      	ldr	r3, [r7, #12]
    494a:	0018      	movs	r0, r3
    494c:	4b1d      	ldr	r3, [pc, #116]	; (49c4 <spi_write_buffer_wait+0x30c>)
    494e:	4798      	blx	r3
    4950:	1e03      	subs	r3, r0, #0
    4952:	d107      	bne.n	4964 <spi_write_buffer_wait+0x2ac>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    4954:	697b      	ldr	r3, [r7, #20]
    4956:	3301      	adds	r3, #1
    4958:	617b      	str	r3, [r7, #20]
    495a:	697b      	ldr	r3, [r7, #20]
    495c:	4a17      	ldr	r2, [pc, #92]	; (49bc <spi_write_buffer_wait+0x304>)
    495e:	4293      	cmp	r3, r2
    4960:	d9f2      	bls.n	4948 <spi_write_buffer_wait+0x290>
    4962:	e000      	b.n	4966 <spi_write_buffer_wait+0x2ae>
						break;
    4964:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    4966:	68fb      	ldr	r3, [r7, #12]
    4968:	0018      	movs	r0, r3
    496a:	4b16      	ldr	r3, [pc, #88]	; (49c4 <spi_write_buffer_wait+0x30c>)
    496c:	4798      	blx	r3
    496e:	0003      	movs	r3, r0
    4970:	001a      	movs	r2, r3
    4972:	2301      	movs	r3, #1
    4974:	4053      	eors	r3, r2
    4976:	b2db      	uxtb	r3, r3
    4978:	2b00      	cmp	r3, #0
    497a:	d001      	beq.n	4980 <spi_write_buffer_wait+0x2c8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    497c:	2312      	movs	r3, #18
    497e:	e013      	b.n	49a8 <spi_write_buffer_wait+0x2f0>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    4980:	2310      	movs	r3, #16
    4982:	18fa      	adds	r2, r7, r3
    4984:	68fb      	ldr	r3, [r7, #12]
    4986:	0011      	movs	r1, r2
    4988:	0018      	movs	r0, r3
    498a:	4b0f      	ldr	r3, [pc, #60]	; (49c8 <spi_write_buffer_wait+0x310>)
    498c:	4798      	blx	r3
				flush_length--;
    498e:	2324      	movs	r3, #36	; 0x24
    4990:	18fb      	adds	r3, r7, r3
    4992:	881a      	ldrh	r2, [r3, #0]
    4994:	2324      	movs	r3, #36	; 0x24
    4996:	18fb      	adds	r3, r7, r3
    4998:	3a01      	subs	r2, #1
    499a:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    499c:	2324      	movs	r3, #36	; 0x24
    499e:	18fb      	adds	r3, r7, r3
    49a0:	881b      	ldrh	r3, [r3, #0]
    49a2:	2b00      	cmp	r3, #0
    49a4:	d1cd      	bne.n	4942 <spi_write_buffer_wait+0x28a>
			}
		}
	}
#  endif
	return STATUS_OK;
    49a6:	2300      	movs	r3, #0
}
    49a8:	0018      	movs	r0, r3
    49aa:	46bd      	mov	sp, r7
    49ac:	b00a      	add	sp, #40	; 0x28
    49ae:	bd80      	pop	{r7, pc}
    49b0:	00003d2d 	.word	0x00003d2d
    49b4:	00003e75 	.word	0x00003e75
    49b8:	00003d55 	.word	0x00003d55
    49bc:	00002710 	.word	0x00002710
    49c0:	00003da5 	.word	0x00003da5
    49c4:	00003d7d 	.word	0x00003d7d
    49c8:	00003ded 	.word	0x00003ded

000049cc <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    49cc:	b580      	push	{r7, lr}
    49ce:	b082      	sub	sp, #8
    49d0:	af00      	add	r7, sp, #0
    49d2:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d00c      	beq.n	49f4 <delay_cycles+0x28>
		SysTick->LOAD = n;
    49da:	4b08      	ldr	r3, [pc, #32]	; (49fc <delay_cycles+0x30>)
    49dc:	687a      	ldr	r2, [r7, #4]
    49de:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    49e0:	4b06      	ldr	r3, [pc, #24]	; (49fc <delay_cycles+0x30>)
    49e2:	2200      	movs	r2, #0
    49e4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    49e6:	46c0      	nop			; (mov r8, r8)
    49e8:	4b04      	ldr	r3, [pc, #16]	; (49fc <delay_cycles+0x30>)
    49ea:	681a      	ldr	r2, [r3, #0]
    49ec:	2380      	movs	r3, #128	; 0x80
    49ee:	025b      	lsls	r3, r3, #9
    49f0:	4013      	ands	r3, r2
    49f2:	d0f9      	beq.n	49e8 <delay_cycles+0x1c>
		};
	}
}
    49f4:	46c0      	nop			; (mov r8, r8)
    49f6:	46bd      	mov	sp, r7
    49f8:	b002      	add	sp, #8
    49fa:	bd80      	pop	{r7, pc}
    49fc:	e000e010 	.word	0xe000e010

00004a00 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4a00:	b580      	push	{r7, lr}
    4a02:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    4a04:	2000      	movs	r0, #0
    4a06:	4b0f      	ldr	r3, [pc, #60]	; (4a44 <delay_init+0x44>)
    4a08:	4798      	blx	r3
    4a0a:	0002      	movs	r2, r0
    4a0c:	4b0e      	ldr	r3, [pc, #56]	; (4a48 <delay_init+0x48>)
    4a0e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    4a10:	4b0d      	ldr	r3, [pc, #52]	; (4a48 <delay_init+0x48>)
    4a12:	6818      	ldr	r0, [r3, #0]
    4a14:	4b0d      	ldr	r3, [pc, #52]	; (4a4c <delay_init+0x4c>)
    4a16:	22fa      	movs	r2, #250	; 0xfa
    4a18:	0091      	lsls	r1, r2, #2
    4a1a:	4798      	blx	r3
    4a1c:	0003      	movs	r3, r0
    4a1e:	001a      	movs	r2, r3
    4a20:	4b09      	ldr	r3, [pc, #36]	; (4a48 <delay_init+0x48>)
    4a22:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    4a24:	4b08      	ldr	r3, [pc, #32]	; (4a48 <delay_init+0x48>)
    4a26:	6818      	ldr	r0, [r3, #0]
    4a28:	4b08      	ldr	r3, [pc, #32]	; (4a4c <delay_init+0x4c>)
    4a2a:	22fa      	movs	r2, #250	; 0xfa
    4a2c:	0091      	lsls	r1, r2, #2
    4a2e:	4798      	blx	r3
    4a30:	0003      	movs	r3, r0
    4a32:	001a      	movs	r2, r3
    4a34:	4b06      	ldr	r3, [pc, #24]	; (4a50 <delay_init+0x50>)
    4a36:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4a38:	4b06      	ldr	r3, [pc, #24]	; (4a54 <delay_init+0x54>)
    4a3a:	2205      	movs	r2, #5
    4a3c:	601a      	str	r2, [r3, #0]
}
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	46bd      	mov	sp, r7
    4a42:	bd80      	pop	{r7, pc}
    4a44:	000053f9 	.word	0x000053f9
    4a48:	20000004 	.word	0x20000004
    4a4c:	00005d7d 	.word	0x00005d7d
    4a50:	20000008 	.word	0x20000008
    4a54:	e000e010 	.word	0xe000e010

00004a58 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    4a58:	b580      	push	{r7, lr}
    4a5a:	b082      	sub	sp, #8
    4a5c:	af00      	add	r7, sp, #0
    4a5e:	6078      	str	r0, [r7, #4]
	while (n--) {
    4a60:	e004      	b.n	4a6c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    4a62:	4b07      	ldr	r3, [pc, #28]	; (4a80 <delay_cycles_ms+0x28>)
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	0018      	movs	r0, r3
    4a68:	4b06      	ldr	r3, [pc, #24]	; (4a84 <delay_cycles_ms+0x2c>)
    4a6a:	4798      	blx	r3
	while (n--) {
    4a6c:	687b      	ldr	r3, [r7, #4]
    4a6e:	1e5a      	subs	r2, r3, #1
    4a70:	607a      	str	r2, [r7, #4]
    4a72:	2b00      	cmp	r3, #0
    4a74:	d1f5      	bne.n	4a62 <delay_cycles_ms+0xa>
	}
}
    4a76:	46c0      	nop			; (mov r8, r8)
    4a78:	46bd      	mov	sp, r7
    4a7a:	b002      	add	sp, #8
    4a7c:	bd80      	pop	{r7, pc}
    4a7e:	46c0      	nop			; (mov r8, r8)
    4a80:	20000004 	.word	0x20000004
    4a84:	000049cd 	.word	0x000049cd

00004a88 <system_pinmux_get_config_defaults>:
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	b082      	sub	sp, #8
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	2280      	movs	r2, #128	; 0x80
    4a94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	2200      	movs	r2, #0
    4a9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	2201      	movs	r2, #1
    4aa0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	2200      	movs	r2, #0
    4aa6:	70da      	strb	r2, [r3, #3]
}
    4aa8:	46c0      	nop			; (mov r8, r8)
    4aaa:	46bd      	mov	sp, r7
    4aac:	b002      	add	sp, #8
    4aae:	bd80      	pop	{r7, pc}

00004ab0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4ab0:	b580      	push	{r7, lr}
    4ab2:	b084      	sub	sp, #16
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	0002      	movs	r2, r0
    4ab8:	6039      	str	r1, [r7, #0]
    4aba:	1dfb      	adds	r3, r7, #7
    4abc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4abe:	230c      	movs	r3, #12
    4ac0:	18fb      	adds	r3, r7, r3
    4ac2:	0018      	movs	r0, r3
    4ac4:	4b10      	ldr	r3, [pc, #64]	; (4b08 <port_pin_set_config+0x58>)
    4ac6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    4ac8:	230c      	movs	r3, #12
    4aca:	18fb      	adds	r3, r7, r3
    4acc:	2280      	movs	r2, #128	; 0x80
    4ace:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4ad0:	683b      	ldr	r3, [r7, #0]
    4ad2:	781a      	ldrb	r2, [r3, #0]
    4ad4:	230c      	movs	r3, #12
    4ad6:	18fb      	adds	r3, r7, r3
    4ad8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4ada:	683b      	ldr	r3, [r7, #0]
    4adc:	785a      	ldrb	r2, [r3, #1]
    4ade:	230c      	movs	r3, #12
    4ae0:	18fb      	adds	r3, r7, r3
    4ae2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4ae4:	683b      	ldr	r3, [r7, #0]
    4ae6:	789a      	ldrb	r2, [r3, #2]
    4ae8:	230c      	movs	r3, #12
    4aea:	18fb      	adds	r3, r7, r3
    4aec:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4aee:	230c      	movs	r3, #12
    4af0:	18fa      	adds	r2, r7, r3
    4af2:	1dfb      	adds	r3, r7, #7
    4af4:	781b      	ldrb	r3, [r3, #0]
    4af6:	0011      	movs	r1, r2
    4af8:	0018      	movs	r0, r3
    4afa:	4b04      	ldr	r3, [pc, #16]	; (4b0c <port_pin_set_config+0x5c>)
    4afc:	4798      	blx	r3
}
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	46bd      	mov	sp, r7
    4b02:	b004      	add	sp, #16
    4b04:	bd80      	pop	{r7, pc}
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	00004a89 	.word	0x00004a89
    4b0c:	000057bd 	.word	0x000057bd

00004b10 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4b10:	b580      	push	{r7, lr}
    4b12:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4b14:	46c0      	nop			; (mov r8, r8)
    4b16:	46bd      	mov	sp, r7
    4b18:	bd80      	pop	{r7, pc}
	...

00004b1c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    4b1c:	b580      	push	{r7, lr}
    4b1e:	b082      	sub	sp, #8
    4b20:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    4b22:	4b10      	ldr	r3, [pc, #64]	; (4b64 <cpu_irq_enter_critical+0x48>)
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	2b00      	cmp	r3, #0
    4b28:	d112      	bne.n	4b50 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4b2a:	f3ef 8310 	mrs	r3, PRIMASK
    4b2e:	607b      	str	r3, [r7, #4]
  return(result);
    4b30:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    4b32:	2b00      	cmp	r3, #0
    4b34:	d109      	bne.n	4b4a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    4b36:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4b38:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4b3c:	4b0a      	ldr	r3, [pc, #40]	; (4b68 <cpu_irq_enter_critical+0x4c>)
    4b3e:	2200      	movs	r2, #0
    4b40:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4b42:	4b0a      	ldr	r3, [pc, #40]	; (4b6c <cpu_irq_enter_critical+0x50>)
    4b44:	2201      	movs	r2, #1
    4b46:	701a      	strb	r2, [r3, #0]
    4b48:	e002      	b.n	4b50 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4b4a:	4b08      	ldr	r3, [pc, #32]	; (4b6c <cpu_irq_enter_critical+0x50>)
    4b4c:	2200      	movs	r2, #0
    4b4e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4b50:	4b04      	ldr	r3, [pc, #16]	; (4b64 <cpu_irq_enter_critical+0x48>)
    4b52:	681b      	ldr	r3, [r3, #0]
    4b54:	1c5a      	adds	r2, r3, #1
    4b56:	4b03      	ldr	r3, [pc, #12]	; (4b64 <cpu_irq_enter_critical+0x48>)
    4b58:	601a      	str	r2, [r3, #0]
}
    4b5a:	46c0      	nop			; (mov r8, r8)
    4b5c:	46bd      	mov	sp, r7
    4b5e:	b002      	add	sp, #8
    4b60:	bd80      	pop	{r7, pc}
    4b62:	46c0      	nop			; (mov r8, r8)
    4b64:	200000d0 	.word	0x200000d0
    4b68:	2000000c 	.word	0x2000000c
    4b6c:	200000d4 	.word	0x200000d4

00004b70 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4b70:	b580      	push	{r7, lr}
    4b72:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4b74:	4b0b      	ldr	r3, [pc, #44]	; (4ba4 <cpu_irq_leave_critical+0x34>)
    4b76:	681b      	ldr	r3, [r3, #0]
    4b78:	1e5a      	subs	r2, r3, #1
    4b7a:	4b0a      	ldr	r3, [pc, #40]	; (4ba4 <cpu_irq_leave_critical+0x34>)
    4b7c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4b7e:	4b09      	ldr	r3, [pc, #36]	; (4ba4 <cpu_irq_leave_critical+0x34>)
    4b80:	681b      	ldr	r3, [r3, #0]
    4b82:	2b00      	cmp	r3, #0
    4b84:	d10a      	bne.n	4b9c <cpu_irq_leave_critical+0x2c>
    4b86:	4b08      	ldr	r3, [pc, #32]	; (4ba8 <cpu_irq_leave_critical+0x38>)
    4b88:	781b      	ldrb	r3, [r3, #0]
    4b8a:	b2db      	uxtb	r3, r3
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	d005      	beq.n	4b9c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4b90:	4b06      	ldr	r3, [pc, #24]	; (4bac <cpu_irq_leave_critical+0x3c>)
    4b92:	2201      	movs	r2, #1
    4b94:	701a      	strb	r2, [r3, #0]
    4b96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4b9a:	b662      	cpsie	i
	}
}
    4b9c:	46c0      	nop			; (mov r8, r8)
    4b9e:	46bd      	mov	sp, r7
    4ba0:	bd80      	pop	{r7, pc}
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	200000d0 	.word	0x200000d0
    4ba8:	200000d4 	.word	0x200000d4
    4bac:	2000000c 	.word	0x2000000c

00004bb0 <system_gclk_gen_get_config_defaults>:
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b082      	sub	sp, #8
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    4bb8:	687b      	ldr	r3, [r7, #4]
    4bba:	2201      	movs	r2, #1
    4bbc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	2200      	movs	r2, #0
    4bc2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	2206      	movs	r2, #6
    4bc8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    4bca:	687b      	ldr	r3, [r7, #4]
    4bcc:	2200      	movs	r2, #0
    4bce:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4bd0:	687b      	ldr	r3, [r7, #4]
    4bd2:	2200      	movs	r2, #0
    4bd4:	725a      	strb	r2, [r3, #9]
}
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	46bd      	mov	sp, r7
    4bda:	b002      	add	sp, #8
    4bdc:	bd80      	pop	{r7, pc}

00004bde <system_clock_source_osc32k_get_config_defaults>:
{
    4bde:	b580      	push	{r7, lr}
    4be0:	b082      	sub	sp, #8
    4be2:	af00      	add	r7, sp, #0
    4be4:	6078      	str	r0, [r7, #4]
	config->enable_1khz_output  = true;
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	2201      	movs	r2, #1
    4bea:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	2201      	movs	r2, #1
    4bf0:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	2200      	movs	r2, #0
    4bf6:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    4bf8:	687b      	ldr	r3, [r7, #4]
    4bfa:	2201      	movs	r2, #1
    4bfc:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    4bfe:	687b      	ldr	r3, [r7, #4]
    4c00:	2207      	movs	r2, #7
    4c02:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    4c04:	687b      	ldr	r3, [r7, #4]
    4c06:	2200      	movs	r2, #0
    4c08:	715a      	strb	r2, [r3, #5]
}
    4c0a:	46c0      	nop			; (mov r8, r8)
    4c0c:	46bd      	mov	sp, r7
    4c0e:	b002      	add	sp, #8
    4c10:	bd80      	pop	{r7, pc}

00004c12 <system_clock_source_osc8m_get_config_defaults>:
{
    4c12:	b580      	push	{r7, lr}
    4c14:	b082      	sub	sp, #8
    4c16:	af00      	add	r7, sp, #0
    4c18:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4c1a:	687b      	ldr	r3, [r7, #4]
    4c1c:	2203      	movs	r2, #3
    4c1e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4c20:	687b      	ldr	r3, [r7, #4]
    4c22:	2200      	movs	r2, #0
    4c24:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4c26:	687b      	ldr	r3, [r7, #4]
    4c28:	2201      	movs	r2, #1
    4c2a:	709a      	strb	r2, [r3, #2]
}
    4c2c:	46c0      	nop			; (mov r8, r8)
    4c2e:	46bd      	mov	sp, r7
    4c30:	b002      	add	sp, #8
    4c32:	bd80      	pop	{r7, pc}

00004c34 <system_cpu_clock_set_divider>:
{
    4c34:	b580      	push	{r7, lr}
    4c36:	b082      	sub	sp, #8
    4c38:	af00      	add	r7, sp, #0
    4c3a:	0002      	movs	r2, r0
    4c3c:	1dfb      	adds	r3, r7, #7
    4c3e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    4c40:	4a03      	ldr	r2, [pc, #12]	; (4c50 <system_cpu_clock_set_divider+0x1c>)
    4c42:	1dfb      	adds	r3, r7, #7
    4c44:	781b      	ldrb	r3, [r3, #0]
    4c46:	7213      	strb	r3, [r2, #8]
}
    4c48:	46c0      	nop			; (mov r8, r8)
    4c4a:	46bd      	mov	sp, r7
    4c4c:	b002      	add	sp, #8
    4c4e:	bd80      	pop	{r7, pc}
    4c50:	40000400 	.word	0x40000400

00004c54 <system_apb_clock_set_divider>:
{
    4c54:	b580      	push	{r7, lr}
    4c56:	b082      	sub	sp, #8
    4c58:	af00      	add	r7, sp, #0
    4c5a:	0002      	movs	r2, r0
    4c5c:	1dfb      	adds	r3, r7, #7
    4c5e:	701a      	strb	r2, [r3, #0]
    4c60:	1dbb      	adds	r3, r7, #6
    4c62:	1c0a      	adds	r2, r1, #0
    4c64:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4c66:	1dfb      	adds	r3, r7, #7
    4c68:	781b      	ldrb	r3, [r3, #0]
    4c6a:	2b01      	cmp	r3, #1
    4c6c:	d008      	beq.n	4c80 <system_apb_clock_set_divider+0x2c>
    4c6e:	2b02      	cmp	r3, #2
    4c70:	d00b      	beq.n	4c8a <system_apb_clock_set_divider+0x36>
    4c72:	2b00      	cmp	r3, #0
    4c74:	d10e      	bne.n	4c94 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    4c76:	4a0b      	ldr	r2, [pc, #44]	; (4ca4 <system_apb_clock_set_divider+0x50>)
    4c78:	1dbb      	adds	r3, r7, #6
    4c7a:	781b      	ldrb	r3, [r3, #0]
    4c7c:	7253      	strb	r3, [r2, #9]
			break;
    4c7e:	e00b      	b.n	4c98 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    4c80:	4a08      	ldr	r2, [pc, #32]	; (4ca4 <system_apb_clock_set_divider+0x50>)
    4c82:	1dbb      	adds	r3, r7, #6
    4c84:	781b      	ldrb	r3, [r3, #0]
    4c86:	7293      	strb	r3, [r2, #10]
			break;
    4c88:	e006      	b.n	4c98 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    4c8a:	4a06      	ldr	r2, [pc, #24]	; (4ca4 <system_apb_clock_set_divider+0x50>)
    4c8c:	1dbb      	adds	r3, r7, #6
    4c8e:	781b      	ldrb	r3, [r3, #0]
    4c90:	72d3      	strb	r3, [r2, #11]
			break;
    4c92:	e001      	b.n	4c98 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    4c94:	2317      	movs	r3, #23
    4c96:	e000      	b.n	4c9a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    4c98:	2300      	movs	r3, #0
}
    4c9a:	0018      	movs	r0, r3
    4c9c:	46bd      	mov	sp, r7
    4c9e:	b002      	add	sp, #8
    4ca0:	bd80      	pop	{r7, pc}
    4ca2:	46c0      	nop			; (mov r8, r8)
    4ca4:	40000400 	.word	0x40000400

00004ca8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b082      	sub	sp, #8
    4cac:	af00      	add	r7, sp, #0
    4cae:	0002      	movs	r2, r0
    4cb0:	1dfb      	adds	r3, r7, #7
    4cb2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4cb4:	4a08      	ldr	r2, [pc, #32]	; (4cd8 <system_flash_set_waitstates+0x30>)
    4cb6:	1dfb      	adds	r3, r7, #7
    4cb8:	781b      	ldrb	r3, [r3, #0]
    4cba:	210f      	movs	r1, #15
    4cbc:	400b      	ands	r3, r1
    4cbe:	b2d9      	uxtb	r1, r3
    4cc0:	6853      	ldr	r3, [r2, #4]
    4cc2:	200f      	movs	r0, #15
    4cc4:	4001      	ands	r1, r0
    4cc6:	0049      	lsls	r1, r1, #1
    4cc8:	201e      	movs	r0, #30
    4cca:	4383      	bics	r3, r0
    4ccc:	430b      	orrs	r3, r1
    4cce:	6053      	str	r3, [r2, #4]
}
    4cd0:	46c0      	nop			; (mov r8, r8)
    4cd2:	46bd      	mov	sp, r7
    4cd4:	b002      	add	sp, #8
    4cd6:	bd80      	pop	{r7, pc}
    4cd8:	41004000 	.word	0x41004000

00004cdc <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4cdc:	b580      	push	{r7, lr}
    4cde:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4ce0:	46c0      	nop			; (mov r8, r8)
    4ce2:	4b04      	ldr	r3, [pc, #16]	; (4cf4 <_system_dfll_wait_for_sync+0x18>)
    4ce4:	68db      	ldr	r3, [r3, #12]
    4ce6:	2210      	movs	r2, #16
    4ce8:	4013      	ands	r3, r2
    4cea:	d0fa      	beq.n	4ce2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4cec:	46c0      	nop			; (mov r8, r8)
    4cee:	46bd      	mov	sp, r7
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	40000800 	.word	0x40000800

00004cf8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4cf8:	b580      	push	{r7, lr}
    4cfa:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4cfc:	4b0c      	ldr	r3, [pc, #48]	; (4d30 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4cfe:	2202      	movs	r2, #2
    4d00:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4d02:	4b0c      	ldr	r3, [pc, #48]	; (4d34 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4d04:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4d06:	4a0a      	ldr	r2, [pc, #40]	; (4d30 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4d08:	4b0b      	ldr	r3, [pc, #44]	; (4d38 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4d0a:	689b      	ldr	r3, [r3, #8]
    4d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4d0e:	4a08      	ldr	r2, [pc, #32]	; (4d30 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4d10:	4b09      	ldr	r3, [pc, #36]	; (4d38 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4d12:	685b      	ldr	r3, [r3, #4]
    4d14:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4d16:	4b06      	ldr	r3, [pc, #24]	; (4d30 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4d18:	2200      	movs	r2, #0
    4d1a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4d1c:	4b05      	ldr	r3, [pc, #20]	; (4d34 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4d1e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4d20:	4a03      	ldr	r2, [pc, #12]	; (4d30 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4d22:	4b05      	ldr	r3, [pc, #20]	; (4d38 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4d24:	681b      	ldr	r3, [r3, #0]
    4d26:	b29b      	uxth	r3, r3
    4d28:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4d2a:	46c0      	nop			; (mov r8, r8)
    4d2c:	46bd      	mov	sp, r7
    4d2e:	bd80      	pop	{r7, pc}
    4d30:	40000800 	.word	0x40000800
    4d34:	00004cdd 	.word	0x00004cdd
    4d38:	200000d8 	.word	0x200000d8

00004d3c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4d3c:	b580      	push	{r7, lr}
    4d3e:	b082      	sub	sp, #8
    4d40:	af00      	add	r7, sp, #0
    4d42:	0002      	movs	r2, r0
    4d44:	1dfb      	adds	r3, r7, #7
    4d46:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4d48:	1dfb      	adds	r3, r7, #7
    4d4a:	781b      	ldrb	r3, [r3, #0]
    4d4c:	2b08      	cmp	r3, #8
    4d4e:	d840      	bhi.n	4dd2 <system_clock_source_get_hz+0x96>
    4d50:	009a      	lsls	r2, r3, #2
    4d52:	4b22      	ldr	r3, [pc, #136]	; (4ddc <system_clock_source_get_hz+0xa0>)
    4d54:	18d3      	adds	r3, r2, r3
    4d56:	681b      	ldr	r3, [r3, #0]
    4d58:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4d5a:	4b21      	ldr	r3, [pc, #132]	; (4de0 <system_clock_source_get_hz+0xa4>)
    4d5c:	691b      	ldr	r3, [r3, #16]
    4d5e:	e039      	b.n	4dd4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4d60:	4b20      	ldr	r3, [pc, #128]	; (4de4 <system_clock_source_get_hz+0xa8>)
    4d62:	6a1b      	ldr	r3, [r3, #32]
    4d64:	059b      	lsls	r3, r3, #22
    4d66:	0f9b      	lsrs	r3, r3, #30
    4d68:	b2db      	uxtb	r3, r3
    4d6a:	001a      	movs	r2, r3
    4d6c:	4b1e      	ldr	r3, [pc, #120]	; (4de8 <system_clock_source_get_hz+0xac>)
    4d6e:	40d3      	lsrs	r3, r2
    4d70:	e030      	b.n	4dd4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4d72:	2380      	movs	r3, #128	; 0x80
    4d74:	021b      	lsls	r3, r3, #8
    4d76:	e02d      	b.n	4dd4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4d78:	2380      	movs	r3, #128	; 0x80
    4d7a:	021b      	lsls	r3, r3, #8
    4d7c:	e02a      	b.n	4dd4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4d7e:	4b18      	ldr	r3, [pc, #96]	; (4de0 <system_clock_source_get_hz+0xa4>)
    4d80:	695b      	ldr	r3, [r3, #20]
    4d82:	e027      	b.n	4dd4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4d84:	4b16      	ldr	r3, [pc, #88]	; (4de0 <system_clock_source_get_hz+0xa4>)
    4d86:	681b      	ldr	r3, [r3, #0]
    4d88:	2202      	movs	r2, #2
    4d8a:	4013      	ands	r3, r2
    4d8c:	d101      	bne.n	4d92 <system_clock_source_get_hz+0x56>
			return 0;
    4d8e:	2300      	movs	r3, #0
    4d90:	e020      	b.n	4dd4 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4d92:	4b16      	ldr	r3, [pc, #88]	; (4dec <system_clock_source_get_hz+0xb0>)
    4d94:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4d96:	4b12      	ldr	r3, [pc, #72]	; (4de0 <system_clock_source_get_hz+0xa4>)
    4d98:	681b      	ldr	r3, [r3, #0]
    4d9a:	2204      	movs	r2, #4
    4d9c:	4013      	ands	r3, r2
    4d9e:	d009      	beq.n	4db4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4da0:	2000      	movs	r0, #0
    4da2:	4b13      	ldr	r3, [pc, #76]	; (4df0 <system_clock_source_get_hz+0xb4>)
    4da4:	4798      	blx	r3
    4da6:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4da8:	4b0d      	ldr	r3, [pc, #52]	; (4de0 <system_clock_source_get_hz+0xa4>)
    4daa:	689b      	ldr	r3, [r3, #8]
    4dac:	041b      	lsls	r3, r3, #16
    4dae:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4db0:	4353      	muls	r3, r2
    4db2:	e00f      	b.n	4dd4 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    4db4:	4b0f      	ldr	r3, [pc, #60]	; (4df4 <system_clock_source_get_hz+0xb8>)
    4db6:	e00d      	b.n	4dd4 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4db8:	4a0a      	ldr	r2, [pc, #40]	; (4de4 <system_clock_source_get_hz+0xa8>)
    4dba:	2350      	movs	r3, #80	; 0x50
    4dbc:	5cd3      	ldrb	r3, [r2, r3]
    4dbe:	b2db      	uxtb	r3, r3
    4dc0:	001a      	movs	r2, r3
    4dc2:	2304      	movs	r3, #4
    4dc4:	4013      	ands	r3, r2
    4dc6:	d101      	bne.n	4dcc <system_clock_source_get_hz+0x90>
			return 0;
    4dc8:	2300      	movs	r3, #0
    4dca:	e003      	b.n	4dd4 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    4dcc:	4b04      	ldr	r3, [pc, #16]	; (4de0 <system_clock_source_get_hz+0xa4>)
    4dce:	68db      	ldr	r3, [r3, #12]
    4dd0:	e000      	b.n	4dd4 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    4dd2:	2300      	movs	r3, #0
	}
}
    4dd4:	0018      	movs	r0, r3
    4dd6:	46bd      	mov	sp, r7
    4dd8:	b002      	add	sp, #8
    4dda:	bd80      	pop	{r7, pc}
    4ddc:	00006410 	.word	0x00006410
    4de0:	200000d8 	.word	0x200000d8
    4de4:	40000800 	.word	0x40000800
    4de8:	007a1200 	.word	0x007a1200
    4dec:	00004cdd 	.word	0x00004cdd
    4df0:	000055f5 	.word	0x000055f5
    4df4:	02dc6c00 	.word	0x02dc6c00

00004df8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4df8:	b580      	push	{r7, lr}
    4dfa:	b084      	sub	sp, #16
    4dfc:	af00      	add	r7, sp, #0
    4dfe:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4e00:	4b1a      	ldr	r3, [pc, #104]	; (4e6c <system_clock_source_osc8m_set_config+0x74>)
    4e02:	6a1b      	ldr	r3, [r3, #32]
    4e04:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4e06:	687b      	ldr	r3, [r7, #4]
    4e08:	781b      	ldrb	r3, [r3, #0]
    4e0a:	1c1a      	adds	r2, r3, #0
    4e0c:	2303      	movs	r3, #3
    4e0e:	4013      	ands	r3, r2
    4e10:	b2da      	uxtb	r2, r3
    4e12:	230d      	movs	r3, #13
    4e14:	18fb      	adds	r3, r7, r3
    4e16:	2103      	movs	r1, #3
    4e18:	400a      	ands	r2, r1
    4e1a:	0010      	movs	r0, r2
    4e1c:	781a      	ldrb	r2, [r3, #0]
    4e1e:	2103      	movs	r1, #3
    4e20:	438a      	bics	r2, r1
    4e22:	1c11      	adds	r1, r2, #0
    4e24:	1c02      	adds	r2, r0, #0
    4e26:	430a      	orrs	r2, r1
    4e28:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	789a      	ldrb	r2, [r3, #2]
    4e2e:	230c      	movs	r3, #12
    4e30:	18fb      	adds	r3, r7, r3
    4e32:	01d0      	lsls	r0, r2, #7
    4e34:	781a      	ldrb	r2, [r3, #0]
    4e36:	217f      	movs	r1, #127	; 0x7f
    4e38:	400a      	ands	r2, r1
    4e3a:	1c11      	adds	r1, r2, #0
    4e3c:	1c02      	adds	r2, r0, #0
    4e3e:	430a      	orrs	r2, r1
    4e40:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	785a      	ldrb	r2, [r3, #1]
    4e46:	230c      	movs	r3, #12
    4e48:	18fb      	adds	r3, r7, r3
    4e4a:	2101      	movs	r1, #1
    4e4c:	400a      	ands	r2, r1
    4e4e:	0190      	lsls	r0, r2, #6
    4e50:	781a      	ldrb	r2, [r3, #0]
    4e52:	2140      	movs	r1, #64	; 0x40
    4e54:	438a      	bics	r2, r1
    4e56:	1c11      	adds	r1, r2, #0
    4e58:	1c02      	adds	r2, r0, #0
    4e5a:	430a      	orrs	r2, r1
    4e5c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4e5e:	4b03      	ldr	r3, [pc, #12]	; (4e6c <system_clock_source_osc8m_set_config+0x74>)
    4e60:	68fa      	ldr	r2, [r7, #12]
    4e62:	621a      	str	r2, [r3, #32]
}
    4e64:	46c0      	nop			; (mov r8, r8)
    4e66:	46bd      	mov	sp, r7
    4e68:	b004      	add	sp, #16
    4e6a:	bd80      	pop	{r7, pc}
    4e6c:	40000800 	.word	0x40000800

00004e70 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b084      	sub	sp, #16
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    4e78:	4b2f      	ldr	r3, [pc, #188]	; (4f38 <system_clock_source_osc32k_set_config+0xc8>)
    4e7a:	699b      	ldr	r3, [r3, #24]
    4e7c:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	785a      	ldrb	r2, [r3, #1]
    4e82:	230c      	movs	r3, #12
    4e84:	18fb      	adds	r3, r7, r3
    4e86:	2101      	movs	r1, #1
    4e88:	400a      	ands	r2, r1
    4e8a:	00d0      	lsls	r0, r2, #3
    4e8c:	781a      	ldrb	r2, [r3, #0]
    4e8e:	2108      	movs	r1, #8
    4e90:	438a      	bics	r2, r1
    4e92:	1c11      	adds	r1, r2, #0
    4e94:	1c02      	adds	r2, r0, #0
    4e96:	430a      	orrs	r2, r1
    4e98:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    4e9a:	687b      	ldr	r3, [r7, #4]
    4e9c:	789a      	ldrb	r2, [r3, #2]
    4e9e:	230c      	movs	r3, #12
    4ea0:	18fb      	adds	r3, r7, r3
    4ea2:	2101      	movs	r1, #1
    4ea4:	400a      	ands	r2, r1
    4ea6:	0090      	lsls	r0, r2, #2
    4ea8:	781a      	ldrb	r2, [r3, #0]
    4eaa:	2104      	movs	r1, #4
    4eac:	438a      	bics	r2, r1
    4eae:	1c11      	adds	r1, r2, #0
    4eb0:	1c02      	adds	r2, r0, #0
    4eb2:	430a      	orrs	r2, r1
    4eb4:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	781b      	ldrb	r3, [r3, #0]
    4eba:	1c1a      	adds	r2, r3, #0
    4ebc:	2307      	movs	r3, #7
    4ebe:	4013      	ands	r3, r2
    4ec0:	b2da      	uxtb	r2, r3
    4ec2:	230d      	movs	r3, #13
    4ec4:	18fb      	adds	r3, r7, r3
    4ec6:	2107      	movs	r1, #7
    4ec8:	400a      	ands	r2, r1
    4eca:	0010      	movs	r0, r2
    4ecc:	781a      	ldrb	r2, [r3, #0]
    4ece:	2107      	movs	r1, #7
    4ed0:	438a      	bics	r2, r1
    4ed2:	1c11      	adds	r1, r2, #0
    4ed4:	1c02      	adds	r2, r0, #0
    4ed6:	430a      	orrs	r2, r1
    4ed8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4eda:	687b      	ldr	r3, [r7, #4]
    4edc:	791a      	ldrb	r2, [r3, #4]
    4ede:	230c      	movs	r3, #12
    4ee0:	18fb      	adds	r3, r7, r3
    4ee2:	01d0      	lsls	r0, r2, #7
    4ee4:	781a      	ldrb	r2, [r3, #0]
    4ee6:	217f      	movs	r1, #127	; 0x7f
    4ee8:	400a      	ands	r2, r1
    4eea:	1c11      	adds	r1, r2, #0
    4eec:	1c02      	adds	r2, r0, #0
    4eee:	430a      	orrs	r2, r1
    4ef0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4ef2:	687b      	ldr	r3, [r7, #4]
    4ef4:	78da      	ldrb	r2, [r3, #3]
    4ef6:	230c      	movs	r3, #12
    4ef8:	18fb      	adds	r3, r7, r3
    4efa:	2101      	movs	r1, #1
    4efc:	400a      	ands	r2, r1
    4efe:	0190      	lsls	r0, r2, #6
    4f00:	781a      	ldrb	r2, [r3, #0]
    4f02:	2140      	movs	r1, #64	; 0x40
    4f04:	438a      	bics	r2, r1
    4f06:	1c11      	adds	r1, r2, #0
    4f08:	1c02      	adds	r2, r0, #0
    4f0a:	430a      	orrs	r2, r1
    4f0c:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	795a      	ldrb	r2, [r3, #5]
    4f12:	230d      	movs	r3, #13
    4f14:	18fb      	adds	r3, r7, r3
    4f16:	2101      	movs	r1, #1
    4f18:	400a      	ands	r2, r1
    4f1a:	0110      	lsls	r0, r2, #4
    4f1c:	781a      	ldrb	r2, [r3, #0]
    4f1e:	2110      	movs	r1, #16
    4f20:	438a      	bics	r2, r1
    4f22:	1c11      	adds	r1, r2, #0
    4f24:	1c02      	adds	r2, r0, #0
    4f26:	430a      	orrs	r2, r1
    4f28:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    4f2a:	4b03      	ldr	r3, [pc, #12]	; (4f38 <system_clock_source_osc32k_set_config+0xc8>)
    4f2c:	68fa      	ldr	r2, [r7, #12]
    4f2e:	619a      	str	r2, [r3, #24]
}
    4f30:	46c0      	nop			; (mov r8, r8)
    4f32:	46bd      	mov	sp, r7
    4f34:	b004      	add	sp, #16
    4f36:	bd80      	pop	{r7, pc}
    4f38:	40000800 	.word	0x40000800

00004f3c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4f3c:	b580      	push	{r7, lr}
    4f3e:	b082      	sub	sp, #8
    4f40:	af00      	add	r7, sp, #0
    4f42:	0002      	movs	r2, r0
    4f44:	1dfb      	adds	r3, r7, #7
    4f46:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4f48:	1dfb      	adds	r3, r7, #7
    4f4a:	781b      	ldrb	r3, [r3, #0]
    4f4c:	2b08      	cmp	r3, #8
    4f4e:	d83b      	bhi.n	4fc8 <system_clock_source_enable+0x8c>
    4f50:	009a      	lsls	r2, r3, #2
    4f52:	4b21      	ldr	r3, [pc, #132]	; (4fd8 <system_clock_source_enable+0x9c>)
    4f54:	18d3      	adds	r3, r2, r3
    4f56:	681b      	ldr	r3, [r3, #0]
    4f58:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4f5a:	4b20      	ldr	r3, [pc, #128]	; (4fdc <system_clock_source_enable+0xa0>)
    4f5c:	4a1f      	ldr	r2, [pc, #124]	; (4fdc <system_clock_source_enable+0xa0>)
    4f5e:	6a12      	ldr	r2, [r2, #32]
    4f60:	2102      	movs	r1, #2
    4f62:	430a      	orrs	r2, r1
    4f64:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4f66:	2300      	movs	r3, #0
    4f68:	e031      	b.n	4fce <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4f6a:	4b1c      	ldr	r3, [pc, #112]	; (4fdc <system_clock_source_enable+0xa0>)
    4f6c:	4a1b      	ldr	r2, [pc, #108]	; (4fdc <system_clock_source_enable+0xa0>)
    4f6e:	6992      	ldr	r2, [r2, #24]
    4f70:	2102      	movs	r1, #2
    4f72:	430a      	orrs	r2, r1
    4f74:	619a      	str	r2, [r3, #24]
		break;
    4f76:	e029      	b.n	4fcc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4f78:	4a18      	ldr	r2, [pc, #96]	; (4fdc <system_clock_source_enable+0xa0>)
    4f7a:	4b18      	ldr	r3, [pc, #96]	; (4fdc <system_clock_source_enable+0xa0>)
    4f7c:	8a1b      	ldrh	r3, [r3, #16]
    4f7e:	b29b      	uxth	r3, r3
    4f80:	2102      	movs	r1, #2
    4f82:	430b      	orrs	r3, r1
    4f84:	b29b      	uxth	r3, r3
    4f86:	8213      	strh	r3, [r2, #16]
		break;
    4f88:	e020      	b.n	4fcc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4f8a:	4a14      	ldr	r2, [pc, #80]	; (4fdc <system_clock_source_enable+0xa0>)
    4f8c:	4b13      	ldr	r3, [pc, #76]	; (4fdc <system_clock_source_enable+0xa0>)
    4f8e:	8a9b      	ldrh	r3, [r3, #20]
    4f90:	b29b      	uxth	r3, r3
    4f92:	2102      	movs	r1, #2
    4f94:	430b      	orrs	r3, r1
    4f96:	b29b      	uxth	r3, r3
    4f98:	8293      	strh	r3, [r2, #20]
		break;
    4f9a:	e017      	b.n	4fcc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4f9c:	4b10      	ldr	r3, [pc, #64]	; (4fe0 <system_clock_source_enable+0xa4>)
    4f9e:	681b      	ldr	r3, [r3, #0]
    4fa0:	2202      	movs	r2, #2
    4fa2:	431a      	orrs	r2, r3
    4fa4:	4b0e      	ldr	r3, [pc, #56]	; (4fe0 <system_clock_source_enable+0xa4>)
    4fa6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4fa8:	4b0e      	ldr	r3, [pc, #56]	; (4fe4 <system_clock_source_enable+0xa8>)
    4faa:	4798      	blx	r3
		break;
    4fac:	e00e      	b.n	4fcc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4fae:	4a0b      	ldr	r2, [pc, #44]	; (4fdc <system_clock_source_enable+0xa0>)
    4fb0:	490a      	ldr	r1, [pc, #40]	; (4fdc <system_clock_source_enable+0xa0>)
    4fb2:	2344      	movs	r3, #68	; 0x44
    4fb4:	5ccb      	ldrb	r3, [r1, r3]
    4fb6:	b2db      	uxtb	r3, r3
    4fb8:	2102      	movs	r1, #2
    4fba:	430b      	orrs	r3, r1
    4fbc:	b2d9      	uxtb	r1, r3
    4fbe:	2344      	movs	r3, #68	; 0x44
    4fc0:	54d1      	strb	r1, [r2, r3]
		break;
    4fc2:	e003      	b.n	4fcc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4fc4:	2300      	movs	r3, #0
    4fc6:	e002      	b.n	4fce <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4fc8:	2317      	movs	r3, #23
    4fca:	e000      	b.n	4fce <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4fcc:	2300      	movs	r3, #0
}
    4fce:	0018      	movs	r0, r3
    4fd0:	46bd      	mov	sp, r7
    4fd2:	b002      	add	sp, #8
    4fd4:	bd80      	pop	{r7, pc}
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	00006434 	.word	0x00006434
    4fdc:	40000800 	.word	0x40000800
    4fe0:	200000d8 	.word	0x200000d8
    4fe4:	00004cf9 	.word	0x00004cf9

00004fe8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    4fe8:	b580      	push	{r7, lr}
    4fea:	b082      	sub	sp, #8
    4fec:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4fee:	003b      	movs	r3, r7
    4ff0:	2201      	movs	r2, #1
    4ff2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4ff4:	2300      	movs	r3, #0
    4ff6:	607b      	str	r3, [r7, #4]
    4ff8:	e009      	b.n	500e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4ffa:	687b      	ldr	r3, [r7, #4]
    4ffc:	b2db      	uxtb	r3, r3
    4ffe:	003a      	movs	r2, r7
    5000:	0011      	movs	r1, r2
    5002:	0018      	movs	r0, r3
    5004:	4b05      	ldr	r3, [pc, #20]	; (501c <_switch_peripheral_gclk+0x34>)
    5006:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5008:	687b      	ldr	r3, [r7, #4]
    500a:	3301      	adds	r3, #1
    500c:	607b      	str	r3, [r7, #4]
    500e:	687b      	ldr	r3, [r7, #4]
    5010:	2b24      	cmp	r3, #36	; 0x24
    5012:	d9f2      	bls.n	4ffa <_switch_peripheral_gclk+0x12>
	}
}
    5014:	46c0      	nop			; (mov r8, r8)
    5016:	46bd      	mov	sp, r7
    5018:	b002      	add	sp, #8
    501a:	bd80      	pop	{r7, pc}
    501c:	000054d1 	.word	0x000054d1

00005020 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5020:	b580      	push	{r7, lr}
    5022:	b0a2      	sub	sp, #136	; 0x88
    5024:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5026:	4b4f      	ldr	r3, [pc, #316]	; (5164 <system_clock_init+0x144>)
    5028:	22c2      	movs	r2, #194	; 0xc2
    502a:	00d2      	lsls	r2, r2, #3
    502c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    502e:	2000      	movs	r0, #0
    5030:	4b4d      	ldr	r3, [pc, #308]	; (5168 <system_clock_init+0x148>)
    5032:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5034:	4b4d      	ldr	r3, [pc, #308]	; (516c <system_clock_init+0x14c>)
    5036:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    5038:	4a4a      	ldr	r2, [pc, #296]	; (5164 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    503a:	4b4d      	ldr	r3, [pc, #308]	; (5170 <system_clock_init+0x150>)
    503c:	681b      	ldr	r3, [r3, #0]
    503e:	099b      	lsrs	r3, r3, #6
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    5040:	b2db      	uxtb	r3, r3
    5042:	1c19      	adds	r1, r3, #0
    5044:	237f      	movs	r3, #127	; 0x7f
    5046:	400b      	ands	r3, r1
    5048:	b2d9      	uxtb	r1, r3
	SYSCTRL->OSC32K.bit.CALIB =
    504a:	6993      	ldr	r3, [r2, #24]
    504c:	207f      	movs	r0, #127	; 0x7f
    504e:	4001      	ands	r1, r0
    5050:	0409      	lsls	r1, r1, #16
    5052:	4848      	ldr	r0, [pc, #288]	; (5174 <system_clock_init+0x154>)
    5054:	4003      	ands	r3, r0
    5056:	430b      	orrs	r3, r1
    5058:	6193      	str	r3, [r2, #24]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    505a:	2380      	movs	r3, #128	; 0x80
    505c:	18fb      	adds	r3, r7, r3
    505e:	0018      	movs	r0, r3
    5060:	4b45      	ldr	r3, [pc, #276]	; (5178 <system_clock_init+0x158>)
    5062:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    5064:	2380      	movs	r3, #128	; 0x80
    5066:	18fb      	adds	r3, r7, r3
    5068:	2207      	movs	r2, #7
    506a:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    506c:	2380      	movs	r3, #128	; 0x80
    506e:	18fb      	adds	r3, r7, r3
    5070:	2201      	movs	r2, #1
    5072:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    5074:	2380      	movs	r3, #128	; 0x80
    5076:	18fb      	adds	r3, r7, r3
    5078:	2201      	movs	r2, #1
    507a:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    507c:	2380      	movs	r3, #128	; 0x80
    507e:	18fb      	adds	r3, r7, r3
    5080:	2201      	movs	r2, #1
    5082:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    5084:	2380      	movs	r3, #128	; 0x80
    5086:	18fb      	adds	r3, r7, r3
    5088:	2200      	movs	r2, #0
    508a:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    508c:	2380      	movs	r3, #128	; 0x80
    508e:	18fb      	adds	r3, r7, r3
    5090:	0018      	movs	r0, r3
    5092:	4b3a      	ldr	r3, [pc, #232]	; (517c <system_clock_init+0x15c>)
    5094:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    5096:	2004      	movs	r0, #4
    5098:	4b39      	ldr	r3, [pc, #228]	; (5180 <system_clock_init+0x160>)
    509a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    509c:	237c      	movs	r3, #124	; 0x7c
    509e:	18fb      	adds	r3, r7, r3
    50a0:	0018      	movs	r0, r3
    50a2:	4b38      	ldr	r3, [pc, #224]	; (5184 <system_clock_init+0x164>)
    50a4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    50a6:	237c      	movs	r3, #124	; 0x7c
    50a8:	18fb      	adds	r3, r7, r3
    50aa:	2200      	movs	r2, #0
    50ac:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    50ae:	237c      	movs	r3, #124	; 0x7c
    50b0:	18fb      	adds	r3, r7, r3
    50b2:	2201      	movs	r2, #1
    50b4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    50b6:	237c      	movs	r3, #124	; 0x7c
    50b8:	18fb      	adds	r3, r7, r3
    50ba:	2200      	movs	r2, #0
    50bc:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    50be:	237c      	movs	r3, #124	; 0x7c
    50c0:	18fb      	adds	r3, r7, r3
    50c2:	0018      	movs	r0, r3
    50c4:	4b30      	ldr	r3, [pc, #192]	; (5188 <system_clock_init+0x168>)
    50c6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    50c8:	2006      	movs	r0, #6
    50ca:	4b2d      	ldr	r3, [pc, #180]	; (5180 <system_clock_init+0x160>)
    50cc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    50ce:	4b2f      	ldr	r3, [pc, #188]	; (518c <system_clock_init+0x16c>)
    50d0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    50d2:	2358      	movs	r3, #88	; 0x58
    50d4:	18fb      	adds	r3, r7, r3
    50d6:	0018      	movs	r0, r3
    50d8:	4b2d      	ldr	r3, [pc, #180]	; (5190 <system_clock_init+0x170>)
    50da:	4798      	blx	r3
    50dc:	2358      	movs	r3, #88	; 0x58
    50de:	18fb      	adds	r3, r7, r3
    50e0:	2204      	movs	r2, #4
    50e2:	701a      	strb	r2, [r3, #0]
    50e4:	2358      	movs	r3, #88	; 0x58
    50e6:	18fb      	adds	r3, r7, r3
    50e8:	2220      	movs	r2, #32
    50ea:	605a      	str	r2, [r3, #4]
    50ec:	2358      	movs	r3, #88	; 0x58
    50ee:	18fb      	adds	r3, r7, r3
    50f0:	2200      	movs	r2, #0
    50f2:	721a      	strb	r2, [r3, #8]
    50f4:	2358      	movs	r3, #88	; 0x58
    50f6:	18fb      	adds	r3, r7, r3
    50f8:	2200      	movs	r2, #0
    50fa:	725a      	strb	r2, [r3, #9]
    50fc:	2358      	movs	r3, #88	; 0x58
    50fe:	18fb      	adds	r3, r7, r3
    5100:	0019      	movs	r1, r3
    5102:	2002      	movs	r0, #2
    5104:	4b23      	ldr	r3, [pc, #140]	; (5194 <system_clock_init+0x174>)
    5106:	4798      	blx	r3
    5108:	2002      	movs	r0, #2
    510a:	4b23      	ldr	r3, [pc, #140]	; (5198 <system_clock_init+0x178>)
    510c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    510e:	2000      	movs	r0, #0
    5110:	4b22      	ldr	r3, [pc, #136]	; (519c <system_clock_init+0x17c>)
    5112:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    5114:	2100      	movs	r1, #0
    5116:	2000      	movs	r0, #0
    5118:	4b21      	ldr	r3, [pc, #132]	; (51a0 <system_clock_init+0x180>)
    511a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    511c:	2100      	movs	r1, #0
    511e:	2001      	movs	r0, #1
    5120:	4b1f      	ldr	r3, [pc, #124]	; (51a0 <system_clock_init+0x180>)
    5122:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    5124:	2100      	movs	r1, #0
    5126:	2002      	movs	r0, #2
    5128:	4b1d      	ldr	r3, [pc, #116]	; (51a0 <system_clock_init+0x180>)
    512a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    512c:	1d3b      	adds	r3, r7, #4
    512e:	0018      	movs	r0, r3
    5130:	4b17      	ldr	r3, [pc, #92]	; (5190 <system_clock_init+0x170>)
    5132:	4798      	blx	r3
    5134:	1d3b      	adds	r3, r7, #4
    5136:	2206      	movs	r2, #6
    5138:	701a      	strb	r2, [r3, #0]
    513a:	1d3b      	adds	r3, r7, #4
    513c:	2201      	movs	r2, #1
    513e:	605a      	str	r2, [r3, #4]
    5140:	1d3b      	adds	r3, r7, #4
    5142:	2200      	movs	r2, #0
    5144:	721a      	strb	r2, [r3, #8]
    5146:	1d3b      	adds	r3, r7, #4
    5148:	2200      	movs	r2, #0
    514a:	725a      	strb	r2, [r3, #9]
    514c:	1d3b      	adds	r3, r7, #4
    514e:	0019      	movs	r1, r3
    5150:	2000      	movs	r0, #0
    5152:	4b10      	ldr	r3, [pc, #64]	; (5194 <system_clock_init+0x174>)
    5154:	4798      	blx	r3
    5156:	2000      	movs	r0, #0
    5158:	4b0f      	ldr	r3, [pc, #60]	; (5198 <system_clock_init+0x178>)
    515a:	4798      	blx	r3
#endif
}
    515c:	46c0      	nop			; (mov r8, r8)
    515e:	46bd      	mov	sp, r7
    5160:	b022      	add	sp, #136	; 0x88
    5162:	bd80      	pop	{r7, pc}
    5164:	40000800 	.word	0x40000800
    5168:	00004ca9 	.word	0x00004ca9
    516c:	00004fe9 	.word	0x00004fe9
    5170:	00806024 	.word	0x00806024
    5174:	ff80ffff 	.word	0xff80ffff
    5178:	00004bdf 	.word	0x00004bdf
    517c:	00004e71 	.word	0x00004e71
    5180:	00004f3d 	.word	0x00004f3d
    5184:	00004c13 	.word	0x00004c13
    5188:	00004df9 	.word	0x00004df9
    518c:	00005249 	.word	0x00005249
    5190:	00004bb1 	.word	0x00004bb1
    5194:	00005279 	.word	0x00005279
    5198:	0000539d 	.word	0x0000539d
    519c:	00004c35 	.word	0x00004c35
    51a0:	00004c55 	.word	0x00004c55

000051a4 <system_apb_clock_set_mask>:
{
    51a4:	b580      	push	{r7, lr}
    51a6:	b082      	sub	sp, #8
    51a8:	af00      	add	r7, sp, #0
    51aa:	0002      	movs	r2, r0
    51ac:	6039      	str	r1, [r7, #0]
    51ae:	1dfb      	adds	r3, r7, #7
    51b0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    51b2:	1dfb      	adds	r3, r7, #7
    51b4:	781b      	ldrb	r3, [r3, #0]
    51b6:	2b01      	cmp	r3, #1
    51b8:	d00a      	beq.n	51d0 <system_apb_clock_set_mask+0x2c>
    51ba:	2b02      	cmp	r3, #2
    51bc:	d00f      	beq.n	51de <system_apb_clock_set_mask+0x3a>
    51be:	2b00      	cmp	r3, #0
    51c0:	d114      	bne.n	51ec <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    51c2:	4b0e      	ldr	r3, [pc, #56]	; (51fc <system_apb_clock_set_mask+0x58>)
    51c4:	4a0d      	ldr	r2, [pc, #52]	; (51fc <system_apb_clock_set_mask+0x58>)
    51c6:	6991      	ldr	r1, [r2, #24]
    51c8:	683a      	ldr	r2, [r7, #0]
    51ca:	430a      	orrs	r2, r1
    51cc:	619a      	str	r2, [r3, #24]
			break;
    51ce:	e00f      	b.n	51f0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    51d0:	4b0a      	ldr	r3, [pc, #40]	; (51fc <system_apb_clock_set_mask+0x58>)
    51d2:	4a0a      	ldr	r2, [pc, #40]	; (51fc <system_apb_clock_set_mask+0x58>)
    51d4:	69d1      	ldr	r1, [r2, #28]
    51d6:	683a      	ldr	r2, [r7, #0]
    51d8:	430a      	orrs	r2, r1
    51da:	61da      	str	r2, [r3, #28]
			break;
    51dc:	e008      	b.n	51f0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    51de:	4b07      	ldr	r3, [pc, #28]	; (51fc <system_apb_clock_set_mask+0x58>)
    51e0:	4a06      	ldr	r2, [pc, #24]	; (51fc <system_apb_clock_set_mask+0x58>)
    51e2:	6a11      	ldr	r1, [r2, #32]
    51e4:	683a      	ldr	r2, [r7, #0]
    51e6:	430a      	orrs	r2, r1
    51e8:	621a      	str	r2, [r3, #32]
			break;
    51ea:	e001      	b.n	51f0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    51ec:	2317      	movs	r3, #23
    51ee:	e000      	b.n	51f2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    51f0:	2300      	movs	r3, #0
}
    51f2:	0018      	movs	r0, r3
    51f4:	46bd      	mov	sp, r7
    51f6:	b002      	add	sp, #8
    51f8:	bd80      	pop	{r7, pc}
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	40000400 	.word	0x40000400

00005200 <system_interrupt_enter_critical_section>:
{
    5200:	b580      	push	{r7, lr}
    5202:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5204:	4b02      	ldr	r3, [pc, #8]	; (5210 <system_interrupt_enter_critical_section+0x10>)
    5206:	4798      	blx	r3
}
    5208:	46c0      	nop			; (mov r8, r8)
    520a:	46bd      	mov	sp, r7
    520c:	bd80      	pop	{r7, pc}
    520e:	46c0      	nop			; (mov r8, r8)
    5210:	00004b1d 	.word	0x00004b1d

00005214 <system_interrupt_leave_critical_section>:
{
    5214:	b580      	push	{r7, lr}
    5216:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5218:	4b02      	ldr	r3, [pc, #8]	; (5224 <system_interrupt_leave_critical_section+0x10>)
    521a:	4798      	blx	r3
}
    521c:	46c0      	nop			; (mov r8, r8)
    521e:	46bd      	mov	sp, r7
    5220:	bd80      	pop	{r7, pc}
    5222:	46c0      	nop			; (mov r8, r8)
    5224:	00004b71 	.word	0x00004b71

00005228 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    5228:	b580      	push	{r7, lr}
    522a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    522c:	4b05      	ldr	r3, [pc, #20]	; (5244 <system_gclk_is_syncing+0x1c>)
    522e:	785b      	ldrb	r3, [r3, #1]
    5230:	b2db      	uxtb	r3, r3
    5232:	b25b      	sxtb	r3, r3
    5234:	2b00      	cmp	r3, #0
    5236:	da01      	bge.n	523c <system_gclk_is_syncing+0x14>
		return true;
    5238:	2301      	movs	r3, #1
    523a:	e000      	b.n	523e <system_gclk_is_syncing+0x16>
	}

	return false;
    523c:	2300      	movs	r3, #0
}
    523e:	0018      	movs	r0, r3
    5240:	46bd      	mov	sp, r7
    5242:	bd80      	pop	{r7, pc}
    5244:	40000c00 	.word	0x40000c00

00005248 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5248:	b580      	push	{r7, lr}
    524a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    524c:	2108      	movs	r1, #8
    524e:	2000      	movs	r0, #0
    5250:	4b07      	ldr	r3, [pc, #28]	; (5270 <system_gclk_init+0x28>)
    5252:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5254:	4b07      	ldr	r3, [pc, #28]	; (5274 <system_gclk_init+0x2c>)
    5256:	2201      	movs	r2, #1
    5258:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    525a:	46c0      	nop			; (mov r8, r8)
    525c:	4b05      	ldr	r3, [pc, #20]	; (5274 <system_gclk_init+0x2c>)
    525e:	781b      	ldrb	r3, [r3, #0]
    5260:	b2db      	uxtb	r3, r3
    5262:	001a      	movs	r2, r3
    5264:	2301      	movs	r3, #1
    5266:	4013      	ands	r3, r2
    5268:	d1f8      	bne.n	525c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    526a:	46c0      	nop			; (mov r8, r8)
    526c:	46bd      	mov	sp, r7
    526e:	bd80      	pop	{r7, pc}
    5270:	000051a5 	.word	0x000051a5
    5274:	40000c00 	.word	0x40000c00

00005278 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5278:	b580      	push	{r7, lr}
    527a:	b086      	sub	sp, #24
    527c:	af00      	add	r7, sp, #0
    527e:	0002      	movs	r2, r0
    5280:	6039      	str	r1, [r7, #0]
    5282:	1dfb      	adds	r3, r7, #7
    5284:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5286:	1dfb      	adds	r3, r7, #7
    5288:	781b      	ldrb	r3, [r3, #0]
    528a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    528c:	1dfb      	adds	r3, r7, #7
    528e:	781b      	ldrb	r3, [r3, #0]
    5290:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5292:	683b      	ldr	r3, [r7, #0]
    5294:	781b      	ldrb	r3, [r3, #0]
    5296:	021b      	lsls	r3, r3, #8
    5298:	001a      	movs	r2, r3
    529a:	697b      	ldr	r3, [r7, #20]
    529c:	4313      	orrs	r3, r2
    529e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    52a0:	683b      	ldr	r3, [r7, #0]
    52a2:	785b      	ldrb	r3, [r3, #1]
    52a4:	2b00      	cmp	r3, #0
    52a6:	d004      	beq.n	52b2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    52a8:	697b      	ldr	r3, [r7, #20]
    52aa:	2280      	movs	r2, #128	; 0x80
    52ac:	02d2      	lsls	r2, r2, #11
    52ae:	4313      	orrs	r3, r2
    52b0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    52b2:	683b      	ldr	r3, [r7, #0]
    52b4:	7a5b      	ldrb	r3, [r3, #9]
    52b6:	2b00      	cmp	r3, #0
    52b8:	d004      	beq.n	52c4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    52ba:	697b      	ldr	r3, [r7, #20]
    52bc:	2280      	movs	r2, #128	; 0x80
    52be:	0312      	lsls	r2, r2, #12
    52c0:	4313      	orrs	r3, r2
    52c2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    52c4:	683b      	ldr	r3, [r7, #0]
    52c6:	685b      	ldr	r3, [r3, #4]
    52c8:	2b01      	cmp	r3, #1
    52ca:	d92c      	bls.n	5326 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    52cc:	683b      	ldr	r3, [r7, #0]
    52ce:	685a      	ldr	r2, [r3, #4]
    52d0:	683b      	ldr	r3, [r7, #0]
    52d2:	685b      	ldr	r3, [r3, #4]
    52d4:	3b01      	subs	r3, #1
    52d6:	4013      	ands	r3, r2
    52d8:	d11a      	bne.n	5310 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    52da:	2300      	movs	r3, #0
    52dc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    52de:	2302      	movs	r3, #2
    52e0:	60bb      	str	r3, [r7, #8]
    52e2:	e005      	b.n	52f0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    52e4:	68fb      	ldr	r3, [r7, #12]
    52e6:	3301      	adds	r3, #1
    52e8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    52ea:	68bb      	ldr	r3, [r7, #8]
    52ec:	005b      	lsls	r3, r3, #1
    52ee:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    52f0:	683b      	ldr	r3, [r7, #0]
    52f2:	685a      	ldr	r2, [r3, #4]
    52f4:	68bb      	ldr	r3, [r7, #8]
    52f6:	429a      	cmp	r2, r3
    52f8:	d8f4      	bhi.n	52e4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    52fa:	68fb      	ldr	r3, [r7, #12]
    52fc:	021b      	lsls	r3, r3, #8
    52fe:	693a      	ldr	r2, [r7, #16]
    5300:	4313      	orrs	r3, r2
    5302:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5304:	697b      	ldr	r3, [r7, #20]
    5306:	2280      	movs	r2, #128	; 0x80
    5308:	0352      	lsls	r2, r2, #13
    530a:	4313      	orrs	r3, r2
    530c:	617b      	str	r3, [r7, #20]
    530e:	e00a      	b.n	5326 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5310:	683b      	ldr	r3, [r7, #0]
    5312:	685b      	ldr	r3, [r3, #4]
    5314:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    5316:	693a      	ldr	r2, [r7, #16]
    5318:	4313      	orrs	r3, r2
    531a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    531c:	697b      	ldr	r3, [r7, #20]
    531e:	2280      	movs	r2, #128	; 0x80
    5320:	0292      	lsls	r2, r2, #10
    5322:	4313      	orrs	r3, r2
    5324:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5326:	683b      	ldr	r3, [r7, #0]
    5328:	7a1b      	ldrb	r3, [r3, #8]
    532a:	2b00      	cmp	r3, #0
    532c:	d004      	beq.n	5338 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    532e:	697b      	ldr	r3, [r7, #20]
    5330:	2280      	movs	r2, #128	; 0x80
    5332:	0392      	lsls	r2, r2, #14
    5334:	4313      	orrs	r3, r2
    5336:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    5338:	46c0      	nop			; (mov r8, r8)
    533a:	4b13      	ldr	r3, [pc, #76]	; (5388 <system_gclk_gen_set_config+0x110>)
    533c:	4798      	blx	r3
    533e:	1e03      	subs	r3, r0, #0
    5340:	d1fb      	bne.n	533a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5342:	4b12      	ldr	r3, [pc, #72]	; (538c <system_gclk_gen_set_config+0x114>)
    5344:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5346:	4a12      	ldr	r2, [pc, #72]	; (5390 <system_gclk_gen_set_config+0x118>)
    5348:	1dfb      	adds	r3, r7, #7
    534a:	781b      	ldrb	r3, [r3, #0]
    534c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    534e:	46c0      	nop			; (mov r8, r8)
    5350:	4b0d      	ldr	r3, [pc, #52]	; (5388 <system_gclk_gen_set_config+0x110>)
    5352:	4798      	blx	r3
    5354:	1e03      	subs	r3, r0, #0
    5356:	d1fb      	bne.n	5350 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5358:	4b0e      	ldr	r3, [pc, #56]	; (5394 <system_gclk_gen_set_config+0x11c>)
    535a:	693a      	ldr	r2, [r7, #16]
    535c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    535e:	46c0      	nop			; (mov r8, r8)
    5360:	4b09      	ldr	r3, [pc, #36]	; (5388 <system_gclk_gen_set_config+0x110>)
    5362:	4798      	blx	r3
    5364:	1e03      	subs	r3, r0, #0
    5366:	d1fb      	bne.n	5360 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5368:	4b0a      	ldr	r3, [pc, #40]	; (5394 <system_gclk_gen_set_config+0x11c>)
    536a:	4a0a      	ldr	r2, [pc, #40]	; (5394 <system_gclk_gen_set_config+0x11c>)
    536c:	6851      	ldr	r1, [r2, #4]
    536e:	2280      	movs	r2, #128	; 0x80
    5370:	0252      	lsls	r2, r2, #9
    5372:	4011      	ands	r1, r2
    5374:	697a      	ldr	r2, [r7, #20]
    5376:	430a      	orrs	r2, r1
    5378:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    537a:	4b07      	ldr	r3, [pc, #28]	; (5398 <system_gclk_gen_set_config+0x120>)
    537c:	4798      	blx	r3
}
    537e:	46c0      	nop			; (mov r8, r8)
    5380:	46bd      	mov	sp, r7
    5382:	b006      	add	sp, #24
    5384:	bd80      	pop	{r7, pc}
    5386:	46c0      	nop			; (mov r8, r8)
    5388:	00005229 	.word	0x00005229
    538c:	00005201 	.word	0x00005201
    5390:	40000c08 	.word	0x40000c08
    5394:	40000c00 	.word	0x40000c00
    5398:	00005215 	.word	0x00005215

0000539c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    539c:	b580      	push	{r7, lr}
    539e:	b082      	sub	sp, #8
    53a0:	af00      	add	r7, sp, #0
    53a2:	0002      	movs	r2, r0
    53a4:	1dfb      	adds	r3, r7, #7
    53a6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    53a8:	46c0      	nop			; (mov r8, r8)
    53aa:	4b0e      	ldr	r3, [pc, #56]	; (53e4 <system_gclk_gen_enable+0x48>)
    53ac:	4798      	blx	r3
    53ae:	1e03      	subs	r3, r0, #0
    53b0:	d1fb      	bne.n	53aa <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    53b2:	4b0d      	ldr	r3, [pc, #52]	; (53e8 <system_gclk_gen_enable+0x4c>)
    53b4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    53b6:	4a0d      	ldr	r2, [pc, #52]	; (53ec <system_gclk_gen_enable+0x50>)
    53b8:	1dfb      	adds	r3, r7, #7
    53ba:	781b      	ldrb	r3, [r3, #0]
    53bc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    53be:	46c0      	nop			; (mov r8, r8)
    53c0:	4b08      	ldr	r3, [pc, #32]	; (53e4 <system_gclk_gen_enable+0x48>)
    53c2:	4798      	blx	r3
    53c4:	1e03      	subs	r3, r0, #0
    53c6:	d1fb      	bne.n	53c0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    53c8:	4b09      	ldr	r3, [pc, #36]	; (53f0 <system_gclk_gen_enable+0x54>)
    53ca:	4a09      	ldr	r2, [pc, #36]	; (53f0 <system_gclk_gen_enable+0x54>)
    53cc:	6852      	ldr	r2, [r2, #4]
    53ce:	2180      	movs	r1, #128	; 0x80
    53d0:	0249      	lsls	r1, r1, #9
    53d2:	430a      	orrs	r2, r1
    53d4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    53d6:	4b07      	ldr	r3, [pc, #28]	; (53f4 <system_gclk_gen_enable+0x58>)
    53d8:	4798      	blx	r3
}
    53da:	46c0      	nop			; (mov r8, r8)
    53dc:	46bd      	mov	sp, r7
    53de:	b002      	add	sp, #8
    53e0:	bd80      	pop	{r7, pc}
    53e2:	46c0      	nop			; (mov r8, r8)
    53e4:	00005229 	.word	0x00005229
    53e8:	00005201 	.word	0x00005201
    53ec:	40000c04 	.word	0x40000c04
    53f0:	40000c00 	.word	0x40000c00
    53f4:	00005215 	.word	0x00005215

000053f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    53f8:	b580      	push	{r7, lr}
    53fa:	b086      	sub	sp, #24
    53fc:	af00      	add	r7, sp, #0
    53fe:	0002      	movs	r2, r0
    5400:	1dfb      	adds	r3, r7, #7
    5402:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5404:	46c0      	nop			; (mov r8, r8)
    5406:	4b2a      	ldr	r3, [pc, #168]	; (54b0 <system_gclk_gen_get_hz+0xb8>)
    5408:	4798      	blx	r3
    540a:	1e03      	subs	r3, r0, #0
    540c:	d1fb      	bne.n	5406 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    540e:	4b29      	ldr	r3, [pc, #164]	; (54b4 <system_gclk_gen_get_hz+0xbc>)
    5410:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5412:	4a29      	ldr	r2, [pc, #164]	; (54b8 <system_gclk_gen_get_hz+0xc0>)
    5414:	1dfb      	adds	r3, r7, #7
    5416:	781b      	ldrb	r3, [r3, #0]
    5418:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    541a:	46c0      	nop			; (mov r8, r8)
    541c:	4b24      	ldr	r3, [pc, #144]	; (54b0 <system_gclk_gen_get_hz+0xb8>)
    541e:	4798      	blx	r3
    5420:	1e03      	subs	r3, r0, #0
    5422:	d1fb      	bne.n	541c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5424:	4b25      	ldr	r3, [pc, #148]	; (54bc <system_gclk_gen_get_hz+0xc4>)
    5426:	685b      	ldr	r3, [r3, #4]
    5428:	04db      	lsls	r3, r3, #19
    542a:	0edb      	lsrs	r3, r3, #27
    542c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    542e:	0018      	movs	r0, r3
    5430:	4b23      	ldr	r3, [pc, #140]	; (54c0 <system_gclk_gen_get_hz+0xc8>)
    5432:	4798      	blx	r3
    5434:	0003      	movs	r3, r0
    5436:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5438:	4a1f      	ldr	r2, [pc, #124]	; (54b8 <system_gclk_gen_get_hz+0xc0>)
    543a:	1dfb      	adds	r3, r7, #7
    543c:	781b      	ldrb	r3, [r3, #0]
    543e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5440:	4b1e      	ldr	r3, [pc, #120]	; (54bc <system_gclk_gen_get_hz+0xc4>)
    5442:	685b      	ldr	r3, [r3, #4]
    5444:	02db      	lsls	r3, r3, #11
    5446:	0fdb      	lsrs	r3, r3, #31
    5448:	b2da      	uxtb	r2, r3
    544a:	2313      	movs	r3, #19
    544c:	18fb      	adds	r3, r7, r3
    544e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5450:	4a1c      	ldr	r2, [pc, #112]	; (54c4 <system_gclk_gen_get_hz+0xcc>)
    5452:	1dfb      	adds	r3, r7, #7
    5454:	781b      	ldrb	r3, [r3, #0]
    5456:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5458:	46c0      	nop			; (mov r8, r8)
    545a:	4b15      	ldr	r3, [pc, #84]	; (54b0 <system_gclk_gen_get_hz+0xb8>)
    545c:	4798      	blx	r3
    545e:	1e03      	subs	r3, r0, #0
    5460:	d1fb      	bne.n	545a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5462:	4b16      	ldr	r3, [pc, #88]	; (54bc <system_gclk_gen_get_hz+0xc4>)
    5464:	689b      	ldr	r3, [r3, #8]
    5466:	021b      	lsls	r3, r3, #8
    5468:	0c1b      	lsrs	r3, r3, #16
    546a:	b29b      	uxth	r3, r3
    546c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    546e:	4b16      	ldr	r3, [pc, #88]	; (54c8 <system_gclk_gen_get_hz+0xd0>)
    5470:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5472:	2313      	movs	r3, #19
    5474:	18fb      	adds	r3, r7, r3
    5476:	781b      	ldrb	r3, [r3, #0]
    5478:	2b00      	cmp	r3, #0
    547a:	d109      	bne.n	5490 <system_gclk_gen_get_hz+0x98>
    547c:	68fb      	ldr	r3, [r7, #12]
    547e:	2b01      	cmp	r3, #1
    5480:	d906      	bls.n	5490 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    5482:	4b12      	ldr	r3, [pc, #72]	; (54cc <system_gclk_gen_get_hz+0xd4>)
    5484:	68f9      	ldr	r1, [r7, #12]
    5486:	6978      	ldr	r0, [r7, #20]
    5488:	4798      	blx	r3
    548a:	0003      	movs	r3, r0
    548c:	617b      	str	r3, [r7, #20]
    548e:	e00a      	b.n	54a6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    5490:	2313      	movs	r3, #19
    5492:	18fb      	adds	r3, r7, r3
    5494:	781b      	ldrb	r3, [r3, #0]
    5496:	2b00      	cmp	r3, #0
    5498:	d005      	beq.n	54a6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    549a:	68fb      	ldr	r3, [r7, #12]
    549c:	3301      	adds	r3, #1
    549e:	697a      	ldr	r2, [r7, #20]
    54a0:	40da      	lsrs	r2, r3
    54a2:	0013      	movs	r3, r2
    54a4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    54a6:	697b      	ldr	r3, [r7, #20]
}
    54a8:	0018      	movs	r0, r3
    54aa:	46bd      	mov	sp, r7
    54ac:	b006      	add	sp, #24
    54ae:	bd80      	pop	{r7, pc}
    54b0:	00005229 	.word	0x00005229
    54b4:	00005201 	.word	0x00005201
    54b8:	40000c04 	.word	0x40000c04
    54bc:	40000c00 	.word	0x40000c00
    54c0:	00004d3d 	.word	0x00004d3d
    54c4:	40000c08 	.word	0x40000c08
    54c8:	00005215 	.word	0x00005215
    54cc:	00005d7d 	.word	0x00005d7d

000054d0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    54d0:	b580      	push	{r7, lr}
    54d2:	b084      	sub	sp, #16
    54d4:	af00      	add	r7, sp, #0
    54d6:	0002      	movs	r2, r0
    54d8:	6039      	str	r1, [r7, #0]
    54da:	1dfb      	adds	r3, r7, #7
    54dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    54de:	1dfb      	adds	r3, r7, #7
    54e0:	781b      	ldrb	r3, [r3, #0]
    54e2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    54e4:	683b      	ldr	r3, [r7, #0]
    54e6:	781b      	ldrb	r3, [r3, #0]
    54e8:	021b      	lsls	r3, r3, #8
    54ea:	001a      	movs	r2, r3
    54ec:	68fb      	ldr	r3, [r7, #12]
    54ee:	4313      	orrs	r3, r2
    54f0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    54f2:	1dfb      	adds	r3, r7, #7
    54f4:	781b      	ldrb	r3, [r3, #0]
    54f6:	0018      	movs	r0, r3
    54f8:	4b04      	ldr	r3, [pc, #16]	; (550c <system_gclk_chan_set_config+0x3c>)
    54fa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    54fc:	4b04      	ldr	r3, [pc, #16]	; (5510 <system_gclk_chan_set_config+0x40>)
    54fe:	68fa      	ldr	r2, [r7, #12]
    5500:	b292      	uxth	r2, r2
    5502:	805a      	strh	r2, [r3, #2]
}
    5504:	46c0      	nop			; (mov r8, r8)
    5506:	46bd      	mov	sp, r7
    5508:	b004      	add	sp, #16
    550a:	bd80      	pop	{r7, pc}
    550c:	0000555d 	.word	0x0000555d
    5510:	40000c00 	.word	0x40000c00

00005514 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5514:	b580      	push	{r7, lr}
    5516:	b082      	sub	sp, #8
    5518:	af00      	add	r7, sp, #0
    551a:	0002      	movs	r2, r0
    551c:	1dfb      	adds	r3, r7, #7
    551e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5520:	4b0a      	ldr	r3, [pc, #40]	; (554c <system_gclk_chan_enable+0x38>)
    5522:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5524:	4a0a      	ldr	r2, [pc, #40]	; (5550 <system_gclk_chan_enable+0x3c>)
    5526:	1dfb      	adds	r3, r7, #7
    5528:	781b      	ldrb	r3, [r3, #0]
    552a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    552c:	4909      	ldr	r1, [pc, #36]	; (5554 <system_gclk_chan_enable+0x40>)
    552e:	4b09      	ldr	r3, [pc, #36]	; (5554 <system_gclk_chan_enable+0x40>)
    5530:	885b      	ldrh	r3, [r3, #2]
    5532:	b29b      	uxth	r3, r3
    5534:	2280      	movs	r2, #128	; 0x80
    5536:	01d2      	lsls	r2, r2, #7
    5538:	4313      	orrs	r3, r2
    553a:	b29b      	uxth	r3, r3
    553c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    553e:	4b06      	ldr	r3, [pc, #24]	; (5558 <system_gclk_chan_enable+0x44>)
    5540:	4798      	blx	r3
}
    5542:	46c0      	nop			; (mov r8, r8)
    5544:	46bd      	mov	sp, r7
    5546:	b002      	add	sp, #8
    5548:	bd80      	pop	{r7, pc}
    554a:	46c0      	nop			; (mov r8, r8)
    554c:	00005201 	.word	0x00005201
    5550:	40000c02 	.word	0x40000c02
    5554:	40000c00 	.word	0x40000c00
    5558:	00005215 	.word	0x00005215

0000555c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    555c:	b580      	push	{r7, lr}
    555e:	b084      	sub	sp, #16
    5560:	af00      	add	r7, sp, #0
    5562:	0002      	movs	r2, r0
    5564:	1dfb      	adds	r3, r7, #7
    5566:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5568:	4b1c      	ldr	r3, [pc, #112]	; (55dc <system_gclk_chan_disable+0x80>)
    556a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    556c:	4a1c      	ldr	r2, [pc, #112]	; (55e0 <system_gclk_chan_disable+0x84>)
    556e:	1dfb      	adds	r3, r7, #7
    5570:	781b      	ldrb	r3, [r3, #0]
    5572:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5574:	4b1b      	ldr	r3, [pc, #108]	; (55e4 <system_gclk_chan_disable+0x88>)
    5576:	885b      	ldrh	r3, [r3, #2]
    5578:	051b      	lsls	r3, r3, #20
    557a:	0f1b      	lsrs	r3, r3, #28
    557c:	b2db      	uxtb	r3, r3
    557e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5580:	4a18      	ldr	r2, [pc, #96]	; (55e4 <system_gclk_chan_disable+0x88>)
    5582:	8853      	ldrh	r3, [r2, #2]
    5584:	4918      	ldr	r1, [pc, #96]	; (55e8 <system_gclk_chan_disable+0x8c>)
    5586:	400b      	ands	r3, r1
    5588:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    558a:	4a16      	ldr	r2, [pc, #88]	; (55e4 <system_gclk_chan_disable+0x88>)
    558c:	4b15      	ldr	r3, [pc, #84]	; (55e4 <system_gclk_chan_disable+0x88>)
    558e:	885b      	ldrh	r3, [r3, #2]
    5590:	b29b      	uxth	r3, r3
    5592:	4916      	ldr	r1, [pc, #88]	; (55ec <system_gclk_chan_disable+0x90>)
    5594:	400b      	ands	r3, r1
    5596:	b29b      	uxth	r3, r3
    5598:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    559a:	46c0      	nop			; (mov r8, r8)
    559c:	4b11      	ldr	r3, [pc, #68]	; (55e4 <system_gclk_chan_disable+0x88>)
    559e:	885b      	ldrh	r3, [r3, #2]
    55a0:	b29b      	uxth	r3, r3
    55a2:	001a      	movs	r2, r3
    55a4:	2380      	movs	r3, #128	; 0x80
    55a6:	01db      	lsls	r3, r3, #7
    55a8:	4013      	ands	r3, r2
    55aa:	d1f7      	bne.n	559c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    55ac:	4a0d      	ldr	r2, [pc, #52]	; (55e4 <system_gclk_chan_disable+0x88>)
    55ae:	68fb      	ldr	r3, [r7, #12]
    55b0:	b2db      	uxtb	r3, r3
    55b2:	1c19      	adds	r1, r3, #0
    55b4:	230f      	movs	r3, #15
    55b6:	400b      	ands	r3, r1
    55b8:	b2d9      	uxtb	r1, r3
    55ba:	8853      	ldrh	r3, [r2, #2]
    55bc:	1c08      	adds	r0, r1, #0
    55be:	210f      	movs	r1, #15
    55c0:	4001      	ands	r1, r0
    55c2:	0208      	lsls	r0, r1, #8
    55c4:	4908      	ldr	r1, [pc, #32]	; (55e8 <system_gclk_chan_disable+0x8c>)
    55c6:	400b      	ands	r3, r1
    55c8:	1c19      	adds	r1, r3, #0
    55ca:	1c03      	adds	r3, r0, #0
    55cc:	430b      	orrs	r3, r1
    55ce:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    55d0:	4b07      	ldr	r3, [pc, #28]	; (55f0 <system_gclk_chan_disable+0x94>)
    55d2:	4798      	blx	r3
}
    55d4:	46c0      	nop			; (mov r8, r8)
    55d6:	46bd      	mov	sp, r7
    55d8:	b004      	add	sp, #16
    55da:	bd80      	pop	{r7, pc}
    55dc:	00005201 	.word	0x00005201
    55e0:	40000c02 	.word	0x40000c02
    55e4:	40000c00 	.word	0x40000c00
    55e8:	fffff0ff 	.word	0xfffff0ff
    55ec:	ffffbfff 	.word	0xffffbfff
    55f0:	00005215 	.word	0x00005215

000055f4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    55f4:	b580      	push	{r7, lr}
    55f6:	b084      	sub	sp, #16
    55f8:	af00      	add	r7, sp, #0
    55fa:	0002      	movs	r2, r0
    55fc:	1dfb      	adds	r3, r7, #7
    55fe:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    5600:	4b0d      	ldr	r3, [pc, #52]	; (5638 <system_gclk_chan_get_hz+0x44>)
    5602:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5604:	4a0d      	ldr	r2, [pc, #52]	; (563c <system_gclk_chan_get_hz+0x48>)
    5606:	1dfb      	adds	r3, r7, #7
    5608:	781b      	ldrb	r3, [r3, #0]
    560a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    560c:	4b0c      	ldr	r3, [pc, #48]	; (5640 <system_gclk_chan_get_hz+0x4c>)
    560e:	885b      	ldrh	r3, [r3, #2]
    5610:	051b      	lsls	r3, r3, #20
    5612:	0f1b      	lsrs	r3, r3, #28
    5614:	b2da      	uxtb	r2, r3
    5616:	230f      	movs	r3, #15
    5618:	18fb      	adds	r3, r7, r3
    561a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    561c:	4b09      	ldr	r3, [pc, #36]	; (5644 <system_gclk_chan_get_hz+0x50>)
    561e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5620:	230f      	movs	r3, #15
    5622:	18fb      	adds	r3, r7, r3
    5624:	781b      	ldrb	r3, [r3, #0]
    5626:	0018      	movs	r0, r3
    5628:	4b07      	ldr	r3, [pc, #28]	; (5648 <system_gclk_chan_get_hz+0x54>)
    562a:	4798      	blx	r3
    562c:	0003      	movs	r3, r0
}
    562e:	0018      	movs	r0, r3
    5630:	46bd      	mov	sp, r7
    5632:	b004      	add	sp, #16
    5634:	bd80      	pop	{r7, pc}
    5636:	46c0      	nop			; (mov r8, r8)
    5638:	00005201 	.word	0x00005201
    563c:	40000c02 	.word	0x40000c02
    5640:	40000c00 	.word	0x40000c00
    5644:	00005215 	.word	0x00005215
    5648:	000053f9 	.word	0x000053f9

0000564c <system_pinmux_get_group_from_gpio_pin>:
{
    564c:	b580      	push	{r7, lr}
    564e:	b084      	sub	sp, #16
    5650:	af00      	add	r7, sp, #0
    5652:	0002      	movs	r2, r0
    5654:	1dfb      	adds	r3, r7, #7
    5656:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5658:	230f      	movs	r3, #15
    565a:	18fb      	adds	r3, r7, r3
    565c:	1dfa      	adds	r2, r7, #7
    565e:	7812      	ldrb	r2, [r2, #0]
    5660:	09d2      	lsrs	r2, r2, #7
    5662:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5664:	230e      	movs	r3, #14
    5666:	18fb      	adds	r3, r7, r3
    5668:	1dfa      	adds	r2, r7, #7
    566a:	7812      	ldrb	r2, [r2, #0]
    566c:	0952      	lsrs	r2, r2, #5
    566e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5670:	4b0d      	ldr	r3, [pc, #52]	; (56a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5672:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    5674:	230f      	movs	r3, #15
    5676:	18fb      	adds	r3, r7, r3
    5678:	781b      	ldrb	r3, [r3, #0]
    567a:	2b00      	cmp	r3, #0
    567c:	d10f      	bne.n	569e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    567e:	230f      	movs	r3, #15
    5680:	18fb      	adds	r3, r7, r3
    5682:	781b      	ldrb	r3, [r3, #0]
    5684:	009b      	lsls	r3, r3, #2
    5686:	2210      	movs	r2, #16
    5688:	4694      	mov	ip, r2
    568a:	44bc      	add	ip, r7
    568c:	4463      	add	r3, ip
    568e:	3b08      	subs	r3, #8
    5690:	681a      	ldr	r2, [r3, #0]
    5692:	230e      	movs	r3, #14
    5694:	18fb      	adds	r3, r7, r3
    5696:	781b      	ldrb	r3, [r3, #0]
    5698:	01db      	lsls	r3, r3, #7
    569a:	18d3      	adds	r3, r2, r3
    569c:	e000      	b.n	56a0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    569e:	2300      	movs	r3, #0
}
    56a0:	0018      	movs	r0, r3
    56a2:	46bd      	mov	sp, r7
    56a4:	b004      	add	sp, #16
    56a6:	bd80      	pop	{r7, pc}
    56a8:	41004400 	.word	0x41004400

000056ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    56ac:	b580      	push	{r7, lr}
    56ae:	b088      	sub	sp, #32
    56b0:	af00      	add	r7, sp, #0
    56b2:	60f8      	str	r0, [r7, #12]
    56b4:	60b9      	str	r1, [r7, #8]
    56b6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    56b8:	2300      	movs	r3, #0
    56ba:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    56bc:	687b      	ldr	r3, [r7, #4]
    56be:	78db      	ldrb	r3, [r3, #3]
    56c0:	2201      	movs	r2, #1
    56c2:	4053      	eors	r3, r2
    56c4:	b2db      	uxtb	r3, r3
    56c6:	2b00      	cmp	r3, #0
    56c8:	d035      	beq.n	5736 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	781b      	ldrb	r3, [r3, #0]
    56ce:	2b80      	cmp	r3, #128	; 0x80
    56d0:	d00b      	beq.n	56ea <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    56d2:	69fb      	ldr	r3, [r7, #28]
    56d4:	2280      	movs	r2, #128	; 0x80
    56d6:	0252      	lsls	r2, r2, #9
    56d8:	4313      	orrs	r3, r2
    56da:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	781b      	ldrb	r3, [r3, #0]
    56e0:	061b      	lsls	r3, r3, #24
    56e2:	001a      	movs	r2, r3
    56e4:	69fb      	ldr	r3, [r7, #28]
    56e6:	4313      	orrs	r3, r2
    56e8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    56ea:	687b      	ldr	r3, [r7, #4]
    56ec:	785b      	ldrb	r3, [r3, #1]
    56ee:	2b00      	cmp	r3, #0
    56f0:	d003      	beq.n	56fa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    56f6:	2b02      	cmp	r3, #2
    56f8:	d110      	bne.n	571c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    56fa:	69fb      	ldr	r3, [r7, #28]
    56fc:	2280      	movs	r2, #128	; 0x80
    56fe:	0292      	lsls	r2, r2, #10
    5700:	4313      	orrs	r3, r2
    5702:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	789b      	ldrb	r3, [r3, #2]
    5708:	2b00      	cmp	r3, #0
    570a:	d004      	beq.n	5716 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    570c:	69fb      	ldr	r3, [r7, #28]
    570e:	2280      	movs	r2, #128	; 0x80
    5710:	02d2      	lsls	r2, r2, #11
    5712:	4313      	orrs	r3, r2
    5714:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5716:	68fb      	ldr	r3, [r7, #12]
    5718:	68ba      	ldr	r2, [r7, #8]
    571a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    571c:	687b      	ldr	r3, [r7, #4]
    571e:	785b      	ldrb	r3, [r3, #1]
    5720:	2b01      	cmp	r3, #1
    5722:	d003      	beq.n	572c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5724:	687b      	ldr	r3, [r7, #4]
    5726:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5728:	2b02      	cmp	r3, #2
    572a:	d107      	bne.n	573c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    572c:	69fb      	ldr	r3, [r7, #28]
    572e:	4a22      	ldr	r2, [pc, #136]	; (57b8 <_system_pinmux_config+0x10c>)
    5730:	4013      	ands	r3, r2
    5732:	61fb      	str	r3, [r7, #28]
    5734:	e002      	b.n	573c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5736:	68fb      	ldr	r3, [r7, #12]
    5738:	68ba      	ldr	r2, [r7, #8]
    573a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    573c:	68bb      	ldr	r3, [r7, #8]
    573e:	041b      	lsls	r3, r3, #16
    5740:	0c1b      	lsrs	r3, r3, #16
    5742:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5744:	68bb      	ldr	r3, [r7, #8]
    5746:	0c1b      	lsrs	r3, r3, #16
    5748:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    574a:	69ba      	ldr	r2, [r7, #24]
    574c:	69fb      	ldr	r3, [r7, #28]
    574e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5750:	22a0      	movs	r2, #160	; 0xa0
    5752:	05d2      	lsls	r2, r2, #23
    5754:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5756:	68fb      	ldr	r3, [r7, #12]
    5758:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    575a:	697a      	ldr	r2, [r7, #20]
    575c:	69fb      	ldr	r3, [r7, #28]
    575e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5760:	22d0      	movs	r2, #208	; 0xd0
    5762:	0612      	lsls	r2, r2, #24
    5764:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5766:	68fb      	ldr	r3, [r7, #12]
    5768:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    576a:	687b      	ldr	r3, [r7, #4]
    576c:	78db      	ldrb	r3, [r3, #3]
    576e:	2201      	movs	r2, #1
    5770:	4053      	eors	r3, r2
    5772:	b2db      	uxtb	r3, r3
    5774:	2b00      	cmp	r3, #0
    5776:	d01a      	beq.n	57ae <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5778:	69fa      	ldr	r2, [r7, #28]
    577a:	2380      	movs	r3, #128	; 0x80
    577c:	02db      	lsls	r3, r3, #11
    577e:	4013      	ands	r3, r2
    5780:	d00a      	beq.n	5798 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5782:	687b      	ldr	r3, [r7, #4]
    5784:	789b      	ldrb	r3, [r3, #2]
    5786:	2b01      	cmp	r3, #1
    5788:	d103      	bne.n	5792 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    578a:	68fb      	ldr	r3, [r7, #12]
    578c:	68ba      	ldr	r2, [r7, #8]
    578e:	619a      	str	r2, [r3, #24]
    5790:	e002      	b.n	5798 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5792:	68fb      	ldr	r3, [r7, #12]
    5794:	68ba      	ldr	r2, [r7, #8]
    5796:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5798:	687b      	ldr	r3, [r7, #4]
    579a:	785b      	ldrb	r3, [r3, #1]
    579c:	2b01      	cmp	r3, #1
    579e:	d003      	beq.n	57a8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    57a4:	2b02      	cmp	r3, #2
    57a6:	d102      	bne.n	57ae <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    57a8:	68fb      	ldr	r3, [r7, #12]
    57aa:	68ba      	ldr	r2, [r7, #8]
    57ac:	609a      	str	r2, [r3, #8]
		}
	}
}
    57ae:	46c0      	nop			; (mov r8, r8)
    57b0:	46bd      	mov	sp, r7
    57b2:	b008      	add	sp, #32
    57b4:	bd80      	pop	{r7, pc}
    57b6:	46c0      	nop			; (mov r8, r8)
    57b8:	fffbffff 	.word	0xfffbffff

000057bc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    57bc:	b580      	push	{r7, lr}
    57be:	b084      	sub	sp, #16
    57c0:	af00      	add	r7, sp, #0
    57c2:	0002      	movs	r2, r0
    57c4:	6039      	str	r1, [r7, #0]
    57c6:	1dfb      	adds	r3, r7, #7
    57c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    57ca:	1dfb      	adds	r3, r7, #7
    57cc:	781b      	ldrb	r3, [r3, #0]
    57ce:	0018      	movs	r0, r3
    57d0:	4b0a      	ldr	r3, [pc, #40]	; (57fc <system_pinmux_pin_set_config+0x40>)
    57d2:	4798      	blx	r3
    57d4:	0003      	movs	r3, r0
    57d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    57d8:	1dfb      	adds	r3, r7, #7
    57da:	781b      	ldrb	r3, [r3, #0]
    57dc:	221f      	movs	r2, #31
    57de:	4013      	ands	r3, r2
    57e0:	2201      	movs	r2, #1
    57e2:	409a      	lsls	r2, r3
    57e4:	0013      	movs	r3, r2
    57e6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    57e8:	683a      	ldr	r2, [r7, #0]
    57ea:	68b9      	ldr	r1, [r7, #8]
    57ec:	68fb      	ldr	r3, [r7, #12]
    57ee:	0018      	movs	r0, r3
    57f0:	4b03      	ldr	r3, [pc, #12]	; (5800 <system_pinmux_pin_set_config+0x44>)
    57f2:	4798      	blx	r3
}
    57f4:	46c0      	nop			; (mov r8, r8)
    57f6:	46bd      	mov	sp, r7
    57f8:	b004      	add	sp, #16
    57fa:	bd80      	pop	{r7, pc}
    57fc:	0000564d 	.word	0x0000564d
    5800:	000056ad 	.word	0x000056ad

00005804 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    5804:	b580      	push	{r7, lr}
    5806:	af00      	add	r7, sp, #0
	return;
    5808:	46c0      	nop			; (mov r8, r8)
}
    580a:	46bd      	mov	sp, r7
    580c:	bd80      	pop	{r7, pc}
	...

00005810 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5810:	b580      	push	{r7, lr}
    5812:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5814:	4b06      	ldr	r3, [pc, #24]	; (5830 <system_init+0x20>)
    5816:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5818:	4b06      	ldr	r3, [pc, #24]	; (5834 <system_init+0x24>)
    581a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    581c:	4b06      	ldr	r3, [pc, #24]	; (5838 <system_init+0x28>)
    581e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5820:	4b06      	ldr	r3, [pc, #24]	; (583c <system_init+0x2c>)
    5822:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5824:	4b06      	ldr	r3, [pc, #24]	; (5840 <system_init+0x30>)
    5826:	4798      	blx	r3
}
    5828:	46c0      	nop			; (mov r8, r8)
    582a:	46bd      	mov	sp, r7
    582c:	bd80      	pop	{r7, pc}
    582e:	46c0      	nop			; (mov r8, r8)
    5830:	00005021 	.word	0x00005021
    5834:	00004b11 	.word	0x00004b11
    5838:	00005805 	.word	0x00005805
    583c:	0000040d 	.word	0x0000040d
    5840:	00005805 	.word	0x00005805

00005844 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5844:	b580      	push	{r7, lr}
    5846:	b082      	sub	sp, #8
    5848:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    584a:	4b2f      	ldr	r3, [pc, #188]	; (5908 <Reset_Handler+0xc4>)
    584c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    584e:	4b2f      	ldr	r3, [pc, #188]	; (590c <Reset_Handler+0xc8>)
    5850:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    5852:	687a      	ldr	r2, [r7, #4]
    5854:	683b      	ldr	r3, [r7, #0]
    5856:	429a      	cmp	r2, r3
    5858:	d00c      	beq.n	5874 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    585a:	e007      	b.n	586c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    585c:	683b      	ldr	r3, [r7, #0]
    585e:	1d1a      	adds	r2, r3, #4
    5860:	603a      	str	r2, [r7, #0]
    5862:	687a      	ldr	r2, [r7, #4]
    5864:	1d11      	adds	r1, r2, #4
    5866:	6079      	str	r1, [r7, #4]
    5868:	6812      	ldr	r2, [r2, #0]
    586a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    586c:	683a      	ldr	r2, [r7, #0]
    586e:	4b28      	ldr	r3, [pc, #160]	; (5910 <Reset_Handler+0xcc>)
    5870:	429a      	cmp	r2, r3
    5872:	d3f3      	bcc.n	585c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5874:	4b27      	ldr	r3, [pc, #156]	; (5914 <Reset_Handler+0xd0>)
    5876:	603b      	str	r3, [r7, #0]
    5878:	e004      	b.n	5884 <Reset_Handler+0x40>
                *pDest++ = 0;
    587a:	683b      	ldr	r3, [r7, #0]
    587c:	1d1a      	adds	r2, r3, #4
    587e:	603a      	str	r2, [r7, #0]
    5880:	2200      	movs	r2, #0
    5882:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    5884:	683a      	ldr	r2, [r7, #0]
    5886:	4b24      	ldr	r3, [pc, #144]	; (5918 <Reset_Handler+0xd4>)
    5888:	429a      	cmp	r2, r3
    588a:	d3f6      	bcc.n	587a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    588c:	4b23      	ldr	r3, [pc, #140]	; (591c <Reset_Handler+0xd8>)
    588e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5890:	4b23      	ldr	r3, [pc, #140]	; (5920 <Reset_Handler+0xdc>)
    5892:	687a      	ldr	r2, [r7, #4]
    5894:	21ff      	movs	r1, #255	; 0xff
    5896:	438a      	bics	r2, r1
    5898:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    589a:	4a22      	ldr	r2, [pc, #136]	; (5924 <Reset_Handler+0xe0>)
    589c:	2390      	movs	r3, #144	; 0x90
    589e:	005b      	lsls	r3, r3, #1
    58a0:	2102      	movs	r1, #2
    58a2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    58a4:	4a20      	ldr	r2, [pc, #128]	; (5928 <Reset_Handler+0xe4>)
    58a6:	78d3      	ldrb	r3, [r2, #3]
    58a8:	2103      	movs	r1, #3
    58aa:	438b      	bics	r3, r1
    58ac:	1c19      	adds	r1, r3, #0
    58ae:	2302      	movs	r3, #2
    58b0:	430b      	orrs	r3, r1
    58b2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    58b4:	4a1c      	ldr	r2, [pc, #112]	; (5928 <Reset_Handler+0xe4>)
    58b6:	78d3      	ldrb	r3, [r2, #3]
    58b8:	210c      	movs	r1, #12
    58ba:	438b      	bics	r3, r1
    58bc:	1c19      	adds	r1, r3, #0
    58be:	2308      	movs	r3, #8
    58c0:	430b      	orrs	r3, r1
    58c2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    58c4:	4a19      	ldr	r2, [pc, #100]	; (592c <Reset_Handler+0xe8>)
    58c6:	7b93      	ldrb	r3, [r2, #14]
    58c8:	2130      	movs	r1, #48	; 0x30
    58ca:	438b      	bics	r3, r1
    58cc:	1c19      	adds	r1, r3, #0
    58ce:	2320      	movs	r3, #32
    58d0:	430b      	orrs	r3, r1
    58d2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    58d4:	4a15      	ldr	r2, [pc, #84]	; (592c <Reset_Handler+0xe8>)
    58d6:	7b93      	ldrb	r3, [r2, #14]
    58d8:	210c      	movs	r1, #12
    58da:	438b      	bics	r3, r1
    58dc:	1c19      	adds	r1, r3, #0
    58de:	2308      	movs	r3, #8
    58e0:	430b      	orrs	r3, r1
    58e2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    58e4:	4a11      	ldr	r2, [pc, #68]	; (592c <Reset_Handler+0xe8>)
    58e6:	7b93      	ldrb	r3, [r2, #14]
    58e8:	2103      	movs	r1, #3
    58ea:	438b      	bics	r3, r1
    58ec:	1c19      	adds	r1, r3, #0
    58ee:	2302      	movs	r3, #2
    58f0:	430b      	orrs	r3, r1
    58f2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    58f4:	4a0e      	ldr	r2, [pc, #56]	; (5930 <Reset_Handler+0xec>)
    58f6:	6853      	ldr	r3, [r2, #4]
    58f8:	2180      	movs	r1, #128	; 0x80
    58fa:	430b      	orrs	r3, r1
    58fc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    58fe:	4b0d      	ldr	r3, [pc, #52]	; (5934 <Reset_Handler+0xf0>)
    5900:	4798      	blx	r3

        /* Branch to main function */
        main();
    5902:	4b0d      	ldr	r3, [pc, #52]	; (5938 <Reset_Handler+0xf4>)
    5904:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5906:	e7fe      	b.n	5906 <Reset_Handler+0xc2>
    5908:	00006478 	.word	0x00006478
    590c:	20000000 	.word	0x20000000
    5910:	20000010 	.word	0x20000010
    5914:	20000010 	.word	0x20000010
    5918:	200006ac 	.word	0x200006ac
    591c:	00000000 	.word	0x00000000
    5920:	e000ed00 	.word	0xe000ed00
    5924:	41007000 	.word	0x41007000
    5928:	41005000 	.word	0x41005000
    592c:	41004800 	.word	0x41004800
    5930:	41004000 	.word	0x41004000
    5934:	00006165 	.word	0x00006165
    5938:	00005a7d 	.word	0x00005a7d

0000593c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    593c:	b580      	push	{r7, lr}
    593e:	af00      	add	r7, sp, #0
        while (1) {
    5940:	e7fe      	b.n	5940 <Dummy_Handler+0x4>
	...

00005944 <system_cpu_clock_set_divider>:
{
    5944:	b580      	push	{r7, lr}
    5946:	b082      	sub	sp, #8
    5948:	af00      	add	r7, sp, #0
    594a:	0002      	movs	r2, r0
    594c:	1dfb      	adds	r3, r7, #7
    594e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5950:	4a03      	ldr	r2, [pc, #12]	; (5960 <system_cpu_clock_set_divider+0x1c>)
    5952:	1dfb      	adds	r3, r7, #7
    5954:	781b      	ldrb	r3, [r3, #0]
    5956:	7213      	strb	r3, [r2, #8]
}
    5958:	46c0      	nop			; (mov r8, r8)
    595a:	46bd      	mov	sp, r7
    595c:	b002      	add	sp, #8
    595e:	bd80      	pop	{r7, pc}
    5960:	40000400 	.word	0x40000400

00005964 <system_pinmux_get_group_from_gpio_pin>:
{
    5964:	b580      	push	{r7, lr}
    5966:	b084      	sub	sp, #16
    5968:	af00      	add	r7, sp, #0
    596a:	0002      	movs	r2, r0
    596c:	1dfb      	adds	r3, r7, #7
    596e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5970:	230f      	movs	r3, #15
    5972:	18fb      	adds	r3, r7, r3
    5974:	1dfa      	adds	r2, r7, #7
    5976:	7812      	ldrb	r2, [r2, #0]
    5978:	09d2      	lsrs	r2, r2, #7
    597a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    597c:	230e      	movs	r3, #14
    597e:	18fb      	adds	r3, r7, r3
    5980:	1dfa      	adds	r2, r7, #7
    5982:	7812      	ldrb	r2, [r2, #0]
    5984:	0952      	lsrs	r2, r2, #5
    5986:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5988:	4b0d      	ldr	r3, [pc, #52]	; (59c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    598a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    598c:	230f      	movs	r3, #15
    598e:	18fb      	adds	r3, r7, r3
    5990:	781b      	ldrb	r3, [r3, #0]
    5992:	2b00      	cmp	r3, #0
    5994:	d10f      	bne.n	59b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5996:	230f      	movs	r3, #15
    5998:	18fb      	adds	r3, r7, r3
    599a:	781b      	ldrb	r3, [r3, #0]
    599c:	009b      	lsls	r3, r3, #2
    599e:	2210      	movs	r2, #16
    59a0:	4694      	mov	ip, r2
    59a2:	44bc      	add	ip, r7
    59a4:	4463      	add	r3, ip
    59a6:	3b08      	subs	r3, #8
    59a8:	681a      	ldr	r2, [r3, #0]
    59aa:	230e      	movs	r3, #14
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	781b      	ldrb	r3, [r3, #0]
    59b0:	01db      	lsls	r3, r3, #7
    59b2:	18d3      	adds	r3, r2, r3
    59b4:	e000      	b.n	59b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    59b6:	2300      	movs	r3, #0
}
    59b8:	0018      	movs	r0, r3
    59ba:	46bd      	mov	sp, r7
    59bc:	b004      	add	sp, #16
    59be:	bd80      	pop	{r7, pc}
    59c0:	41004400 	.word	0x41004400

000059c4 <port_get_group_from_gpio_pin>:
{
    59c4:	b580      	push	{r7, lr}
    59c6:	b082      	sub	sp, #8
    59c8:	af00      	add	r7, sp, #0
    59ca:	0002      	movs	r2, r0
    59cc:	1dfb      	adds	r3, r7, #7
    59ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    59d0:	1dfb      	adds	r3, r7, #7
    59d2:	781b      	ldrb	r3, [r3, #0]
    59d4:	0018      	movs	r0, r3
    59d6:	4b03      	ldr	r3, [pc, #12]	; (59e4 <port_get_group_from_gpio_pin+0x20>)
    59d8:	4798      	blx	r3
    59da:	0003      	movs	r3, r0
}
    59dc:	0018      	movs	r0, r3
    59de:	46bd      	mov	sp, r7
    59e0:	b002      	add	sp, #8
    59e2:	bd80      	pop	{r7, pc}
    59e4:	00005965 	.word	0x00005965

000059e8 <port_get_config_defaults>:
{
    59e8:	b580      	push	{r7, lr}
    59ea:	b082      	sub	sp, #8
    59ec:	af00      	add	r7, sp, #0
    59ee:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	2200      	movs	r2, #0
    59f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	2201      	movs	r2, #1
    59fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	2200      	movs	r2, #0
    5a00:	709a      	strb	r2, [r3, #2]
}
    5a02:	46c0      	nop			; (mov r8, r8)
    5a04:	46bd      	mov	sp, r7
    5a06:	b002      	add	sp, #8
    5a08:	bd80      	pop	{r7, pc}
	...

00005a0c <port_pin_set_output_level>:
{
    5a0c:	b580      	push	{r7, lr}
    5a0e:	b084      	sub	sp, #16
    5a10:	af00      	add	r7, sp, #0
    5a12:	0002      	movs	r2, r0
    5a14:	1dfb      	adds	r3, r7, #7
    5a16:	701a      	strb	r2, [r3, #0]
    5a18:	1dbb      	adds	r3, r7, #6
    5a1a:	1c0a      	adds	r2, r1, #0
    5a1c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5a1e:	1dfb      	adds	r3, r7, #7
    5a20:	781b      	ldrb	r3, [r3, #0]
    5a22:	0018      	movs	r0, r3
    5a24:	4b0d      	ldr	r3, [pc, #52]	; (5a5c <port_pin_set_output_level+0x50>)
    5a26:	4798      	blx	r3
    5a28:	0003      	movs	r3, r0
    5a2a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a2c:	1dfb      	adds	r3, r7, #7
    5a2e:	781b      	ldrb	r3, [r3, #0]
    5a30:	221f      	movs	r2, #31
    5a32:	4013      	ands	r3, r2
    5a34:	2201      	movs	r2, #1
    5a36:	409a      	lsls	r2, r3
    5a38:	0013      	movs	r3, r2
    5a3a:	60bb      	str	r3, [r7, #8]
	if (level) {
    5a3c:	1dbb      	adds	r3, r7, #6
    5a3e:	781b      	ldrb	r3, [r3, #0]
    5a40:	2b00      	cmp	r3, #0
    5a42:	d003      	beq.n	5a4c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5a44:	68fb      	ldr	r3, [r7, #12]
    5a46:	68ba      	ldr	r2, [r7, #8]
    5a48:	619a      	str	r2, [r3, #24]
}
    5a4a:	e002      	b.n	5a52 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    5a4c:	68fb      	ldr	r3, [r7, #12]
    5a4e:	68ba      	ldr	r2, [r7, #8]
    5a50:	615a      	str	r2, [r3, #20]
}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	46bd      	mov	sp, r7
    5a56:	b004      	add	sp, #16
    5a58:	bd80      	pop	{r7, pc}
    5a5a:	46c0      	nop			; (mov r8, r8)
    5a5c:	000059c5 	.word	0x000059c5

00005a60 <system_interrupt_enable_global>:
{
    5a60:	b580      	push	{r7, lr}
    5a62:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    5a64:	4b04      	ldr	r3, [pc, #16]	; (5a78 <system_interrupt_enable_global+0x18>)
    5a66:	2201      	movs	r2, #1
    5a68:	701a      	strb	r2, [r3, #0]
    5a6a:	f3bf 8f5f 	dmb	sy
    5a6e:	b662      	cpsie	i
}
    5a70:	46c0      	nop			; (mov r8, r8)
    5a72:	46bd      	mov	sp, r7
    5a74:	bd80      	pop	{r7, pc}
    5a76:	46c0      	nop			; (mov r8, r8)
    5a78:	2000000c 	.word	0x2000000c

00005a7c <main>:
extern int16_t** history;

/************************************************************************/
/*                                Main                                  */
/************************************************************************/
int main(void){
    5a7c:	b580      	push	{r7, lr}
    5a7e:	af00      	add	r7, sp, #0
	// system init
	sim_system_init();
    5a80:	4b3d      	ldr	r3, [pc, #244]	; (5b78 <main+0xfc>)
    5a82:	4798      	blx	r3
	system_interrupt_enable_global();
    5a84:	4b3d      	ldr	r3, [pc, #244]	; (5b7c <main+0x100>)
    5a86:	4798      	blx	r3
	// config and setup calendar
	configure_rtc_calendar();
    5a88:	4b3d      	ldr	r3, [pc, #244]	; (5b80 <main+0x104>)
    5a8a:	4798      	blx	r3
    
    // setup display
	phost = &host;
    5a8c:	4b3d      	ldr	r3, [pc, #244]	; (5b84 <main+0x108>)
    5a8e:	4a3e      	ldr	r2, [pc, #248]	; (5b88 <main+0x10c>)
    5a90:	601a      	str	r2, [r3, #0]
	//open display host
	Ft_Gpu_Hal_Open(phost);
    5a92:	4b3c      	ldr	r3, [pc, #240]	; (5b84 <main+0x108>)
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	0018      	movs	r0, r3
    5a98:	4b3c      	ldr	r3, [pc, #240]	; (5b8c <main+0x110>)
    5a9a:	4798      	blx	r3
	// enable the dislay interrupt
	Ft_Gpu_Hal_Wr8(phost, REG_INT_EN, 1);
    5a9c:	4b39      	ldr	r3, [pc, #228]	; (5b84 <main+0x108>)
    5a9e:	681b      	ldr	r3, [r3, #0]
    5aa0:	493b      	ldr	r1, [pc, #236]	; (5b90 <main+0x114>)
    5aa2:	2201      	movs	r2, #1
    5aa4:	0018      	movs	r0, r3
    5aa6:	4b3b      	ldr	r3, [pc, #236]	; (5b94 <main+0x118>)
    5aa8:	4798      	blx	r3
	// mask all interrupt but TAG
	Ft_Gpu_Hal_Wr8(phost, REG_INT_MASK, 6);
    5aaa:	4b36      	ldr	r3, [pc, #216]	; (5b84 <main+0x108>)
    5aac:	681b      	ldr	r3, [r3, #0]
    5aae:	493a      	ldr	r1, [pc, #232]	; (5b98 <main+0x11c>)
    5ab0:	2206      	movs	r2, #6
    5ab2:	0018      	movs	r0, r3
    5ab4:	4b37      	ldr	r3, [pc, #220]	; (5b94 <main+0x118>)
    5ab6:	4798      	blx	r3
	
	delay_ms(2000);
    5ab8:	23fa      	movs	r3, #250	; 0xfa
    5aba:	00db      	lsls	r3, r3, #3
    5abc:	0018      	movs	r0, r3
    5abe:	4b37      	ldr	r3, [pc, #220]	; (5b9c <main+0x120>)
    5ac0:	4798      	blx	r3
	
	//put static portions into ram_g/*
	appAttn();
    5ac2:	4b37      	ldr	r3, [pc, #220]	; (5ba0 <main+0x124>)
    5ac4:	4798      	blx	r3
	appRssi();
    5ac6:	4b37      	ldr	r3, [pc, #220]	; (5ba4 <main+0x128>)
    5ac8:	4798      	blx	r3
	appHist();
    5aca:	4b37      	ldr	r3, [pc, #220]	; (5ba8 <main+0x12c>)
    5acc:	4798      	blx	r3



//Debug screen. Displays 'FTDI' anda red circle. 
while(1){	
	disStart();
    5ace:	4b37      	ldr	r3, [pc, #220]	; (5bac <main+0x130>)
    5ad0:	4798      	blx	r3
	lcd_wr32(RAM_DL +0,CLEAR(1,1,1));// clear screen
    5ad2:	4a37      	ldr	r2, [pc, #220]	; (5bb0 <main+0x134>)
    5ad4:	23c0      	movs	r3, #192	; 0xc0
    5ad6:	039b      	lsls	r3, r3, #14
    5ad8:	0011      	movs	r1, r2
    5ada:	0018      	movs	r0, r3
    5adc:	4b35      	ldr	r3, [pc, #212]	; (5bb4 <main+0x138>)
    5ade:	4798      	blx	r3
	lcd_wr32(RAM_DL +4,BEGIN(BITMAPS));// start drawing bitmaps
    5ae0:	4a35      	ldr	r2, [pc, #212]	; (5bb8 <main+0x13c>)
    5ae2:	4b36      	ldr	r3, [pc, #216]	; (5bbc <main+0x140>)
    5ae4:	0011      	movs	r1, r2
    5ae6:	0018      	movs	r0, r3
    5ae8:	4b32      	ldr	r3, [pc, #200]	; (5bb4 <main+0x138>)
    5aea:	4798      	blx	r3
	lcd_wr32(RAM_DL +8,VERTEX2II(220,110,31,'F'));// ascii F in font 31
    5aec:	4a34      	ldr	r2, [pc, #208]	; (5bc0 <main+0x144>)
    5aee:	4b35      	ldr	r3, [pc, #212]	; (5bc4 <main+0x148>)
    5af0:	0011      	movs	r1, r2
    5af2:	0018      	movs	r0, r3
    5af4:	4b2f      	ldr	r3, [pc, #188]	; (5bb4 <main+0x138>)
    5af6:	4798      	blx	r3
	lcd_wr32(RAM_DL +12,VERTEX2II(244,110,31,'T'));// ascii T
    5af8:	4a33      	ldr	r2, [pc, #204]	; (5bc8 <main+0x14c>)
    5afa:	4b34      	ldr	r3, [pc, #208]	; (5bcc <main+0x150>)
    5afc:	0011      	movs	r1, r2
    5afe:	0018      	movs	r0, r3
    5b00:	4b2c      	ldr	r3, [pc, #176]	; (5bb4 <main+0x138>)
    5b02:	4798      	blx	r3
	lcd_wr32(RAM_DL +16,VERTEX2II(270,110,31,'D'));// ascii D
    5b04:	4a32      	ldr	r2, [pc, #200]	; (5bd0 <main+0x154>)
    5b06:	4b33      	ldr	r3, [pc, #204]	; (5bd4 <main+0x158>)
    5b08:	0011      	movs	r1, r2
    5b0a:	0018      	movs	r0, r3
    5b0c:	4b29      	ldr	r3, [pc, #164]	; (5bb4 <main+0x138>)
    5b0e:	4798      	blx	r3
	lcd_wr32(RAM_DL +20,VERTEX2II(299,110,31,'I'));// ascii I
    5b10:	4a31      	ldr	r2, [pc, #196]	; (5bd8 <main+0x15c>)
    5b12:	4b32      	ldr	r3, [pc, #200]	; (5bdc <main+0x160>)
    5b14:	0011      	movs	r1, r2
    5b16:	0018      	movs	r0, r3
    5b18:	4b26      	ldr	r3, [pc, #152]	; (5bb4 <main+0x138>)
    5b1a:	4798      	blx	r3
	lcd_wr32(RAM_DL +24,END());
    5b1c:	2384      	movs	r3, #132	; 0x84
    5b1e:	059b      	lsls	r3, r3, #22
    5b20:	4a2f      	ldr	r2, [pc, #188]	; (5be0 <main+0x164>)
    5b22:	0019      	movs	r1, r3
    5b24:	0010      	movs	r0, r2
    5b26:	4b23      	ldr	r3, [pc, #140]	; (5bb4 <main+0x138>)
    5b28:	4798      	blx	r3
	lcd_wr32(RAM_DL +28,COLOR_RGB(160,22,22));// change colourto red
    5b2a:	4a2e      	ldr	r2, [pc, #184]	; (5be4 <main+0x168>)
    5b2c:	4b2e      	ldr	r3, [pc, #184]	; (5be8 <main+0x16c>)
    5b2e:	0011      	movs	r1, r2
    5b30:	0018      	movs	r0, r3
    5b32:	4b20      	ldr	r3, [pc, #128]	; (5bb4 <main+0x138>)
    5b34:	4798      	blx	r3
	lcd_wr32(RAM_DL +32,POINT_SIZE(320));// set point size to 20 pixels in
    5b36:	4a2d      	ldr	r2, [pc, #180]	; (5bec <main+0x170>)
    5b38:	4b2d      	ldr	r3, [pc, #180]	; (5bf0 <main+0x174>)
    5b3a:	0011      	movs	r1, r2
    5b3c:	0018      	movs	r0, r3
    5b3e:	4b1d      	ldr	r3, [pc, #116]	; (5bb4 <main+0x138>)
    5b40:	4798      	blx	r3
	lcd_wr32(RAM_DL +36,BEGIN(FTPOINTS));// start drawing points
    5b42:	4a2c      	ldr	r2, [pc, #176]	; (5bf4 <main+0x178>)
    5b44:	4b2c      	ldr	r3, [pc, #176]	; (5bf8 <main+0x17c>)
    5b46:	0011      	movs	r1, r2
    5b48:	0018      	movs	r0, r3
    5b4a:	4b1a      	ldr	r3, [pc, #104]	; (5bb4 <main+0x138>)
    5b4c:	4798      	blx	r3
	lcd_wr32(RAM_DL +40,VERTEX2II(192,133,0,0));// red point
    5b4e:	4a2b      	ldr	r2, [pc, #172]	; (5bfc <main+0x180>)
    5b50:	4b2b      	ldr	r3, [pc, #172]	; (5c00 <main+0x184>)
    5b52:	0011      	movs	r1, r2
    5b54:	0018      	movs	r0, r3
    5b56:	4b17      	ldr	r3, [pc, #92]	; (5bb4 <main+0x138>)
    5b58:	4798      	blx	r3
	lcd_wr32(RAM_DL +44,END());
    5b5a:	2384      	movs	r3, #132	; 0x84
    5b5c:	059b      	lsls	r3, r3, #22
    5b5e:	4a29      	ldr	r2, [pc, #164]	; (5c04 <main+0x188>)
    5b60:	0019      	movs	r1, r3
    5b62:	0010      	movs	r0, r2
    5b64:	4b13      	ldr	r3, [pc, #76]	; (5bb4 <main+0x138>)
    5b66:	4798      	blx	r3
	lcd_wr32(RAM_DL +48,DISPLAY());// display the image
    5b68:	4b27      	ldr	r3, [pc, #156]	; (5c08 <main+0x18c>)
    5b6a:	2100      	movs	r1, #0
    5b6c:	0018      	movs	r0, r3
    5b6e:	4b11      	ldr	r3, [pc, #68]	; (5bb4 <main+0x138>)
    5b70:	4798      	blx	r3
	disEnd();
    5b72:	4b26      	ldr	r3, [pc, #152]	; (5c0c <main+0x190>)
    5b74:	4798      	blx	r3
	disStart();
    5b76:	e7aa      	b.n	5ace <main+0x52>
    5b78:	00005c11 	.word	0x00005c11
    5b7c:	00005a61 	.word	0x00005a61
    5b80:	000030a9 	.word	0x000030a9
    5b84:	20000470 	.word	0x20000470
    5b88:	20000158 	.word	0x20000158
    5b8c:	000021b1 	.word	0x000021b1
    5b90:	003020ac 	.word	0x003020ac
    5b94:	00002485 	.word	0x00002485
    5b98:	003020b0 	.word	0x003020b0
    5b9c:	00004a59 	.word	0x00004a59
    5ba0:	000027d9 	.word	0x000027d9
    5ba4:	000028e1 	.word	0x000028e1
    5ba8:	000029b9 	.word	0x000029b9
    5bac:	00002fc9 	.word	0x00002fc9
    5bb0:	26000007 	.word	0x26000007
    5bb4:	000037e9 	.word	0x000037e9
    5bb8:	1f000001 	.word	0x1f000001
    5bbc:	00300004 	.word	0x00300004
    5bc0:	9b86efc6 	.word	0x9b86efc6
    5bc4:	00300008 	.word	0x00300008
    5bc8:	9e86efd4 	.word	0x9e86efd4
    5bcc:	0030000c 	.word	0x0030000c
    5bd0:	a1c6efc4 	.word	0xa1c6efc4
    5bd4:	00300010 	.word	0x00300010
    5bd8:	a566efc9 	.word	0xa566efc9
    5bdc:	00300014 	.word	0x00300014
    5be0:	00300018 	.word	0x00300018
    5be4:	04a01616 	.word	0x04a01616
    5be8:	0030001c 	.word	0x0030001c
    5bec:	0d000140 	.word	0x0d000140
    5bf0:	00300020 	.word	0x00300020
    5bf4:	1f000002 	.word	0x1f000002
    5bf8:	00300024 	.word	0x00300024
    5bfc:	98085000 	.word	0x98085000
    5c00:	00300028 	.word	0x00300028
    5c04:	0030002c 	.word	0x0030002c
    5c08:	00300030 	.word	0x00300030
    5c0c:	0000300d 	.word	0x0000300d

00005c10 <sim_system_init>:
/* Function Name    : sim_system_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : init system clock, spi, int...
	*/
void sim_system_init(void){
    5c10:	b580      	push	{r7, lr}
    5c12:	af00      	add	r7, sp, #0
	system_init();
    5c14:	4b0f      	ldr	r3, [pc, #60]	; (5c54 <sim_system_init+0x44>)
    5c16:	4798      	blx	r3
	// config system clocks
	sys_clock_init();
    5c18:	4b0f      	ldr	r3, [pc, #60]	; (5c58 <sim_system_init+0x48>)
    5c1a:	4798      	blx	r3
	
	//configure port pins
	configure_port_pins();
    5c1c:	4b0f      	ldr	r3, [pc, #60]	; (5c5c <sim_system_init+0x4c>)
    5c1e:	4798      	blx	r3
	
	// config LCD spi
	lcd_spi_init();
    5c20:	4b0f      	ldr	r3, [pc, #60]	; (5c60 <sim_system_init+0x50>)
    5c22:	4798      	blx	r3
	
	// configure the external interrupt pins
	configure_ext_ints();
    5c24:	4b0f      	ldr	r3, [pc, #60]	; (5c64 <sim_system_init+0x54>)
    5c26:	4798      	blx	r3
	// configure the callback functions for external interrupts
	configure_ext_int_callback();
    5c28:	4b0f      	ldr	r3, [pc, #60]	; (5c68 <sim_system_init+0x58>)
    5c2a:	4798      	blx	r3

	// initialize the LCD
	lcd_init_seq(); 
    5c2c:	4b0f      	ldr	r3, [pc, #60]	; (5c6c <sim_system_init+0x5c>)
    5c2e:	4798      	blx	r3
	
	
	// set the interrupt masks for the LCD interrupts
	lcd_int_mask(LCD_DEFAULT_MASK);
    5c30:	4b0f      	ldr	r3, [pc, #60]	; (5c70 <sim_system_init+0x60>)
    5c32:	2104      	movs	r1, #4
    5c34:	0018      	movs	r0, r3
    5c36:	4b0f      	ldr	r3, [pc, #60]	; (5c74 <sim_system_init+0x64>)
    5c38:	4798      	blx	r3
	// write 1 to the LCD REG_INT_EN register to enable it
	lcd_int_enable();
    5c3a:	4b0f      	ldr	r3, [pc, #60]	; (5c78 <sim_system_init+0x68>)
    5c3c:	2101      	movs	r1, #1
    5c3e:	0018      	movs	r0, r3
    5c40:	4b0c      	ldr	r3, [pc, #48]	; (5c74 <sim_system_init+0x64>)
    5c42:	4798      	blx	r3
    
    uartfiber_init();
    5c44:	4b0d      	ldr	r3, [pc, #52]	; (5c7c <sim_system_init+0x6c>)
    5c46:	4798      	blx	r3
    uartib_init();
    5c48:	4b0d      	ldr	r3, [pc, #52]	; (5c80 <sim_system_init+0x70>)
    5c4a:	4798      	blx	r3
}//end sim_system_init
    5c4c:	46c0      	nop			; (mov r8, r8)
    5c4e:	46bd      	mov	sp, r7
    5c50:	bd80      	pop	{r7, pc}
    5c52:	46c0      	nop			; (mov r8, r8)
    5c54:	00005811 	.word	0x00005811
    5c58:	00005c85 	.word	0x00005c85
    5c5c:	00005d3d 	.word	0x00005d3d
    5c60:	0000342d 	.word	0x0000342d
    5c64:	00003049 	.word	0x00003049
    5c68:	00003089 	.word	0x00003089
    5c6c:	00003905 	.word	0x00003905
    5c70:	003020b0 	.word	0x003020b0
    5c74:	00003759 	.word	0x00003759
    5c78:	003020ac 	.word	0x003020ac
    5c7c:	00001d1d 	.word	0x00001d1d
    5c80:	00001f1d 	.word	0x00001f1d

00005c84 <sys_clock_init>:
/* Function Name    : sys_clock_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : init clk speed and general clk
	*/
void sys_clock_init(void){
    5c84:	b580      	push	{r7, lr}
    5c86:	af00      	add	r7, sp, #0
	//init the system clock first
	clock_osc8m_init();
    5c88:	4b06      	ldr	r3, [pc, #24]	; (5ca4 <sys_clock_init+0x20>)
    5c8a:	4798      	blx	r3
	    
	//init GLCK0 after that
	clock_gclk0_init();
    5c8c:	4b06      	ldr	r3, [pc, #24]	; (5ca8 <sys_clock_init+0x24>)
    5c8e:	4798      	blx	r3
		
	// init internal osc32k and gclk2 for calendar
	clock_osc32k_init();
    5c90:	4b06      	ldr	r3, [pc, #24]	; (5cac <sys_clock_init+0x28>)
    5c92:	4798      	blx	r3
	clock_gclk2_init();
    5c94:	4b06      	ldr	r3, [pc, #24]	; (5cb0 <sys_clock_init+0x2c>)
    5c96:	4798      	blx	r3
	delay_init();
    5c98:	4b06      	ldr	r3, [pc, #24]	; (5cb4 <sys_clock_init+0x30>)
    5c9a:	4798      	blx	r3
}//end sys_clock_init
    5c9c:	46c0      	nop			; (mov r8, r8)
    5c9e:	46bd      	mov	sp, r7
    5ca0:	bd80      	pop	{r7, pc}
    5ca2:	46c0      	nop			; (mov r8, r8)
    5ca4:	00005cb9 	.word	0x00005cb9
    5ca8:	00005ce5 	.word	0x00005ce5
    5cac:	00003139 	.word	0x00003139
    5cb0:	00003185 	.word	0x00003185
    5cb4:	00004a01 	.word	0x00004a01

00005cb8 <clock_osc8m_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes the 8 MHz oscillator to be used as the
	*  system clock source.
	*/
void clock_osc8m_init(void){
    5cb8:	b580      	push	{r7, lr}
    5cba:	b082      	sub	sp, #8
    5cbc:	af00      	add	r7, sp, #0
	//create system clock config struct
	struct system_clock_source_osc8m_config osc8_config;

	//config the 8 MHz oscillator
	//divide by 1 = 8 MHz clock
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    5cbe:	1d3b      	adds	r3, r7, #4
    5cc0:	2200      	movs	r2, #0
    5cc2:	701a      	strb	r2, [r3, #0]
	//run on demand
	osc8_config.on_demand = true;
    5cc4:	1d3b      	adds	r3, r7, #4
    5cc6:	2201      	movs	r2, #1
    5cc8:	709a      	strb	r2, [r3, #2]
	//don't run in standby
	osc8_config.run_in_standby = false;
    5cca:	1d3b      	adds	r3, r7, #4
    5ccc:	2200      	movs	r2, #0
    5cce:	705a      	strb	r2, [r3, #1]
	    
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    5cd0:	1d3b      	adds	r3, r7, #4
    5cd2:	0018      	movs	r0, r3
    5cd4:	4b02      	ldr	r3, [pc, #8]	; (5ce0 <clock_osc8m_init+0x28>)
    5cd6:	4798      	blx	r3
}//end clock_osc8m_init
    5cd8:	46c0      	nop			; (mov r8, r8)
    5cda:	46bd      	mov	sp, r7
    5cdc:	b002      	add	sp, #8
    5cde:	bd80      	pop	{r7, pc}
    5ce0:	00004df9 	.word	0x00004df9

00005ce4 <clock_gclk0_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes GCLK0, so it can be used by 
	*  peripherals. Uses the 8 MHz oscillator as its source.
	*/
void clock_gclk0_init(void){
    5ce4:	b580      	push	{r7, lr}
    5ce6:	b084      	sub	sp, #16
    5ce8:	af00      	add	r7, sp, #0
	//create GLCK0 config struct (for driving peripherals)
	struct system_gclk_gen_config gclk0_config;

	//init MCLK
	system_gclk_init();
    5cea:	4b10      	ldr	r3, [pc, #64]	; (5d2c <clock_gclk0_init+0x48>)
    5cec:	4798      	blx	r3
	    
	//set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
    5cee:	2000      	movs	r0, #0
    5cf0:	4b0f      	ldr	r3, [pc, #60]	; (5d30 <clock_gclk0_init+0x4c>)
    5cf2:	4798      	blx	r3
	    
	//use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    5cf4:	1d3b      	adds	r3, r7, #4
    5cf6:	2206      	movs	r2, #6
    5cf8:	701a      	strb	r2, [r3, #0]
	//don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    5cfa:	1d3b      	adds	r3, r7, #4
    5cfc:	2200      	movs	r2, #0
    5cfe:	725a      	strb	r2, [r3, #9]
	//We're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    5d00:	1d3b      	adds	r3, r7, #4
    5d02:	2200      	movs	r2, #0
    5d04:	705a      	strb	r2, [r3, #1]
	//division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    5d06:	1d3b      	adds	r3, r7, #4
    5d08:	2201      	movs	r2, #1
    5d0a:	605a      	str	r2, [r3, #4]
	//don't run in standby
	gclk0_config.run_in_standby = false;
    5d0c:	1d3b      	adds	r3, r7, #4
    5d0e:	2200      	movs	r2, #0
    5d10:	721a      	strb	r2, [r3, #8]
	//set GCLK0's config
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    5d12:	1d3b      	adds	r3, r7, #4
    5d14:	0019      	movs	r1, r3
    5d16:	2000      	movs	r0, #0
    5d18:	4b06      	ldr	r3, [pc, #24]	; (5d34 <clock_gclk0_init+0x50>)
    5d1a:	4798      	blx	r3
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    5d1c:	2000      	movs	r0, #0
    5d1e:	4b06      	ldr	r3, [pc, #24]	; (5d38 <clock_gclk0_init+0x54>)
    5d20:	4798      	blx	r3
}//end clock_gclk0_init
    5d22:	46c0      	nop			; (mov r8, r8)
    5d24:	46bd      	mov	sp, r7
    5d26:	b004      	add	sp, #16
    5d28:	bd80      	pop	{r7, pc}
    5d2a:	46c0      	nop			; (mov r8, r8)
    5d2c:	00005249 	.word	0x00005249
    5d30:	00005945 	.word	0x00005945
    5d34:	00005279 	.word	0x00005279
    5d38:	0000539d 	.word	0x0000539d

00005d3c <configure_port_pins>:
/* Function Name    : configure_port_pins
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config select pins for lcd 
	*/
void configure_port_pins(void){
    5d3c:	b580      	push	{r7, lr}
    5d3e:	b082      	sub	sp, #8
    5d40:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    5d42:	1d3b      	adds	r3, r7, #4
    5d44:	0018      	movs	r0, r3
    5d46:	4b0a      	ldr	r3, [pc, #40]	; (5d70 <configure_port_pins+0x34>)
    5d48:	4798      	blx	r3


	// configure outputs
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    5d4a:	1d3b      	adds	r3, r7, #4
    5d4c:	2201      	movs	r2, #1
    5d4e:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = LCD_PD_PULL;
    5d50:	1d3b      	adds	r3, r7, #4
    5d52:	2200      	movs	r2, #0
    5d54:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PD, &config_port_pin);
    5d56:	1d3b      	adds	r3, r7, #4
    5d58:	0019      	movs	r1, r3
    5d5a:	2008      	movs	r0, #8
    5d5c:	4b05      	ldr	r3, [pc, #20]	; (5d74 <configure_port_pins+0x38>)
    5d5e:	4798      	blx	r3
	
	port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
    5d60:	2101      	movs	r1, #1
    5d62:	2008      	movs	r0, #8
    5d64:	4b04      	ldr	r3, [pc, #16]	; (5d78 <configure_port_pins+0x3c>)
    5d66:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB15, true);	
	
*/


}//end configure_port_pins
    5d68:	46c0      	nop			; (mov r8, r8)
    5d6a:	46bd      	mov	sp, r7
    5d6c:	b002      	add	sp, #8
    5d6e:	bd80      	pop	{r7, pc}
    5d70:	000059e9 	.word	0x000059e9
    5d74:	00004ab1 	.word	0x00004ab1
    5d78:	00005a0d 	.word	0x00005a0d

00005d7c <__udivsi3>:
    5d7c:	2200      	movs	r2, #0
    5d7e:	0843      	lsrs	r3, r0, #1
    5d80:	428b      	cmp	r3, r1
    5d82:	d374      	bcc.n	5e6e <__udivsi3+0xf2>
    5d84:	0903      	lsrs	r3, r0, #4
    5d86:	428b      	cmp	r3, r1
    5d88:	d35f      	bcc.n	5e4a <__udivsi3+0xce>
    5d8a:	0a03      	lsrs	r3, r0, #8
    5d8c:	428b      	cmp	r3, r1
    5d8e:	d344      	bcc.n	5e1a <__udivsi3+0x9e>
    5d90:	0b03      	lsrs	r3, r0, #12
    5d92:	428b      	cmp	r3, r1
    5d94:	d328      	bcc.n	5de8 <__udivsi3+0x6c>
    5d96:	0c03      	lsrs	r3, r0, #16
    5d98:	428b      	cmp	r3, r1
    5d9a:	d30d      	bcc.n	5db8 <__udivsi3+0x3c>
    5d9c:	22ff      	movs	r2, #255	; 0xff
    5d9e:	0209      	lsls	r1, r1, #8
    5da0:	ba12      	rev	r2, r2
    5da2:	0c03      	lsrs	r3, r0, #16
    5da4:	428b      	cmp	r3, r1
    5da6:	d302      	bcc.n	5dae <__udivsi3+0x32>
    5da8:	1212      	asrs	r2, r2, #8
    5daa:	0209      	lsls	r1, r1, #8
    5dac:	d065      	beq.n	5e7a <__udivsi3+0xfe>
    5dae:	0b03      	lsrs	r3, r0, #12
    5db0:	428b      	cmp	r3, r1
    5db2:	d319      	bcc.n	5de8 <__udivsi3+0x6c>
    5db4:	e000      	b.n	5db8 <__udivsi3+0x3c>
    5db6:	0a09      	lsrs	r1, r1, #8
    5db8:	0bc3      	lsrs	r3, r0, #15
    5dba:	428b      	cmp	r3, r1
    5dbc:	d301      	bcc.n	5dc2 <__udivsi3+0x46>
    5dbe:	03cb      	lsls	r3, r1, #15
    5dc0:	1ac0      	subs	r0, r0, r3
    5dc2:	4152      	adcs	r2, r2
    5dc4:	0b83      	lsrs	r3, r0, #14
    5dc6:	428b      	cmp	r3, r1
    5dc8:	d301      	bcc.n	5dce <__udivsi3+0x52>
    5dca:	038b      	lsls	r3, r1, #14
    5dcc:	1ac0      	subs	r0, r0, r3
    5dce:	4152      	adcs	r2, r2
    5dd0:	0b43      	lsrs	r3, r0, #13
    5dd2:	428b      	cmp	r3, r1
    5dd4:	d301      	bcc.n	5dda <__udivsi3+0x5e>
    5dd6:	034b      	lsls	r3, r1, #13
    5dd8:	1ac0      	subs	r0, r0, r3
    5dda:	4152      	adcs	r2, r2
    5ddc:	0b03      	lsrs	r3, r0, #12
    5dde:	428b      	cmp	r3, r1
    5de0:	d301      	bcc.n	5de6 <__udivsi3+0x6a>
    5de2:	030b      	lsls	r3, r1, #12
    5de4:	1ac0      	subs	r0, r0, r3
    5de6:	4152      	adcs	r2, r2
    5de8:	0ac3      	lsrs	r3, r0, #11
    5dea:	428b      	cmp	r3, r1
    5dec:	d301      	bcc.n	5df2 <__udivsi3+0x76>
    5dee:	02cb      	lsls	r3, r1, #11
    5df0:	1ac0      	subs	r0, r0, r3
    5df2:	4152      	adcs	r2, r2
    5df4:	0a83      	lsrs	r3, r0, #10
    5df6:	428b      	cmp	r3, r1
    5df8:	d301      	bcc.n	5dfe <__udivsi3+0x82>
    5dfa:	028b      	lsls	r3, r1, #10
    5dfc:	1ac0      	subs	r0, r0, r3
    5dfe:	4152      	adcs	r2, r2
    5e00:	0a43      	lsrs	r3, r0, #9
    5e02:	428b      	cmp	r3, r1
    5e04:	d301      	bcc.n	5e0a <__udivsi3+0x8e>
    5e06:	024b      	lsls	r3, r1, #9
    5e08:	1ac0      	subs	r0, r0, r3
    5e0a:	4152      	adcs	r2, r2
    5e0c:	0a03      	lsrs	r3, r0, #8
    5e0e:	428b      	cmp	r3, r1
    5e10:	d301      	bcc.n	5e16 <__udivsi3+0x9a>
    5e12:	020b      	lsls	r3, r1, #8
    5e14:	1ac0      	subs	r0, r0, r3
    5e16:	4152      	adcs	r2, r2
    5e18:	d2cd      	bcs.n	5db6 <__udivsi3+0x3a>
    5e1a:	09c3      	lsrs	r3, r0, #7
    5e1c:	428b      	cmp	r3, r1
    5e1e:	d301      	bcc.n	5e24 <__udivsi3+0xa8>
    5e20:	01cb      	lsls	r3, r1, #7
    5e22:	1ac0      	subs	r0, r0, r3
    5e24:	4152      	adcs	r2, r2
    5e26:	0983      	lsrs	r3, r0, #6
    5e28:	428b      	cmp	r3, r1
    5e2a:	d301      	bcc.n	5e30 <__udivsi3+0xb4>
    5e2c:	018b      	lsls	r3, r1, #6
    5e2e:	1ac0      	subs	r0, r0, r3
    5e30:	4152      	adcs	r2, r2
    5e32:	0943      	lsrs	r3, r0, #5
    5e34:	428b      	cmp	r3, r1
    5e36:	d301      	bcc.n	5e3c <__udivsi3+0xc0>
    5e38:	014b      	lsls	r3, r1, #5
    5e3a:	1ac0      	subs	r0, r0, r3
    5e3c:	4152      	adcs	r2, r2
    5e3e:	0903      	lsrs	r3, r0, #4
    5e40:	428b      	cmp	r3, r1
    5e42:	d301      	bcc.n	5e48 <__udivsi3+0xcc>
    5e44:	010b      	lsls	r3, r1, #4
    5e46:	1ac0      	subs	r0, r0, r3
    5e48:	4152      	adcs	r2, r2
    5e4a:	08c3      	lsrs	r3, r0, #3
    5e4c:	428b      	cmp	r3, r1
    5e4e:	d301      	bcc.n	5e54 <__udivsi3+0xd8>
    5e50:	00cb      	lsls	r3, r1, #3
    5e52:	1ac0      	subs	r0, r0, r3
    5e54:	4152      	adcs	r2, r2
    5e56:	0883      	lsrs	r3, r0, #2
    5e58:	428b      	cmp	r3, r1
    5e5a:	d301      	bcc.n	5e60 <__udivsi3+0xe4>
    5e5c:	008b      	lsls	r3, r1, #2
    5e5e:	1ac0      	subs	r0, r0, r3
    5e60:	4152      	adcs	r2, r2
    5e62:	0843      	lsrs	r3, r0, #1
    5e64:	428b      	cmp	r3, r1
    5e66:	d301      	bcc.n	5e6c <__udivsi3+0xf0>
    5e68:	004b      	lsls	r3, r1, #1
    5e6a:	1ac0      	subs	r0, r0, r3
    5e6c:	4152      	adcs	r2, r2
    5e6e:	1a41      	subs	r1, r0, r1
    5e70:	d200      	bcs.n	5e74 <__udivsi3+0xf8>
    5e72:	4601      	mov	r1, r0
    5e74:	4152      	adcs	r2, r2
    5e76:	4610      	mov	r0, r2
    5e78:	4770      	bx	lr
    5e7a:	e7ff      	b.n	5e7c <__udivsi3+0x100>
    5e7c:	b501      	push	{r0, lr}
    5e7e:	2000      	movs	r0, #0
    5e80:	f000 f806 	bl	5e90 <__aeabi_idiv0>
    5e84:	bd02      	pop	{r1, pc}
    5e86:	46c0      	nop			; (mov r8, r8)

00005e88 <__aeabi_uidivmod>:
    5e88:	2900      	cmp	r1, #0
    5e8a:	d0f7      	beq.n	5e7c <__udivsi3+0x100>
    5e8c:	e776      	b.n	5d7c <__udivsi3>
    5e8e:	4770      	bx	lr

00005e90 <__aeabi_idiv0>:
    5e90:	4770      	bx	lr
    5e92:	46c0      	nop			; (mov r8, r8)

00005e94 <__aeabi_cdrcmple>:
    5e94:	4684      	mov	ip, r0
    5e96:	1c10      	adds	r0, r2, #0
    5e98:	4662      	mov	r2, ip
    5e9a:	468c      	mov	ip, r1
    5e9c:	1c19      	adds	r1, r3, #0
    5e9e:	4663      	mov	r3, ip
    5ea0:	e000      	b.n	5ea4 <__aeabi_cdcmpeq>
    5ea2:	46c0      	nop			; (mov r8, r8)

00005ea4 <__aeabi_cdcmpeq>:
    5ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5ea6:	f000 f8fb 	bl	60a0 <__ledf2>
    5eaa:	2800      	cmp	r0, #0
    5eac:	d401      	bmi.n	5eb2 <__aeabi_cdcmpeq+0xe>
    5eae:	2100      	movs	r1, #0
    5eb0:	42c8      	cmn	r0, r1
    5eb2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005eb4 <__aeabi_dcmpeq>:
    5eb4:	b510      	push	{r4, lr}
    5eb6:	f000 f855 	bl	5f64 <__eqdf2>
    5eba:	4240      	negs	r0, r0
    5ebc:	3001      	adds	r0, #1
    5ebe:	bd10      	pop	{r4, pc}

00005ec0 <__aeabi_dcmplt>:
    5ec0:	b510      	push	{r4, lr}
    5ec2:	f000 f8ed 	bl	60a0 <__ledf2>
    5ec6:	2800      	cmp	r0, #0
    5ec8:	db01      	blt.n	5ece <__aeabi_dcmplt+0xe>
    5eca:	2000      	movs	r0, #0
    5ecc:	bd10      	pop	{r4, pc}
    5ece:	2001      	movs	r0, #1
    5ed0:	bd10      	pop	{r4, pc}
    5ed2:	46c0      	nop			; (mov r8, r8)

00005ed4 <__aeabi_dcmple>:
    5ed4:	b510      	push	{r4, lr}
    5ed6:	f000 f8e3 	bl	60a0 <__ledf2>
    5eda:	2800      	cmp	r0, #0
    5edc:	dd01      	ble.n	5ee2 <__aeabi_dcmple+0xe>
    5ede:	2000      	movs	r0, #0
    5ee0:	bd10      	pop	{r4, pc}
    5ee2:	2001      	movs	r0, #1
    5ee4:	bd10      	pop	{r4, pc}
    5ee6:	46c0      	nop			; (mov r8, r8)

00005ee8 <__aeabi_dcmpgt>:
    5ee8:	b510      	push	{r4, lr}
    5eea:	f000 f875 	bl	5fd8 <__gedf2>
    5eee:	2800      	cmp	r0, #0
    5ef0:	dc01      	bgt.n	5ef6 <__aeabi_dcmpgt+0xe>
    5ef2:	2000      	movs	r0, #0
    5ef4:	bd10      	pop	{r4, pc}
    5ef6:	2001      	movs	r0, #1
    5ef8:	bd10      	pop	{r4, pc}
    5efa:	46c0      	nop			; (mov r8, r8)

00005efc <__aeabi_dcmpge>:
    5efc:	b510      	push	{r4, lr}
    5efe:	f000 f86b 	bl	5fd8 <__gedf2>
    5f02:	2800      	cmp	r0, #0
    5f04:	da01      	bge.n	5f0a <__aeabi_dcmpge+0xe>
    5f06:	2000      	movs	r0, #0
    5f08:	bd10      	pop	{r4, pc}
    5f0a:	2001      	movs	r0, #1
    5f0c:	bd10      	pop	{r4, pc}
    5f0e:	46c0      	nop			; (mov r8, r8)

00005f10 <__aeabi_lmul>:
    5f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f12:	46ce      	mov	lr, r9
    5f14:	4647      	mov	r7, r8
    5f16:	0415      	lsls	r5, r2, #16
    5f18:	0c2d      	lsrs	r5, r5, #16
    5f1a:	002e      	movs	r6, r5
    5f1c:	b580      	push	{r7, lr}
    5f1e:	0407      	lsls	r7, r0, #16
    5f20:	0c14      	lsrs	r4, r2, #16
    5f22:	0c3f      	lsrs	r7, r7, #16
    5f24:	4699      	mov	r9, r3
    5f26:	0c03      	lsrs	r3, r0, #16
    5f28:	437e      	muls	r6, r7
    5f2a:	435d      	muls	r5, r3
    5f2c:	4367      	muls	r7, r4
    5f2e:	4363      	muls	r3, r4
    5f30:	197f      	adds	r7, r7, r5
    5f32:	0c34      	lsrs	r4, r6, #16
    5f34:	19e4      	adds	r4, r4, r7
    5f36:	469c      	mov	ip, r3
    5f38:	42a5      	cmp	r5, r4
    5f3a:	d903      	bls.n	5f44 <__aeabi_lmul+0x34>
    5f3c:	2380      	movs	r3, #128	; 0x80
    5f3e:	025b      	lsls	r3, r3, #9
    5f40:	4698      	mov	r8, r3
    5f42:	44c4      	add	ip, r8
    5f44:	464b      	mov	r3, r9
    5f46:	4351      	muls	r1, r2
    5f48:	4343      	muls	r3, r0
    5f4a:	0436      	lsls	r6, r6, #16
    5f4c:	0c36      	lsrs	r6, r6, #16
    5f4e:	0c25      	lsrs	r5, r4, #16
    5f50:	0424      	lsls	r4, r4, #16
    5f52:	4465      	add	r5, ip
    5f54:	19a4      	adds	r4, r4, r6
    5f56:	1859      	adds	r1, r3, r1
    5f58:	1949      	adds	r1, r1, r5
    5f5a:	0020      	movs	r0, r4
    5f5c:	bc0c      	pop	{r2, r3}
    5f5e:	4690      	mov	r8, r2
    5f60:	4699      	mov	r9, r3
    5f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f64 <__eqdf2>:
    5f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f66:	464f      	mov	r7, r9
    5f68:	4646      	mov	r6, r8
    5f6a:	46d6      	mov	lr, sl
    5f6c:	005c      	lsls	r4, r3, #1
    5f6e:	b5c0      	push	{r6, r7, lr}
    5f70:	031f      	lsls	r7, r3, #12
    5f72:	0fdb      	lsrs	r3, r3, #31
    5f74:	469a      	mov	sl, r3
    5f76:	4b17      	ldr	r3, [pc, #92]	; (5fd4 <__eqdf2+0x70>)
    5f78:	030e      	lsls	r6, r1, #12
    5f7a:	004d      	lsls	r5, r1, #1
    5f7c:	4684      	mov	ip, r0
    5f7e:	4680      	mov	r8, r0
    5f80:	0b36      	lsrs	r6, r6, #12
    5f82:	0d6d      	lsrs	r5, r5, #21
    5f84:	0fc9      	lsrs	r1, r1, #31
    5f86:	4691      	mov	r9, r2
    5f88:	0b3f      	lsrs	r7, r7, #12
    5f8a:	0d64      	lsrs	r4, r4, #21
    5f8c:	2001      	movs	r0, #1
    5f8e:	429d      	cmp	r5, r3
    5f90:	d008      	beq.n	5fa4 <__eqdf2+0x40>
    5f92:	429c      	cmp	r4, r3
    5f94:	d001      	beq.n	5f9a <__eqdf2+0x36>
    5f96:	42a5      	cmp	r5, r4
    5f98:	d00b      	beq.n	5fb2 <__eqdf2+0x4e>
    5f9a:	bc1c      	pop	{r2, r3, r4}
    5f9c:	4690      	mov	r8, r2
    5f9e:	4699      	mov	r9, r3
    5fa0:	46a2      	mov	sl, r4
    5fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fa4:	4663      	mov	r3, ip
    5fa6:	4333      	orrs	r3, r6
    5fa8:	d1f7      	bne.n	5f9a <__eqdf2+0x36>
    5faa:	42ac      	cmp	r4, r5
    5fac:	d1f5      	bne.n	5f9a <__eqdf2+0x36>
    5fae:	433a      	orrs	r2, r7
    5fb0:	d1f3      	bne.n	5f9a <__eqdf2+0x36>
    5fb2:	2001      	movs	r0, #1
    5fb4:	42be      	cmp	r6, r7
    5fb6:	d1f0      	bne.n	5f9a <__eqdf2+0x36>
    5fb8:	45c8      	cmp	r8, r9
    5fba:	d1ee      	bne.n	5f9a <__eqdf2+0x36>
    5fbc:	4551      	cmp	r1, sl
    5fbe:	d007      	beq.n	5fd0 <__eqdf2+0x6c>
    5fc0:	2d00      	cmp	r5, #0
    5fc2:	d1ea      	bne.n	5f9a <__eqdf2+0x36>
    5fc4:	4663      	mov	r3, ip
    5fc6:	431e      	orrs	r6, r3
    5fc8:	0030      	movs	r0, r6
    5fca:	1e46      	subs	r6, r0, #1
    5fcc:	41b0      	sbcs	r0, r6
    5fce:	e7e4      	b.n	5f9a <__eqdf2+0x36>
    5fd0:	2000      	movs	r0, #0
    5fd2:	e7e2      	b.n	5f9a <__eqdf2+0x36>
    5fd4:	000007ff 	.word	0x000007ff

00005fd8 <__gedf2>:
    5fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fda:	4645      	mov	r5, r8
    5fdc:	46de      	mov	lr, fp
    5fde:	4657      	mov	r7, sl
    5fe0:	464e      	mov	r6, r9
    5fe2:	b5e0      	push	{r5, r6, r7, lr}
    5fe4:	031f      	lsls	r7, r3, #12
    5fe6:	0b3d      	lsrs	r5, r7, #12
    5fe8:	4f2c      	ldr	r7, [pc, #176]	; (609c <__gedf2+0xc4>)
    5fea:	030e      	lsls	r6, r1, #12
    5fec:	004c      	lsls	r4, r1, #1
    5fee:	46ab      	mov	fp, r5
    5ff0:	005d      	lsls	r5, r3, #1
    5ff2:	4684      	mov	ip, r0
    5ff4:	0b36      	lsrs	r6, r6, #12
    5ff6:	0d64      	lsrs	r4, r4, #21
    5ff8:	0fc9      	lsrs	r1, r1, #31
    5ffa:	4690      	mov	r8, r2
    5ffc:	0d6d      	lsrs	r5, r5, #21
    5ffe:	0fdb      	lsrs	r3, r3, #31
    6000:	42bc      	cmp	r4, r7
    6002:	d02a      	beq.n	605a <__gedf2+0x82>
    6004:	4f25      	ldr	r7, [pc, #148]	; (609c <__gedf2+0xc4>)
    6006:	42bd      	cmp	r5, r7
    6008:	d02d      	beq.n	6066 <__gedf2+0x8e>
    600a:	2c00      	cmp	r4, #0
    600c:	d10f      	bne.n	602e <__gedf2+0x56>
    600e:	4330      	orrs	r0, r6
    6010:	0007      	movs	r7, r0
    6012:	4681      	mov	r9, r0
    6014:	4278      	negs	r0, r7
    6016:	4178      	adcs	r0, r7
    6018:	b2c0      	uxtb	r0, r0
    601a:	2d00      	cmp	r5, #0
    601c:	d117      	bne.n	604e <__gedf2+0x76>
    601e:	465f      	mov	r7, fp
    6020:	433a      	orrs	r2, r7
    6022:	d114      	bne.n	604e <__gedf2+0x76>
    6024:	464b      	mov	r3, r9
    6026:	2000      	movs	r0, #0
    6028:	2b00      	cmp	r3, #0
    602a:	d00a      	beq.n	6042 <__gedf2+0x6a>
    602c:	e006      	b.n	603c <__gedf2+0x64>
    602e:	2d00      	cmp	r5, #0
    6030:	d102      	bne.n	6038 <__gedf2+0x60>
    6032:	4658      	mov	r0, fp
    6034:	4302      	orrs	r2, r0
    6036:	d001      	beq.n	603c <__gedf2+0x64>
    6038:	4299      	cmp	r1, r3
    603a:	d018      	beq.n	606e <__gedf2+0x96>
    603c:	4248      	negs	r0, r1
    603e:	2101      	movs	r1, #1
    6040:	4308      	orrs	r0, r1
    6042:	bc3c      	pop	{r2, r3, r4, r5}
    6044:	4690      	mov	r8, r2
    6046:	4699      	mov	r9, r3
    6048:	46a2      	mov	sl, r4
    604a:	46ab      	mov	fp, r5
    604c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    604e:	2800      	cmp	r0, #0
    6050:	d0f2      	beq.n	6038 <__gedf2+0x60>
    6052:	2001      	movs	r0, #1
    6054:	3b01      	subs	r3, #1
    6056:	4318      	orrs	r0, r3
    6058:	e7f3      	b.n	6042 <__gedf2+0x6a>
    605a:	0037      	movs	r7, r6
    605c:	4307      	orrs	r7, r0
    605e:	d0d1      	beq.n	6004 <__gedf2+0x2c>
    6060:	2002      	movs	r0, #2
    6062:	4240      	negs	r0, r0
    6064:	e7ed      	b.n	6042 <__gedf2+0x6a>
    6066:	465f      	mov	r7, fp
    6068:	4317      	orrs	r7, r2
    606a:	d0ce      	beq.n	600a <__gedf2+0x32>
    606c:	e7f8      	b.n	6060 <__gedf2+0x88>
    606e:	42ac      	cmp	r4, r5
    6070:	dce4      	bgt.n	603c <__gedf2+0x64>
    6072:	da03      	bge.n	607c <__gedf2+0xa4>
    6074:	1e48      	subs	r0, r1, #1
    6076:	2101      	movs	r1, #1
    6078:	4308      	orrs	r0, r1
    607a:	e7e2      	b.n	6042 <__gedf2+0x6a>
    607c:	455e      	cmp	r6, fp
    607e:	d8dd      	bhi.n	603c <__gedf2+0x64>
    6080:	d006      	beq.n	6090 <__gedf2+0xb8>
    6082:	2000      	movs	r0, #0
    6084:	455e      	cmp	r6, fp
    6086:	d2dc      	bcs.n	6042 <__gedf2+0x6a>
    6088:	2301      	movs	r3, #1
    608a:	1e48      	subs	r0, r1, #1
    608c:	4318      	orrs	r0, r3
    608e:	e7d8      	b.n	6042 <__gedf2+0x6a>
    6090:	45c4      	cmp	ip, r8
    6092:	d8d3      	bhi.n	603c <__gedf2+0x64>
    6094:	2000      	movs	r0, #0
    6096:	45c4      	cmp	ip, r8
    6098:	d3f6      	bcc.n	6088 <__gedf2+0xb0>
    609a:	e7d2      	b.n	6042 <__gedf2+0x6a>
    609c:	000007ff 	.word	0x000007ff

000060a0 <__ledf2>:
    60a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60a2:	464e      	mov	r6, r9
    60a4:	4645      	mov	r5, r8
    60a6:	46de      	mov	lr, fp
    60a8:	4657      	mov	r7, sl
    60aa:	005c      	lsls	r4, r3, #1
    60ac:	b5e0      	push	{r5, r6, r7, lr}
    60ae:	031f      	lsls	r7, r3, #12
    60b0:	0fdb      	lsrs	r3, r3, #31
    60b2:	4699      	mov	r9, r3
    60b4:	4b2a      	ldr	r3, [pc, #168]	; (6160 <__ledf2+0xc0>)
    60b6:	030e      	lsls	r6, r1, #12
    60b8:	004d      	lsls	r5, r1, #1
    60ba:	0fc9      	lsrs	r1, r1, #31
    60bc:	4684      	mov	ip, r0
    60be:	0b36      	lsrs	r6, r6, #12
    60c0:	0d6d      	lsrs	r5, r5, #21
    60c2:	468b      	mov	fp, r1
    60c4:	4690      	mov	r8, r2
    60c6:	0b3f      	lsrs	r7, r7, #12
    60c8:	0d64      	lsrs	r4, r4, #21
    60ca:	429d      	cmp	r5, r3
    60cc:	d020      	beq.n	6110 <__ledf2+0x70>
    60ce:	4b24      	ldr	r3, [pc, #144]	; (6160 <__ledf2+0xc0>)
    60d0:	429c      	cmp	r4, r3
    60d2:	d022      	beq.n	611a <__ledf2+0x7a>
    60d4:	2d00      	cmp	r5, #0
    60d6:	d112      	bne.n	60fe <__ledf2+0x5e>
    60d8:	4330      	orrs	r0, r6
    60da:	4243      	negs	r3, r0
    60dc:	4143      	adcs	r3, r0
    60de:	b2db      	uxtb	r3, r3
    60e0:	2c00      	cmp	r4, #0
    60e2:	d01f      	beq.n	6124 <__ledf2+0x84>
    60e4:	2b00      	cmp	r3, #0
    60e6:	d00c      	beq.n	6102 <__ledf2+0x62>
    60e8:	464b      	mov	r3, r9
    60ea:	2001      	movs	r0, #1
    60ec:	3b01      	subs	r3, #1
    60ee:	4303      	orrs	r3, r0
    60f0:	0018      	movs	r0, r3
    60f2:	bc3c      	pop	{r2, r3, r4, r5}
    60f4:	4690      	mov	r8, r2
    60f6:	4699      	mov	r9, r3
    60f8:	46a2      	mov	sl, r4
    60fa:	46ab      	mov	fp, r5
    60fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60fe:	2c00      	cmp	r4, #0
    6100:	d016      	beq.n	6130 <__ledf2+0x90>
    6102:	45cb      	cmp	fp, r9
    6104:	d017      	beq.n	6136 <__ledf2+0x96>
    6106:	465b      	mov	r3, fp
    6108:	4259      	negs	r1, r3
    610a:	2301      	movs	r3, #1
    610c:	430b      	orrs	r3, r1
    610e:	e7ef      	b.n	60f0 <__ledf2+0x50>
    6110:	0031      	movs	r1, r6
    6112:	2302      	movs	r3, #2
    6114:	4301      	orrs	r1, r0
    6116:	d1eb      	bne.n	60f0 <__ledf2+0x50>
    6118:	e7d9      	b.n	60ce <__ledf2+0x2e>
    611a:	0039      	movs	r1, r7
    611c:	2302      	movs	r3, #2
    611e:	4311      	orrs	r1, r2
    6120:	d1e6      	bne.n	60f0 <__ledf2+0x50>
    6122:	e7d7      	b.n	60d4 <__ledf2+0x34>
    6124:	433a      	orrs	r2, r7
    6126:	d1dd      	bne.n	60e4 <__ledf2+0x44>
    6128:	2300      	movs	r3, #0
    612a:	2800      	cmp	r0, #0
    612c:	d0e0      	beq.n	60f0 <__ledf2+0x50>
    612e:	e7ea      	b.n	6106 <__ledf2+0x66>
    6130:	433a      	orrs	r2, r7
    6132:	d1e6      	bne.n	6102 <__ledf2+0x62>
    6134:	e7e7      	b.n	6106 <__ledf2+0x66>
    6136:	42a5      	cmp	r5, r4
    6138:	dce5      	bgt.n	6106 <__ledf2+0x66>
    613a:	db05      	blt.n	6148 <__ledf2+0xa8>
    613c:	42be      	cmp	r6, r7
    613e:	d8e2      	bhi.n	6106 <__ledf2+0x66>
    6140:	d007      	beq.n	6152 <__ledf2+0xb2>
    6142:	2300      	movs	r3, #0
    6144:	42be      	cmp	r6, r7
    6146:	d2d3      	bcs.n	60f0 <__ledf2+0x50>
    6148:	4659      	mov	r1, fp
    614a:	2301      	movs	r3, #1
    614c:	3901      	subs	r1, #1
    614e:	430b      	orrs	r3, r1
    6150:	e7ce      	b.n	60f0 <__ledf2+0x50>
    6152:	45c4      	cmp	ip, r8
    6154:	d8d7      	bhi.n	6106 <__ledf2+0x66>
    6156:	2300      	movs	r3, #0
    6158:	45c4      	cmp	ip, r8
    615a:	d3f5      	bcc.n	6148 <__ledf2+0xa8>
    615c:	e7c8      	b.n	60f0 <__ledf2+0x50>
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	000007ff 	.word	0x000007ff

00006164 <__libc_init_array>:
    6164:	b570      	push	{r4, r5, r6, lr}
    6166:	2600      	movs	r6, #0
    6168:	4d0c      	ldr	r5, [pc, #48]	; (619c <__libc_init_array+0x38>)
    616a:	4c0d      	ldr	r4, [pc, #52]	; (61a0 <__libc_init_array+0x3c>)
    616c:	1b64      	subs	r4, r4, r5
    616e:	10a4      	asrs	r4, r4, #2
    6170:	42a6      	cmp	r6, r4
    6172:	d109      	bne.n	6188 <__libc_init_array+0x24>
    6174:	2600      	movs	r6, #0
    6176:	f000 f96f 	bl	6458 <_init>
    617a:	4d0a      	ldr	r5, [pc, #40]	; (61a4 <__libc_init_array+0x40>)
    617c:	4c0a      	ldr	r4, [pc, #40]	; (61a8 <__libc_init_array+0x44>)
    617e:	1b64      	subs	r4, r4, r5
    6180:	10a4      	asrs	r4, r4, #2
    6182:	42a6      	cmp	r6, r4
    6184:	d105      	bne.n	6192 <__libc_init_array+0x2e>
    6186:	bd70      	pop	{r4, r5, r6, pc}
    6188:	00b3      	lsls	r3, r6, #2
    618a:	58eb      	ldr	r3, [r5, r3]
    618c:	4798      	blx	r3
    618e:	3601      	adds	r6, #1
    6190:	e7ee      	b.n	6170 <__libc_init_array+0xc>
    6192:	00b3      	lsls	r3, r6, #2
    6194:	58eb      	ldr	r3, [r5, r3]
    6196:	4798      	blx	r3
    6198:	3601      	adds	r6, #1
    619a:	e7f2      	b.n	6182 <__libc_init_array+0x1e>
    619c:	00006464 	.word	0x00006464
    61a0:	00006464 	.word	0x00006464
    61a4:	00006464 	.word	0x00006464
    61a8:	00006468 	.word	0x00006468

000061ac <memcpy>:
    61ac:	2300      	movs	r3, #0
    61ae:	b510      	push	{r4, lr}
    61b0:	429a      	cmp	r2, r3
    61b2:	d100      	bne.n	61b6 <memcpy+0xa>
    61b4:	bd10      	pop	{r4, pc}
    61b6:	5ccc      	ldrb	r4, [r1, r3]
    61b8:	54c4      	strb	r4, [r0, r3]
    61ba:	3301      	adds	r3, #1
    61bc:	e7f8      	b.n	61b0 <memcpy+0x4>

000061be <memset>:
    61be:	0003      	movs	r3, r0
    61c0:	1882      	adds	r2, r0, r2
    61c2:	4293      	cmp	r3, r2
    61c4:	d100      	bne.n	61c8 <memset+0xa>
    61c6:	4770      	bx	lr
    61c8:	7019      	strb	r1, [r3, #0]
    61ca:	3301      	adds	r3, #1
    61cc:	e7f9      	b.n	61c2 <memset+0x4>

000061ce <strlen>:
    61ce:	2300      	movs	r3, #0
    61d0:	5cc2      	ldrb	r2, [r0, r3]
    61d2:	3301      	adds	r3, #1
    61d4:	2a00      	cmp	r2, #0
    61d6:	d1fb      	bne.n	61d0 <strlen+0x2>
    61d8:	1e58      	subs	r0, r3, #1
    61da:	4770      	bx	lr
    61dc:	42000800 	.word	0x42000800
    61e0:	42000c00 	.word	0x42000c00
    61e4:	42001000 	.word	0x42001000
    61e8:	42001400 	.word	0x42001400
    61ec:	42001800 	.word	0x42001800
    61f0:	42001c00 	.word	0x42001c00
    61f4:	0c0b0a09 	.word	0x0c0b0a09
    61f8:	00000e0d 	.word	0x00000e0d
    61fc:	65747441 	.word	0x65747441
    6200:	7461756e 	.word	0x7461756e
    6204:	006e6f69 	.word	0x006e6f69
    6208:	64323025 	.word	0x64323025
    620c:	3025202e 	.word	0x3025202e
    6210:	253a6432 	.word	0x253a6432
    6214:	3a643230 	.word	0x3a643230
    6218:	64323025 	.word	0x64323025
    621c:	25202020 	.word	0x25202020
    6220:	2f643230 	.word	0x2f643230
    6224:	64323025 	.word	0x64323025
    6228:	3430252f 	.word	0x3430252f
    622c:	20202064 	.word	0x20202064
    6230:	20202020 	.word	0x20202020
    6234:	20202020 	.word	0x20202020
    6238:	20202020 	.word	0x20202020
    623c:	30252020 	.word	0x30252020
    6240:	20206433 	.word	0x20206433
    6244:	20202020 	.word	0x20202020
    6248:	20202020 	.word	0x20202020
    624c:	20202020 	.word	0x20202020
    6250:	20202020 	.word	0x20202020
    6254:	20202020 	.word	0x20202020
    6258:	33302520 	.word	0x33302520
    625c:	20202064 	.word	0x20202064
    6260:	20202020 	.word	0x20202020
    6264:	20202020 	.word	0x20202020
    6268:	20202020 	.word	0x20202020
    626c:	20202020 	.word	0x20202020
    6270:	25202020 	.word	0x25202020
    6274:	00643330 	.word	0x00643330
    6278:	74736948 	.word	0x74736948
    627c:	0079726f 	.word	0x0079726f
    6280:	49535352 	.word	0x49535352
    6284:	00000000 	.word	0x00000000
    6288:	75736956 	.word	0x75736956
    628c:	003a6c61 	.word	0x003a6c61
    6290:	00736559 	.word	0x00736559
    6294:	00006f4e 	.word	0x00006f4e
    6298:	6e756f53 	.word	0x6e756f53
    629c:	00203a64 	.word	0x00203a64
    62a0:	61432020 	.word	0x61432020
    62a4:	7262696c 	.word	0x7262696c
    62a8:	20657461 	.word	0x20657461
    62ac:	65726353 	.word	0x65726353
    62b0:	20206e65 	.word	0x20206e65
    62b4:	00000000 	.word	0x00000000
    62b8:	65532020 	.word	0x65532020
    62bc:	61442074 	.word	0x61442074
    62c0:	20206574 	.word	0x20206574
    62c4:	00000000 	.word	0x00000000
    62c8:	65532020 	.word	0x65532020
    62cc:	69542074 	.word	0x69542074
    62d0:	2020656d 	.word	0x2020656d
    62d4:	00000000 	.word	0x00000000
    62d8:	74746553 	.word	0x74746553
    62dc:	73676e69 	.word	0x73676e69
    62e0:	00000000 	.word	0x00000000
    62e4:	61656c50 	.word	0x61656c50
    62e8:	74206573 	.word	0x74206573
    62ec:	6f207061 	.word	0x6f207061
    62f0:	6874206e 	.word	0x6874206e
    62f4:	6f642065 	.word	0x6f642065
    62f8:	00000074 	.word	0x00000074
    62fc:	65746e45 	.word	0x65746e45
    6300:	69542072 	.word	0x69542072
    6304:	0000656d 	.word	0x0000656d
    6308:	6d3a6868 	.word	0x6d3a6868
    630c:	73733a6d 	.word	0x73733a6d
    6310:	20202020 	.word	0x20202020
    6314:	68343228 	.word	0x68343228
    6318:	726f6620 	.word	0x726f6620
    631c:	2974616d 	.word	0x2974616d
    6320:	00000000 	.word	0x00000000
    6324:	65746e45 	.word	0x65746e45
    6328:	61442072 	.word	0x61442072
    632c:	00006574 	.word	0x00006574
    6330:	642f6d6d 	.word	0x642f6d6d
    6334:	79792f64 	.word	0x79792f64
    6338:	00007979 	.word	0x00007979
    633c:	64323025 	.word	0x64323025
    6340:	3230253a 	.word	0x3230253a
    6344:	30253a64 	.word	0x30253a64
    6348:	00006432 	.word	0x00006432
    634c:	64323025 	.word	0x64323025
    6350:	3230252f 	.word	0x3230252f
    6354:	30252f64 	.word	0x30252f64
    6358:	00006434 	.word	0x00006434
    635c:	007a4847 	.word	0x007a4847
    6360:	35342e32 	.word	0x35342e32
    6364:	00000000 	.word	0x00000000
    6368:	007a484d 	.word	0x007a484d
    636c:	00353139 	.word	0x00353139
    6370:	00393631 	.word	0x00393631
    6374:	20426420 	.word	0x20426420
    6378:	00000000 	.word	0x00000000
    637c:	61422020 	.word	0x61422020
    6380:	20206b63 	.word	0x20206b63
    6384:	00000000 	.word	0x00000000
    6388:	00333231 	.word	0x00333231
    638c:	00363534 	.word	0x00363534
    6390:	00393837 	.word	0x00393837
    6394:	00000030 	.word	0x00000030
    6398:	00002d3c 	.word	0x00002d3c
    639c:	00524c43 	.word	0x00524c43
    63a0:	00004b4f 	.word	0x00004b4f
    63a4:	74696e55 	.word	0x74696e55
    63a8:	00000000 	.word	0x00000000
    63ac:	20393631 	.word	0x20393631
    63b0:	007a484d 	.word	0x007a484d
    63b4:	20353139 	.word	0x20353139
    63b8:	007a484d 	.word	0x007a484d
    63bc:	35342e32 	.word	0x35342e32
    63c0:	7a484720 	.word	0x7a484720
    63c4:	00000000 	.word	0x00000000
    63c8:	70736944 	.word	0x70736944
    63cc:	0079616c 	.word	0x0079616c
    63d0:	63655220 	.word	0x63655220
    63d4:	65766965 	.word	0x65766965
    63d8:	00002072 	.word	0x00002072
    63dc:	74614420 	.word	0x74614420
    63e0:	6e612065 	.word	0x6e612065
    63e4:	69542064 	.word	0x69542064
    63e8:	0020656d 	.word	0x0020656d
    63ec:	39363120 	.word	0x39363120
    63f0:	7a484d20 	.word	0x7a484d20
    63f4:	00000020 	.word	0x00000020
    63f8:	35313920 	.word	0x35313920
    63fc:	7a484d20 	.word	0x7a484d20
    6400:	00000020 	.word	0x00000020
    6404:	342e3220 	.word	0x342e3220
    6408:	48472035 	.word	0x48472035
    640c:	0000207a 	.word	0x0000207a
    6410:	00004d5a 	.word	0x00004d5a
    6414:	00004dd2 	.word	0x00004dd2
    6418:	00004dd2 	.word	0x00004dd2
    641c:	00004d78 	.word	0x00004d78
    6420:	00004d72 	.word	0x00004d72
    6424:	00004d7e 	.word	0x00004d7e
    6428:	00004d60 	.word	0x00004d60
    642c:	00004d84 	.word	0x00004d84
    6430:	00004db8 	.word	0x00004db8
    6434:	00004f78 	.word	0x00004f78
    6438:	00004fc8 	.word	0x00004fc8
    643c:	00004fc8 	.word	0x00004fc8
    6440:	00004fc4 	.word	0x00004fc4
    6444:	00004f6a 	.word	0x00004f6a
    6448:	00004f8a 	.word	0x00004f8a
    644c:	00004f5a 	.word	0x00004f5a
    6450:	00004f9c 	.word	0x00004f9c
    6454:	00004fae 	.word	0x00004fae

00006458 <_init>:
    6458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    645a:	46c0      	nop			; (mov r8, r8)
    645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    645e:	bc08      	pop	{r3}
    6460:	469e      	mov	lr, r3
    6462:	4770      	bx	lr

00006464 <__init_array_start>:
    6464:	000000dd 	.word	0x000000dd

00006468 <_fini>:
    6468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    646a:	46c0      	nop			; (mov r8, r8)
    646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    646e:	bc08      	pop	{r3}
    6470:	469e      	mov	lr, r3
    6472:	4770      	bx	lr

00006474 <__fini_array_start>:
    6474:	000000b5 	.word	0x000000b5
