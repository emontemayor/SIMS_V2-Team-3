
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a7c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00002a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f4  2000000c  00002a88  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000100  00002b7c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002fe4b  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c8d  00000000  00000000  0004fed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006d34  00000000  00000000  00053b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005b0  00000000  00000000  0005a899  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008c8  00000000  00000000  0005ae49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000684c  00000000  00000000  0005b711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d82b  00000000  00000000  00061f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d286  00000000  00000000  0006f788  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e44  00000000  00000000  000fca10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 21 00 20 91 25 00 00 8d 25 00 00 8d 25 00 00     .!. .%...%...%..
	...
      2c:	8d 25 00 00 00 00 00 00 00 00 00 00 8d 25 00 00     .%...........%..
      3c:	8d 25 00 00 8d 25 00 00 8d 25 00 00 8d 25 00 00     .%...%...%...%..
      4c:	8d 25 00 00 8d 25 00 00 8d 25 00 00 8d 25 00 00     .%...%...%...%..
      5c:	8d 25 00 00 8d 25 00 00 d5 1e 00 00 e5 1e 00 00     .%...%..........
      6c:	f5 1e 00 00 05 1f 00 00 15 1f 00 00 25 1f 00 00     ............%...
      7c:	8d 25 00 00 8d 25 00 00 8d 25 00 00 8d 25 00 00     .%...%...%...%..
      8c:	8d 25 00 00 8d 25 00 00 8d 25 00 00 8d 25 00 00     .%...%...%...%..
      9c:	8d 25 00 00 8d 25 00 00 8d 25 00 00 8d 25 00 00     .%...%...%...%..
      ac:	8d 25 00 00 00 00 00 00                             .%......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00002a7c 	.word	0x00002a7c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00002a7c 	.word	0x00002a7c
     10c:	00002a7c 	.word	0x00002a7c
     110:	00000000 	.word	0x00000000

00000114 <spi40_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for the 40 MHz module
 */
void spi40_init(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b091      	sub	sp, #68	; 0x44
	if (spi40InitComp == true)
     118:	4b31      	ldr	r3, [pc, #196]	; (1e0 <spi40_init+0xcc>)
     11a:	781b      	ldrb	r3, [r3, #0]
     11c:	2b00      	cmp	r3, #0
     11e:	d001      	beq.n	124 <spi40_init+0x10>
	spi40SlaveConf.ss_pin = SS40;
	// attach the slave configs to the slave
	spi_attach_slave(&spi40Slave, &spi40SlaveConf);
    
    spi40InitComp = true;
}
     120:	b011      	add	sp, #68	; 0x44
     122:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     124:	ac02      	add	r4, sp, #8
     126:	2601      	movs	r6, #1
     128:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     12a:	2500      	movs	r5, #0
     12c:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     12e:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     130:	23c0      	movs	r3, #192	; 0xc0
     132:	039b      	lsls	r3, r3, #14
     134:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     136:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     138:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     13a:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     13c:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     13e:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     140:	2724      	movs	r7, #36	; 0x24
     142:	55e5      	strb	r5, [r4, r7]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     144:	220c      	movs	r2, #12
     146:	2100      	movs	r1, #0
     148:	a808      	add	r0, sp, #32
     14a:	4b26      	ldr	r3, [pc, #152]	; (1e4 <spi40_init+0xd0>)
     14c:	4798      	blx	r3
    spi40MasterConf.mux_setting = SPI40_PINXMUX;
     14e:	238c      	movs	r3, #140	; 0x8c
     150:	039b      	lsls	r3, r3, #14
     152:	60e3      	str	r3, [r4, #12]
    spi40MasterConf.pinmux_pad0 = MOSI40;
     154:	4b24      	ldr	r3, [pc, #144]	; (1e8 <spi40_init+0xd4>)
     156:	62a3      	str	r3, [r4, #40]	; 0x28
    spi40MasterConf.pinmux_pad1 = SCK40;
     158:	4b24      	ldr	r3, [pc, #144]	; (1ec <spi40_init+0xd8>)
     15a:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi40MasterConf.pinmux_pad2 = PINMUX_UNUSED;
     15c:	2301      	movs	r3, #1
     15e:	425b      	negs	r3, r3
     160:	6323      	str	r3, [r4, #48]	; 0x30
    spi40MasterConf.pinmux_pad3 = MISO40;
     162:	4b23      	ldr	r3, [pc, #140]	; (1f0 <spi40_init+0xdc>)
     164:	6363      	str	r3, [r4, #52]	; 0x34
	spi40MasterConf.generator_source = SPI40_CLK;
     166:	55e5      	strb	r5, [r4, r7]
	spi40MasterConf.mode_specific.master.baudrate = SPI40MAXCLK;
     168:	4b22      	ldr	r3, [pc, #136]	; (1f4 <spi40_init+0xe0>)
     16a:	61a3      	str	r3, [r4, #24]
	spi_init(&spi40Master, SPI40, &spi40MasterConf);
     16c:	4d22      	ldr	r5, [pc, #136]	; (1f8 <spi40_init+0xe4>)
     16e:	0022      	movs	r2, r4
     170:	4922      	ldr	r1, [pc, #136]	; (1fc <spi40_init+0xe8>)
     172:	0028      	movs	r0, r5
     174:	4b22      	ldr	r3, [pc, #136]	; (200 <spi40_init+0xec>)
     176:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     178:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     17a:	0020      	movs	r0, r4
     17c:	4b21      	ldr	r3, [pc, #132]	; (204 <spi40_init+0xf0>)
     17e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     180:	231f      	movs	r3, #31
     182:	4018      	ands	r0, r3
     184:	4086      	lsls	r6, r0
     186:	4b20      	ldr	r3, [pc, #128]	; (208 <spi40_init+0xf4>)
     188:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     18a:	4b1b      	ldr	r3, [pc, #108]	; (1f8 <spi40_init+0xe4>)
     18c:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     18e:	69db      	ldr	r3, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     190:	2b00      	cmp	r3, #0
     192:	d1fa      	bne.n	18a <spi40_init+0x76>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     194:	6823      	ldr	r3, [r4, #0]
     196:	2202      	movs	r2, #2
     198:	4313      	orrs	r3, r2
     19a:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     19c:	2300      	movs	r3, #0
	slave->ss_pin          = config->ss_pin;
     19e:	4c1b      	ldr	r4, [pc, #108]	; (20c <spi40_init+0xf8>)
     1a0:	320f      	adds	r2, #15
     1a2:	7022      	strb	r2, [r4, #0]
	slave->address_enabled = config->address_enabled;
     1a4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     1a6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1a8:	3a10      	subs	r2, #16
     1aa:	4669      	mov	r1, sp
     1ac:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     1ae:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     1b0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     1b2:	2011      	movs	r0, #17
     1b4:	4b16      	ldr	r3, [pc, #88]	; (210 <spi40_init+0xfc>)
     1b6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     1b8:	7821      	ldrb	r1, [r4, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     1ba:	09ca      	lsrs	r2, r1, #7
	uint8_t group_index = (gpio_pin / 32);
     1bc:	094b      	lsrs	r3, r1, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1be:	2a00      	cmp	r2, #0
     1c0:	d10c      	bne.n	1dc <spi40_init+0xc8>
		return &(ports[port_index]->Group[group_index]);
     1c2:	01db      	lsls	r3, r3, #7
     1c4:	4a13      	ldr	r2, [pc, #76]	; (214 <spi40_init+0x100>)
     1c6:	4694      	mov	ip, r2
     1c8:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1ca:	221f      	movs	r2, #31
     1cc:	400a      	ands	r2, r1
     1ce:	2101      	movs	r1, #1
     1d0:	0008      	movs	r0, r1
     1d2:	4090      	lsls	r0, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1d4:	6198      	str	r0, [r3, #24]
    spi40InitComp = true;
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <spi40_init+0xcc>)
     1d8:	7019      	strb	r1, [r3, #0]
     1da:	e7a1      	b.n	120 <spi40_init+0xc>
	} else {
		Assert(false);
		return NULL;
     1dc:	2300      	movs	r3, #0
     1de:	e7f4      	b.n	1ca <spi40_init+0xb6>
     1e0:	20000028 	.word	0x20000028
     1e4:	000029e3 	.word	0x000029e3
     1e8:	00100002 	.word	0x00100002
     1ec:	00130002 	.word	0x00130002
     1f0:	00120002 	.word	0x00120002
     1f4:	000f4240 	.word	0x000f4240
     1f8:	200000a4 	.word	0x200000a4
     1fc:	42000c00 	.word	0x42000c00
     200:	000014c9 	.word	0x000014c9
     204:	00001eb1 	.word	0x00001eb1
     208:	e000e100 	.word	0xe000e100
     20c:	200000e0 	.word	0x200000e0
     210:	00000a41 	.word	0x00000a41
     214:	41004400 	.word	0x41004400

00000218 <spi40_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Begins a SPI transfer with the 40 MHz module. Sends the
 *  starting address of the read/write and reads the status bits of the module.
 */
status_code_genare_t spi40_start_xfer(spiAddr40 paramAddr, xferDir40 dir)
{
     218:	b510      	push	{r4, lr}
     21a:	b082      	sub	sp, #8
    
    status_code_genare_t read_status;

    // set the upper nibble of the address to all ones
    paramAddr |= 0xF000;
     21c:	4b10      	ldr	r3, [pc, #64]	; (260 <spi40_start_xfer+0x48>)
     21e:	4318      	orrs	r0, r3
     220:	b280      	uxth	r0, r0
     222:	466b      	mov	r3, sp
     224:	80d8      	strh	r0, [r3, #6]
    
    if(dir == READ)
     226:	2900      	cmp	r1, #0
     228:	d103      	bne.n	232 <spi40_start_xfer+0x1a>
    {
        //clear the MSB of the address if it's a read
        paramAddr &= 0x7FFF;
     22a:	0440      	lsls	r0, r0, #17
     22c:	0c40      	lsrs	r0, r0, #17
     22e:	466b      	mov	r3, sp
     230:	80d8      	strh	r0, [r3, #6]
    }        
    // else leave it unchanged, because the MSB = 1 if it's a write
    
    // swap the address bytes so the most significant byte is transferred first
    paramAddr = ((paramAddr >> 8) & 0x00FF) | (paramAddr << 8);
     232:	466b      	mov	r3, sp
     234:	1d9a      	adds	r2, r3, #6
     236:	88db      	ldrh	r3, [r3, #6]
     238:	0219      	lsls	r1, r3, #8
     23a:	0a1b      	lsrs	r3, r3, #8
     23c:	430b      	orrs	r3, r1
     23e:	8013      	strh	r3, [r2, #0]
    
    do{
        // select the slave
        read_status = spi_select_slave(&spi40Master, &spi40Slave, true);
     240:	2201      	movs	r2, #1
     242:	4908      	ldr	r1, [pc, #32]	; (264 <spi40_start_xfer+0x4c>)
     244:	4808      	ldr	r0, [pc, #32]	; (268 <spi40_start_xfer+0x50>)
     246:	4b09      	ldr	r3, [pc, #36]	; (26c <spi40_start_xfer+0x54>)
     248:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
     24a:	2805      	cmp	r0, #5
     24c:	d0f8      	beq.n	240 <spi40_start_xfer+0x28>
    
    /* perform a SPI transceive (write AND read). Write the param address and
     * read the status bits from the module */
    read_status = spi_transceive_buffer_wait(&spi40Master, (uint8_t*) &paramAddr, 
     24e:	2302      	movs	r3, #2
     250:	4a07      	ldr	r2, [pc, #28]	; (270 <spi40_start_xfer+0x58>)
     252:	4669      	mov	r1, sp
     254:	3106      	adds	r1, #6
     256:	4804      	ldr	r0, [pc, #16]	; (268 <spi40_start_xfer+0x50>)
     258:	4c06      	ldr	r4, [pc, #24]	; (274 <spi40_start_xfer+0x5c>)
     25a:	47a0      	blx	r4
                    (uint8_t*) &spi40_status_bits, 2);
    
    return read_status;
}
     25c:	b002      	add	sp, #8
     25e:	bd10      	pop	{r4, pc}
     260:	fffff000 	.word	0xfffff000
     264:	200000e0 	.word	0x200000e0
     268:	200000a4 	.word	0x200000a4
     26c:	000016b1 	.word	0x000016b1
     270:	2000002a 	.word	0x2000002a
     274:	00001999 	.word	0x00001999

00000278 <spi40_stop_xfer>:
 * Parameters       : void
 * Return Values(s) : ASF general status code
 * Description      : Stops a transfer, i.e. releases slave select.
 */
status_code_genare_t spi40_stop_xfer(void)
{
     278:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&spi40Master, &spi40Slave, false);
     27a:	2200      	movs	r2, #0
     27c:	4902      	ldr	r1, [pc, #8]	; (288 <spi40_stop_xfer+0x10>)
     27e:	4803      	ldr	r0, [pc, #12]	; (28c <spi40_stop_xfer+0x14>)
     280:	4b03      	ldr	r3, [pc, #12]	; (290 <spi40_stop_xfer+0x18>)
     282:	4798      	blx	r3
}
     284:	bd10      	pop	{r4, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	200000e0 	.word	0x200000e0
     28c:	200000a4 	.word	0x200000a4
     290:	000016b1 	.word	0x000016b1

00000294 <spi40_read>:
 * Description      : Reads a number of bytes specified by amount_bytes into
 *  read_buff. Used with spi40_start_xfer and spi40_stop_xfer().
 */
status_code_genare_t spi40_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
     294:	b510      	push	{r4, lr}
     296:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&spi40Master, \
     298:	2300      	movs	r3, #0
     29a:	0001      	movs	r1, r0
     29c:	4801      	ldr	r0, [pc, #4]	; (2a4 <spi40_read+0x10>)
     29e:	4c02      	ldr	r4, [pc, #8]	; (2a8 <spi40_read+0x14>)
     2a0:	47a0      	blx	r4
    read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
     2a2:	bd10      	pop	{r4, pc}
     2a4:	200000a4 	.word	0x200000a4
     2a8:	000015b5 	.word	0x000015b5

000002ac <spi40_rd8>:
 * Parameters       : read_addr (address to read from)
 * Return Values(s) : a byte
 * Description      : Reads a single byte from the 40 MHz module at read_addr.
 */
uint8_t spi40_rd8(spiAddr40 read_addr)
{
     2ac:	b510      	push	{r4, lr}
     2ae:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
     2b0:	466b      	mov	r3, sp
     2b2:	1ddc      	adds	r4, r3, #7
     2b4:	2300      	movs	r3, #0
     2b6:	7023      	strb	r3, [r4, #0]
    
    spi40_start_xfer(read_addr, READ);
     2b8:	2100      	movs	r1, #0
     2ba:	4b05      	ldr	r3, [pc, #20]	; (2d0 <spi40_rd8+0x24>)
     2bc:	4798      	blx	r3
  
    // read one byte
    spi40_read(&read_byte, 1);
     2be:	2101      	movs	r1, #1
     2c0:	0020      	movs	r0, r4
     2c2:	4b04      	ldr	r3, [pc, #16]	; (2d4 <spi40_rd8+0x28>)
     2c4:	4798      	blx	r3
    
    spi40_stop_xfer();
     2c6:	4b04      	ldr	r3, [pc, #16]	; (2d8 <spi40_rd8+0x2c>)
     2c8:	4798      	blx	r3
    
    return read_byte;
     2ca:	7820      	ldrb	r0, [r4, #0]
}
     2cc:	b002      	add	sp, #8
     2ce:	bd10      	pop	{r4, pc}
     2d0:	00000219 	.word	0x00000219
     2d4:	00000295 	.word	0x00000295
     2d8:	00000279 	.word	0x00000279

000002dc <spi40_write>:
 * Description      : Writes a number of bytes specified by amount_bytes to
 *  the 40 MHz module. Used with spi40_start_xfer and spi40_stop_xfer().
 */
status_code_genare_t spi40_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
     2dc:	b510      	push	{r4, lr}
     2de:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&spi40Master, \
     2e0:	0001      	movs	r1, r0
     2e2:	4802      	ldr	r0, [pc, #8]	; (2ec <spi40_write+0x10>)
     2e4:	4b02      	ldr	r3, [pc, #8]	; (2f0 <spi40_write+0x14>)
     2e6:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
}
     2e8:	bd10      	pop	{r4, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	200000a4 	.word	0x200000a4
     2f0:	000017ad 	.word	0x000017ad

000002f4 <spi40_wr8>:
 * Parameters       : wrt_addr (address to write to), wrt_byte
 * Return Values(s) : ASF general status code
 * Description      : Writes a single byte to the 40 MHz module at wrt_addr.
 */
status_code_genare_t spi40_wr8(spiAddr40 wrt_addr, uint8_t wrt_byte)
{
     2f4:	b510      	push	{r4, lr}
     2f6:	b082      	sub	sp, #8
     2f8:	466b      	mov	r3, sp
     2fa:	1ddc      	adds	r4, r3, #7
     2fc:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    spi40_start_xfer(wrt_addr, WRT);
     2fe:	2101      	movs	r1, #1
     300:	4b05      	ldr	r3, [pc, #20]	; (318 <spi40_wr8+0x24>)
     302:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = spi40_write(&wrt_byte, 1);
     304:	2101      	movs	r1, #1
     306:	0020      	movs	r0, r4
     308:	4b04      	ldr	r3, [pc, #16]	; (31c <spi40_wr8+0x28>)
     30a:	4798      	blx	r3
     30c:	0004      	movs	r4, r0
    
    spi40_stop_xfer();
     30e:	4b04      	ldr	r3, [pc, #16]	; (320 <spi40_wr8+0x2c>)
     310:	4798      	blx	r3
    
    return status_result;
}
     312:	0020      	movs	r0, r4
     314:	b002      	add	sp, #8
     316:	bd10      	pop	{r4, pc}
     318:	00000219 	.word	0x00000219
     31c:	000002dd 	.word	0x000002dd
     320:	00000279 	.word	0x00000279

00000324 <spi40_autorange>:
 * Return Values(s) : void
 * Description      : Performs autoranging on the AX5043 PLL. See
 *  pg13 of the AX043 programmer's manual for more information.
 */
void spi40_autorange(void)
{
     324:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_PLLRANGINGA, 0x18);
     326:	2118      	movs	r1, #24
     328:	2033      	movs	r0, #51	; 0x33
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <spi40_autorange+0x18>)
     32c:	4798      	blx	r3
    
    while(spi40_rd8(AX5043_PLLRANGINGA) & 0x10);   
     32e:	2033      	movs	r0, #51	; 0x33
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <spi40_autorange+0x1c>)
     332:	4798      	blx	r3
     334:	06c3      	lsls	r3, r0, #27
     336:	d4fa      	bmi.n	32e <spi40_autorange+0xa>
    
}
     338:	bd10      	pop	{r4, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	000002f5 	.word	0x000002f5
     340:	000002ad 	.word	0x000002ad

00000344 <spi40_rx_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes a 40 MHz module for transmitting.
 */
void spi40_rx_init(void)
{
     344:	b510      	push	{r4, lr}
    // set power mode to standby
    spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
     346:	2165      	movs	r1, #101	; 0x65
     348:	2002      	movs	r0, #2
     34a:	4cfe      	ldr	r4, [pc, #1016]	; (744 <spi40_rx_init+0x400>)
     34c:	47a0      	blx	r4
    delay_ms(100);
     34e:	2064      	movs	r0, #100	; 0x64
     350:	4bfd      	ldr	r3, [pc, #1012]	; (748 <spi40_rx_init+0x404>)
     352:	4798      	blx	r3
    
    spi40_wr8(AX5043_MODULATION, 0x08);
     354:	2108      	movs	r1, #8
     356:	2010      	movs	r0, #16
     358:	47a0      	blx	r4
    spi40_wr8(AX5043_ENCODING, 0x00);
     35a:	2100      	movs	r1, #0
     35c:	2011      	movs	r0, #17
     35e:	47a0      	blx	r4
    spi40_wr8(AX5043_FRAMING, 0x06);
     360:	2106      	movs	r1, #6
     362:	2012      	movs	r0, #18
     364:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCSYSCLK, 0x02);
     366:	2102      	movs	r1, #2
     368:	2021      	movs	r0, #33	; 0x21
     36a:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCDCLK, 0x02);
     36c:	2102      	movs	r1, #2
     36e:	2022      	movs	r0, #34	; 0x22
     370:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCDATA, 0x02);
     372:	2102      	movs	r1, #2
     374:	2023      	movs	r0, #35	; 0x23
     376:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCANTSEL, 0x02);
     378:	2102      	movs	r1, #2
     37a:	2025      	movs	r0, #37	; 0x25
     37c:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCPWRAMP, 0x02);
     37e:	2102      	movs	r1, #2
     380:	2026      	movs	r0, #38	; 0x26
     382:	47a0      	blx	r4
    spi40_wr8(AX5043_WAKEUPXOEARLY, 0x01);
     384:	2101      	movs	r1, #1
     386:	206e      	movs	r0, #110	; 0x6e
     388:	47a0      	blx	r4
    spi40_wr8(AX5043_IFFREQ1, 0x06);
     38a:	2106      	movs	r1, #6
     38c:	2080      	movs	r0, #128	; 0x80
     38e:	0040      	lsls	r0, r0, #1
     390:	47a0      	blx	r4
    spi40_wr8(AX5043_IFFREQ0, 0x66);
     392:	2166      	movs	r1, #102	; 0x66
     394:	2002      	movs	r0, #2
     396:	30ff      	adds	r0, #255	; 0xff
     398:	47a0      	blx	r4
    spi40_wr8(AX5043_DECIMATION, 0x05);
     39a:	2105      	movs	r1, #5
     39c:	2081      	movs	r0, #129	; 0x81
     39e:	0040      	lsls	r0, r0, #1
     3a0:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE2, 0x05);
     3a2:	2105      	movs	r1, #5
     3a4:	2004      	movs	r0, #4
     3a6:	30ff      	adds	r0, #255	; 0xff
     3a8:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE1, 0x35);
     3aa:	2135      	movs	r1, #53	; 0x35
     3ac:	2082      	movs	r0, #130	; 0x82
     3ae:	0040      	lsls	r0, r0, #1
     3b0:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE0, 0x55);
     3b2:	2155      	movs	r1, #85	; 0x55
     3b4:	2006      	movs	r0, #6
     3b6:	30ff      	adds	r0, #255	; 0xff
     3b8:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET2, 0x00);
     3ba:	2100      	movs	r1, #0
     3bc:	2083      	movs	r0, #131	; 0x83
     3be:	0040      	lsls	r0, r0, #1
     3c0:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET1, 0x00);
     3c2:	2100      	movs	r1, #0
     3c4:	2008      	movs	r0, #8
     3c6:	30ff      	adds	r0, #255	; 0xff
     3c8:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET0, 0x00);
     3ca:	2100      	movs	r1, #0
     3cc:	2084      	movs	r0, #132	; 0x84
     3ce:	0040      	lsls	r0, r0, #1
     3d0:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET2, 0x80);
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	200a      	movs	r0, #10
     3d6:	30ff      	adds	r0, #255	; 0xff
     3d8:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET1, 0x29);
     3da:	2129      	movs	r1, #41	; 0x29
     3dc:	2085      	movs	r0, #133	; 0x85
     3de:	0040      	lsls	r0, r0, #1
     3e0:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET0, 0x89);
     3e2:	2189      	movs	r1, #137	; 0x89
     3e4:	200c      	movs	r0, #12
     3e6:	30ff      	adds	r0, #255	; 0xff
     3e8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMAX1, 0x22);
     3ea:	2122      	movs	r1, #34	; 0x22
     3ec:	2086      	movs	r0, #134	; 0x86
     3ee:	0040      	lsls	r0, r0, #1
     3f0:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMAX0, 0xC0);
     3f2:	21c0      	movs	r1, #192	; 0xc0
     3f4:	200e      	movs	r0, #14
     3f6:	30ff      	adds	r0, #255	; 0xff
     3f8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMIN1, 0xDD);
     3fa:	21dd      	movs	r1, #221	; 0xdd
     3fc:	2087      	movs	r0, #135	; 0x87
     3fe:	0040      	lsls	r0, r0, #1
     400:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMIN0, 0x40);
     402:	2140      	movs	r1, #64	; 0x40
     404:	2010      	movs	r0, #16
     406:	30ff      	adds	r0, #255	; 0xff
     408:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLFILTER, 0x00);
     40a:	2100      	movs	r1, #0
     40c:	2016      	movs	r0, #22
     40e:	30ff      	adds	r0, #255	; 0xff
     410:	47a0      	blx	r4
    spi40_wr8(AX5043_RXPARAMSETS, 0xF4);
     412:	21f4      	movs	r1, #244	; 0xf4
     414:	2018      	movs	r0, #24
     416:	30ff      	adds	r0, #255	; 0xff
     418:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN0, 0xE8);
     41a:	21e8      	movs	r1, #232	; 0xe8
     41c:	2090      	movs	r0, #144	; 0x90
     41e:	0040      	lsls	r0, r0, #1
     420:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET0, 0x8F); //org val: 0x84
     422:	218f      	movs	r1, #143	; 0x8f
     424:	2022      	movs	r0, #34	; 0x22
     426:	30ff      	adds	r0, #255	; 0xff
     428:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST0, 0x00); 
     42a:	2100      	movs	r1, #0
     42c:	2091      	movs	r0, #145	; 0x91
     42e:	0040      	lsls	r0, r0, #1
     430:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN0, 0xAD);
     432:	21ad      	movs	r1, #173	; 0xad
     434:	2092      	movs	r0, #146	; 0x92
     436:	0040      	lsls	r0, r0, #1
     438:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN0, 0xA7);
     43a:	21a7      	movs	r1, #167	; 0xa7
     43c:	2026      	movs	r0, #38	; 0x26
     43e:	30ff      	adds	r0, #255	; 0xff
     440:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN0, 0xC3);
     442:	21c3      	movs	r1, #195	; 0xc3
     444:	2093      	movs	r0, #147	; 0x93
     446:	0040      	lsls	r0, r0, #1
     448:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA0, 0x0F);
     44a:	210f      	movs	r1, #15
     44c:	2028      	movs	r0, #40	; 0x28
     44e:	30ff      	adds	r0, #255	; 0xff
     450:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB0, 0x1F);
     452:	211f      	movs	r1, #31
     454:	2094      	movs	r0, #148	; 0x94
     456:	0040      	lsls	r0, r0, #1
     458:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC0, 0x0A);
     45a:	210a      	movs	r1, #10
     45c:	202a      	movs	r0, #42	; 0x2a
     45e:	30ff      	adds	r0, #255	; 0xff
     460:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND0, 0x0A);
     462:	210a      	movs	r1, #10
     464:	2095      	movs	r0, #149	; 0x95
     466:	0040      	lsls	r0, r0, #1
     468:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN0, 0x01); //org val: 0x06
     46a:	2101      	movs	r1, #1
     46c:	202c      	movs	r0, #44	; 0x2c
     46e:	30ff      	adds	r0, #255	; 0xff
     470:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV10, 0x00);
     472:	2100      	movs	r1, #0
     474:	2096      	movs	r0, #150	; 0x96
     476:	0040      	lsls	r0, r0, #1
     478:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV00, 0x00);
     47a:	2100      	movs	r1, #0
     47c:	202e      	movs	r0, #46	; 0x2e
     47e:	30ff      	adds	r0, #255	; 0xff
     480:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK0, 0x16); //org value: 0x16
     482:	2116      	movs	r1, #22
     484:	2097      	movs	r0, #151	; 0x97
     486:	0040      	lsls	r0, r0, #1
     488:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES0, 0x00);
     48a:	2100      	movs	r1, #0
     48c:	2030      	movs	r0, #48	; 0x30
     48e:	30ff      	adds	r0, #255	; 0xff
     490:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN1, 0xE8);
     492:	21e8      	movs	r1, #232	; 0xe8
     494:	2098      	movs	r0, #152	; 0x98
     496:	0040      	lsls	r0, r0, #1
     498:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET1, 0x8F); //org val: 0x84
     49a:	218f      	movs	r1, #143	; 0x8f
     49c:	2032      	movs	r0, #50	; 0x32
     49e:	30ff      	adds	r0, #255	; 0xff
     4a0:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST1, 0x00); 
     4a2:	2100      	movs	r1, #0
     4a4:	2099      	movs	r0, #153	; 0x99
     4a6:	0040      	lsls	r0, r0, #1
     4a8:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX1, 0x00);
     4aa:	2100      	movs	r1, #0
     4ac:	2034      	movs	r0, #52	; 0x34
     4ae:	30ff      	adds	r0, #255	; 0xff
     4b0:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN1, 0xAB);
     4b2:	21ab      	movs	r1, #171	; 0xab
     4b4:	209a      	movs	r0, #154	; 0x9a
     4b6:	0040      	lsls	r0, r0, #1
     4b8:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN1, 0xA6);
     4ba:	21a6      	movs	r1, #166	; 0xa6
     4bc:	2036      	movs	r0, #54	; 0x36
     4be:	30ff      	adds	r0, #255	; 0xff
     4c0:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN1, 0xC3);
     4c2:	21c3      	movs	r1, #195	; 0xc3
     4c4:	209b      	movs	r0, #155	; 0x9b
     4c6:	0040      	lsls	r0, r0, #1
     4c8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA1, 0x0F);
     4ca:	210f      	movs	r1, #15
     4cc:	2038      	movs	r0, #56	; 0x38
     4ce:	30ff      	adds	r0, #255	; 0xff
     4d0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB1, 0x1F);
     4d2:	211f      	movs	r1, #31
     4d4:	209c      	movs	r0, #156	; 0x9c
     4d6:	0040      	lsls	r0, r0, #1
     4d8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC1, 0x0A);
     4da:	210a      	movs	r1, #10
     4dc:	203a      	movs	r0, #58	; 0x3a
     4de:	30ff      	adds	r0, #255	; 0xff
     4e0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND1, 0x0A);
     4e2:	210a      	movs	r1, #10
     4e4:	209d      	movs	r0, #157	; 0x9d
     4e6:	0040      	lsls	r0, r0, #1
     4e8:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN1, 0x01); //org val: 0x06
     4ea:	2101      	movs	r1, #1
     4ec:	203c      	movs	r0, #60	; 0x3c
     4ee:	30ff      	adds	r0, #255	; 0xff
     4f0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV11, 0x00);
     4f2:	2100      	movs	r1, #0
     4f4:	209e      	movs	r0, #158	; 0x9e
     4f6:	0040      	lsls	r0, r0, #1
     4f8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV01, 0x4B);
     4fa:	214b      	movs	r1, #75	; 0x4b
     4fc:	203e      	movs	r0, #62	; 0x3e
     4fe:	30ff      	adds	r0, #255	; 0xff
     500:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK1, 0x16); //org value: 0x16
     502:	2116      	movs	r1, #22
     504:	209f      	movs	r0, #159	; 0x9f
     506:	0040      	lsls	r0, r0, #1
     508:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES1, 0x00);
     50a:	2100      	movs	r1, #0
     50c:	2040      	movs	r0, #64	; 0x40
     50e:	30ff      	adds	r0, #255	; 0xff
     510:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN3, 0xFF);
     512:	21ff      	movs	r1, #255	; 0xff
     514:	20a8      	movs	r0, #168	; 0xa8
     516:	0040      	lsls	r0, r0, #1
     518:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET3, 0x8F); //org val: 0x84
     51a:	218f      	movs	r1, #143	; 0x8f
     51c:	2052      	movs	r0, #82	; 0x52
     51e:	30ff      	adds	r0, #255	; 0xff
     520:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST3, 0x00); 
     522:	2100      	movs	r1, #0
     524:	20a9      	movs	r0, #169	; 0xa9
     526:	0040      	lsls	r0, r0, #1
     528:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX3, 0x00);
     52a:	2100      	movs	r1, #0
     52c:	2054      	movs	r0, #84	; 0x54
     52e:	30ff      	adds	r0, #255	; 0xff
     530:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN3, 0xAA);
     532:	21aa      	movs	r1, #170	; 0xaa
     534:	20aa      	movs	r0, #170	; 0xaa
     536:	0040      	lsls	r0, r0, #1
     538:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN3, 0xA5);
     53a:	21a5      	movs	r1, #165	; 0xa5
     53c:	2056      	movs	r0, #86	; 0x56
     53e:	30ff      	adds	r0, #255	; 0xff
     540:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN3, 0xC3);
     542:	21c3      	movs	r1, #195	; 0xc3
     544:	20ab      	movs	r0, #171	; 0xab
     546:	0040      	lsls	r0, r0, #1
     548:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA3, 0x0F);
     54a:	210f      	movs	r1, #15
     54c:	2058      	movs	r0, #88	; 0x58
     54e:	30ff      	adds	r0, #255	; 0xff
     550:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB3, 0x1F);
     552:	211f      	movs	r1, #31
     554:	20ac      	movs	r0, #172	; 0xac
     556:	0040      	lsls	r0, r0, #1
     558:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC3, 0x0D);
     55a:	210d      	movs	r1, #13
     55c:	205a      	movs	r0, #90	; 0x5a
     55e:	30ff      	adds	r0, #255	; 0xff
     560:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND3, 0x0D);
     562:	210d      	movs	r1, #13
     564:	20ad      	movs	r0, #173	; 0xad
     566:	0040      	lsls	r0, r0, #1
     568:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN3, 0x01); //org val: 0x06
     56a:	2101      	movs	r1, #1
     56c:	205c      	movs	r0, #92	; 0x5c
     56e:	30ff      	adds	r0, #255	; 0xff
     570:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV13, 0x00);
     572:	2100      	movs	r1, #0
     574:	20ae      	movs	r0, #174	; 0xae
     576:	0040      	lsls	r0, r0, #1
     578:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV03, 0x4B);
     57a:	214b      	movs	r1, #75	; 0x4b
     57c:	205e      	movs	r0, #94	; 0x5e
     57e:	30ff      	adds	r0, #255	; 0xff
     580:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK3, 0x16); //org value: 0x16
     582:	2116      	movs	r1, #22
     584:	20af      	movs	r0, #175	; 0xaf
     586:	0040      	lsls	r0, r0, #1
     588:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES3, 0x00);
     58a:	2100      	movs	r1, #0
     58c:	2060      	movs	r0, #96	; 0x60
     58e:	30ff      	adds	r0, #255	; 0xff
     590:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGF, 0x00);
     592:	2100      	movs	r1, #0
     594:	20b0      	movs	r0, #176	; 0xb0
     596:	0040      	lsls	r0, r0, #1
     598:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV2, 0x00);
     59a:	2100      	movs	r1, #0
     59c:	2062      	movs	r0, #98	; 0x62
     59e:	30ff      	adds	r0, #255	; 0xff
     5a0:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV1, 0x02);
     5a2:	2102      	movs	r1, #2
     5a4:	20b1      	movs	r0, #177	; 0xb1
     5a6:	0040      	lsls	r0, r0, #1
     5a8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV0, 0x0C);
     5aa:	210c      	movs	r1, #12
     5ac:	2064      	movs	r0, #100	; 0x64
     5ae:	30ff      	adds	r0, #255	; 0xff
     5b0:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGA, 0x05);
     5b2:	2105      	movs	r1, #5
     5b4:	20b2      	movs	r0, #178	; 0xb2
     5b6:	0040      	lsls	r0, r0, #1
     5b8:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE2, 0x00);
     5ba:	2100      	movs	r1, #0
     5bc:	2066      	movs	r0, #102	; 0x66
     5be:	30ff      	adds	r0, #255	; 0xff
     5c0:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE1, 0x04);
     5c2:	2104      	movs	r1, #4
     5c4:	20b3      	movs	r0, #179	; 0xb3
     5c6:	0040      	lsls	r0, r0, #1
     5c8:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE0, 0xEA);
     5ca:	21ea      	movs	r1, #234	; 0xea
     5cc:	2068      	movs	r0, #104	; 0x68
     5ce:	30ff      	adds	r0, #255	; 0xff
     5d0:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB1, 0x02);
     5d2:	2102      	movs	r1, #2
     5d4:	20b5      	movs	r0, #181	; 0xb5
     5d6:	0040      	lsls	r0, r0, #1
     5d8:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB0, 0x07);
     5da:	2107      	movs	r1, #7
     5dc:	206c      	movs	r0, #108	; 0x6c
     5de:	30ff      	adds	r0, #255	; 0xff
     5e0:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCOI, 0x8A);
     5e2:	218a      	movs	r1, #138	; 0x8a
     5e4:	20c0      	movs	r0, #192	; 0xc0
     5e6:	0040      	lsls	r0, r0, #1
     5e8:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLRNGCLK, 0x03);
     5ea:	2103      	movs	r1, #3
     5ec:	2084      	movs	r0, #132	; 0x84
     5ee:	30ff      	adds	r0, #255	; 0xff
     5f0:	47a0      	blx	r4
    spi40_wr8(AX5043_BBTUNE, 0x0F);
     5f2:	210f      	movs	r1, #15
     5f4:	20c4      	movs	r0, #196	; 0xc4
     5f6:	0040      	lsls	r0, r0, #1
     5f8:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSCAP, 0x77);
     5fa:	2177      	movs	r1, #119	; 0x77
     5fc:	208a      	movs	r0, #138	; 0x8a
     5fe:	30ff      	adds	r0, #255	; 0xff
     600:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTADDRCFG, 0x80);
     602:	2180      	movs	r1, #128	; 0x80
     604:	2080      	movs	r0, #128	; 0x80
     606:	0080      	lsls	r0, r0, #2
     608:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENCFG, 0x00);
     60a:	2100      	movs	r1, #0
     60c:	484f      	ldr	r0, [pc, #316]	; (74c <spi40_rx_init+0x408>)
     60e:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENOFFSET, 0x04);
     610:	2104      	movs	r1, #4
     612:	484f      	ldr	r0, [pc, #316]	; (750 <spi40_rx_init+0x40c>)
     614:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTMAXLEN, 0xC8);
     616:	21c8      	movs	r1, #200	; 0xc8
     618:	484e      	ldr	r0, [pc, #312]	; (754 <spi40_rx_init+0x410>)
     61a:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT3, 0xAA);
     61c:	21aa      	movs	r1, #170	; 0xaa
     61e:	2084      	movs	r0, #132	; 0x84
     620:	0080      	lsls	r0, r0, #2
     622:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT2, 0xCC);
     624:	21cc      	movs	r1, #204	; 0xcc
     626:	484c      	ldr	r0, [pc, #304]	; (758 <spi40_rx_init+0x414>)
     628:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT1, 0xAA);
     62a:	21aa      	movs	r1, #170	; 0xaa
     62c:	484b      	ldr	r0, [pc, #300]	; (75c <spi40_rx_init+0x418>)
     62e:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT0, 0xCC);
     630:	21cc      	movs	r1, #204	; 0xcc
     632:	484b      	ldr	r0, [pc, #300]	; (760 <spi40_rx_init+0x41c>)
     634:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0LEN, 0x9F);
     636:	219f      	movs	r1, #159	; 0x9f
     638:	2085      	movs	r0, #133	; 0x85
     63a:	0080      	lsls	r0, r0, #2
     63c:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0MAX, 0x1F);
     63e:	211f      	movs	r1, #31
     640:	4848      	ldr	r0, [pc, #288]	; (764 <spi40_rx_init+0x420>)
     642:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT1, 0x55);
     644:	2155      	movs	r1, #85	; 0x55
     646:	2086      	movs	r0, #134	; 0x86
     648:	0080      	lsls	r0, r0, #2
     64a:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT0, 0x55);
     64c:	2155      	movs	r1, #85	; 0x55
     64e:	4846      	ldr	r0, [pc, #280]	; (768 <spi40_rx_init+0x424>)
     650:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1LEN, 0x8A);
     652:	218a      	movs	r1, #138	; 0x8a
     654:	2087      	movs	r0, #135	; 0x87
     656:	0080      	lsls	r0, r0, #2
     658:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1MAX, 0x0A);
     65a:	210a      	movs	r1, #10
     65c:	4843      	ldr	r0, [pc, #268]	; (76c <spi40_rx_init+0x428>)
     65e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXBOOST, 0x32);
     660:	2132      	movs	r1, #50	; 0x32
     662:	2088      	movs	r0, #136	; 0x88
     664:	0080      	lsls	r0, r0, #2
     666:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXSETTLE, 0x14);
     668:	2114      	movs	r1, #20
     66a:	4841      	ldr	r0, [pc, #260]	; (770 <spi40_rx_init+0x42c>)
     66c:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXBOOST, 0x32);
     66e:	2132      	movs	r1, #50	; 0x32
     670:	4840      	ldr	r0, [pc, #256]	; (774 <spi40_rx_init+0x430>)
     672:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXSETTLE, 0x14);
     674:	2114      	movs	r1, #20
     676:	2089      	movs	r0, #137	; 0x89
     678:	0080      	lsls	r0, r0, #2
     67a:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXOFFSACQ, 0x00);
     67c:	2100      	movs	r1, #0
     67e:	483e      	ldr	r0, [pc, #248]	; (778 <spi40_rx_init+0x434>)
     680:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXCOARSEAGC, 0x73);
     682:	2173      	movs	r1, #115	; 0x73
     684:	483d      	ldr	r0, [pc, #244]	; (77c <spi40_rx_init+0x438>)
     686:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXRSSI, 0x03);
     688:	2103      	movs	r1, #3
     68a:	208a      	movs	r0, #138	; 0x8a
     68c:	0080      	lsls	r0, r0, #2
     68e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXPREAMBLE2, 0x35);
     690:	2135      	movs	r1, #53	; 0x35
     692:	483b      	ldr	r0, [pc, #236]	; (780 <spi40_rx_init+0x43c>)
     694:	47a0      	blx	r4
    spi40_wr8(AX5043_RSSIABSTHR, 0x84); //org val: 0xE6
     696:	2184      	movs	r1, #132	; 0x84
     698:	483a      	ldr	r0, [pc, #232]	; (784 <spi40_rx_init+0x440>)
     69a:	47a0      	blx	r4
    spi40_wr8(AX5043_BGNDRSSITHR, 0x84);
     69c:	2184      	movs	r1, #132	; 0x84
     69e:	483a      	ldr	r0, [pc, #232]	; (788 <spi40_rx_init+0x444>)
     6a0:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTCHUNKSIZE, 0x0D);
     6a2:	210d      	movs	r1, #13
     6a4:	208c      	movs	r0, #140	; 0x8c
     6a6:	0080      	lsls	r0, r0, #2
     6a8:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTACCEPTFLAGS, 0x20);
     6aa:	2120      	movs	r1, #32
     6ac:	4837      	ldr	r0, [pc, #220]	; (78c <spi40_rx_init+0x448>)
     6ae:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE1, 0x00);
     6b0:	2100      	movs	r1, #0
     6b2:	20cc      	movs	r0, #204	; 0xcc
     6b4:	0080      	lsls	r0, r0, #2
     6b6:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE0, 0x00);
     6b8:	2100      	movs	r1, #0
     6ba:	4835      	ldr	r0, [pc, #212]	; (790 <spi40_rx_init+0x44c>)
     6bc:	47a0      	blx	r4
    spi40_wr8(AX5043_DACCONFIG, 0x00);
     6be:	2100      	movs	r1, #0
     6c0:	4834      	ldr	r0, [pc, #208]	; (794 <spi40_rx_init+0x450>)
     6c2:	47a0      	blx	r4
    spi40_wr8(AX5043_REF, 0x03);
     6c4:	2103      	movs	r1, #3
     6c6:	4834      	ldr	r0, [pc, #208]	; (798 <spi40_rx_init+0x454>)
     6c8:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALOSC, 0x03);
     6ca:	2103      	movs	r1, #3
     6cc:	20f1      	movs	r0, #241	; 0xf1
     6ce:	0100      	lsls	r0, r0, #4
     6d0:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALAMPL, 0x07);
     6d2:	2107      	movs	r1, #7
     6d4:	4831      	ldr	r0, [pc, #196]	; (79c <spi40_rx_init+0x458>)
     6d6:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF1C, 0x07);
     6d8:	2107      	movs	r1, #7
     6da:	4831      	ldr	r0, [pc, #196]	; (7a0 <spi40_rx_init+0x45c>)
     6dc:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF21, 0x68);
     6de:	2168      	movs	r1, #104	; 0x68
     6e0:	4830      	ldr	r0, [pc, #192]	; (7a4 <spi40_rx_init+0x460>)
     6e2:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF22, 0xFF);
     6e4:	21ff      	movs	r1, #255	; 0xff
     6e6:	4830      	ldr	r0, [pc, #192]	; (7a8 <spi40_rx_init+0x464>)
     6e8:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF23, 0x84);
     6ea:	2184      	movs	r1, #132	; 0x84
     6ec:	482f      	ldr	r0, [pc, #188]	; (7ac <spi40_rx_init+0x468>)
     6ee:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF26, 0x98);
     6f0:	2198      	movs	r1, #152	; 0x98
     6f2:	482f      	ldr	r0, [pc, #188]	; (7b0 <spi40_rx_init+0x46c>)
     6f4:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF34, 0x08);
     6f6:	2108      	movs	r1, #8
     6f8:	482e      	ldr	r0, [pc, #184]	; (7b4 <spi40_rx_init+0x470>)
     6fa:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF35, 0x10);
     6fc:	2110      	movs	r1, #16
     6fe:	482e      	ldr	r0, [pc, #184]	; (7b8 <spi40_rx_init+0x474>)
     700:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF44, 0x25);
     702:	2125      	movs	r1, #37	; 0x25
     704:	482d      	ldr	r0, [pc, #180]	; (7bc <spi40_rx_init+0x478>)
     706:	47a0      	blx	r4
    
    spi40_wr8(AX5043_PLLLOOP, 0x0A);
     708:	210a      	movs	r1, #10
     70a:	2030      	movs	r0, #48	; 0x30
     70c:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLCPI, 0x10);
     70e:	2110      	movs	r1, #16
     710:	2031      	movs	r0, #49	; 0x31
     712:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCODIV, 0x30); //org val = 0x30
     714:	2130      	movs	r1, #48	; 0x30
     716:	2032      	movs	r0, #50	; 0x32
     718:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALCAP, 0x13);
     71a:	2113      	movs	r1, #19
     71c:	20c2      	movs	r0, #194	; 0xc2
     71e:	0040      	lsls	r0, r0, #1
     720:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF00, 0x0F);
     722:	210f      	movs	r1, #15
     724:	20f0      	movs	r0, #240	; 0xf0
     726:	0100      	lsls	r0, r0, #4
     728:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF18, 0x06);
     72a:	2106      	movs	r1, #6
     72c:	4824      	ldr	r0, [pc, #144]	; (7c0 <spi40_rx_init+0x47c>)
     72e:	47a0      	blx	r4
    
    //set frqeuency
    spi40_wr8(AX5043_FREQA0, 0x01);
     730:	2101      	movs	r1, #1
     732:	2037      	movs	r0, #55	; 0x37
     734:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA1, 0x00);
     736:	2100      	movs	r1, #0
     738:	2036      	movs	r0, #54	; 0x36
     73a:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA2, 0x90);
     73c:	2190      	movs	r1, #144	; 0x90
     73e:	2035      	movs	r0, #53	; 0x35
     740:	47a0      	blx	r4
     742:	e03f      	b.n	7c4 <spi40_rx_init+0x480>
     744:	000002f5 	.word	0x000002f5
     748:	00000a11 	.word	0x00000a11
     74c:	00000201 	.word	0x00000201
     750:	00000202 	.word	0x00000202
     754:	00000203 	.word	0x00000203
     758:	00000211 	.word	0x00000211
     75c:	00000212 	.word	0x00000212
     760:	00000213 	.word	0x00000213
     764:	00000216 	.word	0x00000216
     768:	00000219 	.word	0x00000219
     76c:	0000021e 	.word	0x0000021e
     770:	00000221 	.word	0x00000221
     774:	00000223 	.word	0x00000223
     778:	00000225 	.word	0x00000225
     77c:	00000226 	.word	0x00000226
     780:	0000022a 	.word	0x0000022a
     784:	0000022d 	.word	0x0000022d
     788:	0000022f 	.word	0x0000022f
     78c:	00000233 	.word	0x00000233
     790:	00000331 	.word	0x00000331
     794:	00000332 	.word	0x00000332
     798:	00000f0d 	.word	0x00000f0d
     79c:	00000f11 	.word	0x00000f11
     7a0:	00000f1c 	.word	0x00000f1c
     7a4:	00000f21 	.word	0x00000f21
     7a8:	00000f22 	.word	0x00000f22
     7ac:	00000f23 	.word	0x00000f23
     7b0:	00000f26 	.word	0x00000f26
     7b4:	00000f34 	.word	0x00000f34
     7b8:	00000f35 	.word	0x00000f35
     7bc:	00000f44 	.word	0x00000f44
     7c0:	00000f18 	.word	0x00000f18
    spi40_wr8(AX5043_FREQA3, 0x0A);
     7c4:	210a      	movs	r1, #10
     7c6:	2034      	movs	r0, #52	; 0x34
     7c8:	47a0      	blx	r4
    
    // Settings unique to receiver:
    spi40_wr8(AX5043_TMGRXAGC, 0x00);
     7ca:	2100      	movs	r1, #0
     7cc:	480f      	ldr	r0, [pc, #60]	; (80c <spi40_rx_init+0x4c8>)
     7ce:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXPREAMBLE1, 0x00);
     7d0:	2100      	movs	r1, #0
     7d2:	480f      	ldr	r0, [pc, #60]	; (810 <spi40_rx_init+0x4cc>)
     7d4:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTMISCFLAGS, 0x00 | (1 << 2)); //org value = 0x00
     7d6:	2104      	movs	r1, #4
     7d8:	480e      	ldr	r0, [pc, #56]	; (814 <spi40_rx_init+0x4d0>)
     7da:	47a0      	blx	r4
    
    
    // wait for crystal to settle
    while((spi40_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
     7dc:	201d      	movs	r0, #29
     7de:	4b0e      	ldr	r3, [pc, #56]	; (818 <spi40_rx_init+0x4d4>)
     7e0:	4798      	blx	r3
     7e2:	07c3      	lsls	r3, r0, #31
     7e4:	d5fa      	bpl.n	7dc <spi40_rx_init+0x498>
    
    // autorange the PLL
    spi40_autorange();
     7e6:	4b0d      	ldr	r3, [pc, #52]	; (81c <spi40_rx_init+0x4d8>)
     7e8:	4798      	blx	r3
    
    // accept no invalid packets
    spi40_wr8(AX5043_PKTACCEPTFLAGS, 0x00);
     7ea:	2100      	movs	r1, #0
     7ec:	480c      	ldr	r0, [pc, #48]	; (820 <spi40_rx_init+0x4dc>)
     7ee:	4c0d      	ldr	r4, [pc, #52]	; (824 <spi40_rx_init+0x4e0>)
     7f0:	47a0      	blx	r4
    
    // append RSSI reading to end of packet
    spi40_wr8(AX5043_PKTSTOREFLAGS, 0x10);
     7f2:	2110      	movs	r1, #16
     7f4:	480c      	ldr	r0, [pc, #48]	; (828 <spi40_rx_init+0x4e4>)
     7f6:	47a0      	blx	r4
    
    // set power mode to full receive, i.e. always receive
    spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_FULLRX);
     7f8:	2169      	movs	r1, #105	; 0x69
     7fa:	2002      	movs	r0, #2
     7fc:	47a0      	blx	r4
    delay_ms(100);
     7fe:	2064      	movs	r0, #100	; 0x64
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <spi40_rx_init+0x4e8>)
     802:	4798      	blx	r3
    
    // clear FIFO
    spi40_wr8(AX5043_FIFOSTAT, FIFOCMD_CLRFIFO);
     804:	2103      	movs	r1, #3
     806:	2028      	movs	r0, #40	; 0x28
     808:	47a0      	blx	r4
}
     80a:	bd10      	pop	{r4, pc}
     80c:	00000227 	.word	0x00000227
     810:	00000229 	.word	0x00000229
     814:	00000231 	.word	0x00000231
     818:	000002ad 	.word	0x000002ad
     81c:	00000325 	.word	0x00000325
     820:	00000233 	.word	0x00000233
     824:	000002f5 	.word	0x000002f5
     828:	00000232 	.word	0x00000232
     82c:	00000a11 	.word	0x00000a11

00000830 <spi40_rssi>:
 * Return Values(s) : int16_t
 * Description      : Gets the RSSI value from the AX5043 and performs
 *  a rolling average on it. Returns the averaged RSSI as a 2 byte int.
 */
uint16_t spi40_rssi(void)
{
     830:	b510      	push	{r4, lr}
    /* read the RSSI register, put it in the rolling average, and
     * return the new average */
	
	// 9/22/20 edit for testing. removed roll avg. 
 //   return ((uint16_t) ((int8_t) spi40_rollavg(spi40_rd8(AX5043_RSSI))));
	return spi40_rd8(AX5043_RSSI);
     832:	2040      	movs	r0, #64	; 0x40
     834:	4b01      	ldr	r3, [pc, #4]	; (83c <spi40_rssi+0xc>)
     836:	4798      	blx	r3
 
 
}
     838:	bd10      	pop	{r4, pc}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	000002ad 	.word	0x000002ad

00000840 <uartfiber_parse_cmd>:
 *  should be 'A' (for AX5043), 'M' (for MTXDOT), or 'R' (for RC2500HP).
 *  Sends the RSSI of the respective module over fiber to the
 *  display controller.
 */
static void uartfiber_parse_cmd(uint8_t cmd_char)
{
     840:	b500      	push	{lr}
     842:	b083      	sub	sp, #12
    union{
        rssi_t f_val;
        uint8_t f_bytes[RSSI_SIZE]; 
    }float_bytes;
    
    switch(cmd_char)
     844:	284d      	cmp	r0, #77	; 0x4d
     846:	d013      	beq.n	870 <uartfiber_parse_cmd+0x30>
     848:	2852      	cmp	r0, #82	; 0x52
     84a:	d01f      	beq.n	88c <uartfiber_parse_cmd+0x4c>
     84c:	2841      	cmp	r0, #65	; 0x41
     84e:	d001      	beq.n	854 <uartfiber_parse_cmd+0x14>
        case 'R':
            float_bytes.f_val = uartfiber_rssi->rssi245;
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
            break;
    }
}
     850:	b003      	add	sp, #12
     852:	bd00      	pop	{pc}
            float_bytes.f_val = uartfiber_rssi->rssi169;
     854:	4b14      	ldr	r3, [pc, #80]	; (8a8 <uartfiber_parse_cmd+0x68>)
     856:	681b      	ldr	r3, [r3, #0]
     858:	885b      	ldrh	r3, [r3, #2]
     85a:	b21b      	sxth	r3, r3
     85c:	aa01      	add	r2, sp, #4
     85e:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     860:	2202      	movs	r2, #2
     862:	a901      	add	r1, sp, #4
     864:	4811      	ldr	r0, [pc, #68]	; (8ac <uartfiber_parse_cmd+0x6c>)
     866:	4b12      	ldr	r3, [pc, #72]	; (8b0 <uartfiber_parse_cmd+0x70>)
     868:	4798      	blx	r3
     86a:	2805      	cmp	r0, #5
     86c:	d1f8      	bne.n	860 <uartfiber_parse_cmd+0x20>
     86e:	e7ef      	b.n	850 <uartfiber_parse_cmd+0x10>
            float_bytes.f_val = uartfiber_rssi->rssi915;
     870:	4b0d      	ldr	r3, [pc, #52]	; (8a8 <uartfiber_parse_cmd+0x68>)
     872:	681b      	ldr	r3, [r3, #0]
     874:	889b      	ldrh	r3, [r3, #4]
     876:	b21b      	sxth	r3, r3
     878:	aa01      	add	r2, sp, #4
     87a:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     87c:	2202      	movs	r2, #2
     87e:	a901      	add	r1, sp, #4
     880:	480a      	ldr	r0, [pc, #40]	; (8ac <uartfiber_parse_cmd+0x6c>)
     882:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <uartfiber_parse_cmd+0x70>)
     884:	4798      	blx	r3
     886:	2805      	cmp	r0, #5
     888:	d1f8      	bne.n	87c <uartfiber_parse_cmd+0x3c>
     88a:	e7e1      	b.n	850 <uartfiber_parse_cmd+0x10>
            float_bytes.f_val = uartfiber_rssi->rssi245;
     88c:	4b06      	ldr	r3, [pc, #24]	; (8a8 <uartfiber_parse_cmd+0x68>)
     88e:	681b      	ldr	r3, [r3, #0]
     890:	88db      	ldrh	r3, [r3, #6]
     892:	b21b      	sxth	r3, r3
     894:	aa01      	add	r2, sp, #4
     896:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     898:	2202      	movs	r2, #2
     89a:	a901      	add	r1, sp, #4
     89c:	4803      	ldr	r0, [pc, #12]	; (8ac <uartfiber_parse_cmd+0x6c>)
     89e:	4b04      	ldr	r3, [pc, #16]	; (8b0 <uartfiber_parse_cmd+0x70>)
     8a0:	4798      	blx	r3
     8a2:	2805      	cmp	r0, #5
     8a4:	d1f8      	bne.n	898 <uartfiber_parse_cmd+0x58>
     8a6:	e7d3      	b.n	850 <uartfiber_parse_cmd+0x10>
     8a8:	20000060 	.word	0x20000060
     8ac:	2000002c 	.word	0x2000002c
     8b0:	00001195 	.word	0x00001195

000008b4 <uartfiber_read_callback>:
{
     8b4:	b510      	push	{r4, lr}
    uartfiber_parse_cmd(uartfiber_rx_read);
     8b6:	4c05      	ldr	r4, [pc, #20]	; (8cc <uartfiber_read_callback+0x18>)
     8b8:	7820      	ldrb	r0, [r4, #0]
     8ba:	4b05      	ldr	r3, [pc, #20]	; (8d0 <uartfiber_read_callback+0x1c>)
     8bc:	4798      	blx	r3
    usart_read_buffer_job(&uartfiber_inst, &uartfiber_rx_read, 1);
     8be:	2201      	movs	r2, #1
     8c0:	0021      	movs	r1, r4
     8c2:	4804      	ldr	r0, [pc, #16]	; (8d4 <uartfiber_read_callback+0x20>)
     8c4:	4b04      	ldr	r3, [pc, #16]	; (8d8 <uartfiber_read_callback+0x24>)
     8c6:	4798      	blx	r3
}
     8c8:	bd10      	pop	{r4, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	20000064 	.word	0x20000064
     8d0:	00000841 	.word	0x00000841
     8d4:	2000002c 	.word	0x2000002c
     8d8:	000011b5 	.word	0x000011b5

000008dc <configure_uartfiber_callbacks>:
{
     8dc:	b510      	push	{r4, lr}
    usart_register_callback(&uartfiber_inst, uartfiber_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     8de:	4c08      	ldr	r4, [pc, #32]	; (900 <configure_uartfiber_callbacks+0x24>)
     8e0:	2201      	movs	r2, #1
     8e2:	4908      	ldr	r1, [pc, #32]	; (904 <configure_uartfiber_callbacks+0x28>)
     8e4:	0020      	movs	r0, r4
     8e6:	4b08      	ldr	r3, [pc, #32]	; (908 <configure_uartfiber_callbacks+0x2c>)
     8e8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     8ea:	2231      	movs	r2, #49	; 0x31
     8ec:	5ca3      	ldrb	r3, [r4, r2]
     8ee:	2102      	movs	r1, #2
     8f0:	430b      	orrs	r3, r1
     8f2:	54a3      	strb	r3, [r4, r2]
    usart_read_buffer_job(&uartfiber_inst, &uartfiber_rx_read, 1);
     8f4:	3a30      	subs	r2, #48	; 0x30
     8f6:	4905      	ldr	r1, [pc, #20]	; (90c <configure_uartfiber_callbacks+0x30>)
     8f8:	0020      	movs	r0, r4
     8fa:	4b05      	ldr	r3, [pc, #20]	; (910 <configure_uartfiber_callbacks+0x34>)
     8fc:	4798      	blx	r3
}
     8fe:	bd10      	pop	{r4, pc}
     900:	2000002c 	.word	0x2000002c
     904:	000008b5 	.word	0x000008b5
     908:	0000117d 	.word	0x0000117d
     90c:	20000064 	.word	0x20000064
     910:	000011b5 	.word	0x000011b5

00000914 <uartfiber_init>:
{
     914:	b510      	push	{r4, lr}
     916:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     918:	2380      	movs	r3, #128	; 0x80
     91a:	05db      	lsls	r3, r3, #23
     91c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     91e:	2300      	movs	r3, #0
     920:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     922:	22ff      	movs	r2, #255	; 0xff
     924:	4669      	mov	r1, sp
     926:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     928:	2200      	movs	r2, #0
     92a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     92c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     92e:	2101      	movs	r1, #1
     930:	2024      	movs	r0, #36	; 0x24
     932:	466c      	mov	r4, sp
     934:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     936:	3001      	adds	r0, #1
     938:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     93a:	3125      	adds	r1, #37	; 0x25
     93c:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     93e:	3101      	adds	r1, #1
     940:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     942:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     944:	3105      	adds	r1, #5
     946:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     948:	3101      	adds	r1, #1
     94a:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     94c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     94e:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     950:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     952:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     954:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     956:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     958:	2313      	movs	r3, #19
     95a:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     95c:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate = UART_FIBER_BAUD;
     95e:	23e1      	movs	r3, #225	; 0xe1
     960:	019b      	lsls	r3, r3, #6
     962:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX;
     964:	2380      	movs	r3, #128	; 0x80
     966:	025b      	lsls	r3, r3, #9
     968:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_UNUSED;
     96a:	2301      	movs	r3, #1
     96c:	425b      	negs	r3, r3
     96e:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
     970:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = UTX_FIBER;
     972:	4a11      	ldr	r2, [pc, #68]	; (9b8 <uartfiber_init+0xa4>)
     974:	920e      	str	r2, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     976:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst, UART_FIBER, &config_usart) != STATUS_OK);
     978:	466a      	mov	r2, sp
     97a:	4910      	ldr	r1, [pc, #64]	; (9bc <uartfiber_init+0xa8>)
     97c:	4810      	ldr	r0, [pc, #64]	; (9c0 <uartfiber_init+0xac>)
     97e:	4b11      	ldr	r3, [pc, #68]	; (9c4 <uartfiber_init+0xb0>)
     980:	4798      	blx	r3
     982:	2800      	cmp	r0, #0
     984:	d1f8      	bne.n	978 <uartfiber_init+0x64>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     986:	4b0e      	ldr	r3, [pc, #56]	; (9c0 <uartfiber_init+0xac>)
     988:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     98a:	0020      	movs	r0, r4
     98c:	4b0e      	ldr	r3, [pc, #56]	; (9c8 <uartfiber_init+0xb4>)
     98e:	4798      	blx	r3
     990:	231f      	movs	r3, #31
     992:	4018      	ands	r0, r3
     994:	3b1e      	subs	r3, #30
     996:	4083      	lsls	r3, r0
     998:	4a0c      	ldr	r2, [pc, #48]	; (9cc <uartfiber_init+0xb8>)
     99a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     99c:	4b08      	ldr	r3, [pc, #32]	; (9c0 <uartfiber_init+0xac>)
     99e:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     9a0:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     9a2:	2b00      	cmp	r3, #0
     9a4:	d1fa      	bne.n	99c <uartfiber_init+0x88>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     9a6:	6823      	ldr	r3, [r4, #0]
     9a8:	2202      	movs	r2, #2
     9aa:	4313      	orrs	r3, r2
     9ac:	6023      	str	r3, [r4, #0]
    configure_uartfiber_callbacks();
     9ae:	4b08      	ldr	r3, [pc, #32]	; (9d0 <uartfiber_init+0xbc>)
     9b0:	4798      	blx	r3
}
     9b2:	b010      	add	sp, #64	; 0x40
     9b4:	bd10      	pop	{r4, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	00140002 	.word	0x00140002
     9bc:	42001c00 	.word	0x42001c00
     9c0:	2000002c 	.word	0x2000002c
     9c4:	00000fa9 	.word	0x00000fa9
     9c8:	00001eb1 	.word	0x00001eb1
     9cc:	e000e100 	.word	0xe000e100
     9d0:	000008dd 	.word	0x000008dd

000009d4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     9d4:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     9d6:	2000      	movs	r0, #0
     9d8:	4b08      	ldr	r3, [pc, #32]	; (9fc <delay_init+0x28>)
     9da:	4798      	blx	r3
	cycles_per_ms /= 1000;
     9dc:	4c08      	ldr	r4, [pc, #32]	; (a00 <delay_init+0x2c>)
     9de:	21fa      	movs	r1, #250	; 0xfa
     9e0:	0089      	lsls	r1, r1, #2
     9e2:	47a0      	blx	r4
     9e4:	4b07      	ldr	r3, [pc, #28]	; (a04 <delay_init+0x30>)
     9e6:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     9e8:	21fa      	movs	r1, #250	; 0xfa
     9ea:	0089      	lsls	r1, r1, #2
     9ec:	47a0      	blx	r4
     9ee:	4b06      	ldr	r3, [pc, #24]	; (a08 <delay_init+0x34>)
     9f0:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     9f2:	2205      	movs	r2, #5
     9f4:	4b05      	ldr	r3, [pc, #20]	; (a0c <delay_init+0x38>)
     9f6:	601a      	str	r2, [r3, #0]
}
     9f8:	bd10      	pop	{r4, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	00002315 	.word	0x00002315
     a00:	0000281d 	.word	0x0000281d
     a04:	20000000 	.word	0x20000000
     a08:	20000004 	.word	0x20000004
     a0c:	e000e010 	.word	0xe000e010

00000a10 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     a10:	e000      	b.n	a14 <delay_cycles_ms+0x4>
{
     a12:	0010      	movs	r0, r2
	while (n--) {
     a14:	1e42      	subs	r2, r0, #1
     a16:	2800      	cmp	r0, #0
     a18:	d00c      	beq.n	a34 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     a1a:	4b07      	ldr	r3, [pc, #28]	; (a38 <delay_cycles_ms+0x28>)
     a1c:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     a1e:	2b00      	cmp	r3, #0
     a20:	d0f7      	beq.n	a12 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     a22:	4906      	ldr	r1, [pc, #24]	; (a3c <delay_cycles_ms+0x2c>)
     a24:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     a26:	2300      	movs	r3, #0
     a28:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     a2a:	4b04      	ldr	r3, [pc, #16]	; (a3c <delay_cycles_ms+0x2c>)
     a2c:	681b      	ldr	r3, [r3, #0]
     a2e:	03db      	lsls	r3, r3, #15
     a30:	d5fb      	bpl.n	a2a <delay_cycles_ms+0x1a>
     a32:	e7ee      	b.n	a12 <delay_cycles_ms+0x2>
	}
}
     a34:	4770      	bx	lr
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	20000000 	.word	0x20000000
     a3c:	e000e010 	.word	0xe000e010

00000a40 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a40:	b500      	push	{lr}
     a42:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a44:	ab01      	add	r3, sp, #4
     a46:	2280      	movs	r2, #128	; 0x80
     a48:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a4a:	780a      	ldrb	r2, [r1, #0]
     a4c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     a4e:	784a      	ldrb	r2, [r1, #1]
     a50:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a52:	788a      	ldrb	r2, [r1, #2]
     a54:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a56:	0019      	movs	r1, r3
     a58:	4b01      	ldr	r3, [pc, #4]	; (a60 <port_pin_set_config+0x20>)
     a5a:	4798      	blx	r3
}
     a5c:	b003      	add	sp, #12
     a5e:	bd00      	pop	{pc}
     a60:	0000252d 	.word	0x0000252d

00000a64 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     a64:	b5f0      	push	{r4, r5, r6, r7, lr}
     a66:	46de      	mov	lr, fp
     a68:	4657      	mov	r7, sl
     a6a:	464e      	mov	r6, r9
     a6c:	4645      	mov	r5, r8
     a6e:	b5e0      	push	{r5, r6, r7, lr}
     a70:	b085      	sub	sp, #20
     a72:	4689      	mov	r9, r1
     a74:	0016      	movs	r6, r2
     a76:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a78:	2200      	movs	r2, #0
     a7a:	2300      	movs	r3, #0
     a7c:	2100      	movs	r1, #0
     a7e:	468b      	mov	fp, r1
     a80:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     a82:	253f      	movs	r5, #63	; 0x3f
     a84:	9600      	str	r6, [sp, #0]
     a86:	9701      	str	r7, [sp, #4]
     a88:	9002      	str	r0, [sp, #8]
     a8a:	4649      	mov	r1, r9
     a8c:	9103      	str	r1, [sp, #12]
     a8e:	e011      	b.n	ab4 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     a90:	2120      	movs	r1, #32
     a92:	1b49      	subs	r1, r1, r5
     a94:	2400      	movs	r4, #0
     a96:	3401      	adds	r4, #1
     a98:	40cc      	lsrs	r4, r1
     a9a:	e013      	b.n	ac4 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     a9c:	9800      	ldr	r0, [sp, #0]
     a9e:	9901      	ldr	r1, [sp, #4]
     aa0:	1a12      	subs	r2, r2, r0
     aa2:	418b      	sbcs	r3, r1
			q |= bit_shift;
     aa4:	4659      	mov	r1, fp
     aa6:	4660      	mov	r0, ip
     aa8:	4301      	orrs	r1, r0
     aaa:	468b      	mov	fp, r1
     aac:	4651      	mov	r1, sl
     aae:	4321      	orrs	r1, r4
     ab0:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     ab2:	3d01      	subs	r5, #1
     ab4:	2d00      	cmp	r5, #0
     ab6:	db23      	blt.n	b00 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     ab8:	2120      	movs	r1, #32
     aba:	4249      	negs	r1, r1
     abc:	1869      	adds	r1, r5, r1
     abe:	d4e7      	bmi.n	a90 <long_division+0x2c>
     ac0:	2401      	movs	r4, #1
     ac2:	408c      	lsls	r4, r1
     ac4:	2101      	movs	r1, #1
     ac6:	40a9      	lsls	r1, r5
     ac8:	468c      	mov	ip, r1
		r = r << 1;
     aca:	1892      	adds	r2, r2, r2
     acc:	415b      	adcs	r3, r3
     ace:	0010      	movs	r0, r2
     ad0:	0019      	movs	r1, r3
		if (n & bit_shift) {
     ad2:	9e02      	ldr	r6, [sp, #8]
     ad4:	4667      	mov	r7, ip
     ad6:	403e      	ands	r6, r7
     ad8:	46b1      	mov	r9, r6
     ada:	9e03      	ldr	r6, [sp, #12]
     adc:	4026      	ands	r6, r4
     ade:	46b0      	mov	r8, r6
     ae0:	464e      	mov	r6, r9
     ae2:	4647      	mov	r7, r8
     ae4:	433e      	orrs	r6, r7
     ae6:	d003      	beq.n	af0 <long_division+0x8c>
			r |= 0x01;
     ae8:	2601      	movs	r6, #1
     aea:	4306      	orrs	r6, r0
     aec:	0032      	movs	r2, r6
     aee:	000b      	movs	r3, r1
		if (r >= d) {
     af0:	9800      	ldr	r0, [sp, #0]
     af2:	9901      	ldr	r1, [sp, #4]
     af4:	4299      	cmp	r1, r3
     af6:	d8dc      	bhi.n	ab2 <long_division+0x4e>
     af8:	d1d0      	bne.n	a9c <long_division+0x38>
     afa:	4290      	cmp	r0, r2
     afc:	d8d9      	bhi.n	ab2 <long_division+0x4e>
     afe:	e7cd      	b.n	a9c <long_division+0x38>
		}
	}

	return q;
}
     b00:	4658      	mov	r0, fp
     b02:	4651      	mov	r1, sl
     b04:	b005      	add	sp, #20
     b06:	bc3c      	pop	{r2, r3, r4, r5}
     b08:	4690      	mov	r8, r2
     b0a:	4699      	mov	r9, r3
     b0c:	46a2      	mov	sl, r4
     b0e:	46ab      	mov	fp, r5
     b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000b12 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b12:	0849      	lsrs	r1, r1, #1
     b14:	4281      	cmp	r1, r0
     b16:	d201      	bcs.n	b1c <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b18:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     b1a:	4770      	bx	lr
     b1c:	2300      	movs	r3, #0
     b1e:	e002      	b.n	b26 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     b20:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     b22:	3301      	adds	r3, #1
     b24:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     b26:	4281      	cmp	r1, r0
     b28:	d2fa      	bcs.n	b20 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     b2a:	3b01      	subs	r3, #1
     b2c:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     b2e:	2bff      	cmp	r3, #255	; 0xff
     b30:	d901      	bls.n	b36 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b32:	2040      	movs	r0, #64	; 0x40
     b34:	e7f1      	b.n	b1a <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     b36:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     b38:	2000      	movs	r0, #0
     b3a:	e7ee      	b.n	b1a <_sercom_get_sync_baud_val+0x8>

00000b3c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b3c:	b570      	push	{r4, r5, r6, lr}
     b3e:	b082      	sub	sp, #8
     b40:	000c      	movs	r4, r1
     b42:	0015      	movs	r5, r2
     b44:	aa06      	add	r2, sp, #24
     b46:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     b48:	0002      	movs	r2, r0
     b4a:	434a      	muls	r2, r1
     b4c:	42a2      	cmp	r2, r4
     b4e:	d902      	bls.n	b56 <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b50:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     b52:	b002      	add	sp, #8
     b54:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     b56:	2b00      	cmp	r3, #0
     b58:	d114      	bne.n	b84 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     b5a:	0002      	movs	r2, r0
     b5c:	0008      	movs	r0, r1
     b5e:	2100      	movs	r1, #0
     b60:	4e1b      	ldr	r6, [pc, #108]	; (bd0 <_sercom_get_async_baud_val+0x94>)
     b62:	47b0      	blx	r6
     b64:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     b66:	0022      	movs	r2, r4
     b68:	2300      	movs	r3, #0
     b6a:	2000      	movs	r0, #0
     b6c:	4c19      	ldr	r4, [pc, #100]	; (bd4 <_sercom_get_async_baud_val+0x98>)
     b6e:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b70:	2200      	movs	r2, #0
     b72:	2301      	movs	r3, #1
     b74:	1a12      	subs	r2, r2, r0
     b76:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     b78:	0c10      	lsrs	r0, r2, #16
     b7a:	041b      	lsls	r3, r3, #16
     b7c:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     b7e:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     b80:	2000      	movs	r0, #0
     b82:	e7e6      	b.n	b52 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b84:	2b01      	cmp	r3, #1
     b86:	d001      	beq.n	b8c <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     b88:	2000      	movs	r0, #0
     b8a:	e7f8      	b.n	b7e <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     b8c:	000a      	movs	r2, r1
     b8e:	2300      	movs	r3, #0
     b90:	2100      	movs	r1, #0
     b92:	4e0f      	ldr	r6, [pc, #60]	; (bd0 <_sercom_get_async_baud_val+0x94>)
     b94:	47b0      	blx	r6
     b96:	0002      	movs	r2, r0
     b98:	000b      	movs	r3, r1
     b9a:	9200      	str	r2, [sp, #0]
     b9c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     b9e:	0020      	movs	r0, r4
     ba0:	2100      	movs	r1, #0
     ba2:	4e0c      	ldr	r6, [pc, #48]	; (bd4 <_sercom_get_async_baud_val+0x98>)
     ba4:	47b0      	blx	r6
     ba6:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     ba8:	2380      	movs	r3, #128	; 0x80
     baa:	019b      	lsls	r3, r3, #6
     bac:	4298      	cmp	r0, r3
     bae:	d901      	bls.n	bb4 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bb0:	2040      	movs	r0, #64	; 0x40
     bb2:	e7ce      	b.n	b52 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     bb4:	0f61      	lsrs	r1, r4, #29
     bb6:	00e0      	lsls	r0, r4, #3
     bb8:	9a00      	ldr	r2, [sp, #0]
     bba:	9b01      	ldr	r3, [sp, #4]
     bbc:	4c05      	ldr	r4, [pc, #20]	; (bd4 <_sercom_get_async_baud_val+0x98>)
     bbe:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     bc0:	b2c0      	uxtb	r0, r0
     bc2:	00f3      	lsls	r3, r6, #3
     bc4:	b2db      	uxtb	r3, r3
     bc6:	1ac0      	subs	r0, r0, r3
     bc8:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     bca:	0340      	lsls	r0, r0, #13
     bcc:	4330      	orrs	r0, r6
     bce:	e7d6      	b.n	b7e <_sercom_get_async_baud_val+0x42>
     bd0:	00002935 	.word	0x00002935
     bd4:	00000a65 	.word	0x00000a65

00000bd8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     bd8:	b510      	push	{r4, lr}
     bda:	b082      	sub	sp, #8
     bdc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     bde:	4b0e      	ldr	r3, [pc, #56]	; (c18 <sercom_set_gclk_generator+0x40>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b00      	cmp	r3, #0
     be4:	d007      	beq.n	bf6 <sercom_set_gclk_generator+0x1e>
     be6:	2900      	cmp	r1, #0
     be8:	d105      	bne.n	bf6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     bea:	4b0b      	ldr	r3, [pc, #44]	; (c18 <sercom_set_gclk_generator+0x40>)
     bec:	785b      	ldrb	r3, [r3, #1]
     bee:	4283      	cmp	r3, r0
     bf0:	d010      	beq.n	c14 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     bf2:	201d      	movs	r0, #29
     bf4:	e00c      	b.n	c10 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     bf6:	a901      	add	r1, sp, #4
     bf8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     bfa:	2013      	movs	r0, #19
     bfc:	4b07      	ldr	r3, [pc, #28]	; (c1c <sercom_set_gclk_generator+0x44>)
     bfe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c00:	2013      	movs	r0, #19
     c02:	4b07      	ldr	r3, [pc, #28]	; (c20 <sercom_set_gclk_generator+0x48>)
     c04:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     c06:	4b04      	ldr	r3, [pc, #16]	; (c18 <sercom_set_gclk_generator+0x40>)
     c08:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c0a:	2201      	movs	r2, #1
     c0c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     c0e:	2000      	movs	r0, #0
}
     c10:	b002      	add	sp, #8
     c12:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     c14:	2000      	movs	r0, #0
     c16:	e7fb      	b.n	c10 <sercom_set_gclk_generator+0x38>
     c18:	20000068 	.word	0x20000068
     c1c:	00002449 	.word	0x00002449
     c20:	000023c1 	.word	0x000023c1

00000c24 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c24:	4b40      	ldr	r3, [pc, #256]	; (d28 <_sercom_get_default_pad+0x104>)
     c26:	4298      	cmp	r0, r3
     c28:	d031      	beq.n	c8e <_sercom_get_default_pad+0x6a>
     c2a:	d90a      	bls.n	c42 <_sercom_get_default_pad+0x1e>
     c2c:	4b3f      	ldr	r3, [pc, #252]	; (d2c <_sercom_get_default_pad+0x108>)
     c2e:	4298      	cmp	r0, r3
     c30:	d04d      	beq.n	cce <_sercom_get_default_pad+0xaa>
     c32:	4b3f      	ldr	r3, [pc, #252]	; (d30 <_sercom_get_default_pad+0x10c>)
     c34:	4298      	cmp	r0, r3
     c36:	d05a      	beq.n	cee <_sercom_get_default_pad+0xca>
     c38:	4b3e      	ldr	r3, [pc, #248]	; (d34 <_sercom_get_default_pad+0x110>)
     c3a:	4298      	cmp	r0, r3
     c3c:	d037      	beq.n	cae <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     c3e:	2000      	movs	r0, #0
}
     c40:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     c42:	4b3d      	ldr	r3, [pc, #244]	; (d38 <_sercom_get_default_pad+0x114>)
     c44:	4298      	cmp	r0, r3
     c46:	d00c      	beq.n	c62 <_sercom_get_default_pad+0x3e>
     c48:	4b3c      	ldr	r3, [pc, #240]	; (d3c <_sercom_get_default_pad+0x118>)
     c4a:	4298      	cmp	r0, r3
     c4c:	d1f7      	bne.n	c3e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c4e:	2901      	cmp	r1, #1
     c50:	d05f      	beq.n	d12 <_sercom_get_default_pad+0xee>
     c52:	2900      	cmp	r1, #0
     c54:	d015      	beq.n	c82 <_sercom_get_default_pad+0x5e>
     c56:	2902      	cmp	r1, #2
     c58:	d015      	beq.n	c86 <_sercom_get_default_pad+0x62>
     c5a:	2903      	cmp	r1, #3
     c5c:	d015      	beq.n	c8a <_sercom_get_default_pad+0x66>
	return 0;
     c5e:	2000      	movs	r0, #0
     c60:	e7ee      	b.n	c40 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c62:	2901      	cmp	r1, #1
     c64:	d053      	beq.n	d0e <_sercom_get_default_pad+0xea>
     c66:	2900      	cmp	r1, #0
     c68:	d005      	beq.n	c76 <_sercom_get_default_pad+0x52>
     c6a:	2902      	cmp	r1, #2
     c6c:	d005      	beq.n	c7a <_sercom_get_default_pad+0x56>
     c6e:	2903      	cmp	r1, #3
     c70:	d005      	beq.n	c7e <_sercom_get_default_pad+0x5a>
	return 0;
     c72:	2000      	movs	r0, #0
     c74:	e7e4      	b.n	c40 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c76:	4832      	ldr	r0, [pc, #200]	; (d40 <_sercom_get_default_pad+0x11c>)
     c78:	e7e2      	b.n	c40 <_sercom_get_default_pad+0x1c>
     c7a:	4832      	ldr	r0, [pc, #200]	; (d44 <_sercom_get_default_pad+0x120>)
     c7c:	e7e0      	b.n	c40 <_sercom_get_default_pad+0x1c>
     c7e:	4832      	ldr	r0, [pc, #200]	; (d48 <_sercom_get_default_pad+0x124>)
     c80:	e7de      	b.n	c40 <_sercom_get_default_pad+0x1c>
     c82:	2003      	movs	r0, #3
     c84:	e7dc      	b.n	c40 <_sercom_get_default_pad+0x1c>
     c86:	4831      	ldr	r0, [pc, #196]	; (d4c <_sercom_get_default_pad+0x128>)
     c88:	e7da      	b.n	c40 <_sercom_get_default_pad+0x1c>
     c8a:	4831      	ldr	r0, [pc, #196]	; (d50 <_sercom_get_default_pad+0x12c>)
     c8c:	e7d8      	b.n	c40 <_sercom_get_default_pad+0x1c>
     c8e:	2901      	cmp	r1, #1
     c90:	d041      	beq.n	d16 <_sercom_get_default_pad+0xf2>
     c92:	2900      	cmp	r1, #0
     c94:	d005      	beq.n	ca2 <_sercom_get_default_pad+0x7e>
     c96:	2902      	cmp	r1, #2
     c98:	d005      	beq.n	ca6 <_sercom_get_default_pad+0x82>
     c9a:	2903      	cmp	r1, #3
     c9c:	d005      	beq.n	caa <_sercom_get_default_pad+0x86>
	return 0;
     c9e:	2000      	movs	r0, #0
     ca0:	e7ce      	b.n	c40 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ca2:	482c      	ldr	r0, [pc, #176]	; (d54 <_sercom_get_default_pad+0x130>)
     ca4:	e7cc      	b.n	c40 <_sercom_get_default_pad+0x1c>
     ca6:	482c      	ldr	r0, [pc, #176]	; (d58 <_sercom_get_default_pad+0x134>)
     ca8:	e7ca      	b.n	c40 <_sercom_get_default_pad+0x1c>
     caa:	482c      	ldr	r0, [pc, #176]	; (d5c <_sercom_get_default_pad+0x138>)
     cac:	e7c8      	b.n	c40 <_sercom_get_default_pad+0x1c>
     cae:	2901      	cmp	r1, #1
     cb0:	d033      	beq.n	d1a <_sercom_get_default_pad+0xf6>
     cb2:	2900      	cmp	r1, #0
     cb4:	d005      	beq.n	cc2 <_sercom_get_default_pad+0x9e>
     cb6:	2902      	cmp	r1, #2
     cb8:	d005      	beq.n	cc6 <_sercom_get_default_pad+0xa2>
     cba:	2903      	cmp	r1, #3
     cbc:	d005      	beq.n	cca <_sercom_get_default_pad+0xa6>
	return 0;
     cbe:	2000      	movs	r0, #0
     cc0:	e7be      	b.n	c40 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cc2:	4827      	ldr	r0, [pc, #156]	; (d60 <_sercom_get_default_pad+0x13c>)
     cc4:	e7bc      	b.n	c40 <_sercom_get_default_pad+0x1c>
     cc6:	4827      	ldr	r0, [pc, #156]	; (d64 <_sercom_get_default_pad+0x140>)
     cc8:	e7ba      	b.n	c40 <_sercom_get_default_pad+0x1c>
     cca:	4827      	ldr	r0, [pc, #156]	; (d68 <_sercom_get_default_pad+0x144>)
     ccc:	e7b8      	b.n	c40 <_sercom_get_default_pad+0x1c>
     cce:	2901      	cmp	r1, #1
     cd0:	d025      	beq.n	d1e <_sercom_get_default_pad+0xfa>
     cd2:	2900      	cmp	r1, #0
     cd4:	d005      	beq.n	ce2 <_sercom_get_default_pad+0xbe>
     cd6:	2902      	cmp	r1, #2
     cd8:	d005      	beq.n	ce6 <_sercom_get_default_pad+0xc2>
     cda:	2903      	cmp	r1, #3
     cdc:	d005      	beq.n	cea <_sercom_get_default_pad+0xc6>
	return 0;
     cde:	2000      	movs	r0, #0
     ce0:	e7ae      	b.n	c40 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ce2:	4822      	ldr	r0, [pc, #136]	; (d6c <_sercom_get_default_pad+0x148>)
     ce4:	e7ac      	b.n	c40 <_sercom_get_default_pad+0x1c>
     ce6:	4822      	ldr	r0, [pc, #136]	; (d70 <_sercom_get_default_pad+0x14c>)
     ce8:	e7aa      	b.n	c40 <_sercom_get_default_pad+0x1c>
     cea:	4822      	ldr	r0, [pc, #136]	; (d74 <_sercom_get_default_pad+0x150>)
     cec:	e7a8      	b.n	c40 <_sercom_get_default_pad+0x1c>
     cee:	2901      	cmp	r1, #1
     cf0:	d017      	beq.n	d22 <_sercom_get_default_pad+0xfe>
     cf2:	2900      	cmp	r1, #0
     cf4:	d005      	beq.n	d02 <_sercom_get_default_pad+0xde>
     cf6:	2902      	cmp	r1, #2
     cf8:	d005      	beq.n	d06 <_sercom_get_default_pad+0xe2>
     cfa:	2903      	cmp	r1, #3
     cfc:	d005      	beq.n	d0a <_sercom_get_default_pad+0xe6>
	return 0;
     cfe:	2000      	movs	r0, #0
     d00:	e79e      	b.n	c40 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d02:	481d      	ldr	r0, [pc, #116]	; (d78 <_sercom_get_default_pad+0x154>)
     d04:	e79c      	b.n	c40 <_sercom_get_default_pad+0x1c>
     d06:	481d      	ldr	r0, [pc, #116]	; (d7c <_sercom_get_default_pad+0x158>)
     d08:	e79a      	b.n	c40 <_sercom_get_default_pad+0x1c>
     d0a:	481d      	ldr	r0, [pc, #116]	; (d80 <_sercom_get_default_pad+0x15c>)
     d0c:	e798      	b.n	c40 <_sercom_get_default_pad+0x1c>
     d0e:	481d      	ldr	r0, [pc, #116]	; (d84 <_sercom_get_default_pad+0x160>)
     d10:	e796      	b.n	c40 <_sercom_get_default_pad+0x1c>
     d12:	481d      	ldr	r0, [pc, #116]	; (d88 <_sercom_get_default_pad+0x164>)
     d14:	e794      	b.n	c40 <_sercom_get_default_pad+0x1c>
     d16:	481d      	ldr	r0, [pc, #116]	; (d8c <_sercom_get_default_pad+0x168>)
     d18:	e792      	b.n	c40 <_sercom_get_default_pad+0x1c>
     d1a:	481d      	ldr	r0, [pc, #116]	; (d90 <_sercom_get_default_pad+0x16c>)
     d1c:	e790      	b.n	c40 <_sercom_get_default_pad+0x1c>
     d1e:	481d      	ldr	r0, [pc, #116]	; (d94 <_sercom_get_default_pad+0x170>)
     d20:	e78e      	b.n	c40 <_sercom_get_default_pad+0x1c>
     d22:	481d      	ldr	r0, [pc, #116]	; (d98 <_sercom_get_default_pad+0x174>)
     d24:	e78c      	b.n	c40 <_sercom_get_default_pad+0x1c>
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	42001000 	.word	0x42001000
     d2c:	42001800 	.word	0x42001800
     d30:	42001c00 	.word	0x42001c00
     d34:	42001400 	.word	0x42001400
     d38:	42000800 	.word	0x42000800
     d3c:	42000c00 	.word	0x42000c00
     d40:	00040003 	.word	0x00040003
     d44:	00060003 	.word	0x00060003
     d48:	00070003 	.word	0x00070003
     d4c:	001e0003 	.word	0x001e0003
     d50:	001f0003 	.word	0x001f0003
     d54:	00080003 	.word	0x00080003
     d58:	000a0003 	.word	0x000a0003
     d5c:	000b0003 	.word	0x000b0003
     d60:	00100003 	.word	0x00100003
     d64:	00120003 	.word	0x00120003
     d68:	00130003 	.word	0x00130003
     d6c:	000c0003 	.word	0x000c0003
     d70:	000e0003 	.word	0x000e0003
     d74:	000f0003 	.word	0x000f0003
     d78:	00160003 	.word	0x00160003
     d7c:	00180003 	.word	0x00180003
     d80:	00190003 	.word	0x00190003
     d84:	00050003 	.word	0x00050003
     d88:	00010003 	.word	0x00010003
     d8c:	00090003 	.word	0x00090003
     d90:	00110003 	.word	0x00110003
     d94:	000d0003 	.word	0x000d0003
     d98:	00170003 	.word	0x00170003

00000d9c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d9c:	b530      	push	{r4, r5, lr}
     d9e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     da0:	4c0a      	ldr	r4, [pc, #40]	; (dcc <_sercom_get_sercom_inst_index+0x30>)
     da2:	466b      	mov	r3, sp
     da4:	0022      	movs	r2, r4
     da6:	ca32      	ldmia	r2!, {r1, r4, r5}
     da8:	c332      	stmia	r3!, {r1, r4, r5}
     daa:	ca32      	ldmia	r2!, {r1, r4, r5}
     dac:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dae:	2300      	movs	r3, #0
     db0:	2b05      	cmp	r3, #5
     db2:	d808      	bhi.n	dc6 <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     db4:	009a      	lsls	r2, r3, #2
     db6:	4669      	mov	r1, sp
     db8:	5852      	ldr	r2, [r2, r1]
     dba:	4282      	cmp	r2, r0
     dbc:	d001      	beq.n	dc2 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dbe:	3301      	adds	r3, #1
     dc0:	e7f6      	b.n	db0 <_sercom_get_sercom_inst_index+0x14>
			return i;
     dc2:	b2d8      	uxtb	r0, r3
     dc4:	e000      	b.n	dc8 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     dc6:	2000      	movs	r0, #0
}
     dc8:	b007      	add	sp, #28
     dca:	bd30      	pop	{r4, r5, pc}
     dcc:	000029f4 	.word	0x000029f4

00000dd0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     dd2:	46de      	mov	lr, fp
     dd4:	4657      	mov	r7, sl
     dd6:	464e      	mov	r6, r9
     dd8:	4645      	mov	r5, r8
     dda:	b5e0      	push	{r5, r6, r7, lr}
     ddc:	b087      	sub	sp, #28
     dde:	0004      	movs	r4, r0
     de0:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     de2:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     de4:	0030      	movs	r0, r6
     de6:	4b6b      	ldr	r3, [pc, #428]	; (f94 <_usart_set_config+0x1c4>)
     de8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     dea:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     dec:	2200      	movs	r2, #0
     dee:	230e      	movs	r3, #14
     df0:	a902      	add	r1, sp, #8
     df2:	468c      	mov	ip, r1
     df4:	4463      	add	r3, ip
     df6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     df8:	8a2a      	ldrh	r2, [r5, #16]
     dfa:	2380      	movs	r3, #128	; 0x80
     dfc:	01db      	lsls	r3, r3, #7
     dfe:	429a      	cmp	r2, r3
     e00:	d03b      	beq.n	e7a <_usart_set_config+0xaa>
     e02:	d90c      	bls.n	e1e <_usart_set_config+0x4e>
     e04:	23c0      	movs	r3, #192	; 0xc0
     e06:	01db      	lsls	r3, r3, #7
     e08:	429a      	cmp	r2, r3
     e0a:	d031      	beq.n	e70 <_usart_set_config+0xa0>
     e0c:	2380      	movs	r3, #128	; 0x80
     e0e:	021b      	lsls	r3, r3, #8
     e10:	429a      	cmp	r2, r3
     e12:	d10d      	bne.n	e30 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e14:	2303      	movs	r3, #3
     e16:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e18:	2300      	movs	r3, #0
     e1a:	4699      	mov	r9, r3
			break;
     e1c:	e00c      	b.n	e38 <_usart_set_config+0x68>
	switch (config->sample_rate) {
     e1e:	2380      	movs	r3, #128	; 0x80
     e20:	019b      	lsls	r3, r3, #6
     e22:	429a      	cmp	r2, r3
     e24:	d104      	bne.n	e30 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e26:	2310      	movs	r3, #16
     e28:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e2a:	3b0f      	subs	r3, #15
     e2c:	4699      	mov	r9, r3
			break;
     e2e:	e003      	b.n	e38 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e30:	2310      	movs	r3, #16
     e32:	469a      	mov	sl, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e34:	2300      	movs	r3, #0
     e36:	4699      	mov	r9, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e38:	682b      	ldr	r3, [r5, #0]
     e3a:	68e9      	ldr	r1, [r5, #12]
     e3c:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
     e3e:	6969      	ldr	r1, [r5, #20]
     e40:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e42:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e44:	7e2a      	ldrb	r2, [r5, #24]
     e46:	0212      	lsls	r2, r2, #8
		config->sample_rate |
     e48:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e4a:	2226      	movs	r2, #38	; 0x26
     e4c:	5caf      	ldrb	r7, [r5, r2]
     e4e:	077f      	lsls	r7, r7, #29
	ctrla = (uint32_t)config->data_order |
     e50:	431f      	orrs	r7, r3
     e52:	9703      	str	r7, [sp, #12]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     e54:	686b      	ldr	r3, [r5, #4]
     e56:	4698      	mov	r8, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     e58:	2b00      	cmp	r3, #0
     e5a:	d021      	beq.n	ea0 <_usart_set_config+0xd0>
     e5c:	2380      	movs	r3, #128	; 0x80
     e5e:	055b      	lsls	r3, r3, #21
     e60:	4598      	cmp	r8, r3
     e62:	d13e      	bne.n	ee2 <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     e64:	2327      	movs	r3, #39	; 0x27
     e66:	5ceb      	ldrb	r3, [r5, r3]
     e68:	2b00      	cmp	r3, #0
     e6a:	d00b      	beq.n	e84 <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
     e6c:	2000      	movs	r0, #0
     e6e:	e039      	b.n	ee4 <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e70:	2308      	movs	r3, #8
     e72:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e74:	3b07      	subs	r3, #7
     e76:	4699      	mov	r9, r3
			break;
     e78:	e7de      	b.n	e38 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e7a:	2308      	movs	r3, #8
     e7c:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e7e:	2300      	movs	r3, #0
     e80:	4699      	mov	r9, r3
     e82:	e7d9      	b.n	e38 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     e84:	6a2b      	ldr	r3, [r5, #32]
     e86:	4699      	mov	r9, r3
     e88:	b2c0      	uxtb	r0, r0
     e8a:	4b43      	ldr	r3, [pc, #268]	; (f98 <_usart_set_config+0x1c8>)
     e8c:	4798      	blx	r3
     e8e:	0001      	movs	r1, r0
     e90:	220e      	movs	r2, #14
     e92:	ab02      	add	r3, sp, #8
     e94:	469c      	mov	ip, r3
     e96:	4462      	add	r2, ip
     e98:	4648      	mov	r0, r9
     e9a:	4b40      	ldr	r3, [pc, #256]	; (f9c <_usart_set_config+0x1cc>)
     e9c:	4798      	blx	r3
     e9e:	e021      	b.n	ee4 <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     ea0:	2327      	movs	r3, #39	; 0x27
     ea2:	5ceb      	ldrb	r3, [r5, r3]
     ea4:	2b00      	cmp	r3, #0
     ea6:	d00b      	beq.n	ec0 <_usart_set_config+0xf0>
				status_code =
     ea8:	4653      	mov	r3, sl
     eaa:	9300      	str	r3, [sp, #0]
     eac:	464b      	mov	r3, r9
     eae:	220e      	movs	r2, #14
     eb0:	a902      	add	r1, sp, #8
     eb2:	468c      	mov	ip, r1
     eb4:	4462      	add	r2, ip
     eb6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     eb8:	6a28      	ldr	r0, [r5, #32]
     eba:	4f39      	ldr	r7, [pc, #228]	; (fa0 <_usart_set_config+0x1d0>)
     ebc:	47b8      	blx	r7
     ebe:	e011      	b.n	ee4 <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     ec0:	6a2b      	ldr	r3, [r5, #32]
     ec2:	469b      	mov	fp, r3
     ec4:	b2c0      	uxtb	r0, r0
     ec6:	4b34      	ldr	r3, [pc, #208]	; (f98 <_usart_set_config+0x1c8>)
     ec8:	4798      	blx	r3
     eca:	0001      	movs	r1, r0
				status_code =
     ecc:	4653      	mov	r3, sl
     ece:	9300      	str	r3, [sp, #0]
     ed0:	464b      	mov	r3, r9
     ed2:	220e      	movs	r2, #14
     ed4:	a802      	add	r0, sp, #8
     ed6:	4684      	mov	ip, r0
     ed8:	4462      	add	r2, ip
     eda:	4658      	mov	r0, fp
     edc:	4f30      	ldr	r7, [pc, #192]	; (fa0 <_usart_set_config+0x1d0>)
     ede:	47b8      	blx	r7
     ee0:	e000      	b.n	ee4 <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
     ee2:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     ee4:	2800      	cmp	r0, #0
     ee6:	d146      	bne.n	f76 <_usart_set_config+0x1a6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     ee8:	7e6b      	ldrb	r3, [r5, #25]
     eea:	2b00      	cmp	r3, #0
     eec:	d001      	beq.n	ef2 <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     eee:	7eab      	ldrb	r3, [r5, #26]
     ef0:	73b3      	strb	r3, [r6, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ef2:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     ef4:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     ef6:	2b00      	cmp	r3, #0
     ef8:	d1fb      	bne.n	ef2 <_usart_set_config+0x122>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     efa:	330e      	adds	r3, #14
     efc:	aa02      	add	r2, sp, #8
     efe:	4694      	mov	ip, r2
     f00:	4463      	add	r3, ip
     f02:	881b      	ldrh	r3, [r3, #0]
     f04:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     f06:	4643      	mov	r3, r8
     f08:	9f03      	ldr	r7, [sp, #12]
     f0a:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     f0c:	2327      	movs	r3, #39	; 0x27
     f0e:	5ceb      	ldrb	r3, [r5, r3]
     f10:	2b00      	cmp	r3, #0
     f12:	d101      	bne.n	f18 <_usart_set_config+0x148>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     f14:	3304      	adds	r3, #4
     f16:	431f      	orrs	r7, r3
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f18:	7e6a      	ldrb	r2, [r5, #25]
     f1a:	0292      	lsls	r2, r2, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f1c:	7f2b      	ldrb	r3, [r5, #28]
     f1e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f20:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f22:	7f6b      	ldrb	r3, [r5, #29]
     f24:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f26:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f28:	2324      	movs	r3, #36	; 0x24
     f2a:	5ceb      	ldrb	r3, [r5, r3]
     f2c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f2e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     f30:	2325      	movs	r3, #37	; 0x25
     f32:	5ceb      	ldrb	r3, [r5, r3]
     f34:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f36:	431a      	orrs	r2, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     f38:	7aab      	ldrb	r3, [r5, #10]
     f3a:	431a      	orrs	r2, r3
	ctrlb |= (uint32_t)config->character_size;
     f3c:	7aeb      	ldrb	r3, [r5, #11]
     f3e:	431a      	orrs	r2, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     f40:	892b      	ldrh	r3, [r5, #8]
     f42:	2bff      	cmp	r3, #255	; 0xff
     f44:	d01e      	beq.n	f84 <_usart_set_config+0x1b4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f46:	2180      	movs	r1, #128	; 0x80
     f48:	0449      	lsls	r1, r1, #17
     f4a:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
     f4c:	431a      	orrs	r2, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f4e:	232c      	movs	r3, #44	; 0x2c
     f50:	5ceb      	ldrb	r3, [r5, r3]
     f52:	2b00      	cmp	r3, #0
     f54:	d103      	bne.n	f5e <_usart_set_config+0x18e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f56:	4b13      	ldr	r3, [pc, #76]	; (fa4 <_usart_set_config+0x1d4>)
     f58:	789b      	ldrb	r3, [r3, #2]
     f5a:	079b      	lsls	r3, r3, #30
     f5c:	d501      	bpl.n	f62 <_usart_set_config+0x192>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f5e:	2380      	movs	r3, #128	; 0x80
     f60:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     f62:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     f64:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     f66:	2b00      	cmp	r3, #0
     f68:	d1fb      	bne.n	f62 <_usart_set_config+0x192>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     f6a:	6072      	str	r2, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     f6c:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     f6e:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     f70:	2b00      	cmp	r3, #0
     f72:	d1fb      	bne.n	f6c <_usart_set_config+0x19c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     f74:	6037      	str	r7, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
     f76:	b007      	add	sp, #28
     f78:	bc3c      	pop	{r2, r3, r4, r5}
     f7a:	4690      	mov	r8, r2
     f7c:	4699      	mov	r9, r3
     f7e:	46a2      	mov	sl, r4
     f80:	46ab      	mov	fp, r5
     f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
     f84:	7eeb      	ldrb	r3, [r5, #27]
     f86:	2b00      	cmp	r3, #0
     f88:	d0e1      	beq.n	f4e <_usart_set_config+0x17e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f8a:	2380      	movs	r3, #128	; 0x80
     f8c:	04db      	lsls	r3, r3, #19
     f8e:	431f      	orrs	r7, r3
     f90:	e7dd      	b.n	f4e <_usart_set_config+0x17e>
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	00000d9d 	.word	0x00000d9d
     f98:	00002465 	.word	0x00002465
     f9c:	00000b13 	.word	0x00000b13
     fa0:	00000b3d 	.word	0x00000b3d
     fa4:	41002000 	.word	0x41002000

00000fa8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     faa:	b089      	sub	sp, #36	; 0x24
     fac:	0006      	movs	r6, r0
     fae:	000c      	movs	r4, r1
     fb0:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     fb2:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fb4:	0008      	movs	r0, r1
     fb6:	4b42      	ldr	r3, [pc, #264]	; (10c0 <usart_init+0x118>)
     fb8:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     fba:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fbc:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     fbe:	6823      	ldr	r3, [r4, #0]
     fc0:	07db      	lsls	r3, r3, #31
     fc2:	d503      	bpl.n	fcc <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     fc4:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     fc6:	0028      	movs	r0, r5
     fc8:	b009      	add	sp, #36	; 0x24
     fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     fcc:	6823      	ldr	r3, [r4, #0]
     fce:	079b      	lsls	r3, r3, #30
     fd0:	d501      	bpl.n	fd6 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
     fd2:	251c      	movs	r5, #28
     fd4:	e7f7      	b.n	fc6 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     fd6:	2301      	movs	r3, #1
     fd8:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     fda:	4a3a      	ldr	r2, [pc, #232]	; (10c4 <usart_init+0x11c>)
     fdc:	6a11      	ldr	r1, [r2, #32]
     fde:	430b      	orrs	r3, r1
     fe0:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     fe2:	252d      	movs	r5, #45	; 0x2d
     fe4:	5d7b      	ldrb	r3, [r7, r5]
     fe6:	a907      	add	r1, sp, #28
     fe8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     fea:	b2c3      	uxtb	r3, r0
     fec:	9301      	str	r3, [sp, #4]
     fee:	0018      	movs	r0, r3
     ff0:	4b35      	ldr	r3, [pc, #212]	; (10c8 <usart_init+0x120>)
     ff2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ff4:	9801      	ldr	r0, [sp, #4]
     ff6:	4b35      	ldr	r3, [pc, #212]	; (10cc <usart_init+0x124>)
     ff8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ffa:	5d78      	ldrb	r0, [r7, r5]
     ffc:	2100      	movs	r1, #0
     ffe:	4b34      	ldr	r3, [pc, #208]	; (10d0 <usart_init+0x128>)
    1000:	4798      	blx	r3
	module->character_size = config->character_size;
    1002:	7afb      	ldrb	r3, [r7, #11]
    1004:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    1006:	2324      	movs	r3, #36	; 0x24
    1008:	5cfb      	ldrb	r3, [r7, r3]
    100a:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    100c:	2325      	movs	r3, #37	; 0x25
    100e:	5cfb      	ldrb	r3, [r7, r3]
    1010:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1012:	7efb      	ldrb	r3, [r7, #27]
    1014:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1016:	7f3b      	ldrb	r3, [r7, #28]
    1018:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    101a:	0039      	movs	r1, r7
    101c:	0030      	movs	r0, r6
    101e:	4b2d      	ldr	r3, [pc, #180]	; (10d4 <usart_init+0x12c>)
    1020:	4798      	blx	r3
    1022:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    1024:	d1cf      	bne.n	fc6 <usart_init+0x1e>
    1026:	ab06      	add	r3, sp, #24
    1028:	2280      	movs	r2, #128	; 0x80
    102a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    102c:	2200      	movs	r2, #0
    102e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1030:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1032:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1036:	9302      	str	r3, [sp, #8]
    1038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    103a:	9303      	str	r3, [sp, #12]
    103c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    103e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    1040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1042:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    1044:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    1046:	2700      	movs	r7, #0
    1048:	e006      	b.n	1058 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    104a:	0039      	movs	r1, r7
    104c:	0020      	movs	r0, r4
    104e:	4b22      	ldr	r3, [pc, #136]	; (10d8 <usart_init+0x130>)
    1050:	4798      	blx	r3
    1052:	e008      	b.n	1066 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    1054:	3701      	adds	r7, #1
    1056:	b2ff      	uxtb	r7, r7
    1058:	2f03      	cmp	r7, #3
    105a:	d80d      	bhi.n	1078 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    105c:	00bb      	lsls	r3, r7, #2
    105e:	aa02      	add	r2, sp, #8
    1060:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    1062:	2800      	cmp	r0, #0
    1064:	d0f1      	beq.n	104a <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    1066:	1c43      	adds	r3, r0, #1
    1068:	d0f4      	beq.n	1054 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    106a:	a906      	add	r1, sp, #24
    106c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    106e:	0c00      	lsrs	r0, r0, #16
    1070:	b2c0      	uxtb	r0, r0
    1072:	4b1a      	ldr	r3, [pc, #104]	; (10dc <usart_init+0x134>)
    1074:	4798      	blx	r3
    1076:	e7ed      	b.n	1054 <usart_init+0xac>
    1078:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    107a:	2a05      	cmp	r2, #5
    107c:	d806      	bhi.n	108c <usart_init+0xe4>
		module->callback[i]            = NULL;
    107e:	1c93      	adds	r3, r2, #2
    1080:	009b      	lsls	r3, r3, #2
    1082:	18f3      	adds	r3, r6, r3
    1084:	2100      	movs	r1, #0
    1086:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1088:	3201      	adds	r2, #1
    108a:	e7f6      	b.n	107a <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    108c:	2200      	movs	r2, #0
    108e:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1090:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1092:	2300      	movs	r3, #0
    1094:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1096:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1098:	3230      	adds	r2, #48	; 0x30
    109a:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    109c:	3201      	adds	r2, #1
    109e:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    10a0:	3201      	adds	r2, #1
    10a2:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    10a4:	3201      	adds	r2, #1
    10a6:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    10a8:	6830      	ldr	r0, [r6, #0]
    10aa:	4b05      	ldr	r3, [pc, #20]	; (10c0 <usart_init+0x118>)
    10ac:	4798      	blx	r3
    10ae:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    10b0:	490b      	ldr	r1, [pc, #44]	; (10e0 <usart_init+0x138>)
    10b2:	4b0c      	ldr	r3, [pc, #48]	; (10e4 <usart_init+0x13c>)
    10b4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    10b6:	00a4      	lsls	r4, r4, #2
    10b8:	4b0b      	ldr	r3, [pc, #44]	; (10e8 <usart_init+0x140>)
    10ba:	50e6      	str	r6, [r4, r3]
	return status_code;
    10bc:	e783      	b.n	fc6 <usart_init+0x1e>
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	00000d9d 	.word	0x00000d9d
    10c4:	40000400 	.word	0x40000400
    10c8:	00002449 	.word	0x00002449
    10cc:	000023c1 	.word	0x000023c1
    10d0:	00000bd9 	.word	0x00000bd9
    10d4:	00000dd1 	.word	0x00000dd1
    10d8:	00000c25 	.word	0x00000c25
    10dc:	0000252d 	.word	0x0000252d
    10e0:	000011d5 	.word	0x000011d5
    10e4:	00001e71 	.word	0x00001e71
    10e8:	200000e8 	.word	0x200000e8

000010ec <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    10ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10ee:	0006      	movs	r6, r0
    10f0:	000c      	movs	r4, r1
    10f2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10f4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    10f6:	4b0a      	ldr	r3, [pc, #40]	; (1120 <_usart_write_buffer+0x34>)
    10f8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    10fa:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    10fc:	b29b      	uxth	r3, r3
    10fe:	2b00      	cmp	r3, #0
    1100:	d003      	beq.n	110a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    1102:	4b08      	ldr	r3, [pc, #32]	; (1124 <_usart_write_buffer+0x38>)
    1104:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1106:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    110a:	85f5      	strh	r5, [r6, #46]	; 0x2e
    110c:	4b05      	ldr	r3, [pc, #20]	; (1124 <_usart_write_buffer+0x38>)
    110e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    1110:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    1112:	2205      	movs	r2, #5
    1114:	2333      	movs	r3, #51	; 0x33
    1116:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1118:	3b32      	subs	r3, #50	; 0x32
    111a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    111c:	2000      	movs	r0, #0
    111e:	e7f3      	b.n	1108 <_usart_write_buffer+0x1c>
    1120:	00001f39 	.word	0x00001f39
    1124:	00001f79 	.word	0x00001f79

00001128 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    112a:	0004      	movs	r4, r0
    112c:	000d      	movs	r5, r1
    112e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1130:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1132:	4b10      	ldr	r3, [pc, #64]	; (1174 <_usart_read_buffer+0x4c>)
    1134:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1136:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1138:	b29b      	uxth	r3, r3
    113a:	2b00      	cmp	r3, #0
    113c:	d003      	beq.n	1146 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    113e:	4b0e      	ldr	r3, [pc, #56]	; (1178 <_usart_read_buffer+0x50>)
    1140:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1142:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1146:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1148:	4b0b      	ldr	r3, [pc, #44]	; (1178 <_usart_read_buffer+0x50>)
    114a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    114c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    114e:	2205      	movs	r2, #5
    1150:	2332      	movs	r3, #50	; 0x32
    1152:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1154:	3b2e      	subs	r3, #46	; 0x2e
    1156:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1158:	7a23      	ldrb	r3, [r4, #8]
    115a:	2b00      	cmp	r3, #0
    115c:	d001      	beq.n	1162 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    115e:	2320      	movs	r3, #32
    1160:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1162:	7a63      	ldrb	r3, [r4, #9]
    1164:	2b00      	cmp	r3, #0
    1166:	d003      	beq.n	1170 <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1168:	2308      	movs	r3, #8
    116a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    116c:	2000      	movs	r0, #0
    116e:	e7e9      	b.n	1144 <_usart_read_buffer+0x1c>
    1170:	2000      	movs	r0, #0
    1172:	e7e7      	b.n	1144 <_usart_read_buffer+0x1c>
    1174:	00001f39 	.word	0x00001f39
    1178:	00001f79 	.word	0x00001f79

0000117c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    117c:	1c93      	adds	r3, r2, #2
    117e:	009b      	lsls	r3, r3, #2
    1180:	18c3      	adds	r3, r0, r3
    1182:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1184:	2301      	movs	r3, #1
    1186:	4093      	lsls	r3, r2
    1188:	001a      	movs	r2, r3
    118a:	2130      	movs	r1, #48	; 0x30
    118c:	5c43      	ldrb	r3, [r0, r1]
    118e:	4313      	orrs	r3, r2
    1190:	5443      	strb	r3, [r0, r1]
}
    1192:	4770      	bx	lr

00001194 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1194:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    1196:	2a00      	cmp	r2, #0
    1198:	d101      	bne.n	119e <usart_write_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    119a:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    119c:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    119e:	79c3      	ldrb	r3, [r0, #7]
    11a0:	2b00      	cmp	r3, #0
    11a2:	d101      	bne.n	11a8 <usart_write_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    11a4:	201c      	movs	r0, #28
    11a6:	e7f9      	b.n	119c <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    11a8:	4b01      	ldr	r3, [pc, #4]	; (11b0 <usart_write_buffer_job+0x1c>)
    11aa:	4798      	blx	r3
    11ac:	e7f6      	b.n	119c <usart_write_buffer_job+0x8>
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	000010ed 	.word	0x000010ed

000011b4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    11b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    11b6:	2a00      	cmp	r2, #0
    11b8:	d101      	bne.n	11be <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    11ba:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    11bc:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    11be:	7983      	ldrb	r3, [r0, #6]
    11c0:	2b00      	cmp	r3, #0
    11c2:	d101      	bne.n	11c8 <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    11c4:	201c      	movs	r0, #28
    11c6:	e7f9      	b.n	11bc <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    11c8:	4b01      	ldr	r3, [pc, #4]	; (11d0 <usart_read_buffer_job+0x1c>)
    11ca:	4798      	blx	r3
    11cc:	e7f6      	b.n	11bc <usart_read_buffer_job+0x8>
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	00001129 	.word	0x00001129

000011d4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    11d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11d6:	46c6      	mov	lr, r8
    11d8:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    11da:	0080      	lsls	r0, r0, #2
    11dc:	4b64      	ldr	r3, [pc, #400]	; (1370 <_usart_interrupt_handler+0x19c>)
    11de:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    11e0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    11e2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    11e4:	2b00      	cmp	r3, #0
    11e6:	d1fc      	bne.n	11e2 <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    11e8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    11ea:	7da6      	ldrb	r6, [r4, #22]
    11ec:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    11ee:	2330      	movs	r3, #48	; 0x30
    11f0:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    11f2:	2231      	movs	r2, #49	; 0x31
    11f4:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    11f6:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    11f8:	07f3      	lsls	r3, r6, #31
    11fa:	d525      	bpl.n	1248 <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    11fc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    11fe:	b29b      	uxth	r3, r3
    1200:	2b00      	cmp	r3, #0
    1202:	d01f      	beq.n	1244 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1204:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1206:	780a      	ldrb	r2, [r1, #0]
    1208:	b2d2      	uxtb	r2, r2
    120a:	b293      	uxth	r3, r2
    120c:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    120e:	1c48      	adds	r0, r1, #1
    1210:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1212:	796b      	ldrb	r3, [r5, #5]
    1214:	2b01      	cmp	r3, #1
    1216:	d00e      	beq.n	1236 <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1218:	4643      	mov	r3, r8
    121a:	05db      	lsls	r3, r3, #23
    121c:	0ddb      	lsrs	r3, r3, #23
    121e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1220:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1222:	3b01      	subs	r3, #1
    1224:	b29b      	uxth	r3, r3
    1226:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1228:	2b00      	cmp	r3, #0
    122a:	d10d      	bne.n	1248 <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    122c:	3301      	adds	r3, #1
    122e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1230:	3301      	adds	r3, #1
    1232:	75a3      	strb	r3, [r4, #22]
    1234:	e008      	b.n	1248 <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1236:	784b      	ldrb	r3, [r1, #1]
    1238:	021b      	lsls	r3, r3, #8
    123a:	4313      	orrs	r3, r2
    123c:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    123e:	1c88      	adds	r0, r1, #2
    1240:	62a8      	str	r0, [r5, #40]	; 0x28
    1242:	e7e9      	b.n	1218 <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1244:	2301      	movs	r3, #1
    1246:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1248:	07b3      	lsls	r3, r6, #30
    124a:	d506      	bpl.n	125a <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    124c:	2302      	movs	r3, #2
    124e:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1250:	2200      	movs	r2, #0
    1252:	3331      	adds	r3, #49	; 0x31
    1254:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1256:	07fb      	lsls	r3, r7, #31
    1258:	d41c      	bmi.n	1294 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    125a:	0773      	lsls	r3, r6, #29
    125c:	d564      	bpl.n	1328 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    125e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1260:	b29b      	uxth	r3, r3
    1262:	2b00      	cmp	r3, #0
    1264:	d05e      	beq.n	1324 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1266:	8b62      	ldrh	r2, [r4, #26]
    1268:	b2d2      	uxtb	r2, r2
    126a:	233f      	movs	r3, #63	; 0x3f
    126c:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    126e:	0711      	lsls	r1, r2, #28
    1270:	d501      	bpl.n	1276 <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1272:	2337      	movs	r3, #55	; 0x37
    1274:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1276:	2b00      	cmp	r3, #0
    1278:	d031      	beq.n	12de <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    127a:	079a      	lsls	r2, r3, #30
    127c:	d50e      	bpl.n	129c <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    127e:	221a      	movs	r2, #26
    1280:	2332      	movs	r3, #50	; 0x32
    1282:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1284:	3b30      	subs	r3, #48	; 0x30
    1286:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1288:	077b      	lsls	r3, r7, #29
    128a:	d54d      	bpl.n	1328 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    128c:	0028      	movs	r0, r5
    128e:	696b      	ldr	r3, [r5, #20]
    1290:	4798      	blx	r3
    1292:	e049      	b.n	1328 <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1294:	0028      	movs	r0, r5
    1296:	68eb      	ldr	r3, [r5, #12]
    1298:	4798      	blx	r3
    129a:	e7de      	b.n	125a <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    129c:	075a      	lsls	r2, r3, #29
    129e:	d505      	bpl.n	12ac <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    12a0:	221e      	movs	r2, #30
    12a2:	2332      	movs	r3, #50	; 0x32
    12a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    12a6:	3b2e      	subs	r3, #46	; 0x2e
    12a8:	8363      	strh	r3, [r4, #26]
    12aa:	e7ed      	b.n	1288 <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    12ac:	07da      	lsls	r2, r3, #31
    12ae:	d505      	bpl.n	12bc <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    12b0:	2213      	movs	r2, #19
    12b2:	2332      	movs	r3, #50	; 0x32
    12b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    12b6:	3b31      	subs	r3, #49	; 0x31
    12b8:	8363      	strh	r3, [r4, #26]
    12ba:	e7e5      	b.n	1288 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    12bc:	06da      	lsls	r2, r3, #27
    12be:	d505      	bpl.n	12cc <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    12c0:	2242      	movs	r2, #66	; 0x42
    12c2:	2332      	movs	r3, #50	; 0x32
    12c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    12c6:	3b22      	subs	r3, #34	; 0x22
    12c8:	8363      	strh	r3, [r4, #26]
    12ca:	e7dd      	b.n	1288 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    12cc:	2220      	movs	r2, #32
    12ce:	421a      	tst	r2, r3
    12d0:	d0da      	beq.n	1288 <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    12d2:	3221      	adds	r2, #33	; 0x21
    12d4:	2332      	movs	r3, #50	; 0x32
    12d6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    12d8:	3b12      	subs	r3, #18
    12da:	8363      	strh	r3, [r4, #26]
    12dc:	e7d4      	b.n	1288 <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    12de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    12e0:	05db      	lsls	r3, r3, #23
    12e2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    12e4:	b2da      	uxtb	r2, r3
    12e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    12e8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    12ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12ec:	1c51      	adds	r1, r2, #1
    12ee:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12f0:	7969      	ldrb	r1, [r5, #5]
    12f2:	2901      	cmp	r1, #1
    12f4:	d010      	beq.n	1318 <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    12f6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12f8:	3b01      	subs	r3, #1
    12fa:	b29b      	uxth	r3, r3
    12fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    12fe:	2b00      	cmp	r3, #0
    1300:	d112      	bne.n	1328 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1302:	3304      	adds	r3, #4
    1304:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1306:	2200      	movs	r2, #0
    1308:	332e      	adds	r3, #46	; 0x2e
    130a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    130c:	07bb      	lsls	r3, r7, #30
    130e:	d50b      	bpl.n	1328 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1310:	0028      	movs	r0, r5
    1312:	692b      	ldr	r3, [r5, #16]
    1314:	4798      	blx	r3
    1316:	e007      	b.n	1328 <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1318:	0a1b      	lsrs	r3, r3, #8
    131a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    131c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    131e:	3301      	adds	r3, #1
    1320:	626b      	str	r3, [r5, #36]	; 0x24
    1322:	e7e8      	b.n	12f6 <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1324:	2304      	movs	r3, #4
    1326:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1328:	06f3      	lsls	r3, r6, #27
    132a:	d504      	bpl.n	1336 <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    132c:	2310      	movs	r3, #16
    132e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1330:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1332:	06fb      	lsls	r3, r7, #27
    1334:	d410      	bmi.n	1358 <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1336:	06b3      	lsls	r3, r6, #26
    1338:	d504      	bpl.n	1344 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    133a:	2320      	movs	r3, #32
    133c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    133e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1340:	073b      	lsls	r3, r7, #28
    1342:	d40d      	bmi.n	1360 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1344:	0733      	lsls	r3, r6, #28
    1346:	d504      	bpl.n	1352 <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1348:	2308      	movs	r3, #8
    134a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    134c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    134e:	06bb      	lsls	r3, r7, #26
    1350:	d40a      	bmi.n	1368 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1352:	bc04      	pop	{r2}
    1354:	4690      	mov	r8, r2
    1356:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1358:	0028      	movs	r0, r5
    135a:	69eb      	ldr	r3, [r5, #28]
    135c:	4798      	blx	r3
    135e:	e7ea      	b.n	1336 <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1360:	0028      	movs	r0, r5
    1362:	69ab      	ldr	r3, [r5, #24]
    1364:	4798      	blx	r3
    1366:	e7ed      	b.n	1344 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1368:	6a2b      	ldr	r3, [r5, #32]
    136a:	0028      	movs	r0, r5
    136c:	4798      	blx	r3
}
    136e:	e7f0      	b.n	1352 <_usart_interrupt_handler+0x17e>
    1370:	200000e8 	.word	0x200000e8

00001374 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1374:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1376:	2202      	movs	r2, #2
    1378:	761a      	strb	r2, [r3, #24]
}
    137a:	4770      	bx	lr

0000137c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    137c:	b5f0      	push	{r4, r5, r6, r7, lr}
    137e:	b087      	sub	sp, #28
    1380:	0007      	movs	r7, r0
    1382:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1384:	6806      	ldr	r6, [r0, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1386:	ab05      	add	r3, sp, #20
    1388:	2280      	movs	r2, #128	; 0x80
    138a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    138c:	2200      	movs	r2, #0
    138e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1390:	2101      	movs	r1, #1
    1392:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1394:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    1396:	782b      	ldrb	r3, [r5, #0]
    1398:	2b00      	cmp	r3, #0
    139a:	d101      	bne.n	13a0 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    139c:	ab05      	add	r3, sp, #20
    139e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    13a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    13a2:	9301      	str	r3, [sp, #4]
    13a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    13a6:	9302      	str	r3, [sp, #8]
    13a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    13aa:	9303      	str	r3, [sp, #12]
    13ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    13ae:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    13b0:	2400      	movs	r4, #0
    13b2:	e006      	b.n	13c2 <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
    13b4:	0021      	movs	r1, r4
    13b6:	0030      	movs	r0, r6
    13b8:	4b3d      	ldr	r3, [pc, #244]	; (14b0 <_spi_set_config+0x134>)
    13ba:	4798      	blx	r3
    13bc:	e008      	b.n	13d0 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
    13be:	3401      	adds	r4, #1
    13c0:	b2e4      	uxtb	r4, r4
    13c2:	2c03      	cmp	r4, #3
    13c4:	d80d      	bhi.n	13e2 <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    13c6:	00a3      	lsls	r3, r4, #2
    13c8:	aa01      	add	r2, sp, #4
    13ca:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    13cc:	2800      	cmp	r0, #0
    13ce:	d0f1      	beq.n	13b4 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
    13d0:	1c43      	adds	r3, r0, #1
    13d2:	d0f4      	beq.n	13be <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    13d4:	a905      	add	r1, sp, #20
    13d6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    13d8:	0c00      	lsrs	r0, r0, #16
    13da:	b2c0      	uxtb	r0, r0
    13dc:	4b35      	ldr	r3, [pc, #212]	; (14b4 <_spi_set_config+0x138>)
    13de:	4798      	blx	r3
    13e0:	e7ed      	b.n	13be <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
    13e2:	782b      	ldrb	r3, [r5, #0]
    13e4:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
    13e6:	7c2b      	ldrb	r3, [r5, #16]
    13e8:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
    13ea:	7cab      	ldrb	r3, [r5, #18]
    13ec:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    13ee:	7d2b      	ldrb	r3, [r5, #20]
    13f0:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    13f2:	2200      	movs	r2, #0
    13f4:	466b      	mov	r3, sp
    13f6:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    13f8:	782b      	ldrb	r3, [r5, #0]
    13fa:	2b01      	cmp	r3, #1
    13fc:	d014      	beq.n	1428 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    13fe:	782b      	ldrb	r3, [r5, #0]
    1400:	2b00      	cmp	r3, #0
    1402:	d127      	bne.n	1454 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1404:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    1406:	8baa      	ldrh	r2, [r5, #28]
    1408:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    140a:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    140c:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    140e:	7fef      	ldrb	r7, [r5, #31]
    1410:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1412:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
    1414:	4320      	orrs	r0, r4
    1416:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    1418:	2020      	movs	r0, #32
    141a:	5c28      	ldrb	r0, [r5, r0]
    141c:	2800      	cmp	r0, #0
    141e:	d01b      	beq.n	1458 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1420:	2140      	movs	r1, #64	; 0x40
    1422:	4311      	orrs	r1, r2
    1424:	b289      	uxth	r1, r1
    1426:	e017      	b.n	1458 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1428:	6838      	ldr	r0, [r7, #0]
    142a:	4b23      	ldr	r3, [pc, #140]	; (14b8 <_spi_set_config+0x13c>)
    142c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    142e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1430:	b2c0      	uxtb	r0, r0
    1432:	4b22      	ldr	r3, [pc, #136]	; (14bc <_spi_set_config+0x140>)
    1434:	4798      	blx	r3
    1436:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1438:	466b      	mov	r3, sp
    143a:	1c9a      	adds	r2, r3, #2
    143c:	69a8      	ldr	r0, [r5, #24]
    143e:	4b20      	ldr	r3, [pc, #128]	; (14c0 <_spi_set_config+0x144>)
    1440:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    1442:	2800      	cmp	r0, #0
    1444:	d001      	beq.n	144a <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
    1446:	2017      	movs	r0, #23
    1448:	e030      	b.n	14ac <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
    144a:	466b      	mov	r3, sp
    144c:	3302      	adds	r3, #2
    144e:	781b      	ldrb	r3, [r3, #0]
    1450:	7333      	strb	r3, [r6, #12]
    1452:	e7d4      	b.n	13fe <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
    1454:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
    1456:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1458:	686a      	ldr	r2, [r5, #4]
    145a:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    145c:	68aa      	ldr	r2, [r5, #8]
    145e:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1460:	68ea      	ldr	r2, [r5, #12]
    1462:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1464:	7c2a      	ldrb	r2, [r5, #16]
    1466:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1468:	7c69      	ldrb	r1, [r5, #17]
    146a:	2900      	cmp	r1, #0
    146c:	d103      	bne.n	1476 <_spi_set_config+0xfa>
    146e:	4915      	ldr	r1, [pc, #84]	; (14c4 <_spi_set_config+0x148>)
    1470:	7889      	ldrb	r1, [r1, #2]
    1472:	0789      	lsls	r1, r1, #30
    1474:	d501      	bpl.n	147a <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1476:	2180      	movs	r1, #128	; 0x80
    1478:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    147a:	7ca9      	ldrb	r1, [r5, #18]
    147c:	2900      	cmp	r1, #0
    147e:	d002      	beq.n	1486 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1480:	2180      	movs	r1, #128	; 0x80
    1482:	0289      	lsls	r1, r1, #10
    1484:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1486:	7ce9      	ldrb	r1, [r5, #19]
    1488:	2900      	cmp	r1, #0
    148a:	d002      	beq.n	1492 <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    148c:	2180      	movs	r1, #128	; 0x80
    148e:	0089      	lsls	r1, r1, #2
    1490:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1492:	7d29      	ldrb	r1, [r5, #20]
    1494:	2900      	cmp	r1, #0
    1496:	d002      	beq.n	149e <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1498:	2180      	movs	r1, #128	; 0x80
    149a:	0189      	lsls	r1, r1, #6
    149c:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    149e:	6831      	ldr	r1, [r6, #0]
    14a0:	430b      	orrs	r3, r1
    14a2:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    14a4:	6873      	ldr	r3, [r6, #4]
    14a6:	431a      	orrs	r2, r3
    14a8:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
    14aa:	2000      	movs	r0, #0
}
    14ac:	b007      	add	sp, #28
    14ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14b0:	00000c25 	.word	0x00000c25
    14b4:	0000252d 	.word	0x0000252d
    14b8:	00000d9d 	.word	0x00000d9d
    14bc:	00002465 	.word	0x00002465
    14c0:	00000b13 	.word	0x00000b13
    14c4:	41002000 	.word	0x41002000

000014c8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    14c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ca:	b085      	sub	sp, #20
    14cc:	0005      	movs	r5, r0
    14ce:	000c      	movs	r4, r1
    14d0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    14d2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    14d4:	680b      	ldr	r3, [r1, #0]
    14d6:	079b      	lsls	r3, r3, #30
    14d8:	d502      	bpl.n	14e0 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    14da:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    14dc:	b005      	add	sp, #20
    14de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    14e0:	680b      	ldr	r3, [r1, #0]
    14e2:	07db      	lsls	r3, r3, #31
    14e4:	d501      	bpl.n	14ea <spi_init+0x22>
		return STATUS_BUSY;
    14e6:	2005      	movs	r0, #5
    14e8:	e7f8      	b.n	14dc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14ea:	0008      	movs	r0, r1
    14ec:	4b28      	ldr	r3, [pc, #160]	; (1590 <spi_init+0xc8>)
    14ee:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    14f0:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14f2:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14f4:	2301      	movs	r3, #1
    14f6:	4093      	lsls	r3, r2
    14f8:	4a26      	ldr	r2, [pc, #152]	; (1594 <spi_init+0xcc>)
    14fa:	6a11      	ldr	r1, [r2, #32]
    14fc:	430b      	orrs	r3, r1
    14fe:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1500:	2724      	movs	r7, #36	; 0x24
    1502:	5df3      	ldrb	r3, [r6, r7]
    1504:	a903      	add	r1, sp, #12
    1506:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1508:	b2c3      	uxtb	r3, r0
    150a:	9301      	str	r3, [sp, #4]
    150c:	0018      	movs	r0, r3
    150e:	4b22      	ldr	r3, [pc, #136]	; (1598 <spi_init+0xd0>)
    1510:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1512:	9801      	ldr	r0, [sp, #4]
    1514:	4b21      	ldr	r3, [pc, #132]	; (159c <spi_init+0xd4>)
    1516:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1518:	5df0      	ldrb	r0, [r6, r7]
    151a:	2100      	movs	r1, #0
    151c:	4b20      	ldr	r3, [pc, #128]	; (15a0 <spi_init+0xd8>)
    151e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1520:	7833      	ldrb	r3, [r6, #0]
    1522:	2b01      	cmp	r3, #1
    1524:	d008      	beq.n	1538 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
    1526:	7833      	ldrb	r3, [r6, #0]
    1528:	2b00      	cmp	r3, #0
    152a:	d103      	bne.n	1534 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    152c:	6823      	ldr	r3, [r4, #0]
    152e:	2208      	movs	r2, #8
    1530:	4313      	orrs	r3, r2
    1532:	6023      	str	r3, [r4, #0]
{
    1534:	2300      	movs	r3, #0
    1536:	e00b      	b.n	1550 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1538:	6823      	ldr	r3, [r4, #0]
    153a:	220c      	movs	r2, #12
    153c:	4313      	orrs	r3, r2
    153e:	6023      	str	r3, [r4, #0]
    1540:	e7f1      	b.n	1526 <spi_init+0x5e>
		module->callback[i]        = NULL;
    1542:	1c9a      	adds	r2, r3, #2
    1544:	0092      	lsls	r2, r2, #2
    1546:	18aa      	adds	r2, r5, r2
    1548:	2100      	movs	r1, #0
    154a:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    154c:	3301      	adds	r3, #1
    154e:	b2db      	uxtb	r3, r3
    1550:	2b06      	cmp	r3, #6
    1552:	d9f6      	bls.n	1542 <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
    1554:	2200      	movs	r2, #0
    1556:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1558:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    155a:	2300      	movs	r3, #0
    155c:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    155e:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1560:	3236      	adds	r2, #54	; 0x36
    1562:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
    1564:	3201      	adds	r2, #1
    1566:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
    1568:	3201      	adds	r2, #1
    156a:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    156c:	3a35      	subs	r2, #53	; 0x35
    156e:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
    1570:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1572:	6828      	ldr	r0, [r5, #0]
    1574:	4b06      	ldr	r3, [pc, #24]	; (1590 <spi_init+0xc8>)
    1576:	4798      	blx	r3
    1578:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    157a:	490a      	ldr	r1, [pc, #40]	; (15a4 <spi_init+0xdc>)
    157c:	4b0a      	ldr	r3, [pc, #40]	; (15a8 <spi_init+0xe0>)
    157e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1580:	00a4      	lsls	r4, r4, #2
    1582:	4b0a      	ldr	r3, [pc, #40]	; (15ac <spi_init+0xe4>)
    1584:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
    1586:	0031      	movs	r1, r6
    1588:	0028      	movs	r0, r5
    158a:	4b09      	ldr	r3, [pc, #36]	; (15b0 <spi_init+0xe8>)
    158c:	4798      	blx	r3
    158e:	e7a5      	b.n	14dc <spi_init+0x14>
    1590:	00000d9d 	.word	0x00000d9d
    1594:	40000400 	.word	0x40000400
    1598:	00002449 	.word	0x00002449
    159c:	000023c1 	.word	0x000023c1
    15a0:	00000bd9 	.word	0x00000bd9
    15a4:	00001ca5 	.word	0x00001ca5
    15a8:	00001e71 	.word	0x00001e71
    15ac:	200000e8 	.word	0x200000e8
    15b0:	0000137d 	.word	0x0000137d

000015b4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    15b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15b6:	0004      	movs	r4, r0
    15b8:	000e      	movs	r6, r1
    15ba:	0017      	movs	r7, r2
    15bc:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    15be:	2338      	movs	r3, #56	; 0x38
    15c0:	5cc3      	ldrb	r3, [r0, r3]
    15c2:	2b05      	cmp	r3, #5
    15c4:	d06d      	beq.n	16a2 <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    15c6:	2a00      	cmp	r2, #0
    15c8:	d101      	bne.n	15ce <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    15ca:	2217      	movs	r2, #23
    15cc:	e06a      	b.n	16a4 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
    15ce:	79c3      	ldrb	r3, [r0, #7]
    15d0:	2b00      	cmp	r3, #0
    15d2:	d101      	bne.n	15d8 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
    15d4:	221c      	movs	r2, #28
    15d6:	e065      	b.n	16a4 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    15d8:	7943      	ldrb	r3, [r0, #5]
    15da:	2b00      	cmp	r3, #0
    15dc:	d103      	bne.n	15e6 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    15de:	6803      	ldr	r3, [r0, #0]
    15e0:	7e1b      	ldrb	r3, [r3, #24]
    15e2:	079b      	lsls	r3, r3, #30
    15e4:	d401      	bmi.n	15ea <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    15e6:	2000      	movs	r0, #0
    15e8:	e037      	b.n	165a <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
    15ea:	4b2f      	ldr	r3, [pc, #188]	; (16a8 <spi_read_buffer_wait+0xf4>)
    15ec:	4798      	blx	r3
    15ee:	e7fa      	b.n	15e6 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    15f0:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    15f2:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
    15f4:	07d2      	lsls	r2, r2, #31
    15f6:	d5fb      	bpl.n	15f0 <spi_read_buffer_wait+0x3c>
    15f8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    15fa:	07d2      	lsls	r2, r2, #31
    15fc:	d534      	bpl.n	1668 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    15fe:	05ea      	lsls	r2, r5, #23
    1600:	0dd2      	lsrs	r2, r2, #23
    1602:	629a      	str	r2, [r3, #40]	; 0x28
    1604:	e030      	b.n	1668 <spi_read_buffer_wait+0xb4>
    1606:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1608:	4a28      	ldr	r2, [pc, #160]	; (16ac <spi_read_buffer_wait+0xf8>)
    160a:	4293      	cmp	r3, r2
    160c:	d805      	bhi.n	161a <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    160e:	6822      	ldr	r2, [r4, #0]
    1610:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1612:	0752      	lsls	r2, r2, #29
    1614:	d401      	bmi.n	161a <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1616:	3301      	adds	r3, #1
    1618:	e7f6      	b.n	1608 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
    161a:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    161c:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    161e:	0792      	lsls	r2, r2, #30
    1620:	d404      	bmi.n	162c <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1622:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1624:	075b      	lsls	r3, r3, #29
    1626:	d422      	bmi.n	166e <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
    1628:	2212      	movs	r2, #18
    162a:	e03b      	b.n	16a4 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
    162c:	0020      	movs	r0, r4
    162e:	4b1e      	ldr	r3, [pc, #120]	; (16a8 <spi_read_buffer_wait+0xf4>)
    1630:	4798      	blx	r3
				return STATUS_ABORTED;
    1632:	2204      	movs	r2, #4
    1634:	e036      	b.n	16a4 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1636:	2200      	movs	r2, #0
    1638:	e026      	b.n	1688 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    163a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    163c:	05ff      	lsls	r7, r7, #23
    163e:	0dff      	lsrs	r7, r7, #23
    1640:	e001      	b.n	1646 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
    1642:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
    1644:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
    1646:	2a00      	cmp	r2, #0
    1648:	d12c      	bne.n	16a4 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
    164a:	1c43      	adds	r3, r0, #1
    164c:	b29b      	uxth	r3, r3
    164e:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1650:	79a2      	ldrb	r2, [r4, #6]
    1652:	2a01      	cmp	r2, #1
    1654:	d01e      	beq.n	1694 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
    1656:	0018      	movs	r0, r3
    1658:	000f      	movs	r7, r1
	while (length--) {
    165a:	1e79      	subs	r1, r7, #1
    165c:	b289      	uxth	r1, r1
    165e:	2f00      	cmp	r7, #0
    1660:	d01d      	beq.n	169e <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
    1662:	7963      	ldrb	r3, [r4, #5]
    1664:	2b01      	cmp	r3, #1
    1666:	d0c3      	beq.n	15f0 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
    1668:	7963      	ldrb	r3, [r4, #5]
    166a:	2b00      	cmp	r3, #0
    166c:	d0cb      	beq.n	1606 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    166e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1670:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    1672:	0752      	lsls	r2, r2, #29
    1674:	d5fb      	bpl.n	166e <spi_read_buffer_wait+0xba>
    1676:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1678:	0752      	lsls	r2, r2, #29
    167a:	d5e2      	bpl.n	1642 <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    167c:	8b5a      	ldrh	r2, [r3, #26]
    167e:	0752      	lsls	r2, r2, #29
    1680:	d5d9      	bpl.n	1636 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1682:	2204      	movs	r2, #4
    1684:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1686:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1688:	79a7      	ldrb	r7, [r4, #6]
    168a:	2f01      	cmp	r7, #1
    168c:	d0d5      	beq.n	163a <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    168e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    1690:	b2ff      	uxtb	r7, r7
    1692:	e7d8      	b.n	1646 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    1694:	3002      	adds	r0, #2
    1696:	0a3f      	lsrs	r7, r7, #8
    1698:	54f7      	strb	r7, [r6, r3]
    169a:	b283      	uxth	r3, r0
    169c:	e7db      	b.n	1656 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
    169e:	2200      	movs	r2, #0
    16a0:	e000      	b.n	16a4 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
    16a2:	2205      	movs	r2, #5
}
    16a4:	0010      	movs	r0, r2
    16a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16a8:	00001375 	.word	0x00001375
    16ac:	00002710 	.word	0x00002710

000016b0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    16b0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    16b2:	7943      	ldrb	r3, [r0, #5]
    16b4:	2b01      	cmp	r3, #1
    16b6:	d001      	beq.n	16bc <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
    16b8:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    16ba:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    16bc:	7a03      	ldrb	r3, [r0, #8]
    16be:	2b00      	cmp	r3, #0
    16c0:	d16c      	bne.n	179c <spi_select_slave+0xec>
		if (select) {
    16c2:	2a00      	cmp	r2, #0
    16c4:	d058      	beq.n	1778 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
    16c6:	784b      	ldrb	r3, [r1, #1]
    16c8:	2b00      	cmp	r3, #0
    16ca:	d043      	beq.n	1754 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    16cc:	6803      	ldr	r3, [r0, #0]
    16ce:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    16d0:	07db      	lsls	r3, r3, #31
    16d2:	d411      	bmi.n	16f8 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
    16d4:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    16d6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    16d8:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    16da:	2900      	cmp	r1, #0
    16dc:	d10a      	bne.n	16f4 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
    16de:	01db      	lsls	r3, r3, #7
    16e0:	4931      	ldr	r1, [pc, #196]	; (17a8 <spi_select_slave+0xf8>)
    16e2:	468c      	mov	ip, r1
    16e4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    16e6:	211f      	movs	r1, #31
    16e8:	4011      	ands	r1, r2
    16ea:	2201      	movs	r2, #1
    16ec:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    16ee:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    16f0:	2005      	movs	r0, #5
    16f2:	e7e2      	b.n	16ba <spi_select_slave+0xa>
		return NULL;
    16f4:	2300      	movs	r3, #0
    16f6:	e7f6      	b.n	16e6 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
    16f8:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    16fa:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    16fc:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    16fe:	2c00      	cmp	r4, #0
    1700:	d104      	bne.n	170c <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
    1702:	01db      	lsls	r3, r3, #7
    1704:	4c28      	ldr	r4, [pc, #160]	; (17a8 <spi_select_slave+0xf8>)
    1706:	46a4      	mov	ip, r4
    1708:	4463      	add	r3, ip
    170a:	e000      	b.n	170e <spi_select_slave+0x5e>
		return NULL;
    170c:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    170e:	241f      	movs	r4, #31
    1710:	4014      	ands	r4, r2
    1712:	2201      	movs	r2, #1
    1714:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1716:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
    1718:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    171a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    171c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    171e:	07c9      	lsls	r1, r1, #31
    1720:	d500      	bpl.n	1724 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1722:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1724:	79c3      	ldrb	r3, [r0, #7]
    1726:	2b00      	cmp	r3, #0
    1728:	d13a      	bne.n	17a0 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    172a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    172c:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
    172e:	0752      	lsls	r2, r2, #29
    1730:	d5fb      	bpl.n	172a <spi_select_slave+0x7a>
    1732:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1734:	0752      	lsls	r2, r2, #29
    1736:	d535      	bpl.n	17a4 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1738:	8b5a      	ldrh	r2, [r3, #26]
    173a:	0752      	lsls	r2, r2, #29
    173c:	d501      	bpl.n	1742 <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    173e:	2204      	movs	r2, #4
    1740:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1742:	7982      	ldrb	r2, [r0, #6]
    1744:	2a01      	cmp	r2, #1
    1746:	d002      	beq.n	174e <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
    174a:	2000      	movs	r0, #0
    174c:	e7b5      	b.n	16ba <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1750:	2000      	movs	r0, #0
    1752:	e7b2      	b.n	16ba <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1754:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1756:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1758:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    175a:	2900      	cmp	r1, #0
    175c:	d10a      	bne.n	1774 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
    175e:	01db      	lsls	r3, r3, #7
    1760:	4911      	ldr	r1, [pc, #68]	; (17a8 <spi_select_slave+0xf8>)
    1762:	468c      	mov	ip, r1
    1764:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1766:	211f      	movs	r1, #31
    1768:	4011      	ands	r1, r2
    176a:	2201      	movs	r2, #1
    176c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    176e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1770:	2000      	movs	r0, #0
    1772:	e7a2      	b.n	16ba <spi_select_slave+0xa>
		return NULL;
    1774:	2300      	movs	r3, #0
    1776:	e7f6      	b.n	1766 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
    1778:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    177a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    177c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    177e:	2900      	cmp	r1, #0
    1780:	d10a      	bne.n	1798 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
    1782:	01db      	lsls	r3, r3, #7
    1784:	4908      	ldr	r1, [pc, #32]	; (17a8 <spi_select_slave+0xf8>)
    1786:	468c      	mov	ip, r1
    1788:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    178a:	211f      	movs	r1, #31
    178c:	4011      	ands	r1, r2
    178e:	2201      	movs	r2, #1
    1790:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1792:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1794:	2000      	movs	r0, #0
    1796:	e790      	b.n	16ba <spi_select_slave+0xa>
		return NULL;
    1798:	2300      	movs	r3, #0
    179a:	e7f6      	b.n	178a <spi_select_slave+0xda>
    179c:	2000      	movs	r0, #0
    179e:	e78c      	b.n	16ba <spi_select_slave+0xa>
    17a0:	2000      	movs	r0, #0
    17a2:	e78a      	b.n	16ba <spi_select_slave+0xa>
    17a4:	2000      	movs	r0, #0
    17a6:	e788      	b.n	16ba <spi_select_slave+0xa>
    17a8:	41004400 	.word	0x41004400

000017ac <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    17ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ae:	46d6      	mov	lr, sl
    17b0:	464f      	mov	r7, r9
    17b2:	4646      	mov	r6, r8
    17b4:	b5c0      	push	{r6, r7, lr}
    17b6:	b082      	sub	sp, #8
    17b8:	0004      	movs	r4, r0
    17ba:	468a      	mov	sl, r1
    17bc:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    17be:	2338      	movs	r3, #56	; 0x38
    17c0:	5cc3      	ldrb	r3, [r0, r3]
    17c2:	2b05      	cmp	r3, #5
    17c4:	d100      	bne.n	17c8 <spi_write_buffer_wait+0x1c>
    17c6:	e0d8      	b.n	197a <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    17c8:	2a00      	cmp	r2, #0
    17ca:	d101      	bne.n	17d0 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
    17cc:	2017      	movs	r0, #23
    17ce:	e0d5      	b.n	197c <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    17d0:	7943      	ldrb	r3, [r0, #5]
    17d2:	2b00      	cmp	r3, #0
    17d4:	d103      	bne.n	17de <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    17d6:	6803      	ldr	r3, [r0, #0]
    17d8:	7e1b      	ldrb	r3, [r3, #24]
    17da:	079b      	lsls	r3, r3, #30
    17dc:	d402      	bmi.n	17e4 <spi_write_buffer_wait+0x38>
    17de:	46bc      	mov	ip, r7
    17e0:	2600      	movs	r6, #0
    17e2:	e025      	b.n	1830 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    17e4:	4b6a      	ldr	r3, [pc, #424]	; (1990 <spi_write_buffer_wait+0x1e4>)
    17e6:	4798      	blx	r3
    17e8:	e7f9      	b.n	17de <spi_write_buffer_wait+0x32>
    17ea:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    17ec:	4a69      	ldr	r2, [pc, #420]	; (1994 <spi_write_buffer_wait+0x1e8>)
    17ee:	4293      	cmp	r3, r2
    17f0:	d805      	bhi.n	17fe <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17f2:	6822      	ldr	r2, [r4, #0]
    17f4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    17f6:	07d2      	lsls	r2, r2, #31
    17f8:	d401      	bmi.n	17fe <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    17fa:	3301      	adds	r3, #1
    17fc:	e7f6      	b.n	17ec <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
    17fe:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1800:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1802:	0792      	lsls	r2, r2, #30
    1804:	d404      	bmi.n	1810 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1806:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
    1808:	07db      	lsls	r3, r3, #31
    180a:	d418      	bmi.n	183e <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    180c:	2012      	movs	r0, #18
    180e:	e0b5      	b.n	197c <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
    1810:	0020      	movs	r0, r4
    1812:	4b5f      	ldr	r3, [pc, #380]	; (1990 <spi_write_buffer_wait+0x1e4>)
    1814:	4798      	blx	r3
				return STATUS_ABORTED;
    1816:	2004      	movs	r0, #4
    1818:	e0b0      	b.n	197c <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    181a:	3602      	adds	r6, #2
    181c:	b2b6      	uxth	r6, r6
    181e:	4652      	mov	r2, sl
    1820:	5dd2      	ldrb	r2, [r2, r7]
    1822:	0212      	lsls	r2, r2, #8
    1824:	4302      	orrs	r2, r0
    1826:	e017      	b.n	1858 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    1828:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
    182a:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
    182c:	2b00      	cmp	r3, #0
    182e:	d11a      	bne.n	1866 <spi_write_buffer_wait+0xba>
	while (length--) {
    1830:	1e79      	subs	r1, r7, #1
    1832:	b289      	uxth	r1, r1
    1834:	2f00      	cmp	r7, #0
    1836:	d06c      	beq.n	1912 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
    1838:	7963      	ldrb	r3, [r4, #5]
    183a:	2b00      	cmp	r3, #0
    183c:	d0d5      	beq.n	17ea <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    183e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1840:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    1842:	07d2      	lsls	r2, r2, #31
    1844:	d5fb      	bpl.n	183e <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
    1846:	1c77      	adds	r7, r6, #1
    1848:	b2bf      	uxth	r7, r7
    184a:	4652      	mov	r2, sl
    184c:	5d90      	ldrb	r0, [r2, r6]
    184e:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1850:	79a5      	ldrb	r5, [r4, #6]
    1852:	2d01      	cmp	r5, #1
    1854:	d0e1      	beq.n	181a <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
    1856:	003e      	movs	r6, r7
    1858:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    185a:	07f8      	lsls	r0, r7, #31
    185c:	d5e4      	bpl.n	1828 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    185e:	05d2      	lsls	r2, r2, #23
    1860:	0dd2      	lsrs	r2, r2, #23
    1862:	629a      	str	r2, [r3, #40]	; 0x28
    1864:	e7e0      	b.n	1828 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    1866:	7963      	ldrb	r3, [r4, #5]
    1868:	2b00      	cmp	r3, #0
    186a:	d040      	beq.n	18ee <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    186c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    186e:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1870:	0752      	lsls	r2, r2, #29
    1872:	d5fb      	bpl.n	186c <spi_write_buffer_wait+0xc0>
    1874:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1876:	0752      	lsls	r2, r2, #29
    1878:	d508      	bpl.n	188c <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    187a:	8b5a      	ldrh	r2, [r3, #26]
    187c:	0752      	lsls	r2, r2, #29
    187e:	d501      	bpl.n	1884 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1880:	2204      	movs	r2, #4
    1882:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1884:	79a2      	ldrb	r2, [r4, #6]
    1886:	2a01      	cmp	r2, #1
    1888:	d041      	beq.n	190e <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
    188c:	4660      	mov	r0, ip
    188e:	3801      	subs	r0, #1
    1890:	b283      	uxth	r3, r0
    1892:	469c      	mov	ip, r3
    1894:	000f      	movs	r7, r1
    1896:	e7cb      	b.n	1830 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1898:	3602      	adds	r6, #2
    189a:	4655      	mov	r5, sl
    189c:	5c2f      	ldrb	r7, [r5, r0]
    189e:	023f      	lsls	r7, r7, #8
    18a0:	4640      	mov	r0, r8
    18a2:	4307      	orrs	r7, r0
    18a4:	b2b0      	uxth	r0, r6
    18a6:	e01b      	b.n	18e0 <spi_write_buffer_wait+0x134>
						length--;
    18a8:	3901      	subs	r1, #1
    18aa:	b289      	uxth	r1, r1
    18ac:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    18ae:	6822      	ldr	r2, [r4, #0]
    18b0:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    18b2:	0752      	lsls	r2, r2, #29
    18b4:	d41d      	bmi.n	18f2 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    18b6:	3301      	adds	r3, #1
    18b8:	4a36      	ldr	r2, [pc, #216]	; (1994 <spi_write_buffer_wait+0x1e8>)
    18ba:	4293      	cmp	r3, r2
    18bc:	d819      	bhi.n	18f2 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
    18be:	2900      	cmp	r1, #0
    18c0:	d0f5      	beq.n	18ae <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
    18c2:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    18c4:	7e17      	ldrb	r7, [r2, #24]
    18c6:	07f8      	lsls	r0, r7, #31
    18c8:	d5f1      	bpl.n	18ae <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
    18ca:	1c70      	adds	r0, r6, #1
    18cc:	b280      	uxth	r0, r0
    18ce:	4655      	mov	r5, sl
    18d0:	5dad      	ldrb	r5, [r5, r6]
    18d2:	46a8      	mov	r8, r5
    18d4:	466f      	mov	r7, sp
    18d6:	80fd      	strh	r5, [r7, #6]
    18d8:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18da:	79a5      	ldrb	r5, [r4, #6]
    18dc:	2d01      	cmp	r5, #1
    18de:	d0db      	beq.n	1898 <spi_write_buffer_wait+0xec>
    18e0:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    18e2:	07f5      	lsls	r5, r6, #31
    18e4:	d5e0      	bpl.n	18a8 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    18e6:	05ff      	lsls	r7, r7, #23
    18e8:	0dff      	lsrs	r7, r7, #23
    18ea:	6297      	str	r7, [r2, #40]	; 0x28
    18ec:	e7dc      	b.n	18a8 <spi_write_buffer_wait+0xfc>
    18ee:	2300      	movs	r3, #0
    18f0:	e7e2      	b.n	18b8 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    18f2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    18f4:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
    18f6:	0792      	lsls	r2, r2, #30
    18f8:	d404      	bmi.n	1904 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    18fa:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    18fc:	075b      	lsls	r3, r3, #29
    18fe:	d4b5      	bmi.n	186c <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
    1900:	2012      	movs	r0, #18
    1902:	e03b      	b.n	197c <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
    1904:	0020      	movs	r0, r4
    1906:	4b22      	ldr	r3, [pc, #136]	; (1990 <spi_write_buffer_wait+0x1e4>)
    1908:	4798      	blx	r3
					return STATUS_ABORTED;
    190a:	2004      	movs	r0, #4
    190c:	e036      	b.n	197c <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1910:	e7bc      	b.n	188c <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1912:	7962      	ldrb	r2, [r4, #5]
    1914:	2a01      	cmp	r2, #1
    1916:	d006      	beq.n	1926 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1918:	2a00      	cmp	r2, #0
    191a:	d135      	bne.n	1988 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
    191c:	79e3      	ldrb	r3, [r4, #7]
    191e:	2b00      	cmp	r3, #0
    1920:	d11a      	bne.n	1958 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1922:	2000      	movs	r0, #0
    1924:	e02a      	b.n	197c <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1926:	6823      	ldr	r3, [r4, #0]
    1928:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    192a:	079b      	lsls	r3, r3, #30
    192c:	d5fb      	bpl.n	1926 <spi_write_buffer_wait+0x17a>
    192e:	e7f3      	b.n	1918 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1930:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1932:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1934:	0752      	lsls	r2, r2, #29
    1936:	d529      	bpl.n	198c <spi_write_buffer_wait+0x1e0>
    1938:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    193a:	0752      	lsls	r2, r2, #29
    193c:	d508      	bpl.n	1950 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    193e:	8b5a      	ldrh	r2, [r3, #26]
    1940:	0752      	lsls	r2, r2, #29
    1942:	d501      	bpl.n	1948 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1944:	2204      	movs	r2, #4
    1946:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1948:	79a2      	ldrb	r2, [r4, #6]
    194a:	2a01      	cmp	r2, #1
    194c:	d011      	beq.n	1972 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    1950:	4660      	mov	r0, ip
    1952:	3801      	subs	r0, #1
    1954:	b283      	uxth	r3, r0
    1956:	469c      	mov	ip, r3
			while (flush_length) {
    1958:	4663      	mov	r3, ip
    195a:	2b00      	cmp	r3, #0
    195c:	d00b      	beq.n	1976 <spi_write_buffer_wait+0x1ca>
    195e:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1960:	4a0c      	ldr	r2, [pc, #48]	; (1994 <spi_write_buffer_wait+0x1e8>)
    1962:	4293      	cmp	r3, r2
    1964:	d8e4      	bhi.n	1930 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1966:	6822      	ldr	r2, [r4, #0]
    1968:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    196a:	0752      	lsls	r2, r2, #29
    196c:	d4e0      	bmi.n	1930 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    196e:	3301      	adds	r3, #1
    1970:	e7f6      	b.n	1960 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1974:	e7ec      	b.n	1950 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1976:	2000      	movs	r0, #0
    1978:	e000      	b.n	197c <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    197a:	2005      	movs	r0, #5
}
    197c:	b002      	add	sp, #8
    197e:	bc1c      	pop	{r2, r3, r4}
    1980:	4690      	mov	r8, r2
    1982:	4699      	mov	r9, r3
    1984:	46a2      	mov	sl, r4
    1986:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1988:	2000      	movs	r0, #0
    198a:	e7f7      	b.n	197c <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    198c:	2012      	movs	r0, #18
    198e:	e7f5      	b.n	197c <spi_write_buffer_wait+0x1d0>
    1990:	00001375 	.word	0x00001375
    1994:	00002710 	.word	0x00002710

00001998 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1998:	b5f0      	push	{r4, r5, r6, r7, lr}
    199a:	46de      	mov	lr, fp
    199c:	4657      	mov	r7, sl
    199e:	464e      	mov	r6, r9
    19a0:	4645      	mov	r5, r8
    19a2:	b5e0      	push	{r5, r6, r7, lr}
    19a4:	b085      	sub	sp, #20
    19a6:	0004      	movs	r4, r0
    19a8:	9100      	str	r1, [sp, #0]
    19aa:	9202      	str	r2, [sp, #8]
    19ac:	4698      	mov	r8, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    19ae:	2338      	movs	r3, #56	; 0x38
    19b0:	5cc3      	ldrb	r3, [r0, r3]
    19b2:	2b05      	cmp	r3, #5
    19b4:	d100      	bne.n	19b8 <spi_transceive_buffer_wait+0x20>
    19b6:	e11f      	b.n	1bf8 <spi_transceive_buffer_wait+0x260>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    19b8:	4643      	mov	r3, r8
    19ba:	2b00      	cmp	r3, #0
    19bc:	d101      	bne.n	19c2 <spi_transceive_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    19be:	2117      	movs	r1, #23
    19c0:	e11b      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
	}

	if (!(module->receiver_enabled)) {
    19c2:	79c3      	ldrb	r3, [r0, #7]
    19c4:	2b00      	cmp	r3, #0
    19c6:	d101      	bne.n	19cc <spi_transceive_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    19c8:	211c      	movs	r1, #28
    19ca:	e116      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    19cc:	7943      	ldrb	r3, [r0, #5]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d103      	bne.n	19da <spi_transceive_buffer_wait+0x42>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    19d2:	6803      	ldr	r3, [r0, #0]
    19d4:	7e1b      	ldrb	r3, [r3, #24]
    19d6:	079b      	lsls	r3, r3, #30
    19d8:	d404      	bmi.n	19e4 <spi_transceive_buffer_wait+0x4c>
		rx_data[rx_pos++] = received_data;
		*rx_data = received_data;
		
		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    19da:	46c4      	mov	ip, r8
    19dc:	2300      	movs	r3, #0
    19de:	9303      	str	r3, [sp, #12]
    19e0:	2100      	movs	r1, #0
    19e2:	e07c      	b.n	1ade <spi_transceive_buffer_wait+0x146>
		_spi_clear_tx_complete_flag(module);
    19e4:	4b8a      	ldr	r3, [pc, #552]	; (1c10 <spi_transceive_buffer_wait+0x278>)
    19e6:	4798      	blx	r3
    19e8:	e7f7      	b.n	19da <spi_transceive_buffer_wait+0x42>
    19ea:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    19ec:	4a89      	ldr	r2, [pc, #548]	; (1c14 <spi_transceive_buffer_wait+0x27c>)
    19ee:	4293      	cmp	r3, r2
    19f0:	d805      	bhi.n	19fe <spi_transceive_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    19f2:	6822      	ldr	r2, [r4, #0]
    19f4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    19f6:	07d2      	lsls	r2, r2, #31
    19f8:	d401      	bmi.n	19fe <spi_transceive_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    19fa:	3301      	adds	r3, #1
    19fc:	e7f6      	b.n	19ec <spi_transceive_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
    19fe:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1a00:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1a02:	0792      	lsls	r2, r2, #30
    1a04:	d404      	bmi.n	1a10 <spi_transceive_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1a06:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    1a08:	07db      	lsls	r3, r3, #31
    1a0a:	d471      	bmi.n	1af0 <spi_transceive_buffer_wait+0x158>
				return STATUS_ERR_TIMEOUT;
    1a0c:	2112      	movs	r1, #18
    1a0e:	e0f4      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    1a10:	0020      	movs	r0, r4
    1a12:	4b7f      	ldr	r3, [pc, #508]	; (1c10 <spi_transceive_buffer_wait+0x278>)
    1a14:	4798      	blx	r3
				return STATUS_ABORTED;
    1a16:	2104      	movs	r1, #4
    1a18:	e0ef      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1a1a:	3102      	adds	r1, #2
    1a1c:	9a00      	ldr	r2, [sp, #0]
    1a1e:	5d92      	ldrb	r2, [r2, r6]
    1a20:	0212      	lsls	r2, r2, #8
    1a22:	4650      	mov	r0, sl
    1a24:	4302      	orrs	r2, r0
    1a26:	b28e      	uxth	r6, r1
    1a28:	e071      	b.n	1b0e <spi_transceive_buffer_wait+0x176>
						data_to_send |= (tx_data[tx_pos++] << 8);
    1a2a:	3602      	adds	r6, #2
    1a2c:	9900      	ldr	r1, [sp, #0]
    1a2e:	5c09      	ldrb	r1, [r1, r0]
    1a30:	0209      	lsls	r1, r1, #8
    1a32:	4650      	mov	r0, sl
    1a34:	4301      	orrs	r1, r0
    1a36:	4688      	mov	r8, r1
    1a38:	b2b0      	uxth	r0, r6
    1a3a:	e01a      	b.n	1a72 <spi_transceive_buffer_wait+0xda>
					length--;
    1a3c:	3f01      	subs	r7, #1
    1a3e:	b2bf      	uxth	r7, r7
    1a40:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1a42:	6822      	ldr	r2, [r4, #0]
    1a44:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1a46:	0752      	lsls	r2, r2, #29
    1a48:	d41d      	bmi.n	1a86 <spi_transceive_buffer_wait+0xee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1a4a:	3301      	adds	r3, #1
    1a4c:	4a71      	ldr	r2, [pc, #452]	; (1c14 <spi_transceive_buffer_wait+0x27c>)
    1a4e:	4293      	cmp	r3, r2
    1a50:	d819      	bhi.n	1a86 <spi_transceive_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a52:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1a54:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1a56:	07c9      	lsls	r1, r1, #31
    1a58:	d5f3      	bpl.n	1a42 <spi_transceive_buffer_wait+0xaa>
					data_to_send = tx_data[tx_pos++];
    1a5a:	1c70      	adds	r0, r6, #1
    1a5c:	b280      	uxth	r0, r0
    1a5e:	9900      	ldr	r1, [sp, #0]
    1a60:	5d89      	ldrb	r1, [r1, r6]
    1a62:	468a      	mov	sl, r1
    1a64:	466d      	mov	r5, sp
    1a66:	80e9      	strh	r1, [r5, #6]
    1a68:	88e9      	ldrh	r1, [r5, #6]
    1a6a:	4688      	mov	r8, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1a6c:	79a1      	ldrb	r1, [r4, #6]
    1a6e:	2901      	cmp	r1, #1
    1a70:	d0db      	beq.n	1a2a <spi_transceive_buffer_wait+0x92>
    1a72:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1a74:	07f1      	lsls	r1, r6, #31
    1a76:	d5e1      	bpl.n	1a3c <spi_transceive_buffer_wait+0xa4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1a78:	4641      	mov	r1, r8
    1a7a:	05c9      	lsls	r1, r1, #23
    1a7c:	0dc9      	lsrs	r1, r1, #23
    1a7e:	6291      	str	r1, [r2, #40]	; 0x28
    1a80:	e7dc      	b.n	1a3c <spi_transceive_buffer_wait+0xa4>
    1a82:	2300      	movs	r3, #0
    1a84:	e7e2      	b.n	1a4c <spi_transceive_buffer_wait+0xb4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a86:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1a88:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1a8a:	0792      	lsls	r2, r2, #30
    1a8c:	d404      	bmi.n	1a98 <spi_transceive_buffer_wait+0x100>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1a8e:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1a90:	075b      	lsls	r3, r3, #29
    1a92:	d445      	bmi.n	1b20 <spi_transceive_buffer_wait+0x188>
				return STATUS_ERR_TIMEOUT;
    1a94:	2112      	movs	r1, #18
    1a96:	e0b0      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    1a98:	0020      	movs	r0, r4
    1a9a:	4b5d      	ldr	r3, [pc, #372]	; (1c10 <spi_transceive_buffer_wait+0x278>)
    1a9c:	4798      	blx	r3
				return STATUS_ABORTED;
    1a9e:	2104      	movs	r1, #4
    1aa0:	e0ab      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
	enum status_code retval = STATUS_OK;
    1aa2:	2100      	movs	r1, #0
    1aa4:	e04d      	b.n	1b42 <spi_transceive_buffer_wait+0x1aa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1aa8:	05d2      	lsls	r2, r2, #23
    1aaa:	0dd3      	lsrs	r3, r2, #23
    1aac:	4698      	mov	r8, r3
    1aae:	e002      	b.n	1ab6 <spi_transceive_buffer_wait+0x11e>
		uint16_t received_data = 0;
    1ab0:	2300      	movs	r3, #0
    1ab2:	4698      	mov	r8, r3
		return STATUS_ERR_IO;
    1ab4:	2110      	movs	r1, #16
		if (retval != STATUS_OK) {
    1ab6:	2900      	cmp	r1, #0
    1ab8:	d000      	beq.n	1abc <spi_transceive_buffer_wait+0x124>
    1aba:	e09e      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
		rx_data[rx_pos++] = received_data;
    1abc:	9803      	ldr	r0, [sp, #12]
    1abe:	0003      	movs	r3, r0
    1ac0:	3301      	adds	r3, #1
    1ac2:	b29b      	uxth	r3, r3
    1ac4:	4642      	mov	r2, r8
    1ac6:	4669      	mov	r1, sp
    1ac8:	718a      	strb	r2, [r1, #6]
    1aca:	7989      	ldrb	r1, [r1, #6]
    1acc:	9a02      	ldr	r2, [sp, #8]
    1ace:	5411      	strb	r1, [r2, r0]
		*rx_data = received_data;
    1ad0:	7011      	strb	r1, [r2, #0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1ad2:	79a1      	ldrb	r1, [r4, #6]
    1ad4:	2901      	cmp	r1, #1
    1ad6:	d03b      	beq.n	1b50 <spi_transceive_buffer_wait+0x1b8>
			rx_data[rx_pos++] = (received_data >> 8);
    1ad8:	9303      	str	r3, [sp, #12]
    1ada:	0031      	movs	r1, r6
    1adc:	46b8      	mov	r8, r7
	while (length--) {
    1ade:	4643      	mov	r3, r8
    1ae0:	1e5f      	subs	r7, r3, #1
    1ae2:	b2bf      	uxth	r7, r7
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d03a      	beq.n	1b5e <spi_transceive_buffer_wait+0x1c6>
		if (module->mode == SPI_MODE_SLAVE) {
    1ae8:	7963      	ldrb	r3, [r4, #5]
    1aea:	2b00      	cmp	r3, #0
    1aec:	d100      	bne.n	1af0 <spi_transceive_buffer_wait+0x158>
    1aee:	e77c      	b.n	19ea <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1af0:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1af2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    1af4:	07d2      	lsls	r2, r2, #31
    1af6:	d5fb      	bpl.n	1af0 <spi_transceive_buffer_wait+0x158>
		uint16_t data_to_send = tx_data[tx_pos++];
    1af8:	1c4e      	adds	r6, r1, #1
    1afa:	b2b6      	uxth	r6, r6
    1afc:	9a00      	ldr	r2, [sp, #0]
    1afe:	5c52      	ldrb	r2, [r2, r1]
    1b00:	4692      	mov	sl, r2
    1b02:	4668      	mov	r0, sp
    1b04:	80c2      	strh	r2, [r0, #6]
    1b06:	88c2      	ldrh	r2, [r0, #6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b08:	79a0      	ldrb	r0, [r4, #6]
    1b0a:	2801      	cmp	r0, #1
    1b0c:	d085      	beq.n	1a1a <spi_transceive_buffer_wait+0x82>
    1b0e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1b10:	07c9      	lsls	r1, r1, #31
    1b12:	d502      	bpl.n	1b1a <spi_transceive_buffer_wait+0x182>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1b14:	05d2      	lsls	r2, r2, #23
    1b16:	0dd2      	lsrs	r2, r2, #23
    1b18:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    1b1a:	7963      	ldrb	r3, [r4, #5]
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	d0b0      	beq.n	1a82 <spi_transceive_buffer_wait+0xea>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b20:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b22:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    1b24:	0752      	lsls	r2, r2, #29
    1b26:	d5fb      	bpl.n	1b20 <spi_transceive_buffer_wait+0x188>
		rx_length--;
    1b28:	4662      	mov	r2, ip
    1b2a:	3a01      	subs	r2, #1
    1b2c:	b292      	uxth	r2, r2
    1b2e:	4694      	mov	ip, r2
    1b30:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1b32:	0752      	lsls	r2, r2, #29
    1b34:	d5bc      	bpl.n	1ab0 <spi_transceive_buffer_wait+0x118>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b36:	8b5a      	ldrh	r2, [r3, #26]
    1b38:	0752      	lsls	r2, r2, #29
    1b3a:	d5b2      	bpl.n	1aa2 <spi_transceive_buffer_wait+0x10a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1b3c:	2204      	movs	r2, #4
    1b3e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1b40:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b42:	79a2      	ldrb	r2, [r4, #6]
    1b44:	2a01      	cmp	r2, #1
    1b46:	d0ae      	beq.n	1aa6 <spi_transceive_buffer_wait+0x10e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b4a:	b2d3      	uxtb	r3, r2
    1b4c:	4698      	mov	r8, r3
    1b4e:	e7b2      	b.n	1ab6 <spi_transceive_buffer_wait+0x11e>
			rx_data[rx_pos++] = (received_data >> 8);
    1b50:	3002      	adds	r0, #2
    1b52:	4642      	mov	r2, r8
    1b54:	0a12      	lsrs	r2, r2, #8
    1b56:	9902      	ldr	r1, [sp, #8]
    1b58:	54ca      	strb	r2, [r1, r3]
    1b5a:	b283      	uxth	r3, r0
    1b5c:	e7bc      	b.n	1ad8 <spi_transceive_buffer_wait+0x140>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1b5e:	7962      	ldrb	r2, [r4, #5]
    1b60:	2a01      	cmp	r2, #1
    1b62:	d003      	beq.n	1b6c <spi_transceive_buffer_wait+0x1d4>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1b64:	2a00      	cmp	r2, #0
    1b66:	d03b      	beq.n	1be0 <spi_transceive_buffer_wait+0x248>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1b68:	2100      	movs	r1, #0
    1b6a:	e046      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1b6c:	6823      	ldr	r3, [r4, #0]
    1b6e:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    1b70:	079b      	lsls	r3, r3, #30
    1b72:	d5fb      	bpl.n	1b6c <spi_transceive_buffer_wait+0x1d4>
    1b74:	e7f6      	b.n	1b64 <spi_transceive_buffer_wait+0x1cc>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1b76:	3301      	adds	r3, #1
    1b78:	4a26      	ldr	r2, [pc, #152]	; (1c14 <spi_transceive_buffer_wait+0x27c>)
    1b7a:	4293      	cmp	r3, r2
    1b7c:	d803      	bhi.n	1b86 <spi_transceive_buffer_wait+0x1ee>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b7e:	6822      	ldr	r2, [r4, #0]
    1b80:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1b82:	0752      	lsls	r2, r2, #29
    1b84:	d5f7      	bpl.n	1b76 <spi_transceive_buffer_wait+0x1de>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b86:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b88:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1b8a:	0752      	lsls	r2, r2, #29
    1b8c:	d53d      	bpl.n	1c0a <spi_transceive_buffer_wait+0x272>
			rx_length--;
    1b8e:	4662      	mov	r2, ip
    1b90:	3a01      	subs	r2, #1
    1b92:	b292      	uxth	r2, r2
    1b94:	4694      	mov	ip, r2
    1b96:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1b98:	0752      	lsls	r2, r2, #29
    1b9a:	d511      	bpl.n	1bc0 <spi_transceive_buffer_wait+0x228>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b9c:	8b5a      	ldrh	r2, [r3, #26]
    1b9e:	0752      	lsls	r2, r2, #29
    1ba0:	d508      	bpl.n	1bb4 <spi_transceive_buffer_wait+0x21c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1ba2:	2204      	movs	r2, #4
    1ba4:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1ba6:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1ba8:	79a2      	ldrb	r2, [r4, #6]
    1baa:	2a01      	cmp	r2, #1
    1bac:	d004      	beq.n	1bb8 <spi_transceive_buffer_wait+0x220>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bb0:	b2d2      	uxtb	r2, r2
    1bb2:	e007      	b.n	1bc4 <spi_transceive_buffer_wait+0x22c>
	enum status_code retval = STATUS_OK;
    1bb4:	2100      	movs	r1, #0
    1bb6:	e7f7      	b.n	1ba8 <spi_transceive_buffer_wait+0x210>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bba:	05d2      	lsls	r2, r2, #23
    1bbc:	0dd2      	lsrs	r2, r2, #23
    1bbe:	e001      	b.n	1bc4 <spi_transceive_buffer_wait+0x22c>
			uint16_t received_data = 0;
    1bc0:	4642      	mov	r2, r8
		return STATUS_ERR_IO;
    1bc2:	2110      	movs	r1, #16
			if (retval != STATUS_OK) {
    1bc4:	2900      	cmp	r1, #0
    1bc6:	d118      	bne.n	1bfa <spi_transceive_buffer_wait+0x262>
			rx_data[rx_pos++] = received_data;
    1bc8:	9803      	ldr	r0, [sp, #12]
    1bca:	0003      	movs	r3, r0
    1bcc:	3301      	adds	r3, #1
    1bce:	b29b      	uxth	r3, r3
    1bd0:	b2d1      	uxtb	r1, r2
    1bd2:	9d02      	ldr	r5, [sp, #8]
    1bd4:	5429      	strb	r1, [r5, r0]
			*rx_data = received_data;
    1bd6:	7029      	strb	r1, [r5, #0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1bd8:	79a1      	ldrb	r1, [r4, #6]
    1bda:	2901      	cmp	r1, #1
    1bdc:	d005      	beq.n	1bea <spi_transceive_buffer_wait+0x252>
				rx_data[rx_pos++] = (received_data >> 8);
    1bde:	9303      	str	r3, [sp, #12]
		while (rx_length) {
    1be0:	4663      	mov	r3, ip
    1be2:	2b00      	cmp	r3, #0
    1be4:	d006      	beq.n	1bf4 <spi_transceive_buffer_wait+0x25c>
    1be6:	2300      	movs	r3, #0
    1be8:	e7c6      	b.n	1b78 <spi_transceive_buffer_wait+0x1e0>
				rx_data[rx_pos++] = (received_data >> 8);
    1bea:	3002      	adds	r0, #2
    1bec:	0a12      	lsrs	r2, r2, #8
    1bee:	54ea      	strb	r2, [r5, r3]
    1bf0:	b283      	uxth	r3, r0
    1bf2:	e7f4      	b.n	1bde <spi_transceive_buffer_wait+0x246>
	return STATUS_OK;
    1bf4:	2100      	movs	r1, #0
    1bf6:	e000      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
		return STATUS_BUSY;
    1bf8:	2105      	movs	r1, #5
}
    1bfa:	0008      	movs	r0, r1
    1bfc:	b005      	add	sp, #20
    1bfe:	bc3c      	pop	{r2, r3, r4, r5}
    1c00:	4690      	mov	r8, r2
    1c02:	4699      	mov	r9, r3
    1c04:	46a2      	mov	sl, r4
    1c06:	46ab      	mov	fp, r5
    1c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    1c0a:	2112      	movs	r1, #18
    1c0c:	e7f5      	b.n	1bfa <spi_transceive_buffer_wait+0x262>
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	00001375 	.word	0x00001375
    1c14:	00002710 	.word	0x00002710

00001c18 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1c18:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c1a:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1c1c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    1c1e:	780a      	ldrb	r2, [r1, #0]
    1c20:	b2d2      	uxtb	r2, r2
    1c22:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1c24:	1c4c      	adds	r4, r1, #1
    1c26:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c28:	7986      	ldrb	r6, [r0, #6]
    1c2a:	2e01      	cmp	r6, #1
    1c2c:	d007      	beq.n	1c3e <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1c2e:	05db      	lsls	r3, r3, #23
    1c30:	0ddb      	lsrs	r3, r3, #23
    1c32:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1c34:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1c36:	3b01      	subs	r3, #1
    1c38:	b29b      	uxth	r3, r3
    1c3a:	8683      	strh	r3, [r0, #52]	; 0x34
}
    1c3c:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1c3e:	784b      	ldrb	r3, [r1, #1]
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    1c44:	1c8c      	adds	r4, r1, #2
    1c46:	62c4      	str	r4, [r0, #44]	; 0x2c
    1c48:	e7f1      	b.n	1c2e <_spi_write+0x16>
	...

00001c4c <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c4c:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1c4e:	4a04      	ldr	r2, [pc, #16]	; (1c60 <_spi_write_dummy+0x14>)
    1c50:	8812      	ldrh	r2, [r2, #0]
    1c52:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1c54:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1c56:	3b01      	subs	r3, #1
    1c58:	b29b      	uxth	r3, r3
    1c5a:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1c5c:	4770      	bx	lr
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	200000e4 	.word	0x200000e4

00001c64 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c64:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    1c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1c68:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1c6a:	3b01      	subs	r3, #1
    1c6c:	b29b      	uxth	r3, r3
    1c6e:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1c70:	4770      	bx	lr

00001c72 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c72:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c76:	05db      	lsls	r3, r3, #23
    1c78:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1c7a:	b2da      	uxtb	r2, r3
    1c7c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1c7e:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1c80:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1c82:	1c51      	adds	r1, r2, #1
    1c84:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c86:	7981      	ldrb	r1, [r0, #6]
    1c88:	2901      	cmp	r1, #1
    1c8a:	d004      	beq.n	1c96 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1c8c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    1c8e:	3b01      	subs	r3, #1
    1c90:	b29b      	uxth	r3, r3
    1c92:	8603      	strh	r3, [r0, #48]	; 0x30
}
    1c94:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1c96:	0a1b      	lsrs	r3, r3, #8
    1c98:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1c9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1c9c:	3301      	adds	r3, #1
    1c9e:	6283      	str	r3, [r0, #40]	; 0x28
    1ca0:	e7f4      	b.n	1c8c <_spi_read+0x1a>
	...

00001ca4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1ca6:	0080      	lsls	r0, r0, #2
    1ca8:	4b6b      	ldr	r3, [pc, #428]	; (1e58 <_spi_interrupt_handler+0x1b4>)
    1caa:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1cac:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1cae:	2337      	movs	r3, #55	; 0x37
    1cb0:	5ce3      	ldrb	r3, [r4, r3]
    1cb2:	2236      	movs	r2, #54	; 0x36
    1cb4:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    1cb6:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1cb8:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1cba:	7db5      	ldrb	r5, [r6, #22]
    1cbc:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1cbe:	07eb      	lsls	r3, r5, #31
    1cc0:	d516      	bpl.n	1cf0 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1cc2:	7963      	ldrb	r3, [r4, #5]
    1cc4:	2b01      	cmp	r3, #1
    1cc6:	d04d      	beq.n	1d64 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1cc8:	7963      	ldrb	r3, [r4, #5]
		if (0
    1cca:	2b01      	cmp	r3, #1
    1ccc:	d057      	beq.n	1d7e <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d10e      	bne.n	1cf0 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    1cd2:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d00b      	beq.n	1cf0 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1cd8:	0020      	movs	r0, r4
    1cda:	4b60      	ldr	r3, [pc, #384]	; (1e5c <_spi_interrupt_handler+0x1b8>)
    1cdc:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    1cde:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1ce0:	b29b      	uxth	r3, r3
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d104      	bne.n	1cf0 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1ce6:	3301      	adds	r3, #1
    1ce8:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1cea:	7a63      	ldrb	r3, [r4, #9]
    1cec:	2b01      	cmp	r3, #1
    1cee:	d04a      	beq.n	1d86 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1cf0:	076b      	lsls	r3, r5, #29
    1cf2:	d511      	bpl.n	1d18 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1cf4:	8b73      	ldrh	r3, [r6, #26]
    1cf6:	075b      	lsls	r3, r3, #29
    1cf8:	d54f      	bpl.n	1d9a <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1cfa:	7a63      	ldrb	r3, [r4, #9]
    1cfc:	2b01      	cmp	r3, #1
    1cfe:	d008      	beq.n	1d12 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1d00:	221e      	movs	r2, #30
    1d02:	2338      	movs	r3, #56	; 0x38
    1d04:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1d06:	3b35      	subs	r3, #53	; 0x35
    1d08:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1d0a:	3302      	adds	r3, #2
    1d0c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1d0e:	073b      	lsls	r3, r7, #28
    1d10:	d43f      	bmi.n	1d92 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1d12:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d14:	2304      	movs	r3, #4
    1d16:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1d18:	07ab      	lsls	r3, r5, #30
    1d1a:	d513      	bpl.n	1d44 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1d1c:	7963      	ldrb	r3, [r4, #5]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d10d      	bne.n	1d3e <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1d22:	3307      	adds	r3, #7
    1d24:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1d26:	3b05      	subs	r3, #5
    1d28:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1d2a:	3301      	adds	r3, #1
    1d2c:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    1d2e:	2300      	movs	r3, #0
    1d30:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1d32:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1d34:	3338      	adds	r3, #56	; 0x38
    1d36:	2200      	movs	r2, #0
    1d38:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1d3a:	06fb      	lsls	r3, r7, #27
    1d3c:	d464      	bmi.n	1e08 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1d3e:	7963      	ldrb	r3, [r4, #5]
    1d40:	2b01      	cmp	r3, #1
    1d42:	d065      	beq.n	1e10 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1d44:	072b      	lsls	r3, r5, #28
    1d46:	d508      	bpl.n	1d5a <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    1d48:	7963      	ldrb	r3, [r4, #5]
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d105      	bne.n	1d5a <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1d4e:	3308      	adds	r3, #8
    1d50:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1d52:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1d54:	06bb      	lsls	r3, r7, #26
    1d56:	d500      	bpl.n	1d5a <_spi_interrupt_handler+0xb6>
    1d58:	e070      	b.n	1e3c <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1d5a:	b26d      	sxtb	r5, r5
    1d5c:	2d00      	cmp	r5, #0
    1d5e:	da00      	bge.n	1d62 <_spi_interrupt_handler+0xbe>
    1d60:	e070      	b.n	1e44 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    1d64:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1d66:	2b00      	cmp	r3, #0
    1d68:	d1ae      	bne.n	1cc8 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    1d6a:	0020      	movs	r0, r4
    1d6c:	4b3c      	ldr	r3, [pc, #240]	; (1e60 <_spi_interrupt_handler+0x1bc>)
    1d6e:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1d70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1d72:	b29b      	uxth	r3, r3
    1d74:	2b00      	cmp	r3, #0
    1d76:	d1a7      	bne.n	1cc8 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1d78:	3301      	adds	r3, #1
    1d7a:	7533      	strb	r3, [r6, #20]
    1d7c:	e7a4      	b.n	1cc8 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    1d7e:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1d80:	2a00      	cmp	r2, #0
    1d82:	d1a9      	bne.n	1cd8 <_spi_interrupt_handler+0x34>
    1d84:	e7a3      	b.n	1cce <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    1d86:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d1b1      	bne.n	1cf0 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1d8c:	3302      	adds	r3, #2
    1d8e:	75b3      	strb	r3, [r6, #22]
    1d90:	e7ae      	b.n	1cf0 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1d92:	0020      	movs	r0, r4
    1d94:	69a3      	ldr	r3, [r4, #24]
    1d96:	4798      	blx	r3
    1d98:	e7bb      	b.n	1d12 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1d9a:	7a63      	ldrb	r3, [r4, #9]
    1d9c:	2b01      	cmp	r3, #1
    1d9e:	d017      	beq.n	1dd0 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    1da0:	0020      	movs	r0, r4
    1da2:	4b30      	ldr	r3, [pc, #192]	; (1e64 <_spi_interrupt_handler+0x1c0>)
    1da4:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    1da6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1da8:	b29b      	uxth	r3, r3
    1daa:	2b00      	cmp	r3, #0
    1dac:	d1b4      	bne.n	1d18 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    1dae:	2200      	movs	r2, #0
    1db0:	3338      	adds	r3, #56	; 0x38
    1db2:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1db4:	3b34      	subs	r3, #52	; 0x34
    1db6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1db8:	7a63      	ldrb	r3, [r4, #9]
    1dba:	2b02      	cmp	r3, #2
    1dbc:	d01d      	beq.n	1dfa <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1dbe:	7a63      	ldrb	r3, [r4, #9]
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d1a9      	bne.n	1d18 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1dc4:	07bb      	lsls	r3, r7, #30
    1dc6:	d5a7      	bpl.n	1d18 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1dc8:	0020      	movs	r0, r4
    1dca:	6923      	ldr	r3, [r4, #16]
    1dcc:	4798      	blx	r3
    1dce:	e7a3      	b.n	1d18 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    1dd0:	0020      	movs	r0, r4
    1dd2:	4b25      	ldr	r3, [pc, #148]	; (1e68 <_spi_interrupt_handler+0x1c4>)
    1dd4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1dd6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1dd8:	b29b      	uxth	r3, r3
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d19c      	bne.n	1d18 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1dde:	3304      	adds	r3, #4
    1de0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1de2:	2200      	movs	r2, #0
    1de4:	3334      	adds	r3, #52	; 0x34
    1de6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1de8:	3b35      	subs	r3, #53	; 0x35
    1dea:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1dec:	07fb      	lsls	r3, r7, #31
    1dee:	d400      	bmi.n	1df2 <_spi_interrupt_handler+0x14e>
    1df0:	e792      	b.n	1d18 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1df2:	0020      	movs	r0, r4
    1df4:	68e3      	ldr	r3, [r4, #12]
    1df6:	4798      	blx	r3
    1df8:	e78e      	b.n	1d18 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1dfa:	077b      	lsls	r3, r7, #29
    1dfc:	d400      	bmi.n	1e00 <_spi_interrupt_handler+0x15c>
    1dfe:	e78b      	b.n	1d18 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1e00:	0020      	movs	r0, r4
    1e02:	6963      	ldr	r3, [r4, #20]
    1e04:	4798      	blx	r3
    1e06:	e787      	b.n	1d18 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1e08:	0020      	movs	r0, r4
    1e0a:	69e3      	ldr	r3, [r4, #28]
    1e0c:	4798      	blx	r3
    1e0e:	e796      	b.n	1d3e <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1e10:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1e12:	2b01      	cmp	r3, #1
    1e14:	d000      	beq.n	1e18 <_spi_interrupt_handler+0x174>
    1e16:	e795      	b.n	1d44 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1e18:	79e3      	ldrb	r3, [r4, #7]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d000      	beq.n	1e20 <_spi_interrupt_handler+0x17c>
    1e1e:	e791      	b.n	1d44 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1e20:	3302      	adds	r3, #2
    1e22:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1e24:	3301      	adds	r3, #1
    1e26:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1e28:	2200      	movs	r2, #0
    1e2a:	3335      	adds	r3, #53	; 0x35
    1e2c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1e2e:	07fb      	lsls	r3, r7, #31
    1e30:	d400      	bmi.n	1e34 <_spi_interrupt_handler+0x190>
    1e32:	e787      	b.n	1d44 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1e34:	0020      	movs	r0, r4
    1e36:	68e3      	ldr	r3, [r4, #12]
    1e38:	4798      	blx	r3
    1e3a:	e783      	b.n	1d44 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1e3c:	0020      	movs	r0, r4
    1e3e:	6a23      	ldr	r3, [r4, #32]
    1e40:	4798      	blx	r3
    1e42:	e78a      	b.n	1d5a <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1e44:	2380      	movs	r3, #128	; 0x80
    1e46:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1e48:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1e4a:	067b      	lsls	r3, r7, #25
    1e4c:	d400      	bmi.n	1e50 <_spi_interrupt_handler+0x1ac>
    1e4e:	e788      	b.n	1d62 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e52:	0020      	movs	r0, r4
    1e54:	4798      	blx	r3
}
    1e56:	e784      	b.n	1d62 <_spi_interrupt_handler+0xbe>
    1e58:	200000e8 	.word	0x200000e8
    1e5c:	00001c19 	.word	0x00001c19
    1e60:	00001c4d 	.word	0x00001c4d
    1e64:	00001c73 	.word	0x00001c73
    1e68:	00001c65 	.word	0x00001c65

00001e6c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1e6c:	4770      	bx	lr
	...

00001e70 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1e70:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1e72:	4b0b      	ldr	r3, [pc, #44]	; (1ea0 <_sercom_set_handler+0x30>)
    1e74:	781b      	ldrb	r3, [r3, #0]
    1e76:	2b00      	cmp	r3, #0
    1e78:	d008      	beq.n	1e8c <_sercom_set_handler+0x1c>
    1e7a:	e00c      	b.n	1e96 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e7c:	009a      	lsls	r2, r3, #2
    1e7e:	4d09      	ldr	r5, [pc, #36]	; (1ea4 <_sercom_set_handler+0x34>)
    1e80:	4c09      	ldr	r4, [pc, #36]	; (1ea8 <_sercom_set_handler+0x38>)
    1e82:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    1e84:	2500      	movs	r5, #0
    1e86:	4c09      	ldr	r4, [pc, #36]	; (1eac <_sercom_set_handler+0x3c>)
    1e88:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e8a:	3301      	adds	r3, #1
    1e8c:	2b05      	cmp	r3, #5
    1e8e:	d9f5      	bls.n	1e7c <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    1e90:	2201      	movs	r2, #1
    1e92:	4b03      	ldr	r3, [pc, #12]	; (1ea0 <_sercom_set_handler+0x30>)
    1e94:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1e96:	0080      	lsls	r0, r0, #2
    1e98:	4b03      	ldr	r3, [pc, #12]	; (1ea8 <_sercom_set_handler+0x38>)
    1e9a:	50c1      	str	r1, [r0, r3]
}
    1e9c:	bd30      	pop	{r4, r5, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	2000006a 	.word	0x2000006a
    1ea4:	00001e6d 	.word	0x00001e6d
    1ea8:	2000006c 	.word	0x2000006c
    1eac:	200000e8 	.word	0x200000e8

00001eb0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1eb0:	b500      	push	{lr}
    1eb2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1eb4:	4b05      	ldr	r3, [pc, #20]	; (1ecc <_sercom_get_interrupt_vector+0x1c>)
    1eb6:	681a      	ldr	r2, [r3, #0]
    1eb8:	9200      	str	r2, [sp, #0]
    1eba:	889b      	ldrh	r3, [r3, #4]
    1ebc:	466a      	mov	r2, sp
    1ebe:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1ec0:	4b03      	ldr	r3, [pc, #12]	; (1ed0 <_sercom_get_interrupt_vector+0x20>)
    1ec2:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ec4:	466b      	mov	r3, sp
    1ec6:	5618      	ldrsb	r0, [r3, r0]
}
    1ec8:	b003      	add	sp, #12
    1eca:	bd00      	pop	{pc}
    1ecc:	00002a0c 	.word	0x00002a0c
    1ed0:	00000d9d 	.word	0x00000d9d

00001ed4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ed4:	b510      	push	{r4, lr}
    1ed6:	4b02      	ldr	r3, [pc, #8]	; (1ee0 <SERCOM0_Handler+0xc>)
    1ed8:	681b      	ldr	r3, [r3, #0]
    1eda:	2000      	movs	r0, #0
    1edc:	4798      	blx	r3
    1ede:	bd10      	pop	{r4, pc}
    1ee0:	2000006c 	.word	0x2000006c

00001ee4 <SERCOM1_Handler>:
    1ee4:	b510      	push	{r4, lr}
    1ee6:	4b02      	ldr	r3, [pc, #8]	; (1ef0 <SERCOM1_Handler+0xc>)
    1ee8:	685b      	ldr	r3, [r3, #4]
    1eea:	2001      	movs	r0, #1
    1eec:	4798      	blx	r3
    1eee:	bd10      	pop	{r4, pc}
    1ef0:	2000006c 	.word	0x2000006c

00001ef4 <SERCOM2_Handler>:
    1ef4:	b510      	push	{r4, lr}
    1ef6:	4b02      	ldr	r3, [pc, #8]	; (1f00 <SERCOM2_Handler+0xc>)
    1ef8:	689b      	ldr	r3, [r3, #8]
    1efa:	2002      	movs	r0, #2
    1efc:	4798      	blx	r3
    1efe:	bd10      	pop	{r4, pc}
    1f00:	2000006c 	.word	0x2000006c

00001f04 <SERCOM3_Handler>:
    1f04:	b510      	push	{r4, lr}
    1f06:	4b02      	ldr	r3, [pc, #8]	; (1f10 <SERCOM3_Handler+0xc>)
    1f08:	68db      	ldr	r3, [r3, #12]
    1f0a:	2003      	movs	r0, #3
    1f0c:	4798      	blx	r3
    1f0e:	bd10      	pop	{r4, pc}
    1f10:	2000006c 	.word	0x2000006c

00001f14 <SERCOM4_Handler>:
    1f14:	b510      	push	{r4, lr}
    1f16:	4b02      	ldr	r3, [pc, #8]	; (1f20 <SERCOM4_Handler+0xc>)
    1f18:	691b      	ldr	r3, [r3, #16]
    1f1a:	2004      	movs	r0, #4
    1f1c:	4798      	blx	r3
    1f1e:	bd10      	pop	{r4, pc}
    1f20:	2000006c 	.word	0x2000006c

00001f24 <SERCOM5_Handler>:
    1f24:	b510      	push	{r4, lr}
    1f26:	4b02      	ldr	r3, [pc, #8]	; (1f30 <SERCOM5_Handler+0xc>)
    1f28:	695b      	ldr	r3, [r3, #20]
    1f2a:	2005      	movs	r0, #5
    1f2c:	4798      	blx	r3
    1f2e:	bd10      	pop	{r4, pc}
    1f30:	2000006c 	.word	0x2000006c

00001f34 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1f34:	4770      	bx	lr
	...

00001f38 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1f38:	4b0c      	ldr	r3, [pc, #48]	; (1f6c <cpu_irq_enter_critical+0x34>)
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	d106      	bne.n	1f4e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1f40:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1f44:	2b00      	cmp	r3, #0
    1f46:	d007      	beq.n	1f58 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1f48:	2200      	movs	r2, #0
    1f4a:	4b09      	ldr	r3, [pc, #36]	; (1f70 <cpu_irq_enter_critical+0x38>)
    1f4c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1f4e:	4a07      	ldr	r2, [pc, #28]	; (1f6c <cpu_irq_enter_critical+0x34>)
    1f50:	6813      	ldr	r3, [r2, #0]
    1f52:	3301      	adds	r3, #1
    1f54:	6013      	str	r3, [r2, #0]
}
    1f56:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1f58:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1f5a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1f5e:	2200      	movs	r2, #0
    1f60:	4b04      	ldr	r3, [pc, #16]	; (1f74 <cpu_irq_enter_critical+0x3c>)
    1f62:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1f64:	3201      	adds	r2, #1
    1f66:	4b02      	ldr	r3, [pc, #8]	; (1f70 <cpu_irq_enter_critical+0x38>)
    1f68:	701a      	strb	r2, [r3, #0]
    1f6a:	e7f0      	b.n	1f4e <cpu_irq_enter_critical+0x16>
    1f6c:	20000084 	.word	0x20000084
    1f70:	20000088 	.word	0x20000088
    1f74:	20000008 	.word	0x20000008

00001f78 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1f78:	4b08      	ldr	r3, [pc, #32]	; (1f9c <cpu_irq_leave_critical+0x24>)
    1f7a:	681a      	ldr	r2, [r3, #0]
    1f7c:	3a01      	subs	r2, #1
    1f7e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1f80:	681b      	ldr	r3, [r3, #0]
    1f82:	2b00      	cmp	r3, #0
    1f84:	d109      	bne.n	1f9a <cpu_irq_leave_critical+0x22>
    1f86:	4b06      	ldr	r3, [pc, #24]	; (1fa0 <cpu_irq_leave_critical+0x28>)
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d005      	beq.n	1f9a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1f8e:	2201      	movs	r2, #1
    1f90:	4b04      	ldr	r3, [pc, #16]	; (1fa4 <cpu_irq_leave_critical+0x2c>)
    1f92:	701a      	strb	r2, [r3, #0]
    1f94:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1f98:	b662      	cpsie	i
	}
}
    1f9a:	4770      	bx	lr
    1f9c:	20000084 	.word	0x20000084
    1fa0:	20000088 	.word	0x20000088
    1fa4:	20000008 	.word	0x20000008

00001fa8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1fa8:	b510      	push	{r4, lr}
    1faa:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1fac:	2201      	movs	r2, #1
    1fae:	ab01      	add	r3, sp, #4
    1fb0:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1fb2:	2400      	movs	r4, #0
    1fb4:	e004      	b.n	1fc0 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1fb6:	b2e0      	uxtb	r0, r4
    1fb8:	a901      	add	r1, sp, #4
    1fba:	4b03      	ldr	r3, [pc, #12]	; (1fc8 <_switch_peripheral_gclk+0x20>)
    1fbc:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1fbe:	3401      	adds	r4, #1
    1fc0:	2c24      	cmp	r4, #36	; 0x24
    1fc2:	d9f8      	bls.n	1fb6 <_switch_peripheral_gclk+0xe>
	}
}
    1fc4:	b002      	add	sp, #8
    1fc6:	bd10      	pop	{r4, pc}
    1fc8:	00002449 	.word	0x00002449

00001fcc <system_clock_source_get_hz>:
{
    1fcc:	b510      	push	{r4, lr}
	switch (clock_source) {
    1fce:	2808      	cmp	r0, #8
    1fd0:	d832      	bhi.n	2038 <STACK_SIZE+0x38>
    1fd2:	0080      	lsls	r0, r0, #2
    1fd4:	4b1b      	ldr	r3, [pc, #108]	; (2044 <STACK_SIZE+0x44>)
    1fd6:	581b      	ldr	r3, [r3, r0]
    1fd8:	469f      	mov	pc, r3
		return 32768UL;
    1fda:	2080      	movs	r0, #128	; 0x80
    1fdc:	0200      	lsls	r0, r0, #8
}
    1fde:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    1fe0:	4b19      	ldr	r3, [pc, #100]	; (2048 <STACK_SIZE+0x48>)
    1fe2:	6918      	ldr	r0, [r3, #16]
    1fe4:	e7fb      	b.n	1fde <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1fe6:	4b19      	ldr	r3, [pc, #100]	; (204c <STACK_SIZE+0x4c>)
    1fe8:	6a1b      	ldr	r3, [r3, #32]
    1fea:	059b      	lsls	r3, r3, #22
    1fec:	0f9b      	lsrs	r3, r3, #30
    1fee:	4818      	ldr	r0, [pc, #96]	; (2050 <STACK_SIZE+0x50>)
    1ff0:	40d8      	lsrs	r0, r3
    1ff2:	e7f4      	b.n	1fde <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    1ff4:	4b14      	ldr	r3, [pc, #80]	; (2048 <STACK_SIZE+0x48>)
    1ff6:	6958      	ldr	r0, [r3, #20]
    1ff8:	e7f1      	b.n	1fde <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1ffa:	4b13      	ldr	r3, [pc, #76]	; (2048 <STACK_SIZE+0x48>)
    1ffc:	681b      	ldr	r3, [r3, #0]
    1ffe:	079b      	lsls	r3, r3, #30
    2000:	d51c      	bpl.n	203c <STACK_SIZE+0x3c>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2002:	4b12      	ldr	r3, [pc, #72]	; (204c <STACK_SIZE+0x4c>)
    2004:	68db      	ldr	r3, [r3, #12]
    2006:	06db      	lsls	r3, r3, #27
    2008:	d5fb      	bpl.n	2002 <STACK_SIZE+0x2>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    200a:	4b0f      	ldr	r3, [pc, #60]	; (2048 <STACK_SIZE+0x48>)
    200c:	681b      	ldr	r3, [r3, #0]
    200e:	075b      	lsls	r3, r3, #29
    2010:	d401      	bmi.n	2016 <STACK_SIZE+0x16>
		return 48000000UL;
    2012:	4810      	ldr	r0, [pc, #64]	; (2054 <STACK_SIZE+0x54>)
    2014:	e7e3      	b.n	1fde <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2016:	2000      	movs	r0, #0
    2018:	4b0f      	ldr	r3, [pc, #60]	; (2058 <STACK_SIZE+0x58>)
    201a:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    201c:	4b0a      	ldr	r3, [pc, #40]	; (2048 <STACK_SIZE+0x48>)
    201e:	689b      	ldr	r3, [r3, #8]
    2020:	041b      	lsls	r3, r3, #16
    2022:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2024:	4358      	muls	r0, r3
    2026:	e7da      	b.n	1fde <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2028:	2350      	movs	r3, #80	; 0x50
    202a:	4a08      	ldr	r2, [pc, #32]	; (204c <STACK_SIZE+0x4c>)
    202c:	5cd3      	ldrb	r3, [r2, r3]
    202e:	075b      	lsls	r3, r3, #29
    2030:	d506      	bpl.n	2040 <STACK_SIZE+0x40>
		return _system_clock_inst.dpll.frequency;
    2032:	4b05      	ldr	r3, [pc, #20]	; (2048 <STACK_SIZE+0x48>)
    2034:	68d8      	ldr	r0, [r3, #12]
    2036:	e7d2      	b.n	1fde <system_clock_source_get_hz+0x12>
		return 0;
    2038:	2000      	movs	r0, #0
    203a:	e7d0      	b.n	1fde <system_clock_source_get_hz+0x12>
			return 0;
    203c:	2000      	movs	r0, #0
    203e:	e7ce      	b.n	1fde <system_clock_source_get_hz+0x12>
			return 0;
    2040:	2000      	movs	r0, #0
    2042:	e7cc      	b.n	1fde <system_clock_source_get_hz+0x12>
    2044:	00002a14 	.word	0x00002a14
    2048:	2000008c 	.word	0x2000008c
    204c:	40000800 	.word	0x40000800
    2050:	007a1200 	.word	0x007a1200
    2054:	02dc6c00 	.word	0x02dc6c00
    2058:	00002465 	.word	0x00002465

0000205c <system_clock_source_osc8m_set_config>:
{
    205c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    205e:	4d0c      	ldr	r5, [pc, #48]	; (2090 <system_clock_source_osc8m_set_config+0x34>)
    2060:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    2062:	7802      	ldrb	r2, [r0, #0]
    2064:	2103      	movs	r1, #3
    2066:	400a      	ands	r2, r1
    2068:	0212      	lsls	r2, r2, #8
    206a:	490a      	ldr	r1, [pc, #40]	; (2094 <system_clock_source_osc8m_set_config+0x38>)
    206c:	4031      	ands	r1, r6
    206e:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    2070:	7882      	ldrb	r2, [r0, #2]
    2072:	2401      	movs	r4, #1
    2074:	4022      	ands	r2, r4
    2076:	01d2      	lsls	r2, r2, #7
    2078:	2380      	movs	r3, #128	; 0x80
    207a:	4399      	bics	r1, r3
    207c:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    207e:	7843      	ldrb	r3, [r0, #1]
    2080:	4023      	ands	r3, r4
    2082:	019b      	lsls	r3, r3, #6
    2084:	2140      	movs	r1, #64	; 0x40
    2086:	438a      	bics	r2, r1
    2088:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    208a:	622b      	str	r3, [r5, #32]
}
    208c:	bd70      	pop	{r4, r5, r6, pc}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	40000800 	.word	0x40000800
    2094:	fffffcff 	.word	0xfffffcff

00002098 <system_clock_source_enable>:
	switch (clock_source) {
    2098:	2808      	cmp	r0, #8
    209a:	d84a      	bhi.n	2132 <system_clock_source_enable+0x9a>
    209c:	0080      	lsls	r0, r0, #2
    209e:	4b26      	ldr	r3, [pc, #152]	; (2138 <system_clock_source_enable+0xa0>)
    20a0:	581b      	ldr	r3, [r3, r0]
    20a2:	469f      	mov	pc, r3
		return STATUS_OK;
    20a4:	2000      	movs	r0, #0
}
    20a6:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    20a8:	4a24      	ldr	r2, [pc, #144]	; (213c <system_clock_source_enable+0xa4>)
    20aa:	6a13      	ldr	r3, [r2, #32]
    20ac:	2102      	movs	r1, #2
    20ae:	430b      	orrs	r3, r1
    20b0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    20b2:	2000      	movs	r0, #0
    20b4:	e7f7      	b.n	20a6 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    20b6:	4a21      	ldr	r2, [pc, #132]	; (213c <system_clock_source_enable+0xa4>)
    20b8:	6993      	ldr	r3, [r2, #24]
    20ba:	2102      	movs	r1, #2
    20bc:	430b      	orrs	r3, r1
    20be:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    20c0:	2000      	movs	r0, #0
		break;
    20c2:	e7f0      	b.n	20a6 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    20c4:	4a1d      	ldr	r2, [pc, #116]	; (213c <system_clock_source_enable+0xa4>)
    20c6:	8a13      	ldrh	r3, [r2, #16]
    20c8:	2102      	movs	r1, #2
    20ca:	430b      	orrs	r3, r1
    20cc:	b29b      	uxth	r3, r3
    20ce:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    20d0:	2000      	movs	r0, #0
		break;
    20d2:	e7e8      	b.n	20a6 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    20d4:	4a19      	ldr	r2, [pc, #100]	; (213c <system_clock_source_enable+0xa4>)
    20d6:	8a93      	ldrh	r3, [r2, #20]
    20d8:	2102      	movs	r1, #2
    20da:	430b      	orrs	r3, r1
    20dc:	b29b      	uxth	r3, r3
    20de:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    20e0:	2000      	movs	r0, #0
		break;
    20e2:	e7e0      	b.n	20a6 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    20e4:	4916      	ldr	r1, [pc, #88]	; (2140 <system_clock_source_enable+0xa8>)
    20e6:	680b      	ldr	r3, [r1, #0]
    20e8:	2202      	movs	r2, #2
    20ea:	4313      	orrs	r3, r2
    20ec:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    20ee:	4b13      	ldr	r3, [pc, #76]	; (213c <system_clock_source_enable+0xa4>)
    20f0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    20f2:	4b12      	ldr	r3, [pc, #72]	; (213c <system_clock_source_enable+0xa4>)
    20f4:	68db      	ldr	r3, [r3, #12]
    20f6:	06db      	lsls	r3, r3, #27
    20f8:	d5fb      	bpl.n	20f2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    20fa:	4a11      	ldr	r2, [pc, #68]	; (2140 <system_clock_source_enable+0xa8>)
    20fc:	6891      	ldr	r1, [r2, #8]
    20fe:	4b0f      	ldr	r3, [pc, #60]	; (213c <system_clock_source_enable+0xa4>)
    2100:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2102:	6852      	ldr	r2, [r2, #4]
    2104:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2106:	2200      	movs	r2, #0
    2108:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    210a:	4b0c      	ldr	r3, [pc, #48]	; (213c <system_clock_source_enable+0xa4>)
    210c:	68db      	ldr	r3, [r3, #12]
    210e:	06db      	lsls	r3, r3, #27
    2110:	d5fb      	bpl.n	210a <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2112:	4b0b      	ldr	r3, [pc, #44]	; (2140 <system_clock_source_enable+0xa8>)
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	b29b      	uxth	r3, r3
    2118:	4a08      	ldr	r2, [pc, #32]	; (213c <system_clock_source_enable+0xa4>)
    211a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    211c:	2000      	movs	r0, #0
    211e:	e7c2      	b.n	20a6 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2120:	4906      	ldr	r1, [pc, #24]	; (213c <system_clock_source_enable+0xa4>)
    2122:	2244      	movs	r2, #68	; 0x44
    2124:	5c8b      	ldrb	r3, [r1, r2]
    2126:	2002      	movs	r0, #2
    2128:	4303      	orrs	r3, r0
    212a:	b2db      	uxtb	r3, r3
    212c:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    212e:	2000      	movs	r0, #0
		break;
    2130:	e7b9      	b.n	20a6 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    2132:	2017      	movs	r0, #23
    2134:	e7b7      	b.n	20a6 <system_clock_source_enable+0xe>
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	00002a38 	.word	0x00002a38
    213c:	40000800 	.word	0x40000800
    2140:	2000008c 	.word	0x2000008c

00002144 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2144:	b530      	push	{r4, r5, lr}
    2146:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2148:	22c2      	movs	r2, #194	; 0xc2
    214a:	00d2      	lsls	r2, r2, #3
    214c:	4b15      	ldr	r3, [pc, #84]	; (21a4 <system_clock_init+0x60>)
    214e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2150:	4b15      	ldr	r3, [pc, #84]	; (21a8 <system_clock_init+0x64>)
    2152:	6859      	ldr	r1, [r3, #4]
    2154:	221e      	movs	r2, #30
    2156:	4391      	bics	r1, r2
    2158:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    215a:	4b14      	ldr	r3, [pc, #80]	; (21ac <system_clock_init+0x68>)
    215c:	4798      	blx	r3
	config->run_in_standby  = false;
    215e:	a803      	add	r0, sp, #12
    2160:	2400      	movs	r4, #0
    2162:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2164:	2501      	movs	r5, #1
    2166:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2168:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    216a:	4b11      	ldr	r3, [pc, #68]	; (21b0 <system_clock_init+0x6c>)
    216c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    216e:	2006      	movs	r0, #6
    2170:	4b10      	ldr	r3, [pc, #64]	; (21b4 <system_clock_init+0x70>)
    2172:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2174:	4b10      	ldr	r3, [pc, #64]	; (21b8 <system_clock_init+0x74>)
    2176:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2178:	4b10      	ldr	r3, [pc, #64]	; (21bc <system_clock_init+0x78>)
    217a:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    217c:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    217e:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2180:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2182:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    2184:	466b      	mov	r3, sp
    2186:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2188:	2306      	movs	r3, #6
    218a:	466a      	mov	r2, sp
    218c:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    218e:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2190:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2192:	4669      	mov	r1, sp
    2194:	2000      	movs	r0, #0
    2196:	4b0a      	ldr	r3, [pc, #40]	; (21c0 <system_clock_init+0x7c>)
    2198:	4798      	blx	r3
    219a:	2000      	movs	r0, #0
    219c:	4b09      	ldr	r3, [pc, #36]	; (21c4 <system_clock_init+0x80>)
    219e:	4798      	blx	r3
#endif
}
    21a0:	b005      	add	sp, #20
    21a2:	bd30      	pop	{r4, r5, pc}
    21a4:	40000800 	.word	0x40000800
    21a8:	41004000 	.word	0x41004000
    21ac:	00001fa9 	.word	0x00001fa9
    21b0:	0000205d 	.word	0x0000205d
    21b4:	00002099 	.word	0x00002099
    21b8:	000021c9 	.word	0x000021c9
    21bc:	40000400 	.word	0x40000400
    21c0:	000021ed 	.word	0x000021ed
    21c4:	000022bd 	.word	0x000022bd

000021c8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    21c8:	4a06      	ldr	r2, [pc, #24]	; (21e4 <system_gclk_init+0x1c>)
    21ca:	6993      	ldr	r3, [r2, #24]
    21cc:	2108      	movs	r1, #8
    21ce:	430b      	orrs	r3, r1
    21d0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    21d2:	2201      	movs	r2, #1
    21d4:	4b04      	ldr	r3, [pc, #16]	; (21e8 <system_gclk_init+0x20>)
    21d6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    21d8:	4b03      	ldr	r3, [pc, #12]	; (21e8 <system_gclk_init+0x20>)
    21da:	781b      	ldrb	r3, [r3, #0]
    21dc:	07db      	lsls	r3, r3, #31
    21de:	d4fb      	bmi.n	21d8 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    21e0:	4770      	bx	lr
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	40000400 	.word	0x40000400
    21e8:	40000c00 	.word	0x40000c00

000021ec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    21ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ee:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    21f0:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    21f2:	780c      	ldrb	r4, [r1, #0]
    21f4:	0224      	lsls	r4, r4, #8
    21f6:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    21f8:	784b      	ldrb	r3, [r1, #1]
    21fa:	2b00      	cmp	r3, #0
    21fc:	d002      	beq.n	2204 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    21fe:	2380      	movs	r3, #128	; 0x80
    2200:	02db      	lsls	r3, r3, #11
    2202:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2204:	7a4b      	ldrb	r3, [r1, #9]
    2206:	2b00      	cmp	r3, #0
    2208:	d002      	beq.n	2210 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    220a:	2380      	movs	r3, #128	; 0x80
    220c:	031b      	lsls	r3, r3, #12
    220e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2210:	6848      	ldr	r0, [r1, #4]
    2212:	2801      	cmp	r0, #1
    2214:	d912      	bls.n	223c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2216:	1e43      	subs	r3, r0, #1
    2218:	4203      	tst	r3, r0
    221a:	d03d      	beq.n	2298 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    221c:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    221e:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2220:	2380      	movs	r3, #128	; 0x80
    2222:	029b      	lsls	r3, r3, #10
    2224:	431c      	orrs	r4, r3
    2226:	e009      	b.n	223c <system_gclk_gen_set_config+0x50>
				div2_count++;
    2228:	3201      	adds	r2, #1
						mask <<= 1) {
    222a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    222c:	4283      	cmp	r3, r0
    222e:	d3fb      	bcc.n	2228 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2230:	0212      	lsls	r2, r2, #8
    2232:	4332      	orrs	r2, r6
    2234:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2236:	2380      	movs	r3, #128	; 0x80
    2238:	035b      	lsls	r3, r3, #13
    223a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    223c:	7a0b      	ldrb	r3, [r1, #8]
    223e:	2b00      	cmp	r3, #0
    2240:	d002      	beq.n	2248 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2242:	2380      	movs	r3, #128	; 0x80
    2244:	039b      	lsls	r3, r3, #14
    2246:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2248:	4b18      	ldr	r3, [pc, #96]	; (22ac <system_gclk_gen_set_config+0xc0>)
    224a:	785b      	ldrb	r3, [r3, #1]
    224c:	b25b      	sxtb	r3, r3
    224e:	2b00      	cmp	r3, #0
    2250:	db25      	blt.n	229e <system_gclk_gen_set_config+0xb2>
	return false;
    2252:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    2254:	2f00      	cmp	r7, #0
    2256:	d1f7      	bne.n	2248 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    2258:	4b15      	ldr	r3, [pc, #84]	; (22b0 <system_gclk_gen_set_config+0xc4>)
    225a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    225c:	4b15      	ldr	r3, [pc, #84]	; (22b4 <system_gclk_gen_set_config+0xc8>)
    225e:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2260:	4b12      	ldr	r3, [pc, #72]	; (22ac <system_gclk_gen_set_config+0xc0>)
    2262:	785b      	ldrb	r3, [r3, #1]
    2264:	b25b      	sxtb	r3, r3
    2266:	2b00      	cmp	r3, #0
    2268:	db1b      	blt.n	22a2 <system_gclk_gen_set_config+0xb6>
	return false;
    226a:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    226c:	2a00      	cmp	r2, #0
    226e:	d1f7      	bne.n	2260 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2270:	4b0e      	ldr	r3, [pc, #56]	; (22ac <system_gclk_gen_set_config+0xc0>)
    2272:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2274:	4b0d      	ldr	r3, [pc, #52]	; (22ac <system_gclk_gen_set_config+0xc0>)
    2276:	785b      	ldrb	r3, [r3, #1]
    2278:	b25b      	sxtb	r3, r3
    227a:	2b00      	cmp	r3, #0
    227c:	db13      	blt.n	22a6 <system_gclk_gen_set_config+0xba>
	return false;
    227e:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    2280:	2b00      	cmp	r3, #0
    2282:	d1f7      	bne.n	2274 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2284:	4a09      	ldr	r2, [pc, #36]	; (22ac <system_gclk_gen_set_config+0xc0>)
    2286:	6853      	ldr	r3, [r2, #4]
    2288:	2180      	movs	r1, #128	; 0x80
    228a:	0249      	lsls	r1, r1, #9
    228c:	400b      	ands	r3, r1
    228e:	431c      	orrs	r4, r3
    2290:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    2292:	4b09      	ldr	r3, [pc, #36]	; (22b8 <system_gclk_gen_set_config+0xcc>)
    2294:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2298:	2302      	movs	r3, #2
    229a:	2200      	movs	r2, #0
    229c:	e7c6      	b.n	222c <system_gclk_gen_set_config+0x40>
		return true;
    229e:	2701      	movs	r7, #1
    22a0:	e7d8      	b.n	2254 <system_gclk_gen_set_config+0x68>
    22a2:	2201      	movs	r2, #1
    22a4:	e7e2      	b.n	226c <system_gclk_gen_set_config+0x80>
    22a6:	2301      	movs	r3, #1
    22a8:	e7ea      	b.n	2280 <system_gclk_gen_set_config+0x94>
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	40000c00 	.word	0x40000c00
    22b0:	00001f39 	.word	0x00001f39
    22b4:	40000c08 	.word	0x40000c08
    22b8:	00001f79 	.word	0x00001f79

000022bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    22bc:	b570      	push	{r4, r5, r6, lr}
    22be:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    22c0:	4b10      	ldr	r3, [pc, #64]	; (2304 <system_gclk_gen_enable+0x48>)
    22c2:	785b      	ldrb	r3, [r3, #1]
    22c4:	b25b      	sxtb	r3, r3
    22c6:	2b00      	cmp	r3, #0
    22c8:	db17      	blt.n	22fa <system_gclk_gen_enable+0x3e>
	return false;
    22ca:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    22cc:	2c00      	cmp	r4, #0
    22ce:	d1f7      	bne.n	22c0 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    22d0:	4b0d      	ldr	r3, [pc, #52]	; (2308 <system_gclk_gen_enable+0x4c>)
    22d2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    22d4:	4b0d      	ldr	r3, [pc, #52]	; (230c <system_gclk_gen_enable+0x50>)
    22d6:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    22d8:	4b0a      	ldr	r3, [pc, #40]	; (2304 <system_gclk_gen_enable+0x48>)
    22da:	785b      	ldrb	r3, [r3, #1]
    22dc:	b25b      	sxtb	r3, r3
    22de:	2b00      	cmp	r3, #0
    22e0:	db0d      	blt.n	22fe <system_gclk_gen_enable+0x42>
	return false;
    22e2:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    22e4:	2b00      	cmp	r3, #0
    22e6:	d1f7      	bne.n	22d8 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    22e8:	4a06      	ldr	r2, [pc, #24]	; (2304 <system_gclk_gen_enable+0x48>)
    22ea:	6851      	ldr	r1, [r2, #4]
    22ec:	2380      	movs	r3, #128	; 0x80
    22ee:	025b      	lsls	r3, r3, #9
    22f0:	430b      	orrs	r3, r1
    22f2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    22f4:	4b06      	ldr	r3, [pc, #24]	; (2310 <system_gclk_gen_enable+0x54>)
    22f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22f8:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    22fa:	2401      	movs	r4, #1
    22fc:	e7e6      	b.n	22cc <system_gclk_gen_enable+0x10>
    22fe:	2301      	movs	r3, #1
    2300:	e7f0      	b.n	22e4 <system_gclk_gen_enable+0x28>
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	40000c00 	.word	0x40000c00
    2308:	00001f39 	.word	0x00001f39
    230c:	40000c04 	.word	0x40000c04
    2310:	00001f79 	.word	0x00001f79

00002314 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2316:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2318:	4b22      	ldr	r3, [pc, #136]	; (23a4 <system_gclk_gen_get_hz+0x90>)
    231a:	785b      	ldrb	r3, [r3, #1]
    231c:	b25b      	sxtb	r3, r3
    231e:	2b00      	cmp	r3, #0
    2320:	db34      	blt.n	238c <system_gclk_gen_get_hz+0x78>
	return false;
    2322:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    2324:	2d00      	cmp	r5, #0
    2326:	d1f7      	bne.n	2318 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    2328:	4b1f      	ldr	r3, [pc, #124]	; (23a8 <system_gclk_gen_get_hz+0x94>)
    232a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    232c:	4b1f      	ldr	r3, [pc, #124]	; (23ac <system_gclk_gen_get_hz+0x98>)
    232e:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2330:	4b1c      	ldr	r3, [pc, #112]	; (23a4 <system_gclk_gen_get_hz+0x90>)
    2332:	785b      	ldrb	r3, [r3, #1]
    2334:	b25b      	sxtb	r3, r3
    2336:	2b00      	cmp	r3, #0
    2338:	db2a      	blt.n	2390 <system_gclk_gen_get_hz+0x7c>
	return false;
    233a:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    233c:	2c00      	cmp	r4, #0
    233e:	d1f7      	bne.n	2330 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2340:	4e18      	ldr	r6, [pc, #96]	; (23a4 <system_gclk_gen_get_hz+0x90>)
    2342:	6870      	ldr	r0, [r6, #4]
    2344:	04c0      	lsls	r0, r0, #19
    2346:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2348:	4b19      	ldr	r3, [pc, #100]	; (23b0 <system_gclk_gen_get_hz+0x9c>)
    234a:	4798      	blx	r3
    234c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    234e:	4b17      	ldr	r3, [pc, #92]	; (23ac <system_gclk_gen_get_hz+0x98>)
    2350:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2352:	6876      	ldr	r6, [r6, #4]
    2354:	02f6      	lsls	r6, r6, #11
    2356:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2358:	4b16      	ldr	r3, [pc, #88]	; (23b4 <system_gclk_gen_get_hz+0xa0>)
    235a:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    235c:	4b11      	ldr	r3, [pc, #68]	; (23a4 <system_gclk_gen_get_hz+0x90>)
    235e:	785b      	ldrb	r3, [r3, #1]
    2360:	b25b      	sxtb	r3, r3
    2362:	2b00      	cmp	r3, #0
    2364:	db16      	blt.n	2394 <system_gclk_gen_get_hz+0x80>
	return false;
    2366:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    2368:	2b00      	cmp	r3, #0
    236a:	d1f7      	bne.n	235c <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    236c:	4b0d      	ldr	r3, [pc, #52]	; (23a4 <system_gclk_gen_get_hz+0x90>)
    236e:	689c      	ldr	r4, [r3, #8]
    2370:	0224      	lsls	r4, r4, #8
    2372:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2374:	4b10      	ldr	r3, [pc, #64]	; (23b8 <system_gclk_gen_get_hz+0xa4>)
    2376:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2378:	2e00      	cmp	r6, #0
    237a:	d10d      	bne.n	2398 <system_gclk_gen_get_hz+0x84>
    237c:	2c01      	cmp	r4, #1
    237e:	d90b      	bls.n	2398 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    2380:	0021      	movs	r1, r4
    2382:	0028      	movs	r0, r5
    2384:	4b0d      	ldr	r3, [pc, #52]	; (23bc <system_gclk_gen_get_hz+0xa8>)
    2386:	4798      	blx	r3
    2388:	0005      	movs	r5, r0
    238a:	e009      	b.n	23a0 <system_gclk_gen_get_hz+0x8c>
		return true;
    238c:	2501      	movs	r5, #1
    238e:	e7c9      	b.n	2324 <system_gclk_gen_get_hz+0x10>
    2390:	2401      	movs	r4, #1
    2392:	e7d3      	b.n	233c <system_gclk_gen_get_hz+0x28>
    2394:	2301      	movs	r3, #1
    2396:	e7e7      	b.n	2368 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    2398:	2e00      	cmp	r6, #0
    239a:	d001      	beq.n	23a0 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    239c:	3401      	adds	r4, #1
    239e:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    23a0:	0028      	movs	r0, r5
    23a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23a4:	40000c00 	.word	0x40000c00
    23a8:	00001f39 	.word	0x00001f39
    23ac:	40000c04 	.word	0x40000c04
    23b0:	00001fcd 	.word	0x00001fcd
    23b4:	40000c08 	.word	0x40000c08
    23b8:	00001f79 	.word	0x00001f79
    23bc:	0000281d 	.word	0x0000281d

000023c0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    23c0:	b510      	push	{r4, lr}
    23c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    23c4:	4b06      	ldr	r3, [pc, #24]	; (23e0 <system_gclk_chan_enable+0x20>)
    23c6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    23c8:	4b06      	ldr	r3, [pc, #24]	; (23e4 <system_gclk_chan_enable+0x24>)
    23ca:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    23cc:	4a06      	ldr	r2, [pc, #24]	; (23e8 <system_gclk_chan_enable+0x28>)
    23ce:	8853      	ldrh	r3, [r2, #2]
    23d0:	2180      	movs	r1, #128	; 0x80
    23d2:	01c9      	lsls	r1, r1, #7
    23d4:	430b      	orrs	r3, r1
    23d6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    23d8:	4b04      	ldr	r3, [pc, #16]	; (23ec <system_gclk_chan_enable+0x2c>)
    23da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    23dc:	bd10      	pop	{r4, pc}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	00001f39 	.word	0x00001f39
    23e4:	40000c02 	.word	0x40000c02
    23e8:	40000c00 	.word	0x40000c00
    23ec:	00001f79 	.word	0x00001f79

000023f0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    23f0:	b510      	push	{r4, lr}
    23f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    23f4:	4b0e      	ldr	r3, [pc, #56]	; (2430 <system_gclk_chan_disable+0x40>)
    23f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    23f8:	4b0e      	ldr	r3, [pc, #56]	; (2434 <system_gclk_chan_disable+0x44>)
    23fa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    23fc:	490e      	ldr	r1, [pc, #56]	; (2438 <system_gclk_chan_disable+0x48>)
    23fe:	884b      	ldrh	r3, [r1, #2]
    2400:	051b      	lsls	r3, r3, #20
    2402:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2404:	884b      	ldrh	r3, [r1, #2]
    2406:	480d      	ldr	r0, [pc, #52]	; (243c <system_gclk_chan_disable+0x4c>)
    2408:	4003      	ands	r3, r0
    240a:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    240c:	884b      	ldrh	r3, [r1, #2]
    240e:	480c      	ldr	r0, [pc, #48]	; (2440 <system_gclk_chan_disable+0x50>)
    2410:	4003      	ands	r3, r0
    2412:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2414:	4b08      	ldr	r3, [pc, #32]	; (2438 <system_gclk_chan_disable+0x48>)
    2416:	885b      	ldrh	r3, [r3, #2]
    2418:	045b      	lsls	r3, r3, #17
    241a:	d4fb      	bmi.n	2414 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    241c:	4806      	ldr	r0, [pc, #24]	; (2438 <system_gclk_chan_disable+0x48>)
    241e:	8841      	ldrh	r1, [r0, #2]
    2420:	0213      	lsls	r3, r2, #8
    2422:	4a06      	ldr	r2, [pc, #24]	; (243c <system_gclk_chan_disable+0x4c>)
    2424:	400a      	ands	r2, r1
    2426:	4313      	orrs	r3, r2
    2428:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    242a:	4b06      	ldr	r3, [pc, #24]	; (2444 <system_gclk_chan_disable+0x54>)
    242c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    242e:	bd10      	pop	{r4, pc}
    2430:	00001f39 	.word	0x00001f39
    2434:	40000c02 	.word	0x40000c02
    2438:	40000c00 	.word	0x40000c00
    243c:	fffff0ff 	.word	0xfffff0ff
    2440:	ffffbfff 	.word	0xffffbfff
    2444:	00001f79 	.word	0x00001f79

00002448 <system_gclk_chan_set_config>:
{
    2448:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    244a:	780c      	ldrb	r4, [r1, #0]
    244c:	0224      	lsls	r4, r4, #8
    244e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2450:	4b02      	ldr	r3, [pc, #8]	; (245c <system_gclk_chan_set_config+0x14>)
    2452:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2454:	b2a4      	uxth	r4, r4
    2456:	4b02      	ldr	r3, [pc, #8]	; (2460 <system_gclk_chan_set_config+0x18>)
    2458:	805c      	strh	r4, [r3, #2]
}
    245a:	bd10      	pop	{r4, pc}
    245c:	000023f1 	.word	0x000023f1
    2460:	40000c00 	.word	0x40000c00

00002464 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2464:	b510      	push	{r4, lr}
    2466:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2468:	4b06      	ldr	r3, [pc, #24]	; (2484 <system_gclk_chan_get_hz+0x20>)
    246a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    246c:	4b06      	ldr	r3, [pc, #24]	; (2488 <system_gclk_chan_get_hz+0x24>)
    246e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2470:	4b06      	ldr	r3, [pc, #24]	; (248c <system_gclk_chan_get_hz+0x28>)
    2472:	885c      	ldrh	r4, [r3, #2]
    2474:	0524      	lsls	r4, r4, #20
    2476:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2478:	4b05      	ldr	r3, [pc, #20]	; (2490 <system_gclk_chan_get_hz+0x2c>)
    247a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    247c:	0020      	movs	r0, r4
    247e:	4b05      	ldr	r3, [pc, #20]	; (2494 <system_gclk_chan_get_hz+0x30>)
    2480:	4798      	blx	r3
}
    2482:	bd10      	pop	{r4, pc}
    2484:	00001f39 	.word	0x00001f39
    2488:	40000c02 	.word	0x40000c02
    248c:	40000c00 	.word	0x40000c00
    2490:	00001f79 	.word	0x00001f79
    2494:	00002315 	.word	0x00002315

00002498 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2498:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    249a:	78d3      	ldrb	r3, [r2, #3]
    249c:	2b00      	cmp	r3, #0
    249e:	d120      	bne.n	24e2 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    24a0:	7815      	ldrb	r5, [r2, #0]
    24a2:	2d80      	cmp	r5, #128	; 0x80
    24a4:	d01b      	beq.n	24de <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    24a6:	062d      	lsls	r5, r5, #24
    24a8:	2380      	movs	r3, #128	; 0x80
    24aa:	025b      	lsls	r3, r3, #9
    24ac:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    24ae:	7853      	ldrb	r3, [r2, #1]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d001      	beq.n	24b8 <_system_pinmux_config+0x20>
    24b4:	2b02      	cmp	r3, #2
    24b6:	d10a      	bne.n	24ce <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    24b8:	2380      	movs	r3, #128	; 0x80
    24ba:	029b      	lsls	r3, r3, #10
    24bc:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    24be:	7894      	ldrb	r4, [r2, #2]
    24c0:	2c00      	cmp	r4, #0
    24c2:	d002      	beq.n	24ca <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    24c4:	23c0      	movs	r3, #192	; 0xc0
    24c6:	02db      	lsls	r3, r3, #11
    24c8:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    24ca:	6041      	str	r1, [r0, #4]
    24cc:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24ce:	7853      	ldrb	r3, [r2, #1]
    24d0:	3b01      	subs	r3, #1
    24d2:	b2db      	uxtb	r3, r3
    24d4:	2b01      	cmp	r3, #1
    24d6:	d806      	bhi.n	24e6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    24d8:	4b13      	ldr	r3, [pc, #76]	; (2528 <_system_pinmux_config+0x90>)
    24da:	401d      	ands	r5, r3
    24dc:	e003      	b.n	24e6 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    24de:	2500      	movs	r5, #0
    24e0:	e7e5      	b.n	24ae <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    24e2:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    24e4:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    24e6:	040c      	lsls	r4, r1, #16
    24e8:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    24ea:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24ec:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    24ee:	26a0      	movs	r6, #160	; 0xa0
    24f0:	05f6      	lsls	r6, r6, #23
    24f2:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24f4:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24f6:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    24f8:	24d0      	movs	r4, #208	; 0xd0
    24fa:	0624      	lsls	r4, r4, #24
    24fc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24fe:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2500:	78d3      	ldrb	r3, [r2, #3]
    2502:	2b00      	cmp	r3, #0
    2504:	d10a      	bne.n	251c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2506:	036b      	lsls	r3, r5, #13
    2508:	d503      	bpl.n	2512 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    250a:	7893      	ldrb	r3, [r2, #2]
    250c:	2b01      	cmp	r3, #1
    250e:	d006      	beq.n	251e <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2510:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2512:	7853      	ldrb	r3, [r2, #1]
    2514:	3b01      	subs	r3, #1
    2516:	b2db      	uxtb	r3, r3
    2518:	2b01      	cmp	r3, #1
    251a:	d902      	bls.n	2522 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    251c:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    251e:	6181      	str	r1, [r0, #24]
    2520:	e7f7      	b.n	2512 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    2522:	6081      	str	r1, [r0, #8]
}
    2524:	e7fa      	b.n	251c <_system_pinmux_config+0x84>
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	fffbffff 	.word	0xfffbffff

0000252c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    252c:	b510      	push	{r4, lr}
    252e:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    2530:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    2532:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    2534:	2900      	cmp	r1, #0
    2536:	d10b      	bne.n	2550 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    2538:	01db      	lsls	r3, r3, #7
    253a:	4906      	ldr	r1, [pc, #24]	; (2554 <system_pinmux_pin_set_config+0x28>)
    253c:	468c      	mov	ip, r1
    253e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2540:	241f      	movs	r4, #31
    2542:	4020      	ands	r0, r4
    2544:	2101      	movs	r1, #1
    2546:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2548:	0018      	movs	r0, r3
    254a:	4b03      	ldr	r3, [pc, #12]	; (2558 <system_pinmux_pin_set_config+0x2c>)
    254c:	4798      	blx	r3
}
    254e:	bd10      	pop	{r4, pc}
		return NULL;
    2550:	2300      	movs	r3, #0
    2552:	e7f5      	b.n	2540 <system_pinmux_pin_set_config+0x14>
    2554:	41004400 	.word	0x41004400
    2558:	00002499 	.word	0x00002499

0000255c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    255c:	4770      	bx	lr
	...

00002560 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2560:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2562:	4b05      	ldr	r3, [pc, #20]	; (2578 <system_init+0x18>)
    2564:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2566:	4b05      	ldr	r3, [pc, #20]	; (257c <system_init+0x1c>)
    2568:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    256a:	4b05      	ldr	r3, [pc, #20]	; (2580 <system_init+0x20>)
    256c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    256e:	4b05      	ldr	r3, [pc, #20]	; (2584 <system_init+0x24>)
    2570:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2572:	4b05      	ldr	r3, [pc, #20]	; (2588 <system_init+0x28>)
    2574:	4798      	blx	r3
}
    2576:	bd10      	pop	{r4, pc}
    2578:	00002145 	.word	0x00002145
    257c:	00001f35 	.word	0x00001f35
    2580:	0000255d 	.word	0x0000255d
    2584:	0000255d 	.word	0x0000255d
    2588:	0000255d 	.word	0x0000255d

0000258c <Dummy_Handler>:
    258c:	e7fe      	b.n	258c <Dummy_Handler>
	...

00002590 <Reset_Handler>:
    2590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2592:	4a23      	ldr	r2, [pc, #140]	; (2620 <Reset_Handler+0x90>)
    2594:	4b23      	ldr	r3, [pc, #140]	; (2624 <Reset_Handler+0x94>)
    2596:	429a      	cmp	r2, r3
    2598:	d009      	beq.n	25ae <Reset_Handler+0x1e>
    259a:	4b22      	ldr	r3, [pc, #136]	; (2624 <Reset_Handler+0x94>)
    259c:	4a20      	ldr	r2, [pc, #128]	; (2620 <Reset_Handler+0x90>)
    259e:	e003      	b.n	25a8 <Reset_Handler+0x18>
    25a0:	6811      	ldr	r1, [r2, #0]
    25a2:	6019      	str	r1, [r3, #0]
    25a4:	3304      	adds	r3, #4
    25a6:	3204      	adds	r2, #4
    25a8:	491f      	ldr	r1, [pc, #124]	; (2628 <Reset_Handler+0x98>)
    25aa:	428b      	cmp	r3, r1
    25ac:	d3f8      	bcc.n	25a0 <Reset_Handler+0x10>
    25ae:	4b1f      	ldr	r3, [pc, #124]	; (262c <Reset_Handler+0x9c>)
    25b0:	e002      	b.n	25b8 <Reset_Handler+0x28>
    25b2:	2200      	movs	r2, #0
    25b4:	601a      	str	r2, [r3, #0]
    25b6:	3304      	adds	r3, #4
    25b8:	4a1d      	ldr	r2, [pc, #116]	; (2630 <Reset_Handler+0xa0>)
    25ba:	4293      	cmp	r3, r2
    25bc:	d3f9      	bcc.n	25b2 <Reset_Handler+0x22>
    25be:	4a1d      	ldr	r2, [pc, #116]	; (2634 <Reset_Handler+0xa4>)
    25c0:	21ff      	movs	r1, #255	; 0xff
    25c2:	4b1d      	ldr	r3, [pc, #116]	; (2638 <Reset_Handler+0xa8>)
    25c4:	438b      	bics	r3, r1
    25c6:	6093      	str	r3, [r2, #8]
    25c8:	39fd      	subs	r1, #253	; 0xfd
    25ca:	2390      	movs	r3, #144	; 0x90
    25cc:	005b      	lsls	r3, r3, #1
    25ce:	4a1b      	ldr	r2, [pc, #108]	; (263c <Reset_Handler+0xac>)
    25d0:	50d1      	str	r1, [r2, r3]
    25d2:	4a1b      	ldr	r2, [pc, #108]	; (2640 <Reset_Handler+0xb0>)
    25d4:	78d3      	ldrb	r3, [r2, #3]
    25d6:	2503      	movs	r5, #3
    25d8:	43ab      	bics	r3, r5
    25da:	2402      	movs	r4, #2
    25dc:	4323      	orrs	r3, r4
    25de:	70d3      	strb	r3, [r2, #3]
    25e0:	78d3      	ldrb	r3, [r2, #3]
    25e2:	270c      	movs	r7, #12
    25e4:	43bb      	bics	r3, r7
    25e6:	2608      	movs	r6, #8
    25e8:	4333      	orrs	r3, r6
    25ea:	70d3      	strb	r3, [r2, #3]
    25ec:	4b15      	ldr	r3, [pc, #84]	; (2644 <Reset_Handler+0xb4>)
    25ee:	7b98      	ldrb	r0, [r3, #14]
    25f0:	2230      	movs	r2, #48	; 0x30
    25f2:	4390      	bics	r0, r2
    25f4:	2220      	movs	r2, #32
    25f6:	4310      	orrs	r0, r2
    25f8:	7398      	strb	r0, [r3, #14]
    25fa:	7b99      	ldrb	r1, [r3, #14]
    25fc:	43b9      	bics	r1, r7
    25fe:	4331      	orrs	r1, r6
    2600:	7399      	strb	r1, [r3, #14]
    2602:	7b9a      	ldrb	r2, [r3, #14]
    2604:	43aa      	bics	r2, r5
    2606:	4322      	orrs	r2, r4
    2608:	739a      	strb	r2, [r3, #14]
    260a:	4a0f      	ldr	r2, [pc, #60]	; (2648 <Reset_Handler+0xb8>)
    260c:	6851      	ldr	r1, [r2, #4]
    260e:	2380      	movs	r3, #128	; 0x80
    2610:	430b      	orrs	r3, r1
    2612:	6053      	str	r3, [r2, #4]
    2614:	4b0d      	ldr	r3, [pc, #52]	; (264c <Reset_Handler+0xbc>)
    2616:	4798      	blx	r3
    2618:	4b0d      	ldr	r3, [pc, #52]	; (2650 <Reset_Handler+0xc0>)
    261a:	4798      	blx	r3
    261c:	e7fe      	b.n	261c <Reset_Handler+0x8c>
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	00002a7c 	.word	0x00002a7c
    2624:	20000000 	.word	0x20000000
    2628:	2000000c 	.word	0x2000000c
    262c:	2000000c 	.word	0x2000000c
    2630:	20000100 	.word	0x20000100
    2634:	e000ed00 	.word	0xe000ed00
    2638:	00000000 	.word	0x00000000
    263c:	41007000 	.word	0x41007000
    2640:	41005000 	.word	0x41005000
    2644:	41004800 	.word	0x41004800
    2648:	41004000 	.word	0x41004000
    264c:	00002989 	.word	0x00002989
    2650:	000027b5 	.word	0x000027b5

00002654 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    2654:	b5f0      	push	{r4, r5, r6, r7, lr}
    2656:	46ce      	mov	lr, r9
    2658:	4647      	mov	r7, r8
    265a:	b580      	push	{r7, lr}
    265c:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    265e:	ac01      	add	r4, sp, #4
    2660:	2300      	movs	r3, #0
    2662:	4698      	mov	r8, r3
    2664:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2666:	2601      	movs	r6, #1
    2668:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    266a:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    266c:	0021      	movs	r1, r4
    266e:	200b      	movs	r0, #11
    2670:	4d25      	ldr	r5, [pc, #148]	; (2708 <conf_port_pin+0xb4>)
    2672:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2674:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    2676:	0021      	movs	r1, r4
    2678:	200a      	movs	r0, #10
    267a:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    267c:	4f23      	ldr	r7, [pc, #140]	; (270c <conf_port_pin+0xb8>)
    267e:	2380      	movs	r3, #128	; 0x80
    2680:	00db      	lsls	r3, r3, #3
    2682:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    2684:	0021      	movs	r1, r4
    2686:	2005      	movs	r0, #5
    2688:	47a8      	blx	r5
    268a:	2320      	movs	r3, #32
    268c:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    268e:	0021      	movs	r1, r4
    2690:	2006      	movs	r0, #6
    2692:	47a8      	blx	r5
    2694:	2340      	movs	r3, #64	; 0x40
    2696:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    2698:	0021      	movs	r1, r4
    269a:	2007      	movs	r0, #7
    269c:	47a8      	blx	r5
    269e:	2380      	movs	r3, #128	; 0x80
    26a0:	4699      	mov	r9, r3
    26a2:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    26a4:	4643      	mov	r3, r8
    26a6:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    26a8:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    26aa:	0021      	movs	r1, r4
    26ac:	200f      	movs	r0, #15
    26ae:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    26b0:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    26b2:	0021      	movs	r1, r4
    26b4:	200e      	movs	r0, #14
    26b6:	47a8      	blx	r5
    26b8:	2380      	movs	r3, #128	; 0x80
    26ba:	01db      	lsls	r3, r3, #7
    26bc:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    26be:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    26c0:	2302      	movs	r3, #2
    26c2:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    26c4:	0021      	movs	r1, r4
    26c6:	202f      	movs	r0, #47	; 0x2f
    26c8:	47a8      	blx	r5
    26ca:	003b      	movs	r3, r7
    26cc:	444b      	add	r3, r9
    26ce:	2280      	movs	r2, #128	; 0x80
    26d0:	0212      	lsls	r2, r2, #8
    26d2:	619a      	str	r2, [r3, #24]
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    26d4:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    26d6:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    26d8:	0021      	movs	r1, r4
    26da:	2011      	movs	r0, #17
    26dc:	47a8      	blx	r5
    26de:	2380      	movs	r3, #128	; 0x80
    26e0:	029b      	lsls	r3, r3, #10
    26e2:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    26e4:	4643      	mov	r3, r8
    26e6:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    26e8:	0021      	movs	r1, r4
    26ea:	2030      	movs	r0, #48	; 0x30
    26ec:	47a8      	blx	r5
	
	
	/**************config pin for 27*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    26ee:	7026      	strb	r6, [r4, #0]
	//config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS27, &config_port_pin);
    26f0:	0021      	movs	r1, r4
    26f2:	2017      	movs	r0, #23
    26f4:	47a8      	blx	r5
    26f6:	2380      	movs	r3, #128	; 0x80
    26f8:	041b      	lsls	r3, r3, #16
    26fa:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(SS27, true);	
} // end conf_port_pin(void)
    26fc:	b003      	add	sp, #12
    26fe:	bc0c      	pop	{r2, r3}
    2700:	4690      	mov	r8, r2
    2702:	4699      	mov	r9, r3
    2704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	00000a41 	.word	0x00000a41
    270c:	41004400 	.word	0x41004400

00002710 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    2710:	b500      	push	{lr}
    2712:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    2714:	a801      	add	r0, sp, #4
    2716:	2300      	movs	r3, #0
    2718:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    271a:	2201      	movs	r2, #1
    271c:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    271e:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    2720:	4b01      	ldr	r3, [pc, #4]	; (2728 <clk_osc8m_init+0x18>)
    2722:	4798      	blx	r3
}
    2724:	b003      	add	sp, #12
    2726:	bd00      	pop	{pc}
    2728:	0000205d 	.word	0x0000205d

0000272c <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    272c:	b500      	push	{lr}
    272e:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    2730:	4b0a      	ldr	r3, [pc, #40]	; (275c <clk_gclk0_init+0x30>)
    2732:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2734:	2300      	movs	r3, #0
    2736:	4a0a      	ldr	r2, [pc, #40]	; (2760 <clk_gclk0_init+0x34>)
    2738:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    273a:	a901      	add	r1, sp, #4
    273c:	2206      	movs	r2, #6
    273e:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    2740:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    2742:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    2744:	3a05      	subs	r2, #5
    2746:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    2748:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    274a:	2000      	movs	r0, #0
    274c:	4b05      	ldr	r3, [pc, #20]	; (2764 <clk_gclk0_init+0x38>)
    274e:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    2750:	2000      	movs	r0, #0
    2752:	4b05      	ldr	r3, [pc, #20]	; (2768 <clk_gclk0_init+0x3c>)
    2754:	4798      	blx	r3
    2756:	b005      	add	sp, #20
    2758:	bd00      	pop	{pc}
    275a:	46c0      	nop			; (mov r8, r8)
    275c:	000021c9 	.word	0x000021c9
    2760:	40000400 	.word	0x40000400
    2764:	000021ed 	.word	0x000021ed
    2768:	000022bd 	.word	0x000022bd

0000276c <sys_clk_init>:
{
    276c:	b510      	push	{r4, lr}
	clk_osc8m_init();
    276e:	4b03      	ldr	r3, [pc, #12]	; (277c <sys_clk_init+0x10>)
    2770:	4798      	blx	r3
	clk_gclk0_init();
    2772:	4b03      	ldr	r3, [pc, #12]	; (2780 <sys_clk_init+0x14>)
    2774:	4798      	blx	r3
    delay_init();
    2776:	4b03      	ldr	r3, [pc, #12]	; (2784 <sys_clk_init+0x18>)
    2778:	4798      	blx	r3
}
    277a:	bd10      	pop	{r4, pc}
    277c:	00002711 	.word	0x00002711
    2780:	0000272d 	.word	0x0000272d
    2784:	000009d5 	.word	0x000009d5

00002788 <simSysInit>:
{
    2788:	b510      	push	{r4, lr}
	system_init();
    278a:	4b05      	ldr	r3, [pc, #20]	; (27a0 <simSysInit+0x18>)
    278c:	4798      	blx	r3
	sys_clk_init();
    278e:	4b05      	ldr	r3, [pc, #20]	; (27a4 <simSysInit+0x1c>)
    2790:	4798      	blx	r3
	conf_port_pin();
    2792:	4b05      	ldr	r3, [pc, #20]	; (27a8 <simSysInit+0x20>)
    2794:	4798      	blx	r3
	spi40_init();
    2796:	4b05      	ldr	r3, [pc, #20]	; (27ac <simSysInit+0x24>)
    2798:	4798      	blx	r3
    uartfiber_init();
    279a:	4b05      	ldr	r3, [pc, #20]	; (27b0 <simSysInit+0x28>)
    279c:	4798      	blx	r3
}
    279e:	bd10      	pop	{r4, pc}
    27a0:	00002561 	.word	0x00002561
    27a4:	0000276d 	.word	0x0000276d
    27a8:	00002655 	.word	0x00002655
    27ac:	00000115 	.word	0x00000115
    27b0:	00000915 	.word	0x00000915

000027b4 <main>:
{
    27b4:	b510      	push	{r4, lr}
    27b6:	b084      	sub	sp, #16
    rssi_vals acquired_rssi = {10, 20, 30};
    27b8:	ac02      	add	r4, sp, #8
    27ba:	2208      	movs	r2, #8
    27bc:	2100      	movs	r1, #0
    27be:	0020      	movs	r0, r4
    27c0:	4b0f      	ldr	r3, [pc, #60]	; (2800 <main+0x4c>)
    27c2:	4798      	blx	r3
    27c4:	230a      	movs	r3, #10
    27c6:	8023      	strh	r3, [r4, #0]
    27c8:	330a      	adds	r3, #10
    27ca:	8063      	strh	r3, [r4, #2]
    27cc:	330a      	adds	r3, #10
    27ce:	80a3      	strh	r3, [r4, #4]
    27d0:	2208      	movs	r2, #8
    27d2:	0021      	movs	r1, r4
    27d4:	4668      	mov	r0, sp
    27d6:	4b0b      	ldr	r3, [pc, #44]	; (2804 <main+0x50>)
    27d8:	4798      	blx	r3
    simSysInit();
    27da:	4b0b      	ldr	r3, [pc, #44]	; (2808 <main+0x54>)
    27dc:	4798      	blx	r3
    delay_ms(100);
    27de:	2064      	movs	r0, #100	; 0x64
    27e0:	4b0a      	ldr	r3, [pc, #40]	; (280c <main+0x58>)
    27e2:	4798      	blx	r3
    spi40_rx_init();
    27e4:	4b0a      	ldr	r3, [pc, #40]	; (2810 <main+0x5c>)
    27e6:	4798      	blx	r3
		buf = spi40_rd8(AX5043_FIFODATA);
    27e8:	2029      	movs	r0, #41	; 0x29
    27ea:	4b0a      	ldr	r3, [pc, #40]	; (2814 <main+0x60>)
    27ec:	4798      	blx	r3
		acquired_rssi.rssi169 = spi40_rssi();
    27ee:	4b0a      	ldr	r3, [pc, #40]	; (2818 <main+0x64>)
    27f0:	4798      	blx	r3
    27f2:	b200      	sxth	r0, r0
    27f4:	466b      	mov	r3, sp
    27f6:	8058      	strh	r0, [r3, #2]
        delay_ms(100);
    27f8:	2064      	movs	r0, #100	; 0x64
    27fa:	4b04      	ldr	r3, [pc, #16]	; (280c <main+0x58>)
    27fc:	4798      	blx	r3
    27fe:	e7f3      	b.n	27e8 <main+0x34>
    2800:	000029e3 	.word	0x000029e3
    2804:	000029d1 	.word	0x000029d1
    2808:	00002789 	.word	0x00002789
    280c:	00000a11 	.word	0x00000a11
    2810:	00000345 	.word	0x00000345
    2814:	000002ad 	.word	0x000002ad
    2818:	00000831 	.word	0x00000831

0000281c <__udivsi3>:
    281c:	2200      	movs	r2, #0
    281e:	0843      	lsrs	r3, r0, #1
    2820:	428b      	cmp	r3, r1
    2822:	d374      	bcc.n	290e <__udivsi3+0xf2>
    2824:	0903      	lsrs	r3, r0, #4
    2826:	428b      	cmp	r3, r1
    2828:	d35f      	bcc.n	28ea <__udivsi3+0xce>
    282a:	0a03      	lsrs	r3, r0, #8
    282c:	428b      	cmp	r3, r1
    282e:	d344      	bcc.n	28ba <__udivsi3+0x9e>
    2830:	0b03      	lsrs	r3, r0, #12
    2832:	428b      	cmp	r3, r1
    2834:	d328      	bcc.n	2888 <__udivsi3+0x6c>
    2836:	0c03      	lsrs	r3, r0, #16
    2838:	428b      	cmp	r3, r1
    283a:	d30d      	bcc.n	2858 <__udivsi3+0x3c>
    283c:	22ff      	movs	r2, #255	; 0xff
    283e:	0209      	lsls	r1, r1, #8
    2840:	ba12      	rev	r2, r2
    2842:	0c03      	lsrs	r3, r0, #16
    2844:	428b      	cmp	r3, r1
    2846:	d302      	bcc.n	284e <__udivsi3+0x32>
    2848:	1212      	asrs	r2, r2, #8
    284a:	0209      	lsls	r1, r1, #8
    284c:	d065      	beq.n	291a <__udivsi3+0xfe>
    284e:	0b03      	lsrs	r3, r0, #12
    2850:	428b      	cmp	r3, r1
    2852:	d319      	bcc.n	2888 <__udivsi3+0x6c>
    2854:	e000      	b.n	2858 <__udivsi3+0x3c>
    2856:	0a09      	lsrs	r1, r1, #8
    2858:	0bc3      	lsrs	r3, r0, #15
    285a:	428b      	cmp	r3, r1
    285c:	d301      	bcc.n	2862 <__udivsi3+0x46>
    285e:	03cb      	lsls	r3, r1, #15
    2860:	1ac0      	subs	r0, r0, r3
    2862:	4152      	adcs	r2, r2
    2864:	0b83      	lsrs	r3, r0, #14
    2866:	428b      	cmp	r3, r1
    2868:	d301      	bcc.n	286e <__udivsi3+0x52>
    286a:	038b      	lsls	r3, r1, #14
    286c:	1ac0      	subs	r0, r0, r3
    286e:	4152      	adcs	r2, r2
    2870:	0b43      	lsrs	r3, r0, #13
    2872:	428b      	cmp	r3, r1
    2874:	d301      	bcc.n	287a <__udivsi3+0x5e>
    2876:	034b      	lsls	r3, r1, #13
    2878:	1ac0      	subs	r0, r0, r3
    287a:	4152      	adcs	r2, r2
    287c:	0b03      	lsrs	r3, r0, #12
    287e:	428b      	cmp	r3, r1
    2880:	d301      	bcc.n	2886 <__udivsi3+0x6a>
    2882:	030b      	lsls	r3, r1, #12
    2884:	1ac0      	subs	r0, r0, r3
    2886:	4152      	adcs	r2, r2
    2888:	0ac3      	lsrs	r3, r0, #11
    288a:	428b      	cmp	r3, r1
    288c:	d301      	bcc.n	2892 <__udivsi3+0x76>
    288e:	02cb      	lsls	r3, r1, #11
    2890:	1ac0      	subs	r0, r0, r3
    2892:	4152      	adcs	r2, r2
    2894:	0a83      	lsrs	r3, r0, #10
    2896:	428b      	cmp	r3, r1
    2898:	d301      	bcc.n	289e <__udivsi3+0x82>
    289a:	028b      	lsls	r3, r1, #10
    289c:	1ac0      	subs	r0, r0, r3
    289e:	4152      	adcs	r2, r2
    28a0:	0a43      	lsrs	r3, r0, #9
    28a2:	428b      	cmp	r3, r1
    28a4:	d301      	bcc.n	28aa <__udivsi3+0x8e>
    28a6:	024b      	lsls	r3, r1, #9
    28a8:	1ac0      	subs	r0, r0, r3
    28aa:	4152      	adcs	r2, r2
    28ac:	0a03      	lsrs	r3, r0, #8
    28ae:	428b      	cmp	r3, r1
    28b0:	d301      	bcc.n	28b6 <__udivsi3+0x9a>
    28b2:	020b      	lsls	r3, r1, #8
    28b4:	1ac0      	subs	r0, r0, r3
    28b6:	4152      	adcs	r2, r2
    28b8:	d2cd      	bcs.n	2856 <__udivsi3+0x3a>
    28ba:	09c3      	lsrs	r3, r0, #7
    28bc:	428b      	cmp	r3, r1
    28be:	d301      	bcc.n	28c4 <__udivsi3+0xa8>
    28c0:	01cb      	lsls	r3, r1, #7
    28c2:	1ac0      	subs	r0, r0, r3
    28c4:	4152      	adcs	r2, r2
    28c6:	0983      	lsrs	r3, r0, #6
    28c8:	428b      	cmp	r3, r1
    28ca:	d301      	bcc.n	28d0 <__udivsi3+0xb4>
    28cc:	018b      	lsls	r3, r1, #6
    28ce:	1ac0      	subs	r0, r0, r3
    28d0:	4152      	adcs	r2, r2
    28d2:	0943      	lsrs	r3, r0, #5
    28d4:	428b      	cmp	r3, r1
    28d6:	d301      	bcc.n	28dc <__udivsi3+0xc0>
    28d8:	014b      	lsls	r3, r1, #5
    28da:	1ac0      	subs	r0, r0, r3
    28dc:	4152      	adcs	r2, r2
    28de:	0903      	lsrs	r3, r0, #4
    28e0:	428b      	cmp	r3, r1
    28e2:	d301      	bcc.n	28e8 <__udivsi3+0xcc>
    28e4:	010b      	lsls	r3, r1, #4
    28e6:	1ac0      	subs	r0, r0, r3
    28e8:	4152      	adcs	r2, r2
    28ea:	08c3      	lsrs	r3, r0, #3
    28ec:	428b      	cmp	r3, r1
    28ee:	d301      	bcc.n	28f4 <__udivsi3+0xd8>
    28f0:	00cb      	lsls	r3, r1, #3
    28f2:	1ac0      	subs	r0, r0, r3
    28f4:	4152      	adcs	r2, r2
    28f6:	0883      	lsrs	r3, r0, #2
    28f8:	428b      	cmp	r3, r1
    28fa:	d301      	bcc.n	2900 <__udivsi3+0xe4>
    28fc:	008b      	lsls	r3, r1, #2
    28fe:	1ac0      	subs	r0, r0, r3
    2900:	4152      	adcs	r2, r2
    2902:	0843      	lsrs	r3, r0, #1
    2904:	428b      	cmp	r3, r1
    2906:	d301      	bcc.n	290c <__udivsi3+0xf0>
    2908:	004b      	lsls	r3, r1, #1
    290a:	1ac0      	subs	r0, r0, r3
    290c:	4152      	adcs	r2, r2
    290e:	1a41      	subs	r1, r0, r1
    2910:	d200      	bcs.n	2914 <__udivsi3+0xf8>
    2912:	4601      	mov	r1, r0
    2914:	4152      	adcs	r2, r2
    2916:	4610      	mov	r0, r2
    2918:	4770      	bx	lr
    291a:	e7ff      	b.n	291c <__udivsi3+0x100>
    291c:	b501      	push	{r0, lr}
    291e:	2000      	movs	r0, #0
    2920:	f000 f806 	bl	2930 <__aeabi_idiv0>
    2924:	bd02      	pop	{r1, pc}
    2926:	46c0      	nop			; (mov r8, r8)

00002928 <__aeabi_uidivmod>:
    2928:	2900      	cmp	r1, #0
    292a:	d0f7      	beq.n	291c <__udivsi3+0x100>
    292c:	e776      	b.n	281c <__udivsi3>
    292e:	4770      	bx	lr

00002930 <__aeabi_idiv0>:
    2930:	4770      	bx	lr
    2932:	46c0      	nop			; (mov r8, r8)

00002934 <__aeabi_lmul>:
    2934:	b5f0      	push	{r4, r5, r6, r7, lr}
    2936:	46ce      	mov	lr, r9
    2938:	4647      	mov	r7, r8
    293a:	0415      	lsls	r5, r2, #16
    293c:	0c2d      	lsrs	r5, r5, #16
    293e:	002e      	movs	r6, r5
    2940:	b580      	push	{r7, lr}
    2942:	0407      	lsls	r7, r0, #16
    2944:	0c14      	lsrs	r4, r2, #16
    2946:	0c3f      	lsrs	r7, r7, #16
    2948:	4699      	mov	r9, r3
    294a:	0c03      	lsrs	r3, r0, #16
    294c:	437e      	muls	r6, r7
    294e:	435d      	muls	r5, r3
    2950:	4367      	muls	r7, r4
    2952:	4363      	muls	r3, r4
    2954:	197f      	adds	r7, r7, r5
    2956:	0c34      	lsrs	r4, r6, #16
    2958:	19e4      	adds	r4, r4, r7
    295a:	469c      	mov	ip, r3
    295c:	42a5      	cmp	r5, r4
    295e:	d903      	bls.n	2968 <__aeabi_lmul+0x34>
    2960:	2380      	movs	r3, #128	; 0x80
    2962:	025b      	lsls	r3, r3, #9
    2964:	4698      	mov	r8, r3
    2966:	44c4      	add	ip, r8
    2968:	464b      	mov	r3, r9
    296a:	4351      	muls	r1, r2
    296c:	4343      	muls	r3, r0
    296e:	0436      	lsls	r6, r6, #16
    2970:	0c36      	lsrs	r6, r6, #16
    2972:	0c25      	lsrs	r5, r4, #16
    2974:	0424      	lsls	r4, r4, #16
    2976:	4465      	add	r5, ip
    2978:	19a4      	adds	r4, r4, r6
    297a:	1859      	adds	r1, r3, r1
    297c:	1949      	adds	r1, r1, r5
    297e:	0020      	movs	r0, r4
    2980:	bc0c      	pop	{r2, r3}
    2982:	4690      	mov	r8, r2
    2984:	4699      	mov	r9, r3
    2986:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002988 <__libc_init_array>:
    2988:	b570      	push	{r4, r5, r6, lr}
    298a:	2600      	movs	r6, #0
    298c:	4d0c      	ldr	r5, [pc, #48]	; (29c0 <__libc_init_array+0x38>)
    298e:	4c0d      	ldr	r4, [pc, #52]	; (29c4 <__libc_init_array+0x3c>)
    2990:	1b64      	subs	r4, r4, r5
    2992:	10a4      	asrs	r4, r4, #2
    2994:	42a6      	cmp	r6, r4
    2996:	d109      	bne.n	29ac <__libc_init_array+0x24>
    2998:	2600      	movs	r6, #0
    299a:	f000 f85f 	bl	2a5c <_init>
    299e:	4d0a      	ldr	r5, [pc, #40]	; (29c8 <__libc_init_array+0x40>)
    29a0:	4c0a      	ldr	r4, [pc, #40]	; (29cc <__libc_init_array+0x44>)
    29a2:	1b64      	subs	r4, r4, r5
    29a4:	10a4      	asrs	r4, r4, #2
    29a6:	42a6      	cmp	r6, r4
    29a8:	d105      	bne.n	29b6 <__libc_init_array+0x2e>
    29aa:	bd70      	pop	{r4, r5, r6, pc}
    29ac:	00b3      	lsls	r3, r6, #2
    29ae:	58eb      	ldr	r3, [r5, r3]
    29b0:	4798      	blx	r3
    29b2:	3601      	adds	r6, #1
    29b4:	e7ee      	b.n	2994 <__libc_init_array+0xc>
    29b6:	00b3      	lsls	r3, r6, #2
    29b8:	58eb      	ldr	r3, [r5, r3]
    29ba:	4798      	blx	r3
    29bc:	3601      	adds	r6, #1
    29be:	e7f2      	b.n	29a6 <__libc_init_array+0x1e>
    29c0:	00002a68 	.word	0x00002a68
    29c4:	00002a68 	.word	0x00002a68
    29c8:	00002a68 	.word	0x00002a68
    29cc:	00002a6c 	.word	0x00002a6c

000029d0 <memcpy>:
    29d0:	2300      	movs	r3, #0
    29d2:	b510      	push	{r4, lr}
    29d4:	429a      	cmp	r2, r3
    29d6:	d100      	bne.n	29da <memcpy+0xa>
    29d8:	bd10      	pop	{r4, pc}
    29da:	5ccc      	ldrb	r4, [r1, r3]
    29dc:	54c4      	strb	r4, [r0, r3]
    29de:	3301      	adds	r3, #1
    29e0:	e7f8      	b.n	29d4 <memcpy+0x4>

000029e2 <memset>:
    29e2:	0003      	movs	r3, r0
    29e4:	1882      	adds	r2, r0, r2
    29e6:	4293      	cmp	r3, r2
    29e8:	d100      	bne.n	29ec <memset+0xa>
    29ea:	4770      	bx	lr
    29ec:	7019      	strb	r1, [r3, #0]
    29ee:	3301      	adds	r3, #1
    29f0:	e7f9      	b.n	29e6 <memset+0x4>
    29f2:	0000      	movs	r0, r0
    29f4:	42000800 	.word	0x42000800
    29f8:	42000c00 	.word	0x42000c00
    29fc:	42001000 	.word	0x42001000
    2a00:	42001400 	.word	0x42001400
    2a04:	42001800 	.word	0x42001800
    2a08:	42001c00 	.word	0x42001c00
    2a0c:	0c0b0a09 	.word	0x0c0b0a09
    2a10:	00000e0d 	.word	0x00000e0d
    2a14:	00001fe0 	.word	0x00001fe0
    2a18:	00002038 	.word	0x00002038
    2a1c:	00002038 	.word	0x00002038
    2a20:	00001fda 	.word	0x00001fda
    2a24:	00001fda 	.word	0x00001fda
    2a28:	00001ff4 	.word	0x00001ff4
    2a2c:	00001fe6 	.word	0x00001fe6
    2a30:	00001ffa 	.word	0x00001ffa
    2a34:	00002028 	.word	0x00002028
    2a38:	000020c4 	.word	0x000020c4
    2a3c:	00002132 	.word	0x00002132
    2a40:	00002132 	.word	0x00002132
    2a44:	000020a4 	.word	0x000020a4
    2a48:	000020b6 	.word	0x000020b6
    2a4c:	000020d4 	.word	0x000020d4
    2a50:	000020a8 	.word	0x000020a8
    2a54:	000020e4 	.word	0x000020e4
    2a58:	00002120 	.word	0x00002120

00002a5c <_init>:
    2a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a62:	bc08      	pop	{r3}
    2a64:	469e      	mov	lr, r3
    2a66:	4770      	bx	lr

00002a68 <__init_array_start>:
    2a68:	000000dd 	.word	0x000000dd

00002a6c <_fini>:
    2a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a72:	bc08      	pop	{r3}
    2a74:	469e      	mov	lr, r3
    2a76:	4770      	bx	lr

00002a78 <__fini_array_start>:
    2a78:	000000b5 	.word	0x000000b5
