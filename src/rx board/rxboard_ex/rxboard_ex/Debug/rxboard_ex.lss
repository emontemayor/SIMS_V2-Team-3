
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .text         00002458  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00002458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f4  2000000c  00002464  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000100  00002558  0002000c  2**0
=======
  0 .text         00002ba0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00002ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f4  2000000c  00002bac  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000100  00002ca0  0002000c  2**0
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
  6 .debug_info   0002fe4e  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c80  00000000  00000000  0004fedb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006d34  00000000  00000000  00053b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005b0  00000000  00000000  0005a88f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008c8  00000000  00000000  0005ae3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000684c  00000000  00000000  0005b707  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d830  00000000  00000000  00061f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d202  00000000  00000000  0006f783  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e44  00000000  00000000  000fc988  2**2
=======
  6 .debug_info   0002fe64  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c80  00000000  00000000  0004fef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006d34  00000000  00000000  00053b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005b0  00000000  00000000  0005a8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008c8  00000000  00000000  0005ae55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000684c  00000000  00000000  0005b71d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d831  00000000  00000000  00061f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d286  00000000  00000000  0006f79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e44  00000000  00000000  000fca20  2**2
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
<<<<<<< HEAD
       0:	00 21 00 20 5d 1f 00 00 59 1f 00 00 59 1f 00 00     .!. ]...Y...Y...
	...
      2c:	59 1f 00 00 00 00 00 00 00 00 00 00 59 1f 00 00     Y...........Y...
      3c:	59 1f 00 00 59 1f 00 00 59 1f 00 00 59 1f 00 00     Y...Y...Y...Y...
      4c:	59 1f 00 00 59 1f 00 00 59 1f 00 00 59 1f 00 00     Y...Y...Y...Y...
      5c:	59 1f 00 00 59 1f 00 00 a1 18 00 00 b1 18 00 00     Y...Y...........
      6c:	c1 18 00 00 d1 18 00 00 e1 18 00 00 f1 18 00 00     ................
      7c:	59 1f 00 00 59 1f 00 00 59 1f 00 00 59 1f 00 00     Y...Y...Y...Y...
      8c:	59 1f 00 00 59 1f 00 00 59 1f 00 00 59 1f 00 00     Y...Y...Y...Y...
      9c:	59 1f 00 00 59 1f 00 00 59 1f 00 00 59 1f 00 00     Y...Y...Y...Y...
      ac:	59 1f 00 00 00 00 00 00                             Y.......
=======
       0:	00 21 00 20 9d 26 00 00 99 26 00 00 99 26 00 00     .!. .&...&...&..
	...
      2c:	99 26 00 00 00 00 00 00 00 00 00 00 99 26 00 00     .&...........&..
      3c:	99 26 00 00 99 26 00 00 99 26 00 00 99 26 00 00     .&...&...&...&..
      4c:	99 26 00 00 99 26 00 00 99 26 00 00 99 26 00 00     .&...&...&...&..
      5c:	99 26 00 00 99 26 00 00 e1 1f 00 00 f1 1f 00 00     .&...&..........
      6c:	01 20 00 00 11 20 00 00 21 20 00 00 31 20 00 00     . ... ..! ..1 ..
      7c:	99 26 00 00 99 26 00 00 99 26 00 00 99 26 00 00     .&...&...&...&..
      8c:	99 26 00 00 99 26 00 00 99 26 00 00 99 26 00 00     .&...&...&...&..
      9c:	99 26 00 00 99 26 00 00 99 26 00 00 99 26 00 00     .&...&...&...&..
      ac:	99 26 00 00 00 00 00 00                             .&......
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
<<<<<<< HEAD
      d8:	00002458 	.word	0x00002458
=======
      d8:	00002ba0 	.word	0x00002ba0
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
<<<<<<< HEAD
     108:	00002458 	.word	0x00002458
     10c:	00002458 	.word	0x00002458
     110:	00000000 	.word	0x00000000

00000114 <spi40_init>:
    spi40_wr8(AX5043_AGCAHYST0, 0x00); 
    spi40_wr8(AX5043_TIMEGAIN0, 0xAD);
    spi40_wr8(AX5043_DRGAIN0, 0xA7);
    spi40_wr8(AX5043_PHASEGAIN0, 0xC3);
    spi40_wr8(AX5043_FREQGAINA0, 0x0F);
    spi40_wr8(AX5043_FREQGAINB0, 0x1F);
=======
     108:	00002ba0 	.word	0x00002ba0
     10c:	00002ba0 	.word	0x00002ba0
     110:	00000000 	.word	0x00000000

00000114 <spi40_init>:
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
    spi40_wr8(AX5043_FREQGAINC0, 0x0A);
     116:	b091      	sub	sp, #68	; 0x44
     118:	4b31      	ldr	r3, [pc, #196]	; (1e0 <spi40_init+0xcc>)
     11a:	781b      	ldrb	r3, [r3, #0]
     11c:	2b00      	cmp	r3, #0
    spi40_wr8(AX5043_FREQGAIND0, 0x0A);
     11e:	d001      	beq.n	124 <spi40_init+0x10>
     120:	b011      	add	sp, #68	; 0x44
     122:	bdf0      	pop	{r4, r5, r6, r7, pc}
     124:	ac02      	add	r4, sp, #8
    spi40_wr8(AX5043_AMPLGAIN0, 0x01); //org val: 0x06
     126:	2601      	movs	r6, #1
     128:	7026      	strb	r6, [r4, #0]
     12a:	2500      	movs	r5, #0
     12c:	6065      	str	r5, [r4, #4]
<<<<<<< HEAD
    spi40_wr8(AX5043_FREQDEV10, 0x00);
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     12e:	60a5      	str	r5, [r4, #8]
     130:	23c0      	movs	r3, #192	; 0xc0
     132:	039b      	lsls	r3, r3, #14
     134:	60e3      	str	r3, [r4, #12]
<<<<<<< HEAD
    spi40_wr8(AX5043_FREQDEV00, 0x00);
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     136:	7425      	strb	r5, [r4, #16]
     138:	7465      	strb	r5, [r4, #17]
     13a:	74a6      	strb	r6, [r4, #18]
     13c:	74e6      	strb	r6, [r4, #19]
<<<<<<< HEAD
    spi40_wr8(AX5043_FOURFSK0, 0x16); //org value: 0x16
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     13e:	7525      	strb	r5, [r4, #20]
     140:	2724      	movs	r7, #36	; 0x24
     142:	55e5      	strb	r5, [r4, r7]
     144:	220c      	movs	r2, #12
    spi40_wr8(AX5043_BBOFFSRES0, 0x00);
     146:	2100      	movs	r1, #0
     148:	a808      	add	r0, sp, #32
     14a:	4b26      	ldr	r3, [pc, #152]	; (1e4 <spi40_init+0xd0>)
     14c:	4798      	blx	r3
<<<<<<< HEAD
    spi40_wr8(AX5043_AGCGAIN1, 0xE8);
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     14e:	238c      	movs	r3, #140	; 0x8c
     150:	039b      	lsls	r3, r3, #14
     152:	60e3      	str	r3, [r4, #12]
     154:	4b24      	ldr	r3, [pc, #144]	; (1e8 <spi40_init+0xd4>)
    spi40_wr8(AX5043_AGCTARGET1, 0x8F); //org val: 0x84
     156:	62a3      	str	r3, [r4, #40]	; 0x28
     158:	4b24      	ldr	r3, [pc, #144]	; (1ec <spi40_init+0xd8>)
     15a:	62e3      	str	r3, [r4, #44]	; 0x2c
     15c:	2301      	movs	r3, #1
    spi40_wr8(AX5043_AGCAHYST1, 0x00); 
     15e:	425b      	negs	r3, r3
     160:	6323      	str	r3, [r4, #48]	; 0x30
     162:	4b23      	ldr	r3, [pc, #140]	; (1f0 <spi40_init+0xdc>)
     164:	6363      	str	r3, [r4, #52]	; 0x34
<<<<<<< HEAD
    spi40_wr8(AX5043_AGCMINMAX1, 0x00);
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     166:	55e5      	strb	r5, [r4, r7]
     168:	4b22      	ldr	r3, [pc, #136]	; (1f4 <spi40_init+0xe0>)
     16a:	61a3      	str	r3, [r4, #24]
     16c:	4d22      	ldr	r5, [pc, #136]	; (1f8 <spi40_init+0xe4>)
    spi40_wr8(AX5043_TIMEGAIN1, 0xAB);
     16e:	0022      	movs	r2, r4
     170:	4922      	ldr	r1, [pc, #136]	; (1fc <spi40_init+0xe8>)
     172:	0028      	movs	r0, r5
     174:	4b22      	ldr	r3, [pc, #136]	; (200 <spi40_init+0xec>)
    spi40_wr8(AX5043_DRGAIN1, 0xA6);
     176:	4798      	blx	r3
     178:	682c      	ldr	r4, [r5, #0]
     17a:	0020      	movs	r0, r4
     17c:	4b21      	ldr	r3, [pc, #132]	; (204 <spi40_init+0xf0>)
    spi40_wr8(AX5043_PHASEGAIN1, 0xC3);
     17e:	4798      	blx	r3
     180:	231f      	movs	r3, #31
     182:	4018      	ands	r0, r3
     184:	4086      	lsls	r6, r0
    spi40_wr8(AX5043_FREQGAINA1, 0x0F);
     186:	4b20      	ldr	r3, [pc, #128]	; (208 <spi40_init+0xf4>)
     188:	601e      	str	r6, [r3, #0]
     18a:	4b1b      	ldr	r3, [pc, #108]	; (1f8 <spi40_init+0xe4>)
     18c:	681b      	ldr	r3, [r3, #0]
<<<<<<< HEAD
    spi40_wr8(AX5043_FREQGAINB1, 0x1F);
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     18e:	69db      	ldr	r3, [r3, #28]
     190:	2b00      	cmp	r3, #0
     192:	d1fa      	bne.n	18a <spi40_init+0x76>
     194:	6823      	ldr	r3, [r4, #0]
    spi40_wr8(AX5043_FREQGAINC1, 0x0A);
     196:	2202      	movs	r2, #2
     198:	4313      	orrs	r3, r2
     19a:	6023      	str	r3, [r4, #0]
     19c:	2300      	movs	r3, #0
<<<<<<< HEAD
    spi40_wr8(AX5043_FREQGAIND1, 0x0A);
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     19e:	4c1b      	ldr	r4, [pc, #108]	; (20c <spi40_init+0xf8>)
     1a0:	320f      	adds	r2, #15
     1a2:	7022      	strb	r2, [r4, #0]
     1a4:	7063      	strb	r3, [r4, #1]
<<<<<<< HEAD
    spi40_wr8(AX5043_AMPLGAIN1, 0x01); //org val: 0x06
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     1a6:	70a3      	strb	r3, [r4, #2]
     1a8:	3a10      	subs	r2, #16
     1aa:	4669      	mov	r1, sp
     1ac:	704a      	strb	r2, [r1, #1]
<<<<<<< HEAD
    spi40_wr8(AX5043_FREQDEV11, 0x00);
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     1ae:	708b      	strb	r3, [r1, #2]
     1b0:	700a      	strb	r2, [r1, #0]
     1b2:	2011      	movs	r0, #17
     1b4:	4b16      	ldr	r3, [pc, #88]	; (210 <spi40_init+0xfc>)
    spi40_wr8(AX5043_FREQDEV01, 0x4B);
     1b6:	4798      	blx	r3
     1b8:	7821      	ldrb	r1, [r4, #0]
     1ba:	09ca      	lsrs	r2, r1, #7
     1bc:	094b      	lsrs	r3, r1, #5
<<<<<<< HEAD
    spi40_wr8(AX5043_FOURFSK1, 0x16); //org value: 0x16
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     1be:	2a00      	cmp	r2, #0
     1c0:	d10c      	bne.n	1dc <spi40_init+0xc8>
     1c2:	01db      	lsls	r3, r3, #7
     1c4:	4a13      	ldr	r2, [pc, #76]	; (214 <spi40_init+0x100>)
    spi40_wr8(AX5043_BBOFFSRES1, 0x00);
     1c6:	4694      	mov	ip, r2
     1c8:	4463      	add	r3, ip
     1ca:	221f      	movs	r2, #31
     1cc:	400a      	ands	r2, r1
    spi40_wr8(AX5043_AGCGAIN3, 0xFF);
     1ce:	2101      	movs	r1, #1
     1d0:	0008      	movs	r0, r1
     1d2:	4090      	lsls	r0, r2
     1d4:	6198      	str	r0, [r3, #24]
<<<<<<< HEAD
    spi40_wr8(AX5043_AGCTARGET3, 0x8F); //org val: 0x84
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <spi40_init+0xcc>)
     1d8:	7019      	strb	r1, [r3, #0]
     1da:	e7a1      	b.n	120 <spi40_init+0xc>
     1dc:	2300      	movs	r3, #0
    spi40_wr8(AX5043_AGCAHYST3, 0x00); 
     1de:	e7f4      	b.n	1ca <spi40_init+0xb6>
     1e0:	20000028 	.word	0x20000028
<<<<<<< HEAD
     1e4:	000023bb 	.word	0x000023bb
    spi40_wr8(AX5043_AGCMINMAX3, 0x00);
=======
     1e4:	00002b03 	.word	0x00002b03
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     1e8:	00100002 	.word	0x00100002
     1ec:	00130002 	.word	0x00130002
    spi40_wr8(AX5043_TIMEGAIN3, 0xAA);
     1f0:	00120002 	.word	0x00120002
     1f4:	000f4240 	.word	0x000f4240
<<<<<<< HEAD
    spi40_wr8(AX5043_DRGAIN3, 0xA5);
     1f8:	200000a4 	.word	0x200000a4
     1fc:	42000c00 	.word	0x42000c00
    spi40_wr8(AX5043_PHASEGAIN3, 0xC3);
     200:	00001081 	.word	0x00001081
     204:	0000187d 	.word	0x0000187d
    spi40_wr8(AX5043_FREQGAINA3, 0x0F);
     208:	e000e100 	.word	0xe000e100
     20c:	200000e0 	.word	0x200000e0
    spi40_wr8(AX5043_FREQGAINB3, 0x1F);
     210:	00000525 	.word	0x00000525
     214:	41004400 	.word	0x41004400

00000218 <spi40_start_xfer>:
    spi40_wr8(AX5043_FREQGAINC3, 0x0D);
=======
     1f8:	200000a4 	.word	0x200000a4
     1fc:	42000c00 	.word	0x42000c00
     200:	000015d5 	.word	0x000015d5
     204:	00001fbd 	.word	0x00001fbd
     208:	e000e100 	.word	0xe000e100
     20c:	200000e0 	.word	0x200000e0
     210:	00000a79 	.word	0x00000a79
     214:	41004400 	.word	0x41004400

00000218 <spi40_start_xfer>:
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     218:	b510      	push	{r4, lr}
     21a:	b082      	sub	sp, #8
     21c:	4b10      	ldr	r3, [pc, #64]	; (260 <spi40_start_xfer+0x48>)
    spi40_wr8(AX5043_FREQGAIND3, 0x0D);
     21e:	4318      	orrs	r0, r3
     220:	b280      	uxth	r0, r0
     222:	466b      	mov	r3, sp
     224:	80d8      	strh	r0, [r3, #6]
<<<<<<< HEAD
    spi40_wr8(AX5043_AMPLGAIN3, 0x01); //org val: 0x06
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     226:	2900      	cmp	r1, #0
     228:	d103      	bne.n	232 <spi40_start_xfer+0x1a>
     22a:	0440      	lsls	r0, r0, #17
     22c:	0c40      	lsrs	r0, r0, #17
    spi40_wr8(AX5043_FREQDEV13, 0x00);
     22e:	466b      	mov	r3, sp
     230:	80d8      	strh	r0, [r3, #6]
     232:	466b      	mov	r3, sp
     234:	1d9a      	adds	r2, r3, #6
    spi40_wr8(AX5043_FREQDEV03, 0x4B);
     236:	88db      	ldrh	r3, [r3, #6]
     238:	0219      	lsls	r1, r3, #8
     23a:	0a1b      	lsrs	r3, r3, #8
     23c:	430b      	orrs	r3, r1
    spi40_wr8(AX5043_FOURFSK3, 0x16); //org value: 0x16
     23e:	8013      	strh	r3, [r2, #0]
     240:	2201      	movs	r2, #1
     242:	4908      	ldr	r1, [pc, #32]	; (264 <spi40_start_xfer+0x4c>)
     244:	4808      	ldr	r0, [pc, #32]	; (268 <spi40_start_xfer+0x50>)
    spi40_wr8(AX5043_BBOFFSRES3, 0x00);
     246:	4b09      	ldr	r3, [pc, #36]	; (26c <spi40_start_xfer+0x54>)
     248:	4798      	blx	r3
     24a:	2805      	cmp	r0, #5
     24c:	d0f8      	beq.n	240 <spi40_start_xfer+0x28>
<<<<<<< HEAD
    spi40_wr8(AX5043_MODCFGF, 0x00);
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     24e:	2302      	movs	r3, #2
     250:	4a07      	ldr	r2, [pc, #28]	; (270 <spi40_start_xfer+0x58>)
     252:	4669      	mov	r1, sp
     254:	3106      	adds	r1, #6
    spi40_wr8(AX5043_FSKDEV2, 0x00);
     256:	4804      	ldr	r0, [pc, #16]	; (268 <spi40_start_xfer+0x50>)
     258:	4c06      	ldr	r4, [pc, #24]	; (274 <spi40_start_xfer+0x5c>)
     25a:	47a0      	blx	r4
     25c:	b002      	add	sp, #8
    spi40_wr8(AX5043_FSKDEV1, 0x02);
     25e:	bd10      	pop	{r4, pc}
     260:	fffff000 	.word	0xfffff000
     264:	200000e0 	.word	0x200000e0
<<<<<<< HEAD
    spi40_wr8(AX5043_FSKDEV0, 0x0C);
     268:	200000a4 	.word	0x200000a4
     26c:	00001269 	.word	0x00001269
    spi40_wr8(AX5043_MODCFGA, 0x05);
     270:	2000002a 	.word	0x2000002a
     274:	00001365 	.word	0x00001365

00000278 <spi40_stop_xfer>:
    spi40_wr8(AX5043_TXRATE2, 0x00);
=======
     268:	200000a4 	.word	0x200000a4
     26c:	000017bd 	.word	0x000017bd
     270:	2000002a 	.word	0x2000002a
     274:	00001aa5 	.word	0x00001aa5

00000278 <spi40_stop_xfer>:
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     278:	b510      	push	{r4, lr}
     27a:	2200      	movs	r2, #0
     27c:	4902      	ldr	r1, [pc, #8]	; (288 <spi40_stop_xfer+0x10>)
    spi40_wr8(AX5043_TXRATE1, 0x04);
     27e:	4803      	ldr	r0, [pc, #12]	; (28c <spi40_stop_xfer+0x14>)
     280:	4b03      	ldr	r3, [pc, #12]	; (290 <spi40_stop_xfer+0x18>)
     282:	4798      	blx	r3
     284:	bd10      	pop	{r4, pc}
    spi40_wr8(AX5043_TXRATE0, 0xEA);
     286:	46c0      	nop			; (mov r8, r8)
     288:	200000e0 	.word	0x200000e0
     28c:	200000a4 	.word	0x200000a4
<<<<<<< HEAD
    spi40_wr8(AX5043_TXPWRCOEFFB1, 0x02);
     290:	00001269 	.word	0x00001269
=======
     290:	000017bd 	.word	0x000017bd
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4

00000294 <spi40_read>:
     294:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_TXPWRCOEFFB0, 0x07);
     296:	000a      	movs	r2, r1
     298:	2300      	movs	r3, #0
     29a:	0001      	movs	r1, r0
     29c:	4801      	ldr	r0, [pc, #4]	; (2a4 <spi40_read+0x10>)
    spi40_wr8(AX5043_PLLVCOI, 0x8A);
     29e:	4c02      	ldr	r4, [pc, #8]	; (2a8 <spi40_read+0x14>)
     2a0:	47a0      	blx	r4
     2a2:	bd10      	pop	{r4, pc}
     2a4:	200000a4 	.word	0x200000a4
<<<<<<< HEAD
    spi40_wr8(AX5043_PLLRNGCLK, 0x03);
     2a8:	0000116d 	.word	0x0000116d
=======
     2a8:	000016c1 	.word	0x000016c1
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4

000002ac <spi40_rd8>:
     2ac:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_BBTUNE, 0x0F);
     2ae:	b082      	sub	sp, #8
     2b0:	466b      	mov	r3, sp
     2b2:	1ddc      	adds	r4, r3, #7
     2b4:	2300      	movs	r3, #0
    spi40_wr8(AX5043_BBOFFSCAP, 0x77);
     2b6:	7023      	strb	r3, [r4, #0]
     2b8:	2100      	movs	r1, #0
     2ba:	4b05      	ldr	r3, [pc, #20]	; (2d0 <spi40_rd8+0x24>)
     2bc:	4798      	blx	r3
<<<<<<< HEAD
    spi40_wr8(AX5043_PKTADDRCFG, 0x80);
=======
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     2be:	2101      	movs	r1, #1
     2c0:	0020      	movs	r0, r4
     2c2:	4b04      	ldr	r3, [pc, #16]	; (2d4 <spi40_rd8+0x28>)
     2c4:	4798      	blx	r3
<<<<<<< HEAD
    spi40_wr8(AX5043_PKTLENCFG, 0x00);
     2c6:	4b04      	ldr	r3, [pc, #16]	; (2d8 <spi40_rd8+0x2c>)
     2c8:	4798      	blx	r3
     2ca:	7820      	ldrb	r0, [r4, #0]
    spi40_wr8(AX5043_PKTLENOFFSET, 0x04);
=======
     2c6:	4b04      	ldr	r3, [pc, #16]	; (2d8 <spi40_rd8+0x2c>)
     2c8:	4798      	blx	r3
     2ca:	7820      	ldrb	r0, [r4, #0]
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
     2cc:	b002      	add	sp, #8
     2ce:	bd10      	pop	{r4, pc}
     2d0:	00000219 	.word	0x00000219
    spi40_wr8(AX5043_PKTMAXLEN, 0xC8);
     2d4:	00000295 	.word	0x00000295
    spi40_wr8(AX5043_MATCH0PAT3, 0xAA);
     2d8:	00000279 	.word	0x00000279

<<<<<<< HEAD
000002dc <spi40_rssi>:
     2dc:	b510      	push	{r4, lr}
     2de:	2040      	movs	r0, #64	; 0x40
    spi40_wr8(AX5043_MATCH0PAT2, 0xCC);
     2e0:	4b01      	ldr	r3, [pc, #4]	; (2e8 <spi40_rssi+0xc>)
     2e2:	4798      	blx	r3
     2e4:	bd10      	pop	{r4, pc}
    spi40_wr8(AX5043_MATCH0PAT1, 0xAA);
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	000002ad 	.word	0x000002ad

000002ec <uartfiber_parse_cmd>:
 *  should be 'A' (for AX5043), 'M' (for MTXDOT), or 'R' (for RC2500HP).
 *  Sends the RSSI of the respective module over fiber to the
 *  display controller.
 */
static void uartfiber_parse_cmd(uint8_t cmd_char)
{
     2ec:	b500      	push	{lr}
     2ee:	b083      	sub	sp, #12
    union{
        rssi_t f_val;
        uint8_t f_bytes[RSSI_SIZE]; 
    }float_bytes;
    
    switch(cmd_char)
     2f0:	284d      	cmp	r0, #77	; 0x4d
     2f2:	d013      	beq.n	31c <uartfiber_parse_cmd+0x30>
     2f4:	2852      	cmp	r0, #82	; 0x52
     2f6:	d01f      	beq.n	338 <uartfiber_parse_cmd+0x4c>
     2f8:	2841      	cmp	r0, #65	; 0x41
     2fa:	d001      	beq.n	300 <uartfiber_parse_cmd+0x14>
        case 'R':
            float_bytes.f_val = uartfiber_rssi->rssi245;
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
            break;
    }
}
     2fc:	b003      	add	sp, #12
     2fe:	bd00      	pop	{pc}
            float_bytes.f_val = uartfiber_rssi->rssi169;
     300:	4b14      	ldr	r3, [pc, #80]	; (354 <uartfiber_parse_cmd+0x68>)
     302:	681b      	ldr	r3, [r3, #0]
     304:	885b      	ldrh	r3, [r3, #2]
     306:	b21b      	sxth	r3, r3
     308:	aa01      	add	r2, sp, #4
     30a:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     30c:	2202      	movs	r2, #2
     30e:	a901      	add	r1, sp, #4
     310:	4811      	ldr	r0, [pc, #68]	; (358 <uartfiber_parse_cmd+0x6c>)
     312:	4b12      	ldr	r3, [pc, #72]	; (35c <uartfiber_parse_cmd+0x70>)
     314:	4798      	blx	r3
     316:	2805      	cmp	r0, #5
     318:	d1f8      	bne.n	30c <uartfiber_parse_cmd+0x20>
     31a:	e7ef      	b.n	2fc <uartfiber_parse_cmd+0x10>
            float_bytes.f_val = uartfiber_rssi->rssi915;
     31c:	4b0d      	ldr	r3, [pc, #52]	; (354 <uartfiber_parse_cmd+0x68>)
     31e:	681b      	ldr	r3, [r3, #0]
     320:	889b      	ldrh	r3, [r3, #4]
     322:	b21b      	sxth	r3, r3
     324:	aa01      	add	r2, sp, #4
     326:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     328:	2202      	movs	r2, #2
     32a:	a901      	add	r1, sp, #4
     32c:	480a      	ldr	r0, [pc, #40]	; (358 <uartfiber_parse_cmd+0x6c>)
     32e:	4b0b      	ldr	r3, [pc, #44]	; (35c <uartfiber_parse_cmd+0x70>)
     330:	4798      	blx	r3
     332:	2805      	cmp	r0, #5
     334:	d1f8      	bne.n	328 <uartfiber_parse_cmd+0x3c>
     336:	e7e1      	b.n	2fc <uartfiber_parse_cmd+0x10>
            float_bytes.f_val = uartfiber_rssi->rssi245;
     338:	4b06      	ldr	r3, [pc, #24]	; (354 <uartfiber_parse_cmd+0x68>)
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	88db      	ldrh	r3, [r3, #6]
     33e:	b21b      	sxth	r3, r3
     340:	aa01      	add	r2, sp, #4
     342:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     344:	2202      	movs	r2, #2
     346:	a901      	add	r1, sp, #4
     348:	4803      	ldr	r0, [pc, #12]	; (358 <uartfiber_parse_cmd+0x6c>)
     34a:	4b04      	ldr	r3, [pc, #16]	; (35c <uartfiber_parse_cmd+0x70>)
     34c:	4798      	blx	r3
     34e:	2805      	cmp	r0, #5
     350:	d1f8      	bne.n	344 <uartfiber_parse_cmd+0x58>
     352:	e7d3      	b.n	2fc <uartfiber_parse_cmd+0x10>
     354:	20000060 	.word	0x20000060
     358:	2000002c 	.word	0x2000002c
     35c:	00000d4d 	.word	0x00000d4d

00000360 <uartfiber_read_callback>:
{
     360:	b510      	push	{r4, lr}
    uartfiber_parse_cmd(uartfiber_rx_read);
     362:	4c05      	ldr	r4, [pc, #20]	; (378 <uartfiber_read_callback+0x18>)
     364:	7820      	ldrb	r0, [r4, #0]
     366:	4b05      	ldr	r3, [pc, #20]	; (37c <uartfiber_read_callback+0x1c>)
     368:	4798      	blx	r3
    usart_read_buffer_job(&uartfiber_inst, &uartfiber_rx_read, 1);
     36a:	2201      	movs	r2, #1
     36c:	0021      	movs	r1, r4
     36e:	4804      	ldr	r0, [pc, #16]	; (380 <uartfiber_read_callback+0x20>)
     370:	4b04      	ldr	r3, [pc, #16]	; (384 <uartfiber_read_callback+0x24>)
     372:	4798      	blx	r3
}
     374:	bd10      	pop	{r4, pc}
     376:	46c0      	nop			; (mov r8, r8)
     378:	20000064 	.word	0x20000064
     37c:	000002ed 	.word	0x000002ed
     380:	2000002c 	.word	0x2000002c
     384:	00000d6d 	.word	0x00000d6d

00000388 <configure_uartfiber_callbacks>:
{
     388:	b510      	push	{r4, lr}
    usart_register_callback(&uartfiber_inst, uartfiber_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     38a:	4c08      	ldr	r4, [pc, #32]	; (3ac <configure_uartfiber_callbacks+0x24>)
     38c:	2201      	movs	r2, #1
     38e:	4908      	ldr	r1, [pc, #32]	; (3b0 <configure_uartfiber_callbacks+0x28>)
     390:	0020      	movs	r0, r4
     392:	4b08      	ldr	r3, [pc, #32]	; (3b4 <configure_uartfiber_callbacks+0x2c>)
     394:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     396:	2231      	movs	r2, #49	; 0x31
     398:	5ca3      	ldrb	r3, [r4, r2]
     39a:	2102      	movs	r1, #2
     39c:	430b      	orrs	r3, r1
     39e:	54a3      	strb	r3, [r4, r2]
    usart_read_buffer_job(&uartfiber_inst, &uartfiber_rx_read, 1);
     3a0:	3a30      	subs	r2, #48	; 0x30
     3a2:	4905      	ldr	r1, [pc, #20]	; (3b8 <configure_uartfiber_callbacks+0x30>)
     3a4:	0020      	movs	r0, r4
     3a6:	4b05      	ldr	r3, [pc, #20]	; (3bc <configure_uartfiber_callbacks+0x34>)
     3a8:	4798      	blx	r3
}
     3aa:	bd10      	pop	{r4, pc}
     3ac:	2000002c 	.word	0x2000002c
     3b0:	00000361 	.word	0x00000361
     3b4:	00000d35 	.word	0x00000d35
     3b8:	20000064 	.word	0x20000064
     3bc:	00000d6d 	.word	0x00000d6d

000003c0 <uartfiber_init>:
{
     3c0:	b510      	push	{r4, lr}
     3c2:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     3c4:	2380      	movs	r3, #128	; 0x80
     3c6:	05db      	lsls	r3, r3, #23
     3c8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     3ca:	2300      	movs	r3, #0
     3cc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     3ce:	22ff      	movs	r2, #255	; 0xff
     3d0:	4669      	mov	r1, sp
     3d2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     3d4:	2200      	movs	r2, #0
     3d6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     3d8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     3da:	2101      	movs	r1, #1
     3dc:	2024      	movs	r0, #36	; 0x24
     3de:	466c      	mov	r4, sp
     3e0:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     3e2:	3001      	adds	r0, #1
     3e4:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     3e6:	3125      	adds	r1, #37	; 0x25
     3e8:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     3ea:	3101      	adds	r1, #1
     3ec:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     3ee:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     3f0:	3105      	adds	r1, #5
     3f2:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     3f4:	3101      	adds	r1, #1
     3f6:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     3f8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     3fa:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     3fc:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     3fe:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     400:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     402:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     404:	2313      	movs	r3, #19
     406:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     408:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate = UART_FIBER_BAUD;
     40a:	23e1      	movs	r3, #225	; 0xe1
     40c:	019b      	lsls	r3, r3, #6
     40e:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX;
     410:	2380      	movs	r3, #128	; 0x80
     412:	025b      	lsls	r3, r3, #9
     414:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_UNUSED;
     416:	2301      	movs	r3, #1
     418:	425b      	negs	r3, r3
     41a:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
     41c:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = UTX_FIBER;
     41e:	4a11      	ldr	r2, [pc, #68]	; (464 <uartfiber_init+0xa4>)
     420:	920e      	str	r2, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     422:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst, UART_FIBER, &config_usart) != STATUS_OK);
     424:	466a      	mov	r2, sp
     426:	4910      	ldr	r1, [pc, #64]	; (468 <uartfiber_init+0xa8>)
     428:	4810      	ldr	r0, [pc, #64]	; (46c <uartfiber_init+0xac>)
     42a:	4b11      	ldr	r3, [pc, #68]	; (470 <uartfiber_init+0xb0>)
     42c:	4798      	blx	r3
     42e:	2800      	cmp	r0, #0
     430:	d1f8      	bne.n	424 <uartfiber_init+0x64>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     432:	4b0e      	ldr	r3, [pc, #56]	; (46c <uartfiber_init+0xac>)
     434:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     436:	0020      	movs	r0, r4
     438:	4b0e      	ldr	r3, [pc, #56]	; (474 <uartfiber_init+0xb4>)
     43a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     43c:	231f      	movs	r3, #31
     43e:	4018      	ands	r0, r3
     440:	3b1e      	subs	r3, #30
     442:	4083      	lsls	r3, r0
     444:	4a0c      	ldr	r2, [pc, #48]	; (478 <uartfiber_init+0xb8>)
     446:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     448:	4b08      	ldr	r3, [pc, #32]	; (46c <uartfiber_init+0xac>)
     44a:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     44c:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     44e:	2b00      	cmp	r3, #0
     450:	d1fa      	bne.n	448 <uartfiber_init+0x88>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     452:	6823      	ldr	r3, [r4, #0]
     454:	2202      	movs	r2, #2
     456:	4313      	orrs	r3, r2
     458:	6023      	str	r3, [r4, #0]
    configure_uartfiber_callbacks();
     45a:	4b08      	ldr	r3, [pc, #32]	; (47c <uartfiber_init+0xbc>)
     45c:	4798      	blx	r3
}
     45e:	b010      	add	sp, #64	; 0x40
     460:	bd10      	pop	{r4, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	00140002 	.word	0x00140002
     468:	42001c00 	.word	0x42001c00
     46c:	2000002c 	.word	0x2000002c
     470:	00000a8d 	.word	0x00000a8d
     474:	0000187d 	.word	0x0000187d
     478:	e000e100 	.word	0xe000e100
     47c:	00000389 	.word	0x00000389

00000480 <usart_fiber_write>:
/** 
 * Asynchronous buffer write to transmit single shield measurement
 * Simply calls "usart_write_buffer_job" with specific parameters
 */
void usart_fiber_write(struct measurement temp)
{
     480:	b510      	push	{r4, lr}
     482:	b084      	sub	sp, #16
     484:	9001      	str	r0, [sp, #4]
	
	struct fiber_packet pckt;
	pckt.data = temp;
     486:	ac02      	add	r4, sp, #8
     488:	2204      	movs	r2, #4
     48a:	a901      	add	r1, sp, #4
     48c:	2009      	movs	r0, #9
     48e:	4468      	add	r0, sp
     490:	4b06      	ldr	r3, [pc, #24]	; (4ac <usart_fiber_write+0x2c>)
     492:	4798      	blx	r3
	pckt.head = '$';
     494:	2324      	movs	r3, #36	; 0x24
     496:	7023      	strb	r3, [r4, #0]
	pckt.tail = '%';
     498:	3301      	adds	r3, #1
     49a:	7163      	strb	r3, [r4, #5]
	usart_write_buffer_wait(&uartfiber_inst, (uint8_t*) &pckt, sizeof(pckt));
     49c:	2206      	movs	r2, #6
     49e:	0021      	movs	r1, r4
     4a0:	4803      	ldr	r0, [pc, #12]	; (4b0 <usart_fiber_write+0x30>)
     4a2:	4b04      	ldr	r3, [pc, #16]	; (4b4 <usart_fiber_write+0x34>)
     4a4:	4798      	blx	r3
};
     4a6:	b004      	add	sp, #16
     4a8:	bd10      	pop	{r4, pc}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	000023a9 	.word	0x000023a9
     4b0:	2000002c 	.word	0x2000002c
     4b4:	00000bfd 	.word	0x00000bfd

000004b8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     4b8:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     4ba:	2000      	movs	r0, #0
     4bc:	4b08      	ldr	r3, [pc, #32]	; (4e0 <delay_init+0x28>)
     4be:	4798      	blx	r3
	cycles_per_ms /= 1000;
     4c0:	4c08      	ldr	r4, [pc, #32]	; (4e4 <delay_init+0x2c>)
     4c2:	21fa      	movs	r1, #250	; 0xfa
     4c4:	0089      	lsls	r1, r1, #2
     4c6:	47a0      	blx	r4
     4c8:	4b07      	ldr	r3, [pc, #28]	; (4e8 <delay_init+0x30>)
     4ca:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     4cc:	21fa      	movs	r1, #250	; 0xfa
     4ce:	0089      	lsls	r1, r1, #2
     4d0:	47a0      	blx	r4
     4d2:	4b06      	ldr	r3, [pc, #24]	; (4ec <delay_init+0x34>)
     4d4:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     4d6:	2205      	movs	r2, #5
     4d8:	4b05      	ldr	r3, [pc, #20]	; (4f0 <delay_init+0x38>)
     4da:	601a      	str	r2, [r3, #0]
}
     4dc:	bd10      	pop	{r4, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	00001ce1 	.word	0x00001ce1
     4e4:	000021f5 	.word	0x000021f5
     4e8:	20000000 	.word	0x20000000
     4ec:	20000004 	.word	0x20000004
     4f0:	e000e010 	.word	0xe000e010

000004f4 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     4f4:	e000      	b.n	4f8 <delay_cycles_ms+0x4>
{
     4f6:	0010      	movs	r0, r2
	while (n--) {
     4f8:	1e42      	subs	r2, r0, #1
     4fa:	2800      	cmp	r0, #0
     4fc:	d00c      	beq.n	518 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     4fe:	4b07      	ldr	r3, [pc, #28]	; (51c <delay_cycles_ms+0x28>)
     500:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     502:	2b00      	cmp	r3, #0
     504:	d0f7      	beq.n	4f6 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     506:	4906      	ldr	r1, [pc, #24]	; (520 <delay_cycles_ms+0x2c>)
     508:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     50a:	2300      	movs	r3, #0
     50c:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     50e:	4b04      	ldr	r3, [pc, #16]	; (520 <delay_cycles_ms+0x2c>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	03db      	lsls	r3, r3, #15
     514:	d5fb      	bpl.n	50e <delay_cycles_ms+0x1a>
     516:	e7ee      	b.n	4f6 <delay_cycles_ms+0x2>
	}
}
     518:	4770      	bx	lr
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	20000000 	.word	0x20000000
     520:	e000e010 	.word	0xe000e010

00000524 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     524:	b500      	push	{lr}
     526:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     528:	ab01      	add	r3, sp, #4
     52a:	2280      	movs	r2, #128	; 0x80
     52c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     52e:	780a      	ldrb	r2, [r1, #0]
     530:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     532:	784a      	ldrb	r2, [r1, #1]
     534:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     536:	788a      	ldrb	r2, [r1, #2]
     538:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     53a:	0019      	movs	r1, r3
     53c:	4b01      	ldr	r3, [pc, #4]	; (544 <port_pin_set_config+0x20>)
     53e:	4798      	blx	r3
}
     540:	b003      	add	sp, #12
     542:	bd00      	pop	{pc}
     544:	00001ef9 	.word	0x00001ef9

00000548 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     548:	b5f0      	push	{r4, r5, r6, r7, lr}
     54a:	46de      	mov	lr, fp
     54c:	4657      	mov	r7, sl
     54e:	464e      	mov	r6, r9
     550:	4645      	mov	r5, r8
     552:	b5e0      	push	{r5, r6, r7, lr}
     554:	b085      	sub	sp, #20
     556:	4689      	mov	r9, r1
     558:	0016      	movs	r6, r2
     55a:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     55c:	2200      	movs	r2, #0
     55e:	2300      	movs	r3, #0
     560:	2100      	movs	r1, #0
     562:	468b      	mov	fp, r1
     564:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     566:	253f      	movs	r5, #63	; 0x3f
     568:	9600      	str	r6, [sp, #0]
     56a:	9701      	str	r7, [sp, #4]
     56c:	9002      	str	r0, [sp, #8]
     56e:	4649      	mov	r1, r9
     570:	9103      	str	r1, [sp, #12]
     572:	e011      	b.n	598 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     574:	2120      	movs	r1, #32
     576:	1b49      	subs	r1, r1, r5
     578:	2400      	movs	r4, #0
     57a:	3401      	adds	r4, #1
     57c:	40cc      	lsrs	r4, r1
     57e:	e013      	b.n	5a8 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     580:	9800      	ldr	r0, [sp, #0]
     582:	9901      	ldr	r1, [sp, #4]
     584:	1a12      	subs	r2, r2, r0
     586:	418b      	sbcs	r3, r1
			q |= bit_shift;
     588:	4659      	mov	r1, fp
     58a:	4660      	mov	r0, ip
     58c:	4301      	orrs	r1, r0
     58e:	468b      	mov	fp, r1
     590:	4651      	mov	r1, sl
     592:	4321      	orrs	r1, r4
     594:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     596:	3d01      	subs	r5, #1
     598:	2d00      	cmp	r5, #0
     59a:	db23      	blt.n	5e4 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     59c:	2120      	movs	r1, #32
     59e:	4249      	negs	r1, r1
     5a0:	1869      	adds	r1, r5, r1
     5a2:	d4e7      	bmi.n	574 <long_division+0x2c>
     5a4:	2401      	movs	r4, #1
     5a6:	408c      	lsls	r4, r1
     5a8:	2101      	movs	r1, #1
     5aa:	40a9      	lsls	r1, r5
     5ac:	468c      	mov	ip, r1
		r = r << 1;
     5ae:	1892      	adds	r2, r2, r2
     5b0:	415b      	adcs	r3, r3
     5b2:	0010      	movs	r0, r2
     5b4:	0019      	movs	r1, r3
		if (n & bit_shift) {
     5b6:	9e02      	ldr	r6, [sp, #8]
     5b8:	4667      	mov	r7, ip
     5ba:	403e      	ands	r6, r7
     5bc:	46b1      	mov	r9, r6
     5be:	9e03      	ldr	r6, [sp, #12]
     5c0:	4026      	ands	r6, r4
     5c2:	46b0      	mov	r8, r6
     5c4:	464e      	mov	r6, r9
     5c6:	4647      	mov	r7, r8
     5c8:	433e      	orrs	r6, r7
     5ca:	d003      	beq.n	5d4 <long_division+0x8c>
			r |= 0x01;
     5cc:	2601      	movs	r6, #1
     5ce:	4306      	orrs	r6, r0
     5d0:	0032      	movs	r2, r6
     5d2:	000b      	movs	r3, r1
		if (r >= d) {
     5d4:	9800      	ldr	r0, [sp, #0]
     5d6:	9901      	ldr	r1, [sp, #4]
     5d8:	4299      	cmp	r1, r3
     5da:	d8dc      	bhi.n	596 <long_division+0x4e>
     5dc:	d1d0      	bne.n	580 <long_division+0x38>
     5de:	4290      	cmp	r0, r2
     5e0:	d8d9      	bhi.n	596 <long_division+0x4e>
     5e2:	e7cd      	b.n	580 <long_division+0x38>
		}
	}

	return q;
}
     5e4:	4658      	mov	r0, fp
     5e6:	4651      	mov	r1, sl
     5e8:	b005      	add	sp, #20
     5ea:	bc3c      	pop	{r2, r3, r4, r5}
     5ec:	4690      	mov	r8, r2
     5ee:	4699      	mov	r9, r3
     5f0:	46a2      	mov	sl, r4
     5f2:	46ab      	mov	fp, r5
     5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000005f6 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5f6:	0849      	lsrs	r1, r1, #1
     5f8:	4281      	cmp	r1, r0
     5fa:	d201      	bcs.n	600 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5fc:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     5fe:	4770      	bx	lr
     600:	2300      	movs	r3, #0
     602:	e002      	b.n	60a <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     604:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     606:	3301      	adds	r3, #1
     608:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     60a:	4281      	cmp	r1, r0
     60c:	d2fa      	bcs.n	604 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     60e:	3b01      	subs	r3, #1
     610:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     612:	2bff      	cmp	r3, #255	; 0xff
     614:	d901      	bls.n	61a <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     616:	2040      	movs	r0, #64	; 0x40
     618:	e7f1      	b.n	5fe <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     61a:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     61c:	2000      	movs	r0, #0
     61e:	e7ee      	b.n	5fe <_sercom_get_sync_baud_val+0x8>

00000620 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     620:	b570      	push	{r4, r5, r6, lr}
     622:	b082      	sub	sp, #8
     624:	000c      	movs	r4, r1
     626:	0015      	movs	r5, r2
     628:	aa06      	add	r2, sp, #24
     62a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     62c:	0002      	movs	r2, r0
     62e:	434a      	muls	r2, r1
     630:	42a2      	cmp	r2, r4
     632:	d902      	bls.n	63a <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     634:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     636:	b002      	add	sp, #8
     638:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     63a:	2b00      	cmp	r3, #0
     63c:	d114      	bne.n	668 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     63e:	0002      	movs	r2, r0
     640:	0008      	movs	r0, r1
     642:	2100      	movs	r1, #0
     644:	4e1b      	ldr	r6, [pc, #108]	; (6b4 <_sercom_get_async_baud_val+0x94>)
     646:	47b0      	blx	r6
     648:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     64a:	0022      	movs	r2, r4
     64c:	2300      	movs	r3, #0
     64e:	2000      	movs	r0, #0
     650:	4c19      	ldr	r4, [pc, #100]	; (6b8 <_sercom_get_async_baud_val+0x98>)
     652:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     654:	2200      	movs	r2, #0
     656:	2301      	movs	r3, #1
     658:	1a12      	subs	r2, r2, r0
     65a:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     65c:	0c10      	lsrs	r0, r2, #16
     65e:	041b      	lsls	r3, r3, #16
     660:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     662:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     664:	2000      	movs	r0, #0
     666:	e7e6      	b.n	636 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     668:	2b01      	cmp	r3, #1
     66a:	d001      	beq.n	670 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     66c:	2000      	movs	r0, #0
     66e:	e7f8      	b.n	662 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     670:	000a      	movs	r2, r1
     672:	2300      	movs	r3, #0
     674:	2100      	movs	r1, #0
     676:	4e0f      	ldr	r6, [pc, #60]	; (6b4 <_sercom_get_async_baud_val+0x94>)
     678:	47b0      	blx	r6
     67a:	0002      	movs	r2, r0
     67c:	000b      	movs	r3, r1
     67e:	9200      	str	r2, [sp, #0]
     680:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     682:	0020      	movs	r0, r4
     684:	2100      	movs	r1, #0
     686:	4e0c      	ldr	r6, [pc, #48]	; (6b8 <_sercom_get_async_baud_val+0x98>)
     688:	47b0      	blx	r6
     68a:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     68c:	2380      	movs	r3, #128	; 0x80
     68e:	019b      	lsls	r3, r3, #6
     690:	4298      	cmp	r0, r3
     692:	d901      	bls.n	698 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     694:	2040      	movs	r0, #64	; 0x40
     696:	e7ce      	b.n	636 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     698:	0f61      	lsrs	r1, r4, #29
     69a:	00e0      	lsls	r0, r4, #3
     69c:	9a00      	ldr	r2, [sp, #0]
     69e:	9b01      	ldr	r3, [sp, #4]
     6a0:	4c05      	ldr	r4, [pc, #20]	; (6b8 <_sercom_get_async_baud_val+0x98>)
     6a2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     6a4:	b2c0      	uxtb	r0, r0
     6a6:	00f3      	lsls	r3, r6, #3
     6a8:	b2db      	uxtb	r3, r3
     6aa:	1ac0      	subs	r0, r0, r3
     6ac:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     6ae:	0340      	lsls	r0, r0, #13
     6b0:	4330      	orrs	r0, r6
     6b2:	e7d6      	b.n	662 <_sercom_get_async_baud_val+0x42>
     6b4:	0000230d 	.word	0x0000230d
     6b8:	00000549 	.word	0x00000549

000006bc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6bc:	b510      	push	{r4, lr}
     6be:	b082      	sub	sp, #8
     6c0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6c2:	4b0e      	ldr	r3, [pc, #56]	; (6fc <sercom_set_gclk_generator+0x40>)
     6c4:	781b      	ldrb	r3, [r3, #0]
     6c6:	2b00      	cmp	r3, #0
     6c8:	d007      	beq.n	6da <sercom_set_gclk_generator+0x1e>
     6ca:	2900      	cmp	r1, #0
     6cc:	d105      	bne.n	6da <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     6ce:	4b0b      	ldr	r3, [pc, #44]	; (6fc <sercom_set_gclk_generator+0x40>)
     6d0:	785b      	ldrb	r3, [r3, #1]
     6d2:	4283      	cmp	r3, r0
     6d4:	d010      	beq.n	6f8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6d6:	201d      	movs	r0, #29
     6d8:	e00c      	b.n	6f4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     6da:	a901      	add	r1, sp, #4
     6dc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6de:	2013      	movs	r0, #19
     6e0:	4b07      	ldr	r3, [pc, #28]	; (700 <sercom_set_gclk_generator+0x44>)
     6e2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6e4:	2013      	movs	r0, #19
     6e6:	4b07      	ldr	r3, [pc, #28]	; (704 <sercom_set_gclk_generator+0x48>)
     6e8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     6ea:	4b04      	ldr	r3, [pc, #16]	; (6fc <sercom_set_gclk_generator+0x40>)
     6ec:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6ee:	2201      	movs	r2, #1
     6f0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     6f2:	2000      	movs	r0, #0
}
     6f4:	b002      	add	sp, #8
     6f6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     6f8:	2000      	movs	r0, #0
     6fa:	e7fb      	b.n	6f4 <sercom_set_gclk_generator+0x38>
     6fc:	20000068 	.word	0x20000068
     700:	00001e15 	.word	0x00001e15
     704:	00001d8d 	.word	0x00001d8d

00000708 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     708:	4b40      	ldr	r3, [pc, #256]	; (80c <_sercom_get_default_pad+0x104>)
     70a:	4298      	cmp	r0, r3
     70c:	d031      	beq.n	772 <_sercom_get_default_pad+0x6a>
     70e:	d90a      	bls.n	726 <_sercom_get_default_pad+0x1e>
     710:	4b3f      	ldr	r3, [pc, #252]	; (810 <_sercom_get_default_pad+0x108>)
     712:	4298      	cmp	r0, r3
     714:	d04d      	beq.n	7b2 <_sercom_get_default_pad+0xaa>
     716:	4b3f      	ldr	r3, [pc, #252]	; (814 <_sercom_get_default_pad+0x10c>)
     718:	4298      	cmp	r0, r3
     71a:	d05a      	beq.n	7d2 <_sercom_get_default_pad+0xca>
     71c:	4b3e      	ldr	r3, [pc, #248]	; (818 <_sercom_get_default_pad+0x110>)
     71e:	4298      	cmp	r0, r3
     720:	d037      	beq.n	792 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     722:	2000      	movs	r0, #0
}
     724:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     726:	4b3d      	ldr	r3, [pc, #244]	; (81c <_sercom_get_default_pad+0x114>)
     728:	4298      	cmp	r0, r3
     72a:	d00c      	beq.n	746 <_sercom_get_default_pad+0x3e>
     72c:	4b3c      	ldr	r3, [pc, #240]	; (820 <_sercom_get_default_pad+0x118>)
     72e:	4298      	cmp	r0, r3
     730:	d1f7      	bne.n	722 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     732:	2901      	cmp	r1, #1
     734:	d05f      	beq.n	7f6 <_sercom_get_default_pad+0xee>
     736:	2900      	cmp	r1, #0
     738:	d015      	beq.n	766 <_sercom_get_default_pad+0x5e>
     73a:	2902      	cmp	r1, #2
     73c:	d015      	beq.n	76a <_sercom_get_default_pad+0x62>
     73e:	2903      	cmp	r1, #3
     740:	d015      	beq.n	76e <_sercom_get_default_pad+0x66>
	return 0;
     742:	2000      	movs	r0, #0
     744:	e7ee      	b.n	724 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     746:	2901      	cmp	r1, #1
     748:	d053      	beq.n	7f2 <_sercom_get_default_pad+0xea>
     74a:	2900      	cmp	r1, #0
     74c:	d005      	beq.n	75a <_sercom_get_default_pad+0x52>
     74e:	2902      	cmp	r1, #2
     750:	d005      	beq.n	75e <_sercom_get_default_pad+0x56>
     752:	2903      	cmp	r1, #3
     754:	d005      	beq.n	762 <_sercom_get_default_pad+0x5a>
	return 0;
     756:	2000      	movs	r0, #0
     758:	e7e4      	b.n	724 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     75a:	4832      	ldr	r0, [pc, #200]	; (824 <_sercom_get_default_pad+0x11c>)
     75c:	e7e2      	b.n	724 <_sercom_get_default_pad+0x1c>
     75e:	4832      	ldr	r0, [pc, #200]	; (828 <_sercom_get_default_pad+0x120>)
     760:	e7e0      	b.n	724 <_sercom_get_default_pad+0x1c>
     762:	4832      	ldr	r0, [pc, #200]	; (82c <_sercom_get_default_pad+0x124>)
     764:	e7de      	b.n	724 <_sercom_get_default_pad+0x1c>
     766:	2003      	movs	r0, #3
     768:	e7dc      	b.n	724 <_sercom_get_default_pad+0x1c>
     76a:	4831      	ldr	r0, [pc, #196]	; (830 <_sercom_get_default_pad+0x128>)
     76c:	e7da      	b.n	724 <_sercom_get_default_pad+0x1c>
     76e:	4831      	ldr	r0, [pc, #196]	; (834 <_sercom_get_default_pad+0x12c>)
     770:	e7d8      	b.n	724 <_sercom_get_default_pad+0x1c>
     772:	2901      	cmp	r1, #1
     774:	d041      	beq.n	7fa <_sercom_get_default_pad+0xf2>
     776:	2900      	cmp	r1, #0
     778:	d005      	beq.n	786 <_sercom_get_default_pad+0x7e>
     77a:	2902      	cmp	r1, #2
     77c:	d005      	beq.n	78a <_sercom_get_default_pad+0x82>
     77e:	2903      	cmp	r1, #3
     780:	d005      	beq.n	78e <_sercom_get_default_pad+0x86>
	return 0;
     782:	2000      	movs	r0, #0
     784:	e7ce      	b.n	724 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     786:	482c      	ldr	r0, [pc, #176]	; (838 <_sercom_get_default_pad+0x130>)
     788:	e7cc      	b.n	724 <_sercom_get_default_pad+0x1c>
     78a:	482c      	ldr	r0, [pc, #176]	; (83c <_sercom_get_default_pad+0x134>)
     78c:	e7ca      	b.n	724 <_sercom_get_default_pad+0x1c>
     78e:	482c      	ldr	r0, [pc, #176]	; (840 <_sercom_get_default_pad+0x138>)
     790:	e7c8      	b.n	724 <_sercom_get_default_pad+0x1c>
     792:	2901      	cmp	r1, #1
     794:	d033      	beq.n	7fe <_sercom_get_default_pad+0xf6>
     796:	2900      	cmp	r1, #0
     798:	d005      	beq.n	7a6 <_sercom_get_default_pad+0x9e>
     79a:	2902      	cmp	r1, #2
     79c:	d005      	beq.n	7aa <_sercom_get_default_pad+0xa2>
     79e:	2903      	cmp	r1, #3
     7a0:	d005      	beq.n	7ae <_sercom_get_default_pad+0xa6>
	return 0;
     7a2:	2000      	movs	r0, #0
     7a4:	e7be      	b.n	724 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7a6:	4827      	ldr	r0, [pc, #156]	; (844 <_sercom_get_default_pad+0x13c>)
     7a8:	e7bc      	b.n	724 <_sercom_get_default_pad+0x1c>
     7aa:	4827      	ldr	r0, [pc, #156]	; (848 <_sercom_get_default_pad+0x140>)
     7ac:	e7ba      	b.n	724 <_sercom_get_default_pad+0x1c>
     7ae:	4827      	ldr	r0, [pc, #156]	; (84c <_sercom_get_default_pad+0x144>)
     7b0:	e7b8      	b.n	724 <_sercom_get_default_pad+0x1c>
     7b2:	2901      	cmp	r1, #1
     7b4:	d025      	beq.n	802 <_sercom_get_default_pad+0xfa>
     7b6:	2900      	cmp	r1, #0
     7b8:	d005      	beq.n	7c6 <_sercom_get_default_pad+0xbe>
     7ba:	2902      	cmp	r1, #2
     7bc:	d005      	beq.n	7ca <_sercom_get_default_pad+0xc2>
     7be:	2903      	cmp	r1, #3
     7c0:	d005      	beq.n	7ce <_sercom_get_default_pad+0xc6>
	return 0;
     7c2:	2000      	movs	r0, #0
     7c4:	e7ae      	b.n	724 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7c6:	4822      	ldr	r0, [pc, #136]	; (850 <_sercom_get_default_pad+0x148>)
     7c8:	e7ac      	b.n	724 <_sercom_get_default_pad+0x1c>
     7ca:	4822      	ldr	r0, [pc, #136]	; (854 <_sercom_get_default_pad+0x14c>)
     7cc:	e7aa      	b.n	724 <_sercom_get_default_pad+0x1c>
     7ce:	4822      	ldr	r0, [pc, #136]	; (858 <_sercom_get_default_pad+0x150>)
     7d0:	e7a8      	b.n	724 <_sercom_get_default_pad+0x1c>
     7d2:	2901      	cmp	r1, #1
     7d4:	d017      	beq.n	806 <_sercom_get_default_pad+0xfe>
     7d6:	2900      	cmp	r1, #0
     7d8:	d005      	beq.n	7e6 <_sercom_get_default_pad+0xde>
     7da:	2902      	cmp	r1, #2
     7dc:	d005      	beq.n	7ea <_sercom_get_default_pad+0xe2>
     7de:	2903      	cmp	r1, #3
     7e0:	d005      	beq.n	7ee <_sercom_get_default_pad+0xe6>
	return 0;
     7e2:	2000      	movs	r0, #0
     7e4:	e79e      	b.n	724 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7e6:	481d      	ldr	r0, [pc, #116]	; (85c <_sercom_get_default_pad+0x154>)
     7e8:	e79c      	b.n	724 <_sercom_get_default_pad+0x1c>
     7ea:	481d      	ldr	r0, [pc, #116]	; (860 <_sercom_get_default_pad+0x158>)
     7ec:	e79a      	b.n	724 <_sercom_get_default_pad+0x1c>
     7ee:	481d      	ldr	r0, [pc, #116]	; (864 <_sercom_get_default_pad+0x15c>)
     7f0:	e798      	b.n	724 <_sercom_get_default_pad+0x1c>
     7f2:	481d      	ldr	r0, [pc, #116]	; (868 <_sercom_get_default_pad+0x160>)
     7f4:	e796      	b.n	724 <_sercom_get_default_pad+0x1c>
     7f6:	481d      	ldr	r0, [pc, #116]	; (86c <_sercom_get_default_pad+0x164>)
     7f8:	e794      	b.n	724 <_sercom_get_default_pad+0x1c>
     7fa:	481d      	ldr	r0, [pc, #116]	; (870 <_sercom_get_default_pad+0x168>)
     7fc:	e792      	b.n	724 <_sercom_get_default_pad+0x1c>
     7fe:	481d      	ldr	r0, [pc, #116]	; (874 <_sercom_get_default_pad+0x16c>)
     800:	e790      	b.n	724 <_sercom_get_default_pad+0x1c>
     802:	481d      	ldr	r0, [pc, #116]	; (878 <_sercom_get_default_pad+0x170>)
     804:	e78e      	b.n	724 <_sercom_get_default_pad+0x1c>
     806:	481d      	ldr	r0, [pc, #116]	; (87c <_sercom_get_default_pad+0x174>)
     808:	e78c      	b.n	724 <_sercom_get_default_pad+0x1c>
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	42001000 	.word	0x42001000
     810:	42001800 	.word	0x42001800
     814:	42001c00 	.word	0x42001c00
     818:	42001400 	.word	0x42001400
     81c:	42000800 	.word	0x42000800
     820:	42000c00 	.word	0x42000c00
     824:	00040003 	.word	0x00040003
     828:	00060003 	.word	0x00060003
     82c:	00070003 	.word	0x00070003
     830:	001e0003 	.word	0x001e0003
     834:	001f0003 	.word	0x001f0003
     838:	00080003 	.word	0x00080003
     83c:	000a0003 	.word	0x000a0003
     840:	000b0003 	.word	0x000b0003
     844:	00100003 	.word	0x00100003
     848:	00120003 	.word	0x00120003
     84c:	00130003 	.word	0x00130003
     850:	000c0003 	.word	0x000c0003
     854:	000e0003 	.word	0x000e0003
     858:	000f0003 	.word	0x000f0003
     85c:	00160003 	.word	0x00160003
     860:	00180003 	.word	0x00180003
     864:	00190003 	.word	0x00190003
     868:	00050003 	.word	0x00050003
     86c:	00010003 	.word	0x00010003
     870:	00090003 	.word	0x00090003
     874:	00110003 	.word	0x00110003
     878:	000d0003 	.word	0x000d0003
     87c:	00170003 	.word	0x00170003

00000880 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     880:	b530      	push	{r4, r5, lr}
     882:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     884:	4c0a      	ldr	r4, [pc, #40]	; (8b0 <_sercom_get_sercom_inst_index+0x30>)
     886:	466b      	mov	r3, sp
     888:	0022      	movs	r2, r4
     88a:	ca32      	ldmia	r2!, {r1, r4, r5}
     88c:	c332      	stmia	r3!, {r1, r4, r5}
     88e:	ca32      	ldmia	r2!, {r1, r4, r5}
     890:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     892:	2300      	movs	r3, #0
     894:	2b05      	cmp	r3, #5
     896:	d808      	bhi.n	8aa <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     898:	009a      	lsls	r2, r3, #2
     89a:	4669      	mov	r1, sp
     89c:	5852      	ldr	r2, [r2, r1]
     89e:	4282      	cmp	r2, r0
     8a0:	d001      	beq.n	8a6 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8a2:	3301      	adds	r3, #1
     8a4:	e7f6      	b.n	894 <_sercom_get_sercom_inst_index+0x14>
			return i;
     8a6:	b2d8      	uxtb	r0, r3
     8a8:	e000      	b.n	8ac <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     8aa:	2000      	movs	r0, #0
}
     8ac:	b007      	add	sp, #28
     8ae:	bd30      	pop	{r4, r5, pc}
     8b0:	000023cc 	.word	0x000023cc

000008b4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b6:	46de      	mov	lr, fp
     8b8:	4657      	mov	r7, sl
     8ba:	464e      	mov	r6, r9
     8bc:	4645      	mov	r5, r8
     8be:	b5e0      	push	{r5, r6, r7, lr}
     8c0:	b087      	sub	sp, #28
     8c2:	0004      	movs	r4, r0
     8c4:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8c6:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8c8:	0030      	movs	r0, r6
     8ca:	4b6b      	ldr	r3, [pc, #428]	; (a78 <_usart_set_config+0x1c4>)
     8cc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8ce:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     8d0:	2200      	movs	r2, #0
     8d2:	230e      	movs	r3, #14
     8d4:	a902      	add	r1, sp, #8
     8d6:	468c      	mov	ip, r1
     8d8:	4463      	add	r3, ip
     8da:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     8dc:	8a2a      	ldrh	r2, [r5, #16]
     8de:	2380      	movs	r3, #128	; 0x80
     8e0:	01db      	lsls	r3, r3, #7
     8e2:	429a      	cmp	r2, r3
     8e4:	d03b      	beq.n	95e <_usart_set_config+0xaa>
     8e6:	d90c      	bls.n	902 <_usart_set_config+0x4e>
     8e8:	23c0      	movs	r3, #192	; 0xc0
     8ea:	01db      	lsls	r3, r3, #7
     8ec:	429a      	cmp	r2, r3
     8ee:	d031      	beq.n	954 <_usart_set_config+0xa0>
     8f0:	2380      	movs	r3, #128	; 0x80
     8f2:	021b      	lsls	r3, r3, #8
     8f4:	429a      	cmp	r2, r3
     8f6:	d10d      	bne.n	914 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     8f8:	2303      	movs	r3, #3
     8fa:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8fc:	2300      	movs	r3, #0
     8fe:	4699      	mov	r9, r3
			break;
     900:	e00c      	b.n	91c <_usart_set_config+0x68>
	switch (config->sample_rate) {
     902:	2380      	movs	r3, #128	; 0x80
     904:	019b      	lsls	r3, r3, #6
     906:	429a      	cmp	r2, r3
     908:	d104      	bne.n	914 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     90a:	2310      	movs	r3, #16
     90c:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     90e:	3b0f      	subs	r3, #15
     910:	4699      	mov	r9, r3
			break;
     912:	e003      	b.n	91c <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     914:	2310      	movs	r3, #16
     916:	469a      	mov	sl, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     918:	2300      	movs	r3, #0
     91a:	4699      	mov	r9, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     91c:	682b      	ldr	r3, [r5, #0]
     91e:	68e9      	ldr	r1, [r5, #12]
     920:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
     922:	6969      	ldr	r1, [r5, #20]
     924:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     926:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     928:	7e2a      	ldrb	r2, [r5, #24]
     92a:	0212      	lsls	r2, r2, #8
		config->sample_rate |
     92c:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     92e:	2226      	movs	r2, #38	; 0x26
     930:	5caf      	ldrb	r7, [r5, r2]
     932:	077f      	lsls	r7, r7, #29
	ctrla = (uint32_t)config->data_order |
     934:	431f      	orrs	r7, r3
     936:	9703      	str	r7, [sp, #12]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     938:	686b      	ldr	r3, [r5, #4]
     93a:	4698      	mov	r8, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     93c:	2b00      	cmp	r3, #0
     93e:	d021      	beq.n	984 <_usart_set_config+0xd0>
     940:	2380      	movs	r3, #128	; 0x80
     942:	055b      	lsls	r3, r3, #21
     944:	4598      	cmp	r8, r3
     946:	d13e      	bne.n	9c6 <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     948:	2327      	movs	r3, #39	; 0x27
     94a:	5ceb      	ldrb	r3, [r5, r3]
     94c:	2b00      	cmp	r3, #0
     94e:	d00b      	beq.n	968 <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
     950:	2000      	movs	r0, #0
     952:	e039      	b.n	9c8 <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     954:	2308      	movs	r3, #8
     956:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     958:	3b07      	subs	r3, #7
     95a:	4699      	mov	r9, r3
			break;
     95c:	e7de      	b.n	91c <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     95e:	2308      	movs	r3, #8
     960:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     962:	2300      	movs	r3, #0
     964:	4699      	mov	r9, r3
     966:	e7d9      	b.n	91c <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     968:	6a2b      	ldr	r3, [r5, #32]
     96a:	4699      	mov	r9, r3
     96c:	b2c0      	uxtb	r0, r0
     96e:	4b43      	ldr	r3, [pc, #268]	; (a7c <_usart_set_config+0x1c8>)
     970:	4798      	blx	r3
     972:	0001      	movs	r1, r0
     974:	220e      	movs	r2, #14
     976:	ab02      	add	r3, sp, #8
     978:	469c      	mov	ip, r3
     97a:	4462      	add	r2, ip
     97c:	4648      	mov	r0, r9
     97e:	4b40      	ldr	r3, [pc, #256]	; (a80 <_usart_set_config+0x1cc>)
     980:	4798      	blx	r3
     982:	e021      	b.n	9c8 <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     984:	2327      	movs	r3, #39	; 0x27
     986:	5ceb      	ldrb	r3, [r5, r3]
     988:	2b00      	cmp	r3, #0
     98a:	d00b      	beq.n	9a4 <_usart_set_config+0xf0>
				status_code =
     98c:	4653      	mov	r3, sl
     98e:	9300      	str	r3, [sp, #0]
     990:	464b      	mov	r3, r9
     992:	220e      	movs	r2, #14
     994:	a902      	add	r1, sp, #8
     996:	468c      	mov	ip, r1
     998:	4462      	add	r2, ip
     99a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     99c:	6a28      	ldr	r0, [r5, #32]
     99e:	4f39      	ldr	r7, [pc, #228]	; (a84 <_usart_set_config+0x1d0>)
     9a0:	47b8      	blx	r7
     9a2:	e011      	b.n	9c8 <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     9a4:	6a2b      	ldr	r3, [r5, #32]
     9a6:	469b      	mov	fp, r3
     9a8:	b2c0      	uxtb	r0, r0
     9aa:	4b34      	ldr	r3, [pc, #208]	; (a7c <_usart_set_config+0x1c8>)
     9ac:	4798      	blx	r3
     9ae:	0001      	movs	r1, r0
				status_code =
     9b0:	4653      	mov	r3, sl
     9b2:	9300      	str	r3, [sp, #0]
     9b4:	464b      	mov	r3, r9
     9b6:	220e      	movs	r2, #14
     9b8:	a802      	add	r0, sp, #8
     9ba:	4684      	mov	ip, r0
     9bc:	4462      	add	r2, ip
     9be:	4658      	mov	r0, fp
     9c0:	4f30      	ldr	r7, [pc, #192]	; (a84 <_usart_set_config+0x1d0>)
     9c2:	47b8      	blx	r7
     9c4:	e000      	b.n	9c8 <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
     9c6:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     9c8:	2800      	cmp	r0, #0
     9ca:	d146      	bne.n	a5a <_usart_set_config+0x1a6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     9cc:	7e6b      	ldrb	r3, [r5, #25]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d001      	beq.n	9d6 <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     9d2:	7eab      	ldrb	r3, [r5, #26]
     9d4:	73b3      	strb	r3, [r6, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9d6:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     9d8:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     9da:	2b00      	cmp	r3, #0
     9dc:	d1fb      	bne.n	9d6 <_usart_set_config+0x122>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     9de:	330e      	adds	r3, #14
     9e0:	aa02      	add	r2, sp, #8
     9e2:	4694      	mov	ip, r2
     9e4:	4463      	add	r3, ip
     9e6:	881b      	ldrh	r3, [r3, #0]
     9e8:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     9ea:	4643      	mov	r3, r8
     9ec:	9f03      	ldr	r7, [sp, #12]
     9ee:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     9f0:	2327      	movs	r3, #39	; 0x27
     9f2:	5ceb      	ldrb	r3, [r5, r3]
     9f4:	2b00      	cmp	r3, #0
     9f6:	d101      	bne.n	9fc <_usart_set_config+0x148>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     9f8:	3304      	adds	r3, #4
     9fa:	431f      	orrs	r7, r3
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     9fc:	7e6a      	ldrb	r2, [r5, #25]
     9fe:	0292      	lsls	r2, r2, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     a00:	7f2b      	ldrb	r3, [r5, #28]
     a02:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     a04:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     a06:	7f6b      	ldrb	r3, [r5, #29]
     a08:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     a0a:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a0c:	2324      	movs	r3, #36	; 0x24
     a0e:	5ceb      	ldrb	r3, [r5, r3]
     a10:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     a12:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     a14:	2325      	movs	r3, #37	; 0x25
     a16:	5ceb      	ldrb	r3, [r5, r3]
     a18:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a1a:	431a      	orrs	r2, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     a1c:	7aab      	ldrb	r3, [r5, #10]
     a1e:	431a      	orrs	r2, r3
	ctrlb |= (uint32_t)config->character_size;
     a20:	7aeb      	ldrb	r3, [r5, #11]
     a22:	431a      	orrs	r2, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     a24:	892b      	ldrh	r3, [r5, #8]
     a26:	2bff      	cmp	r3, #255	; 0xff
     a28:	d01e      	beq.n	a68 <_usart_set_config+0x1b4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     a2a:	2180      	movs	r1, #128	; 0x80
     a2c:	0449      	lsls	r1, r1, #17
     a2e:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
     a30:	431a      	orrs	r2, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a32:	232c      	movs	r3, #44	; 0x2c
     a34:	5ceb      	ldrb	r3, [r5, r3]
     a36:	2b00      	cmp	r3, #0
     a38:	d103      	bne.n	a42 <_usart_set_config+0x18e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a3a:	4b13      	ldr	r3, [pc, #76]	; (a88 <_usart_set_config+0x1d4>)
     a3c:	789b      	ldrb	r3, [r3, #2]
     a3e:	079b      	lsls	r3, r3, #30
     a40:	d501      	bpl.n	a46 <_usart_set_config+0x192>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     a42:	2380      	movs	r3, #128	; 0x80
     a44:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     a46:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     a48:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     a4a:	2b00      	cmp	r3, #0
     a4c:	d1fb      	bne.n	a46 <_usart_set_config+0x192>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     a4e:	6072      	str	r2, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a50:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     a52:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     a54:	2b00      	cmp	r3, #0
     a56:	d1fb      	bne.n	a50 <_usart_set_config+0x19c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     a58:	6037      	str	r7, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
     a5a:	b007      	add	sp, #28
     a5c:	bc3c      	pop	{r2, r3, r4, r5}
     a5e:	4690      	mov	r8, r2
     a60:	4699      	mov	r9, r3
     a62:	46a2      	mov	sl, r4
     a64:	46ab      	mov	fp, r5
     a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
     a68:	7eeb      	ldrb	r3, [r5, #27]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d0e1      	beq.n	a32 <_usart_set_config+0x17e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     a6e:	2380      	movs	r3, #128	; 0x80
     a70:	04db      	lsls	r3, r3, #19
     a72:	431f      	orrs	r7, r3
     a74:	e7dd      	b.n	a32 <_usart_set_config+0x17e>
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	00000881 	.word	0x00000881
     a7c:	00001e31 	.word	0x00001e31
     a80:	000005f7 	.word	0x000005f7
     a84:	00000621 	.word	0x00000621
     a88:	41002000 	.word	0x41002000

00000a8c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a8e:	b089      	sub	sp, #36	; 0x24
     a90:	0006      	movs	r6, r0
     a92:	000c      	movs	r4, r1
     a94:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a96:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a98:	0008      	movs	r0, r1
     a9a:	4b42      	ldr	r3, [pc, #264]	; (ba4 <usart_init+0x118>)
     a9c:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a9e:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     aa0:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     aa2:	6823      	ldr	r3, [r4, #0]
     aa4:	07db      	lsls	r3, r3, #31
     aa6:	d503      	bpl.n	ab0 <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     aa8:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     aaa:	0028      	movs	r0, r5
     aac:	b009      	add	sp, #36	; 0x24
     aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ab0:	6823      	ldr	r3, [r4, #0]
     ab2:	079b      	lsls	r3, r3, #30
     ab4:	d501      	bpl.n	aba <usart_init+0x2e>
		return STATUS_ERR_DENIED;
     ab6:	251c      	movs	r5, #28
     ab8:	e7f7      	b.n	aaa <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     aba:	2301      	movs	r3, #1
     abc:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     abe:	4a3a      	ldr	r2, [pc, #232]	; (ba8 <usart_init+0x11c>)
     ac0:	6a11      	ldr	r1, [r2, #32]
     ac2:	430b      	orrs	r3, r1
     ac4:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     ac6:	252d      	movs	r5, #45	; 0x2d
     ac8:	5d7b      	ldrb	r3, [r7, r5]
     aca:	a907      	add	r1, sp, #28
     acc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ace:	b2c3      	uxtb	r3, r0
     ad0:	9301      	str	r3, [sp, #4]
     ad2:	0018      	movs	r0, r3
     ad4:	4b35      	ldr	r3, [pc, #212]	; (bac <usart_init+0x120>)
     ad6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ad8:	9801      	ldr	r0, [sp, #4]
     ada:	4b35      	ldr	r3, [pc, #212]	; (bb0 <usart_init+0x124>)
     adc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ade:	5d78      	ldrb	r0, [r7, r5]
     ae0:	2100      	movs	r1, #0
     ae2:	4b34      	ldr	r3, [pc, #208]	; (bb4 <usart_init+0x128>)
     ae4:	4798      	blx	r3
	module->character_size = config->character_size;
     ae6:	7afb      	ldrb	r3, [r7, #11]
     ae8:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
     aea:	2324      	movs	r3, #36	; 0x24
     aec:	5cfb      	ldrb	r3, [r7, r3]
     aee:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     af0:	2325      	movs	r3, #37	; 0x25
     af2:	5cfb      	ldrb	r3, [r7, r3]
     af4:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     af6:	7efb      	ldrb	r3, [r7, #27]
     af8:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     afa:	7f3b      	ldrb	r3, [r7, #28]
     afc:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
     afe:	0039      	movs	r1, r7
     b00:	0030      	movs	r0, r6
     b02:	4b2d      	ldr	r3, [pc, #180]	; (bb8 <usart_init+0x12c>)
     b04:	4798      	blx	r3
     b06:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
     b08:	d1cf      	bne.n	aaa <usart_init+0x1e>
     b0a:	ab06      	add	r3, sp, #24
     b0c:	2280      	movs	r2, #128	; 0x80
     b0e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b10:	2200      	movs	r2, #0
     b12:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     b14:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b16:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b1a:	9302      	str	r3, [sp, #8]
     b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b1e:	9303      	str	r3, [sp, #12]
     b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     b22:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
     b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b26:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
     b28:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
     b2a:	2700      	movs	r7, #0
     b2c:	e006      	b.n	b3c <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b2e:	0039      	movs	r1, r7
     b30:	0020      	movs	r0, r4
     b32:	4b22      	ldr	r3, [pc, #136]	; (bbc <usart_init+0x130>)
     b34:	4798      	blx	r3
     b36:	e008      	b.n	b4a <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
     b38:	3701      	adds	r7, #1
     b3a:	b2ff      	uxtb	r7, r7
     b3c:	2f03      	cmp	r7, #3
     b3e:	d80d      	bhi.n	b5c <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b40:	00bb      	lsls	r3, r7, #2
     b42:	aa02      	add	r2, sp, #8
     b44:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     b46:	2800      	cmp	r0, #0
     b48:	d0f1      	beq.n	b2e <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
     b4a:	1c43      	adds	r3, r0, #1
     b4c:	d0f4      	beq.n	b38 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b4e:	a906      	add	r1, sp, #24
     b50:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b52:	0c00      	lsrs	r0, r0, #16
     b54:	b2c0      	uxtb	r0, r0
     b56:	4b1a      	ldr	r3, [pc, #104]	; (bc0 <usart_init+0x134>)
     b58:	4798      	blx	r3
     b5a:	e7ed      	b.n	b38 <usart_init+0xac>
     b5c:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     b5e:	2a05      	cmp	r2, #5
     b60:	d806      	bhi.n	b70 <usart_init+0xe4>
		module->callback[i]            = NULL;
     b62:	1c93      	adds	r3, r2, #2
     b64:	009b      	lsls	r3, r3, #2
     b66:	18f3      	adds	r3, r6, r3
     b68:	2100      	movs	r1, #0
     b6a:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     b6c:	3201      	adds	r2, #1
     b6e:	e7f6      	b.n	b5e <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
     b70:	2200      	movs	r2, #0
     b72:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     b74:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     b76:	2300      	movs	r3, #0
     b78:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     b7a:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     b7c:	3230      	adds	r2, #48	; 0x30
     b7e:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
     b80:	3201      	adds	r2, #1
     b82:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
     b84:	3201      	adds	r2, #1
     b86:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
     b88:	3201      	adds	r2, #1
     b8a:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     b8c:	6830      	ldr	r0, [r6, #0]
     b8e:	4b05      	ldr	r3, [pc, #20]	; (ba4 <usart_init+0x118>)
     b90:	4798      	blx	r3
     b92:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     b94:	490b      	ldr	r1, [pc, #44]	; (bc4 <usart_init+0x138>)
     b96:	4b0c      	ldr	r3, [pc, #48]	; (bc8 <usart_init+0x13c>)
     b98:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b9a:	00a4      	lsls	r4, r4, #2
     b9c:	4b0b      	ldr	r3, [pc, #44]	; (bcc <usart_init+0x140>)
     b9e:	50e6      	str	r6, [r4, r3]
	return status_code;
     ba0:	e783      	b.n	aaa <usart_init+0x1e>
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	00000881 	.word	0x00000881
     ba8:	40000400 	.word	0x40000400
     bac:	00001e15 	.word	0x00001e15
     bb0:	00001d8d 	.word	0x00001d8d
     bb4:	000006bd 	.word	0x000006bd
     bb8:	000008b5 	.word	0x000008b5
     bbc:	00000709 	.word	0x00000709
     bc0:	00001ef9 	.word	0x00001ef9
     bc4:	00000d8d 	.word	0x00000d8d
     bc8:	0000183d 	.word	0x0000183d
     bcc:	200000e8 	.word	0x200000e8

00000bd0 <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bd0:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     bd2:	79c2      	ldrb	r2, [r0, #7]
     bd4:	2a00      	cmp	r2, #0
     bd6:	d101      	bne.n	bdc <usart_write_wait+0xc>
		return STATUS_ERR_DENIED;
     bd8:	201c      	movs	r0, #28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     bda:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     bdc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     bde:	b292      	uxth	r2, r2
     be0:	2a00      	cmp	r2, #0
     be2:	d001      	beq.n	be8 <usart_write_wait+0x18>
		return STATUS_BUSY;
     be4:	2005      	movs	r0, #5
     be6:	e7f8      	b.n	bda <usart_write_wait+0xa>
	return (usart_hw->SYNCBUSY.reg);
     be8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     bea:	2a00      	cmp	r2, #0
     bec:	d1fc      	bne.n	be8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     bee:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     bf0:	7e1a      	ldrb	r2, [r3, #24]
     bf2:	0792      	lsls	r2, r2, #30
     bf4:	d5fc      	bpl.n	bf0 <usart_write_wait+0x20>
	return STATUS_OK;
     bf6:	2000      	movs	r0, #0
     bf8:	e7ef      	b.n	bda <usart_write_wait+0xa>
	...

00000bfc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfe:	46c6      	mov	lr, r8
     c00:	b500      	push	{lr}
     c02:	0004      	movs	r4, r0
     c04:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     c06:	2a00      	cmp	r2, #0
     c08:	d103      	bne.n	c12 <usart_write_buffer_wait+0x16>
		return STATUS_ERR_INVALID_ARG;
     c0a:	2017      	movs	r0, #23
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     c0c:	bc04      	pop	{r2}
     c0e:	4690      	mov	r8, r2
     c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     c12:	79c3      	ldrb	r3, [r0, #7]
     c14:	2b00      	cmp	r3, #0
     c16:	d101      	bne.n	c1c <usart_write_buffer_wait+0x20>
		return STATUS_ERR_DENIED;
     c18:	201c      	movs	r0, #28
     c1a:	e7f7      	b.n	c0c <usart_write_buffer_wait+0x10>
	SercomUsart *const usart_hw = &(module->hw->USART);
     c1c:	6806      	ldr	r6, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     c1e:	69f3      	ldr	r3, [r6, #28]
	while (usart_is_syncing(module)) {
     c20:	2b00      	cmp	r3, #0
     c22:	d1fc      	bne.n	c1e <usart_write_buffer_wait+0x22>
     c24:	2000      	movs	r0, #0
     c26:	e00c      	b.n	c42 <usart_write_buffer_wait+0x46>
		uint16_t data_to_send = tx_data[tx_pos++];
     c28:	1c43      	adds	r3, r0, #1
     c2a:	b29b      	uxth	r3, r3
     c2c:	4698      	mov	r8, r3
     c2e:	5c2b      	ldrb	r3, [r5, r0]
     c30:	b299      	uxth	r1, r3
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c32:	7962      	ldrb	r2, [r4, #5]
     c34:	2a01      	cmp	r2, #1
     c36:	d014      	beq.n	c62 <usart_write_buffer_wait+0x66>
		usart_write_wait(module, data_to_send);
     c38:	0020      	movs	r0, r4
     c3a:	4b18      	ldr	r3, [pc, #96]	; (c9c <usart_write_buffer_wait+0xa0>)
     c3c:	4798      	blx	r3
	while (length--) {
     c3e:	4640      	mov	r0, r8
     c40:	003a      	movs	r2, r7
     c42:	1e57      	subs	r7, r2, #1
     c44:	b2bf      	uxth	r7, r7
     c46:	2a00      	cmp	r2, #0
     c48:	d013      	beq.n	c72 <usart_write_buffer_wait+0x76>
     c4a:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c4c:	4a14      	ldr	r2, [pc, #80]	; (ca0 <usart_write_buffer_wait+0xa4>)
     c4e:	4293      	cmp	r3, r2
     c50:	d8ea      	bhi.n	c28 <usart_write_buffer_wait+0x2c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     c52:	7e32      	ldrb	r2, [r6, #24]
     c54:	07d2      	lsls	r2, r2, #31
     c56:	d4e7      	bmi.n	c28 <usart_write_buffer_wait+0x2c>
			} else if (i == USART_TIMEOUT) {
     c58:	4a11      	ldr	r2, [pc, #68]	; (ca0 <usart_write_buffer_wait+0xa4>)
     c5a:	4293      	cmp	r3, r2
     c5c:	d019      	beq.n	c92 <usart_write_buffer_wait+0x96>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c5e:	3301      	adds	r3, #1
     c60:	e7f4      	b.n	c4c <usart_write_buffer_wait+0x50>
			data_to_send |= (tx_data[tx_pos++] << 8);
     c62:	3002      	adds	r0, #2
     c64:	4642      	mov	r2, r8
     c66:	5ca9      	ldrb	r1, [r5, r2]
     c68:	0209      	lsls	r1, r1, #8
     c6a:	4319      	orrs	r1, r3
     c6c:	b283      	uxth	r3, r0
     c6e:	4698      	mov	r8, r3
     c70:	e7e2      	b.n	c38 <usart_write_buffer_wait+0x3c>
     c72:	2300      	movs	r3, #0
     c74:	e000      	b.n	c78 <usart_write_buffer_wait+0x7c>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c76:	3301      	adds	r3, #1
     c78:	4a09      	ldr	r2, [pc, #36]	; (ca0 <usart_write_buffer_wait+0xa4>)
     c7a:	4293      	cmp	r3, r2
     c7c:	d807      	bhi.n	c8e <usart_write_buffer_wait+0x92>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     c7e:	7e32      	ldrb	r2, [r6, #24]
     c80:	0792      	lsls	r2, r2, #30
     c82:	d408      	bmi.n	c96 <usart_write_buffer_wait+0x9a>
		} else if (i == USART_TIMEOUT) {
     c84:	4a06      	ldr	r2, [pc, #24]	; (ca0 <usart_write_buffer_wait+0xa4>)
     c86:	4293      	cmp	r3, r2
     c88:	d1f5      	bne.n	c76 <usart_write_buffer_wait+0x7a>
			return STATUS_ERR_TIMEOUT;
     c8a:	2012      	movs	r0, #18
     c8c:	e7be      	b.n	c0c <usart_write_buffer_wait+0x10>
	return STATUS_OK;
     c8e:	2000      	movs	r0, #0
     c90:	e7bc      	b.n	c0c <usart_write_buffer_wait+0x10>
				return STATUS_ERR_TIMEOUT;
     c92:	2012      	movs	r0, #18
     c94:	e7ba      	b.n	c0c <usart_write_buffer_wait+0x10>
	return STATUS_OK;
     c96:	2000      	movs	r0, #0
     c98:	e7b8      	b.n	c0c <usart_write_buffer_wait+0x10>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	00000bd1 	.word	0x00000bd1
     ca0:	0000ffff 	.word	0x0000ffff

00000ca4 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ca6:	0006      	movs	r6, r0
     ca8:	000c      	movs	r4, r1
     caa:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     cac:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     cae:	4b0a      	ldr	r3, [pc, #40]	; (cd8 <_usart_write_buffer+0x34>)
     cb0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     cb2:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     cb4:	b29b      	uxth	r3, r3
     cb6:	2b00      	cmp	r3, #0
     cb8:	d003      	beq.n	cc2 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
     cba:	4b08      	ldr	r3, [pc, #32]	; (cdc <_usart_write_buffer+0x38>)
     cbc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     cbe:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     cc2:	85f5      	strh	r5, [r6, #46]	; 0x2e
     cc4:	4b05      	ldr	r3, [pc, #20]	; (cdc <_usart_write_buffer+0x38>)
     cc6:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     cc8:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     cca:	2205      	movs	r2, #5
     ccc:	2333      	movs	r3, #51	; 0x33
     cce:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     cd0:	3b32      	subs	r3, #50	; 0x32
     cd2:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     cd4:	2000      	movs	r0, #0
     cd6:	e7f3      	b.n	cc0 <_usart_write_buffer+0x1c>
     cd8:	00001905 	.word	0x00001905
     cdc:	00001945 	.word	0x00001945

00000ce0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ce2:	0004      	movs	r4, r0
     ce4:	000d      	movs	r5, r1
     ce6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ce8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     cea:	4b10      	ldr	r3, [pc, #64]	; (d2c <_usart_read_buffer+0x4c>)
     cec:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     cee:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     cf0:	b29b      	uxth	r3, r3
     cf2:	2b00      	cmp	r3, #0
     cf4:	d003      	beq.n	cfe <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     cf6:	4b0e      	ldr	r3, [pc, #56]	; (d30 <_usart_read_buffer+0x50>)
     cf8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     cfa:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     cfe:	85a6      	strh	r6, [r4, #44]	; 0x2c
     d00:	4b0b      	ldr	r3, [pc, #44]	; (d30 <_usart_read_buffer+0x50>)
     d02:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     d04:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     d06:	2205      	movs	r2, #5
     d08:	2332      	movs	r3, #50	; 0x32
     d0a:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     d0c:	3b2e      	subs	r3, #46	; 0x2e
     d0e:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     d10:	7a23      	ldrb	r3, [r4, #8]
     d12:	2b00      	cmp	r3, #0
     d14:	d001      	beq.n	d1a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     d16:	2320      	movs	r3, #32
     d18:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     d1a:	7a63      	ldrb	r3, [r4, #9]
     d1c:	2b00      	cmp	r3, #0
     d1e:	d003      	beq.n	d28 <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     d20:	2308      	movs	r3, #8
     d22:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     d24:	2000      	movs	r0, #0
     d26:	e7e9      	b.n	cfc <_usart_read_buffer+0x1c>
     d28:	2000      	movs	r0, #0
     d2a:	e7e7      	b.n	cfc <_usart_read_buffer+0x1c>
     d2c:	00001905 	.word	0x00001905
     d30:	00001945 	.word	0x00001945

00000d34 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     d34:	1c93      	adds	r3, r2, #2
     d36:	009b      	lsls	r3, r3, #2
     d38:	18c3      	adds	r3, r0, r3
     d3a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     d3c:	2301      	movs	r3, #1
     d3e:	4093      	lsls	r3, r2
     d40:	001a      	movs	r2, r3
     d42:	2130      	movs	r1, #48	; 0x30
     d44:	5c43      	ldrb	r3, [r0, r1]
     d46:	4313      	orrs	r3, r2
     d48:	5443      	strb	r3, [r0, r1]
}
     d4a:	4770      	bx	lr

00000d4c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     d4c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
     d4e:	2a00      	cmp	r2, #0
     d50:	d101      	bne.n	d56 <usart_write_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
     d52:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     d54:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     d56:	79c3      	ldrb	r3, [r0, #7]
     d58:	2b00      	cmp	r3, #0
     d5a:	d101      	bne.n	d60 <usart_write_buffer_job+0x14>
		return STATUS_ERR_DENIED;
     d5c:	201c      	movs	r0, #28
     d5e:	e7f9      	b.n	d54 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     d60:	4b01      	ldr	r3, [pc, #4]	; (d68 <usart_write_buffer_job+0x1c>)
     d62:	4798      	blx	r3
     d64:	e7f6      	b.n	d54 <usart_write_buffer_job+0x8>
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	00000ca5 	.word	0x00000ca5

00000d6c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     d6c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     d6e:	2a00      	cmp	r2, #0
     d70:	d101      	bne.n	d76 <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
     d72:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     d74:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     d76:	7983      	ldrb	r3, [r0, #6]
     d78:	2b00      	cmp	r3, #0
     d7a:	d101      	bne.n	d80 <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
     d7c:	201c      	movs	r0, #28
     d7e:	e7f9      	b.n	d74 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     d80:	4b01      	ldr	r3, [pc, #4]	; (d88 <usart_read_buffer_job+0x1c>)
     d82:	4798      	blx	r3
     d84:	e7f6      	b.n	d74 <usart_read_buffer_job+0x8>
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	00000ce1 	.word	0x00000ce1

00000d8c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8e:	46c6      	mov	lr, r8
     d90:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     d92:	0080      	lsls	r0, r0, #2
     d94:	4b64      	ldr	r3, [pc, #400]	; (f28 <_usart_interrupt_handler+0x19c>)
     d96:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     d98:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     d9a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     d9c:	2b00      	cmp	r3, #0
     d9e:	d1fc      	bne.n	d9a <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     da0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     da2:	7da6      	ldrb	r6, [r4, #22]
     da4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     da6:	2330      	movs	r3, #48	; 0x30
     da8:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
     daa:	2231      	movs	r2, #49	; 0x31
     dac:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
     dae:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     db0:	07f3      	lsls	r3, r6, #31
     db2:	d525      	bpl.n	e00 <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
     db4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     db6:	b29b      	uxth	r3, r3
     db8:	2b00      	cmp	r3, #0
     dba:	d01f      	beq.n	dfc <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     dbc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     dbe:	780a      	ldrb	r2, [r1, #0]
     dc0:	b2d2      	uxtb	r2, r2
     dc2:	b293      	uxth	r3, r2
     dc4:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     dc6:	1c48      	adds	r0, r1, #1
     dc8:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     dca:	796b      	ldrb	r3, [r5, #5]
     dcc:	2b01      	cmp	r3, #1
     dce:	d00e      	beq.n	dee <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     dd0:	4643      	mov	r3, r8
     dd2:	05db      	lsls	r3, r3, #23
     dd4:	0ddb      	lsrs	r3, r3, #23
     dd6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     dd8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     dda:	3b01      	subs	r3, #1
     ddc:	b29b      	uxth	r3, r3
     dde:	85eb      	strh	r3, [r5, #46]	; 0x2e
     de0:	2b00      	cmp	r3, #0
     de2:	d10d      	bne.n	e00 <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     de4:	3301      	adds	r3, #1
     de6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     de8:	3301      	adds	r3, #1
     dea:	75a3      	strb	r3, [r4, #22]
     dec:	e008      	b.n	e00 <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     dee:	784b      	ldrb	r3, [r1, #1]
     df0:	021b      	lsls	r3, r3, #8
     df2:	4313      	orrs	r3, r2
     df4:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
     df6:	1c88      	adds	r0, r1, #2
     df8:	62a8      	str	r0, [r5, #40]	; 0x28
     dfa:	e7e9      	b.n	dd0 <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     dfc:	2301      	movs	r3, #1
     dfe:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     e00:	07b3      	lsls	r3, r6, #30
     e02:	d506      	bpl.n	e12 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     e04:	2302      	movs	r3, #2
     e06:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     e08:	2200      	movs	r2, #0
     e0a:	3331      	adds	r3, #49	; 0x31
     e0c:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     e0e:	07fb      	lsls	r3, r7, #31
     e10:	d41c      	bmi.n	e4c <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     e12:	0773      	lsls	r3, r6, #29
     e14:	d564      	bpl.n	ee0 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
     e16:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     e18:	b29b      	uxth	r3, r3
     e1a:	2b00      	cmp	r3, #0
     e1c:	d05e      	beq.n	edc <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e1e:	8b62      	ldrh	r2, [r4, #26]
     e20:	b2d2      	uxtb	r2, r2
     e22:	233f      	movs	r3, #63	; 0x3f
     e24:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     e26:	0711      	lsls	r1, r2, #28
     e28:	d501      	bpl.n	e2e <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     e2a:	2337      	movs	r3, #55	; 0x37
     e2c:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     e2e:	2b00      	cmp	r3, #0
     e30:	d031      	beq.n	e96 <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     e32:	079a      	lsls	r2, r3, #30
     e34:	d50e      	bpl.n	e54 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     e36:	221a      	movs	r2, #26
     e38:	2332      	movs	r3, #50	; 0x32
     e3a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     e3c:	3b30      	subs	r3, #48	; 0x30
     e3e:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     e40:	077b      	lsls	r3, r7, #29
     e42:	d54d      	bpl.n	ee0 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     e44:	0028      	movs	r0, r5
     e46:	696b      	ldr	r3, [r5, #20]
     e48:	4798      	blx	r3
     e4a:	e049      	b.n	ee0 <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     e4c:	0028      	movs	r0, r5
     e4e:	68eb      	ldr	r3, [r5, #12]
     e50:	4798      	blx	r3
     e52:	e7de      	b.n	e12 <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     e54:	075a      	lsls	r2, r3, #29
     e56:	d505      	bpl.n	e64 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     e58:	221e      	movs	r2, #30
     e5a:	2332      	movs	r3, #50	; 0x32
     e5c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     e5e:	3b2e      	subs	r3, #46	; 0x2e
     e60:	8363      	strh	r3, [r4, #26]
     e62:	e7ed      	b.n	e40 <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     e64:	07da      	lsls	r2, r3, #31
     e66:	d505      	bpl.n	e74 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     e68:	2213      	movs	r2, #19
     e6a:	2332      	movs	r3, #50	; 0x32
     e6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     e6e:	3b31      	subs	r3, #49	; 0x31
     e70:	8363      	strh	r3, [r4, #26]
     e72:	e7e5      	b.n	e40 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     e74:	06da      	lsls	r2, r3, #27
     e76:	d505      	bpl.n	e84 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     e78:	2242      	movs	r2, #66	; 0x42
     e7a:	2332      	movs	r3, #50	; 0x32
     e7c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     e7e:	3b22      	subs	r3, #34	; 0x22
     e80:	8363      	strh	r3, [r4, #26]
     e82:	e7dd      	b.n	e40 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     e84:	2220      	movs	r2, #32
     e86:	421a      	tst	r2, r3
     e88:	d0da      	beq.n	e40 <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     e8a:	3221      	adds	r2, #33	; 0x21
     e8c:	2332      	movs	r3, #50	; 0x32
     e8e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     e90:	3b12      	subs	r3, #18
     e92:	8363      	strh	r3, [r4, #26]
     e94:	e7d4      	b.n	e40 <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     e96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e98:	05db      	lsls	r3, r3, #23
     e9a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     e9c:	b2da      	uxtb	r2, r3
     e9e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     ea0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     ea2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     ea4:	1c51      	adds	r1, r2, #1
     ea6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ea8:	7969      	ldrb	r1, [r5, #5]
     eaa:	2901      	cmp	r1, #1
     eac:	d010      	beq.n	ed0 <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     eae:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     eb0:	3b01      	subs	r3, #1
     eb2:	b29b      	uxth	r3, r3
     eb4:	85ab      	strh	r3, [r5, #44]	; 0x2c
     eb6:	2b00      	cmp	r3, #0
     eb8:	d112      	bne.n	ee0 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     eba:	3304      	adds	r3, #4
     ebc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     ebe:	2200      	movs	r2, #0
     ec0:	332e      	adds	r3, #46	; 0x2e
     ec2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     ec4:	07bb      	lsls	r3, r7, #30
     ec6:	d50b      	bpl.n	ee0 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ec8:	0028      	movs	r0, r5
     eca:	692b      	ldr	r3, [r5, #16]
     ecc:	4798      	blx	r3
     ece:	e007      	b.n	ee0 <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ed0:	0a1b      	lsrs	r3, r3, #8
     ed2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     ed4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     ed6:	3301      	adds	r3, #1
     ed8:	626b      	str	r3, [r5, #36]	; 0x24
     eda:	e7e8      	b.n	eae <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     edc:	2304      	movs	r3, #4
     ede:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ee0:	06f3      	lsls	r3, r6, #27
     ee2:	d504      	bpl.n	eee <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     ee4:	2310      	movs	r3, #16
     ee6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     ee8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     eea:	06fb      	lsls	r3, r7, #27
     eec:	d410      	bmi.n	f10 <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     eee:	06b3      	lsls	r3, r6, #26
     ef0:	d504      	bpl.n	efc <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ef2:	2320      	movs	r3, #32
     ef4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ef6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     ef8:	073b      	lsls	r3, r7, #28
     efa:	d40d      	bmi.n	f18 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     efc:	0733      	lsls	r3, r6, #28
     efe:	d504      	bpl.n	f0a <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     f00:	2308      	movs	r3, #8
     f02:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     f04:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     f06:	06bb      	lsls	r3, r7, #26
     f08:	d40a      	bmi.n	f20 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     f0a:	bc04      	pop	{r2}
     f0c:	4690      	mov	r8, r2
     f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     f10:	0028      	movs	r0, r5
     f12:	69eb      	ldr	r3, [r5, #28]
     f14:	4798      	blx	r3
     f16:	e7ea      	b.n	eee <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     f18:	0028      	movs	r0, r5
     f1a:	69ab      	ldr	r3, [r5, #24]
     f1c:	4798      	blx	r3
     f1e:	e7ed      	b.n	efc <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     f20:	6a2b      	ldr	r3, [r5, #32]
     f22:	0028      	movs	r0, r5
     f24:	4798      	blx	r3
}
     f26:	e7f0      	b.n	f0a <_usart_interrupt_handler+0x17e>
     f28:	200000e8 	.word	0x200000e8

00000f2c <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f2c:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f2e:	2202      	movs	r2, #2
     f30:	761a      	strb	r2, [r3, #24]
}
     f32:	4770      	bx	lr

00000f34 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
=======
000002dc <spi40_write>:
     2dc:	b510      	push	{r4, lr}
     2de:	000a      	movs	r2, r1
     2e0:	0001      	movs	r1, r0
     2e2:	4802      	ldr	r0, [pc, #8]	; (2ec <spi40_write+0x10>)
     2e4:	4b02      	ldr	r3, [pc, #8]	; (2f0 <spi40_write+0x14>)
     2e6:	4798      	blx	r3
     2e8:	bd10      	pop	{r4, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	200000a4 	.word	0x200000a4
     2f0:	000018b9 	.word	0x000018b9

000002f4 <spi40_wr8>:
     2f4:	b510      	push	{r4, lr}
     2f6:	b082      	sub	sp, #8
     2f8:	466b      	mov	r3, sp
     2fa:	1ddc      	adds	r4, r3, #7
     2fc:	71d9      	strb	r1, [r3, #7]
     2fe:	2101      	movs	r1, #1
     300:	4b05      	ldr	r3, [pc, #20]	; (318 <spi40_wr8+0x24>)
     302:	4798      	blx	r3
     304:	2101      	movs	r1, #1
     306:	0020      	movs	r0, r4
     308:	4b04      	ldr	r3, [pc, #16]	; (31c <spi40_wr8+0x28>)
     30a:	4798      	blx	r3
     30c:	0004      	movs	r4, r0
     30e:	4b04      	ldr	r3, [pc, #16]	; (320 <spi40_wr8+0x2c>)
     310:	4798      	blx	r3
     312:	0020      	movs	r0, r4
     314:	b002      	add	sp, #8
     316:	bd10      	pop	{r4, pc}
     318:	00000219 	.word	0x00000219
     31c:	000002dd 	.word	0x000002dd
     320:	00000279 	.word	0x00000279

00000324 <spi40_autorange>:
     324:	b510      	push	{r4, lr}
     326:	2118      	movs	r1, #24
     328:	2033      	movs	r0, #51	; 0x33
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <spi40_autorange+0x18>)
     32c:	4798      	blx	r3
     32e:	2033      	movs	r0, #51	; 0x33
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <spi40_autorange+0x1c>)
     332:	4798      	blx	r3
     334:	06c3      	lsls	r3, r0, #27
     336:	d4fa      	bmi.n	32e <spi40_autorange+0xa>
     338:	bd10      	pop	{r4, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	000002f5 	.word	0x000002f5
     340:	000002ad 	.word	0x000002ad

00000344 <spi40_rx_init>:
     344:	b510      	push	{r4, lr}
     346:	2165      	movs	r1, #101	; 0x65
     348:	2002      	movs	r0, #2
     34a:	4cfe      	ldr	r4, [pc, #1016]	; (744 <spi40_rx_init+0x400>)
     34c:	47a0      	blx	r4
     34e:	2064      	movs	r0, #100	; 0x64
     350:	4bfd      	ldr	r3, [pc, #1012]	; (748 <spi40_rx_init+0x404>)
     352:	4798      	blx	r3
     354:	2108      	movs	r1, #8
     356:	2010      	movs	r0, #16
     358:	47a0      	blx	r4
     35a:	2100      	movs	r1, #0
     35c:	2011      	movs	r0, #17
     35e:	47a0      	blx	r4
     360:	2106      	movs	r1, #6
     362:	2012      	movs	r0, #18
     364:	47a0      	blx	r4
     366:	2102      	movs	r1, #2
     368:	2021      	movs	r0, #33	; 0x21
     36a:	47a0      	blx	r4
     36c:	2102      	movs	r1, #2
     36e:	2022      	movs	r0, #34	; 0x22
     370:	47a0      	blx	r4
     372:	2102      	movs	r1, #2
     374:	2023      	movs	r0, #35	; 0x23
     376:	47a0      	blx	r4
     378:	2102      	movs	r1, #2
     37a:	2025      	movs	r0, #37	; 0x25
     37c:	47a0      	blx	r4
     37e:	2102      	movs	r1, #2
     380:	2026      	movs	r0, #38	; 0x26
     382:	47a0      	blx	r4
     384:	2101      	movs	r1, #1
     386:	206e      	movs	r0, #110	; 0x6e
     388:	47a0      	blx	r4
     38a:	2106      	movs	r1, #6
     38c:	2080      	movs	r0, #128	; 0x80
     38e:	0040      	lsls	r0, r0, #1
     390:	47a0      	blx	r4
     392:	2166      	movs	r1, #102	; 0x66
     394:	2002      	movs	r0, #2
     396:	30ff      	adds	r0, #255	; 0xff
     398:	47a0      	blx	r4
     39a:	2105      	movs	r1, #5
     39c:	2081      	movs	r0, #129	; 0x81
     39e:	0040      	lsls	r0, r0, #1
     3a0:	47a0      	blx	r4
     3a2:	2105      	movs	r1, #5
     3a4:	2004      	movs	r0, #4
     3a6:	30ff      	adds	r0, #255	; 0xff
     3a8:	47a0      	blx	r4
     3aa:	2135      	movs	r1, #53	; 0x35
     3ac:	2082      	movs	r0, #130	; 0x82
     3ae:	0040      	lsls	r0, r0, #1
     3b0:	47a0      	blx	r4
     3b2:	2155      	movs	r1, #85	; 0x55
     3b4:	2006      	movs	r0, #6
     3b6:	30ff      	adds	r0, #255	; 0xff
     3b8:	47a0      	blx	r4
     3ba:	2100      	movs	r1, #0
     3bc:	2083      	movs	r0, #131	; 0x83
     3be:	0040      	lsls	r0, r0, #1
     3c0:	47a0      	blx	r4
     3c2:	2100      	movs	r1, #0
     3c4:	2008      	movs	r0, #8
     3c6:	30ff      	adds	r0, #255	; 0xff
     3c8:	47a0      	blx	r4
     3ca:	2100      	movs	r1, #0
     3cc:	2084      	movs	r0, #132	; 0x84
     3ce:	0040      	lsls	r0, r0, #1
     3d0:	47a0      	blx	r4
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	200a      	movs	r0, #10
     3d6:	30ff      	adds	r0, #255	; 0xff
     3d8:	47a0      	blx	r4
     3da:	2129      	movs	r1, #41	; 0x29
     3dc:	2085      	movs	r0, #133	; 0x85
     3de:	0040      	lsls	r0, r0, #1
     3e0:	47a0      	blx	r4
     3e2:	2189      	movs	r1, #137	; 0x89
     3e4:	200c      	movs	r0, #12
     3e6:	30ff      	adds	r0, #255	; 0xff
     3e8:	47a0      	blx	r4
     3ea:	2122      	movs	r1, #34	; 0x22
     3ec:	2086      	movs	r0, #134	; 0x86
     3ee:	0040      	lsls	r0, r0, #1
     3f0:	47a0      	blx	r4
     3f2:	21c0      	movs	r1, #192	; 0xc0
     3f4:	200e      	movs	r0, #14
     3f6:	30ff      	adds	r0, #255	; 0xff
     3f8:	47a0      	blx	r4
     3fa:	21dd      	movs	r1, #221	; 0xdd
     3fc:	2087      	movs	r0, #135	; 0x87
     3fe:	0040      	lsls	r0, r0, #1
     400:	47a0      	blx	r4
     402:	2140      	movs	r1, #64	; 0x40
     404:	2010      	movs	r0, #16
     406:	30ff      	adds	r0, #255	; 0xff
     408:	47a0      	blx	r4
     40a:	2100      	movs	r1, #0
     40c:	2016      	movs	r0, #22
     40e:	30ff      	adds	r0, #255	; 0xff
     410:	47a0      	blx	r4
     412:	21f4      	movs	r1, #244	; 0xf4
     414:	2018      	movs	r0, #24
     416:	30ff      	adds	r0, #255	; 0xff
     418:	47a0      	blx	r4
     41a:	21e8      	movs	r1, #232	; 0xe8
     41c:	2090      	movs	r0, #144	; 0x90
     41e:	0040      	lsls	r0, r0, #1
     420:	47a0      	blx	r4
     422:	218f      	movs	r1, #143	; 0x8f
     424:	2022      	movs	r0, #34	; 0x22
     426:	30ff      	adds	r0, #255	; 0xff
     428:	47a0      	blx	r4
     42a:	2100      	movs	r1, #0
     42c:	2091      	movs	r0, #145	; 0x91
     42e:	0040      	lsls	r0, r0, #1
     430:	47a0      	blx	r4
     432:	21ad      	movs	r1, #173	; 0xad
     434:	2092      	movs	r0, #146	; 0x92
     436:	0040      	lsls	r0, r0, #1
     438:	47a0      	blx	r4
     43a:	21a7      	movs	r1, #167	; 0xa7
     43c:	2026      	movs	r0, #38	; 0x26
     43e:	30ff      	adds	r0, #255	; 0xff
     440:	47a0      	blx	r4
     442:	21c3      	movs	r1, #195	; 0xc3
     444:	2093      	movs	r0, #147	; 0x93
     446:	0040      	lsls	r0, r0, #1
     448:	47a0      	blx	r4
     44a:	210f      	movs	r1, #15
     44c:	2028      	movs	r0, #40	; 0x28
     44e:	30ff      	adds	r0, #255	; 0xff
     450:	47a0      	blx	r4
     452:	211f      	movs	r1, #31
     454:	2094      	movs	r0, #148	; 0x94
     456:	0040      	lsls	r0, r0, #1
     458:	47a0      	blx	r4
     45a:	210a      	movs	r1, #10
     45c:	202a      	movs	r0, #42	; 0x2a
     45e:	30ff      	adds	r0, #255	; 0xff
     460:	47a0      	blx	r4
     462:	210a      	movs	r1, #10
     464:	2095      	movs	r0, #149	; 0x95
     466:	0040      	lsls	r0, r0, #1
     468:	47a0      	blx	r4
     46a:	2101      	movs	r1, #1
     46c:	202c      	movs	r0, #44	; 0x2c
     46e:	30ff      	adds	r0, #255	; 0xff
     470:	47a0      	blx	r4
     472:	2100      	movs	r1, #0
     474:	2096      	movs	r0, #150	; 0x96
     476:	0040      	lsls	r0, r0, #1
     478:	47a0      	blx	r4
     47a:	2100      	movs	r1, #0
     47c:	202e      	movs	r0, #46	; 0x2e
     47e:	30ff      	adds	r0, #255	; 0xff
     480:	47a0      	blx	r4
     482:	2116      	movs	r1, #22
     484:	2097      	movs	r0, #151	; 0x97
     486:	0040      	lsls	r0, r0, #1
     488:	47a0      	blx	r4
     48a:	2100      	movs	r1, #0
     48c:	2030      	movs	r0, #48	; 0x30
     48e:	30ff      	adds	r0, #255	; 0xff
     490:	47a0      	blx	r4
     492:	21e8      	movs	r1, #232	; 0xe8
     494:	2098      	movs	r0, #152	; 0x98
     496:	0040      	lsls	r0, r0, #1
     498:	47a0      	blx	r4
     49a:	218f      	movs	r1, #143	; 0x8f
     49c:	2032      	movs	r0, #50	; 0x32
     49e:	30ff      	adds	r0, #255	; 0xff
     4a0:	47a0      	blx	r4
     4a2:	2100      	movs	r1, #0
     4a4:	2099      	movs	r0, #153	; 0x99
     4a6:	0040      	lsls	r0, r0, #1
     4a8:	47a0      	blx	r4
     4aa:	2100      	movs	r1, #0
     4ac:	2034      	movs	r0, #52	; 0x34
     4ae:	30ff      	adds	r0, #255	; 0xff
     4b0:	47a0      	blx	r4
     4b2:	21ab      	movs	r1, #171	; 0xab
     4b4:	209a      	movs	r0, #154	; 0x9a
     4b6:	0040      	lsls	r0, r0, #1
     4b8:	47a0      	blx	r4
     4ba:	21a6      	movs	r1, #166	; 0xa6
     4bc:	2036      	movs	r0, #54	; 0x36
     4be:	30ff      	adds	r0, #255	; 0xff
     4c0:	47a0      	blx	r4
     4c2:	21c3      	movs	r1, #195	; 0xc3
     4c4:	209b      	movs	r0, #155	; 0x9b
     4c6:	0040      	lsls	r0, r0, #1
     4c8:	47a0      	blx	r4
     4ca:	210f      	movs	r1, #15
     4cc:	2038      	movs	r0, #56	; 0x38
     4ce:	30ff      	adds	r0, #255	; 0xff
     4d0:	47a0      	blx	r4
     4d2:	211f      	movs	r1, #31
     4d4:	209c      	movs	r0, #156	; 0x9c
     4d6:	0040      	lsls	r0, r0, #1
     4d8:	47a0      	blx	r4
     4da:	210a      	movs	r1, #10
     4dc:	203a      	movs	r0, #58	; 0x3a
     4de:	30ff      	adds	r0, #255	; 0xff
     4e0:	47a0      	blx	r4
     4e2:	210a      	movs	r1, #10
     4e4:	209d      	movs	r0, #157	; 0x9d
     4e6:	0040      	lsls	r0, r0, #1
     4e8:	47a0      	blx	r4
     4ea:	2101      	movs	r1, #1
     4ec:	203c      	movs	r0, #60	; 0x3c
     4ee:	30ff      	adds	r0, #255	; 0xff
     4f0:	47a0      	blx	r4
     4f2:	2100      	movs	r1, #0
     4f4:	209e      	movs	r0, #158	; 0x9e
     4f6:	0040      	lsls	r0, r0, #1
     4f8:	47a0      	blx	r4
     4fa:	214b      	movs	r1, #75	; 0x4b
     4fc:	203e      	movs	r0, #62	; 0x3e
     4fe:	30ff      	adds	r0, #255	; 0xff
     500:	47a0      	blx	r4
     502:	2116      	movs	r1, #22
     504:	209f      	movs	r0, #159	; 0x9f
     506:	0040      	lsls	r0, r0, #1
     508:	47a0      	blx	r4
     50a:	2100      	movs	r1, #0
     50c:	2040      	movs	r0, #64	; 0x40
     50e:	30ff      	adds	r0, #255	; 0xff
     510:	47a0      	blx	r4
     512:	21ff      	movs	r1, #255	; 0xff
     514:	20a8      	movs	r0, #168	; 0xa8
     516:	0040      	lsls	r0, r0, #1
     518:	47a0      	blx	r4
     51a:	218f      	movs	r1, #143	; 0x8f
     51c:	2052      	movs	r0, #82	; 0x52
     51e:	30ff      	adds	r0, #255	; 0xff
     520:	47a0      	blx	r4
     522:	2100      	movs	r1, #0
     524:	20a9      	movs	r0, #169	; 0xa9
     526:	0040      	lsls	r0, r0, #1
     528:	47a0      	blx	r4
     52a:	2100      	movs	r1, #0
     52c:	2054      	movs	r0, #84	; 0x54
     52e:	30ff      	adds	r0, #255	; 0xff
     530:	47a0      	blx	r4
     532:	21aa      	movs	r1, #170	; 0xaa
     534:	20aa      	movs	r0, #170	; 0xaa
     536:	0040      	lsls	r0, r0, #1
     538:	47a0      	blx	r4
     53a:	21a5      	movs	r1, #165	; 0xa5
     53c:	2056      	movs	r0, #86	; 0x56
     53e:	30ff      	adds	r0, #255	; 0xff
     540:	47a0      	blx	r4
     542:	21c3      	movs	r1, #195	; 0xc3
     544:	20ab      	movs	r0, #171	; 0xab
     546:	0040      	lsls	r0, r0, #1
     548:	47a0      	blx	r4
     54a:	210f      	movs	r1, #15
     54c:	2058      	movs	r0, #88	; 0x58
     54e:	30ff      	adds	r0, #255	; 0xff
     550:	47a0      	blx	r4
     552:	211f      	movs	r1, #31
     554:	20ac      	movs	r0, #172	; 0xac
     556:	0040      	lsls	r0, r0, #1
     558:	47a0      	blx	r4
     55a:	210d      	movs	r1, #13
     55c:	205a      	movs	r0, #90	; 0x5a
     55e:	30ff      	adds	r0, #255	; 0xff
     560:	47a0      	blx	r4
     562:	210d      	movs	r1, #13
     564:	20ad      	movs	r0, #173	; 0xad
     566:	0040      	lsls	r0, r0, #1
     568:	47a0      	blx	r4
     56a:	2101      	movs	r1, #1
     56c:	205c      	movs	r0, #92	; 0x5c
     56e:	30ff      	adds	r0, #255	; 0xff
     570:	47a0      	blx	r4
     572:	2100      	movs	r1, #0
     574:	20ae      	movs	r0, #174	; 0xae
     576:	0040      	lsls	r0, r0, #1
     578:	47a0      	blx	r4
     57a:	214b      	movs	r1, #75	; 0x4b
     57c:	205e      	movs	r0, #94	; 0x5e
     57e:	30ff      	adds	r0, #255	; 0xff
     580:	47a0      	blx	r4
     582:	2116      	movs	r1, #22
     584:	20af      	movs	r0, #175	; 0xaf
     586:	0040      	lsls	r0, r0, #1
     588:	47a0      	blx	r4
     58a:	2100      	movs	r1, #0
     58c:	2060      	movs	r0, #96	; 0x60
     58e:	30ff      	adds	r0, #255	; 0xff
     590:	47a0      	blx	r4
     592:	2100      	movs	r1, #0
     594:	20b0      	movs	r0, #176	; 0xb0
     596:	0040      	lsls	r0, r0, #1
     598:	47a0      	blx	r4
     59a:	2100      	movs	r1, #0
     59c:	2062      	movs	r0, #98	; 0x62
     59e:	30ff      	adds	r0, #255	; 0xff
     5a0:	47a0      	blx	r4
     5a2:	2102      	movs	r1, #2
     5a4:	20b1      	movs	r0, #177	; 0xb1
     5a6:	0040      	lsls	r0, r0, #1
     5a8:	47a0      	blx	r4
     5aa:	210c      	movs	r1, #12
     5ac:	2064      	movs	r0, #100	; 0x64
     5ae:	30ff      	adds	r0, #255	; 0xff
     5b0:	47a0      	blx	r4
     5b2:	2105      	movs	r1, #5
     5b4:	20b2      	movs	r0, #178	; 0xb2
     5b6:	0040      	lsls	r0, r0, #1
     5b8:	47a0      	blx	r4
     5ba:	2100      	movs	r1, #0
     5bc:	2066      	movs	r0, #102	; 0x66
     5be:	30ff      	adds	r0, #255	; 0xff
     5c0:	47a0      	blx	r4
     5c2:	2104      	movs	r1, #4
     5c4:	20b3      	movs	r0, #179	; 0xb3
     5c6:	0040      	lsls	r0, r0, #1
     5c8:	47a0      	blx	r4
     5ca:	21ea      	movs	r1, #234	; 0xea
     5cc:	2068      	movs	r0, #104	; 0x68
     5ce:	30ff      	adds	r0, #255	; 0xff
     5d0:	47a0      	blx	r4
     5d2:	2102      	movs	r1, #2
     5d4:	20b5      	movs	r0, #181	; 0xb5
     5d6:	0040      	lsls	r0, r0, #1
     5d8:	47a0      	blx	r4
     5da:	2107      	movs	r1, #7
     5dc:	206c      	movs	r0, #108	; 0x6c
     5de:	30ff      	adds	r0, #255	; 0xff
     5e0:	47a0      	blx	r4
     5e2:	218a      	movs	r1, #138	; 0x8a
     5e4:	20c0      	movs	r0, #192	; 0xc0
     5e6:	0040      	lsls	r0, r0, #1
     5e8:	47a0      	blx	r4
     5ea:	2103      	movs	r1, #3
     5ec:	2084      	movs	r0, #132	; 0x84
     5ee:	30ff      	adds	r0, #255	; 0xff
     5f0:	47a0      	blx	r4
     5f2:	210f      	movs	r1, #15
     5f4:	20c4      	movs	r0, #196	; 0xc4
     5f6:	0040      	lsls	r0, r0, #1
     5f8:	47a0      	blx	r4
     5fa:	2177      	movs	r1, #119	; 0x77
     5fc:	208a      	movs	r0, #138	; 0x8a
     5fe:	30ff      	adds	r0, #255	; 0xff
     600:	47a0      	blx	r4
     602:	2180      	movs	r1, #128	; 0x80
     604:	2080      	movs	r0, #128	; 0x80
     606:	0080      	lsls	r0, r0, #2
     608:	47a0      	blx	r4
     60a:	2100      	movs	r1, #0
     60c:	484f      	ldr	r0, [pc, #316]	; (74c <spi40_rx_init+0x408>)
     60e:	47a0      	blx	r4
     610:	2104      	movs	r1, #4
     612:	484f      	ldr	r0, [pc, #316]	; (750 <spi40_rx_init+0x40c>)
     614:	47a0      	blx	r4
     616:	21c8      	movs	r1, #200	; 0xc8
     618:	484e      	ldr	r0, [pc, #312]	; (754 <spi40_rx_init+0x410>)
     61a:	47a0      	blx	r4
     61c:	21aa      	movs	r1, #170	; 0xaa
     61e:	2084      	movs	r0, #132	; 0x84
     620:	0080      	lsls	r0, r0, #2
     622:	47a0      	blx	r4
     624:	21cc      	movs	r1, #204	; 0xcc
     626:	484c      	ldr	r0, [pc, #304]	; (758 <spi40_rx_init+0x414>)
     628:	47a0      	blx	r4
     62a:	21aa      	movs	r1, #170	; 0xaa
     62c:	484b      	ldr	r0, [pc, #300]	; (75c <spi40_rx_init+0x418>)
     62e:	47a0      	blx	r4
     630:	21cc      	movs	r1, #204	; 0xcc
     632:	484b      	ldr	r0, [pc, #300]	; (760 <spi40_rx_init+0x41c>)
     634:	47a0      	blx	r4
     636:	219f      	movs	r1, #159	; 0x9f
     638:	2085      	movs	r0, #133	; 0x85
     63a:	0080      	lsls	r0, r0, #2
     63c:	47a0      	blx	r4
     63e:	211f      	movs	r1, #31
     640:	4848      	ldr	r0, [pc, #288]	; (764 <spi40_rx_init+0x420>)
     642:	47a0      	blx	r4
     644:	2155      	movs	r1, #85	; 0x55
     646:	2086      	movs	r0, #134	; 0x86
     648:	0080      	lsls	r0, r0, #2
     64a:	47a0      	blx	r4
     64c:	2155      	movs	r1, #85	; 0x55
     64e:	4846      	ldr	r0, [pc, #280]	; (768 <spi40_rx_init+0x424>)
     650:	47a0      	blx	r4
     652:	218a      	movs	r1, #138	; 0x8a
     654:	2087      	movs	r0, #135	; 0x87
     656:	0080      	lsls	r0, r0, #2
     658:	47a0      	blx	r4
     65a:	210a      	movs	r1, #10
     65c:	4843      	ldr	r0, [pc, #268]	; (76c <spi40_rx_init+0x428>)
     65e:	47a0      	blx	r4
     660:	2132      	movs	r1, #50	; 0x32
     662:	2088      	movs	r0, #136	; 0x88
     664:	0080      	lsls	r0, r0, #2
     666:	47a0      	blx	r4
     668:	2114      	movs	r1, #20
     66a:	4841      	ldr	r0, [pc, #260]	; (770 <spi40_rx_init+0x42c>)
     66c:	47a0      	blx	r4
     66e:	2132      	movs	r1, #50	; 0x32
     670:	4840      	ldr	r0, [pc, #256]	; (774 <spi40_rx_init+0x430>)
     672:	47a0      	blx	r4
     674:	2114      	movs	r1, #20
     676:	2089      	movs	r0, #137	; 0x89
     678:	0080      	lsls	r0, r0, #2
     67a:	47a0      	blx	r4
     67c:	2100      	movs	r1, #0
     67e:	483e      	ldr	r0, [pc, #248]	; (778 <spi40_rx_init+0x434>)
     680:	47a0      	blx	r4
     682:	2173      	movs	r1, #115	; 0x73
     684:	483d      	ldr	r0, [pc, #244]	; (77c <spi40_rx_init+0x438>)
     686:	47a0      	blx	r4
     688:	2103      	movs	r1, #3
     68a:	208a      	movs	r0, #138	; 0x8a
     68c:	0080      	lsls	r0, r0, #2
     68e:	47a0      	blx	r4
     690:	2135      	movs	r1, #53	; 0x35
     692:	483b      	ldr	r0, [pc, #236]	; (780 <spi40_rx_init+0x43c>)
     694:	47a0      	blx	r4
     696:	2184      	movs	r1, #132	; 0x84
     698:	483a      	ldr	r0, [pc, #232]	; (784 <spi40_rx_init+0x440>)
     69a:	47a0      	blx	r4
     69c:	2184      	movs	r1, #132	; 0x84
     69e:	483a      	ldr	r0, [pc, #232]	; (788 <spi40_rx_init+0x444>)
     6a0:	47a0      	blx	r4
     6a2:	210d      	movs	r1, #13
     6a4:	208c      	movs	r0, #140	; 0x8c
     6a6:	0080      	lsls	r0, r0, #2
     6a8:	47a0      	blx	r4
     6aa:	2120      	movs	r1, #32
     6ac:	4837      	ldr	r0, [pc, #220]	; (78c <spi40_rx_init+0x448>)
     6ae:	47a0      	blx	r4
     6b0:	2100      	movs	r1, #0
     6b2:	20cc      	movs	r0, #204	; 0xcc
     6b4:	0080      	lsls	r0, r0, #2
     6b6:	47a0      	blx	r4
     6b8:	2100      	movs	r1, #0
     6ba:	4835      	ldr	r0, [pc, #212]	; (790 <spi40_rx_init+0x44c>)
     6bc:	47a0      	blx	r4
     6be:	2100      	movs	r1, #0
     6c0:	4834      	ldr	r0, [pc, #208]	; (794 <spi40_rx_init+0x450>)
     6c2:	47a0      	blx	r4
     6c4:	2103      	movs	r1, #3
     6c6:	4834      	ldr	r0, [pc, #208]	; (798 <spi40_rx_init+0x454>)
     6c8:	47a0      	blx	r4
     6ca:	2103      	movs	r1, #3
     6cc:	20f1      	movs	r0, #241	; 0xf1
     6ce:	0100      	lsls	r0, r0, #4
     6d0:	47a0      	blx	r4
     6d2:	2107      	movs	r1, #7
     6d4:	4831      	ldr	r0, [pc, #196]	; (79c <spi40_rx_init+0x458>)
     6d6:	47a0      	blx	r4
     6d8:	2107      	movs	r1, #7
     6da:	4831      	ldr	r0, [pc, #196]	; (7a0 <spi40_rx_init+0x45c>)
     6dc:	47a0      	blx	r4
     6de:	2168      	movs	r1, #104	; 0x68
     6e0:	4830      	ldr	r0, [pc, #192]	; (7a4 <spi40_rx_init+0x460>)
     6e2:	47a0      	blx	r4
     6e4:	21ff      	movs	r1, #255	; 0xff
     6e6:	4830      	ldr	r0, [pc, #192]	; (7a8 <spi40_rx_init+0x464>)
     6e8:	47a0      	blx	r4
     6ea:	2184      	movs	r1, #132	; 0x84
     6ec:	482f      	ldr	r0, [pc, #188]	; (7ac <spi40_rx_init+0x468>)
     6ee:	47a0      	blx	r4
     6f0:	2198      	movs	r1, #152	; 0x98
     6f2:	482f      	ldr	r0, [pc, #188]	; (7b0 <spi40_rx_init+0x46c>)
     6f4:	47a0      	blx	r4
     6f6:	2108      	movs	r1, #8
     6f8:	482e      	ldr	r0, [pc, #184]	; (7b4 <spi40_rx_init+0x470>)
     6fa:	47a0      	blx	r4
     6fc:	2110      	movs	r1, #16
     6fe:	482e      	ldr	r0, [pc, #184]	; (7b8 <spi40_rx_init+0x474>)
     700:	47a0      	blx	r4
     702:	2125      	movs	r1, #37	; 0x25
     704:	482d      	ldr	r0, [pc, #180]	; (7bc <spi40_rx_init+0x478>)
     706:	47a0      	blx	r4
     708:	210a      	movs	r1, #10
     70a:	2030      	movs	r0, #48	; 0x30
     70c:	47a0      	blx	r4
     70e:	2110      	movs	r1, #16
     710:	2031      	movs	r0, #49	; 0x31
     712:	47a0      	blx	r4
     714:	2130      	movs	r1, #48	; 0x30
     716:	2032      	movs	r0, #50	; 0x32
     718:	47a0      	blx	r4
     71a:	2113      	movs	r1, #19
     71c:	20c2      	movs	r0, #194	; 0xc2
     71e:	0040      	lsls	r0, r0, #1
     720:	47a0      	blx	r4
     722:	210f      	movs	r1, #15
     724:	20f0      	movs	r0, #240	; 0xf0
     726:	0100      	lsls	r0, r0, #4
     728:	47a0      	blx	r4
     72a:	2106      	movs	r1, #6
     72c:	4824      	ldr	r0, [pc, #144]	; (7c0 <spi40_rx_init+0x47c>)
     72e:	47a0      	blx	r4
     730:	2101      	movs	r1, #1
     732:	2037      	movs	r0, #55	; 0x37
     734:	47a0      	blx	r4
     736:	2100      	movs	r1, #0
     738:	2036      	movs	r0, #54	; 0x36
     73a:	47a0      	blx	r4
     73c:	2190      	movs	r1, #144	; 0x90
     73e:	2035      	movs	r0, #53	; 0x35
     740:	47a0      	blx	r4
     742:	e03f      	b.n	7c4 <spi40_rx_init+0x480>
     744:	000002f5 	.word	0x000002f5
     748:	00000a49 	.word	0x00000a49
     74c:	00000201 	.word	0x00000201
     750:	00000202 	.word	0x00000202
     754:	00000203 	.word	0x00000203
     758:	00000211 	.word	0x00000211
     75c:	00000212 	.word	0x00000212
     760:	00000213 	.word	0x00000213
     764:	00000216 	.word	0x00000216
     768:	00000219 	.word	0x00000219
     76c:	0000021e 	.word	0x0000021e
     770:	00000221 	.word	0x00000221
     774:	00000223 	.word	0x00000223
     778:	00000225 	.word	0x00000225
     77c:	00000226 	.word	0x00000226
     780:	0000022a 	.word	0x0000022a
     784:	0000022d 	.word	0x0000022d
     788:	0000022f 	.word	0x0000022f
     78c:	00000233 	.word	0x00000233
     790:	00000331 	.word	0x00000331
     794:	00000332 	.word	0x00000332
     798:	00000f0d 	.word	0x00000f0d
     79c:	00000f11 	.word	0x00000f11
     7a0:	00000f1c 	.word	0x00000f1c
     7a4:	00000f21 	.word	0x00000f21
     7a8:	00000f22 	.word	0x00000f22
     7ac:	00000f23 	.word	0x00000f23
     7b0:	00000f26 	.word	0x00000f26
     7b4:	00000f34 	.word	0x00000f34
     7b8:	00000f35 	.word	0x00000f35
     7bc:	00000f44 	.word	0x00000f44
     7c0:	00000f18 	.word	0x00000f18
     7c4:	210a      	movs	r1, #10
     7c6:	2034      	movs	r0, #52	; 0x34
     7c8:	47a0      	blx	r4
     7ca:	2100      	movs	r1, #0
     7cc:	480f      	ldr	r0, [pc, #60]	; (80c <spi40_rx_init+0x4c8>)
     7ce:	47a0      	blx	r4
     7d0:	2100      	movs	r1, #0
     7d2:	480f      	ldr	r0, [pc, #60]	; (810 <spi40_rx_init+0x4cc>)
     7d4:	47a0      	blx	r4
     7d6:	2104      	movs	r1, #4
     7d8:	480e      	ldr	r0, [pc, #56]	; (814 <spi40_rx_init+0x4d0>)
     7da:	47a0      	blx	r4
     7dc:	201d      	movs	r0, #29
     7de:	4b0e      	ldr	r3, [pc, #56]	; (818 <spi40_rx_init+0x4d4>)
     7e0:	4798      	blx	r3
     7e2:	07c3      	lsls	r3, r0, #31
     7e4:	d5fa      	bpl.n	7dc <spi40_rx_init+0x498>
     7e6:	4b0d      	ldr	r3, [pc, #52]	; (81c <spi40_rx_init+0x4d8>)
     7e8:	4798      	blx	r3
     7ea:	2100      	movs	r1, #0
     7ec:	480c      	ldr	r0, [pc, #48]	; (820 <spi40_rx_init+0x4dc>)
     7ee:	4c0d      	ldr	r4, [pc, #52]	; (824 <spi40_rx_init+0x4e0>)
     7f0:	47a0      	blx	r4
     7f2:	2110      	movs	r1, #16
     7f4:	480c      	ldr	r0, [pc, #48]	; (828 <spi40_rx_init+0x4e4>)
     7f6:	47a0      	blx	r4
     7f8:	2169      	movs	r1, #105	; 0x69
     7fa:	2002      	movs	r0, #2
     7fc:	47a0      	blx	r4
     7fe:	2064      	movs	r0, #100	; 0x64
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <spi40_rx_init+0x4e8>)
     802:	4798      	blx	r3
     804:	2103      	movs	r1, #3
     806:	2028      	movs	r0, #40	; 0x28
     808:	47a0      	blx	r4
     80a:	bd10      	pop	{r4, pc}
     80c:	00000227 	.word	0x00000227
     810:	00000229 	.word	0x00000229
     814:	00000231 	.word	0x00000231
     818:	000002ad 	.word	0x000002ad
     81c:	00000325 	.word	0x00000325
     820:	00000233 	.word	0x00000233
     824:	000002f5 	.word	0x000002f5
     828:	00000232 	.word	0x00000232
     82c:	00000a49 	.word	0x00000a49

00000830 <spi40_rssi>:
     830:	b510      	push	{r4, lr}
     832:	2040      	movs	r0, #64	; 0x40
     834:	4b01      	ldr	r3, [pc, #4]	; (83c <spi40_rssi+0xc>)
     836:	4798      	blx	r3
     838:	bd10      	pop	{r4, pc}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	000002ad 	.word	0x000002ad

00000840 <uartfiber_parse_cmd>:
     840:	b500      	push	{lr}
     842:	b083      	sub	sp, #12
     844:	284d      	cmp	r0, #77	; 0x4d
     846:	d013      	beq.n	870 <uartfiber_parse_cmd+0x30>
     848:	2852      	cmp	r0, #82	; 0x52
     84a:	d01f      	beq.n	88c <uartfiber_parse_cmd+0x4c>
     84c:	2841      	cmp	r0, #65	; 0x41
     84e:	d001      	beq.n	854 <uartfiber_parse_cmd+0x14>
     850:	b003      	add	sp, #12
     852:	bd00      	pop	{pc}
     854:	4b14      	ldr	r3, [pc, #80]	; (8a8 <uartfiber_parse_cmd+0x68>)
     856:	681b      	ldr	r3, [r3, #0]
     858:	885b      	ldrh	r3, [r3, #2]
     85a:	b21b      	sxth	r3, r3
     85c:	aa01      	add	r2, sp, #4
     85e:	8013      	strh	r3, [r2, #0]
     860:	2202      	movs	r2, #2
     862:	a901      	add	r1, sp, #4
     864:	4811      	ldr	r0, [pc, #68]	; (8ac <uartfiber_parse_cmd+0x6c>)
     866:	4b12      	ldr	r3, [pc, #72]	; (8b0 <uartfiber_parse_cmd+0x70>)
     868:	4798      	blx	r3
     86a:	2805      	cmp	r0, #5
     86c:	d1f8      	bne.n	860 <uartfiber_parse_cmd+0x20>
     86e:	e7ef      	b.n	850 <uartfiber_parse_cmd+0x10>
     870:	4b0d      	ldr	r3, [pc, #52]	; (8a8 <uartfiber_parse_cmd+0x68>)
     872:	681b      	ldr	r3, [r3, #0]
     874:	889b      	ldrh	r3, [r3, #4]
     876:	b21b      	sxth	r3, r3
     878:	aa01      	add	r2, sp, #4
     87a:	8013      	strh	r3, [r2, #0]
     87c:	2202      	movs	r2, #2
     87e:	a901      	add	r1, sp, #4
     880:	480a      	ldr	r0, [pc, #40]	; (8ac <uartfiber_parse_cmd+0x6c>)
     882:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <uartfiber_parse_cmd+0x70>)
     884:	4798      	blx	r3
     886:	2805      	cmp	r0, #5
     888:	d1f8      	bne.n	87c <uartfiber_parse_cmd+0x3c>
     88a:	e7e1      	b.n	850 <uartfiber_parse_cmd+0x10>
     88c:	4b06      	ldr	r3, [pc, #24]	; (8a8 <uartfiber_parse_cmd+0x68>)
     88e:	681b      	ldr	r3, [r3, #0]
     890:	88db      	ldrh	r3, [r3, #6]
     892:	b21b      	sxth	r3, r3
     894:	aa01      	add	r2, sp, #4
     896:	8013      	strh	r3, [r2, #0]
     898:	2202      	movs	r2, #2
     89a:	a901      	add	r1, sp, #4
     89c:	4803      	ldr	r0, [pc, #12]	; (8ac <uartfiber_parse_cmd+0x6c>)
     89e:	4b04      	ldr	r3, [pc, #16]	; (8b0 <uartfiber_parse_cmd+0x70>)
     8a0:	4798      	blx	r3
     8a2:	2805      	cmp	r0, #5
     8a4:	d1f8      	bne.n	898 <uartfiber_parse_cmd+0x58>
     8a6:	e7d3      	b.n	850 <uartfiber_parse_cmd+0x10>
     8a8:	20000060 	.word	0x20000060
     8ac:	2000002c 	.word	0x2000002c
     8b0:	000012a1 	.word	0x000012a1

000008b4 <uartfiber_read_callback>:
     8b4:	b510      	push	{r4, lr}
     8b6:	4c05      	ldr	r4, [pc, #20]	; (8cc <uartfiber_read_callback+0x18>)
     8b8:	7820      	ldrb	r0, [r4, #0]
     8ba:	4b05      	ldr	r3, [pc, #20]	; (8d0 <uartfiber_read_callback+0x1c>)
     8bc:	4798      	blx	r3
     8be:	2201      	movs	r2, #1
     8c0:	0021      	movs	r1, r4
     8c2:	4804      	ldr	r0, [pc, #16]	; (8d4 <uartfiber_read_callback+0x20>)
     8c4:	4b04      	ldr	r3, [pc, #16]	; (8d8 <uartfiber_read_callback+0x24>)
     8c6:	4798      	blx	r3
     8c8:	bd10      	pop	{r4, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	20000064 	.word	0x20000064
     8d0:	00000841 	.word	0x00000841
     8d4:	2000002c 	.word	0x2000002c
     8d8:	000012c1 	.word	0x000012c1

000008dc <configure_uartfiber_callbacks>:
     8dc:	b510      	push	{r4, lr}
     8de:	4c08      	ldr	r4, [pc, #32]	; (900 <configure_uartfiber_callbacks+0x24>)
     8e0:	2201      	movs	r2, #1
     8e2:	4908      	ldr	r1, [pc, #32]	; (904 <configure_uartfiber_callbacks+0x28>)
     8e4:	0020      	movs	r0, r4
     8e6:	4b08      	ldr	r3, [pc, #32]	; (908 <configure_uartfiber_callbacks+0x2c>)
     8e8:	4798      	blx	r3
     8ea:	2231      	movs	r2, #49	; 0x31
     8ec:	5ca3      	ldrb	r3, [r4, r2]
     8ee:	2102      	movs	r1, #2
     8f0:	430b      	orrs	r3, r1
     8f2:	54a3      	strb	r3, [r4, r2]
     8f4:	3a30      	subs	r2, #48	; 0x30
     8f6:	4905      	ldr	r1, [pc, #20]	; (90c <configure_uartfiber_callbacks+0x30>)
     8f8:	0020      	movs	r0, r4
     8fa:	4b05      	ldr	r3, [pc, #20]	; (910 <configure_uartfiber_callbacks+0x34>)
     8fc:	4798      	blx	r3
     8fe:	bd10      	pop	{r4, pc}
     900:	2000002c 	.word	0x2000002c
     904:	000008b5 	.word	0x000008b5
     908:	00001289 	.word	0x00001289
     90c:	20000064 	.word	0x20000064
     910:	000012c1 	.word	0x000012c1

00000914 <uartfiber_init>:
     914:	b510      	push	{r4, lr}
     916:	b090      	sub	sp, #64	; 0x40
     918:	2380      	movs	r3, #128	; 0x80
     91a:	05db      	lsls	r3, r3, #23
     91c:	9300      	str	r3, [sp, #0]
     91e:	2300      	movs	r3, #0
     920:	9301      	str	r3, [sp, #4]
     922:	22ff      	movs	r2, #255	; 0xff
     924:	4669      	mov	r1, sp
     926:	810a      	strh	r2, [r1, #8]
     928:	2200      	movs	r2, #0
     92a:	728b      	strb	r3, [r1, #10]
     92c:	72cb      	strb	r3, [r1, #11]
     92e:	2101      	movs	r1, #1
     930:	2024      	movs	r0, #36	; 0x24
     932:	466c      	mov	r4, sp
     934:	5421      	strb	r1, [r4, r0]
     936:	3001      	adds	r0, #1
     938:	5421      	strb	r1, [r4, r0]
     93a:	3125      	adds	r1, #37	; 0x25
     93c:	5463      	strb	r3, [r4, r1]
     93e:	3101      	adds	r1, #1
     940:	5463      	strb	r3, [r4, r1]
     942:	930a      	str	r3, [sp, #40]	; 0x28
     944:	3105      	adds	r1, #5
     946:	5463      	strb	r3, [r4, r1]
     948:	3101      	adds	r1, #1
     94a:	5463      	strb	r3, [r4, r1]
     94c:	9305      	str	r3, [sp, #20]
     94e:	8223      	strh	r3, [r4, #16]
     950:	76e3      	strb	r3, [r4, #27]
     952:	7622      	strb	r2, [r4, #24]
     954:	7722      	strb	r2, [r4, #28]
     956:	7662      	strb	r2, [r4, #25]
     958:	2313      	movs	r3, #19
     95a:	76a3      	strb	r3, [r4, #26]
     95c:	7762      	strb	r2, [r4, #29]
     95e:	23e1      	movs	r3, #225	; 0xe1
     960:	019b      	lsls	r3, r3, #6
     962:	9308      	str	r3, [sp, #32]
     964:	2380      	movs	r3, #128	; 0x80
     966:	025b      	lsls	r3, r3, #9
     968:	9303      	str	r3, [sp, #12]
     96a:	2301      	movs	r3, #1
     96c:	425b      	negs	r3, r3
     96e:	930c      	str	r3, [sp, #48]	; 0x30
     970:	930d      	str	r3, [sp, #52]	; 0x34
     972:	4a11      	ldr	r2, [pc, #68]	; (9b8 <uartfiber_init+0xa4>)
     974:	920e      	str	r2, [sp, #56]	; 0x38
     976:	930f      	str	r3, [sp, #60]	; 0x3c
     978:	466a      	mov	r2, sp
     97a:	4910      	ldr	r1, [pc, #64]	; (9bc <uartfiber_init+0xa8>)
     97c:	4810      	ldr	r0, [pc, #64]	; (9c0 <uartfiber_init+0xac>)
     97e:	4b11      	ldr	r3, [pc, #68]	; (9c4 <uartfiber_init+0xb0>)
     980:	4798      	blx	r3
     982:	2800      	cmp	r0, #0
     984:	d1f8      	bne.n	978 <uartfiber_init+0x64>
     986:	4b0e      	ldr	r3, [pc, #56]	; (9c0 <uartfiber_init+0xac>)
     988:	681c      	ldr	r4, [r3, #0]
     98a:	0020      	movs	r0, r4
     98c:	4b0e      	ldr	r3, [pc, #56]	; (9c8 <uartfiber_init+0xb4>)
     98e:	4798      	blx	r3
     990:	231f      	movs	r3, #31
     992:	4018      	ands	r0, r3
     994:	3b1e      	subs	r3, #30
     996:	4083      	lsls	r3, r0
     998:	4a0c      	ldr	r2, [pc, #48]	; (9cc <uartfiber_init+0xb8>)
     99a:	6013      	str	r3, [r2, #0]
     99c:	4b08      	ldr	r3, [pc, #32]	; (9c0 <uartfiber_init+0xac>)
     99e:	681b      	ldr	r3, [r3, #0]
     9a0:	69db      	ldr	r3, [r3, #28]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d1fa      	bne.n	99c <uartfiber_init+0x88>
     9a6:	6823      	ldr	r3, [r4, #0]
     9a8:	2202      	movs	r2, #2
     9aa:	4313      	orrs	r3, r2
     9ac:	6023      	str	r3, [r4, #0]
     9ae:	4b08      	ldr	r3, [pc, #32]	; (9d0 <uartfiber_init+0xbc>)
     9b0:	4798      	blx	r3
     9b2:	b010      	add	sp, #64	; 0x40
     9b4:	bd10      	pop	{r4, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	00140002 	.word	0x00140002
     9bc:	42001c00 	.word	0x42001c00
     9c0:	2000002c 	.word	0x2000002c
     9c4:	00000fe1 	.word	0x00000fe1
     9c8:	00001fbd 	.word	0x00001fbd
     9cc:	e000e100 	.word	0xe000e100
     9d0:	000008dd 	.word	0x000008dd

000009d4 <usart_fiber_write>:
     9d4:	b510      	push	{r4, lr}
     9d6:	b084      	sub	sp, #16
     9d8:	9001      	str	r0, [sp, #4]
     9da:	ac02      	add	r4, sp, #8
     9dc:	2204      	movs	r2, #4
     9de:	a901      	add	r1, sp, #4
     9e0:	2009      	movs	r0, #9
     9e2:	4468      	add	r0, sp
     9e4:	4b06      	ldr	r3, [pc, #24]	; (a00 <usart_fiber_write+0x2c>)
     9e6:	4798      	blx	r3
     9e8:	2324      	movs	r3, #36	; 0x24
     9ea:	7023      	strb	r3, [r4, #0]
     9ec:	3301      	adds	r3, #1
     9ee:	7163      	strb	r3, [r4, #5]
     9f0:	2206      	movs	r2, #6
     9f2:	0021      	movs	r1, r4
     9f4:	4803      	ldr	r0, [pc, #12]	; (a04 <usart_fiber_write+0x30>)
     9f6:	4b04      	ldr	r3, [pc, #16]	; (a08 <usart_fiber_write+0x34>)
     9f8:	4798      	blx	r3
     9fa:	b004      	add	sp, #16
     9fc:	bd10      	pop	{r4, pc}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	00002af1 	.word	0x00002af1
     a04:	2000002c 	.word	0x2000002c
     a08:	00001151 	.word	0x00001151

00000a0c <delay_init>:
     a0c:	b510      	push	{r4, lr}
     a0e:	2000      	movs	r0, #0
     a10:	4b08      	ldr	r3, [pc, #32]	; (a34 <delay_init+0x28>)
     a12:	4798      	blx	r3
     a14:	4c08      	ldr	r4, [pc, #32]	; (a38 <delay_init+0x2c>)
     a16:	21fa      	movs	r1, #250	; 0xfa
     a18:	0089      	lsls	r1, r1, #2
     a1a:	47a0      	blx	r4
     a1c:	4b07      	ldr	r3, [pc, #28]	; (a3c <delay_init+0x30>)
     a1e:	6018      	str	r0, [r3, #0]
     a20:	21fa      	movs	r1, #250	; 0xfa
     a22:	0089      	lsls	r1, r1, #2
     a24:	47a0      	blx	r4
     a26:	4b06      	ldr	r3, [pc, #24]	; (a40 <delay_init+0x34>)
     a28:	6018      	str	r0, [r3, #0]
     a2a:	2205      	movs	r2, #5
     a2c:	4b05      	ldr	r3, [pc, #20]	; (a44 <delay_init+0x38>)
     a2e:	601a      	str	r2, [r3, #0]
     a30:	bd10      	pop	{r4, pc}
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	00002421 	.word	0x00002421
     a38:	0000293d 	.word	0x0000293d
     a3c:	20000000 	.word	0x20000000
     a40:	20000004 	.word	0x20000004
     a44:	e000e010 	.word	0xe000e010

00000a48 <delay_cycles_ms>:
     a48:	e000      	b.n	a4c <delay_cycles_ms+0x4>
     a4a:	0010      	movs	r0, r2
     a4c:	1e42      	subs	r2, r0, #1
     a4e:	2800      	cmp	r0, #0
     a50:	d00c      	beq.n	a6c <delay_cycles_ms+0x24>
     a52:	4b07      	ldr	r3, [pc, #28]	; (a70 <delay_cycles_ms+0x28>)
     a54:	681b      	ldr	r3, [r3, #0]
     a56:	2b00      	cmp	r3, #0
     a58:	d0f7      	beq.n	a4a <delay_cycles_ms+0x2>
     a5a:	4906      	ldr	r1, [pc, #24]	; (a74 <delay_cycles_ms+0x2c>)
     a5c:	604b      	str	r3, [r1, #4]
     a5e:	2300      	movs	r3, #0
     a60:	608b      	str	r3, [r1, #8]
     a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <delay_cycles_ms+0x2c>)
     a64:	681b      	ldr	r3, [r3, #0]
     a66:	03db      	lsls	r3, r3, #15
     a68:	d5fb      	bpl.n	a62 <delay_cycles_ms+0x1a>
     a6a:	e7ee      	b.n	a4a <delay_cycles_ms+0x2>
     a6c:	4770      	bx	lr
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	20000000 	.word	0x20000000
     a74:	e000e010 	.word	0xe000e010

00000a78 <port_pin_set_config>:
     a78:	b500      	push	{lr}
     a7a:	b083      	sub	sp, #12
     a7c:	ab01      	add	r3, sp, #4
     a7e:	2280      	movs	r2, #128	; 0x80
     a80:	701a      	strb	r2, [r3, #0]
     a82:	780a      	ldrb	r2, [r1, #0]
     a84:	705a      	strb	r2, [r3, #1]
     a86:	784a      	ldrb	r2, [r1, #1]
     a88:	709a      	strb	r2, [r3, #2]
     a8a:	788a      	ldrb	r2, [r1, #2]
     a8c:	70da      	strb	r2, [r3, #3]
     a8e:	0019      	movs	r1, r3
     a90:	4b01      	ldr	r3, [pc, #4]	; (a98 <port_pin_set_config+0x20>)
     a92:	4798      	blx	r3
     a94:	b003      	add	sp, #12
     a96:	bd00      	pop	{pc}
     a98:	00002639 	.word	0x00002639

00000a9c <long_division>:
     a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9e:	46de      	mov	lr, fp
     aa0:	4657      	mov	r7, sl
     aa2:	464e      	mov	r6, r9
     aa4:	4645      	mov	r5, r8
     aa6:	b5e0      	push	{r5, r6, r7, lr}
     aa8:	b085      	sub	sp, #20
     aaa:	4689      	mov	r9, r1
     aac:	0016      	movs	r6, r2
     aae:	001f      	movs	r7, r3
     ab0:	2200      	movs	r2, #0
     ab2:	2300      	movs	r3, #0
     ab4:	2100      	movs	r1, #0
     ab6:	468b      	mov	fp, r1
     ab8:	468a      	mov	sl, r1
     aba:	253f      	movs	r5, #63	; 0x3f
     abc:	9600      	str	r6, [sp, #0]
     abe:	9701      	str	r7, [sp, #4]
     ac0:	9002      	str	r0, [sp, #8]
     ac2:	4649      	mov	r1, r9
     ac4:	9103      	str	r1, [sp, #12]
     ac6:	e011      	b.n	aec <long_division+0x50>
     ac8:	2120      	movs	r1, #32
     aca:	1b49      	subs	r1, r1, r5
     acc:	2400      	movs	r4, #0
     ace:	3401      	adds	r4, #1
     ad0:	40cc      	lsrs	r4, r1
     ad2:	e013      	b.n	afc <long_division+0x60>
     ad4:	9800      	ldr	r0, [sp, #0]
     ad6:	9901      	ldr	r1, [sp, #4]
     ad8:	1a12      	subs	r2, r2, r0
     ada:	418b      	sbcs	r3, r1
     adc:	4659      	mov	r1, fp
     ade:	4660      	mov	r0, ip
     ae0:	4301      	orrs	r1, r0
     ae2:	468b      	mov	fp, r1
     ae4:	4651      	mov	r1, sl
     ae6:	4321      	orrs	r1, r4
     ae8:	468a      	mov	sl, r1
     aea:	3d01      	subs	r5, #1
     aec:	2d00      	cmp	r5, #0
     aee:	db23      	blt.n	b38 <long_division+0x9c>
     af0:	2120      	movs	r1, #32
     af2:	4249      	negs	r1, r1
     af4:	1869      	adds	r1, r5, r1
     af6:	d4e7      	bmi.n	ac8 <long_division+0x2c>
     af8:	2401      	movs	r4, #1
     afa:	408c      	lsls	r4, r1
     afc:	2101      	movs	r1, #1
     afe:	40a9      	lsls	r1, r5
     b00:	468c      	mov	ip, r1
     b02:	1892      	adds	r2, r2, r2
     b04:	415b      	adcs	r3, r3
     b06:	0010      	movs	r0, r2
     b08:	0019      	movs	r1, r3
     b0a:	9e02      	ldr	r6, [sp, #8]
     b0c:	4667      	mov	r7, ip
     b0e:	403e      	ands	r6, r7
     b10:	46b1      	mov	r9, r6
     b12:	9e03      	ldr	r6, [sp, #12]
     b14:	4026      	ands	r6, r4
     b16:	46b0      	mov	r8, r6
     b18:	464e      	mov	r6, r9
     b1a:	4647      	mov	r7, r8
     b1c:	433e      	orrs	r6, r7
     b1e:	d003      	beq.n	b28 <long_division+0x8c>
     b20:	2601      	movs	r6, #1
     b22:	4306      	orrs	r6, r0
     b24:	0032      	movs	r2, r6
     b26:	000b      	movs	r3, r1
     b28:	9800      	ldr	r0, [sp, #0]
     b2a:	9901      	ldr	r1, [sp, #4]
     b2c:	4299      	cmp	r1, r3
     b2e:	d8dc      	bhi.n	aea <long_division+0x4e>
     b30:	d1d0      	bne.n	ad4 <long_division+0x38>
     b32:	4290      	cmp	r0, r2
     b34:	d8d9      	bhi.n	aea <long_division+0x4e>
     b36:	e7cd      	b.n	ad4 <long_division+0x38>
     b38:	4658      	mov	r0, fp
     b3a:	4651      	mov	r1, sl
     b3c:	b005      	add	sp, #20
     b3e:	bc3c      	pop	{r2, r3, r4, r5}
     b40:	4690      	mov	r8, r2
     b42:	4699      	mov	r9, r3
     b44:	46a2      	mov	sl, r4
     b46:	46ab      	mov	fp, r5
     b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000b4a <_sercom_get_sync_baud_val>:
     b4a:	0849      	lsrs	r1, r1, #1
     b4c:	4281      	cmp	r1, r0
     b4e:	d201      	bcs.n	b54 <_sercom_get_sync_baud_val+0xa>
     b50:	2040      	movs	r0, #64	; 0x40
     b52:	4770      	bx	lr
     b54:	2300      	movs	r3, #0
     b56:	e002      	b.n	b5e <_sercom_get_sync_baud_val+0x14>
     b58:	1a09      	subs	r1, r1, r0
     b5a:	3301      	adds	r3, #1
     b5c:	b29b      	uxth	r3, r3
     b5e:	4281      	cmp	r1, r0
     b60:	d2fa      	bcs.n	b58 <_sercom_get_sync_baud_val+0xe>
     b62:	3b01      	subs	r3, #1
     b64:	b29b      	uxth	r3, r3
     b66:	2bff      	cmp	r3, #255	; 0xff
     b68:	d901      	bls.n	b6e <_sercom_get_sync_baud_val+0x24>
     b6a:	2040      	movs	r0, #64	; 0x40
     b6c:	e7f1      	b.n	b52 <_sercom_get_sync_baud_val+0x8>
     b6e:	8013      	strh	r3, [r2, #0]
     b70:	2000      	movs	r0, #0
     b72:	e7ee      	b.n	b52 <_sercom_get_sync_baud_val+0x8>

00000b74 <_sercom_get_async_baud_val>:
     b74:	b570      	push	{r4, r5, r6, lr}
     b76:	b082      	sub	sp, #8
     b78:	000c      	movs	r4, r1
     b7a:	0015      	movs	r5, r2
     b7c:	aa06      	add	r2, sp, #24
     b7e:	7811      	ldrb	r1, [r2, #0]
     b80:	0002      	movs	r2, r0
     b82:	434a      	muls	r2, r1
     b84:	42a2      	cmp	r2, r4
     b86:	d902      	bls.n	b8e <_sercom_get_async_baud_val+0x1a>
     b88:	2040      	movs	r0, #64	; 0x40
     b8a:	b002      	add	sp, #8
     b8c:	bd70      	pop	{r4, r5, r6, pc}
     b8e:	2b00      	cmp	r3, #0
     b90:	d114      	bne.n	bbc <_sercom_get_async_baud_val+0x48>
     b92:	0002      	movs	r2, r0
     b94:	0008      	movs	r0, r1
     b96:	2100      	movs	r1, #0
     b98:	4e1b      	ldr	r6, [pc, #108]	; (c08 <_sercom_get_async_baud_val+0x94>)
     b9a:	47b0      	blx	r6
     b9c:	0001      	movs	r1, r0
     b9e:	0022      	movs	r2, r4
     ba0:	2300      	movs	r3, #0
     ba2:	2000      	movs	r0, #0
     ba4:	4c19      	ldr	r4, [pc, #100]	; (c0c <_sercom_get_async_baud_val+0x98>)
     ba6:	47a0      	blx	r4
     ba8:	2200      	movs	r2, #0
     baa:	2301      	movs	r3, #1
     bac:	1a12      	subs	r2, r2, r0
     bae:	418b      	sbcs	r3, r1
     bb0:	0c10      	lsrs	r0, r2, #16
     bb2:	041b      	lsls	r3, r3, #16
     bb4:	4318      	orrs	r0, r3
     bb6:	8028      	strh	r0, [r5, #0]
     bb8:	2000      	movs	r0, #0
     bba:	e7e6      	b.n	b8a <_sercom_get_async_baud_val+0x16>
     bbc:	2b01      	cmp	r3, #1
     bbe:	d001      	beq.n	bc4 <_sercom_get_async_baud_val+0x50>
     bc0:	2000      	movs	r0, #0
     bc2:	e7f8      	b.n	bb6 <_sercom_get_async_baud_val+0x42>
     bc4:	000a      	movs	r2, r1
     bc6:	2300      	movs	r3, #0
     bc8:	2100      	movs	r1, #0
     bca:	4e0f      	ldr	r6, [pc, #60]	; (c08 <_sercom_get_async_baud_val+0x94>)
     bcc:	47b0      	blx	r6
     bce:	0002      	movs	r2, r0
     bd0:	000b      	movs	r3, r1
     bd2:	9200      	str	r2, [sp, #0]
     bd4:	9301      	str	r3, [sp, #4]
     bd6:	0020      	movs	r0, r4
     bd8:	2100      	movs	r1, #0
     bda:	4e0c      	ldr	r6, [pc, #48]	; (c0c <_sercom_get_async_baud_val+0x98>)
     bdc:	47b0      	blx	r6
     bde:	0006      	movs	r6, r0
     be0:	2380      	movs	r3, #128	; 0x80
     be2:	019b      	lsls	r3, r3, #6
     be4:	4298      	cmp	r0, r3
     be6:	d901      	bls.n	bec <_sercom_get_async_baud_val+0x78>
     be8:	2040      	movs	r0, #64	; 0x40
     bea:	e7ce      	b.n	b8a <_sercom_get_async_baud_val+0x16>
     bec:	0f61      	lsrs	r1, r4, #29
     bee:	00e0      	lsls	r0, r4, #3
     bf0:	9a00      	ldr	r2, [sp, #0]
     bf2:	9b01      	ldr	r3, [sp, #4]
     bf4:	4c05      	ldr	r4, [pc, #20]	; (c0c <_sercom_get_async_baud_val+0x98>)
     bf6:	47a0      	blx	r4
     bf8:	b2c0      	uxtb	r0, r0
     bfa:	00f3      	lsls	r3, r6, #3
     bfc:	b2db      	uxtb	r3, r3
     bfe:	1ac0      	subs	r0, r0, r3
     c00:	b2c0      	uxtb	r0, r0
     c02:	0340      	lsls	r0, r0, #13
     c04:	4330      	orrs	r0, r6
     c06:	e7d6      	b.n	bb6 <_sercom_get_async_baud_val+0x42>
     c08:	00002a55 	.word	0x00002a55
     c0c:	00000a9d 	.word	0x00000a9d

00000c10 <sercom_set_gclk_generator>:
     c10:	b510      	push	{r4, lr}
     c12:	b082      	sub	sp, #8
     c14:	0004      	movs	r4, r0
     c16:	4b0e      	ldr	r3, [pc, #56]	; (c50 <sercom_set_gclk_generator+0x40>)
     c18:	781b      	ldrb	r3, [r3, #0]
     c1a:	2b00      	cmp	r3, #0
     c1c:	d007      	beq.n	c2e <sercom_set_gclk_generator+0x1e>
     c1e:	2900      	cmp	r1, #0
     c20:	d105      	bne.n	c2e <sercom_set_gclk_generator+0x1e>
     c22:	4b0b      	ldr	r3, [pc, #44]	; (c50 <sercom_set_gclk_generator+0x40>)
     c24:	785b      	ldrb	r3, [r3, #1]
     c26:	4283      	cmp	r3, r0
     c28:	d010      	beq.n	c4c <sercom_set_gclk_generator+0x3c>
     c2a:	201d      	movs	r0, #29
     c2c:	e00c      	b.n	c48 <sercom_set_gclk_generator+0x38>
     c2e:	a901      	add	r1, sp, #4
     c30:	700c      	strb	r4, [r1, #0]
     c32:	2013      	movs	r0, #19
     c34:	4b07      	ldr	r3, [pc, #28]	; (c54 <sercom_set_gclk_generator+0x44>)
     c36:	4798      	blx	r3
     c38:	2013      	movs	r0, #19
     c3a:	4b07      	ldr	r3, [pc, #28]	; (c58 <sercom_set_gclk_generator+0x48>)
     c3c:	4798      	blx	r3
     c3e:	4b04      	ldr	r3, [pc, #16]	; (c50 <sercom_set_gclk_generator+0x40>)
     c40:	705c      	strb	r4, [r3, #1]
     c42:	2201      	movs	r2, #1
     c44:	701a      	strb	r2, [r3, #0]
     c46:	2000      	movs	r0, #0
     c48:	b002      	add	sp, #8
     c4a:	bd10      	pop	{r4, pc}
     c4c:	2000      	movs	r0, #0
     c4e:	e7fb      	b.n	c48 <sercom_set_gclk_generator+0x38>
     c50:	20000068 	.word	0x20000068
     c54:	00002555 	.word	0x00002555
     c58:	000024cd 	.word	0x000024cd

00000c5c <_sercom_get_default_pad>:
     c5c:	4b40      	ldr	r3, [pc, #256]	; (d60 <_sercom_get_default_pad+0x104>)
     c5e:	4298      	cmp	r0, r3
     c60:	d031      	beq.n	cc6 <_sercom_get_default_pad+0x6a>
     c62:	d90a      	bls.n	c7a <_sercom_get_default_pad+0x1e>
     c64:	4b3f      	ldr	r3, [pc, #252]	; (d64 <_sercom_get_default_pad+0x108>)
     c66:	4298      	cmp	r0, r3
     c68:	d04d      	beq.n	d06 <_sercom_get_default_pad+0xaa>
     c6a:	4b3f      	ldr	r3, [pc, #252]	; (d68 <_sercom_get_default_pad+0x10c>)
     c6c:	4298      	cmp	r0, r3
     c6e:	d05a      	beq.n	d26 <_sercom_get_default_pad+0xca>
     c70:	4b3e      	ldr	r3, [pc, #248]	; (d6c <_sercom_get_default_pad+0x110>)
     c72:	4298      	cmp	r0, r3
     c74:	d037      	beq.n	ce6 <_sercom_get_default_pad+0x8a>
     c76:	2000      	movs	r0, #0
     c78:	4770      	bx	lr
     c7a:	4b3d      	ldr	r3, [pc, #244]	; (d70 <_sercom_get_default_pad+0x114>)
     c7c:	4298      	cmp	r0, r3
     c7e:	d00c      	beq.n	c9a <_sercom_get_default_pad+0x3e>
     c80:	4b3c      	ldr	r3, [pc, #240]	; (d74 <_sercom_get_default_pad+0x118>)
     c82:	4298      	cmp	r0, r3
     c84:	d1f7      	bne.n	c76 <_sercom_get_default_pad+0x1a>
     c86:	2901      	cmp	r1, #1
     c88:	d05f      	beq.n	d4a <_sercom_get_default_pad+0xee>
     c8a:	2900      	cmp	r1, #0
     c8c:	d015      	beq.n	cba <_sercom_get_default_pad+0x5e>
     c8e:	2902      	cmp	r1, #2
     c90:	d015      	beq.n	cbe <_sercom_get_default_pad+0x62>
     c92:	2903      	cmp	r1, #3
     c94:	d015      	beq.n	cc2 <_sercom_get_default_pad+0x66>
     c96:	2000      	movs	r0, #0
     c98:	e7ee      	b.n	c78 <_sercom_get_default_pad+0x1c>
     c9a:	2901      	cmp	r1, #1
     c9c:	d053      	beq.n	d46 <_sercom_get_default_pad+0xea>
     c9e:	2900      	cmp	r1, #0
     ca0:	d005      	beq.n	cae <_sercom_get_default_pad+0x52>
     ca2:	2902      	cmp	r1, #2
     ca4:	d005      	beq.n	cb2 <_sercom_get_default_pad+0x56>
     ca6:	2903      	cmp	r1, #3
     ca8:	d005      	beq.n	cb6 <_sercom_get_default_pad+0x5a>
     caa:	2000      	movs	r0, #0
     cac:	e7e4      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cae:	4832      	ldr	r0, [pc, #200]	; (d78 <_sercom_get_default_pad+0x11c>)
     cb0:	e7e2      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cb2:	4832      	ldr	r0, [pc, #200]	; (d7c <_sercom_get_default_pad+0x120>)
     cb4:	e7e0      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cb6:	4832      	ldr	r0, [pc, #200]	; (d80 <_sercom_get_default_pad+0x124>)
     cb8:	e7de      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cba:	2003      	movs	r0, #3
     cbc:	e7dc      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cbe:	4831      	ldr	r0, [pc, #196]	; (d84 <_sercom_get_default_pad+0x128>)
     cc0:	e7da      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cc2:	4831      	ldr	r0, [pc, #196]	; (d88 <_sercom_get_default_pad+0x12c>)
     cc4:	e7d8      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cc6:	2901      	cmp	r1, #1
     cc8:	d041      	beq.n	d4e <_sercom_get_default_pad+0xf2>
     cca:	2900      	cmp	r1, #0
     ccc:	d005      	beq.n	cda <_sercom_get_default_pad+0x7e>
     cce:	2902      	cmp	r1, #2
     cd0:	d005      	beq.n	cde <_sercom_get_default_pad+0x82>
     cd2:	2903      	cmp	r1, #3
     cd4:	d005      	beq.n	ce2 <_sercom_get_default_pad+0x86>
     cd6:	2000      	movs	r0, #0
     cd8:	e7ce      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cda:	482c      	ldr	r0, [pc, #176]	; (d8c <_sercom_get_default_pad+0x130>)
     cdc:	e7cc      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cde:	482c      	ldr	r0, [pc, #176]	; (d90 <_sercom_get_default_pad+0x134>)
     ce0:	e7ca      	b.n	c78 <_sercom_get_default_pad+0x1c>
     ce2:	482c      	ldr	r0, [pc, #176]	; (d94 <_sercom_get_default_pad+0x138>)
     ce4:	e7c8      	b.n	c78 <_sercom_get_default_pad+0x1c>
     ce6:	2901      	cmp	r1, #1
     ce8:	d033      	beq.n	d52 <_sercom_get_default_pad+0xf6>
     cea:	2900      	cmp	r1, #0
     cec:	d005      	beq.n	cfa <_sercom_get_default_pad+0x9e>
     cee:	2902      	cmp	r1, #2
     cf0:	d005      	beq.n	cfe <_sercom_get_default_pad+0xa2>
     cf2:	2903      	cmp	r1, #3
     cf4:	d005      	beq.n	d02 <_sercom_get_default_pad+0xa6>
     cf6:	2000      	movs	r0, #0
     cf8:	e7be      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cfa:	4827      	ldr	r0, [pc, #156]	; (d98 <_sercom_get_default_pad+0x13c>)
     cfc:	e7bc      	b.n	c78 <_sercom_get_default_pad+0x1c>
     cfe:	4827      	ldr	r0, [pc, #156]	; (d9c <_sercom_get_default_pad+0x140>)
     d00:	e7ba      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d02:	4827      	ldr	r0, [pc, #156]	; (da0 <_sercom_get_default_pad+0x144>)
     d04:	e7b8      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d06:	2901      	cmp	r1, #1
     d08:	d025      	beq.n	d56 <_sercom_get_default_pad+0xfa>
     d0a:	2900      	cmp	r1, #0
     d0c:	d005      	beq.n	d1a <_sercom_get_default_pad+0xbe>
     d0e:	2902      	cmp	r1, #2
     d10:	d005      	beq.n	d1e <_sercom_get_default_pad+0xc2>
     d12:	2903      	cmp	r1, #3
     d14:	d005      	beq.n	d22 <_sercom_get_default_pad+0xc6>
     d16:	2000      	movs	r0, #0
     d18:	e7ae      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d1a:	4822      	ldr	r0, [pc, #136]	; (da4 <_sercom_get_default_pad+0x148>)
     d1c:	e7ac      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d1e:	4822      	ldr	r0, [pc, #136]	; (da8 <_sercom_get_default_pad+0x14c>)
     d20:	e7aa      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d22:	4822      	ldr	r0, [pc, #136]	; (dac <_sercom_get_default_pad+0x150>)
     d24:	e7a8      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d26:	2901      	cmp	r1, #1
     d28:	d017      	beq.n	d5a <_sercom_get_default_pad+0xfe>
     d2a:	2900      	cmp	r1, #0
     d2c:	d005      	beq.n	d3a <_sercom_get_default_pad+0xde>
     d2e:	2902      	cmp	r1, #2
     d30:	d005      	beq.n	d3e <_sercom_get_default_pad+0xe2>
     d32:	2903      	cmp	r1, #3
     d34:	d005      	beq.n	d42 <_sercom_get_default_pad+0xe6>
     d36:	2000      	movs	r0, #0
     d38:	e79e      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d3a:	481d      	ldr	r0, [pc, #116]	; (db0 <_sercom_get_default_pad+0x154>)
     d3c:	e79c      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d3e:	481d      	ldr	r0, [pc, #116]	; (db4 <_sercom_get_default_pad+0x158>)
     d40:	e79a      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d42:	481d      	ldr	r0, [pc, #116]	; (db8 <_sercom_get_default_pad+0x15c>)
     d44:	e798      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d46:	481d      	ldr	r0, [pc, #116]	; (dbc <_sercom_get_default_pad+0x160>)
     d48:	e796      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d4a:	481d      	ldr	r0, [pc, #116]	; (dc0 <_sercom_get_default_pad+0x164>)
     d4c:	e794      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d4e:	481d      	ldr	r0, [pc, #116]	; (dc4 <_sercom_get_default_pad+0x168>)
     d50:	e792      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d52:	481d      	ldr	r0, [pc, #116]	; (dc8 <_sercom_get_default_pad+0x16c>)
     d54:	e790      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d56:	481d      	ldr	r0, [pc, #116]	; (dcc <_sercom_get_default_pad+0x170>)
     d58:	e78e      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d5a:	481d      	ldr	r0, [pc, #116]	; (dd0 <_sercom_get_default_pad+0x174>)
     d5c:	e78c      	b.n	c78 <_sercom_get_default_pad+0x1c>
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	42001000 	.word	0x42001000
     d64:	42001800 	.word	0x42001800
     d68:	42001c00 	.word	0x42001c00
     d6c:	42001400 	.word	0x42001400
     d70:	42000800 	.word	0x42000800
     d74:	42000c00 	.word	0x42000c00
     d78:	00040003 	.word	0x00040003
     d7c:	00060003 	.word	0x00060003
     d80:	00070003 	.word	0x00070003
     d84:	001e0003 	.word	0x001e0003
     d88:	001f0003 	.word	0x001f0003
     d8c:	00080003 	.word	0x00080003
     d90:	000a0003 	.word	0x000a0003
     d94:	000b0003 	.word	0x000b0003
     d98:	00100003 	.word	0x00100003
     d9c:	00120003 	.word	0x00120003
     da0:	00130003 	.word	0x00130003
     da4:	000c0003 	.word	0x000c0003
     da8:	000e0003 	.word	0x000e0003
     dac:	000f0003 	.word	0x000f0003
     db0:	00160003 	.word	0x00160003
     db4:	00180003 	.word	0x00180003
     db8:	00190003 	.word	0x00190003
     dbc:	00050003 	.word	0x00050003
     dc0:	00010003 	.word	0x00010003
     dc4:	00090003 	.word	0x00090003
     dc8:	00110003 	.word	0x00110003
     dcc:	000d0003 	.word	0x000d0003
     dd0:	00170003 	.word	0x00170003

00000dd4 <_sercom_get_sercom_inst_index>:
     dd4:	b530      	push	{r4, r5, lr}
     dd6:	b087      	sub	sp, #28
     dd8:	4c0a      	ldr	r4, [pc, #40]	; (e04 <_sercom_get_sercom_inst_index+0x30>)
     dda:	466b      	mov	r3, sp
     ddc:	0022      	movs	r2, r4
     dde:	ca32      	ldmia	r2!, {r1, r4, r5}
     de0:	c332      	stmia	r3!, {r1, r4, r5}
     de2:	ca32      	ldmia	r2!, {r1, r4, r5}
     de4:	c332      	stmia	r3!, {r1, r4, r5}
     de6:	2300      	movs	r3, #0
     de8:	2b05      	cmp	r3, #5
     dea:	d808      	bhi.n	dfe <_sercom_get_sercom_inst_index+0x2a>
     dec:	009a      	lsls	r2, r3, #2
     dee:	4669      	mov	r1, sp
     df0:	5852      	ldr	r2, [r2, r1]
     df2:	4282      	cmp	r2, r0
     df4:	d001      	beq.n	dfa <_sercom_get_sercom_inst_index+0x26>
     df6:	3301      	adds	r3, #1
     df8:	e7f6      	b.n	de8 <_sercom_get_sercom_inst_index+0x14>
     dfa:	b2d8      	uxtb	r0, r3
     dfc:	e000      	b.n	e00 <_sercom_get_sercom_inst_index+0x2c>
     dfe:	2000      	movs	r0, #0
     e00:	b007      	add	sp, #28
     e02:	bd30      	pop	{r4, r5, pc}
     e04:	00002b14 	.word	0x00002b14

00000e08 <_usart_set_config>:
     e08:	b5f0      	push	{r4, r5, r6, r7, lr}
     e0a:	46de      	mov	lr, fp
     e0c:	4657      	mov	r7, sl
     e0e:	464e      	mov	r6, r9
     e10:	4645      	mov	r5, r8
     e12:	b5e0      	push	{r5, r6, r7, lr}
     e14:	b087      	sub	sp, #28
     e16:	0004      	movs	r4, r0
     e18:	000d      	movs	r5, r1
     e1a:	6806      	ldr	r6, [r0, #0]
     e1c:	0030      	movs	r0, r6
     e1e:	4b6b      	ldr	r3, [pc, #428]	; (fcc <_usart_set_config+0x1c4>)
     e20:	4798      	blx	r3
     e22:	3014      	adds	r0, #20
     e24:	2200      	movs	r2, #0
     e26:	230e      	movs	r3, #14
     e28:	a902      	add	r1, sp, #8
     e2a:	468c      	mov	ip, r1
     e2c:	4463      	add	r3, ip
     e2e:	801a      	strh	r2, [r3, #0]
     e30:	8a2a      	ldrh	r2, [r5, #16]
     e32:	2380      	movs	r3, #128	; 0x80
     e34:	01db      	lsls	r3, r3, #7
     e36:	429a      	cmp	r2, r3
     e38:	d03b      	beq.n	eb2 <_usart_set_config+0xaa>
     e3a:	d90c      	bls.n	e56 <_usart_set_config+0x4e>
     e3c:	23c0      	movs	r3, #192	; 0xc0
     e3e:	01db      	lsls	r3, r3, #7
     e40:	429a      	cmp	r2, r3
     e42:	d031      	beq.n	ea8 <_usart_set_config+0xa0>
     e44:	2380      	movs	r3, #128	; 0x80
     e46:	021b      	lsls	r3, r3, #8
     e48:	429a      	cmp	r2, r3
     e4a:	d10d      	bne.n	e68 <_usart_set_config+0x60>
     e4c:	2303      	movs	r3, #3
     e4e:	469a      	mov	sl, r3
     e50:	2300      	movs	r3, #0
     e52:	4699      	mov	r9, r3
     e54:	e00c      	b.n	e70 <_usart_set_config+0x68>
     e56:	2380      	movs	r3, #128	; 0x80
     e58:	019b      	lsls	r3, r3, #6
     e5a:	429a      	cmp	r2, r3
     e5c:	d104      	bne.n	e68 <_usart_set_config+0x60>
     e5e:	2310      	movs	r3, #16
     e60:	469a      	mov	sl, r3
     e62:	3b0f      	subs	r3, #15
     e64:	4699      	mov	r9, r3
     e66:	e003      	b.n	e70 <_usart_set_config+0x68>
     e68:	2310      	movs	r3, #16
     e6a:	469a      	mov	sl, r3
     e6c:	2300      	movs	r3, #0
     e6e:	4699      	mov	r9, r3
     e70:	682b      	ldr	r3, [r5, #0]
     e72:	68e9      	ldr	r1, [r5, #12]
     e74:	430b      	orrs	r3, r1
     e76:	6969      	ldr	r1, [r5, #20]
     e78:	430b      	orrs	r3, r1
     e7a:	4313      	orrs	r3, r2
     e7c:	7e2a      	ldrb	r2, [r5, #24]
     e7e:	0212      	lsls	r2, r2, #8
     e80:	4313      	orrs	r3, r2
     e82:	2226      	movs	r2, #38	; 0x26
     e84:	5caf      	ldrb	r7, [r5, r2]
     e86:	077f      	lsls	r7, r7, #29
     e88:	431f      	orrs	r7, r3
     e8a:	9703      	str	r7, [sp, #12]
     e8c:	686b      	ldr	r3, [r5, #4]
     e8e:	4698      	mov	r8, r3
     e90:	2b00      	cmp	r3, #0
     e92:	d021      	beq.n	ed8 <_usart_set_config+0xd0>
     e94:	2380      	movs	r3, #128	; 0x80
     e96:	055b      	lsls	r3, r3, #21
     e98:	4598      	cmp	r8, r3
     e9a:	d13e      	bne.n	f1a <_usart_set_config+0x112>
     e9c:	2327      	movs	r3, #39	; 0x27
     e9e:	5ceb      	ldrb	r3, [r5, r3]
     ea0:	2b00      	cmp	r3, #0
     ea2:	d00b      	beq.n	ebc <_usart_set_config+0xb4>
     ea4:	2000      	movs	r0, #0
     ea6:	e039      	b.n	f1c <_usart_set_config+0x114>
     ea8:	2308      	movs	r3, #8
     eaa:	469a      	mov	sl, r3
     eac:	3b07      	subs	r3, #7
     eae:	4699      	mov	r9, r3
     eb0:	e7de      	b.n	e70 <_usart_set_config+0x68>
     eb2:	2308      	movs	r3, #8
     eb4:	469a      	mov	sl, r3
     eb6:	2300      	movs	r3, #0
     eb8:	4699      	mov	r9, r3
     eba:	e7d9      	b.n	e70 <_usart_set_config+0x68>
     ebc:	6a2b      	ldr	r3, [r5, #32]
     ebe:	4699      	mov	r9, r3
     ec0:	b2c0      	uxtb	r0, r0
     ec2:	4b43      	ldr	r3, [pc, #268]	; (fd0 <_usart_set_config+0x1c8>)
     ec4:	4798      	blx	r3
     ec6:	0001      	movs	r1, r0
     ec8:	220e      	movs	r2, #14
     eca:	ab02      	add	r3, sp, #8
     ecc:	469c      	mov	ip, r3
     ece:	4462      	add	r2, ip
     ed0:	4648      	mov	r0, r9
     ed2:	4b40      	ldr	r3, [pc, #256]	; (fd4 <_usart_set_config+0x1cc>)
     ed4:	4798      	blx	r3
     ed6:	e021      	b.n	f1c <_usart_set_config+0x114>
     ed8:	2327      	movs	r3, #39	; 0x27
     eda:	5ceb      	ldrb	r3, [r5, r3]
     edc:	2b00      	cmp	r3, #0
     ede:	d00b      	beq.n	ef8 <_usart_set_config+0xf0>
     ee0:	4653      	mov	r3, sl
     ee2:	9300      	str	r3, [sp, #0]
     ee4:	464b      	mov	r3, r9
     ee6:	220e      	movs	r2, #14
     ee8:	a902      	add	r1, sp, #8
     eea:	468c      	mov	ip, r1
     eec:	4462      	add	r2, ip
     eee:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     ef0:	6a28      	ldr	r0, [r5, #32]
     ef2:	4f39      	ldr	r7, [pc, #228]	; (fd8 <_usart_set_config+0x1d0>)
     ef4:	47b8      	blx	r7
     ef6:	e011      	b.n	f1c <_usart_set_config+0x114>
     ef8:	6a2b      	ldr	r3, [r5, #32]
     efa:	469b      	mov	fp, r3
     efc:	b2c0      	uxtb	r0, r0
     efe:	4b34      	ldr	r3, [pc, #208]	; (fd0 <_usart_set_config+0x1c8>)
     f00:	4798      	blx	r3
     f02:	0001      	movs	r1, r0
     f04:	4653      	mov	r3, sl
     f06:	9300      	str	r3, [sp, #0]
     f08:	464b      	mov	r3, r9
     f0a:	220e      	movs	r2, #14
     f0c:	a802      	add	r0, sp, #8
     f0e:	4684      	mov	ip, r0
     f10:	4462      	add	r2, ip
     f12:	4658      	mov	r0, fp
     f14:	4f30      	ldr	r7, [pc, #192]	; (fd8 <_usart_set_config+0x1d0>)
     f16:	47b8      	blx	r7
     f18:	e000      	b.n	f1c <_usart_set_config+0x114>
     f1a:	2000      	movs	r0, #0
     f1c:	2800      	cmp	r0, #0
     f1e:	d146      	bne.n	fae <_usart_set_config+0x1a6>
     f20:	7e6b      	ldrb	r3, [r5, #25]
     f22:	2b00      	cmp	r3, #0
     f24:	d001      	beq.n	f2a <_usart_set_config+0x122>
     f26:	7eab      	ldrb	r3, [r5, #26]
     f28:	73b3      	strb	r3, [r6, #14]
     f2a:	6823      	ldr	r3, [r4, #0]
     f2c:	69db      	ldr	r3, [r3, #28]
     f2e:	2b00      	cmp	r3, #0
     f30:	d1fb      	bne.n	f2a <_usart_set_config+0x122>
     f32:	330e      	adds	r3, #14
     f34:	aa02      	add	r2, sp, #8
     f36:	4694      	mov	ip, r2
     f38:	4463      	add	r3, ip
     f3a:	881b      	ldrh	r3, [r3, #0]
     f3c:	81b3      	strh	r3, [r6, #12]
     f3e:	4643      	mov	r3, r8
     f40:	9f03      	ldr	r7, [sp, #12]
     f42:	431f      	orrs	r7, r3
     f44:	2327      	movs	r3, #39	; 0x27
     f46:	5ceb      	ldrb	r3, [r5, r3]
     f48:	2b00      	cmp	r3, #0
     f4a:	d101      	bne.n	f50 <_usart_set_config+0x148>
     f4c:	3304      	adds	r3, #4
     f4e:	431f      	orrs	r7, r3
     f50:	7e6a      	ldrb	r2, [r5, #25]
     f52:	0292      	lsls	r2, r2, #10
     f54:	7f2b      	ldrb	r3, [r5, #28]
     f56:	025b      	lsls	r3, r3, #9
     f58:	431a      	orrs	r2, r3
     f5a:	7f6b      	ldrb	r3, [r5, #29]
     f5c:	021b      	lsls	r3, r3, #8
     f5e:	431a      	orrs	r2, r3
     f60:	2324      	movs	r3, #36	; 0x24
     f62:	5ceb      	ldrb	r3, [r5, r3]
     f64:	045b      	lsls	r3, r3, #17
     f66:	431a      	orrs	r2, r3
     f68:	2325      	movs	r3, #37	; 0x25
     f6a:	5ceb      	ldrb	r3, [r5, r3]
     f6c:	041b      	lsls	r3, r3, #16
     f6e:	431a      	orrs	r2, r3
     f70:	7aab      	ldrb	r3, [r5, #10]
     f72:	431a      	orrs	r2, r3
     f74:	7aeb      	ldrb	r3, [r5, #11]
     f76:	431a      	orrs	r2, r3
     f78:	892b      	ldrh	r3, [r5, #8]
     f7a:	2bff      	cmp	r3, #255	; 0xff
     f7c:	d01e      	beq.n	fbc <_usart_set_config+0x1b4>
     f7e:	2180      	movs	r1, #128	; 0x80
     f80:	0449      	lsls	r1, r1, #17
     f82:	430f      	orrs	r7, r1
     f84:	431a      	orrs	r2, r3
     f86:	232c      	movs	r3, #44	; 0x2c
     f88:	5ceb      	ldrb	r3, [r5, r3]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d103      	bne.n	f96 <_usart_set_config+0x18e>
     f8e:	4b13      	ldr	r3, [pc, #76]	; (fdc <_usart_set_config+0x1d4>)
     f90:	789b      	ldrb	r3, [r3, #2]
     f92:	079b      	lsls	r3, r3, #30
     f94:	d501      	bpl.n	f9a <_usart_set_config+0x192>
     f96:	2380      	movs	r3, #128	; 0x80
     f98:	431f      	orrs	r7, r3
     f9a:	6823      	ldr	r3, [r4, #0]
     f9c:	69db      	ldr	r3, [r3, #28]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d1fb      	bne.n	f9a <_usart_set_config+0x192>
     fa2:	6072      	str	r2, [r6, #4]
     fa4:	6823      	ldr	r3, [r4, #0]
     fa6:	69db      	ldr	r3, [r3, #28]
     fa8:	2b00      	cmp	r3, #0
     faa:	d1fb      	bne.n	fa4 <_usart_set_config+0x19c>
     fac:	6037      	str	r7, [r6, #0]
     fae:	b007      	add	sp, #28
     fb0:	bc3c      	pop	{r2, r3, r4, r5}
     fb2:	4690      	mov	r8, r2
     fb4:	4699      	mov	r9, r3
     fb6:	46a2      	mov	sl, r4
     fb8:	46ab      	mov	fp, r5
     fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fbc:	7eeb      	ldrb	r3, [r5, #27]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d0e1      	beq.n	f86 <_usart_set_config+0x17e>
     fc2:	2380      	movs	r3, #128	; 0x80
     fc4:	04db      	lsls	r3, r3, #19
     fc6:	431f      	orrs	r7, r3
     fc8:	e7dd      	b.n	f86 <_usart_set_config+0x17e>
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	00000dd5 	.word	0x00000dd5
     fd0:	00002571 	.word	0x00002571
     fd4:	00000b4b 	.word	0x00000b4b
     fd8:	00000b75 	.word	0x00000b75
     fdc:	41002000 	.word	0x41002000

00000fe0 <usart_init>:
     fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe2:	b089      	sub	sp, #36	; 0x24
     fe4:	0006      	movs	r6, r0
     fe6:	000c      	movs	r4, r1
     fe8:	0017      	movs	r7, r2
     fea:	6031      	str	r1, [r6, #0]
     fec:	0008      	movs	r0, r1
     fee:	4b42      	ldr	r3, [pc, #264]	; (10f8 <usart_init+0x118>)
     ff0:	4798      	blx	r3
     ff2:	1c82      	adds	r2, r0, #2
     ff4:	3014      	adds	r0, #20
     ff6:	6823      	ldr	r3, [r4, #0]
     ff8:	07db      	lsls	r3, r3, #31
     ffa:	d503      	bpl.n	1004 <usart_init+0x24>
     ffc:	2505      	movs	r5, #5
     ffe:	0028      	movs	r0, r5
    1000:	b009      	add	sp, #36	; 0x24
    1002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1004:	6823      	ldr	r3, [r4, #0]
    1006:	079b      	lsls	r3, r3, #30
    1008:	d501      	bpl.n	100e <usart_init+0x2e>
    100a:	251c      	movs	r5, #28
    100c:	e7f7      	b.n	ffe <usart_init+0x1e>
    100e:	2301      	movs	r3, #1
    1010:	4093      	lsls	r3, r2
    1012:	4a3a      	ldr	r2, [pc, #232]	; (10fc <usart_init+0x11c>)
    1014:	6a11      	ldr	r1, [r2, #32]
    1016:	430b      	orrs	r3, r1
    1018:	6213      	str	r3, [r2, #32]
    101a:	252d      	movs	r5, #45	; 0x2d
    101c:	5d7b      	ldrb	r3, [r7, r5]
    101e:	a907      	add	r1, sp, #28
    1020:	700b      	strb	r3, [r1, #0]
    1022:	b2c3      	uxtb	r3, r0
    1024:	9301      	str	r3, [sp, #4]
    1026:	0018      	movs	r0, r3
    1028:	4b35      	ldr	r3, [pc, #212]	; (1100 <usart_init+0x120>)
    102a:	4798      	blx	r3
    102c:	9801      	ldr	r0, [sp, #4]
    102e:	4b35      	ldr	r3, [pc, #212]	; (1104 <usart_init+0x124>)
    1030:	4798      	blx	r3
    1032:	5d78      	ldrb	r0, [r7, r5]
    1034:	2100      	movs	r1, #0
    1036:	4b34      	ldr	r3, [pc, #208]	; (1108 <usart_init+0x128>)
    1038:	4798      	blx	r3
    103a:	7afb      	ldrb	r3, [r7, #11]
    103c:	7173      	strb	r3, [r6, #5]
    103e:	2324      	movs	r3, #36	; 0x24
    1040:	5cfb      	ldrb	r3, [r7, r3]
    1042:	71b3      	strb	r3, [r6, #6]
    1044:	2325      	movs	r3, #37	; 0x25
    1046:	5cfb      	ldrb	r3, [r7, r3]
    1048:	71f3      	strb	r3, [r6, #7]
    104a:	7efb      	ldrb	r3, [r7, #27]
    104c:	7233      	strb	r3, [r6, #8]
    104e:	7f3b      	ldrb	r3, [r7, #28]
    1050:	7273      	strb	r3, [r6, #9]
    1052:	0039      	movs	r1, r7
    1054:	0030      	movs	r0, r6
    1056:	4b2d      	ldr	r3, [pc, #180]	; (110c <usart_init+0x12c>)
    1058:	4798      	blx	r3
    105a:	1e05      	subs	r5, r0, #0
    105c:	d1cf      	bne.n	ffe <usart_init+0x1e>
    105e:	ab06      	add	r3, sp, #24
    1060:	2280      	movs	r2, #128	; 0x80
    1062:	701a      	strb	r2, [r3, #0]
    1064:	2200      	movs	r2, #0
    1066:	705a      	strb	r2, [r3, #1]
    1068:	70da      	strb	r2, [r3, #3]
    106a:	709a      	strb	r2, [r3, #2]
    106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    106e:	9302      	str	r3, [sp, #8]
    1070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1072:	9303      	str	r3, [sp, #12]
    1074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1076:	9304      	str	r3, [sp, #16]
    1078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    107a:	9301      	str	r3, [sp, #4]
    107c:	9305      	str	r3, [sp, #20]
    107e:	2700      	movs	r7, #0
    1080:	e006      	b.n	1090 <usart_init+0xb0>
    1082:	0039      	movs	r1, r7
    1084:	0020      	movs	r0, r4
    1086:	4b22      	ldr	r3, [pc, #136]	; (1110 <usart_init+0x130>)
    1088:	4798      	blx	r3
    108a:	e008      	b.n	109e <usart_init+0xbe>
    108c:	3701      	adds	r7, #1
    108e:	b2ff      	uxtb	r7, r7
    1090:	2f03      	cmp	r7, #3
    1092:	d80d      	bhi.n	10b0 <usart_init+0xd0>
    1094:	00bb      	lsls	r3, r7, #2
    1096:	aa02      	add	r2, sp, #8
    1098:	5898      	ldr	r0, [r3, r2]
    109a:	2800      	cmp	r0, #0
    109c:	d0f1      	beq.n	1082 <usart_init+0xa2>
    109e:	1c43      	adds	r3, r0, #1
    10a0:	d0f4      	beq.n	108c <usart_init+0xac>
    10a2:	a906      	add	r1, sp, #24
    10a4:	7008      	strb	r0, [r1, #0]
    10a6:	0c00      	lsrs	r0, r0, #16
    10a8:	b2c0      	uxtb	r0, r0
    10aa:	4b1a      	ldr	r3, [pc, #104]	; (1114 <usart_init+0x134>)
    10ac:	4798      	blx	r3
    10ae:	e7ed      	b.n	108c <usart_init+0xac>
    10b0:	2200      	movs	r2, #0
    10b2:	2a05      	cmp	r2, #5
    10b4:	d806      	bhi.n	10c4 <usart_init+0xe4>
    10b6:	1c93      	adds	r3, r2, #2
    10b8:	009b      	lsls	r3, r3, #2
    10ba:	18f3      	adds	r3, r6, r3
    10bc:	2100      	movs	r1, #0
    10be:	6059      	str	r1, [r3, #4]
    10c0:	3201      	adds	r2, #1
    10c2:	e7f6      	b.n	10b2 <usart_init+0xd2>
    10c4:	2200      	movs	r2, #0
    10c6:	62b2      	str	r2, [r6, #40]	; 0x28
    10c8:	6272      	str	r2, [r6, #36]	; 0x24
    10ca:	2300      	movs	r3, #0
    10cc:	85f2      	strh	r2, [r6, #46]	; 0x2e
    10ce:	85b2      	strh	r2, [r6, #44]	; 0x2c
    10d0:	3230      	adds	r2, #48	; 0x30
    10d2:	54b3      	strb	r3, [r6, r2]
    10d4:	3201      	adds	r2, #1
    10d6:	54b3      	strb	r3, [r6, r2]
    10d8:	3201      	adds	r2, #1
    10da:	54b3      	strb	r3, [r6, r2]
    10dc:	3201      	adds	r2, #1
    10de:	54b3      	strb	r3, [r6, r2]
    10e0:	6830      	ldr	r0, [r6, #0]
    10e2:	4b05      	ldr	r3, [pc, #20]	; (10f8 <usart_init+0x118>)
    10e4:	4798      	blx	r3
    10e6:	0004      	movs	r4, r0
    10e8:	490b      	ldr	r1, [pc, #44]	; (1118 <usart_init+0x138>)
    10ea:	4b0c      	ldr	r3, [pc, #48]	; (111c <usart_init+0x13c>)
    10ec:	4798      	blx	r3
    10ee:	00a4      	lsls	r4, r4, #2
    10f0:	4b0b      	ldr	r3, [pc, #44]	; (1120 <usart_init+0x140>)
    10f2:	50e6      	str	r6, [r4, r3]
    10f4:	e783      	b.n	ffe <usart_init+0x1e>
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	00000dd5 	.word	0x00000dd5
    10fc:	40000400 	.word	0x40000400
    1100:	00002555 	.word	0x00002555
    1104:	000024cd 	.word	0x000024cd
    1108:	00000c11 	.word	0x00000c11
    110c:	00000e09 	.word	0x00000e09
    1110:	00000c5d 	.word	0x00000c5d
    1114:	00002639 	.word	0x00002639
    1118:	000012e1 	.word	0x000012e1
    111c:	00001f7d 	.word	0x00001f7d
    1120:	200000e8 	.word	0x200000e8

00001124 <usart_write_wait>:
    1124:	6803      	ldr	r3, [r0, #0]
    1126:	79c2      	ldrb	r2, [r0, #7]
    1128:	2a00      	cmp	r2, #0
    112a:	d101      	bne.n	1130 <usart_write_wait+0xc>
    112c:	201c      	movs	r0, #28
    112e:	4770      	bx	lr
    1130:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1132:	b292      	uxth	r2, r2
    1134:	2a00      	cmp	r2, #0
    1136:	d001      	beq.n	113c <usart_write_wait+0x18>
    1138:	2005      	movs	r0, #5
    113a:	e7f8      	b.n	112e <usart_write_wait+0xa>
    113c:	69da      	ldr	r2, [r3, #28]
    113e:	2a00      	cmp	r2, #0
    1140:	d1fc      	bne.n	113c <usart_write_wait+0x18>
    1142:	8519      	strh	r1, [r3, #40]	; 0x28
    1144:	7e1a      	ldrb	r2, [r3, #24]
    1146:	0792      	lsls	r2, r2, #30
    1148:	d5fc      	bpl.n	1144 <usart_write_wait+0x20>
    114a:	2000      	movs	r0, #0
    114c:	e7ef      	b.n	112e <usart_write_wait+0xa>
	...

00001150 <usart_write_buffer_wait>:
    1150:	b5f0      	push	{r4, r5, r6, r7, lr}
    1152:	46c6      	mov	lr, r8
    1154:	b500      	push	{lr}
    1156:	0004      	movs	r4, r0
    1158:	000d      	movs	r5, r1
    115a:	2a00      	cmp	r2, #0
    115c:	d103      	bne.n	1166 <usart_write_buffer_wait+0x16>
    115e:	2017      	movs	r0, #23
    1160:	bc04      	pop	{r2}
    1162:	4690      	mov	r8, r2
    1164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1166:	79c3      	ldrb	r3, [r0, #7]
    1168:	2b00      	cmp	r3, #0
    116a:	d101      	bne.n	1170 <usart_write_buffer_wait+0x20>
    116c:	201c      	movs	r0, #28
    116e:	e7f7      	b.n	1160 <usart_write_buffer_wait+0x10>
    1170:	6806      	ldr	r6, [r0, #0]
    1172:	69f3      	ldr	r3, [r6, #28]
    1174:	2b00      	cmp	r3, #0
    1176:	d1fc      	bne.n	1172 <usart_write_buffer_wait+0x22>
    1178:	2000      	movs	r0, #0
    117a:	e00c      	b.n	1196 <usart_write_buffer_wait+0x46>
    117c:	1c43      	adds	r3, r0, #1
    117e:	b29b      	uxth	r3, r3
    1180:	4698      	mov	r8, r3
    1182:	5c2b      	ldrb	r3, [r5, r0]
    1184:	b299      	uxth	r1, r3
    1186:	7962      	ldrb	r2, [r4, #5]
    1188:	2a01      	cmp	r2, #1
    118a:	d014      	beq.n	11b6 <usart_write_buffer_wait+0x66>
    118c:	0020      	movs	r0, r4
    118e:	4b18      	ldr	r3, [pc, #96]	; (11f0 <usart_write_buffer_wait+0xa0>)
    1190:	4798      	blx	r3
    1192:	4640      	mov	r0, r8
    1194:	003a      	movs	r2, r7
    1196:	1e57      	subs	r7, r2, #1
    1198:	b2bf      	uxth	r7, r7
    119a:	2a00      	cmp	r2, #0
    119c:	d013      	beq.n	11c6 <usart_write_buffer_wait+0x76>
    119e:	2300      	movs	r3, #0
    11a0:	4a14      	ldr	r2, [pc, #80]	; (11f4 <usart_write_buffer_wait+0xa4>)
    11a2:	4293      	cmp	r3, r2
    11a4:	d8ea      	bhi.n	117c <usart_write_buffer_wait+0x2c>
    11a6:	7e32      	ldrb	r2, [r6, #24]
    11a8:	07d2      	lsls	r2, r2, #31
    11aa:	d4e7      	bmi.n	117c <usart_write_buffer_wait+0x2c>
    11ac:	4a11      	ldr	r2, [pc, #68]	; (11f4 <usart_write_buffer_wait+0xa4>)
    11ae:	4293      	cmp	r3, r2
    11b0:	d019      	beq.n	11e6 <usart_write_buffer_wait+0x96>
    11b2:	3301      	adds	r3, #1
    11b4:	e7f4      	b.n	11a0 <usart_write_buffer_wait+0x50>
    11b6:	3002      	adds	r0, #2
    11b8:	4642      	mov	r2, r8
    11ba:	5ca9      	ldrb	r1, [r5, r2]
    11bc:	0209      	lsls	r1, r1, #8
    11be:	4319      	orrs	r1, r3
    11c0:	b283      	uxth	r3, r0
    11c2:	4698      	mov	r8, r3
    11c4:	e7e2      	b.n	118c <usart_write_buffer_wait+0x3c>
    11c6:	2300      	movs	r3, #0
    11c8:	e000      	b.n	11cc <usart_write_buffer_wait+0x7c>
    11ca:	3301      	adds	r3, #1
    11cc:	4a09      	ldr	r2, [pc, #36]	; (11f4 <usart_write_buffer_wait+0xa4>)
    11ce:	4293      	cmp	r3, r2
    11d0:	d807      	bhi.n	11e2 <usart_write_buffer_wait+0x92>
    11d2:	7e32      	ldrb	r2, [r6, #24]
    11d4:	0792      	lsls	r2, r2, #30
    11d6:	d408      	bmi.n	11ea <usart_write_buffer_wait+0x9a>
    11d8:	4a06      	ldr	r2, [pc, #24]	; (11f4 <usart_write_buffer_wait+0xa4>)
    11da:	4293      	cmp	r3, r2
    11dc:	d1f5      	bne.n	11ca <usart_write_buffer_wait+0x7a>
    11de:	2012      	movs	r0, #18
    11e0:	e7be      	b.n	1160 <usart_write_buffer_wait+0x10>
    11e2:	2000      	movs	r0, #0
    11e4:	e7bc      	b.n	1160 <usart_write_buffer_wait+0x10>
    11e6:	2012      	movs	r0, #18
    11e8:	e7ba      	b.n	1160 <usart_write_buffer_wait+0x10>
    11ea:	2000      	movs	r0, #0
    11ec:	e7b8      	b.n	1160 <usart_write_buffer_wait+0x10>
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	00001125 	.word	0x00001125
    11f4:	0000ffff 	.word	0x0000ffff

000011f8 <_usart_write_buffer>:
    11f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11fa:	0006      	movs	r6, r0
    11fc:	000c      	movs	r4, r1
    11fe:	0015      	movs	r5, r2
    1200:	6807      	ldr	r7, [r0, #0]
    1202:	4b0a      	ldr	r3, [pc, #40]	; (122c <_usart_write_buffer+0x34>)
    1204:	4798      	blx	r3
    1206:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1208:	b29b      	uxth	r3, r3
    120a:	2b00      	cmp	r3, #0
    120c:	d003      	beq.n	1216 <_usart_write_buffer+0x1e>
    120e:	4b08      	ldr	r3, [pc, #32]	; (1230 <_usart_write_buffer+0x38>)
    1210:	4798      	blx	r3
    1212:	2005      	movs	r0, #5
    1214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1216:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1218:	4b05      	ldr	r3, [pc, #20]	; (1230 <_usart_write_buffer+0x38>)
    121a:	4798      	blx	r3
    121c:	62b4      	str	r4, [r6, #40]	; 0x28
    121e:	2205      	movs	r2, #5
    1220:	2333      	movs	r3, #51	; 0x33
    1222:	54f2      	strb	r2, [r6, r3]
    1224:	3b32      	subs	r3, #50	; 0x32
    1226:	75bb      	strb	r3, [r7, #22]
    1228:	2000      	movs	r0, #0
    122a:	e7f3      	b.n	1214 <_usart_write_buffer+0x1c>
    122c:	00002045 	.word	0x00002045
    1230:	00002085 	.word	0x00002085

00001234 <_usart_read_buffer>:
    1234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1236:	0004      	movs	r4, r0
    1238:	000d      	movs	r5, r1
    123a:	0016      	movs	r6, r2
    123c:	6807      	ldr	r7, [r0, #0]
    123e:	4b10      	ldr	r3, [pc, #64]	; (1280 <_usart_read_buffer+0x4c>)
    1240:	4798      	blx	r3
    1242:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1244:	b29b      	uxth	r3, r3
    1246:	2b00      	cmp	r3, #0
    1248:	d003      	beq.n	1252 <_usart_read_buffer+0x1e>
    124a:	4b0e      	ldr	r3, [pc, #56]	; (1284 <_usart_read_buffer+0x50>)
    124c:	4798      	blx	r3
    124e:	2005      	movs	r0, #5
    1250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1252:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1254:	4b0b      	ldr	r3, [pc, #44]	; (1284 <_usart_read_buffer+0x50>)
    1256:	4798      	blx	r3
    1258:	6265      	str	r5, [r4, #36]	; 0x24
    125a:	2205      	movs	r2, #5
    125c:	2332      	movs	r3, #50	; 0x32
    125e:	54e2      	strb	r2, [r4, r3]
    1260:	3b2e      	subs	r3, #46	; 0x2e
    1262:	75bb      	strb	r3, [r7, #22]
    1264:	7a23      	ldrb	r3, [r4, #8]
    1266:	2b00      	cmp	r3, #0
    1268:	d001      	beq.n	126e <_usart_read_buffer+0x3a>
    126a:	2320      	movs	r3, #32
    126c:	75bb      	strb	r3, [r7, #22]
    126e:	7a63      	ldrb	r3, [r4, #9]
    1270:	2b00      	cmp	r3, #0
    1272:	d003      	beq.n	127c <_usart_read_buffer+0x48>
    1274:	2308      	movs	r3, #8
    1276:	75bb      	strb	r3, [r7, #22]
    1278:	2000      	movs	r0, #0
    127a:	e7e9      	b.n	1250 <_usart_read_buffer+0x1c>
    127c:	2000      	movs	r0, #0
    127e:	e7e7      	b.n	1250 <_usart_read_buffer+0x1c>
    1280:	00002045 	.word	0x00002045
    1284:	00002085 	.word	0x00002085

00001288 <usart_register_callback>:
    1288:	1c93      	adds	r3, r2, #2
    128a:	009b      	lsls	r3, r3, #2
    128c:	18c3      	adds	r3, r0, r3
    128e:	6059      	str	r1, [r3, #4]
    1290:	2301      	movs	r3, #1
    1292:	4093      	lsls	r3, r2
    1294:	001a      	movs	r2, r3
    1296:	2130      	movs	r1, #48	; 0x30
    1298:	5c43      	ldrb	r3, [r0, r1]
    129a:	4313      	orrs	r3, r2
    129c:	5443      	strb	r3, [r0, r1]
    129e:	4770      	bx	lr

000012a0 <usart_write_buffer_job>:
    12a0:	b510      	push	{r4, lr}
    12a2:	2a00      	cmp	r2, #0
    12a4:	d101      	bne.n	12aa <usart_write_buffer_job+0xa>
    12a6:	2017      	movs	r0, #23
    12a8:	bd10      	pop	{r4, pc}
    12aa:	79c3      	ldrb	r3, [r0, #7]
    12ac:	2b00      	cmp	r3, #0
    12ae:	d101      	bne.n	12b4 <usart_write_buffer_job+0x14>
    12b0:	201c      	movs	r0, #28
    12b2:	e7f9      	b.n	12a8 <usart_write_buffer_job+0x8>
    12b4:	4b01      	ldr	r3, [pc, #4]	; (12bc <usart_write_buffer_job+0x1c>)
    12b6:	4798      	blx	r3
    12b8:	e7f6      	b.n	12a8 <usart_write_buffer_job+0x8>
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	000011f9 	.word	0x000011f9

000012c0 <usart_read_buffer_job>:
    12c0:	b510      	push	{r4, lr}
    12c2:	2a00      	cmp	r2, #0
    12c4:	d101      	bne.n	12ca <usart_read_buffer_job+0xa>
    12c6:	2017      	movs	r0, #23
    12c8:	bd10      	pop	{r4, pc}
    12ca:	7983      	ldrb	r3, [r0, #6]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d101      	bne.n	12d4 <usart_read_buffer_job+0x14>
    12d0:	201c      	movs	r0, #28
    12d2:	e7f9      	b.n	12c8 <usart_read_buffer_job+0x8>
    12d4:	4b01      	ldr	r3, [pc, #4]	; (12dc <usart_read_buffer_job+0x1c>)
    12d6:	4798      	blx	r3
    12d8:	e7f6      	b.n	12c8 <usart_read_buffer_job+0x8>
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	00001235 	.word	0x00001235

000012e0 <_usart_interrupt_handler>:
    12e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12e2:	46c6      	mov	lr, r8
    12e4:	b500      	push	{lr}
    12e6:	0080      	lsls	r0, r0, #2
    12e8:	4b64      	ldr	r3, [pc, #400]	; (147c <_usart_interrupt_handler+0x19c>)
    12ea:	58c5      	ldr	r5, [r0, r3]
    12ec:	682c      	ldr	r4, [r5, #0]
    12ee:	69e3      	ldr	r3, [r4, #28]
    12f0:	2b00      	cmp	r3, #0
    12f2:	d1fc      	bne.n	12ee <_usart_interrupt_handler+0xe>
    12f4:	7e23      	ldrb	r3, [r4, #24]
    12f6:	7da6      	ldrb	r6, [r4, #22]
    12f8:	401e      	ands	r6, r3
    12fa:	2330      	movs	r3, #48	; 0x30
    12fc:	5ceb      	ldrb	r3, [r5, r3]
    12fe:	2231      	movs	r2, #49	; 0x31
    1300:	5caf      	ldrb	r7, [r5, r2]
    1302:	401f      	ands	r7, r3
    1304:	07f3      	lsls	r3, r6, #31
    1306:	d525      	bpl.n	1354 <_usart_interrupt_handler+0x74>
    1308:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    130a:	b29b      	uxth	r3, r3
    130c:	2b00      	cmp	r3, #0
    130e:	d01f      	beq.n	1350 <_usart_interrupt_handler+0x70>
    1310:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1312:	780a      	ldrb	r2, [r1, #0]
    1314:	b2d2      	uxtb	r2, r2
    1316:	b293      	uxth	r3, r2
    1318:	4698      	mov	r8, r3
    131a:	1c48      	adds	r0, r1, #1
    131c:	62a8      	str	r0, [r5, #40]	; 0x28
    131e:	796b      	ldrb	r3, [r5, #5]
    1320:	2b01      	cmp	r3, #1
    1322:	d00e      	beq.n	1342 <_usart_interrupt_handler+0x62>
    1324:	4643      	mov	r3, r8
    1326:	05db      	lsls	r3, r3, #23
    1328:	0ddb      	lsrs	r3, r3, #23
    132a:	8523      	strh	r3, [r4, #40]	; 0x28
    132c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    132e:	3b01      	subs	r3, #1
    1330:	b29b      	uxth	r3, r3
    1332:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1334:	2b00      	cmp	r3, #0
    1336:	d10d      	bne.n	1354 <_usart_interrupt_handler+0x74>
    1338:	3301      	adds	r3, #1
    133a:	7523      	strb	r3, [r4, #20]
    133c:	3301      	adds	r3, #1
    133e:	75a3      	strb	r3, [r4, #22]
    1340:	e008      	b.n	1354 <_usart_interrupt_handler+0x74>
    1342:	784b      	ldrb	r3, [r1, #1]
    1344:	021b      	lsls	r3, r3, #8
    1346:	4313      	orrs	r3, r2
    1348:	4698      	mov	r8, r3
    134a:	1c88      	adds	r0, r1, #2
    134c:	62a8      	str	r0, [r5, #40]	; 0x28
    134e:	e7e9      	b.n	1324 <_usart_interrupt_handler+0x44>
    1350:	2301      	movs	r3, #1
    1352:	7523      	strb	r3, [r4, #20]
    1354:	07b3      	lsls	r3, r6, #30
    1356:	d506      	bpl.n	1366 <_usart_interrupt_handler+0x86>
    1358:	2302      	movs	r3, #2
    135a:	7523      	strb	r3, [r4, #20]
    135c:	2200      	movs	r2, #0
    135e:	3331      	adds	r3, #49	; 0x31
    1360:	54ea      	strb	r2, [r5, r3]
    1362:	07fb      	lsls	r3, r7, #31
    1364:	d41c      	bmi.n	13a0 <_usart_interrupt_handler+0xc0>
    1366:	0773      	lsls	r3, r6, #29
    1368:	d564      	bpl.n	1434 <_usart_interrupt_handler+0x154>
    136a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    136c:	b29b      	uxth	r3, r3
    136e:	2b00      	cmp	r3, #0
    1370:	d05e      	beq.n	1430 <_usart_interrupt_handler+0x150>
    1372:	8b62      	ldrh	r2, [r4, #26]
    1374:	b2d2      	uxtb	r2, r2
    1376:	233f      	movs	r3, #63	; 0x3f
    1378:	4013      	ands	r3, r2
    137a:	0711      	lsls	r1, r2, #28
    137c:	d501      	bpl.n	1382 <_usart_interrupt_handler+0xa2>
    137e:	2337      	movs	r3, #55	; 0x37
    1380:	4013      	ands	r3, r2
    1382:	2b00      	cmp	r3, #0
    1384:	d031      	beq.n	13ea <_usart_interrupt_handler+0x10a>
    1386:	079a      	lsls	r2, r3, #30
    1388:	d50e      	bpl.n	13a8 <_usart_interrupt_handler+0xc8>
    138a:	221a      	movs	r2, #26
    138c:	2332      	movs	r3, #50	; 0x32
    138e:	54ea      	strb	r2, [r5, r3]
    1390:	3b30      	subs	r3, #48	; 0x30
    1392:	8363      	strh	r3, [r4, #26]
    1394:	077b      	lsls	r3, r7, #29
    1396:	d54d      	bpl.n	1434 <_usart_interrupt_handler+0x154>
    1398:	0028      	movs	r0, r5
    139a:	696b      	ldr	r3, [r5, #20]
    139c:	4798      	blx	r3
    139e:	e049      	b.n	1434 <_usart_interrupt_handler+0x154>
    13a0:	0028      	movs	r0, r5
    13a2:	68eb      	ldr	r3, [r5, #12]
    13a4:	4798      	blx	r3
    13a6:	e7de      	b.n	1366 <_usart_interrupt_handler+0x86>
    13a8:	075a      	lsls	r2, r3, #29
    13aa:	d505      	bpl.n	13b8 <_usart_interrupt_handler+0xd8>
    13ac:	221e      	movs	r2, #30
    13ae:	2332      	movs	r3, #50	; 0x32
    13b0:	54ea      	strb	r2, [r5, r3]
    13b2:	3b2e      	subs	r3, #46	; 0x2e
    13b4:	8363      	strh	r3, [r4, #26]
    13b6:	e7ed      	b.n	1394 <_usart_interrupt_handler+0xb4>
    13b8:	07da      	lsls	r2, r3, #31
    13ba:	d505      	bpl.n	13c8 <_usart_interrupt_handler+0xe8>
    13bc:	2213      	movs	r2, #19
    13be:	2332      	movs	r3, #50	; 0x32
    13c0:	54ea      	strb	r2, [r5, r3]
    13c2:	3b31      	subs	r3, #49	; 0x31
    13c4:	8363      	strh	r3, [r4, #26]
    13c6:	e7e5      	b.n	1394 <_usart_interrupt_handler+0xb4>
    13c8:	06da      	lsls	r2, r3, #27
    13ca:	d505      	bpl.n	13d8 <_usart_interrupt_handler+0xf8>
    13cc:	2242      	movs	r2, #66	; 0x42
    13ce:	2332      	movs	r3, #50	; 0x32
    13d0:	54ea      	strb	r2, [r5, r3]
    13d2:	3b22      	subs	r3, #34	; 0x22
    13d4:	8363      	strh	r3, [r4, #26]
    13d6:	e7dd      	b.n	1394 <_usart_interrupt_handler+0xb4>
    13d8:	2220      	movs	r2, #32
    13da:	421a      	tst	r2, r3
    13dc:	d0da      	beq.n	1394 <_usart_interrupt_handler+0xb4>
    13de:	3221      	adds	r2, #33	; 0x21
    13e0:	2332      	movs	r3, #50	; 0x32
    13e2:	54ea      	strb	r2, [r5, r3]
    13e4:	3b12      	subs	r3, #18
    13e6:	8363      	strh	r3, [r4, #26]
    13e8:	e7d4      	b.n	1394 <_usart_interrupt_handler+0xb4>
    13ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    13ec:	05db      	lsls	r3, r3, #23
    13ee:	0ddb      	lsrs	r3, r3, #23
    13f0:	b2da      	uxtb	r2, r3
    13f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    13f4:	700a      	strb	r2, [r1, #0]
    13f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    13f8:	1c51      	adds	r1, r2, #1
    13fa:	6269      	str	r1, [r5, #36]	; 0x24
    13fc:	7969      	ldrb	r1, [r5, #5]
    13fe:	2901      	cmp	r1, #1
    1400:	d010      	beq.n	1424 <_usart_interrupt_handler+0x144>
    1402:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1404:	3b01      	subs	r3, #1
    1406:	b29b      	uxth	r3, r3
    1408:	85ab      	strh	r3, [r5, #44]	; 0x2c
    140a:	2b00      	cmp	r3, #0
    140c:	d112      	bne.n	1434 <_usart_interrupt_handler+0x154>
    140e:	3304      	adds	r3, #4
    1410:	7523      	strb	r3, [r4, #20]
    1412:	2200      	movs	r2, #0
    1414:	332e      	adds	r3, #46	; 0x2e
    1416:	54ea      	strb	r2, [r5, r3]
    1418:	07bb      	lsls	r3, r7, #30
    141a:	d50b      	bpl.n	1434 <_usart_interrupt_handler+0x154>
    141c:	0028      	movs	r0, r5
    141e:	692b      	ldr	r3, [r5, #16]
    1420:	4798      	blx	r3
    1422:	e007      	b.n	1434 <_usart_interrupt_handler+0x154>
    1424:	0a1b      	lsrs	r3, r3, #8
    1426:	7053      	strb	r3, [r2, #1]
    1428:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    142a:	3301      	adds	r3, #1
    142c:	626b      	str	r3, [r5, #36]	; 0x24
    142e:	e7e8      	b.n	1402 <_usart_interrupt_handler+0x122>
    1430:	2304      	movs	r3, #4
    1432:	7523      	strb	r3, [r4, #20]
    1434:	06f3      	lsls	r3, r6, #27
    1436:	d504      	bpl.n	1442 <_usart_interrupt_handler+0x162>
    1438:	2310      	movs	r3, #16
    143a:	7523      	strb	r3, [r4, #20]
    143c:	7623      	strb	r3, [r4, #24]
    143e:	06fb      	lsls	r3, r7, #27
    1440:	d410      	bmi.n	1464 <_usart_interrupt_handler+0x184>
    1442:	06b3      	lsls	r3, r6, #26
    1444:	d504      	bpl.n	1450 <_usart_interrupt_handler+0x170>
    1446:	2320      	movs	r3, #32
    1448:	7523      	strb	r3, [r4, #20]
    144a:	7623      	strb	r3, [r4, #24]
    144c:	073b      	lsls	r3, r7, #28
    144e:	d40d      	bmi.n	146c <_usart_interrupt_handler+0x18c>
    1450:	0733      	lsls	r3, r6, #28
    1452:	d504      	bpl.n	145e <_usart_interrupt_handler+0x17e>
    1454:	2308      	movs	r3, #8
    1456:	7523      	strb	r3, [r4, #20]
    1458:	7623      	strb	r3, [r4, #24]
    145a:	06bb      	lsls	r3, r7, #26
    145c:	d40a      	bmi.n	1474 <_usart_interrupt_handler+0x194>
    145e:	bc04      	pop	{r2}
    1460:	4690      	mov	r8, r2
    1462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1464:	0028      	movs	r0, r5
    1466:	69eb      	ldr	r3, [r5, #28]
    1468:	4798      	blx	r3
    146a:	e7ea      	b.n	1442 <_usart_interrupt_handler+0x162>
    146c:	0028      	movs	r0, r5
    146e:	69ab      	ldr	r3, [r5, #24]
    1470:	4798      	blx	r3
    1472:	e7ed      	b.n	1450 <_usart_interrupt_handler+0x170>
    1474:	6a2b      	ldr	r3, [r5, #32]
    1476:	0028      	movs	r0, r5
    1478:	4798      	blx	r3
    147a:	e7f0      	b.n	145e <_usart_interrupt_handler+0x17e>
    147c:	200000e8 	.word	0x200000e8

00001480 <_spi_clear_tx_complete_flag>:
    1480:	6803      	ldr	r3, [r0, #0]
    1482:	2202      	movs	r2, #2
    1484:	761a      	strb	r2, [r3, #24]
    1486:	4770      	bx	lr

00001488 <_spi_set_config>:
    1488:	b5f0      	push	{r4, r5, r6, r7, lr}
    148a:	b087      	sub	sp, #28
    148c:	0007      	movs	r7, r0
    148e:	000d      	movs	r5, r1
    1490:	6806      	ldr	r6, [r0, #0]
    1492:	ab05      	add	r3, sp, #20
    1494:	2280      	movs	r2, #128	; 0x80
    1496:	701a      	strb	r2, [r3, #0]
    1498:	2200      	movs	r2, #0
    149a:	705a      	strb	r2, [r3, #1]
    149c:	2101      	movs	r1, #1
    149e:	7099      	strb	r1, [r3, #2]
    14a0:	70da      	strb	r2, [r3, #3]
    14a2:	782b      	ldrb	r3, [r5, #0]
    14a4:	2b00      	cmp	r3, #0
    14a6:	d101      	bne.n	14ac <_spi_set_config+0x24>
    14a8:	ab05      	add	r3, sp, #20
    14aa:	709a      	strb	r2, [r3, #2]
    14ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
    14ae:	9301      	str	r3, [sp, #4]
    14b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    14b2:	9302      	str	r3, [sp, #8]
    14b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    14b6:	9303      	str	r3, [sp, #12]
    14b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    14ba:	9304      	str	r3, [sp, #16]
    14bc:	2400      	movs	r4, #0
    14be:	e006      	b.n	14ce <_spi_set_config+0x46>
    14c0:	0021      	movs	r1, r4
    14c2:	0030      	movs	r0, r6
    14c4:	4b3d      	ldr	r3, [pc, #244]	; (15bc <_spi_set_config+0x134>)
    14c6:	4798      	blx	r3
    14c8:	e008      	b.n	14dc <_spi_set_config+0x54>
    14ca:	3401      	adds	r4, #1
    14cc:	b2e4      	uxtb	r4, r4
    14ce:	2c03      	cmp	r4, #3
    14d0:	d80d      	bhi.n	14ee <_spi_set_config+0x66>
    14d2:	00a3      	lsls	r3, r4, #2
    14d4:	aa01      	add	r2, sp, #4
    14d6:	5898      	ldr	r0, [r3, r2]
    14d8:	2800      	cmp	r0, #0
    14da:	d0f1      	beq.n	14c0 <_spi_set_config+0x38>
    14dc:	1c43      	adds	r3, r0, #1
    14de:	d0f4      	beq.n	14ca <_spi_set_config+0x42>
    14e0:	a905      	add	r1, sp, #20
    14e2:	7008      	strb	r0, [r1, #0]
    14e4:	0c00      	lsrs	r0, r0, #16
    14e6:	b2c0      	uxtb	r0, r0
    14e8:	4b35      	ldr	r3, [pc, #212]	; (15c0 <_spi_set_config+0x138>)
    14ea:	4798      	blx	r3
    14ec:	e7ed      	b.n	14ca <_spi_set_config+0x42>
    14ee:	782b      	ldrb	r3, [r5, #0]
    14f0:	717b      	strb	r3, [r7, #5]
    14f2:	7c2b      	ldrb	r3, [r5, #16]
    14f4:	71bb      	strb	r3, [r7, #6]
    14f6:	7cab      	ldrb	r3, [r5, #18]
    14f8:	71fb      	strb	r3, [r7, #7]
    14fa:	7d2b      	ldrb	r3, [r5, #20]
    14fc:	723b      	strb	r3, [r7, #8]
    14fe:	2200      	movs	r2, #0
    1500:	466b      	mov	r3, sp
    1502:	805a      	strh	r2, [r3, #2]
    1504:	782b      	ldrb	r3, [r5, #0]
    1506:	2b01      	cmp	r3, #1
    1508:	d014      	beq.n	1534 <_spi_set_config+0xac>
    150a:	782b      	ldrb	r3, [r5, #0]
    150c:	2b00      	cmp	r3, #0
    150e:	d127      	bne.n	1560 <_spi_set_config+0xd8>
    1510:	69ab      	ldr	r3, [r5, #24]
    1512:	8baa      	ldrh	r2, [r5, #28]
    1514:	0011      	movs	r1, r2
    1516:	6a70      	ldr	r0, [r6, #36]	; 0x24
    1518:	7fac      	ldrb	r4, [r5, #30]
    151a:	7fef      	ldrb	r7, [r5, #31]
    151c:	043f      	lsls	r7, r7, #16
    151e:	433c      	orrs	r4, r7
    1520:	4320      	orrs	r0, r4
    1522:	6270      	str	r0, [r6, #36]	; 0x24
    1524:	2020      	movs	r0, #32
    1526:	5c28      	ldrb	r0, [r5, r0]
    1528:	2800      	cmp	r0, #0
    152a:	d01b      	beq.n	1564 <_spi_set_config+0xdc>
    152c:	2140      	movs	r1, #64	; 0x40
    152e:	4311      	orrs	r1, r2
    1530:	b289      	uxth	r1, r1
    1532:	e017      	b.n	1564 <_spi_set_config+0xdc>
    1534:	6838      	ldr	r0, [r7, #0]
    1536:	4b23      	ldr	r3, [pc, #140]	; (15c4 <_spi_set_config+0x13c>)
    1538:	4798      	blx	r3
    153a:	3014      	adds	r0, #20
    153c:	b2c0      	uxtb	r0, r0
    153e:	4b22      	ldr	r3, [pc, #136]	; (15c8 <_spi_set_config+0x140>)
    1540:	4798      	blx	r3
    1542:	0001      	movs	r1, r0
    1544:	466b      	mov	r3, sp
    1546:	1c9a      	adds	r2, r3, #2
    1548:	69a8      	ldr	r0, [r5, #24]
    154a:	4b20      	ldr	r3, [pc, #128]	; (15cc <_spi_set_config+0x144>)
    154c:	4798      	blx	r3
    154e:	2800      	cmp	r0, #0
    1550:	d001      	beq.n	1556 <_spi_set_config+0xce>
    1552:	2017      	movs	r0, #23
    1554:	e030      	b.n	15b8 <_spi_set_config+0x130>
    1556:	466b      	mov	r3, sp
    1558:	3302      	adds	r3, #2
    155a:	781b      	ldrb	r3, [r3, #0]
    155c:	7333      	strb	r3, [r6, #12]
    155e:	e7d4      	b.n	150a <_spi_set_config+0x82>
    1560:	2100      	movs	r1, #0
    1562:	2300      	movs	r3, #0
    1564:	686a      	ldr	r2, [r5, #4]
    1566:	4313      	orrs	r3, r2
    1568:	68aa      	ldr	r2, [r5, #8]
    156a:	4313      	orrs	r3, r2
    156c:	68ea      	ldr	r2, [r5, #12]
    156e:	4313      	orrs	r3, r2
    1570:	7c2a      	ldrb	r2, [r5, #16]
    1572:	430a      	orrs	r2, r1
    1574:	7c69      	ldrb	r1, [r5, #17]
    1576:	2900      	cmp	r1, #0
    1578:	d103      	bne.n	1582 <_spi_set_config+0xfa>
    157a:	4915      	ldr	r1, [pc, #84]	; (15d0 <_spi_set_config+0x148>)
    157c:	7889      	ldrb	r1, [r1, #2]
    157e:	0789      	lsls	r1, r1, #30
    1580:	d501      	bpl.n	1586 <_spi_set_config+0xfe>
    1582:	2180      	movs	r1, #128	; 0x80
    1584:	430b      	orrs	r3, r1
    1586:	7ca9      	ldrb	r1, [r5, #18]
    1588:	2900      	cmp	r1, #0
    158a:	d002      	beq.n	1592 <_spi_set_config+0x10a>
    158c:	2180      	movs	r1, #128	; 0x80
    158e:	0289      	lsls	r1, r1, #10
    1590:	430a      	orrs	r2, r1
    1592:	7ce9      	ldrb	r1, [r5, #19]
    1594:	2900      	cmp	r1, #0
    1596:	d002      	beq.n	159e <_spi_set_config+0x116>
    1598:	2180      	movs	r1, #128	; 0x80
    159a:	0089      	lsls	r1, r1, #2
    159c:	430a      	orrs	r2, r1
    159e:	7d29      	ldrb	r1, [r5, #20]
    15a0:	2900      	cmp	r1, #0
    15a2:	d002      	beq.n	15aa <_spi_set_config+0x122>
    15a4:	2180      	movs	r1, #128	; 0x80
    15a6:	0189      	lsls	r1, r1, #6
    15a8:	430a      	orrs	r2, r1
    15aa:	6831      	ldr	r1, [r6, #0]
    15ac:	430b      	orrs	r3, r1
    15ae:	6033      	str	r3, [r6, #0]
    15b0:	6873      	ldr	r3, [r6, #4]
    15b2:	431a      	orrs	r2, r3
    15b4:	6072      	str	r2, [r6, #4]
    15b6:	2000      	movs	r0, #0
    15b8:	b007      	add	sp, #28
    15ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15bc:	00000c5d 	.word	0x00000c5d
    15c0:	00002639 	.word	0x00002639
    15c4:	00000dd5 	.word	0x00000dd5
    15c8:	00002571 	.word	0x00002571
    15cc:	00000b4b 	.word	0x00000b4b
    15d0:	41002000 	.word	0x41002000

000015d4 <spi_init>:
    15d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15d6:	b085      	sub	sp, #20
    15d8:	0005      	movs	r5, r0
    15da:	000c      	movs	r4, r1
    15dc:	0016      	movs	r6, r2
    15de:	6029      	str	r1, [r5, #0]
    15e0:	680b      	ldr	r3, [r1, #0]
    15e2:	079b      	lsls	r3, r3, #30
    15e4:	d502      	bpl.n	15ec <spi_init+0x18>
    15e6:	201c      	movs	r0, #28
    15e8:	b005      	add	sp, #20
    15ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15ec:	680b      	ldr	r3, [r1, #0]
    15ee:	07db      	lsls	r3, r3, #31
    15f0:	d501      	bpl.n	15f6 <spi_init+0x22>
    15f2:	2005      	movs	r0, #5
    15f4:	e7f8      	b.n	15e8 <spi_init+0x14>
    15f6:	0008      	movs	r0, r1
    15f8:	4b28      	ldr	r3, [pc, #160]	; (169c <spi_init+0xc8>)
    15fa:	4798      	blx	r3
    15fc:	1c82      	adds	r2, r0, #2
    15fe:	3014      	adds	r0, #20
    1600:	2301      	movs	r3, #1
    1602:	4093      	lsls	r3, r2
    1604:	4a26      	ldr	r2, [pc, #152]	; (16a0 <spi_init+0xcc>)
    1606:	6a11      	ldr	r1, [r2, #32]
    1608:	430b      	orrs	r3, r1
    160a:	6213      	str	r3, [r2, #32]
    160c:	2724      	movs	r7, #36	; 0x24
    160e:	5df3      	ldrb	r3, [r6, r7]
    1610:	a903      	add	r1, sp, #12
    1612:	700b      	strb	r3, [r1, #0]
    1614:	b2c3      	uxtb	r3, r0
    1616:	9301      	str	r3, [sp, #4]
    1618:	0018      	movs	r0, r3
    161a:	4b22      	ldr	r3, [pc, #136]	; (16a4 <spi_init+0xd0>)
    161c:	4798      	blx	r3
    161e:	9801      	ldr	r0, [sp, #4]
    1620:	4b21      	ldr	r3, [pc, #132]	; (16a8 <spi_init+0xd4>)
    1622:	4798      	blx	r3
    1624:	5df0      	ldrb	r0, [r6, r7]
    1626:	2100      	movs	r1, #0
    1628:	4b20      	ldr	r3, [pc, #128]	; (16ac <spi_init+0xd8>)
    162a:	4798      	blx	r3
    162c:	7833      	ldrb	r3, [r6, #0]
    162e:	2b01      	cmp	r3, #1
    1630:	d008      	beq.n	1644 <spi_init+0x70>
    1632:	7833      	ldrb	r3, [r6, #0]
    1634:	2b00      	cmp	r3, #0
    1636:	d103      	bne.n	1640 <spi_init+0x6c>
    1638:	6823      	ldr	r3, [r4, #0]
    163a:	2208      	movs	r2, #8
    163c:	4313      	orrs	r3, r2
    163e:	6023      	str	r3, [r4, #0]
    1640:	2300      	movs	r3, #0
    1642:	e00b      	b.n	165c <spi_init+0x88>
    1644:	6823      	ldr	r3, [r4, #0]
    1646:	220c      	movs	r2, #12
    1648:	4313      	orrs	r3, r2
    164a:	6023      	str	r3, [r4, #0]
    164c:	e7f1      	b.n	1632 <spi_init+0x5e>
    164e:	1c9a      	adds	r2, r3, #2
    1650:	0092      	lsls	r2, r2, #2
    1652:	18aa      	adds	r2, r5, r2
    1654:	2100      	movs	r1, #0
    1656:	6051      	str	r1, [r2, #4]
    1658:	3301      	adds	r3, #1
    165a:	b2db      	uxtb	r3, r3
    165c:	2b06      	cmp	r3, #6
    165e:	d9f6      	bls.n	164e <spi_init+0x7a>
    1660:	2200      	movs	r2, #0
    1662:	62ea      	str	r2, [r5, #44]	; 0x2c
    1664:	62aa      	str	r2, [r5, #40]	; 0x28
    1666:	2300      	movs	r3, #0
    1668:	86aa      	strh	r2, [r5, #52]	; 0x34
    166a:	862a      	strh	r2, [r5, #48]	; 0x30
    166c:	3236      	adds	r2, #54	; 0x36
    166e:	54ab      	strb	r3, [r5, r2]
    1670:	3201      	adds	r2, #1
    1672:	54ab      	strb	r3, [r5, r2]
    1674:	3201      	adds	r2, #1
    1676:	54ab      	strb	r3, [r5, r2]
    1678:	3a35      	subs	r2, #53	; 0x35
    167a:	726a      	strb	r2, [r5, #9]
    167c:	712b      	strb	r3, [r5, #4]
    167e:	6828      	ldr	r0, [r5, #0]
    1680:	4b06      	ldr	r3, [pc, #24]	; (169c <spi_init+0xc8>)
    1682:	4798      	blx	r3
    1684:	0004      	movs	r4, r0
    1686:	490a      	ldr	r1, [pc, #40]	; (16b0 <spi_init+0xdc>)
    1688:	4b0a      	ldr	r3, [pc, #40]	; (16b4 <spi_init+0xe0>)
    168a:	4798      	blx	r3
    168c:	00a4      	lsls	r4, r4, #2
    168e:	4b0a      	ldr	r3, [pc, #40]	; (16b8 <spi_init+0xe4>)
    1690:	50e5      	str	r5, [r4, r3]
    1692:	0031      	movs	r1, r6
    1694:	0028      	movs	r0, r5
    1696:	4b09      	ldr	r3, [pc, #36]	; (16bc <spi_init+0xe8>)
    1698:	4798      	blx	r3
    169a:	e7a5      	b.n	15e8 <spi_init+0x14>
    169c:	00000dd5 	.word	0x00000dd5
    16a0:	40000400 	.word	0x40000400
    16a4:	00002555 	.word	0x00002555
    16a8:	000024cd 	.word	0x000024cd
    16ac:	00000c11 	.word	0x00000c11
    16b0:	00001db1 	.word	0x00001db1
    16b4:	00001f7d 	.word	0x00001f7d
    16b8:	200000e8 	.word	0x200000e8
    16bc:	00001489 	.word	0x00001489

000016c0 <spi_read_buffer_wait>:
    16c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16c2:	0004      	movs	r4, r0
    16c4:	000e      	movs	r6, r1
    16c6:	0017      	movs	r7, r2
    16c8:	001d      	movs	r5, r3
    16ca:	2338      	movs	r3, #56	; 0x38
    16cc:	5cc3      	ldrb	r3, [r0, r3]
    16ce:	2b05      	cmp	r3, #5
    16d0:	d06d      	beq.n	17ae <spi_read_buffer_wait+0xee>
    16d2:	2a00      	cmp	r2, #0
    16d4:	d101      	bne.n	16da <spi_read_buffer_wait+0x1a>
    16d6:	2217      	movs	r2, #23
    16d8:	e06a      	b.n	17b0 <spi_read_buffer_wait+0xf0>
    16da:	79c3      	ldrb	r3, [r0, #7]
    16dc:	2b00      	cmp	r3, #0
    16de:	d101      	bne.n	16e4 <spi_read_buffer_wait+0x24>
    16e0:	221c      	movs	r2, #28
    16e2:	e065      	b.n	17b0 <spi_read_buffer_wait+0xf0>
    16e4:	7943      	ldrb	r3, [r0, #5]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d103      	bne.n	16f2 <spi_read_buffer_wait+0x32>
    16ea:	6803      	ldr	r3, [r0, #0]
    16ec:	7e1b      	ldrb	r3, [r3, #24]
    16ee:	079b      	lsls	r3, r3, #30
    16f0:	d401      	bmi.n	16f6 <spi_read_buffer_wait+0x36>
    16f2:	2000      	movs	r0, #0
    16f4:	e037      	b.n	1766 <spi_read_buffer_wait+0xa6>
    16f6:	4b2f      	ldr	r3, [pc, #188]	; (17b4 <spi_read_buffer_wait+0xf4>)
    16f8:	4798      	blx	r3
    16fa:	e7fa      	b.n	16f2 <spi_read_buffer_wait+0x32>
    16fc:	6823      	ldr	r3, [r4, #0]
    16fe:	7e1a      	ldrb	r2, [r3, #24]
    1700:	07d2      	lsls	r2, r2, #31
    1702:	d5fb      	bpl.n	16fc <spi_read_buffer_wait+0x3c>
    1704:	7e1a      	ldrb	r2, [r3, #24]
    1706:	07d2      	lsls	r2, r2, #31
    1708:	d534      	bpl.n	1774 <spi_read_buffer_wait+0xb4>
    170a:	05ea      	lsls	r2, r5, #23
    170c:	0dd2      	lsrs	r2, r2, #23
    170e:	629a      	str	r2, [r3, #40]	; 0x28
    1710:	e030      	b.n	1774 <spi_read_buffer_wait+0xb4>
    1712:	2300      	movs	r3, #0
    1714:	4a28      	ldr	r2, [pc, #160]	; (17b8 <spi_read_buffer_wait+0xf8>)
    1716:	4293      	cmp	r3, r2
    1718:	d805      	bhi.n	1726 <spi_read_buffer_wait+0x66>
    171a:	6822      	ldr	r2, [r4, #0]
    171c:	7e12      	ldrb	r2, [r2, #24]
    171e:	0752      	lsls	r2, r2, #29
    1720:	d401      	bmi.n	1726 <spi_read_buffer_wait+0x66>
    1722:	3301      	adds	r3, #1
    1724:	e7f6      	b.n	1714 <spi_read_buffer_wait+0x54>
    1726:	6823      	ldr	r3, [r4, #0]
    1728:	7e1a      	ldrb	r2, [r3, #24]
    172a:	0792      	lsls	r2, r2, #30
    172c:	d404      	bmi.n	1738 <spi_read_buffer_wait+0x78>
    172e:	7e1b      	ldrb	r3, [r3, #24]
    1730:	075b      	lsls	r3, r3, #29
    1732:	d422      	bmi.n	177a <spi_read_buffer_wait+0xba>
    1734:	2212      	movs	r2, #18
    1736:	e03b      	b.n	17b0 <spi_read_buffer_wait+0xf0>
    1738:	0020      	movs	r0, r4
    173a:	4b1e      	ldr	r3, [pc, #120]	; (17b4 <spi_read_buffer_wait+0xf4>)
    173c:	4798      	blx	r3
    173e:	2204      	movs	r2, #4
    1740:	e036      	b.n	17b0 <spi_read_buffer_wait+0xf0>
    1742:	2200      	movs	r2, #0
    1744:	e026      	b.n	1794 <spi_read_buffer_wait+0xd4>
    1746:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    1748:	05ff      	lsls	r7, r7, #23
    174a:	0dff      	lsrs	r7, r7, #23
    174c:	e001      	b.n	1752 <spi_read_buffer_wait+0x92>
    174e:	2700      	movs	r7, #0
    1750:	2210      	movs	r2, #16
    1752:	2a00      	cmp	r2, #0
    1754:	d12c      	bne.n	17b0 <spi_read_buffer_wait+0xf0>
    1756:	1c43      	adds	r3, r0, #1
    1758:	b29b      	uxth	r3, r3
    175a:	5437      	strb	r7, [r6, r0]
    175c:	79a2      	ldrb	r2, [r4, #6]
    175e:	2a01      	cmp	r2, #1
    1760:	d01e      	beq.n	17a0 <spi_read_buffer_wait+0xe0>
    1762:	0018      	movs	r0, r3
    1764:	000f      	movs	r7, r1
    1766:	1e79      	subs	r1, r7, #1
    1768:	b289      	uxth	r1, r1
    176a:	2f00      	cmp	r7, #0
    176c:	d01d      	beq.n	17aa <spi_read_buffer_wait+0xea>
    176e:	7963      	ldrb	r3, [r4, #5]
    1770:	2b01      	cmp	r3, #1
    1772:	d0c3      	beq.n	16fc <spi_read_buffer_wait+0x3c>
    1774:	7963      	ldrb	r3, [r4, #5]
    1776:	2b00      	cmp	r3, #0
    1778:	d0cb      	beq.n	1712 <spi_read_buffer_wait+0x52>
    177a:	6823      	ldr	r3, [r4, #0]
    177c:	7e1a      	ldrb	r2, [r3, #24]
    177e:	0752      	lsls	r2, r2, #29
    1780:	d5fb      	bpl.n	177a <spi_read_buffer_wait+0xba>
    1782:	7e1a      	ldrb	r2, [r3, #24]
    1784:	0752      	lsls	r2, r2, #29
    1786:	d5e2      	bpl.n	174e <spi_read_buffer_wait+0x8e>
    1788:	8b5a      	ldrh	r2, [r3, #26]
    178a:	0752      	lsls	r2, r2, #29
    178c:	d5d9      	bpl.n	1742 <spi_read_buffer_wait+0x82>
    178e:	2204      	movs	r2, #4
    1790:	835a      	strh	r2, [r3, #26]
    1792:	321a      	adds	r2, #26
    1794:	79a7      	ldrb	r7, [r4, #6]
    1796:	2f01      	cmp	r7, #1
    1798:	d0d5      	beq.n	1746 <spi_read_buffer_wait+0x86>
    179a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    179c:	b2ff      	uxtb	r7, r7
    179e:	e7d8      	b.n	1752 <spi_read_buffer_wait+0x92>
    17a0:	3002      	adds	r0, #2
    17a2:	0a3f      	lsrs	r7, r7, #8
    17a4:	54f7      	strb	r7, [r6, r3]
    17a6:	b283      	uxth	r3, r0
    17a8:	e7db      	b.n	1762 <spi_read_buffer_wait+0xa2>
    17aa:	2200      	movs	r2, #0
    17ac:	e000      	b.n	17b0 <spi_read_buffer_wait+0xf0>
    17ae:	2205      	movs	r2, #5
    17b0:	0010      	movs	r0, r2
    17b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17b4:	00001481 	.word	0x00001481
    17b8:	00002710 	.word	0x00002710

000017bc <spi_select_slave>:
    17bc:	b510      	push	{r4, lr}
    17be:	7943      	ldrb	r3, [r0, #5]
    17c0:	2b01      	cmp	r3, #1
    17c2:	d001      	beq.n	17c8 <spi_select_slave+0xc>
    17c4:	2015      	movs	r0, #21
    17c6:	bd10      	pop	{r4, pc}
    17c8:	7a03      	ldrb	r3, [r0, #8]
    17ca:	2b00      	cmp	r3, #0
    17cc:	d16c      	bne.n	18a8 <spi_select_slave+0xec>
    17ce:	2a00      	cmp	r2, #0
    17d0:	d058      	beq.n	1884 <spi_select_slave+0xc8>
    17d2:	784b      	ldrb	r3, [r1, #1]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d043      	beq.n	1860 <spi_select_slave+0xa4>
    17d8:	6803      	ldr	r3, [r0, #0]
    17da:	7e1b      	ldrb	r3, [r3, #24]
    17dc:	07db      	lsls	r3, r3, #31
    17de:	d411      	bmi.n	1804 <spi_select_slave+0x48>
    17e0:	780a      	ldrb	r2, [r1, #0]
    17e2:	09d1      	lsrs	r1, r2, #7
    17e4:	0953      	lsrs	r3, r2, #5
    17e6:	2900      	cmp	r1, #0
    17e8:	d10a      	bne.n	1800 <spi_select_slave+0x44>
    17ea:	01db      	lsls	r3, r3, #7
    17ec:	4931      	ldr	r1, [pc, #196]	; (18b4 <spi_select_slave+0xf8>)
    17ee:	468c      	mov	ip, r1
    17f0:	4463      	add	r3, ip
    17f2:	211f      	movs	r1, #31
    17f4:	4011      	ands	r1, r2
    17f6:	2201      	movs	r2, #1
    17f8:	408a      	lsls	r2, r1
    17fa:	619a      	str	r2, [r3, #24]
    17fc:	2005      	movs	r0, #5
    17fe:	e7e2      	b.n	17c6 <spi_select_slave+0xa>
    1800:	2300      	movs	r3, #0
    1802:	e7f6      	b.n	17f2 <spi_select_slave+0x36>
    1804:	780a      	ldrb	r2, [r1, #0]
    1806:	09d4      	lsrs	r4, r2, #7
    1808:	0953      	lsrs	r3, r2, #5
    180a:	2c00      	cmp	r4, #0
    180c:	d104      	bne.n	1818 <spi_select_slave+0x5c>
    180e:	01db      	lsls	r3, r3, #7
    1810:	4c28      	ldr	r4, [pc, #160]	; (18b4 <spi_select_slave+0xf8>)
    1812:	46a4      	mov	ip, r4
    1814:	4463      	add	r3, ip
    1816:	e000      	b.n	181a <spi_select_slave+0x5e>
    1818:	2300      	movs	r3, #0
    181a:	241f      	movs	r4, #31
    181c:	4014      	ands	r4, r2
    181e:	2201      	movs	r2, #1
    1820:	40a2      	lsls	r2, r4
    1822:	615a      	str	r2, [r3, #20]
    1824:	788a      	ldrb	r2, [r1, #2]
    1826:	6803      	ldr	r3, [r0, #0]
    1828:	7e19      	ldrb	r1, [r3, #24]
    182a:	07c9      	lsls	r1, r1, #31
    182c:	d500      	bpl.n	1830 <spi_select_slave+0x74>
    182e:	629a      	str	r2, [r3, #40]	; 0x28
    1830:	79c3      	ldrb	r3, [r0, #7]
    1832:	2b00      	cmp	r3, #0
    1834:	d13a      	bne.n	18ac <spi_select_slave+0xf0>
    1836:	6803      	ldr	r3, [r0, #0]
    1838:	7e1a      	ldrb	r2, [r3, #24]
    183a:	0752      	lsls	r2, r2, #29
    183c:	d5fb      	bpl.n	1836 <spi_select_slave+0x7a>
    183e:	7e1a      	ldrb	r2, [r3, #24]
    1840:	0752      	lsls	r2, r2, #29
    1842:	d535      	bpl.n	18b0 <spi_select_slave+0xf4>
    1844:	8b5a      	ldrh	r2, [r3, #26]
    1846:	0752      	lsls	r2, r2, #29
    1848:	d501      	bpl.n	184e <spi_select_slave+0x92>
    184a:	2204      	movs	r2, #4
    184c:	835a      	strh	r2, [r3, #26]
    184e:	7982      	ldrb	r2, [r0, #6]
    1850:	2a01      	cmp	r2, #1
    1852:	d002      	beq.n	185a <spi_select_slave+0x9e>
    1854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1856:	2000      	movs	r0, #0
    1858:	e7b5      	b.n	17c6 <spi_select_slave+0xa>
    185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    185c:	2000      	movs	r0, #0
    185e:	e7b2      	b.n	17c6 <spi_select_slave+0xa>
    1860:	780a      	ldrb	r2, [r1, #0]
    1862:	09d1      	lsrs	r1, r2, #7
    1864:	0953      	lsrs	r3, r2, #5
    1866:	2900      	cmp	r1, #0
    1868:	d10a      	bne.n	1880 <spi_select_slave+0xc4>
    186a:	01db      	lsls	r3, r3, #7
    186c:	4911      	ldr	r1, [pc, #68]	; (18b4 <spi_select_slave+0xf8>)
    186e:	468c      	mov	ip, r1
    1870:	4463      	add	r3, ip
    1872:	211f      	movs	r1, #31
    1874:	4011      	ands	r1, r2
    1876:	2201      	movs	r2, #1
    1878:	408a      	lsls	r2, r1
    187a:	615a      	str	r2, [r3, #20]
    187c:	2000      	movs	r0, #0
    187e:	e7a2      	b.n	17c6 <spi_select_slave+0xa>
    1880:	2300      	movs	r3, #0
    1882:	e7f6      	b.n	1872 <spi_select_slave+0xb6>
    1884:	780a      	ldrb	r2, [r1, #0]
    1886:	09d1      	lsrs	r1, r2, #7
    1888:	0953      	lsrs	r3, r2, #5
    188a:	2900      	cmp	r1, #0
    188c:	d10a      	bne.n	18a4 <spi_select_slave+0xe8>
    188e:	01db      	lsls	r3, r3, #7
    1890:	4908      	ldr	r1, [pc, #32]	; (18b4 <spi_select_slave+0xf8>)
    1892:	468c      	mov	ip, r1
    1894:	4463      	add	r3, ip
    1896:	211f      	movs	r1, #31
    1898:	4011      	ands	r1, r2
    189a:	2201      	movs	r2, #1
    189c:	408a      	lsls	r2, r1
    189e:	619a      	str	r2, [r3, #24]
    18a0:	2000      	movs	r0, #0
    18a2:	e790      	b.n	17c6 <spi_select_slave+0xa>
    18a4:	2300      	movs	r3, #0
    18a6:	e7f6      	b.n	1896 <spi_select_slave+0xda>
    18a8:	2000      	movs	r0, #0
    18aa:	e78c      	b.n	17c6 <spi_select_slave+0xa>
    18ac:	2000      	movs	r0, #0
    18ae:	e78a      	b.n	17c6 <spi_select_slave+0xa>
    18b0:	2000      	movs	r0, #0
    18b2:	e788      	b.n	17c6 <spi_select_slave+0xa>
    18b4:	41004400 	.word	0x41004400

000018b8 <spi_write_buffer_wait>:
    18b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ba:	46d6      	mov	lr, sl
    18bc:	464f      	mov	r7, r9
    18be:	4646      	mov	r6, r8
    18c0:	b5c0      	push	{r6, r7, lr}
    18c2:	b082      	sub	sp, #8
    18c4:	0004      	movs	r4, r0
    18c6:	468a      	mov	sl, r1
    18c8:	0017      	movs	r7, r2
    18ca:	2338      	movs	r3, #56	; 0x38
    18cc:	5cc3      	ldrb	r3, [r0, r3]
    18ce:	2b05      	cmp	r3, #5
    18d0:	d100      	bne.n	18d4 <spi_write_buffer_wait+0x1c>
    18d2:	e0d8      	b.n	1a86 <spi_write_buffer_wait+0x1ce>
    18d4:	2a00      	cmp	r2, #0
    18d6:	d101      	bne.n	18dc <spi_write_buffer_wait+0x24>
    18d8:	2017      	movs	r0, #23
    18da:	e0d5      	b.n	1a88 <spi_write_buffer_wait+0x1d0>
    18dc:	7943      	ldrb	r3, [r0, #5]
    18de:	2b00      	cmp	r3, #0
    18e0:	d103      	bne.n	18ea <spi_write_buffer_wait+0x32>
    18e2:	6803      	ldr	r3, [r0, #0]
    18e4:	7e1b      	ldrb	r3, [r3, #24]
    18e6:	079b      	lsls	r3, r3, #30
    18e8:	d402      	bmi.n	18f0 <spi_write_buffer_wait+0x38>
    18ea:	46bc      	mov	ip, r7
    18ec:	2600      	movs	r6, #0
    18ee:	e025      	b.n	193c <spi_write_buffer_wait+0x84>
    18f0:	4b6a      	ldr	r3, [pc, #424]	; (1a9c <spi_write_buffer_wait+0x1e4>)
    18f2:	4798      	blx	r3
    18f4:	e7f9      	b.n	18ea <spi_write_buffer_wait+0x32>
    18f6:	2300      	movs	r3, #0
    18f8:	4a69      	ldr	r2, [pc, #420]	; (1aa0 <spi_write_buffer_wait+0x1e8>)
    18fa:	4293      	cmp	r3, r2
    18fc:	d805      	bhi.n	190a <spi_write_buffer_wait+0x52>
    18fe:	6822      	ldr	r2, [r4, #0]
    1900:	7e12      	ldrb	r2, [r2, #24]
    1902:	07d2      	lsls	r2, r2, #31
    1904:	d401      	bmi.n	190a <spi_write_buffer_wait+0x52>
    1906:	3301      	adds	r3, #1
    1908:	e7f6      	b.n	18f8 <spi_write_buffer_wait+0x40>
    190a:	6823      	ldr	r3, [r4, #0]
    190c:	7e1a      	ldrb	r2, [r3, #24]
    190e:	0792      	lsls	r2, r2, #30
    1910:	d404      	bmi.n	191c <spi_write_buffer_wait+0x64>
    1912:	7e1b      	ldrb	r3, [r3, #24]
    1914:	07db      	lsls	r3, r3, #31
    1916:	d418      	bmi.n	194a <spi_write_buffer_wait+0x92>
    1918:	2012      	movs	r0, #18
    191a:	e0b5      	b.n	1a88 <spi_write_buffer_wait+0x1d0>
    191c:	0020      	movs	r0, r4
    191e:	4b5f      	ldr	r3, [pc, #380]	; (1a9c <spi_write_buffer_wait+0x1e4>)
    1920:	4798      	blx	r3
    1922:	2004      	movs	r0, #4
    1924:	e0b0      	b.n	1a88 <spi_write_buffer_wait+0x1d0>
    1926:	3602      	adds	r6, #2
    1928:	b2b6      	uxth	r6, r6
    192a:	4652      	mov	r2, sl
    192c:	5dd2      	ldrb	r2, [r2, r7]
    192e:	0212      	lsls	r2, r2, #8
    1930:	4302      	orrs	r2, r0
    1932:	e017      	b.n	1964 <spi_write_buffer_wait+0xac>
    1934:	79e3      	ldrb	r3, [r4, #7]
    1936:	000f      	movs	r7, r1
    1938:	2b00      	cmp	r3, #0
    193a:	d11a      	bne.n	1972 <spi_write_buffer_wait+0xba>
    193c:	1e79      	subs	r1, r7, #1
    193e:	b289      	uxth	r1, r1
    1940:	2f00      	cmp	r7, #0
    1942:	d06c      	beq.n	1a1e <spi_write_buffer_wait+0x166>
    1944:	7963      	ldrb	r3, [r4, #5]
    1946:	2b00      	cmp	r3, #0
    1948:	d0d5      	beq.n	18f6 <spi_write_buffer_wait+0x3e>
    194a:	6823      	ldr	r3, [r4, #0]
    194c:	7e1a      	ldrb	r2, [r3, #24]
    194e:	07d2      	lsls	r2, r2, #31
    1950:	d5fb      	bpl.n	194a <spi_write_buffer_wait+0x92>
    1952:	1c77      	adds	r7, r6, #1
    1954:	b2bf      	uxth	r7, r7
    1956:	4652      	mov	r2, sl
    1958:	5d90      	ldrb	r0, [r2, r6]
    195a:	b282      	uxth	r2, r0
    195c:	79a5      	ldrb	r5, [r4, #6]
    195e:	2d01      	cmp	r5, #1
    1960:	d0e1      	beq.n	1926 <spi_write_buffer_wait+0x6e>
    1962:	003e      	movs	r6, r7
    1964:	7e1f      	ldrb	r7, [r3, #24]
    1966:	07f8      	lsls	r0, r7, #31
    1968:	d5e4      	bpl.n	1934 <spi_write_buffer_wait+0x7c>
    196a:	05d2      	lsls	r2, r2, #23
    196c:	0dd2      	lsrs	r2, r2, #23
    196e:	629a      	str	r2, [r3, #40]	; 0x28
    1970:	e7e0      	b.n	1934 <spi_write_buffer_wait+0x7c>
    1972:	7963      	ldrb	r3, [r4, #5]
    1974:	2b00      	cmp	r3, #0
    1976:	d040      	beq.n	19fa <spi_write_buffer_wait+0x142>
    1978:	6823      	ldr	r3, [r4, #0]
    197a:	7e1a      	ldrb	r2, [r3, #24]
    197c:	0752      	lsls	r2, r2, #29
    197e:	d5fb      	bpl.n	1978 <spi_write_buffer_wait+0xc0>
    1980:	7e1a      	ldrb	r2, [r3, #24]
    1982:	0752      	lsls	r2, r2, #29
    1984:	d508      	bpl.n	1998 <spi_write_buffer_wait+0xe0>
    1986:	8b5a      	ldrh	r2, [r3, #26]
    1988:	0752      	lsls	r2, r2, #29
    198a:	d501      	bpl.n	1990 <spi_write_buffer_wait+0xd8>
    198c:	2204      	movs	r2, #4
    198e:	835a      	strh	r2, [r3, #26]
    1990:	79a2      	ldrb	r2, [r4, #6]
    1992:	2a01      	cmp	r2, #1
    1994:	d041      	beq.n	1a1a <spi_write_buffer_wait+0x162>
    1996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1998:	4660      	mov	r0, ip
    199a:	3801      	subs	r0, #1
    199c:	b283      	uxth	r3, r0
    199e:	469c      	mov	ip, r3
    19a0:	000f      	movs	r7, r1
    19a2:	e7cb      	b.n	193c <spi_write_buffer_wait+0x84>
    19a4:	3602      	adds	r6, #2
    19a6:	4655      	mov	r5, sl
    19a8:	5c2f      	ldrb	r7, [r5, r0]
    19aa:	023f      	lsls	r7, r7, #8
    19ac:	4640      	mov	r0, r8
    19ae:	4307      	orrs	r7, r0
    19b0:	b2b0      	uxth	r0, r6
    19b2:	e01b      	b.n	19ec <spi_write_buffer_wait+0x134>
    19b4:	3901      	subs	r1, #1
    19b6:	b289      	uxth	r1, r1
    19b8:	0006      	movs	r6, r0
    19ba:	6822      	ldr	r2, [r4, #0]
    19bc:	7e12      	ldrb	r2, [r2, #24]
    19be:	0752      	lsls	r2, r2, #29
    19c0:	d41d      	bmi.n	19fe <spi_write_buffer_wait+0x146>
    19c2:	3301      	adds	r3, #1
    19c4:	4a36      	ldr	r2, [pc, #216]	; (1aa0 <spi_write_buffer_wait+0x1e8>)
    19c6:	4293      	cmp	r3, r2
    19c8:	d819      	bhi.n	19fe <spi_write_buffer_wait+0x146>
    19ca:	2900      	cmp	r1, #0
    19cc:	d0f5      	beq.n	19ba <spi_write_buffer_wait+0x102>
    19ce:	6822      	ldr	r2, [r4, #0]
    19d0:	7e17      	ldrb	r7, [r2, #24]
    19d2:	07f8      	lsls	r0, r7, #31
    19d4:	d5f1      	bpl.n	19ba <spi_write_buffer_wait+0x102>
    19d6:	1c70      	adds	r0, r6, #1
    19d8:	b280      	uxth	r0, r0
    19da:	4655      	mov	r5, sl
    19dc:	5dad      	ldrb	r5, [r5, r6]
    19de:	46a8      	mov	r8, r5
    19e0:	466f      	mov	r7, sp
    19e2:	80fd      	strh	r5, [r7, #6]
    19e4:	88ff      	ldrh	r7, [r7, #6]
    19e6:	79a5      	ldrb	r5, [r4, #6]
    19e8:	2d01      	cmp	r5, #1
    19ea:	d0db      	beq.n	19a4 <spi_write_buffer_wait+0xec>
    19ec:	7e16      	ldrb	r6, [r2, #24]
    19ee:	07f5      	lsls	r5, r6, #31
    19f0:	d5e0      	bpl.n	19b4 <spi_write_buffer_wait+0xfc>
    19f2:	05ff      	lsls	r7, r7, #23
    19f4:	0dff      	lsrs	r7, r7, #23
    19f6:	6297      	str	r7, [r2, #40]	; 0x28
    19f8:	e7dc      	b.n	19b4 <spi_write_buffer_wait+0xfc>
    19fa:	2300      	movs	r3, #0
    19fc:	e7e2      	b.n	19c4 <spi_write_buffer_wait+0x10c>
    19fe:	6823      	ldr	r3, [r4, #0]
    1a00:	7e1a      	ldrb	r2, [r3, #24]
    1a02:	0792      	lsls	r2, r2, #30
    1a04:	d404      	bmi.n	1a10 <spi_write_buffer_wait+0x158>
    1a06:	7e1b      	ldrb	r3, [r3, #24]
    1a08:	075b      	lsls	r3, r3, #29
    1a0a:	d4b5      	bmi.n	1978 <spi_write_buffer_wait+0xc0>
    1a0c:	2012      	movs	r0, #18
    1a0e:	e03b      	b.n	1a88 <spi_write_buffer_wait+0x1d0>
    1a10:	0020      	movs	r0, r4
    1a12:	4b22      	ldr	r3, [pc, #136]	; (1a9c <spi_write_buffer_wait+0x1e4>)
    1a14:	4798      	blx	r3
    1a16:	2004      	movs	r0, #4
    1a18:	e036      	b.n	1a88 <spi_write_buffer_wait+0x1d0>
    1a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a1c:	e7bc      	b.n	1998 <spi_write_buffer_wait+0xe0>
    1a1e:	7962      	ldrb	r2, [r4, #5]
    1a20:	2a01      	cmp	r2, #1
    1a22:	d006      	beq.n	1a32 <spi_write_buffer_wait+0x17a>
    1a24:	2a00      	cmp	r2, #0
    1a26:	d135      	bne.n	1a94 <spi_write_buffer_wait+0x1dc>
    1a28:	79e3      	ldrb	r3, [r4, #7]
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d11a      	bne.n	1a64 <spi_write_buffer_wait+0x1ac>
    1a2e:	2000      	movs	r0, #0
    1a30:	e02a      	b.n	1a88 <spi_write_buffer_wait+0x1d0>
    1a32:	6823      	ldr	r3, [r4, #0]
    1a34:	7e1b      	ldrb	r3, [r3, #24]
    1a36:	079b      	lsls	r3, r3, #30
    1a38:	d5fb      	bpl.n	1a32 <spi_write_buffer_wait+0x17a>
    1a3a:	e7f3      	b.n	1a24 <spi_write_buffer_wait+0x16c>
    1a3c:	6823      	ldr	r3, [r4, #0]
    1a3e:	7e1a      	ldrb	r2, [r3, #24]
    1a40:	0752      	lsls	r2, r2, #29
    1a42:	d529      	bpl.n	1a98 <spi_write_buffer_wait+0x1e0>
    1a44:	7e1a      	ldrb	r2, [r3, #24]
    1a46:	0752      	lsls	r2, r2, #29
    1a48:	d508      	bpl.n	1a5c <spi_write_buffer_wait+0x1a4>
    1a4a:	8b5a      	ldrh	r2, [r3, #26]
    1a4c:	0752      	lsls	r2, r2, #29
    1a4e:	d501      	bpl.n	1a54 <spi_write_buffer_wait+0x19c>
    1a50:	2204      	movs	r2, #4
    1a52:	835a      	strh	r2, [r3, #26]
    1a54:	79a2      	ldrb	r2, [r4, #6]
    1a56:	2a01      	cmp	r2, #1
    1a58:	d011      	beq.n	1a7e <spi_write_buffer_wait+0x1c6>
    1a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a5c:	4660      	mov	r0, ip
    1a5e:	3801      	subs	r0, #1
    1a60:	b283      	uxth	r3, r0
    1a62:	469c      	mov	ip, r3
    1a64:	4663      	mov	r3, ip
    1a66:	2b00      	cmp	r3, #0
    1a68:	d00b      	beq.n	1a82 <spi_write_buffer_wait+0x1ca>
    1a6a:	2300      	movs	r3, #0
    1a6c:	4a0c      	ldr	r2, [pc, #48]	; (1aa0 <spi_write_buffer_wait+0x1e8>)
    1a6e:	4293      	cmp	r3, r2
    1a70:	d8e4      	bhi.n	1a3c <spi_write_buffer_wait+0x184>
    1a72:	6822      	ldr	r2, [r4, #0]
    1a74:	7e12      	ldrb	r2, [r2, #24]
    1a76:	0752      	lsls	r2, r2, #29
    1a78:	d4e0      	bmi.n	1a3c <spi_write_buffer_wait+0x184>
    1a7a:	3301      	adds	r3, #1
    1a7c:	e7f6      	b.n	1a6c <spi_write_buffer_wait+0x1b4>
    1a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a80:	e7ec      	b.n	1a5c <spi_write_buffer_wait+0x1a4>
    1a82:	2000      	movs	r0, #0
    1a84:	e000      	b.n	1a88 <spi_write_buffer_wait+0x1d0>
    1a86:	2005      	movs	r0, #5
    1a88:	b002      	add	sp, #8
    1a8a:	bc1c      	pop	{r2, r3, r4}
    1a8c:	4690      	mov	r8, r2
    1a8e:	4699      	mov	r9, r3
    1a90:	46a2      	mov	sl, r4
    1a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a94:	2000      	movs	r0, #0
    1a96:	e7f7      	b.n	1a88 <spi_write_buffer_wait+0x1d0>
    1a98:	2012      	movs	r0, #18
    1a9a:	e7f5      	b.n	1a88 <spi_write_buffer_wait+0x1d0>
    1a9c:	00001481 	.word	0x00001481
    1aa0:	00002710 	.word	0x00002710

00001aa4 <spi_transceive_buffer_wait>:
    1aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aa6:	46de      	mov	lr, fp
    1aa8:	4657      	mov	r7, sl
    1aaa:	464e      	mov	r6, r9
    1aac:	4645      	mov	r5, r8
    1aae:	b5e0      	push	{r5, r6, r7, lr}
    1ab0:	b085      	sub	sp, #20
    1ab2:	0004      	movs	r4, r0
    1ab4:	9100      	str	r1, [sp, #0]
    1ab6:	9202      	str	r2, [sp, #8]
    1ab8:	4698      	mov	r8, r3
    1aba:	2338      	movs	r3, #56	; 0x38
    1abc:	5cc3      	ldrb	r3, [r0, r3]
    1abe:	2b05      	cmp	r3, #5
    1ac0:	d100      	bne.n	1ac4 <spi_transceive_buffer_wait+0x20>
    1ac2:	e11f      	b.n	1d04 <spi_transceive_buffer_wait+0x260>
    1ac4:	4643      	mov	r3, r8
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d101      	bne.n	1ace <spi_transceive_buffer_wait+0x2a>
    1aca:	2117      	movs	r1, #23
    1acc:	e11b      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1ace:	79c3      	ldrb	r3, [r0, #7]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d101      	bne.n	1ad8 <spi_transceive_buffer_wait+0x34>
    1ad4:	211c      	movs	r1, #28
    1ad6:	e116      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1ad8:	7943      	ldrb	r3, [r0, #5]
    1ada:	2b00      	cmp	r3, #0
    1adc:	d103      	bne.n	1ae6 <spi_transceive_buffer_wait+0x42>
    1ade:	6803      	ldr	r3, [r0, #0]
    1ae0:	7e1b      	ldrb	r3, [r3, #24]
    1ae2:	079b      	lsls	r3, r3, #30
    1ae4:	d404      	bmi.n	1af0 <spi_transceive_buffer_wait+0x4c>
    1ae6:	46c4      	mov	ip, r8
    1ae8:	2300      	movs	r3, #0
    1aea:	9303      	str	r3, [sp, #12]
    1aec:	2100      	movs	r1, #0
    1aee:	e07c      	b.n	1bea <spi_transceive_buffer_wait+0x146>
    1af0:	4b8a      	ldr	r3, [pc, #552]	; (1d1c <spi_transceive_buffer_wait+0x278>)
    1af2:	4798      	blx	r3
    1af4:	e7f7      	b.n	1ae6 <spi_transceive_buffer_wait+0x42>
    1af6:	2300      	movs	r3, #0
    1af8:	4a89      	ldr	r2, [pc, #548]	; (1d20 <spi_transceive_buffer_wait+0x27c>)
    1afa:	4293      	cmp	r3, r2
    1afc:	d805      	bhi.n	1b0a <spi_transceive_buffer_wait+0x66>
    1afe:	6822      	ldr	r2, [r4, #0]
    1b00:	7e12      	ldrb	r2, [r2, #24]
    1b02:	07d2      	lsls	r2, r2, #31
    1b04:	d401      	bmi.n	1b0a <spi_transceive_buffer_wait+0x66>
    1b06:	3301      	adds	r3, #1
    1b08:	e7f6      	b.n	1af8 <spi_transceive_buffer_wait+0x54>
    1b0a:	6823      	ldr	r3, [r4, #0]
    1b0c:	7e1a      	ldrb	r2, [r3, #24]
    1b0e:	0792      	lsls	r2, r2, #30
    1b10:	d404      	bmi.n	1b1c <spi_transceive_buffer_wait+0x78>
    1b12:	7e1b      	ldrb	r3, [r3, #24]
    1b14:	07db      	lsls	r3, r3, #31
    1b16:	d471      	bmi.n	1bfc <spi_transceive_buffer_wait+0x158>
    1b18:	2112      	movs	r1, #18
    1b1a:	e0f4      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1b1c:	0020      	movs	r0, r4
    1b1e:	4b7f      	ldr	r3, [pc, #508]	; (1d1c <spi_transceive_buffer_wait+0x278>)
    1b20:	4798      	blx	r3
    1b22:	2104      	movs	r1, #4
    1b24:	e0ef      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1b26:	3102      	adds	r1, #2
    1b28:	9a00      	ldr	r2, [sp, #0]
    1b2a:	5d92      	ldrb	r2, [r2, r6]
    1b2c:	0212      	lsls	r2, r2, #8
    1b2e:	4650      	mov	r0, sl
    1b30:	4302      	orrs	r2, r0
    1b32:	b28e      	uxth	r6, r1
    1b34:	e071      	b.n	1c1a <spi_transceive_buffer_wait+0x176>
    1b36:	3602      	adds	r6, #2
    1b38:	9900      	ldr	r1, [sp, #0]
    1b3a:	5c09      	ldrb	r1, [r1, r0]
    1b3c:	0209      	lsls	r1, r1, #8
    1b3e:	4650      	mov	r0, sl
    1b40:	4301      	orrs	r1, r0
    1b42:	4688      	mov	r8, r1
    1b44:	b2b0      	uxth	r0, r6
    1b46:	e01a      	b.n	1b7e <spi_transceive_buffer_wait+0xda>
    1b48:	3f01      	subs	r7, #1
    1b4a:	b2bf      	uxth	r7, r7
    1b4c:	0006      	movs	r6, r0
    1b4e:	6822      	ldr	r2, [r4, #0]
    1b50:	7e12      	ldrb	r2, [r2, #24]
    1b52:	0752      	lsls	r2, r2, #29
    1b54:	d41d      	bmi.n	1b92 <spi_transceive_buffer_wait+0xee>
    1b56:	3301      	adds	r3, #1
    1b58:	4a71      	ldr	r2, [pc, #452]	; (1d20 <spi_transceive_buffer_wait+0x27c>)
    1b5a:	4293      	cmp	r3, r2
    1b5c:	d819      	bhi.n	1b92 <spi_transceive_buffer_wait+0xee>
    1b5e:	6822      	ldr	r2, [r4, #0]
    1b60:	7e11      	ldrb	r1, [r2, #24]
    1b62:	07c9      	lsls	r1, r1, #31
    1b64:	d5f3      	bpl.n	1b4e <spi_transceive_buffer_wait+0xaa>
    1b66:	1c70      	adds	r0, r6, #1
    1b68:	b280      	uxth	r0, r0
    1b6a:	9900      	ldr	r1, [sp, #0]
    1b6c:	5d89      	ldrb	r1, [r1, r6]
    1b6e:	468a      	mov	sl, r1
    1b70:	466d      	mov	r5, sp
    1b72:	80e9      	strh	r1, [r5, #6]
    1b74:	88e9      	ldrh	r1, [r5, #6]
    1b76:	4688      	mov	r8, r1
    1b78:	79a1      	ldrb	r1, [r4, #6]
    1b7a:	2901      	cmp	r1, #1
    1b7c:	d0db      	beq.n	1b36 <spi_transceive_buffer_wait+0x92>
    1b7e:	7e16      	ldrb	r6, [r2, #24]
    1b80:	07f1      	lsls	r1, r6, #31
    1b82:	d5e1      	bpl.n	1b48 <spi_transceive_buffer_wait+0xa4>
    1b84:	4641      	mov	r1, r8
    1b86:	05c9      	lsls	r1, r1, #23
    1b88:	0dc9      	lsrs	r1, r1, #23
    1b8a:	6291      	str	r1, [r2, #40]	; 0x28
    1b8c:	e7dc      	b.n	1b48 <spi_transceive_buffer_wait+0xa4>
    1b8e:	2300      	movs	r3, #0
    1b90:	e7e2      	b.n	1b58 <spi_transceive_buffer_wait+0xb4>
    1b92:	6823      	ldr	r3, [r4, #0]
    1b94:	7e1a      	ldrb	r2, [r3, #24]
    1b96:	0792      	lsls	r2, r2, #30
    1b98:	d404      	bmi.n	1ba4 <spi_transceive_buffer_wait+0x100>
    1b9a:	7e1b      	ldrb	r3, [r3, #24]
    1b9c:	075b      	lsls	r3, r3, #29
    1b9e:	d445      	bmi.n	1c2c <spi_transceive_buffer_wait+0x188>
    1ba0:	2112      	movs	r1, #18
    1ba2:	e0b0      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1ba4:	0020      	movs	r0, r4
    1ba6:	4b5d      	ldr	r3, [pc, #372]	; (1d1c <spi_transceive_buffer_wait+0x278>)
    1ba8:	4798      	blx	r3
    1baa:	2104      	movs	r1, #4
    1bac:	e0ab      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1bae:	2100      	movs	r1, #0
    1bb0:	e04d      	b.n	1c4e <spi_transceive_buffer_wait+0x1aa>
    1bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bb4:	05d2      	lsls	r2, r2, #23
    1bb6:	0dd3      	lsrs	r3, r2, #23
    1bb8:	4698      	mov	r8, r3
    1bba:	e002      	b.n	1bc2 <spi_transceive_buffer_wait+0x11e>
    1bbc:	2300      	movs	r3, #0
    1bbe:	4698      	mov	r8, r3
    1bc0:	2110      	movs	r1, #16
    1bc2:	2900      	cmp	r1, #0
    1bc4:	d000      	beq.n	1bc8 <spi_transceive_buffer_wait+0x124>
    1bc6:	e09e      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1bc8:	9803      	ldr	r0, [sp, #12]
    1bca:	0003      	movs	r3, r0
    1bcc:	3301      	adds	r3, #1
    1bce:	b29b      	uxth	r3, r3
    1bd0:	4642      	mov	r2, r8
    1bd2:	4669      	mov	r1, sp
    1bd4:	718a      	strb	r2, [r1, #6]
    1bd6:	7989      	ldrb	r1, [r1, #6]
    1bd8:	9a02      	ldr	r2, [sp, #8]
    1bda:	5411      	strb	r1, [r2, r0]
    1bdc:	7011      	strb	r1, [r2, #0]
    1bde:	79a1      	ldrb	r1, [r4, #6]
    1be0:	2901      	cmp	r1, #1
    1be2:	d03b      	beq.n	1c5c <spi_transceive_buffer_wait+0x1b8>
    1be4:	9303      	str	r3, [sp, #12]
    1be6:	0031      	movs	r1, r6
    1be8:	46b8      	mov	r8, r7
    1bea:	4643      	mov	r3, r8
    1bec:	1e5f      	subs	r7, r3, #1
    1bee:	b2bf      	uxth	r7, r7
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d03a      	beq.n	1c6a <spi_transceive_buffer_wait+0x1c6>
    1bf4:	7963      	ldrb	r3, [r4, #5]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d100      	bne.n	1bfc <spi_transceive_buffer_wait+0x158>
    1bfa:	e77c      	b.n	1af6 <spi_transceive_buffer_wait+0x52>
    1bfc:	6823      	ldr	r3, [r4, #0]
    1bfe:	7e1a      	ldrb	r2, [r3, #24]
    1c00:	07d2      	lsls	r2, r2, #31
    1c02:	d5fb      	bpl.n	1bfc <spi_transceive_buffer_wait+0x158>
    1c04:	1c4e      	adds	r6, r1, #1
    1c06:	b2b6      	uxth	r6, r6
    1c08:	9a00      	ldr	r2, [sp, #0]
    1c0a:	5c52      	ldrb	r2, [r2, r1]
    1c0c:	4692      	mov	sl, r2
    1c0e:	4668      	mov	r0, sp
    1c10:	80c2      	strh	r2, [r0, #6]
    1c12:	88c2      	ldrh	r2, [r0, #6]
    1c14:	79a0      	ldrb	r0, [r4, #6]
    1c16:	2801      	cmp	r0, #1
    1c18:	d085      	beq.n	1b26 <spi_transceive_buffer_wait+0x82>
    1c1a:	7e19      	ldrb	r1, [r3, #24]
    1c1c:	07c9      	lsls	r1, r1, #31
    1c1e:	d502      	bpl.n	1c26 <spi_transceive_buffer_wait+0x182>
    1c20:	05d2      	lsls	r2, r2, #23
    1c22:	0dd2      	lsrs	r2, r2, #23
    1c24:	629a      	str	r2, [r3, #40]	; 0x28
    1c26:	7963      	ldrb	r3, [r4, #5]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d0b0      	beq.n	1b8e <spi_transceive_buffer_wait+0xea>
    1c2c:	6823      	ldr	r3, [r4, #0]
    1c2e:	7e1a      	ldrb	r2, [r3, #24]
    1c30:	0752      	lsls	r2, r2, #29
    1c32:	d5fb      	bpl.n	1c2c <spi_transceive_buffer_wait+0x188>
    1c34:	4662      	mov	r2, ip
    1c36:	3a01      	subs	r2, #1
    1c38:	b292      	uxth	r2, r2
    1c3a:	4694      	mov	ip, r2
    1c3c:	7e1a      	ldrb	r2, [r3, #24]
    1c3e:	0752      	lsls	r2, r2, #29
    1c40:	d5bc      	bpl.n	1bbc <spi_transceive_buffer_wait+0x118>
    1c42:	8b5a      	ldrh	r2, [r3, #26]
    1c44:	0752      	lsls	r2, r2, #29
    1c46:	d5b2      	bpl.n	1bae <spi_transceive_buffer_wait+0x10a>
    1c48:	2204      	movs	r2, #4
    1c4a:	835a      	strh	r2, [r3, #26]
    1c4c:	211e      	movs	r1, #30
    1c4e:	79a2      	ldrb	r2, [r4, #6]
    1c50:	2a01      	cmp	r2, #1
    1c52:	d0ae      	beq.n	1bb2 <spi_transceive_buffer_wait+0x10e>
    1c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c56:	b2d3      	uxtb	r3, r2
    1c58:	4698      	mov	r8, r3
    1c5a:	e7b2      	b.n	1bc2 <spi_transceive_buffer_wait+0x11e>
    1c5c:	3002      	adds	r0, #2
    1c5e:	4642      	mov	r2, r8
    1c60:	0a12      	lsrs	r2, r2, #8
    1c62:	9902      	ldr	r1, [sp, #8]
    1c64:	54ca      	strb	r2, [r1, r3]
    1c66:	b283      	uxth	r3, r0
    1c68:	e7bc      	b.n	1be4 <spi_transceive_buffer_wait+0x140>
    1c6a:	7962      	ldrb	r2, [r4, #5]
    1c6c:	2a01      	cmp	r2, #1
    1c6e:	d003      	beq.n	1c78 <spi_transceive_buffer_wait+0x1d4>
    1c70:	2a00      	cmp	r2, #0
    1c72:	d03b      	beq.n	1cec <spi_transceive_buffer_wait+0x248>
    1c74:	2100      	movs	r1, #0
    1c76:	e046      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1c78:	6823      	ldr	r3, [r4, #0]
    1c7a:	7e1b      	ldrb	r3, [r3, #24]
    1c7c:	079b      	lsls	r3, r3, #30
    1c7e:	d5fb      	bpl.n	1c78 <spi_transceive_buffer_wait+0x1d4>
    1c80:	e7f6      	b.n	1c70 <spi_transceive_buffer_wait+0x1cc>
    1c82:	3301      	adds	r3, #1
    1c84:	4a26      	ldr	r2, [pc, #152]	; (1d20 <spi_transceive_buffer_wait+0x27c>)
    1c86:	4293      	cmp	r3, r2
    1c88:	d803      	bhi.n	1c92 <spi_transceive_buffer_wait+0x1ee>
    1c8a:	6822      	ldr	r2, [r4, #0]
    1c8c:	7e12      	ldrb	r2, [r2, #24]
    1c8e:	0752      	lsls	r2, r2, #29
    1c90:	d5f7      	bpl.n	1c82 <spi_transceive_buffer_wait+0x1de>
    1c92:	6823      	ldr	r3, [r4, #0]
    1c94:	7e1a      	ldrb	r2, [r3, #24]
    1c96:	0752      	lsls	r2, r2, #29
    1c98:	d53d      	bpl.n	1d16 <spi_transceive_buffer_wait+0x272>
    1c9a:	4662      	mov	r2, ip
    1c9c:	3a01      	subs	r2, #1
    1c9e:	b292      	uxth	r2, r2
    1ca0:	4694      	mov	ip, r2
    1ca2:	7e1a      	ldrb	r2, [r3, #24]
    1ca4:	0752      	lsls	r2, r2, #29
    1ca6:	d511      	bpl.n	1ccc <spi_transceive_buffer_wait+0x228>
    1ca8:	8b5a      	ldrh	r2, [r3, #26]
    1caa:	0752      	lsls	r2, r2, #29
    1cac:	d508      	bpl.n	1cc0 <spi_transceive_buffer_wait+0x21c>
    1cae:	2204      	movs	r2, #4
    1cb0:	835a      	strh	r2, [r3, #26]
    1cb2:	211e      	movs	r1, #30
    1cb4:	79a2      	ldrb	r2, [r4, #6]
    1cb6:	2a01      	cmp	r2, #1
    1cb8:	d004      	beq.n	1cc4 <spi_transceive_buffer_wait+0x220>
    1cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cbc:	b2d2      	uxtb	r2, r2
    1cbe:	e007      	b.n	1cd0 <spi_transceive_buffer_wait+0x22c>
    1cc0:	2100      	movs	r1, #0
    1cc2:	e7f7      	b.n	1cb4 <spi_transceive_buffer_wait+0x210>
    1cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cc6:	05d2      	lsls	r2, r2, #23
    1cc8:	0dd2      	lsrs	r2, r2, #23
    1cca:	e001      	b.n	1cd0 <spi_transceive_buffer_wait+0x22c>
    1ccc:	4642      	mov	r2, r8
    1cce:	2110      	movs	r1, #16
    1cd0:	2900      	cmp	r1, #0
    1cd2:	d118      	bne.n	1d06 <spi_transceive_buffer_wait+0x262>
    1cd4:	9803      	ldr	r0, [sp, #12]
    1cd6:	0003      	movs	r3, r0
    1cd8:	3301      	adds	r3, #1
    1cda:	b29b      	uxth	r3, r3
    1cdc:	b2d1      	uxtb	r1, r2
    1cde:	9d02      	ldr	r5, [sp, #8]
    1ce0:	5429      	strb	r1, [r5, r0]
    1ce2:	7029      	strb	r1, [r5, #0]
    1ce4:	79a1      	ldrb	r1, [r4, #6]
    1ce6:	2901      	cmp	r1, #1
    1ce8:	d005      	beq.n	1cf6 <spi_transceive_buffer_wait+0x252>
    1cea:	9303      	str	r3, [sp, #12]
    1cec:	4663      	mov	r3, ip
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d006      	beq.n	1d00 <spi_transceive_buffer_wait+0x25c>
    1cf2:	2300      	movs	r3, #0
    1cf4:	e7c6      	b.n	1c84 <spi_transceive_buffer_wait+0x1e0>
    1cf6:	3002      	adds	r0, #2
    1cf8:	0a12      	lsrs	r2, r2, #8
    1cfa:	54ea      	strb	r2, [r5, r3]
    1cfc:	b283      	uxth	r3, r0
    1cfe:	e7f4      	b.n	1cea <spi_transceive_buffer_wait+0x246>
    1d00:	2100      	movs	r1, #0
    1d02:	e000      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1d04:	2105      	movs	r1, #5
    1d06:	0008      	movs	r0, r1
    1d08:	b005      	add	sp, #20
    1d0a:	bc3c      	pop	{r2, r3, r4, r5}
    1d0c:	4690      	mov	r8, r2
    1d0e:	4699      	mov	r9, r3
    1d10:	46a2      	mov	sl, r4
    1d12:	46ab      	mov	fp, r5
    1d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d16:	2112      	movs	r1, #18
    1d18:	e7f5      	b.n	1d06 <spi_transceive_buffer_wait+0x262>
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	00001481 	.word	0x00001481
    1d20:	00002710 	.word	0x00002710

00001d24 <_spi_write>:
    1d24:	b570      	push	{r4, r5, r6, lr}
    1d26:	6805      	ldr	r5, [r0, #0]
    1d28:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    1d2a:	780a      	ldrb	r2, [r1, #0]
    1d2c:	b2d2      	uxtb	r2, r2
    1d2e:	b293      	uxth	r3, r2
    1d30:	1c4c      	adds	r4, r1, #1
    1d32:	62c4      	str	r4, [r0, #44]	; 0x2c
    1d34:	7986      	ldrb	r6, [r0, #6]
    1d36:	2e01      	cmp	r6, #1
    1d38:	d007      	beq.n	1d4a <_spi_write+0x26>
    1d3a:	05db      	lsls	r3, r3, #23
    1d3c:	0ddb      	lsrs	r3, r3, #23
    1d3e:	62ab      	str	r3, [r5, #40]	; 0x28
    1d40:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1d42:	3b01      	subs	r3, #1
    1d44:	b29b      	uxth	r3, r3
    1d46:	8683      	strh	r3, [r0, #52]	; 0x34
    1d48:	bd70      	pop	{r4, r5, r6, pc}
    1d4a:	784b      	ldrb	r3, [r1, #1]
    1d4c:	021b      	lsls	r3, r3, #8
    1d4e:	4313      	orrs	r3, r2
    1d50:	1c8c      	adds	r4, r1, #2
    1d52:	62c4      	str	r4, [r0, #44]	; 0x2c
    1d54:	e7f1      	b.n	1d3a <_spi_write+0x16>
	...

00001d58 <_spi_write_dummy>:
    1d58:	6803      	ldr	r3, [r0, #0]
    1d5a:	4a04      	ldr	r2, [pc, #16]	; (1d6c <_spi_write_dummy+0x14>)
    1d5c:	8812      	ldrh	r2, [r2, #0]
    1d5e:	629a      	str	r2, [r3, #40]	; 0x28
    1d60:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1d62:	3b01      	subs	r3, #1
    1d64:	b29b      	uxth	r3, r3
    1d66:	8643      	strh	r3, [r0, #50]	; 0x32
    1d68:	4770      	bx	lr
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	200000e4 	.word	0x200000e4

00001d70 <_spi_read_dummy>:
    1d70:	6803      	ldr	r3, [r0, #0]
    1d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d74:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1d76:	3b01      	subs	r3, #1
    1d78:	b29b      	uxth	r3, r3
    1d7a:	8643      	strh	r3, [r0, #50]	; 0x32
    1d7c:	4770      	bx	lr

00001d7e <_spi_read>:
    1d7e:	6803      	ldr	r3, [r0, #0]
    1d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d82:	05db      	lsls	r3, r3, #23
    1d84:	0ddb      	lsrs	r3, r3, #23
    1d86:	b2da      	uxtb	r2, r3
    1d88:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1d8a:	700a      	strb	r2, [r1, #0]
    1d8c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1d8e:	1c51      	adds	r1, r2, #1
    1d90:	6281      	str	r1, [r0, #40]	; 0x28
    1d92:	7981      	ldrb	r1, [r0, #6]
    1d94:	2901      	cmp	r1, #1
    1d96:	d004      	beq.n	1da2 <_spi_read+0x24>
    1d98:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    1d9a:	3b01      	subs	r3, #1
    1d9c:	b29b      	uxth	r3, r3
    1d9e:	8603      	strh	r3, [r0, #48]	; 0x30
    1da0:	4770      	bx	lr
    1da2:	0a1b      	lsrs	r3, r3, #8
    1da4:	7053      	strb	r3, [r2, #1]
    1da6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1da8:	3301      	adds	r3, #1
    1daa:	6283      	str	r3, [r0, #40]	; 0x28
    1dac:	e7f4      	b.n	1d98 <_spi_read+0x1a>
	...

00001db0 <_spi_interrupt_handler>:
    1db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1db2:	0080      	lsls	r0, r0, #2
    1db4:	4b6b      	ldr	r3, [pc, #428]	; (1f64 <_spi_interrupt_handler+0x1b4>)
    1db6:	58c4      	ldr	r4, [r0, r3]
    1db8:	6826      	ldr	r6, [r4, #0]
    1dba:	2337      	movs	r3, #55	; 0x37
    1dbc:	5ce3      	ldrb	r3, [r4, r3]
    1dbe:	2236      	movs	r2, #54	; 0x36
    1dc0:	5ca7      	ldrb	r7, [r4, r2]
    1dc2:	401f      	ands	r7, r3
    1dc4:	7e33      	ldrb	r3, [r6, #24]
    1dc6:	7db5      	ldrb	r5, [r6, #22]
    1dc8:	401d      	ands	r5, r3
    1dca:	07eb      	lsls	r3, r5, #31
    1dcc:	d516      	bpl.n	1dfc <_spi_interrupt_handler+0x4c>
    1dce:	7963      	ldrb	r3, [r4, #5]
    1dd0:	2b01      	cmp	r3, #1
    1dd2:	d04d      	beq.n	1e70 <_spi_interrupt_handler+0xc0>
    1dd4:	7963      	ldrb	r3, [r4, #5]
    1dd6:	2b01      	cmp	r3, #1
    1dd8:	d057      	beq.n	1e8a <_spi_interrupt_handler+0xda>
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d10e      	bne.n	1dfc <_spi_interrupt_handler+0x4c>
    1dde:	7a63      	ldrb	r3, [r4, #9]
    1de0:	2b00      	cmp	r3, #0
    1de2:	d00b      	beq.n	1dfc <_spi_interrupt_handler+0x4c>
    1de4:	0020      	movs	r0, r4
    1de6:	4b60      	ldr	r3, [pc, #384]	; (1f68 <_spi_interrupt_handler+0x1b8>)
    1de8:	4798      	blx	r3
    1dea:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1dec:	b29b      	uxth	r3, r3
    1dee:	2b00      	cmp	r3, #0
    1df0:	d104      	bne.n	1dfc <_spi_interrupt_handler+0x4c>
    1df2:	3301      	adds	r3, #1
    1df4:	7533      	strb	r3, [r6, #20]
    1df6:	7a63      	ldrb	r3, [r4, #9]
    1df8:	2b01      	cmp	r3, #1
    1dfa:	d04a      	beq.n	1e92 <_spi_interrupt_handler+0xe2>
    1dfc:	076b      	lsls	r3, r5, #29
    1dfe:	d511      	bpl.n	1e24 <_spi_interrupt_handler+0x74>
    1e00:	8b73      	ldrh	r3, [r6, #26]
    1e02:	075b      	lsls	r3, r3, #29
    1e04:	d54f      	bpl.n	1ea6 <_spi_interrupt_handler+0xf6>
    1e06:	7a63      	ldrb	r3, [r4, #9]
    1e08:	2b01      	cmp	r3, #1
    1e0a:	d008      	beq.n	1e1e <_spi_interrupt_handler+0x6e>
    1e0c:	221e      	movs	r2, #30
    1e0e:	2338      	movs	r3, #56	; 0x38
    1e10:	54e2      	strb	r2, [r4, r3]
    1e12:	3b35      	subs	r3, #53	; 0x35
    1e14:	7263      	strb	r3, [r4, #9]
    1e16:	3302      	adds	r3, #2
    1e18:	7533      	strb	r3, [r6, #20]
    1e1a:	073b      	lsls	r3, r7, #28
    1e1c:	d43f      	bmi.n	1e9e <_spi_interrupt_handler+0xee>
    1e1e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1e20:	2304      	movs	r3, #4
    1e22:	8373      	strh	r3, [r6, #26]
    1e24:	07ab      	lsls	r3, r5, #30
    1e26:	d513      	bpl.n	1e50 <_spi_interrupt_handler+0xa0>
    1e28:	7963      	ldrb	r3, [r4, #5]
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d10d      	bne.n	1e4a <_spi_interrupt_handler+0x9a>
    1e2e:	3307      	adds	r3, #7
    1e30:	7533      	strb	r3, [r6, #20]
    1e32:	3b05      	subs	r3, #5
    1e34:	7633      	strb	r3, [r6, #24]
    1e36:	3301      	adds	r3, #1
    1e38:	7263      	strb	r3, [r4, #9]
    1e3a:	2300      	movs	r3, #0
    1e3c:	86a3      	strh	r3, [r4, #52]	; 0x34
    1e3e:	8623      	strh	r3, [r4, #48]	; 0x30
    1e40:	3338      	adds	r3, #56	; 0x38
    1e42:	2200      	movs	r2, #0
    1e44:	54e2      	strb	r2, [r4, r3]
    1e46:	06fb      	lsls	r3, r7, #27
    1e48:	d464      	bmi.n	1f14 <_spi_interrupt_handler+0x164>
    1e4a:	7963      	ldrb	r3, [r4, #5]
    1e4c:	2b01      	cmp	r3, #1
    1e4e:	d065      	beq.n	1f1c <_spi_interrupt_handler+0x16c>
    1e50:	072b      	lsls	r3, r5, #28
    1e52:	d508      	bpl.n	1e66 <_spi_interrupt_handler+0xb6>
    1e54:	7963      	ldrb	r3, [r4, #5]
    1e56:	2b00      	cmp	r3, #0
    1e58:	d105      	bne.n	1e66 <_spi_interrupt_handler+0xb6>
    1e5a:	3308      	adds	r3, #8
    1e5c:	7533      	strb	r3, [r6, #20]
    1e5e:	7633      	strb	r3, [r6, #24]
    1e60:	06bb      	lsls	r3, r7, #26
    1e62:	d500      	bpl.n	1e66 <_spi_interrupt_handler+0xb6>
    1e64:	e070      	b.n	1f48 <_spi_interrupt_handler+0x198>
    1e66:	b26d      	sxtb	r5, r5
    1e68:	2d00      	cmp	r5, #0
    1e6a:	da00      	bge.n	1e6e <_spi_interrupt_handler+0xbe>
    1e6c:	e070      	b.n	1f50 <_spi_interrupt_handler+0x1a0>
    1e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e70:	7a63      	ldrb	r3, [r4, #9]
    1e72:	2b00      	cmp	r3, #0
    1e74:	d1ae      	bne.n	1dd4 <_spi_interrupt_handler+0x24>
    1e76:	0020      	movs	r0, r4
    1e78:	4b3c      	ldr	r3, [pc, #240]	; (1f6c <_spi_interrupt_handler+0x1bc>)
    1e7a:	4798      	blx	r3
    1e7c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1e7e:	b29b      	uxth	r3, r3
    1e80:	2b00      	cmp	r3, #0
    1e82:	d1a7      	bne.n	1dd4 <_spi_interrupt_handler+0x24>
    1e84:	3301      	adds	r3, #1
    1e86:	7533      	strb	r3, [r6, #20]
    1e88:	e7a4      	b.n	1dd4 <_spi_interrupt_handler+0x24>
    1e8a:	7a62      	ldrb	r2, [r4, #9]
    1e8c:	2a00      	cmp	r2, #0
    1e8e:	d1a9      	bne.n	1de4 <_spi_interrupt_handler+0x34>
    1e90:	e7a3      	b.n	1dda <_spi_interrupt_handler+0x2a>
    1e92:	79e3      	ldrb	r3, [r4, #7]
    1e94:	2b00      	cmp	r3, #0
    1e96:	d1b1      	bne.n	1dfc <_spi_interrupt_handler+0x4c>
    1e98:	3302      	adds	r3, #2
    1e9a:	75b3      	strb	r3, [r6, #22]
    1e9c:	e7ae      	b.n	1dfc <_spi_interrupt_handler+0x4c>
    1e9e:	0020      	movs	r0, r4
    1ea0:	69a3      	ldr	r3, [r4, #24]
    1ea2:	4798      	blx	r3
    1ea4:	e7bb      	b.n	1e1e <_spi_interrupt_handler+0x6e>
    1ea6:	7a63      	ldrb	r3, [r4, #9]
    1ea8:	2b01      	cmp	r3, #1
    1eaa:	d017      	beq.n	1edc <_spi_interrupt_handler+0x12c>
    1eac:	0020      	movs	r0, r4
    1eae:	4b30      	ldr	r3, [pc, #192]	; (1f70 <_spi_interrupt_handler+0x1c0>)
    1eb0:	4798      	blx	r3
    1eb2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1eb4:	b29b      	uxth	r3, r3
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d1b4      	bne.n	1e24 <_spi_interrupt_handler+0x74>
    1eba:	2200      	movs	r2, #0
    1ebc:	3338      	adds	r3, #56	; 0x38
    1ebe:	54e2      	strb	r2, [r4, r3]
    1ec0:	3b34      	subs	r3, #52	; 0x34
    1ec2:	7533      	strb	r3, [r6, #20]
    1ec4:	7a63      	ldrb	r3, [r4, #9]
    1ec6:	2b02      	cmp	r3, #2
    1ec8:	d01d      	beq.n	1f06 <_spi_interrupt_handler+0x156>
    1eca:	7a63      	ldrb	r3, [r4, #9]
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d1a9      	bne.n	1e24 <_spi_interrupt_handler+0x74>
    1ed0:	07bb      	lsls	r3, r7, #30
    1ed2:	d5a7      	bpl.n	1e24 <_spi_interrupt_handler+0x74>
    1ed4:	0020      	movs	r0, r4
    1ed6:	6923      	ldr	r3, [r4, #16]
    1ed8:	4798      	blx	r3
    1eda:	e7a3      	b.n	1e24 <_spi_interrupt_handler+0x74>
    1edc:	0020      	movs	r0, r4
    1ede:	4b25      	ldr	r3, [pc, #148]	; (1f74 <_spi_interrupt_handler+0x1c4>)
    1ee0:	4798      	blx	r3
    1ee2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1ee4:	b29b      	uxth	r3, r3
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d19c      	bne.n	1e24 <_spi_interrupt_handler+0x74>
    1eea:	3304      	adds	r3, #4
    1eec:	7533      	strb	r3, [r6, #20]
    1eee:	2200      	movs	r2, #0
    1ef0:	3334      	adds	r3, #52	; 0x34
    1ef2:	54e2      	strb	r2, [r4, r3]
    1ef4:	3b35      	subs	r3, #53	; 0x35
    1ef6:	7263      	strb	r3, [r4, #9]
    1ef8:	07fb      	lsls	r3, r7, #31
    1efa:	d400      	bmi.n	1efe <_spi_interrupt_handler+0x14e>
    1efc:	e792      	b.n	1e24 <_spi_interrupt_handler+0x74>
    1efe:	0020      	movs	r0, r4
    1f00:	68e3      	ldr	r3, [r4, #12]
    1f02:	4798      	blx	r3
    1f04:	e78e      	b.n	1e24 <_spi_interrupt_handler+0x74>
    1f06:	077b      	lsls	r3, r7, #29
    1f08:	d400      	bmi.n	1f0c <_spi_interrupt_handler+0x15c>
    1f0a:	e78b      	b.n	1e24 <_spi_interrupt_handler+0x74>
    1f0c:	0020      	movs	r0, r4
    1f0e:	6963      	ldr	r3, [r4, #20]
    1f10:	4798      	blx	r3
    1f12:	e787      	b.n	1e24 <_spi_interrupt_handler+0x74>
    1f14:	0020      	movs	r0, r4
    1f16:	69e3      	ldr	r3, [r4, #28]
    1f18:	4798      	blx	r3
    1f1a:	e796      	b.n	1e4a <_spi_interrupt_handler+0x9a>
    1f1c:	7a63      	ldrb	r3, [r4, #9]
    1f1e:	2b01      	cmp	r3, #1
    1f20:	d000      	beq.n	1f24 <_spi_interrupt_handler+0x174>
    1f22:	e795      	b.n	1e50 <_spi_interrupt_handler+0xa0>
    1f24:	79e3      	ldrb	r3, [r4, #7]
    1f26:	2b00      	cmp	r3, #0
    1f28:	d000      	beq.n	1f2c <_spi_interrupt_handler+0x17c>
    1f2a:	e791      	b.n	1e50 <_spi_interrupt_handler+0xa0>
    1f2c:	3302      	adds	r3, #2
    1f2e:	7533      	strb	r3, [r6, #20]
    1f30:	3301      	adds	r3, #1
    1f32:	7263      	strb	r3, [r4, #9]
    1f34:	2200      	movs	r2, #0
    1f36:	3335      	adds	r3, #53	; 0x35
    1f38:	54e2      	strb	r2, [r4, r3]
    1f3a:	07fb      	lsls	r3, r7, #31
    1f3c:	d400      	bmi.n	1f40 <_spi_interrupt_handler+0x190>
    1f3e:	e787      	b.n	1e50 <_spi_interrupt_handler+0xa0>
    1f40:	0020      	movs	r0, r4
    1f42:	68e3      	ldr	r3, [r4, #12]
    1f44:	4798      	blx	r3
    1f46:	e783      	b.n	1e50 <_spi_interrupt_handler+0xa0>
    1f48:	0020      	movs	r0, r4
    1f4a:	6a23      	ldr	r3, [r4, #32]
    1f4c:	4798      	blx	r3
    1f4e:	e78a      	b.n	1e66 <_spi_interrupt_handler+0xb6>
    1f50:	2380      	movs	r3, #128	; 0x80
    1f52:	7533      	strb	r3, [r6, #20]
    1f54:	7633      	strb	r3, [r6, #24]
    1f56:	067b      	lsls	r3, r7, #25
    1f58:	d400      	bmi.n	1f5c <_spi_interrupt_handler+0x1ac>
    1f5a:	e788      	b.n	1e6e <_spi_interrupt_handler+0xbe>
    1f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f5e:	0020      	movs	r0, r4
    1f60:	4798      	blx	r3
    1f62:	e784      	b.n	1e6e <_spi_interrupt_handler+0xbe>
    1f64:	200000e8 	.word	0x200000e8
    1f68:	00001d25 	.word	0x00001d25
    1f6c:	00001d59 	.word	0x00001d59
    1f70:	00001d7f 	.word	0x00001d7f
    1f74:	00001d71 	.word	0x00001d71

00001f78 <_sercom_default_handler>:
    1f78:	4770      	bx	lr
	...

00001f7c <_sercom_set_handler>:
    1f7c:	b530      	push	{r4, r5, lr}
    1f7e:	4b0b      	ldr	r3, [pc, #44]	; (1fac <_sercom_set_handler+0x30>)
    1f80:	781b      	ldrb	r3, [r3, #0]
    1f82:	2b00      	cmp	r3, #0
    1f84:	d008      	beq.n	1f98 <_sercom_set_handler+0x1c>
    1f86:	e00c      	b.n	1fa2 <_sercom_set_handler+0x26>
    1f88:	009a      	lsls	r2, r3, #2
    1f8a:	4d09      	ldr	r5, [pc, #36]	; (1fb0 <_sercom_set_handler+0x34>)
    1f8c:	4c09      	ldr	r4, [pc, #36]	; (1fb4 <_sercom_set_handler+0x38>)
    1f8e:	5115      	str	r5, [r2, r4]
    1f90:	2500      	movs	r5, #0
    1f92:	4c09      	ldr	r4, [pc, #36]	; (1fb8 <_sercom_set_handler+0x3c>)
    1f94:	5115      	str	r5, [r2, r4]
    1f96:	3301      	adds	r3, #1
    1f98:	2b05      	cmp	r3, #5
    1f9a:	d9f5      	bls.n	1f88 <_sercom_set_handler+0xc>
    1f9c:	2201      	movs	r2, #1
    1f9e:	4b03      	ldr	r3, [pc, #12]	; (1fac <_sercom_set_handler+0x30>)
    1fa0:	701a      	strb	r2, [r3, #0]
    1fa2:	0080      	lsls	r0, r0, #2
    1fa4:	4b03      	ldr	r3, [pc, #12]	; (1fb4 <_sercom_set_handler+0x38>)
    1fa6:	50c1      	str	r1, [r0, r3]
    1fa8:	bd30      	pop	{r4, r5, pc}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	2000006a 	.word	0x2000006a
    1fb0:	00001f79 	.word	0x00001f79
    1fb4:	2000006c 	.word	0x2000006c
    1fb8:	200000e8 	.word	0x200000e8

00001fbc <_sercom_get_interrupt_vector>:
    1fbc:	b500      	push	{lr}
    1fbe:	b083      	sub	sp, #12
    1fc0:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <_sercom_get_interrupt_vector+0x1c>)
    1fc2:	681a      	ldr	r2, [r3, #0]
    1fc4:	9200      	str	r2, [sp, #0]
    1fc6:	889b      	ldrh	r3, [r3, #4]
    1fc8:	466a      	mov	r2, sp
    1fca:	8093      	strh	r3, [r2, #4]
    1fcc:	4b03      	ldr	r3, [pc, #12]	; (1fdc <_sercom_get_interrupt_vector+0x20>)
    1fce:	4798      	blx	r3
    1fd0:	466b      	mov	r3, sp
    1fd2:	5618      	ldrsb	r0, [r3, r0]
    1fd4:	b003      	add	sp, #12
    1fd6:	bd00      	pop	{pc}
    1fd8:	00002b2c 	.word	0x00002b2c
    1fdc:	00000dd5 	.word	0x00000dd5

00001fe0 <SERCOM0_Handler>:
    1fe0:	b510      	push	{r4, lr}
    1fe2:	4b02      	ldr	r3, [pc, #8]	; (1fec <SERCOM0_Handler+0xc>)
    1fe4:	681b      	ldr	r3, [r3, #0]
    1fe6:	2000      	movs	r0, #0
    1fe8:	4798      	blx	r3
    1fea:	bd10      	pop	{r4, pc}
    1fec:	2000006c 	.word	0x2000006c

00001ff0 <SERCOM1_Handler>:
    1ff0:	b510      	push	{r4, lr}
    1ff2:	4b02      	ldr	r3, [pc, #8]	; (1ffc <SERCOM1_Handler+0xc>)
    1ff4:	685b      	ldr	r3, [r3, #4]
    1ff6:	2001      	movs	r0, #1
    1ff8:	4798      	blx	r3
    1ffa:	bd10      	pop	{r4, pc}
    1ffc:	2000006c 	.word	0x2000006c

00002000 <SERCOM2_Handler>:
    2000:	b510      	push	{r4, lr}
    2002:	4b02      	ldr	r3, [pc, #8]	; (200c <STACK_SIZE+0xc>)
    2004:	689b      	ldr	r3, [r3, #8]
    2006:	2002      	movs	r0, #2
    2008:	4798      	blx	r3
    200a:	bd10      	pop	{r4, pc}
    200c:	2000006c 	.word	0x2000006c

00002010 <SERCOM3_Handler>:
    2010:	b510      	push	{r4, lr}
    2012:	4b02      	ldr	r3, [pc, #8]	; (201c <SERCOM3_Handler+0xc>)
    2014:	68db      	ldr	r3, [r3, #12]
    2016:	2003      	movs	r0, #3
    2018:	4798      	blx	r3
    201a:	bd10      	pop	{r4, pc}
    201c:	2000006c 	.word	0x2000006c

00002020 <SERCOM4_Handler>:
    2020:	b510      	push	{r4, lr}
    2022:	4b02      	ldr	r3, [pc, #8]	; (202c <SERCOM4_Handler+0xc>)
    2024:	691b      	ldr	r3, [r3, #16]
    2026:	2004      	movs	r0, #4
    2028:	4798      	blx	r3
    202a:	bd10      	pop	{r4, pc}
    202c:	2000006c 	.word	0x2000006c

00002030 <SERCOM5_Handler>:
    2030:	b510      	push	{r4, lr}
    2032:	4b02      	ldr	r3, [pc, #8]	; (203c <SERCOM5_Handler+0xc>)
    2034:	695b      	ldr	r3, [r3, #20]
    2036:	2005      	movs	r0, #5
    2038:	4798      	blx	r3
    203a:	bd10      	pop	{r4, pc}
    203c:	2000006c 	.word	0x2000006c

00002040 <system_board_init>:
    2040:	4770      	bx	lr
	...

00002044 <cpu_irq_enter_critical>:
    2044:	4b0c      	ldr	r3, [pc, #48]	; (2078 <cpu_irq_enter_critical+0x34>)
    2046:	681b      	ldr	r3, [r3, #0]
    2048:	2b00      	cmp	r3, #0
    204a:	d106      	bne.n	205a <cpu_irq_enter_critical+0x16>
    204c:	f3ef 8310 	mrs	r3, PRIMASK
    2050:	2b00      	cmp	r3, #0
    2052:	d007      	beq.n	2064 <cpu_irq_enter_critical+0x20>
    2054:	2200      	movs	r2, #0
    2056:	4b09      	ldr	r3, [pc, #36]	; (207c <cpu_irq_enter_critical+0x38>)
    2058:	701a      	strb	r2, [r3, #0]
    205a:	4a07      	ldr	r2, [pc, #28]	; (2078 <cpu_irq_enter_critical+0x34>)
    205c:	6813      	ldr	r3, [r2, #0]
    205e:	3301      	adds	r3, #1
    2060:	6013      	str	r3, [r2, #0]
    2062:	4770      	bx	lr
    2064:	b672      	cpsid	i
    2066:	f3bf 8f5f 	dmb	sy
    206a:	2200      	movs	r2, #0
    206c:	4b04      	ldr	r3, [pc, #16]	; (2080 <cpu_irq_enter_critical+0x3c>)
    206e:	701a      	strb	r2, [r3, #0]
    2070:	3201      	adds	r2, #1
    2072:	4b02      	ldr	r3, [pc, #8]	; (207c <cpu_irq_enter_critical+0x38>)
    2074:	701a      	strb	r2, [r3, #0]
    2076:	e7f0      	b.n	205a <cpu_irq_enter_critical+0x16>
    2078:	20000084 	.word	0x20000084
    207c:	20000088 	.word	0x20000088
    2080:	20000008 	.word	0x20000008

00002084 <cpu_irq_leave_critical>:
    2084:	4b08      	ldr	r3, [pc, #32]	; (20a8 <cpu_irq_leave_critical+0x24>)
    2086:	681a      	ldr	r2, [r3, #0]
    2088:	3a01      	subs	r2, #1
    208a:	601a      	str	r2, [r3, #0]
    208c:	681b      	ldr	r3, [r3, #0]
    208e:	2b00      	cmp	r3, #0
    2090:	d109      	bne.n	20a6 <cpu_irq_leave_critical+0x22>
    2092:	4b06      	ldr	r3, [pc, #24]	; (20ac <cpu_irq_leave_critical+0x28>)
    2094:	781b      	ldrb	r3, [r3, #0]
    2096:	2b00      	cmp	r3, #0
    2098:	d005      	beq.n	20a6 <cpu_irq_leave_critical+0x22>
    209a:	2201      	movs	r2, #1
    209c:	4b04      	ldr	r3, [pc, #16]	; (20b0 <cpu_irq_leave_critical+0x2c>)
    209e:	701a      	strb	r2, [r3, #0]
    20a0:	f3bf 8f5f 	dmb	sy
    20a4:	b662      	cpsie	i
    20a6:	4770      	bx	lr
    20a8:	20000084 	.word	0x20000084
    20ac:	20000088 	.word	0x20000088
    20b0:	20000008 	.word	0x20000008

000020b4 <_switch_peripheral_gclk>:
    20b4:	b510      	push	{r4, lr}
    20b6:	b082      	sub	sp, #8
    20b8:	2201      	movs	r2, #1
    20ba:	ab01      	add	r3, sp, #4
    20bc:	701a      	strb	r2, [r3, #0]
    20be:	2400      	movs	r4, #0
    20c0:	e004      	b.n	20cc <_switch_peripheral_gclk+0x18>
    20c2:	b2e0      	uxtb	r0, r4
    20c4:	a901      	add	r1, sp, #4
    20c6:	4b03      	ldr	r3, [pc, #12]	; (20d4 <_switch_peripheral_gclk+0x20>)
    20c8:	4798      	blx	r3
    20ca:	3401      	adds	r4, #1
    20cc:	2c24      	cmp	r4, #36	; 0x24
    20ce:	d9f8      	bls.n	20c2 <_switch_peripheral_gclk+0xe>
    20d0:	b002      	add	sp, #8
    20d2:	bd10      	pop	{r4, pc}
    20d4:	00002555 	.word	0x00002555

000020d8 <system_clock_source_get_hz>:
    20d8:	b510      	push	{r4, lr}
    20da:	2808      	cmp	r0, #8
    20dc:	d832      	bhi.n	2144 <system_clock_source_get_hz+0x6c>
    20de:	0080      	lsls	r0, r0, #2
    20e0:	4b1b      	ldr	r3, [pc, #108]	; (2150 <system_clock_source_get_hz+0x78>)
    20e2:	581b      	ldr	r3, [r3, r0]
    20e4:	469f      	mov	pc, r3
    20e6:	2080      	movs	r0, #128	; 0x80
    20e8:	0200      	lsls	r0, r0, #8
    20ea:	bd10      	pop	{r4, pc}
    20ec:	4b19      	ldr	r3, [pc, #100]	; (2154 <system_clock_source_get_hz+0x7c>)
    20ee:	6918      	ldr	r0, [r3, #16]
    20f0:	e7fb      	b.n	20ea <system_clock_source_get_hz+0x12>
    20f2:	4b19      	ldr	r3, [pc, #100]	; (2158 <system_clock_source_get_hz+0x80>)
    20f4:	6a1b      	ldr	r3, [r3, #32]
    20f6:	059b      	lsls	r3, r3, #22
    20f8:	0f9b      	lsrs	r3, r3, #30
    20fa:	4818      	ldr	r0, [pc, #96]	; (215c <system_clock_source_get_hz+0x84>)
    20fc:	40d8      	lsrs	r0, r3
    20fe:	e7f4      	b.n	20ea <system_clock_source_get_hz+0x12>
    2100:	4b14      	ldr	r3, [pc, #80]	; (2154 <system_clock_source_get_hz+0x7c>)
    2102:	6958      	ldr	r0, [r3, #20]
    2104:	e7f1      	b.n	20ea <system_clock_source_get_hz+0x12>
    2106:	4b13      	ldr	r3, [pc, #76]	; (2154 <system_clock_source_get_hz+0x7c>)
    2108:	681b      	ldr	r3, [r3, #0]
    210a:	079b      	lsls	r3, r3, #30
    210c:	d51c      	bpl.n	2148 <system_clock_source_get_hz+0x70>
    210e:	4b12      	ldr	r3, [pc, #72]	; (2158 <system_clock_source_get_hz+0x80>)
    2110:	68db      	ldr	r3, [r3, #12]
    2112:	06db      	lsls	r3, r3, #27
    2114:	d5fb      	bpl.n	210e <system_clock_source_get_hz+0x36>
    2116:	4b0f      	ldr	r3, [pc, #60]	; (2154 <system_clock_source_get_hz+0x7c>)
    2118:	681b      	ldr	r3, [r3, #0]
    211a:	075b      	lsls	r3, r3, #29
    211c:	d401      	bmi.n	2122 <system_clock_source_get_hz+0x4a>
    211e:	4810      	ldr	r0, [pc, #64]	; (2160 <system_clock_source_get_hz+0x88>)
    2120:	e7e3      	b.n	20ea <system_clock_source_get_hz+0x12>
    2122:	2000      	movs	r0, #0
    2124:	4b0f      	ldr	r3, [pc, #60]	; (2164 <system_clock_source_get_hz+0x8c>)
    2126:	4798      	blx	r3
    2128:	4b0a      	ldr	r3, [pc, #40]	; (2154 <system_clock_source_get_hz+0x7c>)
    212a:	689b      	ldr	r3, [r3, #8]
    212c:	041b      	lsls	r3, r3, #16
    212e:	0c1b      	lsrs	r3, r3, #16
    2130:	4358      	muls	r0, r3
    2132:	e7da      	b.n	20ea <system_clock_source_get_hz+0x12>
    2134:	2350      	movs	r3, #80	; 0x50
    2136:	4a08      	ldr	r2, [pc, #32]	; (2158 <system_clock_source_get_hz+0x80>)
    2138:	5cd3      	ldrb	r3, [r2, r3]
    213a:	075b      	lsls	r3, r3, #29
    213c:	d506      	bpl.n	214c <system_clock_source_get_hz+0x74>
    213e:	4b05      	ldr	r3, [pc, #20]	; (2154 <system_clock_source_get_hz+0x7c>)
    2140:	68d8      	ldr	r0, [r3, #12]
    2142:	e7d2      	b.n	20ea <system_clock_source_get_hz+0x12>
    2144:	2000      	movs	r0, #0
    2146:	e7d0      	b.n	20ea <system_clock_source_get_hz+0x12>
    2148:	2000      	movs	r0, #0
    214a:	e7ce      	b.n	20ea <system_clock_source_get_hz+0x12>
    214c:	2000      	movs	r0, #0
    214e:	e7cc      	b.n	20ea <system_clock_source_get_hz+0x12>
    2150:	00002b34 	.word	0x00002b34
    2154:	2000008c 	.word	0x2000008c
    2158:	40000800 	.word	0x40000800
    215c:	007a1200 	.word	0x007a1200
    2160:	02dc6c00 	.word	0x02dc6c00
    2164:	00002571 	.word	0x00002571

00002168 <system_clock_source_osc8m_set_config>:
    2168:	b570      	push	{r4, r5, r6, lr}
    216a:	4d0c      	ldr	r5, [pc, #48]	; (219c <system_clock_source_osc8m_set_config+0x34>)
    216c:	6a2e      	ldr	r6, [r5, #32]
    216e:	7802      	ldrb	r2, [r0, #0]
    2170:	2103      	movs	r1, #3
    2172:	400a      	ands	r2, r1
    2174:	0212      	lsls	r2, r2, #8
    2176:	490a      	ldr	r1, [pc, #40]	; (21a0 <system_clock_source_osc8m_set_config+0x38>)
    2178:	4031      	ands	r1, r6
    217a:	4311      	orrs	r1, r2
    217c:	7882      	ldrb	r2, [r0, #2]
    217e:	2401      	movs	r4, #1
    2180:	4022      	ands	r2, r4
    2182:	01d2      	lsls	r2, r2, #7
    2184:	2380      	movs	r3, #128	; 0x80
    2186:	4399      	bics	r1, r3
    2188:	430a      	orrs	r2, r1
    218a:	7843      	ldrb	r3, [r0, #1]
    218c:	4023      	ands	r3, r4
    218e:	019b      	lsls	r3, r3, #6
    2190:	2140      	movs	r1, #64	; 0x40
    2192:	438a      	bics	r2, r1
    2194:	4313      	orrs	r3, r2
    2196:	622b      	str	r3, [r5, #32]
    2198:	bd70      	pop	{r4, r5, r6, pc}
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	40000800 	.word	0x40000800
    21a0:	fffffcff 	.word	0xfffffcff

000021a4 <system_clock_source_enable>:
    21a4:	2808      	cmp	r0, #8
    21a6:	d84a      	bhi.n	223e <system_clock_source_enable+0x9a>
    21a8:	0080      	lsls	r0, r0, #2
    21aa:	4b26      	ldr	r3, [pc, #152]	; (2244 <system_clock_source_enable+0xa0>)
    21ac:	581b      	ldr	r3, [r3, r0]
    21ae:	469f      	mov	pc, r3
    21b0:	2000      	movs	r0, #0
    21b2:	4770      	bx	lr
    21b4:	4a24      	ldr	r2, [pc, #144]	; (2248 <system_clock_source_enable+0xa4>)
    21b6:	6a13      	ldr	r3, [r2, #32]
    21b8:	2102      	movs	r1, #2
    21ba:	430b      	orrs	r3, r1
    21bc:	6213      	str	r3, [r2, #32]
    21be:	2000      	movs	r0, #0
    21c0:	e7f7      	b.n	21b2 <system_clock_source_enable+0xe>
    21c2:	4a21      	ldr	r2, [pc, #132]	; (2248 <system_clock_source_enable+0xa4>)
    21c4:	6993      	ldr	r3, [r2, #24]
    21c6:	2102      	movs	r1, #2
    21c8:	430b      	orrs	r3, r1
    21ca:	6193      	str	r3, [r2, #24]
    21cc:	2000      	movs	r0, #0
    21ce:	e7f0      	b.n	21b2 <system_clock_source_enable+0xe>
    21d0:	4a1d      	ldr	r2, [pc, #116]	; (2248 <system_clock_source_enable+0xa4>)
    21d2:	8a13      	ldrh	r3, [r2, #16]
    21d4:	2102      	movs	r1, #2
    21d6:	430b      	orrs	r3, r1
    21d8:	b29b      	uxth	r3, r3
    21da:	8213      	strh	r3, [r2, #16]
    21dc:	2000      	movs	r0, #0
    21de:	e7e8      	b.n	21b2 <system_clock_source_enable+0xe>
    21e0:	4a19      	ldr	r2, [pc, #100]	; (2248 <system_clock_source_enable+0xa4>)
    21e2:	8a93      	ldrh	r3, [r2, #20]
    21e4:	2102      	movs	r1, #2
    21e6:	430b      	orrs	r3, r1
    21e8:	b29b      	uxth	r3, r3
    21ea:	8293      	strh	r3, [r2, #20]
    21ec:	2000      	movs	r0, #0
    21ee:	e7e0      	b.n	21b2 <system_clock_source_enable+0xe>
    21f0:	4916      	ldr	r1, [pc, #88]	; (224c <system_clock_source_enable+0xa8>)
    21f2:	680b      	ldr	r3, [r1, #0]
    21f4:	2202      	movs	r2, #2
    21f6:	4313      	orrs	r3, r2
    21f8:	600b      	str	r3, [r1, #0]
    21fa:	4b13      	ldr	r3, [pc, #76]	; (2248 <system_clock_source_enable+0xa4>)
    21fc:	849a      	strh	r2, [r3, #36]	; 0x24
    21fe:	4b12      	ldr	r3, [pc, #72]	; (2248 <system_clock_source_enable+0xa4>)
    2200:	68db      	ldr	r3, [r3, #12]
    2202:	06db      	lsls	r3, r3, #27
    2204:	d5fb      	bpl.n	21fe <system_clock_source_enable+0x5a>
    2206:	4a11      	ldr	r2, [pc, #68]	; (224c <system_clock_source_enable+0xa8>)
    2208:	6891      	ldr	r1, [r2, #8]
    220a:	4b0f      	ldr	r3, [pc, #60]	; (2248 <system_clock_source_enable+0xa4>)
    220c:	62d9      	str	r1, [r3, #44]	; 0x2c
    220e:	6852      	ldr	r2, [r2, #4]
    2210:	629a      	str	r2, [r3, #40]	; 0x28
    2212:	2200      	movs	r2, #0
    2214:	849a      	strh	r2, [r3, #36]	; 0x24
    2216:	4b0c      	ldr	r3, [pc, #48]	; (2248 <system_clock_source_enable+0xa4>)
    2218:	68db      	ldr	r3, [r3, #12]
    221a:	06db      	lsls	r3, r3, #27
    221c:	d5fb      	bpl.n	2216 <system_clock_source_enable+0x72>
    221e:	4b0b      	ldr	r3, [pc, #44]	; (224c <system_clock_source_enable+0xa8>)
    2220:	681b      	ldr	r3, [r3, #0]
    2222:	b29b      	uxth	r3, r3
    2224:	4a08      	ldr	r2, [pc, #32]	; (2248 <system_clock_source_enable+0xa4>)
    2226:	8493      	strh	r3, [r2, #36]	; 0x24
    2228:	2000      	movs	r0, #0
    222a:	e7c2      	b.n	21b2 <system_clock_source_enable+0xe>
    222c:	4906      	ldr	r1, [pc, #24]	; (2248 <system_clock_source_enable+0xa4>)
    222e:	2244      	movs	r2, #68	; 0x44
    2230:	5c8b      	ldrb	r3, [r1, r2]
    2232:	2002      	movs	r0, #2
    2234:	4303      	orrs	r3, r0
    2236:	b2db      	uxtb	r3, r3
    2238:	548b      	strb	r3, [r1, r2]
    223a:	2000      	movs	r0, #0
    223c:	e7b9      	b.n	21b2 <system_clock_source_enable+0xe>
    223e:	2017      	movs	r0, #23
    2240:	e7b7      	b.n	21b2 <system_clock_source_enable+0xe>
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	00002b58 	.word	0x00002b58
    2248:	40000800 	.word	0x40000800
    224c:	2000008c 	.word	0x2000008c

00002250 <system_clock_init>:
    2250:	b530      	push	{r4, r5, lr}
    2252:	b085      	sub	sp, #20
    2254:	22c2      	movs	r2, #194	; 0xc2
    2256:	00d2      	lsls	r2, r2, #3
    2258:	4b15      	ldr	r3, [pc, #84]	; (22b0 <system_clock_init+0x60>)
    225a:	609a      	str	r2, [r3, #8]
    225c:	4b15      	ldr	r3, [pc, #84]	; (22b4 <system_clock_init+0x64>)
    225e:	6859      	ldr	r1, [r3, #4]
    2260:	221e      	movs	r2, #30
    2262:	4391      	bics	r1, r2
    2264:	6059      	str	r1, [r3, #4]
    2266:	4b14      	ldr	r3, [pc, #80]	; (22b8 <system_clock_init+0x68>)
    2268:	4798      	blx	r3
    226a:	a803      	add	r0, sp, #12
    226c:	2400      	movs	r4, #0
    226e:	7044      	strb	r4, [r0, #1]
    2270:	2501      	movs	r5, #1
    2272:	7085      	strb	r5, [r0, #2]
    2274:	7004      	strb	r4, [r0, #0]
    2276:	4b11      	ldr	r3, [pc, #68]	; (22bc <system_clock_init+0x6c>)
    2278:	4798      	blx	r3
    227a:	2006      	movs	r0, #6
    227c:	4b10      	ldr	r3, [pc, #64]	; (22c0 <system_clock_init+0x70>)
    227e:	4798      	blx	r3
    2280:	4b10      	ldr	r3, [pc, #64]	; (22c4 <system_clock_init+0x74>)
    2282:	4798      	blx	r3
    2284:	4b10      	ldr	r3, [pc, #64]	; (22c8 <system_clock_init+0x78>)
    2286:	721c      	strb	r4, [r3, #8]
    2288:	725c      	strb	r4, [r3, #9]
    228a:	729c      	strb	r4, [r3, #10]
    228c:	72dc      	strb	r4, [r3, #11]
    228e:	9501      	str	r5, [sp, #4]
    2290:	466b      	mov	r3, sp
    2292:	705c      	strb	r4, [r3, #1]
    2294:	2306      	movs	r3, #6
    2296:	466a      	mov	r2, sp
    2298:	7013      	strb	r3, [r2, #0]
    229a:	7214      	strb	r4, [r2, #8]
    229c:	7254      	strb	r4, [r2, #9]
    229e:	4669      	mov	r1, sp
    22a0:	2000      	movs	r0, #0
    22a2:	4b0a      	ldr	r3, [pc, #40]	; (22cc <system_clock_init+0x7c>)
    22a4:	4798      	blx	r3
    22a6:	2000      	movs	r0, #0
    22a8:	4b09      	ldr	r3, [pc, #36]	; (22d0 <system_clock_init+0x80>)
    22aa:	4798      	blx	r3
    22ac:	b005      	add	sp, #20
    22ae:	bd30      	pop	{r4, r5, pc}
    22b0:	40000800 	.word	0x40000800
    22b4:	41004000 	.word	0x41004000
    22b8:	000020b5 	.word	0x000020b5
    22bc:	00002169 	.word	0x00002169
    22c0:	000021a5 	.word	0x000021a5
    22c4:	000022d5 	.word	0x000022d5
    22c8:	40000400 	.word	0x40000400
    22cc:	000022f9 	.word	0x000022f9
    22d0:	000023c9 	.word	0x000023c9

000022d4 <system_gclk_init>:
    22d4:	4a06      	ldr	r2, [pc, #24]	; (22f0 <system_gclk_init+0x1c>)
    22d6:	6993      	ldr	r3, [r2, #24]
    22d8:	2108      	movs	r1, #8
    22da:	430b      	orrs	r3, r1
    22dc:	6193      	str	r3, [r2, #24]
    22de:	2201      	movs	r2, #1
    22e0:	4b04      	ldr	r3, [pc, #16]	; (22f4 <system_gclk_init+0x20>)
    22e2:	701a      	strb	r2, [r3, #0]
    22e4:	4b03      	ldr	r3, [pc, #12]	; (22f4 <system_gclk_init+0x20>)
    22e6:	781b      	ldrb	r3, [r3, #0]
    22e8:	07db      	lsls	r3, r3, #31
    22ea:	d4fb      	bmi.n	22e4 <system_gclk_init+0x10>
    22ec:	4770      	bx	lr
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	40000400 	.word	0x40000400
    22f4:	40000c00 	.word	0x40000c00

000022f8 <system_gclk_gen_set_config>:
    22f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22fa:	0006      	movs	r6, r0
    22fc:	0005      	movs	r5, r0
    22fe:	780c      	ldrb	r4, [r1, #0]
    2300:	0224      	lsls	r4, r4, #8
    2302:	4304      	orrs	r4, r0
    2304:	784b      	ldrb	r3, [r1, #1]
    2306:	2b00      	cmp	r3, #0
    2308:	d002      	beq.n	2310 <system_gclk_gen_set_config+0x18>
    230a:	2380      	movs	r3, #128	; 0x80
    230c:	02db      	lsls	r3, r3, #11
    230e:	431c      	orrs	r4, r3
    2310:	7a4b      	ldrb	r3, [r1, #9]
    2312:	2b00      	cmp	r3, #0
    2314:	d002      	beq.n	231c <system_gclk_gen_set_config+0x24>
    2316:	2380      	movs	r3, #128	; 0x80
    2318:	031b      	lsls	r3, r3, #12
    231a:	431c      	orrs	r4, r3
    231c:	6848      	ldr	r0, [r1, #4]
    231e:	2801      	cmp	r0, #1
    2320:	d912      	bls.n	2348 <system_gclk_gen_set_config+0x50>
    2322:	1e43      	subs	r3, r0, #1
    2324:	4203      	tst	r3, r0
    2326:	d03d      	beq.n	23a4 <system_gclk_gen_set_config+0xac>
    2328:	0205      	lsls	r5, r0, #8
    232a:	4335      	orrs	r5, r6
    232c:	2380      	movs	r3, #128	; 0x80
    232e:	029b      	lsls	r3, r3, #10
    2330:	431c      	orrs	r4, r3
    2332:	e009      	b.n	2348 <system_gclk_gen_set_config+0x50>
    2334:	3201      	adds	r2, #1
    2336:	005b      	lsls	r3, r3, #1
    2338:	4283      	cmp	r3, r0
    233a:	d3fb      	bcc.n	2334 <system_gclk_gen_set_config+0x3c>
    233c:	0212      	lsls	r2, r2, #8
    233e:	4332      	orrs	r2, r6
    2340:	0015      	movs	r5, r2
    2342:	2380      	movs	r3, #128	; 0x80
    2344:	035b      	lsls	r3, r3, #13
    2346:	431c      	orrs	r4, r3
    2348:	7a0b      	ldrb	r3, [r1, #8]
    234a:	2b00      	cmp	r3, #0
    234c:	d002      	beq.n	2354 <system_gclk_gen_set_config+0x5c>
    234e:	2380      	movs	r3, #128	; 0x80
    2350:	039b      	lsls	r3, r3, #14
    2352:	431c      	orrs	r4, r3
    2354:	4b18      	ldr	r3, [pc, #96]	; (23b8 <system_gclk_gen_set_config+0xc0>)
    2356:	785b      	ldrb	r3, [r3, #1]
    2358:	b25b      	sxtb	r3, r3
    235a:	2b00      	cmp	r3, #0
    235c:	db25      	blt.n	23aa <system_gclk_gen_set_config+0xb2>
    235e:	2700      	movs	r7, #0
    2360:	2f00      	cmp	r7, #0
    2362:	d1f7      	bne.n	2354 <system_gclk_gen_set_config+0x5c>
    2364:	4b15      	ldr	r3, [pc, #84]	; (23bc <system_gclk_gen_set_config+0xc4>)
    2366:	4798      	blx	r3
    2368:	4b15      	ldr	r3, [pc, #84]	; (23c0 <system_gclk_gen_set_config+0xc8>)
    236a:	701e      	strb	r6, [r3, #0]
    236c:	4b12      	ldr	r3, [pc, #72]	; (23b8 <system_gclk_gen_set_config+0xc0>)
    236e:	785b      	ldrb	r3, [r3, #1]
    2370:	b25b      	sxtb	r3, r3
    2372:	2b00      	cmp	r3, #0
    2374:	db1b      	blt.n	23ae <system_gclk_gen_set_config+0xb6>
    2376:	003a      	movs	r2, r7
    2378:	2a00      	cmp	r2, #0
    237a:	d1f7      	bne.n	236c <system_gclk_gen_set_config+0x74>
    237c:	4b0e      	ldr	r3, [pc, #56]	; (23b8 <system_gclk_gen_set_config+0xc0>)
    237e:	609d      	str	r5, [r3, #8]
    2380:	4b0d      	ldr	r3, [pc, #52]	; (23b8 <system_gclk_gen_set_config+0xc0>)
    2382:	785b      	ldrb	r3, [r3, #1]
    2384:	b25b      	sxtb	r3, r3
    2386:	2b00      	cmp	r3, #0
    2388:	db13      	blt.n	23b2 <system_gclk_gen_set_config+0xba>
    238a:	0013      	movs	r3, r2
    238c:	2b00      	cmp	r3, #0
    238e:	d1f7      	bne.n	2380 <system_gclk_gen_set_config+0x88>
    2390:	4a09      	ldr	r2, [pc, #36]	; (23b8 <system_gclk_gen_set_config+0xc0>)
    2392:	6853      	ldr	r3, [r2, #4]
    2394:	2180      	movs	r1, #128	; 0x80
    2396:	0249      	lsls	r1, r1, #9
    2398:	400b      	ands	r3, r1
    239a:	431c      	orrs	r4, r3
    239c:	6054      	str	r4, [r2, #4]
    239e:	4b09      	ldr	r3, [pc, #36]	; (23c4 <system_gclk_gen_set_config+0xcc>)
    23a0:	4798      	blx	r3
    23a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23a4:	2302      	movs	r3, #2
    23a6:	2200      	movs	r2, #0
    23a8:	e7c6      	b.n	2338 <system_gclk_gen_set_config+0x40>
    23aa:	2701      	movs	r7, #1
    23ac:	e7d8      	b.n	2360 <system_gclk_gen_set_config+0x68>
    23ae:	2201      	movs	r2, #1
    23b0:	e7e2      	b.n	2378 <system_gclk_gen_set_config+0x80>
    23b2:	2301      	movs	r3, #1
    23b4:	e7ea      	b.n	238c <system_gclk_gen_set_config+0x94>
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	40000c00 	.word	0x40000c00
    23bc:	00002045 	.word	0x00002045
    23c0:	40000c08 	.word	0x40000c08
    23c4:	00002085 	.word	0x00002085

000023c8 <system_gclk_gen_enable>:
    23c8:	b570      	push	{r4, r5, r6, lr}
    23ca:	0005      	movs	r5, r0
    23cc:	4b10      	ldr	r3, [pc, #64]	; (2410 <system_gclk_gen_enable+0x48>)
    23ce:	785b      	ldrb	r3, [r3, #1]
    23d0:	b25b      	sxtb	r3, r3
    23d2:	2b00      	cmp	r3, #0
    23d4:	db17      	blt.n	2406 <system_gclk_gen_enable+0x3e>
    23d6:	2400      	movs	r4, #0
    23d8:	2c00      	cmp	r4, #0
    23da:	d1f7      	bne.n	23cc <system_gclk_gen_enable+0x4>
    23dc:	4b0d      	ldr	r3, [pc, #52]	; (2414 <system_gclk_gen_enable+0x4c>)
    23de:	4798      	blx	r3
    23e0:	4b0d      	ldr	r3, [pc, #52]	; (2418 <system_gclk_gen_enable+0x50>)
    23e2:	701d      	strb	r5, [r3, #0]
    23e4:	4b0a      	ldr	r3, [pc, #40]	; (2410 <system_gclk_gen_enable+0x48>)
    23e6:	785b      	ldrb	r3, [r3, #1]
    23e8:	b25b      	sxtb	r3, r3
    23ea:	2b00      	cmp	r3, #0
    23ec:	db0d      	blt.n	240a <system_gclk_gen_enable+0x42>
    23ee:	0023      	movs	r3, r4
    23f0:	2b00      	cmp	r3, #0
    23f2:	d1f7      	bne.n	23e4 <system_gclk_gen_enable+0x1c>
    23f4:	4a06      	ldr	r2, [pc, #24]	; (2410 <system_gclk_gen_enable+0x48>)
    23f6:	6851      	ldr	r1, [r2, #4]
    23f8:	2380      	movs	r3, #128	; 0x80
    23fa:	025b      	lsls	r3, r3, #9
    23fc:	430b      	orrs	r3, r1
    23fe:	6053      	str	r3, [r2, #4]
    2400:	4b06      	ldr	r3, [pc, #24]	; (241c <system_gclk_gen_enable+0x54>)
    2402:	4798      	blx	r3
    2404:	bd70      	pop	{r4, r5, r6, pc}
    2406:	2401      	movs	r4, #1
    2408:	e7e6      	b.n	23d8 <system_gclk_gen_enable+0x10>
    240a:	2301      	movs	r3, #1
    240c:	e7f0      	b.n	23f0 <system_gclk_gen_enable+0x28>
    240e:	46c0      	nop			; (mov r8, r8)
    2410:	40000c00 	.word	0x40000c00
    2414:	00002045 	.word	0x00002045
    2418:	40000c04 	.word	0x40000c04
    241c:	00002085 	.word	0x00002085

00002420 <system_gclk_gen_get_hz>:
    2420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2422:	0007      	movs	r7, r0
    2424:	4b22      	ldr	r3, [pc, #136]	; (24b0 <system_gclk_gen_get_hz+0x90>)
    2426:	785b      	ldrb	r3, [r3, #1]
    2428:	b25b      	sxtb	r3, r3
    242a:	2b00      	cmp	r3, #0
    242c:	db34      	blt.n	2498 <system_gclk_gen_get_hz+0x78>
    242e:	2500      	movs	r5, #0
    2430:	2d00      	cmp	r5, #0
    2432:	d1f7      	bne.n	2424 <system_gclk_gen_get_hz+0x4>
    2434:	4b1f      	ldr	r3, [pc, #124]	; (24b4 <system_gclk_gen_get_hz+0x94>)
    2436:	4798      	blx	r3
    2438:	4b1f      	ldr	r3, [pc, #124]	; (24b8 <system_gclk_gen_get_hz+0x98>)
    243a:	701f      	strb	r7, [r3, #0]
    243c:	4b1c      	ldr	r3, [pc, #112]	; (24b0 <system_gclk_gen_get_hz+0x90>)
    243e:	785b      	ldrb	r3, [r3, #1]
    2440:	b25b      	sxtb	r3, r3
    2442:	2b00      	cmp	r3, #0
    2444:	db2a      	blt.n	249c <system_gclk_gen_get_hz+0x7c>
    2446:	002c      	movs	r4, r5
    2448:	2c00      	cmp	r4, #0
    244a:	d1f7      	bne.n	243c <system_gclk_gen_get_hz+0x1c>
    244c:	4e18      	ldr	r6, [pc, #96]	; (24b0 <system_gclk_gen_get_hz+0x90>)
    244e:	6870      	ldr	r0, [r6, #4]
    2450:	04c0      	lsls	r0, r0, #19
    2452:	0ec0      	lsrs	r0, r0, #27
    2454:	4b19      	ldr	r3, [pc, #100]	; (24bc <system_gclk_gen_get_hz+0x9c>)
    2456:	4798      	blx	r3
    2458:	0005      	movs	r5, r0
    245a:	4b17      	ldr	r3, [pc, #92]	; (24b8 <system_gclk_gen_get_hz+0x98>)
    245c:	701f      	strb	r7, [r3, #0]
    245e:	6876      	ldr	r6, [r6, #4]
    2460:	02f6      	lsls	r6, r6, #11
    2462:	0ff6      	lsrs	r6, r6, #31
    2464:	4b16      	ldr	r3, [pc, #88]	; (24c0 <system_gclk_gen_get_hz+0xa0>)
    2466:	701f      	strb	r7, [r3, #0]
    2468:	4b11      	ldr	r3, [pc, #68]	; (24b0 <system_gclk_gen_get_hz+0x90>)
    246a:	785b      	ldrb	r3, [r3, #1]
    246c:	b25b      	sxtb	r3, r3
    246e:	2b00      	cmp	r3, #0
    2470:	db16      	blt.n	24a0 <system_gclk_gen_get_hz+0x80>
    2472:	0023      	movs	r3, r4
    2474:	2b00      	cmp	r3, #0
    2476:	d1f7      	bne.n	2468 <system_gclk_gen_get_hz+0x48>
    2478:	4b0d      	ldr	r3, [pc, #52]	; (24b0 <system_gclk_gen_get_hz+0x90>)
    247a:	689c      	ldr	r4, [r3, #8]
    247c:	0224      	lsls	r4, r4, #8
    247e:	0c24      	lsrs	r4, r4, #16
    2480:	4b10      	ldr	r3, [pc, #64]	; (24c4 <system_gclk_gen_get_hz+0xa4>)
    2482:	4798      	blx	r3
    2484:	2e00      	cmp	r6, #0
    2486:	d10d      	bne.n	24a4 <system_gclk_gen_get_hz+0x84>
    2488:	2c01      	cmp	r4, #1
    248a:	d90b      	bls.n	24a4 <system_gclk_gen_get_hz+0x84>
    248c:	0021      	movs	r1, r4
    248e:	0028      	movs	r0, r5
    2490:	4b0d      	ldr	r3, [pc, #52]	; (24c8 <system_gclk_gen_get_hz+0xa8>)
    2492:	4798      	blx	r3
    2494:	0005      	movs	r5, r0
    2496:	e009      	b.n	24ac <system_gclk_gen_get_hz+0x8c>
    2498:	2501      	movs	r5, #1
    249a:	e7c9      	b.n	2430 <system_gclk_gen_get_hz+0x10>
    249c:	2401      	movs	r4, #1
    249e:	e7d3      	b.n	2448 <system_gclk_gen_get_hz+0x28>
    24a0:	2301      	movs	r3, #1
    24a2:	e7e7      	b.n	2474 <system_gclk_gen_get_hz+0x54>
    24a4:	2e00      	cmp	r6, #0
    24a6:	d001      	beq.n	24ac <system_gclk_gen_get_hz+0x8c>
    24a8:	3401      	adds	r4, #1
    24aa:	40e5      	lsrs	r5, r4
    24ac:	0028      	movs	r0, r5
    24ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24b0:	40000c00 	.word	0x40000c00
    24b4:	00002045 	.word	0x00002045
    24b8:	40000c04 	.word	0x40000c04
    24bc:	000020d9 	.word	0x000020d9
    24c0:	40000c08 	.word	0x40000c08
    24c4:	00002085 	.word	0x00002085
    24c8:	0000293d 	.word	0x0000293d

000024cc <system_gclk_chan_enable>:
    24cc:	b510      	push	{r4, lr}
    24ce:	0004      	movs	r4, r0
    24d0:	4b06      	ldr	r3, [pc, #24]	; (24ec <system_gclk_chan_enable+0x20>)
    24d2:	4798      	blx	r3
    24d4:	4b06      	ldr	r3, [pc, #24]	; (24f0 <system_gclk_chan_enable+0x24>)
    24d6:	701c      	strb	r4, [r3, #0]
    24d8:	4a06      	ldr	r2, [pc, #24]	; (24f4 <system_gclk_chan_enable+0x28>)
    24da:	8853      	ldrh	r3, [r2, #2]
    24dc:	2180      	movs	r1, #128	; 0x80
    24de:	01c9      	lsls	r1, r1, #7
    24e0:	430b      	orrs	r3, r1
    24e2:	8053      	strh	r3, [r2, #2]
    24e4:	4b04      	ldr	r3, [pc, #16]	; (24f8 <system_gclk_chan_enable+0x2c>)
    24e6:	4798      	blx	r3
    24e8:	bd10      	pop	{r4, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	00002045 	.word	0x00002045
    24f0:	40000c02 	.word	0x40000c02
    24f4:	40000c00 	.word	0x40000c00
    24f8:	00002085 	.word	0x00002085

000024fc <system_gclk_chan_disable>:
    24fc:	b510      	push	{r4, lr}
    24fe:	0004      	movs	r4, r0
    2500:	4b0e      	ldr	r3, [pc, #56]	; (253c <system_gclk_chan_disable+0x40>)
    2502:	4798      	blx	r3
    2504:	4b0e      	ldr	r3, [pc, #56]	; (2540 <system_gclk_chan_disable+0x44>)
    2506:	701c      	strb	r4, [r3, #0]
    2508:	490e      	ldr	r1, [pc, #56]	; (2544 <system_gclk_chan_disable+0x48>)
    250a:	884b      	ldrh	r3, [r1, #2]
    250c:	051b      	lsls	r3, r3, #20
    250e:	0f1a      	lsrs	r2, r3, #28
    2510:	884b      	ldrh	r3, [r1, #2]
    2512:	480d      	ldr	r0, [pc, #52]	; (2548 <system_gclk_chan_disable+0x4c>)
    2514:	4003      	ands	r3, r0
    2516:	804b      	strh	r3, [r1, #2]
    2518:	884b      	ldrh	r3, [r1, #2]
    251a:	480c      	ldr	r0, [pc, #48]	; (254c <system_gclk_chan_disable+0x50>)
    251c:	4003      	ands	r3, r0
    251e:	804b      	strh	r3, [r1, #2]
    2520:	4b08      	ldr	r3, [pc, #32]	; (2544 <system_gclk_chan_disable+0x48>)
    2522:	885b      	ldrh	r3, [r3, #2]
    2524:	045b      	lsls	r3, r3, #17
    2526:	d4fb      	bmi.n	2520 <system_gclk_chan_disable+0x24>
    2528:	4806      	ldr	r0, [pc, #24]	; (2544 <system_gclk_chan_disable+0x48>)
    252a:	8841      	ldrh	r1, [r0, #2]
    252c:	0213      	lsls	r3, r2, #8
    252e:	4a06      	ldr	r2, [pc, #24]	; (2548 <system_gclk_chan_disable+0x4c>)
    2530:	400a      	ands	r2, r1
    2532:	4313      	orrs	r3, r2
    2534:	8043      	strh	r3, [r0, #2]
    2536:	4b06      	ldr	r3, [pc, #24]	; (2550 <system_gclk_chan_disable+0x54>)
    2538:	4798      	blx	r3
    253a:	bd10      	pop	{r4, pc}
    253c:	00002045 	.word	0x00002045
    2540:	40000c02 	.word	0x40000c02
    2544:	40000c00 	.word	0x40000c00
    2548:	fffff0ff 	.word	0xfffff0ff
    254c:	ffffbfff 	.word	0xffffbfff
    2550:	00002085 	.word	0x00002085

00002554 <system_gclk_chan_set_config>:
    2554:	b510      	push	{r4, lr}
    2556:	780c      	ldrb	r4, [r1, #0]
    2558:	0224      	lsls	r4, r4, #8
    255a:	4304      	orrs	r4, r0
    255c:	4b02      	ldr	r3, [pc, #8]	; (2568 <system_gclk_chan_set_config+0x14>)
    255e:	4798      	blx	r3
    2560:	b2a4      	uxth	r4, r4
    2562:	4b02      	ldr	r3, [pc, #8]	; (256c <system_gclk_chan_set_config+0x18>)
    2564:	805c      	strh	r4, [r3, #2]
    2566:	bd10      	pop	{r4, pc}
    2568:	000024fd 	.word	0x000024fd
    256c:	40000c00 	.word	0x40000c00

00002570 <system_gclk_chan_get_hz>:
    2570:	b510      	push	{r4, lr}
    2572:	0004      	movs	r4, r0
    2574:	4b06      	ldr	r3, [pc, #24]	; (2590 <system_gclk_chan_get_hz+0x20>)
    2576:	4798      	blx	r3
    2578:	4b06      	ldr	r3, [pc, #24]	; (2594 <system_gclk_chan_get_hz+0x24>)
    257a:	701c      	strb	r4, [r3, #0]
    257c:	4b06      	ldr	r3, [pc, #24]	; (2598 <system_gclk_chan_get_hz+0x28>)
    257e:	885c      	ldrh	r4, [r3, #2]
    2580:	0524      	lsls	r4, r4, #20
    2582:	0f24      	lsrs	r4, r4, #28
    2584:	4b05      	ldr	r3, [pc, #20]	; (259c <system_gclk_chan_get_hz+0x2c>)
    2586:	4798      	blx	r3
    2588:	0020      	movs	r0, r4
    258a:	4b05      	ldr	r3, [pc, #20]	; (25a0 <system_gclk_chan_get_hz+0x30>)
    258c:	4798      	blx	r3
    258e:	bd10      	pop	{r4, pc}
    2590:	00002045 	.word	0x00002045
    2594:	40000c02 	.word	0x40000c02
    2598:	40000c00 	.word	0x40000c00
    259c:	00002085 	.word	0x00002085
    25a0:	00002421 	.word	0x00002421

000025a4 <_system_pinmux_config>:
    25a4:	b570      	push	{r4, r5, r6, lr}
    25a6:	78d3      	ldrb	r3, [r2, #3]
    25a8:	2b00      	cmp	r3, #0
    25aa:	d120      	bne.n	25ee <_system_pinmux_config+0x4a>
    25ac:	7815      	ldrb	r5, [r2, #0]
    25ae:	2d80      	cmp	r5, #128	; 0x80
    25b0:	d01b      	beq.n	25ea <_system_pinmux_config+0x46>
    25b2:	062d      	lsls	r5, r5, #24
    25b4:	2380      	movs	r3, #128	; 0x80
    25b6:	025b      	lsls	r3, r3, #9
    25b8:	431d      	orrs	r5, r3
    25ba:	7853      	ldrb	r3, [r2, #1]
    25bc:	2b00      	cmp	r3, #0
    25be:	d001      	beq.n	25c4 <_system_pinmux_config+0x20>
    25c0:	2b02      	cmp	r3, #2
    25c2:	d10a      	bne.n	25da <_system_pinmux_config+0x36>
    25c4:	2380      	movs	r3, #128	; 0x80
    25c6:	029b      	lsls	r3, r3, #10
    25c8:	432b      	orrs	r3, r5
    25ca:	7894      	ldrb	r4, [r2, #2]
    25cc:	2c00      	cmp	r4, #0
    25ce:	d002      	beq.n	25d6 <_system_pinmux_config+0x32>
    25d0:	23c0      	movs	r3, #192	; 0xc0
    25d2:	02db      	lsls	r3, r3, #11
    25d4:	432b      	orrs	r3, r5
    25d6:	6041      	str	r1, [r0, #4]
    25d8:	001d      	movs	r5, r3
    25da:	7853      	ldrb	r3, [r2, #1]
    25dc:	3b01      	subs	r3, #1
    25de:	b2db      	uxtb	r3, r3
    25e0:	2b01      	cmp	r3, #1
    25e2:	d806      	bhi.n	25f2 <_system_pinmux_config+0x4e>
    25e4:	4b13      	ldr	r3, [pc, #76]	; (2634 <_system_pinmux_config+0x90>)
    25e6:	401d      	ands	r5, r3
    25e8:	e003      	b.n	25f2 <_system_pinmux_config+0x4e>
    25ea:	2500      	movs	r5, #0
    25ec:	e7e5      	b.n	25ba <_system_pinmux_config+0x16>
    25ee:	6041      	str	r1, [r0, #4]
    25f0:	2500      	movs	r5, #0
    25f2:	040c      	lsls	r4, r1, #16
    25f4:	0c24      	lsrs	r4, r4, #16
    25f6:	0c0b      	lsrs	r3, r1, #16
    25f8:	432c      	orrs	r4, r5
    25fa:	26a0      	movs	r6, #160	; 0xa0
    25fc:	05f6      	lsls	r6, r6, #23
    25fe:	4334      	orrs	r4, r6
    2600:	6284      	str	r4, [r0, #40]	; 0x28
    2602:	432b      	orrs	r3, r5
    2604:	24d0      	movs	r4, #208	; 0xd0
    2606:	0624      	lsls	r4, r4, #24
    2608:	4323      	orrs	r3, r4
    260a:	6283      	str	r3, [r0, #40]	; 0x28
    260c:	78d3      	ldrb	r3, [r2, #3]
    260e:	2b00      	cmp	r3, #0
    2610:	d10a      	bne.n	2628 <_system_pinmux_config+0x84>
    2612:	036b      	lsls	r3, r5, #13
    2614:	d503      	bpl.n	261e <_system_pinmux_config+0x7a>
    2616:	7893      	ldrb	r3, [r2, #2]
    2618:	2b01      	cmp	r3, #1
    261a:	d006      	beq.n	262a <_system_pinmux_config+0x86>
    261c:	6141      	str	r1, [r0, #20]
    261e:	7853      	ldrb	r3, [r2, #1]
    2620:	3b01      	subs	r3, #1
    2622:	b2db      	uxtb	r3, r3
    2624:	2b01      	cmp	r3, #1
    2626:	d902      	bls.n	262e <_system_pinmux_config+0x8a>
    2628:	bd70      	pop	{r4, r5, r6, pc}
    262a:	6181      	str	r1, [r0, #24]
    262c:	e7f7      	b.n	261e <_system_pinmux_config+0x7a>
    262e:	6081      	str	r1, [r0, #8]
    2630:	e7fa      	b.n	2628 <_system_pinmux_config+0x84>
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	fffbffff 	.word	0xfffbffff

00002638 <system_pinmux_pin_set_config>:
    2638:	b510      	push	{r4, lr}
    263a:	000a      	movs	r2, r1
    263c:	09c1      	lsrs	r1, r0, #7
    263e:	0943      	lsrs	r3, r0, #5
    2640:	2900      	cmp	r1, #0
    2642:	d10b      	bne.n	265c <system_pinmux_pin_set_config+0x24>
    2644:	01db      	lsls	r3, r3, #7
    2646:	4906      	ldr	r1, [pc, #24]	; (2660 <system_pinmux_pin_set_config+0x28>)
    2648:	468c      	mov	ip, r1
    264a:	4463      	add	r3, ip
    264c:	241f      	movs	r4, #31
    264e:	4020      	ands	r0, r4
    2650:	2101      	movs	r1, #1
    2652:	4081      	lsls	r1, r0
    2654:	0018      	movs	r0, r3
    2656:	4b03      	ldr	r3, [pc, #12]	; (2664 <system_pinmux_pin_set_config+0x2c>)
    2658:	4798      	blx	r3
    265a:	bd10      	pop	{r4, pc}
    265c:	2300      	movs	r3, #0
    265e:	e7f5      	b.n	264c <system_pinmux_pin_set_config+0x14>
    2660:	41004400 	.word	0x41004400
    2664:	000025a5 	.word	0x000025a5

00002668 <_system_dummy_init>:
    2668:	4770      	bx	lr
	...

0000266c <system_init>:
    266c:	b510      	push	{r4, lr}
    266e:	4b05      	ldr	r3, [pc, #20]	; (2684 <system_init+0x18>)
    2670:	4798      	blx	r3
    2672:	4b05      	ldr	r3, [pc, #20]	; (2688 <system_init+0x1c>)
    2674:	4798      	blx	r3
    2676:	4b05      	ldr	r3, [pc, #20]	; (268c <system_init+0x20>)
    2678:	4798      	blx	r3
    267a:	4b05      	ldr	r3, [pc, #20]	; (2690 <system_init+0x24>)
    267c:	4798      	blx	r3
    267e:	4b05      	ldr	r3, [pc, #20]	; (2694 <system_init+0x28>)
    2680:	4798      	blx	r3
    2682:	bd10      	pop	{r4, pc}
    2684:	00002251 	.word	0x00002251
    2688:	00002041 	.word	0x00002041
    268c:	00002669 	.word	0x00002669
    2690:	00002669 	.word	0x00002669
    2694:	00002669 	.word	0x00002669

00002698 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
 */
void Dummy_Handler(void)
{
<<<<<<< HEAD
     f34:	b5f0      	push	{r4, r5, r6, r7, lr}
     f36:	b087      	sub	sp, #28
     f38:	0007      	movs	r7, r0
     f3a:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f3c:	6806      	ldr	r6, [r0, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f3e:	ab05      	add	r3, sp, #20
     f40:	2280      	movs	r2, #128	; 0x80
     f42:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f44:	2200      	movs	r2, #0
     f46:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f48:	2101      	movs	r1, #1
     f4a:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     f4c:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     f4e:	782b      	ldrb	r3, [r5, #0]
     f50:	2b00      	cmp	r3, #0
     f52:	d101      	bne.n	f58 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f54:	ab05      	add	r3, sp, #20
     f56:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     f58:	6aab      	ldr	r3, [r5, #40]	; 0x28
     f5a:	9301      	str	r3, [sp, #4]
     f5c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     f5e:	9302      	str	r3, [sp, #8]
     f60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     f62:	9303      	str	r3, [sp, #12]
     f64:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     f66:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f68:	2400      	movs	r4, #0
     f6a:	e006      	b.n	f7a <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f6c:	0021      	movs	r1, r4
     f6e:	0030      	movs	r0, r6
     f70:	4b3d      	ldr	r3, [pc, #244]	; (1068 <_spi_set_config+0x134>)
     f72:	4798      	blx	r3
     f74:	e008      	b.n	f88 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     f76:	3401      	adds	r4, #1
     f78:	b2e4      	uxtb	r4, r4
     f7a:	2c03      	cmp	r4, #3
     f7c:	d80d      	bhi.n	f9a <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f7e:	00a3      	lsls	r3, r4, #2
     f80:	aa01      	add	r2, sp, #4
     f82:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     f84:	2800      	cmp	r0, #0
     f86:	d0f1      	beq.n	f6c <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     f88:	1c43      	adds	r3, r0, #1
     f8a:	d0f4      	beq.n	f76 <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f8c:	a905      	add	r1, sp, #20
     f8e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f90:	0c00      	lsrs	r0, r0, #16
     f92:	b2c0      	uxtb	r0, r0
     f94:	4b35      	ldr	r3, [pc, #212]	; (106c <_spi_set_config+0x138>)
     f96:	4798      	blx	r3
     f98:	e7ed      	b.n	f76 <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     f9a:	782b      	ldrb	r3, [r5, #0]
     f9c:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     f9e:	7c2b      	ldrb	r3, [r5, #16]
     fa0:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     fa2:	7cab      	ldrb	r3, [r5, #18]
     fa4:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     fa6:	7d2b      	ldrb	r3, [r5, #20]
     fa8:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     faa:	2200      	movs	r2, #0
     fac:	466b      	mov	r3, sp
     fae:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     fb0:	782b      	ldrb	r3, [r5, #0]
     fb2:	2b01      	cmp	r3, #1
     fb4:	d014      	beq.n	fe0 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     fb6:	782b      	ldrb	r3, [r5, #0]
     fb8:	2b00      	cmp	r3, #0
     fba:	d127      	bne.n	100c <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     fbc:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     fbe:	8baa      	ldrh	r2, [r5, #28]
     fc0:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     fc2:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fc4:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     fc6:	7fef      	ldrb	r7, [r5, #31]
     fc8:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fca:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     fcc:	4320      	orrs	r0, r4
     fce:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     fd0:	2020      	movs	r0, #32
     fd2:	5c28      	ldrb	r0, [r5, r0]
     fd4:	2800      	cmp	r0, #0
     fd6:	d01b      	beq.n	1010 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     fd8:	2140      	movs	r1, #64	; 0x40
     fda:	4311      	orrs	r1, r2
     fdc:	b289      	uxth	r1, r1
     fde:	e017      	b.n	1010 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fe0:	6838      	ldr	r0, [r7, #0]
     fe2:	4b23      	ldr	r3, [pc, #140]	; (1070 <_spi_set_config+0x13c>)
     fe4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fe6:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     fe8:	b2c0      	uxtb	r0, r0
     fea:	4b22      	ldr	r3, [pc, #136]	; (1074 <_spi_set_config+0x140>)
     fec:	4798      	blx	r3
     fee:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     ff0:	466b      	mov	r3, sp
     ff2:	1c9a      	adds	r2, r3, #2
     ff4:	69a8      	ldr	r0, [r5, #24]
     ff6:	4b20      	ldr	r3, [pc, #128]	; (1078 <_spi_set_config+0x144>)
     ff8:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     ffa:	2800      	cmp	r0, #0
     ffc:	d001      	beq.n	1002 <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     ffe:	2017      	movs	r0, #23
    1000:	e030      	b.n	1064 <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
    1002:	466b      	mov	r3, sp
    1004:	3302      	adds	r3, #2
    1006:	781b      	ldrb	r3, [r3, #0]
    1008:	7333      	strb	r3, [r6, #12]
    100a:	e7d4      	b.n	fb6 <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
    100c:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
    100e:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1010:	686a      	ldr	r2, [r5, #4]
    1012:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1014:	68aa      	ldr	r2, [r5, #8]
    1016:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1018:	68ea      	ldr	r2, [r5, #12]
    101a:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    101c:	7c2a      	ldrb	r2, [r5, #16]
    101e:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1020:	7c69      	ldrb	r1, [r5, #17]
    1022:	2900      	cmp	r1, #0
    1024:	d103      	bne.n	102e <_spi_set_config+0xfa>
    1026:	4915      	ldr	r1, [pc, #84]	; (107c <_spi_set_config+0x148>)
    1028:	7889      	ldrb	r1, [r1, #2]
    102a:	0789      	lsls	r1, r1, #30
    102c:	d501      	bpl.n	1032 <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    102e:	2180      	movs	r1, #128	; 0x80
    1030:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    1032:	7ca9      	ldrb	r1, [r5, #18]
    1034:	2900      	cmp	r1, #0
    1036:	d002      	beq.n	103e <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1038:	2180      	movs	r1, #128	; 0x80
    103a:	0289      	lsls	r1, r1, #10
    103c:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    103e:	7ce9      	ldrb	r1, [r5, #19]
    1040:	2900      	cmp	r1, #0
    1042:	d002      	beq.n	104a <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1044:	2180      	movs	r1, #128	; 0x80
    1046:	0089      	lsls	r1, r1, #2
    1048:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    104a:	7d29      	ldrb	r1, [r5, #20]
    104c:	2900      	cmp	r1, #0
    104e:	d002      	beq.n	1056 <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1050:	2180      	movs	r1, #128	; 0x80
    1052:	0189      	lsls	r1, r1, #6
    1054:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1056:	6831      	ldr	r1, [r6, #0]
    1058:	430b      	orrs	r3, r1
    105a:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    105c:	6873      	ldr	r3, [r6, #4]
    105e:	431a      	orrs	r2, r3
    1060:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
    1062:	2000      	movs	r0, #0
}
    1064:	b007      	add	sp, #28
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1068:	00000709 	.word	0x00000709
    106c:	00001ef9 	.word	0x00001ef9
    1070:	00000881 	.word	0x00000881
    1074:	00001e31 	.word	0x00001e31
    1078:	000005f7 	.word	0x000005f7
    107c:	41002000 	.word	0x41002000

00001080 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1080:	b5f0      	push	{r4, r5, r6, r7, lr}
    1082:	b085      	sub	sp, #20
    1084:	0005      	movs	r5, r0
    1086:	000c      	movs	r4, r1
    1088:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    108a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    108c:	680b      	ldr	r3, [r1, #0]
    108e:	079b      	lsls	r3, r3, #30
    1090:	d502      	bpl.n	1098 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1092:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1094:	b005      	add	sp, #20
    1096:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1098:	680b      	ldr	r3, [r1, #0]
    109a:	07db      	lsls	r3, r3, #31
    109c:	d501      	bpl.n	10a2 <spi_init+0x22>
		return STATUS_BUSY;
    109e:	2005      	movs	r0, #5
    10a0:	e7f8      	b.n	1094 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10a2:	0008      	movs	r0, r1
    10a4:	4b28      	ldr	r3, [pc, #160]	; (1148 <spi_init+0xc8>)
    10a6:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10a8:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10aa:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10ac:	2301      	movs	r3, #1
    10ae:	4093      	lsls	r3, r2
    10b0:	4a26      	ldr	r2, [pc, #152]	; (114c <spi_init+0xcc>)
    10b2:	6a11      	ldr	r1, [r2, #32]
    10b4:	430b      	orrs	r3, r1
    10b6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    10b8:	2724      	movs	r7, #36	; 0x24
    10ba:	5df3      	ldrb	r3, [r6, r7]
    10bc:	a903      	add	r1, sp, #12
    10be:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10c0:	b2c3      	uxtb	r3, r0
    10c2:	9301      	str	r3, [sp, #4]
    10c4:	0018      	movs	r0, r3
    10c6:	4b22      	ldr	r3, [pc, #136]	; (1150 <spi_init+0xd0>)
    10c8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10ca:	9801      	ldr	r0, [sp, #4]
    10cc:	4b21      	ldr	r3, [pc, #132]	; (1154 <spi_init+0xd4>)
    10ce:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10d0:	5df0      	ldrb	r0, [r6, r7]
    10d2:	2100      	movs	r1, #0
    10d4:	4b20      	ldr	r3, [pc, #128]	; (1158 <spi_init+0xd8>)
    10d6:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    10d8:	7833      	ldrb	r3, [r6, #0]
    10da:	2b01      	cmp	r3, #1
    10dc:	d008      	beq.n	10f0 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
    10de:	7833      	ldrb	r3, [r6, #0]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d103      	bne.n	10ec <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    10e4:	6823      	ldr	r3, [r4, #0]
    10e6:	2208      	movs	r2, #8
    10e8:	4313      	orrs	r3, r2
    10ea:	6023      	str	r3, [r4, #0]
{
    10ec:	2300      	movs	r3, #0
    10ee:	e00b      	b.n	1108 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    10f0:	6823      	ldr	r3, [r4, #0]
    10f2:	220c      	movs	r2, #12
    10f4:	4313      	orrs	r3, r2
    10f6:	6023      	str	r3, [r4, #0]
    10f8:	e7f1      	b.n	10de <spi_init+0x5e>
		module->callback[i]        = NULL;
    10fa:	1c9a      	adds	r2, r3, #2
    10fc:	0092      	lsls	r2, r2, #2
    10fe:	18aa      	adds	r2, r5, r2
    1100:	2100      	movs	r1, #0
    1102:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1104:	3301      	adds	r3, #1
    1106:	b2db      	uxtb	r3, r3
    1108:	2b06      	cmp	r3, #6
    110a:	d9f6      	bls.n	10fa <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
    110c:	2200      	movs	r2, #0
    110e:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1110:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1112:	2300      	movs	r3, #0
    1114:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1116:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1118:	3236      	adds	r2, #54	; 0x36
    111a:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
    111c:	3201      	adds	r2, #1
    111e:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
    1120:	3201      	adds	r2, #1
    1122:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    1124:	3a35      	subs	r2, #53	; 0x35
    1126:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
    1128:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    112a:	6828      	ldr	r0, [r5, #0]
    112c:	4b06      	ldr	r3, [pc, #24]	; (1148 <spi_init+0xc8>)
    112e:	4798      	blx	r3
    1130:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1132:	490a      	ldr	r1, [pc, #40]	; (115c <spi_init+0xdc>)
    1134:	4b0a      	ldr	r3, [pc, #40]	; (1160 <spi_init+0xe0>)
    1136:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1138:	00a4      	lsls	r4, r4, #2
    113a:	4b0a      	ldr	r3, [pc, #40]	; (1164 <spi_init+0xe4>)
    113c:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
    113e:	0031      	movs	r1, r6
    1140:	0028      	movs	r0, r5
    1142:	4b09      	ldr	r3, [pc, #36]	; (1168 <spi_init+0xe8>)
    1144:	4798      	blx	r3
    1146:	e7a5      	b.n	1094 <spi_init+0x14>
    1148:	00000881 	.word	0x00000881
    114c:	40000400 	.word	0x40000400
    1150:	00001e15 	.word	0x00001e15
    1154:	00001d8d 	.word	0x00001d8d
    1158:	000006bd 	.word	0x000006bd
    115c:	00001671 	.word	0x00001671
    1160:	0000183d 	.word	0x0000183d
    1164:	200000e8 	.word	0x200000e8
    1168:	00000f35 	.word	0x00000f35

0000116c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    116e:	0004      	movs	r4, r0
    1170:	000e      	movs	r6, r1
    1172:	0017      	movs	r7, r2
    1174:	001d      	movs	r5, r3
=======
    2698:	e7fe      	b.n	2698 <Dummy_Handler>
	...

0000269c <Reset_Handler>:
{
    269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    269e:	4a23      	ldr	r2, [pc, #140]	; (272c <Reset_Handler+0x90>)
    26a0:	4b23      	ldr	r3, [pc, #140]	; (2730 <Reset_Handler+0x94>)
    26a2:	429a      	cmp	r2, r3
    26a4:	d009      	beq.n	26ba <Reset_Handler+0x1e>
    26a6:	4b22      	ldr	r3, [pc, #136]	; (2730 <Reset_Handler+0x94>)
    26a8:	4a20      	ldr	r2, [pc, #128]	; (272c <Reset_Handler+0x90>)
    26aa:	e003      	b.n	26b4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    26ac:	6811      	ldr	r1, [r2, #0]
    26ae:	6019      	str	r1, [r3, #0]
    26b0:	3304      	adds	r3, #4
    26b2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    26b4:	491f      	ldr	r1, [pc, #124]	; (2734 <Reset_Handler+0x98>)
    26b6:	428b      	cmp	r3, r1
    26b8:	d3f8      	bcc.n	26ac <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    26ba:	4b1f      	ldr	r3, [pc, #124]	; (2738 <Reset_Handler+0x9c>)
    26bc:	e002      	b.n	26c4 <Reset_Handler+0x28>
                *pDest++ = 0;
    26be:	2200      	movs	r2, #0
    26c0:	601a      	str	r2, [r3, #0]
    26c2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    26c4:	4a1d      	ldr	r2, [pc, #116]	; (273c <Reset_Handler+0xa0>)
    26c6:	4293      	cmp	r3, r2
    26c8:	d3f9      	bcc.n	26be <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    26ca:	4a1d      	ldr	r2, [pc, #116]	; (2740 <Reset_Handler+0xa4>)
    26cc:	21ff      	movs	r1, #255	; 0xff
    26ce:	4b1d      	ldr	r3, [pc, #116]	; (2744 <Reset_Handler+0xa8>)
    26d0:	438b      	bics	r3, r1
    26d2:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    26d4:	39fd      	subs	r1, #253	; 0xfd
    26d6:	2390      	movs	r3, #144	; 0x90
    26d8:	005b      	lsls	r3, r3, #1
    26da:	4a1b      	ldr	r2, [pc, #108]	; (2748 <Reset_Handler+0xac>)
    26dc:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    26de:	4a1b      	ldr	r2, [pc, #108]	; (274c <Reset_Handler+0xb0>)
    26e0:	78d3      	ldrb	r3, [r2, #3]
    26e2:	2503      	movs	r5, #3
    26e4:	43ab      	bics	r3, r5
    26e6:	2402      	movs	r4, #2
    26e8:	4323      	orrs	r3, r4
    26ea:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    26ec:	78d3      	ldrb	r3, [r2, #3]
    26ee:	270c      	movs	r7, #12
    26f0:	43bb      	bics	r3, r7
    26f2:	2608      	movs	r6, #8
    26f4:	4333      	orrs	r3, r6
    26f6:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    26f8:	4b15      	ldr	r3, [pc, #84]	; (2750 <Reset_Handler+0xb4>)
    26fa:	7b98      	ldrb	r0, [r3, #14]
    26fc:	2230      	movs	r2, #48	; 0x30
    26fe:	4390      	bics	r0, r2
    2700:	2220      	movs	r2, #32
    2702:	4310      	orrs	r0, r2
    2704:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2706:	7b99      	ldrb	r1, [r3, #14]
    2708:	43b9      	bics	r1, r7
    270a:	4331      	orrs	r1, r6
    270c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    270e:	7b9a      	ldrb	r2, [r3, #14]
    2710:	43aa      	bics	r2, r5
    2712:	4322      	orrs	r2, r4
    2714:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2716:	4a0f      	ldr	r2, [pc, #60]	; (2754 <Reset_Handler+0xb8>)
    2718:	6851      	ldr	r1, [r2, #4]
    271a:	2380      	movs	r3, #128	; 0x80
    271c:	430b      	orrs	r3, r1
    271e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2720:	4b0d      	ldr	r3, [pc, #52]	; (2758 <Reset_Handler+0xbc>)
    2722:	4798      	blx	r3
        main();
    2724:	4b0d      	ldr	r3, [pc, #52]	; (275c <Reset_Handler+0xc0>)
    2726:	4798      	blx	r3
    2728:	e7fe      	b.n	2728 <Reset_Handler+0x8c>
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	00002ba0 	.word	0x00002ba0
    2730:	20000000 	.word	0x20000000
    2734:	2000000c 	.word	0x2000000c
    2738:	2000000c 	.word	0x2000000c
    273c:	20000100 	.word	0x20000100
    2740:	e000ed00 	.word	0xe000ed00
    2744:	00000000 	.word	0x00000000
    2748:	41007000 	.word	0x41007000
    274c:	41005000 	.word	0x41005000
    2750:	41004800 	.word	0x41004800
    2754:	41004000 	.word	0x41004000
    2758:	00002aa9 	.word	0x00002aa9
    275c:	000028c1 	.word	0x000028c1

00002760 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    2760:	b5f0      	push	{r4, r5, r6, r7, lr}
    2762:	46ce      	mov	lr, r9
    2764:	4647      	mov	r7, r8
    2766:	b580      	push	{r7, lr}
    2768:	b083      	sub	sp, #12
{
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
	/* Sanity check arguments */
	Assert(config);

<<<<<<< HEAD
#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1176:	2338      	movs	r3, #56	; 0x38
    1178:	5cc3      	ldrb	r3, [r0, r3]
    117a:	2b05      	cmp	r3, #5
    117c:	d06d      	beq.n	125a <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    117e:	2a00      	cmp	r2, #0
    1180:	d101      	bne.n	1186 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1182:	2217      	movs	r2, #23
    1184:	e06a      	b.n	125c <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
    1186:	79c3      	ldrb	r3, [r0, #7]
    1188:	2b00      	cmp	r3, #0
    118a:	d101      	bne.n	1190 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
    118c:	221c      	movs	r2, #28
    118e:	e065      	b.n	125c <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1190:	7943      	ldrb	r3, [r0, #5]
    1192:	2b00      	cmp	r3, #0
    1194:	d103      	bne.n	119e <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1196:	6803      	ldr	r3, [r0, #0]
    1198:	7e1b      	ldrb	r3, [r3, #24]
    119a:	079b      	lsls	r3, r3, #30
    119c:	d401      	bmi.n	11a2 <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    119e:	2000      	movs	r0, #0
    11a0:	e037      	b.n	1212 <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
    11a2:	4b2f      	ldr	r3, [pc, #188]	; (1260 <spi_read_buffer_wait+0xf4>)
    11a4:	4798      	blx	r3
    11a6:	e7fa      	b.n	119e <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    11a8:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    11aa:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
    11ac:	07d2      	lsls	r2, r2, #31
    11ae:	d5fb      	bpl.n	11a8 <spi_read_buffer_wait+0x3c>
    11b0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    11b2:	07d2      	lsls	r2, r2, #31
    11b4:	d534      	bpl.n	1220 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    11b6:	05ea      	lsls	r2, r5, #23
    11b8:	0dd2      	lsrs	r2, r2, #23
    11ba:	629a      	str	r2, [r3, #40]	; 0x28
    11bc:	e030      	b.n	1220 <spi_read_buffer_wait+0xb4>
    11be:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11c0:	4a28      	ldr	r2, [pc, #160]	; (1264 <spi_read_buffer_wait+0xf8>)
    11c2:	4293      	cmp	r3, r2
    11c4:	d805      	bhi.n	11d2 <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11c6:	6822      	ldr	r2, [r4, #0]
    11c8:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    11ca:	0752      	lsls	r2, r2, #29
    11cc:	d401      	bmi.n	11d2 <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11ce:	3301      	adds	r3, #1
    11d0:	e7f6      	b.n	11c0 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11d2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    11d4:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    11d6:	0792      	lsls	r2, r2, #30
    11d8:	d404      	bmi.n	11e4 <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11da:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    11dc:	075b      	lsls	r3, r3, #29
    11de:	d422      	bmi.n	1226 <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
    11e0:	2212      	movs	r2, #18
    11e2:	e03b      	b.n	125c <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
    11e4:	0020      	movs	r0, r4
    11e6:	4b1e      	ldr	r3, [pc, #120]	; (1260 <spi_read_buffer_wait+0xf4>)
    11e8:	4798      	blx	r3
				return STATUS_ABORTED;
    11ea:	2204      	movs	r2, #4
    11ec:	e036      	b.n	125c <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    11ee:	2200      	movs	r2, #0
    11f0:	e026      	b.n	1240 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    11f2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    11f4:	05ff      	lsls	r7, r7, #23
    11f6:	0dff      	lsrs	r7, r7, #23
    11f8:	e001      	b.n	11fe <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
    11fa:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
    11fc:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
    11fe:	2a00      	cmp	r2, #0
    1200:	d12c      	bne.n	125c <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
    1202:	1c43      	adds	r3, r0, #1
    1204:	b29b      	uxth	r3, r3
    1206:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1208:	79a2      	ldrb	r2, [r4, #6]
    120a:	2a01      	cmp	r2, #1
    120c:	d01e      	beq.n	124c <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
    120e:	0018      	movs	r0, r3
    1210:	000f      	movs	r7, r1
	while (length--) {
    1212:	1e79      	subs	r1, r7, #1
    1214:	b289      	uxth	r1, r1
    1216:	2f00      	cmp	r7, #0
    1218:	d01d      	beq.n	1256 <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
    121a:	7963      	ldrb	r3, [r4, #5]
    121c:	2b01      	cmp	r3, #1
    121e:	d0c3      	beq.n	11a8 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
    1220:	7963      	ldrb	r3, [r4, #5]
    1222:	2b00      	cmp	r3, #0
    1224:	d0cb      	beq.n	11be <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1226:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1228:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    122a:	0752      	lsls	r2, r2, #29
    122c:	d5fb      	bpl.n	1226 <spi_read_buffer_wait+0xba>
    122e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1230:	0752      	lsls	r2, r2, #29
    1232:	d5e2      	bpl.n	11fa <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1234:	8b5a      	ldrh	r2, [r3, #26]
    1236:	0752      	lsls	r2, r2, #29
    1238:	d5d9      	bpl.n	11ee <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    123a:	2204      	movs	r2, #4
    123c:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    123e:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1240:	79a7      	ldrb	r7, [r4, #6]
    1242:	2f01      	cmp	r7, #1
    1244:	d0d5      	beq.n	11f2 <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1246:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    1248:	b2ff      	uxtb	r7, r7
    124a:	e7d8      	b.n	11fe <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    124c:	3002      	adds	r0, #2
    124e:	0a3f      	lsrs	r7, r7, #8
    1250:	54f7      	strb	r7, [r6, r3]
    1252:	b283      	uxth	r3, r0
    1254:	e7db      	b.n	120e <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
    1256:	2200      	movs	r2, #0
    1258:	e000      	b.n	125c <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
    125a:	2205      	movs	r2, #5
}
    125c:	0010      	movs	r0, r2
    125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1260:	00000f2d 	.word	0x00000f2d
    1264:	00002710 	.word	0x00002710

00001268 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1268:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    126a:	7943      	ldrb	r3, [r0, #5]
    126c:	2b01      	cmp	r3, #1
    126e:	d001      	beq.n	1274 <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
    1270:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1272:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1274:	7a03      	ldrb	r3, [r0, #8]
    1276:	2b00      	cmp	r3, #0
    1278:	d16c      	bne.n	1354 <spi_select_slave+0xec>
		if (select) {
    127a:	2a00      	cmp	r2, #0
    127c:	d058      	beq.n	1330 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
    127e:	784b      	ldrb	r3, [r1, #1]
    1280:	2b00      	cmp	r3, #0
    1282:	d043      	beq.n	130c <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1284:	6803      	ldr	r3, [r0, #0]
    1286:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1288:	07db      	lsls	r3, r3, #31
    128a:	d411      	bmi.n	12b0 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
    128c:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    128e:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1290:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1292:	2900      	cmp	r1, #0
    1294:	d10a      	bne.n	12ac <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
    1296:	01db      	lsls	r3, r3, #7
    1298:	4931      	ldr	r1, [pc, #196]	; (1360 <spi_select_slave+0xf8>)
    129a:	468c      	mov	ip, r1
    129c:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    129e:	211f      	movs	r1, #31
    12a0:	4011      	ands	r1, r2
    12a2:	2201      	movs	r2, #1
    12a4:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    12a6:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    12a8:	2005      	movs	r0, #5
    12aa:	e7e2      	b.n	1272 <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
    12ac:	2300      	movs	r3, #0
    12ae:	e7f6      	b.n	129e <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
    12b0:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    12b2:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    12b4:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    12b6:	2c00      	cmp	r4, #0
    12b8:	d104      	bne.n	12c4 <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
    12ba:	01db      	lsls	r3, r3, #7
    12bc:	4c28      	ldr	r4, [pc, #160]	; (1360 <spi_select_slave+0xf8>)
    12be:	46a4      	mov	ip, r4
    12c0:	4463      	add	r3, ip
    12c2:	e000      	b.n	12c6 <spi_select_slave+0x5e>
		return NULL;
    12c4:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12c6:	241f      	movs	r4, #31
    12c8:	4014      	ands	r4, r2
    12ca:	2201      	movs	r2, #1
    12cc:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    12ce:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
    12d0:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    12d2:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    12d4:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    12d6:	07c9      	lsls	r1, r1, #31
    12d8:	d500      	bpl.n	12dc <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    12da:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    12dc:	79c3      	ldrb	r3, [r0, #7]
    12de:	2b00      	cmp	r3, #0
    12e0:	d13a      	bne.n	1358 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    12e2:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    12e4:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
    12e6:	0752      	lsls	r2, r2, #29
    12e8:	d5fb      	bpl.n	12e2 <spi_select_slave+0x7a>
    12ea:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    12ec:	0752      	lsls	r2, r2, #29
    12ee:	d535      	bpl.n	135c <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    12f0:	8b5a      	ldrh	r2, [r3, #26]
    12f2:	0752      	lsls	r2, r2, #29
    12f4:	d501      	bpl.n	12fa <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    12f6:	2204      	movs	r2, #4
    12f8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12fa:	7982      	ldrb	r2, [r0, #6]
    12fc:	2a01      	cmp	r2, #1
    12fe:	d002      	beq.n	1306 <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
    1302:	2000      	movs	r0, #0
    1304:	e7b5      	b.n	1272 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1308:	2000      	movs	r0, #0
    130a:	e7b2      	b.n	1272 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    130c:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    130e:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1310:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    1312:	2900      	cmp	r1, #0
    1314:	d10a      	bne.n	132c <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
    1316:	01db      	lsls	r3, r3, #7
    1318:	4911      	ldr	r1, [pc, #68]	; (1360 <spi_select_slave+0xf8>)
    131a:	468c      	mov	ip, r1
    131c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    131e:	211f      	movs	r1, #31
    1320:	4011      	ands	r1, r2
    1322:	2201      	movs	r2, #1
    1324:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1326:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1328:	2000      	movs	r0, #0
    132a:	e7a2      	b.n	1272 <spi_select_slave+0xa>
		return NULL;
    132c:	2300      	movs	r3, #0
    132e:	e7f6      	b.n	131e <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
    1330:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1332:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1334:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    1336:	2900      	cmp	r1, #0
    1338:	d10a      	bne.n	1350 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
    133a:	01db      	lsls	r3, r3, #7
    133c:	4908      	ldr	r1, [pc, #32]	; (1360 <spi_select_slave+0xf8>)
    133e:	468c      	mov	ip, r1
    1340:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1342:	211f      	movs	r1, #31
    1344:	4011      	ands	r1, r2
    1346:	2201      	movs	r2, #1
    1348:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    134a:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    134c:	2000      	movs	r0, #0
    134e:	e790      	b.n	1272 <spi_select_slave+0xa>
		return NULL;
    1350:	2300      	movs	r3, #0
    1352:	e7f6      	b.n	1342 <spi_select_slave+0xda>
    1354:	2000      	movs	r0, #0
    1356:	e78c      	b.n	1272 <spi_select_slave+0xa>
    1358:	2000      	movs	r0, #0
    135a:	e78a      	b.n	1272 <spi_select_slave+0xa>
    135c:	2000      	movs	r0, #0
    135e:	e788      	b.n	1272 <spi_select_slave+0xa>
    1360:	41004400 	.word	0x41004400

00001364 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1364:	b5f0      	push	{r4, r5, r6, r7, lr}
    1366:	46de      	mov	lr, fp
    1368:	4657      	mov	r7, sl
    136a:	464e      	mov	r6, r9
    136c:	4645      	mov	r5, r8
    136e:	b5e0      	push	{r5, r6, r7, lr}
    1370:	b085      	sub	sp, #20
    1372:	0004      	movs	r4, r0
    1374:	9100      	str	r1, [sp, #0]
    1376:	9202      	str	r2, [sp, #8]
    1378:	4698      	mov	r8, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    137a:	2338      	movs	r3, #56	; 0x38
    137c:	5cc3      	ldrb	r3, [r0, r3]
    137e:	2b05      	cmp	r3, #5
    1380:	d100      	bne.n	1384 <spi_transceive_buffer_wait+0x20>
    1382:	e11f      	b.n	15c4 <spi_transceive_buffer_wait+0x260>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1384:	4643      	mov	r3, r8
    1386:	2b00      	cmp	r3, #0
    1388:	d101      	bne.n	138e <spi_transceive_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    138a:	2117      	movs	r1, #23
    138c:	e11b      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
	}

	if (!(module->receiver_enabled)) {
    138e:	79c3      	ldrb	r3, [r0, #7]
    1390:	2b00      	cmp	r3, #0
    1392:	d101      	bne.n	1398 <spi_transceive_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    1394:	211c      	movs	r1, #28
    1396:	e116      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1398:	7943      	ldrb	r3, [r0, #5]
    139a:	2b00      	cmp	r3, #0
    139c:	d103      	bne.n	13a6 <spi_transceive_buffer_wait+0x42>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    139e:	6803      	ldr	r3, [r0, #0]
    13a0:	7e1b      	ldrb	r3, [r3, #24]
    13a2:	079b      	lsls	r3, r3, #30
    13a4:	d404      	bmi.n	13b0 <spi_transceive_buffer_wait+0x4c>
		rx_data[rx_pos++] = received_data;
		*rx_data = received_data;
		
		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    13a6:	46c4      	mov	ip, r8
    13a8:	2300      	movs	r3, #0
    13aa:	9303      	str	r3, [sp, #12]
    13ac:	2100      	movs	r1, #0
    13ae:	e07c      	b.n	14aa <spi_transceive_buffer_wait+0x146>
		_spi_clear_tx_complete_flag(module);
    13b0:	4b8a      	ldr	r3, [pc, #552]	; (15dc <spi_transceive_buffer_wait+0x278>)
    13b2:	4798      	blx	r3
    13b4:	e7f7      	b.n	13a6 <spi_transceive_buffer_wait+0x42>
    13b6:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    13b8:	4a89      	ldr	r2, [pc, #548]	; (15e0 <spi_transceive_buffer_wait+0x27c>)
    13ba:	4293      	cmp	r3, r2
    13bc:	d805      	bhi.n	13ca <spi_transceive_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13be:	6822      	ldr	r2, [r4, #0]
    13c0:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    13c2:	07d2      	lsls	r2, r2, #31
    13c4:	d401      	bmi.n	13ca <spi_transceive_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    13c6:	3301      	adds	r3, #1
    13c8:	e7f6      	b.n	13b8 <spi_transceive_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
    13ca:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    13cc:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    13ce:	0792      	lsls	r2, r2, #30
    13d0:	d404      	bmi.n	13dc <spi_transceive_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13d2:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    13d4:	07db      	lsls	r3, r3, #31
    13d6:	d471      	bmi.n	14bc <spi_transceive_buffer_wait+0x158>
				return STATUS_ERR_TIMEOUT;
    13d8:	2112      	movs	r1, #18
    13da:	e0f4      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    13dc:	0020      	movs	r0, r4
    13de:	4b7f      	ldr	r3, [pc, #508]	; (15dc <spi_transceive_buffer_wait+0x278>)
    13e0:	4798      	blx	r3
				return STATUS_ABORTED;
    13e2:	2104      	movs	r1, #4
    13e4:	e0ef      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
			data_to_send |= (tx_data[tx_pos++] << 8);
    13e6:	3102      	adds	r1, #2
    13e8:	9a00      	ldr	r2, [sp, #0]
    13ea:	5d92      	ldrb	r2, [r2, r6]
    13ec:	0212      	lsls	r2, r2, #8
    13ee:	4650      	mov	r0, sl
    13f0:	4302      	orrs	r2, r0
    13f2:	b28e      	uxth	r6, r1
    13f4:	e071      	b.n	14da <spi_transceive_buffer_wait+0x176>
						data_to_send |= (tx_data[tx_pos++] << 8);
    13f6:	3602      	adds	r6, #2
    13f8:	9900      	ldr	r1, [sp, #0]
    13fa:	5c09      	ldrb	r1, [r1, r0]
    13fc:	0209      	lsls	r1, r1, #8
    13fe:	4650      	mov	r0, sl
    1400:	4301      	orrs	r1, r0
    1402:	4688      	mov	r8, r1
    1404:	b2b0      	uxth	r0, r6
    1406:	e01a      	b.n	143e <spi_transceive_buffer_wait+0xda>
					length--;
    1408:	3f01      	subs	r7, #1
    140a:	b2bf      	uxth	r7, r7
    140c:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    140e:	6822      	ldr	r2, [r4, #0]
    1410:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1412:	0752      	lsls	r2, r2, #29
    1414:	d41d      	bmi.n	1452 <spi_transceive_buffer_wait+0xee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1416:	3301      	adds	r3, #1
    1418:	4a71      	ldr	r2, [pc, #452]	; (15e0 <spi_transceive_buffer_wait+0x27c>)
    141a:	4293      	cmp	r3, r2
    141c:	d819      	bhi.n	1452 <spi_transceive_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    141e:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1420:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1422:	07c9      	lsls	r1, r1, #31
    1424:	d5f3      	bpl.n	140e <spi_transceive_buffer_wait+0xaa>
					data_to_send = tx_data[tx_pos++];
    1426:	1c70      	adds	r0, r6, #1
    1428:	b280      	uxth	r0, r0
    142a:	9900      	ldr	r1, [sp, #0]
    142c:	5d89      	ldrb	r1, [r1, r6]
    142e:	468a      	mov	sl, r1
    1430:	466d      	mov	r5, sp
    1432:	80e9      	strh	r1, [r5, #6]
    1434:	88e9      	ldrh	r1, [r5, #6]
    1436:	4688      	mov	r8, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1438:	79a1      	ldrb	r1, [r4, #6]
    143a:	2901      	cmp	r1, #1
    143c:	d0db      	beq.n	13f6 <spi_transceive_buffer_wait+0x92>
    143e:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1440:	07f1      	lsls	r1, r6, #31
    1442:	d5e1      	bpl.n	1408 <spi_transceive_buffer_wait+0xa4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1444:	4641      	mov	r1, r8
    1446:	05c9      	lsls	r1, r1, #23
    1448:	0dc9      	lsrs	r1, r1, #23
    144a:	6291      	str	r1, [r2, #40]	; 0x28
    144c:	e7dc      	b.n	1408 <spi_transceive_buffer_wait+0xa4>
    144e:	2300      	movs	r3, #0
    1450:	e7e2      	b.n	1418 <spi_transceive_buffer_wait+0xb4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1452:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1454:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1456:	0792      	lsls	r2, r2, #30
    1458:	d404      	bmi.n	1464 <spi_transceive_buffer_wait+0x100>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    145a:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    145c:	075b      	lsls	r3, r3, #29
    145e:	d445      	bmi.n	14ec <spi_transceive_buffer_wait+0x188>
				return STATUS_ERR_TIMEOUT;
    1460:	2112      	movs	r1, #18
    1462:	e0b0      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    1464:	0020      	movs	r0, r4
    1466:	4b5d      	ldr	r3, [pc, #372]	; (15dc <spi_transceive_buffer_wait+0x278>)
    1468:	4798      	blx	r3
				return STATUS_ABORTED;
    146a:	2104      	movs	r1, #4
    146c:	e0ab      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
	enum status_code retval = STATUS_OK;
    146e:	2100      	movs	r1, #0
    1470:	e04d      	b.n	150e <spi_transceive_buffer_wait+0x1aa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1474:	05d2      	lsls	r2, r2, #23
    1476:	0dd3      	lsrs	r3, r2, #23
    1478:	4698      	mov	r8, r3
    147a:	e002      	b.n	1482 <spi_transceive_buffer_wait+0x11e>
		uint16_t received_data = 0;
    147c:	2300      	movs	r3, #0
    147e:	4698      	mov	r8, r3
		return STATUS_ERR_IO;
    1480:	2110      	movs	r1, #16
		if (retval != STATUS_OK) {
    1482:	2900      	cmp	r1, #0
    1484:	d000      	beq.n	1488 <spi_transceive_buffer_wait+0x124>
    1486:	e09e      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
		rx_data[rx_pos++] = received_data;
    1488:	9803      	ldr	r0, [sp, #12]
    148a:	0003      	movs	r3, r0
    148c:	3301      	adds	r3, #1
    148e:	b29b      	uxth	r3, r3
    1490:	4642      	mov	r2, r8
    1492:	4669      	mov	r1, sp
    1494:	718a      	strb	r2, [r1, #6]
    1496:	7989      	ldrb	r1, [r1, #6]
    1498:	9a02      	ldr	r2, [sp, #8]
    149a:	5411      	strb	r1, [r2, r0]
		*rx_data = received_data;
    149c:	7011      	strb	r1, [r2, #0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    149e:	79a1      	ldrb	r1, [r4, #6]
    14a0:	2901      	cmp	r1, #1
    14a2:	d03b      	beq.n	151c <spi_transceive_buffer_wait+0x1b8>
			rx_data[rx_pos++] = (received_data >> 8);
    14a4:	9303      	str	r3, [sp, #12]
    14a6:	0031      	movs	r1, r6
    14a8:	46b8      	mov	r8, r7
	while (length--) {
    14aa:	4643      	mov	r3, r8
    14ac:	1e5f      	subs	r7, r3, #1
    14ae:	b2bf      	uxth	r7, r7
    14b0:	2b00      	cmp	r3, #0
    14b2:	d03a      	beq.n	152a <spi_transceive_buffer_wait+0x1c6>
		if (module->mode == SPI_MODE_SLAVE) {
    14b4:	7963      	ldrb	r3, [r4, #5]
    14b6:	2b00      	cmp	r3, #0
    14b8:	d100      	bne.n	14bc <spi_transceive_buffer_wait+0x158>
    14ba:	e77c      	b.n	13b6 <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14bc:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14be:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    14c0:	07d2      	lsls	r2, r2, #31
    14c2:	d5fb      	bpl.n	14bc <spi_transceive_buffer_wait+0x158>
		uint16_t data_to_send = tx_data[tx_pos++];
    14c4:	1c4e      	adds	r6, r1, #1
    14c6:	b2b6      	uxth	r6, r6
    14c8:	9a00      	ldr	r2, [sp, #0]
    14ca:	5c52      	ldrb	r2, [r2, r1]
    14cc:	4692      	mov	sl, r2
    14ce:	4668      	mov	r0, sp
    14d0:	80c2      	strh	r2, [r0, #6]
    14d2:	88c2      	ldrh	r2, [r0, #6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14d4:	79a0      	ldrb	r0, [r4, #6]
    14d6:	2801      	cmp	r0, #1
    14d8:	d085      	beq.n	13e6 <spi_transceive_buffer_wait+0x82>
    14da:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    14dc:	07c9      	lsls	r1, r1, #31
    14de:	d502      	bpl.n	14e6 <spi_transceive_buffer_wait+0x182>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14e0:	05d2      	lsls	r2, r2, #23
    14e2:	0dd2      	lsrs	r2, r2, #23
    14e4:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    14e6:	7963      	ldrb	r3, [r4, #5]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d0b0      	beq.n	144e <spi_transceive_buffer_wait+0xea>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14ec:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14ee:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    14f0:	0752      	lsls	r2, r2, #29
    14f2:	d5fb      	bpl.n	14ec <spi_transceive_buffer_wait+0x188>
		rx_length--;
    14f4:	4662      	mov	r2, ip
    14f6:	3a01      	subs	r2, #1
    14f8:	b292      	uxth	r2, r2
    14fa:	4694      	mov	ip, r2
    14fc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    14fe:	0752      	lsls	r2, r2, #29
    1500:	d5bc      	bpl.n	147c <spi_transceive_buffer_wait+0x118>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1502:	8b5a      	ldrh	r2, [r3, #26]
    1504:	0752      	lsls	r2, r2, #29
    1506:	d5b2      	bpl.n	146e <spi_transceive_buffer_wait+0x10a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1508:	2204      	movs	r2, #4
    150a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    150c:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    150e:	79a2      	ldrb	r2, [r4, #6]
    1510:	2a01      	cmp	r2, #1
    1512:	d0ae      	beq.n	1472 <spi_transceive_buffer_wait+0x10e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1516:	b2d3      	uxtb	r3, r2
    1518:	4698      	mov	r8, r3
    151a:	e7b2      	b.n	1482 <spi_transceive_buffer_wait+0x11e>
			rx_data[rx_pos++] = (received_data >> 8);
    151c:	3002      	adds	r0, #2
    151e:	4642      	mov	r2, r8
    1520:	0a12      	lsrs	r2, r2, #8
    1522:	9902      	ldr	r1, [sp, #8]
    1524:	54ca      	strb	r2, [r1, r3]
    1526:	b283      	uxth	r3, r0
    1528:	e7bc      	b.n	14a4 <spi_transceive_buffer_wait+0x140>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    152a:	7962      	ldrb	r2, [r4, #5]
    152c:	2a01      	cmp	r2, #1
    152e:	d003      	beq.n	1538 <spi_transceive_buffer_wait+0x1d4>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1530:	2a00      	cmp	r2, #0
    1532:	d03b      	beq.n	15ac <spi_transceive_buffer_wait+0x248>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1534:	2100      	movs	r1, #0
    1536:	e046      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1538:	6823      	ldr	r3, [r4, #0]
    153a:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    153c:	079b      	lsls	r3, r3, #30
    153e:	d5fb      	bpl.n	1538 <spi_transceive_buffer_wait+0x1d4>
    1540:	e7f6      	b.n	1530 <spi_transceive_buffer_wait+0x1cc>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1542:	3301      	adds	r3, #1
    1544:	4a26      	ldr	r2, [pc, #152]	; (15e0 <spi_transceive_buffer_wait+0x27c>)
    1546:	4293      	cmp	r3, r2
    1548:	d803      	bhi.n	1552 <spi_transceive_buffer_wait+0x1ee>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    154a:	6822      	ldr	r2, [r4, #0]
    154c:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    154e:	0752      	lsls	r2, r2, #29
    1550:	d5f7      	bpl.n	1542 <spi_transceive_buffer_wait+0x1de>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1552:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1554:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1556:	0752      	lsls	r2, r2, #29
    1558:	d53d      	bpl.n	15d6 <spi_transceive_buffer_wait+0x272>
			rx_length--;
    155a:	4662      	mov	r2, ip
    155c:	3a01      	subs	r2, #1
    155e:	b292      	uxth	r2, r2
    1560:	4694      	mov	ip, r2
    1562:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1564:	0752      	lsls	r2, r2, #29
    1566:	d511      	bpl.n	158c <spi_transceive_buffer_wait+0x228>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1568:	8b5a      	ldrh	r2, [r3, #26]
    156a:	0752      	lsls	r2, r2, #29
    156c:	d508      	bpl.n	1580 <spi_transceive_buffer_wait+0x21c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    156e:	2204      	movs	r2, #4
    1570:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1572:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1574:	79a2      	ldrb	r2, [r4, #6]
    1576:	2a01      	cmp	r2, #1
    1578:	d004      	beq.n	1584 <spi_transceive_buffer_wait+0x220>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    157a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    157c:	b2d2      	uxtb	r2, r2
    157e:	e007      	b.n	1590 <spi_transceive_buffer_wait+0x22c>
	enum status_code retval = STATUS_OK;
    1580:	2100      	movs	r1, #0
    1582:	e7f7      	b.n	1574 <spi_transceive_buffer_wait+0x210>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1586:	05d2      	lsls	r2, r2, #23
    1588:	0dd2      	lsrs	r2, r2, #23
    158a:	e001      	b.n	1590 <spi_transceive_buffer_wait+0x22c>
			uint16_t received_data = 0;
    158c:	4642      	mov	r2, r8
		return STATUS_ERR_IO;
    158e:	2110      	movs	r1, #16
			if (retval != STATUS_OK) {
    1590:	2900      	cmp	r1, #0
    1592:	d118      	bne.n	15c6 <spi_transceive_buffer_wait+0x262>
			rx_data[rx_pos++] = received_data;
    1594:	9803      	ldr	r0, [sp, #12]
    1596:	0003      	movs	r3, r0
    1598:	3301      	adds	r3, #1
    159a:	b29b      	uxth	r3, r3
    159c:	b2d1      	uxtb	r1, r2
    159e:	9d02      	ldr	r5, [sp, #8]
    15a0:	5429      	strb	r1, [r5, r0]
			*rx_data = received_data;
    15a2:	7029      	strb	r1, [r5, #0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15a4:	79a1      	ldrb	r1, [r4, #6]
    15a6:	2901      	cmp	r1, #1
    15a8:	d005      	beq.n	15b6 <spi_transceive_buffer_wait+0x252>
				rx_data[rx_pos++] = (received_data >> 8);
    15aa:	9303      	str	r3, [sp, #12]
		while (rx_length) {
    15ac:	4663      	mov	r3, ip
    15ae:	2b00      	cmp	r3, #0
    15b0:	d006      	beq.n	15c0 <spi_transceive_buffer_wait+0x25c>
    15b2:	2300      	movs	r3, #0
    15b4:	e7c6      	b.n	1544 <spi_transceive_buffer_wait+0x1e0>
				rx_data[rx_pos++] = (received_data >> 8);
    15b6:	3002      	adds	r0, #2
    15b8:	0a12      	lsrs	r2, r2, #8
    15ba:	54ea      	strb	r2, [r5, r3]
    15bc:	b283      	uxth	r3, r0
    15be:	e7f4      	b.n	15aa <spi_transceive_buffer_wait+0x246>
	return STATUS_OK;
    15c0:	2100      	movs	r1, #0
    15c2:	e000      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
		return STATUS_BUSY;
    15c4:	2105      	movs	r1, #5
}
    15c6:	0008      	movs	r0, r1
    15c8:	b005      	add	sp, #20
    15ca:	bc3c      	pop	{r2, r3, r4, r5}
    15cc:	4690      	mov	r8, r2
    15ce:	4699      	mov	r9, r3
    15d0:	46a2      	mov	sl, r4
    15d2:	46ab      	mov	fp, r5
    15d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    15d6:	2112      	movs	r1, #18
    15d8:	e7f5      	b.n	15c6 <spi_transceive_buffer_wait+0x262>
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	00000f2d 	.word	0x00000f2d
    15e0:	00002710 	.word	0x00002710

000015e4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    15e4:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    15e6:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    15e8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    15ea:	780a      	ldrb	r2, [r1, #0]
    15ec:	b2d2      	uxtb	r2, r2
    15ee:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    15f0:	1c4c      	adds	r4, r1, #1
    15f2:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15f4:	7986      	ldrb	r6, [r0, #6]
    15f6:	2e01      	cmp	r6, #1
    15f8:	d007      	beq.n	160a <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    15fa:	05db      	lsls	r3, r3, #23
    15fc:	0ddb      	lsrs	r3, r3, #23
    15fe:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1600:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1602:	3b01      	subs	r3, #1
    1604:	b29b      	uxth	r3, r3
    1606:	8683      	strh	r3, [r0, #52]	; 0x34
}
    1608:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    160a:	784b      	ldrb	r3, [r1, #1]
    160c:	021b      	lsls	r3, r3, #8
    160e:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    1610:	1c8c      	adds	r4, r1, #2
    1612:	62c4      	str	r4, [r0, #44]	; 0x2c
    1614:	e7f1      	b.n	15fa <_spi_write+0x16>
	...

00001618 <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1618:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    161a:	4a04      	ldr	r2, [pc, #16]	; (162c <_spi_write_dummy+0x14>)
    161c:	8812      	ldrh	r2, [r2, #0]
    161e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1620:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1622:	3b01      	subs	r3, #1
    1624:	b29b      	uxth	r3, r3
    1626:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1628:	4770      	bx	lr
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	200000e4 	.word	0x200000e4

00001630 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1630:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    1632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1634:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1636:	3b01      	subs	r3, #1
    1638:	b29b      	uxth	r3, r3
    163a:	8643      	strh	r3, [r0, #50]	; 0x32
}
    163c:	4770      	bx	lr

0000163e <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    163e:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1642:	05db      	lsls	r3, r3, #23
    1644:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1646:	b2da      	uxtb	r2, r3
    1648:	6a81      	ldr	r1, [r0, #40]	; 0x28
    164a:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    164c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    164e:	1c51      	adds	r1, r2, #1
    1650:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1652:	7981      	ldrb	r1, [r0, #6]
    1654:	2901      	cmp	r1, #1
    1656:	d004      	beq.n	1662 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1658:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    165a:	3b01      	subs	r3, #1
    165c:	b29b      	uxth	r3, r3
    165e:	8603      	strh	r3, [r0, #48]	; 0x30
}
    1660:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1662:	0a1b      	lsrs	r3, r3, #8
    1664:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1666:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1668:	3301      	adds	r3, #1
    166a:	6283      	str	r3, [r0, #40]	; 0x28
    166c:	e7f4      	b.n	1658 <_spi_read+0x1a>
	...

00001670 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1672:	0080      	lsls	r0, r0, #2
    1674:	4b6b      	ldr	r3, [pc, #428]	; (1824 <_spi_interrupt_handler+0x1b4>)
    1676:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1678:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    167a:	2337      	movs	r3, #55	; 0x37
    167c:	5ce3      	ldrb	r3, [r4, r3]
    167e:	2236      	movs	r2, #54	; 0x36
    1680:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    1682:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1684:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1686:	7db5      	ldrb	r5, [r6, #22]
    1688:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    168a:	07eb      	lsls	r3, r5, #31
    168c:	d516      	bpl.n	16bc <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    168e:	7963      	ldrb	r3, [r4, #5]
    1690:	2b01      	cmp	r3, #1
    1692:	d04d      	beq.n	1730 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1694:	7963      	ldrb	r3, [r4, #5]
		if (0
    1696:	2b01      	cmp	r3, #1
    1698:	d057      	beq.n	174a <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    169a:	2b00      	cmp	r3, #0
    169c:	d10e      	bne.n	16bc <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    169e:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    16a0:	2b00      	cmp	r3, #0
    16a2:	d00b      	beq.n	16bc <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    16a4:	0020      	movs	r0, r4
    16a6:	4b60      	ldr	r3, [pc, #384]	; (1828 <_spi_interrupt_handler+0x1b8>)
    16a8:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    16aa:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    16ac:	b29b      	uxth	r3, r3
    16ae:	2b00      	cmp	r3, #0
    16b0:	d104      	bne.n	16bc <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    16b2:	3301      	adds	r3, #1
    16b4:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    16b6:	7a63      	ldrb	r3, [r4, #9]
    16b8:	2b01      	cmp	r3, #1
    16ba:	d04a      	beq.n	1752 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    16bc:	076b      	lsls	r3, r5, #29
    16be:	d511      	bpl.n	16e4 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    16c0:	8b73      	ldrh	r3, [r6, #26]
    16c2:	075b      	lsls	r3, r3, #29
    16c4:	d54f      	bpl.n	1766 <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    16c6:	7a63      	ldrb	r3, [r4, #9]
    16c8:	2b01      	cmp	r3, #1
    16ca:	d008      	beq.n	16de <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    16cc:	221e      	movs	r2, #30
    16ce:	2338      	movs	r3, #56	; 0x38
    16d0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    16d2:	3b35      	subs	r3, #53	; 0x35
    16d4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    16d6:	3302      	adds	r3, #2
    16d8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    16da:	073b      	lsls	r3, r7, #28
    16dc:	d43f      	bmi.n	175e <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    16de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    16e0:	2304      	movs	r3, #4
    16e2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    16e4:	07ab      	lsls	r3, r5, #30
    16e6:	d513      	bpl.n	1710 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    16e8:	7963      	ldrb	r3, [r4, #5]
    16ea:	2b00      	cmp	r3, #0
    16ec:	d10d      	bne.n	170a <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    16ee:	3307      	adds	r3, #7
    16f0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    16f2:	3b05      	subs	r3, #5
    16f4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    16f6:	3301      	adds	r3, #1
    16f8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    16fa:	2300      	movs	r3, #0
    16fc:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    16fe:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1700:	3338      	adds	r3, #56	; 0x38
    1702:	2200      	movs	r2, #0
    1704:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1706:	06fb      	lsls	r3, r7, #27
    1708:	d464      	bmi.n	17d4 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    170a:	7963      	ldrb	r3, [r4, #5]
    170c:	2b01      	cmp	r3, #1
    170e:	d065      	beq.n	17dc <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1710:	072b      	lsls	r3, r5, #28
    1712:	d508      	bpl.n	1726 <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    1714:	7963      	ldrb	r3, [r4, #5]
    1716:	2b00      	cmp	r3, #0
    1718:	d105      	bne.n	1726 <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    171a:	3308      	adds	r3, #8
    171c:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    171e:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1720:	06bb      	lsls	r3, r7, #26
    1722:	d500      	bpl.n	1726 <_spi_interrupt_handler+0xb6>
    1724:	e070      	b.n	1808 <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1726:	b26d      	sxtb	r5, r5
    1728:	2d00      	cmp	r5, #0
    172a:	da00      	bge.n	172e <_spi_interrupt_handler+0xbe>
    172c:	e070      	b.n	1810 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    172e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    1730:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1732:	2b00      	cmp	r3, #0
    1734:	d1ae      	bne.n	1694 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    1736:	0020      	movs	r0, r4
    1738:	4b3c      	ldr	r3, [pc, #240]	; (182c <_spi_interrupt_handler+0x1bc>)
    173a:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    173c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    173e:	b29b      	uxth	r3, r3
    1740:	2b00      	cmp	r3, #0
    1742:	d1a7      	bne.n	1694 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1744:	3301      	adds	r3, #1
    1746:	7533      	strb	r3, [r6, #20]
    1748:	e7a4      	b.n	1694 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    174a:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    174c:	2a00      	cmp	r2, #0
    174e:	d1a9      	bne.n	16a4 <_spi_interrupt_handler+0x34>
    1750:	e7a3      	b.n	169a <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    1752:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1754:	2b00      	cmp	r3, #0
    1756:	d1b1      	bne.n	16bc <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1758:	3302      	adds	r3, #2
    175a:	75b3      	strb	r3, [r6, #22]
    175c:	e7ae      	b.n	16bc <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    175e:	0020      	movs	r0, r4
    1760:	69a3      	ldr	r3, [r4, #24]
    1762:	4798      	blx	r3
    1764:	e7bb      	b.n	16de <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1766:	7a63      	ldrb	r3, [r4, #9]
    1768:	2b01      	cmp	r3, #1
    176a:	d017      	beq.n	179c <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    176c:	0020      	movs	r0, r4
    176e:	4b30      	ldr	r3, [pc, #192]	; (1830 <_spi_interrupt_handler+0x1c0>)
    1770:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    1772:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1774:	b29b      	uxth	r3, r3
    1776:	2b00      	cmp	r3, #0
    1778:	d1b4      	bne.n	16e4 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    177a:	2200      	movs	r2, #0
    177c:	3338      	adds	r3, #56	; 0x38
    177e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1780:	3b34      	subs	r3, #52	; 0x34
    1782:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1784:	7a63      	ldrb	r3, [r4, #9]
    1786:	2b02      	cmp	r3, #2
    1788:	d01d      	beq.n	17c6 <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    178a:	7a63      	ldrb	r3, [r4, #9]
    178c:	2b00      	cmp	r3, #0
    178e:	d1a9      	bne.n	16e4 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1790:	07bb      	lsls	r3, r7, #30
    1792:	d5a7      	bpl.n	16e4 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1794:	0020      	movs	r0, r4
    1796:	6923      	ldr	r3, [r4, #16]
    1798:	4798      	blx	r3
    179a:	e7a3      	b.n	16e4 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    179c:	0020      	movs	r0, r4
    179e:	4b25      	ldr	r3, [pc, #148]	; (1834 <_spi_interrupt_handler+0x1c4>)
    17a0:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    17a2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    17a4:	b29b      	uxth	r3, r3
    17a6:	2b00      	cmp	r3, #0
    17a8:	d19c      	bne.n	16e4 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    17aa:	3304      	adds	r3, #4
    17ac:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    17ae:	2200      	movs	r2, #0
    17b0:	3334      	adds	r3, #52	; 0x34
    17b2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    17b4:	3b35      	subs	r3, #53	; 0x35
    17b6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    17b8:	07fb      	lsls	r3, r7, #31
    17ba:	d400      	bmi.n	17be <_spi_interrupt_handler+0x14e>
    17bc:	e792      	b.n	16e4 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    17be:	0020      	movs	r0, r4
    17c0:	68e3      	ldr	r3, [r4, #12]
    17c2:	4798      	blx	r3
    17c4:	e78e      	b.n	16e4 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    17c6:	077b      	lsls	r3, r7, #29
    17c8:	d400      	bmi.n	17cc <_spi_interrupt_handler+0x15c>
    17ca:	e78b      	b.n	16e4 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    17cc:	0020      	movs	r0, r4
    17ce:	6963      	ldr	r3, [r4, #20]
    17d0:	4798      	blx	r3
    17d2:	e787      	b.n	16e4 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    17d4:	0020      	movs	r0, r4
    17d6:	69e3      	ldr	r3, [r4, #28]
    17d8:	4798      	blx	r3
    17da:	e796      	b.n	170a <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    17dc:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    17de:	2b01      	cmp	r3, #1
    17e0:	d000      	beq.n	17e4 <_spi_interrupt_handler+0x174>
    17e2:	e795      	b.n	1710 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    17e4:	79e3      	ldrb	r3, [r4, #7]
    17e6:	2b00      	cmp	r3, #0
    17e8:	d000      	beq.n	17ec <_spi_interrupt_handler+0x17c>
    17ea:	e791      	b.n	1710 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    17ec:	3302      	adds	r3, #2
    17ee:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    17f0:	3301      	adds	r3, #1
    17f2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    17f4:	2200      	movs	r2, #0
    17f6:	3335      	adds	r3, #53	; 0x35
    17f8:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    17fa:	07fb      	lsls	r3, r7, #31
    17fc:	d400      	bmi.n	1800 <_spi_interrupt_handler+0x190>
    17fe:	e787      	b.n	1710 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1800:	0020      	movs	r0, r4
    1802:	68e3      	ldr	r3, [r4, #12]
    1804:	4798      	blx	r3
    1806:	e783      	b.n	1710 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1808:	0020      	movs	r0, r4
    180a:	6a23      	ldr	r3, [r4, #32]
    180c:	4798      	blx	r3
    180e:	e78a      	b.n	1726 <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1810:	2380      	movs	r3, #128	; 0x80
    1812:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1814:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1816:	067b      	lsls	r3, r7, #25
    1818:	d400      	bmi.n	181c <_spi_interrupt_handler+0x1ac>
    181a:	e788      	b.n	172e <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    181c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    181e:	0020      	movs	r0, r4
    1820:	4798      	blx	r3
}
    1822:	e784      	b.n	172e <_spi_interrupt_handler+0xbe>
    1824:	200000e8 	.word	0x200000e8
    1828:	000015e5 	.word	0x000015e5
    182c:	00001619 	.word	0x00001619
    1830:	0000163f 	.word	0x0000163f
    1834:	00001631 	.word	0x00001631

00001838 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1838:	4770      	bx	lr
	...

0000183c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    183c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    183e:	4b0b      	ldr	r3, [pc, #44]	; (186c <_sercom_set_handler+0x30>)
    1840:	781b      	ldrb	r3, [r3, #0]
    1842:	2b00      	cmp	r3, #0
    1844:	d008      	beq.n	1858 <_sercom_set_handler+0x1c>
    1846:	e00c      	b.n	1862 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1848:	009a      	lsls	r2, r3, #2
    184a:	4d09      	ldr	r5, [pc, #36]	; (1870 <_sercom_set_handler+0x34>)
    184c:	4c09      	ldr	r4, [pc, #36]	; (1874 <_sercom_set_handler+0x38>)
    184e:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    1850:	2500      	movs	r5, #0
    1852:	4c09      	ldr	r4, [pc, #36]	; (1878 <_sercom_set_handler+0x3c>)
    1854:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1856:	3301      	adds	r3, #1
    1858:	2b05      	cmp	r3, #5
    185a:	d9f5      	bls.n	1848 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    185c:	2201      	movs	r2, #1
    185e:	4b03      	ldr	r3, [pc, #12]	; (186c <_sercom_set_handler+0x30>)
    1860:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1862:	0080      	lsls	r0, r0, #2
    1864:	4b03      	ldr	r3, [pc, #12]	; (1874 <_sercom_set_handler+0x38>)
    1866:	50c1      	str	r1, [r0, r3]
}
    1868:	bd30      	pop	{r4, r5, pc}
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	2000006a 	.word	0x2000006a
    1870:	00001839 	.word	0x00001839
    1874:	2000006c 	.word	0x2000006c
    1878:	200000e8 	.word	0x200000e8

0000187c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    187c:	b500      	push	{lr}
    187e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1880:	4b05      	ldr	r3, [pc, #20]	; (1898 <_sercom_get_interrupt_vector+0x1c>)
    1882:	681a      	ldr	r2, [r3, #0]
    1884:	9200      	str	r2, [sp, #0]
    1886:	889b      	ldrh	r3, [r3, #4]
    1888:	466a      	mov	r2, sp
    188a:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    188c:	4b03      	ldr	r3, [pc, #12]	; (189c <_sercom_get_interrupt_vector+0x20>)
    188e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1890:	466b      	mov	r3, sp
    1892:	5618      	ldrsb	r0, [r3, r0]
}
    1894:	b003      	add	sp, #12
    1896:	bd00      	pop	{pc}
    1898:	000023e4 	.word	0x000023e4
    189c:	00000881 	.word	0x00000881

000018a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    18a0:	b510      	push	{r4, lr}
    18a2:	4b02      	ldr	r3, [pc, #8]	; (18ac <SERCOM0_Handler+0xc>)
    18a4:	681b      	ldr	r3, [r3, #0]
    18a6:	2000      	movs	r0, #0
    18a8:	4798      	blx	r3
    18aa:	bd10      	pop	{r4, pc}
    18ac:	2000006c 	.word	0x2000006c

000018b0 <SERCOM1_Handler>:
    18b0:	b510      	push	{r4, lr}
    18b2:	4b02      	ldr	r3, [pc, #8]	; (18bc <SERCOM1_Handler+0xc>)
    18b4:	685b      	ldr	r3, [r3, #4]
    18b6:	2001      	movs	r0, #1
    18b8:	4798      	blx	r3
    18ba:	bd10      	pop	{r4, pc}
    18bc:	2000006c 	.word	0x2000006c

000018c0 <SERCOM2_Handler>:
    18c0:	b510      	push	{r4, lr}
    18c2:	4b02      	ldr	r3, [pc, #8]	; (18cc <SERCOM2_Handler+0xc>)
    18c4:	689b      	ldr	r3, [r3, #8]
    18c6:	2002      	movs	r0, #2
    18c8:	4798      	blx	r3
    18ca:	bd10      	pop	{r4, pc}
    18cc:	2000006c 	.word	0x2000006c

000018d0 <SERCOM3_Handler>:
    18d0:	b510      	push	{r4, lr}
    18d2:	4b02      	ldr	r3, [pc, #8]	; (18dc <SERCOM3_Handler+0xc>)
    18d4:	68db      	ldr	r3, [r3, #12]
    18d6:	2003      	movs	r0, #3
    18d8:	4798      	blx	r3
    18da:	bd10      	pop	{r4, pc}
    18dc:	2000006c 	.word	0x2000006c

000018e0 <SERCOM4_Handler>:
    18e0:	b510      	push	{r4, lr}
    18e2:	4b02      	ldr	r3, [pc, #8]	; (18ec <SERCOM4_Handler+0xc>)
    18e4:	691b      	ldr	r3, [r3, #16]
    18e6:	2004      	movs	r0, #4
    18e8:	4798      	blx	r3
    18ea:	bd10      	pop	{r4, pc}
    18ec:	2000006c 	.word	0x2000006c

000018f0 <SERCOM5_Handler>:
    18f0:	b510      	push	{r4, lr}
    18f2:	4b02      	ldr	r3, [pc, #8]	; (18fc <SERCOM5_Handler+0xc>)
    18f4:	695b      	ldr	r3, [r3, #20]
    18f6:	2005      	movs	r0, #5
    18f8:	4798      	blx	r3
    18fa:	bd10      	pop	{r4, pc}
    18fc:	2000006c 	.word	0x2000006c

00001900 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1900:	4770      	bx	lr
	...

00001904 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1904:	4b0c      	ldr	r3, [pc, #48]	; (1938 <cpu_irq_enter_critical+0x34>)
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	2b00      	cmp	r3, #0
    190a:	d106      	bne.n	191a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    190c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1910:	2b00      	cmp	r3, #0
    1912:	d007      	beq.n	1924 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1914:	2200      	movs	r2, #0
    1916:	4b09      	ldr	r3, [pc, #36]	; (193c <cpu_irq_enter_critical+0x38>)
    1918:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    191a:	4a07      	ldr	r2, [pc, #28]	; (1938 <cpu_irq_enter_critical+0x34>)
    191c:	6813      	ldr	r3, [r2, #0]
    191e:	3301      	adds	r3, #1
    1920:	6013      	str	r3, [r2, #0]
}
    1922:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1924:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1926:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    192a:	2200      	movs	r2, #0
    192c:	4b04      	ldr	r3, [pc, #16]	; (1940 <cpu_irq_enter_critical+0x3c>)
    192e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1930:	3201      	adds	r2, #1
    1932:	4b02      	ldr	r3, [pc, #8]	; (193c <cpu_irq_enter_critical+0x38>)
    1934:	701a      	strb	r2, [r3, #0]
    1936:	e7f0      	b.n	191a <cpu_irq_enter_critical+0x16>
    1938:	20000084 	.word	0x20000084
    193c:	20000088 	.word	0x20000088
    1940:	20000008 	.word	0x20000008

00001944 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1944:	4b08      	ldr	r3, [pc, #32]	; (1968 <cpu_irq_leave_critical+0x24>)
    1946:	681a      	ldr	r2, [r3, #0]
    1948:	3a01      	subs	r2, #1
    194a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    194c:	681b      	ldr	r3, [r3, #0]
    194e:	2b00      	cmp	r3, #0
    1950:	d109      	bne.n	1966 <cpu_irq_leave_critical+0x22>
    1952:	4b06      	ldr	r3, [pc, #24]	; (196c <cpu_irq_leave_critical+0x28>)
    1954:	781b      	ldrb	r3, [r3, #0]
    1956:	2b00      	cmp	r3, #0
    1958:	d005      	beq.n	1966 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    195a:	2201      	movs	r2, #1
    195c:	4b04      	ldr	r3, [pc, #16]	; (1970 <cpu_irq_leave_critical+0x2c>)
    195e:	701a      	strb	r2, [r3, #0]
    1960:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1964:	b662      	cpsie	i
	}
}
    1966:	4770      	bx	lr
    1968:	20000084 	.word	0x20000084
    196c:	20000088 	.word	0x20000088
    1970:	20000008 	.word	0x20000008

00001974 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1974:	b510      	push	{r4, lr}
    1976:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1978:	2201      	movs	r2, #1
    197a:	ab01      	add	r3, sp, #4
    197c:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    197e:	2400      	movs	r4, #0
    1980:	e004      	b.n	198c <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1982:	b2e0      	uxtb	r0, r4
    1984:	a901      	add	r1, sp, #4
    1986:	4b03      	ldr	r3, [pc, #12]	; (1994 <_switch_peripheral_gclk+0x20>)
    1988:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    198a:	3401      	adds	r4, #1
    198c:	2c24      	cmp	r4, #36	; 0x24
    198e:	d9f8      	bls.n	1982 <_switch_peripheral_gclk+0xe>
	}
}
    1990:	b002      	add	sp, #8
    1992:	bd10      	pop	{r4, pc}
    1994:	00001e15 	.word	0x00001e15

00001998 <system_clock_source_get_hz>:
{
    1998:	b510      	push	{r4, lr}
	switch (clock_source) {
    199a:	2808      	cmp	r0, #8
    199c:	d832      	bhi.n	1a04 <system_clock_source_get_hz+0x6c>
    199e:	0080      	lsls	r0, r0, #2
    19a0:	4b1b      	ldr	r3, [pc, #108]	; (1a10 <system_clock_source_get_hz+0x78>)
    19a2:	581b      	ldr	r3, [r3, r0]
    19a4:	469f      	mov	pc, r3
		return 32768UL;
    19a6:	2080      	movs	r0, #128	; 0x80
    19a8:	0200      	lsls	r0, r0, #8
}
    19aa:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    19ac:	4b19      	ldr	r3, [pc, #100]	; (1a14 <system_clock_source_get_hz+0x7c>)
    19ae:	6918      	ldr	r0, [r3, #16]
    19b0:	e7fb      	b.n	19aa <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    19b2:	4b19      	ldr	r3, [pc, #100]	; (1a18 <system_clock_source_get_hz+0x80>)
    19b4:	6a1b      	ldr	r3, [r3, #32]
    19b6:	059b      	lsls	r3, r3, #22
    19b8:	0f9b      	lsrs	r3, r3, #30
    19ba:	4818      	ldr	r0, [pc, #96]	; (1a1c <system_clock_source_get_hz+0x84>)
    19bc:	40d8      	lsrs	r0, r3
    19be:	e7f4      	b.n	19aa <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    19c0:	4b14      	ldr	r3, [pc, #80]	; (1a14 <system_clock_source_get_hz+0x7c>)
    19c2:	6958      	ldr	r0, [r3, #20]
    19c4:	e7f1      	b.n	19aa <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    19c6:	4b13      	ldr	r3, [pc, #76]	; (1a14 <system_clock_source_get_hz+0x7c>)
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	079b      	lsls	r3, r3, #30
    19cc:	d51c      	bpl.n	1a08 <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    19ce:	4b12      	ldr	r3, [pc, #72]	; (1a18 <system_clock_source_get_hz+0x80>)
    19d0:	68db      	ldr	r3, [r3, #12]
    19d2:	06db      	lsls	r3, r3, #27
    19d4:	d5fb      	bpl.n	19ce <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    19d6:	4b0f      	ldr	r3, [pc, #60]	; (1a14 <system_clock_source_get_hz+0x7c>)
    19d8:	681b      	ldr	r3, [r3, #0]
    19da:	075b      	lsls	r3, r3, #29
    19dc:	d401      	bmi.n	19e2 <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    19de:	4810      	ldr	r0, [pc, #64]	; (1a20 <system_clock_source_get_hz+0x88>)
    19e0:	e7e3      	b.n	19aa <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19e2:	2000      	movs	r0, #0
    19e4:	4b0f      	ldr	r3, [pc, #60]	; (1a24 <system_clock_source_get_hz+0x8c>)
    19e6:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    19e8:	4b0a      	ldr	r3, [pc, #40]	; (1a14 <system_clock_source_get_hz+0x7c>)
    19ea:	689b      	ldr	r3, [r3, #8]
    19ec:	041b      	lsls	r3, r3, #16
    19ee:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19f0:	4358      	muls	r0, r3
    19f2:	e7da      	b.n	19aa <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19f4:	2350      	movs	r3, #80	; 0x50
    19f6:	4a08      	ldr	r2, [pc, #32]	; (1a18 <system_clock_source_get_hz+0x80>)
    19f8:	5cd3      	ldrb	r3, [r2, r3]
    19fa:	075b      	lsls	r3, r3, #29
    19fc:	d506      	bpl.n	1a0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    19fe:	4b05      	ldr	r3, [pc, #20]	; (1a14 <system_clock_source_get_hz+0x7c>)
    1a00:	68d8      	ldr	r0, [r3, #12]
    1a02:	e7d2      	b.n	19aa <system_clock_source_get_hz+0x12>
		return 0;
    1a04:	2000      	movs	r0, #0
    1a06:	e7d0      	b.n	19aa <system_clock_source_get_hz+0x12>
			return 0;
    1a08:	2000      	movs	r0, #0
    1a0a:	e7ce      	b.n	19aa <system_clock_source_get_hz+0x12>
			return 0;
    1a0c:	2000      	movs	r0, #0
    1a0e:	e7cc      	b.n	19aa <system_clock_source_get_hz+0x12>
    1a10:	000023ec 	.word	0x000023ec
    1a14:	2000008c 	.word	0x2000008c
    1a18:	40000800 	.word	0x40000800
    1a1c:	007a1200 	.word	0x007a1200
    1a20:	02dc6c00 	.word	0x02dc6c00
    1a24:	00001e31 	.word	0x00001e31

00001a28 <system_clock_source_osc8m_set_config>:
{
    1a28:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1a2a:	4d0c      	ldr	r5, [pc, #48]	; (1a5c <system_clock_source_osc8m_set_config+0x34>)
    1a2c:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    1a2e:	7802      	ldrb	r2, [r0, #0]
    1a30:	2103      	movs	r1, #3
    1a32:	400a      	ands	r2, r1
    1a34:	0212      	lsls	r2, r2, #8
    1a36:	490a      	ldr	r1, [pc, #40]	; (1a60 <system_clock_source_osc8m_set_config+0x38>)
    1a38:	4031      	ands	r1, r6
    1a3a:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    1a3c:	7882      	ldrb	r2, [r0, #2]
    1a3e:	2401      	movs	r4, #1
    1a40:	4022      	ands	r2, r4
    1a42:	01d2      	lsls	r2, r2, #7
    1a44:	2380      	movs	r3, #128	; 0x80
    1a46:	4399      	bics	r1, r3
    1a48:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    1a4a:	7843      	ldrb	r3, [r0, #1]
    1a4c:	4023      	ands	r3, r4
    1a4e:	019b      	lsls	r3, r3, #6
    1a50:	2140      	movs	r1, #64	; 0x40
    1a52:	438a      	bics	r2, r1
    1a54:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    1a56:	622b      	str	r3, [r5, #32]
}
    1a58:	bd70      	pop	{r4, r5, r6, pc}
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	40000800 	.word	0x40000800
    1a60:	fffffcff 	.word	0xfffffcff

00001a64 <system_clock_source_enable>:
	switch (clock_source) {
    1a64:	2808      	cmp	r0, #8
    1a66:	d84a      	bhi.n	1afe <system_clock_source_enable+0x9a>
    1a68:	0080      	lsls	r0, r0, #2
    1a6a:	4b26      	ldr	r3, [pc, #152]	; (1b04 <system_clock_source_enable+0xa0>)
    1a6c:	581b      	ldr	r3, [r3, r0]
    1a6e:	469f      	mov	pc, r3
		return STATUS_OK;
    1a70:	2000      	movs	r0, #0
}
    1a72:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a74:	4a24      	ldr	r2, [pc, #144]	; (1b08 <system_clock_source_enable+0xa4>)
    1a76:	6a13      	ldr	r3, [r2, #32]
    1a78:	2102      	movs	r1, #2
    1a7a:	430b      	orrs	r3, r1
    1a7c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1a7e:	2000      	movs	r0, #0
    1a80:	e7f7      	b.n	1a72 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a82:	4a21      	ldr	r2, [pc, #132]	; (1b08 <system_clock_source_enable+0xa4>)
    1a84:	6993      	ldr	r3, [r2, #24]
    1a86:	2102      	movs	r1, #2
    1a88:	430b      	orrs	r3, r1
    1a8a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1a8c:	2000      	movs	r0, #0
		break;
    1a8e:	e7f0      	b.n	1a72 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a90:	4a1d      	ldr	r2, [pc, #116]	; (1b08 <system_clock_source_enable+0xa4>)
    1a92:	8a13      	ldrh	r3, [r2, #16]
    1a94:	2102      	movs	r1, #2
    1a96:	430b      	orrs	r3, r1
    1a98:	b29b      	uxth	r3, r3
    1a9a:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1a9c:	2000      	movs	r0, #0
		break;
    1a9e:	e7e8      	b.n	1a72 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1aa0:	4a19      	ldr	r2, [pc, #100]	; (1b08 <system_clock_source_enable+0xa4>)
    1aa2:	8a93      	ldrh	r3, [r2, #20]
    1aa4:	2102      	movs	r1, #2
    1aa6:	430b      	orrs	r3, r1
    1aa8:	b29b      	uxth	r3, r3
    1aaa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1aac:	2000      	movs	r0, #0
		break;
    1aae:	e7e0      	b.n	1a72 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1ab0:	4916      	ldr	r1, [pc, #88]	; (1b0c <system_clock_source_enable+0xa8>)
    1ab2:	680b      	ldr	r3, [r1, #0]
    1ab4:	2202      	movs	r2, #2
    1ab6:	4313      	orrs	r3, r2
    1ab8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1aba:	4b13      	ldr	r3, [pc, #76]	; (1b08 <system_clock_source_enable+0xa4>)
    1abc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1abe:	4b12      	ldr	r3, [pc, #72]	; (1b08 <system_clock_source_enable+0xa4>)
    1ac0:	68db      	ldr	r3, [r3, #12]
    1ac2:	06db      	lsls	r3, r3, #27
    1ac4:	d5fb      	bpl.n	1abe <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ac6:	4a11      	ldr	r2, [pc, #68]	; (1b0c <system_clock_source_enable+0xa8>)
    1ac8:	6891      	ldr	r1, [r2, #8]
    1aca:	4b0f      	ldr	r3, [pc, #60]	; (1b08 <system_clock_source_enable+0xa4>)
    1acc:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1ace:	6852      	ldr	r2, [r2, #4]
    1ad0:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1ad2:	2200      	movs	r2, #0
    1ad4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ad6:	4b0c      	ldr	r3, [pc, #48]	; (1b08 <system_clock_source_enable+0xa4>)
    1ad8:	68db      	ldr	r3, [r3, #12]
    1ada:	06db      	lsls	r3, r3, #27
    1adc:	d5fb      	bpl.n	1ad6 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ade:	4b0b      	ldr	r3, [pc, #44]	; (1b0c <system_clock_source_enable+0xa8>)
    1ae0:	681b      	ldr	r3, [r3, #0]
    1ae2:	b29b      	uxth	r3, r3
    1ae4:	4a08      	ldr	r2, [pc, #32]	; (1b08 <system_clock_source_enable+0xa4>)
    1ae6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1ae8:	2000      	movs	r0, #0
    1aea:	e7c2      	b.n	1a72 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1aec:	4906      	ldr	r1, [pc, #24]	; (1b08 <system_clock_source_enable+0xa4>)
    1aee:	2244      	movs	r2, #68	; 0x44
    1af0:	5c8b      	ldrb	r3, [r1, r2]
    1af2:	2002      	movs	r0, #2
    1af4:	4303      	orrs	r3, r0
    1af6:	b2db      	uxtb	r3, r3
    1af8:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1afa:	2000      	movs	r0, #0
		break;
    1afc:	e7b9      	b.n	1a72 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    1afe:	2017      	movs	r0, #23
    1b00:	e7b7      	b.n	1a72 <system_clock_source_enable+0xe>
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	00002410 	.word	0x00002410
    1b08:	40000800 	.word	0x40000800
    1b0c:	2000008c 	.word	0x2000008c

00001b10 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1b10:	b530      	push	{r4, r5, lr}
    1b12:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1b14:	22c2      	movs	r2, #194	; 0xc2
    1b16:	00d2      	lsls	r2, r2, #3
    1b18:	4b15      	ldr	r3, [pc, #84]	; (1b70 <system_clock_init+0x60>)
    1b1a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1b1c:	4b15      	ldr	r3, [pc, #84]	; (1b74 <system_clock_init+0x64>)
    1b1e:	6859      	ldr	r1, [r3, #4]
    1b20:	221e      	movs	r2, #30
    1b22:	4391      	bics	r1, r2
    1b24:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1b26:	4b14      	ldr	r3, [pc, #80]	; (1b78 <system_clock_init+0x68>)
    1b28:	4798      	blx	r3
	config->run_in_standby  = false;
    1b2a:	a803      	add	r0, sp, #12
    1b2c:	2400      	movs	r4, #0
    1b2e:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1b30:	2501      	movs	r5, #1
    1b32:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1b34:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1b36:	4b11      	ldr	r3, [pc, #68]	; (1b7c <system_clock_init+0x6c>)
    1b38:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1b3a:	2006      	movs	r0, #6
    1b3c:	4b10      	ldr	r3, [pc, #64]	; (1b80 <system_clock_init+0x70>)
    1b3e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1b40:	4b10      	ldr	r3, [pc, #64]	; (1b84 <system_clock_init+0x74>)
    1b42:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1b44:	4b10      	ldr	r3, [pc, #64]	; (1b88 <system_clock_init+0x78>)
    1b46:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1b48:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1b4a:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1b4c:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1b4e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1b50:	466b      	mov	r3, sp
    1b52:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b54:	2306      	movs	r3, #6
    1b56:	466a      	mov	r2, sp
    1b58:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1b5a:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1b5c:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1b5e:	4669      	mov	r1, sp
    1b60:	2000      	movs	r0, #0
    1b62:	4b0a      	ldr	r3, [pc, #40]	; (1b8c <system_clock_init+0x7c>)
    1b64:	4798      	blx	r3
    1b66:	2000      	movs	r0, #0
    1b68:	4b09      	ldr	r3, [pc, #36]	; (1b90 <system_clock_init+0x80>)
    1b6a:	4798      	blx	r3
#endif
}
    1b6c:	b005      	add	sp, #20
    1b6e:	bd30      	pop	{r4, r5, pc}
    1b70:	40000800 	.word	0x40000800
    1b74:	41004000 	.word	0x41004000
    1b78:	00001975 	.word	0x00001975
    1b7c:	00001a29 	.word	0x00001a29
    1b80:	00001a65 	.word	0x00001a65
    1b84:	00001b95 	.word	0x00001b95
    1b88:	40000400 	.word	0x40000400
    1b8c:	00001bb9 	.word	0x00001bb9
    1b90:	00001c89 	.word	0x00001c89

00001b94 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1b94:	4a06      	ldr	r2, [pc, #24]	; (1bb0 <system_gclk_init+0x1c>)
    1b96:	6993      	ldr	r3, [r2, #24]
    1b98:	2108      	movs	r1, #8
    1b9a:	430b      	orrs	r3, r1
    1b9c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1b9e:	2201      	movs	r2, #1
    1ba0:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <system_gclk_init+0x20>)
    1ba2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1ba4:	4b03      	ldr	r3, [pc, #12]	; (1bb4 <system_gclk_init+0x20>)
    1ba6:	781b      	ldrb	r3, [r3, #0]
    1ba8:	07db      	lsls	r3, r3, #31
    1baa:	d4fb      	bmi.n	1ba4 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1bac:	4770      	bx	lr
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	40000400 	.word	0x40000400
    1bb4:	40000c00 	.word	0x40000c00

00001bb8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bba:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1bbc:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1bbe:	780c      	ldrb	r4, [r1, #0]
    1bc0:	0224      	lsls	r4, r4, #8
    1bc2:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1bc4:	784b      	ldrb	r3, [r1, #1]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d002      	beq.n	1bd0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1bca:	2380      	movs	r3, #128	; 0x80
    1bcc:	02db      	lsls	r3, r3, #11
    1bce:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1bd0:	7a4b      	ldrb	r3, [r1, #9]
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d002      	beq.n	1bdc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1bd6:	2380      	movs	r3, #128	; 0x80
    1bd8:	031b      	lsls	r3, r3, #12
    1bda:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1bdc:	6848      	ldr	r0, [r1, #4]
    1bde:	2801      	cmp	r0, #1
    1be0:	d912      	bls.n	1c08 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1be2:	1e43      	subs	r3, r0, #1
    1be4:	4203      	tst	r3, r0
    1be6:	d03d      	beq.n	1c64 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1be8:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    1bea:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1bec:	2380      	movs	r3, #128	; 0x80
    1bee:	029b      	lsls	r3, r3, #10
    1bf0:	431c      	orrs	r4, r3
    1bf2:	e009      	b.n	1c08 <system_gclk_gen_set_config+0x50>
				div2_count++;
    1bf4:	3201      	adds	r2, #1
						mask <<= 1) {
    1bf6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1bf8:	4283      	cmp	r3, r0
    1bfa:	d3fb      	bcc.n	1bf4 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1bfc:	0212      	lsls	r2, r2, #8
    1bfe:	4332      	orrs	r2, r6
    1c00:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c02:	2380      	movs	r3, #128	; 0x80
    1c04:	035b      	lsls	r3, r3, #13
    1c06:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1c08:	7a0b      	ldrb	r3, [r1, #8]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d002      	beq.n	1c14 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1c0e:	2380      	movs	r3, #128	; 0x80
    1c10:	039b      	lsls	r3, r3, #14
    1c12:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c14:	4b18      	ldr	r3, [pc, #96]	; (1c78 <system_gclk_gen_set_config+0xc0>)
    1c16:	785b      	ldrb	r3, [r3, #1]
    1c18:	b25b      	sxtb	r3, r3
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	db25      	blt.n	1c6a <system_gclk_gen_set_config+0xb2>
	return false;
    1c1e:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    1c20:	2f00      	cmp	r7, #0
    1c22:	d1f7      	bne.n	1c14 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1c24:	4b15      	ldr	r3, [pc, #84]	; (1c7c <system_gclk_gen_set_config+0xc4>)
    1c26:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c28:	4b15      	ldr	r3, [pc, #84]	; (1c80 <system_gclk_gen_set_config+0xc8>)
    1c2a:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c2c:	4b12      	ldr	r3, [pc, #72]	; (1c78 <system_gclk_gen_set_config+0xc0>)
    1c2e:	785b      	ldrb	r3, [r3, #1]
    1c30:	b25b      	sxtb	r3, r3
    1c32:	2b00      	cmp	r3, #0
    1c34:	db1b      	blt.n	1c6e <system_gclk_gen_set_config+0xb6>
	return false;
    1c36:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1c38:	2a00      	cmp	r2, #0
    1c3a:	d1f7      	bne.n	1c2c <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1c3c:	4b0e      	ldr	r3, [pc, #56]	; (1c78 <system_gclk_gen_set_config+0xc0>)
    1c3e:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c40:	4b0d      	ldr	r3, [pc, #52]	; (1c78 <system_gclk_gen_set_config+0xc0>)
    1c42:	785b      	ldrb	r3, [r3, #1]
    1c44:	b25b      	sxtb	r3, r3
    1c46:	2b00      	cmp	r3, #0
    1c48:	db13      	blt.n	1c72 <system_gclk_gen_set_config+0xba>
	return false;
    1c4a:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d1f7      	bne.n	1c40 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1c50:	4a09      	ldr	r2, [pc, #36]	; (1c78 <system_gclk_gen_set_config+0xc0>)
    1c52:	6853      	ldr	r3, [r2, #4]
    1c54:	2180      	movs	r1, #128	; 0x80
    1c56:	0249      	lsls	r1, r1, #9
    1c58:	400b      	ands	r3, r1
    1c5a:	431c      	orrs	r4, r3
    1c5c:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    1c5e:	4b09      	ldr	r3, [pc, #36]	; (1c84 <system_gclk_gen_set_config+0xcc>)
    1c60:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c64:	2302      	movs	r3, #2
    1c66:	2200      	movs	r2, #0
    1c68:	e7c6      	b.n	1bf8 <system_gclk_gen_set_config+0x40>
		return true;
    1c6a:	2701      	movs	r7, #1
    1c6c:	e7d8      	b.n	1c20 <system_gclk_gen_set_config+0x68>
    1c6e:	2201      	movs	r2, #1
    1c70:	e7e2      	b.n	1c38 <system_gclk_gen_set_config+0x80>
    1c72:	2301      	movs	r3, #1
    1c74:	e7ea      	b.n	1c4c <system_gclk_gen_set_config+0x94>
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	40000c00 	.word	0x40000c00
    1c7c:	00001905 	.word	0x00001905
    1c80:	40000c08 	.word	0x40000c08
    1c84:	00001945 	.word	0x00001945

00001c88 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1c88:	b570      	push	{r4, r5, r6, lr}
    1c8a:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c8c:	4b10      	ldr	r3, [pc, #64]	; (1cd0 <system_gclk_gen_enable+0x48>)
    1c8e:	785b      	ldrb	r3, [r3, #1]
    1c90:	b25b      	sxtb	r3, r3
    1c92:	2b00      	cmp	r3, #0
    1c94:	db17      	blt.n	1cc6 <system_gclk_gen_enable+0x3e>
	return false;
    1c96:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    1c98:	2c00      	cmp	r4, #0
    1c9a:	d1f7      	bne.n	1c8c <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1c9c:	4b0d      	ldr	r3, [pc, #52]	; (1cd4 <system_gclk_gen_enable+0x4c>)
    1c9e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ca0:	4b0d      	ldr	r3, [pc, #52]	; (1cd8 <system_gclk_gen_enable+0x50>)
    1ca2:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ca4:	4b0a      	ldr	r3, [pc, #40]	; (1cd0 <system_gclk_gen_enable+0x48>)
    1ca6:	785b      	ldrb	r3, [r3, #1]
    1ca8:	b25b      	sxtb	r3, r3
    1caa:	2b00      	cmp	r3, #0
    1cac:	db0d      	blt.n	1cca <system_gclk_gen_enable+0x42>
	return false;
    1cae:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	d1f7      	bne.n	1ca4 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1cb4:	4a06      	ldr	r2, [pc, #24]	; (1cd0 <system_gclk_gen_enable+0x48>)
    1cb6:	6851      	ldr	r1, [r2, #4]
    1cb8:	2380      	movs	r3, #128	; 0x80
    1cba:	025b      	lsls	r3, r3, #9
    1cbc:	430b      	orrs	r3, r1
    1cbe:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1cc0:	4b06      	ldr	r3, [pc, #24]	; (1cdc <system_gclk_gen_enable+0x54>)
    1cc2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cc4:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    1cc6:	2401      	movs	r4, #1
    1cc8:	e7e6      	b.n	1c98 <system_gclk_gen_enable+0x10>
    1cca:	2301      	movs	r3, #1
    1ccc:	e7f0      	b.n	1cb0 <system_gclk_gen_enable+0x28>
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	40000c00 	.word	0x40000c00
    1cd4:	00001905 	.word	0x00001905
    1cd8:	40000c04 	.word	0x40000c04
    1cdc:	00001945 	.word	0x00001945

00001ce0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ce2:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ce4:	4b22      	ldr	r3, [pc, #136]	; (1d70 <system_gclk_gen_get_hz+0x90>)
    1ce6:	785b      	ldrb	r3, [r3, #1]
    1ce8:	b25b      	sxtb	r3, r3
    1cea:	2b00      	cmp	r3, #0
    1cec:	db34      	blt.n	1d58 <system_gclk_gen_get_hz+0x78>
	return false;
    1cee:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1cf0:	2d00      	cmp	r5, #0
    1cf2:	d1f7      	bne.n	1ce4 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1cf4:	4b1f      	ldr	r3, [pc, #124]	; (1d74 <system_gclk_gen_get_hz+0x94>)
    1cf6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1cf8:	4b1f      	ldr	r3, [pc, #124]	; (1d78 <system_gclk_gen_get_hz+0x98>)
    1cfa:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cfc:	4b1c      	ldr	r3, [pc, #112]	; (1d70 <system_gclk_gen_get_hz+0x90>)
    1cfe:	785b      	ldrb	r3, [r3, #1]
    1d00:	b25b      	sxtb	r3, r3
    1d02:	2b00      	cmp	r3, #0
    1d04:	db2a      	blt.n	1d5c <system_gclk_gen_get_hz+0x7c>
	return false;
    1d06:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1d08:	2c00      	cmp	r4, #0
    1d0a:	d1f7      	bne.n	1cfc <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1d0c:	4e18      	ldr	r6, [pc, #96]	; (1d70 <system_gclk_gen_get_hz+0x90>)
    1d0e:	6870      	ldr	r0, [r6, #4]
    1d10:	04c0      	lsls	r0, r0, #19
    1d12:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d14:	4b19      	ldr	r3, [pc, #100]	; (1d7c <system_gclk_gen_get_hz+0x9c>)
    1d16:	4798      	blx	r3
    1d18:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d1a:	4b17      	ldr	r3, [pc, #92]	; (1d78 <system_gclk_gen_get_hz+0x98>)
    1d1c:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1d1e:	6876      	ldr	r6, [r6, #4]
    1d20:	02f6      	lsls	r6, r6, #11
    1d22:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d24:	4b16      	ldr	r3, [pc, #88]	; (1d80 <system_gclk_gen_get_hz+0xa0>)
    1d26:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d28:	4b11      	ldr	r3, [pc, #68]	; (1d70 <system_gclk_gen_get_hz+0x90>)
    1d2a:	785b      	ldrb	r3, [r3, #1]
    1d2c:	b25b      	sxtb	r3, r3
    1d2e:	2b00      	cmp	r3, #0
    1d30:	db16      	blt.n	1d60 <system_gclk_gen_get_hz+0x80>
	return false;
    1d32:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1d34:	2b00      	cmp	r3, #0
    1d36:	d1f7      	bne.n	1d28 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1d38:	4b0d      	ldr	r3, [pc, #52]	; (1d70 <system_gclk_gen_get_hz+0x90>)
    1d3a:	689c      	ldr	r4, [r3, #8]
    1d3c:	0224      	lsls	r4, r4, #8
    1d3e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1d40:	4b10      	ldr	r3, [pc, #64]	; (1d84 <system_gclk_gen_get_hz+0xa4>)
    1d42:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1d44:	2e00      	cmp	r6, #0
    1d46:	d10d      	bne.n	1d64 <system_gclk_gen_get_hz+0x84>
    1d48:	2c01      	cmp	r4, #1
    1d4a:	d90b      	bls.n	1d64 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    1d4c:	0021      	movs	r1, r4
    1d4e:	0028      	movs	r0, r5
    1d50:	4b0d      	ldr	r3, [pc, #52]	; (1d88 <system_gclk_gen_get_hz+0xa8>)
    1d52:	4798      	blx	r3
    1d54:	0005      	movs	r5, r0
    1d56:	e009      	b.n	1d6c <system_gclk_gen_get_hz+0x8c>
		return true;
    1d58:	2501      	movs	r5, #1
    1d5a:	e7c9      	b.n	1cf0 <system_gclk_gen_get_hz+0x10>
    1d5c:	2401      	movs	r4, #1
    1d5e:	e7d3      	b.n	1d08 <system_gclk_gen_get_hz+0x28>
    1d60:	2301      	movs	r3, #1
    1d62:	e7e7      	b.n	1d34 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    1d64:	2e00      	cmp	r6, #0
    1d66:	d001      	beq.n	1d6c <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    1d68:	3401      	adds	r4, #1
    1d6a:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1d6c:	0028      	movs	r0, r5
    1d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d70:	40000c00 	.word	0x40000c00
    1d74:	00001905 	.word	0x00001905
    1d78:	40000c04 	.word	0x40000c04
    1d7c:	00001999 	.word	0x00001999
    1d80:	40000c08 	.word	0x40000c08
    1d84:	00001945 	.word	0x00001945
    1d88:	000021f5 	.word	0x000021f5

00001d8c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1d8c:	b510      	push	{r4, lr}
    1d8e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d90:	4b06      	ldr	r3, [pc, #24]	; (1dac <system_gclk_chan_enable+0x20>)
    1d92:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d94:	4b06      	ldr	r3, [pc, #24]	; (1db0 <system_gclk_chan_enable+0x24>)
    1d96:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1d98:	4a06      	ldr	r2, [pc, #24]	; (1db4 <system_gclk_chan_enable+0x28>)
    1d9a:	8853      	ldrh	r3, [r2, #2]
    1d9c:	2180      	movs	r1, #128	; 0x80
    1d9e:	01c9      	lsls	r1, r1, #7
    1da0:	430b      	orrs	r3, r1
    1da2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1da4:	4b04      	ldr	r3, [pc, #16]	; (1db8 <system_gclk_chan_enable+0x2c>)
    1da6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1da8:	bd10      	pop	{r4, pc}
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	00001905 	.word	0x00001905
    1db0:	40000c02 	.word	0x40000c02
    1db4:	40000c00 	.word	0x40000c00
    1db8:	00001945 	.word	0x00001945

00001dbc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1dbc:	b510      	push	{r4, lr}
    1dbe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1dc0:	4b0e      	ldr	r3, [pc, #56]	; (1dfc <system_gclk_chan_disable+0x40>)
    1dc2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1dc4:	4b0e      	ldr	r3, [pc, #56]	; (1e00 <system_gclk_chan_disable+0x44>)
    1dc6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1dc8:	490e      	ldr	r1, [pc, #56]	; (1e04 <system_gclk_chan_disable+0x48>)
    1dca:	884b      	ldrh	r3, [r1, #2]
    1dcc:	051b      	lsls	r3, r3, #20
    1dce:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1dd0:	884b      	ldrh	r3, [r1, #2]
    1dd2:	480d      	ldr	r0, [pc, #52]	; (1e08 <system_gclk_chan_disable+0x4c>)
    1dd4:	4003      	ands	r3, r0
    1dd6:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1dd8:	884b      	ldrh	r3, [r1, #2]
    1dda:	480c      	ldr	r0, [pc, #48]	; (1e0c <system_gclk_chan_disable+0x50>)
    1ddc:	4003      	ands	r3, r0
    1dde:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1de0:	4b08      	ldr	r3, [pc, #32]	; (1e04 <system_gclk_chan_disable+0x48>)
    1de2:	885b      	ldrh	r3, [r3, #2]
    1de4:	045b      	lsls	r3, r3, #17
    1de6:	d4fb      	bmi.n	1de0 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1de8:	4806      	ldr	r0, [pc, #24]	; (1e04 <system_gclk_chan_disable+0x48>)
    1dea:	8841      	ldrh	r1, [r0, #2]
    1dec:	0213      	lsls	r3, r2, #8
    1dee:	4a06      	ldr	r2, [pc, #24]	; (1e08 <system_gclk_chan_disable+0x4c>)
    1df0:	400a      	ands	r2, r1
    1df2:	4313      	orrs	r3, r2
    1df4:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    1df6:	4b06      	ldr	r3, [pc, #24]	; (1e10 <system_gclk_chan_disable+0x54>)
    1df8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1dfa:	bd10      	pop	{r4, pc}
    1dfc:	00001905 	.word	0x00001905
    1e00:	40000c02 	.word	0x40000c02
    1e04:	40000c00 	.word	0x40000c00
    1e08:	fffff0ff 	.word	0xfffff0ff
    1e0c:	ffffbfff 	.word	0xffffbfff
    1e10:	00001945 	.word	0x00001945

00001e14 <system_gclk_chan_set_config>:
{
    1e14:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1e16:	780c      	ldrb	r4, [r1, #0]
    1e18:	0224      	lsls	r4, r4, #8
    1e1a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1e1c:	4b02      	ldr	r3, [pc, #8]	; (1e28 <system_gclk_chan_set_config+0x14>)
    1e1e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1e20:	b2a4      	uxth	r4, r4
    1e22:	4b02      	ldr	r3, [pc, #8]	; (1e2c <system_gclk_chan_set_config+0x18>)
    1e24:	805c      	strh	r4, [r3, #2]
}
    1e26:	bd10      	pop	{r4, pc}
    1e28:	00001dbd 	.word	0x00001dbd
    1e2c:	40000c00 	.word	0x40000c00

00001e30 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1e30:	b510      	push	{r4, lr}
    1e32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e34:	4b06      	ldr	r3, [pc, #24]	; (1e50 <system_gclk_chan_get_hz+0x20>)
    1e36:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e38:	4b06      	ldr	r3, [pc, #24]	; (1e54 <system_gclk_chan_get_hz+0x24>)
    1e3a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1e3c:	4b06      	ldr	r3, [pc, #24]	; (1e58 <system_gclk_chan_get_hz+0x28>)
    1e3e:	885c      	ldrh	r4, [r3, #2]
    1e40:	0524      	lsls	r4, r4, #20
    1e42:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1e44:	4b05      	ldr	r3, [pc, #20]	; (1e5c <system_gclk_chan_get_hz+0x2c>)
    1e46:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1e48:	0020      	movs	r0, r4
    1e4a:	4b05      	ldr	r3, [pc, #20]	; (1e60 <system_gclk_chan_get_hz+0x30>)
    1e4c:	4798      	blx	r3
}
    1e4e:	bd10      	pop	{r4, pc}
    1e50:	00001905 	.word	0x00001905
    1e54:	40000c02 	.word	0x40000c02
    1e58:	40000c00 	.word	0x40000c00
    1e5c:	00001945 	.word	0x00001945
    1e60:	00001ce1 	.word	0x00001ce1

00001e64 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1e64:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1e66:	78d3      	ldrb	r3, [r2, #3]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d120      	bne.n	1eae <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1e6c:	7815      	ldrb	r5, [r2, #0]
    1e6e:	2d80      	cmp	r5, #128	; 0x80
    1e70:	d01b      	beq.n	1eaa <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1e72:	062d      	lsls	r5, r5, #24
    1e74:	2380      	movs	r3, #128	; 0x80
    1e76:	025b      	lsls	r3, r3, #9
    1e78:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1e7a:	7853      	ldrb	r3, [r2, #1]
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d001      	beq.n	1e84 <_system_pinmux_config+0x20>
    1e80:	2b02      	cmp	r3, #2
    1e82:	d10a      	bne.n	1e9a <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1e84:	2380      	movs	r3, #128	; 0x80
    1e86:	029b      	lsls	r3, r3, #10
    1e88:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1e8a:	7894      	ldrb	r4, [r2, #2]
    1e8c:	2c00      	cmp	r4, #0
    1e8e:	d002      	beq.n	1e96 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1e90:	23c0      	movs	r3, #192	; 0xc0
    1e92:	02db      	lsls	r3, r3, #11
    1e94:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1e96:	6041      	str	r1, [r0, #4]
    1e98:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e9a:	7853      	ldrb	r3, [r2, #1]
    1e9c:	3b01      	subs	r3, #1
    1e9e:	b2db      	uxtb	r3, r3
    1ea0:	2b01      	cmp	r3, #1
    1ea2:	d806      	bhi.n	1eb2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1ea4:	4b13      	ldr	r3, [pc, #76]	; (1ef4 <_system_pinmux_config+0x90>)
    1ea6:	401d      	ands	r5, r3
    1ea8:	e003      	b.n	1eb2 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    1eaa:	2500      	movs	r5, #0
    1eac:	e7e5      	b.n	1e7a <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1eae:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1eb0:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1eb2:	040c      	lsls	r4, r1, #16
    1eb4:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1eb6:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1eb8:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1eba:	26a0      	movs	r6, #160	; 0xa0
    1ebc:	05f6      	lsls	r6, r6, #23
    1ebe:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ec0:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ec2:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ec4:	24d0      	movs	r4, #208	; 0xd0
    1ec6:	0624      	lsls	r4, r4, #24
    1ec8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1eca:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1ecc:	78d3      	ldrb	r3, [r2, #3]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d10a      	bne.n	1ee8 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ed2:	036b      	lsls	r3, r5, #13
    1ed4:	d503      	bpl.n	1ede <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ed6:	7893      	ldrb	r3, [r2, #2]
    1ed8:	2b01      	cmp	r3, #1
    1eda:	d006      	beq.n	1eea <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1edc:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ede:	7853      	ldrb	r3, [r2, #1]
    1ee0:	3b01      	subs	r3, #1
    1ee2:	b2db      	uxtb	r3, r3
    1ee4:	2b01      	cmp	r3, #1
    1ee6:	d902      	bls.n	1eee <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1ee8:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    1eea:	6181      	str	r1, [r0, #24]
    1eec:	e7f7      	b.n	1ede <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    1eee:	6081      	str	r1, [r0, #8]
}
    1ef0:	e7fa      	b.n	1ee8 <_system_pinmux_config+0x84>
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	fffbffff 	.word	0xfffbffff

00001ef8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    1efc:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    1efe:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    1f00:	2900      	cmp	r1, #0
    1f02:	d10b      	bne.n	1f1c <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    1f04:	01db      	lsls	r3, r3, #7
    1f06:	4906      	ldr	r1, [pc, #24]	; (1f20 <system_pinmux_pin_set_config+0x28>)
    1f08:	468c      	mov	ip, r1
    1f0a:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1f0c:	241f      	movs	r4, #31
    1f0e:	4020      	ands	r0, r4
    1f10:	2101      	movs	r1, #1
    1f12:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1f14:	0018      	movs	r0, r3
    1f16:	4b03      	ldr	r3, [pc, #12]	; (1f24 <system_pinmux_pin_set_config+0x2c>)
    1f18:	4798      	blx	r3
}
    1f1a:	bd10      	pop	{r4, pc}
		return NULL;
    1f1c:	2300      	movs	r3, #0
    1f1e:	e7f5      	b.n	1f0c <system_pinmux_pin_set_config+0x14>
    1f20:	41004400 	.word	0x41004400
    1f24:	00001e65 	.word	0x00001e65

00001f28 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1f28:	4770      	bx	lr
	...

00001f2c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1f2c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1f2e:	4b05      	ldr	r3, [pc, #20]	; (1f44 <system_init+0x18>)
    1f30:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1f32:	4b05      	ldr	r3, [pc, #20]	; (1f48 <system_init+0x1c>)
    1f34:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1f36:	4b05      	ldr	r3, [pc, #20]	; (1f4c <system_init+0x20>)
    1f38:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1f3a:	4b05      	ldr	r3, [pc, #20]	; (1f50 <system_init+0x24>)
    1f3c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1f3e:	4b05      	ldr	r3, [pc, #20]	; (1f54 <system_init+0x28>)
    1f40:	4798      	blx	r3
}
    1f42:	bd10      	pop	{r4, pc}
    1f44:	00001b11 	.word	0x00001b11
    1f48:	00001901 	.word	0x00001901
    1f4c:	00001f29 	.word	0x00001f29
    1f50:	00001f29 	.word	0x00001f29
    1f54:	00001f29 	.word	0x00001f29

00001f58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f58:	e7fe      	b.n	1f58 <Dummy_Handler>
	...

00001f5c <Reset_Handler>:
{
    1f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1f5e:	4a23      	ldr	r2, [pc, #140]	; (1fec <Reset_Handler+0x90>)
    1f60:	4b23      	ldr	r3, [pc, #140]	; (1ff0 <Reset_Handler+0x94>)
    1f62:	429a      	cmp	r2, r3
    1f64:	d009      	beq.n	1f7a <Reset_Handler+0x1e>
    1f66:	4b22      	ldr	r3, [pc, #136]	; (1ff0 <Reset_Handler+0x94>)
    1f68:	4a20      	ldr	r2, [pc, #128]	; (1fec <Reset_Handler+0x90>)
    1f6a:	e003      	b.n	1f74 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    1f6c:	6811      	ldr	r1, [r2, #0]
    1f6e:	6019      	str	r1, [r3, #0]
    1f70:	3304      	adds	r3, #4
    1f72:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1f74:	491f      	ldr	r1, [pc, #124]	; (1ff4 <Reset_Handler+0x98>)
    1f76:	428b      	cmp	r3, r1
    1f78:	d3f8      	bcc.n	1f6c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    1f7a:	4b1f      	ldr	r3, [pc, #124]	; (1ff8 <Reset_Handler+0x9c>)
    1f7c:	e002      	b.n	1f84 <Reset_Handler+0x28>
                *pDest++ = 0;
    1f7e:	2200      	movs	r2, #0
    1f80:	601a      	str	r2, [r3, #0]
    1f82:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1f84:	4a1d      	ldr	r2, [pc, #116]	; (1ffc <Reset_Handler+0xa0>)
    1f86:	4293      	cmp	r3, r2
    1f88:	d3f9      	bcc.n	1f7e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1f8a:	4a1d      	ldr	r2, [pc, #116]	; (2000 <STACK_SIZE>)
    1f8c:	21ff      	movs	r1, #255	; 0xff
    1f8e:	4b1d      	ldr	r3, [pc, #116]	; (2004 <STACK_SIZE+0x4>)
    1f90:	438b      	bics	r3, r1
    1f92:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f94:	39fd      	subs	r1, #253	; 0xfd
    1f96:	2390      	movs	r3, #144	; 0x90
    1f98:	005b      	lsls	r3, r3, #1
    1f9a:	4a1b      	ldr	r2, [pc, #108]	; (2008 <STACK_SIZE+0x8>)
    1f9c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f9e:	4a1b      	ldr	r2, [pc, #108]	; (200c <STACK_SIZE+0xc>)
    1fa0:	78d3      	ldrb	r3, [r2, #3]
    1fa2:	2503      	movs	r5, #3
    1fa4:	43ab      	bics	r3, r5
    1fa6:	2402      	movs	r4, #2
    1fa8:	4323      	orrs	r3, r4
    1faa:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1fac:	78d3      	ldrb	r3, [r2, #3]
    1fae:	270c      	movs	r7, #12
    1fb0:	43bb      	bics	r3, r7
    1fb2:	2608      	movs	r6, #8
    1fb4:	4333      	orrs	r3, r6
    1fb6:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1fb8:	4b15      	ldr	r3, [pc, #84]	; (2010 <STACK_SIZE+0x10>)
    1fba:	7b98      	ldrb	r0, [r3, #14]
    1fbc:	2230      	movs	r2, #48	; 0x30
    1fbe:	4390      	bics	r0, r2
    1fc0:	2220      	movs	r2, #32
    1fc2:	4310      	orrs	r0, r2
    1fc4:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1fc6:	7b99      	ldrb	r1, [r3, #14]
    1fc8:	43b9      	bics	r1, r7
    1fca:	4331      	orrs	r1, r6
    1fcc:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1fce:	7b9a      	ldrb	r2, [r3, #14]
    1fd0:	43aa      	bics	r2, r5
    1fd2:	4322      	orrs	r2, r4
    1fd4:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1fd6:	4a0f      	ldr	r2, [pc, #60]	; (2014 <STACK_SIZE+0x14>)
    1fd8:	6851      	ldr	r1, [r2, #4]
    1fda:	2380      	movs	r3, #128	; 0x80
    1fdc:	430b      	orrs	r3, r1
    1fde:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1fe0:	4b0d      	ldr	r3, [pc, #52]	; (2018 <STACK_SIZE+0x18>)
    1fe2:	4798      	blx	r3
        main();
    1fe4:	4b0d      	ldr	r3, [pc, #52]	; (201c <STACK_SIZE+0x1c>)
    1fe6:	4798      	blx	r3
    1fe8:	e7fe      	b.n	1fe8 <Reset_Handler+0x8c>
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	00002458 	.word	0x00002458
    1ff0:	20000000 	.word	0x20000000
    1ff4:	2000000c 	.word	0x2000000c
    1ff8:	2000000c 	.word	0x2000000c
    1ffc:	20000100 	.word	0x20000100
    2000:	e000ed00 	.word	0xe000ed00
    2004:	00000000 	.word	0x00000000
    2008:	41007000 	.word	0x41007000
    200c:	41005000 	.word	0x41005000
    2010:	41004800 	.word	0x41004800
    2014:	41004000 	.word	0x41004000
    2018:	00002361 	.word	0x00002361
    201c:	00002181 	.word	0x00002181

00002020 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    2020:	b5f0      	push	{r4, r5, r6, r7, lr}
    2022:	46ce      	mov	lr, r9
    2024:	4647      	mov	r7, r8
    2026:	b580      	push	{r7, lr}
    2028:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    202a:	ac01      	add	r4, sp, #4
    202c:	2300      	movs	r3, #0
    202e:	4698      	mov	r8, r3
    2030:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2032:	2601      	movs	r6, #1
    2034:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2036:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    2038:	0021      	movs	r1, r4
    203a:	200b      	movs	r0, #11
    203c:	4d25      	ldr	r5, [pc, #148]	; (20d4 <conf_port_pin+0xb4>)
    203e:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2040:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    2042:	0021      	movs	r1, r4
    2044:	200a      	movs	r0, #10
    2046:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    2048:	4f23      	ldr	r7, [pc, #140]	; (20d8 <conf_port_pin+0xb8>)
    204a:	2380      	movs	r3, #128	; 0x80
    204c:	00db      	lsls	r3, r3, #3
    204e:	61bb      	str	r3, [r7, #24]
=======
	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    276a:	ac01      	add	r4, sp, #4
    276c:	2300      	movs	r3, #0
    276e:	4698      	mov	r8, r3
    2770:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2772:	2601      	movs	r6, #1
    2774:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2776:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    2778:	0021      	movs	r1, r4
    277a:	200b      	movs	r0, #11
    277c:	4d25      	ldr	r5, [pc, #148]	; (2814 <conf_port_pin+0xb4>)
    277e:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2780:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    2782:	0021      	movs	r1, r4
    2784:	200a      	movs	r0, #10
    2786:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2788:	4f23      	ldr	r7, [pc, #140]	; (2818 <conf_port_pin+0xb8>)
    278a:	2380      	movs	r3, #128	; 0x80
    278c:	00db      	lsls	r3, r3, #3
    278e:	61bb      	str	r3, [r7, #24]
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
<<<<<<< HEAD
    2050:	0021      	movs	r1, r4
    2052:	2005      	movs	r0, #5
    2054:	47a8      	blx	r5
    2056:	2320      	movs	r3, #32
    2058:	61bb      	str	r3, [r7, #24]
=======
    2790:	0021      	movs	r1, r4
    2792:	2005      	movs	r0, #5
    2794:	47a8      	blx	r5
    2796:	2320      	movs	r3, #32
    2798:	61bb      	str	r3, [r7, #24]
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
<<<<<<< HEAD
    205a:	0021      	movs	r1, r4
    205c:	2006      	movs	r0, #6
    205e:	47a8      	blx	r5
    2060:	2340      	movs	r3, #64	; 0x40
    2062:	61bb      	str	r3, [r7, #24]
=======
    279a:	0021      	movs	r1, r4
    279c:	2006      	movs	r0, #6
    279e:	47a8      	blx	r5
    27a0:	2340      	movs	r3, #64	; 0x40
    27a2:	61bb      	str	r3, [r7, #24]
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
<<<<<<< HEAD
    2064:	0021      	movs	r1, r4
    2066:	2007      	movs	r0, #7
    2068:	47a8      	blx	r5
    206a:	2380      	movs	r3, #128	; 0x80
    206c:	4699      	mov	r9, r3
    206e:	61bb      	str	r3, [r7, #24]
=======
    27a4:	0021      	movs	r1, r4
    27a6:	2007      	movs	r0, #7
    27a8:	47a8      	blx	r5
    27aa:	2380      	movs	r3, #128	; 0x80
    27ac:	4699      	mov	r9, r3
    27ae:	61bb      	str	r3, [r7, #24]
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
<<<<<<< HEAD
    2070:	4643      	mov	r3, r8
    2072:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2074:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    2076:	0021      	movs	r1, r4
    2078:	200f      	movs	r0, #15
    207a:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    207c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    207e:	0021      	movs	r1, r4
    2080:	200e      	movs	r0, #14
    2082:	47a8      	blx	r5
    2084:	2380      	movs	r3, #128	; 0x80
    2086:	01db      	lsls	r3, r3, #7
    2088:	61bb      	str	r3, [r7, #24]
=======
    27b0:	4643      	mov	r3, r8
    27b2:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    27b4:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    27b6:	0021      	movs	r1, r4
    27b8:	200f      	movs	r0, #15
    27ba:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    27bc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    27be:	0021      	movs	r1, r4
    27c0:	200e      	movs	r0, #14
    27c2:	47a8      	blx	r5
    27c4:	2380      	movs	r3, #128	; 0x80
    27c6:	01db      	lsls	r3, r3, #7
    27c8:	61bb      	str	r3, [r7, #24]
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
<<<<<<< HEAD
    208a:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    208c:	2302      	movs	r3, #2
    208e:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    2090:	0021      	movs	r1, r4
    2092:	202f      	movs	r0, #47	; 0x2f
    2094:	47a8      	blx	r5
    2096:	003b      	movs	r3, r7
    2098:	444b      	add	r3, r9
    209a:	2280      	movs	r2, #128	; 0x80
    209c:	0212      	lsls	r2, r2, #8
    209e:	619a      	str	r2, [r3, #24]
=======
    27ca:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    27cc:	2302      	movs	r3, #2
    27ce:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    27d0:	0021      	movs	r1, r4
    27d2:	202f      	movs	r0, #47	; 0x2f
    27d4:	47a8      	blx	r5
    27d6:	003b      	movs	r3, r7
    27d8:	444b      	add	r3, r9
    27da:	2280      	movs	r2, #128	; 0x80
    27dc:	0212      	lsls	r2, r2, #8
    27de:	619a      	str	r2, [r3, #24]
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
<<<<<<< HEAD
    20a0:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    20a2:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    20a4:	0021      	movs	r1, r4
    20a6:	2011      	movs	r0, #17
    20a8:	47a8      	blx	r5
    20aa:	2380      	movs	r3, #128	; 0x80
    20ac:	029b      	lsls	r3, r3, #10
    20ae:	61bb      	str	r3, [r7, #24]
=======
    27e0:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    27e2:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    27e4:	0021      	movs	r1, r4
    27e6:	2011      	movs	r0, #17
    27e8:	47a8      	blx	r5
    27ea:	2380      	movs	r3, #128	; 0x80
    27ec:	029b      	lsls	r3, r3, #10
    27ee:	61bb      	str	r3, [r7, #24]
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
<<<<<<< HEAD
    20b0:	4643      	mov	r3, r8
    20b2:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    20b4:	0021      	movs	r1, r4
    20b6:	2030      	movs	r0, #48	; 0x30
    20b8:	47a8      	blx	r5
=======
    27f0:	4643      	mov	r3, r8
    27f2:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    27f4:	0021      	movs	r1, r4
    27f6:	2030      	movs	r0, #48	; 0x30
    27f8:	47a8      	blx	r5
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
	
	
	/**************config pin for 27*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
<<<<<<< HEAD
    20ba:	7026      	strb	r6, [r4, #0]
	//config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS27, &config_port_pin);
    20bc:	0021      	movs	r1, r4
    20be:	2017      	movs	r0, #23
    20c0:	47a8      	blx	r5
    20c2:	2380      	movs	r3, #128	; 0x80
    20c4:	041b      	lsls	r3, r3, #16
    20c6:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(SS27, true);	
} // end conf_port_pin(void)
    20c8:	b003      	add	sp, #12
    20ca:	bc0c      	pop	{r2, r3}
    20cc:	4690      	mov	r8, r2
    20ce:	4699      	mov	r9, r3
    20d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	00000525 	.word	0x00000525
    20d8:	41004400 	.word	0x41004400

000020dc <clk_osc8m_init>:
=======
    27fa:	7026      	strb	r6, [r4, #0]
	//config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS27, &config_port_pin);
    27fc:	0021      	movs	r1, r4
    27fe:	2017      	movs	r0, #23
    2800:	47a8      	blx	r5
    2802:	2380      	movs	r3, #128	; 0x80
    2804:	041b      	lsls	r3, r3, #16
    2806:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(SS27, true);	
} // end conf_port_pin(void)
    2808:	b003      	add	sp, #12
    280a:	bc0c      	pop	{r2, r3}
    280c:	4690      	mov	r8, r2
    280e:	4699      	mov	r9, r3
    2810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	00000a79 	.word	0x00000a79
    2818:	41004400 	.word	0x41004400

0000281c <clk_osc8m_init>:
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
<<<<<<< HEAD
    20dc:	b500      	push	{lr}
    20de:	b083      	sub	sp, #12
=======
    281c:	b500      	push	{lr}
    281e:	b083      	sub	sp, #12
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
<<<<<<< HEAD
    20e0:	a801      	add	r0, sp, #4
    20e2:	2300      	movs	r3, #0
    20e4:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    20e6:	2201      	movs	r2, #1
    20e8:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    20ea:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    20ec:	4b01      	ldr	r3, [pc, #4]	; (20f4 <clk_osc8m_init+0x18>)
    20ee:	4798      	blx	r3
}
    20f0:	b003      	add	sp, #12
    20f2:	bd00      	pop	{pc}
    20f4:	00001a29 	.word	0x00001a29

000020f8 <clk_gclk0_init>:
=======
    2820:	a801      	add	r0, sp, #4
    2822:	2300      	movs	r3, #0
    2824:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    2826:	2201      	movs	r2, #1
    2828:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    282a:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    282c:	4b01      	ldr	r3, [pc, #4]	; (2834 <clk_osc8m_init+0x18>)
    282e:	4798      	blx	r3
}
    2830:	b003      	add	sp, #12
    2832:	bd00      	pop	{pc}
    2834:	00002169 	.word	0x00002169

00002838 <clk_gclk0_init>:
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
<<<<<<< HEAD
    20f8:	b500      	push	{lr}
    20fa:	b085      	sub	sp, #20
=======
    2838:	b500      	push	{lr}
    283a:	b085      	sub	sp, #20
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
<<<<<<< HEAD
    20fc:	4b0a      	ldr	r3, [pc, #40]	; (2128 <clk_gclk0_init+0x30>)
    20fe:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2100:	2300      	movs	r3, #0
    2102:	4a0a      	ldr	r2, [pc, #40]	; (212c <clk_gclk0_init+0x34>)
    2104:	7213      	strb	r3, [r2, #8]
=======
    283c:	4b0a      	ldr	r3, [pc, #40]	; (2868 <clk_gclk0_init+0x30>)
    283e:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2840:	2300      	movs	r3, #0
    2842:	4a0a      	ldr	r2, [pc, #40]	; (286c <clk_gclk0_init+0x34>)
    2844:	7213      	strb	r3, [r2, #8]
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
<<<<<<< HEAD
    2106:	a901      	add	r1, sp, #4
    2108:	2206      	movs	r2, #6
    210a:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    210c:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    210e:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    2110:	3a05      	subs	r2, #5
    2112:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    2114:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    2116:	2000      	movs	r0, #0
    2118:	4b05      	ldr	r3, [pc, #20]	; (2130 <clk_gclk0_init+0x38>)
    211a:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    211c:	2000      	movs	r0, #0
    211e:	4b05      	ldr	r3, [pc, #20]	; (2134 <clk_gclk0_init+0x3c>)
    2120:	4798      	blx	r3
    2122:	b005      	add	sp, #20
    2124:	bd00      	pop	{pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	00001b95 	.word	0x00001b95
    212c:	40000400 	.word	0x40000400
    2130:	00001bb9 	.word	0x00001bb9
    2134:	00001c89 	.word	0x00001c89

00002138 <sys_clk_init>:
{
    2138:	b510      	push	{r4, lr}
	clk_osc8m_init();
    213a:	4b03      	ldr	r3, [pc, #12]	; (2148 <sys_clk_init+0x10>)
    213c:	4798      	blx	r3
	clk_gclk0_init();
    213e:	4b03      	ldr	r3, [pc, #12]	; (214c <sys_clk_init+0x14>)
    2140:	4798      	blx	r3
    delay_init();
    2142:	4b03      	ldr	r3, [pc, #12]	; (2150 <sys_clk_init+0x18>)
    2144:	4798      	blx	r3
}
    2146:	bd10      	pop	{r4, pc}
    2148:	000020dd 	.word	0x000020dd
    214c:	000020f9 	.word	0x000020f9
    2150:	000004b9 	.word	0x000004b9

00002154 <simSysInit>:
{
    2154:	b510      	push	{r4, lr}
	system_init();
    2156:	4b05      	ldr	r3, [pc, #20]	; (216c <simSysInit+0x18>)
    2158:	4798      	blx	r3
	sys_clk_init();
    215a:	4b05      	ldr	r3, [pc, #20]	; (2170 <simSysInit+0x1c>)
    215c:	4798      	blx	r3
	conf_port_pin();
    215e:	4b05      	ldr	r3, [pc, #20]	; (2174 <simSysInit+0x20>)
    2160:	4798      	blx	r3
	spi40_init();
    2162:	4b05      	ldr	r3, [pc, #20]	; (2178 <simSysInit+0x24>)
    2164:	4798      	blx	r3
    uartfiber_init();
    2166:	4b05      	ldr	r3, [pc, #20]	; (217c <simSysInit+0x28>)
    2168:	4798      	blx	r3
}
    216a:	bd10      	pop	{r4, pc}
    216c:	00001f2d 	.word	0x00001f2d
    2170:	00002139 	.word	0x00002139
    2174:	00002021 	.word	0x00002021
    2178:	00000115 	.word	0x00000115
    217c:	000003c1 	.word	0x000003c1

00002180 <main>:
{
    2180:	b510      	push	{r4, lr}
    2182:	b086      	sub	sp, #24
    rssi_vals acquired_rssi = {10, 20, 30};
    2184:	ac04      	add	r4, sp, #16
    2186:	2208      	movs	r2, #8
    2188:	2100      	movs	r1, #0
    218a:	0020      	movs	r0, r4
    218c:	4b11      	ldr	r3, [pc, #68]	; (21d4 <main+0x54>)
    218e:	4798      	blx	r3
    2190:	230a      	movs	r3, #10
    2192:	8023      	strh	r3, [r4, #0]
    2194:	330a      	adds	r3, #10
    2196:	8063      	strh	r3, [r4, #2]
    2198:	330a      	adds	r3, #10
    219a:	80a3      	strh	r3, [r4, #4]
    219c:	2208      	movs	r2, #8
    219e:	0021      	movs	r1, r4
    21a0:	a802      	add	r0, sp, #8
    21a2:	4b0d      	ldr	r3, [pc, #52]	; (21d8 <main+0x58>)
    21a4:	4798      	blx	r3
	struct measurement test_data = {40, 10, 30, 40};
    21a6:	4b0d      	ldr	r3, [pc, #52]	; (21dc <main+0x5c>)
    21a8:	681b      	ldr	r3, [r3, #0]
    21aa:	9301      	str	r3, [sp, #4]
    simSysInit();
    21ac:	4b0c      	ldr	r3, [pc, #48]	; (21e0 <main+0x60>)
    21ae:	4798      	blx	r3
    delay_ms(100);
    21b0:	2064      	movs	r0, #100	; 0x64
    21b2:	4b0c      	ldr	r3, [pc, #48]	; (21e4 <main+0x64>)
    21b4:	4798      	blx	r3
		buf = spi40_rd8(AX5043_FIFODATA);
    21b6:	2029      	movs	r0, #41	; 0x29
    21b8:	4b0b      	ldr	r3, [pc, #44]	; (21e8 <main+0x68>)
    21ba:	4798      	blx	r3
		acquired_rssi.rssi169 = spi40_rssi();
    21bc:	4b0b      	ldr	r3, [pc, #44]	; (21ec <main+0x6c>)
    21be:	4798      	blx	r3
    21c0:	b200      	sxth	r0, r0
    21c2:	ab02      	add	r3, sp, #8
    21c4:	8058      	strh	r0, [r3, #2]
		usart_fiber_write(test_data);
    21c6:	9801      	ldr	r0, [sp, #4]
    21c8:	4b09      	ldr	r3, [pc, #36]	; (21f0 <main+0x70>)
    21ca:	4798      	blx	r3
        delay_ms(100);
    21cc:	2064      	movs	r0, #100	; 0x64
    21ce:	4b05      	ldr	r3, [pc, #20]	; (21e4 <main+0x64>)
    21d0:	4798      	blx	r3
    21d2:	e7f0      	b.n	21b6 <main+0x36>
    21d4:	000023bb 	.word	0x000023bb
    21d8:	000023a9 	.word	0x000023a9
    21dc:	00002434 	.word	0x00002434
    21e0:	00002155 	.word	0x00002155
    21e4:	000004f5 	.word	0x000004f5
    21e8:	000002ad 	.word	0x000002ad
    21ec:	000002dd 	.word	0x000002dd
    21f0:	00000481 	.word	0x00000481

000021f4 <__udivsi3>:
    21f4:	2200      	movs	r2, #0
    21f6:	0843      	lsrs	r3, r0, #1
    21f8:	428b      	cmp	r3, r1
    21fa:	d374      	bcc.n	22e6 <__udivsi3+0xf2>
    21fc:	0903      	lsrs	r3, r0, #4
    21fe:	428b      	cmp	r3, r1
    2200:	d35f      	bcc.n	22c2 <__udivsi3+0xce>
    2202:	0a03      	lsrs	r3, r0, #8
    2204:	428b      	cmp	r3, r1
    2206:	d344      	bcc.n	2292 <__udivsi3+0x9e>
    2208:	0b03      	lsrs	r3, r0, #12
    220a:	428b      	cmp	r3, r1
    220c:	d328      	bcc.n	2260 <__udivsi3+0x6c>
    220e:	0c03      	lsrs	r3, r0, #16
    2210:	428b      	cmp	r3, r1
    2212:	d30d      	bcc.n	2230 <__udivsi3+0x3c>
    2214:	22ff      	movs	r2, #255	; 0xff
    2216:	0209      	lsls	r1, r1, #8
    2218:	ba12      	rev	r2, r2
    221a:	0c03      	lsrs	r3, r0, #16
    221c:	428b      	cmp	r3, r1
    221e:	d302      	bcc.n	2226 <__udivsi3+0x32>
    2220:	1212      	asrs	r2, r2, #8
    2222:	0209      	lsls	r1, r1, #8
    2224:	d065      	beq.n	22f2 <__udivsi3+0xfe>
    2226:	0b03      	lsrs	r3, r0, #12
    2228:	428b      	cmp	r3, r1
    222a:	d319      	bcc.n	2260 <__udivsi3+0x6c>
    222c:	e000      	b.n	2230 <__udivsi3+0x3c>
    222e:	0a09      	lsrs	r1, r1, #8
    2230:	0bc3      	lsrs	r3, r0, #15
    2232:	428b      	cmp	r3, r1
    2234:	d301      	bcc.n	223a <__udivsi3+0x46>
    2236:	03cb      	lsls	r3, r1, #15
    2238:	1ac0      	subs	r0, r0, r3
    223a:	4152      	adcs	r2, r2
    223c:	0b83      	lsrs	r3, r0, #14
    223e:	428b      	cmp	r3, r1
    2240:	d301      	bcc.n	2246 <__udivsi3+0x52>
    2242:	038b      	lsls	r3, r1, #14
    2244:	1ac0      	subs	r0, r0, r3
    2246:	4152      	adcs	r2, r2
    2248:	0b43      	lsrs	r3, r0, #13
    224a:	428b      	cmp	r3, r1
    224c:	d301      	bcc.n	2252 <__udivsi3+0x5e>
    224e:	034b      	lsls	r3, r1, #13
    2250:	1ac0      	subs	r0, r0, r3
    2252:	4152      	adcs	r2, r2
    2254:	0b03      	lsrs	r3, r0, #12
    2256:	428b      	cmp	r3, r1
    2258:	d301      	bcc.n	225e <__udivsi3+0x6a>
    225a:	030b      	lsls	r3, r1, #12
    225c:	1ac0      	subs	r0, r0, r3
    225e:	4152      	adcs	r2, r2
    2260:	0ac3      	lsrs	r3, r0, #11
    2262:	428b      	cmp	r3, r1
    2264:	d301      	bcc.n	226a <__udivsi3+0x76>
    2266:	02cb      	lsls	r3, r1, #11
    2268:	1ac0      	subs	r0, r0, r3
    226a:	4152      	adcs	r2, r2
    226c:	0a83      	lsrs	r3, r0, #10
    226e:	428b      	cmp	r3, r1
    2270:	d301      	bcc.n	2276 <__udivsi3+0x82>
    2272:	028b      	lsls	r3, r1, #10
    2274:	1ac0      	subs	r0, r0, r3
    2276:	4152      	adcs	r2, r2
    2278:	0a43      	lsrs	r3, r0, #9
    227a:	428b      	cmp	r3, r1
    227c:	d301      	bcc.n	2282 <__udivsi3+0x8e>
    227e:	024b      	lsls	r3, r1, #9
    2280:	1ac0      	subs	r0, r0, r3
    2282:	4152      	adcs	r2, r2
    2284:	0a03      	lsrs	r3, r0, #8
    2286:	428b      	cmp	r3, r1
    2288:	d301      	bcc.n	228e <__udivsi3+0x9a>
    228a:	020b      	lsls	r3, r1, #8
    228c:	1ac0      	subs	r0, r0, r3
    228e:	4152      	adcs	r2, r2
    2290:	d2cd      	bcs.n	222e <__udivsi3+0x3a>
    2292:	09c3      	lsrs	r3, r0, #7
    2294:	428b      	cmp	r3, r1
    2296:	d301      	bcc.n	229c <__udivsi3+0xa8>
    2298:	01cb      	lsls	r3, r1, #7
    229a:	1ac0      	subs	r0, r0, r3
    229c:	4152      	adcs	r2, r2
    229e:	0983      	lsrs	r3, r0, #6
    22a0:	428b      	cmp	r3, r1
    22a2:	d301      	bcc.n	22a8 <__udivsi3+0xb4>
    22a4:	018b      	lsls	r3, r1, #6
    22a6:	1ac0      	subs	r0, r0, r3
    22a8:	4152      	adcs	r2, r2
    22aa:	0943      	lsrs	r3, r0, #5
    22ac:	428b      	cmp	r3, r1
    22ae:	d301      	bcc.n	22b4 <__udivsi3+0xc0>
    22b0:	014b      	lsls	r3, r1, #5
    22b2:	1ac0      	subs	r0, r0, r3
    22b4:	4152      	adcs	r2, r2
    22b6:	0903      	lsrs	r3, r0, #4
    22b8:	428b      	cmp	r3, r1
    22ba:	d301      	bcc.n	22c0 <__udivsi3+0xcc>
    22bc:	010b      	lsls	r3, r1, #4
    22be:	1ac0      	subs	r0, r0, r3
    22c0:	4152      	adcs	r2, r2
    22c2:	08c3      	lsrs	r3, r0, #3
    22c4:	428b      	cmp	r3, r1
    22c6:	d301      	bcc.n	22cc <__udivsi3+0xd8>
    22c8:	00cb      	lsls	r3, r1, #3
    22ca:	1ac0      	subs	r0, r0, r3
    22cc:	4152      	adcs	r2, r2
    22ce:	0883      	lsrs	r3, r0, #2
    22d0:	428b      	cmp	r3, r1
    22d2:	d301      	bcc.n	22d8 <__udivsi3+0xe4>
    22d4:	008b      	lsls	r3, r1, #2
    22d6:	1ac0      	subs	r0, r0, r3
    22d8:	4152      	adcs	r2, r2
    22da:	0843      	lsrs	r3, r0, #1
    22dc:	428b      	cmp	r3, r1
    22de:	d301      	bcc.n	22e4 <__udivsi3+0xf0>
    22e0:	004b      	lsls	r3, r1, #1
    22e2:	1ac0      	subs	r0, r0, r3
    22e4:	4152      	adcs	r2, r2
    22e6:	1a41      	subs	r1, r0, r1
    22e8:	d200      	bcs.n	22ec <__udivsi3+0xf8>
    22ea:	4601      	mov	r1, r0
    22ec:	4152      	adcs	r2, r2
    22ee:	4610      	mov	r0, r2
    22f0:	4770      	bx	lr
    22f2:	e7ff      	b.n	22f4 <__udivsi3+0x100>
    22f4:	b501      	push	{r0, lr}
    22f6:	2000      	movs	r0, #0
    22f8:	f000 f806 	bl	2308 <__aeabi_idiv0>
    22fc:	bd02      	pop	{r1, pc}
    22fe:	46c0      	nop			; (mov r8, r8)

00002300 <__aeabi_uidivmod>:
    2300:	2900      	cmp	r1, #0
    2302:	d0f7      	beq.n	22f4 <__udivsi3+0x100>
    2304:	e776      	b.n	21f4 <__udivsi3>
    2306:	4770      	bx	lr

00002308 <__aeabi_idiv0>:
    2308:	4770      	bx	lr
    230a:	46c0      	nop			; (mov r8, r8)

0000230c <__aeabi_lmul>:
    230c:	b5f0      	push	{r4, r5, r6, r7, lr}
    230e:	46ce      	mov	lr, r9
    2310:	4647      	mov	r7, r8
    2312:	0415      	lsls	r5, r2, #16
    2314:	0c2d      	lsrs	r5, r5, #16
    2316:	002e      	movs	r6, r5
    2318:	b580      	push	{r7, lr}
    231a:	0407      	lsls	r7, r0, #16
    231c:	0c14      	lsrs	r4, r2, #16
    231e:	0c3f      	lsrs	r7, r7, #16
    2320:	4699      	mov	r9, r3
    2322:	0c03      	lsrs	r3, r0, #16
    2324:	437e      	muls	r6, r7
    2326:	435d      	muls	r5, r3
    2328:	4367      	muls	r7, r4
    232a:	4363      	muls	r3, r4
    232c:	197f      	adds	r7, r7, r5
    232e:	0c34      	lsrs	r4, r6, #16
    2330:	19e4      	adds	r4, r4, r7
    2332:	469c      	mov	ip, r3
    2334:	42a5      	cmp	r5, r4
    2336:	d903      	bls.n	2340 <__aeabi_lmul+0x34>
    2338:	2380      	movs	r3, #128	; 0x80
    233a:	025b      	lsls	r3, r3, #9
    233c:	4698      	mov	r8, r3
    233e:	44c4      	add	ip, r8
    2340:	464b      	mov	r3, r9
    2342:	4351      	muls	r1, r2
    2344:	4343      	muls	r3, r0
    2346:	0436      	lsls	r6, r6, #16
    2348:	0c36      	lsrs	r6, r6, #16
    234a:	0c25      	lsrs	r5, r4, #16
    234c:	0424      	lsls	r4, r4, #16
    234e:	4465      	add	r5, ip
    2350:	19a4      	adds	r4, r4, r6
    2352:	1859      	adds	r1, r3, r1
    2354:	1949      	adds	r1, r1, r5
    2356:	0020      	movs	r0, r4
    2358:	bc0c      	pop	{r2, r3}
    235a:	4690      	mov	r8, r2
    235c:	4699      	mov	r9, r3
    235e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002360 <__libc_init_array>:
    2360:	b570      	push	{r4, r5, r6, lr}
    2362:	2600      	movs	r6, #0
    2364:	4d0c      	ldr	r5, [pc, #48]	; (2398 <__libc_init_array+0x38>)
    2366:	4c0d      	ldr	r4, [pc, #52]	; (239c <__libc_init_array+0x3c>)
    2368:	1b64      	subs	r4, r4, r5
    236a:	10a4      	asrs	r4, r4, #2
    236c:	42a6      	cmp	r6, r4
    236e:	d109      	bne.n	2384 <__libc_init_array+0x24>
    2370:	2600      	movs	r6, #0
    2372:	f000 f861 	bl	2438 <_init>
    2376:	4d0a      	ldr	r5, [pc, #40]	; (23a0 <__libc_init_array+0x40>)
    2378:	4c0a      	ldr	r4, [pc, #40]	; (23a4 <__libc_init_array+0x44>)
    237a:	1b64      	subs	r4, r4, r5
    237c:	10a4      	asrs	r4, r4, #2
    237e:	42a6      	cmp	r6, r4
    2380:	d105      	bne.n	238e <__libc_init_array+0x2e>
    2382:	bd70      	pop	{r4, r5, r6, pc}
    2384:	00b3      	lsls	r3, r6, #2
    2386:	58eb      	ldr	r3, [r5, r3]
    2388:	4798      	blx	r3
    238a:	3601      	adds	r6, #1
    238c:	e7ee      	b.n	236c <__libc_init_array+0xc>
    238e:	00b3      	lsls	r3, r6, #2
    2390:	58eb      	ldr	r3, [r5, r3]
    2392:	4798      	blx	r3
    2394:	3601      	adds	r6, #1
    2396:	e7f2      	b.n	237e <__libc_init_array+0x1e>
    2398:	00002444 	.word	0x00002444
    239c:	00002444 	.word	0x00002444
    23a0:	00002444 	.word	0x00002444
    23a4:	00002448 	.word	0x00002448

000023a8 <memcpy>:
    23a8:	2300      	movs	r3, #0
    23aa:	b510      	push	{r4, lr}
    23ac:	429a      	cmp	r2, r3
    23ae:	d100      	bne.n	23b2 <memcpy+0xa>
    23b0:	bd10      	pop	{r4, pc}
    23b2:	5ccc      	ldrb	r4, [r1, r3]
    23b4:	54c4      	strb	r4, [r0, r3]
    23b6:	3301      	adds	r3, #1
    23b8:	e7f8      	b.n	23ac <memcpy+0x4>

000023ba <memset>:
    23ba:	0003      	movs	r3, r0
    23bc:	1882      	adds	r2, r0, r2
    23be:	4293      	cmp	r3, r2
    23c0:	d100      	bne.n	23c4 <memset+0xa>
    23c2:	4770      	bx	lr
    23c4:	7019      	strb	r1, [r3, #0]
    23c6:	3301      	adds	r3, #1
    23c8:	e7f9      	b.n	23be <memset+0x4>
    23ca:	0000      	movs	r0, r0
    23cc:	42000800 	.word	0x42000800
    23d0:	42000c00 	.word	0x42000c00
    23d4:	42001000 	.word	0x42001000
    23d8:	42001400 	.word	0x42001400
    23dc:	42001800 	.word	0x42001800
    23e0:	42001c00 	.word	0x42001c00
    23e4:	0c0b0a09 	.word	0x0c0b0a09
    23e8:	00000e0d 	.word	0x00000e0d
    23ec:	000019ac 	.word	0x000019ac
    23f0:	00001a04 	.word	0x00001a04
    23f4:	00001a04 	.word	0x00001a04
    23f8:	000019a6 	.word	0x000019a6
    23fc:	000019a6 	.word	0x000019a6
    2400:	000019c0 	.word	0x000019c0
    2404:	000019b2 	.word	0x000019b2
    2408:	000019c6 	.word	0x000019c6
    240c:	000019f4 	.word	0x000019f4
    2410:	00001a90 	.word	0x00001a90
    2414:	00001afe 	.word	0x00001afe
    2418:	00001afe 	.word	0x00001afe
    241c:	00001a70 	.word	0x00001a70
    2420:	00001a82 	.word	0x00001a82
    2424:	00001aa0 	.word	0x00001aa0
    2428:	00001a74 	.word	0x00001a74
    242c:	00001ab0 	.word	0x00001ab0
    2430:	00001aec 	.word	0x00001aec
    2434:	281e0a28 	.word	0x281e0a28

00002438 <_init>:
    2438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    243e:	bc08      	pop	{r3}
    2440:	469e      	mov	lr, r3
    2442:	4770      	bx	lr

00002444 <__init_array_start>:
    2444:	000000dd 	.word	0x000000dd

00002448 <_fini>:
    2448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    244e:	bc08      	pop	{r3}
    2450:	469e      	mov	lr, r3
    2452:	4770      	bx	lr

00002454 <__fini_array_start>:
    2454:	000000b5 	.word	0x000000b5
=======
    2846:	a901      	add	r1, sp, #4
    2848:	2206      	movs	r2, #6
    284a:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    284c:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    284e:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    2850:	3a05      	subs	r2, #5
    2852:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    2854:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    2856:	2000      	movs	r0, #0
    2858:	4b05      	ldr	r3, [pc, #20]	; (2870 <clk_gclk0_init+0x38>)
    285a:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    285c:	2000      	movs	r0, #0
    285e:	4b05      	ldr	r3, [pc, #20]	; (2874 <clk_gclk0_init+0x3c>)
    2860:	4798      	blx	r3
    2862:	b005      	add	sp, #20
    2864:	bd00      	pop	{pc}
    2866:	46c0      	nop			; (mov r8, r8)
    2868:	000022d5 	.word	0x000022d5
    286c:	40000400 	.word	0x40000400
    2870:	000022f9 	.word	0x000022f9
    2874:	000023c9 	.word	0x000023c9

00002878 <sys_clk_init>:
{
    2878:	b510      	push	{r4, lr}
	clk_osc8m_init();
    287a:	4b03      	ldr	r3, [pc, #12]	; (2888 <sys_clk_init+0x10>)
    287c:	4798      	blx	r3
	clk_gclk0_init();
    287e:	4b03      	ldr	r3, [pc, #12]	; (288c <sys_clk_init+0x14>)
    2880:	4798      	blx	r3
    delay_init();
    2882:	4b03      	ldr	r3, [pc, #12]	; (2890 <sys_clk_init+0x18>)
    2884:	4798      	blx	r3
}
    2886:	bd10      	pop	{r4, pc}
    2888:	0000281d 	.word	0x0000281d
    288c:	00002839 	.word	0x00002839
    2890:	00000a0d 	.word	0x00000a0d

00002894 <simSysInit>:
{
    2894:	b510      	push	{r4, lr}
	system_init();
    2896:	4b05      	ldr	r3, [pc, #20]	; (28ac <simSysInit+0x18>)
    2898:	4798      	blx	r3
	sys_clk_init();
    289a:	4b05      	ldr	r3, [pc, #20]	; (28b0 <simSysInit+0x1c>)
    289c:	4798      	blx	r3
	conf_port_pin();
    289e:	4b05      	ldr	r3, [pc, #20]	; (28b4 <simSysInit+0x20>)
    28a0:	4798      	blx	r3
	spi40_init();
    28a2:	4b05      	ldr	r3, [pc, #20]	; (28b8 <simSysInit+0x24>)
    28a4:	4798      	blx	r3
    uartfiber_init();
    28a6:	4b05      	ldr	r3, [pc, #20]	; (28bc <simSysInit+0x28>)
    28a8:	4798      	blx	r3
}
    28aa:	bd10      	pop	{r4, pc}
    28ac:	0000266d 	.word	0x0000266d
    28b0:	00002879 	.word	0x00002879
    28b4:	00002761 	.word	0x00002761
    28b8:	00000115 	.word	0x00000115
    28bc:	00000915 	.word	0x00000915

000028c0 <main>:
{
    28c0:	b510      	push	{r4, lr}
    28c2:	b086      	sub	sp, #24
    rssi_vals acquired_rssi = {10, 20, 30};
    28c4:	ac04      	add	r4, sp, #16
    28c6:	2208      	movs	r2, #8
    28c8:	2100      	movs	r1, #0
    28ca:	0020      	movs	r0, r4
    28cc:	4b12      	ldr	r3, [pc, #72]	; (2918 <main+0x58>)
    28ce:	4798      	blx	r3
    28d0:	230a      	movs	r3, #10
    28d2:	8023      	strh	r3, [r4, #0]
    28d4:	330a      	adds	r3, #10
    28d6:	8063      	strh	r3, [r4, #2]
    28d8:	330a      	adds	r3, #10
    28da:	80a3      	strh	r3, [r4, #4]
    28dc:	2208      	movs	r2, #8
    28de:	0021      	movs	r1, r4
    28e0:	a802      	add	r0, sp, #8
    28e2:	4b0e      	ldr	r3, [pc, #56]	; (291c <main+0x5c>)
    28e4:	4798      	blx	r3
	struct measurement test_data = {69, 47, 82, 112};
    28e6:	4b0e      	ldr	r3, [pc, #56]	; (2920 <main+0x60>)
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	9301      	str	r3, [sp, #4]
    simSysInit();
    28ec:	4b0d      	ldr	r3, [pc, #52]	; (2924 <main+0x64>)
    28ee:	4798      	blx	r3
    delay_ms(100);
    28f0:	2064      	movs	r0, #100	; 0x64
    28f2:	4b0d      	ldr	r3, [pc, #52]	; (2928 <main+0x68>)
    28f4:	4798      	blx	r3
    spi40_rx_init();
    28f6:	4b0d      	ldr	r3, [pc, #52]	; (292c <main+0x6c>)
    28f8:	4798      	blx	r3
		buf = spi40_rd8(AX5043_FIFODATA);
    28fa:	2029      	movs	r0, #41	; 0x29
    28fc:	4b0c      	ldr	r3, [pc, #48]	; (2930 <main+0x70>)
    28fe:	4798      	blx	r3
		acquired_rssi.rssi169 = spi40_rssi();
    2900:	4b0c      	ldr	r3, [pc, #48]	; (2934 <main+0x74>)
    2902:	4798      	blx	r3
    2904:	b200      	sxth	r0, r0
    2906:	ab02      	add	r3, sp, #8
    2908:	8058      	strh	r0, [r3, #2]
		usart_fiber_write(test_data);
    290a:	9801      	ldr	r0, [sp, #4]
    290c:	4b0a      	ldr	r3, [pc, #40]	; (2938 <main+0x78>)
    290e:	4798      	blx	r3
        delay_ms(100);
    2910:	2064      	movs	r0, #100	; 0x64
    2912:	4b05      	ldr	r3, [pc, #20]	; (2928 <main+0x68>)
    2914:	4798      	blx	r3
    2916:	e7f0      	b.n	28fa <main+0x3a>
    2918:	00002b03 	.word	0x00002b03
    291c:	00002af1 	.word	0x00002af1
    2920:	00002b7c 	.word	0x00002b7c
    2924:	00002895 	.word	0x00002895
    2928:	00000a49 	.word	0x00000a49
    292c:	00000345 	.word	0x00000345
    2930:	000002ad 	.word	0x000002ad
    2934:	00000831 	.word	0x00000831
    2938:	000009d5 	.word	0x000009d5

0000293c <__udivsi3>:
    293c:	2200      	movs	r2, #0
    293e:	0843      	lsrs	r3, r0, #1
    2940:	428b      	cmp	r3, r1
    2942:	d374      	bcc.n	2a2e <__udivsi3+0xf2>
    2944:	0903      	lsrs	r3, r0, #4
    2946:	428b      	cmp	r3, r1
    2948:	d35f      	bcc.n	2a0a <__udivsi3+0xce>
    294a:	0a03      	lsrs	r3, r0, #8
    294c:	428b      	cmp	r3, r1
    294e:	d344      	bcc.n	29da <__udivsi3+0x9e>
    2950:	0b03      	lsrs	r3, r0, #12
    2952:	428b      	cmp	r3, r1
    2954:	d328      	bcc.n	29a8 <__udivsi3+0x6c>
    2956:	0c03      	lsrs	r3, r0, #16
    2958:	428b      	cmp	r3, r1
    295a:	d30d      	bcc.n	2978 <__udivsi3+0x3c>
    295c:	22ff      	movs	r2, #255	; 0xff
    295e:	0209      	lsls	r1, r1, #8
    2960:	ba12      	rev	r2, r2
    2962:	0c03      	lsrs	r3, r0, #16
    2964:	428b      	cmp	r3, r1
    2966:	d302      	bcc.n	296e <__udivsi3+0x32>
    2968:	1212      	asrs	r2, r2, #8
    296a:	0209      	lsls	r1, r1, #8
    296c:	d065      	beq.n	2a3a <__udivsi3+0xfe>
    296e:	0b03      	lsrs	r3, r0, #12
    2970:	428b      	cmp	r3, r1
    2972:	d319      	bcc.n	29a8 <__udivsi3+0x6c>
    2974:	e000      	b.n	2978 <__udivsi3+0x3c>
    2976:	0a09      	lsrs	r1, r1, #8
    2978:	0bc3      	lsrs	r3, r0, #15
    297a:	428b      	cmp	r3, r1
    297c:	d301      	bcc.n	2982 <__udivsi3+0x46>
    297e:	03cb      	lsls	r3, r1, #15
    2980:	1ac0      	subs	r0, r0, r3
    2982:	4152      	adcs	r2, r2
    2984:	0b83      	lsrs	r3, r0, #14
    2986:	428b      	cmp	r3, r1
    2988:	d301      	bcc.n	298e <__udivsi3+0x52>
    298a:	038b      	lsls	r3, r1, #14
    298c:	1ac0      	subs	r0, r0, r3
    298e:	4152      	adcs	r2, r2
    2990:	0b43      	lsrs	r3, r0, #13
    2992:	428b      	cmp	r3, r1
    2994:	d301      	bcc.n	299a <__udivsi3+0x5e>
    2996:	034b      	lsls	r3, r1, #13
    2998:	1ac0      	subs	r0, r0, r3
    299a:	4152      	adcs	r2, r2
    299c:	0b03      	lsrs	r3, r0, #12
    299e:	428b      	cmp	r3, r1
    29a0:	d301      	bcc.n	29a6 <__udivsi3+0x6a>
    29a2:	030b      	lsls	r3, r1, #12
    29a4:	1ac0      	subs	r0, r0, r3
    29a6:	4152      	adcs	r2, r2
    29a8:	0ac3      	lsrs	r3, r0, #11
    29aa:	428b      	cmp	r3, r1
    29ac:	d301      	bcc.n	29b2 <__udivsi3+0x76>
    29ae:	02cb      	lsls	r3, r1, #11
    29b0:	1ac0      	subs	r0, r0, r3
    29b2:	4152      	adcs	r2, r2
    29b4:	0a83      	lsrs	r3, r0, #10
    29b6:	428b      	cmp	r3, r1
    29b8:	d301      	bcc.n	29be <__udivsi3+0x82>
    29ba:	028b      	lsls	r3, r1, #10
    29bc:	1ac0      	subs	r0, r0, r3
    29be:	4152      	adcs	r2, r2
    29c0:	0a43      	lsrs	r3, r0, #9
    29c2:	428b      	cmp	r3, r1
    29c4:	d301      	bcc.n	29ca <__udivsi3+0x8e>
    29c6:	024b      	lsls	r3, r1, #9
    29c8:	1ac0      	subs	r0, r0, r3
    29ca:	4152      	adcs	r2, r2
    29cc:	0a03      	lsrs	r3, r0, #8
    29ce:	428b      	cmp	r3, r1
    29d0:	d301      	bcc.n	29d6 <__udivsi3+0x9a>
    29d2:	020b      	lsls	r3, r1, #8
    29d4:	1ac0      	subs	r0, r0, r3
    29d6:	4152      	adcs	r2, r2
    29d8:	d2cd      	bcs.n	2976 <__udivsi3+0x3a>
    29da:	09c3      	lsrs	r3, r0, #7
    29dc:	428b      	cmp	r3, r1
    29de:	d301      	bcc.n	29e4 <__udivsi3+0xa8>
    29e0:	01cb      	lsls	r3, r1, #7
    29e2:	1ac0      	subs	r0, r0, r3
    29e4:	4152      	adcs	r2, r2
    29e6:	0983      	lsrs	r3, r0, #6
    29e8:	428b      	cmp	r3, r1
    29ea:	d301      	bcc.n	29f0 <__udivsi3+0xb4>
    29ec:	018b      	lsls	r3, r1, #6
    29ee:	1ac0      	subs	r0, r0, r3
    29f0:	4152      	adcs	r2, r2
    29f2:	0943      	lsrs	r3, r0, #5
    29f4:	428b      	cmp	r3, r1
    29f6:	d301      	bcc.n	29fc <__udivsi3+0xc0>
    29f8:	014b      	lsls	r3, r1, #5
    29fa:	1ac0      	subs	r0, r0, r3
    29fc:	4152      	adcs	r2, r2
    29fe:	0903      	lsrs	r3, r0, #4
    2a00:	428b      	cmp	r3, r1
    2a02:	d301      	bcc.n	2a08 <__udivsi3+0xcc>
    2a04:	010b      	lsls	r3, r1, #4
    2a06:	1ac0      	subs	r0, r0, r3
    2a08:	4152      	adcs	r2, r2
    2a0a:	08c3      	lsrs	r3, r0, #3
    2a0c:	428b      	cmp	r3, r1
    2a0e:	d301      	bcc.n	2a14 <__udivsi3+0xd8>
    2a10:	00cb      	lsls	r3, r1, #3
    2a12:	1ac0      	subs	r0, r0, r3
    2a14:	4152      	adcs	r2, r2
    2a16:	0883      	lsrs	r3, r0, #2
    2a18:	428b      	cmp	r3, r1
    2a1a:	d301      	bcc.n	2a20 <__udivsi3+0xe4>
    2a1c:	008b      	lsls	r3, r1, #2
    2a1e:	1ac0      	subs	r0, r0, r3
    2a20:	4152      	adcs	r2, r2
    2a22:	0843      	lsrs	r3, r0, #1
    2a24:	428b      	cmp	r3, r1
    2a26:	d301      	bcc.n	2a2c <__udivsi3+0xf0>
    2a28:	004b      	lsls	r3, r1, #1
    2a2a:	1ac0      	subs	r0, r0, r3
    2a2c:	4152      	adcs	r2, r2
    2a2e:	1a41      	subs	r1, r0, r1
    2a30:	d200      	bcs.n	2a34 <__udivsi3+0xf8>
    2a32:	4601      	mov	r1, r0
    2a34:	4152      	adcs	r2, r2
    2a36:	4610      	mov	r0, r2
    2a38:	4770      	bx	lr
    2a3a:	e7ff      	b.n	2a3c <__udivsi3+0x100>
    2a3c:	b501      	push	{r0, lr}
    2a3e:	2000      	movs	r0, #0
    2a40:	f000 f806 	bl	2a50 <__aeabi_idiv0>
    2a44:	bd02      	pop	{r1, pc}
    2a46:	46c0      	nop			; (mov r8, r8)

00002a48 <__aeabi_uidivmod>:
    2a48:	2900      	cmp	r1, #0
    2a4a:	d0f7      	beq.n	2a3c <__udivsi3+0x100>
    2a4c:	e776      	b.n	293c <__udivsi3>
    2a4e:	4770      	bx	lr

00002a50 <__aeabi_idiv0>:
    2a50:	4770      	bx	lr
    2a52:	46c0      	nop			; (mov r8, r8)

00002a54 <__aeabi_lmul>:
    2a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a56:	46ce      	mov	lr, r9
    2a58:	4647      	mov	r7, r8
    2a5a:	0415      	lsls	r5, r2, #16
    2a5c:	0c2d      	lsrs	r5, r5, #16
    2a5e:	002e      	movs	r6, r5
    2a60:	b580      	push	{r7, lr}
    2a62:	0407      	lsls	r7, r0, #16
    2a64:	0c14      	lsrs	r4, r2, #16
    2a66:	0c3f      	lsrs	r7, r7, #16
    2a68:	4699      	mov	r9, r3
    2a6a:	0c03      	lsrs	r3, r0, #16
    2a6c:	437e      	muls	r6, r7
    2a6e:	435d      	muls	r5, r3
    2a70:	4367      	muls	r7, r4
    2a72:	4363      	muls	r3, r4
    2a74:	197f      	adds	r7, r7, r5
    2a76:	0c34      	lsrs	r4, r6, #16
    2a78:	19e4      	adds	r4, r4, r7
    2a7a:	469c      	mov	ip, r3
    2a7c:	42a5      	cmp	r5, r4
    2a7e:	d903      	bls.n	2a88 <__aeabi_lmul+0x34>
    2a80:	2380      	movs	r3, #128	; 0x80
    2a82:	025b      	lsls	r3, r3, #9
    2a84:	4698      	mov	r8, r3
    2a86:	44c4      	add	ip, r8
    2a88:	464b      	mov	r3, r9
    2a8a:	4351      	muls	r1, r2
    2a8c:	4343      	muls	r3, r0
    2a8e:	0436      	lsls	r6, r6, #16
    2a90:	0c36      	lsrs	r6, r6, #16
    2a92:	0c25      	lsrs	r5, r4, #16
    2a94:	0424      	lsls	r4, r4, #16
    2a96:	4465      	add	r5, ip
    2a98:	19a4      	adds	r4, r4, r6
    2a9a:	1859      	adds	r1, r3, r1
    2a9c:	1949      	adds	r1, r1, r5
    2a9e:	0020      	movs	r0, r4
    2aa0:	bc0c      	pop	{r2, r3}
    2aa2:	4690      	mov	r8, r2
    2aa4:	4699      	mov	r9, r3
    2aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002aa8 <__libc_init_array>:
    2aa8:	b570      	push	{r4, r5, r6, lr}
    2aaa:	2600      	movs	r6, #0
    2aac:	4d0c      	ldr	r5, [pc, #48]	; (2ae0 <__libc_init_array+0x38>)
    2aae:	4c0d      	ldr	r4, [pc, #52]	; (2ae4 <__libc_init_array+0x3c>)
    2ab0:	1b64      	subs	r4, r4, r5
    2ab2:	10a4      	asrs	r4, r4, #2
    2ab4:	42a6      	cmp	r6, r4
    2ab6:	d109      	bne.n	2acc <__libc_init_array+0x24>
    2ab8:	2600      	movs	r6, #0
    2aba:	f000 f861 	bl	2b80 <_init>
    2abe:	4d0a      	ldr	r5, [pc, #40]	; (2ae8 <__libc_init_array+0x40>)
    2ac0:	4c0a      	ldr	r4, [pc, #40]	; (2aec <__libc_init_array+0x44>)
    2ac2:	1b64      	subs	r4, r4, r5
    2ac4:	10a4      	asrs	r4, r4, #2
    2ac6:	42a6      	cmp	r6, r4
    2ac8:	d105      	bne.n	2ad6 <__libc_init_array+0x2e>
    2aca:	bd70      	pop	{r4, r5, r6, pc}
    2acc:	00b3      	lsls	r3, r6, #2
    2ace:	58eb      	ldr	r3, [r5, r3]
    2ad0:	4798      	blx	r3
    2ad2:	3601      	adds	r6, #1
    2ad4:	e7ee      	b.n	2ab4 <__libc_init_array+0xc>
    2ad6:	00b3      	lsls	r3, r6, #2
    2ad8:	58eb      	ldr	r3, [r5, r3]
    2ada:	4798      	blx	r3
    2adc:	3601      	adds	r6, #1
    2ade:	e7f2      	b.n	2ac6 <__libc_init_array+0x1e>
    2ae0:	00002b8c 	.word	0x00002b8c
    2ae4:	00002b8c 	.word	0x00002b8c
    2ae8:	00002b8c 	.word	0x00002b8c
    2aec:	00002b90 	.word	0x00002b90

00002af0 <memcpy>:
    2af0:	2300      	movs	r3, #0
    2af2:	b510      	push	{r4, lr}
    2af4:	429a      	cmp	r2, r3
    2af6:	d100      	bne.n	2afa <memcpy+0xa>
    2af8:	bd10      	pop	{r4, pc}
    2afa:	5ccc      	ldrb	r4, [r1, r3]
    2afc:	54c4      	strb	r4, [r0, r3]
    2afe:	3301      	adds	r3, #1
    2b00:	e7f8      	b.n	2af4 <memcpy+0x4>

00002b02 <memset>:
    2b02:	0003      	movs	r3, r0
    2b04:	1882      	adds	r2, r0, r2
    2b06:	4293      	cmp	r3, r2
    2b08:	d100      	bne.n	2b0c <memset+0xa>
    2b0a:	4770      	bx	lr
    2b0c:	7019      	strb	r1, [r3, #0]
    2b0e:	3301      	adds	r3, #1
    2b10:	e7f9      	b.n	2b06 <memset+0x4>
    2b12:	0000      	movs	r0, r0
    2b14:	42000800 	.word	0x42000800
    2b18:	42000c00 	.word	0x42000c00
    2b1c:	42001000 	.word	0x42001000
    2b20:	42001400 	.word	0x42001400
    2b24:	42001800 	.word	0x42001800
    2b28:	42001c00 	.word	0x42001c00
    2b2c:	0c0b0a09 	.word	0x0c0b0a09
    2b30:	00000e0d 	.word	0x00000e0d
    2b34:	000020ec 	.word	0x000020ec
    2b38:	00002144 	.word	0x00002144
    2b3c:	00002144 	.word	0x00002144
    2b40:	000020e6 	.word	0x000020e6
    2b44:	000020e6 	.word	0x000020e6
    2b48:	00002100 	.word	0x00002100
    2b4c:	000020f2 	.word	0x000020f2
    2b50:	00002106 	.word	0x00002106
    2b54:	00002134 	.word	0x00002134
    2b58:	000021d0 	.word	0x000021d0
    2b5c:	0000223e 	.word	0x0000223e
    2b60:	0000223e 	.word	0x0000223e
    2b64:	000021b0 	.word	0x000021b0
    2b68:	000021c2 	.word	0x000021c2
    2b6c:	000021e0 	.word	0x000021e0
    2b70:	000021b4 	.word	0x000021b4
    2b74:	000021f0 	.word	0x000021f0
    2b78:	0000222c 	.word	0x0000222c
    2b7c:	70522f45 	.word	0x70522f45

00002b80 <_init>:
    2b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b86:	bc08      	pop	{r3}
    2b88:	469e      	mov	lr, r3
    2b8a:	4770      	bx	lr

00002b8c <__init_array_start>:
    2b8c:	000000dd 	.word	0x000000dd

00002b90 <_fini>:
    2b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b96:	bc08      	pop	{r3}
    2b98:	469e      	mov	lr, r3
    2b9a:	4770      	bx	lr

00002b9c <__fini_array_start>:
    2b9c:	000000b5 	.word	0x000000b5
>>>>>>> 8fd586c066329d48a3491bfef5531e1cc7afaec4
