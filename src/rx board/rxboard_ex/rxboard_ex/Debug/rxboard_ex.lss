
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c54  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ec  2000000c  00001c60  0002000c  2**2
                  ALLOC
  3 .stack        00002000  200000f8  00001d4c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002bca9  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037f0  00000000  00000000  0004bd36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006390  00000000  00000000  0004f526  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000500  00000000  00000000  000558b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000828  00000000  00000000  00055db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006b97  00000000  00000000  000565de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ca39  00000000  00000000  0005d175  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d1ea  00000000  00000000  00069bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c3c  00000000  00000000  000f6d98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 20 00 20 e5 17 00 00 e1 17 00 00 e1 17 00 00     . . ............
	...
      2c:	e1 17 00 00 00 00 00 00 00 00 00 00 e1 17 00 00     ................
      3c:	e1 17 00 00 e1 17 00 00 e1 17 00 00 e1 17 00 00     ................
      4c:	e1 17 00 00 e1 17 00 00 e1 17 00 00 e1 17 00 00     ................
      5c:	e1 17 00 00 e1 17 00 00 29 11 00 00 39 11 00 00     ........)...9...
      6c:	49 11 00 00 59 11 00 00 69 11 00 00 79 11 00 00     I...Y...i...y...
      7c:	e1 17 00 00 e1 17 00 00 e1 17 00 00 e1 17 00 00     ................
      8c:	e1 17 00 00 e1 17 00 00 e1 17 00 00 e1 17 00 00     ................
      9c:	e1 17 00 00 e1 17 00 00 e1 17 00 00 e1 17 00 00     ................
      ac:	e1 17 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001c54 	.word	0x00001c54

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001c54 	.word	0x00001c54
     10c:	00001c54 	.word	0x00001c54
     110:	00000000 	.word	0x00000000

00000114 <spi27_write_cmd>:
	spi27_write_byte_to_reg(0x80, 0x20);
	//Set the transmission mode to streaming (pg. 30)
	spi27_write_byte_to_reg(0xBA,0x00);
}

void spi27_write_cmd (char *cmd){
     114:	b500      	push	{lr}
     116:	b083      	sub	sp, #12
     118:	9001      	str	r0, [sp, #4]
	status_code_genare_t write_status;

	//Add 1s to put module in COMMAND mode
	*cmd = *cmd | 0b11000000;
     11a:	7802      	ldrb	r2, [r0, #0]
     11c:	2340      	movs	r3, #64	; 0x40
     11e:	425b      	negs	r3, r3
     120:	4313      	orrs	r3, r2
     122:	7003      	strb	r3, [r0, #0]
	
	//read byte from address
	write_status = spi_write_buffer_wait(&spi27Master, &cmd, 1);
     124:	2201      	movs	r2, #1
     126:	a901      	add	r1, sp, #4
     128:	4802      	ldr	r0, [pc, #8]	; (134 <spi27_write_cmd+0x20>)
     12a:	4b03      	ldr	r3, [pc, #12]	; (138 <spi27_write_cmd+0x24>)
     12c:	4798      	blx	r3
	//set sen = 0;
	//set sen = 1;
}
     12e:	b003      	add	sp, #12
     130:	bd00      	pop	{pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	2000009c 	.word	0x2000009c
     138:	00000a1d 	.word	0x00000a1d

0000013c <spi27_read_byte_from_reg>:
	spi27_read_byte_from_reg(&byte, 0x23);
	rssi = *byte & 0x0F;
	return rssi;
}

void spi27_read_byte_from_reg (char *read_byte, uint8_t *reg){
     13c:	b510      	push	{r4, lr}
     13e:	b082      	sub	sp, #8
     140:	9001      	str	r0, [sp, #4]
     142:	9100      	str	r1, [sp, #0]
	status_code_genare_t read_status;

	//Add 1 leading 0s to put module in READ mode
	*reg =+ 0b01000000;
     144:	2240      	movs	r2, #64	; 0x40
     146:	700a      	strb	r2, [r1, #0]
	
	//read byte from address
	read_status = spi_transceive_buffer_wait(&spi27Master, &reg, &read_byte,  2);
     148:	2302      	movs	r3, #2
     14a:	aa01      	add	r2, sp, #4
     14c:	4669      	mov	r1, sp
     14e:	4802      	ldr	r0, [pc, #8]	; (158 <spi27_read_byte_from_reg+0x1c>)
     150:	4c02      	ldr	r4, [pc, #8]	; (15c <spi27_read_byte_from_reg+0x20>)
     152:	47a0      	blx	r4
	//set sen = 0;
	//set sen = 1; 
}
     154:	b002      	add	sp, #8
     156:	bd10      	pop	{r4, pc}
     158:	2000009c 	.word	0x2000009c
     15c:	00000c09 	.word	0x00000c09

00000160 <spi27_write_byte_to_reg>:

void spi27_write_byte_to_reg (char byte, uint8_t reg){
     160:	b530      	push	{r4, r5, lr}
     162:	b083      	sub	sp, #12
	val = val & 0x3F;
	val = val<<8;
	val = val| byte;
	
	//prepare buffer with address and data
	*buf = val;
     164:	9b01      	ldr	r3, [sp, #4]
     166:	7018      	strb	r0, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     168:	4c05      	ldr	r4, [pc, #20]	; (180 <spi27_write_byte_to_reg+0x20>)
     16a:	2580      	movs	r5, #128	; 0x80
     16c:	042d      	lsls	r5, r5, #16
     16e:	61a5      	str	r5, [r4, #24]
	
	//write byte to address
	port_pin_set_output_level(SS27, true);	
	write_status = spi_write_buffer_wait(&spi27Master, &buf, 2);
     170:	2202      	movs	r2, #2
     172:	a901      	add	r1, sp, #4
     174:	4803      	ldr	r0, [pc, #12]	; (184 <spi27_write_byte_to_reg+0x24>)
     176:	4b04      	ldr	r3, [pc, #16]	; (188 <spi27_write_byte_to_reg+0x28>)
     178:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     17a:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(SS27, false);	
		//set sen = 0;
		//set sen = 1;
	
}
     17c:	b003      	add	sp, #12
     17e:	bd30      	pop	{r4, r5, pc}
     180:	41004400 	.word	0x41004400
     184:	2000009c 	.word	0x2000009c
     188:	00000a1d 	.word	0x00000a1d

0000018c <spi27_connect>:
void spi27_connect (){
     18c:	b510      	push	{r4, lr}
     18e:	b082      	sub	sp, #8
	spi27_write_byte_to_reg(0x80, 0x00); //set reciever unit as master
     190:	2100      	movs	r1, #0
     192:	2080      	movs	r0, #128	; 0x80
     194:	4c15      	ldr	r4, [pc, #84]	; (1ec <spi27_connect+0x60>)
     196:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x12, 0x04); //set waketm bits (sequence b00010011 for waketm bits and to set long wake_tx bit 0x04 for REG.) (pg. 25)
     198:	2104      	movs	r1, #4
     19a:	2012      	movs	r0, #18
     19c:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x00, 0x01); //DISABLE all timers
     19e:	2101      	movs	r1, #1
     1a0:	2000      	movs	r0, #0
     1a2:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x02, 0x06); //set bitrate to 53 kbit per sec
     1a4:	2106      	movs	r1, #6
     1a6:	2002      	movs	r0, #2
     1a8:	47a0      	blx	r4
		spi27_write_byte_to_reg(0, 0x08);
     1aa:	2108      	movs	r1, #8
     1ac:	2000      	movs	r0, #0
     1ae:	47a0      	blx	r4
	spi27_write_byte_to_reg(0, 0x09);
     1b0:	2109      	movs	r1, #9
     1b2:	2000      	movs	r0, #0
     1b4:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x02, 0x0A);
     1b6:	210a      	movs	r1, #10
     1b8:	2002      	movs	r0, #2
     1ba:	47a0      	blx	r4
	spi27_write_cmd(WAKE_TX); //begin wakeup call 
     1bc:	2004      	movs	r0, #4
     1be:	4b0c      	ldr	r3, [pc, #48]	; (1f0 <spi27_connect+0x64>)
     1c0:	4798      	blx	r3
	delay_s(1); //delay for 1 sec, listen for client
     1c2:	20fa      	movs	r0, #250	; 0xfa
     1c4:	0080      	lsls	r0, r0, #2
     1c6:	4b0b      	ldr	r3, [pc, #44]	; (1f4 <spi27_connect+0x68>)
     1c8:	4798      	blx	r3
		spi27_read_byte_from_reg(&byte,0x2A);
     1ca:	212a      	movs	r1, #42	; 0x2a
     1cc:	a801      	add	r0, sp, #4
     1ce:	4b0a      	ldr	r3, [pc, #40]	; (1f8 <spi27_connect+0x6c>)
     1d0:	4798      	blx	r3
		char y = *byte;
     1d2:	9b01      	ldr	r3, [sp, #4]
     1d4:	781b      	ldrb	r3, [r3, #0]
		if (y & 0b01000000){
     1d6:	065b      	lsls	r3, r3, #25
     1d8:	d5f7      	bpl.n	1ca <spi27_connect+0x3e>
	spi27_write_byte_to_reg(0x80, 0x20);
     1da:	2120      	movs	r1, #32
     1dc:	2080      	movs	r0, #128	; 0x80
     1de:	4c03      	ldr	r4, [pc, #12]	; (1ec <spi27_connect+0x60>)
     1e0:	47a0      	blx	r4
	spi27_write_byte_to_reg(0xBA,0x00);
     1e2:	2100      	movs	r1, #0
     1e4:	20ba      	movs	r0, #186	; 0xba
     1e6:	47a0      	blx	r4
}
     1e8:	b002      	add	sp, #8
     1ea:	bd10      	pop	{r4, pc}
     1ec:	00000161 	.word	0x00000161
     1f0:	00000115 	.word	0x00000115
     1f4:	00000395 	.word	0x00000395
     1f8:	0000013d 	.word	0x0000013d

000001fc <spi27_initialize>:
{
     1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fe:	b091      	sub	sp, #68	; 0x44
	if (spi27InitComp == true)
     200:	4b37      	ldr	r3, [pc, #220]	; (2e0 <spi27_initialize+0xe4>)
     202:	781b      	ldrb	r3, [r3, #0]
     204:	2b00      	cmp	r3, #0
     206:	d001      	beq.n	20c <spi27_initialize+0x10>
}
     208:	b011      	add	sp, #68	; 0x44
     20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     20c:	ac02      	add	r4, sp, #8
     20e:	2601      	movs	r6, #1
     210:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     212:	2500      	movs	r5, #0
     214:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     216:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     218:	23c0      	movs	r3, #192	; 0xc0
     21a:	039b      	lsls	r3, r3, #14
     21c:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     21e:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     220:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     222:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     224:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     226:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     228:	2724      	movs	r7, #36	; 0x24
     22a:	55e5      	strb	r5, [r4, r7]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     22c:	220c      	movs	r2, #12
     22e:	2100      	movs	r1, #0
     230:	a808      	add	r0, sp, #32
     232:	4b2c      	ldr	r3, [pc, #176]	; (2e4 <spi27_initialize+0xe8>)
     234:	4798      	blx	r3
    spi27MasterConf.mux_setting = SPI27_PINXMUX;
     236:	2380      	movs	r3, #128	; 0x80
     238:	025b      	lsls	r3, r3, #9
     23a:	60e3      	str	r3, [r4, #12]
    spi27MasterConf.pinmux_pad0 = MISO27;
     23c:	4b2a      	ldr	r3, [pc, #168]	; (2e8 <spi27_initialize+0xec>)
     23e:	62a3      	str	r3, [r4, #40]	; 0x28
    spi27MasterConf.pinmux_pad1 = PINMUX_UNUSED;
     240:	2301      	movs	r3, #1
     242:	425b      	negs	r3, r3
     244:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi27MasterConf.pinmux_pad2 = MOSI27;
     246:	4b29      	ldr	r3, [pc, #164]	; (2ec <spi27_initialize+0xf0>)
     248:	6323      	str	r3, [r4, #48]	; 0x30
    spi27MasterConf.pinmux_pad3 = SCK27;
     24a:	4b29      	ldr	r3, [pc, #164]	; (2f0 <spi27_initialize+0xf4>)
     24c:	6363      	str	r3, [r4, #52]	; 0x34
	spi27MasterConf.transfer_mode = SPI_TRANSFER_MODE_1;
     24e:	2380      	movs	r3, #128	; 0x80
     250:	055b      	lsls	r3, r3, #21
     252:	60a3      	str	r3, [r4, #8]
	spi27MasterConf.generator_source = SPI27_CLK;
     254:	55e5      	strb	r5, [r4, r7]
	spi27MasterConf.mode_specific.master.baudrate = SPI27MAXCLK;
     256:	4b27      	ldr	r3, [pc, #156]	; (2f4 <spi27_initialize+0xf8>)
     258:	61a3      	str	r3, [r4, #24]
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     25a:	4d27      	ldr	r5, [pc, #156]	; (2f8 <spi27_initialize+0xfc>)
     25c:	0022      	movs	r2, r4
     25e:	4927      	ldr	r1, [pc, #156]	; (2fc <spi27_initialize+0x100>)
     260:	0028      	movs	r0, r5
     262:	4b27      	ldr	r3, [pc, #156]	; (300 <spi27_initialize+0x104>)
     264:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     266:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     268:	0020      	movs	r0, r4
     26a:	4b26      	ldr	r3, [pc, #152]	; (304 <spi27_initialize+0x108>)
     26c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     26e:	231f      	movs	r3, #31
     270:	4018      	ands	r0, r3
     272:	4086      	lsls	r6, r0
     274:	4b24      	ldr	r3, [pc, #144]	; (308 <spi27_initialize+0x10c>)
     276:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     278:	4b1f      	ldr	r3, [pc, #124]	; (2f8 <spi27_initialize+0xfc>)
     27a:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     27c:	69db      	ldr	r3, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     27e:	2b00      	cmp	r3, #0
     280:	d1fa      	bne.n	278 <spi27_initialize+0x7c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     282:	6823      	ldr	r3, [r4, #0]
     284:	2202      	movs	r2, #2
     286:	4313      	orrs	r3, r2
     288:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     28a:	2300      	movs	r3, #0
	slave->ss_pin          = config->ss_pin;
     28c:	4c1f      	ldr	r4, [pc, #124]	; (30c <spi27_initialize+0x110>)
     28e:	3215      	adds	r2, #21
     290:	7022      	strb	r2, [r4, #0]
	slave->address_enabled = config->address_enabled;
     292:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     294:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     296:	3a16      	subs	r2, #22
     298:	4669      	mov	r1, sp
     29a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     29c:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     29e:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2a0:	2017      	movs	r0, #23
     2a2:	4b1b      	ldr	r3, [pc, #108]	; (310 <spi27_initialize+0x114>)
     2a4:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2a6:	7821      	ldrb	r1, [r4, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     2a8:	09ca      	lsrs	r2, r1, #7
	uint8_t group_index = (gpio_pin / 32);
     2aa:	094b      	lsrs	r3, r1, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2ac:	2a00      	cmp	r2, #0
     2ae:	d115      	bne.n	2dc <spi27_initialize+0xe0>
		return &(ports[port_index]->Group[group_index]);
     2b0:	01db      	lsls	r3, r3, #7
     2b2:	4a18      	ldr	r2, [pc, #96]	; (314 <spi27_initialize+0x118>)
     2b4:	4694      	mov	ip, r2
     2b6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2b8:	221f      	movs	r2, #31
     2ba:	400a      	ands	r2, r1
     2bc:	2101      	movs	r1, #1
     2be:	0008      	movs	r0, r1
     2c0:	4090      	lsls	r0, r2
		port_base->OUTSET.reg = pin_mask;
     2c2:	6198      	str	r0, [r3, #24]
    spi27InitComp = true;
     2c4:	4b06      	ldr	r3, [pc, #24]	; (2e0 <spi27_initialize+0xe4>)
     2c6:	7019      	strb	r1, [r3, #0]
        read_status = spi_select_slave(&spi27Master, &spi27Slave, true);
     2c8:	2201      	movs	r2, #1
     2ca:	4910      	ldr	r1, [pc, #64]	; (30c <spi27_initialize+0x110>)
     2cc:	480a      	ldr	r0, [pc, #40]	; (2f8 <spi27_initialize+0xfc>)
     2ce:	4b12      	ldr	r3, [pc, #72]	; (318 <spi27_initialize+0x11c>)
     2d0:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
     2d2:	2805      	cmp	r0, #5
     2d4:	d0f8      	beq.n	2c8 <spi27_initialize+0xcc>
	spi27_connect();
     2d6:	4b11      	ldr	r3, [pc, #68]	; (31c <spi27_initialize+0x120>)
     2d8:	4798      	blx	r3
     2da:	e795      	b.n	208 <spi27_initialize+0xc>
	} else {
		Assert(false);
		return NULL;
     2dc:	2300      	movs	r3, #0
     2de:	e7eb      	b.n	2b8 <spi27_initialize+0xbc>
     2e0:	20000028 	.word	0x20000028
     2e4:	00001baf 	.word	0x00001baf
     2e8:	00160002 	.word	0x00160002
     2ec:	00180002 	.word	0x00180002
     2f0:	00190002 	.word	0x00190002
     2f4:	000f4240 	.word	0x000f4240
     2f8:	2000009c 	.word	0x2000009c
     2fc:	42001400 	.word	0x42001400
     300:	00000835 	.word	0x00000835
     304:	00001105 	.word	0x00001105
     308:	e000e100 	.word	0xe000e100
     30c:	200000d8 	.word	0x200000d8
     310:	000003c5 	.word	0x000003c5
     314:	41004400 	.word	0x41004400
     318:	00000921 	.word	0x00000921
     31c:	0000018d 	.word	0x0000018d

00000320 <usart_fiber_write>:
/** 
 * Asynchronous buffer write to transmit single shield measurement
 * Simply calls "usart_write_buffer_job" with specific parameters
 */
void usart_fiber_write(struct measurement temp)
{
     320:	b510      	push	{r4, lr}
     322:	b084      	sub	sp, #16
     324:	9001      	str	r0, [sp, #4]
	
	struct fiber_packet pckt;
	pckt.data = temp;
     326:	ac02      	add	r4, sp, #8
     328:	2204      	movs	r2, #4
     32a:	a901      	add	r1, sp, #4
     32c:	2009      	movs	r0, #9
     32e:	4468      	add	r0, sp
     330:	4b06      	ldr	r3, [pc, #24]	; (34c <usart_fiber_write+0x2c>)
     332:	4798      	blx	r3
	pckt.head = '$';
     334:	2324      	movs	r3, #36	; 0x24
     336:	7023      	strb	r3, [r4, #0]
	pckt.tail = '%';
     338:	3301      	adds	r3, #1
     33a:	7163      	strb	r3, [r4, #5]
	usart_write_buffer_wait(&uartfiber_inst, (uint8_t*) &pckt, sizeof(pckt));
     33c:	2206      	movs	r2, #6
     33e:	0021      	movs	r1, r4
     340:	4803      	ldr	r0, [pc, #12]	; (350 <usart_fiber_write+0x30>)
     342:	4b04      	ldr	r3, [pc, #16]	; (354 <usart_fiber_write+0x34>)
     344:	4798      	blx	r3
};
     346:	b004      	add	sp, #16
     348:	bd10      	pop	{r4, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	00001b9d 	.word	0x00001b9d
     350:	2000002c 	.word	0x2000002c
     354:	00000639 	.word	0x00000639

00000358 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     358:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     35a:	2000      	movs	r0, #0
     35c:	4b08      	ldr	r3, [pc, #32]	; (380 <delay_init+0x28>)
     35e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     360:	4c08      	ldr	r4, [pc, #32]	; (384 <delay_init+0x2c>)
     362:	21fa      	movs	r1, #250	; 0xfa
     364:	0089      	lsls	r1, r1, #2
     366:	47a0      	blx	r4
     368:	4b07      	ldr	r3, [pc, #28]	; (388 <delay_init+0x30>)
     36a:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     36c:	21fa      	movs	r1, #250	; 0xfa
     36e:	0089      	lsls	r1, r1, #2
     370:	47a0      	blx	r4
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <delay_init+0x34>)
     374:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     376:	2205      	movs	r2, #5
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <delay_init+0x38>)
     37a:	601a      	str	r2, [r3, #0]
}
     37c:	bd10      	pop	{r4, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00001569 	.word	0x00001569
     384:	00001a3d 	.word	0x00001a3d
     388:	20000000 	.word	0x20000000
     38c:	20000004 	.word	0x20000004
     390:	e000e010 	.word	0xe000e010

00000394 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     394:	e000      	b.n	398 <delay_cycles_ms+0x4>
{
     396:	0010      	movs	r0, r2
	while (n--) {
     398:	1e42      	subs	r2, r0, #1
     39a:	2800      	cmp	r0, #0
     39c:	d00c      	beq.n	3b8 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     39e:	4b07      	ldr	r3, [pc, #28]	; (3bc <delay_cycles_ms+0x28>)
     3a0:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     3a2:	2b00      	cmp	r3, #0
     3a4:	d0f7      	beq.n	396 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     3a6:	4906      	ldr	r1, [pc, #24]	; (3c0 <delay_cycles_ms+0x2c>)
     3a8:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     3aa:	2300      	movs	r3, #0
     3ac:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     3ae:	4b04      	ldr	r3, [pc, #16]	; (3c0 <delay_cycles_ms+0x2c>)
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	03db      	lsls	r3, r3, #15
     3b4:	d5fb      	bpl.n	3ae <delay_cycles_ms+0x1a>
     3b6:	e7ee      	b.n	396 <delay_cycles_ms+0x2>
	}
}
     3b8:	4770      	bx	lr
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	20000000 	.word	0x20000000
     3c0:	e000e010 	.word	0xe000e010

000003c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     3c4:	b500      	push	{lr}
     3c6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3c8:	ab01      	add	r3, sp, #4
     3ca:	2280      	movs	r2, #128	; 0x80
     3cc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3ce:	780a      	ldrb	r2, [r1, #0]
     3d0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     3d2:	784a      	ldrb	r2, [r1, #1]
     3d4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     3d6:	788a      	ldrb	r2, [r1, #2]
     3d8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3da:	0019      	movs	r1, r3
     3dc:	4b01      	ldr	r3, [pc, #4]	; (3e4 <port_pin_set_config+0x20>)
     3de:	4798      	blx	r3
}
     3e0:	b003      	add	sp, #12
     3e2:	bd00      	pop	{pc}
     3e4:	00001781 	.word	0x00001781

000003e8 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3e8:	0849      	lsrs	r1, r1, #1
     3ea:	4281      	cmp	r1, r0
     3ec:	d201      	bcs.n	3f2 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ee:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     3f0:	4770      	bx	lr
     3f2:	2300      	movs	r3, #0
     3f4:	e002      	b.n	3fc <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     3f6:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     3f8:	3301      	adds	r3, #1
     3fa:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     3fc:	4281      	cmp	r1, r0
     3fe:	d2fa      	bcs.n	3f6 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     400:	3b01      	subs	r3, #1
     402:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     404:	2bff      	cmp	r3, #255	; 0xff
     406:	d901      	bls.n	40c <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     408:	2040      	movs	r0, #64	; 0x40
     40a:	e7f1      	b.n	3f0 <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     40c:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     40e:	2000      	movs	r0, #0
     410:	e7ee      	b.n	3f0 <_sercom_get_sync_baud_val+0x8>
	...

00000414 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     414:	b510      	push	{r4, lr}
     416:	b082      	sub	sp, #8
     418:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     41a:	4b0e      	ldr	r3, [pc, #56]	; (454 <sercom_set_gclk_generator+0x40>)
     41c:	781b      	ldrb	r3, [r3, #0]
     41e:	2b00      	cmp	r3, #0
     420:	d007      	beq.n	432 <sercom_set_gclk_generator+0x1e>
     422:	2900      	cmp	r1, #0
     424:	d105      	bne.n	432 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     426:	4b0b      	ldr	r3, [pc, #44]	; (454 <sercom_set_gclk_generator+0x40>)
     428:	785b      	ldrb	r3, [r3, #1]
     42a:	4283      	cmp	r3, r0
     42c:	d010      	beq.n	450 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     42e:	201d      	movs	r0, #29
     430:	e00c      	b.n	44c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     432:	a901      	add	r1, sp, #4
     434:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     436:	2013      	movs	r0, #19
     438:	4b07      	ldr	r3, [pc, #28]	; (458 <sercom_set_gclk_generator+0x44>)
     43a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     43c:	2013      	movs	r0, #19
     43e:	4b07      	ldr	r3, [pc, #28]	; (45c <sercom_set_gclk_generator+0x48>)
     440:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     442:	4b04      	ldr	r3, [pc, #16]	; (454 <sercom_set_gclk_generator+0x40>)
     444:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     446:	2201      	movs	r2, #1
     448:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     44a:	2000      	movs	r0, #0
}
     44c:	b002      	add	sp, #8
     44e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     450:	2000      	movs	r0, #0
     452:	e7fb      	b.n	44c <sercom_set_gclk_generator+0x38>
     454:	20000060 	.word	0x20000060
     458:	0000169d 	.word	0x0000169d
     45c:	00001615 	.word	0x00001615

00000460 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     460:	4b40      	ldr	r3, [pc, #256]	; (564 <_sercom_get_default_pad+0x104>)
     462:	4298      	cmp	r0, r3
     464:	d031      	beq.n	4ca <_sercom_get_default_pad+0x6a>
     466:	d90a      	bls.n	47e <_sercom_get_default_pad+0x1e>
     468:	4b3f      	ldr	r3, [pc, #252]	; (568 <_sercom_get_default_pad+0x108>)
     46a:	4298      	cmp	r0, r3
     46c:	d04d      	beq.n	50a <_sercom_get_default_pad+0xaa>
     46e:	4b3f      	ldr	r3, [pc, #252]	; (56c <_sercom_get_default_pad+0x10c>)
     470:	4298      	cmp	r0, r3
     472:	d05a      	beq.n	52a <_sercom_get_default_pad+0xca>
     474:	4b3e      	ldr	r3, [pc, #248]	; (570 <_sercom_get_default_pad+0x110>)
     476:	4298      	cmp	r0, r3
     478:	d037      	beq.n	4ea <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     47a:	2000      	movs	r0, #0
}
     47c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     47e:	4b3d      	ldr	r3, [pc, #244]	; (574 <_sercom_get_default_pad+0x114>)
     480:	4298      	cmp	r0, r3
     482:	d00c      	beq.n	49e <_sercom_get_default_pad+0x3e>
     484:	4b3c      	ldr	r3, [pc, #240]	; (578 <_sercom_get_default_pad+0x118>)
     486:	4298      	cmp	r0, r3
     488:	d1f7      	bne.n	47a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     48a:	2901      	cmp	r1, #1
     48c:	d05f      	beq.n	54e <_sercom_get_default_pad+0xee>
     48e:	2900      	cmp	r1, #0
     490:	d015      	beq.n	4be <_sercom_get_default_pad+0x5e>
     492:	2902      	cmp	r1, #2
     494:	d015      	beq.n	4c2 <_sercom_get_default_pad+0x62>
     496:	2903      	cmp	r1, #3
     498:	d015      	beq.n	4c6 <_sercom_get_default_pad+0x66>
	return 0;
     49a:	2000      	movs	r0, #0
     49c:	e7ee      	b.n	47c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     49e:	2901      	cmp	r1, #1
     4a0:	d053      	beq.n	54a <_sercom_get_default_pad+0xea>
     4a2:	2900      	cmp	r1, #0
     4a4:	d005      	beq.n	4b2 <_sercom_get_default_pad+0x52>
     4a6:	2902      	cmp	r1, #2
     4a8:	d005      	beq.n	4b6 <_sercom_get_default_pad+0x56>
     4aa:	2903      	cmp	r1, #3
     4ac:	d005      	beq.n	4ba <_sercom_get_default_pad+0x5a>
	return 0;
     4ae:	2000      	movs	r0, #0
     4b0:	e7e4      	b.n	47c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4b2:	4832      	ldr	r0, [pc, #200]	; (57c <_sercom_get_default_pad+0x11c>)
     4b4:	e7e2      	b.n	47c <_sercom_get_default_pad+0x1c>
     4b6:	4832      	ldr	r0, [pc, #200]	; (580 <_sercom_get_default_pad+0x120>)
     4b8:	e7e0      	b.n	47c <_sercom_get_default_pad+0x1c>
     4ba:	4832      	ldr	r0, [pc, #200]	; (584 <_sercom_get_default_pad+0x124>)
     4bc:	e7de      	b.n	47c <_sercom_get_default_pad+0x1c>
     4be:	2003      	movs	r0, #3
     4c0:	e7dc      	b.n	47c <_sercom_get_default_pad+0x1c>
     4c2:	4831      	ldr	r0, [pc, #196]	; (588 <_sercom_get_default_pad+0x128>)
     4c4:	e7da      	b.n	47c <_sercom_get_default_pad+0x1c>
     4c6:	4831      	ldr	r0, [pc, #196]	; (58c <_sercom_get_default_pad+0x12c>)
     4c8:	e7d8      	b.n	47c <_sercom_get_default_pad+0x1c>
     4ca:	2901      	cmp	r1, #1
     4cc:	d041      	beq.n	552 <_sercom_get_default_pad+0xf2>
     4ce:	2900      	cmp	r1, #0
     4d0:	d005      	beq.n	4de <_sercom_get_default_pad+0x7e>
     4d2:	2902      	cmp	r1, #2
     4d4:	d005      	beq.n	4e2 <_sercom_get_default_pad+0x82>
     4d6:	2903      	cmp	r1, #3
     4d8:	d005      	beq.n	4e6 <_sercom_get_default_pad+0x86>
	return 0;
     4da:	2000      	movs	r0, #0
     4dc:	e7ce      	b.n	47c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4de:	482c      	ldr	r0, [pc, #176]	; (590 <_sercom_get_default_pad+0x130>)
     4e0:	e7cc      	b.n	47c <_sercom_get_default_pad+0x1c>
     4e2:	482c      	ldr	r0, [pc, #176]	; (594 <_sercom_get_default_pad+0x134>)
     4e4:	e7ca      	b.n	47c <_sercom_get_default_pad+0x1c>
     4e6:	482c      	ldr	r0, [pc, #176]	; (598 <_sercom_get_default_pad+0x138>)
     4e8:	e7c8      	b.n	47c <_sercom_get_default_pad+0x1c>
     4ea:	2901      	cmp	r1, #1
     4ec:	d033      	beq.n	556 <_sercom_get_default_pad+0xf6>
     4ee:	2900      	cmp	r1, #0
     4f0:	d005      	beq.n	4fe <_sercom_get_default_pad+0x9e>
     4f2:	2902      	cmp	r1, #2
     4f4:	d005      	beq.n	502 <_sercom_get_default_pad+0xa2>
     4f6:	2903      	cmp	r1, #3
     4f8:	d005      	beq.n	506 <_sercom_get_default_pad+0xa6>
	return 0;
     4fa:	2000      	movs	r0, #0
     4fc:	e7be      	b.n	47c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4fe:	4827      	ldr	r0, [pc, #156]	; (59c <_sercom_get_default_pad+0x13c>)
     500:	e7bc      	b.n	47c <_sercom_get_default_pad+0x1c>
     502:	4827      	ldr	r0, [pc, #156]	; (5a0 <_sercom_get_default_pad+0x140>)
     504:	e7ba      	b.n	47c <_sercom_get_default_pad+0x1c>
     506:	4827      	ldr	r0, [pc, #156]	; (5a4 <_sercom_get_default_pad+0x144>)
     508:	e7b8      	b.n	47c <_sercom_get_default_pad+0x1c>
     50a:	2901      	cmp	r1, #1
     50c:	d025      	beq.n	55a <_sercom_get_default_pad+0xfa>
     50e:	2900      	cmp	r1, #0
     510:	d005      	beq.n	51e <_sercom_get_default_pad+0xbe>
     512:	2902      	cmp	r1, #2
     514:	d005      	beq.n	522 <_sercom_get_default_pad+0xc2>
     516:	2903      	cmp	r1, #3
     518:	d005      	beq.n	526 <_sercom_get_default_pad+0xc6>
	return 0;
     51a:	2000      	movs	r0, #0
     51c:	e7ae      	b.n	47c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     51e:	4822      	ldr	r0, [pc, #136]	; (5a8 <_sercom_get_default_pad+0x148>)
     520:	e7ac      	b.n	47c <_sercom_get_default_pad+0x1c>
     522:	4822      	ldr	r0, [pc, #136]	; (5ac <_sercom_get_default_pad+0x14c>)
     524:	e7aa      	b.n	47c <_sercom_get_default_pad+0x1c>
     526:	4822      	ldr	r0, [pc, #136]	; (5b0 <_sercom_get_default_pad+0x150>)
     528:	e7a8      	b.n	47c <_sercom_get_default_pad+0x1c>
     52a:	2901      	cmp	r1, #1
     52c:	d017      	beq.n	55e <_sercom_get_default_pad+0xfe>
     52e:	2900      	cmp	r1, #0
     530:	d005      	beq.n	53e <_sercom_get_default_pad+0xde>
     532:	2902      	cmp	r1, #2
     534:	d005      	beq.n	542 <_sercom_get_default_pad+0xe2>
     536:	2903      	cmp	r1, #3
     538:	d005      	beq.n	546 <_sercom_get_default_pad+0xe6>
	return 0;
     53a:	2000      	movs	r0, #0
     53c:	e79e      	b.n	47c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     53e:	481d      	ldr	r0, [pc, #116]	; (5b4 <_sercom_get_default_pad+0x154>)
     540:	e79c      	b.n	47c <_sercom_get_default_pad+0x1c>
     542:	481d      	ldr	r0, [pc, #116]	; (5b8 <_sercom_get_default_pad+0x158>)
     544:	e79a      	b.n	47c <_sercom_get_default_pad+0x1c>
     546:	481d      	ldr	r0, [pc, #116]	; (5bc <_sercom_get_default_pad+0x15c>)
     548:	e798      	b.n	47c <_sercom_get_default_pad+0x1c>
     54a:	481d      	ldr	r0, [pc, #116]	; (5c0 <_sercom_get_default_pad+0x160>)
     54c:	e796      	b.n	47c <_sercom_get_default_pad+0x1c>
     54e:	481d      	ldr	r0, [pc, #116]	; (5c4 <_sercom_get_default_pad+0x164>)
     550:	e794      	b.n	47c <_sercom_get_default_pad+0x1c>
     552:	481d      	ldr	r0, [pc, #116]	; (5c8 <_sercom_get_default_pad+0x168>)
     554:	e792      	b.n	47c <_sercom_get_default_pad+0x1c>
     556:	481d      	ldr	r0, [pc, #116]	; (5cc <_sercom_get_default_pad+0x16c>)
     558:	e790      	b.n	47c <_sercom_get_default_pad+0x1c>
     55a:	481d      	ldr	r0, [pc, #116]	; (5d0 <_sercom_get_default_pad+0x170>)
     55c:	e78e      	b.n	47c <_sercom_get_default_pad+0x1c>
     55e:	481d      	ldr	r0, [pc, #116]	; (5d4 <_sercom_get_default_pad+0x174>)
     560:	e78c      	b.n	47c <_sercom_get_default_pad+0x1c>
     562:	46c0      	nop			; (mov r8, r8)
     564:	42001000 	.word	0x42001000
     568:	42001800 	.word	0x42001800
     56c:	42001c00 	.word	0x42001c00
     570:	42001400 	.word	0x42001400
     574:	42000800 	.word	0x42000800
     578:	42000c00 	.word	0x42000c00
     57c:	00040003 	.word	0x00040003
     580:	00060003 	.word	0x00060003
     584:	00070003 	.word	0x00070003
     588:	001e0003 	.word	0x001e0003
     58c:	001f0003 	.word	0x001f0003
     590:	00080003 	.word	0x00080003
     594:	000a0003 	.word	0x000a0003
     598:	000b0003 	.word	0x000b0003
     59c:	00100003 	.word	0x00100003
     5a0:	00120003 	.word	0x00120003
     5a4:	00130003 	.word	0x00130003
     5a8:	000c0003 	.word	0x000c0003
     5ac:	000e0003 	.word	0x000e0003
     5b0:	000f0003 	.word	0x000f0003
     5b4:	00160003 	.word	0x00160003
     5b8:	00180003 	.word	0x00180003
     5bc:	00190003 	.word	0x00190003
     5c0:	00050003 	.word	0x00050003
     5c4:	00010003 	.word	0x00010003
     5c8:	00090003 	.word	0x00090003
     5cc:	00110003 	.word	0x00110003
     5d0:	000d0003 	.word	0x000d0003
     5d4:	00170003 	.word	0x00170003

000005d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     5d8:	b530      	push	{r4, r5, lr}
     5da:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     5dc:	4c0a      	ldr	r4, [pc, #40]	; (608 <_sercom_get_sercom_inst_index+0x30>)
     5de:	466b      	mov	r3, sp
     5e0:	0022      	movs	r2, r4
     5e2:	ca32      	ldmia	r2!, {r1, r4, r5}
     5e4:	c332      	stmia	r3!, {r1, r4, r5}
     5e6:	ca32      	ldmia	r2!, {r1, r4, r5}
     5e8:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5ea:	2300      	movs	r3, #0
     5ec:	2b05      	cmp	r3, #5
     5ee:	d808      	bhi.n	602 <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5f0:	009a      	lsls	r2, r3, #2
     5f2:	4669      	mov	r1, sp
     5f4:	5852      	ldr	r2, [r2, r1]
     5f6:	4282      	cmp	r2, r0
     5f8:	d001      	beq.n	5fe <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5fa:	3301      	adds	r3, #1
     5fc:	e7f6      	b.n	5ec <_sercom_get_sercom_inst_index+0x14>
			return i;
     5fe:	b2d8      	uxtb	r0, r3
     600:	e000      	b.n	604 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     602:	2000      	movs	r0, #0
}
     604:	b007      	add	sp, #28
     606:	bd30      	pop	{r4, r5, pc}
     608:	00001bc0 	.word	0x00001bc0

0000060c <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     60c:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     60e:	79c2      	ldrb	r2, [r0, #7]
     610:	2a00      	cmp	r2, #0
     612:	d101      	bne.n	618 <usart_write_wait+0xc>
		return STATUS_ERR_DENIED;
     614:	201c      	movs	r0, #28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     616:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     618:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     61a:	b292      	uxth	r2, r2
     61c:	2a00      	cmp	r2, #0
     61e:	d001      	beq.n	624 <usart_write_wait+0x18>
		return STATUS_BUSY;
     620:	2005      	movs	r0, #5
     622:	e7f8      	b.n	616 <usart_write_wait+0xa>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     624:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     626:	2a00      	cmp	r2, #0
     628:	d1fc      	bne.n	624 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     62a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     62c:	7e1a      	ldrb	r2, [r3, #24]
     62e:	0792      	lsls	r2, r2, #30
     630:	d5fc      	bpl.n	62c <usart_write_wait+0x20>
	return STATUS_OK;
     632:	2000      	movs	r0, #0
     634:	e7ef      	b.n	616 <usart_write_wait+0xa>
	...

00000638 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	46c6      	mov	lr, r8
     63c:	b500      	push	{lr}
     63e:	0004      	movs	r4, r0
     640:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     642:	2a00      	cmp	r2, #0
     644:	d103      	bne.n	64e <usart_write_buffer_wait+0x16>
		return STATUS_ERR_INVALID_ARG;
     646:	2017      	movs	r0, #23
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     648:	bc04      	pop	{r2}
     64a:	4690      	mov	r8, r2
     64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     64e:	79c3      	ldrb	r3, [r0, #7]
     650:	2b00      	cmp	r3, #0
     652:	d101      	bne.n	658 <usart_write_buffer_wait+0x20>
		return STATUS_ERR_DENIED;
     654:	201c      	movs	r0, #28
     656:	e7f7      	b.n	648 <usart_write_buffer_wait+0x10>
	SercomUsart *const usart_hw = &(module->hw->USART);
     658:	6806      	ldr	r6, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     65a:	69f3      	ldr	r3, [r6, #28]
	while (usart_is_syncing(module)) {
     65c:	2b00      	cmp	r3, #0
     65e:	d1fc      	bne.n	65a <usart_write_buffer_wait+0x22>
     660:	2000      	movs	r0, #0
     662:	e00c      	b.n	67e <usart_write_buffer_wait+0x46>
		uint16_t data_to_send = tx_data[tx_pos++];
     664:	1c43      	adds	r3, r0, #1
     666:	b29b      	uxth	r3, r3
     668:	4698      	mov	r8, r3
     66a:	5c2b      	ldrb	r3, [r5, r0]
     66c:	b299      	uxth	r1, r3
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     66e:	7962      	ldrb	r2, [r4, #5]
     670:	2a01      	cmp	r2, #1
     672:	d014      	beq.n	69e <usart_write_buffer_wait+0x66>
		usart_write_wait(module, data_to_send);
     674:	0020      	movs	r0, r4
     676:	4b18      	ldr	r3, [pc, #96]	; (6d8 <usart_write_buffer_wait+0xa0>)
     678:	4798      	blx	r3
	while (length--) {
     67a:	4640      	mov	r0, r8
     67c:	003a      	movs	r2, r7
     67e:	1e57      	subs	r7, r2, #1
     680:	b2bf      	uxth	r7, r7
     682:	2a00      	cmp	r2, #0
     684:	d013      	beq.n	6ae <usart_write_buffer_wait+0x76>
     686:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     688:	4a14      	ldr	r2, [pc, #80]	; (6dc <usart_write_buffer_wait+0xa4>)
     68a:	4293      	cmp	r3, r2
     68c:	d8ea      	bhi.n	664 <usart_write_buffer_wait+0x2c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     68e:	7e32      	ldrb	r2, [r6, #24]
     690:	07d2      	lsls	r2, r2, #31
     692:	d4e7      	bmi.n	664 <usart_write_buffer_wait+0x2c>
			} else if (i == USART_TIMEOUT) {
     694:	4a11      	ldr	r2, [pc, #68]	; (6dc <usart_write_buffer_wait+0xa4>)
     696:	4293      	cmp	r3, r2
     698:	d019      	beq.n	6ce <usart_write_buffer_wait+0x96>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     69a:	3301      	adds	r3, #1
     69c:	e7f4      	b.n	688 <usart_write_buffer_wait+0x50>
			data_to_send |= (tx_data[tx_pos++] << 8);
     69e:	3002      	adds	r0, #2
     6a0:	4642      	mov	r2, r8
     6a2:	5ca9      	ldrb	r1, [r5, r2]
     6a4:	0209      	lsls	r1, r1, #8
     6a6:	4319      	orrs	r1, r3
     6a8:	b283      	uxth	r3, r0
     6aa:	4698      	mov	r8, r3
     6ac:	e7e2      	b.n	674 <usart_write_buffer_wait+0x3c>
     6ae:	2300      	movs	r3, #0
     6b0:	e000      	b.n	6b4 <usart_write_buffer_wait+0x7c>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     6b2:	3301      	adds	r3, #1
     6b4:	4a09      	ldr	r2, [pc, #36]	; (6dc <usart_write_buffer_wait+0xa4>)
     6b6:	4293      	cmp	r3, r2
     6b8:	d807      	bhi.n	6ca <usart_write_buffer_wait+0x92>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     6ba:	7e32      	ldrb	r2, [r6, #24]
     6bc:	0792      	lsls	r2, r2, #30
     6be:	d408      	bmi.n	6d2 <usart_write_buffer_wait+0x9a>
		} else if (i == USART_TIMEOUT) {
     6c0:	4a06      	ldr	r2, [pc, #24]	; (6dc <usart_write_buffer_wait+0xa4>)
     6c2:	4293      	cmp	r3, r2
     6c4:	d1f5      	bne.n	6b2 <usart_write_buffer_wait+0x7a>
			return STATUS_ERR_TIMEOUT;
     6c6:	2012      	movs	r0, #18
     6c8:	e7be      	b.n	648 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
     6ca:	2000      	movs	r0, #0
     6cc:	e7bc      	b.n	648 <usart_write_buffer_wait+0x10>
				return STATUS_ERR_TIMEOUT;
     6ce:	2012      	movs	r0, #18
     6d0:	e7ba      	b.n	648 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
     6d2:	2000      	movs	r0, #0
     6d4:	e7b8      	b.n	648 <usart_write_buffer_wait+0x10>
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	0000060d 	.word	0x0000060d
     6dc:	0000ffff 	.word	0x0000ffff

000006e0 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6e0:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     6e2:	2202      	movs	r2, #2
     6e4:	761a      	strb	r2, [r3, #24]
}
     6e6:	4770      	bx	lr

000006e8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ea:	b087      	sub	sp, #28
     6ec:	0007      	movs	r7, r0
     6ee:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6f0:	6806      	ldr	r6, [r0, #0]
     6f2:	ab05      	add	r3, sp, #20
     6f4:	2280      	movs	r2, #128	; 0x80
     6f6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6f8:	2200      	movs	r2, #0
     6fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6fc:	2101      	movs	r1, #1
     6fe:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     700:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     702:	782b      	ldrb	r3, [r5, #0]
     704:	2b00      	cmp	r3, #0
     706:	d101      	bne.n	70c <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     708:	ab05      	add	r3, sp, #20
     70a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     70c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     70e:	9301      	str	r3, [sp, #4]
     710:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     712:	9302      	str	r3, [sp, #8]
     714:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     716:	9303      	str	r3, [sp, #12]
     718:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     71a:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     71c:	2400      	movs	r4, #0
     71e:	e006      	b.n	72e <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     720:	0021      	movs	r1, r4
     722:	0030      	movs	r0, r6
     724:	4b3d      	ldr	r3, [pc, #244]	; (81c <_spi_set_config+0x134>)
     726:	4798      	blx	r3
     728:	e008      	b.n	73c <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     72a:	3401      	adds	r4, #1
     72c:	b2e4      	uxtb	r4, r4
     72e:	2c03      	cmp	r4, #3
     730:	d80d      	bhi.n	74e <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     732:	00a3      	lsls	r3, r4, #2
     734:	aa01      	add	r2, sp, #4
     736:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     738:	2800      	cmp	r0, #0
     73a:	d0f1      	beq.n	720 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     73c:	1c43      	adds	r3, r0, #1
     73e:	d0f4      	beq.n	72a <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     740:	a905      	add	r1, sp, #20
     742:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     744:	0c00      	lsrs	r0, r0, #16
     746:	b2c0      	uxtb	r0, r0
     748:	4b35      	ldr	r3, [pc, #212]	; (820 <_spi_set_config+0x138>)
     74a:	4798      	blx	r3
     74c:	e7ed      	b.n	72a <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     74e:	782b      	ldrb	r3, [r5, #0]
     750:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     752:	7c2b      	ldrb	r3, [r5, #16]
     754:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     756:	7cab      	ldrb	r3, [r5, #18]
     758:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     75a:	7d2b      	ldrb	r3, [r5, #20]
     75c:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     75e:	2200      	movs	r2, #0
     760:	466b      	mov	r3, sp
     762:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     764:	782b      	ldrb	r3, [r5, #0]
     766:	2b01      	cmp	r3, #1
     768:	d014      	beq.n	794 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     76a:	782b      	ldrb	r3, [r5, #0]
     76c:	2b00      	cmp	r3, #0
     76e:	d127      	bne.n	7c0 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     770:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     772:	8baa      	ldrh	r2, [r5, #28]
     774:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     776:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     778:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     77a:	7fef      	ldrb	r7, [r5, #31]
     77c:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     77e:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     780:	4320      	orrs	r0, r4
     782:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     784:	2020      	movs	r0, #32
     786:	5c28      	ldrb	r0, [r5, r0]
     788:	2800      	cmp	r0, #0
     78a:	d01b      	beq.n	7c4 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     78c:	2140      	movs	r1, #64	; 0x40
     78e:	4311      	orrs	r1, r2
     790:	b289      	uxth	r1, r1
     792:	e017      	b.n	7c4 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     794:	6838      	ldr	r0, [r7, #0]
     796:	4b23      	ldr	r3, [pc, #140]	; (824 <_spi_set_config+0x13c>)
     798:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     79a:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     79c:	b2c0      	uxtb	r0, r0
     79e:	4b22      	ldr	r3, [pc, #136]	; (828 <_spi_set_config+0x140>)
     7a0:	4798      	blx	r3
     7a2:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     7a4:	466b      	mov	r3, sp
     7a6:	1c9a      	adds	r2, r3, #2
     7a8:	69a8      	ldr	r0, [r5, #24]
     7aa:	4b20      	ldr	r3, [pc, #128]	; (82c <_spi_set_config+0x144>)
     7ac:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     7ae:	2800      	cmp	r0, #0
     7b0:	d001      	beq.n	7b6 <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     7b2:	2017      	movs	r0, #23
     7b4:	e030      	b.n	818 <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     7b6:	466b      	mov	r3, sp
     7b8:	3302      	adds	r3, #2
     7ba:	781b      	ldrb	r3, [r3, #0]
     7bc:	7333      	strb	r3, [r6, #12]
     7be:	e7d4      	b.n	76a <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     7c0:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     7c2:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     7c4:	686a      	ldr	r2, [r5, #4]
     7c6:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     7c8:	68aa      	ldr	r2, [r5, #8]
     7ca:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     7cc:	68ea      	ldr	r2, [r5, #12]
     7ce:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     7d0:	7c2a      	ldrb	r2, [r5, #16]
     7d2:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     7d4:	7c69      	ldrb	r1, [r5, #17]
     7d6:	2900      	cmp	r1, #0
     7d8:	d103      	bne.n	7e2 <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7da:	4915      	ldr	r1, [pc, #84]	; (830 <_spi_set_config+0x148>)
     7dc:	7889      	ldrb	r1, [r1, #2]
     7de:	0789      	lsls	r1, r1, #30
     7e0:	d501      	bpl.n	7e6 <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     7e2:	2180      	movs	r1, #128	; 0x80
     7e4:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     7e6:	7ca9      	ldrb	r1, [r5, #18]
     7e8:	2900      	cmp	r1, #0
     7ea:	d002      	beq.n	7f2 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     7ec:	2180      	movs	r1, #128	; 0x80
     7ee:	0289      	lsls	r1, r1, #10
     7f0:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     7f2:	7ce9      	ldrb	r1, [r5, #19]
     7f4:	2900      	cmp	r1, #0
     7f6:	d002      	beq.n	7fe <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     7f8:	2180      	movs	r1, #128	; 0x80
     7fa:	0089      	lsls	r1, r1, #2
     7fc:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     7fe:	7d29      	ldrb	r1, [r5, #20]
     800:	2900      	cmp	r1, #0
     802:	d002      	beq.n	80a <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     804:	2180      	movs	r1, #128	; 0x80
     806:	0189      	lsls	r1, r1, #6
     808:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     80a:	6831      	ldr	r1, [r6, #0]
     80c:	430b      	orrs	r3, r1
     80e:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     810:	6873      	ldr	r3, [r6, #4]
     812:	431a      	orrs	r2, r3
     814:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     816:	2000      	movs	r0, #0
}
     818:	b007      	add	sp, #28
     81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     81c:	00000461 	.word	0x00000461
     820:	00001781 	.word	0x00001781
     824:	000005d9 	.word	0x000005d9
     828:	000016b9 	.word	0x000016b9
     82c:	000003e9 	.word	0x000003e9
     830:	41002000 	.word	0x41002000

00000834 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     834:	b5f0      	push	{r4, r5, r6, r7, lr}
     836:	b085      	sub	sp, #20
     838:	0005      	movs	r5, r0
     83a:	000c      	movs	r4, r1
     83c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     83e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     840:	680b      	ldr	r3, [r1, #0]
     842:	079b      	lsls	r3, r3, #30
     844:	d502      	bpl.n	84c <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     846:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     848:	b005      	add	sp, #20
     84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     84c:	680b      	ldr	r3, [r1, #0]
     84e:	07db      	lsls	r3, r3, #31
     850:	d501      	bpl.n	856 <spi_init+0x22>
		return STATUS_BUSY;
     852:	2005      	movs	r0, #5
     854:	e7f8      	b.n	848 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     856:	0008      	movs	r0, r1
     858:	4b28      	ldr	r3, [pc, #160]	; (8fc <spi_init+0xc8>)
     85a:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     85c:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     85e:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     860:	2301      	movs	r3, #1
     862:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     864:	4a26      	ldr	r2, [pc, #152]	; (900 <spi_init+0xcc>)
     866:	6a11      	ldr	r1, [r2, #32]
     868:	430b      	orrs	r3, r1
     86a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     86c:	2724      	movs	r7, #36	; 0x24
     86e:	5df3      	ldrb	r3, [r6, r7]
     870:	a903      	add	r1, sp, #12
     872:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     874:	b2c3      	uxtb	r3, r0
     876:	9301      	str	r3, [sp, #4]
     878:	0018      	movs	r0, r3
     87a:	4b22      	ldr	r3, [pc, #136]	; (904 <spi_init+0xd0>)
     87c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     87e:	9801      	ldr	r0, [sp, #4]
     880:	4b21      	ldr	r3, [pc, #132]	; (908 <spi_init+0xd4>)
     882:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     884:	5df0      	ldrb	r0, [r6, r7]
     886:	2100      	movs	r1, #0
     888:	4b20      	ldr	r3, [pc, #128]	; (90c <spi_init+0xd8>)
     88a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     88c:	7833      	ldrb	r3, [r6, #0]
     88e:	2b01      	cmp	r3, #1
     890:	d008      	beq.n	8a4 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     892:	7833      	ldrb	r3, [r6, #0]
     894:	2b00      	cmp	r3, #0
     896:	d103      	bne.n	8a0 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     898:	6823      	ldr	r3, [r4, #0]
     89a:	2208      	movs	r2, #8
     89c:	4313      	orrs	r3, r2
     89e:	6023      	str	r3, [r4, #0]
{
     8a0:	2300      	movs	r3, #0
     8a2:	e00b      	b.n	8bc <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     8a4:	6823      	ldr	r3, [r4, #0]
     8a6:	220c      	movs	r2, #12
     8a8:	4313      	orrs	r3, r2
     8aa:	6023      	str	r3, [r4, #0]
     8ac:	e7f1      	b.n	892 <spi_init+0x5e>
		module->callback[i]        = NULL;
     8ae:	1c9a      	adds	r2, r3, #2
     8b0:	0092      	lsls	r2, r2, #2
     8b2:	18aa      	adds	r2, r5, r2
     8b4:	2100      	movs	r1, #0
     8b6:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     8b8:	3301      	adds	r3, #1
     8ba:	b2db      	uxtb	r3, r3
     8bc:	2b06      	cmp	r3, #6
     8be:	d9f6      	bls.n	8ae <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     8c0:	2200      	movs	r2, #0
     8c2:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     8c4:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     8c6:	2300      	movs	r3, #0
     8c8:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     8ca:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     8cc:	3236      	adds	r2, #54	; 0x36
     8ce:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     8d0:	3201      	adds	r2, #1
     8d2:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     8d4:	3201      	adds	r2, #1
     8d6:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     8d8:	3a35      	subs	r2, #53	; 0x35
     8da:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     8dc:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     8de:	6828      	ldr	r0, [r5, #0]
     8e0:	4b06      	ldr	r3, [pc, #24]	; (8fc <spi_init+0xc8>)
     8e2:	4798      	blx	r3
     8e4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     8e6:	490a      	ldr	r1, [pc, #40]	; (910 <spi_init+0xdc>)
     8e8:	4b0a      	ldr	r3, [pc, #40]	; (914 <spi_init+0xe0>)
     8ea:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     8ec:	00a4      	lsls	r4, r4, #2
     8ee:	4b0a      	ldr	r3, [pc, #40]	; (918 <spi_init+0xe4>)
     8f0:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     8f2:	0031      	movs	r1, r6
     8f4:	0028      	movs	r0, r5
     8f6:	4b09      	ldr	r3, [pc, #36]	; (91c <spi_init+0xe8>)
     8f8:	4798      	blx	r3
     8fa:	e7a5      	b.n	848 <spi_init+0x14>
     8fc:	000005d9 	.word	0x000005d9
     900:	40000400 	.word	0x40000400
     904:	0000169d 	.word	0x0000169d
     908:	00001615 	.word	0x00001615
     90c:	00000415 	.word	0x00000415
     910:	00000ef9 	.word	0x00000ef9
     914:	000010c5 	.word	0x000010c5
     918:	200000e0 	.word	0x200000e0
     91c:	000006e9 	.word	0x000006e9

00000920 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     920:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     922:	7943      	ldrb	r3, [r0, #5]
     924:	2b01      	cmp	r3, #1
     926:	d001      	beq.n	92c <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     928:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     92a:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     92c:	7a03      	ldrb	r3, [r0, #8]
     92e:	2b00      	cmp	r3, #0
     930:	d16c      	bne.n	a0c <spi_select_slave+0xec>
		if (select) {
     932:	2a00      	cmp	r2, #0
     934:	d058      	beq.n	9e8 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     936:	784b      	ldrb	r3, [r1, #1]
     938:	2b00      	cmp	r3, #0
     93a:	d043      	beq.n	9c4 <spi_select_slave+0xa4>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     93c:	6803      	ldr	r3, [r0, #0]
     93e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     940:	07db      	lsls	r3, r3, #31
     942:	d411      	bmi.n	968 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     944:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     946:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     948:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     94a:	2900      	cmp	r1, #0
     94c:	d10a      	bne.n	964 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     94e:	01db      	lsls	r3, r3, #7
     950:	4931      	ldr	r1, [pc, #196]	; (a18 <spi_select_slave+0xf8>)
     952:	468c      	mov	ip, r1
     954:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     956:	211f      	movs	r1, #31
     958:	4011      	ands	r1, r2
     95a:	2201      	movs	r2, #1
     95c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     95e:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     960:	2005      	movs	r0, #5
     962:	e7e2      	b.n	92a <spi_select_slave+0xa>
		return NULL;
     964:	2300      	movs	r3, #0
     966:	e7f6      	b.n	956 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     968:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     96a:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     96c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     96e:	2c00      	cmp	r4, #0
     970:	d104      	bne.n	97c <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     972:	01db      	lsls	r3, r3, #7
     974:	4c28      	ldr	r4, [pc, #160]	; (a18 <spi_select_slave+0xf8>)
     976:	46a4      	mov	ip, r4
     978:	4463      	add	r3, ip
     97a:	e000      	b.n	97e <spi_select_slave+0x5e>
		return NULL;
     97c:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     97e:	241f      	movs	r4, #31
     980:	4014      	ands	r4, r2
     982:	2201      	movs	r2, #1
     984:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
     986:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     988:	788a      	ldrb	r2, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     98a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     98c:	7e19      	ldrb	r1, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     98e:	07c9      	lsls	r1, r1, #31
     990:	d500      	bpl.n	994 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     992:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     994:	79c3      	ldrb	r3, [r0, #7]
     996:	2b00      	cmp	r3, #0
     998:	d13a      	bne.n	a10 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     99a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     99c:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     99e:	0752      	lsls	r2, r2, #29
     9a0:	d5fb      	bpl.n	99a <spi_select_slave+0x7a>
     9a2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     9a4:	0752      	lsls	r2, r2, #29
     9a6:	d535      	bpl.n	a14 <spi_select_slave+0xf4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     9a8:	8b5a      	ldrh	r2, [r3, #26]
     9aa:	0752      	lsls	r2, r2, #29
     9ac:	d501      	bpl.n	9b2 <spi_select_slave+0x92>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     9ae:	2204      	movs	r2, #4
     9b0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     9b2:	7982      	ldrb	r2, [r0, #6]
     9b4:	2a01      	cmp	r2, #1
     9b6:	d002      	beq.n	9be <spi_select_slave+0x9e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     9ba:	2000      	movs	r0, #0
     9bc:	e7b5      	b.n	92a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     9c0:	2000      	movs	r0, #0
     9c2:	e7b2      	b.n	92a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     9c4:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     9c6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     9c8:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     9ca:	2900      	cmp	r1, #0
     9cc:	d10a      	bne.n	9e4 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     9ce:	01db      	lsls	r3, r3, #7
     9d0:	4911      	ldr	r1, [pc, #68]	; (a18 <spi_select_slave+0xf8>)
     9d2:	468c      	mov	ip, r1
     9d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9d6:	211f      	movs	r1, #31
     9d8:	4011      	ands	r1, r2
     9da:	2201      	movs	r2, #1
     9dc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     9de:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     9e0:	2000      	movs	r0, #0
     9e2:	e7a2      	b.n	92a <spi_select_slave+0xa>
		return NULL;
     9e4:	2300      	movs	r3, #0
     9e6:	e7f6      	b.n	9d6 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     9e8:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     9ea:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     9ec:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     9ee:	2900      	cmp	r1, #0
     9f0:	d10a      	bne.n	a08 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     9f2:	01db      	lsls	r3, r3, #7
     9f4:	4908      	ldr	r1, [pc, #32]	; (a18 <spi_select_slave+0xf8>)
     9f6:	468c      	mov	ip, r1
     9f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9fa:	211f      	movs	r1, #31
     9fc:	4011      	ands	r1, r2
     9fe:	2201      	movs	r2, #1
     a00:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     a02:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     a04:	2000      	movs	r0, #0
     a06:	e790      	b.n	92a <spi_select_slave+0xa>
		return NULL;
     a08:	2300      	movs	r3, #0
     a0a:	e7f6      	b.n	9fa <spi_select_slave+0xda>
     a0c:	2000      	movs	r0, #0
     a0e:	e78c      	b.n	92a <spi_select_slave+0xa>
     a10:	2000      	movs	r0, #0
     a12:	e78a      	b.n	92a <spi_select_slave+0xa>
     a14:	2000      	movs	r0, #0
     a16:	e788      	b.n	92a <spi_select_slave+0xa>
     a18:	41004400 	.word	0x41004400

00000a1c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a1e:	46d6      	mov	lr, sl
     a20:	464f      	mov	r7, r9
     a22:	4646      	mov	r6, r8
     a24:	b5c0      	push	{r6, r7, lr}
     a26:	b082      	sub	sp, #8
     a28:	0004      	movs	r4, r0
     a2a:	468a      	mov	sl, r1
     a2c:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     a2e:	2338      	movs	r3, #56	; 0x38
     a30:	5cc3      	ldrb	r3, [r0, r3]
     a32:	2b05      	cmp	r3, #5
     a34:	d100      	bne.n	a38 <spi_write_buffer_wait+0x1c>
     a36:	e0d8      	b.n	bea <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     a38:	2a00      	cmp	r2, #0
     a3a:	d101      	bne.n	a40 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     a3c:	2017      	movs	r0, #23
     a3e:	e0d5      	b.n	bec <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     a40:	7943      	ldrb	r3, [r0, #5]
     a42:	2b00      	cmp	r3, #0
     a44:	d103      	bne.n	a4e <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     a46:	6803      	ldr	r3, [r0, #0]
     a48:	7e1b      	ldrb	r3, [r3, #24]
     a4a:	079b      	lsls	r3, r3, #30
     a4c:	d402      	bmi.n	a54 <spi_write_buffer_wait+0x38>
     a4e:	46bc      	mov	ip, r7
     a50:	2600      	movs	r6, #0
     a52:	e025      	b.n	aa0 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     a54:	4b6a      	ldr	r3, [pc, #424]	; (c00 <spi_write_buffer_wait+0x1e4>)
     a56:	4798      	blx	r3
     a58:	e7f9      	b.n	a4e <spi_write_buffer_wait+0x32>
     a5a:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     a5c:	4a69      	ldr	r2, [pc, #420]	; (c04 <spi_write_buffer_wait+0x1e8>)
     a5e:	4293      	cmp	r3, r2
     a60:	d805      	bhi.n	a6e <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     a62:	6822      	ldr	r2, [r4, #0]
     a64:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     a66:	07d2      	lsls	r2, r2, #31
     a68:	d401      	bmi.n	a6e <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     a6a:	3301      	adds	r3, #1
     a6c:	e7f6      	b.n	a5c <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     a6e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     a70:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     a72:	0792      	lsls	r2, r2, #30
     a74:	d404      	bmi.n	a80 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     a76:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     a78:	07db      	lsls	r3, r3, #31
     a7a:	d418      	bmi.n	aae <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     a7c:	2012      	movs	r0, #18
     a7e:	e0b5      	b.n	bec <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     a80:	0020      	movs	r0, r4
     a82:	4b5f      	ldr	r3, [pc, #380]	; (c00 <spi_write_buffer_wait+0x1e4>)
     a84:	4798      	blx	r3
				return STATUS_ABORTED;
     a86:	2004      	movs	r0, #4
     a88:	e0b0      	b.n	bec <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     a8a:	3602      	adds	r6, #2
     a8c:	b2b6      	uxth	r6, r6
     a8e:	4652      	mov	r2, sl
     a90:	5dd2      	ldrb	r2, [r2, r7]
     a92:	0212      	lsls	r2, r2, #8
     a94:	4302      	orrs	r2, r0
     a96:	e017      	b.n	ac8 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     a98:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     a9a:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     a9c:	2b00      	cmp	r3, #0
     a9e:	d11a      	bne.n	ad6 <spi_write_buffer_wait+0xba>
	while (length--) {
     aa0:	1e79      	subs	r1, r7, #1
     aa2:	b289      	uxth	r1, r1
     aa4:	2f00      	cmp	r7, #0
     aa6:	d06c      	beq.n	b82 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     aa8:	7963      	ldrb	r3, [r4, #5]
     aaa:	2b00      	cmp	r3, #0
     aac:	d0d5      	beq.n	a5a <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     aae:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ab0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     ab2:	07d2      	lsls	r2, r2, #31
     ab4:	d5fb      	bpl.n	aae <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     ab6:	1c77      	adds	r7, r6, #1
     ab8:	b2bf      	uxth	r7, r7
     aba:	4652      	mov	r2, sl
     abc:	5d90      	ldrb	r0, [r2, r6]
     abe:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ac0:	79a5      	ldrb	r5, [r4, #6]
     ac2:	2d01      	cmp	r5, #1
     ac4:	d0e1      	beq.n	a8a <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     ac6:	003e      	movs	r6, r7
     ac8:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     aca:	07f8      	lsls	r0, r7, #31
     acc:	d5e4      	bpl.n	a98 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ace:	05d2      	lsls	r2, r2, #23
     ad0:	0dd2      	lsrs	r2, r2, #23
     ad2:	629a      	str	r2, [r3, #40]	; 0x28
     ad4:	e7e0      	b.n	a98 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     ad6:	7963      	ldrb	r3, [r4, #5]
     ad8:	2b00      	cmp	r3, #0
     ada:	d040      	beq.n	b5e <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     adc:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ade:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     ae0:	0752      	lsls	r2, r2, #29
     ae2:	d5fb      	bpl.n	adc <spi_write_buffer_wait+0xc0>
     ae4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     ae6:	0752      	lsls	r2, r2, #29
     ae8:	d508      	bpl.n	afc <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     aea:	8b5a      	ldrh	r2, [r3, #26]
     aec:	0752      	lsls	r2, r2, #29
     aee:	d501      	bpl.n	af4 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     af0:	2204      	movs	r2, #4
     af2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     af4:	79a2      	ldrb	r2, [r4, #6]
     af6:	2a01      	cmp	r2, #1
     af8:	d041      	beq.n	b7e <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     afc:	4660      	mov	r0, ip
     afe:	3801      	subs	r0, #1
     b00:	b283      	uxth	r3, r0
     b02:	469c      	mov	ip, r3
     b04:	000f      	movs	r7, r1
     b06:	e7cb      	b.n	aa0 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
     b08:	3602      	adds	r6, #2
     b0a:	4655      	mov	r5, sl
     b0c:	5c2f      	ldrb	r7, [r5, r0]
     b0e:	023f      	lsls	r7, r7, #8
     b10:	4640      	mov	r0, r8
     b12:	4307      	orrs	r7, r0
     b14:	b2b0      	uxth	r0, r6
     b16:	e01b      	b.n	b50 <spi_write_buffer_wait+0x134>
						length--;
     b18:	3901      	subs	r1, #1
     b1a:	b289      	uxth	r1, r1
     b1c:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     b1e:	6822      	ldr	r2, [r4, #0]
     b20:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     b22:	0752      	lsls	r2, r2, #29
     b24:	d41d      	bmi.n	b62 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     b26:	3301      	adds	r3, #1
     b28:	4a36      	ldr	r2, [pc, #216]	; (c04 <spi_write_buffer_wait+0x1e8>)
     b2a:	4293      	cmp	r3, r2
     b2c:	d819      	bhi.n	b62 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
     b2e:	2900      	cmp	r1, #0
     b30:	d0f5      	beq.n	b1e <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
     b32:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     b34:	7e17      	ldrb	r7, [r2, #24]
     b36:	07f8      	lsls	r0, r7, #31
     b38:	d5f1      	bpl.n	b1e <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
     b3a:	1c70      	adds	r0, r6, #1
     b3c:	b280      	uxth	r0, r0
     b3e:	4655      	mov	r5, sl
     b40:	5dad      	ldrb	r5, [r5, r6]
     b42:	46a8      	mov	r8, r5
     b44:	466f      	mov	r7, sp
     b46:	80fd      	strh	r5, [r7, #6]
     b48:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     b4a:	79a5      	ldrb	r5, [r4, #6]
     b4c:	2d01      	cmp	r5, #1
     b4e:	d0db      	beq.n	b08 <spi_write_buffer_wait+0xec>
     b50:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     b52:	07f5      	lsls	r5, r6, #31
     b54:	d5e0      	bpl.n	b18 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     b56:	05ff      	lsls	r7, r7, #23
     b58:	0dff      	lsrs	r7, r7, #23
     b5a:	6297      	str	r7, [r2, #40]	; 0x28
     b5c:	e7dc      	b.n	b18 <spi_write_buffer_wait+0xfc>
     b5e:	2300      	movs	r3, #0
     b60:	e7e2      	b.n	b28 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     b62:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     b64:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
     b66:	0792      	lsls	r2, r2, #30
     b68:	d404      	bmi.n	b74 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     b6a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     b6c:	075b      	lsls	r3, r3, #29
     b6e:	d4b5      	bmi.n	adc <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
     b70:	2012      	movs	r0, #18
     b72:	e03b      	b.n	bec <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
     b74:	0020      	movs	r0, r4
     b76:	4b22      	ldr	r3, [pc, #136]	; (c00 <spi_write_buffer_wait+0x1e4>)
     b78:	4798      	blx	r3
					return STATUS_ABORTED;
     b7a:	2004      	movs	r0, #4
     b7c:	e036      	b.n	bec <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b80:	e7bc      	b.n	afc <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     b82:	7962      	ldrb	r2, [r4, #5]
     b84:	2a01      	cmp	r2, #1
     b86:	d006      	beq.n	b96 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     b88:	2a00      	cmp	r2, #0
     b8a:	d135      	bne.n	bf8 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
     b8c:	79e3      	ldrb	r3, [r4, #7]
     b8e:	2b00      	cmp	r3, #0
     b90:	d11a      	bne.n	bc8 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     b92:	2000      	movs	r0, #0
     b94:	e02a      	b.n	bec <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     b96:	6823      	ldr	r3, [r4, #0]
     b98:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
     b9a:	079b      	lsls	r3, r3, #30
     b9c:	d5fb      	bpl.n	b96 <spi_write_buffer_wait+0x17a>
     b9e:	e7f3      	b.n	b88 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ba0:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ba2:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     ba4:	0752      	lsls	r2, r2, #29
     ba6:	d529      	bpl.n	bfc <spi_write_buffer_wait+0x1e0>
     ba8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     baa:	0752      	lsls	r2, r2, #29
     bac:	d508      	bpl.n	bc0 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     bae:	8b5a      	ldrh	r2, [r3, #26]
     bb0:	0752      	lsls	r2, r2, #29
     bb2:	d501      	bpl.n	bb8 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     bb4:	2204      	movs	r2, #4
     bb6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     bb8:	79a2      	ldrb	r2, [r4, #6]
     bba:	2a01      	cmp	r2, #1
     bbc:	d011      	beq.n	be2 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
     bc0:	4660      	mov	r0, ip
     bc2:	3801      	subs	r0, #1
     bc4:	b283      	uxth	r3, r0
     bc6:	469c      	mov	ip, r3
			while (flush_length) {
     bc8:	4663      	mov	r3, ip
     bca:	2b00      	cmp	r3, #0
     bcc:	d00b      	beq.n	be6 <spi_write_buffer_wait+0x1ca>
     bce:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     bd0:	4a0c      	ldr	r2, [pc, #48]	; (c04 <spi_write_buffer_wait+0x1e8>)
     bd2:	4293      	cmp	r3, r2
     bd4:	d8e4      	bhi.n	ba0 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     bd6:	6822      	ldr	r2, [r4, #0]
     bd8:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     bda:	0752      	lsls	r2, r2, #29
     bdc:	d4e0      	bmi.n	ba0 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     bde:	3301      	adds	r3, #1
     be0:	e7f6      	b.n	bd0 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     be4:	e7ec      	b.n	bc0 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
     be6:	2000      	movs	r0, #0
     be8:	e000      	b.n	bec <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
     bea:	2005      	movs	r0, #5
}
     bec:	b002      	add	sp, #8
     bee:	bc1c      	pop	{r2, r3, r4}
     bf0:	4690      	mov	r8, r2
     bf2:	4699      	mov	r9, r3
     bf4:	46a2      	mov	sl, r4
     bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
     bf8:	2000      	movs	r0, #0
     bfa:	e7f7      	b.n	bec <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
     bfc:	2012      	movs	r0, #18
     bfe:	e7f5      	b.n	bec <spi_write_buffer_wait+0x1d0>
     c00:	000006e1 	.word	0x000006e1
     c04:	00002710 	.word	0x00002710

00000c08 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     c08:	b5f0      	push	{r4, r5, r6, r7, lr}
     c0a:	46de      	mov	lr, fp
     c0c:	4657      	mov	r7, sl
     c0e:	464e      	mov	r6, r9
     c10:	4645      	mov	r5, r8
     c12:	b5e0      	push	{r5, r6, r7, lr}
     c14:	b085      	sub	sp, #20
     c16:	0004      	movs	r4, r0
     c18:	9101      	str	r1, [sp, #4]
     c1a:	9203      	str	r2, [sp, #12]
     c1c:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     c1e:	2338      	movs	r3, #56	; 0x38
     c20:	5cc3      	ldrb	r3, [r0, r3]
     c22:	2b05      	cmp	r3, #5
     c24:	d100      	bne.n	c28 <spi_transceive_buffer_wait+0x20>
     c26:	e112      	b.n	e4e <spi_transceive_buffer_wait+0x246>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     c28:	2e00      	cmp	r6, #0
     c2a:	d101      	bne.n	c30 <spi_transceive_buffer_wait+0x28>
		return STATUS_ERR_INVALID_ARG;
     c2c:	2217      	movs	r2, #23
     c2e:	e10f      	b.n	e50 <spi_transceive_buffer_wait+0x248>
	}

	if (!(module->receiver_enabled)) {
     c30:	79c3      	ldrb	r3, [r0, #7]
     c32:	2b00      	cmp	r3, #0
     c34:	d101      	bne.n	c3a <spi_transceive_buffer_wait+0x32>
		return STATUS_ERR_DENIED;
     c36:	221c      	movs	r2, #28
     c38:	e10a      	b.n	e50 <spi_transceive_buffer_wait+0x248>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     c3a:	7943      	ldrb	r3, [r0, #5]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d103      	bne.n	c48 <spi_transceive_buffer_wait+0x40>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     c40:	6803      	ldr	r3, [r0, #0]
     c42:	7e1b      	ldrb	r3, [r3, #24]
     c44:	079b      	lsls	r3, r3, #30
     c46:	d404      	bmi.n	c52 <spi_transceive_buffer_wait+0x4a>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     c48:	46b4      	mov	ip, r6
     c4a:	2300      	movs	r3, #0
     c4c:	4698      	mov	r8, r3
     c4e:	2100      	movs	r1, #0
     c50:	e075      	b.n	d3e <spi_transceive_buffer_wait+0x136>
		_spi_clear_tx_complete_flag(module);
     c52:	4b84      	ldr	r3, [pc, #528]	; (e64 <spi_transceive_buffer_wait+0x25c>)
     c54:	4798      	blx	r3
     c56:	e7f7      	b.n	c48 <spi_transceive_buffer_wait+0x40>
     c58:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     c5a:	4a83      	ldr	r2, [pc, #524]	; (e68 <spi_transceive_buffer_wait+0x260>)
     c5c:	4293      	cmp	r3, r2
     c5e:	d805      	bhi.n	c6c <spi_transceive_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c60:	6822      	ldr	r2, [r4, #0]
     c62:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     c64:	07d2      	lsls	r2, r2, #31
     c66:	d401      	bmi.n	c6c <spi_transceive_buffer_wait+0x64>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     c68:	3301      	adds	r3, #1
     c6a:	e7f6      	b.n	c5a <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     c6c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     c6e:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     c70:	0792      	lsls	r2, r2, #30
     c72:	d404      	bmi.n	c7e <spi_transceive_buffer_wait+0x76>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c74:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
     c76:	07db      	lsls	r3, r3, #31
     c78:	d468      	bmi.n	d4c <spi_transceive_buffer_wait+0x144>
				return STATUS_ERR_TIMEOUT;
     c7a:	2212      	movs	r2, #18
     c7c:	e0e8      	b.n	e50 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
     c7e:	0020      	movs	r0, r4
     c80:	4b78      	ldr	r3, [pc, #480]	; (e64 <spi_transceive_buffer_wait+0x25c>)
     c82:	4798      	blx	r3
				return STATUS_ABORTED;
     c84:	2204      	movs	r2, #4
     c86:	e0e3      	b.n	e50 <spi_transceive_buffer_wait+0x248>
			data_to_send |= (tx_data[tx_pos++] << 8);
     c88:	3102      	adds	r1, #2
     c8a:	9a01      	ldr	r2, [sp, #4]
     c8c:	5d92      	ldrb	r2, [r2, r6]
     c8e:	0212      	lsls	r2, r2, #8
     c90:	4650      	mov	r0, sl
     c92:	4302      	orrs	r2, r0
     c94:	b28e      	uxth	r6, r1
     c96:	e068      	b.n	d6a <spi_transceive_buffer_wait+0x162>
						data_to_send |= (tx_data[tx_pos++] << 8);
     c98:	3602      	adds	r6, #2
     c9a:	9901      	ldr	r1, [sp, #4]
     c9c:	5c09      	ldrb	r1, [r1, r0]
     c9e:	0209      	lsls	r1, r1, #8
     ca0:	4650      	mov	r0, sl
     ca2:	4301      	orrs	r1, r0
     ca4:	4689      	mov	r9, r1
     ca6:	b2b0      	uxth	r0, r6
     ca8:	e01a      	b.n	ce0 <spi_transceive_buffer_wait+0xd8>
					length--;
     caa:	3f01      	subs	r7, #1
     cac:	b2bf      	uxth	r7, r7
     cae:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cb0:	6822      	ldr	r2, [r4, #0]
     cb2:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     cb4:	0752      	lsls	r2, r2, #29
     cb6:	d41d      	bmi.n	cf4 <spi_transceive_buffer_wait+0xec>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     cb8:	3301      	adds	r3, #1
     cba:	4a6b      	ldr	r2, [pc, #428]	; (e68 <spi_transceive_buffer_wait+0x260>)
     cbc:	4293      	cmp	r3, r2
     cbe:	d819      	bhi.n	cf4 <spi_transceive_buffer_wait+0xec>
	SercomSpi *const spi_module = &(module->hw->SPI);
     cc0:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     cc2:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     cc4:	07c9      	lsls	r1, r1, #31
     cc6:	d5f3      	bpl.n	cb0 <spi_transceive_buffer_wait+0xa8>
					data_to_send = tx_data[tx_pos++];
     cc8:	1c70      	adds	r0, r6, #1
     cca:	b280      	uxth	r0, r0
     ccc:	9901      	ldr	r1, [sp, #4]
     cce:	5d89      	ldrb	r1, [r1, r6]
     cd0:	468a      	mov	sl, r1
     cd2:	ad02      	add	r5, sp, #8
     cd4:	8069      	strh	r1, [r5, #2]
     cd6:	8869      	ldrh	r1, [r5, #2]
     cd8:	4689      	mov	r9, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cda:	79a1      	ldrb	r1, [r4, #6]
     cdc:	2901      	cmp	r1, #1
     cde:	d0db      	beq.n	c98 <spi_transceive_buffer_wait+0x90>
     ce0:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     ce2:	07f1      	lsls	r1, r6, #31
     ce4:	d5e1      	bpl.n	caa <spi_transceive_buffer_wait+0xa2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ce6:	4649      	mov	r1, r9
     ce8:	05c9      	lsls	r1, r1, #23
     cea:	0dc9      	lsrs	r1, r1, #23
     cec:	6291      	str	r1, [r2, #40]	; 0x28
     cee:	e7dc      	b.n	caa <spi_transceive_buffer_wait+0xa2>
     cf0:	2300      	movs	r3, #0
     cf2:	e7e2      	b.n	cba <spi_transceive_buffer_wait+0xb2>
	SercomSpi *const spi_module = &(module->hw->SPI);
     cf4:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cf6:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     cf8:	0792      	lsls	r2, r2, #30
     cfa:	d404      	bmi.n	d06 <spi_transceive_buffer_wait+0xfe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cfc:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     cfe:	075b      	lsls	r3, r3, #29
     d00:	d43c      	bmi.n	d7c <spi_transceive_buffer_wait+0x174>
				return STATUS_ERR_TIMEOUT;
     d02:	2212      	movs	r2, #18
     d04:	e0a4      	b.n	e50 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
     d06:	0020      	movs	r0, r4
     d08:	4b56      	ldr	r3, [pc, #344]	; (e64 <spi_transceive_buffer_wait+0x25c>)
     d0a:	4798      	blx	r3
				return STATUS_ABORTED;
     d0c:	2204      	movs	r2, #4
     d0e:	e09f      	b.n	e50 <spi_transceive_buffer_wait+0x248>
	enum status_code retval = STATUS_OK;
     d10:	2200      	movs	r2, #0
     d12:	e044      	b.n	d9e <spi_transceive_buffer_wait+0x196>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d14:	6a99      	ldr	r1, [r3, #40]	; 0x28
     d16:	05c9      	lsls	r1, r1, #23
     d18:	0dc9      	lsrs	r1, r1, #23
     d1a:	e001      	b.n	d20 <spi_transceive_buffer_wait+0x118>
		uint16_t received_data = 0;
     d1c:	2100      	movs	r1, #0
		return STATUS_ERR_IO;
     d1e:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     d20:	2a00      	cmp	r2, #0
     d22:	d000      	beq.n	d26 <spi_transceive_buffer_wait+0x11e>
     d24:	e094      	b.n	e50 <spi_transceive_buffer_wait+0x248>
		rx_data[rx_pos++] = received_data;
     d26:	4643      	mov	r3, r8
     d28:	3301      	adds	r3, #1
     d2a:	b29b      	uxth	r3, r3
     d2c:	9a03      	ldr	r2, [sp, #12]
     d2e:	4640      	mov	r0, r8
     d30:	5411      	strb	r1, [r2, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d32:	79a2      	ldrb	r2, [r4, #6]
     d34:	2a01      	cmp	r2, #1
     d36:	d038      	beq.n	daa <spi_transceive_buffer_wait+0x1a2>
			rx_data[rx_pos++] = (received_data >> 8);
     d38:	4698      	mov	r8, r3
     d3a:	0031      	movs	r1, r6
     d3c:	003e      	movs	r6, r7
	while (length--) {
     d3e:	1e77      	subs	r7, r6, #1
     d40:	b2bf      	uxth	r7, r7
     d42:	2e00      	cmp	r6, #0
     d44:	d037      	beq.n	db6 <spi_transceive_buffer_wait+0x1ae>
		if (module->mode == SPI_MODE_SLAVE) {
     d46:	7963      	ldrb	r3, [r4, #5]
     d48:	2b00      	cmp	r3, #0
     d4a:	d085      	beq.n	c58 <spi_transceive_buffer_wait+0x50>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d4c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d4e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     d50:	07d2      	lsls	r2, r2, #31
     d52:	d5fb      	bpl.n	d4c <spi_transceive_buffer_wait+0x144>
		uint16_t data_to_send = tx_data[tx_pos++];
     d54:	1c4e      	adds	r6, r1, #1
     d56:	b2b6      	uxth	r6, r6
     d58:	9a01      	ldr	r2, [sp, #4]
     d5a:	5c52      	ldrb	r2, [r2, r1]
     d5c:	4692      	mov	sl, r2
     d5e:	a802      	add	r0, sp, #8
     d60:	8042      	strh	r2, [r0, #2]
     d62:	8842      	ldrh	r2, [r0, #2]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d64:	79a0      	ldrb	r0, [r4, #6]
     d66:	2801      	cmp	r0, #1
     d68:	d08e      	beq.n	c88 <spi_transceive_buffer_wait+0x80>
     d6a:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     d6c:	07c9      	lsls	r1, r1, #31
     d6e:	d502      	bpl.n	d76 <spi_transceive_buffer_wait+0x16e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d70:	05d2      	lsls	r2, r2, #23
     d72:	0dd2      	lsrs	r2, r2, #23
     d74:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
     d76:	7963      	ldrb	r3, [r4, #5]
     d78:	2b00      	cmp	r3, #0
     d7a:	d0b9      	beq.n	cf0 <spi_transceive_buffer_wait+0xe8>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d7c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d7e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     d80:	0752      	lsls	r2, r2, #29
     d82:	d5fb      	bpl.n	d7c <spi_transceive_buffer_wait+0x174>
		rx_length--;
     d84:	4662      	mov	r2, ip
     d86:	3a01      	subs	r2, #1
     d88:	b292      	uxth	r2, r2
     d8a:	4694      	mov	ip, r2
     d8c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     d8e:	0752      	lsls	r2, r2, #29
     d90:	d5c4      	bpl.n	d1c <spi_transceive_buffer_wait+0x114>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d92:	8b5a      	ldrh	r2, [r3, #26]
     d94:	0752      	lsls	r2, r2, #29
     d96:	d5bb      	bpl.n	d10 <spi_transceive_buffer_wait+0x108>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d98:	2204      	movs	r2, #4
     d9a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     d9c:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d9e:	79a1      	ldrb	r1, [r4, #6]
     da0:	2901      	cmp	r1, #1
     da2:	d0b7      	beq.n	d14 <spi_transceive_buffer_wait+0x10c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     da4:	6a99      	ldr	r1, [r3, #40]	; 0x28
     da6:	b2c9      	uxtb	r1, r1
     da8:	e7ba      	b.n	d20 <spi_transceive_buffer_wait+0x118>
			rx_data[rx_pos++] = (received_data >> 8);
     daa:	3002      	adds	r0, #2
     dac:	0a09      	lsrs	r1, r1, #8
     dae:	9a03      	ldr	r2, [sp, #12]
     db0:	54d1      	strb	r1, [r2, r3]
     db2:	b283      	uxth	r3, r0
     db4:	e7c0      	b.n	d38 <spi_transceive_buffer_wait+0x130>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     db6:	7962      	ldrb	r2, [r4, #5]
     db8:	2a01      	cmp	r2, #1
     dba:	d003      	beq.n	dc4 <spi_transceive_buffer_wait+0x1bc>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     dbc:	2a00      	cmp	r2, #0
     dbe:	d039      	beq.n	e34 <spi_transceive_buffer_wait+0x22c>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     dc0:	2200      	movs	r2, #0
     dc2:	e045      	b.n	e50 <spi_transceive_buffer_wait+0x248>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     dc4:	6823      	ldr	r3, [r4, #0]
     dc6:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
     dc8:	079b      	lsls	r3, r3, #30
     dca:	d5fb      	bpl.n	dc4 <spi_transceive_buffer_wait+0x1bc>
     dcc:	e7f6      	b.n	dbc <spi_transceive_buffer_wait+0x1b4>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     dce:	3301      	adds	r3, #1
     dd0:	4a25      	ldr	r2, [pc, #148]	; (e68 <spi_transceive_buffer_wait+0x260>)
     dd2:	4293      	cmp	r3, r2
     dd4:	d803      	bhi.n	dde <spi_transceive_buffer_wait+0x1d6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     dd6:	6822      	ldr	r2, [r4, #0]
     dd8:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     dda:	0752      	lsls	r2, r2, #29
     ddc:	d5f7      	bpl.n	dce <spi_transceive_buffer_wait+0x1c6>
	SercomSpi *const spi_module = &(module->hw->SPI);
     dde:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     de0:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     de2:	0752      	lsls	r2, r2, #29
     de4:	d53c      	bpl.n	e60 <spi_transceive_buffer_wait+0x258>
			rx_length--;
     de6:	4662      	mov	r2, ip
     de8:	3a01      	subs	r2, #1
     dea:	b292      	uxth	r2, r2
     dec:	4694      	mov	ip, r2
     dee:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     df0:	0752      	lsls	r2, r2, #29
     df2:	d511      	bpl.n	e18 <spi_transceive_buffer_wait+0x210>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     df4:	8b5a      	ldrh	r2, [r3, #26]
     df6:	0752      	lsls	r2, r2, #29
     df8:	d508      	bpl.n	e0c <spi_transceive_buffer_wait+0x204>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     dfa:	2204      	movs	r2, #4
     dfc:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     dfe:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e00:	79a1      	ldrb	r1, [r4, #6]
     e02:	2901      	cmp	r1, #1
     e04:	d004      	beq.n	e10 <spi_transceive_buffer_wait+0x208>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e06:	6a99      	ldr	r1, [r3, #40]	; 0x28
     e08:	b2c9      	uxtb	r1, r1
     e0a:	e007      	b.n	e1c <spi_transceive_buffer_wait+0x214>
	enum status_code retval = STATUS_OK;
     e0c:	2200      	movs	r2, #0
     e0e:	e7f7      	b.n	e00 <spi_transceive_buffer_wait+0x1f8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e10:	6a99      	ldr	r1, [r3, #40]	; 0x28
     e12:	05c9      	lsls	r1, r1, #23
     e14:	0dc9      	lsrs	r1, r1, #23
     e16:	e001      	b.n	e1c <spi_transceive_buffer_wait+0x214>
			uint16_t received_data = 0;
     e18:	0031      	movs	r1, r6
		return STATUS_ERR_IO;
     e1a:	2210      	movs	r2, #16
			if (retval != STATUS_OK) {
     e1c:	2a00      	cmp	r2, #0
     e1e:	d117      	bne.n	e50 <spi_transceive_buffer_wait+0x248>
			rx_data[rx_pos++] = received_data;
     e20:	4643      	mov	r3, r8
     e22:	3301      	adds	r3, #1
     e24:	b29b      	uxth	r3, r3
     e26:	9a03      	ldr	r2, [sp, #12]
     e28:	4640      	mov	r0, r8
     e2a:	5411      	strb	r1, [r2, r0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e2c:	79a2      	ldrb	r2, [r4, #6]
     e2e:	2a01      	cmp	r2, #1
     e30:	d005      	beq.n	e3e <spi_transceive_buffer_wait+0x236>
				rx_data[rx_pos++] = (received_data >> 8);
     e32:	4698      	mov	r8, r3
		while (rx_length) {
     e34:	4663      	mov	r3, ip
     e36:	2b00      	cmp	r3, #0
     e38:	d007      	beq.n	e4a <spi_transceive_buffer_wait+0x242>
     e3a:	2300      	movs	r3, #0
     e3c:	e7c8      	b.n	dd0 <spi_transceive_buffer_wait+0x1c8>
				rx_data[rx_pos++] = (received_data >> 8);
     e3e:	3002      	adds	r0, #2
     e40:	0a09      	lsrs	r1, r1, #8
     e42:	9a03      	ldr	r2, [sp, #12]
     e44:	54d1      	strb	r1, [r2, r3]
     e46:	b283      	uxth	r3, r0
     e48:	e7f3      	b.n	e32 <spi_transceive_buffer_wait+0x22a>
	return STATUS_OK;
     e4a:	2200      	movs	r2, #0
     e4c:	e000      	b.n	e50 <spi_transceive_buffer_wait+0x248>
		return STATUS_BUSY;
     e4e:	2205      	movs	r2, #5
}
     e50:	0010      	movs	r0, r2
     e52:	b005      	add	sp, #20
     e54:	bc3c      	pop	{r2, r3, r4, r5}
     e56:	4690      	mov	r8, r2
     e58:	4699      	mov	r9, r3
     e5a:	46a2      	mov	sl, r4
     e5c:	46ab      	mov	fp, r5
     e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
     e60:	2212      	movs	r2, #18
     e62:	e7f5      	b.n	e50 <spi_transceive_buffer_wait+0x248>
     e64:	000006e1 	.word	0x000006e1
     e68:	00002710 	.word	0x00002710

00000e6c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
     e6c:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     e6e:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     e70:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
     e72:	780a      	ldrb	r2, [r1, #0]
     e74:	b2d2      	uxtb	r2, r2
     e76:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     e78:	1c4c      	adds	r4, r1, #1
     e7a:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e7c:	7986      	ldrb	r6, [r0, #6]
     e7e:	2e01      	cmp	r6, #1
     e80:	d007      	beq.n	e92 <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     e82:	05db      	lsls	r3, r3, #23
     e84:	0ddb      	lsrs	r3, r3, #23
     e86:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     e88:	8e83      	ldrh	r3, [r0, #52]	; 0x34
     e8a:	3b01      	subs	r3, #1
     e8c:	b29b      	uxth	r3, r3
     e8e:	8683      	strh	r3, [r0, #52]	; 0x34
}
     e90:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     e92:	784b      	ldrb	r3, [r1, #1]
     e94:	021b      	lsls	r3, r3, #8
     e96:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
     e98:	1c8c      	adds	r4, r1, #2
     e9a:	62c4      	str	r4, [r0, #44]	; 0x2c
     e9c:	e7f1      	b.n	e82 <_spi_write+0x16>
	...

00000ea0 <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ea0:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     ea2:	4a04      	ldr	r2, [pc, #16]	; (eb4 <_spi_write_dummy+0x14>)
     ea4:	8812      	ldrh	r2, [r2, #0]
     ea6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     ea8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
     eaa:	3b01      	subs	r3, #1
     eac:	b29b      	uxth	r3, r3
     eae:	8643      	strh	r3, [r0, #50]	; 0x32
}
     eb0:	4770      	bx	lr
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	200000dc 	.word	0x200000dc

00000eb8 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     eb8:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     ebc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
     ebe:	3b01      	subs	r3, #1
     ec0:	b29b      	uxth	r3, r3
     ec2:	8643      	strh	r3, [r0, #50]	; 0x32
}
     ec4:	4770      	bx	lr

00000ec6 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ec6:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     eca:	05db      	lsls	r3, r3, #23
     ecc:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     ece:	b2da      	uxtb	r2, r3
     ed0:	6a81      	ldr	r1, [r0, #40]	; 0x28
     ed2:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     ed4:	6a82      	ldr	r2, [r0, #40]	; 0x28
     ed6:	1c51      	adds	r1, r2, #1
     ed8:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eda:	7981      	ldrb	r1, [r0, #6]
     edc:	2901      	cmp	r1, #1
     ede:	d004      	beq.n	eea <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     ee0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
     ee2:	3b01      	subs	r3, #1
     ee4:	b29b      	uxth	r3, r3
     ee6:	8603      	strh	r3, [r0, #48]	; 0x30
}
     ee8:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
     eea:	0a1b      	lsrs	r3, r3, #8
     eec:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
     eee:	6a83      	ldr	r3, [r0, #40]	; 0x28
     ef0:	3301      	adds	r3, #1
     ef2:	6283      	str	r3, [r0, #40]	; 0x28
     ef4:	e7f4      	b.n	ee0 <_spi_read+0x1a>
	...

00000ef8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     efa:	0080      	lsls	r0, r0, #2
     efc:	4b6b      	ldr	r3, [pc, #428]	; (10ac <_spi_interrupt_handler+0x1b4>)
     efe:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     f00:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     f02:	2337      	movs	r3, #55	; 0x37
     f04:	5ce3      	ldrb	r3, [r4, r3]
     f06:	2236      	movs	r2, #54	; 0x36
     f08:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
     f0a:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     f0c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     f0e:	7db5      	ldrb	r5, [r6, #22]
     f10:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     f12:	07eb      	lsls	r3, r5, #31
     f14:	d516      	bpl.n	f44 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     f16:	7963      	ldrb	r3, [r4, #5]
     f18:	2b01      	cmp	r3, #1
     f1a:	d04d      	beq.n	fb8 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     f1c:	7963      	ldrb	r3, [r4, #5]
		if (0
     f1e:	2b01      	cmp	r3, #1
     f20:	d057      	beq.n	fd2 <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     f22:	2b00      	cmp	r3, #0
     f24:	d10e      	bne.n	f44 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
     f26:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     f28:	2b00      	cmp	r3, #0
     f2a:	d00b      	beq.n	f44 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
     f2c:	0020      	movs	r0, r4
     f2e:	4b60      	ldr	r3, [pc, #384]	; (10b0 <_spi_interrupt_handler+0x1b8>)
     f30:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
     f32:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     f34:	b29b      	uxth	r3, r3
     f36:	2b00      	cmp	r3, #0
     f38:	d104      	bne.n	f44 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     f3a:	3301      	adds	r3, #1
     f3c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     f3e:	7a63      	ldrb	r3, [r4, #9]
     f40:	2b01      	cmp	r3, #1
     f42:	d04a      	beq.n	fda <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     f44:	076b      	lsls	r3, r5, #29
     f46:	d511      	bpl.n	f6c <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f48:	8b73      	ldrh	r3, [r6, #26]
     f4a:	075b      	lsls	r3, r3, #29
     f4c:	d54f      	bpl.n	fee <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
     f4e:	7a63      	ldrb	r3, [r4, #9]
     f50:	2b01      	cmp	r3, #1
     f52:	d008      	beq.n	f66 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     f54:	221e      	movs	r2, #30
     f56:	2338      	movs	r3, #56	; 0x38
     f58:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     f5a:	3b35      	subs	r3, #53	; 0x35
     f5c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     f5e:	3302      	adds	r3, #2
     f60:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     f62:	073b      	lsls	r3, r7, #28
     f64:	d43f      	bmi.n	fe6 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     f66:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f68:	2304      	movs	r3, #4
     f6a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     f6c:	07ab      	lsls	r3, r5, #30
     f6e:	d513      	bpl.n	f98 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     f70:	7963      	ldrb	r3, [r4, #5]
     f72:	2b00      	cmp	r3, #0
     f74:	d10d      	bne.n	f92 <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     f76:	3307      	adds	r3, #7
     f78:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f7a:	3b05      	subs	r3, #5
     f7c:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     f7e:	3301      	adds	r3, #1
     f80:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     f82:	2300      	movs	r3, #0
     f84:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     f86:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     f88:	3338      	adds	r3, #56	; 0x38
     f8a:	2200      	movs	r2, #0
     f8c:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     f8e:	06fb      	lsls	r3, r7, #27
     f90:	d464      	bmi.n	105c <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     f92:	7963      	ldrb	r3, [r4, #5]
     f94:	2b01      	cmp	r3, #1
     f96:	d065      	beq.n	1064 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     f98:	072b      	lsls	r3, r5, #28
     f9a:	d508      	bpl.n	fae <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
     f9c:	7963      	ldrb	r3, [r4, #5]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d105      	bne.n	fae <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     fa2:	3308      	adds	r3, #8
     fa4:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     fa6:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     fa8:	06bb      	lsls	r3, r7, #26
     faa:	d500      	bpl.n	fae <_spi_interrupt_handler+0xb6>
     fac:	e070      	b.n	1090 <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     fae:	b26d      	sxtb	r5, r5
     fb0:	2d00      	cmp	r5, #0
     fb2:	da00      	bge.n	fb6 <_spi_interrupt_handler+0xbe>
     fb4:	e070      	b.n	1098 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
     fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
     fb8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     fba:	2b00      	cmp	r3, #0
     fbc:	d1ae      	bne.n	f1c <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
     fbe:	0020      	movs	r0, r4
     fc0:	4b3c      	ldr	r3, [pc, #240]	; (10b4 <_spi_interrupt_handler+0x1bc>)
     fc2:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
     fc4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     fc6:	b29b      	uxth	r3, r3
     fc8:	2b00      	cmp	r3, #0
     fca:	d1a7      	bne.n	f1c <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     fcc:	3301      	adds	r3, #1
     fce:	7533      	strb	r3, [r6, #20]
     fd0:	e7a4      	b.n	f1c <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
     fd2:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
     fd4:	2a00      	cmp	r2, #0
     fd6:	d1a9      	bne.n	f2c <_spi_interrupt_handler+0x34>
     fd8:	e7a3      	b.n	f22 <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
     fda:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
     fdc:	2b00      	cmp	r3, #0
     fde:	d1b1      	bne.n	f44 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     fe0:	3302      	adds	r3, #2
     fe2:	75b3      	strb	r3, [r6, #22]
     fe4:	e7ae      	b.n	f44 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     fe6:	0020      	movs	r0, r4
     fe8:	69a3      	ldr	r3, [r4, #24]
     fea:	4798      	blx	r3
     fec:	e7bb      	b.n	f66 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
     fee:	7a63      	ldrb	r3, [r4, #9]
     ff0:	2b01      	cmp	r3, #1
     ff2:	d017      	beq.n	1024 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
     ff4:	0020      	movs	r0, r4
     ff6:	4b30      	ldr	r3, [pc, #192]	; (10b8 <_spi_interrupt_handler+0x1c0>)
     ff8:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
     ffa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     ffc:	b29b      	uxth	r3, r3
     ffe:	2b00      	cmp	r3, #0
    1000:	d1b4      	bne.n	f6c <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    1002:	2200      	movs	r2, #0
    1004:	3338      	adds	r3, #56	; 0x38
    1006:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1008:	3b34      	subs	r3, #52	; 0x34
    100a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    100c:	7a63      	ldrb	r3, [r4, #9]
    100e:	2b02      	cmp	r3, #2
    1010:	d01d      	beq.n	104e <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1012:	7a63      	ldrb	r3, [r4, #9]
    1014:	2b00      	cmp	r3, #0
    1016:	d1a9      	bne.n	f6c <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1018:	07bb      	lsls	r3, r7, #30
    101a:	d5a7      	bpl.n	f6c <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    101c:	0020      	movs	r0, r4
    101e:	6923      	ldr	r3, [r4, #16]
    1020:	4798      	blx	r3
    1022:	e7a3      	b.n	f6c <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    1024:	0020      	movs	r0, r4
    1026:	4b25      	ldr	r3, [pc, #148]	; (10bc <_spi_interrupt_handler+0x1c4>)
    1028:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    102a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    102c:	b29b      	uxth	r3, r3
    102e:	2b00      	cmp	r3, #0
    1030:	d19c      	bne.n	f6c <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1032:	3304      	adds	r3, #4
    1034:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1036:	2200      	movs	r2, #0
    1038:	3334      	adds	r3, #52	; 0x34
    103a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    103c:	3b35      	subs	r3, #53	; 0x35
    103e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1040:	07fb      	lsls	r3, r7, #31
    1042:	d400      	bmi.n	1046 <_spi_interrupt_handler+0x14e>
    1044:	e792      	b.n	f6c <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1046:	0020      	movs	r0, r4
    1048:	68e3      	ldr	r3, [r4, #12]
    104a:	4798      	blx	r3
    104c:	e78e      	b.n	f6c <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    104e:	077b      	lsls	r3, r7, #29
    1050:	d400      	bmi.n	1054 <_spi_interrupt_handler+0x15c>
    1052:	e78b      	b.n	f6c <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1054:	0020      	movs	r0, r4
    1056:	6963      	ldr	r3, [r4, #20]
    1058:	4798      	blx	r3
    105a:	e787      	b.n	f6c <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    105c:	0020      	movs	r0, r4
    105e:	69e3      	ldr	r3, [r4, #28]
    1060:	4798      	blx	r3
    1062:	e796      	b.n	f92 <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1064:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1066:	2b01      	cmp	r3, #1
    1068:	d000      	beq.n	106c <_spi_interrupt_handler+0x174>
    106a:	e795      	b.n	f98 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    106c:	79e3      	ldrb	r3, [r4, #7]
    106e:	2b00      	cmp	r3, #0
    1070:	d000      	beq.n	1074 <_spi_interrupt_handler+0x17c>
    1072:	e791      	b.n	f98 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1074:	3302      	adds	r3, #2
    1076:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1078:	3301      	adds	r3, #1
    107a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    107c:	2200      	movs	r2, #0
    107e:	3335      	adds	r3, #53	; 0x35
    1080:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1082:	07fb      	lsls	r3, r7, #31
    1084:	d400      	bmi.n	1088 <_spi_interrupt_handler+0x190>
    1086:	e787      	b.n	f98 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1088:	0020      	movs	r0, r4
    108a:	68e3      	ldr	r3, [r4, #12]
    108c:	4798      	blx	r3
    108e:	e783      	b.n	f98 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1090:	0020      	movs	r0, r4
    1092:	6a23      	ldr	r3, [r4, #32]
    1094:	4798      	blx	r3
    1096:	e78a      	b.n	fae <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1098:	2380      	movs	r3, #128	; 0x80
    109a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    109c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    109e:	067b      	lsls	r3, r7, #25
    10a0:	d400      	bmi.n	10a4 <_spi_interrupt_handler+0x1ac>
    10a2:	e788      	b.n	fb6 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    10a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    10a6:	0020      	movs	r0, r4
    10a8:	4798      	blx	r3
}
    10aa:	e784      	b.n	fb6 <_spi_interrupt_handler+0xbe>
    10ac:	200000e0 	.word	0x200000e0
    10b0:	00000e6d 	.word	0x00000e6d
    10b4:	00000ea1 	.word	0x00000ea1
    10b8:	00000ec7 	.word	0x00000ec7
    10bc:	00000eb9 	.word	0x00000eb9

000010c0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    10c0:	4770      	bx	lr
	...

000010c4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    10c4:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    10c6:	4b0b      	ldr	r3, [pc, #44]	; (10f4 <_sercom_set_handler+0x30>)
    10c8:	781b      	ldrb	r3, [r3, #0]
    10ca:	2b00      	cmp	r3, #0
    10cc:	d008      	beq.n	10e0 <_sercom_set_handler+0x1c>
    10ce:	e00c      	b.n	10ea <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10d0:	009a      	lsls	r2, r3, #2
    10d2:	4d09      	ldr	r5, [pc, #36]	; (10f8 <_sercom_set_handler+0x34>)
    10d4:	4c09      	ldr	r4, [pc, #36]	; (10fc <_sercom_set_handler+0x38>)
    10d6:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    10d8:	2500      	movs	r5, #0
    10da:	4c09      	ldr	r4, [pc, #36]	; (1100 <_sercom_set_handler+0x3c>)
    10dc:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10de:	3301      	adds	r3, #1
    10e0:	2b05      	cmp	r3, #5
    10e2:	d9f5      	bls.n	10d0 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    10e4:	2201      	movs	r2, #1
    10e6:	4b03      	ldr	r3, [pc, #12]	; (10f4 <_sercom_set_handler+0x30>)
    10e8:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    10ea:	0080      	lsls	r0, r0, #2
    10ec:	4b03      	ldr	r3, [pc, #12]	; (10fc <_sercom_set_handler+0x38>)
    10ee:	50c1      	str	r1, [r0, r3]
}
    10f0:	bd30      	pop	{r4, r5, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	20000062 	.word	0x20000062
    10f8:	000010c1 	.word	0x000010c1
    10fc:	20000064 	.word	0x20000064
    1100:	200000e0 	.word	0x200000e0

00001104 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1104:	b500      	push	{lr}
    1106:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1108:	4b05      	ldr	r3, [pc, #20]	; (1120 <_sercom_get_interrupt_vector+0x1c>)
    110a:	681a      	ldr	r2, [r3, #0]
    110c:	9200      	str	r2, [sp, #0]
    110e:	889b      	ldrh	r3, [r3, #4]
    1110:	466a      	mov	r2, sp
    1112:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1114:	4b03      	ldr	r3, [pc, #12]	; (1124 <_sercom_get_interrupt_vector+0x20>)
    1116:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1118:	466b      	mov	r3, sp
    111a:	5618      	ldrsb	r0, [r3, r0]
}
    111c:	b003      	add	sp, #12
    111e:	bd00      	pop	{pc}
    1120:	00001bd8 	.word	0x00001bd8
    1124:	000005d9 	.word	0x000005d9

00001128 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1128:	b510      	push	{r4, lr}
    112a:	4b02      	ldr	r3, [pc, #8]	; (1134 <SERCOM0_Handler+0xc>)
    112c:	681b      	ldr	r3, [r3, #0]
    112e:	2000      	movs	r0, #0
    1130:	4798      	blx	r3
    1132:	bd10      	pop	{r4, pc}
    1134:	20000064 	.word	0x20000064

00001138 <SERCOM1_Handler>:
    1138:	b510      	push	{r4, lr}
    113a:	4b02      	ldr	r3, [pc, #8]	; (1144 <SERCOM1_Handler+0xc>)
    113c:	685b      	ldr	r3, [r3, #4]
    113e:	2001      	movs	r0, #1
    1140:	4798      	blx	r3
    1142:	bd10      	pop	{r4, pc}
    1144:	20000064 	.word	0x20000064

00001148 <SERCOM2_Handler>:
    1148:	b510      	push	{r4, lr}
    114a:	4b02      	ldr	r3, [pc, #8]	; (1154 <SERCOM2_Handler+0xc>)
    114c:	689b      	ldr	r3, [r3, #8]
    114e:	2002      	movs	r0, #2
    1150:	4798      	blx	r3
    1152:	bd10      	pop	{r4, pc}
    1154:	20000064 	.word	0x20000064

00001158 <SERCOM3_Handler>:
    1158:	b510      	push	{r4, lr}
    115a:	4b02      	ldr	r3, [pc, #8]	; (1164 <SERCOM3_Handler+0xc>)
    115c:	68db      	ldr	r3, [r3, #12]
    115e:	2003      	movs	r0, #3
    1160:	4798      	blx	r3
    1162:	bd10      	pop	{r4, pc}
    1164:	20000064 	.word	0x20000064

00001168 <SERCOM4_Handler>:
    1168:	b510      	push	{r4, lr}
    116a:	4b02      	ldr	r3, [pc, #8]	; (1174 <SERCOM4_Handler+0xc>)
    116c:	691b      	ldr	r3, [r3, #16]
    116e:	2004      	movs	r0, #4
    1170:	4798      	blx	r3
    1172:	bd10      	pop	{r4, pc}
    1174:	20000064 	.word	0x20000064

00001178 <SERCOM5_Handler>:
    1178:	b510      	push	{r4, lr}
    117a:	4b02      	ldr	r3, [pc, #8]	; (1184 <SERCOM5_Handler+0xc>)
    117c:	695b      	ldr	r3, [r3, #20]
    117e:	2005      	movs	r0, #5
    1180:	4798      	blx	r3
    1182:	bd10      	pop	{r4, pc}
    1184:	20000064 	.word	0x20000064

00001188 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1188:	4770      	bx	lr
	...

0000118c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    118c:	4b0c      	ldr	r3, [pc, #48]	; (11c0 <cpu_irq_enter_critical+0x34>)
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	2b00      	cmp	r3, #0
    1192:	d106      	bne.n	11a2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1194:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1198:	2b00      	cmp	r3, #0
    119a:	d007      	beq.n	11ac <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    119c:	2200      	movs	r2, #0
    119e:	4b09      	ldr	r3, [pc, #36]	; (11c4 <cpu_irq_enter_critical+0x38>)
    11a0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    11a2:	4a07      	ldr	r2, [pc, #28]	; (11c0 <cpu_irq_enter_critical+0x34>)
    11a4:	6813      	ldr	r3, [r2, #0]
    11a6:	3301      	adds	r3, #1
    11a8:	6013      	str	r3, [r2, #0]
}
    11aa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    11ac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    11ae:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    11b2:	2200      	movs	r2, #0
    11b4:	4b04      	ldr	r3, [pc, #16]	; (11c8 <cpu_irq_enter_critical+0x3c>)
    11b6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    11b8:	3201      	adds	r2, #1
    11ba:	4b02      	ldr	r3, [pc, #8]	; (11c4 <cpu_irq_enter_critical+0x38>)
    11bc:	701a      	strb	r2, [r3, #0]
    11be:	e7f0      	b.n	11a2 <cpu_irq_enter_critical+0x16>
    11c0:	2000007c 	.word	0x2000007c
    11c4:	20000080 	.word	0x20000080
    11c8:	20000008 	.word	0x20000008

000011cc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    11cc:	4b08      	ldr	r3, [pc, #32]	; (11f0 <cpu_irq_leave_critical+0x24>)
    11ce:	681a      	ldr	r2, [r3, #0]
    11d0:	3a01      	subs	r2, #1
    11d2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    11d4:	681b      	ldr	r3, [r3, #0]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d109      	bne.n	11ee <cpu_irq_leave_critical+0x22>
    11da:	4b06      	ldr	r3, [pc, #24]	; (11f4 <cpu_irq_leave_critical+0x28>)
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	2b00      	cmp	r3, #0
    11e0:	d005      	beq.n	11ee <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    11e2:	2201      	movs	r2, #1
    11e4:	4b04      	ldr	r3, [pc, #16]	; (11f8 <cpu_irq_leave_critical+0x2c>)
    11e6:	701a      	strb	r2, [r3, #0]
    11e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    11ec:	b662      	cpsie	i
	}
}
    11ee:	4770      	bx	lr
    11f0:	2000007c 	.word	0x2000007c
    11f4:	20000080 	.word	0x20000080
    11f8:	20000008 	.word	0x20000008

000011fc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    11fc:	b510      	push	{r4, lr}
    11fe:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1200:	2201      	movs	r2, #1
    1202:	ab01      	add	r3, sp, #4
    1204:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1206:	2400      	movs	r4, #0
    1208:	e004      	b.n	1214 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    120a:	b2e0      	uxtb	r0, r4
    120c:	a901      	add	r1, sp, #4
    120e:	4b03      	ldr	r3, [pc, #12]	; (121c <_switch_peripheral_gclk+0x20>)
    1210:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1212:	3401      	adds	r4, #1
    1214:	2c24      	cmp	r4, #36	; 0x24
    1216:	d9f8      	bls.n	120a <_switch_peripheral_gclk+0xe>
	}
}
    1218:	b002      	add	sp, #8
    121a:	bd10      	pop	{r4, pc}
    121c:	0000169d 	.word	0x0000169d

00001220 <system_clock_source_get_hz>:
{
    1220:	b510      	push	{r4, lr}
	switch (clock_source) {
    1222:	2808      	cmp	r0, #8
    1224:	d832      	bhi.n	128c <system_clock_source_get_hz+0x6c>
    1226:	0080      	lsls	r0, r0, #2
    1228:	4b1b      	ldr	r3, [pc, #108]	; (1298 <system_clock_source_get_hz+0x78>)
    122a:	581b      	ldr	r3, [r3, r0]
    122c:	469f      	mov	pc, r3
		return 32768UL;
    122e:	2080      	movs	r0, #128	; 0x80
    1230:	0200      	lsls	r0, r0, #8
}
    1232:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    1234:	4b19      	ldr	r3, [pc, #100]	; (129c <system_clock_source_get_hz+0x7c>)
    1236:	6918      	ldr	r0, [r3, #16]
    1238:	e7fb      	b.n	1232 <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    123a:	4b19      	ldr	r3, [pc, #100]	; (12a0 <system_clock_source_get_hz+0x80>)
    123c:	6a1b      	ldr	r3, [r3, #32]
    123e:	059b      	lsls	r3, r3, #22
    1240:	0f9b      	lsrs	r3, r3, #30
    1242:	4818      	ldr	r0, [pc, #96]	; (12a4 <system_clock_source_get_hz+0x84>)
    1244:	40d8      	lsrs	r0, r3
    1246:	e7f4      	b.n	1232 <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    1248:	4b14      	ldr	r3, [pc, #80]	; (129c <system_clock_source_get_hz+0x7c>)
    124a:	6958      	ldr	r0, [r3, #20]
    124c:	e7f1      	b.n	1232 <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    124e:	4b13      	ldr	r3, [pc, #76]	; (129c <system_clock_source_get_hz+0x7c>)
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	079b      	lsls	r3, r3, #30
    1254:	d51c      	bpl.n	1290 <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1256:	4b12      	ldr	r3, [pc, #72]	; (12a0 <system_clock_source_get_hz+0x80>)
    1258:	68db      	ldr	r3, [r3, #12]
    125a:	06db      	lsls	r3, r3, #27
    125c:	d5fb      	bpl.n	1256 <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    125e:	4b0f      	ldr	r3, [pc, #60]	; (129c <system_clock_source_get_hz+0x7c>)
    1260:	681b      	ldr	r3, [r3, #0]
    1262:	075b      	lsls	r3, r3, #29
    1264:	d401      	bmi.n	126a <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    1266:	4810      	ldr	r0, [pc, #64]	; (12a8 <system_clock_source_get_hz+0x88>)
    1268:	e7e3      	b.n	1232 <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    126a:	2000      	movs	r0, #0
    126c:	4b0f      	ldr	r3, [pc, #60]	; (12ac <system_clock_source_get_hz+0x8c>)
    126e:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1270:	4b0a      	ldr	r3, [pc, #40]	; (129c <system_clock_source_get_hz+0x7c>)
    1272:	689b      	ldr	r3, [r3, #8]
    1274:	041b      	lsls	r3, r3, #16
    1276:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1278:	4358      	muls	r0, r3
    127a:	e7da      	b.n	1232 <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    127c:	2350      	movs	r3, #80	; 0x50
    127e:	4a08      	ldr	r2, [pc, #32]	; (12a0 <system_clock_source_get_hz+0x80>)
    1280:	5cd3      	ldrb	r3, [r2, r3]
    1282:	075b      	lsls	r3, r3, #29
    1284:	d506      	bpl.n	1294 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1286:	4b05      	ldr	r3, [pc, #20]	; (129c <system_clock_source_get_hz+0x7c>)
    1288:	68d8      	ldr	r0, [r3, #12]
    128a:	e7d2      	b.n	1232 <system_clock_source_get_hz+0x12>
		return 0;
    128c:	2000      	movs	r0, #0
    128e:	e7d0      	b.n	1232 <system_clock_source_get_hz+0x12>
			return 0;
    1290:	2000      	movs	r0, #0
    1292:	e7ce      	b.n	1232 <system_clock_source_get_hz+0x12>
			return 0;
    1294:	2000      	movs	r0, #0
    1296:	e7cc      	b.n	1232 <system_clock_source_get_hz+0x12>
    1298:	00001be0 	.word	0x00001be0
    129c:	20000084 	.word	0x20000084
    12a0:	40000800 	.word	0x40000800
    12a4:	007a1200 	.word	0x007a1200
    12a8:	02dc6c00 	.word	0x02dc6c00
    12ac:	000016b9 	.word	0x000016b9

000012b0 <system_clock_source_osc8m_set_config>:
{
    12b0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    12b2:	4d0c      	ldr	r5, [pc, #48]	; (12e4 <system_clock_source_osc8m_set_config+0x34>)
    12b4:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    12b6:	7802      	ldrb	r2, [r0, #0]
    12b8:	2103      	movs	r1, #3
    12ba:	400a      	ands	r2, r1
    12bc:	0212      	lsls	r2, r2, #8
    12be:	490a      	ldr	r1, [pc, #40]	; (12e8 <system_clock_source_osc8m_set_config+0x38>)
    12c0:	4031      	ands	r1, r6
    12c2:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    12c4:	7882      	ldrb	r2, [r0, #2]
    12c6:	2401      	movs	r4, #1
    12c8:	4022      	ands	r2, r4
    12ca:	01d2      	lsls	r2, r2, #7
    12cc:	2380      	movs	r3, #128	; 0x80
    12ce:	4399      	bics	r1, r3
    12d0:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    12d2:	7843      	ldrb	r3, [r0, #1]
    12d4:	4023      	ands	r3, r4
    12d6:	019b      	lsls	r3, r3, #6
    12d8:	2140      	movs	r1, #64	; 0x40
    12da:	438a      	bics	r2, r1
    12dc:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    12de:	622b      	str	r3, [r5, #32]
}
    12e0:	bd70      	pop	{r4, r5, r6, pc}
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	40000800 	.word	0x40000800
    12e8:	fffffcff 	.word	0xfffffcff

000012ec <system_clock_source_enable>:
	switch (clock_source) {
    12ec:	2808      	cmp	r0, #8
    12ee:	d84a      	bhi.n	1386 <system_clock_source_enable+0x9a>
    12f0:	0080      	lsls	r0, r0, #2
    12f2:	4b26      	ldr	r3, [pc, #152]	; (138c <system_clock_source_enable+0xa0>)
    12f4:	581b      	ldr	r3, [r3, r0]
    12f6:	469f      	mov	pc, r3
		return STATUS_OK;
    12f8:	2000      	movs	r0, #0
}
    12fa:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    12fc:	4a24      	ldr	r2, [pc, #144]	; (1390 <system_clock_source_enable+0xa4>)
    12fe:	6a13      	ldr	r3, [r2, #32]
    1300:	2102      	movs	r1, #2
    1302:	430b      	orrs	r3, r1
    1304:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1306:	2000      	movs	r0, #0
    1308:	e7f7      	b.n	12fa <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    130a:	4a21      	ldr	r2, [pc, #132]	; (1390 <system_clock_source_enable+0xa4>)
    130c:	6993      	ldr	r3, [r2, #24]
    130e:	2102      	movs	r1, #2
    1310:	430b      	orrs	r3, r1
    1312:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1314:	2000      	movs	r0, #0
		break;
    1316:	e7f0      	b.n	12fa <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1318:	4a1d      	ldr	r2, [pc, #116]	; (1390 <system_clock_source_enable+0xa4>)
    131a:	8a13      	ldrh	r3, [r2, #16]
    131c:	2102      	movs	r1, #2
    131e:	430b      	orrs	r3, r1
    1320:	b29b      	uxth	r3, r3
    1322:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1324:	2000      	movs	r0, #0
		break;
    1326:	e7e8      	b.n	12fa <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1328:	4a19      	ldr	r2, [pc, #100]	; (1390 <system_clock_source_enable+0xa4>)
    132a:	8a93      	ldrh	r3, [r2, #20]
    132c:	2102      	movs	r1, #2
    132e:	430b      	orrs	r3, r1
    1330:	b29b      	uxth	r3, r3
    1332:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1334:	2000      	movs	r0, #0
		break;
    1336:	e7e0      	b.n	12fa <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1338:	4916      	ldr	r1, [pc, #88]	; (1394 <system_clock_source_enable+0xa8>)
    133a:	680b      	ldr	r3, [r1, #0]
    133c:	2202      	movs	r2, #2
    133e:	4313      	orrs	r3, r2
    1340:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1342:	4b13      	ldr	r3, [pc, #76]	; (1390 <system_clock_source_enable+0xa4>)
    1344:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1346:	4b12      	ldr	r3, [pc, #72]	; (1390 <system_clock_source_enable+0xa4>)
    1348:	68db      	ldr	r3, [r3, #12]
    134a:	06db      	lsls	r3, r3, #27
    134c:	d5fb      	bpl.n	1346 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    134e:	4a11      	ldr	r2, [pc, #68]	; (1394 <system_clock_source_enable+0xa8>)
    1350:	6891      	ldr	r1, [r2, #8]
    1352:	4b0f      	ldr	r3, [pc, #60]	; (1390 <system_clock_source_enable+0xa4>)
    1354:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1356:	6852      	ldr	r2, [r2, #4]
    1358:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    135a:	2200      	movs	r2, #0
    135c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    135e:	4b0c      	ldr	r3, [pc, #48]	; (1390 <system_clock_source_enable+0xa4>)
    1360:	68db      	ldr	r3, [r3, #12]
    1362:	06db      	lsls	r3, r3, #27
    1364:	d5fb      	bpl.n	135e <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1366:	4b0b      	ldr	r3, [pc, #44]	; (1394 <system_clock_source_enable+0xa8>)
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	b29b      	uxth	r3, r3
    136c:	4a08      	ldr	r2, [pc, #32]	; (1390 <system_clock_source_enable+0xa4>)
    136e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1370:	2000      	movs	r0, #0
    1372:	e7c2      	b.n	12fa <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1374:	4906      	ldr	r1, [pc, #24]	; (1390 <system_clock_source_enable+0xa4>)
    1376:	2244      	movs	r2, #68	; 0x44
    1378:	5c8b      	ldrb	r3, [r1, r2]
    137a:	2002      	movs	r0, #2
    137c:	4303      	orrs	r3, r0
    137e:	b2db      	uxtb	r3, r3
    1380:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1382:	2000      	movs	r0, #0
		break;
    1384:	e7b9      	b.n	12fa <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    1386:	2017      	movs	r0, #23
    1388:	e7b7      	b.n	12fa <system_clock_source_enable+0xe>
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	00001c04 	.word	0x00001c04
    1390:	40000800 	.word	0x40000800
    1394:	20000084 	.word	0x20000084

00001398 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1398:	b530      	push	{r4, r5, lr}
    139a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    139c:	22c2      	movs	r2, #194	; 0xc2
    139e:	00d2      	lsls	r2, r2, #3
    13a0:	4b15      	ldr	r3, [pc, #84]	; (13f8 <system_clock_init+0x60>)
    13a2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13a4:	4b15      	ldr	r3, [pc, #84]	; (13fc <system_clock_init+0x64>)
    13a6:	6859      	ldr	r1, [r3, #4]
    13a8:	221e      	movs	r2, #30
    13aa:	4391      	bics	r1, r2
    13ac:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    13ae:	4b14      	ldr	r3, [pc, #80]	; (1400 <system_clock_init+0x68>)
    13b0:	4798      	blx	r3
	config->run_in_standby  = false;
    13b2:	a803      	add	r0, sp, #12
    13b4:	2400      	movs	r4, #0
    13b6:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    13b8:	2501      	movs	r5, #1
    13ba:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    13bc:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    13be:	4b11      	ldr	r3, [pc, #68]	; (1404 <system_clock_init+0x6c>)
    13c0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    13c2:	2006      	movs	r0, #6
    13c4:	4b10      	ldr	r3, [pc, #64]	; (1408 <system_clock_init+0x70>)
    13c6:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    13c8:	4b10      	ldr	r3, [pc, #64]	; (140c <system_clock_init+0x74>)
    13ca:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    13cc:	4b10      	ldr	r3, [pc, #64]	; (1410 <system_clock_init+0x78>)
    13ce:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    13d0:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    13d2:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    13d4:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    13d6:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    13d8:	466b      	mov	r3, sp
    13da:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    13dc:	2306      	movs	r3, #6
    13de:	466a      	mov	r2, sp
    13e0:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    13e2:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    13e4:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    13e6:	4669      	mov	r1, sp
    13e8:	2000      	movs	r0, #0
    13ea:	4b0a      	ldr	r3, [pc, #40]	; (1414 <system_clock_init+0x7c>)
    13ec:	4798      	blx	r3
    13ee:	2000      	movs	r0, #0
    13f0:	4b09      	ldr	r3, [pc, #36]	; (1418 <system_clock_init+0x80>)
    13f2:	4798      	blx	r3
#endif
}
    13f4:	b005      	add	sp, #20
    13f6:	bd30      	pop	{r4, r5, pc}
    13f8:	40000800 	.word	0x40000800
    13fc:	41004000 	.word	0x41004000
    1400:	000011fd 	.word	0x000011fd
    1404:	000012b1 	.word	0x000012b1
    1408:	000012ed 	.word	0x000012ed
    140c:	0000141d 	.word	0x0000141d
    1410:	40000400 	.word	0x40000400
    1414:	00001441 	.word	0x00001441
    1418:	00001511 	.word	0x00001511

0000141c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    141c:	4a06      	ldr	r2, [pc, #24]	; (1438 <system_gclk_init+0x1c>)
    141e:	6993      	ldr	r3, [r2, #24]
    1420:	2108      	movs	r1, #8
    1422:	430b      	orrs	r3, r1
    1424:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1426:	2201      	movs	r2, #1
    1428:	4b04      	ldr	r3, [pc, #16]	; (143c <system_gclk_init+0x20>)
    142a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    142c:	4b03      	ldr	r3, [pc, #12]	; (143c <system_gclk_init+0x20>)
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	07db      	lsls	r3, r3, #31
    1432:	d4fb      	bmi.n	142c <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1434:	4770      	bx	lr
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	40000400 	.word	0x40000400
    143c:	40000c00 	.word	0x40000c00

00001440 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1442:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1444:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1446:	780c      	ldrb	r4, [r1, #0]
    1448:	0224      	lsls	r4, r4, #8
    144a:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    144c:	784b      	ldrb	r3, [r1, #1]
    144e:	2b00      	cmp	r3, #0
    1450:	d002      	beq.n	1458 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1452:	2380      	movs	r3, #128	; 0x80
    1454:	02db      	lsls	r3, r3, #11
    1456:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1458:	7a4b      	ldrb	r3, [r1, #9]
    145a:	2b00      	cmp	r3, #0
    145c:	d002      	beq.n	1464 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    145e:	2380      	movs	r3, #128	; 0x80
    1460:	031b      	lsls	r3, r3, #12
    1462:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1464:	6848      	ldr	r0, [r1, #4]
    1466:	2801      	cmp	r0, #1
    1468:	d912      	bls.n	1490 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    146a:	1e43      	subs	r3, r0, #1
    146c:	4203      	tst	r3, r0
    146e:	d03d      	beq.n	14ec <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1470:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    1472:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1474:	2380      	movs	r3, #128	; 0x80
    1476:	029b      	lsls	r3, r3, #10
    1478:	431c      	orrs	r4, r3
    147a:	e009      	b.n	1490 <system_gclk_gen_set_config+0x50>
				div2_count++;
    147c:	3201      	adds	r2, #1
						mask <<= 1) {
    147e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1480:	4283      	cmp	r3, r0
    1482:	d3fb      	bcc.n	147c <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1484:	0212      	lsls	r2, r2, #8
    1486:	4332      	orrs	r2, r6
    1488:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    148a:	2380      	movs	r3, #128	; 0x80
    148c:	035b      	lsls	r3, r3, #13
    148e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1490:	7a0b      	ldrb	r3, [r1, #8]
    1492:	2b00      	cmp	r3, #0
    1494:	d002      	beq.n	149c <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1496:	2380      	movs	r3, #128	; 0x80
    1498:	039b      	lsls	r3, r3, #14
    149a:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    149c:	4b18      	ldr	r3, [pc, #96]	; (1500 <system_gclk_gen_set_config+0xc0>)
    149e:	785b      	ldrb	r3, [r3, #1]
    14a0:	b25b      	sxtb	r3, r3
    14a2:	2b00      	cmp	r3, #0
    14a4:	db25      	blt.n	14f2 <system_gclk_gen_set_config+0xb2>
	return false;
    14a6:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    14a8:	2f00      	cmp	r7, #0
    14aa:	d1f7      	bne.n	149c <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    14ac:	4b15      	ldr	r3, [pc, #84]	; (1504 <system_gclk_gen_set_config+0xc4>)
    14ae:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    14b0:	4b15      	ldr	r3, [pc, #84]	; (1508 <system_gclk_gen_set_config+0xc8>)
    14b2:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14b4:	4b12      	ldr	r3, [pc, #72]	; (1500 <system_gclk_gen_set_config+0xc0>)
    14b6:	785b      	ldrb	r3, [r3, #1]
    14b8:	b25b      	sxtb	r3, r3
    14ba:	2b00      	cmp	r3, #0
    14bc:	db1b      	blt.n	14f6 <system_gclk_gen_set_config+0xb6>
	return false;
    14be:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    14c0:	2a00      	cmp	r2, #0
    14c2:	d1f7      	bne.n	14b4 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    14c4:	4b0e      	ldr	r3, [pc, #56]	; (1500 <system_gclk_gen_set_config+0xc0>)
    14c6:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14c8:	4b0d      	ldr	r3, [pc, #52]	; (1500 <system_gclk_gen_set_config+0xc0>)
    14ca:	785b      	ldrb	r3, [r3, #1]
    14cc:	b25b      	sxtb	r3, r3
    14ce:	2b00      	cmp	r3, #0
    14d0:	db13      	blt.n	14fa <system_gclk_gen_set_config+0xba>
	return false;
    14d2:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    14d4:	2b00      	cmp	r3, #0
    14d6:	d1f7      	bne.n	14c8 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    14d8:	4a09      	ldr	r2, [pc, #36]	; (1500 <system_gclk_gen_set_config+0xc0>)
    14da:	6853      	ldr	r3, [r2, #4]
    14dc:	2180      	movs	r1, #128	; 0x80
    14de:	0249      	lsls	r1, r1, #9
    14e0:	400b      	ands	r3, r1
    14e2:	431c      	orrs	r4, r3
    14e4:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    14e6:	4b09      	ldr	r3, [pc, #36]	; (150c <system_gclk_gen_set_config+0xcc>)
    14e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14ec:	2302      	movs	r3, #2
    14ee:	2200      	movs	r2, #0
    14f0:	e7c6      	b.n	1480 <system_gclk_gen_set_config+0x40>
		return true;
    14f2:	2701      	movs	r7, #1
    14f4:	e7d8      	b.n	14a8 <system_gclk_gen_set_config+0x68>
    14f6:	2201      	movs	r2, #1
    14f8:	e7e2      	b.n	14c0 <system_gclk_gen_set_config+0x80>
    14fa:	2301      	movs	r3, #1
    14fc:	e7ea      	b.n	14d4 <system_gclk_gen_set_config+0x94>
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	40000c00 	.word	0x40000c00
    1504:	0000118d 	.word	0x0000118d
    1508:	40000c08 	.word	0x40000c08
    150c:	000011cd 	.word	0x000011cd

00001510 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1510:	b570      	push	{r4, r5, r6, lr}
    1512:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1514:	4b10      	ldr	r3, [pc, #64]	; (1558 <system_gclk_gen_enable+0x48>)
    1516:	785b      	ldrb	r3, [r3, #1]
    1518:	b25b      	sxtb	r3, r3
    151a:	2b00      	cmp	r3, #0
    151c:	db17      	blt.n	154e <system_gclk_gen_enable+0x3e>
	return false;
    151e:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    1520:	2c00      	cmp	r4, #0
    1522:	d1f7      	bne.n	1514 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1524:	4b0d      	ldr	r3, [pc, #52]	; (155c <system_gclk_gen_enable+0x4c>)
    1526:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1528:	4b0d      	ldr	r3, [pc, #52]	; (1560 <system_gclk_gen_enable+0x50>)
    152a:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    152c:	4b0a      	ldr	r3, [pc, #40]	; (1558 <system_gclk_gen_enable+0x48>)
    152e:	785b      	ldrb	r3, [r3, #1]
    1530:	b25b      	sxtb	r3, r3
    1532:	2b00      	cmp	r3, #0
    1534:	db0d      	blt.n	1552 <system_gclk_gen_enable+0x42>
	return false;
    1536:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1538:	2b00      	cmp	r3, #0
    153a:	d1f7      	bne.n	152c <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    153c:	4a06      	ldr	r2, [pc, #24]	; (1558 <system_gclk_gen_enable+0x48>)
    153e:	6851      	ldr	r1, [r2, #4]
    1540:	2380      	movs	r3, #128	; 0x80
    1542:	025b      	lsls	r3, r3, #9
    1544:	430b      	orrs	r3, r1
    1546:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1548:	4b06      	ldr	r3, [pc, #24]	; (1564 <system_gclk_gen_enable+0x54>)
    154a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    154c:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    154e:	2401      	movs	r4, #1
    1550:	e7e6      	b.n	1520 <system_gclk_gen_enable+0x10>
    1552:	2301      	movs	r3, #1
    1554:	e7f0      	b.n	1538 <system_gclk_gen_enable+0x28>
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	40000c00 	.word	0x40000c00
    155c:	0000118d 	.word	0x0000118d
    1560:	40000c04 	.word	0x40000c04
    1564:	000011cd 	.word	0x000011cd

00001568 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    156a:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    156c:	4b22      	ldr	r3, [pc, #136]	; (15f8 <system_gclk_gen_get_hz+0x90>)
    156e:	785b      	ldrb	r3, [r3, #1]
    1570:	b25b      	sxtb	r3, r3
    1572:	2b00      	cmp	r3, #0
    1574:	db34      	blt.n	15e0 <system_gclk_gen_get_hz+0x78>
	return false;
    1576:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1578:	2d00      	cmp	r5, #0
    157a:	d1f7      	bne.n	156c <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    157c:	4b1f      	ldr	r3, [pc, #124]	; (15fc <system_gclk_gen_get_hz+0x94>)
    157e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1580:	4b1f      	ldr	r3, [pc, #124]	; (1600 <system_gclk_gen_get_hz+0x98>)
    1582:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1584:	4b1c      	ldr	r3, [pc, #112]	; (15f8 <system_gclk_gen_get_hz+0x90>)
    1586:	785b      	ldrb	r3, [r3, #1]
    1588:	b25b      	sxtb	r3, r3
    158a:	2b00      	cmp	r3, #0
    158c:	db2a      	blt.n	15e4 <system_gclk_gen_get_hz+0x7c>
	return false;
    158e:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1590:	2c00      	cmp	r4, #0
    1592:	d1f7      	bne.n	1584 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1594:	4e18      	ldr	r6, [pc, #96]	; (15f8 <system_gclk_gen_get_hz+0x90>)
    1596:	6870      	ldr	r0, [r6, #4]
    1598:	04c0      	lsls	r0, r0, #19
    159a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    159c:	4b19      	ldr	r3, [pc, #100]	; (1604 <system_gclk_gen_get_hz+0x9c>)
    159e:	4798      	blx	r3
    15a0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15a2:	4b17      	ldr	r3, [pc, #92]	; (1600 <system_gclk_gen_get_hz+0x98>)
    15a4:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    15a6:	6876      	ldr	r6, [r6, #4]
    15a8:	02f6      	lsls	r6, r6, #11
    15aa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15ac:	4b16      	ldr	r3, [pc, #88]	; (1608 <system_gclk_gen_get_hz+0xa0>)
    15ae:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15b0:	4b11      	ldr	r3, [pc, #68]	; (15f8 <system_gclk_gen_get_hz+0x90>)
    15b2:	785b      	ldrb	r3, [r3, #1]
    15b4:	b25b      	sxtb	r3, r3
    15b6:	2b00      	cmp	r3, #0
    15b8:	db16      	blt.n	15e8 <system_gclk_gen_get_hz+0x80>
	return false;
    15ba:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    15bc:	2b00      	cmp	r3, #0
    15be:	d1f7      	bne.n	15b0 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    15c0:	4b0d      	ldr	r3, [pc, #52]	; (15f8 <system_gclk_gen_get_hz+0x90>)
    15c2:	689c      	ldr	r4, [r3, #8]
    15c4:	0224      	lsls	r4, r4, #8
    15c6:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    15c8:	4b10      	ldr	r3, [pc, #64]	; (160c <system_gclk_gen_get_hz+0xa4>)
    15ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    15cc:	2e00      	cmp	r6, #0
    15ce:	d10d      	bne.n	15ec <system_gclk_gen_get_hz+0x84>
    15d0:	2c01      	cmp	r4, #1
    15d2:	d90b      	bls.n	15ec <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    15d4:	0021      	movs	r1, r4
    15d6:	0028      	movs	r0, r5
    15d8:	4b0d      	ldr	r3, [pc, #52]	; (1610 <system_gclk_gen_get_hz+0xa8>)
    15da:	4798      	blx	r3
    15dc:	0005      	movs	r5, r0
    15de:	e009      	b.n	15f4 <system_gclk_gen_get_hz+0x8c>
		return true;
    15e0:	2501      	movs	r5, #1
    15e2:	e7c9      	b.n	1578 <system_gclk_gen_get_hz+0x10>
    15e4:	2401      	movs	r4, #1
    15e6:	e7d3      	b.n	1590 <system_gclk_gen_get_hz+0x28>
    15e8:	2301      	movs	r3, #1
    15ea:	e7e7      	b.n	15bc <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    15ec:	2e00      	cmp	r6, #0
    15ee:	d001      	beq.n	15f4 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    15f0:	3401      	adds	r4, #1
    15f2:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    15f4:	0028      	movs	r0, r5
    15f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15f8:	40000c00 	.word	0x40000c00
    15fc:	0000118d 	.word	0x0000118d
    1600:	40000c04 	.word	0x40000c04
    1604:	00001221 	.word	0x00001221
    1608:	40000c08 	.word	0x40000c08
    160c:	000011cd 	.word	0x000011cd
    1610:	00001a3d 	.word	0x00001a3d

00001614 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1614:	b510      	push	{r4, lr}
    1616:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1618:	4b06      	ldr	r3, [pc, #24]	; (1634 <system_gclk_chan_enable+0x20>)
    161a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    161c:	4b06      	ldr	r3, [pc, #24]	; (1638 <system_gclk_chan_enable+0x24>)
    161e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1620:	4a06      	ldr	r2, [pc, #24]	; (163c <system_gclk_chan_enable+0x28>)
    1622:	8853      	ldrh	r3, [r2, #2]
    1624:	2180      	movs	r1, #128	; 0x80
    1626:	01c9      	lsls	r1, r1, #7
    1628:	430b      	orrs	r3, r1
    162a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    162c:	4b04      	ldr	r3, [pc, #16]	; (1640 <system_gclk_chan_enable+0x2c>)
    162e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1630:	bd10      	pop	{r4, pc}
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	0000118d 	.word	0x0000118d
    1638:	40000c02 	.word	0x40000c02
    163c:	40000c00 	.word	0x40000c00
    1640:	000011cd 	.word	0x000011cd

00001644 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1644:	b510      	push	{r4, lr}
    1646:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1648:	4b0e      	ldr	r3, [pc, #56]	; (1684 <system_gclk_chan_disable+0x40>)
    164a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    164c:	4b0e      	ldr	r3, [pc, #56]	; (1688 <system_gclk_chan_disable+0x44>)
    164e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1650:	490e      	ldr	r1, [pc, #56]	; (168c <system_gclk_chan_disable+0x48>)
    1652:	884b      	ldrh	r3, [r1, #2]
    1654:	051b      	lsls	r3, r3, #20
    1656:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1658:	884b      	ldrh	r3, [r1, #2]
    165a:	480d      	ldr	r0, [pc, #52]	; (1690 <system_gclk_chan_disable+0x4c>)
    165c:	4003      	ands	r3, r0
    165e:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1660:	884b      	ldrh	r3, [r1, #2]
    1662:	480c      	ldr	r0, [pc, #48]	; (1694 <system_gclk_chan_disable+0x50>)
    1664:	4003      	ands	r3, r0
    1666:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1668:	4b08      	ldr	r3, [pc, #32]	; (168c <system_gclk_chan_disable+0x48>)
    166a:	885b      	ldrh	r3, [r3, #2]
    166c:	045b      	lsls	r3, r3, #17
    166e:	d4fb      	bmi.n	1668 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1670:	4806      	ldr	r0, [pc, #24]	; (168c <system_gclk_chan_disable+0x48>)
    1672:	8841      	ldrh	r1, [r0, #2]
    1674:	0213      	lsls	r3, r2, #8
    1676:	4a06      	ldr	r2, [pc, #24]	; (1690 <system_gclk_chan_disable+0x4c>)
    1678:	400a      	ands	r2, r1
    167a:	4313      	orrs	r3, r2
    167c:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    167e:	4b06      	ldr	r3, [pc, #24]	; (1698 <system_gclk_chan_disable+0x54>)
    1680:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1682:	bd10      	pop	{r4, pc}
    1684:	0000118d 	.word	0x0000118d
    1688:	40000c02 	.word	0x40000c02
    168c:	40000c00 	.word	0x40000c00
    1690:	fffff0ff 	.word	0xfffff0ff
    1694:	ffffbfff 	.word	0xffffbfff
    1698:	000011cd 	.word	0x000011cd

0000169c <system_gclk_chan_set_config>:
{
    169c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    169e:	780c      	ldrb	r4, [r1, #0]
    16a0:	0224      	lsls	r4, r4, #8
    16a2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    16a4:	4b02      	ldr	r3, [pc, #8]	; (16b0 <system_gclk_chan_set_config+0x14>)
    16a6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    16a8:	b2a4      	uxth	r4, r4
    16aa:	4b02      	ldr	r3, [pc, #8]	; (16b4 <system_gclk_chan_set_config+0x18>)
    16ac:	805c      	strh	r4, [r3, #2]
}
    16ae:	bd10      	pop	{r4, pc}
    16b0:	00001645 	.word	0x00001645
    16b4:	40000c00 	.word	0x40000c00

000016b8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    16b8:	b510      	push	{r4, lr}
    16ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16bc:	4b06      	ldr	r3, [pc, #24]	; (16d8 <system_gclk_chan_get_hz+0x20>)
    16be:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16c0:	4b06      	ldr	r3, [pc, #24]	; (16dc <system_gclk_chan_get_hz+0x24>)
    16c2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    16c4:	4b06      	ldr	r3, [pc, #24]	; (16e0 <system_gclk_chan_get_hz+0x28>)
    16c6:	885c      	ldrh	r4, [r3, #2]
    16c8:	0524      	lsls	r4, r4, #20
    16ca:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    16cc:	4b05      	ldr	r3, [pc, #20]	; (16e4 <system_gclk_chan_get_hz+0x2c>)
    16ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    16d0:	0020      	movs	r0, r4
    16d2:	4b05      	ldr	r3, [pc, #20]	; (16e8 <system_gclk_chan_get_hz+0x30>)
    16d4:	4798      	blx	r3
}
    16d6:	bd10      	pop	{r4, pc}
    16d8:	0000118d 	.word	0x0000118d
    16dc:	40000c02 	.word	0x40000c02
    16e0:	40000c00 	.word	0x40000c00
    16e4:	000011cd 	.word	0x000011cd
    16e8:	00001569 	.word	0x00001569

000016ec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    16ec:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    16ee:	78d3      	ldrb	r3, [r2, #3]
    16f0:	2b00      	cmp	r3, #0
    16f2:	d120      	bne.n	1736 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    16f4:	7815      	ldrb	r5, [r2, #0]
    16f6:	2d80      	cmp	r5, #128	; 0x80
    16f8:	d01b      	beq.n	1732 <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    16fa:	062d      	lsls	r5, r5, #24
    16fc:	2380      	movs	r3, #128	; 0x80
    16fe:	025b      	lsls	r3, r3, #9
    1700:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1702:	7853      	ldrb	r3, [r2, #1]
    1704:	2b00      	cmp	r3, #0
    1706:	d001      	beq.n	170c <_system_pinmux_config+0x20>
    1708:	2b02      	cmp	r3, #2
    170a:	d10a      	bne.n	1722 <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    170c:	2380      	movs	r3, #128	; 0x80
    170e:	029b      	lsls	r3, r3, #10
    1710:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1712:	7894      	ldrb	r4, [r2, #2]
    1714:	2c00      	cmp	r4, #0
    1716:	d002      	beq.n	171e <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1718:	23c0      	movs	r3, #192	; 0xc0
    171a:	02db      	lsls	r3, r3, #11
    171c:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    171e:	6041      	str	r1, [r0, #4]
    1720:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1722:	7853      	ldrb	r3, [r2, #1]
    1724:	3b01      	subs	r3, #1
    1726:	b2db      	uxtb	r3, r3
    1728:	2b01      	cmp	r3, #1
    172a:	d806      	bhi.n	173a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    172c:	4b13      	ldr	r3, [pc, #76]	; (177c <_system_pinmux_config+0x90>)
    172e:	401d      	ands	r5, r3
    1730:	e003      	b.n	173a <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    1732:	2500      	movs	r5, #0
    1734:	e7e5      	b.n	1702 <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1736:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1738:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    173a:	040c      	lsls	r4, r1, #16
    173c:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    173e:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1740:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1742:	26a0      	movs	r6, #160	; 0xa0
    1744:	05f6      	lsls	r6, r6, #23
    1746:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1748:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    174a:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    174c:	24d0      	movs	r4, #208	; 0xd0
    174e:	0624      	lsls	r4, r4, #24
    1750:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1752:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1754:	78d3      	ldrb	r3, [r2, #3]
    1756:	2b00      	cmp	r3, #0
    1758:	d10a      	bne.n	1770 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    175a:	036b      	lsls	r3, r5, #13
    175c:	d503      	bpl.n	1766 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    175e:	7893      	ldrb	r3, [r2, #2]
    1760:	2b01      	cmp	r3, #1
    1762:	d006      	beq.n	1772 <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1764:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1766:	7853      	ldrb	r3, [r2, #1]
    1768:	3b01      	subs	r3, #1
    176a:	b2db      	uxtb	r3, r3
    176c:	2b01      	cmp	r3, #1
    176e:	d902      	bls.n	1776 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1770:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    1772:	6181      	str	r1, [r0, #24]
    1774:	e7f7      	b.n	1766 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    1776:	6081      	str	r1, [r0, #8]
}
    1778:	e7fa      	b.n	1770 <_system_pinmux_config+0x84>
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	fffbffff 	.word	0xfffbffff

00001780 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1780:	b510      	push	{r4, lr}
    1782:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    1784:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    1786:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    1788:	2900      	cmp	r1, #0
    178a:	d10b      	bne.n	17a4 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    178c:	01db      	lsls	r3, r3, #7
    178e:	4906      	ldr	r1, [pc, #24]	; (17a8 <system_pinmux_pin_set_config+0x28>)
    1790:	468c      	mov	ip, r1
    1792:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1794:	241f      	movs	r4, #31
    1796:	4020      	ands	r0, r4
    1798:	2101      	movs	r1, #1
    179a:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    179c:	0018      	movs	r0, r3
    179e:	4b03      	ldr	r3, [pc, #12]	; (17ac <system_pinmux_pin_set_config+0x2c>)
    17a0:	4798      	blx	r3
}
    17a2:	bd10      	pop	{r4, pc}
		return NULL;
    17a4:	2300      	movs	r3, #0
    17a6:	e7f5      	b.n	1794 <system_pinmux_pin_set_config+0x14>
    17a8:	41004400 	.word	0x41004400
    17ac:	000016ed 	.word	0x000016ed

000017b0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    17b0:	4770      	bx	lr
	...

000017b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    17b4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    17b6:	4b05      	ldr	r3, [pc, #20]	; (17cc <system_init+0x18>)
    17b8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    17ba:	4b05      	ldr	r3, [pc, #20]	; (17d0 <system_init+0x1c>)
    17bc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    17be:	4b05      	ldr	r3, [pc, #20]	; (17d4 <system_init+0x20>)
    17c0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    17c2:	4b05      	ldr	r3, [pc, #20]	; (17d8 <system_init+0x24>)
    17c4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    17c6:	4b05      	ldr	r3, [pc, #20]	; (17dc <system_init+0x28>)
    17c8:	4798      	blx	r3
}
    17ca:	bd10      	pop	{r4, pc}
    17cc:	00001399 	.word	0x00001399
    17d0:	00001189 	.word	0x00001189
    17d4:	000017b1 	.word	0x000017b1
    17d8:	000017b1 	.word	0x000017b1
    17dc:	000017b1 	.word	0x000017b1

000017e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    17e0:	e7fe      	b.n	17e0 <Dummy_Handler>
	...

000017e4 <Reset_Handler>:
{
    17e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    17e6:	4a23      	ldr	r2, [pc, #140]	; (1874 <Reset_Handler+0x90>)
    17e8:	4b23      	ldr	r3, [pc, #140]	; (1878 <Reset_Handler+0x94>)
    17ea:	429a      	cmp	r2, r3
    17ec:	d009      	beq.n	1802 <Reset_Handler+0x1e>
    17ee:	4b22      	ldr	r3, [pc, #136]	; (1878 <Reset_Handler+0x94>)
    17f0:	4a20      	ldr	r2, [pc, #128]	; (1874 <Reset_Handler+0x90>)
    17f2:	e003      	b.n	17fc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    17f4:	6811      	ldr	r1, [r2, #0]
    17f6:	6019      	str	r1, [r3, #0]
    17f8:	3304      	adds	r3, #4
    17fa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    17fc:	491f      	ldr	r1, [pc, #124]	; (187c <Reset_Handler+0x98>)
    17fe:	428b      	cmp	r3, r1
    1800:	d3f8      	bcc.n	17f4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    1802:	4b1f      	ldr	r3, [pc, #124]	; (1880 <Reset_Handler+0x9c>)
    1804:	e002      	b.n	180c <Reset_Handler+0x28>
                *pDest++ = 0;
    1806:	2200      	movs	r2, #0
    1808:	601a      	str	r2, [r3, #0]
    180a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    180c:	4a1d      	ldr	r2, [pc, #116]	; (1884 <Reset_Handler+0xa0>)
    180e:	4293      	cmp	r3, r2
    1810:	d3f9      	bcc.n	1806 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1812:	4a1d      	ldr	r2, [pc, #116]	; (1888 <Reset_Handler+0xa4>)
    1814:	21ff      	movs	r1, #255	; 0xff
    1816:	4b1d      	ldr	r3, [pc, #116]	; (188c <Reset_Handler+0xa8>)
    1818:	438b      	bics	r3, r1
    181a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    181c:	39fd      	subs	r1, #253	; 0xfd
    181e:	2390      	movs	r3, #144	; 0x90
    1820:	005b      	lsls	r3, r3, #1
    1822:	4a1b      	ldr	r2, [pc, #108]	; (1890 <Reset_Handler+0xac>)
    1824:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1826:	4a1b      	ldr	r2, [pc, #108]	; (1894 <Reset_Handler+0xb0>)
    1828:	78d3      	ldrb	r3, [r2, #3]
    182a:	2503      	movs	r5, #3
    182c:	43ab      	bics	r3, r5
    182e:	2402      	movs	r4, #2
    1830:	4323      	orrs	r3, r4
    1832:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1834:	78d3      	ldrb	r3, [r2, #3]
    1836:	270c      	movs	r7, #12
    1838:	43bb      	bics	r3, r7
    183a:	2608      	movs	r6, #8
    183c:	4333      	orrs	r3, r6
    183e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1840:	4b15      	ldr	r3, [pc, #84]	; (1898 <Reset_Handler+0xb4>)
    1842:	7b98      	ldrb	r0, [r3, #14]
    1844:	2230      	movs	r2, #48	; 0x30
    1846:	4390      	bics	r0, r2
    1848:	2220      	movs	r2, #32
    184a:	4310      	orrs	r0, r2
    184c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    184e:	7b99      	ldrb	r1, [r3, #14]
    1850:	43b9      	bics	r1, r7
    1852:	4331      	orrs	r1, r6
    1854:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1856:	7b9a      	ldrb	r2, [r3, #14]
    1858:	43aa      	bics	r2, r5
    185a:	4322      	orrs	r2, r4
    185c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    185e:	4a0f      	ldr	r2, [pc, #60]	; (189c <Reset_Handler+0xb8>)
    1860:	6851      	ldr	r1, [r2, #4]
    1862:	2380      	movs	r3, #128	; 0x80
    1864:	430b      	orrs	r3, r1
    1866:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1868:	4b0d      	ldr	r3, [pc, #52]	; (18a0 <Reset_Handler+0xbc>)
    186a:	4798      	blx	r3
        main();
    186c:	4b0d      	ldr	r3, [pc, #52]	; (18a4 <Reset_Handler+0xc0>)
    186e:	4798      	blx	r3
    1870:	e7fe      	b.n	1870 <Reset_Handler+0x8c>
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	00001c54 	.word	0x00001c54
    1878:	20000000 	.word	0x20000000
    187c:	2000000c 	.word	0x2000000c
    1880:	2000000c 	.word	0x2000000c
    1884:	200000f8 	.word	0x200000f8
    1888:	e000ed00 	.word	0xe000ed00
    188c:	00000000 	.word	0x00000000
    1890:	41007000 	.word	0x41007000
    1894:	41005000 	.word	0x41005000
    1898:	41004800 	.word	0x41004800
    189c:	41004000 	.word	0x41004000
    18a0:	00001b55 	.word	0x00001b55
    18a4:	00001a01 	.word	0x00001a01

000018a8 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    18a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18aa:	46ce      	mov	lr, r9
    18ac:	4647      	mov	r7, r8
    18ae:	b580      	push	{r7, lr}
    18b0:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    18b2:	ac01      	add	r4, sp, #4
    18b4:	2300      	movs	r3, #0
    18b6:	4698      	mov	r8, r3
    18b8:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    18ba:	2601      	movs	r6, #1
    18bc:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    18be:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    18c0:	0021      	movs	r1, r4
    18c2:	2007      	movs	r0, #7
    18c4:	4d24      	ldr	r5, [pc, #144]	; (1958 <conf_port_pin+0xb0>)
    18c6:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    18c8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    18ca:	0021      	movs	r1, r4
    18cc:	2006      	movs	r0, #6
    18ce:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    18d0:	4f22      	ldr	r7, [pc, #136]	; (195c <conf_port_pin+0xb4>)
    18d2:	2340      	movs	r3, #64	; 0x40
    18d4:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    18d6:	0021      	movs	r1, r4
    18d8:	2001      	movs	r0, #1
    18da:	47a8      	blx	r5
    18dc:	2302      	movs	r3, #2
    18de:	4699      	mov	r9, r3
    18e0:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    18e2:	0021      	movs	r1, r4
    18e4:	2002      	movs	r0, #2
    18e6:	47a8      	blx	r5
    18e8:	2304      	movs	r3, #4
    18ea:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    18ec:	0021      	movs	r1, r4
    18ee:	2003      	movs	r0, #3
    18f0:	47a8      	blx	r5
    18f2:	2308      	movs	r3, #8
    18f4:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    18f6:	4643      	mov	r3, r8
    18f8:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    18fa:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    18fc:	0021      	movs	r1, r4
    18fe:	200f      	movs	r0, #15
    1900:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1902:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    1904:	0021      	movs	r1, r4
    1906:	200e      	movs	r0, #14
    1908:	47a8      	blx	r5
    190a:	2380      	movs	r3, #128	; 0x80
    190c:	01db      	lsls	r3, r3, #7
    190e:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1910:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1912:	464b      	mov	r3, r9
    1914:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1916:	0021      	movs	r1, r4
    1918:	202f      	movs	r0, #47	; 0x2f
    191a:	47a8      	blx	r5
    191c:	2280      	movs	r2, #128	; 0x80
    191e:	0212      	lsls	r2, r2, #8
    1920:	4b0f      	ldr	r3, [pc, #60]	; (1960 <conf_port_pin+0xb8>)
    1922:	619a      	str	r2, [r3, #24]
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1924:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1926:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    1928:	0021      	movs	r1, r4
    192a:	2011      	movs	r0, #17
    192c:	47a8      	blx	r5
    192e:	2380      	movs	r3, #128	; 0x80
    1930:	029b      	lsls	r3, r3, #10
    1932:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1934:	4643      	mov	r3, r8
    1936:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    1938:	0021      	movs	r1, r4
    193a:	2030      	movs	r0, #48	; 0x30
    193c:	47a8      	blx	r5
	
	
	/**************config pin for 27*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    193e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SS27, &config_port_pin);
    1940:	0021      	movs	r1, r4
    1942:	2017      	movs	r0, #23
    1944:	47a8      	blx	r5
    1946:	2380      	movs	r3, #128	; 0x80
    1948:	041b      	lsls	r3, r3, #16
    194a:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(SS27, true);	
} // end conf_port_pin(void)
    194c:	b003      	add	sp, #12
    194e:	bc0c      	pop	{r2, r3}
    1950:	4690      	mov	r8, r2
    1952:	4699      	mov	r9, r3
    1954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	000003c5 	.word	0x000003c5
    195c:	41004400 	.word	0x41004400
    1960:	41004480 	.word	0x41004480

00001964 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    1964:	b500      	push	{lr}
    1966:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1968:	a801      	add	r0, sp, #4
    196a:	2300      	movs	r3, #0
    196c:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    196e:	2201      	movs	r2, #1
    1970:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    1972:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1974:	4b01      	ldr	r3, [pc, #4]	; (197c <clk_osc8m_init+0x18>)
    1976:	4798      	blx	r3
}
    1978:	b003      	add	sp, #12
    197a:	bd00      	pop	{pc}
    197c:	000012b1 	.word	0x000012b1

00001980 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1980:	b500      	push	{lr}
    1982:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1984:	4b0a      	ldr	r3, [pc, #40]	; (19b0 <clk_gclk0_init+0x30>)
    1986:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1988:	2300      	movs	r3, #0
    198a:	4a0a      	ldr	r2, [pc, #40]	; (19b4 <clk_gclk0_init+0x34>)
    198c:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    198e:	a901      	add	r1, sp, #4
    1990:	2206      	movs	r2, #6
    1992:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    1994:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    1996:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1998:	3a05      	subs	r2, #5
    199a:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    199c:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    199e:	2000      	movs	r0, #0
    19a0:	4b05      	ldr	r3, [pc, #20]	; (19b8 <clk_gclk0_init+0x38>)
    19a2:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    19a4:	2000      	movs	r0, #0
    19a6:	4b05      	ldr	r3, [pc, #20]	; (19bc <clk_gclk0_init+0x3c>)
    19a8:	4798      	blx	r3
    19aa:	b005      	add	sp, #20
    19ac:	bd00      	pop	{pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	0000141d 	.word	0x0000141d
    19b4:	40000400 	.word	0x40000400
    19b8:	00001441 	.word	0x00001441
    19bc:	00001511 	.word	0x00001511

000019c0 <sys_clk_init>:
{
    19c0:	b510      	push	{r4, lr}
	clk_osc8m_init();
    19c2:	4b03      	ldr	r3, [pc, #12]	; (19d0 <sys_clk_init+0x10>)
    19c4:	4798      	blx	r3
	clk_gclk0_init();
    19c6:	4b03      	ldr	r3, [pc, #12]	; (19d4 <sys_clk_init+0x14>)
    19c8:	4798      	blx	r3
    delay_init();
    19ca:	4b03      	ldr	r3, [pc, #12]	; (19d8 <sys_clk_init+0x18>)
    19cc:	4798      	blx	r3
}
    19ce:	bd10      	pop	{r4, pc}
    19d0:	00001965 	.word	0x00001965
    19d4:	00001981 	.word	0x00001981
    19d8:	00000359 	.word	0x00000359

000019dc <simSysInit>:
{
    19dc:	b510      	push	{r4, lr}
	system_init();
    19de:	4b04      	ldr	r3, [pc, #16]	; (19f0 <simSysInit+0x14>)
    19e0:	4798      	blx	r3
	sys_clk_init();
    19e2:	4b04      	ldr	r3, [pc, #16]	; (19f4 <simSysInit+0x18>)
    19e4:	4798      	blx	r3
	conf_port_pin();
    19e6:	4b04      	ldr	r3, [pc, #16]	; (19f8 <simSysInit+0x1c>)
    19e8:	4798      	blx	r3
	spi27_initialize();
    19ea:	4b04      	ldr	r3, [pc, #16]	; (19fc <simSysInit+0x20>)
    19ec:	4798      	blx	r3
}
    19ee:	bd10      	pop	{r4, pc}
    19f0:	000017b5 	.word	0x000017b5
    19f4:	000019c1 	.word	0x000019c1
    19f8:	000018a9 	.word	0x000018a9
    19fc:	000001fd 	.word	0x000001fd

00001a00 <main>:
{
    1a00:	b500      	push	{lr}
    1a02:	b085      	sub	sp, #20
    rssi_vals acquired_rssi = {10, 20, 30};
    1a04:	4b09      	ldr	r3, [pc, #36]	; (1a2c <main+0x2c>)
    1a06:	681a      	ldr	r2, [r3, #0]
    1a08:	9202      	str	r2, [sp, #8]
    1a0a:	8899      	ldrh	r1, [r3, #4]
    1a0c:	aa02      	add	r2, sp, #8
    1a0e:	8091      	strh	r1, [r2, #4]
	struct measurement test_data = {40, 10, 30, 40};
    1a10:	689b      	ldr	r3, [r3, #8]
    1a12:	9301      	str	r3, [sp, #4]
    simSysInit();
    1a14:	4b06      	ldr	r3, [pc, #24]	; (1a30 <main+0x30>)
    1a16:	4798      	blx	r3
    delay_ms(100);
    1a18:	2064      	movs	r0, #100	; 0x64
    1a1a:	4b06      	ldr	r3, [pc, #24]	; (1a34 <main+0x34>)
    1a1c:	4798      	blx	r3
		usart_fiber_write(test_data);
    1a1e:	9801      	ldr	r0, [sp, #4]
    1a20:	4b05      	ldr	r3, [pc, #20]	; (1a38 <main+0x38>)
    1a22:	4798      	blx	r3
        delay_ms(100);
    1a24:	2064      	movs	r0, #100	; 0x64
    1a26:	4b03      	ldr	r3, [pc, #12]	; (1a34 <main+0x34>)
    1a28:	4798      	blx	r3
    1a2a:	e7f8      	b.n	1a1e <main+0x1e>
    1a2c:	00001c28 	.word	0x00001c28
    1a30:	000019dd 	.word	0x000019dd
    1a34:	00000395 	.word	0x00000395
    1a38:	00000321 	.word	0x00000321

00001a3c <__udivsi3>:
    1a3c:	2200      	movs	r2, #0
    1a3e:	0843      	lsrs	r3, r0, #1
    1a40:	428b      	cmp	r3, r1
    1a42:	d374      	bcc.n	1b2e <__udivsi3+0xf2>
    1a44:	0903      	lsrs	r3, r0, #4
    1a46:	428b      	cmp	r3, r1
    1a48:	d35f      	bcc.n	1b0a <__udivsi3+0xce>
    1a4a:	0a03      	lsrs	r3, r0, #8
    1a4c:	428b      	cmp	r3, r1
    1a4e:	d344      	bcc.n	1ada <__udivsi3+0x9e>
    1a50:	0b03      	lsrs	r3, r0, #12
    1a52:	428b      	cmp	r3, r1
    1a54:	d328      	bcc.n	1aa8 <__udivsi3+0x6c>
    1a56:	0c03      	lsrs	r3, r0, #16
    1a58:	428b      	cmp	r3, r1
    1a5a:	d30d      	bcc.n	1a78 <__udivsi3+0x3c>
    1a5c:	22ff      	movs	r2, #255	; 0xff
    1a5e:	0209      	lsls	r1, r1, #8
    1a60:	ba12      	rev	r2, r2
    1a62:	0c03      	lsrs	r3, r0, #16
    1a64:	428b      	cmp	r3, r1
    1a66:	d302      	bcc.n	1a6e <__udivsi3+0x32>
    1a68:	1212      	asrs	r2, r2, #8
    1a6a:	0209      	lsls	r1, r1, #8
    1a6c:	d065      	beq.n	1b3a <__udivsi3+0xfe>
    1a6e:	0b03      	lsrs	r3, r0, #12
    1a70:	428b      	cmp	r3, r1
    1a72:	d319      	bcc.n	1aa8 <__udivsi3+0x6c>
    1a74:	e000      	b.n	1a78 <__udivsi3+0x3c>
    1a76:	0a09      	lsrs	r1, r1, #8
    1a78:	0bc3      	lsrs	r3, r0, #15
    1a7a:	428b      	cmp	r3, r1
    1a7c:	d301      	bcc.n	1a82 <__udivsi3+0x46>
    1a7e:	03cb      	lsls	r3, r1, #15
    1a80:	1ac0      	subs	r0, r0, r3
    1a82:	4152      	adcs	r2, r2
    1a84:	0b83      	lsrs	r3, r0, #14
    1a86:	428b      	cmp	r3, r1
    1a88:	d301      	bcc.n	1a8e <__udivsi3+0x52>
    1a8a:	038b      	lsls	r3, r1, #14
    1a8c:	1ac0      	subs	r0, r0, r3
    1a8e:	4152      	adcs	r2, r2
    1a90:	0b43      	lsrs	r3, r0, #13
    1a92:	428b      	cmp	r3, r1
    1a94:	d301      	bcc.n	1a9a <__udivsi3+0x5e>
    1a96:	034b      	lsls	r3, r1, #13
    1a98:	1ac0      	subs	r0, r0, r3
    1a9a:	4152      	adcs	r2, r2
    1a9c:	0b03      	lsrs	r3, r0, #12
    1a9e:	428b      	cmp	r3, r1
    1aa0:	d301      	bcc.n	1aa6 <__udivsi3+0x6a>
    1aa2:	030b      	lsls	r3, r1, #12
    1aa4:	1ac0      	subs	r0, r0, r3
    1aa6:	4152      	adcs	r2, r2
    1aa8:	0ac3      	lsrs	r3, r0, #11
    1aaa:	428b      	cmp	r3, r1
    1aac:	d301      	bcc.n	1ab2 <__udivsi3+0x76>
    1aae:	02cb      	lsls	r3, r1, #11
    1ab0:	1ac0      	subs	r0, r0, r3
    1ab2:	4152      	adcs	r2, r2
    1ab4:	0a83      	lsrs	r3, r0, #10
    1ab6:	428b      	cmp	r3, r1
    1ab8:	d301      	bcc.n	1abe <__udivsi3+0x82>
    1aba:	028b      	lsls	r3, r1, #10
    1abc:	1ac0      	subs	r0, r0, r3
    1abe:	4152      	adcs	r2, r2
    1ac0:	0a43      	lsrs	r3, r0, #9
    1ac2:	428b      	cmp	r3, r1
    1ac4:	d301      	bcc.n	1aca <__udivsi3+0x8e>
    1ac6:	024b      	lsls	r3, r1, #9
    1ac8:	1ac0      	subs	r0, r0, r3
    1aca:	4152      	adcs	r2, r2
    1acc:	0a03      	lsrs	r3, r0, #8
    1ace:	428b      	cmp	r3, r1
    1ad0:	d301      	bcc.n	1ad6 <__udivsi3+0x9a>
    1ad2:	020b      	lsls	r3, r1, #8
    1ad4:	1ac0      	subs	r0, r0, r3
    1ad6:	4152      	adcs	r2, r2
    1ad8:	d2cd      	bcs.n	1a76 <__udivsi3+0x3a>
    1ada:	09c3      	lsrs	r3, r0, #7
    1adc:	428b      	cmp	r3, r1
    1ade:	d301      	bcc.n	1ae4 <__udivsi3+0xa8>
    1ae0:	01cb      	lsls	r3, r1, #7
    1ae2:	1ac0      	subs	r0, r0, r3
    1ae4:	4152      	adcs	r2, r2
    1ae6:	0983      	lsrs	r3, r0, #6
    1ae8:	428b      	cmp	r3, r1
    1aea:	d301      	bcc.n	1af0 <__udivsi3+0xb4>
    1aec:	018b      	lsls	r3, r1, #6
    1aee:	1ac0      	subs	r0, r0, r3
    1af0:	4152      	adcs	r2, r2
    1af2:	0943      	lsrs	r3, r0, #5
    1af4:	428b      	cmp	r3, r1
    1af6:	d301      	bcc.n	1afc <__udivsi3+0xc0>
    1af8:	014b      	lsls	r3, r1, #5
    1afa:	1ac0      	subs	r0, r0, r3
    1afc:	4152      	adcs	r2, r2
    1afe:	0903      	lsrs	r3, r0, #4
    1b00:	428b      	cmp	r3, r1
    1b02:	d301      	bcc.n	1b08 <__udivsi3+0xcc>
    1b04:	010b      	lsls	r3, r1, #4
    1b06:	1ac0      	subs	r0, r0, r3
    1b08:	4152      	adcs	r2, r2
    1b0a:	08c3      	lsrs	r3, r0, #3
    1b0c:	428b      	cmp	r3, r1
    1b0e:	d301      	bcc.n	1b14 <__udivsi3+0xd8>
    1b10:	00cb      	lsls	r3, r1, #3
    1b12:	1ac0      	subs	r0, r0, r3
    1b14:	4152      	adcs	r2, r2
    1b16:	0883      	lsrs	r3, r0, #2
    1b18:	428b      	cmp	r3, r1
    1b1a:	d301      	bcc.n	1b20 <__udivsi3+0xe4>
    1b1c:	008b      	lsls	r3, r1, #2
    1b1e:	1ac0      	subs	r0, r0, r3
    1b20:	4152      	adcs	r2, r2
    1b22:	0843      	lsrs	r3, r0, #1
    1b24:	428b      	cmp	r3, r1
    1b26:	d301      	bcc.n	1b2c <__udivsi3+0xf0>
    1b28:	004b      	lsls	r3, r1, #1
    1b2a:	1ac0      	subs	r0, r0, r3
    1b2c:	4152      	adcs	r2, r2
    1b2e:	1a41      	subs	r1, r0, r1
    1b30:	d200      	bcs.n	1b34 <__udivsi3+0xf8>
    1b32:	4601      	mov	r1, r0
    1b34:	4152      	adcs	r2, r2
    1b36:	4610      	mov	r0, r2
    1b38:	4770      	bx	lr
    1b3a:	e7ff      	b.n	1b3c <__udivsi3+0x100>
    1b3c:	b501      	push	{r0, lr}
    1b3e:	2000      	movs	r0, #0
    1b40:	f000 f806 	bl	1b50 <__aeabi_idiv0>
    1b44:	bd02      	pop	{r1, pc}
    1b46:	46c0      	nop			; (mov r8, r8)

00001b48 <__aeabi_uidivmod>:
    1b48:	2900      	cmp	r1, #0
    1b4a:	d0f7      	beq.n	1b3c <__udivsi3+0x100>
    1b4c:	e776      	b.n	1a3c <__udivsi3>
    1b4e:	4770      	bx	lr

00001b50 <__aeabi_idiv0>:
    1b50:	4770      	bx	lr
    1b52:	46c0      	nop			; (mov r8, r8)

00001b54 <__libc_init_array>:
    1b54:	b570      	push	{r4, r5, r6, lr}
    1b56:	2600      	movs	r6, #0
    1b58:	4d0c      	ldr	r5, [pc, #48]	; (1b8c <__libc_init_array+0x38>)
    1b5a:	4c0d      	ldr	r4, [pc, #52]	; (1b90 <__libc_init_array+0x3c>)
    1b5c:	1b64      	subs	r4, r4, r5
    1b5e:	10a4      	asrs	r4, r4, #2
    1b60:	42a6      	cmp	r6, r4
    1b62:	d109      	bne.n	1b78 <__libc_init_array+0x24>
    1b64:	2600      	movs	r6, #0
    1b66:	f000 f865 	bl	1c34 <_init>
    1b6a:	4d0a      	ldr	r5, [pc, #40]	; (1b94 <__libc_init_array+0x40>)
    1b6c:	4c0a      	ldr	r4, [pc, #40]	; (1b98 <__libc_init_array+0x44>)
    1b6e:	1b64      	subs	r4, r4, r5
    1b70:	10a4      	asrs	r4, r4, #2
    1b72:	42a6      	cmp	r6, r4
    1b74:	d105      	bne.n	1b82 <__libc_init_array+0x2e>
    1b76:	bd70      	pop	{r4, r5, r6, pc}
    1b78:	00b3      	lsls	r3, r6, #2
    1b7a:	58eb      	ldr	r3, [r5, r3]
    1b7c:	4798      	blx	r3
    1b7e:	3601      	adds	r6, #1
    1b80:	e7ee      	b.n	1b60 <__libc_init_array+0xc>
    1b82:	00b3      	lsls	r3, r6, #2
    1b84:	58eb      	ldr	r3, [r5, r3]
    1b86:	4798      	blx	r3
    1b88:	3601      	adds	r6, #1
    1b8a:	e7f2      	b.n	1b72 <__libc_init_array+0x1e>
    1b8c:	00001c40 	.word	0x00001c40
    1b90:	00001c40 	.word	0x00001c40
    1b94:	00001c40 	.word	0x00001c40
    1b98:	00001c44 	.word	0x00001c44

00001b9c <memcpy>:
    1b9c:	2300      	movs	r3, #0
    1b9e:	b510      	push	{r4, lr}
    1ba0:	429a      	cmp	r2, r3
    1ba2:	d100      	bne.n	1ba6 <memcpy+0xa>
    1ba4:	bd10      	pop	{r4, pc}
    1ba6:	5ccc      	ldrb	r4, [r1, r3]
    1ba8:	54c4      	strb	r4, [r0, r3]
    1baa:	3301      	adds	r3, #1
    1bac:	e7f8      	b.n	1ba0 <memcpy+0x4>

00001bae <memset>:
    1bae:	0003      	movs	r3, r0
    1bb0:	1882      	adds	r2, r0, r2
    1bb2:	4293      	cmp	r3, r2
    1bb4:	d100      	bne.n	1bb8 <memset+0xa>
    1bb6:	4770      	bx	lr
    1bb8:	7019      	strb	r1, [r3, #0]
    1bba:	3301      	adds	r3, #1
    1bbc:	e7f9      	b.n	1bb2 <memset+0x4>
    1bbe:	0000      	movs	r0, r0
    1bc0:	42000800 	.word	0x42000800
    1bc4:	42000c00 	.word	0x42000c00
    1bc8:	42001000 	.word	0x42001000
    1bcc:	42001400 	.word	0x42001400
    1bd0:	42001800 	.word	0x42001800
    1bd4:	42001c00 	.word	0x42001c00
    1bd8:	0c0b0a09 	.word	0x0c0b0a09
    1bdc:	00000e0d 	.word	0x00000e0d
    1be0:	00001234 	.word	0x00001234
    1be4:	0000128c 	.word	0x0000128c
    1be8:	0000128c 	.word	0x0000128c
    1bec:	0000122e 	.word	0x0000122e
    1bf0:	0000122e 	.word	0x0000122e
    1bf4:	00001248 	.word	0x00001248
    1bf8:	0000123a 	.word	0x0000123a
    1bfc:	0000124e 	.word	0x0000124e
    1c00:	0000127c 	.word	0x0000127c
    1c04:	00001318 	.word	0x00001318
    1c08:	00001386 	.word	0x00001386
    1c0c:	00001386 	.word	0x00001386
    1c10:	000012f8 	.word	0x000012f8
    1c14:	0000130a 	.word	0x0000130a
    1c18:	00001328 	.word	0x00001328
    1c1c:	000012fc 	.word	0x000012fc
    1c20:	00001338 	.word	0x00001338
    1c24:	00001374 	.word	0x00001374
    1c28:	0014000a 	.word	0x0014000a
    1c2c:	0000001e 	.word	0x0000001e
    1c30:	281e0a28 	.word	0x281e0a28

00001c34 <_init>:
    1c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c3a:	bc08      	pop	{r3}
    1c3c:	469e      	mov	lr, r3
    1c3e:	4770      	bx	lr

00001c40 <__init_array_start>:
    1c40:	000000dd 	.word	0x000000dd

00001c44 <_fini>:
    1c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c4a:	bc08      	pop	{r3}
    1c4c:	469e      	mov	lr, r3
    1c4e:	4770      	bx	lr

00001c50 <__fini_array_start>:
    1c50:	000000b5 	.word	0x000000b5
