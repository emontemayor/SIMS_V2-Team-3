
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028d0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000028d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  2000000c  000028dc  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000118  000029e8  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f5af  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bb2  00000000  00000000  0004f63c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006d50  00000000  00000000  000531ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000580  00000000  00000000  00059f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000898  00000000  00000000  0005a4be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000070f7  00000000  00000000  0005ad56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d79c  00000000  00000000  00061e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d2fe  00000000  00000000  0006f5e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e54  00000000  00000000  000fc8e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 21 00 20 61 20 00 00 5d 20 00 00 5d 20 00 00     .!. a ..] ..] ..
	...
      2c:	5d 20 00 00 00 00 00 00 00 00 00 00 5d 20 00 00     ] ..........] ..
      3c:	5d 20 00 00 5d 20 00 00 5d 20 00 00 5d 20 00 00     ] ..] ..] ..] ..
      4c:	5d 20 00 00 5d 20 00 00 5d 20 00 00 5d 20 00 00     ] ..] ..] ..] ..
      5c:	5d 20 00 00 5d 20 00 00 a5 19 00 00 b5 19 00 00     ] ..] ..........
      6c:	c5 19 00 00 d5 19 00 00 e5 19 00 00 f5 19 00 00     ................
      7c:	5d 20 00 00 5d 20 00 00 5d 20 00 00 5d 20 00 00     ] ..] ..] ..] ..
      8c:	5d 20 00 00 5d 20 00 00 5d 20 00 00 5d 20 00 00     ] ..] ..] ..] ..
      9c:	5d 20 00 00 5d 20 00 00 5d 20 00 00 5d 20 00 00     ] ..] ..] ..] ..
      ac:	5d 20 00 00 00 00 00 00                             ] ......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	000028d0 	.word	0x000028d0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	000028d0 	.word	0x000028d0
     10c:	000028d0 	.word	0x000028d0
     110:	00000000 	.word	0x00000000

00000114 <spi27_read_byte_from_reg>:
		//uint16_t y = spi27_rssi();
		//}

}

uint8_t spi27_read_byte_from_reg (uint8_t reg){
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b085      	sub	sp, #20
     118:	466b      	mov	r3, sp
     11a:	1dd9      	adds	r1, r3, #7
	uint8_t arr = 0;
     11c:	240f      	movs	r4, #15
     11e:	446c      	add	r4, sp
     120:	2300      	movs	r3, #0
     122:	7023      	strb	r3, [r4, #0]
	int value;
	
	status_code_genare_t read_status;
	int8_t *val;
	//Add 1 leading 0s to put module in READ mode
	reg = reg | 0b01000000;
     124:	2340      	movs	r3, #64	; 0x40
     126:	4318      	orrs	r0, r3
     128:	7008      	strb	r0, [r1, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     12a:	4d06      	ldr	r5, [pc, #24]	; (144 <spi27_read_byte_from_reg+0x30>)
     12c:	2680      	movs	r6, #128	; 0x80
     12e:	0436      	lsls	r6, r6, #16
     130:	61ae      	str	r6, [r5, #24]
	
	//read byte from address
	port_pin_set_output_level(SS27, true);
	//Note: added a line to ASF module to assign recieved value to buffer. 
	//ASF implementation was not working.
	read_status = spi_transceive_buffer_wait(&spi27Master, val, read_byte, 2);
     132:	2302      	movs	r3, #2
     134:	0022      	movs	r2, r4
     136:	4804      	ldr	r0, [pc, #16]	; (148 <spi27_read_byte_from_reg+0x34>)
     138:	4f04      	ldr	r7, [pc, #16]	; (14c <spi27_read_byte_from_reg+0x38>)
     13a:	47b8      	blx	r7
	} else {
		port_base->OUTCLR.reg = pin_mask;
     13c:	616e      	str	r6, [r5, #20]
	port_pin_set_output_level(SS27, false);
	return arr;
     13e:	7820      	ldrb	r0, [r4, #0]
	//set sen = 0;
	//set sen = 1; 
}
     140:	b005      	add	sp, #20
     142:	bdf0      	pop	{r4, r5, r6, r7, pc}
     144:	41004400 	.word	0x41004400
     148:	200000bc 	.word	0x200000bc
     14c:	00001469 	.word	0x00001469

00000150 <spi27_write_cmd>:

void spi27_write_cmd (char cmd){
     150:	b530      	push	{r4, r5, lr}
     152:	b083      	sub	sp, #12
     154:	466b      	mov	r3, sp
     156:	1dd9      	adds	r1, r3, #7
	status_code_genare_t write_status;
	int8_t *val;
	//Add 1s to put module in COMMAND mode
	cmd = cmd | 0b11000000;
     158:	2340      	movs	r3, #64	; 0x40
     15a:	425b      	negs	r3, r3
     15c:	4318      	orrs	r0, r3
     15e:	7008      	strb	r0, [r1, #0]
		port_base->OUTSET.reg = pin_mask;
     160:	4c05      	ldr	r4, [pc, #20]	; (178 <spi27_write_cmd+0x28>)
     162:	2580      	movs	r5, #128	; 0x80
     164:	042d      	lsls	r5, r5, #16
     166:	61a5      	str	r5, [r4, #24]
	val = &cmd;
	//read byte from address
	port_pin_set_output_level(SS27, true);	
	write_status = spi_write_buffer_wait(&spi27Master,val,1);
     168:	2201      	movs	r2, #1
     16a:	4804      	ldr	r0, [pc, #16]	; (17c <spi27_write_cmd+0x2c>)
     16c:	4b04      	ldr	r3, [pc, #16]	; (180 <spi27_write_cmd+0x30>)
     16e:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     170:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(SS27, false);	
	//set sen = 0;
	//set sen = 1;
}
     172:	b003      	add	sp, #12
     174:	bd30      	pop	{r4, r5, pc}
     176:	46c0      	nop			; (mov r8, r8)
     178:	41004400 	.word	0x41004400
     17c:	200000bc 	.word	0x200000bc
     180:	0000127d 	.word	0x0000127d

00000184 <spi27_rssi>:

uint16_t spi27_rssi(){
     184:	b510      	push	{r4, lr}
	uint16_t rssi;
	rssi = spi27_read_byte_from_reg(0x23);
     186:	2023      	movs	r0, #35	; 0x23
     188:	4b02      	ldr	r3, [pc, #8]	; (194 <spi27_rssi+0x10>)
     18a:	4798      	blx	r3
	rssi = rssi & 0x0F;
     18c:	230f      	movs	r3, #15
     18e:	4018      	ands	r0, r3
	return rssi;
}
     190:	bd10      	pop	{r4, pc}
     192:	46c0      	nop			; (mov r8, r8)
     194:	00000115 	.word	0x00000115

00000198 <spi27_write_byte_to_reg>:

void spi27_write_byte_to_reg (char byte, uint8_t reg){
     198:	b530      	push	{r4, r5, lr}
     19a:	b083      	sub	sp, #12
	 uint16_t *buf;
	 uint16_t val; 
	 val = 0;
	
	//Add 2 leading 0s to put module in WRITE mode
	reg &= 0x3F;
     19c:	233f      	movs	r3, #63	; 0x3f
     19e:	4019      	ands	r1, r3
	val = (byte<<8) | reg;
     1a0:	0200      	lsls	r0, r0, #8
     1a2:	4308      	orrs	r0, r1
     1a4:	466b      	mov	r3, sp
     1a6:	1d99      	adds	r1, r3, #6
     1a8:	8008      	strh	r0, [r1, #0]
		port_base->OUTSET.reg = pin_mask;
     1aa:	4c05      	ldr	r4, [pc, #20]	; (1c0 <spi27_write_byte_to_reg+0x28>)
     1ac:	2580      	movs	r5, #128	; 0x80
     1ae:	042d      	lsls	r5, r5, #16
     1b0:	61a5      	str	r5, [r4, #24]
	//val = 0x5ABF;
	//prepare buffer with address and data
	buf = &val;
	//write byte to address
	port_pin_set_output_level(SS27, true);	
		spi_write_buffer_wait(&spi27Master, buf, 2);
     1b2:	2202      	movs	r2, #2
     1b4:	4803      	ldr	r0, [pc, #12]	; (1c4 <spi27_write_byte_to_reg+0x2c>)
     1b6:	4b04      	ldr	r3, [pc, #16]	; (1c8 <spi27_write_byte_to_reg+0x30>)
     1b8:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     1ba:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(SS27, false);	
		//set sen = 0;
		//set sen = 1;
	
}
     1bc:	b003      	add	sp, #12
     1be:	bd30      	pop	{r4, r5, pc}
     1c0:	41004400 	.word	0x41004400
     1c4:	200000bc 	.word	0x200000bc
     1c8:	0000127d 	.word	0x0000127d

000001cc <spi27_connect>:
void spi27_connect (){
     1cc:	b570      	push	{r4, r5, r6, lr}
	spi27_write_cmd(CHIP_RESET);
     1ce:	2000      	movs	r0, #0
     1d0:	4d15      	ldr	r5, [pc, #84]	; (228 <spi27_connect+0x5c>)
     1d2:	47a8      	blx	r5
	spi27_write_byte_to_reg(0x80, 0x00); //set reciever unit as master
     1d4:	2100      	movs	r1, #0
     1d6:	2080      	movs	r0, #128	; 0x80
     1d8:	4c14      	ldr	r4, [pc, #80]	; (22c <spi27_connect+0x60>)
     1da:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x12, 0x04); //set waketm bits (sequence b00010011 for waketm bits and to set long wake_tx bit 0x04 for REG.) (pg. 25)
     1dc:	2104      	movs	r1, #4
     1de:	2012      	movs	r0, #18
     1e0:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x00, 0x01); //DISABLE all timers
     1e2:	2101      	movs	r1, #1
     1e4:	2000      	movs	r0, #0
     1e6:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x02, 0x06); //set bitrate to 53 kbit per sec
     1e8:	2106      	movs	r1, #6
     1ea:	2002      	movs	r0, #2
     1ec:	47a0      	blx	r4
	spi27_write_byte_to_reg(0, 0x08);
     1ee:	2108      	movs	r1, #8
     1f0:	2000      	movs	r0, #0
     1f2:	47a0      	blx	r4
	spi27_write_byte_to_reg(0, 0x09);
     1f4:	2109      	movs	r1, #9
     1f6:	2000      	movs	r0, #0
     1f8:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x02, 0x0A);
     1fa:	210a      	movs	r1, #10
     1fc:	2002      	movs	r0, #2
     1fe:	47a0      	blx	r4
	test = spi27_read_byte_from_reg(0x04);
     200:	2004      	movs	r0, #4
     202:	4e0b      	ldr	r6, [pc, #44]	; (230 <spi27_connect+0x64>)
     204:	47b0      	blx	r6
	test = spi27_read_byte_from_reg(0x06);
     206:	2006      	movs	r0, #6
     208:	47b0      	blx	r6
	spi27_write_cmd(WAKE_TX); //begin wakeup call 
     20a:	2004      	movs	r0, #4
     20c:	47a8      	blx	r5
	spi27_write_cmd(SCAN);
     20e:	2006      	movs	r0, #6
     210:	47a8      	blx	r5
	delay_s(1); //delay for 1 sec, listen for client
     212:	20fa      	movs	r0, #250	; 0xfa
     214:	0080      	lsls	r0, r0, #2
     216:	4b07      	ldr	r3, [pc, #28]	; (234 <spi27_connect+0x68>)
     218:	4798      	blx	r3
	spi27_write_byte_to_reg(0x80, 0x20);
     21a:	2120      	movs	r1, #32
     21c:	2080      	movs	r0, #128	; 0x80
     21e:	47a0      	blx	r4
	spi27_write_cmd(STREAM_ON);	
     220:	2017      	movs	r0, #23
     222:	47a8      	blx	r5
}
     224:	bd70      	pop	{r4, r5, r6, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	00000151 	.word	0x00000151
     22c:	00000199 	.word	0x00000199
     230:	00000115 	.word	0x00000115
     234:	00000599 	.word	0x00000599

00000238 <spi27_initialize>:
{
     238:	b5f0      	push	{r4, r5, r6, r7, lr}
     23a:	b091      	sub	sp, #68	; 0x44
	if (spi27InitComp == true)
     23c:	4b38      	ldr	r3, [pc, #224]	; (320 <spi27_initialize+0xe8>)
     23e:	781b      	ldrb	r3, [r3, #0]
     240:	2b00      	cmp	r3, #0
     242:	d001      	beq.n	248 <spi27_initialize+0x10>
}
     244:	b011      	add	sp, #68	; 0x44
     246:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     248:	ac02      	add	r4, sp, #8
     24a:	2601      	movs	r6, #1
     24c:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     24e:	2500      	movs	r5, #0
     250:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     252:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     254:	23c0      	movs	r3, #192	; 0xc0
     256:	039b      	lsls	r3, r3, #14
     258:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     25a:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     25c:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     25e:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     260:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     262:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     264:	2724      	movs	r7, #36	; 0x24
     266:	55e5      	strb	r5, [r4, r7]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     268:	220c      	movs	r2, #12
     26a:	2100      	movs	r1, #0
     26c:	a808      	add	r0, sp, #32
     26e:	4b2d      	ldr	r3, [pc, #180]	; (324 <spi27_initialize+0xec>)
     270:	4798      	blx	r3
    spi27MasterConf.mux_setting = SPI27_PINXMUX;
     272:	2380      	movs	r3, #128	; 0x80
     274:	025b      	lsls	r3, r3, #9
     276:	60e3      	str	r3, [r4, #12]
    spi27MasterConf.pinmux_pad0 = MISO27;
     278:	4b2b      	ldr	r3, [pc, #172]	; (328 <spi27_initialize+0xf0>)
     27a:	62a3      	str	r3, [r4, #40]	; 0x28
    spi27MasterConf.pinmux_pad1 = PINMUX_UNUSED;
     27c:	2301      	movs	r3, #1
     27e:	425b      	negs	r3, r3
     280:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi27MasterConf.pinmux_pad2 = MOSI27;
     282:	4b2a      	ldr	r3, [pc, #168]	; (32c <spi27_initialize+0xf4>)
     284:	6323      	str	r3, [r4, #48]	; 0x30
    spi27MasterConf.pinmux_pad3 = SCK27;
     286:	4b2a      	ldr	r3, [pc, #168]	; (330 <spi27_initialize+0xf8>)
     288:	6363      	str	r3, [r4, #52]	; 0x34
	spi27MasterConf.transfer_mode = SPI_TRANSFER_MODE_1;
     28a:	2380      	movs	r3, #128	; 0x80
     28c:	055b      	lsls	r3, r3, #21
     28e:	60a3      	str	r3, [r4, #8]
	spi27MasterConf.data_order = SPI_DATA_ORDER_MSB;
     290:	6065      	str	r5, [r4, #4]
	spi27MasterConf.generator_source = SPI27_CLK;
     292:	55e5      	strb	r5, [r4, r7]
	spi27MasterConf.mode_specific.master.baudrate = SPI27MAXCLK;
     294:	4b27      	ldr	r3, [pc, #156]	; (334 <spi27_initialize+0xfc>)
     296:	61a3      	str	r3, [r4, #24]
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     298:	4d27      	ldr	r5, [pc, #156]	; (338 <spi27_initialize+0x100>)
     29a:	0022      	movs	r2, r4
     29c:	4927      	ldr	r1, [pc, #156]	; (33c <spi27_initialize+0x104>)
     29e:	0028      	movs	r0, r5
     2a0:	4b27      	ldr	r3, [pc, #156]	; (340 <spi27_initialize+0x108>)
     2a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2a4:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2a6:	0020      	movs	r0, r4
     2a8:	4b26      	ldr	r3, [pc, #152]	; (344 <spi27_initialize+0x10c>)
     2aa:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2ac:	231f      	movs	r3, #31
     2ae:	4018      	ands	r0, r3
     2b0:	4086      	lsls	r6, r0
     2b2:	4b25      	ldr	r3, [pc, #148]	; (348 <spi27_initialize+0x110>)
     2b4:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     2b6:	4b20      	ldr	r3, [pc, #128]	; (338 <spi27_initialize+0x100>)
     2b8:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     2ba:	69db      	ldr	r3, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     2bc:	2b00      	cmp	r3, #0
     2be:	d1fa      	bne.n	2b6 <spi27_initialize+0x7e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2c0:	6823      	ldr	r3, [r4, #0]
     2c2:	2202      	movs	r2, #2
     2c4:	4313      	orrs	r3, r2
     2c6:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     2c8:	2300      	movs	r3, #0
	slave->ss_pin          = config->ss_pin;
     2ca:	4c20      	ldr	r4, [pc, #128]	; (34c <spi27_initialize+0x114>)
     2cc:	3215      	adds	r2, #21
     2ce:	7022      	strb	r2, [r4, #0]
	slave->address_enabled = config->address_enabled;
     2d0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     2d2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     2d4:	3a16      	subs	r2, #22
     2d6:	4669      	mov	r1, sp
     2d8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2da:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2dc:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2de:	2017      	movs	r0, #23
     2e0:	4b1b      	ldr	r3, [pc, #108]	; (350 <spi27_initialize+0x118>)
     2e2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2e4:	7821      	ldrb	r1, [r4, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     2e6:	09ca      	lsrs	r2, r1, #7
	uint8_t group_index = (gpio_pin / 32);
     2e8:	094b      	lsrs	r3, r1, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2ea:	2a00      	cmp	r2, #0
     2ec:	d115      	bne.n	31a <spi27_initialize+0xe2>
		return &(ports[port_index]->Group[group_index]);
     2ee:	01db      	lsls	r3, r3, #7
     2f0:	4a18      	ldr	r2, [pc, #96]	; (354 <spi27_initialize+0x11c>)
     2f2:	4694      	mov	ip, r2
     2f4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2f6:	221f      	movs	r2, #31
     2f8:	400a      	ands	r2, r1
     2fa:	2101      	movs	r1, #1
     2fc:	0008      	movs	r0, r1
     2fe:	4090      	lsls	r0, r2
		port_base->OUTSET.reg = pin_mask;
     300:	6198      	str	r0, [r3, #24]
    spi27InitComp = true;
     302:	4b07      	ldr	r3, [pc, #28]	; (320 <spi27_initialize+0xe8>)
     304:	7019      	strb	r1, [r3, #0]
        read_status = spi_select_slave(&spi27Master, &spi27Slave, true);					
     306:	2201      	movs	r2, #1
     308:	4910      	ldr	r1, [pc, #64]	; (34c <spi27_initialize+0x114>)
     30a:	480b      	ldr	r0, [pc, #44]	; (338 <spi27_initialize+0x100>)
     30c:	4b12      	ldr	r3, [pc, #72]	; (358 <spi27_initialize+0x120>)
     30e:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
     310:	2805      	cmp	r0, #5
     312:	d0f8      	beq.n	306 <spi27_initialize+0xce>
	spi27_connect();
     314:	4b11      	ldr	r3, [pc, #68]	; (35c <spi27_initialize+0x124>)
     316:	4798      	blx	r3
     318:	e794      	b.n	244 <spi27_initialize+0xc>
	} else {
		Assert(false);
		return NULL;
     31a:	2300      	movs	r3, #0
     31c:	e7eb      	b.n	2f6 <spi27_initialize+0xbe>
     31e:	46c0      	nop			; (mov r8, r8)
     320:	20000028 	.word	0x20000028
     324:	000027f7 	.word	0x000027f7
     328:	00160002 	.word	0x00160002
     32c:	00180002 	.word	0x00180002
     330:	00190002 	.word	0x00190002
     334:	000f4240 	.word	0x000f4240
     338:	200000bc 	.word	0x200000bc
     33c:	42001400 	.word	0x42001400
     340:	00001095 	.word	0x00001095
     344:	00001981 	.word	0x00001981
     348:	e000e100 	.word	0xe000e100
     34c:	200000f8 	.word	0x200000f8
     350:	000005c9 	.word	0x000005c9
     354:	41004400 	.word	0x41004400
     358:	00001181 	.word	0x00001181
     35c:	000001cd 	.word	0x000001cd

00000360 <uart245_init>:
 * Return Values(s) : void
 * Description      : Initializes the UART SERCOM for communicating with the
 *  RC2500HP.
 */
void uart245_init(void)
{
     360:	b510      	push	{r4, lr}
     362:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     364:	2380      	movs	r3, #128	; 0x80
     366:	05db      	lsls	r3, r3, #23
     368:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     36a:	2300      	movs	r3, #0
     36c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     36e:	22ff      	movs	r2, #255	; 0xff
     370:	4669      	mov	r1, sp
     372:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     374:	2200      	movs	r2, #0
     376:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     378:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     37a:	2101      	movs	r1, #1
     37c:	2024      	movs	r0, #36	; 0x24
     37e:	466c      	mov	r4, sp
     380:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     382:	3001      	adds	r0, #1
     384:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     386:	3125      	adds	r1, #37	; 0x25
     388:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     38a:	3101      	adds	r1, #1
     38c:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     38e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     390:	3105      	adds	r1, #5
     392:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     394:	3101      	adds	r1, #1
     396:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     398:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     39a:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     39c:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     39e:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     3a0:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     3a2:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     3a4:	2313      	movs	r3, #19
     3a6:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     3a8:	7762      	strb	r2, [r4, #29]
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    
    // initialize UART parameters
    config_usart.baudrate    = UART245_BAUD;
     3aa:	2396      	movs	r3, #150	; 0x96
     3ac:	01db      	lsls	r3, r3, #7
     3ae:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART245_PINMUX;
     3b0:	2390      	movs	r3, #144	; 0x90
     3b2:	035b      	lsls	r3, r3, #13
     3b4:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX245;
     3b6:	4b12      	ldr	r3, [pc, #72]	; (400 <uart245_init+0xa0>)
     3b8:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX245;
     3ba:	4b12      	ldr	r3, [pc, #72]	; (404 <uart245_init+0xa4>)
     3bc:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     3be:	2301      	movs	r3, #1
     3c0:	425b      	negs	r3, r3
     3c2:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     3c4:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.generator_source = UART245_CLK;
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    
    // initialize the uart module until an STATUS_OK is returned
    while (usart_init(&uart245_inst, UART245, &config_usart) != STATUS_OK);
     3c6:	466a      	mov	r2, sp
     3c8:	490f      	ldr	r1, [pc, #60]	; (408 <uart245_init+0xa8>)
     3ca:	4810      	ldr	r0, [pc, #64]	; (40c <uart245_init+0xac>)
     3cc:	4b10      	ldr	r3, [pc, #64]	; (410 <uart245_init+0xb0>)
     3ce:	4798      	blx	r3
     3d0:	2800      	cmp	r0, #0
     3d2:	d1f8      	bne.n	3c6 <uart245_init+0x66>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     3d4:	4b0d      	ldr	r3, [pc, #52]	; (40c <uart245_init+0xac>)
     3d6:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     3d8:	0020      	movs	r0, r4
     3da:	4b0e      	ldr	r3, [pc, #56]	; (414 <uart245_init+0xb4>)
     3dc:	4798      	blx	r3
     3de:	231f      	movs	r3, #31
     3e0:	4018      	ands	r0, r3
     3e2:	3b1e      	subs	r3, #30
     3e4:	4083      	lsls	r3, r0
     3e6:	4a0c      	ldr	r2, [pc, #48]	; (418 <uart245_init+0xb8>)
     3e8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     3ea:	4b08      	ldr	r3, [pc, #32]	; (40c <uart245_init+0xac>)
     3ec:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     3ee:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     3f0:	2b00      	cmp	r3, #0
     3f2:	d1fa      	bne.n	3ea <uart245_init+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     3f4:	6823      	ldr	r3, [r4, #0]
     3f6:	2202      	movs	r2, #2
     3f8:	4313      	orrs	r3, r2
     3fa:	6023      	str	r3, [r4, #0]
    
    usart_enable(&uart245_inst);
}
     3fc:	b010      	add	sp, #64	; 0x40
     3fe:	bd10      	pop	{r4, pc}
     400:	00080002 	.word	0x00080002
     404:	00090002 	.word	0x00090002
     408:	42000800 	.word	0x42000800
     40c:	2000002c 	.word	0x2000002c
     410:	00000b31 	.word	0x00000b31
     414:	00001981 	.word	0x00001981
     418:	e000e100 	.word	0xe000e100

0000041c <uart245_wait_prompt>:
 * Description      : Waits for the prompt character from the RC2500HP,
 *  the '>' character. Returns a ASF status code based on the result of UART
 *  functions.
 */
status_code_genare_t uart245_wait_prompt(void)
{
     41c:	b510      	push	{r4, lr}
     41e:	e00a      	b.n	436 <uart245_wait_prompt+0x1a>
        if((stat_val != STATUS_OK) && (stat_val != STATUS_ERR_TIMEOUT))
            return stat_val;
        
        /* if the received character is not the module's prompt character, 
         * wait some more */
        if(uart245_rx_buff[0] != '>')
     420:	4b0d      	ldr	r3, [pc, #52]	; (458 <uart245_wait_prompt+0x3c>)
     422:	781b      	ldrb	r3, [r3, #0]
     424:	2b3e      	cmp	r3, #62	; 0x3e
     426:	d014      	beq.n	452 <uart245_wait_prompt+0x36>
            wait_time--;
        else
            return STATUS_OK;
        
        // delay a millisecond
        delay_ms(1);
     428:	2001      	movs	r0, #1
     42a:	4b0c      	ldr	r3, [pc, #48]	; (45c <uart245_wait_prompt+0x40>)
     42c:	4798      	blx	r3
        
    }while (uart245_rx_buff[0] != '>');
     42e:	4b0a      	ldr	r3, [pc, #40]	; (458 <uart245_wait_prompt+0x3c>)
     430:	781b      	ldrb	r3, [r3, #0]
     432:	2b3e      	cmp	r3, #62	; 0x3e
     434:	d00b      	beq.n	44e <uart245_wait_prompt+0x32>
        uart245_rx_buff[0] = 0xFF;
     436:	4908      	ldr	r1, [pc, #32]	; (458 <uart245_wait_prompt+0x3c>)
     438:	23ff      	movs	r3, #255	; 0xff
     43a:	700b      	strb	r3, [r1, #0]
        stat_val = usart_read_buffer_wait(&uart245_inst, uart245_rx_buff, 1);
     43c:	2201      	movs	r2, #1
     43e:	4808      	ldr	r0, [pc, #32]	; (460 <uart245_wait_prompt+0x44>)
     440:	4b08      	ldr	r3, [pc, #32]	; (464 <uart245_wait_prompt+0x48>)
     442:	4798      	blx	r3
        if((stat_val != STATUS_OK) && (stat_val != STATUS_ERR_TIMEOUT))
     444:	2800      	cmp	r0, #0
     446:	d0eb      	beq.n	420 <uart245_wait_prompt+0x4>
     448:	2812      	cmp	r0, #18
     44a:	d0e9      	beq.n	420 <uart245_wait_prompt+0x4>
     44c:	e002      	b.n	454 <uart245_wait_prompt+0x38>
    
    return STATUS_ABORTED;
     44e:	2004      	movs	r0, #4
     450:	e000      	b.n	454 <uart245_wait_prompt+0x38>
            return STATUS_OK;
     452:	2000      	movs	r0, #0
}
     454:	bd10      	pop	{r4, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	20000060 	.word	0x20000060
     45c:	00000599 	.word	0x00000599
     460:	2000002c 	.word	0x2000002c
     464:	00000d15 	.word	0x00000d15

00000468 <uart245_enter_config>:
 * Description      : Enters the config mode of the RC2500HP. Refer to pg44 of
 *  the RC2500HP datasheet for enter/exiting configuration mode. Returns a ASF 
 *  status code based on the result of UART functions.
 */
status_code_genare_t uart245_enter_config(void)
{
     468:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTCLR.reg = pin_mask;
     46a:	4c07      	ldr	r4, [pc, #28]	; (488 <uart245_enter_config+0x20>)
     46c:	2540      	movs	r5, #64	; 0x40
     46e:	6165      	str	r5, [r4, #20]
    
    // pull the CONFIG pin low to begin configuration mode
    port_pin_set_output_level(CONFIG245, false);
    
    // wait for the module to return a prompt '>' character
    stat_val = uart245_wait_prompt();
     470:	4b06      	ldr	r3, [pc, #24]	; (48c <uart245_enter_config+0x24>)
     472:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     474:	61a5      	str	r5, [r4, #24]
    // set the CONFIG pin back high
    port_pin_set_output_level(CONFIG245, true);
    
    /* if a character wasn't received before the uart's time out or another
     * error occurred, return that error */
    if(stat_val != STATUS_OK)
     476:	2800      	cmp	r0, #0
     478:	d104      	bne.n	484 <uart245_enter_config+0x1c>
        return stat_val;
        
    /* if the received character is not the module's prompt character, 
     * return an error */
    if(uart245_rx_buff[0] != '>')
     47a:	4b05      	ldr	r3, [pc, #20]	; (490 <uart245_enter_config+0x28>)
     47c:	781b      	ldrb	r3, [r3, #0]
     47e:	2b3e      	cmp	r3, #62	; 0x3e
     480:	d000      	beq.n	484 <uart245_enter_config+0x1c>
        return STATUS_ABORTED;
     482:	3004      	adds	r0, #4
        
    // else return the stat_val if everything was OK
    return stat_val;
}
     484:	bd70      	pop	{r4, r5, r6, pc}
     486:	46c0      	nop			; (mov r8, r8)
     488:	41004400 	.word	0x41004400
     48c:	0000041d 	.word	0x0000041d
     490:	20000060 	.word	0x20000060

00000494 <uart245_exit_config>:
 * Description      : Exits the config mode of the RC2500HP. Refer to pg44 of
 *  the RC2500HP datasheet for enter/exiting configuration mode. Returns a ASF
 *  status code based on the result of UART functions.
 */
status_code_genare_t uart245_exit_config(void)
{
     494:	b510      	push	{r4, lr}
    status_code_genare_t stat_val;
    
    // send an 'X' to indicate end of CONFIG mode
    do 
    {
        stat_val = usart_write_wait(&uart245_inst, 'X');
     496:	2158      	movs	r1, #88	; 0x58
     498:	4805      	ldr	r0, [pc, #20]	; (4b0 <uart245_exit_config+0x1c>)
     49a:	4b06      	ldr	r3, [pc, #24]	; (4b4 <uart245_exit_config+0x20>)
     49c:	4798      	blx	r3
     49e:	0004      	movs	r4, r0
    } while (stat_val == STATUS_BUSY);
     4a0:	2805      	cmp	r0, #5
     4a2:	d0f8      	beq.n	496 <uart245_exit_config+0x2>
    
    /* wait one millisecond so the module can return to IDLE state
     * refer to page 44 of RC2500HP-TM datasheet for timing info */
    delay_ms(1);
     4a4:	2001      	movs	r0, #1
     4a6:	4b04      	ldr	r3, [pc, #16]	; (4b8 <uart245_exit_config+0x24>)
     4a8:	4798      	blx	r3
    
    return stat_val;
}
     4aa:	0020      	movs	r0, r4
     4ac:	bd10      	pop	{r4, pc}
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	2000002c 	.word	0x2000002c
     4b4:	00000c75 	.word	0x00000c75
     4b8:	00000599 	.word	0x00000599

000004bc <uart245_config_get_rssi>:
 * Description      : Sends an RSSI read config command to
 *  the RC2500HP, reads the output RSSI byte, converts it based on the equation
 *  on pg 51 of the RC2500HP datasheet, and returns the float.
 */
float uart245_config_get_rssi(void)
{
     4bc:	b510      	push	{r4, lr}
     4be:	b082      	sub	sp, #8
    
    uint8_t ret_val = 0;
     4c0:	2200      	movs	r2, #0
     4c2:	466b      	mov	r3, sp
     4c4:	71da      	strb	r2, [r3, #7]

    // send an 'S' to get the RSSI value, wait until the uart is successful
    while(usart_write_wait(&uart245_inst, 'S') == STATUS_BUSY);
     4c6:	2153      	movs	r1, #83	; 0x53
     4c8:	480d      	ldr	r0, [pc, #52]	; (500 <uart245_config_get_rssi+0x44>)
     4ca:	4b0e      	ldr	r3, [pc, #56]	; (504 <uart245_config_get_rssi+0x48>)
     4cc:	4798      	blx	r3
     4ce:	2805      	cmp	r0, #5
     4d0:	d0f9      	beq.n	4c6 <uart245_config_get_rssi+0xa>
    
    usart_read_buffer_wait(&uart245_inst, &ret_val, 1);
     4d2:	466b      	mov	r3, sp
     4d4:	1ddc      	adds	r4, r3, #7
     4d6:	2201      	movs	r2, #1
     4d8:	0021      	movs	r1, r4
     4da:	4809      	ldr	r0, [pc, #36]	; (500 <uart245_config_get_rssi+0x44>)
     4dc:	4b0a      	ldr	r3, [pc, #40]	; (508 <uart245_config_get_rssi+0x4c>)
     4de:	4798      	blx	r3
    
    // wait for the module to return a prompt '>' character
    uart245_wait_prompt();
     4e0:	4b0a      	ldr	r3, [pc, #40]	; (50c <uart245_config_get_rssi+0x50>)
     4e2:	4798      	blx	r3
    
    return ((-1.0f) * (((float) ret_val) / 2.00f));
     4e4:	7820      	ldrb	r0, [r4, #0]
     4e6:	4b0a      	ldr	r3, [pc, #40]	; (510 <uart245_config_get_rssi+0x54>)
     4e8:	4798      	blx	r3
     4ea:	21fc      	movs	r1, #252	; 0xfc
     4ec:	0589      	lsls	r1, r1, #22
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <uart245_config_get_rssi+0x58>)
     4f0:	4798      	blx	r3
     4f2:	2380      	movs	r3, #128	; 0x80
     4f4:	061b      	lsls	r3, r3, #24
     4f6:	469c      	mov	ip, r3
     4f8:	4460      	add	r0, ip
}
     4fa:	b002      	add	sp, #8
     4fc:	bd10      	pop	{r4, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	2000002c 	.word	0x2000002c
     504:	00000c75 	.word	0x00000c75
     508:	00000d15 	.word	0x00000d15
     50c:	0000041d 	.word	0x0000041d
     510:	000026d5 	.word	0x000026d5
     514:	00002455 	.word	0x00002455

00000518 <uart245_rssi>:
 * Return Values(s) : int16_t
 * Description      : Gets an RSSI value from the RC2500HP and returns
 *  it as a 2 byte int.
 */
int16_t uart245_rssi(void)
{
     518:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTCLR.reg = pin_mask;
     51a:	4d0a      	ldr	r5, [pc, #40]	; (544 <uart245_rssi+0x2c>)
     51c:	2680      	movs	r6, #128	; 0x80
     51e:	616e      	str	r6, [r5, #20]
    float float_val = 0;
    int16_t ret_val = 0;
    
    // reset the device to guarantee entry into config mode
    port_pin_set_output_level(RESET245, false);
    delay_ms(10);
     520:	200a      	movs	r0, #10
     522:	4c09      	ldr	r4, [pc, #36]	; (548 <uart245_rssi+0x30>)
     524:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
     526:	61ae      	str	r6, [r5, #24]
    port_pin_set_output_level(RESET245, true);
    delay_ms(4);
     528:	2004      	movs	r0, #4
     52a:	47a0      	blx	r4
    
    // enter the RC2500HP's config mode
    uart245_enter_config();
     52c:	4b07      	ldr	r3, [pc, #28]	; (54c <uart245_rssi+0x34>)
     52e:	4798      	blx	r3
    
    // get the RSSI
    float_val = uart245_config_get_rssi();
     530:	4b07      	ldr	r3, [pc, #28]	; (550 <uart245_rssi+0x38>)
     532:	4798      	blx	r3
     534:	1c04      	adds	r4, r0, #0
    
    uart245_exit_config();
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <uart245_rssi+0x3c>)
     538:	4798      	blx	r3
    
    // cast the float RSSI to a 2 byte int RSSI
    ret_val = (int16_t) float_val;
     53a:	1c20      	adds	r0, r4, #0
     53c:	4b06      	ldr	r3, [pc, #24]	; (558 <uart245_rssi+0x40>)
     53e:	4798      	blx	r3
     540:	b200      	sxth	r0, r0
    
    return ret_val;
}
     542:	bd70      	pop	{r4, r5, r6, pc}
     544:	41004400 	.word	0x41004400
     548:	00000599 	.word	0x00000599
     54c:	00000469 	.word	0x00000469
     550:	000004bd 	.word	0x000004bd
     554:	00000495 	.word	0x00000495
     558:	00002695 	.word	0x00002695

0000055c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     55c:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     55e:	2000      	movs	r0, #0
     560:	4b08      	ldr	r3, [pc, #32]	; (584 <delay_init+0x28>)
     562:	4798      	blx	r3
	cycles_per_ms /= 1000;
     564:	4c08      	ldr	r4, [pc, #32]	; (588 <delay_init+0x2c>)
     566:	21fa      	movs	r1, #250	; 0xfa
     568:	0089      	lsls	r1, r1, #2
     56a:	47a0      	blx	r4
     56c:	4b07      	ldr	r3, [pc, #28]	; (58c <delay_init+0x30>)
     56e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     570:	21fa      	movs	r1, #250	; 0xfa
     572:	0089      	lsls	r1, r1, #2
     574:	47a0      	blx	r4
     576:	4b06      	ldr	r3, [pc, #24]	; (590 <delay_init+0x34>)
     578:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     57a:	2205      	movs	r2, #5
     57c:	4b05      	ldr	r3, [pc, #20]	; (594 <delay_init+0x38>)
     57e:	601a      	str	r2, [r3, #0]
}
     580:	bd10      	pop	{r4, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	00001de5 	.word	0x00001de5
     588:	000022e9 	.word	0x000022e9
     58c:	20000000 	.word	0x20000000
     590:	20000004 	.word	0x20000004
     594:	e000e010 	.word	0xe000e010

00000598 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     598:	e000      	b.n	59c <delay_cycles_ms+0x4>
{
     59a:	0010      	movs	r0, r2
	while (n--) {
     59c:	1e42      	subs	r2, r0, #1
     59e:	2800      	cmp	r0, #0
     5a0:	d00c      	beq.n	5bc <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     5a2:	4b07      	ldr	r3, [pc, #28]	; (5c0 <delay_cycles_ms+0x28>)
     5a4:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     5a6:	2b00      	cmp	r3, #0
     5a8:	d0f7      	beq.n	59a <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     5aa:	4906      	ldr	r1, [pc, #24]	; (5c4 <delay_cycles_ms+0x2c>)
     5ac:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     5ae:	2300      	movs	r3, #0
     5b0:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5b2:	4b04      	ldr	r3, [pc, #16]	; (5c4 <delay_cycles_ms+0x2c>)
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	03db      	lsls	r3, r3, #15
     5b8:	d5fb      	bpl.n	5b2 <delay_cycles_ms+0x1a>
     5ba:	e7ee      	b.n	59a <delay_cycles_ms+0x2>
	}
}
     5bc:	4770      	bx	lr
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	20000000 	.word	0x20000000
     5c4:	e000e010 	.word	0xe000e010

000005c8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     5c8:	b500      	push	{lr}
     5ca:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5cc:	ab01      	add	r3, sp, #4
     5ce:	2280      	movs	r2, #128	; 0x80
     5d0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     5d2:	780a      	ldrb	r2, [r1, #0]
     5d4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     5d6:	784a      	ldrb	r2, [r1, #1]
     5d8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     5da:	788a      	ldrb	r2, [r1, #2]
     5dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     5de:	0019      	movs	r1, r3
     5e0:	4b01      	ldr	r3, [pc, #4]	; (5e8 <port_pin_set_config+0x20>)
     5e2:	4798      	blx	r3
}
     5e4:	b003      	add	sp, #12
     5e6:	bd00      	pop	{pc}
     5e8:	00001ffd 	.word	0x00001ffd

000005ec <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ee:	46de      	mov	lr, fp
     5f0:	4657      	mov	r7, sl
     5f2:	464e      	mov	r6, r9
     5f4:	4645      	mov	r5, r8
     5f6:	b5e0      	push	{r5, r6, r7, lr}
     5f8:	b085      	sub	sp, #20
     5fa:	4689      	mov	r9, r1
     5fc:	0016      	movs	r6, r2
     5fe:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     600:	2200      	movs	r2, #0
     602:	2300      	movs	r3, #0
     604:	2100      	movs	r1, #0
     606:	468b      	mov	fp, r1
     608:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     60a:	253f      	movs	r5, #63	; 0x3f
     60c:	9600      	str	r6, [sp, #0]
     60e:	9701      	str	r7, [sp, #4]
     610:	9002      	str	r0, [sp, #8]
     612:	4649      	mov	r1, r9
     614:	9103      	str	r1, [sp, #12]
     616:	e011      	b.n	63c <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     618:	2120      	movs	r1, #32
     61a:	1b49      	subs	r1, r1, r5
     61c:	2400      	movs	r4, #0
     61e:	3401      	adds	r4, #1
     620:	40cc      	lsrs	r4, r1
     622:	e013      	b.n	64c <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     624:	9800      	ldr	r0, [sp, #0]
     626:	9901      	ldr	r1, [sp, #4]
     628:	1a12      	subs	r2, r2, r0
     62a:	418b      	sbcs	r3, r1
			q |= bit_shift;
     62c:	4659      	mov	r1, fp
     62e:	4660      	mov	r0, ip
     630:	4301      	orrs	r1, r0
     632:	468b      	mov	fp, r1
     634:	4651      	mov	r1, sl
     636:	4321      	orrs	r1, r4
     638:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     63a:	3d01      	subs	r5, #1
     63c:	2d00      	cmp	r5, #0
     63e:	db23      	blt.n	688 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     640:	2120      	movs	r1, #32
     642:	4249      	negs	r1, r1
     644:	1869      	adds	r1, r5, r1
     646:	d4e7      	bmi.n	618 <long_division+0x2c>
     648:	2401      	movs	r4, #1
     64a:	408c      	lsls	r4, r1
     64c:	2101      	movs	r1, #1
     64e:	40a9      	lsls	r1, r5
     650:	468c      	mov	ip, r1
		r = r << 1;
     652:	1892      	adds	r2, r2, r2
     654:	415b      	adcs	r3, r3
     656:	0010      	movs	r0, r2
     658:	0019      	movs	r1, r3
		if (n & bit_shift) {
     65a:	9e02      	ldr	r6, [sp, #8]
     65c:	4667      	mov	r7, ip
     65e:	403e      	ands	r6, r7
     660:	46b1      	mov	r9, r6
     662:	9e03      	ldr	r6, [sp, #12]
     664:	4026      	ands	r6, r4
     666:	46b0      	mov	r8, r6
     668:	464e      	mov	r6, r9
     66a:	4647      	mov	r7, r8
     66c:	433e      	orrs	r6, r7
     66e:	d003      	beq.n	678 <long_division+0x8c>
			r |= 0x01;
     670:	2601      	movs	r6, #1
     672:	4306      	orrs	r6, r0
     674:	0032      	movs	r2, r6
     676:	000b      	movs	r3, r1
		if (r >= d) {
     678:	9800      	ldr	r0, [sp, #0]
     67a:	9901      	ldr	r1, [sp, #4]
     67c:	4299      	cmp	r1, r3
     67e:	d8dc      	bhi.n	63a <long_division+0x4e>
     680:	d1d0      	bne.n	624 <long_division+0x38>
     682:	4290      	cmp	r0, r2
     684:	d8d9      	bhi.n	63a <long_division+0x4e>
     686:	e7cd      	b.n	624 <long_division+0x38>
		}
	}

	return q;
}
     688:	4658      	mov	r0, fp
     68a:	4651      	mov	r1, sl
     68c:	b005      	add	sp, #20
     68e:	bc3c      	pop	{r2, r3, r4, r5}
     690:	4690      	mov	r8, r2
     692:	4699      	mov	r9, r3
     694:	46a2      	mov	sl, r4
     696:	46ab      	mov	fp, r5
     698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000069a <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     69a:	0849      	lsrs	r1, r1, #1
     69c:	4281      	cmp	r1, r0
     69e:	d201      	bcs.n	6a4 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6a0:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     6a2:	4770      	bx	lr
     6a4:	2300      	movs	r3, #0
     6a6:	e002      	b.n	6ae <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     6a8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     6aa:	3301      	adds	r3, #1
     6ac:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     6ae:	4281      	cmp	r1, r0
     6b0:	d2fa      	bcs.n	6a8 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     6b2:	3b01      	subs	r3, #1
     6b4:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     6b6:	2bff      	cmp	r3, #255	; 0xff
     6b8:	d901      	bls.n	6be <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6ba:	2040      	movs	r0, #64	; 0x40
     6bc:	e7f1      	b.n	6a2 <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     6be:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     6c0:	2000      	movs	r0, #0
     6c2:	e7ee      	b.n	6a2 <_sercom_get_sync_baud_val+0x8>

000006c4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     6c4:	b570      	push	{r4, r5, r6, lr}
     6c6:	b082      	sub	sp, #8
     6c8:	000c      	movs	r4, r1
     6ca:	0015      	movs	r5, r2
     6cc:	aa06      	add	r2, sp, #24
     6ce:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     6d0:	0002      	movs	r2, r0
     6d2:	434a      	muls	r2, r1
     6d4:	42a2      	cmp	r2, r4
     6d6:	d902      	bls.n	6de <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6d8:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     6da:	b002      	add	sp, #8
     6dc:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     6de:	2b00      	cmp	r3, #0
     6e0:	d114      	bne.n	70c <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     6e2:	0002      	movs	r2, r0
     6e4:	0008      	movs	r0, r1
     6e6:	2100      	movs	r1, #0
     6e8:	4e1b      	ldr	r6, [pc, #108]	; (758 <_sercom_get_async_baud_val+0x94>)
     6ea:	47b0      	blx	r6
     6ec:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     6ee:	0022      	movs	r2, r4
     6f0:	2300      	movs	r3, #0
     6f2:	2000      	movs	r0, #0
     6f4:	4c19      	ldr	r4, [pc, #100]	; (75c <_sercom_get_async_baud_val+0x98>)
     6f6:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     6f8:	2200      	movs	r2, #0
     6fa:	2301      	movs	r3, #1
     6fc:	1a12      	subs	r2, r2, r0
     6fe:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     700:	0c10      	lsrs	r0, r2, #16
     702:	041b      	lsls	r3, r3, #16
     704:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     706:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     708:	2000      	movs	r0, #0
     70a:	e7e6      	b.n	6da <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     70c:	2b01      	cmp	r3, #1
     70e:	d001      	beq.n	714 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     710:	2000      	movs	r0, #0
     712:	e7f8      	b.n	706 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     714:	000a      	movs	r2, r1
     716:	2300      	movs	r3, #0
     718:	2100      	movs	r1, #0
     71a:	4e0f      	ldr	r6, [pc, #60]	; (758 <_sercom_get_async_baud_val+0x94>)
     71c:	47b0      	blx	r6
     71e:	0002      	movs	r2, r0
     720:	000b      	movs	r3, r1
     722:	9200      	str	r2, [sp, #0]
     724:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     726:	0020      	movs	r0, r4
     728:	2100      	movs	r1, #0
     72a:	4e0c      	ldr	r6, [pc, #48]	; (75c <_sercom_get_async_baud_val+0x98>)
     72c:	47b0      	blx	r6
     72e:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     730:	2380      	movs	r3, #128	; 0x80
     732:	019b      	lsls	r3, r3, #6
     734:	4298      	cmp	r0, r3
     736:	d901      	bls.n	73c <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     738:	2040      	movs	r0, #64	; 0x40
     73a:	e7ce      	b.n	6da <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     73c:	0f61      	lsrs	r1, r4, #29
     73e:	00e0      	lsls	r0, r4, #3
     740:	9a00      	ldr	r2, [sp, #0]
     742:	9b01      	ldr	r3, [sp, #4]
     744:	4c05      	ldr	r4, [pc, #20]	; (75c <_sercom_get_async_baud_val+0x98>)
     746:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     748:	b2c0      	uxtb	r0, r0
     74a:	00f3      	lsls	r3, r6, #3
     74c:	b2db      	uxtb	r3, r3
     74e:	1ac0      	subs	r0, r0, r3
     750:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     752:	0340      	lsls	r0, r0, #13
     754:	4330      	orrs	r0, r6
     756:	e7d6      	b.n	706 <_sercom_get_async_baud_val+0x42>
     758:	00002401 	.word	0x00002401
     75c:	000005ed 	.word	0x000005ed

00000760 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     760:	b510      	push	{r4, lr}
     762:	b082      	sub	sp, #8
     764:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     766:	4b0e      	ldr	r3, [pc, #56]	; (7a0 <sercom_set_gclk_generator+0x40>)
     768:	781b      	ldrb	r3, [r3, #0]
     76a:	2b00      	cmp	r3, #0
     76c:	d007      	beq.n	77e <sercom_set_gclk_generator+0x1e>
     76e:	2900      	cmp	r1, #0
     770:	d105      	bne.n	77e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     772:	4b0b      	ldr	r3, [pc, #44]	; (7a0 <sercom_set_gclk_generator+0x40>)
     774:	785b      	ldrb	r3, [r3, #1]
     776:	4283      	cmp	r3, r0
     778:	d010      	beq.n	79c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     77a:	201d      	movs	r0, #29
     77c:	e00c      	b.n	798 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     77e:	a901      	add	r1, sp, #4
     780:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     782:	2013      	movs	r0, #19
     784:	4b07      	ldr	r3, [pc, #28]	; (7a4 <sercom_set_gclk_generator+0x44>)
     786:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     788:	2013      	movs	r0, #19
     78a:	4b07      	ldr	r3, [pc, #28]	; (7a8 <sercom_set_gclk_generator+0x48>)
     78c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     78e:	4b04      	ldr	r3, [pc, #16]	; (7a0 <sercom_set_gclk_generator+0x40>)
     790:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     792:	2201      	movs	r2, #1
     794:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     796:	2000      	movs	r0, #0
}
     798:	b002      	add	sp, #8
     79a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     79c:	2000      	movs	r0, #0
     79e:	e7fb      	b.n	798 <sercom_set_gclk_generator+0x38>
     7a0:	20000080 	.word	0x20000080
     7a4:	00001f19 	.word	0x00001f19
     7a8:	00001e91 	.word	0x00001e91

000007ac <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7ac:	4b40      	ldr	r3, [pc, #256]	; (8b0 <_sercom_get_default_pad+0x104>)
     7ae:	4298      	cmp	r0, r3
     7b0:	d031      	beq.n	816 <_sercom_get_default_pad+0x6a>
     7b2:	d90a      	bls.n	7ca <_sercom_get_default_pad+0x1e>
     7b4:	4b3f      	ldr	r3, [pc, #252]	; (8b4 <_sercom_get_default_pad+0x108>)
     7b6:	4298      	cmp	r0, r3
     7b8:	d04d      	beq.n	856 <_sercom_get_default_pad+0xaa>
     7ba:	4b3f      	ldr	r3, [pc, #252]	; (8b8 <_sercom_get_default_pad+0x10c>)
     7bc:	4298      	cmp	r0, r3
     7be:	d05a      	beq.n	876 <_sercom_get_default_pad+0xca>
     7c0:	4b3e      	ldr	r3, [pc, #248]	; (8bc <_sercom_get_default_pad+0x110>)
     7c2:	4298      	cmp	r0, r3
     7c4:	d037      	beq.n	836 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     7c6:	2000      	movs	r0, #0
}
     7c8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     7ca:	4b3d      	ldr	r3, [pc, #244]	; (8c0 <_sercom_get_default_pad+0x114>)
     7cc:	4298      	cmp	r0, r3
     7ce:	d00c      	beq.n	7ea <_sercom_get_default_pad+0x3e>
     7d0:	4b3c      	ldr	r3, [pc, #240]	; (8c4 <_sercom_get_default_pad+0x118>)
     7d2:	4298      	cmp	r0, r3
     7d4:	d1f7      	bne.n	7c6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7d6:	2901      	cmp	r1, #1
     7d8:	d05f      	beq.n	89a <_sercom_get_default_pad+0xee>
     7da:	2900      	cmp	r1, #0
     7dc:	d015      	beq.n	80a <_sercom_get_default_pad+0x5e>
     7de:	2902      	cmp	r1, #2
     7e0:	d015      	beq.n	80e <_sercom_get_default_pad+0x62>
     7e2:	2903      	cmp	r1, #3
     7e4:	d015      	beq.n	812 <_sercom_get_default_pad+0x66>
	return 0;
     7e6:	2000      	movs	r0, #0
     7e8:	e7ee      	b.n	7c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ea:	2901      	cmp	r1, #1
     7ec:	d053      	beq.n	896 <_sercom_get_default_pad+0xea>
     7ee:	2900      	cmp	r1, #0
     7f0:	d005      	beq.n	7fe <_sercom_get_default_pad+0x52>
     7f2:	2902      	cmp	r1, #2
     7f4:	d005      	beq.n	802 <_sercom_get_default_pad+0x56>
     7f6:	2903      	cmp	r1, #3
     7f8:	d005      	beq.n	806 <_sercom_get_default_pad+0x5a>
	return 0;
     7fa:	2000      	movs	r0, #0
     7fc:	e7e4      	b.n	7c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7fe:	4832      	ldr	r0, [pc, #200]	; (8c8 <_sercom_get_default_pad+0x11c>)
     800:	e7e2      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     802:	4832      	ldr	r0, [pc, #200]	; (8cc <_sercom_get_default_pad+0x120>)
     804:	e7e0      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     806:	4832      	ldr	r0, [pc, #200]	; (8d0 <_sercom_get_default_pad+0x124>)
     808:	e7de      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     80a:	2003      	movs	r0, #3
     80c:	e7dc      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     80e:	4831      	ldr	r0, [pc, #196]	; (8d4 <_sercom_get_default_pad+0x128>)
     810:	e7da      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     812:	4831      	ldr	r0, [pc, #196]	; (8d8 <_sercom_get_default_pad+0x12c>)
     814:	e7d8      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     816:	2901      	cmp	r1, #1
     818:	d041      	beq.n	89e <_sercom_get_default_pad+0xf2>
     81a:	2900      	cmp	r1, #0
     81c:	d005      	beq.n	82a <_sercom_get_default_pad+0x7e>
     81e:	2902      	cmp	r1, #2
     820:	d005      	beq.n	82e <_sercom_get_default_pad+0x82>
     822:	2903      	cmp	r1, #3
     824:	d005      	beq.n	832 <_sercom_get_default_pad+0x86>
	return 0;
     826:	2000      	movs	r0, #0
     828:	e7ce      	b.n	7c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     82a:	482c      	ldr	r0, [pc, #176]	; (8dc <_sercom_get_default_pad+0x130>)
     82c:	e7cc      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     82e:	482c      	ldr	r0, [pc, #176]	; (8e0 <_sercom_get_default_pad+0x134>)
     830:	e7ca      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     832:	482c      	ldr	r0, [pc, #176]	; (8e4 <_sercom_get_default_pad+0x138>)
     834:	e7c8      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     836:	2901      	cmp	r1, #1
     838:	d033      	beq.n	8a2 <_sercom_get_default_pad+0xf6>
     83a:	2900      	cmp	r1, #0
     83c:	d005      	beq.n	84a <_sercom_get_default_pad+0x9e>
     83e:	2902      	cmp	r1, #2
     840:	d005      	beq.n	84e <_sercom_get_default_pad+0xa2>
     842:	2903      	cmp	r1, #3
     844:	d005      	beq.n	852 <_sercom_get_default_pad+0xa6>
	return 0;
     846:	2000      	movs	r0, #0
     848:	e7be      	b.n	7c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     84a:	4827      	ldr	r0, [pc, #156]	; (8e8 <_sercom_get_default_pad+0x13c>)
     84c:	e7bc      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     84e:	4827      	ldr	r0, [pc, #156]	; (8ec <_sercom_get_default_pad+0x140>)
     850:	e7ba      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     852:	4827      	ldr	r0, [pc, #156]	; (8f0 <_sercom_get_default_pad+0x144>)
     854:	e7b8      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     856:	2901      	cmp	r1, #1
     858:	d025      	beq.n	8a6 <_sercom_get_default_pad+0xfa>
     85a:	2900      	cmp	r1, #0
     85c:	d005      	beq.n	86a <_sercom_get_default_pad+0xbe>
     85e:	2902      	cmp	r1, #2
     860:	d005      	beq.n	86e <_sercom_get_default_pad+0xc2>
     862:	2903      	cmp	r1, #3
     864:	d005      	beq.n	872 <_sercom_get_default_pad+0xc6>
	return 0;
     866:	2000      	movs	r0, #0
     868:	e7ae      	b.n	7c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     86a:	4822      	ldr	r0, [pc, #136]	; (8f4 <_sercom_get_default_pad+0x148>)
     86c:	e7ac      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     86e:	4822      	ldr	r0, [pc, #136]	; (8f8 <_sercom_get_default_pad+0x14c>)
     870:	e7aa      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     872:	4822      	ldr	r0, [pc, #136]	; (8fc <_sercom_get_default_pad+0x150>)
     874:	e7a8      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     876:	2901      	cmp	r1, #1
     878:	d017      	beq.n	8aa <_sercom_get_default_pad+0xfe>
     87a:	2900      	cmp	r1, #0
     87c:	d005      	beq.n	88a <_sercom_get_default_pad+0xde>
     87e:	2902      	cmp	r1, #2
     880:	d005      	beq.n	88e <_sercom_get_default_pad+0xe2>
     882:	2903      	cmp	r1, #3
     884:	d005      	beq.n	892 <_sercom_get_default_pad+0xe6>
	return 0;
     886:	2000      	movs	r0, #0
     888:	e79e      	b.n	7c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     88a:	481d      	ldr	r0, [pc, #116]	; (900 <_sercom_get_default_pad+0x154>)
     88c:	e79c      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     88e:	481d      	ldr	r0, [pc, #116]	; (904 <_sercom_get_default_pad+0x158>)
     890:	e79a      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     892:	481d      	ldr	r0, [pc, #116]	; (908 <_sercom_get_default_pad+0x15c>)
     894:	e798      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     896:	481d      	ldr	r0, [pc, #116]	; (90c <_sercom_get_default_pad+0x160>)
     898:	e796      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     89a:	481d      	ldr	r0, [pc, #116]	; (910 <_sercom_get_default_pad+0x164>)
     89c:	e794      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     89e:	481d      	ldr	r0, [pc, #116]	; (914 <_sercom_get_default_pad+0x168>)
     8a0:	e792      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     8a2:	481d      	ldr	r0, [pc, #116]	; (918 <_sercom_get_default_pad+0x16c>)
     8a4:	e790      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     8a6:	481d      	ldr	r0, [pc, #116]	; (91c <_sercom_get_default_pad+0x170>)
     8a8:	e78e      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     8aa:	481d      	ldr	r0, [pc, #116]	; (920 <_sercom_get_default_pad+0x174>)
     8ac:	e78c      	b.n	7c8 <_sercom_get_default_pad+0x1c>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	42001000 	.word	0x42001000
     8b4:	42001800 	.word	0x42001800
     8b8:	42001c00 	.word	0x42001c00
     8bc:	42001400 	.word	0x42001400
     8c0:	42000800 	.word	0x42000800
     8c4:	42000c00 	.word	0x42000c00
     8c8:	00040003 	.word	0x00040003
     8cc:	00060003 	.word	0x00060003
     8d0:	00070003 	.word	0x00070003
     8d4:	001e0003 	.word	0x001e0003
     8d8:	001f0003 	.word	0x001f0003
     8dc:	00080003 	.word	0x00080003
     8e0:	000a0003 	.word	0x000a0003
     8e4:	000b0003 	.word	0x000b0003
     8e8:	00100003 	.word	0x00100003
     8ec:	00120003 	.word	0x00120003
     8f0:	00130003 	.word	0x00130003
     8f4:	000c0003 	.word	0x000c0003
     8f8:	000e0003 	.word	0x000e0003
     8fc:	000f0003 	.word	0x000f0003
     900:	00160003 	.word	0x00160003
     904:	00180003 	.word	0x00180003
     908:	00190003 	.word	0x00190003
     90c:	00050003 	.word	0x00050003
     910:	00010003 	.word	0x00010003
     914:	00090003 	.word	0x00090003
     918:	00110003 	.word	0x00110003
     91c:	000d0003 	.word	0x000d0003
     920:	00170003 	.word	0x00170003

00000924 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     924:	b530      	push	{r4, r5, lr}
     926:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     928:	4c0a      	ldr	r4, [pc, #40]	; (954 <_sercom_get_sercom_inst_index+0x30>)
     92a:	466b      	mov	r3, sp
     92c:	0022      	movs	r2, r4
     92e:	ca32      	ldmia	r2!, {r1, r4, r5}
     930:	c332      	stmia	r3!, {r1, r4, r5}
     932:	ca32      	ldmia	r2!, {r1, r4, r5}
     934:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     936:	2300      	movs	r3, #0
     938:	2b05      	cmp	r3, #5
     93a:	d808      	bhi.n	94e <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     93c:	009a      	lsls	r2, r3, #2
     93e:	4669      	mov	r1, sp
     940:	5852      	ldr	r2, [r2, r1]
     942:	4282      	cmp	r2, r0
     944:	d001      	beq.n	94a <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     946:	3301      	adds	r3, #1
     948:	e7f6      	b.n	938 <_sercom_get_sercom_inst_index+0x14>
			return i;
     94a:	b2d8      	uxtb	r0, r3
     94c:	e000      	b.n	950 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     94e:	2000      	movs	r0, #0
}
     950:	b007      	add	sp, #28
     952:	bd30      	pop	{r4, r5, pc}
     954:	00002808 	.word	0x00002808

00000958 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     958:	b5f0      	push	{r4, r5, r6, r7, lr}
     95a:	46de      	mov	lr, fp
     95c:	4657      	mov	r7, sl
     95e:	464e      	mov	r6, r9
     960:	4645      	mov	r5, r8
     962:	b5e0      	push	{r5, r6, r7, lr}
     964:	b087      	sub	sp, #28
     966:	0004      	movs	r4, r0
     968:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     96a:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     96c:	0030      	movs	r0, r6
     96e:	4b6b      	ldr	r3, [pc, #428]	; (b1c <_usart_set_config+0x1c4>)
     970:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     972:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     974:	2200      	movs	r2, #0
     976:	230e      	movs	r3, #14
     978:	a902      	add	r1, sp, #8
     97a:	468c      	mov	ip, r1
     97c:	4463      	add	r3, ip
     97e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     980:	8a2a      	ldrh	r2, [r5, #16]
     982:	2380      	movs	r3, #128	; 0x80
     984:	01db      	lsls	r3, r3, #7
     986:	429a      	cmp	r2, r3
     988:	d03b      	beq.n	a02 <_usart_set_config+0xaa>
     98a:	d90c      	bls.n	9a6 <_usart_set_config+0x4e>
     98c:	23c0      	movs	r3, #192	; 0xc0
     98e:	01db      	lsls	r3, r3, #7
     990:	429a      	cmp	r2, r3
     992:	d031      	beq.n	9f8 <_usart_set_config+0xa0>
     994:	2380      	movs	r3, #128	; 0x80
     996:	021b      	lsls	r3, r3, #8
     998:	429a      	cmp	r2, r3
     99a:	d10d      	bne.n	9b8 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     99c:	2303      	movs	r3, #3
     99e:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9a0:	2300      	movs	r3, #0
     9a2:	4699      	mov	r9, r3
			break;
     9a4:	e00c      	b.n	9c0 <_usart_set_config+0x68>
	switch (config->sample_rate) {
     9a6:	2380      	movs	r3, #128	; 0x80
     9a8:	019b      	lsls	r3, r3, #6
     9aa:	429a      	cmp	r2, r3
     9ac:	d104      	bne.n	9b8 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     9ae:	2310      	movs	r3, #16
     9b0:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     9b2:	3b0f      	subs	r3, #15
     9b4:	4699      	mov	r9, r3
			break;
     9b6:	e003      	b.n	9c0 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     9b8:	2310      	movs	r3, #16
     9ba:	469a      	mov	sl, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9bc:	2300      	movs	r3, #0
     9be:	4699      	mov	r9, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     9c0:	682b      	ldr	r3, [r5, #0]
     9c2:	68e9      	ldr	r1, [r5, #12]
     9c4:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
     9c6:	6969      	ldr	r1, [r5, #20]
     9c8:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     9ca:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9cc:	7e2a      	ldrb	r2, [r5, #24]
     9ce:	0212      	lsls	r2, r2, #8
		config->sample_rate |
     9d0:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9d2:	2226      	movs	r2, #38	; 0x26
     9d4:	5caf      	ldrb	r7, [r5, r2]
     9d6:	077f      	lsls	r7, r7, #29
	ctrla = (uint32_t)config->data_order |
     9d8:	431f      	orrs	r7, r3
     9da:	9703      	str	r7, [sp, #12]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     9dc:	686b      	ldr	r3, [r5, #4]
     9de:	4698      	mov	r8, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     9e0:	2b00      	cmp	r3, #0
     9e2:	d021      	beq.n	a28 <_usart_set_config+0xd0>
     9e4:	2380      	movs	r3, #128	; 0x80
     9e6:	055b      	lsls	r3, r3, #21
     9e8:	4598      	cmp	r8, r3
     9ea:	d13e      	bne.n	a6a <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     9ec:	2327      	movs	r3, #39	; 0x27
     9ee:	5ceb      	ldrb	r3, [r5, r3]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d00b      	beq.n	a0c <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
     9f4:	2000      	movs	r0, #0
     9f6:	e039      	b.n	a6c <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     9f8:	2308      	movs	r3, #8
     9fa:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     9fc:	3b07      	subs	r3, #7
     9fe:	4699      	mov	r9, r3
			break;
     a00:	e7de      	b.n	9c0 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a02:	2308      	movs	r3, #8
     a04:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a06:	2300      	movs	r3, #0
     a08:	4699      	mov	r9, r3
     a0a:	e7d9      	b.n	9c0 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     a0c:	6a2b      	ldr	r3, [r5, #32]
     a0e:	4699      	mov	r9, r3
     a10:	b2c0      	uxtb	r0, r0
     a12:	4b43      	ldr	r3, [pc, #268]	; (b20 <_usart_set_config+0x1c8>)
     a14:	4798      	blx	r3
     a16:	0001      	movs	r1, r0
     a18:	220e      	movs	r2, #14
     a1a:	ab02      	add	r3, sp, #8
     a1c:	469c      	mov	ip, r3
     a1e:	4462      	add	r2, ip
     a20:	4648      	mov	r0, r9
     a22:	4b40      	ldr	r3, [pc, #256]	; (b24 <_usart_set_config+0x1cc>)
     a24:	4798      	blx	r3
     a26:	e021      	b.n	a6c <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     a28:	2327      	movs	r3, #39	; 0x27
     a2a:	5ceb      	ldrb	r3, [r5, r3]
     a2c:	2b00      	cmp	r3, #0
     a2e:	d00b      	beq.n	a48 <_usart_set_config+0xf0>
				status_code =
     a30:	4653      	mov	r3, sl
     a32:	9300      	str	r3, [sp, #0]
     a34:	464b      	mov	r3, r9
     a36:	220e      	movs	r2, #14
     a38:	a902      	add	r1, sp, #8
     a3a:	468c      	mov	ip, r1
     a3c:	4462      	add	r2, ip
     a3e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     a40:	6a28      	ldr	r0, [r5, #32]
     a42:	4f39      	ldr	r7, [pc, #228]	; (b28 <_usart_set_config+0x1d0>)
     a44:	47b8      	blx	r7
     a46:	e011      	b.n	a6c <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     a48:	6a2b      	ldr	r3, [r5, #32]
     a4a:	469b      	mov	fp, r3
     a4c:	b2c0      	uxtb	r0, r0
     a4e:	4b34      	ldr	r3, [pc, #208]	; (b20 <_usart_set_config+0x1c8>)
     a50:	4798      	blx	r3
     a52:	0001      	movs	r1, r0
				status_code =
     a54:	4653      	mov	r3, sl
     a56:	9300      	str	r3, [sp, #0]
     a58:	464b      	mov	r3, r9
     a5a:	220e      	movs	r2, #14
     a5c:	a802      	add	r0, sp, #8
     a5e:	4684      	mov	ip, r0
     a60:	4462      	add	r2, ip
     a62:	4658      	mov	r0, fp
     a64:	4f30      	ldr	r7, [pc, #192]	; (b28 <_usart_set_config+0x1d0>)
     a66:	47b8      	blx	r7
     a68:	e000      	b.n	a6c <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
     a6a:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     a6c:	2800      	cmp	r0, #0
     a6e:	d146      	bne.n	afe <_usart_set_config+0x1a6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     a70:	7e6b      	ldrb	r3, [r5, #25]
     a72:	2b00      	cmp	r3, #0
     a74:	d001      	beq.n	a7a <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     a76:	7eab      	ldrb	r3, [r5, #26]
     a78:	73b3      	strb	r3, [r6, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a7a:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     a7c:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     a7e:	2b00      	cmp	r3, #0
     a80:	d1fb      	bne.n	a7a <_usart_set_config+0x122>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     a82:	330e      	adds	r3, #14
     a84:	aa02      	add	r2, sp, #8
     a86:	4694      	mov	ip, r2
     a88:	4463      	add	r3, ip
     a8a:	881b      	ldrh	r3, [r3, #0]
     a8c:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     a8e:	4643      	mov	r3, r8
     a90:	9f03      	ldr	r7, [sp, #12]
     a92:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     a94:	2327      	movs	r3, #39	; 0x27
     a96:	5ceb      	ldrb	r3, [r5, r3]
     a98:	2b00      	cmp	r3, #0
     a9a:	d101      	bne.n	aa0 <_usart_set_config+0x148>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     a9c:	3304      	adds	r3, #4
     a9e:	431f      	orrs	r7, r3
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     aa0:	7e6a      	ldrb	r2, [r5, #25]
     aa2:	0292      	lsls	r2, r2, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     aa4:	7f2b      	ldrb	r3, [r5, #28]
     aa6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     aa8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     aaa:	7f6b      	ldrb	r3, [r5, #29]
     aac:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     aae:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ab0:	2324      	movs	r3, #36	; 0x24
     ab2:	5ceb      	ldrb	r3, [r5, r3]
     ab4:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ab6:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     ab8:	2325      	movs	r3, #37	; 0x25
     aba:	5ceb      	ldrb	r3, [r5, r3]
     abc:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     abe:	431a      	orrs	r2, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     ac0:	7aab      	ldrb	r3, [r5, #10]
     ac2:	431a      	orrs	r2, r3
	ctrlb |= (uint32_t)config->character_size;
     ac4:	7aeb      	ldrb	r3, [r5, #11]
     ac6:	431a      	orrs	r2, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     ac8:	892b      	ldrh	r3, [r5, #8]
     aca:	2bff      	cmp	r3, #255	; 0xff
     acc:	d01e      	beq.n	b0c <_usart_set_config+0x1b4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     ace:	2180      	movs	r1, #128	; 0x80
     ad0:	0449      	lsls	r1, r1, #17
     ad2:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
     ad4:	431a      	orrs	r2, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     ad6:	232c      	movs	r3, #44	; 0x2c
     ad8:	5ceb      	ldrb	r3, [r5, r3]
     ada:	2b00      	cmp	r3, #0
     adc:	d103      	bne.n	ae6 <_usart_set_config+0x18e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ade:	4b13      	ldr	r3, [pc, #76]	; (b2c <_usart_set_config+0x1d4>)
     ae0:	789b      	ldrb	r3, [r3, #2]
     ae2:	079b      	lsls	r3, r3, #30
     ae4:	d501      	bpl.n	aea <_usart_set_config+0x192>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     ae6:	2380      	movs	r3, #128	; 0x80
     ae8:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     aea:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     aec:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     aee:	2b00      	cmp	r3, #0
     af0:	d1fb      	bne.n	aea <_usart_set_config+0x192>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     af2:	6072      	str	r2, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     af4:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     af6:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     af8:	2b00      	cmp	r3, #0
     afa:	d1fb      	bne.n	af4 <_usart_set_config+0x19c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     afc:	6037      	str	r7, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
     afe:	b007      	add	sp, #28
     b00:	bc3c      	pop	{r2, r3, r4, r5}
     b02:	4690      	mov	r8, r2
     b04:	4699      	mov	r9, r3
     b06:	46a2      	mov	sl, r4
     b08:	46ab      	mov	fp, r5
     b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
     b0c:	7eeb      	ldrb	r3, [r5, #27]
     b0e:	2b00      	cmp	r3, #0
     b10:	d0e1      	beq.n	ad6 <_usart_set_config+0x17e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     b12:	2380      	movs	r3, #128	; 0x80
     b14:	04db      	lsls	r3, r3, #19
     b16:	431f      	orrs	r7, r3
     b18:	e7dd      	b.n	ad6 <_usart_set_config+0x17e>
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	00000925 	.word	0x00000925
     b20:	00001f35 	.word	0x00001f35
     b24:	0000069b 	.word	0x0000069b
     b28:	000006c5 	.word	0x000006c5
     b2c:	41002000 	.word	0x41002000

00000b30 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     b30:	b5f0      	push	{r4, r5, r6, r7, lr}
     b32:	b089      	sub	sp, #36	; 0x24
     b34:	0006      	movs	r6, r0
     b36:	000c      	movs	r4, r1
     b38:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     b3a:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b3c:	0008      	movs	r0, r1
     b3e:	4b42      	ldr	r3, [pc, #264]	; (c48 <usart_init+0x118>)
     b40:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b42:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b44:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b46:	6823      	ldr	r3, [r4, #0]
     b48:	07db      	lsls	r3, r3, #31
     b4a:	d503      	bpl.n	b54 <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     b4c:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     b4e:	0028      	movs	r0, r5
     b50:	b009      	add	sp, #36	; 0x24
     b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b54:	6823      	ldr	r3, [r4, #0]
     b56:	079b      	lsls	r3, r3, #30
     b58:	d501      	bpl.n	b5e <usart_init+0x2e>
		return STATUS_ERR_DENIED;
     b5a:	251c      	movs	r5, #28
     b5c:	e7f7      	b.n	b4e <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b5e:	2301      	movs	r3, #1
     b60:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b62:	4a3a      	ldr	r2, [pc, #232]	; (c4c <usart_init+0x11c>)
     b64:	6a11      	ldr	r1, [r2, #32]
     b66:	430b      	orrs	r3, r1
     b68:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     b6a:	252d      	movs	r5, #45	; 0x2d
     b6c:	5d7b      	ldrb	r3, [r7, r5]
     b6e:	a907      	add	r1, sp, #28
     b70:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b72:	b2c3      	uxtb	r3, r0
     b74:	9301      	str	r3, [sp, #4]
     b76:	0018      	movs	r0, r3
     b78:	4b35      	ldr	r3, [pc, #212]	; (c50 <usart_init+0x120>)
     b7a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b7c:	9801      	ldr	r0, [sp, #4]
     b7e:	4b35      	ldr	r3, [pc, #212]	; (c54 <usart_init+0x124>)
     b80:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b82:	5d78      	ldrb	r0, [r7, r5]
     b84:	2100      	movs	r1, #0
     b86:	4b34      	ldr	r3, [pc, #208]	; (c58 <usart_init+0x128>)
     b88:	4798      	blx	r3
	module->character_size = config->character_size;
     b8a:	7afb      	ldrb	r3, [r7, #11]
     b8c:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
     b8e:	2324      	movs	r3, #36	; 0x24
     b90:	5cfb      	ldrb	r3, [r7, r3]
     b92:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b94:	2325      	movs	r3, #37	; 0x25
     b96:	5cfb      	ldrb	r3, [r7, r3]
     b98:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b9a:	7efb      	ldrb	r3, [r7, #27]
     b9c:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b9e:	7f3b      	ldrb	r3, [r7, #28]
     ba0:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
     ba2:	0039      	movs	r1, r7
     ba4:	0030      	movs	r0, r6
     ba6:	4b2d      	ldr	r3, [pc, #180]	; (c5c <usart_init+0x12c>)
     ba8:	4798      	blx	r3
     baa:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
     bac:	d1cf      	bne.n	b4e <usart_init+0x1e>
     bae:	ab06      	add	r3, sp, #24
     bb0:	2280      	movs	r2, #128	; 0x80
     bb2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     bb4:	2200      	movs	r2, #0
     bb6:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     bb8:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     bba:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bbe:	9302      	str	r3, [sp, #8]
     bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bc2:	9303      	str	r3, [sp, #12]
     bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bc6:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
     bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bca:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
     bcc:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
     bce:	2700      	movs	r7, #0
     bd0:	e006      	b.n	be0 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     bd2:	0039      	movs	r1, r7
     bd4:	0020      	movs	r0, r4
     bd6:	4b22      	ldr	r3, [pc, #136]	; (c60 <usart_init+0x130>)
     bd8:	4798      	blx	r3
     bda:	e008      	b.n	bee <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
     bdc:	3701      	adds	r7, #1
     bde:	b2ff      	uxtb	r7, r7
     be0:	2f03      	cmp	r7, #3
     be2:	d80d      	bhi.n	c00 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     be4:	00bb      	lsls	r3, r7, #2
     be6:	aa02      	add	r2, sp, #8
     be8:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     bea:	2800      	cmp	r0, #0
     bec:	d0f1      	beq.n	bd2 <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
     bee:	1c43      	adds	r3, r0, #1
     bf0:	d0f4      	beq.n	bdc <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     bf2:	a906      	add	r1, sp, #24
     bf4:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     bf6:	0c00      	lsrs	r0, r0, #16
     bf8:	b2c0      	uxtb	r0, r0
     bfa:	4b1a      	ldr	r3, [pc, #104]	; (c64 <usart_init+0x134>)
     bfc:	4798      	blx	r3
     bfe:	e7ed      	b.n	bdc <usart_init+0xac>
     c00:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     c02:	2a05      	cmp	r2, #5
     c04:	d806      	bhi.n	c14 <usart_init+0xe4>
		module->callback[i]            = NULL;
     c06:	1c93      	adds	r3, r2, #2
     c08:	009b      	lsls	r3, r3, #2
     c0a:	18f3      	adds	r3, r6, r3
     c0c:	2100      	movs	r1, #0
     c0e:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     c10:	3201      	adds	r2, #1
     c12:	e7f6      	b.n	c02 <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
     c14:	2200      	movs	r2, #0
     c16:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     c18:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     c1a:	2300      	movs	r3, #0
     c1c:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     c1e:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     c20:	3230      	adds	r2, #48	; 0x30
     c22:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
     c24:	3201      	adds	r2, #1
     c26:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
     c28:	3201      	adds	r2, #1
     c2a:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
     c2c:	3201      	adds	r2, #1
     c2e:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     c30:	6830      	ldr	r0, [r6, #0]
     c32:	4b05      	ldr	r3, [pc, #20]	; (c48 <usart_init+0x118>)
     c34:	4798      	blx	r3
     c36:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     c38:	490b      	ldr	r1, [pc, #44]	; (c68 <usart_init+0x138>)
     c3a:	4b0c      	ldr	r3, [pc, #48]	; (c6c <usart_init+0x13c>)
     c3c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c3e:	00a4      	lsls	r4, r4, #2
     c40:	4b0b      	ldr	r3, [pc, #44]	; (c70 <usart_init+0x140>)
     c42:	50e6      	str	r6, [r4, r3]
	return status_code;
     c44:	e783      	b.n	b4e <usart_init+0x1e>
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00000925 	.word	0x00000925
     c4c:	40000400 	.word	0x40000400
     c50:	00001f19 	.word	0x00001f19
     c54:	00001e91 	.word	0x00001e91
     c58:	00000761 	.word	0x00000761
     c5c:	00000959 	.word	0x00000959
     c60:	000007ad 	.word	0x000007ad
     c64:	00001ffd 	.word	0x00001ffd
     c68:	00000da1 	.word	0x00000da1
     c6c:	00001941 	.word	0x00001941
     c70:	20000100 	.word	0x20000100

00000c74 <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c74:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     c76:	79c2      	ldrb	r2, [r0, #7]
     c78:	2a00      	cmp	r2, #0
     c7a:	d101      	bne.n	c80 <usart_write_wait+0xc>
		return STATUS_ERR_DENIED;
     c7c:	201c      	movs	r0, #28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     c7e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     c80:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     c82:	b292      	uxth	r2, r2
     c84:	2a00      	cmp	r2, #0
     c86:	d001      	beq.n	c8c <usart_write_wait+0x18>
		return STATUS_BUSY;
     c88:	2005      	movs	r0, #5
     c8a:	e7f8      	b.n	c7e <usart_write_wait+0xa>
	return (usart_hw->SYNCBUSY.reg);
     c8c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     c8e:	2a00      	cmp	r2, #0
     c90:	d1fc      	bne.n	c8c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     c92:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     c94:	7e1a      	ldrb	r2, [r3, #24]
     c96:	0792      	lsls	r2, r2, #30
     c98:	d5fc      	bpl.n	c94 <usart_write_wait+0x20>
	return STATUS_OK;
     c9a:	2000      	movs	r0, #0
     c9c:	e7ef      	b.n	c7e <usart_write_wait+0xa>

00000c9e <usart_read_wait>:

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c9e:	6802      	ldr	r2, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     ca0:	7983      	ldrb	r3, [r0, #6]
     ca2:	2b00      	cmp	r3, #0
     ca4:	d101      	bne.n	caa <usart_read_wait+0xc>
		return STATUS_ERR_DENIED;
     ca6:	201c      	movs	r0, #28

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     ca8:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     caa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
     cac:	b29b      	uxth	r3, r3
     cae:	2b00      	cmp	r3, #0
     cb0:	d001      	beq.n	cb6 <usart_read_wait+0x18>
		return STATUS_BUSY;
     cb2:	2005      	movs	r0, #5
     cb4:	e7f8      	b.n	ca8 <usart_read_wait+0xa>
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     cb6:	7e13      	ldrb	r3, [r2, #24]
     cb8:	075b      	lsls	r3, r3, #29
     cba:	d401      	bmi.n	cc0 <usart_read_wait+0x22>
		return STATUS_BUSY;
     cbc:	2005      	movs	r0, #5
     cbe:	e7f3      	b.n	ca8 <usart_read_wait+0xa>
	return (usart_hw->SYNCBUSY.reg);
     cc0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     cc2:	2b00      	cmp	r3, #0
     cc4:	d1fc      	bne.n	cc0 <usart_read_wait+0x22>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cc6:	8b53      	ldrh	r3, [r2, #26]
     cc8:	b2db      	uxtb	r3, r3
	if (error_code) {
     cca:	0698      	lsls	r0, r3, #26
     ccc:	d01d      	beq.n	d0a <usart_read_wait+0x6c>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     cce:	0798      	lsls	r0, r3, #30
     cd0:	d503      	bpl.n	cda <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     cd2:	2302      	movs	r3, #2
     cd4:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     cd6:	201a      	movs	r0, #26
     cd8:	e7e6      	b.n	ca8 <usart_read_wait+0xa>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     cda:	0758      	lsls	r0, r3, #29
     cdc:	d503      	bpl.n	ce6 <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     cde:	2304      	movs	r3, #4
     ce0:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     ce2:	201e      	movs	r0, #30
     ce4:	e7e0      	b.n	ca8 <usart_read_wait+0xa>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ce6:	07d8      	lsls	r0, r3, #31
     ce8:	d503      	bpl.n	cf2 <usart_read_wait+0x54>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     cea:	2301      	movs	r3, #1
     cec:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     cee:	2013      	movs	r0, #19
     cf0:	e7da      	b.n	ca8 <usart_read_wait+0xa>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     cf2:	06d8      	lsls	r0, r3, #27
     cf4:	d503      	bpl.n	cfe <usart_read_wait+0x60>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     cf6:	2310      	movs	r3, #16
     cf8:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     cfa:	2042      	movs	r0, #66	; 0x42
     cfc:	e7d4      	b.n	ca8 <usart_read_wait+0xa>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     cfe:	069b      	lsls	r3, r3, #26
     d00:	d503      	bpl.n	d0a <usart_read_wait+0x6c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     d02:	2320      	movs	r3, #32
     d04:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     d06:	2041      	movs	r0, #65	; 0x41
     d08:	e7ce      	b.n	ca8 <usart_read_wait+0xa>
	*rx_data = usart_hw->DATA.reg;
     d0a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     d0c:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     d0e:	2000      	movs	r0, #0
     d10:	e7ca      	b.n	ca8 <usart_read_wait+0xa>
	...

00000d14 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     d14:	b5f0      	push	{r4, r5, r6, r7, lr}
     d16:	b085      	sub	sp, #20
     d18:	0004      	movs	r4, r0
     d1a:	9101      	str	r1, [sp, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     d1c:	2a00      	cmp	r2, #0
     d1e:	d102      	bne.n	d26 <usart_read_buffer_wait+0x12>
		return STATUS_ERR_INVALID_ARG;
     d20:	2017      	movs	r0, #23
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     d22:	b005      	add	sp, #20
     d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
     d26:	7983      	ldrb	r3, [r0, #6]
     d28:	2b00      	cmp	r3, #0
     d2a:	d101      	bne.n	d30 <usart_read_buffer_wait+0x1c>
		return STATUS_ERR_DENIED;
     d2c:	201c      	movs	r0, #28
     d2e:	e7f8      	b.n	d22 <usart_read_buffer_wait+0xe>
	SercomUsart *const usart_hw = &(module->hw->USART);
     d30:	6806      	ldr	r6, [r0, #0]
	uint16_t rx_pos = 0;
     d32:	2500      	movs	r5, #0
	while (length--) {
     d34:	e014      	b.n	d60 <usart_read_buffer_wait+0x4c>
		uint16_t received_data = 0;
     d36:	ab02      	add	r3, sp, #8
     d38:	1d99      	adds	r1, r3, #6
     d3a:	2300      	movs	r3, #0
     d3c:	800b      	strh	r3, [r1, #0]
		retval = usart_read_wait(module, &received_data);
     d3e:	0020      	movs	r0, r4
     d40:	4b15      	ldr	r3, [pc, #84]	; (d98 <usart_read_buffer_wait+0x84>)
     d42:	4798      	blx	r3
		if (retval != STATUS_OK) {
     d44:	2800      	cmp	r0, #0
     d46:	d1ec      	bne.n	d22 <usart_read_buffer_wait+0xe>
		rx_data[rx_pos++] = received_data;
     d48:	1c6b      	adds	r3, r5, #1
     d4a:	b29b      	uxth	r3, r3
     d4c:	aa02      	add	r2, sp, #8
     d4e:	3206      	adds	r2, #6
     d50:	8812      	ldrh	r2, [r2, #0]
     d52:	9901      	ldr	r1, [sp, #4]
     d54:	554a      	strb	r2, [r1, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d56:	7962      	ldrb	r2, [r4, #5]
     d58:	2a01      	cmp	r2, #1
     d5a:	d011      	beq.n	d80 <usart_read_buffer_wait+0x6c>
     d5c:	001d      	movs	r5, r3
	while (length--) {
     d5e:	003a      	movs	r2, r7
     d60:	1e57      	subs	r7, r2, #1
     d62:	b2bf      	uxth	r7, r7
     d64:	2a00      	cmp	r2, #0
     d66:	d015      	beq.n	d94 <usart_read_buffer_wait+0x80>
     d68:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     d6a:	4a0c      	ldr	r2, [pc, #48]	; (d9c <usart_read_buffer_wait+0x88>)
     d6c:	4293      	cmp	r3, r2
     d6e:	d8e2      	bhi.n	d36 <usart_read_buffer_wait+0x22>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     d70:	7e32      	ldrb	r2, [r6, #24]
     d72:	0752      	lsls	r2, r2, #29
     d74:	d4df      	bmi.n	d36 <usart_read_buffer_wait+0x22>
			} else if (i == USART_TIMEOUT) {
     d76:	4a09      	ldr	r2, [pc, #36]	; (d9c <usart_read_buffer_wait+0x88>)
     d78:	4293      	cmp	r3, r2
     d7a:	d009      	beq.n	d90 <usart_read_buffer_wait+0x7c>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     d7c:	3301      	adds	r3, #1
     d7e:	e7f4      	b.n	d6a <usart_read_buffer_wait+0x56>
			rx_data[rx_pos++] = (received_data >> 8);
     d80:	3502      	adds	r5, #2
     d82:	aa02      	add	r2, sp, #8
     d84:	3206      	adds	r2, #6
     d86:	8812      	ldrh	r2, [r2, #0]
     d88:	0a12      	lsrs	r2, r2, #8
     d8a:	54ca      	strb	r2, [r1, r3]
     d8c:	b2ab      	uxth	r3, r5
     d8e:	e7e5      	b.n	d5c <usart_read_buffer_wait+0x48>
				return STATUS_ERR_TIMEOUT;
     d90:	2012      	movs	r0, #18
     d92:	e7c6      	b.n	d22 <usart_read_buffer_wait+0xe>
	return STATUS_OK;
     d94:	2000      	movs	r0, #0
     d96:	e7c4      	b.n	d22 <usart_read_buffer_wait+0xe>
     d98:	00000c9f 	.word	0x00000c9f
     d9c:	0000ffff 	.word	0x0000ffff

00000da0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
     da2:	46c6      	mov	lr, r8
     da4:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     da6:	0080      	lsls	r0, r0, #2
     da8:	4b64      	ldr	r3, [pc, #400]	; (f3c <_usart_interrupt_handler+0x19c>)
     daa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     dac:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     dae:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     db0:	2b00      	cmp	r3, #0
     db2:	d1fc      	bne.n	dae <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     db4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     db6:	7da6      	ldrb	r6, [r4, #22]
     db8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     dba:	2330      	movs	r3, #48	; 0x30
     dbc:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
     dbe:	2231      	movs	r2, #49	; 0x31
     dc0:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
     dc2:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     dc4:	07f3      	lsls	r3, r6, #31
     dc6:	d525      	bpl.n	e14 <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
     dc8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     dca:	b29b      	uxth	r3, r3
     dcc:	2b00      	cmp	r3, #0
     dce:	d01f      	beq.n	e10 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     dd0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     dd2:	780a      	ldrb	r2, [r1, #0]
     dd4:	b2d2      	uxtb	r2, r2
     dd6:	b293      	uxth	r3, r2
     dd8:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     dda:	1c48      	adds	r0, r1, #1
     ddc:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     dde:	796b      	ldrb	r3, [r5, #5]
     de0:	2b01      	cmp	r3, #1
     de2:	d00e      	beq.n	e02 <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     de4:	4643      	mov	r3, r8
     de6:	05db      	lsls	r3, r3, #23
     de8:	0ddb      	lsrs	r3, r3, #23
     dea:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     dec:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     dee:	3b01      	subs	r3, #1
     df0:	b29b      	uxth	r3, r3
     df2:	85eb      	strh	r3, [r5, #46]	; 0x2e
     df4:	2b00      	cmp	r3, #0
     df6:	d10d      	bne.n	e14 <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     df8:	3301      	adds	r3, #1
     dfa:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     dfc:	3301      	adds	r3, #1
     dfe:	75a3      	strb	r3, [r4, #22]
     e00:	e008      	b.n	e14 <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     e02:	784b      	ldrb	r3, [r1, #1]
     e04:	021b      	lsls	r3, r3, #8
     e06:	4313      	orrs	r3, r2
     e08:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
     e0a:	1c88      	adds	r0, r1, #2
     e0c:	62a8      	str	r0, [r5, #40]	; 0x28
     e0e:	e7e9      	b.n	de4 <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e10:	2301      	movs	r3, #1
     e12:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     e14:	07b3      	lsls	r3, r6, #30
     e16:	d506      	bpl.n	e26 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     e18:	2302      	movs	r3, #2
     e1a:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     e1c:	2200      	movs	r2, #0
     e1e:	3331      	adds	r3, #49	; 0x31
     e20:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     e22:	07fb      	lsls	r3, r7, #31
     e24:	d41c      	bmi.n	e60 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     e26:	0773      	lsls	r3, r6, #29
     e28:	d564      	bpl.n	ef4 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
     e2a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     e2c:	b29b      	uxth	r3, r3
     e2e:	2b00      	cmp	r3, #0
     e30:	d05e      	beq.n	ef0 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e32:	8b62      	ldrh	r2, [r4, #26]
     e34:	b2d2      	uxtb	r2, r2
     e36:	233f      	movs	r3, #63	; 0x3f
     e38:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     e3a:	0711      	lsls	r1, r2, #28
     e3c:	d501      	bpl.n	e42 <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     e3e:	2337      	movs	r3, #55	; 0x37
     e40:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     e42:	2b00      	cmp	r3, #0
     e44:	d031      	beq.n	eaa <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     e46:	079a      	lsls	r2, r3, #30
     e48:	d50e      	bpl.n	e68 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     e4a:	221a      	movs	r2, #26
     e4c:	2332      	movs	r3, #50	; 0x32
     e4e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     e50:	3b30      	subs	r3, #48	; 0x30
     e52:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     e54:	077b      	lsls	r3, r7, #29
     e56:	d54d      	bpl.n	ef4 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     e58:	0028      	movs	r0, r5
     e5a:	696b      	ldr	r3, [r5, #20]
     e5c:	4798      	blx	r3
     e5e:	e049      	b.n	ef4 <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     e60:	0028      	movs	r0, r5
     e62:	68eb      	ldr	r3, [r5, #12]
     e64:	4798      	blx	r3
     e66:	e7de      	b.n	e26 <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     e68:	075a      	lsls	r2, r3, #29
     e6a:	d505      	bpl.n	e78 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     e6c:	221e      	movs	r2, #30
     e6e:	2332      	movs	r3, #50	; 0x32
     e70:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     e72:	3b2e      	subs	r3, #46	; 0x2e
     e74:	8363      	strh	r3, [r4, #26]
     e76:	e7ed      	b.n	e54 <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     e78:	07da      	lsls	r2, r3, #31
     e7a:	d505      	bpl.n	e88 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     e7c:	2213      	movs	r2, #19
     e7e:	2332      	movs	r3, #50	; 0x32
     e80:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     e82:	3b31      	subs	r3, #49	; 0x31
     e84:	8363      	strh	r3, [r4, #26]
     e86:	e7e5      	b.n	e54 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     e88:	06da      	lsls	r2, r3, #27
     e8a:	d505      	bpl.n	e98 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     e8c:	2242      	movs	r2, #66	; 0x42
     e8e:	2332      	movs	r3, #50	; 0x32
     e90:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     e92:	3b22      	subs	r3, #34	; 0x22
     e94:	8363      	strh	r3, [r4, #26]
     e96:	e7dd      	b.n	e54 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     e98:	2220      	movs	r2, #32
     e9a:	421a      	tst	r2, r3
     e9c:	d0da      	beq.n	e54 <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     e9e:	3221      	adds	r2, #33	; 0x21
     ea0:	2332      	movs	r3, #50	; 0x32
     ea2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ea4:	3b12      	subs	r3, #18
     ea6:	8363      	strh	r3, [r4, #26]
     ea8:	e7d4      	b.n	e54 <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     eaa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     eac:	05db      	lsls	r3, r3, #23
     eae:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     eb0:	b2da      	uxtb	r2, r3
     eb2:	6a69      	ldr	r1, [r5, #36]	; 0x24
     eb4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     eb6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     eb8:	1c51      	adds	r1, r2, #1
     eba:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ebc:	7969      	ldrb	r1, [r5, #5]
     ebe:	2901      	cmp	r1, #1
     ec0:	d010      	beq.n	ee4 <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     ec2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ec4:	3b01      	subs	r3, #1
     ec6:	b29b      	uxth	r3, r3
     ec8:	85ab      	strh	r3, [r5, #44]	; 0x2c
     eca:	2b00      	cmp	r3, #0
     ecc:	d112      	bne.n	ef4 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ece:	3304      	adds	r3, #4
     ed0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     ed2:	2200      	movs	r2, #0
     ed4:	332e      	adds	r3, #46	; 0x2e
     ed6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     ed8:	07bb      	lsls	r3, r7, #30
     eda:	d50b      	bpl.n	ef4 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     edc:	0028      	movs	r0, r5
     ede:	692b      	ldr	r3, [r5, #16]
     ee0:	4798      	blx	r3
     ee2:	e007      	b.n	ef4 <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ee4:	0a1b      	lsrs	r3, r3, #8
     ee6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     ee8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     eea:	3301      	adds	r3, #1
     eec:	626b      	str	r3, [r5, #36]	; 0x24
     eee:	e7e8      	b.n	ec2 <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ef0:	2304      	movs	r3, #4
     ef2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ef4:	06f3      	lsls	r3, r6, #27
     ef6:	d504      	bpl.n	f02 <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     ef8:	2310      	movs	r3, #16
     efa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     efc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     efe:	06fb      	lsls	r3, r7, #27
     f00:	d410      	bmi.n	f24 <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     f02:	06b3      	lsls	r3, r6, #26
     f04:	d504      	bpl.n	f10 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     f06:	2320      	movs	r3, #32
     f08:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     f0a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     f0c:	073b      	lsls	r3, r7, #28
     f0e:	d40d      	bmi.n	f2c <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     f10:	0733      	lsls	r3, r6, #28
     f12:	d504      	bpl.n	f1e <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     f14:	2308      	movs	r3, #8
     f16:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     f18:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     f1a:	06bb      	lsls	r3, r7, #26
     f1c:	d40a      	bmi.n	f34 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     f1e:	bc04      	pop	{r2}
     f20:	4690      	mov	r8, r2
     f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     f24:	0028      	movs	r0, r5
     f26:	69eb      	ldr	r3, [r5, #28]
     f28:	4798      	blx	r3
     f2a:	e7ea      	b.n	f02 <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     f2c:	0028      	movs	r0, r5
     f2e:	69ab      	ldr	r3, [r5, #24]
     f30:	4798      	blx	r3
     f32:	e7ed      	b.n	f10 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     f34:	6a2b      	ldr	r3, [r5, #32]
     f36:	0028      	movs	r0, r5
     f38:	4798      	blx	r3
}
     f3a:	e7f0      	b.n	f1e <_usart_interrupt_handler+0x17e>
     f3c:	20000100 	.word	0x20000100

00000f40 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f40:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f42:	2202      	movs	r2, #2
     f44:	761a      	strb	r2, [r3, #24]
}
     f46:	4770      	bx	lr

00000f48 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     f48:	b5f0      	push	{r4, r5, r6, r7, lr}
     f4a:	b087      	sub	sp, #28
     f4c:	0007      	movs	r7, r0
     f4e:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f50:	6806      	ldr	r6, [r0, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f52:	ab05      	add	r3, sp, #20
     f54:	2280      	movs	r2, #128	; 0x80
     f56:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f58:	2200      	movs	r2, #0
     f5a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f5c:	2101      	movs	r1, #1
     f5e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     f60:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     f62:	782b      	ldrb	r3, [r5, #0]
     f64:	2b00      	cmp	r3, #0
     f66:	d101      	bne.n	f6c <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f68:	ab05      	add	r3, sp, #20
     f6a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     f6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     f6e:	9301      	str	r3, [sp, #4]
     f70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     f72:	9302      	str	r3, [sp, #8]
     f74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     f76:	9303      	str	r3, [sp, #12]
     f78:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     f7a:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f7c:	2400      	movs	r4, #0
     f7e:	e006      	b.n	f8e <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f80:	0021      	movs	r1, r4
     f82:	0030      	movs	r0, r6
     f84:	4b3d      	ldr	r3, [pc, #244]	; (107c <_spi_set_config+0x134>)
     f86:	4798      	blx	r3
     f88:	e008      	b.n	f9c <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     f8a:	3401      	adds	r4, #1
     f8c:	b2e4      	uxtb	r4, r4
     f8e:	2c03      	cmp	r4, #3
     f90:	d80d      	bhi.n	fae <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f92:	00a3      	lsls	r3, r4, #2
     f94:	aa01      	add	r2, sp, #4
     f96:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     f98:	2800      	cmp	r0, #0
     f9a:	d0f1      	beq.n	f80 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     f9c:	1c43      	adds	r3, r0, #1
     f9e:	d0f4      	beq.n	f8a <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fa0:	a905      	add	r1, sp, #20
     fa2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     fa4:	0c00      	lsrs	r0, r0, #16
     fa6:	b2c0      	uxtb	r0, r0
     fa8:	4b35      	ldr	r3, [pc, #212]	; (1080 <_spi_set_config+0x138>)
     faa:	4798      	blx	r3
     fac:	e7ed      	b.n	f8a <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     fae:	782b      	ldrb	r3, [r5, #0]
     fb0:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     fb2:	7c2b      	ldrb	r3, [r5, #16]
     fb4:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     fb6:	7cab      	ldrb	r3, [r5, #18]
     fb8:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     fba:	7d2b      	ldrb	r3, [r5, #20]
     fbc:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     fbe:	2200      	movs	r2, #0
     fc0:	466b      	mov	r3, sp
     fc2:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     fc4:	782b      	ldrb	r3, [r5, #0]
     fc6:	2b01      	cmp	r3, #1
     fc8:	d014      	beq.n	ff4 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     fca:	782b      	ldrb	r3, [r5, #0]
     fcc:	2b00      	cmp	r3, #0
     fce:	d127      	bne.n	1020 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     fd0:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     fd2:	8baa      	ldrh	r2, [r5, #28]
     fd4:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     fd6:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fd8:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     fda:	7fef      	ldrb	r7, [r5, #31]
     fdc:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     fde:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     fe0:	4320      	orrs	r0, r4
     fe2:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     fe4:	2020      	movs	r0, #32
     fe6:	5c28      	ldrb	r0, [r5, r0]
     fe8:	2800      	cmp	r0, #0
     fea:	d01b      	beq.n	1024 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     fec:	2140      	movs	r1, #64	; 0x40
     fee:	4311      	orrs	r1, r2
     ff0:	b289      	uxth	r1, r1
     ff2:	e017      	b.n	1024 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ff4:	6838      	ldr	r0, [r7, #0]
     ff6:	4b23      	ldr	r3, [pc, #140]	; (1084 <_spi_set_config+0x13c>)
     ff8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ffa:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     ffc:	b2c0      	uxtb	r0, r0
     ffe:	4b22      	ldr	r3, [pc, #136]	; (1088 <_spi_set_config+0x140>)
    1000:	4798      	blx	r3
    1002:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1004:	466b      	mov	r3, sp
    1006:	1c9a      	adds	r2, r3, #2
    1008:	69a8      	ldr	r0, [r5, #24]
    100a:	4b20      	ldr	r3, [pc, #128]	; (108c <_spi_set_config+0x144>)
    100c:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    100e:	2800      	cmp	r0, #0
    1010:	d001      	beq.n	1016 <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
    1012:	2017      	movs	r0, #23
    1014:	e030      	b.n	1078 <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
    1016:	466b      	mov	r3, sp
    1018:	3302      	adds	r3, #2
    101a:	781b      	ldrb	r3, [r3, #0]
    101c:	7333      	strb	r3, [r6, #12]
    101e:	e7d4      	b.n	fca <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
    1020:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
    1022:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1024:	686a      	ldr	r2, [r5, #4]
    1026:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1028:	68aa      	ldr	r2, [r5, #8]
    102a:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    102c:	68ea      	ldr	r2, [r5, #12]
    102e:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1030:	7c2a      	ldrb	r2, [r5, #16]
    1032:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1034:	7c69      	ldrb	r1, [r5, #17]
    1036:	2900      	cmp	r1, #0
    1038:	d103      	bne.n	1042 <_spi_set_config+0xfa>
    103a:	4915      	ldr	r1, [pc, #84]	; (1090 <_spi_set_config+0x148>)
    103c:	7889      	ldrb	r1, [r1, #2]
    103e:	0789      	lsls	r1, r1, #30
    1040:	d501      	bpl.n	1046 <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1042:	2180      	movs	r1, #128	; 0x80
    1044:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    1046:	7ca9      	ldrb	r1, [r5, #18]
    1048:	2900      	cmp	r1, #0
    104a:	d002      	beq.n	1052 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    104c:	2180      	movs	r1, #128	; 0x80
    104e:	0289      	lsls	r1, r1, #10
    1050:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1052:	7ce9      	ldrb	r1, [r5, #19]
    1054:	2900      	cmp	r1, #0
    1056:	d002      	beq.n	105e <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1058:	2180      	movs	r1, #128	; 0x80
    105a:	0089      	lsls	r1, r1, #2
    105c:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    105e:	7d29      	ldrb	r1, [r5, #20]
    1060:	2900      	cmp	r1, #0
    1062:	d002      	beq.n	106a <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1064:	2180      	movs	r1, #128	; 0x80
    1066:	0189      	lsls	r1, r1, #6
    1068:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    106a:	6831      	ldr	r1, [r6, #0]
    106c:	430b      	orrs	r3, r1
    106e:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1070:	6873      	ldr	r3, [r6, #4]
    1072:	431a      	orrs	r2, r3
    1074:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
    1076:	2000      	movs	r0, #0
}
    1078:	b007      	add	sp, #28
    107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    107c:	000007ad 	.word	0x000007ad
    1080:	00001ffd 	.word	0x00001ffd
    1084:	00000925 	.word	0x00000925
    1088:	00001f35 	.word	0x00001f35
    108c:	0000069b 	.word	0x0000069b
    1090:	41002000 	.word	0x41002000

00001094 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1094:	b5f0      	push	{r4, r5, r6, r7, lr}
    1096:	b085      	sub	sp, #20
    1098:	0005      	movs	r5, r0
    109a:	000c      	movs	r4, r1
    109c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    109e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    10a0:	680b      	ldr	r3, [r1, #0]
    10a2:	079b      	lsls	r3, r3, #30
    10a4:	d502      	bpl.n	10ac <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    10a6:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    10a8:	b005      	add	sp, #20
    10aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    10ac:	680b      	ldr	r3, [r1, #0]
    10ae:	07db      	lsls	r3, r3, #31
    10b0:	d501      	bpl.n	10b6 <spi_init+0x22>
		return STATUS_BUSY;
    10b2:	2005      	movs	r0, #5
    10b4:	e7f8      	b.n	10a8 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10b6:	0008      	movs	r0, r1
    10b8:	4b28      	ldr	r3, [pc, #160]	; (115c <spi_init+0xc8>)
    10ba:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10bc:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10be:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10c0:	2301      	movs	r3, #1
    10c2:	4093      	lsls	r3, r2
    10c4:	4a26      	ldr	r2, [pc, #152]	; (1160 <spi_init+0xcc>)
    10c6:	6a11      	ldr	r1, [r2, #32]
    10c8:	430b      	orrs	r3, r1
    10ca:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    10cc:	2724      	movs	r7, #36	; 0x24
    10ce:	5df3      	ldrb	r3, [r6, r7]
    10d0:	a903      	add	r1, sp, #12
    10d2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10d4:	b2c3      	uxtb	r3, r0
    10d6:	9301      	str	r3, [sp, #4]
    10d8:	0018      	movs	r0, r3
    10da:	4b22      	ldr	r3, [pc, #136]	; (1164 <spi_init+0xd0>)
    10dc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10de:	9801      	ldr	r0, [sp, #4]
    10e0:	4b21      	ldr	r3, [pc, #132]	; (1168 <spi_init+0xd4>)
    10e2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10e4:	5df0      	ldrb	r0, [r6, r7]
    10e6:	2100      	movs	r1, #0
    10e8:	4b20      	ldr	r3, [pc, #128]	; (116c <spi_init+0xd8>)
    10ea:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    10ec:	7833      	ldrb	r3, [r6, #0]
    10ee:	2b01      	cmp	r3, #1
    10f0:	d008      	beq.n	1104 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
    10f2:	7833      	ldrb	r3, [r6, #0]
    10f4:	2b00      	cmp	r3, #0
    10f6:	d103      	bne.n	1100 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    10f8:	6823      	ldr	r3, [r4, #0]
    10fa:	2208      	movs	r2, #8
    10fc:	4313      	orrs	r3, r2
    10fe:	6023      	str	r3, [r4, #0]
{
    1100:	2300      	movs	r3, #0
    1102:	e00b      	b.n	111c <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1104:	6823      	ldr	r3, [r4, #0]
    1106:	220c      	movs	r2, #12
    1108:	4313      	orrs	r3, r2
    110a:	6023      	str	r3, [r4, #0]
    110c:	e7f1      	b.n	10f2 <spi_init+0x5e>
		module->callback[i]        = NULL;
    110e:	1c9a      	adds	r2, r3, #2
    1110:	0092      	lsls	r2, r2, #2
    1112:	18aa      	adds	r2, r5, r2
    1114:	2100      	movs	r1, #0
    1116:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1118:	3301      	adds	r3, #1
    111a:	b2db      	uxtb	r3, r3
    111c:	2b06      	cmp	r3, #6
    111e:	d9f6      	bls.n	110e <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
    1120:	2200      	movs	r2, #0
    1122:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1124:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1126:	2300      	movs	r3, #0
    1128:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    112a:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    112c:	3236      	adds	r2, #54	; 0x36
    112e:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
    1130:	3201      	adds	r2, #1
    1132:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
    1134:	3201      	adds	r2, #1
    1136:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    1138:	3a35      	subs	r2, #53	; 0x35
    113a:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
    113c:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    113e:	6828      	ldr	r0, [r5, #0]
    1140:	4b06      	ldr	r3, [pc, #24]	; (115c <spi_init+0xc8>)
    1142:	4798      	blx	r3
    1144:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1146:	490a      	ldr	r1, [pc, #40]	; (1170 <spi_init+0xdc>)
    1148:	4b0a      	ldr	r3, [pc, #40]	; (1174 <spi_init+0xe0>)
    114a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    114c:	00a4      	lsls	r4, r4, #2
    114e:	4b0a      	ldr	r3, [pc, #40]	; (1178 <spi_init+0xe4>)
    1150:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
    1152:	0031      	movs	r1, r6
    1154:	0028      	movs	r0, r5
    1156:	4b09      	ldr	r3, [pc, #36]	; (117c <spi_init+0xe8>)
    1158:	4798      	blx	r3
    115a:	e7a5      	b.n	10a8 <spi_init+0x14>
    115c:	00000925 	.word	0x00000925
    1160:	40000400 	.word	0x40000400
    1164:	00001f19 	.word	0x00001f19
    1168:	00001e91 	.word	0x00001e91
    116c:	00000761 	.word	0x00000761
    1170:	00001775 	.word	0x00001775
    1174:	00001941 	.word	0x00001941
    1178:	20000100 	.word	0x20000100
    117c:	00000f49 	.word	0x00000f49

00001180 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1180:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1182:	7943      	ldrb	r3, [r0, #5]
    1184:	2b01      	cmp	r3, #1
    1186:	d001      	beq.n	118c <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
    1188:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    118a:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    118c:	7a03      	ldrb	r3, [r0, #8]
    118e:	2b00      	cmp	r3, #0
    1190:	d16c      	bne.n	126c <spi_select_slave+0xec>
		if (select) {
    1192:	2a00      	cmp	r2, #0
    1194:	d058      	beq.n	1248 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
    1196:	784b      	ldrb	r3, [r1, #1]
    1198:	2b00      	cmp	r3, #0
    119a:	d043      	beq.n	1224 <spi_select_slave+0xa4>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    119c:	6803      	ldr	r3, [r0, #0]
    119e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    11a0:	07db      	lsls	r3, r3, #31
    11a2:	d411      	bmi.n	11c8 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
    11a4:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    11a6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    11a8:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    11aa:	2900      	cmp	r1, #0
    11ac:	d10a      	bne.n	11c4 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
    11ae:	01db      	lsls	r3, r3, #7
    11b0:	4931      	ldr	r1, [pc, #196]	; (1278 <spi_select_slave+0xf8>)
    11b2:	468c      	mov	ip, r1
    11b4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11b6:	211f      	movs	r1, #31
    11b8:	4011      	ands	r1, r2
    11ba:	2201      	movs	r2, #1
    11bc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    11be:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    11c0:	2005      	movs	r0, #5
    11c2:	e7e2      	b.n	118a <spi_select_slave+0xa>
		return NULL;
    11c4:	2300      	movs	r3, #0
    11c6:	e7f6      	b.n	11b6 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
    11c8:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    11ca:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    11cc:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    11ce:	2c00      	cmp	r4, #0
    11d0:	d104      	bne.n	11dc <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
    11d2:	01db      	lsls	r3, r3, #7
    11d4:	4c28      	ldr	r4, [pc, #160]	; (1278 <spi_select_slave+0xf8>)
    11d6:	46a4      	mov	ip, r4
    11d8:	4463      	add	r3, ip
    11da:	e000      	b.n	11de <spi_select_slave+0x5e>
		return NULL;
    11dc:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11de:	241f      	movs	r4, #31
    11e0:	4014      	ands	r4, r2
    11e2:	2201      	movs	r2, #1
    11e4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    11e6:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
    11e8:	788a      	ldrb	r2, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    11ea:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    11ec:	7e19      	ldrb	r1, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    11ee:	07c9      	lsls	r1, r1, #31
    11f0:	d500      	bpl.n	11f4 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    11f2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    11f4:	79c3      	ldrb	r3, [r0, #7]
    11f6:	2b00      	cmp	r3, #0
    11f8:	d13a      	bne.n	1270 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11fa:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11fc:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
    11fe:	0752      	lsls	r2, r2, #29
    1200:	d5fb      	bpl.n	11fa <spi_select_slave+0x7a>
    1202:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1204:	0752      	lsls	r2, r2, #29
    1206:	d535      	bpl.n	1274 <spi_select_slave+0xf4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1208:	8b5a      	ldrh	r2, [r3, #26]
    120a:	0752      	lsls	r2, r2, #29
    120c:	d501      	bpl.n	1212 <spi_select_slave+0x92>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    120e:	2204      	movs	r2, #4
    1210:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1212:	7982      	ldrb	r2, [r0, #6]
    1214:	2a01      	cmp	r2, #1
    1216:	d002      	beq.n	121e <spi_select_slave+0x9e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
    121a:	2000      	movs	r0, #0
    121c:	e7b5      	b.n	118a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1220:	2000      	movs	r0, #0
    1222:	e7b2      	b.n	118a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1224:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1226:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1228:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    122a:	2900      	cmp	r1, #0
    122c:	d10a      	bne.n	1244 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
    122e:	01db      	lsls	r3, r3, #7
    1230:	4911      	ldr	r1, [pc, #68]	; (1278 <spi_select_slave+0xf8>)
    1232:	468c      	mov	ip, r1
    1234:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1236:	211f      	movs	r1, #31
    1238:	4011      	ands	r1, r2
    123a:	2201      	movs	r2, #1
    123c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    123e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1240:	2000      	movs	r0, #0
    1242:	e7a2      	b.n	118a <spi_select_slave+0xa>
		return NULL;
    1244:	2300      	movs	r3, #0
    1246:	e7f6      	b.n	1236 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
    1248:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    124a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    124c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    124e:	2900      	cmp	r1, #0
    1250:	d10a      	bne.n	1268 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
    1252:	01db      	lsls	r3, r3, #7
    1254:	4908      	ldr	r1, [pc, #32]	; (1278 <spi_select_slave+0xf8>)
    1256:	468c      	mov	ip, r1
    1258:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    125a:	211f      	movs	r1, #31
    125c:	4011      	ands	r1, r2
    125e:	2201      	movs	r2, #1
    1260:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1262:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1264:	2000      	movs	r0, #0
    1266:	e790      	b.n	118a <spi_select_slave+0xa>
		return NULL;
    1268:	2300      	movs	r3, #0
    126a:	e7f6      	b.n	125a <spi_select_slave+0xda>
    126c:	2000      	movs	r0, #0
    126e:	e78c      	b.n	118a <spi_select_slave+0xa>
    1270:	2000      	movs	r0, #0
    1272:	e78a      	b.n	118a <spi_select_slave+0xa>
    1274:	2000      	movs	r0, #0
    1276:	e788      	b.n	118a <spi_select_slave+0xa>
    1278:	41004400 	.word	0x41004400

0000127c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    127c:	b5f0      	push	{r4, r5, r6, r7, lr}
    127e:	46d6      	mov	lr, sl
    1280:	464f      	mov	r7, r9
    1282:	4646      	mov	r6, r8
    1284:	b5c0      	push	{r6, r7, lr}
    1286:	b082      	sub	sp, #8
    1288:	0004      	movs	r4, r0
    128a:	468a      	mov	sl, r1
    128c:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    128e:	2338      	movs	r3, #56	; 0x38
    1290:	5cc3      	ldrb	r3, [r0, r3]
    1292:	2b05      	cmp	r3, #5
    1294:	d100      	bne.n	1298 <spi_write_buffer_wait+0x1c>
    1296:	e0d8      	b.n	144a <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    1298:	2a00      	cmp	r2, #0
    129a:	d101      	bne.n	12a0 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
    129c:	2017      	movs	r0, #23
    129e:	e0d5      	b.n	144c <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    12a0:	7943      	ldrb	r3, [r0, #5]
    12a2:	2b00      	cmp	r3, #0
    12a4:	d103      	bne.n	12ae <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    12a6:	6803      	ldr	r3, [r0, #0]
    12a8:	7e1b      	ldrb	r3, [r3, #24]
    12aa:	079b      	lsls	r3, r3, #30
    12ac:	d402      	bmi.n	12b4 <spi_write_buffer_wait+0x38>
    12ae:	46bc      	mov	ip, r7
    12b0:	2600      	movs	r6, #0
    12b2:	e025      	b.n	1300 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    12b4:	4b6a      	ldr	r3, [pc, #424]	; (1460 <spi_write_buffer_wait+0x1e4>)
    12b6:	4798      	blx	r3
    12b8:	e7f9      	b.n	12ae <spi_write_buffer_wait+0x32>
    12ba:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    12bc:	4a69      	ldr	r2, [pc, #420]	; (1464 <spi_write_buffer_wait+0x1e8>)
    12be:	4293      	cmp	r3, r2
    12c0:	d805      	bhi.n	12ce <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    12c2:	6822      	ldr	r2, [r4, #0]
    12c4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    12c6:	07d2      	lsls	r2, r2, #31
    12c8:	d401      	bmi.n	12ce <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    12ca:	3301      	adds	r3, #1
    12cc:	e7f6      	b.n	12bc <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
    12ce:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    12d0:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    12d2:	0792      	lsls	r2, r2, #30
    12d4:	d404      	bmi.n	12e0 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    12d6:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
    12d8:	07db      	lsls	r3, r3, #31
    12da:	d418      	bmi.n	130e <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    12dc:	2012      	movs	r0, #18
    12de:	e0b5      	b.n	144c <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
    12e0:	0020      	movs	r0, r4
    12e2:	4b5f      	ldr	r3, [pc, #380]	; (1460 <spi_write_buffer_wait+0x1e4>)
    12e4:	4798      	blx	r3
				return STATUS_ABORTED;
    12e6:	2004      	movs	r0, #4
    12e8:	e0b0      	b.n	144c <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    12ea:	3602      	adds	r6, #2
    12ec:	b2b6      	uxth	r6, r6
    12ee:	4652      	mov	r2, sl
    12f0:	5dd2      	ldrb	r2, [r2, r7]
    12f2:	0212      	lsls	r2, r2, #8
    12f4:	4302      	orrs	r2, r0
    12f6:	e017      	b.n	1328 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    12f8:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
    12fa:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
    12fc:	2b00      	cmp	r3, #0
    12fe:	d11a      	bne.n	1336 <spi_write_buffer_wait+0xba>
	while (length--) {
    1300:	1e79      	subs	r1, r7, #1
    1302:	b289      	uxth	r1, r1
    1304:	2f00      	cmp	r7, #0
    1306:	d06c      	beq.n	13e2 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
    1308:	7963      	ldrb	r3, [r4, #5]
    130a:	2b00      	cmp	r3, #0
    130c:	d0d5      	beq.n	12ba <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    130e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1310:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    1312:	07d2      	lsls	r2, r2, #31
    1314:	d5fb      	bpl.n	130e <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
    1316:	1c77      	adds	r7, r6, #1
    1318:	b2bf      	uxth	r7, r7
    131a:	4652      	mov	r2, sl
    131c:	5d90      	ldrb	r0, [r2, r6]
    131e:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1320:	79a5      	ldrb	r5, [r4, #6]
    1322:	2d01      	cmp	r5, #1
    1324:	d0e1      	beq.n	12ea <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
    1326:	003e      	movs	r6, r7
    1328:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    132a:	07f8      	lsls	r0, r7, #31
    132c:	d5e4      	bpl.n	12f8 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    132e:	05d2      	lsls	r2, r2, #23
    1330:	0dd2      	lsrs	r2, r2, #23
    1332:	629a      	str	r2, [r3, #40]	; 0x28
    1334:	e7e0      	b.n	12f8 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    1336:	7963      	ldrb	r3, [r4, #5]
    1338:	2b00      	cmp	r3, #0
    133a:	d040      	beq.n	13be <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    133c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    133e:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1340:	0752      	lsls	r2, r2, #29
    1342:	d5fb      	bpl.n	133c <spi_write_buffer_wait+0xc0>
    1344:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1346:	0752      	lsls	r2, r2, #29
    1348:	d508      	bpl.n	135c <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    134a:	8b5a      	ldrh	r2, [r3, #26]
    134c:	0752      	lsls	r2, r2, #29
    134e:	d501      	bpl.n	1354 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1350:	2204      	movs	r2, #4
    1352:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1354:	79a2      	ldrb	r2, [r4, #6]
    1356:	2a01      	cmp	r2, #1
    1358:	d041      	beq.n	13de <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
    135c:	4660      	mov	r0, ip
    135e:	3801      	subs	r0, #1
    1360:	b283      	uxth	r3, r0
    1362:	469c      	mov	ip, r3
    1364:	000f      	movs	r7, r1
    1366:	e7cb      	b.n	1300 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1368:	3602      	adds	r6, #2
    136a:	4655      	mov	r5, sl
    136c:	5c2f      	ldrb	r7, [r5, r0]
    136e:	023f      	lsls	r7, r7, #8
    1370:	4640      	mov	r0, r8
    1372:	4307      	orrs	r7, r0
    1374:	b2b0      	uxth	r0, r6
    1376:	e01b      	b.n	13b0 <spi_write_buffer_wait+0x134>
						length--;
    1378:	3901      	subs	r1, #1
    137a:	b289      	uxth	r1, r1
    137c:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    137e:	6822      	ldr	r2, [r4, #0]
    1380:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    1382:	0752      	lsls	r2, r2, #29
    1384:	d41d      	bmi.n	13c2 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1386:	3301      	adds	r3, #1
    1388:	4a36      	ldr	r2, [pc, #216]	; (1464 <spi_write_buffer_wait+0x1e8>)
    138a:	4293      	cmp	r3, r2
    138c:	d819      	bhi.n	13c2 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
    138e:	2900      	cmp	r1, #0
    1390:	d0f5      	beq.n	137e <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1392:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1394:	7e17      	ldrb	r7, [r2, #24]
    1396:	07f8      	lsls	r0, r7, #31
    1398:	d5f1      	bpl.n	137e <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
    139a:	1c70      	adds	r0, r6, #1
    139c:	b280      	uxth	r0, r0
    139e:	4655      	mov	r5, sl
    13a0:	5dad      	ldrb	r5, [r5, r6]
    13a2:	46a8      	mov	r8, r5
    13a4:	466f      	mov	r7, sp
    13a6:	80fd      	strh	r5, [r7, #6]
    13a8:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13aa:	79a5      	ldrb	r5, [r4, #6]
    13ac:	2d01      	cmp	r5, #1
    13ae:	d0db      	beq.n	1368 <spi_write_buffer_wait+0xec>
    13b0:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    13b2:	07f5      	lsls	r5, r6, #31
    13b4:	d5e0      	bpl.n	1378 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    13b6:	05ff      	lsls	r7, r7, #23
    13b8:	0dff      	lsrs	r7, r7, #23
    13ba:	6297      	str	r7, [r2, #40]	; 0x28
    13bc:	e7dc      	b.n	1378 <spi_write_buffer_wait+0xfc>
    13be:	2300      	movs	r3, #0
    13c0:	e7e2      	b.n	1388 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    13c2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    13c4:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
    13c6:	0792      	lsls	r2, r2, #30
    13c8:	d404      	bmi.n	13d4 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13ca:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    13cc:	075b      	lsls	r3, r3, #29
    13ce:	d4b5      	bmi.n	133c <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
    13d0:	2012      	movs	r0, #18
    13d2:	e03b      	b.n	144c <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
    13d4:	0020      	movs	r0, r4
    13d6:	4b22      	ldr	r3, [pc, #136]	; (1460 <spi_write_buffer_wait+0x1e4>)
    13d8:	4798      	blx	r3
					return STATUS_ABORTED;
    13da:	2004      	movs	r0, #4
    13dc:	e036      	b.n	144c <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    13de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13e0:	e7bc      	b.n	135c <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    13e2:	7962      	ldrb	r2, [r4, #5]
    13e4:	2a01      	cmp	r2, #1
    13e6:	d006      	beq.n	13f6 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    13e8:	2a00      	cmp	r2, #0
    13ea:	d135      	bne.n	1458 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
    13ec:	79e3      	ldrb	r3, [r4, #7]
    13ee:	2b00      	cmp	r3, #0
    13f0:	d11a      	bne.n	1428 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    13f2:	2000      	movs	r0, #0
    13f4:	e02a      	b.n	144c <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    13f6:	6823      	ldr	r3, [r4, #0]
    13f8:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    13fa:	079b      	lsls	r3, r3, #30
    13fc:	d5fb      	bpl.n	13f6 <spi_write_buffer_wait+0x17a>
    13fe:	e7f3      	b.n	13e8 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1400:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1402:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1404:	0752      	lsls	r2, r2, #29
    1406:	d529      	bpl.n	145c <spi_write_buffer_wait+0x1e0>
    1408:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    140a:	0752      	lsls	r2, r2, #29
    140c:	d508      	bpl.n	1420 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    140e:	8b5a      	ldrh	r2, [r3, #26]
    1410:	0752      	lsls	r2, r2, #29
    1412:	d501      	bpl.n	1418 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1414:	2204      	movs	r2, #4
    1416:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1418:	79a2      	ldrb	r2, [r4, #6]
    141a:	2a01      	cmp	r2, #1
    141c:	d011      	beq.n	1442 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    1420:	4660      	mov	r0, ip
    1422:	3801      	subs	r0, #1
    1424:	b283      	uxth	r3, r0
    1426:	469c      	mov	ip, r3
			while (flush_length) {
    1428:	4663      	mov	r3, ip
    142a:	2b00      	cmp	r3, #0
    142c:	d00b      	beq.n	1446 <spi_write_buffer_wait+0x1ca>
    142e:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1430:	4a0c      	ldr	r2, [pc, #48]	; (1464 <spi_write_buffer_wait+0x1e8>)
    1432:	4293      	cmp	r3, r2
    1434:	d8e4      	bhi.n	1400 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1436:	6822      	ldr	r2, [r4, #0]
    1438:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    143a:	0752      	lsls	r2, r2, #29
    143c:	d4e0      	bmi.n	1400 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    143e:	3301      	adds	r3, #1
    1440:	e7f6      	b.n	1430 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1444:	e7ec      	b.n	1420 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1446:	2000      	movs	r0, #0
    1448:	e000      	b.n	144c <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    144a:	2005      	movs	r0, #5
}
    144c:	b002      	add	sp, #8
    144e:	bc1c      	pop	{r2, r3, r4}
    1450:	4690      	mov	r8, r2
    1452:	4699      	mov	r9, r3
    1454:	46a2      	mov	sl, r4
    1456:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1458:	2000      	movs	r0, #0
    145a:	e7f7      	b.n	144c <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    145c:	2012      	movs	r0, #18
    145e:	e7f5      	b.n	144c <spi_write_buffer_wait+0x1d0>
    1460:	00000f41 	.word	0x00000f41
    1464:	00002710 	.word	0x00002710

00001468 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1468:	b5f0      	push	{r4, r5, r6, r7, lr}
    146a:	46de      	mov	lr, fp
    146c:	4657      	mov	r7, sl
    146e:	464e      	mov	r6, r9
    1470:	4645      	mov	r5, r8
    1472:	b5e0      	push	{r5, r6, r7, lr}
    1474:	b085      	sub	sp, #20
    1476:	0004      	movs	r4, r0
    1478:	9100      	str	r1, [sp, #0]
    147a:	9202      	str	r2, [sp, #8]
    147c:	4698      	mov	r8, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    147e:	2338      	movs	r3, #56	; 0x38
    1480:	5cc3      	ldrb	r3, [r0, r3]
    1482:	2b05      	cmp	r3, #5
    1484:	d100      	bne.n	1488 <spi_transceive_buffer_wait+0x20>
    1486:	e11f      	b.n	16c8 <spi_transceive_buffer_wait+0x260>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1488:	4643      	mov	r3, r8
    148a:	2b00      	cmp	r3, #0
    148c:	d101      	bne.n	1492 <spi_transceive_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    148e:	2117      	movs	r1, #23
    1490:	e11b      	b.n	16ca <spi_transceive_buffer_wait+0x262>
	}

	if (!(module->receiver_enabled)) {
    1492:	79c3      	ldrb	r3, [r0, #7]
    1494:	2b00      	cmp	r3, #0
    1496:	d101      	bne.n	149c <spi_transceive_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    1498:	211c      	movs	r1, #28
    149a:	e116      	b.n	16ca <spi_transceive_buffer_wait+0x262>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    149c:	7943      	ldrb	r3, [r0, #5]
    149e:	2b00      	cmp	r3, #0
    14a0:	d103      	bne.n	14aa <spi_transceive_buffer_wait+0x42>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    14a2:	6803      	ldr	r3, [r0, #0]
    14a4:	7e1b      	ldrb	r3, [r3, #24]
    14a6:	079b      	lsls	r3, r3, #30
    14a8:	d404      	bmi.n	14b4 <spi_transceive_buffer_wait+0x4c>
		rx_data[rx_pos++] = received_data;
		*rx_data = received_data;
		
		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    14aa:	46c4      	mov	ip, r8
    14ac:	2300      	movs	r3, #0
    14ae:	9303      	str	r3, [sp, #12]
    14b0:	2100      	movs	r1, #0
    14b2:	e07c      	b.n	15ae <spi_transceive_buffer_wait+0x146>
		_spi_clear_tx_complete_flag(module);
    14b4:	4b8a      	ldr	r3, [pc, #552]	; (16e0 <spi_transceive_buffer_wait+0x278>)
    14b6:	4798      	blx	r3
    14b8:	e7f7      	b.n	14aa <spi_transceive_buffer_wait+0x42>
    14ba:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    14bc:	4a89      	ldr	r2, [pc, #548]	; (16e4 <spi_transceive_buffer_wait+0x27c>)
    14be:	4293      	cmp	r3, r2
    14c0:	d805      	bhi.n	14ce <spi_transceive_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14c2:	6822      	ldr	r2, [r4, #0]
    14c4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    14c6:	07d2      	lsls	r2, r2, #31
    14c8:	d401      	bmi.n	14ce <spi_transceive_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    14ca:	3301      	adds	r3, #1
    14cc:	e7f6      	b.n	14bc <spi_transceive_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14ce:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    14d0:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    14d2:	0792      	lsls	r2, r2, #30
    14d4:	d404      	bmi.n	14e0 <spi_transceive_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14d6:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    14d8:	07db      	lsls	r3, r3, #31
    14da:	d471      	bmi.n	15c0 <spi_transceive_buffer_wait+0x158>
				return STATUS_ERR_TIMEOUT;
    14dc:	2112      	movs	r1, #18
    14de:	e0f4      	b.n	16ca <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    14e0:	0020      	movs	r0, r4
    14e2:	4b7f      	ldr	r3, [pc, #508]	; (16e0 <spi_transceive_buffer_wait+0x278>)
    14e4:	4798      	blx	r3
				return STATUS_ABORTED;
    14e6:	2104      	movs	r1, #4
    14e8:	e0ef      	b.n	16ca <spi_transceive_buffer_wait+0x262>
			data_to_send |= (tx_data[tx_pos++] << 8);
    14ea:	3102      	adds	r1, #2
    14ec:	9a00      	ldr	r2, [sp, #0]
    14ee:	5d92      	ldrb	r2, [r2, r6]
    14f0:	0212      	lsls	r2, r2, #8
    14f2:	4650      	mov	r0, sl
    14f4:	4302      	orrs	r2, r0
    14f6:	b28e      	uxth	r6, r1
    14f8:	e071      	b.n	15de <spi_transceive_buffer_wait+0x176>
						data_to_send |= (tx_data[tx_pos++] << 8);
    14fa:	3602      	adds	r6, #2
    14fc:	9900      	ldr	r1, [sp, #0]
    14fe:	5c09      	ldrb	r1, [r1, r0]
    1500:	0209      	lsls	r1, r1, #8
    1502:	4650      	mov	r0, sl
    1504:	4301      	orrs	r1, r0
    1506:	4688      	mov	r8, r1
    1508:	b2b0      	uxth	r0, r6
    150a:	e01a      	b.n	1542 <spi_transceive_buffer_wait+0xda>
					length--;
    150c:	3f01      	subs	r7, #1
    150e:	b2bf      	uxth	r7, r7
    1510:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1512:	6822      	ldr	r2, [r4, #0]
    1514:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1516:	0752      	lsls	r2, r2, #29
    1518:	d41d      	bmi.n	1556 <spi_transceive_buffer_wait+0xee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    151a:	3301      	adds	r3, #1
    151c:	4a71      	ldr	r2, [pc, #452]	; (16e4 <spi_transceive_buffer_wait+0x27c>)
    151e:	4293      	cmp	r3, r2
    1520:	d819      	bhi.n	1556 <spi_transceive_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1522:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1524:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1526:	07c9      	lsls	r1, r1, #31
    1528:	d5f3      	bpl.n	1512 <spi_transceive_buffer_wait+0xaa>
					data_to_send = tx_data[tx_pos++];
    152a:	1c70      	adds	r0, r6, #1
    152c:	b280      	uxth	r0, r0
    152e:	9900      	ldr	r1, [sp, #0]
    1530:	5d89      	ldrb	r1, [r1, r6]
    1532:	468a      	mov	sl, r1
    1534:	466d      	mov	r5, sp
    1536:	80e9      	strh	r1, [r5, #6]
    1538:	88e9      	ldrh	r1, [r5, #6]
    153a:	4688      	mov	r8, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    153c:	79a1      	ldrb	r1, [r4, #6]
    153e:	2901      	cmp	r1, #1
    1540:	d0db      	beq.n	14fa <spi_transceive_buffer_wait+0x92>
    1542:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1544:	07f1      	lsls	r1, r6, #31
    1546:	d5e1      	bpl.n	150c <spi_transceive_buffer_wait+0xa4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1548:	4641      	mov	r1, r8
    154a:	05c9      	lsls	r1, r1, #23
    154c:	0dc9      	lsrs	r1, r1, #23
    154e:	6291      	str	r1, [r2, #40]	; 0x28
    1550:	e7dc      	b.n	150c <spi_transceive_buffer_wait+0xa4>
    1552:	2300      	movs	r3, #0
    1554:	e7e2      	b.n	151c <spi_transceive_buffer_wait+0xb4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1556:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1558:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    155a:	0792      	lsls	r2, r2, #30
    155c:	d404      	bmi.n	1568 <spi_transceive_buffer_wait+0x100>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    155e:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1560:	075b      	lsls	r3, r3, #29
    1562:	d445      	bmi.n	15f0 <spi_transceive_buffer_wait+0x188>
				return STATUS_ERR_TIMEOUT;
    1564:	2112      	movs	r1, #18
    1566:	e0b0      	b.n	16ca <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    1568:	0020      	movs	r0, r4
    156a:	4b5d      	ldr	r3, [pc, #372]	; (16e0 <spi_transceive_buffer_wait+0x278>)
    156c:	4798      	blx	r3
				return STATUS_ABORTED;
    156e:	2104      	movs	r1, #4
    1570:	e0ab      	b.n	16ca <spi_transceive_buffer_wait+0x262>
	enum status_code retval = STATUS_OK;
    1572:	2100      	movs	r1, #0
    1574:	e04d      	b.n	1612 <spi_transceive_buffer_wait+0x1aa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1578:	05d2      	lsls	r2, r2, #23
    157a:	0dd3      	lsrs	r3, r2, #23
    157c:	4698      	mov	r8, r3
    157e:	e002      	b.n	1586 <spi_transceive_buffer_wait+0x11e>
		uint16_t received_data = 0;
    1580:	2300      	movs	r3, #0
    1582:	4698      	mov	r8, r3
		return STATUS_ERR_IO;
    1584:	2110      	movs	r1, #16
		if (retval != STATUS_OK) {
    1586:	2900      	cmp	r1, #0
    1588:	d000      	beq.n	158c <spi_transceive_buffer_wait+0x124>
    158a:	e09e      	b.n	16ca <spi_transceive_buffer_wait+0x262>
		rx_data[rx_pos++] = received_data;
    158c:	9803      	ldr	r0, [sp, #12]
    158e:	0003      	movs	r3, r0
    1590:	3301      	adds	r3, #1
    1592:	b29b      	uxth	r3, r3
    1594:	4642      	mov	r2, r8
    1596:	4669      	mov	r1, sp
    1598:	718a      	strb	r2, [r1, #6]
    159a:	7989      	ldrb	r1, [r1, #6]
    159c:	9a02      	ldr	r2, [sp, #8]
    159e:	5411      	strb	r1, [r2, r0]
		*rx_data = received_data;
    15a0:	7011      	strb	r1, [r2, #0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15a2:	79a1      	ldrb	r1, [r4, #6]
    15a4:	2901      	cmp	r1, #1
    15a6:	d03b      	beq.n	1620 <spi_transceive_buffer_wait+0x1b8>
			rx_data[rx_pos++] = (received_data >> 8);
    15a8:	9303      	str	r3, [sp, #12]
    15aa:	0031      	movs	r1, r6
    15ac:	46b8      	mov	r8, r7
	while (length--) {
    15ae:	4643      	mov	r3, r8
    15b0:	1e5f      	subs	r7, r3, #1
    15b2:	b2bf      	uxth	r7, r7
    15b4:	2b00      	cmp	r3, #0
    15b6:	d03a      	beq.n	162e <spi_transceive_buffer_wait+0x1c6>
		if (module->mode == SPI_MODE_SLAVE) {
    15b8:	7963      	ldrb	r3, [r4, #5]
    15ba:	2b00      	cmp	r3, #0
    15bc:	d100      	bne.n	15c0 <spi_transceive_buffer_wait+0x158>
    15be:	e77c      	b.n	14ba <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    15c0:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    15c2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    15c4:	07d2      	lsls	r2, r2, #31
    15c6:	d5fb      	bpl.n	15c0 <spi_transceive_buffer_wait+0x158>
		uint16_t data_to_send = tx_data[tx_pos++];
    15c8:	1c4e      	adds	r6, r1, #1
    15ca:	b2b6      	uxth	r6, r6
    15cc:	9a00      	ldr	r2, [sp, #0]
    15ce:	5c52      	ldrb	r2, [r2, r1]
    15d0:	4692      	mov	sl, r2
    15d2:	4668      	mov	r0, sp
    15d4:	80c2      	strh	r2, [r0, #6]
    15d6:	88c2      	ldrh	r2, [r0, #6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15d8:	79a0      	ldrb	r0, [r4, #6]
    15da:	2801      	cmp	r0, #1
    15dc:	d085      	beq.n	14ea <spi_transceive_buffer_wait+0x82>
    15de:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    15e0:	07c9      	lsls	r1, r1, #31
    15e2:	d502      	bpl.n	15ea <spi_transceive_buffer_wait+0x182>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    15e4:	05d2      	lsls	r2, r2, #23
    15e6:	0dd2      	lsrs	r2, r2, #23
    15e8:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    15ea:	7963      	ldrb	r3, [r4, #5]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d0b0      	beq.n	1552 <spi_transceive_buffer_wait+0xea>
	SercomSpi *const spi_module = &(module->hw->SPI);
    15f0:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    15f2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    15f4:	0752      	lsls	r2, r2, #29
    15f6:	d5fb      	bpl.n	15f0 <spi_transceive_buffer_wait+0x188>
		rx_length--;
    15f8:	4662      	mov	r2, ip
    15fa:	3a01      	subs	r2, #1
    15fc:	b292      	uxth	r2, r2
    15fe:	4694      	mov	ip, r2
    1600:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1602:	0752      	lsls	r2, r2, #29
    1604:	d5bc      	bpl.n	1580 <spi_transceive_buffer_wait+0x118>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1606:	8b5a      	ldrh	r2, [r3, #26]
    1608:	0752      	lsls	r2, r2, #29
    160a:	d5b2      	bpl.n	1572 <spi_transceive_buffer_wait+0x10a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    160c:	2204      	movs	r2, #4
    160e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1610:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1612:	79a2      	ldrb	r2, [r4, #6]
    1614:	2a01      	cmp	r2, #1
    1616:	d0ae      	beq.n	1576 <spi_transceive_buffer_wait+0x10e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    161a:	b2d3      	uxtb	r3, r2
    161c:	4698      	mov	r8, r3
    161e:	e7b2      	b.n	1586 <spi_transceive_buffer_wait+0x11e>
			rx_data[rx_pos++] = (received_data >> 8);
    1620:	3002      	adds	r0, #2
    1622:	4642      	mov	r2, r8
    1624:	0a12      	lsrs	r2, r2, #8
    1626:	9902      	ldr	r1, [sp, #8]
    1628:	54ca      	strb	r2, [r1, r3]
    162a:	b283      	uxth	r3, r0
    162c:	e7bc      	b.n	15a8 <spi_transceive_buffer_wait+0x140>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    162e:	7962      	ldrb	r2, [r4, #5]
    1630:	2a01      	cmp	r2, #1
    1632:	d003      	beq.n	163c <spi_transceive_buffer_wait+0x1d4>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1634:	2a00      	cmp	r2, #0
    1636:	d03b      	beq.n	16b0 <spi_transceive_buffer_wait+0x248>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1638:	2100      	movs	r1, #0
    163a:	e046      	b.n	16ca <spi_transceive_buffer_wait+0x262>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    163c:	6823      	ldr	r3, [r4, #0]
    163e:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    1640:	079b      	lsls	r3, r3, #30
    1642:	d5fb      	bpl.n	163c <spi_transceive_buffer_wait+0x1d4>
    1644:	e7f6      	b.n	1634 <spi_transceive_buffer_wait+0x1cc>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1646:	3301      	adds	r3, #1
    1648:	4a26      	ldr	r2, [pc, #152]	; (16e4 <spi_transceive_buffer_wait+0x27c>)
    164a:	4293      	cmp	r3, r2
    164c:	d803      	bhi.n	1656 <spi_transceive_buffer_wait+0x1ee>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    164e:	6822      	ldr	r2, [r4, #0]
    1650:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1652:	0752      	lsls	r2, r2, #29
    1654:	d5f7      	bpl.n	1646 <spi_transceive_buffer_wait+0x1de>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1656:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1658:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    165a:	0752      	lsls	r2, r2, #29
    165c:	d53d      	bpl.n	16da <spi_transceive_buffer_wait+0x272>
			rx_length--;
    165e:	4662      	mov	r2, ip
    1660:	3a01      	subs	r2, #1
    1662:	b292      	uxth	r2, r2
    1664:	4694      	mov	ip, r2
    1666:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1668:	0752      	lsls	r2, r2, #29
    166a:	d511      	bpl.n	1690 <spi_transceive_buffer_wait+0x228>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    166c:	8b5a      	ldrh	r2, [r3, #26]
    166e:	0752      	lsls	r2, r2, #29
    1670:	d508      	bpl.n	1684 <spi_transceive_buffer_wait+0x21c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1672:	2204      	movs	r2, #4
    1674:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1676:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1678:	79a2      	ldrb	r2, [r4, #6]
    167a:	2a01      	cmp	r2, #1
    167c:	d004      	beq.n	1688 <spi_transceive_buffer_wait+0x220>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    167e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1680:	b2d2      	uxtb	r2, r2
    1682:	e007      	b.n	1694 <spi_transceive_buffer_wait+0x22c>
	enum status_code retval = STATUS_OK;
    1684:	2100      	movs	r1, #0
    1686:	e7f7      	b.n	1678 <spi_transceive_buffer_wait+0x210>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    168a:	05d2      	lsls	r2, r2, #23
    168c:	0dd2      	lsrs	r2, r2, #23
    168e:	e001      	b.n	1694 <spi_transceive_buffer_wait+0x22c>
			uint16_t received_data = 0;
    1690:	4642      	mov	r2, r8
		return STATUS_ERR_IO;
    1692:	2110      	movs	r1, #16
			if (retval != STATUS_OK) {
    1694:	2900      	cmp	r1, #0
    1696:	d118      	bne.n	16ca <spi_transceive_buffer_wait+0x262>
			rx_data[rx_pos++] = received_data;
    1698:	9803      	ldr	r0, [sp, #12]
    169a:	0003      	movs	r3, r0
    169c:	3301      	adds	r3, #1
    169e:	b29b      	uxth	r3, r3
    16a0:	b2d1      	uxtb	r1, r2
    16a2:	9d02      	ldr	r5, [sp, #8]
    16a4:	5429      	strb	r1, [r5, r0]
			*rx_data = received_data;
    16a6:	7029      	strb	r1, [r5, #0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16a8:	79a1      	ldrb	r1, [r4, #6]
    16aa:	2901      	cmp	r1, #1
    16ac:	d005      	beq.n	16ba <spi_transceive_buffer_wait+0x252>
				rx_data[rx_pos++] = (received_data >> 8);
    16ae:	9303      	str	r3, [sp, #12]
		while (rx_length) {
    16b0:	4663      	mov	r3, ip
    16b2:	2b00      	cmp	r3, #0
    16b4:	d006      	beq.n	16c4 <spi_transceive_buffer_wait+0x25c>
    16b6:	2300      	movs	r3, #0
    16b8:	e7c6      	b.n	1648 <spi_transceive_buffer_wait+0x1e0>
				rx_data[rx_pos++] = (received_data >> 8);
    16ba:	3002      	adds	r0, #2
    16bc:	0a12      	lsrs	r2, r2, #8
    16be:	54ea      	strb	r2, [r5, r3]
    16c0:	b283      	uxth	r3, r0
    16c2:	e7f4      	b.n	16ae <spi_transceive_buffer_wait+0x246>
	return STATUS_OK;
    16c4:	2100      	movs	r1, #0
    16c6:	e000      	b.n	16ca <spi_transceive_buffer_wait+0x262>
		return STATUS_BUSY;
    16c8:	2105      	movs	r1, #5
}
    16ca:	0008      	movs	r0, r1
    16cc:	b005      	add	sp, #20
    16ce:	bc3c      	pop	{r2, r3, r4, r5}
    16d0:	4690      	mov	r8, r2
    16d2:	4699      	mov	r9, r3
    16d4:	46a2      	mov	sl, r4
    16d6:	46ab      	mov	fp, r5
    16d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    16da:	2112      	movs	r1, #18
    16dc:	e7f5      	b.n	16ca <spi_transceive_buffer_wait+0x262>
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	00000f41 	.word	0x00000f41
    16e4:	00002710 	.word	0x00002710

000016e8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    16e8:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    16ea:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    16ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    16ee:	780a      	ldrb	r2, [r1, #0]
    16f0:	b2d2      	uxtb	r2, r2
    16f2:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    16f4:	1c4c      	adds	r4, r1, #1
    16f6:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16f8:	7986      	ldrb	r6, [r0, #6]
    16fa:	2e01      	cmp	r6, #1
    16fc:	d007      	beq.n	170e <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    16fe:	05db      	lsls	r3, r3, #23
    1700:	0ddb      	lsrs	r3, r3, #23
    1702:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1704:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1706:	3b01      	subs	r3, #1
    1708:	b29b      	uxth	r3, r3
    170a:	8683      	strh	r3, [r0, #52]	; 0x34
}
    170c:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    170e:	784b      	ldrb	r3, [r1, #1]
    1710:	021b      	lsls	r3, r3, #8
    1712:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    1714:	1c8c      	adds	r4, r1, #2
    1716:	62c4      	str	r4, [r0, #44]	; 0x2c
    1718:	e7f1      	b.n	16fe <_spi_write+0x16>
	...

0000171c <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    171c:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    171e:	4a04      	ldr	r2, [pc, #16]	; (1730 <_spi_write_dummy+0x14>)
    1720:	8812      	ldrh	r2, [r2, #0]
    1722:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1724:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1726:	3b01      	subs	r3, #1
    1728:	b29b      	uxth	r3, r3
    172a:	8643      	strh	r3, [r0, #50]	; 0x32
}
    172c:	4770      	bx	lr
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	200000fc 	.word	0x200000fc

00001734 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1734:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    1736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1738:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    173a:	3b01      	subs	r3, #1
    173c:	b29b      	uxth	r3, r3
    173e:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1740:	4770      	bx	lr

00001742 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1742:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1746:	05db      	lsls	r3, r3, #23
    1748:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    174a:	b2da      	uxtb	r2, r3
    174c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    174e:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1750:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1752:	1c51      	adds	r1, r2, #1
    1754:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1756:	7981      	ldrb	r1, [r0, #6]
    1758:	2901      	cmp	r1, #1
    175a:	d004      	beq.n	1766 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    175c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    175e:	3b01      	subs	r3, #1
    1760:	b29b      	uxth	r3, r3
    1762:	8603      	strh	r3, [r0, #48]	; 0x30
}
    1764:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1766:	0a1b      	lsrs	r3, r3, #8
    1768:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    176a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    176c:	3301      	adds	r3, #1
    176e:	6283      	str	r3, [r0, #40]	; 0x28
    1770:	e7f4      	b.n	175c <_spi_read+0x1a>
	...

00001774 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1776:	0080      	lsls	r0, r0, #2
    1778:	4b6b      	ldr	r3, [pc, #428]	; (1928 <_spi_interrupt_handler+0x1b4>)
    177a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    177c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    177e:	2337      	movs	r3, #55	; 0x37
    1780:	5ce3      	ldrb	r3, [r4, r3]
    1782:	2236      	movs	r2, #54	; 0x36
    1784:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    1786:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1788:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    178a:	7db5      	ldrb	r5, [r6, #22]
    178c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    178e:	07eb      	lsls	r3, r5, #31
    1790:	d516      	bpl.n	17c0 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1792:	7963      	ldrb	r3, [r4, #5]
    1794:	2b01      	cmp	r3, #1
    1796:	d04d      	beq.n	1834 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1798:	7963      	ldrb	r3, [r4, #5]
		if (0
    179a:	2b01      	cmp	r3, #1
    179c:	d057      	beq.n	184e <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    179e:	2b00      	cmp	r3, #0
    17a0:	d10e      	bne.n	17c0 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    17a2:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    17a4:	2b00      	cmp	r3, #0
    17a6:	d00b      	beq.n	17c0 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    17a8:	0020      	movs	r0, r4
    17aa:	4b60      	ldr	r3, [pc, #384]	; (192c <_spi_interrupt_handler+0x1b8>)
    17ac:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    17ae:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    17b0:	b29b      	uxth	r3, r3
    17b2:	2b00      	cmp	r3, #0
    17b4:	d104      	bne.n	17c0 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    17b6:	3301      	adds	r3, #1
    17b8:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    17ba:	7a63      	ldrb	r3, [r4, #9]
    17bc:	2b01      	cmp	r3, #1
    17be:	d04a      	beq.n	1856 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    17c0:	076b      	lsls	r3, r5, #29
    17c2:	d511      	bpl.n	17e8 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    17c4:	8b73      	ldrh	r3, [r6, #26]
    17c6:	075b      	lsls	r3, r3, #29
    17c8:	d54f      	bpl.n	186a <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    17ca:	7a63      	ldrb	r3, [r4, #9]
    17cc:	2b01      	cmp	r3, #1
    17ce:	d008      	beq.n	17e2 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    17d0:	221e      	movs	r2, #30
    17d2:	2338      	movs	r3, #56	; 0x38
    17d4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    17d6:	3b35      	subs	r3, #53	; 0x35
    17d8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    17da:	3302      	adds	r3, #2
    17dc:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    17de:	073b      	lsls	r3, r7, #28
    17e0:	d43f      	bmi.n	1862 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    17e2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    17e4:	2304      	movs	r3, #4
    17e6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    17e8:	07ab      	lsls	r3, r5, #30
    17ea:	d513      	bpl.n	1814 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    17ec:	7963      	ldrb	r3, [r4, #5]
    17ee:	2b00      	cmp	r3, #0
    17f0:	d10d      	bne.n	180e <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    17f2:	3307      	adds	r3, #7
    17f4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    17f6:	3b05      	subs	r3, #5
    17f8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    17fa:	3301      	adds	r3, #1
    17fc:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    17fe:	2300      	movs	r3, #0
    1800:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1802:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1804:	3338      	adds	r3, #56	; 0x38
    1806:	2200      	movs	r2, #0
    1808:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    180a:	06fb      	lsls	r3, r7, #27
    180c:	d464      	bmi.n	18d8 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    180e:	7963      	ldrb	r3, [r4, #5]
    1810:	2b01      	cmp	r3, #1
    1812:	d065      	beq.n	18e0 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1814:	072b      	lsls	r3, r5, #28
    1816:	d508      	bpl.n	182a <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    1818:	7963      	ldrb	r3, [r4, #5]
    181a:	2b00      	cmp	r3, #0
    181c:	d105      	bne.n	182a <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    181e:	3308      	adds	r3, #8
    1820:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1822:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1824:	06bb      	lsls	r3, r7, #26
    1826:	d500      	bpl.n	182a <_spi_interrupt_handler+0xb6>
    1828:	e070      	b.n	190c <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    182a:	b26d      	sxtb	r5, r5
    182c:	2d00      	cmp	r5, #0
    182e:	da00      	bge.n	1832 <_spi_interrupt_handler+0xbe>
    1830:	e070      	b.n	1914 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    1834:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1836:	2b00      	cmp	r3, #0
    1838:	d1ae      	bne.n	1798 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    183a:	0020      	movs	r0, r4
    183c:	4b3c      	ldr	r3, [pc, #240]	; (1930 <_spi_interrupt_handler+0x1bc>)
    183e:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1840:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1842:	b29b      	uxth	r3, r3
    1844:	2b00      	cmp	r3, #0
    1846:	d1a7      	bne.n	1798 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1848:	3301      	adds	r3, #1
    184a:	7533      	strb	r3, [r6, #20]
    184c:	e7a4      	b.n	1798 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    184e:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1850:	2a00      	cmp	r2, #0
    1852:	d1a9      	bne.n	17a8 <_spi_interrupt_handler+0x34>
    1854:	e7a3      	b.n	179e <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    1856:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1858:	2b00      	cmp	r3, #0
    185a:	d1b1      	bne.n	17c0 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    185c:	3302      	adds	r3, #2
    185e:	75b3      	strb	r3, [r6, #22]
    1860:	e7ae      	b.n	17c0 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1862:	0020      	movs	r0, r4
    1864:	69a3      	ldr	r3, [r4, #24]
    1866:	4798      	blx	r3
    1868:	e7bb      	b.n	17e2 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    186a:	7a63      	ldrb	r3, [r4, #9]
    186c:	2b01      	cmp	r3, #1
    186e:	d017      	beq.n	18a0 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    1870:	0020      	movs	r0, r4
    1872:	4b30      	ldr	r3, [pc, #192]	; (1934 <_spi_interrupt_handler+0x1c0>)
    1874:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    1876:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1878:	b29b      	uxth	r3, r3
    187a:	2b00      	cmp	r3, #0
    187c:	d1b4      	bne.n	17e8 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    187e:	2200      	movs	r2, #0
    1880:	3338      	adds	r3, #56	; 0x38
    1882:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1884:	3b34      	subs	r3, #52	; 0x34
    1886:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1888:	7a63      	ldrb	r3, [r4, #9]
    188a:	2b02      	cmp	r3, #2
    188c:	d01d      	beq.n	18ca <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    188e:	7a63      	ldrb	r3, [r4, #9]
    1890:	2b00      	cmp	r3, #0
    1892:	d1a9      	bne.n	17e8 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1894:	07bb      	lsls	r3, r7, #30
    1896:	d5a7      	bpl.n	17e8 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1898:	0020      	movs	r0, r4
    189a:	6923      	ldr	r3, [r4, #16]
    189c:	4798      	blx	r3
    189e:	e7a3      	b.n	17e8 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    18a0:	0020      	movs	r0, r4
    18a2:	4b25      	ldr	r3, [pc, #148]	; (1938 <_spi_interrupt_handler+0x1c4>)
    18a4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    18a6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    18a8:	b29b      	uxth	r3, r3
    18aa:	2b00      	cmp	r3, #0
    18ac:	d19c      	bne.n	17e8 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    18ae:	3304      	adds	r3, #4
    18b0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    18b2:	2200      	movs	r2, #0
    18b4:	3334      	adds	r3, #52	; 0x34
    18b6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    18b8:	3b35      	subs	r3, #53	; 0x35
    18ba:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    18bc:	07fb      	lsls	r3, r7, #31
    18be:	d400      	bmi.n	18c2 <_spi_interrupt_handler+0x14e>
    18c0:	e792      	b.n	17e8 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    18c2:	0020      	movs	r0, r4
    18c4:	68e3      	ldr	r3, [r4, #12]
    18c6:	4798      	blx	r3
    18c8:	e78e      	b.n	17e8 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    18ca:	077b      	lsls	r3, r7, #29
    18cc:	d400      	bmi.n	18d0 <_spi_interrupt_handler+0x15c>
    18ce:	e78b      	b.n	17e8 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    18d0:	0020      	movs	r0, r4
    18d2:	6963      	ldr	r3, [r4, #20]
    18d4:	4798      	blx	r3
    18d6:	e787      	b.n	17e8 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    18d8:	0020      	movs	r0, r4
    18da:	69e3      	ldr	r3, [r4, #28]
    18dc:	4798      	blx	r3
    18de:	e796      	b.n	180e <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    18e0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    18e2:	2b01      	cmp	r3, #1
    18e4:	d000      	beq.n	18e8 <_spi_interrupt_handler+0x174>
    18e6:	e795      	b.n	1814 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    18e8:	79e3      	ldrb	r3, [r4, #7]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d000      	beq.n	18f0 <_spi_interrupt_handler+0x17c>
    18ee:	e791      	b.n	1814 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    18f0:	3302      	adds	r3, #2
    18f2:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    18f4:	3301      	adds	r3, #1
    18f6:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    18f8:	2200      	movs	r2, #0
    18fa:	3335      	adds	r3, #53	; 0x35
    18fc:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    18fe:	07fb      	lsls	r3, r7, #31
    1900:	d400      	bmi.n	1904 <_spi_interrupt_handler+0x190>
    1902:	e787      	b.n	1814 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1904:	0020      	movs	r0, r4
    1906:	68e3      	ldr	r3, [r4, #12]
    1908:	4798      	blx	r3
    190a:	e783      	b.n	1814 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    190c:	0020      	movs	r0, r4
    190e:	6a23      	ldr	r3, [r4, #32]
    1910:	4798      	blx	r3
    1912:	e78a      	b.n	182a <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1914:	2380      	movs	r3, #128	; 0x80
    1916:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1918:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    191a:	067b      	lsls	r3, r7, #25
    191c:	d400      	bmi.n	1920 <_spi_interrupt_handler+0x1ac>
    191e:	e788      	b.n	1832 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1920:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1922:	0020      	movs	r0, r4
    1924:	4798      	blx	r3
}
    1926:	e784      	b.n	1832 <_spi_interrupt_handler+0xbe>
    1928:	20000100 	.word	0x20000100
    192c:	000016e9 	.word	0x000016e9
    1930:	0000171d 	.word	0x0000171d
    1934:	00001743 	.word	0x00001743
    1938:	00001735 	.word	0x00001735

0000193c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    193c:	4770      	bx	lr
	...

00001940 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1940:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1942:	4b0b      	ldr	r3, [pc, #44]	; (1970 <_sercom_set_handler+0x30>)
    1944:	781b      	ldrb	r3, [r3, #0]
    1946:	2b00      	cmp	r3, #0
    1948:	d008      	beq.n	195c <_sercom_set_handler+0x1c>
    194a:	e00c      	b.n	1966 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    194c:	009a      	lsls	r2, r3, #2
    194e:	4d09      	ldr	r5, [pc, #36]	; (1974 <_sercom_set_handler+0x34>)
    1950:	4c09      	ldr	r4, [pc, #36]	; (1978 <_sercom_set_handler+0x38>)
    1952:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    1954:	2500      	movs	r5, #0
    1956:	4c09      	ldr	r4, [pc, #36]	; (197c <_sercom_set_handler+0x3c>)
    1958:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    195a:	3301      	adds	r3, #1
    195c:	2b05      	cmp	r3, #5
    195e:	d9f5      	bls.n	194c <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    1960:	2201      	movs	r2, #1
    1962:	4b03      	ldr	r3, [pc, #12]	; (1970 <_sercom_set_handler+0x30>)
    1964:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1966:	0080      	lsls	r0, r0, #2
    1968:	4b03      	ldr	r3, [pc, #12]	; (1978 <_sercom_set_handler+0x38>)
    196a:	50c1      	str	r1, [r0, r3]
}
    196c:	bd30      	pop	{r4, r5, pc}
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	20000082 	.word	0x20000082
    1974:	0000193d 	.word	0x0000193d
    1978:	20000084 	.word	0x20000084
    197c:	20000100 	.word	0x20000100

00001980 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1980:	b500      	push	{lr}
    1982:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1984:	4b05      	ldr	r3, [pc, #20]	; (199c <_sercom_get_interrupt_vector+0x1c>)
    1986:	681a      	ldr	r2, [r3, #0]
    1988:	9200      	str	r2, [sp, #0]
    198a:	889b      	ldrh	r3, [r3, #4]
    198c:	466a      	mov	r2, sp
    198e:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1990:	4b03      	ldr	r3, [pc, #12]	; (19a0 <_sercom_get_interrupt_vector+0x20>)
    1992:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1994:	466b      	mov	r3, sp
    1996:	5618      	ldrsb	r0, [r3, r0]
}
    1998:	b003      	add	sp, #12
    199a:	bd00      	pop	{pc}
    199c:	00002820 	.word	0x00002820
    19a0:	00000925 	.word	0x00000925

000019a4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    19a4:	b510      	push	{r4, lr}
    19a6:	4b02      	ldr	r3, [pc, #8]	; (19b0 <SERCOM0_Handler+0xc>)
    19a8:	681b      	ldr	r3, [r3, #0]
    19aa:	2000      	movs	r0, #0
    19ac:	4798      	blx	r3
    19ae:	bd10      	pop	{r4, pc}
    19b0:	20000084 	.word	0x20000084

000019b4 <SERCOM1_Handler>:
    19b4:	b510      	push	{r4, lr}
    19b6:	4b02      	ldr	r3, [pc, #8]	; (19c0 <SERCOM1_Handler+0xc>)
    19b8:	685b      	ldr	r3, [r3, #4]
    19ba:	2001      	movs	r0, #1
    19bc:	4798      	blx	r3
    19be:	bd10      	pop	{r4, pc}
    19c0:	20000084 	.word	0x20000084

000019c4 <SERCOM2_Handler>:
    19c4:	b510      	push	{r4, lr}
    19c6:	4b02      	ldr	r3, [pc, #8]	; (19d0 <SERCOM2_Handler+0xc>)
    19c8:	689b      	ldr	r3, [r3, #8]
    19ca:	2002      	movs	r0, #2
    19cc:	4798      	blx	r3
    19ce:	bd10      	pop	{r4, pc}
    19d0:	20000084 	.word	0x20000084

000019d4 <SERCOM3_Handler>:
    19d4:	b510      	push	{r4, lr}
    19d6:	4b02      	ldr	r3, [pc, #8]	; (19e0 <SERCOM3_Handler+0xc>)
    19d8:	68db      	ldr	r3, [r3, #12]
    19da:	2003      	movs	r0, #3
    19dc:	4798      	blx	r3
    19de:	bd10      	pop	{r4, pc}
    19e0:	20000084 	.word	0x20000084

000019e4 <SERCOM4_Handler>:
    19e4:	b510      	push	{r4, lr}
    19e6:	4b02      	ldr	r3, [pc, #8]	; (19f0 <SERCOM4_Handler+0xc>)
    19e8:	691b      	ldr	r3, [r3, #16]
    19ea:	2004      	movs	r0, #4
    19ec:	4798      	blx	r3
    19ee:	bd10      	pop	{r4, pc}
    19f0:	20000084 	.word	0x20000084

000019f4 <SERCOM5_Handler>:
    19f4:	b510      	push	{r4, lr}
    19f6:	4b02      	ldr	r3, [pc, #8]	; (1a00 <SERCOM5_Handler+0xc>)
    19f8:	695b      	ldr	r3, [r3, #20]
    19fa:	2005      	movs	r0, #5
    19fc:	4798      	blx	r3
    19fe:	bd10      	pop	{r4, pc}
    1a00:	20000084 	.word	0x20000084

00001a04 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1a04:	4770      	bx	lr
	...

00001a08 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1a08:	4b0c      	ldr	r3, [pc, #48]	; (1a3c <cpu_irq_enter_critical+0x34>)
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	d106      	bne.n	1a1e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a10:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1a14:	2b00      	cmp	r3, #0
    1a16:	d007      	beq.n	1a28 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1a18:	2200      	movs	r2, #0
    1a1a:	4b09      	ldr	r3, [pc, #36]	; (1a40 <cpu_irq_enter_critical+0x38>)
    1a1c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1a1e:	4a07      	ldr	r2, [pc, #28]	; (1a3c <cpu_irq_enter_critical+0x34>)
    1a20:	6813      	ldr	r3, [r2, #0]
    1a22:	3301      	adds	r3, #1
    1a24:	6013      	str	r3, [r2, #0]
}
    1a26:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1a28:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1a2a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1a2e:	2200      	movs	r2, #0
    1a30:	4b04      	ldr	r3, [pc, #16]	; (1a44 <cpu_irq_enter_critical+0x3c>)
    1a32:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1a34:	3201      	adds	r2, #1
    1a36:	4b02      	ldr	r3, [pc, #8]	; (1a40 <cpu_irq_enter_critical+0x38>)
    1a38:	701a      	strb	r2, [r3, #0]
    1a3a:	e7f0      	b.n	1a1e <cpu_irq_enter_critical+0x16>
    1a3c:	2000009c 	.word	0x2000009c
    1a40:	200000a0 	.word	0x200000a0
    1a44:	20000008 	.word	0x20000008

00001a48 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1a48:	4b08      	ldr	r3, [pc, #32]	; (1a6c <cpu_irq_leave_critical+0x24>)
    1a4a:	681a      	ldr	r2, [r3, #0]
    1a4c:	3a01      	subs	r2, #1
    1a4e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1a50:	681b      	ldr	r3, [r3, #0]
    1a52:	2b00      	cmp	r3, #0
    1a54:	d109      	bne.n	1a6a <cpu_irq_leave_critical+0x22>
    1a56:	4b06      	ldr	r3, [pc, #24]	; (1a70 <cpu_irq_leave_critical+0x28>)
    1a58:	781b      	ldrb	r3, [r3, #0]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d005      	beq.n	1a6a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1a5e:	2201      	movs	r2, #1
    1a60:	4b04      	ldr	r3, [pc, #16]	; (1a74 <cpu_irq_leave_critical+0x2c>)
    1a62:	701a      	strb	r2, [r3, #0]
    1a64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1a68:	b662      	cpsie	i
	}
}
    1a6a:	4770      	bx	lr
    1a6c:	2000009c 	.word	0x2000009c
    1a70:	200000a0 	.word	0x200000a0
    1a74:	20000008 	.word	0x20000008

00001a78 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1a78:	b510      	push	{r4, lr}
    1a7a:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1a7c:	2201      	movs	r2, #1
    1a7e:	ab01      	add	r3, sp, #4
    1a80:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a82:	2400      	movs	r4, #0
    1a84:	e004      	b.n	1a90 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a86:	b2e0      	uxtb	r0, r4
    1a88:	a901      	add	r1, sp, #4
    1a8a:	4b03      	ldr	r3, [pc, #12]	; (1a98 <_switch_peripheral_gclk+0x20>)
    1a8c:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a8e:	3401      	adds	r4, #1
    1a90:	2c24      	cmp	r4, #36	; 0x24
    1a92:	d9f8      	bls.n	1a86 <_switch_peripheral_gclk+0xe>
	}
}
    1a94:	b002      	add	sp, #8
    1a96:	bd10      	pop	{r4, pc}
    1a98:	00001f19 	.word	0x00001f19

00001a9c <system_clock_source_get_hz>:
{
    1a9c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a9e:	2808      	cmp	r0, #8
    1aa0:	d832      	bhi.n	1b08 <system_clock_source_get_hz+0x6c>
    1aa2:	0080      	lsls	r0, r0, #2
    1aa4:	4b1b      	ldr	r3, [pc, #108]	; (1b14 <system_clock_source_get_hz+0x78>)
    1aa6:	581b      	ldr	r3, [r3, r0]
    1aa8:	469f      	mov	pc, r3
		return 32768UL;
    1aaa:	2080      	movs	r0, #128	; 0x80
    1aac:	0200      	lsls	r0, r0, #8
}
    1aae:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    1ab0:	4b19      	ldr	r3, [pc, #100]	; (1b18 <system_clock_source_get_hz+0x7c>)
    1ab2:	6918      	ldr	r0, [r3, #16]
    1ab4:	e7fb      	b.n	1aae <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1ab6:	4b19      	ldr	r3, [pc, #100]	; (1b1c <system_clock_source_get_hz+0x80>)
    1ab8:	6a1b      	ldr	r3, [r3, #32]
    1aba:	059b      	lsls	r3, r3, #22
    1abc:	0f9b      	lsrs	r3, r3, #30
    1abe:	4818      	ldr	r0, [pc, #96]	; (1b20 <system_clock_source_get_hz+0x84>)
    1ac0:	40d8      	lsrs	r0, r3
    1ac2:	e7f4      	b.n	1aae <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    1ac4:	4b14      	ldr	r3, [pc, #80]	; (1b18 <system_clock_source_get_hz+0x7c>)
    1ac6:	6958      	ldr	r0, [r3, #20]
    1ac8:	e7f1      	b.n	1aae <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1aca:	4b13      	ldr	r3, [pc, #76]	; (1b18 <system_clock_source_get_hz+0x7c>)
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	079b      	lsls	r3, r3, #30
    1ad0:	d51c      	bpl.n	1b0c <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ad2:	4b12      	ldr	r3, [pc, #72]	; (1b1c <system_clock_source_get_hz+0x80>)
    1ad4:	68db      	ldr	r3, [r3, #12]
    1ad6:	06db      	lsls	r3, r3, #27
    1ad8:	d5fb      	bpl.n	1ad2 <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1ada:	4b0f      	ldr	r3, [pc, #60]	; (1b18 <system_clock_source_get_hz+0x7c>)
    1adc:	681b      	ldr	r3, [r3, #0]
    1ade:	075b      	lsls	r3, r3, #29
    1ae0:	d401      	bmi.n	1ae6 <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    1ae2:	4810      	ldr	r0, [pc, #64]	; (1b24 <system_clock_source_get_hz+0x88>)
    1ae4:	e7e3      	b.n	1aae <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ae6:	2000      	movs	r0, #0
    1ae8:	4b0f      	ldr	r3, [pc, #60]	; (1b28 <system_clock_source_get_hz+0x8c>)
    1aea:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1aec:	4b0a      	ldr	r3, [pc, #40]	; (1b18 <system_clock_source_get_hz+0x7c>)
    1aee:	689b      	ldr	r3, [r3, #8]
    1af0:	041b      	lsls	r3, r3, #16
    1af2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1af4:	4358      	muls	r0, r3
    1af6:	e7da      	b.n	1aae <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1af8:	2350      	movs	r3, #80	; 0x50
    1afa:	4a08      	ldr	r2, [pc, #32]	; (1b1c <system_clock_source_get_hz+0x80>)
    1afc:	5cd3      	ldrb	r3, [r2, r3]
    1afe:	075b      	lsls	r3, r3, #29
    1b00:	d506      	bpl.n	1b10 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1b02:	4b05      	ldr	r3, [pc, #20]	; (1b18 <system_clock_source_get_hz+0x7c>)
    1b04:	68d8      	ldr	r0, [r3, #12]
    1b06:	e7d2      	b.n	1aae <system_clock_source_get_hz+0x12>
		return 0;
    1b08:	2000      	movs	r0, #0
    1b0a:	e7d0      	b.n	1aae <system_clock_source_get_hz+0x12>
			return 0;
    1b0c:	2000      	movs	r0, #0
    1b0e:	e7ce      	b.n	1aae <system_clock_source_get_hz+0x12>
			return 0;
    1b10:	2000      	movs	r0, #0
    1b12:	e7cc      	b.n	1aae <system_clock_source_get_hz+0x12>
    1b14:	00002828 	.word	0x00002828
    1b18:	200000a4 	.word	0x200000a4
    1b1c:	40000800 	.word	0x40000800
    1b20:	007a1200 	.word	0x007a1200
    1b24:	02dc6c00 	.word	0x02dc6c00
    1b28:	00001f35 	.word	0x00001f35

00001b2c <system_clock_source_osc8m_set_config>:
{
    1b2c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b2e:	4d0c      	ldr	r5, [pc, #48]	; (1b60 <system_clock_source_osc8m_set_config+0x34>)
    1b30:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    1b32:	7802      	ldrb	r2, [r0, #0]
    1b34:	2103      	movs	r1, #3
    1b36:	400a      	ands	r2, r1
    1b38:	0212      	lsls	r2, r2, #8
    1b3a:	490a      	ldr	r1, [pc, #40]	; (1b64 <system_clock_source_osc8m_set_config+0x38>)
    1b3c:	4031      	ands	r1, r6
    1b3e:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    1b40:	7882      	ldrb	r2, [r0, #2]
    1b42:	2401      	movs	r4, #1
    1b44:	4022      	ands	r2, r4
    1b46:	01d2      	lsls	r2, r2, #7
    1b48:	2380      	movs	r3, #128	; 0x80
    1b4a:	4399      	bics	r1, r3
    1b4c:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b4e:	7843      	ldrb	r3, [r0, #1]
    1b50:	4023      	ands	r3, r4
    1b52:	019b      	lsls	r3, r3, #6
    1b54:	2140      	movs	r1, #64	; 0x40
    1b56:	438a      	bics	r2, r1
    1b58:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    1b5a:	622b      	str	r3, [r5, #32]
}
    1b5c:	bd70      	pop	{r4, r5, r6, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	40000800 	.word	0x40000800
    1b64:	fffffcff 	.word	0xfffffcff

00001b68 <system_clock_source_enable>:
	switch (clock_source) {
    1b68:	2808      	cmp	r0, #8
    1b6a:	d84a      	bhi.n	1c02 <system_clock_source_enable+0x9a>
    1b6c:	0080      	lsls	r0, r0, #2
    1b6e:	4b26      	ldr	r3, [pc, #152]	; (1c08 <system_clock_source_enable+0xa0>)
    1b70:	581b      	ldr	r3, [r3, r0]
    1b72:	469f      	mov	pc, r3
		return STATUS_OK;
    1b74:	2000      	movs	r0, #0
}
    1b76:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1b78:	4a24      	ldr	r2, [pc, #144]	; (1c0c <system_clock_source_enable+0xa4>)
    1b7a:	6a13      	ldr	r3, [r2, #32]
    1b7c:	2102      	movs	r1, #2
    1b7e:	430b      	orrs	r3, r1
    1b80:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1b82:	2000      	movs	r0, #0
    1b84:	e7f7      	b.n	1b76 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1b86:	4a21      	ldr	r2, [pc, #132]	; (1c0c <system_clock_source_enable+0xa4>)
    1b88:	6993      	ldr	r3, [r2, #24]
    1b8a:	2102      	movs	r1, #2
    1b8c:	430b      	orrs	r3, r1
    1b8e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1b90:	2000      	movs	r0, #0
		break;
    1b92:	e7f0      	b.n	1b76 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1b94:	4a1d      	ldr	r2, [pc, #116]	; (1c0c <system_clock_source_enable+0xa4>)
    1b96:	8a13      	ldrh	r3, [r2, #16]
    1b98:	2102      	movs	r1, #2
    1b9a:	430b      	orrs	r3, r1
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1ba0:	2000      	movs	r0, #0
		break;
    1ba2:	e7e8      	b.n	1b76 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1ba4:	4a19      	ldr	r2, [pc, #100]	; (1c0c <system_clock_source_enable+0xa4>)
    1ba6:	8a93      	ldrh	r3, [r2, #20]
    1ba8:	2102      	movs	r1, #2
    1baa:	430b      	orrs	r3, r1
    1bac:	b29b      	uxth	r3, r3
    1bae:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1bb0:	2000      	movs	r0, #0
		break;
    1bb2:	e7e0      	b.n	1b76 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1bb4:	4916      	ldr	r1, [pc, #88]	; (1c10 <system_clock_source_enable+0xa8>)
    1bb6:	680b      	ldr	r3, [r1, #0]
    1bb8:	2202      	movs	r2, #2
    1bba:	4313      	orrs	r3, r2
    1bbc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1bbe:	4b13      	ldr	r3, [pc, #76]	; (1c0c <system_clock_source_enable+0xa4>)
    1bc0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bc2:	4b12      	ldr	r3, [pc, #72]	; (1c0c <system_clock_source_enable+0xa4>)
    1bc4:	68db      	ldr	r3, [r3, #12]
    1bc6:	06db      	lsls	r3, r3, #27
    1bc8:	d5fb      	bpl.n	1bc2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1bca:	4a11      	ldr	r2, [pc, #68]	; (1c10 <system_clock_source_enable+0xa8>)
    1bcc:	6891      	ldr	r1, [r2, #8]
    1bce:	4b0f      	ldr	r3, [pc, #60]	; (1c0c <system_clock_source_enable+0xa4>)
    1bd0:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1bd2:	6852      	ldr	r2, [r2, #4]
    1bd4:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1bd6:	2200      	movs	r2, #0
    1bd8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bda:	4b0c      	ldr	r3, [pc, #48]	; (1c0c <system_clock_source_enable+0xa4>)
    1bdc:	68db      	ldr	r3, [r3, #12]
    1bde:	06db      	lsls	r3, r3, #27
    1be0:	d5fb      	bpl.n	1bda <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1be2:	4b0b      	ldr	r3, [pc, #44]	; (1c10 <system_clock_source_enable+0xa8>)
    1be4:	681b      	ldr	r3, [r3, #0]
    1be6:	b29b      	uxth	r3, r3
    1be8:	4a08      	ldr	r2, [pc, #32]	; (1c0c <system_clock_source_enable+0xa4>)
    1bea:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1bec:	2000      	movs	r0, #0
    1bee:	e7c2      	b.n	1b76 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1bf0:	4906      	ldr	r1, [pc, #24]	; (1c0c <system_clock_source_enable+0xa4>)
    1bf2:	2244      	movs	r2, #68	; 0x44
    1bf4:	5c8b      	ldrb	r3, [r1, r2]
    1bf6:	2002      	movs	r0, #2
    1bf8:	4303      	orrs	r3, r0
    1bfa:	b2db      	uxtb	r3, r3
    1bfc:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1bfe:	2000      	movs	r0, #0
		break;
    1c00:	e7b9      	b.n	1b76 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    1c02:	2017      	movs	r0, #23
    1c04:	e7b7      	b.n	1b76 <system_clock_source_enable+0xe>
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	0000284c 	.word	0x0000284c
    1c0c:	40000800 	.word	0x40000800
    1c10:	200000a4 	.word	0x200000a4

00001c14 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1c14:	b530      	push	{r4, r5, lr}
    1c16:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1c18:	22c2      	movs	r2, #194	; 0xc2
    1c1a:	00d2      	lsls	r2, r2, #3
    1c1c:	4b15      	ldr	r3, [pc, #84]	; (1c74 <system_clock_init+0x60>)
    1c1e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1c20:	4b15      	ldr	r3, [pc, #84]	; (1c78 <system_clock_init+0x64>)
    1c22:	6859      	ldr	r1, [r3, #4]
    1c24:	221e      	movs	r2, #30
    1c26:	4391      	bics	r1, r2
    1c28:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1c2a:	4b14      	ldr	r3, [pc, #80]	; (1c7c <system_clock_init+0x68>)
    1c2c:	4798      	blx	r3
	config->run_in_standby  = false;
    1c2e:	a803      	add	r0, sp, #12
    1c30:	2400      	movs	r4, #0
    1c32:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1c34:	2501      	movs	r5, #1
    1c36:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1c38:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1c3a:	4b11      	ldr	r3, [pc, #68]	; (1c80 <system_clock_init+0x6c>)
    1c3c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1c3e:	2006      	movs	r0, #6
    1c40:	4b10      	ldr	r3, [pc, #64]	; (1c84 <system_clock_init+0x70>)
    1c42:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1c44:	4b10      	ldr	r3, [pc, #64]	; (1c88 <system_clock_init+0x74>)
    1c46:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1c48:	4b10      	ldr	r3, [pc, #64]	; (1c8c <system_clock_init+0x78>)
    1c4a:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1c4c:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1c4e:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1c50:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1c52:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1c54:	466b      	mov	r3, sp
    1c56:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1c58:	2306      	movs	r3, #6
    1c5a:	466a      	mov	r2, sp
    1c5c:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1c5e:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1c60:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1c62:	4669      	mov	r1, sp
    1c64:	2000      	movs	r0, #0
    1c66:	4b0a      	ldr	r3, [pc, #40]	; (1c90 <system_clock_init+0x7c>)
    1c68:	4798      	blx	r3
    1c6a:	2000      	movs	r0, #0
    1c6c:	4b09      	ldr	r3, [pc, #36]	; (1c94 <system_clock_init+0x80>)
    1c6e:	4798      	blx	r3
#endif
}
    1c70:	b005      	add	sp, #20
    1c72:	bd30      	pop	{r4, r5, pc}
    1c74:	40000800 	.word	0x40000800
    1c78:	41004000 	.word	0x41004000
    1c7c:	00001a79 	.word	0x00001a79
    1c80:	00001b2d 	.word	0x00001b2d
    1c84:	00001b69 	.word	0x00001b69
    1c88:	00001c99 	.word	0x00001c99
    1c8c:	40000400 	.word	0x40000400
    1c90:	00001cbd 	.word	0x00001cbd
    1c94:	00001d8d 	.word	0x00001d8d

00001c98 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1c98:	4a06      	ldr	r2, [pc, #24]	; (1cb4 <system_gclk_init+0x1c>)
    1c9a:	6993      	ldr	r3, [r2, #24]
    1c9c:	2108      	movs	r1, #8
    1c9e:	430b      	orrs	r3, r1
    1ca0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ca2:	2201      	movs	r2, #1
    1ca4:	4b04      	ldr	r3, [pc, #16]	; (1cb8 <system_gclk_init+0x20>)
    1ca6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1ca8:	4b03      	ldr	r3, [pc, #12]	; (1cb8 <system_gclk_init+0x20>)
    1caa:	781b      	ldrb	r3, [r3, #0]
    1cac:	07db      	lsls	r3, r3, #31
    1cae:	d4fb      	bmi.n	1ca8 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1cb0:	4770      	bx	lr
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	40000400 	.word	0x40000400
    1cb8:	40000c00 	.word	0x40000c00

00001cbc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cbe:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1cc0:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1cc2:	780c      	ldrb	r4, [r1, #0]
    1cc4:	0224      	lsls	r4, r4, #8
    1cc6:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1cc8:	784b      	ldrb	r3, [r1, #1]
    1cca:	2b00      	cmp	r3, #0
    1ccc:	d002      	beq.n	1cd4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1cce:	2380      	movs	r3, #128	; 0x80
    1cd0:	02db      	lsls	r3, r3, #11
    1cd2:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1cd4:	7a4b      	ldrb	r3, [r1, #9]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d002      	beq.n	1ce0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1cda:	2380      	movs	r3, #128	; 0x80
    1cdc:	031b      	lsls	r3, r3, #12
    1cde:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1ce0:	6848      	ldr	r0, [r1, #4]
    1ce2:	2801      	cmp	r0, #1
    1ce4:	d912      	bls.n	1d0c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1ce6:	1e43      	subs	r3, r0, #1
    1ce8:	4203      	tst	r3, r0
    1cea:	d03d      	beq.n	1d68 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1cec:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    1cee:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1cf0:	2380      	movs	r3, #128	; 0x80
    1cf2:	029b      	lsls	r3, r3, #10
    1cf4:	431c      	orrs	r4, r3
    1cf6:	e009      	b.n	1d0c <system_gclk_gen_set_config+0x50>
				div2_count++;
    1cf8:	3201      	adds	r2, #1
						mask <<= 1) {
    1cfa:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1cfc:	4283      	cmp	r3, r0
    1cfe:	d3fb      	bcc.n	1cf8 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1d00:	0212      	lsls	r2, r2, #8
    1d02:	4332      	orrs	r2, r6
    1d04:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1d06:	2380      	movs	r3, #128	; 0x80
    1d08:	035b      	lsls	r3, r3, #13
    1d0a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1d0c:	7a0b      	ldrb	r3, [r1, #8]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d002      	beq.n	1d18 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1d12:	2380      	movs	r3, #128	; 0x80
    1d14:	039b      	lsls	r3, r3, #14
    1d16:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d18:	4b18      	ldr	r3, [pc, #96]	; (1d7c <system_gclk_gen_set_config+0xc0>)
    1d1a:	785b      	ldrb	r3, [r3, #1]
    1d1c:	b25b      	sxtb	r3, r3
    1d1e:	2b00      	cmp	r3, #0
    1d20:	db25      	blt.n	1d6e <system_gclk_gen_set_config+0xb2>
	return false;
    1d22:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    1d24:	2f00      	cmp	r7, #0
    1d26:	d1f7      	bne.n	1d18 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1d28:	4b15      	ldr	r3, [pc, #84]	; (1d80 <system_gclk_gen_set_config+0xc4>)
    1d2a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d2c:	4b15      	ldr	r3, [pc, #84]	; (1d84 <system_gclk_gen_set_config+0xc8>)
    1d2e:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d30:	4b12      	ldr	r3, [pc, #72]	; (1d7c <system_gclk_gen_set_config+0xc0>)
    1d32:	785b      	ldrb	r3, [r3, #1]
    1d34:	b25b      	sxtb	r3, r3
    1d36:	2b00      	cmp	r3, #0
    1d38:	db1b      	blt.n	1d72 <system_gclk_gen_set_config+0xb6>
	return false;
    1d3a:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1d3c:	2a00      	cmp	r2, #0
    1d3e:	d1f7      	bne.n	1d30 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1d40:	4b0e      	ldr	r3, [pc, #56]	; (1d7c <system_gclk_gen_set_config+0xc0>)
    1d42:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d44:	4b0d      	ldr	r3, [pc, #52]	; (1d7c <system_gclk_gen_set_config+0xc0>)
    1d46:	785b      	ldrb	r3, [r3, #1]
    1d48:	b25b      	sxtb	r3, r3
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	db13      	blt.n	1d76 <system_gclk_gen_set_config+0xba>
	return false;
    1d4e:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    1d50:	2b00      	cmp	r3, #0
    1d52:	d1f7      	bne.n	1d44 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1d54:	4a09      	ldr	r2, [pc, #36]	; (1d7c <system_gclk_gen_set_config+0xc0>)
    1d56:	6853      	ldr	r3, [r2, #4]
    1d58:	2180      	movs	r1, #128	; 0x80
    1d5a:	0249      	lsls	r1, r1, #9
    1d5c:	400b      	ands	r3, r1
    1d5e:	431c      	orrs	r4, r3
    1d60:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    1d62:	4b09      	ldr	r3, [pc, #36]	; (1d88 <system_gclk_gen_set_config+0xcc>)
    1d64:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d68:	2302      	movs	r3, #2
    1d6a:	2200      	movs	r2, #0
    1d6c:	e7c6      	b.n	1cfc <system_gclk_gen_set_config+0x40>
		return true;
    1d6e:	2701      	movs	r7, #1
    1d70:	e7d8      	b.n	1d24 <system_gclk_gen_set_config+0x68>
    1d72:	2201      	movs	r2, #1
    1d74:	e7e2      	b.n	1d3c <system_gclk_gen_set_config+0x80>
    1d76:	2301      	movs	r3, #1
    1d78:	e7ea      	b.n	1d50 <system_gclk_gen_set_config+0x94>
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	40000c00 	.word	0x40000c00
    1d80:	00001a09 	.word	0x00001a09
    1d84:	40000c08 	.word	0x40000c08
    1d88:	00001a49 	.word	0x00001a49

00001d8c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
    1d8e:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d90:	4b10      	ldr	r3, [pc, #64]	; (1dd4 <system_gclk_gen_enable+0x48>)
    1d92:	785b      	ldrb	r3, [r3, #1]
    1d94:	b25b      	sxtb	r3, r3
    1d96:	2b00      	cmp	r3, #0
    1d98:	db17      	blt.n	1dca <system_gclk_gen_enable+0x3e>
	return false;
    1d9a:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    1d9c:	2c00      	cmp	r4, #0
    1d9e:	d1f7      	bne.n	1d90 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1da0:	4b0d      	ldr	r3, [pc, #52]	; (1dd8 <system_gclk_gen_enable+0x4c>)
    1da2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1da4:	4b0d      	ldr	r3, [pc, #52]	; (1ddc <system_gclk_gen_enable+0x50>)
    1da6:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1da8:	4b0a      	ldr	r3, [pc, #40]	; (1dd4 <system_gclk_gen_enable+0x48>)
    1daa:	785b      	ldrb	r3, [r3, #1]
    1dac:	b25b      	sxtb	r3, r3
    1dae:	2b00      	cmp	r3, #0
    1db0:	db0d      	blt.n	1dce <system_gclk_gen_enable+0x42>
	return false;
    1db2:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1db4:	2b00      	cmp	r3, #0
    1db6:	d1f7      	bne.n	1da8 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1db8:	4a06      	ldr	r2, [pc, #24]	; (1dd4 <system_gclk_gen_enable+0x48>)
    1dba:	6851      	ldr	r1, [r2, #4]
    1dbc:	2380      	movs	r3, #128	; 0x80
    1dbe:	025b      	lsls	r3, r3, #9
    1dc0:	430b      	orrs	r3, r1
    1dc2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1dc4:	4b06      	ldr	r3, [pc, #24]	; (1de0 <system_gclk_gen_enable+0x54>)
    1dc6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1dc8:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    1dca:	2401      	movs	r4, #1
    1dcc:	e7e6      	b.n	1d9c <system_gclk_gen_enable+0x10>
    1dce:	2301      	movs	r3, #1
    1dd0:	e7f0      	b.n	1db4 <system_gclk_gen_enable+0x28>
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	40000c00 	.word	0x40000c00
    1dd8:	00001a09 	.word	0x00001a09
    1ddc:	40000c04 	.word	0x40000c04
    1de0:	00001a49 	.word	0x00001a49

00001de4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1de6:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1de8:	4b22      	ldr	r3, [pc, #136]	; (1e74 <system_gclk_gen_get_hz+0x90>)
    1dea:	785b      	ldrb	r3, [r3, #1]
    1dec:	b25b      	sxtb	r3, r3
    1dee:	2b00      	cmp	r3, #0
    1df0:	db34      	blt.n	1e5c <system_gclk_gen_get_hz+0x78>
	return false;
    1df2:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1df4:	2d00      	cmp	r5, #0
    1df6:	d1f7      	bne.n	1de8 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1df8:	4b1f      	ldr	r3, [pc, #124]	; (1e78 <system_gclk_gen_get_hz+0x94>)
    1dfa:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1dfc:	4b1f      	ldr	r3, [pc, #124]	; (1e7c <system_gclk_gen_get_hz+0x98>)
    1dfe:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e00:	4b1c      	ldr	r3, [pc, #112]	; (1e74 <system_gclk_gen_get_hz+0x90>)
    1e02:	785b      	ldrb	r3, [r3, #1]
    1e04:	b25b      	sxtb	r3, r3
    1e06:	2b00      	cmp	r3, #0
    1e08:	db2a      	blt.n	1e60 <system_gclk_gen_get_hz+0x7c>
	return false;
    1e0a:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1e0c:	2c00      	cmp	r4, #0
    1e0e:	d1f7      	bne.n	1e00 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1e10:	4e18      	ldr	r6, [pc, #96]	; (1e74 <system_gclk_gen_get_hz+0x90>)
    1e12:	6870      	ldr	r0, [r6, #4]
    1e14:	04c0      	lsls	r0, r0, #19
    1e16:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e18:	4b19      	ldr	r3, [pc, #100]	; (1e80 <system_gclk_gen_get_hz+0x9c>)
    1e1a:	4798      	blx	r3
    1e1c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e1e:	4b17      	ldr	r3, [pc, #92]	; (1e7c <system_gclk_gen_get_hz+0x98>)
    1e20:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1e22:	6876      	ldr	r6, [r6, #4]
    1e24:	02f6      	lsls	r6, r6, #11
    1e26:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1e28:	4b16      	ldr	r3, [pc, #88]	; (1e84 <system_gclk_gen_get_hz+0xa0>)
    1e2a:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e2c:	4b11      	ldr	r3, [pc, #68]	; (1e74 <system_gclk_gen_get_hz+0x90>)
    1e2e:	785b      	ldrb	r3, [r3, #1]
    1e30:	b25b      	sxtb	r3, r3
    1e32:	2b00      	cmp	r3, #0
    1e34:	db16      	blt.n	1e64 <system_gclk_gen_get_hz+0x80>
	return false;
    1e36:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d1f7      	bne.n	1e2c <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1e3c:	4b0d      	ldr	r3, [pc, #52]	; (1e74 <system_gclk_gen_get_hz+0x90>)
    1e3e:	689c      	ldr	r4, [r3, #8]
    1e40:	0224      	lsls	r4, r4, #8
    1e42:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1e44:	4b10      	ldr	r3, [pc, #64]	; (1e88 <system_gclk_gen_get_hz+0xa4>)
    1e46:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1e48:	2e00      	cmp	r6, #0
    1e4a:	d10d      	bne.n	1e68 <system_gclk_gen_get_hz+0x84>
    1e4c:	2c01      	cmp	r4, #1
    1e4e:	d90b      	bls.n	1e68 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    1e50:	0021      	movs	r1, r4
    1e52:	0028      	movs	r0, r5
    1e54:	4b0d      	ldr	r3, [pc, #52]	; (1e8c <system_gclk_gen_get_hz+0xa8>)
    1e56:	4798      	blx	r3
    1e58:	0005      	movs	r5, r0
    1e5a:	e009      	b.n	1e70 <system_gclk_gen_get_hz+0x8c>
		return true;
    1e5c:	2501      	movs	r5, #1
    1e5e:	e7c9      	b.n	1df4 <system_gclk_gen_get_hz+0x10>
    1e60:	2401      	movs	r4, #1
    1e62:	e7d3      	b.n	1e0c <system_gclk_gen_get_hz+0x28>
    1e64:	2301      	movs	r3, #1
    1e66:	e7e7      	b.n	1e38 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    1e68:	2e00      	cmp	r6, #0
    1e6a:	d001      	beq.n	1e70 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    1e6c:	3401      	adds	r4, #1
    1e6e:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1e70:	0028      	movs	r0, r5
    1e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e74:	40000c00 	.word	0x40000c00
    1e78:	00001a09 	.word	0x00001a09
    1e7c:	40000c04 	.word	0x40000c04
    1e80:	00001a9d 	.word	0x00001a9d
    1e84:	40000c08 	.word	0x40000c08
    1e88:	00001a49 	.word	0x00001a49
    1e8c:	000022e9 	.word	0x000022e9

00001e90 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1e90:	b510      	push	{r4, lr}
    1e92:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e94:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <system_gclk_chan_enable+0x20>)
    1e96:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e98:	4b06      	ldr	r3, [pc, #24]	; (1eb4 <system_gclk_chan_enable+0x24>)
    1e9a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1e9c:	4a06      	ldr	r2, [pc, #24]	; (1eb8 <system_gclk_chan_enable+0x28>)
    1e9e:	8853      	ldrh	r3, [r2, #2]
    1ea0:	2180      	movs	r1, #128	; 0x80
    1ea2:	01c9      	lsls	r1, r1, #7
    1ea4:	430b      	orrs	r3, r1
    1ea6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1ea8:	4b04      	ldr	r3, [pc, #16]	; (1ebc <system_gclk_chan_enable+0x2c>)
    1eaa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1eac:	bd10      	pop	{r4, pc}
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	00001a09 	.word	0x00001a09
    1eb4:	40000c02 	.word	0x40000c02
    1eb8:	40000c00 	.word	0x40000c00
    1ebc:	00001a49 	.word	0x00001a49

00001ec0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1ec0:	b510      	push	{r4, lr}
    1ec2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ec4:	4b0e      	ldr	r3, [pc, #56]	; (1f00 <system_gclk_chan_disable+0x40>)
    1ec6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ec8:	4b0e      	ldr	r3, [pc, #56]	; (1f04 <system_gclk_chan_disable+0x44>)
    1eca:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1ecc:	490e      	ldr	r1, [pc, #56]	; (1f08 <system_gclk_chan_disable+0x48>)
    1ece:	884b      	ldrh	r3, [r1, #2]
    1ed0:	051b      	lsls	r3, r3, #20
    1ed2:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1ed4:	884b      	ldrh	r3, [r1, #2]
    1ed6:	480d      	ldr	r0, [pc, #52]	; (1f0c <system_gclk_chan_disable+0x4c>)
    1ed8:	4003      	ands	r3, r0
    1eda:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1edc:	884b      	ldrh	r3, [r1, #2]
    1ede:	480c      	ldr	r0, [pc, #48]	; (1f10 <system_gclk_chan_disable+0x50>)
    1ee0:	4003      	ands	r3, r0
    1ee2:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1ee4:	4b08      	ldr	r3, [pc, #32]	; (1f08 <system_gclk_chan_disable+0x48>)
    1ee6:	885b      	ldrh	r3, [r3, #2]
    1ee8:	045b      	lsls	r3, r3, #17
    1eea:	d4fb      	bmi.n	1ee4 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1eec:	4806      	ldr	r0, [pc, #24]	; (1f08 <system_gclk_chan_disable+0x48>)
    1eee:	8841      	ldrh	r1, [r0, #2]
    1ef0:	0213      	lsls	r3, r2, #8
    1ef2:	4a06      	ldr	r2, [pc, #24]	; (1f0c <system_gclk_chan_disable+0x4c>)
    1ef4:	400a      	ands	r2, r1
    1ef6:	4313      	orrs	r3, r2
    1ef8:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    1efa:	4b06      	ldr	r3, [pc, #24]	; (1f14 <system_gclk_chan_disable+0x54>)
    1efc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1efe:	bd10      	pop	{r4, pc}
    1f00:	00001a09 	.word	0x00001a09
    1f04:	40000c02 	.word	0x40000c02
    1f08:	40000c00 	.word	0x40000c00
    1f0c:	fffff0ff 	.word	0xfffff0ff
    1f10:	ffffbfff 	.word	0xffffbfff
    1f14:	00001a49 	.word	0x00001a49

00001f18 <system_gclk_chan_set_config>:
{
    1f18:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1f1a:	780c      	ldrb	r4, [r1, #0]
    1f1c:	0224      	lsls	r4, r4, #8
    1f1e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1f20:	4b02      	ldr	r3, [pc, #8]	; (1f2c <system_gclk_chan_set_config+0x14>)
    1f22:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1f24:	b2a4      	uxth	r4, r4
    1f26:	4b02      	ldr	r3, [pc, #8]	; (1f30 <system_gclk_chan_set_config+0x18>)
    1f28:	805c      	strh	r4, [r3, #2]
}
    1f2a:	bd10      	pop	{r4, pc}
    1f2c:	00001ec1 	.word	0x00001ec1
    1f30:	40000c00 	.word	0x40000c00

00001f34 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1f34:	b510      	push	{r4, lr}
    1f36:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1f38:	4b06      	ldr	r3, [pc, #24]	; (1f54 <system_gclk_chan_get_hz+0x20>)
    1f3a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f3c:	4b06      	ldr	r3, [pc, #24]	; (1f58 <system_gclk_chan_get_hz+0x24>)
    1f3e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1f40:	4b06      	ldr	r3, [pc, #24]	; (1f5c <system_gclk_chan_get_hz+0x28>)
    1f42:	885c      	ldrh	r4, [r3, #2]
    1f44:	0524      	lsls	r4, r4, #20
    1f46:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1f48:	4b05      	ldr	r3, [pc, #20]	; (1f60 <system_gclk_chan_get_hz+0x2c>)
    1f4a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1f4c:	0020      	movs	r0, r4
    1f4e:	4b05      	ldr	r3, [pc, #20]	; (1f64 <system_gclk_chan_get_hz+0x30>)
    1f50:	4798      	blx	r3
}
    1f52:	bd10      	pop	{r4, pc}
    1f54:	00001a09 	.word	0x00001a09
    1f58:	40000c02 	.word	0x40000c02
    1f5c:	40000c00 	.word	0x40000c00
    1f60:	00001a49 	.word	0x00001a49
    1f64:	00001de5 	.word	0x00001de5

00001f68 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1f68:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1f6a:	78d3      	ldrb	r3, [r2, #3]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d120      	bne.n	1fb2 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1f70:	7815      	ldrb	r5, [r2, #0]
    1f72:	2d80      	cmp	r5, #128	; 0x80
    1f74:	d01b      	beq.n	1fae <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1f76:	062d      	lsls	r5, r5, #24
    1f78:	2380      	movs	r3, #128	; 0x80
    1f7a:	025b      	lsls	r3, r3, #9
    1f7c:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1f7e:	7853      	ldrb	r3, [r2, #1]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d001      	beq.n	1f88 <_system_pinmux_config+0x20>
    1f84:	2b02      	cmp	r3, #2
    1f86:	d10a      	bne.n	1f9e <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1f88:	2380      	movs	r3, #128	; 0x80
    1f8a:	029b      	lsls	r3, r3, #10
    1f8c:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1f8e:	7894      	ldrb	r4, [r2, #2]
    1f90:	2c00      	cmp	r4, #0
    1f92:	d002      	beq.n	1f9a <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f94:	23c0      	movs	r3, #192	; 0xc0
    1f96:	02db      	lsls	r3, r3, #11
    1f98:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1f9a:	6041      	str	r1, [r0, #4]
    1f9c:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f9e:	7853      	ldrb	r3, [r2, #1]
    1fa0:	3b01      	subs	r3, #1
    1fa2:	b2db      	uxtb	r3, r3
    1fa4:	2b01      	cmp	r3, #1
    1fa6:	d806      	bhi.n	1fb6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1fa8:	4b13      	ldr	r3, [pc, #76]	; (1ff8 <_system_pinmux_config+0x90>)
    1faa:	401d      	ands	r5, r3
    1fac:	e003      	b.n	1fb6 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    1fae:	2500      	movs	r5, #0
    1fb0:	e7e5      	b.n	1f7e <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1fb2:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1fb4:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1fb6:	040c      	lsls	r4, r1, #16
    1fb8:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1fba:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fbc:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1fbe:	26a0      	movs	r6, #160	; 0xa0
    1fc0:	05f6      	lsls	r6, r6, #23
    1fc2:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fc4:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fc6:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1fc8:	24d0      	movs	r4, #208	; 0xd0
    1fca:	0624      	lsls	r4, r4, #24
    1fcc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fce:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1fd0:	78d3      	ldrb	r3, [r2, #3]
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	d10a      	bne.n	1fec <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1fd6:	036b      	lsls	r3, r5, #13
    1fd8:	d503      	bpl.n	1fe2 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1fda:	7893      	ldrb	r3, [r2, #2]
    1fdc:	2b01      	cmp	r3, #1
    1fde:	d006      	beq.n	1fee <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1fe0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1fe2:	7853      	ldrb	r3, [r2, #1]
    1fe4:	3b01      	subs	r3, #1
    1fe6:	b2db      	uxtb	r3, r3
    1fe8:	2b01      	cmp	r3, #1
    1fea:	d902      	bls.n	1ff2 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1fec:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    1fee:	6181      	str	r1, [r0, #24]
    1ff0:	e7f7      	b.n	1fe2 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    1ff2:	6081      	str	r1, [r0, #8]
}
    1ff4:	e7fa      	b.n	1fec <_system_pinmux_config+0x84>
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	fffbffff 	.word	0xfffbffff

00001ffc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1ffc:	b510      	push	{r4, lr}
    1ffe:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    2000:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    2002:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    2004:	2900      	cmp	r1, #0
    2006:	d10b      	bne.n	2020 <STACK_SIZE+0x20>
		return &(ports[port_index]->Group[group_index]);
    2008:	01db      	lsls	r3, r3, #7
    200a:	4906      	ldr	r1, [pc, #24]	; (2024 <STACK_SIZE+0x24>)
    200c:	468c      	mov	ip, r1
    200e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2010:	241f      	movs	r4, #31
    2012:	4020      	ands	r0, r4
    2014:	2101      	movs	r1, #1
    2016:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2018:	0018      	movs	r0, r3
    201a:	4b03      	ldr	r3, [pc, #12]	; (2028 <STACK_SIZE+0x28>)
    201c:	4798      	blx	r3
}
    201e:	bd10      	pop	{r4, pc}
		return NULL;
    2020:	2300      	movs	r3, #0
    2022:	e7f5      	b.n	2010 <STACK_SIZE+0x10>
    2024:	41004400 	.word	0x41004400
    2028:	00001f69 	.word	0x00001f69

0000202c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    202c:	4770      	bx	lr
	...

00002030 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2030:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2032:	4b05      	ldr	r3, [pc, #20]	; (2048 <system_init+0x18>)
    2034:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2036:	4b05      	ldr	r3, [pc, #20]	; (204c <system_init+0x1c>)
    2038:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    203a:	4b05      	ldr	r3, [pc, #20]	; (2050 <system_init+0x20>)
    203c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    203e:	4b05      	ldr	r3, [pc, #20]	; (2054 <system_init+0x24>)
    2040:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2042:	4b05      	ldr	r3, [pc, #20]	; (2058 <system_init+0x28>)
    2044:	4798      	blx	r3
}
    2046:	bd10      	pop	{r4, pc}
    2048:	00001c15 	.word	0x00001c15
    204c:	00001a05 	.word	0x00001a05
    2050:	0000202d 	.word	0x0000202d
    2054:	0000202d 	.word	0x0000202d
    2058:	0000202d 	.word	0x0000202d

0000205c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    205c:	e7fe      	b.n	205c <Dummy_Handler>
	...

00002060 <Reset_Handler>:
{
    2060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2062:	4a23      	ldr	r2, [pc, #140]	; (20f0 <Reset_Handler+0x90>)
    2064:	4b23      	ldr	r3, [pc, #140]	; (20f4 <Reset_Handler+0x94>)
    2066:	429a      	cmp	r2, r3
    2068:	d009      	beq.n	207e <Reset_Handler+0x1e>
    206a:	4b22      	ldr	r3, [pc, #136]	; (20f4 <Reset_Handler+0x94>)
    206c:	4a20      	ldr	r2, [pc, #128]	; (20f0 <Reset_Handler+0x90>)
    206e:	e003      	b.n	2078 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    2070:	6811      	ldr	r1, [r2, #0]
    2072:	6019      	str	r1, [r3, #0]
    2074:	3304      	adds	r3, #4
    2076:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2078:	491f      	ldr	r1, [pc, #124]	; (20f8 <Reset_Handler+0x98>)
    207a:	428b      	cmp	r3, r1
    207c:	d3f8      	bcc.n	2070 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    207e:	4b1f      	ldr	r3, [pc, #124]	; (20fc <Reset_Handler+0x9c>)
    2080:	e002      	b.n	2088 <Reset_Handler+0x28>
                *pDest++ = 0;
    2082:	2200      	movs	r2, #0
    2084:	601a      	str	r2, [r3, #0]
    2086:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    2088:	4a1d      	ldr	r2, [pc, #116]	; (2100 <Reset_Handler+0xa0>)
    208a:	4293      	cmp	r3, r2
    208c:	d3f9      	bcc.n	2082 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    208e:	4a1d      	ldr	r2, [pc, #116]	; (2104 <Reset_Handler+0xa4>)
    2090:	21ff      	movs	r1, #255	; 0xff
    2092:	4b1d      	ldr	r3, [pc, #116]	; (2108 <Reset_Handler+0xa8>)
    2094:	438b      	bics	r3, r1
    2096:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2098:	39fd      	subs	r1, #253	; 0xfd
    209a:	2390      	movs	r3, #144	; 0x90
    209c:	005b      	lsls	r3, r3, #1
    209e:	4a1b      	ldr	r2, [pc, #108]	; (210c <Reset_Handler+0xac>)
    20a0:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    20a2:	4a1b      	ldr	r2, [pc, #108]	; (2110 <Reset_Handler+0xb0>)
    20a4:	78d3      	ldrb	r3, [r2, #3]
    20a6:	2503      	movs	r5, #3
    20a8:	43ab      	bics	r3, r5
    20aa:	2402      	movs	r4, #2
    20ac:	4323      	orrs	r3, r4
    20ae:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    20b0:	78d3      	ldrb	r3, [r2, #3]
    20b2:	270c      	movs	r7, #12
    20b4:	43bb      	bics	r3, r7
    20b6:	2608      	movs	r6, #8
    20b8:	4333      	orrs	r3, r6
    20ba:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    20bc:	4b15      	ldr	r3, [pc, #84]	; (2114 <Reset_Handler+0xb4>)
    20be:	7b98      	ldrb	r0, [r3, #14]
    20c0:	2230      	movs	r2, #48	; 0x30
    20c2:	4390      	bics	r0, r2
    20c4:	2220      	movs	r2, #32
    20c6:	4310      	orrs	r0, r2
    20c8:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    20ca:	7b99      	ldrb	r1, [r3, #14]
    20cc:	43b9      	bics	r1, r7
    20ce:	4331      	orrs	r1, r6
    20d0:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    20d2:	7b9a      	ldrb	r2, [r3, #14]
    20d4:	43aa      	bics	r2, r5
    20d6:	4322      	orrs	r2, r4
    20d8:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    20da:	4a0f      	ldr	r2, [pc, #60]	; (2118 <Reset_Handler+0xb8>)
    20dc:	6851      	ldr	r1, [r2, #4]
    20de:	2380      	movs	r3, #128	; 0x80
    20e0:	430b      	orrs	r3, r1
    20e2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    20e4:	4b0d      	ldr	r3, [pc, #52]	; (211c <Reset_Handler+0xbc>)
    20e6:	4798      	blx	r3
        main();
    20e8:	4b0d      	ldr	r3, [pc, #52]	; (2120 <Reset_Handler+0xc0>)
    20ea:	4798      	blx	r3
    20ec:	e7fe      	b.n	20ec <Reset_Handler+0x8c>
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	000028d0 	.word	0x000028d0
    20f4:	20000000 	.word	0x20000000
    20f8:	2000000c 	.word	0x2000000c
    20fc:	2000000c 	.word	0x2000000c
    2100:	20000118 	.word	0x20000118
    2104:	e000ed00 	.word	0xe000ed00
    2108:	00000000 	.word	0x00000000
    210c:	41007000 	.word	0x41007000
    2110:	41005000 	.word	0x41005000
    2114:	41004800 	.word	0x41004800
    2118:	41004000 	.word	0x41004000
    211c:	0000279d 	.word	0x0000279d
    2120:	00002285 	.word	0x00002285

00002124 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    2124:	b5f0      	push	{r4, r5, r6, r7, lr}
    2126:	46ce      	mov	lr, r9
    2128:	4647      	mov	r7, r8
    212a:	b580      	push	{r7, lr}
    212c:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    212e:	ac01      	add	r4, sp, #4
    2130:	2300      	movs	r3, #0
    2132:	4698      	mov	r8, r3
    2134:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2136:	2601      	movs	r6, #1
    2138:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    213a:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    213c:	0021      	movs	r1, r4
    213e:	200b      	movs	r0, #11
    2140:	4d25      	ldr	r5, [pc, #148]	; (21d8 <conf_port_pin+0xb4>)
    2142:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2144:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    2146:	0021      	movs	r1, r4
    2148:	200a      	movs	r0, #10
    214a:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    214c:	4f23      	ldr	r7, [pc, #140]	; (21dc <conf_port_pin+0xb8>)
    214e:	2380      	movs	r3, #128	; 0x80
    2150:	00db      	lsls	r3, r3, #3
    2152:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    2154:	0021      	movs	r1, r4
    2156:	2005      	movs	r0, #5
    2158:	47a8      	blx	r5
    215a:	2320      	movs	r3, #32
    215c:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    215e:	0021      	movs	r1, r4
    2160:	2006      	movs	r0, #6
    2162:	47a8      	blx	r5
    2164:	2340      	movs	r3, #64	; 0x40
    2166:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    2168:	0021      	movs	r1, r4
    216a:	2007      	movs	r0, #7
    216c:	47a8      	blx	r5
    216e:	2380      	movs	r3, #128	; 0x80
    2170:	4699      	mov	r9, r3
    2172:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    2174:	4643      	mov	r3, r8
    2176:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2178:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    217a:	0021      	movs	r1, r4
    217c:	200f      	movs	r0, #15
    217e:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2180:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    2182:	0021      	movs	r1, r4
    2184:	200e      	movs	r0, #14
    2186:	47a8      	blx	r5
    2188:	2380      	movs	r3, #128	; 0x80
    218a:	01db      	lsls	r3, r3, #7
    218c:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    218e:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    2190:	2302      	movs	r3, #2
    2192:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    2194:	0021      	movs	r1, r4
    2196:	202f      	movs	r0, #47	; 0x2f
    2198:	47a8      	blx	r5
    219a:	003b      	movs	r3, r7
    219c:	444b      	add	r3, r9
    219e:	2280      	movs	r2, #128	; 0x80
    21a0:	0212      	lsls	r2, r2, #8
    21a2:	619a      	str	r2, [r3, #24]
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    21a4:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    21a6:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    21a8:	0021      	movs	r1, r4
    21aa:	2011      	movs	r0, #17
    21ac:	47a8      	blx	r5
    21ae:	2380      	movs	r3, #128	; 0x80
    21b0:	029b      	lsls	r3, r3, #10
    21b2:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    21b4:	4643      	mov	r3, r8
    21b6:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    21b8:	0021      	movs	r1, r4
    21ba:	2030      	movs	r0, #48	; 0x30
    21bc:	47a8      	blx	r5
	
	
	/**************config pin for 27*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    21be:	7026      	strb	r6, [r4, #0]
	//config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS27, &config_port_pin);
    21c0:	0021      	movs	r1, r4
    21c2:	2017      	movs	r0, #23
    21c4:	47a8      	blx	r5
    21c6:	2380      	movs	r3, #128	; 0x80
    21c8:	041b      	lsls	r3, r3, #16
    21ca:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(SS27, true);	
} // end conf_port_pin(void)
    21cc:	b003      	add	sp, #12
    21ce:	bc0c      	pop	{r2, r3}
    21d0:	4690      	mov	r8, r2
    21d2:	4699      	mov	r9, r3
    21d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	000005c9 	.word	0x000005c9
    21dc:	41004400 	.word	0x41004400

000021e0 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    21e0:	b500      	push	{lr}
    21e2:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    21e4:	a801      	add	r0, sp, #4
    21e6:	2300      	movs	r3, #0
    21e8:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    21ea:	2201      	movs	r2, #1
    21ec:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    21ee:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    21f0:	4b01      	ldr	r3, [pc, #4]	; (21f8 <clk_osc8m_init+0x18>)
    21f2:	4798      	blx	r3
}
    21f4:	b003      	add	sp, #12
    21f6:	bd00      	pop	{pc}
    21f8:	00001b2d 	.word	0x00001b2d

000021fc <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    21fc:	b500      	push	{lr}
    21fe:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    2200:	4b0a      	ldr	r3, [pc, #40]	; (222c <clk_gclk0_init+0x30>)
    2202:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2204:	2300      	movs	r3, #0
    2206:	4a0a      	ldr	r2, [pc, #40]	; (2230 <clk_gclk0_init+0x34>)
    2208:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    220a:	a901      	add	r1, sp, #4
    220c:	2206      	movs	r2, #6
    220e:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    2210:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    2212:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    2214:	3a05      	subs	r2, #5
    2216:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    2218:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    221a:	2000      	movs	r0, #0
    221c:	4b05      	ldr	r3, [pc, #20]	; (2234 <clk_gclk0_init+0x38>)
    221e:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    2220:	2000      	movs	r0, #0
    2222:	4b05      	ldr	r3, [pc, #20]	; (2238 <clk_gclk0_init+0x3c>)
    2224:	4798      	blx	r3
    2226:	b005      	add	sp, #20
    2228:	bd00      	pop	{pc}
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	00001c99 	.word	0x00001c99
    2230:	40000400 	.word	0x40000400
    2234:	00001cbd 	.word	0x00001cbd
    2238:	00001d8d 	.word	0x00001d8d

0000223c <sys_clk_init>:
{
    223c:	b510      	push	{r4, lr}
	clk_osc8m_init();
    223e:	4b03      	ldr	r3, [pc, #12]	; (224c <sys_clk_init+0x10>)
    2240:	4798      	blx	r3
	clk_gclk0_init();
    2242:	4b03      	ldr	r3, [pc, #12]	; (2250 <sys_clk_init+0x14>)
    2244:	4798      	blx	r3
    delay_init();
    2246:	4b03      	ldr	r3, [pc, #12]	; (2254 <sys_clk_init+0x18>)
    2248:	4798      	blx	r3
}
    224a:	bd10      	pop	{r4, pc}
    224c:	000021e1 	.word	0x000021e1
    2250:	000021fd 	.word	0x000021fd
    2254:	0000055d 	.word	0x0000055d

00002258 <simSysInit>:
{
    2258:	b510      	push	{r4, lr}
	system_init();
    225a:	4b05      	ldr	r3, [pc, #20]	; (2270 <simSysInit+0x18>)
    225c:	4798      	blx	r3
	sys_clk_init();
    225e:	4b05      	ldr	r3, [pc, #20]	; (2274 <simSysInit+0x1c>)
    2260:	4798      	blx	r3
	conf_port_pin();
    2262:	4b05      	ldr	r3, [pc, #20]	; (2278 <simSysInit+0x20>)
    2264:	4798      	blx	r3
	spi27_initialize();
    2266:	4b05      	ldr	r3, [pc, #20]	; (227c <simSysInit+0x24>)
    2268:	4798      	blx	r3
	uart245_init();
    226a:	4b05      	ldr	r3, [pc, #20]	; (2280 <simSysInit+0x28>)
    226c:	4798      	blx	r3
}
    226e:	bd10      	pop	{r4, pc}
    2270:	00002031 	.word	0x00002031
    2274:	0000223d 	.word	0x0000223d
    2278:	00002125 	.word	0x00002125
    227c:	00000239 	.word	0x00000239
    2280:	00000361 	.word	0x00000361

00002284 <main>:
{
    2284:	b510      	push	{r4, lr}
    2286:	b084      	sub	sp, #16
    rssi_vals acquired_rssi = {10, 20, 30};
    2288:	ac02      	add	r4, sp, #8
    228a:	2208      	movs	r2, #8
    228c:	2100      	movs	r1, #0
    228e:	0020      	movs	r0, r4
    2290:	4b0f      	ldr	r3, [pc, #60]	; (22d0 <main+0x4c>)
    2292:	4798      	blx	r3
    2294:	230a      	movs	r3, #10
    2296:	8023      	strh	r3, [r4, #0]
    2298:	330a      	adds	r3, #10
    229a:	8063      	strh	r3, [r4, #2]
    229c:	330a      	adds	r3, #10
    229e:	80a3      	strh	r3, [r4, #4]
    22a0:	2208      	movs	r2, #8
    22a2:	0021      	movs	r1, r4
    22a4:	4668      	mov	r0, sp
    22a6:	4b0b      	ldr	r3, [pc, #44]	; (22d4 <main+0x50>)
    22a8:	4798      	blx	r3
    simSysInit();
    22aa:	4b0b      	ldr	r3, [pc, #44]	; (22d8 <main+0x54>)
    22ac:	4798      	blx	r3
    delay_ms(100);
    22ae:	2064      	movs	r0, #100	; 0x64
    22b0:	4b0a      	ldr	r3, [pc, #40]	; (22dc <main+0x58>)
    22b2:	4798      	blx	r3
        acquired_rssi.rssi27 = spi27_rssi();
    22b4:	4b0a      	ldr	r3, [pc, #40]	; (22e0 <main+0x5c>)
    22b6:	4798      	blx	r3
    22b8:	b200      	sxth	r0, r0
    22ba:	466b      	mov	r3, sp
    22bc:	8018      	strh	r0, [r3, #0]
        acquired_rssi.rssi245 = uart245_rssi();
    22be:	4b09      	ldr	r3, [pc, #36]	; (22e4 <main+0x60>)
    22c0:	4798      	blx	r3
    22c2:	466b      	mov	r3, sp
    22c4:	80d8      	strh	r0, [r3, #6]
        delay_ms(100);
    22c6:	2064      	movs	r0, #100	; 0x64
    22c8:	4b04      	ldr	r3, [pc, #16]	; (22dc <main+0x58>)
    22ca:	4798      	blx	r3
    22cc:	e7f2      	b.n	22b4 <main+0x30>
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	000027f7 	.word	0x000027f7
    22d4:	000027e5 	.word	0x000027e5
    22d8:	00002259 	.word	0x00002259
    22dc:	00000599 	.word	0x00000599
    22e0:	00000185 	.word	0x00000185
    22e4:	00000519 	.word	0x00000519

000022e8 <__udivsi3>:
    22e8:	2200      	movs	r2, #0
    22ea:	0843      	lsrs	r3, r0, #1
    22ec:	428b      	cmp	r3, r1
    22ee:	d374      	bcc.n	23da <__udivsi3+0xf2>
    22f0:	0903      	lsrs	r3, r0, #4
    22f2:	428b      	cmp	r3, r1
    22f4:	d35f      	bcc.n	23b6 <__udivsi3+0xce>
    22f6:	0a03      	lsrs	r3, r0, #8
    22f8:	428b      	cmp	r3, r1
    22fa:	d344      	bcc.n	2386 <__udivsi3+0x9e>
    22fc:	0b03      	lsrs	r3, r0, #12
    22fe:	428b      	cmp	r3, r1
    2300:	d328      	bcc.n	2354 <__udivsi3+0x6c>
    2302:	0c03      	lsrs	r3, r0, #16
    2304:	428b      	cmp	r3, r1
    2306:	d30d      	bcc.n	2324 <__udivsi3+0x3c>
    2308:	22ff      	movs	r2, #255	; 0xff
    230a:	0209      	lsls	r1, r1, #8
    230c:	ba12      	rev	r2, r2
    230e:	0c03      	lsrs	r3, r0, #16
    2310:	428b      	cmp	r3, r1
    2312:	d302      	bcc.n	231a <__udivsi3+0x32>
    2314:	1212      	asrs	r2, r2, #8
    2316:	0209      	lsls	r1, r1, #8
    2318:	d065      	beq.n	23e6 <__udivsi3+0xfe>
    231a:	0b03      	lsrs	r3, r0, #12
    231c:	428b      	cmp	r3, r1
    231e:	d319      	bcc.n	2354 <__udivsi3+0x6c>
    2320:	e000      	b.n	2324 <__udivsi3+0x3c>
    2322:	0a09      	lsrs	r1, r1, #8
    2324:	0bc3      	lsrs	r3, r0, #15
    2326:	428b      	cmp	r3, r1
    2328:	d301      	bcc.n	232e <__udivsi3+0x46>
    232a:	03cb      	lsls	r3, r1, #15
    232c:	1ac0      	subs	r0, r0, r3
    232e:	4152      	adcs	r2, r2
    2330:	0b83      	lsrs	r3, r0, #14
    2332:	428b      	cmp	r3, r1
    2334:	d301      	bcc.n	233a <__udivsi3+0x52>
    2336:	038b      	lsls	r3, r1, #14
    2338:	1ac0      	subs	r0, r0, r3
    233a:	4152      	adcs	r2, r2
    233c:	0b43      	lsrs	r3, r0, #13
    233e:	428b      	cmp	r3, r1
    2340:	d301      	bcc.n	2346 <__udivsi3+0x5e>
    2342:	034b      	lsls	r3, r1, #13
    2344:	1ac0      	subs	r0, r0, r3
    2346:	4152      	adcs	r2, r2
    2348:	0b03      	lsrs	r3, r0, #12
    234a:	428b      	cmp	r3, r1
    234c:	d301      	bcc.n	2352 <__udivsi3+0x6a>
    234e:	030b      	lsls	r3, r1, #12
    2350:	1ac0      	subs	r0, r0, r3
    2352:	4152      	adcs	r2, r2
    2354:	0ac3      	lsrs	r3, r0, #11
    2356:	428b      	cmp	r3, r1
    2358:	d301      	bcc.n	235e <__udivsi3+0x76>
    235a:	02cb      	lsls	r3, r1, #11
    235c:	1ac0      	subs	r0, r0, r3
    235e:	4152      	adcs	r2, r2
    2360:	0a83      	lsrs	r3, r0, #10
    2362:	428b      	cmp	r3, r1
    2364:	d301      	bcc.n	236a <__udivsi3+0x82>
    2366:	028b      	lsls	r3, r1, #10
    2368:	1ac0      	subs	r0, r0, r3
    236a:	4152      	adcs	r2, r2
    236c:	0a43      	lsrs	r3, r0, #9
    236e:	428b      	cmp	r3, r1
    2370:	d301      	bcc.n	2376 <__udivsi3+0x8e>
    2372:	024b      	lsls	r3, r1, #9
    2374:	1ac0      	subs	r0, r0, r3
    2376:	4152      	adcs	r2, r2
    2378:	0a03      	lsrs	r3, r0, #8
    237a:	428b      	cmp	r3, r1
    237c:	d301      	bcc.n	2382 <__udivsi3+0x9a>
    237e:	020b      	lsls	r3, r1, #8
    2380:	1ac0      	subs	r0, r0, r3
    2382:	4152      	adcs	r2, r2
    2384:	d2cd      	bcs.n	2322 <__udivsi3+0x3a>
    2386:	09c3      	lsrs	r3, r0, #7
    2388:	428b      	cmp	r3, r1
    238a:	d301      	bcc.n	2390 <__udivsi3+0xa8>
    238c:	01cb      	lsls	r3, r1, #7
    238e:	1ac0      	subs	r0, r0, r3
    2390:	4152      	adcs	r2, r2
    2392:	0983      	lsrs	r3, r0, #6
    2394:	428b      	cmp	r3, r1
    2396:	d301      	bcc.n	239c <__udivsi3+0xb4>
    2398:	018b      	lsls	r3, r1, #6
    239a:	1ac0      	subs	r0, r0, r3
    239c:	4152      	adcs	r2, r2
    239e:	0943      	lsrs	r3, r0, #5
    23a0:	428b      	cmp	r3, r1
    23a2:	d301      	bcc.n	23a8 <__udivsi3+0xc0>
    23a4:	014b      	lsls	r3, r1, #5
    23a6:	1ac0      	subs	r0, r0, r3
    23a8:	4152      	adcs	r2, r2
    23aa:	0903      	lsrs	r3, r0, #4
    23ac:	428b      	cmp	r3, r1
    23ae:	d301      	bcc.n	23b4 <__udivsi3+0xcc>
    23b0:	010b      	lsls	r3, r1, #4
    23b2:	1ac0      	subs	r0, r0, r3
    23b4:	4152      	adcs	r2, r2
    23b6:	08c3      	lsrs	r3, r0, #3
    23b8:	428b      	cmp	r3, r1
    23ba:	d301      	bcc.n	23c0 <__udivsi3+0xd8>
    23bc:	00cb      	lsls	r3, r1, #3
    23be:	1ac0      	subs	r0, r0, r3
    23c0:	4152      	adcs	r2, r2
    23c2:	0883      	lsrs	r3, r0, #2
    23c4:	428b      	cmp	r3, r1
    23c6:	d301      	bcc.n	23cc <__udivsi3+0xe4>
    23c8:	008b      	lsls	r3, r1, #2
    23ca:	1ac0      	subs	r0, r0, r3
    23cc:	4152      	adcs	r2, r2
    23ce:	0843      	lsrs	r3, r0, #1
    23d0:	428b      	cmp	r3, r1
    23d2:	d301      	bcc.n	23d8 <__udivsi3+0xf0>
    23d4:	004b      	lsls	r3, r1, #1
    23d6:	1ac0      	subs	r0, r0, r3
    23d8:	4152      	adcs	r2, r2
    23da:	1a41      	subs	r1, r0, r1
    23dc:	d200      	bcs.n	23e0 <__udivsi3+0xf8>
    23de:	4601      	mov	r1, r0
    23e0:	4152      	adcs	r2, r2
    23e2:	4610      	mov	r0, r2
    23e4:	4770      	bx	lr
    23e6:	e7ff      	b.n	23e8 <__udivsi3+0x100>
    23e8:	b501      	push	{r0, lr}
    23ea:	2000      	movs	r0, #0
    23ec:	f000 f806 	bl	23fc <__aeabi_idiv0>
    23f0:	bd02      	pop	{r1, pc}
    23f2:	46c0      	nop			; (mov r8, r8)

000023f4 <__aeabi_uidivmod>:
    23f4:	2900      	cmp	r1, #0
    23f6:	d0f7      	beq.n	23e8 <__udivsi3+0x100>
    23f8:	e776      	b.n	22e8 <__udivsi3>
    23fa:	4770      	bx	lr

000023fc <__aeabi_idiv0>:
    23fc:	4770      	bx	lr
    23fe:	46c0      	nop			; (mov r8, r8)

00002400 <__aeabi_lmul>:
    2400:	b5f0      	push	{r4, r5, r6, r7, lr}
    2402:	46ce      	mov	lr, r9
    2404:	4647      	mov	r7, r8
    2406:	0415      	lsls	r5, r2, #16
    2408:	0c2d      	lsrs	r5, r5, #16
    240a:	002e      	movs	r6, r5
    240c:	b580      	push	{r7, lr}
    240e:	0407      	lsls	r7, r0, #16
    2410:	0c14      	lsrs	r4, r2, #16
    2412:	0c3f      	lsrs	r7, r7, #16
    2414:	4699      	mov	r9, r3
    2416:	0c03      	lsrs	r3, r0, #16
    2418:	437e      	muls	r6, r7
    241a:	435d      	muls	r5, r3
    241c:	4367      	muls	r7, r4
    241e:	4363      	muls	r3, r4
    2420:	197f      	adds	r7, r7, r5
    2422:	0c34      	lsrs	r4, r6, #16
    2424:	19e4      	adds	r4, r4, r7
    2426:	469c      	mov	ip, r3
    2428:	42a5      	cmp	r5, r4
    242a:	d903      	bls.n	2434 <__aeabi_lmul+0x34>
    242c:	2380      	movs	r3, #128	; 0x80
    242e:	025b      	lsls	r3, r3, #9
    2430:	4698      	mov	r8, r3
    2432:	44c4      	add	ip, r8
    2434:	464b      	mov	r3, r9
    2436:	4351      	muls	r1, r2
    2438:	4343      	muls	r3, r0
    243a:	0436      	lsls	r6, r6, #16
    243c:	0c36      	lsrs	r6, r6, #16
    243e:	0c25      	lsrs	r5, r4, #16
    2440:	0424      	lsls	r4, r4, #16
    2442:	4465      	add	r5, ip
    2444:	19a4      	adds	r4, r4, r6
    2446:	1859      	adds	r1, r3, r1
    2448:	1949      	adds	r1, r1, r5
    244a:	0020      	movs	r0, r4
    244c:	bc0c      	pop	{r2, r3}
    244e:	4690      	mov	r8, r2
    2450:	4699      	mov	r9, r3
    2452:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002454 <__aeabi_fmul>:
    2454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2456:	4657      	mov	r7, sl
    2458:	464e      	mov	r6, r9
    245a:	4645      	mov	r5, r8
    245c:	46de      	mov	lr, fp
    245e:	b5e0      	push	{r5, r6, r7, lr}
    2460:	0247      	lsls	r7, r0, #9
    2462:	0046      	lsls	r6, r0, #1
    2464:	4688      	mov	r8, r1
    2466:	0a7f      	lsrs	r7, r7, #9
    2468:	0e36      	lsrs	r6, r6, #24
    246a:	0fc4      	lsrs	r4, r0, #31
    246c:	2e00      	cmp	r6, #0
    246e:	d047      	beq.n	2500 <__aeabi_fmul+0xac>
    2470:	2eff      	cmp	r6, #255	; 0xff
    2472:	d024      	beq.n	24be <__aeabi_fmul+0x6a>
    2474:	00fb      	lsls	r3, r7, #3
    2476:	2780      	movs	r7, #128	; 0x80
    2478:	04ff      	lsls	r7, r7, #19
    247a:	431f      	orrs	r7, r3
    247c:	2300      	movs	r3, #0
    247e:	4699      	mov	r9, r3
    2480:	469a      	mov	sl, r3
    2482:	3e7f      	subs	r6, #127	; 0x7f
    2484:	4643      	mov	r3, r8
    2486:	025d      	lsls	r5, r3, #9
    2488:	0058      	lsls	r0, r3, #1
    248a:	0fdb      	lsrs	r3, r3, #31
    248c:	0a6d      	lsrs	r5, r5, #9
    248e:	0e00      	lsrs	r0, r0, #24
    2490:	4698      	mov	r8, r3
    2492:	d043      	beq.n	251c <__aeabi_fmul+0xc8>
    2494:	28ff      	cmp	r0, #255	; 0xff
    2496:	d03b      	beq.n	2510 <__aeabi_fmul+0xbc>
    2498:	00eb      	lsls	r3, r5, #3
    249a:	2580      	movs	r5, #128	; 0x80
    249c:	2200      	movs	r2, #0
    249e:	04ed      	lsls	r5, r5, #19
    24a0:	431d      	orrs	r5, r3
    24a2:	387f      	subs	r0, #127	; 0x7f
    24a4:	1836      	adds	r6, r6, r0
    24a6:	1c73      	adds	r3, r6, #1
    24a8:	4641      	mov	r1, r8
    24aa:	469b      	mov	fp, r3
    24ac:	464b      	mov	r3, r9
    24ae:	4061      	eors	r1, r4
    24b0:	4313      	orrs	r3, r2
    24b2:	2b0f      	cmp	r3, #15
    24b4:	d864      	bhi.n	2580 <__aeabi_fmul+0x12c>
    24b6:	4875      	ldr	r0, [pc, #468]	; (268c <__aeabi_fmul+0x238>)
    24b8:	009b      	lsls	r3, r3, #2
    24ba:	58c3      	ldr	r3, [r0, r3]
    24bc:	469f      	mov	pc, r3
    24be:	2f00      	cmp	r7, #0
    24c0:	d142      	bne.n	2548 <__aeabi_fmul+0xf4>
    24c2:	2308      	movs	r3, #8
    24c4:	4699      	mov	r9, r3
    24c6:	3b06      	subs	r3, #6
    24c8:	26ff      	movs	r6, #255	; 0xff
    24ca:	469a      	mov	sl, r3
    24cc:	e7da      	b.n	2484 <__aeabi_fmul+0x30>
    24ce:	4641      	mov	r1, r8
    24d0:	2a02      	cmp	r2, #2
    24d2:	d028      	beq.n	2526 <__aeabi_fmul+0xd2>
    24d4:	2a03      	cmp	r2, #3
    24d6:	d100      	bne.n	24da <__aeabi_fmul+0x86>
    24d8:	e0ce      	b.n	2678 <__aeabi_fmul+0x224>
    24da:	2a01      	cmp	r2, #1
    24dc:	d000      	beq.n	24e0 <__aeabi_fmul+0x8c>
    24de:	e0ac      	b.n	263a <__aeabi_fmul+0x1e6>
    24e0:	4011      	ands	r1, r2
    24e2:	2000      	movs	r0, #0
    24e4:	2200      	movs	r2, #0
    24e6:	b2cc      	uxtb	r4, r1
    24e8:	0240      	lsls	r0, r0, #9
    24ea:	05d2      	lsls	r2, r2, #23
    24ec:	0a40      	lsrs	r0, r0, #9
    24ee:	07e4      	lsls	r4, r4, #31
    24f0:	4310      	orrs	r0, r2
    24f2:	4320      	orrs	r0, r4
    24f4:	bc3c      	pop	{r2, r3, r4, r5}
    24f6:	4690      	mov	r8, r2
    24f8:	4699      	mov	r9, r3
    24fa:	46a2      	mov	sl, r4
    24fc:	46ab      	mov	fp, r5
    24fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2500:	2f00      	cmp	r7, #0
    2502:	d115      	bne.n	2530 <__aeabi_fmul+0xdc>
    2504:	2304      	movs	r3, #4
    2506:	4699      	mov	r9, r3
    2508:	3b03      	subs	r3, #3
    250a:	2600      	movs	r6, #0
    250c:	469a      	mov	sl, r3
    250e:	e7b9      	b.n	2484 <__aeabi_fmul+0x30>
    2510:	20ff      	movs	r0, #255	; 0xff
    2512:	2202      	movs	r2, #2
    2514:	2d00      	cmp	r5, #0
    2516:	d0c5      	beq.n	24a4 <__aeabi_fmul+0x50>
    2518:	2203      	movs	r2, #3
    251a:	e7c3      	b.n	24a4 <__aeabi_fmul+0x50>
    251c:	2d00      	cmp	r5, #0
    251e:	d119      	bne.n	2554 <__aeabi_fmul+0x100>
    2520:	2000      	movs	r0, #0
    2522:	2201      	movs	r2, #1
    2524:	e7be      	b.n	24a4 <__aeabi_fmul+0x50>
    2526:	2401      	movs	r4, #1
    2528:	22ff      	movs	r2, #255	; 0xff
    252a:	400c      	ands	r4, r1
    252c:	2000      	movs	r0, #0
    252e:	e7db      	b.n	24e8 <__aeabi_fmul+0x94>
    2530:	0038      	movs	r0, r7
    2532:	f000 f915 	bl	2760 <__clzsi2>
    2536:	2676      	movs	r6, #118	; 0x76
    2538:	1f43      	subs	r3, r0, #5
    253a:	409f      	lsls	r7, r3
    253c:	2300      	movs	r3, #0
    253e:	4276      	negs	r6, r6
    2540:	1a36      	subs	r6, r6, r0
    2542:	4699      	mov	r9, r3
    2544:	469a      	mov	sl, r3
    2546:	e79d      	b.n	2484 <__aeabi_fmul+0x30>
    2548:	230c      	movs	r3, #12
    254a:	4699      	mov	r9, r3
    254c:	3b09      	subs	r3, #9
    254e:	26ff      	movs	r6, #255	; 0xff
    2550:	469a      	mov	sl, r3
    2552:	e797      	b.n	2484 <__aeabi_fmul+0x30>
    2554:	0028      	movs	r0, r5
    2556:	f000 f903 	bl	2760 <__clzsi2>
    255a:	1f43      	subs	r3, r0, #5
    255c:	409d      	lsls	r5, r3
    255e:	2376      	movs	r3, #118	; 0x76
    2560:	425b      	negs	r3, r3
    2562:	1a18      	subs	r0, r3, r0
    2564:	2200      	movs	r2, #0
    2566:	e79d      	b.n	24a4 <__aeabi_fmul+0x50>
    2568:	2080      	movs	r0, #128	; 0x80
    256a:	2400      	movs	r4, #0
    256c:	03c0      	lsls	r0, r0, #15
    256e:	22ff      	movs	r2, #255	; 0xff
    2570:	e7ba      	b.n	24e8 <__aeabi_fmul+0x94>
    2572:	003d      	movs	r5, r7
    2574:	4652      	mov	r2, sl
    2576:	e7ab      	b.n	24d0 <__aeabi_fmul+0x7c>
    2578:	003d      	movs	r5, r7
    257a:	0021      	movs	r1, r4
    257c:	4652      	mov	r2, sl
    257e:	e7a7      	b.n	24d0 <__aeabi_fmul+0x7c>
    2580:	0c3b      	lsrs	r3, r7, #16
    2582:	469c      	mov	ip, r3
    2584:	042a      	lsls	r2, r5, #16
    2586:	0c12      	lsrs	r2, r2, #16
    2588:	0c2b      	lsrs	r3, r5, #16
    258a:	0014      	movs	r4, r2
    258c:	4660      	mov	r0, ip
    258e:	4665      	mov	r5, ip
    2590:	043f      	lsls	r7, r7, #16
    2592:	0c3f      	lsrs	r7, r7, #16
    2594:	437c      	muls	r4, r7
    2596:	4342      	muls	r2, r0
    2598:	435d      	muls	r5, r3
    259a:	437b      	muls	r3, r7
    259c:	0c27      	lsrs	r7, r4, #16
    259e:	189b      	adds	r3, r3, r2
    25a0:	18ff      	adds	r7, r7, r3
    25a2:	42ba      	cmp	r2, r7
    25a4:	d903      	bls.n	25ae <__aeabi_fmul+0x15a>
    25a6:	2380      	movs	r3, #128	; 0x80
    25a8:	025b      	lsls	r3, r3, #9
    25aa:	469c      	mov	ip, r3
    25ac:	4465      	add	r5, ip
    25ae:	0424      	lsls	r4, r4, #16
    25b0:	043a      	lsls	r2, r7, #16
    25b2:	0c24      	lsrs	r4, r4, #16
    25b4:	1912      	adds	r2, r2, r4
    25b6:	0193      	lsls	r3, r2, #6
    25b8:	1e5c      	subs	r4, r3, #1
    25ba:	41a3      	sbcs	r3, r4
    25bc:	0c3f      	lsrs	r7, r7, #16
    25be:	0e92      	lsrs	r2, r2, #26
    25c0:	197d      	adds	r5, r7, r5
    25c2:	431a      	orrs	r2, r3
    25c4:	01ad      	lsls	r5, r5, #6
    25c6:	4315      	orrs	r5, r2
    25c8:	012b      	lsls	r3, r5, #4
    25ca:	d504      	bpl.n	25d6 <__aeabi_fmul+0x182>
    25cc:	2301      	movs	r3, #1
    25ce:	465e      	mov	r6, fp
    25d0:	086a      	lsrs	r2, r5, #1
    25d2:	401d      	ands	r5, r3
    25d4:	4315      	orrs	r5, r2
    25d6:	0032      	movs	r2, r6
    25d8:	327f      	adds	r2, #127	; 0x7f
    25da:	2a00      	cmp	r2, #0
    25dc:	dd25      	ble.n	262a <__aeabi_fmul+0x1d6>
    25de:	076b      	lsls	r3, r5, #29
    25e0:	d004      	beq.n	25ec <__aeabi_fmul+0x198>
    25e2:	230f      	movs	r3, #15
    25e4:	402b      	ands	r3, r5
    25e6:	2b04      	cmp	r3, #4
    25e8:	d000      	beq.n	25ec <__aeabi_fmul+0x198>
    25ea:	3504      	adds	r5, #4
    25ec:	012b      	lsls	r3, r5, #4
    25ee:	d503      	bpl.n	25f8 <__aeabi_fmul+0x1a4>
    25f0:	0032      	movs	r2, r6
    25f2:	4b27      	ldr	r3, [pc, #156]	; (2690 <__aeabi_fmul+0x23c>)
    25f4:	3280      	adds	r2, #128	; 0x80
    25f6:	401d      	ands	r5, r3
    25f8:	2afe      	cmp	r2, #254	; 0xfe
    25fa:	dc94      	bgt.n	2526 <__aeabi_fmul+0xd2>
    25fc:	2401      	movs	r4, #1
    25fe:	01a8      	lsls	r0, r5, #6
    2600:	0a40      	lsrs	r0, r0, #9
    2602:	b2d2      	uxtb	r2, r2
    2604:	400c      	ands	r4, r1
    2606:	e76f      	b.n	24e8 <__aeabi_fmul+0x94>
    2608:	2080      	movs	r0, #128	; 0x80
    260a:	03c0      	lsls	r0, r0, #15
    260c:	4207      	tst	r7, r0
    260e:	d007      	beq.n	2620 <__aeabi_fmul+0x1cc>
    2610:	4205      	tst	r5, r0
    2612:	d105      	bne.n	2620 <__aeabi_fmul+0x1cc>
    2614:	4328      	orrs	r0, r5
    2616:	0240      	lsls	r0, r0, #9
    2618:	0a40      	lsrs	r0, r0, #9
    261a:	4644      	mov	r4, r8
    261c:	22ff      	movs	r2, #255	; 0xff
    261e:	e763      	b.n	24e8 <__aeabi_fmul+0x94>
    2620:	4338      	orrs	r0, r7
    2622:	0240      	lsls	r0, r0, #9
    2624:	0a40      	lsrs	r0, r0, #9
    2626:	22ff      	movs	r2, #255	; 0xff
    2628:	e75e      	b.n	24e8 <__aeabi_fmul+0x94>
    262a:	2401      	movs	r4, #1
    262c:	1aa3      	subs	r3, r4, r2
    262e:	2b1b      	cmp	r3, #27
    2630:	dd05      	ble.n	263e <__aeabi_fmul+0x1ea>
    2632:	400c      	ands	r4, r1
    2634:	2200      	movs	r2, #0
    2636:	2000      	movs	r0, #0
    2638:	e756      	b.n	24e8 <__aeabi_fmul+0x94>
    263a:	465e      	mov	r6, fp
    263c:	e7cb      	b.n	25d6 <__aeabi_fmul+0x182>
    263e:	002a      	movs	r2, r5
    2640:	2020      	movs	r0, #32
    2642:	40da      	lsrs	r2, r3
    2644:	1ac3      	subs	r3, r0, r3
    2646:	409d      	lsls	r5, r3
    2648:	002b      	movs	r3, r5
    264a:	1e5d      	subs	r5, r3, #1
    264c:	41ab      	sbcs	r3, r5
    264e:	4313      	orrs	r3, r2
    2650:	075a      	lsls	r2, r3, #29
    2652:	d004      	beq.n	265e <__aeabi_fmul+0x20a>
    2654:	220f      	movs	r2, #15
    2656:	401a      	ands	r2, r3
    2658:	2a04      	cmp	r2, #4
    265a:	d000      	beq.n	265e <__aeabi_fmul+0x20a>
    265c:	3304      	adds	r3, #4
    265e:	015a      	lsls	r2, r3, #5
    2660:	d504      	bpl.n	266c <__aeabi_fmul+0x218>
    2662:	2401      	movs	r4, #1
    2664:	2201      	movs	r2, #1
    2666:	400c      	ands	r4, r1
    2668:	2000      	movs	r0, #0
    266a:	e73d      	b.n	24e8 <__aeabi_fmul+0x94>
    266c:	2401      	movs	r4, #1
    266e:	019b      	lsls	r3, r3, #6
    2670:	0a58      	lsrs	r0, r3, #9
    2672:	400c      	ands	r4, r1
    2674:	2200      	movs	r2, #0
    2676:	e737      	b.n	24e8 <__aeabi_fmul+0x94>
    2678:	2080      	movs	r0, #128	; 0x80
    267a:	2401      	movs	r4, #1
    267c:	03c0      	lsls	r0, r0, #15
    267e:	4328      	orrs	r0, r5
    2680:	0240      	lsls	r0, r0, #9
    2682:	0a40      	lsrs	r0, r0, #9
    2684:	400c      	ands	r4, r1
    2686:	22ff      	movs	r2, #255	; 0xff
    2688:	e72e      	b.n	24e8 <__aeabi_fmul+0x94>
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	00002870 	.word	0x00002870
    2690:	f7ffffff 	.word	0xf7ffffff

00002694 <__aeabi_f2iz>:
    2694:	0241      	lsls	r1, r0, #9
    2696:	0043      	lsls	r3, r0, #1
    2698:	0fc2      	lsrs	r2, r0, #31
    269a:	0a49      	lsrs	r1, r1, #9
    269c:	0e1b      	lsrs	r3, r3, #24
    269e:	2000      	movs	r0, #0
    26a0:	2b7e      	cmp	r3, #126	; 0x7e
    26a2:	dd0d      	ble.n	26c0 <__aeabi_f2iz+0x2c>
    26a4:	2b9d      	cmp	r3, #157	; 0x9d
    26a6:	dc0c      	bgt.n	26c2 <__aeabi_f2iz+0x2e>
    26a8:	2080      	movs	r0, #128	; 0x80
    26aa:	0400      	lsls	r0, r0, #16
    26ac:	4301      	orrs	r1, r0
    26ae:	2b95      	cmp	r3, #149	; 0x95
    26b0:	dc0a      	bgt.n	26c8 <__aeabi_f2iz+0x34>
    26b2:	2096      	movs	r0, #150	; 0x96
    26b4:	1ac3      	subs	r3, r0, r3
    26b6:	40d9      	lsrs	r1, r3
    26b8:	4248      	negs	r0, r1
    26ba:	2a00      	cmp	r2, #0
    26bc:	d100      	bne.n	26c0 <__aeabi_f2iz+0x2c>
    26be:	0008      	movs	r0, r1
    26c0:	4770      	bx	lr
    26c2:	4b03      	ldr	r3, [pc, #12]	; (26d0 <__aeabi_f2iz+0x3c>)
    26c4:	18d0      	adds	r0, r2, r3
    26c6:	e7fb      	b.n	26c0 <__aeabi_f2iz+0x2c>
    26c8:	3b96      	subs	r3, #150	; 0x96
    26ca:	4099      	lsls	r1, r3
    26cc:	e7f4      	b.n	26b8 <__aeabi_f2iz+0x24>
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	7fffffff 	.word	0x7fffffff

000026d4 <__aeabi_ui2f>:
    26d4:	b510      	push	{r4, lr}
    26d6:	1e04      	subs	r4, r0, #0
    26d8:	d027      	beq.n	272a <__aeabi_ui2f+0x56>
    26da:	f000 f841 	bl	2760 <__clzsi2>
    26de:	239e      	movs	r3, #158	; 0x9e
    26e0:	1a1b      	subs	r3, r3, r0
    26e2:	2b96      	cmp	r3, #150	; 0x96
    26e4:	dc0a      	bgt.n	26fc <__aeabi_ui2f+0x28>
    26e6:	2296      	movs	r2, #150	; 0x96
    26e8:	1ad2      	subs	r2, r2, r3
    26ea:	4094      	lsls	r4, r2
    26ec:	0264      	lsls	r4, r4, #9
    26ee:	0a64      	lsrs	r4, r4, #9
    26f0:	b2db      	uxtb	r3, r3
    26f2:	0264      	lsls	r4, r4, #9
    26f4:	05db      	lsls	r3, r3, #23
    26f6:	0a60      	lsrs	r0, r4, #9
    26f8:	4318      	orrs	r0, r3
    26fa:	bd10      	pop	{r4, pc}
    26fc:	2b99      	cmp	r3, #153	; 0x99
    26fe:	dc17      	bgt.n	2730 <__aeabi_ui2f+0x5c>
    2700:	2299      	movs	r2, #153	; 0x99
    2702:	1ad2      	subs	r2, r2, r3
    2704:	2a00      	cmp	r2, #0
    2706:	dd27      	ble.n	2758 <__aeabi_ui2f+0x84>
    2708:	4094      	lsls	r4, r2
    270a:	0022      	movs	r2, r4
    270c:	4c13      	ldr	r4, [pc, #76]	; (275c <__aeabi_ui2f+0x88>)
    270e:	4014      	ands	r4, r2
    2710:	0751      	lsls	r1, r2, #29
    2712:	d004      	beq.n	271e <__aeabi_ui2f+0x4a>
    2714:	210f      	movs	r1, #15
    2716:	400a      	ands	r2, r1
    2718:	2a04      	cmp	r2, #4
    271a:	d000      	beq.n	271e <__aeabi_ui2f+0x4a>
    271c:	3404      	adds	r4, #4
    271e:	0162      	lsls	r2, r4, #5
    2720:	d412      	bmi.n	2748 <__aeabi_ui2f+0x74>
    2722:	01a4      	lsls	r4, r4, #6
    2724:	0a64      	lsrs	r4, r4, #9
    2726:	b2db      	uxtb	r3, r3
    2728:	e7e3      	b.n	26f2 <__aeabi_ui2f+0x1e>
    272a:	2300      	movs	r3, #0
    272c:	2400      	movs	r4, #0
    272e:	e7e0      	b.n	26f2 <__aeabi_ui2f+0x1e>
    2730:	22b9      	movs	r2, #185	; 0xb9
    2732:	0021      	movs	r1, r4
    2734:	1ad2      	subs	r2, r2, r3
    2736:	4091      	lsls	r1, r2
    2738:	000a      	movs	r2, r1
    273a:	1e51      	subs	r1, r2, #1
    273c:	418a      	sbcs	r2, r1
    273e:	2105      	movs	r1, #5
    2740:	1a09      	subs	r1, r1, r0
    2742:	40cc      	lsrs	r4, r1
    2744:	4314      	orrs	r4, r2
    2746:	e7db      	b.n	2700 <__aeabi_ui2f+0x2c>
    2748:	4b04      	ldr	r3, [pc, #16]	; (275c <__aeabi_ui2f+0x88>)
    274a:	401c      	ands	r4, r3
    274c:	239f      	movs	r3, #159	; 0x9f
    274e:	01a4      	lsls	r4, r4, #6
    2750:	1a1b      	subs	r3, r3, r0
    2752:	0a64      	lsrs	r4, r4, #9
    2754:	b2db      	uxtb	r3, r3
    2756:	e7cc      	b.n	26f2 <__aeabi_ui2f+0x1e>
    2758:	0022      	movs	r2, r4
    275a:	e7d7      	b.n	270c <__aeabi_ui2f+0x38>
    275c:	fbffffff 	.word	0xfbffffff

00002760 <__clzsi2>:
    2760:	211c      	movs	r1, #28
    2762:	2301      	movs	r3, #1
    2764:	041b      	lsls	r3, r3, #16
    2766:	4298      	cmp	r0, r3
    2768:	d301      	bcc.n	276e <__clzsi2+0xe>
    276a:	0c00      	lsrs	r0, r0, #16
    276c:	3910      	subs	r1, #16
    276e:	0a1b      	lsrs	r3, r3, #8
    2770:	4298      	cmp	r0, r3
    2772:	d301      	bcc.n	2778 <__clzsi2+0x18>
    2774:	0a00      	lsrs	r0, r0, #8
    2776:	3908      	subs	r1, #8
    2778:	091b      	lsrs	r3, r3, #4
    277a:	4298      	cmp	r0, r3
    277c:	d301      	bcc.n	2782 <__clzsi2+0x22>
    277e:	0900      	lsrs	r0, r0, #4
    2780:	3904      	subs	r1, #4
    2782:	a202      	add	r2, pc, #8	; (adr r2, 278c <__clzsi2+0x2c>)
    2784:	5c10      	ldrb	r0, [r2, r0]
    2786:	1840      	adds	r0, r0, r1
    2788:	4770      	bx	lr
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	02020304 	.word	0x02020304
    2790:	01010101 	.word	0x01010101
	...

0000279c <__libc_init_array>:
    279c:	b570      	push	{r4, r5, r6, lr}
    279e:	2600      	movs	r6, #0
    27a0:	4d0c      	ldr	r5, [pc, #48]	; (27d4 <__libc_init_array+0x38>)
    27a2:	4c0d      	ldr	r4, [pc, #52]	; (27d8 <__libc_init_array+0x3c>)
    27a4:	1b64      	subs	r4, r4, r5
    27a6:	10a4      	asrs	r4, r4, #2
    27a8:	42a6      	cmp	r6, r4
    27aa:	d109      	bne.n	27c0 <__libc_init_array+0x24>
    27ac:	2600      	movs	r6, #0
    27ae:	f000 f87f 	bl	28b0 <_init>
    27b2:	4d0a      	ldr	r5, [pc, #40]	; (27dc <__libc_init_array+0x40>)
    27b4:	4c0a      	ldr	r4, [pc, #40]	; (27e0 <__libc_init_array+0x44>)
    27b6:	1b64      	subs	r4, r4, r5
    27b8:	10a4      	asrs	r4, r4, #2
    27ba:	42a6      	cmp	r6, r4
    27bc:	d105      	bne.n	27ca <__libc_init_array+0x2e>
    27be:	bd70      	pop	{r4, r5, r6, pc}
    27c0:	00b3      	lsls	r3, r6, #2
    27c2:	58eb      	ldr	r3, [r5, r3]
    27c4:	4798      	blx	r3
    27c6:	3601      	adds	r6, #1
    27c8:	e7ee      	b.n	27a8 <__libc_init_array+0xc>
    27ca:	00b3      	lsls	r3, r6, #2
    27cc:	58eb      	ldr	r3, [r5, r3]
    27ce:	4798      	blx	r3
    27d0:	3601      	adds	r6, #1
    27d2:	e7f2      	b.n	27ba <__libc_init_array+0x1e>
    27d4:	000028bc 	.word	0x000028bc
    27d8:	000028bc 	.word	0x000028bc
    27dc:	000028bc 	.word	0x000028bc
    27e0:	000028c0 	.word	0x000028c0

000027e4 <memcpy>:
    27e4:	2300      	movs	r3, #0
    27e6:	b510      	push	{r4, lr}
    27e8:	429a      	cmp	r2, r3
    27ea:	d100      	bne.n	27ee <memcpy+0xa>
    27ec:	bd10      	pop	{r4, pc}
    27ee:	5ccc      	ldrb	r4, [r1, r3]
    27f0:	54c4      	strb	r4, [r0, r3]
    27f2:	3301      	adds	r3, #1
    27f4:	e7f8      	b.n	27e8 <memcpy+0x4>

000027f6 <memset>:
    27f6:	0003      	movs	r3, r0
    27f8:	1882      	adds	r2, r0, r2
    27fa:	4293      	cmp	r3, r2
    27fc:	d100      	bne.n	2800 <memset+0xa>
    27fe:	4770      	bx	lr
    2800:	7019      	strb	r1, [r3, #0]
    2802:	3301      	adds	r3, #1
    2804:	e7f9      	b.n	27fa <memset+0x4>
    2806:	0000      	movs	r0, r0
    2808:	42000800 	.word	0x42000800
    280c:	42000c00 	.word	0x42000c00
    2810:	42001000 	.word	0x42001000
    2814:	42001400 	.word	0x42001400
    2818:	42001800 	.word	0x42001800
    281c:	42001c00 	.word	0x42001c00
    2820:	0c0b0a09 	.word	0x0c0b0a09
    2824:	00000e0d 	.word	0x00000e0d
    2828:	00001ab0 	.word	0x00001ab0
    282c:	00001b08 	.word	0x00001b08
    2830:	00001b08 	.word	0x00001b08
    2834:	00001aaa 	.word	0x00001aaa
    2838:	00001aaa 	.word	0x00001aaa
    283c:	00001ac4 	.word	0x00001ac4
    2840:	00001ab6 	.word	0x00001ab6
    2844:	00001aca 	.word	0x00001aca
    2848:	00001af8 	.word	0x00001af8
    284c:	00001b94 	.word	0x00001b94
    2850:	00001c02 	.word	0x00001c02
    2854:	00001c02 	.word	0x00001c02
    2858:	00001b74 	.word	0x00001b74
    285c:	00001b86 	.word	0x00001b86
    2860:	00001ba4 	.word	0x00001ba4
    2864:	00001b78 	.word	0x00001b78
    2868:	00001bb4 	.word	0x00001bb4
    286c:	00001bf0 	.word	0x00001bf0
    2870:	00002580 	.word	0x00002580
    2874:	000024d0 	.word	0x000024d0
    2878:	000024d0 	.word	0x000024d0
    287c:	000024ce 	.word	0x000024ce
    2880:	00002572 	.word	0x00002572
    2884:	00002572 	.word	0x00002572
    2888:	00002568 	.word	0x00002568
    288c:	000024ce 	.word	0x000024ce
    2890:	00002572 	.word	0x00002572
    2894:	00002568 	.word	0x00002568
    2898:	00002572 	.word	0x00002572
    289c:	000024ce 	.word	0x000024ce
    28a0:	00002578 	.word	0x00002578
    28a4:	00002578 	.word	0x00002578
    28a8:	00002578 	.word	0x00002578
    28ac:	00002608 	.word	0x00002608

000028b0 <_init>:
    28b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28b2:	46c0      	nop			; (mov r8, r8)
    28b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28b6:	bc08      	pop	{r3}
    28b8:	469e      	mov	lr, r3
    28ba:	4770      	bx	lr

000028bc <__init_array_start>:
    28bc:	000000dd 	.word	0x000000dd

000028c0 <_fini>:
    28c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28c6:	bc08      	pop	{r3}
    28c8:	469e      	mov	lr, r3
    28ca:	4770      	bx	lr

000028cc <__fini_array_start>:
    28cc:	000000b5 	.word	0x000000b5
