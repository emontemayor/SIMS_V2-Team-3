
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001840  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  2000000c  0000184c  0002000c  2**2
                  ALLOC
  3 .stack        00002000  200000b8  000018f8  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021307  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f01  00000000  00000000  00041394  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000354d  00000000  00000000  00044295  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000430  00000000  00000000  000477e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004e0  00000000  00000000  00047c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000055d6  00000000  00000000  000480f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a87e  00000000  00000000  0004d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c6a4  00000000  00000000  00057f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a00  00000000  00000000  000e45ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 20 00 20 8d 13 00 00 89 13 00 00 89 13 00 00     . . ............
	...
      2c:	89 13 00 00 00 00 00 00 00 00 00 00 89 13 00 00     ................
      3c:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
      4c:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
      5c:	89 13 00 00 89 13 00 00 d1 0c 00 00 e1 0c 00 00     ................
      6c:	f1 0c 00 00 01 0d 00 00 11 0d 00 00 21 0d 00 00     ............!...
      7c:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
      8c:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
      9c:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
      ac:	89 13 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001840 	.word	0x00001840

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001840 	.word	0x00001840
     10c:	00001840 	.word	0x00001840
     110:	00000000 	.word	0x00000000

00000114 <uartfiber_parse_cmd>:
 *  should be 'A' (for AX5043), 'M' (for MTXDOT), or 'R' (for RC2500HP).
 *  Sends the RSSI of the respective module over fiber to the
 *  display controller.
 */
static void uartfiber_parse_cmd(uint8_t cmd_char)
{
     114:	b500      	push	{lr}
     116:	b083      	sub	sp, #12
    union{
        rssi_t f_val;
        uint8_t f_bytes[RSSI_SIZE]; 
    }float_bytes;
    
    switch(cmd_char)
     118:	284d      	cmp	r0, #77	; 0x4d
     11a:	d013      	beq.n	144 <uartfiber_parse_cmd+0x30>
     11c:	2852      	cmp	r0, #82	; 0x52
     11e:	d01f      	beq.n	160 <uartfiber_parse_cmd+0x4c>
     120:	2841      	cmp	r0, #65	; 0x41
     122:	d001      	beq.n	128 <uartfiber_parse_cmd+0x14>
        case 'R':
            float_bytes.f_val = uartfiber_rssi->rssi245;
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
            break;
    }
}
     124:	b003      	add	sp, #12
     126:	bd00      	pop	{pc}
            float_bytes.f_val = uartfiber_rssi->rssi169;
     128:	4b14      	ldr	r3, [pc, #80]	; (17c <uartfiber_parse_cmd+0x68>)
     12a:	681b      	ldr	r3, [r3, #0]
     12c:	881b      	ldrh	r3, [r3, #0]
     12e:	b21b      	sxth	r3, r3
     130:	aa01      	add	r2, sp, #4
     132:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     134:	2202      	movs	r2, #2
     136:	a901      	add	r1, sp, #4
     138:	4811      	ldr	r0, [pc, #68]	; (180 <uartfiber_parse_cmd+0x6c>)
     13a:	4b12      	ldr	r3, [pc, #72]	; (184 <uartfiber_parse_cmd+0x70>)
     13c:	4798      	blx	r3
     13e:	2805      	cmp	r0, #5
     140:	d1f8      	bne.n	134 <uartfiber_parse_cmd+0x20>
     142:	e7ef      	b.n	124 <uartfiber_parse_cmd+0x10>
            float_bytes.f_val = uartfiber_rssi->rssi915;
     144:	4b0d      	ldr	r3, [pc, #52]	; (17c <uartfiber_parse_cmd+0x68>)
     146:	681b      	ldr	r3, [r3, #0]
     148:	885b      	ldrh	r3, [r3, #2]
     14a:	b21b      	sxth	r3, r3
     14c:	aa01      	add	r2, sp, #4
     14e:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     150:	2202      	movs	r2, #2
     152:	a901      	add	r1, sp, #4
     154:	480a      	ldr	r0, [pc, #40]	; (180 <uartfiber_parse_cmd+0x6c>)
     156:	4b0b      	ldr	r3, [pc, #44]	; (184 <uartfiber_parse_cmd+0x70>)
     158:	4798      	blx	r3
     15a:	2805      	cmp	r0, #5
     15c:	d1f8      	bne.n	150 <uartfiber_parse_cmd+0x3c>
     15e:	e7e1      	b.n	124 <uartfiber_parse_cmd+0x10>
            float_bytes.f_val = uartfiber_rssi->rssi245;
     160:	4b06      	ldr	r3, [pc, #24]	; (17c <uartfiber_parse_cmd+0x68>)
     162:	681b      	ldr	r3, [r3, #0]
     164:	889b      	ldrh	r3, [r3, #4]
     166:	b21b      	sxth	r3, r3
     168:	aa01      	add	r2, sp, #4
     16a:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     16c:	2202      	movs	r2, #2
     16e:	a901      	add	r1, sp, #4
     170:	4803      	ldr	r0, [pc, #12]	; (180 <uartfiber_parse_cmd+0x6c>)
     172:	4b04      	ldr	r3, [pc, #16]	; (184 <uartfiber_parse_cmd+0x70>)
     174:	4798      	blx	r3
     176:	2805      	cmp	r0, #5
     178:	d1f8      	bne.n	16c <uartfiber_parse_cmd+0x58>
     17a:	e7d3      	b.n	124 <uartfiber_parse_cmd+0x10>
     17c:	2000005c 	.word	0x2000005c
     180:	20000028 	.word	0x20000028
     184:	00000a89 	.word	0x00000a89

00000188 <uartfiber_read_callback>:
{
     188:	b510      	push	{r4, lr}
    uartfiber_parse_cmd(uartfiber_rx_read);
     18a:	4c05      	ldr	r4, [pc, #20]	; (1a0 <uartfiber_read_callback+0x18>)
     18c:	7820      	ldrb	r0, [r4, #0]
     18e:	4b05      	ldr	r3, [pc, #20]	; (1a4 <uartfiber_read_callback+0x1c>)
     190:	4798      	blx	r3
    usart_read_buffer_job(&uartfiber_inst, &uartfiber_rx_read, 1);
     192:	2201      	movs	r2, #1
     194:	0021      	movs	r1, r4
     196:	4804      	ldr	r0, [pc, #16]	; (1a8 <uartfiber_read_callback+0x20>)
     198:	4b04      	ldr	r3, [pc, #16]	; (1ac <uartfiber_read_callback+0x24>)
     19a:	4798      	blx	r3
}
     19c:	bd10      	pop	{r4, pc}
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	20000060 	.word	0x20000060
     1a4:	00000115 	.word	0x00000115
     1a8:	20000028 	.word	0x20000028
     1ac:	00000aa9 	.word	0x00000aa9

000001b0 <configure_uartfiber_callbacks>:
{
     1b0:	b510      	push	{r4, lr}
    usart_register_callback(&uartfiber_inst, uartfiber_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     1b2:	4c08      	ldr	r4, [pc, #32]	; (1d4 <configure_uartfiber_callbacks+0x24>)
     1b4:	2201      	movs	r2, #1
     1b6:	4908      	ldr	r1, [pc, #32]	; (1d8 <configure_uartfiber_callbacks+0x28>)
     1b8:	0020      	movs	r0, r4
     1ba:	4b08      	ldr	r3, [pc, #32]	; (1dc <configure_uartfiber_callbacks+0x2c>)
     1bc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     1be:	2231      	movs	r2, #49	; 0x31
     1c0:	5ca3      	ldrb	r3, [r4, r2]
     1c2:	2102      	movs	r1, #2
     1c4:	430b      	orrs	r3, r1
     1c6:	54a3      	strb	r3, [r4, r2]
    usart_read_buffer_job(&uartfiber_inst, &uartfiber_rx_read, 1);
     1c8:	3a30      	subs	r2, #48	; 0x30
     1ca:	4905      	ldr	r1, [pc, #20]	; (1e0 <configure_uartfiber_callbacks+0x30>)
     1cc:	0020      	movs	r0, r4
     1ce:	4b05      	ldr	r3, [pc, #20]	; (1e4 <configure_uartfiber_callbacks+0x34>)
     1d0:	4798      	blx	r3
}
     1d2:	bd10      	pop	{r4, pc}
     1d4:	20000028 	.word	0x20000028
     1d8:	00000189 	.word	0x00000189
     1dc:	00000a71 	.word	0x00000a71
     1e0:	20000060 	.word	0x20000060
     1e4:	00000aa9 	.word	0x00000aa9

000001e8 <uartfiber_init>:
{
     1e8:	b510      	push	{r4, lr}
     1ea:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     1ec:	2380      	movs	r3, #128	; 0x80
     1ee:	05db      	lsls	r3, r3, #23
     1f0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     1f2:	2300      	movs	r3, #0
     1f4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     1f6:	22ff      	movs	r2, #255	; 0xff
     1f8:	4669      	mov	r1, sp
     1fa:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     1fc:	2200      	movs	r2, #0
     1fe:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     200:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     202:	2101      	movs	r1, #1
     204:	2024      	movs	r0, #36	; 0x24
     206:	466c      	mov	r4, sp
     208:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     20a:	3001      	adds	r0, #1
     20c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     20e:	3125      	adds	r1, #37	; 0x25
     210:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     212:	3101      	adds	r1, #1
     214:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     216:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     218:	3105      	adds	r1, #5
     21a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     21c:	3101      	adds	r1, #1
     21e:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     220:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     222:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     224:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     226:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     228:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     22a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     22c:	2313      	movs	r3, #19
     22e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     230:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate = UART_FIBER_BAUD;
     232:	2396      	movs	r3, #150	; 0x96
     234:	01db      	lsls	r3, r3, #7
     236:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX;
     238:	2380      	movs	r3, #128	; 0x80
     23a:	025b      	lsls	r3, r3, #9
     23c:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_UNUSED;
     23e:	2301      	movs	r3, #1
     240:	425b      	negs	r3, r3
     242:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
     244:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = UTX_FIBER;
     246:	4a11      	ldr	r2, [pc, #68]	; (28c <uartfiber_init+0xa4>)
     248:	920e      	str	r2, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     24a:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst, UART_FIBER, &config_usart) != STATUS_OK);
     24c:	466a      	mov	r2, sp
     24e:	4910      	ldr	r1, [pc, #64]	; (290 <uartfiber_init+0xa8>)
     250:	4810      	ldr	r0, [pc, #64]	; (294 <uartfiber_init+0xac>)
     252:	4b11      	ldr	r3, [pc, #68]	; (298 <uartfiber_init+0xb0>)
     254:	4798      	blx	r3
     256:	2800      	cmp	r0, #0
     258:	d1f8      	bne.n	24c <uartfiber_init+0x64>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     25a:	4b0e      	ldr	r3, [pc, #56]	; (294 <uartfiber_init+0xac>)
     25c:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     25e:	0020      	movs	r0, r4
     260:	4b0e      	ldr	r3, [pc, #56]	; (29c <uartfiber_init+0xb4>)
     262:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     264:	231f      	movs	r3, #31
     266:	4018      	ands	r0, r3
     268:	3b1e      	subs	r3, #30
     26a:	4083      	lsls	r3, r0
     26c:	4a0c      	ldr	r2, [pc, #48]	; (2a0 <uartfiber_init+0xb8>)
     26e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     270:	4b08      	ldr	r3, [pc, #32]	; (294 <uartfiber_init+0xac>)
     272:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     274:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     276:	2b00      	cmp	r3, #0
     278:	d1fa      	bne.n	270 <uartfiber_init+0x88>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     27a:	6823      	ldr	r3, [r4, #0]
     27c:	2202      	movs	r2, #2
     27e:	4313      	orrs	r3, r2
     280:	6023      	str	r3, [r4, #0]
    configure_uartfiber_callbacks();
     282:	4b08      	ldr	r3, [pc, #32]	; (2a4 <uartfiber_init+0xbc>)
     284:	4798      	blx	r3
}
     286:	b010      	add	sp, #64	; 0x40
     288:	bd10      	pop	{r4, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	00140002 	.word	0x00140002
     290:	42001c00 	.word	0x42001c00
     294:	20000028 	.word	0x20000028
     298:	0000089d 	.word	0x0000089d
     29c:	00000cad 	.word	0x00000cad
     2a0:	e000e100 	.word	0xe000e100
     2a4:	000001b1 	.word	0x000001b1

000002a8 <usart_fiber_write>:
/** 
 * Asynchronous buffer write to transmit single shield measurement
 * Simply calls "usart_write_buffer_job" with specific parameters
 */
void usart_fiber_write(struct measurement temp)
{
     2a8:	b500      	push	{lr}
     2aa:	b085      	sub	sp, #20
     2ac:	9001      	str	r0, [sp, #4]
     2ae:	9102      	str	r1, [sp, #8]
     2b0:	9203      	str	r2, [sp, #12]
	return usart_write_buffer_job(&uartfiber_inst, (uint8_t*) &temp, sizeof(temp));
     2b2:	220a      	movs	r2, #10
     2b4:	a901      	add	r1, sp, #4
     2b6:	4802      	ldr	r0, [pc, #8]	; (2c0 <usart_fiber_write+0x18>)
     2b8:	4b02      	ldr	r3, [pc, #8]	; (2c4 <usart_fiber_write+0x1c>)
     2ba:	4798      	blx	r3
};
     2bc:	b005      	add	sp, #20
     2be:	bd00      	pop	{pc}
     2c0:	20000028 	.word	0x20000028
     2c4:	00000a89 	.word	0x00000a89

000002c8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     2c8:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     2ca:	2000      	movs	r0, #0
     2cc:	4b08      	ldr	r3, [pc, #32]	; (2f0 <delay_init+0x28>)
     2ce:	4798      	blx	r3
	cycles_per_ms /= 1000;
     2d0:	4c08      	ldr	r4, [pc, #32]	; (2f4 <delay_init+0x2c>)
     2d2:	21fa      	movs	r1, #250	; 0xfa
     2d4:	0089      	lsls	r1, r1, #2
     2d6:	47a0      	blx	r4
     2d8:	4b07      	ldr	r3, [pc, #28]	; (2f8 <delay_init+0x30>)
     2da:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     2dc:	21fa      	movs	r1, #250	; 0xfa
     2de:	0089      	lsls	r1, r1, #2
     2e0:	47a0      	blx	r4
     2e2:	4b06      	ldr	r3, [pc, #24]	; (2fc <delay_init+0x34>)
     2e4:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     2e6:	2205      	movs	r2, #5
     2e8:	4b05      	ldr	r3, [pc, #20]	; (300 <delay_init+0x38>)
     2ea:	601a      	str	r2, [r3, #0]
}
     2ec:	bd10      	pop	{r4, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	00001111 	.word	0x00001111
     2f4:	000015f5 	.word	0x000015f5
     2f8:	20000000 	.word	0x20000000
     2fc:	20000004 	.word	0x20000004
     300:	e000e010 	.word	0xe000e010

00000304 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     304:	e000      	b.n	308 <delay_cycles_ms+0x4>
{
     306:	0010      	movs	r0, r2
	while (n--) {
     308:	1e42      	subs	r2, r0, #1
     30a:	2800      	cmp	r0, #0
     30c:	d00c      	beq.n	328 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     30e:	4b07      	ldr	r3, [pc, #28]	; (32c <delay_cycles_ms+0x28>)
     310:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     312:	2b00      	cmp	r3, #0
     314:	d0f7      	beq.n	306 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     316:	4906      	ldr	r1, [pc, #24]	; (330 <delay_cycles_ms+0x2c>)
     318:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     31a:	2300      	movs	r3, #0
     31c:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     31e:	4b04      	ldr	r3, [pc, #16]	; (330 <delay_cycles_ms+0x2c>)
     320:	681b      	ldr	r3, [r3, #0]
     322:	03db      	lsls	r3, r3, #15
     324:	d5fb      	bpl.n	31e <delay_cycles_ms+0x1a>
     326:	e7ee      	b.n	306 <delay_cycles_ms+0x2>
	}
}
     328:	4770      	bx	lr
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	20000000 	.word	0x20000000
     330:	e000e010 	.word	0xe000e010

00000334 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     334:	b500      	push	{lr}
     336:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     338:	ab01      	add	r3, sp, #4
     33a:	2280      	movs	r2, #128	; 0x80
     33c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     33e:	780a      	ldrb	r2, [r1, #0]
     340:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     342:	784a      	ldrb	r2, [r1, #1]
     344:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     346:	788a      	ldrb	r2, [r1, #2]
     348:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     34a:	0019      	movs	r1, r3
     34c:	4b01      	ldr	r3, [pc, #4]	; (354 <port_pin_set_config+0x20>)
     34e:	4798      	blx	r3
}
     350:	b003      	add	sp, #12
     352:	bd00      	pop	{pc}
     354:	00001329 	.word	0x00001329

00000358 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     358:	b5f0      	push	{r4, r5, r6, r7, lr}
     35a:	46de      	mov	lr, fp
     35c:	4657      	mov	r7, sl
     35e:	464e      	mov	r6, r9
     360:	4645      	mov	r5, r8
     362:	b5e0      	push	{r5, r6, r7, lr}
     364:	b085      	sub	sp, #20
     366:	4689      	mov	r9, r1
     368:	0016      	movs	r6, r2
     36a:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     36c:	2200      	movs	r2, #0
     36e:	2300      	movs	r3, #0
     370:	2100      	movs	r1, #0
     372:	468b      	mov	fp, r1
     374:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     376:	253f      	movs	r5, #63	; 0x3f
     378:	9600      	str	r6, [sp, #0]
     37a:	9701      	str	r7, [sp, #4]
     37c:	9002      	str	r0, [sp, #8]
     37e:	4649      	mov	r1, r9
     380:	9103      	str	r1, [sp, #12]
     382:	e011      	b.n	3a8 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     384:	2120      	movs	r1, #32
     386:	1b49      	subs	r1, r1, r5
     388:	2400      	movs	r4, #0
     38a:	3401      	adds	r4, #1
     38c:	40cc      	lsrs	r4, r1
     38e:	e013      	b.n	3b8 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     390:	9800      	ldr	r0, [sp, #0]
     392:	9901      	ldr	r1, [sp, #4]
     394:	1a12      	subs	r2, r2, r0
     396:	418b      	sbcs	r3, r1
			q |= bit_shift;
     398:	4659      	mov	r1, fp
     39a:	4660      	mov	r0, ip
     39c:	4301      	orrs	r1, r0
     39e:	468b      	mov	fp, r1
     3a0:	4651      	mov	r1, sl
     3a2:	4321      	orrs	r1, r4
     3a4:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     3a6:	3d01      	subs	r5, #1
     3a8:	2d00      	cmp	r5, #0
     3aa:	db23      	blt.n	3f4 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     3ac:	2120      	movs	r1, #32
     3ae:	4249      	negs	r1, r1
     3b0:	1869      	adds	r1, r5, r1
     3b2:	d4e7      	bmi.n	384 <long_division+0x2c>
     3b4:	2401      	movs	r4, #1
     3b6:	408c      	lsls	r4, r1
     3b8:	2101      	movs	r1, #1
     3ba:	40a9      	lsls	r1, r5
     3bc:	468c      	mov	ip, r1
		r = r << 1;
     3be:	1892      	adds	r2, r2, r2
     3c0:	415b      	adcs	r3, r3
     3c2:	0010      	movs	r0, r2
     3c4:	0019      	movs	r1, r3
		if (n & bit_shift) {
     3c6:	9e02      	ldr	r6, [sp, #8]
     3c8:	4667      	mov	r7, ip
     3ca:	403e      	ands	r6, r7
     3cc:	46b1      	mov	r9, r6
     3ce:	9e03      	ldr	r6, [sp, #12]
     3d0:	4026      	ands	r6, r4
     3d2:	46b0      	mov	r8, r6
     3d4:	464e      	mov	r6, r9
     3d6:	4647      	mov	r7, r8
     3d8:	433e      	orrs	r6, r7
     3da:	d003      	beq.n	3e4 <long_division+0x8c>
			r |= 0x01;
     3dc:	2601      	movs	r6, #1
     3de:	4306      	orrs	r6, r0
     3e0:	0032      	movs	r2, r6
     3e2:	000b      	movs	r3, r1
		if (r >= d) {
     3e4:	9800      	ldr	r0, [sp, #0]
     3e6:	9901      	ldr	r1, [sp, #4]
     3e8:	4299      	cmp	r1, r3
     3ea:	d8dc      	bhi.n	3a6 <long_division+0x4e>
     3ec:	d1d0      	bne.n	390 <long_division+0x38>
     3ee:	4290      	cmp	r0, r2
     3f0:	d8d9      	bhi.n	3a6 <long_division+0x4e>
     3f2:	e7cd      	b.n	390 <long_division+0x38>
		}
	}

	return q;
}
     3f4:	4658      	mov	r0, fp
     3f6:	4651      	mov	r1, sl
     3f8:	b005      	add	sp, #20
     3fa:	bc3c      	pop	{r2, r3, r4, r5}
     3fc:	4690      	mov	r8, r2
     3fe:	4699      	mov	r9, r3
     400:	46a2      	mov	sl, r4
     402:	46ab      	mov	fp, r5
     404:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000406 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     406:	0849      	lsrs	r1, r1, #1
     408:	4281      	cmp	r1, r0
     40a:	d201      	bcs.n	410 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     40c:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     40e:	4770      	bx	lr
     410:	2300      	movs	r3, #0
     412:	e002      	b.n	41a <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     414:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     416:	3301      	adds	r3, #1
     418:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     41a:	4281      	cmp	r1, r0
     41c:	d2fa      	bcs.n	414 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     41e:	3b01      	subs	r3, #1
     420:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     422:	2bff      	cmp	r3, #255	; 0xff
     424:	d901      	bls.n	42a <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     426:	2040      	movs	r0, #64	; 0x40
     428:	e7f1      	b.n	40e <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     42a:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     42c:	2000      	movs	r0, #0
     42e:	e7ee      	b.n	40e <_sercom_get_sync_baud_val+0x8>

00000430 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     430:	b570      	push	{r4, r5, r6, lr}
     432:	b082      	sub	sp, #8
     434:	000c      	movs	r4, r1
     436:	0015      	movs	r5, r2
     438:	aa06      	add	r2, sp, #24
     43a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     43c:	0002      	movs	r2, r0
     43e:	434a      	muls	r2, r1
     440:	42a2      	cmp	r2, r4
     442:	d902      	bls.n	44a <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     444:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     446:	b002      	add	sp, #8
     448:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     44a:	2b00      	cmp	r3, #0
     44c:	d114      	bne.n	478 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     44e:	0002      	movs	r2, r0
     450:	0008      	movs	r0, r1
     452:	2100      	movs	r1, #0
     454:	4e1b      	ldr	r6, [pc, #108]	; (4c4 <_sercom_get_async_baud_val+0x94>)
     456:	47b0      	blx	r6
     458:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     45a:	0022      	movs	r2, r4
     45c:	2300      	movs	r3, #0
     45e:	2000      	movs	r0, #0
     460:	4c19      	ldr	r4, [pc, #100]	; (4c8 <_sercom_get_async_baud_val+0x98>)
     462:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     464:	2200      	movs	r2, #0
     466:	2301      	movs	r3, #1
     468:	1a12      	subs	r2, r2, r0
     46a:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     46c:	0c10      	lsrs	r0, r2, #16
     46e:	041b      	lsls	r3, r3, #16
     470:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     472:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     474:	2000      	movs	r0, #0
     476:	e7e6      	b.n	446 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     478:	2b01      	cmp	r3, #1
     47a:	d001      	beq.n	480 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     47c:	2000      	movs	r0, #0
     47e:	e7f8      	b.n	472 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     480:	000a      	movs	r2, r1
     482:	2300      	movs	r3, #0
     484:	2100      	movs	r1, #0
     486:	4e0f      	ldr	r6, [pc, #60]	; (4c4 <_sercom_get_async_baud_val+0x94>)
     488:	47b0      	blx	r6
     48a:	0002      	movs	r2, r0
     48c:	000b      	movs	r3, r1
     48e:	9200      	str	r2, [sp, #0]
     490:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     492:	0020      	movs	r0, r4
     494:	2100      	movs	r1, #0
     496:	4e0c      	ldr	r6, [pc, #48]	; (4c8 <_sercom_get_async_baud_val+0x98>)
     498:	47b0      	blx	r6
     49a:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     49c:	2380      	movs	r3, #128	; 0x80
     49e:	019b      	lsls	r3, r3, #6
     4a0:	4298      	cmp	r0, r3
     4a2:	d901      	bls.n	4a8 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4a4:	2040      	movs	r0, #64	; 0x40
     4a6:	e7ce      	b.n	446 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     4a8:	0f61      	lsrs	r1, r4, #29
     4aa:	00e0      	lsls	r0, r4, #3
     4ac:	9a00      	ldr	r2, [sp, #0]
     4ae:	9b01      	ldr	r3, [sp, #4]
     4b0:	4c05      	ldr	r4, [pc, #20]	; (4c8 <_sercom_get_async_baud_val+0x98>)
     4b2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     4b4:	b2c0      	uxtb	r0, r0
     4b6:	00f3      	lsls	r3, r6, #3
     4b8:	b2db      	uxtb	r3, r3
     4ba:	1ac0      	subs	r0, r0, r3
     4bc:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     4be:	0340      	lsls	r0, r0, #13
     4c0:	4330      	orrs	r0, r6
     4c2:	e7d6      	b.n	472 <_sercom_get_async_baud_val+0x42>
     4c4:	0000170d 	.word	0x0000170d
     4c8:	00000359 	.word	0x00000359

000004cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4cc:	b510      	push	{r4, lr}
     4ce:	b082      	sub	sp, #8
     4d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     4d2:	4b0e      	ldr	r3, [pc, #56]	; (50c <sercom_set_gclk_generator+0x40>)
     4d4:	781b      	ldrb	r3, [r3, #0]
     4d6:	2b00      	cmp	r3, #0
     4d8:	d007      	beq.n	4ea <sercom_set_gclk_generator+0x1e>
     4da:	2900      	cmp	r1, #0
     4dc:	d105      	bne.n	4ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     4de:	4b0b      	ldr	r3, [pc, #44]	; (50c <sercom_set_gclk_generator+0x40>)
     4e0:	785b      	ldrb	r3, [r3, #1]
     4e2:	4283      	cmp	r3, r0
     4e4:	d010      	beq.n	508 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     4e6:	201d      	movs	r0, #29
     4e8:	e00c      	b.n	504 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     4ea:	a901      	add	r1, sp, #4
     4ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4ee:	2013      	movs	r0, #19
     4f0:	4b07      	ldr	r3, [pc, #28]	; (510 <sercom_set_gclk_generator+0x44>)
     4f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4f4:	2013      	movs	r0, #19
     4f6:	4b07      	ldr	r3, [pc, #28]	; (514 <sercom_set_gclk_generator+0x48>)
     4f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     4fa:	4b04      	ldr	r3, [pc, #16]	; (50c <sercom_set_gclk_generator+0x40>)
     4fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     4fe:	2201      	movs	r2, #1
     500:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     502:	2000      	movs	r0, #0
}
     504:	b002      	add	sp, #8
     506:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     508:	2000      	movs	r0, #0
     50a:	e7fb      	b.n	504 <sercom_set_gclk_generator+0x38>
     50c:	20000064 	.word	0x20000064
     510:	00001245 	.word	0x00001245
     514:	000011bd 	.word	0x000011bd

00000518 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     518:	4b40      	ldr	r3, [pc, #256]	; (61c <_sercom_get_default_pad+0x104>)
     51a:	4298      	cmp	r0, r3
     51c:	d031      	beq.n	582 <_sercom_get_default_pad+0x6a>
     51e:	d90a      	bls.n	536 <_sercom_get_default_pad+0x1e>
     520:	4b3f      	ldr	r3, [pc, #252]	; (620 <_sercom_get_default_pad+0x108>)
     522:	4298      	cmp	r0, r3
     524:	d04d      	beq.n	5c2 <_sercom_get_default_pad+0xaa>
     526:	4b3f      	ldr	r3, [pc, #252]	; (624 <_sercom_get_default_pad+0x10c>)
     528:	4298      	cmp	r0, r3
     52a:	d05a      	beq.n	5e2 <_sercom_get_default_pad+0xca>
     52c:	4b3e      	ldr	r3, [pc, #248]	; (628 <_sercom_get_default_pad+0x110>)
     52e:	4298      	cmp	r0, r3
     530:	d037      	beq.n	5a2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     532:	2000      	movs	r0, #0
}
     534:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     536:	4b3d      	ldr	r3, [pc, #244]	; (62c <_sercom_get_default_pad+0x114>)
     538:	4298      	cmp	r0, r3
     53a:	d00c      	beq.n	556 <_sercom_get_default_pad+0x3e>
     53c:	4b3c      	ldr	r3, [pc, #240]	; (630 <_sercom_get_default_pad+0x118>)
     53e:	4298      	cmp	r0, r3
     540:	d1f7      	bne.n	532 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     542:	2901      	cmp	r1, #1
     544:	d05f      	beq.n	606 <_sercom_get_default_pad+0xee>
     546:	2900      	cmp	r1, #0
     548:	d015      	beq.n	576 <_sercom_get_default_pad+0x5e>
     54a:	2902      	cmp	r1, #2
     54c:	d015      	beq.n	57a <_sercom_get_default_pad+0x62>
     54e:	2903      	cmp	r1, #3
     550:	d015      	beq.n	57e <_sercom_get_default_pad+0x66>
	return 0;
     552:	2000      	movs	r0, #0
     554:	e7ee      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     556:	2901      	cmp	r1, #1
     558:	d053      	beq.n	602 <_sercom_get_default_pad+0xea>
     55a:	2900      	cmp	r1, #0
     55c:	d005      	beq.n	56a <_sercom_get_default_pad+0x52>
     55e:	2902      	cmp	r1, #2
     560:	d005      	beq.n	56e <_sercom_get_default_pad+0x56>
     562:	2903      	cmp	r1, #3
     564:	d005      	beq.n	572 <_sercom_get_default_pad+0x5a>
	return 0;
     566:	2000      	movs	r0, #0
     568:	e7e4      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     56a:	4832      	ldr	r0, [pc, #200]	; (634 <_sercom_get_default_pad+0x11c>)
     56c:	e7e2      	b.n	534 <_sercom_get_default_pad+0x1c>
     56e:	4832      	ldr	r0, [pc, #200]	; (638 <_sercom_get_default_pad+0x120>)
     570:	e7e0      	b.n	534 <_sercom_get_default_pad+0x1c>
     572:	4832      	ldr	r0, [pc, #200]	; (63c <_sercom_get_default_pad+0x124>)
     574:	e7de      	b.n	534 <_sercom_get_default_pad+0x1c>
     576:	2003      	movs	r0, #3
     578:	e7dc      	b.n	534 <_sercom_get_default_pad+0x1c>
     57a:	4831      	ldr	r0, [pc, #196]	; (640 <_sercom_get_default_pad+0x128>)
     57c:	e7da      	b.n	534 <_sercom_get_default_pad+0x1c>
     57e:	4831      	ldr	r0, [pc, #196]	; (644 <_sercom_get_default_pad+0x12c>)
     580:	e7d8      	b.n	534 <_sercom_get_default_pad+0x1c>
     582:	2901      	cmp	r1, #1
     584:	d041      	beq.n	60a <_sercom_get_default_pad+0xf2>
     586:	2900      	cmp	r1, #0
     588:	d005      	beq.n	596 <_sercom_get_default_pad+0x7e>
     58a:	2902      	cmp	r1, #2
     58c:	d005      	beq.n	59a <_sercom_get_default_pad+0x82>
     58e:	2903      	cmp	r1, #3
     590:	d005      	beq.n	59e <_sercom_get_default_pad+0x86>
	return 0;
     592:	2000      	movs	r0, #0
     594:	e7ce      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     596:	482c      	ldr	r0, [pc, #176]	; (648 <_sercom_get_default_pad+0x130>)
     598:	e7cc      	b.n	534 <_sercom_get_default_pad+0x1c>
     59a:	482c      	ldr	r0, [pc, #176]	; (64c <_sercom_get_default_pad+0x134>)
     59c:	e7ca      	b.n	534 <_sercom_get_default_pad+0x1c>
     59e:	482c      	ldr	r0, [pc, #176]	; (650 <_sercom_get_default_pad+0x138>)
     5a0:	e7c8      	b.n	534 <_sercom_get_default_pad+0x1c>
     5a2:	2901      	cmp	r1, #1
     5a4:	d033      	beq.n	60e <_sercom_get_default_pad+0xf6>
     5a6:	2900      	cmp	r1, #0
     5a8:	d005      	beq.n	5b6 <_sercom_get_default_pad+0x9e>
     5aa:	2902      	cmp	r1, #2
     5ac:	d005      	beq.n	5ba <_sercom_get_default_pad+0xa2>
     5ae:	2903      	cmp	r1, #3
     5b0:	d005      	beq.n	5be <_sercom_get_default_pad+0xa6>
	return 0;
     5b2:	2000      	movs	r0, #0
     5b4:	e7be      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5b6:	4827      	ldr	r0, [pc, #156]	; (654 <_sercom_get_default_pad+0x13c>)
     5b8:	e7bc      	b.n	534 <_sercom_get_default_pad+0x1c>
     5ba:	4827      	ldr	r0, [pc, #156]	; (658 <_sercom_get_default_pad+0x140>)
     5bc:	e7ba      	b.n	534 <_sercom_get_default_pad+0x1c>
     5be:	4827      	ldr	r0, [pc, #156]	; (65c <_sercom_get_default_pad+0x144>)
     5c0:	e7b8      	b.n	534 <_sercom_get_default_pad+0x1c>
     5c2:	2901      	cmp	r1, #1
     5c4:	d025      	beq.n	612 <_sercom_get_default_pad+0xfa>
     5c6:	2900      	cmp	r1, #0
     5c8:	d005      	beq.n	5d6 <_sercom_get_default_pad+0xbe>
     5ca:	2902      	cmp	r1, #2
     5cc:	d005      	beq.n	5da <_sercom_get_default_pad+0xc2>
     5ce:	2903      	cmp	r1, #3
     5d0:	d005      	beq.n	5de <_sercom_get_default_pad+0xc6>
	return 0;
     5d2:	2000      	movs	r0, #0
     5d4:	e7ae      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5d6:	4822      	ldr	r0, [pc, #136]	; (660 <_sercom_get_default_pad+0x148>)
     5d8:	e7ac      	b.n	534 <_sercom_get_default_pad+0x1c>
     5da:	4822      	ldr	r0, [pc, #136]	; (664 <_sercom_get_default_pad+0x14c>)
     5dc:	e7aa      	b.n	534 <_sercom_get_default_pad+0x1c>
     5de:	4822      	ldr	r0, [pc, #136]	; (668 <_sercom_get_default_pad+0x150>)
     5e0:	e7a8      	b.n	534 <_sercom_get_default_pad+0x1c>
     5e2:	2901      	cmp	r1, #1
     5e4:	d017      	beq.n	616 <_sercom_get_default_pad+0xfe>
     5e6:	2900      	cmp	r1, #0
     5e8:	d005      	beq.n	5f6 <_sercom_get_default_pad+0xde>
     5ea:	2902      	cmp	r1, #2
     5ec:	d005      	beq.n	5fa <_sercom_get_default_pad+0xe2>
     5ee:	2903      	cmp	r1, #3
     5f0:	d005      	beq.n	5fe <_sercom_get_default_pad+0xe6>
	return 0;
     5f2:	2000      	movs	r0, #0
     5f4:	e79e      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5f6:	481d      	ldr	r0, [pc, #116]	; (66c <_sercom_get_default_pad+0x154>)
     5f8:	e79c      	b.n	534 <_sercom_get_default_pad+0x1c>
     5fa:	481d      	ldr	r0, [pc, #116]	; (670 <_sercom_get_default_pad+0x158>)
     5fc:	e79a      	b.n	534 <_sercom_get_default_pad+0x1c>
     5fe:	481d      	ldr	r0, [pc, #116]	; (674 <_sercom_get_default_pad+0x15c>)
     600:	e798      	b.n	534 <_sercom_get_default_pad+0x1c>
     602:	481d      	ldr	r0, [pc, #116]	; (678 <_sercom_get_default_pad+0x160>)
     604:	e796      	b.n	534 <_sercom_get_default_pad+0x1c>
     606:	481d      	ldr	r0, [pc, #116]	; (67c <_sercom_get_default_pad+0x164>)
     608:	e794      	b.n	534 <_sercom_get_default_pad+0x1c>
     60a:	481d      	ldr	r0, [pc, #116]	; (680 <_sercom_get_default_pad+0x168>)
     60c:	e792      	b.n	534 <_sercom_get_default_pad+0x1c>
     60e:	481d      	ldr	r0, [pc, #116]	; (684 <_sercom_get_default_pad+0x16c>)
     610:	e790      	b.n	534 <_sercom_get_default_pad+0x1c>
     612:	481d      	ldr	r0, [pc, #116]	; (688 <_sercom_get_default_pad+0x170>)
     614:	e78e      	b.n	534 <_sercom_get_default_pad+0x1c>
     616:	481d      	ldr	r0, [pc, #116]	; (68c <_sercom_get_default_pad+0x174>)
     618:	e78c      	b.n	534 <_sercom_get_default_pad+0x1c>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	42001000 	.word	0x42001000
     620:	42001800 	.word	0x42001800
     624:	42001c00 	.word	0x42001c00
     628:	42001400 	.word	0x42001400
     62c:	42000800 	.word	0x42000800
     630:	42000c00 	.word	0x42000c00
     634:	00040003 	.word	0x00040003
     638:	00060003 	.word	0x00060003
     63c:	00070003 	.word	0x00070003
     640:	001e0003 	.word	0x001e0003
     644:	001f0003 	.word	0x001f0003
     648:	00080003 	.word	0x00080003
     64c:	000a0003 	.word	0x000a0003
     650:	000b0003 	.word	0x000b0003
     654:	00100003 	.word	0x00100003
     658:	00120003 	.word	0x00120003
     65c:	00130003 	.word	0x00130003
     660:	000c0003 	.word	0x000c0003
     664:	000e0003 	.word	0x000e0003
     668:	000f0003 	.word	0x000f0003
     66c:	00160003 	.word	0x00160003
     670:	00180003 	.word	0x00180003
     674:	00190003 	.word	0x00190003
     678:	00050003 	.word	0x00050003
     67c:	00010003 	.word	0x00010003
     680:	00090003 	.word	0x00090003
     684:	00110003 	.word	0x00110003
     688:	000d0003 	.word	0x000d0003
     68c:	00170003 	.word	0x00170003

00000690 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     690:	b530      	push	{r4, r5, lr}
     692:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     694:	4c0a      	ldr	r4, [pc, #40]	; (6c0 <_sercom_get_sercom_inst_index+0x30>)
     696:	466b      	mov	r3, sp
     698:	0022      	movs	r2, r4
     69a:	ca32      	ldmia	r2!, {r1, r4, r5}
     69c:	c332      	stmia	r3!, {r1, r4, r5}
     69e:	ca32      	ldmia	r2!, {r1, r4, r5}
     6a0:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6a2:	2300      	movs	r3, #0
     6a4:	2b05      	cmp	r3, #5
     6a6:	d808      	bhi.n	6ba <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6a8:	009a      	lsls	r2, r3, #2
     6aa:	4669      	mov	r1, sp
     6ac:	5852      	ldr	r2, [r2, r1]
     6ae:	4282      	cmp	r2, r0
     6b0:	d001      	beq.n	6b6 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6b2:	3301      	adds	r3, #1
     6b4:	e7f6      	b.n	6a4 <_sercom_get_sercom_inst_index+0x14>
			return i;
     6b6:	b2d8      	uxtb	r0, r3
     6b8:	e000      	b.n	6bc <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     6ba:	2000      	movs	r0, #0
}
     6bc:	b007      	add	sp, #28
     6be:	bd30      	pop	{r4, r5, pc}
     6c0:	000017a8 	.word	0x000017a8

000006c4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c6:	46de      	mov	lr, fp
     6c8:	4657      	mov	r7, sl
     6ca:	464e      	mov	r6, r9
     6cc:	4645      	mov	r5, r8
     6ce:	b5e0      	push	{r5, r6, r7, lr}
     6d0:	b087      	sub	sp, #28
     6d2:	0004      	movs	r4, r0
     6d4:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6d6:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6d8:	0030      	movs	r0, r6
     6da:	4b6b      	ldr	r3, [pc, #428]	; (888 <_usart_set_config+0x1c4>)
     6dc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6de:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     6e0:	2200      	movs	r2, #0
     6e2:	230e      	movs	r3, #14
     6e4:	a902      	add	r1, sp, #8
     6e6:	468c      	mov	ip, r1
     6e8:	4463      	add	r3, ip
     6ea:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     6ec:	8a2a      	ldrh	r2, [r5, #16]
     6ee:	2380      	movs	r3, #128	; 0x80
     6f0:	01db      	lsls	r3, r3, #7
     6f2:	429a      	cmp	r2, r3
     6f4:	d03b      	beq.n	76e <_usart_set_config+0xaa>
     6f6:	d90c      	bls.n	712 <_usart_set_config+0x4e>
     6f8:	23c0      	movs	r3, #192	; 0xc0
     6fa:	01db      	lsls	r3, r3, #7
     6fc:	429a      	cmp	r2, r3
     6fe:	d031      	beq.n	764 <_usart_set_config+0xa0>
     700:	2380      	movs	r3, #128	; 0x80
     702:	021b      	lsls	r3, r3, #8
     704:	429a      	cmp	r2, r3
     706:	d10d      	bne.n	724 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     708:	2303      	movs	r3, #3
     70a:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     70c:	2300      	movs	r3, #0
     70e:	4699      	mov	r9, r3
			break;
     710:	e00c      	b.n	72c <_usart_set_config+0x68>
	switch (config->sample_rate) {
     712:	2380      	movs	r3, #128	; 0x80
     714:	019b      	lsls	r3, r3, #6
     716:	429a      	cmp	r2, r3
     718:	d104      	bne.n	724 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     71a:	2310      	movs	r3, #16
     71c:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     71e:	3b0f      	subs	r3, #15
     720:	4699      	mov	r9, r3
			break;
     722:	e003      	b.n	72c <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     724:	2310      	movs	r3, #16
     726:	469a      	mov	sl, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     728:	2300      	movs	r3, #0
     72a:	4699      	mov	r9, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     72c:	682b      	ldr	r3, [r5, #0]
     72e:	68e9      	ldr	r1, [r5, #12]
     730:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
     732:	6969      	ldr	r1, [r5, #20]
     734:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     736:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     738:	7e2a      	ldrb	r2, [r5, #24]
     73a:	0212      	lsls	r2, r2, #8
		config->sample_rate |
     73c:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     73e:	2226      	movs	r2, #38	; 0x26
     740:	5caf      	ldrb	r7, [r5, r2]
     742:	077f      	lsls	r7, r7, #29
	ctrla = (uint32_t)config->data_order |
     744:	431f      	orrs	r7, r3
     746:	9703      	str	r7, [sp, #12]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     748:	686b      	ldr	r3, [r5, #4]
     74a:	4698      	mov	r8, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     74c:	2b00      	cmp	r3, #0
     74e:	d021      	beq.n	794 <_usart_set_config+0xd0>
     750:	2380      	movs	r3, #128	; 0x80
     752:	055b      	lsls	r3, r3, #21
     754:	4598      	cmp	r8, r3
     756:	d13e      	bne.n	7d6 <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     758:	2327      	movs	r3, #39	; 0x27
     75a:	5ceb      	ldrb	r3, [r5, r3]
     75c:	2b00      	cmp	r3, #0
     75e:	d00b      	beq.n	778 <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
     760:	2000      	movs	r0, #0
     762:	e039      	b.n	7d8 <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     764:	2308      	movs	r3, #8
     766:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     768:	3b07      	subs	r3, #7
     76a:	4699      	mov	r9, r3
			break;
     76c:	e7de      	b.n	72c <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     76e:	2308      	movs	r3, #8
     770:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     772:	2300      	movs	r3, #0
     774:	4699      	mov	r9, r3
     776:	e7d9      	b.n	72c <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     778:	6a2b      	ldr	r3, [r5, #32]
     77a:	4699      	mov	r9, r3
     77c:	b2c0      	uxtb	r0, r0
     77e:	4b43      	ldr	r3, [pc, #268]	; (88c <_usart_set_config+0x1c8>)
     780:	4798      	blx	r3
     782:	0001      	movs	r1, r0
     784:	220e      	movs	r2, #14
     786:	ab02      	add	r3, sp, #8
     788:	469c      	mov	ip, r3
     78a:	4462      	add	r2, ip
     78c:	4648      	mov	r0, r9
     78e:	4b40      	ldr	r3, [pc, #256]	; (890 <_usart_set_config+0x1cc>)
     790:	4798      	blx	r3
     792:	e021      	b.n	7d8 <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     794:	2327      	movs	r3, #39	; 0x27
     796:	5ceb      	ldrb	r3, [r5, r3]
     798:	2b00      	cmp	r3, #0
     79a:	d00b      	beq.n	7b4 <_usart_set_config+0xf0>
				status_code =
     79c:	4653      	mov	r3, sl
     79e:	9300      	str	r3, [sp, #0]
     7a0:	464b      	mov	r3, r9
     7a2:	220e      	movs	r2, #14
     7a4:	a902      	add	r1, sp, #8
     7a6:	468c      	mov	ip, r1
     7a8:	4462      	add	r2, ip
     7aa:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     7ac:	6a28      	ldr	r0, [r5, #32]
     7ae:	4f39      	ldr	r7, [pc, #228]	; (894 <_usart_set_config+0x1d0>)
     7b0:	47b8      	blx	r7
     7b2:	e011      	b.n	7d8 <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     7b4:	6a2b      	ldr	r3, [r5, #32]
     7b6:	469b      	mov	fp, r3
     7b8:	b2c0      	uxtb	r0, r0
     7ba:	4b34      	ldr	r3, [pc, #208]	; (88c <_usart_set_config+0x1c8>)
     7bc:	4798      	blx	r3
     7be:	0001      	movs	r1, r0
				status_code =
     7c0:	4653      	mov	r3, sl
     7c2:	9300      	str	r3, [sp, #0]
     7c4:	464b      	mov	r3, r9
     7c6:	220e      	movs	r2, #14
     7c8:	a802      	add	r0, sp, #8
     7ca:	4684      	mov	ip, r0
     7cc:	4462      	add	r2, ip
     7ce:	4658      	mov	r0, fp
     7d0:	4f30      	ldr	r7, [pc, #192]	; (894 <_usart_set_config+0x1d0>)
     7d2:	47b8      	blx	r7
     7d4:	e000      	b.n	7d8 <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
     7d6:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     7d8:	2800      	cmp	r0, #0
     7da:	d146      	bne.n	86a <_usart_set_config+0x1a6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     7dc:	7e6b      	ldrb	r3, [r5, #25]
     7de:	2b00      	cmp	r3, #0
     7e0:	d001      	beq.n	7e6 <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     7e2:	7eab      	ldrb	r3, [r5, #26]
     7e4:	73b3      	strb	r3, [r6, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7e6:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     7e8:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     7ea:	2b00      	cmp	r3, #0
     7ec:	d1fb      	bne.n	7e6 <_usart_set_config+0x122>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     7ee:	330e      	adds	r3, #14
     7f0:	aa02      	add	r2, sp, #8
     7f2:	4694      	mov	ip, r2
     7f4:	4463      	add	r3, ip
     7f6:	881b      	ldrh	r3, [r3, #0]
     7f8:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     7fa:	4643      	mov	r3, r8
     7fc:	9f03      	ldr	r7, [sp, #12]
     7fe:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     800:	2327      	movs	r3, #39	; 0x27
     802:	5ceb      	ldrb	r3, [r5, r3]
     804:	2b00      	cmp	r3, #0
     806:	d101      	bne.n	80c <_usart_set_config+0x148>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     808:	3304      	adds	r3, #4
     80a:	431f      	orrs	r7, r3
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     80c:	7e6a      	ldrb	r2, [r5, #25]
     80e:	0292      	lsls	r2, r2, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     810:	7f2b      	ldrb	r3, [r5, #28]
     812:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     814:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     816:	7f6b      	ldrb	r3, [r5, #29]
     818:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     81a:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     81c:	2324      	movs	r3, #36	; 0x24
     81e:	5ceb      	ldrb	r3, [r5, r3]
     820:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     822:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     824:	2325      	movs	r3, #37	; 0x25
     826:	5ceb      	ldrb	r3, [r5, r3]
     828:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     82a:	431a      	orrs	r2, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     82c:	7aab      	ldrb	r3, [r5, #10]
     82e:	431a      	orrs	r2, r3
	ctrlb |= (uint32_t)config->character_size;
     830:	7aeb      	ldrb	r3, [r5, #11]
     832:	431a      	orrs	r2, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     834:	892b      	ldrh	r3, [r5, #8]
     836:	2bff      	cmp	r3, #255	; 0xff
     838:	d01e      	beq.n	878 <_usart_set_config+0x1b4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     83a:	2180      	movs	r1, #128	; 0x80
     83c:	0449      	lsls	r1, r1, #17
     83e:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
     840:	431a      	orrs	r2, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     842:	232c      	movs	r3, #44	; 0x2c
     844:	5ceb      	ldrb	r3, [r5, r3]
     846:	2b00      	cmp	r3, #0
     848:	d103      	bne.n	852 <_usart_set_config+0x18e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     84a:	4b13      	ldr	r3, [pc, #76]	; (898 <_usart_set_config+0x1d4>)
     84c:	789b      	ldrb	r3, [r3, #2]
     84e:	079b      	lsls	r3, r3, #30
     850:	d501      	bpl.n	856 <_usart_set_config+0x192>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     852:	2380      	movs	r3, #128	; 0x80
     854:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     856:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     858:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     85a:	2b00      	cmp	r3, #0
     85c:	d1fb      	bne.n	856 <_usart_set_config+0x192>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     85e:	6072      	str	r2, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     860:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     862:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     864:	2b00      	cmp	r3, #0
     866:	d1fb      	bne.n	860 <_usart_set_config+0x19c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     868:	6037      	str	r7, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
     86a:	b007      	add	sp, #28
     86c:	bc3c      	pop	{r2, r3, r4, r5}
     86e:	4690      	mov	r8, r2
     870:	4699      	mov	r9, r3
     872:	46a2      	mov	sl, r4
     874:	46ab      	mov	fp, r5
     876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
     878:	7eeb      	ldrb	r3, [r5, #27]
     87a:	2b00      	cmp	r3, #0
     87c:	d0e1      	beq.n	842 <_usart_set_config+0x17e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     87e:	2380      	movs	r3, #128	; 0x80
     880:	04db      	lsls	r3, r3, #19
     882:	431f      	orrs	r7, r3
     884:	e7dd      	b.n	842 <_usart_set_config+0x17e>
     886:	46c0      	nop			; (mov r8, r8)
     888:	00000691 	.word	0x00000691
     88c:	00001261 	.word	0x00001261
     890:	00000407 	.word	0x00000407
     894:	00000431 	.word	0x00000431
     898:	41002000 	.word	0x41002000

0000089c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     89c:	b5f0      	push	{r4, r5, r6, r7, lr}
     89e:	b089      	sub	sp, #36	; 0x24
     8a0:	0006      	movs	r6, r0
     8a2:	000c      	movs	r4, r1
     8a4:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     8a6:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8a8:	0008      	movs	r0, r1
     8aa:	4b42      	ldr	r3, [pc, #264]	; (9b4 <usart_init+0x118>)
     8ac:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     8ae:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8b0:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     8b2:	6823      	ldr	r3, [r4, #0]
     8b4:	07db      	lsls	r3, r3, #31
     8b6:	d503      	bpl.n	8c0 <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     8b8:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     8ba:	0028      	movs	r0, r5
     8bc:	b009      	add	sp, #36	; 0x24
     8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     8c0:	6823      	ldr	r3, [r4, #0]
     8c2:	079b      	lsls	r3, r3, #30
     8c4:	d501      	bpl.n	8ca <usart_init+0x2e>
		return STATUS_ERR_DENIED;
     8c6:	251c      	movs	r5, #28
     8c8:	e7f7      	b.n	8ba <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     8ca:	2301      	movs	r3, #1
     8cc:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     8ce:	4a3a      	ldr	r2, [pc, #232]	; (9b8 <usart_init+0x11c>)
     8d0:	6a11      	ldr	r1, [r2, #32]
     8d2:	430b      	orrs	r3, r1
     8d4:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     8d6:	252d      	movs	r5, #45	; 0x2d
     8d8:	5d7b      	ldrb	r3, [r7, r5]
     8da:	a907      	add	r1, sp, #28
     8dc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     8de:	b2c3      	uxtb	r3, r0
     8e0:	9301      	str	r3, [sp, #4]
     8e2:	0018      	movs	r0, r3
     8e4:	4b35      	ldr	r3, [pc, #212]	; (9bc <usart_init+0x120>)
     8e6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     8e8:	9801      	ldr	r0, [sp, #4]
     8ea:	4b35      	ldr	r3, [pc, #212]	; (9c0 <usart_init+0x124>)
     8ec:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8ee:	5d78      	ldrb	r0, [r7, r5]
     8f0:	2100      	movs	r1, #0
     8f2:	4b34      	ldr	r3, [pc, #208]	; (9c4 <usart_init+0x128>)
     8f4:	4798      	blx	r3
	module->character_size = config->character_size;
     8f6:	7afb      	ldrb	r3, [r7, #11]
     8f8:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
     8fa:	2324      	movs	r3, #36	; 0x24
     8fc:	5cfb      	ldrb	r3, [r7, r3]
     8fe:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     900:	2325      	movs	r3, #37	; 0x25
     902:	5cfb      	ldrb	r3, [r7, r3]
     904:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     906:	7efb      	ldrb	r3, [r7, #27]
     908:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     90a:	7f3b      	ldrb	r3, [r7, #28]
     90c:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
     90e:	0039      	movs	r1, r7
     910:	0030      	movs	r0, r6
     912:	4b2d      	ldr	r3, [pc, #180]	; (9c8 <usart_init+0x12c>)
     914:	4798      	blx	r3
     916:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
     918:	d1cf      	bne.n	8ba <usart_init+0x1e>
     91a:	ab06      	add	r3, sp, #24
     91c:	2280      	movs	r2, #128	; 0x80
     91e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     920:	2200      	movs	r2, #0
     922:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     924:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     926:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     92a:	9302      	str	r3, [sp, #8]
     92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     92e:	9303      	str	r3, [sp, #12]
     930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     932:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
     934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     936:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
     938:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
     93a:	2700      	movs	r7, #0
     93c:	e006      	b.n	94c <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     93e:	0039      	movs	r1, r7
     940:	0020      	movs	r0, r4
     942:	4b22      	ldr	r3, [pc, #136]	; (9cc <usart_init+0x130>)
     944:	4798      	blx	r3
     946:	e008      	b.n	95a <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
     948:	3701      	adds	r7, #1
     94a:	b2ff      	uxtb	r7, r7
     94c:	2f03      	cmp	r7, #3
     94e:	d80d      	bhi.n	96c <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     950:	00bb      	lsls	r3, r7, #2
     952:	aa02      	add	r2, sp, #8
     954:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     956:	2800      	cmp	r0, #0
     958:	d0f1      	beq.n	93e <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
     95a:	1c43      	adds	r3, r0, #1
     95c:	d0f4      	beq.n	948 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     95e:	a906      	add	r1, sp, #24
     960:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     962:	0c00      	lsrs	r0, r0, #16
     964:	b2c0      	uxtb	r0, r0
     966:	4b1a      	ldr	r3, [pc, #104]	; (9d0 <usart_init+0x134>)
     968:	4798      	blx	r3
     96a:	e7ed      	b.n	948 <usart_init+0xac>
     96c:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     96e:	2a05      	cmp	r2, #5
     970:	d806      	bhi.n	980 <usart_init+0xe4>
		module->callback[i]            = NULL;
     972:	1c93      	adds	r3, r2, #2
     974:	009b      	lsls	r3, r3, #2
     976:	18f3      	adds	r3, r6, r3
     978:	2100      	movs	r1, #0
     97a:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     97c:	3201      	adds	r2, #1
     97e:	e7f6      	b.n	96e <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
     980:	2200      	movs	r2, #0
     982:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     984:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     986:	2300      	movs	r3, #0
     988:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     98a:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     98c:	3230      	adds	r2, #48	; 0x30
     98e:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
     990:	3201      	adds	r2, #1
     992:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
     994:	3201      	adds	r2, #1
     996:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
     998:	3201      	adds	r2, #1
     99a:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     99c:	6830      	ldr	r0, [r6, #0]
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <usart_init+0x118>)
     9a0:	4798      	blx	r3
     9a2:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     9a4:	490b      	ldr	r1, [pc, #44]	; (9d4 <usart_init+0x138>)
     9a6:	4b0c      	ldr	r3, [pc, #48]	; (9d8 <usart_init+0x13c>)
     9a8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     9aa:	00a4      	lsls	r4, r4, #2
     9ac:	4b0b      	ldr	r3, [pc, #44]	; (9dc <usart_init+0x140>)
     9ae:	50e6      	str	r6, [r4, r3]
	return status_code;
     9b0:	e783      	b.n	8ba <usart_init+0x1e>
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	00000691 	.word	0x00000691
     9b8:	40000400 	.word	0x40000400
     9bc:	00001245 	.word	0x00001245
     9c0:	000011bd 	.word	0x000011bd
     9c4:	000004cd 	.word	0x000004cd
     9c8:	000006c5 	.word	0x000006c5
     9cc:	00000519 	.word	0x00000519
     9d0:	00001329 	.word	0x00001329
     9d4:	00000ac9 	.word	0x00000ac9
     9d8:	00000c6d 	.word	0x00000c6d
     9dc:	200000a0 	.word	0x200000a0

000009e0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9e2:	0006      	movs	r6, r0
     9e4:	000c      	movs	r4, r1
     9e6:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9e8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     9ea:	4b0a      	ldr	r3, [pc, #40]	; (a14 <_usart_write_buffer+0x34>)
     9ec:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     9ee:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     9f0:	b29b      	uxth	r3, r3
     9f2:	2b00      	cmp	r3, #0
     9f4:	d003      	beq.n	9fe <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
     9f6:	4b08      	ldr	r3, [pc, #32]	; (a18 <_usart_write_buffer+0x38>)
     9f8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     9fa:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     9fe:	85f5      	strh	r5, [r6, #46]	; 0x2e
     a00:	4b05      	ldr	r3, [pc, #20]	; (a18 <_usart_write_buffer+0x38>)
     a02:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     a04:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     a06:	2205      	movs	r2, #5
     a08:	2333      	movs	r3, #51	; 0x33
     a0a:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     a0c:	3b32      	subs	r3, #50	; 0x32
     a0e:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     a10:	2000      	movs	r0, #0
     a12:	e7f3      	b.n	9fc <_usart_write_buffer+0x1c>
     a14:	00000d35 	.word	0x00000d35
     a18:	00000d75 	.word	0x00000d75

00000a1c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a1e:	0004      	movs	r4, r0
     a20:	000d      	movs	r5, r1
     a22:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     a24:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     a26:	4b10      	ldr	r3, [pc, #64]	; (a68 <_usart_read_buffer+0x4c>)
     a28:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     a2a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     a2c:	b29b      	uxth	r3, r3
     a2e:	2b00      	cmp	r3, #0
     a30:	d003      	beq.n	a3a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     a32:	4b0e      	ldr	r3, [pc, #56]	; (a6c <_usart_read_buffer+0x50>)
     a34:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     a36:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     a3a:	85a6      	strh	r6, [r4, #44]	; 0x2c
     a3c:	4b0b      	ldr	r3, [pc, #44]	; (a6c <_usart_read_buffer+0x50>)
     a3e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     a40:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     a42:	2205      	movs	r2, #5
     a44:	2332      	movs	r3, #50	; 0x32
     a46:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     a48:	3b2e      	subs	r3, #46	; 0x2e
     a4a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     a4c:	7a23      	ldrb	r3, [r4, #8]
     a4e:	2b00      	cmp	r3, #0
     a50:	d001      	beq.n	a56 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     a52:	2320      	movs	r3, #32
     a54:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     a56:	7a63      	ldrb	r3, [r4, #9]
     a58:	2b00      	cmp	r3, #0
     a5a:	d003      	beq.n	a64 <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     a5c:	2308      	movs	r3, #8
     a5e:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     a60:	2000      	movs	r0, #0
     a62:	e7e9      	b.n	a38 <_usart_read_buffer+0x1c>
     a64:	2000      	movs	r0, #0
     a66:	e7e7      	b.n	a38 <_usart_read_buffer+0x1c>
     a68:	00000d35 	.word	0x00000d35
     a6c:	00000d75 	.word	0x00000d75

00000a70 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     a70:	1c93      	adds	r3, r2, #2
     a72:	009b      	lsls	r3, r3, #2
     a74:	18c3      	adds	r3, r0, r3
     a76:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     a78:	2301      	movs	r3, #1
     a7a:	4093      	lsls	r3, r2
     a7c:	001a      	movs	r2, r3
     a7e:	2130      	movs	r1, #48	; 0x30
     a80:	5c43      	ldrb	r3, [r0, r1]
     a82:	4313      	orrs	r3, r2
     a84:	5443      	strb	r3, [r0, r1]
}
     a86:	4770      	bx	lr

00000a88 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     a88:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
     a8a:	2a00      	cmp	r2, #0
     a8c:	d101      	bne.n	a92 <usart_write_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
     a8e:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     a90:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     a92:	79c3      	ldrb	r3, [r0, #7]
     a94:	2b00      	cmp	r3, #0
     a96:	d101      	bne.n	a9c <usart_write_buffer_job+0x14>
		return STATUS_ERR_DENIED;
     a98:	201c      	movs	r0, #28
     a9a:	e7f9      	b.n	a90 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     a9c:	4b01      	ldr	r3, [pc, #4]	; (aa4 <usart_write_buffer_job+0x1c>)
     a9e:	4798      	blx	r3
     aa0:	e7f6      	b.n	a90 <usart_write_buffer_job+0x8>
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	000009e1 	.word	0x000009e1

00000aa8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     aa8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     aaa:	2a00      	cmp	r2, #0
     aac:	d101      	bne.n	ab2 <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
     aae:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     ab0:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     ab2:	7983      	ldrb	r3, [r0, #6]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d101      	bne.n	abc <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
     ab8:	201c      	movs	r0, #28
     aba:	e7f9      	b.n	ab0 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     abc:	4b01      	ldr	r3, [pc, #4]	; (ac4 <usart_read_buffer_job+0x1c>)
     abe:	4798      	blx	r3
     ac0:	e7f6      	b.n	ab0 <usart_read_buffer_job+0x8>
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	00000a1d 	.word	0x00000a1d

00000ac8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aca:	46c6      	mov	lr, r8
     acc:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     ace:	0080      	lsls	r0, r0, #2
     ad0:	4b64      	ldr	r3, [pc, #400]	; (c64 <_usart_interrupt_handler+0x19c>)
     ad2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     ad4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     ad6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     ad8:	2b00      	cmp	r3, #0
     ada:	d1fc      	bne.n	ad6 <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     adc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     ade:	7da6      	ldrb	r6, [r4, #22]
     ae0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     ae2:	2330      	movs	r3, #48	; 0x30
     ae4:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
     ae6:	2231      	movs	r2, #49	; 0x31
     ae8:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
     aea:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     aec:	07f3      	lsls	r3, r6, #31
     aee:	d525      	bpl.n	b3c <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
     af0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     af2:	b29b      	uxth	r3, r3
     af4:	2b00      	cmp	r3, #0
     af6:	d01f      	beq.n	b38 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     af8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     afa:	780a      	ldrb	r2, [r1, #0]
     afc:	b2d2      	uxtb	r2, r2
     afe:	b293      	uxth	r3, r2
     b00:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     b02:	1c48      	adds	r0, r1, #1
     b04:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b06:	796b      	ldrb	r3, [r5, #5]
     b08:	2b01      	cmp	r3, #1
     b0a:	d00e      	beq.n	b2a <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     b0c:	4643      	mov	r3, r8
     b0e:	05db      	lsls	r3, r3, #23
     b10:	0ddb      	lsrs	r3, r3, #23
     b12:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     b14:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b16:	3b01      	subs	r3, #1
     b18:	b29b      	uxth	r3, r3
     b1a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     b1c:	2b00      	cmp	r3, #0
     b1e:	d10d      	bne.n	b3c <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b20:	3301      	adds	r3, #1
     b22:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     b24:	3301      	adds	r3, #1
     b26:	75a3      	strb	r3, [r4, #22]
     b28:	e008      	b.n	b3c <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b2a:	784b      	ldrb	r3, [r1, #1]
     b2c:	021b      	lsls	r3, r3, #8
     b2e:	4313      	orrs	r3, r2
     b30:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
     b32:	1c88      	adds	r0, r1, #2
     b34:	62a8      	str	r0, [r5, #40]	; 0x28
     b36:	e7e9      	b.n	b0c <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b38:	2301      	movs	r3, #1
     b3a:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b3c:	07b3      	lsls	r3, r6, #30
     b3e:	d506      	bpl.n	b4e <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b40:	2302      	movs	r3, #2
     b42:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     b44:	2200      	movs	r2, #0
     b46:	3331      	adds	r3, #49	; 0x31
     b48:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b4a:	07fb      	lsls	r3, r7, #31
     b4c:	d41c      	bmi.n	b88 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b4e:	0773      	lsls	r3, r6, #29
     b50:	d564      	bpl.n	c1c <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
     b52:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b54:	b29b      	uxth	r3, r3
     b56:	2b00      	cmp	r3, #0
     b58:	d05e      	beq.n	c18 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b5a:	8b62      	ldrh	r2, [r4, #26]
     b5c:	b2d2      	uxtb	r2, r2
     b5e:	233f      	movs	r3, #63	; 0x3f
     b60:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     b62:	0711      	lsls	r1, r2, #28
     b64:	d501      	bpl.n	b6a <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     b66:	2337      	movs	r3, #55	; 0x37
     b68:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     b6a:	2b00      	cmp	r3, #0
     b6c:	d031      	beq.n	bd2 <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     b6e:	079a      	lsls	r2, r3, #30
     b70:	d50e      	bpl.n	b90 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     b72:	221a      	movs	r2, #26
     b74:	2332      	movs	r3, #50	; 0x32
     b76:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b78:	3b30      	subs	r3, #48	; 0x30
     b7a:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     b7c:	077b      	lsls	r3, r7, #29
     b7e:	d54d      	bpl.n	c1c <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     b80:	0028      	movs	r0, r5
     b82:	696b      	ldr	r3, [r5, #20]
     b84:	4798      	blx	r3
     b86:	e049      	b.n	c1c <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b88:	0028      	movs	r0, r5
     b8a:	68eb      	ldr	r3, [r5, #12]
     b8c:	4798      	blx	r3
     b8e:	e7de      	b.n	b4e <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b90:	075a      	lsls	r2, r3, #29
     b92:	d505      	bpl.n	ba0 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     b94:	221e      	movs	r2, #30
     b96:	2332      	movs	r3, #50	; 0x32
     b98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b9a:	3b2e      	subs	r3, #46	; 0x2e
     b9c:	8363      	strh	r3, [r4, #26]
     b9e:	e7ed      	b.n	b7c <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ba0:	07da      	lsls	r2, r3, #31
     ba2:	d505      	bpl.n	bb0 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     ba4:	2213      	movs	r2, #19
     ba6:	2332      	movs	r3, #50	; 0x32
     ba8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     baa:	3b31      	subs	r3, #49	; 0x31
     bac:	8363      	strh	r3, [r4, #26]
     bae:	e7e5      	b.n	b7c <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     bb0:	06da      	lsls	r2, r3, #27
     bb2:	d505      	bpl.n	bc0 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     bb4:	2242      	movs	r2, #66	; 0x42
     bb6:	2332      	movs	r3, #50	; 0x32
     bb8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     bba:	3b22      	subs	r3, #34	; 0x22
     bbc:	8363      	strh	r3, [r4, #26]
     bbe:	e7dd      	b.n	b7c <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     bc0:	2220      	movs	r2, #32
     bc2:	421a      	tst	r2, r3
     bc4:	d0da      	beq.n	b7c <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     bc6:	3221      	adds	r2, #33	; 0x21
     bc8:	2332      	movs	r3, #50	; 0x32
     bca:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     bcc:	3b12      	subs	r3, #18
     bce:	8363      	strh	r3, [r4, #26]
     bd0:	e7d4      	b.n	b7c <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     bd2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     bd4:	05db      	lsls	r3, r3, #23
     bd6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     bd8:	b2da      	uxtb	r2, r3
     bda:	6a69      	ldr	r1, [r5, #36]	; 0x24
     bdc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     bde:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     be0:	1c51      	adds	r1, r2, #1
     be2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     be4:	7969      	ldrb	r1, [r5, #5]
     be6:	2901      	cmp	r1, #1
     be8:	d010      	beq.n	c0c <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     bea:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     bec:	3b01      	subs	r3, #1
     bee:	b29b      	uxth	r3, r3
     bf0:	85ab      	strh	r3, [r5, #44]	; 0x2c
     bf2:	2b00      	cmp	r3, #0
     bf4:	d112      	bne.n	c1c <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     bf6:	3304      	adds	r3, #4
     bf8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     bfa:	2200      	movs	r2, #0
     bfc:	332e      	adds	r3, #46	; 0x2e
     bfe:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     c00:	07bb      	lsls	r3, r7, #30
     c02:	d50b      	bpl.n	c1c <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     c04:	0028      	movs	r0, r5
     c06:	692b      	ldr	r3, [r5, #16]
     c08:	4798      	blx	r3
     c0a:	e007      	b.n	c1c <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     c0c:	0a1b      	lsrs	r3, r3, #8
     c0e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     c10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     c12:	3301      	adds	r3, #1
     c14:	626b      	str	r3, [r5, #36]	; 0x24
     c16:	e7e8      	b.n	bea <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c18:	2304      	movs	r3, #4
     c1a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     c1c:	06f3      	lsls	r3, r6, #27
     c1e:	d504      	bpl.n	c2a <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     c20:	2310      	movs	r3, #16
     c22:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     c24:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     c26:	06fb      	lsls	r3, r7, #27
     c28:	d410      	bmi.n	c4c <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     c2a:	06b3      	lsls	r3, r6, #26
     c2c:	d504      	bpl.n	c38 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     c2e:	2320      	movs	r3, #32
     c30:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     c32:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     c34:	073b      	lsls	r3, r7, #28
     c36:	d40d      	bmi.n	c54 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     c38:	0733      	lsls	r3, r6, #28
     c3a:	d504      	bpl.n	c46 <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     c3c:	2308      	movs	r3, #8
     c3e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     c40:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     c42:	06bb      	lsls	r3, r7, #26
     c44:	d40a      	bmi.n	c5c <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     c46:	bc04      	pop	{r2}
     c48:	4690      	mov	r8, r2
     c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     c4c:	0028      	movs	r0, r5
     c4e:	69eb      	ldr	r3, [r5, #28]
     c50:	4798      	blx	r3
     c52:	e7ea      	b.n	c2a <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     c54:	0028      	movs	r0, r5
     c56:	69ab      	ldr	r3, [r5, #24]
     c58:	4798      	blx	r3
     c5a:	e7ed      	b.n	c38 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     c5c:	6a2b      	ldr	r3, [r5, #32]
     c5e:	0028      	movs	r0, r5
     c60:	4798      	blx	r3
}
     c62:	e7f0      	b.n	c46 <_usart_interrupt_handler+0x17e>
     c64:	200000a0 	.word	0x200000a0

00000c68 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c68:	4770      	bx	lr
	...

00000c6c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c6c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c6e:	4b0b      	ldr	r3, [pc, #44]	; (c9c <_sercom_set_handler+0x30>)
     c70:	781b      	ldrb	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d008      	beq.n	c88 <_sercom_set_handler+0x1c>
     c76:	e00c      	b.n	c92 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c78:	009a      	lsls	r2, r3, #2
     c7a:	4d09      	ldr	r5, [pc, #36]	; (ca0 <_sercom_set_handler+0x34>)
     c7c:	4c09      	ldr	r4, [pc, #36]	; (ca4 <_sercom_set_handler+0x38>)
     c7e:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
     c80:	2500      	movs	r5, #0
     c82:	4c09      	ldr	r4, [pc, #36]	; (ca8 <_sercom_set_handler+0x3c>)
     c84:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c86:	3301      	adds	r3, #1
     c88:	2b05      	cmp	r3, #5
     c8a:	d9f5      	bls.n	c78 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
     c8c:	2201      	movs	r2, #1
     c8e:	4b03      	ldr	r3, [pc, #12]	; (c9c <_sercom_set_handler+0x30>)
     c90:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c92:	0080      	lsls	r0, r0, #2
     c94:	4b03      	ldr	r3, [pc, #12]	; (ca4 <_sercom_set_handler+0x38>)
     c96:	50c1      	str	r1, [r0, r3]
}
     c98:	bd30      	pop	{r4, r5, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	20000066 	.word	0x20000066
     ca0:	00000c69 	.word	0x00000c69
     ca4:	20000068 	.word	0x20000068
     ca8:	200000a0 	.word	0x200000a0

00000cac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     cac:	b500      	push	{lr}
     cae:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     cb0:	4b05      	ldr	r3, [pc, #20]	; (cc8 <_sercom_get_interrupt_vector+0x1c>)
     cb2:	681a      	ldr	r2, [r3, #0]
     cb4:	9200      	str	r2, [sp, #0]
     cb6:	889b      	ldrh	r3, [r3, #4]
     cb8:	466a      	mov	r2, sp
     cba:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     cbc:	4b03      	ldr	r3, [pc, #12]	; (ccc <_sercom_get_interrupt_vector+0x20>)
     cbe:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     cc0:	466b      	mov	r3, sp
     cc2:	5618      	ldrsb	r0, [r3, r0]
}
     cc4:	b003      	add	sp, #12
     cc6:	bd00      	pop	{pc}
     cc8:	000017c0 	.word	0x000017c0
     ccc:	00000691 	.word	0x00000691

00000cd0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     cd0:	b510      	push	{r4, lr}
     cd2:	4b02      	ldr	r3, [pc, #8]	; (cdc <SERCOM0_Handler+0xc>)
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	2000      	movs	r0, #0
     cd8:	4798      	blx	r3
     cda:	bd10      	pop	{r4, pc}
     cdc:	20000068 	.word	0x20000068

00000ce0 <SERCOM1_Handler>:
     ce0:	b510      	push	{r4, lr}
     ce2:	4b02      	ldr	r3, [pc, #8]	; (cec <SERCOM1_Handler+0xc>)
     ce4:	685b      	ldr	r3, [r3, #4]
     ce6:	2001      	movs	r0, #1
     ce8:	4798      	blx	r3
     cea:	bd10      	pop	{r4, pc}
     cec:	20000068 	.word	0x20000068

00000cf0 <SERCOM2_Handler>:
     cf0:	b510      	push	{r4, lr}
     cf2:	4b02      	ldr	r3, [pc, #8]	; (cfc <SERCOM2_Handler+0xc>)
     cf4:	689b      	ldr	r3, [r3, #8]
     cf6:	2002      	movs	r0, #2
     cf8:	4798      	blx	r3
     cfa:	bd10      	pop	{r4, pc}
     cfc:	20000068 	.word	0x20000068

00000d00 <SERCOM3_Handler>:
     d00:	b510      	push	{r4, lr}
     d02:	4b02      	ldr	r3, [pc, #8]	; (d0c <SERCOM3_Handler+0xc>)
     d04:	68db      	ldr	r3, [r3, #12]
     d06:	2003      	movs	r0, #3
     d08:	4798      	blx	r3
     d0a:	bd10      	pop	{r4, pc}
     d0c:	20000068 	.word	0x20000068

00000d10 <SERCOM4_Handler>:
     d10:	b510      	push	{r4, lr}
     d12:	4b02      	ldr	r3, [pc, #8]	; (d1c <SERCOM4_Handler+0xc>)
     d14:	691b      	ldr	r3, [r3, #16]
     d16:	2004      	movs	r0, #4
     d18:	4798      	blx	r3
     d1a:	bd10      	pop	{r4, pc}
     d1c:	20000068 	.word	0x20000068

00000d20 <SERCOM5_Handler>:
     d20:	b510      	push	{r4, lr}
     d22:	4b02      	ldr	r3, [pc, #8]	; (d2c <SERCOM5_Handler+0xc>)
     d24:	695b      	ldr	r3, [r3, #20]
     d26:	2005      	movs	r0, #5
     d28:	4798      	blx	r3
     d2a:	bd10      	pop	{r4, pc}
     d2c:	20000068 	.word	0x20000068

00000d30 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     d30:	4770      	bx	lr
	...

00000d34 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     d34:	4b0c      	ldr	r3, [pc, #48]	; (d68 <cpu_irq_enter_critical+0x34>)
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	2b00      	cmp	r3, #0
     d3a:	d106      	bne.n	d4a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d3c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     d40:	2b00      	cmp	r3, #0
     d42:	d007      	beq.n	d54 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     d44:	2200      	movs	r2, #0
     d46:	4b09      	ldr	r3, [pc, #36]	; (d6c <cpu_irq_enter_critical+0x38>)
     d48:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     d4a:	4a07      	ldr	r2, [pc, #28]	; (d68 <cpu_irq_enter_critical+0x34>)
     d4c:	6813      	ldr	r3, [r2, #0]
     d4e:	3301      	adds	r3, #1
     d50:	6013      	str	r3, [r2, #0]
}
     d52:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     d54:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d56:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     d5a:	2200      	movs	r2, #0
     d5c:	4b04      	ldr	r3, [pc, #16]	; (d70 <cpu_irq_enter_critical+0x3c>)
     d5e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     d60:	3201      	adds	r2, #1
     d62:	4b02      	ldr	r3, [pc, #8]	; (d6c <cpu_irq_enter_critical+0x38>)
     d64:	701a      	strb	r2, [r3, #0]
     d66:	e7f0      	b.n	d4a <cpu_irq_enter_critical+0x16>
     d68:	20000080 	.word	0x20000080
     d6c:	20000084 	.word	0x20000084
     d70:	20000008 	.word	0x20000008

00000d74 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     d74:	4b08      	ldr	r3, [pc, #32]	; (d98 <cpu_irq_leave_critical+0x24>)
     d76:	681a      	ldr	r2, [r3, #0]
     d78:	3a01      	subs	r2, #1
     d7a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	2b00      	cmp	r3, #0
     d80:	d109      	bne.n	d96 <cpu_irq_leave_critical+0x22>
     d82:	4b06      	ldr	r3, [pc, #24]	; (d9c <cpu_irq_leave_critical+0x28>)
     d84:	781b      	ldrb	r3, [r3, #0]
     d86:	2b00      	cmp	r3, #0
     d88:	d005      	beq.n	d96 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     d8a:	2201      	movs	r2, #1
     d8c:	4b04      	ldr	r3, [pc, #16]	; (da0 <cpu_irq_leave_critical+0x2c>)
     d8e:	701a      	strb	r2, [r3, #0]
     d90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     d94:	b662      	cpsie	i
	}
}
     d96:	4770      	bx	lr
     d98:	20000080 	.word	0x20000080
     d9c:	20000084 	.word	0x20000084
     da0:	20000008 	.word	0x20000008

00000da4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
     da4:	b510      	push	{r4, lr}
     da6:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     da8:	2201      	movs	r2, #1
     daa:	ab01      	add	r3, sp, #4
     dac:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     dae:	2400      	movs	r4, #0
     db0:	e004      	b.n	dbc <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     db2:	b2e0      	uxtb	r0, r4
     db4:	a901      	add	r1, sp, #4
     db6:	4b03      	ldr	r3, [pc, #12]	; (dc4 <_switch_peripheral_gclk+0x20>)
     db8:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     dba:	3401      	adds	r4, #1
     dbc:	2c24      	cmp	r4, #36	; 0x24
     dbe:	d9f8      	bls.n	db2 <_switch_peripheral_gclk+0xe>
	}
}
     dc0:	b002      	add	sp, #8
     dc2:	bd10      	pop	{r4, pc}
     dc4:	00001245 	.word	0x00001245

00000dc8 <system_clock_source_get_hz>:
{
     dc8:	b510      	push	{r4, lr}
	switch (clock_source) {
     dca:	2808      	cmp	r0, #8
     dcc:	d832      	bhi.n	e34 <system_clock_source_get_hz+0x6c>
     dce:	0080      	lsls	r0, r0, #2
     dd0:	4b1b      	ldr	r3, [pc, #108]	; (e40 <system_clock_source_get_hz+0x78>)
     dd2:	581b      	ldr	r3, [r3, r0]
     dd4:	469f      	mov	pc, r3
		return 32768UL;
     dd6:	2080      	movs	r0, #128	; 0x80
     dd8:	0200      	lsls	r0, r0, #8
}
     dda:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
     ddc:	4b19      	ldr	r3, [pc, #100]	; (e44 <system_clock_source_get_hz+0x7c>)
     dde:	6918      	ldr	r0, [r3, #16]
     de0:	e7fb      	b.n	dda <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     de2:	4b19      	ldr	r3, [pc, #100]	; (e48 <system_clock_source_get_hz+0x80>)
     de4:	6a1b      	ldr	r3, [r3, #32]
     de6:	059b      	lsls	r3, r3, #22
     de8:	0f9b      	lsrs	r3, r3, #30
     dea:	4818      	ldr	r0, [pc, #96]	; (e4c <system_clock_source_get_hz+0x84>)
     dec:	40d8      	lsrs	r0, r3
     dee:	e7f4      	b.n	dda <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
     df0:	4b14      	ldr	r3, [pc, #80]	; (e44 <system_clock_source_get_hz+0x7c>)
     df2:	6958      	ldr	r0, [r3, #20]
     df4:	e7f1      	b.n	dda <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     df6:	4b13      	ldr	r3, [pc, #76]	; (e44 <system_clock_source_get_hz+0x7c>)
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	079b      	lsls	r3, r3, #30
     dfc:	d51c      	bpl.n	e38 <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dfe:	4b12      	ldr	r3, [pc, #72]	; (e48 <system_clock_source_get_hz+0x80>)
     e00:	68db      	ldr	r3, [r3, #12]
     e02:	06db      	lsls	r3, r3, #27
     e04:	d5fb      	bpl.n	dfe <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     e06:	4b0f      	ldr	r3, [pc, #60]	; (e44 <system_clock_source_get_hz+0x7c>)
     e08:	681b      	ldr	r3, [r3, #0]
     e0a:	075b      	lsls	r3, r3, #29
     e0c:	d401      	bmi.n	e12 <system_clock_source_get_hz+0x4a>
		return 48000000UL;
     e0e:	4810      	ldr	r0, [pc, #64]	; (e50 <system_clock_source_get_hz+0x88>)
     e10:	e7e3      	b.n	dda <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e12:	2000      	movs	r0, #0
     e14:	4b0f      	ldr	r3, [pc, #60]	; (e54 <system_clock_source_get_hz+0x8c>)
     e16:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     e18:	4b0a      	ldr	r3, [pc, #40]	; (e44 <system_clock_source_get_hz+0x7c>)
     e1a:	689b      	ldr	r3, [r3, #8]
     e1c:	041b      	lsls	r3, r3, #16
     e1e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e20:	4358      	muls	r0, r3
     e22:	e7da      	b.n	dda <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e24:	2350      	movs	r3, #80	; 0x50
     e26:	4a08      	ldr	r2, [pc, #32]	; (e48 <system_clock_source_get_hz+0x80>)
     e28:	5cd3      	ldrb	r3, [r2, r3]
     e2a:	075b      	lsls	r3, r3, #29
     e2c:	d506      	bpl.n	e3c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     e2e:	4b05      	ldr	r3, [pc, #20]	; (e44 <system_clock_source_get_hz+0x7c>)
     e30:	68d8      	ldr	r0, [r3, #12]
     e32:	e7d2      	b.n	dda <system_clock_source_get_hz+0x12>
		return 0;
     e34:	2000      	movs	r0, #0
     e36:	e7d0      	b.n	dda <system_clock_source_get_hz+0x12>
			return 0;
     e38:	2000      	movs	r0, #0
     e3a:	e7ce      	b.n	dda <system_clock_source_get_hz+0x12>
			return 0;
     e3c:	2000      	movs	r0, #0
     e3e:	e7cc      	b.n	dda <system_clock_source_get_hz+0x12>
     e40:	000017c8 	.word	0x000017c8
     e44:	20000088 	.word	0x20000088
     e48:	40000800 	.word	0x40000800
     e4c:	007a1200 	.word	0x007a1200
     e50:	02dc6c00 	.word	0x02dc6c00
     e54:	00001261 	.word	0x00001261

00000e58 <system_clock_source_osc8m_set_config>:
{
     e58:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e5a:	4d0c      	ldr	r5, [pc, #48]	; (e8c <system_clock_source_osc8m_set_config+0x34>)
     e5c:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
     e5e:	7802      	ldrb	r2, [r0, #0]
     e60:	2103      	movs	r1, #3
     e62:	400a      	ands	r2, r1
     e64:	0212      	lsls	r2, r2, #8
     e66:	490a      	ldr	r1, [pc, #40]	; (e90 <system_clock_source_osc8m_set_config+0x38>)
     e68:	4031      	ands	r1, r6
     e6a:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
     e6c:	7882      	ldrb	r2, [r0, #2]
     e6e:	2401      	movs	r4, #1
     e70:	4022      	ands	r2, r4
     e72:	01d2      	lsls	r2, r2, #7
     e74:	2380      	movs	r3, #128	; 0x80
     e76:	4399      	bics	r1, r3
     e78:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
     e7a:	7843      	ldrb	r3, [r0, #1]
     e7c:	4023      	ands	r3, r4
     e7e:	019b      	lsls	r3, r3, #6
     e80:	2140      	movs	r1, #64	; 0x40
     e82:	438a      	bics	r2, r1
     e84:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
     e86:	622b      	str	r3, [r5, #32]
}
     e88:	bd70      	pop	{r4, r5, r6, pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	40000800 	.word	0x40000800
     e90:	fffffcff 	.word	0xfffffcff

00000e94 <system_clock_source_enable>:
	switch (clock_source) {
     e94:	2808      	cmp	r0, #8
     e96:	d84a      	bhi.n	f2e <system_clock_source_enable+0x9a>
     e98:	0080      	lsls	r0, r0, #2
     e9a:	4b26      	ldr	r3, [pc, #152]	; (f34 <system_clock_source_enable+0xa0>)
     e9c:	581b      	ldr	r3, [r3, r0]
     e9e:	469f      	mov	pc, r3
		return STATUS_OK;
     ea0:	2000      	movs	r0, #0
}
     ea2:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     ea4:	4a24      	ldr	r2, [pc, #144]	; (f38 <system_clock_source_enable+0xa4>)
     ea6:	6a13      	ldr	r3, [r2, #32]
     ea8:	2102      	movs	r1, #2
     eaa:	430b      	orrs	r3, r1
     eac:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     eae:	2000      	movs	r0, #0
     eb0:	e7f7      	b.n	ea2 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     eb2:	4a21      	ldr	r2, [pc, #132]	; (f38 <system_clock_source_enable+0xa4>)
     eb4:	6993      	ldr	r3, [r2, #24]
     eb6:	2102      	movs	r1, #2
     eb8:	430b      	orrs	r3, r1
     eba:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
     ebc:	2000      	movs	r0, #0
		break;
     ebe:	e7f0      	b.n	ea2 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     ec0:	4a1d      	ldr	r2, [pc, #116]	; (f38 <system_clock_source_enable+0xa4>)
     ec2:	8a13      	ldrh	r3, [r2, #16]
     ec4:	2102      	movs	r1, #2
     ec6:	430b      	orrs	r3, r1
     ec8:	b29b      	uxth	r3, r3
     eca:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     ecc:	2000      	movs	r0, #0
		break;
     ece:	e7e8      	b.n	ea2 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     ed0:	4a19      	ldr	r2, [pc, #100]	; (f38 <system_clock_source_enable+0xa4>)
     ed2:	8a93      	ldrh	r3, [r2, #20]
     ed4:	2102      	movs	r1, #2
     ed6:	430b      	orrs	r3, r1
     ed8:	b29b      	uxth	r3, r3
     eda:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     edc:	2000      	movs	r0, #0
		break;
     ede:	e7e0      	b.n	ea2 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     ee0:	4916      	ldr	r1, [pc, #88]	; (f3c <system_clock_source_enable+0xa8>)
     ee2:	680b      	ldr	r3, [r1, #0]
     ee4:	2202      	movs	r2, #2
     ee6:	4313      	orrs	r3, r2
     ee8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     eea:	4b13      	ldr	r3, [pc, #76]	; (f38 <system_clock_source_enable+0xa4>)
     eec:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     eee:	4b12      	ldr	r3, [pc, #72]	; (f38 <system_clock_source_enable+0xa4>)
     ef0:	68db      	ldr	r3, [r3, #12]
     ef2:	06db      	lsls	r3, r3, #27
     ef4:	d5fb      	bpl.n	eee <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     ef6:	4a11      	ldr	r2, [pc, #68]	; (f3c <system_clock_source_enable+0xa8>)
     ef8:	6891      	ldr	r1, [r2, #8]
     efa:	4b0f      	ldr	r3, [pc, #60]	; (f38 <system_clock_source_enable+0xa4>)
     efc:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     efe:	6852      	ldr	r2, [r2, #4]
     f00:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     f02:	2200      	movs	r2, #0
     f04:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f06:	4b0c      	ldr	r3, [pc, #48]	; (f38 <system_clock_source_enable+0xa4>)
     f08:	68db      	ldr	r3, [r3, #12]
     f0a:	06db      	lsls	r3, r3, #27
     f0c:	d5fb      	bpl.n	f06 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     f0e:	4b0b      	ldr	r3, [pc, #44]	; (f3c <system_clock_source_enable+0xa8>)
     f10:	681b      	ldr	r3, [r3, #0]
     f12:	b29b      	uxth	r3, r3
     f14:	4a08      	ldr	r2, [pc, #32]	; (f38 <system_clock_source_enable+0xa4>)
     f16:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     f18:	2000      	movs	r0, #0
     f1a:	e7c2      	b.n	ea2 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     f1c:	4906      	ldr	r1, [pc, #24]	; (f38 <system_clock_source_enable+0xa4>)
     f1e:	2244      	movs	r2, #68	; 0x44
     f20:	5c8b      	ldrb	r3, [r1, r2]
     f22:	2002      	movs	r0, #2
     f24:	4303      	orrs	r3, r0
     f26:	b2db      	uxtb	r3, r3
     f28:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     f2a:	2000      	movs	r0, #0
		break;
     f2c:	e7b9      	b.n	ea2 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
     f2e:	2017      	movs	r0, #23
     f30:	e7b7      	b.n	ea2 <system_clock_source_enable+0xe>
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	000017ec 	.word	0x000017ec
     f38:	40000800 	.word	0x40000800
     f3c:	20000088 	.word	0x20000088

00000f40 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     f40:	b530      	push	{r4, r5, lr}
     f42:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f44:	22c2      	movs	r2, #194	; 0xc2
     f46:	00d2      	lsls	r2, r2, #3
     f48:	4b15      	ldr	r3, [pc, #84]	; (fa0 <system_clock_init+0x60>)
     f4a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     f4c:	4b15      	ldr	r3, [pc, #84]	; (fa4 <system_clock_init+0x64>)
     f4e:	6859      	ldr	r1, [r3, #4]
     f50:	221e      	movs	r2, #30
     f52:	4391      	bics	r1, r2
     f54:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
     f56:	4b14      	ldr	r3, [pc, #80]	; (fa8 <system_clock_init+0x68>)
     f58:	4798      	blx	r3
	config->run_in_standby  = false;
     f5a:	a803      	add	r0, sp, #12
     f5c:	2400      	movs	r4, #0
     f5e:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     f60:	2501      	movs	r5, #1
     f62:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     f64:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     f66:	4b11      	ldr	r3, [pc, #68]	; (fac <system_clock_init+0x6c>)
     f68:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     f6a:	2006      	movs	r0, #6
     f6c:	4b10      	ldr	r3, [pc, #64]	; (fb0 <system_clock_init+0x70>)
     f6e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     f70:	4b10      	ldr	r3, [pc, #64]	; (fb4 <system_clock_init+0x74>)
     f72:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     f74:	4b10      	ldr	r3, [pc, #64]	; (fb8 <system_clock_init+0x78>)
     f76:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     f78:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     f7a:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     f7c:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     f7e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     f80:	466b      	mov	r3, sp
     f82:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     f84:	2306      	movs	r3, #6
     f86:	466a      	mov	r2, sp
     f88:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     f8a:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     f8c:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f8e:	4669      	mov	r1, sp
     f90:	2000      	movs	r0, #0
     f92:	4b0a      	ldr	r3, [pc, #40]	; (fbc <system_clock_init+0x7c>)
     f94:	4798      	blx	r3
     f96:	2000      	movs	r0, #0
     f98:	4b09      	ldr	r3, [pc, #36]	; (fc0 <system_clock_init+0x80>)
     f9a:	4798      	blx	r3
#endif
}
     f9c:	b005      	add	sp, #20
     f9e:	bd30      	pop	{r4, r5, pc}
     fa0:	40000800 	.word	0x40000800
     fa4:	41004000 	.word	0x41004000
     fa8:	00000da5 	.word	0x00000da5
     fac:	00000e59 	.word	0x00000e59
     fb0:	00000e95 	.word	0x00000e95
     fb4:	00000fc5 	.word	0x00000fc5
     fb8:	40000400 	.word	0x40000400
     fbc:	00000fe9 	.word	0x00000fe9
     fc0:	000010b9 	.word	0x000010b9

00000fc4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     fc4:	4a06      	ldr	r2, [pc, #24]	; (fe0 <system_gclk_init+0x1c>)
     fc6:	6993      	ldr	r3, [r2, #24]
     fc8:	2108      	movs	r1, #8
     fca:	430b      	orrs	r3, r1
     fcc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     fce:	2201      	movs	r2, #1
     fd0:	4b04      	ldr	r3, [pc, #16]	; (fe4 <system_gclk_init+0x20>)
     fd2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     fd4:	4b03      	ldr	r3, [pc, #12]	; (fe4 <system_gclk_init+0x20>)
     fd6:	781b      	ldrb	r3, [r3, #0]
     fd8:	07db      	lsls	r3, r3, #31
     fda:	d4fb      	bmi.n	fd4 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     fdc:	4770      	bx	lr
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	40000400 	.word	0x40000400
     fe4:	40000c00 	.word	0x40000c00

00000fe8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fea:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     fec:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     fee:	780c      	ldrb	r4, [r1, #0]
     ff0:	0224      	lsls	r4, r4, #8
     ff2:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     ff4:	784b      	ldrb	r3, [r1, #1]
     ff6:	2b00      	cmp	r3, #0
     ff8:	d002      	beq.n	1000 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ffa:	2380      	movs	r3, #128	; 0x80
     ffc:	02db      	lsls	r3, r3, #11
     ffe:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1000:	7a4b      	ldrb	r3, [r1, #9]
    1002:	2b00      	cmp	r3, #0
    1004:	d002      	beq.n	100c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1006:	2380      	movs	r3, #128	; 0x80
    1008:	031b      	lsls	r3, r3, #12
    100a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    100c:	6848      	ldr	r0, [r1, #4]
    100e:	2801      	cmp	r0, #1
    1010:	d912      	bls.n	1038 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1012:	1e43      	subs	r3, r0, #1
    1014:	4203      	tst	r3, r0
    1016:	d03d      	beq.n	1094 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1018:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    101a:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    101c:	2380      	movs	r3, #128	; 0x80
    101e:	029b      	lsls	r3, r3, #10
    1020:	431c      	orrs	r4, r3
    1022:	e009      	b.n	1038 <system_gclk_gen_set_config+0x50>
				div2_count++;
    1024:	3201      	adds	r2, #1
						mask <<= 1) {
    1026:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1028:	4283      	cmp	r3, r0
    102a:	d3fb      	bcc.n	1024 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    102c:	0212      	lsls	r2, r2, #8
    102e:	4332      	orrs	r2, r6
    1030:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1032:	2380      	movs	r3, #128	; 0x80
    1034:	035b      	lsls	r3, r3, #13
    1036:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1038:	7a0b      	ldrb	r3, [r1, #8]
    103a:	2b00      	cmp	r3, #0
    103c:	d002      	beq.n	1044 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    103e:	2380      	movs	r3, #128	; 0x80
    1040:	039b      	lsls	r3, r3, #14
    1042:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1044:	4b18      	ldr	r3, [pc, #96]	; (10a8 <system_gclk_gen_set_config+0xc0>)
    1046:	785b      	ldrb	r3, [r3, #1]
    1048:	b25b      	sxtb	r3, r3
    104a:	2b00      	cmp	r3, #0
    104c:	db25      	blt.n	109a <system_gclk_gen_set_config+0xb2>
	return false;
    104e:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    1050:	2f00      	cmp	r7, #0
    1052:	d1f7      	bne.n	1044 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1054:	4b15      	ldr	r3, [pc, #84]	; (10ac <system_gclk_gen_set_config+0xc4>)
    1056:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1058:	4b15      	ldr	r3, [pc, #84]	; (10b0 <system_gclk_gen_set_config+0xc8>)
    105a:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    105c:	4b12      	ldr	r3, [pc, #72]	; (10a8 <system_gclk_gen_set_config+0xc0>)
    105e:	785b      	ldrb	r3, [r3, #1]
    1060:	b25b      	sxtb	r3, r3
    1062:	2b00      	cmp	r3, #0
    1064:	db1b      	blt.n	109e <system_gclk_gen_set_config+0xb6>
	return false;
    1066:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1068:	2a00      	cmp	r2, #0
    106a:	d1f7      	bne.n	105c <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    106c:	4b0e      	ldr	r3, [pc, #56]	; (10a8 <system_gclk_gen_set_config+0xc0>)
    106e:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1070:	4b0d      	ldr	r3, [pc, #52]	; (10a8 <system_gclk_gen_set_config+0xc0>)
    1072:	785b      	ldrb	r3, [r3, #1]
    1074:	b25b      	sxtb	r3, r3
    1076:	2b00      	cmp	r3, #0
    1078:	db13      	blt.n	10a2 <system_gclk_gen_set_config+0xba>
	return false;
    107a:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    107c:	2b00      	cmp	r3, #0
    107e:	d1f7      	bne.n	1070 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1080:	4a09      	ldr	r2, [pc, #36]	; (10a8 <system_gclk_gen_set_config+0xc0>)
    1082:	6853      	ldr	r3, [r2, #4]
    1084:	2180      	movs	r1, #128	; 0x80
    1086:	0249      	lsls	r1, r1, #9
    1088:	400b      	ands	r3, r1
    108a:	431c      	orrs	r4, r3
    108c:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    108e:	4b09      	ldr	r3, [pc, #36]	; (10b4 <system_gclk_gen_set_config+0xcc>)
    1090:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1094:	2302      	movs	r3, #2
    1096:	2200      	movs	r2, #0
    1098:	e7c6      	b.n	1028 <system_gclk_gen_set_config+0x40>
		return true;
    109a:	2701      	movs	r7, #1
    109c:	e7d8      	b.n	1050 <system_gclk_gen_set_config+0x68>
    109e:	2201      	movs	r2, #1
    10a0:	e7e2      	b.n	1068 <system_gclk_gen_set_config+0x80>
    10a2:	2301      	movs	r3, #1
    10a4:	e7ea      	b.n	107c <system_gclk_gen_set_config+0x94>
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	40000c00 	.word	0x40000c00
    10ac:	00000d35 	.word	0x00000d35
    10b0:	40000c08 	.word	0x40000c08
    10b4:	00000d75 	.word	0x00000d75

000010b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    10b8:	b570      	push	{r4, r5, r6, lr}
    10ba:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10bc:	4b10      	ldr	r3, [pc, #64]	; (1100 <system_gclk_gen_enable+0x48>)
    10be:	785b      	ldrb	r3, [r3, #1]
    10c0:	b25b      	sxtb	r3, r3
    10c2:	2b00      	cmp	r3, #0
    10c4:	db17      	blt.n	10f6 <system_gclk_gen_enable+0x3e>
	return false;
    10c6:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    10c8:	2c00      	cmp	r4, #0
    10ca:	d1f7      	bne.n	10bc <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    10cc:	4b0d      	ldr	r3, [pc, #52]	; (1104 <system_gclk_gen_enable+0x4c>)
    10ce:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10d0:	4b0d      	ldr	r3, [pc, #52]	; (1108 <system_gclk_gen_enable+0x50>)
    10d2:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10d4:	4b0a      	ldr	r3, [pc, #40]	; (1100 <system_gclk_gen_enable+0x48>)
    10d6:	785b      	ldrb	r3, [r3, #1]
    10d8:	b25b      	sxtb	r3, r3
    10da:	2b00      	cmp	r3, #0
    10dc:	db0d      	blt.n	10fa <system_gclk_gen_enable+0x42>
	return false;
    10de:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    10e0:	2b00      	cmp	r3, #0
    10e2:	d1f7      	bne.n	10d4 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    10e4:	4a06      	ldr	r2, [pc, #24]	; (1100 <system_gclk_gen_enable+0x48>)
    10e6:	6851      	ldr	r1, [r2, #4]
    10e8:	2380      	movs	r3, #128	; 0x80
    10ea:	025b      	lsls	r3, r3, #9
    10ec:	430b      	orrs	r3, r1
    10ee:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    10f0:	4b06      	ldr	r3, [pc, #24]	; (110c <system_gclk_gen_enable+0x54>)
    10f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10f4:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    10f6:	2401      	movs	r4, #1
    10f8:	e7e6      	b.n	10c8 <system_gclk_gen_enable+0x10>
    10fa:	2301      	movs	r3, #1
    10fc:	e7f0      	b.n	10e0 <system_gclk_gen_enable+0x28>
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	40000c00 	.word	0x40000c00
    1104:	00000d35 	.word	0x00000d35
    1108:	40000c04 	.word	0x40000c04
    110c:	00000d75 	.word	0x00000d75

00001110 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1112:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1114:	4b22      	ldr	r3, [pc, #136]	; (11a0 <system_gclk_gen_get_hz+0x90>)
    1116:	785b      	ldrb	r3, [r3, #1]
    1118:	b25b      	sxtb	r3, r3
    111a:	2b00      	cmp	r3, #0
    111c:	db34      	blt.n	1188 <system_gclk_gen_get_hz+0x78>
	return false;
    111e:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1120:	2d00      	cmp	r5, #0
    1122:	d1f7      	bne.n	1114 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1124:	4b1f      	ldr	r3, [pc, #124]	; (11a4 <system_gclk_gen_get_hz+0x94>)
    1126:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1128:	4b1f      	ldr	r3, [pc, #124]	; (11a8 <system_gclk_gen_get_hz+0x98>)
    112a:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    112c:	4b1c      	ldr	r3, [pc, #112]	; (11a0 <system_gclk_gen_get_hz+0x90>)
    112e:	785b      	ldrb	r3, [r3, #1]
    1130:	b25b      	sxtb	r3, r3
    1132:	2b00      	cmp	r3, #0
    1134:	db2a      	blt.n	118c <system_gclk_gen_get_hz+0x7c>
	return false;
    1136:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1138:	2c00      	cmp	r4, #0
    113a:	d1f7      	bne.n	112c <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    113c:	4e18      	ldr	r6, [pc, #96]	; (11a0 <system_gclk_gen_get_hz+0x90>)
    113e:	6870      	ldr	r0, [r6, #4]
    1140:	04c0      	lsls	r0, r0, #19
    1142:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1144:	4b19      	ldr	r3, [pc, #100]	; (11ac <system_gclk_gen_get_hz+0x9c>)
    1146:	4798      	blx	r3
    1148:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    114a:	4b17      	ldr	r3, [pc, #92]	; (11a8 <system_gclk_gen_get_hz+0x98>)
    114c:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    114e:	6876      	ldr	r6, [r6, #4]
    1150:	02f6      	lsls	r6, r6, #11
    1152:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1154:	4b16      	ldr	r3, [pc, #88]	; (11b0 <system_gclk_gen_get_hz+0xa0>)
    1156:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1158:	4b11      	ldr	r3, [pc, #68]	; (11a0 <system_gclk_gen_get_hz+0x90>)
    115a:	785b      	ldrb	r3, [r3, #1]
    115c:	b25b      	sxtb	r3, r3
    115e:	2b00      	cmp	r3, #0
    1160:	db16      	blt.n	1190 <system_gclk_gen_get_hz+0x80>
	return false;
    1162:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1164:	2b00      	cmp	r3, #0
    1166:	d1f7      	bne.n	1158 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1168:	4b0d      	ldr	r3, [pc, #52]	; (11a0 <system_gclk_gen_get_hz+0x90>)
    116a:	689c      	ldr	r4, [r3, #8]
    116c:	0224      	lsls	r4, r4, #8
    116e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1170:	4b10      	ldr	r3, [pc, #64]	; (11b4 <system_gclk_gen_get_hz+0xa4>)
    1172:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1174:	2e00      	cmp	r6, #0
    1176:	d10d      	bne.n	1194 <system_gclk_gen_get_hz+0x84>
    1178:	2c01      	cmp	r4, #1
    117a:	d90b      	bls.n	1194 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    117c:	0021      	movs	r1, r4
    117e:	0028      	movs	r0, r5
    1180:	4b0d      	ldr	r3, [pc, #52]	; (11b8 <system_gclk_gen_get_hz+0xa8>)
    1182:	4798      	blx	r3
    1184:	0005      	movs	r5, r0
    1186:	e009      	b.n	119c <system_gclk_gen_get_hz+0x8c>
		return true;
    1188:	2501      	movs	r5, #1
    118a:	e7c9      	b.n	1120 <system_gclk_gen_get_hz+0x10>
    118c:	2401      	movs	r4, #1
    118e:	e7d3      	b.n	1138 <system_gclk_gen_get_hz+0x28>
    1190:	2301      	movs	r3, #1
    1192:	e7e7      	b.n	1164 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    1194:	2e00      	cmp	r6, #0
    1196:	d001      	beq.n	119c <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    1198:	3401      	adds	r4, #1
    119a:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    119c:	0028      	movs	r0, r5
    119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11a0:	40000c00 	.word	0x40000c00
    11a4:	00000d35 	.word	0x00000d35
    11a8:	40000c04 	.word	0x40000c04
    11ac:	00000dc9 	.word	0x00000dc9
    11b0:	40000c08 	.word	0x40000c08
    11b4:	00000d75 	.word	0x00000d75
    11b8:	000015f5 	.word	0x000015f5

000011bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    11bc:	b510      	push	{r4, lr}
    11be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11c0:	4b06      	ldr	r3, [pc, #24]	; (11dc <system_gclk_chan_enable+0x20>)
    11c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11c4:	4b06      	ldr	r3, [pc, #24]	; (11e0 <system_gclk_chan_enable+0x24>)
    11c6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    11c8:	4a06      	ldr	r2, [pc, #24]	; (11e4 <system_gclk_chan_enable+0x28>)
    11ca:	8853      	ldrh	r3, [r2, #2]
    11cc:	2180      	movs	r1, #128	; 0x80
    11ce:	01c9      	lsls	r1, r1, #7
    11d0:	430b      	orrs	r3, r1
    11d2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    11d4:	4b04      	ldr	r3, [pc, #16]	; (11e8 <system_gclk_chan_enable+0x2c>)
    11d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11d8:	bd10      	pop	{r4, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00000d35 	.word	0x00000d35
    11e0:	40000c02 	.word	0x40000c02
    11e4:	40000c00 	.word	0x40000c00
    11e8:	00000d75 	.word	0x00000d75

000011ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    11ec:	b510      	push	{r4, lr}
    11ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11f0:	4b0e      	ldr	r3, [pc, #56]	; (122c <system_gclk_chan_disable+0x40>)
    11f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11f4:	4b0e      	ldr	r3, [pc, #56]	; (1230 <system_gclk_chan_disable+0x44>)
    11f6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    11f8:	490e      	ldr	r1, [pc, #56]	; (1234 <system_gclk_chan_disable+0x48>)
    11fa:	884b      	ldrh	r3, [r1, #2]
    11fc:	051b      	lsls	r3, r3, #20
    11fe:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1200:	884b      	ldrh	r3, [r1, #2]
    1202:	480d      	ldr	r0, [pc, #52]	; (1238 <system_gclk_chan_disable+0x4c>)
    1204:	4003      	ands	r3, r0
    1206:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1208:	884b      	ldrh	r3, [r1, #2]
    120a:	480c      	ldr	r0, [pc, #48]	; (123c <system_gclk_chan_disable+0x50>)
    120c:	4003      	ands	r3, r0
    120e:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1210:	4b08      	ldr	r3, [pc, #32]	; (1234 <system_gclk_chan_disable+0x48>)
    1212:	885b      	ldrh	r3, [r3, #2]
    1214:	045b      	lsls	r3, r3, #17
    1216:	d4fb      	bmi.n	1210 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1218:	4806      	ldr	r0, [pc, #24]	; (1234 <system_gclk_chan_disable+0x48>)
    121a:	8841      	ldrh	r1, [r0, #2]
    121c:	0213      	lsls	r3, r2, #8
    121e:	4a06      	ldr	r2, [pc, #24]	; (1238 <system_gclk_chan_disable+0x4c>)
    1220:	400a      	ands	r2, r1
    1222:	4313      	orrs	r3, r2
    1224:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    1226:	4b06      	ldr	r3, [pc, #24]	; (1240 <system_gclk_chan_disable+0x54>)
    1228:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    122a:	bd10      	pop	{r4, pc}
    122c:	00000d35 	.word	0x00000d35
    1230:	40000c02 	.word	0x40000c02
    1234:	40000c00 	.word	0x40000c00
    1238:	fffff0ff 	.word	0xfffff0ff
    123c:	ffffbfff 	.word	0xffffbfff
    1240:	00000d75 	.word	0x00000d75

00001244 <system_gclk_chan_set_config>:
{
    1244:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1246:	780c      	ldrb	r4, [r1, #0]
    1248:	0224      	lsls	r4, r4, #8
    124a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    124c:	4b02      	ldr	r3, [pc, #8]	; (1258 <system_gclk_chan_set_config+0x14>)
    124e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1250:	b2a4      	uxth	r4, r4
    1252:	4b02      	ldr	r3, [pc, #8]	; (125c <system_gclk_chan_set_config+0x18>)
    1254:	805c      	strh	r4, [r3, #2]
}
    1256:	bd10      	pop	{r4, pc}
    1258:	000011ed 	.word	0x000011ed
    125c:	40000c00 	.word	0x40000c00

00001260 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1260:	b510      	push	{r4, lr}
    1262:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1264:	4b06      	ldr	r3, [pc, #24]	; (1280 <system_gclk_chan_get_hz+0x20>)
    1266:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1268:	4b06      	ldr	r3, [pc, #24]	; (1284 <system_gclk_chan_get_hz+0x24>)
    126a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    126c:	4b06      	ldr	r3, [pc, #24]	; (1288 <system_gclk_chan_get_hz+0x28>)
    126e:	885c      	ldrh	r4, [r3, #2]
    1270:	0524      	lsls	r4, r4, #20
    1272:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1274:	4b05      	ldr	r3, [pc, #20]	; (128c <system_gclk_chan_get_hz+0x2c>)
    1276:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1278:	0020      	movs	r0, r4
    127a:	4b05      	ldr	r3, [pc, #20]	; (1290 <system_gclk_chan_get_hz+0x30>)
    127c:	4798      	blx	r3
}
    127e:	bd10      	pop	{r4, pc}
    1280:	00000d35 	.word	0x00000d35
    1284:	40000c02 	.word	0x40000c02
    1288:	40000c00 	.word	0x40000c00
    128c:	00000d75 	.word	0x00000d75
    1290:	00001111 	.word	0x00001111

00001294 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1294:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1296:	78d3      	ldrb	r3, [r2, #3]
    1298:	2b00      	cmp	r3, #0
    129a:	d120      	bne.n	12de <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    129c:	7815      	ldrb	r5, [r2, #0]
    129e:	2d80      	cmp	r5, #128	; 0x80
    12a0:	d01b      	beq.n	12da <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    12a2:	062d      	lsls	r5, r5, #24
    12a4:	2380      	movs	r3, #128	; 0x80
    12a6:	025b      	lsls	r3, r3, #9
    12a8:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    12aa:	7853      	ldrb	r3, [r2, #1]
    12ac:	2b00      	cmp	r3, #0
    12ae:	d001      	beq.n	12b4 <_system_pinmux_config+0x20>
    12b0:	2b02      	cmp	r3, #2
    12b2:	d10a      	bne.n	12ca <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    12b4:	2380      	movs	r3, #128	; 0x80
    12b6:	029b      	lsls	r3, r3, #10
    12b8:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    12ba:	7894      	ldrb	r4, [r2, #2]
    12bc:	2c00      	cmp	r4, #0
    12be:	d002      	beq.n	12c6 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    12c0:	23c0      	movs	r3, #192	; 0xc0
    12c2:	02db      	lsls	r3, r3, #11
    12c4:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    12c6:	6041      	str	r1, [r0, #4]
    12c8:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    12ca:	7853      	ldrb	r3, [r2, #1]
    12cc:	3b01      	subs	r3, #1
    12ce:	b2db      	uxtb	r3, r3
    12d0:	2b01      	cmp	r3, #1
    12d2:	d806      	bhi.n	12e2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    12d4:	4b13      	ldr	r3, [pc, #76]	; (1324 <_system_pinmux_config+0x90>)
    12d6:	401d      	ands	r5, r3
    12d8:	e003      	b.n	12e2 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    12da:	2500      	movs	r5, #0
    12dc:	e7e5      	b.n	12aa <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    12de:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    12e0:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    12e2:	040c      	lsls	r4, r1, #16
    12e4:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    12e6:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12e8:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    12ea:	26a0      	movs	r6, #160	; 0xa0
    12ec:	05f6      	lsls	r6, r6, #23
    12ee:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12f0:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12f2:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    12f4:	24d0      	movs	r4, #208	; 0xd0
    12f6:	0624      	lsls	r4, r4, #24
    12f8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12fa:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    12fc:	78d3      	ldrb	r3, [r2, #3]
    12fe:	2b00      	cmp	r3, #0
    1300:	d10a      	bne.n	1318 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1302:	036b      	lsls	r3, r5, #13
    1304:	d503      	bpl.n	130e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1306:	7893      	ldrb	r3, [r2, #2]
    1308:	2b01      	cmp	r3, #1
    130a:	d006      	beq.n	131a <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    130c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    130e:	7853      	ldrb	r3, [r2, #1]
    1310:	3b01      	subs	r3, #1
    1312:	b2db      	uxtb	r3, r3
    1314:	2b01      	cmp	r3, #1
    1316:	d902      	bls.n	131e <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1318:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    131a:	6181      	str	r1, [r0, #24]
    131c:	e7f7      	b.n	130e <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    131e:	6081      	str	r1, [r0, #8]
}
    1320:	e7fa      	b.n	1318 <_system_pinmux_config+0x84>
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	fffbffff 	.word	0xfffbffff

00001328 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1328:	b510      	push	{r4, lr}
    132a:	000a      	movs	r2, r1
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    132c:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    132e:	0943      	lsrs	r3, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1330:	2900      	cmp	r1, #0
    1332:	d10b      	bne.n	134c <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    1334:	01db      	lsls	r3, r3, #7
    1336:	4906      	ldr	r1, [pc, #24]	; (1350 <system_pinmux_pin_set_config+0x28>)
    1338:	468c      	mov	ip, r1
    133a:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    133c:	241f      	movs	r4, #31
    133e:	4020      	ands	r0, r4
    1340:	2101      	movs	r1, #1
    1342:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1344:	0018      	movs	r0, r3
    1346:	4b03      	ldr	r3, [pc, #12]	; (1354 <system_pinmux_pin_set_config+0x2c>)
    1348:	4798      	blx	r3
}
    134a:	bd10      	pop	{r4, pc}
	} else {
		Assert(false);
		return NULL;
    134c:	2300      	movs	r3, #0
    134e:	e7f5      	b.n	133c <system_pinmux_pin_set_config+0x14>
    1350:	41004400 	.word	0x41004400
    1354:	00001295 	.word	0x00001295

00001358 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1358:	4770      	bx	lr
	...

0000135c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    135c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    135e:	4b05      	ldr	r3, [pc, #20]	; (1374 <system_init+0x18>)
    1360:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1362:	4b05      	ldr	r3, [pc, #20]	; (1378 <system_init+0x1c>)
    1364:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1366:	4b05      	ldr	r3, [pc, #20]	; (137c <system_init+0x20>)
    1368:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    136a:	4b05      	ldr	r3, [pc, #20]	; (1380 <system_init+0x24>)
    136c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    136e:	4b05      	ldr	r3, [pc, #20]	; (1384 <system_init+0x28>)
    1370:	4798      	blx	r3
}
    1372:	bd10      	pop	{r4, pc}
    1374:	00000f41 	.word	0x00000f41
    1378:	00000d31 	.word	0x00000d31
    137c:	00001359 	.word	0x00001359
    1380:	00001359 	.word	0x00001359
    1384:	00001359 	.word	0x00001359

00001388 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1388:	e7fe      	b.n	1388 <Dummy_Handler>
	...

0000138c <Reset_Handler>:
{
    138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    138e:	4a23      	ldr	r2, [pc, #140]	; (141c <Reset_Handler+0x90>)
    1390:	4b23      	ldr	r3, [pc, #140]	; (1420 <Reset_Handler+0x94>)
    1392:	429a      	cmp	r2, r3
    1394:	d009      	beq.n	13aa <Reset_Handler+0x1e>
    1396:	4b22      	ldr	r3, [pc, #136]	; (1420 <Reset_Handler+0x94>)
    1398:	4a20      	ldr	r2, [pc, #128]	; (141c <Reset_Handler+0x90>)
    139a:	e003      	b.n	13a4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    139c:	6811      	ldr	r1, [r2, #0]
    139e:	6019      	str	r1, [r3, #0]
    13a0:	3304      	adds	r3, #4
    13a2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    13a4:	491f      	ldr	r1, [pc, #124]	; (1424 <Reset_Handler+0x98>)
    13a6:	428b      	cmp	r3, r1
    13a8:	d3f8      	bcc.n	139c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    13aa:	4b1f      	ldr	r3, [pc, #124]	; (1428 <Reset_Handler+0x9c>)
    13ac:	e002      	b.n	13b4 <Reset_Handler+0x28>
                *pDest++ = 0;
    13ae:	2200      	movs	r2, #0
    13b0:	601a      	str	r2, [r3, #0]
    13b2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    13b4:	4a1d      	ldr	r2, [pc, #116]	; (142c <Reset_Handler+0xa0>)
    13b6:	4293      	cmp	r3, r2
    13b8:	d3f9      	bcc.n	13ae <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    13ba:	4a1d      	ldr	r2, [pc, #116]	; (1430 <Reset_Handler+0xa4>)
    13bc:	21ff      	movs	r1, #255	; 0xff
    13be:	4b1d      	ldr	r3, [pc, #116]	; (1434 <Reset_Handler+0xa8>)
    13c0:	438b      	bics	r3, r1
    13c2:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    13c4:	39fd      	subs	r1, #253	; 0xfd
    13c6:	2390      	movs	r3, #144	; 0x90
    13c8:	005b      	lsls	r3, r3, #1
    13ca:	4a1b      	ldr	r2, [pc, #108]	; (1438 <Reset_Handler+0xac>)
    13cc:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    13ce:	4a1b      	ldr	r2, [pc, #108]	; (143c <Reset_Handler+0xb0>)
    13d0:	78d3      	ldrb	r3, [r2, #3]
    13d2:	2503      	movs	r5, #3
    13d4:	43ab      	bics	r3, r5
    13d6:	2402      	movs	r4, #2
    13d8:	4323      	orrs	r3, r4
    13da:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    13dc:	78d3      	ldrb	r3, [r2, #3]
    13de:	270c      	movs	r7, #12
    13e0:	43bb      	bics	r3, r7
    13e2:	2608      	movs	r6, #8
    13e4:	4333      	orrs	r3, r6
    13e6:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    13e8:	4b15      	ldr	r3, [pc, #84]	; (1440 <Reset_Handler+0xb4>)
    13ea:	7b98      	ldrb	r0, [r3, #14]
    13ec:	2230      	movs	r2, #48	; 0x30
    13ee:	4390      	bics	r0, r2
    13f0:	2220      	movs	r2, #32
    13f2:	4310      	orrs	r0, r2
    13f4:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    13f6:	7b99      	ldrb	r1, [r3, #14]
    13f8:	43b9      	bics	r1, r7
    13fa:	4331      	orrs	r1, r6
    13fc:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    13fe:	7b9a      	ldrb	r2, [r3, #14]
    1400:	43aa      	bics	r2, r5
    1402:	4322      	orrs	r2, r4
    1404:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1406:	4a0f      	ldr	r2, [pc, #60]	; (1444 <Reset_Handler+0xb8>)
    1408:	6851      	ldr	r1, [r2, #4]
    140a:	2380      	movs	r3, #128	; 0x80
    140c:	430b      	orrs	r3, r1
    140e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1410:	4b0d      	ldr	r3, [pc, #52]	; (1448 <Reset_Handler+0xbc>)
    1412:	4798      	blx	r3
        main();
    1414:	4b0d      	ldr	r3, [pc, #52]	; (144c <Reset_Handler+0xc0>)
    1416:	4798      	blx	r3
    1418:	e7fe      	b.n	1418 <Reset_Handler+0x8c>
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	00001840 	.word	0x00001840
    1420:	20000000 	.word	0x20000000
    1424:	2000000c 	.word	0x2000000c
    1428:	2000000c 	.word	0x2000000c
    142c:	200000b8 	.word	0x200000b8
    1430:	e000ed00 	.word	0xe000ed00
    1434:	00000000 	.word	0x00000000
    1438:	41007000 	.word	0x41007000
    143c:	41005000 	.word	0x41005000
    1440:	41004800 	.word	0x41004800
    1444:	41004000 	.word	0x41004000
    1448:	00001761 	.word	0x00001761
    144c:	00001599 	.word	0x00001599

00001450 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1450:	b5f0      	push	{r4, r5, r6, r7, lr}
    1452:	46ce      	mov	lr, r9
    1454:	4647      	mov	r7, r8
    1456:	b580      	push	{r7, lr}
    1458:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    145a:	ac01      	add	r4, sp, #4
    145c:	2300      	movs	r3, #0
    145e:	4698      	mov	r8, r3
    1460:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1462:	2601      	movs	r6, #1
    1464:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1466:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1468:	0021      	movs	r1, r4
    146a:	2007      	movs	r0, #7
    146c:	4d20      	ldr	r5, [pc, #128]	; (14f0 <conf_port_pin+0xa0>)
    146e:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1470:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    1472:	0021      	movs	r1, r4
    1474:	2006      	movs	r0, #6
    1476:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1478:	4f1e      	ldr	r7, [pc, #120]	; (14f4 <conf_port_pin+0xa4>)
    147a:	2340      	movs	r3, #64	; 0x40
    147c:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    147e:	0021      	movs	r1, r4
    1480:	2001      	movs	r0, #1
    1482:	47a8      	blx	r5
    1484:	2302      	movs	r3, #2
    1486:	4699      	mov	r9, r3
    1488:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    148a:	0021      	movs	r1, r4
    148c:	2002      	movs	r0, #2
    148e:	47a8      	blx	r5
    1490:	2304      	movs	r3, #4
    1492:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    1494:	0021      	movs	r1, r4
    1496:	2003      	movs	r0, #3
    1498:	47a8      	blx	r5
    149a:	2308      	movs	r3, #8
    149c:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    149e:	4643      	mov	r3, r8
    14a0:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    14a2:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    14a4:	0021      	movs	r1, r4
    14a6:	200f      	movs	r0, #15
    14a8:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    14aa:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    14ac:	0021      	movs	r1, r4
    14ae:	200e      	movs	r0, #14
    14b0:	47a8      	blx	r5
    14b2:	2380      	movs	r3, #128	; 0x80
    14b4:	01db      	lsls	r3, r3, #7
    14b6:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    14b8:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    14ba:	464b      	mov	r3, r9
    14bc:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    14be:	0021      	movs	r1, r4
    14c0:	202f      	movs	r0, #47	; 0x2f
    14c2:	47a8      	blx	r5
    14c4:	2280      	movs	r2, #128	; 0x80
    14c6:	0212      	lsls	r2, r2, #8
    14c8:	4b0b      	ldr	r3, [pc, #44]	; (14f8 <conf_port_pin+0xa8>)
    14ca:	619a      	str	r2, [r3, #24]
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    14cc:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    14ce:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    14d0:	0021      	movs	r1, r4
    14d2:	2018      	movs	r0, #24
    14d4:	47a8      	blx	r5
    14d6:	2380      	movs	r3, #128	; 0x80
    14d8:	045b      	lsls	r3, r3, #17
    14da:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    14dc:	4643      	mov	r3, r8
    14de:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    14e0:	0021      	movs	r1, r4
    14e2:	201b      	movs	r0, #27
    14e4:	47a8      	blx	r5
} // end conf_port_pin(void)
    14e6:	b003      	add	sp, #12
    14e8:	bc0c      	pop	{r2, r3}
    14ea:	4690      	mov	r8, r2
    14ec:	4699      	mov	r9, r3
    14ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14f0:	00000335 	.word	0x00000335
    14f4:	41004400 	.word	0x41004400
    14f8:	41004480 	.word	0x41004480

000014fc <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    14fc:	b500      	push	{lr}
    14fe:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1500:	a801      	add	r0, sp, #4
    1502:	2300      	movs	r3, #0
    1504:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    1506:	2201      	movs	r2, #1
    1508:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    150a:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    150c:	4b01      	ldr	r3, [pc, #4]	; (1514 <clk_osc8m_init+0x18>)
    150e:	4798      	blx	r3
}
    1510:	b003      	add	sp, #12
    1512:	bd00      	pop	{pc}
    1514:	00000e59 	.word	0x00000e59

00001518 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1518:	b500      	push	{lr}
    151a:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    151c:	4b0a      	ldr	r3, [pc, #40]	; (1548 <clk_gclk0_init+0x30>)
    151e:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1520:	2300      	movs	r3, #0
    1522:	4a0a      	ldr	r2, [pc, #40]	; (154c <clk_gclk0_init+0x34>)
    1524:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    1526:	a901      	add	r1, sp, #4
    1528:	2206      	movs	r2, #6
    152a:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    152c:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    152e:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1530:	3a05      	subs	r2, #5
    1532:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    1534:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1536:	2000      	movs	r0, #0
    1538:	4b05      	ldr	r3, [pc, #20]	; (1550 <clk_gclk0_init+0x38>)
    153a:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    153c:	2000      	movs	r0, #0
    153e:	4b05      	ldr	r3, [pc, #20]	; (1554 <clk_gclk0_init+0x3c>)
    1540:	4798      	blx	r3
    1542:	b005      	add	sp, #20
    1544:	bd00      	pop	{pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	00000fc5 	.word	0x00000fc5
    154c:	40000400 	.word	0x40000400
    1550:	00000fe9 	.word	0x00000fe9
    1554:	000010b9 	.word	0x000010b9

00001558 <sys_clk_init>:
{
    1558:	b510      	push	{r4, lr}
	clk_osc8m_init();
    155a:	4b03      	ldr	r3, [pc, #12]	; (1568 <sys_clk_init+0x10>)
    155c:	4798      	blx	r3
	clk_gclk0_init();
    155e:	4b03      	ldr	r3, [pc, #12]	; (156c <sys_clk_init+0x14>)
    1560:	4798      	blx	r3
    delay_init();
    1562:	4b03      	ldr	r3, [pc, #12]	; (1570 <sys_clk_init+0x18>)
    1564:	4798      	blx	r3
}
    1566:	bd10      	pop	{r4, pc}
    1568:	000014fd 	.word	0x000014fd
    156c:	00001519 	.word	0x00001519
    1570:	000002c9 	.word	0x000002c9

00001574 <simSysInit>:
{
    1574:	b510      	push	{r4, lr}
	system_init();
    1576:	4b04      	ldr	r3, [pc, #16]	; (1588 <simSysInit+0x14>)
    1578:	4798      	blx	r3
	sys_clk_init();
    157a:	4b04      	ldr	r3, [pc, #16]	; (158c <simSysInit+0x18>)
    157c:	4798      	blx	r3
	conf_port_pin();
    157e:	4b04      	ldr	r3, [pc, #16]	; (1590 <simSysInit+0x1c>)
    1580:	4798      	blx	r3
    uartfiber_init();
    1582:	4b04      	ldr	r3, [pc, #16]	; (1594 <simSysInit+0x20>)
    1584:	4798      	blx	r3
}
    1586:	bd10      	pop	{r4, pc}
    1588:	0000135d 	.word	0x0000135d
    158c:	00001559 	.word	0x00001559
    1590:	00001451 	.word	0x00001451
    1594:	000001e9 	.word	0x000001e9

00001598 <main>:
{
    1598:	b500      	push	{lr}
    159a:	b089      	sub	sp, #36	; 0x24
    rssi_vals acquired_rssi = {10, 20, 30};
    159c:	4b11      	ldr	r3, [pc, #68]	; (15e4 <main+0x4c>)
    159e:	681a      	ldr	r2, [r3, #0]
    15a0:	9206      	str	r2, [sp, #24]
    15a2:	8899      	ldrh	r1, [r3, #4]
    15a4:	aa06      	add	r2, sp, #24
    15a6:	8091      	strh	r1, [r2, #4]
	struct date test_date = {44, 69, 12, 5, 96, 255};
    15a8:	6899      	ldr	r1, [r3, #8]
    15aa:	9104      	str	r1, [sp, #16]
    15ac:	899a      	ldrh	r2, [r3, #12]
    15ae:	ab04      	add	r3, sp, #16
    15b0:	809a      	strh	r2, [r3, #4]
	struct measurement test_data = {test_date, 10, 20, 30, 40};
    15b2:	ab01      	add	r3, sp, #4
    15b4:	9101      	str	r1, [sp, #4]
    15b6:	809a      	strh	r2, [r3, #4]
    15b8:	220a      	movs	r2, #10
    15ba:	719a      	strb	r2, [r3, #6]
    15bc:	320a      	adds	r2, #10
    15be:	71da      	strb	r2, [r3, #7]
    15c0:	320a      	adds	r2, #10
    15c2:	721a      	strb	r2, [r3, #8]
    15c4:	320a      	adds	r2, #10
    15c6:	725a      	strb	r2, [r3, #9]
    simSysInit();
    15c8:	4b07      	ldr	r3, [pc, #28]	; (15e8 <main+0x50>)
    15ca:	4798      	blx	r3
    delay_ms(100);
    15cc:	2064      	movs	r0, #100	; 0x64
    15ce:	4b07      	ldr	r3, [pc, #28]	; (15ec <main+0x54>)
    15d0:	4798      	blx	r3
		usart_fiber_write(test_data);
    15d2:	9801      	ldr	r0, [sp, #4]
    15d4:	9902      	ldr	r1, [sp, #8]
    15d6:	9a03      	ldr	r2, [sp, #12]
    15d8:	4b05      	ldr	r3, [pc, #20]	; (15f0 <main+0x58>)
    15da:	4798      	blx	r3
        delay_ms(100);
    15dc:	2064      	movs	r0, #100	; 0x64
    15de:	4b03      	ldr	r3, [pc, #12]	; (15ec <main+0x54>)
    15e0:	4798      	blx	r3
    15e2:	e7f6      	b.n	15d2 <main+0x3a>
    15e4:	00001810 	.word	0x00001810
    15e8:	00001575 	.word	0x00001575
    15ec:	00000305 	.word	0x00000305
    15f0:	000002a9 	.word	0x000002a9

000015f4 <__udivsi3>:
    15f4:	2200      	movs	r2, #0
    15f6:	0843      	lsrs	r3, r0, #1
    15f8:	428b      	cmp	r3, r1
    15fa:	d374      	bcc.n	16e6 <__udivsi3+0xf2>
    15fc:	0903      	lsrs	r3, r0, #4
    15fe:	428b      	cmp	r3, r1
    1600:	d35f      	bcc.n	16c2 <__udivsi3+0xce>
    1602:	0a03      	lsrs	r3, r0, #8
    1604:	428b      	cmp	r3, r1
    1606:	d344      	bcc.n	1692 <__udivsi3+0x9e>
    1608:	0b03      	lsrs	r3, r0, #12
    160a:	428b      	cmp	r3, r1
    160c:	d328      	bcc.n	1660 <__udivsi3+0x6c>
    160e:	0c03      	lsrs	r3, r0, #16
    1610:	428b      	cmp	r3, r1
    1612:	d30d      	bcc.n	1630 <__udivsi3+0x3c>
    1614:	22ff      	movs	r2, #255	; 0xff
    1616:	0209      	lsls	r1, r1, #8
    1618:	ba12      	rev	r2, r2
    161a:	0c03      	lsrs	r3, r0, #16
    161c:	428b      	cmp	r3, r1
    161e:	d302      	bcc.n	1626 <__udivsi3+0x32>
    1620:	1212      	asrs	r2, r2, #8
    1622:	0209      	lsls	r1, r1, #8
    1624:	d065      	beq.n	16f2 <__udivsi3+0xfe>
    1626:	0b03      	lsrs	r3, r0, #12
    1628:	428b      	cmp	r3, r1
    162a:	d319      	bcc.n	1660 <__udivsi3+0x6c>
    162c:	e000      	b.n	1630 <__udivsi3+0x3c>
    162e:	0a09      	lsrs	r1, r1, #8
    1630:	0bc3      	lsrs	r3, r0, #15
    1632:	428b      	cmp	r3, r1
    1634:	d301      	bcc.n	163a <__udivsi3+0x46>
    1636:	03cb      	lsls	r3, r1, #15
    1638:	1ac0      	subs	r0, r0, r3
    163a:	4152      	adcs	r2, r2
    163c:	0b83      	lsrs	r3, r0, #14
    163e:	428b      	cmp	r3, r1
    1640:	d301      	bcc.n	1646 <__udivsi3+0x52>
    1642:	038b      	lsls	r3, r1, #14
    1644:	1ac0      	subs	r0, r0, r3
    1646:	4152      	adcs	r2, r2
    1648:	0b43      	lsrs	r3, r0, #13
    164a:	428b      	cmp	r3, r1
    164c:	d301      	bcc.n	1652 <__udivsi3+0x5e>
    164e:	034b      	lsls	r3, r1, #13
    1650:	1ac0      	subs	r0, r0, r3
    1652:	4152      	adcs	r2, r2
    1654:	0b03      	lsrs	r3, r0, #12
    1656:	428b      	cmp	r3, r1
    1658:	d301      	bcc.n	165e <__udivsi3+0x6a>
    165a:	030b      	lsls	r3, r1, #12
    165c:	1ac0      	subs	r0, r0, r3
    165e:	4152      	adcs	r2, r2
    1660:	0ac3      	lsrs	r3, r0, #11
    1662:	428b      	cmp	r3, r1
    1664:	d301      	bcc.n	166a <__udivsi3+0x76>
    1666:	02cb      	lsls	r3, r1, #11
    1668:	1ac0      	subs	r0, r0, r3
    166a:	4152      	adcs	r2, r2
    166c:	0a83      	lsrs	r3, r0, #10
    166e:	428b      	cmp	r3, r1
    1670:	d301      	bcc.n	1676 <__udivsi3+0x82>
    1672:	028b      	lsls	r3, r1, #10
    1674:	1ac0      	subs	r0, r0, r3
    1676:	4152      	adcs	r2, r2
    1678:	0a43      	lsrs	r3, r0, #9
    167a:	428b      	cmp	r3, r1
    167c:	d301      	bcc.n	1682 <__udivsi3+0x8e>
    167e:	024b      	lsls	r3, r1, #9
    1680:	1ac0      	subs	r0, r0, r3
    1682:	4152      	adcs	r2, r2
    1684:	0a03      	lsrs	r3, r0, #8
    1686:	428b      	cmp	r3, r1
    1688:	d301      	bcc.n	168e <__udivsi3+0x9a>
    168a:	020b      	lsls	r3, r1, #8
    168c:	1ac0      	subs	r0, r0, r3
    168e:	4152      	adcs	r2, r2
    1690:	d2cd      	bcs.n	162e <__udivsi3+0x3a>
    1692:	09c3      	lsrs	r3, r0, #7
    1694:	428b      	cmp	r3, r1
    1696:	d301      	bcc.n	169c <__udivsi3+0xa8>
    1698:	01cb      	lsls	r3, r1, #7
    169a:	1ac0      	subs	r0, r0, r3
    169c:	4152      	adcs	r2, r2
    169e:	0983      	lsrs	r3, r0, #6
    16a0:	428b      	cmp	r3, r1
    16a2:	d301      	bcc.n	16a8 <__udivsi3+0xb4>
    16a4:	018b      	lsls	r3, r1, #6
    16a6:	1ac0      	subs	r0, r0, r3
    16a8:	4152      	adcs	r2, r2
    16aa:	0943      	lsrs	r3, r0, #5
    16ac:	428b      	cmp	r3, r1
    16ae:	d301      	bcc.n	16b4 <__udivsi3+0xc0>
    16b0:	014b      	lsls	r3, r1, #5
    16b2:	1ac0      	subs	r0, r0, r3
    16b4:	4152      	adcs	r2, r2
    16b6:	0903      	lsrs	r3, r0, #4
    16b8:	428b      	cmp	r3, r1
    16ba:	d301      	bcc.n	16c0 <__udivsi3+0xcc>
    16bc:	010b      	lsls	r3, r1, #4
    16be:	1ac0      	subs	r0, r0, r3
    16c0:	4152      	adcs	r2, r2
    16c2:	08c3      	lsrs	r3, r0, #3
    16c4:	428b      	cmp	r3, r1
    16c6:	d301      	bcc.n	16cc <__udivsi3+0xd8>
    16c8:	00cb      	lsls	r3, r1, #3
    16ca:	1ac0      	subs	r0, r0, r3
    16cc:	4152      	adcs	r2, r2
    16ce:	0883      	lsrs	r3, r0, #2
    16d0:	428b      	cmp	r3, r1
    16d2:	d301      	bcc.n	16d8 <__udivsi3+0xe4>
    16d4:	008b      	lsls	r3, r1, #2
    16d6:	1ac0      	subs	r0, r0, r3
    16d8:	4152      	adcs	r2, r2
    16da:	0843      	lsrs	r3, r0, #1
    16dc:	428b      	cmp	r3, r1
    16de:	d301      	bcc.n	16e4 <__udivsi3+0xf0>
    16e0:	004b      	lsls	r3, r1, #1
    16e2:	1ac0      	subs	r0, r0, r3
    16e4:	4152      	adcs	r2, r2
    16e6:	1a41      	subs	r1, r0, r1
    16e8:	d200      	bcs.n	16ec <__udivsi3+0xf8>
    16ea:	4601      	mov	r1, r0
    16ec:	4152      	adcs	r2, r2
    16ee:	4610      	mov	r0, r2
    16f0:	4770      	bx	lr
    16f2:	e7ff      	b.n	16f4 <__udivsi3+0x100>
    16f4:	b501      	push	{r0, lr}
    16f6:	2000      	movs	r0, #0
    16f8:	f000 f806 	bl	1708 <__aeabi_idiv0>
    16fc:	bd02      	pop	{r1, pc}
    16fe:	46c0      	nop			; (mov r8, r8)

00001700 <__aeabi_uidivmod>:
    1700:	2900      	cmp	r1, #0
    1702:	d0f7      	beq.n	16f4 <__udivsi3+0x100>
    1704:	e776      	b.n	15f4 <__udivsi3>
    1706:	4770      	bx	lr

00001708 <__aeabi_idiv0>:
    1708:	4770      	bx	lr
    170a:	46c0      	nop			; (mov r8, r8)

0000170c <__aeabi_lmul>:
    170c:	b5f0      	push	{r4, r5, r6, r7, lr}
    170e:	46ce      	mov	lr, r9
    1710:	4647      	mov	r7, r8
    1712:	0415      	lsls	r5, r2, #16
    1714:	0c2d      	lsrs	r5, r5, #16
    1716:	002e      	movs	r6, r5
    1718:	b580      	push	{r7, lr}
    171a:	0407      	lsls	r7, r0, #16
    171c:	0c14      	lsrs	r4, r2, #16
    171e:	0c3f      	lsrs	r7, r7, #16
    1720:	4699      	mov	r9, r3
    1722:	0c03      	lsrs	r3, r0, #16
    1724:	437e      	muls	r6, r7
    1726:	435d      	muls	r5, r3
    1728:	4367      	muls	r7, r4
    172a:	4363      	muls	r3, r4
    172c:	197f      	adds	r7, r7, r5
    172e:	0c34      	lsrs	r4, r6, #16
    1730:	19e4      	adds	r4, r4, r7
    1732:	469c      	mov	ip, r3
    1734:	42a5      	cmp	r5, r4
    1736:	d903      	bls.n	1740 <__aeabi_lmul+0x34>
    1738:	2380      	movs	r3, #128	; 0x80
    173a:	025b      	lsls	r3, r3, #9
    173c:	4698      	mov	r8, r3
    173e:	44c4      	add	ip, r8
    1740:	464b      	mov	r3, r9
    1742:	4351      	muls	r1, r2
    1744:	4343      	muls	r3, r0
    1746:	0436      	lsls	r6, r6, #16
    1748:	0c36      	lsrs	r6, r6, #16
    174a:	0c25      	lsrs	r5, r4, #16
    174c:	0424      	lsls	r4, r4, #16
    174e:	4465      	add	r5, ip
    1750:	19a4      	adds	r4, r4, r6
    1752:	1859      	adds	r1, r3, r1
    1754:	1949      	adds	r1, r1, r5
    1756:	0020      	movs	r0, r4
    1758:	bc0c      	pop	{r2, r3}
    175a:	4690      	mov	r8, r2
    175c:	4699      	mov	r9, r3
    175e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001760 <__libc_init_array>:
    1760:	b570      	push	{r4, r5, r6, lr}
    1762:	2600      	movs	r6, #0
    1764:	4d0c      	ldr	r5, [pc, #48]	; (1798 <__libc_init_array+0x38>)
    1766:	4c0d      	ldr	r4, [pc, #52]	; (179c <__libc_init_array+0x3c>)
    1768:	1b64      	subs	r4, r4, r5
    176a:	10a4      	asrs	r4, r4, #2
    176c:	42a6      	cmp	r6, r4
    176e:	d109      	bne.n	1784 <__libc_init_array+0x24>
    1770:	2600      	movs	r6, #0
    1772:	f000 f855 	bl	1820 <_init>
    1776:	4d0a      	ldr	r5, [pc, #40]	; (17a0 <__libc_init_array+0x40>)
    1778:	4c0a      	ldr	r4, [pc, #40]	; (17a4 <__libc_init_array+0x44>)
    177a:	1b64      	subs	r4, r4, r5
    177c:	10a4      	asrs	r4, r4, #2
    177e:	42a6      	cmp	r6, r4
    1780:	d105      	bne.n	178e <__libc_init_array+0x2e>
    1782:	bd70      	pop	{r4, r5, r6, pc}
    1784:	00b3      	lsls	r3, r6, #2
    1786:	58eb      	ldr	r3, [r5, r3]
    1788:	4798      	blx	r3
    178a:	3601      	adds	r6, #1
    178c:	e7ee      	b.n	176c <__libc_init_array+0xc>
    178e:	00b3      	lsls	r3, r6, #2
    1790:	58eb      	ldr	r3, [r5, r3]
    1792:	4798      	blx	r3
    1794:	3601      	adds	r6, #1
    1796:	e7f2      	b.n	177e <__libc_init_array+0x1e>
    1798:	0000182c 	.word	0x0000182c
    179c:	0000182c 	.word	0x0000182c
    17a0:	0000182c 	.word	0x0000182c
    17a4:	00001830 	.word	0x00001830
    17a8:	42000800 	.word	0x42000800
    17ac:	42000c00 	.word	0x42000c00
    17b0:	42001000 	.word	0x42001000
    17b4:	42001400 	.word	0x42001400
    17b8:	42001800 	.word	0x42001800
    17bc:	42001c00 	.word	0x42001c00
    17c0:	0c0b0a09 	.word	0x0c0b0a09
    17c4:	00000e0d 	.word	0x00000e0d
    17c8:	00000ddc 	.word	0x00000ddc
    17cc:	00000e34 	.word	0x00000e34
    17d0:	00000e34 	.word	0x00000e34
    17d4:	00000dd6 	.word	0x00000dd6
    17d8:	00000dd6 	.word	0x00000dd6
    17dc:	00000df0 	.word	0x00000df0
    17e0:	00000de2 	.word	0x00000de2
    17e4:	00000df6 	.word	0x00000df6
    17e8:	00000e24 	.word	0x00000e24
    17ec:	00000ec0 	.word	0x00000ec0
    17f0:	00000f2e 	.word	0x00000f2e
    17f4:	00000f2e 	.word	0x00000f2e
    17f8:	00000ea0 	.word	0x00000ea0
    17fc:	00000eb2 	.word	0x00000eb2
    1800:	00000ed0 	.word	0x00000ed0
    1804:	00000ea4 	.word	0x00000ea4
    1808:	00000ee0 	.word	0x00000ee0
    180c:	00000f1c 	.word	0x00000f1c
    1810:	0014000a 	.word	0x0014000a
    1814:	0000001e 	.word	0x0000001e
    1818:	050c452c 	.word	0x050c452c
    181c:	0000ff60 	.word	0x0000ff60

00001820 <_init>:
    1820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1826:	bc08      	pop	{r3}
    1828:	469e      	mov	lr, r3
    182a:	4770      	bx	lr

0000182c <__init_array_start>:
    182c:	000000dd 	.word	0x000000dd

00001830 <_fini>:
    1830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1836:	bc08      	pop	{r3}
    1838:	469e      	mov	lr, r3
    183a:	4770      	bx	lr

0000183c <__fini_array_start>:
    183c:	000000b5 	.word	0x000000b5
