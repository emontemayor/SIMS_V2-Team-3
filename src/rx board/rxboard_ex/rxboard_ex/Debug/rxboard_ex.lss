
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d50  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001ec  20000000  00001d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012c  200001ec  00001f3c  000201ec  2**2
                  ALLOC
  3 .stack        00002000  20000318  00002068  000201ec  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021f19  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003182  00000000  00000000  00042186  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000038d0  00000000  00000000  00045308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000470  00000000  00000000  00048bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000510  00000000  00000000  00049048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a10c  00000000  00000000  00049558  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b15e  00000000  00000000  00063664  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c87c  00000000  00000000  0006e7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c5c  00000000  00000000  000fb040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 23 00 20 d1 15 00 00 cd 15 00 00 cd 15 00 00     .#. ............
	...
      2c:	cd 15 00 00 00 00 00 00 00 00 00 00 cd 15 00 00     ................
      3c:	cd 15 00 00 cd 15 00 00 cd 15 00 00 cd 15 00 00     ................
      4c:	cd 15 00 00 cd 15 00 00 cd 15 00 00 cd 15 00 00     ................
      5c:	cd 15 00 00 cd 15 00 00 15 0f 00 00 25 0f 00 00     ............%...
      6c:	35 0f 00 00 45 0f 00 00 55 0f 00 00 65 0f 00 00     5...E...U...e...
      7c:	cd 15 00 00 cd 15 00 00 cd 15 00 00 cd 15 00 00     ................
      8c:	cd 15 00 00 cd 15 00 00 cd 15 00 00 cd 15 00 00     ................
      9c:	cd 15 00 00 cd 15 00 00 cd 15 00 00 cd 15 00 00     ................
      ac:	cd 15 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001ec 	.word	0x200001ec
      d4:	00000000 	.word	0x00000000
      d8:	00001d50 	.word	0x00001d50

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001f0 	.word	0x200001f0
     108:	00001d50 	.word	0x00001d50
     10c:	00001d50 	.word	0x00001d50
     110:	00000000 	.word	0x00000000

00000114 <ringbuff_clear>:
int8_t ringbuff_clear(ringbuff_t* pringbuff)
{
    uint8_t ret_val = -1;
    
    // NULL pointer check
    if(pringbuff)
     114:	2800      	cmp	r0, #0
     116:	d005      	beq.n	124 <ringbuff_clear+0x10>
    {
        // clear the read/write values
        pringbuff->write = 0;
     118:	2300      	movs	r3, #0
     11a:	6043      	str	r3, [r0, #4]
        pringbuff->read = 0;
     11c:	6083      	str	r3, [r0, #8]
        ret_val = 0;
     11e:	2000      	movs	r0, #0
    }
    
    return ret_val;
     120:	b240      	sxtb	r0, r0
}
     122:	4770      	bx	lr
    uint8_t ret_val = -1;
     124:	20ff      	movs	r0, #255	; 0xff
     126:	e7fb      	b.n	120 <ringbuff_clear+0xc>

00000128 <ringbuff_put>:
 * Return Values(s) : int8_t
 * Description      : Puts a byte into the ring buffer. Returns 0 if the 
 *  operation was successful, else it returns -1.
 */
int8_t ringbuff_put(ringbuff_t* pringbuff, uint8_t put_data)
{
     128:	b570      	push	{r4, r5, r6, lr}
     12a:	0004      	movs	r4, r0
     12c:	000d      	movs	r5, r1
    uint8_t ret_val = -1;
    
    // NULL pointer check
    if(pringbuff)
     12e:	2800      	cmp	r0, #0
     130:	d00f      	beq.n	152 <ringbuff_put+0x2a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     132:	4b09      	ldr	r3, [pc, #36]	; (158 <ringbuff_put+0x30>)
     134:	4798      	blx	r3
    {
        // keep ring buffer operations atomic relative to interrupts   
        system_interrupt_enter_critical_section();
        
        // write data to the ring buffer
        pringbuff->buff[pringbuff->write] = put_data;
     136:	6823      	ldr	r3, [r4, #0]
     138:	6862      	ldr	r2, [r4, #4]
     13a:	549d      	strb	r5, [r3, r2]

        /* increment the head. This means old data will be overwritten if the
         * user does not check if the buffer is full */
        pringbuff->write = (pringbuff->write + 1) % pringbuff->size;
     13c:	6863      	ldr	r3, [r4, #4]
     13e:	1c58      	adds	r0, r3, #1
     140:	68e1      	ldr	r1, [r4, #12]
     142:	4b06      	ldr	r3, [pc, #24]	; (15c <ringbuff_put+0x34>)
     144:	4798      	blx	r3
     146:	6061      	str	r1, [r4, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     148:	4b05      	ldr	r3, [pc, #20]	; (160 <ringbuff_put+0x38>)
     14a:	4798      	blx	r3
        
        system_interrupt_leave_critical_section();

        ret_val = 0;
     14c:	2000      	movs	r0, #0
    }
    
    return ret_val;
     14e:	b240      	sxtb	r0, r0
}
     150:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t ret_val = -1;
     152:	20ff      	movs	r0, #255	; 0xff
     154:	e7fb      	b.n	14e <ringbuff_put+0x26>
     156:	46c0      	nop			; (mov r8, r8)
     158:	00000f79 	.word	0x00000f79
     15c:	0000192d 	.word	0x0000192d
     160:	00000fb9 	.word	0x00000fb9

00000164 <ringbuff_is_empty>:
 * Return Values(s) : bool
 * Description      : Returns true if the ring buffer is empty, else false
 */
bool ringbuff_is_empty(ringbuff_t* pringbuff)
{
    return (pringbuff->write == pringbuff->read);
     164:	6843      	ldr	r3, [r0, #4]
     166:	6880      	ldr	r0, [r0, #8]
     168:	1a18      	subs	r0, r3, r0
     16a:	4243      	negs	r3, r0
     16c:	4158      	adcs	r0, r3
     16e:	b2c0      	uxtb	r0, r0
}
     170:	4770      	bx	lr
	...

00000174 <ringbuff_get>:
{
     174:	b570      	push	{r4, r5, r6, lr}
     176:	0004      	movs	r4, r0
     178:	000d      	movs	r5, r1
    if(pringbuff && pget_data && !ringbuff_is_empty(pringbuff))
     17a:	2800      	cmp	r0, #0
     17c:	d018      	beq.n	1b0 <ringbuff_get+0x3c>
     17e:	2900      	cmp	r1, #0
     180:	d018      	beq.n	1b4 <ringbuff_get+0x40>
     182:	4b0d      	ldr	r3, [pc, #52]	; (1b8 <ringbuff_get+0x44>)
     184:	4798      	blx	r3
     186:	2800      	cmp	r0, #0
     188:	d002      	beq.n	190 <ringbuff_get+0x1c>
    uint8_t ret_val = -1;
     18a:	20ff      	movs	r0, #255	; 0xff
    return ret_val;
     18c:	b240      	sxtb	r0, r0
}
     18e:	bd70      	pop	{r4, r5, r6, pc}
	cpu_irq_enter_critical();
     190:	4b0a      	ldr	r3, [pc, #40]	; (1bc <ringbuff_get+0x48>)
     192:	4798      	blx	r3
        *pget_data = pringbuff->buff[pringbuff->read];
     194:	6823      	ldr	r3, [r4, #0]
     196:	68a2      	ldr	r2, [r4, #8]
     198:	5c9b      	ldrb	r3, [r3, r2]
     19a:	702b      	strb	r3, [r5, #0]
        pringbuff->read = (pringbuff->read + 1) % pringbuff->size;
     19c:	68a3      	ldr	r3, [r4, #8]
     19e:	1c58      	adds	r0, r3, #1
     1a0:	68e1      	ldr	r1, [r4, #12]
     1a2:	4b07      	ldr	r3, [pc, #28]	; (1c0 <ringbuff_get+0x4c>)
     1a4:	4798      	blx	r3
     1a6:	60a1      	str	r1, [r4, #8]
	cpu_irq_leave_critical();
     1a8:	4b06      	ldr	r3, [pc, #24]	; (1c4 <ringbuff_get+0x50>)
     1aa:	4798      	blx	r3
        ret_val = 0;
     1ac:	2000      	movs	r0, #0
     1ae:	e7ed      	b.n	18c <ringbuff_get+0x18>
    uint8_t ret_val = -1;
     1b0:	20ff      	movs	r0, #255	; 0xff
     1b2:	e7eb      	b.n	18c <ringbuff_get+0x18>
     1b4:	20ff      	movs	r0, #255	; 0xff
     1b6:	e7e9      	b.n	18c <ringbuff_get+0x18>
     1b8:	00000165 	.word	0x00000165
     1bc:	00000f79 	.word	0x00000f79
     1c0:	0000192d 	.word	0x0000192d
     1c4:	00000fb9 	.word	0x00000fb9

000001c8 <uart915_parse_response>:
 *  Anything else resets the state machine back to its starting state.
 *  Returns true if an "OK\r\n" sequence was found, else false.
 */
static bool uart915_parse_response(uint8_t next_char)
{
    switch(rx_state)
     1c8:	4b1f      	ldr	r3, [pc, #124]	; (248 <uart915_parse_response+0x80>)
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	b2db      	uxtb	r3, r3
     1ce:	2b01      	cmp	r3, #1
     1d0:	d016      	beq.n	200 <uart915_parse_response+0x38>
     1d2:	2b00      	cmp	r3, #0
     1d4:	d008      	beq.n	1e8 <uart915_parse_response+0x20>
     1d6:	2b02      	cmp	r3, #2
     1d8:	d01e      	beq.n	218 <uart915_parse_response+0x50>
     1da:	2b03      	cmp	r3, #3
     1dc:	d028      	beq.n	230 <uart915_parse_response+0x68>
                break; //end of default case
        }
        break; //end of CR_RX case
        
        default:
            rx_state = START;
     1de:	2200      	movs	r2, #0
     1e0:	4b19      	ldr	r3, [pc, #100]	; (248 <uart915_parse_response+0x80>)
     1e2:	701a      	strb	r2, [r3, #0]
            break;
    }
    
    return false;
     1e4:	2000      	movs	r0, #0
}
     1e6:	4770      	bx	lr
            switch(next_char)
     1e8:	284f      	cmp	r0, #79	; 0x4f
     1ea:	d104      	bne.n	1f6 <uart915_parse_response+0x2e>
                   rx_state = O_RX;
     1ec:	2201      	movs	r2, #1
     1ee:	4b16      	ldr	r3, [pc, #88]	; (248 <uart915_parse_response+0x80>)
     1f0:	701a      	strb	r2, [r3, #0]
    return false;
     1f2:	2000      	movs	r0, #0
                   break; //end of 'O' case
     1f4:	e7f7      	b.n	1e6 <uart915_parse_response+0x1e>
                    rx_state = START;
     1f6:	2200      	movs	r2, #0
     1f8:	4b13      	ldr	r3, [pc, #76]	; (248 <uart915_parse_response+0x80>)
     1fa:	701a      	strb	r2, [r3, #0]
    return false;
     1fc:	2000      	movs	r0, #0
                    break; //end of default case
     1fe:	e7f2      	b.n	1e6 <uart915_parse_response+0x1e>
            switch(next_char)
     200:	284b      	cmp	r0, #75	; 0x4b
     202:	d104      	bne.n	20e <uart915_parse_response+0x46>
                    rx_state = K_RX;
     204:	2202      	movs	r2, #2
     206:	4b10      	ldr	r3, [pc, #64]	; (248 <uart915_parse_response+0x80>)
     208:	701a      	strb	r2, [r3, #0]
    return false;
     20a:	2000      	movs	r0, #0
                    break; //end of 'K' case
     20c:	e7eb      	b.n	1e6 <uart915_parse_response+0x1e>
                    rx_state = START;
     20e:	2200      	movs	r2, #0
     210:	4b0d      	ldr	r3, [pc, #52]	; (248 <uart915_parse_response+0x80>)
     212:	701a      	strb	r2, [r3, #0]
    return false;
     214:	2000      	movs	r0, #0
                    break; //end of default case
     216:	e7e6      	b.n	1e6 <uart915_parse_response+0x1e>
            switch(next_char)
     218:	280d      	cmp	r0, #13
     21a:	d104      	bne.n	226 <uart915_parse_response+0x5e>
                    rx_state = CR_RX;
     21c:	2203      	movs	r2, #3
     21e:	4b0a      	ldr	r3, [pc, #40]	; (248 <uart915_parse_response+0x80>)
     220:	701a      	strb	r2, [r3, #0]
    return false;
     222:	2000      	movs	r0, #0
                    break; //end of '\r' case
     224:	e7df      	b.n	1e6 <uart915_parse_response+0x1e>
                    rx_state = START;
     226:	2200      	movs	r2, #0
     228:	4b07      	ldr	r3, [pc, #28]	; (248 <uart915_parse_response+0x80>)
     22a:	701a      	strb	r2, [r3, #0]
    return false;
     22c:	2000      	movs	r0, #0
                    break; //end of default case
     22e:	e7da      	b.n	1e6 <uart915_parse_response+0x1e>
        switch(next_char)
     230:	280a      	cmp	r0, #10
     232:	d104      	bne.n	23e <uart915_parse_response+0x76>
                rx_state = START;
     234:	2200      	movs	r2, #0
     236:	4b04      	ldr	r3, [pc, #16]	; (248 <uart915_parse_response+0x80>)
     238:	701a      	strb	r2, [r3, #0]
                return true;
     23a:	3809      	subs	r0, #9
     23c:	e7d3      	b.n	1e6 <uart915_parse_response+0x1e>
                rx_state = START;
     23e:	2200      	movs	r2, #0
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <uart915_parse_response+0x80>)
     242:	701a      	strb	r2, [r3, #0]
    return false;
     244:	2000      	movs	r0, #0
        break; //end of CR_RX case
     246:	e7ce      	b.n	1e6 <uart915_parse_response+0x1e>
     248:	20000209 	.word	0x20000209

0000024c <uart915_read_callback>:
{
     24c:	b570      	push	{r4, r5, r6, lr}
     24e:	0005      	movs	r5, r0
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     250:	4c07      	ldr	r4, [pc, #28]	; (270 <uart915_read_callback+0x24>)
     252:	7821      	ldrb	r1, [r4, #0]
     254:	4807      	ldr	r0, [pc, #28]	; (274 <uart915_read_callback+0x28>)
     256:	4b08      	ldr	r3, [pc, #32]	; (278 <uart915_read_callback+0x2c>)
     258:	4798      	blx	r3
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     25a:	7820      	ldrb	r0, [r4, #0]
     25c:	4b07      	ldr	r3, [pc, #28]	; (27c <uart915_read_callback+0x30>)
     25e:	4798      	blx	r3
     260:	4b07      	ldr	r3, [pc, #28]	; (280 <uart915_read_callback+0x34>)
     262:	7018      	strb	r0, [r3, #0]
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     264:	2201      	movs	r2, #1
     266:	0021      	movs	r1, r4
     268:	0028      	movs	r0, r5
     26a:	4b06      	ldr	r3, [pc, #24]	; (284 <uart915_read_callback+0x38>)
     26c:	4798      	blx	r3
}
     26e:	bd70      	pop	{r4, r5, r6, pc}
     270:	200002c0 	.word	0x200002c0
     274:	20000000 	.word	0x20000000
     278:	00000129 	.word	0x00000129
     27c:	000001c9 	.word	0x000001c9
     280:	20000208 	.word	0x20000208
     284:	00000ced 	.word	0x00000ced

00000288 <configure_915uart_callbacks>:
{
     288:	b510      	push	{r4, lr}
    usart_register_callback(&uart915_inst, uart915_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     28a:	4c08      	ldr	r4, [pc, #32]	; (2ac <configure_915uart_callbacks+0x24>)
     28c:	2201      	movs	r2, #1
     28e:	4908      	ldr	r1, [pc, #32]	; (2b0 <configure_915uart_callbacks+0x28>)
     290:	0020      	movs	r0, r4
     292:	4b08      	ldr	r3, [pc, #32]	; (2b4 <configure_915uart_callbacks+0x2c>)
     294:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     296:	2231      	movs	r2, #49	; 0x31
     298:	5ca3      	ldrb	r3, [r4, r2]
     29a:	2102      	movs	r1, #2
     29c:	430b      	orrs	r3, r1
     29e:	54a3      	strb	r3, [r4, r2]
    usart_read_buffer_job(&uart915_inst, &uart915_rx_read, 1);
     2a0:	3a30      	subs	r2, #48	; 0x30
     2a2:	4905      	ldr	r1, [pc, #20]	; (2b8 <configure_915uart_callbacks+0x30>)
     2a4:	0020      	movs	r0, r4
     2a6:	4b05      	ldr	r3, [pc, #20]	; (2bc <configure_915uart_callbacks+0x34>)
     2a8:	4798      	blx	r3
}
     2aa:	bd10      	pop	{r4, pc}
     2ac:	2000020c 	.word	0x2000020c
     2b0:	0000024d 	.word	0x0000024d
     2b4:	00000cd5 	.word	0x00000cd5
     2b8:	200002c0 	.word	0x200002c0
     2bc:	00000ced 	.word	0x00000ced

000002c0 <uart915_init>:
{
     2c0:	b510      	push	{r4, lr}
     2c2:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     2c4:	2380      	movs	r3, #128	; 0x80
     2c6:	05db      	lsls	r3, r3, #23
     2c8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     2ca:	2300      	movs	r3, #0
     2cc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     2ce:	22ff      	movs	r2, #255	; 0xff
     2d0:	4669      	mov	r1, sp
     2d2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     2d4:	2200      	movs	r2, #0
     2d6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     2d8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     2da:	2101      	movs	r1, #1
     2dc:	2024      	movs	r0, #36	; 0x24
     2de:	466c      	mov	r4, sp
     2e0:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     2e2:	3001      	adds	r0, #1
     2e4:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     2e6:	3125      	adds	r1, #37	; 0x25
     2e8:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     2ea:	3101      	adds	r1, #1
     2ec:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     2ee:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     2f0:	3105      	adds	r1, #5
     2f2:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     2f4:	3101      	adds	r1, #1
     2f6:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     2f8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     2fa:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     2fc:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     2fe:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     300:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     302:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     304:	2313      	movs	r3, #19
     306:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     308:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART915_BAUD;
     30a:	23e1      	movs	r3, #225	; 0xe1
     30c:	025b      	lsls	r3, r3, #9
     30e:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART915_PINMUX;
     310:	2390      	movs	r3, #144	; 0x90
     312:	035b      	lsls	r3, r3, #13
     314:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX915;
     316:	4b13      	ldr	r3, [pc, #76]	; (364 <uart915_init+0xa4>)
     318:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX915;
     31a:	4b13      	ldr	r3, [pc, #76]	; (368 <uart915_init+0xa8>)
     31c:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     31e:	2301      	movs	r3, #1
     320:	425b      	negs	r3, r3
     322:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     324:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uart915_inst, UART915, &config_usart) != STATUS_OK);
     326:	466a      	mov	r2, sp
     328:	4910      	ldr	r1, [pc, #64]	; (36c <uart915_init+0xac>)
     32a:	4811      	ldr	r0, [pc, #68]	; (370 <uart915_init+0xb0>)
     32c:	4b11      	ldr	r3, [pc, #68]	; (374 <uart915_init+0xb4>)
     32e:	4798      	blx	r3
     330:	2800      	cmp	r0, #0
     332:	d1f8      	bne.n	326 <uart915_init+0x66>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     334:	4b0e      	ldr	r3, [pc, #56]	; (370 <uart915_init+0xb0>)
     336:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     338:	0020      	movs	r0, r4
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <uart915_init+0xb8>)
     33c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     33e:	231f      	movs	r3, #31
     340:	4018      	ands	r0, r3
     342:	3b1e      	subs	r3, #30
     344:	4083      	lsls	r3, r0
     346:	4a0d      	ldr	r2, [pc, #52]	; (37c <uart915_init+0xbc>)
     348:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     34a:	4b09      	ldr	r3, [pc, #36]	; (370 <uart915_init+0xb0>)
     34c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     34e:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     350:	2b00      	cmp	r3, #0
     352:	d1fa      	bne.n	34a <uart915_init+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     354:	6823      	ldr	r3, [r4, #0]
     356:	2202      	movs	r2, #2
     358:	4313      	orrs	r3, r2
     35a:	6023      	str	r3, [r4, #0]
    configure_915uart_callbacks();
     35c:	4b08      	ldr	r3, [pc, #32]	; (380 <uart915_init+0xc0>)
     35e:	4798      	blx	r3
}
     360:	b010      	add	sp, #64	; 0x40
     362:	bd10      	pop	{r4, pc}
     364:	000c0002 	.word	0x000c0002
     368:	000d0002 	.word	0x000d0002
     36c:	42001000 	.word	0x42001000
     370:	2000020c 	.word	0x2000020c
     374:	00000a69 	.word	0x00000a69
     378:	00000ef1 	.word	0x00000ef1
     37c:	e000e100 	.word	0xe000e100
     380:	00000289 	.word	0x00000289

00000384 <uart915_write_cmd>:
 * Return Values(s) : void
 * Description      : Sends a string to the MTXDOT and waits for an 
 *  "OK\r\n" response.
 */
void uart915_write_cmd(const char* cmd_str)
{
     384:	b510      	push	{r4, lr}
     386:	0004      	movs	r4, r0
    // clear the flag
    flag_ok_received = false;
     388:	2300      	movs	r3, #0
     38a:	4a0e      	ldr	r2, [pc, #56]	; (3c4 <uart915_write_cmd+0x40>)
     38c:	7013      	strb	r3, [r2, #0]
    
    // reset state machine for determining okay_received
    rx_state = START;
     38e:	4a0e      	ldr	r2, [pc, #56]	; (3c8 <uart915_write_cmd+0x44>)
     390:	7013      	strb	r3, [r2, #0]
    
    // clear the ring buffer
    ringbuff_clear(&uart915_ringbuff);
     392:	480e      	ldr	r0, [pc, #56]	; (3cc <uart915_write_cmd+0x48>)
     394:	4b0e      	ldr	r3, [pc, #56]	; (3d0 <uart915_write_cmd+0x4c>)
     396:	4798      	blx	r3
    
    // write the AT command
    usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     398:	0020      	movs	r0, r4
     39a:	4b0e      	ldr	r3, [pc, #56]	; (3d4 <uart915_write_cmd+0x50>)
     39c:	4798      	blx	r3
     39e:	b282      	uxth	r2, r0
     3a0:	0021      	movs	r1, r4
     3a2:	480d      	ldr	r0, [pc, #52]	; (3d8 <uart915_write_cmd+0x54>)
     3a4:	4b0d      	ldr	r3, [pc, #52]	; (3dc <uart915_write_cmd+0x58>)
     3a6:	4798      	blx	r3
    
	
	
    while(!flag_ok_received){
     3a8:	e007      	b.n	3ba <uart915_write_cmd+0x36>
		usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     3aa:	0020      	movs	r0, r4
     3ac:	4b09      	ldr	r3, [pc, #36]	; (3d4 <uart915_write_cmd+0x50>)
     3ae:	4798      	blx	r3
     3b0:	b282      	uxth	r2, r0
     3b2:	0021      	movs	r1, r4
     3b4:	4808      	ldr	r0, [pc, #32]	; (3d8 <uart915_write_cmd+0x54>)
     3b6:	4b09      	ldr	r3, [pc, #36]	; (3dc <uart915_write_cmd+0x58>)
     3b8:	4798      	blx	r3
    while(!flag_ok_received){
     3ba:	4b02      	ldr	r3, [pc, #8]	; (3c4 <uart915_write_cmd+0x40>)
     3bc:	781b      	ldrb	r3, [r3, #0]
     3be:	2b00      	cmp	r3, #0
     3c0:	d0f3      	beq.n	3aa <uart915_write_cmd+0x26>
	};
}
     3c2:	bd10      	pop	{r4, pc}
     3c4:	20000208 	.word	0x20000208
     3c8:	20000209 	.word	0x20000209
     3cc:	20000000 	.word	0x20000000
     3d0:	00000115 	.word	0x00000115
     3d4:	00001a39 	.word	0x00001a39
     3d8:	2000020c 	.word	0x2000020c
     3dc:	00000bd9 	.word	0x00000bd9

000003e0 <uart915_get_rssi>:
 * Return Values(s) : int16_t
 * Description      : Gets the RSSI value from the MTXDOT and returns it as a
 *  2 byte int.
 */
int16_t uart915_get_rssi(void)
{
     3e0:	b530      	push	{r4, r5, lr}
     3e2:	b091      	sub	sp, #68	; 0x44
    uint8_t rspns_buff[64] = {0};
     3e4:	2240      	movs	r2, #64	; 0x40
     3e6:	2100      	movs	r1, #0
     3e8:	4668      	mov	r0, sp
     3ea:	4b19      	ldr	r3, [pc, #100]	; (450 <uart915_get_rssi+0x70>)
     3ec:	4798      	blx	r3
    static int16_t ret_val;
    
    //uart915_write_cmd("AT+SEND\r\n");
    
    // send the RSSI command
    uart915_write_cmd("AT+RSSI\r\n");
     3ee:	4819      	ldr	r0, [pc, #100]	; (454 <uart915_get_rssi+0x74>)
     3f0:	4b19      	ldr	r3, [pc, #100]	; (458 <uart915_get_rssi+0x78>)
     3f2:	4798      	blx	r3
    uint8_t i = 0;
     3f4:	2500      	movs	r5, #0
    
    // acquire the contents of the ring buffer
    while(!ringbuff_is_empty(&uart915_ringbuff))
     3f6:	e007      	b.n	408 <uart915_get_rssi+0x28>
    {
        ringbuff_get(&uart915_ringbuff, (rspns_buff + (i++)));
     3f8:	1c6c      	adds	r4, r5, #1
     3fa:	b2e4      	uxtb	r4, r4
     3fc:	0029      	movs	r1, r5
     3fe:	4469      	add	r1, sp
     400:	4816      	ldr	r0, [pc, #88]	; (45c <uart915_get_rssi+0x7c>)
     402:	4b17      	ldr	r3, [pc, #92]	; (460 <uart915_get_rssi+0x80>)
     404:	4798      	blx	r3
     406:	0025      	movs	r5, r4
    while(!ringbuff_is_empty(&uart915_ringbuff))
     408:	4814      	ldr	r0, [pc, #80]	; (45c <uart915_get_rssi+0x7c>)
     40a:	4b16      	ldr	r3, [pc, #88]	; (464 <uart915_get_rssi+0x84>)
     40c:	4798      	blx	r3
     40e:	2800      	cmp	r0, #0
     410:	d0f2      	beq.n	3f8 <uart915_get_rssi+0x18>
    }
    
    // ensure the contents in the response buffer are a string
    rspns_buff[31] = '\0';
     412:	2300      	movs	r3, #0
     414:	466a      	mov	r2, sp
     416:	77d3      	strb	r3, [r2, #31]
    
    // reset array index
    i = 0;
     418:	2400      	movs	r4, #0
    
    // find first comma in the string
    while(rspns_buff[++i] != ',');
     41a:	3401      	adds	r4, #1
     41c:	b2e4      	uxtb	r4, r4
     41e:	466b      	mov	r3, sp
     420:	5d1b      	ldrb	r3, [r3, r4]
     422:	2b2c      	cmp	r3, #44	; 0x2c
     424:	d1f9      	bne.n	41a <uart915_get_rssi+0x3a>
    
    // delimit the string at the first found comma
    rspns_buff[i] = '\0';
     426:	2300      	movs	r3, #0
     428:	4669      	mov	r1, sp
     42a:	550b      	strb	r3, [r1, r4]

    // back up a few characters to get to the start of the number
    while(isdigit(rspns_buff[--i]));
     42c:	4b0e      	ldr	r3, [pc, #56]	; (468 <uart915_get_rssi+0x88>)
     42e:	4798      	blx	r3
     430:	3c01      	subs	r4, #1
     432:	b2e4      	uxtb	r4, r4
     434:	0022      	movs	r2, r4
     436:	466b      	mov	r3, sp
     438:	5d1b      	ldrb	r3, [r3, r4]
     43a:	18c0      	adds	r0, r0, r3
     43c:	7843      	ldrb	r3, [r0, #1]
     43e:	075b      	lsls	r3, r3, #29
     440:	d4f4      	bmi.n	42c <uart915_get_rssi+0x4c>
    
    ret_val = (int16_t) (atoi((char*) &rspns_buff[i]));
     442:	446a      	add	r2, sp
     444:	0010      	movs	r0, r2
     446:	4b09      	ldr	r3, [pc, #36]	; (46c <uart915_get_rssi+0x8c>)
     448:	4798      	blx	r3
     44a:	b200      	sxth	r0, r0
    
    // convert the number at the current spot in the string to an int
    return ret_val;
}
     44c:	b011      	add	sp, #68	; 0x44
     44e:	bd30      	pop	{r4, r5, pc}
     450:	00001a29 	.word	0x00001a29
     454:	00001b94 	.word	0x00001b94
     458:	00000385 	.word	0x00000385
     45c:	20000000 	.word	0x20000000
     460:	00000175 	.word	0x00000175
     464:	00000165 	.word	0x00000165
     468:	000019e9 	.word	0x000019e9
     46c:	0000198d 	.word	0x0000198d

00000470 <uart915_preconnect>:
 * Description      : Sends 10 "AT" and "AT+SEND" commands to he MTXDOT module.
 *  Used during receiver initialization to ensure there is a connection between 
 *  the receiver and transmitter at start up.
 */
void uart915_preconnect(void)
{
     470:	b570      	push	{r4, r5, r6, lr}
    int i = 0;
     472:	2400      	movs	r4, #0
    
    /* send 10 "AT" and "AT+SEND" commands to validate connection
     * between the receiver and transmitter */
    for(; i < 10; i++)
     474:	e005      	b.n	482 <uart915_preconnect+0x12>
    {
        uart915_write_cmd("AT\r\n");
     476:	4804      	ldr	r0, [pc, #16]	; (488 <uart915_preconnect+0x18>)
     478:	4d04      	ldr	r5, [pc, #16]	; (48c <uart915_preconnect+0x1c>)
     47a:	47a8      	blx	r5
        uart915_write_cmd("AT+SEND\r\n");  
     47c:	4804      	ldr	r0, [pc, #16]	; (490 <uart915_preconnect+0x20>)
     47e:	47a8      	blx	r5
    for(; i < 10; i++)
     480:	3401      	adds	r4, #1
     482:	2c09      	cmp	r4, #9
     484:	ddf7      	ble.n	476 <uart915_preconnect+0x6>
    }
}
     486:	bd70      	pop	{r4, r5, r6, pc}
     488:	00001ba0 	.word	0x00001ba0
     48c:	00000385 	.word	0x00000385
     490:	00001ba8 	.word	0x00001ba8

00000494 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     494:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     496:	2000      	movs	r0, #0
     498:	4b08      	ldr	r3, [pc, #32]	; (4bc <delay_init+0x28>)
     49a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     49c:	4c08      	ldr	r4, [pc, #32]	; (4c0 <delay_init+0x2c>)
     49e:	21fa      	movs	r1, #250	; 0xfa
     4a0:	0089      	lsls	r1, r1, #2
     4a2:	47a0      	blx	r4
     4a4:	4b07      	ldr	r3, [pc, #28]	; (4c4 <delay_init+0x30>)
     4a6:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     4a8:	21fa      	movs	r1, #250	; 0xfa
     4aa:	0089      	lsls	r1, r1, #2
     4ac:	47a0      	blx	r4
     4ae:	4b06      	ldr	r3, [pc, #24]	; (4c8 <delay_init+0x34>)
     4b0:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     4b2:	2205      	movs	r2, #5
     4b4:	4b05      	ldr	r3, [pc, #20]	; (4cc <delay_init+0x38>)
     4b6:	601a      	str	r2, [r3, #0]
}
     4b8:	bd10      	pop	{r4, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	00001355 	.word	0x00001355
     4c0:	00001821 	.word	0x00001821
     4c4:	20000010 	.word	0x20000010
     4c8:	20000014 	.word	0x20000014
     4cc:	e000e010 	.word	0xe000e010

000004d0 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     4d0:	e000      	b.n	4d4 <delay_cycles_ms+0x4>
{
     4d2:	0010      	movs	r0, r2
	while (n--) {
     4d4:	1e42      	subs	r2, r0, #1
     4d6:	2800      	cmp	r0, #0
     4d8:	d00c      	beq.n	4f4 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     4da:	4b07      	ldr	r3, [pc, #28]	; (4f8 <delay_cycles_ms+0x28>)
     4dc:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     4de:	2b00      	cmp	r3, #0
     4e0:	d0f7      	beq.n	4d2 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     4e2:	4906      	ldr	r1, [pc, #24]	; (4fc <delay_cycles_ms+0x2c>)
     4e4:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     4e6:	2300      	movs	r3, #0
     4e8:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     4ea:	4b04      	ldr	r3, [pc, #16]	; (4fc <delay_cycles_ms+0x2c>)
     4ec:	681b      	ldr	r3, [r3, #0]
     4ee:	03db      	lsls	r3, r3, #15
     4f0:	d5fb      	bpl.n	4ea <delay_cycles_ms+0x1a>
     4f2:	e7ee      	b.n	4d2 <delay_cycles_ms+0x2>
	}
}
     4f4:	4770      	bx	lr
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	20000010 	.word	0x20000010
     4fc:	e000e010 	.word	0xe000e010

00000500 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     500:	b500      	push	{lr}
     502:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     504:	ab01      	add	r3, sp, #4
     506:	2280      	movs	r2, #128	; 0x80
     508:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     50a:	780a      	ldrb	r2, [r1, #0]
     50c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     50e:	784a      	ldrb	r2, [r1, #1]
     510:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     512:	788a      	ldrb	r2, [r1, #2]
     514:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     516:	0019      	movs	r1, r3
     518:	4b01      	ldr	r3, [pc, #4]	; (520 <port_pin_set_config+0x20>)
     51a:	4798      	blx	r3
}
     51c:	b003      	add	sp, #12
     51e:	bd00      	pop	{pc}
     520:	0000156d 	.word	0x0000156d

00000524 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     524:	b5f0      	push	{r4, r5, r6, r7, lr}
     526:	46de      	mov	lr, fp
     528:	4657      	mov	r7, sl
     52a:	464e      	mov	r6, r9
     52c:	4645      	mov	r5, r8
     52e:	b5e0      	push	{r5, r6, r7, lr}
     530:	b085      	sub	sp, #20
     532:	4689      	mov	r9, r1
     534:	0016      	movs	r6, r2
     536:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     538:	2200      	movs	r2, #0
     53a:	2300      	movs	r3, #0
     53c:	2100      	movs	r1, #0
     53e:	468b      	mov	fp, r1
     540:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     542:	253f      	movs	r5, #63	; 0x3f
     544:	9600      	str	r6, [sp, #0]
     546:	9701      	str	r7, [sp, #4]
     548:	9002      	str	r0, [sp, #8]
     54a:	4649      	mov	r1, r9
     54c:	9103      	str	r1, [sp, #12]
     54e:	e011      	b.n	574 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     550:	2120      	movs	r1, #32
     552:	1b49      	subs	r1, r1, r5
     554:	2400      	movs	r4, #0
     556:	3401      	adds	r4, #1
     558:	40cc      	lsrs	r4, r1
     55a:	e013      	b.n	584 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     55c:	9800      	ldr	r0, [sp, #0]
     55e:	9901      	ldr	r1, [sp, #4]
     560:	1a12      	subs	r2, r2, r0
     562:	418b      	sbcs	r3, r1
			q |= bit_shift;
     564:	4659      	mov	r1, fp
     566:	4660      	mov	r0, ip
     568:	4301      	orrs	r1, r0
     56a:	468b      	mov	fp, r1
     56c:	4651      	mov	r1, sl
     56e:	4321      	orrs	r1, r4
     570:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     572:	3d01      	subs	r5, #1
     574:	2d00      	cmp	r5, #0
     576:	db23      	blt.n	5c0 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     578:	2120      	movs	r1, #32
     57a:	4249      	negs	r1, r1
     57c:	1869      	adds	r1, r5, r1
     57e:	d4e7      	bmi.n	550 <long_division+0x2c>
     580:	2401      	movs	r4, #1
     582:	408c      	lsls	r4, r1
     584:	2101      	movs	r1, #1
     586:	40a9      	lsls	r1, r5
     588:	468c      	mov	ip, r1
		r = r << 1;
     58a:	1892      	adds	r2, r2, r2
     58c:	415b      	adcs	r3, r3
     58e:	0010      	movs	r0, r2
     590:	0019      	movs	r1, r3
		if (n & bit_shift) {
     592:	9e02      	ldr	r6, [sp, #8]
     594:	4667      	mov	r7, ip
     596:	403e      	ands	r6, r7
     598:	46b1      	mov	r9, r6
     59a:	9e03      	ldr	r6, [sp, #12]
     59c:	4026      	ands	r6, r4
     59e:	46b0      	mov	r8, r6
     5a0:	464e      	mov	r6, r9
     5a2:	4647      	mov	r7, r8
     5a4:	433e      	orrs	r6, r7
     5a6:	d003      	beq.n	5b0 <long_division+0x8c>
			r |= 0x01;
     5a8:	2601      	movs	r6, #1
     5aa:	4306      	orrs	r6, r0
     5ac:	0032      	movs	r2, r6
     5ae:	000b      	movs	r3, r1
		if (r >= d) {
     5b0:	9800      	ldr	r0, [sp, #0]
     5b2:	9901      	ldr	r1, [sp, #4]
     5b4:	4299      	cmp	r1, r3
     5b6:	d8dc      	bhi.n	572 <long_division+0x4e>
     5b8:	d1d0      	bne.n	55c <long_division+0x38>
     5ba:	4290      	cmp	r0, r2
     5bc:	d8d9      	bhi.n	572 <long_division+0x4e>
     5be:	e7cd      	b.n	55c <long_division+0x38>
		}
	}

	return q;
}
     5c0:	4658      	mov	r0, fp
     5c2:	4651      	mov	r1, sl
     5c4:	b005      	add	sp, #20
     5c6:	bc3c      	pop	{r2, r3, r4, r5}
     5c8:	4690      	mov	r8, r2
     5ca:	4699      	mov	r9, r3
     5cc:	46a2      	mov	sl, r4
     5ce:	46ab      	mov	fp, r5
     5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000005d2 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5d2:	0849      	lsrs	r1, r1, #1
     5d4:	4281      	cmp	r1, r0
     5d6:	d201      	bcs.n	5dc <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5d8:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     5da:	4770      	bx	lr
     5dc:	2300      	movs	r3, #0
     5de:	e002      	b.n	5e6 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     5e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     5e2:	3301      	adds	r3, #1
     5e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     5e6:	4281      	cmp	r1, r0
     5e8:	d2fa      	bcs.n	5e0 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     5ea:	3b01      	subs	r3, #1
     5ec:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     5ee:	2bff      	cmp	r3, #255	; 0xff
     5f0:	d901      	bls.n	5f6 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5f2:	2040      	movs	r0, #64	; 0x40
     5f4:	e7f1      	b.n	5da <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     5f6:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     5f8:	2000      	movs	r0, #0
     5fa:	e7ee      	b.n	5da <_sercom_get_sync_baud_val+0x8>

000005fc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     5fc:	b570      	push	{r4, r5, r6, lr}
     5fe:	b082      	sub	sp, #8
     600:	000c      	movs	r4, r1
     602:	0015      	movs	r5, r2
     604:	aa06      	add	r2, sp, #24
     606:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     608:	0002      	movs	r2, r0
     60a:	434a      	muls	r2, r1
     60c:	42a2      	cmp	r2, r4
     60e:	d902      	bls.n	616 <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     610:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     612:	b002      	add	sp, #8
     614:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     616:	2b00      	cmp	r3, #0
     618:	d114      	bne.n	644 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     61a:	0002      	movs	r2, r0
     61c:	0008      	movs	r0, r1
     61e:	2100      	movs	r1, #0
     620:	4e1b      	ldr	r6, [pc, #108]	; (690 <_sercom_get_async_baud_val+0x94>)
     622:	47b0      	blx	r6
     624:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     626:	0022      	movs	r2, r4
     628:	2300      	movs	r3, #0
     62a:	2000      	movs	r0, #0
     62c:	4c19      	ldr	r4, [pc, #100]	; (694 <_sercom_get_async_baud_val+0x98>)
     62e:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     630:	2200      	movs	r2, #0
     632:	2301      	movs	r3, #1
     634:	1a12      	subs	r2, r2, r0
     636:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     638:	0c10      	lsrs	r0, r2, #16
     63a:	041b      	lsls	r3, r3, #16
     63c:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     63e:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     640:	2000      	movs	r0, #0
     642:	e7e6      	b.n	612 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     644:	2b01      	cmp	r3, #1
     646:	d001      	beq.n	64c <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     648:	2000      	movs	r0, #0
     64a:	e7f8      	b.n	63e <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     64c:	000a      	movs	r2, r1
     64e:	2300      	movs	r3, #0
     650:	2100      	movs	r1, #0
     652:	4e0f      	ldr	r6, [pc, #60]	; (690 <_sercom_get_async_baud_val+0x94>)
     654:	47b0      	blx	r6
     656:	0002      	movs	r2, r0
     658:	000b      	movs	r3, r1
     65a:	9200      	str	r2, [sp, #0]
     65c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     65e:	0020      	movs	r0, r4
     660:	2100      	movs	r1, #0
     662:	4e0c      	ldr	r6, [pc, #48]	; (694 <_sercom_get_async_baud_val+0x98>)
     664:	47b0      	blx	r6
     666:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     668:	2380      	movs	r3, #128	; 0x80
     66a:	019b      	lsls	r3, r3, #6
     66c:	4298      	cmp	r0, r3
     66e:	d901      	bls.n	674 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     670:	2040      	movs	r0, #64	; 0x40
     672:	e7ce      	b.n	612 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     674:	0f61      	lsrs	r1, r4, #29
     676:	00e0      	lsls	r0, r4, #3
     678:	9a00      	ldr	r2, [sp, #0]
     67a:	9b01      	ldr	r3, [sp, #4]
     67c:	4c05      	ldr	r4, [pc, #20]	; (694 <_sercom_get_async_baud_val+0x98>)
     67e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     680:	b2c0      	uxtb	r0, r0
     682:	00f3      	lsls	r3, r6, #3
     684:	b2db      	uxtb	r3, r3
     686:	1ac0      	subs	r0, r0, r3
     688:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     68a:	0340      	lsls	r0, r0, #13
     68c:	4330      	orrs	r0, r6
     68e:	e7d6      	b.n	63e <_sercom_get_async_baud_val+0x42>
     690:	00001939 	.word	0x00001939
     694:	00000525 	.word	0x00000525

00000698 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     698:	b510      	push	{r4, lr}
     69a:	b082      	sub	sp, #8
     69c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     69e:	4b0e      	ldr	r3, [pc, #56]	; (6d8 <sercom_set_gclk_generator+0x40>)
     6a0:	781b      	ldrb	r3, [r3, #0]
     6a2:	2b00      	cmp	r3, #0
     6a4:	d007      	beq.n	6b6 <sercom_set_gclk_generator+0x1e>
     6a6:	2900      	cmp	r1, #0
     6a8:	d105      	bne.n	6b6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     6aa:	4b0b      	ldr	r3, [pc, #44]	; (6d8 <sercom_set_gclk_generator+0x40>)
     6ac:	785b      	ldrb	r3, [r3, #1]
     6ae:	4283      	cmp	r3, r0
     6b0:	d010      	beq.n	6d4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6b2:	201d      	movs	r0, #29
     6b4:	e00c      	b.n	6d0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     6b6:	a901      	add	r1, sp, #4
     6b8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6ba:	2013      	movs	r0, #19
     6bc:	4b07      	ldr	r3, [pc, #28]	; (6dc <sercom_set_gclk_generator+0x44>)
     6be:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6c0:	2013      	movs	r0, #19
     6c2:	4b07      	ldr	r3, [pc, #28]	; (6e0 <sercom_set_gclk_generator+0x48>)
     6c4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <sercom_set_gclk_generator+0x40>)
     6c8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6ca:	2201      	movs	r2, #1
     6cc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     6ce:	2000      	movs	r0, #0
}
     6d0:	b002      	add	sp, #8
     6d2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     6d4:	2000      	movs	r0, #0
     6d6:	e7fb      	b.n	6d0 <sercom_set_gclk_generator+0x38>
     6d8:	200002c4 	.word	0x200002c4
     6dc:	00001489 	.word	0x00001489
     6e0:	00001401 	.word	0x00001401

000006e4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     6e4:	4b40      	ldr	r3, [pc, #256]	; (7e8 <_sercom_get_default_pad+0x104>)
     6e6:	4298      	cmp	r0, r3
     6e8:	d031      	beq.n	74e <_sercom_get_default_pad+0x6a>
     6ea:	d90a      	bls.n	702 <_sercom_get_default_pad+0x1e>
     6ec:	4b3f      	ldr	r3, [pc, #252]	; (7ec <_sercom_get_default_pad+0x108>)
     6ee:	4298      	cmp	r0, r3
     6f0:	d04d      	beq.n	78e <_sercom_get_default_pad+0xaa>
     6f2:	4b3f      	ldr	r3, [pc, #252]	; (7f0 <_sercom_get_default_pad+0x10c>)
     6f4:	4298      	cmp	r0, r3
     6f6:	d05a      	beq.n	7ae <_sercom_get_default_pad+0xca>
     6f8:	4b3e      	ldr	r3, [pc, #248]	; (7f4 <_sercom_get_default_pad+0x110>)
     6fa:	4298      	cmp	r0, r3
     6fc:	d037      	beq.n	76e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     6fe:	2000      	movs	r0, #0
}
     700:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     702:	4b3d      	ldr	r3, [pc, #244]	; (7f8 <_sercom_get_default_pad+0x114>)
     704:	4298      	cmp	r0, r3
     706:	d00c      	beq.n	722 <_sercom_get_default_pad+0x3e>
     708:	4b3c      	ldr	r3, [pc, #240]	; (7fc <_sercom_get_default_pad+0x118>)
     70a:	4298      	cmp	r0, r3
     70c:	d1f7      	bne.n	6fe <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     70e:	2901      	cmp	r1, #1
     710:	d05f      	beq.n	7d2 <_sercom_get_default_pad+0xee>
     712:	2900      	cmp	r1, #0
     714:	d015      	beq.n	742 <_sercom_get_default_pad+0x5e>
     716:	2902      	cmp	r1, #2
     718:	d015      	beq.n	746 <_sercom_get_default_pad+0x62>
     71a:	2903      	cmp	r1, #3
     71c:	d015      	beq.n	74a <_sercom_get_default_pad+0x66>
	return 0;
     71e:	2000      	movs	r0, #0
     720:	e7ee      	b.n	700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     722:	2901      	cmp	r1, #1
     724:	d053      	beq.n	7ce <_sercom_get_default_pad+0xea>
     726:	2900      	cmp	r1, #0
     728:	d005      	beq.n	736 <_sercom_get_default_pad+0x52>
     72a:	2902      	cmp	r1, #2
     72c:	d005      	beq.n	73a <_sercom_get_default_pad+0x56>
     72e:	2903      	cmp	r1, #3
     730:	d005      	beq.n	73e <_sercom_get_default_pad+0x5a>
	return 0;
     732:	2000      	movs	r0, #0
     734:	e7e4      	b.n	700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     736:	4832      	ldr	r0, [pc, #200]	; (800 <_sercom_get_default_pad+0x11c>)
     738:	e7e2      	b.n	700 <_sercom_get_default_pad+0x1c>
     73a:	4832      	ldr	r0, [pc, #200]	; (804 <_sercom_get_default_pad+0x120>)
     73c:	e7e0      	b.n	700 <_sercom_get_default_pad+0x1c>
     73e:	4832      	ldr	r0, [pc, #200]	; (808 <_sercom_get_default_pad+0x124>)
     740:	e7de      	b.n	700 <_sercom_get_default_pad+0x1c>
     742:	2003      	movs	r0, #3
     744:	e7dc      	b.n	700 <_sercom_get_default_pad+0x1c>
     746:	4831      	ldr	r0, [pc, #196]	; (80c <_sercom_get_default_pad+0x128>)
     748:	e7da      	b.n	700 <_sercom_get_default_pad+0x1c>
     74a:	4831      	ldr	r0, [pc, #196]	; (810 <_sercom_get_default_pad+0x12c>)
     74c:	e7d8      	b.n	700 <_sercom_get_default_pad+0x1c>
     74e:	2901      	cmp	r1, #1
     750:	d041      	beq.n	7d6 <_sercom_get_default_pad+0xf2>
     752:	2900      	cmp	r1, #0
     754:	d005      	beq.n	762 <_sercom_get_default_pad+0x7e>
     756:	2902      	cmp	r1, #2
     758:	d005      	beq.n	766 <_sercom_get_default_pad+0x82>
     75a:	2903      	cmp	r1, #3
     75c:	d005      	beq.n	76a <_sercom_get_default_pad+0x86>
	return 0;
     75e:	2000      	movs	r0, #0
     760:	e7ce      	b.n	700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     762:	482c      	ldr	r0, [pc, #176]	; (814 <_sercom_get_default_pad+0x130>)
     764:	e7cc      	b.n	700 <_sercom_get_default_pad+0x1c>
     766:	482c      	ldr	r0, [pc, #176]	; (818 <_sercom_get_default_pad+0x134>)
     768:	e7ca      	b.n	700 <_sercom_get_default_pad+0x1c>
     76a:	482c      	ldr	r0, [pc, #176]	; (81c <_sercom_get_default_pad+0x138>)
     76c:	e7c8      	b.n	700 <_sercom_get_default_pad+0x1c>
     76e:	2901      	cmp	r1, #1
     770:	d033      	beq.n	7da <_sercom_get_default_pad+0xf6>
     772:	2900      	cmp	r1, #0
     774:	d005      	beq.n	782 <_sercom_get_default_pad+0x9e>
     776:	2902      	cmp	r1, #2
     778:	d005      	beq.n	786 <_sercom_get_default_pad+0xa2>
     77a:	2903      	cmp	r1, #3
     77c:	d005      	beq.n	78a <_sercom_get_default_pad+0xa6>
	return 0;
     77e:	2000      	movs	r0, #0
     780:	e7be      	b.n	700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     782:	4827      	ldr	r0, [pc, #156]	; (820 <_sercom_get_default_pad+0x13c>)
     784:	e7bc      	b.n	700 <_sercom_get_default_pad+0x1c>
     786:	4827      	ldr	r0, [pc, #156]	; (824 <_sercom_get_default_pad+0x140>)
     788:	e7ba      	b.n	700 <_sercom_get_default_pad+0x1c>
     78a:	4827      	ldr	r0, [pc, #156]	; (828 <_sercom_get_default_pad+0x144>)
     78c:	e7b8      	b.n	700 <_sercom_get_default_pad+0x1c>
     78e:	2901      	cmp	r1, #1
     790:	d025      	beq.n	7de <_sercom_get_default_pad+0xfa>
     792:	2900      	cmp	r1, #0
     794:	d005      	beq.n	7a2 <_sercom_get_default_pad+0xbe>
     796:	2902      	cmp	r1, #2
     798:	d005      	beq.n	7a6 <_sercom_get_default_pad+0xc2>
     79a:	2903      	cmp	r1, #3
     79c:	d005      	beq.n	7aa <_sercom_get_default_pad+0xc6>
	return 0;
     79e:	2000      	movs	r0, #0
     7a0:	e7ae      	b.n	700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7a2:	4822      	ldr	r0, [pc, #136]	; (82c <_sercom_get_default_pad+0x148>)
     7a4:	e7ac      	b.n	700 <_sercom_get_default_pad+0x1c>
     7a6:	4822      	ldr	r0, [pc, #136]	; (830 <_sercom_get_default_pad+0x14c>)
     7a8:	e7aa      	b.n	700 <_sercom_get_default_pad+0x1c>
     7aa:	4822      	ldr	r0, [pc, #136]	; (834 <_sercom_get_default_pad+0x150>)
     7ac:	e7a8      	b.n	700 <_sercom_get_default_pad+0x1c>
     7ae:	2901      	cmp	r1, #1
     7b0:	d017      	beq.n	7e2 <_sercom_get_default_pad+0xfe>
     7b2:	2900      	cmp	r1, #0
     7b4:	d005      	beq.n	7c2 <_sercom_get_default_pad+0xde>
     7b6:	2902      	cmp	r1, #2
     7b8:	d005      	beq.n	7c6 <_sercom_get_default_pad+0xe2>
     7ba:	2903      	cmp	r1, #3
     7bc:	d005      	beq.n	7ca <_sercom_get_default_pad+0xe6>
	return 0;
     7be:	2000      	movs	r0, #0
     7c0:	e79e      	b.n	700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7c2:	481d      	ldr	r0, [pc, #116]	; (838 <_sercom_get_default_pad+0x154>)
     7c4:	e79c      	b.n	700 <_sercom_get_default_pad+0x1c>
     7c6:	481d      	ldr	r0, [pc, #116]	; (83c <_sercom_get_default_pad+0x158>)
     7c8:	e79a      	b.n	700 <_sercom_get_default_pad+0x1c>
     7ca:	481d      	ldr	r0, [pc, #116]	; (840 <_sercom_get_default_pad+0x15c>)
     7cc:	e798      	b.n	700 <_sercom_get_default_pad+0x1c>
     7ce:	481d      	ldr	r0, [pc, #116]	; (844 <_sercom_get_default_pad+0x160>)
     7d0:	e796      	b.n	700 <_sercom_get_default_pad+0x1c>
     7d2:	481d      	ldr	r0, [pc, #116]	; (848 <_sercom_get_default_pad+0x164>)
     7d4:	e794      	b.n	700 <_sercom_get_default_pad+0x1c>
     7d6:	481d      	ldr	r0, [pc, #116]	; (84c <_sercom_get_default_pad+0x168>)
     7d8:	e792      	b.n	700 <_sercom_get_default_pad+0x1c>
     7da:	481d      	ldr	r0, [pc, #116]	; (850 <_sercom_get_default_pad+0x16c>)
     7dc:	e790      	b.n	700 <_sercom_get_default_pad+0x1c>
     7de:	481d      	ldr	r0, [pc, #116]	; (854 <_sercom_get_default_pad+0x170>)
     7e0:	e78e      	b.n	700 <_sercom_get_default_pad+0x1c>
     7e2:	481d      	ldr	r0, [pc, #116]	; (858 <_sercom_get_default_pad+0x174>)
     7e4:	e78c      	b.n	700 <_sercom_get_default_pad+0x1c>
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	42001000 	.word	0x42001000
     7ec:	42001800 	.word	0x42001800
     7f0:	42001c00 	.word	0x42001c00
     7f4:	42001400 	.word	0x42001400
     7f8:	42000800 	.word	0x42000800
     7fc:	42000c00 	.word	0x42000c00
     800:	00040003 	.word	0x00040003
     804:	00060003 	.word	0x00060003
     808:	00070003 	.word	0x00070003
     80c:	001e0003 	.word	0x001e0003
     810:	001f0003 	.word	0x001f0003
     814:	00080003 	.word	0x00080003
     818:	000a0003 	.word	0x000a0003
     81c:	000b0003 	.word	0x000b0003
     820:	00100003 	.word	0x00100003
     824:	00120003 	.word	0x00120003
     828:	00130003 	.word	0x00130003
     82c:	000c0003 	.word	0x000c0003
     830:	000e0003 	.word	0x000e0003
     834:	000f0003 	.word	0x000f0003
     838:	00160003 	.word	0x00160003
     83c:	00180003 	.word	0x00180003
     840:	00190003 	.word	0x00190003
     844:	00050003 	.word	0x00050003
     848:	00010003 	.word	0x00010003
     84c:	00090003 	.word	0x00090003
     850:	00110003 	.word	0x00110003
     854:	000d0003 	.word	0x000d0003
     858:	00170003 	.word	0x00170003

0000085c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     85c:	b530      	push	{r4, r5, lr}
     85e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     860:	4c0a      	ldr	r4, [pc, #40]	; (88c <_sercom_get_sercom_inst_index+0x30>)
     862:	466b      	mov	r3, sp
     864:	0022      	movs	r2, r4
     866:	ca32      	ldmia	r2!, {r1, r4, r5}
     868:	c332      	stmia	r3!, {r1, r4, r5}
     86a:	ca32      	ldmia	r2!, {r1, r4, r5}
     86c:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     86e:	2300      	movs	r3, #0
     870:	2b05      	cmp	r3, #5
     872:	d808      	bhi.n	886 <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     874:	009a      	lsls	r2, r3, #2
     876:	4669      	mov	r1, sp
     878:	5852      	ldr	r2, [r2, r1]
     87a:	4282      	cmp	r2, r0
     87c:	d001      	beq.n	882 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     87e:	3301      	adds	r3, #1
     880:	e7f6      	b.n	870 <_sercom_get_sercom_inst_index+0x14>
			return i;
     882:	b2d8      	uxtb	r0, r3
     884:	e000      	b.n	888 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     886:	2000      	movs	r0, #0
}
     888:	b007      	add	sp, #28
     88a:	bd30      	pop	{r4, r5, pc}
     88c:	00001bb4 	.word	0x00001bb4

00000890 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     890:	b5f0      	push	{r4, r5, r6, r7, lr}
     892:	46de      	mov	lr, fp
     894:	4657      	mov	r7, sl
     896:	464e      	mov	r6, r9
     898:	4645      	mov	r5, r8
     89a:	b5e0      	push	{r5, r6, r7, lr}
     89c:	b087      	sub	sp, #28
     89e:	0004      	movs	r4, r0
     8a0:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a2:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8a4:	0030      	movs	r0, r6
     8a6:	4b6b      	ldr	r3, [pc, #428]	; (a54 <_usart_set_config+0x1c4>)
     8a8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8aa:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     8ac:	2200      	movs	r2, #0
     8ae:	230e      	movs	r3, #14
     8b0:	a902      	add	r1, sp, #8
     8b2:	468c      	mov	ip, r1
     8b4:	4463      	add	r3, ip
     8b6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     8b8:	8a2a      	ldrh	r2, [r5, #16]
     8ba:	2380      	movs	r3, #128	; 0x80
     8bc:	01db      	lsls	r3, r3, #7
     8be:	429a      	cmp	r2, r3
     8c0:	d03b      	beq.n	93a <_usart_set_config+0xaa>
     8c2:	d90c      	bls.n	8de <_usart_set_config+0x4e>
     8c4:	23c0      	movs	r3, #192	; 0xc0
     8c6:	01db      	lsls	r3, r3, #7
     8c8:	429a      	cmp	r2, r3
     8ca:	d031      	beq.n	930 <_usart_set_config+0xa0>
     8cc:	2380      	movs	r3, #128	; 0x80
     8ce:	021b      	lsls	r3, r3, #8
     8d0:	429a      	cmp	r2, r3
     8d2:	d10d      	bne.n	8f0 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     8d4:	2303      	movs	r3, #3
     8d6:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8d8:	2300      	movs	r3, #0
     8da:	4699      	mov	r9, r3
			break;
     8dc:	e00c      	b.n	8f8 <_usart_set_config+0x68>
	switch (config->sample_rate) {
     8de:	2380      	movs	r3, #128	; 0x80
     8e0:	019b      	lsls	r3, r3, #6
     8e2:	429a      	cmp	r2, r3
     8e4:	d104      	bne.n	8f0 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8e6:	2310      	movs	r3, #16
     8e8:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8ea:	3b0f      	subs	r3, #15
     8ec:	4699      	mov	r9, r3
			break;
     8ee:	e003      	b.n	8f8 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8f0:	2310      	movs	r3, #16
     8f2:	469a      	mov	sl, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8f4:	2300      	movs	r3, #0
     8f6:	4699      	mov	r9, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     8f8:	682b      	ldr	r3, [r5, #0]
     8fa:	68e9      	ldr	r1, [r5, #12]
     8fc:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
     8fe:	6969      	ldr	r1, [r5, #20]
     900:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     902:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     904:	7e2a      	ldrb	r2, [r5, #24]
     906:	0212      	lsls	r2, r2, #8
		config->sample_rate |
     908:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     90a:	2226      	movs	r2, #38	; 0x26
     90c:	5caf      	ldrb	r7, [r5, r2]
     90e:	077f      	lsls	r7, r7, #29
	ctrla = (uint32_t)config->data_order |
     910:	431f      	orrs	r7, r3
     912:	9703      	str	r7, [sp, #12]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     914:	686b      	ldr	r3, [r5, #4]
     916:	4698      	mov	r8, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     918:	2b00      	cmp	r3, #0
     91a:	d021      	beq.n	960 <_usart_set_config+0xd0>
     91c:	2380      	movs	r3, #128	; 0x80
     91e:	055b      	lsls	r3, r3, #21
     920:	4598      	cmp	r8, r3
     922:	d13e      	bne.n	9a2 <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     924:	2327      	movs	r3, #39	; 0x27
     926:	5ceb      	ldrb	r3, [r5, r3]
     928:	2b00      	cmp	r3, #0
     92a:	d00b      	beq.n	944 <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
     92c:	2000      	movs	r0, #0
     92e:	e039      	b.n	9a4 <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     930:	2308      	movs	r3, #8
     932:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     934:	3b07      	subs	r3, #7
     936:	4699      	mov	r9, r3
			break;
     938:	e7de      	b.n	8f8 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     93a:	2308      	movs	r3, #8
     93c:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     93e:	2300      	movs	r3, #0
     940:	4699      	mov	r9, r3
     942:	e7d9      	b.n	8f8 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     944:	6a2b      	ldr	r3, [r5, #32]
     946:	4699      	mov	r9, r3
     948:	b2c0      	uxtb	r0, r0
     94a:	4b43      	ldr	r3, [pc, #268]	; (a58 <_usart_set_config+0x1c8>)
     94c:	4798      	blx	r3
     94e:	0001      	movs	r1, r0
     950:	220e      	movs	r2, #14
     952:	ab02      	add	r3, sp, #8
     954:	469c      	mov	ip, r3
     956:	4462      	add	r2, ip
     958:	4648      	mov	r0, r9
     95a:	4b40      	ldr	r3, [pc, #256]	; (a5c <_usart_set_config+0x1cc>)
     95c:	4798      	blx	r3
     95e:	e021      	b.n	9a4 <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     960:	2327      	movs	r3, #39	; 0x27
     962:	5ceb      	ldrb	r3, [r5, r3]
     964:	2b00      	cmp	r3, #0
     966:	d00b      	beq.n	980 <_usart_set_config+0xf0>
				status_code =
     968:	4653      	mov	r3, sl
     96a:	9300      	str	r3, [sp, #0]
     96c:	464b      	mov	r3, r9
     96e:	220e      	movs	r2, #14
     970:	a902      	add	r1, sp, #8
     972:	468c      	mov	ip, r1
     974:	4462      	add	r2, ip
     976:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     978:	6a28      	ldr	r0, [r5, #32]
     97a:	4f39      	ldr	r7, [pc, #228]	; (a60 <_usart_set_config+0x1d0>)
     97c:	47b8      	blx	r7
     97e:	e011      	b.n	9a4 <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     980:	6a2b      	ldr	r3, [r5, #32]
     982:	469b      	mov	fp, r3
     984:	b2c0      	uxtb	r0, r0
     986:	4b34      	ldr	r3, [pc, #208]	; (a58 <_usart_set_config+0x1c8>)
     988:	4798      	blx	r3
     98a:	0001      	movs	r1, r0
				status_code =
     98c:	4653      	mov	r3, sl
     98e:	9300      	str	r3, [sp, #0]
     990:	464b      	mov	r3, r9
     992:	220e      	movs	r2, #14
     994:	a802      	add	r0, sp, #8
     996:	4684      	mov	ip, r0
     998:	4462      	add	r2, ip
     99a:	4658      	mov	r0, fp
     99c:	4f30      	ldr	r7, [pc, #192]	; (a60 <_usart_set_config+0x1d0>)
     99e:	47b8      	blx	r7
     9a0:	e000      	b.n	9a4 <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
     9a2:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     9a4:	2800      	cmp	r0, #0
     9a6:	d146      	bne.n	a36 <_usart_set_config+0x1a6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     9a8:	7e6b      	ldrb	r3, [r5, #25]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d001      	beq.n	9b2 <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     9ae:	7eab      	ldrb	r3, [r5, #26]
     9b0:	73b3      	strb	r3, [r6, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9b2:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     9b4:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     9b6:	2b00      	cmp	r3, #0
     9b8:	d1fb      	bne.n	9b2 <_usart_set_config+0x122>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     9ba:	330e      	adds	r3, #14
     9bc:	aa02      	add	r2, sp, #8
     9be:	4694      	mov	ip, r2
     9c0:	4463      	add	r3, ip
     9c2:	881b      	ldrh	r3, [r3, #0]
     9c4:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     9c6:	4643      	mov	r3, r8
     9c8:	9f03      	ldr	r7, [sp, #12]
     9ca:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     9cc:	2327      	movs	r3, #39	; 0x27
     9ce:	5ceb      	ldrb	r3, [r5, r3]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d101      	bne.n	9d8 <_usart_set_config+0x148>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     9d4:	3304      	adds	r3, #4
     9d6:	431f      	orrs	r7, r3
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     9d8:	7e6a      	ldrb	r2, [r5, #25]
     9da:	0292      	lsls	r2, r2, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     9dc:	7f2b      	ldrb	r3, [r5, #28]
     9de:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     9e0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     9e2:	7f6b      	ldrb	r3, [r5, #29]
     9e4:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     9e6:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9e8:	2324      	movs	r3, #36	; 0x24
     9ea:	5ceb      	ldrb	r3, [r5, r3]
     9ec:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     9ee:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     9f0:	2325      	movs	r3, #37	; 0x25
     9f2:	5ceb      	ldrb	r3, [r5, r3]
     9f4:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9f6:	431a      	orrs	r2, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     9f8:	7aab      	ldrb	r3, [r5, #10]
     9fa:	431a      	orrs	r2, r3
	ctrlb |= (uint32_t)config->character_size;
     9fc:	7aeb      	ldrb	r3, [r5, #11]
     9fe:	431a      	orrs	r2, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     a00:	892b      	ldrh	r3, [r5, #8]
     a02:	2bff      	cmp	r3, #255	; 0xff
     a04:	d01e      	beq.n	a44 <_usart_set_config+0x1b4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     a06:	2180      	movs	r1, #128	; 0x80
     a08:	0449      	lsls	r1, r1, #17
     a0a:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
     a0c:	431a      	orrs	r2, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a0e:	232c      	movs	r3, #44	; 0x2c
     a10:	5ceb      	ldrb	r3, [r5, r3]
     a12:	2b00      	cmp	r3, #0
     a14:	d103      	bne.n	a1e <_usart_set_config+0x18e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a16:	4b13      	ldr	r3, [pc, #76]	; (a64 <_usart_set_config+0x1d4>)
     a18:	789b      	ldrb	r3, [r3, #2]
     a1a:	079b      	lsls	r3, r3, #30
     a1c:	d501      	bpl.n	a22 <_usart_set_config+0x192>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     a1e:	2380      	movs	r3, #128	; 0x80
     a20:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     a22:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     a24:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     a26:	2b00      	cmp	r3, #0
     a28:	d1fb      	bne.n	a22 <_usart_set_config+0x192>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     a2a:	6072      	str	r2, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a2c:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     a2e:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     a30:	2b00      	cmp	r3, #0
     a32:	d1fb      	bne.n	a2c <_usart_set_config+0x19c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     a34:	6037      	str	r7, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
     a36:	b007      	add	sp, #28
     a38:	bc3c      	pop	{r2, r3, r4, r5}
     a3a:	4690      	mov	r8, r2
     a3c:	4699      	mov	r9, r3
     a3e:	46a2      	mov	sl, r4
     a40:	46ab      	mov	fp, r5
     a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
     a44:	7eeb      	ldrb	r3, [r5, #27]
     a46:	2b00      	cmp	r3, #0
     a48:	d0e1      	beq.n	a0e <_usart_set_config+0x17e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     a4a:	2380      	movs	r3, #128	; 0x80
     a4c:	04db      	lsls	r3, r3, #19
     a4e:	431f      	orrs	r7, r3
     a50:	e7dd      	b.n	a0e <_usart_set_config+0x17e>
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	0000085d 	.word	0x0000085d
     a58:	000014a5 	.word	0x000014a5
     a5c:	000005d3 	.word	0x000005d3
     a60:	000005fd 	.word	0x000005fd
     a64:	41002000 	.word	0x41002000

00000a68 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a68:	b5f0      	push	{r4, r5, r6, r7, lr}
     a6a:	b089      	sub	sp, #36	; 0x24
     a6c:	0006      	movs	r6, r0
     a6e:	000c      	movs	r4, r1
     a70:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a72:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a74:	0008      	movs	r0, r1
     a76:	4b42      	ldr	r3, [pc, #264]	; (b80 <usart_init+0x118>)
     a78:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a7a:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a7c:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a7e:	6823      	ldr	r3, [r4, #0]
     a80:	07db      	lsls	r3, r3, #31
     a82:	d503      	bpl.n	a8c <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     a84:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     a86:	0028      	movs	r0, r5
     a88:	b009      	add	sp, #36	; 0x24
     a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a8c:	6823      	ldr	r3, [r4, #0]
     a8e:	079b      	lsls	r3, r3, #30
     a90:	d501      	bpl.n	a96 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
     a92:	251c      	movs	r5, #28
     a94:	e7f7      	b.n	a86 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a96:	2301      	movs	r3, #1
     a98:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a9a:	4a3a      	ldr	r2, [pc, #232]	; (b84 <usart_init+0x11c>)
     a9c:	6a11      	ldr	r1, [r2, #32]
     a9e:	430b      	orrs	r3, r1
     aa0:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     aa2:	252d      	movs	r5, #45	; 0x2d
     aa4:	5d7b      	ldrb	r3, [r7, r5]
     aa6:	a907      	add	r1, sp, #28
     aa8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     aaa:	b2c3      	uxtb	r3, r0
     aac:	9301      	str	r3, [sp, #4]
     aae:	0018      	movs	r0, r3
     ab0:	4b35      	ldr	r3, [pc, #212]	; (b88 <usart_init+0x120>)
     ab2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ab4:	9801      	ldr	r0, [sp, #4]
     ab6:	4b35      	ldr	r3, [pc, #212]	; (b8c <usart_init+0x124>)
     ab8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     aba:	5d78      	ldrb	r0, [r7, r5]
     abc:	2100      	movs	r1, #0
     abe:	4b34      	ldr	r3, [pc, #208]	; (b90 <usart_init+0x128>)
     ac0:	4798      	blx	r3
	module->character_size = config->character_size;
     ac2:	7afb      	ldrb	r3, [r7, #11]
     ac4:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
     ac6:	2324      	movs	r3, #36	; 0x24
     ac8:	5cfb      	ldrb	r3, [r7, r3]
     aca:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     acc:	2325      	movs	r3, #37	; 0x25
     ace:	5cfb      	ldrb	r3, [r7, r3]
     ad0:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     ad2:	7efb      	ldrb	r3, [r7, #27]
     ad4:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     ad6:	7f3b      	ldrb	r3, [r7, #28]
     ad8:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
     ada:	0039      	movs	r1, r7
     adc:	0030      	movs	r0, r6
     ade:	4b2d      	ldr	r3, [pc, #180]	; (b94 <usart_init+0x12c>)
     ae0:	4798      	blx	r3
     ae2:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
     ae4:	d1cf      	bne.n	a86 <usart_init+0x1e>
     ae6:	ab06      	add	r3, sp, #24
     ae8:	2280      	movs	r2, #128	; 0x80
     aea:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     aec:	2200      	movs	r2, #0
     aee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     af0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     af2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     af6:	9302      	str	r3, [sp, #8]
     af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     afa:	9303      	str	r3, [sp, #12]
     afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     afe:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
     b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b02:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
     b04:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
     b06:	2700      	movs	r7, #0
     b08:	e006      	b.n	b18 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b0a:	0039      	movs	r1, r7
     b0c:	0020      	movs	r0, r4
     b0e:	4b22      	ldr	r3, [pc, #136]	; (b98 <usart_init+0x130>)
     b10:	4798      	blx	r3
     b12:	e008      	b.n	b26 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
     b14:	3701      	adds	r7, #1
     b16:	b2ff      	uxtb	r7, r7
     b18:	2f03      	cmp	r7, #3
     b1a:	d80d      	bhi.n	b38 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b1c:	00bb      	lsls	r3, r7, #2
     b1e:	aa02      	add	r2, sp, #8
     b20:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     b22:	2800      	cmp	r0, #0
     b24:	d0f1      	beq.n	b0a <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
     b26:	1c43      	adds	r3, r0, #1
     b28:	d0f4      	beq.n	b14 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b2a:	a906      	add	r1, sp, #24
     b2c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b2e:	0c00      	lsrs	r0, r0, #16
     b30:	b2c0      	uxtb	r0, r0
     b32:	4b1a      	ldr	r3, [pc, #104]	; (b9c <usart_init+0x134>)
     b34:	4798      	blx	r3
     b36:	e7ed      	b.n	b14 <usart_init+0xac>
     b38:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     b3a:	2a05      	cmp	r2, #5
     b3c:	d806      	bhi.n	b4c <usart_init+0xe4>
		module->callback[i]            = NULL;
     b3e:	1c93      	adds	r3, r2, #2
     b40:	009b      	lsls	r3, r3, #2
     b42:	18f3      	adds	r3, r6, r3
     b44:	2100      	movs	r1, #0
     b46:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     b48:	3201      	adds	r2, #1
     b4a:	e7f6      	b.n	b3a <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
     b4c:	2200      	movs	r2, #0
     b4e:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     b50:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     b52:	2300      	movs	r3, #0
     b54:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     b56:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     b58:	3230      	adds	r2, #48	; 0x30
     b5a:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
     b5c:	3201      	adds	r2, #1
     b5e:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
     b60:	3201      	adds	r2, #1
     b62:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
     b64:	3201      	adds	r2, #1
     b66:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     b68:	6830      	ldr	r0, [r6, #0]
     b6a:	4b05      	ldr	r3, [pc, #20]	; (b80 <usart_init+0x118>)
     b6c:	4798      	blx	r3
     b6e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     b70:	490b      	ldr	r1, [pc, #44]	; (ba0 <usart_init+0x138>)
     b72:	4b0c      	ldr	r3, [pc, #48]	; (ba4 <usart_init+0x13c>)
     b74:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b76:	00a4      	lsls	r4, r4, #2
     b78:	4b0b      	ldr	r3, [pc, #44]	; (ba8 <usart_init+0x140>)
     b7a:	50e6      	str	r6, [r4, r3]
	return status_code;
     b7c:	e783      	b.n	a86 <usart_init+0x1e>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	0000085d 	.word	0x0000085d
     b84:	40000400 	.word	0x40000400
     b88:	00001489 	.word	0x00001489
     b8c:	00001401 	.word	0x00001401
     b90:	00000699 	.word	0x00000699
     b94:	00000891 	.word	0x00000891
     b98:	000006e5 	.word	0x000006e5
     b9c:	0000156d 	.word	0x0000156d
     ba0:	00000d0d 	.word	0x00000d0d
     ba4:	00000eb1 	.word	0x00000eb1
     ba8:	20000300 	.word	0x20000300

00000bac <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bac:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     bae:	79c2      	ldrb	r2, [r0, #7]
     bb0:	2a00      	cmp	r2, #0
     bb2:	d101      	bne.n	bb8 <usart_write_wait+0xc>
		return STATUS_ERR_DENIED;
     bb4:	201c      	movs	r0, #28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     bb6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     bb8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     bba:	b292      	uxth	r2, r2
     bbc:	2a00      	cmp	r2, #0
     bbe:	d001      	beq.n	bc4 <usart_write_wait+0x18>
		return STATUS_BUSY;
     bc0:	2005      	movs	r0, #5
     bc2:	e7f8      	b.n	bb6 <usart_write_wait+0xa>
	return (usart_hw->SYNCBUSY.reg);
     bc4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     bc6:	2a00      	cmp	r2, #0
     bc8:	d1fc      	bne.n	bc4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     bca:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     bcc:	7e1a      	ldrb	r2, [r3, #24]
     bce:	0792      	lsls	r2, r2, #30
     bd0:	d5fc      	bpl.n	bcc <usart_write_wait+0x20>
	return STATUS_OK;
     bd2:	2000      	movs	r0, #0
     bd4:	e7ef      	b.n	bb6 <usart_write_wait+0xa>
	...

00000bd8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bda:	46c6      	mov	lr, r8
     bdc:	b500      	push	{lr}
     bde:	0004      	movs	r4, r0
     be0:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     be2:	2a00      	cmp	r2, #0
     be4:	d103      	bne.n	bee <usart_write_buffer_wait+0x16>
		return STATUS_ERR_INVALID_ARG;
     be6:	2017      	movs	r0, #23
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     be8:	bc04      	pop	{r2}
     bea:	4690      	mov	r8, r2
     bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     bee:	79c3      	ldrb	r3, [r0, #7]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d101      	bne.n	bf8 <usart_write_buffer_wait+0x20>
		return STATUS_ERR_DENIED;
     bf4:	201c      	movs	r0, #28
     bf6:	e7f7      	b.n	be8 <usart_write_buffer_wait+0x10>
	SercomUsart *const usart_hw = &(module->hw->USART);
     bf8:	6806      	ldr	r6, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     bfa:	69f3      	ldr	r3, [r6, #28]
	while (usart_is_syncing(module)) {
     bfc:	2b00      	cmp	r3, #0
     bfe:	d1fc      	bne.n	bfa <usart_write_buffer_wait+0x22>
     c00:	2000      	movs	r0, #0
     c02:	e00c      	b.n	c1e <usart_write_buffer_wait+0x46>
		uint16_t data_to_send = tx_data[tx_pos++];
     c04:	1c43      	adds	r3, r0, #1
     c06:	b29b      	uxth	r3, r3
     c08:	4698      	mov	r8, r3
     c0a:	5c2b      	ldrb	r3, [r5, r0]
     c0c:	b299      	uxth	r1, r3
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c0e:	7962      	ldrb	r2, [r4, #5]
     c10:	2a01      	cmp	r2, #1
     c12:	d014      	beq.n	c3e <usart_write_buffer_wait+0x66>
		usart_write_wait(module, data_to_send);
     c14:	0020      	movs	r0, r4
     c16:	4b18      	ldr	r3, [pc, #96]	; (c78 <usart_write_buffer_wait+0xa0>)
     c18:	4798      	blx	r3
	while (length--) {
     c1a:	4640      	mov	r0, r8
     c1c:	003a      	movs	r2, r7
     c1e:	1e57      	subs	r7, r2, #1
     c20:	b2bf      	uxth	r7, r7
     c22:	2a00      	cmp	r2, #0
     c24:	d013      	beq.n	c4e <usart_write_buffer_wait+0x76>
     c26:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c28:	4a14      	ldr	r2, [pc, #80]	; (c7c <usart_write_buffer_wait+0xa4>)
     c2a:	4293      	cmp	r3, r2
     c2c:	d8ea      	bhi.n	c04 <usart_write_buffer_wait+0x2c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     c2e:	7e32      	ldrb	r2, [r6, #24]
     c30:	07d2      	lsls	r2, r2, #31
     c32:	d4e7      	bmi.n	c04 <usart_write_buffer_wait+0x2c>
			} else if (i == USART_TIMEOUT) {
     c34:	4a11      	ldr	r2, [pc, #68]	; (c7c <usart_write_buffer_wait+0xa4>)
     c36:	4293      	cmp	r3, r2
     c38:	d019      	beq.n	c6e <usart_write_buffer_wait+0x96>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c3a:	3301      	adds	r3, #1
     c3c:	e7f4      	b.n	c28 <usart_write_buffer_wait+0x50>
			data_to_send |= (tx_data[tx_pos++] << 8);
     c3e:	3002      	adds	r0, #2
     c40:	4642      	mov	r2, r8
     c42:	5ca9      	ldrb	r1, [r5, r2]
     c44:	0209      	lsls	r1, r1, #8
     c46:	4319      	orrs	r1, r3
     c48:	b283      	uxth	r3, r0
     c4a:	4698      	mov	r8, r3
     c4c:	e7e2      	b.n	c14 <usart_write_buffer_wait+0x3c>
     c4e:	2300      	movs	r3, #0
     c50:	e000      	b.n	c54 <usart_write_buffer_wait+0x7c>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c52:	3301      	adds	r3, #1
     c54:	4a09      	ldr	r2, [pc, #36]	; (c7c <usart_write_buffer_wait+0xa4>)
     c56:	4293      	cmp	r3, r2
     c58:	d807      	bhi.n	c6a <usart_write_buffer_wait+0x92>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     c5a:	7e32      	ldrb	r2, [r6, #24]
     c5c:	0792      	lsls	r2, r2, #30
     c5e:	d408      	bmi.n	c72 <usart_write_buffer_wait+0x9a>
		} else if (i == USART_TIMEOUT) {
     c60:	4a06      	ldr	r2, [pc, #24]	; (c7c <usart_write_buffer_wait+0xa4>)
     c62:	4293      	cmp	r3, r2
     c64:	d1f5      	bne.n	c52 <usart_write_buffer_wait+0x7a>
			return STATUS_ERR_TIMEOUT;
     c66:	2012      	movs	r0, #18
     c68:	e7be      	b.n	be8 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
     c6a:	2000      	movs	r0, #0
     c6c:	e7bc      	b.n	be8 <usart_write_buffer_wait+0x10>
				return STATUS_ERR_TIMEOUT;
     c6e:	2012      	movs	r0, #18
     c70:	e7ba      	b.n	be8 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
     c72:	2000      	movs	r0, #0
     c74:	e7b8      	b.n	be8 <usart_write_buffer_wait+0x10>
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	00000bad 	.word	0x00000bad
     c7c:	0000ffff 	.word	0x0000ffff

00000c80 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c82:	0004      	movs	r4, r0
     c84:	000d      	movs	r5, r1
     c86:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c88:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     c8a:	4b10      	ldr	r3, [pc, #64]	; (ccc <_usart_read_buffer+0x4c>)
     c8c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     c8e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     c90:	b29b      	uxth	r3, r3
     c92:	2b00      	cmp	r3, #0
     c94:	d003      	beq.n	c9e <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     c96:	4b0e      	ldr	r3, [pc, #56]	; (cd0 <_usart_read_buffer+0x50>)
     c98:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     c9a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     c9e:	85a6      	strh	r6, [r4, #44]	; 0x2c
     ca0:	4b0b      	ldr	r3, [pc, #44]	; (cd0 <_usart_read_buffer+0x50>)
     ca2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     ca4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     ca6:	2205      	movs	r2, #5
     ca8:	2332      	movs	r3, #50	; 0x32
     caa:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     cac:	3b2e      	subs	r3, #46	; 0x2e
     cae:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     cb0:	7a23      	ldrb	r3, [r4, #8]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d001      	beq.n	cba <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     cb6:	2320      	movs	r3, #32
     cb8:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     cba:	7a63      	ldrb	r3, [r4, #9]
     cbc:	2b00      	cmp	r3, #0
     cbe:	d003      	beq.n	cc8 <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     cc0:	2308      	movs	r3, #8
     cc2:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     cc4:	2000      	movs	r0, #0
     cc6:	e7e9      	b.n	c9c <_usart_read_buffer+0x1c>
     cc8:	2000      	movs	r0, #0
     cca:	e7e7      	b.n	c9c <_usart_read_buffer+0x1c>
     ccc:	00000f79 	.word	0x00000f79
     cd0:	00000fb9 	.word	0x00000fb9

00000cd4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     cd4:	1c93      	adds	r3, r2, #2
     cd6:	009b      	lsls	r3, r3, #2
     cd8:	18c3      	adds	r3, r0, r3
     cda:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     cdc:	2301      	movs	r3, #1
     cde:	4093      	lsls	r3, r2
     ce0:	001a      	movs	r2, r3
     ce2:	2130      	movs	r1, #48	; 0x30
     ce4:	5c43      	ldrb	r3, [r0, r1]
     ce6:	4313      	orrs	r3, r2
     ce8:	5443      	strb	r3, [r0, r1]
}
     cea:	4770      	bx	lr

00000cec <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     cec:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     cee:	2a00      	cmp	r2, #0
     cf0:	d101      	bne.n	cf6 <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
     cf2:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     cf4:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     cf6:	7983      	ldrb	r3, [r0, #6]
     cf8:	2b00      	cmp	r3, #0
     cfa:	d101      	bne.n	d00 <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
     cfc:	201c      	movs	r0, #28
     cfe:	e7f9      	b.n	cf4 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <usart_read_buffer_job+0x1c>)
     d02:	4798      	blx	r3
     d04:	e7f6      	b.n	cf4 <usart_read_buffer_job+0x8>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00000c81 	.word	0x00000c81

00000d0c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0e:	46c6      	mov	lr, r8
     d10:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     d12:	0080      	lsls	r0, r0, #2
     d14:	4b64      	ldr	r3, [pc, #400]	; (ea8 <_usart_interrupt_handler+0x19c>)
     d16:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     d18:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     d1a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     d1c:	2b00      	cmp	r3, #0
     d1e:	d1fc      	bne.n	d1a <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     d20:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     d22:	7da6      	ldrb	r6, [r4, #22]
     d24:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     d26:	2330      	movs	r3, #48	; 0x30
     d28:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
     d2a:	2231      	movs	r2, #49	; 0x31
     d2c:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
     d2e:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     d30:	07f3      	lsls	r3, r6, #31
     d32:	d525      	bpl.n	d80 <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
     d34:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     d36:	b29b      	uxth	r3, r3
     d38:	2b00      	cmp	r3, #0
     d3a:	d01f      	beq.n	d7c <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     d3c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     d3e:	780a      	ldrb	r2, [r1, #0]
     d40:	b2d2      	uxtb	r2, r2
     d42:	b293      	uxth	r3, r2
     d44:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     d46:	1c48      	adds	r0, r1, #1
     d48:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d4a:	796b      	ldrb	r3, [r5, #5]
     d4c:	2b01      	cmp	r3, #1
     d4e:	d00e      	beq.n	d6e <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     d50:	4643      	mov	r3, r8
     d52:	05db      	lsls	r3, r3, #23
     d54:	0ddb      	lsrs	r3, r3, #23
     d56:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     d58:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     d5a:	3b01      	subs	r3, #1
     d5c:	b29b      	uxth	r3, r3
     d5e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     d60:	2b00      	cmp	r3, #0
     d62:	d10d      	bne.n	d80 <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d64:	3301      	adds	r3, #1
     d66:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     d68:	3301      	adds	r3, #1
     d6a:	75a3      	strb	r3, [r4, #22]
     d6c:	e008      	b.n	d80 <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     d6e:	784b      	ldrb	r3, [r1, #1]
     d70:	021b      	lsls	r3, r3, #8
     d72:	4313      	orrs	r3, r2
     d74:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
     d76:	1c88      	adds	r0, r1, #2
     d78:	62a8      	str	r0, [r5, #40]	; 0x28
     d7a:	e7e9      	b.n	d50 <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d7c:	2301      	movs	r3, #1
     d7e:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     d80:	07b3      	lsls	r3, r6, #30
     d82:	d506      	bpl.n	d92 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     d84:	2302      	movs	r3, #2
     d86:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     d88:	2200      	movs	r2, #0
     d8a:	3331      	adds	r3, #49	; 0x31
     d8c:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     d8e:	07fb      	lsls	r3, r7, #31
     d90:	d41c      	bmi.n	dcc <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     d92:	0773      	lsls	r3, r6, #29
     d94:	d564      	bpl.n	e60 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
     d96:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d98:	b29b      	uxth	r3, r3
     d9a:	2b00      	cmp	r3, #0
     d9c:	d05e      	beq.n	e5c <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d9e:	8b62      	ldrh	r2, [r4, #26]
     da0:	b2d2      	uxtb	r2, r2
     da2:	233f      	movs	r3, #63	; 0x3f
     da4:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     da6:	0711      	lsls	r1, r2, #28
     da8:	d501      	bpl.n	dae <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     daa:	2337      	movs	r3, #55	; 0x37
     dac:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     dae:	2b00      	cmp	r3, #0
     db0:	d031      	beq.n	e16 <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     db2:	079a      	lsls	r2, r3, #30
     db4:	d50e      	bpl.n	dd4 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     db6:	221a      	movs	r2, #26
     db8:	2332      	movs	r3, #50	; 0x32
     dba:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     dbc:	3b30      	subs	r3, #48	; 0x30
     dbe:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     dc0:	077b      	lsls	r3, r7, #29
     dc2:	d54d      	bpl.n	e60 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     dc4:	0028      	movs	r0, r5
     dc6:	696b      	ldr	r3, [r5, #20]
     dc8:	4798      	blx	r3
     dca:	e049      	b.n	e60 <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     dcc:	0028      	movs	r0, r5
     dce:	68eb      	ldr	r3, [r5, #12]
     dd0:	4798      	blx	r3
     dd2:	e7de      	b.n	d92 <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     dd4:	075a      	lsls	r2, r3, #29
     dd6:	d505      	bpl.n	de4 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     dd8:	221e      	movs	r2, #30
     dda:	2332      	movs	r3, #50	; 0x32
     ddc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     dde:	3b2e      	subs	r3, #46	; 0x2e
     de0:	8363      	strh	r3, [r4, #26]
     de2:	e7ed      	b.n	dc0 <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     de4:	07da      	lsls	r2, r3, #31
     de6:	d505      	bpl.n	df4 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     de8:	2213      	movs	r2, #19
     dea:	2332      	movs	r3, #50	; 0x32
     dec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     dee:	3b31      	subs	r3, #49	; 0x31
     df0:	8363      	strh	r3, [r4, #26]
     df2:	e7e5      	b.n	dc0 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     df4:	06da      	lsls	r2, r3, #27
     df6:	d505      	bpl.n	e04 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     df8:	2242      	movs	r2, #66	; 0x42
     dfa:	2332      	movs	r3, #50	; 0x32
     dfc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     dfe:	3b22      	subs	r3, #34	; 0x22
     e00:	8363      	strh	r3, [r4, #26]
     e02:	e7dd      	b.n	dc0 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     e04:	2220      	movs	r2, #32
     e06:	421a      	tst	r2, r3
     e08:	d0da      	beq.n	dc0 <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     e0a:	3221      	adds	r2, #33	; 0x21
     e0c:	2332      	movs	r3, #50	; 0x32
     e0e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     e10:	3b12      	subs	r3, #18
     e12:	8363      	strh	r3, [r4, #26]
     e14:	e7d4      	b.n	dc0 <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     e16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e18:	05db      	lsls	r3, r3, #23
     e1a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     e1c:	b2da      	uxtb	r2, r3
     e1e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     e20:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     e22:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     e24:	1c51      	adds	r1, r2, #1
     e26:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e28:	7969      	ldrb	r1, [r5, #5]
     e2a:	2901      	cmp	r1, #1
     e2c:	d010      	beq.n	e50 <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     e2e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     e30:	3b01      	subs	r3, #1
     e32:	b29b      	uxth	r3, r3
     e34:	85ab      	strh	r3, [r5, #44]	; 0x2c
     e36:	2b00      	cmp	r3, #0
     e38:	d112      	bne.n	e60 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e3a:	3304      	adds	r3, #4
     e3c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     e3e:	2200      	movs	r2, #0
     e40:	332e      	adds	r3, #46	; 0x2e
     e42:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     e44:	07bb      	lsls	r3, r7, #30
     e46:	d50b      	bpl.n	e60 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     e48:	0028      	movs	r0, r5
     e4a:	692b      	ldr	r3, [r5, #16]
     e4c:	4798      	blx	r3
     e4e:	e007      	b.n	e60 <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     e50:	0a1b      	lsrs	r3, r3, #8
     e52:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     e54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     e56:	3301      	adds	r3, #1
     e58:	626b      	str	r3, [r5, #36]	; 0x24
     e5a:	e7e8      	b.n	e2e <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e5c:	2304      	movs	r3, #4
     e5e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     e60:	06f3      	lsls	r3, r6, #27
     e62:	d504      	bpl.n	e6e <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     e64:	2310      	movs	r3, #16
     e66:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     e68:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     e6a:	06fb      	lsls	r3, r7, #27
     e6c:	d410      	bmi.n	e90 <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     e6e:	06b3      	lsls	r3, r6, #26
     e70:	d504      	bpl.n	e7c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     e72:	2320      	movs	r3, #32
     e74:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     e76:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     e78:	073b      	lsls	r3, r7, #28
     e7a:	d40d      	bmi.n	e98 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     e7c:	0733      	lsls	r3, r6, #28
     e7e:	d504      	bpl.n	e8a <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     e80:	2308      	movs	r3, #8
     e82:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     e84:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     e86:	06bb      	lsls	r3, r7, #26
     e88:	d40a      	bmi.n	ea0 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     e8a:	bc04      	pop	{r2}
     e8c:	4690      	mov	r8, r2
     e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     e90:	0028      	movs	r0, r5
     e92:	69eb      	ldr	r3, [r5, #28]
     e94:	4798      	blx	r3
     e96:	e7ea      	b.n	e6e <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     e98:	0028      	movs	r0, r5
     e9a:	69ab      	ldr	r3, [r5, #24]
     e9c:	4798      	blx	r3
     e9e:	e7ed      	b.n	e7c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     ea0:	6a2b      	ldr	r3, [r5, #32]
     ea2:	0028      	movs	r0, r5
     ea4:	4798      	blx	r3
}
     ea6:	e7f0      	b.n	e8a <_usart_interrupt_handler+0x17e>
     ea8:	20000300 	.word	0x20000300

00000eac <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     eac:	4770      	bx	lr
	...

00000eb0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     eb0:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     eb2:	4b0b      	ldr	r3, [pc, #44]	; (ee0 <_sercom_set_handler+0x30>)
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d008      	beq.n	ecc <_sercom_set_handler+0x1c>
     eba:	e00c      	b.n	ed6 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ebc:	009a      	lsls	r2, r3, #2
     ebe:	4d09      	ldr	r5, [pc, #36]	; (ee4 <_sercom_set_handler+0x34>)
     ec0:	4c09      	ldr	r4, [pc, #36]	; (ee8 <_sercom_set_handler+0x38>)
     ec2:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
     ec4:	2500      	movs	r5, #0
     ec6:	4c09      	ldr	r4, [pc, #36]	; (eec <_sercom_set_handler+0x3c>)
     ec8:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eca:	3301      	adds	r3, #1
     ecc:	2b05      	cmp	r3, #5
     ece:	d9f5      	bls.n	ebc <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
     ed0:	2201      	movs	r2, #1
     ed2:	4b03      	ldr	r3, [pc, #12]	; (ee0 <_sercom_set_handler+0x30>)
     ed4:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     ed6:	0080      	lsls	r0, r0, #2
     ed8:	4b03      	ldr	r3, [pc, #12]	; (ee8 <_sercom_set_handler+0x38>)
     eda:	50c1      	str	r1, [r0, r3]
}
     edc:	bd30      	pop	{r4, r5, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	200002c6 	.word	0x200002c6
     ee4:	00000ead 	.word	0x00000ead
     ee8:	200002c8 	.word	0x200002c8
     eec:	20000300 	.word	0x20000300

00000ef0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ef0:	b500      	push	{lr}
     ef2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ef4:	4b05      	ldr	r3, [pc, #20]	; (f0c <_sercom_get_interrupt_vector+0x1c>)
     ef6:	681a      	ldr	r2, [r3, #0]
     ef8:	9200      	str	r2, [sp, #0]
     efa:	889b      	ldrh	r3, [r3, #4]
     efc:	466a      	mov	r2, sp
     efe:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     f00:	4b03      	ldr	r3, [pc, #12]	; (f10 <_sercom_get_interrupt_vector+0x20>)
     f02:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     f04:	466b      	mov	r3, sp
     f06:	5618      	ldrsb	r0, [r3, r0]
}
     f08:	b003      	add	sp, #12
     f0a:	bd00      	pop	{pc}
     f0c:	00001bcc 	.word	0x00001bcc
     f10:	0000085d 	.word	0x0000085d

00000f14 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     f14:	b510      	push	{r4, lr}
     f16:	4b02      	ldr	r3, [pc, #8]	; (f20 <SERCOM0_Handler+0xc>)
     f18:	681b      	ldr	r3, [r3, #0]
     f1a:	2000      	movs	r0, #0
     f1c:	4798      	blx	r3
     f1e:	bd10      	pop	{r4, pc}
     f20:	200002c8 	.word	0x200002c8

00000f24 <SERCOM1_Handler>:
     f24:	b510      	push	{r4, lr}
     f26:	4b02      	ldr	r3, [pc, #8]	; (f30 <SERCOM1_Handler+0xc>)
     f28:	685b      	ldr	r3, [r3, #4]
     f2a:	2001      	movs	r0, #1
     f2c:	4798      	blx	r3
     f2e:	bd10      	pop	{r4, pc}
     f30:	200002c8 	.word	0x200002c8

00000f34 <SERCOM2_Handler>:
     f34:	b510      	push	{r4, lr}
     f36:	4b02      	ldr	r3, [pc, #8]	; (f40 <SERCOM2_Handler+0xc>)
     f38:	689b      	ldr	r3, [r3, #8]
     f3a:	2002      	movs	r0, #2
     f3c:	4798      	blx	r3
     f3e:	bd10      	pop	{r4, pc}
     f40:	200002c8 	.word	0x200002c8

00000f44 <SERCOM3_Handler>:
     f44:	b510      	push	{r4, lr}
     f46:	4b02      	ldr	r3, [pc, #8]	; (f50 <SERCOM3_Handler+0xc>)
     f48:	68db      	ldr	r3, [r3, #12]
     f4a:	2003      	movs	r0, #3
     f4c:	4798      	blx	r3
     f4e:	bd10      	pop	{r4, pc}
     f50:	200002c8 	.word	0x200002c8

00000f54 <SERCOM4_Handler>:
     f54:	b510      	push	{r4, lr}
     f56:	4b02      	ldr	r3, [pc, #8]	; (f60 <SERCOM4_Handler+0xc>)
     f58:	691b      	ldr	r3, [r3, #16]
     f5a:	2004      	movs	r0, #4
     f5c:	4798      	blx	r3
     f5e:	bd10      	pop	{r4, pc}
     f60:	200002c8 	.word	0x200002c8

00000f64 <SERCOM5_Handler>:
     f64:	b510      	push	{r4, lr}
     f66:	4b02      	ldr	r3, [pc, #8]	; (f70 <SERCOM5_Handler+0xc>)
     f68:	695b      	ldr	r3, [r3, #20]
     f6a:	2005      	movs	r0, #5
     f6c:	4798      	blx	r3
     f6e:	bd10      	pop	{r4, pc}
     f70:	200002c8 	.word	0x200002c8

00000f74 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     f74:	4770      	bx	lr
	...

00000f78 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f78:	4b0c      	ldr	r3, [pc, #48]	; (fac <cpu_irq_enter_critical+0x34>)
     f7a:	681b      	ldr	r3, [r3, #0]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d106      	bne.n	f8e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f80:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f84:	2b00      	cmp	r3, #0
     f86:	d007      	beq.n	f98 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f88:	2200      	movs	r2, #0
     f8a:	4b09      	ldr	r3, [pc, #36]	; (fb0 <cpu_irq_enter_critical+0x38>)
     f8c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f8e:	4a07      	ldr	r2, [pc, #28]	; (fac <cpu_irq_enter_critical+0x34>)
     f90:	6813      	ldr	r3, [r2, #0]
     f92:	3301      	adds	r3, #1
     f94:	6013      	str	r3, [r2, #0]
}
     f96:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     f98:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f9a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f9e:	2200      	movs	r2, #0
     fa0:	4b04      	ldr	r3, [pc, #16]	; (fb4 <cpu_irq_enter_critical+0x3c>)
     fa2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     fa4:	3201      	adds	r2, #1
     fa6:	4b02      	ldr	r3, [pc, #8]	; (fb0 <cpu_irq_enter_critical+0x38>)
     fa8:	701a      	strb	r2, [r3, #0]
     faa:	e7f0      	b.n	f8e <cpu_irq_enter_critical+0x16>
     fac:	200002e0 	.word	0x200002e0
     fb0:	200002e4 	.word	0x200002e4
     fb4:	20000018 	.word	0x20000018

00000fb8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     fb8:	4b08      	ldr	r3, [pc, #32]	; (fdc <cpu_irq_leave_critical+0x24>)
     fba:	681a      	ldr	r2, [r3, #0]
     fbc:	3a01      	subs	r2, #1
     fbe:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     fc0:	681b      	ldr	r3, [r3, #0]
     fc2:	2b00      	cmp	r3, #0
     fc4:	d109      	bne.n	fda <cpu_irq_leave_critical+0x22>
     fc6:	4b06      	ldr	r3, [pc, #24]	; (fe0 <cpu_irq_leave_critical+0x28>)
     fc8:	781b      	ldrb	r3, [r3, #0]
     fca:	2b00      	cmp	r3, #0
     fcc:	d005      	beq.n	fda <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     fce:	2201      	movs	r2, #1
     fd0:	4b04      	ldr	r3, [pc, #16]	; (fe4 <cpu_irq_leave_critical+0x2c>)
     fd2:	701a      	strb	r2, [r3, #0]
     fd4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     fd8:	b662      	cpsie	i
	}
}
     fda:	4770      	bx	lr
     fdc:	200002e0 	.word	0x200002e0
     fe0:	200002e4 	.word	0x200002e4
     fe4:	20000018 	.word	0x20000018

00000fe8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
     fe8:	b510      	push	{r4, lr}
     fea:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     fec:	2201      	movs	r2, #1
     fee:	ab01      	add	r3, sp, #4
     ff0:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ff2:	2400      	movs	r4, #0
     ff4:	e004      	b.n	1000 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     ff6:	b2e0      	uxtb	r0, r4
     ff8:	a901      	add	r1, sp, #4
     ffa:	4b03      	ldr	r3, [pc, #12]	; (1008 <_switch_peripheral_gclk+0x20>)
     ffc:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ffe:	3401      	adds	r4, #1
    1000:	2c24      	cmp	r4, #36	; 0x24
    1002:	d9f8      	bls.n	ff6 <_switch_peripheral_gclk+0xe>
	}
}
    1004:	b002      	add	sp, #8
    1006:	bd10      	pop	{r4, pc}
    1008:	00001489 	.word	0x00001489

0000100c <system_clock_source_get_hz>:
{
    100c:	b510      	push	{r4, lr}
	switch (clock_source) {
    100e:	2808      	cmp	r0, #8
    1010:	d832      	bhi.n	1078 <system_clock_source_get_hz+0x6c>
    1012:	0080      	lsls	r0, r0, #2
    1014:	4b1b      	ldr	r3, [pc, #108]	; (1084 <system_clock_source_get_hz+0x78>)
    1016:	581b      	ldr	r3, [r3, r0]
    1018:	469f      	mov	pc, r3
		return 32768UL;
    101a:	2080      	movs	r0, #128	; 0x80
    101c:	0200      	lsls	r0, r0, #8
}
    101e:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    1020:	4b19      	ldr	r3, [pc, #100]	; (1088 <system_clock_source_get_hz+0x7c>)
    1022:	6918      	ldr	r0, [r3, #16]
    1024:	e7fb      	b.n	101e <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1026:	4b19      	ldr	r3, [pc, #100]	; (108c <system_clock_source_get_hz+0x80>)
    1028:	6a1b      	ldr	r3, [r3, #32]
    102a:	059b      	lsls	r3, r3, #22
    102c:	0f9b      	lsrs	r3, r3, #30
    102e:	4818      	ldr	r0, [pc, #96]	; (1090 <system_clock_source_get_hz+0x84>)
    1030:	40d8      	lsrs	r0, r3
    1032:	e7f4      	b.n	101e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    1034:	4b14      	ldr	r3, [pc, #80]	; (1088 <system_clock_source_get_hz+0x7c>)
    1036:	6958      	ldr	r0, [r3, #20]
    1038:	e7f1      	b.n	101e <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    103a:	4b13      	ldr	r3, [pc, #76]	; (1088 <system_clock_source_get_hz+0x7c>)
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	079b      	lsls	r3, r3, #30
    1040:	d51c      	bpl.n	107c <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1042:	4b12      	ldr	r3, [pc, #72]	; (108c <system_clock_source_get_hz+0x80>)
    1044:	68db      	ldr	r3, [r3, #12]
    1046:	06db      	lsls	r3, r3, #27
    1048:	d5fb      	bpl.n	1042 <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    104a:	4b0f      	ldr	r3, [pc, #60]	; (1088 <system_clock_source_get_hz+0x7c>)
    104c:	681b      	ldr	r3, [r3, #0]
    104e:	075b      	lsls	r3, r3, #29
    1050:	d401      	bmi.n	1056 <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    1052:	4810      	ldr	r0, [pc, #64]	; (1094 <system_clock_source_get_hz+0x88>)
    1054:	e7e3      	b.n	101e <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1056:	2000      	movs	r0, #0
    1058:	4b0f      	ldr	r3, [pc, #60]	; (1098 <system_clock_source_get_hz+0x8c>)
    105a:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    105c:	4b0a      	ldr	r3, [pc, #40]	; (1088 <system_clock_source_get_hz+0x7c>)
    105e:	689b      	ldr	r3, [r3, #8]
    1060:	041b      	lsls	r3, r3, #16
    1062:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1064:	4358      	muls	r0, r3
    1066:	e7da      	b.n	101e <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1068:	2350      	movs	r3, #80	; 0x50
    106a:	4a08      	ldr	r2, [pc, #32]	; (108c <system_clock_source_get_hz+0x80>)
    106c:	5cd3      	ldrb	r3, [r2, r3]
    106e:	075b      	lsls	r3, r3, #29
    1070:	d506      	bpl.n	1080 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1072:	4b05      	ldr	r3, [pc, #20]	; (1088 <system_clock_source_get_hz+0x7c>)
    1074:	68d8      	ldr	r0, [r3, #12]
    1076:	e7d2      	b.n	101e <system_clock_source_get_hz+0x12>
		return 0;
    1078:	2000      	movs	r0, #0
    107a:	e7d0      	b.n	101e <system_clock_source_get_hz+0x12>
			return 0;
    107c:	2000      	movs	r0, #0
    107e:	e7ce      	b.n	101e <system_clock_source_get_hz+0x12>
			return 0;
    1080:	2000      	movs	r0, #0
    1082:	e7cc      	b.n	101e <system_clock_source_get_hz+0x12>
    1084:	00001bd4 	.word	0x00001bd4
    1088:	200002e8 	.word	0x200002e8
    108c:	40000800 	.word	0x40000800
    1090:	007a1200 	.word	0x007a1200
    1094:	02dc6c00 	.word	0x02dc6c00
    1098:	000014a5 	.word	0x000014a5

0000109c <system_clock_source_osc8m_set_config>:
{
    109c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    109e:	4d0c      	ldr	r5, [pc, #48]	; (10d0 <system_clock_source_osc8m_set_config+0x34>)
    10a0:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    10a2:	7802      	ldrb	r2, [r0, #0]
    10a4:	2103      	movs	r1, #3
    10a6:	400a      	ands	r2, r1
    10a8:	0212      	lsls	r2, r2, #8
    10aa:	490a      	ldr	r1, [pc, #40]	; (10d4 <system_clock_source_osc8m_set_config+0x38>)
    10ac:	4031      	ands	r1, r6
    10ae:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    10b0:	7882      	ldrb	r2, [r0, #2]
    10b2:	2401      	movs	r4, #1
    10b4:	4022      	ands	r2, r4
    10b6:	01d2      	lsls	r2, r2, #7
    10b8:	2380      	movs	r3, #128	; 0x80
    10ba:	4399      	bics	r1, r3
    10bc:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    10be:	7843      	ldrb	r3, [r0, #1]
    10c0:	4023      	ands	r3, r4
    10c2:	019b      	lsls	r3, r3, #6
    10c4:	2140      	movs	r1, #64	; 0x40
    10c6:	438a      	bics	r2, r1
    10c8:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    10ca:	622b      	str	r3, [r5, #32]
}
    10cc:	bd70      	pop	{r4, r5, r6, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	40000800 	.word	0x40000800
    10d4:	fffffcff 	.word	0xfffffcff

000010d8 <system_clock_source_enable>:
	switch (clock_source) {
    10d8:	2808      	cmp	r0, #8
    10da:	d84a      	bhi.n	1172 <system_clock_source_enable+0x9a>
    10dc:	0080      	lsls	r0, r0, #2
    10de:	4b26      	ldr	r3, [pc, #152]	; (1178 <system_clock_source_enable+0xa0>)
    10e0:	581b      	ldr	r3, [r3, r0]
    10e2:	469f      	mov	pc, r3
		return STATUS_OK;
    10e4:	2000      	movs	r0, #0
}
    10e6:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    10e8:	4a24      	ldr	r2, [pc, #144]	; (117c <system_clock_source_enable+0xa4>)
    10ea:	6a13      	ldr	r3, [r2, #32]
    10ec:	2102      	movs	r1, #2
    10ee:	430b      	orrs	r3, r1
    10f0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    10f2:	2000      	movs	r0, #0
    10f4:	e7f7      	b.n	10e6 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    10f6:	4a21      	ldr	r2, [pc, #132]	; (117c <system_clock_source_enable+0xa4>)
    10f8:	6993      	ldr	r3, [r2, #24]
    10fa:	2102      	movs	r1, #2
    10fc:	430b      	orrs	r3, r1
    10fe:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1100:	2000      	movs	r0, #0
		break;
    1102:	e7f0      	b.n	10e6 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1104:	4a1d      	ldr	r2, [pc, #116]	; (117c <system_clock_source_enable+0xa4>)
    1106:	8a13      	ldrh	r3, [r2, #16]
    1108:	2102      	movs	r1, #2
    110a:	430b      	orrs	r3, r1
    110c:	b29b      	uxth	r3, r3
    110e:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1110:	2000      	movs	r0, #0
		break;
    1112:	e7e8      	b.n	10e6 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1114:	4a19      	ldr	r2, [pc, #100]	; (117c <system_clock_source_enable+0xa4>)
    1116:	8a93      	ldrh	r3, [r2, #20]
    1118:	2102      	movs	r1, #2
    111a:	430b      	orrs	r3, r1
    111c:	b29b      	uxth	r3, r3
    111e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1120:	2000      	movs	r0, #0
		break;
    1122:	e7e0      	b.n	10e6 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1124:	4916      	ldr	r1, [pc, #88]	; (1180 <system_clock_source_enable+0xa8>)
    1126:	680b      	ldr	r3, [r1, #0]
    1128:	2202      	movs	r2, #2
    112a:	4313      	orrs	r3, r2
    112c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    112e:	4b13      	ldr	r3, [pc, #76]	; (117c <system_clock_source_enable+0xa4>)
    1130:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1132:	4b12      	ldr	r3, [pc, #72]	; (117c <system_clock_source_enable+0xa4>)
    1134:	68db      	ldr	r3, [r3, #12]
    1136:	06db      	lsls	r3, r3, #27
    1138:	d5fb      	bpl.n	1132 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    113a:	4a11      	ldr	r2, [pc, #68]	; (1180 <system_clock_source_enable+0xa8>)
    113c:	6891      	ldr	r1, [r2, #8]
    113e:	4b0f      	ldr	r3, [pc, #60]	; (117c <system_clock_source_enable+0xa4>)
    1140:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1142:	6852      	ldr	r2, [r2, #4]
    1144:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1146:	2200      	movs	r2, #0
    1148:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    114a:	4b0c      	ldr	r3, [pc, #48]	; (117c <system_clock_source_enable+0xa4>)
    114c:	68db      	ldr	r3, [r3, #12]
    114e:	06db      	lsls	r3, r3, #27
    1150:	d5fb      	bpl.n	114a <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1152:	4b0b      	ldr	r3, [pc, #44]	; (1180 <system_clock_source_enable+0xa8>)
    1154:	681b      	ldr	r3, [r3, #0]
    1156:	b29b      	uxth	r3, r3
    1158:	4a08      	ldr	r2, [pc, #32]	; (117c <system_clock_source_enable+0xa4>)
    115a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    115c:	2000      	movs	r0, #0
    115e:	e7c2      	b.n	10e6 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1160:	4906      	ldr	r1, [pc, #24]	; (117c <system_clock_source_enable+0xa4>)
    1162:	2244      	movs	r2, #68	; 0x44
    1164:	5c8b      	ldrb	r3, [r1, r2]
    1166:	2002      	movs	r0, #2
    1168:	4303      	orrs	r3, r0
    116a:	b2db      	uxtb	r3, r3
    116c:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    116e:	2000      	movs	r0, #0
		break;
    1170:	e7b9      	b.n	10e6 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    1172:	2017      	movs	r0, #23
    1174:	e7b7      	b.n	10e6 <system_clock_source_enable+0xe>
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00001bf8 	.word	0x00001bf8
    117c:	40000800 	.word	0x40000800
    1180:	200002e8 	.word	0x200002e8

00001184 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1184:	b530      	push	{r4, r5, lr}
    1186:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1188:	22c2      	movs	r2, #194	; 0xc2
    118a:	00d2      	lsls	r2, r2, #3
    118c:	4b15      	ldr	r3, [pc, #84]	; (11e4 <system_clock_init+0x60>)
    118e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1190:	4b15      	ldr	r3, [pc, #84]	; (11e8 <system_clock_init+0x64>)
    1192:	6859      	ldr	r1, [r3, #4]
    1194:	221e      	movs	r2, #30
    1196:	4391      	bics	r1, r2
    1198:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    119a:	4b14      	ldr	r3, [pc, #80]	; (11ec <system_clock_init+0x68>)
    119c:	4798      	blx	r3
	config->run_in_standby  = false;
    119e:	a803      	add	r0, sp, #12
    11a0:	2400      	movs	r4, #0
    11a2:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    11a4:	2501      	movs	r5, #1
    11a6:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    11a8:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    11aa:	4b11      	ldr	r3, [pc, #68]	; (11f0 <system_clock_init+0x6c>)
    11ac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    11ae:	2006      	movs	r0, #6
    11b0:	4b10      	ldr	r3, [pc, #64]	; (11f4 <system_clock_init+0x70>)
    11b2:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    11b4:	4b10      	ldr	r3, [pc, #64]	; (11f8 <system_clock_init+0x74>)
    11b6:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    11b8:	4b10      	ldr	r3, [pc, #64]	; (11fc <system_clock_init+0x78>)
    11ba:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    11bc:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    11be:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    11c0:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    11c2:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    11c4:	466b      	mov	r3, sp
    11c6:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    11c8:	2306      	movs	r3, #6
    11ca:	466a      	mov	r2, sp
    11cc:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    11ce:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    11d0:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    11d2:	4669      	mov	r1, sp
    11d4:	2000      	movs	r0, #0
    11d6:	4b0a      	ldr	r3, [pc, #40]	; (1200 <system_clock_init+0x7c>)
    11d8:	4798      	blx	r3
    11da:	2000      	movs	r0, #0
    11dc:	4b09      	ldr	r3, [pc, #36]	; (1204 <system_clock_init+0x80>)
    11de:	4798      	blx	r3
#endif
}
    11e0:	b005      	add	sp, #20
    11e2:	bd30      	pop	{r4, r5, pc}
    11e4:	40000800 	.word	0x40000800
    11e8:	41004000 	.word	0x41004000
    11ec:	00000fe9 	.word	0x00000fe9
    11f0:	0000109d 	.word	0x0000109d
    11f4:	000010d9 	.word	0x000010d9
    11f8:	00001209 	.word	0x00001209
    11fc:	40000400 	.word	0x40000400
    1200:	0000122d 	.word	0x0000122d
    1204:	000012fd 	.word	0x000012fd

00001208 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1208:	4a06      	ldr	r2, [pc, #24]	; (1224 <system_gclk_init+0x1c>)
    120a:	6993      	ldr	r3, [r2, #24]
    120c:	2108      	movs	r1, #8
    120e:	430b      	orrs	r3, r1
    1210:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1212:	2201      	movs	r2, #1
    1214:	4b04      	ldr	r3, [pc, #16]	; (1228 <system_gclk_init+0x20>)
    1216:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1218:	4b03      	ldr	r3, [pc, #12]	; (1228 <system_gclk_init+0x20>)
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	07db      	lsls	r3, r3, #31
    121e:	d4fb      	bmi.n	1218 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1220:	4770      	bx	lr
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	40000400 	.word	0x40000400
    1228:	40000c00 	.word	0x40000c00

0000122c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    122e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1230:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1232:	780c      	ldrb	r4, [r1, #0]
    1234:	0224      	lsls	r4, r4, #8
    1236:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1238:	784b      	ldrb	r3, [r1, #1]
    123a:	2b00      	cmp	r3, #0
    123c:	d002      	beq.n	1244 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    123e:	2380      	movs	r3, #128	; 0x80
    1240:	02db      	lsls	r3, r3, #11
    1242:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1244:	7a4b      	ldrb	r3, [r1, #9]
    1246:	2b00      	cmp	r3, #0
    1248:	d002      	beq.n	1250 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    124a:	2380      	movs	r3, #128	; 0x80
    124c:	031b      	lsls	r3, r3, #12
    124e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1250:	6848      	ldr	r0, [r1, #4]
    1252:	2801      	cmp	r0, #1
    1254:	d912      	bls.n	127c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1256:	1e43      	subs	r3, r0, #1
    1258:	4203      	tst	r3, r0
    125a:	d03d      	beq.n	12d8 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    125c:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    125e:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1260:	2380      	movs	r3, #128	; 0x80
    1262:	029b      	lsls	r3, r3, #10
    1264:	431c      	orrs	r4, r3
    1266:	e009      	b.n	127c <system_gclk_gen_set_config+0x50>
				div2_count++;
    1268:	3201      	adds	r2, #1
						mask <<= 1) {
    126a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    126c:	4283      	cmp	r3, r0
    126e:	d3fb      	bcc.n	1268 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1270:	0212      	lsls	r2, r2, #8
    1272:	4332      	orrs	r2, r6
    1274:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1276:	2380      	movs	r3, #128	; 0x80
    1278:	035b      	lsls	r3, r3, #13
    127a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    127c:	7a0b      	ldrb	r3, [r1, #8]
    127e:	2b00      	cmp	r3, #0
    1280:	d002      	beq.n	1288 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1282:	2380      	movs	r3, #128	; 0x80
    1284:	039b      	lsls	r3, r3, #14
    1286:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1288:	4b18      	ldr	r3, [pc, #96]	; (12ec <system_gclk_gen_set_config+0xc0>)
    128a:	785b      	ldrb	r3, [r3, #1]
    128c:	b25b      	sxtb	r3, r3
    128e:	2b00      	cmp	r3, #0
    1290:	db25      	blt.n	12de <system_gclk_gen_set_config+0xb2>
	return false;
    1292:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    1294:	2f00      	cmp	r7, #0
    1296:	d1f7      	bne.n	1288 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1298:	4b15      	ldr	r3, [pc, #84]	; (12f0 <system_gclk_gen_set_config+0xc4>)
    129a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    129c:	4b15      	ldr	r3, [pc, #84]	; (12f4 <system_gclk_gen_set_config+0xc8>)
    129e:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12a0:	4b12      	ldr	r3, [pc, #72]	; (12ec <system_gclk_gen_set_config+0xc0>)
    12a2:	785b      	ldrb	r3, [r3, #1]
    12a4:	b25b      	sxtb	r3, r3
    12a6:	2b00      	cmp	r3, #0
    12a8:	db1b      	blt.n	12e2 <system_gclk_gen_set_config+0xb6>
	return false;
    12aa:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    12ac:	2a00      	cmp	r2, #0
    12ae:	d1f7      	bne.n	12a0 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    12b0:	4b0e      	ldr	r3, [pc, #56]	; (12ec <system_gclk_gen_set_config+0xc0>)
    12b2:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12b4:	4b0d      	ldr	r3, [pc, #52]	; (12ec <system_gclk_gen_set_config+0xc0>)
    12b6:	785b      	ldrb	r3, [r3, #1]
    12b8:	b25b      	sxtb	r3, r3
    12ba:	2b00      	cmp	r3, #0
    12bc:	db13      	blt.n	12e6 <system_gclk_gen_set_config+0xba>
	return false;
    12be:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    12c0:	2b00      	cmp	r3, #0
    12c2:	d1f7      	bne.n	12b4 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    12c4:	4a09      	ldr	r2, [pc, #36]	; (12ec <system_gclk_gen_set_config+0xc0>)
    12c6:	6853      	ldr	r3, [r2, #4]
    12c8:	2180      	movs	r1, #128	; 0x80
    12ca:	0249      	lsls	r1, r1, #9
    12cc:	400b      	ands	r3, r1
    12ce:	431c      	orrs	r4, r3
    12d0:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    12d2:	4b09      	ldr	r3, [pc, #36]	; (12f8 <system_gclk_gen_set_config+0xcc>)
    12d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12d8:	2302      	movs	r3, #2
    12da:	2200      	movs	r2, #0
    12dc:	e7c6      	b.n	126c <system_gclk_gen_set_config+0x40>
		return true;
    12de:	2701      	movs	r7, #1
    12e0:	e7d8      	b.n	1294 <system_gclk_gen_set_config+0x68>
    12e2:	2201      	movs	r2, #1
    12e4:	e7e2      	b.n	12ac <system_gclk_gen_set_config+0x80>
    12e6:	2301      	movs	r3, #1
    12e8:	e7ea      	b.n	12c0 <system_gclk_gen_set_config+0x94>
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	40000c00 	.word	0x40000c00
    12f0:	00000f79 	.word	0x00000f79
    12f4:	40000c08 	.word	0x40000c08
    12f8:	00000fb9 	.word	0x00000fb9

000012fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    12fc:	b570      	push	{r4, r5, r6, lr}
    12fe:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1300:	4b10      	ldr	r3, [pc, #64]	; (1344 <system_gclk_gen_enable+0x48>)
    1302:	785b      	ldrb	r3, [r3, #1]
    1304:	b25b      	sxtb	r3, r3
    1306:	2b00      	cmp	r3, #0
    1308:	db17      	blt.n	133a <system_gclk_gen_enable+0x3e>
	return false;
    130a:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    130c:	2c00      	cmp	r4, #0
    130e:	d1f7      	bne.n	1300 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1310:	4b0d      	ldr	r3, [pc, #52]	; (1348 <system_gclk_gen_enable+0x4c>)
    1312:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1314:	4b0d      	ldr	r3, [pc, #52]	; (134c <system_gclk_gen_enable+0x50>)
    1316:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1318:	4b0a      	ldr	r3, [pc, #40]	; (1344 <system_gclk_gen_enable+0x48>)
    131a:	785b      	ldrb	r3, [r3, #1]
    131c:	b25b      	sxtb	r3, r3
    131e:	2b00      	cmp	r3, #0
    1320:	db0d      	blt.n	133e <system_gclk_gen_enable+0x42>
	return false;
    1322:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1324:	2b00      	cmp	r3, #0
    1326:	d1f7      	bne.n	1318 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1328:	4a06      	ldr	r2, [pc, #24]	; (1344 <system_gclk_gen_enable+0x48>)
    132a:	6851      	ldr	r1, [r2, #4]
    132c:	2380      	movs	r3, #128	; 0x80
    132e:	025b      	lsls	r3, r3, #9
    1330:	430b      	orrs	r3, r1
    1332:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1334:	4b06      	ldr	r3, [pc, #24]	; (1350 <system_gclk_gen_enable+0x54>)
    1336:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1338:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    133a:	2401      	movs	r4, #1
    133c:	e7e6      	b.n	130c <system_gclk_gen_enable+0x10>
    133e:	2301      	movs	r3, #1
    1340:	e7f0      	b.n	1324 <system_gclk_gen_enable+0x28>
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	40000c00 	.word	0x40000c00
    1348:	00000f79 	.word	0x00000f79
    134c:	40000c04 	.word	0x40000c04
    1350:	00000fb9 	.word	0x00000fb9

00001354 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1356:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1358:	4b22      	ldr	r3, [pc, #136]	; (13e4 <system_gclk_gen_get_hz+0x90>)
    135a:	785b      	ldrb	r3, [r3, #1]
    135c:	b25b      	sxtb	r3, r3
    135e:	2b00      	cmp	r3, #0
    1360:	db34      	blt.n	13cc <system_gclk_gen_get_hz+0x78>
	return false;
    1362:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1364:	2d00      	cmp	r5, #0
    1366:	d1f7      	bne.n	1358 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1368:	4b1f      	ldr	r3, [pc, #124]	; (13e8 <system_gclk_gen_get_hz+0x94>)
    136a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    136c:	4b1f      	ldr	r3, [pc, #124]	; (13ec <system_gclk_gen_get_hz+0x98>)
    136e:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1370:	4b1c      	ldr	r3, [pc, #112]	; (13e4 <system_gclk_gen_get_hz+0x90>)
    1372:	785b      	ldrb	r3, [r3, #1]
    1374:	b25b      	sxtb	r3, r3
    1376:	2b00      	cmp	r3, #0
    1378:	db2a      	blt.n	13d0 <system_gclk_gen_get_hz+0x7c>
	return false;
    137a:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    137c:	2c00      	cmp	r4, #0
    137e:	d1f7      	bne.n	1370 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1380:	4e18      	ldr	r6, [pc, #96]	; (13e4 <system_gclk_gen_get_hz+0x90>)
    1382:	6870      	ldr	r0, [r6, #4]
    1384:	04c0      	lsls	r0, r0, #19
    1386:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1388:	4b19      	ldr	r3, [pc, #100]	; (13f0 <system_gclk_gen_get_hz+0x9c>)
    138a:	4798      	blx	r3
    138c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    138e:	4b17      	ldr	r3, [pc, #92]	; (13ec <system_gclk_gen_get_hz+0x98>)
    1390:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1392:	6876      	ldr	r6, [r6, #4]
    1394:	02f6      	lsls	r6, r6, #11
    1396:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1398:	4b16      	ldr	r3, [pc, #88]	; (13f4 <system_gclk_gen_get_hz+0xa0>)
    139a:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    139c:	4b11      	ldr	r3, [pc, #68]	; (13e4 <system_gclk_gen_get_hz+0x90>)
    139e:	785b      	ldrb	r3, [r3, #1]
    13a0:	b25b      	sxtb	r3, r3
    13a2:	2b00      	cmp	r3, #0
    13a4:	db16      	blt.n	13d4 <system_gclk_gen_get_hz+0x80>
	return false;
    13a6:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    13a8:	2b00      	cmp	r3, #0
    13aa:	d1f7      	bne.n	139c <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    13ac:	4b0d      	ldr	r3, [pc, #52]	; (13e4 <system_gclk_gen_get_hz+0x90>)
    13ae:	689c      	ldr	r4, [r3, #8]
    13b0:	0224      	lsls	r4, r4, #8
    13b2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    13b4:	4b10      	ldr	r3, [pc, #64]	; (13f8 <system_gclk_gen_get_hz+0xa4>)
    13b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    13b8:	2e00      	cmp	r6, #0
    13ba:	d10d      	bne.n	13d8 <system_gclk_gen_get_hz+0x84>
    13bc:	2c01      	cmp	r4, #1
    13be:	d90b      	bls.n	13d8 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    13c0:	0021      	movs	r1, r4
    13c2:	0028      	movs	r0, r5
    13c4:	4b0d      	ldr	r3, [pc, #52]	; (13fc <system_gclk_gen_get_hz+0xa8>)
    13c6:	4798      	blx	r3
    13c8:	0005      	movs	r5, r0
    13ca:	e009      	b.n	13e0 <system_gclk_gen_get_hz+0x8c>
		return true;
    13cc:	2501      	movs	r5, #1
    13ce:	e7c9      	b.n	1364 <system_gclk_gen_get_hz+0x10>
    13d0:	2401      	movs	r4, #1
    13d2:	e7d3      	b.n	137c <system_gclk_gen_get_hz+0x28>
    13d4:	2301      	movs	r3, #1
    13d6:	e7e7      	b.n	13a8 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    13d8:	2e00      	cmp	r6, #0
    13da:	d001      	beq.n	13e0 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    13dc:	3401      	adds	r4, #1
    13de:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    13e0:	0028      	movs	r0, r5
    13e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13e4:	40000c00 	.word	0x40000c00
    13e8:	00000f79 	.word	0x00000f79
    13ec:	40000c04 	.word	0x40000c04
    13f0:	0000100d 	.word	0x0000100d
    13f4:	40000c08 	.word	0x40000c08
    13f8:	00000fb9 	.word	0x00000fb9
    13fc:	00001821 	.word	0x00001821

00001400 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1400:	b510      	push	{r4, lr}
    1402:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1404:	4b06      	ldr	r3, [pc, #24]	; (1420 <system_gclk_chan_enable+0x20>)
    1406:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1408:	4b06      	ldr	r3, [pc, #24]	; (1424 <system_gclk_chan_enable+0x24>)
    140a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    140c:	4a06      	ldr	r2, [pc, #24]	; (1428 <system_gclk_chan_enable+0x28>)
    140e:	8853      	ldrh	r3, [r2, #2]
    1410:	2180      	movs	r1, #128	; 0x80
    1412:	01c9      	lsls	r1, r1, #7
    1414:	430b      	orrs	r3, r1
    1416:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1418:	4b04      	ldr	r3, [pc, #16]	; (142c <system_gclk_chan_enable+0x2c>)
    141a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    141c:	bd10      	pop	{r4, pc}
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	00000f79 	.word	0x00000f79
    1424:	40000c02 	.word	0x40000c02
    1428:	40000c00 	.word	0x40000c00
    142c:	00000fb9 	.word	0x00000fb9

00001430 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1430:	b510      	push	{r4, lr}
    1432:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1434:	4b0e      	ldr	r3, [pc, #56]	; (1470 <system_gclk_chan_disable+0x40>)
    1436:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1438:	4b0e      	ldr	r3, [pc, #56]	; (1474 <system_gclk_chan_disable+0x44>)
    143a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    143c:	490e      	ldr	r1, [pc, #56]	; (1478 <system_gclk_chan_disable+0x48>)
    143e:	884b      	ldrh	r3, [r1, #2]
    1440:	051b      	lsls	r3, r3, #20
    1442:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1444:	884b      	ldrh	r3, [r1, #2]
    1446:	480d      	ldr	r0, [pc, #52]	; (147c <system_gclk_chan_disable+0x4c>)
    1448:	4003      	ands	r3, r0
    144a:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    144c:	884b      	ldrh	r3, [r1, #2]
    144e:	480c      	ldr	r0, [pc, #48]	; (1480 <system_gclk_chan_disable+0x50>)
    1450:	4003      	ands	r3, r0
    1452:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1454:	4b08      	ldr	r3, [pc, #32]	; (1478 <system_gclk_chan_disable+0x48>)
    1456:	885b      	ldrh	r3, [r3, #2]
    1458:	045b      	lsls	r3, r3, #17
    145a:	d4fb      	bmi.n	1454 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    145c:	4806      	ldr	r0, [pc, #24]	; (1478 <system_gclk_chan_disable+0x48>)
    145e:	8841      	ldrh	r1, [r0, #2]
    1460:	0213      	lsls	r3, r2, #8
    1462:	4a06      	ldr	r2, [pc, #24]	; (147c <system_gclk_chan_disable+0x4c>)
    1464:	400a      	ands	r2, r1
    1466:	4313      	orrs	r3, r2
    1468:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    146a:	4b06      	ldr	r3, [pc, #24]	; (1484 <system_gclk_chan_disable+0x54>)
    146c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    146e:	bd10      	pop	{r4, pc}
    1470:	00000f79 	.word	0x00000f79
    1474:	40000c02 	.word	0x40000c02
    1478:	40000c00 	.word	0x40000c00
    147c:	fffff0ff 	.word	0xfffff0ff
    1480:	ffffbfff 	.word	0xffffbfff
    1484:	00000fb9 	.word	0x00000fb9

00001488 <system_gclk_chan_set_config>:
{
    1488:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    148a:	780c      	ldrb	r4, [r1, #0]
    148c:	0224      	lsls	r4, r4, #8
    148e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1490:	4b02      	ldr	r3, [pc, #8]	; (149c <system_gclk_chan_set_config+0x14>)
    1492:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1494:	b2a4      	uxth	r4, r4
    1496:	4b02      	ldr	r3, [pc, #8]	; (14a0 <system_gclk_chan_set_config+0x18>)
    1498:	805c      	strh	r4, [r3, #2]
}
    149a:	bd10      	pop	{r4, pc}
    149c:	00001431 	.word	0x00001431
    14a0:	40000c00 	.word	0x40000c00

000014a4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    14a4:	b510      	push	{r4, lr}
    14a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14a8:	4b06      	ldr	r3, [pc, #24]	; (14c4 <system_gclk_chan_get_hz+0x20>)
    14aa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14ac:	4b06      	ldr	r3, [pc, #24]	; (14c8 <system_gclk_chan_get_hz+0x24>)
    14ae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    14b0:	4b06      	ldr	r3, [pc, #24]	; (14cc <system_gclk_chan_get_hz+0x28>)
    14b2:	885c      	ldrh	r4, [r3, #2]
    14b4:	0524      	lsls	r4, r4, #20
    14b6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    14b8:	4b05      	ldr	r3, [pc, #20]	; (14d0 <system_gclk_chan_get_hz+0x2c>)
    14ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    14bc:	0020      	movs	r0, r4
    14be:	4b05      	ldr	r3, [pc, #20]	; (14d4 <system_gclk_chan_get_hz+0x30>)
    14c0:	4798      	blx	r3
}
    14c2:	bd10      	pop	{r4, pc}
    14c4:	00000f79 	.word	0x00000f79
    14c8:	40000c02 	.word	0x40000c02
    14cc:	40000c00 	.word	0x40000c00
    14d0:	00000fb9 	.word	0x00000fb9
    14d4:	00001355 	.word	0x00001355

000014d8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    14d8:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    14da:	78d3      	ldrb	r3, [r2, #3]
    14dc:	2b00      	cmp	r3, #0
    14de:	d120      	bne.n	1522 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    14e0:	7815      	ldrb	r5, [r2, #0]
    14e2:	2d80      	cmp	r5, #128	; 0x80
    14e4:	d01b      	beq.n	151e <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    14e6:	062d      	lsls	r5, r5, #24
    14e8:	2380      	movs	r3, #128	; 0x80
    14ea:	025b      	lsls	r3, r3, #9
    14ec:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    14ee:	7853      	ldrb	r3, [r2, #1]
    14f0:	2b00      	cmp	r3, #0
    14f2:	d001      	beq.n	14f8 <_system_pinmux_config+0x20>
    14f4:	2b02      	cmp	r3, #2
    14f6:	d10a      	bne.n	150e <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    14f8:	2380      	movs	r3, #128	; 0x80
    14fa:	029b      	lsls	r3, r3, #10
    14fc:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    14fe:	7894      	ldrb	r4, [r2, #2]
    1500:	2c00      	cmp	r4, #0
    1502:	d002      	beq.n	150a <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1504:	23c0      	movs	r3, #192	; 0xc0
    1506:	02db      	lsls	r3, r3, #11
    1508:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    150a:	6041      	str	r1, [r0, #4]
    150c:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    150e:	7853      	ldrb	r3, [r2, #1]
    1510:	3b01      	subs	r3, #1
    1512:	b2db      	uxtb	r3, r3
    1514:	2b01      	cmp	r3, #1
    1516:	d806      	bhi.n	1526 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1518:	4b13      	ldr	r3, [pc, #76]	; (1568 <_system_pinmux_config+0x90>)
    151a:	401d      	ands	r5, r3
    151c:	e003      	b.n	1526 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    151e:	2500      	movs	r5, #0
    1520:	e7e5      	b.n	14ee <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1522:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1524:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1526:	040c      	lsls	r4, r1, #16
    1528:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    152a:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    152c:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    152e:	26a0      	movs	r6, #160	; 0xa0
    1530:	05f6      	lsls	r6, r6, #23
    1532:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1534:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1536:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1538:	24d0      	movs	r4, #208	; 0xd0
    153a:	0624      	lsls	r4, r4, #24
    153c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    153e:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1540:	78d3      	ldrb	r3, [r2, #3]
    1542:	2b00      	cmp	r3, #0
    1544:	d10a      	bne.n	155c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1546:	036b      	lsls	r3, r5, #13
    1548:	d503      	bpl.n	1552 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    154a:	7893      	ldrb	r3, [r2, #2]
    154c:	2b01      	cmp	r3, #1
    154e:	d006      	beq.n	155e <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1550:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1552:	7853      	ldrb	r3, [r2, #1]
    1554:	3b01      	subs	r3, #1
    1556:	b2db      	uxtb	r3, r3
    1558:	2b01      	cmp	r3, #1
    155a:	d902      	bls.n	1562 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    155c:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    155e:	6181      	str	r1, [r0, #24]
    1560:	e7f7      	b.n	1552 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    1562:	6081      	str	r1, [r0, #8]
}
    1564:	e7fa      	b.n	155c <_system_pinmux_config+0x84>
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	fffbffff 	.word	0xfffbffff

0000156c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    156c:	b510      	push	{r4, lr}
    156e:	000a      	movs	r2, r1
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    1570:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    1572:	0943      	lsrs	r3, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1574:	2900      	cmp	r1, #0
    1576:	d10b      	bne.n	1590 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    1578:	01db      	lsls	r3, r3, #7
    157a:	4906      	ldr	r1, [pc, #24]	; (1594 <system_pinmux_pin_set_config+0x28>)
    157c:	468c      	mov	ip, r1
    157e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1580:	241f      	movs	r4, #31
    1582:	4020      	ands	r0, r4
    1584:	2101      	movs	r1, #1
    1586:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1588:	0018      	movs	r0, r3
    158a:	4b03      	ldr	r3, [pc, #12]	; (1598 <system_pinmux_pin_set_config+0x2c>)
    158c:	4798      	blx	r3
}
    158e:	bd10      	pop	{r4, pc}
	} else {
		Assert(false);
		return NULL;
    1590:	2300      	movs	r3, #0
    1592:	e7f5      	b.n	1580 <system_pinmux_pin_set_config+0x14>
    1594:	41004400 	.word	0x41004400
    1598:	000014d9 	.word	0x000014d9

0000159c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    159c:	4770      	bx	lr
	...

000015a0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15a0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15a2:	4b05      	ldr	r3, [pc, #20]	; (15b8 <system_init+0x18>)
    15a4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15a6:	4b05      	ldr	r3, [pc, #20]	; (15bc <system_init+0x1c>)
    15a8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15aa:	4b05      	ldr	r3, [pc, #20]	; (15c0 <system_init+0x20>)
    15ac:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    15ae:	4b05      	ldr	r3, [pc, #20]	; (15c4 <system_init+0x24>)
    15b0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    15b2:	4b05      	ldr	r3, [pc, #20]	; (15c8 <system_init+0x28>)
    15b4:	4798      	blx	r3
}
    15b6:	bd10      	pop	{r4, pc}
    15b8:	00001185 	.word	0x00001185
    15bc:	00000f75 	.word	0x00000f75
    15c0:	0000159d 	.word	0x0000159d
    15c4:	0000159d 	.word	0x0000159d
    15c8:	0000159d 	.word	0x0000159d

000015cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    15cc:	e7fe      	b.n	15cc <Dummy_Handler>
	...

000015d0 <Reset_Handler>:
{
    15d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    15d2:	4a23      	ldr	r2, [pc, #140]	; (1660 <Reset_Handler+0x90>)
    15d4:	4b23      	ldr	r3, [pc, #140]	; (1664 <Reset_Handler+0x94>)
    15d6:	429a      	cmp	r2, r3
    15d8:	d009      	beq.n	15ee <Reset_Handler+0x1e>
    15da:	4b22      	ldr	r3, [pc, #136]	; (1664 <Reset_Handler+0x94>)
    15dc:	4a20      	ldr	r2, [pc, #128]	; (1660 <Reset_Handler+0x90>)
    15de:	e003      	b.n	15e8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    15e0:	6811      	ldr	r1, [r2, #0]
    15e2:	6019      	str	r1, [r3, #0]
    15e4:	3304      	adds	r3, #4
    15e6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    15e8:	491f      	ldr	r1, [pc, #124]	; (1668 <Reset_Handler+0x98>)
    15ea:	428b      	cmp	r3, r1
    15ec:	d3f8      	bcc.n	15e0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    15ee:	4b1f      	ldr	r3, [pc, #124]	; (166c <Reset_Handler+0x9c>)
    15f0:	e002      	b.n	15f8 <Reset_Handler+0x28>
                *pDest++ = 0;
    15f2:	2200      	movs	r2, #0
    15f4:	601a      	str	r2, [r3, #0]
    15f6:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    15f8:	4a1d      	ldr	r2, [pc, #116]	; (1670 <Reset_Handler+0xa0>)
    15fa:	4293      	cmp	r3, r2
    15fc:	d3f9      	bcc.n	15f2 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    15fe:	4a1d      	ldr	r2, [pc, #116]	; (1674 <Reset_Handler+0xa4>)
    1600:	21ff      	movs	r1, #255	; 0xff
    1602:	4b1d      	ldr	r3, [pc, #116]	; (1678 <Reset_Handler+0xa8>)
    1604:	438b      	bics	r3, r1
    1606:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1608:	39fd      	subs	r1, #253	; 0xfd
    160a:	2390      	movs	r3, #144	; 0x90
    160c:	005b      	lsls	r3, r3, #1
    160e:	4a1b      	ldr	r2, [pc, #108]	; (167c <Reset_Handler+0xac>)
    1610:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1612:	4a1b      	ldr	r2, [pc, #108]	; (1680 <Reset_Handler+0xb0>)
    1614:	78d3      	ldrb	r3, [r2, #3]
    1616:	2503      	movs	r5, #3
    1618:	43ab      	bics	r3, r5
    161a:	2402      	movs	r4, #2
    161c:	4323      	orrs	r3, r4
    161e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1620:	78d3      	ldrb	r3, [r2, #3]
    1622:	270c      	movs	r7, #12
    1624:	43bb      	bics	r3, r7
    1626:	2608      	movs	r6, #8
    1628:	4333      	orrs	r3, r6
    162a:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    162c:	4b15      	ldr	r3, [pc, #84]	; (1684 <Reset_Handler+0xb4>)
    162e:	7b98      	ldrb	r0, [r3, #14]
    1630:	2230      	movs	r2, #48	; 0x30
    1632:	4390      	bics	r0, r2
    1634:	2220      	movs	r2, #32
    1636:	4310      	orrs	r0, r2
    1638:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    163a:	7b99      	ldrb	r1, [r3, #14]
    163c:	43b9      	bics	r1, r7
    163e:	4331      	orrs	r1, r6
    1640:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1642:	7b9a      	ldrb	r2, [r3, #14]
    1644:	43aa      	bics	r2, r5
    1646:	4322      	orrs	r2, r4
    1648:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    164a:	4a0f      	ldr	r2, [pc, #60]	; (1688 <Reset_Handler+0xb8>)
    164c:	6851      	ldr	r1, [r2, #4]
    164e:	2380      	movs	r3, #128	; 0x80
    1650:	430b      	orrs	r3, r1
    1652:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1654:	4b0d      	ldr	r3, [pc, #52]	; (168c <Reset_Handler+0xbc>)
    1656:	4798      	blx	r3
        main();
    1658:	4b0d      	ldr	r3, [pc, #52]	; (1690 <Reset_Handler+0xc0>)
    165a:	4798      	blx	r3
    165c:	e7fe      	b.n	165c <Reset_Handler+0x8c>
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	00001d50 	.word	0x00001d50
    1664:	20000000 	.word	0x20000000
    1668:	200001ec 	.word	0x200001ec
    166c:	200001ec 	.word	0x200001ec
    1670:	20000318 	.word	0x20000318
    1674:	e000ed00 	.word	0xe000ed00
    1678:	00000000 	.word	0x00000000
    167c:	41007000 	.word	0x41007000
    1680:	41005000 	.word	0x41005000
    1684:	41004800 	.word	0x41004800
    1688:	41004000 	.word	0x41004000
    168c:	00001999 	.word	0x00001999
    1690:	000017dd 	.word	0x000017dd

00001694 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1694:	b5f0      	push	{r4, r5, r6, r7, lr}
    1696:	46ce      	mov	lr, r9
    1698:	4647      	mov	r7, r8
    169a:	b580      	push	{r7, lr}
    169c:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    169e:	ac01      	add	r4, sp, #4
    16a0:	2300      	movs	r3, #0
    16a2:	4698      	mov	r8, r3
    16a4:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    16a6:	2601      	movs	r6, #1
    16a8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    16aa:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    16ac:	0021      	movs	r1, r4
    16ae:	2007      	movs	r0, #7
    16b0:	4d20      	ldr	r5, [pc, #128]	; (1734 <conf_port_pin+0xa0>)
    16b2:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    16b4:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    16b6:	0021      	movs	r1, r4
    16b8:	2006      	movs	r0, #6
    16ba:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    16bc:	4f1e      	ldr	r7, [pc, #120]	; (1738 <conf_port_pin+0xa4>)
    16be:	2340      	movs	r3, #64	; 0x40
    16c0:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    16c2:	0021      	movs	r1, r4
    16c4:	2001      	movs	r0, #1
    16c6:	47a8      	blx	r5
    16c8:	2302      	movs	r3, #2
    16ca:	4699      	mov	r9, r3
    16cc:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    16ce:	0021      	movs	r1, r4
    16d0:	2002      	movs	r0, #2
    16d2:	47a8      	blx	r5
    16d4:	2304      	movs	r3, #4
    16d6:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    16d8:	0021      	movs	r1, r4
    16da:	2003      	movs	r0, #3
    16dc:	47a8      	blx	r5
    16de:	2308      	movs	r3, #8
    16e0:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    16e2:	4643      	mov	r3, r8
    16e4:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    16e6:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    16e8:	0021      	movs	r1, r4
    16ea:	200f      	movs	r0, #15
    16ec:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    16ee:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    16f0:	0021      	movs	r1, r4
    16f2:	200e      	movs	r0, #14
    16f4:	47a8      	blx	r5
    16f6:	2380      	movs	r3, #128	; 0x80
    16f8:	01db      	lsls	r3, r3, #7
    16fa:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    16fc:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    16fe:	464b      	mov	r3, r9
    1700:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1702:	0021      	movs	r1, r4
    1704:	202f      	movs	r0, #47	; 0x2f
    1706:	47a8      	blx	r5
    1708:	2280      	movs	r2, #128	; 0x80
    170a:	0212      	lsls	r2, r2, #8
    170c:	4b0b      	ldr	r3, [pc, #44]	; (173c <conf_port_pin+0xa8>)
    170e:	619a      	str	r2, [r3, #24]
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1710:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1712:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    1714:	0021      	movs	r1, r4
    1716:	2018      	movs	r0, #24
    1718:	47a8      	blx	r5
    171a:	2380      	movs	r3, #128	; 0x80
    171c:	045b      	lsls	r3, r3, #17
    171e:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1720:	4643      	mov	r3, r8
    1722:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    1724:	0021      	movs	r1, r4
    1726:	201b      	movs	r0, #27
    1728:	47a8      	blx	r5
} // end conf_port_pin(void)
    172a:	b003      	add	sp, #12
    172c:	bc0c      	pop	{r2, r3}
    172e:	4690      	mov	r8, r2
    1730:	4699      	mov	r9, r3
    1732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1734:	00000501 	.word	0x00000501
    1738:	41004400 	.word	0x41004400
    173c:	41004480 	.word	0x41004480

00001740 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    1740:	b500      	push	{lr}
    1742:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1744:	a801      	add	r0, sp, #4
    1746:	2300      	movs	r3, #0
    1748:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    174a:	2201      	movs	r2, #1
    174c:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    174e:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1750:	4b01      	ldr	r3, [pc, #4]	; (1758 <clk_osc8m_init+0x18>)
    1752:	4798      	blx	r3
}
    1754:	b003      	add	sp, #12
    1756:	bd00      	pop	{pc}
    1758:	0000109d 	.word	0x0000109d

0000175c <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    175c:	b500      	push	{lr}
    175e:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1760:	4b0a      	ldr	r3, [pc, #40]	; (178c <clk_gclk0_init+0x30>)
    1762:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1764:	2300      	movs	r3, #0
    1766:	4a0a      	ldr	r2, [pc, #40]	; (1790 <clk_gclk0_init+0x34>)
    1768:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    176a:	a901      	add	r1, sp, #4
    176c:	2206      	movs	r2, #6
    176e:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    1770:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    1772:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1774:	3a05      	subs	r2, #5
    1776:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    1778:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    177a:	2000      	movs	r0, #0
    177c:	4b05      	ldr	r3, [pc, #20]	; (1794 <clk_gclk0_init+0x38>)
    177e:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1780:	2000      	movs	r0, #0
    1782:	4b05      	ldr	r3, [pc, #20]	; (1798 <clk_gclk0_init+0x3c>)
    1784:	4798      	blx	r3
}
    1786:	b005      	add	sp, #20
    1788:	bd00      	pop	{pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	00001209 	.word	0x00001209
    1790:	40000400 	.word	0x40000400
    1794:	0000122d 	.word	0x0000122d
    1798:	000012fd 	.word	0x000012fd

0000179c <sys_clk_init>:
{
    179c:	b510      	push	{r4, lr}
	clk_osc8m_init();
    179e:	4b03      	ldr	r3, [pc, #12]	; (17ac <sys_clk_init+0x10>)
    17a0:	4798      	blx	r3
	clk_gclk0_init();
    17a2:	4b03      	ldr	r3, [pc, #12]	; (17b0 <sys_clk_init+0x14>)
    17a4:	4798      	blx	r3
    delay_init();
    17a6:	4b03      	ldr	r3, [pc, #12]	; (17b4 <sys_clk_init+0x18>)
    17a8:	4798      	blx	r3
}
    17aa:	bd10      	pop	{r4, pc}
    17ac:	00001741 	.word	0x00001741
    17b0:	0000175d 	.word	0x0000175d
    17b4:	00000495 	.word	0x00000495

000017b8 <simSysInit>:
{
    17b8:	b510      	push	{r4, lr}
	system_init();
    17ba:	4b04      	ldr	r3, [pc, #16]	; (17cc <simSysInit+0x14>)
    17bc:	4798      	blx	r3
	sys_clk_init();
    17be:	4b04      	ldr	r3, [pc, #16]	; (17d0 <simSysInit+0x18>)
    17c0:	4798      	blx	r3
	conf_port_pin();
    17c2:	4b04      	ldr	r3, [pc, #16]	; (17d4 <simSysInit+0x1c>)
    17c4:	4798      	blx	r3
    uart915_init();
    17c6:	4b04      	ldr	r3, [pc, #16]	; (17d8 <simSysInit+0x20>)
    17c8:	4798      	blx	r3
}
    17ca:	bd10      	pop	{r4, pc}
    17cc:	000015a1 	.word	0x000015a1
    17d0:	0000179d 	.word	0x0000179d
    17d4:	00001695 	.word	0x00001695
    17d8:	000002c1 	.word	0x000002c1

000017dc <main>:
{
    17dc:	b500      	push	{lr}
    17de:	b083      	sub	sp, #12
    rssi_vals acquired_rssi = {10, 20, 30};
    17e0:	4b0a      	ldr	r3, [pc, #40]	; (180c <main+0x30>)
    17e2:	681a      	ldr	r2, [r3, #0]
    17e4:	9200      	str	r2, [sp, #0]
    17e6:	889b      	ldrh	r3, [r3, #4]
    17e8:	466a      	mov	r2, sp
    17ea:	8093      	strh	r3, [r2, #4]
    simSysInit();
    17ec:	4b08      	ldr	r3, [pc, #32]	; (1810 <main+0x34>)
    17ee:	4798      	blx	r3
    delay_ms(100);
    17f0:	2064      	movs	r0, #100	; 0x64
    17f2:	4b08      	ldr	r3, [pc, #32]	; (1814 <main+0x38>)
    17f4:	4798      	blx	r3
    uart915_preconnect();
    17f6:	4b08      	ldr	r3, [pc, #32]	; (1818 <main+0x3c>)
    17f8:	4798      	blx	r3
        acquired_rssi.rssi915 = uart915_get_rssi();
    17fa:	4b08      	ldr	r3, [pc, #32]	; (181c <main+0x40>)
    17fc:	4798      	blx	r3
    17fe:	466b      	mov	r3, sp
    1800:	8058      	strh	r0, [r3, #2]
        delay_ms(100);
    1802:	2064      	movs	r0, #100	; 0x64
    1804:	4b03      	ldr	r3, [pc, #12]	; (1814 <main+0x38>)
    1806:	4798      	blx	r3
    1808:	e7f7      	b.n	17fa <main+0x1e>
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	00001c1c 	.word	0x00001c1c
    1810:	000017b9 	.word	0x000017b9
    1814:	000004d1 	.word	0x000004d1
    1818:	00000471 	.word	0x00000471
    181c:	000003e1 	.word	0x000003e1

00001820 <__udivsi3>:
    1820:	2200      	movs	r2, #0
    1822:	0843      	lsrs	r3, r0, #1
    1824:	428b      	cmp	r3, r1
    1826:	d374      	bcc.n	1912 <__udivsi3+0xf2>
    1828:	0903      	lsrs	r3, r0, #4
    182a:	428b      	cmp	r3, r1
    182c:	d35f      	bcc.n	18ee <__udivsi3+0xce>
    182e:	0a03      	lsrs	r3, r0, #8
    1830:	428b      	cmp	r3, r1
    1832:	d344      	bcc.n	18be <__udivsi3+0x9e>
    1834:	0b03      	lsrs	r3, r0, #12
    1836:	428b      	cmp	r3, r1
    1838:	d328      	bcc.n	188c <__udivsi3+0x6c>
    183a:	0c03      	lsrs	r3, r0, #16
    183c:	428b      	cmp	r3, r1
    183e:	d30d      	bcc.n	185c <__udivsi3+0x3c>
    1840:	22ff      	movs	r2, #255	; 0xff
    1842:	0209      	lsls	r1, r1, #8
    1844:	ba12      	rev	r2, r2
    1846:	0c03      	lsrs	r3, r0, #16
    1848:	428b      	cmp	r3, r1
    184a:	d302      	bcc.n	1852 <__udivsi3+0x32>
    184c:	1212      	asrs	r2, r2, #8
    184e:	0209      	lsls	r1, r1, #8
    1850:	d065      	beq.n	191e <__udivsi3+0xfe>
    1852:	0b03      	lsrs	r3, r0, #12
    1854:	428b      	cmp	r3, r1
    1856:	d319      	bcc.n	188c <__udivsi3+0x6c>
    1858:	e000      	b.n	185c <__udivsi3+0x3c>
    185a:	0a09      	lsrs	r1, r1, #8
    185c:	0bc3      	lsrs	r3, r0, #15
    185e:	428b      	cmp	r3, r1
    1860:	d301      	bcc.n	1866 <__udivsi3+0x46>
    1862:	03cb      	lsls	r3, r1, #15
    1864:	1ac0      	subs	r0, r0, r3
    1866:	4152      	adcs	r2, r2
    1868:	0b83      	lsrs	r3, r0, #14
    186a:	428b      	cmp	r3, r1
    186c:	d301      	bcc.n	1872 <__udivsi3+0x52>
    186e:	038b      	lsls	r3, r1, #14
    1870:	1ac0      	subs	r0, r0, r3
    1872:	4152      	adcs	r2, r2
    1874:	0b43      	lsrs	r3, r0, #13
    1876:	428b      	cmp	r3, r1
    1878:	d301      	bcc.n	187e <__udivsi3+0x5e>
    187a:	034b      	lsls	r3, r1, #13
    187c:	1ac0      	subs	r0, r0, r3
    187e:	4152      	adcs	r2, r2
    1880:	0b03      	lsrs	r3, r0, #12
    1882:	428b      	cmp	r3, r1
    1884:	d301      	bcc.n	188a <__udivsi3+0x6a>
    1886:	030b      	lsls	r3, r1, #12
    1888:	1ac0      	subs	r0, r0, r3
    188a:	4152      	adcs	r2, r2
    188c:	0ac3      	lsrs	r3, r0, #11
    188e:	428b      	cmp	r3, r1
    1890:	d301      	bcc.n	1896 <__udivsi3+0x76>
    1892:	02cb      	lsls	r3, r1, #11
    1894:	1ac0      	subs	r0, r0, r3
    1896:	4152      	adcs	r2, r2
    1898:	0a83      	lsrs	r3, r0, #10
    189a:	428b      	cmp	r3, r1
    189c:	d301      	bcc.n	18a2 <__udivsi3+0x82>
    189e:	028b      	lsls	r3, r1, #10
    18a0:	1ac0      	subs	r0, r0, r3
    18a2:	4152      	adcs	r2, r2
    18a4:	0a43      	lsrs	r3, r0, #9
    18a6:	428b      	cmp	r3, r1
    18a8:	d301      	bcc.n	18ae <__udivsi3+0x8e>
    18aa:	024b      	lsls	r3, r1, #9
    18ac:	1ac0      	subs	r0, r0, r3
    18ae:	4152      	adcs	r2, r2
    18b0:	0a03      	lsrs	r3, r0, #8
    18b2:	428b      	cmp	r3, r1
    18b4:	d301      	bcc.n	18ba <__udivsi3+0x9a>
    18b6:	020b      	lsls	r3, r1, #8
    18b8:	1ac0      	subs	r0, r0, r3
    18ba:	4152      	adcs	r2, r2
    18bc:	d2cd      	bcs.n	185a <__udivsi3+0x3a>
    18be:	09c3      	lsrs	r3, r0, #7
    18c0:	428b      	cmp	r3, r1
    18c2:	d301      	bcc.n	18c8 <__udivsi3+0xa8>
    18c4:	01cb      	lsls	r3, r1, #7
    18c6:	1ac0      	subs	r0, r0, r3
    18c8:	4152      	adcs	r2, r2
    18ca:	0983      	lsrs	r3, r0, #6
    18cc:	428b      	cmp	r3, r1
    18ce:	d301      	bcc.n	18d4 <__udivsi3+0xb4>
    18d0:	018b      	lsls	r3, r1, #6
    18d2:	1ac0      	subs	r0, r0, r3
    18d4:	4152      	adcs	r2, r2
    18d6:	0943      	lsrs	r3, r0, #5
    18d8:	428b      	cmp	r3, r1
    18da:	d301      	bcc.n	18e0 <__udivsi3+0xc0>
    18dc:	014b      	lsls	r3, r1, #5
    18de:	1ac0      	subs	r0, r0, r3
    18e0:	4152      	adcs	r2, r2
    18e2:	0903      	lsrs	r3, r0, #4
    18e4:	428b      	cmp	r3, r1
    18e6:	d301      	bcc.n	18ec <__udivsi3+0xcc>
    18e8:	010b      	lsls	r3, r1, #4
    18ea:	1ac0      	subs	r0, r0, r3
    18ec:	4152      	adcs	r2, r2
    18ee:	08c3      	lsrs	r3, r0, #3
    18f0:	428b      	cmp	r3, r1
    18f2:	d301      	bcc.n	18f8 <__udivsi3+0xd8>
    18f4:	00cb      	lsls	r3, r1, #3
    18f6:	1ac0      	subs	r0, r0, r3
    18f8:	4152      	adcs	r2, r2
    18fa:	0883      	lsrs	r3, r0, #2
    18fc:	428b      	cmp	r3, r1
    18fe:	d301      	bcc.n	1904 <__udivsi3+0xe4>
    1900:	008b      	lsls	r3, r1, #2
    1902:	1ac0      	subs	r0, r0, r3
    1904:	4152      	adcs	r2, r2
    1906:	0843      	lsrs	r3, r0, #1
    1908:	428b      	cmp	r3, r1
    190a:	d301      	bcc.n	1910 <__udivsi3+0xf0>
    190c:	004b      	lsls	r3, r1, #1
    190e:	1ac0      	subs	r0, r0, r3
    1910:	4152      	adcs	r2, r2
    1912:	1a41      	subs	r1, r0, r1
    1914:	d200      	bcs.n	1918 <__udivsi3+0xf8>
    1916:	4601      	mov	r1, r0
    1918:	4152      	adcs	r2, r2
    191a:	4610      	mov	r0, r2
    191c:	4770      	bx	lr
    191e:	e7ff      	b.n	1920 <__udivsi3+0x100>
    1920:	b501      	push	{r0, lr}
    1922:	2000      	movs	r0, #0
    1924:	f000 f806 	bl	1934 <__aeabi_idiv0>
    1928:	bd02      	pop	{r1, pc}
    192a:	46c0      	nop			; (mov r8, r8)

0000192c <__aeabi_uidivmod>:
    192c:	2900      	cmp	r1, #0
    192e:	d0f7      	beq.n	1920 <__udivsi3+0x100>
    1930:	e776      	b.n	1820 <__udivsi3>
    1932:	4770      	bx	lr

00001934 <__aeabi_idiv0>:
    1934:	4770      	bx	lr
    1936:	46c0      	nop			; (mov r8, r8)

00001938 <__aeabi_lmul>:
    1938:	b5f0      	push	{r4, r5, r6, r7, lr}
    193a:	46ce      	mov	lr, r9
    193c:	4647      	mov	r7, r8
    193e:	0415      	lsls	r5, r2, #16
    1940:	0c2d      	lsrs	r5, r5, #16
    1942:	002e      	movs	r6, r5
    1944:	b580      	push	{r7, lr}
    1946:	0407      	lsls	r7, r0, #16
    1948:	0c14      	lsrs	r4, r2, #16
    194a:	0c3f      	lsrs	r7, r7, #16
    194c:	4699      	mov	r9, r3
    194e:	0c03      	lsrs	r3, r0, #16
    1950:	437e      	muls	r6, r7
    1952:	435d      	muls	r5, r3
    1954:	4367      	muls	r7, r4
    1956:	4363      	muls	r3, r4
    1958:	197f      	adds	r7, r7, r5
    195a:	0c34      	lsrs	r4, r6, #16
    195c:	19e4      	adds	r4, r4, r7
    195e:	469c      	mov	ip, r3
    1960:	42a5      	cmp	r5, r4
    1962:	d903      	bls.n	196c <__aeabi_lmul+0x34>
    1964:	2380      	movs	r3, #128	; 0x80
    1966:	025b      	lsls	r3, r3, #9
    1968:	4698      	mov	r8, r3
    196a:	44c4      	add	ip, r8
    196c:	464b      	mov	r3, r9
    196e:	4351      	muls	r1, r2
    1970:	4343      	muls	r3, r0
    1972:	0436      	lsls	r6, r6, #16
    1974:	0c36      	lsrs	r6, r6, #16
    1976:	0c25      	lsrs	r5, r4, #16
    1978:	0424      	lsls	r4, r4, #16
    197a:	4465      	add	r5, ip
    197c:	19a4      	adds	r4, r4, r6
    197e:	1859      	adds	r1, r3, r1
    1980:	1949      	adds	r1, r1, r5
    1982:	0020      	movs	r0, r4
    1984:	bc0c      	pop	{r2, r3}
    1986:	4690      	mov	r8, r2
    1988:	4699      	mov	r9, r3
    198a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000198c <atoi>:
    198c:	b510      	push	{r4, lr}
    198e:	220a      	movs	r2, #10
    1990:	2100      	movs	r1, #0
    1992:	f000 f8df 	bl	1b54 <strtol>
    1996:	bd10      	pop	{r4, pc}

00001998 <__libc_init_array>:
    1998:	b570      	push	{r4, r5, r6, lr}
    199a:	2600      	movs	r6, #0
    199c:	4d0c      	ldr	r5, [pc, #48]	; (19d0 <__libc_init_array+0x38>)
    199e:	4c0d      	ldr	r4, [pc, #52]	; (19d4 <__libc_init_array+0x3c>)
    19a0:	1b64      	subs	r4, r4, r5
    19a2:	10a4      	asrs	r4, r4, #2
    19a4:	42a6      	cmp	r6, r4
    19a6:	d109      	bne.n	19bc <__libc_init_array+0x24>
    19a8:	2600      	movs	r6, #0
    19aa:	f000 f9c1 	bl	1d30 <_init>
    19ae:	4d0a      	ldr	r5, [pc, #40]	; (19d8 <__libc_init_array+0x40>)
    19b0:	4c0a      	ldr	r4, [pc, #40]	; (19dc <__libc_init_array+0x44>)
    19b2:	1b64      	subs	r4, r4, r5
    19b4:	10a4      	asrs	r4, r4, #2
    19b6:	42a6      	cmp	r6, r4
    19b8:	d105      	bne.n	19c6 <__libc_init_array+0x2e>
    19ba:	bd70      	pop	{r4, r5, r6, pc}
    19bc:	00b3      	lsls	r3, r6, #2
    19be:	58eb      	ldr	r3, [r5, r3]
    19c0:	4798      	blx	r3
    19c2:	3601      	adds	r6, #1
    19c4:	e7ee      	b.n	19a4 <__libc_init_array+0xc>
    19c6:	00b3      	lsls	r3, r6, #2
    19c8:	58eb      	ldr	r3, [r5, r3]
    19ca:	4798      	blx	r3
    19cc:	3601      	adds	r6, #1
    19ce:	e7f2      	b.n	19b6 <__libc_init_array+0x1e>
    19d0:	00001d3c 	.word	0x00001d3c
    19d4:	00001d3c 	.word	0x00001d3c
    19d8:	00001d3c 	.word	0x00001d3c
    19dc:	00001d40 	.word	0x00001d40

000019e0 <__locale_ctype_ptr_l>:
    19e0:	30ec      	adds	r0, #236	; 0xec
    19e2:	6800      	ldr	r0, [r0, #0]
    19e4:	4770      	bx	lr
	...

000019e8 <__locale_ctype_ptr>:
    19e8:	4b04      	ldr	r3, [pc, #16]	; (19fc <__locale_ctype_ptr+0x14>)
    19ea:	681b      	ldr	r3, [r3, #0]
    19ec:	6a1b      	ldr	r3, [r3, #32]
    19ee:	2b00      	cmp	r3, #0
    19f0:	d100      	bne.n	19f4 <__locale_ctype_ptr+0xc>
    19f2:	4b03      	ldr	r3, [pc, #12]	; (1a00 <__locale_ctype_ptr+0x18>)
    19f4:	33ec      	adds	r3, #236	; 0xec
    19f6:	6818      	ldr	r0, [r3, #0]
    19f8:	4770      	bx	lr
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	2000001c 	.word	0x2000001c
    1a00:	20000080 	.word	0x20000080

00001a04 <__ascii_mbtowc>:
    1a04:	b082      	sub	sp, #8
    1a06:	2900      	cmp	r1, #0
    1a08:	d100      	bne.n	1a0c <__ascii_mbtowc+0x8>
    1a0a:	a901      	add	r1, sp, #4
    1a0c:	1e10      	subs	r0, r2, #0
    1a0e:	d006      	beq.n	1a1e <__ascii_mbtowc+0x1a>
    1a10:	2b00      	cmp	r3, #0
    1a12:	d006      	beq.n	1a22 <__ascii_mbtowc+0x1e>
    1a14:	7813      	ldrb	r3, [r2, #0]
    1a16:	600b      	str	r3, [r1, #0]
    1a18:	7810      	ldrb	r0, [r2, #0]
    1a1a:	1e43      	subs	r3, r0, #1
    1a1c:	4198      	sbcs	r0, r3
    1a1e:	b002      	add	sp, #8
    1a20:	4770      	bx	lr
    1a22:	2002      	movs	r0, #2
    1a24:	4240      	negs	r0, r0
    1a26:	e7fa      	b.n	1a1e <__ascii_mbtowc+0x1a>

00001a28 <memset>:
    1a28:	0003      	movs	r3, r0
    1a2a:	1882      	adds	r2, r0, r2
    1a2c:	4293      	cmp	r3, r2
    1a2e:	d100      	bne.n	1a32 <memset+0xa>
    1a30:	4770      	bx	lr
    1a32:	7019      	strb	r1, [r3, #0]
    1a34:	3301      	adds	r3, #1
    1a36:	e7f9      	b.n	1a2c <memset+0x4>

00001a38 <strlen>:
    1a38:	2300      	movs	r3, #0
    1a3a:	5cc2      	ldrb	r2, [r0, r3]
    1a3c:	3301      	adds	r3, #1
    1a3e:	2a00      	cmp	r2, #0
    1a40:	d1fb      	bne.n	1a3a <strlen+0x2>
    1a42:	1e58      	subs	r0, r3, #1
    1a44:	4770      	bx	lr
	...

00001a48 <_strtol_l.isra.0>:
    1a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a4a:	001f      	movs	r7, r3
    1a4c:	000e      	movs	r6, r1
    1a4e:	b087      	sub	sp, #28
    1a50:	9005      	str	r0, [sp, #20]
    1a52:	9103      	str	r1, [sp, #12]
    1a54:	9202      	str	r2, [sp, #8]
    1a56:	980c      	ldr	r0, [sp, #48]	; 0x30
    1a58:	7834      	ldrb	r4, [r6, #0]
    1a5a:	f7ff ffc1 	bl	19e0 <__locale_ctype_ptr_l>
    1a5e:	2208      	movs	r2, #8
    1a60:	1900      	adds	r0, r0, r4
    1a62:	7843      	ldrb	r3, [r0, #1]
    1a64:	1c75      	adds	r5, r6, #1
    1a66:	4013      	ands	r3, r2
    1a68:	d10c      	bne.n	1a84 <_strtol_l.isra.0+0x3c>
    1a6a:	2c2d      	cmp	r4, #45	; 0x2d
    1a6c:	d10c      	bne.n	1a88 <_strtol_l.isra.0+0x40>
    1a6e:	3301      	adds	r3, #1
    1a70:	782c      	ldrb	r4, [r5, #0]
    1a72:	9301      	str	r3, [sp, #4]
    1a74:	1cb5      	adds	r5, r6, #2
    1a76:	2f00      	cmp	r7, #0
    1a78:	d00c      	beq.n	1a94 <_strtol_l.isra.0+0x4c>
    1a7a:	2f10      	cmp	r7, #16
    1a7c:	d114      	bne.n	1aa8 <_strtol_l.isra.0+0x60>
    1a7e:	2c30      	cmp	r4, #48	; 0x30
    1a80:	d00a      	beq.n	1a98 <_strtol_l.isra.0+0x50>
    1a82:	e011      	b.n	1aa8 <_strtol_l.isra.0+0x60>
    1a84:	002e      	movs	r6, r5
    1a86:	e7e6      	b.n	1a56 <_strtol_l.isra.0+0xe>
    1a88:	9301      	str	r3, [sp, #4]
    1a8a:	2c2b      	cmp	r4, #43	; 0x2b
    1a8c:	d1f3      	bne.n	1a76 <_strtol_l.isra.0+0x2e>
    1a8e:	782c      	ldrb	r4, [r5, #0]
    1a90:	1cb5      	adds	r5, r6, #2
    1a92:	e7f0      	b.n	1a76 <_strtol_l.isra.0+0x2e>
    1a94:	2c30      	cmp	r4, #48	; 0x30
    1a96:	d12f      	bne.n	1af8 <_strtol_l.isra.0+0xb0>
    1a98:	2220      	movs	r2, #32
    1a9a:	782b      	ldrb	r3, [r5, #0]
    1a9c:	4393      	bics	r3, r2
    1a9e:	2b58      	cmp	r3, #88	; 0x58
    1aa0:	d151      	bne.n	1b46 <_strtol_l.isra.0+0xfe>
    1aa2:	2710      	movs	r7, #16
    1aa4:	786c      	ldrb	r4, [r5, #1]
    1aa6:	3502      	adds	r5, #2
    1aa8:	9b01      	ldr	r3, [sp, #4]
    1aaa:	4a29      	ldr	r2, [pc, #164]	; (1b50 <_strtol_l.isra.0+0x108>)
    1aac:	0039      	movs	r1, r7
    1aae:	189e      	adds	r6, r3, r2
    1ab0:	0030      	movs	r0, r6
    1ab2:	f7ff ff3b 	bl	192c <__aeabi_uidivmod>
    1ab6:	0030      	movs	r0, r6
    1ab8:	9104      	str	r1, [sp, #16]
    1aba:	0039      	movs	r1, r7
    1abc:	f7ff feb0 	bl	1820 <__udivsi3>
    1ac0:	2101      	movs	r1, #1
    1ac2:	2300      	movs	r3, #0
    1ac4:	4249      	negs	r1, r1
    1ac6:	0002      	movs	r2, r0
    1ac8:	468c      	mov	ip, r1
    1aca:	0018      	movs	r0, r3
    1acc:	0021      	movs	r1, r4
    1ace:	3930      	subs	r1, #48	; 0x30
    1ad0:	2909      	cmp	r1, #9
    1ad2:	d813      	bhi.n	1afc <_strtol_l.isra.0+0xb4>
    1ad4:	000c      	movs	r4, r1
    1ad6:	42a7      	cmp	r7, r4
    1ad8:	dd1c      	ble.n	1b14 <_strtol_l.isra.0+0xcc>
    1ada:	1c59      	adds	r1, r3, #1
    1adc:	d009      	beq.n	1af2 <_strtol_l.isra.0+0xaa>
    1ade:	4663      	mov	r3, ip
    1ae0:	4282      	cmp	r2, r0
    1ae2:	d306      	bcc.n	1af2 <_strtol_l.isra.0+0xaa>
    1ae4:	d102      	bne.n	1aec <_strtol_l.isra.0+0xa4>
    1ae6:	9904      	ldr	r1, [sp, #16]
    1ae8:	42a1      	cmp	r1, r4
    1aea:	db02      	blt.n	1af2 <_strtol_l.isra.0+0xaa>
    1aec:	2301      	movs	r3, #1
    1aee:	4378      	muls	r0, r7
    1af0:	1820      	adds	r0, r4, r0
    1af2:	782c      	ldrb	r4, [r5, #0]
    1af4:	3501      	adds	r5, #1
    1af6:	e7e9      	b.n	1acc <_strtol_l.isra.0+0x84>
    1af8:	270a      	movs	r7, #10
    1afa:	e7d5      	b.n	1aa8 <_strtol_l.isra.0+0x60>
    1afc:	0021      	movs	r1, r4
    1afe:	3941      	subs	r1, #65	; 0x41
    1b00:	2919      	cmp	r1, #25
    1b02:	d801      	bhi.n	1b08 <_strtol_l.isra.0+0xc0>
    1b04:	3c37      	subs	r4, #55	; 0x37
    1b06:	e7e6      	b.n	1ad6 <_strtol_l.isra.0+0x8e>
    1b08:	0021      	movs	r1, r4
    1b0a:	3961      	subs	r1, #97	; 0x61
    1b0c:	2919      	cmp	r1, #25
    1b0e:	d801      	bhi.n	1b14 <_strtol_l.isra.0+0xcc>
    1b10:	3c57      	subs	r4, #87	; 0x57
    1b12:	e7e0      	b.n	1ad6 <_strtol_l.isra.0+0x8e>
    1b14:	1c5a      	adds	r2, r3, #1
    1b16:	d108      	bne.n	1b2a <_strtol_l.isra.0+0xe2>
    1b18:	9a05      	ldr	r2, [sp, #20]
    1b1a:	3323      	adds	r3, #35	; 0x23
    1b1c:	6013      	str	r3, [r2, #0]
    1b1e:	9b02      	ldr	r3, [sp, #8]
    1b20:	0030      	movs	r0, r6
    1b22:	2b00      	cmp	r3, #0
    1b24:	d10b      	bne.n	1b3e <_strtol_l.isra.0+0xf6>
    1b26:	b007      	add	sp, #28
    1b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b2a:	9a01      	ldr	r2, [sp, #4]
    1b2c:	2a00      	cmp	r2, #0
    1b2e:	d000      	beq.n	1b32 <_strtol_l.isra.0+0xea>
    1b30:	4240      	negs	r0, r0
    1b32:	9a02      	ldr	r2, [sp, #8]
    1b34:	2a00      	cmp	r2, #0
    1b36:	d0f6      	beq.n	1b26 <_strtol_l.isra.0+0xde>
    1b38:	9a03      	ldr	r2, [sp, #12]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d000      	beq.n	1b40 <_strtol_l.isra.0+0xf8>
    1b3e:	1e6a      	subs	r2, r5, #1
    1b40:	9b02      	ldr	r3, [sp, #8]
    1b42:	601a      	str	r2, [r3, #0]
    1b44:	e7ef      	b.n	1b26 <_strtol_l.isra.0+0xde>
    1b46:	2430      	movs	r4, #48	; 0x30
    1b48:	2f00      	cmp	r7, #0
    1b4a:	d1ad      	bne.n	1aa8 <_strtol_l.isra.0+0x60>
    1b4c:	3708      	adds	r7, #8
    1b4e:	e7ab      	b.n	1aa8 <_strtol_l.isra.0+0x60>
    1b50:	7fffffff 	.word	0x7fffffff

00001b54 <strtol>:
    1b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1b56:	0013      	movs	r3, r2
    1b58:	4a06      	ldr	r2, [pc, #24]	; (1b74 <strtol+0x20>)
    1b5a:	0005      	movs	r5, r0
    1b5c:	6810      	ldr	r0, [r2, #0]
    1b5e:	6a04      	ldr	r4, [r0, #32]
    1b60:	2c00      	cmp	r4, #0
    1b62:	d100      	bne.n	1b66 <strtol+0x12>
    1b64:	4c04      	ldr	r4, [pc, #16]	; (1b78 <strtol+0x24>)
    1b66:	000a      	movs	r2, r1
    1b68:	9400      	str	r4, [sp, #0]
    1b6a:	0029      	movs	r1, r5
    1b6c:	f7ff ff6c 	bl	1a48 <_strtol_l.isra.0>
    1b70:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	2000001c 	.word	0x2000001c
    1b78:	20000080 	.word	0x20000080

00001b7c <__ascii_wctomb>:
    1b7c:	1e0b      	subs	r3, r1, #0
    1b7e:	d004      	beq.n	1b8a <__ascii_wctomb+0xe>
    1b80:	2aff      	cmp	r2, #255	; 0xff
    1b82:	d904      	bls.n	1b8e <__ascii_wctomb+0x12>
    1b84:	238a      	movs	r3, #138	; 0x8a
    1b86:	6003      	str	r3, [r0, #0]
    1b88:	3b8b      	subs	r3, #139	; 0x8b
    1b8a:	0018      	movs	r0, r3
    1b8c:	4770      	bx	lr
    1b8e:	700a      	strb	r2, [r1, #0]
    1b90:	2301      	movs	r3, #1
    1b92:	e7fa      	b.n	1b8a <__ascii_wctomb+0xe>
    1b94:	522b5441 	.word	0x522b5441
    1b98:	0d495353 	.word	0x0d495353
    1b9c:	0000000a 	.word	0x0000000a
    1ba0:	0a0d5441 	.word	0x0a0d5441
    1ba4:	00000000 	.word	0x00000000
    1ba8:	532b5441 	.word	0x532b5441
    1bac:	0d444e45 	.word	0x0d444e45
    1bb0:	0000000a 	.word	0x0000000a
    1bb4:	42000800 	.word	0x42000800
    1bb8:	42000c00 	.word	0x42000c00
    1bbc:	42001000 	.word	0x42001000
    1bc0:	42001400 	.word	0x42001400
    1bc4:	42001800 	.word	0x42001800
    1bc8:	42001c00 	.word	0x42001c00
    1bcc:	0c0b0a09 	.word	0x0c0b0a09
    1bd0:	00000e0d 	.word	0x00000e0d
    1bd4:	00001020 	.word	0x00001020
    1bd8:	00001078 	.word	0x00001078
    1bdc:	00001078 	.word	0x00001078
    1be0:	0000101a 	.word	0x0000101a
    1be4:	0000101a 	.word	0x0000101a
    1be8:	00001034 	.word	0x00001034
    1bec:	00001026 	.word	0x00001026
    1bf0:	0000103a 	.word	0x0000103a
    1bf4:	00001068 	.word	0x00001068
    1bf8:	00001104 	.word	0x00001104
    1bfc:	00001172 	.word	0x00001172
    1c00:	00001172 	.word	0x00001172
    1c04:	000010e4 	.word	0x000010e4
    1c08:	000010f6 	.word	0x000010f6
    1c0c:	00001114 	.word	0x00001114
    1c10:	000010e8 	.word	0x000010e8
    1c14:	00001124 	.word	0x00001124
    1c18:	00001160 	.word	0x00001160
    1c1c:	0014000a 	.word	0x0014000a
    1c20:	001e      	.short	0x001e
    1c22:	0043      	.short	0x0043
    1c24:	49534f50 	.word	0x49534f50
    1c28:	0058      	.short	0x0058
    1c2a:	002e      	.short	0x002e

00001c2c <_ctype_>:
    1c2c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    1c3c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    1c4c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    1c5c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    1c6c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    1c7c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    1c8c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    1c9c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    1cac:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00001d30 <_init>:
    1d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d36:	bc08      	pop	{r3}
    1d38:	469e      	mov	lr, r3
    1d3a:	4770      	bx	lr

00001d3c <__init_array_start>:
    1d3c:	000000dd 	.word	0x000000dd

00001d40 <_fini>:
    1d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d46:	bc08      	pop	{r3}
    1d48:	469e      	mov	lr, r3
    1d4a:	4770      	bx	lr

00001d4c <__fini_array_start>:
    1d4c:	000000b5 	.word	0x000000b5
