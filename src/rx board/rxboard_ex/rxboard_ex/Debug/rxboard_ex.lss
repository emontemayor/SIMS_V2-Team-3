
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000022c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ec  2000000c  000022d0  0002000c  2**2
                  ALLOC
  3 .stack        00002000  200000f8  000023bc  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002ce13  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000386a  00000000  00000000  0004cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006634  00000000  00000000  0005070a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000540  00000000  00000000  00056d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000868  00000000  00000000  0005727e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000629c  00000000  00000000  00057ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cb62  00000000  00000000  0005dd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d0dc  00000000  00000000  0006a8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000cfc  00000000  00000000  000f79c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 20 00 20 1d 1e 00 00 19 1e 00 00 19 1e 00 00     . . ............
	...
      2c:	19 1e 00 00 00 00 00 00 00 00 00 00 19 1e 00 00     ................
      3c:	19 1e 00 00 19 1e 00 00 19 1e 00 00 19 1e 00 00     ................
      4c:	19 1e 00 00 19 1e 00 00 19 1e 00 00 19 1e 00 00     ................
      5c:	19 1e 00 00 19 1e 00 00 61 17 00 00 71 17 00 00     ........a...q...
      6c:	81 17 00 00 91 17 00 00 a1 17 00 00 b1 17 00 00     ................
      7c:	19 1e 00 00 19 1e 00 00 19 1e 00 00 19 1e 00 00     ................
      8c:	19 1e 00 00 19 1e 00 00 19 1e 00 00 19 1e 00 00     ................
      9c:	19 1e 00 00 19 1e 00 00 19 1e 00 00 19 1e 00 00     ................
      ac:	19 1e 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	000022c4 	.word	0x000022c4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	000022c4 	.word	0x000022c4
     10c:	000022c4 	.word	0x000022c4
     110:	00000000 	.word	0x00000000

00000114 <spi40_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for the 40 MHz module
 */
void spi40_init(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b091      	sub	sp, #68	; 0x44
	if (spi40InitComp == true)
     118:	4b31      	ldr	r3, [pc, #196]	; (1e0 <spi40_init+0xcc>)
     11a:	781b      	ldrb	r3, [r3, #0]
     11c:	2b00      	cmp	r3, #0
     11e:	d001      	beq.n	124 <spi40_init+0x10>
	spi40SlaveConf.ss_pin = SS40;
	// attach the slave configs to the slave
	spi_attach_slave(&spi40Slave, &spi40SlaveConf);
    
    spi40InitComp = true;
}
     120:	b011      	add	sp, #68	; 0x44
     122:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     124:	ac02      	add	r4, sp, #8
     126:	2601      	movs	r6, #1
     128:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     12a:	2500      	movs	r5, #0
     12c:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     12e:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     130:	23c0      	movs	r3, #192	; 0xc0
     132:	039b      	lsls	r3, r3, #14
     134:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     136:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     138:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     13a:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     13c:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     13e:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     140:	2724      	movs	r7, #36	; 0x24
     142:	55e5      	strb	r5, [r4, r7]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     144:	220c      	movs	r2, #12
     146:	2100      	movs	r1, #0
     148:	a808      	add	r0, sp, #32
     14a:	4b26      	ldr	r3, [pc, #152]	; (1e4 <spi40_init+0xd0>)
     14c:	4798      	blx	r3
    spi40MasterConf.mux_setting = SPI40_PINXMUX;
     14e:	238c      	movs	r3, #140	; 0x8c
     150:	039b      	lsls	r3, r3, #14
     152:	60e3      	str	r3, [r4, #12]
    spi40MasterConf.pinmux_pad0 = MOSI40;
     154:	4b24      	ldr	r3, [pc, #144]	; (1e8 <spi40_init+0xd4>)
     156:	62a3      	str	r3, [r4, #40]	; 0x28
    spi40MasterConf.pinmux_pad1 = SCK40;
     158:	4b24      	ldr	r3, [pc, #144]	; (1ec <spi40_init+0xd8>)
     15a:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi40MasterConf.pinmux_pad2 = PINMUX_UNUSED;
     15c:	2301      	movs	r3, #1
     15e:	425b      	negs	r3, r3
     160:	6323      	str	r3, [r4, #48]	; 0x30
    spi40MasterConf.pinmux_pad3 = MISO40;
     162:	4b23      	ldr	r3, [pc, #140]	; (1f0 <spi40_init+0xdc>)
     164:	6363      	str	r3, [r4, #52]	; 0x34
	spi40MasterConf.generator_source = SPI40_CLK;
     166:	55e5      	strb	r5, [r4, r7]
	spi40MasterConf.mode_specific.master.baudrate = SPI40MAXCLK;
     168:	4b22      	ldr	r3, [pc, #136]	; (1f4 <spi40_init+0xe0>)
     16a:	61a3      	str	r3, [r4, #24]
	spi_init(&spi40Master, SPI40, &spi40MasterConf);
     16c:	4d22      	ldr	r5, [pc, #136]	; (1f8 <spi40_init+0xe4>)
     16e:	0022      	movs	r2, r4
     170:	4922      	ldr	r1, [pc, #136]	; (1fc <spi40_init+0xe8>)
     172:	0028      	movs	r0, r5
     174:	4b22      	ldr	r3, [pc, #136]	; (200 <spi40_init+0xec>)
     176:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     178:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     17a:	0020      	movs	r0, r4
     17c:	4b21      	ldr	r3, [pc, #132]	; (204 <spi40_init+0xf0>)
     17e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     180:	231f      	movs	r3, #31
     182:	4018      	ands	r0, r3
     184:	4086      	lsls	r6, r0
     186:	4b20      	ldr	r3, [pc, #128]	; (208 <spi40_init+0xf4>)
     188:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     18a:	4b1b      	ldr	r3, [pc, #108]	; (1f8 <spi40_init+0xe4>)
     18c:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     18e:	69db      	ldr	r3, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     190:	2b00      	cmp	r3, #0
     192:	d1fa      	bne.n	18a <spi40_init+0x76>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     194:	6823      	ldr	r3, [r4, #0]
     196:	2202      	movs	r2, #2
     198:	4313      	orrs	r3, r2
     19a:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     19c:	2300      	movs	r3, #0
	slave->ss_pin          = config->ss_pin;
     19e:	4c1b      	ldr	r4, [pc, #108]	; (20c <spi40_init+0xf8>)
     1a0:	320f      	adds	r2, #15
     1a2:	7022      	strb	r2, [r4, #0]
	slave->address_enabled = config->address_enabled;
     1a4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     1a6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1a8:	3a10      	subs	r2, #16
     1aa:	4669      	mov	r1, sp
     1ac:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     1ae:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     1b0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     1b2:	2011      	movs	r0, #17
     1b4:	4b16      	ldr	r3, [pc, #88]	; (210 <spi40_init+0xfc>)
     1b6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     1b8:	7821      	ldrb	r1, [r4, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     1ba:	09ca      	lsrs	r2, r1, #7
	uint8_t group_index = (gpio_pin / 32);
     1bc:	094b      	lsrs	r3, r1, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1be:	2a00      	cmp	r2, #0
     1c0:	d10c      	bne.n	1dc <spi40_init+0xc8>
		return &(ports[port_index]->Group[group_index]);
     1c2:	01db      	lsls	r3, r3, #7
     1c4:	4a13      	ldr	r2, [pc, #76]	; (214 <spi40_init+0x100>)
     1c6:	4694      	mov	ip, r2
     1c8:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1ca:	221f      	movs	r2, #31
     1cc:	400a      	ands	r2, r1
     1ce:	2101      	movs	r1, #1
     1d0:	0008      	movs	r0, r1
     1d2:	4090      	lsls	r0, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1d4:	6198      	str	r0, [r3, #24]
    spi40InitComp = true;
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <spi40_init+0xcc>)
     1d8:	7019      	strb	r1, [r3, #0]
     1da:	e7a1      	b.n	120 <spi40_init+0xc>
	} else {
		Assert(false);
		return NULL;
     1dc:	2300      	movs	r3, #0
     1de:	e7f4      	b.n	1ca <spi40_init+0xb6>
     1e0:	20000028 	.word	0x20000028
     1e4:	00002227 	.word	0x00002227
     1e8:	00100002 	.word	0x00100002
     1ec:	00130002 	.word	0x00130002
     1f0:	00120002 	.word	0x00120002
     1f4:	000f4240 	.word	0x000f4240
     1f8:	2000009c 	.word	0x2000009c
     1fc:	42000c00 	.word	0x42000c00
     200:	00000d55 	.word	0x00000d55
     204:	0000173d 	.word	0x0000173d
     208:	e000e100 	.word	0xe000e100
     20c:	200000d8 	.word	0x200000d8
     210:	000008e5 	.word	0x000008e5
     214:	41004400 	.word	0x41004400

00000218 <spi40_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Begins a SPI transfer with the 40 MHz module. Sends the
 *  starting address of the read/write and reads the status bits of the module.
 */
status_code_genare_t spi40_start_xfer(spiAddr40 paramAddr, xferDir40 dir)
{
     218:	b510      	push	{r4, lr}
     21a:	b082      	sub	sp, #8
    
    status_code_genare_t read_status;

    // set the upper nibble of the address to all ones
    paramAddr |= 0xF000;
     21c:	4b10      	ldr	r3, [pc, #64]	; (260 <spi40_start_xfer+0x48>)
     21e:	4318      	orrs	r0, r3
     220:	b280      	uxth	r0, r0
     222:	466b      	mov	r3, sp
     224:	80d8      	strh	r0, [r3, #6]
    
    if(dir == READ)
     226:	2900      	cmp	r1, #0
     228:	d103      	bne.n	232 <spi40_start_xfer+0x1a>
    {
        //clear the MSB of the address if it's a read
        paramAddr &= 0x7FFF;
     22a:	0440      	lsls	r0, r0, #17
     22c:	0c40      	lsrs	r0, r0, #17
     22e:	466b      	mov	r3, sp
     230:	80d8      	strh	r0, [r3, #6]
    }        
    // else leave it unchanged, because the MSB = 1 if it's a write
    
    // swap the address bytes so the most significant byte is transferred first
    paramAddr = ((paramAddr >> 8) & 0x00FF) | (paramAddr << 8);
     232:	466b      	mov	r3, sp
     234:	1d9a      	adds	r2, r3, #6
     236:	88db      	ldrh	r3, [r3, #6]
     238:	0219      	lsls	r1, r3, #8
     23a:	0a1b      	lsrs	r3, r3, #8
     23c:	430b      	orrs	r3, r1
     23e:	8013      	strh	r3, [r2, #0]
    
    do{
        // select the slave
        read_status = spi_select_slave(&spi40Master, &spi40Slave, true);
     240:	2201      	movs	r2, #1
     242:	4908      	ldr	r1, [pc, #32]	; (264 <spi40_start_xfer+0x4c>)
     244:	4808      	ldr	r0, [pc, #32]	; (268 <spi40_start_xfer+0x50>)
     246:	4b09      	ldr	r3, [pc, #36]	; (26c <spi40_start_xfer+0x54>)
     248:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
     24a:	2805      	cmp	r0, #5
     24c:	d0f8      	beq.n	240 <spi40_start_xfer+0x28>
    
    /* perform a SPI transceive (write AND read). Write the param address and
     * read the status bits from the module */
    read_status = spi_transceive_buffer_wait(&spi40Master, (uint8_t*) &paramAddr, 
     24e:	2302      	movs	r3, #2
     250:	4a07      	ldr	r2, [pc, #28]	; (270 <spi40_start_xfer+0x58>)
     252:	4669      	mov	r1, sp
     254:	3106      	adds	r1, #6
     256:	4804      	ldr	r0, [pc, #16]	; (268 <spi40_start_xfer+0x50>)
     258:	4c06      	ldr	r4, [pc, #24]	; (274 <spi40_start_xfer+0x5c>)
     25a:	47a0      	blx	r4
                    (uint8_t*) &spi40_status_bits, 2);
    
    return read_status;
}
     25c:	b002      	add	sp, #8
     25e:	bd10      	pop	{r4, pc}
     260:	fffff000 	.word	0xfffff000
     264:	200000d8 	.word	0x200000d8
     268:	2000009c 	.word	0x2000009c
     26c:	00000f3d 	.word	0x00000f3d
     270:	2000002a 	.word	0x2000002a
     274:	00001225 	.word	0x00001225

00000278 <spi40_stop_xfer>:
 * Parameters       : void
 * Return Values(s) : ASF general status code
 * Description      : Stops a transfer, i.e. releases slave select.
 */
status_code_genare_t spi40_stop_xfer(void)
{
     278:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&spi40Master, &spi40Slave, false);
     27a:	2200      	movs	r2, #0
     27c:	4902      	ldr	r1, [pc, #8]	; (288 <spi40_stop_xfer+0x10>)
     27e:	4803      	ldr	r0, [pc, #12]	; (28c <spi40_stop_xfer+0x14>)
     280:	4b03      	ldr	r3, [pc, #12]	; (290 <spi40_stop_xfer+0x18>)
     282:	4798      	blx	r3
}
     284:	bd10      	pop	{r4, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	200000d8 	.word	0x200000d8
     28c:	2000009c 	.word	0x2000009c
     290:	00000f3d 	.word	0x00000f3d

00000294 <spi40_read>:
 * Description      : Reads a number of bytes specified by amount_bytes into
 *  read_buff. Used with spi40_start_xfer and spi40_stop_xfer().
 */
status_code_genare_t spi40_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
     294:	b510      	push	{r4, lr}
     296:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&spi40Master, \
     298:	2300      	movs	r3, #0
     29a:	0001      	movs	r1, r0
     29c:	4801      	ldr	r0, [pc, #4]	; (2a4 <spi40_read+0x10>)
     29e:	4c02      	ldr	r4, [pc, #8]	; (2a8 <spi40_read+0x14>)
     2a0:	47a0      	blx	r4
    read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
     2a2:	bd10      	pop	{r4, pc}
     2a4:	2000009c 	.word	0x2000009c
     2a8:	00000e41 	.word	0x00000e41

000002ac <spi40_rd8>:
 * Parameters       : read_addr (address to read from)
 * Return Values(s) : a byte
 * Description      : Reads a single byte from the 40 MHz module at read_addr.
 */
uint8_t spi40_rd8(spiAddr40 read_addr)
{
     2ac:	b510      	push	{r4, lr}
     2ae:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
     2b0:	466b      	mov	r3, sp
     2b2:	1ddc      	adds	r4, r3, #7
     2b4:	2300      	movs	r3, #0
     2b6:	7023      	strb	r3, [r4, #0]
    
    spi40_start_xfer(read_addr, READ);
     2b8:	2100      	movs	r1, #0
     2ba:	4b05      	ldr	r3, [pc, #20]	; (2d0 <spi40_rd8+0x24>)
     2bc:	4798      	blx	r3
  
    // read one byte
    spi40_read(&read_byte, 1);
     2be:	2101      	movs	r1, #1
     2c0:	0020      	movs	r0, r4
     2c2:	4b04      	ldr	r3, [pc, #16]	; (2d4 <spi40_rd8+0x28>)
     2c4:	4798      	blx	r3
    
    spi40_stop_xfer();
     2c6:	4b04      	ldr	r3, [pc, #16]	; (2d8 <spi40_rd8+0x2c>)
     2c8:	4798      	blx	r3
    
    return read_byte;
     2ca:	7820      	ldrb	r0, [r4, #0]
}
     2cc:	b002      	add	sp, #8
     2ce:	bd10      	pop	{r4, pc}
     2d0:	00000219 	.word	0x00000219
     2d4:	00000295 	.word	0x00000295
     2d8:	00000279 	.word	0x00000279

000002dc <spi40_write>:
 * Description      : Writes a number of bytes specified by amount_bytes to
 *  the 40 MHz module. Used with spi40_start_xfer and spi40_stop_xfer().
 */
status_code_genare_t spi40_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
     2dc:	b510      	push	{r4, lr}
     2de:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&spi40Master, \
     2e0:	0001      	movs	r1, r0
     2e2:	4802      	ldr	r0, [pc, #8]	; (2ec <spi40_write+0x10>)
     2e4:	4b02      	ldr	r3, [pc, #8]	; (2f0 <spi40_write+0x14>)
     2e6:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
}
     2e8:	bd10      	pop	{r4, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	2000009c 	.word	0x2000009c
     2f0:	00001039 	.word	0x00001039

000002f4 <spi40_wr8>:
 * Parameters       : wrt_addr (address to write to), wrt_byte
 * Return Values(s) : ASF general status code
 * Description      : Writes a single byte to the 40 MHz module at wrt_addr.
 */
status_code_genare_t spi40_wr8(spiAddr40 wrt_addr, uint8_t wrt_byte)
{
     2f4:	b510      	push	{r4, lr}
     2f6:	b082      	sub	sp, #8
     2f8:	466b      	mov	r3, sp
     2fa:	1ddc      	adds	r4, r3, #7
     2fc:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    spi40_start_xfer(wrt_addr, WRT);
     2fe:	2101      	movs	r1, #1
     300:	4b05      	ldr	r3, [pc, #20]	; (318 <spi40_wr8+0x24>)
     302:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = spi40_write(&wrt_byte, 1);
     304:	2101      	movs	r1, #1
     306:	0020      	movs	r0, r4
     308:	4b04      	ldr	r3, [pc, #16]	; (31c <spi40_wr8+0x28>)
     30a:	4798      	blx	r3
     30c:	0004      	movs	r4, r0
    
    spi40_stop_xfer();
     30e:	4b04      	ldr	r3, [pc, #16]	; (320 <spi40_wr8+0x2c>)
     310:	4798      	blx	r3
    
    return status_result;
}
     312:	0020      	movs	r0, r4
     314:	b002      	add	sp, #8
     316:	bd10      	pop	{r4, pc}
     318:	00000219 	.word	0x00000219
     31c:	000002dd 	.word	0x000002dd
     320:	00000279 	.word	0x00000279

00000324 <spi40_autorange>:
 * Return Values(s) : void
 * Description      : Performs autoranging on the AX5043 PLL. See
 *  pg13 of the AX043 programmer's manual for more information.
 */
void spi40_autorange(void)
{
     324:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_PLLRANGINGA, 0x18);
     326:	2118      	movs	r1, #24
     328:	2033      	movs	r0, #51	; 0x33
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <spi40_autorange+0x18>)
     32c:	4798      	blx	r3
    
    while(spi40_rd8(AX5043_PLLRANGINGA) & 0x10);   
     32e:	2033      	movs	r0, #51	; 0x33
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <spi40_autorange+0x1c>)
     332:	4798      	blx	r3
     334:	06c3      	lsls	r3, r0, #27
     336:	d4fa      	bmi.n	32e <spi40_autorange+0xa>
    
}
     338:	bd10      	pop	{r4, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	000002f5 	.word	0x000002f5
     340:	000002ad 	.word	0x000002ad

00000344 <spi40_rx_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes a 40 MHz module for transmitting.
 */
void spi40_rx_init(void)
{
     344:	b510      	push	{r4, lr}
    // set power mode to standby
    spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
     346:	2165      	movs	r1, #101	; 0x65
     348:	2002      	movs	r0, #2
     34a:	4cfe      	ldr	r4, [pc, #1016]	; (744 <spi40_rx_init+0x400>)
     34c:	47a0      	blx	r4
    delay_ms(100);
     34e:	2064      	movs	r0, #100	; 0x64
     350:	4bfd      	ldr	r3, [pc, #1012]	; (748 <spi40_rx_init+0x404>)
     352:	4798      	blx	r3
    
    spi40_wr8(AX5043_MODULATION, 0x08);
     354:	2108      	movs	r1, #8
     356:	2010      	movs	r0, #16
     358:	47a0      	blx	r4
    spi40_wr8(AX5043_ENCODING, 0x00);
     35a:	2100      	movs	r1, #0
     35c:	2011      	movs	r0, #17
     35e:	47a0      	blx	r4
    spi40_wr8(AX5043_FRAMING, 0x06);
     360:	2106      	movs	r1, #6
     362:	2012      	movs	r0, #18
     364:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCSYSCLK, 0x02);
     366:	2102      	movs	r1, #2
     368:	2021      	movs	r0, #33	; 0x21
     36a:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCDCLK, 0x02);
     36c:	2102      	movs	r1, #2
     36e:	2022      	movs	r0, #34	; 0x22
     370:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCDATA, 0x02);
     372:	2102      	movs	r1, #2
     374:	2023      	movs	r0, #35	; 0x23
     376:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCANTSEL, 0x02);
     378:	2102      	movs	r1, #2
     37a:	2025      	movs	r0, #37	; 0x25
     37c:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCPWRAMP, 0x02);
     37e:	2102      	movs	r1, #2
     380:	2026      	movs	r0, #38	; 0x26
     382:	47a0      	blx	r4
    spi40_wr8(AX5043_WAKEUPXOEARLY, 0x01);
     384:	2101      	movs	r1, #1
     386:	206e      	movs	r0, #110	; 0x6e
     388:	47a0      	blx	r4
    spi40_wr8(AX5043_IFFREQ1, 0x06);
     38a:	2106      	movs	r1, #6
     38c:	2080      	movs	r0, #128	; 0x80
     38e:	0040      	lsls	r0, r0, #1
     390:	47a0      	blx	r4
    spi40_wr8(AX5043_IFFREQ0, 0x66);
     392:	2166      	movs	r1, #102	; 0x66
     394:	2002      	movs	r0, #2
     396:	30ff      	adds	r0, #255	; 0xff
     398:	47a0      	blx	r4
    spi40_wr8(AX5043_DECIMATION, 0x05);
     39a:	2105      	movs	r1, #5
     39c:	2081      	movs	r0, #129	; 0x81
     39e:	0040      	lsls	r0, r0, #1
     3a0:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE2, 0x05);
     3a2:	2105      	movs	r1, #5
     3a4:	2004      	movs	r0, #4
     3a6:	30ff      	adds	r0, #255	; 0xff
     3a8:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE1, 0x35);
     3aa:	2135      	movs	r1, #53	; 0x35
     3ac:	2082      	movs	r0, #130	; 0x82
     3ae:	0040      	lsls	r0, r0, #1
     3b0:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE0, 0x55);
     3b2:	2155      	movs	r1, #85	; 0x55
     3b4:	2006      	movs	r0, #6
     3b6:	30ff      	adds	r0, #255	; 0xff
     3b8:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET2, 0x00);
     3ba:	2100      	movs	r1, #0
     3bc:	2083      	movs	r0, #131	; 0x83
     3be:	0040      	lsls	r0, r0, #1
     3c0:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET1, 0x00);
     3c2:	2100      	movs	r1, #0
     3c4:	2008      	movs	r0, #8
     3c6:	30ff      	adds	r0, #255	; 0xff
     3c8:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET0, 0x00);
     3ca:	2100      	movs	r1, #0
     3cc:	2084      	movs	r0, #132	; 0x84
     3ce:	0040      	lsls	r0, r0, #1
     3d0:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET2, 0x80);
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	200a      	movs	r0, #10
     3d6:	30ff      	adds	r0, #255	; 0xff
     3d8:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET1, 0x29);
     3da:	2129      	movs	r1, #41	; 0x29
     3dc:	2085      	movs	r0, #133	; 0x85
     3de:	0040      	lsls	r0, r0, #1
     3e0:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET0, 0x89);
     3e2:	2189      	movs	r1, #137	; 0x89
     3e4:	200c      	movs	r0, #12
     3e6:	30ff      	adds	r0, #255	; 0xff
     3e8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMAX1, 0x22);
     3ea:	2122      	movs	r1, #34	; 0x22
     3ec:	2086      	movs	r0, #134	; 0x86
     3ee:	0040      	lsls	r0, r0, #1
     3f0:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMAX0, 0xC0);
     3f2:	21c0      	movs	r1, #192	; 0xc0
     3f4:	200e      	movs	r0, #14
     3f6:	30ff      	adds	r0, #255	; 0xff
     3f8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMIN1, 0xDD);
     3fa:	21dd      	movs	r1, #221	; 0xdd
     3fc:	2087      	movs	r0, #135	; 0x87
     3fe:	0040      	lsls	r0, r0, #1
     400:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMIN0, 0x40);
     402:	2140      	movs	r1, #64	; 0x40
     404:	2010      	movs	r0, #16
     406:	30ff      	adds	r0, #255	; 0xff
     408:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLFILTER, 0x00);
     40a:	2100      	movs	r1, #0
     40c:	2016      	movs	r0, #22
     40e:	30ff      	adds	r0, #255	; 0xff
     410:	47a0      	blx	r4
    spi40_wr8(AX5043_RXPARAMSETS, 0xF4);
     412:	21f4      	movs	r1, #244	; 0xf4
     414:	2018      	movs	r0, #24
     416:	30ff      	adds	r0, #255	; 0xff
     418:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN0, 0xE8);
     41a:	21e8      	movs	r1, #232	; 0xe8
     41c:	2090      	movs	r0, #144	; 0x90
     41e:	0040      	lsls	r0, r0, #1
     420:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET0, 0x8F); //org val: 0x84
     422:	218f      	movs	r1, #143	; 0x8f
     424:	2022      	movs	r0, #34	; 0x22
     426:	30ff      	adds	r0, #255	; 0xff
     428:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST0, 0x00); 
     42a:	2100      	movs	r1, #0
     42c:	2091      	movs	r0, #145	; 0x91
     42e:	0040      	lsls	r0, r0, #1
     430:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN0, 0xAD);
     432:	21ad      	movs	r1, #173	; 0xad
     434:	2092      	movs	r0, #146	; 0x92
     436:	0040      	lsls	r0, r0, #1
     438:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN0, 0xA7);
     43a:	21a7      	movs	r1, #167	; 0xa7
     43c:	2026      	movs	r0, #38	; 0x26
     43e:	30ff      	adds	r0, #255	; 0xff
     440:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN0, 0xC3);
     442:	21c3      	movs	r1, #195	; 0xc3
     444:	2093      	movs	r0, #147	; 0x93
     446:	0040      	lsls	r0, r0, #1
     448:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA0, 0x0F);
     44a:	210f      	movs	r1, #15
     44c:	2028      	movs	r0, #40	; 0x28
     44e:	30ff      	adds	r0, #255	; 0xff
     450:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB0, 0x1F);
     452:	211f      	movs	r1, #31
     454:	2094      	movs	r0, #148	; 0x94
     456:	0040      	lsls	r0, r0, #1
     458:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC0, 0x0A);
     45a:	210a      	movs	r1, #10
     45c:	202a      	movs	r0, #42	; 0x2a
     45e:	30ff      	adds	r0, #255	; 0xff
     460:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND0, 0x0A);
     462:	210a      	movs	r1, #10
     464:	2095      	movs	r0, #149	; 0x95
     466:	0040      	lsls	r0, r0, #1
     468:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN0, 0x01); //org val: 0x06
     46a:	2101      	movs	r1, #1
     46c:	202c      	movs	r0, #44	; 0x2c
     46e:	30ff      	adds	r0, #255	; 0xff
     470:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV10, 0x00);
     472:	2100      	movs	r1, #0
     474:	2096      	movs	r0, #150	; 0x96
     476:	0040      	lsls	r0, r0, #1
     478:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV00, 0x00);
     47a:	2100      	movs	r1, #0
     47c:	202e      	movs	r0, #46	; 0x2e
     47e:	30ff      	adds	r0, #255	; 0xff
     480:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK0, 0x16); //org value: 0x16
     482:	2116      	movs	r1, #22
     484:	2097      	movs	r0, #151	; 0x97
     486:	0040      	lsls	r0, r0, #1
     488:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES0, 0x00);
     48a:	2100      	movs	r1, #0
     48c:	2030      	movs	r0, #48	; 0x30
     48e:	30ff      	adds	r0, #255	; 0xff
     490:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN1, 0xE8);
     492:	21e8      	movs	r1, #232	; 0xe8
     494:	2098      	movs	r0, #152	; 0x98
     496:	0040      	lsls	r0, r0, #1
     498:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET1, 0x8F); //org val: 0x84
     49a:	218f      	movs	r1, #143	; 0x8f
     49c:	2032      	movs	r0, #50	; 0x32
     49e:	30ff      	adds	r0, #255	; 0xff
     4a0:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST1, 0x00); 
     4a2:	2100      	movs	r1, #0
     4a4:	2099      	movs	r0, #153	; 0x99
     4a6:	0040      	lsls	r0, r0, #1
     4a8:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX1, 0x00);
     4aa:	2100      	movs	r1, #0
     4ac:	2034      	movs	r0, #52	; 0x34
     4ae:	30ff      	adds	r0, #255	; 0xff
     4b0:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN1, 0xAB);
     4b2:	21ab      	movs	r1, #171	; 0xab
     4b4:	209a      	movs	r0, #154	; 0x9a
     4b6:	0040      	lsls	r0, r0, #1
     4b8:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN1, 0xA6);
     4ba:	21a6      	movs	r1, #166	; 0xa6
     4bc:	2036      	movs	r0, #54	; 0x36
     4be:	30ff      	adds	r0, #255	; 0xff
     4c0:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN1, 0xC3);
     4c2:	21c3      	movs	r1, #195	; 0xc3
     4c4:	209b      	movs	r0, #155	; 0x9b
     4c6:	0040      	lsls	r0, r0, #1
     4c8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA1, 0x0F);
     4ca:	210f      	movs	r1, #15
     4cc:	2038      	movs	r0, #56	; 0x38
     4ce:	30ff      	adds	r0, #255	; 0xff
     4d0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB1, 0x1F);
     4d2:	211f      	movs	r1, #31
     4d4:	209c      	movs	r0, #156	; 0x9c
     4d6:	0040      	lsls	r0, r0, #1
     4d8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC1, 0x0A);
     4da:	210a      	movs	r1, #10
     4dc:	203a      	movs	r0, #58	; 0x3a
     4de:	30ff      	adds	r0, #255	; 0xff
     4e0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND1, 0x0A);
     4e2:	210a      	movs	r1, #10
     4e4:	209d      	movs	r0, #157	; 0x9d
     4e6:	0040      	lsls	r0, r0, #1
     4e8:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN1, 0x01); //org val: 0x06
     4ea:	2101      	movs	r1, #1
     4ec:	203c      	movs	r0, #60	; 0x3c
     4ee:	30ff      	adds	r0, #255	; 0xff
     4f0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV11, 0x00);
     4f2:	2100      	movs	r1, #0
     4f4:	209e      	movs	r0, #158	; 0x9e
     4f6:	0040      	lsls	r0, r0, #1
     4f8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV01, 0x4B);
     4fa:	214b      	movs	r1, #75	; 0x4b
     4fc:	203e      	movs	r0, #62	; 0x3e
     4fe:	30ff      	adds	r0, #255	; 0xff
     500:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK1, 0x16); //org value: 0x16
     502:	2116      	movs	r1, #22
     504:	209f      	movs	r0, #159	; 0x9f
     506:	0040      	lsls	r0, r0, #1
     508:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES1, 0x00);
     50a:	2100      	movs	r1, #0
     50c:	2040      	movs	r0, #64	; 0x40
     50e:	30ff      	adds	r0, #255	; 0xff
     510:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN3, 0xFF);
     512:	21ff      	movs	r1, #255	; 0xff
     514:	20a8      	movs	r0, #168	; 0xa8
     516:	0040      	lsls	r0, r0, #1
     518:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET3, 0x8F); //org val: 0x84
     51a:	218f      	movs	r1, #143	; 0x8f
     51c:	2052      	movs	r0, #82	; 0x52
     51e:	30ff      	adds	r0, #255	; 0xff
     520:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST3, 0x00); 
     522:	2100      	movs	r1, #0
     524:	20a9      	movs	r0, #169	; 0xa9
     526:	0040      	lsls	r0, r0, #1
     528:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX3, 0x00);
     52a:	2100      	movs	r1, #0
     52c:	2054      	movs	r0, #84	; 0x54
     52e:	30ff      	adds	r0, #255	; 0xff
     530:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN3, 0xAA);
     532:	21aa      	movs	r1, #170	; 0xaa
     534:	20aa      	movs	r0, #170	; 0xaa
     536:	0040      	lsls	r0, r0, #1
     538:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN3, 0xA5);
     53a:	21a5      	movs	r1, #165	; 0xa5
     53c:	2056      	movs	r0, #86	; 0x56
     53e:	30ff      	adds	r0, #255	; 0xff
     540:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN3, 0xC3);
     542:	21c3      	movs	r1, #195	; 0xc3
     544:	20ab      	movs	r0, #171	; 0xab
     546:	0040      	lsls	r0, r0, #1
     548:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA3, 0x0F);
     54a:	210f      	movs	r1, #15
     54c:	2058      	movs	r0, #88	; 0x58
     54e:	30ff      	adds	r0, #255	; 0xff
     550:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB3, 0x1F);
     552:	211f      	movs	r1, #31
     554:	20ac      	movs	r0, #172	; 0xac
     556:	0040      	lsls	r0, r0, #1
     558:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC3, 0x0D);
     55a:	210d      	movs	r1, #13
     55c:	205a      	movs	r0, #90	; 0x5a
     55e:	30ff      	adds	r0, #255	; 0xff
     560:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND3, 0x0D);
     562:	210d      	movs	r1, #13
     564:	20ad      	movs	r0, #173	; 0xad
     566:	0040      	lsls	r0, r0, #1
     568:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN3, 0x01); //org val: 0x06
     56a:	2101      	movs	r1, #1
     56c:	205c      	movs	r0, #92	; 0x5c
     56e:	30ff      	adds	r0, #255	; 0xff
     570:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV13, 0x00);
     572:	2100      	movs	r1, #0
     574:	20ae      	movs	r0, #174	; 0xae
     576:	0040      	lsls	r0, r0, #1
     578:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV03, 0x4B);
     57a:	214b      	movs	r1, #75	; 0x4b
     57c:	205e      	movs	r0, #94	; 0x5e
     57e:	30ff      	adds	r0, #255	; 0xff
     580:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK3, 0x16); //org value: 0x16
     582:	2116      	movs	r1, #22
     584:	20af      	movs	r0, #175	; 0xaf
     586:	0040      	lsls	r0, r0, #1
     588:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES3, 0x00);
     58a:	2100      	movs	r1, #0
     58c:	2060      	movs	r0, #96	; 0x60
     58e:	30ff      	adds	r0, #255	; 0xff
     590:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGF, 0x00);
     592:	2100      	movs	r1, #0
     594:	20b0      	movs	r0, #176	; 0xb0
     596:	0040      	lsls	r0, r0, #1
     598:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV2, 0x00);
     59a:	2100      	movs	r1, #0
     59c:	2062      	movs	r0, #98	; 0x62
     59e:	30ff      	adds	r0, #255	; 0xff
     5a0:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV1, 0x02);
     5a2:	2102      	movs	r1, #2
     5a4:	20b1      	movs	r0, #177	; 0xb1
     5a6:	0040      	lsls	r0, r0, #1
     5a8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV0, 0x0C);
     5aa:	210c      	movs	r1, #12
     5ac:	2064      	movs	r0, #100	; 0x64
     5ae:	30ff      	adds	r0, #255	; 0xff
     5b0:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGA, 0x05);
     5b2:	2105      	movs	r1, #5
     5b4:	20b2      	movs	r0, #178	; 0xb2
     5b6:	0040      	lsls	r0, r0, #1
     5b8:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE2, 0x00);
     5ba:	2100      	movs	r1, #0
     5bc:	2066      	movs	r0, #102	; 0x66
     5be:	30ff      	adds	r0, #255	; 0xff
     5c0:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE1, 0x04);
     5c2:	2104      	movs	r1, #4
     5c4:	20b3      	movs	r0, #179	; 0xb3
     5c6:	0040      	lsls	r0, r0, #1
     5c8:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE0, 0xEA);
     5ca:	21ea      	movs	r1, #234	; 0xea
     5cc:	2068      	movs	r0, #104	; 0x68
     5ce:	30ff      	adds	r0, #255	; 0xff
     5d0:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB1, 0x02);
     5d2:	2102      	movs	r1, #2
     5d4:	20b5      	movs	r0, #181	; 0xb5
     5d6:	0040      	lsls	r0, r0, #1
     5d8:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB0, 0x07);
     5da:	2107      	movs	r1, #7
     5dc:	206c      	movs	r0, #108	; 0x6c
     5de:	30ff      	adds	r0, #255	; 0xff
     5e0:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCOI, 0x8A);
     5e2:	218a      	movs	r1, #138	; 0x8a
     5e4:	20c0      	movs	r0, #192	; 0xc0
     5e6:	0040      	lsls	r0, r0, #1
     5e8:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLRNGCLK, 0x03);
     5ea:	2103      	movs	r1, #3
     5ec:	2084      	movs	r0, #132	; 0x84
     5ee:	30ff      	adds	r0, #255	; 0xff
     5f0:	47a0      	blx	r4
    spi40_wr8(AX5043_BBTUNE, 0x0F);
     5f2:	210f      	movs	r1, #15
     5f4:	20c4      	movs	r0, #196	; 0xc4
     5f6:	0040      	lsls	r0, r0, #1
     5f8:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSCAP, 0x77);
     5fa:	2177      	movs	r1, #119	; 0x77
     5fc:	208a      	movs	r0, #138	; 0x8a
     5fe:	30ff      	adds	r0, #255	; 0xff
     600:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTADDRCFG, 0x80);
     602:	2180      	movs	r1, #128	; 0x80
     604:	2080      	movs	r0, #128	; 0x80
     606:	0080      	lsls	r0, r0, #2
     608:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENCFG, 0x00);
     60a:	2100      	movs	r1, #0
     60c:	484f      	ldr	r0, [pc, #316]	; (74c <spi40_rx_init+0x408>)
     60e:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENOFFSET, 0x04);
     610:	2104      	movs	r1, #4
     612:	484f      	ldr	r0, [pc, #316]	; (750 <spi40_rx_init+0x40c>)
     614:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTMAXLEN, 0xC8);
     616:	21c8      	movs	r1, #200	; 0xc8
     618:	484e      	ldr	r0, [pc, #312]	; (754 <spi40_rx_init+0x410>)
     61a:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT3, 0xAA);
     61c:	21aa      	movs	r1, #170	; 0xaa
     61e:	2084      	movs	r0, #132	; 0x84
     620:	0080      	lsls	r0, r0, #2
     622:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT2, 0xCC);
     624:	21cc      	movs	r1, #204	; 0xcc
     626:	484c      	ldr	r0, [pc, #304]	; (758 <spi40_rx_init+0x414>)
     628:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT1, 0xAA);
     62a:	21aa      	movs	r1, #170	; 0xaa
     62c:	484b      	ldr	r0, [pc, #300]	; (75c <spi40_rx_init+0x418>)
     62e:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT0, 0xCC);
     630:	21cc      	movs	r1, #204	; 0xcc
     632:	484b      	ldr	r0, [pc, #300]	; (760 <spi40_rx_init+0x41c>)
     634:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0LEN, 0x9F);
     636:	219f      	movs	r1, #159	; 0x9f
     638:	2085      	movs	r0, #133	; 0x85
     63a:	0080      	lsls	r0, r0, #2
     63c:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0MAX, 0x1F);
     63e:	211f      	movs	r1, #31
     640:	4848      	ldr	r0, [pc, #288]	; (764 <spi40_rx_init+0x420>)
     642:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT1, 0x55);
     644:	2155      	movs	r1, #85	; 0x55
     646:	2086      	movs	r0, #134	; 0x86
     648:	0080      	lsls	r0, r0, #2
     64a:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT0, 0x55);
     64c:	2155      	movs	r1, #85	; 0x55
     64e:	4846      	ldr	r0, [pc, #280]	; (768 <spi40_rx_init+0x424>)
     650:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1LEN, 0x8A);
     652:	218a      	movs	r1, #138	; 0x8a
     654:	2087      	movs	r0, #135	; 0x87
     656:	0080      	lsls	r0, r0, #2
     658:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1MAX, 0x0A);
     65a:	210a      	movs	r1, #10
     65c:	4843      	ldr	r0, [pc, #268]	; (76c <spi40_rx_init+0x428>)
     65e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXBOOST, 0x32);
     660:	2132      	movs	r1, #50	; 0x32
     662:	2088      	movs	r0, #136	; 0x88
     664:	0080      	lsls	r0, r0, #2
     666:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXSETTLE, 0x14);
     668:	2114      	movs	r1, #20
     66a:	4841      	ldr	r0, [pc, #260]	; (770 <spi40_rx_init+0x42c>)
     66c:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXBOOST, 0x32);
     66e:	2132      	movs	r1, #50	; 0x32
     670:	4840      	ldr	r0, [pc, #256]	; (774 <spi40_rx_init+0x430>)
     672:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXSETTLE, 0x14);
     674:	2114      	movs	r1, #20
     676:	2089      	movs	r0, #137	; 0x89
     678:	0080      	lsls	r0, r0, #2
     67a:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXOFFSACQ, 0x00);
     67c:	2100      	movs	r1, #0
     67e:	483e      	ldr	r0, [pc, #248]	; (778 <spi40_rx_init+0x434>)
     680:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXCOARSEAGC, 0x73);
     682:	2173      	movs	r1, #115	; 0x73
     684:	483d      	ldr	r0, [pc, #244]	; (77c <spi40_rx_init+0x438>)
     686:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXRSSI, 0x03);
     688:	2103      	movs	r1, #3
     68a:	208a      	movs	r0, #138	; 0x8a
     68c:	0080      	lsls	r0, r0, #2
     68e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXPREAMBLE2, 0x35);
     690:	2135      	movs	r1, #53	; 0x35
     692:	483b      	ldr	r0, [pc, #236]	; (780 <spi40_rx_init+0x43c>)
     694:	47a0      	blx	r4
    spi40_wr8(AX5043_RSSIABSTHR, 0x84); //org val: 0xE6
     696:	2184      	movs	r1, #132	; 0x84
     698:	483a      	ldr	r0, [pc, #232]	; (784 <spi40_rx_init+0x440>)
     69a:	47a0      	blx	r4
    spi40_wr8(AX5043_BGNDRSSITHR, 0x84);
     69c:	2184      	movs	r1, #132	; 0x84
     69e:	483a      	ldr	r0, [pc, #232]	; (788 <spi40_rx_init+0x444>)
     6a0:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTCHUNKSIZE, 0x0D);
     6a2:	210d      	movs	r1, #13
     6a4:	208c      	movs	r0, #140	; 0x8c
     6a6:	0080      	lsls	r0, r0, #2
     6a8:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTACCEPTFLAGS, 0x20);
     6aa:	2120      	movs	r1, #32
     6ac:	4837      	ldr	r0, [pc, #220]	; (78c <spi40_rx_init+0x448>)
     6ae:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE1, 0x00);
     6b0:	2100      	movs	r1, #0
     6b2:	20cc      	movs	r0, #204	; 0xcc
     6b4:	0080      	lsls	r0, r0, #2
     6b6:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE0, 0x00);
     6b8:	2100      	movs	r1, #0
     6ba:	4835      	ldr	r0, [pc, #212]	; (790 <spi40_rx_init+0x44c>)
     6bc:	47a0      	blx	r4
    spi40_wr8(AX5043_DACCONFIG, 0x00);
     6be:	2100      	movs	r1, #0
     6c0:	4834      	ldr	r0, [pc, #208]	; (794 <spi40_rx_init+0x450>)
     6c2:	47a0      	blx	r4
    spi40_wr8(AX5043_REF, 0x03);
     6c4:	2103      	movs	r1, #3
     6c6:	4834      	ldr	r0, [pc, #208]	; (798 <spi40_rx_init+0x454>)
     6c8:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALOSC, 0x03);
     6ca:	2103      	movs	r1, #3
     6cc:	20f1      	movs	r0, #241	; 0xf1
     6ce:	0100      	lsls	r0, r0, #4
     6d0:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALAMPL, 0x07);
     6d2:	2107      	movs	r1, #7
     6d4:	4831      	ldr	r0, [pc, #196]	; (79c <spi40_rx_init+0x458>)
     6d6:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF1C, 0x07);
     6d8:	2107      	movs	r1, #7
     6da:	4831      	ldr	r0, [pc, #196]	; (7a0 <spi40_rx_init+0x45c>)
     6dc:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF21, 0x68);
     6de:	2168      	movs	r1, #104	; 0x68
     6e0:	4830      	ldr	r0, [pc, #192]	; (7a4 <spi40_rx_init+0x460>)
     6e2:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF22, 0xFF);
     6e4:	21ff      	movs	r1, #255	; 0xff
     6e6:	4830      	ldr	r0, [pc, #192]	; (7a8 <spi40_rx_init+0x464>)
     6e8:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF23, 0x84);
     6ea:	2184      	movs	r1, #132	; 0x84
     6ec:	482f      	ldr	r0, [pc, #188]	; (7ac <spi40_rx_init+0x468>)
     6ee:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF26, 0x98);
     6f0:	2198      	movs	r1, #152	; 0x98
     6f2:	482f      	ldr	r0, [pc, #188]	; (7b0 <spi40_rx_init+0x46c>)
     6f4:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF34, 0x08);
     6f6:	2108      	movs	r1, #8
     6f8:	482e      	ldr	r0, [pc, #184]	; (7b4 <spi40_rx_init+0x470>)
     6fa:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF35, 0x10);
     6fc:	2110      	movs	r1, #16
     6fe:	482e      	ldr	r0, [pc, #184]	; (7b8 <spi40_rx_init+0x474>)
     700:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF44, 0x25);
     702:	2125      	movs	r1, #37	; 0x25
     704:	482d      	ldr	r0, [pc, #180]	; (7bc <spi40_rx_init+0x478>)
     706:	47a0      	blx	r4
    
    spi40_wr8(AX5043_PLLLOOP, 0x0A);
     708:	210a      	movs	r1, #10
     70a:	2030      	movs	r0, #48	; 0x30
     70c:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLCPI, 0x10);
     70e:	2110      	movs	r1, #16
     710:	2031      	movs	r0, #49	; 0x31
     712:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCODIV, 0x30); //org val = 0x30
     714:	2130      	movs	r1, #48	; 0x30
     716:	2032      	movs	r0, #50	; 0x32
     718:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALCAP, 0x13);
     71a:	2113      	movs	r1, #19
     71c:	20c2      	movs	r0, #194	; 0xc2
     71e:	0040      	lsls	r0, r0, #1
     720:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF00, 0x0F);
     722:	210f      	movs	r1, #15
     724:	20f0      	movs	r0, #240	; 0xf0
     726:	0100      	lsls	r0, r0, #4
     728:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF18, 0x06);
     72a:	2106      	movs	r1, #6
     72c:	4824      	ldr	r0, [pc, #144]	; (7c0 <spi40_rx_init+0x47c>)
     72e:	47a0      	blx	r4
    
    //set frqeuency
    spi40_wr8(AX5043_FREQA0, 0x01);
     730:	2101      	movs	r1, #1
     732:	2037      	movs	r0, #55	; 0x37
     734:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA1, 0x00);
     736:	2100      	movs	r1, #0
     738:	2036      	movs	r0, #54	; 0x36
     73a:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA2, 0x90);
     73c:	2190      	movs	r1, #144	; 0x90
     73e:	2035      	movs	r0, #53	; 0x35
     740:	47a0      	blx	r4
     742:	e03f      	b.n	7c4 <spi40_rx_init+0x480>
     744:	000002f5 	.word	0x000002f5
     748:	000008b5 	.word	0x000008b5
     74c:	00000201 	.word	0x00000201
     750:	00000202 	.word	0x00000202
     754:	00000203 	.word	0x00000203
     758:	00000211 	.word	0x00000211
     75c:	00000212 	.word	0x00000212
     760:	00000213 	.word	0x00000213
     764:	00000216 	.word	0x00000216
     768:	00000219 	.word	0x00000219
     76c:	0000021e 	.word	0x0000021e
     770:	00000221 	.word	0x00000221
     774:	00000223 	.word	0x00000223
     778:	00000225 	.word	0x00000225
     77c:	00000226 	.word	0x00000226
     780:	0000022a 	.word	0x0000022a
     784:	0000022d 	.word	0x0000022d
     788:	0000022f 	.word	0x0000022f
     78c:	00000233 	.word	0x00000233
     790:	00000331 	.word	0x00000331
     794:	00000332 	.word	0x00000332
     798:	00000f0d 	.word	0x00000f0d
     79c:	00000f11 	.word	0x00000f11
     7a0:	00000f1c 	.word	0x00000f1c
     7a4:	00000f21 	.word	0x00000f21
     7a8:	00000f22 	.word	0x00000f22
     7ac:	00000f23 	.word	0x00000f23
     7b0:	00000f26 	.word	0x00000f26
     7b4:	00000f34 	.word	0x00000f34
     7b8:	00000f35 	.word	0x00000f35
     7bc:	00000f44 	.word	0x00000f44
     7c0:	00000f18 	.word	0x00000f18
    spi40_wr8(AX5043_FREQA3, 0x0A);
     7c4:	210a      	movs	r1, #10
     7c6:	2034      	movs	r0, #52	; 0x34
     7c8:	47a0      	blx	r4
    
    // Settings unique to receiver:
    spi40_wr8(AX5043_TMGRXAGC, 0x00);
     7ca:	2100      	movs	r1, #0
     7cc:	480f      	ldr	r0, [pc, #60]	; (80c <spi40_rx_init+0x4c8>)
     7ce:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXPREAMBLE1, 0x00);
     7d0:	2100      	movs	r1, #0
     7d2:	480f      	ldr	r0, [pc, #60]	; (810 <spi40_rx_init+0x4cc>)
     7d4:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTMISCFLAGS, 0x00 | (1 << 2)); //org value = 0x00
     7d6:	2104      	movs	r1, #4
     7d8:	480e      	ldr	r0, [pc, #56]	; (814 <spi40_rx_init+0x4d0>)
     7da:	47a0      	blx	r4
    
    
    // wait for crystal to settle
    while((spi40_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
     7dc:	201d      	movs	r0, #29
     7de:	4b0e      	ldr	r3, [pc, #56]	; (818 <spi40_rx_init+0x4d4>)
     7e0:	4798      	blx	r3
     7e2:	07c3      	lsls	r3, r0, #31
     7e4:	d5fa      	bpl.n	7dc <spi40_rx_init+0x498>
    
    // autorange the PLL
    spi40_autorange();
     7e6:	4b0d      	ldr	r3, [pc, #52]	; (81c <spi40_rx_init+0x4d8>)
     7e8:	4798      	blx	r3
    
    // accept no invalid packets
    spi40_wr8(AX5043_PKTACCEPTFLAGS, 0x00);
     7ea:	2100      	movs	r1, #0
     7ec:	480c      	ldr	r0, [pc, #48]	; (820 <spi40_rx_init+0x4dc>)
     7ee:	4c0d      	ldr	r4, [pc, #52]	; (824 <spi40_rx_init+0x4e0>)
     7f0:	47a0      	blx	r4
    
    // append RSSI reading to end of packet
    spi40_wr8(AX5043_PKTSTOREFLAGS, 0x10);
     7f2:	2110      	movs	r1, #16
     7f4:	480c      	ldr	r0, [pc, #48]	; (828 <spi40_rx_init+0x4e4>)
     7f6:	47a0      	blx	r4
    
    // set power mode to full receive, i.e. always receive
    spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_FULLRX);
     7f8:	2169      	movs	r1, #105	; 0x69
     7fa:	2002      	movs	r0, #2
     7fc:	47a0      	blx	r4
    delay_ms(100);
     7fe:	2064      	movs	r0, #100	; 0x64
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <spi40_rx_init+0x4e8>)
     802:	4798      	blx	r3
    
    // clear FIFO
    spi40_wr8(AX5043_FIFOSTAT, FIFOCMD_CLRFIFO);
     804:	2103      	movs	r1, #3
     806:	2028      	movs	r0, #40	; 0x28
     808:	47a0      	blx	r4
}
     80a:	bd10      	pop	{r4, pc}
     80c:	00000227 	.word	0x00000227
     810:	00000229 	.word	0x00000229
     814:	00000231 	.word	0x00000231
     818:	000002ad 	.word	0x000002ad
     81c:	00000325 	.word	0x00000325
     820:	00000233 	.word	0x00000233
     824:	000002f5 	.word	0x000002f5
     828:	00000232 	.word	0x00000232
     82c:	000008b5 	.word	0x000008b5

00000830 <spi40_rssi>:
 * Return Values(s) : int16_t
 * Description      : Gets the RSSI value from the AX5043 and performs
 *  a rolling average on it. Returns the averaged RSSI as a 2 byte int.
 */
uint16_t spi40_rssi(void)
{
     830:	b510      	push	{r4, lr}
    /* read the RSSI register, put it in the rolling average, and
     * return the new average */
	
	// 9/22/20 edit for testing. removed roll avg. 
 //   return ((uint16_t) ((int8_t) spi40_rollavg(spi40_rd8(AX5043_RSSI))));
	return spi40_rd8(AX5043_RSSI);
     832:	2040      	movs	r0, #64	; 0x40
     834:	4b01      	ldr	r3, [pc, #4]	; (83c <spi40_rssi+0xc>)
     836:	4798      	blx	r3
 
 
}
     838:	bd10      	pop	{r4, pc}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	000002ad 	.word	0x000002ad

00000840 <usart_fiber_write>:
/** 
 * Asynchronous buffer write to transmit single shield measurement
 * Simply calls "usart_write_buffer_job" with specific parameters
 */
void usart_fiber_write(struct measurement temp)
{
     840:	b510      	push	{r4, lr}
     842:	b084      	sub	sp, #16
     844:	9001      	str	r0, [sp, #4]
	
	struct fiber_packet pckt;
	pckt.data = temp;
     846:	ac02      	add	r4, sp, #8
     848:	2204      	movs	r2, #4
     84a:	a901      	add	r1, sp, #4
     84c:	2009      	movs	r0, #9
     84e:	4468      	add	r0, sp
     850:	4b06      	ldr	r3, [pc, #24]	; (86c <usart_fiber_write+0x2c>)
     852:	4798      	blx	r3
	pckt.head = '$';
     854:	2324      	movs	r3, #36	; 0x24
     856:	7023      	strb	r3, [r4, #0]
	pckt.tail = '%';
     858:	3301      	adds	r3, #1
     85a:	7163      	strb	r3, [r4, #5]
	usart_write_buffer_wait(&uartfiber_inst, (uint8_t*) &pckt, sizeof(pckt));
     85c:	2206      	movs	r2, #6
     85e:	0021      	movs	r1, r4
     860:	4803      	ldr	r0, [pc, #12]	; (870 <usart_fiber_write+0x30>)
     862:	4b04      	ldr	r3, [pc, #16]	; (874 <usart_fiber_write+0x34>)
     864:	4798      	blx	r3
};
     866:	b004      	add	sp, #16
     868:	bd10      	pop	{r4, pc}
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	00002215 	.word	0x00002215
     870:	2000002c 	.word	0x2000002c
     874:	00000b59 	.word	0x00000b59

00000878 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     878:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     87a:	2000      	movs	r0, #0
     87c:	4b08      	ldr	r3, [pc, #32]	; (8a0 <delay_init+0x28>)
     87e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     880:	4c08      	ldr	r4, [pc, #32]	; (8a4 <delay_init+0x2c>)
     882:	21fa      	movs	r1, #250	; 0xfa
     884:	0089      	lsls	r1, r1, #2
     886:	47a0      	blx	r4
     888:	4b07      	ldr	r3, [pc, #28]	; (8a8 <delay_init+0x30>)
     88a:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     88c:	21fa      	movs	r1, #250	; 0xfa
     88e:	0089      	lsls	r1, r1, #2
     890:	47a0      	blx	r4
     892:	4b06      	ldr	r3, [pc, #24]	; (8ac <delay_init+0x34>)
     894:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     896:	2205      	movs	r2, #5
     898:	4b05      	ldr	r3, [pc, #20]	; (8b0 <delay_init+0x38>)
     89a:	601a      	str	r2, [r3, #0]
}
     89c:	bd10      	pop	{r4, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00001ba1 	.word	0x00001ba1
     8a4:	000020b5 	.word	0x000020b5
     8a8:	20000000 	.word	0x20000000
     8ac:	20000004 	.word	0x20000004
     8b0:	e000e010 	.word	0xe000e010

000008b4 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     8b4:	e000      	b.n	8b8 <delay_cycles_ms+0x4>
{
     8b6:	0010      	movs	r0, r2
	while (n--) {
     8b8:	1e42      	subs	r2, r0, #1
     8ba:	2800      	cmp	r0, #0
     8bc:	d00c      	beq.n	8d8 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     8be:	4b07      	ldr	r3, [pc, #28]	; (8dc <delay_cycles_ms+0x28>)
     8c0:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     8c2:	2b00      	cmp	r3, #0
     8c4:	d0f7      	beq.n	8b6 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     8c6:	4906      	ldr	r1, [pc, #24]	; (8e0 <delay_cycles_ms+0x2c>)
     8c8:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     8ca:	2300      	movs	r3, #0
     8cc:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8ce:	4b04      	ldr	r3, [pc, #16]	; (8e0 <delay_cycles_ms+0x2c>)
     8d0:	681b      	ldr	r3, [r3, #0]
     8d2:	03db      	lsls	r3, r3, #15
     8d4:	d5fb      	bpl.n	8ce <delay_cycles_ms+0x1a>
     8d6:	e7ee      	b.n	8b6 <delay_cycles_ms+0x2>
	}
}
     8d8:	4770      	bx	lr
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	20000000 	.word	0x20000000
     8e0:	e000e010 	.word	0xe000e010

000008e4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     8e4:	b500      	push	{lr}
     8e6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8e8:	ab01      	add	r3, sp, #4
     8ea:	2280      	movs	r2, #128	; 0x80
     8ec:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     8ee:	780a      	ldrb	r2, [r1, #0]
     8f0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     8f2:	784a      	ldrb	r2, [r1, #1]
     8f4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     8f6:	788a      	ldrb	r2, [r1, #2]
     8f8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     8fa:	0019      	movs	r1, r3
     8fc:	4b01      	ldr	r3, [pc, #4]	; (904 <port_pin_set_config+0x20>)
     8fe:	4798      	blx	r3
}
     900:	b003      	add	sp, #12
     902:	bd00      	pop	{pc}
     904:	00001db9 	.word	0x00001db9

00000908 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     908:	0849      	lsrs	r1, r1, #1
     90a:	4281      	cmp	r1, r0
     90c:	d201      	bcs.n	912 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     90e:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     910:	4770      	bx	lr
     912:	2300      	movs	r3, #0
     914:	e002      	b.n	91c <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     916:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     918:	3301      	adds	r3, #1
     91a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     91c:	4281      	cmp	r1, r0
     91e:	d2fa      	bcs.n	916 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     920:	3b01      	subs	r3, #1
     922:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     924:	2bff      	cmp	r3, #255	; 0xff
     926:	d901      	bls.n	92c <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     928:	2040      	movs	r0, #64	; 0x40
     92a:	e7f1      	b.n	910 <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     92c:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     92e:	2000      	movs	r0, #0
     930:	e7ee      	b.n	910 <_sercom_get_sync_baud_val+0x8>
	...

00000934 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     934:	b510      	push	{r4, lr}
     936:	b082      	sub	sp, #8
     938:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     93a:	4b0e      	ldr	r3, [pc, #56]	; (974 <sercom_set_gclk_generator+0x40>)
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	2b00      	cmp	r3, #0
     940:	d007      	beq.n	952 <sercom_set_gclk_generator+0x1e>
     942:	2900      	cmp	r1, #0
     944:	d105      	bne.n	952 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     946:	4b0b      	ldr	r3, [pc, #44]	; (974 <sercom_set_gclk_generator+0x40>)
     948:	785b      	ldrb	r3, [r3, #1]
     94a:	4283      	cmp	r3, r0
     94c:	d010      	beq.n	970 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     94e:	201d      	movs	r0, #29
     950:	e00c      	b.n	96c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     952:	a901      	add	r1, sp, #4
     954:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     956:	2013      	movs	r0, #19
     958:	4b07      	ldr	r3, [pc, #28]	; (978 <sercom_set_gclk_generator+0x44>)
     95a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     95c:	2013      	movs	r0, #19
     95e:	4b07      	ldr	r3, [pc, #28]	; (97c <sercom_set_gclk_generator+0x48>)
     960:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     962:	4b04      	ldr	r3, [pc, #16]	; (974 <sercom_set_gclk_generator+0x40>)
     964:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     966:	2201      	movs	r2, #1
     968:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     96a:	2000      	movs	r0, #0
}
     96c:	b002      	add	sp, #8
     96e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     970:	2000      	movs	r0, #0
     972:	e7fb      	b.n	96c <sercom_set_gclk_generator+0x38>
     974:	20000060 	.word	0x20000060
     978:	00001cd5 	.word	0x00001cd5
     97c:	00001c4d 	.word	0x00001c4d

00000980 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     980:	4b40      	ldr	r3, [pc, #256]	; (a84 <_sercom_get_default_pad+0x104>)
     982:	4298      	cmp	r0, r3
     984:	d031      	beq.n	9ea <_sercom_get_default_pad+0x6a>
     986:	d90a      	bls.n	99e <_sercom_get_default_pad+0x1e>
     988:	4b3f      	ldr	r3, [pc, #252]	; (a88 <_sercom_get_default_pad+0x108>)
     98a:	4298      	cmp	r0, r3
     98c:	d04d      	beq.n	a2a <_sercom_get_default_pad+0xaa>
     98e:	4b3f      	ldr	r3, [pc, #252]	; (a8c <_sercom_get_default_pad+0x10c>)
     990:	4298      	cmp	r0, r3
     992:	d05a      	beq.n	a4a <_sercom_get_default_pad+0xca>
     994:	4b3e      	ldr	r3, [pc, #248]	; (a90 <_sercom_get_default_pad+0x110>)
     996:	4298      	cmp	r0, r3
     998:	d037      	beq.n	a0a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     99a:	2000      	movs	r0, #0
}
     99c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     99e:	4b3d      	ldr	r3, [pc, #244]	; (a94 <_sercom_get_default_pad+0x114>)
     9a0:	4298      	cmp	r0, r3
     9a2:	d00c      	beq.n	9be <_sercom_get_default_pad+0x3e>
     9a4:	4b3c      	ldr	r3, [pc, #240]	; (a98 <_sercom_get_default_pad+0x118>)
     9a6:	4298      	cmp	r0, r3
     9a8:	d1f7      	bne.n	99a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9aa:	2901      	cmp	r1, #1
     9ac:	d05f      	beq.n	a6e <_sercom_get_default_pad+0xee>
     9ae:	2900      	cmp	r1, #0
     9b0:	d015      	beq.n	9de <_sercom_get_default_pad+0x5e>
     9b2:	2902      	cmp	r1, #2
     9b4:	d015      	beq.n	9e2 <_sercom_get_default_pad+0x62>
     9b6:	2903      	cmp	r1, #3
     9b8:	d015      	beq.n	9e6 <_sercom_get_default_pad+0x66>
	return 0;
     9ba:	2000      	movs	r0, #0
     9bc:	e7ee      	b.n	99c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9be:	2901      	cmp	r1, #1
     9c0:	d053      	beq.n	a6a <_sercom_get_default_pad+0xea>
     9c2:	2900      	cmp	r1, #0
     9c4:	d005      	beq.n	9d2 <_sercom_get_default_pad+0x52>
     9c6:	2902      	cmp	r1, #2
     9c8:	d005      	beq.n	9d6 <_sercom_get_default_pad+0x56>
     9ca:	2903      	cmp	r1, #3
     9cc:	d005      	beq.n	9da <_sercom_get_default_pad+0x5a>
	return 0;
     9ce:	2000      	movs	r0, #0
     9d0:	e7e4      	b.n	99c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9d2:	4832      	ldr	r0, [pc, #200]	; (a9c <_sercom_get_default_pad+0x11c>)
     9d4:	e7e2      	b.n	99c <_sercom_get_default_pad+0x1c>
     9d6:	4832      	ldr	r0, [pc, #200]	; (aa0 <_sercom_get_default_pad+0x120>)
     9d8:	e7e0      	b.n	99c <_sercom_get_default_pad+0x1c>
     9da:	4832      	ldr	r0, [pc, #200]	; (aa4 <_sercom_get_default_pad+0x124>)
     9dc:	e7de      	b.n	99c <_sercom_get_default_pad+0x1c>
     9de:	2003      	movs	r0, #3
     9e0:	e7dc      	b.n	99c <_sercom_get_default_pad+0x1c>
     9e2:	4831      	ldr	r0, [pc, #196]	; (aa8 <_sercom_get_default_pad+0x128>)
     9e4:	e7da      	b.n	99c <_sercom_get_default_pad+0x1c>
     9e6:	4831      	ldr	r0, [pc, #196]	; (aac <_sercom_get_default_pad+0x12c>)
     9e8:	e7d8      	b.n	99c <_sercom_get_default_pad+0x1c>
     9ea:	2901      	cmp	r1, #1
     9ec:	d041      	beq.n	a72 <_sercom_get_default_pad+0xf2>
     9ee:	2900      	cmp	r1, #0
     9f0:	d005      	beq.n	9fe <_sercom_get_default_pad+0x7e>
     9f2:	2902      	cmp	r1, #2
     9f4:	d005      	beq.n	a02 <_sercom_get_default_pad+0x82>
     9f6:	2903      	cmp	r1, #3
     9f8:	d005      	beq.n	a06 <_sercom_get_default_pad+0x86>
	return 0;
     9fa:	2000      	movs	r0, #0
     9fc:	e7ce      	b.n	99c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9fe:	482c      	ldr	r0, [pc, #176]	; (ab0 <_sercom_get_default_pad+0x130>)
     a00:	e7cc      	b.n	99c <_sercom_get_default_pad+0x1c>
     a02:	482c      	ldr	r0, [pc, #176]	; (ab4 <_sercom_get_default_pad+0x134>)
     a04:	e7ca      	b.n	99c <_sercom_get_default_pad+0x1c>
     a06:	482c      	ldr	r0, [pc, #176]	; (ab8 <_sercom_get_default_pad+0x138>)
     a08:	e7c8      	b.n	99c <_sercom_get_default_pad+0x1c>
     a0a:	2901      	cmp	r1, #1
     a0c:	d033      	beq.n	a76 <_sercom_get_default_pad+0xf6>
     a0e:	2900      	cmp	r1, #0
     a10:	d005      	beq.n	a1e <_sercom_get_default_pad+0x9e>
     a12:	2902      	cmp	r1, #2
     a14:	d005      	beq.n	a22 <_sercom_get_default_pad+0xa2>
     a16:	2903      	cmp	r1, #3
     a18:	d005      	beq.n	a26 <_sercom_get_default_pad+0xa6>
	return 0;
     a1a:	2000      	movs	r0, #0
     a1c:	e7be      	b.n	99c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a1e:	4827      	ldr	r0, [pc, #156]	; (abc <_sercom_get_default_pad+0x13c>)
     a20:	e7bc      	b.n	99c <_sercom_get_default_pad+0x1c>
     a22:	4827      	ldr	r0, [pc, #156]	; (ac0 <_sercom_get_default_pad+0x140>)
     a24:	e7ba      	b.n	99c <_sercom_get_default_pad+0x1c>
     a26:	4827      	ldr	r0, [pc, #156]	; (ac4 <_sercom_get_default_pad+0x144>)
     a28:	e7b8      	b.n	99c <_sercom_get_default_pad+0x1c>
     a2a:	2901      	cmp	r1, #1
     a2c:	d025      	beq.n	a7a <_sercom_get_default_pad+0xfa>
     a2e:	2900      	cmp	r1, #0
     a30:	d005      	beq.n	a3e <_sercom_get_default_pad+0xbe>
     a32:	2902      	cmp	r1, #2
     a34:	d005      	beq.n	a42 <_sercom_get_default_pad+0xc2>
     a36:	2903      	cmp	r1, #3
     a38:	d005      	beq.n	a46 <_sercom_get_default_pad+0xc6>
	return 0;
     a3a:	2000      	movs	r0, #0
     a3c:	e7ae      	b.n	99c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a3e:	4822      	ldr	r0, [pc, #136]	; (ac8 <_sercom_get_default_pad+0x148>)
     a40:	e7ac      	b.n	99c <_sercom_get_default_pad+0x1c>
     a42:	4822      	ldr	r0, [pc, #136]	; (acc <_sercom_get_default_pad+0x14c>)
     a44:	e7aa      	b.n	99c <_sercom_get_default_pad+0x1c>
     a46:	4822      	ldr	r0, [pc, #136]	; (ad0 <_sercom_get_default_pad+0x150>)
     a48:	e7a8      	b.n	99c <_sercom_get_default_pad+0x1c>
     a4a:	2901      	cmp	r1, #1
     a4c:	d017      	beq.n	a7e <_sercom_get_default_pad+0xfe>
     a4e:	2900      	cmp	r1, #0
     a50:	d005      	beq.n	a5e <_sercom_get_default_pad+0xde>
     a52:	2902      	cmp	r1, #2
     a54:	d005      	beq.n	a62 <_sercom_get_default_pad+0xe2>
     a56:	2903      	cmp	r1, #3
     a58:	d005      	beq.n	a66 <_sercom_get_default_pad+0xe6>
	return 0;
     a5a:	2000      	movs	r0, #0
     a5c:	e79e      	b.n	99c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a5e:	481d      	ldr	r0, [pc, #116]	; (ad4 <_sercom_get_default_pad+0x154>)
     a60:	e79c      	b.n	99c <_sercom_get_default_pad+0x1c>
     a62:	481d      	ldr	r0, [pc, #116]	; (ad8 <_sercom_get_default_pad+0x158>)
     a64:	e79a      	b.n	99c <_sercom_get_default_pad+0x1c>
     a66:	481d      	ldr	r0, [pc, #116]	; (adc <_sercom_get_default_pad+0x15c>)
     a68:	e798      	b.n	99c <_sercom_get_default_pad+0x1c>
     a6a:	481d      	ldr	r0, [pc, #116]	; (ae0 <_sercom_get_default_pad+0x160>)
     a6c:	e796      	b.n	99c <_sercom_get_default_pad+0x1c>
     a6e:	481d      	ldr	r0, [pc, #116]	; (ae4 <_sercom_get_default_pad+0x164>)
     a70:	e794      	b.n	99c <_sercom_get_default_pad+0x1c>
     a72:	481d      	ldr	r0, [pc, #116]	; (ae8 <_sercom_get_default_pad+0x168>)
     a74:	e792      	b.n	99c <_sercom_get_default_pad+0x1c>
     a76:	481d      	ldr	r0, [pc, #116]	; (aec <_sercom_get_default_pad+0x16c>)
     a78:	e790      	b.n	99c <_sercom_get_default_pad+0x1c>
     a7a:	481d      	ldr	r0, [pc, #116]	; (af0 <_sercom_get_default_pad+0x170>)
     a7c:	e78e      	b.n	99c <_sercom_get_default_pad+0x1c>
     a7e:	481d      	ldr	r0, [pc, #116]	; (af4 <_sercom_get_default_pad+0x174>)
     a80:	e78c      	b.n	99c <_sercom_get_default_pad+0x1c>
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	42001000 	.word	0x42001000
     a88:	42001800 	.word	0x42001800
     a8c:	42001c00 	.word	0x42001c00
     a90:	42001400 	.word	0x42001400
     a94:	42000800 	.word	0x42000800
     a98:	42000c00 	.word	0x42000c00
     a9c:	00040003 	.word	0x00040003
     aa0:	00060003 	.word	0x00060003
     aa4:	00070003 	.word	0x00070003
     aa8:	001e0003 	.word	0x001e0003
     aac:	001f0003 	.word	0x001f0003
     ab0:	00080003 	.word	0x00080003
     ab4:	000a0003 	.word	0x000a0003
     ab8:	000b0003 	.word	0x000b0003
     abc:	00100003 	.word	0x00100003
     ac0:	00120003 	.word	0x00120003
     ac4:	00130003 	.word	0x00130003
     ac8:	000c0003 	.word	0x000c0003
     acc:	000e0003 	.word	0x000e0003
     ad0:	000f0003 	.word	0x000f0003
     ad4:	00160003 	.word	0x00160003
     ad8:	00180003 	.word	0x00180003
     adc:	00190003 	.word	0x00190003
     ae0:	00050003 	.word	0x00050003
     ae4:	00010003 	.word	0x00010003
     ae8:	00090003 	.word	0x00090003
     aec:	00110003 	.word	0x00110003
     af0:	000d0003 	.word	0x000d0003
     af4:	00170003 	.word	0x00170003

00000af8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     af8:	b530      	push	{r4, r5, lr}
     afa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     afc:	4c0a      	ldr	r4, [pc, #40]	; (b28 <_sercom_get_sercom_inst_index+0x30>)
     afe:	466b      	mov	r3, sp
     b00:	0022      	movs	r2, r4
     b02:	ca32      	ldmia	r2!, {r1, r4, r5}
     b04:	c332      	stmia	r3!, {r1, r4, r5}
     b06:	ca32      	ldmia	r2!, {r1, r4, r5}
     b08:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b0a:	2300      	movs	r3, #0
     b0c:	2b05      	cmp	r3, #5
     b0e:	d808      	bhi.n	b22 <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b10:	009a      	lsls	r2, r3, #2
     b12:	4669      	mov	r1, sp
     b14:	5852      	ldr	r2, [r2, r1]
     b16:	4282      	cmp	r2, r0
     b18:	d001      	beq.n	b1e <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b1a:	3301      	adds	r3, #1
     b1c:	e7f6      	b.n	b0c <_sercom_get_sercom_inst_index+0x14>
			return i;
     b1e:	b2d8      	uxtb	r0, r3
     b20:	e000      	b.n	b24 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     b22:	2000      	movs	r0, #0
}
     b24:	b007      	add	sp, #28
     b26:	bd30      	pop	{r4, r5, pc}
     b28:	00002238 	.word	0x00002238

00000b2c <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b2c:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b2e:	79c2      	ldrb	r2, [r0, #7]
     b30:	2a00      	cmp	r2, #0
     b32:	d101      	bne.n	b38 <usart_write_wait+0xc>
		return STATUS_ERR_DENIED;
     b34:	201c      	movs	r0, #28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     b36:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     b38:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     b3a:	b292      	uxth	r2, r2
     b3c:	2a00      	cmp	r2, #0
     b3e:	d001      	beq.n	b44 <usart_write_wait+0x18>
		return STATUS_BUSY;
     b40:	2005      	movs	r0, #5
     b42:	e7f8      	b.n	b36 <usart_write_wait+0xa>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b44:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b46:	2a00      	cmp	r2, #0
     b48:	d1fc      	bne.n	b44 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     b4a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b4c:	7e1a      	ldrb	r2, [r3, #24]
     b4e:	0792      	lsls	r2, r2, #30
     b50:	d5fc      	bpl.n	b4c <usart_write_wait+0x20>
	return STATUS_OK;
     b52:	2000      	movs	r0, #0
     b54:	e7ef      	b.n	b36 <usart_write_wait+0xa>
	...

00000b58 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     b58:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5a:	46c6      	mov	lr, r8
     b5c:	b500      	push	{lr}
     b5e:	0004      	movs	r4, r0
     b60:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     b62:	2a00      	cmp	r2, #0
     b64:	d103      	bne.n	b6e <usart_write_buffer_wait+0x16>
		return STATUS_ERR_INVALID_ARG;
     b66:	2017      	movs	r0, #23
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     b68:	bc04      	pop	{r2}
     b6a:	4690      	mov	r8, r2
     b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     b6e:	79c3      	ldrb	r3, [r0, #7]
     b70:	2b00      	cmp	r3, #0
     b72:	d101      	bne.n	b78 <usart_write_buffer_wait+0x20>
		return STATUS_ERR_DENIED;
     b74:	201c      	movs	r0, #28
     b76:	e7f7      	b.n	b68 <usart_write_buffer_wait+0x10>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b78:	6806      	ldr	r6, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     b7a:	69f3      	ldr	r3, [r6, #28]
	while (usart_is_syncing(module)) {
     b7c:	2b00      	cmp	r3, #0
     b7e:	d1fc      	bne.n	b7a <usart_write_buffer_wait+0x22>
     b80:	2000      	movs	r0, #0
     b82:	e00c      	b.n	b9e <usart_write_buffer_wait+0x46>
		uint16_t data_to_send = tx_data[tx_pos++];
     b84:	1c43      	adds	r3, r0, #1
     b86:	b29b      	uxth	r3, r3
     b88:	4698      	mov	r8, r3
     b8a:	5c2b      	ldrb	r3, [r5, r0]
     b8c:	b299      	uxth	r1, r3
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b8e:	7962      	ldrb	r2, [r4, #5]
     b90:	2a01      	cmp	r2, #1
     b92:	d014      	beq.n	bbe <usart_write_buffer_wait+0x66>
		usart_write_wait(module, data_to_send);
     b94:	0020      	movs	r0, r4
     b96:	4b18      	ldr	r3, [pc, #96]	; (bf8 <usart_write_buffer_wait+0xa0>)
     b98:	4798      	blx	r3
	while (length--) {
     b9a:	4640      	mov	r0, r8
     b9c:	003a      	movs	r2, r7
     b9e:	1e57      	subs	r7, r2, #1
     ba0:	b2bf      	uxth	r7, r7
     ba2:	2a00      	cmp	r2, #0
     ba4:	d013      	beq.n	bce <usart_write_buffer_wait+0x76>
     ba6:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     ba8:	4a14      	ldr	r2, [pc, #80]	; (bfc <usart_write_buffer_wait+0xa4>)
     baa:	4293      	cmp	r3, r2
     bac:	d8ea      	bhi.n	b84 <usart_write_buffer_wait+0x2c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     bae:	7e32      	ldrb	r2, [r6, #24]
     bb0:	07d2      	lsls	r2, r2, #31
     bb2:	d4e7      	bmi.n	b84 <usart_write_buffer_wait+0x2c>
			} else if (i == USART_TIMEOUT) {
     bb4:	4a11      	ldr	r2, [pc, #68]	; (bfc <usart_write_buffer_wait+0xa4>)
     bb6:	4293      	cmp	r3, r2
     bb8:	d019      	beq.n	bee <usart_write_buffer_wait+0x96>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     bba:	3301      	adds	r3, #1
     bbc:	e7f4      	b.n	ba8 <usart_write_buffer_wait+0x50>
			data_to_send |= (tx_data[tx_pos++] << 8);
     bbe:	3002      	adds	r0, #2
     bc0:	4642      	mov	r2, r8
     bc2:	5ca9      	ldrb	r1, [r5, r2]
     bc4:	0209      	lsls	r1, r1, #8
     bc6:	4319      	orrs	r1, r3
     bc8:	b283      	uxth	r3, r0
     bca:	4698      	mov	r8, r3
     bcc:	e7e2      	b.n	b94 <usart_write_buffer_wait+0x3c>
     bce:	2300      	movs	r3, #0
     bd0:	e000      	b.n	bd4 <usart_write_buffer_wait+0x7c>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     bd2:	3301      	adds	r3, #1
     bd4:	4a09      	ldr	r2, [pc, #36]	; (bfc <usart_write_buffer_wait+0xa4>)
     bd6:	4293      	cmp	r3, r2
     bd8:	d807      	bhi.n	bea <usart_write_buffer_wait+0x92>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     bda:	7e32      	ldrb	r2, [r6, #24]
     bdc:	0792      	lsls	r2, r2, #30
     bde:	d408      	bmi.n	bf2 <usart_write_buffer_wait+0x9a>
		} else if (i == USART_TIMEOUT) {
     be0:	4a06      	ldr	r2, [pc, #24]	; (bfc <usart_write_buffer_wait+0xa4>)
     be2:	4293      	cmp	r3, r2
     be4:	d1f5      	bne.n	bd2 <usart_write_buffer_wait+0x7a>
			return STATUS_ERR_TIMEOUT;
     be6:	2012      	movs	r0, #18
     be8:	e7be      	b.n	b68 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
     bea:	2000      	movs	r0, #0
     bec:	e7bc      	b.n	b68 <usart_write_buffer_wait+0x10>
				return STATUS_ERR_TIMEOUT;
     bee:	2012      	movs	r0, #18
     bf0:	e7ba      	b.n	b68 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
     bf2:	2000      	movs	r0, #0
     bf4:	e7b8      	b.n	b68 <usart_write_buffer_wait+0x10>
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	00000b2d 	.word	0x00000b2d
     bfc:	0000ffff 	.word	0x0000ffff

00000c00 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c00:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     c02:	2202      	movs	r2, #2
     c04:	761a      	strb	r2, [r3, #24]
}
     c06:	4770      	bx	lr

00000c08 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     c08:	b5f0      	push	{r4, r5, r6, r7, lr}
     c0a:	b087      	sub	sp, #28
     c0c:	0007      	movs	r7, r0
     c0e:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c10:	6806      	ldr	r6, [r0, #0]
     c12:	ab05      	add	r3, sp, #20
     c14:	2280      	movs	r2, #128	; 0x80
     c16:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c18:	2200      	movs	r2, #0
     c1a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c1c:	2101      	movs	r1, #1
     c1e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     c20:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     c22:	782b      	ldrb	r3, [r5, #0]
     c24:	2b00      	cmp	r3, #0
     c26:	d101      	bne.n	c2c <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c28:	ab05      	add	r3, sp, #20
     c2a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     c2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     c2e:	9301      	str	r3, [sp, #4]
     c30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     c32:	9302      	str	r3, [sp, #8]
     c34:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     c36:	9303      	str	r3, [sp, #12]
     c38:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     c3a:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c3c:	2400      	movs	r4, #0
     c3e:	e006      	b.n	c4e <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c40:	0021      	movs	r1, r4
     c42:	0030      	movs	r0, r6
     c44:	4b3d      	ldr	r3, [pc, #244]	; (d3c <_spi_set_config+0x134>)
     c46:	4798      	blx	r3
     c48:	e008      	b.n	c5c <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     c4a:	3401      	adds	r4, #1
     c4c:	b2e4      	uxtb	r4, r4
     c4e:	2c03      	cmp	r4, #3
     c50:	d80d      	bhi.n	c6e <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c52:	00a3      	lsls	r3, r4, #2
     c54:	aa01      	add	r2, sp, #4
     c56:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     c58:	2800      	cmp	r0, #0
     c5a:	d0f1      	beq.n	c40 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     c5c:	1c43      	adds	r3, r0, #1
     c5e:	d0f4      	beq.n	c4a <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c60:	a905      	add	r1, sp, #20
     c62:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c64:	0c00      	lsrs	r0, r0, #16
     c66:	b2c0      	uxtb	r0, r0
     c68:	4b35      	ldr	r3, [pc, #212]	; (d40 <_spi_set_config+0x138>)
     c6a:	4798      	blx	r3
     c6c:	e7ed      	b.n	c4a <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     c6e:	782b      	ldrb	r3, [r5, #0]
     c70:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     c72:	7c2b      	ldrb	r3, [r5, #16]
     c74:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     c76:	7cab      	ldrb	r3, [r5, #18]
     c78:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     c7a:	7d2b      	ldrb	r3, [r5, #20]
     c7c:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     c7e:	2200      	movs	r2, #0
     c80:	466b      	mov	r3, sp
     c82:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     c84:	782b      	ldrb	r3, [r5, #0]
     c86:	2b01      	cmp	r3, #1
     c88:	d014      	beq.n	cb4 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     c8a:	782b      	ldrb	r3, [r5, #0]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d127      	bne.n	ce0 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     c90:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     c92:	8baa      	ldrh	r2, [r5, #28]
     c94:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     c96:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     c98:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     c9a:	7fef      	ldrb	r7, [r5, #31]
     c9c:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     c9e:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     ca0:	4320      	orrs	r0, r4
     ca2:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     ca4:	2020      	movs	r0, #32
     ca6:	5c28      	ldrb	r0, [r5, r0]
     ca8:	2800      	cmp	r0, #0
     caa:	d01b      	beq.n	ce4 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     cac:	2140      	movs	r1, #64	; 0x40
     cae:	4311      	orrs	r1, r2
     cb0:	b289      	uxth	r1, r1
     cb2:	e017      	b.n	ce4 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cb4:	6838      	ldr	r0, [r7, #0]
     cb6:	4b23      	ldr	r3, [pc, #140]	; (d44 <_spi_set_config+0x13c>)
     cb8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     cba:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     cbc:	b2c0      	uxtb	r0, r0
     cbe:	4b22      	ldr	r3, [pc, #136]	; (d48 <_spi_set_config+0x140>)
     cc0:	4798      	blx	r3
     cc2:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     cc4:	466b      	mov	r3, sp
     cc6:	1c9a      	adds	r2, r3, #2
     cc8:	69a8      	ldr	r0, [r5, #24]
     cca:	4b20      	ldr	r3, [pc, #128]	; (d4c <_spi_set_config+0x144>)
     ccc:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     cce:	2800      	cmp	r0, #0
     cd0:	d001      	beq.n	cd6 <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     cd2:	2017      	movs	r0, #23
     cd4:	e030      	b.n	d38 <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     cd6:	466b      	mov	r3, sp
     cd8:	3302      	adds	r3, #2
     cda:	781b      	ldrb	r3, [r3, #0]
     cdc:	7333      	strb	r3, [r6, #12]
     cde:	e7d4      	b.n	c8a <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     ce0:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     ce2:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     ce4:	686a      	ldr	r2, [r5, #4]
     ce6:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     ce8:	68aa      	ldr	r2, [r5, #8]
     cea:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     cec:	68ea      	ldr	r2, [r5, #12]
     cee:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     cf0:	7c2a      	ldrb	r2, [r5, #16]
     cf2:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     cf4:	7c69      	ldrb	r1, [r5, #17]
     cf6:	2900      	cmp	r1, #0
     cf8:	d103      	bne.n	d02 <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     cfa:	4915      	ldr	r1, [pc, #84]	; (d50 <_spi_set_config+0x148>)
     cfc:	7889      	ldrb	r1, [r1, #2]
     cfe:	0789      	lsls	r1, r1, #30
     d00:	d501      	bpl.n	d06 <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     d02:	2180      	movs	r1, #128	; 0x80
     d04:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     d06:	7ca9      	ldrb	r1, [r5, #18]
     d08:	2900      	cmp	r1, #0
     d0a:	d002      	beq.n	d12 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     d0c:	2180      	movs	r1, #128	; 0x80
     d0e:	0289      	lsls	r1, r1, #10
     d10:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     d12:	7ce9      	ldrb	r1, [r5, #19]
     d14:	2900      	cmp	r1, #0
     d16:	d002      	beq.n	d1e <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     d18:	2180      	movs	r1, #128	; 0x80
     d1a:	0089      	lsls	r1, r1, #2
     d1c:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     d1e:	7d29      	ldrb	r1, [r5, #20]
     d20:	2900      	cmp	r1, #0
     d22:	d002      	beq.n	d2a <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     d24:	2180      	movs	r1, #128	; 0x80
     d26:	0189      	lsls	r1, r1, #6
     d28:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     d2a:	6831      	ldr	r1, [r6, #0]
     d2c:	430b      	orrs	r3, r1
     d2e:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     d30:	6873      	ldr	r3, [r6, #4]
     d32:	431a      	orrs	r2, r3
     d34:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     d36:	2000      	movs	r0, #0
}
     d38:	b007      	add	sp, #28
     d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d3c:	00000981 	.word	0x00000981
     d40:	00001db9 	.word	0x00001db9
     d44:	00000af9 	.word	0x00000af9
     d48:	00001cf1 	.word	0x00001cf1
     d4c:	00000909 	.word	0x00000909
     d50:	41002000 	.word	0x41002000

00000d54 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d54:	b5f0      	push	{r4, r5, r6, r7, lr}
     d56:	b085      	sub	sp, #20
     d58:	0005      	movs	r5, r0
     d5a:	000c      	movs	r4, r1
     d5c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     d5e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d60:	680b      	ldr	r3, [r1, #0]
     d62:	079b      	lsls	r3, r3, #30
     d64:	d502      	bpl.n	d6c <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     d66:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     d68:	b005      	add	sp, #20
     d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d6c:	680b      	ldr	r3, [r1, #0]
     d6e:	07db      	lsls	r3, r3, #31
     d70:	d501      	bpl.n	d76 <spi_init+0x22>
		return STATUS_BUSY;
     d72:	2005      	movs	r0, #5
     d74:	e7f8      	b.n	d68 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d76:	0008      	movs	r0, r1
     d78:	4b28      	ldr	r3, [pc, #160]	; (e1c <spi_init+0xc8>)
     d7a:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d7c:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d7e:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d80:	2301      	movs	r3, #1
     d82:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d84:	4a26      	ldr	r2, [pc, #152]	; (e20 <spi_init+0xcc>)
     d86:	6a11      	ldr	r1, [r2, #32]
     d88:	430b      	orrs	r3, r1
     d8a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     d8c:	2724      	movs	r7, #36	; 0x24
     d8e:	5df3      	ldrb	r3, [r6, r7]
     d90:	a903      	add	r1, sp, #12
     d92:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d94:	b2c3      	uxtb	r3, r0
     d96:	9301      	str	r3, [sp, #4]
     d98:	0018      	movs	r0, r3
     d9a:	4b22      	ldr	r3, [pc, #136]	; (e24 <spi_init+0xd0>)
     d9c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d9e:	9801      	ldr	r0, [sp, #4]
     da0:	4b21      	ldr	r3, [pc, #132]	; (e28 <spi_init+0xd4>)
     da2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     da4:	5df0      	ldrb	r0, [r6, r7]
     da6:	2100      	movs	r1, #0
     da8:	4b20      	ldr	r3, [pc, #128]	; (e2c <spi_init+0xd8>)
     daa:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     dac:	7833      	ldrb	r3, [r6, #0]
     dae:	2b01      	cmp	r3, #1
     db0:	d008      	beq.n	dc4 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     db2:	7833      	ldrb	r3, [r6, #0]
     db4:	2b00      	cmp	r3, #0
     db6:	d103      	bne.n	dc0 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     db8:	6823      	ldr	r3, [r4, #0]
     dba:	2208      	movs	r2, #8
     dbc:	4313      	orrs	r3, r2
     dbe:	6023      	str	r3, [r4, #0]
{
     dc0:	2300      	movs	r3, #0
     dc2:	e00b      	b.n	ddc <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     dc4:	6823      	ldr	r3, [r4, #0]
     dc6:	220c      	movs	r2, #12
     dc8:	4313      	orrs	r3, r2
     dca:	6023      	str	r3, [r4, #0]
     dcc:	e7f1      	b.n	db2 <spi_init+0x5e>
		module->callback[i]        = NULL;
     dce:	1c9a      	adds	r2, r3, #2
     dd0:	0092      	lsls	r2, r2, #2
     dd2:	18aa      	adds	r2, r5, r2
     dd4:	2100      	movs	r1, #0
     dd6:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     dd8:	3301      	adds	r3, #1
     dda:	b2db      	uxtb	r3, r3
     ddc:	2b06      	cmp	r3, #6
     dde:	d9f6      	bls.n	dce <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     de0:	2200      	movs	r2, #0
     de2:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     de4:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     de6:	2300      	movs	r3, #0
     de8:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     dea:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     dec:	3236      	adds	r2, #54	; 0x36
     dee:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     df0:	3201      	adds	r2, #1
     df2:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     df4:	3201      	adds	r2, #1
     df6:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     df8:	3a35      	subs	r2, #53	; 0x35
     dfa:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     dfc:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     dfe:	6828      	ldr	r0, [r5, #0]
     e00:	4b06      	ldr	r3, [pc, #24]	; (e1c <spi_init+0xc8>)
     e02:	4798      	blx	r3
     e04:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     e06:	490a      	ldr	r1, [pc, #40]	; (e30 <spi_init+0xdc>)
     e08:	4b0a      	ldr	r3, [pc, #40]	; (e34 <spi_init+0xe0>)
     e0a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e0c:	00a4      	lsls	r4, r4, #2
     e0e:	4b0a      	ldr	r3, [pc, #40]	; (e38 <spi_init+0xe4>)
     e10:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     e12:	0031      	movs	r1, r6
     e14:	0028      	movs	r0, r5
     e16:	4b09      	ldr	r3, [pc, #36]	; (e3c <spi_init+0xe8>)
     e18:	4798      	blx	r3
     e1a:	e7a5      	b.n	d68 <spi_init+0x14>
     e1c:	00000af9 	.word	0x00000af9
     e20:	40000400 	.word	0x40000400
     e24:	00001cd5 	.word	0x00001cd5
     e28:	00001c4d 	.word	0x00001c4d
     e2c:	00000935 	.word	0x00000935
     e30:	00001531 	.word	0x00001531
     e34:	000016fd 	.word	0x000016fd
     e38:	200000e0 	.word	0x200000e0
     e3c:	00000c09 	.word	0x00000c09

00000e40 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e42:	0004      	movs	r4, r0
     e44:	000e      	movs	r6, r1
     e46:	0017      	movs	r7, r2
     e48:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e4a:	2338      	movs	r3, #56	; 0x38
     e4c:	5cc3      	ldrb	r3, [r0, r3]
     e4e:	2b05      	cmp	r3, #5
     e50:	d06d      	beq.n	f2e <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     e52:	2a00      	cmp	r2, #0
     e54:	d101      	bne.n	e5a <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     e56:	2217      	movs	r2, #23
     e58:	e06a      	b.n	f30 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     e5a:	79c3      	ldrb	r3, [r0, #7]
     e5c:	2b00      	cmp	r3, #0
     e5e:	d101      	bne.n	e64 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     e60:	221c      	movs	r2, #28
     e62:	e065      	b.n	f30 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     e64:	7943      	ldrb	r3, [r0, #5]
     e66:	2b00      	cmp	r3, #0
     e68:	d103      	bne.n	e72 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e6a:	6803      	ldr	r3, [r0, #0]
     e6c:	7e1b      	ldrb	r3, [r3, #24]
     e6e:	079b      	lsls	r3, r3, #30
     e70:	d401      	bmi.n	e76 <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     e72:	2000      	movs	r0, #0
     e74:	e037      	b.n	ee6 <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     e76:	4b2f      	ldr	r3, [pc, #188]	; (f34 <spi_read_buffer_wait+0xf4>)
     e78:	4798      	blx	r3
     e7a:	e7fa      	b.n	e72 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e7c:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e7e:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     e80:	07d2      	lsls	r2, r2, #31
     e82:	d5fb      	bpl.n	e7c <spi_read_buffer_wait+0x3c>
     e84:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     e86:	07d2      	lsls	r2, r2, #31
     e88:	d534      	bpl.n	ef4 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e8a:	05ea      	lsls	r2, r5, #23
     e8c:	0dd2      	lsrs	r2, r2, #23
     e8e:	629a      	str	r2, [r3, #40]	; 0x28
     e90:	e030      	b.n	ef4 <spi_read_buffer_wait+0xb4>
     e92:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e94:	4a28      	ldr	r2, [pc, #160]	; (f38 <spi_read_buffer_wait+0xf8>)
     e96:	4293      	cmp	r3, r2
     e98:	d805      	bhi.n	ea6 <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e9a:	6822      	ldr	r2, [r4, #0]
     e9c:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     e9e:	0752      	lsls	r2, r2, #29
     ea0:	d401      	bmi.n	ea6 <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ea2:	3301      	adds	r3, #1
     ea4:	e7f6      	b.n	e94 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ea6:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ea8:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     eaa:	0792      	lsls	r2, r2, #30
     eac:	d404      	bmi.n	eb8 <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     eae:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     eb0:	075b      	lsls	r3, r3, #29
     eb2:	d422      	bmi.n	efa <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     eb4:	2212      	movs	r2, #18
     eb6:	e03b      	b.n	f30 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     eb8:	0020      	movs	r0, r4
     eba:	4b1e      	ldr	r3, [pc, #120]	; (f34 <spi_read_buffer_wait+0xf4>)
     ebc:	4798      	blx	r3
				return STATUS_ABORTED;
     ebe:	2204      	movs	r2, #4
     ec0:	e036      	b.n	f30 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     ec2:	2200      	movs	r2, #0
     ec4:	e026      	b.n	f14 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     ec6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     ec8:	05ff      	lsls	r7, r7, #23
     eca:	0dff      	lsrs	r7, r7, #23
     ecc:	e001      	b.n	ed2 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     ece:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     ed0:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     ed2:	2a00      	cmp	r2, #0
     ed4:	d12c      	bne.n	f30 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     ed6:	1c43      	adds	r3, r0, #1
     ed8:	b29b      	uxth	r3, r3
     eda:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     edc:	79a2      	ldrb	r2, [r4, #6]
     ede:	2a01      	cmp	r2, #1
     ee0:	d01e      	beq.n	f20 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     ee2:	0018      	movs	r0, r3
     ee4:	000f      	movs	r7, r1
	while (length--) {
     ee6:	1e79      	subs	r1, r7, #1
     ee8:	b289      	uxth	r1, r1
     eea:	2f00      	cmp	r7, #0
     eec:	d01d      	beq.n	f2a <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     eee:	7963      	ldrb	r3, [r4, #5]
     ef0:	2b01      	cmp	r3, #1
     ef2:	d0c3      	beq.n	e7c <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     ef4:	7963      	ldrb	r3, [r4, #5]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d0cb      	beq.n	e92 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     efa:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     efc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     efe:	0752      	lsls	r2, r2, #29
     f00:	d5fb      	bpl.n	efa <spi_read_buffer_wait+0xba>
     f02:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f04:	0752      	lsls	r2, r2, #29
     f06:	d5e2      	bpl.n	ece <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f08:	8b5a      	ldrh	r2, [r3, #26]
     f0a:	0752      	lsls	r2, r2, #29
     f0c:	d5d9      	bpl.n	ec2 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f0e:	2204      	movs	r2, #4
     f10:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     f12:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f14:	79a7      	ldrb	r7, [r4, #6]
     f16:	2f01      	cmp	r7, #1
     f18:	d0d5      	beq.n	ec6 <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f1a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     f1c:	b2ff      	uxtb	r7, r7
     f1e:	e7d8      	b.n	ed2 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     f20:	3002      	adds	r0, #2
     f22:	0a3f      	lsrs	r7, r7, #8
     f24:	54f7      	strb	r7, [r6, r3]
     f26:	b283      	uxth	r3, r0
     f28:	e7db      	b.n	ee2 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     f2a:	2200      	movs	r2, #0
     f2c:	e000      	b.n	f30 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     f2e:	2205      	movs	r2, #5
}
     f30:	0010      	movs	r0, r2
     f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f34:	00000c01 	.word	0x00000c01
     f38:	00002710 	.word	0x00002710

00000f3c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     f3c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     f3e:	7943      	ldrb	r3, [r0, #5]
     f40:	2b01      	cmp	r3, #1
     f42:	d001      	beq.n	f48 <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     f44:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     f46:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     f48:	7a03      	ldrb	r3, [r0, #8]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d16c      	bne.n	1028 <spi_select_slave+0xec>
		if (select) {
     f4e:	2a00      	cmp	r2, #0
     f50:	d058      	beq.n	1004 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     f52:	784b      	ldrb	r3, [r1, #1]
     f54:	2b00      	cmp	r3, #0
     f56:	d043      	beq.n	fe0 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f58:	6803      	ldr	r3, [r0, #0]
     f5a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     f5c:	07db      	lsls	r3, r3, #31
     f5e:	d411      	bmi.n	f84 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     f60:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     f62:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     f64:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     f66:	2900      	cmp	r1, #0
     f68:	d10a      	bne.n	f80 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     f6a:	01db      	lsls	r3, r3, #7
     f6c:	4931      	ldr	r1, [pc, #196]	; (1034 <spi_select_slave+0xf8>)
     f6e:	468c      	mov	ip, r1
     f70:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f72:	211f      	movs	r1, #31
     f74:	4011      	ands	r1, r2
     f76:	2201      	movs	r2, #1
     f78:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     f7a:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     f7c:	2005      	movs	r0, #5
     f7e:	e7e2      	b.n	f46 <spi_select_slave+0xa>
		return NULL;
     f80:	2300      	movs	r3, #0
     f82:	e7f6      	b.n	f72 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     f84:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     f86:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     f88:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     f8a:	2c00      	cmp	r4, #0
     f8c:	d104      	bne.n	f98 <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     f8e:	01db      	lsls	r3, r3, #7
     f90:	4c28      	ldr	r4, [pc, #160]	; (1034 <spi_select_slave+0xf8>)
     f92:	46a4      	mov	ip, r4
     f94:	4463      	add	r3, ip
     f96:	e000      	b.n	f9a <spi_select_slave+0x5e>
		return NULL;
     f98:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f9a:	241f      	movs	r4, #31
     f9c:	4014      	ands	r4, r2
     f9e:	2201      	movs	r2, #1
     fa0:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     fa2:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     fa4:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     fa6:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fa8:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     faa:	07c9      	lsls	r1, r1, #31
     fac:	d500      	bpl.n	fb0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fae:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     fb0:	79c3      	ldrb	r3, [r0, #7]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d13a      	bne.n	102c <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fb6:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fb8:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     fba:	0752      	lsls	r2, r2, #29
     fbc:	d5fb      	bpl.n	fb6 <spi_select_slave+0x7a>
     fbe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     fc0:	0752      	lsls	r2, r2, #29
     fc2:	d535      	bpl.n	1030 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fc4:	8b5a      	ldrh	r2, [r3, #26]
     fc6:	0752      	lsls	r2, r2, #29
     fc8:	d501      	bpl.n	fce <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     fca:	2204      	movs	r2, #4
     fcc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fce:	7982      	ldrb	r2, [r0, #6]
     fd0:	2a01      	cmp	r2, #1
     fd2:	d002      	beq.n	fda <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     fd6:	2000      	movs	r0, #0
     fd8:	e7b5      	b.n	f46 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fdc:	2000      	movs	r0, #0
     fde:	e7b2      	b.n	f46 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     fe0:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     fe2:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     fe4:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     fe6:	2900      	cmp	r1, #0
     fe8:	d10a      	bne.n	1000 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     fea:	01db      	lsls	r3, r3, #7
     fec:	4911      	ldr	r1, [pc, #68]	; (1034 <spi_select_slave+0xf8>)
     fee:	468c      	mov	ip, r1
     ff0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ff2:	211f      	movs	r1, #31
     ff4:	4011      	ands	r1, r2
     ff6:	2201      	movs	r2, #1
     ff8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     ffa:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     ffc:	2000      	movs	r0, #0
     ffe:	e7a2      	b.n	f46 <spi_select_slave+0xa>
		return NULL;
    1000:	2300      	movs	r3, #0
    1002:	e7f6      	b.n	ff2 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
    1004:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1006:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1008:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    100a:	2900      	cmp	r1, #0
    100c:	d10a      	bne.n	1024 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
    100e:	01db      	lsls	r3, r3, #7
    1010:	4908      	ldr	r1, [pc, #32]	; (1034 <spi_select_slave+0xf8>)
    1012:	468c      	mov	ip, r1
    1014:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1016:	211f      	movs	r1, #31
    1018:	4011      	ands	r1, r2
    101a:	2201      	movs	r2, #1
    101c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    101e:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1020:	2000      	movs	r0, #0
    1022:	e790      	b.n	f46 <spi_select_slave+0xa>
		return NULL;
    1024:	2300      	movs	r3, #0
    1026:	e7f6      	b.n	1016 <spi_select_slave+0xda>
    1028:	2000      	movs	r0, #0
    102a:	e78c      	b.n	f46 <spi_select_slave+0xa>
    102c:	2000      	movs	r0, #0
    102e:	e78a      	b.n	f46 <spi_select_slave+0xa>
    1030:	2000      	movs	r0, #0
    1032:	e788      	b.n	f46 <spi_select_slave+0xa>
    1034:	41004400 	.word	0x41004400

00001038 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1038:	b5f0      	push	{r4, r5, r6, r7, lr}
    103a:	46d6      	mov	lr, sl
    103c:	464f      	mov	r7, r9
    103e:	4646      	mov	r6, r8
    1040:	b5c0      	push	{r6, r7, lr}
    1042:	b082      	sub	sp, #8
    1044:	0004      	movs	r4, r0
    1046:	468a      	mov	sl, r1
    1048:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    104a:	2338      	movs	r3, #56	; 0x38
    104c:	5cc3      	ldrb	r3, [r0, r3]
    104e:	2b05      	cmp	r3, #5
    1050:	d100      	bne.n	1054 <spi_write_buffer_wait+0x1c>
    1052:	e0d8      	b.n	1206 <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    1054:	2a00      	cmp	r2, #0
    1056:	d101      	bne.n	105c <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
    1058:	2017      	movs	r0, #23
    105a:	e0d5      	b.n	1208 <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    105c:	7943      	ldrb	r3, [r0, #5]
    105e:	2b00      	cmp	r3, #0
    1060:	d103      	bne.n	106a <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1062:	6803      	ldr	r3, [r0, #0]
    1064:	7e1b      	ldrb	r3, [r3, #24]
    1066:	079b      	lsls	r3, r3, #30
    1068:	d402      	bmi.n	1070 <spi_write_buffer_wait+0x38>
    106a:	46bc      	mov	ip, r7
    106c:	2600      	movs	r6, #0
    106e:	e025      	b.n	10bc <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    1070:	4b6a      	ldr	r3, [pc, #424]	; (121c <spi_write_buffer_wait+0x1e4>)
    1072:	4798      	blx	r3
    1074:	e7f9      	b.n	106a <spi_write_buffer_wait+0x32>
    1076:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1078:	4a69      	ldr	r2, [pc, #420]	; (1220 <spi_write_buffer_wait+0x1e8>)
    107a:	4293      	cmp	r3, r2
    107c:	d805      	bhi.n	108a <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    107e:	6822      	ldr	r2, [r4, #0]
    1080:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1082:	07d2      	lsls	r2, r2, #31
    1084:	d401      	bmi.n	108a <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1086:	3301      	adds	r3, #1
    1088:	e7f6      	b.n	1078 <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
    108a:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    108c:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    108e:	0792      	lsls	r2, r2, #30
    1090:	d404      	bmi.n	109c <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1092:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
    1094:	07db      	lsls	r3, r3, #31
    1096:	d418      	bmi.n	10ca <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1098:	2012      	movs	r0, #18
    109a:	e0b5      	b.n	1208 <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
    109c:	0020      	movs	r0, r4
    109e:	4b5f      	ldr	r3, [pc, #380]	; (121c <spi_write_buffer_wait+0x1e4>)
    10a0:	4798      	blx	r3
				return STATUS_ABORTED;
    10a2:	2004      	movs	r0, #4
    10a4:	e0b0      	b.n	1208 <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    10a6:	3602      	adds	r6, #2
    10a8:	b2b6      	uxth	r6, r6
    10aa:	4652      	mov	r2, sl
    10ac:	5dd2      	ldrb	r2, [r2, r7]
    10ae:	0212      	lsls	r2, r2, #8
    10b0:	4302      	orrs	r2, r0
    10b2:	e017      	b.n	10e4 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    10b4:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
    10b6:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
    10b8:	2b00      	cmp	r3, #0
    10ba:	d11a      	bne.n	10f2 <spi_write_buffer_wait+0xba>
	while (length--) {
    10bc:	1e79      	subs	r1, r7, #1
    10be:	b289      	uxth	r1, r1
    10c0:	2f00      	cmp	r7, #0
    10c2:	d06c      	beq.n	119e <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
    10c4:	7963      	ldrb	r3, [r4, #5]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d0d5      	beq.n	1076 <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10ca:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10cc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    10ce:	07d2      	lsls	r2, r2, #31
    10d0:	d5fb      	bpl.n	10ca <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
    10d2:	1c77      	adds	r7, r6, #1
    10d4:	b2bf      	uxth	r7, r7
    10d6:	4652      	mov	r2, sl
    10d8:	5d90      	ldrb	r0, [r2, r6]
    10da:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10dc:	79a5      	ldrb	r5, [r4, #6]
    10de:	2d01      	cmp	r5, #1
    10e0:	d0e1      	beq.n	10a6 <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
    10e2:	003e      	movs	r6, r7
    10e4:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    10e6:	07f8      	lsls	r0, r7, #31
    10e8:	d5e4      	bpl.n	10b4 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    10ea:	05d2      	lsls	r2, r2, #23
    10ec:	0dd2      	lsrs	r2, r2, #23
    10ee:	629a      	str	r2, [r3, #40]	; 0x28
    10f0:	e7e0      	b.n	10b4 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    10f2:	7963      	ldrb	r3, [r4, #5]
    10f4:	2b00      	cmp	r3, #0
    10f6:	d040      	beq.n	117a <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10f8:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    10fa:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    10fc:	0752      	lsls	r2, r2, #29
    10fe:	d5fb      	bpl.n	10f8 <spi_write_buffer_wait+0xc0>
    1100:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1102:	0752      	lsls	r2, r2, #29
    1104:	d508      	bpl.n	1118 <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1106:	8b5a      	ldrh	r2, [r3, #26]
    1108:	0752      	lsls	r2, r2, #29
    110a:	d501      	bpl.n	1110 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    110c:	2204      	movs	r2, #4
    110e:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1110:	79a2      	ldrb	r2, [r4, #6]
    1112:	2a01      	cmp	r2, #1
    1114:	d041      	beq.n	119a <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
    1118:	4660      	mov	r0, ip
    111a:	3801      	subs	r0, #1
    111c:	b283      	uxth	r3, r0
    111e:	469c      	mov	ip, r3
    1120:	000f      	movs	r7, r1
    1122:	e7cb      	b.n	10bc <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1124:	3602      	adds	r6, #2
    1126:	4655      	mov	r5, sl
    1128:	5c2f      	ldrb	r7, [r5, r0]
    112a:	023f      	lsls	r7, r7, #8
    112c:	4640      	mov	r0, r8
    112e:	4307      	orrs	r7, r0
    1130:	b2b0      	uxth	r0, r6
    1132:	e01b      	b.n	116c <spi_write_buffer_wait+0x134>
						length--;
    1134:	3901      	subs	r1, #1
    1136:	b289      	uxth	r1, r1
    1138:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    113a:	6822      	ldr	r2, [r4, #0]
    113c:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    113e:	0752      	lsls	r2, r2, #29
    1140:	d41d      	bmi.n	117e <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1142:	3301      	adds	r3, #1
    1144:	4a36      	ldr	r2, [pc, #216]	; (1220 <spi_write_buffer_wait+0x1e8>)
    1146:	4293      	cmp	r3, r2
    1148:	d819      	bhi.n	117e <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
    114a:	2900      	cmp	r1, #0
    114c:	d0f5      	beq.n	113a <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
    114e:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1150:	7e17      	ldrb	r7, [r2, #24]
    1152:	07f8      	lsls	r0, r7, #31
    1154:	d5f1      	bpl.n	113a <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
    1156:	1c70      	adds	r0, r6, #1
    1158:	b280      	uxth	r0, r0
    115a:	4655      	mov	r5, sl
    115c:	5dad      	ldrb	r5, [r5, r6]
    115e:	46a8      	mov	r8, r5
    1160:	466f      	mov	r7, sp
    1162:	80fd      	strh	r5, [r7, #6]
    1164:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1166:	79a5      	ldrb	r5, [r4, #6]
    1168:	2d01      	cmp	r5, #1
    116a:	d0db      	beq.n	1124 <spi_write_buffer_wait+0xec>
    116c:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    116e:	07f5      	lsls	r5, r6, #31
    1170:	d5e0      	bpl.n	1134 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1172:	05ff      	lsls	r7, r7, #23
    1174:	0dff      	lsrs	r7, r7, #23
    1176:	6297      	str	r7, [r2, #40]	; 0x28
    1178:	e7dc      	b.n	1134 <spi_write_buffer_wait+0xfc>
    117a:	2300      	movs	r3, #0
    117c:	e7e2      	b.n	1144 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    117e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1180:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
    1182:	0792      	lsls	r2, r2, #30
    1184:	d404      	bmi.n	1190 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1186:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1188:	075b      	lsls	r3, r3, #29
    118a:	d4b5      	bmi.n	10f8 <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
    118c:	2012      	movs	r0, #18
    118e:	e03b      	b.n	1208 <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
    1190:	0020      	movs	r0, r4
    1192:	4b22      	ldr	r3, [pc, #136]	; (121c <spi_write_buffer_wait+0x1e4>)
    1194:	4798      	blx	r3
					return STATUS_ABORTED;
    1196:	2004      	movs	r0, #4
    1198:	e036      	b.n	1208 <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    119c:	e7bc      	b.n	1118 <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    119e:	7962      	ldrb	r2, [r4, #5]
    11a0:	2a01      	cmp	r2, #1
    11a2:	d006      	beq.n	11b2 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    11a4:	2a00      	cmp	r2, #0
    11a6:	d135      	bne.n	1214 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
    11a8:	79e3      	ldrb	r3, [r4, #7]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d11a      	bne.n	11e4 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    11ae:	2000      	movs	r0, #0
    11b0:	e02a      	b.n	1208 <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    11b2:	6823      	ldr	r3, [r4, #0]
    11b4:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    11b6:	079b      	lsls	r3, r3, #30
    11b8:	d5fb      	bpl.n	11b2 <spi_write_buffer_wait+0x17a>
    11ba:	e7f3      	b.n	11a4 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11bc:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11be:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    11c0:	0752      	lsls	r2, r2, #29
    11c2:	d529      	bpl.n	1218 <spi_write_buffer_wait+0x1e0>
    11c4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    11c6:	0752      	lsls	r2, r2, #29
    11c8:	d508      	bpl.n	11dc <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    11ca:	8b5a      	ldrh	r2, [r3, #26]
    11cc:	0752      	lsls	r2, r2, #29
    11ce:	d501      	bpl.n	11d4 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    11d0:	2204      	movs	r2, #4
    11d2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11d4:	79a2      	ldrb	r2, [r4, #6]
    11d6:	2a01      	cmp	r2, #1
    11d8:	d011      	beq.n	11fe <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    11da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    11dc:	4660      	mov	r0, ip
    11de:	3801      	subs	r0, #1
    11e0:	b283      	uxth	r3, r0
    11e2:	469c      	mov	ip, r3
			while (flush_length) {
    11e4:	4663      	mov	r3, ip
    11e6:	2b00      	cmp	r3, #0
    11e8:	d00b      	beq.n	1202 <spi_write_buffer_wait+0x1ca>
    11ea:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11ec:	4a0c      	ldr	r2, [pc, #48]	; (1220 <spi_write_buffer_wait+0x1e8>)
    11ee:	4293      	cmp	r3, r2
    11f0:	d8e4      	bhi.n	11bc <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11f2:	6822      	ldr	r2, [r4, #0]
    11f4:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    11f6:	0752      	lsls	r2, r2, #29
    11f8:	d4e0      	bmi.n	11bc <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11fa:	3301      	adds	r3, #1
    11fc:	e7f6      	b.n	11ec <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    11fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1200:	e7ec      	b.n	11dc <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1202:	2000      	movs	r0, #0
    1204:	e000      	b.n	1208 <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    1206:	2005      	movs	r0, #5
}
    1208:	b002      	add	sp, #8
    120a:	bc1c      	pop	{r2, r3, r4}
    120c:	4690      	mov	r8, r2
    120e:	4699      	mov	r9, r3
    1210:	46a2      	mov	sl, r4
    1212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1214:	2000      	movs	r0, #0
    1216:	e7f7      	b.n	1208 <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    1218:	2012      	movs	r0, #18
    121a:	e7f5      	b.n	1208 <spi_write_buffer_wait+0x1d0>
    121c:	00000c01 	.word	0x00000c01
    1220:	00002710 	.word	0x00002710

00001224 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1224:	b5f0      	push	{r4, r5, r6, r7, lr}
    1226:	46de      	mov	lr, fp
    1228:	4657      	mov	r7, sl
    122a:	464e      	mov	r6, r9
    122c:	4645      	mov	r5, r8
    122e:	b5e0      	push	{r5, r6, r7, lr}
    1230:	b085      	sub	sp, #20
    1232:	0004      	movs	r4, r0
    1234:	9100      	str	r1, [sp, #0]
    1236:	9202      	str	r2, [sp, #8]
    1238:	4698      	mov	r8, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    123a:	2338      	movs	r3, #56	; 0x38
    123c:	5cc3      	ldrb	r3, [r0, r3]
    123e:	2b05      	cmp	r3, #5
    1240:	d100      	bne.n	1244 <spi_transceive_buffer_wait+0x20>
    1242:	e11f      	b.n	1484 <spi_transceive_buffer_wait+0x260>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1244:	4643      	mov	r3, r8
    1246:	2b00      	cmp	r3, #0
    1248:	d101      	bne.n	124e <spi_transceive_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    124a:	2117      	movs	r1, #23
    124c:	e11b      	b.n	1486 <spi_transceive_buffer_wait+0x262>
	}

	if (!(module->receiver_enabled)) {
    124e:	79c3      	ldrb	r3, [r0, #7]
    1250:	2b00      	cmp	r3, #0
    1252:	d101      	bne.n	1258 <spi_transceive_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    1254:	211c      	movs	r1, #28
    1256:	e116      	b.n	1486 <spi_transceive_buffer_wait+0x262>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1258:	7943      	ldrb	r3, [r0, #5]
    125a:	2b00      	cmp	r3, #0
    125c:	d103      	bne.n	1266 <spi_transceive_buffer_wait+0x42>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    125e:	6803      	ldr	r3, [r0, #0]
    1260:	7e1b      	ldrb	r3, [r3, #24]
    1262:	079b      	lsls	r3, r3, #30
    1264:	d404      	bmi.n	1270 <spi_transceive_buffer_wait+0x4c>
		rx_data[rx_pos++] = received_data;
		*rx_data = received_data;
		
		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    1266:	46c4      	mov	ip, r8
    1268:	2300      	movs	r3, #0
    126a:	9303      	str	r3, [sp, #12]
    126c:	2100      	movs	r1, #0
    126e:	e07c      	b.n	136a <spi_transceive_buffer_wait+0x146>
		_spi_clear_tx_complete_flag(module);
    1270:	4b8a      	ldr	r3, [pc, #552]	; (149c <spi_transceive_buffer_wait+0x278>)
    1272:	4798      	blx	r3
    1274:	e7f7      	b.n	1266 <spi_transceive_buffer_wait+0x42>
    1276:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1278:	4a89      	ldr	r2, [pc, #548]	; (14a0 <spi_transceive_buffer_wait+0x27c>)
    127a:	4293      	cmp	r3, r2
    127c:	d805      	bhi.n	128a <spi_transceive_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    127e:	6822      	ldr	r2, [r4, #0]
    1280:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1282:	07d2      	lsls	r2, r2, #31
    1284:	d401      	bmi.n	128a <spi_transceive_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1286:	3301      	adds	r3, #1
    1288:	e7f6      	b.n	1278 <spi_transceive_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
    128a:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    128c:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    128e:	0792      	lsls	r2, r2, #30
    1290:	d404      	bmi.n	129c <spi_transceive_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1292:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    1294:	07db      	lsls	r3, r3, #31
    1296:	d471      	bmi.n	137c <spi_transceive_buffer_wait+0x158>
				return STATUS_ERR_TIMEOUT;
    1298:	2112      	movs	r1, #18
    129a:	e0f4      	b.n	1486 <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    129c:	0020      	movs	r0, r4
    129e:	4b7f      	ldr	r3, [pc, #508]	; (149c <spi_transceive_buffer_wait+0x278>)
    12a0:	4798      	blx	r3
				return STATUS_ABORTED;
    12a2:	2104      	movs	r1, #4
    12a4:	e0ef      	b.n	1486 <spi_transceive_buffer_wait+0x262>
			data_to_send |= (tx_data[tx_pos++] << 8);
    12a6:	3102      	adds	r1, #2
    12a8:	9a00      	ldr	r2, [sp, #0]
    12aa:	5d92      	ldrb	r2, [r2, r6]
    12ac:	0212      	lsls	r2, r2, #8
    12ae:	4650      	mov	r0, sl
    12b0:	4302      	orrs	r2, r0
    12b2:	b28e      	uxth	r6, r1
    12b4:	e071      	b.n	139a <spi_transceive_buffer_wait+0x176>
						data_to_send |= (tx_data[tx_pos++] << 8);
    12b6:	3602      	adds	r6, #2
    12b8:	9900      	ldr	r1, [sp, #0]
    12ba:	5c09      	ldrb	r1, [r1, r0]
    12bc:	0209      	lsls	r1, r1, #8
    12be:	4650      	mov	r0, sl
    12c0:	4301      	orrs	r1, r0
    12c2:	4688      	mov	r8, r1
    12c4:	b2b0      	uxth	r0, r6
    12c6:	e01a      	b.n	12fe <spi_transceive_buffer_wait+0xda>
					length--;
    12c8:	3f01      	subs	r7, #1
    12ca:	b2bf      	uxth	r7, r7
    12cc:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    12ce:	6822      	ldr	r2, [r4, #0]
    12d0:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    12d2:	0752      	lsls	r2, r2, #29
    12d4:	d41d      	bmi.n	1312 <spi_transceive_buffer_wait+0xee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    12d6:	3301      	adds	r3, #1
    12d8:	4a71      	ldr	r2, [pc, #452]	; (14a0 <spi_transceive_buffer_wait+0x27c>)
    12da:	4293      	cmp	r3, r2
    12dc:	d819      	bhi.n	1312 <spi_transceive_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    12de:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    12e0:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    12e2:	07c9      	lsls	r1, r1, #31
    12e4:	d5f3      	bpl.n	12ce <spi_transceive_buffer_wait+0xaa>
					data_to_send = tx_data[tx_pos++];
    12e6:	1c70      	adds	r0, r6, #1
    12e8:	b280      	uxth	r0, r0
    12ea:	9900      	ldr	r1, [sp, #0]
    12ec:	5d89      	ldrb	r1, [r1, r6]
    12ee:	468a      	mov	sl, r1
    12f0:	466d      	mov	r5, sp
    12f2:	80e9      	strh	r1, [r5, #6]
    12f4:	88e9      	ldrh	r1, [r5, #6]
    12f6:	4688      	mov	r8, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12f8:	79a1      	ldrb	r1, [r4, #6]
    12fa:	2901      	cmp	r1, #1
    12fc:	d0db      	beq.n	12b6 <spi_transceive_buffer_wait+0x92>
    12fe:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1300:	07f1      	lsls	r1, r6, #31
    1302:	d5e1      	bpl.n	12c8 <spi_transceive_buffer_wait+0xa4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1304:	4641      	mov	r1, r8
    1306:	05c9      	lsls	r1, r1, #23
    1308:	0dc9      	lsrs	r1, r1, #23
    130a:	6291      	str	r1, [r2, #40]	; 0x28
    130c:	e7dc      	b.n	12c8 <spi_transceive_buffer_wait+0xa4>
    130e:	2300      	movs	r3, #0
    1310:	e7e2      	b.n	12d8 <spi_transceive_buffer_wait+0xb4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1312:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1314:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1316:	0792      	lsls	r2, r2, #30
    1318:	d404      	bmi.n	1324 <spi_transceive_buffer_wait+0x100>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    131a:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    131c:	075b      	lsls	r3, r3, #29
    131e:	d445      	bmi.n	13ac <spi_transceive_buffer_wait+0x188>
				return STATUS_ERR_TIMEOUT;
    1320:	2112      	movs	r1, #18
    1322:	e0b0      	b.n	1486 <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    1324:	0020      	movs	r0, r4
    1326:	4b5d      	ldr	r3, [pc, #372]	; (149c <spi_transceive_buffer_wait+0x278>)
    1328:	4798      	blx	r3
				return STATUS_ABORTED;
    132a:	2104      	movs	r1, #4
    132c:	e0ab      	b.n	1486 <spi_transceive_buffer_wait+0x262>
	enum status_code retval = STATUS_OK;
    132e:	2100      	movs	r1, #0
    1330:	e04d      	b.n	13ce <spi_transceive_buffer_wait+0x1aa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1334:	05d2      	lsls	r2, r2, #23
    1336:	0dd3      	lsrs	r3, r2, #23
    1338:	4698      	mov	r8, r3
    133a:	e002      	b.n	1342 <spi_transceive_buffer_wait+0x11e>
		uint16_t received_data = 0;
    133c:	2300      	movs	r3, #0
    133e:	4698      	mov	r8, r3
		return STATUS_ERR_IO;
    1340:	2110      	movs	r1, #16
		if (retval != STATUS_OK) {
    1342:	2900      	cmp	r1, #0
    1344:	d000      	beq.n	1348 <spi_transceive_buffer_wait+0x124>
    1346:	e09e      	b.n	1486 <spi_transceive_buffer_wait+0x262>
		rx_data[rx_pos++] = received_data;
    1348:	9803      	ldr	r0, [sp, #12]
    134a:	0003      	movs	r3, r0
    134c:	3301      	adds	r3, #1
    134e:	b29b      	uxth	r3, r3
    1350:	4642      	mov	r2, r8
    1352:	4669      	mov	r1, sp
    1354:	718a      	strb	r2, [r1, #6]
    1356:	7989      	ldrb	r1, [r1, #6]
    1358:	9a02      	ldr	r2, [sp, #8]
    135a:	5411      	strb	r1, [r2, r0]
		*rx_data = received_data;
    135c:	7011      	strb	r1, [r2, #0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    135e:	79a1      	ldrb	r1, [r4, #6]
    1360:	2901      	cmp	r1, #1
    1362:	d03b      	beq.n	13dc <spi_transceive_buffer_wait+0x1b8>
			rx_data[rx_pos++] = (received_data >> 8);
    1364:	9303      	str	r3, [sp, #12]
    1366:	0031      	movs	r1, r6
    1368:	46b8      	mov	r8, r7
	while (length--) {
    136a:	4643      	mov	r3, r8
    136c:	1e5f      	subs	r7, r3, #1
    136e:	b2bf      	uxth	r7, r7
    1370:	2b00      	cmp	r3, #0
    1372:	d03a      	beq.n	13ea <spi_transceive_buffer_wait+0x1c6>
		if (module->mode == SPI_MODE_SLAVE) {
    1374:	7963      	ldrb	r3, [r4, #5]
    1376:	2b00      	cmp	r3, #0
    1378:	d100      	bne.n	137c <spi_transceive_buffer_wait+0x158>
    137a:	e77c      	b.n	1276 <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    137c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    137e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    1380:	07d2      	lsls	r2, r2, #31
    1382:	d5fb      	bpl.n	137c <spi_transceive_buffer_wait+0x158>
		uint16_t data_to_send = tx_data[tx_pos++];
    1384:	1c4e      	adds	r6, r1, #1
    1386:	b2b6      	uxth	r6, r6
    1388:	9a00      	ldr	r2, [sp, #0]
    138a:	5c52      	ldrb	r2, [r2, r1]
    138c:	4692      	mov	sl, r2
    138e:	4668      	mov	r0, sp
    1390:	80c2      	strh	r2, [r0, #6]
    1392:	88c2      	ldrh	r2, [r0, #6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1394:	79a0      	ldrb	r0, [r4, #6]
    1396:	2801      	cmp	r0, #1
    1398:	d085      	beq.n	12a6 <spi_transceive_buffer_wait+0x82>
    139a:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    139c:	07c9      	lsls	r1, r1, #31
    139e:	d502      	bpl.n	13a6 <spi_transceive_buffer_wait+0x182>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    13a0:	05d2      	lsls	r2, r2, #23
    13a2:	0dd2      	lsrs	r2, r2, #23
    13a4:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    13a6:	7963      	ldrb	r3, [r4, #5]
    13a8:	2b00      	cmp	r3, #0
    13aa:	d0b0      	beq.n	130e <spi_transceive_buffer_wait+0xea>
	SercomSpi *const spi_module = &(module->hw->SPI);
    13ac:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13ae:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    13b0:	0752      	lsls	r2, r2, #29
    13b2:	d5fb      	bpl.n	13ac <spi_transceive_buffer_wait+0x188>
		rx_length--;
    13b4:	4662      	mov	r2, ip
    13b6:	3a01      	subs	r2, #1
    13b8:	b292      	uxth	r2, r2
    13ba:	4694      	mov	ip, r2
    13bc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    13be:	0752      	lsls	r2, r2, #29
    13c0:	d5bc      	bpl.n	133c <spi_transceive_buffer_wait+0x118>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13c2:	8b5a      	ldrh	r2, [r3, #26]
    13c4:	0752      	lsls	r2, r2, #29
    13c6:	d5b2      	bpl.n	132e <spi_transceive_buffer_wait+0x10a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    13c8:	2204      	movs	r2, #4
    13ca:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    13cc:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13ce:	79a2      	ldrb	r2, [r4, #6]
    13d0:	2a01      	cmp	r2, #1
    13d2:	d0ae      	beq.n	1332 <spi_transceive_buffer_wait+0x10e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    13d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13d6:	b2d3      	uxtb	r3, r2
    13d8:	4698      	mov	r8, r3
    13da:	e7b2      	b.n	1342 <spi_transceive_buffer_wait+0x11e>
			rx_data[rx_pos++] = (received_data >> 8);
    13dc:	3002      	adds	r0, #2
    13de:	4642      	mov	r2, r8
    13e0:	0a12      	lsrs	r2, r2, #8
    13e2:	9902      	ldr	r1, [sp, #8]
    13e4:	54ca      	strb	r2, [r1, r3]
    13e6:	b283      	uxth	r3, r0
    13e8:	e7bc      	b.n	1364 <spi_transceive_buffer_wait+0x140>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    13ea:	7962      	ldrb	r2, [r4, #5]
    13ec:	2a01      	cmp	r2, #1
    13ee:	d003      	beq.n	13f8 <spi_transceive_buffer_wait+0x1d4>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    13f0:	2a00      	cmp	r2, #0
    13f2:	d03b      	beq.n	146c <spi_transceive_buffer_wait+0x248>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    13f4:	2100      	movs	r1, #0
    13f6:	e046      	b.n	1486 <spi_transceive_buffer_wait+0x262>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    13f8:	6823      	ldr	r3, [r4, #0]
    13fa:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    13fc:	079b      	lsls	r3, r3, #30
    13fe:	d5fb      	bpl.n	13f8 <spi_transceive_buffer_wait+0x1d4>
    1400:	e7f6      	b.n	13f0 <spi_transceive_buffer_wait+0x1cc>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1402:	3301      	adds	r3, #1
    1404:	4a26      	ldr	r2, [pc, #152]	; (14a0 <spi_transceive_buffer_wait+0x27c>)
    1406:	4293      	cmp	r3, r2
    1408:	d803      	bhi.n	1412 <spi_transceive_buffer_wait+0x1ee>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    140a:	6822      	ldr	r2, [r4, #0]
    140c:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    140e:	0752      	lsls	r2, r2, #29
    1410:	d5f7      	bpl.n	1402 <spi_transceive_buffer_wait+0x1de>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1412:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1414:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1416:	0752      	lsls	r2, r2, #29
    1418:	d53d      	bpl.n	1496 <spi_transceive_buffer_wait+0x272>
			rx_length--;
    141a:	4662      	mov	r2, ip
    141c:	3a01      	subs	r2, #1
    141e:	b292      	uxth	r2, r2
    1420:	4694      	mov	ip, r2
    1422:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1424:	0752      	lsls	r2, r2, #29
    1426:	d511      	bpl.n	144c <spi_transceive_buffer_wait+0x228>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1428:	8b5a      	ldrh	r2, [r3, #26]
    142a:	0752      	lsls	r2, r2, #29
    142c:	d508      	bpl.n	1440 <spi_transceive_buffer_wait+0x21c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    142e:	2204      	movs	r2, #4
    1430:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1432:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1434:	79a2      	ldrb	r2, [r4, #6]
    1436:	2a01      	cmp	r2, #1
    1438:	d004      	beq.n	1444 <spi_transceive_buffer_wait+0x220>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    143a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    143c:	b2d2      	uxtb	r2, r2
    143e:	e007      	b.n	1450 <spi_transceive_buffer_wait+0x22c>
	enum status_code retval = STATUS_OK;
    1440:	2100      	movs	r1, #0
    1442:	e7f7      	b.n	1434 <spi_transceive_buffer_wait+0x210>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1446:	05d2      	lsls	r2, r2, #23
    1448:	0dd2      	lsrs	r2, r2, #23
    144a:	e001      	b.n	1450 <spi_transceive_buffer_wait+0x22c>
			uint16_t received_data = 0;
    144c:	4642      	mov	r2, r8
		return STATUS_ERR_IO;
    144e:	2110      	movs	r1, #16
			if (retval != STATUS_OK) {
    1450:	2900      	cmp	r1, #0
    1452:	d118      	bne.n	1486 <spi_transceive_buffer_wait+0x262>
			rx_data[rx_pos++] = received_data;
    1454:	9803      	ldr	r0, [sp, #12]
    1456:	0003      	movs	r3, r0
    1458:	3301      	adds	r3, #1
    145a:	b29b      	uxth	r3, r3
    145c:	b2d1      	uxtb	r1, r2
    145e:	9d02      	ldr	r5, [sp, #8]
    1460:	5429      	strb	r1, [r5, r0]
			*rx_data = received_data;
    1462:	7029      	strb	r1, [r5, #0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1464:	79a1      	ldrb	r1, [r4, #6]
    1466:	2901      	cmp	r1, #1
    1468:	d005      	beq.n	1476 <spi_transceive_buffer_wait+0x252>
				rx_data[rx_pos++] = (received_data >> 8);
    146a:	9303      	str	r3, [sp, #12]
		while (rx_length) {
    146c:	4663      	mov	r3, ip
    146e:	2b00      	cmp	r3, #0
    1470:	d006      	beq.n	1480 <spi_transceive_buffer_wait+0x25c>
    1472:	2300      	movs	r3, #0
    1474:	e7c6      	b.n	1404 <spi_transceive_buffer_wait+0x1e0>
				rx_data[rx_pos++] = (received_data >> 8);
    1476:	3002      	adds	r0, #2
    1478:	0a12      	lsrs	r2, r2, #8
    147a:	54ea      	strb	r2, [r5, r3]
    147c:	b283      	uxth	r3, r0
    147e:	e7f4      	b.n	146a <spi_transceive_buffer_wait+0x246>
	return STATUS_OK;
    1480:	2100      	movs	r1, #0
    1482:	e000      	b.n	1486 <spi_transceive_buffer_wait+0x262>
		return STATUS_BUSY;
    1484:	2105      	movs	r1, #5
}
    1486:	0008      	movs	r0, r1
    1488:	b005      	add	sp, #20
    148a:	bc3c      	pop	{r2, r3, r4, r5}
    148c:	4690      	mov	r8, r2
    148e:	4699      	mov	r9, r3
    1490:	46a2      	mov	sl, r4
    1492:	46ab      	mov	fp, r5
    1494:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    1496:	2112      	movs	r1, #18
    1498:	e7f5      	b.n	1486 <spi_transceive_buffer_wait+0x262>
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	00000c01 	.word	0x00000c01
    14a0:	00002710 	.word	0x00002710

000014a4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    14a4:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    14a6:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    14a8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    14aa:	780a      	ldrb	r2, [r1, #0]
    14ac:	b2d2      	uxtb	r2, r2
    14ae:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    14b0:	1c4c      	adds	r4, r1, #1
    14b2:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14b4:	7986      	ldrb	r6, [r0, #6]
    14b6:	2e01      	cmp	r6, #1
    14b8:	d007      	beq.n	14ca <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    14ba:	05db      	lsls	r3, r3, #23
    14bc:	0ddb      	lsrs	r3, r3, #23
    14be:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    14c0:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    14c2:	3b01      	subs	r3, #1
    14c4:	b29b      	uxth	r3, r3
    14c6:	8683      	strh	r3, [r0, #52]	; 0x34
}
    14c8:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    14ca:	784b      	ldrb	r3, [r1, #1]
    14cc:	021b      	lsls	r3, r3, #8
    14ce:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    14d0:	1c8c      	adds	r4, r1, #2
    14d2:	62c4      	str	r4, [r0, #44]	; 0x2c
    14d4:	e7f1      	b.n	14ba <_spi_write+0x16>
	...

000014d8 <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    14d8:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    14da:	4a04      	ldr	r2, [pc, #16]	; (14ec <_spi_write_dummy+0x14>)
    14dc:	8812      	ldrh	r2, [r2, #0]
    14de:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    14e0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    14e2:	3b01      	subs	r3, #1
    14e4:	b29b      	uxth	r3, r3
    14e6:	8643      	strh	r3, [r0, #50]	; 0x32
}
    14e8:	4770      	bx	lr
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	200000dc 	.word	0x200000dc

000014f0 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    14f0:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    14f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    14f4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    14f6:	3b01      	subs	r3, #1
    14f8:	b29b      	uxth	r3, r3
    14fa:	8643      	strh	r3, [r0, #50]	; 0x32
}
    14fc:	4770      	bx	lr

000014fe <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    14fe:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1502:	05db      	lsls	r3, r3, #23
    1504:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1506:	b2da      	uxtb	r2, r3
    1508:	6a81      	ldr	r1, [r0, #40]	; 0x28
    150a:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    150c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    150e:	1c51      	adds	r1, r2, #1
    1510:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1512:	7981      	ldrb	r1, [r0, #6]
    1514:	2901      	cmp	r1, #1
    1516:	d004      	beq.n	1522 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1518:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    151a:	3b01      	subs	r3, #1
    151c:	b29b      	uxth	r3, r3
    151e:	8603      	strh	r3, [r0, #48]	; 0x30
}
    1520:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1522:	0a1b      	lsrs	r3, r3, #8
    1524:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1526:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1528:	3301      	adds	r3, #1
    152a:	6283      	str	r3, [r0, #40]	; 0x28
    152c:	e7f4      	b.n	1518 <_spi_read+0x1a>
	...

00001530 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1532:	0080      	lsls	r0, r0, #2
    1534:	4b6b      	ldr	r3, [pc, #428]	; (16e4 <_spi_interrupt_handler+0x1b4>)
    1536:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1538:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    153a:	2337      	movs	r3, #55	; 0x37
    153c:	5ce3      	ldrb	r3, [r4, r3]
    153e:	2236      	movs	r2, #54	; 0x36
    1540:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    1542:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1544:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1546:	7db5      	ldrb	r5, [r6, #22]
    1548:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    154a:	07eb      	lsls	r3, r5, #31
    154c:	d516      	bpl.n	157c <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    154e:	7963      	ldrb	r3, [r4, #5]
    1550:	2b01      	cmp	r3, #1
    1552:	d04d      	beq.n	15f0 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1554:	7963      	ldrb	r3, [r4, #5]
		if (0
    1556:	2b01      	cmp	r3, #1
    1558:	d057      	beq.n	160a <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    155a:	2b00      	cmp	r3, #0
    155c:	d10e      	bne.n	157c <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    155e:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1560:	2b00      	cmp	r3, #0
    1562:	d00b      	beq.n	157c <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1564:	0020      	movs	r0, r4
    1566:	4b60      	ldr	r3, [pc, #384]	; (16e8 <_spi_interrupt_handler+0x1b8>)
    1568:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    156a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    156c:	b29b      	uxth	r3, r3
    156e:	2b00      	cmp	r3, #0
    1570:	d104      	bne.n	157c <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1572:	3301      	adds	r3, #1
    1574:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1576:	7a63      	ldrb	r3, [r4, #9]
    1578:	2b01      	cmp	r3, #1
    157a:	d04a      	beq.n	1612 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    157c:	076b      	lsls	r3, r5, #29
    157e:	d511      	bpl.n	15a4 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1580:	8b73      	ldrh	r3, [r6, #26]
    1582:	075b      	lsls	r3, r3, #29
    1584:	d54f      	bpl.n	1626 <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1586:	7a63      	ldrb	r3, [r4, #9]
    1588:	2b01      	cmp	r3, #1
    158a:	d008      	beq.n	159e <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    158c:	221e      	movs	r2, #30
    158e:	2338      	movs	r3, #56	; 0x38
    1590:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1592:	3b35      	subs	r3, #53	; 0x35
    1594:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1596:	3302      	adds	r3, #2
    1598:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    159a:	073b      	lsls	r3, r7, #28
    159c:	d43f      	bmi.n	161e <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    159e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    15a0:	2304      	movs	r3, #4
    15a2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    15a4:	07ab      	lsls	r3, r5, #30
    15a6:	d513      	bpl.n	15d0 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    15a8:	7963      	ldrb	r3, [r4, #5]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d10d      	bne.n	15ca <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    15ae:	3307      	adds	r3, #7
    15b0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    15b2:	3b05      	subs	r3, #5
    15b4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    15b6:	3301      	adds	r3, #1
    15b8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    15ba:	2300      	movs	r3, #0
    15bc:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    15be:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    15c0:	3338      	adds	r3, #56	; 0x38
    15c2:	2200      	movs	r2, #0
    15c4:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    15c6:	06fb      	lsls	r3, r7, #27
    15c8:	d464      	bmi.n	1694 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    15ca:	7963      	ldrb	r3, [r4, #5]
    15cc:	2b01      	cmp	r3, #1
    15ce:	d065      	beq.n	169c <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    15d0:	072b      	lsls	r3, r5, #28
    15d2:	d508      	bpl.n	15e6 <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    15d4:	7963      	ldrb	r3, [r4, #5]
    15d6:	2b00      	cmp	r3, #0
    15d8:	d105      	bne.n	15e6 <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    15da:	3308      	adds	r3, #8
    15dc:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    15de:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    15e0:	06bb      	lsls	r3, r7, #26
    15e2:	d500      	bpl.n	15e6 <_spi_interrupt_handler+0xb6>
    15e4:	e070      	b.n	16c8 <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    15e6:	b26d      	sxtb	r5, r5
    15e8:	2d00      	cmp	r5, #0
    15ea:	da00      	bge.n	15ee <_spi_interrupt_handler+0xbe>
    15ec:	e070      	b.n	16d0 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    15ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    15f0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    15f2:	2b00      	cmp	r3, #0
    15f4:	d1ae      	bne.n	1554 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    15f6:	0020      	movs	r0, r4
    15f8:	4b3c      	ldr	r3, [pc, #240]	; (16ec <_spi_interrupt_handler+0x1bc>)
    15fa:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    15fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    15fe:	b29b      	uxth	r3, r3
    1600:	2b00      	cmp	r3, #0
    1602:	d1a7      	bne.n	1554 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1604:	3301      	adds	r3, #1
    1606:	7533      	strb	r3, [r6, #20]
    1608:	e7a4      	b.n	1554 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    160a:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    160c:	2a00      	cmp	r2, #0
    160e:	d1a9      	bne.n	1564 <_spi_interrupt_handler+0x34>
    1610:	e7a3      	b.n	155a <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    1612:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1614:	2b00      	cmp	r3, #0
    1616:	d1b1      	bne.n	157c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1618:	3302      	adds	r3, #2
    161a:	75b3      	strb	r3, [r6, #22]
    161c:	e7ae      	b.n	157c <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    161e:	0020      	movs	r0, r4
    1620:	69a3      	ldr	r3, [r4, #24]
    1622:	4798      	blx	r3
    1624:	e7bb      	b.n	159e <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1626:	7a63      	ldrb	r3, [r4, #9]
    1628:	2b01      	cmp	r3, #1
    162a:	d017      	beq.n	165c <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    162c:	0020      	movs	r0, r4
    162e:	4b30      	ldr	r3, [pc, #192]	; (16f0 <_spi_interrupt_handler+0x1c0>)
    1630:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    1632:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1634:	b29b      	uxth	r3, r3
    1636:	2b00      	cmp	r3, #0
    1638:	d1b4      	bne.n	15a4 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    163a:	2200      	movs	r2, #0
    163c:	3338      	adds	r3, #56	; 0x38
    163e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1640:	3b34      	subs	r3, #52	; 0x34
    1642:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1644:	7a63      	ldrb	r3, [r4, #9]
    1646:	2b02      	cmp	r3, #2
    1648:	d01d      	beq.n	1686 <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    164a:	7a63      	ldrb	r3, [r4, #9]
    164c:	2b00      	cmp	r3, #0
    164e:	d1a9      	bne.n	15a4 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1650:	07bb      	lsls	r3, r7, #30
    1652:	d5a7      	bpl.n	15a4 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1654:	0020      	movs	r0, r4
    1656:	6923      	ldr	r3, [r4, #16]
    1658:	4798      	blx	r3
    165a:	e7a3      	b.n	15a4 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    165c:	0020      	movs	r0, r4
    165e:	4b25      	ldr	r3, [pc, #148]	; (16f4 <_spi_interrupt_handler+0x1c4>)
    1660:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1662:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1664:	b29b      	uxth	r3, r3
    1666:	2b00      	cmp	r3, #0
    1668:	d19c      	bne.n	15a4 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    166a:	3304      	adds	r3, #4
    166c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    166e:	2200      	movs	r2, #0
    1670:	3334      	adds	r3, #52	; 0x34
    1672:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1674:	3b35      	subs	r3, #53	; 0x35
    1676:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1678:	07fb      	lsls	r3, r7, #31
    167a:	d400      	bmi.n	167e <_spi_interrupt_handler+0x14e>
    167c:	e792      	b.n	15a4 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    167e:	0020      	movs	r0, r4
    1680:	68e3      	ldr	r3, [r4, #12]
    1682:	4798      	blx	r3
    1684:	e78e      	b.n	15a4 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1686:	077b      	lsls	r3, r7, #29
    1688:	d400      	bmi.n	168c <_spi_interrupt_handler+0x15c>
    168a:	e78b      	b.n	15a4 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    168c:	0020      	movs	r0, r4
    168e:	6963      	ldr	r3, [r4, #20]
    1690:	4798      	blx	r3
    1692:	e787      	b.n	15a4 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1694:	0020      	movs	r0, r4
    1696:	69e3      	ldr	r3, [r4, #28]
    1698:	4798      	blx	r3
    169a:	e796      	b.n	15ca <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    169c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    169e:	2b01      	cmp	r3, #1
    16a0:	d000      	beq.n	16a4 <_spi_interrupt_handler+0x174>
    16a2:	e795      	b.n	15d0 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    16a4:	79e3      	ldrb	r3, [r4, #7]
    16a6:	2b00      	cmp	r3, #0
    16a8:	d000      	beq.n	16ac <_spi_interrupt_handler+0x17c>
    16aa:	e791      	b.n	15d0 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    16ac:	3302      	adds	r3, #2
    16ae:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    16b0:	3301      	adds	r3, #1
    16b2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    16b4:	2200      	movs	r2, #0
    16b6:	3335      	adds	r3, #53	; 0x35
    16b8:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    16ba:	07fb      	lsls	r3, r7, #31
    16bc:	d400      	bmi.n	16c0 <_spi_interrupt_handler+0x190>
    16be:	e787      	b.n	15d0 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    16c0:	0020      	movs	r0, r4
    16c2:	68e3      	ldr	r3, [r4, #12]
    16c4:	4798      	blx	r3
    16c6:	e783      	b.n	15d0 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    16c8:	0020      	movs	r0, r4
    16ca:	6a23      	ldr	r3, [r4, #32]
    16cc:	4798      	blx	r3
    16ce:	e78a      	b.n	15e6 <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    16d0:	2380      	movs	r3, #128	; 0x80
    16d2:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    16d4:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    16d6:	067b      	lsls	r3, r7, #25
    16d8:	d400      	bmi.n	16dc <_spi_interrupt_handler+0x1ac>
    16da:	e788      	b.n	15ee <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    16dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    16de:	0020      	movs	r0, r4
    16e0:	4798      	blx	r3
}
    16e2:	e784      	b.n	15ee <_spi_interrupt_handler+0xbe>
    16e4:	200000e0 	.word	0x200000e0
    16e8:	000014a5 	.word	0x000014a5
    16ec:	000014d9 	.word	0x000014d9
    16f0:	000014ff 	.word	0x000014ff
    16f4:	000014f1 	.word	0x000014f1

000016f8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    16f8:	4770      	bx	lr
	...

000016fc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    16fc:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    16fe:	4b0b      	ldr	r3, [pc, #44]	; (172c <_sercom_set_handler+0x30>)
    1700:	781b      	ldrb	r3, [r3, #0]
    1702:	2b00      	cmp	r3, #0
    1704:	d008      	beq.n	1718 <_sercom_set_handler+0x1c>
    1706:	e00c      	b.n	1722 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1708:	009a      	lsls	r2, r3, #2
    170a:	4d09      	ldr	r5, [pc, #36]	; (1730 <_sercom_set_handler+0x34>)
    170c:	4c09      	ldr	r4, [pc, #36]	; (1734 <_sercom_set_handler+0x38>)
    170e:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    1710:	2500      	movs	r5, #0
    1712:	4c09      	ldr	r4, [pc, #36]	; (1738 <_sercom_set_handler+0x3c>)
    1714:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1716:	3301      	adds	r3, #1
    1718:	2b05      	cmp	r3, #5
    171a:	d9f5      	bls.n	1708 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    171c:	2201      	movs	r2, #1
    171e:	4b03      	ldr	r3, [pc, #12]	; (172c <_sercom_set_handler+0x30>)
    1720:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1722:	0080      	lsls	r0, r0, #2
    1724:	4b03      	ldr	r3, [pc, #12]	; (1734 <_sercom_set_handler+0x38>)
    1726:	50c1      	str	r1, [r0, r3]
}
    1728:	bd30      	pop	{r4, r5, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	20000062 	.word	0x20000062
    1730:	000016f9 	.word	0x000016f9
    1734:	20000064 	.word	0x20000064
    1738:	200000e0 	.word	0x200000e0

0000173c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    173c:	b500      	push	{lr}
    173e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1740:	4b05      	ldr	r3, [pc, #20]	; (1758 <_sercom_get_interrupt_vector+0x1c>)
    1742:	681a      	ldr	r2, [r3, #0]
    1744:	9200      	str	r2, [sp, #0]
    1746:	889b      	ldrh	r3, [r3, #4]
    1748:	466a      	mov	r2, sp
    174a:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    174c:	4b03      	ldr	r3, [pc, #12]	; (175c <_sercom_get_interrupt_vector+0x20>)
    174e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1750:	466b      	mov	r3, sp
    1752:	5618      	ldrsb	r0, [r3, r0]
}
    1754:	b003      	add	sp, #12
    1756:	bd00      	pop	{pc}
    1758:	00002250 	.word	0x00002250
    175c:	00000af9 	.word	0x00000af9

00001760 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1760:	b510      	push	{r4, lr}
    1762:	4b02      	ldr	r3, [pc, #8]	; (176c <SERCOM0_Handler+0xc>)
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	2000      	movs	r0, #0
    1768:	4798      	blx	r3
    176a:	bd10      	pop	{r4, pc}
    176c:	20000064 	.word	0x20000064

00001770 <SERCOM1_Handler>:
    1770:	b510      	push	{r4, lr}
    1772:	4b02      	ldr	r3, [pc, #8]	; (177c <SERCOM1_Handler+0xc>)
    1774:	685b      	ldr	r3, [r3, #4]
    1776:	2001      	movs	r0, #1
    1778:	4798      	blx	r3
    177a:	bd10      	pop	{r4, pc}
    177c:	20000064 	.word	0x20000064

00001780 <SERCOM2_Handler>:
    1780:	b510      	push	{r4, lr}
    1782:	4b02      	ldr	r3, [pc, #8]	; (178c <SERCOM2_Handler+0xc>)
    1784:	689b      	ldr	r3, [r3, #8]
    1786:	2002      	movs	r0, #2
    1788:	4798      	blx	r3
    178a:	bd10      	pop	{r4, pc}
    178c:	20000064 	.word	0x20000064

00001790 <SERCOM3_Handler>:
    1790:	b510      	push	{r4, lr}
    1792:	4b02      	ldr	r3, [pc, #8]	; (179c <SERCOM3_Handler+0xc>)
    1794:	68db      	ldr	r3, [r3, #12]
    1796:	2003      	movs	r0, #3
    1798:	4798      	blx	r3
    179a:	bd10      	pop	{r4, pc}
    179c:	20000064 	.word	0x20000064

000017a0 <SERCOM4_Handler>:
    17a0:	b510      	push	{r4, lr}
    17a2:	4b02      	ldr	r3, [pc, #8]	; (17ac <SERCOM4_Handler+0xc>)
    17a4:	691b      	ldr	r3, [r3, #16]
    17a6:	2004      	movs	r0, #4
    17a8:	4798      	blx	r3
    17aa:	bd10      	pop	{r4, pc}
    17ac:	20000064 	.word	0x20000064

000017b0 <SERCOM5_Handler>:
    17b0:	b510      	push	{r4, lr}
    17b2:	4b02      	ldr	r3, [pc, #8]	; (17bc <SERCOM5_Handler+0xc>)
    17b4:	695b      	ldr	r3, [r3, #20]
    17b6:	2005      	movs	r0, #5
    17b8:	4798      	blx	r3
    17ba:	bd10      	pop	{r4, pc}
    17bc:	20000064 	.word	0x20000064

000017c0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    17c0:	4770      	bx	lr
	...

000017c4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    17c4:	4b0c      	ldr	r3, [pc, #48]	; (17f8 <cpu_irq_enter_critical+0x34>)
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	2b00      	cmp	r3, #0
    17ca:	d106      	bne.n	17da <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17cc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    17d0:	2b00      	cmp	r3, #0
    17d2:	d007      	beq.n	17e4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    17d4:	2200      	movs	r2, #0
    17d6:	4b09      	ldr	r3, [pc, #36]	; (17fc <cpu_irq_enter_critical+0x38>)
    17d8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    17da:	4a07      	ldr	r2, [pc, #28]	; (17f8 <cpu_irq_enter_critical+0x34>)
    17dc:	6813      	ldr	r3, [r2, #0]
    17de:	3301      	adds	r3, #1
    17e0:	6013      	str	r3, [r2, #0]
}
    17e2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    17e4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    17e6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    17ea:	2200      	movs	r2, #0
    17ec:	4b04      	ldr	r3, [pc, #16]	; (1800 <cpu_irq_enter_critical+0x3c>)
    17ee:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    17f0:	3201      	adds	r2, #1
    17f2:	4b02      	ldr	r3, [pc, #8]	; (17fc <cpu_irq_enter_critical+0x38>)
    17f4:	701a      	strb	r2, [r3, #0]
    17f6:	e7f0      	b.n	17da <cpu_irq_enter_critical+0x16>
    17f8:	2000007c 	.word	0x2000007c
    17fc:	20000080 	.word	0x20000080
    1800:	20000008 	.word	0x20000008

00001804 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1804:	4b08      	ldr	r3, [pc, #32]	; (1828 <cpu_irq_leave_critical+0x24>)
    1806:	681a      	ldr	r2, [r3, #0]
    1808:	3a01      	subs	r2, #1
    180a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	2b00      	cmp	r3, #0
    1810:	d109      	bne.n	1826 <cpu_irq_leave_critical+0x22>
    1812:	4b06      	ldr	r3, [pc, #24]	; (182c <cpu_irq_leave_critical+0x28>)
    1814:	781b      	ldrb	r3, [r3, #0]
    1816:	2b00      	cmp	r3, #0
    1818:	d005      	beq.n	1826 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    181a:	2201      	movs	r2, #1
    181c:	4b04      	ldr	r3, [pc, #16]	; (1830 <cpu_irq_leave_critical+0x2c>)
    181e:	701a      	strb	r2, [r3, #0]
    1820:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1824:	b662      	cpsie	i
	}
}
    1826:	4770      	bx	lr
    1828:	2000007c 	.word	0x2000007c
    182c:	20000080 	.word	0x20000080
    1830:	20000008 	.word	0x20000008

00001834 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1834:	b510      	push	{r4, lr}
    1836:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1838:	2201      	movs	r2, #1
    183a:	ab01      	add	r3, sp, #4
    183c:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    183e:	2400      	movs	r4, #0
    1840:	e004      	b.n	184c <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1842:	b2e0      	uxtb	r0, r4
    1844:	a901      	add	r1, sp, #4
    1846:	4b03      	ldr	r3, [pc, #12]	; (1854 <_switch_peripheral_gclk+0x20>)
    1848:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    184a:	3401      	adds	r4, #1
    184c:	2c24      	cmp	r4, #36	; 0x24
    184e:	d9f8      	bls.n	1842 <_switch_peripheral_gclk+0xe>
	}
}
    1850:	b002      	add	sp, #8
    1852:	bd10      	pop	{r4, pc}
    1854:	00001cd5 	.word	0x00001cd5

00001858 <system_clock_source_get_hz>:
{
    1858:	b510      	push	{r4, lr}
	switch (clock_source) {
    185a:	2808      	cmp	r0, #8
    185c:	d832      	bhi.n	18c4 <system_clock_source_get_hz+0x6c>
    185e:	0080      	lsls	r0, r0, #2
    1860:	4b1b      	ldr	r3, [pc, #108]	; (18d0 <system_clock_source_get_hz+0x78>)
    1862:	581b      	ldr	r3, [r3, r0]
    1864:	469f      	mov	pc, r3
		return 32768UL;
    1866:	2080      	movs	r0, #128	; 0x80
    1868:	0200      	lsls	r0, r0, #8
}
    186a:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    186c:	4b19      	ldr	r3, [pc, #100]	; (18d4 <system_clock_source_get_hz+0x7c>)
    186e:	6918      	ldr	r0, [r3, #16]
    1870:	e7fb      	b.n	186a <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1872:	4b19      	ldr	r3, [pc, #100]	; (18d8 <system_clock_source_get_hz+0x80>)
    1874:	6a1b      	ldr	r3, [r3, #32]
    1876:	059b      	lsls	r3, r3, #22
    1878:	0f9b      	lsrs	r3, r3, #30
    187a:	4818      	ldr	r0, [pc, #96]	; (18dc <system_clock_source_get_hz+0x84>)
    187c:	40d8      	lsrs	r0, r3
    187e:	e7f4      	b.n	186a <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    1880:	4b14      	ldr	r3, [pc, #80]	; (18d4 <system_clock_source_get_hz+0x7c>)
    1882:	6958      	ldr	r0, [r3, #20]
    1884:	e7f1      	b.n	186a <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1886:	4b13      	ldr	r3, [pc, #76]	; (18d4 <system_clock_source_get_hz+0x7c>)
    1888:	681b      	ldr	r3, [r3, #0]
    188a:	079b      	lsls	r3, r3, #30
    188c:	d51c      	bpl.n	18c8 <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    188e:	4b12      	ldr	r3, [pc, #72]	; (18d8 <system_clock_source_get_hz+0x80>)
    1890:	68db      	ldr	r3, [r3, #12]
    1892:	06db      	lsls	r3, r3, #27
    1894:	d5fb      	bpl.n	188e <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1896:	4b0f      	ldr	r3, [pc, #60]	; (18d4 <system_clock_source_get_hz+0x7c>)
    1898:	681b      	ldr	r3, [r3, #0]
    189a:	075b      	lsls	r3, r3, #29
    189c:	d401      	bmi.n	18a2 <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    189e:	4810      	ldr	r0, [pc, #64]	; (18e0 <system_clock_source_get_hz+0x88>)
    18a0:	e7e3      	b.n	186a <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    18a2:	2000      	movs	r0, #0
    18a4:	4b0f      	ldr	r3, [pc, #60]	; (18e4 <system_clock_source_get_hz+0x8c>)
    18a6:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    18a8:	4b0a      	ldr	r3, [pc, #40]	; (18d4 <system_clock_source_get_hz+0x7c>)
    18aa:	689b      	ldr	r3, [r3, #8]
    18ac:	041b      	lsls	r3, r3, #16
    18ae:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    18b0:	4358      	muls	r0, r3
    18b2:	e7da      	b.n	186a <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    18b4:	2350      	movs	r3, #80	; 0x50
    18b6:	4a08      	ldr	r2, [pc, #32]	; (18d8 <system_clock_source_get_hz+0x80>)
    18b8:	5cd3      	ldrb	r3, [r2, r3]
    18ba:	075b      	lsls	r3, r3, #29
    18bc:	d506      	bpl.n	18cc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    18be:	4b05      	ldr	r3, [pc, #20]	; (18d4 <system_clock_source_get_hz+0x7c>)
    18c0:	68d8      	ldr	r0, [r3, #12]
    18c2:	e7d2      	b.n	186a <system_clock_source_get_hz+0x12>
		return 0;
    18c4:	2000      	movs	r0, #0
    18c6:	e7d0      	b.n	186a <system_clock_source_get_hz+0x12>
			return 0;
    18c8:	2000      	movs	r0, #0
    18ca:	e7ce      	b.n	186a <system_clock_source_get_hz+0x12>
			return 0;
    18cc:	2000      	movs	r0, #0
    18ce:	e7cc      	b.n	186a <system_clock_source_get_hz+0x12>
    18d0:	00002258 	.word	0x00002258
    18d4:	20000084 	.word	0x20000084
    18d8:	40000800 	.word	0x40000800
    18dc:	007a1200 	.word	0x007a1200
    18e0:	02dc6c00 	.word	0x02dc6c00
    18e4:	00001cf1 	.word	0x00001cf1

000018e8 <system_clock_source_osc8m_set_config>:
{
    18e8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    18ea:	4d0c      	ldr	r5, [pc, #48]	; (191c <system_clock_source_osc8m_set_config+0x34>)
    18ec:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    18ee:	7802      	ldrb	r2, [r0, #0]
    18f0:	2103      	movs	r1, #3
    18f2:	400a      	ands	r2, r1
    18f4:	0212      	lsls	r2, r2, #8
    18f6:	490a      	ldr	r1, [pc, #40]	; (1920 <system_clock_source_osc8m_set_config+0x38>)
    18f8:	4031      	ands	r1, r6
    18fa:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    18fc:	7882      	ldrb	r2, [r0, #2]
    18fe:	2401      	movs	r4, #1
    1900:	4022      	ands	r2, r4
    1902:	01d2      	lsls	r2, r2, #7
    1904:	2380      	movs	r3, #128	; 0x80
    1906:	4399      	bics	r1, r3
    1908:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    190a:	7843      	ldrb	r3, [r0, #1]
    190c:	4023      	ands	r3, r4
    190e:	019b      	lsls	r3, r3, #6
    1910:	2140      	movs	r1, #64	; 0x40
    1912:	438a      	bics	r2, r1
    1914:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    1916:	622b      	str	r3, [r5, #32]
}
    1918:	bd70      	pop	{r4, r5, r6, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	40000800 	.word	0x40000800
    1920:	fffffcff 	.word	0xfffffcff

00001924 <system_clock_source_enable>:
	switch (clock_source) {
    1924:	2808      	cmp	r0, #8
    1926:	d84a      	bhi.n	19be <system_clock_source_enable+0x9a>
    1928:	0080      	lsls	r0, r0, #2
    192a:	4b26      	ldr	r3, [pc, #152]	; (19c4 <system_clock_source_enable+0xa0>)
    192c:	581b      	ldr	r3, [r3, r0]
    192e:	469f      	mov	pc, r3
		return STATUS_OK;
    1930:	2000      	movs	r0, #0
}
    1932:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1934:	4a24      	ldr	r2, [pc, #144]	; (19c8 <system_clock_source_enable+0xa4>)
    1936:	6a13      	ldr	r3, [r2, #32]
    1938:	2102      	movs	r1, #2
    193a:	430b      	orrs	r3, r1
    193c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    193e:	2000      	movs	r0, #0
    1940:	e7f7      	b.n	1932 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1942:	4a21      	ldr	r2, [pc, #132]	; (19c8 <system_clock_source_enable+0xa4>)
    1944:	6993      	ldr	r3, [r2, #24]
    1946:	2102      	movs	r1, #2
    1948:	430b      	orrs	r3, r1
    194a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    194c:	2000      	movs	r0, #0
		break;
    194e:	e7f0      	b.n	1932 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1950:	4a1d      	ldr	r2, [pc, #116]	; (19c8 <system_clock_source_enable+0xa4>)
    1952:	8a13      	ldrh	r3, [r2, #16]
    1954:	2102      	movs	r1, #2
    1956:	430b      	orrs	r3, r1
    1958:	b29b      	uxth	r3, r3
    195a:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    195c:	2000      	movs	r0, #0
		break;
    195e:	e7e8      	b.n	1932 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1960:	4a19      	ldr	r2, [pc, #100]	; (19c8 <system_clock_source_enable+0xa4>)
    1962:	8a93      	ldrh	r3, [r2, #20]
    1964:	2102      	movs	r1, #2
    1966:	430b      	orrs	r3, r1
    1968:	b29b      	uxth	r3, r3
    196a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    196c:	2000      	movs	r0, #0
		break;
    196e:	e7e0      	b.n	1932 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1970:	4916      	ldr	r1, [pc, #88]	; (19cc <system_clock_source_enable+0xa8>)
    1972:	680b      	ldr	r3, [r1, #0]
    1974:	2202      	movs	r2, #2
    1976:	4313      	orrs	r3, r2
    1978:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    197a:	4b13      	ldr	r3, [pc, #76]	; (19c8 <system_clock_source_enable+0xa4>)
    197c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    197e:	4b12      	ldr	r3, [pc, #72]	; (19c8 <system_clock_source_enable+0xa4>)
    1980:	68db      	ldr	r3, [r3, #12]
    1982:	06db      	lsls	r3, r3, #27
    1984:	d5fb      	bpl.n	197e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1986:	4a11      	ldr	r2, [pc, #68]	; (19cc <system_clock_source_enable+0xa8>)
    1988:	6891      	ldr	r1, [r2, #8]
    198a:	4b0f      	ldr	r3, [pc, #60]	; (19c8 <system_clock_source_enable+0xa4>)
    198c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    198e:	6852      	ldr	r2, [r2, #4]
    1990:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1992:	2200      	movs	r2, #0
    1994:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1996:	4b0c      	ldr	r3, [pc, #48]	; (19c8 <system_clock_source_enable+0xa4>)
    1998:	68db      	ldr	r3, [r3, #12]
    199a:	06db      	lsls	r3, r3, #27
    199c:	d5fb      	bpl.n	1996 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    199e:	4b0b      	ldr	r3, [pc, #44]	; (19cc <system_clock_source_enable+0xa8>)
    19a0:	681b      	ldr	r3, [r3, #0]
    19a2:	b29b      	uxth	r3, r3
    19a4:	4a08      	ldr	r2, [pc, #32]	; (19c8 <system_clock_source_enable+0xa4>)
    19a6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    19a8:	2000      	movs	r0, #0
    19aa:	e7c2      	b.n	1932 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    19ac:	4906      	ldr	r1, [pc, #24]	; (19c8 <system_clock_source_enable+0xa4>)
    19ae:	2244      	movs	r2, #68	; 0x44
    19b0:	5c8b      	ldrb	r3, [r1, r2]
    19b2:	2002      	movs	r0, #2
    19b4:	4303      	orrs	r3, r0
    19b6:	b2db      	uxtb	r3, r3
    19b8:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    19ba:	2000      	movs	r0, #0
		break;
    19bc:	e7b9      	b.n	1932 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    19be:	2017      	movs	r0, #23
    19c0:	e7b7      	b.n	1932 <system_clock_source_enable+0xe>
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	0000227c 	.word	0x0000227c
    19c8:	40000800 	.word	0x40000800
    19cc:	20000084 	.word	0x20000084

000019d0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    19d0:	b530      	push	{r4, r5, lr}
    19d2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    19d4:	22c2      	movs	r2, #194	; 0xc2
    19d6:	00d2      	lsls	r2, r2, #3
    19d8:	4b15      	ldr	r3, [pc, #84]	; (1a30 <system_clock_init+0x60>)
    19da:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    19dc:	4b15      	ldr	r3, [pc, #84]	; (1a34 <system_clock_init+0x64>)
    19de:	6859      	ldr	r1, [r3, #4]
    19e0:	221e      	movs	r2, #30
    19e2:	4391      	bics	r1, r2
    19e4:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    19e6:	4b14      	ldr	r3, [pc, #80]	; (1a38 <system_clock_init+0x68>)
    19e8:	4798      	blx	r3
	config->run_in_standby  = false;
    19ea:	a803      	add	r0, sp, #12
    19ec:	2400      	movs	r4, #0
    19ee:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    19f0:	2501      	movs	r5, #1
    19f2:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    19f4:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    19f6:	4b11      	ldr	r3, [pc, #68]	; (1a3c <system_clock_init+0x6c>)
    19f8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    19fa:	2006      	movs	r0, #6
    19fc:	4b10      	ldr	r3, [pc, #64]	; (1a40 <system_clock_init+0x70>)
    19fe:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1a00:	4b10      	ldr	r3, [pc, #64]	; (1a44 <system_clock_init+0x74>)
    1a02:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1a04:	4b10      	ldr	r3, [pc, #64]	; (1a48 <system_clock_init+0x78>)
    1a06:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1a08:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1a0a:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1a0c:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1a0e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1a10:	466b      	mov	r3, sp
    1a12:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1a14:	2306      	movs	r3, #6
    1a16:	466a      	mov	r2, sp
    1a18:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1a1a:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1a1c:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a1e:	4669      	mov	r1, sp
    1a20:	2000      	movs	r0, #0
    1a22:	4b0a      	ldr	r3, [pc, #40]	; (1a4c <system_clock_init+0x7c>)
    1a24:	4798      	blx	r3
    1a26:	2000      	movs	r0, #0
    1a28:	4b09      	ldr	r3, [pc, #36]	; (1a50 <system_clock_init+0x80>)
    1a2a:	4798      	blx	r3
#endif
}
    1a2c:	b005      	add	sp, #20
    1a2e:	bd30      	pop	{r4, r5, pc}
    1a30:	40000800 	.word	0x40000800
    1a34:	41004000 	.word	0x41004000
    1a38:	00001835 	.word	0x00001835
    1a3c:	000018e9 	.word	0x000018e9
    1a40:	00001925 	.word	0x00001925
    1a44:	00001a55 	.word	0x00001a55
    1a48:	40000400 	.word	0x40000400
    1a4c:	00001a79 	.word	0x00001a79
    1a50:	00001b49 	.word	0x00001b49

00001a54 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1a54:	4a06      	ldr	r2, [pc, #24]	; (1a70 <system_gclk_init+0x1c>)
    1a56:	6993      	ldr	r3, [r2, #24]
    1a58:	2108      	movs	r1, #8
    1a5a:	430b      	orrs	r3, r1
    1a5c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a5e:	2201      	movs	r2, #1
    1a60:	4b04      	ldr	r3, [pc, #16]	; (1a74 <system_gclk_init+0x20>)
    1a62:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a64:	4b03      	ldr	r3, [pc, #12]	; (1a74 <system_gclk_init+0x20>)
    1a66:	781b      	ldrb	r3, [r3, #0]
    1a68:	07db      	lsls	r3, r3, #31
    1a6a:	d4fb      	bmi.n	1a64 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1a6c:	4770      	bx	lr
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	40000400 	.word	0x40000400
    1a74:	40000c00 	.word	0x40000c00

00001a78 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a7a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a7c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a7e:	780c      	ldrb	r4, [r1, #0]
    1a80:	0224      	lsls	r4, r4, #8
    1a82:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a84:	784b      	ldrb	r3, [r1, #1]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d002      	beq.n	1a90 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a8a:	2380      	movs	r3, #128	; 0x80
    1a8c:	02db      	lsls	r3, r3, #11
    1a8e:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a90:	7a4b      	ldrb	r3, [r1, #9]
    1a92:	2b00      	cmp	r3, #0
    1a94:	d002      	beq.n	1a9c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a96:	2380      	movs	r3, #128	; 0x80
    1a98:	031b      	lsls	r3, r3, #12
    1a9a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a9c:	6848      	ldr	r0, [r1, #4]
    1a9e:	2801      	cmp	r0, #1
    1aa0:	d912      	bls.n	1ac8 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1aa2:	1e43      	subs	r3, r0, #1
    1aa4:	4203      	tst	r3, r0
    1aa6:	d03d      	beq.n	1b24 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1aa8:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    1aaa:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1aac:	2380      	movs	r3, #128	; 0x80
    1aae:	029b      	lsls	r3, r3, #10
    1ab0:	431c      	orrs	r4, r3
    1ab2:	e009      	b.n	1ac8 <system_gclk_gen_set_config+0x50>
				div2_count++;
    1ab4:	3201      	adds	r2, #1
						mask <<= 1) {
    1ab6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1ab8:	4283      	cmp	r3, r0
    1aba:	d3fb      	bcc.n	1ab4 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1abc:	0212      	lsls	r2, r2, #8
    1abe:	4332      	orrs	r2, r6
    1ac0:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1ac2:	2380      	movs	r3, #128	; 0x80
    1ac4:	035b      	lsls	r3, r3, #13
    1ac6:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ac8:	7a0b      	ldrb	r3, [r1, #8]
    1aca:	2b00      	cmp	r3, #0
    1acc:	d002      	beq.n	1ad4 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ace:	2380      	movs	r3, #128	; 0x80
    1ad0:	039b      	lsls	r3, r3, #14
    1ad2:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ad4:	4b18      	ldr	r3, [pc, #96]	; (1b38 <system_gclk_gen_set_config+0xc0>)
    1ad6:	785b      	ldrb	r3, [r3, #1]
    1ad8:	b25b      	sxtb	r3, r3
    1ada:	2b00      	cmp	r3, #0
    1adc:	db25      	blt.n	1b2a <system_gclk_gen_set_config+0xb2>
	return false;
    1ade:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    1ae0:	2f00      	cmp	r7, #0
    1ae2:	d1f7      	bne.n	1ad4 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1ae4:	4b15      	ldr	r3, [pc, #84]	; (1b3c <system_gclk_gen_set_config+0xc4>)
    1ae6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ae8:	4b15      	ldr	r3, [pc, #84]	; (1b40 <system_gclk_gen_set_config+0xc8>)
    1aea:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aec:	4b12      	ldr	r3, [pc, #72]	; (1b38 <system_gclk_gen_set_config+0xc0>)
    1aee:	785b      	ldrb	r3, [r3, #1]
    1af0:	b25b      	sxtb	r3, r3
    1af2:	2b00      	cmp	r3, #0
    1af4:	db1b      	blt.n	1b2e <system_gclk_gen_set_config+0xb6>
	return false;
    1af6:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1af8:	2a00      	cmp	r2, #0
    1afa:	d1f7      	bne.n	1aec <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1afc:	4b0e      	ldr	r3, [pc, #56]	; (1b38 <system_gclk_gen_set_config+0xc0>)
    1afe:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b00:	4b0d      	ldr	r3, [pc, #52]	; (1b38 <system_gclk_gen_set_config+0xc0>)
    1b02:	785b      	ldrb	r3, [r3, #1]
    1b04:	b25b      	sxtb	r3, r3
    1b06:	2b00      	cmp	r3, #0
    1b08:	db13      	blt.n	1b32 <system_gclk_gen_set_config+0xba>
	return false;
    1b0a:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d1f7      	bne.n	1b00 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1b10:	4a09      	ldr	r2, [pc, #36]	; (1b38 <system_gclk_gen_set_config+0xc0>)
    1b12:	6853      	ldr	r3, [r2, #4]
    1b14:	2180      	movs	r1, #128	; 0x80
    1b16:	0249      	lsls	r1, r1, #9
    1b18:	400b      	ands	r3, r1
    1b1a:	431c      	orrs	r4, r3
    1b1c:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    1b1e:	4b09      	ldr	r3, [pc, #36]	; (1b44 <system_gclk_gen_set_config+0xcc>)
    1b20:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b24:	2302      	movs	r3, #2
    1b26:	2200      	movs	r2, #0
    1b28:	e7c6      	b.n	1ab8 <system_gclk_gen_set_config+0x40>
		return true;
    1b2a:	2701      	movs	r7, #1
    1b2c:	e7d8      	b.n	1ae0 <system_gclk_gen_set_config+0x68>
    1b2e:	2201      	movs	r2, #1
    1b30:	e7e2      	b.n	1af8 <system_gclk_gen_set_config+0x80>
    1b32:	2301      	movs	r3, #1
    1b34:	e7ea      	b.n	1b0c <system_gclk_gen_set_config+0x94>
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	40000c00 	.word	0x40000c00
    1b3c:	000017c5 	.word	0x000017c5
    1b40:	40000c08 	.word	0x40000c08
    1b44:	00001805 	.word	0x00001805

00001b48 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b48:	b570      	push	{r4, r5, r6, lr}
    1b4a:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b4c:	4b10      	ldr	r3, [pc, #64]	; (1b90 <system_gclk_gen_enable+0x48>)
    1b4e:	785b      	ldrb	r3, [r3, #1]
    1b50:	b25b      	sxtb	r3, r3
    1b52:	2b00      	cmp	r3, #0
    1b54:	db17      	blt.n	1b86 <system_gclk_gen_enable+0x3e>
	return false;
    1b56:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    1b58:	2c00      	cmp	r4, #0
    1b5a:	d1f7      	bne.n	1b4c <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1b5c:	4b0d      	ldr	r3, [pc, #52]	; (1b94 <system_gclk_gen_enable+0x4c>)
    1b5e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b60:	4b0d      	ldr	r3, [pc, #52]	; (1b98 <system_gclk_gen_enable+0x50>)
    1b62:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b64:	4b0a      	ldr	r3, [pc, #40]	; (1b90 <system_gclk_gen_enable+0x48>)
    1b66:	785b      	ldrb	r3, [r3, #1]
    1b68:	b25b      	sxtb	r3, r3
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	db0d      	blt.n	1b8a <system_gclk_gen_enable+0x42>
	return false;
    1b6e:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1b70:	2b00      	cmp	r3, #0
    1b72:	d1f7      	bne.n	1b64 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b74:	4a06      	ldr	r2, [pc, #24]	; (1b90 <system_gclk_gen_enable+0x48>)
    1b76:	6851      	ldr	r1, [r2, #4]
    1b78:	2380      	movs	r3, #128	; 0x80
    1b7a:	025b      	lsls	r3, r3, #9
    1b7c:	430b      	orrs	r3, r1
    1b7e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1b80:	4b06      	ldr	r3, [pc, #24]	; (1b9c <system_gclk_gen_enable+0x54>)
    1b82:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b84:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    1b86:	2401      	movs	r4, #1
    1b88:	e7e6      	b.n	1b58 <system_gclk_gen_enable+0x10>
    1b8a:	2301      	movs	r3, #1
    1b8c:	e7f0      	b.n	1b70 <system_gclk_gen_enable+0x28>
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	40000c00 	.word	0x40000c00
    1b94:	000017c5 	.word	0x000017c5
    1b98:	40000c04 	.word	0x40000c04
    1b9c:	00001805 	.word	0x00001805

00001ba0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ba2:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ba4:	4b22      	ldr	r3, [pc, #136]	; (1c30 <system_gclk_gen_get_hz+0x90>)
    1ba6:	785b      	ldrb	r3, [r3, #1]
    1ba8:	b25b      	sxtb	r3, r3
    1baa:	2b00      	cmp	r3, #0
    1bac:	db34      	blt.n	1c18 <system_gclk_gen_get_hz+0x78>
	return false;
    1bae:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1bb0:	2d00      	cmp	r5, #0
    1bb2:	d1f7      	bne.n	1ba4 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1bb4:	4b1f      	ldr	r3, [pc, #124]	; (1c34 <system_gclk_gen_get_hz+0x94>)
    1bb6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1bb8:	4b1f      	ldr	r3, [pc, #124]	; (1c38 <system_gclk_gen_get_hz+0x98>)
    1bba:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bbc:	4b1c      	ldr	r3, [pc, #112]	; (1c30 <system_gclk_gen_get_hz+0x90>)
    1bbe:	785b      	ldrb	r3, [r3, #1]
    1bc0:	b25b      	sxtb	r3, r3
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	db2a      	blt.n	1c1c <system_gclk_gen_get_hz+0x7c>
	return false;
    1bc6:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1bc8:	2c00      	cmp	r4, #0
    1bca:	d1f7      	bne.n	1bbc <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1bcc:	4e18      	ldr	r6, [pc, #96]	; (1c30 <system_gclk_gen_get_hz+0x90>)
    1bce:	6870      	ldr	r0, [r6, #4]
    1bd0:	04c0      	lsls	r0, r0, #19
    1bd2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1bd4:	4b19      	ldr	r3, [pc, #100]	; (1c3c <system_gclk_gen_get_hz+0x9c>)
    1bd6:	4798      	blx	r3
    1bd8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1bda:	4b17      	ldr	r3, [pc, #92]	; (1c38 <system_gclk_gen_get_hz+0x98>)
    1bdc:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1bde:	6876      	ldr	r6, [r6, #4]
    1be0:	02f6      	lsls	r6, r6, #11
    1be2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1be4:	4b16      	ldr	r3, [pc, #88]	; (1c40 <system_gclk_gen_get_hz+0xa0>)
    1be6:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1be8:	4b11      	ldr	r3, [pc, #68]	; (1c30 <system_gclk_gen_get_hz+0x90>)
    1bea:	785b      	ldrb	r3, [r3, #1]
    1bec:	b25b      	sxtb	r3, r3
    1bee:	2b00      	cmp	r3, #0
    1bf0:	db16      	blt.n	1c20 <system_gclk_gen_get_hz+0x80>
	return false;
    1bf2:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d1f7      	bne.n	1be8 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1bf8:	4b0d      	ldr	r3, [pc, #52]	; (1c30 <system_gclk_gen_get_hz+0x90>)
    1bfa:	689c      	ldr	r4, [r3, #8]
    1bfc:	0224      	lsls	r4, r4, #8
    1bfe:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1c00:	4b10      	ldr	r3, [pc, #64]	; (1c44 <system_gclk_gen_get_hz+0xa4>)
    1c02:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1c04:	2e00      	cmp	r6, #0
    1c06:	d10d      	bne.n	1c24 <system_gclk_gen_get_hz+0x84>
    1c08:	2c01      	cmp	r4, #1
    1c0a:	d90b      	bls.n	1c24 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    1c0c:	0021      	movs	r1, r4
    1c0e:	0028      	movs	r0, r5
    1c10:	4b0d      	ldr	r3, [pc, #52]	; (1c48 <system_gclk_gen_get_hz+0xa8>)
    1c12:	4798      	blx	r3
    1c14:	0005      	movs	r5, r0
    1c16:	e009      	b.n	1c2c <system_gclk_gen_get_hz+0x8c>
		return true;
    1c18:	2501      	movs	r5, #1
    1c1a:	e7c9      	b.n	1bb0 <system_gclk_gen_get_hz+0x10>
    1c1c:	2401      	movs	r4, #1
    1c1e:	e7d3      	b.n	1bc8 <system_gclk_gen_get_hz+0x28>
    1c20:	2301      	movs	r3, #1
    1c22:	e7e7      	b.n	1bf4 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    1c24:	2e00      	cmp	r6, #0
    1c26:	d001      	beq.n	1c2c <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    1c28:	3401      	adds	r4, #1
    1c2a:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1c2c:	0028      	movs	r0, r5
    1c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c30:	40000c00 	.word	0x40000c00
    1c34:	000017c5 	.word	0x000017c5
    1c38:	40000c04 	.word	0x40000c04
    1c3c:	00001859 	.word	0x00001859
    1c40:	40000c08 	.word	0x40000c08
    1c44:	00001805 	.word	0x00001805
    1c48:	000020b5 	.word	0x000020b5

00001c4c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1c4c:	b510      	push	{r4, lr}
    1c4e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c50:	4b06      	ldr	r3, [pc, #24]	; (1c6c <system_gclk_chan_enable+0x20>)
    1c52:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c54:	4b06      	ldr	r3, [pc, #24]	; (1c70 <system_gclk_chan_enable+0x24>)
    1c56:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c58:	4a06      	ldr	r2, [pc, #24]	; (1c74 <system_gclk_chan_enable+0x28>)
    1c5a:	8853      	ldrh	r3, [r2, #2]
    1c5c:	2180      	movs	r1, #128	; 0x80
    1c5e:	01c9      	lsls	r1, r1, #7
    1c60:	430b      	orrs	r3, r1
    1c62:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1c64:	4b04      	ldr	r3, [pc, #16]	; (1c78 <system_gclk_chan_enable+0x2c>)
    1c66:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c68:	bd10      	pop	{r4, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	000017c5 	.word	0x000017c5
    1c70:	40000c02 	.word	0x40000c02
    1c74:	40000c00 	.word	0x40000c00
    1c78:	00001805 	.word	0x00001805

00001c7c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c7c:	b510      	push	{r4, lr}
    1c7e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c80:	4b0e      	ldr	r3, [pc, #56]	; (1cbc <system_gclk_chan_disable+0x40>)
    1c82:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c84:	4b0e      	ldr	r3, [pc, #56]	; (1cc0 <system_gclk_chan_disable+0x44>)
    1c86:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c88:	490e      	ldr	r1, [pc, #56]	; (1cc4 <system_gclk_chan_disable+0x48>)
    1c8a:	884b      	ldrh	r3, [r1, #2]
    1c8c:	051b      	lsls	r3, r3, #20
    1c8e:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1c90:	884b      	ldrh	r3, [r1, #2]
    1c92:	480d      	ldr	r0, [pc, #52]	; (1cc8 <system_gclk_chan_disable+0x4c>)
    1c94:	4003      	ands	r3, r0
    1c96:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c98:	884b      	ldrh	r3, [r1, #2]
    1c9a:	480c      	ldr	r0, [pc, #48]	; (1ccc <system_gclk_chan_disable+0x50>)
    1c9c:	4003      	ands	r3, r0
    1c9e:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1ca0:	4b08      	ldr	r3, [pc, #32]	; (1cc4 <system_gclk_chan_disable+0x48>)
    1ca2:	885b      	ldrh	r3, [r3, #2]
    1ca4:	045b      	lsls	r3, r3, #17
    1ca6:	d4fb      	bmi.n	1ca0 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ca8:	4806      	ldr	r0, [pc, #24]	; (1cc4 <system_gclk_chan_disable+0x48>)
    1caa:	8841      	ldrh	r1, [r0, #2]
    1cac:	0213      	lsls	r3, r2, #8
    1cae:	4a06      	ldr	r2, [pc, #24]	; (1cc8 <system_gclk_chan_disable+0x4c>)
    1cb0:	400a      	ands	r2, r1
    1cb2:	4313      	orrs	r3, r2
    1cb4:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    1cb6:	4b06      	ldr	r3, [pc, #24]	; (1cd0 <system_gclk_chan_disable+0x54>)
    1cb8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cba:	bd10      	pop	{r4, pc}
    1cbc:	000017c5 	.word	0x000017c5
    1cc0:	40000c02 	.word	0x40000c02
    1cc4:	40000c00 	.word	0x40000c00
    1cc8:	fffff0ff 	.word	0xfffff0ff
    1ccc:	ffffbfff 	.word	0xffffbfff
    1cd0:	00001805 	.word	0x00001805

00001cd4 <system_gclk_chan_set_config>:
{
    1cd4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1cd6:	780c      	ldrb	r4, [r1, #0]
    1cd8:	0224      	lsls	r4, r4, #8
    1cda:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1cdc:	4b02      	ldr	r3, [pc, #8]	; (1ce8 <system_gclk_chan_set_config+0x14>)
    1cde:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1ce0:	b2a4      	uxth	r4, r4
    1ce2:	4b02      	ldr	r3, [pc, #8]	; (1cec <system_gclk_chan_set_config+0x18>)
    1ce4:	805c      	strh	r4, [r3, #2]
}
    1ce6:	bd10      	pop	{r4, pc}
    1ce8:	00001c7d 	.word	0x00001c7d
    1cec:	40000c00 	.word	0x40000c00

00001cf0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1cf0:	b510      	push	{r4, lr}
    1cf2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1cf4:	4b06      	ldr	r3, [pc, #24]	; (1d10 <system_gclk_chan_get_hz+0x20>)
    1cf6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1cf8:	4b06      	ldr	r3, [pc, #24]	; (1d14 <system_gclk_chan_get_hz+0x24>)
    1cfa:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1cfc:	4b06      	ldr	r3, [pc, #24]	; (1d18 <system_gclk_chan_get_hz+0x28>)
    1cfe:	885c      	ldrh	r4, [r3, #2]
    1d00:	0524      	lsls	r4, r4, #20
    1d02:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1d04:	4b05      	ldr	r3, [pc, #20]	; (1d1c <system_gclk_chan_get_hz+0x2c>)
    1d06:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d08:	0020      	movs	r0, r4
    1d0a:	4b05      	ldr	r3, [pc, #20]	; (1d20 <system_gclk_chan_get_hz+0x30>)
    1d0c:	4798      	blx	r3
}
    1d0e:	bd10      	pop	{r4, pc}
    1d10:	000017c5 	.word	0x000017c5
    1d14:	40000c02 	.word	0x40000c02
    1d18:	40000c00 	.word	0x40000c00
    1d1c:	00001805 	.word	0x00001805
    1d20:	00001ba1 	.word	0x00001ba1

00001d24 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d24:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d26:	78d3      	ldrb	r3, [r2, #3]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d120      	bne.n	1d6e <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d2c:	7815      	ldrb	r5, [r2, #0]
    1d2e:	2d80      	cmp	r5, #128	; 0x80
    1d30:	d01b      	beq.n	1d6a <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d32:	062d      	lsls	r5, r5, #24
    1d34:	2380      	movs	r3, #128	; 0x80
    1d36:	025b      	lsls	r3, r3, #9
    1d38:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d3a:	7853      	ldrb	r3, [r2, #1]
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d001      	beq.n	1d44 <_system_pinmux_config+0x20>
    1d40:	2b02      	cmp	r3, #2
    1d42:	d10a      	bne.n	1d5a <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d44:	2380      	movs	r3, #128	; 0x80
    1d46:	029b      	lsls	r3, r3, #10
    1d48:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d4a:	7894      	ldrb	r4, [r2, #2]
    1d4c:	2c00      	cmp	r4, #0
    1d4e:	d002      	beq.n	1d56 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d50:	23c0      	movs	r3, #192	; 0xc0
    1d52:	02db      	lsls	r3, r3, #11
    1d54:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d56:	6041      	str	r1, [r0, #4]
    1d58:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d5a:	7853      	ldrb	r3, [r2, #1]
    1d5c:	3b01      	subs	r3, #1
    1d5e:	b2db      	uxtb	r3, r3
    1d60:	2b01      	cmp	r3, #1
    1d62:	d806      	bhi.n	1d72 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d64:	4b13      	ldr	r3, [pc, #76]	; (1db4 <_system_pinmux_config+0x90>)
    1d66:	401d      	ands	r5, r3
    1d68:	e003      	b.n	1d72 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    1d6a:	2500      	movs	r5, #0
    1d6c:	e7e5      	b.n	1d3a <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1d6e:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1d70:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d72:	040c      	lsls	r4, r1, #16
    1d74:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d76:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d78:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d7a:	26a0      	movs	r6, #160	; 0xa0
    1d7c:	05f6      	lsls	r6, r6, #23
    1d7e:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d80:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d82:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d84:	24d0      	movs	r4, #208	; 0xd0
    1d86:	0624      	lsls	r4, r4, #24
    1d88:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d8a:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d8c:	78d3      	ldrb	r3, [r2, #3]
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d10a      	bne.n	1da8 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d92:	036b      	lsls	r3, r5, #13
    1d94:	d503      	bpl.n	1d9e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d96:	7893      	ldrb	r3, [r2, #2]
    1d98:	2b01      	cmp	r3, #1
    1d9a:	d006      	beq.n	1daa <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1d9c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d9e:	7853      	ldrb	r3, [r2, #1]
    1da0:	3b01      	subs	r3, #1
    1da2:	b2db      	uxtb	r3, r3
    1da4:	2b01      	cmp	r3, #1
    1da6:	d902      	bls.n	1dae <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1da8:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    1daa:	6181      	str	r1, [r0, #24]
    1dac:	e7f7      	b.n	1d9e <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    1dae:	6081      	str	r1, [r0, #8]
}
    1db0:	e7fa      	b.n	1da8 <_system_pinmux_config+0x84>
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	fffbffff 	.word	0xfffbffff

00001db8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1db8:	b510      	push	{r4, lr}
    1dba:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    1dbc:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    1dbe:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    1dc0:	2900      	cmp	r1, #0
    1dc2:	d10b      	bne.n	1ddc <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    1dc4:	01db      	lsls	r3, r3, #7
    1dc6:	4906      	ldr	r1, [pc, #24]	; (1de0 <system_pinmux_pin_set_config+0x28>)
    1dc8:	468c      	mov	ip, r1
    1dca:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1dcc:	241f      	movs	r4, #31
    1dce:	4020      	ands	r0, r4
    1dd0:	2101      	movs	r1, #1
    1dd2:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1dd4:	0018      	movs	r0, r3
    1dd6:	4b03      	ldr	r3, [pc, #12]	; (1de4 <system_pinmux_pin_set_config+0x2c>)
    1dd8:	4798      	blx	r3
}
    1dda:	bd10      	pop	{r4, pc}
		return NULL;
    1ddc:	2300      	movs	r3, #0
    1dde:	e7f5      	b.n	1dcc <system_pinmux_pin_set_config+0x14>
    1de0:	41004400 	.word	0x41004400
    1de4:	00001d25 	.word	0x00001d25

00001de8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1de8:	4770      	bx	lr
	...

00001dec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1dec:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1dee:	4b05      	ldr	r3, [pc, #20]	; (1e04 <system_init+0x18>)
    1df0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1df2:	4b05      	ldr	r3, [pc, #20]	; (1e08 <system_init+0x1c>)
    1df4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1df6:	4b05      	ldr	r3, [pc, #20]	; (1e0c <system_init+0x20>)
    1df8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1dfa:	4b05      	ldr	r3, [pc, #20]	; (1e10 <system_init+0x24>)
    1dfc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1dfe:	4b05      	ldr	r3, [pc, #20]	; (1e14 <system_init+0x28>)
    1e00:	4798      	blx	r3
}
    1e02:	bd10      	pop	{r4, pc}
    1e04:	000019d1 	.word	0x000019d1
    1e08:	000017c1 	.word	0x000017c1
    1e0c:	00001de9 	.word	0x00001de9
    1e10:	00001de9 	.word	0x00001de9
    1e14:	00001de9 	.word	0x00001de9

00001e18 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1e18:	e7fe      	b.n	1e18 <Dummy_Handler>
	...

00001e1c <Reset_Handler>:
{
    1e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1e1e:	4a23      	ldr	r2, [pc, #140]	; (1eac <Reset_Handler+0x90>)
    1e20:	4b23      	ldr	r3, [pc, #140]	; (1eb0 <Reset_Handler+0x94>)
    1e22:	429a      	cmp	r2, r3
    1e24:	d009      	beq.n	1e3a <Reset_Handler+0x1e>
    1e26:	4b22      	ldr	r3, [pc, #136]	; (1eb0 <Reset_Handler+0x94>)
    1e28:	4a20      	ldr	r2, [pc, #128]	; (1eac <Reset_Handler+0x90>)
    1e2a:	e003      	b.n	1e34 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    1e2c:	6811      	ldr	r1, [r2, #0]
    1e2e:	6019      	str	r1, [r3, #0]
    1e30:	3304      	adds	r3, #4
    1e32:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1e34:	491f      	ldr	r1, [pc, #124]	; (1eb4 <Reset_Handler+0x98>)
    1e36:	428b      	cmp	r3, r1
    1e38:	d3f8      	bcc.n	1e2c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    1e3a:	4b1f      	ldr	r3, [pc, #124]	; (1eb8 <Reset_Handler+0x9c>)
    1e3c:	e002      	b.n	1e44 <Reset_Handler+0x28>
                *pDest++ = 0;
    1e3e:	2200      	movs	r2, #0
    1e40:	601a      	str	r2, [r3, #0]
    1e42:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1e44:	4a1d      	ldr	r2, [pc, #116]	; (1ebc <Reset_Handler+0xa0>)
    1e46:	4293      	cmp	r3, r2
    1e48:	d3f9      	bcc.n	1e3e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1e4a:	4a1d      	ldr	r2, [pc, #116]	; (1ec0 <Reset_Handler+0xa4>)
    1e4c:	21ff      	movs	r1, #255	; 0xff
    1e4e:	4b1d      	ldr	r3, [pc, #116]	; (1ec4 <Reset_Handler+0xa8>)
    1e50:	438b      	bics	r3, r1
    1e52:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e54:	39fd      	subs	r1, #253	; 0xfd
    1e56:	2390      	movs	r3, #144	; 0x90
    1e58:	005b      	lsls	r3, r3, #1
    1e5a:	4a1b      	ldr	r2, [pc, #108]	; (1ec8 <Reset_Handler+0xac>)
    1e5c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1e5e:	4a1b      	ldr	r2, [pc, #108]	; (1ecc <Reset_Handler+0xb0>)
    1e60:	78d3      	ldrb	r3, [r2, #3]
    1e62:	2503      	movs	r5, #3
    1e64:	43ab      	bics	r3, r5
    1e66:	2402      	movs	r4, #2
    1e68:	4323      	orrs	r3, r4
    1e6a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e6c:	78d3      	ldrb	r3, [r2, #3]
    1e6e:	270c      	movs	r7, #12
    1e70:	43bb      	bics	r3, r7
    1e72:	2608      	movs	r6, #8
    1e74:	4333      	orrs	r3, r6
    1e76:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e78:	4b15      	ldr	r3, [pc, #84]	; (1ed0 <Reset_Handler+0xb4>)
    1e7a:	7b98      	ldrb	r0, [r3, #14]
    1e7c:	2230      	movs	r2, #48	; 0x30
    1e7e:	4390      	bics	r0, r2
    1e80:	2220      	movs	r2, #32
    1e82:	4310      	orrs	r0, r2
    1e84:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e86:	7b99      	ldrb	r1, [r3, #14]
    1e88:	43b9      	bics	r1, r7
    1e8a:	4331      	orrs	r1, r6
    1e8c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e8e:	7b9a      	ldrb	r2, [r3, #14]
    1e90:	43aa      	bics	r2, r5
    1e92:	4322      	orrs	r2, r4
    1e94:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e96:	4a0f      	ldr	r2, [pc, #60]	; (1ed4 <Reset_Handler+0xb8>)
    1e98:	6851      	ldr	r1, [r2, #4]
    1e9a:	2380      	movs	r3, #128	; 0x80
    1e9c:	430b      	orrs	r3, r1
    1e9e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1ea0:	4b0d      	ldr	r3, [pc, #52]	; (1ed8 <Reset_Handler+0xbc>)
    1ea2:	4798      	blx	r3
        main();
    1ea4:	4b0d      	ldr	r3, [pc, #52]	; (1edc <Reset_Handler+0xc0>)
    1ea6:	4798      	blx	r3
    1ea8:	e7fe      	b.n	1ea8 <Reset_Handler+0x8c>
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	000022c4 	.word	0x000022c4
    1eb0:	20000000 	.word	0x20000000
    1eb4:	2000000c 	.word	0x2000000c
    1eb8:	2000000c 	.word	0x2000000c
    1ebc:	200000f8 	.word	0x200000f8
    1ec0:	e000ed00 	.word	0xe000ed00
    1ec4:	00000000 	.word	0x00000000
    1ec8:	41007000 	.word	0x41007000
    1ecc:	41005000 	.word	0x41005000
    1ed0:	41004800 	.word	0x41004800
    1ed4:	41004000 	.word	0x41004000
    1ed8:	000021cd 	.word	0x000021cd
    1edc:	00002039 	.word	0x00002039

00001ee0 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ee2:	46ce      	mov	lr, r9
    1ee4:	4647      	mov	r7, r8
    1ee6:	b580      	push	{r7, lr}
    1ee8:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1eea:	ac01      	add	r4, sp, #4
    1eec:	2300      	movs	r3, #0
    1eee:	4698      	mov	r8, r3
    1ef0:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1ef2:	2601      	movs	r6, #1
    1ef4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1ef6:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1ef8:	0021      	movs	r1, r4
    1efa:	200b      	movs	r0, #11
    1efc:	4d25      	ldr	r5, [pc, #148]	; (1f94 <conf_port_pin+0xb4>)
    1efe:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1f00:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    1f02:	0021      	movs	r1, r4
    1f04:	200a      	movs	r0, #10
    1f06:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1f08:	4f23      	ldr	r7, [pc, #140]	; (1f98 <conf_port_pin+0xb8>)
    1f0a:	2380      	movs	r3, #128	; 0x80
    1f0c:	00db      	lsls	r3, r3, #3
    1f0e:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    1f10:	0021      	movs	r1, r4
    1f12:	2005      	movs	r0, #5
    1f14:	47a8      	blx	r5
    1f16:	2320      	movs	r3, #32
    1f18:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    1f1a:	0021      	movs	r1, r4
    1f1c:	2006      	movs	r0, #6
    1f1e:	47a8      	blx	r5
    1f20:	2340      	movs	r3, #64	; 0x40
    1f22:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    1f24:	0021      	movs	r1, r4
    1f26:	2007      	movs	r0, #7
    1f28:	47a8      	blx	r5
    1f2a:	2380      	movs	r3, #128	; 0x80
    1f2c:	4699      	mov	r9, r3
    1f2e:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1f30:	4643      	mov	r3, r8
    1f32:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1f34:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    1f36:	0021      	movs	r1, r4
    1f38:	200f      	movs	r0, #15
    1f3a:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1f3c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    1f3e:	0021      	movs	r1, r4
    1f40:	200e      	movs	r0, #14
    1f42:	47a8      	blx	r5
    1f44:	2380      	movs	r3, #128	; 0x80
    1f46:	01db      	lsls	r3, r3, #7
    1f48:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1f4a:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1f4c:	2302      	movs	r3, #2
    1f4e:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1f50:	0021      	movs	r1, r4
    1f52:	202f      	movs	r0, #47	; 0x2f
    1f54:	47a8      	blx	r5
    1f56:	003b      	movs	r3, r7
    1f58:	444b      	add	r3, r9
    1f5a:	2280      	movs	r2, #128	; 0x80
    1f5c:	0212      	lsls	r2, r2, #8
    1f5e:	619a      	str	r2, [r3, #24]
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1f60:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1f62:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    1f64:	0021      	movs	r1, r4
    1f66:	2011      	movs	r0, #17
    1f68:	47a8      	blx	r5
    1f6a:	2380      	movs	r3, #128	; 0x80
    1f6c:	029b      	lsls	r3, r3, #10
    1f6e:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1f70:	4643      	mov	r3, r8
    1f72:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    1f74:	0021      	movs	r1, r4
    1f76:	2030      	movs	r0, #48	; 0x30
    1f78:	47a8      	blx	r5
	
	
	/**************config pin for 27*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1f7a:	7026      	strb	r6, [r4, #0]
	//config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS27, &config_port_pin);
    1f7c:	0021      	movs	r1, r4
    1f7e:	2017      	movs	r0, #23
    1f80:	47a8      	blx	r5
    1f82:	2380      	movs	r3, #128	; 0x80
    1f84:	041b      	lsls	r3, r3, #16
    1f86:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(SS27, true);	
} // end conf_port_pin(void)
    1f88:	b003      	add	sp, #12
    1f8a:	bc0c      	pop	{r2, r3}
    1f8c:	4690      	mov	r8, r2
    1f8e:	4699      	mov	r9, r3
    1f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	000008e5 	.word	0x000008e5
    1f98:	41004400 	.word	0x41004400

00001f9c <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    1f9c:	b500      	push	{lr}
    1f9e:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1fa0:	a801      	add	r0, sp, #4
    1fa2:	2300      	movs	r3, #0
    1fa4:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    1fa6:	2201      	movs	r2, #1
    1fa8:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    1faa:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1fac:	4b01      	ldr	r3, [pc, #4]	; (1fb4 <clk_osc8m_init+0x18>)
    1fae:	4798      	blx	r3
}
    1fb0:	b003      	add	sp, #12
    1fb2:	bd00      	pop	{pc}
    1fb4:	000018e9 	.word	0x000018e9

00001fb8 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1fb8:	b500      	push	{lr}
    1fba:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1fbc:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <clk_gclk0_init+0x30>)
    1fbe:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1fc0:	2300      	movs	r3, #0
    1fc2:	4a0a      	ldr	r2, [pc, #40]	; (1fec <clk_gclk0_init+0x34>)
    1fc4:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    1fc6:	a901      	add	r1, sp, #4
    1fc8:	2206      	movs	r2, #6
    1fca:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    1fcc:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    1fce:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1fd0:	3a05      	subs	r2, #5
    1fd2:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    1fd4:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1fd6:	2000      	movs	r0, #0
    1fd8:	4b05      	ldr	r3, [pc, #20]	; (1ff0 <clk_gclk0_init+0x38>)
    1fda:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1fdc:	2000      	movs	r0, #0
    1fde:	4b05      	ldr	r3, [pc, #20]	; (1ff4 <clk_gclk0_init+0x3c>)
    1fe0:	4798      	blx	r3
    1fe2:	b005      	add	sp, #20
    1fe4:	bd00      	pop	{pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	00001a55 	.word	0x00001a55
    1fec:	40000400 	.word	0x40000400
    1ff0:	00001a79 	.word	0x00001a79
    1ff4:	00001b49 	.word	0x00001b49

00001ff8 <sys_clk_init>:
{
    1ff8:	b510      	push	{r4, lr}
	clk_osc8m_init();
    1ffa:	4b03      	ldr	r3, [pc, #12]	; (2008 <STACK_SIZE+0x8>)
    1ffc:	4798      	blx	r3
	clk_gclk0_init();
    1ffe:	4b03      	ldr	r3, [pc, #12]	; (200c <STACK_SIZE+0xc>)
    2000:	4798      	blx	r3
    delay_init();
    2002:	4b03      	ldr	r3, [pc, #12]	; (2010 <STACK_SIZE+0x10>)
    2004:	4798      	blx	r3
}
    2006:	bd10      	pop	{r4, pc}
    2008:	00001f9d 	.word	0x00001f9d
    200c:	00001fb9 	.word	0x00001fb9
    2010:	00000879 	.word	0x00000879

00002014 <simSysInit>:
{
    2014:	b510      	push	{r4, lr}
	system_init();
    2016:	4b04      	ldr	r3, [pc, #16]	; (2028 <simSysInit+0x14>)
    2018:	4798      	blx	r3
	sys_clk_init();
    201a:	4b04      	ldr	r3, [pc, #16]	; (202c <simSysInit+0x18>)
    201c:	4798      	blx	r3
	conf_port_pin();
    201e:	4b04      	ldr	r3, [pc, #16]	; (2030 <simSysInit+0x1c>)
    2020:	4798      	blx	r3
	spi40_init();
    2022:	4b04      	ldr	r3, [pc, #16]	; (2034 <simSysInit+0x20>)
    2024:	4798      	blx	r3
}
    2026:	bd10      	pop	{r4, pc}
    2028:	00001ded 	.word	0x00001ded
    202c:	00001ff9 	.word	0x00001ff9
    2030:	00001ee1 	.word	0x00001ee1
    2034:	00000115 	.word	0x00000115

00002038 <main>:
{
    2038:	b510      	push	{r4, lr}
    203a:	b086      	sub	sp, #24
    rssi_vals acquired_rssi = {10, 20, 30};
    203c:	ac04      	add	r4, sp, #16
    203e:	2208      	movs	r2, #8
    2040:	2100      	movs	r1, #0
    2042:	0020      	movs	r0, r4
    2044:	4b12      	ldr	r3, [pc, #72]	; (2090 <main+0x58>)
    2046:	4798      	blx	r3
    2048:	230a      	movs	r3, #10
    204a:	8023      	strh	r3, [r4, #0]
    204c:	330a      	adds	r3, #10
    204e:	8063      	strh	r3, [r4, #2]
    2050:	330a      	adds	r3, #10
    2052:	80a3      	strh	r3, [r4, #4]
    2054:	2208      	movs	r2, #8
    2056:	0021      	movs	r1, r4
    2058:	a802      	add	r0, sp, #8
    205a:	4b0e      	ldr	r3, [pc, #56]	; (2094 <main+0x5c>)
    205c:	4798      	blx	r3
	struct measurement test_data = {40, 10, 30, 40};
    205e:	4b0e      	ldr	r3, [pc, #56]	; (2098 <main+0x60>)
    2060:	681b      	ldr	r3, [r3, #0]
    2062:	9301      	str	r3, [sp, #4]
    simSysInit();
    2064:	4b0d      	ldr	r3, [pc, #52]	; (209c <main+0x64>)
    2066:	4798      	blx	r3
    delay_ms(100);
    2068:	2064      	movs	r0, #100	; 0x64
    206a:	4b0d      	ldr	r3, [pc, #52]	; (20a0 <main+0x68>)
    206c:	4798      	blx	r3
    spi40_rx_init();
    206e:	4b0d      	ldr	r3, [pc, #52]	; (20a4 <main+0x6c>)
    2070:	4798      	blx	r3
		buf = spi40_rd8(AX5043_FIFODATA);
    2072:	2029      	movs	r0, #41	; 0x29
    2074:	4b0c      	ldr	r3, [pc, #48]	; (20a8 <main+0x70>)
    2076:	4798      	blx	r3
		acquired_rssi.rssi169 = spi40_rssi();
    2078:	4b0c      	ldr	r3, [pc, #48]	; (20ac <main+0x74>)
    207a:	4798      	blx	r3
    207c:	b200      	sxth	r0, r0
    207e:	ab02      	add	r3, sp, #8
    2080:	8058      	strh	r0, [r3, #2]
		usart_fiber_write(test_data);
    2082:	9801      	ldr	r0, [sp, #4]
    2084:	4b0a      	ldr	r3, [pc, #40]	; (20b0 <main+0x78>)
    2086:	4798      	blx	r3
        delay_ms(100);
    2088:	2064      	movs	r0, #100	; 0x64
    208a:	4b05      	ldr	r3, [pc, #20]	; (20a0 <main+0x68>)
    208c:	4798      	blx	r3
    208e:	e7f0      	b.n	2072 <main+0x3a>
    2090:	00002227 	.word	0x00002227
    2094:	00002215 	.word	0x00002215
    2098:	000022a0 	.word	0x000022a0
    209c:	00002015 	.word	0x00002015
    20a0:	000008b5 	.word	0x000008b5
    20a4:	00000345 	.word	0x00000345
    20a8:	000002ad 	.word	0x000002ad
    20ac:	00000831 	.word	0x00000831
    20b0:	00000841 	.word	0x00000841

000020b4 <__udivsi3>:
    20b4:	2200      	movs	r2, #0
    20b6:	0843      	lsrs	r3, r0, #1
    20b8:	428b      	cmp	r3, r1
    20ba:	d374      	bcc.n	21a6 <__udivsi3+0xf2>
    20bc:	0903      	lsrs	r3, r0, #4
    20be:	428b      	cmp	r3, r1
    20c0:	d35f      	bcc.n	2182 <__udivsi3+0xce>
    20c2:	0a03      	lsrs	r3, r0, #8
    20c4:	428b      	cmp	r3, r1
    20c6:	d344      	bcc.n	2152 <__udivsi3+0x9e>
    20c8:	0b03      	lsrs	r3, r0, #12
    20ca:	428b      	cmp	r3, r1
    20cc:	d328      	bcc.n	2120 <__udivsi3+0x6c>
    20ce:	0c03      	lsrs	r3, r0, #16
    20d0:	428b      	cmp	r3, r1
    20d2:	d30d      	bcc.n	20f0 <__udivsi3+0x3c>
    20d4:	22ff      	movs	r2, #255	; 0xff
    20d6:	0209      	lsls	r1, r1, #8
    20d8:	ba12      	rev	r2, r2
    20da:	0c03      	lsrs	r3, r0, #16
    20dc:	428b      	cmp	r3, r1
    20de:	d302      	bcc.n	20e6 <__udivsi3+0x32>
    20e0:	1212      	asrs	r2, r2, #8
    20e2:	0209      	lsls	r1, r1, #8
    20e4:	d065      	beq.n	21b2 <__udivsi3+0xfe>
    20e6:	0b03      	lsrs	r3, r0, #12
    20e8:	428b      	cmp	r3, r1
    20ea:	d319      	bcc.n	2120 <__udivsi3+0x6c>
    20ec:	e000      	b.n	20f0 <__udivsi3+0x3c>
    20ee:	0a09      	lsrs	r1, r1, #8
    20f0:	0bc3      	lsrs	r3, r0, #15
    20f2:	428b      	cmp	r3, r1
    20f4:	d301      	bcc.n	20fa <__udivsi3+0x46>
    20f6:	03cb      	lsls	r3, r1, #15
    20f8:	1ac0      	subs	r0, r0, r3
    20fa:	4152      	adcs	r2, r2
    20fc:	0b83      	lsrs	r3, r0, #14
    20fe:	428b      	cmp	r3, r1
    2100:	d301      	bcc.n	2106 <__udivsi3+0x52>
    2102:	038b      	lsls	r3, r1, #14
    2104:	1ac0      	subs	r0, r0, r3
    2106:	4152      	adcs	r2, r2
    2108:	0b43      	lsrs	r3, r0, #13
    210a:	428b      	cmp	r3, r1
    210c:	d301      	bcc.n	2112 <__udivsi3+0x5e>
    210e:	034b      	lsls	r3, r1, #13
    2110:	1ac0      	subs	r0, r0, r3
    2112:	4152      	adcs	r2, r2
    2114:	0b03      	lsrs	r3, r0, #12
    2116:	428b      	cmp	r3, r1
    2118:	d301      	bcc.n	211e <__udivsi3+0x6a>
    211a:	030b      	lsls	r3, r1, #12
    211c:	1ac0      	subs	r0, r0, r3
    211e:	4152      	adcs	r2, r2
    2120:	0ac3      	lsrs	r3, r0, #11
    2122:	428b      	cmp	r3, r1
    2124:	d301      	bcc.n	212a <__udivsi3+0x76>
    2126:	02cb      	lsls	r3, r1, #11
    2128:	1ac0      	subs	r0, r0, r3
    212a:	4152      	adcs	r2, r2
    212c:	0a83      	lsrs	r3, r0, #10
    212e:	428b      	cmp	r3, r1
    2130:	d301      	bcc.n	2136 <__udivsi3+0x82>
    2132:	028b      	lsls	r3, r1, #10
    2134:	1ac0      	subs	r0, r0, r3
    2136:	4152      	adcs	r2, r2
    2138:	0a43      	lsrs	r3, r0, #9
    213a:	428b      	cmp	r3, r1
    213c:	d301      	bcc.n	2142 <__udivsi3+0x8e>
    213e:	024b      	lsls	r3, r1, #9
    2140:	1ac0      	subs	r0, r0, r3
    2142:	4152      	adcs	r2, r2
    2144:	0a03      	lsrs	r3, r0, #8
    2146:	428b      	cmp	r3, r1
    2148:	d301      	bcc.n	214e <__udivsi3+0x9a>
    214a:	020b      	lsls	r3, r1, #8
    214c:	1ac0      	subs	r0, r0, r3
    214e:	4152      	adcs	r2, r2
    2150:	d2cd      	bcs.n	20ee <__udivsi3+0x3a>
    2152:	09c3      	lsrs	r3, r0, #7
    2154:	428b      	cmp	r3, r1
    2156:	d301      	bcc.n	215c <__udivsi3+0xa8>
    2158:	01cb      	lsls	r3, r1, #7
    215a:	1ac0      	subs	r0, r0, r3
    215c:	4152      	adcs	r2, r2
    215e:	0983      	lsrs	r3, r0, #6
    2160:	428b      	cmp	r3, r1
    2162:	d301      	bcc.n	2168 <__udivsi3+0xb4>
    2164:	018b      	lsls	r3, r1, #6
    2166:	1ac0      	subs	r0, r0, r3
    2168:	4152      	adcs	r2, r2
    216a:	0943      	lsrs	r3, r0, #5
    216c:	428b      	cmp	r3, r1
    216e:	d301      	bcc.n	2174 <__udivsi3+0xc0>
    2170:	014b      	lsls	r3, r1, #5
    2172:	1ac0      	subs	r0, r0, r3
    2174:	4152      	adcs	r2, r2
    2176:	0903      	lsrs	r3, r0, #4
    2178:	428b      	cmp	r3, r1
    217a:	d301      	bcc.n	2180 <__udivsi3+0xcc>
    217c:	010b      	lsls	r3, r1, #4
    217e:	1ac0      	subs	r0, r0, r3
    2180:	4152      	adcs	r2, r2
    2182:	08c3      	lsrs	r3, r0, #3
    2184:	428b      	cmp	r3, r1
    2186:	d301      	bcc.n	218c <__udivsi3+0xd8>
    2188:	00cb      	lsls	r3, r1, #3
    218a:	1ac0      	subs	r0, r0, r3
    218c:	4152      	adcs	r2, r2
    218e:	0883      	lsrs	r3, r0, #2
    2190:	428b      	cmp	r3, r1
    2192:	d301      	bcc.n	2198 <__udivsi3+0xe4>
    2194:	008b      	lsls	r3, r1, #2
    2196:	1ac0      	subs	r0, r0, r3
    2198:	4152      	adcs	r2, r2
    219a:	0843      	lsrs	r3, r0, #1
    219c:	428b      	cmp	r3, r1
    219e:	d301      	bcc.n	21a4 <__udivsi3+0xf0>
    21a0:	004b      	lsls	r3, r1, #1
    21a2:	1ac0      	subs	r0, r0, r3
    21a4:	4152      	adcs	r2, r2
    21a6:	1a41      	subs	r1, r0, r1
    21a8:	d200      	bcs.n	21ac <__udivsi3+0xf8>
    21aa:	4601      	mov	r1, r0
    21ac:	4152      	adcs	r2, r2
    21ae:	4610      	mov	r0, r2
    21b0:	4770      	bx	lr
    21b2:	e7ff      	b.n	21b4 <__udivsi3+0x100>
    21b4:	b501      	push	{r0, lr}
    21b6:	2000      	movs	r0, #0
    21b8:	f000 f806 	bl	21c8 <__aeabi_idiv0>
    21bc:	bd02      	pop	{r1, pc}
    21be:	46c0      	nop			; (mov r8, r8)

000021c0 <__aeabi_uidivmod>:
    21c0:	2900      	cmp	r1, #0
    21c2:	d0f7      	beq.n	21b4 <__udivsi3+0x100>
    21c4:	e776      	b.n	20b4 <__udivsi3>
    21c6:	4770      	bx	lr

000021c8 <__aeabi_idiv0>:
    21c8:	4770      	bx	lr
    21ca:	46c0      	nop			; (mov r8, r8)

000021cc <__libc_init_array>:
    21cc:	b570      	push	{r4, r5, r6, lr}
    21ce:	2600      	movs	r6, #0
    21d0:	4d0c      	ldr	r5, [pc, #48]	; (2204 <__libc_init_array+0x38>)
    21d2:	4c0d      	ldr	r4, [pc, #52]	; (2208 <__libc_init_array+0x3c>)
    21d4:	1b64      	subs	r4, r4, r5
    21d6:	10a4      	asrs	r4, r4, #2
    21d8:	42a6      	cmp	r6, r4
    21da:	d109      	bne.n	21f0 <__libc_init_array+0x24>
    21dc:	2600      	movs	r6, #0
    21de:	f000 f861 	bl	22a4 <_init>
    21e2:	4d0a      	ldr	r5, [pc, #40]	; (220c <__libc_init_array+0x40>)
    21e4:	4c0a      	ldr	r4, [pc, #40]	; (2210 <__libc_init_array+0x44>)
    21e6:	1b64      	subs	r4, r4, r5
    21e8:	10a4      	asrs	r4, r4, #2
    21ea:	42a6      	cmp	r6, r4
    21ec:	d105      	bne.n	21fa <__libc_init_array+0x2e>
    21ee:	bd70      	pop	{r4, r5, r6, pc}
    21f0:	00b3      	lsls	r3, r6, #2
    21f2:	58eb      	ldr	r3, [r5, r3]
    21f4:	4798      	blx	r3
    21f6:	3601      	adds	r6, #1
    21f8:	e7ee      	b.n	21d8 <__libc_init_array+0xc>
    21fa:	00b3      	lsls	r3, r6, #2
    21fc:	58eb      	ldr	r3, [r5, r3]
    21fe:	4798      	blx	r3
    2200:	3601      	adds	r6, #1
    2202:	e7f2      	b.n	21ea <__libc_init_array+0x1e>
    2204:	000022b0 	.word	0x000022b0
    2208:	000022b0 	.word	0x000022b0
    220c:	000022b0 	.word	0x000022b0
    2210:	000022b4 	.word	0x000022b4

00002214 <memcpy>:
    2214:	2300      	movs	r3, #0
    2216:	b510      	push	{r4, lr}
    2218:	429a      	cmp	r2, r3
    221a:	d100      	bne.n	221e <memcpy+0xa>
    221c:	bd10      	pop	{r4, pc}
    221e:	5ccc      	ldrb	r4, [r1, r3]
    2220:	54c4      	strb	r4, [r0, r3]
    2222:	3301      	adds	r3, #1
    2224:	e7f8      	b.n	2218 <memcpy+0x4>

00002226 <memset>:
    2226:	0003      	movs	r3, r0
    2228:	1882      	adds	r2, r0, r2
    222a:	4293      	cmp	r3, r2
    222c:	d100      	bne.n	2230 <memset+0xa>
    222e:	4770      	bx	lr
    2230:	7019      	strb	r1, [r3, #0]
    2232:	3301      	adds	r3, #1
    2234:	e7f9      	b.n	222a <memset+0x4>
    2236:	0000      	movs	r0, r0
    2238:	42000800 	.word	0x42000800
    223c:	42000c00 	.word	0x42000c00
    2240:	42001000 	.word	0x42001000
    2244:	42001400 	.word	0x42001400
    2248:	42001800 	.word	0x42001800
    224c:	42001c00 	.word	0x42001c00
    2250:	0c0b0a09 	.word	0x0c0b0a09
    2254:	00000e0d 	.word	0x00000e0d
    2258:	0000186c 	.word	0x0000186c
    225c:	000018c4 	.word	0x000018c4
    2260:	000018c4 	.word	0x000018c4
    2264:	00001866 	.word	0x00001866
    2268:	00001866 	.word	0x00001866
    226c:	00001880 	.word	0x00001880
    2270:	00001872 	.word	0x00001872
    2274:	00001886 	.word	0x00001886
    2278:	000018b4 	.word	0x000018b4
    227c:	00001950 	.word	0x00001950
    2280:	000019be 	.word	0x000019be
    2284:	000019be 	.word	0x000019be
    2288:	00001930 	.word	0x00001930
    228c:	00001942 	.word	0x00001942
    2290:	00001960 	.word	0x00001960
    2294:	00001934 	.word	0x00001934
    2298:	00001970 	.word	0x00001970
    229c:	000019ac 	.word	0x000019ac
    22a0:	281e0a28 	.word	0x281e0a28

000022a4 <_init>:
    22a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22aa:	bc08      	pop	{r3}
    22ac:	469e      	mov	lr, r3
    22ae:	4770      	bx	lr

000022b0 <__init_array_start>:
    22b0:	000000dd 	.word	0x000000dd

000022b4 <_fini>:
    22b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22ba:	bc08      	pop	{r3}
    22bc:	469e      	mov	lr, r3
    22be:	4770      	bx	lr

000022c0 <__fini_array_start>:
    22c0:	000000b5 	.word	0x000000b5
