
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000021a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  2000000c  000021ac  0002000c  2**2
                  ALLOC
  3 .stack        00002004  200000c4  00002264  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00024ab8  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fdc  00000000  00000000  00044b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000056e6  00000000  00000000  00047b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004a0  00000000  00000000  0004d207  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000750  00000000  00000000  0004d6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000055b2  00000000  00000000  0004ddf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b00f  00000000  00000000  000533a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c8ac  00000000  00000000  0005e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b64  00000000  00000000  000eac64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 20 00 20 11 1d 00 00 0d 1d 00 00 0d 1d 00 00     . . ............
	...
      2c:	0d 1d 00 00 00 00 00 00 00 00 00 00 0d 1d 00 00     ................
      3c:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
      4c:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
      5c:	0d 1d 00 00 0d 1d 00 00 55 16 00 00 65 16 00 00     ........U...e...
      6c:	75 16 00 00 85 16 00 00 95 16 00 00 a5 16 00 00     u...............
      7c:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
      8c:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
      9c:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
      ac:	0d 1d 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	000021a0 	.word	0x000021a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	000021a0 	.word	0x000021a0
     10c:	000021a0 	.word	0x000021a0
     110:	00000000 	.word	0x00000000

00000114 <spi40_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for the 40 MHz module
 */
void spi40_init(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b091      	sub	sp, #68	; 0x44
	if (spi40InitComp == true)
     118:	4b31      	ldr	r3, [pc, #196]	; (1e0 <spi40_init+0xcc>)
     11a:	781b      	ldrb	r3, [r3, #0]
     11c:	2b00      	cmp	r3, #0
     11e:	d001      	beq.n	124 <spi40_init+0x10>
	spi40SlaveConf.ss_pin = SS40;
	// attach the slave configs to the slave
	spi_attach_slave(&spi40Slave, &spi40SlaveConf);
    
    spi40InitComp = true;
}
     120:	b011      	add	sp, #68	; 0x44
     122:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     124:	ac02      	add	r4, sp, #8
     126:	2601      	movs	r6, #1
     128:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     12a:	2500      	movs	r5, #0
     12c:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     12e:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     130:	23c0      	movs	r3, #192	; 0xc0
     132:	039b      	lsls	r3, r3, #14
     134:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     136:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     138:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     13a:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     13c:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     13e:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     140:	2724      	movs	r7, #36	; 0x24
     142:	55e5      	strb	r5, [r4, r7]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     144:	220c      	movs	r2, #12
     146:	2100      	movs	r1, #0
     148:	a808      	add	r0, sp, #32
     14a:	4b26      	ldr	r3, [pc, #152]	; (1e4 <spi40_init+0xd0>)
     14c:	4798      	blx	r3
    spi40MasterConf.mux_setting = SPI40_PINXMUX;
     14e:	238c      	movs	r3, #140	; 0x8c
     150:	039b      	lsls	r3, r3, #14
     152:	60e3      	str	r3, [r4, #12]
    spi40MasterConf.pinmux_pad0 = MOSI40;
     154:	4b24      	ldr	r3, [pc, #144]	; (1e8 <spi40_init+0xd4>)
     156:	62a3      	str	r3, [r4, #40]	; 0x28
    spi40MasterConf.pinmux_pad1 = SCK40;
     158:	4b24      	ldr	r3, [pc, #144]	; (1ec <spi40_init+0xd8>)
     15a:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi40MasterConf.pinmux_pad2 = PINMUX_UNUSED;
     15c:	2301      	movs	r3, #1
     15e:	425b      	negs	r3, r3
     160:	6323      	str	r3, [r4, #48]	; 0x30
    spi40MasterConf.pinmux_pad3 = MISO40;
     162:	4b23      	ldr	r3, [pc, #140]	; (1f0 <spi40_init+0xdc>)
     164:	6363      	str	r3, [r4, #52]	; 0x34
	spi40MasterConf.generator_source = SPI40_CLK;
     166:	55e5      	strb	r5, [r4, r7]
	spi40MasterConf.mode_specific.master.baudrate = SPI40MAXCLK;
     168:	4b22      	ldr	r3, [pc, #136]	; (1f4 <spi40_init+0xe0>)
     16a:	61a3      	str	r3, [r4, #24]
	spi_init(&spi40Master, SPI40, &spi40MasterConf);
     16c:	4d22      	ldr	r5, [pc, #136]	; (1f8 <spi40_init+0xe4>)
     16e:	0022      	movs	r2, r4
     170:	4922      	ldr	r1, [pc, #136]	; (1fc <spi40_init+0xe8>)
     172:	0028      	movs	r0, r5
     174:	4b22      	ldr	r3, [pc, #136]	; (200 <spi40_init+0xec>)
     176:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     178:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     17a:	0020      	movs	r0, r4
     17c:	4b21      	ldr	r3, [pc, #132]	; (204 <spi40_init+0xf0>)
     17e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     180:	231f      	movs	r3, #31
     182:	4018      	ands	r0, r3
     184:	4086      	lsls	r6, r0
     186:	4b20      	ldr	r3, [pc, #128]	; (208 <spi40_init+0xf4>)
     188:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     18a:	4b1b      	ldr	r3, [pc, #108]	; (1f8 <spi40_init+0xe4>)
     18c:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     18e:	69db      	ldr	r3, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     190:	2b00      	cmp	r3, #0
     192:	d1fa      	bne.n	18a <spi40_init+0x76>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     194:	6823      	ldr	r3, [r4, #0]
     196:	2202      	movs	r2, #2
     198:	4313      	orrs	r3, r2
     19a:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     19c:	2300      	movs	r3, #0
	slave->ss_pin          = config->ss_pin;
     19e:	4c1b      	ldr	r4, [pc, #108]	; (20c <spi40_init+0xf8>)
     1a0:	320f      	adds	r2, #15
     1a2:	7022      	strb	r2, [r4, #0]
	slave->address_enabled = config->address_enabled;
     1a4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     1a6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1a8:	3a10      	subs	r2, #16
     1aa:	4669      	mov	r1, sp
     1ac:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     1ae:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     1b0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     1b2:	2011      	movs	r0, #17
     1b4:	4b16      	ldr	r3, [pc, #88]	; (210 <spi40_init+0xfc>)
     1b6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     1b8:	7821      	ldrb	r1, [r4, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     1ba:	09ca      	lsrs	r2, r1, #7
	uint8_t group_index = (gpio_pin / 32);
     1bc:	094b      	lsrs	r3, r1, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1be:	2a00      	cmp	r2, #0
     1c0:	d10c      	bne.n	1dc <spi40_init+0xc8>
		return &(ports[port_index]->Group[group_index]);
     1c2:	01db      	lsls	r3, r3, #7
     1c4:	4a13      	ldr	r2, [pc, #76]	; (214 <spi40_init+0x100>)
     1c6:	4694      	mov	ip, r2
     1c8:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1ca:	221f      	movs	r2, #31
     1cc:	400a      	ands	r2, r1
     1ce:	2101      	movs	r1, #1
     1d0:	0008      	movs	r0, r1
     1d2:	4090      	lsls	r0, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1d4:	6198      	str	r0, [r3, #24]
    spi40InitComp = true;
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <spi40_init+0xcc>)
     1d8:	7019      	strb	r1, [r3, #0]
     1da:	e7a1      	b.n	120 <spi40_init+0xc>
	} else {
		Assert(false);
		return NULL;
     1dc:	2300      	movs	r3, #0
     1de:	e7f4      	b.n	1ca <spi40_init+0xb6>
     1e0:	20000028 	.word	0x20000028
     1e4:	00002107 	.word	0x00002107
     1e8:	00100002 	.word	0x00100002
     1ec:	00130002 	.word	0x00130002
     1f0:	00120002 	.word	0x00120002
     1f4:	000f4240 	.word	0x000f4240
     1f8:	20000068 	.word	0x20000068
     1fc:	42000c00 	.word	0x42000c00
     200:	00000c49 	.word	0x00000c49
     204:	00001631 	.word	0x00001631
     208:	e000e100 	.word	0xe000e100
     20c:	200000a4 	.word	0x200000a4
     210:	000008ad 	.word	0x000008ad
     214:	41004400 	.word	0x41004400

00000218 <spi40_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Begins a SPI transfer with the 40 MHz module. Sends the
 *  starting address of the read/write and reads the status bits of the module.
 */
status_code_genare_t spi40_start_xfer(spiAddr40 paramAddr, xferDir40 dir)
{
     218:	b510      	push	{r4, lr}
     21a:	b082      	sub	sp, #8
    
    status_code_genare_t read_status;

    // set the upper nibble of the address to all ones
    paramAddr |= 0xF000;
     21c:	4b10      	ldr	r3, [pc, #64]	; (260 <spi40_start_xfer+0x48>)
     21e:	4318      	orrs	r0, r3
     220:	b280      	uxth	r0, r0
     222:	466b      	mov	r3, sp
     224:	80d8      	strh	r0, [r3, #6]
    
    if(dir == READ)
     226:	2900      	cmp	r1, #0
     228:	d103      	bne.n	232 <spi40_start_xfer+0x1a>
    {
        //clear the MSB of the address if it's a read
        paramAddr &= 0x7FFF;
     22a:	0440      	lsls	r0, r0, #17
     22c:	0c40      	lsrs	r0, r0, #17
     22e:	466b      	mov	r3, sp
     230:	80d8      	strh	r0, [r3, #6]
    }        
    // else leave it unchanged, because the MSB = 1 if it's a write
    
    // swap the address bytes so the most significant byte is transferred first
    paramAddr = ((paramAddr >> 8) & 0x00FF) | (paramAddr << 8);
     232:	466b      	mov	r3, sp
     234:	1d9a      	adds	r2, r3, #6
     236:	88db      	ldrh	r3, [r3, #6]
     238:	0219      	lsls	r1, r3, #8
     23a:	0a1b      	lsrs	r3, r3, #8
     23c:	430b      	orrs	r3, r1
     23e:	8013      	strh	r3, [r2, #0]
    
    do{
        // select the slave
        read_status = spi_select_slave(&spi40Master, &spi40Slave, true);
     240:	2201      	movs	r2, #1
     242:	4908      	ldr	r1, [pc, #32]	; (264 <spi40_start_xfer+0x4c>)
     244:	4808      	ldr	r0, [pc, #32]	; (268 <spi40_start_xfer+0x50>)
     246:	4b09      	ldr	r3, [pc, #36]	; (26c <spi40_start_xfer+0x54>)
     248:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
     24a:	2805      	cmp	r0, #5
     24c:	d0f8      	beq.n	240 <spi40_start_xfer+0x28>
    
    /* perform a SPI transceive (write AND read). Write the param address and
     * read the status bits from the module */
    read_status = spi_transceive_buffer_wait(&spi40Master, (uint8_t*) &paramAddr, 
     24e:	2302      	movs	r3, #2
     250:	4a07      	ldr	r2, [pc, #28]	; (270 <spi40_start_xfer+0x58>)
     252:	4669      	mov	r1, sp
     254:	3106      	adds	r1, #6
     256:	4804      	ldr	r0, [pc, #16]	; (268 <spi40_start_xfer+0x50>)
     258:	4c06      	ldr	r4, [pc, #24]	; (274 <spi40_start_xfer+0x5c>)
     25a:	47a0      	blx	r4
                    (uint8_t*) &spi40_status_bits, 2);
    
    return read_status;
}
     25c:	b002      	add	sp, #8
     25e:	bd10      	pop	{r4, pc}
     260:	fffff000 	.word	0xfffff000
     264:	200000a4 	.word	0x200000a4
     268:	20000068 	.word	0x20000068
     26c:	00000e31 	.word	0x00000e31
     270:	2000002a 	.word	0x2000002a
     274:	00001119 	.word	0x00001119

00000278 <spi40_stop_xfer>:
 * Parameters       : void
 * Return Values(s) : ASF general status code
 * Description      : Stops a transfer, i.e. releases slave select.
 */
status_code_genare_t spi40_stop_xfer(void)
{
     278:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&spi40Master, &spi40Slave, false);
     27a:	2200      	movs	r2, #0
     27c:	4902      	ldr	r1, [pc, #8]	; (288 <spi40_stop_xfer+0x10>)
     27e:	4803      	ldr	r0, [pc, #12]	; (28c <spi40_stop_xfer+0x14>)
     280:	4b03      	ldr	r3, [pc, #12]	; (290 <spi40_stop_xfer+0x18>)
     282:	4798      	blx	r3
}
     284:	bd10      	pop	{r4, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	200000a4 	.word	0x200000a4
     28c:	20000068 	.word	0x20000068
     290:	00000e31 	.word	0x00000e31

00000294 <spi40_read>:
 * Description      : Reads a number of bytes specified by amount_bytes into
 *  read_buff. Used with spi40_start_xfer and spi40_stop_xfer().
 */
status_code_genare_t spi40_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
     294:	b510      	push	{r4, lr}
     296:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&spi40Master, \
     298:	2300      	movs	r3, #0
     29a:	0001      	movs	r1, r0
     29c:	4801      	ldr	r0, [pc, #4]	; (2a4 <spi40_read+0x10>)
     29e:	4c02      	ldr	r4, [pc, #8]	; (2a8 <spi40_read+0x14>)
     2a0:	47a0      	blx	r4
    read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
     2a2:	bd10      	pop	{r4, pc}
     2a4:	20000068 	.word	0x20000068
     2a8:	00000d35 	.word	0x00000d35

000002ac <spi40_rd8>:
 * Parameters       : read_addr (address to read from)
 * Return Values(s) : a byte
 * Description      : Reads a single byte from the 40 MHz module at read_addr.
 */
uint8_t spi40_rd8(spiAddr40 read_addr)
{
     2ac:	b510      	push	{r4, lr}
     2ae:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
     2b0:	466b      	mov	r3, sp
     2b2:	1ddc      	adds	r4, r3, #7
     2b4:	2300      	movs	r3, #0
     2b6:	7023      	strb	r3, [r4, #0]
    
    spi40_start_xfer(read_addr, READ);
     2b8:	2100      	movs	r1, #0
     2ba:	4b05      	ldr	r3, [pc, #20]	; (2d0 <spi40_rd8+0x24>)
     2bc:	4798      	blx	r3
  
    // read one byte
    spi40_read(&read_byte, 1);
     2be:	2101      	movs	r1, #1
     2c0:	0020      	movs	r0, r4
     2c2:	4b04      	ldr	r3, [pc, #16]	; (2d4 <spi40_rd8+0x28>)
     2c4:	4798      	blx	r3
    
    spi40_stop_xfer();
     2c6:	4b04      	ldr	r3, [pc, #16]	; (2d8 <spi40_rd8+0x2c>)
     2c8:	4798      	blx	r3
    
    return read_byte;
     2ca:	7820      	ldrb	r0, [r4, #0]
}
     2cc:	b002      	add	sp, #8
     2ce:	bd10      	pop	{r4, pc}
     2d0:	00000219 	.word	0x00000219
     2d4:	00000295 	.word	0x00000295
     2d8:	00000279 	.word	0x00000279

000002dc <spi40_write>:
 * Description      : Writes a number of bytes specified by amount_bytes to
 *  the 40 MHz module. Used with spi40_start_xfer and spi40_stop_xfer().
 */
status_code_genare_t spi40_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
     2dc:	b510      	push	{r4, lr}
     2de:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&spi40Master, \
     2e0:	0001      	movs	r1, r0
     2e2:	4802      	ldr	r0, [pc, #8]	; (2ec <spi40_write+0x10>)
     2e4:	4b02      	ldr	r3, [pc, #8]	; (2f0 <spi40_write+0x14>)
     2e6:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
}
     2e8:	bd10      	pop	{r4, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000068 	.word	0x20000068
     2f0:	00000f2d 	.word	0x00000f2d

000002f4 <spi40_wr8>:
 * Parameters       : wrt_addr (address to write to), wrt_byte
 * Return Values(s) : ASF general status code
 * Description      : Writes a single byte to the 40 MHz module at wrt_addr.
 */
status_code_genare_t spi40_wr8(spiAddr40 wrt_addr, uint8_t wrt_byte)
{
     2f4:	b510      	push	{r4, lr}
     2f6:	b082      	sub	sp, #8
     2f8:	466b      	mov	r3, sp
     2fa:	1ddc      	adds	r4, r3, #7
     2fc:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    spi40_start_xfer(wrt_addr, WRT);
     2fe:	2101      	movs	r1, #1
     300:	4b05      	ldr	r3, [pc, #20]	; (318 <spi40_wr8+0x24>)
     302:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = spi40_write(&wrt_byte, 1);
     304:	2101      	movs	r1, #1
     306:	0020      	movs	r0, r4
     308:	4b04      	ldr	r3, [pc, #16]	; (31c <spi40_wr8+0x28>)
     30a:	4798      	blx	r3
     30c:	0004      	movs	r4, r0
    
    spi40_stop_xfer();
     30e:	4b04      	ldr	r3, [pc, #16]	; (320 <spi40_wr8+0x2c>)
     310:	4798      	blx	r3
    
    return status_result;
}
     312:	0020      	movs	r0, r4
     314:	b002      	add	sp, #8
     316:	bd10      	pop	{r4, pc}
     318:	00000219 	.word	0x00000219
     31c:	000002dd 	.word	0x000002dd
     320:	00000279 	.word	0x00000279

00000324 <spi40_autorange>:
 * Return Values(s) : void
 * Description      : Performs autoranging on the AX5043 PLL. See
 *  pg13 of the AX043 programmer's manual for more information.
 */
void spi40_autorange(void)
{
     324:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_PLLRANGINGA, 0x18);
     326:	2118      	movs	r1, #24
     328:	2033      	movs	r0, #51	; 0x33
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <spi40_autorange+0x18>)
     32c:	4798      	blx	r3
    
    while(spi40_rd8(AX5043_PLLRANGINGA) & 0x10);   
     32e:	2033      	movs	r0, #51	; 0x33
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <spi40_autorange+0x1c>)
     332:	4798      	blx	r3
     334:	06c3      	lsls	r3, r0, #27
     336:	d4fa      	bmi.n	32e <spi40_autorange+0xa>
    
}
     338:	bd10      	pop	{r4, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	000002f5 	.word	0x000002f5
     340:	000002ad 	.word	0x000002ad

00000344 <spi40_rx_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes a 40 MHz module for transmitting.
 */
void spi40_rx_init(void)
{
     344:	b510      	push	{r4, lr}
    // set power mode to standby
    spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
     346:	2165      	movs	r1, #101	; 0x65
     348:	2002      	movs	r0, #2
     34a:	4cfe      	ldr	r4, [pc, #1016]	; (744 <spi40_rx_init+0x400>)
     34c:	47a0      	blx	r4
    delay_ms(100);
     34e:	2064      	movs	r0, #100	; 0x64
     350:	4bfd      	ldr	r3, [pc, #1012]	; (748 <spi40_rx_init+0x404>)
     352:	4798      	blx	r3
    
    spi40_wr8(AX5043_MODULATION, 0x08);
     354:	2108      	movs	r1, #8
     356:	2010      	movs	r0, #16
     358:	47a0      	blx	r4
    spi40_wr8(AX5043_ENCODING, 0x00);
     35a:	2100      	movs	r1, #0
     35c:	2011      	movs	r0, #17
     35e:	47a0      	blx	r4
    spi40_wr8(AX5043_FRAMING, 0x06);
     360:	2106      	movs	r1, #6
     362:	2012      	movs	r0, #18
     364:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCSYSCLK, 0x02);
     366:	2102      	movs	r1, #2
     368:	2021      	movs	r0, #33	; 0x21
     36a:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCDCLK, 0x02);
     36c:	2102      	movs	r1, #2
     36e:	2022      	movs	r0, #34	; 0x22
     370:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCDATA, 0x02);
     372:	2102      	movs	r1, #2
     374:	2023      	movs	r0, #35	; 0x23
     376:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCANTSEL, 0x02);
     378:	2102      	movs	r1, #2
     37a:	2025      	movs	r0, #37	; 0x25
     37c:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCPWRAMP, 0x02);
     37e:	2102      	movs	r1, #2
     380:	2026      	movs	r0, #38	; 0x26
     382:	47a0      	blx	r4
    spi40_wr8(AX5043_WAKEUPXOEARLY, 0x01);
     384:	2101      	movs	r1, #1
     386:	206e      	movs	r0, #110	; 0x6e
     388:	47a0      	blx	r4
    spi40_wr8(AX5043_IFFREQ1, 0x06);
     38a:	2106      	movs	r1, #6
     38c:	2080      	movs	r0, #128	; 0x80
     38e:	0040      	lsls	r0, r0, #1
     390:	47a0      	blx	r4
    spi40_wr8(AX5043_IFFREQ0, 0x66);
     392:	2166      	movs	r1, #102	; 0x66
     394:	2002      	movs	r0, #2
     396:	30ff      	adds	r0, #255	; 0xff
     398:	47a0      	blx	r4
    spi40_wr8(AX5043_DECIMATION, 0x05);
     39a:	2105      	movs	r1, #5
     39c:	2081      	movs	r0, #129	; 0x81
     39e:	0040      	lsls	r0, r0, #1
     3a0:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE2, 0x05);
     3a2:	2105      	movs	r1, #5
     3a4:	2004      	movs	r0, #4
     3a6:	30ff      	adds	r0, #255	; 0xff
     3a8:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE1, 0x35);
     3aa:	2135      	movs	r1, #53	; 0x35
     3ac:	2082      	movs	r0, #130	; 0x82
     3ae:	0040      	lsls	r0, r0, #1
     3b0:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE0, 0x55);
     3b2:	2155      	movs	r1, #85	; 0x55
     3b4:	2006      	movs	r0, #6
     3b6:	30ff      	adds	r0, #255	; 0xff
     3b8:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET2, 0x00);
     3ba:	2100      	movs	r1, #0
     3bc:	2083      	movs	r0, #131	; 0x83
     3be:	0040      	lsls	r0, r0, #1
     3c0:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET1, 0x00);
     3c2:	2100      	movs	r1, #0
     3c4:	2008      	movs	r0, #8
     3c6:	30ff      	adds	r0, #255	; 0xff
     3c8:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET0, 0x00);
     3ca:	2100      	movs	r1, #0
     3cc:	2084      	movs	r0, #132	; 0x84
     3ce:	0040      	lsls	r0, r0, #1
     3d0:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET2, 0x80);
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	200a      	movs	r0, #10
     3d6:	30ff      	adds	r0, #255	; 0xff
     3d8:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET1, 0x29);
     3da:	2129      	movs	r1, #41	; 0x29
     3dc:	2085      	movs	r0, #133	; 0x85
     3de:	0040      	lsls	r0, r0, #1
     3e0:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET0, 0x89);
     3e2:	2189      	movs	r1, #137	; 0x89
     3e4:	200c      	movs	r0, #12
     3e6:	30ff      	adds	r0, #255	; 0xff
     3e8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMAX1, 0x22);
     3ea:	2122      	movs	r1, #34	; 0x22
     3ec:	2086      	movs	r0, #134	; 0x86
     3ee:	0040      	lsls	r0, r0, #1
     3f0:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMAX0, 0xC0);
     3f2:	21c0      	movs	r1, #192	; 0xc0
     3f4:	200e      	movs	r0, #14
     3f6:	30ff      	adds	r0, #255	; 0xff
     3f8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMIN1, 0xDD);
     3fa:	21dd      	movs	r1, #221	; 0xdd
     3fc:	2087      	movs	r0, #135	; 0x87
     3fe:	0040      	lsls	r0, r0, #1
     400:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMIN0, 0x40);
     402:	2140      	movs	r1, #64	; 0x40
     404:	2010      	movs	r0, #16
     406:	30ff      	adds	r0, #255	; 0xff
     408:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLFILTER, 0x00);
     40a:	2100      	movs	r1, #0
     40c:	2016      	movs	r0, #22
     40e:	30ff      	adds	r0, #255	; 0xff
     410:	47a0      	blx	r4
    spi40_wr8(AX5043_RXPARAMSETS, 0xF4);
     412:	21f4      	movs	r1, #244	; 0xf4
     414:	2018      	movs	r0, #24
     416:	30ff      	adds	r0, #255	; 0xff
     418:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN0, 0xE8);
     41a:	21e8      	movs	r1, #232	; 0xe8
     41c:	2090      	movs	r0, #144	; 0x90
     41e:	0040      	lsls	r0, r0, #1
     420:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET0, 0x8F); //org val: 0x84
     422:	218f      	movs	r1, #143	; 0x8f
     424:	2022      	movs	r0, #34	; 0x22
     426:	30ff      	adds	r0, #255	; 0xff
     428:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST0, 0x00); 
     42a:	2100      	movs	r1, #0
     42c:	2091      	movs	r0, #145	; 0x91
     42e:	0040      	lsls	r0, r0, #1
     430:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN0, 0xAD);
     432:	21ad      	movs	r1, #173	; 0xad
     434:	2092      	movs	r0, #146	; 0x92
     436:	0040      	lsls	r0, r0, #1
     438:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN0, 0xA7);
     43a:	21a7      	movs	r1, #167	; 0xa7
     43c:	2026      	movs	r0, #38	; 0x26
     43e:	30ff      	adds	r0, #255	; 0xff
     440:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN0, 0xC3);
     442:	21c3      	movs	r1, #195	; 0xc3
     444:	2093      	movs	r0, #147	; 0x93
     446:	0040      	lsls	r0, r0, #1
     448:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA0, 0x0F);
     44a:	210f      	movs	r1, #15
     44c:	2028      	movs	r0, #40	; 0x28
     44e:	30ff      	adds	r0, #255	; 0xff
     450:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB0, 0x1F);
     452:	211f      	movs	r1, #31
     454:	2094      	movs	r0, #148	; 0x94
     456:	0040      	lsls	r0, r0, #1
     458:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC0, 0x0A);
     45a:	210a      	movs	r1, #10
     45c:	202a      	movs	r0, #42	; 0x2a
     45e:	30ff      	adds	r0, #255	; 0xff
     460:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND0, 0x0A);
     462:	210a      	movs	r1, #10
     464:	2095      	movs	r0, #149	; 0x95
     466:	0040      	lsls	r0, r0, #1
     468:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN0, 0x01); //org val: 0x06
     46a:	2101      	movs	r1, #1
     46c:	202c      	movs	r0, #44	; 0x2c
     46e:	30ff      	adds	r0, #255	; 0xff
     470:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV10, 0x00);
     472:	2100      	movs	r1, #0
     474:	2096      	movs	r0, #150	; 0x96
     476:	0040      	lsls	r0, r0, #1
     478:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV00, 0x00);
     47a:	2100      	movs	r1, #0
     47c:	202e      	movs	r0, #46	; 0x2e
     47e:	30ff      	adds	r0, #255	; 0xff
     480:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK0, 0x16); //org value: 0x16
     482:	2116      	movs	r1, #22
     484:	2097      	movs	r0, #151	; 0x97
     486:	0040      	lsls	r0, r0, #1
     488:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES0, 0x00);
     48a:	2100      	movs	r1, #0
     48c:	2030      	movs	r0, #48	; 0x30
     48e:	30ff      	adds	r0, #255	; 0xff
     490:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN1, 0xE8);
     492:	21e8      	movs	r1, #232	; 0xe8
     494:	2098      	movs	r0, #152	; 0x98
     496:	0040      	lsls	r0, r0, #1
     498:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET1, 0x8F); //org val: 0x84
     49a:	218f      	movs	r1, #143	; 0x8f
     49c:	2032      	movs	r0, #50	; 0x32
     49e:	30ff      	adds	r0, #255	; 0xff
     4a0:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST1, 0x00); 
     4a2:	2100      	movs	r1, #0
     4a4:	2099      	movs	r0, #153	; 0x99
     4a6:	0040      	lsls	r0, r0, #1
     4a8:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX1, 0x00);
     4aa:	2100      	movs	r1, #0
     4ac:	2034      	movs	r0, #52	; 0x34
     4ae:	30ff      	adds	r0, #255	; 0xff
     4b0:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN1, 0xAB);
     4b2:	21ab      	movs	r1, #171	; 0xab
     4b4:	209a      	movs	r0, #154	; 0x9a
     4b6:	0040      	lsls	r0, r0, #1
     4b8:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN1, 0xA6);
     4ba:	21a6      	movs	r1, #166	; 0xa6
     4bc:	2036      	movs	r0, #54	; 0x36
     4be:	30ff      	adds	r0, #255	; 0xff
     4c0:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN1, 0xC3);
     4c2:	21c3      	movs	r1, #195	; 0xc3
     4c4:	209b      	movs	r0, #155	; 0x9b
     4c6:	0040      	lsls	r0, r0, #1
     4c8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA1, 0x0F);
     4ca:	210f      	movs	r1, #15
     4cc:	2038      	movs	r0, #56	; 0x38
     4ce:	30ff      	adds	r0, #255	; 0xff
     4d0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB1, 0x1F);
     4d2:	211f      	movs	r1, #31
     4d4:	209c      	movs	r0, #156	; 0x9c
     4d6:	0040      	lsls	r0, r0, #1
     4d8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC1, 0x0A);
     4da:	210a      	movs	r1, #10
     4dc:	203a      	movs	r0, #58	; 0x3a
     4de:	30ff      	adds	r0, #255	; 0xff
     4e0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND1, 0x0A);
     4e2:	210a      	movs	r1, #10
     4e4:	209d      	movs	r0, #157	; 0x9d
     4e6:	0040      	lsls	r0, r0, #1
     4e8:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN1, 0x01); //org val: 0x06
     4ea:	2101      	movs	r1, #1
     4ec:	203c      	movs	r0, #60	; 0x3c
     4ee:	30ff      	adds	r0, #255	; 0xff
     4f0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV11, 0x00);
     4f2:	2100      	movs	r1, #0
     4f4:	209e      	movs	r0, #158	; 0x9e
     4f6:	0040      	lsls	r0, r0, #1
     4f8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV01, 0x4B);
     4fa:	214b      	movs	r1, #75	; 0x4b
     4fc:	203e      	movs	r0, #62	; 0x3e
     4fe:	30ff      	adds	r0, #255	; 0xff
     500:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK1, 0x16); //org value: 0x16
     502:	2116      	movs	r1, #22
     504:	209f      	movs	r0, #159	; 0x9f
     506:	0040      	lsls	r0, r0, #1
     508:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES1, 0x00);
     50a:	2100      	movs	r1, #0
     50c:	2040      	movs	r0, #64	; 0x40
     50e:	30ff      	adds	r0, #255	; 0xff
     510:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN3, 0xFF);
     512:	21ff      	movs	r1, #255	; 0xff
     514:	20a8      	movs	r0, #168	; 0xa8
     516:	0040      	lsls	r0, r0, #1
     518:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET3, 0x8F); //org val: 0x84
     51a:	218f      	movs	r1, #143	; 0x8f
     51c:	2052      	movs	r0, #82	; 0x52
     51e:	30ff      	adds	r0, #255	; 0xff
     520:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST3, 0x00); 
     522:	2100      	movs	r1, #0
     524:	20a9      	movs	r0, #169	; 0xa9
     526:	0040      	lsls	r0, r0, #1
     528:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX3, 0x00);
     52a:	2100      	movs	r1, #0
     52c:	2054      	movs	r0, #84	; 0x54
     52e:	30ff      	adds	r0, #255	; 0xff
     530:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN3, 0xAA);
     532:	21aa      	movs	r1, #170	; 0xaa
     534:	20aa      	movs	r0, #170	; 0xaa
     536:	0040      	lsls	r0, r0, #1
     538:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN3, 0xA5);
     53a:	21a5      	movs	r1, #165	; 0xa5
     53c:	2056      	movs	r0, #86	; 0x56
     53e:	30ff      	adds	r0, #255	; 0xff
     540:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN3, 0xC3);
     542:	21c3      	movs	r1, #195	; 0xc3
     544:	20ab      	movs	r0, #171	; 0xab
     546:	0040      	lsls	r0, r0, #1
     548:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA3, 0x0F);
     54a:	210f      	movs	r1, #15
     54c:	2058      	movs	r0, #88	; 0x58
     54e:	30ff      	adds	r0, #255	; 0xff
     550:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB3, 0x1F);
     552:	211f      	movs	r1, #31
     554:	20ac      	movs	r0, #172	; 0xac
     556:	0040      	lsls	r0, r0, #1
     558:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC3, 0x0D);
     55a:	210d      	movs	r1, #13
     55c:	205a      	movs	r0, #90	; 0x5a
     55e:	30ff      	adds	r0, #255	; 0xff
     560:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND3, 0x0D);
     562:	210d      	movs	r1, #13
     564:	20ad      	movs	r0, #173	; 0xad
     566:	0040      	lsls	r0, r0, #1
     568:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN3, 0x01); //org val: 0x06
     56a:	2101      	movs	r1, #1
     56c:	205c      	movs	r0, #92	; 0x5c
     56e:	30ff      	adds	r0, #255	; 0xff
     570:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV13, 0x00);
     572:	2100      	movs	r1, #0
     574:	20ae      	movs	r0, #174	; 0xae
     576:	0040      	lsls	r0, r0, #1
     578:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV03, 0x4B);
     57a:	214b      	movs	r1, #75	; 0x4b
     57c:	205e      	movs	r0, #94	; 0x5e
     57e:	30ff      	adds	r0, #255	; 0xff
     580:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK3, 0x16); //org value: 0x16
     582:	2116      	movs	r1, #22
     584:	20af      	movs	r0, #175	; 0xaf
     586:	0040      	lsls	r0, r0, #1
     588:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES3, 0x00);
     58a:	2100      	movs	r1, #0
     58c:	2060      	movs	r0, #96	; 0x60
     58e:	30ff      	adds	r0, #255	; 0xff
     590:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGF, 0x00);
     592:	2100      	movs	r1, #0
     594:	20b0      	movs	r0, #176	; 0xb0
     596:	0040      	lsls	r0, r0, #1
     598:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV2, 0x00);
     59a:	2100      	movs	r1, #0
     59c:	2062      	movs	r0, #98	; 0x62
     59e:	30ff      	adds	r0, #255	; 0xff
     5a0:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV1, 0x02);
     5a2:	2102      	movs	r1, #2
     5a4:	20b1      	movs	r0, #177	; 0xb1
     5a6:	0040      	lsls	r0, r0, #1
     5a8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV0, 0x0C);
     5aa:	210c      	movs	r1, #12
     5ac:	2064      	movs	r0, #100	; 0x64
     5ae:	30ff      	adds	r0, #255	; 0xff
     5b0:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGA, 0x05);
     5b2:	2105      	movs	r1, #5
     5b4:	20b2      	movs	r0, #178	; 0xb2
     5b6:	0040      	lsls	r0, r0, #1
     5b8:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE2, 0x00);
     5ba:	2100      	movs	r1, #0
     5bc:	2066      	movs	r0, #102	; 0x66
     5be:	30ff      	adds	r0, #255	; 0xff
     5c0:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE1, 0x04);
     5c2:	2104      	movs	r1, #4
     5c4:	20b3      	movs	r0, #179	; 0xb3
     5c6:	0040      	lsls	r0, r0, #1
     5c8:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE0, 0xEA);
     5ca:	21ea      	movs	r1, #234	; 0xea
     5cc:	2068      	movs	r0, #104	; 0x68
     5ce:	30ff      	adds	r0, #255	; 0xff
     5d0:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB1, 0x02);
     5d2:	2102      	movs	r1, #2
     5d4:	20b5      	movs	r0, #181	; 0xb5
     5d6:	0040      	lsls	r0, r0, #1
     5d8:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB0, 0x07);
     5da:	2107      	movs	r1, #7
     5dc:	206c      	movs	r0, #108	; 0x6c
     5de:	30ff      	adds	r0, #255	; 0xff
     5e0:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCOI, 0x8A);
     5e2:	218a      	movs	r1, #138	; 0x8a
     5e4:	20c0      	movs	r0, #192	; 0xc0
     5e6:	0040      	lsls	r0, r0, #1
     5e8:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLRNGCLK, 0x03);
     5ea:	2103      	movs	r1, #3
     5ec:	2084      	movs	r0, #132	; 0x84
     5ee:	30ff      	adds	r0, #255	; 0xff
     5f0:	47a0      	blx	r4
    spi40_wr8(AX5043_BBTUNE, 0x0F);
     5f2:	210f      	movs	r1, #15
     5f4:	20c4      	movs	r0, #196	; 0xc4
     5f6:	0040      	lsls	r0, r0, #1
     5f8:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSCAP, 0x77);
     5fa:	2177      	movs	r1, #119	; 0x77
     5fc:	208a      	movs	r0, #138	; 0x8a
     5fe:	30ff      	adds	r0, #255	; 0xff
     600:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTADDRCFG, 0x80);
     602:	2180      	movs	r1, #128	; 0x80
     604:	2080      	movs	r0, #128	; 0x80
     606:	0080      	lsls	r0, r0, #2
     608:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENCFG, 0x00);
     60a:	2100      	movs	r1, #0
     60c:	484f      	ldr	r0, [pc, #316]	; (74c <spi40_rx_init+0x408>)
     60e:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENOFFSET, 0x04);
     610:	2104      	movs	r1, #4
     612:	484f      	ldr	r0, [pc, #316]	; (750 <spi40_rx_init+0x40c>)
     614:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTMAXLEN, 0xC8);
     616:	21c8      	movs	r1, #200	; 0xc8
     618:	484e      	ldr	r0, [pc, #312]	; (754 <spi40_rx_init+0x410>)
     61a:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT3, 0xAA);
     61c:	21aa      	movs	r1, #170	; 0xaa
     61e:	2084      	movs	r0, #132	; 0x84
     620:	0080      	lsls	r0, r0, #2
     622:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT2, 0xCC);
     624:	21cc      	movs	r1, #204	; 0xcc
     626:	484c      	ldr	r0, [pc, #304]	; (758 <spi40_rx_init+0x414>)
     628:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT1, 0xAA);
     62a:	21aa      	movs	r1, #170	; 0xaa
     62c:	484b      	ldr	r0, [pc, #300]	; (75c <spi40_rx_init+0x418>)
     62e:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT0, 0xCC);
     630:	21cc      	movs	r1, #204	; 0xcc
     632:	484b      	ldr	r0, [pc, #300]	; (760 <spi40_rx_init+0x41c>)
     634:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0LEN, 0x9F);
     636:	219f      	movs	r1, #159	; 0x9f
     638:	2085      	movs	r0, #133	; 0x85
     63a:	0080      	lsls	r0, r0, #2
     63c:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0MAX, 0x1F);
     63e:	211f      	movs	r1, #31
     640:	4848      	ldr	r0, [pc, #288]	; (764 <spi40_rx_init+0x420>)
     642:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT1, 0x55);
     644:	2155      	movs	r1, #85	; 0x55
     646:	2086      	movs	r0, #134	; 0x86
     648:	0080      	lsls	r0, r0, #2
     64a:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT0, 0x55);
     64c:	2155      	movs	r1, #85	; 0x55
     64e:	4846      	ldr	r0, [pc, #280]	; (768 <spi40_rx_init+0x424>)
     650:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1LEN, 0x8A);
     652:	218a      	movs	r1, #138	; 0x8a
     654:	2087      	movs	r0, #135	; 0x87
     656:	0080      	lsls	r0, r0, #2
     658:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1MAX, 0x0A);
     65a:	210a      	movs	r1, #10
     65c:	4843      	ldr	r0, [pc, #268]	; (76c <spi40_rx_init+0x428>)
     65e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXBOOST, 0x32);
     660:	2132      	movs	r1, #50	; 0x32
     662:	2088      	movs	r0, #136	; 0x88
     664:	0080      	lsls	r0, r0, #2
     666:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXSETTLE, 0x14);
     668:	2114      	movs	r1, #20
     66a:	4841      	ldr	r0, [pc, #260]	; (770 <spi40_rx_init+0x42c>)
     66c:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXBOOST, 0x32);
     66e:	2132      	movs	r1, #50	; 0x32
     670:	4840      	ldr	r0, [pc, #256]	; (774 <spi40_rx_init+0x430>)
     672:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXSETTLE, 0x14);
     674:	2114      	movs	r1, #20
     676:	2089      	movs	r0, #137	; 0x89
     678:	0080      	lsls	r0, r0, #2
     67a:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXOFFSACQ, 0x00);
     67c:	2100      	movs	r1, #0
     67e:	483e      	ldr	r0, [pc, #248]	; (778 <spi40_rx_init+0x434>)
     680:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXCOARSEAGC, 0x73);
     682:	2173      	movs	r1, #115	; 0x73
     684:	483d      	ldr	r0, [pc, #244]	; (77c <spi40_rx_init+0x438>)
     686:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXRSSI, 0x03);
     688:	2103      	movs	r1, #3
     68a:	208a      	movs	r0, #138	; 0x8a
     68c:	0080      	lsls	r0, r0, #2
     68e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXPREAMBLE2, 0x35);
     690:	2135      	movs	r1, #53	; 0x35
     692:	483b      	ldr	r0, [pc, #236]	; (780 <spi40_rx_init+0x43c>)
     694:	47a0      	blx	r4
    spi40_wr8(AX5043_RSSIABSTHR, 0x84); //org val: 0xE6
     696:	2184      	movs	r1, #132	; 0x84
     698:	483a      	ldr	r0, [pc, #232]	; (784 <spi40_rx_init+0x440>)
     69a:	47a0      	blx	r4
    spi40_wr8(AX5043_BGNDRSSITHR, 0x84);
     69c:	2184      	movs	r1, #132	; 0x84
     69e:	483a      	ldr	r0, [pc, #232]	; (788 <spi40_rx_init+0x444>)
     6a0:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTCHUNKSIZE, 0x0D);
     6a2:	210d      	movs	r1, #13
     6a4:	208c      	movs	r0, #140	; 0x8c
     6a6:	0080      	lsls	r0, r0, #2
     6a8:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTACCEPTFLAGS, 0x20);
     6aa:	2120      	movs	r1, #32
     6ac:	4837      	ldr	r0, [pc, #220]	; (78c <spi40_rx_init+0x448>)
     6ae:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE1, 0x00);
     6b0:	2100      	movs	r1, #0
     6b2:	20cc      	movs	r0, #204	; 0xcc
     6b4:	0080      	lsls	r0, r0, #2
     6b6:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE0, 0x00);
     6b8:	2100      	movs	r1, #0
     6ba:	4835      	ldr	r0, [pc, #212]	; (790 <spi40_rx_init+0x44c>)
     6bc:	47a0      	blx	r4
    spi40_wr8(AX5043_DACCONFIG, 0x00);
     6be:	2100      	movs	r1, #0
     6c0:	4834      	ldr	r0, [pc, #208]	; (794 <spi40_rx_init+0x450>)
     6c2:	47a0      	blx	r4
    spi40_wr8(AX5043_REF, 0x03);
     6c4:	2103      	movs	r1, #3
     6c6:	4834      	ldr	r0, [pc, #208]	; (798 <spi40_rx_init+0x454>)
     6c8:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALOSC, 0x03);
     6ca:	2103      	movs	r1, #3
     6cc:	20f1      	movs	r0, #241	; 0xf1
     6ce:	0100      	lsls	r0, r0, #4
     6d0:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALAMPL, 0x07);
     6d2:	2107      	movs	r1, #7
     6d4:	4831      	ldr	r0, [pc, #196]	; (79c <spi40_rx_init+0x458>)
     6d6:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF1C, 0x07);
     6d8:	2107      	movs	r1, #7
     6da:	4831      	ldr	r0, [pc, #196]	; (7a0 <spi40_rx_init+0x45c>)
     6dc:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF21, 0x68);
     6de:	2168      	movs	r1, #104	; 0x68
     6e0:	4830      	ldr	r0, [pc, #192]	; (7a4 <spi40_rx_init+0x460>)
     6e2:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF22, 0xFF);
     6e4:	21ff      	movs	r1, #255	; 0xff
     6e6:	4830      	ldr	r0, [pc, #192]	; (7a8 <spi40_rx_init+0x464>)
     6e8:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF23, 0x84);
     6ea:	2184      	movs	r1, #132	; 0x84
     6ec:	482f      	ldr	r0, [pc, #188]	; (7ac <spi40_rx_init+0x468>)
     6ee:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF26, 0x98);
     6f0:	2198      	movs	r1, #152	; 0x98
     6f2:	482f      	ldr	r0, [pc, #188]	; (7b0 <spi40_rx_init+0x46c>)
     6f4:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF34, 0x08);
     6f6:	2108      	movs	r1, #8
     6f8:	482e      	ldr	r0, [pc, #184]	; (7b4 <spi40_rx_init+0x470>)
     6fa:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF35, 0x10);
     6fc:	2110      	movs	r1, #16
     6fe:	482e      	ldr	r0, [pc, #184]	; (7b8 <spi40_rx_init+0x474>)
     700:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF44, 0x25);
     702:	2125      	movs	r1, #37	; 0x25
     704:	482d      	ldr	r0, [pc, #180]	; (7bc <spi40_rx_init+0x478>)
     706:	47a0      	blx	r4
    
    spi40_wr8(AX5043_PLLLOOP, 0x0A);
     708:	210a      	movs	r1, #10
     70a:	2030      	movs	r0, #48	; 0x30
     70c:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLCPI, 0x10);
     70e:	2110      	movs	r1, #16
     710:	2031      	movs	r0, #49	; 0x31
     712:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCODIV, 0x30); //org val = 0x30
     714:	2130      	movs	r1, #48	; 0x30
     716:	2032      	movs	r0, #50	; 0x32
     718:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALCAP, 0x13);
     71a:	2113      	movs	r1, #19
     71c:	20c2      	movs	r0, #194	; 0xc2
     71e:	0040      	lsls	r0, r0, #1
     720:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF00, 0x0F);
     722:	210f      	movs	r1, #15
     724:	20f0      	movs	r0, #240	; 0xf0
     726:	0100      	lsls	r0, r0, #4
     728:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF18, 0x06);
     72a:	2106      	movs	r1, #6
     72c:	4824      	ldr	r0, [pc, #144]	; (7c0 <spi40_rx_init+0x47c>)
     72e:	47a0      	blx	r4
    
    //set frqeuency
    spi40_wr8(AX5043_FREQA0, 0x01);
     730:	2101      	movs	r1, #1
     732:	2037      	movs	r0, #55	; 0x37
     734:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA1, 0x00);
     736:	2100      	movs	r1, #0
     738:	2036      	movs	r0, #54	; 0x36
     73a:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA2, 0x90);
     73c:	2190      	movs	r1, #144	; 0x90
     73e:	2035      	movs	r0, #53	; 0x35
     740:	47a0      	blx	r4
     742:	e03f      	b.n	7c4 <spi40_rx_init+0x480>
     744:	000002f5 	.word	0x000002f5
     748:	0000087d 	.word	0x0000087d
     74c:	00000201 	.word	0x00000201
     750:	00000202 	.word	0x00000202
     754:	00000203 	.word	0x00000203
     758:	00000211 	.word	0x00000211
     75c:	00000212 	.word	0x00000212
     760:	00000213 	.word	0x00000213
     764:	00000216 	.word	0x00000216
     768:	00000219 	.word	0x00000219
     76c:	0000021e 	.word	0x0000021e
     770:	00000221 	.word	0x00000221
     774:	00000223 	.word	0x00000223
     778:	00000225 	.word	0x00000225
     77c:	00000226 	.word	0x00000226
     780:	0000022a 	.word	0x0000022a
     784:	0000022d 	.word	0x0000022d
     788:	0000022f 	.word	0x0000022f
     78c:	00000233 	.word	0x00000233
     790:	00000331 	.word	0x00000331
     794:	00000332 	.word	0x00000332
     798:	00000f0d 	.word	0x00000f0d
     79c:	00000f11 	.word	0x00000f11
     7a0:	00000f1c 	.word	0x00000f1c
     7a4:	00000f21 	.word	0x00000f21
     7a8:	00000f22 	.word	0x00000f22
     7ac:	00000f23 	.word	0x00000f23
     7b0:	00000f26 	.word	0x00000f26
     7b4:	00000f34 	.word	0x00000f34
     7b8:	00000f35 	.word	0x00000f35
     7bc:	00000f44 	.word	0x00000f44
     7c0:	00000f18 	.word	0x00000f18
    spi40_wr8(AX5043_FREQA3, 0x0A);
     7c4:	210a      	movs	r1, #10
     7c6:	2034      	movs	r0, #52	; 0x34
     7c8:	47a0      	blx	r4
    
    // Settings unique to receiver:
    spi40_wr8(AX5043_TMGRXAGC, 0x00);
     7ca:	2100      	movs	r1, #0
     7cc:	480f      	ldr	r0, [pc, #60]	; (80c <spi40_rx_init+0x4c8>)
     7ce:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXPREAMBLE1, 0x00);
     7d0:	2100      	movs	r1, #0
     7d2:	480f      	ldr	r0, [pc, #60]	; (810 <spi40_rx_init+0x4cc>)
     7d4:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTMISCFLAGS, 0x00 | (1 << 2)); //org value = 0x00
     7d6:	2104      	movs	r1, #4
     7d8:	480e      	ldr	r0, [pc, #56]	; (814 <spi40_rx_init+0x4d0>)
     7da:	47a0      	blx	r4
    
    
    // wait for crystal to settle
    while((spi40_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
     7dc:	201d      	movs	r0, #29
     7de:	4b0e      	ldr	r3, [pc, #56]	; (818 <spi40_rx_init+0x4d4>)
     7e0:	4798      	blx	r3
     7e2:	07c3      	lsls	r3, r0, #31
     7e4:	d5fa      	bpl.n	7dc <spi40_rx_init+0x498>
    
    // autorange the PLL
    spi40_autorange();
     7e6:	4b0d      	ldr	r3, [pc, #52]	; (81c <spi40_rx_init+0x4d8>)
     7e8:	4798      	blx	r3
    
    // accept no invalid packets
    spi40_wr8(AX5043_PKTACCEPTFLAGS, 0x00);
     7ea:	2100      	movs	r1, #0
     7ec:	480c      	ldr	r0, [pc, #48]	; (820 <spi40_rx_init+0x4dc>)
     7ee:	4c0d      	ldr	r4, [pc, #52]	; (824 <spi40_rx_init+0x4e0>)
     7f0:	47a0      	blx	r4
    
    // append RSSI reading to end of packet
    spi40_wr8(AX5043_PKTSTOREFLAGS, 0x10);
     7f2:	2110      	movs	r1, #16
     7f4:	480c      	ldr	r0, [pc, #48]	; (828 <spi40_rx_init+0x4e4>)
     7f6:	47a0      	blx	r4
    
    // set power mode to full receive, i.e. always receive
    spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_FULLRX);
     7f8:	2169      	movs	r1, #105	; 0x69
     7fa:	2002      	movs	r0, #2
     7fc:	47a0      	blx	r4
    delay_ms(100);
     7fe:	2064      	movs	r0, #100	; 0x64
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <spi40_rx_init+0x4e8>)
     802:	4798      	blx	r3
    
    // clear FIFO
    spi40_wr8(AX5043_FIFOSTAT, FIFOCMD_CLRFIFO);
     804:	2103      	movs	r1, #3
     806:	2028      	movs	r0, #40	; 0x28
     808:	47a0      	blx	r4
}
     80a:	bd10      	pop	{r4, pc}
     80c:	00000227 	.word	0x00000227
     810:	00000229 	.word	0x00000229
     814:	00000231 	.word	0x00000231
     818:	000002ad 	.word	0x000002ad
     81c:	00000325 	.word	0x00000325
     820:	00000233 	.word	0x00000233
     824:	000002f5 	.word	0x000002f5
     828:	00000232 	.word	0x00000232
     82c:	0000087d 	.word	0x0000087d

00000830 <spi40_rssi>:
 * Return Values(s) : int16_t
 * Description      : Gets the RSSI value from the AX5043 and performs
 *  a rolling average on it. Returns the averaged RSSI as a 2 byte int.
 */
uint16_t spi40_rssi(void)
{
     830:	b510      	push	{r4, lr}
    /* read the RSSI register, put it in the rolling average, and
     * return the new average */
	
	// 9/22/20 edit for testing. removed roll avg. 
 //   return ((uint16_t) ((int8_t) spi40_rollavg(spi40_rd8(AX5043_RSSI))));
	return spi40_rd8(AX5043_RSSI);
     832:	2040      	movs	r0, #64	; 0x40
     834:	4b01      	ldr	r3, [pc, #4]	; (83c <spi40_rssi+0xc>)
     836:	4798      	blx	r3
 
 
}
     838:	bd10      	pop	{r4, pc}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	000002ad 	.word	0x000002ad

00000840 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     840:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     842:	2000      	movs	r0, #0
     844:	4b08      	ldr	r3, [pc, #32]	; (868 <delay_init+0x28>)
     846:	4798      	blx	r3
	cycles_per_ms /= 1000;
     848:	4c08      	ldr	r4, [pc, #32]	; (86c <delay_init+0x2c>)
     84a:	21fa      	movs	r1, #250	; 0xfa
     84c:	0089      	lsls	r1, r1, #2
     84e:	47a0      	blx	r4
     850:	4b07      	ldr	r3, [pc, #28]	; (870 <delay_init+0x30>)
     852:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     854:	21fa      	movs	r1, #250	; 0xfa
     856:	0089      	lsls	r1, r1, #2
     858:	47a0      	blx	r4
     85a:	4b06      	ldr	r3, [pc, #24]	; (874 <delay_init+0x34>)
     85c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     85e:	2205      	movs	r2, #5
     860:	4b05      	ldr	r3, [pc, #20]	; (878 <delay_init+0x38>)
     862:	601a      	str	r2, [r3, #0]
}
     864:	bd10      	pop	{r4, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	00001a95 	.word	0x00001a95
     86c:	00001f95 	.word	0x00001f95
     870:	20000000 	.word	0x20000000
     874:	20000004 	.word	0x20000004
     878:	e000e010 	.word	0xe000e010

0000087c <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     87c:	e000      	b.n	880 <delay_cycles_ms+0x4>
{
     87e:	0010      	movs	r0, r2
	while (n--) {
     880:	1e42      	subs	r2, r0, #1
     882:	2800      	cmp	r0, #0
     884:	d00c      	beq.n	8a0 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     886:	4b07      	ldr	r3, [pc, #28]	; (8a4 <delay_cycles_ms+0x28>)
     888:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     88a:	2b00      	cmp	r3, #0
     88c:	d0f7      	beq.n	87e <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     88e:	4906      	ldr	r1, [pc, #24]	; (8a8 <delay_cycles_ms+0x2c>)
     890:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     892:	2300      	movs	r3, #0
     894:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     896:	4b04      	ldr	r3, [pc, #16]	; (8a8 <delay_cycles_ms+0x2c>)
     898:	681b      	ldr	r3, [r3, #0]
     89a:	03db      	lsls	r3, r3, #15
     89c:	d5fb      	bpl.n	896 <delay_cycles_ms+0x1a>
     89e:	e7ee      	b.n	87e <delay_cycles_ms+0x2>
	}
}
     8a0:	4770      	bx	lr
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	20000000 	.word	0x20000000
     8a8:	e000e010 	.word	0xe000e010

000008ac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     8ac:	b500      	push	{lr}
     8ae:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8b0:	ab01      	add	r3, sp, #4
     8b2:	2280      	movs	r2, #128	; 0x80
     8b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     8b6:	780a      	ldrb	r2, [r1, #0]
     8b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     8ba:	784a      	ldrb	r2, [r1, #1]
     8bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     8be:	788a      	ldrb	r2, [r1, #2]
     8c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     8c2:	0019      	movs	r1, r3
     8c4:	4b01      	ldr	r3, [pc, #4]	; (8cc <port_pin_set_config+0x20>)
     8c6:	4798      	blx	r3
}
     8c8:	b003      	add	sp, #12
     8ca:	bd00      	pop	{pc}
     8cc:	00001cad 	.word	0x00001cad

000008d0 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     8d0:	0849      	lsrs	r1, r1, #1
     8d2:	4281      	cmp	r1, r0
     8d4:	d201      	bcs.n	8da <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8d6:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     8d8:	4770      	bx	lr
     8da:	2300      	movs	r3, #0
     8dc:	e002      	b.n	8e4 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     8de:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     8e0:	3301      	adds	r3, #1
     8e2:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     8e4:	4281      	cmp	r1, r0
     8e6:	d2fa      	bcs.n	8de <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     8e8:	3b01      	subs	r3, #1
     8ea:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     8ec:	2bff      	cmp	r3, #255	; 0xff
     8ee:	d901      	bls.n	8f4 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8f0:	2040      	movs	r0, #64	; 0x40
     8f2:	e7f1      	b.n	8d8 <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     8f4:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     8f6:	2000      	movs	r0, #0
     8f8:	e7ee      	b.n	8d8 <_sercom_get_sync_baud_val+0x8>
	...

000008fc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     8fc:	b510      	push	{r4, lr}
     8fe:	b082      	sub	sp, #8
     900:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     902:	4b0e      	ldr	r3, [pc, #56]	; (93c <sercom_set_gclk_generator+0x40>)
     904:	781b      	ldrb	r3, [r3, #0]
     906:	2b00      	cmp	r3, #0
     908:	d007      	beq.n	91a <sercom_set_gclk_generator+0x1e>
     90a:	2900      	cmp	r1, #0
     90c:	d105      	bne.n	91a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     90e:	4b0b      	ldr	r3, [pc, #44]	; (93c <sercom_set_gclk_generator+0x40>)
     910:	785b      	ldrb	r3, [r3, #1]
     912:	4283      	cmp	r3, r0
     914:	d010      	beq.n	938 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     916:	201d      	movs	r0, #29
     918:	e00c      	b.n	934 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     91a:	a901      	add	r1, sp, #4
     91c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     91e:	2013      	movs	r0, #19
     920:	4b07      	ldr	r3, [pc, #28]	; (940 <sercom_set_gclk_generator+0x44>)
     922:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     924:	2013      	movs	r0, #19
     926:	4b07      	ldr	r3, [pc, #28]	; (944 <sercom_set_gclk_generator+0x48>)
     928:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     92a:	4b04      	ldr	r3, [pc, #16]	; (93c <sercom_set_gclk_generator+0x40>)
     92c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     92e:	2201      	movs	r2, #1
     930:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     932:	2000      	movs	r0, #0
}
     934:	b002      	add	sp, #8
     936:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     938:	2000      	movs	r0, #0
     93a:	e7fb      	b.n	934 <sercom_set_gclk_generator+0x38>
     93c:	2000002c 	.word	0x2000002c
     940:	00001bc9 	.word	0x00001bc9
     944:	00001b41 	.word	0x00001b41

00000948 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     948:	4b40      	ldr	r3, [pc, #256]	; (a4c <_sercom_get_default_pad+0x104>)
     94a:	4298      	cmp	r0, r3
     94c:	d031      	beq.n	9b2 <_sercom_get_default_pad+0x6a>
     94e:	d90a      	bls.n	966 <_sercom_get_default_pad+0x1e>
     950:	4b3f      	ldr	r3, [pc, #252]	; (a50 <_sercom_get_default_pad+0x108>)
     952:	4298      	cmp	r0, r3
     954:	d04d      	beq.n	9f2 <_sercom_get_default_pad+0xaa>
     956:	4b3f      	ldr	r3, [pc, #252]	; (a54 <_sercom_get_default_pad+0x10c>)
     958:	4298      	cmp	r0, r3
     95a:	d05a      	beq.n	a12 <_sercom_get_default_pad+0xca>
     95c:	4b3e      	ldr	r3, [pc, #248]	; (a58 <_sercom_get_default_pad+0x110>)
     95e:	4298      	cmp	r0, r3
     960:	d037      	beq.n	9d2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     962:	2000      	movs	r0, #0
}
     964:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     966:	4b3d      	ldr	r3, [pc, #244]	; (a5c <_sercom_get_default_pad+0x114>)
     968:	4298      	cmp	r0, r3
     96a:	d00c      	beq.n	986 <_sercom_get_default_pad+0x3e>
     96c:	4b3c      	ldr	r3, [pc, #240]	; (a60 <_sercom_get_default_pad+0x118>)
     96e:	4298      	cmp	r0, r3
     970:	d1f7      	bne.n	962 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     972:	2901      	cmp	r1, #1
     974:	d05f      	beq.n	a36 <_sercom_get_default_pad+0xee>
     976:	2900      	cmp	r1, #0
     978:	d015      	beq.n	9a6 <_sercom_get_default_pad+0x5e>
     97a:	2902      	cmp	r1, #2
     97c:	d015      	beq.n	9aa <_sercom_get_default_pad+0x62>
     97e:	2903      	cmp	r1, #3
     980:	d015      	beq.n	9ae <_sercom_get_default_pad+0x66>
	return 0;
     982:	2000      	movs	r0, #0
     984:	e7ee      	b.n	964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     986:	2901      	cmp	r1, #1
     988:	d053      	beq.n	a32 <_sercom_get_default_pad+0xea>
     98a:	2900      	cmp	r1, #0
     98c:	d005      	beq.n	99a <_sercom_get_default_pad+0x52>
     98e:	2902      	cmp	r1, #2
     990:	d005      	beq.n	99e <_sercom_get_default_pad+0x56>
     992:	2903      	cmp	r1, #3
     994:	d005      	beq.n	9a2 <_sercom_get_default_pad+0x5a>
	return 0;
     996:	2000      	movs	r0, #0
     998:	e7e4      	b.n	964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     99a:	4832      	ldr	r0, [pc, #200]	; (a64 <_sercom_get_default_pad+0x11c>)
     99c:	e7e2      	b.n	964 <_sercom_get_default_pad+0x1c>
     99e:	4832      	ldr	r0, [pc, #200]	; (a68 <_sercom_get_default_pad+0x120>)
     9a0:	e7e0      	b.n	964 <_sercom_get_default_pad+0x1c>
     9a2:	4832      	ldr	r0, [pc, #200]	; (a6c <_sercom_get_default_pad+0x124>)
     9a4:	e7de      	b.n	964 <_sercom_get_default_pad+0x1c>
     9a6:	2003      	movs	r0, #3
     9a8:	e7dc      	b.n	964 <_sercom_get_default_pad+0x1c>
     9aa:	4831      	ldr	r0, [pc, #196]	; (a70 <_sercom_get_default_pad+0x128>)
     9ac:	e7da      	b.n	964 <_sercom_get_default_pad+0x1c>
     9ae:	4831      	ldr	r0, [pc, #196]	; (a74 <_sercom_get_default_pad+0x12c>)
     9b0:	e7d8      	b.n	964 <_sercom_get_default_pad+0x1c>
     9b2:	2901      	cmp	r1, #1
     9b4:	d041      	beq.n	a3a <_sercom_get_default_pad+0xf2>
     9b6:	2900      	cmp	r1, #0
     9b8:	d005      	beq.n	9c6 <_sercom_get_default_pad+0x7e>
     9ba:	2902      	cmp	r1, #2
     9bc:	d005      	beq.n	9ca <_sercom_get_default_pad+0x82>
     9be:	2903      	cmp	r1, #3
     9c0:	d005      	beq.n	9ce <_sercom_get_default_pad+0x86>
	return 0;
     9c2:	2000      	movs	r0, #0
     9c4:	e7ce      	b.n	964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9c6:	482c      	ldr	r0, [pc, #176]	; (a78 <_sercom_get_default_pad+0x130>)
     9c8:	e7cc      	b.n	964 <_sercom_get_default_pad+0x1c>
     9ca:	482c      	ldr	r0, [pc, #176]	; (a7c <_sercom_get_default_pad+0x134>)
     9cc:	e7ca      	b.n	964 <_sercom_get_default_pad+0x1c>
     9ce:	482c      	ldr	r0, [pc, #176]	; (a80 <_sercom_get_default_pad+0x138>)
     9d0:	e7c8      	b.n	964 <_sercom_get_default_pad+0x1c>
     9d2:	2901      	cmp	r1, #1
     9d4:	d033      	beq.n	a3e <_sercom_get_default_pad+0xf6>
     9d6:	2900      	cmp	r1, #0
     9d8:	d005      	beq.n	9e6 <_sercom_get_default_pad+0x9e>
     9da:	2902      	cmp	r1, #2
     9dc:	d005      	beq.n	9ea <_sercom_get_default_pad+0xa2>
     9de:	2903      	cmp	r1, #3
     9e0:	d005      	beq.n	9ee <_sercom_get_default_pad+0xa6>
	return 0;
     9e2:	2000      	movs	r0, #0
     9e4:	e7be      	b.n	964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9e6:	4827      	ldr	r0, [pc, #156]	; (a84 <_sercom_get_default_pad+0x13c>)
     9e8:	e7bc      	b.n	964 <_sercom_get_default_pad+0x1c>
     9ea:	4827      	ldr	r0, [pc, #156]	; (a88 <_sercom_get_default_pad+0x140>)
     9ec:	e7ba      	b.n	964 <_sercom_get_default_pad+0x1c>
     9ee:	4827      	ldr	r0, [pc, #156]	; (a8c <_sercom_get_default_pad+0x144>)
     9f0:	e7b8      	b.n	964 <_sercom_get_default_pad+0x1c>
     9f2:	2901      	cmp	r1, #1
     9f4:	d025      	beq.n	a42 <_sercom_get_default_pad+0xfa>
     9f6:	2900      	cmp	r1, #0
     9f8:	d005      	beq.n	a06 <_sercom_get_default_pad+0xbe>
     9fa:	2902      	cmp	r1, #2
     9fc:	d005      	beq.n	a0a <_sercom_get_default_pad+0xc2>
     9fe:	2903      	cmp	r1, #3
     a00:	d005      	beq.n	a0e <_sercom_get_default_pad+0xc6>
	return 0;
     a02:	2000      	movs	r0, #0
     a04:	e7ae      	b.n	964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a06:	4822      	ldr	r0, [pc, #136]	; (a90 <_sercom_get_default_pad+0x148>)
     a08:	e7ac      	b.n	964 <_sercom_get_default_pad+0x1c>
     a0a:	4822      	ldr	r0, [pc, #136]	; (a94 <_sercom_get_default_pad+0x14c>)
     a0c:	e7aa      	b.n	964 <_sercom_get_default_pad+0x1c>
     a0e:	4822      	ldr	r0, [pc, #136]	; (a98 <_sercom_get_default_pad+0x150>)
     a10:	e7a8      	b.n	964 <_sercom_get_default_pad+0x1c>
     a12:	2901      	cmp	r1, #1
     a14:	d017      	beq.n	a46 <_sercom_get_default_pad+0xfe>
     a16:	2900      	cmp	r1, #0
     a18:	d005      	beq.n	a26 <_sercom_get_default_pad+0xde>
     a1a:	2902      	cmp	r1, #2
     a1c:	d005      	beq.n	a2a <_sercom_get_default_pad+0xe2>
     a1e:	2903      	cmp	r1, #3
     a20:	d005      	beq.n	a2e <_sercom_get_default_pad+0xe6>
	return 0;
     a22:	2000      	movs	r0, #0
     a24:	e79e      	b.n	964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a26:	481d      	ldr	r0, [pc, #116]	; (a9c <_sercom_get_default_pad+0x154>)
     a28:	e79c      	b.n	964 <_sercom_get_default_pad+0x1c>
     a2a:	481d      	ldr	r0, [pc, #116]	; (aa0 <_sercom_get_default_pad+0x158>)
     a2c:	e79a      	b.n	964 <_sercom_get_default_pad+0x1c>
     a2e:	481d      	ldr	r0, [pc, #116]	; (aa4 <_sercom_get_default_pad+0x15c>)
     a30:	e798      	b.n	964 <_sercom_get_default_pad+0x1c>
     a32:	481d      	ldr	r0, [pc, #116]	; (aa8 <_sercom_get_default_pad+0x160>)
     a34:	e796      	b.n	964 <_sercom_get_default_pad+0x1c>
     a36:	481d      	ldr	r0, [pc, #116]	; (aac <_sercom_get_default_pad+0x164>)
     a38:	e794      	b.n	964 <_sercom_get_default_pad+0x1c>
     a3a:	481d      	ldr	r0, [pc, #116]	; (ab0 <_sercom_get_default_pad+0x168>)
     a3c:	e792      	b.n	964 <_sercom_get_default_pad+0x1c>
     a3e:	481d      	ldr	r0, [pc, #116]	; (ab4 <_sercom_get_default_pad+0x16c>)
     a40:	e790      	b.n	964 <_sercom_get_default_pad+0x1c>
     a42:	481d      	ldr	r0, [pc, #116]	; (ab8 <_sercom_get_default_pad+0x170>)
     a44:	e78e      	b.n	964 <_sercom_get_default_pad+0x1c>
     a46:	481d      	ldr	r0, [pc, #116]	; (abc <_sercom_get_default_pad+0x174>)
     a48:	e78c      	b.n	964 <_sercom_get_default_pad+0x1c>
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	42001000 	.word	0x42001000
     a50:	42001800 	.word	0x42001800
     a54:	42001c00 	.word	0x42001c00
     a58:	42001400 	.word	0x42001400
     a5c:	42000800 	.word	0x42000800
     a60:	42000c00 	.word	0x42000c00
     a64:	00040003 	.word	0x00040003
     a68:	00060003 	.word	0x00060003
     a6c:	00070003 	.word	0x00070003
     a70:	001e0003 	.word	0x001e0003
     a74:	001f0003 	.word	0x001f0003
     a78:	00080003 	.word	0x00080003
     a7c:	000a0003 	.word	0x000a0003
     a80:	000b0003 	.word	0x000b0003
     a84:	00100003 	.word	0x00100003
     a88:	00120003 	.word	0x00120003
     a8c:	00130003 	.word	0x00130003
     a90:	000c0003 	.word	0x000c0003
     a94:	000e0003 	.word	0x000e0003
     a98:	000f0003 	.word	0x000f0003
     a9c:	00160003 	.word	0x00160003
     aa0:	00180003 	.word	0x00180003
     aa4:	00190003 	.word	0x00190003
     aa8:	00050003 	.word	0x00050003
     aac:	00010003 	.word	0x00010003
     ab0:	00090003 	.word	0x00090003
     ab4:	00110003 	.word	0x00110003
     ab8:	000d0003 	.word	0x000d0003
     abc:	00170003 	.word	0x00170003

00000ac0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     ac0:	b530      	push	{r4, r5, lr}
     ac2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     ac4:	4c0a      	ldr	r4, [pc, #40]	; (af0 <_sercom_get_sercom_inst_index+0x30>)
     ac6:	466b      	mov	r3, sp
     ac8:	0022      	movs	r2, r4
     aca:	ca32      	ldmia	r2!, {r1, r4, r5}
     acc:	c332      	stmia	r3!, {r1, r4, r5}
     ace:	ca32      	ldmia	r2!, {r1, r4, r5}
     ad0:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ad2:	2300      	movs	r3, #0
     ad4:	2b05      	cmp	r3, #5
     ad6:	d808      	bhi.n	aea <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ad8:	009a      	lsls	r2, r3, #2
     ada:	4669      	mov	r1, sp
     adc:	5852      	ldr	r2, [r2, r1]
     ade:	4282      	cmp	r2, r0
     ae0:	d001      	beq.n	ae6 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ae2:	3301      	adds	r3, #1
     ae4:	e7f6      	b.n	ad4 <_sercom_get_sercom_inst_index+0x14>
			return i;
     ae6:	b2d8      	uxtb	r0, r3
     ae8:	e000      	b.n	aec <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     aea:	2000      	movs	r0, #0
}
     aec:	b007      	add	sp, #28
     aee:	bd30      	pop	{r4, r5, pc}
     af0:	00002118 	.word	0x00002118

00000af4 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     af4:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     af6:	2202      	movs	r2, #2
     af8:	761a      	strb	r2, [r3, #24]
}
     afa:	4770      	bx	lr

00000afc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     afc:	b5f0      	push	{r4, r5, r6, r7, lr}
     afe:	b087      	sub	sp, #28
     b00:	0007      	movs	r7, r0
     b02:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b04:	6806      	ldr	r6, [r0, #0]
     b06:	ab05      	add	r3, sp, #20
     b08:	2280      	movs	r2, #128	; 0x80
     b0a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b0c:	2200      	movs	r2, #0
     b0e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b10:	2101      	movs	r1, #1
     b12:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     b14:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     b16:	782b      	ldrb	r3, [r5, #0]
     b18:	2b00      	cmp	r3, #0
     b1a:	d101      	bne.n	b20 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b1c:	ab05      	add	r3, sp, #20
     b1e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     b20:	6aab      	ldr	r3, [r5, #40]	; 0x28
     b22:	9301      	str	r3, [sp, #4]
     b24:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     b26:	9302      	str	r3, [sp, #8]
     b28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     b2a:	9303      	str	r3, [sp, #12]
     b2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     b2e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     b30:	2400      	movs	r4, #0
     b32:	e006      	b.n	b42 <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b34:	0021      	movs	r1, r4
     b36:	0030      	movs	r0, r6
     b38:	4b3d      	ldr	r3, [pc, #244]	; (c30 <_spi_set_config+0x134>)
     b3a:	4798      	blx	r3
     b3c:	e008      	b.n	b50 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     b3e:	3401      	adds	r4, #1
     b40:	b2e4      	uxtb	r4, r4
     b42:	2c03      	cmp	r4, #3
     b44:	d80d      	bhi.n	b62 <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b46:	00a3      	lsls	r3, r4, #2
     b48:	aa01      	add	r2, sp, #4
     b4a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     b4c:	2800      	cmp	r0, #0
     b4e:	d0f1      	beq.n	b34 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     b50:	1c43      	adds	r3, r0, #1
     b52:	d0f4      	beq.n	b3e <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b54:	a905      	add	r1, sp, #20
     b56:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b58:	0c00      	lsrs	r0, r0, #16
     b5a:	b2c0      	uxtb	r0, r0
     b5c:	4b35      	ldr	r3, [pc, #212]	; (c34 <_spi_set_config+0x138>)
     b5e:	4798      	blx	r3
     b60:	e7ed      	b.n	b3e <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     b62:	782b      	ldrb	r3, [r5, #0]
     b64:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     b66:	7c2b      	ldrb	r3, [r5, #16]
     b68:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     b6a:	7cab      	ldrb	r3, [r5, #18]
     b6c:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     b6e:	7d2b      	ldrb	r3, [r5, #20]
     b70:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     b72:	2200      	movs	r2, #0
     b74:	466b      	mov	r3, sp
     b76:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     b78:	782b      	ldrb	r3, [r5, #0]
     b7a:	2b01      	cmp	r3, #1
     b7c:	d014      	beq.n	ba8 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     b7e:	782b      	ldrb	r3, [r5, #0]
     b80:	2b00      	cmp	r3, #0
     b82:	d127      	bne.n	bd4 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     b84:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     b86:	8baa      	ldrh	r2, [r5, #28]
     b88:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     b8a:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     b8c:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     b8e:	7fef      	ldrb	r7, [r5, #31]
     b90:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     b92:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     b94:	4320      	orrs	r0, r4
     b96:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     b98:	2020      	movs	r0, #32
     b9a:	5c28      	ldrb	r0, [r5, r0]
     b9c:	2800      	cmp	r0, #0
     b9e:	d01b      	beq.n	bd8 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     ba0:	2140      	movs	r1, #64	; 0x40
     ba2:	4311      	orrs	r1, r2
     ba4:	b289      	uxth	r1, r1
     ba6:	e017      	b.n	bd8 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ba8:	6838      	ldr	r0, [r7, #0]
     baa:	4b23      	ldr	r3, [pc, #140]	; (c38 <_spi_set_config+0x13c>)
     bac:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bae:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     bb0:	b2c0      	uxtb	r0, r0
     bb2:	4b22      	ldr	r3, [pc, #136]	; (c3c <_spi_set_config+0x140>)
     bb4:	4798      	blx	r3
     bb6:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     bb8:	466b      	mov	r3, sp
     bba:	1c9a      	adds	r2, r3, #2
     bbc:	69a8      	ldr	r0, [r5, #24]
     bbe:	4b20      	ldr	r3, [pc, #128]	; (c40 <_spi_set_config+0x144>)
     bc0:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     bc2:	2800      	cmp	r0, #0
     bc4:	d001      	beq.n	bca <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     bc6:	2017      	movs	r0, #23
     bc8:	e030      	b.n	c2c <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     bca:	466b      	mov	r3, sp
     bcc:	3302      	adds	r3, #2
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	7333      	strb	r3, [r6, #12]
     bd2:	e7d4      	b.n	b7e <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     bd4:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     bd6:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     bd8:	686a      	ldr	r2, [r5, #4]
     bda:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     bdc:	68aa      	ldr	r2, [r5, #8]
     bde:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     be0:	68ea      	ldr	r2, [r5, #12]
     be2:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     be4:	7c2a      	ldrb	r2, [r5, #16]
     be6:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     be8:	7c69      	ldrb	r1, [r5, #17]
     bea:	2900      	cmp	r1, #0
     bec:	d103      	bne.n	bf6 <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     bee:	4915      	ldr	r1, [pc, #84]	; (c44 <_spi_set_config+0x148>)
     bf0:	7889      	ldrb	r1, [r1, #2]
     bf2:	0789      	lsls	r1, r1, #30
     bf4:	d501      	bpl.n	bfa <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     bf6:	2180      	movs	r1, #128	; 0x80
     bf8:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     bfa:	7ca9      	ldrb	r1, [r5, #18]
     bfc:	2900      	cmp	r1, #0
     bfe:	d002      	beq.n	c06 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     c00:	2180      	movs	r1, #128	; 0x80
     c02:	0289      	lsls	r1, r1, #10
     c04:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     c06:	7ce9      	ldrb	r1, [r5, #19]
     c08:	2900      	cmp	r1, #0
     c0a:	d002      	beq.n	c12 <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     c0c:	2180      	movs	r1, #128	; 0x80
     c0e:	0089      	lsls	r1, r1, #2
     c10:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     c12:	7d29      	ldrb	r1, [r5, #20]
     c14:	2900      	cmp	r1, #0
     c16:	d002      	beq.n	c1e <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     c18:	2180      	movs	r1, #128	; 0x80
     c1a:	0189      	lsls	r1, r1, #6
     c1c:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     c1e:	6831      	ldr	r1, [r6, #0]
     c20:	430b      	orrs	r3, r1
     c22:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     c24:	6873      	ldr	r3, [r6, #4]
     c26:	431a      	orrs	r2, r3
     c28:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     c2a:	2000      	movs	r0, #0
}
     c2c:	b007      	add	sp, #28
     c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c30:	00000949 	.word	0x00000949
     c34:	00001cad 	.word	0x00001cad
     c38:	00000ac1 	.word	0x00000ac1
     c3c:	00001be5 	.word	0x00001be5
     c40:	000008d1 	.word	0x000008d1
     c44:	41002000 	.word	0x41002000

00000c48 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     c48:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4a:	b085      	sub	sp, #20
     c4c:	0005      	movs	r5, r0
     c4e:	000c      	movs	r4, r1
     c50:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     c52:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     c54:	680b      	ldr	r3, [r1, #0]
     c56:	079b      	lsls	r3, r3, #30
     c58:	d502      	bpl.n	c60 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     c5a:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     c5c:	b005      	add	sp, #20
     c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     c60:	680b      	ldr	r3, [r1, #0]
     c62:	07db      	lsls	r3, r3, #31
     c64:	d501      	bpl.n	c6a <spi_init+0x22>
		return STATUS_BUSY;
     c66:	2005      	movs	r0, #5
     c68:	e7f8      	b.n	c5c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c6a:	0008      	movs	r0, r1
     c6c:	4b28      	ldr	r3, [pc, #160]	; (d10 <spi_init+0xc8>)
     c6e:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c70:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c72:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     c74:	2301      	movs	r3, #1
     c76:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     c78:	4a26      	ldr	r2, [pc, #152]	; (d14 <spi_init+0xcc>)
     c7a:	6a11      	ldr	r1, [r2, #32]
     c7c:	430b      	orrs	r3, r1
     c7e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     c80:	2724      	movs	r7, #36	; 0x24
     c82:	5df3      	ldrb	r3, [r6, r7]
     c84:	a903      	add	r1, sp, #12
     c86:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c88:	b2c3      	uxtb	r3, r0
     c8a:	9301      	str	r3, [sp, #4]
     c8c:	0018      	movs	r0, r3
     c8e:	4b22      	ldr	r3, [pc, #136]	; (d18 <spi_init+0xd0>)
     c90:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     c92:	9801      	ldr	r0, [sp, #4]
     c94:	4b21      	ldr	r3, [pc, #132]	; (d1c <spi_init+0xd4>)
     c96:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     c98:	5df0      	ldrb	r0, [r6, r7]
     c9a:	2100      	movs	r1, #0
     c9c:	4b20      	ldr	r3, [pc, #128]	; (d20 <spi_init+0xd8>)
     c9e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     ca0:	7833      	ldrb	r3, [r6, #0]
     ca2:	2b01      	cmp	r3, #1
     ca4:	d008      	beq.n	cb8 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     ca6:	7833      	ldrb	r3, [r6, #0]
     ca8:	2b00      	cmp	r3, #0
     caa:	d103      	bne.n	cb4 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     cac:	6823      	ldr	r3, [r4, #0]
     cae:	2208      	movs	r2, #8
     cb0:	4313      	orrs	r3, r2
     cb2:	6023      	str	r3, [r4, #0]
{
     cb4:	2300      	movs	r3, #0
     cb6:	e00b      	b.n	cd0 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     cb8:	6823      	ldr	r3, [r4, #0]
     cba:	220c      	movs	r2, #12
     cbc:	4313      	orrs	r3, r2
     cbe:	6023      	str	r3, [r4, #0]
     cc0:	e7f1      	b.n	ca6 <spi_init+0x5e>
		module->callback[i]        = NULL;
     cc2:	1c9a      	adds	r2, r3, #2
     cc4:	0092      	lsls	r2, r2, #2
     cc6:	18aa      	adds	r2, r5, r2
     cc8:	2100      	movs	r1, #0
     cca:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     ccc:	3301      	adds	r3, #1
     cce:	b2db      	uxtb	r3, r3
     cd0:	2b06      	cmp	r3, #6
     cd2:	d9f6      	bls.n	cc2 <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     cd4:	2200      	movs	r2, #0
     cd6:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     cd8:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     cda:	2300      	movs	r3, #0
     cdc:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     cde:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     ce0:	3236      	adds	r2, #54	; 0x36
     ce2:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     ce4:	3201      	adds	r2, #1
     ce6:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     ce8:	3201      	adds	r2, #1
     cea:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     cec:	3a35      	subs	r2, #53	; 0x35
     cee:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     cf0:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     cf2:	6828      	ldr	r0, [r5, #0]
     cf4:	4b06      	ldr	r3, [pc, #24]	; (d10 <spi_init+0xc8>)
     cf6:	4798      	blx	r3
     cf8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     cfa:	490a      	ldr	r1, [pc, #40]	; (d24 <spi_init+0xdc>)
     cfc:	4b0a      	ldr	r3, [pc, #40]	; (d28 <spi_init+0xe0>)
     cfe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     d00:	00a4      	lsls	r4, r4, #2
     d02:	4b0a      	ldr	r3, [pc, #40]	; (d2c <spi_init+0xe4>)
     d04:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     d06:	0031      	movs	r1, r6
     d08:	0028      	movs	r0, r5
     d0a:	4b09      	ldr	r3, [pc, #36]	; (d30 <spi_init+0xe8>)
     d0c:	4798      	blx	r3
     d0e:	e7a5      	b.n	c5c <spi_init+0x14>
     d10:	00000ac1 	.word	0x00000ac1
     d14:	40000400 	.word	0x40000400
     d18:	00001bc9 	.word	0x00001bc9
     d1c:	00001b41 	.word	0x00001b41
     d20:	000008fd 	.word	0x000008fd
     d24:	00001425 	.word	0x00001425
     d28:	000015f1 	.word	0x000015f1
     d2c:	200000ac 	.word	0x200000ac
     d30:	00000afd 	.word	0x00000afd

00000d34 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d36:	0004      	movs	r4, r0
     d38:	000e      	movs	r6, r1
     d3a:	0017      	movs	r7, r2
     d3c:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     d3e:	2338      	movs	r3, #56	; 0x38
     d40:	5cc3      	ldrb	r3, [r0, r3]
     d42:	2b05      	cmp	r3, #5
     d44:	d06d      	beq.n	e22 <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     d46:	2a00      	cmp	r2, #0
     d48:	d101      	bne.n	d4e <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     d4a:	2217      	movs	r2, #23
     d4c:	e06a      	b.n	e24 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     d4e:	79c3      	ldrb	r3, [r0, #7]
     d50:	2b00      	cmp	r3, #0
     d52:	d101      	bne.n	d58 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     d54:	221c      	movs	r2, #28
     d56:	e065      	b.n	e24 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     d58:	7943      	ldrb	r3, [r0, #5]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d103      	bne.n	d66 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     d5e:	6803      	ldr	r3, [r0, #0]
     d60:	7e1b      	ldrb	r3, [r3, #24]
     d62:	079b      	lsls	r3, r3, #30
     d64:	d401      	bmi.n	d6a <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     d66:	2000      	movs	r0, #0
     d68:	e037      	b.n	dda <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     d6a:	4b2f      	ldr	r3, [pc, #188]	; (e28 <spi_read_buffer_wait+0xf4>)
     d6c:	4798      	blx	r3
     d6e:	e7fa      	b.n	d66 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d70:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d72:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     d74:	07d2      	lsls	r2, r2, #31
     d76:	d5fb      	bpl.n	d70 <spi_read_buffer_wait+0x3c>
     d78:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     d7a:	07d2      	lsls	r2, r2, #31
     d7c:	d534      	bpl.n	de8 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d7e:	05ea      	lsls	r2, r5, #23
     d80:	0dd2      	lsrs	r2, r2, #23
     d82:	629a      	str	r2, [r3, #40]	; 0x28
     d84:	e030      	b.n	de8 <spi_read_buffer_wait+0xb4>
     d86:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     d88:	4a28      	ldr	r2, [pc, #160]	; (e2c <spi_read_buffer_wait+0xf8>)
     d8a:	4293      	cmp	r3, r2
     d8c:	d805      	bhi.n	d9a <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d8e:	6822      	ldr	r2, [r4, #0]
     d90:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     d92:	0752      	lsls	r2, r2, #29
     d94:	d401      	bmi.n	d9a <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     d96:	3301      	adds	r3, #1
     d98:	e7f6      	b.n	d88 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d9a:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     d9c:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     d9e:	0792      	lsls	r2, r2, #30
     da0:	d404      	bmi.n	dac <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     da2:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     da4:	075b      	lsls	r3, r3, #29
     da6:	d422      	bmi.n	dee <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     da8:	2212      	movs	r2, #18
     daa:	e03b      	b.n	e24 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     dac:	0020      	movs	r0, r4
     dae:	4b1e      	ldr	r3, [pc, #120]	; (e28 <spi_read_buffer_wait+0xf4>)
     db0:	4798      	blx	r3
				return STATUS_ABORTED;
     db2:	2204      	movs	r2, #4
     db4:	e036      	b.n	e24 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     db6:	2200      	movs	r2, #0
     db8:	e026      	b.n	e08 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     dba:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     dbc:	05ff      	lsls	r7, r7, #23
     dbe:	0dff      	lsrs	r7, r7, #23
     dc0:	e001      	b.n	dc6 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     dc2:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     dc4:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     dc6:	2a00      	cmp	r2, #0
     dc8:	d12c      	bne.n	e24 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     dca:	1c43      	adds	r3, r0, #1
     dcc:	b29b      	uxth	r3, r3
     dce:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     dd0:	79a2      	ldrb	r2, [r4, #6]
     dd2:	2a01      	cmp	r2, #1
     dd4:	d01e      	beq.n	e14 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     dd6:	0018      	movs	r0, r3
     dd8:	000f      	movs	r7, r1
	while (length--) {
     dda:	1e79      	subs	r1, r7, #1
     ddc:	b289      	uxth	r1, r1
     dde:	2f00      	cmp	r7, #0
     de0:	d01d      	beq.n	e1e <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     de2:	7963      	ldrb	r3, [r4, #5]
     de4:	2b01      	cmp	r3, #1
     de6:	d0c3      	beq.n	d70 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     de8:	7963      	ldrb	r3, [r4, #5]
     dea:	2b00      	cmp	r3, #0
     dec:	d0cb      	beq.n	d86 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     dee:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     df0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     df2:	0752      	lsls	r2, r2, #29
     df4:	d5fb      	bpl.n	dee <spi_read_buffer_wait+0xba>
     df6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     df8:	0752      	lsls	r2, r2, #29
     dfa:	d5e2      	bpl.n	dc2 <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     dfc:	8b5a      	ldrh	r2, [r3, #26]
     dfe:	0752      	lsls	r2, r2, #29
     e00:	d5d9      	bpl.n	db6 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     e02:	2204      	movs	r2, #4
     e04:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     e06:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e08:	79a7      	ldrb	r7, [r4, #6]
     e0a:	2f01      	cmp	r7, #1
     e0c:	d0d5      	beq.n	dba <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e0e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     e10:	b2ff      	uxtb	r7, r7
     e12:	e7d8      	b.n	dc6 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     e14:	3002      	adds	r0, #2
     e16:	0a3f      	lsrs	r7, r7, #8
     e18:	54f7      	strb	r7, [r6, r3]
     e1a:	b283      	uxth	r3, r0
     e1c:	e7db      	b.n	dd6 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     e1e:	2200      	movs	r2, #0
     e20:	e000      	b.n	e24 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     e22:	2205      	movs	r2, #5
}
     e24:	0010      	movs	r0, r2
     e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e28:	00000af5 	.word	0x00000af5
     e2c:	00002710 	.word	0x00002710

00000e30 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     e30:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     e32:	7943      	ldrb	r3, [r0, #5]
     e34:	2b01      	cmp	r3, #1
     e36:	d001      	beq.n	e3c <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     e38:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     e3a:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     e3c:	7a03      	ldrb	r3, [r0, #8]
     e3e:	2b00      	cmp	r3, #0
     e40:	d16c      	bne.n	f1c <spi_select_slave+0xec>
		if (select) {
     e42:	2a00      	cmp	r2, #0
     e44:	d058      	beq.n	ef8 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     e46:	784b      	ldrb	r3, [r1, #1]
     e48:	2b00      	cmp	r3, #0
     e4a:	d043      	beq.n	ed4 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e4c:	6803      	ldr	r3, [r0, #0]
     e4e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     e50:	07db      	lsls	r3, r3, #31
     e52:	d411      	bmi.n	e78 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     e54:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e56:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e58:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e5a:	2900      	cmp	r1, #0
     e5c:	d10a      	bne.n	e74 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     e5e:	01db      	lsls	r3, r3, #7
     e60:	4931      	ldr	r1, [pc, #196]	; (f28 <spi_select_slave+0xf8>)
     e62:	468c      	mov	ip, r1
     e64:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e66:	211f      	movs	r1, #31
     e68:	4011      	ands	r1, r2
     e6a:	2201      	movs	r2, #1
     e6c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     e6e:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     e70:	2005      	movs	r0, #5
     e72:	e7e2      	b.n	e3a <spi_select_slave+0xa>
		return NULL;
     e74:	2300      	movs	r3, #0
     e76:	e7f6      	b.n	e66 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     e78:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e7a:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e7c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e7e:	2c00      	cmp	r4, #0
     e80:	d104      	bne.n	e8c <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     e82:	01db      	lsls	r3, r3, #7
     e84:	4c28      	ldr	r4, [pc, #160]	; (f28 <spi_select_slave+0xf8>)
     e86:	46a4      	mov	ip, r4
     e88:	4463      	add	r3, ip
     e8a:	e000      	b.n	e8e <spi_select_slave+0x5e>
		return NULL;
     e8c:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e8e:	241f      	movs	r4, #31
     e90:	4014      	ands	r4, r2
     e92:	2201      	movs	r2, #1
     e94:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     e96:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     e98:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     e9a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e9c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     e9e:	07c9      	lsls	r1, r1, #31
     ea0:	d500      	bpl.n	ea4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ea2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     ea4:	79c3      	ldrb	r3, [r0, #7]
     ea6:	2b00      	cmp	r3, #0
     ea8:	d13a      	bne.n	f20 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     eaa:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     eac:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     eae:	0752      	lsls	r2, r2, #29
     eb0:	d5fb      	bpl.n	eaa <spi_select_slave+0x7a>
     eb2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     eb4:	0752      	lsls	r2, r2, #29
     eb6:	d535      	bpl.n	f24 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     eb8:	8b5a      	ldrh	r2, [r3, #26]
     eba:	0752      	lsls	r2, r2, #29
     ebc:	d501      	bpl.n	ec2 <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     ebe:	2204      	movs	r2, #4
     ec0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ec2:	7982      	ldrb	r2, [r0, #6]
     ec4:	2a01      	cmp	r2, #1
     ec6:	d002      	beq.n	ece <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     eca:	2000      	movs	r0, #0
     ecc:	e7b5      	b.n	e3a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ed0:	2000      	movs	r0, #0
     ed2:	e7b2      	b.n	e3a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     ed4:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     ed6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     ed8:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     eda:	2900      	cmp	r1, #0
     edc:	d10a      	bne.n	ef4 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     ede:	01db      	lsls	r3, r3, #7
     ee0:	4911      	ldr	r1, [pc, #68]	; (f28 <spi_select_slave+0xf8>)
     ee2:	468c      	mov	ip, r1
     ee4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ee6:	211f      	movs	r1, #31
     ee8:	4011      	ands	r1, r2
     eea:	2201      	movs	r2, #1
     eec:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     eee:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     ef0:	2000      	movs	r0, #0
     ef2:	e7a2      	b.n	e3a <spi_select_slave+0xa>
		return NULL;
     ef4:	2300      	movs	r3, #0
     ef6:	e7f6      	b.n	ee6 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     ef8:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     efa:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     efc:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     efe:	2900      	cmp	r1, #0
     f00:	d10a      	bne.n	f18 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     f02:	01db      	lsls	r3, r3, #7
     f04:	4908      	ldr	r1, [pc, #32]	; (f28 <spi_select_slave+0xf8>)
     f06:	468c      	mov	ip, r1
     f08:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f0a:	211f      	movs	r1, #31
     f0c:	4011      	ands	r1, r2
     f0e:	2201      	movs	r2, #1
     f10:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     f12:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     f14:	2000      	movs	r0, #0
     f16:	e790      	b.n	e3a <spi_select_slave+0xa>
		return NULL;
     f18:	2300      	movs	r3, #0
     f1a:	e7f6      	b.n	f0a <spi_select_slave+0xda>
     f1c:	2000      	movs	r0, #0
     f1e:	e78c      	b.n	e3a <spi_select_slave+0xa>
     f20:	2000      	movs	r0, #0
     f22:	e78a      	b.n	e3a <spi_select_slave+0xa>
     f24:	2000      	movs	r0, #0
     f26:	e788      	b.n	e3a <spi_select_slave+0xa>
     f28:	41004400 	.word	0x41004400

00000f2c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f2e:	46d6      	mov	lr, sl
     f30:	464f      	mov	r7, r9
     f32:	4646      	mov	r6, r8
     f34:	b5c0      	push	{r6, r7, lr}
     f36:	b082      	sub	sp, #8
     f38:	0004      	movs	r4, r0
     f3a:	468a      	mov	sl, r1
     f3c:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     f3e:	2338      	movs	r3, #56	; 0x38
     f40:	5cc3      	ldrb	r3, [r0, r3]
     f42:	2b05      	cmp	r3, #5
     f44:	d100      	bne.n	f48 <spi_write_buffer_wait+0x1c>
     f46:	e0d8      	b.n	10fa <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     f48:	2a00      	cmp	r2, #0
     f4a:	d101      	bne.n	f50 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     f4c:	2017      	movs	r0, #23
     f4e:	e0d5      	b.n	10fc <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     f50:	7943      	ldrb	r3, [r0, #5]
     f52:	2b00      	cmp	r3, #0
     f54:	d103      	bne.n	f5e <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f56:	6803      	ldr	r3, [r0, #0]
     f58:	7e1b      	ldrb	r3, [r3, #24]
     f5a:	079b      	lsls	r3, r3, #30
     f5c:	d402      	bmi.n	f64 <spi_write_buffer_wait+0x38>
     f5e:	46bc      	mov	ip, r7
     f60:	2600      	movs	r6, #0
     f62:	e025      	b.n	fb0 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     f64:	4b6a      	ldr	r3, [pc, #424]	; (1110 <spi_write_buffer_wait+0x1e4>)
     f66:	4798      	blx	r3
     f68:	e7f9      	b.n	f5e <spi_write_buffer_wait+0x32>
     f6a:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f6c:	4a69      	ldr	r2, [pc, #420]	; (1114 <spi_write_buffer_wait+0x1e8>)
     f6e:	4293      	cmp	r3, r2
     f70:	d805      	bhi.n	f7e <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f72:	6822      	ldr	r2, [r4, #0]
     f74:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     f76:	07d2      	lsls	r2, r2, #31
     f78:	d401      	bmi.n	f7e <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f7a:	3301      	adds	r3, #1
     f7c:	e7f6      	b.n	f6c <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f7e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f80:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     f82:	0792      	lsls	r2, r2, #30
     f84:	d404      	bmi.n	f90 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f86:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     f88:	07db      	lsls	r3, r3, #31
     f8a:	d418      	bmi.n	fbe <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     f8c:	2012      	movs	r0, #18
     f8e:	e0b5      	b.n	10fc <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     f90:	0020      	movs	r0, r4
     f92:	4b5f      	ldr	r3, [pc, #380]	; (1110 <spi_write_buffer_wait+0x1e4>)
     f94:	4798      	blx	r3
				return STATUS_ABORTED;
     f96:	2004      	movs	r0, #4
     f98:	e0b0      	b.n	10fc <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     f9a:	3602      	adds	r6, #2
     f9c:	b2b6      	uxth	r6, r6
     f9e:	4652      	mov	r2, sl
     fa0:	5dd2      	ldrb	r2, [r2, r7]
     fa2:	0212      	lsls	r2, r2, #8
     fa4:	4302      	orrs	r2, r0
     fa6:	e017      	b.n	fd8 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     fa8:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     faa:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     fac:	2b00      	cmp	r3, #0
     fae:	d11a      	bne.n	fe6 <spi_write_buffer_wait+0xba>
	while (length--) {
     fb0:	1e79      	subs	r1, r7, #1
     fb2:	b289      	uxth	r1, r1
     fb4:	2f00      	cmp	r7, #0
     fb6:	d06c      	beq.n	1092 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     fb8:	7963      	ldrb	r3, [r4, #5]
     fba:	2b00      	cmp	r3, #0
     fbc:	d0d5      	beq.n	f6a <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fbe:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fc0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     fc2:	07d2      	lsls	r2, r2, #31
     fc4:	d5fb      	bpl.n	fbe <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     fc6:	1c77      	adds	r7, r6, #1
     fc8:	b2bf      	uxth	r7, r7
     fca:	4652      	mov	r2, sl
     fcc:	5d90      	ldrb	r0, [r2, r6]
     fce:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fd0:	79a5      	ldrb	r5, [r4, #6]
     fd2:	2d01      	cmp	r5, #1
     fd4:	d0e1      	beq.n	f9a <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     fd6:	003e      	movs	r6, r7
     fd8:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     fda:	07f8      	lsls	r0, r7, #31
     fdc:	d5e4      	bpl.n	fa8 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fde:	05d2      	lsls	r2, r2, #23
     fe0:	0dd2      	lsrs	r2, r2, #23
     fe2:	629a      	str	r2, [r3, #40]	; 0x28
     fe4:	e7e0      	b.n	fa8 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     fe6:	7963      	ldrb	r3, [r4, #5]
     fe8:	2b00      	cmp	r3, #0
     fea:	d040      	beq.n	106e <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fec:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fee:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     ff0:	0752      	lsls	r2, r2, #29
     ff2:	d5fb      	bpl.n	fec <spi_write_buffer_wait+0xc0>
     ff4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     ff6:	0752      	lsls	r2, r2, #29
     ff8:	d508      	bpl.n	100c <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     ffa:	8b5a      	ldrh	r2, [r3, #26]
     ffc:	0752      	lsls	r2, r2, #29
     ffe:	d501      	bpl.n	1004 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1000:	2204      	movs	r2, #4
    1002:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1004:	79a2      	ldrb	r2, [r4, #6]
    1006:	2a01      	cmp	r2, #1
    1008:	d041      	beq.n	108e <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
    100c:	4660      	mov	r0, ip
    100e:	3801      	subs	r0, #1
    1010:	b283      	uxth	r3, r0
    1012:	469c      	mov	ip, r3
    1014:	000f      	movs	r7, r1
    1016:	e7cb      	b.n	fb0 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1018:	3602      	adds	r6, #2
    101a:	4655      	mov	r5, sl
    101c:	5c2f      	ldrb	r7, [r5, r0]
    101e:	023f      	lsls	r7, r7, #8
    1020:	4640      	mov	r0, r8
    1022:	4307      	orrs	r7, r0
    1024:	b2b0      	uxth	r0, r6
    1026:	e01b      	b.n	1060 <spi_write_buffer_wait+0x134>
						length--;
    1028:	3901      	subs	r1, #1
    102a:	b289      	uxth	r1, r1
    102c:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    102e:	6822      	ldr	r2, [r4, #0]
    1030:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    1032:	0752      	lsls	r2, r2, #29
    1034:	d41d      	bmi.n	1072 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1036:	3301      	adds	r3, #1
    1038:	4a36      	ldr	r2, [pc, #216]	; (1114 <spi_write_buffer_wait+0x1e8>)
    103a:	4293      	cmp	r3, r2
    103c:	d819      	bhi.n	1072 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
    103e:	2900      	cmp	r1, #0
    1040:	d0f5      	beq.n	102e <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1042:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1044:	7e17      	ldrb	r7, [r2, #24]
    1046:	07f8      	lsls	r0, r7, #31
    1048:	d5f1      	bpl.n	102e <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
    104a:	1c70      	adds	r0, r6, #1
    104c:	b280      	uxth	r0, r0
    104e:	4655      	mov	r5, sl
    1050:	5dad      	ldrb	r5, [r5, r6]
    1052:	46a8      	mov	r8, r5
    1054:	466f      	mov	r7, sp
    1056:	80fd      	strh	r5, [r7, #6]
    1058:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    105a:	79a5      	ldrb	r5, [r4, #6]
    105c:	2d01      	cmp	r5, #1
    105e:	d0db      	beq.n	1018 <spi_write_buffer_wait+0xec>
    1060:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1062:	07f5      	lsls	r5, r6, #31
    1064:	d5e0      	bpl.n	1028 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1066:	05ff      	lsls	r7, r7, #23
    1068:	0dff      	lsrs	r7, r7, #23
    106a:	6297      	str	r7, [r2, #40]	; 0x28
    106c:	e7dc      	b.n	1028 <spi_write_buffer_wait+0xfc>
    106e:	2300      	movs	r3, #0
    1070:	e7e2      	b.n	1038 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1072:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1074:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
    1076:	0792      	lsls	r2, r2, #30
    1078:	d404      	bmi.n	1084 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    107a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    107c:	075b      	lsls	r3, r3, #29
    107e:	d4b5      	bmi.n	fec <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
    1080:	2012      	movs	r0, #18
    1082:	e03b      	b.n	10fc <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
    1084:	0020      	movs	r0, r4
    1086:	4b22      	ldr	r3, [pc, #136]	; (1110 <spi_write_buffer_wait+0x1e4>)
    1088:	4798      	blx	r3
					return STATUS_ABORTED;
    108a:	2004      	movs	r0, #4
    108c:	e036      	b.n	10fc <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1090:	e7bc      	b.n	100c <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1092:	7962      	ldrb	r2, [r4, #5]
    1094:	2a01      	cmp	r2, #1
    1096:	d006      	beq.n	10a6 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1098:	2a00      	cmp	r2, #0
    109a:	d135      	bne.n	1108 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
    109c:	79e3      	ldrb	r3, [r4, #7]
    109e:	2b00      	cmp	r3, #0
    10a0:	d11a      	bne.n	10d8 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    10a2:	2000      	movs	r0, #0
    10a4:	e02a      	b.n	10fc <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    10a6:	6823      	ldr	r3, [r4, #0]
    10a8:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    10aa:	079b      	lsls	r3, r3, #30
    10ac:	d5fb      	bpl.n	10a6 <spi_write_buffer_wait+0x17a>
    10ae:	e7f3      	b.n	1098 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10b0:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    10b2:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    10b4:	0752      	lsls	r2, r2, #29
    10b6:	d529      	bpl.n	110c <spi_write_buffer_wait+0x1e0>
    10b8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    10ba:	0752      	lsls	r2, r2, #29
    10bc:	d508      	bpl.n	10d0 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    10be:	8b5a      	ldrh	r2, [r3, #26]
    10c0:	0752      	lsls	r2, r2, #29
    10c2:	d501      	bpl.n	10c8 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    10c4:	2204      	movs	r2, #4
    10c6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10c8:	79a2      	ldrb	r2, [r4, #6]
    10ca:	2a01      	cmp	r2, #1
    10cc:	d011      	beq.n	10f2 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    10ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    10d0:	4660      	mov	r0, ip
    10d2:	3801      	subs	r0, #1
    10d4:	b283      	uxth	r3, r0
    10d6:	469c      	mov	ip, r3
			while (flush_length) {
    10d8:	4663      	mov	r3, ip
    10da:	2b00      	cmp	r3, #0
    10dc:	d00b      	beq.n	10f6 <spi_write_buffer_wait+0x1ca>
    10de:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10e0:	4a0c      	ldr	r2, [pc, #48]	; (1114 <spi_write_buffer_wait+0x1e8>)
    10e2:	4293      	cmp	r3, r2
    10e4:	d8e4      	bhi.n	10b0 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    10e6:	6822      	ldr	r2, [r4, #0]
    10e8:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    10ea:	0752      	lsls	r2, r2, #29
    10ec:	d4e0      	bmi.n	10b0 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10ee:	3301      	adds	r3, #1
    10f0:	e7f6      	b.n	10e0 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    10f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10f4:	e7ec      	b.n	10d0 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    10f6:	2000      	movs	r0, #0
    10f8:	e000      	b.n	10fc <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    10fa:	2005      	movs	r0, #5
}
    10fc:	b002      	add	sp, #8
    10fe:	bc1c      	pop	{r2, r3, r4}
    1100:	4690      	mov	r8, r2
    1102:	4699      	mov	r9, r3
    1104:	46a2      	mov	sl, r4
    1106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1108:	2000      	movs	r0, #0
    110a:	e7f7      	b.n	10fc <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    110c:	2012      	movs	r0, #18
    110e:	e7f5      	b.n	10fc <spi_write_buffer_wait+0x1d0>
    1110:	00000af5 	.word	0x00000af5
    1114:	00002710 	.word	0x00002710

00001118 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1118:	b5f0      	push	{r4, r5, r6, r7, lr}
    111a:	46de      	mov	lr, fp
    111c:	4657      	mov	r7, sl
    111e:	464e      	mov	r6, r9
    1120:	4645      	mov	r5, r8
    1122:	b5e0      	push	{r5, r6, r7, lr}
    1124:	b085      	sub	sp, #20
    1126:	0004      	movs	r4, r0
    1128:	9100      	str	r1, [sp, #0]
    112a:	9202      	str	r2, [sp, #8]
    112c:	4698      	mov	r8, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    112e:	2338      	movs	r3, #56	; 0x38
    1130:	5cc3      	ldrb	r3, [r0, r3]
    1132:	2b05      	cmp	r3, #5
    1134:	d100      	bne.n	1138 <spi_transceive_buffer_wait+0x20>
    1136:	e11f      	b.n	1378 <spi_transceive_buffer_wait+0x260>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1138:	4643      	mov	r3, r8
    113a:	2b00      	cmp	r3, #0
    113c:	d101      	bne.n	1142 <spi_transceive_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    113e:	2117      	movs	r1, #23
    1140:	e11b      	b.n	137a <spi_transceive_buffer_wait+0x262>
	}

	if (!(module->receiver_enabled)) {
    1142:	79c3      	ldrb	r3, [r0, #7]
    1144:	2b00      	cmp	r3, #0
    1146:	d101      	bne.n	114c <spi_transceive_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    1148:	211c      	movs	r1, #28
    114a:	e116      	b.n	137a <spi_transceive_buffer_wait+0x262>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    114c:	7943      	ldrb	r3, [r0, #5]
    114e:	2b00      	cmp	r3, #0
    1150:	d103      	bne.n	115a <spi_transceive_buffer_wait+0x42>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1152:	6803      	ldr	r3, [r0, #0]
    1154:	7e1b      	ldrb	r3, [r3, #24]
    1156:	079b      	lsls	r3, r3, #30
    1158:	d404      	bmi.n	1164 <spi_transceive_buffer_wait+0x4c>
		rx_data[rx_pos++] = received_data;
		*rx_data = received_data;
		
		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    115a:	46c4      	mov	ip, r8
    115c:	2300      	movs	r3, #0
    115e:	9303      	str	r3, [sp, #12]
    1160:	2100      	movs	r1, #0
    1162:	e07c      	b.n	125e <spi_transceive_buffer_wait+0x146>
		_spi_clear_tx_complete_flag(module);
    1164:	4b8a      	ldr	r3, [pc, #552]	; (1390 <spi_transceive_buffer_wait+0x278>)
    1166:	4798      	blx	r3
    1168:	e7f7      	b.n	115a <spi_transceive_buffer_wait+0x42>
    116a:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    116c:	4a89      	ldr	r2, [pc, #548]	; (1394 <spi_transceive_buffer_wait+0x27c>)
    116e:	4293      	cmp	r3, r2
    1170:	d805      	bhi.n	117e <spi_transceive_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1172:	6822      	ldr	r2, [r4, #0]
    1174:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1176:	07d2      	lsls	r2, r2, #31
    1178:	d401      	bmi.n	117e <spi_transceive_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    117a:	3301      	adds	r3, #1
    117c:	e7f6      	b.n	116c <spi_transceive_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
    117e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1180:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1182:	0792      	lsls	r2, r2, #30
    1184:	d404      	bmi.n	1190 <spi_transceive_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1186:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    1188:	07db      	lsls	r3, r3, #31
    118a:	d471      	bmi.n	1270 <spi_transceive_buffer_wait+0x158>
				return STATUS_ERR_TIMEOUT;
    118c:	2112      	movs	r1, #18
    118e:	e0f4      	b.n	137a <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    1190:	0020      	movs	r0, r4
    1192:	4b7f      	ldr	r3, [pc, #508]	; (1390 <spi_transceive_buffer_wait+0x278>)
    1194:	4798      	blx	r3
				return STATUS_ABORTED;
    1196:	2104      	movs	r1, #4
    1198:	e0ef      	b.n	137a <spi_transceive_buffer_wait+0x262>
			data_to_send |= (tx_data[tx_pos++] << 8);
    119a:	3102      	adds	r1, #2
    119c:	9a00      	ldr	r2, [sp, #0]
    119e:	5d92      	ldrb	r2, [r2, r6]
    11a0:	0212      	lsls	r2, r2, #8
    11a2:	4650      	mov	r0, sl
    11a4:	4302      	orrs	r2, r0
    11a6:	b28e      	uxth	r6, r1
    11a8:	e071      	b.n	128e <spi_transceive_buffer_wait+0x176>
						data_to_send |= (tx_data[tx_pos++] << 8);
    11aa:	3602      	adds	r6, #2
    11ac:	9900      	ldr	r1, [sp, #0]
    11ae:	5c09      	ldrb	r1, [r1, r0]
    11b0:	0209      	lsls	r1, r1, #8
    11b2:	4650      	mov	r0, sl
    11b4:	4301      	orrs	r1, r0
    11b6:	4688      	mov	r8, r1
    11b8:	b2b0      	uxth	r0, r6
    11ba:	e01a      	b.n	11f2 <spi_transceive_buffer_wait+0xda>
					length--;
    11bc:	3f01      	subs	r7, #1
    11be:	b2bf      	uxth	r7, r7
    11c0:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11c2:	6822      	ldr	r2, [r4, #0]
    11c4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    11c6:	0752      	lsls	r2, r2, #29
    11c8:	d41d      	bmi.n	1206 <spi_transceive_buffer_wait+0xee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11ca:	3301      	adds	r3, #1
    11cc:	4a71      	ldr	r2, [pc, #452]	; (1394 <spi_transceive_buffer_wait+0x27c>)
    11ce:	4293      	cmp	r3, r2
    11d0:	d819      	bhi.n	1206 <spi_transceive_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11d2:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    11d4:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    11d6:	07c9      	lsls	r1, r1, #31
    11d8:	d5f3      	bpl.n	11c2 <spi_transceive_buffer_wait+0xaa>
					data_to_send = tx_data[tx_pos++];
    11da:	1c70      	adds	r0, r6, #1
    11dc:	b280      	uxth	r0, r0
    11de:	9900      	ldr	r1, [sp, #0]
    11e0:	5d89      	ldrb	r1, [r1, r6]
    11e2:	468a      	mov	sl, r1
    11e4:	466d      	mov	r5, sp
    11e6:	80e9      	strh	r1, [r5, #6]
    11e8:	88e9      	ldrh	r1, [r5, #6]
    11ea:	4688      	mov	r8, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11ec:	79a1      	ldrb	r1, [r4, #6]
    11ee:	2901      	cmp	r1, #1
    11f0:	d0db      	beq.n	11aa <spi_transceive_buffer_wait+0x92>
    11f2:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    11f4:	07f1      	lsls	r1, r6, #31
    11f6:	d5e1      	bpl.n	11bc <spi_transceive_buffer_wait+0xa4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    11f8:	4641      	mov	r1, r8
    11fa:	05c9      	lsls	r1, r1, #23
    11fc:	0dc9      	lsrs	r1, r1, #23
    11fe:	6291      	str	r1, [r2, #40]	; 0x28
    1200:	e7dc      	b.n	11bc <spi_transceive_buffer_wait+0xa4>
    1202:	2300      	movs	r3, #0
    1204:	e7e2      	b.n	11cc <spi_transceive_buffer_wait+0xb4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1206:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1208:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    120a:	0792      	lsls	r2, r2, #30
    120c:	d404      	bmi.n	1218 <spi_transceive_buffer_wait+0x100>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    120e:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1210:	075b      	lsls	r3, r3, #29
    1212:	d445      	bmi.n	12a0 <spi_transceive_buffer_wait+0x188>
				return STATUS_ERR_TIMEOUT;
    1214:	2112      	movs	r1, #18
    1216:	e0b0      	b.n	137a <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    1218:	0020      	movs	r0, r4
    121a:	4b5d      	ldr	r3, [pc, #372]	; (1390 <spi_transceive_buffer_wait+0x278>)
    121c:	4798      	blx	r3
				return STATUS_ABORTED;
    121e:	2104      	movs	r1, #4
    1220:	e0ab      	b.n	137a <spi_transceive_buffer_wait+0x262>
	enum status_code retval = STATUS_OK;
    1222:	2100      	movs	r1, #0
    1224:	e04d      	b.n	12c2 <spi_transceive_buffer_wait+0x1aa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1228:	05d2      	lsls	r2, r2, #23
    122a:	0dd3      	lsrs	r3, r2, #23
    122c:	4698      	mov	r8, r3
    122e:	e002      	b.n	1236 <spi_transceive_buffer_wait+0x11e>
		uint16_t received_data = 0;
    1230:	2300      	movs	r3, #0
    1232:	4698      	mov	r8, r3
		return STATUS_ERR_IO;
    1234:	2110      	movs	r1, #16
		if (retval != STATUS_OK) {
    1236:	2900      	cmp	r1, #0
    1238:	d000      	beq.n	123c <spi_transceive_buffer_wait+0x124>
    123a:	e09e      	b.n	137a <spi_transceive_buffer_wait+0x262>
		rx_data[rx_pos++] = received_data;
    123c:	9803      	ldr	r0, [sp, #12]
    123e:	0003      	movs	r3, r0
    1240:	3301      	adds	r3, #1
    1242:	b29b      	uxth	r3, r3
    1244:	4642      	mov	r2, r8
    1246:	4669      	mov	r1, sp
    1248:	718a      	strb	r2, [r1, #6]
    124a:	7989      	ldrb	r1, [r1, #6]
    124c:	9a02      	ldr	r2, [sp, #8]
    124e:	5411      	strb	r1, [r2, r0]
		*rx_data = received_data;
    1250:	7011      	strb	r1, [r2, #0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1252:	79a1      	ldrb	r1, [r4, #6]
    1254:	2901      	cmp	r1, #1
    1256:	d03b      	beq.n	12d0 <spi_transceive_buffer_wait+0x1b8>
			rx_data[rx_pos++] = (received_data >> 8);
    1258:	9303      	str	r3, [sp, #12]
    125a:	0031      	movs	r1, r6
    125c:	46b8      	mov	r8, r7
	while (length--) {
    125e:	4643      	mov	r3, r8
    1260:	1e5f      	subs	r7, r3, #1
    1262:	b2bf      	uxth	r7, r7
    1264:	2b00      	cmp	r3, #0
    1266:	d03a      	beq.n	12de <spi_transceive_buffer_wait+0x1c6>
		if (module->mode == SPI_MODE_SLAVE) {
    1268:	7963      	ldrb	r3, [r4, #5]
    126a:	2b00      	cmp	r3, #0
    126c:	d100      	bne.n	1270 <spi_transceive_buffer_wait+0x158>
    126e:	e77c      	b.n	116a <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1270:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1272:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    1274:	07d2      	lsls	r2, r2, #31
    1276:	d5fb      	bpl.n	1270 <spi_transceive_buffer_wait+0x158>
		uint16_t data_to_send = tx_data[tx_pos++];
    1278:	1c4e      	adds	r6, r1, #1
    127a:	b2b6      	uxth	r6, r6
    127c:	9a00      	ldr	r2, [sp, #0]
    127e:	5c52      	ldrb	r2, [r2, r1]
    1280:	4692      	mov	sl, r2
    1282:	4668      	mov	r0, sp
    1284:	80c2      	strh	r2, [r0, #6]
    1286:	88c2      	ldrh	r2, [r0, #6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1288:	79a0      	ldrb	r0, [r4, #6]
    128a:	2801      	cmp	r0, #1
    128c:	d085      	beq.n	119a <spi_transceive_buffer_wait+0x82>
    128e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1290:	07c9      	lsls	r1, r1, #31
    1292:	d502      	bpl.n	129a <spi_transceive_buffer_wait+0x182>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1294:	05d2      	lsls	r2, r2, #23
    1296:	0dd2      	lsrs	r2, r2, #23
    1298:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    129a:	7963      	ldrb	r3, [r4, #5]
    129c:	2b00      	cmp	r3, #0
    129e:	d0b0      	beq.n	1202 <spi_transceive_buffer_wait+0xea>
	SercomSpi *const spi_module = &(module->hw->SPI);
    12a0:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    12a2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    12a4:	0752      	lsls	r2, r2, #29
    12a6:	d5fb      	bpl.n	12a0 <spi_transceive_buffer_wait+0x188>
		rx_length--;
    12a8:	4662      	mov	r2, ip
    12aa:	3a01      	subs	r2, #1
    12ac:	b292      	uxth	r2, r2
    12ae:	4694      	mov	ip, r2
    12b0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    12b2:	0752      	lsls	r2, r2, #29
    12b4:	d5bc      	bpl.n	1230 <spi_transceive_buffer_wait+0x118>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    12b6:	8b5a      	ldrh	r2, [r3, #26]
    12b8:	0752      	lsls	r2, r2, #29
    12ba:	d5b2      	bpl.n	1222 <spi_transceive_buffer_wait+0x10a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    12bc:	2204      	movs	r2, #4
    12be:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    12c0:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12c2:	79a2      	ldrb	r2, [r4, #6]
    12c4:	2a01      	cmp	r2, #1
    12c6:	d0ae      	beq.n	1226 <spi_transceive_buffer_wait+0x10e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    12c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12ca:	b2d3      	uxtb	r3, r2
    12cc:	4698      	mov	r8, r3
    12ce:	e7b2      	b.n	1236 <spi_transceive_buffer_wait+0x11e>
			rx_data[rx_pos++] = (received_data >> 8);
    12d0:	3002      	adds	r0, #2
    12d2:	4642      	mov	r2, r8
    12d4:	0a12      	lsrs	r2, r2, #8
    12d6:	9902      	ldr	r1, [sp, #8]
    12d8:	54ca      	strb	r2, [r1, r3]
    12da:	b283      	uxth	r3, r0
    12dc:	e7bc      	b.n	1258 <spi_transceive_buffer_wait+0x140>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    12de:	7962      	ldrb	r2, [r4, #5]
    12e0:	2a01      	cmp	r2, #1
    12e2:	d003      	beq.n	12ec <spi_transceive_buffer_wait+0x1d4>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    12e4:	2a00      	cmp	r2, #0
    12e6:	d03b      	beq.n	1360 <spi_transceive_buffer_wait+0x248>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    12e8:	2100      	movs	r1, #0
    12ea:	e046      	b.n	137a <spi_transceive_buffer_wait+0x262>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    12ec:	6823      	ldr	r3, [r4, #0]
    12ee:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    12f0:	079b      	lsls	r3, r3, #30
    12f2:	d5fb      	bpl.n	12ec <spi_transceive_buffer_wait+0x1d4>
    12f4:	e7f6      	b.n	12e4 <spi_transceive_buffer_wait+0x1cc>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    12f6:	3301      	adds	r3, #1
    12f8:	4a26      	ldr	r2, [pc, #152]	; (1394 <spi_transceive_buffer_wait+0x27c>)
    12fa:	4293      	cmp	r3, r2
    12fc:	d803      	bhi.n	1306 <spi_transceive_buffer_wait+0x1ee>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    12fe:	6822      	ldr	r2, [r4, #0]
    1300:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1302:	0752      	lsls	r2, r2, #29
    1304:	d5f7      	bpl.n	12f6 <spi_transceive_buffer_wait+0x1de>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1306:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1308:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    130a:	0752      	lsls	r2, r2, #29
    130c:	d53d      	bpl.n	138a <spi_transceive_buffer_wait+0x272>
			rx_length--;
    130e:	4662      	mov	r2, ip
    1310:	3a01      	subs	r2, #1
    1312:	b292      	uxth	r2, r2
    1314:	4694      	mov	ip, r2
    1316:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1318:	0752      	lsls	r2, r2, #29
    131a:	d511      	bpl.n	1340 <spi_transceive_buffer_wait+0x228>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    131c:	8b5a      	ldrh	r2, [r3, #26]
    131e:	0752      	lsls	r2, r2, #29
    1320:	d508      	bpl.n	1334 <spi_transceive_buffer_wait+0x21c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1322:	2204      	movs	r2, #4
    1324:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1326:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1328:	79a2      	ldrb	r2, [r4, #6]
    132a:	2a01      	cmp	r2, #1
    132c:	d004      	beq.n	1338 <spi_transceive_buffer_wait+0x220>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    132e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1330:	b2d2      	uxtb	r2, r2
    1332:	e007      	b.n	1344 <spi_transceive_buffer_wait+0x22c>
	enum status_code retval = STATUS_OK;
    1334:	2100      	movs	r1, #0
    1336:	e7f7      	b.n	1328 <spi_transceive_buffer_wait+0x210>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    133a:	05d2      	lsls	r2, r2, #23
    133c:	0dd2      	lsrs	r2, r2, #23
    133e:	e001      	b.n	1344 <spi_transceive_buffer_wait+0x22c>
			uint16_t received_data = 0;
    1340:	4642      	mov	r2, r8
		return STATUS_ERR_IO;
    1342:	2110      	movs	r1, #16
			if (retval != STATUS_OK) {
    1344:	2900      	cmp	r1, #0
    1346:	d118      	bne.n	137a <spi_transceive_buffer_wait+0x262>
			rx_data[rx_pos++] = received_data;
    1348:	9803      	ldr	r0, [sp, #12]
    134a:	0003      	movs	r3, r0
    134c:	3301      	adds	r3, #1
    134e:	b29b      	uxth	r3, r3
    1350:	b2d1      	uxtb	r1, r2
    1352:	9d02      	ldr	r5, [sp, #8]
    1354:	5429      	strb	r1, [r5, r0]
			*rx_data = received_data;
    1356:	7029      	strb	r1, [r5, #0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1358:	79a1      	ldrb	r1, [r4, #6]
    135a:	2901      	cmp	r1, #1
    135c:	d005      	beq.n	136a <spi_transceive_buffer_wait+0x252>
				rx_data[rx_pos++] = (received_data >> 8);
    135e:	9303      	str	r3, [sp, #12]
		while (rx_length) {
    1360:	4663      	mov	r3, ip
    1362:	2b00      	cmp	r3, #0
    1364:	d006      	beq.n	1374 <spi_transceive_buffer_wait+0x25c>
    1366:	2300      	movs	r3, #0
    1368:	e7c6      	b.n	12f8 <spi_transceive_buffer_wait+0x1e0>
				rx_data[rx_pos++] = (received_data >> 8);
    136a:	3002      	adds	r0, #2
    136c:	0a12      	lsrs	r2, r2, #8
    136e:	54ea      	strb	r2, [r5, r3]
    1370:	b283      	uxth	r3, r0
    1372:	e7f4      	b.n	135e <spi_transceive_buffer_wait+0x246>
	return STATUS_OK;
    1374:	2100      	movs	r1, #0
    1376:	e000      	b.n	137a <spi_transceive_buffer_wait+0x262>
		return STATUS_BUSY;
    1378:	2105      	movs	r1, #5
}
    137a:	0008      	movs	r0, r1
    137c:	b005      	add	sp, #20
    137e:	bc3c      	pop	{r2, r3, r4, r5}
    1380:	4690      	mov	r8, r2
    1382:	4699      	mov	r9, r3
    1384:	46a2      	mov	sl, r4
    1386:	46ab      	mov	fp, r5
    1388:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    138a:	2112      	movs	r1, #18
    138c:	e7f5      	b.n	137a <spi_transceive_buffer_wait+0x262>
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	00000af5 	.word	0x00000af5
    1394:	00002710 	.word	0x00002710

00001398 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1398:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    139a:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    139c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    139e:	780a      	ldrb	r2, [r1, #0]
    13a0:	b2d2      	uxtb	r2, r2
    13a2:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    13a4:	1c4c      	adds	r4, r1, #1
    13a6:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13a8:	7986      	ldrb	r6, [r0, #6]
    13aa:	2e01      	cmp	r6, #1
    13ac:	d007      	beq.n	13be <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    13ae:	05db      	lsls	r3, r3, #23
    13b0:	0ddb      	lsrs	r3, r3, #23
    13b2:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    13b4:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    13b6:	3b01      	subs	r3, #1
    13b8:	b29b      	uxth	r3, r3
    13ba:	8683      	strh	r3, [r0, #52]	; 0x34
}
    13bc:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    13be:	784b      	ldrb	r3, [r1, #1]
    13c0:	021b      	lsls	r3, r3, #8
    13c2:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    13c4:	1c8c      	adds	r4, r1, #2
    13c6:	62c4      	str	r4, [r0, #44]	; 0x2c
    13c8:	e7f1      	b.n	13ae <_spi_write+0x16>
	...

000013cc <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13cc:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    13ce:	4a04      	ldr	r2, [pc, #16]	; (13e0 <_spi_write_dummy+0x14>)
    13d0:	8812      	ldrh	r2, [r2, #0]
    13d2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    13d4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    13d6:	3b01      	subs	r3, #1
    13d8:	b29b      	uxth	r3, r3
    13da:	8643      	strh	r3, [r0, #50]	; 0x32
}
    13dc:	4770      	bx	lr
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	200000a8 	.word	0x200000a8

000013e4 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13e4:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    13e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    13e8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    13ea:	3b01      	subs	r3, #1
    13ec:	b29b      	uxth	r3, r3
    13ee:	8643      	strh	r3, [r0, #50]	; 0x32
}
    13f0:	4770      	bx	lr

000013f2 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13f2:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    13f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13f6:	05db      	lsls	r3, r3, #23
    13f8:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    13fa:	b2da      	uxtb	r2, r3
    13fc:	6a81      	ldr	r1, [r0, #40]	; 0x28
    13fe:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1400:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1402:	1c51      	adds	r1, r2, #1
    1404:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1406:	7981      	ldrb	r1, [r0, #6]
    1408:	2901      	cmp	r1, #1
    140a:	d004      	beq.n	1416 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    140c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    140e:	3b01      	subs	r3, #1
    1410:	b29b      	uxth	r3, r3
    1412:	8603      	strh	r3, [r0, #48]	; 0x30
}
    1414:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1416:	0a1b      	lsrs	r3, r3, #8
    1418:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    141a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    141c:	3301      	adds	r3, #1
    141e:	6283      	str	r3, [r0, #40]	; 0x28
    1420:	e7f4      	b.n	140c <_spi_read+0x1a>
	...

00001424 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1426:	0080      	lsls	r0, r0, #2
    1428:	4b6b      	ldr	r3, [pc, #428]	; (15d8 <_spi_interrupt_handler+0x1b4>)
    142a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    142c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    142e:	2337      	movs	r3, #55	; 0x37
    1430:	5ce3      	ldrb	r3, [r4, r3]
    1432:	2236      	movs	r2, #54	; 0x36
    1434:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    1436:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1438:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    143a:	7db5      	ldrb	r5, [r6, #22]
    143c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    143e:	07eb      	lsls	r3, r5, #31
    1440:	d516      	bpl.n	1470 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1442:	7963      	ldrb	r3, [r4, #5]
    1444:	2b01      	cmp	r3, #1
    1446:	d04d      	beq.n	14e4 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1448:	7963      	ldrb	r3, [r4, #5]
		if (0
    144a:	2b01      	cmp	r3, #1
    144c:	d057      	beq.n	14fe <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    144e:	2b00      	cmp	r3, #0
    1450:	d10e      	bne.n	1470 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    1452:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1454:	2b00      	cmp	r3, #0
    1456:	d00b      	beq.n	1470 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1458:	0020      	movs	r0, r4
    145a:	4b60      	ldr	r3, [pc, #384]	; (15dc <_spi_interrupt_handler+0x1b8>)
    145c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    145e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1460:	b29b      	uxth	r3, r3
    1462:	2b00      	cmp	r3, #0
    1464:	d104      	bne.n	1470 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1466:	3301      	adds	r3, #1
    1468:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    146a:	7a63      	ldrb	r3, [r4, #9]
    146c:	2b01      	cmp	r3, #1
    146e:	d04a      	beq.n	1506 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1470:	076b      	lsls	r3, r5, #29
    1472:	d511      	bpl.n	1498 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1474:	8b73      	ldrh	r3, [r6, #26]
    1476:	075b      	lsls	r3, r3, #29
    1478:	d54f      	bpl.n	151a <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    147a:	7a63      	ldrb	r3, [r4, #9]
    147c:	2b01      	cmp	r3, #1
    147e:	d008      	beq.n	1492 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1480:	221e      	movs	r2, #30
    1482:	2338      	movs	r3, #56	; 0x38
    1484:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1486:	3b35      	subs	r3, #53	; 0x35
    1488:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    148a:	3302      	adds	r3, #2
    148c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    148e:	073b      	lsls	r3, r7, #28
    1490:	d43f      	bmi.n	1512 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1492:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1494:	2304      	movs	r3, #4
    1496:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1498:	07ab      	lsls	r3, r5, #30
    149a:	d513      	bpl.n	14c4 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    149c:	7963      	ldrb	r3, [r4, #5]
    149e:	2b00      	cmp	r3, #0
    14a0:	d10d      	bne.n	14be <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    14a2:	3307      	adds	r3, #7
    14a4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    14a6:	3b05      	subs	r3, #5
    14a8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    14aa:	3301      	adds	r3, #1
    14ac:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    14ae:	2300      	movs	r3, #0
    14b0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    14b2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    14b4:	3338      	adds	r3, #56	; 0x38
    14b6:	2200      	movs	r2, #0
    14b8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    14ba:	06fb      	lsls	r3, r7, #27
    14bc:	d464      	bmi.n	1588 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    14be:	7963      	ldrb	r3, [r4, #5]
    14c0:	2b01      	cmp	r3, #1
    14c2:	d065      	beq.n	1590 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    14c4:	072b      	lsls	r3, r5, #28
    14c6:	d508      	bpl.n	14da <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    14c8:	7963      	ldrb	r3, [r4, #5]
    14ca:	2b00      	cmp	r3, #0
    14cc:	d105      	bne.n	14da <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    14ce:	3308      	adds	r3, #8
    14d0:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    14d2:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    14d4:	06bb      	lsls	r3, r7, #26
    14d6:	d500      	bpl.n	14da <_spi_interrupt_handler+0xb6>
    14d8:	e070      	b.n	15bc <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    14da:	b26d      	sxtb	r5, r5
    14dc:	2d00      	cmp	r5, #0
    14de:	da00      	bge.n	14e2 <_spi_interrupt_handler+0xbe>
    14e0:	e070      	b.n	15c4 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    14e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    14e4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    14e6:	2b00      	cmp	r3, #0
    14e8:	d1ae      	bne.n	1448 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    14ea:	0020      	movs	r0, r4
    14ec:	4b3c      	ldr	r3, [pc, #240]	; (15e0 <_spi_interrupt_handler+0x1bc>)
    14ee:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    14f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    14f2:	b29b      	uxth	r3, r3
    14f4:	2b00      	cmp	r3, #0
    14f6:	d1a7      	bne.n	1448 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    14f8:	3301      	adds	r3, #1
    14fa:	7533      	strb	r3, [r6, #20]
    14fc:	e7a4      	b.n	1448 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    14fe:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1500:	2a00      	cmp	r2, #0
    1502:	d1a9      	bne.n	1458 <_spi_interrupt_handler+0x34>
    1504:	e7a3      	b.n	144e <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    1506:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1508:	2b00      	cmp	r3, #0
    150a:	d1b1      	bne.n	1470 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    150c:	3302      	adds	r3, #2
    150e:	75b3      	strb	r3, [r6, #22]
    1510:	e7ae      	b.n	1470 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1512:	0020      	movs	r0, r4
    1514:	69a3      	ldr	r3, [r4, #24]
    1516:	4798      	blx	r3
    1518:	e7bb      	b.n	1492 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    151a:	7a63      	ldrb	r3, [r4, #9]
    151c:	2b01      	cmp	r3, #1
    151e:	d017      	beq.n	1550 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    1520:	0020      	movs	r0, r4
    1522:	4b30      	ldr	r3, [pc, #192]	; (15e4 <_spi_interrupt_handler+0x1c0>)
    1524:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    1526:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1528:	b29b      	uxth	r3, r3
    152a:	2b00      	cmp	r3, #0
    152c:	d1b4      	bne.n	1498 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    152e:	2200      	movs	r2, #0
    1530:	3338      	adds	r3, #56	; 0x38
    1532:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1534:	3b34      	subs	r3, #52	; 0x34
    1536:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1538:	7a63      	ldrb	r3, [r4, #9]
    153a:	2b02      	cmp	r3, #2
    153c:	d01d      	beq.n	157a <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    153e:	7a63      	ldrb	r3, [r4, #9]
    1540:	2b00      	cmp	r3, #0
    1542:	d1a9      	bne.n	1498 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1544:	07bb      	lsls	r3, r7, #30
    1546:	d5a7      	bpl.n	1498 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1548:	0020      	movs	r0, r4
    154a:	6923      	ldr	r3, [r4, #16]
    154c:	4798      	blx	r3
    154e:	e7a3      	b.n	1498 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    1550:	0020      	movs	r0, r4
    1552:	4b25      	ldr	r3, [pc, #148]	; (15e8 <_spi_interrupt_handler+0x1c4>)
    1554:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1556:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1558:	b29b      	uxth	r3, r3
    155a:	2b00      	cmp	r3, #0
    155c:	d19c      	bne.n	1498 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    155e:	3304      	adds	r3, #4
    1560:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1562:	2200      	movs	r2, #0
    1564:	3334      	adds	r3, #52	; 0x34
    1566:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1568:	3b35      	subs	r3, #53	; 0x35
    156a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    156c:	07fb      	lsls	r3, r7, #31
    156e:	d400      	bmi.n	1572 <_spi_interrupt_handler+0x14e>
    1570:	e792      	b.n	1498 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1572:	0020      	movs	r0, r4
    1574:	68e3      	ldr	r3, [r4, #12]
    1576:	4798      	blx	r3
    1578:	e78e      	b.n	1498 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    157a:	077b      	lsls	r3, r7, #29
    157c:	d400      	bmi.n	1580 <_spi_interrupt_handler+0x15c>
    157e:	e78b      	b.n	1498 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1580:	0020      	movs	r0, r4
    1582:	6963      	ldr	r3, [r4, #20]
    1584:	4798      	blx	r3
    1586:	e787      	b.n	1498 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1588:	0020      	movs	r0, r4
    158a:	69e3      	ldr	r3, [r4, #28]
    158c:	4798      	blx	r3
    158e:	e796      	b.n	14be <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1590:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1592:	2b01      	cmp	r3, #1
    1594:	d000      	beq.n	1598 <_spi_interrupt_handler+0x174>
    1596:	e795      	b.n	14c4 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1598:	79e3      	ldrb	r3, [r4, #7]
    159a:	2b00      	cmp	r3, #0
    159c:	d000      	beq.n	15a0 <_spi_interrupt_handler+0x17c>
    159e:	e791      	b.n	14c4 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    15a0:	3302      	adds	r3, #2
    15a2:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    15a4:	3301      	adds	r3, #1
    15a6:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    15a8:	2200      	movs	r2, #0
    15aa:	3335      	adds	r3, #53	; 0x35
    15ac:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    15ae:	07fb      	lsls	r3, r7, #31
    15b0:	d400      	bmi.n	15b4 <_spi_interrupt_handler+0x190>
    15b2:	e787      	b.n	14c4 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    15b4:	0020      	movs	r0, r4
    15b6:	68e3      	ldr	r3, [r4, #12]
    15b8:	4798      	blx	r3
    15ba:	e783      	b.n	14c4 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    15bc:	0020      	movs	r0, r4
    15be:	6a23      	ldr	r3, [r4, #32]
    15c0:	4798      	blx	r3
    15c2:	e78a      	b.n	14da <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    15c4:	2380      	movs	r3, #128	; 0x80
    15c6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    15c8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    15ca:	067b      	lsls	r3, r7, #25
    15cc:	d400      	bmi.n	15d0 <_spi_interrupt_handler+0x1ac>
    15ce:	e788      	b.n	14e2 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    15d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    15d2:	0020      	movs	r0, r4
    15d4:	4798      	blx	r3
}
    15d6:	e784      	b.n	14e2 <_spi_interrupt_handler+0xbe>
    15d8:	200000ac 	.word	0x200000ac
    15dc:	00001399 	.word	0x00001399
    15e0:	000013cd 	.word	0x000013cd
    15e4:	000013f3 	.word	0x000013f3
    15e8:	000013e5 	.word	0x000013e5

000015ec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    15ec:	4770      	bx	lr
	...

000015f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    15f0:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    15f2:	4b0b      	ldr	r3, [pc, #44]	; (1620 <_sercom_set_handler+0x30>)
    15f4:	781b      	ldrb	r3, [r3, #0]
    15f6:	2b00      	cmp	r3, #0
    15f8:	d008      	beq.n	160c <_sercom_set_handler+0x1c>
    15fa:	e00c      	b.n	1616 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    15fc:	009a      	lsls	r2, r3, #2
    15fe:	4d09      	ldr	r5, [pc, #36]	; (1624 <_sercom_set_handler+0x34>)
    1600:	4c09      	ldr	r4, [pc, #36]	; (1628 <_sercom_set_handler+0x38>)
    1602:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    1604:	2500      	movs	r5, #0
    1606:	4c09      	ldr	r4, [pc, #36]	; (162c <_sercom_set_handler+0x3c>)
    1608:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    160a:	3301      	adds	r3, #1
    160c:	2b05      	cmp	r3, #5
    160e:	d9f5      	bls.n	15fc <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    1610:	2201      	movs	r2, #1
    1612:	4b03      	ldr	r3, [pc, #12]	; (1620 <_sercom_set_handler+0x30>)
    1614:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1616:	0080      	lsls	r0, r0, #2
    1618:	4b03      	ldr	r3, [pc, #12]	; (1628 <_sercom_set_handler+0x38>)
    161a:	50c1      	str	r1, [r0, r3]
}
    161c:	bd30      	pop	{r4, r5, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	2000002e 	.word	0x2000002e
    1624:	000015ed 	.word	0x000015ed
    1628:	20000030 	.word	0x20000030
    162c:	200000ac 	.word	0x200000ac

00001630 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1630:	b500      	push	{lr}
    1632:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1634:	4b05      	ldr	r3, [pc, #20]	; (164c <_sercom_get_interrupt_vector+0x1c>)
    1636:	681a      	ldr	r2, [r3, #0]
    1638:	9200      	str	r2, [sp, #0]
    163a:	889b      	ldrh	r3, [r3, #4]
    163c:	466a      	mov	r2, sp
    163e:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1640:	4b03      	ldr	r3, [pc, #12]	; (1650 <_sercom_get_interrupt_vector+0x20>)
    1642:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1644:	466b      	mov	r3, sp
    1646:	5618      	ldrsb	r0, [r3, r0]
}
    1648:	b003      	add	sp, #12
    164a:	bd00      	pop	{pc}
    164c:	00002130 	.word	0x00002130
    1650:	00000ac1 	.word	0x00000ac1

00001654 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1654:	b510      	push	{r4, lr}
    1656:	4b02      	ldr	r3, [pc, #8]	; (1660 <SERCOM0_Handler+0xc>)
    1658:	681b      	ldr	r3, [r3, #0]
    165a:	2000      	movs	r0, #0
    165c:	4798      	blx	r3
    165e:	bd10      	pop	{r4, pc}
    1660:	20000030 	.word	0x20000030

00001664 <SERCOM1_Handler>:
    1664:	b510      	push	{r4, lr}
    1666:	4b02      	ldr	r3, [pc, #8]	; (1670 <SERCOM1_Handler+0xc>)
    1668:	685b      	ldr	r3, [r3, #4]
    166a:	2001      	movs	r0, #1
    166c:	4798      	blx	r3
    166e:	bd10      	pop	{r4, pc}
    1670:	20000030 	.word	0x20000030

00001674 <SERCOM2_Handler>:
    1674:	b510      	push	{r4, lr}
    1676:	4b02      	ldr	r3, [pc, #8]	; (1680 <SERCOM2_Handler+0xc>)
    1678:	689b      	ldr	r3, [r3, #8]
    167a:	2002      	movs	r0, #2
    167c:	4798      	blx	r3
    167e:	bd10      	pop	{r4, pc}
    1680:	20000030 	.word	0x20000030

00001684 <SERCOM3_Handler>:
    1684:	b510      	push	{r4, lr}
    1686:	4b02      	ldr	r3, [pc, #8]	; (1690 <SERCOM3_Handler+0xc>)
    1688:	68db      	ldr	r3, [r3, #12]
    168a:	2003      	movs	r0, #3
    168c:	4798      	blx	r3
    168e:	bd10      	pop	{r4, pc}
    1690:	20000030 	.word	0x20000030

00001694 <SERCOM4_Handler>:
    1694:	b510      	push	{r4, lr}
    1696:	4b02      	ldr	r3, [pc, #8]	; (16a0 <SERCOM4_Handler+0xc>)
    1698:	691b      	ldr	r3, [r3, #16]
    169a:	2004      	movs	r0, #4
    169c:	4798      	blx	r3
    169e:	bd10      	pop	{r4, pc}
    16a0:	20000030 	.word	0x20000030

000016a4 <SERCOM5_Handler>:
    16a4:	b510      	push	{r4, lr}
    16a6:	4b02      	ldr	r3, [pc, #8]	; (16b0 <SERCOM5_Handler+0xc>)
    16a8:	695b      	ldr	r3, [r3, #20]
    16aa:	2005      	movs	r0, #5
    16ac:	4798      	blx	r3
    16ae:	bd10      	pop	{r4, pc}
    16b0:	20000030 	.word	0x20000030

000016b4 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    16b4:	4770      	bx	lr
	...

000016b8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    16b8:	4b0c      	ldr	r3, [pc, #48]	; (16ec <cpu_irq_enter_critical+0x34>)
    16ba:	681b      	ldr	r3, [r3, #0]
    16bc:	2b00      	cmp	r3, #0
    16be:	d106      	bne.n	16ce <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    16c0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    16c4:	2b00      	cmp	r3, #0
    16c6:	d007      	beq.n	16d8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    16c8:	2200      	movs	r2, #0
    16ca:	4b09      	ldr	r3, [pc, #36]	; (16f0 <cpu_irq_enter_critical+0x38>)
    16cc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    16ce:	4a07      	ldr	r2, [pc, #28]	; (16ec <cpu_irq_enter_critical+0x34>)
    16d0:	6813      	ldr	r3, [r2, #0]
    16d2:	3301      	adds	r3, #1
    16d4:	6013      	str	r3, [r2, #0]
}
    16d6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    16d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    16da:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    16de:	2200      	movs	r2, #0
    16e0:	4b04      	ldr	r3, [pc, #16]	; (16f4 <cpu_irq_enter_critical+0x3c>)
    16e2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    16e4:	3201      	adds	r2, #1
    16e6:	4b02      	ldr	r3, [pc, #8]	; (16f0 <cpu_irq_enter_critical+0x38>)
    16e8:	701a      	strb	r2, [r3, #0]
    16ea:	e7f0      	b.n	16ce <cpu_irq_enter_critical+0x16>
    16ec:	20000048 	.word	0x20000048
    16f0:	2000004c 	.word	0x2000004c
    16f4:	20000008 	.word	0x20000008

000016f8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    16f8:	4b08      	ldr	r3, [pc, #32]	; (171c <cpu_irq_leave_critical+0x24>)
    16fa:	681a      	ldr	r2, [r3, #0]
    16fc:	3a01      	subs	r2, #1
    16fe:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	2b00      	cmp	r3, #0
    1704:	d109      	bne.n	171a <cpu_irq_leave_critical+0x22>
    1706:	4b06      	ldr	r3, [pc, #24]	; (1720 <cpu_irq_leave_critical+0x28>)
    1708:	781b      	ldrb	r3, [r3, #0]
    170a:	2b00      	cmp	r3, #0
    170c:	d005      	beq.n	171a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    170e:	2201      	movs	r2, #1
    1710:	4b04      	ldr	r3, [pc, #16]	; (1724 <cpu_irq_leave_critical+0x2c>)
    1712:	701a      	strb	r2, [r3, #0]
    1714:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1718:	b662      	cpsie	i
	}
}
    171a:	4770      	bx	lr
    171c:	20000048 	.word	0x20000048
    1720:	2000004c 	.word	0x2000004c
    1724:	20000008 	.word	0x20000008

00001728 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1728:	b510      	push	{r4, lr}
    172a:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    172c:	2201      	movs	r2, #1
    172e:	ab01      	add	r3, sp, #4
    1730:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1732:	2400      	movs	r4, #0
    1734:	e004      	b.n	1740 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1736:	b2e0      	uxtb	r0, r4
    1738:	a901      	add	r1, sp, #4
    173a:	4b03      	ldr	r3, [pc, #12]	; (1748 <_switch_peripheral_gclk+0x20>)
    173c:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    173e:	3401      	adds	r4, #1
    1740:	2c24      	cmp	r4, #36	; 0x24
    1742:	d9f8      	bls.n	1736 <_switch_peripheral_gclk+0xe>
	}
}
    1744:	b002      	add	sp, #8
    1746:	bd10      	pop	{r4, pc}
    1748:	00001bc9 	.word	0x00001bc9

0000174c <system_clock_source_get_hz>:
{
    174c:	b510      	push	{r4, lr}
	switch (clock_source) {
    174e:	2808      	cmp	r0, #8
    1750:	d832      	bhi.n	17b8 <system_clock_source_get_hz+0x6c>
    1752:	0080      	lsls	r0, r0, #2
    1754:	4b1b      	ldr	r3, [pc, #108]	; (17c4 <system_clock_source_get_hz+0x78>)
    1756:	581b      	ldr	r3, [r3, r0]
    1758:	469f      	mov	pc, r3
		return 32768UL;
    175a:	2080      	movs	r0, #128	; 0x80
    175c:	0200      	lsls	r0, r0, #8
}
    175e:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    1760:	4b19      	ldr	r3, [pc, #100]	; (17c8 <system_clock_source_get_hz+0x7c>)
    1762:	6918      	ldr	r0, [r3, #16]
    1764:	e7fb      	b.n	175e <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1766:	4b19      	ldr	r3, [pc, #100]	; (17cc <system_clock_source_get_hz+0x80>)
    1768:	6a1b      	ldr	r3, [r3, #32]
    176a:	059b      	lsls	r3, r3, #22
    176c:	0f9b      	lsrs	r3, r3, #30
    176e:	4818      	ldr	r0, [pc, #96]	; (17d0 <system_clock_source_get_hz+0x84>)
    1770:	40d8      	lsrs	r0, r3
    1772:	e7f4      	b.n	175e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    1774:	4b14      	ldr	r3, [pc, #80]	; (17c8 <system_clock_source_get_hz+0x7c>)
    1776:	6958      	ldr	r0, [r3, #20]
    1778:	e7f1      	b.n	175e <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    177a:	4b13      	ldr	r3, [pc, #76]	; (17c8 <system_clock_source_get_hz+0x7c>)
    177c:	681b      	ldr	r3, [r3, #0]
    177e:	079b      	lsls	r3, r3, #30
    1780:	d51c      	bpl.n	17bc <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1782:	4b12      	ldr	r3, [pc, #72]	; (17cc <system_clock_source_get_hz+0x80>)
    1784:	68db      	ldr	r3, [r3, #12]
    1786:	06db      	lsls	r3, r3, #27
    1788:	d5fb      	bpl.n	1782 <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    178a:	4b0f      	ldr	r3, [pc, #60]	; (17c8 <system_clock_source_get_hz+0x7c>)
    178c:	681b      	ldr	r3, [r3, #0]
    178e:	075b      	lsls	r3, r3, #29
    1790:	d401      	bmi.n	1796 <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    1792:	4810      	ldr	r0, [pc, #64]	; (17d4 <system_clock_source_get_hz+0x88>)
    1794:	e7e3      	b.n	175e <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1796:	2000      	movs	r0, #0
    1798:	4b0f      	ldr	r3, [pc, #60]	; (17d8 <system_clock_source_get_hz+0x8c>)
    179a:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    179c:	4b0a      	ldr	r3, [pc, #40]	; (17c8 <system_clock_source_get_hz+0x7c>)
    179e:	689b      	ldr	r3, [r3, #8]
    17a0:	041b      	lsls	r3, r3, #16
    17a2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    17a4:	4358      	muls	r0, r3
    17a6:	e7da      	b.n	175e <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    17a8:	2350      	movs	r3, #80	; 0x50
    17aa:	4a08      	ldr	r2, [pc, #32]	; (17cc <system_clock_source_get_hz+0x80>)
    17ac:	5cd3      	ldrb	r3, [r2, r3]
    17ae:	075b      	lsls	r3, r3, #29
    17b0:	d506      	bpl.n	17c0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    17b2:	4b05      	ldr	r3, [pc, #20]	; (17c8 <system_clock_source_get_hz+0x7c>)
    17b4:	68d8      	ldr	r0, [r3, #12]
    17b6:	e7d2      	b.n	175e <system_clock_source_get_hz+0x12>
		return 0;
    17b8:	2000      	movs	r0, #0
    17ba:	e7d0      	b.n	175e <system_clock_source_get_hz+0x12>
			return 0;
    17bc:	2000      	movs	r0, #0
    17be:	e7ce      	b.n	175e <system_clock_source_get_hz+0x12>
			return 0;
    17c0:	2000      	movs	r0, #0
    17c2:	e7cc      	b.n	175e <system_clock_source_get_hz+0x12>
    17c4:	00002138 	.word	0x00002138
    17c8:	20000050 	.word	0x20000050
    17cc:	40000800 	.word	0x40000800
    17d0:	007a1200 	.word	0x007a1200
    17d4:	02dc6c00 	.word	0x02dc6c00
    17d8:	00001be5 	.word	0x00001be5

000017dc <system_clock_source_osc8m_set_config>:
{
    17dc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    17de:	4d0c      	ldr	r5, [pc, #48]	; (1810 <system_clock_source_osc8m_set_config+0x34>)
    17e0:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    17e2:	7802      	ldrb	r2, [r0, #0]
    17e4:	2103      	movs	r1, #3
    17e6:	400a      	ands	r2, r1
    17e8:	0212      	lsls	r2, r2, #8
    17ea:	490a      	ldr	r1, [pc, #40]	; (1814 <system_clock_source_osc8m_set_config+0x38>)
    17ec:	4031      	ands	r1, r6
    17ee:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    17f0:	7882      	ldrb	r2, [r0, #2]
    17f2:	2401      	movs	r4, #1
    17f4:	4022      	ands	r2, r4
    17f6:	01d2      	lsls	r2, r2, #7
    17f8:	2380      	movs	r3, #128	; 0x80
    17fa:	4399      	bics	r1, r3
    17fc:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    17fe:	7843      	ldrb	r3, [r0, #1]
    1800:	4023      	ands	r3, r4
    1802:	019b      	lsls	r3, r3, #6
    1804:	2140      	movs	r1, #64	; 0x40
    1806:	438a      	bics	r2, r1
    1808:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    180a:	622b      	str	r3, [r5, #32]
}
    180c:	bd70      	pop	{r4, r5, r6, pc}
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	40000800 	.word	0x40000800
    1814:	fffffcff 	.word	0xfffffcff

00001818 <system_clock_source_enable>:
	switch (clock_source) {
    1818:	2808      	cmp	r0, #8
    181a:	d84a      	bhi.n	18b2 <system_clock_source_enable+0x9a>
    181c:	0080      	lsls	r0, r0, #2
    181e:	4b26      	ldr	r3, [pc, #152]	; (18b8 <system_clock_source_enable+0xa0>)
    1820:	581b      	ldr	r3, [r3, r0]
    1822:	469f      	mov	pc, r3
		return STATUS_OK;
    1824:	2000      	movs	r0, #0
}
    1826:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1828:	4a24      	ldr	r2, [pc, #144]	; (18bc <system_clock_source_enable+0xa4>)
    182a:	6a13      	ldr	r3, [r2, #32]
    182c:	2102      	movs	r1, #2
    182e:	430b      	orrs	r3, r1
    1830:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1832:	2000      	movs	r0, #0
    1834:	e7f7      	b.n	1826 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1836:	4a21      	ldr	r2, [pc, #132]	; (18bc <system_clock_source_enable+0xa4>)
    1838:	6993      	ldr	r3, [r2, #24]
    183a:	2102      	movs	r1, #2
    183c:	430b      	orrs	r3, r1
    183e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1840:	2000      	movs	r0, #0
		break;
    1842:	e7f0      	b.n	1826 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1844:	4a1d      	ldr	r2, [pc, #116]	; (18bc <system_clock_source_enable+0xa4>)
    1846:	8a13      	ldrh	r3, [r2, #16]
    1848:	2102      	movs	r1, #2
    184a:	430b      	orrs	r3, r1
    184c:	b29b      	uxth	r3, r3
    184e:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1850:	2000      	movs	r0, #0
		break;
    1852:	e7e8      	b.n	1826 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1854:	4a19      	ldr	r2, [pc, #100]	; (18bc <system_clock_source_enable+0xa4>)
    1856:	8a93      	ldrh	r3, [r2, #20]
    1858:	2102      	movs	r1, #2
    185a:	430b      	orrs	r3, r1
    185c:	b29b      	uxth	r3, r3
    185e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1860:	2000      	movs	r0, #0
		break;
    1862:	e7e0      	b.n	1826 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1864:	4916      	ldr	r1, [pc, #88]	; (18c0 <system_clock_source_enable+0xa8>)
    1866:	680b      	ldr	r3, [r1, #0]
    1868:	2202      	movs	r2, #2
    186a:	4313      	orrs	r3, r2
    186c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    186e:	4b13      	ldr	r3, [pc, #76]	; (18bc <system_clock_source_enable+0xa4>)
    1870:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1872:	4b12      	ldr	r3, [pc, #72]	; (18bc <system_clock_source_enable+0xa4>)
    1874:	68db      	ldr	r3, [r3, #12]
    1876:	06db      	lsls	r3, r3, #27
    1878:	d5fb      	bpl.n	1872 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    187a:	4a11      	ldr	r2, [pc, #68]	; (18c0 <system_clock_source_enable+0xa8>)
    187c:	6891      	ldr	r1, [r2, #8]
    187e:	4b0f      	ldr	r3, [pc, #60]	; (18bc <system_clock_source_enable+0xa4>)
    1880:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1882:	6852      	ldr	r2, [r2, #4]
    1884:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1886:	2200      	movs	r2, #0
    1888:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    188a:	4b0c      	ldr	r3, [pc, #48]	; (18bc <system_clock_source_enable+0xa4>)
    188c:	68db      	ldr	r3, [r3, #12]
    188e:	06db      	lsls	r3, r3, #27
    1890:	d5fb      	bpl.n	188a <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1892:	4b0b      	ldr	r3, [pc, #44]	; (18c0 <system_clock_source_enable+0xa8>)
    1894:	681b      	ldr	r3, [r3, #0]
    1896:	b29b      	uxth	r3, r3
    1898:	4a08      	ldr	r2, [pc, #32]	; (18bc <system_clock_source_enable+0xa4>)
    189a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    189c:	2000      	movs	r0, #0
    189e:	e7c2      	b.n	1826 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    18a0:	4906      	ldr	r1, [pc, #24]	; (18bc <system_clock_source_enable+0xa4>)
    18a2:	2244      	movs	r2, #68	; 0x44
    18a4:	5c8b      	ldrb	r3, [r1, r2]
    18a6:	2002      	movs	r0, #2
    18a8:	4303      	orrs	r3, r0
    18aa:	b2db      	uxtb	r3, r3
    18ac:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    18ae:	2000      	movs	r0, #0
		break;
    18b0:	e7b9      	b.n	1826 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    18b2:	2017      	movs	r0, #23
    18b4:	e7b7      	b.n	1826 <system_clock_source_enable+0xe>
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	0000215c 	.word	0x0000215c
    18bc:	40000800 	.word	0x40000800
    18c0:	20000050 	.word	0x20000050

000018c4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    18c4:	b530      	push	{r4, r5, lr}
    18c6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    18c8:	22c2      	movs	r2, #194	; 0xc2
    18ca:	00d2      	lsls	r2, r2, #3
    18cc:	4b15      	ldr	r3, [pc, #84]	; (1924 <system_clock_init+0x60>)
    18ce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    18d0:	4b15      	ldr	r3, [pc, #84]	; (1928 <system_clock_init+0x64>)
    18d2:	6859      	ldr	r1, [r3, #4]
    18d4:	221e      	movs	r2, #30
    18d6:	4391      	bics	r1, r2
    18d8:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    18da:	4b14      	ldr	r3, [pc, #80]	; (192c <system_clock_init+0x68>)
    18dc:	4798      	blx	r3
	config->run_in_standby  = false;
    18de:	a803      	add	r0, sp, #12
    18e0:	2400      	movs	r4, #0
    18e2:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    18e4:	2501      	movs	r5, #1
    18e6:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    18e8:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    18ea:	4b11      	ldr	r3, [pc, #68]	; (1930 <system_clock_init+0x6c>)
    18ec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    18ee:	2006      	movs	r0, #6
    18f0:	4b10      	ldr	r3, [pc, #64]	; (1934 <system_clock_init+0x70>)
    18f2:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    18f4:	4b10      	ldr	r3, [pc, #64]	; (1938 <system_clock_init+0x74>)
    18f6:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    18f8:	4b10      	ldr	r3, [pc, #64]	; (193c <system_clock_init+0x78>)
    18fa:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    18fc:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    18fe:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1900:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1902:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1904:	466b      	mov	r3, sp
    1906:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1908:	2306      	movs	r3, #6
    190a:	466a      	mov	r2, sp
    190c:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    190e:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1910:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1912:	4669      	mov	r1, sp
    1914:	2000      	movs	r0, #0
    1916:	4b0a      	ldr	r3, [pc, #40]	; (1940 <system_clock_init+0x7c>)
    1918:	4798      	blx	r3
    191a:	2000      	movs	r0, #0
    191c:	4b09      	ldr	r3, [pc, #36]	; (1944 <system_clock_init+0x80>)
    191e:	4798      	blx	r3
#endif
}
    1920:	b005      	add	sp, #20
    1922:	bd30      	pop	{r4, r5, pc}
    1924:	40000800 	.word	0x40000800
    1928:	41004000 	.word	0x41004000
    192c:	00001729 	.word	0x00001729
    1930:	000017dd 	.word	0x000017dd
    1934:	00001819 	.word	0x00001819
    1938:	00001949 	.word	0x00001949
    193c:	40000400 	.word	0x40000400
    1940:	0000196d 	.word	0x0000196d
    1944:	00001a3d 	.word	0x00001a3d

00001948 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1948:	4a06      	ldr	r2, [pc, #24]	; (1964 <system_gclk_init+0x1c>)
    194a:	6993      	ldr	r3, [r2, #24]
    194c:	2108      	movs	r1, #8
    194e:	430b      	orrs	r3, r1
    1950:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1952:	2201      	movs	r2, #1
    1954:	4b04      	ldr	r3, [pc, #16]	; (1968 <system_gclk_init+0x20>)
    1956:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1958:	4b03      	ldr	r3, [pc, #12]	; (1968 <system_gclk_init+0x20>)
    195a:	781b      	ldrb	r3, [r3, #0]
    195c:	07db      	lsls	r3, r3, #31
    195e:	d4fb      	bmi.n	1958 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1960:	4770      	bx	lr
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	40000400 	.word	0x40000400
    1968:	40000c00 	.word	0x40000c00

0000196c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    196e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1970:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1972:	780c      	ldrb	r4, [r1, #0]
    1974:	0224      	lsls	r4, r4, #8
    1976:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1978:	784b      	ldrb	r3, [r1, #1]
    197a:	2b00      	cmp	r3, #0
    197c:	d002      	beq.n	1984 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    197e:	2380      	movs	r3, #128	; 0x80
    1980:	02db      	lsls	r3, r3, #11
    1982:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1984:	7a4b      	ldrb	r3, [r1, #9]
    1986:	2b00      	cmp	r3, #0
    1988:	d002      	beq.n	1990 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    198a:	2380      	movs	r3, #128	; 0x80
    198c:	031b      	lsls	r3, r3, #12
    198e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1990:	6848      	ldr	r0, [r1, #4]
    1992:	2801      	cmp	r0, #1
    1994:	d912      	bls.n	19bc <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1996:	1e43      	subs	r3, r0, #1
    1998:	4203      	tst	r3, r0
    199a:	d03d      	beq.n	1a18 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    199c:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    199e:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    19a0:	2380      	movs	r3, #128	; 0x80
    19a2:	029b      	lsls	r3, r3, #10
    19a4:	431c      	orrs	r4, r3
    19a6:	e009      	b.n	19bc <system_gclk_gen_set_config+0x50>
				div2_count++;
    19a8:	3201      	adds	r2, #1
						mask <<= 1) {
    19aa:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    19ac:	4283      	cmp	r3, r0
    19ae:	d3fb      	bcc.n	19a8 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    19b0:	0212      	lsls	r2, r2, #8
    19b2:	4332      	orrs	r2, r6
    19b4:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    19b6:	2380      	movs	r3, #128	; 0x80
    19b8:	035b      	lsls	r3, r3, #13
    19ba:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    19bc:	7a0b      	ldrb	r3, [r1, #8]
    19be:	2b00      	cmp	r3, #0
    19c0:	d002      	beq.n	19c8 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    19c2:	2380      	movs	r3, #128	; 0x80
    19c4:	039b      	lsls	r3, r3, #14
    19c6:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19c8:	4b18      	ldr	r3, [pc, #96]	; (1a2c <system_gclk_gen_set_config+0xc0>)
    19ca:	785b      	ldrb	r3, [r3, #1]
    19cc:	b25b      	sxtb	r3, r3
    19ce:	2b00      	cmp	r3, #0
    19d0:	db25      	blt.n	1a1e <system_gclk_gen_set_config+0xb2>
	return false;
    19d2:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    19d4:	2f00      	cmp	r7, #0
    19d6:	d1f7      	bne.n	19c8 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    19d8:	4b15      	ldr	r3, [pc, #84]	; (1a30 <system_gclk_gen_set_config+0xc4>)
    19da:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19dc:	4b15      	ldr	r3, [pc, #84]	; (1a34 <system_gclk_gen_set_config+0xc8>)
    19de:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19e0:	4b12      	ldr	r3, [pc, #72]	; (1a2c <system_gclk_gen_set_config+0xc0>)
    19e2:	785b      	ldrb	r3, [r3, #1]
    19e4:	b25b      	sxtb	r3, r3
    19e6:	2b00      	cmp	r3, #0
    19e8:	db1b      	blt.n	1a22 <system_gclk_gen_set_config+0xb6>
	return false;
    19ea:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    19ec:	2a00      	cmp	r2, #0
    19ee:	d1f7      	bne.n	19e0 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    19f0:	4b0e      	ldr	r3, [pc, #56]	; (1a2c <system_gclk_gen_set_config+0xc0>)
    19f2:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19f4:	4b0d      	ldr	r3, [pc, #52]	; (1a2c <system_gclk_gen_set_config+0xc0>)
    19f6:	785b      	ldrb	r3, [r3, #1]
    19f8:	b25b      	sxtb	r3, r3
    19fa:	2b00      	cmp	r3, #0
    19fc:	db13      	blt.n	1a26 <system_gclk_gen_set_config+0xba>
	return false;
    19fe:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    1a00:	2b00      	cmp	r3, #0
    1a02:	d1f7      	bne.n	19f4 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1a04:	4a09      	ldr	r2, [pc, #36]	; (1a2c <system_gclk_gen_set_config+0xc0>)
    1a06:	6853      	ldr	r3, [r2, #4]
    1a08:	2180      	movs	r1, #128	; 0x80
    1a0a:	0249      	lsls	r1, r1, #9
    1a0c:	400b      	ands	r3, r1
    1a0e:	431c      	orrs	r4, r3
    1a10:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    1a12:	4b09      	ldr	r3, [pc, #36]	; (1a38 <system_gclk_gen_set_config+0xcc>)
    1a14:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a18:	2302      	movs	r3, #2
    1a1a:	2200      	movs	r2, #0
    1a1c:	e7c6      	b.n	19ac <system_gclk_gen_set_config+0x40>
		return true;
    1a1e:	2701      	movs	r7, #1
    1a20:	e7d8      	b.n	19d4 <system_gclk_gen_set_config+0x68>
    1a22:	2201      	movs	r2, #1
    1a24:	e7e2      	b.n	19ec <system_gclk_gen_set_config+0x80>
    1a26:	2301      	movs	r3, #1
    1a28:	e7ea      	b.n	1a00 <system_gclk_gen_set_config+0x94>
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	40000c00 	.word	0x40000c00
    1a30:	000016b9 	.word	0x000016b9
    1a34:	40000c08 	.word	0x40000c08
    1a38:	000016f9 	.word	0x000016f9

00001a3c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1a3c:	b570      	push	{r4, r5, r6, lr}
    1a3e:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a40:	4b10      	ldr	r3, [pc, #64]	; (1a84 <system_gclk_gen_enable+0x48>)
    1a42:	785b      	ldrb	r3, [r3, #1]
    1a44:	b25b      	sxtb	r3, r3
    1a46:	2b00      	cmp	r3, #0
    1a48:	db17      	blt.n	1a7a <system_gclk_gen_enable+0x3e>
	return false;
    1a4a:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    1a4c:	2c00      	cmp	r4, #0
    1a4e:	d1f7      	bne.n	1a40 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1a50:	4b0d      	ldr	r3, [pc, #52]	; (1a88 <system_gclk_gen_enable+0x4c>)
    1a52:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a54:	4b0d      	ldr	r3, [pc, #52]	; (1a8c <system_gclk_gen_enable+0x50>)
    1a56:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a58:	4b0a      	ldr	r3, [pc, #40]	; (1a84 <system_gclk_gen_enable+0x48>)
    1a5a:	785b      	ldrb	r3, [r3, #1]
    1a5c:	b25b      	sxtb	r3, r3
    1a5e:	2b00      	cmp	r3, #0
    1a60:	db0d      	blt.n	1a7e <system_gclk_gen_enable+0x42>
	return false;
    1a62:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1a64:	2b00      	cmp	r3, #0
    1a66:	d1f7      	bne.n	1a58 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1a68:	4a06      	ldr	r2, [pc, #24]	; (1a84 <system_gclk_gen_enable+0x48>)
    1a6a:	6851      	ldr	r1, [r2, #4]
    1a6c:	2380      	movs	r3, #128	; 0x80
    1a6e:	025b      	lsls	r3, r3, #9
    1a70:	430b      	orrs	r3, r1
    1a72:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1a74:	4b06      	ldr	r3, [pc, #24]	; (1a90 <system_gclk_gen_enable+0x54>)
    1a76:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a78:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    1a7a:	2401      	movs	r4, #1
    1a7c:	e7e6      	b.n	1a4c <system_gclk_gen_enable+0x10>
    1a7e:	2301      	movs	r3, #1
    1a80:	e7f0      	b.n	1a64 <system_gclk_gen_enable+0x28>
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	40000c00 	.word	0x40000c00
    1a88:	000016b9 	.word	0x000016b9
    1a8c:	40000c04 	.word	0x40000c04
    1a90:	000016f9 	.word	0x000016f9

00001a94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a96:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a98:	4b22      	ldr	r3, [pc, #136]	; (1b24 <system_gclk_gen_get_hz+0x90>)
    1a9a:	785b      	ldrb	r3, [r3, #1]
    1a9c:	b25b      	sxtb	r3, r3
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	db34      	blt.n	1b0c <system_gclk_gen_get_hz+0x78>
	return false;
    1aa2:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1aa4:	2d00      	cmp	r5, #0
    1aa6:	d1f7      	bne.n	1a98 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1aa8:	4b1f      	ldr	r3, [pc, #124]	; (1b28 <system_gclk_gen_get_hz+0x94>)
    1aaa:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1aac:	4b1f      	ldr	r3, [pc, #124]	; (1b2c <system_gclk_gen_get_hz+0x98>)
    1aae:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ab0:	4b1c      	ldr	r3, [pc, #112]	; (1b24 <system_gclk_gen_get_hz+0x90>)
    1ab2:	785b      	ldrb	r3, [r3, #1]
    1ab4:	b25b      	sxtb	r3, r3
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	db2a      	blt.n	1b10 <system_gclk_gen_get_hz+0x7c>
	return false;
    1aba:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1abc:	2c00      	cmp	r4, #0
    1abe:	d1f7      	bne.n	1ab0 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1ac0:	4e18      	ldr	r6, [pc, #96]	; (1b24 <system_gclk_gen_get_hz+0x90>)
    1ac2:	6870      	ldr	r0, [r6, #4]
    1ac4:	04c0      	lsls	r0, r0, #19
    1ac6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1ac8:	4b19      	ldr	r3, [pc, #100]	; (1b30 <system_gclk_gen_get_hz+0x9c>)
    1aca:	4798      	blx	r3
    1acc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ace:	4b17      	ldr	r3, [pc, #92]	; (1b2c <system_gclk_gen_get_hz+0x98>)
    1ad0:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1ad2:	6876      	ldr	r6, [r6, #4]
    1ad4:	02f6      	lsls	r6, r6, #11
    1ad6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ad8:	4b16      	ldr	r3, [pc, #88]	; (1b34 <system_gclk_gen_get_hz+0xa0>)
    1ada:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1adc:	4b11      	ldr	r3, [pc, #68]	; (1b24 <system_gclk_gen_get_hz+0x90>)
    1ade:	785b      	ldrb	r3, [r3, #1]
    1ae0:	b25b      	sxtb	r3, r3
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	db16      	blt.n	1b14 <system_gclk_gen_get_hz+0x80>
	return false;
    1ae6:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d1f7      	bne.n	1adc <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1aec:	4b0d      	ldr	r3, [pc, #52]	; (1b24 <system_gclk_gen_get_hz+0x90>)
    1aee:	689c      	ldr	r4, [r3, #8]
    1af0:	0224      	lsls	r4, r4, #8
    1af2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1af4:	4b10      	ldr	r3, [pc, #64]	; (1b38 <system_gclk_gen_get_hz+0xa4>)
    1af6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1af8:	2e00      	cmp	r6, #0
    1afa:	d10d      	bne.n	1b18 <system_gclk_gen_get_hz+0x84>
    1afc:	2c01      	cmp	r4, #1
    1afe:	d90b      	bls.n	1b18 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    1b00:	0021      	movs	r1, r4
    1b02:	0028      	movs	r0, r5
    1b04:	4b0d      	ldr	r3, [pc, #52]	; (1b3c <system_gclk_gen_get_hz+0xa8>)
    1b06:	4798      	blx	r3
    1b08:	0005      	movs	r5, r0
    1b0a:	e009      	b.n	1b20 <system_gclk_gen_get_hz+0x8c>
		return true;
    1b0c:	2501      	movs	r5, #1
    1b0e:	e7c9      	b.n	1aa4 <system_gclk_gen_get_hz+0x10>
    1b10:	2401      	movs	r4, #1
    1b12:	e7d3      	b.n	1abc <system_gclk_gen_get_hz+0x28>
    1b14:	2301      	movs	r3, #1
    1b16:	e7e7      	b.n	1ae8 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    1b18:	2e00      	cmp	r6, #0
    1b1a:	d001      	beq.n	1b20 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    1b1c:	3401      	adds	r4, #1
    1b1e:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1b20:	0028      	movs	r0, r5
    1b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b24:	40000c00 	.word	0x40000c00
    1b28:	000016b9 	.word	0x000016b9
    1b2c:	40000c04 	.word	0x40000c04
    1b30:	0000174d 	.word	0x0000174d
    1b34:	40000c08 	.word	0x40000c08
    1b38:	000016f9 	.word	0x000016f9
    1b3c:	00001f95 	.word	0x00001f95

00001b40 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1b40:	b510      	push	{r4, lr}
    1b42:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b44:	4b06      	ldr	r3, [pc, #24]	; (1b60 <system_gclk_chan_enable+0x20>)
    1b46:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b48:	4b06      	ldr	r3, [pc, #24]	; (1b64 <system_gclk_chan_enable+0x24>)
    1b4a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1b4c:	4a06      	ldr	r2, [pc, #24]	; (1b68 <system_gclk_chan_enable+0x28>)
    1b4e:	8853      	ldrh	r3, [r2, #2]
    1b50:	2180      	movs	r1, #128	; 0x80
    1b52:	01c9      	lsls	r1, r1, #7
    1b54:	430b      	orrs	r3, r1
    1b56:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1b58:	4b04      	ldr	r3, [pc, #16]	; (1b6c <system_gclk_chan_enable+0x2c>)
    1b5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b5c:	bd10      	pop	{r4, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	000016b9 	.word	0x000016b9
    1b64:	40000c02 	.word	0x40000c02
    1b68:	40000c00 	.word	0x40000c00
    1b6c:	000016f9 	.word	0x000016f9

00001b70 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1b70:	b510      	push	{r4, lr}
    1b72:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b74:	4b0e      	ldr	r3, [pc, #56]	; (1bb0 <system_gclk_chan_disable+0x40>)
    1b76:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b78:	4b0e      	ldr	r3, [pc, #56]	; (1bb4 <system_gclk_chan_disable+0x44>)
    1b7a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1b7c:	490e      	ldr	r1, [pc, #56]	; (1bb8 <system_gclk_chan_disable+0x48>)
    1b7e:	884b      	ldrh	r3, [r1, #2]
    1b80:	051b      	lsls	r3, r3, #20
    1b82:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1b84:	884b      	ldrh	r3, [r1, #2]
    1b86:	480d      	ldr	r0, [pc, #52]	; (1bbc <system_gclk_chan_disable+0x4c>)
    1b88:	4003      	ands	r3, r0
    1b8a:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1b8c:	884b      	ldrh	r3, [r1, #2]
    1b8e:	480c      	ldr	r0, [pc, #48]	; (1bc0 <system_gclk_chan_disable+0x50>)
    1b90:	4003      	ands	r3, r0
    1b92:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1b94:	4b08      	ldr	r3, [pc, #32]	; (1bb8 <system_gclk_chan_disable+0x48>)
    1b96:	885b      	ldrh	r3, [r3, #2]
    1b98:	045b      	lsls	r3, r3, #17
    1b9a:	d4fb      	bmi.n	1b94 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1b9c:	4806      	ldr	r0, [pc, #24]	; (1bb8 <system_gclk_chan_disable+0x48>)
    1b9e:	8841      	ldrh	r1, [r0, #2]
    1ba0:	0213      	lsls	r3, r2, #8
    1ba2:	4a06      	ldr	r2, [pc, #24]	; (1bbc <system_gclk_chan_disable+0x4c>)
    1ba4:	400a      	ands	r2, r1
    1ba6:	4313      	orrs	r3, r2
    1ba8:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    1baa:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <system_gclk_chan_disable+0x54>)
    1bac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bae:	bd10      	pop	{r4, pc}
    1bb0:	000016b9 	.word	0x000016b9
    1bb4:	40000c02 	.word	0x40000c02
    1bb8:	40000c00 	.word	0x40000c00
    1bbc:	fffff0ff 	.word	0xfffff0ff
    1bc0:	ffffbfff 	.word	0xffffbfff
    1bc4:	000016f9 	.word	0x000016f9

00001bc8 <system_gclk_chan_set_config>:
{
    1bc8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1bca:	780c      	ldrb	r4, [r1, #0]
    1bcc:	0224      	lsls	r4, r4, #8
    1bce:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1bd0:	4b02      	ldr	r3, [pc, #8]	; (1bdc <system_gclk_chan_set_config+0x14>)
    1bd2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1bd4:	b2a4      	uxth	r4, r4
    1bd6:	4b02      	ldr	r3, [pc, #8]	; (1be0 <system_gclk_chan_set_config+0x18>)
    1bd8:	805c      	strh	r4, [r3, #2]
}
    1bda:	bd10      	pop	{r4, pc}
    1bdc:	00001b71 	.word	0x00001b71
    1be0:	40000c00 	.word	0x40000c00

00001be4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1be4:	b510      	push	{r4, lr}
    1be6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1be8:	4b06      	ldr	r3, [pc, #24]	; (1c04 <system_gclk_chan_get_hz+0x20>)
    1bea:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bec:	4b06      	ldr	r3, [pc, #24]	; (1c08 <system_gclk_chan_get_hz+0x24>)
    1bee:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1bf0:	4b06      	ldr	r3, [pc, #24]	; (1c0c <system_gclk_chan_get_hz+0x28>)
    1bf2:	885c      	ldrh	r4, [r3, #2]
    1bf4:	0524      	lsls	r4, r4, #20
    1bf6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1bf8:	4b05      	ldr	r3, [pc, #20]	; (1c10 <system_gclk_chan_get_hz+0x2c>)
    1bfa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1bfc:	0020      	movs	r0, r4
    1bfe:	4b05      	ldr	r3, [pc, #20]	; (1c14 <system_gclk_chan_get_hz+0x30>)
    1c00:	4798      	blx	r3
}
    1c02:	bd10      	pop	{r4, pc}
    1c04:	000016b9 	.word	0x000016b9
    1c08:	40000c02 	.word	0x40000c02
    1c0c:	40000c00 	.word	0x40000c00
    1c10:	000016f9 	.word	0x000016f9
    1c14:	00001a95 	.word	0x00001a95

00001c18 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1c18:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1c1a:	78d3      	ldrb	r3, [r2, #3]
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d120      	bne.n	1c62 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1c20:	7815      	ldrb	r5, [r2, #0]
    1c22:	2d80      	cmp	r5, #128	; 0x80
    1c24:	d01b      	beq.n	1c5e <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1c26:	062d      	lsls	r5, r5, #24
    1c28:	2380      	movs	r3, #128	; 0x80
    1c2a:	025b      	lsls	r3, r3, #9
    1c2c:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1c2e:	7853      	ldrb	r3, [r2, #1]
    1c30:	2b00      	cmp	r3, #0
    1c32:	d001      	beq.n	1c38 <_system_pinmux_config+0x20>
    1c34:	2b02      	cmp	r3, #2
    1c36:	d10a      	bne.n	1c4e <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1c38:	2380      	movs	r3, #128	; 0x80
    1c3a:	029b      	lsls	r3, r3, #10
    1c3c:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1c3e:	7894      	ldrb	r4, [r2, #2]
    1c40:	2c00      	cmp	r4, #0
    1c42:	d002      	beq.n	1c4a <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1c44:	23c0      	movs	r3, #192	; 0xc0
    1c46:	02db      	lsls	r3, r3, #11
    1c48:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1c4a:	6041      	str	r1, [r0, #4]
    1c4c:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c4e:	7853      	ldrb	r3, [r2, #1]
    1c50:	3b01      	subs	r3, #1
    1c52:	b2db      	uxtb	r3, r3
    1c54:	2b01      	cmp	r3, #1
    1c56:	d806      	bhi.n	1c66 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1c58:	4b13      	ldr	r3, [pc, #76]	; (1ca8 <_system_pinmux_config+0x90>)
    1c5a:	401d      	ands	r5, r3
    1c5c:	e003      	b.n	1c66 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    1c5e:	2500      	movs	r5, #0
    1c60:	e7e5      	b.n	1c2e <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1c62:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1c64:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1c66:	040c      	lsls	r4, r1, #16
    1c68:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1c6a:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c6c:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1c6e:	26a0      	movs	r6, #160	; 0xa0
    1c70:	05f6      	lsls	r6, r6, #23
    1c72:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c74:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c76:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1c78:	24d0      	movs	r4, #208	; 0xd0
    1c7a:	0624      	lsls	r4, r4, #24
    1c7c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c7e:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1c80:	78d3      	ldrb	r3, [r2, #3]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d10a      	bne.n	1c9c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1c86:	036b      	lsls	r3, r5, #13
    1c88:	d503      	bpl.n	1c92 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1c8a:	7893      	ldrb	r3, [r2, #2]
    1c8c:	2b01      	cmp	r3, #1
    1c8e:	d006      	beq.n	1c9e <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1c90:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c92:	7853      	ldrb	r3, [r2, #1]
    1c94:	3b01      	subs	r3, #1
    1c96:	b2db      	uxtb	r3, r3
    1c98:	2b01      	cmp	r3, #1
    1c9a:	d902      	bls.n	1ca2 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1c9c:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    1c9e:	6181      	str	r1, [r0, #24]
    1ca0:	e7f7      	b.n	1c92 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    1ca2:	6081      	str	r1, [r0, #8]
}
    1ca4:	e7fa      	b.n	1c9c <_system_pinmux_config+0x84>
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	fffbffff 	.word	0xfffbffff

00001cac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1cac:	b510      	push	{r4, lr}
    1cae:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    1cb0:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    1cb2:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    1cb4:	2900      	cmp	r1, #0
    1cb6:	d10b      	bne.n	1cd0 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    1cb8:	01db      	lsls	r3, r3, #7
    1cba:	4906      	ldr	r1, [pc, #24]	; (1cd4 <system_pinmux_pin_set_config+0x28>)
    1cbc:	468c      	mov	ip, r1
    1cbe:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1cc0:	241f      	movs	r4, #31
    1cc2:	4020      	ands	r0, r4
    1cc4:	2101      	movs	r1, #1
    1cc6:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1cc8:	0018      	movs	r0, r3
    1cca:	4b03      	ldr	r3, [pc, #12]	; (1cd8 <system_pinmux_pin_set_config+0x2c>)
    1ccc:	4798      	blx	r3
}
    1cce:	bd10      	pop	{r4, pc}
		return NULL;
    1cd0:	2300      	movs	r3, #0
    1cd2:	e7f5      	b.n	1cc0 <system_pinmux_pin_set_config+0x14>
    1cd4:	41004400 	.word	0x41004400
    1cd8:	00001c19 	.word	0x00001c19

00001cdc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1cdc:	4770      	bx	lr
	...

00001ce0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1ce0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1ce2:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <system_init+0x18>)
    1ce4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1ce6:	4b05      	ldr	r3, [pc, #20]	; (1cfc <system_init+0x1c>)
    1ce8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1cea:	4b05      	ldr	r3, [pc, #20]	; (1d00 <system_init+0x20>)
    1cec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1cee:	4b05      	ldr	r3, [pc, #20]	; (1d04 <system_init+0x24>)
    1cf0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1cf2:	4b05      	ldr	r3, [pc, #20]	; (1d08 <system_init+0x28>)
    1cf4:	4798      	blx	r3
}
    1cf6:	bd10      	pop	{r4, pc}
    1cf8:	000018c5 	.word	0x000018c5
    1cfc:	000016b5 	.word	0x000016b5
    1d00:	00001cdd 	.word	0x00001cdd
    1d04:	00001cdd 	.word	0x00001cdd
    1d08:	00001cdd 	.word	0x00001cdd

00001d0c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1d0c:	e7fe      	b.n	1d0c <Dummy_Handler>
	...

00001d10 <Reset_Handler>:
{
    1d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1d12:	4a23      	ldr	r2, [pc, #140]	; (1da0 <Reset_Handler+0x90>)
    1d14:	4b23      	ldr	r3, [pc, #140]	; (1da4 <Reset_Handler+0x94>)
    1d16:	429a      	cmp	r2, r3
    1d18:	d009      	beq.n	1d2e <Reset_Handler+0x1e>
    1d1a:	4b22      	ldr	r3, [pc, #136]	; (1da4 <Reset_Handler+0x94>)
    1d1c:	4a20      	ldr	r2, [pc, #128]	; (1da0 <Reset_Handler+0x90>)
    1d1e:	e003      	b.n	1d28 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    1d20:	6811      	ldr	r1, [r2, #0]
    1d22:	6019      	str	r1, [r3, #0]
    1d24:	3304      	adds	r3, #4
    1d26:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1d28:	491f      	ldr	r1, [pc, #124]	; (1da8 <Reset_Handler+0x98>)
    1d2a:	428b      	cmp	r3, r1
    1d2c:	d3f8      	bcc.n	1d20 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    1d2e:	4b1f      	ldr	r3, [pc, #124]	; (1dac <Reset_Handler+0x9c>)
    1d30:	e002      	b.n	1d38 <Reset_Handler+0x28>
                *pDest++ = 0;
    1d32:	2200      	movs	r2, #0
    1d34:	601a      	str	r2, [r3, #0]
    1d36:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1d38:	4a1d      	ldr	r2, [pc, #116]	; (1db0 <Reset_Handler+0xa0>)
    1d3a:	4293      	cmp	r3, r2
    1d3c:	d3f9      	bcc.n	1d32 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1d3e:	4a1d      	ldr	r2, [pc, #116]	; (1db4 <Reset_Handler+0xa4>)
    1d40:	21ff      	movs	r1, #255	; 0xff
    1d42:	4b1d      	ldr	r3, [pc, #116]	; (1db8 <Reset_Handler+0xa8>)
    1d44:	438b      	bics	r3, r1
    1d46:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1d48:	39fd      	subs	r1, #253	; 0xfd
    1d4a:	2390      	movs	r3, #144	; 0x90
    1d4c:	005b      	lsls	r3, r3, #1
    1d4e:	4a1b      	ldr	r2, [pc, #108]	; (1dbc <Reset_Handler+0xac>)
    1d50:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1d52:	4a1b      	ldr	r2, [pc, #108]	; (1dc0 <Reset_Handler+0xb0>)
    1d54:	78d3      	ldrb	r3, [r2, #3]
    1d56:	2503      	movs	r5, #3
    1d58:	43ab      	bics	r3, r5
    1d5a:	2402      	movs	r4, #2
    1d5c:	4323      	orrs	r3, r4
    1d5e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1d60:	78d3      	ldrb	r3, [r2, #3]
    1d62:	270c      	movs	r7, #12
    1d64:	43bb      	bics	r3, r7
    1d66:	2608      	movs	r6, #8
    1d68:	4333      	orrs	r3, r6
    1d6a:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1d6c:	4b15      	ldr	r3, [pc, #84]	; (1dc4 <Reset_Handler+0xb4>)
    1d6e:	7b98      	ldrb	r0, [r3, #14]
    1d70:	2230      	movs	r2, #48	; 0x30
    1d72:	4390      	bics	r0, r2
    1d74:	2220      	movs	r2, #32
    1d76:	4310      	orrs	r0, r2
    1d78:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1d7a:	7b99      	ldrb	r1, [r3, #14]
    1d7c:	43b9      	bics	r1, r7
    1d7e:	4331      	orrs	r1, r6
    1d80:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1d82:	7b9a      	ldrb	r2, [r3, #14]
    1d84:	43aa      	bics	r2, r5
    1d86:	4322      	orrs	r2, r4
    1d88:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1d8a:	4a0f      	ldr	r2, [pc, #60]	; (1dc8 <Reset_Handler+0xb8>)
    1d8c:	6851      	ldr	r1, [r2, #4]
    1d8e:	2380      	movs	r3, #128	; 0x80
    1d90:	430b      	orrs	r3, r1
    1d92:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1d94:	4b0d      	ldr	r3, [pc, #52]	; (1dcc <Reset_Handler+0xbc>)
    1d96:	4798      	blx	r3
        main();
    1d98:	4b0d      	ldr	r3, [pc, #52]	; (1dd0 <Reset_Handler+0xc0>)
    1d9a:	4798      	blx	r3
    1d9c:	e7fe      	b.n	1d9c <Reset_Handler+0x8c>
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	000021a0 	.word	0x000021a0
    1da4:	20000000 	.word	0x20000000
    1da8:	2000000c 	.word	0x2000000c
    1dac:	2000000c 	.word	0x2000000c
    1db0:	200000c4 	.word	0x200000c4
    1db4:	e000ed00 	.word	0xe000ed00
    1db8:	00000000 	.word	0x00000000
    1dbc:	41007000 	.word	0x41007000
    1dc0:	41005000 	.word	0x41005000
    1dc4:	41004800 	.word	0x41004800
    1dc8:	41004000 	.word	0x41004000
    1dcc:	000020ad 	.word	0x000020ad
    1dd0:	00001f2d 	.word	0x00001f2d

00001dd4 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dd6:	46ce      	mov	lr, r9
    1dd8:	4647      	mov	r7, r8
    1dda:	b580      	push	{r7, lr}
    1ddc:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1dde:	ac01      	add	r4, sp, #4
    1de0:	2300      	movs	r3, #0
    1de2:	4698      	mov	r8, r3
    1de4:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1de6:	2601      	movs	r6, #1
    1de8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1dea:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1dec:	0021      	movs	r1, r4
    1dee:	200b      	movs	r0, #11
    1df0:	4d25      	ldr	r5, [pc, #148]	; (1e88 <conf_port_pin+0xb4>)
    1df2:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1df4:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    1df6:	0021      	movs	r1, r4
    1df8:	200a      	movs	r0, #10
    1dfa:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1dfc:	4f23      	ldr	r7, [pc, #140]	; (1e8c <conf_port_pin+0xb8>)
    1dfe:	2380      	movs	r3, #128	; 0x80
    1e00:	00db      	lsls	r3, r3, #3
    1e02:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    1e04:	0021      	movs	r1, r4
    1e06:	2005      	movs	r0, #5
    1e08:	47a8      	blx	r5
    1e0a:	2320      	movs	r3, #32
    1e0c:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    1e0e:	0021      	movs	r1, r4
    1e10:	2006      	movs	r0, #6
    1e12:	47a8      	blx	r5
    1e14:	2340      	movs	r3, #64	; 0x40
    1e16:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    1e18:	0021      	movs	r1, r4
    1e1a:	2007      	movs	r0, #7
    1e1c:	47a8      	blx	r5
    1e1e:	2380      	movs	r3, #128	; 0x80
    1e20:	4699      	mov	r9, r3
    1e22:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1e24:	4643      	mov	r3, r8
    1e26:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1e28:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    1e2a:	0021      	movs	r1, r4
    1e2c:	200f      	movs	r0, #15
    1e2e:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1e30:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    1e32:	0021      	movs	r1, r4
    1e34:	200e      	movs	r0, #14
    1e36:	47a8      	blx	r5
    1e38:	2380      	movs	r3, #128	; 0x80
    1e3a:	01db      	lsls	r3, r3, #7
    1e3c:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1e3e:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1e40:	2302      	movs	r3, #2
    1e42:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1e44:	0021      	movs	r1, r4
    1e46:	202f      	movs	r0, #47	; 0x2f
    1e48:	47a8      	blx	r5
    1e4a:	003b      	movs	r3, r7
    1e4c:	444b      	add	r3, r9
    1e4e:	2280      	movs	r2, #128	; 0x80
    1e50:	0212      	lsls	r2, r2, #8
    1e52:	619a      	str	r2, [r3, #24]
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1e54:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1e56:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    1e58:	0021      	movs	r1, r4
    1e5a:	2011      	movs	r0, #17
    1e5c:	47a8      	blx	r5
    1e5e:	2380      	movs	r3, #128	; 0x80
    1e60:	029b      	lsls	r3, r3, #10
    1e62:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1e64:	4643      	mov	r3, r8
    1e66:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    1e68:	0021      	movs	r1, r4
    1e6a:	2030      	movs	r0, #48	; 0x30
    1e6c:	47a8      	blx	r5
	
	
	/**************config pin for 27*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1e6e:	7026      	strb	r6, [r4, #0]
	//config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS27, &config_port_pin);
    1e70:	0021      	movs	r1, r4
    1e72:	2017      	movs	r0, #23
    1e74:	47a8      	blx	r5
    1e76:	2380      	movs	r3, #128	; 0x80
    1e78:	041b      	lsls	r3, r3, #16
    1e7a:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(SS27, true);	
} // end conf_port_pin(void)
    1e7c:	b003      	add	sp, #12
    1e7e:	bc0c      	pop	{r2, r3}
    1e80:	4690      	mov	r8, r2
    1e82:	4699      	mov	r9, r3
    1e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	000008ad 	.word	0x000008ad
    1e8c:	41004400 	.word	0x41004400

00001e90 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    1e90:	b500      	push	{lr}
    1e92:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1e94:	a801      	add	r0, sp, #4
    1e96:	2300      	movs	r3, #0
    1e98:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    1e9a:	2201      	movs	r2, #1
    1e9c:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    1e9e:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1ea0:	4b01      	ldr	r3, [pc, #4]	; (1ea8 <clk_osc8m_init+0x18>)
    1ea2:	4798      	blx	r3
}
    1ea4:	b003      	add	sp, #12
    1ea6:	bd00      	pop	{pc}
    1ea8:	000017dd 	.word	0x000017dd

00001eac <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1eac:	b500      	push	{lr}
    1eae:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1eb0:	4b0a      	ldr	r3, [pc, #40]	; (1edc <clk_gclk0_init+0x30>)
    1eb2:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1eb4:	2300      	movs	r3, #0
    1eb6:	4a0a      	ldr	r2, [pc, #40]	; (1ee0 <clk_gclk0_init+0x34>)
    1eb8:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    1eba:	a901      	add	r1, sp, #4
    1ebc:	2206      	movs	r2, #6
    1ebe:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    1ec0:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    1ec2:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1ec4:	3a05      	subs	r2, #5
    1ec6:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    1ec8:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1eca:	2000      	movs	r0, #0
    1ecc:	4b05      	ldr	r3, [pc, #20]	; (1ee4 <clk_gclk0_init+0x38>)
    1ece:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1ed0:	2000      	movs	r0, #0
    1ed2:	4b05      	ldr	r3, [pc, #20]	; (1ee8 <clk_gclk0_init+0x3c>)
    1ed4:	4798      	blx	r3
    1ed6:	b005      	add	sp, #20
    1ed8:	bd00      	pop	{pc}
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	00001949 	.word	0x00001949
    1ee0:	40000400 	.word	0x40000400
    1ee4:	0000196d 	.word	0x0000196d
    1ee8:	00001a3d 	.word	0x00001a3d

00001eec <sys_clk_init>:
{
    1eec:	b510      	push	{r4, lr}
	clk_osc8m_init();
    1eee:	4b03      	ldr	r3, [pc, #12]	; (1efc <sys_clk_init+0x10>)
    1ef0:	4798      	blx	r3
	clk_gclk0_init();
    1ef2:	4b03      	ldr	r3, [pc, #12]	; (1f00 <sys_clk_init+0x14>)
    1ef4:	4798      	blx	r3
    delay_init();
    1ef6:	4b03      	ldr	r3, [pc, #12]	; (1f04 <sys_clk_init+0x18>)
    1ef8:	4798      	blx	r3
}
    1efa:	bd10      	pop	{r4, pc}
    1efc:	00001e91 	.word	0x00001e91
    1f00:	00001ead 	.word	0x00001ead
    1f04:	00000841 	.word	0x00000841

00001f08 <simSysInit>:
{
    1f08:	b510      	push	{r4, lr}
	system_init();
    1f0a:	4b04      	ldr	r3, [pc, #16]	; (1f1c <simSysInit+0x14>)
    1f0c:	4798      	blx	r3
	sys_clk_init();
    1f0e:	4b04      	ldr	r3, [pc, #16]	; (1f20 <simSysInit+0x18>)
    1f10:	4798      	blx	r3
	conf_port_pin();
    1f12:	4b04      	ldr	r3, [pc, #16]	; (1f24 <simSysInit+0x1c>)
    1f14:	4798      	blx	r3
	spi40_init();
    1f16:	4b04      	ldr	r3, [pc, #16]	; (1f28 <simSysInit+0x20>)
    1f18:	4798      	blx	r3
}
    1f1a:	bd10      	pop	{r4, pc}
    1f1c:	00001ce1 	.word	0x00001ce1
    1f20:	00001eed 	.word	0x00001eed
    1f24:	00001dd5 	.word	0x00001dd5
    1f28:	00000115 	.word	0x00000115

00001f2c <main>:
{
    1f2c:	b510      	push	{r4, lr}
    1f2e:	b084      	sub	sp, #16
    rssi_vals acquired_rssi = {10, 20, 30};
    1f30:	ac02      	add	r4, sp, #8
    1f32:	2208      	movs	r2, #8
    1f34:	2100      	movs	r1, #0
    1f36:	0020      	movs	r0, r4
    1f38:	4b0f      	ldr	r3, [pc, #60]	; (1f78 <main+0x4c>)
    1f3a:	4798      	blx	r3
    1f3c:	230a      	movs	r3, #10
    1f3e:	8023      	strh	r3, [r4, #0]
    1f40:	330a      	adds	r3, #10
    1f42:	8063      	strh	r3, [r4, #2]
    1f44:	330a      	adds	r3, #10
    1f46:	80a3      	strh	r3, [r4, #4]
    1f48:	2208      	movs	r2, #8
    1f4a:	0021      	movs	r1, r4
    1f4c:	4668      	mov	r0, sp
    1f4e:	4b0b      	ldr	r3, [pc, #44]	; (1f7c <main+0x50>)
    1f50:	4798      	blx	r3
    simSysInit();
    1f52:	4b0b      	ldr	r3, [pc, #44]	; (1f80 <main+0x54>)
    1f54:	4798      	blx	r3
    delay_ms(100);
    1f56:	2064      	movs	r0, #100	; 0x64
    1f58:	4b0a      	ldr	r3, [pc, #40]	; (1f84 <main+0x58>)
    1f5a:	4798      	blx	r3
    spi40_rx_init();
    1f5c:	4b0a      	ldr	r3, [pc, #40]	; (1f88 <main+0x5c>)
    1f5e:	4798      	blx	r3
		buf = spi40_rd8(AX5043_FIFODATA);
    1f60:	2029      	movs	r0, #41	; 0x29
    1f62:	4b0a      	ldr	r3, [pc, #40]	; (1f8c <main+0x60>)
    1f64:	4798      	blx	r3
		acquired_rssi.rssi169 = spi40_rssi();
    1f66:	4b0a      	ldr	r3, [pc, #40]	; (1f90 <main+0x64>)
    1f68:	4798      	blx	r3
    1f6a:	b200      	sxth	r0, r0
    1f6c:	466b      	mov	r3, sp
    1f6e:	8058      	strh	r0, [r3, #2]
        delay_ms(100);
    1f70:	2064      	movs	r0, #100	; 0x64
    1f72:	4b04      	ldr	r3, [pc, #16]	; (1f84 <main+0x58>)
    1f74:	4798      	blx	r3
    1f76:	e7f3      	b.n	1f60 <main+0x34>
    1f78:	00002107 	.word	0x00002107
    1f7c:	000020f5 	.word	0x000020f5
    1f80:	00001f09 	.word	0x00001f09
    1f84:	0000087d 	.word	0x0000087d
    1f88:	00000345 	.word	0x00000345
    1f8c:	000002ad 	.word	0x000002ad
    1f90:	00000831 	.word	0x00000831

00001f94 <__udivsi3>:
    1f94:	2200      	movs	r2, #0
    1f96:	0843      	lsrs	r3, r0, #1
    1f98:	428b      	cmp	r3, r1
    1f9a:	d374      	bcc.n	2086 <STACK_SIZE+0x86>
    1f9c:	0903      	lsrs	r3, r0, #4
    1f9e:	428b      	cmp	r3, r1
    1fa0:	d35f      	bcc.n	2062 <STACK_SIZE+0x62>
    1fa2:	0a03      	lsrs	r3, r0, #8
    1fa4:	428b      	cmp	r3, r1
    1fa6:	d344      	bcc.n	2032 <STACK_SIZE+0x32>
    1fa8:	0b03      	lsrs	r3, r0, #12
    1faa:	428b      	cmp	r3, r1
    1fac:	d328      	bcc.n	2000 <STACK_SIZE>
    1fae:	0c03      	lsrs	r3, r0, #16
    1fb0:	428b      	cmp	r3, r1
    1fb2:	d30d      	bcc.n	1fd0 <__udivsi3+0x3c>
    1fb4:	22ff      	movs	r2, #255	; 0xff
    1fb6:	0209      	lsls	r1, r1, #8
    1fb8:	ba12      	rev	r2, r2
    1fba:	0c03      	lsrs	r3, r0, #16
    1fbc:	428b      	cmp	r3, r1
    1fbe:	d302      	bcc.n	1fc6 <__udivsi3+0x32>
    1fc0:	1212      	asrs	r2, r2, #8
    1fc2:	0209      	lsls	r1, r1, #8
    1fc4:	d065      	beq.n	2092 <STACK_SIZE+0x92>
    1fc6:	0b03      	lsrs	r3, r0, #12
    1fc8:	428b      	cmp	r3, r1
    1fca:	d319      	bcc.n	2000 <STACK_SIZE>
    1fcc:	e000      	b.n	1fd0 <__udivsi3+0x3c>
    1fce:	0a09      	lsrs	r1, r1, #8
    1fd0:	0bc3      	lsrs	r3, r0, #15
    1fd2:	428b      	cmp	r3, r1
    1fd4:	d301      	bcc.n	1fda <__udivsi3+0x46>
    1fd6:	03cb      	lsls	r3, r1, #15
    1fd8:	1ac0      	subs	r0, r0, r3
    1fda:	4152      	adcs	r2, r2
    1fdc:	0b83      	lsrs	r3, r0, #14
    1fde:	428b      	cmp	r3, r1
    1fe0:	d301      	bcc.n	1fe6 <__udivsi3+0x52>
    1fe2:	038b      	lsls	r3, r1, #14
    1fe4:	1ac0      	subs	r0, r0, r3
    1fe6:	4152      	adcs	r2, r2
    1fe8:	0b43      	lsrs	r3, r0, #13
    1fea:	428b      	cmp	r3, r1
    1fec:	d301      	bcc.n	1ff2 <__udivsi3+0x5e>
    1fee:	034b      	lsls	r3, r1, #13
    1ff0:	1ac0      	subs	r0, r0, r3
    1ff2:	4152      	adcs	r2, r2
    1ff4:	0b03      	lsrs	r3, r0, #12
    1ff6:	428b      	cmp	r3, r1
    1ff8:	d301      	bcc.n	1ffe <__udivsi3+0x6a>
    1ffa:	030b      	lsls	r3, r1, #12
    1ffc:	1ac0      	subs	r0, r0, r3
    1ffe:	4152      	adcs	r2, r2
    2000:	0ac3      	lsrs	r3, r0, #11
    2002:	428b      	cmp	r3, r1
    2004:	d301      	bcc.n	200a <STACK_SIZE+0xa>
    2006:	02cb      	lsls	r3, r1, #11
    2008:	1ac0      	subs	r0, r0, r3
    200a:	4152      	adcs	r2, r2
    200c:	0a83      	lsrs	r3, r0, #10
    200e:	428b      	cmp	r3, r1
    2010:	d301      	bcc.n	2016 <STACK_SIZE+0x16>
    2012:	028b      	lsls	r3, r1, #10
    2014:	1ac0      	subs	r0, r0, r3
    2016:	4152      	adcs	r2, r2
    2018:	0a43      	lsrs	r3, r0, #9
    201a:	428b      	cmp	r3, r1
    201c:	d301      	bcc.n	2022 <STACK_SIZE+0x22>
    201e:	024b      	lsls	r3, r1, #9
    2020:	1ac0      	subs	r0, r0, r3
    2022:	4152      	adcs	r2, r2
    2024:	0a03      	lsrs	r3, r0, #8
    2026:	428b      	cmp	r3, r1
    2028:	d301      	bcc.n	202e <STACK_SIZE+0x2e>
    202a:	020b      	lsls	r3, r1, #8
    202c:	1ac0      	subs	r0, r0, r3
    202e:	4152      	adcs	r2, r2
    2030:	d2cd      	bcs.n	1fce <__udivsi3+0x3a>
    2032:	09c3      	lsrs	r3, r0, #7
    2034:	428b      	cmp	r3, r1
    2036:	d301      	bcc.n	203c <STACK_SIZE+0x3c>
    2038:	01cb      	lsls	r3, r1, #7
    203a:	1ac0      	subs	r0, r0, r3
    203c:	4152      	adcs	r2, r2
    203e:	0983      	lsrs	r3, r0, #6
    2040:	428b      	cmp	r3, r1
    2042:	d301      	bcc.n	2048 <STACK_SIZE+0x48>
    2044:	018b      	lsls	r3, r1, #6
    2046:	1ac0      	subs	r0, r0, r3
    2048:	4152      	adcs	r2, r2
    204a:	0943      	lsrs	r3, r0, #5
    204c:	428b      	cmp	r3, r1
    204e:	d301      	bcc.n	2054 <STACK_SIZE+0x54>
    2050:	014b      	lsls	r3, r1, #5
    2052:	1ac0      	subs	r0, r0, r3
    2054:	4152      	adcs	r2, r2
    2056:	0903      	lsrs	r3, r0, #4
    2058:	428b      	cmp	r3, r1
    205a:	d301      	bcc.n	2060 <STACK_SIZE+0x60>
    205c:	010b      	lsls	r3, r1, #4
    205e:	1ac0      	subs	r0, r0, r3
    2060:	4152      	adcs	r2, r2
    2062:	08c3      	lsrs	r3, r0, #3
    2064:	428b      	cmp	r3, r1
    2066:	d301      	bcc.n	206c <STACK_SIZE+0x6c>
    2068:	00cb      	lsls	r3, r1, #3
    206a:	1ac0      	subs	r0, r0, r3
    206c:	4152      	adcs	r2, r2
    206e:	0883      	lsrs	r3, r0, #2
    2070:	428b      	cmp	r3, r1
    2072:	d301      	bcc.n	2078 <STACK_SIZE+0x78>
    2074:	008b      	lsls	r3, r1, #2
    2076:	1ac0      	subs	r0, r0, r3
    2078:	4152      	adcs	r2, r2
    207a:	0843      	lsrs	r3, r0, #1
    207c:	428b      	cmp	r3, r1
    207e:	d301      	bcc.n	2084 <STACK_SIZE+0x84>
    2080:	004b      	lsls	r3, r1, #1
    2082:	1ac0      	subs	r0, r0, r3
    2084:	4152      	adcs	r2, r2
    2086:	1a41      	subs	r1, r0, r1
    2088:	d200      	bcs.n	208c <STACK_SIZE+0x8c>
    208a:	4601      	mov	r1, r0
    208c:	4152      	adcs	r2, r2
    208e:	4610      	mov	r0, r2
    2090:	4770      	bx	lr
    2092:	e7ff      	b.n	2094 <STACK_SIZE+0x94>
    2094:	b501      	push	{r0, lr}
    2096:	2000      	movs	r0, #0
    2098:	f000 f806 	bl	20a8 <__aeabi_idiv0>
    209c:	bd02      	pop	{r1, pc}
    209e:	46c0      	nop			; (mov r8, r8)

000020a0 <__aeabi_uidivmod>:
    20a0:	2900      	cmp	r1, #0
    20a2:	d0f7      	beq.n	2094 <STACK_SIZE+0x94>
    20a4:	e776      	b.n	1f94 <__udivsi3>
    20a6:	4770      	bx	lr

000020a8 <__aeabi_idiv0>:
    20a8:	4770      	bx	lr
    20aa:	46c0      	nop			; (mov r8, r8)

000020ac <__libc_init_array>:
    20ac:	b570      	push	{r4, r5, r6, lr}
    20ae:	2600      	movs	r6, #0
    20b0:	4d0c      	ldr	r5, [pc, #48]	; (20e4 <__libc_init_array+0x38>)
    20b2:	4c0d      	ldr	r4, [pc, #52]	; (20e8 <__libc_init_array+0x3c>)
    20b4:	1b64      	subs	r4, r4, r5
    20b6:	10a4      	asrs	r4, r4, #2
    20b8:	42a6      	cmp	r6, r4
    20ba:	d109      	bne.n	20d0 <__libc_init_array+0x24>
    20bc:	2600      	movs	r6, #0
    20be:	f000 f85f 	bl	2180 <_init>
    20c2:	4d0a      	ldr	r5, [pc, #40]	; (20ec <__libc_init_array+0x40>)
    20c4:	4c0a      	ldr	r4, [pc, #40]	; (20f0 <__libc_init_array+0x44>)
    20c6:	1b64      	subs	r4, r4, r5
    20c8:	10a4      	asrs	r4, r4, #2
    20ca:	42a6      	cmp	r6, r4
    20cc:	d105      	bne.n	20da <__libc_init_array+0x2e>
    20ce:	bd70      	pop	{r4, r5, r6, pc}
    20d0:	00b3      	lsls	r3, r6, #2
    20d2:	58eb      	ldr	r3, [r5, r3]
    20d4:	4798      	blx	r3
    20d6:	3601      	adds	r6, #1
    20d8:	e7ee      	b.n	20b8 <__libc_init_array+0xc>
    20da:	00b3      	lsls	r3, r6, #2
    20dc:	58eb      	ldr	r3, [r5, r3]
    20de:	4798      	blx	r3
    20e0:	3601      	adds	r6, #1
    20e2:	e7f2      	b.n	20ca <__libc_init_array+0x1e>
    20e4:	0000218c 	.word	0x0000218c
    20e8:	0000218c 	.word	0x0000218c
    20ec:	0000218c 	.word	0x0000218c
    20f0:	00002190 	.word	0x00002190

000020f4 <memcpy>:
    20f4:	2300      	movs	r3, #0
    20f6:	b510      	push	{r4, lr}
    20f8:	429a      	cmp	r2, r3
    20fa:	d100      	bne.n	20fe <memcpy+0xa>
    20fc:	bd10      	pop	{r4, pc}
    20fe:	5ccc      	ldrb	r4, [r1, r3]
    2100:	54c4      	strb	r4, [r0, r3]
    2102:	3301      	adds	r3, #1
    2104:	e7f8      	b.n	20f8 <memcpy+0x4>

00002106 <memset>:
    2106:	0003      	movs	r3, r0
    2108:	1882      	adds	r2, r0, r2
    210a:	4293      	cmp	r3, r2
    210c:	d100      	bne.n	2110 <memset+0xa>
    210e:	4770      	bx	lr
    2110:	7019      	strb	r1, [r3, #0]
    2112:	3301      	adds	r3, #1
    2114:	e7f9      	b.n	210a <memset+0x4>
    2116:	0000      	movs	r0, r0
    2118:	42000800 	.word	0x42000800
    211c:	42000c00 	.word	0x42000c00
    2120:	42001000 	.word	0x42001000
    2124:	42001400 	.word	0x42001400
    2128:	42001800 	.word	0x42001800
    212c:	42001c00 	.word	0x42001c00
    2130:	0c0b0a09 	.word	0x0c0b0a09
    2134:	00000e0d 	.word	0x00000e0d
    2138:	00001760 	.word	0x00001760
    213c:	000017b8 	.word	0x000017b8
    2140:	000017b8 	.word	0x000017b8
    2144:	0000175a 	.word	0x0000175a
    2148:	0000175a 	.word	0x0000175a
    214c:	00001774 	.word	0x00001774
    2150:	00001766 	.word	0x00001766
    2154:	0000177a 	.word	0x0000177a
    2158:	000017a8 	.word	0x000017a8
    215c:	00001844 	.word	0x00001844
    2160:	000018b2 	.word	0x000018b2
    2164:	000018b2 	.word	0x000018b2
    2168:	00001824 	.word	0x00001824
    216c:	00001836 	.word	0x00001836
    2170:	00001854 	.word	0x00001854
    2174:	00001828 	.word	0x00001828
    2178:	00001864 	.word	0x00001864
    217c:	000018a0 	.word	0x000018a0

00002180 <_init>:
    2180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2186:	bc08      	pop	{r3}
    2188:	469e      	mov	lr, r3
    218a:	4770      	bx	lr

0000218c <__init_array_start>:
    218c:	000000dd 	.word	0x000000dd

00002190 <_fini>:
    2190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2196:	bc08      	pop	{r3}
    2198:	469e      	mov	lr, r3
    219a:	4770      	bx	lr

0000219c <__fini_array_start>:
    219c:	000000b5 	.word	0x000000b5
