
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003910  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001ec  20000000  00003910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000204  200001ec  00003afc  000201ec  2**2
                  ALLOC
  3 .stack        00002000  200003f0  00003d00  000201ec  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
  6 .debug_info   00038558  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046ea  00000000  00000000  000587c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007871  00000000  00000000  0005ceaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006f8  00000000  00000000  00064720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009e0  00000000  00000000  00064e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000081f2  00000000  00000000  000657f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ffb3  00000000  00000000  0006d9ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000868f4  00000000  00000000  0007d99d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013cc  00000000  00000000  00104294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 23 00 20 ed 2b 00 00 e9 2b 00 00 e9 2b 00 00     .#. .+...+...+..
	...
      2c:	e9 2b 00 00 00 00 00 00 00 00 00 00 e9 2b 00 00     .+...........+..
      3c:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
      4c:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
      5c:	e9 2b 00 00 e9 2b 00 00 51 25 00 00 61 25 00 00     .+...+..Q%..a%..
      6c:	71 25 00 00 81 25 00 00 00 00 00 00 00 00 00 00     q%...%..........
      7c:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
      8c:	e9 2b 00 00 e9 2b 00 00 00 00 00 00 00 00 00 00     .+...+..........
      9c:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
      ac:	e9 2b 00 00 00 00 00 00                             .+......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001ec 	.word	0x200001ec
      d4:	00000000 	.word	0x00000000
      d8:	00003910 	.word	0x00003910

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001f0 	.word	0x200001f0
     108:	00003910 	.word	0x00003910
     10c:	00003910 	.word	0x00003910
     110:	00000000 	.word	0x00000000

00000114 <ringbuff_clear>:
uint8_t ringbuff_clear(ringbuff_t* pringbuff)
{
    uint8_t ret_val = -1;
    
    // NULL pointer check
    if(pringbuff)
     114:	2800      	cmp	r0, #0
     116:	d004      	beq.n	122 <ringbuff_clear+0xe>
    {
        // clear the read/write values
        pringbuff->write = 0;
     118:	2300      	movs	r3, #0
     11a:	6043      	str	r3, [r0, #4]
        pringbuff->read = 0;
     11c:	6083      	str	r3, [r0, #8]
        ret_val = 0;
     11e:	2000      	movs	r0, #0
    }
    
    return ret_val;
}
     120:	4770      	bx	lr
    uint8_t ret_val = -1;
     122:	20ff      	movs	r0, #255	; 0xff
     124:	e7fc      	b.n	120 <ringbuff_clear+0xc>
	...

00000128 <ringbuff_put>:


uint8_t ringbuff_put(ringbuff_t* pringbuff, uint8_t put_data)
{
     128:	b570      	push	{r4, r5, r6, lr}
     12a:	0004      	movs	r4, r0
     12c:	000d      	movs	r5, r1
    uint8_t ret_val = -1;
    
    // NULL pointer check
    if(pringbuff)
     12e:	2800      	cmp	r0, #0
     130:	d00e      	beq.n	150 <ringbuff_put+0x28>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     132:	4b08      	ldr	r3, [pc, #32]	; (154 <ringbuff_put+0x2c>)
     134:	4798      	blx	r3
    {
        // keep ring buffer operations atomic relative to interrupts   
        system_interrupt_enter_critical_section();
        
        // write data to the ring buffer
        pringbuff->buff[pringbuff->write] = put_data;
     136:	6823      	ldr	r3, [r4, #0]
     138:	6862      	ldr	r2, [r4, #4]
     13a:	549d      	strb	r5, [r3, r2]

        /* increment the head. This means old data will be overwritten if the
         * user does not check if the buffer is full */
        pringbuff->write = (pringbuff->write + 1) % pringbuff->size;
     13c:	6863      	ldr	r3, [r4, #4]
     13e:	1c58      	adds	r0, r3, #1
     140:	68e1      	ldr	r1, [r4, #12]
     142:	4b05      	ldr	r3, [pc, #20]	; (158 <ringbuff_put+0x30>)
     144:	4798      	blx	r3
     146:	6061      	str	r1, [r4, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     148:	4b04      	ldr	r3, [pc, #16]	; (15c <ringbuff_put+0x34>)
     14a:	4798      	blx	r3
        
        system_interrupt_leave_critical_section();

        ret_val = 0;
     14c:	2000      	movs	r0, #0
    }
    
    return ret_val;
}
     14e:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t ret_val = -1;
     150:	20ff      	movs	r0, #255	; 0xff
     152:	e7fc      	b.n	14e <ringbuff_put+0x26>
     154:	00002595 	.word	0x00002595
     158:	00002fa5 	.word	0x00002fa5
     15c:	000025d5 	.word	0x000025d5

00000160 <ringbuff_is_empty>:
}


bool ringbuff_is_empty(ringbuff_t* pringbuff)
{
    return (pringbuff->write == pringbuff->read);
     160:	6843      	ldr	r3, [r0, #4]
     162:	6880      	ldr	r0, [r0, #8]
     164:	1a18      	subs	r0, r3, r0
     166:	4243      	negs	r3, r0
     168:	4158      	adcs	r0, r3
     16a:	b2c0      	uxtb	r0, r0
}
     16c:	4770      	bx	lr
	...

00000170 <ringbuff_get>:
{
     170:	b570      	push	{r4, r5, r6, lr}
     172:	0004      	movs	r4, r0
     174:	000d      	movs	r5, r1
    if(pringbuff && pget_data && !ringbuff_is_empty(pringbuff))
     176:	2800      	cmp	r0, #0
     178:	d017      	beq.n	1aa <ringbuff_get+0x3a>
     17a:	2900      	cmp	r1, #0
     17c:	d017      	beq.n	1ae <ringbuff_get+0x3e>
     17e:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <ringbuff_get+0x44>)
     180:	4798      	blx	r3
     182:	2800      	cmp	r0, #0
     184:	d001      	beq.n	18a <ringbuff_get+0x1a>
    uint8_t ret_val = -1;
     186:	20ff      	movs	r0, #255	; 0xff
}
     188:	bd70      	pop	{r4, r5, r6, pc}
	cpu_irq_enter_critical();
     18a:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <ringbuff_get+0x48>)
     18c:	4798      	blx	r3
        *pget_data = pringbuff->buff[pringbuff->read];
     18e:	6823      	ldr	r3, [r4, #0]
     190:	68a2      	ldr	r2, [r4, #8]
     192:	5c9b      	ldrb	r3, [r3, r2]
     194:	702b      	strb	r3, [r5, #0]
        pringbuff->read = (pringbuff->read + 1) % pringbuff->size;
     196:	68a3      	ldr	r3, [r4, #8]
     198:	1c58      	adds	r0, r3, #1
     19a:	68e1      	ldr	r1, [r4, #12]
     19c:	4b07      	ldr	r3, [pc, #28]	; (1bc <ringbuff_get+0x4c>)
     19e:	4798      	blx	r3
     1a0:	60a1      	str	r1, [r4, #8]
	cpu_irq_leave_critical();
     1a2:	4b07      	ldr	r3, [pc, #28]	; (1c0 <ringbuff_get+0x50>)
     1a4:	4798      	blx	r3
        ret_val = 0;
     1a6:	2000      	movs	r0, #0
     1a8:	e7ee      	b.n	188 <ringbuff_get+0x18>
    uint8_t ret_val = -1;
     1aa:	20ff      	movs	r0, #255	; 0xff
     1ac:	e7ec      	b.n	188 <ringbuff_get+0x18>
     1ae:	20ff      	movs	r0, #255	; 0xff
     1b0:	e7ea      	b.n	188 <ringbuff_get+0x18>
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	00000161 	.word	0x00000161
     1b8:	00002595 	.word	0x00002595
     1bc:	00002fa5 	.word	0x00002fa5
     1c0:	000025d5 	.word	0x000025d5

000001c4 <spi40_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for the 40 MHz module
 */
void spi40_init(void)
{
     1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c6:	46c6      	mov	lr, r8
     1c8:	b500      	push	{lr}
     1ca:	b090      	sub	sp, #64	; 0x40
	if (spi40InitComp == true)
     1cc:	4b32      	ldr	r3, [pc, #200]	; (298 <spi40_init+0xd4>)
     1ce:	781b      	ldrb	r3, [r3, #0]
     1d0:	2b00      	cmp	r3, #0
     1d2:	d003      	beq.n	1dc <spi40_init+0x18>
	spi40SlaveConf.ss_pin = SS40;
	// attach the slave configs to the slave
	spi_attach_slave(&spi40Slave, &spi40SlaveConf);
    
    spi40InitComp = true;
}
     1d4:	b010      	add	sp, #64	; 0x40
     1d6:	bc04      	pop	{r2}
     1d8:	4690      	mov	r8, r2
     1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     1dc:	ac02      	add	r4, sp, #8
     1de:	2601      	movs	r6, #1
     1e0:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     1e2:	2500      	movs	r5, #0
     1e4:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     1e6:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     1e8:	23c0      	movs	r3, #192	; 0xc0
     1ea:	039b      	lsls	r3, r3, #14
     1ec:	4698      	mov	r8, r3
     1ee:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     1f0:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     1f2:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     1f4:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     1f6:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     1f8:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     1fa:	2724      	movs	r7, #36	; 0x24
     1fc:	55e5      	strb	r5, [r4, r7]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     1fe:	220c      	movs	r2, #12
     200:	2100      	movs	r1, #0
     202:	a808      	add	r0, sp, #32
     204:	4b25      	ldr	r3, [pc, #148]	; (29c <spi40_init+0xd8>)
     206:	4798      	blx	r3
    spi40MasterConf.mux_setting = SPI40_PINXMUX;
     208:	4643      	mov	r3, r8
     20a:	60e3      	str	r3, [r4, #12]
    spi40MasterConf.pinmux_pad0 = MOSI40;
     20c:	4b24      	ldr	r3, [pc, #144]	; (2a0 <spi40_init+0xdc>)
     20e:	62a3      	str	r3, [r4, #40]	; 0x28
    spi40MasterConf.pinmux_pad1 = SCK40;
     210:	4b24      	ldr	r3, [pc, #144]	; (2a4 <spi40_init+0xe0>)
     212:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi40MasterConf.pinmux_pad2 = PINMUX_UNUSED;
     214:	2301      	movs	r3, #1
     216:	425b      	negs	r3, r3
     218:	6323      	str	r3, [r4, #48]	; 0x30
    spi40MasterConf.pinmux_pad3 = MISO40;
     21a:	4b23      	ldr	r3, [pc, #140]	; (2a8 <spi40_init+0xe4>)
     21c:	6363      	str	r3, [r4, #52]	; 0x34
	spi40MasterConf.generator_source = SPI40_CLK;
     21e:	55e5      	strb	r5, [r4, r7]
	spi40MasterConf.mode_specific.master.baudrate = SPI40MAXCLK;
     220:	4b22      	ldr	r3, [pc, #136]	; (2ac <spi40_init+0xe8>)
     222:	61a3      	str	r3, [r4, #24]
	spi_init(&spi40Master, SPI40, &spi40MasterConf);
     224:	4d22      	ldr	r5, [pc, #136]	; (2b0 <spi40_init+0xec>)
     226:	0022      	movs	r2, r4
     228:	4922      	ldr	r1, [pc, #136]	; (2b4 <spi40_init+0xf0>)
     22a:	0028      	movs	r0, r5
     22c:	4b22      	ldr	r3, [pc, #136]	; (2b8 <spi40_init+0xf4>)
     22e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     230:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     232:	0020      	movs	r0, r4
     234:	4b21      	ldr	r3, [pc, #132]	; (2bc <spi40_init+0xf8>)
     236:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     238:	231f      	movs	r3, #31
     23a:	4018      	ands	r0, r3
     23c:	4086      	lsls	r6, r0
     23e:	4b20      	ldr	r3, [pc, #128]	; (2c0 <spi40_init+0xfc>)
     240:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     242:	4b1b      	ldr	r3, [pc, #108]	; (2b0 <spi40_init+0xec>)
     244:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     246:	69db      	ldr	r3, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     248:	2b00      	cmp	r3, #0
     24a:	d1fa      	bne.n	242 <spi40_init+0x7e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     24c:	6823      	ldr	r3, [r4, #0]
     24e:	2202      	movs	r2, #2
     250:	4313      	orrs	r3, r2
     252:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     254:	2300      	movs	r3, #0
	slave->ss_pin          = config->ss_pin;
     256:	4c1b      	ldr	r4, [pc, #108]	; (2c4 <spi40_init+0x100>)
     258:	3216      	adds	r2, #22
     25a:	7022      	strb	r2, [r4, #0]
	slave->address_enabled = config->address_enabled;
     25c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     25e:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     260:	3a17      	subs	r2, #23
     262:	4669      	mov	r1, sp
     264:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     266:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     268:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     26a:	2018      	movs	r0, #24
     26c:	4b16      	ldr	r3, [pc, #88]	; (2c8 <spi40_init+0x104>)
     26e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     270:	7821      	ldrb	r1, [r4, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     272:	09ca      	lsrs	r2, r1, #7
	uint8_t group_index = (gpio_pin / 32);
     274:	094b      	lsrs	r3, r1, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     276:	2a00      	cmp	r2, #0
     278:	d10c      	bne.n	294 <spi40_init+0xd0>
		return &(ports[port_index]->Group[group_index]);
     27a:	01db      	lsls	r3, r3, #7
     27c:	4a13      	ldr	r2, [pc, #76]	; (2cc <spi40_init+0x108>)
     27e:	4694      	mov	ip, r2
     280:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     282:	221f      	movs	r2, #31
     284:	400a      	ands	r2, r1
     286:	2101      	movs	r1, #1
     288:	0008      	movs	r0, r1
     28a:	4090      	lsls	r0, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     28c:	6198      	str	r0, [r3, #24]
    spi40InitComp = true;
     28e:	4b02      	ldr	r3, [pc, #8]	; (298 <spi40_init+0xd4>)
     290:	7019      	strb	r1, [r3, #0]
     292:	e79f      	b.n	1d4 <spi40_init+0x10>
	} else {
		Assert(false);
		return NULL;
     294:	2300      	movs	r3, #0
     296:	e7f4      	b.n	282 <spi40_init+0xbe>
     298:	20000216 	.word	0x20000216
     29c:	000035bd 	.word	0x000035bd
     2a0:	00160002 	.word	0x00160002
     2a4:	00170002 	.word	0x00170002
     2a8:	00190002 	.word	0x00190002
     2ac:	000f4240 	.word	0x000f4240
     2b0:	2000039c 	.word	0x2000039c
     2b4:	42001400 	.word	0x42001400
     2b8:	00001b65 	.word	0x00001b65
     2bc:	00002531 	.word	0x00002531
     2c0:	e000e100 	.word	0xe000e100
     2c4:	200003d8 	.word	0x200003d8
     2c8:	00000f85 	.word	0x00000f85
     2cc:	41004400 	.word	0x41004400

000002d0 <spi40_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Begins a SPI transfer with the 40 MHz module. Sends the
 *  starting address of the read/write and reads the status bits of the module.
 */
status_code_genare_t spi40_start_xfer(spiAddr40 paramAddr, xferDir40 dir)
{
     2d0:	b510      	push	{r4, lr}
     2d2:	b082      	sub	sp, #8
    
    status_code_genare_t read_status;

    // set the upper nibble of the address to all ones
    paramAddr |= 0xF000;
     2d4:	4b10      	ldr	r3, [pc, #64]	; (318 <spi40_start_xfer+0x48>)
     2d6:	4318      	orrs	r0, r3
     2d8:	b280      	uxth	r0, r0
     2da:	466b      	mov	r3, sp
     2dc:	80d8      	strh	r0, [r3, #6]
    
    if(dir == READ)
     2de:	2900      	cmp	r1, #0
     2e0:	d103      	bne.n	2ea <spi40_start_xfer+0x1a>
    {
        //clear the MSB of the address if it's a read
        paramAddr &= 0x7FFF;
     2e2:	0440      	lsls	r0, r0, #17
     2e4:	0c40      	lsrs	r0, r0, #17
     2e6:	466b      	mov	r3, sp
     2e8:	80d8      	strh	r0, [r3, #6]
    }        
    // else leave it unchanged, because the MSB = 1 if it's a write
    
    // swap the address bytes so the most significant byte is transferred first
    paramAddr = ((paramAddr >> 8) & 0x00FF) | (paramAddr << 8);
     2ea:	466b      	mov	r3, sp
     2ec:	1d9a      	adds	r2, r3, #6
     2ee:	88db      	ldrh	r3, [r3, #6]
     2f0:	0219      	lsls	r1, r3, #8
     2f2:	0a1b      	lsrs	r3, r3, #8
     2f4:	430b      	orrs	r3, r1
     2f6:	8013      	strh	r3, [r2, #0]
    
    do{
        // select the slave
        read_status = spi_select_slave(&spi40Master, &spi40Slave, true);
     2f8:	2201      	movs	r2, #1
     2fa:	4908      	ldr	r1, [pc, #32]	; (31c <spi40_start_xfer+0x4c>)
     2fc:	4808      	ldr	r0, [pc, #32]	; (320 <spi40_start_xfer+0x50>)
     2fe:	4b09      	ldr	r3, [pc, #36]	; (324 <spi40_start_xfer+0x54>)
     300:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
     302:	2805      	cmp	r0, #5
     304:	d0f8      	beq.n	2f8 <spi40_start_xfer+0x28>
    
    /* perform a SPI transceive (write AND read). Write the param address and
     * read the status bits from the module */
    read_status = spi_transceive_buffer_wait(&spi40Master, (uint8_t*) &paramAddr, 
     306:	2302      	movs	r3, #2
     308:	4a07      	ldr	r2, [pc, #28]	; (328 <spi40_start_xfer+0x58>)
     30a:	4669      	mov	r1, sp
     30c:	3106      	adds	r1, #6
     30e:	4804      	ldr	r0, [pc, #16]	; (320 <spi40_start_xfer+0x50>)
     310:	4c06      	ldr	r4, [pc, #24]	; (32c <spi40_start_xfer+0x5c>)
     312:	47a0      	blx	r4
                    (uint8_t*) &spi40_status_bits, 2);
    
    return read_status;
}
     314:	b002      	add	sp, #8
     316:	bd10      	pop	{r4, pc}
     318:	fffff000 	.word	0xfffff000
     31c:	200003d8 	.word	0x200003d8
     320:	2000039c 	.word	0x2000039c
     324:	00001d4d 	.word	0x00001d4d
     328:	20000218 	.word	0x20000218
     32c:	00002035 	.word	0x00002035

00000330 <spi40_stop_xfer>:
 * Parameters       : void
 * Return Values(s) : ASF general status code
 * Description      : Stops a transfer, i.e. releases slave select.
 */
status_code_genare_t spi40_stop_xfer(void)
{
     330:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&spi40Master, &spi40Slave, false);
     332:	2200      	movs	r2, #0
     334:	4902      	ldr	r1, [pc, #8]	; (340 <spi40_stop_xfer+0x10>)
     336:	4803      	ldr	r0, [pc, #12]	; (344 <spi40_stop_xfer+0x14>)
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <spi40_stop_xfer+0x18>)
     33a:	4798      	blx	r3
}
     33c:	bd10      	pop	{r4, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	200003d8 	.word	0x200003d8
     344:	2000039c 	.word	0x2000039c
     348:	00001d4d 	.word	0x00001d4d

0000034c <spi40_read>:
 * Description      : Reads a number of bytes specified by amount_bytes into
 *  read_buff. Used with spi40_start_xfer and spi40_stop_xfer().
 */
status_code_genare_t spi40_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
     34c:	b510      	push	{r4, lr}
     34e:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&spi40Master, \
     350:	2300      	movs	r3, #0
     352:	0001      	movs	r1, r0
     354:	4801      	ldr	r0, [pc, #4]	; (35c <spi40_read+0x10>)
     356:	4c02      	ldr	r4, [pc, #8]	; (360 <spi40_read+0x14>)
     358:	47a0      	blx	r4
                    read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
     35a:	bd10      	pop	{r4, pc}
     35c:	2000039c 	.word	0x2000039c
     360:	00001c51 	.word	0x00001c51

00000364 <spi40_rd8>:
 * Parameters       : read_addr (address to read from)
 * Return Values(s) : a byte
 * Description      : Reads a single byte from the 40 MHz module at read_addr.
 */
uint8_t spi40_rd8(spiAddr40 read_addr)
{
     364:	b510      	push	{r4, lr}
     366:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
     368:	466b      	mov	r3, sp
     36a:	1ddc      	adds	r4, r3, #7
     36c:	2300      	movs	r3, #0
     36e:	7023      	strb	r3, [r4, #0]
    
    spi40_start_xfer(read_addr, READ);
     370:	2100      	movs	r1, #0
     372:	4b05      	ldr	r3, [pc, #20]	; (388 <spi40_rd8+0x24>)
     374:	4798      	blx	r3
    
    // read one byte
    spi40_read(&read_byte, 1);
     376:	2101      	movs	r1, #1
     378:	0020      	movs	r0, r4
     37a:	4b04      	ldr	r3, [pc, #16]	; (38c <spi40_rd8+0x28>)
     37c:	4798      	blx	r3
    
    spi40_stop_xfer();
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <spi40_rd8+0x2c>)
     380:	4798      	blx	r3
    
    return read_byte;
     382:	7820      	ldrb	r0, [r4, #0]
}
     384:	b002      	add	sp, #8
     386:	bd10      	pop	{r4, pc}
     388:	000002d1 	.word	0x000002d1
     38c:	0000034d 	.word	0x0000034d
     390:	00000331 	.word	0x00000331

00000394 <spi40_write>:
 * Description      : Writes a number of bytes specified by amount_bytes to
 *  the 40 MHz module. Used with spi40_start_xfer and spi40_stop_xfer().
 */
status_code_genare_t spi40_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
     394:	b510      	push	{r4, lr}
     396:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&spi40Master, \
     398:	0001      	movs	r1, r0
     39a:	4802      	ldr	r0, [pc, #8]	; (3a4 <spi40_write+0x10>)
     39c:	4b02      	ldr	r3, [pc, #8]	; (3a8 <spi40_write+0x14>)
     39e:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
}
     3a0:	bd10      	pop	{r4, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	2000039c 	.word	0x2000039c
     3a8:	00001e49 	.word	0x00001e49

000003ac <spi40_wr8>:
 * Parameters       : wrt_addr (address to write to), wrt_byte
 * Return Values(s) : ASF general status code
 * Description      : Writes a single byte to the 40 MHz module at wrt_addr.
 */
status_code_genare_t spi40_wr8(spiAddr40 wrt_addr, uint8_t wrt_byte)
{
     3ac:	b510      	push	{r4, lr}
     3ae:	b082      	sub	sp, #8
     3b0:	466b      	mov	r3, sp
     3b2:	1ddc      	adds	r4, r3, #7
     3b4:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    spi40_start_xfer(wrt_addr, WRT);
     3b6:	2101      	movs	r1, #1
     3b8:	4b05      	ldr	r3, [pc, #20]	; (3d0 <spi40_wr8+0x24>)
     3ba:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = spi40_write(&wrt_byte, 1);
     3bc:	2101      	movs	r1, #1
     3be:	0020      	movs	r0, r4
     3c0:	4b04      	ldr	r3, [pc, #16]	; (3d4 <spi40_wr8+0x28>)
     3c2:	4798      	blx	r3
     3c4:	0004      	movs	r4, r0
    
    spi40_stop_xfer();
     3c6:	4b04      	ldr	r3, [pc, #16]	; (3d8 <spi40_wr8+0x2c>)
     3c8:	4798      	blx	r3
    
    return status_result;
}
     3ca:	0020      	movs	r0, r4
     3cc:	b002      	add	sp, #8
     3ce:	bd10      	pop	{r4, pc}
     3d0:	000002d1 	.word	0x000002d1
     3d4:	00000395 	.word	0x00000395
     3d8:	00000331 	.word	0x00000331

000003dc <spi40_autorange>:
    return status_result;
}


void spi40_autorange(void)
{
     3dc:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_PLLRANGINGA, 0x18);
     3de:	2118      	movs	r1, #24
     3e0:	2033      	movs	r0, #51	; 0x33
     3e2:	4b04      	ldr	r3, [pc, #16]	; (3f4 <spi40_autorange+0x18>)
     3e4:	4798      	blx	r3
    
    while(spi40_rd8(AX5043_PLLRANGINGA) & 0x10);   
     3e6:	2033      	movs	r0, #51	; 0x33
     3e8:	4b03      	ldr	r3, [pc, #12]	; (3f8 <spi40_autorange+0x1c>)
     3ea:	4798      	blx	r3
     3ec:	06c3      	lsls	r3, r0, #27
     3ee:	d4fa      	bmi.n	3e6 <spi40_autorange+0xa>
    
}
     3f0:	bd10      	pop	{r4, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	000003ad 	.word	0x000003ad
     3f8:	00000365 	.word	0x00000365

000003fc <spi40_init_test10>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes a 40 MHz module for transmitting.
 */
void spi40_init_test10(void)
{
     3fc:	b510      	push	{r4, lr}
    // set power mode to standby
    spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
     3fe:	2165      	movs	r1, #101	; 0x65
     400:	2002      	movs	r0, #2
     402:	4cfe      	ldr	r4, [pc, #1016]	; (7fc <spi40_init_test10+0x400>)
     404:	47a0      	blx	r4
    delay_ms(100);
     406:	2064      	movs	r0, #100	; 0x64
     408:	4bfd      	ldr	r3, [pc, #1012]	; (800 <spi40_init_test10+0x404>)
     40a:	4798      	blx	r3
    
    spi40_wr8(AX5043_MODULATION, 0x08);
     40c:	2108      	movs	r1, #8
     40e:	2010      	movs	r0, #16
     410:	47a0      	blx	r4
    spi40_wr8(AX5043_ENCODING, 0x00);
     412:	2100      	movs	r1, #0
     414:	2011      	movs	r0, #17
     416:	47a0      	blx	r4
    spi40_wr8(AX5043_FRAMING, 0x06);
     418:	2106      	movs	r1, #6
     41a:	2012      	movs	r0, #18
     41c:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCSYSCLK, 0x02);
     41e:	2102      	movs	r1, #2
     420:	2021      	movs	r0, #33	; 0x21
     422:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCDCLK, 0x02);
     424:	2102      	movs	r1, #2
     426:	2022      	movs	r0, #34	; 0x22
     428:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCDATA, 0x02);
     42a:	2102      	movs	r1, #2
     42c:	2023      	movs	r0, #35	; 0x23
     42e:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCANTSEL, 0x02);
     430:	2102      	movs	r1, #2
     432:	2025      	movs	r0, #37	; 0x25
     434:	47a0      	blx	r4
    spi40_wr8(AX5043_PINFUNCPWRAMP, 0x02);
     436:	2102      	movs	r1, #2
     438:	2026      	movs	r0, #38	; 0x26
     43a:	47a0      	blx	r4
    spi40_wr8(AX5043_WAKEUPXOEARLY, 0x01);
     43c:	2101      	movs	r1, #1
     43e:	206e      	movs	r0, #110	; 0x6e
     440:	47a0      	blx	r4
    spi40_wr8(AX5043_IFFREQ1, 0x06);
     442:	2106      	movs	r1, #6
     444:	2080      	movs	r0, #128	; 0x80
     446:	0040      	lsls	r0, r0, #1
     448:	47a0      	blx	r4
    spi40_wr8(AX5043_IFFREQ0, 0x66);
     44a:	2166      	movs	r1, #102	; 0x66
     44c:	2002      	movs	r0, #2
     44e:	30ff      	adds	r0, #255	; 0xff
     450:	47a0      	blx	r4
    spi40_wr8(AX5043_DECIMATION, 0x05);
     452:	2105      	movs	r1, #5
     454:	2081      	movs	r0, #129	; 0x81
     456:	0040      	lsls	r0, r0, #1
     458:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE2, 0x05);
     45a:	2105      	movs	r1, #5
     45c:	2004      	movs	r0, #4
     45e:	30ff      	adds	r0, #255	; 0xff
     460:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE1, 0x35);
     462:	2135      	movs	r1, #53	; 0x35
     464:	2082      	movs	r0, #130	; 0x82
     466:	0040      	lsls	r0, r0, #1
     468:	47a0      	blx	r4
    spi40_wr8(AX5043_RXDATARATE0, 0x55);
     46a:	2155      	movs	r1, #85	; 0x55
     46c:	2006      	movs	r0, #6
     46e:	30ff      	adds	r0, #255	; 0xff
     470:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET2, 0x00);
     472:	2100      	movs	r1, #0
     474:	2083      	movs	r0, #131	; 0x83
     476:	0040      	lsls	r0, r0, #1
     478:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET1, 0x00);
     47a:	2100      	movs	r1, #0
     47c:	2008      	movs	r0, #8
     47e:	30ff      	adds	r0, #255	; 0xff
     480:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXDROFFSET0, 0x00);
     482:	2100      	movs	r1, #0
     484:	2084      	movs	r0, #132	; 0x84
     486:	0040      	lsls	r0, r0, #1
     488:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET2, 0x80);
     48a:	2180      	movs	r1, #128	; 0x80
     48c:	200a      	movs	r0, #10
     48e:	30ff      	adds	r0, #255	; 0xff
     490:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET1, 0x29);
     492:	2129      	movs	r1, #41	; 0x29
     494:	2085      	movs	r0, #133	; 0x85
     496:	0040      	lsls	r0, r0, #1
     498:	47a0      	blx	r4
    spi40_wr8(AX5043_MAXRFOFFSET0, 0x89);
     49a:	2189      	movs	r1, #137	; 0x89
     49c:	200c      	movs	r0, #12
     49e:	30ff      	adds	r0, #255	; 0xff
     4a0:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMAX1, 0x22);
     4a2:	2122      	movs	r1, #34	; 0x22
     4a4:	2086      	movs	r0, #134	; 0x86
     4a6:	0040      	lsls	r0, r0, #1
     4a8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMAX0, 0xC0);
     4aa:	21c0      	movs	r1, #192	; 0xc0
     4ac:	200e      	movs	r0, #14
     4ae:	30ff      	adds	r0, #255	; 0xff
     4b0:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMIN1, 0xDD);
     4b2:	21dd      	movs	r1, #221	; 0xdd
     4b4:	2087      	movs	r0, #135	; 0x87
     4b6:	0040      	lsls	r0, r0, #1
     4b8:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDMIN0, 0x40);
     4ba:	2140      	movs	r1, #64	; 0x40
     4bc:	2010      	movs	r0, #16
     4be:	30ff      	adds	r0, #255	; 0xff
     4c0:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLFILTER, 0x00);
     4c2:	2100      	movs	r1, #0
     4c4:	2016      	movs	r0, #22
     4c6:	30ff      	adds	r0, #255	; 0xff
     4c8:	47a0      	blx	r4
    spi40_wr8(AX5043_RXPARAMSETS, 0xF4);
     4ca:	21f4      	movs	r1, #244	; 0xf4
     4cc:	2018      	movs	r0, #24
     4ce:	30ff      	adds	r0, #255	; 0xff
     4d0:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN0, 0xE8);
     4d2:	21e8      	movs	r1, #232	; 0xe8
     4d4:	2090      	movs	r0, #144	; 0x90
     4d6:	0040      	lsls	r0, r0, #1
     4d8:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET0, 0x8F); //org val: 0x84
     4da:	218f      	movs	r1, #143	; 0x8f
     4dc:	2022      	movs	r0, #34	; 0x22
     4de:	30ff      	adds	r0, #255	; 0xff
     4e0:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST0, 0x00); 
     4e2:	2100      	movs	r1, #0
     4e4:	2091      	movs	r0, #145	; 0x91
     4e6:	0040      	lsls	r0, r0, #1
     4e8:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN0, 0xAD);
     4ea:	21ad      	movs	r1, #173	; 0xad
     4ec:	2092      	movs	r0, #146	; 0x92
     4ee:	0040      	lsls	r0, r0, #1
     4f0:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN0, 0xA7);
     4f2:	21a7      	movs	r1, #167	; 0xa7
     4f4:	2026      	movs	r0, #38	; 0x26
     4f6:	30ff      	adds	r0, #255	; 0xff
     4f8:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN0, 0xC3);
     4fa:	21c3      	movs	r1, #195	; 0xc3
     4fc:	2093      	movs	r0, #147	; 0x93
     4fe:	0040      	lsls	r0, r0, #1
     500:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA0, 0x0F);
     502:	210f      	movs	r1, #15
     504:	2028      	movs	r0, #40	; 0x28
     506:	30ff      	adds	r0, #255	; 0xff
     508:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB0, 0x1F);
     50a:	211f      	movs	r1, #31
     50c:	2094      	movs	r0, #148	; 0x94
     50e:	0040      	lsls	r0, r0, #1
     510:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC0, 0x0A);
     512:	210a      	movs	r1, #10
     514:	202a      	movs	r0, #42	; 0x2a
     516:	30ff      	adds	r0, #255	; 0xff
     518:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND0, 0x0A);
     51a:	210a      	movs	r1, #10
     51c:	2095      	movs	r0, #149	; 0x95
     51e:	0040      	lsls	r0, r0, #1
     520:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN0, 0x01); //org val: 0x06
     522:	2101      	movs	r1, #1
     524:	202c      	movs	r0, #44	; 0x2c
     526:	30ff      	adds	r0, #255	; 0xff
     528:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV10, 0x00);
     52a:	2100      	movs	r1, #0
     52c:	2096      	movs	r0, #150	; 0x96
     52e:	0040      	lsls	r0, r0, #1
     530:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV00, 0x00);
     532:	2100      	movs	r1, #0
     534:	202e      	movs	r0, #46	; 0x2e
     536:	30ff      	adds	r0, #255	; 0xff
     538:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK0, 0x16); //org value: 0x16
     53a:	2116      	movs	r1, #22
     53c:	2097      	movs	r0, #151	; 0x97
     53e:	0040      	lsls	r0, r0, #1
     540:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES0, 0x00);
     542:	2100      	movs	r1, #0
     544:	2030      	movs	r0, #48	; 0x30
     546:	30ff      	adds	r0, #255	; 0xff
     548:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN1, 0xE8);
     54a:	21e8      	movs	r1, #232	; 0xe8
     54c:	2098      	movs	r0, #152	; 0x98
     54e:	0040      	lsls	r0, r0, #1
     550:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET1, 0x8F); //org val: 0x84
     552:	218f      	movs	r1, #143	; 0x8f
     554:	2032      	movs	r0, #50	; 0x32
     556:	30ff      	adds	r0, #255	; 0xff
     558:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST1, 0x00); 
     55a:	2100      	movs	r1, #0
     55c:	2099      	movs	r0, #153	; 0x99
     55e:	0040      	lsls	r0, r0, #1
     560:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX1, 0x00);
     562:	2100      	movs	r1, #0
     564:	2034      	movs	r0, #52	; 0x34
     566:	30ff      	adds	r0, #255	; 0xff
     568:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN1, 0xAB);
     56a:	21ab      	movs	r1, #171	; 0xab
     56c:	209a      	movs	r0, #154	; 0x9a
     56e:	0040      	lsls	r0, r0, #1
     570:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN1, 0xA6);
     572:	21a6      	movs	r1, #166	; 0xa6
     574:	2036      	movs	r0, #54	; 0x36
     576:	30ff      	adds	r0, #255	; 0xff
     578:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN1, 0xC3);
     57a:	21c3      	movs	r1, #195	; 0xc3
     57c:	209b      	movs	r0, #155	; 0x9b
     57e:	0040      	lsls	r0, r0, #1
     580:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA1, 0x0F);
     582:	210f      	movs	r1, #15
     584:	2038      	movs	r0, #56	; 0x38
     586:	30ff      	adds	r0, #255	; 0xff
     588:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB1, 0x1F);
     58a:	211f      	movs	r1, #31
     58c:	209c      	movs	r0, #156	; 0x9c
     58e:	0040      	lsls	r0, r0, #1
     590:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC1, 0x0A);
     592:	210a      	movs	r1, #10
     594:	203a      	movs	r0, #58	; 0x3a
     596:	30ff      	adds	r0, #255	; 0xff
     598:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND1, 0x0A);
     59a:	210a      	movs	r1, #10
     59c:	209d      	movs	r0, #157	; 0x9d
     59e:	0040      	lsls	r0, r0, #1
     5a0:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN1, 0x01); //org val: 0x06
     5a2:	2101      	movs	r1, #1
     5a4:	203c      	movs	r0, #60	; 0x3c
     5a6:	30ff      	adds	r0, #255	; 0xff
     5a8:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV11, 0x00);
     5aa:	2100      	movs	r1, #0
     5ac:	209e      	movs	r0, #158	; 0x9e
     5ae:	0040      	lsls	r0, r0, #1
     5b0:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV01, 0x4B);
     5b2:	214b      	movs	r1, #75	; 0x4b
     5b4:	203e      	movs	r0, #62	; 0x3e
     5b6:	30ff      	adds	r0, #255	; 0xff
     5b8:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK1, 0x16); //org value: 0x16
     5ba:	2116      	movs	r1, #22
     5bc:	209f      	movs	r0, #159	; 0x9f
     5be:	0040      	lsls	r0, r0, #1
     5c0:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES1, 0x00);
     5c2:	2100      	movs	r1, #0
     5c4:	2040      	movs	r0, #64	; 0x40
     5c6:	30ff      	adds	r0, #255	; 0xff
     5c8:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN3, 0xFF);
     5ca:	21ff      	movs	r1, #255	; 0xff
     5cc:	20a8      	movs	r0, #168	; 0xa8
     5ce:	0040      	lsls	r0, r0, #1
     5d0:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET3, 0x8F); //org val: 0x84
     5d2:	218f      	movs	r1, #143	; 0x8f
     5d4:	2052      	movs	r0, #82	; 0x52
     5d6:	30ff      	adds	r0, #255	; 0xff
     5d8:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST3, 0x00); 
     5da:	2100      	movs	r1, #0
     5dc:	20a9      	movs	r0, #169	; 0xa9
     5de:	0040      	lsls	r0, r0, #1
     5e0:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX3, 0x00);
     5e2:	2100      	movs	r1, #0
     5e4:	2054      	movs	r0, #84	; 0x54
     5e6:	30ff      	adds	r0, #255	; 0xff
     5e8:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN3, 0xAA);
     5ea:	21aa      	movs	r1, #170	; 0xaa
     5ec:	20aa      	movs	r0, #170	; 0xaa
     5ee:	0040      	lsls	r0, r0, #1
     5f0:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN3, 0xA5);
     5f2:	21a5      	movs	r1, #165	; 0xa5
     5f4:	2056      	movs	r0, #86	; 0x56
     5f6:	30ff      	adds	r0, #255	; 0xff
     5f8:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN3, 0xC3);
     5fa:	21c3      	movs	r1, #195	; 0xc3
     5fc:	20ab      	movs	r0, #171	; 0xab
     5fe:	0040      	lsls	r0, r0, #1
     600:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA3, 0x0F);
     602:	210f      	movs	r1, #15
     604:	2058      	movs	r0, #88	; 0x58
     606:	30ff      	adds	r0, #255	; 0xff
     608:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB3, 0x1F);
     60a:	211f      	movs	r1, #31
     60c:	20ac      	movs	r0, #172	; 0xac
     60e:	0040      	lsls	r0, r0, #1
     610:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC3, 0x0D);
     612:	210d      	movs	r1, #13
     614:	205a      	movs	r0, #90	; 0x5a
     616:	30ff      	adds	r0, #255	; 0xff
     618:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND3, 0x0D);
     61a:	210d      	movs	r1, #13
     61c:	20ad      	movs	r0, #173	; 0xad
     61e:	0040      	lsls	r0, r0, #1
     620:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN3, 0x01); //org val: 0x06
     622:	2101      	movs	r1, #1
     624:	205c      	movs	r0, #92	; 0x5c
     626:	30ff      	adds	r0, #255	; 0xff
     628:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV13, 0x00);
     62a:	2100      	movs	r1, #0
     62c:	20ae      	movs	r0, #174	; 0xae
     62e:	0040      	lsls	r0, r0, #1
     630:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV03, 0x4B);
     632:	214b      	movs	r1, #75	; 0x4b
     634:	205e      	movs	r0, #94	; 0x5e
     636:	30ff      	adds	r0, #255	; 0xff
     638:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK3, 0x16); //org value: 0x16
     63a:	2116      	movs	r1, #22
     63c:	20af      	movs	r0, #175	; 0xaf
     63e:	0040      	lsls	r0, r0, #1
     640:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES3, 0x00);
     642:	2100      	movs	r1, #0
     644:	2060      	movs	r0, #96	; 0x60
     646:	30ff      	adds	r0, #255	; 0xff
     648:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGF, 0x00);
     64a:	2100      	movs	r1, #0
     64c:	20b0      	movs	r0, #176	; 0xb0
     64e:	0040      	lsls	r0, r0, #1
     650:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV2, 0x00);
     652:	2100      	movs	r1, #0
     654:	2062      	movs	r0, #98	; 0x62
     656:	30ff      	adds	r0, #255	; 0xff
     658:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV1, 0x02);
     65a:	2102      	movs	r1, #2
     65c:	20b1      	movs	r0, #177	; 0xb1
     65e:	0040      	lsls	r0, r0, #1
     660:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV0, 0x0C);
     662:	210c      	movs	r1, #12
     664:	2064      	movs	r0, #100	; 0x64
     666:	30ff      	adds	r0, #255	; 0xff
     668:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGA, 0x05);
     66a:	2105      	movs	r1, #5
     66c:	20b2      	movs	r0, #178	; 0xb2
     66e:	0040      	lsls	r0, r0, #1
     670:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE2, 0x00);
     672:	2100      	movs	r1, #0
     674:	2066      	movs	r0, #102	; 0x66
     676:	30ff      	adds	r0, #255	; 0xff
     678:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE1, 0x04);
     67a:	2104      	movs	r1, #4
     67c:	20b3      	movs	r0, #179	; 0xb3
     67e:	0040      	lsls	r0, r0, #1
     680:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE0, 0xEA);
     682:	21ea      	movs	r1, #234	; 0xea
     684:	2068      	movs	r0, #104	; 0x68
     686:	30ff      	adds	r0, #255	; 0xff
     688:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB1, 0x02);
     68a:	2102      	movs	r1, #2
     68c:	20b5      	movs	r0, #181	; 0xb5
     68e:	0040      	lsls	r0, r0, #1
     690:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB0, 0x07);
     692:	2107      	movs	r1, #7
     694:	206c      	movs	r0, #108	; 0x6c
     696:	30ff      	adds	r0, #255	; 0xff
     698:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCOI, 0x8A);
     69a:	218a      	movs	r1, #138	; 0x8a
     69c:	20c0      	movs	r0, #192	; 0xc0
     69e:	0040      	lsls	r0, r0, #1
     6a0:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLRNGCLK, 0x03);
     6a2:	2103      	movs	r1, #3
     6a4:	2084      	movs	r0, #132	; 0x84
     6a6:	30ff      	adds	r0, #255	; 0xff
     6a8:	47a0      	blx	r4
    spi40_wr8(AX5043_BBTUNE, 0x0F);
     6aa:	210f      	movs	r1, #15
     6ac:	20c4      	movs	r0, #196	; 0xc4
     6ae:	0040      	lsls	r0, r0, #1
     6b0:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSCAP, 0x77);
     6b2:	2177      	movs	r1, #119	; 0x77
     6b4:	208a      	movs	r0, #138	; 0x8a
     6b6:	30ff      	adds	r0, #255	; 0xff
     6b8:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTADDRCFG, 0x80);
     6ba:	2180      	movs	r1, #128	; 0x80
     6bc:	2080      	movs	r0, #128	; 0x80
     6be:	0080      	lsls	r0, r0, #2
     6c0:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENCFG, 0x00);
     6c2:	2100      	movs	r1, #0
     6c4:	484f      	ldr	r0, [pc, #316]	; (804 <spi40_init_test10+0x408>)
     6c6:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENOFFSET, 0x04);
     6c8:	2104      	movs	r1, #4
     6ca:	484f      	ldr	r0, [pc, #316]	; (808 <spi40_init_test10+0x40c>)
     6cc:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTMAXLEN, 0xC8);
     6ce:	21c8      	movs	r1, #200	; 0xc8
     6d0:	484e      	ldr	r0, [pc, #312]	; (80c <spi40_init_test10+0x410>)
     6d2:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT3, 0xAA);
     6d4:	21aa      	movs	r1, #170	; 0xaa
     6d6:	2084      	movs	r0, #132	; 0x84
     6d8:	0080      	lsls	r0, r0, #2
     6da:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT2, 0xCC);
     6dc:	21cc      	movs	r1, #204	; 0xcc
     6de:	484c      	ldr	r0, [pc, #304]	; (810 <spi40_init_test10+0x414>)
     6e0:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT1, 0xAA);
     6e2:	21aa      	movs	r1, #170	; 0xaa
     6e4:	484b      	ldr	r0, [pc, #300]	; (814 <spi40_init_test10+0x418>)
     6e6:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT0, 0xCC);
     6e8:	21cc      	movs	r1, #204	; 0xcc
     6ea:	484b      	ldr	r0, [pc, #300]	; (818 <spi40_init_test10+0x41c>)
     6ec:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0LEN, 0x9F);
     6ee:	219f      	movs	r1, #159	; 0x9f
     6f0:	2085      	movs	r0, #133	; 0x85
     6f2:	0080      	lsls	r0, r0, #2
     6f4:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0MAX, 0x1F);
     6f6:	211f      	movs	r1, #31
     6f8:	4848      	ldr	r0, [pc, #288]	; (81c <spi40_init_test10+0x420>)
     6fa:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT1, 0x55);
     6fc:	2155      	movs	r1, #85	; 0x55
     6fe:	2086      	movs	r0, #134	; 0x86
     700:	0080      	lsls	r0, r0, #2
     702:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT0, 0x55);
     704:	2155      	movs	r1, #85	; 0x55
     706:	4846      	ldr	r0, [pc, #280]	; (820 <spi40_init_test10+0x424>)
     708:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1LEN, 0x8A);
     70a:	218a      	movs	r1, #138	; 0x8a
     70c:	2087      	movs	r0, #135	; 0x87
     70e:	0080      	lsls	r0, r0, #2
     710:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1MAX, 0x0A);
     712:	210a      	movs	r1, #10
     714:	4843      	ldr	r0, [pc, #268]	; (824 <spi40_init_test10+0x428>)
     716:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXBOOST, 0x32);
     718:	2132      	movs	r1, #50	; 0x32
     71a:	2088      	movs	r0, #136	; 0x88
     71c:	0080      	lsls	r0, r0, #2
     71e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXSETTLE, 0x14);
     720:	2114      	movs	r1, #20
     722:	4841      	ldr	r0, [pc, #260]	; (828 <spi40_init_test10+0x42c>)
     724:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXBOOST, 0x32);
     726:	2132      	movs	r1, #50	; 0x32
     728:	4840      	ldr	r0, [pc, #256]	; (82c <spi40_init_test10+0x430>)
     72a:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXSETTLE, 0x14);
     72c:	2114      	movs	r1, #20
     72e:	2089      	movs	r0, #137	; 0x89
     730:	0080      	lsls	r0, r0, #2
     732:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXOFFSACQ, 0x00);
     734:	2100      	movs	r1, #0
     736:	483e      	ldr	r0, [pc, #248]	; (830 <spi40_init_test10+0x434>)
     738:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXCOARSEAGC, 0x73);
     73a:	2173      	movs	r1, #115	; 0x73
     73c:	483d      	ldr	r0, [pc, #244]	; (834 <spi40_init_test10+0x438>)
     73e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXRSSI, 0x03);
     740:	2103      	movs	r1, #3
     742:	208a      	movs	r0, #138	; 0x8a
     744:	0080      	lsls	r0, r0, #2
     746:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXPREAMBLE2, 0x35);
     748:	2135      	movs	r1, #53	; 0x35
     74a:	483b      	ldr	r0, [pc, #236]	; (838 <spi40_init_test10+0x43c>)
     74c:	47a0      	blx	r4
    spi40_wr8(AX5043_RSSIABSTHR, 0x84); //org val: 0xE6
     74e:	2184      	movs	r1, #132	; 0x84
     750:	483a      	ldr	r0, [pc, #232]	; (83c <spi40_init_test10+0x440>)
     752:	47a0      	blx	r4
    spi40_wr8(AX5043_BGNDRSSITHR, 0x84);
     754:	2184      	movs	r1, #132	; 0x84
     756:	483a      	ldr	r0, [pc, #232]	; (840 <spi40_init_test10+0x444>)
     758:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTCHUNKSIZE, 0x0D);
     75a:	210d      	movs	r1, #13
     75c:	208c      	movs	r0, #140	; 0x8c
     75e:	0080      	lsls	r0, r0, #2
     760:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTACCEPTFLAGS, 0x20);
     762:	2120      	movs	r1, #32
     764:	4837      	ldr	r0, [pc, #220]	; (844 <spi40_init_test10+0x448>)
     766:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE1, 0x00);
     768:	2100      	movs	r1, #0
     76a:	20cc      	movs	r0, #204	; 0xcc
     76c:	0080      	lsls	r0, r0, #2
     76e:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE0, 0x00);
     770:	2100      	movs	r1, #0
     772:	4835      	ldr	r0, [pc, #212]	; (848 <spi40_init_test10+0x44c>)
     774:	47a0      	blx	r4
    spi40_wr8(AX5043_DACCONFIG, 0x00);
     776:	2100      	movs	r1, #0
     778:	4834      	ldr	r0, [pc, #208]	; (84c <spi40_init_test10+0x450>)
     77a:	47a0      	blx	r4
    spi40_wr8(AX5043_REF, 0x03);
     77c:	2103      	movs	r1, #3
     77e:	4834      	ldr	r0, [pc, #208]	; (850 <spi40_init_test10+0x454>)
     780:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALOSC, 0x03);
     782:	2103      	movs	r1, #3
     784:	20f1      	movs	r0, #241	; 0xf1
     786:	0100      	lsls	r0, r0, #4
     788:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALAMPL, 0x07);
     78a:	2107      	movs	r1, #7
     78c:	4831      	ldr	r0, [pc, #196]	; (854 <spi40_init_test10+0x458>)
     78e:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF1C, 0x07);
     790:	2107      	movs	r1, #7
     792:	4831      	ldr	r0, [pc, #196]	; (858 <spi40_init_test10+0x45c>)
     794:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF21, 0x68);
     796:	2168      	movs	r1, #104	; 0x68
     798:	4830      	ldr	r0, [pc, #192]	; (85c <spi40_init_test10+0x460>)
     79a:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF22, 0xFF);
     79c:	21ff      	movs	r1, #255	; 0xff
     79e:	4830      	ldr	r0, [pc, #192]	; (860 <spi40_init_test10+0x464>)
     7a0:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF23, 0x84);
     7a2:	2184      	movs	r1, #132	; 0x84
     7a4:	482f      	ldr	r0, [pc, #188]	; (864 <spi40_init_test10+0x468>)
     7a6:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF26, 0x98);
     7a8:	2198      	movs	r1, #152	; 0x98
     7aa:	482f      	ldr	r0, [pc, #188]	; (868 <spi40_init_test10+0x46c>)
     7ac:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF34, 0x08);
     7ae:	2108      	movs	r1, #8
     7b0:	482e      	ldr	r0, [pc, #184]	; (86c <spi40_init_test10+0x470>)
     7b2:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF35, 0x10);
     7b4:	2110      	movs	r1, #16
     7b6:	482e      	ldr	r0, [pc, #184]	; (870 <spi40_init_test10+0x474>)
     7b8:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF44, 0x25);
     7ba:	2125      	movs	r1, #37	; 0x25
     7bc:	482d      	ldr	r0, [pc, #180]	; (874 <spi40_init_test10+0x478>)
     7be:	47a0      	blx	r4
    
    spi40_wr8(AX5043_PLLLOOP, 0x0A);
     7c0:	210a      	movs	r1, #10
     7c2:	2030      	movs	r0, #48	; 0x30
     7c4:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLCPI, 0x10);
     7c6:	2110      	movs	r1, #16
     7c8:	2031      	movs	r0, #49	; 0x31
     7ca:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCODIV, 0x30); //org val = 0x30
     7cc:	2130      	movs	r1, #48	; 0x30
     7ce:	2032      	movs	r0, #50	; 0x32
     7d0:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALCAP, 0x13);
     7d2:	2113      	movs	r1, #19
     7d4:	20c2      	movs	r0, #194	; 0xc2
     7d6:	0040      	lsls	r0, r0, #1
     7d8:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF00, 0x0F);
     7da:	210f      	movs	r1, #15
     7dc:	20f0      	movs	r0, #240	; 0xf0
     7de:	0100      	lsls	r0, r0, #4
     7e0:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF18, 0x06);
     7e2:	2106      	movs	r1, #6
     7e4:	4824      	ldr	r0, [pc, #144]	; (878 <spi40_init_test10+0x47c>)
     7e6:	47a0      	blx	r4
    
    //set frqeuency
    spi40_wr8(AX5043_FREQA0, 0x01);
     7e8:	2101      	movs	r1, #1
     7ea:	2037      	movs	r0, #55	; 0x37
     7ec:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA1, 0x00);
     7ee:	2100      	movs	r1, #0
     7f0:	2036      	movs	r0, #54	; 0x36
     7f2:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA2, 0x90);
     7f4:	2190      	movs	r1, #144	; 0x90
     7f6:	2035      	movs	r0, #53	; 0x35
     7f8:	47a0      	blx	r4
     7fa:	e03f      	b.n	87c <spi40_init_test10+0x480>
     7fc:	000003ad 	.word	0x000003ad
     800:	00000f55 	.word	0x00000f55
     804:	00000201 	.word	0x00000201
     808:	00000202 	.word	0x00000202
     80c:	00000203 	.word	0x00000203
     810:	00000211 	.word	0x00000211
     814:	00000212 	.word	0x00000212
     818:	00000213 	.word	0x00000213
     81c:	00000216 	.word	0x00000216
     820:	00000219 	.word	0x00000219
     824:	0000021e 	.word	0x0000021e
     828:	00000221 	.word	0x00000221
     82c:	00000223 	.word	0x00000223
     830:	00000225 	.word	0x00000225
     834:	00000226 	.word	0x00000226
     838:	0000022a 	.word	0x0000022a
     83c:	0000022d 	.word	0x0000022d
     840:	0000022f 	.word	0x0000022f
     844:	00000233 	.word	0x00000233
     848:	00000331 	.word	0x00000331
     84c:	00000332 	.word	0x00000332
     850:	00000f0d 	.word	0x00000f0d
     854:	00000f11 	.word	0x00000f11
     858:	00000f1c 	.word	0x00000f1c
     85c:	00000f21 	.word	0x00000f21
     860:	00000f22 	.word	0x00000f22
     864:	00000f23 	.word	0x00000f23
     868:	00000f26 	.word	0x00000f26
     86c:	00000f34 	.word	0x00000f34
     870:	00000f35 	.word	0x00000f35
     874:	00000f44 	.word	0x00000f44
     878:	00000f18 	.word	0x00000f18
    spi40_wr8(AX5043_FREQA3, 0x0A);
     87c:	210a      	movs	r1, #10
     87e:	2034      	movs	r0, #52	; 0x34
     880:	47a0      	blx	r4
    
    // Settings unique to receiver:
    spi40_wr8(AX5043_TMGRXAGC, 0x00);
     882:	2100      	movs	r1, #0
     884:	480f      	ldr	r0, [pc, #60]	; (8c4 <spi40_init_test10+0x4c8>)
     886:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXPREAMBLE1, 0x00);
     888:	2100      	movs	r1, #0
     88a:	480f      	ldr	r0, [pc, #60]	; (8c8 <spi40_init_test10+0x4cc>)
     88c:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTMISCFLAGS, 0x00 | (1 << 2)); //org value = 0x00
     88e:	2104      	movs	r1, #4
     890:	480e      	ldr	r0, [pc, #56]	; (8cc <spi40_init_test10+0x4d0>)
     892:	47a0      	blx	r4
    
    
    // wait for crystal to settle
    while((spi40_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
     894:	201d      	movs	r0, #29
     896:	4b0e      	ldr	r3, [pc, #56]	; (8d0 <spi40_init_test10+0x4d4>)
     898:	4798      	blx	r3
     89a:	07c3      	lsls	r3, r0, #31
     89c:	d5fa      	bpl.n	894 <spi40_init_test10+0x498>
    
    // autorange the PLL
    spi40_autorange();
     89e:	4b0d      	ldr	r3, [pc, #52]	; (8d4 <spi40_init_test10+0x4d8>)
     8a0:	4798      	blx	r3
    
    // accept no invalid packets
    spi40_wr8(AX5043_PKTACCEPTFLAGS, 0x00);
     8a2:	2100      	movs	r1, #0
     8a4:	480c      	ldr	r0, [pc, #48]	; (8d8 <spi40_init_test10+0x4dc>)
     8a6:	4c0d      	ldr	r4, [pc, #52]	; (8dc <spi40_init_test10+0x4e0>)
     8a8:	47a0      	blx	r4
    
    // append RSSI reading to end of packet
    spi40_wr8(AX5043_PKTSTOREFLAGS, 0x10);
     8aa:	2110      	movs	r1, #16
     8ac:	480c      	ldr	r0, [pc, #48]	; (8e0 <spi40_init_test10+0x4e4>)
     8ae:	47a0      	blx	r4
    
    // set power mode to full receive, i.e. always receive
    spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_FULLRX);
     8b0:	2169      	movs	r1, #105	; 0x69
     8b2:	2002      	movs	r0, #2
     8b4:	47a0      	blx	r4
    delay_ms(100);
     8b6:	2064      	movs	r0, #100	; 0x64
     8b8:	4b0a      	ldr	r3, [pc, #40]	; (8e4 <spi40_init_test10+0x4e8>)
     8ba:	4798      	blx	r3
    
    // clear FIFO
    spi40_wr8(AX5043_FIFOSTAT, FIFOCMD_CLRFIFO);
     8bc:	2103      	movs	r1, #3
     8be:	2028      	movs	r0, #40	; 0x28
     8c0:	47a0      	blx	r4
}    
     8c2:	bd10      	pop	{r4, pc}
     8c4:	00000227 	.word	0x00000227
     8c8:	00000229 	.word	0x00000229
     8cc:	00000231 	.word	0x00000231
     8d0:	00000365 	.word	0x00000365
     8d4:	000003dd 	.word	0x000003dd
     8d8:	00000233 	.word	0x00000233
     8dc:	000003ad 	.word	0x000003ad
     8e0:	00000232 	.word	0x00000232
     8e4:	00000f55 	.word	0x00000f55

000008e8 <spi40_rollavg>:
        data_arr[4] = 0;
}


uint8_t spi40_rollavg(uint8_t new_val)
{
     8e8:	b510      	push	{r4, lr}
    static uint8_t sample_arr[10];
    static uint8_t count;
    uint8_t i;
    uint32_t avg = 0;
    
    sample_arr[count] = new_val;
     8ea:	4c0c      	ldr	r4, [pc, #48]	; (91c <spi40_rollavg+0x34>)
     8ec:	7823      	ldrb	r3, [r4, #0]
     8ee:	4a0c      	ldr	r2, [pc, #48]	; (920 <spi40_rollavg+0x38>)
     8f0:	54d0      	strb	r0, [r2, r3]
    
    count = (count + 1) % 10;
     8f2:	1c58      	adds	r0, r3, #1
     8f4:	210a      	movs	r1, #10
     8f6:	4b0b      	ldr	r3, [pc, #44]	; (924 <spi40_rollavg+0x3c>)
     8f8:	4798      	blx	r3
     8fa:	7021      	strb	r1, [r4, #0]
    uint32_t avg = 0;
     8fc:	2000      	movs	r0, #0
    
    for(i = 0; i < 10; i++)
     8fe:	2300      	movs	r3, #0
     900:	e004      	b.n	90c <spi40_rollavg+0x24>
    {
        avg += sample_arr[i];
     902:	4a07      	ldr	r2, [pc, #28]	; (920 <spi40_rollavg+0x38>)
     904:	5cd2      	ldrb	r2, [r2, r3]
     906:	1880      	adds	r0, r0, r2
    for(i = 0; i < 10; i++)
     908:	3301      	adds	r3, #1
     90a:	b2db      	uxtb	r3, r3
     90c:	2b09      	cmp	r3, #9
     90e:	d9f8      	bls.n	902 <spi40_rollavg+0x1a>
    }
    
    return (avg / 10);
     910:	210a      	movs	r1, #10
     912:	4b05      	ldr	r3, [pc, #20]	; (928 <spi40_rollavg+0x40>)
     914:	4798      	blx	r3
     916:	b2c0      	uxtb	r0, r0
}
     918:	bd10      	pop	{r4, pc}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	20000208 	.word	0x20000208
     920:	2000020c 	.word	0x2000020c
     924:	00003179 	.word	0x00003179
     928:	00002e99 	.word	0x00002e99

0000092c <spi40_rssi>:


int16_t spi40_rssi(void)
{
     92c:	b510      	push	{r4, lr}
    /* read the RSSI register, put it in the rolling average, and
     * return the new average */
    return ((int16_t) ((int8_t) spi40_rollavg(spi40_rd8(AX5043_RSSI))));
     92e:	2040      	movs	r0, #64	; 0x40
     930:	4b02      	ldr	r3, [pc, #8]	; (93c <spi40_rssi+0x10>)
     932:	4798      	blx	r3
     934:	4b02      	ldr	r3, [pc, #8]	; (940 <spi40_rssi+0x14>)
     936:	4798      	blx	r3
     938:	b240      	sxtb	r0, r0
}
     93a:	bd10      	pop	{r4, pc}
     93c:	00000365 	.word	0x00000365
     940:	000008e9 	.word	0x000008e9

00000944 <uart245_init>:
/************************************************************************/
static struct usart_module uart245_inst;
static uint8_t uart245_rx_buff[UART245_RX_BUFF_SIZE];

void uart245_init(void)
{
     944:	b510      	push	{r4, lr}
     946:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     948:	2380      	movs	r3, #128	; 0x80
     94a:	05db      	lsls	r3, r3, #23
     94c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     94e:	2300      	movs	r3, #0
     950:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     952:	22ff      	movs	r2, #255	; 0xff
     954:	4669      	mov	r1, sp
     956:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     958:	2200      	movs	r2, #0
     95a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     95c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     95e:	2101      	movs	r1, #1
     960:	2024      	movs	r0, #36	; 0x24
     962:	466c      	mov	r4, sp
     964:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     966:	3001      	adds	r0, #1
     968:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     96a:	3125      	adds	r1, #37	; 0x25
     96c:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     96e:	3101      	adds	r1, #1
     970:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     972:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     974:	3105      	adds	r1, #5
     976:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     978:	3101      	adds	r1, #1
     97a:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     97c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     97e:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     980:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     982:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     984:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     986:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     988:	2313      	movs	r3, #19
     98a:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     98c:	7762      	strb	r2, [r4, #29]
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    
    config_usart.baudrate    = UART245_BAUD;
     98e:	2396      	movs	r3, #150	; 0x96
     990:	01db      	lsls	r3, r3, #7
     992:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART245_PINMUX;
     994:	2390      	movs	r3, #144	; 0x90
     996:	035b      	lsls	r3, r3, #13
     998:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX245;
     99a:	4b12      	ldr	r3, [pc, #72]	; (9e4 <uart245_init+0xa0>)
     99c:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX245;
     99e:	4b12      	ldr	r3, [pc, #72]	; (9e8 <uart245_init+0xa4>)
     9a0:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     9a2:	2301      	movs	r3, #1
     9a4:	425b      	negs	r3, r3
     9a6:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     9a8:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.generator_source = UART245_CLK;
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    
    while (usart_init(&uart245_inst, UART245, &config_usart) != STATUS_OK);
     9aa:	466a      	mov	r2, sp
     9ac:	490f      	ldr	r1, [pc, #60]	; (9ec <uart245_init+0xa8>)
     9ae:	4810      	ldr	r0, [pc, #64]	; (9f0 <uart245_init+0xac>)
     9b0:	4b10      	ldr	r3, [pc, #64]	; (9f4 <uart245_init+0xb0>)
     9b2:	4798      	blx	r3
     9b4:	2800      	cmp	r0, #0
     9b6:	d1f8      	bne.n	9aa <uart245_init+0x66>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9b8:	4b0d      	ldr	r3, [pc, #52]	; (9f0 <uart245_init+0xac>)
     9ba:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     9bc:	0020      	movs	r0, r4
     9be:	4b0e      	ldr	r3, [pc, #56]	; (9f8 <uart245_init+0xb4>)
     9c0:	4798      	blx	r3
     9c2:	231f      	movs	r3, #31
     9c4:	4018      	ands	r0, r3
     9c6:	3b1e      	subs	r3, #30
     9c8:	4083      	lsls	r3, r0
     9ca:	4a0c      	ldr	r2, [pc, #48]	; (9fc <uart245_init+0xb8>)
     9cc:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9ce:	4b08      	ldr	r3, [pc, #32]	; (9f0 <uart245_init+0xac>)
     9d0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     9d2:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     9d4:	2b00      	cmp	r3, #0
     9d6:	d1fa      	bne.n	9ce <uart245_init+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     9d8:	6823      	ldr	r3, [r4, #0]
     9da:	2202      	movs	r2, #2
     9dc:	4313      	orrs	r3, r2
     9de:	6023      	str	r3, [r4, #0]
    
    usart_enable(&uart245_inst);
}
     9e0:	b010      	add	sp, #64	; 0x40
     9e2:	bd10      	pop	{r4, pc}
     9e4:	00040003 	.word	0x00040003
     9e8:	00050003 	.word	0x00050003
     9ec:	42000800 	.word	0x42000800
     9f0:	2000021c 	.word	0x2000021c
     9f4:	00001471 	.word	0x00001471
     9f8:	00002531 	.word	0x00002531
     9fc:	e000e100 	.word	0xe000e100

00000a00 <uart245_wait_prompt>:
    usart_disable(&uart245_inst);
}


status_code_genare_t uart245_wait_prompt(void)
{
     a00:	b510      	push	{r4, lr}
     a02:	e00a      	b.n	a1a <uart245_wait_prompt+0x1a>
        if((stat_val != STATUS_OK) && (stat_val != STATUS_ERR_TIMEOUT))
            return stat_val;
        
        /* if the received character is not the module's prompt character, 
         * wait some more */
        if(uart245_rx_buff[0] != '>')
     a04:	4b0d      	ldr	r3, [pc, #52]	; (a3c <uart245_wait_prompt+0x3c>)
     a06:	781b      	ldrb	r3, [r3, #0]
     a08:	2b3e      	cmp	r3, #62	; 0x3e
     a0a:	d014      	beq.n	a36 <uart245_wait_prompt+0x36>
            wait_time--;
        else
            return STATUS_OK;
        
        // delay a millisecond
        delay_ms(1);
     a0c:	2001      	movs	r0, #1
     a0e:	4b0c      	ldr	r3, [pc, #48]	; (a40 <uart245_wait_prompt+0x40>)
     a10:	4798      	blx	r3
        
    }while (uart245_rx_buff[0] != '>');
     a12:	4b0a      	ldr	r3, [pc, #40]	; (a3c <uart245_wait_prompt+0x3c>)
     a14:	781b      	ldrb	r3, [r3, #0]
     a16:	2b3e      	cmp	r3, #62	; 0x3e
     a18:	d00b      	beq.n	a32 <uart245_wait_prompt+0x32>
        uart245_rx_buff[0] = 0xFF;
     a1a:	4908      	ldr	r1, [pc, #32]	; (a3c <uart245_wait_prompt+0x3c>)
     a1c:	23ff      	movs	r3, #255	; 0xff
     a1e:	700b      	strb	r3, [r1, #0]
        stat_val = usart_read_buffer_wait(&uart245_inst, uart245_rx_buff, 1);
     a20:	2201      	movs	r2, #1
     a22:	4808      	ldr	r0, [pc, #32]	; (a44 <uart245_wait_prompt+0x44>)
     a24:	4b08      	ldr	r3, [pc, #32]	; (a48 <uart245_wait_prompt+0x48>)
     a26:	4798      	blx	r3
        if((stat_val != STATUS_OK) && (stat_val != STATUS_ERR_TIMEOUT))
     a28:	2800      	cmp	r0, #0
     a2a:	d0eb      	beq.n	a04 <uart245_wait_prompt+0x4>
     a2c:	2812      	cmp	r0, #18
     a2e:	d0e9      	beq.n	a04 <uart245_wait_prompt+0x4>
     a30:	e002      	b.n	a38 <uart245_wait_prompt+0x38>
    
    return STATUS_ABORTED;
     a32:	2004      	movs	r0, #4
     a34:	e000      	b.n	a38 <uart245_wait_prompt+0x38>
            return STATUS_OK;
     a36:	2000      	movs	r0, #0
}
     a38:	bd10      	pop	{r4, pc}
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	20000250 	.word	0x20000250
     a40:	00000f55 	.word	0x00000f55
     a44:	2000021c 	.word	0x2000021c
     a48:	000016fd 	.word	0x000016fd

00000a4c <uart245_enter_config>:


status_code_genare_t uart245_enter_config(void)
{
     a4c:	b570      	push	{r4, r5, r6, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
     a4e:	4c07      	ldr	r4, [pc, #28]	; (a6c <uart245_enter_config+0x20>)
     a50:	2504      	movs	r5, #4
     a52:	6165      	str	r5, [r4, #20]
    
    // pull the CONFIG pin low to begin configuration mode
    port_pin_set_output_level(CONFIG245, false);
    
    // wait for the module to return a prompt '>' character
    stat_val = uart245_wait_prompt();
     a54:	4b06      	ldr	r3, [pc, #24]	; (a70 <uart245_enter_config+0x24>)
     a56:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     a58:	61a5      	str	r5, [r4, #24]
    // set the CONFIG pin back high
    port_pin_set_output_level(CONFIG245, true);
    
    /* if a character wasn't received before the uart's time out or another
     * error occurred, return that error */
    if(stat_val != STATUS_OK)
     a5a:	2800      	cmp	r0, #0
     a5c:	d104      	bne.n	a68 <uart245_enter_config+0x1c>
        return stat_val;
        
    /* if the received character is not the module's prompt character, 
     * return an error */
    if(uart245_rx_buff[0] != '>')
     a5e:	4b05      	ldr	r3, [pc, #20]	; (a74 <uart245_enter_config+0x28>)
     a60:	781b      	ldrb	r3, [r3, #0]
     a62:	2b3e      	cmp	r3, #62	; 0x3e
     a64:	d000      	beq.n	a68 <uart245_enter_config+0x1c>
        return STATUS_ABORTED;
     a66:	3004      	adds	r0, #4
        
    // else return the stat_val if everything was OK
    return stat_val;
}
     a68:	bd70      	pop	{r4, r5, r6, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	41004400 	.word	0x41004400
     a70:	00000a01 	.word	0x00000a01
     a74:	20000250 	.word	0x20000250

00000a78 <uart245_config_get_rssi>:
    return stat_val;
}


float uart245_config_get_rssi(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
    
    uint8_t ret_val = 0;
     a7c:	2200      	movs	r2, #0
     a7e:	466b      	mov	r3, sp
     a80:	71da      	strb	r2, [r3, #7]

    // send an 'S' to get the RSSI value, wait until the uart is successful
    while(usart_write_wait(&uart245_inst, 'S') == STATUS_BUSY);
     a82:	2153      	movs	r1, #83	; 0x53
     a84:	480d      	ldr	r0, [pc, #52]	; (abc <uart245_config_get_rssi+0x44>)
     a86:	4b0e      	ldr	r3, [pc, #56]	; (ac0 <uart245_config_get_rssi+0x48>)
     a88:	4798      	blx	r3
     a8a:	2805      	cmp	r0, #5
     a8c:	d0f9      	beq.n	a82 <uart245_config_get_rssi+0xa>
    
    usart_read_buffer_wait(&uart245_inst, &ret_val, 1);
     a8e:	466b      	mov	r3, sp
     a90:	1ddc      	adds	r4, r3, #7
     a92:	2201      	movs	r2, #1
     a94:	0021      	movs	r1, r4
     a96:	4809      	ldr	r0, [pc, #36]	; (abc <uart245_config_get_rssi+0x44>)
     a98:	4b0a      	ldr	r3, [pc, #40]	; (ac4 <uart245_config_get_rssi+0x4c>)
     a9a:	4798      	blx	r3
    
    // wait for the module to return a prompt '>' character
    uart245_wait_prompt();
     a9c:	4b0a      	ldr	r3, [pc, #40]	; (ac8 <uart245_config_get_rssi+0x50>)
     a9e:	4798      	blx	r3
    
    return ((-1.0f) * (((float) ret_val) / 2.00f));
     aa0:	7820      	ldrb	r0, [r4, #0]
     aa2:	4b0a      	ldr	r3, [pc, #40]	; (acc <uart245_config_get_rssi+0x54>)
     aa4:	4798      	blx	r3
     aa6:	21fc      	movs	r1, #252	; 0xfc
     aa8:	0589      	lsls	r1, r1, #22
     aaa:	4b09      	ldr	r3, [pc, #36]	; (ad0 <uart245_config_get_rssi+0x58>)
     aac:	4798      	blx	r3
     aae:	2380      	movs	r3, #128	; 0x80
     ab0:	061b      	lsls	r3, r3, #24
     ab2:	469c      	mov	ip, r3
     ab4:	4460      	add	r0, ip
}
     ab6:	b002      	add	sp, #8
     ab8:	bd10      	pop	{r4, pc}
     aba:	46c0      	nop			; (mov r8, r8)
     abc:	2000021c 	.word	0x2000021c
     ac0:	000015b5 	.word	0x000015b5
     ac4:	000016fd 	.word	0x000016fd
     ac8:	00000a01 	.word	0x00000a01
     acc:	00003459 	.word	0x00003459
     ad0:	000031d9 	.word	0x000031d9

00000ad4 <uart915_parse_response>:
}


static bool uart915_parse_response(uint8_t next_char)
{
    switch(rx_state)
     ad4:	4b1f      	ldr	r3, [pc, #124]	; (b54 <uart915_parse_response+0x80>)
     ad6:	781b      	ldrb	r3, [r3, #0]
     ad8:	b2db      	uxtb	r3, r3
     ada:	2b01      	cmp	r3, #1
     adc:	d016      	beq.n	b0c <uart915_parse_response+0x38>
     ade:	2b00      	cmp	r3, #0
     ae0:	d008      	beq.n	af4 <uart915_parse_response+0x20>
     ae2:	2b02      	cmp	r3, #2
     ae4:	d01e      	beq.n	b24 <uart915_parse_response+0x50>
     ae6:	2b03      	cmp	r3, #3
     ae8:	d028      	beq.n	b3c <uart915_parse_response+0x68>
                break; //end of default case
        }
        break; //end of CR_RX case
        
        default:
            rx_state = START;
     aea:	2200      	movs	r2, #0
     aec:	4b19      	ldr	r3, [pc, #100]	; (b54 <uart915_parse_response+0x80>)
     aee:	701a      	strb	r2, [r3, #0]
            break;
    }
    
    return false;
     af0:	2000      	movs	r0, #0
}
     af2:	4770      	bx	lr
            switch(next_char)
     af4:	284f      	cmp	r0, #79	; 0x4f
     af6:	d104      	bne.n	b02 <uart915_parse_response+0x2e>
                   rx_state = O_RX;
     af8:	2201      	movs	r2, #1
     afa:	4b16      	ldr	r3, [pc, #88]	; (b54 <uart915_parse_response+0x80>)
     afc:	701a      	strb	r2, [r3, #0]
    return false;
     afe:	2000      	movs	r0, #0
                   break; //end of 'O' case
     b00:	e7f7      	b.n	af2 <uart915_parse_response+0x1e>
                    rx_state = START;
     b02:	2200      	movs	r2, #0
     b04:	4b13      	ldr	r3, [pc, #76]	; (b54 <uart915_parse_response+0x80>)
     b06:	701a      	strb	r2, [r3, #0]
    return false;
     b08:	2000      	movs	r0, #0
                    break; //end of default case
     b0a:	e7f2      	b.n	af2 <uart915_parse_response+0x1e>
            switch(next_char)
     b0c:	284b      	cmp	r0, #75	; 0x4b
     b0e:	d104      	bne.n	b1a <uart915_parse_response+0x46>
                    rx_state = K_RX;
     b10:	2202      	movs	r2, #2
     b12:	4b10      	ldr	r3, [pc, #64]	; (b54 <uart915_parse_response+0x80>)
     b14:	701a      	strb	r2, [r3, #0]
    return false;
     b16:	2000      	movs	r0, #0
                    break; //end of 'K' case
     b18:	e7eb      	b.n	af2 <uart915_parse_response+0x1e>
                    rx_state = START;
     b1a:	2200      	movs	r2, #0
     b1c:	4b0d      	ldr	r3, [pc, #52]	; (b54 <uart915_parse_response+0x80>)
     b1e:	701a      	strb	r2, [r3, #0]
    return false;
     b20:	2000      	movs	r0, #0
                    break; //end of default case
     b22:	e7e6      	b.n	af2 <uart915_parse_response+0x1e>
            switch(next_char)
     b24:	280d      	cmp	r0, #13
     b26:	d104      	bne.n	b32 <uart915_parse_response+0x5e>
                    rx_state = CR_RX;
     b28:	2203      	movs	r2, #3
     b2a:	4b0a      	ldr	r3, [pc, #40]	; (b54 <uart915_parse_response+0x80>)
     b2c:	701a      	strb	r2, [r3, #0]
    return false;
     b2e:	2000      	movs	r0, #0
                    break; //end of '\r' case
     b30:	e7df      	b.n	af2 <uart915_parse_response+0x1e>
                    rx_state = START;
     b32:	2200      	movs	r2, #0
     b34:	4b07      	ldr	r3, [pc, #28]	; (b54 <uart915_parse_response+0x80>)
     b36:	701a      	strb	r2, [r3, #0]
    return false;
     b38:	2000      	movs	r0, #0
                    break; //end of default case
     b3a:	e7da      	b.n	af2 <uart915_parse_response+0x1e>
        switch(next_char)
     b3c:	280a      	cmp	r0, #10
     b3e:	d104      	bne.n	b4a <uart915_parse_response+0x76>
                rx_state = START;
     b40:	2200      	movs	r2, #0
     b42:	4b04      	ldr	r3, [pc, #16]	; (b54 <uart915_parse_response+0x80>)
     b44:	701a      	strb	r2, [r3, #0]
                return true;
     b46:	3809      	subs	r0, #9
     b48:	e7d3      	b.n	af2 <uart915_parse_response+0x1e>
                rx_state = START;
     b4a:	2200      	movs	r2, #0
     b4c:	4b01      	ldr	r3, [pc, #4]	; (b54 <uart915_parse_response+0x80>)
     b4e:	701a      	strb	r2, [r3, #0]
    return false;
     b50:	2000      	movs	r0, #0
        break; //end of CR_RX case
     b52:	e7ce      	b.n	af2 <uart915_parse_response+0x1e>
     b54:	20000271 	.word	0x20000271

00000b58 <uart915_read_callback>:
{
     b58:	b570      	push	{r4, r5, r6, lr}
     b5a:	0005      	movs	r5, r0
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     b5c:	4c07      	ldr	r4, [pc, #28]	; (b7c <uart915_read_callback+0x24>)
     b5e:	7821      	ldrb	r1, [r4, #0]
     b60:	4807      	ldr	r0, [pc, #28]	; (b80 <uart915_read_callback+0x28>)
     b62:	4b08      	ldr	r3, [pc, #32]	; (b84 <uart915_read_callback+0x2c>)
     b64:	4798      	blx	r3
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     b66:	7820      	ldrb	r0, [r4, #0]
     b68:	4b07      	ldr	r3, [pc, #28]	; (b88 <uart915_read_callback+0x30>)
     b6a:	4798      	blx	r3
     b6c:	4b07      	ldr	r3, [pc, #28]	; (b8c <uart915_read_callback+0x34>)
     b6e:	7018      	strb	r0, [r3, #0]
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     b70:	2201      	movs	r2, #1
     b72:	0021      	movs	r1, r4
     b74:	0028      	movs	r0, r5
     b76:	4b06      	ldr	r3, [pc, #24]	; (b90 <uart915_read_callback+0x38>)
     b78:	4798      	blx	r3
}
     b7a:	bd70      	pop	{r4, r5, r6, pc}
     b7c:	20000328 	.word	0x20000328
     b80:	20000000 	.word	0x20000000
     b84:	00000129 	.word	0x00000129
     b88:	00000ad5 	.word	0x00000ad5
     b8c:	20000270 	.word	0x20000270
     b90:	00001851 	.word	0x00001851

00000b94 <configure_915uart_callbacks>:
{
     b94:	b510      	push	{r4, lr}
    usart_register_callback(&uart915_inst, uart915_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     b96:	4c08      	ldr	r4, [pc, #32]	; (bb8 <configure_915uart_callbacks+0x24>)
     b98:	2201      	movs	r2, #1
     b9a:	4908      	ldr	r1, [pc, #32]	; (bbc <configure_915uart_callbacks+0x28>)
     b9c:	0020      	movs	r0, r4
     b9e:	4b08      	ldr	r3, [pc, #32]	; (bc0 <configure_915uart_callbacks+0x2c>)
     ba0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     ba2:	2231      	movs	r2, #49	; 0x31
     ba4:	5ca3      	ldrb	r3, [r4, r2]
     ba6:	2102      	movs	r1, #2
     ba8:	430b      	orrs	r3, r1
     baa:	54a3      	strb	r3, [r4, r2]
    usart_read_buffer_job(&uart915_inst, &uart915_rx_read, 1);
     bac:	3a30      	subs	r2, #48	; 0x30
     bae:	4905      	ldr	r1, [pc, #20]	; (bc4 <configure_915uart_callbacks+0x30>)
     bb0:	0020      	movs	r0, r4
     bb2:	4b05      	ldr	r3, [pc, #20]	; (bc8 <configure_915uart_callbacks+0x34>)
     bb4:	4798      	blx	r3
}
     bb6:	bd10      	pop	{r4, pc}
     bb8:	20000274 	.word	0x20000274
     bbc:	00000b59 	.word	0x00000b59
     bc0:	00001819 	.word	0x00001819
     bc4:	20000328 	.word	0x20000328
     bc8:	00001851 	.word	0x00001851

00000bcc <uart915_init>:
{
     bcc:	b510      	push	{r4, lr}
     bce:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
     bd0:	2380      	movs	r3, #128	; 0x80
     bd2:	05db      	lsls	r3, r3, #23
     bd4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     bd6:	2300      	movs	r3, #0
     bd8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     bda:	22ff      	movs	r2, #255	; 0xff
     bdc:	4669      	mov	r1, sp
     bde:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     be0:	2200      	movs	r2, #0
     be2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     be4:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
     be6:	2101      	movs	r1, #1
     be8:	2024      	movs	r0, #36	; 0x24
     bea:	466c      	mov	r4, sp
     bec:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     bee:	3001      	adds	r0, #1
     bf0:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     bf2:	3125      	adds	r1, #37	; 0x25
     bf4:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     bf6:	3101      	adds	r1, #1
     bf8:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     bfa:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
     bfc:	3105      	adds	r1, #5
     bfe:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     c00:	3101      	adds	r1, #1
     c02:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     c04:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     c06:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
     c08:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
     c0a:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
     c0c:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
     c0e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     c10:	2313      	movs	r3, #19
     c12:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
     c14:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART915_BAUD;
     c16:	23e1      	movs	r3, #225	; 0xe1
     c18:	025b      	lsls	r3, r3, #9
     c1a:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART915_PINMUX;
     c1c:	2390      	movs	r3, #144	; 0x90
     c1e:	035b      	lsls	r3, r3, #13
     c20:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX915;
     c22:	4b13      	ldr	r3, [pc, #76]	; (c70 <uart915_init+0xa4>)
     c24:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX915;
     c26:	4b13      	ldr	r3, [pc, #76]	; (c74 <uart915_init+0xa8>)
     c28:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     c2a:	2301      	movs	r3, #1
     c2c:	425b      	negs	r3, r3
     c2e:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     c30:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uart915_inst, UART915, &config_usart) != STATUS_OK);
     c32:	466a      	mov	r2, sp
     c34:	4910      	ldr	r1, [pc, #64]	; (c78 <uart915_init+0xac>)
     c36:	4811      	ldr	r0, [pc, #68]	; (c7c <uart915_init+0xb0>)
     c38:	4b11      	ldr	r3, [pc, #68]	; (c80 <uart915_init+0xb4>)
     c3a:	4798      	blx	r3
     c3c:	2800      	cmp	r0, #0
     c3e:	d1f8      	bne.n	c32 <uart915_init+0x66>
	SercomUsart *const usart_hw = &(module->hw->USART);
     c40:	4b0e      	ldr	r3, [pc, #56]	; (c7c <uart915_init+0xb0>)
     c42:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     c44:	0020      	movs	r0, r4
     c46:	4b0f      	ldr	r3, [pc, #60]	; (c84 <uart915_init+0xb8>)
     c48:	4798      	blx	r3
     c4a:	231f      	movs	r3, #31
     c4c:	4018      	ands	r0, r3
     c4e:	3b1e      	subs	r3, #30
     c50:	4083      	lsls	r3, r0
     c52:	4a0d      	ldr	r2, [pc, #52]	; (c88 <uart915_init+0xbc>)
     c54:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     c56:	4b09      	ldr	r3, [pc, #36]	; (c7c <uart915_init+0xb0>)
     c58:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     c5a:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     c5c:	2b00      	cmp	r3, #0
     c5e:	d1fa      	bne.n	c56 <uart915_init+0x8a>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c60:	6823      	ldr	r3, [r4, #0]
     c62:	2202      	movs	r2, #2
     c64:	4313      	orrs	r3, r2
     c66:	6023      	str	r3, [r4, #0]
    configure_915uart_callbacks();
     c68:	4b08      	ldr	r3, [pc, #32]	; (c8c <uart915_init+0xc0>)
     c6a:	4798      	blx	r3
}
     c6c:	b010      	add	sp, #64	; 0x40
     c6e:	bd10      	pop	{r4, pc}
     c70:	00080003 	.word	0x00080003
     c74:	00090003 	.word	0x00090003
     c78:	42001000 	.word	0x42001000
     c7c:	20000274 	.word	0x20000274
     c80:	00001471 	.word	0x00001471
     c84:	00002531 	.word	0x00002531
     c88:	e000e100 	.word	0xe000e100
     c8c:	00000b95 	.word	0x00000b95

00000c90 <uart915_write_cmd>:


void uart915_write_cmd(const char* cmd_str)
{
     c90:	b510      	push	{r4, lr}
     c92:	0004      	movs	r4, r0
    // clear the flag
    flag_ok_received = false;
     c94:	2300      	movs	r3, #0
     c96:	4a0a      	ldr	r2, [pc, #40]	; (cc0 <uart915_write_cmd+0x30>)
     c98:	7013      	strb	r3, [r2, #0]
    
    // reset state machine for determining okay_received
    rx_state = START;
     c9a:	4a0a      	ldr	r2, [pc, #40]	; (cc4 <uart915_write_cmd+0x34>)
     c9c:	7013      	strb	r3, [r2, #0]
    
    // clear the ring buffer
    ringbuff_clear(&uart915_ringbuff);
     c9e:	480a      	ldr	r0, [pc, #40]	; (cc8 <uart915_write_cmd+0x38>)
     ca0:	4b0a      	ldr	r3, [pc, #40]	; (ccc <uart915_write_cmd+0x3c>)
     ca2:	4798      	blx	r3
    
    // write the AT command
    usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     ca4:	0020      	movs	r0, r4
     ca6:	4b0a      	ldr	r3, [pc, #40]	; (cd0 <uart915_write_cmd+0x40>)
     ca8:	4798      	blx	r3
     caa:	b282      	uxth	r2, r0
     cac:	0021      	movs	r1, r4
     cae:	4809      	ldr	r0, [pc, #36]	; (cd4 <uart915_write_cmd+0x44>)
     cb0:	4b09      	ldr	r3, [pc, #36]	; (cd8 <uart915_write_cmd+0x48>)
     cb2:	4798      	blx	r3
    
    while(!flag_ok_received);
     cb4:	4b02      	ldr	r3, [pc, #8]	; (cc0 <uart915_write_cmd+0x30>)
     cb6:	781b      	ldrb	r3, [r3, #0]
     cb8:	2b00      	cmp	r3, #0
     cba:	d0fb      	beq.n	cb4 <uart915_write_cmd+0x24>
}
     cbc:	bd10      	pop	{r4, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	20000270 	.word	0x20000270
     cc4:	20000271 	.word	0x20000271
     cc8:	20000000 	.word	0x20000000
     ccc:	00000115 	.word	0x00000115
     cd0:	000035cd 	.word	0x000035cd
     cd4:	20000274 	.word	0x20000274
     cd8:	00001655 	.word	0x00001655

00000cdc <uart915_get_rssi>:
    usart_write_buffer_wait(&uart915_inst, send_buff, size);
}


int16_t uart915_get_rssi(void)
{
     cdc:	b530      	push	{r4, r5, lr}
     cde:	b089      	sub	sp, #36	; 0x24
    uint8_t rspns_buff[32] = {0};
     ce0:	2220      	movs	r2, #32
     ce2:	2100      	movs	r1, #0
     ce4:	4668      	mov	r0, sp
     ce6:	4b1a      	ldr	r3, [pc, #104]	; (d50 <uart915_get_rssi+0x74>)
     ce8:	4798      	blx	r3
    uint8_t i = 0;
    int16_t ret_val = 0;
    
    uart915_write_cmd("AT+SEND\r");
     cea:	481a      	ldr	r0, [pc, #104]	; (d54 <uart915_get_rssi+0x78>)
     cec:	4c1a      	ldr	r4, [pc, #104]	; (d58 <uart915_get_rssi+0x7c>)
     cee:	47a0      	blx	r4
    
    // send the RSSI command
    uart915_write_cmd("AT+RSSI\r");
     cf0:	481a      	ldr	r0, [pc, #104]	; (d5c <uart915_get_rssi+0x80>)
     cf2:	47a0      	blx	r4
    uint8_t i = 0;
     cf4:	2500      	movs	r5, #0
    
    // acquire the contents of the ring buffer
    while(!ringbuff_is_empty(&uart915_ringbuff))
     cf6:	e007      	b.n	d08 <uart915_get_rssi+0x2c>
    {
        ringbuff_get(&uart915_ringbuff, (rspns_buff + (i++)));
     cf8:	1c6c      	adds	r4, r5, #1
     cfa:	b2e4      	uxtb	r4, r4
     cfc:	0029      	movs	r1, r5
     cfe:	4469      	add	r1, sp
     d00:	4817      	ldr	r0, [pc, #92]	; (d60 <uart915_get_rssi+0x84>)
     d02:	4b18      	ldr	r3, [pc, #96]	; (d64 <uart915_get_rssi+0x88>)
     d04:	4798      	blx	r3
     d06:	0025      	movs	r5, r4
    while(!ringbuff_is_empty(&uart915_ringbuff))
     d08:	4815      	ldr	r0, [pc, #84]	; (d60 <uart915_get_rssi+0x84>)
     d0a:	4b17      	ldr	r3, [pc, #92]	; (d68 <uart915_get_rssi+0x8c>)
     d0c:	4798      	blx	r3
     d0e:	2800      	cmp	r0, #0
     d10:	d0f2      	beq.n	cf8 <uart915_get_rssi+0x1c>
    }
    
    // ensure the contents in the response buffer are a string
    rspns_buff[31] = '\0';
     d12:	2300      	movs	r3, #0
     d14:	466a      	mov	r2, sp
     d16:	77d3      	strb	r3, [r2, #31]
    
    // reset array index
    i = 0;
     d18:	2400      	movs	r4, #0
    
    // find first comma in the string
    while(rspns_buff[++i] != ',');
     d1a:	3401      	adds	r4, #1
     d1c:	b2e4      	uxtb	r4, r4
     d1e:	466b      	mov	r3, sp
     d20:	5d1b      	ldrb	r3, [r3, r4]
     d22:	2b2c      	cmp	r3, #44	; 0x2c
     d24:	d1f9      	bne.n	d1a <uart915_get_rssi+0x3e>
    
    // delimit the string at the first found comma
    rspns_buff[i] = '\0';
     d26:	2300      	movs	r3, #0
     d28:	4669      	mov	r1, sp
     d2a:	550b      	strb	r3, [r1, r4]

    // back up a few characters to get to the start of the number
    while(isdigit(rspns_buff[--i]));
     d2c:	4b0f      	ldr	r3, [pc, #60]	; (d6c <uart915_get_rssi+0x90>)
     d2e:	4798      	blx	r3
     d30:	3c01      	subs	r4, #1
     d32:	b2e4      	uxtb	r4, r4
     d34:	0022      	movs	r2, r4
     d36:	466b      	mov	r3, sp
     d38:	5d1b      	ldrb	r3, [r3, r4]
     d3a:	18c0      	adds	r0, r0, r3
     d3c:	7843      	ldrb	r3, [r0, #1]
     d3e:	075b      	lsls	r3, r3, #29
     d40:	d4f4      	bmi.n	d2c <uart915_get_rssi+0x50>
    
    ret_val = (int16_t) (atoi((char*) &rspns_buff[i]));
     d42:	446a      	add	r2, sp
     d44:	0010      	movs	r0, r2
     d46:	4b0a      	ldr	r3, [pc, #40]	; (d70 <uart915_get_rssi+0x94>)
     d48:	4798      	blx	r3
     d4a:	b200      	sxth	r0, r0
    
    // convert the number at the current spot in the string to an int
    return ret_val;
}
     d4c:	b009      	add	sp, #36	; 0x24
     d4e:	bd30      	pop	{r4, r5, pc}
     d50:	000035bd 	.word	0x000035bd
     d54:	00003728 	.word	0x00003728
     d58:	00000c91 	.word	0x00000c91
     d5c:	00003734 	.word	0x00003734
     d60:	20000000 	.word	0x20000000
     d64:	00000171 	.word	0x00000171
     d68:	00000161 	.word	0x00000161
     d6c:	0000357d 	.word	0x0000357d
     d70:	00003521 	.word	0x00003521

00000d74 <uartfiber_parse_cmd>:
    // start a read buffer job so the receiver is ready
    usart_read_buffer_job(&uartfiber_inst, &uartfiber_rx_read, 1);
}

static void uartfiber_parse_cmd(uint8_t cmd_char)
{
     d74:	b500      	push	{lr}
     d76:	b083      	sub	sp, #12
    union{
        rssi_t f_val;
        uint8_t f_bytes[RSSI_SIZE]; 
    }float_bytes;
    
    switch(cmd_char)
     d78:	284d      	cmp	r0, #77	; 0x4d
     d7a:	d013      	beq.n	da4 <uartfiber_parse_cmd+0x30>
     d7c:	2852      	cmp	r0, #82	; 0x52
     d7e:	d01f      	beq.n	dc0 <uartfiber_parse_cmd+0x4c>
     d80:	2841      	cmp	r0, #65	; 0x41
     d82:	d001      	beq.n	d88 <uartfiber_parse_cmd+0x14>
        case 'R':
            float_bytes.f_val = uartfiber_rssi->rssi245;
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
            break;
    }
}
     d84:	b003      	add	sp, #12
     d86:	bd00      	pop	{pc}
            float_bytes.f_val = uartfiber_rssi->rssi169;
     d88:	4b14      	ldr	r3, [pc, #80]	; (ddc <uartfiber_parse_cmd+0x68>)
     d8a:	681b      	ldr	r3, [r3, #0]
     d8c:	881b      	ldrh	r3, [r3, #0]
     d8e:	b21b      	sxth	r3, r3
     d90:	aa01      	add	r2, sp, #4
     d92:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     d94:	2202      	movs	r2, #2
     d96:	a901      	add	r1, sp, #4
     d98:	4811      	ldr	r0, [pc, #68]	; (de0 <uartfiber_parse_cmd+0x6c>)
     d9a:	4b12      	ldr	r3, [pc, #72]	; (de4 <uartfiber_parse_cmd+0x70>)
     d9c:	4798      	blx	r3
     d9e:	2805      	cmp	r0, #5
     da0:	d1f8      	bne.n	d94 <uartfiber_parse_cmd+0x20>
     da2:	e7ef      	b.n	d84 <uartfiber_parse_cmd+0x10>
            float_bytes.f_val = uartfiber_rssi->rssi915;
     da4:	4b0d      	ldr	r3, [pc, #52]	; (ddc <uartfiber_parse_cmd+0x68>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	885b      	ldrh	r3, [r3, #2]
     daa:	b21b      	sxth	r3, r3
     dac:	aa01      	add	r2, sp, #4
     dae:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     db0:	2202      	movs	r2, #2
     db2:	a901      	add	r1, sp, #4
     db4:	480a      	ldr	r0, [pc, #40]	; (de0 <uartfiber_parse_cmd+0x6c>)
     db6:	4b0b      	ldr	r3, [pc, #44]	; (de4 <uartfiber_parse_cmd+0x70>)
     db8:	4798      	blx	r3
     dba:	2805      	cmp	r0, #5
     dbc:	d1f8      	bne.n	db0 <uartfiber_parse_cmd+0x3c>
     dbe:	e7e1      	b.n	d84 <uartfiber_parse_cmd+0x10>
            float_bytes.f_val = uartfiber_rssi->rssi245;
     dc0:	4b06      	ldr	r3, [pc, #24]	; (ddc <uartfiber_parse_cmd+0x68>)
     dc2:	681b      	ldr	r3, [r3, #0]
     dc4:	889b      	ldrh	r3, [r3, #4]
     dc6:	b21b      	sxth	r3, r3
     dc8:	aa01      	add	r2, sp, #4
     dca:	8013      	strh	r3, [r2, #0]
            while(usart_write_buffer_job(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE) != STATUS_BUSY);
     dcc:	2202      	movs	r2, #2
     dce:	a901      	add	r1, sp, #4
     dd0:	4803      	ldr	r0, [pc, #12]	; (de0 <uartfiber_parse_cmd+0x6c>)
     dd2:	4b04      	ldr	r3, [pc, #16]	; (de4 <uartfiber_parse_cmd+0x70>)
     dd4:	4798      	blx	r3
     dd6:	2805      	cmp	r0, #5
     dd8:	d1f8      	bne.n	dcc <uartfiber_parse_cmd+0x58>
     dda:	e7d3      	b.n	d84 <uartfiber_parse_cmd+0x10>
     ddc:	20000360 	.word	0x20000360
     de0:	2000032c 	.word	0x2000032c
     de4:	00001831 	.word	0x00001831

00000de8 <uartfiber_read_callback>:
{
     de8:	b510      	push	{r4, lr}
    uartfiber_parse_cmd(uartfiber_rx_read);
     dea:	4c05      	ldr	r4, [pc, #20]	; (e00 <uartfiber_read_callback+0x18>)
     dec:	7820      	ldrb	r0, [r4, #0]
     dee:	4b05      	ldr	r3, [pc, #20]	; (e04 <uartfiber_read_callback+0x1c>)
     df0:	4798      	blx	r3
    usart_read_buffer_job(&uartfiber_inst, &uartfiber_rx_read, 1);
     df2:	2201      	movs	r2, #1
     df4:	0021      	movs	r1, r4
     df6:	4804      	ldr	r0, [pc, #16]	; (e08 <uartfiber_read_callback+0x20>)
     df8:	4b04      	ldr	r3, [pc, #16]	; (e0c <uartfiber_read_callback+0x24>)
     dfa:	4798      	blx	r3
}
     dfc:	bd10      	pop	{r4, pc}
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	20000364 	.word	0x20000364
     e04:	00000d75 	.word	0x00000d75
     e08:	2000032c 	.word	0x2000032c
     e0c:	00001851 	.word	0x00001851

00000e10 <configure_uartfiber_callbacks>:
{
     e10:	b510      	push	{r4, lr}
    usart_register_callback(&uartfiber_inst, uartfiber_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     e12:	4c08      	ldr	r4, [pc, #32]	; (e34 <configure_uartfiber_callbacks+0x24>)
     e14:	2201      	movs	r2, #1
     e16:	4908      	ldr	r1, [pc, #32]	; (e38 <configure_uartfiber_callbacks+0x28>)
     e18:	0020      	movs	r0, r4
     e1a:	4b08      	ldr	r3, [pc, #32]	; (e3c <configure_uartfiber_callbacks+0x2c>)
     e1c:	4798      	blx	r3
     e1e:	2231      	movs	r2, #49	; 0x31
     e20:	5ca3      	ldrb	r3, [r4, r2]
     e22:	2102      	movs	r1, #2
     e24:	430b      	orrs	r3, r1
     e26:	54a3      	strb	r3, [r4, r2]
    usart_read_buffer_job(&uartfiber_inst, &uartfiber_rx_read, 1);
     e28:	3a30      	subs	r2, #48	; 0x30
     e2a:	4905      	ldr	r1, [pc, #20]	; (e40 <configure_uartfiber_callbacks+0x30>)
     e2c:	0020      	movs	r0, r4
     e2e:	4b05      	ldr	r3, [pc, #20]	; (e44 <configure_uartfiber_callbacks+0x34>)
     e30:	4798      	blx	r3
}
     e32:	bd10      	pop	{r4, pc}
     e34:	2000032c 	.word	0x2000032c
     e38:	00000de9 	.word	0x00000de9
     e3c:	00001819 	.word	0x00001819
     e40:	20000364 	.word	0x20000364
     e44:	00001851 	.word	0x00001851

00000e48 <uartfiber_init>:
{
     e48:	b510      	push	{r4, lr}
     e4a:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
     e4c:	2380      	movs	r3, #128	; 0x80
     e4e:	05db      	lsls	r3, r3, #23
     e50:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     e52:	2300      	movs	r3, #0
     e54:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     e56:	22ff      	movs	r2, #255	; 0xff
     e58:	4669      	mov	r1, sp
     e5a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     e5c:	2200      	movs	r2, #0
     e5e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     e60:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     e62:	2196      	movs	r1, #150	; 0x96
     e64:	0189      	lsls	r1, r1, #6
     e66:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     e68:	2101      	movs	r1, #1
     e6a:	2024      	movs	r0, #36	; 0x24
     e6c:	466c      	mov	r4, sp
     e6e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     e70:	3001      	adds	r0, #1
     e72:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     e74:	3125      	adds	r1, #37	; 0x25
     e76:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     e78:	3101      	adds	r1, #1
     e7a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     e7c:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
     e7e:	3105      	adds	r1, #5
     e80:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     e82:	3101      	adds	r1, #1
     e84:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     e86:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     e88:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
     e8a:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
     e8c:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
     e8e:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
     e90:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     e92:	2313      	movs	r3, #19
     e94:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
     e96:	7762      	strb	r2, [r4, #29]
    config_usart.mux_setting = UART_FIBER_PINMUX;
     e98:	2390      	movs	r3, #144	; 0x90
     e9a:	035b      	lsls	r3, r3, #13
     e9c:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX_FIBER;
     e9e:	4b13      	ldr	r3, [pc, #76]	; (eec <uartfiber_init+0xa4>)
     ea0:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX_FIBER;
     ea2:	4b13      	ldr	r3, [pc, #76]	; (ef0 <uartfiber_init+0xa8>)
     ea4:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     ea6:	2301      	movs	r3, #1
     ea8:	425b      	negs	r3, r3
     eaa:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     eac:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst, UART_FIBER, &config_usart) != STATUS_OK);
     eae:	466a      	mov	r2, sp
     eb0:	4910      	ldr	r1, [pc, #64]	; (ef4 <uartfiber_init+0xac>)
     eb2:	4811      	ldr	r0, [pc, #68]	; (ef8 <uartfiber_init+0xb0>)
     eb4:	4b11      	ldr	r3, [pc, #68]	; (efc <uartfiber_init+0xb4>)
     eb6:	4798      	blx	r3
     eb8:	2800      	cmp	r0, #0
     eba:	d1f8      	bne.n	eae <uartfiber_init+0x66>
	SercomUsart *const usart_hw = &(module->hw->USART);
     ebc:	4b0e      	ldr	r3, [pc, #56]	; (ef8 <uartfiber_init+0xb0>)
     ebe:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     ec0:	0020      	movs	r0, r4
     ec2:	4b0f      	ldr	r3, [pc, #60]	; (f00 <uartfiber_init+0xb8>)
     ec4:	4798      	blx	r3
     ec6:	231f      	movs	r3, #31
     ec8:	4018      	ands	r0, r3
     eca:	3b1e      	subs	r3, #30
     ecc:	4083      	lsls	r3, r0
     ece:	4a0d      	ldr	r2, [pc, #52]	; (f04 <uartfiber_init+0xbc>)
     ed0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ed2:	4b09      	ldr	r3, [pc, #36]	; (ef8 <uartfiber_init+0xb0>)
     ed4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     ed6:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     ed8:	2b00      	cmp	r3, #0
     eda:	d1fa      	bne.n	ed2 <uartfiber_init+0x8a>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     edc:	6823      	ldr	r3, [r4, #0]
     ede:	2202      	movs	r2, #2
     ee0:	4313      	orrs	r3, r2
     ee2:	6023      	str	r3, [r4, #0]
    configure_uartfiber_callbacks();
     ee4:	4b08      	ldr	r3, [pc, #32]	; (f08 <uartfiber_init+0xc0>)
     ee6:	4798      	blx	r3
}
     ee8:	b010      	add	sp, #64	; 0x40
     eea:	bd10      	pop	{r4, pc}
     eec:	00100002 	.word	0x00100002
     ef0:	00110002 	.word	0x00110002
     ef4:	42000c00 	.word	0x42000c00
     ef8:	2000032c 	.word	0x2000032c
     efc:	00001471 	.word	0x00001471
     f00:	00002531 	.word	0x00002531
     f04:	e000e100 	.word	0xe000e100
     f08:	00000e11 	.word	0x00000e11

00000f0c <uartfiber_init_rssi>:
}


void uartfiber_init_rssi(rssi_vals* user_rssi)
{
    uartfiber_rssi = user_rssi;
     f0c:	4b01      	ldr	r3, [pc, #4]	; (f14 <uartfiber_init_rssi+0x8>)
     f0e:	6018      	str	r0, [r3, #0]
     f10:	4770      	bx	lr
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	20000360 	.word	0x20000360

00000f18 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     f18:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     f1a:	2000      	movs	r0, #0
     f1c:	4b08      	ldr	r3, [pc, #32]	; (f40 <delay_init+0x28>)
     f1e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     f20:	4c08      	ldr	r4, [pc, #32]	; (f44 <delay_init+0x2c>)
     f22:	21fa      	movs	r1, #250	; 0xfa
     f24:	0089      	lsls	r1, r1, #2
     f26:	47a0      	blx	r4
     f28:	4b07      	ldr	r3, [pc, #28]	; (f48 <delay_init+0x30>)
     f2a:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     f2c:	21fa      	movs	r1, #250	; 0xfa
     f2e:	0089      	lsls	r1, r1, #2
     f30:	47a0      	blx	r4
     f32:	4b06      	ldr	r3, [pc, #24]	; (f4c <delay_init+0x34>)
     f34:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f36:	2205      	movs	r2, #5
     f38:	4b05      	ldr	r3, [pc, #20]	; (f50 <delay_init+0x38>)
     f3a:	601a      	str	r2, [r3, #0]
}
     f3c:	bd10      	pop	{r4, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	00002971 	.word	0x00002971
     f44:	00002e99 	.word	0x00002e99
     f48:	20000010 	.word	0x20000010
     f4c:	20000014 	.word	0x20000014
     f50:	e000e010 	.word	0xe000e010

00000f54 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     f54:	e000      	b.n	f58 <delay_cycles_ms+0x4>
{
     f56:	0010      	movs	r0, r2
	while (n--) {
     f58:	1e42      	subs	r2, r0, #1
     f5a:	2800      	cmp	r0, #0
     f5c:	d00c      	beq.n	f78 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     f5e:	4b07      	ldr	r3, [pc, #28]	; (f7c <delay_cycles_ms+0x28>)
     f60:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     f62:	2b00      	cmp	r3, #0
     f64:	d0f7      	beq.n	f56 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     f66:	4906      	ldr	r1, [pc, #24]	; (f80 <delay_cycles_ms+0x2c>)
     f68:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f6e:	4b04      	ldr	r3, [pc, #16]	; (f80 <delay_cycles_ms+0x2c>)
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	03db      	lsls	r3, r3, #15
     f74:	d5fb      	bpl.n	f6e <delay_cycles_ms+0x1a>
     f76:	e7ee      	b.n	f56 <delay_cycles_ms+0x2>
	}
}
     f78:	4770      	bx	lr
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	20000010 	.word	0x20000010
     f80:	e000e010 	.word	0xe000e010

00000f84 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     f84:	b500      	push	{lr}
     f86:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f88:	ab01      	add	r3, sp, #4
     f8a:	2280      	movs	r2, #128	; 0x80
     f8c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     f8e:	780a      	ldrb	r2, [r1, #0]
     f90:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     f92:	784a      	ldrb	r2, [r1, #1]
     f94:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     f96:	788a      	ldrb	r2, [r1, #2]
     f98:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     f9a:	0019      	movs	r1, r3
     f9c:	4b01      	ldr	r3, [pc, #4]	; (fa4 <port_pin_set_config+0x20>)
     f9e:	4798      	blx	r3
}
     fa0:	b003      	add	sp, #12
     fa2:	bd00      	pop	{pc}
     fa4:	00002b89 	.word	0x00002b89

00000fa8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     faa:	46de      	mov	lr, fp
     fac:	4657      	mov	r7, sl
     fae:	464e      	mov	r6, r9
     fb0:	4645      	mov	r5, r8
     fb2:	b5e0      	push	{r5, r6, r7, lr}
     fb4:	b085      	sub	sp, #20
     fb6:	4689      	mov	r9, r1
     fb8:	0016      	movs	r6, r2
     fba:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     fbc:	2200      	movs	r2, #0
     fbe:	2300      	movs	r3, #0
     fc0:	2100      	movs	r1, #0
     fc2:	468b      	mov	fp, r1
     fc4:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     fc6:	253f      	movs	r5, #63	; 0x3f
     fc8:	9600      	str	r6, [sp, #0]
     fca:	9701      	str	r7, [sp, #4]
     fcc:	9002      	str	r0, [sp, #8]
     fce:	4649      	mov	r1, r9
     fd0:	9103      	str	r1, [sp, #12]
     fd2:	e011      	b.n	ff8 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     fd4:	2120      	movs	r1, #32
     fd6:	1b49      	subs	r1, r1, r5
     fd8:	2400      	movs	r4, #0
     fda:	3401      	adds	r4, #1
     fdc:	40cc      	lsrs	r4, r1
     fde:	e013      	b.n	1008 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     fe0:	9800      	ldr	r0, [sp, #0]
     fe2:	9901      	ldr	r1, [sp, #4]
     fe4:	1a12      	subs	r2, r2, r0
     fe6:	418b      	sbcs	r3, r1
			q |= bit_shift;
     fe8:	4659      	mov	r1, fp
     fea:	4660      	mov	r0, ip
     fec:	4301      	orrs	r1, r0
     fee:	468b      	mov	fp, r1
     ff0:	4651      	mov	r1, sl
     ff2:	4321      	orrs	r1, r4
     ff4:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     ff6:	3d01      	subs	r5, #1
     ff8:	2d00      	cmp	r5, #0
     ffa:	db23      	blt.n	1044 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     ffc:	2120      	movs	r1, #32
     ffe:	4249      	negs	r1, r1
    1000:	1869      	adds	r1, r5, r1
    1002:	d4e7      	bmi.n	fd4 <long_division+0x2c>
    1004:	2401      	movs	r4, #1
    1006:	408c      	lsls	r4, r1
    1008:	2101      	movs	r1, #1
    100a:	40a9      	lsls	r1, r5
    100c:	468c      	mov	ip, r1
		r = r << 1;
    100e:	1892      	adds	r2, r2, r2
    1010:	415b      	adcs	r3, r3
    1012:	0010      	movs	r0, r2
    1014:	0019      	movs	r1, r3
		if (n & bit_shift) {
    1016:	9e02      	ldr	r6, [sp, #8]
    1018:	4667      	mov	r7, ip
    101a:	403e      	ands	r6, r7
    101c:	46b1      	mov	r9, r6
    101e:	9e03      	ldr	r6, [sp, #12]
    1020:	4026      	ands	r6, r4
    1022:	46b0      	mov	r8, r6
    1024:	464e      	mov	r6, r9
    1026:	4647      	mov	r7, r8
    1028:	433e      	orrs	r6, r7
    102a:	d003      	beq.n	1034 <long_division+0x8c>
			r |= 0x01;
    102c:	2601      	movs	r6, #1
    102e:	4306      	orrs	r6, r0
    1030:	0032      	movs	r2, r6
    1032:	000b      	movs	r3, r1
		if (r >= d) {
    1034:	9800      	ldr	r0, [sp, #0]
    1036:	9901      	ldr	r1, [sp, #4]
    1038:	4299      	cmp	r1, r3
    103a:	d8dc      	bhi.n	ff6 <long_division+0x4e>
    103c:	d1d0      	bne.n	fe0 <long_division+0x38>
    103e:	4290      	cmp	r0, r2
    1040:	d8d9      	bhi.n	ff6 <long_division+0x4e>
    1042:	e7cd      	b.n	fe0 <long_division+0x38>
		}
	}

	return q;
}
    1044:	4658      	mov	r0, fp
    1046:	4651      	mov	r1, sl
    1048:	b005      	add	sp, #20
    104a:	bc3c      	pop	{r2, r3, r4, r5}
    104c:	4690      	mov	r8, r2
    104e:	4699      	mov	r9, r3
    1050:	46a2      	mov	sl, r4
    1052:	46ab      	mov	fp, r5
    1054:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001056 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1056:	0849      	lsrs	r1, r1, #1
    1058:	4281      	cmp	r1, r0
    105a:	d201      	bcs.n	1060 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    105c:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    105e:	4770      	bx	lr
    1060:	2300      	movs	r3, #0
    1062:	e002      	b.n	106a <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
    1064:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1066:	3301      	adds	r3, #1
    1068:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    106a:	4281      	cmp	r1, r0
    106c:	d2fa      	bcs.n	1064 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
    106e:	3b01      	subs	r3, #1
    1070:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
    1072:	2bff      	cmp	r3, #255	; 0xff
    1074:	d901      	bls.n	107a <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1076:	2040      	movs	r0, #64	; 0x40
    1078:	e7f1      	b.n	105e <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
    107a:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    107c:	2000      	movs	r0, #0
    107e:	e7ee      	b.n	105e <_sercom_get_sync_baud_val+0x8>

00001080 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1080:	b570      	push	{r4, r5, r6, lr}
    1082:	b082      	sub	sp, #8
    1084:	000c      	movs	r4, r1
    1086:	0015      	movs	r5, r2
    1088:	aa06      	add	r2, sp, #24
    108a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    108c:	0002      	movs	r2, r0
    108e:	434a      	muls	r2, r1
    1090:	42a2      	cmp	r2, r4
    1092:	d902      	bls.n	109a <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1094:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1096:	b002      	add	sp, #8
    1098:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    109a:	2b00      	cmp	r3, #0
    109c:	d114      	bne.n	10c8 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    109e:	0002      	movs	r2, r0
    10a0:	0008      	movs	r0, r1
    10a2:	2100      	movs	r1, #0
    10a4:	4e1b      	ldr	r6, [pc, #108]	; (1114 <_sercom_get_async_baud_val+0x94>)
    10a6:	47b0      	blx	r6
    10a8:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    10aa:	0022      	movs	r2, r4
    10ac:	2300      	movs	r3, #0
    10ae:	2000      	movs	r0, #0
    10b0:	4c19      	ldr	r4, [pc, #100]	; (1118 <_sercom_get_async_baud_val+0x98>)
    10b2:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    10b4:	2200      	movs	r2, #0
    10b6:	2301      	movs	r3, #1
    10b8:	1a12      	subs	r2, r2, r0
    10ba:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    10bc:	0c10      	lsrs	r0, r2, #16
    10be:	041b      	lsls	r3, r3, #16
    10c0:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
    10c2:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
    10c4:	2000      	movs	r0, #0
    10c6:	e7e6      	b.n	1096 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    10c8:	2b01      	cmp	r3, #1
    10ca:	d001      	beq.n	10d0 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
    10cc:	2000      	movs	r0, #0
    10ce:	e7f8      	b.n	10c2 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
    10d0:	000a      	movs	r2, r1
    10d2:	2300      	movs	r3, #0
    10d4:	2100      	movs	r1, #0
    10d6:	4e0f      	ldr	r6, [pc, #60]	; (1114 <_sercom_get_async_baud_val+0x94>)
    10d8:	47b0      	blx	r6
    10da:	0002      	movs	r2, r0
    10dc:	000b      	movs	r3, r1
    10de:	9200      	str	r2, [sp, #0]
    10e0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    10e2:	0020      	movs	r0, r4
    10e4:	2100      	movs	r1, #0
    10e6:	4e0c      	ldr	r6, [pc, #48]	; (1118 <_sercom_get_async_baud_val+0x98>)
    10e8:	47b0      	blx	r6
    10ea:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
    10ec:	2380      	movs	r3, #128	; 0x80
    10ee:	019b      	lsls	r3, r3, #6
    10f0:	4298      	cmp	r0, r3
    10f2:	d901      	bls.n	10f8 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10f4:	2040      	movs	r0, #64	; 0x40
    10f6:	e7ce      	b.n	1096 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    10f8:	0f61      	lsrs	r1, r4, #29
    10fa:	00e0      	lsls	r0, r4, #3
    10fc:	9a00      	ldr	r2, [sp, #0]
    10fe:	9b01      	ldr	r3, [sp, #4]
    1100:	4c05      	ldr	r4, [pc, #20]	; (1118 <_sercom_get_async_baud_val+0x98>)
    1102:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1104:	b2c0      	uxtb	r0, r0
    1106:	00f3      	lsls	r3, r6, #3
    1108:	b2db      	uxtb	r3, r3
    110a:	1ac0      	subs	r0, r0, r3
    110c:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
    110e:	0340      	lsls	r0, r0, #13
    1110:	4330      	orrs	r0, r6
    1112:	e7d6      	b.n	10c2 <_sercom_get_async_baud_val+0x42>
    1114:	00003185 	.word	0x00003185
    1118:	00000fa9 	.word	0x00000fa9

0000111c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    111c:	b510      	push	{r4, lr}
    111e:	b082      	sub	sp, #8
    1120:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1122:	4b0e      	ldr	r3, [pc, #56]	; (115c <sercom_set_gclk_generator+0x40>)
    1124:	781b      	ldrb	r3, [r3, #0]
    1126:	2b00      	cmp	r3, #0
    1128:	d007      	beq.n	113a <sercom_set_gclk_generator+0x1e>
    112a:	2900      	cmp	r1, #0
    112c:	d105      	bne.n	113a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    112e:	4b0b      	ldr	r3, [pc, #44]	; (115c <sercom_set_gclk_generator+0x40>)
    1130:	785b      	ldrb	r3, [r3, #1]
    1132:	4283      	cmp	r3, r0
    1134:	d010      	beq.n	1158 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1136:	201d      	movs	r0, #29
    1138:	e00c      	b.n	1154 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    113a:	a901      	add	r1, sp, #4
    113c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    113e:	2013      	movs	r0, #19
    1140:	4b07      	ldr	r3, [pc, #28]	; (1160 <sercom_set_gclk_generator+0x44>)
    1142:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1144:	2013      	movs	r0, #19
    1146:	4b07      	ldr	r3, [pc, #28]	; (1164 <sercom_set_gclk_generator+0x48>)
    1148:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    114a:	4b04      	ldr	r3, [pc, #16]	; (115c <sercom_set_gclk_generator+0x40>)
    114c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    114e:	2201      	movs	r2, #1
    1150:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1152:	2000      	movs	r0, #0
}
    1154:	b002      	add	sp, #8
    1156:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1158:	2000      	movs	r0, #0
    115a:	e7fb      	b.n	1154 <sercom_set_gclk_generator+0x38>
    115c:	20000368 	.word	0x20000368
    1160:	00002aa5 	.word	0x00002aa5
    1164:	00002a1d 	.word	0x00002a1d

00001168 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1168:	4b2b      	ldr	r3, [pc, #172]	; (1218 <_sercom_get_default_pad+0xb0>)
    116a:	4298      	cmp	r0, r3
    116c:	d023      	beq.n	11b6 <_sercom_get_default_pad+0x4e>
    116e:	d90f      	bls.n	1190 <_sercom_get_default_pad+0x28>
    1170:	4b2a      	ldr	r3, [pc, #168]	; (121c <_sercom_get_default_pad+0xb4>)
    1172:	4298      	cmp	r0, r3
    1174:	d02f      	beq.n	11d6 <_sercom_get_default_pad+0x6e>
    1176:	4b2a      	ldr	r3, [pc, #168]	; (1220 <_sercom_get_default_pad+0xb8>)
    1178:	4298      	cmp	r0, r3
    117a:	d142      	bne.n	1202 <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    117c:	2901      	cmp	r1, #1
    117e:	d048      	beq.n	1212 <_sercom_get_default_pad+0xaa>
    1180:	2900      	cmp	r1, #0
    1182:	d038      	beq.n	11f6 <_sercom_get_default_pad+0x8e>
    1184:	2902      	cmp	r1, #2
    1186:	d038      	beq.n	11fa <_sercom_get_default_pad+0x92>
    1188:	2903      	cmp	r1, #3
    118a:	d038      	beq.n	11fe <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
    118c:	2000      	movs	r0, #0
    118e:	e039      	b.n	1204 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
    1190:	4b24      	ldr	r3, [pc, #144]	; (1224 <_sercom_get_default_pad+0xbc>)
    1192:	4298      	cmp	r0, r3
    1194:	d135      	bne.n	1202 <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1196:	2901      	cmp	r1, #1
    1198:	d035      	beq.n	1206 <_sercom_get_default_pad+0x9e>
    119a:	2900      	cmp	r1, #0
    119c:	d005      	beq.n	11aa <_sercom_get_default_pad+0x42>
    119e:	2902      	cmp	r1, #2
    11a0:	d005      	beq.n	11ae <_sercom_get_default_pad+0x46>
    11a2:	2903      	cmp	r1, #3
    11a4:	d005      	beq.n	11b2 <_sercom_get_default_pad+0x4a>
	return 0;
    11a6:	2000      	movs	r0, #0
    11a8:	e02c      	b.n	1204 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11aa:	481f      	ldr	r0, [pc, #124]	; (1228 <_sercom_get_default_pad+0xc0>)
    11ac:	e02a      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11ae:	481f      	ldr	r0, [pc, #124]	; (122c <_sercom_get_default_pad+0xc4>)
    11b0:	e028      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11b2:	481f      	ldr	r0, [pc, #124]	; (1230 <_sercom_get_default_pad+0xc8>)
    11b4:	e026      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11b6:	2901      	cmp	r1, #1
    11b8:	d027      	beq.n	120a <_sercom_get_default_pad+0xa2>
    11ba:	2900      	cmp	r1, #0
    11bc:	d005      	beq.n	11ca <_sercom_get_default_pad+0x62>
    11be:	2902      	cmp	r1, #2
    11c0:	d005      	beq.n	11ce <_sercom_get_default_pad+0x66>
    11c2:	2903      	cmp	r1, #3
    11c4:	d005      	beq.n	11d2 <_sercom_get_default_pad+0x6a>
	return 0;
    11c6:	2000      	movs	r0, #0
    11c8:	e01c      	b.n	1204 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11ca:	2003      	movs	r0, #3
    11cc:	e01a      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11ce:	4819      	ldr	r0, [pc, #100]	; (1234 <_sercom_get_default_pad+0xcc>)
    11d0:	e018      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11d2:	4819      	ldr	r0, [pc, #100]	; (1238 <_sercom_get_default_pad+0xd0>)
    11d4:	e016      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11d6:	2901      	cmp	r1, #1
    11d8:	d019      	beq.n	120e <_sercom_get_default_pad+0xa6>
    11da:	2900      	cmp	r1, #0
    11dc:	d005      	beq.n	11ea <_sercom_get_default_pad+0x82>
    11de:	2902      	cmp	r1, #2
    11e0:	d005      	beq.n	11ee <_sercom_get_default_pad+0x86>
    11e2:	2903      	cmp	r1, #3
    11e4:	d005      	beq.n	11f2 <_sercom_get_default_pad+0x8a>
	return 0;
    11e6:	2000      	movs	r0, #0
    11e8:	e00c      	b.n	1204 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11ea:	4814      	ldr	r0, [pc, #80]	; (123c <_sercom_get_default_pad+0xd4>)
    11ec:	e00a      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11ee:	4814      	ldr	r0, [pc, #80]	; (1240 <_sercom_get_default_pad+0xd8>)
    11f0:	e008      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11f2:	4814      	ldr	r0, [pc, #80]	; (1244 <_sercom_get_default_pad+0xdc>)
    11f4:	e006      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11f6:	4814      	ldr	r0, [pc, #80]	; (1248 <_sercom_get_default_pad+0xe0>)
    11f8:	e004      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11fa:	4814      	ldr	r0, [pc, #80]	; (124c <_sercom_get_default_pad+0xe4>)
    11fc:	e002      	b.n	1204 <_sercom_get_default_pad+0x9c>
    11fe:	4814      	ldr	r0, [pc, #80]	; (1250 <_sercom_get_default_pad+0xe8>)
    1200:	e000      	b.n	1204 <_sercom_get_default_pad+0x9c>
	return 0;
    1202:	2000      	movs	r0, #0
}
    1204:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1206:	4813      	ldr	r0, [pc, #76]	; (1254 <_sercom_get_default_pad+0xec>)
    1208:	e7fc      	b.n	1204 <_sercom_get_default_pad+0x9c>
    120a:	4813      	ldr	r0, [pc, #76]	; (1258 <_sercom_get_default_pad+0xf0>)
    120c:	e7fa      	b.n	1204 <_sercom_get_default_pad+0x9c>
    120e:	4813      	ldr	r0, [pc, #76]	; (125c <_sercom_get_default_pad+0xf4>)
    1210:	e7f8      	b.n	1204 <_sercom_get_default_pad+0x9c>
    1212:	4813      	ldr	r0, [pc, #76]	; (1260 <_sercom_get_default_pad+0xf8>)
    1214:	e7f6      	b.n	1204 <_sercom_get_default_pad+0x9c>
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	42000c00 	.word	0x42000c00
    121c:	42001000 	.word	0x42001000
    1220:	42001400 	.word	0x42001400
    1224:	42000800 	.word	0x42000800
    1228:	00040003 	.word	0x00040003
    122c:	00060003 	.word	0x00060003
    1230:	00070003 	.word	0x00070003
    1234:	001e0003 	.word	0x001e0003
    1238:	001f0003 	.word	0x001f0003
    123c:	00080003 	.word	0x00080003
    1240:	000a0003 	.word	0x000a0003
    1244:	000b0003 	.word	0x000b0003
    1248:	00100003 	.word	0x00100003
    124c:	00120003 	.word	0x00120003
    1250:	00130003 	.word	0x00130003
    1254:	00050003 	.word	0x00050003
    1258:	00010003 	.word	0x00010003
    125c:	00090003 	.word	0x00090003
    1260:	00110003 	.word	0x00110003

00001264 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1264:	b530      	push	{r4, r5, lr}
    1266:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1268:	466b      	mov	r3, sp
    126a:	4a0a      	ldr	r2, [pc, #40]	; (1294 <_sercom_get_sercom_inst_index+0x30>)
    126c:	ca32      	ldmia	r2!, {r1, r4, r5}
    126e:	c332      	stmia	r3!, {r1, r4, r5}
    1270:	0019      	movs	r1, r3
    1272:	6813      	ldr	r3, [r2, #0]
    1274:	600b      	str	r3, [r1, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1276:	2300      	movs	r3, #0
    1278:	2b03      	cmp	r3, #3
    127a:	d808      	bhi.n	128e <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    127c:	009a      	lsls	r2, r3, #2
    127e:	4669      	mov	r1, sp
    1280:	5852      	ldr	r2, [r2, r1]
    1282:	4282      	cmp	r2, r0
    1284:	d001      	beq.n	128a <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1286:	3301      	adds	r3, #1
    1288:	e7f6      	b.n	1278 <_sercom_get_sercom_inst_index+0x14>
			return i;
    128a:	b2d8      	uxtb	r0, r3
    128c:	e000      	b.n	1290 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    128e:	2000      	movs	r0, #0
}
    1290:	b005      	add	sp, #20
    1292:	bd30      	pop	{r4, r5, pc}
    1294:	00003740 	.word	0x00003740

00001298 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    1298:	b5f0      	push	{r4, r5, r6, r7, lr}
    129a:	46de      	mov	lr, fp
    129c:	4657      	mov	r7, sl
    129e:	464e      	mov	r6, r9
    12a0:	4645      	mov	r5, r8
    12a2:	b5e0      	push	{r5, r6, r7, lr}
    12a4:	b087      	sub	sp, #28
    12a6:	0004      	movs	r4, r0
    12a8:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12aa:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12ac:	0030      	movs	r0, r6
    12ae:	4b6b      	ldr	r3, [pc, #428]	; (145c <_usart_set_config+0x1c4>)
    12b0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12b2:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    12b4:	2200      	movs	r2, #0
    12b6:	230e      	movs	r3, #14
    12b8:	a902      	add	r1, sp, #8
    12ba:	468c      	mov	ip, r1
    12bc:	4463      	add	r3, ip
    12be:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    12c0:	8a2a      	ldrh	r2, [r5, #16]
    12c2:	2380      	movs	r3, #128	; 0x80
    12c4:	01db      	lsls	r3, r3, #7
    12c6:	429a      	cmp	r2, r3
    12c8:	d03b      	beq.n	1342 <_usart_set_config+0xaa>
    12ca:	d90c      	bls.n	12e6 <_usart_set_config+0x4e>
    12cc:	23c0      	movs	r3, #192	; 0xc0
    12ce:	01db      	lsls	r3, r3, #7
    12d0:	429a      	cmp	r2, r3
    12d2:	d031      	beq.n	1338 <_usart_set_config+0xa0>
    12d4:	2380      	movs	r3, #128	; 0x80
    12d6:	021b      	lsls	r3, r3, #8
    12d8:	429a      	cmp	r2, r3
    12da:	d10d      	bne.n	12f8 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    12dc:	2303      	movs	r3, #3
    12de:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    12e0:	2300      	movs	r3, #0
    12e2:	4699      	mov	r9, r3
			break;
    12e4:	e00c      	b.n	1300 <_usart_set_config+0x68>
	switch (config->sample_rate) {
    12e6:	2380      	movs	r3, #128	; 0x80
    12e8:	019b      	lsls	r3, r3, #6
    12ea:	429a      	cmp	r2, r3
    12ec:	d104      	bne.n	12f8 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    12ee:	2310      	movs	r3, #16
    12f0:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    12f2:	3b0f      	subs	r3, #15
    12f4:	4699      	mov	r9, r3
			break;
    12f6:	e003      	b.n	1300 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    12f8:	2310      	movs	r3, #16
    12fa:	469a      	mov	sl, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    12fc:	2300      	movs	r3, #0
    12fe:	4699      	mov	r9, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1300:	682b      	ldr	r3, [r5, #0]
    1302:	68e9      	ldr	r1, [r5, #12]
    1304:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
    1306:	6969      	ldr	r1, [r5, #20]
    1308:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    130a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    130c:	7e2a      	ldrb	r2, [r5, #24]
    130e:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    1310:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1312:	2226      	movs	r2, #38	; 0x26
    1314:	5caf      	ldrb	r7, [r5, r2]
    1316:	077f      	lsls	r7, r7, #29
	ctrla = (uint32_t)config->data_order |
    1318:	431f      	orrs	r7, r3
    131a:	9703      	str	r7, [sp, #12]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    131c:	686b      	ldr	r3, [r5, #4]
    131e:	4698      	mov	r8, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1320:	2b00      	cmp	r3, #0
    1322:	d021      	beq.n	1368 <_usart_set_config+0xd0>
    1324:	2380      	movs	r3, #128	; 0x80
    1326:	055b      	lsls	r3, r3, #21
    1328:	4598      	cmp	r8, r3
    132a:	d13e      	bne.n	13aa <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    132c:	2327      	movs	r3, #39	; 0x27
    132e:	5ceb      	ldrb	r3, [r5, r3]
    1330:	2b00      	cmp	r3, #0
    1332:	d00b      	beq.n	134c <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
    1334:	2000      	movs	r0, #0
    1336:	e039      	b.n	13ac <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1338:	2308      	movs	r3, #8
    133a:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    133c:	3b07      	subs	r3, #7
    133e:	4699      	mov	r9, r3
			break;
    1340:	e7de      	b.n	1300 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1342:	2308      	movs	r3, #8
    1344:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1346:	2300      	movs	r3, #0
    1348:	4699      	mov	r9, r3
    134a:	e7d9      	b.n	1300 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    134c:	6a2b      	ldr	r3, [r5, #32]
    134e:	4699      	mov	r9, r3
    1350:	b2c0      	uxtb	r0, r0
    1352:	4b43      	ldr	r3, [pc, #268]	; (1460 <_usart_set_config+0x1c8>)
    1354:	4798      	blx	r3
    1356:	0001      	movs	r1, r0
    1358:	220e      	movs	r2, #14
    135a:	ab02      	add	r3, sp, #8
    135c:	469c      	mov	ip, r3
    135e:	4462      	add	r2, ip
    1360:	4648      	mov	r0, r9
    1362:	4b40      	ldr	r3, [pc, #256]	; (1464 <_usart_set_config+0x1cc>)
    1364:	4798      	blx	r3
    1366:	e021      	b.n	13ac <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1368:	2327      	movs	r3, #39	; 0x27
    136a:	5ceb      	ldrb	r3, [r5, r3]
    136c:	2b00      	cmp	r3, #0
    136e:	d00b      	beq.n	1388 <_usart_set_config+0xf0>
				status_code =
    1370:	4653      	mov	r3, sl
    1372:	9300      	str	r3, [sp, #0]
    1374:	464b      	mov	r3, r9
    1376:	220e      	movs	r2, #14
    1378:	a902      	add	r1, sp, #8
    137a:	468c      	mov	ip, r1
    137c:	4462      	add	r2, ip
    137e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1380:	6a28      	ldr	r0, [r5, #32]
    1382:	4f39      	ldr	r7, [pc, #228]	; (1468 <_usart_set_config+0x1d0>)
    1384:	47b8      	blx	r7
    1386:	e011      	b.n	13ac <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1388:	6a2b      	ldr	r3, [r5, #32]
    138a:	469b      	mov	fp, r3
    138c:	b2c0      	uxtb	r0, r0
    138e:	4b34      	ldr	r3, [pc, #208]	; (1460 <_usart_set_config+0x1c8>)
    1390:	4798      	blx	r3
    1392:	0001      	movs	r1, r0
				status_code =
    1394:	4653      	mov	r3, sl
    1396:	9300      	str	r3, [sp, #0]
    1398:	464b      	mov	r3, r9
    139a:	220e      	movs	r2, #14
    139c:	a802      	add	r0, sp, #8
    139e:	4684      	mov	ip, r0
    13a0:	4462      	add	r2, ip
    13a2:	4658      	mov	r0, fp
    13a4:	4f30      	ldr	r7, [pc, #192]	; (1468 <_usart_set_config+0x1d0>)
    13a6:	47b8      	blx	r7
    13a8:	e000      	b.n	13ac <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
    13aa:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    13ac:	2800      	cmp	r0, #0
    13ae:	d146      	bne.n	143e <_usart_set_config+0x1a6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    13b0:	7e6b      	ldrb	r3, [r5, #25]
    13b2:	2b00      	cmp	r3, #0
    13b4:	d001      	beq.n	13ba <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    13b6:	7eab      	ldrb	r3, [r5, #26]
    13b8:	73b3      	strb	r3, [r6, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    13ba:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    13bc:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    13be:	2b00      	cmp	r3, #0
    13c0:	d1fb      	bne.n	13ba <_usart_set_config+0x122>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    13c2:	330e      	adds	r3, #14
    13c4:	aa02      	add	r2, sp, #8
    13c6:	4694      	mov	ip, r2
    13c8:	4463      	add	r3, ip
    13ca:	881b      	ldrh	r3, [r3, #0]
    13cc:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    13ce:	4643      	mov	r3, r8
    13d0:	9f03      	ldr	r7, [sp, #12]
    13d2:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    13d4:	2327      	movs	r3, #39	; 0x27
    13d6:	5ceb      	ldrb	r3, [r5, r3]
    13d8:	2b00      	cmp	r3, #0
    13da:	d101      	bne.n	13e0 <_usart_set_config+0x148>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    13dc:	3304      	adds	r3, #4
    13de:	431f      	orrs	r7, r3
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    13e0:	7e6a      	ldrb	r2, [r5, #25]
    13e2:	0292      	lsls	r2, r2, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    13e4:	7f2b      	ldrb	r3, [r5, #28]
    13e6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    13e8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    13ea:	7f6b      	ldrb	r3, [r5, #29]
    13ec:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    13ee:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    13f0:	2324      	movs	r3, #36	; 0x24
    13f2:	5ceb      	ldrb	r3, [r5, r3]
    13f4:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    13f6:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    13f8:	2325      	movs	r3, #37	; 0x25
    13fa:	5ceb      	ldrb	r3, [r5, r3]
    13fc:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    13fe:	431a      	orrs	r2, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1400:	7aab      	ldrb	r3, [r5, #10]
    1402:	431a      	orrs	r2, r3
	ctrlb |= (uint32_t)config->character_size;
    1404:	7aeb      	ldrb	r3, [r5, #11]
    1406:	431a      	orrs	r2, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1408:	892b      	ldrh	r3, [r5, #8]
    140a:	2bff      	cmp	r3, #255	; 0xff
    140c:	d01e      	beq.n	144c <_usart_set_config+0x1b4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    140e:	2180      	movs	r1, #128	; 0x80
    1410:	0449      	lsls	r1, r1, #17
    1412:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
    1414:	431a      	orrs	r2, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1416:	232c      	movs	r3, #44	; 0x2c
    1418:	5ceb      	ldrb	r3, [r5, r3]
    141a:	2b00      	cmp	r3, #0
    141c:	d103      	bne.n	1426 <_usart_set_config+0x18e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    141e:	4b13      	ldr	r3, [pc, #76]	; (146c <_usart_set_config+0x1d4>)
    1420:	789b      	ldrb	r3, [r3, #2]
    1422:	079b      	lsls	r3, r3, #30
    1424:	d501      	bpl.n	142a <_usart_set_config+0x192>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1426:	2380      	movs	r3, #128	; 0x80
    1428:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    142a:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    142c:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    142e:	2b00      	cmp	r3, #0
    1430:	d1fb      	bne.n	142a <_usart_set_config+0x192>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1432:	6072      	str	r2, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1434:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1436:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1438:	2b00      	cmp	r3, #0
    143a:	d1fb      	bne.n	1434 <_usart_set_config+0x19c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    143c:	6037      	str	r7, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
    143e:	b007      	add	sp, #28
    1440:	bc3c      	pop	{r2, r3, r4, r5}
    1442:	4690      	mov	r8, r2
    1444:	4699      	mov	r9, r3
    1446:	46a2      	mov	sl, r4
    1448:	46ab      	mov	fp, r5
    144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
    144c:	7eeb      	ldrb	r3, [r5, #27]
    144e:	2b00      	cmp	r3, #0
    1450:	d0e1      	beq.n	1416 <_usart_set_config+0x17e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1452:	2380      	movs	r3, #128	; 0x80
    1454:	04db      	lsls	r3, r3, #19
    1456:	431f      	orrs	r7, r3
    1458:	e7dd      	b.n	1416 <_usart_set_config+0x17e>
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	00001265 	.word	0x00001265
    1460:	00002ac1 	.word	0x00002ac1
    1464:	00001057 	.word	0x00001057
    1468:	00001081 	.word	0x00001081
    146c:	41002000 	.word	0x41002000

00001470 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1470:	b5f0      	push	{r4, r5, r6, r7, lr}
    1472:	b089      	sub	sp, #36	; 0x24
    1474:	0006      	movs	r6, r0
    1476:	000c      	movs	r4, r1
    1478:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    147a:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    147c:	0008      	movs	r0, r1
    147e:	4b42      	ldr	r3, [pc, #264]	; (1588 <usart_init+0x118>)
    1480:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1482:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1484:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1486:	6823      	ldr	r3, [r4, #0]
    1488:	07db      	lsls	r3, r3, #31
    148a:	d503      	bpl.n	1494 <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    148c:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    148e:	0028      	movs	r0, r5
    1490:	b009      	add	sp, #36	; 0x24
    1492:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1494:	6823      	ldr	r3, [r4, #0]
    1496:	079b      	lsls	r3, r3, #30
    1498:	d501      	bpl.n	149e <usart_init+0x2e>
		return STATUS_ERR_DENIED;
    149a:	251c      	movs	r5, #28
    149c:	e7f7      	b.n	148e <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    149e:	2301      	movs	r3, #1
    14a0:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    14a2:	4a3a      	ldr	r2, [pc, #232]	; (158c <usart_init+0x11c>)
    14a4:	6a11      	ldr	r1, [r2, #32]
    14a6:	430b      	orrs	r3, r1
    14a8:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    14aa:	252d      	movs	r5, #45	; 0x2d
    14ac:	5d7b      	ldrb	r3, [r7, r5]
    14ae:	a907      	add	r1, sp, #28
    14b0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    14b2:	b2c3      	uxtb	r3, r0
    14b4:	9301      	str	r3, [sp, #4]
    14b6:	0018      	movs	r0, r3
    14b8:	4b35      	ldr	r3, [pc, #212]	; (1590 <usart_init+0x120>)
    14ba:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14bc:	9801      	ldr	r0, [sp, #4]
    14be:	4b35      	ldr	r3, [pc, #212]	; (1594 <usart_init+0x124>)
    14c0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14c2:	5d78      	ldrb	r0, [r7, r5]
    14c4:	2100      	movs	r1, #0
    14c6:	4b34      	ldr	r3, [pc, #208]	; (1598 <usart_init+0x128>)
    14c8:	4798      	blx	r3
	module->character_size = config->character_size;
    14ca:	7afb      	ldrb	r3, [r7, #11]
    14cc:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    14ce:	2324      	movs	r3, #36	; 0x24
    14d0:	5cfb      	ldrb	r3, [r7, r3]
    14d2:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    14d4:	2325      	movs	r3, #37	; 0x25
    14d6:	5cfb      	ldrb	r3, [r7, r3]
    14d8:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    14da:	7efb      	ldrb	r3, [r7, #27]
    14dc:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    14de:	7f3b      	ldrb	r3, [r7, #28]
    14e0:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    14e2:	0039      	movs	r1, r7
    14e4:	0030      	movs	r0, r6
    14e6:	4b2d      	ldr	r3, [pc, #180]	; (159c <usart_init+0x12c>)
    14e8:	4798      	blx	r3
    14ea:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    14ec:	d1cf      	bne.n	148e <usart_init+0x1e>
    14ee:	ab06      	add	r3, sp, #24
    14f0:	2280      	movs	r2, #128	; 0x80
    14f2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14f4:	2200      	movs	r2, #0
    14f6:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    14f8:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14fa:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    14fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    14fe:	9302      	str	r3, [sp, #8]
    1500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1502:	9303      	str	r3, [sp, #12]
    1504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1506:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    1508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    150a:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    150c:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    150e:	2700      	movs	r7, #0
    1510:	e006      	b.n	1520 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1512:	0039      	movs	r1, r7
    1514:	0020      	movs	r0, r4
    1516:	4b22      	ldr	r3, [pc, #136]	; (15a0 <usart_init+0x130>)
    1518:	4798      	blx	r3
    151a:	e008      	b.n	152e <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    151c:	3701      	adds	r7, #1
    151e:	b2ff      	uxtb	r7, r7
    1520:	2f03      	cmp	r7, #3
    1522:	d80d      	bhi.n	1540 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1524:	00bb      	lsls	r3, r7, #2
    1526:	aa02      	add	r2, sp, #8
    1528:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    152a:	2800      	cmp	r0, #0
    152c:	d0f1      	beq.n	1512 <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    152e:	1c43      	adds	r3, r0, #1
    1530:	d0f4      	beq.n	151c <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1532:	a906      	add	r1, sp, #24
    1534:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1536:	0c00      	lsrs	r0, r0, #16
    1538:	b2c0      	uxtb	r0, r0
    153a:	4b1a      	ldr	r3, [pc, #104]	; (15a4 <usart_init+0x134>)
    153c:	4798      	blx	r3
    153e:	e7ed      	b.n	151c <usart_init+0xac>
    1540:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1542:	2a05      	cmp	r2, #5
    1544:	d806      	bhi.n	1554 <usart_init+0xe4>
		module->callback[i]            = NULL;
    1546:	1c93      	adds	r3, r2, #2
    1548:	009b      	lsls	r3, r3, #2
    154a:	18f3      	adds	r3, r6, r3
    154c:	2100      	movs	r1, #0
    154e:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1550:	3201      	adds	r2, #1
    1552:	e7f6      	b.n	1542 <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    1554:	2200      	movs	r2, #0
    1556:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1558:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    155a:	2300      	movs	r3, #0
    155c:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    155e:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1560:	3230      	adds	r2, #48	; 0x30
    1562:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    1564:	3201      	adds	r2, #1
    1566:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    1568:	3201      	adds	r2, #1
    156a:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    156c:	3201      	adds	r2, #1
    156e:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1570:	6830      	ldr	r0, [r6, #0]
    1572:	4b05      	ldr	r3, [pc, #20]	; (1588 <usart_init+0x118>)
    1574:	4798      	blx	r3
    1576:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1578:	490b      	ldr	r1, [pc, #44]	; (15a8 <usart_init+0x138>)
    157a:	4b0c      	ldr	r3, [pc, #48]	; (15ac <usart_init+0x13c>)
    157c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    157e:	00a4      	lsls	r4, r4, #2
    1580:	4b0b      	ldr	r3, [pc, #44]	; (15b0 <usart_init+0x140>)
    1582:	50e6      	str	r6, [r4, r3]
	return status_code;
    1584:	e783      	b.n	148e <usart_init+0x1e>
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	00001265 	.word	0x00001265
    158c:	40000400 	.word	0x40000400
    1590:	00002aa5 	.word	0x00002aa5
    1594:	00002a1d 	.word	0x00002a1d
    1598:	0000111d 	.word	0x0000111d
    159c:	00001299 	.word	0x00001299
    15a0:	00001169 	.word	0x00001169
    15a4:	00002b89 	.word	0x00002b89
    15a8:	00001871 	.word	0x00001871
    15ac:	000024f1 	.word	0x000024f1
    15b0:	200003e0 	.word	0x200003e0

000015b4 <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15b4:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15b6:	79c2      	ldrb	r2, [r0, #7]
    15b8:	2a00      	cmp	r2, #0
    15ba:	d101      	bne.n	15c0 <usart_write_wait+0xc>
		return STATUS_ERR_DENIED;
    15bc:	201c      	movs	r0, #28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    15be:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    15c0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    15c2:	b292      	uxth	r2, r2
    15c4:	2a00      	cmp	r2, #0
    15c6:	d001      	beq.n	15cc <usart_write_wait+0x18>
		return STATUS_BUSY;
    15c8:	2005      	movs	r0, #5
    15ca:	e7f8      	b.n	15be <usart_write_wait+0xa>
	return (usart_hw->SYNCBUSY.reg);
    15cc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    15ce:	2a00      	cmp	r2, #0
    15d0:	d1fc      	bne.n	15cc <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    15d2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    15d4:	7e1a      	ldrb	r2, [r3, #24]
    15d6:	0792      	lsls	r2, r2, #30
    15d8:	d5fc      	bpl.n	15d4 <usart_write_wait+0x20>
	return STATUS_OK;
    15da:	2000      	movs	r0, #0
    15dc:	e7ef      	b.n	15be <usart_write_wait+0xa>

000015de <usart_read_wait>:

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15de:	6802      	ldr	r2, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    15e0:	7983      	ldrb	r3, [r0, #6]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d101      	bne.n	15ea <usart_read_wait+0xc>
		return STATUS_ERR_DENIED;
    15e6:	201c      	movs	r0, #28

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    15e8:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    15ea:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    15ec:	b29b      	uxth	r3, r3
    15ee:	2b00      	cmp	r3, #0
    15f0:	d001      	beq.n	15f6 <usart_read_wait+0x18>
		return STATUS_BUSY;
    15f2:	2005      	movs	r0, #5
    15f4:	e7f8      	b.n	15e8 <usart_read_wait+0xa>
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    15f6:	7e13      	ldrb	r3, [r2, #24]
    15f8:	075b      	lsls	r3, r3, #29
    15fa:	d401      	bmi.n	1600 <usart_read_wait+0x22>
		return STATUS_BUSY;
    15fc:	2005      	movs	r0, #5
    15fe:	e7f3      	b.n	15e8 <usart_read_wait+0xa>
	return (usart_hw->SYNCBUSY.reg);
    1600:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1602:	2b00      	cmp	r3, #0
    1604:	d1fc      	bne.n	1600 <usart_read_wait+0x22>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1606:	8b53      	ldrh	r3, [r2, #26]
    1608:	b2db      	uxtb	r3, r3
	if (error_code) {
    160a:	0698      	lsls	r0, r3, #26
    160c:	d01d      	beq.n	164a <usart_read_wait+0x6c>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    160e:	0798      	lsls	r0, r3, #30
    1610:	d503      	bpl.n	161a <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1612:	2302      	movs	r3, #2
    1614:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1616:	201a      	movs	r0, #26
    1618:	e7e6      	b.n	15e8 <usart_read_wait+0xa>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    161a:	0758      	lsls	r0, r3, #29
    161c:	d503      	bpl.n	1626 <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    161e:	2304      	movs	r3, #4
    1620:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1622:	201e      	movs	r0, #30
    1624:	e7e0      	b.n	15e8 <usart_read_wait+0xa>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1626:	07d8      	lsls	r0, r3, #31
    1628:	d503      	bpl.n	1632 <usart_read_wait+0x54>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    162a:	2301      	movs	r3, #1
    162c:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    162e:	2013      	movs	r0, #19
    1630:	e7da      	b.n	15e8 <usart_read_wait+0xa>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1632:	06d8      	lsls	r0, r3, #27
    1634:	d503      	bpl.n	163e <usart_read_wait+0x60>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1636:	2310      	movs	r3, #16
    1638:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    163a:	2042      	movs	r0, #66	; 0x42
    163c:	e7d4      	b.n	15e8 <usart_read_wait+0xa>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    163e:	069b      	lsls	r3, r3, #26
    1640:	d503      	bpl.n	164a <usart_read_wait+0x6c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1642:	2320      	movs	r3, #32
    1644:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1646:	2041      	movs	r0, #65	; 0x41
    1648:	e7ce      	b.n	15e8 <usart_read_wait+0xa>
	*rx_data = usart_hw->DATA.reg;
    164a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    164c:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    164e:	2000      	movs	r0, #0
    1650:	e7ca      	b.n	15e8 <usart_read_wait+0xa>
	...

00001654 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1654:	b5f0      	push	{r4, r5, r6, r7, lr}
    1656:	46c6      	mov	lr, r8
    1658:	b500      	push	{lr}
    165a:	0004      	movs	r4, r0
    165c:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    165e:	2a00      	cmp	r2, #0
    1660:	d103      	bne.n	166a <usart_write_buffer_wait+0x16>
		return STATUS_ERR_INVALID_ARG;
    1662:	2017      	movs	r0, #23
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1664:	bc04      	pop	{r2}
    1666:	4690      	mov	r8, r2
    1668:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    166a:	79c3      	ldrb	r3, [r0, #7]
    166c:	2b00      	cmp	r3, #0
    166e:	d101      	bne.n	1674 <usart_write_buffer_wait+0x20>
		return STATUS_ERR_DENIED;
    1670:	201c      	movs	r0, #28
    1672:	e7f7      	b.n	1664 <usart_write_buffer_wait+0x10>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1674:	6806      	ldr	r6, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1676:	69f3      	ldr	r3, [r6, #28]
	while (usart_is_syncing(module)) {
    1678:	2b00      	cmp	r3, #0
    167a:	d1fc      	bne.n	1676 <usart_write_buffer_wait+0x22>
    167c:	2000      	movs	r0, #0
    167e:	e00c      	b.n	169a <usart_write_buffer_wait+0x46>
		uint16_t data_to_send = tx_data[tx_pos++];
    1680:	1c43      	adds	r3, r0, #1
    1682:	b29b      	uxth	r3, r3
    1684:	4698      	mov	r8, r3
    1686:	5c2b      	ldrb	r3, [r5, r0]
    1688:	b299      	uxth	r1, r3
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    168a:	7962      	ldrb	r2, [r4, #5]
    168c:	2a01      	cmp	r2, #1
    168e:	d014      	beq.n	16ba <usart_write_buffer_wait+0x66>
		usart_write_wait(module, data_to_send);
    1690:	0020      	movs	r0, r4
    1692:	4b18      	ldr	r3, [pc, #96]	; (16f4 <usart_write_buffer_wait+0xa0>)
    1694:	4798      	blx	r3
	while (length--) {
    1696:	4640      	mov	r0, r8
    1698:	003a      	movs	r2, r7
    169a:	1e57      	subs	r7, r2, #1
    169c:	b2bf      	uxth	r7, r7
    169e:	2a00      	cmp	r2, #0
    16a0:	d013      	beq.n	16ca <usart_write_buffer_wait+0x76>
    16a2:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    16a4:	4a14      	ldr	r2, [pc, #80]	; (16f8 <usart_write_buffer_wait+0xa4>)
    16a6:	4293      	cmp	r3, r2
    16a8:	d8ea      	bhi.n	1680 <usart_write_buffer_wait+0x2c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    16aa:	7e32      	ldrb	r2, [r6, #24]
    16ac:	07d2      	lsls	r2, r2, #31
    16ae:	d4e7      	bmi.n	1680 <usart_write_buffer_wait+0x2c>
			} else if (i == USART_TIMEOUT) {
    16b0:	4a11      	ldr	r2, [pc, #68]	; (16f8 <usart_write_buffer_wait+0xa4>)
    16b2:	4293      	cmp	r3, r2
    16b4:	d019      	beq.n	16ea <usart_write_buffer_wait+0x96>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    16b6:	3301      	adds	r3, #1
    16b8:	e7f4      	b.n	16a4 <usart_write_buffer_wait+0x50>
			data_to_send |= (tx_data[tx_pos++] << 8);
    16ba:	3002      	adds	r0, #2
    16bc:	4642      	mov	r2, r8
    16be:	5ca9      	ldrb	r1, [r5, r2]
    16c0:	0209      	lsls	r1, r1, #8
    16c2:	4319      	orrs	r1, r3
    16c4:	b283      	uxth	r3, r0
    16c6:	4698      	mov	r8, r3
    16c8:	e7e2      	b.n	1690 <usart_write_buffer_wait+0x3c>
    16ca:	2300      	movs	r3, #0
    16cc:	e000      	b.n	16d0 <usart_write_buffer_wait+0x7c>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    16ce:	3301      	adds	r3, #1
    16d0:	4a09      	ldr	r2, [pc, #36]	; (16f8 <usart_write_buffer_wait+0xa4>)
    16d2:	4293      	cmp	r3, r2
    16d4:	d807      	bhi.n	16e6 <usart_write_buffer_wait+0x92>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    16d6:	7e32      	ldrb	r2, [r6, #24]
    16d8:	0792      	lsls	r2, r2, #30
    16da:	d408      	bmi.n	16ee <usart_write_buffer_wait+0x9a>
		} else if (i == USART_TIMEOUT) {
    16dc:	4a06      	ldr	r2, [pc, #24]	; (16f8 <usart_write_buffer_wait+0xa4>)
    16de:	4293      	cmp	r3, r2
    16e0:	d1f5      	bne.n	16ce <usart_write_buffer_wait+0x7a>
			return STATUS_ERR_TIMEOUT;
    16e2:	2012      	movs	r0, #18
    16e4:	e7be      	b.n	1664 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
    16e6:	2000      	movs	r0, #0
    16e8:	e7bc      	b.n	1664 <usart_write_buffer_wait+0x10>
				return STATUS_ERR_TIMEOUT;
    16ea:	2012      	movs	r0, #18
    16ec:	e7ba      	b.n	1664 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
    16ee:	2000      	movs	r0, #0
    16f0:	e7b8      	b.n	1664 <usart_write_buffer_wait+0x10>
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	000015b5 	.word	0x000015b5
    16f8:	0000ffff 	.word	0x0000ffff

000016fc <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    16fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fe:	b085      	sub	sp, #20
    1700:	0004      	movs	r4, r0
    1702:	9101      	str	r1, [sp, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    1704:	2a00      	cmp	r2, #0
    1706:	d102      	bne.n	170e <usart_read_buffer_wait+0x12>
		return STATUS_ERR_INVALID_ARG;
    1708:	2017      	movs	r0, #23
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    170a:	b005      	add	sp, #20
    170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    170e:	7983      	ldrb	r3, [r0, #6]
    1710:	2b00      	cmp	r3, #0
    1712:	d101      	bne.n	1718 <usart_read_buffer_wait+0x1c>
		return STATUS_ERR_DENIED;
    1714:	201c      	movs	r0, #28
    1716:	e7f8      	b.n	170a <usart_read_buffer_wait+0xe>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1718:	6806      	ldr	r6, [r0, #0]
	uint16_t rx_pos = 0;
    171a:	2500      	movs	r5, #0
	while (length--) {
    171c:	e014      	b.n	1748 <usart_read_buffer_wait+0x4c>
		uint16_t received_data = 0;
    171e:	ab02      	add	r3, sp, #8
    1720:	1d99      	adds	r1, r3, #6
    1722:	2300      	movs	r3, #0
    1724:	800b      	strh	r3, [r1, #0]
		retval = usart_read_wait(module, &received_data);
    1726:	0020      	movs	r0, r4
    1728:	4b15      	ldr	r3, [pc, #84]	; (1780 <usart_read_buffer_wait+0x84>)
    172a:	4798      	blx	r3
		if (retval != STATUS_OK) {
    172c:	2800      	cmp	r0, #0
    172e:	d1ec      	bne.n	170a <usart_read_buffer_wait+0xe>
		rx_data[rx_pos++] = received_data;
    1730:	1c6b      	adds	r3, r5, #1
    1732:	b29b      	uxth	r3, r3
    1734:	aa02      	add	r2, sp, #8
    1736:	3206      	adds	r2, #6
    1738:	8812      	ldrh	r2, [r2, #0]
    173a:	9901      	ldr	r1, [sp, #4]
    173c:	554a      	strb	r2, [r1, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    173e:	7962      	ldrb	r2, [r4, #5]
    1740:	2a01      	cmp	r2, #1
    1742:	d011      	beq.n	1768 <usart_read_buffer_wait+0x6c>
    1744:	001d      	movs	r5, r3
	while (length--) {
    1746:	003a      	movs	r2, r7
    1748:	1e57      	subs	r7, r2, #1
    174a:	b2bf      	uxth	r7, r7
    174c:	2a00      	cmp	r2, #0
    174e:	d015      	beq.n	177c <usart_read_buffer_wait+0x80>
    1750:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1752:	4a0c      	ldr	r2, [pc, #48]	; (1784 <usart_read_buffer_wait+0x88>)
    1754:	4293      	cmp	r3, r2
    1756:	d8e2      	bhi.n	171e <usart_read_buffer_wait+0x22>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1758:	7e32      	ldrb	r2, [r6, #24]
    175a:	0752      	lsls	r2, r2, #29
    175c:	d4df      	bmi.n	171e <usart_read_buffer_wait+0x22>
			} else if (i == USART_TIMEOUT) {
    175e:	4a09      	ldr	r2, [pc, #36]	; (1784 <usart_read_buffer_wait+0x88>)
    1760:	4293      	cmp	r3, r2
    1762:	d009      	beq.n	1778 <usart_read_buffer_wait+0x7c>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1764:	3301      	adds	r3, #1
    1766:	e7f4      	b.n	1752 <usart_read_buffer_wait+0x56>
			rx_data[rx_pos++] = (received_data >> 8);
    1768:	3502      	adds	r5, #2
    176a:	aa02      	add	r2, sp, #8
    176c:	3206      	adds	r2, #6
    176e:	8812      	ldrh	r2, [r2, #0]
    1770:	0a12      	lsrs	r2, r2, #8
    1772:	54ca      	strb	r2, [r1, r3]
    1774:	b2ab      	uxth	r3, r5
    1776:	e7e5      	b.n	1744 <usart_read_buffer_wait+0x48>
				return STATUS_ERR_TIMEOUT;
    1778:	2012      	movs	r0, #18
    177a:	e7c6      	b.n	170a <usart_read_buffer_wait+0xe>
	return STATUS_OK;
    177c:	2000      	movs	r0, #0
    177e:	e7c4      	b.n	170a <usart_read_buffer_wait+0xe>
    1780:	000015df 	.word	0x000015df
    1784:	0000ffff 	.word	0x0000ffff

00001788 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    178a:	0006      	movs	r6, r0
    178c:	000c      	movs	r4, r1
    178e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1790:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1792:	4b0a      	ldr	r3, [pc, #40]	; (17bc <_usart_write_buffer+0x34>)
    1794:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1796:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1798:	b29b      	uxth	r3, r3
    179a:	2b00      	cmp	r3, #0
    179c:	d003      	beq.n	17a6 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    179e:	4b08      	ldr	r3, [pc, #32]	; (17c0 <_usart_write_buffer+0x38>)
    17a0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    17a2:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    17a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    17a6:	85f5      	strh	r5, [r6, #46]	; 0x2e
    17a8:	4b05      	ldr	r3, [pc, #20]	; (17c0 <_usart_write_buffer+0x38>)
    17aa:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    17ac:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    17ae:	2205      	movs	r2, #5
    17b0:	2333      	movs	r3, #51	; 0x33
    17b2:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    17b4:	3b32      	subs	r3, #50	; 0x32
    17b6:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    17b8:	2000      	movs	r0, #0
    17ba:	e7f3      	b.n	17a4 <_usart_write_buffer+0x1c>
    17bc:	00002595 	.word	0x00002595
    17c0:	000025d5 	.word	0x000025d5

000017c4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    17c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17c6:	0004      	movs	r4, r0
    17c8:	000d      	movs	r5, r1
    17ca:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17cc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    17ce:	4b10      	ldr	r3, [pc, #64]	; (1810 <_usart_read_buffer+0x4c>)
    17d0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    17d2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    17d4:	b29b      	uxth	r3, r3
    17d6:	2b00      	cmp	r3, #0
    17d8:	d003      	beq.n	17e2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    17da:	4b0e      	ldr	r3, [pc, #56]	; (1814 <_usart_read_buffer+0x50>)
    17dc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    17de:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    17e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    17e2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    17e4:	4b0b      	ldr	r3, [pc, #44]	; (1814 <_usart_read_buffer+0x50>)
    17e6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    17e8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    17ea:	2205      	movs	r2, #5
    17ec:	2332      	movs	r3, #50	; 0x32
    17ee:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    17f0:	3b2e      	subs	r3, #46	; 0x2e
    17f2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    17f4:	7a23      	ldrb	r3, [r4, #8]
    17f6:	2b00      	cmp	r3, #0
    17f8:	d001      	beq.n	17fe <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    17fa:	2320      	movs	r3, #32
    17fc:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    17fe:	7a63      	ldrb	r3, [r4, #9]
    1800:	2b00      	cmp	r3, #0
    1802:	d003      	beq.n	180c <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1804:	2308      	movs	r3, #8
    1806:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    1808:	2000      	movs	r0, #0
    180a:	e7e9      	b.n	17e0 <_usart_read_buffer+0x1c>
    180c:	2000      	movs	r0, #0
    180e:	e7e7      	b.n	17e0 <_usart_read_buffer+0x1c>
    1810:	00002595 	.word	0x00002595
    1814:	000025d5 	.word	0x000025d5

00001818 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1818:	1c93      	adds	r3, r2, #2
    181a:	009b      	lsls	r3, r3, #2
    181c:	18c3      	adds	r3, r0, r3
    181e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1820:	2301      	movs	r3, #1
    1822:	4093      	lsls	r3, r2
    1824:	001a      	movs	r2, r3
    1826:	2130      	movs	r1, #48	; 0x30
    1828:	5c43      	ldrb	r3, [r0, r1]
    182a:	4313      	orrs	r3, r2
    182c:	5443      	strb	r3, [r0, r1]
}
    182e:	4770      	bx	lr

00001830 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1830:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    1832:	2a00      	cmp	r2, #0
    1834:	d101      	bne.n	183a <usart_write_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    1836:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    1838:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    183a:	79c3      	ldrb	r3, [r0, #7]
    183c:	2b00      	cmp	r3, #0
    183e:	d101      	bne.n	1844 <usart_write_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    1840:	201c      	movs	r0, #28
    1842:	e7f9      	b.n	1838 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    1844:	4b01      	ldr	r3, [pc, #4]	; (184c <usart_write_buffer_job+0x1c>)
    1846:	4798      	blx	r3
    1848:	e7f6      	b.n	1838 <usart_write_buffer_job+0x8>
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	00001789 	.word	0x00001789

00001850 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1850:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    1852:	2a00      	cmp	r2, #0
    1854:	d101      	bne.n	185a <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    1856:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1858:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    185a:	7983      	ldrb	r3, [r0, #6]
    185c:	2b00      	cmp	r3, #0
    185e:	d101      	bne.n	1864 <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    1860:	201c      	movs	r0, #28
    1862:	e7f9      	b.n	1858 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1864:	4b01      	ldr	r3, [pc, #4]	; (186c <usart_read_buffer_job+0x1c>)
    1866:	4798      	blx	r3
    1868:	e7f6      	b.n	1858 <usart_read_buffer_job+0x8>
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	000017c5 	.word	0x000017c5

00001870 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1870:	b5f0      	push	{r4, r5, r6, r7, lr}
    1872:	46c6      	mov	lr, r8
    1874:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1876:	0080      	lsls	r0, r0, #2
    1878:	4b64      	ldr	r3, [pc, #400]	; (1a0c <_usart_interrupt_handler+0x19c>)
    187a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    187c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    187e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1880:	2b00      	cmp	r3, #0
    1882:	d1fc      	bne.n	187e <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1884:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1886:	7da6      	ldrb	r6, [r4, #22]
    1888:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    188a:	2330      	movs	r3, #48	; 0x30
    188c:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    188e:	2231      	movs	r2, #49	; 0x31
    1890:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    1892:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1894:	07f3      	lsls	r3, r6, #31
    1896:	d525      	bpl.n	18e4 <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    1898:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    189a:	b29b      	uxth	r3, r3
    189c:	2b00      	cmp	r3, #0
    189e:	d01f      	beq.n	18e0 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18a0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    18a2:	780a      	ldrb	r2, [r1, #0]
    18a4:	b2d2      	uxtb	r2, r2
    18a6:	b293      	uxth	r3, r2
    18a8:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    18aa:	1c48      	adds	r0, r1, #1
    18ac:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18ae:	796b      	ldrb	r3, [r5, #5]
    18b0:	2b01      	cmp	r3, #1
    18b2:	d00e      	beq.n	18d2 <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    18b4:	4643      	mov	r3, r8
    18b6:	05db      	lsls	r3, r3, #23
    18b8:	0ddb      	lsrs	r3, r3, #23
    18ba:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    18bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    18be:	3b01      	subs	r3, #1
    18c0:	b29b      	uxth	r3, r3
    18c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    18c4:	2b00      	cmp	r3, #0
    18c6:	d10d      	bne.n	18e4 <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18c8:	3301      	adds	r3, #1
    18ca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    18cc:	3301      	adds	r3, #1
    18ce:	75a3      	strb	r3, [r4, #22]
    18d0:	e008      	b.n	18e4 <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18d2:	784b      	ldrb	r3, [r1, #1]
    18d4:	021b      	lsls	r3, r3, #8
    18d6:	4313      	orrs	r3, r2
    18d8:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    18da:	1c88      	adds	r0, r1, #2
    18dc:	62a8      	str	r0, [r5, #40]	; 0x28
    18de:	e7e9      	b.n	18b4 <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18e0:	2301      	movs	r3, #1
    18e2:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    18e4:	07b3      	lsls	r3, r6, #30
    18e6:	d506      	bpl.n	18f6 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    18e8:	2302      	movs	r3, #2
    18ea:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    18ec:	2200      	movs	r2, #0
    18ee:	3331      	adds	r3, #49	; 0x31
    18f0:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    18f2:	07fb      	lsls	r3, r7, #31
    18f4:	d41c      	bmi.n	1930 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    18f6:	0773      	lsls	r3, r6, #29
    18f8:	d564      	bpl.n	19c4 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    18fa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    18fc:	b29b      	uxth	r3, r3
    18fe:	2b00      	cmp	r3, #0
    1900:	d05e      	beq.n	19c0 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1902:	8b62      	ldrh	r2, [r4, #26]
    1904:	b2d2      	uxtb	r2, r2
    1906:	233f      	movs	r3, #63	; 0x3f
    1908:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    190a:	0711      	lsls	r1, r2, #28
    190c:	d501      	bpl.n	1912 <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    190e:	2337      	movs	r3, #55	; 0x37
    1910:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1912:	2b00      	cmp	r3, #0
    1914:	d031      	beq.n	197a <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1916:	079a      	lsls	r2, r3, #30
    1918:	d50e      	bpl.n	1938 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    191a:	221a      	movs	r2, #26
    191c:	2332      	movs	r3, #50	; 0x32
    191e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1920:	3b30      	subs	r3, #48	; 0x30
    1922:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1924:	077b      	lsls	r3, r7, #29
    1926:	d54d      	bpl.n	19c4 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1928:	0028      	movs	r0, r5
    192a:	696b      	ldr	r3, [r5, #20]
    192c:	4798      	blx	r3
    192e:	e049      	b.n	19c4 <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1930:	0028      	movs	r0, r5
    1932:	68eb      	ldr	r3, [r5, #12]
    1934:	4798      	blx	r3
    1936:	e7de      	b.n	18f6 <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1938:	075a      	lsls	r2, r3, #29
    193a:	d505      	bpl.n	1948 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    193c:	221e      	movs	r2, #30
    193e:	2332      	movs	r3, #50	; 0x32
    1940:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1942:	3b2e      	subs	r3, #46	; 0x2e
    1944:	8363      	strh	r3, [r4, #26]
    1946:	e7ed      	b.n	1924 <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1948:	07da      	lsls	r2, r3, #31
    194a:	d505      	bpl.n	1958 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    194c:	2213      	movs	r2, #19
    194e:	2332      	movs	r3, #50	; 0x32
    1950:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1952:	3b31      	subs	r3, #49	; 0x31
    1954:	8363      	strh	r3, [r4, #26]
    1956:	e7e5      	b.n	1924 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1958:	06da      	lsls	r2, r3, #27
    195a:	d505      	bpl.n	1968 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    195c:	2242      	movs	r2, #66	; 0x42
    195e:	2332      	movs	r3, #50	; 0x32
    1960:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1962:	3b22      	subs	r3, #34	; 0x22
    1964:	8363      	strh	r3, [r4, #26]
    1966:	e7dd      	b.n	1924 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1968:	2220      	movs	r2, #32
    196a:	421a      	tst	r2, r3
    196c:	d0da      	beq.n	1924 <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    196e:	3221      	adds	r2, #33	; 0x21
    1970:	2332      	movs	r3, #50	; 0x32
    1972:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1974:	3b12      	subs	r3, #18
    1976:	8363      	strh	r3, [r4, #26]
    1978:	e7d4      	b.n	1924 <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    197a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    197c:	05db      	lsls	r3, r3, #23
    197e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1980:	b2da      	uxtb	r2, r3
    1982:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1984:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1986:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1988:	1c51      	adds	r1, r2, #1
    198a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    198c:	7969      	ldrb	r1, [r5, #5]
    198e:	2901      	cmp	r1, #1
    1990:	d010      	beq.n	19b4 <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1992:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1994:	3b01      	subs	r3, #1
    1996:	b29b      	uxth	r3, r3
    1998:	85ab      	strh	r3, [r5, #44]	; 0x2c
    199a:	2b00      	cmp	r3, #0
    199c:	d112      	bne.n	19c4 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    199e:	3304      	adds	r3, #4
    19a0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    19a2:	2200      	movs	r2, #0
    19a4:	332e      	adds	r3, #46	; 0x2e
    19a6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    19a8:	07bb      	lsls	r3, r7, #30
    19aa:	d50b      	bpl.n	19c4 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    19ac:	0028      	movs	r0, r5
    19ae:	692b      	ldr	r3, [r5, #16]
    19b0:	4798      	blx	r3
    19b2:	e007      	b.n	19c4 <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    19b4:	0a1b      	lsrs	r3, r3, #8
    19b6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    19b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    19ba:	3301      	adds	r3, #1
    19bc:	626b      	str	r3, [r5, #36]	; 0x24
    19be:	e7e8      	b.n	1992 <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19c0:	2304      	movs	r3, #4
    19c2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    19c4:	06f3      	lsls	r3, r6, #27
    19c6:	d504      	bpl.n	19d2 <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    19c8:	2310      	movs	r3, #16
    19ca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    19cc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    19ce:	06fb      	lsls	r3, r7, #27
    19d0:	d410      	bmi.n	19f4 <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    19d2:	06b3      	lsls	r3, r6, #26
    19d4:	d504      	bpl.n	19e0 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    19d6:	2320      	movs	r3, #32
    19d8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    19da:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    19dc:	073b      	lsls	r3, r7, #28
    19de:	d40d      	bmi.n	19fc <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    19e0:	0733      	lsls	r3, r6, #28
    19e2:	d504      	bpl.n	19ee <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    19e4:	2308      	movs	r3, #8
    19e6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    19e8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    19ea:	06bb      	lsls	r3, r7, #26
    19ec:	d40a      	bmi.n	1a04 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    19ee:	bc04      	pop	{r2}
    19f0:	4690      	mov	r8, r2
    19f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    19f4:	0028      	movs	r0, r5
    19f6:	69eb      	ldr	r3, [r5, #28]
    19f8:	4798      	blx	r3
    19fa:	e7ea      	b.n	19d2 <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    19fc:	0028      	movs	r0, r5
    19fe:	69ab      	ldr	r3, [r5, #24]
    1a00:	4798      	blx	r3
    1a02:	e7ed      	b.n	19e0 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a04:	6a2b      	ldr	r3, [r5, #32]
    1a06:	0028      	movs	r0, r5
    1a08:	4798      	blx	r3
}
    1a0a:	e7f0      	b.n	19ee <_usart_interrupt_handler+0x17e>
    1a0c:	200003e0 	.word	0x200003e0

00001a10 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1a10:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1a12:	2202      	movs	r2, #2
    1a14:	761a      	strb	r2, [r3, #24]
}
    1a16:	4770      	bx	lr

00001a18 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1a:	b087      	sub	sp, #28
    1a1c:	0007      	movs	r7, r0
    1a1e:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1a20:	6806      	ldr	r6, [r0, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a22:	ab05      	add	r3, sp, #20
    1a24:	2280      	movs	r2, #128	; 0x80
    1a26:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a28:	2200      	movs	r2, #0
    1a2a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a2c:	2101      	movs	r1, #1
    1a2e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1a30:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    1a32:	782b      	ldrb	r3, [r5, #0]
    1a34:	2b00      	cmp	r3, #0
    1a36:	d101      	bne.n	1a3c <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1a38:	ab05      	add	r3, sp, #20
    1a3a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    1a3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1a3e:	9301      	str	r3, [sp, #4]
    1a40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1a42:	9302      	str	r3, [sp, #8]
    1a44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1a46:	9303      	str	r3, [sp, #12]
    1a48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    1a4a:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1a4c:	2400      	movs	r4, #0
    1a4e:	e006      	b.n	1a5e <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1a50:	0021      	movs	r1, r4
    1a52:	0030      	movs	r0, r6
    1a54:	4b3d      	ldr	r3, [pc, #244]	; (1b4c <_spi_set_config+0x134>)
    1a56:	4798      	blx	r3
    1a58:	e008      	b.n	1a6c <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
    1a5a:	3401      	adds	r4, #1
    1a5c:	b2e4      	uxtb	r4, r4
    1a5e:	2c03      	cmp	r4, #3
    1a60:	d80d      	bhi.n	1a7e <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1a62:	00a3      	lsls	r3, r4, #2
    1a64:	aa01      	add	r2, sp, #4
    1a66:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    1a68:	2800      	cmp	r0, #0
    1a6a:	d0f1      	beq.n	1a50 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1a6c:	1c43      	adds	r3, r0, #1
    1a6e:	d0f4      	beq.n	1a5a <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1a70:	a905      	add	r1, sp, #20
    1a72:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1a74:	0c00      	lsrs	r0, r0, #16
    1a76:	b2c0      	uxtb	r0, r0
    1a78:	4b35      	ldr	r3, [pc, #212]	; (1b50 <_spi_set_config+0x138>)
    1a7a:	4798      	blx	r3
    1a7c:	e7ed      	b.n	1a5a <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
    1a7e:	782b      	ldrb	r3, [r5, #0]
    1a80:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
    1a82:	7c2b      	ldrb	r3, [r5, #16]
    1a84:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
    1a86:	7cab      	ldrb	r3, [r5, #18]
    1a88:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1a8a:	7d2b      	ldrb	r3, [r5, #20]
    1a8c:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1a8e:	2200      	movs	r2, #0
    1a90:	466b      	mov	r3, sp
    1a92:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1a94:	782b      	ldrb	r3, [r5, #0]
    1a96:	2b01      	cmp	r3, #1
    1a98:	d014      	beq.n	1ac4 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1a9a:	782b      	ldrb	r3, [r5, #0]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d127      	bne.n	1af0 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1aa0:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    1aa2:	8baa      	ldrh	r2, [r5, #28]
    1aa4:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1aa6:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1aa8:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1aaa:	7fef      	ldrb	r7, [r5, #31]
    1aac:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1aae:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
    1ab0:	4320      	orrs	r0, r4
    1ab2:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    1ab4:	2020      	movs	r0, #32
    1ab6:	5c28      	ldrb	r0, [r5, r0]
    1ab8:	2800      	cmp	r0, #0
    1aba:	d01b      	beq.n	1af4 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1abc:	2140      	movs	r1, #64	; 0x40
    1abe:	4311      	orrs	r1, r2
    1ac0:	b289      	uxth	r1, r1
    1ac2:	e017      	b.n	1af4 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1ac4:	6838      	ldr	r0, [r7, #0]
    1ac6:	4b23      	ldr	r3, [pc, #140]	; (1b54 <_spi_set_config+0x13c>)
    1ac8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1aca:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1acc:	b2c0      	uxtb	r0, r0
    1ace:	4b22      	ldr	r3, [pc, #136]	; (1b58 <_spi_set_config+0x140>)
    1ad0:	4798      	blx	r3
    1ad2:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1ad4:	466b      	mov	r3, sp
    1ad6:	1c9a      	adds	r2, r3, #2
    1ad8:	69a8      	ldr	r0, [r5, #24]
    1ada:	4b20      	ldr	r3, [pc, #128]	; (1b5c <_spi_set_config+0x144>)
    1adc:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    1ade:	2800      	cmp	r0, #0
    1ae0:	d001      	beq.n	1ae6 <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
    1ae2:	2017      	movs	r0, #23
    1ae4:	e030      	b.n	1b48 <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
    1ae6:	466b      	mov	r3, sp
    1ae8:	3302      	adds	r3, #2
    1aea:	781b      	ldrb	r3, [r3, #0]
    1aec:	7333      	strb	r3, [r6, #12]
    1aee:	e7d4      	b.n	1a9a <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
    1af0:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
    1af2:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1af4:	686a      	ldr	r2, [r5, #4]
    1af6:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1af8:	68aa      	ldr	r2, [r5, #8]
    1afa:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1afc:	68ea      	ldr	r2, [r5, #12]
    1afe:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1b00:	7c2a      	ldrb	r2, [r5, #16]
    1b02:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1b04:	7c69      	ldrb	r1, [r5, #17]
    1b06:	2900      	cmp	r1, #0
    1b08:	d103      	bne.n	1b12 <_spi_set_config+0xfa>
    1b0a:	4915      	ldr	r1, [pc, #84]	; (1b60 <_spi_set_config+0x148>)
    1b0c:	7889      	ldrb	r1, [r1, #2]
    1b0e:	0789      	lsls	r1, r1, #30
    1b10:	d501      	bpl.n	1b16 <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1b12:	2180      	movs	r1, #128	; 0x80
    1b14:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    1b16:	7ca9      	ldrb	r1, [r5, #18]
    1b18:	2900      	cmp	r1, #0
    1b1a:	d002      	beq.n	1b22 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1b1c:	2180      	movs	r1, #128	; 0x80
    1b1e:	0289      	lsls	r1, r1, #10
    1b20:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1b22:	7ce9      	ldrb	r1, [r5, #19]
    1b24:	2900      	cmp	r1, #0
    1b26:	d002      	beq.n	1b2e <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1b28:	2180      	movs	r1, #128	; 0x80
    1b2a:	0089      	lsls	r1, r1, #2
    1b2c:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1b2e:	7d29      	ldrb	r1, [r5, #20]
    1b30:	2900      	cmp	r1, #0
    1b32:	d002      	beq.n	1b3a <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1b34:	2180      	movs	r1, #128	; 0x80
    1b36:	0189      	lsls	r1, r1, #6
    1b38:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1b3a:	6831      	ldr	r1, [r6, #0]
    1b3c:	430b      	orrs	r3, r1
    1b3e:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1b40:	6873      	ldr	r3, [r6, #4]
    1b42:	431a      	orrs	r2, r3
    1b44:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
    1b46:	2000      	movs	r0, #0
}
    1b48:	b007      	add	sp, #28
    1b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b4c:	00001169 	.word	0x00001169
    1b50:	00002b89 	.word	0x00002b89
    1b54:	00001265 	.word	0x00001265
    1b58:	00002ac1 	.word	0x00002ac1
    1b5c:	00001057 	.word	0x00001057
    1b60:	41002000 	.word	0x41002000

00001b64 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b66:	b085      	sub	sp, #20
    1b68:	0005      	movs	r5, r0
    1b6a:	000c      	movs	r4, r1
    1b6c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1b6e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1b70:	680b      	ldr	r3, [r1, #0]
    1b72:	079b      	lsls	r3, r3, #30
    1b74:	d502      	bpl.n	1b7c <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1b76:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1b78:	b005      	add	sp, #20
    1b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1b7c:	680b      	ldr	r3, [r1, #0]
    1b7e:	07db      	lsls	r3, r3, #31
    1b80:	d501      	bpl.n	1b86 <spi_init+0x22>
		return STATUS_BUSY;
    1b82:	2005      	movs	r0, #5
    1b84:	e7f8      	b.n	1b78 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1b86:	0008      	movs	r0, r1
    1b88:	4b28      	ldr	r3, [pc, #160]	; (1c2c <spi_init+0xc8>)
    1b8a:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1b8c:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1b8e:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1b90:	2301      	movs	r3, #1
    1b92:	4093      	lsls	r3, r2
    1b94:	4a26      	ldr	r2, [pc, #152]	; (1c30 <spi_init+0xcc>)
    1b96:	6a11      	ldr	r1, [r2, #32]
    1b98:	430b      	orrs	r3, r1
    1b9a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1b9c:	2724      	movs	r7, #36	; 0x24
    1b9e:	5df3      	ldrb	r3, [r6, r7]
    1ba0:	a903      	add	r1, sp, #12
    1ba2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1ba4:	b2c3      	uxtb	r3, r0
    1ba6:	9301      	str	r3, [sp, #4]
    1ba8:	0018      	movs	r0, r3
    1baa:	4b22      	ldr	r3, [pc, #136]	; (1c34 <spi_init+0xd0>)
    1bac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1bae:	9801      	ldr	r0, [sp, #4]
    1bb0:	4b21      	ldr	r3, [pc, #132]	; (1c38 <spi_init+0xd4>)
    1bb2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1bb4:	5df0      	ldrb	r0, [r6, r7]
    1bb6:	2100      	movs	r1, #0
    1bb8:	4b20      	ldr	r3, [pc, #128]	; (1c3c <spi_init+0xd8>)
    1bba:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1bbc:	7833      	ldrb	r3, [r6, #0]
    1bbe:	2b01      	cmp	r3, #1
    1bc0:	d008      	beq.n	1bd4 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
    1bc2:	7833      	ldrb	r3, [r6, #0]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d103      	bne.n	1bd0 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1bc8:	6823      	ldr	r3, [r4, #0]
    1bca:	2208      	movs	r2, #8
    1bcc:	4313      	orrs	r3, r2
    1bce:	6023      	str	r3, [r4, #0]
{
    1bd0:	2300      	movs	r3, #0
    1bd2:	e00b      	b.n	1bec <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1bd4:	6823      	ldr	r3, [r4, #0]
    1bd6:	220c      	movs	r2, #12
    1bd8:	4313      	orrs	r3, r2
    1bda:	6023      	str	r3, [r4, #0]
    1bdc:	e7f1      	b.n	1bc2 <spi_init+0x5e>
		module->callback[i]        = NULL;
    1bde:	1c9a      	adds	r2, r3, #2
    1be0:	0092      	lsls	r2, r2, #2
    1be2:	18aa      	adds	r2, r5, r2
    1be4:	2100      	movs	r1, #0
    1be6:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1be8:	3301      	adds	r3, #1
    1bea:	b2db      	uxtb	r3, r3
    1bec:	2b06      	cmp	r3, #6
    1bee:	d9f6      	bls.n	1bde <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
    1bf0:	2200      	movs	r2, #0
    1bf2:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1bf4:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1bf6:	2300      	movs	r3, #0
    1bf8:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1bfa:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1bfc:	3236      	adds	r2, #54	; 0x36
    1bfe:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
    1c00:	3201      	adds	r2, #1
    1c02:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
    1c04:	3201      	adds	r2, #1
    1c06:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    1c08:	3a35      	subs	r2, #53	; 0x35
    1c0a:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
    1c0c:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1c0e:	6828      	ldr	r0, [r5, #0]
    1c10:	4b06      	ldr	r3, [pc, #24]	; (1c2c <spi_init+0xc8>)
    1c12:	4798      	blx	r3
    1c14:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1c16:	490a      	ldr	r1, [pc, #40]	; (1c40 <spi_init+0xdc>)
    1c18:	4b0a      	ldr	r3, [pc, #40]	; (1c44 <spi_init+0xe0>)
    1c1a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1c1c:	00a4      	lsls	r4, r4, #2
    1c1e:	4b0a      	ldr	r3, [pc, #40]	; (1c48 <spi_init+0xe4>)
    1c20:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
    1c22:	0031      	movs	r1, r6
    1c24:	0028      	movs	r0, r5
    1c26:	4b09      	ldr	r3, [pc, #36]	; (1c4c <spi_init+0xe8>)
    1c28:	4798      	blx	r3
    1c2a:	e7a5      	b.n	1b78 <spi_init+0x14>
    1c2c:	00001265 	.word	0x00001265
    1c30:	40000400 	.word	0x40000400
    1c34:	00002aa5 	.word	0x00002aa5
    1c38:	00002a1d 	.word	0x00002a1d
    1c3c:	0000111d 	.word	0x0000111d
    1c40:	00002325 	.word	0x00002325
    1c44:	000024f1 	.word	0x000024f1
    1c48:	200003e0 	.word	0x200003e0
    1c4c:	00001a19 	.word	0x00001a19

00001c50 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c52:	0004      	movs	r4, r0
    1c54:	000e      	movs	r6, r1
    1c56:	0017      	movs	r7, r2
    1c58:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1c5a:	2338      	movs	r3, #56	; 0x38
    1c5c:	5cc3      	ldrb	r3, [r0, r3]
    1c5e:	2b05      	cmp	r3, #5
    1c60:	d06d      	beq.n	1d3e <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1c62:	2a00      	cmp	r2, #0
    1c64:	d101      	bne.n	1c6a <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1c66:	2217      	movs	r2, #23
    1c68:	e06a      	b.n	1d40 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
    1c6a:	79c3      	ldrb	r3, [r0, #7]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d101      	bne.n	1c74 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
    1c70:	221c      	movs	r2, #28
    1c72:	e065      	b.n	1d40 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1c74:	7943      	ldrb	r3, [r0, #5]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d103      	bne.n	1c82 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1c7a:	6803      	ldr	r3, [r0, #0]
    1c7c:	7e1b      	ldrb	r3, [r3, #24]
    1c7e:	079b      	lsls	r3, r3, #30
    1c80:	d401      	bmi.n	1c86 <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    1c82:	2000      	movs	r0, #0
    1c84:	e037      	b.n	1cf6 <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
    1c86:	4b2f      	ldr	r3, [pc, #188]	; (1d44 <spi_read_buffer_wait+0xf4>)
    1c88:	4798      	blx	r3
    1c8a:	e7fa      	b.n	1c82 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c8c:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1c8e:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
    1c90:	07d2      	lsls	r2, r2, #31
    1c92:	d5fb      	bpl.n	1c8c <spi_read_buffer_wait+0x3c>
    1c94:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1c96:	07d2      	lsls	r2, r2, #31
    1c98:	d534      	bpl.n	1d04 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1c9a:	05ea      	lsls	r2, r5, #23
    1c9c:	0dd2      	lsrs	r2, r2, #23
    1c9e:	629a      	str	r2, [r3, #40]	; 0x28
    1ca0:	e030      	b.n	1d04 <spi_read_buffer_wait+0xb4>
    1ca2:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1ca4:	4a28      	ldr	r2, [pc, #160]	; (1d48 <spi_read_buffer_wait+0xf8>)
    1ca6:	4293      	cmp	r3, r2
    1ca8:	d805      	bhi.n	1cb6 <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1caa:	6822      	ldr	r2, [r4, #0]
    1cac:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1cae:	0752      	lsls	r2, r2, #29
    1cb0:	d401      	bmi.n	1cb6 <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1cb2:	3301      	adds	r3, #1
    1cb4:	e7f6      	b.n	1ca4 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1cb6:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1cb8:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1cba:	0792      	lsls	r2, r2, #30
    1cbc:	d404      	bmi.n	1cc8 <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1cbe:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1cc0:	075b      	lsls	r3, r3, #29
    1cc2:	d422      	bmi.n	1d0a <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
    1cc4:	2212      	movs	r2, #18
    1cc6:	e03b      	b.n	1d40 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
    1cc8:	0020      	movs	r0, r4
    1cca:	4b1e      	ldr	r3, [pc, #120]	; (1d44 <spi_read_buffer_wait+0xf4>)
    1ccc:	4798      	blx	r3
				return STATUS_ABORTED;
    1cce:	2204      	movs	r2, #4
    1cd0:	e036      	b.n	1d40 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1cd2:	2200      	movs	r2, #0
    1cd4:	e026      	b.n	1d24 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1cd6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    1cd8:	05ff      	lsls	r7, r7, #23
    1cda:	0dff      	lsrs	r7, r7, #23
    1cdc:	e001      	b.n	1ce2 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
    1cde:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
    1ce0:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
    1ce2:	2a00      	cmp	r2, #0
    1ce4:	d12c      	bne.n	1d40 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
    1ce6:	1c43      	adds	r3, r0, #1
    1ce8:	b29b      	uxth	r3, r3
    1cea:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1cec:	79a2      	ldrb	r2, [r4, #6]
    1cee:	2a01      	cmp	r2, #1
    1cf0:	d01e      	beq.n	1d30 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
    1cf2:	0018      	movs	r0, r3
    1cf4:	000f      	movs	r7, r1
	while (length--) {
    1cf6:	1e79      	subs	r1, r7, #1
    1cf8:	b289      	uxth	r1, r1
    1cfa:	2f00      	cmp	r7, #0
    1cfc:	d01d      	beq.n	1d3a <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
    1cfe:	7963      	ldrb	r3, [r4, #5]
    1d00:	2b01      	cmp	r3, #1
    1d02:	d0c3      	beq.n	1c8c <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
    1d04:	7963      	ldrb	r3, [r4, #5]
    1d06:	2b00      	cmp	r3, #0
    1d08:	d0cb      	beq.n	1ca2 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1d0a:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1d0c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    1d0e:	0752      	lsls	r2, r2, #29
    1d10:	d5fb      	bpl.n	1d0a <spi_read_buffer_wait+0xba>
    1d12:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1d14:	0752      	lsls	r2, r2, #29
    1d16:	d5e2      	bpl.n	1cde <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1d18:	8b5a      	ldrh	r2, [r3, #26]
    1d1a:	0752      	lsls	r2, r2, #29
    1d1c:	d5d9      	bpl.n	1cd2 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d1e:	2204      	movs	r2, #4
    1d20:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1d22:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d24:	79a7      	ldrb	r7, [r4, #6]
    1d26:	2f01      	cmp	r7, #1
    1d28:	d0d5      	beq.n	1cd6 <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1d2a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    1d2c:	b2ff      	uxtb	r7, r7
    1d2e:	e7d8      	b.n	1ce2 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    1d30:	3002      	adds	r0, #2
    1d32:	0a3f      	lsrs	r7, r7, #8
    1d34:	54f7      	strb	r7, [r6, r3]
    1d36:	b283      	uxth	r3, r0
    1d38:	e7db      	b.n	1cf2 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
    1d3a:	2200      	movs	r2, #0
    1d3c:	e000      	b.n	1d40 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
    1d3e:	2205      	movs	r2, #5
}
    1d40:	0010      	movs	r0, r2
    1d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d44:	00001a11 	.word	0x00001a11
    1d48:	00002710 	.word	0x00002710

00001d4c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1d4c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1d4e:	7943      	ldrb	r3, [r0, #5]
    1d50:	2b01      	cmp	r3, #1
    1d52:	d001      	beq.n	1d58 <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
    1d54:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1d56:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1d58:	7a03      	ldrb	r3, [r0, #8]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d16c      	bne.n	1e38 <spi_select_slave+0xec>
		if (select) {
    1d5e:	2a00      	cmp	r2, #0
    1d60:	d058      	beq.n	1e14 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
    1d62:	784b      	ldrb	r3, [r1, #1]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d043      	beq.n	1df0 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1d68:	6803      	ldr	r3, [r0, #0]
    1d6a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1d6c:	07db      	lsls	r3, r3, #31
    1d6e:	d411      	bmi.n	1d94 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
    1d70:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d72:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1d74:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    1d76:	2900      	cmp	r1, #0
    1d78:	d10a      	bne.n	1d90 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
    1d7a:	01db      	lsls	r3, r3, #7
    1d7c:	4931      	ldr	r1, [pc, #196]	; (1e44 <spi_select_slave+0xf8>)
    1d7e:	468c      	mov	ip, r1
    1d80:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d82:	211f      	movs	r1, #31
    1d84:	4011      	ands	r1, r2
    1d86:	2201      	movs	r2, #1
    1d88:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1d8a:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1d8c:	2005      	movs	r0, #5
    1d8e:	e7e2      	b.n	1d56 <spi_select_slave+0xa>
		return NULL;
    1d90:	2300      	movs	r3, #0
    1d92:	e7f6      	b.n	1d82 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
    1d94:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d96:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1d98:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    1d9a:	2c00      	cmp	r4, #0
    1d9c:	d104      	bne.n	1da8 <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
    1d9e:	01db      	lsls	r3, r3, #7
    1da0:	4c28      	ldr	r4, [pc, #160]	; (1e44 <spi_select_slave+0xf8>)
    1da2:	46a4      	mov	ip, r4
    1da4:	4463      	add	r3, ip
    1da6:	e000      	b.n	1daa <spi_select_slave+0x5e>
		return NULL;
    1da8:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1daa:	241f      	movs	r4, #31
    1dac:	4014      	ands	r4, r2
    1dae:	2201      	movs	r2, #1
    1db0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    1db2:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
    1db4:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1db6:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1db8:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1dba:	07c9      	lsls	r1, r1, #31
    1dbc:	d500      	bpl.n	1dc0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1dbe:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1dc0:	79c3      	ldrb	r3, [r0, #7]
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d13a      	bne.n	1e3c <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1dc6:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1dc8:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
    1dca:	0752      	lsls	r2, r2, #29
    1dcc:	d5fb      	bpl.n	1dc6 <spi_select_slave+0x7a>
    1dce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1dd0:	0752      	lsls	r2, r2, #29
    1dd2:	d535      	bpl.n	1e40 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1dd4:	8b5a      	ldrh	r2, [r3, #26]
    1dd6:	0752      	lsls	r2, r2, #29
    1dd8:	d501      	bpl.n	1dde <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1dda:	2204      	movs	r2, #4
    1ddc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1dde:	7982      	ldrb	r2, [r0, #6]
    1de0:	2a01      	cmp	r2, #1
    1de2:	d002      	beq.n	1dea <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
    1de6:	2000      	movs	r0, #0
    1de8:	e7b5      	b.n	1d56 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1dec:	2000      	movs	r0, #0
    1dee:	e7b2      	b.n	1d56 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1df0:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1df2:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1df4:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    1df6:	2900      	cmp	r1, #0
    1df8:	d10a      	bne.n	1e10 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
    1dfa:	01db      	lsls	r3, r3, #7
    1dfc:	4911      	ldr	r1, [pc, #68]	; (1e44 <spi_select_slave+0xf8>)
    1dfe:	468c      	mov	ip, r1
    1e00:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1e02:	211f      	movs	r1, #31
    1e04:	4011      	ands	r1, r2
    1e06:	2201      	movs	r2, #1
    1e08:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1e0a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1e0c:	2000      	movs	r0, #0
    1e0e:	e7a2      	b.n	1d56 <spi_select_slave+0xa>
		return NULL;
    1e10:	2300      	movs	r3, #0
    1e12:	e7f6      	b.n	1e02 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
    1e14:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1e16:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    1e18:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    1e1a:	2900      	cmp	r1, #0
    1e1c:	d10a      	bne.n	1e34 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
    1e1e:	01db      	lsls	r3, r3, #7
    1e20:	4908      	ldr	r1, [pc, #32]	; (1e44 <spi_select_slave+0xf8>)
    1e22:	468c      	mov	ip, r1
    1e24:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1e26:	211f      	movs	r1, #31
    1e28:	4011      	ands	r1, r2
    1e2a:	2201      	movs	r2, #1
    1e2c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1e2e:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1e30:	2000      	movs	r0, #0
    1e32:	e790      	b.n	1d56 <spi_select_slave+0xa>
		return NULL;
    1e34:	2300      	movs	r3, #0
    1e36:	e7f6      	b.n	1e26 <spi_select_slave+0xda>
    1e38:	2000      	movs	r0, #0
    1e3a:	e78c      	b.n	1d56 <spi_select_slave+0xa>
    1e3c:	2000      	movs	r0, #0
    1e3e:	e78a      	b.n	1d56 <spi_select_slave+0xa>
    1e40:	2000      	movs	r0, #0
    1e42:	e788      	b.n	1d56 <spi_select_slave+0xa>
    1e44:	41004400 	.word	0x41004400

00001e48 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e4a:	46d6      	mov	lr, sl
    1e4c:	464f      	mov	r7, r9
    1e4e:	4646      	mov	r6, r8
    1e50:	b5c0      	push	{r6, r7, lr}
    1e52:	b082      	sub	sp, #8
    1e54:	0004      	movs	r4, r0
    1e56:	468a      	mov	sl, r1
    1e58:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1e5a:	2338      	movs	r3, #56	; 0x38
    1e5c:	5cc3      	ldrb	r3, [r0, r3]
    1e5e:	2b05      	cmp	r3, #5
    1e60:	d100      	bne.n	1e64 <spi_write_buffer_wait+0x1c>
    1e62:	e0d8      	b.n	2016 <STACK_SIZE+0x16>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    1e64:	2a00      	cmp	r2, #0
    1e66:	d101      	bne.n	1e6c <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
    1e68:	2017      	movs	r0, #23
    1e6a:	e0d5      	b.n	2018 <STACK_SIZE+0x18>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1e6c:	7943      	ldrb	r3, [r0, #5]
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d103      	bne.n	1e7a <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1e72:	6803      	ldr	r3, [r0, #0]
    1e74:	7e1b      	ldrb	r3, [r3, #24]
    1e76:	079b      	lsls	r3, r3, #30
    1e78:	d402      	bmi.n	1e80 <spi_write_buffer_wait+0x38>
    1e7a:	46bc      	mov	ip, r7
    1e7c:	2600      	movs	r6, #0
    1e7e:	e025      	b.n	1ecc <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    1e80:	4b6a      	ldr	r3, [pc, #424]	; (202c <STACK_SIZE+0x2c>)
    1e82:	4798      	blx	r3
    1e84:	e7f9      	b.n	1e7a <spi_write_buffer_wait+0x32>
    1e86:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1e88:	4a69      	ldr	r2, [pc, #420]	; (2030 <STACK_SIZE+0x30>)
    1e8a:	4293      	cmp	r3, r2
    1e8c:	d805      	bhi.n	1e9a <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1e8e:	6822      	ldr	r2, [r4, #0]
    1e90:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1e92:	07d2      	lsls	r2, r2, #31
    1e94:	d401      	bmi.n	1e9a <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1e96:	3301      	adds	r3, #1
    1e98:	e7f6      	b.n	1e88 <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e9a:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1e9c:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1e9e:	0792      	lsls	r2, r2, #30
    1ea0:	d404      	bmi.n	1eac <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1ea2:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
    1ea4:	07db      	lsls	r3, r3, #31
    1ea6:	d418      	bmi.n	1eda <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1ea8:	2012      	movs	r0, #18
    1eaa:	e0b5      	b.n	2018 <STACK_SIZE+0x18>
				_spi_clear_tx_complete_flag(module);
    1eac:	0020      	movs	r0, r4
    1eae:	4b5f      	ldr	r3, [pc, #380]	; (202c <STACK_SIZE+0x2c>)
    1eb0:	4798      	blx	r3
				return STATUS_ABORTED;
    1eb2:	2004      	movs	r0, #4
    1eb4:	e0b0      	b.n	2018 <STACK_SIZE+0x18>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    1eb6:	3602      	adds	r6, #2
    1eb8:	b2b6      	uxth	r6, r6
    1eba:	4652      	mov	r2, sl
    1ebc:	5dd2      	ldrb	r2, [r2, r7]
    1ebe:	0212      	lsls	r2, r2, #8
    1ec0:	4302      	orrs	r2, r0
    1ec2:	e017      	b.n	1ef4 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    1ec4:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
    1ec6:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d11a      	bne.n	1f02 <spi_write_buffer_wait+0xba>
	while (length--) {
    1ecc:	1e79      	subs	r1, r7, #1
    1ece:	b289      	uxth	r1, r1
    1ed0:	2f00      	cmp	r7, #0
    1ed2:	d06c      	beq.n	1fae <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
    1ed4:	7963      	ldrb	r3, [r4, #5]
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d0d5      	beq.n	1e86 <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1eda:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1edc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    1ede:	07d2      	lsls	r2, r2, #31
    1ee0:	d5fb      	bpl.n	1eda <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
    1ee2:	1c77      	adds	r7, r6, #1
    1ee4:	b2bf      	uxth	r7, r7
    1ee6:	4652      	mov	r2, sl
    1ee8:	5d90      	ldrb	r0, [r2, r6]
    1eea:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1eec:	79a5      	ldrb	r5, [r4, #6]
    1eee:	2d01      	cmp	r5, #1
    1ef0:	d0e1      	beq.n	1eb6 <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
    1ef2:	003e      	movs	r6, r7
    1ef4:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1ef6:	07f8      	lsls	r0, r7, #31
    1ef8:	d5e4      	bpl.n	1ec4 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1efa:	05d2      	lsls	r2, r2, #23
    1efc:	0dd2      	lsrs	r2, r2, #23
    1efe:	629a      	str	r2, [r3, #40]	; 0x28
    1f00:	e7e0      	b.n	1ec4 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    1f02:	7963      	ldrb	r3, [r4, #5]
    1f04:	2b00      	cmp	r3, #0
    1f06:	d040      	beq.n	1f8a <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f08:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1f0a:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1f0c:	0752      	lsls	r2, r2, #29
    1f0e:	d5fb      	bpl.n	1f08 <spi_write_buffer_wait+0xc0>
    1f10:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1f12:	0752      	lsls	r2, r2, #29
    1f14:	d508      	bpl.n	1f28 <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1f16:	8b5a      	ldrh	r2, [r3, #26]
    1f18:	0752      	lsls	r2, r2, #29
    1f1a:	d501      	bpl.n	1f20 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1f1c:	2204      	movs	r2, #4
    1f1e:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1f20:	79a2      	ldrb	r2, [r4, #6]
    1f22:	2a01      	cmp	r2, #1
    1f24:	d041      	beq.n	1faa <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
    1f28:	4660      	mov	r0, ip
    1f2a:	3801      	subs	r0, #1
    1f2c:	b283      	uxth	r3, r0
    1f2e:	469c      	mov	ip, r3
    1f30:	000f      	movs	r7, r1
    1f32:	e7cb      	b.n	1ecc <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1f34:	3602      	adds	r6, #2
    1f36:	4655      	mov	r5, sl
    1f38:	5c2f      	ldrb	r7, [r5, r0]
    1f3a:	023f      	lsls	r7, r7, #8
    1f3c:	4640      	mov	r0, r8
    1f3e:	4307      	orrs	r7, r0
    1f40:	b2b0      	uxth	r0, r6
    1f42:	e01b      	b.n	1f7c <spi_write_buffer_wait+0x134>
						length--;
    1f44:	3901      	subs	r1, #1
    1f46:	b289      	uxth	r1, r1
    1f48:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1f4a:	6822      	ldr	r2, [r4, #0]
    1f4c:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    1f4e:	0752      	lsls	r2, r2, #29
    1f50:	d41d      	bmi.n	1f8e <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1f52:	3301      	adds	r3, #1
    1f54:	4a36      	ldr	r2, [pc, #216]	; (2030 <STACK_SIZE+0x30>)
    1f56:	4293      	cmp	r3, r2
    1f58:	d819      	bhi.n	1f8e <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
    1f5a:	2900      	cmp	r1, #0
    1f5c:	d0f5      	beq.n	1f4a <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f5e:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1f60:	7e17      	ldrb	r7, [r2, #24]
    1f62:	07f8      	lsls	r0, r7, #31
    1f64:	d5f1      	bpl.n	1f4a <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
    1f66:	1c70      	adds	r0, r6, #1
    1f68:	b280      	uxth	r0, r0
    1f6a:	4655      	mov	r5, sl
    1f6c:	5dad      	ldrb	r5, [r5, r6]
    1f6e:	46a8      	mov	r8, r5
    1f70:	466f      	mov	r7, sp
    1f72:	80fd      	strh	r5, [r7, #6]
    1f74:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1f76:	79a5      	ldrb	r5, [r4, #6]
    1f78:	2d01      	cmp	r5, #1
    1f7a:	d0db      	beq.n	1f34 <spi_write_buffer_wait+0xec>
    1f7c:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1f7e:	07f5      	lsls	r5, r6, #31
    1f80:	d5e0      	bpl.n	1f44 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1f82:	05ff      	lsls	r7, r7, #23
    1f84:	0dff      	lsrs	r7, r7, #23
    1f86:	6297      	str	r7, [r2, #40]	; 0x28
    1f88:	e7dc      	b.n	1f44 <spi_write_buffer_wait+0xfc>
    1f8a:	2300      	movs	r3, #0
    1f8c:	e7e2      	b.n	1f54 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f8e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1f90:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
    1f92:	0792      	lsls	r2, r2, #30
    1f94:	d404      	bmi.n	1fa0 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1f96:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1f98:	075b      	lsls	r3, r3, #29
    1f9a:	d4b5      	bmi.n	1f08 <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
    1f9c:	2012      	movs	r0, #18
    1f9e:	e03b      	b.n	2018 <STACK_SIZE+0x18>
					_spi_clear_tx_complete_flag(module);
    1fa0:	0020      	movs	r0, r4
    1fa2:	4b22      	ldr	r3, [pc, #136]	; (202c <STACK_SIZE+0x2c>)
    1fa4:	4798      	blx	r3
					return STATUS_ABORTED;
    1fa6:	2004      	movs	r0, #4
    1fa8:	e036      	b.n	2018 <STACK_SIZE+0x18>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fac:	e7bc      	b.n	1f28 <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1fae:	7962      	ldrb	r2, [r4, #5]
    1fb0:	2a01      	cmp	r2, #1
    1fb2:	d006      	beq.n	1fc2 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1fb4:	2a00      	cmp	r2, #0
    1fb6:	d135      	bne.n	2024 <STACK_SIZE+0x24>
		if (module->receiver_enabled) {
    1fb8:	79e3      	ldrb	r3, [r4, #7]
    1fba:	2b00      	cmp	r3, #0
    1fbc:	d11a      	bne.n	1ff4 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1fbe:	2000      	movs	r0, #0
    1fc0:	e02a      	b.n	2018 <STACK_SIZE+0x18>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1fc2:	6823      	ldr	r3, [r4, #0]
    1fc4:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    1fc6:	079b      	lsls	r3, r3, #30
    1fc8:	d5fb      	bpl.n	1fc2 <spi_write_buffer_wait+0x17a>
    1fca:	e7f3      	b.n	1fb4 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1fcc:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1fce:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1fd0:	0752      	lsls	r2, r2, #29
    1fd2:	d529      	bpl.n	2028 <STACK_SIZE+0x28>
    1fd4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1fd6:	0752      	lsls	r2, r2, #29
    1fd8:	d508      	bpl.n	1fec <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1fda:	8b5a      	ldrh	r2, [r3, #26]
    1fdc:	0752      	lsls	r2, r2, #29
    1fde:	d501      	bpl.n	1fe4 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1fe0:	2204      	movs	r2, #4
    1fe2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1fe4:	79a2      	ldrb	r2, [r4, #6]
    1fe6:	2a01      	cmp	r2, #1
    1fe8:	d011      	beq.n	200e <STACK_SIZE+0xe>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    1fec:	4660      	mov	r0, ip
    1fee:	3801      	subs	r0, #1
    1ff0:	b283      	uxth	r3, r0
    1ff2:	469c      	mov	ip, r3
			while (flush_length) {
    1ff4:	4663      	mov	r3, ip
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d00b      	beq.n	2012 <STACK_SIZE+0x12>
    1ffa:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1ffc:	4a0c      	ldr	r2, [pc, #48]	; (2030 <STACK_SIZE+0x30>)
    1ffe:	4293      	cmp	r3, r2
    2000:	d8e4      	bhi.n	1fcc <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2002:	6822      	ldr	r2, [r4, #0]
    2004:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    2006:	0752      	lsls	r2, r2, #29
    2008:	d4e0      	bmi.n	1fcc <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    200a:	3301      	adds	r3, #1
    200c:	e7f6      	b.n	1ffc <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2010:	e7ec      	b.n	1fec <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    2012:	2000      	movs	r0, #0
    2014:	e000      	b.n	2018 <STACK_SIZE+0x18>
		return STATUS_BUSY;
    2016:	2005      	movs	r0, #5
}
    2018:	b002      	add	sp, #8
    201a:	bc1c      	pop	{r2, r3, r4}
    201c:	4690      	mov	r8, r2
    201e:	4699      	mov	r9, r3
    2020:	46a2      	mov	sl, r4
    2022:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    2024:	2000      	movs	r0, #0
    2026:	e7f7      	b.n	2018 <STACK_SIZE+0x18>
					return STATUS_ERR_TIMEOUT;
    2028:	2012      	movs	r0, #18
    202a:	e7f5      	b.n	2018 <STACK_SIZE+0x18>
    202c:	00001a11 	.word	0x00001a11
    2030:	00002710 	.word	0x00002710

00002034 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    2034:	b5f0      	push	{r4, r5, r6, r7, lr}
    2036:	46de      	mov	lr, fp
    2038:	4657      	mov	r7, sl
    203a:	464e      	mov	r6, r9
    203c:	4645      	mov	r5, r8
    203e:	b5e0      	push	{r5, r6, r7, lr}
    2040:	b085      	sub	sp, #20
    2042:	0004      	movs	r4, r0
    2044:	9101      	str	r1, [sp, #4]
    2046:	9203      	str	r2, [sp, #12]
    2048:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    204a:	2338      	movs	r3, #56	; 0x38
    204c:	5cc3      	ldrb	r3, [r0, r3]
    204e:	2b05      	cmp	r3, #5
    2050:	d100      	bne.n	2054 <spi_transceive_buffer_wait+0x20>
    2052:	e112      	b.n	227a <spi_transceive_buffer_wait+0x246>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    2054:	2e00      	cmp	r6, #0
    2056:	d101      	bne.n	205c <spi_transceive_buffer_wait+0x28>
		return STATUS_ERR_INVALID_ARG;
    2058:	2217      	movs	r2, #23
    205a:	e10f      	b.n	227c <spi_transceive_buffer_wait+0x248>
	}

	if (!(module->receiver_enabled)) {
    205c:	79c3      	ldrb	r3, [r0, #7]
    205e:	2b00      	cmp	r3, #0
    2060:	d101      	bne.n	2066 <spi_transceive_buffer_wait+0x32>
		return STATUS_ERR_DENIED;
    2062:	221c      	movs	r2, #28
    2064:	e10a      	b.n	227c <spi_transceive_buffer_wait+0x248>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    2066:	7943      	ldrb	r3, [r0, #5]
    2068:	2b00      	cmp	r3, #0
    206a:	d103      	bne.n	2074 <spi_transceive_buffer_wait+0x40>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    206c:	6803      	ldr	r3, [r0, #0]
    206e:	7e1b      	ldrb	r3, [r3, #24]
    2070:	079b      	lsls	r3, r3, #30
    2072:	d404      	bmi.n	207e <spi_transceive_buffer_wait+0x4a>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    2074:	46b4      	mov	ip, r6
    2076:	2300      	movs	r3, #0
    2078:	4698      	mov	r8, r3
    207a:	2100      	movs	r1, #0
    207c:	e075      	b.n	216a <spi_transceive_buffer_wait+0x136>
		_spi_clear_tx_complete_flag(module);
    207e:	4b84      	ldr	r3, [pc, #528]	; (2290 <spi_transceive_buffer_wait+0x25c>)
    2080:	4798      	blx	r3
    2082:	e7f7      	b.n	2074 <spi_transceive_buffer_wait+0x40>
    2084:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2086:	4a83      	ldr	r2, [pc, #524]	; (2294 <spi_transceive_buffer_wait+0x260>)
    2088:	4293      	cmp	r3, r2
    208a:	d805      	bhi.n	2098 <spi_transceive_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    208c:	6822      	ldr	r2, [r4, #0]
    208e:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    2090:	07d2      	lsls	r2, r2, #31
    2092:	d401      	bmi.n	2098 <spi_transceive_buffer_wait+0x64>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2094:	3301      	adds	r3, #1
    2096:	e7f6      	b.n	2086 <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2098:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    209a:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    209c:	0792      	lsls	r2, r2, #30
    209e:	d404      	bmi.n	20aa <spi_transceive_buffer_wait+0x76>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    20a0:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    20a2:	07db      	lsls	r3, r3, #31
    20a4:	d468      	bmi.n	2178 <spi_transceive_buffer_wait+0x144>
				return STATUS_ERR_TIMEOUT;
    20a6:	2212      	movs	r2, #18
    20a8:	e0e8      	b.n	227c <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    20aa:	0020      	movs	r0, r4
    20ac:	4b78      	ldr	r3, [pc, #480]	; (2290 <spi_transceive_buffer_wait+0x25c>)
    20ae:	4798      	blx	r3
				return STATUS_ABORTED;
    20b0:	2204      	movs	r2, #4
    20b2:	e0e3      	b.n	227c <spi_transceive_buffer_wait+0x248>
			data_to_send |= (tx_data[tx_pos++] << 8);
    20b4:	3102      	adds	r1, #2
    20b6:	9a01      	ldr	r2, [sp, #4]
    20b8:	5d92      	ldrb	r2, [r2, r6]
    20ba:	0212      	lsls	r2, r2, #8
    20bc:	4650      	mov	r0, sl
    20be:	4302      	orrs	r2, r0
    20c0:	b28e      	uxth	r6, r1
    20c2:	e068      	b.n	2196 <spi_transceive_buffer_wait+0x162>
						data_to_send |= (tx_data[tx_pos++] << 8);
    20c4:	3602      	adds	r6, #2
    20c6:	9901      	ldr	r1, [sp, #4]
    20c8:	5c09      	ldrb	r1, [r1, r0]
    20ca:	0209      	lsls	r1, r1, #8
    20cc:	4650      	mov	r0, sl
    20ce:	4301      	orrs	r1, r0
    20d0:	4689      	mov	r9, r1
    20d2:	b2b0      	uxth	r0, r6
    20d4:	e01a      	b.n	210c <spi_transceive_buffer_wait+0xd8>
					length--;
    20d6:	3f01      	subs	r7, #1
    20d8:	b2bf      	uxth	r7, r7
    20da:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    20dc:	6822      	ldr	r2, [r4, #0]
    20de:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    20e0:	0752      	lsls	r2, r2, #29
    20e2:	d41d      	bmi.n	2120 <spi_transceive_buffer_wait+0xec>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    20e4:	3301      	adds	r3, #1
    20e6:	4a6b      	ldr	r2, [pc, #428]	; (2294 <spi_transceive_buffer_wait+0x260>)
    20e8:	4293      	cmp	r3, r2
    20ea:	d819      	bhi.n	2120 <spi_transceive_buffer_wait+0xec>
	SercomSpi *const spi_module = &(module->hw->SPI);
    20ec:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    20ee:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    20f0:	07c9      	lsls	r1, r1, #31
    20f2:	d5f3      	bpl.n	20dc <spi_transceive_buffer_wait+0xa8>
					data_to_send = tx_data[tx_pos++];
    20f4:	1c70      	adds	r0, r6, #1
    20f6:	b280      	uxth	r0, r0
    20f8:	9901      	ldr	r1, [sp, #4]
    20fa:	5d89      	ldrb	r1, [r1, r6]
    20fc:	468a      	mov	sl, r1
    20fe:	ad02      	add	r5, sp, #8
    2100:	8069      	strh	r1, [r5, #2]
    2102:	8869      	ldrh	r1, [r5, #2]
    2104:	4689      	mov	r9, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2106:	79a1      	ldrb	r1, [r4, #6]
    2108:	2901      	cmp	r1, #1
    210a:	d0db      	beq.n	20c4 <spi_transceive_buffer_wait+0x90>
    210c:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    210e:	07f1      	lsls	r1, r6, #31
    2110:	d5e1      	bpl.n	20d6 <spi_transceive_buffer_wait+0xa2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2112:	4649      	mov	r1, r9
    2114:	05c9      	lsls	r1, r1, #23
    2116:	0dc9      	lsrs	r1, r1, #23
    2118:	6291      	str	r1, [r2, #40]	; 0x28
    211a:	e7dc      	b.n	20d6 <spi_transceive_buffer_wait+0xa2>
    211c:	2300      	movs	r3, #0
    211e:	e7e2      	b.n	20e6 <spi_transceive_buffer_wait+0xb2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2120:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2122:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    2124:	0792      	lsls	r2, r2, #30
    2126:	d404      	bmi.n	2132 <spi_transceive_buffer_wait+0xfe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2128:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    212a:	075b      	lsls	r3, r3, #29
    212c:	d43c      	bmi.n	21a8 <spi_transceive_buffer_wait+0x174>
				return STATUS_ERR_TIMEOUT;
    212e:	2212      	movs	r2, #18
    2130:	e0a4      	b.n	227c <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    2132:	0020      	movs	r0, r4
    2134:	4b56      	ldr	r3, [pc, #344]	; (2290 <spi_transceive_buffer_wait+0x25c>)
    2136:	4798      	blx	r3
				return STATUS_ABORTED;
    2138:	2204      	movs	r2, #4
    213a:	e09f      	b.n	227c <spi_transceive_buffer_wait+0x248>
	enum status_code retval = STATUS_OK;
    213c:	2200      	movs	r2, #0
    213e:	e044      	b.n	21ca <spi_transceive_buffer_wait+0x196>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2140:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2142:	05c9      	lsls	r1, r1, #23
    2144:	0dc9      	lsrs	r1, r1, #23
    2146:	e001      	b.n	214c <spi_transceive_buffer_wait+0x118>
		uint16_t received_data = 0;
    2148:	2100      	movs	r1, #0
		return STATUS_ERR_IO;
    214a:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
    214c:	2a00      	cmp	r2, #0
    214e:	d000      	beq.n	2152 <spi_transceive_buffer_wait+0x11e>
    2150:	e094      	b.n	227c <spi_transceive_buffer_wait+0x248>
		rx_data[rx_pos++] = received_data;
    2152:	4643      	mov	r3, r8
    2154:	3301      	adds	r3, #1
    2156:	b29b      	uxth	r3, r3
    2158:	9a03      	ldr	r2, [sp, #12]
    215a:	4640      	mov	r0, r8
    215c:	5411      	strb	r1, [r2, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    215e:	79a2      	ldrb	r2, [r4, #6]
    2160:	2a01      	cmp	r2, #1
    2162:	d038      	beq.n	21d6 <spi_transceive_buffer_wait+0x1a2>
			rx_data[rx_pos++] = (received_data >> 8);
    2164:	4698      	mov	r8, r3
    2166:	0031      	movs	r1, r6
    2168:	003e      	movs	r6, r7
	while (length--) {
    216a:	1e77      	subs	r7, r6, #1
    216c:	b2bf      	uxth	r7, r7
    216e:	2e00      	cmp	r6, #0
    2170:	d037      	beq.n	21e2 <spi_transceive_buffer_wait+0x1ae>
		if (module->mode == SPI_MODE_SLAVE) {
    2172:	7963      	ldrb	r3, [r4, #5]
    2174:	2b00      	cmp	r3, #0
    2176:	d085      	beq.n	2084 <spi_transceive_buffer_wait+0x50>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2178:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    217a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    217c:	07d2      	lsls	r2, r2, #31
    217e:	d5fb      	bpl.n	2178 <spi_transceive_buffer_wait+0x144>
		uint16_t data_to_send = tx_data[tx_pos++];
    2180:	1c4e      	adds	r6, r1, #1
    2182:	b2b6      	uxth	r6, r6
    2184:	9a01      	ldr	r2, [sp, #4]
    2186:	5c52      	ldrb	r2, [r2, r1]
    2188:	4692      	mov	sl, r2
    218a:	a802      	add	r0, sp, #8
    218c:	8042      	strh	r2, [r0, #2]
    218e:	8842      	ldrh	r2, [r0, #2]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2190:	79a0      	ldrb	r0, [r4, #6]
    2192:	2801      	cmp	r0, #1
    2194:	d08e      	beq.n	20b4 <spi_transceive_buffer_wait+0x80>
    2196:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2198:	07c9      	lsls	r1, r1, #31
    219a:	d502      	bpl.n	21a2 <spi_transceive_buffer_wait+0x16e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    219c:	05d2      	lsls	r2, r2, #23
    219e:	0dd2      	lsrs	r2, r2, #23
    21a0:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    21a2:	7963      	ldrb	r3, [r4, #5]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d0b9      	beq.n	211c <spi_transceive_buffer_wait+0xe8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    21a8:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    21aa:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    21ac:	0752      	lsls	r2, r2, #29
    21ae:	d5fb      	bpl.n	21a8 <spi_transceive_buffer_wait+0x174>
		rx_length--;
    21b0:	4662      	mov	r2, ip
    21b2:	3a01      	subs	r2, #1
    21b4:	b292      	uxth	r2, r2
    21b6:	4694      	mov	ip, r2
    21b8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    21ba:	0752      	lsls	r2, r2, #29
    21bc:	d5c4      	bpl.n	2148 <spi_transceive_buffer_wait+0x114>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    21be:	8b5a      	ldrh	r2, [r3, #26]
    21c0:	0752      	lsls	r2, r2, #29
    21c2:	d5bb      	bpl.n	213c <spi_transceive_buffer_wait+0x108>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    21c4:	2204      	movs	r2, #4
    21c6:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    21c8:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    21ca:	79a1      	ldrb	r1, [r4, #6]
    21cc:	2901      	cmp	r1, #1
    21ce:	d0b7      	beq.n	2140 <spi_transceive_buffer_wait+0x10c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    21d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    21d2:	b2c9      	uxtb	r1, r1
    21d4:	e7ba      	b.n	214c <spi_transceive_buffer_wait+0x118>
			rx_data[rx_pos++] = (received_data >> 8);
    21d6:	3002      	adds	r0, #2
    21d8:	0a09      	lsrs	r1, r1, #8
    21da:	9a03      	ldr	r2, [sp, #12]
    21dc:	54d1      	strb	r1, [r2, r3]
    21de:	b283      	uxth	r3, r0
    21e0:	e7c0      	b.n	2164 <spi_transceive_buffer_wait+0x130>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    21e2:	7962      	ldrb	r2, [r4, #5]
    21e4:	2a01      	cmp	r2, #1
    21e6:	d003      	beq.n	21f0 <spi_transceive_buffer_wait+0x1bc>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    21e8:	2a00      	cmp	r2, #0
    21ea:	d039      	beq.n	2260 <spi_transceive_buffer_wait+0x22c>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    21ec:	2200      	movs	r2, #0
    21ee:	e045      	b.n	227c <spi_transceive_buffer_wait+0x248>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    21f0:	6823      	ldr	r3, [r4, #0]
    21f2:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    21f4:	079b      	lsls	r3, r3, #30
    21f6:	d5fb      	bpl.n	21f0 <spi_transceive_buffer_wait+0x1bc>
    21f8:	e7f6      	b.n	21e8 <spi_transceive_buffer_wait+0x1b4>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    21fa:	3301      	adds	r3, #1
    21fc:	4a25      	ldr	r2, [pc, #148]	; (2294 <spi_transceive_buffer_wait+0x260>)
    21fe:	4293      	cmp	r3, r2
    2200:	d803      	bhi.n	220a <spi_transceive_buffer_wait+0x1d6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2202:	6822      	ldr	r2, [r4, #0]
    2204:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    2206:	0752      	lsls	r2, r2, #29
    2208:	d5f7      	bpl.n	21fa <spi_transceive_buffer_wait+0x1c6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    220a:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    220c:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    220e:	0752      	lsls	r2, r2, #29
    2210:	d53c      	bpl.n	228c <spi_transceive_buffer_wait+0x258>
			rx_length--;
    2212:	4662      	mov	r2, ip
    2214:	3a01      	subs	r2, #1
    2216:	b292      	uxth	r2, r2
    2218:	4694      	mov	ip, r2
    221a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    221c:	0752      	lsls	r2, r2, #29
    221e:	d511      	bpl.n	2244 <spi_transceive_buffer_wait+0x210>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2220:	8b5a      	ldrh	r2, [r3, #26]
    2222:	0752      	lsls	r2, r2, #29
    2224:	d508      	bpl.n	2238 <spi_transceive_buffer_wait+0x204>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2226:	2204      	movs	r2, #4
    2228:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    222a:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    222c:	79a1      	ldrb	r1, [r4, #6]
    222e:	2901      	cmp	r1, #1
    2230:	d004      	beq.n	223c <spi_transceive_buffer_wait+0x208>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2232:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2234:	b2c9      	uxtb	r1, r1
    2236:	e007      	b.n	2248 <spi_transceive_buffer_wait+0x214>
	enum status_code retval = STATUS_OK;
    2238:	2200      	movs	r2, #0
    223a:	e7f7      	b.n	222c <spi_transceive_buffer_wait+0x1f8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    223c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    223e:	05c9      	lsls	r1, r1, #23
    2240:	0dc9      	lsrs	r1, r1, #23
    2242:	e001      	b.n	2248 <spi_transceive_buffer_wait+0x214>
			uint16_t received_data = 0;
    2244:	0031      	movs	r1, r6
		return STATUS_ERR_IO;
    2246:	2210      	movs	r2, #16
			if (retval != STATUS_OK) {
    2248:	2a00      	cmp	r2, #0
    224a:	d117      	bne.n	227c <spi_transceive_buffer_wait+0x248>
			rx_data[rx_pos++] = received_data;
    224c:	4643      	mov	r3, r8
    224e:	3301      	adds	r3, #1
    2250:	b29b      	uxth	r3, r3
    2252:	9a03      	ldr	r2, [sp, #12]
    2254:	4640      	mov	r0, r8
    2256:	5411      	strb	r1, [r2, r0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2258:	79a2      	ldrb	r2, [r4, #6]
    225a:	2a01      	cmp	r2, #1
    225c:	d005      	beq.n	226a <spi_transceive_buffer_wait+0x236>
				rx_data[rx_pos++] = (received_data >> 8);
    225e:	4698      	mov	r8, r3
		while (rx_length) {
    2260:	4663      	mov	r3, ip
    2262:	2b00      	cmp	r3, #0
    2264:	d007      	beq.n	2276 <spi_transceive_buffer_wait+0x242>
    2266:	2300      	movs	r3, #0
    2268:	e7c8      	b.n	21fc <spi_transceive_buffer_wait+0x1c8>
				rx_data[rx_pos++] = (received_data >> 8);
    226a:	3002      	adds	r0, #2
    226c:	0a09      	lsrs	r1, r1, #8
    226e:	9a03      	ldr	r2, [sp, #12]
    2270:	54d1      	strb	r1, [r2, r3]
    2272:	b283      	uxth	r3, r0
    2274:	e7f3      	b.n	225e <spi_transceive_buffer_wait+0x22a>
	return STATUS_OK;
    2276:	2200      	movs	r2, #0
    2278:	e000      	b.n	227c <spi_transceive_buffer_wait+0x248>
		return STATUS_BUSY;
    227a:	2205      	movs	r2, #5
}
    227c:	0010      	movs	r0, r2
    227e:	b005      	add	sp, #20
    2280:	bc3c      	pop	{r2, r3, r4, r5}
    2282:	4690      	mov	r8, r2
    2284:	4699      	mov	r9, r3
    2286:	46a2      	mov	sl, r4
    2288:	46ab      	mov	fp, r5
    228a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    228c:	2212      	movs	r2, #18
    228e:	e7f5      	b.n	227c <spi_transceive_buffer_wait+0x248>
    2290:	00001a11 	.word	0x00001a11
    2294:	00002710 	.word	0x00002710

00002298 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    2298:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    229a:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    229c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    229e:	780a      	ldrb	r2, [r1, #0]
    22a0:	b2d2      	uxtb	r2, r2
    22a2:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    22a4:	1c4c      	adds	r4, r1, #1
    22a6:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22a8:	7986      	ldrb	r6, [r0, #6]
    22aa:	2e01      	cmp	r6, #1
    22ac:	d007      	beq.n	22be <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    22ae:	05db      	lsls	r3, r3, #23
    22b0:	0ddb      	lsrs	r3, r3, #23
    22b2:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    22b4:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    22b6:	3b01      	subs	r3, #1
    22b8:	b29b      	uxth	r3, r3
    22ba:	8683      	strh	r3, [r0, #52]	; 0x34
}
    22bc:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    22be:	784b      	ldrb	r3, [r1, #1]
    22c0:	021b      	lsls	r3, r3, #8
    22c2:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    22c4:	1c8c      	adds	r4, r1, #2
    22c6:	62c4      	str	r4, [r0, #44]	; 0x2c
    22c8:	e7f1      	b.n	22ae <_spi_write+0x16>
	...

000022cc <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    22cc:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    22ce:	4a04      	ldr	r2, [pc, #16]	; (22e0 <_spi_write_dummy+0x14>)
    22d0:	8812      	ldrh	r2, [r2, #0]
    22d2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    22d4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    22d6:	3b01      	subs	r3, #1
    22d8:	b29b      	uxth	r3, r3
    22da:	8643      	strh	r3, [r0, #50]	; 0x32
}
    22dc:	4770      	bx	lr
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	200003dc 	.word	0x200003dc

000022e4 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    22e4:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    22e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    22e8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    22ea:	3b01      	subs	r3, #1
    22ec:	b29b      	uxth	r3, r3
    22ee:	8643      	strh	r3, [r0, #50]	; 0x32
}
    22f0:	4770      	bx	lr

000022f2 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    22f2:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    22f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22f6:	05db      	lsls	r3, r3, #23
    22f8:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    22fa:	b2da      	uxtb	r2, r3
    22fc:	6a81      	ldr	r1, [r0, #40]	; 0x28
    22fe:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    2300:	6a82      	ldr	r2, [r0, #40]	; 0x28
    2302:	1c51      	adds	r1, r2, #1
    2304:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2306:	7981      	ldrb	r1, [r0, #6]
    2308:	2901      	cmp	r1, #1
    230a:	d004      	beq.n	2316 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    230c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    230e:	3b01      	subs	r3, #1
    2310:	b29b      	uxth	r3, r3
    2312:	8603      	strh	r3, [r0, #48]	; 0x30
}
    2314:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    2316:	0a1b      	lsrs	r3, r3, #8
    2318:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    231a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    231c:	3301      	adds	r3, #1
    231e:	6283      	str	r3, [r0, #40]	; 0x28
    2320:	e7f4      	b.n	230c <_spi_read+0x1a>
	...

00002324 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    2326:	0080      	lsls	r0, r0, #2
    2328:	4b6b      	ldr	r3, [pc, #428]	; (24d8 <_spi_interrupt_handler+0x1b4>)
    232a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    232c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    232e:	2337      	movs	r3, #55	; 0x37
    2330:	5ce3      	ldrb	r3, [r4, r3]
    2332:	2236      	movs	r2, #54	; 0x36
    2334:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    2336:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2338:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    233a:	7db5      	ldrb	r5, [r6, #22]
    233c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    233e:	07eb      	lsls	r3, r5, #31
    2340:	d516      	bpl.n	2370 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2342:	7963      	ldrb	r3, [r4, #5]
    2344:	2b01      	cmp	r3, #1
    2346:	d04d      	beq.n	23e4 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    2348:	7963      	ldrb	r3, [r4, #5]
		if (0
    234a:	2b01      	cmp	r3, #1
    234c:	d057      	beq.n	23fe <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    234e:	2b00      	cmp	r3, #0
    2350:	d10e      	bne.n	2370 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    2352:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2354:	2b00      	cmp	r3, #0
    2356:	d00b      	beq.n	2370 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    2358:	0020      	movs	r0, r4
    235a:	4b60      	ldr	r3, [pc, #384]	; (24dc <_spi_interrupt_handler+0x1b8>)
    235c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    235e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2360:	b29b      	uxth	r3, r3
    2362:	2b00      	cmp	r3, #0
    2364:	d104      	bne.n	2370 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2366:	3301      	adds	r3, #1
    2368:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    236a:	7a63      	ldrb	r3, [r4, #9]
    236c:	2b01      	cmp	r3, #1
    236e:	d04a      	beq.n	2406 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2370:	076b      	lsls	r3, r5, #29
    2372:	d511      	bpl.n	2398 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2374:	8b73      	ldrh	r3, [r6, #26]
    2376:	075b      	lsls	r3, r3, #29
    2378:	d54f      	bpl.n	241a <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    237a:	7a63      	ldrb	r3, [r4, #9]
    237c:	2b01      	cmp	r3, #1
    237e:	d008      	beq.n	2392 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2380:	221e      	movs	r2, #30
    2382:	2338      	movs	r3, #56	; 0x38
    2384:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2386:	3b35      	subs	r3, #53	; 0x35
    2388:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    238a:	3302      	adds	r3, #2
    238c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    238e:	073b      	lsls	r3, r7, #28
    2390:	d43f      	bmi.n	2412 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    2392:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2394:	2304      	movs	r3, #4
    2396:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2398:	07ab      	lsls	r3, r5, #30
    239a:	d513      	bpl.n	23c4 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    239c:	7963      	ldrb	r3, [r4, #5]
    239e:	2b00      	cmp	r3, #0
    23a0:	d10d      	bne.n	23be <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    23a2:	3307      	adds	r3, #7
    23a4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    23a6:	3b05      	subs	r3, #5
    23a8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    23aa:	3301      	adds	r3, #1
    23ac:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    23ae:	2300      	movs	r3, #0
    23b0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    23b2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    23b4:	3338      	adds	r3, #56	; 0x38
    23b6:	2200      	movs	r2, #0
    23b8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    23ba:	06fb      	lsls	r3, r7, #27
    23bc:	d464      	bmi.n	2488 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    23be:	7963      	ldrb	r3, [r4, #5]
    23c0:	2b01      	cmp	r3, #1
    23c2:	d065      	beq.n	2490 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    23c4:	072b      	lsls	r3, r5, #28
    23c6:	d508      	bpl.n	23da <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    23c8:	7963      	ldrb	r3, [r4, #5]
    23ca:	2b00      	cmp	r3, #0
    23cc:	d105      	bne.n	23da <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    23ce:	3308      	adds	r3, #8
    23d0:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    23d2:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    23d4:	06bb      	lsls	r3, r7, #26
    23d6:	d500      	bpl.n	23da <_spi_interrupt_handler+0xb6>
    23d8:	e070      	b.n	24bc <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    23da:	b26d      	sxtb	r5, r5
    23dc:	2d00      	cmp	r5, #0
    23de:	da00      	bge.n	23e2 <_spi_interrupt_handler+0xbe>
    23e0:	e070      	b.n	24c4 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    23e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    23e4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    23e6:	2b00      	cmp	r3, #0
    23e8:	d1ae      	bne.n	2348 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    23ea:	0020      	movs	r0, r4
    23ec:	4b3c      	ldr	r3, [pc, #240]	; (24e0 <_spi_interrupt_handler+0x1bc>)
    23ee:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    23f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    23f2:	b29b      	uxth	r3, r3
    23f4:	2b00      	cmp	r3, #0
    23f6:	d1a7      	bne.n	2348 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    23f8:	3301      	adds	r3, #1
    23fa:	7533      	strb	r3, [r6, #20]
    23fc:	e7a4      	b.n	2348 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    23fe:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    2400:	2a00      	cmp	r2, #0
    2402:	d1a9      	bne.n	2358 <_spi_interrupt_handler+0x34>
    2404:	e7a3      	b.n	234e <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    2406:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    2408:	2b00      	cmp	r3, #0
    240a:	d1b1      	bne.n	2370 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    240c:	3302      	adds	r3, #2
    240e:	75b3      	strb	r3, [r6, #22]
    2410:	e7ae      	b.n	2370 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2412:	0020      	movs	r0, r4
    2414:	69a3      	ldr	r3, [r4, #24]
    2416:	4798      	blx	r3
    2418:	e7bb      	b.n	2392 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    241a:	7a63      	ldrb	r3, [r4, #9]
    241c:	2b01      	cmp	r3, #1
    241e:	d017      	beq.n	2450 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    2420:	0020      	movs	r0, r4
    2422:	4b30      	ldr	r3, [pc, #192]	; (24e4 <_spi_interrupt_handler+0x1c0>)
    2424:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    2426:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2428:	b29b      	uxth	r3, r3
    242a:	2b00      	cmp	r3, #0
    242c:	d1b4      	bne.n	2398 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    242e:	2200      	movs	r2, #0
    2430:	3338      	adds	r3, #56	; 0x38
    2432:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2434:	3b34      	subs	r3, #52	; 0x34
    2436:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2438:	7a63      	ldrb	r3, [r4, #9]
    243a:	2b02      	cmp	r3, #2
    243c:	d01d      	beq.n	247a <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    243e:	7a63      	ldrb	r3, [r4, #9]
    2440:	2b00      	cmp	r3, #0
    2442:	d1a9      	bne.n	2398 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2444:	07bb      	lsls	r3, r7, #30
    2446:	d5a7      	bpl.n	2398 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2448:	0020      	movs	r0, r4
    244a:	6923      	ldr	r3, [r4, #16]
    244c:	4798      	blx	r3
    244e:	e7a3      	b.n	2398 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    2450:	0020      	movs	r0, r4
    2452:	4b25      	ldr	r3, [pc, #148]	; (24e8 <_spi_interrupt_handler+0x1c4>)
    2454:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    2456:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2458:	b29b      	uxth	r3, r3
    245a:	2b00      	cmp	r3, #0
    245c:	d19c      	bne.n	2398 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    245e:	3304      	adds	r3, #4
    2460:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    2462:	2200      	movs	r2, #0
    2464:	3334      	adds	r3, #52	; 0x34
    2466:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    2468:	3b35      	subs	r3, #53	; 0x35
    246a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    246c:	07fb      	lsls	r3, r7, #31
    246e:	d400      	bmi.n	2472 <_spi_interrupt_handler+0x14e>
    2470:	e792      	b.n	2398 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2472:	0020      	movs	r0, r4
    2474:	68e3      	ldr	r3, [r4, #12]
    2476:	4798      	blx	r3
    2478:	e78e      	b.n	2398 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    247a:	077b      	lsls	r3, r7, #29
    247c:	d400      	bmi.n	2480 <_spi_interrupt_handler+0x15c>
    247e:	e78b      	b.n	2398 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    2480:	0020      	movs	r0, r4
    2482:	6963      	ldr	r3, [r4, #20]
    2484:	4798      	blx	r3
    2486:	e787      	b.n	2398 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    2488:	0020      	movs	r0, r4
    248a:	69e3      	ldr	r3, [r4, #28]
    248c:	4798      	blx	r3
    248e:	e796      	b.n	23be <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2490:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2492:	2b01      	cmp	r3, #1
    2494:	d000      	beq.n	2498 <_spi_interrupt_handler+0x174>
    2496:	e795      	b.n	23c4 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2498:	79e3      	ldrb	r3, [r4, #7]
    249a:	2b00      	cmp	r3, #0
    249c:	d000      	beq.n	24a0 <_spi_interrupt_handler+0x17c>
    249e:	e791      	b.n	23c4 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    24a0:	3302      	adds	r3, #2
    24a2:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    24a4:	3301      	adds	r3, #1
    24a6:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    24a8:	2200      	movs	r2, #0
    24aa:	3335      	adds	r3, #53	; 0x35
    24ac:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    24ae:	07fb      	lsls	r3, r7, #31
    24b0:	d400      	bmi.n	24b4 <_spi_interrupt_handler+0x190>
    24b2:	e787      	b.n	23c4 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    24b4:	0020      	movs	r0, r4
    24b6:	68e3      	ldr	r3, [r4, #12]
    24b8:	4798      	blx	r3
    24ba:	e783      	b.n	23c4 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    24bc:	0020      	movs	r0, r4
    24be:	6a23      	ldr	r3, [r4, #32]
    24c0:	4798      	blx	r3
    24c2:	e78a      	b.n	23da <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    24c4:	2380      	movs	r3, #128	; 0x80
    24c6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    24c8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    24ca:	067b      	lsls	r3, r7, #25
    24cc:	d400      	bmi.n	24d0 <_spi_interrupt_handler+0x1ac>
    24ce:	e788      	b.n	23e2 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    24d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    24d2:	0020      	movs	r0, r4
    24d4:	4798      	blx	r3
}
    24d6:	e784      	b.n	23e2 <_spi_interrupt_handler+0xbe>
    24d8:	200003e0 	.word	0x200003e0
    24dc:	00002299 	.word	0x00002299
    24e0:	000022cd 	.word	0x000022cd
    24e4:	000022f3 	.word	0x000022f3
    24e8:	000022e5 	.word	0x000022e5

000024ec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    24ec:	4770      	bx	lr
	...

000024f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    24f0:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    24f2:	4b0b      	ldr	r3, [pc, #44]	; (2520 <_sercom_set_handler+0x30>)
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d008      	beq.n	250c <_sercom_set_handler+0x1c>
    24fa:	e00c      	b.n	2516 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    24fc:	009a      	lsls	r2, r3, #2
    24fe:	4d09      	ldr	r5, [pc, #36]	; (2524 <_sercom_set_handler+0x34>)
    2500:	4c09      	ldr	r4, [pc, #36]	; (2528 <_sercom_set_handler+0x38>)
    2502:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    2504:	2500      	movs	r5, #0
    2506:	4c09      	ldr	r4, [pc, #36]	; (252c <_sercom_set_handler+0x3c>)
    2508:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    250a:	3301      	adds	r3, #1
    250c:	2b03      	cmp	r3, #3
    250e:	d9f5      	bls.n	24fc <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    2510:	2201      	movs	r2, #1
    2512:	4b03      	ldr	r3, [pc, #12]	; (2520 <_sercom_set_handler+0x30>)
    2514:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2516:	0080      	lsls	r0, r0, #2
    2518:	4b03      	ldr	r3, [pc, #12]	; (2528 <_sercom_set_handler+0x38>)
    251a:	50c1      	str	r1, [r0, r3]
}
    251c:	bd30      	pop	{r4, r5, pc}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	2000036a 	.word	0x2000036a
    2524:	000024ed 	.word	0x000024ed
    2528:	2000036c 	.word	0x2000036c
    252c:	200003e0 	.word	0x200003e0

00002530 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2530:	b500      	push	{lr}
    2532:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2534:	4b04      	ldr	r3, [pc, #16]	; (2548 <_sercom_get_interrupt_vector+0x18>)
    2536:	681b      	ldr	r3, [r3, #0]
    2538:	9301      	str	r3, [sp, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    253a:	4b04      	ldr	r3, [pc, #16]	; (254c <_sercom_get_interrupt_vector+0x1c>)
    253c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    253e:	ab01      	add	r3, sp, #4
    2540:	5618      	ldrsb	r0, [r3, r0]
}
    2542:	b003      	add	sp, #12
    2544:	bd00      	pop	{pc}
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	00003750 	.word	0x00003750
    254c:	00001265 	.word	0x00001265

00002550 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2550:	b510      	push	{r4, lr}
    2552:	4b02      	ldr	r3, [pc, #8]	; (255c <SERCOM0_Handler+0xc>)
    2554:	681b      	ldr	r3, [r3, #0]
    2556:	2000      	movs	r0, #0
    2558:	4798      	blx	r3
    255a:	bd10      	pop	{r4, pc}
    255c:	2000036c 	.word	0x2000036c

00002560 <SERCOM1_Handler>:
    2560:	b510      	push	{r4, lr}
    2562:	4b02      	ldr	r3, [pc, #8]	; (256c <SERCOM1_Handler+0xc>)
    2564:	685b      	ldr	r3, [r3, #4]
    2566:	2001      	movs	r0, #1
    2568:	4798      	blx	r3
    256a:	bd10      	pop	{r4, pc}
    256c:	2000036c 	.word	0x2000036c

00002570 <SERCOM2_Handler>:
    2570:	b510      	push	{r4, lr}
    2572:	4b02      	ldr	r3, [pc, #8]	; (257c <SERCOM2_Handler+0xc>)
    2574:	689b      	ldr	r3, [r3, #8]
    2576:	2002      	movs	r0, #2
    2578:	4798      	blx	r3
    257a:	bd10      	pop	{r4, pc}
    257c:	2000036c 	.word	0x2000036c

00002580 <SERCOM3_Handler>:
    2580:	b510      	push	{r4, lr}
    2582:	4b02      	ldr	r3, [pc, #8]	; (258c <SERCOM3_Handler+0xc>)
    2584:	68db      	ldr	r3, [r3, #12]
    2586:	2003      	movs	r0, #3
    2588:	4798      	blx	r3
    258a:	bd10      	pop	{r4, pc}
    258c:	2000036c 	.word	0x2000036c

00002590 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2590:	4770      	bx	lr
	...

00002594 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2594:	4b0c      	ldr	r3, [pc, #48]	; (25c8 <cpu_irq_enter_critical+0x34>)
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	2b00      	cmp	r3, #0
    259a:	d106      	bne.n	25aa <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    259c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    25a0:	2b00      	cmp	r3, #0
    25a2:	d007      	beq.n	25b4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    25a4:	2200      	movs	r2, #0
    25a6:	4b09      	ldr	r3, [pc, #36]	; (25cc <cpu_irq_enter_critical+0x38>)
    25a8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    25aa:	4a07      	ldr	r2, [pc, #28]	; (25c8 <cpu_irq_enter_critical+0x34>)
    25ac:	6813      	ldr	r3, [r2, #0]
    25ae:	3301      	adds	r3, #1
    25b0:	6013      	str	r3, [r2, #0]
}
    25b2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    25b4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    25b6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    25ba:	2200      	movs	r2, #0
    25bc:	4b04      	ldr	r3, [pc, #16]	; (25d0 <cpu_irq_enter_critical+0x3c>)
    25be:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    25c0:	3201      	adds	r2, #1
    25c2:	4b02      	ldr	r3, [pc, #8]	; (25cc <cpu_irq_enter_critical+0x38>)
    25c4:	701a      	strb	r2, [r3, #0]
    25c6:	e7f0      	b.n	25aa <cpu_irq_enter_critical+0x16>
    25c8:	2000037c 	.word	0x2000037c
    25cc:	20000380 	.word	0x20000380
    25d0:	20000018 	.word	0x20000018

000025d4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    25d4:	4b08      	ldr	r3, [pc, #32]	; (25f8 <cpu_irq_leave_critical+0x24>)
    25d6:	681a      	ldr	r2, [r3, #0]
    25d8:	3a01      	subs	r2, #1
    25da:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    25dc:	681b      	ldr	r3, [r3, #0]
    25de:	2b00      	cmp	r3, #0
    25e0:	d109      	bne.n	25f6 <cpu_irq_leave_critical+0x22>
    25e2:	4b06      	ldr	r3, [pc, #24]	; (25fc <cpu_irq_leave_critical+0x28>)
    25e4:	781b      	ldrb	r3, [r3, #0]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d005      	beq.n	25f6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    25ea:	2201      	movs	r2, #1
    25ec:	4b04      	ldr	r3, [pc, #16]	; (2600 <cpu_irq_leave_critical+0x2c>)
    25ee:	701a      	strb	r2, [r3, #0]
    25f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    25f4:	b662      	cpsie	i
	}
}
    25f6:	4770      	bx	lr
    25f8:	2000037c 	.word	0x2000037c
    25fc:	20000380 	.word	0x20000380
    2600:	20000018 	.word	0x20000018

00002604 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    2604:	b510      	push	{r4, lr}
    2606:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2608:	2201      	movs	r2, #1
    260a:	ab01      	add	r3, sp, #4
    260c:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    260e:	2400      	movs	r4, #0
    2610:	e004      	b.n	261c <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2612:	b2e0      	uxtb	r0, r4
    2614:	a901      	add	r1, sp, #4
    2616:	4b03      	ldr	r3, [pc, #12]	; (2624 <_switch_peripheral_gclk+0x20>)
    2618:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    261a:	3401      	adds	r4, #1
    261c:	2c24      	cmp	r4, #36	; 0x24
    261e:	d9f8      	bls.n	2612 <_switch_peripheral_gclk+0xe>
	}
}
    2620:	b002      	add	sp, #8
    2622:	bd10      	pop	{r4, pc}
    2624:	00002aa5 	.word	0x00002aa5

00002628 <system_clock_source_get_hz>:
{
    2628:	b510      	push	{r4, lr}
	switch (clock_source) {
    262a:	2808      	cmp	r0, #8
    262c:	d832      	bhi.n	2694 <system_clock_source_get_hz+0x6c>
    262e:	0080      	lsls	r0, r0, #2
    2630:	4b1b      	ldr	r3, [pc, #108]	; (26a0 <system_clock_source_get_hz+0x78>)
    2632:	581b      	ldr	r3, [r3, r0]
    2634:	469f      	mov	pc, r3
		return 32768UL;
    2636:	2080      	movs	r0, #128	; 0x80
    2638:	0200      	lsls	r0, r0, #8
}
    263a:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    263c:	4b19      	ldr	r3, [pc, #100]	; (26a4 <system_clock_source_get_hz+0x7c>)
    263e:	6918      	ldr	r0, [r3, #16]
    2640:	e7fb      	b.n	263a <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2642:	4b19      	ldr	r3, [pc, #100]	; (26a8 <system_clock_source_get_hz+0x80>)
    2644:	6a1b      	ldr	r3, [r3, #32]
    2646:	059b      	lsls	r3, r3, #22
    2648:	0f9b      	lsrs	r3, r3, #30
    264a:	4818      	ldr	r0, [pc, #96]	; (26ac <system_clock_source_get_hz+0x84>)
    264c:	40d8      	lsrs	r0, r3
    264e:	e7f4      	b.n	263a <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    2650:	4b14      	ldr	r3, [pc, #80]	; (26a4 <system_clock_source_get_hz+0x7c>)
    2652:	6958      	ldr	r0, [r3, #20]
    2654:	e7f1      	b.n	263a <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2656:	4b13      	ldr	r3, [pc, #76]	; (26a4 <system_clock_source_get_hz+0x7c>)
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	079b      	lsls	r3, r3, #30
    265c:	d51c      	bpl.n	2698 <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    265e:	4b12      	ldr	r3, [pc, #72]	; (26a8 <system_clock_source_get_hz+0x80>)
    2660:	68db      	ldr	r3, [r3, #12]
    2662:	06db      	lsls	r3, r3, #27
    2664:	d5fb      	bpl.n	265e <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2666:	4b0f      	ldr	r3, [pc, #60]	; (26a4 <system_clock_source_get_hz+0x7c>)
    2668:	681b      	ldr	r3, [r3, #0]
    266a:	075b      	lsls	r3, r3, #29
    266c:	d401      	bmi.n	2672 <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    266e:	4810      	ldr	r0, [pc, #64]	; (26b0 <system_clock_source_get_hz+0x88>)
    2670:	e7e3      	b.n	263a <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2672:	2000      	movs	r0, #0
    2674:	4b0f      	ldr	r3, [pc, #60]	; (26b4 <system_clock_source_get_hz+0x8c>)
    2676:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2678:	4b0a      	ldr	r3, [pc, #40]	; (26a4 <system_clock_source_get_hz+0x7c>)
    267a:	689b      	ldr	r3, [r3, #8]
    267c:	041b      	lsls	r3, r3, #16
    267e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2680:	4358      	muls	r0, r3
    2682:	e7da      	b.n	263a <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2684:	2350      	movs	r3, #80	; 0x50
    2686:	4a08      	ldr	r2, [pc, #32]	; (26a8 <system_clock_source_get_hz+0x80>)
    2688:	5cd3      	ldrb	r3, [r2, r3]
    268a:	075b      	lsls	r3, r3, #29
    268c:	d506      	bpl.n	269c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    268e:	4b05      	ldr	r3, [pc, #20]	; (26a4 <system_clock_source_get_hz+0x7c>)
    2690:	68d8      	ldr	r0, [r3, #12]
    2692:	e7d2      	b.n	263a <system_clock_source_get_hz+0x12>
		return 0;
    2694:	2000      	movs	r0, #0
    2696:	e7d0      	b.n	263a <system_clock_source_get_hz+0x12>
			return 0;
    2698:	2000      	movs	r0, #0
    269a:	e7ce      	b.n	263a <system_clock_source_get_hz+0x12>
			return 0;
    269c:	2000      	movs	r0, #0
    269e:	e7cc      	b.n	263a <system_clock_source_get_hz+0x12>
    26a0:	00003754 	.word	0x00003754
    26a4:	20000384 	.word	0x20000384
    26a8:	40000800 	.word	0x40000800
    26ac:	007a1200 	.word	0x007a1200
    26b0:	02dc6c00 	.word	0x02dc6c00
    26b4:	00002ac1 	.word	0x00002ac1

000026b8 <system_clock_source_osc8m_set_config>:
{
    26b8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    26ba:	4d0c      	ldr	r5, [pc, #48]	; (26ec <system_clock_source_osc8m_set_config+0x34>)
    26bc:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    26be:	7802      	ldrb	r2, [r0, #0]
    26c0:	2103      	movs	r1, #3
    26c2:	400a      	ands	r2, r1
    26c4:	0212      	lsls	r2, r2, #8
    26c6:	490a      	ldr	r1, [pc, #40]	; (26f0 <system_clock_source_osc8m_set_config+0x38>)
    26c8:	4031      	ands	r1, r6
    26ca:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    26cc:	7882      	ldrb	r2, [r0, #2]
    26ce:	2401      	movs	r4, #1
    26d0:	4022      	ands	r2, r4
    26d2:	01d2      	lsls	r2, r2, #7
    26d4:	2380      	movs	r3, #128	; 0x80
    26d6:	4399      	bics	r1, r3
    26d8:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    26da:	7843      	ldrb	r3, [r0, #1]
    26dc:	4023      	ands	r3, r4
    26de:	019b      	lsls	r3, r3, #6
    26e0:	2140      	movs	r1, #64	; 0x40
    26e2:	438a      	bics	r2, r1
    26e4:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    26e6:	622b      	str	r3, [r5, #32]
}
    26e8:	bd70      	pop	{r4, r5, r6, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	40000800 	.word	0x40000800
    26f0:	fffffcff 	.word	0xfffffcff

000026f4 <system_clock_source_enable>:
	switch (clock_source) {
    26f4:	2808      	cmp	r0, #8
    26f6:	d84a      	bhi.n	278e <system_clock_source_enable+0x9a>
    26f8:	0080      	lsls	r0, r0, #2
    26fa:	4b26      	ldr	r3, [pc, #152]	; (2794 <system_clock_source_enable+0xa0>)
    26fc:	581b      	ldr	r3, [r3, r0]
    26fe:	469f      	mov	pc, r3
		return STATUS_OK;
    2700:	2000      	movs	r0, #0
}
    2702:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2704:	4a24      	ldr	r2, [pc, #144]	; (2798 <system_clock_source_enable+0xa4>)
    2706:	6a13      	ldr	r3, [r2, #32]
    2708:	2102      	movs	r1, #2
    270a:	430b      	orrs	r3, r1
    270c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    270e:	2000      	movs	r0, #0
    2710:	e7f7      	b.n	2702 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2712:	4a21      	ldr	r2, [pc, #132]	; (2798 <system_clock_source_enable+0xa4>)
    2714:	6993      	ldr	r3, [r2, #24]
    2716:	2102      	movs	r1, #2
    2718:	430b      	orrs	r3, r1
    271a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    271c:	2000      	movs	r0, #0
		break;
    271e:	e7f0      	b.n	2702 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2720:	4a1d      	ldr	r2, [pc, #116]	; (2798 <system_clock_source_enable+0xa4>)
    2722:	8a13      	ldrh	r3, [r2, #16]
    2724:	2102      	movs	r1, #2
    2726:	430b      	orrs	r3, r1
    2728:	b29b      	uxth	r3, r3
    272a:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    272c:	2000      	movs	r0, #0
		break;
    272e:	e7e8      	b.n	2702 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2730:	4a19      	ldr	r2, [pc, #100]	; (2798 <system_clock_source_enable+0xa4>)
    2732:	8a93      	ldrh	r3, [r2, #20]
    2734:	2102      	movs	r1, #2
    2736:	430b      	orrs	r3, r1
    2738:	b29b      	uxth	r3, r3
    273a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    273c:	2000      	movs	r0, #0
		break;
    273e:	e7e0      	b.n	2702 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2740:	4916      	ldr	r1, [pc, #88]	; (279c <system_clock_source_enable+0xa8>)
    2742:	680b      	ldr	r3, [r1, #0]
    2744:	2202      	movs	r2, #2
    2746:	4313      	orrs	r3, r2
    2748:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    274a:	4b13      	ldr	r3, [pc, #76]	; (2798 <system_clock_source_enable+0xa4>)
    274c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    274e:	4b12      	ldr	r3, [pc, #72]	; (2798 <system_clock_source_enable+0xa4>)
    2750:	68db      	ldr	r3, [r3, #12]
    2752:	06db      	lsls	r3, r3, #27
    2754:	d5fb      	bpl.n	274e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2756:	4a11      	ldr	r2, [pc, #68]	; (279c <system_clock_source_enable+0xa8>)
    2758:	6891      	ldr	r1, [r2, #8]
    275a:	4b0f      	ldr	r3, [pc, #60]	; (2798 <system_clock_source_enable+0xa4>)
    275c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    275e:	6852      	ldr	r2, [r2, #4]
    2760:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2762:	2200      	movs	r2, #0
    2764:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2766:	4b0c      	ldr	r3, [pc, #48]	; (2798 <system_clock_source_enable+0xa4>)
    2768:	68db      	ldr	r3, [r3, #12]
    276a:	06db      	lsls	r3, r3, #27
    276c:	d5fb      	bpl.n	2766 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    276e:	4b0b      	ldr	r3, [pc, #44]	; (279c <system_clock_source_enable+0xa8>)
    2770:	681b      	ldr	r3, [r3, #0]
    2772:	b29b      	uxth	r3, r3
    2774:	4a08      	ldr	r2, [pc, #32]	; (2798 <system_clock_source_enable+0xa4>)
    2776:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2778:	2000      	movs	r0, #0
    277a:	e7c2      	b.n	2702 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    277c:	4906      	ldr	r1, [pc, #24]	; (2798 <system_clock_source_enable+0xa4>)
    277e:	2244      	movs	r2, #68	; 0x44
    2780:	5c8b      	ldrb	r3, [r1, r2]
    2782:	2002      	movs	r0, #2
    2784:	4303      	orrs	r3, r0
    2786:	b2db      	uxtb	r3, r3
    2788:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    278a:	2000      	movs	r0, #0
		break;
    278c:	e7b9      	b.n	2702 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    278e:	2017      	movs	r0, #23
    2790:	e7b7      	b.n	2702 <system_clock_source_enable+0xe>
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	00003778 	.word	0x00003778
    2798:	40000800 	.word	0x40000800
    279c:	20000384 	.word	0x20000384

000027a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    27a0:	b530      	push	{r4, r5, lr}
    27a2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    27a4:	22c2      	movs	r2, #194	; 0xc2
    27a6:	00d2      	lsls	r2, r2, #3
    27a8:	4b15      	ldr	r3, [pc, #84]	; (2800 <system_clock_init+0x60>)
    27aa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    27ac:	4b15      	ldr	r3, [pc, #84]	; (2804 <system_clock_init+0x64>)
    27ae:	6859      	ldr	r1, [r3, #4]
    27b0:	221e      	movs	r2, #30
    27b2:	4391      	bics	r1, r2
    27b4:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    27b6:	4b14      	ldr	r3, [pc, #80]	; (2808 <system_clock_init+0x68>)
    27b8:	4798      	blx	r3
	config->run_in_standby  = false;
    27ba:	a803      	add	r0, sp, #12
    27bc:	2400      	movs	r4, #0
    27be:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    27c0:	2501      	movs	r5, #1
    27c2:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    27c4:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    27c6:	4b11      	ldr	r3, [pc, #68]	; (280c <system_clock_init+0x6c>)
    27c8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    27ca:	2006      	movs	r0, #6
    27cc:	4b10      	ldr	r3, [pc, #64]	; (2810 <system_clock_init+0x70>)
    27ce:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    27d0:	4b10      	ldr	r3, [pc, #64]	; (2814 <system_clock_init+0x74>)
    27d2:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    27d4:	4b10      	ldr	r3, [pc, #64]	; (2818 <system_clock_init+0x78>)
    27d6:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    27d8:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    27da:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    27dc:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    27de:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    27e0:	466b      	mov	r3, sp
    27e2:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    27e4:	2306      	movs	r3, #6
    27e6:	466a      	mov	r2, sp
    27e8:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    27ea:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    27ec:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    27ee:	4669      	mov	r1, sp
    27f0:	2000      	movs	r0, #0
    27f2:	4b0a      	ldr	r3, [pc, #40]	; (281c <system_clock_init+0x7c>)
    27f4:	4798      	blx	r3
    27f6:	2000      	movs	r0, #0
    27f8:	4b09      	ldr	r3, [pc, #36]	; (2820 <system_clock_init+0x80>)
    27fa:	4798      	blx	r3
#endif
}
    27fc:	b005      	add	sp, #20
    27fe:	bd30      	pop	{r4, r5, pc}
    2800:	40000800 	.word	0x40000800
    2804:	41004000 	.word	0x41004000
    2808:	00002605 	.word	0x00002605
    280c:	000026b9 	.word	0x000026b9
    2810:	000026f5 	.word	0x000026f5
    2814:	00002825 	.word	0x00002825
    2818:	40000400 	.word	0x40000400
    281c:	00002849 	.word	0x00002849
    2820:	00002919 	.word	0x00002919

00002824 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2824:	4a06      	ldr	r2, [pc, #24]	; (2840 <system_gclk_init+0x1c>)
    2826:	6993      	ldr	r3, [r2, #24]
    2828:	2108      	movs	r1, #8
    282a:	430b      	orrs	r3, r1
    282c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    282e:	2201      	movs	r2, #1
    2830:	4b04      	ldr	r3, [pc, #16]	; (2844 <system_gclk_init+0x20>)
    2832:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2834:	4b03      	ldr	r3, [pc, #12]	; (2844 <system_gclk_init+0x20>)
    2836:	781b      	ldrb	r3, [r3, #0]
    2838:	07db      	lsls	r3, r3, #31
    283a:	d4fb      	bmi.n	2834 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    283c:	4770      	bx	lr
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	40000400 	.word	0x40000400
    2844:	40000c00 	.word	0x40000c00

00002848 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    284a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    284c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    284e:	780c      	ldrb	r4, [r1, #0]
    2850:	0224      	lsls	r4, r4, #8
    2852:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2854:	784b      	ldrb	r3, [r1, #1]
    2856:	2b00      	cmp	r3, #0
    2858:	d002      	beq.n	2860 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    285a:	2380      	movs	r3, #128	; 0x80
    285c:	02db      	lsls	r3, r3, #11
    285e:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2860:	7a4b      	ldrb	r3, [r1, #9]
    2862:	2b00      	cmp	r3, #0
    2864:	d002      	beq.n	286c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2866:	2380      	movs	r3, #128	; 0x80
    2868:	031b      	lsls	r3, r3, #12
    286a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    286c:	6848      	ldr	r0, [r1, #4]
    286e:	2801      	cmp	r0, #1
    2870:	d912      	bls.n	2898 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2872:	1e43      	subs	r3, r0, #1
    2874:	4203      	tst	r3, r0
    2876:	d03d      	beq.n	28f4 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2878:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    287a:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    287c:	2380      	movs	r3, #128	; 0x80
    287e:	029b      	lsls	r3, r3, #10
    2880:	431c      	orrs	r4, r3
    2882:	e009      	b.n	2898 <system_gclk_gen_set_config+0x50>
				div2_count++;
    2884:	3201      	adds	r2, #1
						mask <<= 1) {
    2886:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2888:	4283      	cmp	r3, r0
    288a:	d3fb      	bcc.n	2884 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    288c:	0212      	lsls	r2, r2, #8
    288e:	4332      	orrs	r2, r6
    2890:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2892:	2380      	movs	r3, #128	; 0x80
    2894:	035b      	lsls	r3, r3, #13
    2896:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2898:	7a0b      	ldrb	r3, [r1, #8]
    289a:	2b00      	cmp	r3, #0
    289c:	d002      	beq.n	28a4 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    289e:	2380      	movs	r3, #128	; 0x80
    28a0:	039b      	lsls	r3, r3, #14
    28a2:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    28a4:	4b18      	ldr	r3, [pc, #96]	; (2908 <system_gclk_gen_set_config+0xc0>)
    28a6:	785b      	ldrb	r3, [r3, #1]
    28a8:	b25b      	sxtb	r3, r3
    28aa:	2b00      	cmp	r3, #0
    28ac:	db25      	blt.n	28fa <system_gclk_gen_set_config+0xb2>
	return false;
    28ae:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    28b0:	2f00      	cmp	r7, #0
    28b2:	d1f7      	bne.n	28a4 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    28b4:	4b15      	ldr	r3, [pc, #84]	; (290c <system_gclk_gen_set_config+0xc4>)
    28b6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    28b8:	4b15      	ldr	r3, [pc, #84]	; (2910 <system_gclk_gen_set_config+0xc8>)
    28ba:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    28bc:	4b12      	ldr	r3, [pc, #72]	; (2908 <system_gclk_gen_set_config+0xc0>)
    28be:	785b      	ldrb	r3, [r3, #1]
    28c0:	b25b      	sxtb	r3, r3
    28c2:	2b00      	cmp	r3, #0
    28c4:	db1b      	blt.n	28fe <system_gclk_gen_set_config+0xb6>
	return false;
    28c6:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    28c8:	2a00      	cmp	r2, #0
    28ca:	d1f7      	bne.n	28bc <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    28cc:	4b0e      	ldr	r3, [pc, #56]	; (2908 <system_gclk_gen_set_config+0xc0>)
    28ce:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    28d0:	4b0d      	ldr	r3, [pc, #52]	; (2908 <system_gclk_gen_set_config+0xc0>)
    28d2:	785b      	ldrb	r3, [r3, #1]
    28d4:	b25b      	sxtb	r3, r3
    28d6:	2b00      	cmp	r3, #0
    28d8:	db13      	blt.n	2902 <system_gclk_gen_set_config+0xba>
	return false;
    28da:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    28dc:	2b00      	cmp	r3, #0
    28de:	d1f7      	bne.n	28d0 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    28e0:	4a09      	ldr	r2, [pc, #36]	; (2908 <system_gclk_gen_set_config+0xc0>)
    28e2:	6853      	ldr	r3, [r2, #4]
    28e4:	2180      	movs	r1, #128	; 0x80
    28e6:	0249      	lsls	r1, r1, #9
    28e8:	400b      	ands	r3, r1
    28ea:	431c      	orrs	r4, r3
    28ec:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    28ee:	4b09      	ldr	r3, [pc, #36]	; (2914 <system_gclk_gen_set_config+0xcc>)
    28f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    28f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28f4:	2302      	movs	r3, #2
    28f6:	2200      	movs	r2, #0
    28f8:	e7c6      	b.n	2888 <system_gclk_gen_set_config+0x40>
		return true;
    28fa:	2701      	movs	r7, #1
    28fc:	e7d8      	b.n	28b0 <system_gclk_gen_set_config+0x68>
    28fe:	2201      	movs	r2, #1
    2900:	e7e2      	b.n	28c8 <system_gclk_gen_set_config+0x80>
    2902:	2301      	movs	r3, #1
    2904:	e7ea      	b.n	28dc <system_gclk_gen_set_config+0x94>
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	40000c00 	.word	0x40000c00
    290c:	00002595 	.word	0x00002595
    2910:	40000c08 	.word	0x40000c08
    2914:	000025d5 	.word	0x000025d5

00002918 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2918:	b570      	push	{r4, r5, r6, lr}
    291a:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    291c:	4b10      	ldr	r3, [pc, #64]	; (2960 <system_gclk_gen_enable+0x48>)
    291e:	785b      	ldrb	r3, [r3, #1]
    2920:	b25b      	sxtb	r3, r3
    2922:	2b00      	cmp	r3, #0
    2924:	db17      	blt.n	2956 <system_gclk_gen_enable+0x3e>
	return false;
    2926:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    2928:	2c00      	cmp	r4, #0
    292a:	d1f7      	bne.n	291c <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    292c:	4b0d      	ldr	r3, [pc, #52]	; (2964 <system_gclk_gen_enable+0x4c>)
    292e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2930:	4b0d      	ldr	r3, [pc, #52]	; (2968 <system_gclk_gen_enable+0x50>)
    2932:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2934:	4b0a      	ldr	r3, [pc, #40]	; (2960 <system_gclk_gen_enable+0x48>)
    2936:	785b      	ldrb	r3, [r3, #1]
    2938:	b25b      	sxtb	r3, r3
    293a:	2b00      	cmp	r3, #0
    293c:	db0d      	blt.n	295a <system_gclk_gen_enable+0x42>
	return false;
    293e:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    2940:	2b00      	cmp	r3, #0
    2942:	d1f7      	bne.n	2934 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2944:	4a06      	ldr	r2, [pc, #24]	; (2960 <system_gclk_gen_enable+0x48>)
    2946:	6851      	ldr	r1, [r2, #4]
    2948:	2380      	movs	r3, #128	; 0x80
    294a:	025b      	lsls	r3, r3, #9
    294c:	430b      	orrs	r3, r1
    294e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2950:	4b06      	ldr	r3, [pc, #24]	; (296c <system_gclk_gen_enable+0x54>)
    2952:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2954:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    2956:	2401      	movs	r4, #1
    2958:	e7e6      	b.n	2928 <system_gclk_gen_enable+0x10>
    295a:	2301      	movs	r3, #1
    295c:	e7f0      	b.n	2940 <system_gclk_gen_enable+0x28>
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	40000c00 	.word	0x40000c00
    2964:	00002595 	.word	0x00002595
    2968:	40000c04 	.word	0x40000c04
    296c:	000025d5 	.word	0x000025d5

00002970 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2972:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2974:	4b22      	ldr	r3, [pc, #136]	; (2a00 <system_gclk_gen_get_hz+0x90>)
    2976:	785b      	ldrb	r3, [r3, #1]
    2978:	b25b      	sxtb	r3, r3
    297a:	2b00      	cmp	r3, #0
    297c:	db34      	blt.n	29e8 <system_gclk_gen_get_hz+0x78>
	return false;
    297e:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    2980:	2d00      	cmp	r5, #0
    2982:	d1f7      	bne.n	2974 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    2984:	4b1f      	ldr	r3, [pc, #124]	; (2a04 <system_gclk_gen_get_hz+0x94>)
    2986:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2988:	4b1f      	ldr	r3, [pc, #124]	; (2a08 <system_gclk_gen_get_hz+0x98>)
    298a:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    298c:	4b1c      	ldr	r3, [pc, #112]	; (2a00 <system_gclk_gen_get_hz+0x90>)
    298e:	785b      	ldrb	r3, [r3, #1]
    2990:	b25b      	sxtb	r3, r3
    2992:	2b00      	cmp	r3, #0
    2994:	db2a      	blt.n	29ec <system_gclk_gen_get_hz+0x7c>
	return false;
    2996:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    2998:	2c00      	cmp	r4, #0
    299a:	d1f7      	bne.n	298c <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    299c:	4e18      	ldr	r6, [pc, #96]	; (2a00 <system_gclk_gen_get_hz+0x90>)
    299e:	6870      	ldr	r0, [r6, #4]
    29a0:	04c0      	lsls	r0, r0, #19
    29a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    29a4:	4b19      	ldr	r3, [pc, #100]	; (2a0c <system_gclk_gen_get_hz+0x9c>)
    29a6:	4798      	blx	r3
    29a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    29aa:	4b17      	ldr	r3, [pc, #92]	; (2a08 <system_gclk_gen_get_hz+0x98>)
    29ac:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    29ae:	6876      	ldr	r6, [r6, #4]
    29b0:	02f6      	lsls	r6, r6, #11
    29b2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    29b4:	4b16      	ldr	r3, [pc, #88]	; (2a10 <system_gclk_gen_get_hz+0xa0>)
    29b6:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29b8:	4b11      	ldr	r3, [pc, #68]	; (2a00 <system_gclk_gen_get_hz+0x90>)
    29ba:	785b      	ldrb	r3, [r3, #1]
    29bc:	b25b      	sxtb	r3, r3
    29be:	2b00      	cmp	r3, #0
    29c0:	db16      	blt.n	29f0 <system_gclk_gen_get_hz+0x80>
	return false;
    29c2:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    29c4:	2b00      	cmp	r3, #0
    29c6:	d1f7      	bne.n	29b8 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    29c8:	4b0d      	ldr	r3, [pc, #52]	; (2a00 <system_gclk_gen_get_hz+0x90>)
    29ca:	689c      	ldr	r4, [r3, #8]
    29cc:	0224      	lsls	r4, r4, #8
    29ce:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    29d0:	4b10      	ldr	r3, [pc, #64]	; (2a14 <system_gclk_gen_get_hz+0xa4>)
    29d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    29d4:	2e00      	cmp	r6, #0
    29d6:	d10d      	bne.n	29f4 <system_gclk_gen_get_hz+0x84>
    29d8:	2c01      	cmp	r4, #1
    29da:	d90b      	bls.n	29f4 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    29dc:	0021      	movs	r1, r4
    29de:	0028      	movs	r0, r5
    29e0:	4b0d      	ldr	r3, [pc, #52]	; (2a18 <system_gclk_gen_get_hz+0xa8>)
    29e2:	4798      	blx	r3
    29e4:	0005      	movs	r5, r0
    29e6:	e009      	b.n	29fc <system_gclk_gen_get_hz+0x8c>
		return true;
    29e8:	2501      	movs	r5, #1
    29ea:	e7c9      	b.n	2980 <system_gclk_gen_get_hz+0x10>
    29ec:	2401      	movs	r4, #1
    29ee:	e7d3      	b.n	2998 <system_gclk_gen_get_hz+0x28>
    29f0:	2301      	movs	r3, #1
    29f2:	e7e7      	b.n	29c4 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    29f4:	2e00      	cmp	r6, #0
    29f6:	d001      	beq.n	29fc <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    29f8:	3401      	adds	r4, #1
    29fa:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    29fc:	0028      	movs	r0, r5
    29fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a00:	40000c00 	.word	0x40000c00
    2a04:	00002595 	.word	0x00002595
    2a08:	40000c04 	.word	0x40000c04
    2a0c:	00002629 	.word	0x00002629
    2a10:	40000c08 	.word	0x40000c08
    2a14:	000025d5 	.word	0x000025d5
    2a18:	00002e99 	.word	0x00002e99

00002a1c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2a1c:	b510      	push	{r4, lr}
    2a1e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2a20:	4b06      	ldr	r3, [pc, #24]	; (2a3c <system_gclk_chan_enable+0x20>)
    2a22:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2a24:	4b06      	ldr	r3, [pc, #24]	; (2a40 <system_gclk_chan_enable+0x24>)
    2a26:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2a28:	4a06      	ldr	r2, [pc, #24]	; (2a44 <system_gclk_chan_enable+0x28>)
    2a2a:	8853      	ldrh	r3, [r2, #2]
    2a2c:	2180      	movs	r1, #128	; 0x80
    2a2e:	01c9      	lsls	r1, r1, #7
    2a30:	430b      	orrs	r3, r1
    2a32:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2a34:	4b04      	ldr	r3, [pc, #16]	; (2a48 <system_gclk_chan_enable+0x2c>)
    2a36:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2a38:	bd10      	pop	{r4, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	00002595 	.word	0x00002595
    2a40:	40000c02 	.word	0x40000c02
    2a44:	40000c00 	.word	0x40000c00
    2a48:	000025d5 	.word	0x000025d5

00002a4c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2a4c:	b510      	push	{r4, lr}
    2a4e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2a50:	4b0e      	ldr	r3, [pc, #56]	; (2a8c <system_gclk_chan_disable+0x40>)
    2a52:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2a54:	4b0e      	ldr	r3, [pc, #56]	; (2a90 <system_gclk_chan_disable+0x44>)
    2a56:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2a58:	490e      	ldr	r1, [pc, #56]	; (2a94 <system_gclk_chan_disable+0x48>)
    2a5a:	884b      	ldrh	r3, [r1, #2]
    2a5c:	051b      	lsls	r3, r3, #20
    2a5e:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2a60:	884b      	ldrh	r3, [r1, #2]
    2a62:	480d      	ldr	r0, [pc, #52]	; (2a98 <system_gclk_chan_disable+0x4c>)
    2a64:	4003      	ands	r3, r0
    2a66:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2a68:	884b      	ldrh	r3, [r1, #2]
    2a6a:	480c      	ldr	r0, [pc, #48]	; (2a9c <system_gclk_chan_disable+0x50>)
    2a6c:	4003      	ands	r3, r0
    2a6e:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2a70:	4b08      	ldr	r3, [pc, #32]	; (2a94 <system_gclk_chan_disable+0x48>)
    2a72:	885b      	ldrh	r3, [r3, #2]
    2a74:	045b      	lsls	r3, r3, #17
    2a76:	d4fb      	bmi.n	2a70 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2a78:	4806      	ldr	r0, [pc, #24]	; (2a94 <system_gclk_chan_disable+0x48>)
    2a7a:	8841      	ldrh	r1, [r0, #2]
    2a7c:	0213      	lsls	r3, r2, #8
    2a7e:	4a06      	ldr	r2, [pc, #24]	; (2a98 <system_gclk_chan_disable+0x4c>)
    2a80:	400a      	ands	r2, r1
    2a82:	4313      	orrs	r3, r2
    2a84:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    2a86:	4b06      	ldr	r3, [pc, #24]	; (2aa0 <system_gclk_chan_disable+0x54>)
    2a88:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2a8a:	bd10      	pop	{r4, pc}
    2a8c:	00002595 	.word	0x00002595
    2a90:	40000c02 	.word	0x40000c02
    2a94:	40000c00 	.word	0x40000c00
    2a98:	fffff0ff 	.word	0xfffff0ff
    2a9c:	ffffbfff 	.word	0xffffbfff
    2aa0:	000025d5 	.word	0x000025d5

00002aa4 <system_gclk_chan_set_config>:
{
    2aa4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2aa6:	780c      	ldrb	r4, [r1, #0]
    2aa8:	0224      	lsls	r4, r4, #8
    2aaa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2aac:	4b02      	ldr	r3, [pc, #8]	; (2ab8 <system_gclk_chan_set_config+0x14>)
    2aae:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2ab0:	b2a4      	uxth	r4, r4
    2ab2:	4b02      	ldr	r3, [pc, #8]	; (2abc <system_gclk_chan_set_config+0x18>)
    2ab4:	805c      	strh	r4, [r3, #2]
}
    2ab6:	bd10      	pop	{r4, pc}
    2ab8:	00002a4d 	.word	0x00002a4d
    2abc:	40000c00 	.word	0x40000c00

00002ac0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2ac0:	b510      	push	{r4, lr}
    2ac2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ac4:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <system_gclk_chan_get_hz+0x20>)
    2ac6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ac8:	4b06      	ldr	r3, [pc, #24]	; (2ae4 <system_gclk_chan_get_hz+0x24>)
    2aca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2acc:	4b06      	ldr	r3, [pc, #24]	; (2ae8 <system_gclk_chan_get_hz+0x28>)
    2ace:	885c      	ldrh	r4, [r3, #2]
    2ad0:	0524      	lsls	r4, r4, #20
    2ad2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2ad4:	4b05      	ldr	r3, [pc, #20]	; (2aec <system_gclk_chan_get_hz+0x2c>)
    2ad6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2ad8:	0020      	movs	r0, r4
    2ada:	4b05      	ldr	r3, [pc, #20]	; (2af0 <system_gclk_chan_get_hz+0x30>)
    2adc:	4798      	blx	r3
}
    2ade:	bd10      	pop	{r4, pc}
    2ae0:	00002595 	.word	0x00002595
    2ae4:	40000c02 	.word	0x40000c02
    2ae8:	40000c00 	.word	0x40000c00
    2aec:	000025d5 	.word	0x000025d5
    2af0:	00002971 	.word	0x00002971

00002af4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2af4:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2af6:	78d3      	ldrb	r3, [r2, #3]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d120      	bne.n	2b3e <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2afc:	7815      	ldrb	r5, [r2, #0]
    2afe:	2d80      	cmp	r5, #128	; 0x80
    2b00:	d01b      	beq.n	2b3a <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2b02:	062d      	lsls	r5, r5, #24
    2b04:	2380      	movs	r3, #128	; 0x80
    2b06:	025b      	lsls	r3, r3, #9
    2b08:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2b0a:	7853      	ldrb	r3, [r2, #1]
    2b0c:	2b00      	cmp	r3, #0
    2b0e:	d001      	beq.n	2b14 <_system_pinmux_config+0x20>
    2b10:	2b02      	cmp	r3, #2
    2b12:	d10a      	bne.n	2b2a <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2b14:	2380      	movs	r3, #128	; 0x80
    2b16:	029b      	lsls	r3, r3, #10
    2b18:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2b1a:	7894      	ldrb	r4, [r2, #2]
    2b1c:	2c00      	cmp	r4, #0
    2b1e:	d002      	beq.n	2b26 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2b20:	23c0      	movs	r3, #192	; 0xc0
    2b22:	02db      	lsls	r3, r3, #11
    2b24:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2b26:	6041      	str	r1, [r0, #4]
    2b28:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2b2a:	7853      	ldrb	r3, [r2, #1]
    2b2c:	3b01      	subs	r3, #1
    2b2e:	b2db      	uxtb	r3, r3
    2b30:	2b01      	cmp	r3, #1
    2b32:	d806      	bhi.n	2b42 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2b34:	4b13      	ldr	r3, [pc, #76]	; (2b84 <_system_pinmux_config+0x90>)
    2b36:	401d      	ands	r5, r3
    2b38:	e003      	b.n	2b42 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    2b3a:	2500      	movs	r5, #0
    2b3c:	e7e5      	b.n	2b0a <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2b3e:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    2b40:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2b42:	040c      	lsls	r4, r1, #16
    2b44:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2b46:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b48:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2b4a:	26a0      	movs	r6, #160	; 0xa0
    2b4c:	05f6      	lsls	r6, r6, #23
    2b4e:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b50:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b52:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2b54:	24d0      	movs	r4, #208	; 0xd0
    2b56:	0624      	lsls	r4, r4, #24
    2b58:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b5a:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2b5c:	78d3      	ldrb	r3, [r2, #3]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d10a      	bne.n	2b78 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2b62:	036b      	lsls	r3, r5, #13
    2b64:	d503      	bpl.n	2b6e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2b66:	7893      	ldrb	r3, [r2, #2]
    2b68:	2b01      	cmp	r3, #1
    2b6a:	d006      	beq.n	2b7a <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2b6c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2b6e:	7853      	ldrb	r3, [r2, #1]
    2b70:	3b01      	subs	r3, #1
    2b72:	b2db      	uxtb	r3, r3
    2b74:	2b01      	cmp	r3, #1
    2b76:	d902      	bls.n	2b7e <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2b78:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    2b7a:	6181      	str	r1, [r0, #24]
    2b7c:	e7f7      	b.n	2b6e <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    2b7e:	6081      	str	r1, [r0, #8]
}
    2b80:	e7fa      	b.n	2b78 <_system_pinmux_config+0x84>
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	fffbffff 	.word	0xfffbffff

00002b88 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2b88:	b510      	push	{r4, lr}
    2b8a:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    2b8c:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    2b8e:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    2b90:	2900      	cmp	r1, #0
    2b92:	d10b      	bne.n	2bac <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    2b94:	01db      	lsls	r3, r3, #7
    2b96:	4906      	ldr	r1, [pc, #24]	; (2bb0 <system_pinmux_pin_set_config+0x28>)
    2b98:	468c      	mov	ip, r1
    2b9a:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2b9c:	241f      	movs	r4, #31
    2b9e:	4020      	ands	r0, r4
    2ba0:	2101      	movs	r1, #1
    2ba2:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2ba4:	0018      	movs	r0, r3
    2ba6:	4b03      	ldr	r3, [pc, #12]	; (2bb4 <system_pinmux_pin_set_config+0x2c>)
    2ba8:	4798      	blx	r3
}
    2baa:	bd10      	pop	{r4, pc}
		return NULL;
    2bac:	2300      	movs	r3, #0
    2bae:	e7f5      	b.n	2b9c <system_pinmux_pin_set_config+0x14>
    2bb0:	41004400 	.word	0x41004400
    2bb4:	00002af5 	.word	0x00002af5

00002bb8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2bb8:	4770      	bx	lr
	...

00002bbc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2bbc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2bbe:	4b05      	ldr	r3, [pc, #20]	; (2bd4 <system_init+0x18>)
    2bc0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2bc2:	4b05      	ldr	r3, [pc, #20]	; (2bd8 <system_init+0x1c>)
    2bc4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2bc6:	4b05      	ldr	r3, [pc, #20]	; (2bdc <system_init+0x20>)
    2bc8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2bca:	4b05      	ldr	r3, [pc, #20]	; (2be0 <system_init+0x24>)
    2bcc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2bce:	4b05      	ldr	r3, [pc, #20]	; (2be4 <system_init+0x28>)
    2bd0:	4798      	blx	r3
}
    2bd2:	bd10      	pop	{r4, pc}
    2bd4:	000027a1 	.word	0x000027a1
    2bd8:	00002591 	.word	0x00002591
    2bdc:	00002bb9 	.word	0x00002bb9
    2be0:	00002bb9 	.word	0x00002bb9
    2be4:	00002bb9 	.word	0x00002bb9

00002be8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2be8:	e7fe      	b.n	2be8 <Dummy_Handler>
	...

00002bec <Reset_Handler>:
{
    2bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2bee:	4a23      	ldr	r2, [pc, #140]	; (2c7c <Reset_Handler+0x90>)
    2bf0:	4b23      	ldr	r3, [pc, #140]	; (2c80 <Reset_Handler+0x94>)
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d009      	beq.n	2c0a <Reset_Handler+0x1e>
    2bf6:	4b22      	ldr	r3, [pc, #136]	; (2c80 <Reset_Handler+0x94>)
    2bf8:	4a20      	ldr	r2, [pc, #128]	; (2c7c <Reset_Handler+0x90>)
    2bfa:	e003      	b.n	2c04 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    2bfc:	6811      	ldr	r1, [r2, #0]
    2bfe:	6019      	str	r1, [r3, #0]
    2c00:	3304      	adds	r3, #4
    2c02:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2c04:	491f      	ldr	r1, [pc, #124]	; (2c84 <Reset_Handler+0x98>)
    2c06:	428b      	cmp	r3, r1
    2c08:	d3f8      	bcc.n	2bfc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    2c0a:	4b1f      	ldr	r3, [pc, #124]	; (2c88 <Reset_Handler+0x9c>)
    2c0c:	e002      	b.n	2c14 <Reset_Handler+0x28>
                *pDest++ = 0;
    2c0e:	2200      	movs	r2, #0
    2c10:	601a      	str	r2, [r3, #0]
    2c12:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    2c14:	4a1d      	ldr	r2, [pc, #116]	; (2c8c <Reset_Handler+0xa0>)
    2c16:	4293      	cmp	r3, r2
    2c18:	d3f9      	bcc.n	2c0e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2c1a:	4a1d      	ldr	r2, [pc, #116]	; (2c90 <Reset_Handler+0xa4>)
    2c1c:	21ff      	movs	r1, #255	; 0xff
    2c1e:	4b1d      	ldr	r3, [pc, #116]	; (2c94 <Reset_Handler+0xa8>)
    2c20:	438b      	bics	r3, r1
    2c22:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2c24:	39fd      	subs	r1, #253	; 0xfd
    2c26:	2390      	movs	r3, #144	; 0x90
    2c28:	005b      	lsls	r3, r3, #1
    2c2a:	4a1b      	ldr	r2, [pc, #108]	; (2c98 <Reset_Handler+0xac>)
    2c2c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2c2e:	4a1b      	ldr	r2, [pc, #108]	; (2c9c <Reset_Handler+0xb0>)
    2c30:	78d3      	ldrb	r3, [r2, #3]
    2c32:	2503      	movs	r5, #3
    2c34:	43ab      	bics	r3, r5
    2c36:	2402      	movs	r4, #2
    2c38:	4323      	orrs	r3, r4
    2c3a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2c3c:	78d3      	ldrb	r3, [r2, #3]
    2c3e:	270c      	movs	r7, #12
    2c40:	43bb      	bics	r3, r7
    2c42:	2608      	movs	r6, #8
    2c44:	4333      	orrs	r3, r6
    2c46:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2c48:	4b15      	ldr	r3, [pc, #84]	; (2ca0 <Reset_Handler+0xb4>)
    2c4a:	7b98      	ldrb	r0, [r3, #14]
    2c4c:	2230      	movs	r2, #48	; 0x30
    2c4e:	4390      	bics	r0, r2
    2c50:	2220      	movs	r2, #32
    2c52:	4310      	orrs	r0, r2
    2c54:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2c56:	7b99      	ldrb	r1, [r3, #14]
    2c58:	43b9      	bics	r1, r7
    2c5a:	4331      	orrs	r1, r6
    2c5c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2c5e:	7b9a      	ldrb	r2, [r3, #14]
    2c60:	43aa      	bics	r2, r5
    2c62:	4322      	orrs	r2, r4
    2c64:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2c66:	4a0f      	ldr	r2, [pc, #60]	; (2ca4 <Reset_Handler+0xb8>)
    2c68:	6851      	ldr	r1, [r2, #4]
    2c6a:	2380      	movs	r3, #128	; 0x80
    2c6c:	430b      	orrs	r3, r1
    2c6e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2c70:	4b0d      	ldr	r3, [pc, #52]	; (2ca8 <Reset_Handler+0xbc>)
    2c72:	4798      	blx	r3
        main();
    2c74:	4b0d      	ldr	r3, [pc, #52]	; (2cac <Reset_Handler+0xc0>)
    2c76:	4798      	blx	r3
    2c78:	e7fe      	b.n	2c78 <Reset_Handler+0x8c>
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	00003910 	.word	0x00003910
    2c80:	20000000 	.word	0x20000000
    2c84:	200001ec 	.word	0x200001ec
    2c88:	200001ec 	.word	0x200001ec
    2c8c:	200003f0 	.word	0x200003f0
    2c90:	e000ed00 	.word	0xe000ed00
    2c94:	00000000 	.word	0x00000000
    2c98:	41007000 	.word	0x41007000
    2c9c:	41005000 	.word	0x41005000
    2ca0:	41004800 	.word	0x41004800
    2ca4:	41004000 	.word	0x41004000
    2ca8:	0000352d 	.word	0x0000352d
    2cac:	00002e1d 	.word	0x00002e1d

00002cb0 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    2cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cb2:	46ce      	mov	lr, r9
    2cb4:	4647      	mov	r7, r8
    2cb6:	b580      	push	{r7, lr}
    2cb8:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    2cba:	ac01      	add	r4, sp, #4
    2cbc:	2300      	movs	r3, #0
    2cbe:	4698      	mov	r8, r3
    2cc0:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2cc2:	2601      	movs	r6, #1
    2cc4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2cc6:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    2cc8:	0021      	movs	r1, r4
    2cca:	2007      	movs	r0, #7
    2ccc:	4d24      	ldr	r5, [pc, #144]	; (2d60 <conf_port_pin+0xb0>)
    2cce:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2cd0:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    2cd2:	0021      	movs	r1, r4
    2cd4:	2006      	movs	r0, #6
    2cd6:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    2cd8:	4f22      	ldr	r7, [pc, #136]	; (2d64 <conf_port_pin+0xb4>)
    2cda:	2340      	movs	r3, #64	; 0x40
    2cdc:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    2cde:	0021      	movs	r1, r4
    2ce0:	2001      	movs	r0, #1
    2ce2:	47a8      	blx	r5
    2ce4:	2302      	movs	r3, #2
    2ce6:	4699      	mov	r9, r3
    2ce8:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    2cea:	0021      	movs	r1, r4
    2cec:	2002      	movs	r0, #2
    2cee:	47a8      	blx	r5
    2cf0:	2304      	movs	r3, #4
    2cf2:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    2cf4:	0021      	movs	r1, r4
    2cf6:	2003      	movs	r0, #3
    2cf8:	47a8      	blx	r5
    2cfa:	2308      	movs	r3, #8
    2cfc:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    2cfe:	4643      	mov	r3, r8
    2d00:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2d02:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    2d04:	0021      	movs	r1, r4
    2d06:	200b      	movs	r0, #11
    2d08:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2d0a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    2d0c:	0021      	movs	r1, r4
    2d0e:	200a      	movs	r0, #10
    2d10:	47a8      	blx	r5
    2d12:	2380      	movs	r3, #128	; 0x80
    2d14:	00db      	lsls	r3, r3, #3
    2d16:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2d18:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    2d1a:	464b      	mov	r3, r9
    2d1c:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    2d1e:	0021      	movs	r1, r4
    2d20:	200e      	movs	r0, #14
    2d22:	47a8      	blx	r5
    2d24:	2380      	movs	r3, #128	; 0x80
    2d26:	01db      	lsls	r3, r3, #7
    2d28:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(WAKE915, true);

    // REMOVE THIS AFTER TESTing
    config_port_pin.direction = PORT_PIN_DIR_INPUT;
    2d2a:	4643      	mov	r3, r8
    2d2c:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2d2e:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(PIN_PA08, &config_port_pin);
    2d30:	0021      	movs	r1, r4
    2d32:	2008      	movs	r0, #8
    2d34:	47a8      	blx	r5
    port_pin_set_config(PIN_PA09, &config_port_pin);
    2d36:	0021      	movs	r1, r4
    2d38:	2009      	movs	r0, #9
    2d3a:	47a8      	blx	r5
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2d3c:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2d3e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    2d40:	0021      	movs	r1, r4
    2d42:	2018      	movs	r0, #24
    2d44:	47a8      	blx	r5
    2d46:	2380      	movs	r3, #128	; 0x80
    2d48:	045b      	lsls	r3, r3, #17
    2d4a:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    2d4c:	4643      	mov	r3, r8
    2d4e:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    2d50:	0021      	movs	r1, r4
    2d52:	201b      	movs	r0, #27
    2d54:	47a8      	blx	r5
} // end conf_port_pin(void)
    2d56:	b003      	add	sp, #12
    2d58:	bc0c      	pop	{r2, r3}
    2d5a:	4690      	mov	r8, r2
    2d5c:	4699      	mov	r9, r3
    2d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d60:	00000f85 	.word	0x00000f85
    2d64:	41004400 	.word	0x41004400

00002d68 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    2d68:	b500      	push	{lr}
    2d6a:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    2d6c:	a801      	add	r0, sp, #4
    2d6e:	2300      	movs	r3, #0
    2d70:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    2d72:	2201      	movs	r2, #1
    2d74:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    2d76:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    2d78:	4b01      	ldr	r3, [pc, #4]	; (2d80 <clk_osc8m_init+0x18>)
    2d7a:	4798      	blx	r3
}
    2d7c:	b003      	add	sp, #12
    2d7e:	bd00      	pop	{pc}
    2d80:	000026b9 	.word	0x000026b9

00002d84 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    2d84:	b500      	push	{lr}
    2d86:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    2d88:	4b0a      	ldr	r3, [pc, #40]	; (2db4 <clk_gclk0_init+0x30>)
    2d8a:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2d8c:	2300      	movs	r3, #0
    2d8e:	4a0a      	ldr	r2, [pc, #40]	; (2db8 <clk_gclk0_init+0x34>)
    2d90:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    2d92:	a901      	add	r1, sp, #4
    2d94:	2206      	movs	r2, #6
    2d96:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    2d98:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    2d9a:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    2d9c:	3a05      	subs	r2, #5
    2d9e:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    2da0:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    2da2:	2000      	movs	r0, #0
    2da4:	4b05      	ldr	r3, [pc, #20]	; (2dbc <clk_gclk0_init+0x38>)
    2da6:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    2da8:	2000      	movs	r0, #0
    2daa:	4b05      	ldr	r3, [pc, #20]	; (2dc0 <clk_gclk0_init+0x3c>)
    2dac:	4798      	blx	r3
}
    2dae:	b005      	add	sp, #20
    2db0:	bd00      	pop	{pc}
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	00002825 	.word	0x00002825
    2db8:	40000400 	.word	0x40000400
    2dbc:	00002849 	.word	0x00002849
    2dc0:	00002919 	.word	0x00002919

00002dc4 <sys_clk_init>:
{
    2dc4:	b510      	push	{r4, lr}
	clk_osc8m_init();
    2dc6:	4b03      	ldr	r3, [pc, #12]	; (2dd4 <sys_clk_init+0x10>)
    2dc8:	4798      	blx	r3
	clk_gclk0_init();
    2dca:	4b03      	ldr	r3, [pc, #12]	; (2dd8 <sys_clk_init+0x14>)
    2dcc:	4798      	blx	r3
    delay_init();
    2dce:	4b03      	ldr	r3, [pc, #12]	; (2ddc <sys_clk_init+0x18>)
    2dd0:	4798      	blx	r3
}
    2dd2:	bd10      	pop	{r4, pc}
    2dd4:	00002d69 	.word	0x00002d69
    2dd8:	00002d85 	.word	0x00002d85
    2ddc:	00000f19 	.word	0x00000f19

00002de0 <simSysInit>:
{
    2de0:	b510      	push	{r4, lr}
	system_init();
    2de2:	4b07      	ldr	r3, [pc, #28]	; (2e00 <simSysInit+0x20>)
    2de4:	4798      	blx	r3
	sys_clk_init();
    2de6:	4b07      	ldr	r3, [pc, #28]	; (2e04 <simSysInit+0x24>)
    2de8:	4798      	blx	r3
	conf_port_pin();
    2dea:	4b07      	ldr	r3, [pc, #28]	; (2e08 <simSysInit+0x28>)
    2dec:	4798      	blx	r3
    spi40_init();
    2dee:	4b07      	ldr	r3, [pc, #28]	; (2e0c <simSysInit+0x2c>)
    2df0:	4798      	blx	r3
    uart245_init();
    2df2:	4b07      	ldr	r3, [pc, #28]	; (2e10 <simSysInit+0x30>)
    2df4:	4798      	blx	r3
    uart915_init();
    2df6:	4b07      	ldr	r3, [pc, #28]	; (2e14 <simSysInit+0x34>)
    2df8:	4798      	blx	r3
    uartfiber_init();
    2dfa:	4b07      	ldr	r3, [pc, #28]	; (2e18 <simSysInit+0x38>)
    2dfc:	4798      	blx	r3
}
    2dfe:	bd10      	pop	{r4, pc}
    2e00:	00002bbd 	.word	0x00002bbd
    2e04:	00002dc5 	.word	0x00002dc5
    2e08:	00002cb1 	.word	0x00002cb1
    2e0c:	000001c5 	.word	0x000001c5
    2e10:	00000945 	.word	0x00000945
    2e14:	00000bcd 	.word	0x00000bcd
    2e18:	00000e49 	.word	0x00000e49

00002e1c <main>:
{
    2e1c:	b510      	push	{r4, lr}
    2e1e:	b082      	sub	sp, #8
    rssi_vals acquired_rssi = {10, 20, 30};
    2e20:	4b13      	ldr	r3, [pc, #76]	; (2e70 <main+0x54>)
    2e22:	681a      	ldr	r2, [r3, #0]
    2e24:	9200      	str	r2, [sp, #0]
    2e26:	889b      	ldrh	r3, [r3, #4]
    2e28:	466a      	mov	r2, sp
    2e2a:	8093      	strh	r3, [r2, #4]
    simSysInit();
    2e2c:	4b11      	ldr	r3, [pc, #68]	; (2e74 <main+0x58>)
    2e2e:	4798      	blx	r3
    delay_ms(100);
    2e30:	2064      	movs	r0, #100	; 0x64
    2e32:	4b11      	ldr	r3, [pc, #68]	; (2e78 <main+0x5c>)
    2e34:	4798      	blx	r3
    spi40_init_test10();
    2e36:	4b11      	ldr	r3, [pc, #68]	; (2e7c <main+0x60>)
    2e38:	4798      	blx	r3
    uart245_enter_config();
    2e3a:	4b11      	ldr	r3, [pc, #68]	; (2e80 <main+0x64>)
    2e3c:	4798      	blx	r3
    uartfiber_init_rssi(&acquired_rssi);
    2e3e:	4668      	mov	r0, sp
    2e40:	4b10      	ldr	r3, [pc, #64]	; (2e84 <main+0x68>)
    2e42:	4798      	blx	r3
        acquired_rssi.rssi169 = spi40_rssi();
    2e44:	4b10      	ldr	r3, [pc, #64]	; (2e88 <main+0x6c>)
    2e46:	4798      	blx	r3
    2e48:	466b      	mov	r3, sp
    2e4a:	8018      	strh	r0, [r3, #0]
        acquired_rssi.rssi915 = uart915_get_rssi();
    2e4c:	4b0f      	ldr	r3, [pc, #60]	; (2e8c <main+0x70>)
    2e4e:	4798      	blx	r3
    2e50:	466b      	mov	r3, sp
    2e52:	8058      	strh	r0, [r3, #2]
        delay_ms(1000);
    2e54:	20fa      	movs	r0, #250	; 0xfa
    2e56:	0080      	lsls	r0, r0, #2
    2e58:	4c07      	ldr	r4, [pc, #28]	; (2e78 <main+0x5c>)
    2e5a:	47a0      	blx	r4
        acquired_rssi.rssi245 = uart245_config_get_rssi();
    2e5c:	4b0c      	ldr	r3, [pc, #48]	; (2e90 <main+0x74>)
    2e5e:	4798      	blx	r3
    2e60:	4b0c      	ldr	r3, [pc, #48]	; (2e94 <main+0x78>)
    2e62:	4798      	blx	r3
    2e64:	b200      	sxth	r0, r0
    2e66:	466b      	mov	r3, sp
    2e68:	8098      	strh	r0, [r3, #4]
        delay_ms(100);
    2e6a:	2064      	movs	r0, #100	; 0x64
    2e6c:	47a0      	blx	r4
    2e6e:	e7e9      	b.n	2e44 <main+0x28>
    2e70:	0000379c 	.word	0x0000379c
    2e74:	00002de1 	.word	0x00002de1
    2e78:	00000f55 	.word	0x00000f55
    2e7c:	000003fd 	.word	0x000003fd
    2e80:	00000a4d 	.word	0x00000a4d
    2e84:	00000f0d 	.word	0x00000f0d
    2e88:	0000092d 	.word	0x0000092d
    2e8c:	00000cdd 	.word	0x00000cdd
    2e90:	00000a79 	.word	0x00000a79
    2e94:	00003419 	.word	0x00003419

00002e98 <__udivsi3>:
    2e98:	2200      	movs	r2, #0
    2e9a:	0843      	lsrs	r3, r0, #1
    2e9c:	428b      	cmp	r3, r1
    2e9e:	d374      	bcc.n	2f8a <__udivsi3+0xf2>
    2ea0:	0903      	lsrs	r3, r0, #4
    2ea2:	428b      	cmp	r3, r1
    2ea4:	d35f      	bcc.n	2f66 <__udivsi3+0xce>
    2ea6:	0a03      	lsrs	r3, r0, #8
    2ea8:	428b      	cmp	r3, r1
    2eaa:	d344      	bcc.n	2f36 <__udivsi3+0x9e>
    2eac:	0b03      	lsrs	r3, r0, #12
    2eae:	428b      	cmp	r3, r1
    2eb0:	d328      	bcc.n	2f04 <__udivsi3+0x6c>
    2eb2:	0c03      	lsrs	r3, r0, #16
    2eb4:	428b      	cmp	r3, r1
    2eb6:	d30d      	bcc.n	2ed4 <__udivsi3+0x3c>
    2eb8:	22ff      	movs	r2, #255	; 0xff
    2eba:	0209      	lsls	r1, r1, #8
    2ebc:	ba12      	rev	r2, r2
    2ebe:	0c03      	lsrs	r3, r0, #16
    2ec0:	428b      	cmp	r3, r1
    2ec2:	d302      	bcc.n	2eca <__udivsi3+0x32>
    2ec4:	1212      	asrs	r2, r2, #8
    2ec6:	0209      	lsls	r1, r1, #8
    2ec8:	d065      	beq.n	2f96 <__udivsi3+0xfe>
    2eca:	0b03      	lsrs	r3, r0, #12
    2ecc:	428b      	cmp	r3, r1
    2ece:	d319      	bcc.n	2f04 <__udivsi3+0x6c>
    2ed0:	e000      	b.n	2ed4 <__udivsi3+0x3c>
    2ed2:	0a09      	lsrs	r1, r1, #8
    2ed4:	0bc3      	lsrs	r3, r0, #15
    2ed6:	428b      	cmp	r3, r1
    2ed8:	d301      	bcc.n	2ede <__udivsi3+0x46>
    2eda:	03cb      	lsls	r3, r1, #15
    2edc:	1ac0      	subs	r0, r0, r3
    2ede:	4152      	adcs	r2, r2
    2ee0:	0b83      	lsrs	r3, r0, #14
    2ee2:	428b      	cmp	r3, r1
    2ee4:	d301      	bcc.n	2eea <__udivsi3+0x52>
    2ee6:	038b      	lsls	r3, r1, #14
    2ee8:	1ac0      	subs	r0, r0, r3
    2eea:	4152      	adcs	r2, r2
    2eec:	0b43      	lsrs	r3, r0, #13
    2eee:	428b      	cmp	r3, r1
    2ef0:	d301      	bcc.n	2ef6 <__udivsi3+0x5e>
    2ef2:	034b      	lsls	r3, r1, #13
    2ef4:	1ac0      	subs	r0, r0, r3
    2ef6:	4152      	adcs	r2, r2
    2ef8:	0b03      	lsrs	r3, r0, #12
    2efa:	428b      	cmp	r3, r1
    2efc:	d301      	bcc.n	2f02 <__udivsi3+0x6a>
    2efe:	030b      	lsls	r3, r1, #12
    2f00:	1ac0      	subs	r0, r0, r3
    2f02:	4152      	adcs	r2, r2
    2f04:	0ac3      	lsrs	r3, r0, #11
    2f06:	428b      	cmp	r3, r1
    2f08:	d301      	bcc.n	2f0e <__udivsi3+0x76>
    2f0a:	02cb      	lsls	r3, r1, #11
    2f0c:	1ac0      	subs	r0, r0, r3
    2f0e:	4152      	adcs	r2, r2
    2f10:	0a83      	lsrs	r3, r0, #10
    2f12:	428b      	cmp	r3, r1
    2f14:	d301      	bcc.n	2f1a <__udivsi3+0x82>
    2f16:	028b      	lsls	r3, r1, #10
    2f18:	1ac0      	subs	r0, r0, r3
    2f1a:	4152      	adcs	r2, r2
    2f1c:	0a43      	lsrs	r3, r0, #9
    2f1e:	428b      	cmp	r3, r1
    2f20:	d301      	bcc.n	2f26 <__udivsi3+0x8e>
    2f22:	024b      	lsls	r3, r1, #9
    2f24:	1ac0      	subs	r0, r0, r3
    2f26:	4152      	adcs	r2, r2
    2f28:	0a03      	lsrs	r3, r0, #8
    2f2a:	428b      	cmp	r3, r1
    2f2c:	d301      	bcc.n	2f32 <__udivsi3+0x9a>
    2f2e:	020b      	lsls	r3, r1, #8
    2f30:	1ac0      	subs	r0, r0, r3
    2f32:	4152      	adcs	r2, r2
    2f34:	d2cd      	bcs.n	2ed2 <__udivsi3+0x3a>
    2f36:	09c3      	lsrs	r3, r0, #7
    2f38:	428b      	cmp	r3, r1
    2f3a:	d301      	bcc.n	2f40 <__udivsi3+0xa8>
    2f3c:	01cb      	lsls	r3, r1, #7
    2f3e:	1ac0      	subs	r0, r0, r3
    2f40:	4152      	adcs	r2, r2
    2f42:	0983      	lsrs	r3, r0, #6
    2f44:	428b      	cmp	r3, r1
    2f46:	d301      	bcc.n	2f4c <__udivsi3+0xb4>
    2f48:	018b      	lsls	r3, r1, #6
    2f4a:	1ac0      	subs	r0, r0, r3
    2f4c:	4152      	adcs	r2, r2
    2f4e:	0943      	lsrs	r3, r0, #5
    2f50:	428b      	cmp	r3, r1
    2f52:	d301      	bcc.n	2f58 <__udivsi3+0xc0>
    2f54:	014b      	lsls	r3, r1, #5
    2f56:	1ac0      	subs	r0, r0, r3
    2f58:	4152      	adcs	r2, r2
    2f5a:	0903      	lsrs	r3, r0, #4
    2f5c:	428b      	cmp	r3, r1
    2f5e:	d301      	bcc.n	2f64 <__udivsi3+0xcc>
    2f60:	010b      	lsls	r3, r1, #4
    2f62:	1ac0      	subs	r0, r0, r3
    2f64:	4152      	adcs	r2, r2
    2f66:	08c3      	lsrs	r3, r0, #3
    2f68:	428b      	cmp	r3, r1
    2f6a:	d301      	bcc.n	2f70 <__udivsi3+0xd8>
    2f6c:	00cb      	lsls	r3, r1, #3
    2f6e:	1ac0      	subs	r0, r0, r3
    2f70:	4152      	adcs	r2, r2
    2f72:	0883      	lsrs	r3, r0, #2
    2f74:	428b      	cmp	r3, r1
    2f76:	d301      	bcc.n	2f7c <__udivsi3+0xe4>
    2f78:	008b      	lsls	r3, r1, #2
    2f7a:	1ac0      	subs	r0, r0, r3
    2f7c:	4152      	adcs	r2, r2
    2f7e:	0843      	lsrs	r3, r0, #1
    2f80:	428b      	cmp	r3, r1
    2f82:	d301      	bcc.n	2f88 <__udivsi3+0xf0>
    2f84:	004b      	lsls	r3, r1, #1
    2f86:	1ac0      	subs	r0, r0, r3
    2f88:	4152      	adcs	r2, r2
    2f8a:	1a41      	subs	r1, r0, r1
    2f8c:	d200      	bcs.n	2f90 <__udivsi3+0xf8>
    2f8e:	4601      	mov	r1, r0
    2f90:	4152      	adcs	r2, r2
    2f92:	4610      	mov	r0, r2
    2f94:	4770      	bx	lr
    2f96:	e7ff      	b.n	2f98 <__udivsi3+0x100>
    2f98:	b501      	push	{r0, lr}
    2f9a:	2000      	movs	r0, #0
    2f9c:	f000 f8f0 	bl	3180 <__aeabi_idiv0>
    2fa0:	bd02      	pop	{r1, pc}
    2fa2:	46c0      	nop			; (mov r8, r8)

00002fa4 <__aeabi_uidivmod>:
    2fa4:	2900      	cmp	r1, #0
    2fa6:	d0f7      	beq.n	2f98 <__udivsi3+0x100>
    2fa8:	e776      	b.n	2e98 <__udivsi3>
    2faa:	4770      	bx	lr

00002fac <__divsi3>:
    2fac:	4603      	mov	r3, r0
    2fae:	430b      	orrs	r3, r1
    2fb0:	d47f      	bmi.n	30b2 <__divsi3+0x106>
    2fb2:	2200      	movs	r2, #0
    2fb4:	0843      	lsrs	r3, r0, #1
    2fb6:	428b      	cmp	r3, r1
    2fb8:	d374      	bcc.n	30a4 <__divsi3+0xf8>
    2fba:	0903      	lsrs	r3, r0, #4
    2fbc:	428b      	cmp	r3, r1
    2fbe:	d35f      	bcc.n	3080 <__divsi3+0xd4>
    2fc0:	0a03      	lsrs	r3, r0, #8
    2fc2:	428b      	cmp	r3, r1
    2fc4:	d344      	bcc.n	3050 <__divsi3+0xa4>
    2fc6:	0b03      	lsrs	r3, r0, #12
    2fc8:	428b      	cmp	r3, r1
    2fca:	d328      	bcc.n	301e <__divsi3+0x72>
    2fcc:	0c03      	lsrs	r3, r0, #16
    2fce:	428b      	cmp	r3, r1
    2fd0:	d30d      	bcc.n	2fee <__divsi3+0x42>
    2fd2:	22ff      	movs	r2, #255	; 0xff
    2fd4:	0209      	lsls	r1, r1, #8
    2fd6:	ba12      	rev	r2, r2
    2fd8:	0c03      	lsrs	r3, r0, #16
    2fda:	428b      	cmp	r3, r1
    2fdc:	d302      	bcc.n	2fe4 <__divsi3+0x38>
    2fde:	1212      	asrs	r2, r2, #8
    2fe0:	0209      	lsls	r1, r1, #8
    2fe2:	d065      	beq.n	30b0 <__divsi3+0x104>
    2fe4:	0b03      	lsrs	r3, r0, #12
    2fe6:	428b      	cmp	r3, r1
    2fe8:	d319      	bcc.n	301e <__divsi3+0x72>
    2fea:	e000      	b.n	2fee <__divsi3+0x42>
    2fec:	0a09      	lsrs	r1, r1, #8
    2fee:	0bc3      	lsrs	r3, r0, #15
    2ff0:	428b      	cmp	r3, r1
    2ff2:	d301      	bcc.n	2ff8 <__divsi3+0x4c>
    2ff4:	03cb      	lsls	r3, r1, #15
    2ff6:	1ac0      	subs	r0, r0, r3
    2ff8:	4152      	adcs	r2, r2
    2ffa:	0b83      	lsrs	r3, r0, #14
    2ffc:	428b      	cmp	r3, r1
    2ffe:	d301      	bcc.n	3004 <__divsi3+0x58>
    3000:	038b      	lsls	r3, r1, #14
    3002:	1ac0      	subs	r0, r0, r3
    3004:	4152      	adcs	r2, r2
    3006:	0b43      	lsrs	r3, r0, #13
    3008:	428b      	cmp	r3, r1
    300a:	d301      	bcc.n	3010 <__divsi3+0x64>
    300c:	034b      	lsls	r3, r1, #13
    300e:	1ac0      	subs	r0, r0, r3
    3010:	4152      	adcs	r2, r2
    3012:	0b03      	lsrs	r3, r0, #12
    3014:	428b      	cmp	r3, r1
    3016:	d301      	bcc.n	301c <__divsi3+0x70>
    3018:	030b      	lsls	r3, r1, #12
    301a:	1ac0      	subs	r0, r0, r3
    301c:	4152      	adcs	r2, r2
    301e:	0ac3      	lsrs	r3, r0, #11
    3020:	428b      	cmp	r3, r1
    3022:	d301      	bcc.n	3028 <__divsi3+0x7c>
    3024:	02cb      	lsls	r3, r1, #11
    3026:	1ac0      	subs	r0, r0, r3
    3028:	4152      	adcs	r2, r2
    302a:	0a83      	lsrs	r3, r0, #10
    302c:	428b      	cmp	r3, r1
    302e:	d301      	bcc.n	3034 <__divsi3+0x88>
    3030:	028b      	lsls	r3, r1, #10
    3032:	1ac0      	subs	r0, r0, r3
    3034:	4152      	adcs	r2, r2
    3036:	0a43      	lsrs	r3, r0, #9
    3038:	428b      	cmp	r3, r1
    303a:	d301      	bcc.n	3040 <__divsi3+0x94>
    303c:	024b      	lsls	r3, r1, #9
    303e:	1ac0      	subs	r0, r0, r3
    3040:	4152      	adcs	r2, r2
    3042:	0a03      	lsrs	r3, r0, #8
    3044:	428b      	cmp	r3, r1
    3046:	d301      	bcc.n	304c <__divsi3+0xa0>
    3048:	020b      	lsls	r3, r1, #8
    304a:	1ac0      	subs	r0, r0, r3
    304c:	4152      	adcs	r2, r2
    304e:	d2cd      	bcs.n	2fec <__divsi3+0x40>
    3050:	09c3      	lsrs	r3, r0, #7
    3052:	428b      	cmp	r3, r1
    3054:	d301      	bcc.n	305a <__divsi3+0xae>
    3056:	01cb      	lsls	r3, r1, #7
    3058:	1ac0      	subs	r0, r0, r3
    305a:	4152      	adcs	r2, r2
    305c:	0983      	lsrs	r3, r0, #6
    305e:	428b      	cmp	r3, r1
    3060:	d301      	bcc.n	3066 <__divsi3+0xba>
    3062:	018b      	lsls	r3, r1, #6
    3064:	1ac0      	subs	r0, r0, r3
    3066:	4152      	adcs	r2, r2
    3068:	0943      	lsrs	r3, r0, #5
    306a:	428b      	cmp	r3, r1
    306c:	d301      	bcc.n	3072 <__divsi3+0xc6>
    306e:	014b      	lsls	r3, r1, #5
    3070:	1ac0      	subs	r0, r0, r3
    3072:	4152      	adcs	r2, r2
    3074:	0903      	lsrs	r3, r0, #4
    3076:	428b      	cmp	r3, r1
    3078:	d301      	bcc.n	307e <__divsi3+0xd2>
    307a:	010b      	lsls	r3, r1, #4
    307c:	1ac0      	subs	r0, r0, r3
    307e:	4152      	adcs	r2, r2
    3080:	08c3      	lsrs	r3, r0, #3
    3082:	428b      	cmp	r3, r1
    3084:	d301      	bcc.n	308a <__divsi3+0xde>
    3086:	00cb      	lsls	r3, r1, #3
    3088:	1ac0      	subs	r0, r0, r3
    308a:	4152      	adcs	r2, r2
    308c:	0883      	lsrs	r3, r0, #2
    308e:	428b      	cmp	r3, r1
    3090:	d301      	bcc.n	3096 <__divsi3+0xea>
    3092:	008b      	lsls	r3, r1, #2
    3094:	1ac0      	subs	r0, r0, r3
    3096:	4152      	adcs	r2, r2
    3098:	0843      	lsrs	r3, r0, #1
    309a:	428b      	cmp	r3, r1
    309c:	d301      	bcc.n	30a2 <__divsi3+0xf6>
    309e:	004b      	lsls	r3, r1, #1
    30a0:	1ac0      	subs	r0, r0, r3
    30a2:	4152      	adcs	r2, r2
    30a4:	1a41      	subs	r1, r0, r1
    30a6:	d200      	bcs.n	30aa <__divsi3+0xfe>
    30a8:	4601      	mov	r1, r0
    30aa:	4152      	adcs	r2, r2
    30ac:	4610      	mov	r0, r2
    30ae:	4770      	bx	lr
    30b0:	e05d      	b.n	316e <__divsi3+0x1c2>
    30b2:	0fca      	lsrs	r2, r1, #31
    30b4:	d000      	beq.n	30b8 <__divsi3+0x10c>
    30b6:	4249      	negs	r1, r1
    30b8:	1003      	asrs	r3, r0, #32
    30ba:	d300      	bcc.n	30be <__divsi3+0x112>
    30bc:	4240      	negs	r0, r0
    30be:	4053      	eors	r3, r2
    30c0:	2200      	movs	r2, #0
    30c2:	469c      	mov	ip, r3
    30c4:	0903      	lsrs	r3, r0, #4
    30c6:	428b      	cmp	r3, r1
    30c8:	d32d      	bcc.n	3126 <__divsi3+0x17a>
    30ca:	0a03      	lsrs	r3, r0, #8
    30cc:	428b      	cmp	r3, r1
    30ce:	d312      	bcc.n	30f6 <__divsi3+0x14a>
    30d0:	22fc      	movs	r2, #252	; 0xfc
    30d2:	0189      	lsls	r1, r1, #6
    30d4:	ba12      	rev	r2, r2
    30d6:	0a03      	lsrs	r3, r0, #8
    30d8:	428b      	cmp	r3, r1
    30da:	d30c      	bcc.n	30f6 <__divsi3+0x14a>
    30dc:	0189      	lsls	r1, r1, #6
    30de:	1192      	asrs	r2, r2, #6
    30e0:	428b      	cmp	r3, r1
    30e2:	d308      	bcc.n	30f6 <__divsi3+0x14a>
    30e4:	0189      	lsls	r1, r1, #6
    30e6:	1192      	asrs	r2, r2, #6
    30e8:	428b      	cmp	r3, r1
    30ea:	d304      	bcc.n	30f6 <__divsi3+0x14a>
    30ec:	0189      	lsls	r1, r1, #6
    30ee:	d03a      	beq.n	3166 <__divsi3+0x1ba>
    30f0:	1192      	asrs	r2, r2, #6
    30f2:	e000      	b.n	30f6 <__divsi3+0x14a>
    30f4:	0989      	lsrs	r1, r1, #6
    30f6:	09c3      	lsrs	r3, r0, #7
    30f8:	428b      	cmp	r3, r1
    30fa:	d301      	bcc.n	3100 <__divsi3+0x154>
    30fc:	01cb      	lsls	r3, r1, #7
    30fe:	1ac0      	subs	r0, r0, r3
    3100:	4152      	adcs	r2, r2
    3102:	0983      	lsrs	r3, r0, #6
    3104:	428b      	cmp	r3, r1
    3106:	d301      	bcc.n	310c <__divsi3+0x160>
    3108:	018b      	lsls	r3, r1, #6
    310a:	1ac0      	subs	r0, r0, r3
    310c:	4152      	adcs	r2, r2
    310e:	0943      	lsrs	r3, r0, #5
    3110:	428b      	cmp	r3, r1
    3112:	d301      	bcc.n	3118 <__divsi3+0x16c>
    3114:	014b      	lsls	r3, r1, #5
    3116:	1ac0      	subs	r0, r0, r3
    3118:	4152      	adcs	r2, r2
    311a:	0903      	lsrs	r3, r0, #4
    311c:	428b      	cmp	r3, r1
    311e:	d301      	bcc.n	3124 <__divsi3+0x178>
    3120:	010b      	lsls	r3, r1, #4
    3122:	1ac0      	subs	r0, r0, r3
    3124:	4152      	adcs	r2, r2
    3126:	08c3      	lsrs	r3, r0, #3
    3128:	428b      	cmp	r3, r1
    312a:	d301      	bcc.n	3130 <__divsi3+0x184>
    312c:	00cb      	lsls	r3, r1, #3
    312e:	1ac0      	subs	r0, r0, r3
    3130:	4152      	adcs	r2, r2
    3132:	0883      	lsrs	r3, r0, #2
    3134:	428b      	cmp	r3, r1
    3136:	d301      	bcc.n	313c <__divsi3+0x190>
    3138:	008b      	lsls	r3, r1, #2
    313a:	1ac0      	subs	r0, r0, r3
    313c:	4152      	adcs	r2, r2
    313e:	d2d9      	bcs.n	30f4 <__divsi3+0x148>
    3140:	0843      	lsrs	r3, r0, #1
    3142:	428b      	cmp	r3, r1
    3144:	d301      	bcc.n	314a <__divsi3+0x19e>
    3146:	004b      	lsls	r3, r1, #1
    3148:	1ac0      	subs	r0, r0, r3
    314a:	4152      	adcs	r2, r2
    314c:	1a41      	subs	r1, r0, r1
    314e:	d200      	bcs.n	3152 <__divsi3+0x1a6>
    3150:	4601      	mov	r1, r0
    3152:	4663      	mov	r3, ip
    3154:	4152      	adcs	r2, r2
    3156:	105b      	asrs	r3, r3, #1
    3158:	4610      	mov	r0, r2
    315a:	d301      	bcc.n	3160 <__divsi3+0x1b4>
    315c:	4240      	negs	r0, r0
    315e:	2b00      	cmp	r3, #0
    3160:	d500      	bpl.n	3164 <__divsi3+0x1b8>
    3162:	4249      	negs	r1, r1
    3164:	4770      	bx	lr
    3166:	4663      	mov	r3, ip
    3168:	105b      	asrs	r3, r3, #1
    316a:	d300      	bcc.n	316e <__divsi3+0x1c2>
    316c:	4240      	negs	r0, r0
    316e:	b501      	push	{r0, lr}
    3170:	2000      	movs	r0, #0
    3172:	f000 f805 	bl	3180 <__aeabi_idiv0>
    3176:	bd02      	pop	{r1, pc}

00003178 <__aeabi_idivmod>:
    3178:	2900      	cmp	r1, #0
    317a:	d0f8      	beq.n	316e <__divsi3+0x1c2>
    317c:	e716      	b.n	2fac <__divsi3>
    317e:	4770      	bx	lr

00003180 <__aeabi_idiv0>:
    3180:	4770      	bx	lr
    3182:	46c0      	nop			; (mov r8, r8)

00003184 <__aeabi_lmul>:
    3184:	b5f0      	push	{r4, r5, r6, r7, lr}
    3186:	46ce      	mov	lr, r9
    3188:	4647      	mov	r7, r8
    318a:	0415      	lsls	r5, r2, #16
    318c:	0c2d      	lsrs	r5, r5, #16
    318e:	002e      	movs	r6, r5
    3190:	b580      	push	{r7, lr}
    3192:	0407      	lsls	r7, r0, #16
    3194:	0c14      	lsrs	r4, r2, #16
    3196:	0c3f      	lsrs	r7, r7, #16
    3198:	4699      	mov	r9, r3
    319a:	0c03      	lsrs	r3, r0, #16
    319c:	437e      	muls	r6, r7
    319e:	435d      	muls	r5, r3
    31a0:	4367      	muls	r7, r4
    31a2:	4363      	muls	r3, r4
    31a4:	197f      	adds	r7, r7, r5
    31a6:	0c34      	lsrs	r4, r6, #16
    31a8:	19e4      	adds	r4, r4, r7
    31aa:	469c      	mov	ip, r3
    31ac:	42a5      	cmp	r5, r4
    31ae:	d903      	bls.n	31b8 <__aeabi_lmul+0x34>
    31b0:	2380      	movs	r3, #128	; 0x80
    31b2:	025b      	lsls	r3, r3, #9
    31b4:	4698      	mov	r8, r3
    31b6:	44c4      	add	ip, r8
    31b8:	464b      	mov	r3, r9
    31ba:	4351      	muls	r1, r2
    31bc:	4343      	muls	r3, r0
    31be:	0436      	lsls	r6, r6, #16
    31c0:	0c36      	lsrs	r6, r6, #16
    31c2:	0c25      	lsrs	r5, r4, #16
    31c4:	0424      	lsls	r4, r4, #16
    31c6:	4465      	add	r5, ip
    31c8:	19a4      	adds	r4, r4, r6
    31ca:	1859      	adds	r1, r3, r1
    31cc:	1949      	adds	r1, r1, r5
    31ce:	0020      	movs	r0, r4
    31d0:	bc0c      	pop	{r2, r3}
    31d2:	4690      	mov	r8, r2
    31d4:	4699      	mov	r9, r3
    31d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000031d8 <__aeabi_fmul>:
    31d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31da:	4657      	mov	r7, sl
    31dc:	464e      	mov	r6, r9
    31de:	4645      	mov	r5, r8
    31e0:	46de      	mov	lr, fp
    31e2:	b5e0      	push	{r5, r6, r7, lr}
    31e4:	0247      	lsls	r7, r0, #9
    31e6:	0046      	lsls	r6, r0, #1
    31e8:	4688      	mov	r8, r1
    31ea:	0a7f      	lsrs	r7, r7, #9
    31ec:	0e36      	lsrs	r6, r6, #24
    31ee:	0fc4      	lsrs	r4, r0, #31
    31f0:	2e00      	cmp	r6, #0
    31f2:	d047      	beq.n	3284 <__aeabi_fmul+0xac>
    31f4:	2eff      	cmp	r6, #255	; 0xff
    31f6:	d024      	beq.n	3242 <__aeabi_fmul+0x6a>
    31f8:	00fb      	lsls	r3, r7, #3
    31fa:	2780      	movs	r7, #128	; 0x80
    31fc:	04ff      	lsls	r7, r7, #19
    31fe:	431f      	orrs	r7, r3
    3200:	2300      	movs	r3, #0
    3202:	4699      	mov	r9, r3
    3204:	469a      	mov	sl, r3
    3206:	3e7f      	subs	r6, #127	; 0x7f
    3208:	4643      	mov	r3, r8
    320a:	025d      	lsls	r5, r3, #9
    320c:	0058      	lsls	r0, r3, #1
    320e:	0fdb      	lsrs	r3, r3, #31
    3210:	0a6d      	lsrs	r5, r5, #9
    3212:	0e00      	lsrs	r0, r0, #24
    3214:	4698      	mov	r8, r3
    3216:	d043      	beq.n	32a0 <__aeabi_fmul+0xc8>
    3218:	28ff      	cmp	r0, #255	; 0xff
    321a:	d03b      	beq.n	3294 <__aeabi_fmul+0xbc>
    321c:	00eb      	lsls	r3, r5, #3
    321e:	2580      	movs	r5, #128	; 0x80
    3220:	2200      	movs	r2, #0
    3222:	04ed      	lsls	r5, r5, #19
    3224:	431d      	orrs	r5, r3
    3226:	387f      	subs	r0, #127	; 0x7f
    3228:	1836      	adds	r6, r6, r0
    322a:	1c73      	adds	r3, r6, #1
    322c:	4641      	mov	r1, r8
    322e:	469b      	mov	fp, r3
    3230:	464b      	mov	r3, r9
    3232:	4061      	eors	r1, r4
    3234:	4313      	orrs	r3, r2
    3236:	2b0f      	cmp	r3, #15
    3238:	d864      	bhi.n	3304 <__aeabi_fmul+0x12c>
    323a:	4875      	ldr	r0, [pc, #468]	; (3410 <__aeabi_fmul+0x238>)
    323c:	009b      	lsls	r3, r3, #2
    323e:	58c3      	ldr	r3, [r0, r3]
    3240:	469f      	mov	pc, r3
    3242:	2f00      	cmp	r7, #0
    3244:	d142      	bne.n	32cc <__aeabi_fmul+0xf4>
    3246:	2308      	movs	r3, #8
    3248:	4699      	mov	r9, r3
    324a:	3b06      	subs	r3, #6
    324c:	26ff      	movs	r6, #255	; 0xff
    324e:	469a      	mov	sl, r3
    3250:	e7da      	b.n	3208 <__aeabi_fmul+0x30>
    3252:	4641      	mov	r1, r8
    3254:	2a02      	cmp	r2, #2
    3256:	d028      	beq.n	32aa <__aeabi_fmul+0xd2>
    3258:	2a03      	cmp	r2, #3
    325a:	d100      	bne.n	325e <__aeabi_fmul+0x86>
    325c:	e0ce      	b.n	33fc <__aeabi_fmul+0x224>
    325e:	2a01      	cmp	r2, #1
    3260:	d000      	beq.n	3264 <__aeabi_fmul+0x8c>
    3262:	e0ac      	b.n	33be <__aeabi_fmul+0x1e6>
    3264:	4011      	ands	r1, r2
    3266:	2000      	movs	r0, #0
    3268:	2200      	movs	r2, #0
    326a:	b2cc      	uxtb	r4, r1
    326c:	0240      	lsls	r0, r0, #9
    326e:	05d2      	lsls	r2, r2, #23
    3270:	0a40      	lsrs	r0, r0, #9
    3272:	07e4      	lsls	r4, r4, #31
    3274:	4310      	orrs	r0, r2
    3276:	4320      	orrs	r0, r4
    3278:	bc3c      	pop	{r2, r3, r4, r5}
    327a:	4690      	mov	r8, r2
    327c:	4699      	mov	r9, r3
    327e:	46a2      	mov	sl, r4
    3280:	46ab      	mov	fp, r5
    3282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3284:	2f00      	cmp	r7, #0
    3286:	d115      	bne.n	32b4 <__aeabi_fmul+0xdc>
    3288:	2304      	movs	r3, #4
    328a:	4699      	mov	r9, r3
    328c:	3b03      	subs	r3, #3
    328e:	2600      	movs	r6, #0
    3290:	469a      	mov	sl, r3
    3292:	e7b9      	b.n	3208 <__aeabi_fmul+0x30>
    3294:	20ff      	movs	r0, #255	; 0xff
    3296:	2202      	movs	r2, #2
    3298:	2d00      	cmp	r5, #0
    329a:	d0c5      	beq.n	3228 <__aeabi_fmul+0x50>
    329c:	2203      	movs	r2, #3
    329e:	e7c3      	b.n	3228 <__aeabi_fmul+0x50>
    32a0:	2d00      	cmp	r5, #0
    32a2:	d119      	bne.n	32d8 <__aeabi_fmul+0x100>
    32a4:	2000      	movs	r0, #0
    32a6:	2201      	movs	r2, #1
    32a8:	e7be      	b.n	3228 <__aeabi_fmul+0x50>
    32aa:	2401      	movs	r4, #1
    32ac:	22ff      	movs	r2, #255	; 0xff
    32ae:	400c      	ands	r4, r1
    32b0:	2000      	movs	r0, #0
    32b2:	e7db      	b.n	326c <__aeabi_fmul+0x94>
    32b4:	0038      	movs	r0, r7
    32b6:	f000 f915 	bl	34e4 <__clzsi2>
    32ba:	2676      	movs	r6, #118	; 0x76
    32bc:	1f43      	subs	r3, r0, #5
    32be:	409f      	lsls	r7, r3
    32c0:	2300      	movs	r3, #0
    32c2:	4276      	negs	r6, r6
    32c4:	1a36      	subs	r6, r6, r0
    32c6:	4699      	mov	r9, r3
    32c8:	469a      	mov	sl, r3
    32ca:	e79d      	b.n	3208 <__aeabi_fmul+0x30>
    32cc:	230c      	movs	r3, #12
    32ce:	4699      	mov	r9, r3
    32d0:	3b09      	subs	r3, #9
    32d2:	26ff      	movs	r6, #255	; 0xff
    32d4:	469a      	mov	sl, r3
    32d6:	e797      	b.n	3208 <__aeabi_fmul+0x30>
    32d8:	0028      	movs	r0, r5
    32da:	f000 f903 	bl	34e4 <__clzsi2>
    32de:	1f43      	subs	r3, r0, #5
    32e0:	409d      	lsls	r5, r3
    32e2:	2376      	movs	r3, #118	; 0x76
    32e4:	425b      	negs	r3, r3
    32e6:	1a18      	subs	r0, r3, r0
    32e8:	2200      	movs	r2, #0
    32ea:	e79d      	b.n	3228 <__aeabi_fmul+0x50>
    32ec:	2080      	movs	r0, #128	; 0x80
    32ee:	2400      	movs	r4, #0
    32f0:	03c0      	lsls	r0, r0, #15
    32f2:	22ff      	movs	r2, #255	; 0xff
    32f4:	e7ba      	b.n	326c <__aeabi_fmul+0x94>
    32f6:	003d      	movs	r5, r7
    32f8:	4652      	mov	r2, sl
    32fa:	e7ab      	b.n	3254 <__aeabi_fmul+0x7c>
    32fc:	003d      	movs	r5, r7
    32fe:	0021      	movs	r1, r4
    3300:	4652      	mov	r2, sl
    3302:	e7a7      	b.n	3254 <__aeabi_fmul+0x7c>
    3304:	0c3b      	lsrs	r3, r7, #16
    3306:	469c      	mov	ip, r3
    3308:	042a      	lsls	r2, r5, #16
    330a:	0c12      	lsrs	r2, r2, #16
    330c:	0c2b      	lsrs	r3, r5, #16
    330e:	0014      	movs	r4, r2
    3310:	4660      	mov	r0, ip
    3312:	4665      	mov	r5, ip
    3314:	043f      	lsls	r7, r7, #16
    3316:	0c3f      	lsrs	r7, r7, #16
    3318:	437c      	muls	r4, r7
    331a:	4342      	muls	r2, r0
    331c:	435d      	muls	r5, r3
    331e:	437b      	muls	r3, r7
    3320:	0c27      	lsrs	r7, r4, #16
    3322:	189b      	adds	r3, r3, r2
    3324:	18ff      	adds	r7, r7, r3
    3326:	42ba      	cmp	r2, r7
    3328:	d903      	bls.n	3332 <__aeabi_fmul+0x15a>
    332a:	2380      	movs	r3, #128	; 0x80
    332c:	025b      	lsls	r3, r3, #9
    332e:	469c      	mov	ip, r3
    3330:	4465      	add	r5, ip
    3332:	0424      	lsls	r4, r4, #16
    3334:	043a      	lsls	r2, r7, #16
    3336:	0c24      	lsrs	r4, r4, #16
    3338:	1912      	adds	r2, r2, r4
    333a:	0193      	lsls	r3, r2, #6
    333c:	1e5c      	subs	r4, r3, #1
    333e:	41a3      	sbcs	r3, r4
    3340:	0c3f      	lsrs	r7, r7, #16
    3342:	0e92      	lsrs	r2, r2, #26
    3344:	197d      	adds	r5, r7, r5
    3346:	431a      	orrs	r2, r3
    3348:	01ad      	lsls	r5, r5, #6
    334a:	4315      	orrs	r5, r2
    334c:	012b      	lsls	r3, r5, #4
    334e:	d504      	bpl.n	335a <__aeabi_fmul+0x182>
    3350:	2301      	movs	r3, #1
    3352:	465e      	mov	r6, fp
    3354:	086a      	lsrs	r2, r5, #1
    3356:	401d      	ands	r5, r3
    3358:	4315      	orrs	r5, r2
    335a:	0032      	movs	r2, r6
    335c:	327f      	adds	r2, #127	; 0x7f
    335e:	2a00      	cmp	r2, #0
    3360:	dd25      	ble.n	33ae <__aeabi_fmul+0x1d6>
    3362:	076b      	lsls	r3, r5, #29
    3364:	d004      	beq.n	3370 <__aeabi_fmul+0x198>
    3366:	230f      	movs	r3, #15
    3368:	402b      	ands	r3, r5
    336a:	2b04      	cmp	r3, #4
    336c:	d000      	beq.n	3370 <__aeabi_fmul+0x198>
    336e:	3504      	adds	r5, #4
    3370:	012b      	lsls	r3, r5, #4
    3372:	d503      	bpl.n	337c <__aeabi_fmul+0x1a4>
    3374:	0032      	movs	r2, r6
    3376:	4b27      	ldr	r3, [pc, #156]	; (3414 <__aeabi_fmul+0x23c>)
    3378:	3280      	adds	r2, #128	; 0x80
    337a:	401d      	ands	r5, r3
    337c:	2afe      	cmp	r2, #254	; 0xfe
    337e:	dc94      	bgt.n	32aa <__aeabi_fmul+0xd2>
    3380:	2401      	movs	r4, #1
    3382:	01a8      	lsls	r0, r5, #6
    3384:	0a40      	lsrs	r0, r0, #9
    3386:	b2d2      	uxtb	r2, r2
    3388:	400c      	ands	r4, r1
    338a:	e76f      	b.n	326c <__aeabi_fmul+0x94>
    338c:	2080      	movs	r0, #128	; 0x80
    338e:	03c0      	lsls	r0, r0, #15
    3390:	4207      	tst	r7, r0
    3392:	d007      	beq.n	33a4 <__aeabi_fmul+0x1cc>
    3394:	4205      	tst	r5, r0
    3396:	d105      	bne.n	33a4 <__aeabi_fmul+0x1cc>
    3398:	4328      	orrs	r0, r5
    339a:	0240      	lsls	r0, r0, #9
    339c:	0a40      	lsrs	r0, r0, #9
    339e:	4644      	mov	r4, r8
    33a0:	22ff      	movs	r2, #255	; 0xff
    33a2:	e763      	b.n	326c <__aeabi_fmul+0x94>
    33a4:	4338      	orrs	r0, r7
    33a6:	0240      	lsls	r0, r0, #9
    33a8:	0a40      	lsrs	r0, r0, #9
    33aa:	22ff      	movs	r2, #255	; 0xff
    33ac:	e75e      	b.n	326c <__aeabi_fmul+0x94>
    33ae:	2401      	movs	r4, #1
    33b0:	1aa3      	subs	r3, r4, r2
    33b2:	2b1b      	cmp	r3, #27
    33b4:	dd05      	ble.n	33c2 <__aeabi_fmul+0x1ea>
    33b6:	400c      	ands	r4, r1
    33b8:	2200      	movs	r2, #0
    33ba:	2000      	movs	r0, #0
    33bc:	e756      	b.n	326c <__aeabi_fmul+0x94>
    33be:	465e      	mov	r6, fp
    33c0:	e7cb      	b.n	335a <__aeabi_fmul+0x182>
    33c2:	002a      	movs	r2, r5
    33c4:	2020      	movs	r0, #32
    33c6:	40da      	lsrs	r2, r3
    33c8:	1ac3      	subs	r3, r0, r3
    33ca:	409d      	lsls	r5, r3
    33cc:	002b      	movs	r3, r5
    33ce:	1e5d      	subs	r5, r3, #1
    33d0:	41ab      	sbcs	r3, r5
    33d2:	4313      	orrs	r3, r2
    33d4:	075a      	lsls	r2, r3, #29
    33d6:	d004      	beq.n	33e2 <__aeabi_fmul+0x20a>
    33d8:	220f      	movs	r2, #15
    33da:	401a      	ands	r2, r3
    33dc:	2a04      	cmp	r2, #4
    33de:	d000      	beq.n	33e2 <__aeabi_fmul+0x20a>
    33e0:	3304      	adds	r3, #4
    33e2:	015a      	lsls	r2, r3, #5
    33e4:	d504      	bpl.n	33f0 <__aeabi_fmul+0x218>
    33e6:	2401      	movs	r4, #1
    33e8:	2201      	movs	r2, #1
    33ea:	400c      	ands	r4, r1
    33ec:	2000      	movs	r0, #0
    33ee:	e73d      	b.n	326c <__aeabi_fmul+0x94>
    33f0:	2401      	movs	r4, #1
    33f2:	019b      	lsls	r3, r3, #6
    33f4:	0a58      	lsrs	r0, r3, #9
    33f6:	400c      	ands	r4, r1
    33f8:	2200      	movs	r2, #0
    33fa:	e737      	b.n	326c <__aeabi_fmul+0x94>
    33fc:	2080      	movs	r0, #128	; 0x80
    33fe:	2401      	movs	r4, #1
    3400:	03c0      	lsls	r0, r0, #15
    3402:	4328      	orrs	r0, r5
    3404:	0240      	lsls	r0, r0, #9
    3406:	0a40      	lsrs	r0, r0, #9
    3408:	400c      	ands	r4, r1
    340a:	22ff      	movs	r2, #255	; 0xff
    340c:	e72e      	b.n	326c <__aeabi_fmul+0x94>
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	000037a4 	.word	0x000037a4
    3414:	f7ffffff 	.word	0xf7ffffff

00003418 <__aeabi_f2iz>:
    3418:	0241      	lsls	r1, r0, #9
    341a:	0043      	lsls	r3, r0, #1
    341c:	0fc2      	lsrs	r2, r0, #31
    341e:	0a49      	lsrs	r1, r1, #9
    3420:	0e1b      	lsrs	r3, r3, #24
    3422:	2000      	movs	r0, #0
    3424:	2b7e      	cmp	r3, #126	; 0x7e
    3426:	dd0d      	ble.n	3444 <__aeabi_f2iz+0x2c>
    3428:	2b9d      	cmp	r3, #157	; 0x9d
    342a:	dc0c      	bgt.n	3446 <__aeabi_f2iz+0x2e>
    342c:	2080      	movs	r0, #128	; 0x80
    342e:	0400      	lsls	r0, r0, #16
    3430:	4301      	orrs	r1, r0
    3432:	2b95      	cmp	r3, #149	; 0x95
    3434:	dc0a      	bgt.n	344c <__aeabi_f2iz+0x34>
    3436:	2096      	movs	r0, #150	; 0x96
    3438:	1ac3      	subs	r3, r0, r3
    343a:	40d9      	lsrs	r1, r3
    343c:	4248      	negs	r0, r1
    343e:	2a00      	cmp	r2, #0
    3440:	d100      	bne.n	3444 <__aeabi_f2iz+0x2c>
    3442:	0008      	movs	r0, r1
    3444:	4770      	bx	lr
    3446:	4b03      	ldr	r3, [pc, #12]	; (3454 <__aeabi_f2iz+0x3c>)
    3448:	18d0      	adds	r0, r2, r3
    344a:	e7fb      	b.n	3444 <__aeabi_f2iz+0x2c>
    344c:	3b96      	subs	r3, #150	; 0x96
    344e:	4099      	lsls	r1, r3
    3450:	e7f4      	b.n	343c <__aeabi_f2iz+0x24>
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	7fffffff 	.word	0x7fffffff

00003458 <__aeabi_ui2f>:
    3458:	b510      	push	{r4, lr}
    345a:	1e04      	subs	r4, r0, #0
    345c:	d027      	beq.n	34ae <__aeabi_ui2f+0x56>
    345e:	f000 f841 	bl	34e4 <__clzsi2>
    3462:	239e      	movs	r3, #158	; 0x9e
    3464:	1a1b      	subs	r3, r3, r0
    3466:	2b96      	cmp	r3, #150	; 0x96
    3468:	dc0a      	bgt.n	3480 <__aeabi_ui2f+0x28>
    346a:	2296      	movs	r2, #150	; 0x96
    346c:	1ad2      	subs	r2, r2, r3
    346e:	4094      	lsls	r4, r2
    3470:	0264      	lsls	r4, r4, #9
    3472:	0a64      	lsrs	r4, r4, #9
    3474:	b2db      	uxtb	r3, r3
    3476:	0264      	lsls	r4, r4, #9
    3478:	05db      	lsls	r3, r3, #23
    347a:	0a60      	lsrs	r0, r4, #9
    347c:	4318      	orrs	r0, r3
    347e:	bd10      	pop	{r4, pc}
    3480:	2b99      	cmp	r3, #153	; 0x99
    3482:	dc17      	bgt.n	34b4 <__aeabi_ui2f+0x5c>
    3484:	2299      	movs	r2, #153	; 0x99
    3486:	1ad2      	subs	r2, r2, r3
    3488:	2a00      	cmp	r2, #0
    348a:	dd27      	ble.n	34dc <__aeabi_ui2f+0x84>
    348c:	4094      	lsls	r4, r2
    348e:	0022      	movs	r2, r4
    3490:	4c13      	ldr	r4, [pc, #76]	; (34e0 <__aeabi_ui2f+0x88>)
    3492:	4014      	ands	r4, r2
    3494:	0751      	lsls	r1, r2, #29
    3496:	d004      	beq.n	34a2 <__aeabi_ui2f+0x4a>
    3498:	210f      	movs	r1, #15
    349a:	400a      	ands	r2, r1
    349c:	2a04      	cmp	r2, #4
    349e:	d000      	beq.n	34a2 <__aeabi_ui2f+0x4a>
    34a0:	3404      	adds	r4, #4
    34a2:	0162      	lsls	r2, r4, #5
    34a4:	d412      	bmi.n	34cc <__aeabi_ui2f+0x74>
    34a6:	01a4      	lsls	r4, r4, #6
    34a8:	0a64      	lsrs	r4, r4, #9
    34aa:	b2db      	uxtb	r3, r3
    34ac:	e7e3      	b.n	3476 <__aeabi_ui2f+0x1e>
    34ae:	2300      	movs	r3, #0
    34b0:	2400      	movs	r4, #0
    34b2:	e7e0      	b.n	3476 <__aeabi_ui2f+0x1e>
    34b4:	22b9      	movs	r2, #185	; 0xb9
    34b6:	0021      	movs	r1, r4
    34b8:	1ad2      	subs	r2, r2, r3
    34ba:	4091      	lsls	r1, r2
    34bc:	000a      	movs	r2, r1
    34be:	1e51      	subs	r1, r2, #1
    34c0:	418a      	sbcs	r2, r1
    34c2:	2105      	movs	r1, #5
    34c4:	1a09      	subs	r1, r1, r0
    34c6:	40cc      	lsrs	r4, r1
    34c8:	4314      	orrs	r4, r2
    34ca:	e7db      	b.n	3484 <__aeabi_ui2f+0x2c>
    34cc:	4b04      	ldr	r3, [pc, #16]	; (34e0 <__aeabi_ui2f+0x88>)
    34ce:	401c      	ands	r4, r3
    34d0:	239f      	movs	r3, #159	; 0x9f
    34d2:	01a4      	lsls	r4, r4, #6
    34d4:	1a1b      	subs	r3, r3, r0
    34d6:	0a64      	lsrs	r4, r4, #9
    34d8:	b2db      	uxtb	r3, r3
    34da:	e7cc      	b.n	3476 <__aeabi_ui2f+0x1e>
    34dc:	0022      	movs	r2, r4
    34de:	e7d7      	b.n	3490 <__aeabi_ui2f+0x38>
    34e0:	fbffffff 	.word	0xfbffffff

000034e4 <__clzsi2>:
    34e4:	211c      	movs	r1, #28
    34e6:	2301      	movs	r3, #1
    34e8:	041b      	lsls	r3, r3, #16
    34ea:	4298      	cmp	r0, r3
    34ec:	d301      	bcc.n	34f2 <__clzsi2+0xe>
    34ee:	0c00      	lsrs	r0, r0, #16
    34f0:	3910      	subs	r1, #16
    34f2:	0a1b      	lsrs	r3, r3, #8
    34f4:	4298      	cmp	r0, r3
    34f6:	d301      	bcc.n	34fc <__clzsi2+0x18>
    34f8:	0a00      	lsrs	r0, r0, #8
    34fa:	3908      	subs	r1, #8
    34fc:	091b      	lsrs	r3, r3, #4
    34fe:	4298      	cmp	r0, r3
    3500:	d301      	bcc.n	3506 <__clzsi2+0x22>
    3502:	0900      	lsrs	r0, r0, #4
    3504:	3904      	subs	r1, #4
    3506:	a202      	add	r2, pc, #8	; (adr r2, 3510 <__clzsi2+0x2c>)
    3508:	5c10      	ldrb	r0, [r2, r0]
    350a:	1840      	adds	r0, r0, r1
    350c:	4770      	bx	lr
    350e:	46c0      	nop			; (mov r8, r8)
    3510:	02020304 	.word	0x02020304
    3514:	01010101 	.word	0x01010101
	...

00003520 <atoi>:
    3520:	b510      	push	{r4, lr}
    3522:	220a      	movs	r2, #10
    3524:	2100      	movs	r1, #0
    3526:	f000 f8df 	bl	36e8 <strtol>
    352a:	bd10      	pop	{r4, pc}

0000352c <__libc_init_array>:
    352c:	b570      	push	{r4, r5, r6, lr}
    352e:	2600      	movs	r6, #0
    3530:	4d0c      	ldr	r5, [pc, #48]	; (3564 <__libc_init_array+0x38>)
    3532:	4c0d      	ldr	r4, [pc, #52]	; (3568 <__libc_init_array+0x3c>)
    3534:	1b64      	subs	r4, r4, r5
    3536:	10a4      	asrs	r4, r4, #2
    3538:	42a6      	cmp	r6, r4
    353a:	d109      	bne.n	3550 <__libc_init_array+0x24>
    353c:	2600      	movs	r6, #0
    353e:	f000 f9d7 	bl	38f0 <_init>
    3542:	4d0a      	ldr	r5, [pc, #40]	; (356c <__libc_init_array+0x40>)
    3544:	4c0a      	ldr	r4, [pc, #40]	; (3570 <__libc_init_array+0x44>)
    3546:	1b64      	subs	r4, r4, r5
    3548:	10a4      	asrs	r4, r4, #2
    354a:	42a6      	cmp	r6, r4
    354c:	d105      	bne.n	355a <__libc_init_array+0x2e>
    354e:	bd70      	pop	{r4, r5, r6, pc}
    3550:	00b3      	lsls	r3, r6, #2
    3552:	58eb      	ldr	r3, [r5, r3]
    3554:	4798      	blx	r3
    3556:	3601      	adds	r6, #1
    3558:	e7ee      	b.n	3538 <__libc_init_array+0xc>
    355a:	00b3      	lsls	r3, r6, #2
    355c:	58eb      	ldr	r3, [r5, r3]
    355e:	4798      	blx	r3
    3560:	3601      	adds	r6, #1
    3562:	e7f2      	b.n	354a <__libc_init_array+0x1e>
    3564:	000038fc 	.word	0x000038fc
    3568:	000038fc 	.word	0x000038fc
    356c:	000038fc 	.word	0x000038fc
    3570:	00003900 	.word	0x00003900

00003574 <__locale_ctype_ptr_l>:
    3574:	30ec      	adds	r0, #236	; 0xec
    3576:	6800      	ldr	r0, [r0, #0]
    3578:	4770      	bx	lr
	...

0000357c <__locale_ctype_ptr>:
    357c:	4b04      	ldr	r3, [pc, #16]	; (3590 <__locale_ctype_ptr+0x14>)
    357e:	681b      	ldr	r3, [r3, #0]
    3580:	6a1b      	ldr	r3, [r3, #32]
    3582:	2b00      	cmp	r3, #0
    3584:	d100      	bne.n	3588 <__locale_ctype_ptr+0xc>
    3586:	4b03      	ldr	r3, [pc, #12]	; (3594 <__locale_ctype_ptr+0x18>)
    3588:	33ec      	adds	r3, #236	; 0xec
    358a:	6818      	ldr	r0, [r3, #0]
    358c:	4770      	bx	lr
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	2000001c 	.word	0x2000001c
    3594:	20000080 	.word	0x20000080

00003598 <__ascii_mbtowc>:
    3598:	b082      	sub	sp, #8
    359a:	2900      	cmp	r1, #0
    359c:	d100      	bne.n	35a0 <__ascii_mbtowc+0x8>
    359e:	a901      	add	r1, sp, #4
    35a0:	1e10      	subs	r0, r2, #0
    35a2:	d006      	beq.n	35b2 <__ascii_mbtowc+0x1a>
    35a4:	2b00      	cmp	r3, #0
    35a6:	d006      	beq.n	35b6 <__ascii_mbtowc+0x1e>
    35a8:	7813      	ldrb	r3, [r2, #0]
    35aa:	600b      	str	r3, [r1, #0]
    35ac:	7810      	ldrb	r0, [r2, #0]
    35ae:	1e43      	subs	r3, r0, #1
    35b0:	4198      	sbcs	r0, r3
    35b2:	b002      	add	sp, #8
    35b4:	4770      	bx	lr
    35b6:	2002      	movs	r0, #2
    35b8:	4240      	negs	r0, r0
    35ba:	e7fa      	b.n	35b2 <__ascii_mbtowc+0x1a>

000035bc <memset>:
    35bc:	0003      	movs	r3, r0
    35be:	1882      	adds	r2, r0, r2
    35c0:	4293      	cmp	r3, r2
    35c2:	d100      	bne.n	35c6 <memset+0xa>
    35c4:	4770      	bx	lr
    35c6:	7019      	strb	r1, [r3, #0]
    35c8:	3301      	adds	r3, #1
    35ca:	e7f9      	b.n	35c0 <memset+0x4>

000035cc <strlen>:
    35cc:	2300      	movs	r3, #0
    35ce:	5cc2      	ldrb	r2, [r0, r3]
    35d0:	3301      	adds	r3, #1
    35d2:	2a00      	cmp	r2, #0
    35d4:	d1fb      	bne.n	35ce <strlen+0x2>
    35d6:	1e58      	subs	r0, r3, #1
    35d8:	4770      	bx	lr
	...

000035dc <_strtol_l.isra.0>:
    35dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35de:	001f      	movs	r7, r3
    35e0:	000e      	movs	r6, r1
    35e2:	b087      	sub	sp, #28
    35e4:	9005      	str	r0, [sp, #20]
    35e6:	9103      	str	r1, [sp, #12]
    35e8:	9202      	str	r2, [sp, #8]
    35ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    35ec:	7834      	ldrb	r4, [r6, #0]
    35ee:	f7ff ffc1 	bl	3574 <__locale_ctype_ptr_l>
    35f2:	2208      	movs	r2, #8
    35f4:	1900      	adds	r0, r0, r4
    35f6:	7843      	ldrb	r3, [r0, #1]
    35f8:	1c75      	adds	r5, r6, #1
    35fa:	4013      	ands	r3, r2
    35fc:	d10c      	bne.n	3618 <_strtol_l.isra.0+0x3c>
    35fe:	2c2d      	cmp	r4, #45	; 0x2d
    3600:	d10c      	bne.n	361c <_strtol_l.isra.0+0x40>
    3602:	3301      	adds	r3, #1
    3604:	782c      	ldrb	r4, [r5, #0]
    3606:	9301      	str	r3, [sp, #4]
    3608:	1cb5      	adds	r5, r6, #2
    360a:	2f00      	cmp	r7, #0
    360c:	d00c      	beq.n	3628 <_strtol_l.isra.0+0x4c>
    360e:	2f10      	cmp	r7, #16
    3610:	d114      	bne.n	363c <_strtol_l.isra.0+0x60>
    3612:	2c30      	cmp	r4, #48	; 0x30
    3614:	d00a      	beq.n	362c <_strtol_l.isra.0+0x50>
    3616:	e011      	b.n	363c <_strtol_l.isra.0+0x60>
    3618:	002e      	movs	r6, r5
    361a:	e7e6      	b.n	35ea <_strtol_l.isra.0+0xe>
    361c:	9301      	str	r3, [sp, #4]
    361e:	2c2b      	cmp	r4, #43	; 0x2b
    3620:	d1f3      	bne.n	360a <_strtol_l.isra.0+0x2e>
    3622:	782c      	ldrb	r4, [r5, #0]
    3624:	1cb5      	adds	r5, r6, #2
    3626:	e7f0      	b.n	360a <_strtol_l.isra.0+0x2e>
    3628:	2c30      	cmp	r4, #48	; 0x30
    362a:	d12f      	bne.n	368c <_strtol_l.isra.0+0xb0>
    362c:	2220      	movs	r2, #32
    362e:	782b      	ldrb	r3, [r5, #0]
    3630:	4393      	bics	r3, r2
    3632:	2b58      	cmp	r3, #88	; 0x58
    3634:	d151      	bne.n	36da <_strtol_l.isra.0+0xfe>
    3636:	2710      	movs	r7, #16
    3638:	786c      	ldrb	r4, [r5, #1]
    363a:	3502      	adds	r5, #2
    363c:	9b01      	ldr	r3, [sp, #4]
    363e:	4a29      	ldr	r2, [pc, #164]	; (36e4 <_strtol_l.isra.0+0x108>)
    3640:	0039      	movs	r1, r7
    3642:	189e      	adds	r6, r3, r2
    3644:	0030      	movs	r0, r6
    3646:	f7ff fcad 	bl	2fa4 <__aeabi_uidivmod>
    364a:	0030      	movs	r0, r6
    364c:	9104      	str	r1, [sp, #16]
    364e:	0039      	movs	r1, r7
    3650:	f7ff fc22 	bl	2e98 <__udivsi3>
    3654:	2101      	movs	r1, #1
    3656:	2300      	movs	r3, #0
    3658:	4249      	negs	r1, r1
    365a:	0002      	movs	r2, r0
    365c:	468c      	mov	ip, r1
    365e:	0018      	movs	r0, r3
    3660:	0021      	movs	r1, r4
    3662:	3930      	subs	r1, #48	; 0x30
    3664:	2909      	cmp	r1, #9
    3666:	d813      	bhi.n	3690 <_strtol_l.isra.0+0xb4>
    3668:	000c      	movs	r4, r1
    366a:	42a7      	cmp	r7, r4
    366c:	dd1c      	ble.n	36a8 <_strtol_l.isra.0+0xcc>
    366e:	1c59      	adds	r1, r3, #1
    3670:	d009      	beq.n	3686 <_strtol_l.isra.0+0xaa>
    3672:	4663      	mov	r3, ip
    3674:	4282      	cmp	r2, r0
    3676:	d306      	bcc.n	3686 <_strtol_l.isra.0+0xaa>
    3678:	d102      	bne.n	3680 <_strtol_l.isra.0+0xa4>
    367a:	9904      	ldr	r1, [sp, #16]
    367c:	42a1      	cmp	r1, r4
    367e:	db02      	blt.n	3686 <_strtol_l.isra.0+0xaa>
    3680:	2301      	movs	r3, #1
    3682:	4378      	muls	r0, r7
    3684:	1820      	adds	r0, r4, r0
    3686:	782c      	ldrb	r4, [r5, #0]
    3688:	3501      	adds	r5, #1
    368a:	e7e9      	b.n	3660 <_strtol_l.isra.0+0x84>
    368c:	270a      	movs	r7, #10
    368e:	e7d5      	b.n	363c <_strtol_l.isra.0+0x60>
    3690:	0021      	movs	r1, r4
    3692:	3941      	subs	r1, #65	; 0x41
    3694:	2919      	cmp	r1, #25
    3696:	d801      	bhi.n	369c <_strtol_l.isra.0+0xc0>
    3698:	3c37      	subs	r4, #55	; 0x37
    369a:	e7e6      	b.n	366a <_strtol_l.isra.0+0x8e>
    369c:	0021      	movs	r1, r4
    369e:	3961      	subs	r1, #97	; 0x61
    36a0:	2919      	cmp	r1, #25
    36a2:	d801      	bhi.n	36a8 <_strtol_l.isra.0+0xcc>
    36a4:	3c57      	subs	r4, #87	; 0x57
    36a6:	e7e0      	b.n	366a <_strtol_l.isra.0+0x8e>
    36a8:	1c5a      	adds	r2, r3, #1
    36aa:	d108      	bne.n	36be <_strtol_l.isra.0+0xe2>
    36ac:	9a05      	ldr	r2, [sp, #20]
    36ae:	3323      	adds	r3, #35	; 0x23
    36b0:	6013      	str	r3, [r2, #0]
    36b2:	9b02      	ldr	r3, [sp, #8]
    36b4:	0030      	movs	r0, r6
    36b6:	2b00      	cmp	r3, #0
    36b8:	d10b      	bne.n	36d2 <_strtol_l.isra.0+0xf6>
    36ba:	b007      	add	sp, #28
    36bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36be:	9a01      	ldr	r2, [sp, #4]
    36c0:	2a00      	cmp	r2, #0
    36c2:	d000      	beq.n	36c6 <_strtol_l.isra.0+0xea>
    36c4:	4240      	negs	r0, r0
    36c6:	9a02      	ldr	r2, [sp, #8]
    36c8:	2a00      	cmp	r2, #0
    36ca:	d0f6      	beq.n	36ba <_strtol_l.isra.0+0xde>
    36cc:	9a03      	ldr	r2, [sp, #12]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d000      	beq.n	36d4 <_strtol_l.isra.0+0xf8>
    36d2:	1e6a      	subs	r2, r5, #1
    36d4:	9b02      	ldr	r3, [sp, #8]
    36d6:	601a      	str	r2, [r3, #0]
    36d8:	e7ef      	b.n	36ba <_strtol_l.isra.0+0xde>
    36da:	2430      	movs	r4, #48	; 0x30
    36dc:	2f00      	cmp	r7, #0
    36de:	d1ad      	bne.n	363c <_strtol_l.isra.0+0x60>
    36e0:	3708      	adds	r7, #8
    36e2:	e7ab      	b.n	363c <_strtol_l.isra.0+0x60>
    36e4:	7fffffff 	.word	0x7fffffff

000036e8 <strtol>:
    36e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    36ea:	0013      	movs	r3, r2
    36ec:	4a06      	ldr	r2, [pc, #24]	; (3708 <strtol+0x20>)
    36ee:	0005      	movs	r5, r0
    36f0:	6810      	ldr	r0, [r2, #0]
    36f2:	6a04      	ldr	r4, [r0, #32]
    36f4:	2c00      	cmp	r4, #0
    36f6:	d100      	bne.n	36fa <strtol+0x12>
    36f8:	4c04      	ldr	r4, [pc, #16]	; (370c <strtol+0x24>)
    36fa:	000a      	movs	r2, r1
    36fc:	9400      	str	r4, [sp, #0]
    36fe:	0029      	movs	r1, r5
    3700:	f7ff ff6c 	bl	35dc <_strtol_l.isra.0>
    3704:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    3706:	46c0      	nop			; (mov r8, r8)
    3708:	2000001c 	.word	0x2000001c
    370c:	20000080 	.word	0x20000080

00003710 <__ascii_wctomb>:
    3710:	1e0b      	subs	r3, r1, #0
    3712:	d004      	beq.n	371e <__ascii_wctomb+0xe>
    3714:	2aff      	cmp	r2, #255	; 0xff
    3716:	d904      	bls.n	3722 <__ascii_wctomb+0x12>
    3718:	238a      	movs	r3, #138	; 0x8a
    371a:	6003      	str	r3, [r0, #0]
    371c:	3b8b      	subs	r3, #139	; 0x8b
    371e:	0018      	movs	r0, r3
    3720:	4770      	bx	lr
    3722:	700a      	strb	r2, [r1, #0]
    3724:	2301      	movs	r3, #1
    3726:	e7fa      	b.n	371e <__ascii_wctomb+0xe>
    3728:	532b5441 	.word	0x532b5441
    372c:	0d444e45 	.word	0x0d444e45
    3730:	00000000 	.word	0x00000000
    3734:	522b5441 	.word	0x522b5441
    3738:	0d495353 	.word	0x0d495353
    373c:	00000000 	.word	0x00000000
    3740:	42000800 	.word	0x42000800
    3744:	42000c00 	.word	0x42000c00
    3748:	42001000 	.word	0x42001000
    374c:	42001400 	.word	0x42001400
    3750:	0c0b0a09 	.word	0x0c0b0a09
    3754:	0000263c 	.word	0x0000263c
    3758:	00002694 	.word	0x00002694
    375c:	00002694 	.word	0x00002694
    3760:	00002636 	.word	0x00002636
    3764:	00002636 	.word	0x00002636
    3768:	00002650 	.word	0x00002650
    376c:	00002642 	.word	0x00002642
    3770:	00002656 	.word	0x00002656
    3774:	00002684 	.word	0x00002684
    3778:	00002720 	.word	0x00002720
    377c:	0000278e 	.word	0x0000278e
    3780:	0000278e 	.word	0x0000278e
    3784:	00002700 	.word	0x00002700
    3788:	00002712 	.word	0x00002712
    378c:	00002730 	.word	0x00002730
    3790:	00002704 	.word	0x00002704
    3794:	00002740 	.word	0x00002740
    3798:	0000277c 	.word	0x0000277c
    379c:	0014000a 	.word	0x0014000a
    37a0:	0000001e 	.word	0x0000001e
    37a4:	00003304 	.word	0x00003304
    37a8:	00003254 	.word	0x00003254
    37ac:	00003254 	.word	0x00003254
    37b0:	00003252 	.word	0x00003252
    37b4:	000032f6 	.word	0x000032f6
    37b8:	000032f6 	.word	0x000032f6
    37bc:	000032ec 	.word	0x000032ec
    37c0:	00003252 	.word	0x00003252
    37c4:	000032f6 	.word	0x000032f6
    37c8:	000032ec 	.word	0x000032ec
    37cc:	000032f6 	.word	0x000032f6
    37d0:	00003252 	.word	0x00003252
    37d4:	000032fc 	.word	0x000032fc
    37d8:	000032fc 	.word	0x000032fc
    37dc:	000032fc 	.word	0x000032fc
    37e0:	0000338c 	.word	0x0000338c
    37e4:	4f500043 	.word	0x4f500043
    37e8:	00584953 	.word	0x00584953
    37ec:	002e      	.short	0x002e

000037ee <_ctype_>:
    37ee:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    37fe:	2020 2020 2020 2020 2020 2020 2020 2020                     
    380e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    381e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    382e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    383e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    384e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    385e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    386e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000038f0 <_init>:
    38f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38f2:	46c0      	nop			; (mov r8, r8)
    38f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38f6:	bc08      	pop	{r3}
    38f8:	469e      	mov	lr, r3
    38fa:	4770      	bx	lr

000038fc <__init_array_start>:
    38fc:	000000dd 	.word	0x000000dd

00003900 <_fini>:
    3900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3902:	46c0      	nop			; (mov r8, r8)
    3904:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3906:	bc08      	pop	{r3}
    3908:	469e      	mov	lr, r3
    390a:	4770      	bx	lr

0000390c <__fini_array_start>:
    390c:	000000b5 	.word	0x000000b5
