
rxboard_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000023c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000114  2000000c  000023cc  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000120  000024e0  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002d370  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003872  00000000  00000000  0004d3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000067c9  00000000  00000000  00050c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000538  00000000  00000000  00057438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000848  00000000  00000000  00057970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000061fd  00000000  00000000  000581b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cafb  00000000  00000000  0005e3b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d077  00000000  00000000  0006aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000db8  00000000  00000000  000f7f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 21 00 20 bd 19 00 00 b9 19 00 00 b9 19 00 00      !. ............
	...
      2c:	b9 19 00 00 00 00 00 00 00 00 00 00 b9 19 00 00     ................
      3c:	b9 19 00 00 b9 19 00 00 b9 19 00 00 b9 19 00 00     ................
      4c:	b9 19 00 00 b9 19 00 00 b9 19 00 00 b9 19 00 00     ................
      5c:	b9 19 00 00 b9 19 00 00 01 13 00 00 11 13 00 00     ................
      6c:	21 13 00 00 31 13 00 00 41 13 00 00 51 13 00 00     !...1...A...Q...
      7c:	b9 19 00 00 b9 19 00 00 b9 19 00 00 b9 19 00 00     ................
      8c:	b9 19 00 00 b9 19 00 00 b9 19 00 00 b9 19 00 00     ................
      9c:	b9 19 00 00 b9 19 00 00 b9 19 00 00 b9 19 00 00     ................
      ac:	b9 19 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	000023c0 	.word	0x000023c0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	000023c0 	.word	0x000023c0
     10c:	000023c0 	.word	0x000023c0
     110:	00000000 	.word	0x00000000

00000114 <spi40_start_xfer>:
    spi40_wr8(AX5043_AGCAHYST0, 0x00); 
    spi40_wr8(AX5043_TIMEGAIN0, 0xAD);
    spi40_wr8(AX5043_DRGAIN0, 0xA7);
    spi40_wr8(AX5043_PHASEGAIN0, 0xC3);
    spi40_wr8(AX5043_FREQGAINA0, 0x0F);
    spi40_wr8(AX5043_FREQGAINB0, 0x1F);
     114:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_FREQGAINC0, 0x0A);
     116:	b082      	sub	sp, #8
     118:	4b10      	ldr	r3, [pc, #64]	; (15c <spi40_start_xfer+0x48>)
     11a:	4318      	orrs	r0, r3
     11c:	b280      	uxth	r0, r0
    spi40_wr8(AX5043_FREQGAIND0, 0x0A);
     11e:	466b      	mov	r3, sp
     120:	80d8      	strh	r0, [r3, #6]
     122:	2900      	cmp	r1, #0
     124:	d103      	bne.n	12e <spi40_start_xfer+0x1a>
    spi40_wr8(AX5043_AMPLGAIN0, 0x01); //org val: 0x06
     126:	0440      	lsls	r0, r0, #17
     128:	0c40      	lsrs	r0, r0, #17
     12a:	466b      	mov	r3, sp
     12c:	80d8      	strh	r0, [r3, #6]
    spi40_wr8(AX5043_FREQDEV10, 0x00);
     12e:	466b      	mov	r3, sp
     130:	1d9a      	adds	r2, r3, #6
     132:	88db      	ldrh	r3, [r3, #6]
     134:	0219      	lsls	r1, r3, #8
    spi40_wr8(AX5043_FREQDEV00, 0x00);
     136:	0a1b      	lsrs	r3, r3, #8
     138:	430b      	orrs	r3, r1
     13a:	8013      	strh	r3, [r2, #0]
     13c:	2201      	movs	r2, #1
    spi40_wr8(AX5043_FOURFSK0, 0x16); //org value: 0x16
     13e:	4908      	ldr	r1, [pc, #32]	; (160 <spi40_start_xfer+0x4c>)
     140:	4808      	ldr	r0, [pc, #32]	; (164 <spi40_start_xfer+0x50>)
     142:	4b09      	ldr	r3, [pc, #36]	; (168 <spi40_start_xfer+0x54>)
     144:	4798      	blx	r3
    spi40_wr8(AX5043_BBOFFSRES0, 0x00);
     146:	2805      	cmp	r0, #5
     148:	d0f8      	beq.n	13c <spi40_start_xfer+0x28>
     14a:	2302      	movs	r3, #2
     14c:	4a07      	ldr	r2, [pc, #28]	; (16c <spi40_start_xfer+0x58>)
    spi40_wr8(AX5043_AGCGAIN1, 0xE8);
     14e:	4669      	mov	r1, sp
     150:	3106      	adds	r1, #6
     152:	4804      	ldr	r0, [pc, #16]	; (164 <spi40_start_xfer+0x50>)
     154:	4c06      	ldr	r4, [pc, #24]	; (170 <spi40_start_xfer+0x5c>)
    spi40_wr8(AX5043_AGCTARGET1, 0x8F); //org val: 0x84
     156:	47a0      	blx	r4
     158:	b002      	add	sp, #8
     15a:	bd10      	pop	{r4, pc}
     15c:	fffff000 	.word	0xfffff000
    spi40_wr8(AX5043_AGCAHYST1, 0x00); 
     160:	20000104 	.word	0x20000104
     164:	200000c8 	.word	0x200000c8
    spi40_wr8(AX5043_AGCMINMAX1, 0x00);
     168:	00000f1d 	.word	0x00000f1d
     16c:	20000036 	.word	0x20000036
    spi40_wr8(AX5043_TIMEGAIN1, 0xAB);
     170:	00001019 	.word	0x00001019

00000174 <spi40_stop_xfer>:
     174:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_DRGAIN1, 0xA6);
     176:	2200      	movs	r2, #0
     178:	4902      	ldr	r1, [pc, #8]	; (184 <spi40_stop_xfer+0x10>)
     17a:	4803      	ldr	r0, [pc, #12]	; (188 <spi40_stop_xfer+0x14>)
     17c:	4b03      	ldr	r3, [pc, #12]	; (18c <spi40_stop_xfer+0x18>)
    spi40_wr8(AX5043_PHASEGAIN1, 0xC3);
     17e:	4798      	blx	r3
     180:	bd10      	pop	{r4, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	20000104 	.word	0x20000104
    spi40_wr8(AX5043_FREQGAINA1, 0x0F);
     188:	200000c8 	.word	0x200000c8
     18c:	00000f1d 	.word	0x00000f1d

00000190 <spi40_read>:
    spi40_wr8(AX5043_FREQGAINB1, 0x1F);
     190:	b510      	push	{r4, lr}
     192:	000a      	movs	r2, r1
     194:	2300      	movs	r3, #0
    spi40_wr8(AX5043_FREQGAINC1, 0x0A);
     196:	0001      	movs	r1, r0
     198:	4801      	ldr	r0, [pc, #4]	; (1a0 <spi40_read+0x10>)
     19a:	4c02      	ldr	r4, [pc, #8]	; (1a4 <spi40_read+0x14>)
     19c:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND1, 0x0A);
     19e:	bd10      	pop	{r4, pc}
     1a0:	200000c8 	.word	0x200000c8
     1a4:	00000e21 	.word	0x00000e21

000001a8 <spi40_rd8>:
    spi40_wr8(AX5043_AMPLGAIN1, 0x01); //org val: 0x06
     1a8:	b510      	push	{r4, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	466b      	mov	r3, sp
    spi40_wr8(AX5043_FREQDEV11, 0x00);
     1ae:	1ddc      	adds	r4, r3, #7
     1b0:	2300      	movs	r3, #0
     1b2:	7023      	strb	r3, [r4, #0]
     1b4:	2100      	movs	r1, #0
    spi40_wr8(AX5043_FREQDEV01, 0x4B);
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <spi40_rd8+0x24>)
     1b8:	4798      	blx	r3
     1ba:	2101      	movs	r1, #1
     1bc:	0020      	movs	r0, r4
    spi40_wr8(AX5043_FOURFSK1, 0x16); //org value: 0x16
     1be:	4b04      	ldr	r3, [pc, #16]	; (1d0 <spi40_rd8+0x28>)
     1c0:	4798      	blx	r3
     1c2:	4b04      	ldr	r3, [pc, #16]	; (1d4 <spi40_rd8+0x2c>)
     1c4:	4798      	blx	r3
    spi40_wr8(AX5043_BBOFFSRES1, 0x00);
     1c6:	7820      	ldrb	r0, [r4, #0]
     1c8:	b002      	add	sp, #8
     1ca:	bd10      	pop	{r4, pc}
     1cc:	00000115 	.word	0x00000115
    spi40_wr8(AX5043_AGCGAIN3, 0xFF);
     1d0:	00000191 	.word	0x00000191
     1d4:	00000175 	.word	0x00000175

000001d8 <spi40_rollavg>:
    spi40_wr8(AX5043_AGCTARGET3, 0x8F); //org val: 0x84
     1d8:	b510      	push	{r4, lr}
     1da:	4c0c      	ldr	r4, [pc, #48]	; (20c <spi40_rollavg+0x34>)
     1dc:	7823      	ldrb	r3, [r4, #0]
    spi40_wr8(AX5043_AGCAHYST3, 0x00); 
     1de:	4a0c      	ldr	r2, [pc, #48]	; (210 <spi40_rollavg+0x38>)
     1e0:	54d0      	strb	r0, [r2, r3]
     1e2:	1c58      	adds	r0, r3, #1
     1e4:	210a      	movs	r1, #10
    spi40_wr8(AX5043_AGCMINMAX3, 0x00);
     1e6:	4b0b      	ldr	r3, [pc, #44]	; (214 <spi40_rollavg+0x3c>)
     1e8:	4798      	blx	r3
     1ea:	7021      	strb	r1, [r4, #0]
     1ec:	2000      	movs	r0, #0
    spi40_wr8(AX5043_TIMEGAIN3, 0xAA);
     1ee:	2300      	movs	r3, #0
     1f0:	e004      	b.n	1fc <spi40_rollavg+0x24>
     1f2:	4a07      	ldr	r2, [pc, #28]	; (210 <spi40_rollavg+0x38>)
     1f4:	5cd2      	ldrb	r2, [r2, r3]
    spi40_wr8(AX5043_DRGAIN3, 0xA5);
     1f6:	1880      	adds	r0, r0, r2
     1f8:	3301      	adds	r3, #1
     1fa:	b2db      	uxtb	r3, r3
     1fc:	2b09      	cmp	r3, #9
    spi40_wr8(AX5043_PHASEGAIN3, 0xC3);
     1fe:	d9f8      	bls.n	1f2 <spi40_rollavg+0x1a>
     200:	210a      	movs	r1, #10
     202:	4b05      	ldr	r3, [pc, #20]	; (218 <spi40_rollavg+0x40>)
     204:	4798      	blx	r3
    spi40_wr8(AX5043_FREQGAINA3, 0x0F);
     206:	b2c0      	uxtb	r0, r0
     208:	bd10      	pop	{r4, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	20000028 	.word	0x20000028
    spi40_wr8(AX5043_FREQGAINB3, 0x1F);
     210:	2000002c 	.word	0x2000002c
     214:	00001f01 	.word	0x00001f01
    spi40_wr8(AX5043_FREQGAINC3, 0x0D);
     218:	00001c21 	.word	0x00001c21

0000021c <spi40_rssi>:
     21c:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_FREQGAIND3, 0x0D);
     21e:	2040      	movs	r0, #64	; 0x40
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <spi40_rssi+0x14>)
     222:	4798      	blx	r3
     224:	4b03      	ldr	r3, [pc, #12]	; (234 <spi40_rssi+0x18>)
    spi40_wr8(AX5043_AMPLGAIN3, 0x01); //org val: 0x06
     226:	4798      	blx	r3
     228:	b240      	sxtb	r0, r0
     22a:	b280      	uxth	r0, r0
     22c:	bd10      	pop	{r4, pc}
    spi40_wr8(AX5043_FREQDEV13, 0x00);
     22e:	46c0      	nop			; (mov r8, r8)
     230:	000001a9 	.word	0x000001a9
     234:	000001d9 	.word	0x000001d9

00000238 <uart245_init>:
 * Return Values(s) : void
 * Description      : Initializes the UART SERCOM for communicating with the
 *  RC2500HP.
 */
void uart245_init(void)
{
     238:	b510      	push	{r4, lr}
     23a:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	05db      	lsls	r3, r3, #23
     240:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     242:	2300      	movs	r3, #0
     244:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     246:	22ff      	movs	r2, #255	; 0xff
     248:	4669      	mov	r1, sp
     24a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     24c:	2200      	movs	r2, #0
     24e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     250:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     252:	2101      	movs	r1, #1
     254:	2024      	movs	r0, #36	; 0x24
     256:	466c      	mov	r4, sp
     258:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     25a:	3001      	adds	r0, #1
     25c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     25e:	3125      	adds	r1, #37	; 0x25
     260:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     262:	3101      	adds	r1, #1
     264:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     266:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     268:	3105      	adds	r1, #5
     26a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     26c:	3101      	adds	r1, #1
     26e:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     270:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     272:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     274:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     276:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     278:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     27a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     27c:	2313      	movs	r3, #19
     27e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     280:	7762      	strb	r2, [r4, #29]
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    
    // initialize UART parameters
    config_usart.baudrate    = UART245_BAUD;
     282:	2396      	movs	r3, #150	; 0x96
     284:	01db      	lsls	r3, r3, #7
     286:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART245_PINMUX;
     288:	2390      	movs	r3, #144	; 0x90
     28a:	035b      	lsls	r3, r3, #13
     28c:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX245;
     28e:	4b12      	ldr	r3, [pc, #72]	; (2d8 <uart245_init+0xa0>)
     290:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX245;
     292:	4b12      	ldr	r3, [pc, #72]	; (2dc <uart245_init+0xa4>)
     294:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     296:	2301      	movs	r3, #1
     298:	425b      	negs	r3, r3
     29a:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     29c:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.generator_source = UART245_CLK;
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    
    // initialize the uart module until an STATUS_OK is returned
    while (usart_init(&uart245_inst, UART245, &config_usart) != STATUS_OK);
     29e:	466a      	mov	r2, sp
     2a0:	490f      	ldr	r1, [pc, #60]	; (2e0 <uart245_init+0xa8>)
     2a2:	4810      	ldr	r0, [pc, #64]	; (2e4 <uart245_init+0xac>)
     2a4:	4b10      	ldr	r3, [pc, #64]	; (2e8 <uart245_init+0xb0>)
     2a6:	4798      	blx	r3
     2a8:	2800      	cmp	r0, #0
     2aa:	d1f8      	bne.n	29e <uart245_init+0x66>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     2ac:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <uart245_init+0xac>)
     2ae:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2b0:	0020      	movs	r0, r4
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <uart245_init+0xb4>)
     2b4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2b6:	231f      	movs	r3, #31
     2b8:	4018      	ands	r0, r3
     2ba:	3b1e      	subs	r3, #30
     2bc:	4083      	lsls	r3, r0
     2be:	4a0c      	ldr	r2, [pc, #48]	; (2f0 <uart245_init+0xb8>)
     2c0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     2c2:	4b08      	ldr	r3, [pc, #32]	; (2e4 <uart245_init+0xac>)
     2c4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     2c6:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     2c8:	2b00      	cmp	r3, #0
     2ca:	d1fa      	bne.n	2c2 <uart245_init+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     2cc:	6823      	ldr	r3, [r4, #0]
     2ce:	2202      	movs	r2, #2
     2d0:	4313      	orrs	r3, r2
     2d2:	6023      	str	r3, [r4, #0]
    
    usart_enable(&uart245_inst);
}
     2d4:	b010      	add	sp, #64	; 0x40
     2d6:	bd10      	pop	{r4, pc}
     2d8:	00080002 	.word	0x00080002
     2dc:	00090002 	.word	0x00090002
     2e0:	42000800 	.word	0x42000800
     2e4:	20000038 	.word	0x20000038
     2e8:	00000a09 	.word	0x00000a09
     2ec:	000012dd 	.word	0x000012dd
     2f0:	e000e100 	.word	0xe000e100

000002f4 <uart245_wait_prompt>:
 * Description      : Waits for the prompt character from the RC2500HP,
 *  the '>' character. Returns a ASF status code based on the result of UART
 *  functions.
 */
status_code_genare_t uart245_wait_prompt(void)
{
     2f4:	b510      	push	{r4, lr}
     2f6:	e00a      	b.n	30e <uart245_wait_prompt+0x1a>
        if((stat_val != STATUS_OK) && (stat_val != STATUS_ERR_TIMEOUT))
            return stat_val;
        
        /* if the received character is not the module's prompt character, 
         * wait some more */
        if(uart245_rx_buff[0] != '>')
     2f8:	4b0d      	ldr	r3, [pc, #52]	; (330 <uart245_wait_prompt+0x3c>)
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	2b3e      	cmp	r3, #62	; 0x3e
     2fe:	d014      	beq.n	32a <uart245_wait_prompt+0x36>
            wait_time--;
        else
            return STATUS_OK;
        
        // delay a millisecond
        delay_ms(1);
     300:	2001      	movs	r0, #1
     302:	4b0c      	ldr	r3, [pc, #48]	; (334 <uart245_wait_prompt+0x40>)
     304:	4798      	blx	r3
        
    }while (uart245_rx_buff[0] != '>');
     306:	4b0a      	ldr	r3, [pc, #40]	; (330 <uart245_wait_prompt+0x3c>)
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	2b3e      	cmp	r3, #62	; 0x3e
     30c:	d00b      	beq.n	326 <uart245_wait_prompt+0x32>
        uart245_rx_buff[0] = 0xFF;
     30e:	4908      	ldr	r1, [pc, #32]	; (330 <uart245_wait_prompt+0x3c>)
     310:	23ff      	movs	r3, #255	; 0xff
     312:	700b      	strb	r3, [r1, #0]
        stat_val = usart_read_buffer_wait(&uart245_inst, uart245_rx_buff, 1);
     314:	2201      	movs	r2, #1
     316:	4808      	ldr	r0, [pc, #32]	; (338 <uart245_wait_prompt+0x44>)
     318:	4b08      	ldr	r3, [pc, #32]	; (33c <uart245_wait_prompt+0x48>)
     31a:	4798      	blx	r3
        if((stat_val != STATUS_OK) && (stat_val != STATUS_ERR_TIMEOUT))
     31c:	2800      	cmp	r0, #0
     31e:	d0eb      	beq.n	2f8 <uart245_wait_prompt+0x4>
     320:	2812      	cmp	r0, #18
     322:	d0e9      	beq.n	2f8 <uart245_wait_prompt+0x4>
     324:	e002      	b.n	32c <uart245_wait_prompt+0x38>
    
    return STATUS_ABORTED;
     326:	2004      	movs	r0, #4
     328:	e000      	b.n	32c <uart245_wait_prompt+0x38>
            return STATUS_OK;
     32a:	2000      	movs	r0, #0
}
     32c:	bd10      	pop	{r4, pc}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	2000006c 	.word	0x2000006c
     334:	00000471 	.word	0x00000471
     338:	20000038 	.word	0x20000038
     33c:	00000bed 	.word	0x00000bed

00000340 <uart245_enter_config>:
 * Description      : Enters the config mode of the RC2500HP. Refer to pg44 of
 *  the RC2500HP datasheet for enter/exiting configuration mode. Returns a ASF 
 *  status code based on the result of UART functions.
 */
status_code_genare_t uart245_enter_config(void)
{
     340:	b570      	push	{r4, r5, r6, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     342:	4c07      	ldr	r4, [pc, #28]	; (360 <uart245_enter_config+0x20>)
     344:	2540      	movs	r5, #64	; 0x40
     346:	6165      	str	r5, [r4, #20]
    
    // pull the CONFIG pin low to begin configuration mode
    port_pin_set_output_level(CONFIG245, false);
    
    // wait for the module to return a prompt '>' character
    stat_val = uart245_wait_prompt();
     348:	4b06      	ldr	r3, [pc, #24]	; (364 <uart245_enter_config+0x24>)
     34a:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     34c:	61a5      	str	r5, [r4, #24]
    // set the CONFIG pin back high
    port_pin_set_output_level(CONFIG245, true);
    
    /* if a character wasn't received before the uart's time out or another
     * error occurred, return that error */
    if(stat_val != STATUS_OK)
     34e:	2800      	cmp	r0, #0
     350:	d104      	bne.n	35c <uart245_enter_config+0x1c>
        return stat_val;
        
    /* if the received character is not the module's prompt character, 
     * return an error */
    if(uart245_rx_buff[0] != '>')
     352:	4b05      	ldr	r3, [pc, #20]	; (368 <uart245_enter_config+0x28>)
     354:	781b      	ldrb	r3, [r3, #0]
     356:	2b3e      	cmp	r3, #62	; 0x3e
     358:	d000      	beq.n	35c <uart245_enter_config+0x1c>
        return STATUS_ABORTED;
     35a:	3004      	adds	r0, #4
        
    // else return the stat_val if everything was OK
    return stat_val;
}
     35c:	bd70      	pop	{r4, r5, r6, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	41004400 	.word	0x41004400
     364:	000002f5 	.word	0x000002f5
     368:	2000006c 	.word	0x2000006c

0000036c <uart245_exit_config>:
 * Description      : Exits the config mode of the RC2500HP. Refer to pg44 of
 *  the RC2500HP datasheet for enter/exiting configuration mode. Returns a ASF
 *  status code based on the result of UART functions.
 */
status_code_genare_t uart245_exit_config(void)
{
     36c:	b510      	push	{r4, lr}
    status_code_genare_t stat_val;
    
    // send an 'X' to indicate end of CONFIG mode
    do 
    {
        stat_val = usart_write_wait(&uart245_inst, 'X');
     36e:	2158      	movs	r1, #88	; 0x58
     370:	4805      	ldr	r0, [pc, #20]	; (388 <uart245_exit_config+0x1c>)
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <uart245_exit_config+0x20>)
     374:	4798      	blx	r3
     376:	0004      	movs	r4, r0
    } while (stat_val == STATUS_BUSY);
     378:	2805      	cmp	r0, #5
     37a:	d0f8      	beq.n	36e <uart245_exit_config+0x2>
    
    /* wait one millisecond so the module can return to IDLE state
     * refer to page 44 of RC2500HP-TM datasheet for timing info */
    delay_ms(1);
     37c:	2001      	movs	r0, #1
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <uart245_exit_config+0x24>)
     380:	4798      	blx	r3
    
    return stat_val;
}
     382:	0020      	movs	r0, r4
     384:	bd10      	pop	{r4, pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	20000038 	.word	0x20000038
     38c:	00000b4d 	.word	0x00000b4d
     390:	00000471 	.word	0x00000471

00000394 <uart245_config_get_rssi>:
 * Description      : Sends an RSSI read config command to
 *  the RC2500HP, reads the output RSSI byte, converts it based on the equation
 *  on pg 51 of the RC2500HP datasheet, and returns the float.
 */
float uart245_config_get_rssi(void)
{
     394:	b510      	push	{r4, lr}
     396:	b082      	sub	sp, #8
    
    uint8_t ret_val = 0;
     398:	2200      	movs	r2, #0
     39a:	466b      	mov	r3, sp
     39c:	71da      	strb	r2, [r3, #7]

    // send an 'S' to get the RSSI value, wait until the uart is successful
    while(usart_write_wait(&uart245_inst, 'S') == STATUS_BUSY);
     39e:	2153      	movs	r1, #83	; 0x53
     3a0:	480d      	ldr	r0, [pc, #52]	; (3d8 <uart245_config_get_rssi+0x44>)
     3a2:	4b0e      	ldr	r3, [pc, #56]	; (3dc <uart245_config_get_rssi+0x48>)
     3a4:	4798      	blx	r3
     3a6:	2805      	cmp	r0, #5
     3a8:	d0f9      	beq.n	39e <uart245_config_get_rssi+0xa>
    
    usart_read_buffer_wait(&uart245_inst, &ret_val, 1);
     3aa:	466b      	mov	r3, sp
     3ac:	1ddc      	adds	r4, r3, #7
     3ae:	2201      	movs	r2, #1
     3b0:	0021      	movs	r1, r4
     3b2:	4809      	ldr	r0, [pc, #36]	; (3d8 <uart245_config_get_rssi+0x44>)
     3b4:	4b0a      	ldr	r3, [pc, #40]	; (3e0 <uart245_config_get_rssi+0x4c>)
     3b6:	4798      	blx	r3
    
    // wait for the module to return a prompt '>' character
    uart245_wait_prompt();
     3b8:	4b0a      	ldr	r3, [pc, #40]	; (3e4 <uart245_config_get_rssi+0x50>)
     3ba:	4798      	blx	r3
    
    return ((-1.0f) * (((float) ret_val) / 2.00f));
     3bc:	7820      	ldrb	r0, [r4, #0]
     3be:	4b0a      	ldr	r3, [pc, #40]	; (3e8 <uart245_config_get_rssi+0x54>)
     3c0:	4798      	blx	r3
     3c2:	21fc      	movs	r1, #252	; 0xfc
     3c4:	0589      	lsls	r1, r1, #22
     3c6:	4b09      	ldr	r3, [pc, #36]	; (3ec <uart245_config_get_rssi+0x58>)
     3c8:	4798      	blx	r3
     3ca:	2380      	movs	r3, #128	; 0x80
     3cc:	061b      	lsls	r3, r3, #24
     3ce:	469c      	mov	ip, r3
     3d0:	4460      	add	r0, ip
}
     3d2:	b002      	add	sp, #8
     3d4:	bd10      	pop	{r4, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	20000038 	.word	0x20000038
     3dc:	00000b4d 	.word	0x00000b4d
     3e0:	00000bed 	.word	0x00000bed
     3e4:	000002f5 	.word	0x000002f5
     3e8:	000021e1 	.word	0x000021e1
     3ec:	00001f61 	.word	0x00001f61

000003f0 <uart245_rssi>:
 * Return Values(s) : int16_t
 * Description      : Gets an RSSI value from the RC2500HP and returns
 *  it as a 2 byte int.
 */
int16_t uart245_rssi(void)
{
     3f0:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTCLR.reg = pin_mask;
     3f2:	4d0a      	ldr	r5, [pc, #40]	; (41c <uart245_rssi+0x2c>)
     3f4:	2680      	movs	r6, #128	; 0x80
     3f6:	616e      	str	r6, [r5, #20]
    float float_val = 0;
    int16_t ret_val = 0;
    
    // reset the device to guarantee entry into config mode
    port_pin_set_output_level(RESET245, false);
    delay_ms(10);
     3f8:	200a      	movs	r0, #10
     3fa:	4c09      	ldr	r4, [pc, #36]	; (420 <uart245_rssi+0x30>)
     3fc:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
     3fe:	61ae      	str	r6, [r5, #24]
    port_pin_set_output_level(RESET245, true);
    delay_ms(4);
     400:	2004      	movs	r0, #4
     402:	47a0      	blx	r4
    
    // enter the RC2500HP's config mode
    uart245_enter_config();
     404:	4b07      	ldr	r3, [pc, #28]	; (424 <uart245_rssi+0x34>)
     406:	4798      	blx	r3
    
    // get the RSSI
    float_val = uart245_config_get_rssi();
     408:	4b07      	ldr	r3, [pc, #28]	; (428 <uart245_rssi+0x38>)
     40a:	4798      	blx	r3
     40c:	1c04      	adds	r4, r0, #0
    
    uart245_exit_config();
     40e:	4b07      	ldr	r3, [pc, #28]	; (42c <uart245_rssi+0x3c>)
     410:	4798      	blx	r3
    
    // cast the float RSSI to a 2 byte int RSSI
    ret_val = (int16_t) float_val;
     412:	1c20      	adds	r0, r4, #0
     414:	4b06      	ldr	r3, [pc, #24]	; (430 <uart245_rssi+0x40>)
     416:	4798      	blx	r3
     418:	b200      	sxth	r0, r0
    
    return ret_val;
}
     41a:	bd70      	pop	{r4, r5, r6, pc}
     41c:	41004400 	.word	0x41004400
     420:	00000471 	.word	0x00000471
     424:	00000341 	.word	0x00000341
     428:	00000395 	.word	0x00000395
     42c:	0000036d 	.word	0x0000036d
     430:	000021a1 	.word	0x000021a1

00000434 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     434:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     436:	2000      	movs	r0, #0
     438:	4b08      	ldr	r3, [pc, #32]	; (45c <delay_init+0x28>)
     43a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     43c:	4c08      	ldr	r4, [pc, #32]	; (460 <delay_init+0x2c>)
     43e:	21fa      	movs	r1, #250	; 0xfa
     440:	0089      	lsls	r1, r1, #2
     442:	47a0      	blx	r4
     444:	4b07      	ldr	r3, [pc, #28]	; (464 <delay_init+0x30>)
     446:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     448:	21fa      	movs	r1, #250	; 0xfa
     44a:	0089      	lsls	r1, r1, #2
     44c:	47a0      	blx	r4
     44e:	4b06      	ldr	r3, [pc, #24]	; (468 <delay_init+0x34>)
     450:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     452:	2205      	movs	r2, #5
     454:	4b05      	ldr	r3, [pc, #20]	; (46c <delay_init+0x38>)
     456:	601a      	str	r2, [r3, #0]
}
     458:	bd10      	pop	{r4, pc}
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	00001741 	.word	0x00001741
     460:	00001c21 	.word	0x00001c21
     464:	20000000 	.word	0x20000000
     468:	20000004 	.word	0x20000004
     46c:	e000e010 	.word	0xe000e010

00000470 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     470:	e000      	b.n	474 <delay_cycles_ms+0x4>
{
     472:	0010      	movs	r0, r2
	while (n--) {
     474:	1e42      	subs	r2, r0, #1
     476:	2800      	cmp	r0, #0
     478:	d00c      	beq.n	494 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     47a:	4b07      	ldr	r3, [pc, #28]	; (498 <delay_cycles_ms+0x28>)
     47c:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     47e:	2b00      	cmp	r3, #0
     480:	d0f7      	beq.n	472 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     482:	4906      	ldr	r1, [pc, #24]	; (49c <delay_cycles_ms+0x2c>)
     484:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     486:	2300      	movs	r3, #0
     488:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     48a:	4b04      	ldr	r3, [pc, #16]	; (49c <delay_cycles_ms+0x2c>)
     48c:	681b      	ldr	r3, [r3, #0]
     48e:	03db      	lsls	r3, r3, #15
     490:	d5fb      	bpl.n	48a <delay_cycles_ms+0x1a>
     492:	e7ee      	b.n	472 <delay_cycles_ms+0x2>
	}
}
     494:	4770      	bx	lr
     496:	46c0      	nop			; (mov r8, r8)
     498:	20000000 	.word	0x20000000
     49c:	e000e010 	.word	0xe000e010

000004a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4a0:	b500      	push	{lr}
     4a2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4a4:	ab01      	add	r3, sp, #4
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4aa:	780a      	ldrb	r2, [r1, #0]
     4ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ae:	784a      	ldrb	r2, [r1, #1]
     4b0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4b2:	788a      	ldrb	r2, [r1, #2]
     4b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4b6:	0019      	movs	r1, r3
     4b8:	4b01      	ldr	r3, [pc, #4]	; (4c0 <port_pin_set_config+0x20>)
     4ba:	4798      	blx	r3
}
     4bc:	b003      	add	sp, #12
     4be:	bd00      	pop	{pc}
     4c0:	00001959 	.word	0x00001959

000004c4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4c6:	46de      	mov	lr, fp
     4c8:	4657      	mov	r7, sl
     4ca:	464e      	mov	r6, r9
     4cc:	4645      	mov	r5, r8
     4ce:	b5e0      	push	{r5, r6, r7, lr}
     4d0:	b085      	sub	sp, #20
     4d2:	4689      	mov	r9, r1
     4d4:	0016      	movs	r6, r2
     4d6:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4d8:	2200      	movs	r2, #0
     4da:	2300      	movs	r3, #0
     4dc:	2100      	movs	r1, #0
     4de:	468b      	mov	fp, r1
     4e0:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     4e2:	253f      	movs	r5, #63	; 0x3f
     4e4:	9600      	str	r6, [sp, #0]
     4e6:	9701      	str	r7, [sp, #4]
     4e8:	9002      	str	r0, [sp, #8]
     4ea:	4649      	mov	r1, r9
     4ec:	9103      	str	r1, [sp, #12]
     4ee:	e011      	b.n	514 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     4f0:	2120      	movs	r1, #32
     4f2:	1b49      	subs	r1, r1, r5
     4f4:	2400      	movs	r4, #0
     4f6:	3401      	adds	r4, #1
     4f8:	40cc      	lsrs	r4, r1
     4fa:	e013      	b.n	524 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     4fc:	9800      	ldr	r0, [sp, #0]
     4fe:	9901      	ldr	r1, [sp, #4]
     500:	1a12      	subs	r2, r2, r0
     502:	418b      	sbcs	r3, r1
			q |= bit_shift;
     504:	4659      	mov	r1, fp
     506:	4660      	mov	r0, ip
     508:	4301      	orrs	r1, r0
     50a:	468b      	mov	fp, r1
     50c:	4651      	mov	r1, sl
     50e:	4321      	orrs	r1, r4
     510:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     512:	3d01      	subs	r5, #1
     514:	2d00      	cmp	r5, #0
     516:	db23      	blt.n	560 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     518:	2120      	movs	r1, #32
     51a:	4249      	negs	r1, r1
     51c:	1869      	adds	r1, r5, r1
     51e:	d4e7      	bmi.n	4f0 <long_division+0x2c>
     520:	2401      	movs	r4, #1
     522:	408c      	lsls	r4, r1
     524:	2101      	movs	r1, #1
     526:	40a9      	lsls	r1, r5
     528:	468c      	mov	ip, r1
		r = r << 1;
     52a:	1892      	adds	r2, r2, r2
     52c:	415b      	adcs	r3, r3
     52e:	0010      	movs	r0, r2
     530:	0019      	movs	r1, r3
		if (n & bit_shift) {
     532:	9e02      	ldr	r6, [sp, #8]
     534:	4667      	mov	r7, ip
     536:	403e      	ands	r6, r7
     538:	46b1      	mov	r9, r6
     53a:	9e03      	ldr	r6, [sp, #12]
     53c:	4026      	ands	r6, r4
     53e:	46b0      	mov	r8, r6
     540:	464e      	mov	r6, r9
     542:	4647      	mov	r7, r8
     544:	433e      	orrs	r6, r7
     546:	d003      	beq.n	550 <long_division+0x8c>
			r |= 0x01;
     548:	2601      	movs	r6, #1
     54a:	4306      	orrs	r6, r0
     54c:	0032      	movs	r2, r6
     54e:	000b      	movs	r3, r1
		if (r >= d) {
     550:	9800      	ldr	r0, [sp, #0]
     552:	9901      	ldr	r1, [sp, #4]
     554:	4299      	cmp	r1, r3
     556:	d8dc      	bhi.n	512 <long_division+0x4e>
     558:	d1d0      	bne.n	4fc <long_division+0x38>
     55a:	4290      	cmp	r0, r2
     55c:	d8d9      	bhi.n	512 <long_division+0x4e>
     55e:	e7cd      	b.n	4fc <long_division+0x38>
		}
	}

	return q;
}
     560:	4658      	mov	r0, fp
     562:	4651      	mov	r1, sl
     564:	b005      	add	sp, #20
     566:	bc3c      	pop	{r2, r3, r4, r5}
     568:	4690      	mov	r8, r2
     56a:	4699      	mov	r9, r3
     56c:	46a2      	mov	sl, r4
     56e:	46ab      	mov	fp, r5
     570:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000572 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     572:	0849      	lsrs	r1, r1, #1
     574:	4281      	cmp	r1, r0
     576:	d201      	bcs.n	57c <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     578:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     57a:	4770      	bx	lr
     57c:	2300      	movs	r3, #0
     57e:	e002      	b.n	586 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     580:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     582:	3301      	adds	r3, #1
     584:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     586:	4281      	cmp	r1, r0
     588:	d2fa      	bcs.n	580 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     58a:	3b01      	subs	r3, #1
     58c:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     58e:	2bff      	cmp	r3, #255	; 0xff
     590:	d901      	bls.n	596 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     592:	2040      	movs	r0, #64	; 0x40
     594:	e7f1      	b.n	57a <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     596:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     598:	2000      	movs	r0, #0
     59a:	e7ee      	b.n	57a <_sercom_get_sync_baud_val+0x8>

0000059c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     59c:	b570      	push	{r4, r5, r6, lr}
     59e:	b082      	sub	sp, #8
     5a0:	000c      	movs	r4, r1
     5a2:	0015      	movs	r5, r2
     5a4:	aa06      	add	r2, sp, #24
     5a6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     5a8:	0002      	movs	r2, r0
     5aa:	434a      	muls	r2, r1
     5ac:	42a2      	cmp	r2, r4
     5ae:	d902      	bls.n	5b6 <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5b0:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     5b2:	b002      	add	sp, #8
     5b4:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     5b6:	2b00      	cmp	r3, #0
     5b8:	d114      	bne.n	5e4 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     5ba:	0002      	movs	r2, r0
     5bc:	0008      	movs	r0, r1
     5be:	2100      	movs	r1, #0
     5c0:	4e1b      	ldr	r6, [pc, #108]	; (630 <_sercom_get_async_baud_val+0x94>)
     5c2:	47b0      	blx	r6
     5c4:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     5c6:	0022      	movs	r2, r4
     5c8:	2300      	movs	r3, #0
     5ca:	2000      	movs	r0, #0
     5cc:	4c19      	ldr	r4, [pc, #100]	; (634 <_sercom_get_async_baud_val+0x98>)
     5ce:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5d0:	2200      	movs	r2, #0
     5d2:	2301      	movs	r3, #1
     5d4:	1a12      	subs	r2, r2, r0
     5d6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     5d8:	0c10      	lsrs	r0, r2, #16
     5da:	041b      	lsls	r3, r3, #16
     5dc:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     5de:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     5e0:	2000      	movs	r0, #0
     5e2:	e7e6      	b.n	5b2 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5e4:	2b01      	cmp	r3, #1
     5e6:	d001      	beq.n	5ec <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     5e8:	2000      	movs	r0, #0
     5ea:	e7f8      	b.n	5de <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     5ec:	000a      	movs	r2, r1
     5ee:	2300      	movs	r3, #0
     5f0:	2100      	movs	r1, #0
     5f2:	4e0f      	ldr	r6, [pc, #60]	; (630 <_sercom_get_async_baud_val+0x94>)
     5f4:	47b0      	blx	r6
     5f6:	0002      	movs	r2, r0
     5f8:	000b      	movs	r3, r1
     5fa:	9200      	str	r2, [sp, #0]
     5fc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     5fe:	0020      	movs	r0, r4
     600:	2100      	movs	r1, #0
     602:	4e0c      	ldr	r6, [pc, #48]	; (634 <_sercom_get_async_baud_val+0x98>)
     604:	47b0      	blx	r6
     606:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     608:	2380      	movs	r3, #128	; 0x80
     60a:	019b      	lsls	r3, r3, #6
     60c:	4298      	cmp	r0, r3
     60e:	d901      	bls.n	614 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     610:	2040      	movs	r0, #64	; 0x40
     612:	e7ce      	b.n	5b2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     614:	0f61      	lsrs	r1, r4, #29
     616:	00e0      	lsls	r0, r4, #3
     618:	9a00      	ldr	r2, [sp, #0]
     61a:	9b01      	ldr	r3, [sp, #4]
     61c:	4c05      	ldr	r4, [pc, #20]	; (634 <_sercom_get_async_baud_val+0x98>)
     61e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     620:	b2c0      	uxtb	r0, r0
     622:	00f3      	lsls	r3, r6, #3
     624:	b2db      	uxtb	r3, r3
     626:	1ac0      	subs	r0, r0, r3
     628:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     62a:	0340      	lsls	r0, r0, #13
     62c:	4330      	orrs	r0, r6
     62e:	e7d6      	b.n	5de <_sercom_get_async_baud_val+0x42>
     630:	00001f0d 	.word	0x00001f0d
     634:	000004c5 	.word	0x000004c5

00000638 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     638:	b510      	push	{r4, lr}
     63a:	b082      	sub	sp, #8
     63c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     63e:	4b0e      	ldr	r3, [pc, #56]	; (678 <sercom_set_gclk_generator+0x40>)
     640:	781b      	ldrb	r3, [r3, #0]
     642:	2b00      	cmp	r3, #0
     644:	d007      	beq.n	656 <sercom_set_gclk_generator+0x1e>
     646:	2900      	cmp	r1, #0
     648:	d105      	bne.n	656 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     64a:	4b0b      	ldr	r3, [pc, #44]	; (678 <sercom_set_gclk_generator+0x40>)
     64c:	785b      	ldrb	r3, [r3, #1]
     64e:	4283      	cmp	r3, r0
     650:	d010      	beq.n	674 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     652:	201d      	movs	r0, #29
     654:	e00c      	b.n	670 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     656:	a901      	add	r1, sp, #4
     658:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     65a:	2013      	movs	r0, #19
     65c:	4b07      	ldr	r3, [pc, #28]	; (67c <sercom_set_gclk_generator+0x44>)
     65e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     660:	2013      	movs	r0, #19
     662:	4b07      	ldr	r3, [pc, #28]	; (680 <sercom_set_gclk_generator+0x48>)
     664:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     666:	4b04      	ldr	r3, [pc, #16]	; (678 <sercom_set_gclk_generator+0x40>)
     668:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     66a:	2201      	movs	r2, #1
     66c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     66e:	2000      	movs	r0, #0
}
     670:	b002      	add	sp, #8
     672:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     674:	2000      	movs	r0, #0
     676:	e7fb      	b.n	670 <sercom_set_gclk_generator+0x38>
     678:	2000008c 	.word	0x2000008c
     67c:	00001875 	.word	0x00001875
     680:	000017ed 	.word	0x000017ed

00000684 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     684:	4b40      	ldr	r3, [pc, #256]	; (788 <_sercom_get_default_pad+0x104>)
     686:	4298      	cmp	r0, r3
     688:	d031      	beq.n	6ee <_sercom_get_default_pad+0x6a>
     68a:	d90a      	bls.n	6a2 <_sercom_get_default_pad+0x1e>
     68c:	4b3f      	ldr	r3, [pc, #252]	; (78c <_sercom_get_default_pad+0x108>)
     68e:	4298      	cmp	r0, r3
     690:	d04d      	beq.n	72e <_sercom_get_default_pad+0xaa>
     692:	4b3f      	ldr	r3, [pc, #252]	; (790 <_sercom_get_default_pad+0x10c>)
     694:	4298      	cmp	r0, r3
     696:	d05a      	beq.n	74e <_sercom_get_default_pad+0xca>
     698:	4b3e      	ldr	r3, [pc, #248]	; (794 <_sercom_get_default_pad+0x110>)
     69a:	4298      	cmp	r0, r3
     69c:	d037      	beq.n	70e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     69e:	2000      	movs	r0, #0
}
     6a0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     6a2:	4b3d      	ldr	r3, [pc, #244]	; (798 <_sercom_get_default_pad+0x114>)
     6a4:	4298      	cmp	r0, r3
     6a6:	d00c      	beq.n	6c2 <_sercom_get_default_pad+0x3e>
     6a8:	4b3c      	ldr	r3, [pc, #240]	; (79c <_sercom_get_default_pad+0x118>)
     6aa:	4298      	cmp	r0, r3
     6ac:	d1f7      	bne.n	69e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6ae:	2901      	cmp	r1, #1
     6b0:	d05f      	beq.n	772 <_sercom_get_default_pad+0xee>
     6b2:	2900      	cmp	r1, #0
     6b4:	d015      	beq.n	6e2 <_sercom_get_default_pad+0x5e>
     6b6:	2902      	cmp	r1, #2
     6b8:	d015      	beq.n	6e6 <_sercom_get_default_pad+0x62>
     6ba:	2903      	cmp	r1, #3
     6bc:	d015      	beq.n	6ea <_sercom_get_default_pad+0x66>
	return 0;
     6be:	2000      	movs	r0, #0
     6c0:	e7ee      	b.n	6a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6c2:	2901      	cmp	r1, #1
     6c4:	d053      	beq.n	76e <_sercom_get_default_pad+0xea>
     6c6:	2900      	cmp	r1, #0
     6c8:	d005      	beq.n	6d6 <_sercom_get_default_pad+0x52>
     6ca:	2902      	cmp	r1, #2
     6cc:	d005      	beq.n	6da <_sercom_get_default_pad+0x56>
     6ce:	2903      	cmp	r1, #3
     6d0:	d005      	beq.n	6de <_sercom_get_default_pad+0x5a>
	return 0;
     6d2:	2000      	movs	r0, #0
     6d4:	e7e4      	b.n	6a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6d6:	4832      	ldr	r0, [pc, #200]	; (7a0 <_sercom_get_default_pad+0x11c>)
     6d8:	e7e2      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     6da:	4832      	ldr	r0, [pc, #200]	; (7a4 <_sercom_get_default_pad+0x120>)
     6dc:	e7e0      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     6de:	4832      	ldr	r0, [pc, #200]	; (7a8 <_sercom_get_default_pad+0x124>)
     6e0:	e7de      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     6e2:	2003      	movs	r0, #3
     6e4:	e7dc      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     6e6:	4831      	ldr	r0, [pc, #196]	; (7ac <_sercom_get_default_pad+0x128>)
     6e8:	e7da      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     6ea:	4831      	ldr	r0, [pc, #196]	; (7b0 <_sercom_get_default_pad+0x12c>)
     6ec:	e7d8      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     6ee:	2901      	cmp	r1, #1
     6f0:	d041      	beq.n	776 <_sercom_get_default_pad+0xf2>
     6f2:	2900      	cmp	r1, #0
     6f4:	d005      	beq.n	702 <_sercom_get_default_pad+0x7e>
     6f6:	2902      	cmp	r1, #2
     6f8:	d005      	beq.n	706 <_sercom_get_default_pad+0x82>
     6fa:	2903      	cmp	r1, #3
     6fc:	d005      	beq.n	70a <_sercom_get_default_pad+0x86>
	return 0;
     6fe:	2000      	movs	r0, #0
     700:	e7ce      	b.n	6a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     702:	482c      	ldr	r0, [pc, #176]	; (7b4 <_sercom_get_default_pad+0x130>)
     704:	e7cc      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     706:	482c      	ldr	r0, [pc, #176]	; (7b8 <_sercom_get_default_pad+0x134>)
     708:	e7ca      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     70a:	482c      	ldr	r0, [pc, #176]	; (7bc <_sercom_get_default_pad+0x138>)
     70c:	e7c8      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     70e:	2901      	cmp	r1, #1
     710:	d033      	beq.n	77a <_sercom_get_default_pad+0xf6>
     712:	2900      	cmp	r1, #0
     714:	d005      	beq.n	722 <_sercom_get_default_pad+0x9e>
     716:	2902      	cmp	r1, #2
     718:	d005      	beq.n	726 <_sercom_get_default_pad+0xa2>
     71a:	2903      	cmp	r1, #3
     71c:	d005      	beq.n	72a <_sercom_get_default_pad+0xa6>
	return 0;
     71e:	2000      	movs	r0, #0
     720:	e7be      	b.n	6a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     722:	4827      	ldr	r0, [pc, #156]	; (7c0 <_sercom_get_default_pad+0x13c>)
     724:	e7bc      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     726:	4827      	ldr	r0, [pc, #156]	; (7c4 <_sercom_get_default_pad+0x140>)
     728:	e7ba      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     72a:	4827      	ldr	r0, [pc, #156]	; (7c8 <_sercom_get_default_pad+0x144>)
     72c:	e7b8      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     72e:	2901      	cmp	r1, #1
     730:	d025      	beq.n	77e <_sercom_get_default_pad+0xfa>
     732:	2900      	cmp	r1, #0
     734:	d005      	beq.n	742 <_sercom_get_default_pad+0xbe>
     736:	2902      	cmp	r1, #2
     738:	d005      	beq.n	746 <_sercom_get_default_pad+0xc2>
     73a:	2903      	cmp	r1, #3
     73c:	d005      	beq.n	74a <_sercom_get_default_pad+0xc6>
	return 0;
     73e:	2000      	movs	r0, #0
     740:	e7ae      	b.n	6a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     742:	4822      	ldr	r0, [pc, #136]	; (7cc <_sercom_get_default_pad+0x148>)
     744:	e7ac      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     746:	4822      	ldr	r0, [pc, #136]	; (7d0 <_sercom_get_default_pad+0x14c>)
     748:	e7aa      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     74a:	4822      	ldr	r0, [pc, #136]	; (7d4 <_sercom_get_default_pad+0x150>)
     74c:	e7a8      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     74e:	2901      	cmp	r1, #1
     750:	d017      	beq.n	782 <_sercom_get_default_pad+0xfe>
     752:	2900      	cmp	r1, #0
     754:	d005      	beq.n	762 <_sercom_get_default_pad+0xde>
     756:	2902      	cmp	r1, #2
     758:	d005      	beq.n	766 <_sercom_get_default_pad+0xe2>
     75a:	2903      	cmp	r1, #3
     75c:	d005      	beq.n	76a <_sercom_get_default_pad+0xe6>
	return 0;
     75e:	2000      	movs	r0, #0
     760:	e79e      	b.n	6a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     762:	481d      	ldr	r0, [pc, #116]	; (7d8 <_sercom_get_default_pad+0x154>)
     764:	e79c      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     766:	481d      	ldr	r0, [pc, #116]	; (7dc <_sercom_get_default_pad+0x158>)
     768:	e79a      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     76a:	481d      	ldr	r0, [pc, #116]	; (7e0 <_sercom_get_default_pad+0x15c>)
     76c:	e798      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     76e:	481d      	ldr	r0, [pc, #116]	; (7e4 <_sercom_get_default_pad+0x160>)
     770:	e796      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     772:	481d      	ldr	r0, [pc, #116]	; (7e8 <_sercom_get_default_pad+0x164>)
     774:	e794      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     776:	481d      	ldr	r0, [pc, #116]	; (7ec <_sercom_get_default_pad+0x168>)
     778:	e792      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     77a:	481d      	ldr	r0, [pc, #116]	; (7f0 <_sercom_get_default_pad+0x16c>)
     77c:	e790      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     77e:	481d      	ldr	r0, [pc, #116]	; (7f4 <_sercom_get_default_pad+0x170>)
     780:	e78e      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     782:	481d      	ldr	r0, [pc, #116]	; (7f8 <_sercom_get_default_pad+0x174>)
     784:	e78c      	b.n	6a0 <_sercom_get_default_pad+0x1c>
     786:	46c0      	nop			; (mov r8, r8)
     788:	42001000 	.word	0x42001000
     78c:	42001800 	.word	0x42001800
     790:	42001c00 	.word	0x42001c00
     794:	42001400 	.word	0x42001400
     798:	42000800 	.word	0x42000800
     79c:	42000c00 	.word	0x42000c00
     7a0:	00040003 	.word	0x00040003
     7a4:	00060003 	.word	0x00060003
     7a8:	00070003 	.word	0x00070003
     7ac:	001e0003 	.word	0x001e0003
     7b0:	001f0003 	.word	0x001f0003
     7b4:	00080003 	.word	0x00080003
     7b8:	000a0003 	.word	0x000a0003
     7bc:	000b0003 	.word	0x000b0003
     7c0:	00100003 	.word	0x00100003
     7c4:	00120003 	.word	0x00120003
     7c8:	00130003 	.word	0x00130003
     7cc:	000c0003 	.word	0x000c0003
     7d0:	000e0003 	.word	0x000e0003
     7d4:	000f0003 	.word	0x000f0003
     7d8:	00160003 	.word	0x00160003
     7dc:	00180003 	.word	0x00180003
     7e0:	00190003 	.word	0x00190003
     7e4:	00050003 	.word	0x00050003
     7e8:	00010003 	.word	0x00010003
     7ec:	00090003 	.word	0x00090003
     7f0:	00110003 	.word	0x00110003
     7f4:	000d0003 	.word	0x000d0003
     7f8:	00170003 	.word	0x00170003

000007fc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     7fc:	b530      	push	{r4, r5, lr}
     7fe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     800:	4c0a      	ldr	r4, [pc, #40]	; (82c <_sercom_get_sercom_inst_index+0x30>)
     802:	466b      	mov	r3, sp
     804:	0022      	movs	r2, r4
     806:	ca32      	ldmia	r2!, {r1, r4, r5}
     808:	c332      	stmia	r3!, {r1, r4, r5}
     80a:	ca32      	ldmia	r2!, {r1, r4, r5}
     80c:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     80e:	2300      	movs	r3, #0
     810:	2b05      	cmp	r3, #5
     812:	d808      	bhi.n	826 <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     814:	009a      	lsls	r2, r3, #2
     816:	4669      	mov	r1, sp
     818:	5852      	ldr	r2, [r2, r1]
     81a:	4282      	cmp	r2, r0
     81c:	d001      	beq.n	822 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     81e:	3301      	adds	r3, #1
     820:	e7f6      	b.n	810 <_sercom_get_sercom_inst_index+0x14>
			return i;
     822:	b2d8      	uxtb	r0, r3
     824:	e000      	b.n	828 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     826:	2000      	movs	r0, #0
}
     828:	b007      	add	sp, #28
     82a:	bd30      	pop	{r4, r5, pc}
     82c:	000022f0 	.word	0x000022f0

00000830 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     830:	b5f0      	push	{r4, r5, r6, r7, lr}
     832:	46de      	mov	lr, fp
     834:	4657      	mov	r7, sl
     836:	464e      	mov	r6, r9
     838:	4645      	mov	r5, r8
     83a:	b5e0      	push	{r5, r6, r7, lr}
     83c:	b087      	sub	sp, #28
     83e:	0004      	movs	r4, r0
     840:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     842:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     844:	0030      	movs	r0, r6
     846:	4b6b      	ldr	r3, [pc, #428]	; (9f4 <_usart_set_config+0x1c4>)
     848:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     84a:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     84c:	2200      	movs	r2, #0
     84e:	230e      	movs	r3, #14
     850:	a902      	add	r1, sp, #8
     852:	468c      	mov	ip, r1
     854:	4463      	add	r3, ip
     856:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     858:	8a2a      	ldrh	r2, [r5, #16]
     85a:	2380      	movs	r3, #128	; 0x80
     85c:	01db      	lsls	r3, r3, #7
     85e:	429a      	cmp	r2, r3
     860:	d03b      	beq.n	8da <_usart_set_config+0xaa>
     862:	d90c      	bls.n	87e <_usart_set_config+0x4e>
     864:	23c0      	movs	r3, #192	; 0xc0
     866:	01db      	lsls	r3, r3, #7
     868:	429a      	cmp	r2, r3
     86a:	d031      	beq.n	8d0 <_usart_set_config+0xa0>
     86c:	2380      	movs	r3, #128	; 0x80
     86e:	021b      	lsls	r3, r3, #8
     870:	429a      	cmp	r2, r3
     872:	d10d      	bne.n	890 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     874:	2303      	movs	r3, #3
     876:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     878:	2300      	movs	r3, #0
     87a:	4699      	mov	r9, r3
			break;
     87c:	e00c      	b.n	898 <_usart_set_config+0x68>
	switch (config->sample_rate) {
     87e:	2380      	movs	r3, #128	; 0x80
     880:	019b      	lsls	r3, r3, #6
     882:	429a      	cmp	r2, r3
     884:	d104      	bne.n	890 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     886:	2310      	movs	r3, #16
     888:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     88a:	3b0f      	subs	r3, #15
     88c:	4699      	mov	r9, r3
			break;
     88e:	e003      	b.n	898 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     890:	2310      	movs	r3, #16
     892:	469a      	mov	sl, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     894:	2300      	movs	r3, #0
     896:	4699      	mov	r9, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     898:	682b      	ldr	r3, [r5, #0]
     89a:	68e9      	ldr	r1, [r5, #12]
     89c:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
     89e:	6969      	ldr	r1, [r5, #20]
     8a0:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     8a2:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8a4:	7e2a      	ldrb	r2, [r5, #24]
     8a6:	0212      	lsls	r2, r2, #8
		config->sample_rate |
     8a8:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8aa:	2226      	movs	r2, #38	; 0x26
     8ac:	5caf      	ldrb	r7, [r5, r2]
     8ae:	077f      	lsls	r7, r7, #29
	ctrla = (uint32_t)config->data_order |
     8b0:	431f      	orrs	r7, r3
     8b2:	9703      	str	r7, [sp, #12]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     8b4:	686b      	ldr	r3, [r5, #4]
     8b6:	4698      	mov	r8, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     8b8:	2b00      	cmp	r3, #0
     8ba:	d021      	beq.n	900 <_usart_set_config+0xd0>
     8bc:	2380      	movs	r3, #128	; 0x80
     8be:	055b      	lsls	r3, r3, #21
     8c0:	4598      	cmp	r8, r3
     8c2:	d13e      	bne.n	942 <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     8c4:	2327      	movs	r3, #39	; 0x27
     8c6:	5ceb      	ldrb	r3, [r5, r3]
     8c8:	2b00      	cmp	r3, #0
     8ca:	d00b      	beq.n	8e4 <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
     8cc:	2000      	movs	r0, #0
     8ce:	e039      	b.n	944 <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8d0:	2308      	movs	r3, #8
     8d2:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8d4:	3b07      	subs	r3, #7
     8d6:	4699      	mov	r9, r3
			break;
     8d8:	e7de      	b.n	898 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8da:	2308      	movs	r3, #8
     8dc:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8de:	2300      	movs	r3, #0
     8e0:	4699      	mov	r9, r3
     8e2:	e7d9      	b.n	898 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8e4:	6a2b      	ldr	r3, [r5, #32]
     8e6:	4699      	mov	r9, r3
     8e8:	b2c0      	uxtb	r0, r0
     8ea:	4b43      	ldr	r3, [pc, #268]	; (9f8 <_usart_set_config+0x1c8>)
     8ec:	4798      	blx	r3
     8ee:	0001      	movs	r1, r0
     8f0:	220e      	movs	r2, #14
     8f2:	ab02      	add	r3, sp, #8
     8f4:	469c      	mov	ip, r3
     8f6:	4462      	add	r2, ip
     8f8:	4648      	mov	r0, r9
     8fa:	4b40      	ldr	r3, [pc, #256]	; (9fc <_usart_set_config+0x1cc>)
     8fc:	4798      	blx	r3
     8fe:	e021      	b.n	944 <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     900:	2327      	movs	r3, #39	; 0x27
     902:	5ceb      	ldrb	r3, [r5, r3]
     904:	2b00      	cmp	r3, #0
     906:	d00b      	beq.n	920 <_usart_set_config+0xf0>
				status_code =
     908:	4653      	mov	r3, sl
     90a:	9300      	str	r3, [sp, #0]
     90c:	464b      	mov	r3, r9
     90e:	220e      	movs	r2, #14
     910:	a902      	add	r1, sp, #8
     912:	468c      	mov	ip, r1
     914:	4462      	add	r2, ip
     916:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     918:	6a28      	ldr	r0, [r5, #32]
     91a:	4f39      	ldr	r7, [pc, #228]	; (a00 <_usart_set_config+0x1d0>)
     91c:	47b8      	blx	r7
     91e:	e011      	b.n	944 <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     920:	6a2b      	ldr	r3, [r5, #32]
     922:	469b      	mov	fp, r3
     924:	b2c0      	uxtb	r0, r0
     926:	4b34      	ldr	r3, [pc, #208]	; (9f8 <_usart_set_config+0x1c8>)
     928:	4798      	blx	r3
     92a:	0001      	movs	r1, r0
				status_code =
     92c:	4653      	mov	r3, sl
     92e:	9300      	str	r3, [sp, #0]
     930:	464b      	mov	r3, r9
     932:	220e      	movs	r2, #14
     934:	a802      	add	r0, sp, #8
     936:	4684      	mov	ip, r0
     938:	4462      	add	r2, ip
     93a:	4658      	mov	r0, fp
     93c:	4f30      	ldr	r7, [pc, #192]	; (a00 <_usart_set_config+0x1d0>)
     93e:	47b8      	blx	r7
     940:	e000      	b.n	944 <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
     942:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     944:	2800      	cmp	r0, #0
     946:	d146      	bne.n	9d6 <_usart_set_config+0x1a6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     948:	7e6b      	ldrb	r3, [r5, #25]
     94a:	2b00      	cmp	r3, #0
     94c:	d001      	beq.n	952 <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     94e:	7eab      	ldrb	r3, [r5, #26]
     950:	73b3      	strb	r3, [r6, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     952:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     954:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     956:	2b00      	cmp	r3, #0
     958:	d1fb      	bne.n	952 <_usart_set_config+0x122>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     95a:	330e      	adds	r3, #14
     95c:	aa02      	add	r2, sp, #8
     95e:	4694      	mov	ip, r2
     960:	4463      	add	r3, ip
     962:	881b      	ldrh	r3, [r3, #0]
     964:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     966:	4643      	mov	r3, r8
     968:	9f03      	ldr	r7, [sp, #12]
     96a:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     96c:	2327      	movs	r3, #39	; 0x27
     96e:	5ceb      	ldrb	r3, [r5, r3]
     970:	2b00      	cmp	r3, #0
     972:	d101      	bne.n	978 <_usart_set_config+0x148>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     974:	3304      	adds	r3, #4
     976:	431f      	orrs	r7, r3
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     978:	7e6a      	ldrb	r2, [r5, #25]
     97a:	0292      	lsls	r2, r2, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     97c:	7f2b      	ldrb	r3, [r5, #28]
     97e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     980:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     982:	7f6b      	ldrb	r3, [r5, #29]
     984:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     986:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     988:	2324      	movs	r3, #36	; 0x24
     98a:	5ceb      	ldrb	r3, [r5, r3]
     98c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     98e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     990:	2325      	movs	r3, #37	; 0x25
     992:	5ceb      	ldrb	r3, [r5, r3]
     994:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     996:	431a      	orrs	r2, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     998:	7aab      	ldrb	r3, [r5, #10]
     99a:	431a      	orrs	r2, r3
	ctrlb |= (uint32_t)config->character_size;
     99c:	7aeb      	ldrb	r3, [r5, #11]
     99e:	431a      	orrs	r2, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     9a0:	892b      	ldrh	r3, [r5, #8]
     9a2:	2bff      	cmp	r3, #255	; 0xff
     9a4:	d01e      	beq.n	9e4 <_usart_set_config+0x1b4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     9a6:	2180      	movs	r1, #128	; 0x80
     9a8:	0449      	lsls	r1, r1, #17
     9aa:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
     9ac:	431a      	orrs	r2, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     9ae:	232c      	movs	r3, #44	; 0x2c
     9b0:	5ceb      	ldrb	r3, [r5, r3]
     9b2:	2b00      	cmp	r3, #0
     9b4:	d103      	bne.n	9be <_usart_set_config+0x18e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     9b6:	4b13      	ldr	r3, [pc, #76]	; (a04 <_usart_set_config+0x1d4>)
     9b8:	789b      	ldrb	r3, [r3, #2]
     9ba:	079b      	lsls	r3, r3, #30
     9bc:	d501      	bpl.n	9c2 <_usart_set_config+0x192>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9be:	2380      	movs	r3, #128	; 0x80
     9c0:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     9c2:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     9c4:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     9c6:	2b00      	cmp	r3, #0
     9c8:	d1fb      	bne.n	9c2 <_usart_set_config+0x192>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     9ca:	6072      	str	r2, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9cc:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     9ce:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
     9d0:	2b00      	cmp	r3, #0
     9d2:	d1fb      	bne.n	9cc <_usart_set_config+0x19c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     9d4:	6037      	str	r7, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
     9d6:	b007      	add	sp, #28
     9d8:	bc3c      	pop	{r2, r3, r4, r5}
     9da:	4690      	mov	r8, r2
     9dc:	4699      	mov	r9, r3
     9de:	46a2      	mov	sl, r4
     9e0:	46ab      	mov	fp, r5
     9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
     9e4:	7eeb      	ldrb	r3, [r5, #27]
     9e6:	2b00      	cmp	r3, #0
     9e8:	d0e1      	beq.n	9ae <_usart_set_config+0x17e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     9ea:	2380      	movs	r3, #128	; 0x80
     9ec:	04db      	lsls	r3, r3, #19
     9ee:	431f      	orrs	r7, r3
     9f0:	e7dd      	b.n	9ae <_usart_set_config+0x17e>
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	000007fd 	.word	0x000007fd
     9f8:	00001891 	.word	0x00001891
     9fc:	00000573 	.word	0x00000573
     a00:	0000059d 	.word	0x0000059d
     a04:	41002000 	.word	0x41002000

00000a08 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a08:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0a:	b089      	sub	sp, #36	; 0x24
     a0c:	0006      	movs	r6, r0
     a0e:	000c      	movs	r4, r1
     a10:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a12:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a14:	0008      	movs	r0, r1
     a16:	4b42      	ldr	r3, [pc, #264]	; (b20 <usart_init+0x118>)
     a18:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a1a:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a1c:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a1e:	6823      	ldr	r3, [r4, #0]
     a20:	07db      	lsls	r3, r3, #31
     a22:	d503      	bpl.n	a2c <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     a24:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     a26:	0028      	movs	r0, r5
     a28:	b009      	add	sp, #36	; 0x24
     a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a2c:	6823      	ldr	r3, [r4, #0]
     a2e:	079b      	lsls	r3, r3, #30
     a30:	d501      	bpl.n	a36 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
     a32:	251c      	movs	r5, #28
     a34:	e7f7      	b.n	a26 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a36:	2301      	movs	r3, #1
     a38:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a3a:	4a3a      	ldr	r2, [pc, #232]	; (b24 <usart_init+0x11c>)
     a3c:	6a11      	ldr	r1, [r2, #32]
     a3e:	430b      	orrs	r3, r1
     a40:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     a42:	252d      	movs	r5, #45	; 0x2d
     a44:	5d7b      	ldrb	r3, [r7, r5]
     a46:	a907      	add	r1, sp, #28
     a48:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a4a:	b2c3      	uxtb	r3, r0
     a4c:	9301      	str	r3, [sp, #4]
     a4e:	0018      	movs	r0, r3
     a50:	4b35      	ldr	r3, [pc, #212]	; (b28 <usart_init+0x120>)
     a52:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a54:	9801      	ldr	r0, [sp, #4]
     a56:	4b35      	ldr	r3, [pc, #212]	; (b2c <usart_init+0x124>)
     a58:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     a5a:	5d78      	ldrb	r0, [r7, r5]
     a5c:	2100      	movs	r1, #0
     a5e:	4b34      	ldr	r3, [pc, #208]	; (b30 <usart_init+0x128>)
     a60:	4798      	blx	r3
	module->character_size = config->character_size;
     a62:	7afb      	ldrb	r3, [r7, #11]
     a64:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
     a66:	2324      	movs	r3, #36	; 0x24
     a68:	5cfb      	ldrb	r3, [r7, r3]
     a6a:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     a6c:	2325      	movs	r3, #37	; 0x25
     a6e:	5cfb      	ldrb	r3, [r7, r3]
     a70:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     a72:	7efb      	ldrb	r3, [r7, #27]
     a74:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     a76:	7f3b      	ldrb	r3, [r7, #28]
     a78:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
     a7a:	0039      	movs	r1, r7
     a7c:	0030      	movs	r0, r6
     a7e:	4b2d      	ldr	r3, [pc, #180]	; (b34 <usart_init+0x12c>)
     a80:	4798      	blx	r3
     a82:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
     a84:	d1cf      	bne.n	a26 <usart_init+0x1e>
     a86:	ab06      	add	r3, sp, #24
     a88:	2280      	movs	r2, #128	; 0x80
     a8a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a8c:	2200      	movs	r2, #0
     a8e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     a90:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a92:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a96:	9302      	str	r3, [sp, #8]
     a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a9a:	9303      	str	r3, [sp, #12]
     a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a9e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
     aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     aa2:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
     aa4:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
     aa6:	2700      	movs	r7, #0
     aa8:	e006      	b.n	ab8 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     aaa:	0039      	movs	r1, r7
     aac:	0020      	movs	r0, r4
     aae:	4b22      	ldr	r3, [pc, #136]	; (b38 <usart_init+0x130>)
     ab0:	4798      	blx	r3
     ab2:	e008      	b.n	ac6 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
     ab4:	3701      	adds	r7, #1
     ab6:	b2ff      	uxtb	r7, r7
     ab8:	2f03      	cmp	r7, #3
     aba:	d80d      	bhi.n	ad8 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     abc:	00bb      	lsls	r3, r7, #2
     abe:	aa02      	add	r2, sp, #8
     ac0:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     ac2:	2800      	cmp	r0, #0
     ac4:	d0f1      	beq.n	aaa <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
     ac6:	1c43      	adds	r3, r0, #1
     ac8:	d0f4      	beq.n	ab4 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     aca:	a906      	add	r1, sp, #24
     acc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ace:	0c00      	lsrs	r0, r0, #16
     ad0:	b2c0      	uxtb	r0, r0
     ad2:	4b1a      	ldr	r3, [pc, #104]	; (b3c <usart_init+0x134>)
     ad4:	4798      	blx	r3
     ad6:	e7ed      	b.n	ab4 <usart_init+0xac>
     ad8:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     ada:	2a05      	cmp	r2, #5
     adc:	d806      	bhi.n	aec <usart_init+0xe4>
		module->callback[i]            = NULL;
     ade:	1c93      	adds	r3, r2, #2
     ae0:	009b      	lsls	r3, r3, #2
     ae2:	18f3      	adds	r3, r6, r3
     ae4:	2100      	movs	r1, #0
     ae6:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     ae8:	3201      	adds	r2, #1
     aea:	e7f6      	b.n	ada <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
     aec:	2200      	movs	r2, #0
     aee:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     af0:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     af2:	2300      	movs	r3, #0
     af4:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     af6:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     af8:	3230      	adds	r2, #48	; 0x30
     afa:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
     afc:	3201      	adds	r2, #1
     afe:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
     b00:	3201      	adds	r2, #1
     b02:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
     b04:	3201      	adds	r2, #1
     b06:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     b08:	6830      	ldr	r0, [r6, #0]
     b0a:	4b05      	ldr	r3, [pc, #20]	; (b20 <usart_init+0x118>)
     b0c:	4798      	blx	r3
     b0e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     b10:	490b      	ldr	r1, [pc, #44]	; (b40 <usart_init+0x138>)
     b12:	4b0c      	ldr	r3, [pc, #48]	; (b44 <usart_init+0x13c>)
     b14:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b16:	00a4      	lsls	r4, r4, #2
     b18:	4b0b      	ldr	r3, [pc, #44]	; (b48 <usart_init+0x140>)
     b1a:	50e6      	str	r6, [r4, r3]
	return status_code;
     b1c:	e783      	b.n	a26 <usart_init+0x1e>
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	000007fd 	.word	0x000007fd
     b24:	40000400 	.word	0x40000400
     b28:	00001875 	.word	0x00001875
     b2c:	000017ed 	.word	0x000017ed
     b30:	00000639 	.word	0x00000639
     b34:	00000831 	.word	0x00000831
     b38:	00000685 	.word	0x00000685
     b3c:	00001959 	.word	0x00001959
     b40:	00000c79 	.word	0x00000c79
     b44:	0000129d 	.word	0x0000129d
     b48:	20000108 	.word	0x20000108

00000b4c <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b4c:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b4e:	79c2      	ldrb	r2, [r0, #7]
     b50:	2a00      	cmp	r2, #0
     b52:	d101      	bne.n	b58 <usart_write_wait+0xc>
		return STATUS_ERR_DENIED;
     b54:	201c      	movs	r0, #28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     b56:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     b58:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     b5a:	b292      	uxth	r2, r2
     b5c:	2a00      	cmp	r2, #0
     b5e:	d001      	beq.n	b64 <usart_write_wait+0x18>
		return STATUS_BUSY;
     b60:	2005      	movs	r0, #5
     b62:	e7f8      	b.n	b56 <usart_write_wait+0xa>
	return (usart_hw->SYNCBUSY.reg);
     b64:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     b66:	2a00      	cmp	r2, #0
     b68:	d1fc      	bne.n	b64 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     b6a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b6c:	7e1a      	ldrb	r2, [r3, #24]
     b6e:	0792      	lsls	r2, r2, #30
     b70:	d5fc      	bpl.n	b6c <usart_write_wait+0x20>
	return STATUS_OK;
     b72:	2000      	movs	r0, #0
     b74:	e7ef      	b.n	b56 <usart_write_wait+0xa>

00000b76 <usart_read_wait>:

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b76:	6802      	ldr	r2, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b78:	7983      	ldrb	r3, [r0, #6]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d101      	bne.n	b82 <usart_read_wait+0xc>
		return STATUS_ERR_DENIED;
     b7e:	201c      	movs	r0, #28

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     b80:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     b82:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
     b84:	b29b      	uxth	r3, r3
     b86:	2b00      	cmp	r3, #0
     b88:	d001      	beq.n	b8e <usart_read_wait+0x18>
		return STATUS_BUSY;
     b8a:	2005      	movs	r0, #5
     b8c:	e7f8      	b.n	b80 <usart_read_wait+0xa>
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     b8e:	7e13      	ldrb	r3, [r2, #24]
     b90:	075b      	lsls	r3, r3, #29
     b92:	d401      	bmi.n	b98 <usart_read_wait+0x22>
		return STATUS_BUSY;
     b94:	2005      	movs	r0, #5
     b96:	e7f3      	b.n	b80 <usart_read_wait+0xa>
	return (usart_hw->SYNCBUSY.reg);
     b98:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     b9a:	2b00      	cmp	r3, #0
     b9c:	d1fc      	bne.n	b98 <usart_read_wait+0x22>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b9e:	8b53      	ldrh	r3, [r2, #26]
     ba0:	b2db      	uxtb	r3, r3
	if (error_code) {
     ba2:	0698      	lsls	r0, r3, #26
     ba4:	d01d      	beq.n	be2 <usart_read_wait+0x6c>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     ba6:	0798      	lsls	r0, r3, #30
     ba8:	d503      	bpl.n	bb2 <usart_read_wait+0x3c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     baa:	2302      	movs	r3, #2
     bac:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     bae:	201a      	movs	r0, #26
     bb0:	e7e6      	b.n	b80 <usart_read_wait+0xa>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     bb2:	0758      	lsls	r0, r3, #29
     bb4:	d503      	bpl.n	bbe <usart_read_wait+0x48>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     bb6:	2304      	movs	r3, #4
     bb8:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     bba:	201e      	movs	r0, #30
     bbc:	e7e0      	b.n	b80 <usart_read_wait+0xa>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     bbe:	07d8      	lsls	r0, r3, #31
     bc0:	d503      	bpl.n	bca <usart_read_wait+0x54>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     bc2:	2301      	movs	r3, #1
     bc4:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     bc6:	2013      	movs	r0, #19
     bc8:	e7da      	b.n	b80 <usart_read_wait+0xa>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     bca:	06d8      	lsls	r0, r3, #27
     bcc:	d503      	bpl.n	bd6 <usart_read_wait+0x60>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     bce:	2310      	movs	r3, #16
     bd0:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     bd2:	2042      	movs	r0, #66	; 0x42
     bd4:	e7d4      	b.n	b80 <usart_read_wait+0xa>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     bd6:	069b      	lsls	r3, r3, #26
     bd8:	d503      	bpl.n	be2 <usart_read_wait+0x6c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     bda:	2320      	movs	r3, #32
     bdc:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     bde:	2041      	movs	r0, #65	; 0x41
     be0:	e7ce      	b.n	b80 <usart_read_wait+0xa>
	*rx_data = usart_hw->DATA.reg;
     be2:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     be4:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     be6:	2000      	movs	r0, #0
     be8:	e7ca      	b.n	b80 <usart_read_wait+0xa>
	...

00000bec <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     bec:	b5f0      	push	{r4, r5, r6, r7, lr}
     bee:	b085      	sub	sp, #20
     bf0:	0004      	movs	r4, r0
     bf2:	9101      	str	r1, [sp, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     bf4:	2a00      	cmp	r2, #0
     bf6:	d102      	bne.n	bfe <usart_read_buffer_wait+0x12>
		return STATUS_ERR_INVALID_ARG;
     bf8:	2017      	movs	r0, #23
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     bfa:	b005      	add	sp, #20
     bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
     bfe:	7983      	ldrb	r3, [r0, #6]
     c00:	2b00      	cmp	r3, #0
     c02:	d101      	bne.n	c08 <usart_read_buffer_wait+0x1c>
		return STATUS_ERR_DENIED;
     c04:	201c      	movs	r0, #28
     c06:	e7f8      	b.n	bfa <usart_read_buffer_wait+0xe>
	SercomUsart *const usart_hw = &(module->hw->USART);
     c08:	6806      	ldr	r6, [r0, #0]
	uint16_t rx_pos = 0;
     c0a:	2500      	movs	r5, #0
	while (length--) {
     c0c:	e014      	b.n	c38 <usart_read_buffer_wait+0x4c>
		uint16_t received_data = 0;
     c0e:	ab02      	add	r3, sp, #8
     c10:	1d99      	adds	r1, r3, #6
     c12:	2300      	movs	r3, #0
     c14:	800b      	strh	r3, [r1, #0]
		retval = usart_read_wait(module, &received_data);
     c16:	0020      	movs	r0, r4
     c18:	4b15      	ldr	r3, [pc, #84]	; (c70 <usart_read_buffer_wait+0x84>)
     c1a:	4798      	blx	r3
		if (retval != STATUS_OK) {
     c1c:	2800      	cmp	r0, #0
     c1e:	d1ec      	bne.n	bfa <usart_read_buffer_wait+0xe>
		rx_data[rx_pos++] = received_data;
     c20:	1c6b      	adds	r3, r5, #1
     c22:	b29b      	uxth	r3, r3
     c24:	aa02      	add	r2, sp, #8
     c26:	3206      	adds	r2, #6
     c28:	8812      	ldrh	r2, [r2, #0]
     c2a:	9901      	ldr	r1, [sp, #4]
     c2c:	554a      	strb	r2, [r1, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c2e:	7962      	ldrb	r2, [r4, #5]
     c30:	2a01      	cmp	r2, #1
     c32:	d011      	beq.n	c58 <usart_read_buffer_wait+0x6c>
     c34:	001d      	movs	r5, r3
	while (length--) {
     c36:	003a      	movs	r2, r7
     c38:	1e57      	subs	r7, r2, #1
     c3a:	b2bf      	uxth	r7, r7
     c3c:	2a00      	cmp	r2, #0
     c3e:	d015      	beq.n	c6c <usart_read_buffer_wait+0x80>
     c40:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c42:	4a0c      	ldr	r2, [pc, #48]	; (c74 <usart_read_buffer_wait+0x88>)
     c44:	4293      	cmp	r3, r2
     c46:	d8e2      	bhi.n	c0e <usart_read_buffer_wait+0x22>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     c48:	7e32      	ldrb	r2, [r6, #24]
     c4a:	0752      	lsls	r2, r2, #29
     c4c:	d4df      	bmi.n	c0e <usart_read_buffer_wait+0x22>
			} else if (i == USART_TIMEOUT) {
     c4e:	4a09      	ldr	r2, [pc, #36]	; (c74 <usart_read_buffer_wait+0x88>)
     c50:	4293      	cmp	r3, r2
     c52:	d009      	beq.n	c68 <usart_read_buffer_wait+0x7c>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c54:	3301      	adds	r3, #1
     c56:	e7f4      	b.n	c42 <usart_read_buffer_wait+0x56>
			rx_data[rx_pos++] = (received_data >> 8);
     c58:	3502      	adds	r5, #2
     c5a:	aa02      	add	r2, sp, #8
     c5c:	3206      	adds	r2, #6
     c5e:	8812      	ldrh	r2, [r2, #0]
     c60:	0a12      	lsrs	r2, r2, #8
     c62:	54ca      	strb	r2, [r1, r3]
     c64:	b2ab      	uxth	r3, r5
     c66:	e7e5      	b.n	c34 <usart_read_buffer_wait+0x48>
				return STATUS_ERR_TIMEOUT;
     c68:	2012      	movs	r0, #18
     c6a:	e7c6      	b.n	bfa <usart_read_buffer_wait+0xe>
	return STATUS_OK;
     c6c:	2000      	movs	r0, #0
     c6e:	e7c4      	b.n	bfa <usart_read_buffer_wait+0xe>
     c70:	00000b77 	.word	0x00000b77
     c74:	0000ffff 	.word	0x0000ffff

00000c78 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c78:	b5f0      	push	{r4, r5, r6, r7, lr}
     c7a:	46c6      	mov	lr, r8
     c7c:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c7e:	0080      	lsls	r0, r0, #2
     c80:	4b64      	ldr	r3, [pc, #400]	; (e14 <_usart_interrupt_handler+0x19c>)
     c82:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c84:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c86:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     c88:	2b00      	cmp	r3, #0
     c8a:	d1fc      	bne.n	c86 <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c8c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     c8e:	7da6      	ldrb	r6, [r4, #22]
     c90:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     c92:	2330      	movs	r3, #48	; 0x30
     c94:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
     c96:	2231      	movs	r2, #49	; 0x31
     c98:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
     c9a:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c9c:	07f3      	lsls	r3, r6, #31
     c9e:	d525      	bpl.n	cec <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
     ca0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     ca2:	b29b      	uxth	r3, r3
     ca4:	2b00      	cmp	r3, #0
     ca6:	d01f      	beq.n	ce8 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ca8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     caa:	780a      	ldrb	r2, [r1, #0]
     cac:	b2d2      	uxtb	r2, r2
     cae:	b293      	uxth	r3, r2
     cb0:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     cb2:	1c48      	adds	r0, r1, #1
     cb4:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cb6:	796b      	ldrb	r3, [r5, #5]
     cb8:	2b01      	cmp	r3, #1
     cba:	d00e      	beq.n	cda <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     cbc:	4643      	mov	r3, r8
     cbe:	05db      	lsls	r3, r3, #23
     cc0:	0ddb      	lsrs	r3, r3, #23
     cc2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     cc4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     cc6:	3b01      	subs	r3, #1
     cc8:	b29b      	uxth	r3, r3
     cca:	85eb      	strh	r3, [r5, #46]	; 0x2e
     ccc:	2b00      	cmp	r3, #0
     cce:	d10d      	bne.n	cec <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     cd0:	3301      	adds	r3, #1
     cd2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     cd4:	3301      	adds	r3, #1
     cd6:	75a3      	strb	r3, [r4, #22]
     cd8:	e008      	b.n	cec <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     cda:	784b      	ldrb	r3, [r1, #1]
     cdc:	021b      	lsls	r3, r3, #8
     cde:	4313      	orrs	r3, r2
     ce0:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
     ce2:	1c88      	adds	r0, r1, #2
     ce4:	62a8      	str	r0, [r5, #40]	; 0x28
     ce6:	e7e9      	b.n	cbc <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ce8:	2301      	movs	r3, #1
     cea:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     cec:	07b3      	lsls	r3, r6, #30
     cee:	d506      	bpl.n	cfe <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     cf0:	2302      	movs	r3, #2
     cf2:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     cf4:	2200      	movs	r2, #0
     cf6:	3331      	adds	r3, #49	; 0x31
     cf8:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     cfa:	07fb      	lsls	r3, r7, #31
     cfc:	d41c      	bmi.n	d38 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     cfe:	0773      	lsls	r3, r6, #29
     d00:	d564      	bpl.n	dcc <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
     d02:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d04:	b29b      	uxth	r3, r3
     d06:	2b00      	cmp	r3, #0
     d08:	d05e      	beq.n	dc8 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d0a:	8b62      	ldrh	r2, [r4, #26]
     d0c:	b2d2      	uxtb	r2, r2
     d0e:	233f      	movs	r3, #63	; 0x3f
     d10:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     d12:	0711      	lsls	r1, r2, #28
     d14:	d501      	bpl.n	d1a <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     d16:	2337      	movs	r3, #55	; 0x37
     d18:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     d1a:	2b00      	cmp	r3, #0
     d1c:	d031      	beq.n	d82 <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d1e:	079a      	lsls	r2, r3, #30
     d20:	d50e      	bpl.n	d40 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d22:	221a      	movs	r2, #26
     d24:	2332      	movs	r3, #50	; 0x32
     d26:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d28:	3b30      	subs	r3, #48	; 0x30
     d2a:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     d2c:	077b      	lsls	r3, r7, #29
     d2e:	d54d      	bpl.n	dcc <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     d30:	0028      	movs	r0, r5
     d32:	696b      	ldr	r3, [r5, #20]
     d34:	4798      	blx	r3
     d36:	e049      	b.n	dcc <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     d38:	0028      	movs	r0, r5
     d3a:	68eb      	ldr	r3, [r5, #12]
     d3c:	4798      	blx	r3
     d3e:	e7de      	b.n	cfe <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d40:	075a      	lsls	r2, r3, #29
     d42:	d505      	bpl.n	d50 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     d44:	221e      	movs	r2, #30
     d46:	2332      	movs	r3, #50	; 0x32
     d48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d4a:	3b2e      	subs	r3, #46	; 0x2e
     d4c:	8363      	strh	r3, [r4, #26]
     d4e:	e7ed      	b.n	d2c <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d50:	07da      	lsls	r2, r3, #31
     d52:	d505      	bpl.n	d60 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     d54:	2213      	movs	r2, #19
     d56:	2332      	movs	r3, #50	; 0x32
     d58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d5a:	3b31      	subs	r3, #49	; 0x31
     d5c:	8363      	strh	r3, [r4, #26]
     d5e:	e7e5      	b.n	d2c <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     d60:	06da      	lsls	r2, r3, #27
     d62:	d505      	bpl.n	d70 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     d64:	2242      	movs	r2, #66	; 0x42
     d66:	2332      	movs	r3, #50	; 0x32
     d68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     d6a:	3b22      	subs	r3, #34	; 0x22
     d6c:	8363      	strh	r3, [r4, #26]
     d6e:	e7dd      	b.n	d2c <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     d70:	2220      	movs	r2, #32
     d72:	421a      	tst	r2, r3
     d74:	d0da      	beq.n	d2c <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     d76:	3221      	adds	r2, #33	; 0x21
     d78:	2332      	movs	r3, #50	; 0x32
     d7a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     d7c:	3b12      	subs	r3, #18
     d7e:	8363      	strh	r3, [r4, #26]
     d80:	e7d4      	b.n	d2c <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d84:	05db      	lsls	r3, r3, #23
     d86:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d88:	b2da      	uxtb	r2, r3
     d8a:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d8c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     d8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     d90:	1c51      	adds	r1, r2, #1
     d92:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d94:	7969      	ldrb	r1, [r5, #5]
     d96:	2901      	cmp	r1, #1
     d98:	d010      	beq.n	dbc <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     d9a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d9c:	3b01      	subs	r3, #1
     d9e:	b29b      	uxth	r3, r3
     da0:	85ab      	strh	r3, [r5, #44]	; 0x2c
     da2:	2b00      	cmp	r3, #0
     da4:	d112      	bne.n	dcc <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     da6:	3304      	adds	r3, #4
     da8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     daa:	2200      	movs	r2, #0
     dac:	332e      	adds	r3, #46	; 0x2e
     dae:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     db0:	07bb      	lsls	r3, r7, #30
     db2:	d50b      	bpl.n	dcc <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     db4:	0028      	movs	r0, r5
     db6:	692b      	ldr	r3, [r5, #16]
     db8:	4798      	blx	r3
     dba:	e007      	b.n	dcc <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     dbc:	0a1b      	lsrs	r3, r3, #8
     dbe:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     dc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     dc2:	3301      	adds	r3, #1
     dc4:	626b      	str	r3, [r5, #36]	; 0x24
     dc6:	e7e8      	b.n	d9a <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     dc8:	2304      	movs	r3, #4
     dca:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     dcc:	06f3      	lsls	r3, r6, #27
     dce:	d504      	bpl.n	dda <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     dd0:	2310      	movs	r3, #16
     dd2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     dd4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     dd6:	06fb      	lsls	r3, r7, #27
     dd8:	d410      	bmi.n	dfc <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     dda:	06b3      	lsls	r3, r6, #26
     ddc:	d504      	bpl.n	de8 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     dde:	2320      	movs	r3, #32
     de0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     de2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     de4:	073b      	lsls	r3, r7, #28
     de6:	d40d      	bmi.n	e04 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     de8:	0733      	lsls	r3, r6, #28
     dea:	d504      	bpl.n	df6 <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     dec:	2308      	movs	r3, #8
     dee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     df0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     df2:	06bb      	lsls	r3, r7, #26
     df4:	d40a      	bmi.n	e0c <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     df6:	bc04      	pop	{r2}
     df8:	4690      	mov	r8, r2
     dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     dfc:	0028      	movs	r0, r5
     dfe:	69eb      	ldr	r3, [r5, #28]
     e00:	4798      	blx	r3
     e02:	e7ea      	b.n	dda <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     e04:	0028      	movs	r0, r5
     e06:	69ab      	ldr	r3, [r5, #24]
     e08:	4798      	blx	r3
     e0a:	e7ed      	b.n	de8 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     e0c:	6a2b      	ldr	r3, [r5, #32]
     e0e:	0028      	movs	r0, r5
     e10:	4798      	blx	r3
}
     e12:	e7f0      	b.n	df6 <_usart_interrupt_handler+0x17e>
     e14:	20000108 	.word	0x20000108

00000e18 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e18:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e1a:	2202      	movs	r2, #2
     e1c:	761a      	strb	r2, [r3, #24]
}
     e1e:	4770      	bx	lr

00000e20 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e22:	0004      	movs	r4, r0
     e24:	000e      	movs	r6, r1
     e26:	0017      	movs	r7, r2
     e28:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e2a:	2338      	movs	r3, #56	; 0x38
     e2c:	5cc3      	ldrb	r3, [r0, r3]
     e2e:	2b05      	cmp	r3, #5
     e30:	d06d      	beq.n	f0e <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     e32:	2a00      	cmp	r2, #0
     e34:	d101      	bne.n	e3a <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     e36:	2217      	movs	r2, #23
     e38:	e06a      	b.n	f10 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     e3a:	79c3      	ldrb	r3, [r0, #7]
     e3c:	2b00      	cmp	r3, #0
     e3e:	d101      	bne.n	e44 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     e40:	221c      	movs	r2, #28
     e42:	e065      	b.n	f10 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     e44:	7943      	ldrb	r3, [r0, #5]
     e46:	2b00      	cmp	r3, #0
     e48:	d103      	bne.n	e52 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e4a:	6803      	ldr	r3, [r0, #0]
     e4c:	7e1b      	ldrb	r3, [r3, #24]
     e4e:	079b      	lsls	r3, r3, #30
     e50:	d401      	bmi.n	e56 <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     e52:	2000      	movs	r0, #0
     e54:	e037      	b.n	ec6 <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     e56:	4b2f      	ldr	r3, [pc, #188]	; (f14 <spi_read_buffer_wait+0xf4>)
     e58:	4798      	blx	r3
     e5a:	e7fa      	b.n	e52 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e5c:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e5e:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     e60:	07d2      	lsls	r2, r2, #31
     e62:	d5fb      	bpl.n	e5c <spi_read_buffer_wait+0x3c>
     e64:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     e66:	07d2      	lsls	r2, r2, #31
     e68:	d534      	bpl.n	ed4 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e6a:	05ea      	lsls	r2, r5, #23
     e6c:	0dd2      	lsrs	r2, r2, #23
     e6e:	629a      	str	r2, [r3, #40]	; 0x28
     e70:	e030      	b.n	ed4 <spi_read_buffer_wait+0xb4>
     e72:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e74:	4a28      	ldr	r2, [pc, #160]	; (f18 <spi_read_buffer_wait+0xf8>)
     e76:	4293      	cmp	r3, r2
     e78:	d805      	bhi.n	e86 <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e7a:	6822      	ldr	r2, [r4, #0]
     e7c:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     e7e:	0752      	lsls	r2, r2, #29
     e80:	d401      	bmi.n	e86 <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e82:	3301      	adds	r3, #1
     e84:	e7f6      	b.n	e74 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e86:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e88:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     e8a:	0792      	lsls	r2, r2, #30
     e8c:	d404      	bmi.n	e98 <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e8e:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     e90:	075b      	lsls	r3, r3, #29
     e92:	d422      	bmi.n	eda <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     e94:	2212      	movs	r2, #18
     e96:	e03b      	b.n	f10 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     e98:	0020      	movs	r0, r4
     e9a:	4b1e      	ldr	r3, [pc, #120]	; (f14 <spi_read_buffer_wait+0xf4>)
     e9c:	4798      	blx	r3
				return STATUS_ABORTED;
     e9e:	2204      	movs	r2, #4
     ea0:	e036      	b.n	f10 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     ea2:	2200      	movs	r2, #0
     ea4:	e026      	b.n	ef4 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     ea6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     ea8:	05ff      	lsls	r7, r7, #23
     eaa:	0dff      	lsrs	r7, r7, #23
     eac:	e001      	b.n	eb2 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     eae:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     eb0:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     eb2:	2a00      	cmp	r2, #0
     eb4:	d12c      	bne.n	f10 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     eb6:	1c43      	adds	r3, r0, #1
     eb8:	b29b      	uxth	r3, r3
     eba:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ebc:	79a2      	ldrb	r2, [r4, #6]
     ebe:	2a01      	cmp	r2, #1
     ec0:	d01e      	beq.n	f00 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     ec2:	0018      	movs	r0, r3
     ec4:	000f      	movs	r7, r1
	while (length--) {
     ec6:	1e79      	subs	r1, r7, #1
     ec8:	b289      	uxth	r1, r1
     eca:	2f00      	cmp	r7, #0
     ecc:	d01d      	beq.n	f0a <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     ece:	7963      	ldrb	r3, [r4, #5]
     ed0:	2b01      	cmp	r3, #1
     ed2:	d0c3      	beq.n	e5c <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     ed4:	7963      	ldrb	r3, [r4, #5]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d0cb      	beq.n	e72 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     eda:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     edc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     ede:	0752      	lsls	r2, r2, #29
     ee0:	d5fb      	bpl.n	eda <spi_read_buffer_wait+0xba>
     ee2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     ee4:	0752      	lsls	r2, r2, #29
     ee6:	d5e2      	bpl.n	eae <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     ee8:	8b5a      	ldrh	r2, [r3, #26]
     eea:	0752      	lsls	r2, r2, #29
     eec:	d5d9      	bpl.n	ea2 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     eee:	2204      	movs	r2, #4
     ef0:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     ef2:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ef4:	79a7      	ldrb	r7, [r4, #6]
     ef6:	2f01      	cmp	r7, #1
     ef8:	d0d5      	beq.n	ea6 <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     efa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     efc:	b2ff      	uxtb	r7, r7
     efe:	e7d8      	b.n	eb2 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     f00:	3002      	adds	r0, #2
     f02:	0a3f      	lsrs	r7, r7, #8
     f04:	54f7      	strb	r7, [r6, r3]
     f06:	b283      	uxth	r3, r0
     f08:	e7db      	b.n	ec2 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     f0a:	2200      	movs	r2, #0
     f0c:	e000      	b.n	f10 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     f0e:	2205      	movs	r2, #5
}
     f10:	0010      	movs	r0, r2
     f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f14:	00000e19 	.word	0x00000e19
     f18:	00002710 	.word	0x00002710

00000f1c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     f1c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     f1e:	7943      	ldrb	r3, [r0, #5]
     f20:	2b01      	cmp	r3, #1
     f22:	d001      	beq.n	f28 <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     f24:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     f26:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     f28:	7a03      	ldrb	r3, [r0, #8]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d16c      	bne.n	1008 <spi_select_slave+0xec>
		if (select) {
     f2e:	2a00      	cmp	r2, #0
     f30:	d058      	beq.n	fe4 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     f32:	784b      	ldrb	r3, [r1, #1]
     f34:	2b00      	cmp	r3, #0
     f36:	d043      	beq.n	fc0 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f38:	6803      	ldr	r3, [r0, #0]
     f3a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     f3c:	07db      	lsls	r3, r3, #31
     f3e:	d411      	bmi.n	f64 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     f40:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     f42:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     f44:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f46:	2900      	cmp	r1, #0
     f48:	d10a      	bne.n	f60 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     f4a:	01db      	lsls	r3, r3, #7
     f4c:	4931      	ldr	r1, [pc, #196]	; (1014 <spi_select_slave+0xf8>)
     f4e:	468c      	mov	ip, r1
     f50:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f52:	211f      	movs	r1, #31
     f54:	4011      	ands	r1, r2
     f56:	2201      	movs	r2, #1
     f58:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     f5a:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     f5c:	2005      	movs	r0, #5
     f5e:	e7e2      	b.n	f26 <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
     f60:	2300      	movs	r3, #0
     f62:	e7f6      	b.n	f52 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     f64:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     f66:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     f68:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     f6a:	2c00      	cmp	r4, #0
     f6c:	d104      	bne.n	f78 <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     f6e:	01db      	lsls	r3, r3, #7
     f70:	4c28      	ldr	r4, [pc, #160]	; (1014 <spi_select_slave+0xf8>)
     f72:	46a4      	mov	ip, r4
     f74:	4463      	add	r3, ip
     f76:	e000      	b.n	f7a <spi_select_slave+0x5e>
		return NULL;
     f78:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f7a:	241f      	movs	r4, #31
     f7c:	4014      	ands	r4, r2
     f7e:	2201      	movs	r2, #1
     f80:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
     f82:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     f84:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     f86:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f88:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     f8a:	07c9      	lsls	r1, r1, #31
     f8c:	d500      	bpl.n	f90 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f8e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     f90:	79c3      	ldrb	r3, [r0, #7]
     f92:	2b00      	cmp	r3, #0
     f94:	d13a      	bne.n	100c <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f96:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f98:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     f9a:	0752      	lsls	r2, r2, #29
     f9c:	d5fb      	bpl.n	f96 <spi_select_slave+0x7a>
     f9e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     fa0:	0752      	lsls	r2, r2, #29
     fa2:	d535      	bpl.n	1010 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fa4:	8b5a      	ldrh	r2, [r3, #26]
     fa6:	0752      	lsls	r2, r2, #29
     fa8:	d501      	bpl.n	fae <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     faa:	2204      	movs	r2, #4
     fac:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fae:	7982      	ldrb	r2, [r0, #6]
     fb0:	2a01      	cmp	r2, #1
     fb2:	d002      	beq.n	fba <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     fb6:	2000      	movs	r0, #0
     fb8:	e7b5      	b.n	f26 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fbc:	2000      	movs	r0, #0
     fbe:	e7b2      	b.n	f26 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     fc0:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     fc2:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     fc4:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     fc6:	2900      	cmp	r1, #0
     fc8:	d10a      	bne.n	fe0 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     fca:	01db      	lsls	r3, r3, #7
     fcc:	4911      	ldr	r1, [pc, #68]	; (1014 <spi_select_slave+0xf8>)
     fce:	468c      	mov	ip, r1
     fd0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     fd2:	211f      	movs	r1, #31
     fd4:	4011      	ands	r1, r2
     fd6:	2201      	movs	r2, #1
     fd8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     fda:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     fdc:	2000      	movs	r0, #0
     fde:	e7a2      	b.n	f26 <spi_select_slave+0xa>
		return NULL;
     fe0:	2300      	movs	r3, #0
     fe2:	e7f6      	b.n	fd2 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     fe4:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     fe6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     fe8:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     fea:	2900      	cmp	r1, #0
     fec:	d10a      	bne.n	1004 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     fee:	01db      	lsls	r3, r3, #7
     ff0:	4908      	ldr	r1, [pc, #32]	; (1014 <spi_select_slave+0xf8>)
     ff2:	468c      	mov	ip, r1
     ff4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ff6:	211f      	movs	r1, #31
     ff8:	4011      	ands	r1, r2
     ffa:	2201      	movs	r2, #1
     ffc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     ffe:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1000:	2000      	movs	r0, #0
    1002:	e790      	b.n	f26 <spi_select_slave+0xa>
		return NULL;
    1004:	2300      	movs	r3, #0
    1006:	e7f6      	b.n	ff6 <spi_select_slave+0xda>
    1008:	2000      	movs	r0, #0
    100a:	e78c      	b.n	f26 <spi_select_slave+0xa>
    100c:	2000      	movs	r0, #0
    100e:	e78a      	b.n	f26 <spi_select_slave+0xa>
    1010:	2000      	movs	r0, #0
    1012:	e788      	b.n	f26 <spi_select_slave+0xa>
    1014:	41004400 	.word	0x41004400

00001018 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1018:	b5f0      	push	{r4, r5, r6, r7, lr}
    101a:	46de      	mov	lr, fp
    101c:	4657      	mov	r7, sl
    101e:	464e      	mov	r6, r9
    1020:	4645      	mov	r5, r8
    1022:	b5e0      	push	{r5, r6, r7, lr}
    1024:	b085      	sub	sp, #20
    1026:	0004      	movs	r4, r0
    1028:	9100      	str	r1, [sp, #0]
    102a:	9202      	str	r2, [sp, #8]
    102c:	4698      	mov	r8, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    102e:	2338      	movs	r3, #56	; 0x38
    1030:	5cc3      	ldrb	r3, [r0, r3]
    1032:	2b05      	cmp	r3, #5
    1034:	d100      	bne.n	1038 <spi_transceive_buffer_wait+0x20>
    1036:	e11f      	b.n	1278 <spi_transceive_buffer_wait+0x260>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1038:	4643      	mov	r3, r8
    103a:	2b00      	cmp	r3, #0
    103c:	d101      	bne.n	1042 <spi_transceive_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    103e:	2117      	movs	r1, #23
    1040:	e11b      	b.n	127a <spi_transceive_buffer_wait+0x262>
	}

	if (!(module->receiver_enabled)) {
    1042:	79c3      	ldrb	r3, [r0, #7]
    1044:	2b00      	cmp	r3, #0
    1046:	d101      	bne.n	104c <spi_transceive_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    1048:	211c      	movs	r1, #28
    104a:	e116      	b.n	127a <spi_transceive_buffer_wait+0x262>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    104c:	7943      	ldrb	r3, [r0, #5]
    104e:	2b00      	cmp	r3, #0
    1050:	d103      	bne.n	105a <spi_transceive_buffer_wait+0x42>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1052:	6803      	ldr	r3, [r0, #0]
    1054:	7e1b      	ldrb	r3, [r3, #24]
    1056:	079b      	lsls	r3, r3, #30
    1058:	d404      	bmi.n	1064 <spi_transceive_buffer_wait+0x4c>
		rx_data[rx_pos++] = received_data;
		*rx_data = received_data;
		
		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    105a:	46c4      	mov	ip, r8
    105c:	2300      	movs	r3, #0
    105e:	9303      	str	r3, [sp, #12]
    1060:	2100      	movs	r1, #0
    1062:	e07c      	b.n	115e <spi_transceive_buffer_wait+0x146>
		_spi_clear_tx_complete_flag(module);
    1064:	4b8a      	ldr	r3, [pc, #552]	; (1290 <spi_transceive_buffer_wait+0x278>)
    1066:	4798      	blx	r3
    1068:	e7f7      	b.n	105a <spi_transceive_buffer_wait+0x42>
    106a:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    106c:	4a89      	ldr	r2, [pc, #548]	; (1294 <spi_transceive_buffer_wait+0x27c>)
    106e:	4293      	cmp	r3, r2
    1070:	d805      	bhi.n	107e <spi_transceive_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1072:	6822      	ldr	r2, [r4, #0]
    1074:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1076:	07d2      	lsls	r2, r2, #31
    1078:	d401      	bmi.n	107e <spi_transceive_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    107a:	3301      	adds	r3, #1
    107c:	e7f6      	b.n	106c <spi_transceive_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
    107e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1080:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1082:	0792      	lsls	r2, r2, #30
    1084:	d404      	bmi.n	1090 <spi_transceive_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1086:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    1088:	07db      	lsls	r3, r3, #31
    108a:	d471      	bmi.n	1170 <spi_transceive_buffer_wait+0x158>
				return STATUS_ERR_TIMEOUT;
    108c:	2112      	movs	r1, #18
    108e:	e0f4      	b.n	127a <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    1090:	0020      	movs	r0, r4
    1092:	4b7f      	ldr	r3, [pc, #508]	; (1290 <spi_transceive_buffer_wait+0x278>)
    1094:	4798      	blx	r3
				return STATUS_ABORTED;
    1096:	2104      	movs	r1, #4
    1098:	e0ef      	b.n	127a <spi_transceive_buffer_wait+0x262>
			data_to_send |= (tx_data[tx_pos++] << 8);
    109a:	3102      	adds	r1, #2
    109c:	9a00      	ldr	r2, [sp, #0]
    109e:	5d92      	ldrb	r2, [r2, r6]
    10a0:	0212      	lsls	r2, r2, #8
    10a2:	4650      	mov	r0, sl
    10a4:	4302      	orrs	r2, r0
    10a6:	b28e      	uxth	r6, r1
    10a8:	e071      	b.n	118e <spi_transceive_buffer_wait+0x176>
						data_to_send |= (tx_data[tx_pos++] << 8);
    10aa:	3602      	adds	r6, #2
    10ac:	9900      	ldr	r1, [sp, #0]
    10ae:	5c09      	ldrb	r1, [r1, r0]
    10b0:	0209      	lsls	r1, r1, #8
    10b2:	4650      	mov	r0, sl
    10b4:	4301      	orrs	r1, r0
    10b6:	4688      	mov	r8, r1
    10b8:	b2b0      	uxth	r0, r6
    10ba:	e01a      	b.n	10f2 <spi_transceive_buffer_wait+0xda>
					length--;
    10bc:	3f01      	subs	r7, #1
    10be:	b2bf      	uxth	r7, r7
    10c0:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    10c2:	6822      	ldr	r2, [r4, #0]
    10c4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    10c6:	0752      	lsls	r2, r2, #29
    10c8:	d41d      	bmi.n	1106 <spi_transceive_buffer_wait+0xee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10ca:	3301      	adds	r3, #1
    10cc:	4a71      	ldr	r2, [pc, #452]	; (1294 <spi_transceive_buffer_wait+0x27c>)
    10ce:	4293      	cmp	r3, r2
    10d0:	d819      	bhi.n	1106 <spi_transceive_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10d2:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10d4:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    10d6:	07c9      	lsls	r1, r1, #31
    10d8:	d5f3      	bpl.n	10c2 <spi_transceive_buffer_wait+0xaa>
					data_to_send = tx_data[tx_pos++];
    10da:	1c70      	adds	r0, r6, #1
    10dc:	b280      	uxth	r0, r0
    10de:	9900      	ldr	r1, [sp, #0]
    10e0:	5d89      	ldrb	r1, [r1, r6]
    10e2:	468a      	mov	sl, r1
    10e4:	466d      	mov	r5, sp
    10e6:	80e9      	strh	r1, [r5, #6]
    10e8:	88e9      	ldrh	r1, [r5, #6]
    10ea:	4688      	mov	r8, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10ec:	79a1      	ldrb	r1, [r4, #6]
    10ee:	2901      	cmp	r1, #1
    10f0:	d0db      	beq.n	10aa <spi_transceive_buffer_wait+0x92>
    10f2:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    10f4:	07f1      	lsls	r1, r6, #31
    10f6:	d5e1      	bpl.n	10bc <spi_transceive_buffer_wait+0xa4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    10f8:	4641      	mov	r1, r8
    10fa:	05c9      	lsls	r1, r1, #23
    10fc:	0dc9      	lsrs	r1, r1, #23
    10fe:	6291      	str	r1, [r2, #40]	; 0x28
    1100:	e7dc      	b.n	10bc <spi_transceive_buffer_wait+0xa4>
    1102:	2300      	movs	r3, #0
    1104:	e7e2      	b.n	10cc <spi_transceive_buffer_wait+0xb4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1106:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1108:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    110a:	0792      	lsls	r2, r2, #30
    110c:	d404      	bmi.n	1118 <spi_transceive_buffer_wait+0x100>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    110e:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1110:	075b      	lsls	r3, r3, #29
    1112:	d445      	bmi.n	11a0 <spi_transceive_buffer_wait+0x188>
				return STATUS_ERR_TIMEOUT;
    1114:	2112      	movs	r1, #18
    1116:	e0b0      	b.n	127a <spi_transceive_buffer_wait+0x262>
				_spi_clear_tx_complete_flag(module);
    1118:	0020      	movs	r0, r4
    111a:	4b5d      	ldr	r3, [pc, #372]	; (1290 <spi_transceive_buffer_wait+0x278>)
    111c:	4798      	blx	r3
				return STATUS_ABORTED;
    111e:	2104      	movs	r1, #4
    1120:	e0ab      	b.n	127a <spi_transceive_buffer_wait+0x262>
	enum status_code retval = STATUS_OK;
    1122:	2100      	movs	r1, #0
    1124:	e04d      	b.n	11c2 <spi_transceive_buffer_wait+0x1aa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1128:	05d2      	lsls	r2, r2, #23
    112a:	0dd3      	lsrs	r3, r2, #23
    112c:	4698      	mov	r8, r3
    112e:	e002      	b.n	1136 <spi_transceive_buffer_wait+0x11e>
		uint16_t received_data = 0;
    1130:	2300      	movs	r3, #0
    1132:	4698      	mov	r8, r3
		return STATUS_ERR_IO;
    1134:	2110      	movs	r1, #16
		if (retval != STATUS_OK) {
    1136:	2900      	cmp	r1, #0
    1138:	d000      	beq.n	113c <spi_transceive_buffer_wait+0x124>
    113a:	e09e      	b.n	127a <spi_transceive_buffer_wait+0x262>
		rx_data[rx_pos++] = received_data;
    113c:	9803      	ldr	r0, [sp, #12]
    113e:	0003      	movs	r3, r0
    1140:	3301      	adds	r3, #1
    1142:	b29b      	uxth	r3, r3
    1144:	4642      	mov	r2, r8
    1146:	4669      	mov	r1, sp
    1148:	718a      	strb	r2, [r1, #6]
    114a:	7989      	ldrb	r1, [r1, #6]
    114c:	9a02      	ldr	r2, [sp, #8]
    114e:	5411      	strb	r1, [r2, r0]
		*rx_data = received_data;
    1150:	7011      	strb	r1, [r2, #0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1152:	79a1      	ldrb	r1, [r4, #6]
    1154:	2901      	cmp	r1, #1
    1156:	d03b      	beq.n	11d0 <spi_transceive_buffer_wait+0x1b8>
			rx_data[rx_pos++] = (received_data >> 8);
    1158:	9303      	str	r3, [sp, #12]
    115a:	0031      	movs	r1, r6
    115c:	46b8      	mov	r8, r7
	while (length--) {
    115e:	4643      	mov	r3, r8
    1160:	1e5f      	subs	r7, r3, #1
    1162:	b2bf      	uxth	r7, r7
    1164:	2b00      	cmp	r3, #0
    1166:	d03a      	beq.n	11de <spi_transceive_buffer_wait+0x1c6>
		if (module->mode == SPI_MODE_SLAVE) {
    1168:	7963      	ldrb	r3, [r4, #5]
    116a:	2b00      	cmp	r3, #0
    116c:	d100      	bne.n	1170 <spi_transceive_buffer_wait+0x158>
    116e:	e77c      	b.n	106a <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1170:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1172:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    1174:	07d2      	lsls	r2, r2, #31
    1176:	d5fb      	bpl.n	1170 <spi_transceive_buffer_wait+0x158>
		uint16_t data_to_send = tx_data[tx_pos++];
    1178:	1c4e      	adds	r6, r1, #1
    117a:	b2b6      	uxth	r6, r6
    117c:	9a00      	ldr	r2, [sp, #0]
    117e:	5c52      	ldrb	r2, [r2, r1]
    1180:	4692      	mov	sl, r2
    1182:	4668      	mov	r0, sp
    1184:	80c2      	strh	r2, [r0, #6]
    1186:	88c2      	ldrh	r2, [r0, #6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1188:	79a0      	ldrb	r0, [r4, #6]
    118a:	2801      	cmp	r0, #1
    118c:	d085      	beq.n	109a <spi_transceive_buffer_wait+0x82>
    118e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1190:	07c9      	lsls	r1, r1, #31
    1192:	d502      	bpl.n	119a <spi_transceive_buffer_wait+0x182>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1194:	05d2      	lsls	r2, r2, #23
    1196:	0dd2      	lsrs	r2, r2, #23
    1198:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    119a:	7963      	ldrb	r3, [r4, #5]
    119c:	2b00      	cmp	r3, #0
    119e:	d0b0      	beq.n	1102 <spi_transceive_buffer_wait+0xea>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11a0:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11a2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    11a4:	0752      	lsls	r2, r2, #29
    11a6:	d5fb      	bpl.n	11a0 <spi_transceive_buffer_wait+0x188>
		rx_length--;
    11a8:	4662      	mov	r2, ip
    11aa:	3a01      	subs	r2, #1
    11ac:	b292      	uxth	r2, r2
    11ae:	4694      	mov	ip, r2
    11b0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    11b2:	0752      	lsls	r2, r2, #29
    11b4:	d5bc      	bpl.n	1130 <spi_transceive_buffer_wait+0x118>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    11b6:	8b5a      	ldrh	r2, [r3, #26]
    11b8:	0752      	lsls	r2, r2, #29
    11ba:	d5b2      	bpl.n	1122 <spi_transceive_buffer_wait+0x10a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    11bc:	2204      	movs	r2, #4
    11be:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    11c0:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11c2:	79a2      	ldrb	r2, [r4, #6]
    11c4:	2a01      	cmp	r2, #1
    11c6:	d0ae      	beq.n	1126 <spi_transceive_buffer_wait+0x10e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    11c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11ca:	b2d3      	uxtb	r3, r2
    11cc:	4698      	mov	r8, r3
    11ce:	e7b2      	b.n	1136 <spi_transceive_buffer_wait+0x11e>
			rx_data[rx_pos++] = (received_data >> 8);
    11d0:	3002      	adds	r0, #2
    11d2:	4642      	mov	r2, r8
    11d4:	0a12      	lsrs	r2, r2, #8
    11d6:	9902      	ldr	r1, [sp, #8]
    11d8:	54ca      	strb	r2, [r1, r3]
    11da:	b283      	uxth	r3, r0
    11dc:	e7bc      	b.n	1158 <spi_transceive_buffer_wait+0x140>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    11de:	7962      	ldrb	r2, [r4, #5]
    11e0:	2a01      	cmp	r2, #1
    11e2:	d003      	beq.n	11ec <spi_transceive_buffer_wait+0x1d4>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    11e4:	2a00      	cmp	r2, #0
    11e6:	d03b      	beq.n	1260 <spi_transceive_buffer_wait+0x248>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    11e8:	2100      	movs	r1, #0
    11ea:	e046      	b.n	127a <spi_transceive_buffer_wait+0x262>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    11ec:	6823      	ldr	r3, [r4, #0]
    11ee:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    11f0:	079b      	lsls	r3, r3, #30
    11f2:	d5fb      	bpl.n	11ec <spi_transceive_buffer_wait+0x1d4>
    11f4:	e7f6      	b.n	11e4 <spi_transceive_buffer_wait+0x1cc>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11f6:	3301      	adds	r3, #1
    11f8:	4a26      	ldr	r2, [pc, #152]	; (1294 <spi_transceive_buffer_wait+0x27c>)
    11fa:	4293      	cmp	r3, r2
    11fc:	d803      	bhi.n	1206 <spi_transceive_buffer_wait+0x1ee>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11fe:	6822      	ldr	r2, [r4, #0]
    1200:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1202:	0752      	lsls	r2, r2, #29
    1204:	d5f7      	bpl.n	11f6 <spi_transceive_buffer_wait+0x1de>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1206:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1208:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    120a:	0752      	lsls	r2, r2, #29
    120c:	d53d      	bpl.n	128a <spi_transceive_buffer_wait+0x272>
			rx_length--;
    120e:	4662      	mov	r2, ip
    1210:	3a01      	subs	r2, #1
    1212:	b292      	uxth	r2, r2
    1214:	4694      	mov	ip, r2
    1216:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1218:	0752      	lsls	r2, r2, #29
    121a:	d511      	bpl.n	1240 <spi_transceive_buffer_wait+0x228>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    121c:	8b5a      	ldrh	r2, [r3, #26]
    121e:	0752      	lsls	r2, r2, #29
    1220:	d508      	bpl.n	1234 <spi_transceive_buffer_wait+0x21c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1222:	2204      	movs	r2, #4
    1224:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1226:	211e      	movs	r1, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1228:	79a2      	ldrb	r2, [r4, #6]
    122a:	2a01      	cmp	r2, #1
    122c:	d004      	beq.n	1238 <spi_transceive_buffer_wait+0x220>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    122e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1230:	b2d2      	uxtb	r2, r2
    1232:	e007      	b.n	1244 <spi_transceive_buffer_wait+0x22c>
	enum status_code retval = STATUS_OK;
    1234:	2100      	movs	r1, #0
    1236:	e7f7      	b.n	1228 <spi_transceive_buffer_wait+0x210>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    123a:	05d2      	lsls	r2, r2, #23
    123c:	0dd2      	lsrs	r2, r2, #23
    123e:	e001      	b.n	1244 <spi_transceive_buffer_wait+0x22c>
			uint16_t received_data = 0;
    1240:	4642      	mov	r2, r8
		return STATUS_ERR_IO;
    1242:	2110      	movs	r1, #16
			if (retval != STATUS_OK) {
    1244:	2900      	cmp	r1, #0
    1246:	d118      	bne.n	127a <spi_transceive_buffer_wait+0x262>
			rx_data[rx_pos++] = received_data;
    1248:	9803      	ldr	r0, [sp, #12]
    124a:	0003      	movs	r3, r0
    124c:	3301      	adds	r3, #1
    124e:	b29b      	uxth	r3, r3
    1250:	b2d1      	uxtb	r1, r2
    1252:	9d02      	ldr	r5, [sp, #8]
    1254:	5429      	strb	r1, [r5, r0]
			*rx_data = received_data;
    1256:	7029      	strb	r1, [r5, #0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1258:	79a1      	ldrb	r1, [r4, #6]
    125a:	2901      	cmp	r1, #1
    125c:	d005      	beq.n	126a <spi_transceive_buffer_wait+0x252>
				rx_data[rx_pos++] = (received_data >> 8);
    125e:	9303      	str	r3, [sp, #12]
		while (rx_length) {
    1260:	4663      	mov	r3, ip
    1262:	2b00      	cmp	r3, #0
    1264:	d006      	beq.n	1274 <spi_transceive_buffer_wait+0x25c>
    1266:	2300      	movs	r3, #0
    1268:	e7c6      	b.n	11f8 <spi_transceive_buffer_wait+0x1e0>
				rx_data[rx_pos++] = (received_data >> 8);
    126a:	3002      	adds	r0, #2
    126c:	0a12      	lsrs	r2, r2, #8
    126e:	54ea      	strb	r2, [r5, r3]
    1270:	b283      	uxth	r3, r0
    1272:	e7f4      	b.n	125e <spi_transceive_buffer_wait+0x246>
	return STATUS_OK;
    1274:	2100      	movs	r1, #0
    1276:	e000      	b.n	127a <spi_transceive_buffer_wait+0x262>
		return STATUS_BUSY;
    1278:	2105      	movs	r1, #5
}
    127a:	0008      	movs	r0, r1
    127c:	b005      	add	sp, #20
    127e:	bc3c      	pop	{r2, r3, r4, r5}
    1280:	4690      	mov	r8, r2
    1282:	4699      	mov	r9, r3
    1284:	46a2      	mov	sl, r4
    1286:	46ab      	mov	fp, r5
    1288:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    128a:	2112      	movs	r1, #18
    128c:	e7f5      	b.n	127a <spi_transceive_buffer_wait+0x262>
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	00000e19 	.word	0x00000e19
    1294:	00002710 	.word	0x00002710

00001298 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1298:	4770      	bx	lr
	...

0000129c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    129c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    129e:	4b0b      	ldr	r3, [pc, #44]	; (12cc <_sercom_set_handler+0x30>)
    12a0:	781b      	ldrb	r3, [r3, #0]
    12a2:	2b00      	cmp	r3, #0
    12a4:	d008      	beq.n	12b8 <_sercom_set_handler+0x1c>
    12a6:	e00c      	b.n	12c2 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    12a8:	009a      	lsls	r2, r3, #2
    12aa:	4d09      	ldr	r5, [pc, #36]	; (12d0 <_sercom_set_handler+0x34>)
    12ac:	4c09      	ldr	r4, [pc, #36]	; (12d4 <_sercom_set_handler+0x38>)
    12ae:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    12b0:	2500      	movs	r5, #0
    12b2:	4c09      	ldr	r4, [pc, #36]	; (12d8 <_sercom_set_handler+0x3c>)
    12b4:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12b6:	3301      	adds	r3, #1
    12b8:	2b05      	cmp	r3, #5
    12ba:	d9f5      	bls.n	12a8 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    12bc:	2201      	movs	r2, #1
    12be:	4b03      	ldr	r3, [pc, #12]	; (12cc <_sercom_set_handler+0x30>)
    12c0:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    12c2:	0080      	lsls	r0, r0, #2
    12c4:	4b03      	ldr	r3, [pc, #12]	; (12d4 <_sercom_set_handler+0x38>)
    12c6:	50c1      	str	r1, [r0, r3]
}
    12c8:	bd30      	pop	{r4, r5, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	2000008e 	.word	0x2000008e
    12d0:	00001299 	.word	0x00001299
    12d4:	20000090 	.word	0x20000090
    12d8:	20000108 	.word	0x20000108

000012dc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    12dc:	b500      	push	{lr}
    12de:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    12e0:	4b05      	ldr	r3, [pc, #20]	; (12f8 <_sercom_get_interrupt_vector+0x1c>)
    12e2:	681a      	ldr	r2, [r3, #0]
    12e4:	9200      	str	r2, [sp, #0]
    12e6:	889b      	ldrh	r3, [r3, #4]
    12e8:	466a      	mov	r2, sp
    12ea:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    12ec:	4b03      	ldr	r3, [pc, #12]	; (12fc <_sercom_get_interrupt_vector+0x20>)
    12ee:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    12f0:	466b      	mov	r3, sp
    12f2:	5618      	ldrsb	r0, [r3, r0]
}
    12f4:	b003      	add	sp, #12
    12f6:	bd00      	pop	{pc}
    12f8:	00002308 	.word	0x00002308
    12fc:	000007fd 	.word	0x000007fd

00001300 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1300:	b510      	push	{r4, lr}
    1302:	4b02      	ldr	r3, [pc, #8]	; (130c <SERCOM0_Handler+0xc>)
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	2000      	movs	r0, #0
    1308:	4798      	blx	r3
    130a:	bd10      	pop	{r4, pc}
    130c:	20000090 	.word	0x20000090

00001310 <SERCOM1_Handler>:
    1310:	b510      	push	{r4, lr}
    1312:	4b02      	ldr	r3, [pc, #8]	; (131c <SERCOM1_Handler+0xc>)
    1314:	685b      	ldr	r3, [r3, #4]
    1316:	2001      	movs	r0, #1
    1318:	4798      	blx	r3
    131a:	bd10      	pop	{r4, pc}
    131c:	20000090 	.word	0x20000090

00001320 <SERCOM2_Handler>:
    1320:	b510      	push	{r4, lr}
    1322:	4b02      	ldr	r3, [pc, #8]	; (132c <SERCOM2_Handler+0xc>)
    1324:	689b      	ldr	r3, [r3, #8]
    1326:	2002      	movs	r0, #2
    1328:	4798      	blx	r3
    132a:	bd10      	pop	{r4, pc}
    132c:	20000090 	.word	0x20000090

00001330 <SERCOM3_Handler>:
    1330:	b510      	push	{r4, lr}
    1332:	4b02      	ldr	r3, [pc, #8]	; (133c <SERCOM3_Handler+0xc>)
    1334:	68db      	ldr	r3, [r3, #12]
    1336:	2003      	movs	r0, #3
    1338:	4798      	blx	r3
    133a:	bd10      	pop	{r4, pc}
    133c:	20000090 	.word	0x20000090

00001340 <SERCOM4_Handler>:
    1340:	b510      	push	{r4, lr}
    1342:	4b02      	ldr	r3, [pc, #8]	; (134c <SERCOM4_Handler+0xc>)
    1344:	691b      	ldr	r3, [r3, #16]
    1346:	2004      	movs	r0, #4
    1348:	4798      	blx	r3
    134a:	bd10      	pop	{r4, pc}
    134c:	20000090 	.word	0x20000090

00001350 <SERCOM5_Handler>:
    1350:	b510      	push	{r4, lr}
    1352:	4b02      	ldr	r3, [pc, #8]	; (135c <SERCOM5_Handler+0xc>)
    1354:	695b      	ldr	r3, [r3, #20]
    1356:	2005      	movs	r0, #5
    1358:	4798      	blx	r3
    135a:	bd10      	pop	{r4, pc}
    135c:	20000090 	.word	0x20000090

00001360 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1360:	4770      	bx	lr
	...

00001364 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1364:	4b0c      	ldr	r3, [pc, #48]	; (1398 <cpu_irq_enter_critical+0x34>)
    1366:	681b      	ldr	r3, [r3, #0]
    1368:	2b00      	cmp	r3, #0
    136a:	d106      	bne.n	137a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    136c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1370:	2b00      	cmp	r3, #0
    1372:	d007      	beq.n	1384 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1374:	2200      	movs	r2, #0
    1376:	4b09      	ldr	r3, [pc, #36]	; (139c <cpu_irq_enter_critical+0x38>)
    1378:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    137a:	4a07      	ldr	r2, [pc, #28]	; (1398 <cpu_irq_enter_critical+0x34>)
    137c:	6813      	ldr	r3, [r2, #0]
    137e:	3301      	adds	r3, #1
    1380:	6013      	str	r3, [r2, #0]
}
    1382:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1384:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1386:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    138a:	2200      	movs	r2, #0
    138c:	4b04      	ldr	r3, [pc, #16]	; (13a0 <cpu_irq_enter_critical+0x3c>)
    138e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1390:	3201      	adds	r2, #1
    1392:	4b02      	ldr	r3, [pc, #8]	; (139c <cpu_irq_enter_critical+0x38>)
    1394:	701a      	strb	r2, [r3, #0]
    1396:	e7f0      	b.n	137a <cpu_irq_enter_critical+0x16>
    1398:	200000a8 	.word	0x200000a8
    139c:	200000ac 	.word	0x200000ac
    13a0:	20000008 	.word	0x20000008

000013a4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    13a4:	4b08      	ldr	r3, [pc, #32]	; (13c8 <cpu_irq_leave_critical+0x24>)
    13a6:	681a      	ldr	r2, [r3, #0]
    13a8:	3a01      	subs	r2, #1
    13aa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	2b00      	cmp	r3, #0
    13b0:	d109      	bne.n	13c6 <cpu_irq_leave_critical+0x22>
    13b2:	4b06      	ldr	r3, [pc, #24]	; (13cc <cpu_irq_leave_critical+0x28>)
    13b4:	781b      	ldrb	r3, [r3, #0]
    13b6:	2b00      	cmp	r3, #0
    13b8:	d005      	beq.n	13c6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    13ba:	2201      	movs	r2, #1
    13bc:	4b04      	ldr	r3, [pc, #16]	; (13d0 <cpu_irq_leave_critical+0x2c>)
    13be:	701a      	strb	r2, [r3, #0]
    13c0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    13c4:	b662      	cpsie	i
	}
}
    13c6:	4770      	bx	lr
    13c8:	200000a8 	.word	0x200000a8
    13cc:	200000ac 	.word	0x200000ac
    13d0:	20000008 	.word	0x20000008

000013d4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    13d4:	b510      	push	{r4, lr}
    13d6:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    13d8:	2201      	movs	r2, #1
    13da:	ab01      	add	r3, sp, #4
    13dc:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13de:	2400      	movs	r4, #0
    13e0:	e004      	b.n	13ec <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13e2:	b2e0      	uxtb	r0, r4
    13e4:	a901      	add	r1, sp, #4
    13e6:	4b03      	ldr	r3, [pc, #12]	; (13f4 <_switch_peripheral_gclk+0x20>)
    13e8:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13ea:	3401      	adds	r4, #1
    13ec:	2c24      	cmp	r4, #36	; 0x24
    13ee:	d9f8      	bls.n	13e2 <_switch_peripheral_gclk+0xe>
	}
}
    13f0:	b002      	add	sp, #8
    13f2:	bd10      	pop	{r4, pc}
    13f4:	00001875 	.word	0x00001875

000013f8 <system_clock_source_get_hz>:
{
    13f8:	b510      	push	{r4, lr}
	switch (clock_source) {
    13fa:	2808      	cmp	r0, #8
    13fc:	d832      	bhi.n	1464 <system_clock_source_get_hz+0x6c>
    13fe:	0080      	lsls	r0, r0, #2
    1400:	4b1b      	ldr	r3, [pc, #108]	; (1470 <system_clock_source_get_hz+0x78>)
    1402:	581b      	ldr	r3, [r3, r0]
    1404:	469f      	mov	pc, r3
		return 32768UL;
    1406:	2080      	movs	r0, #128	; 0x80
    1408:	0200      	lsls	r0, r0, #8
}
    140a:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    140c:	4b19      	ldr	r3, [pc, #100]	; (1474 <system_clock_source_get_hz+0x7c>)
    140e:	6918      	ldr	r0, [r3, #16]
    1410:	e7fb      	b.n	140a <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1412:	4b19      	ldr	r3, [pc, #100]	; (1478 <system_clock_source_get_hz+0x80>)
    1414:	6a1b      	ldr	r3, [r3, #32]
    1416:	059b      	lsls	r3, r3, #22
    1418:	0f9b      	lsrs	r3, r3, #30
    141a:	4818      	ldr	r0, [pc, #96]	; (147c <system_clock_source_get_hz+0x84>)
    141c:	40d8      	lsrs	r0, r3
    141e:	e7f4      	b.n	140a <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    1420:	4b14      	ldr	r3, [pc, #80]	; (1474 <system_clock_source_get_hz+0x7c>)
    1422:	6958      	ldr	r0, [r3, #20]
    1424:	e7f1      	b.n	140a <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1426:	4b13      	ldr	r3, [pc, #76]	; (1474 <system_clock_source_get_hz+0x7c>)
    1428:	681b      	ldr	r3, [r3, #0]
    142a:	079b      	lsls	r3, r3, #30
    142c:	d51c      	bpl.n	1468 <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    142e:	4b12      	ldr	r3, [pc, #72]	; (1478 <system_clock_source_get_hz+0x80>)
    1430:	68db      	ldr	r3, [r3, #12]
    1432:	06db      	lsls	r3, r3, #27
    1434:	d5fb      	bpl.n	142e <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1436:	4b0f      	ldr	r3, [pc, #60]	; (1474 <system_clock_source_get_hz+0x7c>)
    1438:	681b      	ldr	r3, [r3, #0]
    143a:	075b      	lsls	r3, r3, #29
    143c:	d401      	bmi.n	1442 <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    143e:	4810      	ldr	r0, [pc, #64]	; (1480 <system_clock_source_get_hz+0x88>)
    1440:	e7e3      	b.n	140a <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1442:	2000      	movs	r0, #0
    1444:	4b0f      	ldr	r3, [pc, #60]	; (1484 <system_clock_source_get_hz+0x8c>)
    1446:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1448:	4b0a      	ldr	r3, [pc, #40]	; (1474 <system_clock_source_get_hz+0x7c>)
    144a:	689b      	ldr	r3, [r3, #8]
    144c:	041b      	lsls	r3, r3, #16
    144e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1450:	4358      	muls	r0, r3
    1452:	e7da      	b.n	140a <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1454:	2350      	movs	r3, #80	; 0x50
    1456:	4a08      	ldr	r2, [pc, #32]	; (1478 <system_clock_source_get_hz+0x80>)
    1458:	5cd3      	ldrb	r3, [r2, r3]
    145a:	075b      	lsls	r3, r3, #29
    145c:	d506      	bpl.n	146c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    145e:	4b05      	ldr	r3, [pc, #20]	; (1474 <system_clock_source_get_hz+0x7c>)
    1460:	68d8      	ldr	r0, [r3, #12]
    1462:	e7d2      	b.n	140a <system_clock_source_get_hz+0x12>
		return 0;
    1464:	2000      	movs	r0, #0
    1466:	e7d0      	b.n	140a <system_clock_source_get_hz+0x12>
			return 0;
    1468:	2000      	movs	r0, #0
    146a:	e7ce      	b.n	140a <system_clock_source_get_hz+0x12>
			return 0;
    146c:	2000      	movs	r0, #0
    146e:	e7cc      	b.n	140a <system_clock_source_get_hz+0x12>
    1470:	00002310 	.word	0x00002310
    1474:	200000b0 	.word	0x200000b0
    1478:	40000800 	.word	0x40000800
    147c:	007a1200 	.word	0x007a1200
    1480:	02dc6c00 	.word	0x02dc6c00
    1484:	00001891 	.word	0x00001891

00001488 <system_clock_source_osc8m_set_config>:
{
    1488:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    148a:	4d0c      	ldr	r5, [pc, #48]	; (14bc <system_clock_source_osc8m_set_config+0x34>)
    148c:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    148e:	7802      	ldrb	r2, [r0, #0]
    1490:	2103      	movs	r1, #3
    1492:	400a      	ands	r2, r1
    1494:	0212      	lsls	r2, r2, #8
    1496:	490a      	ldr	r1, [pc, #40]	; (14c0 <system_clock_source_osc8m_set_config+0x38>)
    1498:	4031      	ands	r1, r6
    149a:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    149c:	7882      	ldrb	r2, [r0, #2]
    149e:	2401      	movs	r4, #1
    14a0:	4022      	ands	r2, r4
    14a2:	01d2      	lsls	r2, r2, #7
    14a4:	2380      	movs	r3, #128	; 0x80
    14a6:	4399      	bics	r1, r3
    14a8:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    14aa:	7843      	ldrb	r3, [r0, #1]
    14ac:	4023      	ands	r3, r4
    14ae:	019b      	lsls	r3, r3, #6
    14b0:	2140      	movs	r1, #64	; 0x40
    14b2:	438a      	bics	r2, r1
    14b4:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    14b6:	622b      	str	r3, [r5, #32]
}
    14b8:	bd70      	pop	{r4, r5, r6, pc}
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	40000800 	.word	0x40000800
    14c0:	fffffcff 	.word	0xfffffcff

000014c4 <system_clock_source_enable>:
	switch (clock_source) {
    14c4:	2808      	cmp	r0, #8
    14c6:	d84a      	bhi.n	155e <system_clock_source_enable+0x9a>
    14c8:	0080      	lsls	r0, r0, #2
    14ca:	4b26      	ldr	r3, [pc, #152]	; (1564 <system_clock_source_enable+0xa0>)
    14cc:	581b      	ldr	r3, [r3, r0]
    14ce:	469f      	mov	pc, r3
		return STATUS_OK;
    14d0:	2000      	movs	r0, #0
}
    14d2:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    14d4:	4a24      	ldr	r2, [pc, #144]	; (1568 <system_clock_source_enable+0xa4>)
    14d6:	6a13      	ldr	r3, [r2, #32]
    14d8:	2102      	movs	r1, #2
    14da:	430b      	orrs	r3, r1
    14dc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    14de:	2000      	movs	r0, #0
    14e0:	e7f7      	b.n	14d2 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14e2:	4a21      	ldr	r2, [pc, #132]	; (1568 <system_clock_source_enable+0xa4>)
    14e4:	6993      	ldr	r3, [r2, #24]
    14e6:	2102      	movs	r1, #2
    14e8:	430b      	orrs	r3, r1
    14ea:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    14ec:	2000      	movs	r0, #0
		break;
    14ee:	e7f0      	b.n	14d2 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    14f0:	4a1d      	ldr	r2, [pc, #116]	; (1568 <system_clock_source_enable+0xa4>)
    14f2:	8a13      	ldrh	r3, [r2, #16]
    14f4:	2102      	movs	r1, #2
    14f6:	430b      	orrs	r3, r1
    14f8:	b29b      	uxth	r3, r3
    14fa:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    14fc:	2000      	movs	r0, #0
		break;
    14fe:	e7e8      	b.n	14d2 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1500:	4a19      	ldr	r2, [pc, #100]	; (1568 <system_clock_source_enable+0xa4>)
    1502:	8a93      	ldrh	r3, [r2, #20]
    1504:	2102      	movs	r1, #2
    1506:	430b      	orrs	r3, r1
    1508:	b29b      	uxth	r3, r3
    150a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    150c:	2000      	movs	r0, #0
		break;
    150e:	e7e0      	b.n	14d2 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1510:	4916      	ldr	r1, [pc, #88]	; (156c <system_clock_source_enable+0xa8>)
    1512:	680b      	ldr	r3, [r1, #0]
    1514:	2202      	movs	r2, #2
    1516:	4313      	orrs	r3, r2
    1518:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    151a:	4b13      	ldr	r3, [pc, #76]	; (1568 <system_clock_source_enable+0xa4>)
    151c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    151e:	4b12      	ldr	r3, [pc, #72]	; (1568 <system_clock_source_enable+0xa4>)
    1520:	68db      	ldr	r3, [r3, #12]
    1522:	06db      	lsls	r3, r3, #27
    1524:	d5fb      	bpl.n	151e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1526:	4a11      	ldr	r2, [pc, #68]	; (156c <system_clock_source_enable+0xa8>)
    1528:	6891      	ldr	r1, [r2, #8]
    152a:	4b0f      	ldr	r3, [pc, #60]	; (1568 <system_clock_source_enable+0xa4>)
    152c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    152e:	6852      	ldr	r2, [r2, #4]
    1530:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1532:	2200      	movs	r2, #0
    1534:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1536:	4b0c      	ldr	r3, [pc, #48]	; (1568 <system_clock_source_enable+0xa4>)
    1538:	68db      	ldr	r3, [r3, #12]
    153a:	06db      	lsls	r3, r3, #27
    153c:	d5fb      	bpl.n	1536 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    153e:	4b0b      	ldr	r3, [pc, #44]	; (156c <system_clock_source_enable+0xa8>)
    1540:	681b      	ldr	r3, [r3, #0]
    1542:	b29b      	uxth	r3, r3
    1544:	4a08      	ldr	r2, [pc, #32]	; (1568 <system_clock_source_enable+0xa4>)
    1546:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1548:	2000      	movs	r0, #0
    154a:	e7c2      	b.n	14d2 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    154c:	4906      	ldr	r1, [pc, #24]	; (1568 <system_clock_source_enable+0xa4>)
    154e:	2244      	movs	r2, #68	; 0x44
    1550:	5c8b      	ldrb	r3, [r1, r2]
    1552:	2002      	movs	r0, #2
    1554:	4303      	orrs	r3, r0
    1556:	b2db      	uxtb	r3, r3
    1558:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    155a:	2000      	movs	r0, #0
		break;
    155c:	e7b9      	b.n	14d2 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    155e:	2017      	movs	r0, #23
    1560:	e7b7      	b.n	14d2 <system_clock_source_enable+0xe>
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	00002334 	.word	0x00002334
    1568:	40000800 	.word	0x40000800
    156c:	200000b0 	.word	0x200000b0

00001570 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1570:	b530      	push	{r4, r5, lr}
    1572:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1574:	22c2      	movs	r2, #194	; 0xc2
    1576:	00d2      	lsls	r2, r2, #3
    1578:	4b15      	ldr	r3, [pc, #84]	; (15d0 <system_clock_init+0x60>)
    157a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    157c:	4b15      	ldr	r3, [pc, #84]	; (15d4 <system_clock_init+0x64>)
    157e:	6859      	ldr	r1, [r3, #4]
    1580:	221e      	movs	r2, #30
    1582:	4391      	bics	r1, r2
    1584:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1586:	4b14      	ldr	r3, [pc, #80]	; (15d8 <system_clock_init+0x68>)
    1588:	4798      	blx	r3
	config->run_in_standby  = false;
    158a:	a803      	add	r0, sp, #12
    158c:	2400      	movs	r4, #0
    158e:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1590:	2501      	movs	r5, #1
    1592:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1594:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1596:	4b11      	ldr	r3, [pc, #68]	; (15dc <system_clock_init+0x6c>)
    1598:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    159a:	2006      	movs	r0, #6
    159c:	4b10      	ldr	r3, [pc, #64]	; (15e0 <system_clock_init+0x70>)
    159e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    15a0:	4b10      	ldr	r3, [pc, #64]	; (15e4 <system_clock_init+0x74>)
    15a2:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    15a4:	4b10      	ldr	r3, [pc, #64]	; (15e8 <system_clock_init+0x78>)
    15a6:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    15a8:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    15aa:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    15ac:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    15ae:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    15b0:	466b      	mov	r3, sp
    15b2:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    15b4:	2306      	movs	r3, #6
    15b6:	466a      	mov	r2, sp
    15b8:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    15ba:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    15bc:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    15be:	4669      	mov	r1, sp
    15c0:	2000      	movs	r0, #0
    15c2:	4b0a      	ldr	r3, [pc, #40]	; (15ec <system_clock_init+0x7c>)
    15c4:	4798      	blx	r3
    15c6:	2000      	movs	r0, #0
    15c8:	4b09      	ldr	r3, [pc, #36]	; (15f0 <system_clock_init+0x80>)
    15ca:	4798      	blx	r3
#endif
}
    15cc:	b005      	add	sp, #20
    15ce:	bd30      	pop	{r4, r5, pc}
    15d0:	40000800 	.word	0x40000800
    15d4:	41004000 	.word	0x41004000
    15d8:	000013d5 	.word	0x000013d5
    15dc:	00001489 	.word	0x00001489
    15e0:	000014c5 	.word	0x000014c5
    15e4:	000015f5 	.word	0x000015f5
    15e8:	40000400 	.word	0x40000400
    15ec:	00001619 	.word	0x00001619
    15f0:	000016e9 	.word	0x000016e9

000015f4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    15f4:	4a06      	ldr	r2, [pc, #24]	; (1610 <system_gclk_init+0x1c>)
    15f6:	6993      	ldr	r3, [r2, #24]
    15f8:	2108      	movs	r1, #8
    15fa:	430b      	orrs	r3, r1
    15fc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    15fe:	2201      	movs	r2, #1
    1600:	4b04      	ldr	r3, [pc, #16]	; (1614 <system_gclk_init+0x20>)
    1602:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1604:	4b03      	ldr	r3, [pc, #12]	; (1614 <system_gclk_init+0x20>)
    1606:	781b      	ldrb	r3, [r3, #0]
    1608:	07db      	lsls	r3, r3, #31
    160a:	d4fb      	bmi.n	1604 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    160c:	4770      	bx	lr
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	40000400 	.word	0x40000400
    1614:	40000c00 	.word	0x40000c00

00001618 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    161a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    161c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    161e:	780c      	ldrb	r4, [r1, #0]
    1620:	0224      	lsls	r4, r4, #8
    1622:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1624:	784b      	ldrb	r3, [r1, #1]
    1626:	2b00      	cmp	r3, #0
    1628:	d002      	beq.n	1630 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    162a:	2380      	movs	r3, #128	; 0x80
    162c:	02db      	lsls	r3, r3, #11
    162e:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1630:	7a4b      	ldrb	r3, [r1, #9]
    1632:	2b00      	cmp	r3, #0
    1634:	d002      	beq.n	163c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1636:	2380      	movs	r3, #128	; 0x80
    1638:	031b      	lsls	r3, r3, #12
    163a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    163c:	6848      	ldr	r0, [r1, #4]
    163e:	2801      	cmp	r0, #1
    1640:	d912      	bls.n	1668 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1642:	1e43      	subs	r3, r0, #1
    1644:	4203      	tst	r3, r0
    1646:	d03d      	beq.n	16c4 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1648:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    164a:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    164c:	2380      	movs	r3, #128	; 0x80
    164e:	029b      	lsls	r3, r3, #10
    1650:	431c      	orrs	r4, r3
    1652:	e009      	b.n	1668 <system_gclk_gen_set_config+0x50>
				div2_count++;
    1654:	3201      	adds	r2, #1
						mask <<= 1) {
    1656:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1658:	4283      	cmp	r3, r0
    165a:	d3fb      	bcc.n	1654 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    165c:	0212      	lsls	r2, r2, #8
    165e:	4332      	orrs	r2, r6
    1660:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1662:	2380      	movs	r3, #128	; 0x80
    1664:	035b      	lsls	r3, r3, #13
    1666:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1668:	7a0b      	ldrb	r3, [r1, #8]
    166a:	2b00      	cmp	r3, #0
    166c:	d002      	beq.n	1674 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    166e:	2380      	movs	r3, #128	; 0x80
    1670:	039b      	lsls	r3, r3, #14
    1672:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1674:	4b18      	ldr	r3, [pc, #96]	; (16d8 <system_gclk_gen_set_config+0xc0>)
    1676:	785b      	ldrb	r3, [r3, #1]
    1678:	b25b      	sxtb	r3, r3
    167a:	2b00      	cmp	r3, #0
    167c:	db25      	blt.n	16ca <system_gclk_gen_set_config+0xb2>
	return false;
    167e:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    1680:	2f00      	cmp	r7, #0
    1682:	d1f7      	bne.n	1674 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1684:	4b15      	ldr	r3, [pc, #84]	; (16dc <system_gclk_gen_set_config+0xc4>)
    1686:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1688:	4b15      	ldr	r3, [pc, #84]	; (16e0 <system_gclk_gen_set_config+0xc8>)
    168a:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    168c:	4b12      	ldr	r3, [pc, #72]	; (16d8 <system_gclk_gen_set_config+0xc0>)
    168e:	785b      	ldrb	r3, [r3, #1]
    1690:	b25b      	sxtb	r3, r3
    1692:	2b00      	cmp	r3, #0
    1694:	db1b      	blt.n	16ce <system_gclk_gen_set_config+0xb6>
	return false;
    1696:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1698:	2a00      	cmp	r2, #0
    169a:	d1f7      	bne.n	168c <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    169c:	4b0e      	ldr	r3, [pc, #56]	; (16d8 <system_gclk_gen_set_config+0xc0>)
    169e:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16a0:	4b0d      	ldr	r3, [pc, #52]	; (16d8 <system_gclk_gen_set_config+0xc0>)
    16a2:	785b      	ldrb	r3, [r3, #1]
    16a4:	b25b      	sxtb	r3, r3
    16a6:	2b00      	cmp	r3, #0
    16a8:	db13      	blt.n	16d2 <system_gclk_gen_set_config+0xba>
	return false;
    16aa:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    16ac:	2b00      	cmp	r3, #0
    16ae:	d1f7      	bne.n	16a0 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    16b0:	4a09      	ldr	r2, [pc, #36]	; (16d8 <system_gclk_gen_set_config+0xc0>)
    16b2:	6853      	ldr	r3, [r2, #4]
    16b4:	2180      	movs	r1, #128	; 0x80
    16b6:	0249      	lsls	r1, r1, #9
    16b8:	400b      	ands	r3, r1
    16ba:	431c      	orrs	r4, r3
    16bc:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    16be:	4b09      	ldr	r3, [pc, #36]	; (16e4 <system_gclk_gen_set_config+0xcc>)
    16c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16c4:	2302      	movs	r3, #2
    16c6:	2200      	movs	r2, #0
    16c8:	e7c6      	b.n	1658 <system_gclk_gen_set_config+0x40>
		return true;
    16ca:	2701      	movs	r7, #1
    16cc:	e7d8      	b.n	1680 <system_gclk_gen_set_config+0x68>
    16ce:	2201      	movs	r2, #1
    16d0:	e7e2      	b.n	1698 <system_gclk_gen_set_config+0x80>
    16d2:	2301      	movs	r3, #1
    16d4:	e7ea      	b.n	16ac <system_gclk_gen_set_config+0x94>
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	40000c00 	.word	0x40000c00
    16dc:	00001365 	.word	0x00001365
    16e0:	40000c08 	.word	0x40000c08
    16e4:	000013a5 	.word	0x000013a5

000016e8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    16e8:	b570      	push	{r4, r5, r6, lr}
    16ea:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16ec:	4b10      	ldr	r3, [pc, #64]	; (1730 <system_gclk_gen_enable+0x48>)
    16ee:	785b      	ldrb	r3, [r3, #1]
    16f0:	b25b      	sxtb	r3, r3
    16f2:	2b00      	cmp	r3, #0
    16f4:	db17      	blt.n	1726 <system_gclk_gen_enable+0x3e>
	return false;
    16f6:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    16f8:	2c00      	cmp	r4, #0
    16fa:	d1f7      	bne.n	16ec <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    16fc:	4b0d      	ldr	r3, [pc, #52]	; (1734 <system_gclk_gen_enable+0x4c>)
    16fe:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1700:	4b0d      	ldr	r3, [pc, #52]	; (1738 <system_gclk_gen_enable+0x50>)
    1702:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1704:	4b0a      	ldr	r3, [pc, #40]	; (1730 <system_gclk_gen_enable+0x48>)
    1706:	785b      	ldrb	r3, [r3, #1]
    1708:	b25b      	sxtb	r3, r3
    170a:	2b00      	cmp	r3, #0
    170c:	db0d      	blt.n	172a <system_gclk_gen_enable+0x42>
	return false;
    170e:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1710:	2b00      	cmp	r3, #0
    1712:	d1f7      	bne.n	1704 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1714:	4a06      	ldr	r2, [pc, #24]	; (1730 <system_gclk_gen_enable+0x48>)
    1716:	6851      	ldr	r1, [r2, #4]
    1718:	2380      	movs	r3, #128	; 0x80
    171a:	025b      	lsls	r3, r3, #9
    171c:	430b      	orrs	r3, r1
    171e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1720:	4b06      	ldr	r3, [pc, #24]	; (173c <system_gclk_gen_enable+0x54>)
    1722:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1724:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    1726:	2401      	movs	r4, #1
    1728:	e7e6      	b.n	16f8 <system_gclk_gen_enable+0x10>
    172a:	2301      	movs	r3, #1
    172c:	e7f0      	b.n	1710 <system_gclk_gen_enable+0x28>
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	40000c00 	.word	0x40000c00
    1734:	00001365 	.word	0x00001365
    1738:	40000c04 	.word	0x40000c04
    173c:	000013a5 	.word	0x000013a5

00001740 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1742:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1744:	4b22      	ldr	r3, [pc, #136]	; (17d0 <system_gclk_gen_get_hz+0x90>)
    1746:	785b      	ldrb	r3, [r3, #1]
    1748:	b25b      	sxtb	r3, r3
    174a:	2b00      	cmp	r3, #0
    174c:	db34      	blt.n	17b8 <system_gclk_gen_get_hz+0x78>
	return false;
    174e:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1750:	2d00      	cmp	r5, #0
    1752:	d1f7      	bne.n	1744 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1754:	4b1f      	ldr	r3, [pc, #124]	; (17d4 <system_gclk_gen_get_hz+0x94>)
    1756:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1758:	4b1f      	ldr	r3, [pc, #124]	; (17d8 <system_gclk_gen_get_hz+0x98>)
    175a:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    175c:	4b1c      	ldr	r3, [pc, #112]	; (17d0 <system_gclk_gen_get_hz+0x90>)
    175e:	785b      	ldrb	r3, [r3, #1]
    1760:	b25b      	sxtb	r3, r3
    1762:	2b00      	cmp	r3, #0
    1764:	db2a      	blt.n	17bc <system_gclk_gen_get_hz+0x7c>
	return false;
    1766:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1768:	2c00      	cmp	r4, #0
    176a:	d1f7      	bne.n	175c <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    176c:	4e18      	ldr	r6, [pc, #96]	; (17d0 <system_gclk_gen_get_hz+0x90>)
    176e:	6870      	ldr	r0, [r6, #4]
    1770:	04c0      	lsls	r0, r0, #19
    1772:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1774:	4b19      	ldr	r3, [pc, #100]	; (17dc <system_gclk_gen_get_hz+0x9c>)
    1776:	4798      	blx	r3
    1778:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    177a:	4b17      	ldr	r3, [pc, #92]	; (17d8 <system_gclk_gen_get_hz+0x98>)
    177c:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    177e:	6876      	ldr	r6, [r6, #4]
    1780:	02f6      	lsls	r6, r6, #11
    1782:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1784:	4b16      	ldr	r3, [pc, #88]	; (17e0 <system_gclk_gen_get_hz+0xa0>)
    1786:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1788:	4b11      	ldr	r3, [pc, #68]	; (17d0 <system_gclk_gen_get_hz+0x90>)
    178a:	785b      	ldrb	r3, [r3, #1]
    178c:	b25b      	sxtb	r3, r3
    178e:	2b00      	cmp	r3, #0
    1790:	db16      	blt.n	17c0 <system_gclk_gen_get_hz+0x80>
	return false;
    1792:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1794:	2b00      	cmp	r3, #0
    1796:	d1f7      	bne.n	1788 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1798:	4b0d      	ldr	r3, [pc, #52]	; (17d0 <system_gclk_gen_get_hz+0x90>)
    179a:	689c      	ldr	r4, [r3, #8]
    179c:	0224      	lsls	r4, r4, #8
    179e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    17a0:	4b10      	ldr	r3, [pc, #64]	; (17e4 <system_gclk_gen_get_hz+0xa4>)
    17a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    17a4:	2e00      	cmp	r6, #0
    17a6:	d10d      	bne.n	17c4 <system_gclk_gen_get_hz+0x84>
    17a8:	2c01      	cmp	r4, #1
    17aa:	d90b      	bls.n	17c4 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    17ac:	0021      	movs	r1, r4
    17ae:	0028      	movs	r0, r5
    17b0:	4b0d      	ldr	r3, [pc, #52]	; (17e8 <system_gclk_gen_get_hz+0xa8>)
    17b2:	4798      	blx	r3
    17b4:	0005      	movs	r5, r0
    17b6:	e009      	b.n	17cc <system_gclk_gen_get_hz+0x8c>
		return true;
    17b8:	2501      	movs	r5, #1
    17ba:	e7c9      	b.n	1750 <system_gclk_gen_get_hz+0x10>
    17bc:	2401      	movs	r4, #1
    17be:	e7d3      	b.n	1768 <system_gclk_gen_get_hz+0x28>
    17c0:	2301      	movs	r3, #1
    17c2:	e7e7      	b.n	1794 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    17c4:	2e00      	cmp	r6, #0
    17c6:	d001      	beq.n	17cc <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    17c8:	3401      	adds	r4, #1
    17ca:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    17cc:	0028      	movs	r0, r5
    17ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17d0:	40000c00 	.word	0x40000c00
    17d4:	00001365 	.word	0x00001365
    17d8:	40000c04 	.word	0x40000c04
    17dc:	000013f9 	.word	0x000013f9
    17e0:	40000c08 	.word	0x40000c08
    17e4:	000013a5 	.word	0x000013a5
    17e8:	00001c21 	.word	0x00001c21

000017ec <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    17ec:	b510      	push	{r4, lr}
    17ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    17f0:	4b06      	ldr	r3, [pc, #24]	; (180c <system_gclk_chan_enable+0x20>)
    17f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    17f4:	4b06      	ldr	r3, [pc, #24]	; (1810 <system_gclk_chan_enable+0x24>)
    17f6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    17f8:	4a06      	ldr	r2, [pc, #24]	; (1814 <system_gclk_chan_enable+0x28>)
    17fa:	8853      	ldrh	r3, [r2, #2]
    17fc:	2180      	movs	r1, #128	; 0x80
    17fe:	01c9      	lsls	r1, r1, #7
    1800:	430b      	orrs	r3, r1
    1802:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1804:	4b04      	ldr	r3, [pc, #16]	; (1818 <system_gclk_chan_enable+0x2c>)
    1806:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1808:	bd10      	pop	{r4, pc}
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	00001365 	.word	0x00001365
    1810:	40000c02 	.word	0x40000c02
    1814:	40000c00 	.word	0x40000c00
    1818:	000013a5 	.word	0x000013a5

0000181c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    181c:	b510      	push	{r4, lr}
    181e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1820:	4b0e      	ldr	r3, [pc, #56]	; (185c <system_gclk_chan_disable+0x40>)
    1822:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1824:	4b0e      	ldr	r3, [pc, #56]	; (1860 <system_gclk_chan_disable+0x44>)
    1826:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1828:	490e      	ldr	r1, [pc, #56]	; (1864 <system_gclk_chan_disable+0x48>)
    182a:	884b      	ldrh	r3, [r1, #2]
    182c:	051b      	lsls	r3, r3, #20
    182e:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1830:	884b      	ldrh	r3, [r1, #2]
    1832:	480d      	ldr	r0, [pc, #52]	; (1868 <system_gclk_chan_disable+0x4c>)
    1834:	4003      	ands	r3, r0
    1836:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1838:	884b      	ldrh	r3, [r1, #2]
    183a:	480c      	ldr	r0, [pc, #48]	; (186c <system_gclk_chan_disable+0x50>)
    183c:	4003      	ands	r3, r0
    183e:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1840:	4b08      	ldr	r3, [pc, #32]	; (1864 <system_gclk_chan_disable+0x48>)
    1842:	885b      	ldrh	r3, [r3, #2]
    1844:	045b      	lsls	r3, r3, #17
    1846:	d4fb      	bmi.n	1840 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1848:	4806      	ldr	r0, [pc, #24]	; (1864 <system_gclk_chan_disable+0x48>)
    184a:	8841      	ldrh	r1, [r0, #2]
    184c:	0213      	lsls	r3, r2, #8
    184e:	4a06      	ldr	r2, [pc, #24]	; (1868 <system_gclk_chan_disable+0x4c>)
    1850:	400a      	ands	r2, r1
    1852:	4313      	orrs	r3, r2
    1854:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    1856:	4b06      	ldr	r3, [pc, #24]	; (1870 <system_gclk_chan_disable+0x54>)
    1858:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    185a:	bd10      	pop	{r4, pc}
    185c:	00001365 	.word	0x00001365
    1860:	40000c02 	.word	0x40000c02
    1864:	40000c00 	.word	0x40000c00
    1868:	fffff0ff 	.word	0xfffff0ff
    186c:	ffffbfff 	.word	0xffffbfff
    1870:	000013a5 	.word	0x000013a5

00001874 <system_gclk_chan_set_config>:
{
    1874:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1876:	780c      	ldrb	r4, [r1, #0]
    1878:	0224      	lsls	r4, r4, #8
    187a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    187c:	4b02      	ldr	r3, [pc, #8]	; (1888 <system_gclk_chan_set_config+0x14>)
    187e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1880:	b2a4      	uxth	r4, r4
    1882:	4b02      	ldr	r3, [pc, #8]	; (188c <system_gclk_chan_set_config+0x18>)
    1884:	805c      	strh	r4, [r3, #2]
}
    1886:	bd10      	pop	{r4, pc}
    1888:	0000181d 	.word	0x0000181d
    188c:	40000c00 	.word	0x40000c00

00001890 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1890:	b510      	push	{r4, lr}
    1892:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1894:	4b06      	ldr	r3, [pc, #24]	; (18b0 <system_gclk_chan_get_hz+0x20>)
    1896:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1898:	4b06      	ldr	r3, [pc, #24]	; (18b4 <system_gclk_chan_get_hz+0x24>)
    189a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    189c:	4b06      	ldr	r3, [pc, #24]	; (18b8 <system_gclk_chan_get_hz+0x28>)
    189e:	885c      	ldrh	r4, [r3, #2]
    18a0:	0524      	lsls	r4, r4, #20
    18a2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    18a4:	4b05      	ldr	r3, [pc, #20]	; (18bc <system_gclk_chan_get_hz+0x2c>)
    18a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    18a8:	0020      	movs	r0, r4
    18aa:	4b05      	ldr	r3, [pc, #20]	; (18c0 <system_gclk_chan_get_hz+0x30>)
    18ac:	4798      	blx	r3
}
    18ae:	bd10      	pop	{r4, pc}
    18b0:	00001365 	.word	0x00001365
    18b4:	40000c02 	.word	0x40000c02
    18b8:	40000c00 	.word	0x40000c00
    18bc:	000013a5 	.word	0x000013a5
    18c0:	00001741 	.word	0x00001741

000018c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    18c4:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    18c6:	78d3      	ldrb	r3, [r2, #3]
    18c8:	2b00      	cmp	r3, #0
    18ca:	d120      	bne.n	190e <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    18cc:	7815      	ldrb	r5, [r2, #0]
    18ce:	2d80      	cmp	r5, #128	; 0x80
    18d0:	d01b      	beq.n	190a <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    18d2:	062d      	lsls	r5, r5, #24
    18d4:	2380      	movs	r3, #128	; 0x80
    18d6:	025b      	lsls	r3, r3, #9
    18d8:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    18da:	7853      	ldrb	r3, [r2, #1]
    18dc:	2b00      	cmp	r3, #0
    18de:	d001      	beq.n	18e4 <_system_pinmux_config+0x20>
    18e0:	2b02      	cmp	r3, #2
    18e2:	d10a      	bne.n	18fa <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    18e4:	2380      	movs	r3, #128	; 0x80
    18e6:	029b      	lsls	r3, r3, #10
    18e8:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    18ea:	7894      	ldrb	r4, [r2, #2]
    18ec:	2c00      	cmp	r4, #0
    18ee:	d002      	beq.n	18f6 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    18f0:	23c0      	movs	r3, #192	; 0xc0
    18f2:	02db      	lsls	r3, r3, #11
    18f4:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    18f6:	6041      	str	r1, [r0, #4]
    18f8:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    18fa:	7853      	ldrb	r3, [r2, #1]
    18fc:	3b01      	subs	r3, #1
    18fe:	b2db      	uxtb	r3, r3
    1900:	2b01      	cmp	r3, #1
    1902:	d806      	bhi.n	1912 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1904:	4b13      	ldr	r3, [pc, #76]	; (1954 <_system_pinmux_config+0x90>)
    1906:	401d      	ands	r5, r3
    1908:	e003      	b.n	1912 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    190a:	2500      	movs	r5, #0
    190c:	e7e5      	b.n	18da <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    190e:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1910:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1912:	040c      	lsls	r4, r1, #16
    1914:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1916:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1918:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    191a:	26a0      	movs	r6, #160	; 0xa0
    191c:	05f6      	lsls	r6, r6, #23
    191e:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1920:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1922:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1924:	24d0      	movs	r4, #208	; 0xd0
    1926:	0624      	lsls	r4, r4, #24
    1928:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    192a:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    192c:	78d3      	ldrb	r3, [r2, #3]
    192e:	2b00      	cmp	r3, #0
    1930:	d10a      	bne.n	1948 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1932:	036b      	lsls	r3, r5, #13
    1934:	d503      	bpl.n	193e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1936:	7893      	ldrb	r3, [r2, #2]
    1938:	2b01      	cmp	r3, #1
    193a:	d006      	beq.n	194a <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    193c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    193e:	7853      	ldrb	r3, [r2, #1]
    1940:	3b01      	subs	r3, #1
    1942:	b2db      	uxtb	r3, r3
    1944:	2b01      	cmp	r3, #1
    1946:	d902      	bls.n	194e <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1948:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    194a:	6181      	str	r1, [r0, #24]
    194c:	e7f7      	b.n	193e <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    194e:	6081      	str	r1, [r0, #8]
}
    1950:	e7fa      	b.n	1948 <_system_pinmux_config+0x84>
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	fffbffff 	.word	0xfffbffff

00001958 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1958:	b510      	push	{r4, lr}
    195a:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    195c:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    195e:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    1960:	2900      	cmp	r1, #0
    1962:	d10b      	bne.n	197c <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    1964:	01db      	lsls	r3, r3, #7
    1966:	4906      	ldr	r1, [pc, #24]	; (1980 <system_pinmux_pin_set_config+0x28>)
    1968:	468c      	mov	ip, r1
    196a:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    196c:	241f      	movs	r4, #31
    196e:	4020      	ands	r0, r4
    1970:	2101      	movs	r1, #1
    1972:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1974:	0018      	movs	r0, r3
    1976:	4b03      	ldr	r3, [pc, #12]	; (1984 <system_pinmux_pin_set_config+0x2c>)
    1978:	4798      	blx	r3
}
    197a:	bd10      	pop	{r4, pc}
		return NULL;
    197c:	2300      	movs	r3, #0
    197e:	e7f5      	b.n	196c <system_pinmux_pin_set_config+0x14>
    1980:	41004400 	.word	0x41004400
    1984:	000018c5 	.word	0x000018c5

00001988 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1988:	4770      	bx	lr
	...

0000198c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    198c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    198e:	4b05      	ldr	r3, [pc, #20]	; (19a4 <system_init+0x18>)
    1990:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1992:	4b05      	ldr	r3, [pc, #20]	; (19a8 <system_init+0x1c>)
    1994:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1996:	4b05      	ldr	r3, [pc, #20]	; (19ac <system_init+0x20>)
    1998:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    199a:	4b05      	ldr	r3, [pc, #20]	; (19b0 <system_init+0x24>)
    199c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    199e:	4b05      	ldr	r3, [pc, #20]	; (19b4 <system_init+0x28>)
    19a0:	4798      	blx	r3
}
    19a2:	bd10      	pop	{r4, pc}
    19a4:	00001571 	.word	0x00001571
    19a8:	00001361 	.word	0x00001361
    19ac:	00001989 	.word	0x00001989
    19b0:	00001989 	.word	0x00001989
    19b4:	00001989 	.word	0x00001989

000019b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    19b8:	e7fe      	b.n	19b8 <Dummy_Handler>
	...

000019bc <Reset_Handler>:
{
    19bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    19be:	4a23      	ldr	r2, [pc, #140]	; (1a4c <Reset_Handler+0x90>)
    19c0:	4b23      	ldr	r3, [pc, #140]	; (1a50 <Reset_Handler+0x94>)
    19c2:	429a      	cmp	r2, r3
    19c4:	d009      	beq.n	19da <Reset_Handler+0x1e>
    19c6:	4b22      	ldr	r3, [pc, #136]	; (1a50 <Reset_Handler+0x94>)
    19c8:	4a20      	ldr	r2, [pc, #128]	; (1a4c <Reset_Handler+0x90>)
    19ca:	e003      	b.n	19d4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    19cc:	6811      	ldr	r1, [r2, #0]
    19ce:	6019      	str	r1, [r3, #0]
    19d0:	3304      	adds	r3, #4
    19d2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    19d4:	491f      	ldr	r1, [pc, #124]	; (1a54 <Reset_Handler+0x98>)
    19d6:	428b      	cmp	r3, r1
    19d8:	d3f8      	bcc.n	19cc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    19da:	4b1f      	ldr	r3, [pc, #124]	; (1a58 <Reset_Handler+0x9c>)
    19dc:	e002      	b.n	19e4 <Reset_Handler+0x28>
                *pDest++ = 0;
    19de:	2200      	movs	r2, #0
    19e0:	601a      	str	r2, [r3, #0]
    19e2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    19e4:	4a1d      	ldr	r2, [pc, #116]	; (1a5c <Reset_Handler+0xa0>)
    19e6:	4293      	cmp	r3, r2
    19e8:	d3f9      	bcc.n	19de <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    19ea:	4a1d      	ldr	r2, [pc, #116]	; (1a60 <Reset_Handler+0xa4>)
    19ec:	21ff      	movs	r1, #255	; 0xff
    19ee:	4b1d      	ldr	r3, [pc, #116]	; (1a64 <Reset_Handler+0xa8>)
    19f0:	438b      	bics	r3, r1
    19f2:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    19f4:	39fd      	subs	r1, #253	; 0xfd
    19f6:	2390      	movs	r3, #144	; 0x90
    19f8:	005b      	lsls	r3, r3, #1
    19fa:	4a1b      	ldr	r2, [pc, #108]	; (1a68 <Reset_Handler+0xac>)
    19fc:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    19fe:	4a1b      	ldr	r2, [pc, #108]	; (1a6c <Reset_Handler+0xb0>)
    1a00:	78d3      	ldrb	r3, [r2, #3]
    1a02:	2503      	movs	r5, #3
    1a04:	43ab      	bics	r3, r5
    1a06:	2402      	movs	r4, #2
    1a08:	4323      	orrs	r3, r4
    1a0a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1a0c:	78d3      	ldrb	r3, [r2, #3]
    1a0e:	270c      	movs	r7, #12
    1a10:	43bb      	bics	r3, r7
    1a12:	2608      	movs	r6, #8
    1a14:	4333      	orrs	r3, r6
    1a16:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1a18:	4b15      	ldr	r3, [pc, #84]	; (1a70 <Reset_Handler+0xb4>)
    1a1a:	7b98      	ldrb	r0, [r3, #14]
    1a1c:	2230      	movs	r2, #48	; 0x30
    1a1e:	4390      	bics	r0, r2
    1a20:	2220      	movs	r2, #32
    1a22:	4310      	orrs	r0, r2
    1a24:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1a26:	7b99      	ldrb	r1, [r3, #14]
    1a28:	43b9      	bics	r1, r7
    1a2a:	4331      	orrs	r1, r6
    1a2c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1a2e:	7b9a      	ldrb	r2, [r3, #14]
    1a30:	43aa      	bics	r2, r5
    1a32:	4322      	orrs	r2, r4
    1a34:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1a36:	4a0f      	ldr	r2, [pc, #60]	; (1a74 <Reset_Handler+0xb8>)
    1a38:	6851      	ldr	r1, [r2, #4]
    1a3a:	2380      	movs	r3, #128	; 0x80
    1a3c:	430b      	orrs	r3, r1
    1a3e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1a40:	4b0d      	ldr	r3, [pc, #52]	; (1a78 <Reset_Handler+0xbc>)
    1a42:	4798      	blx	r3
        main();
    1a44:	4b0d      	ldr	r3, [pc, #52]	; (1a7c <Reset_Handler+0xc0>)
    1a46:	4798      	blx	r3
    1a48:	e7fe      	b.n	1a48 <Reset_Handler+0x8c>
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	000023c0 	.word	0x000023c0
    1a50:	20000000 	.word	0x20000000
    1a54:	2000000c 	.word	0x2000000c
    1a58:	2000000c 	.word	0x2000000c
    1a5c:	20000120 	.word	0x20000120
    1a60:	e000ed00 	.word	0xe000ed00
    1a64:	00000000 	.word	0x00000000
    1a68:	41007000 	.word	0x41007000
    1a6c:	41005000 	.word	0x41005000
    1a70:	41004800 	.word	0x41004800
    1a74:	41004000 	.word	0x41004000
    1a78:	000022a9 	.word	0x000022a9
    1a7c:	00001bd9 	.word	0x00001bd9

00001a80 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a82:	46ce      	mov	lr, r9
    1a84:	4647      	mov	r7, r8
    1a86:	b580      	push	{r7, lr}
    1a88:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1a8a:	ac01      	add	r4, sp, #4
    1a8c:	2300      	movs	r3, #0
    1a8e:	4698      	mov	r8, r3
    1a90:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1a92:	2601      	movs	r6, #1
    1a94:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1a96:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1a98:	0021      	movs	r1, r4
    1a9a:	200b      	movs	r0, #11
    1a9c:	4d25      	ldr	r5, [pc, #148]	; (1b34 <conf_port_pin+0xb4>)
    1a9e:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1aa0:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    1aa2:	0021      	movs	r1, r4
    1aa4:	200a      	movs	r0, #10
    1aa6:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1aa8:	4f23      	ldr	r7, [pc, #140]	; (1b38 <conf_port_pin+0xb8>)
    1aaa:	2380      	movs	r3, #128	; 0x80
    1aac:	00db      	lsls	r3, r3, #3
    1aae:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    1ab0:	0021      	movs	r1, r4
    1ab2:	2005      	movs	r0, #5
    1ab4:	47a8      	blx	r5
    1ab6:	2320      	movs	r3, #32
    1ab8:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    1aba:	0021      	movs	r1, r4
    1abc:	2006      	movs	r0, #6
    1abe:	47a8      	blx	r5
    1ac0:	2340      	movs	r3, #64	; 0x40
    1ac2:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    1ac4:	0021      	movs	r1, r4
    1ac6:	2007      	movs	r0, #7
    1ac8:	47a8      	blx	r5
    1aca:	2380      	movs	r3, #128	; 0x80
    1acc:	4699      	mov	r9, r3
    1ace:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1ad0:	4643      	mov	r3, r8
    1ad2:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1ad4:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    1ad6:	0021      	movs	r1, r4
    1ad8:	200f      	movs	r0, #15
    1ada:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1adc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    1ade:	0021      	movs	r1, r4
    1ae0:	200e      	movs	r0, #14
    1ae2:	47a8      	blx	r5
    1ae4:	2380      	movs	r3, #128	; 0x80
    1ae6:	01db      	lsls	r3, r3, #7
    1ae8:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1aea:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1aec:	2302      	movs	r3, #2
    1aee:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1af0:	0021      	movs	r1, r4
    1af2:	202f      	movs	r0, #47	; 0x2f
    1af4:	47a8      	blx	r5
    1af6:	003b      	movs	r3, r7
    1af8:	444b      	add	r3, r9
    1afa:	2280      	movs	r2, #128	; 0x80
    1afc:	0212      	lsls	r2, r2, #8
    1afe:	619a      	str	r2, [r3, #24]
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1b00:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1b02:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    1b04:	0021      	movs	r1, r4
    1b06:	2011      	movs	r0, #17
    1b08:	47a8      	blx	r5
    1b0a:	2380      	movs	r3, #128	; 0x80
    1b0c:	029b      	lsls	r3, r3, #10
    1b0e:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1b10:	4643      	mov	r3, r8
    1b12:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    1b14:	0021      	movs	r1, r4
    1b16:	2030      	movs	r0, #48	; 0x30
    1b18:	47a8      	blx	r5
	
	
	/**************config pin for 27*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1b1a:	7026      	strb	r6, [r4, #0]
	//config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS27, &config_port_pin);
    1b1c:	0021      	movs	r1, r4
    1b1e:	2017      	movs	r0, #23
    1b20:	47a8      	blx	r5
    1b22:	2380      	movs	r3, #128	; 0x80
    1b24:	041b      	lsls	r3, r3, #16
    1b26:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(SS27, true);	
} // end conf_port_pin(void)
    1b28:	b003      	add	sp, #12
    1b2a:	bc0c      	pop	{r2, r3}
    1b2c:	4690      	mov	r8, r2
    1b2e:	4699      	mov	r9, r3
    1b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	000004a1 	.word	0x000004a1
    1b38:	41004400 	.word	0x41004400

00001b3c <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    1b3c:	b500      	push	{lr}
    1b3e:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1b40:	a801      	add	r0, sp, #4
    1b42:	2300      	movs	r3, #0
    1b44:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    1b46:	2201      	movs	r2, #1
    1b48:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    1b4a:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1b4c:	4b01      	ldr	r3, [pc, #4]	; (1b54 <clk_osc8m_init+0x18>)
    1b4e:	4798      	blx	r3
}
    1b50:	b003      	add	sp, #12
    1b52:	bd00      	pop	{pc}
    1b54:	00001489 	.word	0x00001489

00001b58 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1b58:	b500      	push	{lr}
    1b5a:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1b5c:	4b0a      	ldr	r3, [pc, #40]	; (1b88 <clk_gclk0_init+0x30>)
    1b5e:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1b60:	2300      	movs	r3, #0
    1b62:	4a0a      	ldr	r2, [pc, #40]	; (1b8c <clk_gclk0_init+0x34>)
    1b64:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    1b66:	a901      	add	r1, sp, #4
    1b68:	2206      	movs	r2, #6
    1b6a:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    1b6c:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    1b6e:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1b70:	3a05      	subs	r2, #5
    1b72:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    1b74:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1b76:	2000      	movs	r0, #0
    1b78:	4b05      	ldr	r3, [pc, #20]	; (1b90 <clk_gclk0_init+0x38>)
    1b7a:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1b7c:	2000      	movs	r0, #0
    1b7e:	4b05      	ldr	r3, [pc, #20]	; (1b94 <clk_gclk0_init+0x3c>)
    1b80:	4798      	blx	r3
    1b82:	b005      	add	sp, #20
    1b84:	bd00      	pop	{pc}
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	000015f5 	.word	0x000015f5
    1b8c:	40000400 	.word	0x40000400
    1b90:	00001619 	.word	0x00001619
    1b94:	000016e9 	.word	0x000016e9

00001b98 <sys_clk_init>:
{
    1b98:	b510      	push	{r4, lr}
	clk_osc8m_init();
    1b9a:	4b03      	ldr	r3, [pc, #12]	; (1ba8 <sys_clk_init+0x10>)
    1b9c:	4798      	blx	r3
	clk_gclk0_init();
    1b9e:	4b03      	ldr	r3, [pc, #12]	; (1bac <sys_clk_init+0x14>)
    1ba0:	4798      	blx	r3
    delay_init();
    1ba2:	4b03      	ldr	r3, [pc, #12]	; (1bb0 <sys_clk_init+0x18>)
    1ba4:	4798      	blx	r3
}
    1ba6:	bd10      	pop	{r4, pc}
    1ba8:	00001b3d 	.word	0x00001b3d
    1bac:	00001b59 	.word	0x00001b59
    1bb0:	00000435 	.word	0x00000435

00001bb4 <simSysInit>:
{
    1bb4:	b510      	push	{r4, lr}
	system_init();
    1bb6:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <simSysInit+0x14>)
    1bb8:	4798      	blx	r3
	sys_clk_init();
    1bba:	4b04      	ldr	r3, [pc, #16]	; (1bcc <simSysInit+0x18>)
    1bbc:	4798      	blx	r3
	conf_port_pin();
    1bbe:	4b04      	ldr	r3, [pc, #16]	; (1bd0 <simSysInit+0x1c>)
    1bc0:	4798      	blx	r3
	uart245_init();
    1bc2:	4b04      	ldr	r3, [pc, #16]	; (1bd4 <simSysInit+0x20>)
    1bc4:	4798      	blx	r3
}
    1bc6:	bd10      	pop	{r4, pc}
    1bc8:	0000198d 	.word	0x0000198d
    1bcc:	00001b99 	.word	0x00001b99
    1bd0:	00001a81 	.word	0x00001a81
    1bd4:	00000239 	.word	0x00000239

00001bd8 <main>:
{
    1bd8:	b500      	push	{lr}
    1bda:	b083      	sub	sp, #12
    rssi_vals acquired_rssi = {10, 20, 30};
    1bdc:	4b0b      	ldr	r3, [pc, #44]	; (1c0c <main+0x34>)
    1bde:	681a      	ldr	r2, [r3, #0]
    1be0:	9200      	str	r2, [sp, #0]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	466a      	mov	r2, sp
    1be6:	8093      	strh	r3, [r2, #4]
    simSysInit();
    1be8:	4b09      	ldr	r3, [pc, #36]	; (1c10 <main+0x38>)
    1bea:	4798      	blx	r3
    delay_ms(100);
    1bec:	2064      	movs	r0, #100	; 0x64
    1bee:	4b09      	ldr	r3, [pc, #36]	; (1c14 <main+0x3c>)
    1bf0:	4798      	blx	r3
		acquired_rssi.rssi169 = spi40_rssi();
    1bf2:	4b09      	ldr	r3, [pc, #36]	; (1c18 <main+0x40>)
    1bf4:	4798      	blx	r3
    1bf6:	b200      	sxth	r0, r0
    1bf8:	466b      	mov	r3, sp
    1bfa:	8018      	strh	r0, [r3, #0]
        acquired_rssi.rssi245 = uart245_rssi();
    1bfc:	4b07      	ldr	r3, [pc, #28]	; (1c1c <main+0x44>)
    1bfe:	4798      	blx	r3
    1c00:	466b      	mov	r3, sp
    1c02:	8098      	strh	r0, [r3, #4]
        delay_ms(100);
    1c04:	2064      	movs	r0, #100	; 0x64
    1c06:	4b03      	ldr	r3, [pc, #12]	; (1c14 <main+0x3c>)
    1c08:	4798      	blx	r3
    1c0a:	e7f2      	b.n	1bf2 <main+0x1a>
    1c0c:	00002358 	.word	0x00002358
    1c10:	00001bb5 	.word	0x00001bb5
    1c14:	00000471 	.word	0x00000471
    1c18:	0000021d 	.word	0x0000021d
    1c1c:	000003f1 	.word	0x000003f1

00001c20 <__udivsi3>:
    1c20:	2200      	movs	r2, #0
    1c22:	0843      	lsrs	r3, r0, #1
    1c24:	428b      	cmp	r3, r1
    1c26:	d374      	bcc.n	1d12 <__udivsi3+0xf2>
    1c28:	0903      	lsrs	r3, r0, #4
    1c2a:	428b      	cmp	r3, r1
    1c2c:	d35f      	bcc.n	1cee <__udivsi3+0xce>
    1c2e:	0a03      	lsrs	r3, r0, #8
    1c30:	428b      	cmp	r3, r1
    1c32:	d344      	bcc.n	1cbe <__udivsi3+0x9e>
    1c34:	0b03      	lsrs	r3, r0, #12
    1c36:	428b      	cmp	r3, r1
    1c38:	d328      	bcc.n	1c8c <__udivsi3+0x6c>
    1c3a:	0c03      	lsrs	r3, r0, #16
    1c3c:	428b      	cmp	r3, r1
    1c3e:	d30d      	bcc.n	1c5c <__udivsi3+0x3c>
    1c40:	22ff      	movs	r2, #255	; 0xff
    1c42:	0209      	lsls	r1, r1, #8
    1c44:	ba12      	rev	r2, r2
    1c46:	0c03      	lsrs	r3, r0, #16
    1c48:	428b      	cmp	r3, r1
    1c4a:	d302      	bcc.n	1c52 <__udivsi3+0x32>
    1c4c:	1212      	asrs	r2, r2, #8
    1c4e:	0209      	lsls	r1, r1, #8
    1c50:	d065      	beq.n	1d1e <__udivsi3+0xfe>
    1c52:	0b03      	lsrs	r3, r0, #12
    1c54:	428b      	cmp	r3, r1
    1c56:	d319      	bcc.n	1c8c <__udivsi3+0x6c>
    1c58:	e000      	b.n	1c5c <__udivsi3+0x3c>
    1c5a:	0a09      	lsrs	r1, r1, #8
    1c5c:	0bc3      	lsrs	r3, r0, #15
    1c5e:	428b      	cmp	r3, r1
    1c60:	d301      	bcc.n	1c66 <__udivsi3+0x46>
    1c62:	03cb      	lsls	r3, r1, #15
    1c64:	1ac0      	subs	r0, r0, r3
    1c66:	4152      	adcs	r2, r2
    1c68:	0b83      	lsrs	r3, r0, #14
    1c6a:	428b      	cmp	r3, r1
    1c6c:	d301      	bcc.n	1c72 <__udivsi3+0x52>
    1c6e:	038b      	lsls	r3, r1, #14
    1c70:	1ac0      	subs	r0, r0, r3
    1c72:	4152      	adcs	r2, r2
    1c74:	0b43      	lsrs	r3, r0, #13
    1c76:	428b      	cmp	r3, r1
    1c78:	d301      	bcc.n	1c7e <__udivsi3+0x5e>
    1c7a:	034b      	lsls	r3, r1, #13
    1c7c:	1ac0      	subs	r0, r0, r3
    1c7e:	4152      	adcs	r2, r2
    1c80:	0b03      	lsrs	r3, r0, #12
    1c82:	428b      	cmp	r3, r1
    1c84:	d301      	bcc.n	1c8a <__udivsi3+0x6a>
    1c86:	030b      	lsls	r3, r1, #12
    1c88:	1ac0      	subs	r0, r0, r3
    1c8a:	4152      	adcs	r2, r2
    1c8c:	0ac3      	lsrs	r3, r0, #11
    1c8e:	428b      	cmp	r3, r1
    1c90:	d301      	bcc.n	1c96 <__udivsi3+0x76>
    1c92:	02cb      	lsls	r3, r1, #11
    1c94:	1ac0      	subs	r0, r0, r3
    1c96:	4152      	adcs	r2, r2
    1c98:	0a83      	lsrs	r3, r0, #10
    1c9a:	428b      	cmp	r3, r1
    1c9c:	d301      	bcc.n	1ca2 <__udivsi3+0x82>
    1c9e:	028b      	lsls	r3, r1, #10
    1ca0:	1ac0      	subs	r0, r0, r3
    1ca2:	4152      	adcs	r2, r2
    1ca4:	0a43      	lsrs	r3, r0, #9
    1ca6:	428b      	cmp	r3, r1
    1ca8:	d301      	bcc.n	1cae <__udivsi3+0x8e>
    1caa:	024b      	lsls	r3, r1, #9
    1cac:	1ac0      	subs	r0, r0, r3
    1cae:	4152      	adcs	r2, r2
    1cb0:	0a03      	lsrs	r3, r0, #8
    1cb2:	428b      	cmp	r3, r1
    1cb4:	d301      	bcc.n	1cba <__udivsi3+0x9a>
    1cb6:	020b      	lsls	r3, r1, #8
    1cb8:	1ac0      	subs	r0, r0, r3
    1cba:	4152      	adcs	r2, r2
    1cbc:	d2cd      	bcs.n	1c5a <__udivsi3+0x3a>
    1cbe:	09c3      	lsrs	r3, r0, #7
    1cc0:	428b      	cmp	r3, r1
    1cc2:	d301      	bcc.n	1cc8 <__udivsi3+0xa8>
    1cc4:	01cb      	lsls	r3, r1, #7
    1cc6:	1ac0      	subs	r0, r0, r3
    1cc8:	4152      	adcs	r2, r2
    1cca:	0983      	lsrs	r3, r0, #6
    1ccc:	428b      	cmp	r3, r1
    1cce:	d301      	bcc.n	1cd4 <__udivsi3+0xb4>
    1cd0:	018b      	lsls	r3, r1, #6
    1cd2:	1ac0      	subs	r0, r0, r3
    1cd4:	4152      	adcs	r2, r2
    1cd6:	0943      	lsrs	r3, r0, #5
    1cd8:	428b      	cmp	r3, r1
    1cda:	d301      	bcc.n	1ce0 <__udivsi3+0xc0>
    1cdc:	014b      	lsls	r3, r1, #5
    1cde:	1ac0      	subs	r0, r0, r3
    1ce0:	4152      	adcs	r2, r2
    1ce2:	0903      	lsrs	r3, r0, #4
    1ce4:	428b      	cmp	r3, r1
    1ce6:	d301      	bcc.n	1cec <__udivsi3+0xcc>
    1ce8:	010b      	lsls	r3, r1, #4
    1cea:	1ac0      	subs	r0, r0, r3
    1cec:	4152      	adcs	r2, r2
    1cee:	08c3      	lsrs	r3, r0, #3
    1cf0:	428b      	cmp	r3, r1
    1cf2:	d301      	bcc.n	1cf8 <__udivsi3+0xd8>
    1cf4:	00cb      	lsls	r3, r1, #3
    1cf6:	1ac0      	subs	r0, r0, r3
    1cf8:	4152      	adcs	r2, r2
    1cfa:	0883      	lsrs	r3, r0, #2
    1cfc:	428b      	cmp	r3, r1
    1cfe:	d301      	bcc.n	1d04 <__udivsi3+0xe4>
    1d00:	008b      	lsls	r3, r1, #2
    1d02:	1ac0      	subs	r0, r0, r3
    1d04:	4152      	adcs	r2, r2
    1d06:	0843      	lsrs	r3, r0, #1
    1d08:	428b      	cmp	r3, r1
    1d0a:	d301      	bcc.n	1d10 <__udivsi3+0xf0>
    1d0c:	004b      	lsls	r3, r1, #1
    1d0e:	1ac0      	subs	r0, r0, r3
    1d10:	4152      	adcs	r2, r2
    1d12:	1a41      	subs	r1, r0, r1
    1d14:	d200      	bcs.n	1d18 <__udivsi3+0xf8>
    1d16:	4601      	mov	r1, r0
    1d18:	4152      	adcs	r2, r2
    1d1a:	4610      	mov	r0, r2
    1d1c:	4770      	bx	lr
    1d1e:	e7ff      	b.n	1d20 <__udivsi3+0x100>
    1d20:	b501      	push	{r0, lr}
    1d22:	2000      	movs	r0, #0
    1d24:	f000 f8f0 	bl	1f08 <__aeabi_idiv0>
    1d28:	bd02      	pop	{r1, pc}
    1d2a:	46c0      	nop			; (mov r8, r8)

00001d2c <__aeabi_uidivmod>:
    1d2c:	2900      	cmp	r1, #0
    1d2e:	d0f7      	beq.n	1d20 <__udivsi3+0x100>
    1d30:	e776      	b.n	1c20 <__udivsi3>
    1d32:	4770      	bx	lr

00001d34 <__divsi3>:
    1d34:	4603      	mov	r3, r0
    1d36:	430b      	orrs	r3, r1
    1d38:	d47f      	bmi.n	1e3a <__divsi3+0x106>
    1d3a:	2200      	movs	r2, #0
    1d3c:	0843      	lsrs	r3, r0, #1
    1d3e:	428b      	cmp	r3, r1
    1d40:	d374      	bcc.n	1e2c <__divsi3+0xf8>
    1d42:	0903      	lsrs	r3, r0, #4
    1d44:	428b      	cmp	r3, r1
    1d46:	d35f      	bcc.n	1e08 <__divsi3+0xd4>
    1d48:	0a03      	lsrs	r3, r0, #8
    1d4a:	428b      	cmp	r3, r1
    1d4c:	d344      	bcc.n	1dd8 <__divsi3+0xa4>
    1d4e:	0b03      	lsrs	r3, r0, #12
    1d50:	428b      	cmp	r3, r1
    1d52:	d328      	bcc.n	1da6 <__divsi3+0x72>
    1d54:	0c03      	lsrs	r3, r0, #16
    1d56:	428b      	cmp	r3, r1
    1d58:	d30d      	bcc.n	1d76 <__divsi3+0x42>
    1d5a:	22ff      	movs	r2, #255	; 0xff
    1d5c:	0209      	lsls	r1, r1, #8
    1d5e:	ba12      	rev	r2, r2
    1d60:	0c03      	lsrs	r3, r0, #16
    1d62:	428b      	cmp	r3, r1
    1d64:	d302      	bcc.n	1d6c <__divsi3+0x38>
    1d66:	1212      	asrs	r2, r2, #8
    1d68:	0209      	lsls	r1, r1, #8
    1d6a:	d065      	beq.n	1e38 <__divsi3+0x104>
    1d6c:	0b03      	lsrs	r3, r0, #12
    1d6e:	428b      	cmp	r3, r1
    1d70:	d319      	bcc.n	1da6 <__divsi3+0x72>
    1d72:	e000      	b.n	1d76 <__divsi3+0x42>
    1d74:	0a09      	lsrs	r1, r1, #8
    1d76:	0bc3      	lsrs	r3, r0, #15
    1d78:	428b      	cmp	r3, r1
    1d7a:	d301      	bcc.n	1d80 <__divsi3+0x4c>
    1d7c:	03cb      	lsls	r3, r1, #15
    1d7e:	1ac0      	subs	r0, r0, r3
    1d80:	4152      	adcs	r2, r2
    1d82:	0b83      	lsrs	r3, r0, #14
    1d84:	428b      	cmp	r3, r1
    1d86:	d301      	bcc.n	1d8c <__divsi3+0x58>
    1d88:	038b      	lsls	r3, r1, #14
    1d8a:	1ac0      	subs	r0, r0, r3
    1d8c:	4152      	adcs	r2, r2
    1d8e:	0b43      	lsrs	r3, r0, #13
    1d90:	428b      	cmp	r3, r1
    1d92:	d301      	bcc.n	1d98 <__divsi3+0x64>
    1d94:	034b      	lsls	r3, r1, #13
    1d96:	1ac0      	subs	r0, r0, r3
    1d98:	4152      	adcs	r2, r2
    1d9a:	0b03      	lsrs	r3, r0, #12
    1d9c:	428b      	cmp	r3, r1
    1d9e:	d301      	bcc.n	1da4 <__divsi3+0x70>
    1da0:	030b      	lsls	r3, r1, #12
    1da2:	1ac0      	subs	r0, r0, r3
    1da4:	4152      	adcs	r2, r2
    1da6:	0ac3      	lsrs	r3, r0, #11
    1da8:	428b      	cmp	r3, r1
    1daa:	d301      	bcc.n	1db0 <__divsi3+0x7c>
    1dac:	02cb      	lsls	r3, r1, #11
    1dae:	1ac0      	subs	r0, r0, r3
    1db0:	4152      	adcs	r2, r2
    1db2:	0a83      	lsrs	r3, r0, #10
    1db4:	428b      	cmp	r3, r1
    1db6:	d301      	bcc.n	1dbc <__divsi3+0x88>
    1db8:	028b      	lsls	r3, r1, #10
    1dba:	1ac0      	subs	r0, r0, r3
    1dbc:	4152      	adcs	r2, r2
    1dbe:	0a43      	lsrs	r3, r0, #9
    1dc0:	428b      	cmp	r3, r1
    1dc2:	d301      	bcc.n	1dc8 <__divsi3+0x94>
    1dc4:	024b      	lsls	r3, r1, #9
    1dc6:	1ac0      	subs	r0, r0, r3
    1dc8:	4152      	adcs	r2, r2
    1dca:	0a03      	lsrs	r3, r0, #8
    1dcc:	428b      	cmp	r3, r1
    1dce:	d301      	bcc.n	1dd4 <__divsi3+0xa0>
    1dd0:	020b      	lsls	r3, r1, #8
    1dd2:	1ac0      	subs	r0, r0, r3
    1dd4:	4152      	adcs	r2, r2
    1dd6:	d2cd      	bcs.n	1d74 <__divsi3+0x40>
    1dd8:	09c3      	lsrs	r3, r0, #7
    1dda:	428b      	cmp	r3, r1
    1ddc:	d301      	bcc.n	1de2 <__divsi3+0xae>
    1dde:	01cb      	lsls	r3, r1, #7
    1de0:	1ac0      	subs	r0, r0, r3
    1de2:	4152      	adcs	r2, r2
    1de4:	0983      	lsrs	r3, r0, #6
    1de6:	428b      	cmp	r3, r1
    1de8:	d301      	bcc.n	1dee <__divsi3+0xba>
    1dea:	018b      	lsls	r3, r1, #6
    1dec:	1ac0      	subs	r0, r0, r3
    1dee:	4152      	adcs	r2, r2
    1df0:	0943      	lsrs	r3, r0, #5
    1df2:	428b      	cmp	r3, r1
    1df4:	d301      	bcc.n	1dfa <__divsi3+0xc6>
    1df6:	014b      	lsls	r3, r1, #5
    1df8:	1ac0      	subs	r0, r0, r3
    1dfa:	4152      	adcs	r2, r2
    1dfc:	0903      	lsrs	r3, r0, #4
    1dfe:	428b      	cmp	r3, r1
    1e00:	d301      	bcc.n	1e06 <__divsi3+0xd2>
    1e02:	010b      	lsls	r3, r1, #4
    1e04:	1ac0      	subs	r0, r0, r3
    1e06:	4152      	adcs	r2, r2
    1e08:	08c3      	lsrs	r3, r0, #3
    1e0a:	428b      	cmp	r3, r1
    1e0c:	d301      	bcc.n	1e12 <__divsi3+0xde>
    1e0e:	00cb      	lsls	r3, r1, #3
    1e10:	1ac0      	subs	r0, r0, r3
    1e12:	4152      	adcs	r2, r2
    1e14:	0883      	lsrs	r3, r0, #2
    1e16:	428b      	cmp	r3, r1
    1e18:	d301      	bcc.n	1e1e <__divsi3+0xea>
    1e1a:	008b      	lsls	r3, r1, #2
    1e1c:	1ac0      	subs	r0, r0, r3
    1e1e:	4152      	adcs	r2, r2
    1e20:	0843      	lsrs	r3, r0, #1
    1e22:	428b      	cmp	r3, r1
    1e24:	d301      	bcc.n	1e2a <__divsi3+0xf6>
    1e26:	004b      	lsls	r3, r1, #1
    1e28:	1ac0      	subs	r0, r0, r3
    1e2a:	4152      	adcs	r2, r2
    1e2c:	1a41      	subs	r1, r0, r1
    1e2e:	d200      	bcs.n	1e32 <__divsi3+0xfe>
    1e30:	4601      	mov	r1, r0
    1e32:	4152      	adcs	r2, r2
    1e34:	4610      	mov	r0, r2
    1e36:	4770      	bx	lr
    1e38:	e05d      	b.n	1ef6 <__divsi3+0x1c2>
    1e3a:	0fca      	lsrs	r2, r1, #31
    1e3c:	d000      	beq.n	1e40 <__divsi3+0x10c>
    1e3e:	4249      	negs	r1, r1
    1e40:	1003      	asrs	r3, r0, #32
    1e42:	d300      	bcc.n	1e46 <__divsi3+0x112>
    1e44:	4240      	negs	r0, r0
    1e46:	4053      	eors	r3, r2
    1e48:	2200      	movs	r2, #0
    1e4a:	469c      	mov	ip, r3
    1e4c:	0903      	lsrs	r3, r0, #4
    1e4e:	428b      	cmp	r3, r1
    1e50:	d32d      	bcc.n	1eae <__divsi3+0x17a>
    1e52:	0a03      	lsrs	r3, r0, #8
    1e54:	428b      	cmp	r3, r1
    1e56:	d312      	bcc.n	1e7e <__divsi3+0x14a>
    1e58:	22fc      	movs	r2, #252	; 0xfc
    1e5a:	0189      	lsls	r1, r1, #6
    1e5c:	ba12      	rev	r2, r2
    1e5e:	0a03      	lsrs	r3, r0, #8
    1e60:	428b      	cmp	r3, r1
    1e62:	d30c      	bcc.n	1e7e <__divsi3+0x14a>
    1e64:	0189      	lsls	r1, r1, #6
    1e66:	1192      	asrs	r2, r2, #6
    1e68:	428b      	cmp	r3, r1
    1e6a:	d308      	bcc.n	1e7e <__divsi3+0x14a>
    1e6c:	0189      	lsls	r1, r1, #6
    1e6e:	1192      	asrs	r2, r2, #6
    1e70:	428b      	cmp	r3, r1
    1e72:	d304      	bcc.n	1e7e <__divsi3+0x14a>
    1e74:	0189      	lsls	r1, r1, #6
    1e76:	d03a      	beq.n	1eee <__divsi3+0x1ba>
    1e78:	1192      	asrs	r2, r2, #6
    1e7a:	e000      	b.n	1e7e <__divsi3+0x14a>
    1e7c:	0989      	lsrs	r1, r1, #6
    1e7e:	09c3      	lsrs	r3, r0, #7
    1e80:	428b      	cmp	r3, r1
    1e82:	d301      	bcc.n	1e88 <__divsi3+0x154>
    1e84:	01cb      	lsls	r3, r1, #7
    1e86:	1ac0      	subs	r0, r0, r3
    1e88:	4152      	adcs	r2, r2
    1e8a:	0983      	lsrs	r3, r0, #6
    1e8c:	428b      	cmp	r3, r1
    1e8e:	d301      	bcc.n	1e94 <__divsi3+0x160>
    1e90:	018b      	lsls	r3, r1, #6
    1e92:	1ac0      	subs	r0, r0, r3
    1e94:	4152      	adcs	r2, r2
    1e96:	0943      	lsrs	r3, r0, #5
    1e98:	428b      	cmp	r3, r1
    1e9a:	d301      	bcc.n	1ea0 <__divsi3+0x16c>
    1e9c:	014b      	lsls	r3, r1, #5
    1e9e:	1ac0      	subs	r0, r0, r3
    1ea0:	4152      	adcs	r2, r2
    1ea2:	0903      	lsrs	r3, r0, #4
    1ea4:	428b      	cmp	r3, r1
    1ea6:	d301      	bcc.n	1eac <__divsi3+0x178>
    1ea8:	010b      	lsls	r3, r1, #4
    1eaa:	1ac0      	subs	r0, r0, r3
    1eac:	4152      	adcs	r2, r2
    1eae:	08c3      	lsrs	r3, r0, #3
    1eb0:	428b      	cmp	r3, r1
    1eb2:	d301      	bcc.n	1eb8 <__divsi3+0x184>
    1eb4:	00cb      	lsls	r3, r1, #3
    1eb6:	1ac0      	subs	r0, r0, r3
    1eb8:	4152      	adcs	r2, r2
    1eba:	0883      	lsrs	r3, r0, #2
    1ebc:	428b      	cmp	r3, r1
    1ebe:	d301      	bcc.n	1ec4 <__divsi3+0x190>
    1ec0:	008b      	lsls	r3, r1, #2
    1ec2:	1ac0      	subs	r0, r0, r3
    1ec4:	4152      	adcs	r2, r2
    1ec6:	d2d9      	bcs.n	1e7c <__divsi3+0x148>
    1ec8:	0843      	lsrs	r3, r0, #1
    1eca:	428b      	cmp	r3, r1
    1ecc:	d301      	bcc.n	1ed2 <__divsi3+0x19e>
    1ece:	004b      	lsls	r3, r1, #1
    1ed0:	1ac0      	subs	r0, r0, r3
    1ed2:	4152      	adcs	r2, r2
    1ed4:	1a41      	subs	r1, r0, r1
    1ed6:	d200      	bcs.n	1eda <__divsi3+0x1a6>
    1ed8:	4601      	mov	r1, r0
    1eda:	4663      	mov	r3, ip
    1edc:	4152      	adcs	r2, r2
    1ede:	105b      	asrs	r3, r3, #1
    1ee0:	4610      	mov	r0, r2
    1ee2:	d301      	bcc.n	1ee8 <__divsi3+0x1b4>
    1ee4:	4240      	negs	r0, r0
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d500      	bpl.n	1eec <__divsi3+0x1b8>
    1eea:	4249      	negs	r1, r1
    1eec:	4770      	bx	lr
    1eee:	4663      	mov	r3, ip
    1ef0:	105b      	asrs	r3, r3, #1
    1ef2:	d300      	bcc.n	1ef6 <__divsi3+0x1c2>
    1ef4:	4240      	negs	r0, r0
    1ef6:	b501      	push	{r0, lr}
    1ef8:	2000      	movs	r0, #0
    1efa:	f000 f805 	bl	1f08 <__aeabi_idiv0>
    1efe:	bd02      	pop	{r1, pc}

00001f00 <__aeabi_idivmod>:
    1f00:	2900      	cmp	r1, #0
    1f02:	d0f8      	beq.n	1ef6 <__divsi3+0x1c2>
    1f04:	e716      	b.n	1d34 <__divsi3>
    1f06:	4770      	bx	lr

00001f08 <__aeabi_idiv0>:
    1f08:	4770      	bx	lr
    1f0a:	46c0      	nop			; (mov r8, r8)

00001f0c <__aeabi_lmul>:
    1f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f0e:	46ce      	mov	lr, r9
    1f10:	4647      	mov	r7, r8
    1f12:	0415      	lsls	r5, r2, #16
    1f14:	0c2d      	lsrs	r5, r5, #16
    1f16:	002e      	movs	r6, r5
    1f18:	b580      	push	{r7, lr}
    1f1a:	0407      	lsls	r7, r0, #16
    1f1c:	0c14      	lsrs	r4, r2, #16
    1f1e:	0c3f      	lsrs	r7, r7, #16
    1f20:	4699      	mov	r9, r3
    1f22:	0c03      	lsrs	r3, r0, #16
    1f24:	437e      	muls	r6, r7
    1f26:	435d      	muls	r5, r3
    1f28:	4367      	muls	r7, r4
    1f2a:	4363      	muls	r3, r4
    1f2c:	197f      	adds	r7, r7, r5
    1f2e:	0c34      	lsrs	r4, r6, #16
    1f30:	19e4      	adds	r4, r4, r7
    1f32:	469c      	mov	ip, r3
    1f34:	42a5      	cmp	r5, r4
    1f36:	d903      	bls.n	1f40 <__aeabi_lmul+0x34>
    1f38:	2380      	movs	r3, #128	; 0x80
    1f3a:	025b      	lsls	r3, r3, #9
    1f3c:	4698      	mov	r8, r3
    1f3e:	44c4      	add	ip, r8
    1f40:	464b      	mov	r3, r9
    1f42:	4351      	muls	r1, r2
    1f44:	4343      	muls	r3, r0
    1f46:	0436      	lsls	r6, r6, #16
    1f48:	0c36      	lsrs	r6, r6, #16
    1f4a:	0c25      	lsrs	r5, r4, #16
    1f4c:	0424      	lsls	r4, r4, #16
    1f4e:	4465      	add	r5, ip
    1f50:	19a4      	adds	r4, r4, r6
    1f52:	1859      	adds	r1, r3, r1
    1f54:	1949      	adds	r1, r1, r5
    1f56:	0020      	movs	r0, r4
    1f58:	bc0c      	pop	{r2, r3}
    1f5a:	4690      	mov	r8, r2
    1f5c:	4699      	mov	r9, r3
    1f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f60 <__aeabi_fmul>:
    1f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f62:	4657      	mov	r7, sl
    1f64:	464e      	mov	r6, r9
    1f66:	4645      	mov	r5, r8
    1f68:	46de      	mov	lr, fp
    1f6a:	b5e0      	push	{r5, r6, r7, lr}
    1f6c:	0247      	lsls	r7, r0, #9
    1f6e:	0046      	lsls	r6, r0, #1
    1f70:	4688      	mov	r8, r1
    1f72:	0a7f      	lsrs	r7, r7, #9
    1f74:	0e36      	lsrs	r6, r6, #24
    1f76:	0fc4      	lsrs	r4, r0, #31
    1f78:	2e00      	cmp	r6, #0
    1f7a:	d047      	beq.n	200c <STACK_SIZE+0xc>
    1f7c:	2eff      	cmp	r6, #255	; 0xff
    1f7e:	d024      	beq.n	1fca <__aeabi_fmul+0x6a>
    1f80:	00fb      	lsls	r3, r7, #3
    1f82:	2780      	movs	r7, #128	; 0x80
    1f84:	04ff      	lsls	r7, r7, #19
    1f86:	431f      	orrs	r7, r3
    1f88:	2300      	movs	r3, #0
    1f8a:	4699      	mov	r9, r3
    1f8c:	469a      	mov	sl, r3
    1f8e:	3e7f      	subs	r6, #127	; 0x7f
    1f90:	4643      	mov	r3, r8
    1f92:	025d      	lsls	r5, r3, #9
    1f94:	0058      	lsls	r0, r3, #1
    1f96:	0fdb      	lsrs	r3, r3, #31
    1f98:	0a6d      	lsrs	r5, r5, #9
    1f9a:	0e00      	lsrs	r0, r0, #24
    1f9c:	4698      	mov	r8, r3
    1f9e:	d043      	beq.n	2028 <STACK_SIZE+0x28>
    1fa0:	28ff      	cmp	r0, #255	; 0xff
    1fa2:	d03b      	beq.n	201c <STACK_SIZE+0x1c>
    1fa4:	00eb      	lsls	r3, r5, #3
    1fa6:	2580      	movs	r5, #128	; 0x80
    1fa8:	2200      	movs	r2, #0
    1faa:	04ed      	lsls	r5, r5, #19
    1fac:	431d      	orrs	r5, r3
    1fae:	387f      	subs	r0, #127	; 0x7f
    1fb0:	1836      	adds	r6, r6, r0
    1fb2:	1c73      	adds	r3, r6, #1
    1fb4:	4641      	mov	r1, r8
    1fb6:	469b      	mov	fp, r3
    1fb8:	464b      	mov	r3, r9
    1fba:	4061      	eors	r1, r4
    1fbc:	4313      	orrs	r3, r2
    1fbe:	2b0f      	cmp	r3, #15
    1fc0:	d864      	bhi.n	208c <STACK_SIZE+0x8c>
    1fc2:	4875      	ldr	r0, [pc, #468]	; (2198 <STACK_SIZE+0x198>)
    1fc4:	009b      	lsls	r3, r3, #2
    1fc6:	58c3      	ldr	r3, [r0, r3]
    1fc8:	469f      	mov	pc, r3
    1fca:	2f00      	cmp	r7, #0
    1fcc:	d142      	bne.n	2054 <STACK_SIZE+0x54>
    1fce:	2308      	movs	r3, #8
    1fd0:	4699      	mov	r9, r3
    1fd2:	3b06      	subs	r3, #6
    1fd4:	26ff      	movs	r6, #255	; 0xff
    1fd6:	469a      	mov	sl, r3
    1fd8:	e7da      	b.n	1f90 <__aeabi_fmul+0x30>
    1fda:	4641      	mov	r1, r8
    1fdc:	2a02      	cmp	r2, #2
    1fde:	d028      	beq.n	2032 <STACK_SIZE+0x32>
    1fe0:	2a03      	cmp	r2, #3
    1fe2:	d100      	bne.n	1fe6 <__aeabi_fmul+0x86>
    1fe4:	e0ce      	b.n	2184 <STACK_SIZE+0x184>
    1fe6:	2a01      	cmp	r2, #1
    1fe8:	d000      	beq.n	1fec <__aeabi_fmul+0x8c>
    1fea:	e0ac      	b.n	2146 <STACK_SIZE+0x146>
    1fec:	4011      	ands	r1, r2
    1fee:	2000      	movs	r0, #0
    1ff0:	2200      	movs	r2, #0
    1ff2:	b2cc      	uxtb	r4, r1
    1ff4:	0240      	lsls	r0, r0, #9
    1ff6:	05d2      	lsls	r2, r2, #23
    1ff8:	0a40      	lsrs	r0, r0, #9
    1ffa:	07e4      	lsls	r4, r4, #31
    1ffc:	4310      	orrs	r0, r2
    1ffe:	4320      	orrs	r0, r4
    2000:	bc3c      	pop	{r2, r3, r4, r5}
    2002:	4690      	mov	r8, r2
    2004:	4699      	mov	r9, r3
    2006:	46a2      	mov	sl, r4
    2008:	46ab      	mov	fp, r5
    200a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    200c:	2f00      	cmp	r7, #0
    200e:	d115      	bne.n	203c <STACK_SIZE+0x3c>
    2010:	2304      	movs	r3, #4
    2012:	4699      	mov	r9, r3
    2014:	3b03      	subs	r3, #3
    2016:	2600      	movs	r6, #0
    2018:	469a      	mov	sl, r3
    201a:	e7b9      	b.n	1f90 <__aeabi_fmul+0x30>
    201c:	20ff      	movs	r0, #255	; 0xff
    201e:	2202      	movs	r2, #2
    2020:	2d00      	cmp	r5, #0
    2022:	d0c5      	beq.n	1fb0 <__aeabi_fmul+0x50>
    2024:	2203      	movs	r2, #3
    2026:	e7c3      	b.n	1fb0 <__aeabi_fmul+0x50>
    2028:	2d00      	cmp	r5, #0
    202a:	d119      	bne.n	2060 <STACK_SIZE+0x60>
    202c:	2000      	movs	r0, #0
    202e:	2201      	movs	r2, #1
    2030:	e7be      	b.n	1fb0 <__aeabi_fmul+0x50>
    2032:	2401      	movs	r4, #1
    2034:	22ff      	movs	r2, #255	; 0xff
    2036:	400c      	ands	r4, r1
    2038:	2000      	movs	r0, #0
    203a:	e7db      	b.n	1ff4 <__aeabi_fmul+0x94>
    203c:	0038      	movs	r0, r7
    203e:	f000 f915 	bl	226c <__clzsi2>
    2042:	2676      	movs	r6, #118	; 0x76
    2044:	1f43      	subs	r3, r0, #5
    2046:	409f      	lsls	r7, r3
    2048:	2300      	movs	r3, #0
    204a:	4276      	negs	r6, r6
    204c:	1a36      	subs	r6, r6, r0
    204e:	4699      	mov	r9, r3
    2050:	469a      	mov	sl, r3
    2052:	e79d      	b.n	1f90 <__aeabi_fmul+0x30>
    2054:	230c      	movs	r3, #12
    2056:	4699      	mov	r9, r3
    2058:	3b09      	subs	r3, #9
    205a:	26ff      	movs	r6, #255	; 0xff
    205c:	469a      	mov	sl, r3
    205e:	e797      	b.n	1f90 <__aeabi_fmul+0x30>
    2060:	0028      	movs	r0, r5
    2062:	f000 f903 	bl	226c <__clzsi2>
    2066:	1f43      	subs	r3, r0, #5
    2068:	409d      	lsls	r5, r3
    206a:	2376      	movs	r3, #118	; 0x76
    206c:	425b      	negs	r3, r3
    206e:	1a18      	subs	r0, r3, r0
    2070:	2200      	movs	r2, #0
    2072:	e79d      	b.n	1fb0 <__aeabi_fmul+0x50>
    2074:	2080      	movs	r0, #128	; 0x80
    2076:	2400      	movs	r4, #0
    2078:	03c0      	lsls	r0, r0, #15
    207a:	22ff      	movs	r2, #255	; 0xff
    207c:	e7ba      	b.n	1ff4 <__aeabi_fmul+0x94>
    207e:	003d      	movs	r5, r7
    2080:	4652      	mov	r2, sl
    2082:	e7ab      	b.n	1fdc <__aeabi_fmul+0x7c>
    2084:	003d      	movs	r5, r7
    2086:	0021      	movs	r1, r4
    2088:	4652      	mov	r2, sl
    208a:	e7a7      	b.n	1fdc <__aeabi_fmul+0x7c>
    208c:	0c3b      	lsrs	r3, r7, #16
    208e:	469c      	mov	ip, r3
    2090:	042a      	lsls	r2, r5, #16
    2092:	0c12      	lsrs	r2, r2, #16
    2094:	0c2b      	lsrs	r3, r5, #16
    2096:	0014      	movs	r4, r2
    2098:	4660      	mov	r0, ip
    209a:	4665      	mov	r5, ip
    209c:	043f      	lsls	r7, r7, #16
    209e:	0c3f      	lsrs	r7, r7, #16
    20a0:	437c      	muls	r4, r7
    20a2:	4342      	muls	r2, r0
    20a4:	435d      	muls	r5, r3
    20a6:	437b      	muls	r3, r7
    20a8:	0c27      	lsrs	r7, r4, #16
    20aa:	189b      	adds	r3, r3, r2
    20ac:	18ff      	adds	r7, r7, r3
    20ae:	42ba      	cmp	r2, r7
    20b0:	d903      	bls.n	20ba <STACK_SIZE+0xba>
    20b2:	2380      	movs	r3, #128	; 0x80
    20b4:	025b      	lsls	r3, r3, #9
    20b6:	469c      	mov	ip, r3
    20b8:	4465      	add	r5, ip
    20ba:	0424      	lsls	r4, r4, #16
    20bc:	043a      	lsls	r2, r7, #16
    20be:	0c24      	lsrs	r4, r4, #16
    20c0:	1912      	adds	r2, r2, r4
    20c2:	0193      	lsls	r3, r2, #6
    20c4:	1e5c      	subs	r4, r3, #1
    20c6:	41a3      	sbcs	r3, r4
    20c8:	0c3f      	lsrs	r7, r7, #16
    20ca:	0e92      	lsrs	r2, r2, #26
    20cc:	197d      	adds	r5, r7, r5
    20ce:	431a      	orrs	r2, r3
    20d0:	01ad      	lsls	r5, r5, #6
    20d2:	4315      	orrs	r5, r2
    20d4:	012b      	lsls	r3, r5, #4
    20d6:	d504      	bpl.n	20e2 <STACK_SIZE+0xe2>
    20d8:	2301      	movs	r3, #1
    20da:	465e      	mov	r6, fp
    20dc:	086a      	lsrs	r2, r5, #1
    20de:	401d      	ands	r5, r3
    20e0:	4315      	orrs	r5, r2
    20e2:	0032      	movs	r2, r6
    20e4:	327f      	adds	r2, #127	; 0x7f
    20e6:	2a00      	cmp	r2, #0
    20e8:	dd25      	ble.n	2136 <STACK_SIZE+0x136>
    20ea:	076b      	lsls	r3, r5, #29
    20ec:	d004      	beq.n	20f8 <STACK_SIZE+0xf8>
    20ee:	230f      	movs	r3, #15
    20f0:	402b      	ands	r3, r5
    20f2:	2b04      	cmp	r3, #4
    20f4:	d000      	beq.n	20f8 <STACK_SIZE+0xf8>
    20f6:	3504      	adds	r5, #4
    20f8:	012b      	lsls	r3, r5, #4
    20fa:	d503      	bpl.n	2104 <STACK_SIZE+0x104>
    20fc:	0032      	movs	r2, r6
    20fe:	4b27      	ldr	r3, [pc, #156]	; (219c <STACK_SIZE+0x19c>)
    2100:	3280      	adds	r2, #128	; 0x80
    2102:	401d      	ands	r5, r3
    2104:	2afe      	cmp	r2, #254	; 0xfe
    2106:	dc94      	bgt.n	2032 <STACK_SIZE+0x32>
    2108:	2401      	movs	r4, #1
    210a:	01a8      	lsls	r0, r5, #6
    210c:	0a40      	lsrs	r0, r0, #9
    210e:	b2d2      	uxtb	r2, r2
    2110:	400c      	ands	r4, r1
    2112:	e76f      	b.n	1ff4 <__aeabi_fmul+0x94>
    2114:	2080      	movs	r0, #128	; 0x80
    2116:	03c0      	lsls	r0, r0, #15
    2118:	4207      	tst	r7, r0
    211a:	d007      	beq.n	212c <STACK_SIZE+0x12c>
    211c:	4205      	tst	r5, r0
    211e:	d105      	bne.n	212c <STACK_SIZE+0x12c>
    2120:	4328      	orrs	r0, r5
    2122:	0240      	lsls	r0, r0, #9
    2124:	0a40      	lsrs	r0, r0, #9
    2126:	4644      	mov	r4, r8
    2128:	22ff      	movs	r2, #255	; 0xff
    212a:	e763      	b.n	1ff4 <__aeabi_fmul+0x94>
    212c:	4338      	orrs	r0, r7
    212e:	0240      	lsls	r0, r0, #9
    2130:	0a40      	lsrs	r0, r0, #9
    2132:	22ff      	movs	r2, #255	; 0xff
    2134:	e75e      	b.n	1ff4 <__aeabi_fmul+0x94>
    2136:	2401      	movs	r4, #1
    2138:	1aa3      	subs	r3, r4, r2
    213a:	2b1b      	cmp	r3, #27
    213c:	dd05      	ble.n	214a <STACK_SIZE+0x14a>
    213e:	400c      	ands	r4, r1
    2140:	2200      	movs	r2, #0
    2142:	2000      	movs	r0, #0
    2144:	e756      	b.n	1ff4 <__aeabi_fmul+0x94>
    2146:	465e      	mov	r6, fp
    2148:	e7cb      	b.n	20e2 <STACK_SIZE+0xe2>
    214a:	002a      	movs	r2, r5
    214c:	2020      	movs	r0, #32
    214e:	40da      	lsrs	r2, r3
    2150:	1ac3      	subs	r3, r0, r3
    2152:	409d      	lsls	r5, r3
    2154:	002b      	movs	r3, r5
    2156:	1e5d      	subs	r5, r3, #1
    2158:	41ab      	sbcs	r3, r5
    215a:	4313      	orrs	r3, r2
    215c:	075a      	lsls	r2, r3, #29
    215e:	d004      	beq.n	216a <STACK_SIZE+0x16a>
    2160:	220f      	movs	r2, #15
    2162:	401a      	ands	r2, r3
    2164:	2a04      	cmp	r2, #4
    2166:	d000      	beq.n	216a <STACK_SIZE+0x16a>
    2168:	3304      	adds	r3, #4
    216a:	015a      	lsls	r2, r3, #5
    216c:	d504      	bpl.n	2178 <STACK_SIZE+0x178>
    216e:	2401      	movs	r4, #1
    2170:	2201      	movs	r2, #1
    2172:	400c      	ands	r4, r1
    2174:	2000      	movs	r0, #0
    2176:	e73d      	b.n	1ff4 <__aeabi_fmul+0x94>
    2178:	2401      	movs	r4, #1
    217a:	019b      	lsls	r3, r3, #6
    217c:	0a58      	lsrs	r0, r3, #9
    217e:	400c      	ands	r4, r1
    2180:	2200      	movs	r2, #0
    2182:	e737      	b.n	1ff4 <__aeabi_fmul+0x94>
    2184:	2080      	movs	r0, #128	; 0x80
    2186:	2401      	movs	r4, #1
    2188:	03c0      	lsls	r0, r0, #15
    218a:	4328      	orrs	r0, r5
    218c:	0240      	lsls	r0, r0, #9
    218e:	0a40      	lsrs	r0, r0, #9
    2190:	400c      	ands	r4, r1
    2192:	22ff      	movs	r2, #255	; 0xff
    2194:	e72e      	b.n	1ff4 <__aeabi_fmul+0x94>
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	00002360 	.word	0x00002360
    219c:	f7ffffff 	.word	0xf7ffffff

000021a0 <__aeabi_f2iz>:
    21a0:	0241      	lsls	r1, r0, #9
    21a2:	0043      	lsls	r3, r0, #1
    21a4:	0fc2      	lsrs	r2, r0, #31
    21a6:	0a49      	lsrs	r1, r1, #9
    21a8:	0e1b      	lsrs	r3, r3, #24
    21aa:	2000      	movs	r0, #0
    21ac:	2b7e      	cmp	r3, #126	; 0x7e
    21ae:	dd0d      	ble.n	21cc <__aeabi_f2iz+0x2c>
    21b0:	2b9d      	cmp	r3, #157	; 0x9d
    21b2:	dc0c      	bgt.n	21ce <__aeabi_f2iz+0x2e>
    21b4:	2080      	movs	r0, #128	; 0x80
    21b6:	0400      	lsls	r0, r0, #16
    21b8:	4301      	orrs	r1, r0
    21ba:	2b95      	cmp	r3, #149	; 0x95
    21bc:	dc0a      	bgt.n	21d4 <__aeabi_f2iz+0x34>
    21be:	2096      	movs	r0, #150	; 0x96
    21c0:	1ac3      	subs	r3, r0, r3
    21c2:	40d9      	lsrs	r1, r3
    21c4:	4248      	negs	r0, r1
    21c6:	2a00      	cmp	r2, #0
    21c8:	d100      	bne.n	21cc <__aeabi_f2iz+0x2c>
    21ca:	0008      	movs	r0, r1
    21cc:	4770      	bx	lr
    21ce:	4b03      	ldr	r3, [pc, #12]	; (21dc <__aeabi_f2iz+0x3c>)
    21d0:	18d0      	adds	r0, r2, r3
    21d2:	e7fb      	b.n	21cc <__aeabi_f2iz+0x2c>
    21d4:	3b96      	subs	r3, #150	; 0x96
    21d6:	4099      	lsls	r1, r3
    21d8:	e7f4      	b.n	21c4 <__aeabi_f2iz+0x24>
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	7fffffff 	.word	0x7fffffff

000021e0 <__aeabi_ui2f>:
    21e0:	b510      	push	{r4, lr}
    21e2:	1e04      	subs	r4, r0, #0
    21e4:	d027      	beq.n	2236 <__aeabi_ui2f+0x56>
    21e6:	f000 f841 	bl	226c <__clzsi2>
    21ea:	239e      	movs	r3, #158	; 0x9e
    21ec:	1a1b      	subs	r3, r3, r0
    21ee:	2b96      	cmp	r3, #150	; 0x96
    21f0:	dc0a      	bgt.n	2208 <__aeabi_ui2f+0x28>
    21f2:	2296      	movs	r2, #150	; 0x96
    21f4:	1ad2      	subs	r2, r2, r3
    21f6:	4094      	lsls	r4, r2
    21f8:	0264      	lsls	r4, r4, #9
    21fa:	0a64      	lsrs	r4, r4, #9
    21fc:	b2db      	uxtb	r3, r3
    21fe:	0264      	lsls	r4, r4, #9
    2200:	05db      	lsls	r3, r3, #23
    2202:	0a60      	lsrs	r0, r4, #9
    2204:	4318      	orrs	r0, r3
    2206:	bd10      	pop	{r4, pc}
    2208:	2b99      	cmp	r3, #153	; 0x99
    220a:	dc17      	bgt.n	223c <__aeabi_ui2f+0x5c>
    220c:	2299      	movs	r2, #153	; 0x99
    220e:	1ad2      	subs	r2, r2, r3
    2210:	2a00      	cmp	r2, #0
    2212:	dd27      	ble.n	2264 <__aeabi_ui2f+0x84>
    2214:	4094      	lsls	r4, r2
    2216:	0022      	movs	r2, r4
    2218:	4c13      	ldr	r4, [pc, #76]	; (2268 <__aeabi_ui2f+0x88>)
    221a:	4014      	ands	r4, r2
    221c:	0751      	lsls	r1, r2, #29
    221e:	d004      	beq.n	222a <__aeabi_ui2f+0x4a>
    2220:	210f      	movs	r1, #15
    2222:	400a      	ands	r2, r1
    2224:	2a04      	cmp	r2, #4
    2226:	d000      	beq.n	222a <__aeabi_ui2f+0x4a>
    2228:	3404      	adds	r4, #4
    222a:	0162      	lsls	r2, r4, #5
    222c:	d412      	bmi.n	2254 <__aeabi_ui2f+0x74>
    222e:	01a4      	lsls	r4, r4, #6
    2230:	0a64      	lsrs	r4, r4, #9
    2232:	b2db      	uxtb	r3, r3
    2234:	e7e3      	b.n	21fe <__aeabi_ui2f+0x1e>
    2236:	2300      	movs	r3, #0
    2238:	2400      	movs	r4, #0
    223a:	e7e0      	b.n	21fe <__aeabi_ui2f+0x1e>
    223c:	22b9      	movs	r2, #185	; 0xb9
    223e:	0021      	movs	r1, r4
    2240:	1ad2      	subs	r2, r2, r3
    2242:	4091      	lsls	r1, r2
    2244:	000a      	movs	r2, r1
    2246:	1e51      	subs	r1, r2, #1
    2248:	418a      	sbcs	r2, r1
    224a:	2105      	movs	r1, #5
    224c:	1a09      	subs	r1, r1, r0
    224e:	40cc      	lsrs	r4, r1
    2250:	4314      	orrs	r4, r2
    2252:	e7db      	b.n	220c <__aeabi_ui2f+0x2c>
    2254:	4b04      	ldr	r3, [pc, #16]	; (2268 <__aeabi_ui2f+0x88>)
    2256:	401c      	ands	r4, r3
    2258:	239f      	movs	r3, #159	; 0x9f
    225a:	01a4      	lsls	r4, r4, #6
    225c:	1a1b      	subs	r3, r3, r0
    225e:	0a64      	lsrs	r4, r4, #9
    2260:	b2db      	uxtb	r3, r3
    2262:	e7cc      	b.n	21fe <__aeabi_ui2f+0x1e>
    2264:	0022      	movs	r2, r4
    2266:	e7d7      	b.n	2218 <__aeabi_ui2f+0x38>
    2268:	fbffffff 	.word	0xfbffffff

0000226c <__clzsi2>:
    226c:	211c      	movs	r1, #28
    226e:	2301      	movs	r3, #1
    2270:	041b      	lsls	r3, r3, #16
    2272:	4298      	cmp	r0, r3
    2274:	d301      	bcc.n	227a <__clzsi2+0xe>
    2276:	0c00      	lsrs	r0, r0, #16
    2278:	3910      	subs	r1, #16
    227a:	0a1b      	lsrs	r3, r3, #8
    227c:	4298      	cmp	r0, r3
    227e:	d301      	bcc.n	2284 <__clzsi2+0x18>
    2280:	0a00      	lsrs	r0, r0, #8
    2282:	3908      	subs	r1, #8
    2284:	091b      	lsrs	r3, r3, #4
    2286:	4298      	cmp	r0, r3
    2288:	d301      	bcc.n	228e <__clzsi2+0x22>
    228a:	0900      	lsrs	r0, r0, #4
    228c:	3904      	subs	r1, #4
    228e:	a202      	add	r2, pc, #8	; (adr r2, 2298 <__clzsi2+0x2c>)
    2290:	5c10      	ldrb	r0, [r2, r0]
    2292:	1840      	adds	r0, r0, r1
    2294:	4770      	bx	lr
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	02020304 	.word	0x02020304
    229c:	01010101 	.word	0x01010101
	...

000022a8 <__libc_init_array>:
    22a8:	b570      	push	{r4, r5, r6, lr}
    22aa:	2600      	movs	r6, #0
    22ac:	4d0c      	ldr	r5, [pc, #48]	; (22e0 <__libc_init_array+0x38>)
    22ae:	4c0d      	ldr	r4, [pc, #52]	; (22e4 <__libc_init_array+0x3c>)
    22b0:	1b64      	subs	r4, r4, r5
    22b2:	10a4      	asrs	r4, r4, #2
    22b4:	42a6      	cmp	r6, r4
    22b6:	d109      	bne.n	22cc <__libc_init_array+0x24>
    22b8:	2600      	movs	r6, #0
    22ba:	f000 f871 	bl	23a0 <_init>
    22be:	4d0a      	ldr	r5, [pc, #40]	; (22e8 <__libc_init_array+0x40>)
    22c0:	4c0a      	ldr	r4, [pc, #40]	; (22ec <__libc_init_array+0x44>)
    22c2:	1b64      	subs	r4, r4, r5
    22c4:	10a4      	asrs	r4, r4, #2
    22c6:	42a6      	cmp	r6, r4
    22c8:	d105      	bne.n	22d6 <__libc_init_array+0x2e>
    22ca:	bd70      	pop	{r4, r5, r6, pc}
    22cc:	00b3      	lsls	r3, r6, #2
    22ce:	58eb      	ldr	r3, [r5, r3]
    22d0:	4798      	blx	r3
    22d2:	3601      	adds	r6, #1
    22d4:	e7ee      	b.n	22b4 <__libc_init_array+0xc>
    22d6:	00b3      	lsls	r3, r6, #2
    22d8:	58eb      	ldr	r3, [r5, r3]
    22da:	4798      	blx	r3
    22dc:	3601      	adds	r6, #1
    22de:	e7f2      	b.n	22c6 <__libc_init_array+0x1e>
    22e0:	000023ac 	.word	0x000023ac
    22e4:	000023ac 	.word	0x000023ac
    22e8:	000023ac 	.word	0x000023ac
    22ec:	000023b0 	.word	0x000023b0
    22f0:	42000800 	.word	0x42000800
    22f4:	42000c00 	.word	0x42000c00
    22f8:	42001000 	.word	0x42001000
    22fc:	42001400 	.word	0x42001400
    2300:	42001800 	.word	0x42001800
    2304:	42001c00 	.word	0x42001c00
    2308:	0c0b0a09 	.word	0x0c0b0a09
    230c:	00000e0d 	.word	0x00000e0d
    2310:	0000140c 	.word	0x0000140c
    2314:	00001464 	.word	0x00001464
    2318:	00001464 	.word	0x00001464
    231c:	00001406 	.word	0x00001406
    2320:	00001406 	.word	0x00001406
    2324:	00001420 	.word	0x00001420
    2328:	00001412 	.word	0x00001412
    232c:	00001426 	.word	0x00001426
    2330:	00001454 	.word	0x00001454
    2334:	000014f0 	.word	0x000014f0
    2338:	0000155e 	.word	0x0000155e
    233c:	0000155e 	.word	0x0000155e
    2340:	000014d0 	.word	0x000014d0
    2344:	000014e2 	.word	0x000014e2
    2348:	00001500 	.word	0x00001500
    234c:	000014d4 	.word	0x000014d4
    2350:	00001510 	.word	0x00001510
    2354:	0000154c 	.word	0x0000154c
    2358:	0014000a 	.word	0x0014000a
    235c:	0000001e 	.word	0x0000001e
    2360:	0000208c 	.word	0x0000208c
    2364:	00001fdc 	.word	0x00001fdc
    2368:	00001fdc 	.word	0x00001fdc
    236c:	00001fda 	.word	0x00001fda
    2370:	0000207e 	.word	0x0000207e
    2374:	0000207e 	.word	0x0000207e
    2378:	00002074 	.word	0x00002074
    237c:	00001fda 	.word	0x00001fda
    2380:	0000207e 	.word	0x0000207e
    2384:	00002074 	.word	0x00002074
    2388:	0000207e 	.word	0x0000207e
    238c:	00001fda 	.word	0x00001fda
    2390:	00002084 	.word	0x00002084
    2394:	00002084 	.word	0x00002084
    2398:	00002084 	.word	0x00002084
    239c:	00002114 	.word	0x00002114

000023a0 <_init>:
    23a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    23a6:	bc08      	pop	{r3}
    23a8:	469e      	mov	lr, r3
    23aa:	4770      	bx	lr

000023ac <__init_array_start>:
    23ac:	000000dd 	.word	0x000000dd

000023b0 <_fini>:
    23b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    23b6:	bc08      	pop	{r3}
    23b8:	469e      	mov	lr, r3
    23ba:	4770      	bx	lr

000023bc <__fini_array_start>:
    23bc:	000000b5 	.word	0x000000b5
