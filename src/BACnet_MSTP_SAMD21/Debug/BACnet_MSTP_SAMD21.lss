
BACnet_MSTP_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057d0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  000057d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000096c  20000074  00005844  00020074  2**2
                  ALLOC
  3 .stack        00002000  200009e0  000061b0  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005ceed  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000078e4  00000000  00000000  0007cfe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000fcc1  00000000  00000000  000848c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000fb8  00000000  00000000  00094587  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001588  00000000  00000000  0009553f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000219df  00000000  00000000  00096ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001cc50  00000000  00000000  000b84a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000954ac  00000000  00000000  000d50f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d40  00000000  00000000  0016a5a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *
 * @brief  Updates the SystemCoreClock with current core Clock
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
       0:	e0 29 00 20 e1 45 00 00 dd 45 00 00 dd 45 00 00     .). .E...E...E..
	...
      2c:	dd 45 00 00 00 00 00 00 00 00 00 00 dd 45 00 00     .E...........E..
      3c:	a5 34 00 00 dd 45 00 00 dd 45 00 00 85 37 00 00     .4...E...E...7..
      4c:	dd 45 00 00 a1 02 00 00 dd 45 00 00 dd 45 00 00     .E.......E...E..
      5c:	dd 45 00 00 dd 45 00 00 ed 3d 00 00 fd 3d 00 00     .E...E...=...=..
      6c:	0d 3e 00 00 1d 3e 00 00 2d 3e 00 00 3d 3e 00 00     .>...>..->..=>..
      7c:	dd 45 00 00 dd 45 00 00 dd 45 00 00 05 38 00 00     .E...E...E...8..
      8c:	15 38 00 00 25 38 00 00 35 38 00 00 45 38 00 00     .8..%8..58..E8..
      9c:	65 02 00 00 dd 45 00 00 dd 45 00 00 dd 45 00 00     e....E...E...E..
      ac:	dd 45 00 00 00 00 00 00                             .E......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	000057d0 	.word	0x000057d0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	000057d0 	.word	0x000057d0
     10c:	000057d0 	.word	0x000057d0
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00004311 	.word	0x00004311
     140:	00004aed 	.word	0x00004aed
     144:	20000000 	.word	0x20000000
     148:	20000004 	.word	0x20000004
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     150:	e000      	b.n	154 <delay_cycles_ms+0x4>
{
     152:	0010      	movs	r0, r2
	while (n--) {
     154:	1e42      	subs	r2, r0, #1
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     15a:	4b07      	ldr	r3, [pc, #28]	; (178 <delay_cycles_ms+0x28>)
     15c:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15e:	2b00      	cmp	r3, #0
     160:	d0f7      	beq.n	152 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     162:	4906      	ldr	r1, [pc, #24]	; (17c <delay_cycles_ms+0x2c>)
     164:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     166:	2300      	movs	r3, #0
     168:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <delay_cycles_ms+0x2c>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	03db      	lsls	r3, r3, #15
     170:	d5fb      	bpl.n	16a <delay_cycles_ms+0x1a>
     172:	e7ee      	b.n	152 <delay_cycles_ms+0x2>
	}
}
     174:	4770      	bx	lr
     176:	46c0      	nop			; (mov r8, r8)
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     180:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     182:	0080      	lsls	r0, r0, #2
     184:	4b36      	ldr	r3, [pc, #216]	; (260 <_adc_interrupt_handler+0xe0>)
     186:	58c5      	ldr	r5, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     188:	682b      	ldr	r3, [r5, #0]
     18a:	7e1a      	ldrb	r2, [r3, #24]
     18c:	7ddc      	ldrb	r4, [r3, #23]
     18e:	4014      	ands	r4, r2

	if (flags & ADC_INTFLAG_RESRDY) {
     190:	07e2      	lsls	r2, r4, #31
     192:	d416      	bmi.n	1c2 <_adc_interrupt_handler+0x42>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     194:	0763      	lsls	r3, r4, #29
     196:	d508      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     198:	2304      	movs	r3, #4
     19a:	682a      	ldr	r2, [r5, #0]
     19c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     19e:	7eeb      	ldrb	r3, [r5, #27]
     1a0:	079b      	lsls	r3, r3, #30
     1a2:	d502      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     1a4:	7eab      	ldrb	r3, [r5, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     1a6:	079b      	lsls	r3, r3, #30
     1a8:	d452      	bmi.n	250 <_adc_interrupt_handler+0xd0>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     1aa:	07a3      	lsls	r3, r4, #30
     1ac:	d508      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     1ae:	2302      	movs	r3, #2
     1b0:	682a      	ldr	r2, [r5, #0]
     1b2:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1b4:	7eeb      	ldrb	r3, [r5, #27]
     1b6:	075b      	lsls	r3, r3, #29
     1b8:	d502      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     1ba:	7eab      	ldrb	r3, [r5, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1bc:	075b      	lsls	r3, r3, #29
     1be:	d44b      	bmi.n	258 <_adc_interrupt_handler+0xd8>
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     1c0:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1c2:	2201      	movs	r2, #1
     1c4:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1c6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1c8:	7e53      	ldrb	r3, [r2, #25]
     1ca:	b25b      	sxtb	r3, r3
     1cc:	2b00      	cmp	r3, #0
     1ce:	db27      	blt.n	220 <_adc_interrupt_handler+0xa0>
		return true;
	}

	return false;
     1d0:	2100      	movs	r1, #0
		while (adc_is_syncing(module)) {
     1d2:	2900      	cmp	r1, #0
     1d4:	d1f7      	bne.n	1c6 <_adc_interrupt_handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     1d6:	6968      	ldr	r0, [r5, #20]
     1d8:	1c83      	adds	r3, r0, #2
     1da:	616b      	str	r3, [r5, #20]
     1dc:	8b53      	ldrh	r3, [r2, #26]
     1de:	b29b      	uxth	r3, r3
     1e0:	8003      	strh	r3, [r0, #0]
		if (--module->remaining_conversions > 0) {
     1e2:	8b2b      	ldrh	r3, [r5, #24]
     1e4:	3b01      	subs	r3, #1
     1e6:	b29b      	uxth	r3, r3
     1e8:	832b      	strh	r3, [r5, #24]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d01e      	beq.n	22c <_adc_interrupt_handler+0xac>
			if (module->software_trigger == true) {
     1ee:	7f6b      	ldrb	r3, [r5, #29]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d0cf      	beq.n	194 <_adc_interrupt_handler+0x14>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     1f4:	682e      	ldr	r6, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1f6:	7e72      	ldrb	r2, [r6, #25]
     1f8:	b252      	sxtb	r2, r2
     1fa:	2a00      	cmp	r2, #0
     1fc:	db12      	blt.n	224 <_adc_interrupt_handler+0xa4>
	return false;
     1fe:	0008      	movs	r0, r1

	while (adc_is_syncing(module_inst)) {
     200:	2800      	cmp	r0, #0
     202:	d1f8      	bne.n	1f6 <_adc_interrupt_handler+0x76>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     204:	7b32      	ldrb	r2, [r6, #12]
     206:	2102      	movs	r1, #2
     208:	430a      	orrs	r2, r1
     20a:	b2d2      	uxtb	r2, r2
     20c:	7332      	strb	r2, [r6, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     20e:	682a      	ldr	r2, [r5, #0]
     210:	7e52      	ldrb	r2, [r2, #25]
     212:	b252      	sxtb	r2, r2
     214:	2a00      	cmp	r2, #0
     216:	db07      	blt.n	228 <_adc_interrupt_handler+0xa8>
	return false;
     218:	0002      	movs	r2, r0

	while (adc_is_syncing(module_inst)) {
     21a:	2a00      	cmp	r2, #0
     21c:	d1f7      	bne.n	20e <_adc_interrupt_handler+0x8e>
     21e:	e7b9      	b.n	194 <_adc_interrupt_handler+0x14>
		return true;
     220:	2101      	movs	r1, #1
     222:	e7d6      	b.n	1d2 <_adc_interrupt_handler+0x52>
     224:	0018      	movs	r0, r3
     226:	e7eb      	b.n	200 <_adc_interrupt_handler+0x80>
     228:	001a      	movs	r2, r3
     22a:	e7f6      	b.n	21a <_adc_interrupt_handler+0x9a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     22c:	2301      	movs	r3, #1
     22e:	682a      	ldr	r2, [r5, #0]
     230:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     232:	7f2b      	ldrb	r3, [r5, #28]
     234:	2b05      	cmp	r3, #5
     236:	d1ad      	bne.n	194 <_adc_interrupt_handler+0x14>
				module->job_status = STATUS_OK;
     238:	2300      	movs	r3, #0
     23a:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     23c:	7eeb      	ldrb	r3, [r5, #27]
     23e:	07db      	lsls	r3, r3, #31
     240:	d5a8      	bpl.n	194 <_adc_interrupt_handler+0x14>
					(module->registered_callback_mask &
     242:	7eab      	ldrb	r3, [r5, #26]
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     244:	07db      	lsls	r3, r3, #31
     246:	d5a5      	bpl.n	194 <_adc_interrupt_handler+0x14>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     248:	0028      	movs	r0, r5
     24a:	68ab      	ldr	r3, [r5, #8]
     24c:	4798      	blx	r3
     24e:	e7a1      	b.n	194 <_adc_interrupt_handler+0x14>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     250:	0028      	movs	r0, r5
     252:	68eb      	ldr	r3, [r5, #12]
     254:	4798      	blx	r3
     256:	e7a8      	b.n	1aa <_adc_interrupt_handler+0x2a>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     258:	692b      	ldr	r3, [r5, #16]
     25a:	0028      	movs	r0, r5
     25c:	4798      	blx	r3
}
     25e:	e7af      	b.n	1c0 <_adc_interrupt_handler+0x40>
     260:	200003a0 	.word	0x200003a0

00000264 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     264:	b510      	push	{r4, lr}
	_adc_interrupt_handler(0);
     266:	2000      	movs	r0, #0
     268:	4b01      	ldr	r3, [pc, #4]	; (270 <ADC_Handler+0xc>)
     26a:	4798      	blx	r3
}
     26c:	bd10      	pop	{r4, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00000181 	.word	0x00000181

00000274 <extint_register_callback>:
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     274:	2a00      	cmp	r2, #0
     276:	d001      	beq.n	27c <extint_register_callback+0x8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     278:	2017      	movs	r0, #23
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     27a:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     27c:	008b      	lsls	r3, r1, #2
     27e:	4a07      	ldr	r2, [pc, #28]	; (29c <extint_register_callback+0x28>)
     280:	589b      	ldr	r3, [r3, r2]
     282:	2b00      	cmp	r3, #0
     284:	d003      	beq.n	28e <extint_register_callback+0x1a>
	} else if (_extint_dev.callbacks[channel] == callback) {
     286:	4283      	cmp	r3, r0
     288:	d005      	beq.n	296 <extint_register_callback+0x22>
	return STATUS_ERR_ALREADY_INITIALIZED;
     28a:	201d      	movs	r0, #29
     28c:	e7f5      	b.n	27a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     28e:	0089      	lsls	r1, r1, #2
     290:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     292:	2000      	movs	r0, #0
     294:	e7f1      	b.n	27a <extint_register_callback+0x6>
		return STATUS_OK;
     296:	2000      	movs	r0, #0
     298:	e7ef      	b.n	27a <extint_register_callback+0x6>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	200003a8 	.word	0x200003a8

000002a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2a0:	b510      	push	{r4, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2a2:	2200      	movs	r2, #0
     2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <EIC_Handler+0x44>)
     2a6:	701a      	strb	r2, [r3, #0]
     2a8:	e005      	b.n	2b6 <EIC_Handler+0x16>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2aa:	480f      	ldr	r0, [pc, #60]	; (2e8 <EIC_Handler+0x48>)
     2ac:	e00a      	b.n	2c4 <EIC_Handler+0x24>
     2ae:	4a0d      	ldr	r2, [pc, #52]	; (2e4 <EIC_Handler+0x44>)
     2b0:	7813      	ldrb	r3, [r2, #0]
     2b2:	3301      	adds	r3, #1
     2b4:	7013      	strb	r3, [r2, #0]
     2b6:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <EIC_Handler+0x44>)
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b0f      	cmp	r3, #15
     2bc:	d811      	bhi.n	2e2 <EIC_Handler+0x42>
	if (eic_index < EIC_INST_NUM) {
     2be:	2b1f      	cmp	r3, #31
     2c0:	d9f3      	bls.n	2aa <EIC_Handler+0xa>
	} else {
		Assert(false);
		return NULL;
     2c2:	2000      	movs	r0, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2c4:	211f      	movs	r1, #31
     2c6:	4019      	ands	r1, r3
     2c8:	2201      	movs	r2, #1
     2ca:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     2cc:	6901      	ldr	r1, [r0, #16]
		if (extint_chan_is_detected(_current_channel)) {
     2ce:	4211      	tst	r1, r2
     2d0:	d0ed      	beq.n	2ae <EIC_Handler+0xe>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     2d2:	6102      	str	r2, [r0, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2d4:	009b      	lsls	r3, r3, #2
     2d6:	4a05      	ldr	r2, [pc, #20]	; (2ec <EIC_Handler+0x4c>)
     2d8:	589b      	ldr	r3, [r3, r2]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e7      	beq.n	2ae <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2de:	4798      	blx	r3
     2e0:	e7e5      	b.n	2ae <EIC_Handler+0xe>
			}
		}
	}
}
     2e2:	bd10      	pop	{r4, pc}
     2e4:	200003a4 	.word	0x200003a4
     2e8:	40001800 	.word	0x40001800
     2ec:	200003a8 	.word	0x200003a8

000002f0 <_extint_enable>:
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2f0:	2200      	movs	r2, #0
     2f2:	2a00      	cmp	r2, #0
     2f4:	d006      	beq.n	304 <_extint_enable+0x14>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2f6:	2300      	movs	r3, #0
     2f8:	2b00      	cmp	r3, #0
     2fa:	d00b      	beq.n	314 <_extint_enable+0x24>
	return false;
     2fc:	2300      	movs	r3, #0
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     2fe:	2b00      	cmp	r3, #0
     300:	d1f9      	bne.n	2f6 <_extint_enable+0x6>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     302:	4770      	bx	lr
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     304:	4908      	ldr	r1, [pc, #32]	; (328 <_extint_enable+0x38>)
     306:	780b      	ldrb	r3, [r1, #0]
     308:	2002      	movs	r0, #2
     30a:	4303      	orrs	r3, r0
     30c:	b2db      	uxtb	r3, r3
     30e:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     310:	3201      	adds	r2, #1
     312:	e7ee      	b.n	2f2 <_extint_enable+0x2>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     314:	4a04      	ldr	r2, [pc, #16]	; (328 <_extint_enable+0x38>)
     316:	7852      	ldrb	r2, [r2, #1]
     318:	b252      	sxtb	r2, r2
     31a:	2a00      	cmp	r2, #0
     31c:	db01      	blt.n	322 <_extint_enable+0x32>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     31e:	3301      	adds	r3, #1
     320:	e7ea      	b.n	2f8 <_extint_enable+0x8>
			return true;
     322:	2301      	movs	r3, #1
     324:	e7eb      	b.n	2fe <_extint_enable+0xe>
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <_system_extint_init>:
{
     32c:	b500      	push	{lr}
     32e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     330:	4a1b      	ldr	r2, [pc, #108]	; (3a0 <_system_extint_init+0x74>)
     332:	6993      	ldr	r3, [r2, #24]
     334:	2140      	movs	r1, #64	; 0x40
     336:	430b      	orrs	r3, r1
     338:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     340:	2005      	movs	r0, #5
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <_system_extint_init+0x78>)
     344:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     346:	2005      	movs	r0, #5
     348:	4b17      	ldr	r3, [pc, #92]	; (3a8 <_system_extint_init+0x7c>)
     34a:	4798      	blx	r3
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     34c:	2200      	movs	r2, #0
     34e:	2a00      	cmp	r2, #0
     350:	d006      	beq.n	360 <_system_extint_init+0x34>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     352:	2300      	movs	r3, #0
     354:	2b00      	cmp	r3, #0
     356:	d00b      	beq.n	370 <_system_extint_init+0x44>
	return false;
     358:	2300      	movs	r3, #0
	while (extint_is_syncing()) {
     35a:	2b00      	cmp	r3, #0
     35c:	d1f9      	bne.n	352 <_system_extint_init+0x26>
     35e:	e016      	b.n	38e <_system_extint_init+0x62>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     360:	4912      	ldr	r1, [pc, #72]	; (3ac <_system_extint_init+0x80>)
     362:	780b      	ldrb	r3, [r1, #0]
     364:	2001      	movs	r0, #1
     366:	4303      	orrs	r3, r0
     368:	b2db      	uxtb	r3, r3
     36a:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     36c:	3201      	adds	r2, #1
     36e:	e7ee      	b.n	34e <_system_extint_init+0x22>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     370:	4a0e      	ldr	r2, [pc, #56]	; (3ac <_system_extint_init+0x80>)
     372:	7852      	ldrb	r2, [r2, #1]
     374:	b252      	sxtb	r2, r2
     376:	2a00      	cmp	r2, #0
     378:	db01      	blt.n	37e <_system_extint_init+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     37a:	3301      	adds	r3, #1
     37c:	e7ea      	b.n	354 <_system_extint_init+0x28>
			return true;
     37e:	2301      	movs	r3, #1
     380:	e7eb      	b.n	35a <_system_extint_init+0x2e>
		_extint_dev.callbacks[j] = NULL;
     382:	0099      	lsls	r1, r3, #2
     384:	2000      	movs	r0, #0
     386:	4a0a      	ldr	r2, [pc, #40]	; (3b0 <_system_extint_init+0x84>)
     388:	5088      	str	r0, [r1, r2]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     38a:	3301      	adds	r3, #1
     38c:	b2db      	uxtb	r3, r3
     38e:	2b0f      	cmp	r3, #15
     390:	d9f7      	bls.n	382 <_system_extint_init+0x56>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     392:	2210      	movs	r2, #16
     394:	4b07      	ldr	r3, [pc, #28]	; (3b4 <_system_extint_init+0x88>)
     396:	601a      	str	r2, [r3, #0]
	_extint_enable();
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_system_extint_init+0x8c>)
     39a:	4798      	blx	r3
}
     39c:	b003      	add	sp, #12
     39e:	bd00      	pop	{pc}
     3a0:	40000400 	.word	0x40000400
     3a4:	00004445 	.word	0x00004445
     3a8:	000043bd 	.word	0x000043bd
     3ac:	40001800 	.word	0x40001800
     3b0:	200003a8 	.word	0x200003a8
     3b4:	e000e100 	.word	0xe000e100
     3b8:	000002f1 	.word	0x000002f1

000003bc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3be:	b083      	sub	sp, #12
     3c0:	0005      	movs	r5, r0
     3c2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3c4:	a901      	add	r1, sp, #4
     3c6:	2300      	movs	r3, #0
     3c8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3ca:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3cc:	7923      	ldrb	r3, [r4, #4]
     3ce:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3d0:	7a23      	ldrb	r3, [r4, #8]
     3d2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3d4:	7820      	ldrb	r0, [r4, #0]
     3d6:	4b16      	ldr	r3, [pc, #88]	; (430 <extint_chan_set_config+0x74>)
     3d8:	4798      	blx	r3
	if (eic_index < EIC_INST_NUM) {
     3da:	2d1f      	cmp	r5, #31
     3dc:	d920      	bls.n	420 <extint_chan_set_config+0x64>
		return NULL;
     3de:	2000      	movs	r0, #0

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3e0:	2207      	movs	r2, #7
     3e2:	402a      	ands	r2, r5
     3e4:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3e6:	7ae3      	ldrb	r3, [r4, #11]
     3e8:	001e      	movs	r6, r3

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3ea:	7aa1      	ldrb	r1, [r4, #10]
     3ec:	2900      	cmp	r1, #0
     3ee:	d002      	beq.n	3f6 <extint_chan_set_config+0x3a>
		new_config |= EIC_CONFIG_FILTEN0;
     3f0:	2608      	movs	r6, #8
     3f2:	431e      	orrs	r6, r3
     3f4:	b2f6      	uxtb	r6, r6
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     3f6:	08eb      	lsrs	r3, r5, #3
		= (EIC_module->CONFIG[channel / 8].reg &
     3f8:	3306      	adds	r3, #6
     3fa:	009b      	lsls	r3, r3, #2
     3fc:	5819      	ldr	r1, [r3, r0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3fe:	270f      	movs	r7, #15
     400:	4097      	lsls	r7, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     402:	43b9      	bics	r1, r7
			(new_config << config_pos);
     404:	4096      	lsls	r6, r2
     406:	0032      	movs	r2, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     408:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     40a:	501a      	str	r2, [r3, r0]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     40c:	7a63      	ldrb	r3, [r4, #9]
     40e:	2b00      	cmp	r3, #0
     410:	d108      	bne.n	424 <extint_chan_set_config+0x68>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     412:	6943      	ldr	r3, [r0, #20]
     414:	2201      	movs	r2, #1
     416:	40aa      	lsls	r2, r5
     418:	4393      	bics	r3, r2
     41a:	6143      	str	r3, [r0, #20]
	}
}
     41c:	b003      	add	sp, #12
     41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return eics[eic_index];
     420:	4804      	ldr	r0, [pc, #16]	; (434 <extint_chan_set_config+0x78>)
     422:	e7dd      	b.n	3e0 <extint_chan_set_config+0x24>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     424:	6943      	ldr	r3, [r0, #20]
     426:	2201      	movs	r2, #1
     428:	40aa      	lsls	r2, r5
     42a:	4313      	orrs	r3, r2
     42c:	6143      	str	r3, [r0, #20]
     42e:	e7f5      	b.n	41c <extint_chan_set_config+0x60>
     430:	0000457d 	.word	0x0000457d
     434:	40001800 	.word	0x40001800

00000438 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     438:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     43a:	7a93      	ldrb	r3, [r2, #10]
     43c:	b25b      	sxtb	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	db08      	blt.n	454 <rtc_calendar_enable+0x1c>
        return false;
     442:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     444:	2b00      	cmp	r3, #0
     446:	d1f8      	bne.n	43a <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     448:	8813      	ldrh	r3, [r2, #0]
     44a:	2102      	movs	r1, #2
     44c:	430b      	orrs	r3, r1
     44e:	b29b      	uxth	r3, r3
     450:	8013      	strh	r3, [r2, #0]
}
     452:	4770      	bx	lr
                return true;
     454:	2301      	movs	r3, #1
     456:	e7f5      	b.n	444 <rtc_calendar_enable+0xc>

00000458 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     458:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     45a:	7a93      	ldrb	r3, [r2, #10]
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	db0a      	blt.n	478 <rtc_calendar_disable+0x20>
        return false;
     462:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     464:	2b00      	cmp	r3, #0
     466:	d1f8      	bne.n	45a <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     468:	33c1      	adds	r3, #193	; 0xc1
     46a:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     46c:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     46e:	8813      	ldrh	r3, [r2, #0]
     470:	2102      	movs	r1, #2
     472:	438b      	bics	r3, r1
     474:	8013      	strh	r3, [r2, #0]
}
     476:	4770      	bx	lr
                return true;
     478:	2301      	movs	r3, #1
     47a:	e7f3      	b.n	464 <rtc_calendar_disable+0xc>

0000047c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     47c:	b570      	push	{r4, r5, r6, lr}
     47e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     480:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <rtc_calendar_reset+0x2c>)
     484:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     486:	6823      	ldr	r3, [r4, #0]
     488:	7a9b      	ldrb	r3, [r3, #10]
     48a:	b25b      	sxtb	r3, r3
     48c:	2b00      	cmp	r3, #0
     48e:	db08      	blt.n	4a2 <rtc_calendar_reset+0x26>
        return false;
     490:	2300      	movs	r3, #0
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     492:	2b00      	cmp	r3, #0
     494:	d1f7      	bne.n	486 <rtc_calendar_reset+0xa>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     496:	882b      	ldrh	r3, [r5, #0]
     498:	2201      	movs	r2, #1
     49a:	4313      	orrs	r3, r2
     49c:	b29b      	uxth	r3, r3
     49e:	802b      	strh	r3, [r5, #0]
}
     4a0:	bd70      	pop	{r4, r5, r6, pc}
                return true;
     4a2:	2301      	movs	r3, #1
     4a4:	e7f5      	b.n	492 <rtc_calendar_reset+0x16>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000459 	.word	0x00000459

000004ac <rtc_calendar_time_to_register_value>:
{
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     4ac:	88cb      	ldrh	r3, [r1, #6]
     4ae:	88c2      	ldrh	r2, [r0, #6]
     4b0:	1a9b      	subs	r3, r3, r2
     4b2:	069b      	lsls	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     4b4:	794a      	ldrb	r2, [r1, #5]
     4b6:	0592      	lsls	r2, r2, #22
     4b8:	4313      	orrs	r3, r2

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     4ba:	790a      	ldrb	r2, [r1, #4]
     4bc:	0452      	lsls	r2, r2, #17
     4be:	4313      	orrs	r3, r2

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     4c0:	788a      	ldrb	r2, [r1, #2]
     4c2:	0312      	lsls	r2, r2, #12
     4c4:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     4c6:	7902      	ldrb	r2, [r0, #4]
     4c8:	2a00      	cmp	r2, #0
     4ca:	d105      	bne.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4cc:	78ca      	ldrb	r2, [r1, #3]
     4ce:	2a00      	cmp	r2, #0
     4d0:	d002      	beq.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     4d2:	2280      	movs	r2, #128	; 0x80
     4d4:	0252      	lsls	r2, r2, #9
     4d6:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     4d8:	7848      	ldrb	r0, [r1, #1]
     4da:	0180      	lsls	r0, r0, #6
     4dc:	4303      	orrs	r3, r0

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     4de:	7808      	ldrb	r0, [r1, #0]
     4e0:	4318      	orrs	r0, r3

	return register_value;
}
     4e2:	4770      	bx	lr

000004e4 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     4e4:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     4e6:	0e8c      	lsrs	r4, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
     4e8:	88c3      	ldrh	r3, [r0, #6]
     4ea:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     4ec:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     4ee:	0d8c      	lsrs	r4, r1, #22
     4f0:	230f      	movs	r3, #15
     4f2:	4023      	ands	r3, r4
     4f4:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     4f6:	0c4c      	lsrs	r4, r1, #17
     4f8:	231f      	movs	r3, #31
     4fa:	4023      	ands	r3, r4
     4fc:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     4fe:	7903      	ldrb	r3, [r0, #4]
     500:	2b00      	cmp	r3, #0
     502:	d110      	bne.n	526 <rtc_calendar_register_value_to_time+0x42>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
     504:	0b08      	lsrs	r0, r1, #12
     506:	230f      	movs	r3, #15
     508:	4003      	ands	r3, r0
		time->hour = ((register_value &
     50a:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	025b      	lsls	r3, r3, #9
     510:	400b      	ands	r3, r1
     512:	1e58      	subs	r0, r3, #1
     514:	4183      	sbcs	r3, r0
     516:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     518:	0988      	lsrs	r0, r1, #6
     51a:	233f      	movs	r3, #63	; 0x3f
     51c:	4018      	ands	r0, r3
     51e:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     520:	4019      	ands	r1, r3
     522:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
     524:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     526:	0b08      	lsrs	r0, r1, #12
     528:	231f      	movs	r3, #31
     52a:	4003      	ands	r3, r0
     52c:	7093      	strb	r3, [r2, #2]
     52e:	e7f3      	b.n	518 <rtc_calendar_register_value_to_time+0x34>

00000530 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     530:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     532:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     534:	4b06      	ldr	r3, [pc, #24]	; (550 <rtc_calendar_set_time+0x20>)
     536:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     538:	7aa3      	ldrb	r3, [r4, #10]
     53a:	b25b      	sxtb	r3, r3
     53c:	2b00      	cmp	r3, #0
     53e:	db04      	blt.n	54a <rtc_calendar_set_time+0x1a>
        return false;
     540:	2300      	movs	r3, #0

	while (rtc_calendar_is_syncing(module)) {
     542:	2b00      	cmp	r3, #0
     544:	d1f8      	bne.n	538 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     546:	6120      	str	r0, [r4, #16]
}
     548:	bd10      	pop	{r4, pc}
                return true;
     54a:	2301      	movs	r3, #1
     54c:	e7f9      	b.n	542 <rtc_calendar_set_time+0x12>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	000004ad 	.word	0x000004ad

00000554 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
     554:	b570      	push	{r4, r5, r6, lr}
     556:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     558:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
     55a:	7944      	ldrb	r4, [r0, #5]
     55c:	2c00      	cmp	r4, #0
     55e:	d006      	beq.n	56e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
     560:	8859      	ldrh	r1, [r3, #2]
     562:	0449      	lsls	r1, r1, #17
     564:	d510      	bpl.n	588 <rtc_calendar_get_time+0x34>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
     566:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
     568:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <rtc_calendar_get_time+0x54>)
     56a:	4798      	blx	r3
}
     56c:	bd70      	pop	{r4, r5, r6, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
     56e:	490f      	ldr	r1, [pc, #60]	; (5ac <rtc_calendar_get_time+0x58>)
     570:	8059      	strh	r1, [r3, #2]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     572:	6801      	ldr	r1, [r0, #0]
     574:	7a89      	ldrb	r1, [r1, #10]
     576:	b249      	sxtb	r1, r1
     578:	2900      	cmp	r1, #0
     57a:	db03      	blt.n	584 <rtc_calendar_get_time+0x30>
        return false;
     57c:	0021      	movs	r1, r4
		while (rtc_calendar_is_syncing(module)) {
     57e:	2900      	cmp	r1, #0
     580:	d1f7      	bne.n	572 <rtc_calendar_get_time+0x1e>
     582:	e7f0      	b.n	566 <rtc_calendar_get_time+0x12>
                return true;
     584:	2101      	movs	r1, #1
     586:	e7fa      	b.n	57e <rtc_calendar_get_time+0x2a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
     588:	8859      	ldrh	r1, [r3, #2]
     58a:	4d09      	ldr	r5, [pc, #36]	; (5b0 <rtc_calendar_get_time+0x5c>)
     58c:	4329      	orrs	r1, r5
     58e:	b289      	uxth	r1, r1
     590:	8059      	strh	r1, [r3, #2]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     592:	6801      	ldr	r1, [r0, #0]
     594:	7a89      	ldrb	r1, [r1, #10]
     596:	b249      	sxtb	r1, r1
     598:	2900      	cmp	r1, #0
     59a:	db03      	blt.n	5a4 <rtc_calendar_get_time+0x50>
        return false;
     59c:	2100      	movs	r1, #0
		while (rtc_calendar_is_syncing(module)) {
     59e:	2900      	cmp	r1, #0
     5a0:	d1f7      	bne.n	592 <rtc_calendar_get_time+0x3e>
     5a2:	e7e0      	b.n	566 <rtc_calendar_get_time+0x12>
                return true;
     5a4:	0021      	movs	r1, r4
     5a6:	e7fa      	b.n	59e <rtc_calendar_get_time+0x4a>
     5a8:	000004e5 	.word	0x000004e5
     5ac:	ffff8000 	.word	0xffff8000
     5b0:	ffffc000 	.word	0xffffc000

000005b4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	000d      	movs	r5, r1
     5b8:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5ba:	6806      	ldr	r6, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     5bc:	2a01      	cmp	r2, #1
     5be:	d901      	bls.n	5c4 <rtc_calendar_set_alarm+0x10>
		return STATUS_ERR_INVALID_ARG;
     5c0:	2017      	movs	r0, #23

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
     5c2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <rtc_calendar_set_alarm+0x38>)
     5c6:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5c8:	7ab3      	ldrb	r3, [r6, #10]
     5ca:	b25b      	sxtb	r3, r3
     5cc:	2b00      	cmp	r3, #0
     5ce:	db0a      	blt.n	5e6 <rtc_calendar_set_alarm+0x32>
        return false;
     5d0:	2300      	movs	r3, #0
	while (rtc_calendar_is_syncing(module)) {
     5d2:	2b00      	cmp	r3, #0
     5d4:	d1f8      	bne.n	5c8 <rtc_calendar_set_alarm+0x14>
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     5d6:	3403      	adds	r4, #3
     5d8:	00e4      	lsls	r4, r4, #3
     5da:	51a0      	str	r0, [r4, r6]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     5dc:	7a2b      	ldrb	r3, [r5, #8]
     5de:	1934      	adds	r4, r6, r4
     5e0:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
     5e2:	2000      	movs	r0, #0
     5e4:	e7ed      	b.n	5c2 <rtc_calendar_set_alarm+0xe>
                return true;
     5e6:	2301      	movs	r3, #1
     5e8:	e7f3      	b.n	5d2 <rtc_calendar_set_alarm+0x1e>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	000004ad 	.word	0x000004ad

000005f0 <_rtc_calendar_set_config>:
{
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	0005      	movs	r5, r0
     5f4:	000e      	movs	r6, r1
	Rtc *const rtc_module = module->hw;
     5f6:	6801      	ldr	r1, [r0, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     5f8:	8832      	ldrh	r2, [r6, #0]
     5fa:	2308      	movs	r3, #8
     5fc:	4313      	orrs	r3, r2
     5fe:	b29b      	uxth	r3, r3
	if (!(config->clock_24h)) {
     600:	7930      	ldrb	r0, [r6, #4]
     602:	2800      	cmp	r0, #0
     604:	d102      	bne.n	60c <_rtc_calendar_set_config+0x1c>
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     606:	2348      	movs	r3, #72	; 0x48
     608:	4313      	orrs	r3, r2
     60a:	b29b      	uxth	r3, r3
	if (config->clear_on_match) {
     60c:	78b2      	ldrb	r2, [r6, #2]
     60e:	2a00      	cmp	r2, #0
     610:	d002      	beq.n	618 <_rtc_calendar_set_config+0x28>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     612:	2280      	movs	r2, #128	; 0x80
     614:	4313      	orrs	r3, r2
     616:	b29b      	uxth	r3, r3
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     618:	800b      	strh	r3, [r1, #0]
	if (config->continuously_update) {
     61a:	78f3      	ldrb	r3, [r6, #3]
     61c:	2b00      	cmp	r3, #0
     61e:	d004      	beq.n	62a <_rtc_calendar_set_config+0x3a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     620:	884b      	ldrh	r3, [r1, #2]
     622:	2280      	movs	r2, #128	; 0x80
     624:	01d2      	lsls	r2, r2, #7
     626:	4313      	orrs	r3, r2
     628:	804b      	strh	r3, [r1, #2]
{
     62a:	2400      	movs	r4, #0
     62c:	e00a      	b.n	644 <_rtc_calendar_set_config+0x54>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     62e:	00a3      	lsls	r3, r4, #2
     630:	191b      	adds	r3, r3, r4
     632:	0059      	lsls	r1, r3, #1
     634:	3108      	adds	r1, #8
     636:	1871      	adds	r1, r6, r1
     638:	0022      	movs	r2, r4
     63a:	0028      	movs	r0, r5
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <_rtc_calendar_set_config+0x5c>)
     63e:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     640:	3401      	adds	r4, #1
     642:	b2e4      	uxtb	r4, r4
     644:	2c00      	cmp	r4, #0
     646:	d0f2      	beq.n	62e <_rtc_calendar_set_config+0x3e>
}
     648:	bd70      	pop	{r4, r5, r6, pc}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	000005b5 	.word	0x000005b5

00000650 <rtc_calendar_init>:
{
     650:	b530      	push	{r4, r5, lr}
     652:	b083      	sub	sp, #12
     654:	0004      	movs	r4, r0
     656:	0015      	movs	r5, r2
	module->hw = hw;
     658:	6001      	str	r1, [r0, #0]
     65a:	4a0f      	ldr	r2, [pc, #60]	; (698 <rtc_calendar_init+0x48>)
     65c:	6993      	ldr	r3, [r2, #24]
     65e:	2120      	movs	r1, #32
     660:	430b      	orrs	r3, r1
     662:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     664:	a901      	add	r1, sp, #4
     666:	2302      	movs	r3, #2
     668:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     66a:	2004      	movs	r0, #4
     66c:	4b0b      	ldr	r3, [pc, #44]	; (69c <rtc_calendar_init+0x4c>)
     66e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     670:	2004      	movs	r0, #4
     672:	4b0b      	ldr	r3, [pc, #44]	; (6a0 <rtc_calendar_init+0x50>)
     674:	4798      	blx	r3
	rtc_calendar_reset(module);
     676:	0020      	movs	r0, r4
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <rtc_calendar_init+0x54>)
     67a:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     67c:	792b      	ldrb	r3, [r5, #4]
     67e:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     680:	78eb      	ldrb	r3, [r5, #3]
     682:	7163      	strb	r3, [r4, #5]
	module->year_init_value     = config->year_init_value;
     684:	88eb      	ldrh	r3, [r5, #6]
     686:	80e3      	strh	r3, [r4, #6]
	_rtc_instance[0] = module;
     688:	4b07      	ldr	r3, [pc, #28]	; (6a8 <rtc_calendar_init+0x58>)
     68a:	601c      	str	r4, [r3, #0]
	_rtc_calendar_set_config(module, config);
     68c:	0029      	movs	r1, r5
     68e:	0020      	movs	r0, r4
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <rtc_calendar_init+0x5c>)
     692:	4798      	blx	r3
}
     694:	b003      	add	sp, #12
     696:	bd30      	pop	{r4, r5, pc}
     698:	40000400 	.word	0x40000400
     69c:	00004445 	.word	0x00004445
     6a0:	000043bd 	.word	0x000043bd
     6a4:	0000047d 	.word	0x0000047d
     6a8:	200003e8 	.word	0x200003e8
     6ac:	000005f1 	.word	0x000005f1

000006b0 <rtc_calendar_frequency_correction>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6b0:	6802      	ldr	r2, [r0, #0]

	/* Check if valid argument. */
	if (abs(value) > 0x7F) {
     6b2:	17c8      	asrs	r0, r1, #31
     6b4:	180b      	adds	r3, r1, r0
     6b6:	4043      	eors	r3, r0
     6b8:	2b7f      	cmp	r3, #127	; 0x7f
     6ba:	dd01      	ble.n	6c0 <rtc_calendar_frequency_correction+0x10>
		/* Value bigger than allowed, return invalid argument. */
		return STATUS_ERR_INVALID_ARG;
     6bc:	2017      	movs	r0, #23

	/* Set value. */
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;

	return STATUS_OK;
}
     6be:	4770      	bx	lr
	new_correction_value = abs(value);
     6c0:	0018      	movs	r0, r3
	if (value < 0) {
     6c2:	2900      	cmp	r1, #0
     6c4:	db0a      	blt.n	6dc <rtc_calendar_frequency_correction+0x2c>
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     6c6:	7a93      	ldrb	r3, [r2, #10]
     6c8:	b25b      	sxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	db09      	blt.n	6e2 <rtc_calendar_frequency_correction+0x32>
        return false;
     6ce:	2300      	movs	r3, #0
	while (rtc_calendar_is_syncing(module)) {
     6d0:	2b00      	cmp	r3, #0
     6d2:	d1f8      	bne.n	6c6 <rtc_calendar_frequency_correction+0x16>
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;
     6d4:	b2c0      	uxtb	r0, r0
     6d6:	7310      	strb	r0, [r2, #12]
	return STATUS_OK;
     6d8:	2000      	movs	r0, #0
     6da:	e7f0      	b.n	6be <rtc_calendar_frequency_correction+0xe>
		new_correction_value |= RTC_FREQCORR_SIGN;
     6dc:	2080      	movs	r0, #128	; 0x80
     6de:	4318      	orrs	r0, r3
     6e0:	e7f1      	b.n	6c6 <rtc_calendar_frequency_correction+0x16>
                return true;
     6e2:	2301      	movs	r3, #1
     6e4:	e7f4      	b.n	6d0 <rtc_calendar_frequency_correction+0x20>

000006e6 <long_division>:
     6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e8:	46de      	mov	lr, fp
     6ea:	4657      	mov	r7, sl
     6ec:	464e      	mov	r6, r9
     6ee:	4645      	mov	r5, r8
     6f0:	b5e0      	push	{r5, r6, r7, lr}
     6f2:	b085      	sub	sp, #20
     6f4:	4689      	mov	r9, r1
     6f6:	0016      	movs	r6, r2
     6f8:	001f      	movs	r7, r3
     6fa:	2200      	movs	r2, #0
     6fc:	2300      	movs	r3, #0
     6fe:	2100      	movs	r1, #0
     700:	468b      	mov	fp, r1
     702:	468a      	mov	sl, r1
     704:	253f      	movs	r5, #63	; 0x3f
     706:	9600      	str	r6, [sp, #0]
     708:	9701      	str	r7, [sp, #4]
     70a:	9002      	str	r0, [sp, #8]
     70c:	4649      	mov	r1, r9
     70e:	9103      	str	r1, [sp, #12]
     710:	e011      	b.n	736 <long_division+0x50>
     712:	2120      	movs	r1, #32
     714:	1b49      	subs	r1, r1, r5
     716:	2400      	movs	r4, #0
     718:	3401      	adds	r4, #1
     71a:	40cc      	lsrs	r4, r1
     71c:	e013      	b.n	746 <long_division+0x60>
     71e:	9800      	ldr	r0, [sp, #0]
     720:	9901      	ldr	r1, [sp, #4]
     722:	1a12      	subs	r2, r2, r0
     724:	418b      	sbcs	r3, r1
     726:	4659      	mov	r1, fp
     728:	4660      	mov	r0, ip
     72a:	4301      	orrs	r1, r0
     72c:	468b      	mov	fp, r1
     72e:	4651      	mov	r1, sl
     730:	4321      	orrs	r1, r4
     732:	468a      	mov	sl, r1
     734:	3d01      	subs	r5, #1
     736:	2d00      	cmp	r5, #0
     738:	db23      	blt.n	782 <long_division+0x9c>
     73a:	2120      	movs	r1, #32
     73c:	4249      	negs	r1, r1
     73e:	1869      	adds	r1, r5, r1
     740:	d4e7      	bmi.n	712 <long_division+0x2c>
     742:	2401      	movs	r4, #1
     744:	408c      	lsls	r4, r1
     746:	2101      	movs	r1, #1
     748:	40a9      	lsls	r1, r5
     74a:	468c      	mov	ip, r1
     74c:	1892      	adds	r2, r2, r2
     74e:	415b      	adcs	r3, r3
     750:	0010      	movs	r0, r2
     752:	0019      	movs	r1, r3
     754:	9e02      	ldr	r6, [sp, #8]
     756:	4667      	mov	r7, ip
     758:	403e      	ands	r6, r7
     75a:	46b1      	mov	r9, r6
     75c:	9e03      	ldr	r6, [sp, #12]
     75e:	4026      	ands	r6, r4
     760:	46b0      	mov	r8, r6
     762:	464e      	mov	r6, r9
     764:	4647      	mov	r7, r8
     766:	433e      	orrs	r6, r7
     768:	d003      	beq.n	772 <long_division+0x8c>
     76a:	2601      	movs	r6, #1
     76c:	4306      	orrs	r6, r0
     76e:	0032      	movs	r2, r6
     770:	000b      	movs	r3, r1
     772:	9800      	ldr	r0, [sp, #0]
     774:	9901      	ldr	r1, [sp, #4]
     776:	4299      	cmp	r1, r3
     778:	d8dc      	bhi.n	734 <long_division+0x4e>
     77a:	d1d0      	bne.n	71e <long_division+0x38>
     77c:	4290      	cmp	r0, r2
     77e:	d8d9      	bhi.n	734 <long_division+0x4e>
     780:	e7cd      	b.n	71e <long_division+0x38>
     782:	4658      	mov	r0, fp
     784:	4651      	mov	r1, sl
     786:	b005      	add	sp, #20
     788:	bc3c      	pop	{r2, r3, r4, r5}
     78a:	4690      	mov	r8, r2
     78c:	4699      	mov	r9, r3
     78e:	46a2      	mov	sl, r4
     790:	46ab      	mov	fp, r5
     792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000794 <_sercom_get_sync_baud_val>:
     794:	0849      	lsrs	r1, r1, #1
     796:	4281      	cmp	r1, r0
     798:	d201      	bcs.n	79e <_sercom_get_sync_baud_val+0xa>
     79a:	2040      	movs	r0, #64	; 0x40
     79c:	4770      	bx	lr
     79e:	2300      	movs	r3, #0
     7a0:	e002      	b.n	7a8 <_sercom_get_sync_baud_val+0x14>
     7a2:	1a09      	subs	r1, r1, r0
     7a4:	3301      	adds	r3, #1
     7a6:	b29b      	uxth	r3, r3
     7a8:	4281      	cmp	r1, r0
     7aa:	d2fa      	bcs.n	7a2 <_sercom_get_sync_baud_val+0xe>
     7ac:	3b01      	subs	r3, #1
     7ae:	b29b      	uxth	r3, r3
     7b0:	2bff      	cmp	r3, #255	; 0xff
     7b2:	d901      	bls.n	7b8 <_sercom_get_sync_baud_val+0x24>
     7b4:	2040      	movs	r0, #64	; 0x40
     7b6:	e7f1      	b.n	79c <_sercom_get_sync_baud_val+0x8>
     7b8:	8013      	strh	r3, [r2, #0]
     7ba:	2000      	movs	r0, #0
     7bc:	e7ee      	b.n	79c <_sercom_get_sync_baud_val+0x8>
	...

000007c0 <_sercom_get_async_baud_val>:
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	000c      	movs	r4, r1
     7c6:	0015      	movs	r5, r2
     7c8:	aa06      	add	r2, sp, #24
     7ca:	7811      	ldrb	r1, [r2, #0]
     7cc:	0002      	movs	r2, r0
     7ce:	434a      	muls	r2, r1
     7d0:	42a2      	cmp	r2, r4
     7d2:	d902      	bls.n	7da <_sercom_get_async_baud_val+0x1a>
     7d4:	2040      	movs	r0, #64	; 0x40
     7d6:	b002      	add	sp, #8
     7d8:	bd70      	pop	{r4, r5, r6, pc}
     7da:	2b00      	cmp	r3, #0
     7dc:	d114      	bne.n	808 <_sercom_get_async_baud_val+0x48>
     7de:	0002      	movs	r2, r0
     7e0:	0008      	movs	r0, r1
     7e2:	2100      	movs	r1, #0
     7e4:	4e1b      	ldr	r6, [pc, #108]	; (854 <_sercom_get_async_baud_val+0x94>)
     7e6:	47b0      	blx	r6
     7e8:	0001      	movs	r1, r0
     7ea:	0022      	movs	r2, r4
     7ec:	2300      	movs	r3, #0
     7ee:	2000      	movs	r0, #0
     7f0:	4c19      	ldr	r4, [pc, #100]	; (858 <_sercom_get_async_baud_val+0x98>)
     7f2:	47a0      	blx	r4
     7f4:	2200      	movs	r2, #0
     7f6:	2301      	movs	r3, #1
     7f8:	1a12      	subs	r2, r2, r0
     7fa:	418b      	sbcs	r3, r1
     7fc:	0c10      	lsrs	r0, r2, #16
     7fe:	041b      	lsls	r3, r3, #16
     800:	4318      	orrs	r0, r3
     802:	8028      	strh	r0, [r5, #0]
     804:	2000      	movs	r0, #0
     806:	e7e6      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
     808:	2b01      	cmp	r3, #1
     80a:	d001      	beq.n	810 <_sercom_get_async_baud_val+0x50>
     80c:	2000      	movs	r0, #0
     80e:	e7f8      	b.n	802 <_sercom_get_async_baud_val+0x42>
     810:	000a      	movs	r2, r1
     812:	2300      	movs	r3, #0
     814:	2100      	movs	r1, #0
     816:	4e0f      	ldr	r6, [pc, #60]	; (854 <_sercom_get_async_baud_val+0x94>)
     818:	47b0      	blx	r6
     81a:	0002      	movs	r2, r0
     81c:	000b      	movs	r3, r1
     81e:	9200      	str	r2, [sp, #0]
     820:	9301      	str	r3, [sp, #4]
     822:	0020      	movs	r0, r4
     824:	2100      	movs	r1, #0
     826:	4e0c      	ldr	r6, [pc, #48]	; (858 <_sercom_get_async_baud_val+0x98>)
     828:	47b0      	blx	r6
     82a:	0006      	movs	r6, r0
     82c:	2380      	movs	r3, #128	; 0x80
     82e:	019b      	lsls	r3, r3, #6
     830:	4298      	cmp	r0, r3
     832:	d901      	bls.n	838 <_sercom_get_async_baud_val+0x78>
     834:	2040      	movs	r0, #64	; 0x40
     836:	e7ce      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
     838:	0f61      	lsrs	r1, r4, #29
     83a:	00e0      	lsls	r0, r4, #3
     83c:	9a00      	ldr	r2, [sp, #0]
     83e:	9b01      	ldr	r3, [sp, #4]
     840:	4c05      	ldr	r4, [pc, #20]	; (858 <_sercom_get_async_baud_val+0x98>)
     842:	47a0      	blx	r4
     844:	b2c0      	uxtb	r0, r0
     846:	00f3      	lsls	r3, r6, #3
     848:	b2db      	uxtb	r3, r3
     84a:	1ac0      	subs	r0, r0, r3
     84c:	b2c0      	uxtb	r0, r0
     84e:	0340      	lsls	r0, r0, #13
     850:	4330      	orrs	r0, r6
     852:	e7d6      	b.n	802 <_sercom_get_async_baud_val+0x42>
     854:	00004c05 	.word	0x00004c05
     858:	000006e7 	.word	0x000006e7

0000085c <sercom_set_gclk_generator>:
     85c:	b510      	push	{r4, lr}
     85e:	b082      	sub	sp, #8
     860:	0004      	movs	r4, r0
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <sercom_set_gclk_generator+0x40>)
     864:	781b      	ldrb	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d007      	beq.n	87a <sercom_set_gclk_generator+0x1e>
     86a:	2900      	cmp	r1, #0
     86c:	d105      	bne.n	87a <sercom_set_gclk_generator+0x1e>
     86e:	4b0b      	ldr	r3, [pc, #44]	; (89c <sercom_set_gclk_generator+0x40>)
     870:	785b      	ldrb	r3, [r3, #1]
     872:	4283      	cmp	r3, r0
     874:	d010      	beq.n	898 <sercom_set_gclk_generator+0x3c>
     876:	201d      	movs	r0, #29
     878:	e00c      	b.n	894 <sercom_set_gclk_generator+0x38>
     87a:	a901      	add	r1, sp, #4
     87c:	700c      	strb	r4, [r1, #0]
     87e:	2013      	movs	r0, #19
     880:	4b07      	ldr	r3, [pc, #28]	; (8a0 <sercom_set_gclk_generator+0x44>)
     882:	4798      	blx	r3
     884:	2013      	movs	r0, #19
     886:	4b07      	ldr	r3, [pc, #28]	; (8a4 <sercom_set_gclk_generator+0x48>)
     888:	4798      	blx	r3
     88a:	4b04      	ldr	r3, [pc, #16]	; (89c <sercom_set_gclk_generator+0x40>)
     88c:	705c      	strb	r4, [r3, #1]
     88e:	2201      	movs	r2, #1
     890:	701a      	strb	r2, [r3, #0]
     892:	2000      	movs	r0, #0
     894:	b002      	add	sp, #8
     896:	bd10      	pop	{r4, pc}
     898:	2000      	movs	r0, #0
     89a:	e7fb      	b.n	894 <sercom_set_gclk_generator+0x38>
     89c:	20000090 	.word	0x20000090
     8a0:	00004445 	.word	0x00004445
     8a4:	000043bd 	.word	0x000043bd

000008a8 <_sercom_get_default_pad>:
     8a8:	4b40      	ldr	r3, [pc, #256]	; (9ac <_sercom_get_default_pad+0x104>)
     8aa:	4298      	cmp	r0, r3
     8ac:	d031      	beq.n	912 <_sercom_get_default_pad+0x6a>
     8ae:	d90a      	bls.n	8c6 <_sercom_get_default_pad+0x1e>
     8b0:	4b3f      	ldr	r3, [pc, #252]	; (9b0 <_sercom_get_default_pad+0x108>)
     8b2:	4298      	cmp	r0, r3
     8b4:	d04d      	beq.n	952 <_sercom_get_default_pad+0xaa>
     8b6:	4b3f      	ldr	r3, [pc, #252]	; (9b4 <_sercom_get_default_pad+0x10c>)
     8b8:	4298      	cmp	r0, r3
     8ba:	d05a      	beq.n	972 <_sercom_get_default_pad+0xca>
     8bc:	4b3e      	ldr	r3, [pc, #248]	; (9b8 <_sercom_get_default_pad+0x110>)
     8be:	4298      	cmp	r0, r3
     8c0:	d037      	beq.n	932 <_sercom_get_default_pad+0x8a>
     8c2:	2000      	movs	r0, #0
     8c4:	4770      	bx	lr
     8c6:	4b3d      	ldr	r3, [pc, #244]	; (9bc <_sercom_get_default_pad+0x114>)
     8c8:	4298      	cmp	r0, r3
     8ca:	d00c      	beq.n	8e6 <_sercom_get_default_pad+0x3e>
     8cc:	4b3c      	ldr	r3, [pc, #240]	; (9c0 <_sercom_get_default_pad+0x118>)
     8ce:	4298      	cmp	r0, r3
     8d0:	d1f7      	bne.n	8c2 <_sercom_get_default_pad+0x1a>
     8d2:	2901      	cmp	r1, #1
     8d4:	d05f      	beq.n	996 <_sercom_get_default_pad+0xee>
     8d6:	2900      	cmp	r1, #0
     8d8:	d015      	beq.n	906 <_sercom_get_default_pad+0x5e>
     8da:	2902      	cmp	r1, #2
     8dc:	d015      	beq.n	90a <_sercom_get_default_pad+0x62>
     8de:	2903      	cmp	r1, #3
     8e0:	d015      	beq.n	90e <_sercom_get_default_pad+0x66>
     8e2:	2000      	movs	r0, #0
     8e4:	e7ee      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     8e6:	2901      	cmp	r1, #1
     8e8:	d053      	beq.n	992 <_sercom_get_default_pad+0xea>
     8ea:	2900      	cmp	r1, #0
     8ec:	d005      	beq.n	8fa <_sercom_get_default_pad+0x52>
     8ee:	2902      	cmp	r1, #2
     8f0:	d005      	beq.n	8fe <_sercom_get_default_pad+0x56>
     8f2:	2903      	cmp	r1, #3
     8f4:	d005      	beq.n	902 <_sercom_get_default_pad+0x5a>
     8f6:	2000      	movs	r0, #0
     8f8:	e7e4      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     8fa:	4832      	ldr	r0, [pc, #200]	; (9c4 <_sercom_get_default_pad+0x11c>)
     8fc:	e7e2      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     8fe:	4832      	ldr	r0, [pc, #200]	; (9c8 <_sercom_get_default_pad+0x120>)
     900:	e7e0      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     902:	4832      	ldr	r0, [pc, #200]	; (9cc <_sercom_get_default_pad+0x124>)
     904:	e7de      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     906:	2003      	movs	r0, #3
     908:	e7dc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90a:	4831      	ldr	r0, [pc, #196]	; (9d0 <_sercom_get_default_pad+0x128>)
     90c:	e7da      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90e:	4831      	ldr	r0, [pc, #196]	; (9d4 <_sercom_get_default_pad+0x12c>)
     910:	e7d8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     912:	2901      	cmp	r1, #1
     914:	d041      	beq.n	99a <_sercom_get_default_pad+0xf2>
     916:	2900      	cmp	r1, #0
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0x7e>
     91a:	2902      	cmp	r1, #2
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0x82>
     91e:	2903      	cmp	r1, #3
     920:	d005      	beq.n	92e <_sercom_get_default_pad+0x86>
     922:	2000      	movs	r0, #0
     924:	e7ce      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     926:	482c      	ldr	r0, [pc, #176]	; (9d8 <_sercom_get_default_pad+0x130>)
     928:	e7cc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92a:	482c      	ldr	r0, [pc, #176]	; (9dc <_sercom_get_default_pad+0x134>)
     92c:	e7ca      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92e:	482c      	ldr	r0, [pc, #176]	; (9e0 <_sercom_get_default_pad+0x138>)
     930:	e7c8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     932:	2901      	cmp	r1, #1
     934:	d033      	beq.n	99e <_sercom_get_default_pad+0xf6>
     936:	2900      	cmp	r1, #0
     938:	d005      	beq.n	946 <_sercom_get_default_pad+0x9e>
     93a:	2902      	cmp	r1, #2
     93c:	d005      	beq.n	94a <_sercom_get_default_pad+0xa2>
     93e:	2903      	cmp	r1, #3
     940:	d005      	beq.n	94e <_sercom_get_default_pad+0xa6>
     942:	2000      	movs	r0, #0
     944:	e7be      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     946:	4827      	ldr	r0, [pc, #156]	; (9e4 <_sercom_get_default_pad+0x13c>)
     948:	e7bc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94a:	4827      	ldr	r0, [pc, #156]	; (9e8 <_sercom_get_default_pad+0x140>)
     94c:	e7ba      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94e:	4827      	ldr	r0, [pc, #156]	; (9ec <_sercom_get_default_pad+0x144>)
     950:	e7b8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     952:	2901      	cmp	r1, #1
     954:	d025      	beq.n	9a2 <_sercom_get_default_pad+0xfa>
     956:	2900      	cmp	r1, #0
     958:	d005      	beq.n	966 <_sercom_get_default_pad+0xbe>
     95a:	2902      	cmp	r1, #2
     95c:	d005      	beq.n	96a <_sercom_get_default_pad+0xc2>
     95e:	2903      	cmp	r1, #3
     960:	d005      	beq.n	96e <_sercom_get_default_pad+0xc6>
     962:	2000      	movs	r0, #0
     964:	e7ae      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     966:	4822      	ldr	r0, [pc, #136]	; (9f0 <_sercom_get_default_pad+0x148>)
     968:	e7ac      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96a:	4822      	ldr	r0, [pc, #136]	; (9f4 <_sercom_get_default_pad+0x14c>)
     96c:	e7aa      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96e:	4822      	ldr	r0, [pc, #136]	; (9f8 <_sercom_get_default_pad+0x150>)
     970:	e7a8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     972:	2901      	cmp	r1, #1
     974:	d017      	beq.n	9a6 <_sercom_get_default_pad+0xfe>
     976:	2900      	cmp	r1, #0
     978:	d005      	beq.n	986 <_sercom_get_default_pad+0xde>
     97a:	2902      	cmp	r1, #2
     97c:	d005      	beq.n	98a <_sercom_get_default_pad+0xe2>
     97e:	2903      	cmp	r1, #3
     980:	d005      	beq.n	98e <_sercom_get_default_pad+0xe6>
     982:	2000      	movs	r0, #0
     984:	e79e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     986:	481d      	ldr	r0, [pc, #116]	; (9fc <_sercom_get_default_pad+0x154>)
     988:	e79c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98a:	481d      	ldr	r0, [pc, #116]	; (a00 <_sercom_get_default_pad+0x158>)
     98c:	e79a      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98e:	481d      	ldr	r0, [pc, #116]	; (a04 <_sercom_get_default_pad+0x15c>)
     990:	e798      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     992:	481d      	ldr	r0, [pc, #116]	; (a08 <_sercom_get_default_pad+0x160>)
     994:	e796      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     996:	481d      	ldr	r0, [pc, #116]	; (a0c <_sercom_get_default_pad+0x164>)
     998:	e794      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99a:	481d      	ldr	r0, [pc, #116]	; (a10 <_sercom_get_default_pad+0x168>)
     99c:	e792      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99e:	481d      	ldr	r0, [pc, #116]	; (a14 <_sercom_get_default_pad+0x16c>)
     9a0:	e790      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a2:	481d      	ldr	r0, [pc, #116]	; (a18 <_sercom_get_default_pad+0x170>)
     9a4:	e78e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a6:	481d      	ldr	r0, [pc, #116]	; (a1c <_sercom_get_default_pad+0x174>)
     9a8:	e78c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	42001000 	.word	0x42001000
     9b0:	42001800 	.word	0x42001800
     9b4:	42001c00 	.word	0x42001c00
     9b8:	42001400 	.word	0x42001400
     9bc:	42000800 	.word	0x42000800
     9c0:	42000c00 	.word	0x42000c00
     9c4:	00040003 	.word	0x00040003
     9c8:	00060003 	.word	0x00060003
     9cc:	00070003 	.word	0x00070003
     9d0:	001e0003 	.word	0x001e0003
     9d4:	001f0003 	.word	0x001f0003
     9d8:	00080003 	.word	0x00080003
     9dc:	000a0003 	.word	0x000a0003
     9e0:	000b0003 	.word	0x000b0003
     9e4:	00100003 	.word	0x00100003
     9e8:	00120003 	.word	0x00120003
     9ec:	00130003 	.word	0x00130003
     9f0:	000c0003 	.word	0x000c0003
     9f4:	000e0003 	.word	0x000e0003
     9f8:	000f0003 	.word	0x000f0003
     9fc:	00160003 	.word	0x00160003
     a00:	00180003 	.word	0x00180003
     a04:	00190003 	.word	0x00190003
     a08:	00050003 	.word	0x00050003
     a0c:	00010003 	.word	0x00010003
     a10:	00090003 	.word	0x00090003
     a14:	00110003 	.word	0x00110003
     a18:	000d0003 	.word	0x000d0003
     a1c:	00170003 	.word	0x00170003

00000a20 <_sercom_get_sercom_inst_index>:
     a20:	b530      	push	{r4, r5, lr}
     a22:	b087      	sub	sp, #28
     a24:	4c0a      	ldr	r4, [pc, #40]	; (a50 <_sercom_get_sercom_inst_index+0x30>)
     a26:	466b      	mov	r3, sp
     a28:	0022      	movs	r2, r4
     a2a:	ca32      	ldmia	r2!, {r1, r4, r5}
     a2c:	c332      	stmia	r3!, {r1, r4, r5}
     a2e:	ca32      	ldmia	r2!, {r1, r4, r5}
     a30:	c332      	stmia	r3!, {r1, r4, r5}
     a32:	2300      	movs	r3, #0
     a34:	2b05      	cmp	r3, #5
     a36:	d808      	bhi.n	a4a <_sercom_get_sercom_inst_index+0x2a>
     a38:	009a      	lsls	r2, r3, #2
     a3a:	4669      	mov	r1, sp
     a3c:	5852      	ldr	r2, [r2, r1]
     a3e:	4282      	cmp	r2, r0
     a40:	d001      	beq.n	a46 <_sercom_get_sercom_inst_index+0x26>
     a42:	3301      	adds	r3, #1
     a44:	e7f6      	b.n	a34 <_sercom_get_sercom_inst_index+0x14>
     a46:	b2d8      	uxtb	r0, r3
     a48:	e000      	b.n	a4c <_sercom_get_sercom_inst_index+0x2c>
     a4a:	2000      	movs	r0, #0
     a4c:	b007      	add	sp, #28
     a4e:	bd30      	pop	{r4, r5, pc}
     a50:	00005524 	.word	0x00005524

00000a54 <_spi_clear_tx_complete_flag>:
     a54:	6803      	ldr	r3, [r0, #0]
     a56:	2202      	movs	r2, #2
     a58:	761a      	strb	r2, [r3, #24]
     a5a:	4770      	bx	lr

00000a5c <_spi_set_config>:
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	b087      	sub	sp, #28
     a60:	0007      	movs	r7, r0
     a62:	000d      	movs	r5, r1
     a64:	6806      	ldr	r6, [r0, #0]
     a66:	ab05      	add	r3, sp, #20
     a68:	2280      	movs	r2, #128	; 0x80
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	2200      	movs	r2, #0
     a6e:	705a      	strb	r2, [r3, #1]
     a70:	2101      	movs	r1, #1
     a72:	7099      	strb	r1, [r3, #2]
     a74:	70da      	strb	r2, [r3, #3]
     a76:	782b      	ldrb	r3, [r5, #0]
     a78:	2b00      	cmp	r3, #0
     a7a:	d101      	bne.n	a80 <_spi_set_config+0x24>
     a7c:	ab05      	add	r3, sp, #20
     a7e:	709a      	strb	r2, [r3, #2]
     a80:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a82:	9301      	str	r3, [sp, #4]
     a84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     a86:	9302      	str	r3, [sp, #8]
     a88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     a8a:	9303      	str	r3, [sp, #12]
     a8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     a8e:	9304      	str	r3, [sp, #16]
     a90:	2400      	movs	r4, #0
     a92:	e006      	b.n	aa2 <_spi_set_config+0x46>
     a94:	0021      	movs	r1, r4
     a96:	0030      	movs	r0, r6
     a98:	4b3d      	ldr	r3, [pc, #244]	; (b90 <_spi_set_config+0x134>)
     a9a:	4798      	blx	r3
     a9c:	e008      	b.n	ab0 <_spi_set_config+0x54>
     a9e:	3401      	adds	r4, #1
     aa0:	b2e4      	uxtb	r4, r4
     aa2:	2c03      	cmp	r4, #3
     aa4:	d80d      	bhi.n	ac2 <_spi_set_config+0x66>
     aa6:	00a3      	lsls	r3, r4, #2
     aa8:	aa01      	add	r2, sp, #4
     aaa:	5898      	ldr	r0, [r3, r2]
     aac:	2800      	cmp	r0, #0
     aae:	d0f1      	beq.n	a94 <_spi_set_config+0x38>
     ab0:	1c43      	adds	r3, r0, #1
     ab2:	d0f4      	beq.n	a9e <_spi_set_config+0x42>
     ab4:	a905      	add	r1, sp, #20
     ab6:	7008      	strb	r0, [r1, #0]
     ab8:	0c00      	lsrs	r0, r0, #16
     aba:	b2c0      	uxtb	r0, r0
     abc:	4b35      	ldr	r3, [pc, #212]	; (b94 <_spi_set_config+0x138>)
     abe:	4798      	blx	r3
     ac0:	e7ed      	b.n	a9e <_spi_set_config+0x42>
     ac2:	782b      	ldrb	r3, [r5, #0]
     ac4:	717b      	strb	r3, [r7, #5]
     ac6:	7c2b      	ldrb	r3, [r5, #16]
     ac8:	71bb      	strb	r3, [r7, #6]
     aca:	7cab      	ldrb	r3, [r5, #18]
     acc:	71fb      	strb	r3, [r7, #7]
     ace:	7d2b      	ldrb	r3, [r5, #20]
     ad0:	723b      	strb	r3, [r7, #8]
     ad2:	2200      	movs	r2, #0
     ad4:	466b      	mov	r3, sp
     ad6:	805a      	strh	r2, [r3, #2]
     ad8:	782b      	ldrb	r3, [r5, #0]
     ada:	2b01      	cmp	r3, #1
     adc:	d014      	beq.n	b08 <_spi_set_config+0xac>
     ade:	782b      	ldrb	r3, [r5, #0]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d127      	bne.n	b34 <_spi_set_config+0xd8>
     ae4:	69ab      	ldr	r3, [r5, #24]
     ae6:	8baa      	ldrh	r2, [r5, #28]
     ae8:	0011      	movs	r1, r2
     aea:	6a70      	ldr	r0, [r6, #36]	; 0x24
     aec:	7fac      	ldrb	r4, [r5, #30]
     aee:	7fef      	ldrb	r7, [r5, #31]
     af0:	043f      	lsls	r7, r7, #16
     af2:	433c      	orrs	r4, r7
     af4:	4320      	orrs	r0, r4
     af6:	6270      	str	r0, [r6, #36]	; 0x24
     af8:	2020      	movs	r0, #32
     afa:	5c28      	ldrb	r0, [r5, r0]
     afc:	2800      	cmp	r0, #0
     afe:	d01b      	beq.n	b38 <_spi_set_config+0xdc>
     b00:	2140      	movs	r1, #64	; 0x40
     b02:	4311      	orrs	r1, r2
     b04:	b289      	uxth	r1, r1
     b06:	e017      	b.n	b38 <_spi_set_config+0xdc>
     b08:	6838      	ldr	r0, [r7, #0]
     b0a:	4b23      	ldr	r3, [pc, #140]	; (b98 <_spi_set_config+0x13c>)
     b0c:	4798      	blx	r3
     b0e:	3014      	adds	r0, #20
     b10:	b2c0      	uxtb	r0, r0
     b12:	4b22      	ldr	r3, [pc, #136]	; (b9c <_spi_set_config+0x140>)
     b14:	4798      	blx	r3
     b16:	0001      	movs	r1, r0
     b18:	466b      	mov	r3, sp
     b1a:	1c9a      	adds	r2, r3, #2
     b1c:	69a8      	ldr	r0, [r5, #24]
     b1e:	4b20      	ldr	r3, [pc, #128]	; (ba0 <_spi_set_config+0x144>)
     b20:	4798      	blx	r3
     b22:	2800      	cmp	r0, #0
     b24:	d001      	beq.n	b2a <_spi_set_config+0xce>
     b26:	2017      	movs	r0, #23
     b28:	e030      	b.n	b8c <_spi_set_config+0x130>
     b2a:	466b      	mov	r3, sp
     b2c:	3302      	adds	r3, #2
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	7333      	strb	r3, [r6, #12]
     b32:	e7d4      	b.n	ade <_spi_set_config+0x82>
     b34:	2100      	movs	r1, #0
     b36:	2300      	movs	r3, #0
     b38:	686a      	ldr	r2, [r5, #4]
     b3a:	4313      	orrs	r3, r2
     b3c:	68aa      	ldr	r2, [r5, #8]
     b3e:	4313      	orrs	r3, r2
     b40:	68ea      	ldr	r2, [r5, #12]
     b42:	4313      	orrs	r3, r2
     b44:	7c2a      	ldrb	r2, [r5, #16]
     b46:	430a      	orrs	r2, r1
     b48:	7c69      	ldrb	r1, [r5, #17]
     b4a:	2900      	cmp	r1, #0
     b4c:	d103      	bne.n	b56 <_spi_set_config+0xfa>
     b4e:	4915      	ldr	r1, [pc, #84]	; (ba4 <_spi_set_config+0x148>)
     b50:	7889      	ldrb	r1, [r1, #2]
     b52:	0789      	lsls	r1, r1, #30
     b54:	d501      	bpl.n	b5a <_spi_set_config+0xfe>
     b56:	2180      	movs	r1, #128	; 0x80
     b58:	430b      	orrs	r3, r1
     b5a:	7ca9      	ldrb	r1, [r5, #18]
     b5c:	2900      	cmp	r1, #0
     b5e:	d002      	beq.n	b66 <_spi_set_config+0x10a>
     b60:	2180      	movs	r1, #128	; 0x80
     b62:	0289      	lsls	r1, r1, #10
     b64:	430a      	orrs	r2, r1
     b66:	7ce9      	ldrb	r1, [r5, #19]
     b68:	2900      	cmp	r1, #0
     b6a:	d002      	beq.n	b72 <_spi_set_config+0x116>
     b6c:	2180      	movs	r1, #128	; 0x80
     b6e:	0089      	lsls	r1, r1, #2
     b70:	430a      	orrs	r2, r1
     b72:	7d29      	ldrb	r1, [r5, #20]
     b74:	2900      	cmp	r1, #0
     b76:	d002      	beq.n	b7e <_spi_set_config+0x122>
     b78:	2180      	movs	r1, #128	; 0x80
     b7a:	0189      	lsls	r1, r1, #6
     b7c:	430a      	orrs	r2, r1
     b7e:	6831      	ldr	r1, [r6, #0]
     b80:	430b      	orrs	r3, r1
     b82:	6033      	str	r3, [r6, #0]
     b84:	6873      	ldr	r3, [r6, #4]
     b86:	431a      	orrs	r2, r3
     b88:	6072      	str	r2, [r6, #4]
     b8a:	2000      	movs	r0, #0
     b8c:	b007      	add	sp, #28
     b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b90:	000008a9 	.word	0x000008a9
     b94:	0000457d 	.word	0x0000457d
     b98:	00000a21 	.word	0x00000a21
     b9c:	00004461 	.word	0x00004461
     ba0:	00000795 	.word	0x00000795
     ba4:	41002000 	.word	0x41002000

00000ba8 <spi_init>:
     ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
     baa:	b085      	sub	sp, #20
     bac:	0005      	movs	r5, r0
     bae:	000c      	movs	r4, r1
     bb0:	0016      	movs	r6, r2
     bb2:	6029      	str	r1, [r5, #0]
     bb4:	680b      	ldr	r3, [r1, #0]
     bb6:	079b      	lsls	r3, r3, #30
     bb8:	d502      	bpl.n	bc0 <spi_init+0x18>
     bba:	201c      	movs	r0, #28
     bbc:	b005      	add	sp, #20
     bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bc0:	680b      	ldr	r3, [r1, #0]
     bc2:	07db      	lsls	r3, r3, #31
     bc4:	d501      	bpl.n	bca <spi_init+0x22>
     bc6:	2005      	movs	r0, #5
     bc8:	e7f8      	b.n	bbc <spi_init+0x14>
     bca:	0008      	movs	r0, r1
     bcc:	4b28      	ldr	r3, [pc, #160]	; (c70 <spi_init+0xc8>)
     bce:	4798      	blx	r3
     bd0:	1c82      	adds	r2, r0, #2
     bd2:	3014      	adds	r0, #20
     bd4:	2301      	movs	r3, #1
     bd6:	4093      	lsls	r3, r2
     bd8:	4a26      	ldr	r2, [pc, #152]	; (c74 <spi_init+0xcc>)
     bda:	6a11      	ldr	r1, [r2, #32]
     bdc:	430b      	orrs	r3, r1
     bde:	6213      	str	r3, [r2, #32]
     be0:	2724      	movs	r7, #36	; 0x24
     be2:	5df3      	ldrb	r3, [r6, r7]
     be4:	a903      	add	r1, sp, #12
     be6:	700b      	strb	r3, [r1, #0]
     be8:	b2c3      	uxtb	r3, r0
     bea:	9301      	str	r3, [sp, #4]
     bec:	0018      	movs	r0, r3
     bee:	4b22      	ldr	r3, [pc, #136]	; (c78 <spi_init+0xd0>)
     bf0:	4798      	blx	r3
     bf2:	9801      	ldr	r0, [sp, #4]
     bf4:	4b21      	ldr	r3, [pc, #132]	; (c7c <spi_init+0xd4>)
     bf6:	4798      	blx	r3
     bf8:	5df0      	ldrb	r0, [r6, r7]
     bfa:	2100      	movs	r1, #0
     bfc:	4b20      	ldr	r3, [pc, #128]	; (c80 <spi_init+0xd8>)
     bfe:	4798      	blx	r3
     c00:	7833      	ldrb	r3, [r6, #0]
     c02:	2b01      	cmp	r3, #1
     c04:	d008      	beq.n	c18 <spi_init+0x70>
     c06:	7833      	ldrb	r3, [r6, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d103      	bne.n	c14 <spi_init+0x6c>
     c0c:	6823      	ldr	r3, [r4, #0]
     c0e:	2208      	movs	r2, #8
     c10:	4313      	orrs	r3, r2
     c12:	6023      	str	r3, [r4, #0]
     c14:	2300      	movs	r3, #0
     c16:	e00b      	b.n	c30 <spi_init+0x88>
     c18:	6823      	ldr	r3, [r4, #0]
     c1a:	220c      	movs	r2, #12
     c1c:	4313      	orrs	r3, r2
     c1e:	6023      	str	r3, [r4, #0]
     c20:	e7f1      	b.n	c06 <spi_init+0x5e>
     c22:	1c9a      	adds	r2, r3, #2
     c24:	0092      	lsls	r2, r2, #2
     c26:	18aa      	adds	r2, r5, r2
     c28:	2100      	movs	r1, #0
     c2a:	6051      	str	r1, [r2, #4]
     c2c:	3301      	adds	r3, #1
     c2e:	b2db      	uxtb	r3, r3
     c30:	2b06      	cmp	r3, #6
     c32:	d9f6      	bls.n	c22 <spi_init+0x7a>
     c34:	2200      	movs	r2, #0
     c36:	62ea      	str	r2, [r5, #44]	; 0x2c
     c38:	62aa      	str	r2, [r5, #40]	; 0x28
     c3a:	2300      	movs	r3, #0
     c3c:	86aa      	strh	r2, [r5, #52]	; 0x34
     c3e:	862a      	strh	r2, [r5, #48]	; 0x30
     c40:	3236      	adds	r2, #54	; 0x36
     c42:	54ab      	strb	r3, [r5, r2]
     c44:	3201      	adds	r2, #1
     c46:	54ab      	strb	r3, [r5, r2]
     c48:	3201      	adds	r2, #1
     c4a:	54ab      	strb	r3, [r5, r2]
     c4c:	3a35      	subs	r2, #53	; 0x35
     c4e:	726a      	strb	r2, [r5, #9]
     c50:	712b      	strb	r3, [r5, #4]
     c52:	6828      	ldr	r0, [r5, #0]
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <spi_init+0xc8>)
     c56:	4798      	blx	r3
     c58:	0004      	movs	r4, r0
     c5a:	490a      	ldr	r1, [pc, #40]	; (c84 <spi_init+0xdc>)
     c5c:	4b0a      	ldr	r3, [pc, #40]	; (c88 <spi_init+0xe0>)
     c5e:	4798      	blx	r3
     c60:	00a4      	lsls	r4, r4, #2
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <spi_init+0xe4>)
     c64:	50e5      	str	r5, [r4, r3]
     c66:	0031      	movs	r1, r6
     c68:	0028      	movs	r0, r5
     c6a:	4b09      	ldr	r3, [pc, #36]	; (c90 <spi_init+0xe8>)
     c6c:	4798      	blx	r3
     c6e:	e7a5      	b.n	bbc <spi_init+0x14>
     c70:	00000a21 	.word	0x00000a21
     c74:	40000400 	.word	0x40000400
     c78:	00004445 	.word	0x00004445
     c7c:	000043bd 	.word	0x000043bd
     c80:	0000085d 	.word	0x0000085d
     c84:	00001105 	.word	0x00001105
     c88:	00003d89 	.word	0x00003d89
     c8c:	200009ac 	.word	0x200009ac
     c90:	00000a5d 	.word	0x00000a5d

00000c94 <spi_read_buffer_wait>:
     c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c96:	0004      	movs	r4, r0
     c98:	000e      	movs	r6, r1
     c9a:	0017      	movs	r7, r2
     c9c:	001d      	movs	r5, r3
     c9e:	2338      	movs	r3, #56	; 0x38
     ca0:	5cc3      	ldrb	r3, [r0, r3]
     ca2:	2b05      	cmp	r3, #5
     ca4:	d06d      	beq.n	d82 <spi_read_buffer_wait+0xee>
     ca6:	2a00      	cmp	r2, #0
     ca8:	d101      	bne.n	cae <spi_read_buffer_wait+0x1a>
     caa:	2217      	movs	r2, #23
     cac:	e06a      	b.n	d84 <spi_read_buffer_wait+0xf0>
     cae:	79c3      	ldrb	r3, [r0, #7]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d101      	bne.n	cb8 <spi_read_buffer_wait+0x24>
     cb4:	221c      	movs	r2, #28
     cb6:	e065      	b.n	d84 <spi_read_buffer_wait+0xf0>
     cb8:	7943      	ldrb	r3, [r0, #5]
     cba:	2b00      	cmp	r3, #0
     cbc:	d103      	bne.n	cc6 <spi_read_buffer_wait+0x32>
     cbe:	6803      	ldr	r3, [r0, #0]
     cc0:	7e1b      	ldrb	r3, [r3, #24]
     cc2:	079b      	lsls	r3, r3, #30
     cc4:	d401      	bmi.n	cca <spi_read_buffer_wait+0x36>
     cc6:	2000      	movs	r0, #0
     cc8:	e037      	b.n	d3a <spi_read_buffer_wait+0xa6>
     cca:	4b2f      	ldr	r3, [pc, #188]	; (d88 <spi_read_buffer_wait+0xf4>)
     ccc:	4798      	blx	r3
     cce:	e7fa      	b.n	cc6 <spi_read_buffer_wait+0x32>
     cd0:	6823      	ldr	r3, [r4, #0]
     cd2:	7e1a      	ldrb	r2, [r3, #24]
     cd4:	07d2      	lsls	r2, r2, #31
     cd6:	d5fb      	bpl.n	cd0 <spi_read_buffer_wait+0x3c>
     cd8:	7e1a      	ldrb	r2, [r3, #24]
     cda:	07d2      	lsls	r2, r2, #31
     cdc:	d534      	bpl.n	d48 <spi_read_buffer_wait+0xb4>
     cde:	05ea      	lsls	r2, r5, #23
     ce0:	0dd2      	lsrs	r2, r2, #23
     ce2:	629a      	str	r2, [r3, #40]	; 0x28
     ce4:	e030      	b.n	d48 <spi_read_buffer_wait+0xb4>
     ce6:	2300      	movs	r3, #0
     ce8:	4a28      	ldr	r2, [pc, #160]	; (d8c <spi_read_buffer_wait+0xf8>)
     cea:	4293      	cmp	r3, r2
     cec:	d805      	bhi.n	cfa <spi_read_buffer_wait+0x66>
     cee:	6822      	ldr	r2, [r4, #0]
     cf0:	7e12      	ldrb	r2, [r2, #24]
     cf2:	0752      	lsls	r2, r2, #29
     cf4:	d401      	bmi.n	cfa <spi_read_buffer_wait+0x66>
     cf6:	3301      	adds	r3, #1
     cf8:	e7f6      	b.n	ce8 <spi_read_buffer_wait+0x54>
     cfa:	6823      	ldr	r3, [r4, #0]
     cfc:	7e1a      	ldrb	r2, [r3, #24]
     cfe:	0792      	lsls	r2, r2, #30
     d00:	d404      	bmi.n	d0c <spi_read_buffer_wait+0x78>
     d02:	7e1b      	ldrb	r3, [r3, #24]
     d04:	075b      	lsls	r3, r3, #29
     d06:	d422      	bmi.n	d4e <spi_read_buffer_wait+0xba>
     d08:	2212      	movs	r2, #18
     d0a:	e03b      	b.n	d84 <spi_read_buffer_wait+0xf0>
     d0c:	0020      	movs	r0, r4
     d0e:	4b1e      	ldr	r3, [pc, #120]	; (d88 <spi_read_buffer_wait+0xf4>)
     d10:	4798      	blx	r3
     d12:	2204      	movs	r2, #4
     d14:	e036      	b.n	d84 <spi_read_buffer_wait+0xf0>
     d16:	2200      	movs	r2, #0
     d18:	e026      	b.n	d68 <spi_read_buffer_wait+0xd4>
     d1a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d1c:	05ff      	lsls	r7, r7, #23
     d1e:	0dff      	lsrs	r7, r7, #23
     d20:	e001      	b.n	d26 <spi_read_buffer_wait+0x92>
     d22:	2700      	movs	r7, #0
     d24:	2210      	movs	r2, #16
     d26:	2a00      	cmp	r2, #0
     d28:	d12c      	bne.n	d84 <spi_read_buffer_wait+0xf0>
     d2a:	1c43      	adds	r3, r0, #1
     d2c:	b29b      	uxth	r3, r3
     d2e:	5437      	strb	r7, [r6, r0]
     d30:	79a2      	ldrb	r2, [r4, #6]
     d32:	2a01      	cmp	r2, #1
     d34:	d01e      	beq.n	d74 <spi_read_buffer_wait+0xe0>
     d36:	0018      	movs	r0, r3
     d38:	000f      	movs	r7, r1
     d3a:	1e79      	subs	r1, r7, #1
     d3c:	b289      	uxth	r1, r1
     d3e:	2f00      	cmp	r7, #0
     d40:	d01d      	beq.n	d7e <spi_read_buffer_wait+0xea>
     d42:	7963      	ldrb	r3, [r4, #5]
     d44:	2b01      	cmp	r3, #1
     d46:	d0c3      	beq.n	cd0 <spi_read_buffer_wait+0x3c>
     d48:	7963      	ldrb	r3, [r4, #5]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d0cb      	beq.n	ce6 <spi_read_buffer_wait+0x52>
     d4e:	6823      	ldr	r3, [r4, #0]
     d50:	7e1a      	ldrb	r2, [r3, #24]
     d52:	0752      	lsls	r2, r2, #29
     d54:	d5fb      	bpl.n	d4e <spi_read_buffer_wait+0xba>
     d56:	7e1a      	ldrb	r2, [r3, #24]
     d58:	0752      	lsls	r2, r2, #29
     d5a:	d5e2      	bpl.n	d22 <spi_read_buffer_wait+0x8e>
     d5c:	8b5a      	ldrh	r2, [r3, #26]
     d5e:	0752      	lsls	r2, r2, #29
     d60:	d5d9      	bpl.n	d16 <spi_read_buffer_wait+0x82>
     d62:	2204      	movs	r2, #4
     d64:	835a      	strh	r2, [r3, #26]
     d66:	321a      	adds	r2, #26
     d68:	79a7      	ldrb	r7, [r4, #6]
     d6a:	2f01      	cmp	r7, #1
     d6c:	d0d5      	beq.n	d1a <spi_read_buffer_wait+0x86>
     d6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d70:	b2ff      	uxtb	r7, r7
     d72:	e7d8      	b.n	d26 <spi_read_buffer_wait+0x92>
     d74:	3002      	adds	r0, #2
     d76:	0a3f      	lsrs	r7, r7, #8
     d78:	54f7      	strb	r7, [r6, r3]
     d7a:	b283      	uxth	r3, r0
     d7c:	e7db      	b.n	d36 <spi_read_buffer_wait+0xa2>
     d7e:	2200      	movs	r2, #0
     d80:	e000      	b.n	d84 <spi_read_buffer_wait+0xf0>
     d82:	2205      	movs	r2, #5
     d84:	0010      	movs	r0, r2
     d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d88:	00000a55 	.word	0x00000a55
     d8c:	00002710 	.word	0x00002710

00000d90 <spi_select_slave>:
     d90:	b510      	push	{r4, lr}
     d92:	7943      	ldrb	r3, [r0, #5]
     d94:	2b01      	cmp	r3, #1
     d96:	d001      	beq.n	d9c <spi_select_slave+0xc>
     d98:	2015      	movs	r0, #21
     d9a:	bd10      	pop	{r4, pc}
     d9c:	7a03      	ldrb	r3, [r0, #8]
     d9e:	2b00      	cmp	r3, #0
     da0:	d16c      	bne.n	e7c <spi_select_slave+0xec>
     da2:	2a00      	cmp	r2, #0
     da4:	d058      	beq.n	e58 <spi_select_slave+0xc8>
     da6:	784b      	ldrb	r3, [r1, #1]
     da8:	2b00      	cmp	r3, #0
     daa:	d043      	beq.n	e34 <spi_select_slave+0xa4>
     dac:	6803      	ldr	r3, [r0, #0]
     dae:	7e1b      	ldrb	r3, [r3, #24]
     db0:	07db      	lsls	r3, r3, #31
     db2:	d411      	bmi.n	dd8 <spi_select_slave+0x48>
     db4:	780a      	ldrb	r2, [r1, #0]
     db6:	09d1      	lsrs	r1, r2, #7
     db8:	0953      	lsrs	r3, r2, #5
     dba:	2900      	cmp	r1, #0
     dbc:	d10a      	bne.n	dd4 <spi_select_slave+0x44>
     dbe:	01db      	lsls	r3, r3, #7
     dc0:	4931      	ldr	r1, [pc, #196]	; (e88 <spi_select_slave+0xf8>)
     dc2:	468c      	mov	ip, r1
     dc4:	4463      	add	r3, ip
     dc6:	211f      	movs	r1, #31
     dc8:	4011      	ands	r1, r2
     dca:	2201      	movs	r2, #1
     dcc:	408a      	lsls	r2, r1
     dce:	619a      	str	r2, [r3, #24]
     dd0:	2005      	movs	r0, #5
     dd2:	e7e2      	b.n	d9a <spi_select_slave+0xa>
     dd4:	2300      	movs	r3, #0
     dd6:	e7f6      	b.n	dc6 <spi_select_slave+0x36>
     dd8:	780a      	ldrb	r2, [r1, #0]
     dda:	09d4      	lsrs	r4, r2, #7
     ddc:	0953      	lsrs	r3, r2, #5
     dde:	2c00      	cmp	r4, #0
     de0:	d104      	bne.n	dec <spi_select_slave+0x5c>
     de2:	01db      	lsls	r3, r3, #7
     de4:	4c28      	ldr	r4, [pc, #160]	; (e88 <spi_select_slave+0xf8>)
     de6:	46a4      	mov	ip, r4
     de8:	4463      	add	r3, ip
     dea:	e000      	b.n	dee <spi_select_slave+0x5e>
     dec:	2300      	movs	r3, #0
     dee:	241f      	movs	r4, #31
     df0:	4014      	ands	r4, r2
     df2:	2201      	movs	r2, #1
     df4:	40a2      	lsls	r2, r4
     df6:	615a      	str	r2, [r3, #20]
     df8:	788a      	ldrb	r2, [r1, #2]
     dfa:	6803      	ldr	r3, [r0, #0]
     dfc:	7e19      	ldrb	r1, [r3, #24]
     dfe:	07c9      	lsls	r1, r1, #31
     e00:	d500      	bpl.n	e04 <spi_select_slave+0x74>
     e02:	629a      	str	r2, [r3, #40]	; 0x28
     e04:	79c3      	ldrb	r3, [r0, #7]
     e06:	2b00      	cmp	r3, #0
     e08:	d13a      	bne.n	e80 <spi_select_slave+0xf0>
     e0a:	6803      	ldr	r3, [r0, #0]
     e0c:	7e1a      	ldrb	r2, [r3, #24]
     e0e:	0752      	lsls	r2, r2, #29
     e10:	d5fb      	bpl.n	e0a <spi_select_slave+0x7a>
     e12:	7e1a      	ldrb	r2, [r3, #24]
     e14:	0752      	lsls	r2, r2, #29
     e16:	d535      	bpl.n	e84 <spi_select_slave+0xf4>
     e18:	8b5a      	ldrh	r2, [r3, #26]
     e1a:	0752      	lsls	r2, r2, #29
     e1c:	d501      	bpl.n	e22 <spi_select_slave+0x92>
     e1e:	2204      	movs	r2, #4
     e20:	835a      	strh	r2, [r3, #26]
     e22:	7982      	ldrb	r2, [r0, #6]
     e24:	2a01      	cmp	r2, #1
     e26:	d002      	beq.n	e2e <spi_select_slave+0x9e>
     e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e2a:	2000      	movs	r0, #0
     e2c:	e7b5      	b.n	d9a <spi_select_slave+0xa>
     e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e30:	2000      	movs	r0, #0
     e32:	e7b2      	b.n	d9a <spi_select_slave+0xa>
     e34:	780a      	ldrb	r2, [r1, #0]
     e36:	09d1      	lsrs	r1, r2, #7
     e38:	0953      	lsrs	r3, r2, #5
     e3a:	2900      	cmp	r1, #0
     e3c:	d10a      	bne.n	e54 <spi_select_slave+0xc4>
     e3e:	01db      	lsls	r3, r3, #7
     e40:	4911      	ldr	r1, [pc, #68]	; (e88 <spi_select_slave+0xf8>)
     e42:	468c      	mov	ip, r1
     e44:	4463      	add	r3, ip
     e46:	211f      	movs	r1, #31
     e48:	4011      	ands	r1, r2
     e4a:	2201      	movs	r2, #1
     e4c:	408a      	lsls	r2, r1
     e4e:	615a      	str	r2, [r3, #20]
     e50:	2000      	movs	r0, #0
     e52:	e7a2      	b.n	d9a <spi_select_slave+0xa>
     e54:	2300      	movs	r3, #0
     e56:	e7f6      	b.n	e46 <spi_select_slave+0xb6>
     e58:	780a      	ldrb	r2, [r1, #0]
     e5a:	09d1      	lsrs	r1, r2, #7
     e5c:	0953      	lsrs	r3, r2, #5
     e5e:	2900      	cmp	r1, #0
     e60:	d10a      	bne.n	e78 <spi_select_slave+0xe8>
     e62:	01db      	lsls	r3, r3, #7
     e64:	4908      	ldr	r1, [pc, #32]	; (e88 <spi_select_slave+0xf8>)
     e66:	468c      	mov	ip, r1
     e68:	4463      	add	r3, ip
     e6a:	211f      	movs	r1, #31
     e6c:	4011      	ands	r1, r2
     e6e:	2201      	movs	r2, #1
     e70:	408a      	lsls	r2, r1
     e72:	619a      	str	r2, [r3, #24]
     e74:	2000      	movs	r0, #0
     e76:	e790      	b.n	d9a <spi_select_slave+0xa>
     e78:	2300      	movs	r3, #0
     e7a:	e7f6      	b.n	e6a <spi_select_slave+0xda>
     e7c:	2000      	movs	r0, #0
     e7e:	e78c      	b.n	d9a <spi_select_slave+0xa>
     e80:	2000      	movs	r0, #0
     e82:	e78a      	b.n	d9a <spi_select_slave+0xa>
     e84:	2000      	movs	r0, #0
     e86:	e788      	b.n	d9a <spi_select_slave+0xa>
     e88:	41004400 	.word	0x41004400

00000e8c <spi_write_buffer_wait>:
     e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8e:	46d6      	mov	lr, sl
     e90:	464f      	mov	r7, r9
     e92:	4646      	mov	r6, r8
     e94:	b5c0      	push	{r6, r7, lr}
     e96:	b082      	sub	sp, #8
     e98:	0004      	movs	r4, r0
     e9a:	468a      	mov	sl, r1
     e9c:	0017      	movs	r7, r2
     e9e:	2338      	movs	r3, #56	; 0x38
     ea0:	5cc3      	ldrb	r3, [r0, r3]
     ea2:	2b05      	cmp	r3, #5
     ea4:	d100      	bne.n	ea8 <spi_write_buffer_wait+0x1c>
     ea6:	e0d8      	b.n	105a <spi_write_buffer_wait+0x1ce>
     ea8:	2a00      	cmp	r2, #0
     eaa:	d101      	bne.n	eb0 <spi_write_buffer_wait+0x24>
     eac:	2017      	movs	r0, #23
     eae:	e0d5      	b.n	105c <spi_write_buffer_wait+0x1d0>
     eb0:	7943      	ldrb	r3, [r0, #5]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d103      	bne.n	ebe <spi_write_buffer_wait+0x32>
     eb6:	6803      	ldr	r3, [r0, #0]
     eb8:	7e1b      	ldrb	r3, [r3, #24]
     eba:	079b      	lsls	r3, r3, #30
     ebc:	d402      	bmi.n	ec4 <spi_write_buffer_wait+0x38>
     ebe:	46bc      	mov	ip, r7
     ec0:	2600      	movs	r6, #0
     ec2:	e025      	b.n	f10 <spi_write_buffer_wait+0x84>
     ec4:	4b6a      	ldr	r3, [pc, #424]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ec6:	4798      	blx	r3
     ec8:	e7f9      	b.n	ebe <spi_write_buffer_wait+0x32>
     eca:	2300      	movs	r3, #0
     ecc:	4a69      	ldr	r2, [pc, #420]	; (1074 <spi_write_buffer_wait+0x1e8>)
     ece:	4293      	cmp	r3, r2
     ed0:	d805      	bhi.n	ede <spi_write_buffer_wait+0x52>
     ed2:	6822      	ldr	r2, [r4, #0]
     ed4:	7e12      	ldrb	r2, [r2, #24]
     ed6:	07d2      	lsls	r2, r2, #31
     ed8:	d401      	bmi.n	ede <spi_write_buffer_wait+0x52>
     eda:	3301      	adds	r3, #1
     edc:	e7f6      	b.n	ecc <spi_write_buffer_wait+0x40>
     ede:	6823      	ldr	r3, [r4, #0]
     ee0:	7e1a      	ldrb	r2, [r3, #24]
     ee2:	0792      	lsls	r2, r2, #30
     ee4:	d404      	bmi.n	ef0 <spi_write_buffer_wait+0x64>
     ee6:	7e1b      	ldrb	r3, [r3, #24]
     ee8:	07db      	lsls	r3, r3, #31
     eea:	d418      	bmi.n	f1e <spi_write_buffer_wait+0x92>
     eec:	2012      	movs	r0, #18
     eee:	e0b5      	b.n	105c <spi_write_buffer_wait+0x1d0>
     ef0:	0020      	movs	r0, r4
     ef2:	4b5f      	ldr	r3, [pc, #380]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ef4:	4798      	blx	r3
     ef6:	2004      	movs	r0, #4
     ef8:	e0b0      	b.n	105c <spi_write_buffer_wait+0x1d0>
     efa:	3602      	adds	r6, #2
     efc:	b2b6      	uxth	r6, r6
     efe:	4652      	mov	r2, sl
     f00:	5dd2      	ldrb	r2, [r2, r7]
     f02:	0212      	lsls	r2, r2, #8
     f04:	4302      	orrs	r2, r0
     f06:	e017      	b.n	f38 <spi_write_buffer_wait+0xac>
     f08:	79e3      	ldrb	r3, [r4, #7]
     f0a:	000f      	movs	r7, r1
     f0c:	2b00      	cmp	r3, #0
     f0e:	d11a      	bne.n	f46 <spi_write_buffer_wait+0xba>
     f10:	1e79      	subs	r1, r7, #1
     f12:	b289      	uxth	r1, r1
     f14:	2f00      	cmp	r7, #0
     f16:	d06c      	beq.n	ff2 <spi_write_buffer_wait+0x166>
     f18:	7963      	ldrb	r3, [r4, #5]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d0d5      	beq.n	eca <spi_write_buffer_wait+0x3e>
     f1e:	6823      	ldr	r3, [r4, #0]
     f20:	7e1a      	ldrb	r2, [r3, #24]
     f22:	07d2      	lsls	r2, r2, #31
     f24:	d5fb      	bpl.n	f1e <spi_write_buffer_wait+0x92>
     f26:	1c77      	adds	r7, r6, #1
     f28:	b2bf      	uxth	r7, r7
     f2a:	4652      	mov	r2, sl
     f2c:	5d90      	ldrb	r0, [r2, r6]
     f2e:	b282      	uxth	r2, r0
     f30:	79a5      	ldrb	r5, [r4, #6]
     f32:	2d01      	cmp	r5, #1
     f34:	d0e1      	beq.n	efa <spi_write_buffer_wait+0x6e>
     f36:	003e      	movs	r6, r7
     f38:	7e1f      	ldrb	r7, [r3, #24]
     f3a:	07f8      	lsls	r0, r7, #31
     f3c:	d5e4      	bpl.n	f08 <spi_write_buffer_wait+0x7c>
     f3e:	05d2      	lsls	r2, r2, #23
     f40:	0dd2      	lsrs	r2, r2, #23
     f42:	629a      	str	r2, [r3, #40]	; 0x28
     f44:	e7e0      	b.n	f08 <spi_write_buffer_wait+0x7c>
     f46:	7963      	ldrb	r3, [r4, #5]
     f48:	2b00      	cmp	r3, #0
     f4a:	d040      	beq.n	fce <spi_write_buffer_wait+0x142>
     f4c:	6823      	ldr	r3, [r4, #0]
     f4e:	7e1a      	ldrb	r2, [r3, #24]
     f50:	0752      	lsls	r2, r2, #29
     f52:	d5fb      	bpl.n	f4c <spi_write_buffer_wait+0xc0>
     f54:	7e1a      	ldrb	r2, [r3, #24]
     f56:	0752      	lsls	r2, r2, #29
     f58:	d508      	bpl.n	f6c <spi_write_buffer_wait+0xe0>
     f5a:	8b5a      	ldrh	r2, [r3, #26]
     f5c:	0752      	lsls	r2, r2, #29
     f5e:	d501      	bpl.n	f64 <spi_write_buffer_wait+0xd8>
     f60:	2204      	movs	r2, #4
     f62:	835a      	strh	r2, [r3, #26]
     f64:	79a2      	ldrb	r2, [r4, #6]
     f66:	2a01      	cmp	r2, #1
     f68:	d041      	beq.n	fee <spi_write_buffer_wait+0x162>
     f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f6c:	4660      	mov	r0, ip
     f6e:	3801      	subs	r0, #1
     f70:	b283      	uxth	r3, r0
     f72:	469c      	mov	ip, r3
     f74:	000f      	movs	r7, r1
     f76:	e7cb      	b.n	f10 <spi_write_buffer_wait+0x84>
     f78:	3602      	adds	r6, #2
     f7a:	4655      	mov	r5, sl
     f7c:	5c2f      	ldrb	r7, [r5, r0]
     f7e:	023f      	lsls	r7, r7, #8
     f80:	4640      	mov	r0, r8
     f82:	4307      	orrs	r7, r0
     f84:	b2b0      	uxth	r0, r6
     f86:	e01b      	b.n	fc0 <spi_write_buffer_wait+0x134>
     f88:	3901      	subs	r1, #1
     f8a:	b289      	uxth	r1, r1
     f8c:	0006      	movs	r6, r0
     f8e:	6822      	ldr	r2, [r4, #0]
     f90:	7e12      	ldrb	r2, [r2, #24]
     f92:	0752      	lsls	r2, r2, #29
     f94:	d41d      	bmi.n	fd2 <spi_write_buffer_wait+0x146>
     f96:	3301      	adds	r3, #1
     f98:	4a36      	ldr	r2, [pc, #216]	; (1074 <spi_write_buffer_wait+0x1e8>)
     f9a:	4293      	cmp	r3, r2
     f9c:	d819      	bhi.n	fd2 <spi_write_buffer_wait+0x146>
     f9e:	2900      	cmp	r1, #0
     fa0:	d0f5      	beq.n	f8e <spi_write_buffer_wait+0x102>
     fa2:	6822      	ldr	r2, [r4, #0]
     fa4:	7e17      	ldrb	r7, [r2, #24]
     fa6:	07f8      	lsls	r0, r7, #31
     fa8:	d5f1      	bpl.n	f8e <spi_write_buffer_wait+0x102>
     faa:	1c70      	adds	r0, r6, #1
     fac:	b280      	uxth	r0, r0
     fae:	4655      	mov	r5, sl
     fb0:	5dad      	ldrb	r5, [r5, r6]
     fb2:	46a8      	mov	r8, r5
     fb4:	466f      	mov	r7, sp
     fb6:	80fd      	strh	r5, [r7, #6]
     fb8:	88ff      	ldrh	r7, [r7, #6]
     fba:	79a5      	ldrb	r5, [r4, #6]
     fbc:	2d01      	cmp	r5, #1
     fbe:	d0db      	beq.n	f78 <spi_write_buffer_wait+0xec>
     fc0:	7e16      	ldrb	r6, [r2, #24]
     fc2:	07f5      	lsls	r5, r6, #31
     fc4:	d5e0      	bpl.n	f88 <spi_write_buffer_wait+0xfc>
     fc6:	05ff      	lsls	r7, r7, #23
     fc8:	0dff      	lsrs	r7, r7, #23
     fca:	6297      	str	r7, [r2, #40]	; 0x28
     fcc:	e7dc      	b.n	f88 <spi_write_buffer_wait+0xfc>
     fce:	2300      	movs	r3, #0
     fd0:	e7e2      	b.n	f98 <spi_write_buffer_wait+0x10c>
     fd2:	6823      	ldr	r3, [r4, #0]
     fd4:	7e1a      	ldrb	r2, [r3, #24]
     fd6:	0792      	lsls	r2, r2, #30
     fd8:	d404      	bmi.n	fe4 <spi_write_buffer_wait+0x158>
     fda:	7e1b      	ldrb	r3, [r3, #24]
     fdc:	075b      	lsls	r3, r3, #29
     fde:	d4b5      	bmi.n	f4c <spi_write_buffer_wait+0xc0>
     fe0:	2012      	movs	r0, #18
     fe2:	e03b      	b.n	105c <spi_write_buffer_wait+0x1d0>
     fe4:	0020      	movs	r0, r4
     fe6:	4b22      	ldr	r3, [pc, #136]	; (1070 <spi_write_buffer_wait+0x1e4>)
     fe8:	4798      	blx	r3
     fea:	2004      	movs	r0, #4
     fec:	e036      	b.n	105c <spi_write_buffer_wait+0x1d0>
     fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ff0:	e7bc      	b.n	f6c <spi_write_buffer_wait+0xe0>
     ff2:	7962      	ldrb	r2, [r4, #5]
     ff4:	2a01      	cmp	r2, #1
     ff6:	d006      	beq.n	1006 <spi_write_buffer_wait+0x17a>
     ff8:	2a00      	cmp	r2, #0
     ffa:	d135      	bne.n	1068 <spi_write_buffer_wait+0x1dc>
     ffc:	79e3      	ldrb	r3, [r4, #7]
     ffe:	2b00      	cmp	r3, #0
    1000:	d11a      	bne.n	1038 <spi_write_buffer_wait+0x1ac>
    1002:	2000      	movs	r0, #0
    1004:	e02a      	b.n	105c <spi_write_buffer_wait+0x1d0>
    1006:	6823      	ldr	r3, [r4, #0]
    1008:	7e1b      	ldrb	r3, [r3, #24]
    100a:	079b      	lsls	r3, r3, #30
    100c:	d5fb      	bpl.n	1006 <spi_write_buffer_wait+0x17a>
    100e:	e7f3      	b.n	ff8 <spi_write_buffer_wait+0x16c>
    1010:	6823      	ldr	r3, [r4, #0]
    1012:	7e1a      	ldrb	r2, [r3, #24]
    1014:	0752      	lsls	r2, r2, #29
    1016:	d529      	bpl.n	106c <spi_write_buffer_wait+0x1e0>
    1018:	7e1a      	ldrb	r2, [r3, #24]
    101a:	0752      	lsls	r2, r2, #29
    101c:	d508      	bpl.n	1030 <spi_write_buffer_wait+0x1a4>
    101e:	8b5a      	ldrh	r2, [r3, #26]
    1020:	0752      	lsls	r2, r2, #29
    1022:	d501      	bpl.n	1028 <spi_write_buffer_wait+0x19c>
    1024:	2204      	movs	r2, #4
    1026:	835a      	strh	r2, [r3, #26]
    1028:	79a2      	ldrb	r2, [r4, #6]
    102a:	2a01      	cmp	r2, #1
    102c:	d011      	beq.n	1052 <spi_write_buffer_wait+0x1c6>
    102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1030:	4660      	mov	r0, ip
    1032:	3801      	subs	r0, #1
    1034:	b283      	uxth	r3, r0
    1036:	469c      	mov	ip, r3
    1038:	4663      	mov	r3, ip
    103a:	2b00      	cmp	r3, #0
    103c:	d00b      	beq.n	1056 <spi_write_buffer_wait+0x1ca>
    103e:	2300      	movs	r3, #0
    1040:	4a0c      	ldr	r2, [pc, #48]	; (1074 <spi_write_buffer_wait+0x1e8>)
    1042:	4293      	cmp	r3, r2
    1044:	d8e4      	bhi.n	1010 <spi_write_buffer_wait+0x184>
    1046:	6822      	ldr	r2, [r4, #0]
    1048:	7e12      	ldrb	r2, [r2, #24]
    104a:	0752      	lsls	r2, r2, #29
    104c:	d4e0      	bmi.n	1010 <spi_write_buffer_wait+0x184>
    104e:	3301      	adds	r3, #1
    1050:	e7f6      	b.n	1040 <spi_write_buffer_wait+0x1b4>
    1052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1054:	e7ec      	b.n	1030 <spi_write_buffer_wait+0x1a4>
    1056:	2000      	movs	r0, #0
    1058:	e000      	b.n	105c <spi_write_buffer_wait+0x1d0>
    105a:	2005      	movs	r0, #5
    105c:	b002      	add	sp, #8
    105e:	bc1c      	pop	{r2, r3, r4}
    1060:	4690      	mov	r8, r2
    1062:	4699      	mov	r9, r3
    1064:	46a2      	mov	sl, r4
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1068:	2000      	movs	r0, #0
    106a:	e7f7      	b.n	105c <spi_write_buffer_wait+0x1d0>
    106c:	2012      	movs	r0, #18
    106e:	e7f5      	b.n	105c <spi_write_buffer_wait+0x1d0>
    1070:	00000a55 	.word	0x00000a55
    1074:	00002710 	.word	0x00002710

00001078 <_spi_write>:
    1078:	b570      	push	{r4, r5, r6, lr}
    107a:	6805      	ldr	r5, [r0, #0]
    107c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    107e:	780a      	ldrb	r2, [r1, #0]
    1080:	b2d2      	uxtb	r2, r2
    1082:	b293      	uxth	r3, r2
    1084:	1c4c      	adds	r4, r1, #1
    1086:	62c4      	str	r4, [r0, #44]	; 0x2c
    1088:	7986      	ldrb	r6, [r0, #6]
    108a:	2e01      	cmp	r6, #1
    108c:	d007      	beq.n	109e <_spi_write+0x26>
    108e:	05db      	lsls	r3, r3, #23
    1090:	0ddb      	lsrs	r3, r3, #23
    1092:	62ab      	str	r3, [r5, #40]	; 0x28
    1094:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1096:	3b01      	subs	r3, #1
    1098:	b29b      	uxth	r3, r3
    109a:	8683      	strh	r3, [r0, #52]	; 0x34
    109c:	bd70      	pop	{r4, r5, r6, pc}
    109e:	784b      	ldrb	r3, [r1, #1]
    10a0:	021b      	lsls	r3, r3, #8
    10a2:	4313      	orrs	r3, r2
    10a4:	1c8c      	adds	r4, r1, #2
    10a6:	62c4      	str	r4, [r0, #44]	; 0x2c
    10a8:	e7f1      	b.n	108e <_spi_write+0x16>
	...

000010ac <_spi_write_dummy>:
    10ac:	6803      	ldr	r3, [r0, #0]
    10ae:	4a04      	ldr	r2, [pc, #16]	; (10c0 <_spi_write_dummy+0x14>)
    10b0:	8812      	ldrh	r2, [r2, #0]
    10b2:	629a      	str	r2, [r3, #40]	; 0x28
    10b4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    10b6:	3b01      	subs	r3, #1
    10b8:	b29b      	uxth	r3, r3
    10ba:	8643      	strh	r3, [r0, #50]	; 0x32
    10bc:	4770      	bx	lr
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	200003ec 	.word	0x200003ec

000010c4 <_spi_read_dummy>:
    10c4:	6803      	ldr	r3, [r0, #0]
    10c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10c8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    10ca:	3b01      	subs	r3, #1
    10cc:	b29b      	uxth	r3, r3
    10ce:	8643      	strh	r3, [r0, #50]	; 0x32
    10d0:	4770      	bx	lr

000010d2 <_spi_read>:
    10d2:	6803      	ldr	r3, [r0, #0]
    10d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10d6:	05db      	lsls	r3, r3, #23
    10d8:	0ddb      	lsrs	r3, r3, #23
    10da:	b2da      	uxtb	r2, r3
    10dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
    10de:	700a      	strb	r2, [r1, #0]
    10e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
    10e2:	1c51      	adds	r1, r2, #1
    10e4:	6281      	str	r1, [r0, #40]	; 0x28
    10e6:	7981      	ldrb	r1, [r0, #6]
    10e8:	2901      	cmp	r1, #1
    10ea:	d004      	beq.n	10f6 <_spi_read+0x24>
    10ec:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    10ee:	3b01      	subs	r3, #1
    10f0:	b29b      	uxth	r3, r3
    10f2:	8603      	strh	r3, [r0, #48]	; 0x30
    10f4:	4770      	bx	lr
    10f6:	0a1b      	lsrs	r3, r3, #8
    10f8:	7053      	strb	r3, [r2, #1]
    10fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    10fc:	3301      	adds	r3, #1
    10fe:	6283      	str	r3, [r0, #40]	; 0x28
    1100:	e7f4      	b.n	10ec <_spi_read+0x1a>
	...

00001104 <_spi_interrupt_handler>:
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1106:	0080      	lsls	r0, r0, #2
    1108:	4b6b      	ldr	r3, [pc, #428]	; (12b8 <_spi_interrupt_handler+0x1b4>)
    110a:	58c4      	ldr	r4, [r0, r3]
    110c:	6826      	ldr	r6, [r4, #0]
    110e:	2337      	movs	r3, #55	; 0x37
    1110:	5ce3      	ldrb	r3, [r4, r3]
    1112:	2236      	movs	r2, #54	; 0x36
    1114:	5ca7      	ldrb	r7, [r4, r2]
    1116:	401f      	ands	r7, r3
    1118:	7e33      	ldrb	r3, [r6, #24]
    111a:	7db5      	ldrb	r5, [r6, #22]
    111c:	401d      	ands	r5, r3
    111e:	07eb      	lsls	r3, r5, #31
    1120:	d516      	bpl.n	1150 <_spi_interrupt_handler+0x4c>
    1122:	7963      	ldrb	r3, [r4, #5]
    1124:	2b01      	cmp	r3, #1
    1126:	d04d      	beq.n	11c4 <_spi_interrupt_handler+0xc0>
    1128:	7963      	ldrb	r3, [r4, #5]
    112a:	2b01      	cmp	r3, #1
    112c:	d057      	beq.n	11de <_spi_interrupt_handler+0xda>
    112e:	2b00      	cmp	r3, #0
    1130:	d10e      	bne.n	1150 <_spi_interrupt_handler+0x4c>
    1132:	7a63      	ldrb	r3, [r4, #9]
    1134:	2b00      	cmp	r3, #0
    1136:	d00b      	beq.n	1150 <_spi_interrupt_handler+0x4c>
    1138:	0020      	movs	r0, r4
    113a:	4b60      	ldr	r3, [pc, #384]	; (12bc <_spi_interrupt_handler+0x1b8>)
    113c:	4798      	blx	r3
    113e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1140:	b29b      	uxth	r3, r3
    1142:	2b00      	cmp	r3, #0
    1144:	d104      	bne.n	1150 <_spi_interrupt_handler+0x4c>
    1146:	3301      	adds	r3, #1
    1148:	7533      	strb	r3, [r6, #20]
    114a:	7a63      	ldrb	r3, [r4, #9]
    114c:	2b01      	cmp	r3, #1
    114e:	d04a      	beq.n	11e6 <_spi_interrupt_handler+0xe2>
    1150:	076b      	lsls	r3, r5, #29
    1152:	d511      	bpl.n	1178 <_spi_interrupt_handler+0x74>
    1154:	8b73      	ldrh	r3, [r6, #26]
    1156:	075b      	lsls	r3, r3, #29
    1158:	d54f      	bpl.n	11fa <_spi_interrupt_handler+0xf6>
    115a:	7a63      	ldrb	r3, [r4, #9]
    115c:	2b01      	cmp	r3, #1
    115e:	d008      	beq.n	1172 <_spi_interrupt_handler+0x6e>
    1160:	221e      	movs	r2, #30
    1162:	2338      	movs	r3, #56	; 0x38
    1164:	54e2      	strb	r2, [r4, r3]
    1166:	3b35      	subs	r3, #53	; 0x35
    1168:	7263      	strb	r3, [r4, #9]
    116a:	3302      	adds	r3, #2
    116c:	7533      	strb	r3, [r6, #20]
    116e:	073b      	lsls	r3, r7, #28
    1170:	d43f      	bmi.n	11f2 <_spi_interrupt_handler+0xee>
    1172:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1174:	2304      	movs	r3, #4
    1176:	8373      	strh	r3, [r6, #26]
    1178:	07ab      	lsls	r3, r5, #30
    117a:	d513      	bpl.n	11a4 <_spi_interrupt_handler+0xa0>
    117c:	7963      	ldrb	r3, [r4, #5]
    117e:	2b00      	cmp	r3, #0
    1180:	d10d      	bne.n	119e <_spi_interrupt_handler+0x9a>
    1182:	3307      	adds	r3, #7
    1184:	7533      	strb	r3, [r6, #20]
    1186:	3b05      	subs	r3, #5
    1188:	7633      	strb	r3, [r6, #24]
    118a:	3301      	adds	r3, #1
    118c:	7263      	strb	r3, [r4, #9]
    118e:	2300      	movs	r3, #0
    1190:	86a3      	strh	r3, [r4, #52]	; 0x34
    1192:	8623      	strh	r3, [r4, #48]	; 0x30
    1194:	3338      	adds	r3, #56	; 0x38
    1196:	2200      	movs	r2, #0
    1198:	54e2      	strb	r2, [r4, r3]
    119a:	06fb      	lsls	r3, r7, #27
    119c:	d464      	bmi.n	1268 <_spi_interrupt_handler+0x164>
    119e:	7963      	ldrb	r3, [r4, #5]
    11a0:	2b01      	cmp	r3, #1
    11a2:	d065      	beq.n	1270 <_spi_interrupt_handler+0x16c>
    11a4:	072b      	lsls	r3, r5, #28
    11a6:	d508      	bpl.n	11ba <_spi_interrupt_handler+0xb6>
    11a8:	7963      	ldrb	r3, [r4, #5]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d105      	bne.n	11ba <_spi_interrupt_handler+0xb6>
    11ae:	3308      	adds	r3, #8
    11b0:	7533      	strb	r3, [r6, #20]
    11b2:	7633      	strb	r3, [r6, #24]
    11b4:	06bb      	lsls	r3, r7, #26
    11b6:	d500      	bpl.n	11ba <_spi_interrupt_handler+0xb6>
    11b8:	e070      	b.n	129c <_spi_interrupt_handler+0x198>
    11ba:	b26d      	sxtb	r5, r5
    11bc:	2d00      	cmp	r5, #0
    11be:	da00      	bge.n	11c2 <_spi_interrupt_handler+0xbe>
    11c0:	e070      	b.n	12a4 <_spi_interrupt_handler+0x1a0>
    11c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11c4:	7a63      	ldrb	r3, [r4, #9]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d1ae      	bne.n	1128 <_spi_interrupt_handler+0x24>
    11ca:	0020      	movs	r0, r4
    11cc:	4b3c      	ldr	r3, [pc, #240]	; (12c0 <_spi_interrupt_handler+0x1bc>)
    11ce:	4798      	blx	r3
    11d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    11d2:	b29b      	uxth	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	d1a7      	bne.n	1128 <_spi_interrupt_handler+0x24>
    11d8:	3301      	adds	r3, #1
    11da:	7533      	strb	r3, [r6, #20]
    11dc:	e7a4      	b.n	1128 <_spi_interrupt_handler+0x24>
    11de:	7a62      	ldrb	r2, [r4, #9]
    11e0:	2a00      	cmp	r2, #0
    11e2:	d1a9      	bne.n	1138 <_spi_interrupt_handler+0x34>
    11e4:	e7a3      	b.n	112e <_spi_interrupt_handler+0x2a>
    11e6:	79e3      	ldrb	r3, [r4, #7]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d1b1      	bne.n	1150 <_spi_interrupt_handler+0x4c>
    11ec:	3302      	adds	r3, #2
    11ee:	75b3      	strb	r3, [r6, #22]
    11f0:	e7ae      	b.n	1150 <_spi_interrupt_handler+0x4c>
    11f2:	0020      	movs	r0, r4
    11f4:	69a3      	ldr	r3, [r4, #24]
    11f6:	4798      	blx	r3
    11f8:	e7bb      	b.n	1172 <_spi_interrupt_handler+0x6e>
    11fa:	7a63      	ldrb	r3, [r4, #9]
    11fc:	2b01      	cmp	r3, #1
    11fe:	d017      	beq.n	1230 <_spi_interrupt_handler+0x12c>
    1200:	0020      	movs	r0, r4
    1202:	4b30      	ldr	r3, [pc, #192]	; (12c4 <_spi_interrupt_handler+0x1c0>)
    1204:	4798      	blx	r3
    1206:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1208:	b29b      	uxth	r3, r3
    120a:	2b00      	cmp	r3, #0
    120c:	d1b4      	bne.n	1178 <_spi_interrupt_handler+0x74>
    120e:	2200      	movs	r2, #0
    1210:	3338      	adds	r3, #56	; 0x38
    1212:	54e2      	strb	r2, [r4, r3]
    1214:	3b34      	subs	r3, #52	; 0x34
    1216:	7533      	strb	r3, [r6, #20]
    1218:	7a63      	ldrb	r3, [r4, #9]
    121a:	2b02      	cmp	r3, #2
    121c:	d01d      	beq.n	125a <_spi_interrupt_handler+0x156>
    121e:	7a63      	ldrb	r3, [r4, #9]
    1220:	2b00      	cmp	r3, #0
    1222:	d1a9      	bne.n	1178 <_spi_interrupt_handler+0x74>
    1224:	07bb      	lsls	r3, r7, #30
    1226:	d5a7      	bpl.n	1178 <_spi_interrupt_handler+0x74>
    1228:	0020      	movs	r0, r4
    122a:	6923      	ldr	r3, [r4, #16]
    122c:	4798      	blx	r3
    122e:	e7a3      	b.n	1178 <_spi_interrupt_handler+0x74>
    1230:	0020      	movs	r0, r4
    1232:	4b25      	ldr	r3, [pc, #148]	; (12c8 <_spi_interrupt_handler+0x1c4>)
    1234:	4798      	blx	r3
    1236:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1238:	b29b      	uxth	r3, r3
    123a:	2b00      	cmp	r3, #0
    123c:	d19c      	bne.n	1178 <_spi_interrupt_handler+0x74>
    123e:	3304      	adds	r3, #4
    1240:	7533      	strb	r3, [r6, #20]
    1242:	2200      	movs	r2, #0
    1244:	3334      	adds	r3, #52	; 0x34
    1246:	54e2      	strb	r2, [r4, r3]
    1248:	3b35      	subs	r3, #53	; 0x35
    124a:	7263      	strb	r3, [r4, #9]
    124c:	07fb      	lsls	r3, r7, #31
    124e:	d400      	bmi.n	1252 <_spi_interrupt_handler+0x14e>
    1250:	e792      	b.n	1178 <_spi_interrupt_handler+0x74>
    1252:	0020      	movs	r0, r4
    1254:	68e3      	ldr	r3, [r4, #12]
    1256:	4798      	blx	r3
    1258:	e78e      	b.n	1178 <_spi_interrupt_handler+0x74>
    125a:	077b      	lsls	r3, r7, #29
    125c:	d400      	bmi.n	1260 <_spi_interrupt_handler+0x15c>
    125e:	e78b      	b.n	1178 <_spi_interrupt_handler+0x74>
    1260:	0020      	movs	r0, r4
    1262:	6963      	ldr	r3, [r4, #20]
    1264:	4798      	blx	r3
    1266:	e787      	b.n	1178 <_spi_interrupt_handler+0x74>
    1268:	0020      	movs	r0, r4
    126a:	69e3      	ldr	r3, [r4, #28]
    126c:	4798      	blx	r3
    126e:	e796      	b.n	119e <_spi_interrupt_handler+0x9a>
    1270:	7a63      	ldrb	r3, [r4, #9]
    1272:	2b01      	cmp	r3, #1
    1274:	d000      	beq.n	1278 <_spi_interrupt_handler+0x174>
    1276:	e795      	b.n	11a4 <_spi_interrupt_handler+0xa0>
    1278:	79e3      	ldrb	r3, [r4, #7]
    127a:	2b00      	cmp	r3, #0
    127c:	d000      	beq.n	1280 <_spi_interrupt_handler+0x17c>
    127e:	e791      	b.n	11a4 <_spi_interrupt_handler+0xa0>
    1280:	3302      	adds	r3, #2
    1282:	7533      	strb	r3, [r6, #20]
    1284:	3301      	adds	r3, #1
    1286:	7263      	strb	r3, [r4, #9]
    1288:	2200      	movs	r2, #0
    128a:	3335      	adds	r3, #53	; 0x35
    128c:	54e2      	strb	r2, [r4, r3]
    128e:	07fb      	lsls	r3, r7, #31
    1290:	d400      	bmi.n	1294 <_spi_interrupt_handler+0x190>
    1292:	e787      	b.n	11a4 <_spi_interrupt_handler+0xa0>
    1294:	0020      	movs	r0, r4
    1296:	68e3      	ldr	r3, [r4, #12]
    1298:	4798      	blx	r3
    129a:	e783      	b.n	11a4 <_spi_interrupt_handler+0xa0>
    129c:	0020      	movs	r0, r4
    129e:	6a23      	ldr	r3, [r4, #32]
    12a0:	4798      	blx	r3
    12a2:	e78a      	b.n	11ba <_spi_interrupt_handler+0xb6>
    12a4:	2380      	movs	r3, #128	; 0x80
    12a6:	7533      	strb	r3, [r6, #20]
    12a8:	7633      	strb	r3, [r6, #24]
    12aa:	067b      	lsls	r3, r7, #25
    12ac:	d400      	bmi.n	12b0 <_spi_interrupt_handler+0x1ac>
    12ae:	e788      	b.n	11c2 <_spi_interrupt_handler+0xbe>
    12b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12b2:	0020      	movs	r0, r4
    12b4:	4798      	blx	r3
    12b6:	e784      	b.n	11c2 <_spi_interrupt_handler+0xbe>
    12b8:	200009ac 	.word	0x200009ac
    12bc:	00001079 	.word	0x00001079
    12c0:	000010ad 	.word	0x000010ad
    12c4:	000010d3 	.word	0x000010d3
    12c8:	000010c5 	.word	0x000010c5

000012cc <FIFO_Count>:
 */
unsigned FIFO_Count(FIFO_BUFFER const *b)
{
    unsigned head, tail; /* used to avoid volatile decision */

    if (b) {
    12cc:	2800      	cmp	r0, #0
    12ce:	d003      	beq.n	12d8 <FIFO_Count+0xc>
        head = b->head;
    12d0:	6803      	ldr	r3, [r0, #0]
        tail = b->tail;
    12d2:	6840      	ldr	r0, [r0, #4]
        return head - tail;
    12d4:	1a18      	subs	r0, r3, r0
    } else {
        return 0;
    }
}
    12d6:	4770      	bx	lr
        return 0;
    12d8:	2000      	movs	r0, #0
    12da:	e7fc      	b.n	12d6 <FIFO_Count+0xa>

000012dc <FIFO_Full>:
 * @param b - pointer to FIFO_BUFFER structure
 *
 * @return true if the FIFO is full, false if it is not.
 */
bool FIFO_Full(FIFO_BUFFER const *b)
{
    12dc:	b510      	push	{r4, lr}
    12de:	1e04      	subs	r4, r0, #0
    return (b ? (FIFO_Count(b) == b->buffer_len) : true);
    12e0:	d006      	beq.n	12f0 <FIFO_Full+0x14>
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <FIFO_Full+0x1c>)
    12e4:	4798      	blx	r3
    12e6:	68e3      	ldr	r3, [r4, #12]
    12e8:	4298      	cmp	r0, r3
    12ea:	d003      	beq.n	12f4 <FIFO_Full+0x18>
    12ec:	2000      	movs	r0, #0
}
    12ee:	bd10      	pop	{r4, pc}
    return (b ? (FIFO_Count(b) == b->buffer_len) : true);
    12f0:	2001      	movs	r0, #1
    12f2:	e7fc      	b.n	12ee <FIFO_Full+0x12>
    12f4:	2001      	movs	r0, #1
    12f6:	e7fa      	b.n	12ee <FIFO_Full+0x12>
    12f8:	000012cd 	.word	0x000012cd

000012fc <FIFO_Put>:
 * @param  data_byte [in] - data to put into the FIFO
 *
 * @return true on successful add, false if not added
 */
bool FIFO_Put(FIFO_BUFFER *b, uint8_t data_byte)
{
    12fc:	b570      	push	{r4, r5, r6, lr}
    12fe:	0004      	movs	r4, r0
    1300:	000d      	movs	r5, r1
    bool status = false; /* return value */
    unsigned index;

    if (b) {
    1302:	2800      	cmp	r0, #0
    1304:	d010      	beq.n	1328 <FIFO_Put+0x2c>
        /* limit the buffer to prevent overwriting */
        if (!FIFO_Full(b)) {
    1306:	4b0a      	ldr	r3, [pc, #40]	; (1330 <FIFO_Put+0x34>)
    1308:	4798      	blx	r3
    130a:	2800      	cmp	r0, #0
    130c:	d10e      	bne.n	132c <FIFO_Put+0x30>
            index = b->head % b->buffer_len;
    130e:	6820      	ldr	r0, [r4, #0]
    1310:	68e1      	ldr	r1, [r4, #12]
    1312:	4b08      	ldr	r3, [pc, #32]	; (1334 <FIFO_Put+0x38>)
    1314:	4798      	blx	r3
            b->buffer[index] = data_byte;
    1316:	68a3      	ldr	r3, [r4, #8]
    1318:	469c      	mov	ip, r3
    131a:	4461      	add	r1, ip
    131c:	700d      	strb	r5, [r1, #0]
            b->head++;
    131e:	6823      	ldr	r3, [r4, #0]
    1320:	3301      	adds	r3, #1
    1322:	6023      	str	r3, [r4, #0]
            status = true;
    1324:	2001      	movs	r0, #1
        }
    }

    return status;
}
    1326:	bd70      	pop	{r4, r5, r6, pc}
    bool status = false; /* return value */
    1328:	2000      	movs	r0, #0
    132a:	e7fc      	b.n	1326 <FIFO_Put+0x2a>
    132c:	2000      	movs	r0, #0
    132e:	e7fa      	b.n	1326 <FIFO_Put+0x2a>
    1330:	000012dd 	.word	0x000012dd
    1334:	00004bf9 	.word	0x00004bf9

00001338 <FIFO_Init>:
 *
 * @return      none
 */
void FIFO_Init(FIFO_BUFFER *b, volatile uint8_t *buffer, unsigned buffer_len)
{
    if (b && buffer && buffer_len) {
    1338:	2800      	cmp	r0, #0
    133a:	d008      	beq.n	134e <FIFO_Init+0x16>
    133c:	2900      	cmp	r1, #0
    133e:	d006      	beq.n	134e <FIFO_Init+0x16>
    1340:	2a00      	cmp	r2, #0
    1342:	d004      	beq.n	134e <FIFO_Init+0x16>
        b->head = 0;
    1344:	2300      	movs	r3, #0
    1346:	6003      	str	r3, [r0, #0]
        b->tail = 0;
    1348:	6043      	str	r3, [r0, #4]
        b->buffer = buffer;
    134a:	6081      	str	r1, [r0, #8]
        b->buffer_len = buffer_len;
    134c:	60c2      	str	r2, [r0, #12]
    }

    return;
}
    134e:	4770      	bx	lr

00001350 <mstimer_set>:
 *
 * @param t A pointer to the timer
 * @param interval The interval before the timer expires.
 */
void mstimer_set(struct mstimer *t, unsigned long interval)
{
    1350:	b510      	push	{r4, lr}
    1352:	0004      	movs	r4, r0
    t->interval = interval;
    1354:	6041      	str	r1, [r0, #4]
    t->start = mstimer_now();
    1356:	4b02      	ldr	r3, [pc, #8]	; (1360 <mstimer_set+0x10>)
    1358:	4798      	blx	r3
    135a:	6020      	str	r0, [r4, #0]
}
    135c:	bd10      	pop	{r4, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	000034b5 	.word	0x000034b5

00001364 <get_fiber1_status>:
}


enum fiber_data_status get_fiber1_status()
{
	return fiber1_data_status;
    1364:	4b01      	ldr	r3, [pc, #4]	; (136c <get_fiber1_status+0x8>)
    1366:	7818      	ldrb	r0, [r3, #0]
    1368:	b2c0      	uxtb	r0, r0
};
    136a:	4770      	bx	lr
    136c:	200003f0 	.word	0x200003f0

00001370 <get_fiber2_status>:

enum fiber_data_status get_fiber2_status()
{
	return fiber2_data_status;
    1370:	4b01      	ldr	r3, [pc, #4]	; (1378 <get_fiber2_status+0x8>)
    1372:	7818      	ldrb	r0, [r3, #0]
    1374:	b2c0      	uxtb	r0, r0
};
    1376:	4770      	bx	lr
    1378:	200003f1 	.word	0x200003f1

0000137c <Ft_Gpu_Copro_SendCmd>:
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4));             
}


ft_void_t Ft_Gpu_Copro_SendCmd(Ft_Gpu_Hal_Context_t *phost,ft_uint32_t cmd)
{ 
    137c:	b510      	push	{r4, lr}
   Ft_Gpu_Hal_Transfer32(phost,cmd);
    137e:	4b01      	ldr	r3, [pc, #4]	; (1384 <Ft_Gpu_Copro_SendCmd+0x8>)
    1380:	4798      	blx	r3
}
    1382:	bd10      	pop	{r4, pc}
    1384:	0000185d 	.word	0x0000185d

00001388 <Ft_Gpu_CoCmd_SendStr>:


ft_void_t Ft_Gpu_CoCmd_SendStr(Ft_Gpu_Hal_Context_t *phost,const ft_char8_t *s)
{
    1388:	b510      	push	{r4, lr}
    Ft_Gpu_Hal_TransferString(phost,s);
    138a:	4b01      	ldr	r3, [pc, #4]	; (1390 <Ft_Gpu_CoCmd_SendStr+0x8>)
    138c:	4798      	blx	r3
}
    138e:	bd10      	pop	{r4, pc}
    1390:	000017ed 	.word	0x000017ed

00001394 <Ft_Gpu_CoCmd_StartFunc>:


ft_void_t Ft_Gpu_CoCmd_StartFunc(Ft_Gpu_Hal_Context_t *phost,ft_uint16_t count)
{
    1394:	b570      	push	{r4, r5, r6, lr}
    1396:	0004      	movs	r4, r0
    1398:	000d      	movs	r5, r1
    // wait until the copro circular buffer has enough space for this command
  	Ft_Gpu_Hal_CheckCmdBuffer(phost,count);
    139a:	4b04      	ldr	r3, [pc, #16]	; (13ac <Ft_Gpu_CoCmd_StartFunc+0x18>)
    139c:	4798      	blx	r3
    // start the transfer if it does
    Ft_Gpu_Hal_StartCmdTransfer(phost,FT_GPU_WRITE,count);
    139e:	002a      	movs	r2, r5
    13a0:	2101      	movs	r1, #1
    13a2:	0020      	movs	r0, r4
    13a4:	4b02      	ldr	r3, [pc, #8]	; (13b0 <Ft_Gpu_CoCmd_StartFunc+0x1c>)
    13a6:	4798      	blx	r3
}
    13a8:	bd70      	pop	{r4, r5, r6, pc}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	000019cd 	.word	0x000019cd
    13b0:	00001795 	.word	0x00001795

000013b4 <Ft_Gpu_CoCmd_EndFunc>:


ft_void_t Ft_Gpu_CoCmd_EndFunc(Ft_Gpu_Hal_Context_t *phost,ft_uint16_t count)
{
    13b4:	b570      	push	{r4, r5, r6, lr}
    13b6:	0004      	movs	r4, r0
    13b8:	000d      	movs	r5, r1

    Ft_Gpu_Hal_EndTransfer(phost);
    13ba:	4b03      	ldr	r3, [pc, #12]	; (13c8 <Ft_Gpu_CoCmd_EndFunc+0x14>)
    13bc:	4798      	blx	r3
    Ft_Gpu_Hal_Updatecmdfifo(phost,count);
    13be:	0029      	movs	r1, r5
    13c0:	0020      	movs	r0, r4
    13c2:	4b02      	ldr	r3, [pc, #8]	; (13cc <Ft_Gpu_CoCmd_EndFunc+0x18>)
    13c4:	4798      	blx	r3

}
    13c6:	bd70      	pop	{r4, r5, r6, pc}
    13c8:	00001891 	.word	0x00001891
    13cc:	00001981 	.word	0x00001981

000013d0 <Ft_Gpu_CoCmd_Text>:
{
    13d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13d2:	46d6      	mov	lr, sl
    13d4:	464f      	mov	r7, r9
    13d6:	b580      	push	{r7, lr}
    13d8:	b083      	sub	sp, #12
    13da:	0005      	movs	r5, r0
    13dc:	468a      	mov	sl, r1
    13de:	4691      	mov	r9, r2
    13e0:	001f      	movs	r7, r3
    13e2:	ab0a      	add	r3, sp, #40	; 0x28
    13e4:	881e      	ldrh	r6, [r3, #0]
  ft_uint16_t len = strlen((const char*)s);
    13e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    13e8:	4b15      	ldr	r3, [pc, #84]	; (1440 <Ft_Gpu_CoCmd_Text+0x70>)
    13ea:	4798      	blx	r3
    13ec:	b280      	uxth	r0, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*3 + len + 1);
    13ee:	300d      	adds	r0, #13
    13f0:	b284      	uxth	r4, r0
    13f2:	0021      	movs	r1, r4
    13f4:	0028      	movs	r0, r5
    13f6:	4b13      	ldr	r3, [pc, #76]	; (1444 <Ft_Gpu_CoCmd_Text+0x74>)
    13f8:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_TEXT);
    13fa:	21f4      	movs	r1, #244	; 0xf4
    13fc:	4249      	negs	r1, r1
    13fe:	9501      	str	r5, [sp, #4]
    1400:	0028      	movs	r0, r5
    1402:	4d11      	ldr	r5, [pc, #68]	; (1448 <Ft_Gpu_CoCmd_Text+0x78>)
    1404:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    1406:	464b      	mov	r3, r9
    1408:	0419      	lsls	r1, r3, #16
    140a:	4653      	mov	r3, sl
    140c:	041b      	lsls	r3, r3, #16
    140e:	0c1b      	lsrs	r3, r3, #16
    1410:	4319      	orrs	r1, r3
    1412:	9801      	ldr	r0, [sp, #4]
    1414:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    1416:	0436      	lsls	r6, r6, #16
    1418:	0439      	lsls	r1, r7, #16
    141a:	0c09      	lsrs	r1, r1, #16
    141c:	4331      	orrs	r1, r6
    141e:	9e01      	ldr	r6, [sp, #4]
    1420:	0030      	movs	r0, r6
    1422:	47a8      	blx	r5
  Ft_Gpu_CoCmd_SendStr(phost, s);
    1424:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1426:	0030      	movs	r0, r6
    1428:	4b08      	ldr	r3, [pc, #32]	; (144c <Ft_Gpu_CoCmd_Text+0x7c>)
    142a:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*3 + len + 1));
    142c:	0021      	movs	r1, r4
    142e:	0030      	movs	r0, r6
    1430:	4b07      	ldr	r3, [pc, #28]	; (1450 <Ft_Gpu_CoCmd_Text+0x80>)
    1432:	4798      	blx	r3
}
    1434:	b003      	add	sp, #12
    1436:	bc0c      	pop	{r2, r3}
    1438:	4691      	mov	r9, r2
    143a:	469a      	mov	sl, r3
    143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	00004d29 	.word	0x00004d29
    1444:	00001395 	.word	0x00001395
    1448:	0000137d 	.word	0x0000137d
    144c:	00001389 	.word	0x00001389
    1450:	000013b5 	.word	0x000013b5

00001454 <Ft_Gpu_CoCmd_Number>:
{
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
    1456:	46c6      	mov	lr, r8
    1458:	b500      	push	{lr}
    145a:	b082      	sub	sp, #8
    145c:	0007      	movs	r7, r0
    145e:	000c      	movs	r4, r1
    1460:	4690      	mov	r8, r2
    1462:	001e      	movs	r6, r3
    1464:	ab08      	add	r3, sp, #32
    1466:	881d      	ldrh	r5, [r3, #0]
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*4);  
    1468:	2110      	movs	r1, #16
    146a:	4b10      	ldr	r3, [pc, #64]	; (14ac <Ft_Gpu_CoCmd_Number+0x58>)
    146c:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_NUMBER);
    146e:	21d2      	movs	r1, #210	; 0xd2
    1470:	4249      	negs	r1, r1
    1472:	9701      	str	r7, [sp, #4]
    1474:	0038      	movs	r0, r7
    1476:	4f0e      	ldr	r7, [pc, #56]	; (14b0 <Ft_Gpu_CoCmd_Number+0x5c>)
    1478:	47b8      	blx	r7
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    147a:	4643      	mov	r3, r8
    147c:	0419      	lsls	r1, r3, #16
    147e:	0423      	lsls	r3, r4, #16
    1480:	0c1b      	lsrs	r3, r3, #16
    1482:	4319      	orrs	r1, r3
    1484:	9c01      	ldr	r4, [sp, #4]
    1486:	0020      	movs	r0, r4
    1488:	47b8      	blx	r7
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    148a:	042d      	lsls	r5, r5, #16
    148c:	0431      	lsls	r1, r6, #16
    148e:	0c09      	lsrs	r1, r1, #16
    1490:	4329      	orrs	r1, r5
    1492:	0020      	movs	r0, r4
    1494:	47b8      	blx	r7
  Ft_Gpu_Copro_SendCmd(phost, n);
    1496:	9909      	ldr	r1, [sp, #36]	; 0x24
    1498:	0020      	movs	r0, r4
    149a:	47b8      	blx	r7
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4));  
    149c:	2110      	movs	r1, #16
    149e:	0020      	movs	r0, r4
    14a0:	4b04      	ldr	r3, [pc, #16]	; (14b4 <Ft_Gpu_CoCmd_Number+0x60>)
    14a2:	4798      	blx	r3
}
    14a4:	b002      	add	sp, #8
    14a6:	bc04      	pop	{r2}
    14a8:	4690      	mov	r8, r2
    14aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ac:	00001395 	.word	0x00001395
    14b0:	0000137d 	.word	0x0000137d
    14b4:	000013b5 	.word	0x000013b5

000014b8 <Ft_Gpu_CoCmd_Swap>:
{
    14b8:	b510      	push	{r4, lr}
    14ba:	0004      	movs	r4, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*1);         
    14bc:	2104      	movs	r1, #4
    14be:	4b06      	ldr	r3, [pc, #24]	; (14d8 <Ft_Gpu_CoCmd_Swap+0x20>)
    14c0:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_SWAP);
    14c2:	21ff      	movs	r1, #255	; 0xff
    14c4:	4249      	negs	r1, r1
    14c6:	0020      	movs	r0, r4
    14c8:	4b04      	ldr	r3, [pc, #16]	; (14dc <Ft_Gpu_CoCmd_Swap+0x24>)
    14ca:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*1));         
    14cc:	2104      	movs	r1, #4
    14ce:	0020      	movs	r0, r4
    14d0:	4b03      	ldr	r3, [pc, #12]	; (14e0 <Ft_Gpu_CoCmd_Swap+0x28>)
    14d2:	4798      	blx	r3
}
    14d4:	bd10      	pop	{r4, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	00001395 	.word	0x00001395
    14dc:	0000137d 	.word	0x0000137d
    14e0:	000013b5 	.word	0x000013b5

000014e4 <Ft_Gpu_CoCmd_Button>:
{
    14e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14e6:	46de      	mov	lr, fp
    14e8:	4657      	mov	r7, sl
    14ea:	464e      	mov	r6, r9
    14ec:	4645      	mov	r5, r8
    14ee:	b5e0      	push	{r5, r6, r7, lr}
    14f0:	b083      	sub	sp, #12
    14f2:	0005      	movs	r5, r0
    14f4:	468a      	mov	sl, r1
    14f6:	4691      	mov	r9, r2
    14f8:	469b      	mov	fp, r3
    14fa:	ab0c      	add	r3, sp, #48	; 0x30
    14fc:	2200      	movs	r2, #0
    14fe:	5e9b      	ldrsh	r3, [r3, r2]
    1500:	4698      	mov	r8, r3
    1502:	ab0d      	add	r3, sp, #52	; 0x34
    1504:	2700      	movs	r7, #0
    1506:	5fdf      	ldrsh	r7, [r3, r7]
    1508:	ab0e      	add	r3, sp, #56	; 0x38
    150a:	881e      	ldrh	r6, [r3, #0]
  ft_uint16_t len = strlen((const char*)s);
    150c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    150e:	4b1a      	ldr	r3, [pc, #104]	; (1578 <Ft_Gpu_CoCmd_Button+0x94>)
    1510:	4798      	blx	r3
    1512:	b280      	uxth	r0, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*4 + len + 1);            
    1514:	3011      	adds	r0, #17
    1516:	b284      	uxth	r4, r0
    1518:	0021      	movs	r1, r4
    151a:	0028      	movs	r0, r5
    151c:	4b17      	ldr	r3, [pc, #92]	; (157c <Ft_Gpu_CoCmd_Button+0x98>)
    151e:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_BUTTON);
    1520:	21f3      	movs	r1, #243	; 0xf3
    1522:	4249      	negs	r1, r1
    1524:	9501      	str	r5, [sp, #4]
    1526:	0028      	movs	r0, r5
    1528:	4d15      	ldr	r5, [pc, #84]	; (1580 <Ft_Gpu_CoCmd_Button+0x9c>)
    152a:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    152c:	464b      	mov	r3, r9
    152e:	0419      	lsls	r1, r3, #16
    1530:	4653      	mov	r3, sl
    1532:	041b      	lsls	r3, r3, #16
    1534:	0c1b      	lsrs	r3, r3, #16
    1536:	4319      	orrs	r1, r3
    1538:	9801      	ldr	r0, [sp, #4]
    153a:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)h<<16)|(w&0xffff)));
    153c:	4643      	mov	r3, r8
    153e:	0419      	lsls	r1, r3, #16
    1540:	465b      	mov	r3, fp
    1542:	041b      	lsls	r3, r3, #16
    1544:	0c1b      	lsrs	r3, r3, #16
    1546:	4319      	orrs	r1, r3
    1548:	9801      	ldr	r0, [sp, #4]
    154a:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    154c:	0436      	lsls	r6, r6, #16
    154e:	0439      	lsls	r1, r7, #16
    1550:	0c09      	lsrs	r1, r1, #16
    1552:	4331      	orrs	r1, r6
    1554:	9e01      	ldr	r6, [sp, #4]
    1556:	0030      	movs	r0, r6
    1558:	47a8      	blx	r5
  Ft_Gpu_CoCmd_SendStr(phost, s);
    155a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    155c:	0030      	movs	r0, r6
    155e:	4b09      	ldr	r3, [pc, #36]	; (1584 <Ft_Gpu_CoCmd_Button+0xa0>)
    1560:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4 + len + 1));              
    1562:	0021      	movs	r1, r4
    1564:	0030      	movs	r0, r6
    1566:	4b08      	ldr	r3, [pc, #32]	; (1588 <Ft_Gpu_CoCmd_Button+0xa4>)
    1568:	4798      	blx	r3
}
    156a:	b003      	add	sp, #12
    156c:	bc3c      	pop	{r2, r3, r4, r5}
    156e:	4690      	mov	r8, r2
    1570:	4699      	mov	r9, r3
    1572:	46a2      	mov	sl, r4
    1574:	46ab      	mov	fp, r5
    1576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1578:	00004d29 	.word	0x00004d29
    157c:	00001395 	.word	0x00001395
    1580:	0000137d 	.word	0x0000137d
    1584:	00001389 	.word	0x00001389
    1588:	000013b5 	.word	0x000013b5

0000158c <Ft_Gpu_CoCmd_Calibrate>:
{
    158c:	b570      	push	{r4, r5, r6, lr}
    158e:	0004      	movs	r4, r0
    1590:	000e      	movs	r6, r1
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*2);     
    1592:	2108      	movs	r1, #8
    1594:	4b08      	ldr	r3, [pc, #32]	; (15b8 <Ft_Gpu_CoCmd_Calibrate+0x2c>)
    1596:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_CALIBRATE);
    1598:	21eb      	movs	r1, #235	; 0xeb
    159a:	4249      	negs	r1, r1
    159c:	0020      	movs	r0, r4
    159e:	4d07      	ldr	r5, [pc, #28]	; (15bc <Ft_Gpu_CoCmd_Calibrate+0x30>)
    15a0:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, result);
    15a2:	0031      	movs	r1, r6
    15a4:	0020      	movs	r0, r4
    15a6:	47a8      	blx	r5
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*2));   
    15a8:	2108      	movs	r1, #8
    15aa:	0020      	movs	r0, r4
    15ac:	4b04      	ldr	r3, [pc, #16]	; (15c0 <Ft_Gpu_CoCmd_Calibrate+0x34>)
    15ae:	4798      	blx	r3
  Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    15b0:	0020      	movs	r0, r4
    15b2:	4b04      	ldr	r3, [pc, #16]	; (15c4 <Ft_Gpu_CoCmd_Calibrate+0x38>)
    15b4:	4798      	blx	r3
}
    15b6:	bd70      	pop	{r4, r5, r6, pc}
    15b8:	00001395 	.word	0x00001395
    15bc:	0000137d 	.word	0x0000137d
    15c0:	000013b5 	.word	0x000013b5
    15c4:	000019e5 	.word	0x000019e5

000015c8 <Ft_Gpu_CoCmd_Append>:
{
    15c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ca:	0004      	movs	r4, r0
    15cc:	000f      	movs	r7, r1
    15ce:	0016      	movs	r6, r2
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*3);       
    15d0:	210c      	movs	r1, #12
    15d2:	4b09      	ldr	r3, [pc, #36]	; (15f8 <Ft_Gpu_CoCmd_Append+0x30>)
    15d4:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_APPEND);
    15d6:	21e2      	movs	r1, #226	; 0xe2
    15d8:	4249      	negs	r1, r1
    15da:	0020      	movs	r0, r4
    15dc:	4d07      	ldr	r5, [pc, #28]	; (15fc <Ft_Gpu_CoCmd_Append+0x34>)
    15de:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, ptr);
    15e0:	0039      	movs	r1, r7
    15e2:	0020      	movs	r0, r4
    15e4:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, num);
    15e6:	0031      	movs	r1, r6
    15e8:	0020      	movs	r0, r4
    15ea:	47a8      	blx	r5
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*3));       
    15ec:	210c      	movs	r1, #12
    15ee:	0020      	movs	r0, r4
    15f0:	4b03      	ldr	r3, [pc, #12]	; (1600 <Ft_Gpu_CoCmd_Append+0x38>)
    15f2:	4798      	blx	r3
}
    15f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	00001395 	.word	0x00001395
    15fc:	0000137d 	.word	0x0000137d
    1600:	000013b5 	.word	0x000013b5

00001604 <Ft_Gpu_CoCmd_Gradient>:
{
    1604:	b5f0      	push	{r4, r5, r6, r7, lr}
    1606:	46d6      	mov	lr, sl
    1608:	464f      	mov	r7, r9
    160a:	b580      	push	{r7, lr}
    160c:	b083      	sub	sp, #12
    160e:	0004      	movs	r4, r0
    1610:	468a      	mov	sl, r1
    1612:	4691      	mov	r9, r2
    1614:	9301      	str	r3, [sp, #4]
    1616:	ab0a      	add	r3, sp, #40	; 0x28
    1618:	2200      	movs	r2, #0
    161a:	5e9f      	ldrsh	r7, [r3, r2]
    161c:	ab0b      	add	r3, sp, #44	; 0x2c
    161e:	2200      	movs	r2, #0
    1620:	5e9e      	ldrsh	r6, [r3, r2]
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*5);         
    1622:	2114      	movs	r1, #20
    1624:	4b11      	ldr	r3, [pc, #68]	; (166c <Ft_Gpu_CoCmd_Gradient+0x68>)
    1626:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_GRADIENT);
    1628:	21f5      	movs	r1, #245	; 0xf5
    162a:	4249      	negs	r1, r1
    162c:	0020      	movs	r0, r4
    162e:	4d10      	ldr	r5, [pc, #64]	; (1670 <Ft_Gpu_CoCmd_Gradient+0x6c>)
    1630:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y0<<16)|(x0 & 0xffff)));
    1632:	464a      	mov	r2, r9
    1634:	0411      	lsls	r1, r2, #16
    1636:	4652      	mov	r2, sl
    1638:	0413      	lsls	r3, r2, #16
    163a:	0c1b      	lsrs	r3, r3, #16
    163c:	4319      	orrs	r1, r3
    163e:	0020      	movs	r0, r4
    1640:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, rgb0);
    1642:	9901      	ldr	r1, [sp, #4]
    1644:	0020      	movs	r0, r4
    1646:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y1<<16)|(x1 & 0xffff)));
    1648:	0436      	lsls	r6, r6, #16
    164a:	0439      	lsls	r1, r7, #16
    164c:	0c09      	lsrs	r1, r1, #16
    164e:	4331      	orrs	r1, r6
    1650:	0020      	movs	r0, r4
    1652:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, rgb1);
    1654:	990c      	ldr	r1, [sp, #48]	; 0x30
    1656:	0020      	movs	r0, r4
    1658:	47a8      	blx	r5
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*5));         
    165a:	2114      	movs	r1, #20
    165c:	0020      	movs	r0, r4
    165e:	4b05      	ldr	r3, [pc, #20]	; (1674 <Ft_Gpu_CoCmd_Gradient+0x70>)
    1660:	4798      	blx	r3
}
    1662:	b003      	add	sp, #12
    1664:	bc0c      	pop	{r2, r3}
    1666:	4691      	mov	r9, r2
    1668:	469a      	mov	sl, r3
    166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    166c:	00001395 	.word	0x00001395
    1670:	0000137d 	.word	0x0000137d
    1674:	000013b5 	.word	0x000013b5

00001678 <Ft_Gpu_CoCmd_Keys>:
{
    1678:	b5f0      	push	{r4, r5, r6, r7, lr}
    167a:	46de      	mov	lr, fp
    167c:	4657      	mov	r7, sl
    167e:	464e      	mov	r6, r9
    1680:	4645      	mov	r5, r8
    1682:	b5e0      	push	{r5, r6, r7, lr}
    1684:	b083      	sub	sp, #12
    1686:	0005      	movs	r5, r0
    1688:	468a      	mov	sl, r1
    168a:	4691      	mov	r9, r2
    168c:	469b      	mov	fp, r3
    168e:	ab0c      	add	r3, sp, #48	; 0x30
    1690:	2200      	movs	r2, #0
    1692:	5e9b      	ldrsh	r3, [r3, r2]
    1694:	4698      	mov	r8, r3
    1696:	ab0d      	add	r3, sp, #52	; 0x34
    1698:	2700      	movs	r7, #0
    169a:	5fdf      	ldrsh	r7, [r3, r7]
    169c:	ab0e      	add	r3, sp, #56	; 0x38
    169e:	881e      	ldrh	r6, [r3, #0]
  ft_uint16_t len = strlen((const char*)s);
    16a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    16a2:	4b1a      	ldr	r3, [pc, #104]	; (170c <Ft_Gpu_CoCmd_Keys+0x94>)
    16a4:	4798      	blx	r3
    16a6:	b280      	uxth	r0, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*4 + len + 1);         
    16a8:	3011      	adds	r0, #17
    16aa:	b284      	uxth	r4, r0
    16ac:	0021      	movs	r1, r4
    16ae:	0028      	movs	r0, r5
    16b0:	4b17      	ldr	r3, [pc, #92]	; (1710 <Ft_Gpu_CoCmd_Keys+0x98>)
    16b2:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_KEYS);
    16b4:	21f2      	movs	r1, #242	; 0xf2
    16b6:	4249      	negs	r1, r1
    16b8:	9501      	str	r5, [sp, #4]
    16ba:	0028      	movs	r0, r5
    16bc:	4d15      	ldr	r5, [pc, #84]	; (1714 <Ft_Gpu_CoCmd_Keys+0x9c>)
    16be:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    16c0:	464b      	mov	r3, r9
    16c2:	0419      	lsls	r1, r3, #16
    16c4:	4653      	mov	r3, sl
    16c6:	041b      	lsls	r3, r3, #16
    16c8:	0c1b      	lsrs	r3, r3, #16
    16ca:	4319      	orrs	r1, r3
    16cc:	9801      	ldr	r0, [sp, #4]
    16ce:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)h<<16)|(w&0xffff)));
    16d0:	4643      	mov	r3, r8
    16d2:	0419      	lsls	r1, r3, #16
    16d4:	465b      	mov	r3, fp
    16d6:	041b      	lsls	r3, r3, #16
    16d8:	0c1b      	lsrs	r3, r3, #16
    16da:	4319      	orrs	r1, r3
    16dc:	9801      	ldr	r0, [sp, #4]
    16de:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    16e0:	0436      	lsls	r6, r6, #16
    16e2:	0439      	lsls	r1, r7, #16
    16e4:	0c09      	lsrs	r1, r1, #16
    16e6:	4331      	orrs	r1, r6
    16e8:	9e01      	ldr	r6, [sp, #4]
    16ea:	0030      	movs	r0, r6
    16ec:	47a8      	blx	r5
  Ft_Gpu_CoCmd_SendStr(phost, s);
    16ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
    16f0:	0030      	movs	r0, r6
    16f2:	4b09      	ldr	r3, [pc, #36]	; (1718 <Ft_Gpu_CoCmd_Keys+0xa0>)
    16f4:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4 + len + 1));
    16f6:	0021      	movs	r1, r4
    16f8:	0030      	movs	r0, r6
    16fa:	4b08      	ldr	r3, [pc, #32]	; (171c <Ft_Gpu_CoCmd_Keys+0xa4>)
    16fc:	4798      	blx	r3
}
    16fe:	b003      	add	sp, #12
    1700:	bc3c      	pop	{r2, r3, r4, r5}
    1702:	4690      	mov	r8, r2
    1704:	4699      	mov	r9, r3
    1706:	46a2      	mov	sl, r4
    1708:	46ab      	mov	fp, r5
    170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    170c:	00004d29 	.word	0x00004d29
    1710:	00001395 	.word	0x00001395
    1714:	0000137d 	.word	0x0000137d
    1718:	00001389 	.word	0x00001389
    171c:	000013b5 	.word	0x000013b5

00001720 <Ft_Gpu_CoCmd_Dlstart>:
{
    1720:	b510      	push	{r4, lr}
    1722:	0004      	movs	r4, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*1);           
    1724:	2104      	movs	r1, #4
    1726:	4b05      	ldr	r3, [pc, #20]	; (173c <Ft_Gpu_CoCmd_Dlstart+0x1c>)
    1728:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_DLSTART);
    172a:	4905      	ldr	r1, [pc, #20]	; (1740 <Ft_Gpu_CoCmd_Dlstart+0x20>)
    172c:	0020      	movs	r0, r4
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <Ft_Gpu_CoCmd_Dlstart+0x24>)
    1730:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*1));             
    1732:	2104      	movs	r1, #4
    1734:	0020      	movs	r0, r4
    1736:	4b04      	ldr	r3, [pc, #16]	; (1748 <Ft_Gpu_CoCmd_Dlstart+0x28>)
    1738:	4798      	blx	r3
}
    173a:	bd10      	pop	{r4, pc}
    173c:	00001395 	.word	0x00001395
    1740:	ffffff00 	.word	0xffffff00
    1744:	0000137d 	.word	0x0000137d
    1748:	000013b5 	.word	0x000013b5

0000174c <Ft_Gpu_Hal_Open>:
    174c:	b510      	push	{r4, lr}
    174e:	2200      	movs	r2, #0
    1750:	2300      	movs	r3, #0
    1752:	8142      	strh	r2, [r0, #10]
    1754:	8102      	strh	r2, [r0, #8]
    1756:	3201      	adds	r2, #1
    1758:	7542      	strb	r2, [r0, #21]
    175a:	7503      	strb	r3, [r0, #20]
    175c:	7303      	strb	r3, [r0, #12]
    175e:	4b02      	ldr	r3, [pc, #8]	; (1768 <Ft_Gpu_Hal_Open+0x1c>)
    1760:	4798      	blx	r3
    1762:	2001      	movs	r0, #1
    1764:	bd10      	pop	{r4, pc}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	0000345d 	.word	0x0000345d

0000176c <Ft_Gpu_Hal_StartTransfer>:
    176c:	b510      	push	{r4, lr}
    176e:	0004      	movs	r4, r0
    1770:	2900      	cmp	r1, #0
    1772:	d006      	beq.n	1782 <Ft_Gpu_Hal_StartTransfer+0x16>
    1774:	2101      	movs	r1, #1
    1776:	0010      	movs	r0, r2
    1778:	4b05      	ldr	r3, [pc, #20]	; (1790 <Ft_Gpu_Hal_StartTransfer+0x24>)
    177a:	4798      	blx	r3
    177c:	2302      	movs	r3, #2
    177e:	7323      	strb	r3, [r4, #12]
    1780:	bd10      	pop	{r4, pc}
    1782:	0010      	movs	r0, r2
    1784:	4b02      	ldr	r3, [pc, #8]	; (1790 <Ft_Gpu_Hal_StartTransfer+0x24>)
    1786:	4798      	blx	r3
    1788:	2301      	movs	r3, #1
    178a:	7323      	strb	r3, [r4, #12]
    178c:	e7f8      	b.n	1780 <Ft_Gpu_Hal_StartTransfer+0x14>
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	000030d9 	.word	0x000030d9

00001794 <Ft_Gpu_Hal_StartCmdTransfer>:
    1794:	b510      	push	{r4, lr}
    1796:	8902      	ldrh	r2, [r0, #8]
    1798:	23c2      	movs	r3, #194	; 0xc2
    179a:	039b      	lsls	r3, r3, #14
    179c:	469c      	mov	ip, r3
    179e:	4462      	add	r2, ip
    17a0:	4b01      	ldr	r3, [pc, #4]	; (17a8 <Ft_Gpu_Hal_StartCmdTransfer+0x14>)
    17a2:	4798      	blx	r3
    17a4:	bd10      	pop	{r4, pc}
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	0000176d 	.word	0x0000176d

000017ac <Ft_Gpu_Hal_Transfer8>:
    17ac:	b500      	push	{lr}
    17ae:	b085      	sub	sp, #20
    17b0:	466b      	mov	r3, sp
    17b2:	71d9      	strb	r1, [r3, #7]
    17b4:	2200      	movs	r2, #0
    17b6:	230f      	movs	r3, #15
    17b8:	446b      	add	r3, sp
    17ba:	701a      	strb	r2, [r3, #0]
    17bc:	7b03      	ldrb	r3, [r0, #12]
    17be:	2b02      	cmp	r3, #2
    17c0:	d009      	beq.n	17d6 <Ft_Gpu_Hal_Transfer8+0x2a>
    17c2:	2101      	movs	r1, #1
    17c4:	200f      	movs	r0, #15
    17c6:	4468      	add	r0, sp
    17c8:	4b06      	ldr	r3, [pc, #24]	; (17e4 <Ft_Gpu_Hal_Transfer8+0x38>)
    17ca:	4798      	blx	r3
    17cc:	230f      	movs	r3, #15
    17ce:	446b      	add	r3, sp
    17d0:	7818      	ldrb	r0, [r3, #0]
    17d2:	b005      	add	sp, #20
    17d4:	bd00      	pop	{pc}
    17d6:	2101      	movs	r1, #1
    17d8:	466b      	mov	r3, sp
    17da:	1dd8      	adds	r0, r3, #7
    17dc:	4b02      	ldr	r3, [pc, #8]	; (17e8 <Ft_Gpu_Hal_Transfer8+0x3c>)
    17de:	4798      	blx	r3
    17e0:	e7f4      	b.n	17cc <Ft_Gpu_Hal_Transfer8+0x20>
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	0000317d 	.word	0x0000317d
    17e8:	000031f5 	.word	0x000031f5

000017ec <Ft_Gpu_Hal_TransferString>:
    17ec:	b570      	push	{r4, r5, r6, lr}
    17ee:	0005      	movs	r5, r0
    17f0:	000e      	movs	r6, r1
    17f2:	0008      	movs	r0, r1
    17f4:	4b09      	ldr	r3, [pc, #36]	; (181c <Ft_Gpu_Hal_TransferString+0x30>)
    17f6:	4798      	blx	r3
    17f8:	b280      	uxth	r0, r0
    17fa:	e005      	b.n	1808 <Ft_Gpu_Hal_TransferString+0x1c>
    17fc:	7831      	ldrb	r1, [r6, #0]
    17fe:	0028      	movs	r0, r5
    1800:	4b07      	ldr	r3, [pc, #28]	; (1820 <Ft_Gpu_Hal_TransferString+0x34>)
    1802:	4798      	blx	r3
    1804:	3601      	adds	r6, #1
    1806:	0020      	movs	r0, r4
    1808:	1e44      	subs	r4, r0, #1
    180a:	b2a4      	uxth	r4, r4
    180c:	2800      	cmp	r0, #0
    180e:	d1f5      	bne.n	17fc <Ft_Gpu_Hal_TransferString+0x10>
    1810:	2100      	movs	r1, #0
    1812:	0028      	movs	r0, r5
    1814:	4b02      	ldr	r3, [pc, #8]	; (1820 <Ft_Gpu_Hal_TransferString+0x34>)
    1816:	4798      	blx	r3
    1818:	bd70      	pop	{r4, r5, r6, pc}
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	00004d29 	.word	0x00004d29
    1820:	000017ad 	.word	0x000017ad

00001824 <Ft_Gpu_Hal_Transfer16>:
    1824:	b570      	push	{r4, r5, r6, lr}
    1826:	0004      	movs	r4, r0
    1828:	000d      	movs	r5, r1
    182a:	7b03      	ldrb	r3, [r0, #12]
    182c:	2b02      	cmp	r3, #2
    182e:	d00a      	beq.n	1846 <Ft_Gpu_Hal_Transfer16+0x22>
    1830:	2100      	movs	r1, #0
    1832:	4d09      	ldr	r5, [pc, #36]	; (1858 <Ft_Gpu_Hal_Transfer16+0x34>)
    1834:	47a8      	blx	r5
    1836:	0006      	movs	r6, r0
    1838:	2100      	movs	r1, #0
    183a:	0020      	movs	r0, r4
    183c:	47a8      	blx	r5
    183e:	0200      	lsls	r0, r0, #8
    1840:	4330      	orrs	r0, r6
    1842:	b280      	uxth	r0, r0
    1844:	bd70      	pop	{r4, r5, r6, pc}
    1846:	b2c9      	uxtb	r1, r1
    1848:	4e03      	ldr	r6, [pc, #12]	; (1858 <Ft_Gpu_Hal_Transfer16+0x34>)
    184a:	47b0      	blx	r6
    184c:	0a29      	lsrs	r1, r5, #8
    184e:	0020      	movs	r0, r4
    1850:	47b0      	blx	r6
    1852:	2000      	movs	r0, #0
    1854:	e7f6      	b.n	1844 <Ft_Gpu_Hal_Transfer16+0x20>
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	000017ad 	.word	0x000017ad

0000185c <Ft_Gpu_Hal_Transfer32>:
    185c:	b570      	push	{r4, r5, r6, lr}
    185e:	0004      	movs	r4, r0
    1860:	000d      	movs	r5, r1
    1862:	7b03      	ldrb	r3, [r0, #12]
    1864:	2b02      	cmp	r3, #2
    1866:	d009      	beq.n	187c <Ft_Gpu_Hal_Transfer32+0x20>
    1868:	2100      	movs	r1, #0
    186a:	4e08      	ldr	r6, [pc, #32]	; (188c <Ft_Gpu_Hal_Transfer32+0x30>)
    186c:	47b0      	blx	r6
    186e:	0005      	movs	r5, r0
    1870:	2100      	movs	r1, #0
    1872:	0020      	movs	r0, r4
    1874:	47b0      	blx	r6
    1876:	0400      	lsls	r0, r0, #16
    1878:	4328      	orrs	r0, r5
    187a:	bd70      	pop	{r4, r5, r6, pc}
    187c:	b289      	uxth	r1, r1
    187e:	4e03      	ldr	r6, [pc, #12]	; (188c <Ft_Gpu_Hal_Transfer32+0x30>)
    1880:	47b0      	blx	r6
    1882:	0c29      	lsrs	r1, r5, #16
    1884:	0020      	movs	r0, r4
    1886:	47b0      	blx	r6
    1888:	2000      	movs	r0, #0
    188a:	e7f6      	b.n	187a <Ft_Gpu_Hal_Transfer32+0x1e>
    188c:	00001825 	.word	0x00001825

00001890 <Ft_Gpu_Hal_EndTransfer>:
    1890:	b510      	push	{r4, lr}
    1892:	0004      	movs	r4, r0
    1894:	4b02      	ldr	r3, [pc, #8]	; (18a0 <Ft_Gpu_Hal_EndTransfer+0x10>)
    1896:	4798      	blx	r3
    1898:	2300      	movs	r3, #0
    189a:	7323      	strb	r3, [r4, #12]
    189c:	bd10      	pop	{r4, pc}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	00003161 	.word	0x00003161

000018a4 <Ft_Gpu_Hal_Rd8>:
    18a4:	b570      	push	{r4, r5, r6, lr}
    18a6:	0004      	movs	r4, r0
    18a8:	000a      	movs	r2, r1
    18aa:	2100      	movs	r1, #0
    18ac:	4b05      	ldr	r3, [pc, #20]	; (18c4 <Ft_Gpu_Hal_Rd8+0x20>)
    18ae:	4798      	blx	r3
    18b0:	2100      	movs	r1, #0
    18b2:	0020      	movs	r0, r4
    18b4:	4b04      	ldr	r3, [pc, #16]	; (18c8 <Ft_Gpu_Hal_Rd8+0x24>)
    18b6:	4798      	blx	r3
    18b8:	0005      	movs	r5, r0
    18ba:	0020      	movs	r0, r4
    18bc:	4b03      	ldr	r3, [pc, #12]	; (18cc <Ft_Gpu_Hal_Rd8+0x28>)
    18be:	4798      	blx	r3
    18c0:	0028      	movs	r0, r5
    18c2:	bd70      	pop	{r4, r5, r6, pc}
    18c4:	0000176d 	.word	0x0000176d
    18c8:	000017ad 	.word	0x000017ad
    18cc:	00001891 	.word	0x00001891

000018d0 <Ft_Gpu_Hal_Rd16>:
    18d0:	b570      	push	{r4, r5, r6, lr}
    18d2:	0004      	movs	r4, r0
    18d4:	000a      	movs	r2, r1
    18d6:	2100      	movs	r1, #0
    18d8:	4b05      	ldr	r3, [pc, #20]	; (18f0 <Ft_Gpu_Hal_Rd16+0x20>)
    18da:	4798      	blx	r3
    18dc:	2100      	movs	r1, #0
    18de:	0020      	movs	r0, r4
    18e0:	4b04      	ldr	r3, [pc, #16]	; (18f4 <Ft_Gpu_Hal_Rd16+0x24>)
    18e2:	4798      	blx	r3
    18e4:	0005      	movs	r5, r0
    18e6:	0020      	movs	r0, r4
    18e8:	4b03      	ldr	r3, [pc, #12]	; (18f8 <Ft_Gpu_Hal_Rd16+0x28>)
    18ea:	4798      	blx	r3
    18ec:	0028      	movs	r0, r5
    18ee:	bd70      	pop	{r4, r5, r6, pc}
    18f0:	0000176d 	.word	0x0000176d
    18f4:	00001825 	.word	0x00001825
    18f8:	00001891 	.word	0x00001891

000018fc <Ft_Gpu_Hal_Wr8>:
    18fc:	b570      	push	{r4, r5, r6, lr}
    18fe:	0004      	movs	r4, r0
    1900:	0015      	movs	r5, r2
    1902:	000a      	movs	r2, r1
    1904:	2101      	movs	r1, #1
    1906:	4b05      	ldr	r3, [pc, #20]	; (191c <Ft_Gpu_Hal_Wr8+0x20>)
    1908:	4798      	blx	r3
    190a:	0029      	movs	r1, r5
    190c:	0020      	movs	r0, r4
    190e:	4b04      	ldr	r3, [pc, #16]	; (1920 <Ft_Gpu_Hal_Wr8+0x24>)
    1910:	4798      	blx	r3
    1912:	0020      	movs	r0, r4
    1914:	4b03      	ldr	r3, [pc, #12]	; (1924 <Ft_Gpu_Hal_Wr8+0x28>)
    1916:	4798      	blx	r3
    1918:	bd70      	pop	{r4, r5, r6, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	0000176d 	.word	0x0000176d
    1920:	000017ad 	.word	0x000017ad
    1924:	00001891 	.word	0x00001891

00001928 <Ft_Gpu_Hal_Wr16>:
    1928:	b570      	push	{r4, r5, r6, lr}
    192a:	0004      	movs	r4, r0
    192c:	0015      	movs	r5, r2
    192e:	000a      	movs	r2, r1
    1930:	2101      	movs	r1, #1
    1932:	4b05      	ldr	r3, [pc, #20]	; (1948 <Ft_Gpu_Hal_Wr16+0x20>)
    1934:	4798      	blx	r3
    1936:	0029      	movs	r1, r5
    1938:	0020      	movs	r0, r4
    193a:	4b04      	ldr	r3, [pc, #16]	; (194c <Ft_Gpu_Hal_Wr16+0x24>)
    193c:	4798      	blx	r3
    193e:	0020      	movs	r0, r4
    1940:	4b03      	ldr	r3, [pc, #12]	; (1950 <Ft_Gpu_Hal_Wr16+0x28>)
    1942:	4798      	blx	r3
    1944:	bd70      	pop	{r4, r5, r6, pc}
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	0000176d 	.word	0x0000176d
    194c:	00001825 	.word	0x00001825
    1950:	00001891 	.word	0x00001891

00001954 <Ft_Gpu_Hal_Wr32>:
    1954:	b570      	push	{r4, r5, r6, lr}
    1956:	0004      	movs	r4, r0
    1958:	0015      	movs	r5, r2
    195a:	000a      	movs	r2, r1
    195c:	2101      	movs	r1, #1
    195e:	4b05      	ldr	r3, [pc, #20]	; (1974 <Ft_Gpu_Hal_Wr32+0x20>)
    1960:	4798      	blx	r3
    1962:	0029      	movs	r1, r5
    1964:	0020      	movs	r0, r4
    1966:	4b04      	ldr	r3, [pc, #16]	; (1978 <Ft_Gpu_Hal_Wr32+0x24>)
    1968:	4798      	blx	r3
    196a:	0020      	movs	r0, r4
    196c:	4b03      	ldr	r3, [pc, #12]	; (197c <Ft_Gpu_Hal_Wr32+0x28>)
    196e:	4798      	blx	r3
    1970:	bd70      	pop	{r4, r5, r6, pc}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	0000176d 	.word	0x0000176d
    1978:	0000185d 	.word	0x0000185d
    197c:	00001891 	.word	0x00001891

00001980 <Ft_Gpu_Hal_Updatecmdfifo>:
    1980:	b510      	push	{r4, lr}
    1982:	8902      	ldrh	r2, [r0, #8]
    1984:	1852      	adds	r2, r2, r1
    1986:	0512      	lsls	r2, r2, #20
    1988:	0d12      	lsrs	r2, r2, #20
    198a:	3203      	adds	r2, #3
    198c:	4903      	ldr	r1, [pc, #12]	; (199c <Ft_Gpu_Hal_Updatecmdfifo+0x1c>)
    198e:	400a      	ands	r2, r1
    1990:	8102      	strh	r2, [r0, #8]
    1992:	4903      	ldr	r1, [pc, #12]	; (19a0 <Ft_Gpu_Hal_Updatecmdfifo+0x20>)
    1994:	4b03      	ldr	r3, [pc, #12]	; (19a4 <Ft_Gpu_Hal_Updatecmdfifo+0x24>)
    1996:	4798      	blx	r3
    1998:	bd10      	pop	{r4, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	00000ffc 	.word	0x00000ffc
    19a0:	003020fc 	.word	0x003020fc
    19a4:	00001929 	.word	0x00001929

000019a8 <Ft_Gpu_Cmdfifo_Freespace>:
    19a8:	b510      	push	{r4, lr}
    19aa:	8904      	ldrh	r4, [r0, #8]
    19ac:	4904      	ldr	r1, [pc, #16]	; (19c0 <Ft_Gpu_Cmdfifo_Freespace+0x18>)
    19ae:	4b05      	ldr	r3, [pc, #20]	; (19c4 <Ft_Gpu_Cmdfifo_Freespace+0x1c>)
    19b0:	4798      	blx	r3
    19b2:	1a24      	subs	r4, r4, r0
    19b4:	0524      	lsls	r4, r4, #20
    19b6:	0d24      	lsrs	r4, r4, #20
    19b8:	4803      	ldr	r0, [pc, #12]	; (19c8 <Ft_Gpu_Cmdfifo_Freespace+0x20>)
    19ba:	1b00      	subs	r0, r0, r4
    19bc:	b280      	uxth	r0, r0
    19be:	bd10      	pop	{r4, pc}
    19c0:	003020f8 	.word	0x003020f8
    19c4:	000018d1 	.word	0x000018d1
    19c8:	00000ffc 	.word	0x00000ffc

000019cc <Ft_Gpu_Hal_CheckCmdBuffer>:
    19cc:	b570      	push	{r4, r5, r6, lr}
    19ce:	0005      	movs	r5, r0
    19d0:	000c      	movs	r4, r1
    19d2:	0028      	movs	r0, r5
    19d4:	4b02      	ldr	r3, [pc, #8]	; (19e0 <Ft_Gpu_Hal_CheckCmdBuffer+0x14>)
    19d6:	4798      	blx	r3
    19d8:	42a0      	cmp	r0, r4
    19da:	d3fa      	bcc.n	19d2 <Ft_Gpu_Hal_CheckCmdBuffer+0x6>
    19dc:	bd70      	pop	{r4, r5, r6, pc}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	000019a9 	.word	0x000019a9

000019e4 <Ft_Gpu_Hal_WaitCmdfifo_empty>:
    19e4:	b570      	push	{r4, r5, r6, lr}
    19e6:	0005      	movs	r5, r0
    19e8:	4907      	ldr	r1, [pc, #28]	; (1a08 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x24>)
    19ea:	0028      	movs	r0, r5
    19ec:	4c07      	ldr	r4, [pc, #28]	; (1a0c <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    19ee:	47a0      	blx	r4
    19f0:	0006      	movs	r6, r0
    19f2:	4907      	ldr	r1, [pc, #28]	; (1a10 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    19f4:	0028      	movs	r0, r5
    19f6:	47a0      	blx	r4
    19f8:	4286      	cmp	r6, r0
    19fa:	d1f5      	bne.n	19e8 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x4>
    19fc:	4904      	ldr	r1, [pc, #16]	; (1a10 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    19fe:	0028      	movs	r0, r5
    1a00:	4b02      	ldr	r3, [pc, #8]	; (1a0c <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    1a02:	4798      	blx	r3
    1a04:	8128      	strh	r0, [r5, #8]
    1a06:	bd70      	pop	{r4, r5, r6, pc}
    1a08:	003020f8 	.word	0x003020f8
    1a0c:	000018d1 	.word	0x000018d1
    1a10:	003020fc 	.word	0x003020fc

00001a14 <Ft_Gpu_Hal_WrCmd32>:
    1a14:	b570      	push	{r4, r5, r6, lr}
    1a16:	0004      	movs	r4, r0
    1a18:	000d      	movs	r5, r1
    1a1a:	2104      	movs	r1, #4
    1a1c:	4b07      	ldr	r3, [pc, #28]	; (1a3c <Ft_Gpu_Hal_WrCmd32+0x28>)
    1a1e:	4798      	blx	r3
    1a20:	8921      	ldrh	r1, [r4, #8]
    1a22:	23c2      	movs	r3, #194	; 0xc2
    1a24:	039b      	lsls	r3, r3, #14
    1a26:	469c      	mov	ip, r3
    1a28:	4461      	add	r1, ip
    1a2a:	002a      	movs	r2, r5
    1a2c:	0020      	movs	r0, r4
    1a2e:	4b04      	ldr	r3, [pc, #16]	; (1a40 <Ft_Gpu_Hal_WrCmd32+0x2c>)
    1a30:	4798      	blx	r3
    1a32:	2104      	movs	r1, #4
    1a34:	0020      	movs	r0, r4
    1a36:	4b03      	ldr	r3, [pc, #12]	; (1a44 <Ft_Gpu_Hal_WrCmd32+0x30>)
    1a38:	4798      	blx	r3
    1a3a:	bd70      	pop	{r4, r5, r6, pc}
    1a3c:	000019cd 	.word	0x000019cd
    1a40:	00001955 	.word	0x00001955
    1a44:	00001981 	.word	0x00001981

00001a48 <month31>:
 * Return Values(s) : int
 * Description      : Check if the month has 31 days. Return 1 if yes, else
 *  0 if no
 */
int month31(char month){
	if(month==1 || month==3 || month==5 || month==7 || month==8 || \
    1a48:	2801      	cmp	r0, #1
    1a4a:	d00f      	beq.n	1a6c <month31+0x24>
    1a4c:	2803      	cmp	r0, #3
    1a4e:	d00f      	beq.n	1a70 <month31+0x28>
    1a50:	2805      	cmp	r0, #5
    1a52:	d00f      	beq.n	1a74 <month31+0x2c>
    1a54:	2807      	cmp	r0, #7
    1a56:	d00f      	beq.n	1a78 <month31+0x30>
    1a58:	2808      	cmp	r0, #8
    1a5a:	d00f      	beq.n	1a7c <month31+0x34>
    1a5c:	280a      	cmp	r0, #10
    1a5e:	d00f      	beq.n	1a80 <month31+0x38>
        month==10 || month==12)
    1a60:	280c      	cmp	r0, #12
    1a62:	d001      	beq.n	1a68 <month31+0x20>
		return 1;
	else
		return 0;
    1a64:	2000      	movs	r0, #0
}//end month31
    1a66:	4770      	bx	lr
		return 1;
    1a68:	380b      	subs	r0, #11
    1a6a:	e7fc      	b.n	1a66 <month31+0x1e>
    1a6c:	2001      	movs	r0, #1
    1a6e:	e7fa      	b.n	1a66 <month31+0x1e>
    1a70:	2001      	movs	r0, #1
    1a72:	e7f8      	b.n	1a66 <month31+0x1e>
    1a74:	2001      	movs	r0, #1
    1a76:	e7f6      	b.n	1a66 <month31+0x1e>
    1a78:	2001      	movs	r0, #1
    1a7a:	e7f4      	b.n	1a66 <month31+0x1e>
    1a7c:	2001      	movs	r0, #1
    1a7e:	e7f2      	b.n	1a66 <month31+0x1e>
    1a80:	2001      	movs	r0, #1
    1a82:	e7f0      	b.n	1a66 <month31+0x1e>

00001a84 <printTime>:
/* Function Name    : printTime
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Get the current time and date, display it on the screen
 */
void printTime(){
    1a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a86:	46d6      	mov	lr, sl
    1a88:	464f      	mov	r7, r9
    1a8a:	4646      	mov	r6, r8
    1a8c:	b5c0      	push	{r6, r7, lr}
    1a8e:	b08a      	sub	sp, #40	; 0x28
	int fstYloc = disHei - 60, sndYloc = disHei - 30;
	char buff[32];
	//get current time and date
	rtc_calendar_get_time(&rtc_instance, &time);
    1a90:	4c1b      	ldr	r4, [pc, #108]	; (1b00 <printTime+0x7c>)
    1a92:	0021      	movs	r1, r4
    1a94:	481b      	ldr	r0, [pc, #108]	; (1b04 <printTime+0x80>)
    1a96:	4b1c      	ldr	r3, [pc, #112]	; (1b08 <printTime+0x84>)
    1a98:	4798      	blx	r3
	//put together a string for time and send to display
	snprintf(buff, 32, "%02d:%02d:%02d", time.hour, time.minute, time.second);
    1a9a:	78a3      	ldrb	r3, [r4, #2]
    1a9c:	7862      	ldrb	r2, [r4, #1]
    1a9e:	7821      	ldrb	r1, [r4, #0]
    1aa0:	ad02      	add	r5, sp, #8
    1aa2:	9101      	str	r1, [sp, #4]
    1aa4:	9200      	str	r2, [sp, #0]
    1aa6:	4a19      	ldr	r2, [pc, #100]	; (1b0c <printTime+0x88>)
    1aa8:	2120      	movs	r1, #32
    1aaa:	0028      	movs	r0, r5
    1aac:	4e18      	ldr	r6, [pc, #96]	; (1b10 <printTime+0x8c>)
    1aae:	46b2      	mov	sl, r6
    1ab0:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Text(phost, 10, fstYloc, font, 0, buff);
    1ab2:	4b18      	ldr	r3, [pc, #96]	; (1b14 <printTime+0x90>)
    1ab4:	4699      	mov	r9, r3
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	4a17      	ldr	r2, [pc, #92]	; (1b18 <printTime+0x94>)
    1aba:	4690      	mov	r8, r2
    1abc:	6810      	ldr	r0, [r2, #0]
    1abe:	9501      	str	r5, [sp, #4]
    1ac0:	2700      	movs	r7, #0
    1ac2:	9700      	str	r7, [sp, #0]
    1ac4:	22d2      	movs	r2, #210	; 0xd2
    1ac6:	0052      	lsls	r2, r2, #1
    1ac8:	210a      	movs	r1, #10
    1aca:	4e14      	ldr	r6, [pc, #80]	; (1b1c <printTime+0x98>)
    1acc:	47b0      	blx	r6
	
	//put together a string for date and send to display
	snprintf(buff, 32, "%02d/%02d/%04d", time.month, time.day, time.year);
    1ace:	7963      	ldrb	r3, [r4, #5]
    1ad0:	7922      	ldrb	r2, [r4, #4]
    1ad2:	88e1      	ldrh	r1, [r4, #6]
    1ad4:	9101      	str	r1, [sp, #4]
    1ad6:	9200      	str	r2, [sp, #0]
    1ad8:	4a11      	ldr	r2, [pc, #68]	; (1b20 <printTime+0x9c>)
    1ada:	2120      	movs	r1, #32
    1adc:	0028      	movs	r0, r5
    1ade:	47d0      	blx	sl
	Ft_Gpu_CoCmd_Text(phost, 10, sndYloc, font, 0, buff);
    1ae0:	464b      	mov	r3, r9
    1ae2:	781b      	ldrb	r3, [r3, #0]
    1ae4:	4642      	mov	r2, r8
    1ae6:	6810      	ldr	r0, [r2, #0]
    1ae8:	9501      	str	r5, [sp, #4]
    1aea:	9700      	str	r7, [sp, #0]
    1aec:	22e1      	movs	r2, #225	; 0xe1
    1aee:	0052      	lsls	r2, r2, #1
    1af0:	210a      	movs	r1, #10
    1af2:	47b0      	blx	r6
}//end printTime
    1af4:	b00a      	add	sp, #40	; 0x28
    1af6:	bc1c      	pop	{r2, r3, r4}
    1af8:	4690      	mov	r8, r2
    1afa:	4699      	mov	r9, r3
    1afc:	46a2      	mov	sl, r4
    1afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b00:	20000718 	.word	0x20000718
    1b04:	20000400 	.word	0x20000400
    1b08:	00000555 	.word	0x00000555
    1b0c:	00005624 	.word	0x00005624
    1b10:	00004cc5 	.word	0x00004cc5
    1b14:	20000009 	.word	0x20000009
    1b18:	20000720 	.word	0x20000720
    1b1c:	000013d1 	.word	0x000013d1
    1b20:	00005634 	.word	0x00005634

00001b24 <play>:
/* Function Name    : play
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Play 3 consecutive beep at 660Hz when called
 */
void play(){
    1b24:	b510      	push	{r4, lr}
	//set full volume
	Ft_Gpu_Hal_Wr8(phost,REG_VOL_SOUND,0x255);
    1b26:	4c0d      	ldr	r4, [pc, #52]	; (1b5c <play+0x38>)
    1b28:	2255      	movs	r2, #85	; 0x55
    1b2a:	490d      	ldr	r1, [pc, #52]	; (1b60 <play+0x3c>)
    1b2c:	6820      	ldr	r0, [r4, #0]
    1b2e:	4b0d      	ldr	r3, [pc, #52]	; (1b64 <play+0x40>)
    1b30:	4798      	blx	r3
	//set one single beet at 660Hz
	Ft_Gpu_Hal_Wr16(phost, REG_SOUND,  (73<< 8) | 0x10);
    1b32:	6820      	ldr	r0, [r4, #0]
    1b34:	4a0c      	ldr	r2, [pc, #48]	; (1b68 <play+0x44>)
    1b36:	490d      	ldr	r1, [pc, #52]	; (1b6c <play+0x48>)
    1b38:	4b0d      	ldr	r3, [pc, #52]	; (1b70 <play+0x4c>)
    1b3a:	4798      	blx	r3

	//play it 3 times delay 100ms inbetween
	int i;
	for (i=0; i < 3; i++){
    1b3c:	2400      	movs	r4, #0
    1b3e:	e009      	b.n	1b54 <play+0x30>
		Ft_Gpu_Hal_Wr8(phost, REG_PLAY, 1);
    1b40:	4b06      	ldr	r3, [pc, #24]	; (1b5c <play+0x38>)
    1b42:	6818      	ldr	r0, [r3, #0]
    1b44:	2201      	movs	r2, #1
    1b46:	490b      	ldr	r1, [pc, #44]	; (1b74 <play+0x50>)
    1b48:	4b06      	ldr	r3, [pc, #24]	; (1b64 <play+0x40>)
    1b4a:	4798      	blx	r3
		delay_ms(100);
    1b4c:	2064      	movs	r0, #100	; 0x64
    1b4e:	4b0a      	ldr	r3, [pc, #40]	; (1b78 <play+0x54>)
    1b50:	4798      	blx	r3
	for (i=0; i < 3; i++){
    1b52:	3401      	adds	r4, #1
    1b54:	2c02      	cmp	r4, #2
    1b56:	ddf3      	ble.n	1b40 <play+0x1c>
	}
}//end play
    1b58:	bd10      	pop	{r4, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	20000720 	.word	0x20000720
    1b60:	00302084 	.word	0x00302084
    1b64:	000018fd 	.word	0x000018fd
    1b68:	00004910 	.word	0x00004910
    1b6c:	00302088 	.word	0x00302088
    1b70:	00001929 	.word	0x00001929
    1b74:	0030208c 	.word	0x0030208c
    1b78:	00000151 	.word	0x00000151

00001b7c <drawTitle>:
/* Function Name    : drawTitle
 * Parameters       : char *title 
 * Return Values(s) : void
 * Description      : Draw the title to each screen based on title received
 */
void drawTitle(char *title){
    1b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7e:	46ce      	mov	lr, r9
    1b80:	4647      	mov	r7, r8
    1b82:	b580      	push	{r7, lr}
    1b84:	b085      	sub	sp, #20
    1b86:	4681      	mov	r9, r0
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_XY(disWid/3,0));
    1b88:	4c13      	ldr	r4, [pc, #76]	; (1bd8 <drawTitle+0x5c>)
    1b8a:	4914      	ldr	r1, [pc, #80]	; (1bdc <drawTitle+0x60>)
    1b8c:	6820      	ldr	r0, [r4, #0]
    1b8e:	4d14      	ldr	r5, [pc, #80]	; (1be0 <drawTitle+0x64>)
    1b90:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_SIZE((disWid*3/2), 50));
    1b92:	4914      	ldr	r1, [pc, #80]	; (1be4 <drawTitle+0x68>)
    1b94:	6820      	ldr	r0, [r4, #0]
    1b96:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Gradient(phost, disWid/3*2,0, 0x8B90FF, disWid/3*2, 50,0x2933FF);
    1b98:	2685      	movs	r6, #133	; 0x85
    1b9a:	00b6      	lsls	r6, r6, #2
    1b9c:	6820      	ldr	r0, [r4, #0]
    1b9e:	4b12      	ldr	r3, [pc, #72]	; (1be8 <drawTitle+0x6c>)
    1ba0:	9302      	str	r3, [sp, #8]
    1ba2:	2332      	movs	r3, #50	; 0x32
    1ba4:	9301      	str	r3, [sp, #4]
    1ba6:	9600      	str	r6, [sp, #0]
    1ba8:	4b10      	ldr	r3, [pc, #64]	; (1bec <drawTitle+0x70>)
    1baa:	2200      	movs	r2, #0
    1bac:	0031      	movs	r1, r6
    1bae:	4f10      	ldr	r7, [pc, #64]	; (1bf0 <drawTitle+0x74>)
    1bb0:	47b8      	blx	r7
//	Ft_Gpu_CoCmd_Gradient(phost, disWid/3,0, 0x2933FF, disWid, 50,0x8B90FF);
	Ft_Gpu_CoCmd_Text(phost, (disWid/3*2), 30, 30, OPT_CENTER, title);
    1bb2:	6820      	ldr	r0, [r4, #0]
    1bb4:	464b      	mov	r3, r9
    1bb6:	9301      	str	r3, [sp, #4]
    1bb8:	23c0      	movs	r3, #192	; 0xc0
    1bba:	00db      	lsls	r3, r3, #3
    1bbc:	9300      	str	r3, [sp, #0]
    1bbe:	231e      	movs	r3, #30
    1bc0:	221e      	movs	r2, #30
    1bc2:	0031      	movs	r1, r6
    1bc4:	4e0b      	ldr	r6, [pc, #44]	; (1bf4 <drawTitle+0x78>)
    1bc6:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,1,1));
    1bc8:	6820      	ldr	r0, [r4, #0]
    1bca:	490b      	ldr	r1, [pc, #44]	; (1bf8 <drawTitle+0x7c>)
    1bcc:	47a8      	blx	r5
}//end drawTitle
    1bce:	b005      	add	sp, #20
    1bd0:	bc0c      	pop	{r2, r3}
    1bd2:	4690      	mov	r8, r2
    1bd4:	4699      	mov	r9, r3
    1bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bd8:	20000720 	.word	0x20000720
    1bdc:	1b085000 	.word	0x1b085000
    1be0:	00001a15 	.word	0x00001a15
    1be4:	1c4b0032 	.word	0x1c4b0032
    1be8:	002933ff 	.word	0x002933ff
    1bec:	008b90ff 	.word	0x008b90ff
    1bf0:	00001605 	.word	0x00001605
    1bf4:	000013d1 	.word	0x000013d1
    1bf8:	26000003 	.word	0x26000003

00001bfc <drawBack>:
/* Function Name    : drawBack
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Draw back button when called
 */
void drawBack(){
    1bfc:	b510      	push	{r4, lr}
    1bfe:	b084      	sub	sp, #16
	//assign tag value and draw button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(back));
    1c00:	4c0e      	ldr	r4, [pc, #56]	; (1c3c <drawBack+0x40>)
    1c02:	490f      	ldr	r1, [pc, #60]	; (1c40 <drawBack+0x44>)
    1c04:	6820      	ldr	r0, [r4, #0]
    1c06:	4b0f      	ldr	r3, [pc, #60]	; (1c44 <drawBack+0x48>)
    1c08:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    1c0a:	6820      	ldr	r0, [r4, #0]
    1c0c:	4b0e      	ldr	r3, [pc, #56]	; (1c48 <drawBack+0x4c>)
    1c0e:	781b      	ldrb	r3, [r3, #0]
    1c10:	4a0e      	ldr	r2, [pc, #56]	; (1c4c <drawBack+0x50>)
    1c12:	7812      	ldrb	r2, [r2, #0]
    1c14:	2a06      	cmp	r2, #6
    1c16:	d00d      	beq.n	1c34 <drawBack+0x38>
    1c18:	2100      	movs	r1, #0
    1c1a:	4a0d      	ldr	r2, [pc, #52]	; (1c50 <drawBack+0x54>)
    1c1c:	9203      	str	r2, [sp, #12]
    1c1e:	9102      	str	r1, [sp, #8]
    1c20:	9301      	str	r3, [sp, #4]
    1c22:	2335      	movs	r3, #53	; 0x35
    1c24:	9300      	str	r3, [sp, #0]
    1c26:	332f      	adds	r3, #47	; 0x2f
    1c28:	2200      	movs	r2, #0
    1c2a:	2100      	movs	r1, #0
    1c2c:	4c09      	ldr	r4, [pc, #36]	; (1c54 <drawBack+0x58>)
    1c2e:	47a0      	blx	r4
}//end drawBack
    1c30:	b004      	add	sp, #16
    1c32:	bd10      	pop	{r4, pc}
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    1c34:	2180      	movs	r1, #128	; 0x80
    1c36:	0049      	lsls	r1, r1, #1
    1c38:	e7ef      	b.n	1c1a <drawBack+0x1e>
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	20000720 	.word	0x20000720
    1c40:	03000006 	.word	0x03000006
    1c44:	00001a15 	.word	0x00001a15
    1c48:	20000009 	.word	0x20000009
    1c4c:	200000b5 	.word	0x200000b5
    1c50:	00005584 	.word	0x00005584
    1c54:	000014e5 	.word	0x000014e5

00001c58 <drawKeypad>:
/* Function Name    : drawKeypad
 * Parameters       : char pressed
 * Return Values(s) : void
 * Description      : Draw keypad and put effect on a key (if pressed)
 */
void drawKeypad(char pressed){
    1c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5a:	46c6      	mov	lr, r8
    1c5c:	b500      	push	{lr}
    1c5e:	b084      	sub	sp, #16
	//draw number from 1 to 9 
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.4, disWid*.3, 60, 29, pressed+48, "123");
    1c60:	3030      	adds	r0, #48	; 0x30
    1c62:	0005      	movs	r5, r0
    1c64:	4c4a      	ldr	r4, [pc, #296]	; (1d90 <drawKeypad+0x138>)
    1c66:	6820      	ldr	r0, [r4, #0]
    1c68:	4b4a      	ldr	r3, [pc, #296]	; (1d94 <drawKeypad+0x13c>)
    1c6a:	9303      	str	r3, [sp, #12]
    1c6c:	9502      	str	r5, [sp, #8]
    1c6e:	231d      	movs	r3, #29
    1c70:	4698      	mov	r8, r3
    1c72:	9301      	str	r3, [sp, #4]
    1c74:	273c      	movs	r7, #60	; 0x3c
    1c76:	9700      	str	r7, [sp, #0]
    1c78:	33d3      	adds	r3, #211	; 0xd3
    1c7a:	22c0      	movs	r2, #192	; 0xc0
    1c7c:	21f0      	movs	r1, #240	; 0xf0
    1c7e:	4e46      	ldr	r6, [pc, #280]	; (1d98 <drawKeypad+0x140>)
    1c80:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.54, disWid*.3, 60, 29, pressed+48, "456");
    1c82:	6820      	ldr	r0, [r4, #0]
    1c84:	4b45      	ldr	r3, [pc, #276]	; (1d9c <drawKeypad+0x144>)
    1c86:	9303      	str	r3, [sp, #12]
    1c88:	9502      	str	r5, [sp, #8]
    1c8a:	4643      	mov	r3, r8
    1c8c:	9301      	str	r3, [sp, #4]
    1c8e:	9700      	str	r7, [sp, #0]
    1c90:	33d3      	adds	r3, #211	; 0xd3
    1c92:	2204      	movs	r2, #4
    1c94:	32ff      	adds	r2, #255	; 0xff
    1c96:	21f0      	movs	r1, #240	; 0xf0
    1c98:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.68, disWid*.3, 60, 29, pressed+48, "789");
    1c9a:	6820      	ldr	r0, [r4, #0]
    1c9c:	4b40      	ldr	r3, [pc, #256]	; (1da0 <drawKeypad+0x148>)
    1c9e:	9303      	str	r3, [sp, #12]
    1ca0:	9502      	str	r5, [sp, #8]
    1ca2:	4643      	mov	r3, r8
    1ca4:	9301      	str	r3, [sp, #4]
    1ca6:	9700      	str	r7, [sp, #0]
    1ca8:	33d3      	adds	r3, #211	; 0xd3
    1caa:	22a3      	movs	r2, #163	; 0xa3
    1cac:	0052      	lsls	r2, r2, #1
    1cae:	21f0      	movs	r1, #240	; 0xf0
    1cb0:	47b0      	blx	r6
	
	//draw '0' button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(zero));
    1cb2:	493c      	ldr	r1, [pc, #240]	; (1da4 <drawKeypad+0x14c>)
    1cb4:	6820      	ldr	r0, [r4, #0]
    1cb6:	4b3c      	ldr	r3, [pc, #240]	; (1da8 <drawKeypad+0x150>)
    1cb8:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    1cba:	6820      	ldr	r0, [r4, #0]
    1cbc:	4b3b      	ldr	r3, [pc, #236]	; (1dac <drawKeypad+0x154>)
    1cbe:	781b      	ldrb	r3, [r3, #0]
    1cc0:	2b30      	cmp	r3, #48	; 0x30
    1cc2:	d05b      	beq.n	1d7c <drawKeypad+0x124>
    1cc4:	2300      	movs	r3, #0
    1cc6:	4a3a      	ldr	r2, [pc, #232]	; (1db0 <drawKeypad+0x158>)
    1cc8:	9203      	str	r2, [sp, #12]
    1cca:	9302      	str	r3, [sp, #8]
    1ccc:	231d      	movs	r3, #29
    1cce:	9301      	str	r3, [sp, #4]
    1cd0:	331f      	adds	r3, #31
    1cd2:	9300      	str	r3, [sp, #0]
    1cd4:	3338      	adds	r3, #56	; 0x38
    1cd6:	228a      	movs	r2, #138	; 0x8a
    1cd8:	32ff      	adds	r2, #255	; 0xff
    1cda:	21f0      	movs	r1, #240	; 0xf0
    1cdc:	4c35      	ldr	r4, [pc, #212]	; (1db4 <drawKeypad+0x15c>)
    1cde:	47a0      	blx	r4
	//draw delete button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(del));
    1ce0:	4c2b      	ldr	r4, [pc, #172]	; (1d90 <drawKeypad+0x138>)
    1ce2:	4935      	ldr	r1, [pc, #212]	; (1db8 <drawKeypad+0x160>)
    1ce4:	6820      	ldr	r0, [r4, #0]
    1ce6:	4b30      	ldr	r3, [pc, #192]	; (1da8 <drawKeypad+0x150>)
    1ce8:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    1cea:	6820      	ldr	r0, [r4, #0]
    1cec:	4b2f      	ldr	r3, [pc, #188]	; (1dac <drawKeypad+0x154>)
    1cee:	781b      	ldrb	r3, [r3, #0]
    1cf0:	2b09      	cmp	r3, #9
    1cf2:	d045      	beq.n	1d80 <drawKeypad+0x128>
    1cf4:	2300      	movs	r3, #0
    1cf6:	4a31      	ldr	r2, [pc, #196]	; (1dbc <drawKeypad+0x164>)
    1cf8:	9203      	str	r2, [sp, #12]
    1cfa:	9302      	str	r3, [sp, #8]
    1cfc:	231d      	movs	r3, #29
    1cfe:	9301      	str	r3, [sp, #4]
    1d00:	331f      	adds	r3, #31
    1d02:	9300      	str	r3, [sp, #0]
    1d04:	3338      	adds	r3, #56	; 0x38
    1d06:	228a      	movs	r2, #138	; 0x8a
    1d08:	32ff      	adds	r2, #255	; 0xff
    1d0a:	21b6      	movs	r1, #182	; 0xb6
    1d0c:	0049      	lsls	r1, r1, #1
    1d0e:	4c29      	ldr	r4, [pc, #164]	; (1db4 <drawKeypad+0x15c>)
    1d10:	47a0      	blx	r4
	//draw clear button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(clr));
    1d12:	4c1f      	ldr	r4, [pc, #124]	; (1d90 <drawKeypad+0x138>)
    1d14:	492a      	ldr	r1, [pc, #168]	; (1dc0 <drawKeypad+0x168>)
    1d16:	6820      	ldr	r0, [r4, #0]
    1d18:	4b23      	ldr	r3, [pc, #140]	; (1da8 <drawKeypad+0x150>)
    1d1a:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    1d1c:	6820      	ldr	r0, [r4, #0]
    1d1e:	4b23      	ldr	r3, [pc, #140]	; (1dac <drawKeypad+0x154>)
    1d20:	781b      	ldrb	r3, [r3, #0]
    1d22:	2b0a      	cmp	r3, #10
    1d24:	d02e      	beq.n	1d84 <drawKeypad+0x12c>
    1d26:	2300      	movs	r3, #0
    1d28:	4a26      	ldr	r2, [pc, #152]	; (1dc4 <drawKeypad+0x16c>)
    1d2a:	9203      	str	r2, [sp, #12]
    1d2c:	9302      	str	r3, [sp, #8]
    1d2e:	231d      	movs	r3, #29
    1d30:	9301      	str	r3, [sp, #4]
    1d32:	3362      	adds	r3, #98	; 0x62
    1d34:	9300      	str	r3, [sp, #0]
    1d36:	3b2f      	subs	r3, #47	; 0x2f
    1d38:	22c0      	movs	r2, #192	; 0xc0
    1d3a:	21f2      	movs	r1, #242	; 0xf2
    1d3c:	0049      	lsls	r1, r1, #1
    1d3e:	4c1d      	ldr	r4, [pc, #116]	; (1db4 <drawKeypad+0x15c>)
    1d40:	47a0      	blx	r4
	//draw ok button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(ok));
    1d42:	4c13      	ldr	r4, [pc, #76]	; (1d90 <drawKeypad+0x138>)
    1d44:	4920      	ldr	r1, [pc, #128]	; (1dc8 <drawKeypad+0x170>)
    1d46:	6820      	ldr	r0, [r4, #0]
    1d48:	4b17      	ldr	r3, [pc, #92]	; (1da8 <drawKeypad+0x150>)
    1d4a:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    1d4c:	6820      	ldr	r0, [r4, #0]
    1d4e:	4b17      	ldr	r3, [pc, #92]	; (1dac <drawKeypad+0x154>)
    1d50:	781b      	ldrb	r3, [r3, #0]
    1d52:	2b0b      	cmp	r3, #11
    1d54:	d018      	beq.n	1d88 <drawKeypad+0x130>
    1d56:	2200      	movs	r2, #0
    1d58:	4b1c      	ldr	r3, [pc, #112]	; (1dcc <drawKeypad+0x174>)
    1d5a:	9303      	str	r3, [sp, #12]
    1d5c:	9202      	str	r2, [sp, #8]
    1d5e:	231d      	movs	r3, #29
    1d60:	9301      	str	r3, [sp, #4]
    1d62:	3362      	adds	r3, #98	; 0x62
    1d64:	9300      	str	r3, [sp, #0]
    1d66:	3b2f      	subs	r3, #47	; 0x2f
    1d68:	22a3      	movs	r2, #163	; 0xa3
    1d6a:	0052      	lsls	r2, r2, #1
    1d6c:	21f2      	movs	r1, #242	; 0xf2
    1d6e:	0049      	lsls	r1, r1, #1
    1d70:	4c10      	ldr	r4, [pc, #64]	; (1db4 <drawKeypad+0x15c>)
    1d72:	47a0      	blx	r4
}//end drawKeypad
    1d74:	b004      	add	sp, #16
    1d76:	bc04      	pop	{r2}
    1d78:	4690      	mov	r8, r2
    1d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    1d7c:	33d0      	adds	r3, #208	; 0xd0
    1d7e:	e7a2      	b.n	1cc6 <drawKeypad+0x6e>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    1d80:	33f7      	adds	r3, #247	; 0xf7
    1d82:	e7b8      	b.n	1cf6 <drawKeypad+0x9e>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    1d84:	33f6      	adds	r3, #246	; 0xf6
    1d86:	e7cf      	b.n	1d28 <drawKeypad+0xd0>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    1d88:	2280      	movs	r2, #128	; 0x80
    1d8a:	0052      	lsls	r2, r2, #1
    1d8c:	e7e4      	b.n	1d58 <drawKeypad+0x100>
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	20000720 	.word	0x20000720
    1d94:	00005590 	.word	0x00005590
    1d98:	00001679 	.word	0x00001679
    1d9c:	00005594 	.word	0x00005594
    1da0:	00005598 	.word	0x00005598
    1da4:	03000030 	.word	0x03000030
    1da8:	00001a15 	.word	0x00001a15
    1dac:	200000b5 	.word	0x200000b5
    1db0:	0000559c 	.word	0x0000559c
    1db4:	000014e5 	.word	0x000014e5
    1db8:	03000009 	.word	0x03000009
    1dbc:	000055a0 	.word	0x000055a0
    1dc0:	0300000a 	.word	0x0300000a
    1dc4:	000055a4 	.word	0x000055a4
    1dc8:	0300000b 	.word	0x0300000b
    1dcc:	000055a8 	.word	0x000055a8

00001dd0 <drawAlert>:
/* Function Name       : drawAlert
	* Parameters       : int x, int y, char stat
	* Return Values(s) : void
	* Description      : Draw alert, green if good attenuation, red otherwise
	*/
void drawAlert(int x, int y, char stat){
    1dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dd2:	46d6      	mov	lr, sl
    1dd4:	464f      	mov	r7, r9
    1dd6:	4646      	mov	r6, r8
    1dd8:	b5c0      	push	{r6, r7, lr}
    1dda:	4680      	mov	r8, r0
    1ddc:	000d      	movs	r5, r1
    1dde:	0014      	movs	r4, r2
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    1de0:	4f1f      	ldr	r7, [pc, #124]	; (1e60 <drawAlert+0x90>)
    1de2:	4920      	ldr	r1, [pc, #128]	; (1e64 <drawAlert+0x94>)
    1de4:	6838      	ldr	r0, [r7, #0]
    1de6:	4e20      	ldr	r6, [pc, #128]	; (1e68 <drawAlert+0x98>)
    1de8:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(7 * 16));
    1dea:	4920      	ldr	r1, [pc, #128]	; (1e6c <drawAlert+0x9c>)
    1dec:	6838      	ldr	r0, [r7, #0]
    1dee:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    1df0:	6838      	ldr	r0, [r7, #0]
    1df2:	491f      	ldr	r1, [pc, #124]	; (1e70 <drawAlert+0xa0>)
    1df4:	47b0      	blx	r6
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    1df6:	2c00      	cmp	r4, #0
    1df8:	d02b      	beq.n	1e52 <drawAlert+0x82>
	else					Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(204, 51, 0));
    1dfa:	4b19      	ldr	r3, [pc, #100]	; (1e60 <drawAlert+0x90>)
    1dfc:	6818      	ldr	r0, [r3, #0]
    1dfe:	491d      	ldr	r1, [pc, #116]	; (1e74 <drawAlert+0xa4>)
    1e00:	4b19      	ldr	r3, [pc, #100]	; (1e68 <drawAlert+0x98>)
    1e02:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(x * 16, y * 16) );
    1e04:	4643      	mov	r3, r8
    1e06:	04d9      	lsls	r1, r3, #19
    1e08:	4b1b      	ldr	r3, [pc, #108]	; (1e78 <drawAlert+0xa8>)
    1e0a:	469a      	mov	sl, r3
    1e0c:	4019      	ands	r1, r3
    1e0e:	012b      	lsls	r3, r5, #4
    1e10:	4a1a      	ldr	r2, [pc, #104]	; (1e7c <drawAlert+0xac>)
    1e12:	4691      	mov	r9, r2
    1e14:	4013      	ands	r3, r2
    1e16:	4319      	orrs	r1, r3
    1e18:	2680      	movs	r6, #128	; 0x80
    1e1a:	05f6      	lsls	r6, r6, #23
    1e1c:	4331      	orrs	r1, r6
    1e1e:	4c10      	ldr	r4, [pc, #64]	; (1e60 <drawAlert+0x90>)
    1e20:	6820      	ldr	r0, [r4, #0]
    1e22:	4f11      	ldr	r7, [pc, #68]	; (1e68 <drawAlert+0x98>)
    1e24:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + 25) * 16, (y + 20) * 16));
    1e26:	4641      	mov	r1, r8
    1e28:	3119      	adds	r1, #25
    1e2a:	04c9      	lsls	r1, r1, #19
    1e2c:	4653      	mov	r3, sl
    1e2e:	4019      	ands	r1, r3
    1e30:	3514      	adds	r5, #20
    1e32:	012d      	lsls	r5, r5, #4
    1e34:	464b      	mov	r3, r9
    1e36:	401d      	ands	r5, r3
    1e38:	4329      	orrs	r1, r5
    1e3a:	4331      	orrs	r1, r6
    1e3c:	6820      	ldr	r0, [r4, #0]
    1e3e:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, END());
    1e40:	6820      	ldr	r0, [r4, #0]
    1e42:	2184      	movs	r1, #132	; 0x84
    1e44:	0589      	lsls	r1, r1, #22
    1e46:	47b8      	blx	r7
}//end drawAlert
    1e48:	bc1c      	pop	{r2, r3, r4}
    1e4a:	4690      	mov	r8, r2
    1e4c:	4699      	mov	r9, r3
    1e4e:	46a2      	mov	sl, r4
    1e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    1e52:	4b03      	ldr	r3, [pc, #12]	; (1e60 <drawAlert+0x90>)
    1e54:	6818      	ldr	r0, [r3, #0]
    1e56:	490a      	ldr	r1, [pc, #40]	; (1e80 <drawAlert+0xb0>)
    1e58:	4b03      	ldr	r3, [pc, #12]	; (1e68 <drawAlert+0x98>)
    1e5a:	4798      	blx	r3
    1e5c:	e7d2      	b.n	1e04 <drawAlert+0x34>
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	20000720 	.word	0x20000720
    1e64:	1f000009 	.word	0x1f000009
    1e68:	00001a15 	.word	0x00001a15
    1e6c:	0e000070 	.word	0x0e000070
    1e70:	100000ff 	.word	0x100000ff
    1e74:	04cc3300 	.word	0x04cc3300
    1e78:	3ff80000 	.word	0x3ff80000
    1e7c:	00007ff0 	.word	0x00007ff0
    1e80:	0400ff55 	.word	0x0400ff55

00001e84 <disStart>:
/* Function Name    : disStart
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display start sequence
 */
void disStart(){
    1e84:	b570      	push	{r4, r5, r6, lr}
	Ft_Gpu_CoCmd_Dlstart(phost);
    1e86:	4c06      	ldr	r4, [pc, #24]	; (1ea0 <disStart+0x1c>)
    1e88:	6820      	ldr	r0, [r4, #0]
    1e8a:	4b06      	ldr	r3, [pc, #24]	; (1ea4 <disStart+0x20>)
    1e8c:	4798      	blx	r3
    //change this for initial bg
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    1e8e:	2180      	movs	r1, #128	; 0x80
    1e90:	0489      	lsls	r1, r1, #18
    1e92:	6820      	ldr	r0, [r4, #0]
    1e94:	4d04      	ldr	r5, [pc, #16]	; (1ea8 <disStart+0x24>)
    1e96:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(1,1,1));
    1e98:	6820      	ldr	r0, [r4, #0]
    1e9a:	4904      	ldr	r1, [pc, #16]	; (1eac <disStart+0x28>)
    1e9c:	47a8      	blx	r5
}//end disStart
    1e9e:	bd70      	pop	{r4, r5, r6, pc}
    1ea0:	20000720 	.word	0x20000720
    1ea4:	00001721 	.word	0x00001721
    1ea8:	00001a15 	.word	0x00001a15
    1eac:	26000007 	.word	0x26000007

00001eb0 <disEnd>:
/* Function Name    : disEnd
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display end sequence
 */
void disEnd(){
    1eb0:	b510      	push	{r4, lr}
	Ft_Gpu_Hal_WrCmd32(phost,DISPLAY());
    1eb2:	4c06      	ldr	r4, [pc, #24]	; (1ecc <disEnd+0x1c>)
    1eb4:	2100      	movs	r1, #0
    1eb6:	6820      	ldr	r0, [r4, #0]
    1eb8:	4b05      	ldr	r3, [pc, #20]	; (1ed0 <disEnd+0x20>)
    1eba:	4798      	blx	r3
	Ft_Gpu_CoCmd_Swap(phost);
    1ebc:	6820      	ldr	r0, [r4, #0]
    1ebe:	4b05      	ldr	r3, [pc, #20]	; (1ed4 <disEnd+0x24>)
    1ec0:	4798      	blx	r3
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    1ec2:	6820      	ldr	r0, [r4, #0]
    1ec4:	4b04      	ldr	r3, [pc, #16]	; (1ed8 <disEnd+0x28>)
    1ec6:	4798      	blx	r3
}//end disEnd
    1ec8:	bd10      	pop	{r4, pc}
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	20000720 	.word	0x20000720
    1ed0:	00001a15 	.word	0x00001a15
    1ed4:	000014b9 	.word	0x000014b9
    1ed8:	000019e5 	.word	0x000019e5

00001edc <attnOp>:
void attnOp(){
    1edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ede:	46de      	mov	lr, fp
    1ee0:	4657      	mov	r7, sl
    1ee2:	464e      	mov	r6, r9
    1ee4:	4645      	mov	r5, r8
    1ee6:	b5e0      	push	{r5, r6, r7, lr}
    1ee8:	b083      	sub	sp, #12
	char lastSec, lastMin=1, lastGood = time.second, trigger=0;
    1eea:	4bb0      	ldr	r3, [pc, #704]	; (21ac <STACK_SIZE+0x1ac>)
    1eec:	781b      	ldrb	r3, [r3, #0]
    1eee:	4698      	mov	r8, r3
    1ef0:	2300      	movs	r3, #0
    1ef2:	469b      	mov	fp, r3
    1ef4:	3301      	adds	r3, #1
    1ef6:	4699      	mov	r9, r3
    1ef8:	e05e      	b.n	1fb8 <attnOp+0xdc>
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi27<0)? 0:attenuation.rssi27));
    1efa:	2300      	movs	r3, #0
    1efc:	e084      	b.n	2008 <STACK_SIZE+0x8>
		Ft_Gpu_CoCmd_Number(phost, 500, 200, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    1efe:	2300      	movs	r3, #0
    1f00:	e097      	b.n	2032 <STACK_SIZE+0x32>
		Ft_Gpu_CoCmd_Number(phost, 500, 275, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    1f02:	2300      	movs	r3, #0
    1f04:	e0aa      	b.n	205c <STACK_SIZE+0x5c>
		Ft_Gpu_CoCmd_Number(phost, 500, 350, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    1f06:	2300      	movs	r3, #0
    1f08:	e0be      	b.n	2088 <STACK_SIZE+0x88>
			drawAlert(40, 125, (attenuation.rssi27<80)? 1:0);
    1f0a:	4fa9      	ldr	r7, [pc, #676]	; (21b0 <STACK_SIZE+0x1b0>)
    1f0c:	88fb      	ldrh	r3, [r7, #6]
    1f0e:	b21b      	sxth	r3, r3
    1f10:	254f      	movs	r5, #79	; 0x4f
    1f12:	0fda      	lsrs	r2, r3, #31
    1f14:	2600      	movs	r6, #0
    1f16:	429d      	cmp	r5, r3
    1f18:	4172      	adcs	r2, r6
    1f1a:	b2d2      	uxtb	r2, r2
    1f1c:	217d      	movs	r1, #125	; 0x7d
    1f1e:	2028      	movs	r0, #40	; 0x28
    1f20:	4ca4      	ldr	r4, [pc, #656]	; (21b4 <STACK_SIZE+0x1b4>)
    1f22:	47a0      	blx	r4
			drawAlert(40, 200, (attenuation.rssi169<80)? 1:0);
    1f24:	883b      	ldrh	r3, [r7, #0]
    1f26:	b21b      	sxth	r3, r3
    1f28:	0fda      	lsrs	r2, r3, #31
    1f2a:	429d      	cmp	r5, r3
    1f2c:	4172      	adcs	r2, r6
    1f2e:	b2d2      	uxtb	r2, r2
    1f30:	21c8      	movs	r1, #200	; 0xc8
    1f32:	2028      	movs	r0, #40	; 0x28
    1f34:	47a0      	blx	r4
			drawAlert(40, 275, (attenuation.rssi915<80)? 1:0);
    1f36:	887b      	ldrh	r3, [r7, #2]
    1f38:	b21b      	sxth	r3, r3
    1f3a:	0fda      	lsrs	r2, r3, #31
    1f3c:	429d      	cmp	r5, r3
    1f3e:	4172      	adcs	r2, r6
    1f40:	b2d2      	uxtb	r2, r2
    1f42:	2114      	movs	r1, #20
    1f44:	31ff      	adds	r1, #255	; 0xff
    1f46:	2028      	movs	r0, #40	; 0x28
    1f48:	47a0      	blx	r4
			drawAlert(40, 350, (attenuation.rssi245<80)? 1:0);
    1f4a:	88bb      	ldrh	r3, [r7, #4]
    1f4c:	b21b      	sxth	r3, r3
    1f4e:	0fda      	lsrs	r2, r3, #31
    1f50:	429d      	cmp	r5, r3
    1f52:	4172      	adcs	r2, r6
    1f54:	b2d2      	uxtb	r2, r2
    1f56:	21af      	movs	r1, #175	; 0xaf
    1f58:	0049      	lsls	r1, r1, #1
    1f5a:	2028      	movs	r0, #40	; 0x28
    1f5c:	47a0      	blx	r4
    1f5e:	e0e6      	b.n	212e <STACK_SIZE+0x12e>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    1f60:	4b92      	ldr	r3, [pc, #584]	; (21ac <STACK_SIZE+0x1ac>)
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	4642      	mov	r2, r8
    1f66:	1a9b      	subs	r3, r3, r2
    1f68:	2b0a      	cmp	r3, #10
    1f6a:	d100      	bne.n	1f6e <attnOp+0x92>
    1f6c:	e0f7      	b.n	215e <STACK_SIZE+0x15e>
    1f6e:	3332      	adds	r3, #50	; 0x32
    1f70:	d100      	bne.n	1f74 <attnOp+0x98>
    1f72:	e0f4      	b.n	215e <STACK_SIZE+0x15e>
		if (trigger == 1){
    1f74:	465b      	mov	r3, fp
    1f76:	2b01      	cmp	r3, #1
    1f78:	d100      	bne.n	1f7c <attnOp+0xa0>
    1f7a:	e0f7      	b.n	216c <STACK_SIZE+0x16c>
		if (time.minute%30 == 0 && time.minute != lastMin){
    1f7c:	4b8b      	ldr	r3, [pc, #556]	; (21ac <STACK_SIZE+0x1ac>)
    1f7e:	785c      	ldrb	r4, [r3, #1]
    1f80:	211e      	movs	r1, #30
    1f82:	0020      	movs	r0, r4
    1f84:	4b8c      	ldr	r3, [pc, #560]	; (21b8 <STACK_SIZE+0x1b8>)
    1f86:	4798      	blx	r3
    1f88:	b2c9      	uxtb	r1, r1
    1f8a:	2900      	cmp	r1, #0
    1f8c:	d103      	bne.n	1f96 <attnOp+0xba>
    1f8e:	464b      	mov	r3, r9
    1f90:	42a3      	cmp	r3, r4
    1f92:	d000      	beq.n	1f96 <attnOp+0xba>
			lastMin = time.minute;
    1f94:	46a1      	mov	r9, r4
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    1f96:	4b89      	ldr	r3, [pc, #548]	; (21bc <STACK_SIZE+0x1bc>)
    1f98:	6818      	ldr	r0, [r3, #0]
    1f9a:	4989      	ldr	r1, [pc, #548]	; (21c0 <STACK_SIZE+0x1c0>)
    1f9c:	4b89      	ldr	r3, [pc, #548]	; (21c4 <STACK_SIZE+0x1c4>)
    1f9e:	4798      	blx	r3
		drawBack();
    1fa0:	4b89      	ldr	r3, [pc, #548]	; (21c8 <STACK_SIZE+0x1c8>)
    1fa2:	4798      	blx	r3
		drawTitle("Attenuation");
    1fa4:	4889      	ldr	r0, [pc, #548]	; (21cc <STACK_SIZE+0x1cc>)
    1fa6:	4b8a      	ldr	r3, [pc, #552]	; (21d0 <STACK_SIZE+0x1d0>)
    1fa8:	4798      	blx	r3
		disEnd();
    1faa:	4b8a      	ldr	r3, [pc, #552]	; (21d4 <STACK_SIZE+0x1d4>)
    1fac:	4798      	blx	r3
	} while (tag != back);
    1fae:	4b8a      	ldr	r3, [pc, #552]	; (21d8 <STACK_SIZE+0x1d8>)
    1fb0:	781b      	ldrb	r3, [r3, #0]
    1fb2:	2b06      	cmp	r3, #6
    1fb4:	d100      	bne.n	1fb8 <attnOp+0xdc>
    1fb6:	e0f2      	b.n	219e <STACK_SIZE+0x19e>
		tag = 0;
    1fb8:	4e87      	ldr	r6, [pc, #540]	; (21d8 <STACK_SIZE+0x1d8>)
    1fba:	2300      	movs	r3, #0
    1fbc:	7033      	strb	r3, [r6, #0]
		rtc_calendar_get_time(&rtc_instance, &time);
    1fbe:	497b      	ldr	r1, [pc, #492]	; (21ac <STACK_SIZE+0x1ac>)
    1fc0:	4886      	ldr	r0, [pc, #536]	; (21dc <STACK_SIZE+0x1dc>)
    1fc2:	4b87      	ldr	r3, [pc, #540]	; (21e0 <STACK_SIZE+0x1e0>)
    1fc4:	4798      	blx	r3
		attenuation.rssi27 = 90;
    1fc6:	4c7a      	ldr	r4, [pc, #488]	; (21b0 <STACK_SIZE+0x1b0>)
    1fc8:	235a      	movs	r3, #90	; 0x5a
    1fca:	80e3      	strh	r3, [r4, #6]
		attenuation.rssi169 =  82;	//10 offset added based on testing
    1fcc:	3b08      	subs	r3, #8
    1fce:	8023      	strh	r3, [r4, #0]
		attenuation.rssi915 = 91;				// approved by Dr. Nguyen
    1fd0:	3309      	adds	r3, #9
    1fd2:	8063      	strh	r3, [r4, #2]
		attenuation.rssi245 =69;
    1fd4:	3b16      	subs	r3, #22
    1fd6:	80a3      	strh	r3, [r4, #4]
		disStart();
    1fd8:	4b82      	ldr	r3, [pc, #520]	; (21e4 <STACK_SIZE+0x1e4>)
    1fda:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    1fdc:	4d77      	ldr	r5, [pc, #476]	; (21bc <STACK_SIZE+0x1bc>)
    1fde:	4982      	ldr	r1, [pc, #520]	; (21e8 <STACK_SIZE+0x1e8>)
    1fe0:	6828      	ldr	r0, [r5, #0]
    1fe2:	4b82      	ldr	r3, [pc, #520]	; (21ec <STACK_SIZE+0x1ec>)
    1fe4:	4798      	blx	r3
    1fe6:	7030      	strb	r0, [r6, #0]
		Ft_Gpu_CoCmd_Append(phost, attnStart, attnEnd);
    1fe8:	4b81      	ldr	r3, [pc, #516]	; (21f0 <STACK_SIZE+0x1f0>)
    1fea:	681a      	ldr	r2, [r3, #0]
    1fec:	4b81      	ldr	r3, [pc, #516]	; (21f4 <STACK_SIZE+0x1f4>)
    1fee:	6819      	ldr	r1, [r3, #0]
    1ff0:	6828      	ldr	r0, [r5, #0]
    1ff2:	4b81      	ldr	r3, [pc, #516]	; (21f8 <STACK_SIZE+0x1f8>)
    1ff4:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi27<0)? 0:attenuation.rssi27));
    1ff6:	6828      	ldr	r0, [r5, #0]
    1ff8:	88e3      	ldrh	r3, [r4, #6]
    1ffa:	b21b      	sxth	r3, r3
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	da00      	bge.n	2002 <STACK_SIZE+0x2>
    2000:	e77b      	b.n	1efa <attnOp+0x1e>
    2002:	4b6b      	ldr	r3, [pc, #428]	; (21b0 <STACK_SIZE+0x1b0>)
    2004:	88db      	ldrh	r3, [r3, #6]
    2006:	b21b      	sxth	r3, r3
    2008:	9301      	str	r3, [sp, #4]
    200a:	2304      	movs	r3, #4
    200c:	33ff      	adds	r3, #255	; 0xff
    200e:	9300      	str	r3, [sp, #0]
    2010:	3be4      	subs	r3, #228	; 0xe4
    2012:	227d      	movs	r2, #125	; 0x7d
    2014:	21fa      	movs	r1, #250	; 0xfa
    2016:	0049      	lsls	r1, r1, #1
    2018:	4c78      	ldr	r4, [pc, #480]	; (21fc <STACK_SIZE+0x1fc>)
    201a:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 200, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    201c:	4b67      	ldr	r3, [pc, #412]	; (21bc <STACK_SIZE+0x1bc>)
    201e:	6818      	ldr	r0, [r3, #0]
    2020:	4b63      	ldr	r3, [pc, #396]	; (21b0 <STACK_SIZE+0x1b0>)
    2022:	881b      	ldrh	r3, [r3, #0]
    2024:	b21b      	sxth	r3, r3
    2026:	2b00      	cmp	r3, #0
    2028:	da00      	bge.n	202c <STACK_SIZE+0x2c>
    202a:	e768      	b.n	1efe <attnOp+0x22>
    202c:	4b60      	ldr	r3, [pc, #384]	; (21b0 <STACK_SIZE+0x1b0>)
    202e:	881b      	ldrh	r3, [r3, #0]
    2030:	b21b      	sxth	r3, r3
    2032:	9301      	str	r3, [sp, #4]
    2034:	2304      	movs	r3, #4
    2036:	33ff      	adds	r3, #255	; 0xff
    2038:	9300      	str	r3, [sp, #0]
    203a:	3be4      	subs	r3, #228	; 0xe4
    203c:	22c8      	movs	r2, #200	; 0xc8
    203e:	21fa      	movs	r1, #250	; 0xfa
    2040:	0049      	lsls	r1, r1, #1
    2042:	4c6e      	ldr	r4, [pc, #440]	; (21fc <STACK_SIZE+0x1fc>)
    2044:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 275, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    2046:	4b5d      	ldr	r3, [pc, #372]	; (21bc <STACK_SIZE+0x1bc>)
    2048:	6818      	ldr	r0, [r3, #0]
    204a:	4b59      	ldr	r3, [pc, #356]	; (21b0 <STACK_SIZE+0x1b0>)
    204c:	885b      	ldrh	r3, [r3, #2]
    204e:	b21b      	sxth	r3, r3
    2050:	2b00      	cmp	r3, #0
    2052:	da00      	bge.n	2056 <STACK_SIZE+0x56>
    2054:	e755      	b.n	1f02 <attnOp+0x26>
    2056:	4b56      	ldr	r3, [pc, #344]	; (21b0 <STACK_SIZE+0x1b0>)
    2058:	885b      	ldrh	r3, [r3, #2]
    205a:	b21b      	sxth	r3, r3
    205c:	9301      	str	r3, [sp, #4]
    205e:	2304      	movs	r3, #4
    2060:	33ff      	adds	r3, #255	; 0xff
    2062:	9300      	str	r3, [sp, #0]
    2064:	3be4      	subs	r3, #228	; 0xe4
    2066:	2214      	movs	r2, #20
    2068:	32ff      	adds	r2, #255	; 0xff
    206a:	21fa      	movs	r1, #250	; 0xfa
    206c:	0049      	lsls	r1, r1, #1
    206e:	4c63      	ldr	r4, [pc, #396]	; (21fc <STACK_SIZE+0x1fc>)
    2070:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 350, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    2072:	4b52      	ldr	r3, [pc, #328]	; (21bc <STACK_SIZE+0x1bc>)
    2074:	6818      	ldr	r0, [r3, #0]
    2076:	4b4e      	ldr	r3, [pc, #312]	; (21b0 <STACK_SIZE+0x1b0>)
    2078:	889b      	ldrh	r3, [r3, #4]
    207a:	b21b      	sxth	r3, r3
    207c:	2b00      	cmp	r3, #0
    207e:	da00      	bge.n	2082 <STACK_SIZE+0x82>
    2080:	e741      	b.n	1f06 <attnOp+0x2a>
    2082:	4b4b      	ldr	r3, [pc, #300]	; (21b0 <STACK_SIZE+0x1b0>)
    2084:	889b      	ldrh	r3, [r3, #4]
    2086:	b21b      	sxth	r3, r3
    2088:	9301      	str	r3, [sp, #4]
    208a:	2404      	movs	r4, #4
    208c:	34ff      	adds	r4, #255	; 0xff
    208e:	9400      	str	r4, [sp, #0]
    2090:	231f      	movs	r3, #31
    2092:	22af      	movs	r2, #175	; 0xaf
    2094:	0052      	lsls	r2, r2, #1
    2096:	21fa      	movs	r1, #250	; 0xfa
    2098:	0049      	lsls	r1, r1, #1
    209a:	4d58      	ldr	r5, [pc, #352]	; (21fc <STACK_SIZE+0x1fc>)
    209c:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, 250, 125, 31, OPT_SIGNED|3, "27MHz");
    209e:	4d47      	ldr	r5, [pc, #284]	; (21bc <STACK_SIZE+0x1bc>)
    20a0:	6828      	ldr	r0, [r5, #0]
    20a2:	4b57      	ldr	r3, [pc, #348]	; (2200 <STACK_SIZE+0x200>)
    20a4:	9301      	str	r3, [sp, #4]
    20a6:	9400      	str	r4, [sp, #0]
    20a8:	231f      	movs	r3, #31
    20aa:	227d      	movs	r2, #125	; 0x7d
    20ac:	21fa      	movs	r1, #250	; 0xfa
    20ae:	4f55      	ldr	r7, [pc, #340]	; (2204 <STACK_SIZE+0x204>)
    20b0:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 250, 200, 31, OPT_SIGNED|3, "169MHz");
    20b2:	6828      	ldr	r0, [r5, #0]
    20b4:	4b54      	ldr	r3, [pc, #336]	; (2208 <STACK_SIZE+0x208>)
    20b6:	9301      	str	r3, [sp, #4]
    20b8:	9400      	str	r4, [sp, #0]
    20ba:	231f      	movs	r3, #31
    20bc:	22c8      	movs	r2, #200	; 0xc8
    20be:	21fa      	movs	r1, #250	; 0xfa
    20c0:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 250, 275, 31, OPT_SIGNED|3, "915MHz");
    20c2:	6828      	ldr	r0, [r5, #0]
    20c4:	4b51      	ldr	r3, [pc, #324]	; (220c <STACK_SIZE+0x20c>)
    20c6:	9301      	str	r3, [sp, #4]
    20c8:	9400      	str	r4, [sp, #0]
    20ca:	231f      	movs	r3, #31
    20cc:	2214      	movs	r2, #20
    20ce:	32ff      	adds	r2, #255	; 0xff
    20d0:	21fa      	movs	r1, #250	; 0xfa
    20d2:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 250, 350, 31, OPT_SIGNED|3, "2.4GHz");
    20d4:	6828      	ldr	r0, [r5, #0]
    20d6:	4b4e      	ldr	r3, [pc, #312]	; (2210 <STACK_SIZE+0x210>)
    20d8:	9301      	str	r3, [sp, #4]
    20da:	9400      	str	r4, [sp, #0]
    20dc:	231f      	movs	r3, #31
    20de:	22af      	movs	r2, #175	; 0xaf
    20e0:	0052      	lsls	r2, r2, #1
    20e2:	21fa      	movs	r1, #250	; 0xfa
    20e4:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 650, 125, 31, OPT_SIGNED|3, "dB");
    20e6:	6828      	ldr	r0, [r5, #0]
    20e8:	4e4a      	ldr	r6, [pc, #296]	; (2214 <STACK_SIZE+0x214>)
    20ea:	9601      	str	r6, [sp, #4]
    20ec:	9400      	str	r4, [sp, #0]
    20ee:	231f      	movs	r3, #31
    20f0:	227d      	movs	r2, #125	; 0x7d
    20f2:	4949      	ldr	r1, [pc, #292]	; (2218 <STACK_SIZE+0x218>)
    20f4:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 650, 200, 31, OPT_SIGNED|3, "dB");
    20f6:	6828      	ldr	r0, [r5, #0]
    20f8:	9601      	str	r6, [sp, #4]
    20fa:	9400      	str	r4, [sp, #0]
    20fc:	231f      	movs	r3, #31
    20fe:	22c8      	movs	r2, #200	; 0xc8
    2100:	4945      	ldr	r1, [pc, #276]	; (2218 <STACK_SIZE+0x218>)
    2102:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 650, 275, 31, OPT_SIGNED|3, "dB");
    2104:	6828      	ldr	r0, [r5, #0]
    2106:	9601      	str	r6, [sp, #4]
    2108:	9400      	str	r4, [sp, #0]
    210a:	231f      	movs	r3, #31
    210c:	2214      	movs	r2, #20
    210e:	32ff      	adds	r2, #255	; 0xff
    2110:	4941      	ldr	r1, [pc, #260]	; (2218 <STACK_SIZE+0x218>)
    2112:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 650, 350, 31, OPT_SIGNED|3, "dB");
    2114:	6828      	ldr	r0, [r5, #0]
    2116:	9601      	str	r6, [sp, #4]
    2118:	9400      	str	r4, [sp, #0]
    211a:	231f      	movs	r3, #31
    211c:	22af      	movs	r2, #175	; 0xaf
    211e:	0052      	lsls	r2, r2, #1
    2120:	493d      	ldr	r1, [pc, #244]	; (2218 <STACK_SIZE+0x218>)
    2122:	47b8      	blx	r7
		if (alert == 1){
    2124:	4b3d      	ldr	r3, [pc, #244]	; (221c <STACK_SIZE+0x21c>)
    2126:	781b      	ldrb	r3, [r3, #0]
    2128:	2b01      	cmp	r3, #1
    212a:	d100      	bne.n	212e <STACK_SIZE+0x12e>
    212c:	e6ed      	b.n	1f0a <attnOp+0x2e>
		if (attenuation.rssi169>80 && attenuation.rssi915>80 && attenuation.rssi245>80){
    212e:	4b20      	ldr	r3, [pc, #128]	; (21b0 <STACK_SIZE+0x1b0>)
    2130:	881b      	ldrh	r3, [r3, #0]
    2132:	b21b      	sxth	r3, r3
    2134:	2b50      	cmp	r3, #80	; 0x50
    2136:	dc00      	bgt.n	213a <STACK_SIZE+0x13a>
    2138:	e712      	b.n	1f60 <attnOp+0x84>
    213a:	4b1d      	ldr	r3, [pc, #116]	; (21b0 <STACK_SIZE+0x1b0>)
    213c:	885b      	ldrh	r3, [r3, #2]
    213e:	b21b      	sxth	r3, r3
    2140:	2b50      	cmp	r3, #80	; 0x50
    2142:	dc00      	bgt.n	2146 <STACK_SIZE+0x146>
    2144:	e70c      	b.n	1f60 <attnOp+0x84>
    2146:	4b1a      	ldr	r3, [pc, #104]	; (21b0 <STACK_SIZE+0x1b0>)
    2148:	889b      	ldrh	r3, [r3, #4]
    214a:	b21b      	sxth	r3, r3
    214c:	2b50      	cmp	r3, #80	; 0x50
    214e:	dc00      	bgt.n	2152 <STACK_SIZE+0x152>
    2150:	e706      	b.n	1f60 <attnOp+0x84>
			lastGood = time.second;
    2152:	4b16      	ldr	r3, [pc, #88]	; (21ac <STACK_SIZE+0x1ac>)
    2154:	781b      	ldrb	r3, [r3, #0]
    2156:	4698      	mov	r8, r3
			trigger = 0;
    2158:	2300      	movs	r3, #0
    215a:	469b      	mov	fp, r3
    215c:	e70a      	b.n	1f74 <attnOp+0x98>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    215e:	465b      	mov	r3, fp
    2160:	2b00      	cmp	r3, #0
    2162:	d000      	beq.n	2166 <STACK_SIZE+0x166>
    2164:	e706      	b.n	1f74 <attnOp+0x98>
		trigger = 1;
    2166:	3301      	adds	r3, #1
    2168:	469b      	mov	fp, r3
    216a:	e703      	b.n	1f74 <attnOp+0x98>
			if (time.second%5 == 0 && time.second != lastSec && sound==1){
    216c:	4b0f      	ldr	r3, [pc, #60]	; (21ac <STACK_SIZE+0x1ac>)
    216e:	781c      	ldrb	r4, [r3, #0]
    2170:	2105      	movs	r1, #5
    2172:	0020      	movs	r0, r4
    2174:	4b10      	ldr	r3, [pc, #64]	; (21b8 <STACK_SIZE+0x1b8>)
    2176:	4798      	blx	r3
    2178:	b2c9      	uxtb	r1, r1
    217a:	2900      	cmp	r1, #0
    217c:	d000      	beq.n	2180 <STACK_SIZE+0x180>
    217e:	e6fd      	b.n	1f7c <attnOp+0xa0>
    2180:	4653      	mov	r3, sl
    2182:	42a3      	cmp	r3, r4
    2184:	d100      	bne.n	2188 <STACK_SIZE+0x188>
    2186:	e6f9      	b.n	1f7c <attnOp+0xa0>
    2188:	4b25      	ldr	r3, [pc, #148]	; (2220 <STACK_SIZE+0x220>)
    218a:	781b      	ldrb	r3, [r3, #0]
    218c:	2b01      	cmp	r3, #1
    218e:	d000      	beq.n	2192 <STACK_SIZE+0x192>
    2190:	e6f4      	b.n	1f7c <attnOp+0xa0>
				play();
    2192:	4b24      	ldr	r3, [pc, #144]	; (2224 <STACK_SIZE+0x224>)
    2194:	4798      	blx	r3
				lastSec = time.second;
    2196:	4b05      	ldr	r3, [pc, #20]	; (21ac <STACK_SIZE+0x1ac>)
    2198:	781b      	ldrb	r3, [r3, #0]
    219a:	469a      	mov	sl, r3
    219c:	e6ee      	b.n	1f7c <attnOp+0xa0>
}// end attnOp
    219e:	b003      	add	sp, #12
    21a0:	bc3c      	pop	{r2, r3, r4, r5}
    21a2:	4690      	mov	r8, r2
    21a4:	4699      	mov	r9, r3
    21a6:	46a2      	mov	sl, r4
    21a8:	46ab      	mov	fp, r5
    21aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21ac:	20000718 	.word	0x20000718
    21b0:	20000094 	.word	0x20000094
    21b4:	00001dd1 	.word	0x00001dd1
    21b8:	00004bf9 	.word	0x00004bf9
    21bc:	20000720 	.word	0x20000720
    21c0:	04ffffff 	.word	0x04ffffff
    21c4:	00001a15 	.word	0x00001a15
    21c8:	00001bfd 	.word	0x00001bfd
    21cc:	00005560 	.word	0x00005560
    21d0:	00001b7d 	.word	0x00001b7d
    21d4:	00001eb1 	.word	0x00001eb1
    21d8:	200000b5 	.word	0x200000b5
    21dc:	20000400 	.word	0x20000400
    21e0:	00000555 	.word	0x00000555
    21e4:	00001e85 	.word	0x00001e85
    21e8:	0030212c 	.word	0x0030212c
    21ec:	000018a5 	.word	0x000018a5
    21f0:	2000009c 	.word	0x2000009c
    21f4:	200000a0 	.word	0x200000a0
    21f8:	000015c9 	.word	0x000015c9
    21fc:	00001455 	.word	0x00001455
    2200:	0000553c 	.word	0x0000553c
    2204:	000013d1 	.word	0x000013d1
    2208:	00005544 	.word	0x00005544
    220c:	0000554c 	.word	0x0000554c
    2210:	00005554 	.word	0x00005554
    2214:	0000555c 	.word	0x0000555c
    2218:	0000028a 	.word	0x0000028a
    221c:	20000008 	.word	0x20000008
    2220:	200000b4 	.word	0x200000b4
    2224:	00001b25 	.word	0x00001b25

00002228 <historyOp>:
void historyOp(){
    2228:	b5f0      	push	{r4, r5, r6, r7, lr}
    222a:	46de      	mov	lr, fp
    222c:	4657      	mov	r7, sl
    222e:	464e      	mov	r6, r9
    2230:	4645      	mov	r5, r8
    2232:	b5e0      	push	{r5, r6, r7, lr}
    2234:	b0af      	sub	sp, #188	; 0xbc
    2236:	e05a      	b.n	22ee <historyOp+0xc6>
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    2238:	1c5a      	adds	r2, r3, #1
    223a:	920b      	str	r2, [sp, #44]	; 0x2c
					i+1, history[i][0], history[i][1], history[i][2], history[i][3], history[i][4], \
    223c:	4e3a      	ldr	r6, [pc, #232]	; (2328 <historyOp+0x100>)
    223e:	009a      	lsls	r2, r3, #2
    2240:	18d0      	adds	r0, r2, r3
    2242:	0081      	lsls	r1, r0, #2
    2244:	5f8d      	ldrsh	r5, [r1, r6]
    2246:	0081      	lsls	r1, r0, #2
    2248:	1871      	adds	r1, r6, r1
    224a:	2702      	movs	r7, #2
    224c:	5fc8      	ldrsh	r0, [r1, r7]
    224e:	900c      	str	r0, [sp, #48]	; 0x30
    2250:	2704      	movs	r7, #4
    2252:	5fc8      	ldrsh	r0, [r1, r7]
    2254:	2706      	movs	r7, #6
    2256:	5fcc      	ldrsh	r4, [r1, r7]
    2258:	940d      	str	r4, [sp, #52]	; 0x34
    225a:	2408      	movs	r4, #8
    225c:	5f0f      	ldrsh	r7, [r1, r4]
    225e:	46bc      	mov	ip, r7
					history[i][5], history[i][6], history[i][7], history[i][8], history[i][9]);
    2260:	240a      	movs	r4, #10
    2262:	5f0f      	ldrsh	r7, [r1, r4]
    2264:	46b8      	mov	r8, r7
    2266:	240c      	movs	r4, #12
    2268:	5f0f      	ldrsh	r7, [r1, r4]
    226a:	46b9      	mov	r9, r7
    226c:	240e      	movs	r4, #14
    226e:	5f0f      	ldrsh	r7, [r1, r4]
    2270:	2410      	movs	r4, #16
    2272:	5f09      	ldrsh	r1, [r1, r4]
    2274:	468b      	mov	fp, r1
    2276:	18d3      	adds	r3, r2, r3
    2278:	009a      	lsls	r2, r3, #2
    227a:	18b6      	adds	r6, r6, r2
    227c:	2112      	movs	r1, #18
    227e:	5e73      	ldrsh	r3, [r6, r1]
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    2280:	ae0e      	add	r6, sp, #56	; 0x38
    2282:	9309      	str	r3, [sp, #36]	; 0x24
    2284:	465b      	mov	r3, fp
    2286:	9308      	str	r3, [sp, #32]
    2288:	9707      	str	r7, [sp, #28]
    228a:	464b      	mov	r3, r9
    228c:	9306      	str	r3, [sp, #24]
    228e:	4643      	mov	r3, r8
    2290:	9305      	str	r3, [sp, #20]
    2292:	4663      	mov	r3, ip
    2294:	9304      	str	r3, [sp, #16]
    2296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2298:	9303      	str	r3, [sp, #12]
    229a:	9002      	str	r0, [sp, #8]
    229c:	980c      	ldr	r0, [sp, #48]	; 0x30
    229e:	9001      	str	r0, [sp, #4]
    22a0:	9500      	str	r5, [sp, #0]
    22a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    22a4:	002b      	movs	r3, r5
    22a6:	4a21      	ldr	r2, [pc, #132]	; (232c <historyOp+0x104>)
    22a8:	2180      	movs	r1, #128	; 0x80
    22aa:	0030      	movs	r0, r6
    22ac:	4f20      	ldr	r7, [pc, #128]	; (2330 <historyOp+0x108>)
    22ae:	47b8      	blx	r7
			Ft_Gpu_CoCmd_Text(phost, 50, y, 28, 0,buff);
    22b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    22b2:	b222      	sxth	r2, r4
    22b4:	4b1f      	ldr	r3, [pc, #124]	; (2334 <historyOp+0x10c>)
    22b6:	6818      	ldr	r0, [r3, #0]
    22b8:	9601      	str	r6, [sp, #4]
    22ba:	2300      	movs	r3, #0
    22bc:	9300      	str	r3, [sp, #0]
    22be:	331c      	adds	r3, #28
    22c0:	2132      	movs	r1, #50	; 0x32
    22c2:	4e1d      	ldr	r6, [pc, #116]	; (2338 <historyOp+0x110>)
    22c4:	47b0      	blx	r6
			y = y + 30;
    22c6:	0023      	movs	r3, r4
    22c8:	331e      	adds	r3, #30
    22ca:	930a      	str	r3, [sp, #40]	; 0x28
		for(i = 0; i < 10; i++){
    22cc:	002b      	movs	r3, r5
    22ce:	2b09      	cmp	r3, #9
    22d0:	ddb2      	ble.n	2238 <historyOp+0x10>
		drawBack();
    22d2:	4b1a      	ldr	r3, [pc, #104]	; (233c <historyOp+0x114>)
    22d4:	4798      	blx	r3
		drawTitle("History");
    22d6:	481a      	ldr	r0, [pc, #104]	; (2340 <historyOp+0x118>)
    22d8:	4b1a      	ldr	r3, [pc, #104]	; (2344 <historyOp+0x11c>)
    22da:	4798      	blx	r3
		disEnd();
    22dc:	4b1a      	ldr	r3, [pc, #104]	; (2348 <historyOp+0x120>)
    22de:	4798      	blx	r3
		delay_ms(50);
    22e0:	2032      	movs	r0, #50	; 0x32
    22e2:	4b1a      	ldr	r3, [pc, #104]	; (234c <historyOp+0x124>)
    22e4:	4798      	blx	r3
	} while (tag != back);
    22e6:	4b1a      	ldr	r3, [pc, #104]	; (2350 <historyOp+0x128>)
    22e8:	781b      	ldrb	r3, [r3, #0]
    22ea:	2b06      	cmp	r3, #6
    22ec:	d015      	beq.n	231a <historyOp+0xf2>
		tag = 0;
    22ee:	4d18      	ldr	r5, [pc, #96]	; (2350 <historyOp+0x128>)
    22f0:	2300      	movs	r3, #0
    22f2:	702b      	strb	r3, [r5, #0]
		disStart();
    22f4:	4b17      	ldr	r3, [pc, #92]	; (2354 <historyOp+0x12c>)
    22f6:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    22f8:	4c0e      	ldr	r4, [pc, #56]	; (2334 <historyOp+0x10c>)
    22fa:	4917      	ldr	r1, [pc, #92]	; (2358 <historyOp+0x130>)
    22fc:	6820      	ldr	r0, [r4, #0]
    22fe:	4b17      	ldr	r3, [pc, #92]	; (235c <historyOp+0x134>)
    2300:	4798      	blx	r3
    2302:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Append(phost, histStart, histEnd);
    2304:	4b16      	ldr	r3, [pc, #88]	; (2360 <historyOp+0x138>)
    2306:	681a      	ldr	r2, [r3, #0]
    2308:	4b16      	ldr	r3, [pc, #88]	; (2364 <historyOp+0x13c>)
    230a:	6819      	ldr	r1, [r3, #0]
    230c:	6820      	ldr	r0, [r4, #0]
    230e:	4b16      	ldr	r3, [pc, #88]	; (2368 <historyOp+0x140>)
    2310:	4798      	blx	r3
		y = 125;
    2312:	247d      	movs	r4, #125	; 0x7d
		for(i = 0; i < 10; i++){
    2314:	2300      	movs	r3, #0
    2316:	940a      	str	r4, [sp, #40]	; 0x28
    2318:	e7d9      	b.n	22ce <historyOp+0xa6>
}//end histOp
    231a:	b02f      	add	sp, #188	; 0xbc
    231c:	bc3c      	pop	{r2, r3, r4, r5}
    231e:	4690      	mov	r8, r2
    2320:	4699      	mov	r9, r3
    2322:	46a2      	mov	sl, r4
    2324:	46ab      	mov	fp, r5
    2326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2328:	20000650 	.word	0x20000650
    232c:	000055ac 	.word	0x000055ac
    2330:	00004cc5 	.word	0x00004cc5
    2334:	20000720 	.word	0x20000720
    2338:	000013d1 	.word	0x000013d1
    233c:	00001bfd 	.word	0x00001bfd
    2340:	0000561c 	.word	0x0000561c
    2344:	00001b7d 	.word	0x00001b7d
    2348:	00001eb1 	.word	0x00001eb1
    234c:	00000151 	.word	0x00000151
    2350:	200000b5 	.word	0x200000b5
    2354:	00001e85 	.word	0x00001e85
    2358:	0030212c 	.word	0x0030212c
    235c:	000018a5 	.word	0x000018a5
    2360:	200000a4 	.word	0x200000a4
    2364:	200000a8 	.word	0x200000a8
    2368:	000015c9 	.word	0x000015c9

0000236c <rssiOp>:
void rssiOp(){
    236c:	b5f0      	push	{r4, r5, r6, r7, lr}
    236e:	46de      	mov	lr, fp
    2370:	b500      	push	{lr}
    2372:	b082      	sub	sp, #8
	tag = 0;
    2374:	4e48      	ldr	r6, [pc, #288]	; (2498 <rssiOp+0x12c>)
    2376:	2300      	movs	r3, #0
    2378:	7033      	strb	r3, [r6, #0]
		disStart();
    237a:	4b48      	ldr	r3, [pc, #288]	; (249c <rssiOp+0x130>)
    237c:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    237e:	4c48      	ldr	r4, [pc, #288]	; (24a0 <rssiOp+0x134>)
    2380:	4948      	ldr	r1, [pc, #288]	; (24a4 <rssiOp+0x138>)
    2382:	6820      	ldr	r0, [r4, #0]
    2384:	4b48      	ldr	r3, [pc, #288]	; (24a8 <rssiOp+0x13c>)
    2386:	4798      	blx	r3
    2388:	7030      	strb	r0, [r6, #0]
		Ft_Gpu_CoCmd_Append(phost, rssiStart, rssiEnd);
    238a:	4b48      	ldr	r3, [pc, #288]	; (24ac <rssiOp+0x140>)
    238c:	681a      	ldr	r2, [r3, #0]
    238e:	4b48      	ldr	r3, [pc, #288]	; (24b0 <rssiOp+0x144>)
    2390:	6819      	ldr	r1, [r3, #0]
    2392:	6820      	ldr	r0, [r4, #0]
    2394:	4b47      	ldr	r3, [pc, #284]	; (24b4 <rssiOp+0x148>)
    2396:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 650, 125, 31, OPT_SIGNED|OPT_CENTER|3, 11);
    2398:	6820      	ldr	r0, [r4, #0]
    239a:	230b      	movs	r3, #11
    239c:	9301      	str	r3, [sp, #4]
    239e:	4d46      	ldr	r5, [pc, #280]	; (24b8 <rssiOp+0x14c>)
    23a0:	9500      	str	r5, [sp, #0]
    23a2:	3314      	adds	r3, #20
    23a4:	227d      	movs	r2, #125	; 0x7d
    23a6:	4945      	ldr	r1, [pc, #276]	; (24bc <rssiOp+0x150>)
    23a8:	4f45      	ldr	r7, [pc, #276]	; (24c0 <rssiOp+0x154>)
    23aa:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 200, 31, OPT_SIGNED|OPT_CENTER|3, 10);
    23ac:	6820      	ldr	r0, [r4, #0]
    23ae:	230a      	movs	r3, #10
    23b0:	9301      	str	r3, [sp, #4]
    23b2:	9500      	str	r5, [sp, #0]
    23b4:	3315      	adds	r3, #21
    23b6:	22c8      	movs	r2, #200	; 0xc8
    23b8:	4940      	ldr	r1, [pc, #256]	; (24bc <rssiOp+0x150>)
    23ba:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 275, 31, OPT_SIGNED|OPT_CENTER|3, 23);
    23bc:	6820      	ldr	r0, [r4, #0]
    23be:	2317      	movs	r3, #23
    23c0:	9301      	str	r3, [sp, #4]
    23c2:	9500      	str	r5, [sp, #0]
    23c4:	3308      	adds	r3, #8
    23c6:	2214      	movs	r2, #20
    23c8:	32ff      	adds	r2, #255	; 0xff
    23ca:	493c      	ldr	r1, [pc, #240]	; (24bc <rssiOp+0x150>)
    23cc:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 350, 31, OPT_SIGNED|OPT_CENTER|3, 14);
    23ce:	6820      	ldr	r0, [r4, #0]
    23d0:	230e      	movs	r3, #14
    23d2:	9301      	str	r3, [sp, #4]
    23d4:	9500      	str	r5, [sp, #0]
    23d6:	3311      	adds	r3, #17
    23d8:	22af      	movs	r2, #175	; 0xaf
    23da:	0052      	lsls	r2, r2, #1
    23dc:	4937      	ldr	r1, [pc, #220]	; (24bc <rssiOp+0x150>)
    23de:	47b8      	blx	r7
	  	Ft_Gpu_CoCmd_Text(phost, 400, 125, 31, OPT_SIGNED|3, "27MHz");
    23e0:	6820      	ldr	r0, [r4, #0]
    23e2:	4b38      	ldr	r3, [pc, #224]	; (24c4 <rssiOp+0x158>)
    23e4:	9301      	str	r3, [sp, #4]
    23e6:	2504      	movs	r5, #4
    23e8:	35ff      	adds	r5, #255	; 0xff
    23ea:	9500      	str	r5, [sp, #0]
    23ec:	231f      	movs	r3, #31
    23ee:	227d      	movs	r2, #125	; 0x7d
    23f0:	21c8      	movs	r1, #200	; 0xc8
    23f2:	0049      	lsls	r1, r1, #1
    23f4:	4f34      	ldr	r7, [pc, #208]	; (24c8 <rssiOp+0x15c>)
    23f6:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 200, 31, OPT_SIGNED|3, "169MHz");
    23f8:	6820      	ldr	r0, [r4, #0]
    23fa:	4b34      	ldr	r3, [pc, #208]	; (24cc <rssiOp+0x160>)
    23fc:	9301      	str	r3, [sp, #4]
    23fe:	9500      	str	r5, [sp, #0]
    2400:	231f      	movs	r3, #31
    2402:	22c8      	movs	r2, #200	; 0xc8
    2404:	21c8      	movs	r1, #200	; 0xc8
    2406:	0049      	lsls	r1, r1, #1
    2408:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 275, 31, OPT_SIGNED|3, "915MHz");
    240a:	6820      	ldr	r0, [r4, #0]
    240c:	4b30      	ldr	r3, [pc, #192]	; (24d0 <rssiOp+0x164>)
    240e:	9301      	str	r3, [sp, #4]
    2410:	9500      	str	r5, [sp, #0]
    2412:	231f      	movs	r3, #31
    2414:	2214      	movs	r2, #20
    2416:	32ff      	adds	r2, #255	; 0xff
    2418:	21c8      	movs	r1, #200	; 0xc8
    241a:	0049      	lsls	r1, r1, #1
    241c:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 350, 31, OPT_SIGNED|3, "2.4GHz");
    241e:	6820      	ldr	r0, [r4, #0]
    2420:	4b2c      	ldr	r3, [pc, #176]	; (24d4 <rssiOp+0x168>)
    2422:	9301      	str	r3, [sp, #4]
    2424:	9500      	str	r5, [sp, #0]
    2426:	231f      	movs	r3, #31
    2428:	22af      	movs	r2, #175	; 0xaf
    242a:	0052      	lsls	r2, r2, #1
    242c:	21c8      	movs	r1, #200	; 0xc8
    242e:	0049      	lsls	r1, r1, #1
    2430:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 125, 31, OPT_SIGNED|3, "dB");
    2432:	6820      	ldr	r0, [r4, #0]
    2434:	4b28      	ldr	r3, [pc, #160]	; (24d8 <rssiOp+0x16c>)
    2436:	469b      	mov	fp, r3
    2438:	9301      	str	r3, [sp, #4]
    243a:	9500      	str	r5, [sp, #0]
    243c:	231f      	movs	r3, #31
    243e:	227d      	movs	r2, #125	; 0x7d
    2440:	4926      	ldr	r1, [pc, #152]	; (24dc <rssiOp+0x170>)
    2442:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 200, 31, OPT_SIGNED|3, "dB");
    2444:	6820      	ldr	r0, [r4, #0]
    2446:	465b      	mov	r3, fp
    2448:	9301      	str	r3, [sp, #4]
    244a:	9500      	str	r5, [sp, #0]
    244c:	231f      	movs	r3, #31
    244e:	22c8      	movs	r2, #200	; 0xc8
    2450:	4922      	ldr	r1, [pc, #136]	; (24dc <rssiOp+0x170>)
    2452:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 275, 31, OPT_SIGNED|3, "dB");
    2454:	6820      	ldr	r0, [r4, #0]
    2456:	465b      	mov	r3, fp
    2458:	9301      	str	r3, [sp, #4]
    245a:	9500      	str	r5, [sp, #0]
    245c:	231f      	movs	r3, #31
    245e:	2214      	movs	r2, #20
    2460:	32ff      	adds	r2, #255	; 0xff
    2462:	491e      	ldr	r1, [pc, #120]	; (24dc <rssiOp+0x170>)
    2464:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 350, 31, OPT_SIGNED|3, "dB");
    2466:	6820      	ldr	r0, [r4, #0]
    2468:	465b      	mov	r3, fp
    246a:	9301      	str	r3, [sp, #4]
    246c:	9500      	str	r5, [sp, #0]
    246e:	231f      	movs	r3, #31
    2470:	22af      	movs	r2, #175	; 0xaf
    2472:	0052      	lsls	r2, r2, #1
    2474:	4919      	ldr	r1, [pc, #100]	; (24dc <rssiOp+0x170>)
    2476:	47b8      	blx	r7
		drawBack();
    2478:	4b19      	ldr	r3, [pc, #100]	; (24e0 <rssiOp+0x174>)
    247a:	4798      	blx	r3
		drawTitle("RSSI [interior]");
    247c:	4819      	ldr	r0, [pc, #100]	; (24e4 <rssiOp+0x178>)
    247e:	4b1a      	ldr	r3, [pc, #104]	; (24e8 <rssiOp+0x17c>)
    2480:	4798      	blx	r3
		disEnd();
    2482:	4b1a      	ldr	r3, [pc, #104]	; (24ec <rssiOp+0x180>)
    2484:	4798      	blx	r3
	} while (tag != back);
    2486:	7833      	ldrb	r3, [r6, #0]
    2488:	2b06      	cmp	r3, #6
    248a:	d000      	beq.n	248e <rssiOp+0x122>
    248c:	e772      	b.n	2374 <rssiOp+0x8>
}//end rssiOp
    248e:	b002      	add	sp, #8
    2490:	bc04      	pop	{r2}
    2492:	4693      	mov	fp, r2
    2494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	200000b5 	.word	0x200000b5
    249c:	00001e85 	.word	0x00001e85
    24a0:	20000720 	.word	0x20000720
    24a4:	0030212c 	.word	0x0030212c
    24a8:	000018a5 	.word	0x000018a5
    24ac:	200000ac 	.word	0x200000ac
    24b0:	200000b0 	.word	0x200000b0
    24b4:	000015c9 	.word	0x000015c9
    24b8:	00000703 	.word	0x00000703
    24bc:	0000028a 	.word	0x0000028a
    24c0:	00001455 	.word	0x00001455
    24c4:	0000553c 	.word	0x0000553c
    24c8:	000013d1 	.word	0x000013d1
    24cc:	00005544 	.word	0x00005544
    24d0:	0000554c 	.word	0x0000554c
    24d4:	00005554 	.word	0x00005554
    24d8:	0000555c 	.word	0x0000555c
    24dc:	000002ee 	.word	0x000002ee
    24e0:	00001bfd 	.word	0x00001bfd
    24e4:	00005644 	.word	0x00005644
    24e8:	00001b7d 	.word	0x00001b7d
    24ec:	00001eb1 	.word	0x00001eb1

000024f0 <calScreen>:
void calScreen(){
    24f0:	b530      	push	{r4, r5, lr}
    24f2:	b083      	sub	sp, #12
	disStart();
    24f4:	4b0c      	ldr	r3, [pc, #48]	; (2528 <calScreen+0x38>)
    24f6:	4798      	blx	r3
	Ft_Gpu_CoCmd_Text(phost,disWid/2,disHei/2,30,OPT_CENTER,"Please tap on the dot");
    24f8:	4c0c      	ldr	r4, [pc, #48]	; (252c <calScreen+0x3c>)
    24fa:	6820      	ldr	r0, [r4, #0]
    24fc:	4b0c      	ldr	r3, [pc, #48]	; (2530 <calScreen+0x40>)
    24fe:	9301      	str	r3, [sp, #4]
    2500:	23c0      	movs	r3, #192	; 0xc0
    2502:	00db      	lsls	r3, r3, #3
    2504:	9300      	str	r3, [sp, #0]
    2506:	231e      	movs	r3, #30
    2508:	22f0      	movs	r2, #240	; 0xf0
    250a:	21c8      	movs	r1, #200	; 0xc8
    250c:	0049      	lsls	r1, r1, #1
    250e:	4d09      	ldr	r5, [pc, #36]	; (2534 <calScreen+0x44>)
    2510:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Calibrate(phost,0);
    2512:	6820      	ldr	r0, [r4, #0]
    2514:	2100      	movs	r1, #0
    2516:	4b08      	ldr	r3, [pc, #32]	; (2538 <calScreen+0x48>)
    2518:	4798      	blx	r3
	disEnd();
    251a:	4b08      	ldr	r3, [pc, #32]	; (253c <calScreen+0x4c>)
    251c:	4798      	blx	r3
	delay_ms(100);
    251e:	2064      	movs	r0, #100	; 0x64
    2520:	4b07      	ldr	r3, [pc, #28]	; (2540 <calScreen+0x50>)
    2522:	4798      	blx	r3
}//end calScreen
    2524:	b003      	add	sp, #12
    2526:	bd30      	pop	{r4, r5, pc}
    2528:	00001e85 	.word	0x00001e85
    252c:	20000720 	.word	0x20000720
    2530:	0000556c 	.word	0x0000556c
    2534:	000013d1 	.word	0x000013d1
    2538:	0000158d 	.word	0x0000158d
    253c:	00001eb1 	.word	0x00001eb1
    2540:	00000151 	.word	0x00000151

00002544 <setTime>:
void setTime(){
    2544:	b5f0      	push	{r4, r5, r6, r7, lr}
    2546:	46de      	mov	lr, fp
    2548:	4657      	mov	r7, sl
    254a:	464e      	mov	r6, r9
    254c:	4645      	mov	r5, r8
    254e:	b5e0      	push	{r5, r6, r7, lr}
    2550:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, timeIn[10] = "0", i = 0, pressed = 0;
    2552:	2330      	movs	r3, #48	; 0x30
    2554:	9305      	str	r3, [sp, #20]
    2556:	2206      	movs	r2, #6
    2558:	2100      	movs	r1, #0
    255a:	a806      	add	r0, sp, #24
    255c:	4b88      	ldr	r3, [pc, #544]	; (2780 <setTime+0x23c>)
    255e:	4798      	blx	r3
    2560:	2300      	movs	r3, #0
    2562:	9303      	str	r3, [sp, #12]
    2564:	2600      	movs	r6, #0
    2566:	469b      	mov	fp, r3
    2568:	e022      	b.n	25b0 <setTime+0x6c>
		else							timeIn[i] = '_';
    256a:	225f      	movs	r2, #95	; 0x5f
    256c:	ab05      	add	r3, sp, #20
    256e:	559a      	strb	r2, [r3, r6]
    2570:	e029      	b.n	25c6 <setTime+0x82>
		if (tag>47 && tag<58)	pressed = tag - 48;
    2572:	9203      	str	r2, [sp, #12]
    2574:	e081      	b.n	267a <setTime+0x136>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    2576:	2e01      	cmp	r6, #1
    2578:	d100      	bne.n	257c <setTime+0x38>
    257a:	e090      	b.n	269e <setTime+0x15a>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    257c:	2e03      	cmp	r6, #3
    257e:	d100      	bne.n	2582 <setTime+0x3e>
    2580:	e096      	b.n	26b0 <setTime+0x16c>
    2582:	2e06      	cmp	r6, #6
    2584:	d100      	bne.n	2588 <setTime+0x44>
    2586:	e093      	b.n	26b0 <setTime+0x16c>
					timeIn[i] = tag;
    2588:	aa05      	add	r2, sp, #20
    258a:	5593      	strb	r3, [r2, r6]
					i++;
    258c:	3601      	adds	r6, #1
    258e:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==9){		//if ok is pressed
    2590:	2b0b      	cmp	r3, #11
    2592:	d100      	bne.n	2596 <setTime+0x52>
    2594:	e0b0      	b.n	26f8 <setTime+0x1b4>
    2596:	2e09      	cmp	r6, #9
    2598:	d100      	bne.n	259c <setTime+0x58>
    259a:	e0ad      	b.n	26f8 <setTime+0x1b4>
			tempTag = tag;
    259c:	469b      	mov	fp, r3
		if(i==2 || i==5){
    259e:	2e02      	cmp	r6, #2
    25a0:	d100      	bne.n	25a4 <setTime+0x60>
    25a2:	e0e6      	b.n	2772 <setTime+0x22e>
    25a4:	2e05      	cmp	r6, #5
    25a6:	d100      	bne.n	25aa <setTime+0x66>
    25a8:	e0e3      	b.n	2772 <setTime+0x22e>
	}while(tag != back);
    25aa:	2b06      	cmp	r3, #6
    25ac:	d100      	bne.n	25b0 <setTime+0x6c>
    25ae:	e0d6      	b.n	275e <setTime+0x21a>
		rtc_calendar_get_time(&rtc_instance, &time);
    25b0:	4c74      	ldr	r4, [pc, #464]	; (2784 <setTime+0x240>)
    25b2:	0021      	movs	r1, r4
    25b4:	4874      	ldr	r0, [pc, #464]	; (2788 <setTime+0x244>)
    25b6:	4b75      	ldr	r3, [pc, #468]	; (278c <setTime+0x248>)
    25b8:	4798      	blx	r3
		if (time.second%2 == 1)			timeIn[i] = ' ';
    25ba:	7823      	ldrb	r3, [r4, #0]
    25bc:	07db      	lsls	r3, r3, #31
    25be:	d5d4      	bpl.n	256a <setTime+0x26>
    25c0:	2220      	movs	r2, #32
    25c2:	ab05      	add	r3, sp, #20
    25c4:	559a      	strb	r2, [r3, r6]
		tag = 0;
    25c6:	4b72      	ldr	r3, [pc, #456]	; (2790 <setTime+0x24c>)
    25c8:	4699      	mov	r9, r3
    25ca:	2300      	movs	r3, #0
    25cc:	4698      	mov	r8, r3
    25ce:	464a      	mov	r2, r9
    25d0:	7013      	strb	r3, [r2, #0]
		disStart();
    25d2:	4b70      	ldr	r3, [pc, #448]	; (2794 <setTime+0x250>)
    25d4:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    25d6:	4c70      	ldr	r4, [pc, #448]	; (2798 <setTime+0x254>)
    25d8:	4970      	ldr	r1, [pc, #448]	; (279c <setTime+0x258>)
    25da:	6820      	ldr	r0, [r4, #0]
    25dc:	4d70      	ldr	r5, [pc, #448]	; (27a0 <setTime+0x25c>)
    25de:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    25e0:	4970      	ldr	r1, [pc, #448]	; (27a4 <setTime+0x260>)
    25e2:	6820      	ldr	r0, [r4, #0]
    25e4:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    25e6:	4970      	ldr	r1, [pc, #448]	; (27a8 <setTime+0x264>)
    25e8:	6820      	ldr	r0, [r4, #0]
    25ea:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    25ec:	496f      	ldr	r1, [pc, #444]	; (27ac <setTime+0x268>)
    25ee:	6820      	ldr	r0, [r4, #0]
    25f0:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    25f2:	496f      	ldr	r1, [pc, #444]	; (27b0 <setTime+0x26c>)
    25f4:	6820      	ldr	r0, [r4, #0]
    25f6:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    25f8:	2184      	movs	r1, #132	; 0x84
    25fa:	0589      	lsls	r1, r1, #22
    25fc:	6820      	ldr	r0, [r4, #0]
    25fe:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2600:	4969      	ldr	r1, [pc, #420]	; (27a8 <setTime+0x264>)
    2602:	6820      	ldr	r0, [r4, #0]
    2604:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Time");
    2606:	6820      	ldr	r0, [r4, #0]
    2608:	4b6a      	ldr	r3, [pc, #424]	; (27b4 <setTime+0x270>)
    260a:	9301      	str	r3, [sp, #4]
    260c:	4643      	mov	r3, r8
    260e:	9300      	str	r3, [sp, #0]
    2610:	331c      	adds	r3, #28
    2612:	2230      	movs	r2, #48	; 0x30
    2614:	21f0      	movs	r1, #240	; 0xf0
    2616:	4f68      	ldr	r7, [pc, #416]	; (27b8 <setTime+0x274>)
    2618:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "hh:mm:ss    (24h format)");
    261a:	6820      	ldr	r0, [r4, #0]
    261c:	4b67      	ldr	r3, [pc, #412]	; (27bc <setTime+0x278>)
    261e:	9301      	str	r3, [sp, #4]
    2620:	4643      	mov	r3, r8
    2622:	9300      	str	r3, [sp, #0]
    2624:	331c      	adds	r3, #28
    2626:	2248      	movs	r2, #72	; 0x48
    2628:	21f0      	movs	r1, #240	; 0xf0
    262a:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    262c:	2180      	movs	r1, #128	; 0x80
    262e:	04c9      	lsls	r1, r1, #19
    2630:	6820      	ldr	r0, [r4, #0]
    2632:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, timeIn);
    2634:	6820      	ldr	r0, [r4, #0]
    2636:	ab05      	add	r3, sp, #20
    2638:	9301      	str	r3, [sp, #4]
    263a:	4643      	mov	r3, r8
    263c:	9300      	str	r3, [sp, #0]
    263e:	331e      	adds	r3, #30
    2640:	2278      	movs	r2, #120	; 0x78
    2642:	21f5      	movs	r1, #245	; 0xf5
    2644:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    2646:	4958      	ldr	r1, [pc, #352]	; (27a8 <setTime+0x264>)
    2648:	6820      	ldr	r0, [r4, #0]
    264a:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    264c:	6820      	ldr	r0, [r4, #0]
    264e:	495c      	ldr	r1, [pc, #368]	; (27c0 <setTime+0x27c>)
    2650:	4b5c      	ldr	r3, [pc, #368]	; (27c4 <setTime+0x280>)
    2652:	4798      	blx	r3
    2654:	464b      	mov	r3, r9
    2656:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    2658:	9803      	ldr	r0, [sp, #12]
    265a:	4b5b      	ldr	r3, [pc, #364]	; (27c8 <setTime+0x284>)
    265c:	4798      	blx	r3
		drawBack();
    265e:	4b5b      	ldr	r3, [pc, #364]	; (27cc <setTime+0x288>)
    2660:	4798      	blx	r3
		disEnd();
    2662:	4b5b      	ldr	r3, [pc, #364]	; (27d0 <setTime+0x28c>)
    2664:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    2666:	464b      	mov	r3, r9
    2668:	781b      	ldrb	r3, [r3, #0]
    266a:	001a      	movs	r2, r3
    266c:	3a30      	subs	r2, #48	; 0x30
    266e:	b2d2      	uxtb	r2, r2
    2670:	2a09      	cmp	r2, #9
    2672:	d800      	bhi.n	2676 <setTime+0x132>
    2674:	e77d      	b.n	2572 <setTime+0x2e>
		else					pressed = 0;
    2676:	2100      	movs	r1, #0
    2678:	9103      	str	r1, [sp, #12]
		if(tag==0)		tempTag = tag;
    267a:	2b00      	cmp	r3, #0
    267c:	d100      	bne.n	2680 <setTime+0x13c>
    267e:	469b      	mov	fp, r3
		if (tempTag != tag && tag != 0 && tag!=back){
    2680:	459b      	cmp	fp, r3
    2682:	d08c      	beq.n	259e <setTime+0x5a>
    2684:	2b00      	cmp	r3, #0
    2686:	d08a      	beq.n	259e <setTime+0x5a>
    2688:	2b06      	cmp	r3, #6
    268a:	d088      	beq.n	259e <setTime+0x5a>
			if(tag> 47 && tag<58){
    268c:	2a09      	cmp	r2, #9
    268e:	d813      	bhi.n	26b8 <setTime+0x174>
				if(i==0 && tag>50);								//1st digit in hour
    2690:	2e00      	cmp	r6, #0
    2692:	d000      	beq.n	2696 <setTime+0x152>
    2694:	e76f      	b.n	2576 <setTime+0x32>
    2696:	2b32      	cmp	r3, #50	; 0x32
    2698:	d900      	bls.n	269c <setTime+0x158>
    269a:	e779      	b.n	2590 <setTime+0x4c>
    269c:	e76b      	b.n	2576 <setTime+0x32>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    269e:	aa05      	add	r2, sp, #20
    26a0:	7812      	ldrb	r2, [r2, #0]
    26a2:	2a32      	cmp	r2, #50	; 0x32
    26a4:	d000      	beq.n	26a8 <setTime+0x164>
    26a6:	e769      	b.n	257c <setTime+0x38>
    26a8:	2b33      	cmp	r3, #51	; 0x33
    26aa:	d900      	bls.n	26ae <setTime+0x16a>
    26ac:	e770      	b.n	2590 <setTime+0x4c>
    26ae:	e765      	b.n	257c <setTime+0x38>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    26b0:	2b35      	cmp	r3, #53	; 0x35
    26b2:	d900      	bls.n	26b6 <setTime+0x172>
    26b4:	e76c      	b.n	2590 <setTime+0x4c>
    26b6:	e767      	b.n	2588 <setTime+0x44>
			} else if(tag == clr){		//if clr is pressed
    26b8:	2b0a      	cmp	r3, #10
    26ba:	d00f      	beq.n	26dc <setTime+0x198>
			} else if(tag==del && i>0){		//if del is pressed
    26bc:	2b09      	cmp	r3, #9
    26be:	d000      	beq.n	26c2 <setTime+0x17e>
    26c0:	e766      	b.n	2590 <setTime+0x4c>
    26c2:	2e00      	cmp	r6, #0
    26c4:	d100      	bne.n	26c8 <setTime+0x184>
    26c6:	e763      	b.n	2590 <setTime+0x4c>
				if(i==3 || i==6){			//clear last user input
    26c8:	2e03      	cmp	r6, #3
    26ca:	d00f      	beq.n	26ec <setTime+0x1a8>
    26cc:	2e06      	cmp	r6, #6
    26ce:	d00d      	beq.n	26ec <setTime+0x1a8>
				timeIn[i] = 0;
    26d0:	2100      	movs	r1, #0
    26d2:	aa05      	add	r2, sp, #20
    26d4:	5591      	strb	r1, [r2, r6]
				i--;
    26d6:	3e01      	subs	r6, #1
    26d8:	b2f6      	uxtb	r6, r6
    26da:	e759      	b.n	2590 <setTime+0x4c>
					timeIn[i] = 0;
    26dc:	2100      	movs	r1, #0
    26de:	aa05      	add	r2, sp, #20
    26e0:	5591      	strb	r1, [r2, r6]
					i--;
    26e2:	3e01      	subs	r6, #1
    26e4:	b2f6      	uxtb	r6, r6
				}while(i>0);
    26e6:	2e00      	cmp	r6, #0
    26e8:	d1f8      	bne.n	26dc <setTime+0x198>
    26ea:	e751      	b.n	2590 <setTime+0x4c>
					timeIn[i] = 0;
    26ec:	2100      	movs	r1, #0
    26ee:	aa05      	add	r2, sp, #20
    26f0:	5591      	strb	r1, [r2, r6]
					i--;
    26f2:	3e01      	subs	r6, #1
    26f4:	b2f6      	uxtb	r6, r6
    26f6:	e7eb      	b.n	26d0 <setTime+0x18c>
				timeIn[i] = 0;			// compute time and update to the system
    26f8:	ac05      	add	r4, sp, #20
    26fa:	2300      	movs	r3, #0
    26fc:	55a3      	strb	r3, [r4, r6]
				rtc_calendar_disable(&rtc_instance);
    26fe:	4822      	ldr	r0, [pc, #136]	; (2788 <setTime+0x244>)
    2700:	4b34      	ldr	r3, [pc, #208]	; (27d4 <setTime+0x290>)
    2702:	4798      	blx	r3
				time.hour = (timeIn[0]%48)*10+(timeIn[1]%48);
    2704:	7820      	ldrb	r0, [r4, #0]
    2706:	4f34      	ldr	r7, [pc, #208]	; (27d8 <setTime+0x294>)
    2708:	2130      	movs	r1, #48	; 0x30
    270a:	47b8      	blx	r7
    270c:	008b      	lsls	r3, r1, #2
    270e:	18c9      	adds	r1, r1, r3
    2710:	004b      	lsls	r3, r1, #1
    2712:	b2dd      	uxtb	r5, r3
    2714:	7860      	ldrb	r0, [r4, #1]
    2716:	2130      	movs	r1, #48	; 0x30
    2718:	47b8      	blx	r7
    271a:	1869      	adds	r1, r5, r1
    271c:	4e19      	ldr	r6, [pc, #100]	; (2784 <setTime+0x240>)
    271e:	70b1      	strb	r1, [r6, #2]
				time.minute = (timeIn[3]%48)*10+(timeIn[4]%48);
    2720:	78e0      	ldrb	r0, [r4, #3]
    2722:	2130      	movs	r1, #48	; 0x30
    2724:	47b8      	blx	r7
    2726:	008b      	lsls	r3, r1, #2
    2728:	18c9      	adds	r1, r1, r3
    272a:	004b      	lsls	r3, r1, #1
    272c:	b2dd      	uxtb	r5, r3
    272e:	7920      	ldrb	r0, [r4, #4]
    2730:	2130      	movs	r1, #48	; 0x30
    2732:	47b8      	blx	r7
    2734:	1869      	adds	r1, r5, r1
    2736:	7071      	strb	r1, [r6, #1]
				time.second = (timeIn[06]%48)*10+(timeIn[7]%48);
    2738:	79a0      	ldrb	r0, [r4, #6]
    273a:	2130      	movs	r1, #48	; 0x30
    273c:	47b8      	blx	r7
    273e:	008b      	lsls	r3, r1, #2
    2740:	18c9      	adds	r1, r1, r3
    2742:	004b      	lsls	r3, r1, #1
    2744:	b2dd      	uxtb	r5, r3
    2746:	79e0      	ldrb	r0, [r4, #7]
    2748:	2130      	movs	r1, #48	; 0x30
    274a:	47b8      	blx	r7
    274c:	1869      	adds	r1, r5, r1
    274e:	7031      	strb	r1, [r6, #0]
				rtc_calendar_set_time(&rtc_instance, &time);
    2750:	0031      	movs	r1, r6
    2752:	480d      	ldr	r0, [pc, #52]	; (2788 <setTime+0x244>)
    2754:	4b21      	ldr	r3, [pc, #132]	; (27dc <setTime+0x298>)
    2756:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    2758:	480b      	ldr	r0, [pc, #44]	; (2788 <setTime+0x244>)
    275a:	4b21      	ldr	r3, [pc, #132]	; (27e0 <setTime+0x29c>)
    275c:	4798      	blx	r3
	tag = 0;
    275e:	2200      	movs	r2, #0
    2760:	4b0b      	ldr	r3, [pc, #44]	; (2790 <setTime+0x24c>)
    2762:	701a      	strb	r2, [r3, #0]
}//end setTime
    2764:	b009      	add	sp, #36	; 0x24
    2766:	bc3c      	pop	{r2, r3, r4, r5}
    2768:	4690      	mov	r8, r2
    276a:	4699      	mov	r9, r3
    276c:	46a2      	mov	sl, r4
    276e:	46ab      	mov	fp, r5
    2770:	bdf0      	pop	{r4, r5, r6, r7, pc}
			timeIn[i] = ':';
    2772:	213a      	movs	r1, #58	; 0x3a
    2774:	aa05      	add	r2, sp, #20
    2776:	5591      	strb	r1, [r2, r6]
			i++;
    2778:	3601      	adds	r6, #1
    277a:	b2f6      	uxtb	r6, r6
    277c:	e715      	b.n	25aa <setTime+0x66>
    277e:	46c0      	nop			; (mov r8, r8)
    2780:	00004cb3 	.word	0x00004cb3
    2784:	20000718 	.word	0x20000718
    2788:	20000400 	.word	0x20000400
    278c:	00000555 	.word	0x00000555
    2790:	200000b5 	.word	0x200000b5
    2794:	00001e85 	.word	0x00001e85
    2798:	20000720 	.word	0x20000720
    279c:	1f000009 	.word	0x1f000009
    27a0:	00001a15 	.word	0x00001a15
    27a4:	0e00003c 	.word	0x0e00003c
    27a8:	04ffffff 	.word	0x04ffffff
    27ac:	478006e0 	.word	0x478006e0
    27b0:	51800a00 	.word	0x51800a00
    27b4:	0000566c 	.word	0x0000566c
    27b8:	000013d1 	.word	0x000013d1
    27bc:	00005678 	.word	0x00005678
    27c0:	0030212c 	.word	0x0030212c
    27c4:	000018a5 	.word	0x000018a5
    27c8:	00001c59 	.word	0x00001c59
    27cc:	00001bfd 	.word	0x00001bfd
    27d0:	00001eb1 	.word	0x00001eb1
    27d4:	00000459 	.word	0x00000459
    27d8:	00004bf9 	.word	0x00004bf9
    27dc:	00000531 	.word	0x00000531
    27e0:	00000439 	.word	0x00000439

000027e4 <setDate>:
void setDate(){
    27e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27e6:	46de      	mov	lr, fp
    27e8:	4657      	mov	r7, sl
    27ea:	464e      	mov	r6, r9
    27ec:	4645      	mov	r5, r8
    27ee:	b5e0      	push	{r5, r6, r7, lr}
    27f0:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, pressed = 0, i = 0, month = 0, dateIn[12] = "0";
    27f2:	2330      	movs	r3, #48	; 0x30
    27f4:	9305      	str	r3, [sp, #20]
    27f6:	2208      	movs	r2, #8
    27f8:	2100      	movs	r1, #0
    27fa:	a806      	add	r0, sp, #24
    27fc:	4bc6      	ldr	r3, [pc, #792]	; (2b18 <setDate+0x334>)
    27fe:	4798      	blx	r3
    2800:	2600      	movs	r6, #0
    2802:	2300      	movs	r3, #0
    2804:	9303      	str	r3, [sp, #12]
    2806:	469b      	mov	fp, r3
    2808:	e028      	b.n	285c <setDate+0x78>
		else							dateIn[i] = '_';
    280a:	225f      	movs	r2, #95	; 0x5f
    280c:	ab05      	add	r3, sp, #20
    280e:	559a      	strb	r2, [r3, r6]
    2810:	e02f      	b.n	2872 <setDate+0x8e>
		if (tag>47 && tag<58)	pressed = tag - 48;
    2812:	9303      	str	r3, [sp, #12]
    2814:	e087      	b.n	2926 <setDate+0x142>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    2816:	2e01      	cmp	r6, #1
    2818:	d100      	bne.n	281c <setDate+0x38>
    281a:	e096      	b.n	294a <setDate+0x166>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    281c:	2e03      	cmp	r6, #3
    281e:	d100      	bne.n	2822 <setDate+0x3e>
    2820:	e09c      	b.n	295c <setDate+0x178>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    2822:	2e03      	cmp	r6, #3
    2824:	d100      	bne.n	2828 <setDate+0x44>
    2826:	e0af      	b.n	2988 <setDate+0x1a4>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    2828:	2e04      	cmp	r6, #4
    282a:	d100      	bne.n	282e <setDate+0x4a>
    282c:	e0c2      	b.n	29b4 <setDate+0x1d0>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    282e:	2e04      	cmp	r6, #4
    2830:	d100      	bne.n	2834 <setDate+0x50>
    2832:	e0dc      	b.n	29ee <setDate+0x20a>
					dateIn[i] = tag;
    2834:	ab05      	add	r3, sp, #20
    2836:	559c      	strb	r4, [r3, r6]
					i++;
    2838:	3601      	adds	r6, #1
    283a:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==11){			//if ok is pressed
    283c:	2c0b      	cmp	r4, #11
    283e:	d100      	bne.n	2842 <setDate+0x5e>
    2840:	e112      	b.n	2a68 <setDate+0x284>
    2842:	2e0b      	cmp	r6, #11
    2844:	d100      	bne.n	2848 <setDate+0x64>
    2846:	e10f      	b.n	2a68 <setDate+0x284>
			tempTag = tag;
    2848:	46a3      	mov	fp, r4
		if(i==2 || i==5){
    284a:	2e02      	cmp	r6, #2
    284c:	d100      	bne.n	2850 <setDate+0x6c>
    284e:	e15d      	b.n	2b0c <setDate+0x328>
    2850:	2e05      	cmp	r6, #5
    2852:	d100      	bne.n	2856 <setDate+0x72>
    2854:	e15a      	b.n	2b0c <setDate+0x328>
	}while(tag != back);
    2856:	2c06      	cmp	r4, #6
    2858:	d100      	bne.n	285c <setDate+0x78>
    285a:	e14d      	b.n	2af8 <setDate+0x314>
		rtc_calendar_get_time(&rtc_instance, &time);
    285c:	4caf      	ldr	r4, [pc, #700]	; (2b1c <setDate+0x338>)
    285e:	0021      	movs	r1, r4
    2860:	48af      	ldr	r0, [pc, #700]	; (2b20 <setDate+0x33c>)
    2862:	4bb0      	ldr	r3, [pc, #704]	; (2b24 <setDate+0x340>)
    2864:	4798      	blx	r3
		if (time.second%2 == 1)			dateIn[i] = ' ';
    2866:	7823      	ldrb	r3, [r4, #0]
    2868:	07db      	lsls	r3, r3, #31
    286a:	d5ce      	bpl.n	280a <setDate+0x26>
    286c:	2220      	movs	r2, #32
    286e:	ab05      	add	r3, sp, #20
    2870:	559a      	strb	r2, [r3, r6]
		tag = 0;
    2872:	4bad      	ldr	r3, [pc, #692]	; (2b28 <setDate+0x344>)
    2874:	4699      	mov	r9, r3
    2876:	2300      	movs	r3, #0
    2878:	4698      	mov	r8, r3
    287a:	464a      	mov	r2, r9
    287c:	7013      	strb	r3, [r2, #0]
		disStart();
    287e:	4bab      	ldr	r3, [pc, #684]	; (2b2c <setDate+0x348>)
    2880:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    2882:	4cab      	ldr	r4, [pc, #684]	; (2b30 <setDate+0x34c>)
    2884:	49ab      	ldr	r1, [pc, #684]	; (2b34 <setDate+0x350>)
    2886:	6820      	ldr	r0, [r4, #0]
    2888:	4dab      	ldr	r5, [pc, #684]	; (2b38 <setDate+0x354>)
    288a:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    288c:	49ab      	ldr	r1, [pc, #684]	; (2b3c <setDate+0x358>)
    288e:	6820      	ldr	r0, [r4, #0]
    2890:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2892:	49ab      	ldr	r1, [pc, #684]	; (2b40 <setDate+0x35c>)
    2894:	6820      	ldr	r0, [r4, #0]
    2896:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    2898:	49aa      	ldr	r1, [pc, #680]	; (2b44 <setDate+0x360>)
    289a:	6820      	ldr	r0, [r4, #0]
    289c:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    289e:	49aa      	ldr	r1, [pc, #680]	; (2b48 <setDate+0x364>)
    28a0:	6820      	ldr	r0, [r4, #0]
    28a2:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    28a4:	2184      	movs	r1, #132	; 0x84
    28a6:	0589      	lsls	r1, r1, #22
    28a8:	6820      	ldr	r0, [r4, #0]
    28aa:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    28ac:	49a4      	ldr	r1, [pc, #656]	; (2b40 <setDate+0x35c>)
    28ae:	6820      	ldr	r0, [r4, #0]
    28b0:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Date");
    28b2:	6820      	ldr	r0, [r4, #0]
    28b4:	4ba5      	ldr	r3, [pc, #660]	; (2b4c <setDate+0x368>)
    28b6:	9301      	str	r3, [sp, #4]
    28b8:	4643      	mov	r3, r8
    28ba:	9300      	str	r3, [sp, #0]
    28bc:	331c      	adds	r3, #28
    28be:	2230      	movs	r2, #48	; 0x30
    28c0:	21f0      	movs	r1, #240	; 0xf0
    28c2:	4fa3      	ldr	r7, [pc, #652]	; (2b50 <setDate+0x36c>)
    28c4:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "mm/dd/yyyy");
    28c6:	6820      	ldr	r0, [r4, #0]
    28c8:	4ba2      	ldr	r3, [pc, #648]	; (2b54 <setDate+0x370>)
    28ca:	9301      	str	r3, [sp, #4]
    28cc:	4643      	mov	r3, r8
    28ce:	9300      	str	r3, [sp, #0]
    28d0:	331c      	adds	r3, #28
    28d2:	2248      	movs	r2, #72	; 0x48
    28d4:	21f0      	movs	r1, #240	; 0xf0
    28d6:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    28d8:	2180      	movs	r1, #128	; 0x80
    28da:	04c9      	lsls	r1, r1, #19
    28dc:	6820      	ldr	r0, [r4, #0]
    28de:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, dateIn);
    28e0:	6820      	ldr	r0, [r4, #0]
    28e2:	ab05      	add	r3, sp, #20
    28e4:	9301      	str	r3, [sp, #4]
    28e6:	4643      	mov	r3, r8
    28e8:	9300      	str	r3, [sp, #0]
    28ea:	331e      	adds	r3, #30
    28ec:	2278      	movs	r2, #120	; 0x78
    28ee:	21f5      	movs	r1, #245	; 0xf5
    28f0:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    28f2:	4993      	ldr	r1, [pc, #588]	; (2b40 <setDate+0x35c>)
    28f4:	6820      	ldr	r0, [r4, #0]
    28f6:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    28f8:	6820      	ldr	r0, [r4, #0]
    28fa:	4997      	ldr	r1, [pc, #604]	; (2b58 <setDate+0x374>)
    28fc:	4b97      	ldr	r3, [pc, #604]	; (2b5c <setDate+0x378>)
    28fe:	4798      	blx	r3
    2900:	464b      	mov	r3, r9
    2902:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    2904:	9803      	ldr	r0, [sp, #12]
    2906:	4b96      	ldr	r3, [pc, #600]	; (2b60 <setDate+0x37c>)
    2908:	4798      	blx	r3
		drawBack();
    290a:	4b96      	ldr	r3, [pc, #600]	; (2b64 <setDate+0x380>)
    290c:	4798      	blx	r3
		disEnd();
    290e:	4b96      	ldr	r3, [pc, #600]	; (2b68 <setDate+0x384>)
    2910:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    2912:	464b      	mov	r3, r9
    2914:	781c      	ldrb	r4, [r3, #0]
    2916:	0023      	movs	r3, r4
    2918:	3b30      	subs	r3, #48	; 0x30
    291a:	b2db      	uxtb	r3, r3
    291c:	2b09      	cmp	r3, #9
    291e:	d800      	bhi.n	2922 <setDate+0x13e>
    2920:	e777      	b.n	2812 <setDate+0x2e>
		else					pressed = 0;
    2922:	2200      	movs	r2, #0
    2924:	9203      	str	r2, [sp, #12]
		if(tag==0)		tempTag = tag;
    2926:	2c00      	cmp	r4, #0
    2928:	d100      	bne.n	292c <setDate+0x148>
    292a:	46a3      	mov	fp, r4
		if (tempTag != tag && tag != 0 && tag!=back){
    292c:	45a3      	cmp	fp, r4
    292e:	d08c      	beq.n	284a <setDate+0x66>
    2930:	2c00      	cmp	r4, #0
    2932:	d08a      	beq.n	284a <setDate+0x66>
    2934:	2c06      	cmp	r4, #6
    2936:	d088      	beq.n	284a <setDate+0x66>
			if(tag> 47 && tag<58){
    2938:	2b09      	cmp	r3, #9
    293a:	d875      	bhi.n	2a28 <setDate+0x244>
				if(i==0 && tag>49);					//1st in month
    293c:	2e00      	cmp	r6, #0
    293e:	d000      	beq.n	2942 <setDate+0x15e>
    2940:	e769      	b.n	2816 <setDate+0x32>
    2942:	2c31      	cmp	r4, #49	; 0x31
    2944:	d900      	bls.n	2948 <setDate+0x164>
    2946:	e779      	b.n	283c <setDate+0x58>
    2948:	e765      	b.n	2816 <setDate+0x32>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    294a:	ab05      	add	r3, sp, #20
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	2b31      	cmp	r3, #49	; 0x31
    2950:	d000      	beq.n	2954 <setDate+0x170>
    2952:	e763      	b.n	281c <setDate+0x38>
    2954:	2c32      	cmp	r4, #50	; 0x32
    2956:	d900      	bls.n	295a <setDate+0x176>
    2958:	e770      	b.n	283c <setDate+0x58>
    295a:	e75f      	b.n	281c <setDate+0x38>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    295c:	ad05      	add	r5, sp, #20
    295e:	7828      	ldrb	r0, [r5, #0]
    2960:	4b82      	ldr	r3, [pc, #520]	; (2b6c <setDate+0x388>)
    2962:	4698      	mov	r8, r3
    2964:	2130      	movs	r1, #48	; 0x30
    2966:	4798      	blx	r3
    2968:	b2cb      	uxtb	r3, r1
    296a:	0099      	lsls	r1, r3, #2
    296c:	18c9      	adds	r1, r1, r3
    296e:	004f      	lsls	r7, r1, #1
    2970:	7868      	ldrb	r0, [r5, #1]
    2972:	2130      	movs	r1, #48	; 0x30
    2974:	47c0      	blx	r8
    2976:	b2c9      	uxtb	r1, r1
    2978:	187f      	adds	r7, r7, r1
    297a:	2f02      	cmp	r7, #2
    297c:	d000      	beq.n	2980 <setDate+0x19c>
    297e:	e750      	b.n	2822 <setDate+0x3e>
    2980:	2c32      	cmp	r4, #50	; 0x32
    2982:	d900      	bls.n	2986 <setDate+0x1a2>
    2984:	e75a      	b.n	283c <setDate+0x58>
    2986:	e74c      	b.n	2822 <setDate+0x3e>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    2988:	ad05      	add	r5, sp, #20
    298a:	7828      	ldrb	r0, [r5, #0]
    298c:	4b77      	ldr	r3, [pc, #476]	; (2b6c <setDate+0x388>)
    298e:	4698      	mov	r8, r3
    2990:	2130      	movs	r1, #48	; 0x30
    2992:	4798      	blx	r3
    2994:	b2cb      	uxtb	r3, r1
    2996:	0099      	lsls	r1, r3, #2
    2998:	18c9      	adds	r1, r1, r3
    299a:	004f      	lsls	r7, r1, #1
    299c:	7868      	ldrb	r0, [r5, #1]
    299e:	2130      	movs	r1, #48	; 0x30
    29a0:	47c0      	blx	r8
    29a2:	b2c9      	uxtb	r1, r1
    29a4:	187f      	adds	r7, r7, r1
    29a6:	2f02      	cmp	r7, #2
    29a8:	d100      	bne.n	29ac <setDate+0x1c8>
    29aa:	e73d      	b.n	2828 <setDate+0x44>
    29ac:	2c33      	cmp	r4, #51	; 0x33
    29ae:	d900      	bls.n	29b2 <setDate+0x1ce>
    29b0:	e744      	b.n	283c <setDate+0x58>
    29b2:	e739      	b.n	2828 <setDate+0x44>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    29b4:	ad05      	add	r5, sp, #20
    29b6:	7828      	ldrb	r0, [r5, #0]
    29b8:	4b6c      	ldr	r3, [pc, #432]	; (2b6c <setDate+0x388>)
    29ba:	4698      	mov	r8, r3
    29bc:	2130      	movs	r1, #48	; 0x30
    29be:	4798      	blx	r3
    29c0:	008b      	lsls	r3, r1, #2
    29c2:	18c9      	adds	r1, r1, r3
    29c4:	004b      	lsls	r3, r1, #1
    29c6:	b2df      	uxtb	r7, r3
    29c8:	7868      	ldrb	r0, [r5, #1]
    29ca:	2130      	movs	r1, #48	; 0x30
    29cc:	47c0      	blx	r8
    29ce:	1879      	adds	r1, r7, r1
    29d0:	b2c8      	uxtb	r0, r1
    29d2:	4b67      	ldr	r3, [pc, #412]	; (2b70 <setDate+0x38c>)
    29d4:	4798      	blx	r3
    29d6:	2800      	cmp	r0, #0
    29d8:	d000      	beq.n	29dc <setDate+0x1f8>
    29da:	e728      	b.n	282e <setDate+0x4a>
    29dc:	ab05      	add	r3, sp, #20
    29de:	78db      	ldrb	r3, [r3, #3]
    29e0:	2b33      	cmp	r3, #51	; 0x33
    29e2:	d000      	beq.n	29e6 <setDate+0x202>
    29e4:	e723      	b.n	282e <setDate+0x4a>
    29e6:	2c30      	cmp	r4, #48	; 0x30
    29e8:	d900      	bls.n	29ec <setDate+0x208>
    29ea:	e727      	b.n	283c <setDate+0x58>
    29ec:	e71f      	b.n	282e <setDate+0x4a>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    29ee:	ad05      	add	r5, sp, #20
    29f0:	7828      	ldrb	r0, [r5, #0]
    29f2:	4b5e      	ldr	r3, [pc, #376]	; (2b6c <setDate+0x388>)
    29f4:	4698      	mov	r8, r3
    29f6:	2130      	movs	r1, #48	; 0x30
    29f8:	4798      	blx	r3
    29fa:	008b      	lsls	r3, r1, #2
    29fc:	18c9      	adds	r1, r1, r3
    29fe:	004b      	lsls	r3, r1, #1
    2a00:	b2df      	uxtb	r7, r3
    2a02:	7868      	ldrb	r0, [r5, #1]
    2a04:	2130      	movs	r1, #48	; 0x30
    2a06:	47c0      	blx	r8
    2a08:	1879      	adds	r1, r7, r1
    2a0a:	b2c8      	uxtb	r0, r1
    2a0c:	4b58      	ldr	r3, [pc, #352]	; (2b70 <setDate+0x38c>)
    2a0e:	4798      	blx	r3
    2a10:	2800      	cmp	r0, #0
    2a12:	d100      	bne.n	2a16 <setDate+0x232>
    2a14:	e70e      	b.n	2834 <setDate+0x50>
    2a16:	ab05      	add	r3, sp, #20
    2a18:	78db      	ldrb	r3, [r3, #3]
    2a1a:	2b33      	cmp	r3, #51	; 0x33
    2a1c:	d000      	beq.n	2a20 <setDate+0x23c>
    2a1e:	e709      	b.n	2834 <setDate+0x50>
    2a20:	2c31      	cmp	r4, #49	; 0x31
    2a22:	d900      	bls.n	2a26 <setDate+0x242>
    2a24:	e70a      	b.n	283c <setDate+0x58>
    2a26:	e705      	b.n	2834 <setDate+0x50>
			}else if(tag == clr){			//if clr is pressed
    2a28:	2c0a      	cmp	r4, #10
    2a2a:	d00f      	beq.n	2a4c <setDate+0x268>
			}else if(tag==del && i>0){		//if del is pressed
    2a2c:	2c09      	cmp	r4, #9
    2a2e:	d000      	beq.n	2a32 <setDate+0x24e>
    2a30:	e704      	b.n	283c <setDate+0x58>
    2a32:	2e00      	cmp	r6, #0
    2a34:	d100      	bne.n	2a38 <setDate+0x254>
    2a36:	e701      	b.n	283c <setDate+0x58>
				if(i==3 || i==6){			//clear last user input
    2a38:	2e03      	cmp	r6, #3
    2a3a:	d00f      	beq.n	2a5c <setDate+0x278>
    2a3c:	2e06      	cmp	r6, #6
    2a3e:	d00d      	beq.n	2a5c <setDate+0x278>
				dateIn[i] = 0;
    2a40:	2200      	movs	r2, #0
    2a42:	ab05      	add	r3, sp, #20
    2a44:	559a      	strb	r2, [r3, r6]
				i--;
    2a46:	3e01      	subs	r6, #1
    2a48:	b2f6      	uxtb	r6, r6
    2a4a:	e6f7      	b.n	283c <setDate+0x58>
					dateIn[i] = 0;
    2a4c:	2200      	movs	r2, #0
    2a4e:	ab05      	add	r3, sp, #20
    2a50:	559a      	strb	r2, [r3, r6]
					i--;
    2a52:	3e01      	subs	r6, #1
    2a54:	b2f6      	uxtb	r6, r6
				}while(i>0);
    2a56:	2e00      	cmp	r6, #0
    2a58:	d1f8      	bne.n	2a4c <setDate+0x268>
    2a5a:	e6ef      	b.n	283c <setDate+0x58>
					dateIn[i] = 0;
    2a5c:	2200      	movs	r2, #0
    2a5e:	ab05      	add	r3, sp, #20
    2a60:	559a      	strb	r2, [r3, r6]
					i--;
    2a62:	3e01      	subs	r6, #1
    2a64:	b2f6      	uxtb	r6, r6
    2a66:	e7eb      	b.n	2a40 <setDate+0x25c>
				dateIn[i] = 0;				//compute date and update to system
    2a68:	ad05      	add	r5, sp, #20
    2a6a:	2300      	movs	r3, #0
    2a6c:	55ab      	strb	r3, [r5, r6]
				rtc_calendar_disable(&rtc_instance);
    2a6e:	482c      	ldr	r0, [pc, #176]	; (2b20 <setDate+0x33c>)
    2a70:	4b40      	ldr	r3, [pc, #256]	; (2b74 <setDate+0x390>)
    2a72:	4798      	blx	r3
				time.month = (dateIn[0]%48)*10+(dateIn[1]%48);
    2a74:	7828      	ldrb	r0, [r5, #0]
    2a76:	4e3d      	ldr	r6, [pc, #244]	; (2b6c <setDate+0x388>)
    2a78:	2130      	movs	r1, #48	; 0x30
    2a7a:	47b0      	blx	r6
    2a7c:	008b      	lsls	r3, r1, #2
    2a7e:	18c9      	adds	r1, r1, r3
    2a80:	004b      	lsls	r3, r1, #1
    2a82:	b2dc      	uxtb	r4, r3
    2a84:	7868      	ldrb	r0, [r5, #1]
    2a86:	2130      	movs	r1, #48	; 0x30
    2a88:	47b0      	blx	r6
    2a8a:	1861      	adds	r1, r4, r1
    2a8c:	4f23      	ldr	r7, [pc, #140]	; (2b1c <setDate+0x338>)
    2a8e:	7179      	strb	r1, [r7, #5]
				time.day = (dateIn[3]%48)*10+(dateIn[4]%48);
    2a90:	78e8      	ldrb	r0, [r5, #3]
    2a92:	2130      	movs	r1, #48	; 0x30
    2a94:	47b0      	blx	r6
    2a96:	008b      	lsls	r3, r1, #2
    2a98:	18c9      	adds	r1, r1, r3
    2a9a:	004b      	lsls	r3, r1, #1
    2a9c:	b2dc      	uxtb	r4, r3
    2a9e:	7928      	ldrb	r0, [r5, #4]
    2aa0:	2130      	movs	r1, #48	; 0x30
    2aa2:	47b0      	blx	r6
    2aa4:	1861      	adds	r1, r4, r1
    2aa6:	7139      	strb	r1, [r7, #4]
				time.year = (dateIn[6]%48)*1000+(dateIn[7]%48)*100+dateIn[8]%48*10+dateIn[9]%48;
    2aa8:	79a8      	ldrb	r0, [r5, #6]
    2aaa:	2130      	movs	r1, #48	; 0x30
    2aac:	47b0      	blx	r6
    2aae:	b2c9      	uxtb	r1, r1
    2ab0:	24fa      	movs	r4, #250	; 0xfa
    2ab2:	00a4      	lsls	r4, r4, #2
    2ab4:	434c      	muls	r4, r1
    2ab6:	b2a4      	uxth	r4, r4
    2ab8:	79e8      	ldrb	r0, [r5, #7]
    2aba:	2130      	movs	r1, #48	; 0x30
    2abc:	47b0      	blx	r6
    2abe:	b2c9      	uxtb	r1, r1
    2ac0:	2364      	movs	r3, #100	; 0x64
    2ac2:	4359      	muls	r1, r3
    2ac4:	b289      	uxth	r1, r1
    2ac6:	1864      	adds	r4, r4, r1
    2ac8:	b2a4      	uxth	r4, r4
    2aca:	7a28      	ldrb	r0, [r5, #8]
    2acc:	2130      	movs	r1, #48	; 0x30
    2ace:	47b0      	blx	r6
    2ad0:	b2c9      	uxtb	r1, r1
    2ad2:	008b      	lsls	r3, r1, #2
    2ad4:	18c9      	adds	r1, r1, r3
    2ad6:	004b      	lsls	r3, r1, #1
    2ad8:	b29b      	uxth	r3, r3
    2ada:	18e4      	adds	r4, r4, r3
    2adc:	b2a4      	uxth	r4, r4
    2ade:	7a68      	ldrb	r0, [r5, #9]
    2ae0:	2130      	movs	r1, #48	; 0x30
    2ae2:	47b0      	blx	r6
    2ae4:	b2c9      	uxtb	r1, r1
    2ae6:	1864      	adds	r4, r4, r1
    2ae8:	80fc      	strh	r4, [r7, #6]
				rtc_calendar_set_time(&rtc_instance, &time);
    2aea:	0039      	movs	r1, r7
    2aec:	480c      	ldr	r0, [pc, #48]	; (2b20 <setDate+0x33c>)
    2aee:	4b22      	ldr	r3, [pc, #136]	; (2b78 <setDate+0x394>)
    2af0:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    2af2:	480b      	ldr	r0, [pc, #44]	; (2b20 <setDate+0x33c>)
    2af4:	4b21      	ldr	r3, [pc, #132]	; (2b7c <setDate+0x398>)
    2af6:	4798      	blx	r3
	tag = 0;
    2af8:	2200      	movs	r2, #0
    2afa:	4b0b      	ldr	r3, [pc, #44]	; (2b28 <setDate+0x344>)
    2afc:	701a      	strb	r2, [r3, #0]
}//end setDate
    2afe:	b009      	add	sp, #36	; 0x24
    2b00:	bc3c      	pop	{r2, r3, r4, r5}
    2b02:	4690      	mov	r8, r2
    2b04:	4699      	mov	r9, r3
    2b06:	46a2      	mov	sl, r4
    2b08:	46ab      	mov	fp, r5
    2b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dateIn[i] = '/';
    2b0c:	222f      	movs	r2, #47	; 0x2f
    2b0e:	ab05      	add	r3, sp, #20
    2b10:	559a      	strb	r2, [r3, r6]
			i++;
    2b12:	3601      	adds	r6, #1
    2b14:	b2f6      	uxtb	r6, r6
    2b16:	e69e      	b.n	2856 <setDate+0x72>
    2b18:	00004cb3 	.word	0x00004cb3
    2b1c:	20000718 	.word	0x20000718
    2b20:	20000400 	.word	0x20000400
    2b24:	00000555 	.word	0x00000555
    2b28:	200000b5 	.word	0x200000b5
    2b2c:	00001e85 	.word	0x00001e85
    2b30:	20000720 	.word	0x20000720
    2b34:	1f000009 	.word	0x1f000009
    2b38:	00001a15 	.word	0x00001a15
    2b3c:	0e00003c 	.word	0x0e00003c
    2b40:	04ffffff 	.word	0x04ffffff
    2b44:	478006e0 	.word	0x478006e0
    2b48:	51800a00 	.word	0x51800a00
    2b4c:	00005654 	.word	0x00005654
    2b50:	000013d1 	.word	0x000013d1
    2b54:	00005660 	.word	0x00005660
    2b58:	0030212c 	.word	0x0030212c
    2b5c:	000018a5 	.word	0x000018a5
    2b60:	00001c59 	.word	0x00001c59
    2b64:	00001bfd 	.word	0x00001bfd
    2b68:	00001eb1 	.word	0x00001eb1
    2b6c:	00004bf9 	.word	0x00004bf9
    2b70:	00001a49 	.word	0x00001a49
    2b74:	00000459 	.word	0x00000459
    2b78:	00000531 	.word	0x00000531
    2b7c:	00000439 	.word	0x00000439

00002b80 <settingOp>:
void settingOp(){
    2b80:	b530      	push	{r4, r5, lr}
    2b82:	b085      	sub	sp, #20
    2b84:	e08a      	b.n	2c9c <settingOp+0x11c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    2b86:	32ff      	adds	r2, #255	; 0xff
    2b88:	e0ab      	b.n	2ce2 <settingOp+0x162>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    2b8a:	2200      	movs	r2, #0
    2b8c:	e0c4      	b.n	2d18 <settingOp+0x198>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    2b8e:	32ff      	adds	r2, #255	; 0xff
    2b90:	e0e7      	b.n	2d62 <settingOp+0x1e2>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    2b92:	2200      	movs	r2, #0
    2b94:	4991      	ldr	r1, [pc, #580]	; (2ddc <settingOp+0x25c>)
    2b96:	9103      	str	r1, [sp, #12]
    2b98:	9202      	str	r2, [sp, #8]
    2b9a:	9301      	str	r3, [sp, #4]
    2b9c:	2335      	movs	r3, #53	; 0x35
    2b9e:	9300      	str	r3, [sp, #0]
    2ba0:	332b      	adds	r3, #43	; 0x2b
    2ba2:	22b1      	movs	r2, #177	; 0xb1
    2ba4:	21c8      	movs	r1, #200	; 0xc8
    2ba6:	0049      	lsls	r1, r1, #1
    2ba8:	4c8d      	ldr	r4, [pc, #564]	; (2de0 <settingOp+0x260>)
    2baa:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(cal));
    2bac:	4c8d      	ldr	r4, [pc, #564]	; (2de4 <settingOp+0x264>)
    2bae:	498e      	ldr	r1, [pc, #568]	; (2de8 <settingOp+0x268>)
    2bb0:	6820      	ldr	r0, [r4, #0]
    2bb2:	4b8e      	ldr	r3, [pc, #568]	; (2dec <settingOp+0x26c>)
    2bb4:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    2bb6:	6820      	ldr	r0, [r4, #0]
    2bb8:	4b8d      	ldr	r3, [pc, #564]	; (2df0 <settingOp+0x270>)
    2bba:	781b      	ldrb	r3, [r3, #0]
    2bbc:	4a8d      	ldr	r2, [pc, #564]	; (2df4 <settingOp+0x274>)
    2bbe:	7812      	ldrb	r2, [r2, #0]
    2bc0:	2a07      	cmp	r2, #7
    2bc2:	d100      	bne.n	2bc6 <settingOp+0x46>
    2bc4:	e0e9      	b.n	2d9a <settingOp+0x21a>
    2bc6:	2200      	movs	r2, #0
    2bc8:	498b      	ldr	r1, [pc, #556]	; (2df8 <settingOp+0x278>)
    2bca:	9103      	str	r1, [sp, #12]
    2bcc:	9202      	str	r2, [sp, #8]
    2bce:	9301      	str	r3, [sp, #4]
    2bd0:	2335      	movs	r3, #53	; 0x35
    2bd2:	9300      	str	r3, [sp, #0]
    2bd4:	3393      	adds	r3, #147	; 0x93
    2bd6:	22f0      	movs	r2, #240	; 0xf0
    2bd8:	2196      	movs	r1, #150	; 0x96
    2bda:	0049      	lsls	r1, r1, #1
    2bdc:	4c80      	ldr	r4, [pc, #512]	; (2de0 <settingOp+0x260>)
    2bde:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sDate));
    2be0:	4c80      	ldr	r4, [pc, #512]	; (2de4 <settingOp+0x264>)
    2be2:	4986      	ldr	r1, [pc, #536]	; (2dfc <settingOp+0x27c>)
    2be4:	6820      	ldr	r0, [r4, #0]
    2be6:	4b81      	ldr	r3, [pc, #516]	; (2dec <settingOp+0x26c>)
    2be8:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    2bea:	6820      	ldr	r0, [r4, #0]
    2bec:	4b80      	ldr	r3, [pc, #512]	; (2df0 <settingOp+0x270>)
    2bee:	781b      	ldrb	r3, [r3, #0]
    2bf0:	4a80      	ldr	r2, [pc, #512]	; (2df4 <settingOp+0x274>)
    2bf2:	7812      	ldrb	r2, [r2, #0]
    2bf4:	2a08      	cmp	r2, #8
    2bf6:	d100      	bne.n	2bfa <settingOp+0x7a>
    2bf8:	e0d1      	b.n	2d9e <settingOp+0x21e>
    2bfa:	2200      	movs	r2, #0
    2bfc:	4980      	ldr	r1, [pc, #512]	; (2e00 <settingOp+0x280>)
    2bfe:	9103      	str	r1, [sp, #12]
    2c00:	9202      	str	r2, [sp, #8]
    2c02:	9301      	str	r3, [sp, #4]
    2c04:	2335      	movs	r3, #53	; 0x35
    2c06:	9300      	str	r3, [sp, #0]
    2c08:	3393      	adds	r3, #147	; 0x93
    2c0a:	2297      	movs	r2, #151	; 0x97
    2c0c:	0052      	lsls	r2, r2, #1
    2c0e:	2196      	movs	r1, #150	; 0x96
    2c10:	0049      	lsls	r1, r1, #1
    2c12:	4c73      	ldr	r4, [pc, #460]	; (2de0 <settingOp+0x260>)
    2c14:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sTime));
    2c16:	4c73      	ldr	r4, [pc, #460]	; (2de4 <settingOp+0x264>)
    2c18:	497a      	ldr	r1, [pc, #488]	; (2e04 <settingOp+0x284>)
    2c1a:	6820      	ldr	r0, [r4, #0]
    2c1c:	4b73      	ldr	r3, [pc, #460]	; (2dec <settingOp+0x26c>)
    2c1e:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    2c20:	6820      	ldr	r0, [r4, #0]
    2c22:	4b73      	ldr	r3, [pc, #460]	; (2df0 <settingOp+0x270>)
    2c24:	781b      	ldrb	r3, [r3, #0]
    2c26:	4a73      	ldr	r2, [pc, #460]	; (2df4 <settingOp+0x274>)
    2c28:	7812      	ldrb	r2, [r2, #0]
    2c2a:	2a05      	cmp	r2, #5
    2c2c:	d100      	bne.n	2c30 <settingOp+0xb0>
    2c2e:	e0b8      	b.n	2da2 <settingOp+0x222>
    2c30:	2200      	movs	r2, #0
    2c32:	4975      	ldr	r1, [pc, #468]	; (2e08 <settingOp+0x288>)
    2c34:	9103      	str	r1, [sp, #12]
    2c36:	9202      	str	r2, [sp, #8]
    2c38:	9301      	str	r3, [sp, #4]
    2c3a:	2335      	movs	r3, #53	; 0x35
    2c3c:	9300      	str	r3, [sp, #0]
    2c3e:	3393      	adds	r3, #147	; 0x93
    2c40:	22b6      	movs	r2, #182	; 0xb6
    2c42:	0052      	lsls	r2, r2, #1
    2c44:	2196      	movs	r1, #150	; 0x96
    2c46:	0049      	lsls	r1, r1, #1
    2c48:	4c65      	ldr	r4, [pc, #404]	; (2de0 <settingOp+0x260>)
    2c4a:	47a0      	blx	r4
		drawBack();
    2c4c:	4b6f      	ldr	r3, [pc, #444]	; (2e0c <settingOp+0x28c>)
    2c4e:	4798      	blx	r3
		drawTitle("Settings");
    2c50:	486f      	ldr	r0, [pc, #444]	; (2e10 <settingOp+0x290>)
    2c52:	4b70      	ldr	r3, [pc, #448]	; (2e14 <settingOp+0x294>)
    2c54:	4798      	blx	r3
		disEnd();
    2c56:	4b70      	ldr	r3, [pc, #448]	; (2e18 <settingOp+0x298>)
    2c58:	4798      	blx	r3
		if (tag == cal)			calScreen();	//go to calibrate the screen
    2c5a:	4b66      	ldr	r3, [pc, #408]	; (2df4 <settingOp+0x274>)
    2c5c:	781b      	ldrb	r3, [r3, #0]
    2c5e:	2b07      	cmp	r3, #7
    2c60:	d100      	bne.n	2c64 <settingOp+0xe4>
    2c62:	e0a0      	b.n	2da6 <settingOp+0x226>
		else if (tag == sTime)	setTime();		//set time screen
    2c64:	2b05      	cmp	r3, #5
    2c66:	d100      	bne.n	2c6a <settingOp+0xea>
    2c68:	e0a0      	b.n	2dac <settingOp+0x22c>
		else if (tag == sDate)	setDate();		//set date screen
    2c6a:	2b08      	cmp	r3, #8
    2c6c:	d100      	bne.n	2c70 <settingOp+0xf0>
    2c6e:	e0a0      	b.n	2db2 <settingOp+0x232>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    2c70:	4b60      	ldr	r3, [pc, #384]	; (2df4 <settingOp+0x274>)
    2c72:	781b      	ldrb	r3, [r3, #0]
    2c74:	2b0c      	cmp	r3, #12
    2c76:	d100      	bne.n	2c7a <settingOp+0xfa>
    2c78:	e09e      	b.n	2db8 <settingOp+0x238>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    2c7a:	2b0d      	cmp	r3, #13
    2c7c:	d100      	bne.n	2c80 <settingOp+0x100>
    2c7e:	e09f      	b.n	2dc0 <settingOp+0x240>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    2c80:	2b0f      	cmp	r3, #15
    2c82:	d100      	bne.n	2c86 <settingOp+0x106>
    2c84:	e0a0      	b.n	2dc8 <settingOp+0x248>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    2c86:	2b0e      	cmp	r3, #14
    2c88:	d100      	bne.n	2c8c <settingOp+0x10c>
    2c8a:	e0a1      	b.n	2dd0 <settingOp+0x250>
		delay_ms(50);
    2c8c:	2032      	movs	r0, #50	; 0x32
    2c8e:	4b63      	ldr	r3, [pc, #396]	; (2e1c <settingOp+0x29c>)
    2c90:	4798      	blx	r3
	} while (tag != back);
    2c92:	4b58      	ldr	r3, [pc, #352]	; (2df4 <settingOp+0x274>)
    2c94:	781b      	ldrb	r3, [r3, #0]
    2c96:	2b06      	cmp	r3, #6
    2c98:	d100      	bne.n	2c9c <settingOp+0x11c>
    2c9a:	e09d      	b.n	2dd8 <settingOp+0x258>
		tag = 0;
    2c9c:	4d55      	ldr	r5, [pc, #340]	; (2df4 <settingOp+0x274>)
    2c9e:	2300      	movs	r3, #0
    2ca0:	702b      	strb	r3, [r5, #0]
		disStart();
    2ca2:	4b5f      	ldr	r3, [pc, #380]	; (2e20 <settingOp+0x2a0>)
    2ca4:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2ca6:	4c4f      	ldr	r4, [pc, #316]	; (2de4 <settingOp+0x264>)
    2ca8:	495e      	ldr	r1, [pc, #376]	; (2e24 <settingOp+0x2a4>)
    2caa:	6820      	ldr	r0, [r4, #0]
    2cac:	4b5e      	ldr	r3, [pc, #376]	; (2e28 <settingOp+0x2a8>)
    2cae:	4798      	blx	r3
    2cb0:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3-20, 30, OPT_CENTER, "Visual:");
    2cb2:	6820      	ldr	r0, [r4, #0]
    2cb4:	4b5d      	ldr	r3, [pc, #372]	; (2e2c <settingOp+0x2ac>)
    2cb6:	9301      	str	r3, [sp, #4]
    2cb8:	23c0      	movs	r3, #192	; 0xc0
    2cba:	00db      	lsls	r3, r3, #3
    2cbc:	9300      	str	r3, [sp, #0]
    2cbe:	231e      	movs	r3, #30
    2cc0:	228c      	movs	r2, #140	; 0x8c
    2cc2:	21c8      	movs	r1, #200	; 0xc8
    2cc4:	4d5a      	ldr	r5, [pc, #360]	; (2e30 <settingOp+0x2b0>)
    2cc6:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOn));
    2cc8:	495a      	ldr	r1, [pc, #360]	; (2e34 <settingOp+0x2b4>)
    2cca:	6820      	ldr	r0, [r4, #0]
    2ccc:	4b47      	ldr	r3, [pc, #284]	; (2dec <settingOp+0x26c>)
    2cce:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    2cd0:	6820      	ldr	r0, [r4, #0]
    2cd2:	4b47      	ldr	r3, [pc, #284]	; (2df0 <settingOp+0x270>)
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	4a58      	ldr	r2, [pc, #352]	; (2e38 <settingOp+0x2b8>)
    2cd8:	7812      	ldrb	r2, [r2, #0]
    2cda:	2a01      	cmp	r2, #1
    2cdc:	d100      	bne.n	2ce0 <settingOp+0x160>
    2cde:	e752      	b.n	2b86 <settingOp+0x6>
    2ce0:	2200      	movs	r2, #0
    2ce2:	4956      	ldr	r1, [pc, #344]	; (2e3c <settingOp+0x2bc>)
    2ce4:	9103      	str	r1, [sp, #12]
    2ce6:	9202      	str	r2, [sp, #8]
    2ce8:	9301      	str	r3, [sp, #4]
    2cea:	2335      	movs	r3, #53	; 0x35
    2cec:	9300      	str	r3, [sp, #0]
    2cee:	332b      	adds	r3, #43	; 0x2b
    2cf0:	2273      	movs	r2, #115	; 0x73
    2cf2:	2196      	movs	r1, #150	; 0x96
    2cf4:	0049      	lsls	r1, r1, #1
    2cf6:	4c3a      	ldr	r4, [pc, #232]	; (2de0 <settingOp+0x260>)
    2cf8:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOff));
    2cfa:	4c3a      	ldr	r4, [pc, #232]	; (2de4 <settingOp+0x264>)
    2cfc:	4950      	ldr	r1, [pc, #320]	; (2e40 <settingOp+0x2c0>)
    2cfe:	6820      	ldr	r0, [r4, #0]
    2d00:	4b3a      	ldr	r3, [pc, #232]	; (2dec <settingOp+0x26c>)
    2d02:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    2d04:	6820      	ldr	r0, [r4, #0]
    2d06:	4b3a      	ldr	r3, [pc, #232]	; (2df0 <settingOp+0x270>)
    2d08:	781b      	ldrb	r3, [r3, #0]
    2d0a:	4a4b      	ldr	r2, [pc, #300]	; (2e38 <settingOp+0x2b8>)
    2d0c:	7812      	ldrb	r2, [r2, #0]
    2d0e:	2a00      	cmp	r2, #0
    2d10:	d000      	beq.n	2d14 <settingOp+0x194>
    2d12:	e73a      	b.n	2b8a <settingOp+0xa>
    2d14:	3201      	adds	r2, #1
    2d16:	32ff      	adds	r2, #255	; 0xff
    2d18:	4930      	ldr	r1, [pc, #192]	; (2ddc <settingOp+0x25c>)
    2d1a:	9103      	str	r1, [sp, #12]
    2d1c:	9202      	str	r2, [sp, #8]
    2d1e:	9301      	str	r3, [sp, #4]
    2d20:	2335      	movs	r3, #53	; 0x35
    2d22:	9300      	str	r3, [sp, #0]
    2d24:	332b      	adds	r3, #43	; 0x2b
    2d26:	2273      	movs	r2, #115	; 0x73
    2d28:	21c8      	movs	r1, #200	; 0xc8
    2d2a:	0049      	lsls	r1, r1, #1
    2d2c:	4c2c      	ldr	r4, [pc, #176]	; (2de0 <settingOp+0x260>)
    2d2e:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3+30, 30, OPT_CENTER, "Sound: ");
    2d30:	4c2c      	ldr	r4, [pc, #176]	; (2de4 <settingOp+0x264>)
    2d32:	6820      	ldr	r0, [r4, #0]
    2d34:	4b43      	ldr	r3, [pc, #268]	; (2e44 <settingOp+0x2c4>)
    2d36:	9301      	str	r3, [sp, #4]
    2d38:	23c0      	movs	r3, #192	; 0xc0
    2d3a:	00db      	lsls	r3, r3, #3
    2d3c:	9300      	str	r3, [sp, #0]
    2d3e:	231e      	movs	r3, #30
    2d40:	22be      	movs	r2, #190	; 0xbe
    2d42:	21c8      	movs	r1, #200	; 0xc8
    2d44:	4d3a      	ldr	r5, [pc, #232]	; (2e30 <settingOp+0x2b0>)
    2d46:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOn));
    2d48:	493f      	ldr	r1, [pc, #252]	; (2e48 <settingOp+0x2c8>)
    2d4a:	6820      	ldr	r0, [r4, #0]
    2d4c:	4b27      	ldr	r3, [pc, #156]	; (2dec <settingOp+0x26c>)
    2d4e:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    2d50:	6820      	ldr	r0, [r4, #0]
    2d52:	4b27      	ldr	r3, [pc, #156]	; (2df0 <settingOp+0x270>)
    2d54:	781b      	ldrb	r3, [r3, #0]
    2d56:	4a3d      	ldr	r2, [pc, #244]	; (2e4c <settingOp+0x2cc>)
    2d58:	7812      	ldrb	r2, [r2, #0]
    2d5a:	2a01      	cmp	r2, #1
    2d5c:	d100      	bne.n	2d60 <settingOp+0x1e0>
    2d5e:	e716      	b.n	2b8e <settingOp+0xe>
    2d60:	2200      	movs	r2, #0
    2d62:	4936      	ldr	r1, [pc, #216]	; (2e3c <settingOp+0x2bc>)
    2d64:	9103      	str	r1, [sp, #12]
    2d66:	9202      	str	r2, [sp, #8]
    2d68:	9301      	str	r3, [sp, #4]
    2d6a:	2335      	movs	r3, #53	; 0x35
    2d6c:	9300      	str	r3, [sp, #0]
    2d6e:	332b      	adds	r3, #43	; 0x2b
    2d70:	22b1      	movs	r2, #177	; 0xb1
    2d72:	2196      	movs	r1, #150	; 0x96
    2d74:	0049      	lsls	r1, r1, #1
    2d76:	4c1a      	ldr	r4, [pc, #104]	; (2de0 <settingOp+0x260>)
    2d78:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOff));
    2d7a:	4c1a      	ldr	r4, [pc, #104]	; (2de4 <settingOp+0x264>)
    2d7c:	4934      	ldr	r1, [pc, #208]	; (2e50 <settingOp+0x2d0>)
    2d7e:	6820      	ldr	r0, [r4, #0]
    2d80:	4b1a      	ldr	r3, [pc, #104]	; (2dec <settingOp+0x26c>)
    2d82:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    2d84:	6820      	ldr	r0, [r4, #0]
    2d86:	4b1a      	ldr	r3, [pc, #104]	; (2df0 <settingOp+0x270>)
    2d88:	781b      	ldrb	r3, [r3, #0]
    2d8a:	4a30      	ldr	r2, [pc, #192]	; (2e4c <settingOp+0x2cc>)
    2d8c:	7812      	ldrb	r2, [r2, #0]
    2d8e:	2a00      	cmp	r2, #0
    2d90:	d000      	beq.n	2d94 <settingOp+0x214>
    2d92:	e6fe      	b.n	2b92 <settingOp+0x12>
    2d94:	3201      	adds	r2, #1
    2d96:	32ff      	adds	r2, #255	; 0xff
    2d98:	e6fc      	b.n	2b94 <settingOp+0x14>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    2d9a:	32f9      	adds	r2, #249	; 0xf9
    2d9c:	e714      	b.n	2bc8 <settingOp+0x48>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    2d9e:	32f8      	adds	r2, #248	; 0xf8
    2da0:	e72c      	b.n	2bfc <settingOp+0x7c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    2da2:	32fb      	adds	r2, #251	; 0xfb
    2da4:	e745      	b.n	2c32 <settingOp+0xb2>
		if (tag == cal)			calScreen();	//go to calibrate the screen
    2da6:	4b2b      	ldr	r3, [pc, #172]	; (2e54 <settingOp+0x2d4>)
    2da8:	4798      	blx	r3
    2daa:	e761      	b.n	2c70 <settingOp+0xf0>
		else if (tag == sTime)	setTime();		//set time screen
    2dac:	4b2a      	ldr	r3, [pc, #168]	; (2e58 <settingOp+0x2d8>)
    2dae:	4798      	blx	r3
    2db0:	e75e      	b.n	2c70 <settingOp+0xf0>
		else if (tag == sDate)	setDate();		//set date screen
    2db2:	4b2a      	ldr	r3, [pc, #168]	; (2e5c <settingOp+0x2dc>)
    2db4:	4798      	blx	r3
    2db6:	e75b      	b.n	2c70 <settingOp+0xf0>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    2db8:	2101      	movs	r1, #1
    2dba:	4a1f      	ldr	r2, [pc, #124]	; (2e38 <settingOp+0x2b8>)
    2dbc:	7011      	strb	r1, [r2, #0]
    2dbe:	e75c      	b.n	2c7a <settingOp+0xfa>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    2dc0:	2100      	movs	r1, #0
    2dc2:	4a1d      	ldr	r2, [pc, #116]	; (2e38 <settingOp+0x2b8>)
    2dc4:	7011      	strb	r1, [r2, #0]
    2dc6:	e75b      	b.n	2c80 <settingOp+0x100>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    2dc8:	2100      	movs	r1, #0
    2dca:	4a20      	ldr	r2, [pc, #128]	; (2e4c <settingOp+0x2cc>)
    2dcc:	7011      	strb	r1, [r2, #0]
    2dce:	e75a      	b.n	2c86 <settingOp+0x106>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    2dd0:	2201      	movs	r2, #1
    2dd2:	4b1e      	ldr	r3, [pc, #120]	; (2e4c <settingOp+0x2cc>)
    2dd4:	701a      	strb	r2, [r3, #0]
    2dd6:	e759      	b.n	2c8c <settingOp+0x10c>
}//end settOp
    2dd8:	b005      	add	sp, #20
    2dda:	bd30      	pop	{r4, r5, pc}
    2ddc:	000056a0 	.word	0x000056a0
    2de0:	000014e5 	.word	0x000014e5
    2de4:	20000720 	.word	0x20000720
    2de8:	03000007 	.word	0x03000007
    2dec:	00001a15 	.word	0x00001a15
    2df0:	20000009 	.word	0x20000009
    2df4:	200000b5 	.word	0x200000b5
    2df8:	000056ac 	.word	0x000056ac
    2dfc:	03000008 	.word	0x03000008
    2e00:	000056c4 	.word	0x000056c4
    2e04:	03000005 	.word	0x03000005
    2e08:	000056d4 	.word	0x000056d4
    2e0c:	00001bfd 	.word	0x00001bfd
    2e10:	000056e4 	.word	0x000056e4
    2e14:	00001b7d 	.word	0x00001b7d
    2e18:	00001eb1 	.word	0x00001eb1
    2e1c:	00000151 	.word	0x00000151
    2e20:	00001e85 	.word	0x00001e85
    2e24:	0030212c 	.word	0x0030212c
    2e28:	000018a5 	.word	0x000018a5
    2e2c:	00005694 	.word	0x00005694
    2e30:	000013d1 	.word	0x000013d1
    2e34:	0300000c 	.word	0x0300000c
    2e38:	20000008 	.word	0x20000008
    2e3c:	0000569c 	.word	0x0000569c
    2e40:	0300000d 	.word	0x0300000d
    2e44:	000056a4 	.word	0x000056a4
    2e48:	0300000e 	.word	0x0300000e
    2e4c:	200000b4 	.word	0x200000b4
    2e50:	0300000f 	.word	0x0300000f
    2e54:	000024f1 	.word	0x000024f1
    2e58:	00002545 	.word	0x00002545
    2e5c:	000027e5 	.word	0x000027e5

00002e60 <configure_ext_ints>:
/* Function Name    : configure_ext_ints
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt
	*/
void configure_ext_ints(void){
    2e60:	b500      	push	{lr}
    2e62:	b085      	sub	sp, #20
	// struct for external interrupt config
	struct extint_chan_conf ext_int_config;
	    
	// configure the external interrupt
	ext_int_config.gpio_pin            = LCD_INT;
    2e64:	a901      	add	r1, sp, #4
    2e66:	2309      	movs	r3, #9
    2e68:	9301      	str	r3, [sp, #4]
	ext_int_config.gpio_pin_mux        = LCD_INT_PINMUX;
    2e6a:	604b      	str	r3, [r1, #4]
	ext_int_config.gpio_pin_pull       = LCD_INT_PULL;
    2e6c:	2300      	movs	r3, #0
    2e6e:	720b      	strb	r3, [r1, #8]
	ext_int_config.wake_if_sleeping    = true;
    2e70:	2201      	movs	r2, #1
    2e72:	724a      	strb	r2, [r1, #9]
	ext_int_config.filter_input_signal = false;
    2e74:	728b      	strb	r3, [r1, #10]
	ext_int_config.detection_criteria  = LCD_INT_DETECT;
    2e76:	3305      	adds	r3, #5
    2e78:	72cb      	strb	r3, [r1, #11]

	extint_chan_set_config(LCD_INT_LINE, &ext_int_config);
    2e7a:	2009      	movs	r0, #9
    2e7c:	4b01      	ldr	r3, [pc, #4]	; (2e84 <configure_ext_ints+0x24>)
    2e7e:	4798      	blx	r3
}//end configure_ext_ints
    2e80:	b005      	add	sp, #20
    2e82:	bd00      	pop	{pc}
    2e84:	000003bd 	.word	0x000003bd

00002e88 <configure_ext_int_callback>:
/* Function Name    : configure_ext_int_callback
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt callback
	*/
void configure_ext_int_callback(void){
    2e88:	b510      	push	{r4, lr}
	// register callback for the LCD's interrupt
	extint_register_callback(lcd_interrupt_callback, LCD_INT_LINE, \
    2e8a:	2205      	movs	r2, #5
    2e8c:	2109      	movs	r1, #9
    2e8e:	4802      	ldr	r0, [pc, #8]	; (2e98 <configure_ext_int_callback+0x10>)
    2e90:	4b02      	ldr	r3, [pc, #8]	; (2e9c <configure_ext_int_callback+0x14>)
    2e92:	4798      	blx	r3
	    LCD_INT_DETECT);
}//end configure_ext_int_callback
    2e94:	bd10      	pop	{r4, pc}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	00003469 	.word	0x00003469
    2e9c:	00000275 	.word	0x00000275

00002ea0 <configure_rtc_calendar>:
/* Function Name    : configure_rtc_calendar
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config the rtc and set time to 00:00:00 01/01/2000
	*/
void configure_rtc_calendar(void){
    2ea0:	b530      	push	{r4, r5, lr}
    2ea2:	b089      	sub	sp, #36	; 0x24
	//initial time
	time.year   = 2017;
    2ea4:	4b26      	ldr	r3, [pc, #152]	; (2f40 <configure_rtc_calendar+0xa0>)
    2ea6:	4a27      	ldr	r2, [pc, #156]	; (2f44 <configure_rtc_calendar+0xa4>)
    2ea8:	80da      	strh	r2, [r3, #6]
	time.month  = 12;
    2eaa:	220c      	movs	r2, #12
    2eac:	715a      	strb	r2, [r3, #5]
	time.day    = 31;
    2eae:	3213      	adds	r2, #19
    2eb0:	711a      	strb	r2, [r3, #4]
	time.hour   = 23;
    2eb2:	3a08      	subs	r2, #8
    2eb4:	709a      	strb	r2, [r3, #2]
	time.minute = 59;
    2eb6:	3224      	adds	r2, #36	; 0x24
    2eb8:	705a      	strb	r2, [r3, #1]
	time.second = 55;
    2eba:	3a04      	subs	r2, #4
    2ebc:	701a      	strb	r2, [r3, #0]
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    2ebe:	aa01      	add	r2, sp, #4
    2ec0:	2300      	movs	r3, #0
    2ec2:	7013      	strb	r3, [r2, #0]
	time->minute = 0;
    2ec4:	7053      	strb	r3, [r2, #1]
	time->hour   = 0;
    2ec6:	7093      	strb	r3, [r2, #2]
	time->pm     = 0;
    2ec8:	70d3      	strb	r3, [r2, #3]
	time->day    = 1;
    2eca:	2101      	movs	r1, #1
    2ecc:	7111      	strb	r1, [r2, #4]
	time->month  = 1;
    2ece:	7151      	strb	r1, [r2, #5]
	time->year   = 2000;
    2ed0:	21fa      	movs	r1, #250	; 0xfa
    2ed2:	00c9      	lsls	r1, r1, #3
    2ed4:	80d1      	strh	r1, [r2, #6]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    2ed6:	aa03      	add	r2, sp, #12
    2ed8:	20a0      	movs	r0, #160	; 0xa0
    2eda:	0100      	lsls	r0, r0, #4
    2edc:	8010      	strh	r0, [r2, #0]
	config->clear_on_match      = false;
    2ede:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    2ee0:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
    2ee2:	7113      	strb	r3, [r2, #4]
	config->year_init_value     = 2000;
    2ee4:	80d1      	strh	r1, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    2ee6:	2400      	movs	r4, #0
    2ee8:	2c00      	cmp	r4, #0
    2eea:	d014      	beq.n	2f16 <configure_rtc_calendar+0x76>
		
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	config_rtc_calendar.clock_24h     = true;
    2eec:	aa03      	add	r2, sp, #12
    2eee:	2301      	movs	r3, #1
    2ef0:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    2ef2:	4c15      	ldr	r4, [pc, #84]	; (2f48 <configure_rtc_calendar+0xa8>)
    2ef4:	4915      	ldr	r1, [pc, #84]	; (2f4c <configure_rtc_calendar+0xac>)
    2ef6:	0020      	movs	r0, r4
    2ef8:	4b15      	ldr	r3, [pc, #84]	; (2f50 <configure_rtc_calendar+0xb0>)
    2efa:	4798      	blx	r3
		
	rtc_calendar_set_time(&rtc_instance, &time);
    2efc:	4910      	ldr	r1, [pc, #64]	; (2f40 <configure_rtc_calendar+0xa0>)
    2efe:	0020      	movs	r0, r4
    2f00:	4b14      	ldr	r3, [pc, #80]	; (2f54 <configure_rtc_calendar+0xb4>)
    2f02:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    2f04:	0020      	movs	r0, r4
    2f06:	4b14      	ldr	r3, [pc, #80]	; (2f58 <configure_rtc_calendar+0xb8>)
    2f08:	4798      	blx	r3
	// adjust the frequency (the clock is slow atm)
	rtc_calendar_frequency_correction(&rtc_instance, 127);
    2f0a:	217f      	movs	r1, #127	; 0x7f
    2f0c:	0020      	movs	r0, r4
    2f0e:	4b13      	ldr	r3, [pc, #76]	; (2f5c <configure_rtc_calendar+0xbc>)
    2f10:	4798      	blx	r3
}//end configure_rtc_calendar
    2f12:	b009      	add	sp, #36	; 0x24
    2f14:	bd30      	pop	{r4, r5, pc}
		config->alarm[i].time = time;
    2f16:	00a5      	lsls	r5, r4, #2
    2f18:	192b      	adds	r3, r5, r4
    2f1a:	0058      	lsls	r0, r3, #1
    2f1c:	ab03      	add	r3, sp, #12
    2f1e:	469c      	mov	ip, r3
    2f20:	4460      	add	r0, ip
    2f22:	3008      	adds	r0, #8
    2f24:	2208      	movs	r2, #8
    2f26:	a901      	add	r1, sp, #4
    2f28:	4b0d      	ldr	r3, [pc, #52]	; (2f60 <configure_rtc_calendar+0xc0>)
    2f2a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    2f2c:	192d      	adds	r5, r5, r4
    2f2e:	006b      	lsls	r3, r5, #1
    2f30:	aa03      	add	r2, sp, #12
    2f32:	4694      	mov	ip, r2
    2f34:	4463      	add	r3, ip
    2f36:	2206      	movs	r2, #6
    2f38:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    2f3a:	3401      	adds	r4, #1
    2f3c:	b2e4      	uxtb	r4, r4
    2f3e:	e7d3      	b.n	2ee8 <configure_rtc_calendar+0x48>
    2f40:	20000718 	.word	0x20000718
    2f44:	000007e1 	.word	0x000007e1
    2f48:	20000400 	.word	0x20000400
    2f4c:	40001400 	.word	0x40001400
    2f50:	00000651 	.word	0x00000651
    2f54:	00000531 	.word	0x00000531
    2f58:	00000439 	.word	0x00000439
    2f5c:	000006b1 	.word	0x000006b1
    2f60:	00004ca1 	.word	0x00004ca1

00002f64 <clock_osc32k_init>:
/* Function Name    : clock_osc32k_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config internal oscillator 32 kHz
	*/
void clock_osc32k_init(void){
    2f64:	b500      	push	{lr}
    2f66:	b083      	sub	sp, #12
	config->enable_1khz_output  = true;
    2f68:	2301      	movs	r3, #1
    2f6a:	466a      	mov	r2, sp
    2f6c:	7053      	strb	r3, [r2, #1]
	config->enable_32khz_output = true;
    2f6e:	7093      	strb	r3, [r2, #2]
	config->run_in_standby      = false;
    2f70:	2200      	movs	r2, #0
    2f72:	4669      	mov	r1, sp
    2f74:	70ca      	strb	r2, [r1, #3]
	config->on_demand           = true;
    2f76:	710b      	strb	r3, [r1, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2f78:	3306      	adds	r3, #6
    2f7a:	700b      	strb	r3, [r1, #0]
	config->write_once          = false;
    2f7c:	714a      	strb	r2, [r1, #5]
	osc32_config.on_demand				= true;
	osc32_config.run_in_standby			= false;
	osc32_config.startup_time			= SYSTEM_OSC32K_STARTUP_130;
	osc32_config.write_once				= false;
	
	system_clock_source_osc32k_set_config(&osc32_config);
    2f7e:	4668      	mov	r0, sp
    2f80:	4b01      	ldr	r3, [pc, #4]	; (2f88 <clock_osc32k_init+0x24>)
    2f82:	4798      	blx	r3
}//end clock_osc32k_init
    2f84:	b003      	add	sp, #12
    2f86:	bd00      	pop	{pc}
    2f88:	00003fd9 	.word	0x00003fd9

00002f8c <clock_gclk2_init>:
/* Function Name    : clock_gclk2_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : turn on glck using internal 32 kHz oscillator
	*/
void clock_gclk2_init(void){
    2f8c:	b500      	push	{lr}
    2f8e:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk2_config;
		
	system_gclk_init();
    2f90:	4b09      	ldr	r3, [pc, #36]	; (2fb8 <clock_gclk2_init+0x2c>)
    2f92:	4798      	blx	r3
		
	gclk2_config.source_clock			= SYSTEM_CLOCK_SOURCE_OSC32K;
    2f94:	a901      	add	r1, sp, #4
    2f96:	2304      	movs	r3, #4
    2f98:	700b      	strb	r3, [r1, #0]
	gclk2_config.output_enable			= false;
    2f9a:	2300      	movs	r3, #0
    2f9c:	724b      	strb	r3, [r1, #9]
	gclk2_config.high_when_disabled		= false;
    2f9e:	704b      	strb	r3, [r1, #1]
	gclk2_config.division_factor		= 32;
    2fa0:	2220      	movs	r2, #32
    2fa2:	604a      	str	r2, [r1, #4]
	gclk2_config.run_in_standby			= false;
    2fa4:	720b      	strb	r3, [r1, #8]
		
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclk2_config);
    2fa6:	2002      	movs	r0, #2
    2fa8:	4b04      	ldr	r3, [pc, #16]	; (2fbc <clock_gclk2_init+0x30>)
    2faa:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    2fac:	2002      	movs	r0, #2
    2fae:	4b04      	ldr	r3, [pc, #16]	; (2fc0 <clock_gclk2_init+0x34>)
    2fb0:	4798      	blx	r3
}//end clock_gclk2_init
    2fb2:	b005      	add	sp, #20
    2fb4:	bd00      	pop	{pc}
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	000041c5 	.word	0x000041c5
    2fbc:	000041e9 	.word	0x000041e9
    2fc0:	000042b9 	.word	0x000042b9

00002fc4 <lcd_spi_init>:
    2fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fc6:	46c6      	mov	lr, r8
    2fc8:	b500      	push	{lr}
    2fca:	b090      	sub	sp, #64	; 0x40
    2fcc:	4b34      	ldr	r3, [pc, #208]	; (30a0 <lcd_spi_init+0xdc>)
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	2b00      	cmp	r3, #0
    2fd2:	d003      	beq.n	2fdc <lcd_spi_init+0x18>
    2fd4:	b010      	add	sp, #64	; 0x40
    2fd6:	bc04      	pop	{r2}
    2fd8:	4690      	mov	r8, r2
    2fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fdc:	aa01      	add	r2, sp, #4
    2fde:	7053      	strb	r3, [r2, #1]
    2fe0:	7093      	strb	r3, [r2, #2]
    2fe2:	212d      	movs	r1, #45	; 0x2d
    2fe4:	7011      	strb	r1, [r2, #0]
    2fe6:	4c2f      	ldr	r4, [pc, #188]	; (30a4 <lcd_spi_init+0xe0>)
    2fe8:	7021      	strb	r1, [r4, #0]
    2fea:	7063      	strb	r3, [r4, #1]
    2fec:	70a3      	strb	r3, [r4, #2]
    2fee:	2201      	movs	r2, #1
    2ff0:	4669      	mov	r1, sp
    2ff2:	704a      	strb	r2, [r1, #1]
    2ff4:	708b      	strb	r3, [r1, #2]
    2ff6:	700a      	strb	r2, [r1, #0]
    2ff8:	202d      	movs	r0, #45	; 0x2d
    2ffa:	4b2b      	ldr	r3, [pc, #172]	; (30a8 <lcd_spi_init+0xe4>)
    2ffc:	4798      	blx	r3
    2ffe:	7823      	ldrb	r3, [r4, #0]
    3000:	09d9      	lsrs	r1, r3, #7
    3002:	095a      	lsrs	r2, r3, #5
    3004:	2900      	cmp	r1, #0
    3006:	d149      	bne.n	309c <lcd_spi_init+0xd8>
    3008:	01d2      	lsls	r2, r2, #7
    300a:	4928      	ldr	r1, [pc, #160]	; (30ac <lcd_spi_init+0xe8>)
    300c:	468c      	mov	ip, r1
    300e:	4462      	add	r2, ip
    3010:	271f      	movs	r7, #31
    3012:	403b      	ands	r3, r7
    3014:	2501      	movs	r5, #1
    3016:	0029      	movs	r1, r5
    3018:	4099      	lsls	r1, r3
    301a:	6191      	str	r1, [r2, #24]
    301c:	ac02      	add	r4, sp, #8
    301e:	7025      	strb	r5, [r4, #0]
    3020:	2600      	movs	r6, #0
    3022:	6066      	str	r6, [r4, #4]
    3024:	60a6      	str	r6, [r4, #8]
    3026:	23c0      	movs	r3, #192	; 0xc0
    3028:	039b      	lsls	r3, r3, #14
    302a:	60e3      	str	r3, [r4, #12]
    302c:	7426      	strb	r6, [r4, #16]
    302e:	7466      	strb	r6, [r4, #17]
    3030:	74a5      	strb	r5, [r4, #18]
    3032:	74e5      	strb	r5, [r4, #19]
    3034:	7526      	strb	r6, [r4, #20]
    3036:	2324      	movs	r3, #36	; 0x24
    3038:	4698      	mov	r8, r3
    303a:	54e6      	strb	r6, [r4, r3]
    303c:	220c      	movs	r2, #12
    303e:	2100      	movs	r1, #0
    3040:	a808      	add	r0, sp, #32
    3042:	4b1b      	ldr	r3, [pc, #108]	; (30b0 <lcd_spi_init+0xec>)
    3044:	4798      	blx	r3
    3046:	2380      	movs	r3, #128	; 0x80
    3048:	025b      	lsls	r3, r3, #9
    304a:	60e3      	str	r3, [r4, #12]
    304c:	4b19      	ldr	r3, [pc, #100]	; (30b4 <lcd_spi_init+0xf0>)
    304e:	62a3      	str	r3, [r4, #40]	; 0x28
    3050:	2301      	movs	r3, #1
    3052:	425b      	negs	r3, r3
    3054:	62e3      	str	r3, [r4, #44]	; 0x2c
    3056:	4b18      	ldr	r3, [pc, #96]	; (30b8 <lcd_spi_init+0xf4>)
    3058:	6323      	str	r3, [r4, #48]	; 0x30
    305a:	4b18      	ldr	r3, [pc, #96]	; (30bc <lcd_spi_init+0xf8>)
    305c:	6363      	str	r3, [r4, #52]	; 0x34
    305e:	4643      	mov	r3, r8
    3060:	54e6      	strb	r6, [r4, r3]
    3062:	4b17      	ldr	r3, [pc, #92]	; (30c0 <lcd_spi_init+0xfc>)
    3064:	61a3      	str	r3, [r4, #24]
    3066:	4e17      	ldr	r6, [pc, #92]	; (30c4 <lcd_spi_init+0x100>)
    3068:	0022      	movs	r2, r4
    306a:	4917      	ldr	r1, [pc, #92]	; (30c8 <lcd_spi_init+0x104>)
    306c:	0030      	movs	r0, r6
    306e:	4b17      	ldr	r3, [pc, #92]	; (30cc <lcd_spi_init+0x108>)
    3070:	4798      	blx	r3
    3072:	6834      	ldr	r4, [r6, #0]
    3074:	0020      	movs	r0, r4
    3076:	4b16      	ldr	r3, [pc, #88]	; (30d0 <lcd_spi_init+0x10c>)
    3078:	4798      	blx	r3
    307a:	4038      	ands	r0, r7
    307c:	4085      	lsls	r5, r0
    307e:	4b15      	ldr	r3, [pc, #84]	; (30d4 <lcd_spi_init+0x110>)
    3080:	601d      	str	r5, [r3, #0]
    3082:	4b10      	ldr	r3, [pc, #64]	; (30c4 <lcd_spi_init+0x100>)
    3084:	681b      	ldr	r3, [r3, #0]
    3086:	69db      	ldr	r3, [r3, #28]
    3088:	2b00      	cmp	r3, #0
    308a:	d1fa      	bne.n	3082 <lcd_spi_init+0xbe>
    308c:	6823      	ldr	r3, [r4, #0]
    308e:	2202      	movs	r2, #2
    3090:	4313      	orrs	r3, r2
    3092:	6023      	str	r3, [r4, #0]
    3094:	3a01      	subs	r2, #1
    3096:	4b02      	ldr	r3, [pc, #8]	; (30a0 <lcd_spi_init+0xdc>)
    3098:	701a      	strb	r2, [r3, #0]
    309a:	e79b      	b.n	2fd4 <lcd_spi_init+0x10>
    309c:	2200      	movs	r2, #0
    309e:	e7b7      	b.n	3010 <lcd_spi_init+0x4c>
    30a0:	200000b7 	.word	0x200000b7
    30a4:	2000094c 	.word	0x2000094c
    30a8:	00003e4d 	.word	0x00003e4d
    30ac:	41004400 	.word	0x41004400
    30b0:	00004cb3 	.word	0x00004cb3
    30b4:	002c0002 	.word	0x002c0002
    30b8:	002e0002 	.word	0x002e0002
    30bc:	002f0002 	.word	0x002f0002
    30c0:	000f4240 	.word	0x000f4240
    30c4:	20000950 	.word	0x20000950
    30c8:	42001800 	.word	0x42001800
    30cc:	00000ba9 	.word	0x00000ba9
    30d0:	00003dc9 	.word	0x00003dc9
    30d4:	e000e100 	.word	0xe000e100

000030d8 <lcd_start_xfer>:
    30d8:	b510      	push	{r4, lr}
    30da:	b082      	sub	sp, #8
    30dc:	1e0c      	subs	r4, r1, #0
    30de:	d11f      	bne.n	3120 <lcd_start_xfer+0x48>
    30e0:	0200      	lsls	r0, r0, #8
    30e2:	4b1a      	ldr	r3, [pc, #104]	; (314c <lcd_start_xfer+0x74>)
    30e4:	4018      	ands	r0, r3
    30e6:	9001      	str	r0, [sp, #4]
    30e8:	ab01      	add	r3, sp, #4
    30ea:	78d9      	ldrb	r1, [r3, #3]
    30ec:	781a      	ldrb	r2, [r3, #0]
    30ee:	404a      	eors	r2, r1
    30f0:	4051      	eors	r1, r2
    30f2:	70d9      	strb	r1, [r3, #3]
    30f4:	404a      	eors	r2, r1
    30f6:	701a      	strb	r2, [r3, #0]
    30f8:	7899      	ldrb	r1, [r3, #2]
    30fa:	785a      	ldrb	r2, [r3, #1]
    30fc:	404a      	eors	r2, r1
    30fe:	4051      	eors	r1, r2
    3100:	7099      	strb	r1, [r3, #2]
    3102:	404a      	eors	r2, r1
    3104:	705a      	strb	r2, [r3, #1]
    3106:	2201      	movs	r2, #1
    3108:	4911      	ldr	r1, [pc, #68]	; (3150 <lcd_start_xfer+0x78>)
    310a:	4812      	ldr	r0, [pc, #72]	; (3154 <lcd_start_xfer+0x7c>)
    310c:	4b12      	ldr	r3, [pc, #72]	; (3158 <lcd_start_xfer+0x80>)
    310e:	4798      	blx	r3
    3110:	2805      	cmp	r0, #5
    3112:	d0f8      	beq.n	3106 <lcd_start_xfer+0x2e>
    3114:	2c00      	cmp	r4, #0
    3116:	d00d      	beq.n	3134 <lcd_start_xfer+0x5c>
    3118:	2c01      	cmp	r4, #1
    311a:	d011      	beq.n	3140 <lcd_start_xfer+0x68>
    311c:	b002      	add	sp, #8
    311e:	bd10      	pop	{r4, pc}
    3120:	2901      	cmp	r1, #1
    3122:	d1e1      	bne.n	30e8 <lcd_start_xfer+0x10>
    3124:	0200      	lsls	r0, r0, #8
    3126:	4b09      	ldr	r3, [pc, #36]	; (314c <lcd_start_xfer+0x74>)
    3128:	4018      	ands	r0, r3
    312a:	2380      	movs	r3, #128	; 0x80
    312c:	061b      	lsls	r3, r3, #24
    312e:	4318      	orrs	r0, r3
    3130:	9001      	str	r0, [sp, #4]
    3132:	e7d9      	b.n	30e8 <lcd_start_xfer+0x10>
    3134:	2204      	movs	r2, #4
    3136:	a901      	add	r1, sp, #4
    3138:	4806      	ldr	r0, [pc, #24]	; (3154 <lcd_start_xfer+0x7c>)
    313a:	4b08      	ldr	r3, [pc, #32]	; (315c <lcd_start_xfer+0x84>)
    313c:	4798      	blx	r3
    313e:	e7ed      	b.n	311c <lcd_start_xfer+0x44>
    3140:	2203      	movs	r2, #3
    3142:	a901      	add	r1, sp, #4
    3144:	4803      	ldr	r0, [pc, #12]	; (3154 <lcd_start_xfer+0x7c>)
    3146:	4b05      	ldr	r3, [pc, #20]	; (315c <lcd_start_xfer+0x84>)
    3148:	4798      	blx	r3
    314a:	e7e7      	b.n	311c <lcd_start_xfer+0x44>
    314c:	3fffff00 	.word	0x3fffff00
    3150:	2000094c 	.word	0x2000094c
    3154:	20000950 	.word	0x20000950
    3158:	00000d91 	.word	0x00000d91
    315c:	00000e8d 	.word	0x00000e8d

00003160 <lcd_stop_xfer>:
    3160:	b510      	push	{r4, lr}
    3162:	2200      	movs	r2, #0
    3164:	4902      	ldr	r1, [pc, #8]	; (3170 <lcd_stop_xfer+0x10>)
    3166:	4803      	ldr	r0, [pc, #12]	; (3174 <lcd_stop_xfer+0x14>)
    3168:	4b03      	ldr	r3, [pc, #12]	; (3178 <lcd_stop_xfer+0x18>)
    316a:	4798      	blx	r3
    316c:	bd10      	pop	{r4, pc}
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	2000094c 	.word	0x2000094c
    3174:	20000950 	.word	0x20000950
    3178:	00000d91 	.word	0x00000d91

0000317c <lcd_host_read>:
    317c:	b510      	push	{r4, lr}
    317e:	000a      	movs	r2, r1
    3180:	2300      	movs	r3, #0
    3182:	0001      	movs	r1, r0
    3184:	4801      	ldr	r0, [pc, #4]	; (318c <lcd_host_read+0x10>)
    3186:	4c02      	ldr	r4, [pc, #8]	; (3190 <lcd_host_read+0x14>)
    3188:	47a0      	blx	r4
    318a:	bd10      	pop	{r4, pc}
    318c:	20000950 	.word	0x20000950
    3190:	00000c95 	.word	0x00000c95

00003194 <lcd_rd8>:
    3194:	b510      	push	{r4, lr}
    3196:	b082      	sub	sp, #8
    3198:	466b      	mov	r3, sp
    319a:	1ddc      	adds	r4, r3, #7
    319c:	2300      	movs	r3, #0
    319e:	7023      	strb	r3, [r4, #0]
    31a0:	2100      	movs	r1, #0
    31a2:	4b05      	ldr	r3, [pc, #20]	; (31b8 <lcd_rd8+0x24>)
    31a4:	4798      	blx	r3
    31a6:	2101      	movs	r1, #1
    31a8:	0020      	movs	r0, r4
    31aa:	4b04      	ldr	r3, [pc, #16]	; (31bc <lcd_rd8+0x28>)
    31ac:	4798      	blx	r3
    31ae:	4b04      	ldr	r3, [pc, #16]	; (31c0 <lcd_rd8+0x2c>)
    31b0:	4798      	blx	r3
    31b2:	7820      	ldrb	r0, [r4, #0]
    31b4:	b002      	add	sp, #8
    31b6:	bd10      	pop	{r4, pc}
    31b8:	000030d9 	.word	0x000030d9
    31bc:	0000317d 	.word	0x0000317d
    31c0:	00003161 	.word	0x00003161

000031c4 <lcd_rd16>:
    31c4:	b510      	push	{r4, lr}
    31c6:	b082      	sub	sp, #8
    31c8:	466b      	mov	r3, sp
    31ca:	1d9c      	adds	r4, r3, #6
    31cc:	2300      	movs	r3, #0
    31ce:	8023      	strh	r3, [r4, #0]
    31d0:	2100      	movs	r1, #0
    31d2:	4b05      	ldr	r3, [pc, #20]	; (31e8 <lcd_rd16+0x24>)
    31d4:	4798      	blx	r3
    31d6:	2102      	movs	r1, #2
    31d8:	0020      	movs	r0, r4
    31da:	4b04      	ldr	r3, [pc, #16]	; (31ec <lcd_rd16+0x28>)
    31dc:	4798      	blx	r3
    31de:	4b04      	ldr	r3, [pc, #16]	; (31f0 <lcd_rd16+0x2c>)
    31e0:	4798      	blx	r3
    31e2:	8820      	ldrh	r0, [r4, #0]
    31e4:	b002      	add	sp, #8
    31e6:	bd10      	pop	{r4, pc}
    31e8:	000030d9 	.word	0x000030d9
    31ec:	0000317d 	.word	0x0000317d
    31f0:	00003161 	.word	0x00003161

000031f4 <lcd_host_write>:
    31f4:	b510      	push	{r4, lr}
    31f6:	000a      	movs	r2, r1
    31f8:	0001      	movs	r1, r0
    31fa:	4802      	ldr	r0, [pc, #8]	; (3204 <lcd_host_write+0x10>)
    31fc:	4b02      	ldr	r3, [pc, #8]	; (3208 <lcd_host_write+0x14>)
    31fe:	4798      	blx	r3
    3200:	bd10      	pop	{r4, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	20000950 	.word	0x20000950
    3208:	00000e8d 	.word	0x00000e8d

0000320c <lcd_wr8>:
    320c:	b510      	push	{r4, lr}
    320e:	b082      	sub	sp, #8
    3210:	466b      	mov	r3, sp
    3212:	1ddc      	adds	r4, r3, #7
    3214:	71d9      	strb	r1, [r3, #7]
    3216:	2101      	movs	r1, #1
    3218:	4b05      	ldr	r3, [pc, #20]	; (3230 <lcd_wr8+0x24>)
    321a:	4798      	blx	r3
    321c:	2101      	movs	r1, #1
    321e:	0020      	movs	r0, r4
    3220:	4b04      	ldr	r3, [pc, #16]	; (3234 <lcd_wr8+0x28>)
    3222:	4798      	blx	r3
    3224:	0004      	movs	r4, r0
    3226:	4b04      	ldr	r3, [pc, #16]	; (3238 <lcd_wr8+0x2c>)
    3228:	4798      	blx	r3
    322a:	0020      	movs	r0, r4
    322c:	b002      	add	sp, #8
    322e:	bd10      	pop	{r4, pc}
    3230:	000030d9 	.word	0x000030d9
    3234:	000031f5 	.word	0x000031f5
    3238:	00003161 	.word	0x00003161

0000323c <lcd_wr16>:
    323c:	b510      	push	{r4, lr}
    323e:	b082      	sub	sp, #8
    3240:	466b      	mov	r3, sp
    3242:	1d9c      	adds	r4, r3, #6
    3244:	80d9      	strh	r1, [r3, #6]
    3246:	2101      	movs	r1, #1
    3248:	4b05      	ldr	r3, [pc, #20]	; (3260 <lcd_wr16+0x24>)
    324a:	4798      	blx	r3
    324c:	2102      	movs	r1, #2
    324e:	0020      	movs	r0, r4
    3250:	4b04      	ldr	r3, [pc, #16]	; (3264 <lcd_wr16+0x28>)
    3252:	4798      	blx	r3
    3254:	0004      	movs	r4, r0
    3256:	4b04      	ldr	r3, [pc, #16]	; (3268 <lcd_wr16+0x2c>)
    3258:	4798      	blx	r3
    325a:	0020      	movs	r0, r4
    325c:	b002      	add	sp, #8
    325e:	bd10      	pop	{r4, pc}
    3260:	000030d9 	.word	0x000030d9
    3264:	000031f5 	.word	0x000031f5
    3268:	00003161 	.word	0x00003161

0000326c <lcd_wr32>:
    326c:	b510      	push	{r4, lr}
    326e:	b082      	sub	sp, #8
    3270:	9101      	str	r1, [sp, #4]
    3272:	2101      	movs	r1, #1
    3274:	4b05      	ldr	r3, [pc, #20]	; (328c <lcd_wr32+0x20>)
    3276:	4798      	blx	r3
    3278:	2104      	movs	r1, #4
    327a:	a801      	add	r0, sp, #4
    327c:	4b04      	ldr	r3, [pc, #16]	; (3290 <lcd_wr32+0x24>)
    327e:	4798      	blx	r3
    3280:	0004      	movs	r4, r0
    3282:	4b04      	ldr	r3, [pc, #16]	; (3294 <lcd_wr32+0x28>)
    3284:	4798      	blx	r3
    3286:	0020      	movs	r0, r4
    3288:	b002      	add	sp, #8
    328a:	bd10      	pop	{r4, pc}
    328c:	000030d9 	.word	0x000030d9
    3290:	000031f5 	.word	0x000031f5
    3294:	00003161 	.word	0x00003161

00003298 <lcd_host_cmd>:
    3298:	b510      	push	{r4, lr}
    329a:	b082      	sub	sp, #8
    329c:	ab01      	add	r3, sp, #4
    329e:	7018      	strb	r0, [r3, #0]
    32a0:	7059      	strb	r1, [r3, #1]
    32a2:	2200      	movs	r2, #0
    32a4:	709a      	strb	r2, [r3, #2]
    32a6:	2201      	movs	r2, #1
    32a8:	490a      	ldr	r1, [pc, #40]	; (32d4 <lcd_host_cmd+0x3c>)
    32aa:	480b      	ldr	r0, [pc, #44]	; (32d8 <lcd_host_cmd+0x40>)
    32ac:	4b0b      	ldr	r3, [pc, #44]	; (32dc <lcd_host_cmd+0x44>)
    32ae:	4798      	blx	r3
    32b0:	2805      	cmp	r0, #5
    32b2:	d0f8      	beq.n	32a6 <lcd_host_cmd+0xe>
    32b4:	2203      	movs	r2, #3
    32b6:	a901      	add	r1, sp, #4
    32b8:	4807      	ldr	r0, [pc, #28]	; (32d8 <lcd_host_cmd+0x40>)
    32ba:	4b09      	ldr	r3, [pc, #36]	; (32e0 <lcd_host_cmd+0x48>)
    32bc:	4798      	blx	r3
    32be:	1e04      	subs	r4, r0, #0
    32c0:	d105      	bne.n	32ce <lcd_host_cmd+0x36>
    32c2:	4b08      	ldr	r3, [pc, #32]	; (32e4 <lcd_host_cmd+0x4c>)
    32c4:	4798      	blx	r3
    32c6:	0004      	movs	r4, r0
    32c8:	0020      	movs	r0, r4
    32ca:	b002      	add	sp, #8
    32cc:	bd10      	pop	{r4, pc}
    32ce:	4b05      	ldr	r3, [pc, #20]	; (32e4 <lcd_host_cmd+0x4c>)
    32d0:	4798      	blx	r3
    32d2:	e7f9      	b.n	32c8 <lcd_host_cmd+0x30>
    32d4:	2000094c 	.word	0x2000094c
    32d8:	20000950 	.word	0x20000950
    32dc:	00000d91 	.word	0x00000d91
    32e0:	00000e8d 	.word	0x00000e8d
    32e4:	00003161 	.word	0x00003161

000032e8 <lcd_powerdown>:
    32e8:	2280      	movs	r2, #128	; 0x80
    32ea:	0052      	lsls	r2, r2, #1
    32ec:	4b01      	ldr	r3, [pc, #4]	; (32f4 <lcd_powerdown+0xc>)
    32ee:	615a      	str	r2, [r3, #20]
    32f0:	4770      	bx	lr
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	41004400 	.word	0x41004400

000032f8 <lcd_powerup>:
    32f8:	2280      	movs	r2, #128	; 0x80
    32fa:	0052      	lsls	r2, r2, #1
    32fc:	4b01      	ldr	r3, [pc, #4]	; (3304 <lcd_powerup+0xc>)
    32fe:	619a      	str	r2, [r3, #24]
    3300:	4770      	bx	lr
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	41004400 	.word	0x41004400

00003308 <lcd_init_seq>:
    3308:	b570      	push	{r4, r5, r6, lr}
    330a:	4b31      	ldr	r3, [pc, #196]	; (33d0 <lcd_init_seq+0xc8>)
    330c:	4798      	blx	r3
    330e:	2014      	movs	r0, #20
    3310:	4c30      	ldr	r4, [pc, #192]	; (33d4 <lcd_init_seq+0xcc>)
    3312:	47a0      	blx	r4
    3314:	4b30      	ldr	r3, [pc, #192]	; (33d8 <lcd_init_seq+0xd0>)
    3316:	4798      	blx	r3
    3318:	2014      	movs	r0, #20
    331a:	47a0      	blx	r4
    331c:	2100      	movs	r1, #0
    331e:	2044      	movs	r0, #68	; 0x44
    3320:	4d2e      	ldr	r5, [pc, #184]	; (33dc <lcd_init_seq+0xd4>)
    3322:	47a8      	blx	r5
    3324:	2032      	movs	r0, #50	; 0x32
    3326:	47a0      	blx	r4
    3328:	2100      	movs	r1, #0
    332a:	2000      	movs	r0, #0
    332c:	47a8      	blx	r5
    332e:	482c      	ldr	r0, [pc, #176]	; (33e0 <lcd_init_seq+0xd8>)
    3330:	4b2c      	ldr	r3, [pc, #176]	; (33e4 <lcd_init_seq+0xdc>)
    3332:	4798      	blx	r3
    3334:	b2c0      	uxtb	r0, r0
    3336:	287c      	cmp	r0, #124	; 0x7c
    3338:	d1f9      	bne.n	332e <lcd_init_seq+0x26>
    333a:	21c8      	movs	r1, #200	; 0xc8
    333c:	0089      	lsls	r1, r1, #2
    333e:	482a      	ldr	r0, [pc, #168]	; (33e8 <lcd_init_seq+0xe0>)
    3340:	4c2a      	ldr	r4, [pc, #168]	; (33ec <lcd_init_seq+0xe4>)
    3342:	47a0      	blx	r4
    3344:	21e8      	movs	r1, #232	; 0xe8
    3346:	0089      	lsls	r1, r1, #2
    3348:	4829      	ldr	r0, [pc, #164]	; (33f0 <lcd_init_seq+0xe8>)
    334a:	47a0      	blx	r4
    334c:	2158      	movs	r1, #88	; 0x58
    334e:	4829      	ldr	r0, [pc, #164]	; (33f4 <lcd_init_seq+0xec>)
    3350:	47a0      	blx	r4
    3352:	2100      	movs	r1, #0
    3354:	4828      	ldr	r0, [pc, #160]	; (33f8 <lcd_init_seq+0xf0>)
    3356:	47a0      	blx	r4
    3358:	2130      	movs	r1, #48	; 0x30
    335a:	4828      	ldr	r0, [pc, #160]	; (33fc <lcd_init_seq+0xf4>)
    335c:	47a0      	blx	r4
    335e:	21f0      	movs	r1, #240	; 0xf0
    3360:	0049      	lsls	r1, r1, #1
    3362:	4827      	ldr	r0, [pc, #156]	; (3400 <lcd_init_seq+0xf8>)
    3364:	47a0      	blx	r4
    3366:	4927      	ldr	r1, [pc, #156]	; (3404 <lcd_init_seq+0xfc>)
    3368:	4827      	ldr	r0, [pc, #156]	; (3408 <lcd_init_seq+0x100>)
    336a:	47a0      	blx	r4
    336c:	2120      	movs	r1, #32
    336e:	4827      	ldr	r0, [pc, #156]	; (340c <lcd_init_seq+0x104>)
    3370:	47a0      	blx	r4
    3372:	2100      	movs	r1, #0
    3374:	4826      	ldr	r0, [pc, #152]	; (3410 <lcd_init_seq+0x108>)
    3376:	47a0      	blx	r4
    3378:	2103      	movs	r1, #3
    337a:	4826      	ldr	r0, [pc, #152]	; (3414 <lcd_init_seq+0x10c>)
    337c:	47a0      	blx	r4
    337e:	2100      	movs	r1, #0
    3380:	4825      	ldr	r0, [pc, #148]	; (3418 <lcd_init_seq+0x110>)
    3382:	4d26      	ldr	r5, [pc, #152]	; (341c <lcd_init_seq+0x114>)
    3384:	47a8      	blx	r5
    3386:	2100      	movs	r1, #0
    3388:	4825      	ldr	r0, [pc, #148]	; (3420 <lcd_init_seq+0x118>)
    338a:	47a8      	blx	r5
    338c:	2101      	movs	r1, #1
    338e:	4825      	ldr	r0, [pc, #148]	; (3424 <lcd_init_seq+0x11c>)
    3390:	47a8      	blx	r5
    3392:	2101      	movs	r1, #1
    3394:	4824      	ldr	r0, [pc, #144]	; (3428 <lcd_init_seq+0x120>)
    3396:	47a8      	blx	r5
    3398:	4924      	ldr	r1, [pc, #144]	; (342c <lcd_init_seq+0x124>)
    339a:	20c0      	movs	r0, #192	; 0xc0
    339c:	0380      	lsls	r0, r0, #14
    339e:	4e24      	ldr	r6, [pc, #144]	; (3430 <lcd_init_seq+0x128>)
    33a0:	47b0      	blx	r6
    33a2:	4924      	ldr	r1, [pc, #144]	; (3434 <lcd_init_seq+0x12c>)
    33a4:	4824      	ldr	r0, [pc, #144]	; (3438 <lcd_init_seq+0x130>)
    33a6:	47b0      	blx	r6
    33a8:	4924      	ldr	r1, [pc, #144]	; (343c <lcd_init_seq+0x134>)
    33aa:	4825      	ldr	r0, [pc, #148]	; (3440 <lcd_init_seq+0x138>)
    33ac:	47b0      	blx	r6
    33ae:	2100      	movs	r1, #0
    33b0:	4824      	ldr	r0, [pc, #144]	; (3444 <lcd_init_seq+0x13c>)
    33b2:	47b0      	blx	r6
    33b4:	2102      	movs	r1, #2
    33b6:	4824      	ldr	r0, [pc, #144]	; (3448 <lcd_init_seq+0x140>)
    33b8:	47a8      	blx	r5
    33ba:	4e24      	ldr	r6, [pc, #144]	; (344c <lcd_init_seq+0x144>)
    33bc:	0031      	movs	r1, r6
    33be:	4824      	ldr	r0, [pc, #144]	; (3450 <lcd_init_seq+0x148>)
    33c0:	47a0      	blx	r4
    33c2:	0031      	movs	r1, r6
    33c4:	4823      	ldr	r0, [pc, #140]	; (3454 <lcd_init_seq+0x14c>)
    33c6:	47a0      	blx	r4
    33c8:	2102      	movs	r1, #2
    33ca:	4823      	ldr	r0, [pc, #140]	; (3458 <lcd_init_seq+0x150>)
    33cc:	47a8      	blx	r5
    33ce:	bd70      	pop	{r4, r5, r6, pc}
    33d0:	000032e9 	.word	0x000032e9
    33d4:	00000151 	.word	0x00000151
    33d8:	000032f9 	.word	0x000032f9
    33dc:	00003299 	.word	0x00003299
    33e0:	00302000 	.word	0x00302000
    33e4:	000031c5 	.word	0x000031c5
    33e8:	00302034 	.word	0x00302034
    33ec:	0000323d 	.word	0x0000323d
    33f0:	0030202c 	.word	0x0030202c
    33f4:	00302030 	.word	0x00302030
    33f8:	00302038 	.word	0x00302038
    33fc:	0030203c 	.word	0x0030203c
    3400:	00302048 	.word	0x00302048
    3404:	0000020d 	.word	0x0000020d
    3408:	00302040 	.word	0x00302040
    340c:	00302044 	.word	0x00302044
    3410:	0030204c 	.word	0x0030204c
    3414:	00302050 	.word	0x00302050
    3418:	00302064 	.word	0x00302064
    341c:	0000320d 	.word	0x0000320d
    3420:	0030206c 	.word	0x0030206c
    3424:	00302068 	.word	0x00302068
    3428:	00302060 	.word	0x00302060
    342c:	02010101 	.word	0x02010101
    3430:	0000326d 	.word	0x0000326d
    3434:	04ffffff 	.word	0x04ffffff
    3438:	00300004 	.word	0x00300004
    343c:	26000007 	.word	0x26000007
    3440:	00300008 	.word	0x00300008
    3444:	0030000c 	.word	0x0030000c
    3448:	00302054 	.word	0x00302054
    344c:	0000ffff 	.word	0x0000ffff
    3450:	00302098 	.word	0x00302098
    3454:	0030209c 	.word	0x0030209c
    3458:	00302070 	.word	0x00302070

0000345c <lcd_set_ft_host_ptr>:
    345c:	4b01      	ldr	r3, [pc, #4]	; (3464 <lcd_set_ft_host_ptr+0x8>)
    345e:	6018      	str	r0, [r3, #0]
    3460:	4770      	bx	lr
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	200000b8 	.word	0x200000b8

00003468 <lcd_interrupt_callback>:
    3468:	b510      	push	{r4, lr}
    346a:	4803      	ldr	r0, [pc, #12]	; (3478 <lcd_interrupt_callback+0x10>)
    346c:	4b03      	ldr	r3, [pc, #12]	; (347c <lcd_interrupt_callback+0x14>)
    346e:	4798      	blx	r3
    3470:	4b03      	ldr	r3, [pc, #12]	; (3480 <lcd_interrupt_callback+0x18>)
    3472:	7018      	strb	r0, [r3, #0]
    3474:	bd10      	pop	{r4, pc}
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	003020a8 	.word	0x003020a8
    347c:	00003195 	.word	0x00003195
    3480:	2000000a 	.word	0x2000000a

00003484 <led_tx_on>:
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	0512      	lsls	r2, r2, #20
    3488:	4b01      	ldr	r3, [pc, #4]	; (3490 <led_tx_on+0xc>)
    348a:	615a      	str	r2, [r3, #20]
    348c:	4770      	bx	lr
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	41004400 	.word	0x41004400

00003494 <led_tx_off>:
    3494:	2280      	movs	r2, #128	; 0x80
    3496:	0512      	lsls	r2, r2, #20
    3498:	4b01      	ldr	r3, [pc, #4]	; (34a0 <led_tx_off+0xc>)
    349a:	619a      	str	r2, [r3, #24]
    349c:	4770      	bx	lr
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	41004400 	.word	0x41004400

000034a4 <SysTick_Handler>:
    34a4:	4a02      	ldr	r2, [pc, #8]	; (34b0 <SysTick_Handler+0xc>)
    34a6:	6813      	ldr	r3, [r2, #0]
    34a8:	3301      	adds	r3, #1
    34aa:	6013      	str	r3, [r2, #0]
    34ac:	4770      	bx	lr
    34ae:	46c0      	nop			; (mov r8, r8)
    34b0:	200000bc 	.word	0x200000bc

000034b4 <mstimer_now>:
    34b4:	4b01      	ldr	r3, [pc, #4]	; (34bc <mstimer_now+0x8>)
    34b6:	6818      	ldr	r0, [r3, #0]
    34b8:	4770      	bx	lr
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	200000bc 	.word	0x200000bc

000034c0 <mstimer_init>:
    34c0:	b510      	push	{r4, lr}
    34c2:	4b0f      	ldr	r3, [pc, #60]	; (3500 <mstimer_init+0x40>)
    34c4:	6818      	ldr	r0, [r3, #0]
    34c6:	21fa      	movs	r1, #250	; 0xfa
    34c8:	0089      	lsls	r1, r1, #2
    34ca:	4b0e      	ldr	r3, [pc, #56]	; (3504 <mstimer_init+0x44>)
    34cc:	4798      	blx	r3
    34ce:	3801      	subs	r0, #1
    34d0:	4b0d      	ldr	r3, [pc, #52]	; (3508 <mstimer_init+0x48>)
    34d2:	4298      	cmp	r0, r3
    34d4:	d811      	bhi.n	34fa <mstimer_init+0x3a>
    34d6:	4a0d      	ldr	r2, [pc, #52]	; (350c <mstimer_init+0x4c>)
    34d8:	6050      	str	r0, [r2, #4]
    34da:	480d      	ldr	r0, [pc, #52]	; (3510 <mstimer_init+0x50>)
    34dc:	6a03      	ldr	r3, [r0, #32]
    34de:	021b      	lsls	r3, r3, #8
    34e0:	0a1b      	lsrs	r3, r3, #8
    34e2:	21c0      	movs	r1, #192	; 0xc0
    34e4:	0609      	lsls	r1, r1, #24
    34e6:	430b      	orrs	r3, r1
    34e8:	6203      	str	r3, [r0, #32]
    34ea:	2300      	movs	r3, #0
    34ec:	6093      	str	r3, [r2, #8]
    34ee:	3307      	adds	r3, #7
    34f0:	6013      	str	r3, [r2, #0]
    34f2:	2300      	movs	r3, #0
    34f4:	2b00      	cmp	r3, #0
    34f6:	d002      	beq.n	34fe <mstimer_init+0x3e>
    34f8:	e7fe      	b.n	34f8 <mstimer_init+0x38>
    34fa:	2301      	movs	r3, #1
    34fc:	e7fa      	b.n	34f4 <mstimer_init+0x34>
    34fe:	bd10      	pop	{r4, pc}
    3500:	2000000c 	.word	0x2000000c
    3504:	00004aed 	.word	0x00004aed
    3508:	00ffffff 	.word	0x00ffffff
    350c:	e000e010 	.word	0xe000e010
    3510:	e000ed00 	.word	0xe000ed00

00003514 <rs485_clock_init>:
    3514:	b500      	push	{lr}
    3516:	b083      	sub	sp, #12
    3518:	4a07      	ldr	r2, [pc, #28]	; (3538 <rs485_clock_init+0x24>)
    351a:	6a13      	ldr	r3, [r2, #32]
    351c:	2120      	movs	r1, #32
    351e:	430b      	orrs	r3, r1
    3520:	6213      	str	r3, [r2, #32]
    3522:	a901      	add	r1, sp, #4
    3524:	2300      	movs	r3, #0
    3526:	700b      	strb	r3, [r1, #0]
    3528:	2017      	movs	r0, #23
    352a:	4b04      	ldr	r3, [pc, #16]	; (353c <rs485_clock_init+0x28>)
    352c:	4798      	blx	r3
    352e:	2017      	movs	r0, #23
    3530:	4b03      	ldr	r3, [pc, #12]	; (3540 <rs485_clock_init+0x2c>)
    3532:	4798      	blx	r3
    3534:	b003      	add	sp, #12
    3536:	bd00      	pop	{pc}
    3538:	40000400 	.word	0x40000400
    353c:	00004445 	.word	0x00004445
    3540:	000043bd 	.word	0x000043bd

00003544 <rs485_pin_init>:
    3544:	b570      	push	{r4, r5, r6, lr}
    3546:	4c0b      	ldr	r4, [pc, #44]	; (3574 <rs485_pin_init+0x30>)
    3548:	2300      	movs	r3, #0
    354a:	70a3      	strb	r3, [r4, #2]
    354c:	2601      	movs	r6, #1
    354e:	7026      	strb	r6, [r4, #0]
    3550:	3302      	adds	r3, #2
    3552:	7063      	strb	r3, [r4, #1]
    3554:	0021      	movs	r1, r4
    3556:	2018      	movs	r0, #24
    3558:	4d07      	ldr	r5, [pc, #28]	; (3578 <rs485_pin_init+0x34>)
    355a:	47a8      	blx	r5
    355c:	7066      	strb	r6, [r4, #1]
    355e:	0021      	movs	r1, r4
    3560:	2019      	movs	r0, #25
    3562:	47a8      	blx	r5
    3564:	4b05      	ldr	r3, [pc, #20]	; (357c <rs485_pin_init+0x38>)
    3566:	2280      	movs	r2, #128	; 0x80
    3568:	0492      	lsls	r2, r2, #18
    356a:	615a      	str	r2, [r3, #20]
    356c:	2280      	movs	r2, #128	; 0x80
    356e:	0452      	lsls	r2, r2, #17
    3570:	615a      	str	r2, [r3, #20]
    3572:	bd70      	pop	{r4, r5, r6, pc}
    3574:	200000c4 	.word	0x200000c4
    3578:	00003e4d 	.word	0x00003e4d
    357c:	41004400 	.word	0x41004400

00003580 <usart_read_callback>:
    3580:	b510      	push	{r4, lr}
    3582:	4b0a      	ldr	r3, [pc, #40]	; (35ac <usart_read_callback+0x2c>)
    3584:	781b      	ldrb	r3, [r3, #0]
    3586:	2b00      	cmp	r3, #0
    3588:	d004      	beq.n	3594 <usart_read_callback+0x14>
    358a:	4909      	ldr	r1, [pc, #36]	; (35b0 <usart_read_callback+0x30>)
    358c:	4809      	ldr	r0, [pc, #36]	; (35b4 <usart_read_callback+0x34>)
    358e:	4b0a      	ldr	r3, [pc, #40]	; (35b8 <usart_read_callback+0x38>)
    3590:	4798      	blx	r3
    3592:	bd10      	pop	{r4, pc}
    3594:	4b06      	ldr	r3, [pc, #24]	; (35b0 <usart_read_callback+0x30>)
    3596:	8819      	ldrh	r1, [r3, #0]
    3598:	b2c9      	uxtb	r1, r1
    359a:	4808      	ldr	r0, [pc, #32]	; (35bc <usart_read_callback+0x3c>)
    359c:	4b08      	ldr	r3, [pc, #32]	; (35c0 <usart_read_callback+0x40>)
    359e:	4798      	blx	r3
    35a0:	4a08      	ldr	r2, [pc, #32]	; (35c4 <usart_read_callback+0x44>)
    35a2:	6813      	ldr	r3, [r2, #0]
    35a4:	3301      	adds	r3, #1
    35a6:	6013      	str	r3, [r2, #0]
    35a8:	e7ef      	b.n	358a <usart_read_callback+0xa>
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	20000350 	.word	0x20000350
    35b0:	2000098c 	.word	0x2000098c
    35b4:	2000010c 	.word	0x2000010c
    35b8:	00003bd5 	.word	0x00003bd5
    35bc:	20000140 	.word	0x20000140
    35c0:	000012fd 	.word	0x000012fd
    35c4:	200000c8 	.word	0x200000c8

000035c8 <rs485_usart_init>:
    35c8:	b570      	push	{r4, r5, r6, lr}
    35ca:	4935      	ldr	r1, [pc, #212]	; (36a0 <rs485_usart_init+0xd8>)
    35cc:	680b      	ldr	r3, [r1, #0]
    35ce:	2202      	movs	r2, #2
    35d0:	4393      	bics	r3, r2
    35d2:	600b      	str	r3, [r1, #0]
    35d4:	4a33      	ldr	r2, [pc, #204]	; (36a4 <rs485_usart_init+0xdc>)
    35d6:	2380      	movs	r3, #128	; 0x80
    35d8:	05db      	lsls	r3, r3, #23
    35da:	6013      	str	r3, [r2, #0]
    35dc:	2300      	movs	r3, #0
    35de:	6053      	str	r3, [r2, #4]
    35e0:	20ff      	movs	r0, #255	; 0xff
    35e2:	8110      	strh	r0, [r2, #8]
    35e4:	2000      	movs	r0, #0
    35e6:	7293      	strb	r3, [r2, #10]
    35e8:	72d3      	strb	r3, [r2, #11]
    35ea:	2401      	movs	r4, #1
    35ec:	2524      	movs	r5, #36	; 0x24
    35ee:	5554      	strb	r4, [r2, r5]
    35f0:	3501      	adds	r5, #1
    35f2:	5554      	strb	r4, [r2, r5]
    35f4:	3425      	adds	r4, #37	; 0x25
    35f6:	5513      	strb	r3, [r2, r4]
    35f8:	3401      	adds	r4, #1
    35fa:	5513      	strb	r3, [r2, r4]
    35fc:	6293      	str	r3, [r2, #40]	; 0x28
    35fe:	3405      	adds	r4, #5
    3600:	5513      	strb	r3, [r2, r4]
    3602:	3401      	adds	r4, #1
    3604:	5513      	strb	r3, [r2, r4]
    3606:	6153      	str	r3, [r2, #20]
    3608:	8213      	strh	r3, [r2, #16]
    360a:	76d3      	strb	r3, [r2, #27]
    360c:	7610      	strb	r0, [r2, #24]
    360e:	7710      	strb	r0, [r2, #28]
    3610:	7650      	strb	r0, [r2, #25]
    3612:	2313      	movs	r3, #19
    3614:	7693      	strb	r3, [r2, #26]
    3616:	7750      	strb	r0, [r2, #29]
    3618:	4b23      	ldr	r3, [pc, #140]	; (36a8 <rs485_usart_init+0xe0>)
    361a:	681b      	ldr	r3, [r3, #0]
    361c:	6213      	str	r3, [r2, #32]
    361e:	2390      	movs	r3, #144	; 0x90
    3620:	035b      	lsls	r3, r3, #13
    3622:	60d3      	str	r3, [r2, #12]
    3624:	4b21      	ldr	r3, [pc, #132]	; (36ac <rs485_usart_init+0xe4>)
    3626:	6313      	str	r3, [r2, #48]	; 0x30
    3628:	4b21      	ldr	r3, [pc, #132]	; (36b0 <rs485_usart_init+0xe8>)
    362a:	6353      	str	r3, [r2, #52]	; 0x34
    362c:	2301      	movs	r3, #1
    362e:	425b      	negs	r3, r3
    3630:	6393      	str	r3, [r2, #56]	; 0x38
    3632:	63d3      	str	r3, [r2, #60]	; 0x3c
    3634:	481f      	ldr	r0, [pc, #124]	; (36b4 <rs485_usart_init+0xec>)
    3636:	4b20      	ldr	r3, [pc, #128]	; (36b8 <rs485_usart_init+0xf0>)
    3638:	4798      	blx	r3
    363a:	2800      	cmp	r0, #0
    363c:	d1fd      	bne.n	363a <rs485_usart_init+0x72>
    363e:	4b1d      	ldr	r3, [pc, #116]	; (36b4 <rs485_usart_init+0xec>)
    3640:	681c      	ldr	r4, [r3, #0]
    3642:	0020      	movs	r0, r4
    3644:	4b1d      	ldr	r3, [pc, #116]	; (36bc <rs485_usart_init+0xf4>)
    3646:	4798      	blx	r3
    3648:	231f      	movs	r3, #31
    364a:	4018      	ands	r0, r3
    364c:	3b1e      	subs	r3, #30
    364e:	4083      	lsls	r3, r0
    3650:	4a1b      	ldr	r2, [pc, #108]	; (36c0 <rs485_usart_init+0xf8>)
    3652:	6013      	str	r3, [r2, #0]
    3654:	4b17      	ldr	r3, [pc, #92]	; (36b4 <rs485_usart_init+0xec>)
    3656:	681b      	ldr	r3, [r3, #0]
    3658:	69db      	ldr	r3, [r3, #28]
    365a:	2b00      	cmp	r3, #0
    365c:	d1fa      	bne.n	3654 <rs485_usart_init+0x8c>
    365e:	6823      	ldr	r3, [r4, #0]
    3660:	2202      	movs	r2, #2
    3662:	4313      	orrs	r3, r2
    3664:	6023      	str	r3, [r4, #0]
    3666:	4c13      	ldr	r4, [pc, #76]	; (36b4 <rs485_usart_init+0xec>)
    3668:	3a01      	subs	r2, #1
    366a:	4916      	ldr	r1, [pc, #88]	; (36c4 <rs485_usart_init+0xfc>)
    366c:	0020      	movs	r0, r4
    366e:	4e16      	ldr	r6, [pc, #88]	; (36c8 <rs485_usart_init+0x100>)
    3670:	47b0      	blx	r6
    3672:	2531      	movs	r5, #49	; 0x31
    3674:	5d63      	ldrb	r3, [r4, r5]
    3676:	2202      	movs	r2, #2
    3678:	4313      	orrs	r3, r2
    367a:	5563      	strb	r3, [r4, r5]
    367c:	2200      	movs	r2, #0
    367e:	4913      	ldr	r1, [pc, #76]	; (36cc <rs485_usart_init+0x104>)
    3680:	0020      	movs	r0, r4
    3682:	47b0      	blx	r6
    3684:	5d63      	ldrb	r3, [r4, r5]
    3686:	2201      	movs	r2, #1
    3688:	4313      	orrs	r3, r2
    368a:	5563      	strb	r3, [r4, r5]
    368c:	2100      	movs	r1, #0
    368e:	200c      	movs	r0, #12
    3690:	4b0f      	ldr	r3, [pc, #60]	; (36d0 <rs485_usart_init+0x108>)
    3692:	4798      	blx	r3
    3694:	490f      	ldr	r1, [pc, #60]	; (36d4 <rs485_usart_init+0x10c>)
    3696:	0020      	movs	r0, r4
    3698:	4b0f      	ldr	r3, [pc, #60]	; (36d8 <rs485_usart_init+0x110>)
    369a:	4798      	blx	r3
    369c:	bd70      	pop	{r4, r5, r6, pc}
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	42001400 	.word	0x42001400
    36a4:	200000cc 	.word	0x200000cc
    36a8:	200000c0 	.word	0x200000c0
    36ac:	00160002 	.word	0x00160002
    36b0:	00170002 	.word	0x00170002
    36b4:	2000010c 	.word	0x2000010c
    36b8:	00003a25 	.word	0x00003a25
    36bc:	00003dc9 	.word	0x00003dc9
    36c0:	e000e100 	.word	0xe000e100
    36c4:	00003581 	.word	0x00003581
    36c8:	00003bbd 	.word	0x00003bbd
    36cc:	00003729 	.word	0x00003729
    36d0:	00004495 	.word	0x00004495
    36d4:	2000098c 	.word	0x2000098c
    36d8:	00003bd5 	.word	0x00003bd5

000036dc <rs485_rts_enable>:
    36dc:	b510      	push	{r4, lr}
    36de:	2800      	cmp	r0, #0
    36e0:	d10c      	bne.n	36fc <rs485_rts_enable+0x20>
    36e2:	4b0d      	ldr	r3, [pc, #52]	; (3718 <rs485_rts_enable+0x3c>)
    36e4:	2280      	movs	r2, #128	; 0x80
    36e6:	0492      	lsls	r2, r2, #18
    36e8:	615a      	str	r2, [r3, #20]
    36ea:	2280      	movs	r2, #128	; 0x80
    36ec:	0452      	lsls	r2, r2, #17
    36ee:	615a      	str	r2, [r3, #20]
    36f0:	4b0a      	ldr	r3, [pc, #40]	; (371c <rs485_rts_enable+0x40>)
    36f2:	4798      	blx	r3
    36f4:	2200      	movs	r2, #0
    36f6:	4b0a      	ldr	r3, [pc, #40]	; (3720 <rs485_rts_enable+0x44>)
    36f8:	701a      	strb	r2, [r3, #0]
    36fa:	bd10      	pop	{r4, pc}
    36fc:	2201      	movs	r2, #1
    36fe:	4b08      	ldr	r3, [pc, #32]	; (3720 <rs485_rts_enable+0x44>)
    3700:	701a      	strb	r2, [r3, #0]
    3702:	4b05      	ldr	r3, [pc, #20]	; (3718 <rs485_rts_enable+0x3c>)
    3704:	2280      	movs	r2, #128	; 0x80
    3706:	0492      	lsls	r2, r2, #18
    3708:	619a      	str	r2, [r3, #24]
    370a:	2280      	movs	r2, #128	; 0x80
    370c:	0452      	lsls	r2, r2, #17
    370e:	619a      	str	r2, [r3, #24]
    3710:	4b04      	ldr	r3, [pc, #16]	; (3724 <rs485_rts_enable+0x48>)
    3712:	4798      	blx	r3
    3714:	e7f1      	b.n	36fa <rs485_rts_enable+0x1e>
    3716:	46c0      	nop			; (mov r8, r8)
    3718:	41004400 	.word	0x41004400
    371c:	00003495 	.word	0x00003495
    3720:	20000350 	.word	0x20000350
    3724:	00003485 	.word	0x00003485

00003728 <usart_write_callback>:
    3728:	b510      	push	{r4, lr}
    372a:	2000      	movs	r0, #0
    372c:	4b01      	ldr	r3, [pc, #4]	; (3734 <usart_write_callback+0xc>)
    372e:	4798      	blx	r3
    3730:	bd10      	pop	{r4, pc}
    3732:	46c0      	nop			; (mov r8, r8)
    3734:	000036dd 	.word	0x000036dd

00003738 <rs485_baud_rate_set>:
    3738:	2396      	movs	r3, #150	; 0x96
    373a:	021b      	lsls	r3, r3, #8
    373c:	4298      	cmp	r0, r3
    373e:	d103      	bne.n	3748 <rs485_baud_rate_set+0x10>
    3740:	4b02      	ldr	r3, [pc, #8]	; (374c <rs485_baud_rate_set+0x14>)
    3742:	6018      	str	r0, [r3, #0]
    3744:	2001      	movs	r0, #1
    3746:	4770      	bx	lr
    3748:	2000      	movs	r0, #0
    374a:	e7fc      	b.n	3746 <rs485_baud_rate_set+0xe>
    374c:	200000c0 	.word	0x200000c0

00003750 <rs485_init>:
    3750:	b510      	push	{r4, lr}
    3752:	2280      	movs	r2, #128	; 0x80
    3754:	0092      	lsls	r2, r2, #2
    3756:	4905      	ldr	r1, [pc, #20]	; (376c <rs485_init+0x1c>)
    3758:	4805      	ldr	r0, [pc, #20]	; (3770 <rs485_init+0x20>)
    375a:	4b06      	ldr	r3, [pc, #24]	; (3774 <rs485_init+0x24>)
    375c:	4798      	blx	r3
    375e:	4b06      	ldr	r3, [pc, #24]	; (3778 <rs485_init+0x28>)
    3760:	4798      	blx	r3
    3762:	4b06      	ldr	r3, [pc, #24]	; (377c <rs485_init+0x2c>)
    3764:	4798      	blx	r3
    3766:	4b06      	ldr	r3, [pc, #24]	; (3780 <rs485_init+0x30>)
    3768:	4798      	blx	r3
    376a:	bd10      	pop	{r4, pc}
    376c:	20000150 	.word	0x20000150
    3770:	20000140 	.word	0x20000140
    3774:	00001339 	.word	0x00001339
    3778:	00003515 	.word	0x00003515
    377c:	00003545 	.word	0x00003545
    3780:	000035c9 	.word	0x000035c9

00003784 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    3784:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    3786:	2201      	movs	r2, #1
    3788:	4b03      	ldr	r3, [pc, #12]	; (3798 <WDT_Handler+0x14>)
    378a:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    378c:	4b03      	ldr	r3, [pc, #12]	; (379c <WDT_Handler+0x18>)
    378e:	681b      	ldr	r3, [r3, #0]
    3790:	2b00      	cmp	r3, #0
    3792:	d000      	beq.n	3796 <WDT_Handler+0x12>
		wdt_early_warning_callback();
    3794:	4798      	blx	r3
	}
}
    3796:	bd10      	pop	{r4, pc}
    3798:	40001000 	.word	0x40001000
    379c:	20000994 	.word	0x20000994

000037a0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    37a0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    37a2:	0080      	lsls	r0, r0, #2
    37a4:	4b16      	ldr	r3, [pc, #88]	; (3800 <_tc_interrupt_handler+0x60>)
    37a6:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    37a8:	682b      	ldr	r3, [r5, #0]
    37aa:	7b9c      	ldrb	r4, [r3, #14]
			module->register_callback_mask &
    37ac:	7e2a      	ldrb	r2, [r5, #24]
			module->enable_callback_mask;
    37ae:	7e6b      	ldrb	r3, [r5, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    37b0:	4014      	ands	r4, r2
    37b2:	401c      	ands	r4, r3

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    37b4:	07e3      	lsls	r3, r4, #31
    37b6:	d406      	bmi.n	37c6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    37b8:	07a3      	lsls	r3, r4, #30
    37ba:	d40b      	bmi.n	37d4 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    37bc:	06e3      	lsls	r3, r4, #27
    37be:	d410      	bmi.n	37e2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    37c0:	06a3      	lsls	r3, r4, #26
    37c2:	d415      	bmi.n	37f0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    37c4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    37c6:	0028      	movs	r0, r5
    37c8:	68ab      	ldr	r3, [r5, #8]
    37ca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    37cc:	2301      	movs	r3, #1
    37ce:	682a      	ldr	r2, [r5, #0]
    37d0:	7393      	strb	r3, [r2, #14]
    37d2:	e7f1      	b.n	37b8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    37d4:	0028      	movs	r0, r5
    37d6:	68eb      	ldr	r3, [r5, #12]
    37d8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    37da:	2302      	movs	r3, #2
    37dc:	682a      	ldr	r2, [r5, #0]
    37de:	7393      	strb	r3, [r2, #14]
    37e0:	e7ec      	b.n	37bc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    37e2:	0028      	movs	r0, r5
    37e4:	692b      	ldr	r3, [r5, #16]
    37e6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    37e8:	2310      	movs	r3, #16
    37ea:	682a      	ldr	r2, [r5, #0]
    37ec:	7393      	strb	r3, [r2, #14]
    37ee:	e7e7      	b.n	37c0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    37f0:	0028      	movs	r0, r5
    37f2:	696b      	ldr	r3, [r5, #20]
    37f4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    37f6:	682b      	ldr	r3, [r5, #0]
    37f8:	2220      	movs	r2, #32
    37fa:	739a      	strb	r2, [r3, #14]
}
    37fc:	e7e2      	b.n	37c4 <_tc_interrupt_handler+0x24>
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	20000998 	.word	0x20000998

00003804 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3804:	b510      	push	{r4, lr}
    3806:	2000      	movs	r0, #0
    3808:	4b01      	ldr	r3, [pc, #4]	; (3810 <TC3_Handler+0xc>)
    380a:	4798      	blx	r3
    380c:	bd10      	pop	{r4, pc}
    380e:	46c0      	nop			; (mov r8, r8)
    3810:	000037a1 	.word	0x000037a1

00003814 <TC4_Handler>:
    3814:	b510      	push	{r4, lr}
    3816:	2001      	movs	r0, #1
    3818:	4b01      	ldr	r3, [pc, #4]	; (3820 <TC4_Handler+0xc>)
    381a:	4798      	blx	r3
    381c:	bd10      	pop	{r4, pc}
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	000037a1 	.word	0x000037a1

00003824 <TC5_Handler>:
    3824:	b510      	push	{r4, lr}
    3826:	2002      	movs	r0, #2
    3828:	4b01      	ldr	r3, [pc, #4]	; (3830 <TC5_Handler+0xc>)
    382a:	4798      	blx	r3
    382c:	bd10      	pop	{r4, pc}
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	000037a1 	.word	0x000037a1

00003834 <TC6_Handler>:
    3834:	b510      	push	{r4, lr}
    3836:	2003      	movs	r0, #3
    3838:	4b01      	ldr	r3, [pc, #4]	; (3840 <TC6_Handler+0xc>)
    383a:	4798      	blx	r3
    383c:	bd10      	pop	{r4, pc}
    383e:	46c0      	nop			; (mov r8, r8)
    3840:	000037a1 	.word	0x000037a1

00003844 <TC7_Handler>:
    3844:	b510      	push	{r4, lr}
    3846:	2004      	movs	r0, #4
    3848:	4b01      	ldr	r3, [pc, #4]	; (3850 <TC7_Handler+0xc>)
    384a:	4798      	blx	r3
    384c:	bd10      	pop	{r4, pc}
    384e:	46c0      	nop			; (mov r8, r8)
    3850:	000037a1 	.word	0x000037a1

00003854 <_usart_set_config>:
    3854:	b5f0      	push	{r4, r5, r6, r7, lr}
    3856:	46de      	mov	lr, fp
    3858:	4657      	mov	r7, sl
    385a:	464e      	mov	r6, r9
    385c:	4645      	mov	r5, r8
    385e:	b5e0      	push	{r5, r6, r7, lr}
    3860:	b087      	sub	sp, #28
    3862:	0005      	movs	r5, r0
    3864:	000c      	movs	r4, r1
    3866:	6806      	ldr	r6, [r0, #0]
    3868:	0030      	movs	r0, r6
    386a:	4b69      	ldr	r3, [pc, #420]	; (3a10 <_usart_set_config+0x1bc>)
    386c:	4798      	blx	r3
    386e:	3014      	adds	r0, #20
    3870:	2200      	movs	r2, #0
    3872:	230e      	movs	r3, #14
    3874:	a902      	add	r1, sp, #8
    3876:	468c      	mov	ip, r1
    3878:	4463      	add	r3, ip
    387a:	801a      	strh	r2, [r3, #0]
    387c:	8a22      	ldrh	r2, [r4, #16]
    387e:	2380      	movs	r3, #128	; 0x80
    3880:	01db      	lsls	r3, r3, #7
    3882:	429a      	cmp	r2, r3
    3884:	d03b      	beq.n	38fe <_usart_set_config+0xaa>
    3886:	d90c      	bls.n	38a2 <_usart_set_config+0x4e>
    3888:	23c0      	movs	r3, #192	; 0xc0
    388a:	01db      	lsls	r3, r3, #7
    388c:	429a      	cmp	r2, r3
    388e:	d031      	beq.n	38f4 <_usart_set_config+0xa0>
    3890:	2380      	movs	r3, #128	; 0x80
    3892:	021b      	lsls	r3, r3, #8
    3894:	429a      	cmp	r2, r3
    3896:	d10d      	bne.n	38b4 <_usart_set_config+0x60>
    3898:	2303      	movs	r3, #3
    389a:	4698      	mov	r8, r3
    389c:	2300      	movs	r3, #0
    389e:	469a      	mov	sl, r3
    38a0:	e00c      	b.n	38bc <_usart_set_config+0x68>
    38a2:	2380      	movs	r3, #128	; 0x80
    38a4:	019b      	lsls	r3, r3, #6
    38a6:	429a      	cmp	r2, r3
    38a8:	d104      	bne.n	38b4 <_usart_set_config+0x60>
    38aa:	2310      	movs	r3, #16
    38ac:	4698      	mov	r8, r3
    38ae:	3b0f      	subs	r3, #15
    38b0:	469a      	mov	sl, r3
    38b2:	e003      	b.n	38bc <_usart_set_config+0x68>
    38b4:	2310      	movs	r3, #16
    38b6:	4698      	mov	r8, r3
    38b8:	2300      	movs	r3, #0
    38ba:	469a      	mov	sl, r3
    38bc:	6823      	ldr	r3, [r4, #0]
    38be:	68e1      	ldr	r1, [r4, #12]
    38c0:	430b      	orrs	r3, r1
    38c2:	6961      	ldr	r1, [r4, #20]
    38c4:	430b      	orrs	r3, r1
    38c6:	4313      	orrs	r3, r2
    38c8:	7e22      	ldrb	r2, [r4, #24]
    38ca:	0212      	lsls	r2, r2, #8
    38cc:	4313      	orrs	r3, r2
    38ce:	2226      	movs	r2, #38	; 0x26
    38d0:	5ca2      	ldrb	r2, [r4, r2]
    38d2:	0752      	lsls	r2, r2, #29
    38d4:	4313      	orrs	r3, r2
    38d6:	4699      	mov	r9, r3
    38d8:	6862      	ldr	r2, [r4, #4]
    38da:	9203      	str	r2, [sp, #12]
    38dc:	2a00      	cmp	r2, #0
    38de:	d021      	beq.n	3924 <_usart_set_config+0xd0>
    38e0:	2380      	movs	r3, #128	; 0x80
    38e2:	055b      	lsls	r3, r3, #21
    38e4:	429a      	cmp	r2, r3
    38e6:	d13e      	bne.n	3966 <_usart_set_config+0x112>
    38e8:	2327      	movs	r3, #39	; 0x27
    38ea:	5ce3      	ldrb	r3, [r4, r3]
    38ec:	2b00      	cmp	r3, #0
    38ee:	d00b      	beq.n	3908 <_usart_set_config+0xb4>
    38f0:	2000      	movs	r0, #0
    38f2:	e039      	b.n	3968 <_usart_set_config+0x114>
    38f4:	2308      	movs	r3, #8
    38f6:	4698      	mov	r8, r3
    38f8:	3b07      	subs	r3, #7
    38fa:	469a      	mov	sl, r3
    38fc:	e7de      	b.n	38bc <_usart_set_config+0x68>
    38fe:	2308      	movs	r3, #8
    3900:	4698      	mov	r8, r3
    3902:	2300      	movs	r3, #0
    3904:	469a      	mov	sl, r3
    3906:	e7d9      	b.n	38bc <_usart_set_config+0x68>
    3908:	6a23      	ldr	r3, [r4, #32]
    390a:	4698      	mov	r8, r3
    390c:	b2c0      	uxtb	r0, r0
    390e:	4b41      	ldr	r3, [pc, #260]	; (3a14 <_usart_set_config+0x1c0>)
    3910:	4798      	blx	r3
    3912:	0001      	movs	r1, r0
    3914:	220e      	movs	r2, #14
    3916:	ab02      	add	r3, sp, #8
    3918:	469c      	mov	ip, r3
    391a:	4462      	add	r2, ip
    391c:	4640      	mov	r0, r8
    391e:	4b3e      	ldr	r3, [pc, #248]	; (3a18 <_usart_set_config+0x1c4>)
    3920:	4798      	blx	r3
    3922:	e021      	b.n	3968 <_usart_set_config+0x114>
    3924:	2327      	movs	r3, #39	; 0x27
    3926:	5ce3      	ldrb	r3, [r4, r3]
    3928:	2b00      	cmp	r3, #0
    392a:	d00b      	beq.n	3944 <_usart_set_config+0xf0>
    392c:	4643      	mov	r3, r8
    392e:	9300      	str	r3, [sp, #0]
    3930:	4653      	mov	r3, sl
    3932:	220e      	movs	r2, #14
    3934:	a902      	add	r1, sp, #8
    3936:	468c      	mov	ip, r1
    3938:	4462      	add	r2, ip
    393a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    393c:	6a20      	ldr	r0, [r4, #32]
    393e:	4f37      	ldr	r7, [pc, #220]	; (3a1c <_usart_set_config+0x1c8>)
    3940:	47b8      	blx	r7
    3942:	e011      	b.n	3968 <_usart_set_config+0x114>
    3944:	6a23      	ldr	r3, [r4, #32]
    3946:	469b      	mov	fp, r3
    3948:	b2c0      	uxtb	r0, r0
    394a:	4b32      	ldr	r3, [pc, #200]	; (3a14 <_usart_set_config+0x1c0>)
    394c:	4798      	blx	r3
    394e:	0001      	movs	r1, r0
    3950:	4643      	mov	r3, r8
    3952:	9300      	str	r3, [sp, #0]
    3954:	4653      	mov	r3, sl
    3956:	220e      	movs	r2, #14
    3958:	a802      	add	r0, sp, #8
    395a:	4684      	mov	ip, r0
    395c:	4462      	add	r2, ip
    395e:	4658      	mov	r0, fp
    3960:	4f2e      	ldr	r7, [pc, #184]	; (3a1c <_usart_set_config+0x1c8>)
    3962:	47b8      	blx	r7
    3964:	e000      	b.n	3968 <_usart_set_config+0x114>
    3966:	2000      	movs	r0, #0
    3968:	2800      	cmp	r0, #0
    396a:	d142      	bne.n	39f2 <_usart_set_config+0x19e>
    396c:	7e63      	ldrb	r3, [r4, #25]
    396e:	2b00      	cmp	r3, #0
    3970:	d001      	beq.n	3976 <_usart_set_config+0x122>
    3972:	7ea3      	ldrb	r3, [r4, #26]
    3974:	73b3      	strb	r3, [r6, #14]
    3976:	230e      	movs	r3, #14
    3978:	aa02      	add	r2, sp, #8
    397a:	4694      	mov	ip, r2
    397c:	4463      	add	r3, ip
    397e:	881b      	ldrh	r3, [r3, #0]
    3980:	81b3      	strh	r3, [r6, #12]
    3982:	464b      	mov	r3, r9
    3984:	9a03      	ldr	r2, [sp, #12]
    3986:	4313      	orrs	r3, r2
    3988:	2227      	movs	r2, #39	; 0x27
    398a:	5ca2      	ldrb	r2, [r4, r2]
    398c:	2a00      	cmp	r2, #0
    398e:	d101      	bne.n	3994 <_usart_set_config+0x140>
    3990:	3204      	adds	r2, #4
    3992:	4313      	orrs	r3, r2
    3994:	7e61      	ldrb	r1, [r4, #25]
    3996:	0289      	lsls	r1, r1, #10
    3998:	7f22      	ldrb	r2, [r4, #28]
    399a:	0252      	lsls	r2, r2, #9
    399c:	4311      	orrs	r1, r2
    399e:	7f62      	ldrb	r2, [r4, #29]
    39a0:	0212      	lsls	r2, r2, #8
    39a2:	4311      	orrs	r1, r2
    39a4:	2224      	movs	r2, #36	; 0x24
    39a6:	5ca2      	ldrb	r2, [r4, r2]
    39a8:	0452      	lsls	r2, r2, #17
    39aa:	4311      	orrs	r1, r2
    39ac:	2225      	movs	r2, #37	; 0x25
    39ae:	5ca2      	ldrb	r2, [r4, r2]
    39b0:	0412      	lsls	r2, r2, #16
    39b2:	4311      	orrs	r1, r2
    39b4:	7aa2      	ldrb	r2, [r4, #10]
    39b6:	4311      	orrs	r1, r2
    39b8:	7ae2      	ldrb	r2, [r4, #11]
    39ba:	4311      	orrs	r1, r2
    39bc:	8922      	ldrh	r2, [r4, #8]
    39be:	2aff      	cmp	r2, #255	; 0xff
    39c0:	d01e      	beq.n	3a00 <_usart_set_config+0x1ac>
    39c2:	2780      	movs	r7, #128	; 0x80
    39c4:	047f      	lsls	r7, r7, #17
    39c6:	433b      	orrs	r3, r7
    39c8:	4311      	orrs	r1, r2
    39ca:	222c      	movs	r2, #44	; 0x2c
    39cc:	5ca2      	ldrb	r2, [r4, r2]
    39ce:	2a00      	cmp	r2, #0
    39d0:	d103      	bne.n	39da <_usart_set_config+0x186>
    39d2:	4a13      	ldr	r2, [pc, #76]	; (3a20 <_usart_set_config+0x1cc>)
    39d4:	7892      	ldrb	r2, [r2, #2]
    39d6:	0792      	lsls	r2, r2, #30
    39d8:	d501      	bpl.n	39de <_usart_set_config+0x18a>
    39da:	2280      	movs	r2, #128	; 0x80
    39dc:	4313      	orrs	r3, r2
    39de:	682a      	ldr	r2, [r5, #0]
    39e0:	69d2      	ldr	r2, [r2, #28]
    39e2:	2a00      	cmp	r2, #0
    39e4:	d1fb      	bne.n	39de <_usart_set_config+0x18a>
    39e6:	6071      	str	r1, [r6, #4]
    39e8:	682a      	ldr	r2, [r5, #0]
    39ea:	69d2      	ldr	r2, [r2, #28]
    39ec:	2a00      	cmp	r2, #0
    39ee:	d1fb      	bne.n	39e8 <_usart_set_config+0x194>
    39f0:	6033      	str	r3, [r6, #0]
    39f2:	b007      	add	sp, #28
    39f4:	bc3c      	pop	{r2, r3, r4, r5}
    39f6:	4690      	mov	r8, r2
    39f8:	4699      	mov	r9, r3
    39fa:	46a2      	mov	sl, r4
    39fc:	46ab      	mov	fp, r5
    39fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a00:	7ee2      	ldrb	r2, [r4, #27]
    3a02:	2a00      	cmp	r2, #0
    3a04:	d0e1      	beq.n	39ca <_usart_set_config+0x176>
    3a06:	2280      	movs	r2, #128	; 0x80
    3a08:	04d2      	lsls	r2, r2, #19
    3a0a:	4313      	orrs	r3, r2
    3a0c:	e7dd      	b.n	39ca <_usart_set_config+0x176>
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	00000a21 	.word	0x00000a21
    3a14:	00004461 	.word	0x00004461
    3a18:	00000795 	.word	0x00000795
    3a1c:	000007c1 	.word	0x000007c1
    3a20:	41002000 	.word	0x41002000

00003a24 <usart_init>:
    3a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a26:	b089      	sub	sp, #36	; 0x24
    3a28:	0006      	movs	r6, r0
    3a2a:	000c      	movs	r4, r1
    3a2c:	0017      	movs	r7, r2
    3a2e:	6031      	str	r1, [r6, #0]
    3a30:	0008      	movs	r0, r1
    3a32:	4b42      	ldr	r3, [pc, #264]	; (3b3c <usart_init+0x118>)
    3a34:	4798      	blx	r3
    3a36:	1c82      	adds	r2, r0, #2
    3a38:	3014      	adds	r0, #20
    3a3a:	6823      	ldr	r3, [r4, #0]
    3a3c:	07db      	lsls	r3, r3, #31
    3a3e:	d503      	bpl.n	3a48 <usart_init+0x24>
    3a40:	2505      	movs	r5, #5
    3a42:	0028      	movs	r0, r5
    3a44:	b009      	add	sp, #36	; 0x24
    3a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a48:	6823      	ldr	r3, [r4, #0]
    3a4a:	079b      	lsls	r3, r3, #30
    3a4c:	d501      	bpl.n	3a52 <usart_init+0x2e>
    3a4e:	251c      	movs	r5, #28
    3a50:	e7f7      	b.n	3a42 <usart_init+0x1e>
    3a52:	2301      	movs	r3, #1
    3a54:	4093      	lsls	r3, r2
    3a56:	4a3a      	ldr	r2, [pc, #232]	; (3b40 <usart_init+0x11c>)
    3a58:	6a11      	ldr	r1, [r2, #32]
    3a5a:	430b      	orrs	r3, r1
    3a5c:	6213      	str	r3, [r2, #32]
    3a5e:	252d      	movs	r5, #45	; 0x2d
    3a60:	5d7b      	ldrb	r3, [r7, r5]
    3a62:	a907      	add	r1, sp, #28
    3a64:	700b      	strb	r3, [r1, #0]
    3a66:	b2c3      	uxtb	r3, r0
    3a68:	9301      	str	r3, [sp, #4]
    3a6a:	0018      	movs	r0, r3
    3a6c:	4b35      	ldr	r3, [pc, #212]	; (3b44 <usart_init+0x120>)
    3a6e:	4798      	blx	r3
    3a70:	9801      	ldr	r0, [sp, #4]
    3a72:	4b35      	ldr	r3, [pc, #212]	; (3b48 <usart_init+0x124>)
    3a74:	4798      	blx	r3
    3a76:	5d78      	ldrb	r0, [r7, r5]
    3a78:	2100      	movs	r1, #0
    3a7a:	4b34      	ldr	r3, [pc, #208]	; (3b4c <usart_init+0x128>)
    3a7c:	4798      	blx	r3
    3a7e:	7afb      	ldrb	r3, [r7, #11]
    3a80:	7173      	strb	r3, [r6, #5]
    3a82:	2324      	movs	r3, #36	; 0x24
    3a84:	5cfb      	ldrb	r3, [r7, r3]
    3a86:	71b3      	strb	r3, [r6, #6]
    3a88:	2325      	movs	r3, #37	; 0x25
    3a8a:	5cfb      	ldrb	r3, [r7, r3]
    3a8c:	71f3      	strb	r3, [r6, #7]
    3a8e:	7efb      	ldrb	r3, [r7, #27]
    3a90:	7233      	strb	r3, [r6, #8]
    3a92:	7f3b      	ldrb	r3, [r7, #28]
    3a94:	7273      	strb	r3, [r6, #9]
    3a96:	0039      	movs	r1, r7
    3a98:	0030      	movs	r0, r6
    3a9a:	4b2d      	ldr	r3, [pc, #180]	; (3b50 <usart_init+0x12c>)
    3a9c:	4798      	blx	r3
    3a9e:	1e05      	subs	r5, r0, #0
    3aa0:	d1cf      	bne.n	3a42 <usart_init+0x1e>
    3aa2:	ab06      	add	r3, sp, #24
    3aa4:	2280      	movs	r2, #128	; 0x80
    3aa6:	701a      	strb	r2, [r3, #0]
    3aa8:	2200      	movs	r2, #0
    3aaa:	705a      	strb	r2, [r3, #1]
    3aac:	70da      	strb	r2, [r3, #3]
    3aae:	709a      	strb	r2, [r3, #2]
    3ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3ab2:	9302      	str	r3, [sp, #8]
    3ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ab6:	9303      	str	r3, [sp, #12]
    3ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3aba:	9304      	str	r3, [sp, #16]
    3abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3abe:	9301      	str	r3, [sp, #4]
    3ac0:	9305      	str	r3, [sp, #20]
    3ac2:	2700      	movs	r7, #0
    3ac4:	e006      	b.n	3ad4 <usart_init+0xb0>
    3ac6:	0039      	movs	r1, r7
    3ac8:	0020      	movs	r0, r4
    3aca:	4b22      	ldr	r3, [pc, #136]	; (3b54 <usart_init+0x130>)
    3acc:	4798      	blx	r3
    3ace:	e008      	b.n	3ae2 <usart_init+0xbe>
    3ad0:	3701      	adds	r7, #1
    3ad2:	b2ff      	uxtb	r7, r7
    3ad4:	2f03      	cmp	r7, #3
    3ad6:	d80d      	bhi.n	3af4 <usart_init+0xd0>
    3ad8:	00bb      	lsls	r3, r7, #2
    3ada:	aa02      	add	r2, sp, #8
    3adc:	5898      	ldr	r0, [r3, r2]
    3ade:	2800      	cmp	r0, #0
    3ae0:	d0f1      	beq.n	3ac6 <usart_init+0xa2>
    3ae2:	1c43      	adds	r3, r0, #1
    3ae4:	d0f4      	beq.n	3ad0 <usart_init+0xac>
    3ae6:	a906      	add	r1, sp, #24
    3ae8:	7008      	strb	r0, [r1, #0]
    3aea:	0c00      	lsrs	r0, r0, #16
    3aec:	b2c0      	uxtb	r0, r0
    3aee:	4b1a      	ldr	r3, [pc, #104]	; (3b58 <usart_init+0x134>)
    3af0:	4798      	blx	r3
    3af2:	e7ed      	b.n	3ad0 <usart_init+0xac>
    3af4:	2200      	movs	r2, #0
    3af6:	2a05      	cmp	r2, #5
    3af8:	d806      	bhi.n	3b08 <usart_init+0xe4>
    3afa:	1c93      	adds	r3, r2, #2
    3afc:	009b      	lsls	r3, r3, #2
    3afe:	18f3      	adds	r3, r6, r3
    3b00:	2100      	movs	r1, #0
    3b02:	6059      	str	r1, [r3, #4]
    3b04:	3201      	adds	r2, #1
    3b06:	e7f6      	b.n	3af6 <usart_init+0xd2>
    3b08:	2200      	movs	r2, #0
    3b0a:	62b2      	str	r2, [r6, #40]	; 0x28
    3b0c:	6272      	str	r2, [r6, #36]	; 0x24
    3b0e:	2300      	movs	r3, #0
    3b10:	85f2      	strh	r2, [r6, #46]	; 0x2e
    3b12:	85b2      	strh	r2, [r6, #44]	; 0x2c
    3b14:	3230      	adds	r2, #48	; 0x30
    3b16:	54b3      	strb	r3, [r6, r2]
    3b18:	3201      	adds	r2, #1
    3b1a:	54b3      	strb	r3, [r6, r2]
    3b1c:	3201      	adds	r2, #1
    3b1e:	54b3      	strb	r3, [r6, r2]
    3b20:	3201      	adds	r2, #1
    3b22:	54b3      	strb	r3, [r6, r2]
    3b24:	6830      	ldr	r0, [r6, #0]
    3b26:	4b05      	ldr	r3, [pc, #20]	; (3b3c <usart_init+0x118>)
    3b28:	4798      	blx	r3
    3b2a:	0004      	movs	r4, r0
    3b2c:	490b      	ldr	r1, [pc, #44]	; (3b5c <usart_init+0x138>)
    3b2e:	4b0c      	ldr	r3, [pc, #48]	; (3b60 <usart_init+0x13c>)
    3b30:	4798      	blx	r3
    3b32:	00a4      	lsls	r4, r4, #2
    3b34:	4b0b      	ldr	r3, [pc, #44]	; (3b64 <usart_init+0x140>)
    3b36:	50e6      	str	r6, [r4, r3]
    3b38:	e783      	b.n	3a42 <usart_init+0x1e>
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	00000a21 	.word	0x00000a21
    3b40:	40000400 	.word	0x40000400
    3b44:	00004445 	.word	0x00004445
    3b48:	000043bd 	.word	0x000043bd
    3b4c:	0000085d 	.word	0x0000085d
    3b50:	00003855 	.word	0x00003855
    3b54:	000008a9 	.word	0x000008a9
    3b58:	0000457d 	.word	0x0000457d
    3b5c:	00003be5 	.word	0x00003be5
    3b60:	00003d89 	.word	0x00003d89
    3b64:	200009ac 	.word	0x200009ac

00003b68 <_usart_read_buffer>:
    3b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b6a:	0004      	movs	r4, r0
    3b6c:	000d      	movs	r5, r1
    3b6e:	0016      	movs	r6, r2
    3b70:	6807      	ldr	r7, [r0, #0]
    3b72:	4b10      	ldr	r3, [pc, #64]	; (3bb4 <_usart_read_buffer+0x4c>)
    3b74:	4798      	blx	r3
    3b76:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    3b78:	b29b      	uxth	r3, r3
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d003      	beq.n	3b86 <_usart_read_buffer+0x1e>
    3b7e:	4b0e      	ldr	r3, [pc, #56]	; (3bb8 <_usart_read_buffer+0x50>)
    3b80:	4798      	blx	r3
    3b82:	2005      	movs	r0, #5
    3b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b86:	85a6      	strh	r6, [r4, #44]	; 0x2c
    3b88:	4b0b      	ldr	r3, [pc, #44]	; (3bb8 <_usart_read_buffer+0x50>)
    3b8a:	4798      	blx	r3
    3b8c:	6265      	str	r5, [r4, #36]	; 0x24
    3b8e:	2205      	movs	r2, #5
    3b90:	2332      	movs	r3, #50	; 0x32
    3b92:	54e2      	strb	r2, [r4, r3]
    3b94:	3b2e      	subs	r3, #46	; 0x2e
    3b96:	75bb      	strb	r3, [r7, #22]
    3b98:	7a23      	ldrb	r3, [r4, #8]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d001      	beq.n	3ba2 <_usart_read_buffer+0x3a>
    3b9e:	2320      	movs	r3, #32
    3ba0:	75bb      	strb	r3, [r7, #22]
    3ba2:	7a63      	ldrb	r3, [r4, #9]
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d003      	beq.n	3bb0 <_usart_read_buffer+0x48>
    3ba8:	2308      	movs	r3, #8
    3baa:	75bb      	strb	r3, [r7, #22]
    3bac:	2000      	movs	r0, #0
    3bae:	e7e9      	b.n	3b84 <_usart_read_buffer+0x1c>
    3bb0:	2000      	movs	r0, #0
    3bb2:	e7e7      	b.n	3b84 <_usart_read_buffer+0x1c>
    3bb4:	00003e75 	.word	0x00003e75
    3bb8:	00003eb5 	.word	0x00003eb5

00003bbc <usart_register_callback>:
    3bbc:	1c93      	adds	r3, r2, #2
    3bbe:	009b      	lsls	r3, r3, #2
    3bc0:	18c3      	adds	r3, r0, r3
    3bc2:	6059      	str	r1, [r3, #4]
    3bc4:	2301      	movs	r3, #1
    3bc6:	4093      	lsls	r3, r2
    3bc8:	001a      	movs	r2, r3
    3bca:	2130      	movs	r1, #48	; 0x30
    3bcc:	5c43      	ldrb	r3, [r0, r1]
    3bce:	4313      	orrs	r3, r2
    3bd0:	5443      	strb	r3, [r0, r1]
    3bd2:	4770      	bx	lr

00003bd4 <usart_read_job>:
    3bd4:	b510      	push	{r4, lr}
    3bd6:	2201      	movs	r2, #1
    3bd8:	4b01      	ldr	r3, [pc, #4]	; (3be0 <usart_read_job+0xc>)
    3bda:	4798      	blx	r3
    3bdc:	bd10      	pop	{r4, pc}
    3bde:	46c0      	nop			; (mov r8, r8)
    3be0:	00003b69 	.word	0x00003b69

00003be4 <_usart_interrupt_handler>:
    3be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3be6:	46c6      	mov	lr, r8
    3be8:	b500      	push	{lr}
    3bea:	0080      	lsls	r0, r0, #2
    3bec:	4b64      	ldr	r3, [pc, #400]	; (3d80 <_usart_interrupt_handler+0x19c>)
    3bee:	58c5      	ldr	r5, [r0, r3]
    3bf0:	682c      	ldr	r4, [r5, #0]
    3bf2:	69e3      	ldr	r3, [r4, #28]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d1fc      	bne.n	3bf2 <_usart_interrupt_handler+0xe>
    3bf8:	7e23      	ldrb	r3, [r4, #24]
    3bfa:	7da6      	ldrb	r6, [r4, #22]
    3bfc:	401e      	ands	r6, r3
    3bfe:	2330      	movs	r3, #48	; 0x30
    3c00:	5ceb      	ldrb	r3, [r5, r3]
    3c02:	2231      	movs	r2, #49	; 0x31
    3c04:	5caf      	ldrb	r7, [r5, r2]
    3c06:	401f      	ands	r7, r3
    3c08:	07f3      	lsls	r3, r6, #31
    3c0a:	d525      	bpl.n	3c58 <_usart_interrupt_handler+0x74>
    3c0c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3c0e:	b29b      	uxth	r3, r3
    3c10:	2b00      	cmp	r3, #0
    3c12:	d01f      	beq.n	3c54 <_usart_interrupt_handler+0x70>
    3c14:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    3c16:	780a      	ldrb	r2, [r1, #0]
    3c18:	b2d2      	uxtb	r2, r2
    3c1a:	b293      	uxth	r3, r2
    3c1c:	4698      	mov	r8, r3
    3c1e:	1c48      	adds	r0, r1, #1
    3c20:	62a8      	str	r0, [r5, #40]	; 0x28
    3c22:	796b      	ldrb	r3, [r5, #5]
    3c24:	2b01      	cmp	r3, #1
    3c26:	d00e      	beq.n	3c46 <_usart_interrupt_handler+0x62>
    3c28:	4643      	mov	r3, r8
    3c2a:	05db      	lsls	r3, r3, #23
    3c2c:	0ddb      	lsrs	r3, r3, #23
    3c2e:	8523      	strh	r3, [r4, #40]	; 0x28
    3c30:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3c32:	3b01      	subs	r3, #1
    3c34:	b29b      	uxth	r3, r3
    3c36:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d10d      	bne.n	3c58 <_usart_interrupt_handler+0x74>
    3c3c:	3301      	adds	r3, #1
    3c3e:	7523      	strb	r3, [r4, #20]
    3c40:	3301      	adds	r3, #1
    3c42:	75a3      	strb	r3, [r4, #22]
    3c44:	e008      	b.n	3c58 <_usart_interrupt_handler+0x74>
    3c46:	784b      	ldrb	r3, [r1, #1]
    3c48:	021b      	lsls	r3, r3, #8
    3c4a:	4313      	orrs	r3, r2
    3c4c:	4698      	mov	r8, r3
    3c4e:	1c88      	adds	r0, r1, #2
    3c50:	62a8      	str	r0, [r5, #40]	; 0x28
    3c52:	e7e9      	b.n	3c28 <_usart_interrupt_handler+0x44>
    3c54:	2301      	movs	r3, #1
    3c56:	7523      	strb	r3, [r4, #20]
    3c58:	07b3      	lsls	r3, r6, #30
    3c5a:	d506      	bpl.n	3c6a <_usart_interrupt_handler+0x86>
    3c5c:	2302      	movs	r3, #2
    3c5e:	7523      	strb	r3, [r4, #20]
    3c60:	2200      	movs	r2, #0
    3c62:	3331      	adds	r3, #49	; 0x31
    3c64:	54ea      	strb	r2, [r5, r3]
    3c66:	07fb      	lsls	r3, r7, #31
    3c68:	d41c      	bmi.n	3ca4 <_usart_interrupt_handler+0xc0>
    3c6a:	0773      	lsls	r3, r6, #29
    3c6c:	d564      	bpl.n	3d38 <_usart_interrupt_handler+0x154>
    3c6e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3c70:	b29b      	uxth	r3, r3
    3c72:	2b00      	cmp	r3, #0
    3c74:	d05e      	beq.n	3d34 <_usart_interrupt_handler+0x150>
    3c76:	8b62      	ldrh	r2, [r4, #26]
    3c78:	b2d2      	uxtb	r2, r2
    3c7a:	233f      	movs	r3, #63	; 0x3f
    3c7c:	4013      	ands	r3, r2
    3c7e:	0711      	lsls	r1, r2, #28
    3c80:	d501      	bpl.n	3c86 <_usart_interrupt_handler+0xa2>
    3c82:	2337      	movs	r3, #55	; 0x37
    3c84:	4013      	ands	r3, r2
    3c86:	2b00      	cmp	r3, #0
    3c88:	d031      	beq.n	3cee <_usart_interrupt_handler+0x10a>
    3c8a:	079a      	lsls	r2, r3, #30
    3c8c:	d50e      	bpl.n	3cac <_usart_interrupt_handler+0xc8>
    3c8e:	221a      	movs	r2, #26
    3c90:	2332      	movs	r3, #50	; 0x32
    3c92:	54ea      	strb	r2, [r5, r3]
    3c94:	3b30      	subs	r3, #48	; 0x30
    3c96:	8363      	strh	r3, [r4, #26]
    3c98:	077b      	lsls	r3, r7, #29
    3c9a:	d54d      	bpl.n	3d38 <_usart_interrupt_handler+0x154>
    3c9c:	0028      	movs	r0, r5
    3c9e:	696b      	ldr	r3, [r5, #20]
    3ca0:	4798      	blx	r3
    3ca2:	e049      	b.n	3d38 <_usart_interrupt_handler+0x154>
    3ca4:	0028      	movs	r0, r5
    3ca6:	68eb      	ldr	r3, [r5, #12]
    3ca8:	4798      	blx	r3
    3caa:	e7de      	b.n	3c6a <_usart_interrupt_handler+0x86>
    3cac:	075a      	lsls	r2, r3, #29
    3cae:	d505      	bpl.n	3cbc <_usart_interrupt_handler+0xd8>
    3cb0:	221e      	movs	r2, #30
    3cb2:	2332      	movs	r3, #50	; 0x32
    3cb4:	54ea      	strb	r2, [r5, r3]
    3cb6:	3b2e      	subs	r3, #46	; 0x2e
    3cb8:	8363      	strh	r3, [r4, #26]
    3cba:	e7ed      	b.n	3c98 <_usart_interrupt_handler+0xb4>
    3cbc:	07da      	lsls	r2, r3, #31
    3cbe:	d505      	bpl.n	3ccc <_usart_interrupt_handler+0xe8>
    3cc0:	2213      	movs	r2, #19
    3cc2:	2332      	movs	r3, #50	; 0x32
    3cc4:	54ea      	strb	r2, [r5, r3]
    3cc6:	3b31      	subs	r3, #49	; 0x31
    3cc8:	8363      	strh	r3, [r4, #26]
    3cca:	e7e5      	b.n	3c98 <_usart_interrupt_handler+0xb4>
    3ccc:	06da      	lsls	r2, r3, #27
    3cce:	d505      	bpl.n	3cdc <_usart_interrupt_handler+0xf8>
    3cd0:	2242      	movs	r2, #66	; 0x42
    3cd2:	2332      	movs	r3, #50	; 0x32
    3cd4:	54ea      	strb	r2, [r5, r3]
    3cd6:	3b22      	subs	r3, #34	; 0x22
    3cd8:	8363      	strh	r3, [r4, #26]
    3cda:	e7dd      	b.n	3c98 <_usart_interrupt_handler+0xb4>
    3cdc:	2220      	movs	r2, #32
    3cde:	421a      	tst	r2, r3
    3ce0:	d0da      	beq.n	3c98 <_usart_interrupt_handler+0xb4>
    3ce2:	3221      	adds	r2, #33	; 0x21
    3ce4:	2332      	movs	r3, #50	; 0x32
    3ce6:	54ea      	strb	r2, [r5, r3]
    3ce8:	3b12      	subs	r3, #18
    3cea:	8363      	strh	r3, [r4, #26]
    3cec:	e7d4      	b.n	3c98 <_usart_interrupt_handler+0xb4>
    3cee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3cf0:	05db      	lsls	r3, r3, #23
    3cf2:	0ddb      	lsrs	r3, r3, #23
    3cf4:	b2da      	uxtb	r2, r3
    3cf6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    3cf8:	700a      	strb	r2, [r1, #0]
    3cfa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3cfc:	1c51      	adds	r1, r2, #1
    3cfe:	6269      	str	r1, [r5, #36]	; 0x24
    3d00:	7969      	ldrb	r1, [r5, #5]
    3d02:	2901      	cmp	r1, #1
    3d04:	d010      	beq.n	3d28 <_usart_interrupt_handler+0x144>
    3d06:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3d08:	3b01      	subs	r3, #1
    3d0a:	b29b      	uxth	r3, r3
    3d0c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d112      	bne.n	3d38 <_usart_interrupt_handler+0x154>
    3d12:	3304      	adds	r3, #4
    3d14:	7523      	strb	r3, [r4, #20]
    3d16:	2200      	movs	r2, #0
    3d18:	332e      	adds	r3, #46	; 0x2e
    3d1a:	54ea      	strb	r2, [r5, r3]
    3d1c:	07bb      	lsls	r3, r7, #30
    3d1e:	d50b      	bpl.n	3d38 <_usart_interrupt_handler+0x154>
    3d20:	0028      	movs	r0, r5
    3d22:	692b      	ldr	r3, [r5, #16]
    3d24:	4798      	blx	r3
    3d26:	e007      	b.n	3d38 <_usart_interrupt_handler+0x154>
    3d28:	0a1b      	lsrs	r3, r3, #8
    3d2a:	7053      	strb	r3, [r2, #1]
    3d2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3d2e:	3301      	adds	r3, #1
    3d30:	626b      	str	r3, [r5, #36]	; 0x24
    3d32:	e7e8      	b.n	3d06 <_usart_interrupt_handler+0x122>
    3d34:	2304      	movs	r3, #4
    3d36:	7523      	strb	r3, [r4, #20]
    3d38:	06f3      	lsls	r3, r6, #27
    3d3a:	d504      	bpl.n	3d46 <_usart_interrupt_handler+0x162>
    3d3c:	2310      	movs	r3, #16
    3d3e:	7523      	strb	r3, [r4, #20]
    3d40:	7623      	strb	r3, [r4, #24]
    3d42:	06fb      	lsls	r3, r7, #27
    3d44:	d410      	bmi.n	3d68 <_usart_interrupt_handler+0x184>
    3d46:	06b3      	lsls	r3, r6, #26
    3d48:	d504      	bpl.n	3d54 <_usart_interrupt_handler+0x170>
    3d4a:	2320      	movs	r3, #32
    3d4c:	7523      	strb	r3, [r4, #20]
    3d4e:	7623      	strb	r3, [r4, #24]
    3d50:	073b      	lsls	r3, r7, #28
    3d52:	d40d      	bmi.n	3d70 <_usart_interrupt_handler+0x18c>
    3d54:	0733      	lsls	r3, r6, #28
    3d56:	d504      	bpl.n	3d62 <_usart_interrupt_handler+0x17e>
    3d58:	2308      	movs	r3, #8
    3d5a:	7523      	strb	r3, [r4, #20]
    3d5c:	7623      	strb	r3, [r4, #24]
    3d5e:	06bb      	lsls	r3, r7, #26
    3d60:	d40a      	bmi.n	3d78 <_usart_interrupt_handler+0x194>
    3d62:	bc04      	pop	{r2}
    3d64:	4690      	mov	r8, r2
    3d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d68:	0028      	movs	r0, r5
    3d6a:	69eb      	ldr	r3, [r5, #28]
    3d6c:	4798      	blx	r3
    3d6e:	e7ea      	b.n	3d46 <_usart_interrupt_handler+0x162>
    3d70:	0028      	movs	r0, r5
    3d72:	69ab      	ldr	r3, [r5, #24]
    3d74:	4798      	blx	r3
    3d76:	e7ed      	b.n	3d54 <_usart_interrupt_handler+0x170>
    3d78:	6a2b      	ldr	r3, [r5, #32]
    3d7a:	0028      	movs	r0, r5
    3d7c:	4798      	blx	r3
    3d7e:	e7f0      	b.n	3d62 <_usart_interrupt_handler+0x17e>
    3d80:	200009ac 	.word	0x200009ac

00003d84 <_sercom_default_handler>:
    3d84:	4770      	bx	lr
	...

00003d88 <_sercom_set_handler>:
    3d88:	b530      	push	{r4, r5, lr}
    3d8a:	4b0b      	ldr	r3, [pc, #44]	; (3db8 <_sercom_set_handler+0x30>)
    3d8c:	781b      	ldrb	r3, [r3, #0]
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d008      	beq.n	3da4 <_sercom_set_handler+0x1c>
    3d92:	e00c      	b.n	3dae <_sercom_set_handler+0x26>
    3d94:	009a      	lsls	r2, r3, #2
    3d96:	4d09      	ldr	r5, [pc, #36]	; (3dbc <_sercom_set_handler+0x34>)
    3d98:	4c09      	ldr	r4, [pc, #36]	; (3dc0 <_sercom_set_handler+0x38>)
    3d9a:	5115      	str	r5, [r2, r4]
    3d9c:	2500      	movs	r5, #0
    3d9e:	4c09      	ldr	r4, [pc, #36]	; (3dc4 <_sercom_set_handler+0x3c>)
    3da0:	5115      	str	r5, [r2, r4]
    3da2:	3301      	adds	r3, #1
    3da4:	2b05      	cmp	r3, #5
    3da6:	d9f5      	bls.n	3d94 <_sercom_set_handler+0xc>
    3da8:	2201      	movs	r2, #1
    3daa:	4b03      	ldr	r3, [pc, #12]	; (3db8 <_sercom_set_handler+0x30>)
    3dac:	701a      	strb	r2, [r3, #0]
    3dae:	0080      	lsls	r0, r0, #2
    3db0:	4b03      	ldr	r3, [pc, #12]	; (3dc0 <_sercom_set_handler+0x38>)
    3db2:	50c1      	str	r1, [r0, r3]
    3db4:	bd30      	pop	{r4, r5, pc}
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	20000351 	.word	0x20000351
    3dbc:	00003d85 	.word	0x00003d85
    3dc0:	20000354 	.word	0x20000354
    3dc4:	200009ac 	.word	0x200009ac

00003dc8 <_sercom_get_interrupt_vector>:
    3dc8:	b500      	push	{lr}
    3dca:	b083      	sub	sp, #12
    3dcc:	4b05      	ldr	r3, [pc, #20]	; (3de4 <_sercom_get_interrupt_vector+0x1c>)
    3dce:	681a      	ldr	r2, [r3, #0]
    3dd0:	9200      	str	r2, [sp, #0]
    3dd2:	889b      	ldrh	r3, [r3, #4]
    3dd4:	466a      	mov	r2, sp
    3dd6:	8093      	strh	r3, [r2, #4]
    3dd8:	4b03      	ldr	r3, [pc, #12]	; (3de8 <_sercom_get_interrupt_vector+0x20>)
    3dda:	4798      	blx	r3
    3ddc:	466b      	mov	r3, sp
    3dde:	5618      	ldrsb	r0, [r3, r0]
    3de0:	b003      	add	sp, #12
    3de2:	bd00      	pop	{pc}
    3de4:	000056f0 	.word	0x000056f0
    3de8:	00000a21 	.word	0x00000a21

00003dec <SERCOM0_Handler>:
    3dec:	b510      	push	{r4, lr}
    3dee:	4b02      	ldr	r3, [pc, #8]	; (3df8 <SERCOM0_Handler+0xc>)
    3df0:	681b      	ldr	r3, [r3, #0]
    3df2:	2000      	movs	r0, #0
    3df4:	4798      	blx	r3
    3df6:	bd10      	pop	{r4, pc}
    3df8:	20000354 	.word	0x20000354

00003dfc <SERCOM1_Handler>:
    3dfc:	b510      	push	{r4, lr}
    3dfe:	4b02      	ldr	r3, [pc, #8]	; (3e08 <SERCOM1_Handler+0xc>)
    3e00:	685b      	ldr	r3, [r3, #4]
    3e02:	2001      	movs	r0, #1
    3e04:	4798      	blx	r3
    3e06:	bd10      	pop	{r4, pc}
    3e08:	20000354 	.word	0x20000354

00003e0c <SERCOM2_Handler>:
    3e0c:	b510      	push	{r4, lr}
    3e0e:	4b02      	ldr	r3, [pc, #8]	; (3e18 <SERCOM2_Handler+0xc>)
    3e10:	689b      	ldr	r3, [r3, #8]
    3e12:	2002      	movs	r0, #2
    3e14:	4798      	blx	r3
    3e16:	bd10      	pop	{r4, pc}
    3e18:	20000354 	.word	0x20000354

00003e1c <SERCOM3_Handler>:
    3e1c:	b510      	push	{r4, lr}
    3e1e:	4b02      	ldr	r3, [pc, #8]	; (3e28 <SERCOM3_Handler+0xc>)
    3e20:	68db      	ldr	r3, [r3, #12]
    3e22:	2003      	movs	r0, #3
    3e24:	4798      	blx	r3
    3e26:	bd10      	pop	{r4, pc}
    3e28:	20000354 	.word	0x20000354

00003e2c <SERCOM4_Handler>:
    3e2c:	b510      	push	{r4, lr}
    3e2e:	4b02      	ldr	r3, [pc, #8]	; (3e38 <SERCOM4_Handler+0xc>)
    3e30:	691b      	ldr	r3, [r3, #16]
    3e32:	2004      	movs	r0, #4
    3e34:	4798      	blx	r3
    3e36:	bd10      	pop	{r4, pc}
    3e38:	20000354 	.word	0x20000354

00003e3c <SERCOM5_Handler>:
    3e3c:	b510      	push	{r4, lr}
    3e3e:	4b02      	ldr	r3, [pc, #8]	; (3e48 <SERCOM5_Handler+0xc>)
    3e40:	695b      	ldr	r3, [r3, #20]
    3e42:	2005      	movs	r0, #5
    3e44:	4798      	blx	r3
    3e46:	bd10      	pop	{r4, pc}
    3e48:	20000354 	.word	0x20000354

00003e4c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3e4c:	b500      	push	{lr}
    3e4e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3e50:	ab01      	add	r3, sp, #4
    3e52:	2280      	movs	r2, #128	; 0x80
    3e54:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3e56:	780a      	ldrb	r2, [r1, #0]
    3e58:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3e5a:	784a      	ldrb	r2, [r1, #1]
    3e5c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3e5e:	788a      	ldrb	r2, [r1, #2]
    3e60:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3e62:	0019      	movs	r1, r3
    3e64:	4b01      	ldr	r3, [pc, #4]	; (3e6c <port_pin_set_config+0x20>)
    3e66:	4798      	blx	r3
}
    3e68:	b003      	add	sp, #12
    3e6a:	bd00      	pop	{pc}
    3e6c:	0000457d 	.word	0x0000457d

00003e70 <system_board_init>:
    3e70:	4770      	bx	lr
	...

00003e74 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3e74:	4b0c      	ldr	r3, [pc, #48]	; (3ea8 <cpu_irq_enter_critical+0x34>)
    3e76:	681b      	ldr	r3, [r3, #0]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d106      	bne.n	3e8a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3e7c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3e80:	2b00      	cmp	r3, #0
    3e82:	d007      	beq.n	3e94 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3e84:	2200      	movs	r2, #0
    3e86:	4b09      	ldr	r3, [pc, #36]	; (3eac <cpu_irq_enter_critical+0x38>)
    3e88:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3e8a:	4a07      	ldr	r2, [pc, #28]	; (3ea8 <cpu_irq_enter_critical+0x34>)
    3e8c:	6813      	ldr	r3, [r2, #0]
    3e8e:	3301      	adds	r3, #1
    3e90:	6013      	str	r3, [r2, #0]
}
    3e92:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3e94:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3e96:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3e9a:	2200      	movs	r2, #0
    3e9c:	4b04      	ldr	r3, [pc, #16]	; (3eb0 <cpu_irq_enter_critical+0x3c>)
    3e9e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3ea0:	3201      	adds	r2, #1
    3ea2:	4b02      	ldr	r3, [pc, #8]	; (3eac <cpu_irq_enter_critical+0x38>)
    3ea4:	701a      	strb	r2, [r3, #0]
    3ea6:	e7f0      	b.n	3e8a <cpu_irq_enter_critical+0x16>
    3ea8:	2000036c 	.word	0x2000036c
    3eac:	20000370 	.word	0x20000370
    3eb0:	2000000b 	.word	0x2000000b

00003eb4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3eb4:	4b08      	ldr	r3, [pc, #32]	; (3ed8 <cpu_irq_leave_critical+0x24>)
    3eb6:	681a      	ldr	r2, [r3, #0]
    3eb8:	3a01      	subs	r2, #1
    3eba:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3ebc:	681b      	ldr	r3, [r3, #0]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d109      	bne.n	3ed6 <cpu_irq_leave_critical+0x22>
    3ec2:	4b06      	ldr	r3, [pc, #24]	; (3edc <cpu_irq_leave_critical+0x28>)
    3ec4:	781b      	ldrb	r3, [r3, #0]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d005      	beq.n	3ed6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3eca:	2201      	movs	r2, #1
    3ecc:	4b04      	ldr	r3, [pc, #16]	; (3ee0 <cpu_irq_leave_critical+0x2c>)
    3ece:	701a      	strb	r2, [r3, #0]
    3ed0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ed4:	b662      	cpsie	i
	}
}
    3ed6:	4770      	bx	lr
    3ed8:	2000036c 	.word	0x2000036c
    3edc:	20000370 	.word	0x20000370
    3ee0:	2000000b 	.word	0x2000000b

00003ee4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3ee4:	b510      	push	{r4, lr}
    3ee6:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3ee8:	2201      	movs	r2, #1
    3eea:	ab01      	add	r3, sp, #4
    3eec:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3eee:	2400      	movs	r4, #0
    3ef0:	e004      	b.n	3efc <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3ef2:	b2e0      	uxtb	r0, r4
    3ef4:	a901      	add	r1, sp, #4
    3ef6:	4b03      	ldr	r3, [pc, #12]	; (3f04 <_switch_peripheral_gclk+0x20>)
    3ef8:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3efa:	3401      	adds	r4, #1
    3efc:	2c24      	cmp	r4, #36	; 0x24
    3efe:	d9f8      	bls.n	3ef2 <_switch_peripheral_gclk+0xe>
	}
}
    3f00:	b002      	add	sp, #8
    3f02:	bd10      	pop	{r4, pc}
    3f04:	00004445 	.word	0x00004445

00003f08 <system_clock_source_get_hz>:
{
    3f08:	b510      	push	{r4, lr}
	switch (clock_source) {
    3f0a:	2808      	cmp	r0, #8
    3f0c:	d834      	bhi.n	3f78 <system_clock_source_get_hz+0x70>
    3f0e:	0080      	lsls	r0, r0, #2
    3f10:	4b1c      	ldr	r3, [pc, #112]	; (3f84 <system_clock_source_get_hz+0x7c>)
    3f12:	581b      	ldr	r3, [r3, r0]
    3f14:	469f      	mov	pc, r3
		return 32768UL;
    3f16:	2080      	movs	r0, #128	; 0x80
    3f18:	0200      	lsls	r0, r0, #8
}
    3f1a:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    3f1c:	4b1a      	ldr	r3, [pc, #104]	; (3f88 <system_clock_source_get_hz+0x80>)
    3f1e:	6918      	ldr	r0, [r3, #16]
    3f20:	e7fb      	b.n	3f1a <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3f22:	4b1a      	ldr	r3, [pc, #104]	; (3f8c <system_clock_source_get_hz+0x84>)
    3f24:	6a1b      	ldr	r3, [r3, #32]
    3f26:	059b      	lsls	r3, r3, #22
    3f28:	0f9b      	lsrs	r3, r3, #30
    3f2a:	4819      	ldr	r0, [pc, #100]	; (3f90 <system_clock_source_get_hz+0x88>)
    3f2c:	40d8      	lsrs	r0, r3
    3f2e:	e7f4      	b.n	3f1a <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    3f30:	4b15      	ldr	r3, [pc, #84]	; (3f88 <system_clock_source_get_hz+0x80>)
    3f32:	6958      	ldr	r0, [r3, #20]
    3f34:	e7f1      	b.n	3f1a <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3f36:	4b14      	ldr	r3, [pc, #80]	; (3f88 <system_clock_source_get_hz+0x80>)
    3f38:	681b      	ldr	r3, [r3, #0]
    3f3a:	079b      	lsls	r3, r3, #30
    3f3c:	d51e      	bpl.n	3f7c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3f3e:	4b13      	ldr	r3, [pc, #76]	; (3f8c <system_clock_source_get_hz+0x84>)
    3f40:	68db      	ldr	r3, [r3, #12]
    3f42:	06db      	lsls	r3, r3, #27
    3f44:	d5fb      	bpl.n	3f3e <system_clock_source_get_hz+0x36>
		switch(_system_clock_inst.dfll.control &
    3f46:	4b10      	ldr	r3, [pc, #64]	; (3f88 <system_clock_source_get_hz+0x80>)
    3f48:	681a      	ldr	r2, [r3, #0]
    3f4a:	2324      	movs	r3, #36	; 0x24
    3f4c:	4013      	ands	r3, r2
    3f4e:	2b04      	cmp	r3, #4
    3f50:	d001      	beq.n	3f56 <system_clock_source_get_hz+0x4e>
			return 48000000UL;
    3f52:	4810      	ldr	r0, [pc, #64]	; (3f94 <system_clock_source_get_hz+0x8c>)
    3f54:	e7e1      	b.n	3f1a <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3f56:	2000      	movs	r0, #0
    3f58:	4b0f      	ldr	r3, [pc, #60]	; (3f98 <system_clock_source_get_hz+0x90>)
    3f5a:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3f5c:	4b0a      	ldr	r3, [pc, #40]	; (3f88 <system_clock_source_get_hz+0x80>)
    3f5e:	689b      	ldr	r3, [r3, #8]
    3f60:	041b      	lsls	r3, r3, #16
    3f62:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3f64:	4358      	muls	r0, r3
    3f66:	e7d8      	b.n	3f1a <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3f68:	2350      	movs	r3, #80	; 0x50
    3f6a:	4a08      	ldr	r2, [pc, #32]	; (3f8c <system_clock_source_get_hz+0x84>)
    3f6c:	5cd3      	ldrb	r3, [r2, r3]
    3f6e:	075b      	lsls	r3, r3, #29
    3f70:	d506      	bpl.n	3f80 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    3f72:	4b05      	ldr	r3, [pc, #20]	; (3f88 <system_clock_source_get_hz+0x80>)
    3f74:	68d8      	ldr	r0, [r3, #12]
    3f76:	e7d0      	b.n	3f1a <system_clock_source_get_hz+0x12>
		return 0;
    3f78:	2000      	movs	r0, #0
    3f7a:	e7ce      	b.n	3f1a <system_clock_source_get_hz+0x12>
			return 0;
    3f7c:	2000      	movs	r0, #0
    3f7e:	e7cc      	b.n	3f1a <system_clock_source_get_hz+0x12>
			return 0;
    3f80:	2000      	movs	r0, #0
    3f82:	e7ca      	b.n	3f1a <system_clock_source_get_hz+0x12>
    3f84:	000056f8 	.word	0x000056f8
    3f88:	20000374 	.word	0x20000374
    3f8c:	40000800 	.word	0x40000800
    3f90:	007a1200 	.word	0x007a1200
    3f94:	02dc6c00 	.word	0x02dc6c00
    3f98:	00004461 	.word	0x00004461

00003f9c <system_clock_source_osc8m_set_config>:
{
    3f9c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3f9e:	4d0c      	ldr	r5, [pc, #48]	; (3fd0 <system_clock_source_osc8m_set_config+0x34>)
    3fa0:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    3fa2:	7802      	ldrb	r2, [r0, #0]
    3fa4:	2103      	movs	r1, #3
    3fa6:	400a      	ands	r2, r1
    3fa8:	0212      	lsls	r2, r2, #8
    3faa:	490a      	ldr	r1, [pc, #40]	; (3fd4 <system_clock_source_osc8m_set_config+0x38>)
    3fac:	4031      	ands	r1, r6
    3fae:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    3fb0:	7882      	ldrb	r2, [r0, #2]
    3fb2:	2401      	movs	r4, #1
    3fb4:	4022      	ands	r2, r4
    3fb6:	01d2      	lsls	r2, r2, #7
    3fb8:	2380      	movs	r3, #128	; 0x80
    3fba:	4399      	bics	r1, r3
    3fbc:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    3fbe:	7843      	ldrb	r3, [r0, #1]
    3fc0:	4023      	ands	r3, r4
    3fc2:	019b      	lsls	r3, r3, #6
    3fc4:	2140      	movs	r1, #64	; 0x40
    3fc6:	438a      	bics	r2, r1
    3fc8:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    3fca:	622b      	str	r3, [r5, #32]
}
    3fcc:	bd70      	pop	{r4, r5, r6, pc}
    3fce:	46c0      	nop			; (mov r8, r8)
    3fd0:	40000800 	.word	0x40000800
    3fd4:	fffffcff 	.word	0xfffffcff

00003fd8 <system_clock_source_osc32k_set_config>:
{
    3fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    3fda:	4f15      	ldr	r7, [pc, #84]	; (4030 <system_clock_source_osc32k_set_config+0x58>)
    3fdc:	69be      	ldr	r6, [r7, #24]
	temp.bit.EN1K     = config->enable_1khz_output;
    3fde:	7842      	ldrb	r2, [r0, #1]
    3fe0:	2301      	movs	r3, #1
    3fe2:	401a      	ands	r2, r3
    3fe4:	00d2      	lsls	r2, r2, #3
    3fe6:	2108      	movs	r1, #8
    3fe8:	438e      	bics	r6, r1
    3fea:	4332      	orrs	r2, r6
	temp.bit.EN32K    = config->enable_32khz_output;
    3fec:	7885      	ldrb	r5, [r0, #2]
    3fee:	401d      	ands	r5, r3
    3ff0:	00ad      	lsls	r5, r5, #2
    3ff2:	3904      	subs	r1, #4
    3ff4:	438a      	bics	r2, r1
    3ff6:	4315      	orrs	r5, r2
	temp.bit.STARTUP  = config->startup_time;
    3ff8:	7801      	ldrb	r1, [r0, #0]
    3ffa:	2407      	movs	r4, #7
    3ffc:	400c      	ands	r4, r1
    3ffe:	0224      	lsls	r4, r4, #8
    4000:	490c      	ldr	r1, [pc, #48]	; (4034 <system_clock_source_osc32k_set_config+0x5c>)
    4002:	400d      	ands	r5, r1
    4004:	432c      	orrs	r4, r5
	temp.bit.ONDEMAND = config->on_demand;
    4006:	7901      	ldrb	r1, [r0, #4]
    4008:	4019      	ands	r1, r3
    400a:	01c9      	lsls	r1, r1, #7
    400c:	2280      	movs	r2, #128	; 0x80
    400e:	4394      	bics	r4, r2
    4010:	4321      	orrs	r1, r4
	temp.bit.RUNSTDBY = config->run_in_standby;
    4012:	78c2      	ldrb	r2, [r0, #3]
    4014:	401a      	ands	r2, r3
    4016:	0192      	lsls	r2, r2, #6
    4018:	2440      	movs	r4, #64	; 0x40
    401a:	43a1      	bics	r1, r4
    401c:	430a      	orrs	r2, r1
	temp.bit.WRTLOCK  = config->write_once;
    401e:	7941      	ldrb	r1, [r0, #5]
    4020:	400b      	ands	r3, r1
    4022:	031b      	lsls	r3, r3, #12
    4024:	4904      	ldr	r1, [pc, #16]	; (4038 <system_clock_source_osc32k_set_config+0x60>)
    4026:	400a      	ands	r2, r1
    4028:	4313      	orrs	r3, r2
	SYSCTRL->OSC32K  = temp;
    402a:	61bb      	str	r3, [r7, #24]
}
    402c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    402e:	46c0      	nop			; (mov r8, r8)
    4030:	40000800 	.word	0x40000800
    4034:	fffff8ff 	.word	0xfffff8ff
    4038:	ffffefff 	.word	0xffffefff

0000403c <system_clock_source_enable>:
	switch (clock_source) {
    403c:	2808      	cmp	r0, #8
    403e:	d84a      	bhi.n	40d6 <system_clock_source_enable+0x9a>
    4040:	0080      	lsls	r0, r0, #2
    4042:	4b26      	ldr	r3, [pc, #152]	; (40dc <system_clock_source_enable+0xa0>)
    4044:	581b      	ldr	r3, [r3, r0]
    4046:	469f      	mov	pc, r3
		return STATUS_OK;
    4048:	2000      	movs	r0, #0
}
    404a:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    404c:	4a24      	ldr	r2, [pc, #144]	; (40e0 <system_clock_source_enable+0xa4>)
    404e:	6a13      	ldr	r3, [r2, #32]
    4050:	2102      	movs	r1, #2
    4052:	430b      	orrs	r3, r1
    4054:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4056:	2000      	movs	r0, #0
    4058:	e7f7      	b.n	404a <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    405a:	4a21      	ldr	r2, [pc, #132]	; (40e0 <system_clock_source_enable+0xa4>)
    405c:	6993      	ldr	r3, [r2, #24]
    405e:	2102      	movs	r1, #2
    4060:	430b      	orrs	r3, r1
    4062:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    4064:	2000      	movs	r0, #0
		break;
    4066:	e7f0      	b.n	404a <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4068:	4a1d      	ldr	r2, [pc, #116]	; (40e0 <system_clock_source_enable+0xa4>)
    406a:	8a13      	ldrh	r3, [r2, #16]
    406c:	2102      	movs	r1, #2
    406e:	430b      	orrs	r3, r1
    4070:	b29b      	uxth	r3, r3
    4072:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    4074:	2000      	movs	r0, #0
		break;
    4076:	e7e8      	b.n	404a <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4078:	4a19      	ldr	r2, [pc, #100]	; (40e0 <system_clock_source_enable+0xa4>)
    407a:	8a93      	ldrh	r3, [r2, #20]
    407c:	2102      	movs	r1, #2
    407e:	430b      	orrs	r3, r1
    4080:	b29b      	uxth	r3, r3
    4082:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4084:	2000      	movs	r0, #0
		break;
    4086:	e7e0      	b.n	404a <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4088:	4916      	ldr	r1, [pc, #88]	; (40e4 <system_clock_source_enable+0xa8>)
    408a:	680b      	ldr	r3, [r1, #0]
    408c:	2202      	movs	r2, #2
    408e:	4313      	orrs	r3, r2
    4090:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4092:	4b13      	ldr	r3, [pc, #76]	; (40e0 <system_clock_source_enable+0xa4>)
    4094:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4096:	4b12      	ldr	r3, [pc, #72]	; (40e0 <system_clock_source_enable+0xa4>)
    4098:	68db      	ldr	r3, [r3, #12]
    409a:	06db      	lsls	r3, r3, #27
    409c:	d5fb      	bpl.n	4096 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    409e:	4a11      	ldr	r2, [pc, #68]	; (40e4 <system_clock_source_enable+0xa8>)
    40a0:	6891      	ldr	r1, [r2, #8]
    40a2:	4b0f      	ldr	r3, [pc, #60]	; (40e0 <system_clock_source_enable+0xa4>)
    40a4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    40a6:	6852      	ldr	r2, [r2, #4]
    40a8:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    40aa:	2200      	movs	r2, #0
    40ac:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    40ae:	4b0c      	ldr	r3, [pc, #48]	; (40e0 <system_clock_source_enable+0xa4>)
    40b0:	68db      	ldr	r3, [r3, #12]
    40b2:	06db      	lsls	r3, r3, #27
    40b4:	d5fb      	bpl.n	40ae <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    40b6:	4b0b      	ldr	r3, [pc, #44]	; (40e4 <system_clock_source_enable+0xa8>)
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	b29b      	uxth	r3, r3
    40bc:	4a08      	ldr	r2, [pc, #32]	; (40e0 <system_clock_source_enable+0xa4>)
    40be:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    40c0:	2000      	movs	r0, #0
    40c2:	e7c2      	b.n	404a <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    40c4:	4906      	ldr	r1, [pc, #24]	; (40e0 <system_clock_source_enable+0xa4>)
    40c6:	2244      	movs	r2, #68	; 0x44
    40c8:	5c8b      	ldrb	r3, [r1, r2]
    40ca:	2002      	movs	r0, #2
    40cc:	4303      	orrs	r3, r0
    40ce:	b2db      	uxtb	r3, r3
    40d0:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    40d2:	2000      	movs	r0, #0
		break;
    40d4:	e7b9      	b.n	404a <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    40d6:	2017      	movs	r0, #23
    40d8:	e7b7      	b.n	404a <system_clock_source_enable+0xe>
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	0000571c 	.word	0x0000571c
    40e0:	40000800 	.word	0x40000800
    40e4:	20000374 	.word	0x20000374

000040e8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    40e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ea:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    40ec:	4c29      	ldr	r4, [pc, #164]	; (4194 <system_clock_init+0xac>)
    40ee:	23c2      	movs	r3, #194	; 0xc2
    40f0:	00db      	lsls	r3, r3, #3
    40f2:	60a3      	str	r3, [r4, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    40f4:	4b28      	ldr	r3, [pc, #160]	; (4198 <system_clock_init+0xb0>)
    40f6:	6859      	ldr	r1, [r3, #4]
    40f8:	221e      	movs	r2, #30
    40fa:	4391      	bics	r1, r2
    40fc:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    40fe:	4b27      	ldr	r3, [pc, #156]	; (419c <system_clock_init+0xb4>)
    4100:	4798      	blx	r3


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    4102:	4b27      	ldr	r3, [pc, #156]	; (41a0 <system_clock_init+0xb8>)
    4104:	6819      	ldr	r1, [r3, #0]
    4106:	0989      	lsrs	r1, r1, #6
	SYSCTRL->OSC32K.bit.CALIB =
    4108:	69a2      	ldr	r2, [r4, #24]
    410a:	237f      	movs	r3, #127	; 0x7f
    410c:	400b      	ands	r3, r1
    410e:	041b      	lsls	r3, r3, #16
    4110:	4924      	ldr	r1, [pc, #144]	; (41a4 <system_clock_init+0xbc>)
    4112:	400a      	ands	r2, r1
    4114:	4313      	orrs	r3, r2
    4116:	61a3      	str	r3, [r4, #24]
	config->enable_1khz_output  = true;
    4118:	a804      	add	r0, sp, #16
    411a:	2501      	movs	r5, #1
    411c:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    411e:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    4120:	2400      	movs	r4, #0
    4122:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    4124:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    4126:	2307      	movs	r3, #7
    4128:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    412a:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    412c:	4b1e      	ldr	r3, [pc, #120]	; (41a8 <system_clock_init+0xc0>)
    412e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    4130:	2004      	movs	r0, #4
    4132:	4e1e      	ldr	r6, [pc, #120]	; (41ac <system_clock_init+0xc4>)
    4134:	47b0      	blx	r6
	config->run_in_standby  = false;
    4136:	a803      	add	r0, sp, #12
    4138:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    413a:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    413c:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    413e:	4b1c      	ldr	r3, [pc, #112]	; (41b0 <system_clock_init+0xc8>)
    4140:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4142:	2006      	movs	r0, #6
    4144:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4146:	4b1b      	ldr	r3, [pc, #108]	; (41b4 <system_clock_init+0xcc>)
    4148:	4798      	blx	r3
	config->high_when_disabled = false;
    414a:	466b      	mov	r3, sp
    414c:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    414e:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4150:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4152:	2304      	movs	r3, #4
    4154:	466a      	mov	r2, sp
    4156:	7013      	strb	r3, [r2, #0]
    4158:	331c      	adds	r3, #28
    415a:	9301      	str	r3, [sp, #4]
    415c:	4669      	mov	r1, sp
    415e:	2002      	movs	r0, #2
    4160:	4f15      	ldr	r7, [pc, #84]	; (41b8 <system_clock_init+0xd0>)
    4162:	47b8      	blx	r7
    4164:	2002      	movs	r0, #2
    4166:	4e15      	ldr	r6, [pc, #84]	; (41bc <system_clock_init+0xd4>)
    4168:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    416a:	4b15      	ldr	r3, [pc, #84]	; (41c0 <system_clock_init+0xd8>)
    416c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    416e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4170:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4172:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    4174:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    4176:	466b      	mov	r3, sp
    4178:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    417a:	2306      	movs	r3, #6
    417c:	466a      	mov	r2, sp
    417e:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    4180:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    4182:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4184:	4669      	mov	r1, sp
    4186:	2000      	movs	r0, #0
    4188:	47b8      	blx	r7
    418a:	2000      	movs	r0, #0
    418c:	47b0      	blx	r6
#endif
}
    418e:	b007      	add	sp, #28
    4190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	40000800 	.word	0x40000800
    4198:	41004000 	.word	0x41004000
    419c:	00003ee5 	.word	0x00003ee5
    41a0:	00806024 	.word	0x00806024
    41a4:	ff80ffff 	.word	0xff80ffff
    41a8:	00003fd9 	.word	0x00003fd9
    41ac:	0000403d 	.word	0x0000403d
    41b0:	00003f9d 	.word	0x00003f9d
    41b4:	000041c5 	.word	0x000041c5
    41b8:	000041e9 	.word	0x000041e9
    41bc:	000042b9 	.word	0x000042b9
    41c0:	40000400 	.word	0x40000400

000041c4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    41c4:	4a06      	ldr	r2, [pc, #24]	; (41e0 <system_gclk_init+0x1c>)
    41c6:	6993      	ldr	r3, [r2, #24]
    41c8:	2108      	movs	r1, #8
    41ca:	430b      	orrs	r3, r1
    41cc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    41ce:	2201      	movs	r2, #1
    41d0:	4b04      	ldr	r3, [pc, #16]	; (41e4 <system_gclk_init+0x20>)
    41d2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    41d4:	4b03      	ldr	r3, [pc, #12]	; (41e4 <system_gclk_init+0x20>)
    41d6:	781b      	ldrb	r3, [r3, #0]
    41d8:	07db      	lsls	r3, r3, #31
    41da:	d4fb      	bmi.n	41d4 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    41dc:	4770      	bx	lr
    41de:	46c0      	nop			; (mov r8, r8)
    41e0:	40000400 	.word	0x40000400
    41e4:	40000c00 	.word	0x40000c00

000041e8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    41e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ea:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    41ec:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    41ee:	780c      	ldrb	r4, [r1, #0]
    41f0:	0224      	lsls	r4, r4, #8
    41f2:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    41f4:	784b      	ldrb	r3, [r1, #1]
    41f6:	2b00      	cmp	r3, #0
    41f8:	d002      	beq.n	4200 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    41fa:	2380      	movs	r3, #128	; 0x80
    41fc:	02db      	lsls	r3, r3, #11
    41fe:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4200:	7a4b      	ldrb	r3, [r1, #9]
    4202:	2b00      	cmp	r3, #0
    4204:	d002      	beq.n	420c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4206:	2380      	movs	r3, #128	; 0x80
    4208:	031b      	lsls	r3, r3, #12
    420a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    420c:	6848      	ldr	r0, [r1, #4]
    420e:	2801      	cmp	r0, #1
    4210:	d912      	bls.n	4238 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4212:	1e43      	subs	r3, r0, #1
    4214:	4203      	tst	r3, r0
    4216:	d03d      	beq.n	4294 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4218:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    421a:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    421c:	2380      	movs	r3, #128	; 0x80
    421e:	029b      	lsls	r3, r3, #10
    4220:	431c      	orrs	r4, r3
    4222:	e009      	b.n	4238 <system_gclk_gen_set_config+0x50>
				div2_count++;
    4224:	3201      	adds	r2, #1
						mask <<= 1) {
    4226:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4228:	4283      	cmp	r3, r0
    422a:	d3fb      	bcc.n	4224 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    422c:	0212      	lsls	r2, r2, #8
    422e:	4332      	orrs	r2, r6
    4230:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4232:	2380      	movs	r3, #128	; 0x80
    4234:	035b      	lsls	r3, r3, #13
    4236:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4238:	7a0b      	ldrb	r3, [r1, #8]
    423a:	2b00      	cmp	r3, #0
    423c:	d002      	beq.n	4244 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    423e:	2380      	movs	r3, #128	; 0x80
    4240:	039b      	lsls	r3, r3, #14
    4242:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4244:	4b18      	ldr	r3, [pc, #96]	; (42a8 <system_gclk_gen_set_config+0xc0>)
    4246:	785b      	ldrb	r3, [r3, #1]
    4248:	b25b      	sxtb	r3, r3
    424a:	2b00      	cmp	r3, #0
    424c:	db25      	blt.n	429a <system_gclk_gen_set_config+0xb2>
	return false;
    424e:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    4250:	2f00      	cmp	r7, #0
    4252:	d1f7      	bne.n	4244 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    4254:	4b15      	ldr	r3, [pc, #84]	; (42ac <system_gclk_gen_set_config+0xc4>)
    4256:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4258:	4b15      	ldr	r3, [pc, #84]	; (42b0 <system_gclk_gen_set_config+0xc8>)
    425a:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    425c:	4b12      	ldr	r3, [pc, #72]	; (42a8 <system_gclk_gen_set_config+0xc0>)
    425e:	785b      	ldrb	r3, [r3, #1]
    4260:	b25b      	sxtb	r3, r3
    4262:	2b00      	cmp	r3, #0
    4264:	db1b      	blt.n	429e <system_gclk_gen_set_config+0xb6>
	return false;
    4266:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4268:	2a00      	cmp	r2, #0
    426a:	d1f7      	bne.n	425c <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    426c:	4b0e      	ldr	r3, [pc, #56]	; (42a8 <system_gclk_gen_set_config+0xc0>)
    426e:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4270:	4b0d      	ldr	r3, [pc, #52]	; (42a8 <system_gclk_gen_set_config+0xc0>)
    4272:	785b      	ldrb	r3, [r3, #1]
    4274:	b25b      	sxtb	r3, r3
    4276:	2b00      	cmp	r3, #0
    4278:	db13      	blt.n	42a2 <system_gclk_gen_set_config+0xba>
	return false;
    427a:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    427c:	2b00      	cmp	r3, #0
    427e:	d1f7      	bne.n	4270 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4280:	4a09      	ldr	r2, [pc, #36]	; (42a8 <system_gclk_gen_set_config+0xc0>)
    4282:	6853      	ldr	r3, [r2, #4]
    4284:	2180      	movs	r1, #128	; 0x80
    4286:	0249      	lsls	r1, r1, #9
    4288:	400b      	ands	r3, r1
    428a:	431c      	orrs	r4, r3
    428c:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    428e:	4b09      	ldr	r3, [pc, #36]	; (42b4 <system_gclk_gen_set_config+0xcc>)
    4290:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4294:	2302      	movs	r3, #2
    4296:	2200      	movs	r2, #0
    4298:	e7c6      	b.n	4228 <system_gclk_gen_set_config+0x40>
		return true;
    429a:	2701      	movs	r7, #1
    429c:	e7d8      	b.n	4250 <system_gclk_gen_set_config+0x68>
    429e:	2201      	movs	r2, #1
    42a0:	e7e2      	b.n	4268 <system_gclk_gen_set_config+0x80>
    42a2:	2301      	movs	r3, #1
    42a4:	e7ea      	b.n	427c <system_gclk_gen_set_config+0x94>
    42a6:	46c0      	nop			; (mov r8, r8)
    42a8:	40000c00 	.word	0x40000c00
    42ac:	00003e75 	.word	0x00003e75
    42b0:	40000c08 	.word	0x40000c08
    42b4:	00003eb5 	.word	0x00003eb5

000042b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    42b8:	b570      	push	{r4, r5, r6, lr}
    42ba:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    42bc:	4b10      	ldr	r3, [pc, #64]	; (4300 <system_gclk_gen_enable+0x48>)
    42be:	785b      	ldrb	r3, [r3, #1]
    42c0:	b25b      	sxtb	r3, r3
    42c2:	2b00      	cmp	r3, #0
    42c4:	db17      	blt.n	42f6 <system_gclk_gen_enable+0x3e>
	return false;
    42c6:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    42c8:	2c00      	cmp	r4, #0
    42ca:	d1f7      	bne.n	42bc <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    42cc:	4b0d      	ldr	r3, [pc, #52]	; (4304 <system_gclk_gen_enable+0x4c>)
    42ce:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    42d0:	4b0d      	ldr	r3, [pc, #52]	; (4308 <system_gclk_gen_enable+0x50>)
    42d2:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    42d4:	4b0a      	ldr	r3, [pc, #40]	; (4300 <system_gclk_gen_enable+0x48>)
    42d6:	785b      	ldrb	r3, [r3, #1]
    42d8:	b25b      	sxtb	r3, r3
    42da:	2b00      	cmp	r3, #0
    42dc:	db0d      	blt.n	42fa <system_gclk_gen_enable+0x42>
	return false;
    42de:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    42e0:	2b00      	cmp	r3, #0
    42e2:	d1f7      	bne.n	42d4 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    42e4:	4a06      	ldr	r2, [pc, #24]	; (4300 <system_gclk_gen_enable+0x48>)
    42e6:	6851      	ldr	r1, [r2, #4]
    42e8:	2380      	movs	r3, #128	; 0x80
    42ea:	025b      	lsls	r3, r3, #9
    42ec:	430b      	orrs	r3, r1
    42ee:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    42f0:	4b06      	ldr	r3, [pc, #24]	; (430c <system_gclk_gen_enable+0x54>)
    42f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    42f4:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    42f6:	2401      	movs	r4, #1
    42f8:	e7e6      	b.n	42c8 <system_gclk_gen_enable+0x10>
    42fa:	2301      	movs	r3, #1
    42fc:	e7f0      	b.n	42e0 <system_gclk_gen_enable+0x28>
    42fe:	46c0      	nop			; (mov r8, r8)
    4300:	40000c00 	.word	0x40000c00
    4304:	00003e75 	.word	0x00003e75
    4308:	40000c04 	.word	0x40000c04
    430c:	00003eb5 	.word	0x00003eb5

00004310 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4312:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4314:	4b22      	ldr	r3, [pc, #136]	; (43a0 <system_gclk_gen_get_hz+0x90>)
    4316:	785b      	ldrb	r3, [r3, #1]
    4318:	b25b      	sxtb	r3, r3
    431a:	2b00      	cmp	r3, #0
    431c:	db34      	blt.n	4388 <system_gclk_gen_get_hz+0x78>
	return false;
    431e:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    4320:	2d00      	cmp	r5, #0
    4322:	d1f7      	bne.n	4314 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    4324:	4b1f      	ldr	r3, [pc, #124]	; (43a4 <system_gclk_gen_get_hz+0x94>)
    4326:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4328:	4b1f      	ldr	r3, [pc, #124]	; (43a8 <system_gclk_gen_get_hz+0x98>)
    432a:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    432c:	4b1c      	ldr	r3, [pc, #112]	; (43a0 <system_gclk_gen_get_hz+0x90>)
    432e:	785b      	ldrb	r3, [r3, #1]
    4330:	b25b      	sxtb	r3, r3
    4332:	2b00      	cmp	r3, #0
    4334:	db2a      	blt.n	438c <system_gclk_gen_get_hz+0x7c>
	return false;
    4336:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    4338:	2c00      	cmp	r4, #0
    433a:	d1f7      	bne.n	432c <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    433c:	4e18      	ldr	r6, [pc, #96]	; (43a0 <system_gclk_gen_get_hz+0x90>)
    433e:	6870      	ldr	r0, [r6, #4]
    4340:	04c0      	lsls	r0, r0, #19
    4342:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4344:	4b19      	ldr	r3, [pc, #100]	; (43ac <system_gclk_gen_get_hz+0x9c>)
    4346:	4798      	blx	r3
    4348:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    434a:	4b17      	ldr	r3, [pc, #92]	; (43a8 <system_gclk_gen_get_hz+0x98>)
    434c:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    434e:	6876      	ldr	r6, [r6, #4]
    4350:	02f6      	lsls	r6, r6, #11
    4352:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4354:	4b16      	ldr	r3, [pc, #88]	; (43b0 <system_gclk_gen_get_hz+0xa0>)
    4356:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4358:	4b11      	ldr	r3, [pc, #68]	; (43a0 <system_gclk_gen_get_hz+0x90>)
    435a:	785b      	ldrb	r3, [r3, #1]
    435c:	b25b      	sxtb	r3, r3
    435e:	2b00      	cmp	r3, #0
    4360:	db16      	blt.n	4390 <system_gclk_gen_get_hz+0x80>
	return false;
    4362:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    4364:	2b00      	cmp	r3, #0
    4366:	d1f7      	bne.n	4358 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4368:	4b0d      	ldr	r3, [pc, #52]	; (43a0 <system_gclk_gen_get_hz+0x90>)
    436a:	689c      	ldr	r4, [r3, #8]
    436c:	0224      	lsls	r4, r4, #8
    436e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4370:	4b10      	ldr	r3, [pc, #64]	; (43b4 <system_gclk_gen_get_hz+0xa4>)
    4372:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4374:	2e00      	cmp	r6, #0
    4376:	d10d      	bne.n	4394 <system_gclk_gen_get_hz+0x84>
    4378:	2c01      	cmp	r4, #1
    437a:	d90b      	bls.n	4394 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    437c:	0021      	movs	r1, r4
    437e:	0028      	movs	r0, r5
    4380:	4b0d      	ldr	r3, [pc, #52]	; (43b8 <system_gclk_gen_get_hz+0xa8>)
    4382:	4798      	blx	r3
    4384:	0005      	movs	r5, r0
    4386:	e009      	b.n	439c <system_gclk_gen_get_hz+0x8c>
		return true;
    4388:	2501      	movs	r5, #1
    438a:	e7c9      	b.n	4320 <system_gclk_gen_get_hz+0x10>
    438c:	2401      	movs	r4, #1
    438e:	e7d3      	b.n	4338 <system_gclk_gen_get_hz+0x28>
    4390:	2301      	movs	r3, #1
    4392:	e7e7      	b.n	4364 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    4394:	2e00      	cmp	r6, #0
    4396:	d001      	beq.n	439c <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    4398:	3401      	adds	r4, #1
    439a:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    439c:	0028      	movs	r0, r5
    439e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43a0:	40000c00 	.word	0x40000c00
    43a4:	00003e75 	.word	0x00003e75
    43a8:	40000c04 	.word	0x40000c04
    43ac:	00003f09 	.word	0x00003f09
    43b0:	40000c08 	.word	0x40000c08
    43b4:	00003eb5 	.word	0x00003eb5
    43b8:	00004aed 	.word	0x00004aed

000043bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    43bc:	b510      	push	{r4, lr}
    43be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    43c0:	4b06      	ldr	r3, [pc, #24]	; (43dc <system_gclk_chan_enable+0x20>)
    43c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    43c4:	4b06      	ldr	r3, [pc, #24]	; (43e0 <system_gclk_chan_enable+0x24>)
    43c6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    43c8:	4a06      	ldr	r2, [pc, #24]	; (43e4 <system_gclk_chan_enable+0x28>)
    43ca:	8853      	ldrh	r3, [r2, #2]
    43cc:	2180      	movs	r1, #128	; 0x80
    43ce:	01c9      	lsls	r1, r1, #7
    43d0:	430b      	orrs	r3, r1
    43d2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    43d4:	4b04      	ldr	r3, [pc, #16]	; (43e8 <system_gclk_chan_enable+0x2c>)
    43d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    43d8:	bd10      	pop	{r4, pc}
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	00003e75 	.word	0x00003e75
    43e0:	40000c02 	.word	0x40000c02
    43e4:	40000c00 	.word	0x40000c00
    43e8:	00003eb5 	.word	0x00003eb5

000043ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    43ec:	b510      	push	{r4, lr}
    43ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    43f0:	4b0e      	ldr	r3, [pc, #56]	; (442c <system_gclk_chan_disable+0x40>)
    43f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    43f4:	4b0e      	ldr	r3, [pc, #56]	; (4430 <system_gclk_chan_disable+0x44>)
    43f6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    43f8:	490e      	ldr	r1, [pc, #56]	; (4434 <system_gclk_chan_disable+0x48>)
    43fa:	884b      	ldrh	r3, [r1, #2]
    43fc:	051b      	lsls	r3, r3, #20
    43fe:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4400:	884b      	ldrh	r3, [r1, #2]
    4402:	480d      	ldr	r0, [pc, #52]	; (4438 <system_gclk_chan_disable+0x4c>)
    4404:	4003      	ands	r3, r0
    4406:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4408:	884b      	ldrh	r3, [r1, #2]
    440a:	480c      	ldr	r0, [pc, #48]	; (443c <system_gclk_chan_disable+0x50>)
    440c:	4003      	ands	r3, r0
    440e:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4410:	4b08      	ldr	r3, [pc, #32]	; (4434 <system_gclk_chan_disable+0x48>)
    4412:	885b      	ldrh	r3, [r3, #2]
    4414:	045b      	lsls	r3, r3, #17
    4416:	d4fb      	bmi.n	4410 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4418:	4806      	ldr	r0, [pc, #24]	; (4434 <system_gclk_chan_disable+0x48>)
    441a:	8841      	ldrh	r1, [r0, #2]
    441c:	0213      	lsls	r3, r2, #8
    441e:	4a06      	ldr	r2, [pc, #24]	; (4438 <system_gclk_chan_disable+0x4c>)
    4420:	400a      	ands	r2, r1
    4422:	4313      	orrs	r3, r2
    4424:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    4426:	4b06      	ldr	r3, [pc, #24]	; (4440 <system_gclk_chan_disable+0x54>)
    4428:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    442a:	bd10      	pop	{r4, pc}
    442c:	00003e75 	.word	0x00003e75
    4430:	40000c02 	.word	0x40000c02
    4434:	40000c00 	.word	0x40000c00
    4438:	fffff0ff 	.word	0xfffff0ff
    443c:	ffffbfff 	.word	0xffffbfff
    4440:	00003eb5 	.word	0x00003eb5

00004444 <system_gclk_chan_set_config>:
{
    4444:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4446:	780c      	ldrb	r4, [r1, #0]
    4448:	0224      	lsls	r4, r4, #8
    444a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    444c:	4b02      	ldr	r3, [pc, #8]	; (4458 <system_gclk_chan_set_config+0x14>)
    444e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4450:	b2a4      	uxth	r4, r4
    4452:	4b02      	ldr	r3, [pc, #8]	; (445c <system_gclk_chan_set_config+0x18>)
    4454:	805c      	strh	r4, [r3, #2]
}
    4456:	bd10      	pop	{r4, pc}
    4458:	000043ed 	.word	0x000043ed
    445c:	40000c00 	.word	0x40000c00

00004460 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4460:	b510      	push	{r4, lr}
    4462:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4464:	4b06      	ldr	r3, [pc, #24]	; (4480 <system_gclk_chan_get_hz+0x20>)
    4466:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4468:	4b06      	ldr	r3, [pc, #24]	; (4484 <system_gclk_chan_get_hz+0x24>)
    446a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    446c:	4b06      	ldr	r3, [pc, #24]	; (4488 <system_gclk_chan_get_hz+0x28>)
    446e:	885c      	ldrh	r4, [r3, #2]
    4470:	0524      	lsls	r4, r4, #20
    4472:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4474:	4b05      	ldr	r3, [pc, #20]	; (448c <system_gclk_chan_get_hz+0x2c>)
    4476:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4478:	0020      	movs	r0, r4
    447a:	4b05      	ldr	r3, [pc, #20]	; (4490 <system_gclk_chan_get_hz+0x30>)
    447c:	4798      	blx	r3
}
    447e:	bd10      	pop	{r4, pc}
    4480:	00003e75 	.word	0x00003e75
    4484:	40000c02 	.word	0x40000c02
    4488:	40000c00 	.word	0x40000c00
    448c:	00003eb5 	.word	0x00003eb5
    4490:	00004311 	.word	0x00004311

00004494 <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    4494:	b530      	push	{r4, r5, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    4496:	2800      	cmp	r0, #0
    4498:	db19      	blt.n	44ce <system_interrupt_set_priority+0x3a>
		uint8_t register_num = vector / 4;
    449a:	17c3      	asrs	r3, r0, #31
    449c:	2403      	movs	r4, #3
    449e:	0022      	movs	r2, r4
    44a0:	401a      	ands	r2, r3
    44a2:	1812      	adds	r2, r2, r0
    44a4:	1092      	asrs	r2, r2, #2
    44a6:	b2d2      	uxtb	r2, r2
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    44a8:	0f9b      	lsrs	r3, r3, #30
    44aa:	18c0      	adds	r0, r0, r3
    44ac:	4020      	ands	r0, r4
    44ae:	1ac3      	subs	r3, r0, r3
    44b0:	00db      	lsls	r3, r3, #3
    44b2:	b2db      	uxtb	r3, r3
    44b4:	3306      	adds	r3, #6
    44b6:	b2db      	uxtb	r3, r3

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    44b8:	4d09      	ldr	r5, [pc, #36]	; (44e0 <system_interrupt_set_priority+0x4c>)
    44ba:	32c0      	adds	r2, #192	; 0xc0
    44bc:	0092      	lsls	r2, r2, #2
    44be:	5950      	ldr	r0, [r2, r5]
    44c0:	409c      	lsls	r4, r3
    44c2:	43a0      	bics	r0, r4
				(priority_level << priority_pos);
    44c4:	4099      	lsls	r1, r3
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    44c6:	4301      	orrs	r1, r0
		NVIC->IP[register_num] =
    44c8:	5151      	str	r1, [r2, r5]
	enum status_code status = STATUS_OK;
    44ca:	2000      	movs	r0, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    44cc:	bd30      	pop	{r4, r5, pc}
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    44ce:	1c43      	adds	r3, r0, #1
    44d0:	d001      	beq.n	44d6 <system_interrupt_set_priority+0x42>
		status = STATUS_ERR_INVALID_ARG;
    44d2:	2017      	movs	r0, #23
    44d4:	e7fa      	b.n	44cc <system_interrupt_set_priority+0x38>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    44d6:	0789      	lsls	r1, r1, #30
    44d8:	4b02      	ldr	r3, [pc, #8]	; (44e4 <system_interrupt_set_priority+0x50>)
    44da:	6219      	str	r1, [r3, #32]
	enum status_code status = STATUS_OK;
    44dc:	2000      	movs	r0, #0
    44de:	e7f5      	b.n	44cc <system_interrupt_set_priority+0x38>
    44e0:	e000e100 	.word	0xe000e100
    44e4:	e000ed00 	.word	0xe000ed00

000044e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    44e8:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    44ea:	78d3      	ldrb	r3, [r2, #3]
    44ec:	2b00      	cmp	r3, #0
    44ee:	d120      	bne.n	4532 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    44f0:	7815      	ldrb	r5, [r2, #0]
    44f2:	2d80      	cmp	r5, #128	; 0x80
    44f4:	d01b      	beq.n	452e <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    44f6:	062d      	lsls	r5, r5, #24
    44f8:	2380      	movs	r3, #128	; 0x80
    44fa:	025b      	lsls	r3, r3, #9
    44fc:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    44fe:	7853      	ldrb	r3, [r2, #1]
    4500:	2b00      	cmp	r3, #0
    4502:	d001      	beq.n	4508 <_system_pinmux_config+0x20>
    4504:	2b02      	cmp	r3, #2
    4506:	d10a      	bne.n	451e <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4508:	2380      	movs	r3, #128	; 0x80
    450a:	029b      	lsls	r3, r3, #10
    450c:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    450e:	7894      	ldrb	r4, [r2, #2]
    4510:	2c00      	cmp	r4, #0
    4512:	d002      	beq.n	451a <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4514:	23c0      	movs	r3, #192	; 0xc0
    4516:	02db      	lsls	r3, r3, #11
    4518:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    451a:	6041      	str	r1, [r0, #4]
    451c:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    451e:	7853      	ldrb	r3, [r2, #1]
    4520:	3b01      	subs	r3, #1
    4522:	b2db      	uxtb	r3, r3
    4524:	2b01      	cmp	r3, #1
    4526:	d806      	bhi.n	4536 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4528:	4b13      	ldr	r3, [pc, #76]	; (4578 <_system_pinmux_config+0x90>)
    452a:	401d      	ands	r5, r3
    452c:	e003      	b.n	4536 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    452e:	2500      	movs	r5, #0
    4530:	e7e5      	b.n	44fe <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4532:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    4534:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4536:	040c      	lsls	r4, r1, #16
    4538:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    453a:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    453c:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    453e:	26a0      	movs	r6, #160	; 0xa0
    4540:	05f6      	lsls	r6, r6, #23
    4542:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4544:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4546:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4548:	24d0      	movs	r4, #208	; 0xd0
    454a:	0624      	lsls	r4, r4, #24
    454c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    454e:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4550:	78d3      	ldrb	r3, [r2, #3]
    4552:	2b00      	cmp	r3, #0
    4554:	d10a      	bne.n	456c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4556:	036b      	lsls	r3, r5, #13
    4558:	d503      	bpl.n	4562 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    455a:	7893      	ldrb	r3, [r2, #2]
    455c:	2b01      	cmp	r3, #1
    455e:	d006      	beq.n	456e <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    4560:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4562:	7853      	ldrb	r3, [r2, #1]
    4564:	3b01      	subs	r3, #1
    4566:	b2db      	uxtb	r3, r3
    4568:	2b01      	cmp	r3, #1
    456a:	d902      	bls.n	4572 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    456c:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    456e:	6181      	str	r1, [r0, #24]
    4570:	e7f7      	b.n	4562 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    4572:	6081      	str	r1, [r0, #8]
}
    4574:	e7fa      	b.n	456c <_system_pinmux_config+0x84>
    4576:	46c0      	nop			; (mov r8, r8)
    4578:	fffbffff 	.word	0xfffbffff

0000457c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    457c:	b510      	push	{r4, lr}
    457e:	000a      	movs	r2, r1
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    4580:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    4582:	0943      	lsrs	r3, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4584:	2900      	cmp	r1, #0
    4586:	d10b      	bne.n	45a0 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    4588:	01db      	lsls	r3, r3, #7
    458a:	4906      	ldr	r1, [pc, #24]	; (45a4 <system_pinmux_pin_set_config+0x28>)
    458c:	468c      	mov	ip, r1
    458e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4590:	241f      	movs	r4, #31
    4592:	4020      	ands	r0, r4
    4594:	2101      	movs	r1, #1
    4596:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4598:	0018      	movs	r0, r3
    459a:	4b03      	ldr	r3, [pc, #12]	; (45a8 <system_pinmux_pin_set_config+0x2c>)
    459c:	4798      	blx	r3
}
    459e:	bd10      	pop	{r4, pc}
	} else {
		Assert(false);
		return NULL;
    45a0:	2300      	movs	r3, #0
    45a2:	e7f5      	b.n	4590 <system_pinmux_pin_set_config+0x14>
    45a4:	41004400 	.word	0x41004400
    45a8:	000044e9 	.word	0x000044e9

000045ac <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    45ac:	4770      	bx	lr
	...

000045b0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    45b0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    45b2:	4b05      	ldr	r3, [pc, #20]	; (45c8 <system_init+0x18>)
    45b4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    45b6:	4b05      	ldr	r3, [pc, #20]	; (45cc <system_init+0x1c>)
    45b8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    45ba:	4b05      	ldr	r3, [pc, #20]	; (45d0 <system_init+0x20>)
    45bc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    45be:	4b05      	ldr	r3, [pc, #20]	; (45d4 <system_init+0x24>)
    45c0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    45c2:	4b05      	ldr	r3, [pc, #20]	; (45d8 <system_init+0x28>)
    45c4:	4798      	blx	r3
}
    45c6:	bd10      	pop	{r4, pc}
    45c8:	000040e9 	.word	0x000040e9
    45cc:	00003e71 	.word	0x00003e71
    45d0:	000045ad 	.word	0x000045ad
    45d4:	0000032d 	.word	0x0000032d
    45d8:	000045ad 	.word	0x000045ad

000045dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    45dc:	e7fe      	b.n	45dc <Dummy_Handler>
	...

000045e0 <Reset_Handler>:
{
    45e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    45e2:	4a23      	ldr	r2, [pc, #140]	; (4670 <Reset_Handler+0x90>)
    45e4:	4b23      	ldr	r3, [pc, #140]	; (4674 <Reset_Handler+0x94>)
    45e6:	429a      	cmp	r2, r3
    45e8:	d009      	beq.n	45fe <Reset_Handler+0x1e>
    45ea:	4b22      	ldr	r3, [pc, #136]	; (4674 <Reset_Handler+0x94>)
    45ec:	4a20      	ldr	r2, [pc, #128]	; (4670 <Reset_Handler+0x90>)
    45ee:	e003      	b.n	45f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    45f0:	6811      	ldr	r1, [r2, #0]
    45f2:	6019      	str	r1, [r3, #0]
    45f4:	3304      	adds	r3, #4
    45f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    45f8:	491f      	ldr	r1, [pc, #124]	; (4678 <Reset_Handler+0x98>)
    45fa:	428b      	cmp	r3, r1
    45fc:	d3f8      	bcc.n	45f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    45fe:	4b1f      	ldr	r3, [pc, #124]	; (467c <Reset_Handler+0x9c>)
    4600:	e002      	b.n	4608 <Reset_Handler+0x28>
                *pDest++ = 0;
    4602:	2200      	movs	r2, #0
    4604:	601a      	str	r2, [r3, #0]
    4606:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    4608:	4a1d      	ldr	r2, [pc, #116]	; (4680 <Reset_Handler+0xa0>)
    460a:	4293      	cmp	r3, r2
    460c:	d3f9      	bcc.n	4602 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    460e:	4a1d      	ldr	r2, [pc, #116]	; (4684 <Reset_Handler+0xa4>)
    4610:	21ff      	movs	r1, #255	; 0xff
    4612:	4b1d      	ldr	r3, [pc, #116]	; (4688 <Reset_Handler+0xa8>)
    4614:	438b      	bics	r3, r1
    4616:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4618:	39fd      	subs	r1, #253	; 0xfd
    461a:	2390      	movs	r3, #144	; 0x90
    461c:	005b      	lsls	r3, r3, #1
    461e:	4a1b      	ldr	r2, [pc, #108]	; (468c <Reset_Handler+0xac>)
    4620:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4622:	4a1b      	ldr	r2, [pc, #108]	; (4690 <Reset_Handler+0xb0>)
    4624:	78d3      	ldrb	r3, [r2, #3]
    4626:	2503      	movs	r5, #3
    4628:	43ab      	bics	r3, r5
    462a:	2402      	movs	r4, #2
    462c:	4323      	orrs	r3, r4
    462e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4630:	78d3      	ldrb	r3, [r2, #3]
    4632:	270c      	movs	r7, #12
    4634:	43bb      	bics	r3, r7
    4636:	2608      	movs	r6, #8
    4638:	4333      	orrs	r3, r6
    463a:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    463c:	4b15      	ldr	r3, [pc, #84]	; (4694 <Reset_Handler+0xb4>)
    463e:	7b98      	ldrb	r0, [r3, #14]
    4640:	2230      	movs	r2, #48	; 0x30
    4642:	4390      	bics	r0, r2
    4644:	2220      	movs	r2, #32
    4646:	4310      	orrs	r0, r2
    4648:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    464a:	7b99      	ldrb	r1, [r3, #14]
    464c:	43b9      	bics	r1, r7
    464e:	4331      	orrs	r1, r6
    4650:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4652:	7b9a      	ldrb	r2, [r3, #14]
    4654:	43aa      	bics	r2, r5
    4656:	4322      	orrs	r2, r4
    4658:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    465a:	4a0f      	ldr	r2, [pc, #60]	; (4698 <Reset_Handler+0xb8>)
    465c:	6851      	ldr	r1, [r2, #4]
    465e:	2380      	movs	r3, #128	; 0x80
    4660:	430b      	orrs	r3, r1
    4662:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4664:	4b0d      	ldr	r3, [pc, #52]	; (469c <Reset_Handler+0xbc>)
    4666:	4798      	blx	r3
        main();
    4668:	4b0d      	ldr	r3, [pc, #52]	; (46a0 <Reset_Handler+0xc0>)
    466a:	4798      	blx	r3
    466c:	e7fe      	b.n	466c <Reset_Handler+0x8c>
    466e:	46c0      	nop			; (mov r8, r8)
    4670:	000057d0 	.word	0x000057d0
    4674:	20000000 	.word	0x20000000
    4678:	20000074 	.word	0x20000074
    467c:	20000074 	.word	0x20000074
    4680:	200009e0 	.word	0x200009e0
    4684:	e000ed00 	.word	0xe000ed00
    4688:	00000000 	.word	0x00000000
    468c:	41007000 	.word	0x41007000
    4690:	41005000 	.word	0x41005000
    4694:	41004800 	.word	0x41004800
    4698:	41004000 	.word	0x41004000
    469c:	00004c59 	.word	0x00004c59
    46a0:	0000480d 	.word	0x0000480d

000046a4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    46a4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    46a6:	4a06      	ldr	r2, [pc, #24]	; (46c0 <_sbrk+0x1c>)
    46a8:	6812      	ldr	r2, [r2, #0]
    46aa:	2a00      	cmp	r2, #0
    46ac:	d004      	beq.n	46b8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    46ae:	4a04      	ldr	r2, [pc, #16]	; (46c0 <_sbrk+0x1c>)
    46b0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    46b2:	18c3      	adds	r3, r0, r3
    46b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    46b6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    46b8:	4902      	ldr	r1, [pc, #8]	; (46c4 <_sbrk+0x20>)
    46ba:	4a01      	ldr	r2, [pc, #4]	; (46c0 <_sbrk+0x1c>)
    46bc:	6011      	str	r1, [r2, #0]
    46be:	e7f6      	b.n	46ae <_sbrk+0xa>
    46c0:	2000038c 	.word	0x2000038c
    46c4:	200029e0 	.word	0x200029e0

000046c8 <clock_osc8m_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes the 8 MHz oscillator to be used as the
	*  system clock source.
	*/
void clock_osc8m_init(void){
    46c8:	b500      	push	{lr}
    46ca:	b083      	sub	sp, #12
	//create system clock config struct
	struct system_clock_source_osc8m_config osc8_config;

	//config the 8 MHz oscillator
	//divide by 1 = 8 MHz clock
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    46cc:	a801      	add	r0, sp, #4
    46ce:	2300      	movs	r3, #0
    46d0:	7003      	strb	r3, [r0, #0]
	//run on demand
	osc8_config.on_demand = true;
    46d2:	2201      	movs	r2, #1
    46d4:	7082      	strb	r2, [r0, #2]
	//don't run in standby
	osc8_config.run_in_standby = false;
    46d6:	7043      	strb	r3, [r0, #1]
	    
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    46d8:	4b01      	ldr	r3, [pc, #4]	; (46e0 <clock_osc8m_init+0x18>)
    46da:	4798      	blx	r3
}//end clock_osc8m_init
    46dc:	b003      	add	sp, #12
    46de:	bd00      	pop	{pc}
    46e0:	00003f9d 	.word	0x00003f9d

000046e4 <clock_gclk0_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes GCLK0, so it can be used by 
	*  peripherals. Uses the 8 MHz oscillator as its source.
	*/
void clock_gclk0_init(void){
    46e4:	b500      	push	{lr}
    46e6:	b085      	sub	sp, #20
	//create GLCK0 config struct (for driving peripherals)
	struct system_gclk_gen_config gclk0_config;

	//init MCLK
	system_gclk_init();
    46e8:	4b0a      	ldr	r3, [pc, #40]	; (4714 <clock_gclk0_init+0x30>)
    46ea:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    46ec:	2300      	movs	r3, #0
    46ee:	4a0a      	ldr	r2, [pc, #40]	; (4718 <clock_gclk0_init+0x34>)
    46f0:	7213      	strb	r3, [r2, #8]
	    
	//set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	    
	//use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    46f2:	a901      	add	r1, sp, #4
    46f4:	2206      	movs	r2, #6
    46f6:	700a      	strb	r2, [r1, #0]
	//don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    46f8:	724b      	strb	r3, [r1, #9]
	//We're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    46fa:	704b      	strb	r3, [r1, #1]
	//division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    46fc:	3a05      	subs	r2, #5
    46fe:	604a      	str	r2, [r1, #4]
	//don't run in standby
	gclk0_config.run_in_standby = false;
    4700:	720b      	strb	r3, [r1, #8]
	//set GCLK0's config
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    4702:	2000      	movs	r0, #0
    4704:	4b05      	ldr	r3, [pc, #20]	; (471c <clock_gclk0_init+0x38>)
    4706:	4798      	blx	r3
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    4708:	2000      	movs	r0, #0
    470a:	4b05      	ldr	r3, [pc, #20]	; (4720 <clock_gclk0_init+0x3c>)
    470c:	4798      	blx	r3
}//end clock_gclk0_init
    470e:	b005      	add	sp, #20
    4710:	bd00      	pop	{pc}
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	000041c5 	.word	0x000041c5
    4718:	40000400 	.word	0x40000400
    471c:	000041e9 	.word	0x000041e9
    4720:	000042b9 	.word	0x000042b9

00004724 <sys_clock_init>:
void sys_clock_init(void){
    4724:	b510      	push	{r4, lr}
	clock_osc8m_init();
    4726:	4b05      	ldr	r3, [pc, #20]	; (473c <sys_clock_init+0x18>)
    4728:	4798      	blx	r3
	clock_gclk0_init();
    472a:	4b05      	ldr	r3, [pc, #20]	; (4740 <sys_clock_init+0x1c>)
    472c:	4798      	blx	r3
	clock_osc32k_init();
    472e:	4b05      	ldr	r3, [pc, #20]	; (4744 <sys_clock_init+0x20>)
    4730:	4798      	blx	r3
	clock_gclk2_init();
    4732:	4b05      	ldr	r3, [pc, #20]	; (4748 <sys_clock_init+0x24>)
    4734:	4798      	blx	r3
	delay_init();
    4736:	4b05      	ldr	r3, [pc, #20]	; (474c <sys_clock_init+0x28>)
    4738:	4798      	blx	r3
}//end sys_clock_init
    473a:	bd10      	pop	{r4, pc}
    473c:	000046c9 	.word	0x000046c9
    4740:	000046e5 	.word	0x000046e5
    4744:	00002f65 	.word	0x00002f65
    4748:	00002f8d 	.word	0x00002f8d
    474c:	00000115 	.word	0x00000115

00004750 <configure_port_pins>:
/* Function Name    : configure_port_pins
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config select pins for lcd 
	*/
void configure_port_pins(void){
    4750:	b5f0      	push	{r4, r5, r6, r7, lr}
    4752:	46c6      	mov	lr, r8
    4754:	b500      	push	{lr}
    4756:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4758:	ac01      	add	r4, sp, #4
    475a:	2501      	movs	r5, #1
    475c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    475e:	2300      	movs	r3, #0
    4760:	4698      	mov	r8, r3
    4762:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);

	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4764:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PB16, &config_port_pin);
    4766:	0021      	movs	r1, r4
    4768:	2030      	movs	r0, #48	; 0x30
    476a:	4e0f      	ldr	r6, [pc, #60]	; (47a8 <configure_port_pins+0x58>)
    476c:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    476e:	4f0f      	ldr	r7, [pc, #60]	; (47ac <configure_port_pins+0x5c>)
    4770:	2280      	movs	r2, #128	; 0x80
    4772:	0252      	lsls	r2, r2, #9
    4774:	4b0e      	ldr	r3, [pc, #56]	; (47b0 <configure_port_pins+0x60>)
    4776:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB16, 1);

	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4778:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PA19, &config_port_pin);
    477a:	0021      	movs	r1, r4
    477c:	2013      	movs	r0, #19
    477e:	47b0      	blx	r6
    4780:	2380      	movs	r3, #128	; 0x80
    4782:	031b      	lsls	r3, r3, #12
    4784:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(PIN_PA19, 1);

	// configure outputs
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4786:	7025      	strb	r5, [r4, #0]
	config_port_pin.input_pull = LCD_PD_PULL;
    4788:	4643      	mov	r3, r8
    478a:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(LCD_PD, &config_port_pin);
    478c:	0021      	movs	r1, r4
    478e:	2008      	movs	r0, #8
    4790:	47b0      	blx	r6
    4792:	2380      	movs	r3, #128	; 0x80
    4794:	005b      	lsls	r3, r3, #1
    4796:	61bb      	str	r3, [r7, #24]
	
	port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
	
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4798:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(EEPROM_CS,&config_port_pin);
    479a:	0021      	movs	r1, r4
    479c:	200d      	movs	r0, #13
    479e:	47b0      	blx	r6
	port_pin_set_output_level(PIN_PB15, true);	
	
*/


}//end configure_port_pins
    47a0:	b002      	add	sp, #8
    47a2:	bc04      	pop	{r2}
    47a4:	4690      	mov	r8, r2
    47a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47a8:	00003e4d 	.word	0x00003e4d
    47ac:	41004400 	.word	0x41004400
    47b0:	41004480 	.word	0x41004480

000047b4 <sim_system_init>:
void sim_system_init(void){
    47b4:	b510      	push	{r4, lr}
	system_init();
    47b6:	4b0b      	ldr	r3, [pc, #44]	; (47e4 <sim_system_init+0x30>)
    47b8:	4798      	blx	r3
	sys_clock_init();
    47ba:	4b0b      	ldr	r3, [pc, #44]	; (47e8 <sim_system_init+0x34>)
    47bc:	4798      	blx	r3
	configure_port_pins();
    47be:	4b0b      	ldr	r3, [pc, #44]	; (47ec <sim_system_init+0x38>)
    47c0:	4798      	blx	r3
	lcd_spi_init();
    47c2:	4b0b      	ldr	r3, [pc, #44]	; (47f0 <sim_system_init+0x3c>)
    47c4:	4798      	blx	r3
	configure_ext_ints();
    47c6:	4b0b      	ldr	r3, [pc, #44]	; (47f4 <sim_system_init+0x40>)
    47c8:	4798      	blx	r3
	configure_ext_int_callback();
    47ca:	4b0b      	ldr	r3, [pc, #44]	; (47f8 <sim_system_init+0x44>)
    47cc:	4798      	blx	r3
	lcd_init_seq(); 
    47ce:	4b0b      	ldr	r3, [pc, #44]	; (47fc <sim_system_init+0x48>)
    47d0:	4798      	blx	r3
	lcd_int_mask(LCD_DEFAULT_MASK);
    47d2:	2104      	movs	r1, #4
    47d4:	480a      	ldr	r0, [pc, #40]	; (4800 <sim_system_init+0x4c>)
    47d6:	4c0b      	ldr	r4, [pc, #44]	; (4804 <sim_system_init+0x50>)
    47d8:	47a0      	blx	r4
	lcd_int_enable();
    47da:	2101      	movs	r1, #1
    47dc:	480a      	ldr	r0, [pc, #40]	; (4808 <sim_system_init+0x54>)
    47de:	47a0      	blx	r4
}//end sim_system_init
    47e0:	bd10      	pop	{r4, pc}
    47e2:	46c0      	nop			; (mov r8, r8)
    47e4:	000045b1 	.word	0x000045b1
    47e8:	00004725 	.word	0x00004725
    47ec:	00004751 	.word	0x00004751
    47f0:	00002fc5 	.word	0x00002fc5
    47f4:	00002e61 	.word	0x00002e61
    47f8:	00002e89 	.word	0x00002e89
    47fc:	00003309 	.word	0x00003309
    4800:	003020b0 	.word	0x003020b0
    4804:	0000320d 	.word	0x0000320d
    4808:	003020ac 	.word	0x003020ac

0000480c <main>:
int main(void){
    480c:	b5f0      	push	{r4, r5, r6, r7, lr}
    480e:	b087      	sub	sp, #28
	sim_system_init();
    4810:	4b86      	ldr	r3, [pc, #536]	; (4a2c <main+0x220>)
    4812:	4798      	blx	r3
	cpu_irq_enable();
    4814:	4d86      	ldr	r5, [pc, #536]	; (4a30 <main+0x224>)
    4816:	2601      	movs	r6, #1
    4818:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    481a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    481e:	b662      	cpsie	i
	configure_rtc_calendar();
    4820:	4b84      	ldr	r3, [pc, #528]	; (4a34 <main+0x228>)
    4822:	4798      	blx	r3
	phost = &host;
    4824:	4c84      	ldr	r4, [pc, #528]	; (4a38 <main+0x22c>)
    4826:	4885      	ldr	r0, [pc, #532]	; (4a3c <main+0x230>)
    4828:	6020      	str	r0, [r4, #0]
	Ft_Gpu_Hal_Open(phost);
    482a:	4b85      	ldr	r3, [pc, #532]	; (4a40 <main+0x234>)
    482c:	4798      	blx	r3
	Ft_Gpu_Hal_Wr8(phost, REG_INT_EN, 1);
    482e:	2201      	movs	r2, #1
    4830:	4984      	ldr	r1, [pc, #528]	; (4a44 <main+0x238>)
    4832:	6820      	ldr	r0, [r4, #0]
    4834:	4f84      	ldr	r7, [pc, #528]	; (4a48 <main+0x23c>)
    4836:	47b8      	blx	r7
	Ft_Gpu_Hal_Wr8(phost, REG_INT_MASK, 6);
    4838:	6820      	ldr	r0, [r4, #0]
    483a:	2206      	movs	r2, #6
    483c:	4983      	ldr	r1, [pc, #524]	; (4a4c <main+0x240>)
    483e:	47b8      	blx	r7
	delay_ms(2000);
    4840:	20fa      	movs	r0, #250	; 0xfa
    4842:	00c0      	lsls	r0, r0, #3
    4844:	4b82      	ldr	r3, [pc, #520]	; (4a50 <main+0x244>)
    4846:	4798      	blx	r3
	cpu_irq_enable();
    4848:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    484a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    484e:	b662      	cpsie	i
	mstimer_init();
    4850:	4b80      	ldr	r3, [pc, #512]	; (4a54 <main+0x248>)
    4852:	4798      	blx	r3
	rs485_baud_rate_set(38400);
    4854:	2096      	movs	r0, #150	; 0x96
    4856:	0200      	lsls	r0, r0, #8
    4858:	4b7f      	ldr	r3, [pc, #508]	; (4a58 <main+0x24c>)
    485a:	4798      	blx	r3
	rs485_init();
    485c:	4b7f      	ldr	r3, [pc, #508]	; (4a5c <main+0x250>)
    485e:	4798      	blx	r3
	mstimer_set(&Blink_Timer, 125);
    4860:	217d      	movs	r1, #125	; 0x7d
    4862:	487f      	ldr	r0, [pc, #508]	; (4a60 <main+0x254>)
    4864:	4b7f      	ldr	r3, [pc, #508]	; (4a64 <main+0x258>)
    4866:	4798      	blx	r3
    4868:	e01d      	b.n	48a6 <main+0x9a>
			current_fiber1_data.rssi_values = readings;//get_fiber1_data();
    486a:	2204      	movs	r2, #4
    486c:	a905      	add	r1, sp, #20
    486e:	487e      	ldr	r0, [pc, #504]	; (4a68 <main+0x25c>)
    4870:	3008      	adds	r0, #8
    4872:	4b7e      	ldr	r3, [pc, #504]	; (4a6c <main+0x260>)
    4874:	4798      	blx	r3
    4876:	e01d      	b.n	48b4 <main+0xa8>
			current_fiber2_data.rssi_values = readings; //get_fiber2_data();
    4878:	2204      	movs	r2, #4
    487a:	a905      	add	r1, sp, #20
    487c:	487c      	ldr	r0, [pc, #496]	; (4a70 <main+0x264>)
    487e:	3008      	adds	r0, #8
    4880:	4b7a      	ldr	r3, [pc, #488]	; (4a6c <main+0x260>)
    4882:	4798      	blx	r3
    4884:	e01a      	b.n	48bc <main+0xb0>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    4886:	33ff      	adds	r3, #255	; 0xff
    4888:	e054      	b.n	4934 <main+0x128>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    488a:	33fe      	adds	r3, #254	; 0xfe
    488c:	e069      	b.n	4962 <main+0x156>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    488e:	33fd      	adds	r3, #253	; 0xfd
    4890:	e080      	b.n	4994 <main+0x188>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    4892:	33fc      	adds	r3, #252	; 0xfc
    4894:	e096      	b.n	49c4 <main+0x1b8>
			if(tempTag == attn)			    attnOp();	//attnOp(current_fiber1_data, current_fiber2_data);
    4896:	4b77      	ldr	r3, [pc, #476]	; (4a74 <main+0x268>)
    4898:	4798      	blx	r3
			tempTag = 0;
    489a:	2200      	movs	r2, #0
    489c:	4b76      	ldr	r3, [pc, #472]	; (4a78 <main+0x26c>)
    489e:	701a      	strb	r2, [r3, #0]
			delay_ms(50);
    48a0:	2032      	movs	r0, #50	; 0x32
    48a2:	4b6b      	ldr	r3, [pc, #428]	; (4a50 <main+0x244>)
    48a4:	4798      	blx	r3
		struct measurement readings = {10,20,30,40};
    48a6:	4b75      	ldr	r3, [pc, #468]	; (4a7c <main+0x270>)
    48a8:	681b      	ldr	r3, [r3, #0]
    48aa:	9305      	str	r3, [sp, #20]
		if(get_fiber1_status() == data_ready)
    48ac:	4b74      	ldr	r3, [pc, #464]	; (4a80 <main+0x274>)
    48ae:	4798      	blx	r3
    48b0:	2801      	cmp	r0, #1
    48b2:	d0da      	beq.n	486a <main+0x5e>
		if(get_fiber2_status() == data_ready)
    48b4:	4b73      	ldr	r3, [pc, #460]	; (4a84 <main+0x278>)
    48b6:	4798      	blx	r3
    48b8:	2801      	cmp	r0, #1
    48ba:	d0dd      	beq.n	4878 <main+0x6c>
    48bc:	4d72      	ldr	r5, [pc, #456]	; (4a88 <main+0x27c>)
    48be:	4e73      	ldr	r6, [pc, #460]	; (4a8c <main+0x280>)
    48c0:	2780      	movs	r7, #128	; 0x80
    48c2:	027f      	lsls	r7, r7, #9
    48c4:	61b7      	str	r7, [r6, #24]
		delay_ms(1);
    48c6:	2001      	movs	r0, #1
    48c8:	4c61      	ldr	r4, [pc, #388]	; (4a50 <main+0x244>)
    48ca:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    48cc:	6177      	str	r7, [r6, #20]
		delay_ms(1);
    48ce:	2001      	movs	r0, #1
    48d0:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    48d2:	2680      	movs	r6, #128	; 0x80
    48d4:	0336      	lsls	r6, r6, #12
    48d6:	61ae      	str	r6, [r5, #24]
		delay_ms(1);
    48d8:	2001      	movs	r0, #1
    48da:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    48dc:	616e      	str	r6, [r5, #20]
		tag = 0;
    48de:	4d6c      	ldr	r5, [pc, #432]	; (4a90 <main+0x284>)
    48e0:	2300      	movs	r3, #0
    48e2:	702b      	strb	r3, [r5, #0]
		disStart();
    48e4:	4b6b      	ldr	r3, [pc, #428]	; (4a94 <main+0x288>)
    48e6:	4798      	blx	r3
		Ft_Gpu_CoCmd_Gradient(phost, 0, 0x060A39, 0, disWid, disHei, 0x0A4F7A);
    48e8:	4c53      	ldr	r4, [pc, #332]	; (4a38 <main+0x22c>)
    48ea:	6820      	ldr	r0, [r4, #0]
    48ec:	4b6a      	ldr	r3, [pc, #424]	; (4a98 <main+0x28c>)
    48ee:	9302      	str	r3, [sp, #8]
    48f0:	23f0      	movs	r3, #240	; 0xf0
    48f2:	005b      	lsls	r3, r3, #1
    48f4:	9301      	str	r3, [sp, #4]
    48f6:	3341      	adds	r3, #65	; 0x41
    48f8:	33ff      	adds	r3, #255	; 0xff
    48fa:	9300      	str	r3, [sp, #0]
    48fc:	2300      	movs	r3, #0
    48fe:	4a67      	ldr	r2, [pc, #412]	; (4a9c <main+0x290>)
    4900:	2100      	movs	r1, #0
    4902:	4e67      	ldr	r6, [pc, #412]	; (4aa0 <main+0x294>)
    4904:	47b0      	blx	r6
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    4906:	2180      	movs	r1, #128	; 0x80
    4908:	04c9      	lsls	r1, r1, #19
    490a:	6820      	ldr	r0, [r4, #0]
    490c:	4e65      	ldr	r6, [pc, #404]	; (4aa4 <main+0x298>)
    490e:	47b0      	blx	r6
		printTime();
    4910:	4b65      	ldr	r3, [pc, #404]	; (4aa8 <main+0x29c>)
    4912:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    4914:	4965      	ldr	r1, [pc, #404]	; (4aac <main+0x2a0>)
    4916:	6820      	ldr	r0, [r4, #0]
    4918:	47b0      	blx	r6
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    491a:	4965      	ldr	r1, [pc, #404]	; (4ab0 <main+0x2a4>)
    491c:	6820      	ldr	r0, [r4, #0]
    491e:	4b65      	ldr	r3, [pc, #404]	; (4ab4 <main+0x2a8>)
    4920:	4798      	blx	r3
    4922:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_Hal_WrCmd32(phost,TAG(attn));
    4924:	4964      	ldr	r1, [pc, #400]	; (4ab8 <main+0x2ac>)
    4926:	6820      	ldr	r0, [r4, #0]
    4928:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    492a:	6820      	ldr	r0, [r4, #0]
    492c:	782b      	ldrb	r3, [r5, #0]
    492e:	2b01      	cmp	r3, #1
    4930:	d0a9      	beq.n	4886 <main+0x7a>
    4932:	2300      	movs	r3, #0
    4934:	4a61      	ldr	r2, [pc, #388]	; (4abc <main+0x2b0>)
    4936:	9203      	str	r2, [sp, #12]
    4938:	9302      	str	r3, [sp, #8]
    493a:	231e      	movs	r3, #30
    493c:	9301      	str	r3, [sp, #4]
    493e:	335a      	adds	r3, #90	; 0x5a
    4940:	9300      	str	r3, [sp, #0]
    4942:	3350      	adds	r3, #80	; 0x50
    4944:	226e      	movs	r2, #110	; 0x6e
    4946:	21b8      	movs	r1, #184	; 0xb8
    4948:	4c5d      	ldr	r4, [pc, #372]	; (4ac0 <main+0x2b4>)
    494a:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(hist));
    494c:	4c3a      	ldr	r4, [pc, #232]	; (4a38 <main+0x22c>)
    494e:	495d      	ldr	r1, [pc, #372]	; (4ac4 <main+0x2b8>)
    4950:	6820      	ldr	r0, [r4, #0]
    4952:	4b54      	ldr	r3, [pc, #336]	; (4aa4 <main+0x298>)
    4954:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    4956:	6820      	ldr	r0, [r4, #0]
    4958:	4b4d      	ldr	r3, [pc, #308]	; (4a90 <main+0x284>)
    495a:	781b      	ldrb	r3, [r3, #0]
    495c:	2b02      	cmp	r3, #2
    495e:	d094      	beq.n	488a <main+0x7e>
    4960:	2300      	movs	r3, #0
    4962:	4a59      	ldr	r2, [pc, #356]	; (4ac8 <main+0x2bc>)
    4964:	9203      	str	r2, [sp, #12]
    4966:	9302      	str	r3, [sp, #8]
    4968:	231e      	movs	r3, #30
    496a:	9301      	str	r3, [sp, #4]
    496c:	335a      	adds	r3, #90	; 0x5a
    496e:	9300      	str	r3, [sp, #0]
    4970:	3350      	adds	r3, #80	; 0x50
    4972:	226e      	movs	r2, #110	; 0x6e
    4974:	21d0      	movs	r1, #208	; 0xd0
    4976:	0049      	lsls	r1, r1, #1
    4978:	4c51      	ldr	r4, [pc, #324]	; (4ac0 <main+0x2b4>)
    497a:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(rssi));
    497c:	4c2e      	ldr	r4, [pc, #184]	; (4a38 <main+0x22c>)
    497e:	4953      	ldr	r1, [pc, #332]	; (4acc <main+0x2c0>)
    4980:	6820      	ldr	r0, [r4, #0]
    4982:	4b48      	ldr	r3, [pc, #288]	; (4aa4 <main+0x298>)
    4984:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    4986:	6820      	ldr	r0, [r4, #0]
    4988:	4b41      	ldr	r3, [pc, #260]	; (4a90 <main+0x284>)
    498a:	781b      	ldrb	r3, [r3, #0]
    498c:	2b03      	cmp	r3, #3
    498e:	d100      	bne.n	4992 <main+0x186>
    4990:	e77d      	b.n	488e <main+0x82>
    4992:	2300      	movs	r3, #0
    4994:	4a4e      	ldr	r2, [pc, #312]	; (4ad0 <main+0x2c4>)
    4996:	9203      	str	r2, [sp, #12]
    4998:	9302      	str	r3, [sp, #8]
    499a:	231e      	movs	r3, #30
    499c:	9301      	str	r3, [sp, #4]
    499e:	335a      	adds	r3, #90	; 0x5a
    49a0:	9300      	str	r3, [sp, #0]
    49a2:	3350      	adds	r3, #80	; 0x50
    49a4:	22f9      	movs	r2, #249	; 0xf9
    49a6:	21b8      	movs	r1, #184	; 0xb8
    49a8:	4c45      	ldr	r4, [pc, #276]	; (4ac0 <main+0x2b4>)
    49aa:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sett));
    49ac:	4c22      	ldr	r4, [pc, #136]	; (4a38 <main+0x22c>)
    49ae:	4949      	ldr	r1, [pc, #292]	; (4ad4 <main+0x2c8>)
    49b0:	6820      	ldr	r0, [r4, #0]
    49b2:	4b3c      	ldr	r3, [pc, #240]	; (4aa4 <main+0x298>)
    49b4:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    49b6:	6820      	ldr	r0, [r4, #0]
    49b8:	4b35      	ldr	r3, [pc, #212]	; (4a90 <main+0x284>)
    49ba:	781b      	ldrb	r3, [r3, #0]
    49bc:	2b04      	cmp	r3, #4
    49be:	d100      	bne.n	49c2 <main+0x1b6>
    49c0:	e767      	b.n	4892 <main+0x86>
    49c2:	2300      	movs	r3, #0
    49c4:	4a44      	ldr	r2, [pc, #272]	; (4ad8 <main+0x2cc>)
    49c6:	9203      	str	r2, [sp, #12]
    49c8:	9302      	str	r3, [sp, #8]
    49ca:	231e      	movs	r3, #30
    49cc:	9301      	str	r3, [sp, #4]
    49ce:	335a      	adds	r3, #90	; 0x5a
    49d0:	9300      	str	r3, [sp, #0]
    49d2:	3350      	adds	r3, #80	; 0x50
    49d4:	22f9      	movs	r2, #249	; 0xf9
    49d6:	21d0      	movs	r1, #208	; 0xd0
    49d8:	0049      	lsls	r1, r1, #1
    49da:	4c39      	ldr	r4, [pc, #228]	; (4ac0 <main+0x2b4>)
    49dc:	47a0      	blx	r4
		disEnd();
    49de:	4b3f      	ldr	r3, [pc, #252]	; (4adc <main+0x2d0>)
    49e0:	4798      	blx	r3
		if(tag!=0)		tempTag = tag;
    49e2:	4b2b      	ldr	r3, [pc, #172]	; (4a90 <main+0x284>)
    49e4:	781b      	ldrb	r3, [r3, #0]
    49e6:	2b00      	cmp	r3, #0
    49e8:	d001      	beq.n	49ee <main+0x1e2>
    49ea:	4a23      	ldr	r2, [pc, #140]	; (4a78 <main+0x26c>)
    49ec:	7013      	strb	r3, [r2, #0]
		if (tempTag != tag && tag == 0 && tag!=back){
    49ee:	4a22      	ldr	r2, [pc, #136]	; (4a78 <main+0x26c>)
    49f0:	7812      	ldrb	r2, [r2, #0]
    49f2:	4293      	cmp	r3, r2
    49f4:	d100      	bne.n	49f8 <main+0x1ec>
    49f6:	e756      	b.n	48a6 <main+0x9a>
    49f8:	2b00      	cmp	r3, #0
    49fa:	d000      	beq.n	49fe <main+0x1f2>
    49fc:	e753      	b.n	48a6 <main+0x9a>
    49fe:	2b06      	cmp	r3, #6
    4a00:	d100      	bne.n	4a04 <main+0x1f8>
    4a02:	e750      	b.n	48a6 <main+0x9a>
			if(tempTag == attn)			    attnOp();	//attnOp(current_fiber1_data, current_fiber2_data);
    4a04:	2a01      	cmp	r2, #1
    4a06:	d100      	bne.n	4a0a <main+0x1fe>
    4a08:	e745      	b.n	4896 <main+0x8a>
			else if(tempTag == hist)		historyOp();
    4a0a:	2a02      	cmp	r2, #2
    4a0c:	d007      	beq.n	4a1e <main+0x212>
			else if(tempTag == sett)		settingOp();
    4a0e:	2a04      	cmp	r2, #4
    4a10:	d008      	beq.n	4a24 <main+0x218>
			else if(tempTag == rssi)		rssiOp();
    4a12:	2a03      	cmp	r2, #3
    4a14:	d000      	beq.n	4a18 <main+0x20c>
    4a16:	e740      	b.n	489a <main+0x8e>
    4a18:	4b31      	ldr	r3, [pc, #196]	; (4ae0 <main+0x2d4>)
    4a1a:	4798      	blx	r3
    4a1c:	e73d      	b.n	489a <main+0x8e>
			else if(tempTag == hist)		historyOp();
    4a1e:	4b31      	ldr	r3, [pc, #196]	; (4ae4 <main+0x2d8>)
    4a20:	4798      	blx	r3
    4a22:	e73a      	b.n	489a <main+0x8e>
			else if(tempTag == sett)		settingOp();
    4a24:	4b30      	ldr	r3, [pc, #192]	; (4ae8 <main+0x2dc>)
    4a26:	4798      	blx	r3
    4a28:	e737      	b.n	489a <main+0x8e>
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	000047b5 	.word	0x000047b5
    4a30:	2000000b 	.word	0x2000000b
    4a34:	00002ea1 	.word	0x00002ea1
    4a38:	20000720 	.word	0x20000720
    4a3c:	20000408 	.word	0x20000408
    4a40:	0000174d 	.word	0x0000174d
    4a44:	003020ac 	.word	0x003020ac
    4a48:	000018fd 	.word	0x000018fd
    4a4c:	003020b0 	.word	0x003020b0
    4a50:	00000151 	.word	0x00000151
    4a54:	000034c1 	.word	0x000034c1
    4a58:	00003739 	.word	0x00003739
    4a5c:	00003751 	.word	0x00003751
    4a60:	20000390 	.word	0x20000390
    4a64:	00001351 	.word	0x00001351
    4a68:	200009d0 	.word	0x200009d0
    4a6c:	00004ca1 	.word	0x00004ca1
    4a70:	200009c4 	.word	0x200009c4
    4a74:	00001edd 	.word	0x00001edd
    4a78:	200000b6 	.word	0x200000b6
    4a7c:	00005740 	.word	0x00005740
    4a80:	00001365 	.word	0x00001365
    4a84:	00001371 	.word	0x00001371
    4a88:	41004400 	.word	0x41004400
    4a8c:	41004480 	.word	0x41004480
    4a90:	200000b5 	.word	0x200000b5
    4a94:	00001e85 	.word	0x00001e85
    4a98:	000a4f7a 	.word	0x000a4f7a
    4a9c:	00000a39 	.word	0x00000a39
    4aa0:	00001605 	.word	0x00001605
    4aa4:	00001a15 	.word	0x00001a15
    4aa8:	00001a85 	.word	0x00001a85
    4aac:	04ffffff 	.word	0x04ffffff
    4ab0:	0030212c 	.word	0x0030212c
    4ab4:	000018a5 	.word	0x000018a5
    4ab8:	03000001 	.word	0x03000001
    4abc:	00005744 	.word	0x00005744
    4ac0:	000014e5 	.word	0x000014e5
    4ac4:	03000002 	.word	0x03000002
    4ac8:	00005754 	.word	0x00005754
    4acc:	03000003 	.word	0x03000003
    4ad0:	00005760 	.word	0x00005760
    4ad4:	03000004 	.word	0x03000004
    4ad8:	0000576c 	.word	0x0000576c
    4adc:	00001eb1 	.word	0x00001eb1
    4ae0:	0000236d 	.word	0x0000236d
    4ae4:	00002229 	.word	0x00002229
    4ae8:	00002b81 	.word	0x00002b81

00004aec <__udivsi3>:
    4aec:	2200      	movs	r2, #0
    4aee:	0843      	lsrs	r3, r0, #1
    4af0:	428b      	cmp	r3, r1
    4af2:	d374      	bcc.n	4bde <__udivsi3+0xf2>
    4af4:	0903      	lsrs	r3, r0, #4
    4af6:	428b      	cmp	r3, r1
    4af8:	d35f      	bcc.n	4bba <__udivsi3+0xce>
    4afa:	0a03      	lsrs	r3, r0, #8
    4afc:	428b      	cmp	r3, r1
    4afe:	d344      	bcc.n	4b8a <__udivsi3+0x9e>
    4b00:	0b03      	lsrs	r3, r0, #12
    4b02:	428b      	cmp	r3, r1
    4b04:	d328      	bcc.n	4b58 <__udivsi3+0x6c>
    4b06:	0c03      	lsrs	r3, r0, #16
    4b08:	428b      	cmp	r3, r1
    4b0a:	d30d      	bcc.n	4b28 <__udivsi3+0x3c>
    4b0c:	22ff      	movs	r2, #255	; 0xff
    4b0e:	0209      	lsls	r1, r1, #8
    4b10:	ba12      	rev	r2, r2
    4b12:	0c03      	lsrs	r3, r0, #16
    4b14:	428b      	cmp	r3, r1
    4b16:	d302      	bcc.n	4b1e <__udivsi3+0x32>
    4b18:	1212      	asrs	r2, r2, #8
    4b1a:	0209      	lsls	r1, r1, #8
    4b1c:	d065      	beq.n	4bea <__udivsi3+0xfe>
    4b1e:	0b03      	lsrs	r3, r0, #12
    4b20:	428b      	cmp	r3, r1
    4b22:	d319      	bcc.n	4b58 <__udivsi3+0x6c>
    4b24:	e000      	b.n	4b28 <__udivsi3+0x3c>
    4b26:	0a09      	lsrs	r1, r1, #8
    4b28:	0bc3      	lsrs	r3, r0, #15
    4b2a:	428b      	cmp	r3, r1
    4b2c:	d301      	bcc.n	4b32 <__udivsi3+0x46>
    4b2e:	03cb      	lsls	r3, r1, #15
    4b30:	1ac0      	subs	r0, r0, r3
    4b32:	4152      	adcs	r2, r2
    4b34:	0b83      	lsrs	r3, r0, #14
    4b36:	428b      	cmp	r3, r1
    4b38:	d301      	bcc.n	4b3e <__udivsi3+0x52>
    4b3a:	038b      	lsls	r3, r1, #14
    4b3c:	1ac0      	subs	r0, r0, r3
    4b3e:	4152      	adcs	r2, r2
    4b40:	0b43      	lsrs	r3, r0, #13
    4b42:	428b      	cmp	r3, r1
    4b44:	d301      	bcc.n	4b4a <__udivsi3+0x5e>
    4b46:	034b      	lsls	r3, r1, #13
    4b48:	1ac0      	subs	r0, r0, r3
    4b4a:	4152      	adcs	r2, r2
    4b4c:	0b03      	lsrs	r3, r0, #12
    4b4e:	428b      	cmp	r3, r1
    4b50:	d301      	bcc.n	4b56 <__udivsi3+0x6a>
    4b52:	030b      	lsls	r3, r1, #12
    4b54:	1ac0      	subs	r0, r0, r3
    4b56:	4152      	adcs	r2, r2
    4b58:	0ac3      	lsrs	r3, r0, #11
    4b5a:	428b      	cmp	r3, r1
    4b5c:	d301      	bcc.n	4b62 <__udivsi3+0x76>
    4b5e:	02cb      	lsls	r3, r1, #11
    4b60:	1ac0      	subs	r0, r0, r3
    4b62:	4152      	adcs	r2, r2
    4b64:	0a83      	lsrs	r3, r0, #10
    4b66:	428b      	cmp	r3, r1
    4b68:	d301      	bcc.n	4b6e <__udivsi3+0x82>
    4b6a:	028b      	lsls	r3, r1, #10
    4b6c:	1ac0      	subs	r0, r0, r3
    4b6e:	4152      	adcs	r2, r2
    4b70:	0a43      	lsrs	r3, r0, #9
    4b72:	428b      	cmp	r3, r1
    4b74:	d301      	bcc.n	4b7a <__udivsi3+0x8e>
    4b76:	024b      	lsls	r3, r1, #9
    4b78:	1ac0      	subs	r0, r0, r3
    4b7a:	4152      	adcs	r2, r2
    4b7c:	0a03      	lsrs	r3, r0, #8
    4b7e:	428b      	cmp	r3, r1
    4b80:	d301      	bcc.n	4b86 <__udivsi3+0x9a>
    4b82:	020b      	lsls	r3, r1, #8
    4b84:	1ac0      	subs	r0, r0, r3
    4b86:	4152      	adcs	r2, r2
    4b88:	d2cd      	bcs.n	4b26 <__udivsi3+0x3a>
    4b8a:	09c3      	lsrs	r3, r0, #7
    4b8c:	428b      	cmp	r3, r1
    4b8e:	d301      	bcc.n	4b94 <__udivsi3+0xa8>
    4b90:	01cb      	lsls	r3, r1, #7
    4b92:	1ac0      	subs	r0, r0, r3
    4b94:	4152      	adcs	r2, r2
    4b96:	0983      	lsrs	r3, r0, #6
    4b98:	428b      	cmp	r3, r1
    4b9a:	d301      	bcc.n	4ba0 <__udivsi3+0xb4>
    4b9c:	018b      	lsls	r3, r1, #6
    4b9e:	1ac0      	subs	r0, r0, r3
    4ba0:	4152      	adcs	r2, r2
    4ba2:	0943      	lsrs	r3, r0, #5
    4ba4:	428b      	cmp	r3, r1
    4ba6:	d301      	bcc.n	4bac <__udivsi3+0xc0>
    4ba8:	014b      	lsls	r3, r1, #5
    4baa:	1ac0      	subs	r0, r0, r3
    4bac:	4152      	adcs	r2, r2
    4bae:	0903      	lsrs	r3, r0, #4
    4bb0:	428b      	cmp	r3, r1
    4bb2:	d301      	bcc.n	4bb8 <__udivsi3+0xcc>
    4bb4:	010b      	lsls	r3, r1, #4
    4bb6:	1ac0      	subs	r0, r0, r3
    4bb8:	4152      	adcs	r2, r2
    4bba:	08c3      	lsrs	r3, r0, #3
    4bbc:	428b      	cmp	r3, r1
    4bbe:	d301      	bcc.n	4bc4 <__udivsi3+0xd8>
    4bc0:	00cb      	lsls	r3, r1, #3
    4bc2:	1ac0      	subs	r0, r0, r3
    4bc4:	4152      	adcs	r2, r2
    4bc6:	0883      	lsrs	r3, r0, #2
    4bc8:	428b      	cmp	r3, r1
    4bca:	d301      	bcc.n	4bd0 <__udivsi3+0xe4>
    4bcc:	008b      	lsls	r3, r1, #2
    4bce:	1ac0      	subs	r0, r0, r3
    4bd0:	4152      	adcs	r2, r2
    4bd2:	0843      	lsrs	r3, r0, #1
    4bd4:	428b      	cmp	r3, r1
    4bd6:	d301      	bcc.n	4bdc <__udivsi3+0xf0>
    4bd8:	004b      	lsls	r3, r1, #1
    4bda:	1ac0      	subs	r0, r0, r3
    4bdc:	4152      	adcs	r2, r2
    4bde:	1a41      	subs	r1, r0, r1
    4be0:	d200      	bcs.n	4be4 <__udivsi3+0xf8>
    4be2:	4601      	mov	r1, r0
    4be4:	4152      	adcs	r2, r2
    4be6:	4610      	mov	r0, r2
    4be8:	4770      	bx	lr
    4bea:	e7ff      	b.n	4bec <__udivsi3+0x100>
    4bec:	b501      	push	{r0, lr}
    4bee:	2000      	movs	r0, #0
    4bf0:	f000 f806 	bl	4c00 <__aeabi_idiv0>
    4bf4:	bd02      	pop	{r1, pc}
    4bf6:	46c0      	nop			; (mov r8, r8)

00004bf8 <__aeabi_uidivmod>:
    4bf8:	2900      	cmp	r1, #0
    4bfa:	d0f7      	beq.n	4bec <__udivsi3+0x100>
    4bfc:	e776      	b.n	4aec <__udivsi3>
    4bfe:	4770      	bx	lr

00004c00 <__aeabi_idiv0>:
    4c00:	4770      	bx	lr
    4c02:	46c0      	nop			; (mov r8, r8)

00004c04 <__aeabi_lmul>:
    4c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c06:	46ce      	mov	lr, r9
    4c08:	4647      	mov	r7, r8
    4c0a:	0415      	lsls	r5, r2, #16
    4c0c:	0c2d      	lsrs	r5, r5, #16
    4c0e:	002e      	movs	r6, r5
    4c10:	b580      	push	{r7, lr}
    4c12:	0407      	lsls	r7, r0, #16
    4c14:	0c14      	lsrs	r4, r2, #16
    4c16:	0c3f      	lsrs	r7, r7, #16
    4c18:	4699      	mov	r9, r3
    4c1a:	0c03      	lsrs	r3, r0, #16
    4c1c:	437e      	muls	r6, r7
    4c1e:	435d      	muls	r5, r3
    4c20:	4367      	muls	r7, r4
    4c22:	4363      	muls	r3, r4
    4c24:	197f      	adds	r7, r7, r5
    4c26:	0c34      	lsrs	r4, r6, #16
    4c28:	19e4      	adds	r4, r4, r7
    4c2a:	469c      	mov	ip, r3
    4c2c:	42a5      	cmp	r5, r4
    4c2e:	d903      	bls.n	4c38 <__aeabi_lmul+0x34>
    4c30:	2380      	movs	r3, #128	; 0x80
    4c32:	025b      	lsls	r3, r3, #9
    4c34:	4698      	mov	r8, r3
    4c36:	44c4      	add	ip, r8
    4c38:	464b      	mov	r3, r9
    4c3a:	4351      	muls	r1, r2
    4c3c:	4343      	muls	r3, r0
    4c3e:	0436      	lsls	r6, r6, #16
    4c40:	0c36      	lsrs	r6, r6, #16
    4c42:	0c25      	lsrs	r5, r4, #16
    4c44:	0424      	lsls	r4, r4, #16
    4c46:	4465      	add	r5, ip
    4c48:	19a4      	adds	r4, r4, r6
    4c4a:	1859      	adds	r1, r3, r1
    4c4c:	1949      	adds	r1, r1, r5
    4c4e:	0020      	movs	r0, r4
    4c50:	bc0c      	pop	{r2, r3}
    4c52:	4690      	mov	r8, r2
    4c54:	4699      	mov	r9, r3
    4c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004c58 <__libc_init_array>:
    4c58:	b570      	push	{r4, r5, r6, lr}
    4c5a:	2600      	movs	r6, #0
    4c5c:	4d0c      	ldr	r5, [pc, #48]	; (4c90 <__libc_init_array+0x38>)
    4c5e:	4c0d      	ldr	r4, [pc, #52]	; (4c94 <__libc_init_array+0x3c>)
    4c60:	1b64      	subs	r4, r4, r5
    4c62:	10a4      	asrs	r4, r4, #2
    4c64:	42a6      	cmp	r6, r4
    4c66:	d109      	bne.n	4c7c <__libc_init_array+0x24>
    4c68:	2600      	movs	r6, #0
    4c6a:	f000 fda1 	bl	57b0 <_init>
    4c6e:	4d0a      	ldr	r5, [pc, #40]	; (4c98 <__libc_init_array+0x40>)
    4c70:	4c0a      	ldr	r4, [pc, #40]	; (4c9c <__libc_init_array+0x44>)
    4c72:	1b64      	subs	r4, r4, r5
    4c74:	10a4      	asrs	r4, r4, #2
    4c76:	42a6      	cmp	r6, r4
    4c78:	d105      	bne.n	4c86 <__libc_init_array+0x2e>
    4c7a:	bd70      	pop	{r4, r5, r6, pc}
    4c7c:	00b3      	lsls	r3, r6, #2
    4c7e:	58eb      	ldr	r3, [r5, r3]
    4c80:	4798      	blx	r3
    4c82:	3601      	adds	r6, #1
    4c84:	e7ee      	b.n	4c64 <__libc_init_array+0xc>
    4c86:	00b3      	lsls	r3, r6, #2
    4c88:	58eb      	ldr	r3, [r5, r3]
    4c8a:	4798      	blx	r3
    4c8c:	3601      	adds	r6, #1
    4c8e:	e7f2      	b.n	4c76 <__libc_init_array+0x1e>
    4c90:	000057bc 	.word	0x000057bc
    4c94:	000057bc 	.word	0x000057bc
    4c98:	000057bc 	.word	0x000057bc
    4c9c:	000057c0 	.word	0x000057c0

00004ca0 <memcpy>:
    4ca0:	2300      	movs	r3, #0
    4ca2:	b510      	push	{r4, lr}
    4ca4:	429a      	cmp	r2, r3
    4ca6:	d100      	bne.n	4caa <memcpy+0xa>
    4ca8:	bd10      	pop	{r4, pc}
    4caa:	5ccc      	ldrb	r4, [r1, r3]
    4cac:	54c4      	strb	r4, [r0, r3]
    4cae:	3301      	adds	r3, #1
    4cb0:	e7f8      	b.n	4ca4 <memcpy+0x4>

00004cb2 <memset>:
    4cb2:	0003      	movs	r3, r0
    4cb4:	1882      	adds	r2, r0, r2
    4cb6:	4293      	cmp	r3, r2
    4cb8:	d100      	bne.n	4cbc <memset+0xa>
    4cba:	4770      	bx	lr
    4cbc:	7019      	strb	r1, [r3, #0]
    4cbe:	3301      	adds	r3, #1
    4cc0:	e7f9      	b.n	4cb6 <memset+0x4>
	...

00004cc4 <sniprintf>:
    4cc4:	b40c      	push	{r2, r3}
    4cc6:	b530      	push	{r4, r5, lr}
    4cc8:	4b16      	ldr	r3, [pc, #88]	; (4d24 <sniprintf+0x60>)
    4cca:	b09d      	sub	sp, #116	; 0x74
    4ccc:	1e0c      	subs	r4, r1, #0
    4cce:	681d      	ldr	r5, [r3, #0]
    4cd0:	da08      	bge.n	4ce4 <sniprintf+0x20>
    4cd2:	238b      	movs	r3, #139	; 0x8b
    4cd4:	2001      	movs	r0, #1
    4cd6:	602b      	str	r3, [r5, #0]
    4cd8:	4240      	negs	r0, r0
    4cda:	b01d      	add	sp, #116	; 0x74
    4cdc:	bc30      	pop	{r4, r5}
    4cde:	bc08      	pop	{r3}
    4ce0:	b002      	add	sp, #8
    4ce2:	4718      	bx	r3
    4ce4:	2382      	movs	r3, #130	; 0x82
    4ce6:	a902      	add	r1, sp, #8
    4ce8:	009b      	lsls	r3, r3, #2
    4cea:	818b      	strh	r3, [r1, #12]
    4cec:	2300      	movs	r3, #0
    4cee:	9002      	str	r0, [sp, #8]
    4cf0:	6108      	str	r0, [r1, #16]
    4cf2:	429c      	cmp	r4, r3
    4cf4:	d000      	beq.n	4cf8 <sniprintf+0x34>
    4cf6:	1e63      	subs	r3, r4, #1
    4cf8:	608b      	str	r3, [r1, #8]
    4cfa:	614b      	str	r3, [r1, #20]
    4cfc:	2301      	movs	r3, #1
    4cfe:	425b      	negs	r3, r3
    4d00:	81cb      	strh	r3, [r1, #14]
    4d02:	9a20      	ldr	r2, [sp, #128]	; 0x80
    4d04:	ab21      	add	r3, sp, #132	; 0x84
    4d06:	0028      	movs	r0, r5
    4d08:	9301      	str	r3, [sp, #4]
    4d0a:	f000 f91f 	bl	4f4c <_svfiprintf_r>
    4d0e:	1c43      	adds	r3, r0, #1
    4d10:	da01      	bge.n	4d16 <sniprintf+0x52>
    4d12:	238b      	movs	r3, #139	; 0x8b
    4d14:	602b      	str	r3, [r5, #0]
    4d16:	2c00      	cmp	r4, #0
    4d18:	d0df      	beq.n	4cda <sniprintf+0x16>
    4d1a:	2300      	movs	r3, #0
    4d1c:	9a02      	ldr	r2, [sp, #8]
    4d1e:	7013      	strb	r3, [r2, #0]
    4d20:	e7db      	b.n	4cda <sniprintf+0x16>
    4d22:	46c0      	nop			; (mov r8, r8)
    4d24:	20000010 	.word	0x20000010

00004d28 <strlen>:
    4d28:	2300      	movs	r3, #0
    4d2a:	5cc2      	ldrb	r2, [r0, r3]
    4d2c:	3301      	adds	r3, #1
    4d2e:	2a00      	cmp	r2, #0
    4d30:	d1fb      	bne.n	4d2a <strlen+0x2>
    4d32:	1e58      	subs	r0, r3, #1
    4d34:	4770      	bx	lr
	...

00004d38 <_free_r>:
    4d38:	b570      	push	{r4, r5, r6, lr}
    4d3a:	0005      	movs	r5, r0
    4d3c:	2900      	cmp	r1, #0
    4d3e:	d010      	beq.n	4d62 <_free_r+0x2a>
    4d40:	1f0c      	subs	r4, r1, #4
    4d42:	6823      	ldr	r3, [r4, #0]
    4d44:	2b00      	cmp	r3, #0
    4d46:	da00      	bge.n	4d4a <_free_r+0x12>
    4d48:	18e4      	adds	r4, r4, r3
    4d4a:	0028      	movs	r0, r5
    4d4c:	f000 fbb9 	bl	54c2 <__malloc_lock>
    4d50:	4a1d      	ldr	r2, [pc, #116]	; (4dc8 <_free_r+0x90>)
    4d52:	6813      	ldr	r3, [r2, #0]
    4d54:	2b00      	cmp	r3, #0
    4d56:	d105      	bne.n	4d64 <_free_r+0x2c>
    4d58:	6063      	str	r3, [r4, #4]
    4d5a:	6014      	str	r4, [r2, #0]
    4d5c:	0028      	movs	r0, r5
    4d5e:	f000 fbb1 	bl	54c4 <__malloc_unlock>
    4d62:	bd70      	pop	{r4, r5, r6, pc}
    4d64:	42a3      	cmp	r3, r4
    4d66:	d909      	bls.n	4d7c <_free_r+0x44>
    4d68:	6821      	ldr	r1, [r4, #0]
    4d6a:	1860      	adds	r0, r4, r1
    4d6c:	4283      	cmp	r3, r0
    4d6e:	d1f3      	bne.n	4d58 <_free_r+0x20>
    4d70:	6818      	ldr	r0, [r3, #0]
    4d72:	685b      	ldr	r3, [r3, #4]
    4d74:	1841      	adds	r1, r0, r1
    4d76:	6021      	str	r1, [r4, #0]
    4d78:	e7ee      	b.n	4d58 <_free_r+0x20>
    4d7a:	0013      	movs	r3, r2
    4d7c:	685a      	ldr	r2, [r3, #4]
    4d7e:	2a00      	cmp	r2, #0
    4d80:	d001      	beq.n	4d86 <_free_r+0x4e>
    4d82:	42a2      	cmp	r2, r4
    4d84:	d9f9      	bls.n	4d7a <_free_r+0x42>
    4d86:	6819      	ldr	r1, [r3, #0]
    4d88:	1858      	adds	r0, r3, r1
    4d8a:	42a0      	cmp	r0, r4
    4d8c:	d10b      	bne.n	4da6 <_free_r+0x6e>
    4d8e:	6820      	ldr	r0, [r4, #0]
    4d90:	1809      	adds	r1, r1, r0
    4d92:	1858      	adds	r0, r3, r1
    4d94:	6019      	str	r1, [r3, #0]
    4d96:	4282      	cmp	r2, r0
    4d98:	d1e0      	bne.n	4d5c <_free_r+0x24>
    4d9a:	6810      	ldr	r0, [r2, #0]
    4d9c:	6852      	ldr	r2, [r2, #4]
    4d9e:	1841      	adds	r1, r0, r1
    4da0:	6019      	str	r1, [r3, #0]
    4da2:	605a      	str	r2, [r3, #4]
    4da4:	e7da      	b.n	4d5c <_free_r+0x24>
    4da6:	42a0      	cmp	r0, r4
    4da8:	d902      	bls.n	4db0 <_free_r+0x78>
    4daa:	230c      	movs	r3, #12
    4dac:	602b      	str	r3, [r5, #0]
    4dae:	e7d5      	b.n	4d5c <_free_r+0x24>
    4db0:	6821      	ldr	r1, [r4, #0]
    4db2:	1860      	adds	r0, r4, r1
    4db4:	4282      	cmp	r2, r0
    4db6:	d103      	bne.n	4dc0 <_free_r+0x88>
    4db8:	6810      	ldr	r0, [r2, #0]
    4dba:	6852      	ldr	r2, [r2, #4]
    4dbc:	1841      	adds	r1, r0, r1
    4dbe:	6021      	str	r1, [r4, #0]
    4dc0:	6062      	str	r2, [r4, #4]
    4dc2:	605c      	str	r4, [r3, #4]
    4dc4:	e7ca      	b.n	4d5c <_free_r+0x24>
    4dc6:	46c0      	nop			; (mov r8, r8)
    4dc8:	20000398 	.word	0x20000398

00004dcc <_malloc_r>:
    4dcc:	2303      	movs	r3, #3
    4dce:	b570      	push	{r4, r5, r6, lr}
    4dd0:	1ccd      	adds	r5, r1, #3
    4dd2:	439d      	bics	r5, r3
    4dd4:	3508      	adds	r5, #8
    4dd6:	0006      	movs	r6, r0
    4dd8:	2d0c      	cmp	r5, #12
    4dda:	d21e      	bcs.n	4e1a <_malloc_r+0x4e>
    4ddc:	250c      	movs	r5, #12
    4dde:	42a9      	cmp	r1, r5
    4de0:	d81d      	bhi.n	4e1e <_malloc_r+0x52>
    4de2:	0030      	movs	r0, r6
    4de4:	f000 fb6d 	bl	54c2 <__malloc_lock>
    4de8:	4a25      	ldr	r2, [pc, #148]	; (4e80 <_malloc_r+0xb4>)
    4dea:	6814      	ldr	r4, [r2, #0]
    4dec:	0021      	movs	r1, r4
    4dee:	2900      	cmp	r1, #0
    4df0:	d119      	bne.n	4e26 <_malloc_r+0x5a>
    4df2:	4c24      	ldr	r4, [pc, #144]	; (4e84 <_malloc_r+0xb8>)
    4df4:	6823      	ldr	r3, [r4, #0]
    4df6:	2b00      	cmp	r3, #0
    4df8:	d103      	bne.n	4e02 <_malloc_r+0x36>
    4dfa:	0030      	movs	r0, r6
    4dfc:	f000 fb32 	bl	5464 <_sbrk_r>
    4e00:	6020      	str	r0, [r4, #0]
    4e02:	0029      	movs	r1, r5
    4e04:	0030      	movs	r0, r6
    4e06:	f000 fb2d 	bl	5464 <_sbrk_r>
    4e0a:	1c43      	adds	r3, r0, #1
    4e0c:	d12c      	bne.n	4e68 <_malloc_r+0x9c>
    4e0e:	230c      	movs	r3, #12
    4e10:	0030      	movs	r0, r6
    4e12:	6033      	str	r3, [r6, #0]
    4e14:	f000 fb56 	bl	54c4 <__malloc_unlock>
    4e18:	e003      	b.n	4e22 <_malloc_r+0x56>
    4e1a:	2d00      	cmp	r5, #0
    4e1c:	dadf      	bge.n	4dde <_malloc_r+0x12>
    4e1e:	230c      	movs	r3, #12
    4e20:	6033      	str	r3, [r6, #0]
    4e22:	2000      	movs	r0, #0
    4e24:	bd70      	pop	{r4, r5, r6, pc}
    4e26:	680b      	ldr	r3, [r1, #0]
    4e28:	1b5b      	subs	r3, r3, r5
    4e2a:	d41a      	bmi.n	4e62 <_malloc_r+0x96>
    4e2c:	2b0b      	cmp	r3, #11
    4e2e:	d903      	bls.n	4e38 <_malloc_r+0x6c>
    4e30:	600b      	str	r3, [r1, #0]
    4e32:	18cc      	adds	r4, r1, r3
    4e34:	6025      	str	r5, [r4, #0]
    4e36:	e003      	b.n	4e40 <_malloc_r+0x74>
    4e38:	428c      	cmp	r4, r1
    4e3a:	d10e      	bne.n	4e5a <_malloc_r+0x8e>
    4e3c:	6863      	ldr	r3, [r4, #4]
    4e3e:	6013      	str	r3, [r2, #0]
    4e40:	0030      	movs	r0, r6
    4e42:	f000 fb3f 	bl	54c4 <__malloc_unlock>
    4e46:	0020      	movs	r0, r4
    4e48:	2207      	movs	r2, #7
    4e4a:	300b      	adds	r0, #11
    4e4c:	1d23      	adds	r3, r4, #4
    4e4e:	4390      	bics	r0, r2
    4e50:	1ac3      	subs	r3, r0, r3
    4e52:	d0e7      	beq.n	4e24 <_malloc_r+0x58>
    4e54:	425a      	negs	r2, r3
    4e56:	50e2      	str	r2, [r4, r3]
    4e58:	e7e4      	b.n	4e24 <_malloc_r+0x58>
    4e5a:	684b      	ldr	r3, [r1, #4]
    4e5c:	6063      	str	r3, [r4, #4]
    4e5e:	000c      	movs	r4, r1
    4e60:	e7ee      	b.n	4e40 <_malloc_r+0x74>
    4e62:	000c      	movs	r4, r1
    4e64:	6849      	ldr	r1, [r1, #4]
    4e66:	e7c2      	b.n	4dee <_malloc_r+0x22>
    4e68:	2303      	movs	r3, #3
    4e6a:	1cc4      	adds	r4, r0, #3
    4e6c:	439c      	bics	r4, r3
    4e6e:	42a0      	cmp	r0, r4
    4e70:	d0e0      	beq.n	4e34 <_malloc_r+0x68>
    4e72:	1a21      	subs	r1, r4, r0
    4e74:	0030      	movs	r0, r6
    4e76:	f000 faf5 	bl	5464 <_sbrk_r>
    4e7a:	1c43      	adds	r3, r0, #1
    4e7c:	d1da      	bne.n	4e34 <_malloc_r+0x68>
    4e7e:	e7c6      	b.n	4e0e <_malloc_r+0x42>
    4e80:	20000398 	.word	0x20000398
    4e84:	2000039c 	.word	0x2000039c

00004e88 <__ssputs_r>:
    4e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e8a:	688e      	ldr	r6, [r1, #8]
    4e8c:	b085      	sub	sp, #20
    4e8e:	0007      	movs	r7, r0
    4e90:	000c      	movs	r4, r1
    4e92:	9203      	str	r2, [sp, #12]
    4e94:	9301      	str	r3, [sp, #4]
    4e96:	429e      	cmp	r6, r3
    4e98:	d839      	bhi.n	4f0e <__ssputs_r+0x86>
    4e9a:	2390      	movs	r3, #144	; 0x90
    4e9c:	898a      	ldrh	r2, [r1, #12]
    4e9e:	00db      	lsls	r3, r3, #3
    4ea0:	421a      	tst	r2, r3
    4ea2:	d034      	beq.n	4f0e <__ssputs_r+0x86>
    4ea4:	2503      	movs	r5, #3
    4ea6:	6909      	ldr	r1, [r1, #16]
    4ea8:	6823      	ldr	r3, [r4, #0]
    4eaa:	1a5b      	subs	r3, r3, r1
    4eac:	9302      	str	r3, [sp, #8]
    4eae:	6963      	ldr	r3, [r4, #20]
    4eb0:	9802      	ldr	r0, [sp, #8]
    4eb2:	435d      	muls	r5, r3
    4eb4:	0feb      	lsrs	r3, r5, #31
    4eb6:	195d      	adds	r5, r3, r5
    4eb8:	9b01      	ldr	r3, [sp, #4]
    4eba:	106d      	asrs	r5, r5, #1
    4ebc:	3301      	adds	r3, #1
    4ebe:	181b      	adds	r3, r3, r0
    4ec0:	42ab      	cmp	r3, r5
    4ec2:	d900      	bls.n	4ec6 <__ssputs_r+0x3e>
    4ec4:	001d      	movs	r5, r3
    4ec6:	0553      	lsls	r3, r2, #21
    4ec8:	d532      	bpl.n	4f30 <__ssputs_r+0xa8>
    4eca:	0029      	movs	r1, r5
    4ecc:	0038      	movs	r0, r7
    4ece:	f7ff ff7d 	bl	4dcc <_malloc_r>
    4ed2:	1e06      	subs	r6, r0, #0
    4ed4:	d109      	bne.n	4eea <__ssputs_r+0x62>
    4ed6:	230c      	movs	r3, #12
    4ed8:	603b      	str	r3, [r7, #0]
    4eda:	2340      	movs	r3, #64	; 0x40
    4edc:	2001      	movs	r0, #1
    4ede:	89a2      	ldrh	r2, [r4, #12]
    4ee0:	4240      	negs	r0, r0
    4ee2:	4313      	orrs	r3, r2
    4ee4:	81a3      	strh	r3, [r4, #12]
    4ee6:	b005      	add	sp, #20
    4ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4eea:	9a02      	ldr	r2, [sp, #8]
    4eec:	6921      	ldr	r1, [r4, #16]
    4eee:	f7ff fed7 	bl	4ca0 <memcpy>
    4ef2:	89a3      	ldrh	r3, [r4, #12]
    4ef4:	4a14      	ldr	r2, [pc, #80]	; (4f48 <__ssputs_r+0xc0>)
    4ef6:	401a      	ands	r2, r3
    4ef8:	2380      	movs	r3, #128	; 0x80
    4efa:	4313      	orrs	r3, r2
    4efc:	81a3      	strh	r3, [r4, #12]
    4efe:	9b02      	ldr	r3, [sp, #8]
    4f00:	6126      	str	r6, [r4, #16]
    4f02:	18f6      	adds	r6, r6, r3
    4f04:	6026      	str	r6, [r4, #0]
    4f06:	6165      	str	r5, [r4, #20]
    4f08:	9e01      	ldr	r6, [sp, #4]
    4f0a:	1aed      	subs	r5, r5, r3
    4f0c:	60a5      	str	r5, [r4, #8]
    4f0e:	9b01      	ldr	r3, [sp, #4]
    4f10:	42b3      	cmp	r3, r6
    4f12:	d200      	bcs.n	4f16 <__ssputs_r+0x8e>
    4f14:	001e      	movs	r6, r3
    4f16:	0032      	movs	r2, r6
    4f18:	9903      	ldr	r1, [sp, #12]
    4f1a:	6820      	ldr	r0, [r4, #0]
    4f1c:	f000 fabf 	bl	549e <memmove>
    4f20:	68a3      	ldr	r3, [r4, #8]
    4f22:	2000      	movs	r0, #0
    4f24:	1b9b      	subs	r3, r3, r6
    4f26:	60a3      	str	r3, [r4, #8]
    4f28:	6823      	ldr	r3, [r4, #0]
    4f2a:	199e      	adds	r6, r3, r6
    4f2c:	6026      	str	r6, [r4, #0]
    4f2e:	e7da      	b.n	4ee6 <__ssputs_r+0x5e>
    4f30:	002a      	movs	r2, r5
    4f32:	0038      	movs	r0, r7
    4f34:	f000 fac7 	bl	54c6 <_realloc_r>
    4f38:	1e06      	subs	r6, r0, #0
    4f3a:	d1e0      	bne.n	4efe <__ssputs_r+0x76>
    4f3c:	6921      	ldr	r1, [r4, #16]
    4f3e:	0038      	movs	r0, r7
    4f40:	f7ff fefa 	bl	4d38 <_free_r>
    4f44:	e7c7      	b.n	4ed6 <__ssputs_r+0x4e>
    4f46:	46c0      	nop			; (mov r8, r8)
    4f48:	fffffb7f 	.word	0xfffffb7f

00004f4c <_svfiprintf_r>:
    4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f4e:	b09f      	sub	sp, #124	; 0x7c
    4f50:	9002      	str	r0, [sp, #8]
    4f52:	9305      	str	r3, [sp, #20]
    4f54:	898b      	ldrh	r3, [r1, #12]
    4f56:	000f      	movs	r7, r1
    4f58:	0016      	movs	r6, r2
    4f5a:	061b      	lsls	r3, r3, #24
    4f5c:	d511      	bpl.n	4f82 <_svfiprintf_r+0x36>
    4f5e:	690b      	ldr	r3, [r1, #16]
    4f60:	2b00      	cmp	r3, #0
    4f62:	d10e      	bne.n	4f82 <_svfiprintf_r+0x36>
    4f64:	2140      	movs	r1, #64	; 0x40
    4f66:	f7ff ff31 	bl	4dcc <_malloc_r>
    4f6a:	6038      	str	r0, [r7, #0]
    4f6c:	6138      	str	r0, [r7, #16]
    4f6e:	2800      	cmp	r0, #0
    4f70:	d105      	bne.n	4f7e <_svfiprintf_r+0x32>
    4f72:	230c      	movs	r3, #12
    4f74:	9a02      	ldr	r2, [sp, #8]
    4f76:	3801      	subs	r0, #1
    4f78:	6013      	str	r3, [r2, #0]
    4f7a:	b01f      	add	sp, #124	; 0x7c
    4f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f7e:	2340      	movs	r3, #64	; 0x40
    4f80:	617b      	str	r3, [r7, #20]
    4f82:	2300      	movs	r3, #0
    4f84:	ad06      	add	r5, sp, #24
    4f86:	616b      	str	r3, [r5, #20]
    4f88:	3320      	adds	r3, #32
    4f8a:	766b      	strb	r3, [r5, #25]
    4f8c:	3310      	adds	r3, #16
    4f8e:	76ab      	strb	r3, [r5, #26]
    4f90:	0034      	movs	r4, r6
    4f92:	7823      	ldrb	r3, [r4, #0]
    4f94:	2b00      	cmp	r3, #0
    4f96:	d147      	bne.n	5028 <_svfiprintf_r+0xdc>
    4f98:	1ba3      	subs	r3, r4, r6
    4f9a:	9304      	str	r3, [sp, #16]
    4f9c:	d00d      	beq.n	4fba <_svfiprintf_r+0x6e>
    4f9e:	1ba3      	subs	r3, r4, r6
    4fa0:	0032      	movs	r2, r6
    4fa2:	0039      	movs	r1, r7
    4fa4:	9802      	ldr	r0, [sp, #8]
    4fa6:	f7ff ff6f 	bl	4e88 <__ssputs_r>
    4faa:	1c43      	adds	r3, r0, #1
    4fac:	d100      	bne.n	4fb0 <_svfiprintf_r+0x64>
    4fae:	e0b5      	b.n	511c <_svfiprintf_r+0x1d0>
    4fb0:	696a      	ldr	r2, [r5, #20]
    4fb2:	9b04      	ldr	r3, [sp, #16]
    4fb4:	4694      	mov	ip, r2
    4fb6:	4463      	add	r3, ip
    4fb8:	616b      	str	r3, [r5, #20]
    4fba:	7823      	ldrb	r3, [r4, #0]
    4fbc:	2b00      	cmp	r3, #0
    4fbe:	d100      	bne.n	4fc2 <_svfiprintf_r+0x76>
    4fc0:	e0ac      	b.n	511c <_svfiprintf_r+0x1d0>
    4fc2:	2201      	movs	r2, #1
    4fc4:	2300      	movs	r3, #0
    4fc6:	4252      	negs	r2, r2
    4fc8:	606a      	str	r2, [r5, #4]
    4fca:	a902      	add	r1, sp, #8
    4fcc:	3254      	adds	r2, #84	; 0x54
    4fce:	1852      	adds	r2, r2, r1
    4fd0:	3401      	adds	r4, #1
    4fd2:	602b      	str	r3, [r5, #0]
    4fd4:	60eb      	str	r3, [r5, #12]
    4fd6:	60ab      	str	r3, [r5, #8]
    4fd8:	7013      	strb	r3, [r2, #0]
    4fda:	65ab      	str	r3, [r5, #88]	; 0x58
    4fdc:	4e58      	ldr	r6, [pc, #352]	; (5140 <_svfiprintf_r+0x1f4>)
    4fde:	2205      	movs	r2, #5
    4fe0:	7821      	ldrb	r1, [r4, #0]
    4fe2:	0030      	movs	r0, r6
    4fe4:	f000 fa50 	bl	5488 <memchr>
    4fe8:	1c62      	adds	r2, r4, #1
    4fea:	2800      	cmp	r0, #0
    4fec:	d120      	bne.n	5030 <_svfiprintf_r+0xe4>
    4fee:	6829      	ldr	r1, [r5, #0]
    4ff0:	06cb      	lsls	r3, r1, #27
    4ff2:	d504      	bpl.n	4ffe <_svfiprintf_r+0xb2>
    4ff4:	2353      	movs	r3, #83	; 0x53
    4ff6:	ae02      	add	r6, sp, #8
    4ff8:	3020      	adds	r0, #32
    4ffa:	199b      	adds	r3, r3, r6
    4ffc:	7018      	strb	r0, [r3, #0]
    4ffe:	070b      	lsls	r3, r1, #28
    5000:	d504      	bpl.n	500c <_svfiprintf_r+0xc0>
    5002:	2353      	movs	r3, #83	; 0x53
    5004:	202b      	movs	r0, #43	; 0x2b
    5006:	ae02      	add	r6, sp, #8
    5008:	199b      	adds	r3, r3, r6
    500a:	7018      	strb	r0, [r3, #0]
    500c:	7823      	ldrb	r3, [r4, #0]
    500e:	2b2a      	cmp	r3, #42	; 0x2a
    5010:	d016      	beq.n	5040 <_svfiprintf_r+0xf4>
    5012:	2000      	movs	r0, #0
    5014:	210a      	movs	r1, #10
    5016:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5018:	7822      	ldrb	r2, [r4, #0]
    501a:	3a30      	subs	r2, #48	; 0x30
    501c:	2a09      	cmp	r2, #9
    501e:	d955      	bls.n	50cc <_svfiprintf_r+0x180>
    5020:	2800      	cmp	r0, #0
    5022:	d015      	beq.n	5050 <_svfiprintf_r+0x104>
    5024:	9309      	str	r3, [sp, #36]	; 0x24
    5026:	e013      	b.n	5050 <_svfiprintf_r+0x104>
    5028:	2b25      	cmp	r3, #37	; 0x25
    502a:	d0b5      	beq.n	4f98 <_svfiprintf_r+0x4c>
    502c:	3401      	adds	r4, #1
    502e:	e7b0      	b.n	4f92 <_svfiprintf_r+0x46>
    5030:	2301      	movs	r3, #1
    5032:	1b80      	subs	r0, r0, r6
    5034:	4083      	lsls	r3, r0
    5036:	6829      	ldr	r1, [r5, #0]
    5038:	0014      	movs	r4, r2
    503a:	430b      	orrs	r3, r1
    503c:	602b      	str	r3, [r5, #0]
    503e:	e7cd      	b.n	4fdc <_svfiprintf_r+0x90>
    5040:	9b05      	ldr	r3, [sp, #20]
    5042:	1d18      	adds	r0, r3, #4
    5044:	681b      	ldr	r3, [r3, #0]
    5046:	9005      	str	r0, [sp, #20]
    5048:	2b00      	cmp	r3, #0
    504a:	db39      	blt.n	50c0 <_svfiprintf_r+0x174>
    504c:	9309      	str	r3, [sp, #36]	; 0x24
    504e:	0014      	movs	r4, r2
    5050:	7823      	ldrb	r3, [r4, #0]
    5052:	2b2e      	cmp	r3, #46	; 0x2e
    5054:	d10b      	bne.n	506e <_svfiprintf_r+0x122>
    5056:	7863      	ldrb	r3, [r4, #1]
    5058:	1c62      	adds	r2, r4, #1
    505a:	2b2a      	cmp	r3, #42	; 0x2a
    505c:	d13e      	bne.n	50dc <_svfiprintf_r+0x190>
    505e:	9b05      	ldr	r3, [sp, #20]
    5060:	3402      	adds	r4, #2
    5062:	1d1a      	adds	r2, r3, #4
    5064:	681b      	ldr	r3, [r3, #0]
    5066:	9205      	str	r2, [sp, #20]
    5068:	2b00      	cmp	r3, #0
    506a:	db34      	blt.n	50d6 <_svfiprintf_r+0x18a>
    506c:	9307      	str	r3, [sp, #28]
    506e:	4e35      	ldr	r6, [pc, #212]	; (5144 <_svfiprintf_r+0x1f8>)
    5070:	7821      	ldrb	r1, [r4, #0]
    5072:	2203      	movs	r2, #3
    5074:	0030      	movs	r0, r6
    5076:	f000 fa07 	bl	5488 <memchr>
    507a:	2800      	cmp	r0, #0
    507c:	d006      	beq.n	508c <_svfiprintf_r+0x140>
    507e:	2340      	movs	r3, #64	; 0x40
    5080:	1b80      	subs	r0, r0, r6
    5082:	4083      	lsls	r3, r0
    5084:	682a      	ldr	r2, [r5, #0]
    5086:	3401      	adds	r4, #1
    5088:	4313      	orrs	r3, r2
    508a:	602b      	str	r3, [r5, #0]
    508c:	7821      	ldrb	r1, [r4, #0]
    508e:	2206      	movs	r2, #6
    5090:	482d      	ldr	r0, [pc, #180]	; (5148 <_svfiprintf_r+0x1fc>)
    5092:	1c66      	adds	r6, r4, #1
    5094:	7629      	strb	r1, [r5, #24]
    5096:	f000 f9f7 	bl	5488 <memchr>
    509a:	2800      	cmp	r0, #0
    509c:	d046      	beq.n	512c <_svfiprintf_r+0x1e0>
    509e:	4b2b      	ldr	r3, [pc, #172]	; (514c <_svfiprintf_r+0x200>)
    50a0:	2b00      	cmp	r3, #0
    50a2:	d12f      	bne.n	5104 <_svfiprintf_r+0x1b8>
    50a4:	6829      	ldr	r1, [r5, #0]
    50a6:	9b05      	ldr	r3, [sp, #20]
    50a8:	2207      	movs	r2, #7
    50aa:	05c9      	lsls	r1, r1, #23
    50ac:	d528      	bpl.n	5100 <_svfiprintf_r+0x1b4>
    50ae:	189b      	adds	r3, r3, r2
    50b0:	4393      	bics	r3, r2
    50b2:	3308      	adds	r3, #8
    50b4:	9305      	str	r3, [sp, #20]
    50b6:	696b      	ldr	r3, [r5, #20]
    50b8:	9a03      	ldr	r2, [sp, #12]
    50ba:	189b      	adds	r3, r3, r2
    50bc:	616b      	str	r3, [r5, #20]
    50be:	e767      	b.n	4f90 <_svfiprintf_r+0x44>
    50c0:	425b      	negs	r3, r3
    50c2:	60eb      	str	r3, [r5, #12]
    50c4:	2302      	movs	r3, #2
    50c6:	430b      	orrs	r3, r1
    50c8:	602b      	str	r3, [r5, #0]
    50ca:	e7c0      	b.n	504e <_svfiprintf_r+0x102>
    50cc:	434b      	muls	r3, r1
    50ce:	3401      	adds	r4, #1
    50d0:	189b      	adds	r3, r3, r2
    50d2:	2001      	movs	r0, #1
    50d4:	e7a0      	b.n	5018 <_svfiprintf_r+0xcc>
    50d6:	2301      	movs	r3, #1
    50d8:	425b      	negs	r3, r3
    50da:	e7c7      	b.n	506c <_svfiprintf_r+0x120>
    50dc:	2300      	movs	r3, #0
    50de:	0014      	movs	r4, r2
    50e0:	200a      	movs	r0, #10
    50e2:	001a      	movs	r2, r3
    50e4:	606b      	str	r3, [r5, #4]
    50e6:	7821      	ldrb	r1, [r4, #0]
    50e8:	3930      	subs	r1, #48	; 0x30
    50ea:	2909      	cmp	r1, #9
    50ec:	d903      	bls.n	50f6 <_svfiprintf_r+0x1aa>
    50ee:	2b00      	cmp	r3, #0
    50f0:	d0bd      	beq.n	506e <_svfiprintf_r+0x122>
    50f2:	9207      	str	r2, [sp, #28]
    50f4:	e7bb      	b.n	506e <_svfiprintf_r+0x122>
    50f6:	4342      	muls	r2, r0
    50f8:	3401      	adds	r4, #1
    50fa:	1852      	adds	r2, r2, r1
    50fc:	2301      	movs	r3, #1
    50fe:	e7f2      	b.n	50e6 <_svfiprintf_r+0x19a>
    5100:	3307      	adds	r3, #7
    5102:	e7d5      	b.n	50b0 <_svfiprintf_r+0x164>
    5104:	ab05      	add	r3, sp, #20
    5106:	9300      	str	r3, [sp, #0]
    5108:	003a      	movs	r2, r7
    510a:	4b11      	ldr	r3, [pc, #68]	; (5150 <_svfiprintf_r+0x204>)
    510c:	0029      	movs	r1, r5
    510e:	9802      	ldr	r0, [sp, #8]
    5110:	e000      	b.n	5114 <_svfiprintf_r+0x1c8>
    5112:	bf00      	nop
    5114:	9003      	str	r0, [sp, #12]
    5116:	9b03      	ldr	r3, [sp, #12]
    5118:	3301      	adds	r3, #1
    511a:	d1cc      	bne.n	50b6 <_svfiprintf_r+0x16a>
    511c:	89bb      	ldrh	r3, [r7, #12]
    511e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5120:	065b      	lsls	r3, r3, #25
    5122:	d400      	bmi.n	5126 <_svfiprintf_r+0x1da>
    5124:	e729      	b.n	4f7a <_svfiprintf_r+0x2e>
    5126:	2001      	movs	r0, #1
    5128:	4240      	negs	r0, r0
    512a:	e726      	b.n	4f7a <_svfiprintf_r+0x2e>
    512c:	ab05      	add	r3, sp, #20
    512e:	9300      	str	r3, [sp, #0]
    5130:	003a      	movs	r2, r7
    5132:	4b07      	ldr	r3, [pc, #28]	; (5150 <_svfiprintf_r+0x204>)
    5134:	0029      	movs	r1, r5
    5136:	9802      	ldr	r0, [sp, #8]
    5138:	f000 f87a 	bl	5230 <_printf_i>
    513c:	e7ea      	b.n	5114 <_svfiprintf_r+0x1c8>
    513e:	46c0      	nop			; (mov r8, r8)
    5140:	0000577c 	.word	0x0000577c
    5144:	00005782 	.word	0x00005782
    5148:	00005786 	.word	0x00005786
    514c:	00000000 	.word	0x00000000
    5150:	00004e89 	.word	0x00004e89

00005154 <_printf_common>:
    5154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5156:	0015      	movs	r5, r2
    5158:	9301      	str	r3, [sp, #4]
    515a:	688a      	ldr	r2, [r1, #8]
    515c:	690b      	ldr	r3, [r1, #16]
    515e:	9000      	str	r0, [sp, #0]
    5160:	000c      	movs	r4, r1
    5162:	4293      	cmp	r3, r2
    5164:	da00      	bge.n	5168 <_printf_common+0x14>
    5166:	0013      	movs	r3, r2
    5168:	0022      	movs	r2, r4
    516a:	602b      	str	r3, [r5, #0]
    516c:	3243      	adds	r2, #67	; 0x43
    516e:	7812      	ldrb	r2, [r2, #0]
    5170:	2a00      	cmp	r2, #0
    5172:	d001      	beq.n	5178 <_printf_common+0x24>
    5174:	3301      	adds	r3, #1
    5176:	602b      	str	r3, [r5, #0]
    5178:	6823      	ldr	r3, [r4, #0]
    517a:	069b      	lsls	r3, r3, #26
    517c:	d502      	bpl.n	5184 <_printf_common+0x30>
    517e:	682b      	ldr	r3, [r5, #0]
    5180:	3302      	adds	r3, #2
    5182:	602b      	str	r3, [r5, #0]
    5184:	2706      	movs	r7, #6
    5186:	6823      	ldr	r3, [r4, #0]
    5188:	401f      	ands	r7, r3
    518a:	d027      	beq.n	51dc <_printf_common+0x88>
    518c:	0023      	movs	r3, r4
    518e:	3343      	adds	r3, #67	; 0x43
    5190:	781b      	ldrb	r3, [r3, #0]
    5192:	1e5a      	subs	r2, r3, #1
    5194:	4193      	sbcs	r3, r2
    5196:	6822      	ldr	r2, [r4, #0]
    5198:	0692      	lsls	r2, r2, #26
    519a:	d430      	bmi.n	51fe <_printf_common+0xaa>
    519c:	0022      	movs	r2, r4
    519e:	9901      	ldr	r1, [sp, #4]
    51a0:	3243      	adds	r2, #67	; 0x43
    51a2:	9800      	ldr	r0, [sp, #0]
    51a4:	9e08      	ldr	r6, [sp, #32]
    51a6:	47b0      	blx	r6
    51a8:	1c43      	adds	r3, r0, #1
    51aa:	d025      	beq.n	51f8 <_printf_common+0xa4>
    51ac:	2306      	movs	r3, #6
    51ae:	6820      	ldr	r0, [r4, #0]
    51b0:	682a      	ldr	r2, [r5, #0]
    51b2:	68e1      	ldr	r1, [r4, #12]
    51b4:	4003      	ands	r3, r0
    51b6:	2500      	movs	r5, #0
    51b8:	2b04      	cmp	r3, #4
    51ba:	d103      	bne.n	51c4 <_printf_common+0x70>
    51bc:	1a8d      	subs	r5, r1, r2
    51be:	43eb      	mvns	r3, r5
    51c0:	17db      	asrs	r3, r3, #31
    51c2:	401d      	ands	r5, r3
    51c4:	68a3      	ldr	r3, [r4, #8]
    51c6:	6922      	ldr	r2, [r4, #16]
    51c8:	4293      	cmp	r3, r2
    51ca:	dd01      	ble.n	51d0 <_printf_common+0x7c>
    51cc:	1a9b      	subs	r3, r3, r2
    51ce:	18ed      	adds	r5, r5, r3
    51d0:	2700      	movs	r7, #0
    51d2:	42bd      	cmp	r5, r7
    51d4:	d120      	bne.n	5218 <_printf_common+0xc4>
    51d6:	2000      	movs	r0, #0
    51d8:	e010      	b.n	51fc <_printf_common+0xa8>
    51da:	3701      	adds	r7, #1
    51dc:	68e3      	ldr	r3, [r4, #12]
    51de:	682a      	ldr	r2, [r5, #0]
    51e0:	1a9b      	subs	r3, r3, r2
    51e2:	429f      	cmp	r7, r3
    51e4:	dad2      	bge.n	518c <_printf_common+0x38>
    51e6:	0022      	movs	r2, r4
    51e8:	2301      	movs	r3, #1
    51ea:	3219      	adds	r2, #25
    51ec:	9901      	ldr	r1, [sp, #4]
    51ee:	9800      	ldr	r0, [sp, #0]
    51f0:	9e08      	ldr	r6, [sp, #32]
    51f2:	47b0      	blx	r6
    51f4:	1c43      	adds	r3, r0, #1
    51f6:	d1f0      	bne.n	51da <_printf_common+0x86>
    51f8:	2001      	movs	r0, #1
    51fa:	4240      	negs	r0, r0
    51fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    51fe:	2030      	movs	r0, #48	; 0x30
    5200:	18e1      	adds	r1, r4, r3
    5202:	3143      	adds	r1, #67	; 0x43
    5204:	7008      	strb	r0, [r1, #0]
    5206:	0021      	movs	r1, r4
    5208:	1c5a      	adds	r2, r3, #1
    520a:	3145      	adds	r1, #69	; 0x45
    520c:	7809      	ldrb	r1, [r1, #0]
    520e:	18a2      	adds	r2, r4, r2
    5210:	3243      	adds	r2, #67	; 0x43
    5212:	3302      	adds	r3, #2
    5214:	7011      	strb	r1, [r2, #0]
    5216:	e7c1      	b.n	519c <_printf_common+0x48>
    5218:	0022      	movs	r2, r4
    521a:	2301      	movs	r3, #1
    521c:	321a      	adds	r2, #26
    521e:	9901      	ldr	r1, [sp, #4]
    5220:	9800      	ldr	r0, [sp, #0]
    5222:	9e08      	ldr	r6, [sp, #32]
    5224:	47b0      	blx	r6
    5226:	1c43      	adds	r3, r0, #1
    5228:	d0e6      	beq.n	51f8 <_printf_common+0xa4>
    522a:	3701      	adds	r7, #1
    522c:	e7d1      	b.n	51d2 <_printf_common+0x7e>
	...

00005230 <_printf_i>:
    5230:	b5f0      	push	{r4, r5, r6, r7, lr}
    5232:	b08b      	sub	sp, #44	; 0x2c
    5234:	9206      	str	r2, [sp, #24]
    5236:	000a      	movs	r2, r1
    5238:	3243      	adds	r2, #67	; 0x43
    523a:	9307      	str	r3, [sp, #28]
    523c:	9005      	str	r0, [sp, #20]
    523e:	9204      	str	r2, [sp, #16]
    5240:	7e0a      	ldrb	r2, [r1, #24]
    5242:	000c      	movs	r4, r1
    5244:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5246:	2a6e      	cmp	r2, #110	; 0x6e
    5248:	d100      	bne.n	524c <_printf_i+0x1c>
    524a:	e08f      	b.n	536c <_printf_i+0x13c>
    524c:	d817      	bhi.n	527e <_printf_i+0x4e>
    524e:	2a63      	cmp	r2, #99	; 0x63
    5250:	d02c      	beq.n	52ac <_printf_i+0x7c>
    5252:	d808      	bhi.n	5266 <_printf_i+0x36>
    5254:	2a00      	cmp	r2, #0
    5256:	d100      	bne.n	525a <_printf_i+0x2a>
    5258:	e099      	b.n	538e <_printf_i+0x15e>
    525a:	2a58      	cmp	r2, #88	; 0x58
    525c:	d054      	beq.n	5308 <_printf_i+0xd8>
    525e:	0026      	movs	r6, r4
    5260:	3642      	adds	r6, #66	; 0x42
    5262:	7032      	strb	r2, [r6, #0]
    5264:	e029      	b.n	52ba <_printf_i+0x8a>
    5266:	2a64      	cmp	r2, #100	; 0x64
    5268:	d001      	beq.n	526e <_printf_i+0x3e>
    526a:	2a69      	cmp	r2, #105	; 0x69
    526c:	d1f7      	bne.n	525e <_printf_i+0x2e>
    526e:	6821      	ldr	r1, [r4, #0]
    5270:	681a      	ldr	r2, [r3, #0]
    5272:	0608      	lsls	r0, r1, #24
    5274:	d523      	bpl.n	52be <_printf_i+0x8e>
    5276:	1d11      	adds	r1, r2, #4
    5278:	6019      	str	r1, [r3, #0]
    527a:	6815      	ldr	r5, [r2, #0]
    527c:	e025      	b.n	52ca <_printf_i+0x9a>
    527e:	2a73      	cmp	r2, #115	; 0x73
    5280:	d100      	bne.n	5284 <_printf_i+0x54>
    5282:	e088      	b.n	5396 <_printf_i+0x166>
    5284:	d808      	bhi.n	5298 <_printf_i+0x68>
    5286:	2a6f      	cmp	r2, #111	; 0x6f
    5288:	d029      	beq.n	52de <_printf_i+0xae>
    528a:	2a70      	cmp	r2, #112	; 0x70
    528c:	d1e7      	bne.n	525e <_printf_i+0x2e>
    528e:	2220      	movs	r2, #32
    5290:	6809      	ldr	r1, [r1, #0]
    5292:	430a      	orrs	r2, r1
    5294:	6022      	str	r2, [r4, #0]
    5296:	e003      	b.n	52a0 <_printf_i+0x70>
    5298:	2a75      	cmp	r2, #117	; 0x75
    529a:	d020      	beq.n	52de <_printf_i+0xae>
    529c:	2a78      	cmp	r2, #120	; 0x78
    529e:	d1de      	bne.n	525e <_printf_i+0x2e>
    52a0:	0022      	movs	r2, r4
    52a2:	2178      	movs	r1, #120	; 0x78
    52a4:	3245      	adds	r2, #69	; 0x45
    52a6:	7011      	strb	r1, [r2, #0]
    52a8:	4a6c      	ldr	r2, [pc, #432]	; (545c <_printf_i+0x22c>)
    52aa:	e030      	b.n	530e <_printf_i+0xde>
    52ac:	000e      	movs	r6, r1
    52ae:	681a      	ldr	r2, [r3, #0]
    52b0:	3642      	adds	r6, #66	; 0x42
    52b2:	1d11      	adds	r1, r2, #4
    52b4:	6019      	str	r1, [r3, #0]
    52b6:	6813      	ldr	r3, [r2, #0]
    52b8:	7033      	strb	r3, [r6, #0]
    52ba:	2301      	movs	r3, #1
    52bc:	e079      	b.n	53b2 <_printf_i+0x182>
    52be:	0649      	lsls	r1, r1, #25
    52c0:	d5d9      	bpl.n	5276 <_printf_i+0x46>
    52c2:	1d11      	adds	r1, r2, #4
    52c4:	6019      	str	r1, [r3, #0]
    52c6:	2300      	movs	r3, #0
    52c8:	5ed5      	ldrsh	r5, [r2, r3]
    52ca:	2d00      	cmp	r5, #0
    52cc:	da03      	bge.n	52d6 <_printf_i+0xa6>
    52ce:	232d      	movs	r3, #45	; 0x2d
    52d0:	9a04      	ldr	r2, [sp, #16]
    52d2:	426d      	negs	r5, r5
    52d4:	7013      	strb	r3, [r2, #0]
    52d6:	4b62      	ldr	r3, [pc, #392]	; (5460 <_printf_i+0x230>)
    52d8:	270a      	movs	r7, #10
    52da:	9303      	str	r3, [sp, #12]
    52dc:	e02f      	b.n	533e <_printf_i+0x10e>
    52de:	6820      	ldr	r0, [r4, #0]
    52e0:	6819      	ldr	r1, [r3, #0]
    52e2:	0605      	lsls	r5, r0, #24
    52e4:	d503      	bpl.n	52ee <_printf_i+0xbe>
    52e6:	1d08      	adds	r0, r1, #4
    52e8:	6018      	str	r0, [r3, #0]
    52ea:	680d      	ldr	r5, [r1, #0]
    52ec:	e005      	b.n	52fa <_printf_i+0xca>
    52ee:	0640      	lsls	r0, r0, #25
    52f0:	d5f9      	bpl.n	52e6 <_printf_i+0xb6>
    52f2:	680d      	ldr	r5, [r1, #0]
    52f4:	1d08      	adds	r0, r1, #4
    52f6:	6018      	str	r0, [r3, #0]
    52f8:	b2ad      	uxth	r5, r5
    52fa:	4b59      	ldr	r3, [pc, #356]	; (5460 <_printf_i+0x230>)
    52fc:	2708      	movs	r7, #8
    52fe:	9303      	str	r3, [sp, #12]
    5300:	2a6f      	cmp	r2, #111	; 0x6f
    5302:	d018      	beq.n	5336 <_printf_i+0x106>
    5304:	270a      	movs	r7, #10
    5306:	e016      	b.n	5336 <_printf_i+0x106>
    5308:	3145      	adds	r1, #69	; 0x45
    530a:	700a      	strb	r2, [r1, #0]
    530c:	4a54      	ldr	r2, [pc, #336]	; (5460 <_printf_i+0x230>)
    530e:	9203      	str	r2, [sp, #12]
    5310:	681a      	ldr	r2, [r3, #0]
    5312:	6821      	ldr	r1, [r4, #0]
    5314:	1d10      	adds	r0, r2, #4
    5316:	6018      	str	r0, [r3, #0]
    5318:	6815      	ldr	r5, [r2, #0]
    531a:	0608      	lsls	r0, r1, #24
    531c:	d522      	bpl.n	5364 <_printf_i+0x134>
    531e:	07cb      	lsls	r3, r1, #31
    5320:	d502      	bpl.n	5328 <_printf_i+0xf8>
    5322:	2320      	movs	r3, #32
    5324:	4319      	orrs	r1, r3
    5326:	6021      	str	r1, [r4, #0]
    5328:	2710      	movs	r7, #16
    532a:	2d00      	cmp	r5, #0
    532c:	d103      	bne.n	5336 <_printf_i+0x106>
    532e:	2320      	movs	r3, #32
    5330:	6822      	ldr	r2, [r4, #0]
    5332:	439a      	bics	r2, r3
    5334:	6022      	str	r2, [r4, #0]
    5336:	0023      	movs	r3, r4
    5338:	2200      	movs	r2, #0
    533a:	3343      	adds	r3, #67	; 0x43
    533c:	701a      	strb	r2, [r3, #0]
    533e:	6863      	ldr	r3, [r4, #4]
    5340:	60a3      	str	r3, [r4, #8]
    5342:	2b00      	cmp	r3, #0
    5344:	db5c      	blt.n	5400 <_printf_i+0x1d0>
    5346:	2204      	movs	r2, #4
    5348:	6821      	ldr	r1, [r4, #0]
    534a:	4391      	bics	r1, r2
    534c:	6021      	str	r1, [r4, #0]
    534e:	2d00      	cmp	r5, #0
    5350:	d158      	bne.n	5404 <_printf_i+0x1d4>
    5352:	9e04      	ldr	r6, [sp, #16]
    5354:	2b00      	cmp	r3, #0
    5356:	d064      	beq.n	5422 <_printf_i+0x1f2>
    5358:	0026      	movs	r6, r4
    535a:	9b03      	ldr	r3, [sp, #12]
    535c:	3642      	adds	r6, #66	; 0x42
    535e:	781b      	ldrb	r3, [r3, #0]
    5360:	7033      	strb	r3, [r6, #0]
    5362:	e05e      	b.n	5422 <_printf_i+0x1f2>
    5364:	0648      	lsls	r0, r1, #25
    5366:	d5da      	bpl.n	531e <_printf_i+0xee>
    5368:	b2ad      	uxth	r5, r5
    536a:	e7d8      	b.n	531e <_printf_i+0xee>
    536c:	6809      	ldr	r1, [r1, #0]
    536e:	681a      	ldr	r2, [r3, #0]
    5370:	0608      	lsls	r0, r1, #24
    5372:	d505      	bpl.n	5380 <_printf_i+0x150>
    5374:	1d11      	adds	r1, r2, #4
    5376:	6019      	str	r1, [r3, #0]
    5378:	6813      	ldr	r3, [r2, #0]
    537a:	6962      	ldr	r2, [r4, #20]
    537c:	601a      	str	r2, [r3, #0]
    537e:	e006      	b.n	538e <_printf_i+0x15e>
    5380:	0649      	lsls	r1, r1, #25
    5382:	d5f7      	bpl.n	5374 <_printf_i+0x144>
    5384:	1d11      	adds	r1, r2, #4
    5386:	6019      	str	r1, [r3, #0]
    5388:	6813      	ldr	r3, [r2, #0]
    538a:	8aa2      	ldrh	r2, [r4, #20]
    538c:	801a      	strh	r2, [r3, #0]
    538e:	2300      	movs	r3, #0
    5390:	9e04      	ldr	r6, [sp, #16]
    5392:	6123      	str	r3, [r4, #16]
    5394:	e054      	b.n	5440 <_printf_i+0x210>
    5396:	681a      	ldr	r2, [r3, #0]
    5398:	1d11      	adds	r1, r2, #4
    539a:	6019      	str	r1, [r3, #0]
    539c:	6816      	ldr	r6, [r2, #0]
    539e:	2100      	movs	r1, #0
    53a0:	6862      	ldr	r2, [r4, #4]
    53a2:	0030      	movs	r0, r6
    53a4:	f000 f870 	bl	5488 <memchr>
    53a8:	2800      	cmp	r0, #0
    53aa:	d001      	beq.n	53b0 <_printf_i+0x180>
    53ac:	1b80      	subs	r0, r0, r6
    53ae:	6060      	str	r0, [r4, #4]
    53b0:	6863      	ldr	r3, [r4, #4]
    53b2:	6123      	str	r3, [r4, #16]
    53b4:	2300      	movs	r3, #0
    53b6:	9a04      	ldr	r2, [sp, #16]
    53b8:	7013      	strb	r3, [r2, #0]
    53ba:	e041      	b.n	5440 <_printf_i+0x210>
    53bc:	6923      	ldr	r3, [r4, #16]
    53be:	0032      	movs	r2, r6
    53c0:	9906      	ldr	r1, [sp, #24]
    53c2:	9805      	ldr	r0, [sp, #20]
    53c4:	9d07      	ldr	r5, [sp, #28]
    53c6:	47a8      	blx	r5
    53c8:	1c43      	adds	r3, r0, #1
    53ca:	d043      	beq.n	5454 <_printf_i+0x224>
    53cc:	6823      	ldr	r3, [r4, #0]
    53ce:	2500      	movs	r5, #0
    53d0:	079b      	lsls	r3, r3, #30
    53d2:	d40f      	bmi.n	53f4 <_printf_i+0x1c4>
    53d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    53d6:	68e0      	ldr	r0, [r4, #12]
    53d8:	4298      	cmp	r0, r3
    53da:	da3d      	bge.n	5458 <_printf_i+0x228>
    53dc:	0018      	movs	r0, r3
    53de:	e03b      	b.n	5458 <_printf_i+0x228>
    53e0:	0022      	movs	r2, r4
    53e2:	2301      	movs	r3, #1
    53e4:	3219      	adds	r2, #25
    53e6:	9906      	ldr	r1, [sp, #24]
    53e8:	9805      	ldr	r0, [sp, #20]
    53ea:	9e07      	ldr	r6, [sp, #28]
    53ec:	47b0      	blx	r6
    53ee:	1c43      	adds	r3, r0, #1
    53f0:	d030      	beq.n	5454 <_printf_i+0x224>
    53f2:	3501      	adds	r5, #1
    53f4:	68e3      	ldr	r3, [r4, #12]
    53f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    53f8:	1a9b      	subs	r3, r3, r2
    53fa:	429d      	cmp	r5, r3
    53fc:	dbf0      	blt.n	53e0 <_printf_i+0x1b0>
    53fe:	e7e9      	b.n	53d4 <_printf_i+0x1a4>
    5400:	2d00      	cmp	r5, #0
    5402:	d0a9      	beq.n	5358 <_printf_i+0x128>
    5404:	9e04      	ldr	r6, [sp, #16]
    5406:	0028      	movs	r0, r5
    5408:	0039      	movs	r1, r7
    540a:	f7ff fbf5 	bl	4bf8 <__aeabi_uidivmod>
    540e:	9b03      	ldr	r3, [sp, #12]
    5410:	3e01      	subs	r6, #1
    5412:	5c5b      	ldrb	r3, [r3, r1]
    5414:	0028      	movs	r0, r5
    5416:	7033      	strb	r3, [r6, #0]
    5418:	0039      	movs	r1, r7
    541a:	f7ff fb67 	bl	4aec <__udivsi3>
    541e:	1e05      	subs	r5, r0, #0
    5420:	d1f1      	bne.n	5406 <_printf_i+0x1d6>
    5422:	2f08      	cmp	r7, #8
    5424:	d109      	bne.n	543a <_printf_i+0x20a>
    5426:	6823      	ldr	r3, [r4, #0]
    5428:	07db      	lsls	r3, r3, #31
    542a:	d506      	bpl.n	543a <_printf_i+0x20a>
    542c:	6863      	ldr	r3, [r4, #4]
    542e:	6922      	ldr	r2, [r4, #16]
    5430:	4293      	cmp	r3, r2
    5432:	dc02      	bgt.n	543a <_printf_i+0x20a>
    5434:	2330      	movs	r3, #48	; 0x30
    5436:	3e01      	subs	r6, #1
    5438:	7033      	strb	r3, [r6, #0]
    543a:	9b04      	ldr	r3, [sp, #16]
    543c:	1b9b      	subs	r3, r3, r6
    543e:	6123      	str	r3, [r4, #16]
    5440:	9b07      	ldr	r3, [sp, #28]
    5442:	aa09      	add	r2, sp, #36	; 0x24
    5444:	9300      	str	r3, [sp, #0]
    5446:	0021      	movs	r1, r4
    5448:	9b06      	ldr	r3, [sp, #24]
    544a:	9805      	ldr	r0, [sp, #20]
    544c:	f7ff fe82 	bl	5154 <_printf_common>
    5450:	1c43      	adds	r3, r0, #1
    5452:	d1b3      	bne.n	53bc <_printf_i+0x18c>
    5454:	2001      	movs	r0, #1
    5456:	4240      	negs	r0, r0
    5458:	b00b      	add	sp, #44	; 0x2c
    545a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    545c:	0000579e 	.word	0x0000579e
    5460:	0000578d 	.word	0x0000578d

00005464 <_sbrk_r>:
    5464:	2300      	movs	r3, #0
    5466:	b570      	push	{r4, r5, r6, lr}
    5468:	4c06      	ldr	r4, [pc, #24]	; (5484 <_sbrk_r+0x20>)
    546a:	0005      	movs	r5, r0
    546c:	0008      	movs	r0, r1
    546e:	6023      	str	r3, [r4, #0]
    5470:	f7ff f918 	bl	46a4 <_sbrk>
    5474:	1c43      	adds	r3, r0, #1
    5476:	d103      	bne.n	5480 <_sbrk_r+0x1c>
    5478:	6823      	ldr	r3, [r4, #0]
    547a:	2b00      	cmp	r3, #0
    547c:	d000      	beq.n	5480 <_sbrk_r+0x1c>
    547e:	602b      	str	r3, [r5, #0]
    5480:	bd70      	pop	{r4, r5, r6, pc}
    5482:	46c0      	nop			; (mov r8, r8)
    5484:	200009dc 	.word	0x200009dc

00005488 <memchr>:
    5488:	b2c9      	uxtb	r1, r1
    548a:	1882      	adds	r2, r0, r2
    548c:	4290      	cmp	r0, r2
    548e:	d101      	bne.n	5494 <memchr+0xc>
    5490:	2000      	movs	r0, #0
    5492:	4770      	bx	lr
    5494:	7803      	ldrb	r3, [r0, #0]
    5496:	428b      	cmp	r3, r1
    5498:	d0fb      	beq.n	5492 <memchr+0xa>
    549a:	3001      	adds	r0, #1
    549c:	e7f6      	b.n	548c <memchr+0x4>

0000549e <memmove>:
    549e:	b510      	push	{r4, lr}
    54a0:	4288      	cmp	r0, r1
    54a2:	d902      	bls.n	54aa <memmove+0xc>
    54a4:	188b      	adds	r3, r1, r2
    54a6:	4298      	cmp	r0, r3
    54a8:	d308      	bcc.n	54bc <memmove+0x1e>
    54aa:	2300      	movs	r3, #0
    54ac:	429a      	cmp	r2, r3
    54ae:	d007      	beq.n	54c0 <memmove+0x22>
    54b0:	5ccc      	ldrb	r4, [r1, r3]
    54b2:	54c4      	strb	r4, [r0, r3]
    54b4:	3301      	adds	r3, #1
    54b6:	e7f9      	b.n	54ac <memmove+0xe>
    54b8:	5c8b      	ldrb	r3, [r1, r2]
    54ba:	5483      	strb	r3, [r0, r2]
    54bc:	3a01      	subs	r2, #1
    54be:	d2fb      	bcs.n	54b8 <memmove+0x1a>
    54c0:	bd10      	pop	{r4, pc}

000054c2 <__malloc_lock>:
    54c2:	4770      	bx	lr

000054c4 <__malloc_unlock>:
    54c4:	4770      	bx	lr

000054c6 <_realloc_r>:
    54c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54c8:	0007      	movs	r7, r0
    54ca:	000d      	movs	r5, r1
    54cc:	0016      	movs	r6, r2
    54ce:	2900      	cmp	r1, #0
    54d0:	d105      	bne.n	54de <_realloc_r+0x18>
    54d2:	0011      	movs	r1, r2
    54d4:	f7ff fc7a 	bl	4dcc <_malloc_r>
    54d8:	0004      	movs	r4, r0
    54da:	0020      	movs	r0, r4
    54dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54de:	2a00      	cmp	r2, #0
    54e0:	d103      	bne.n	54ea <_realloc_r+0x24>
    54e2:	f7ff fc29 	bl	4d38 <_free_r>
    54e6:	0034      	movs	r4, r6
    54e8:	e7f7      	b.n	54da <_realloc_r+0x14>
    54ea:	f000 f812 	bl	5512 <_malloc_usable_size_r>
    54ee:	002c      	movs	r4, r5
    54f0:	4286      	cmp	r6, r0
    54f2:	d9f2      	bls.n	54da <_realloc_r+0x14>
    54f4:	0031      	movs	r1, r6
    54f6:	0038      	movs	r0, r7
    54f8:	f7ff fc68 	bl	4dcc <_malloc_r>
    54fc:	1e04      	subs	r4, r0, #0
    54fe:	d0ec      	beq.n	54da <_realloc_r+0x14>
    5500:	0029      	movs	r1, r5
    5502:	0032      	movs	r2, r6
    5504:	f7ff fbcc 	bl	4ca0 <memcpy>
    5508:	0029      	movs	r1, r5
    550a:	0038      	movs	r0, r7
    550c:	f7ff fc14 	bl	4d38 <_free_r>
    5510:	e7e3      	b.n	54da <_realloc_r+0x14>

00005512 <_malloc_usable_size_r>:
    5512:	1f0b      	subs	r3, r1, #4
    5514:	681b      	ldr	r3, [r3, #0]
    5516:	1f18      	subs	r0, r3, #4
    5518:	2b00      	cmp	r3, #0
    551a:	da01      	bge.n	5520 <_malloc_usable_size_r+0xe>
    551c:	580b      	ldr	r3, [r1, r0]
    551e:	18c0      	adds	r0, r0, r3
    5520:	4770      	bx	lr
    5522:	0000      	movs	r0, r0
    5524:	42000800 	.word	0x42000800
    5528:	42000c00 	.word	0x42000c00
    552c:	42001000 	.word	0x42001000
    5530:	42001400 	.word	0x42001400
    5534:	42001800 	.word	0x42001800
    5538:	42001c00 	.word	0x42001c00
    553c:	484d3732 	.word	0x484d3732
    5540:	0000007a 	.word	0x0000007a
    5544:	4d393631 	.word	0x4d393631
    5548:	00007a48 	.word	0x00007a48
    554c:	4d353139 	.word	0x4d353139
    5550:	00007a48 	.word	0x00007a48
    5554:	47342e32 	.word	0x47342e32
    5558:	00007a48 	.word	0x00007a48
    555c:	00004264 	.word	0x00004264
    5560:	65747441 	.word	0x65747441
    5564:	7461756e 	.word	0x7461756e
    5568:	006e6f69 	.word	0x006e6f69
    556c:	61656c50 	.word	0x61656c50
    5570:	74206573 	.word	0x74206573
    5574:	6f207061 	.word	0x6f207061
    5578:	6874206e 	.word	0x6874206e
    557c:	6f642065 	.word	0x6f642065
    5580:	00000074 	.word	0x00000074
    5584:	61422020 	.word	0x61422020
    5588:	20206b63 	.word	0x20206b63
    558c:	00000000 	.word	0x00000000
    5590:	00333231 	.word	0x00333231
    5594:	00363534 	.word	0x00363534
    5598:	00393837 	.word	0x00393837
    559c:	00000030 	.word	0x00000030
    55a0:	00002d3c 	.word	0x00002d3c
    55a4:	00524c43 	.word	0x00524c43
    55a8:	00004b4f 	.word	0x00004b4f
    55ac:	64323025 	.word	0x64323025
    55b0:	3025202e 	.word	0x3025202e
    55b4:	253a6432 	.word	0x253a6432
    55b8:	3a643230 	.word	0x3a643230
    55bc:	64323025 	.word	0x64323025
    55c0:	25202020 	.word	0x25202020
    55c4:	2f643230 	.word	0x2f643230
    55c8:	64323025 	.word	0x64323025
    55cc:	3430252f 	.word	0x3430252f
    55d0:	20202064 	.word	0x20202064
    55d4:	20202020 	.word	0x20202020
    55d8:	20202020 	.word	0x20202020
    55dc:	20202020 	.word	0x20202020
    55e0:	30252020 	.word	0x30252020
    55e4:	20206433 	.word	0x20206433
    55e8:	20202020 	.word	0x20202020
    55ec:	20202020 	.word	0x20202020
    55f0:	20202020 	.word	0x20202020
    55f4:	20202020 	.word	0x20202020
    55f8:	20202020 	.word	0x20202020
    55fc:	33302520 	.word	0x33302520
    5600:	20202064 	.word	0x20202064
    5604:	20202020 	.word	0x20202020
    5608:	20202020 	.word	0x20202020
    560c:	20202020 	.word	0x20202020
    5610:	20202020 	.word	0x20202020
    5614:	25202020 	.word	0x25202020
    5618:	00643330 	.word	0x00643330
    561c:	74736948 	.word	0x74736948
    5620:	0079726f 	.word	0x0079726f
    5624:	64323025 	.word	0x64323025
    5628:	3230253a 	.word	0x3230253a
    562c:	30253a64 	.word	0x30253a64
    5630:	00006432 	.word	0x00006432
    5634:	64323025 	.word	0x64323025
    5638:	3230252f 	.word	0x3230252f
    563c:	30252f64 	.word	0x30252f64
    5640:	00006434 	.word	0x00006434
    5644:	49535352 	.word	0x49535352
    5648:	6e695b20 	.word	0x6e695b20
    564c:	69726574 	.word	0x69726574
    5650:	005d726f 	.word	0x005d726f
    5654:	65746e45 	.word	0x65746e45
    5658:	61442072 	.word	0x61442072
    565c:	00006574 	.word	0x00006574
    5660:	642f6d6d 	.word	0x642f6d6d
    5664:	79792f64 	.word	0x79792f64
    5668:	00007979 	.word	0x00007979
    566c:	65746e45 	.word	0x65746e45
    5670:	69542072 	.word	0x69542072
    5674:	0000656d 	.word	0x0000656d
    5678:	6d3a6868 	.word	0x6d3a6868
    567c:	73733a6d 	.word	0x73733a6d
    5680:	20202020 	.word	0x20202020
    5684:	68343228 	.word	0x68343228
    5688:	726f6620 	.word	0x726f6620
    568c:	2974616d 	.word	0x2974616d
    5690:	00000000 	.word	0x00000000
    5694:	75736956 	.word	0x75736956
    5698:	003a6c61 	.word	0x003a6c61
    569c:	00736559 	.word	0x00736559
    56a0:	00006f4e 	.word	0x00006f4e
    56a4:	6e756f53 	.word	0x6e756f53
    56a8:	00203a64 	.word	0x00203a64
    56ac:	61432020 	.word	0x61432020
    56b0:	7262696c 	.word	0x7262696c
    56b4:	20657461 	.word	0x20657461
    56b8:	65726353 	.word	0x65726353
    56bc:	20206e65 	.word	0x20206e65
    56c0:	00000000 	.word	0x00000000
    56c4:	65532020 	.word	0x65532020
    56c8:	61442074 	.word	0x61442074
    56cc:	20206574 	.word	0x20206574
    56d0:	00000000 	.word	0x00000000
    56d4:	65532020 	.word	0x65532020
    56d8:	69542074 	.word	0x69542074
    56dc:	2020656d 	.word	0x2020656d
    56e0:	00000000 	.word	0x00000000
    56e4:	74746553 	.word	0x74746553
    56e8:	73676e69 	.word	0x73676e69
    56ec:	00000000 	.word	0x00000000
    56f0:	0c0b0a09 	.word	0x0c0b0a09
    56f4:	00000e0d 	.word	0x00000e0d
    56f8:	00003f1c 	.word	0x00003f1c
    56fc:	00003f78 	.word	0x00003f78
    5700:	00003f78 	.word	0x00003f78
    5704:	00003f16 	.word	0x00003f16
    5708:	00003f16 	.word	0x00003f16
    570c:	00003f30 	.word	0x00003f30
    5710:	00003f22 	.word	0x00003f22
    5714:	00003f36 	.word	0x00003f36
    5718:	00003f68 	.word	0x00003f68
    571c:	00004068 	.word	0x00004068
    5720:	000040d6 	.word	0x000040d6
    5724:	000040d6 	.word	0x000040d6
    5728:	00004048 	.word	0x00004048
    572c:	0000405a 	.word	0x0000405a
    5730:	00004078 	.word	0x00004078
    5734:	0000404c 	.word	0x0000404c
    5738:	00004088 	.word	0x00004088
    573c:	000040c4 	.word	0x000040c4
    5740:	281e140a 	.word	0x281e140a
    5744:	74412020 	.word	0x74412020
    5748:	756e6574 	.word	0x756e6574
    574c:	6f697461 	.word	0x6f697461
    5750:	0020206e 	.word	0x0020206e
    5754:	69482020 	.word	0x69482020
    5758:	726f7473 	.word	0x726f7473
    575c:	00202079 	.word	0x00202079
    5760:	53522020 	.word	0x53522020
    5764:	20204953 	.word	0x20204953
    5768:	00000000 	.word	0x00000000
    576c:	65532020 	.word	0x65532020
    5770:	6e697474 	.word	0x6e697474
    5774:	20207367 	.word	0x20207367
    5778:	00000000 	.word	0x00000000
    577c:	2b302d23 	.word	0x2b302d23
    5780:	6c680020 	.word	0x6c680020
    5784:	6665004c 	.word	0x6665004c
    5788:	47464567 	.word	0x47464567
    578c:	00          	.byte	0x00
    578d:	30          	.byte	0x30
    578e:	3231      	.short	0x3231
    5790:	36353433 	.word	0x36353433
    5794:	41393837 	.word	0x41393837
    5798:	45444342 	.word	0x45444342
    579c:	31300046 	.word	0x31300046
    57a0:	35343332 	.word	0x35343332
    57a4:	39383736 	.word	0x39383736
    57a8:	64636261 	.word	0x64636261
    57ac:	00006665 	.word	0x00006665

000057b0 <_init>:
    57b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57b2:	46c0      	nop			; (mov r8, r8)
    57b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    57b6:	bc08      	pop	{r3}
    57b8:	469e      	mov	lr, r3
    57ba:	4770      	bx	lr

000057bc <__init_array_start>:
    57bc:	000000dd 	.word	0x000000dd

000057c0 <_fini>:
    57c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    57c6:	bc08      	pop	{r3}
    57c8:	469e      	mov	lr, r3
    57ca:	4770      	bx	lr

000057cc <__fini_array_start>:
    57cc:	000000b5 	.word	0x000000b5
