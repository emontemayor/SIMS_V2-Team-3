
BACnet_MSTP_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c20  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00005c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009b0  20000074  00005c94  00020074  2**2
                  ALLOC
  3 .stack        00002004  20000a24  00006644  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00061b37  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007d94  00000000  00000000  00081c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ff2f  00000000  00000000  000899c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ff8  00000000  00000000  000998ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001618  00000000  00000000  0009a8e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002218b  00000000  00000000  0009beff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001dd97  00000000  00000000  000be08a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009562b  00000000  00000000  000dbe21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ddc  00000000  00000000  0017144c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 2a 00 20 85 4a 00 00 81 4a 00 00 81 4a 00 00     (*. .J...J...J..
	...
      2c:	81 4a 00 00 00 00 00 00 00 00 00 00 81 4a 00 00     .J...........J..
      3c:	49 39 00 00 81 4a 00 00 81 4a 00 00 29 3c 00 00     I9...J...J..)<..
      4c:	81 4a 00 00 a1 02 00 00 81 4a 00 00 81 4a 00 00     .J.......J...J..
      5c:	81 4a 00 00 81 4a 00 00 91 42 00 00 a1 42 00 00     .J...J...B...B..
      6c:	b1 42 00 00 c1 42 00 00 d1 42 00 00 e1 42 00 00     .B...B...B...B..
      7c:	81 4a 00 00 81 4a 00 00 81 4a 00 00 a9 3c 00 00     .J...J...J...<..
      8c:	b9 3c 00 00 c9 3c 00 00 d9 3c 00 00 e9 3c 00 00     .<...<...<...<..
      9c:	65 02 00 00 81 4a 00 00 81 4a 00 00 81 4a 00 00     e....J...J...J..
      ac:	81 4a 00 00 00 00 00 00                             .J......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00005c20 	.word	0x00005c20

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00005c20 	.word	0x00005c20
     10c:	00005c20 	.word	0x00005c20
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
     114:	b510      	push	{r4, lr}
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	000047b5 	.word	0x000047b5
     140:	00004f3d 	.word	0x00004f3d
     144:	20000000 	.word	0x20000000
     148:	20000004 	.word	0x20000004
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
     150:	e000      	b.n	154 <delay_cycles_ms+0x4>
     152:	0010      	movs	r0, r2
     154:	1e42      	subs	r2, r0, #1
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <delay_cycles_ms+0x24>
     15a:	4b07      	ldr	r3, [pc, #28]	; (178 <delay_cycles_ms+0x28>)
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d0f7      	beq.n	152 <delay_cycles_ms+0x2>
     162:	4906      	ldr	r1, [pc, #24]	; (17c <delay_cycles_ms+0x2c>)
     164:	604b      	str	r3, [r1, #4]
     166:	2300      	movs	r3, #0
     168:	608b      	str	r3, [r1, #8]
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <delay_cycles_ms+0x2c>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	03db      	lsls	r3, r3, #15
     170:	d5fb      	bpl.n	16a <delay_cycles_ms+0x1a>
     172:	e7ee      	b.n	152 <delay_cycles_ms+0x2>
     174:	4770      	bx	lr
     176:	46c0      	nop			; (mov r8, r8)
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <_adc_interrupt_handler>:
     180:	b570      	push	{r4, r5, r6, lr}
     182:	0080      	lsls	r0, r0, #2
     184:	4b36      	ldr	r3, [pc, #216]	; (260 <_adc_interrupt_handler+0xe0>)
     186:	58c5      	ldr	r5, [r0, r3]
     188:	682b      	ldr	r3, [r5, #0]
     18a:	7e1a      	ldrb	r2, [r3, #24]
     18c:	7ddc      	ldrb	r4, [r3, #23]
     18e:	4014      	ands	r4, r2
     190:	07e2      	lsls	r2, r4, #31
     192:	d416      	bmi.n	1c2 <_adc_interrupt_handler+0x42>
     194:	0763      	lsls	r3, r4, #29
     196:	d508      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
     198:	2304      	movs	r3, #4
     19a:	682a      	ldr	r2, [r5, #0]
     19c:	7613      	strb	r3, [r2, #24]
     19e:	7eeb      	ldrb	r3, [r5, #27]
     1a0:	079b      	lsls	r3, r3, #30
     1a2:	d502      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
     1a4:	7eab      	ldrb	r3, [r5, #26]
     1a6:	079b      	lsls	r3, r3, #30
     1a8:	d452      	bmi.n	250 <_adc_interrupt_handler+0xd0>
     1aa:	07a3      	lsls	r3, r4, #30
     1ac:	d508      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
     1ae:	2302      	movs	r3, #2
     1b0:	682a      	ldr	r2, [r5, #0]
     1b2:	7613      	strb	r3, [r2, #24]
     1b4:	7eeb      	ldrb	r3, [r5, #27]
     1b6:	075b      	lsls	r3, r3, #29
     1b8:	d502      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
     1ba:	7eab      	ldrb	r3, [r5, #26]
     1bc:	075b      	lsls	r3, r3, #29
     1be:	d44b      	bmi.n	258 <_adc_interrupt_handler+0xd8>
     1c0:	bd70      	pop	{r4, r5, r6, pc}
     1c2:	2201      	movs	r2, #1
     1c4:	761a      	strb	r2, [r3, #24]
     1c6:	682a      	ldr	r2, [r5, #0]
     1c8:	7e53      	ldrb	r3, [r2, #25]
     1ca:	b25b      	sxtb	r3, r3
     1cc:	2b00      	cmp	r3, #0
     1ce:	db27      	blt.n	220 <_adc_interrupt_handler+0xa0>
     1d0:	2100      	movs	r1, #0
     1d2:	2900      	cmp	r1, #0
     1d4:	d1f7      	bne.n	1c6 <_adc_interrupt_handler+0x46>
     1d6:	6968      	ldr	r0, [r5, #20]
     1d8:	1c83      	adds	r3, r0, #2
     1da:	616b      	str	r3, [r5, #20]
     1dc:	8b53      	ldrh	r3, [r2, #26]
     1de:	b29b      	uxth	r3, r3
     1e0:	8003      	strh	r3, [r0, #0]
     1e2:	8b2b      	ldrh	r3, [r5, #24]
     1e4:	3b01      	subs	r3, #1
     1e6:	b29b      	uxth	r3, r3
     1e8:	832b      	strh	r3, [r5, #24]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d01e      	beq.n	22c <_adc_interrupt_handler+0xac>
     1ee:	7f6b      	ldrb	r3, [r5, #29]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d0cf      	beq.n	194 <_adc_interrupt_handler+0x14>
     1f4:	682e      	ldr	r6, [r5, #0]
     1f6:	7e72      	ldrb	r2, [r6, #25]
     1f8:	b252      	sxtb	r2, r2
     1fa:	2a00      	cmp	r2, #0
     1fc:	db12      	blt.n	224 <_adc_interrupt_handler+0xa4>
     1fe:	0008      	movs	r0, r1
     200:	2800      	cmp	r0, #0
     202:	d1f8      	bne.n	1f6 <_adc_interrupt_handler+0x76>
     204:	7b32      	ldrb	r2, [r6, #12]
     206:	2102      	movs	r1, #2
     208:	430a      	orrs	r2, r1
     20a:	b2d2      	uxtb	r2, r2
     20c:	7332      	strb	r2, [r6, #12]
     20e:	682a      	ldr	r2, [r5, #0]
     210:	7e52      	ldrb	r2, [r2, #25]
     212:	b252      	sxtb	r2, r2
     214:	2a00      	cmp	r2, #0
     216:	db07      	blt.n	228 <_adc_interrupt_handler+0xa8>
     218:	0002      	movs	r2, r0
     21a:	2a00      	cmp	r2, #0
     21c:	d1f7      	bne.n	20e <_adc_interrupt_handler+0x8e>
     21e:	e7b9      	b.n	194 <_adc_interrupt_handler+0x14>
     220:	2101      	movs	r1, #1
     222:	e7d6      	b.n	1d2 <_adc_interrupt_handler+0x52>
     224:	0018      	movs	r0, r3
     226:	e7eb      	b.n	200 <_adc_interrupt_handler+0x80>
     228:	001a      	movs	r2, r3
     22a:	e7f6      	b.n	21a <_adc_interrupt_handler+0x9a>
     22c:	2301      	movs	r3, #1
     22e:	682a      	ldr	r2, [r5, #0]
     230:	7593      	strb	r3, [r2, #22]
     232:	7f2b      	ldrb	r3, [r5, #28]
     234:	2b05      	cmp	r3, #5
     236:	d1ad      	bne.n	194 <_adc_interrupt_handler+0x14>
     238:	2300      	movs	r3, #0
     23a:	772b      	strb	r3, [r5, #28]
     23c:	7eeb      	ldrb	r3, [r5, #27]
     23e:	07db      	lsls	r3, r3, #31
     240:	d5a8      	bpl.n	194 <_adc_interrupt_handler+0x14>
     242:	7eab      	ldrb	r3, [r5, #26]
     244:	07db      	lsls	r3, r3, #31
     246:	d5a5      	bpl.n	194 <_adc_interrupt_handler+0x14>
     248:	0028      	movs	r0, r5
     24a:	68ab      	ldr	r3, [r5, #8]
     24c:	4798      	blx	r3
     24e:	e7a1      	b.n	194 <_adc_interrupt_handler+0x14>
     250:	0028      	movs	r0, r5
     252:	68eb      	ldr	r3, [r5, #12]
     254:	4798      	blx	r3
     256:	e7a8      	b.n	1aa <_adc_interrupt_handler+0x2a>
     258:	692b      	ldr	r3, [r5, #16]
     25a:	0028      	movs	r0, r5
     25c:	4798      	blx	r3
     25e:	e7af      	b.n	1c0 <_adc_interrupt_handler+0x40>
     260:	200003dc 	.word	0x200003dc

00000264 <ADC_Handler>:
     264:	b510      	push	{r4, lr}
     266:	2000      	movs	r0, #0
     268:	4b01      	ldr	r3, [pc, #4]	; (270 <ADC_Handler+0xc>)
     26a:	4798      	blx	r3
     26c:	bd10      	pop	{r4, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00000181 	.word	0x00000181

00000274 <extint_register_callback>:
     274:	2a00      	cmp	r2, #0
     276:	d001      	beq.n	27c <extint_register_callback+0x8>
     278:	2017      	movs	r0, #23
     27a:	4770      	bx	lr
     27c:	008b      	lsls	r3, r1, #2
     27e:	4a07      	ldr	r2, [pc, #28]	; (29c <extint_register_callback+0x28>)
     280:	589b      	ldr	r3, [r3, r2]
     282:	2b00      	cmp	r3, #0
     284:	d003      	beq.n	28e <extint_register_callback+0x1a>
     286:	4283      	cmp	r3, r0
     288:	d005      	beq.n	296 <extint_register_callback+0x22>
     28a:	201d      	movs	r0, #29
     28c:	e7f5      	b.n	27a <extint_register_callback+0x6>
     28e:	0089      	lsls	r1, r1, #2
     290:	5088      	str	r0, [r1, r2]
     292:	2000      	movs	r0, #0
     294:	e7f1      	b.n	27a <extint_register_callback+0x6>
     296:	2000      	movs	r0, #0
     298:	e7ef      	b.n	27a <extint_register_callback+0x6>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	200003e4 	.word	0x200003e4

000002a0 <EIC_Handler>:
     2a0:	b510      	push	{r4, lr}
     2a2:	2200      	movs	r2, #0
     2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <EIC_Handler+0x44>)
     2a6:	701a      	strb	r2, [r3, #0]
     2a8:	e005      	b.n	2b6 <EIC_Handler+0x16>
     2aa:	480f      	ldr	r0, [pc, #60]	; (2e8 <EIC_Handler+0x48>)
     2ac:	e00a      	b.n	2c4 <EIC_Handler+0x24>
     2ae:	4a0d      	ldr	r2, [pc, #52]	; (2e4 <EIC_Handler+0x44>)
     2b0:	7813      	ldrb	r3, [r2, #0]
     2b2:	3301      	adds	r3, #1
     2b4:	7013      	strb	r3, [r2, #0]
     2b6:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <EIC_Handler+0x44>)
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b0f      	cmp	r3, #15
     2bc:	d811      	bhi.n	2e2 <EIC_Handler+0x42>
     2be:	2b1f      	cmp	r3, #31
     2c0:	d9f3      	bls.n	2aa <EIC_Handler+0xa>
     2c2:	2000      	movs	r0, #0
     2c4:	211f      	movs	r1, #31
     2c6:	4019      	ands	r1, r3
     2c8:	2201      	movs	r2, #1
     2ca:	408a      	lsls	r2, r1
     2cc:	6901      	ldr	r1, [r0, #16]
     2ce:	4211      	tst	r1, r2
     2d0:	d0ed      	beq.n	2ae <EIC_Handler+0xe>
     2d2:	6102      	str	r2, [r0, #16]
     2d4:	009b      	lsls	r3, r3, #2
     2d6:	4a05      	ldr	r2, [pc, #20]	; (2ec <EIC_Handler+0x4c>)
     2d8:	589b      	ldr	r3, [r3, r2]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e7      	beq.n	2ae <EIC_Handler+0xe>
     2de:	4798      	blx	r3
     2e0:	e7e5      	b.n	2ae <EIC_Handler+0xe>
     2e2:	bd10      	pop	{r4, pc}
     2e4:	200003e0 	.word	0x200003e0
     2e8:	40001800 	.word	0x40001800
     2ec:	200003e4 	.word	0x200003e4

000002f0 <_extint_enable>:
     2f0:	2200      	movs	r2, #0
     2f2:	2a00      	cmp	r2, #0
     2f4:	d006      	beq.n	304 <_extint_enable+0x14>
     2f6:	2300      	movs	r3, #0
     2f8:	2b00      	cmp	r3, #0
     2fa:	d00b      	beq.n	314 <_extint_enable+0x24>
     2fc:	2300      	movs	r3, #0
     2fe:	2b00      	cmp	r3, #0
     300:	d1f9      	bne.n	2f6 <_extint_enable+0x6>
     302:	4770      	bx	lr
     304:	4908      	ldr	r1, [pc, #32]	; (328 <_extint_enable+0x38>)
     306:	780b      	ldrb	r3, [r1, #0]
     308:	2002      	movs	r0, #2
     30a:	4303      	orrs	r3, r0
     30c:	b2db      	uxtb	r3, r3
     30e:	700b      	strb	r3, [r1, #0]
     310:	3201      	adds	r2, #1
     312:	e7ee      	b.n	2f2 <_extint_enable+0x2>
     314:	4a04      	ldr	r2, [pc, #16]	; (328 <_extint_enable+0x38>)
     316:	7852      	ldrb	r2, [r2, #1]
     318:	b252      	sxtb	r2, r2
     31a:	2a00      	cmp	r2, #0
     31c:	db01      	blt.n	322 <_extint_enable+0x32>
     31e:	3301      	adds	r3, #1
     320:	e7ea      	b.n	2f8 <_extint_enable+0x8>
     322:	2301      	movs	r3, #1
     324:	e7eb      	b.n	2fe <_extint_enable+0xe>
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <_system_extint_init>:
     32c:	b500      	push	{lr}
     32e:	b083      	sub	sp, #12
     330:	4a1b      	ldr	r2, [pc, #108]	; (3a0 <_system_extint_init+0x74>)
     332:	6993      	ldr	r3, [r2, #24]
     334:	2140      	movs	r1, #64	; 0x40
     336:	430b      	orrs	r3, r1
     338:	6193      	str	r3, [r2, #24]
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	700b      	strb	r3, [r1, #0]
     340:	2005      	movs	r0, #5
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <_system_extint_init+0x78>)
     344:	4798      	blx	r3
     346:	2005      	movs	r0, #5
     348:	4b17      	ldr	r3, [pc, #92]	; (3a8 <_system_extint_init+0x7c>)
     34a:	4798      	blx	r3
     34c:	2200      	movs	r2, #0
     34e:	2a00      	cmp	r2, #0
     350:	d006      	beq.n	360 <_system_extint_init+0x34>
     352:	2300      	movs	r3, #0
     354:	2b00      	cmp	r3, #0
     356:	d00b      	beq.n	370 <_system_extint_init+0x44>
     358:	2300      	movs	r3, #0
     35a:	2b00      	cmp	r3, #0
     35c:	d1f9      	bne.n	352 <_system_extint_init+0x26>
     35e:	e016      	b.n	38e <_system_extint_init+0x62>
     360:	4912      	ldr	r1, [pc, #72]	; (3ac <_system_extint_init+0x80>)
     362:	780b      	ldrb	r3, [r1, #0]
     364:	2001      	movs	r0, #1
     366:	4303      	orrs	r3, r0
     368:	b2db      	uxtb	r3, r3
     36a:	700b      	strb	r3, [r1, #0]
     36c:	3201      	adds	r2, #1
     36e:	e7ee      	b.n	34e <_system_extint_init+0x22>
     370:	4a0e      	ldr	r2, [pc, #56]	; (3ac <_system_extint_init+0x80>)
     372:	7852      	ldrb	r2, [r2, #1]
     374:	b252      	sxtb	r2, r2
     376:	2a00      	cmp	r2, #0
     378:	db01      	blt.n	37e <_system_extint_init+0x52>
     37a:	3301      	adds	r3, #1
     37c:	e7ea      	b.n	354 <_system_extint_init+0x28>
     37e:	2301      	movs	r3, #1
     380:	e7eb      	b.n	35a <_system_extint_init+0x2e>
     382:	0099      	lsls	r1, r3, #2
     384:	2000      	movs	r0, #0
     386:	4a0a      	ldr	r2, [pc, #40]	; (3b0 <_system_extint_init+0x84>)
     388:	5088      	str	r0, [r1, r2]
     38a:	3301      	adds	r3, #1
     38c:	b2db      	uxtb	r3, r3
     38e:	2b0f      	cmp	r3, #15
     390:	d9f7      	bls.n	382 <_system_extint_init+0x56>
     392:	2210      	movs	r2, #16
     394:	4b07      	ldr	r3, [pc, #28]	; (3b4 <_system_extint_init+0x88>)
     396:	601a      	str	r2, [r3, #0]
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_system_extint_init+0x8c>)
     39a:	4798      	blx	r3
     39c:	b003      	add	sp, #12
     39e:	bd00      	pop	{pc}
     3a0:	40000400 	.word	0x40000400
     3a4:	000048e9 	.word	0x000048e9
     3a8:	00004861 	.word	0x00004861
     3ac:	40001800 	.word	0x40001800
     3b0:	200003e4 	.word	0x200003e4
     3b4:	e000e100 	.word	0xe000e100
     3b8:	000002f1 	.word	0x000002f1

000003bc <extint_chan_set_config>:
     3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3be:	b083      	sub	sp, #12
     3c0:	0005      	movs	r5, r0
     3c2:	000c      	movs	r4, r1
     3c4:	a901      	add	r1, sp, #4
     3c6:	2300      	movs	r3, #0
     3c8:	704b      	strb	r3, [r1, #1]
     3ca:	70cb      	strb	r3, [r1, #3]
     3cc:	7923      	ldrb	r3, [r4, #4]
     3ce:	700b      	strb	r3, [r1, #0]
     3d0:	7a23      	ldrb	r3, [r4, #8]
     3d2:	708b      	strb	r3, [r1, #2]
     3d4:	7820      	ldrb	r0, [r4, #0]
     3d6:	4b16      	ldr	r3, [pc, #88]	; (430 <extint_chan_set_config+0x74>)
     3d8:	4798      	blx	r3
     3da:	2d1f      	cmp	r5, #31
     3dc:	d920      	bls.n	420 <extint_chan_set_config+0x64>
     3de:	2000      	movs	r0, #0
     3e0:	2207      	movs	r2, #7
     3e2:	402a      	ands	r2, r5
     3e4:	0092      	lsls	r2, r2, #2
     3e6:	7ae3      	ldrb	r3, [r4, #11]
     3e8:	001e      	movs	r6, r3
     3ea:	7aa1      	ldrb	r1, [r4, #10]
     3ec:	2900      	cmp	r1, #0
     3ee:	d002      	beq.n	3f6 <extint_chan_set_config+0x3a>
     3f0:	2608      	movs	r6, #8
     3f2:	431e      	orrs	r6, r3
     3f4:	b2f6      	uxtb	r6, r6
     3f6:	08eb      	lsrs	r3, r5, #3
     3f8:	3306      	adds	r3, #6
     3fa:	009b      	lsls	r3, r3, #2
     3fc:	5819      	ldr	r1, [r3, r0]
     3fe:	270f      	movs	r7, #15
     400:	4097      	lsls	r7, r2
     402:	43b9      	bics	r1, r7
     404:	4096      	lsls	r6, r2
     406:	0032      	movs	r2, r6
     408:	430a      	orrs	r2, r1
     40a:	501a      	str	r2, [r3, r0]
     40c:	7a63      	ldrb	r3, [r4, #9]
     40e:	2b00      	cmp	r3, #0
     410:	d108      	bne.n	424 <extint_chan_set_config+0x68>
     412:	6943      	ldr	r3, [r0, #20]
     414:	2201      	movs	r2, #1
     416:	40aa      	lsls	r2, r5
     418:	4393      	bics	r3, r2
     41a:	6143      	str	r3, [r0, #20]
     41c:	b003      	add	sp, #12
     41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     420:	4804      	ldr	r0, [pc, #16]	; (434 <extint_chan_set_config+0x78>)
     422:	e7dd      	b.n	3e0 <extint_chan_set_config+0x24>
     424:	6943      	ldr	r3, [r0, #20]
     426:	2201      	movs	r2, #1
     428:	40aa      	lsls	r2, r5
     42a:	4313      	orrs	r3, r2
     42c:	6143      	str	r3, [r0, #20]
     42e:	e7f5      	b.n	41c <extint_chan_set_config+0x60>
     430:	00004a21 	.word	0x00004a21
     434:	40001800 	.word	0x40001800

00000438 <rtc_calendar_enable>:
     438:	6802      	ldr	r2, [r0, #0]
     43a:	7a93      	ldrb	r3, [r2, #10]
     43c:	b25b      	sxtb	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	db08      	blt.n	454 <rtc_calendar_enable+0x1c>
     442:	2300      	movs	r3, #0
     444:	2b00      	cmp	r3, #0
     446:	d1f8      	bne.n	43a <rtc_calendar_enable+0x2>
     448:	8813      	ldrh	r3, [r2, #0]
     44a:	2102      	movs	r1, #2
     44c:	430b      	orrs	r3, r1
     44e:	b29b      	uxth	r3, r3
     450:	8013      	strh	r3, [r2, #0]
     452:	4770      	bx	lr
     454:	2301      	movs	r3, #1
     456:	e7f5      	b.n	444 <rtc_calendar_enable+0xc>

00000458 <rtc_calendar_disable>:
     458:	6802      	ldr	r2, [r0, #0]
     45a:	7a93      	ldrb	r3, [r2, #10]
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	db0a      	blt.n	478 <rtc_calendar_disable+0x20>
     462:	2300      	movs	r3, #0
     464:	2b00      	cmp	r3, #0
     466:	d1f8      	bne.n	45a <rtc_calendar_disable+0x2>
     468:	33c1      	adds	r3, #193	; 0xc1
     46a:	7193      	strb	r3, [r2, #6]
     46c:	7213      	strb	r3, [r2, #8]
     46e:	8813      	ldrh	r3, [r2, #0]
     470:	2102      	movs	r1, #2
     472:	438b      	bics	r3, r1
     474:	8013      	strh	r3, [r2, #0]
     476:	4770      	bx	lr
     478:	2301      	movs	r3, #1
     47a:	e7f3      	b.n	464 <rtc_calendar_disable+0xc>

0000047c <rtc_calendar_reset>:
     47c:	b570      	push	{r4, r5, r6, lr}
     47e:	0004      	movs	r4, r0
     480:	6805      	ldr	r5, [r0, #0]
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <rtc_calendar_reset+0x2c>)
     484:	4798      	blx	r3
     486:	6823      	ldr	r3, [r4, #0]
     488:	7a9b      	ldrb	r3, [r3, #10]
     48a:	b25b      	sxtb	r3, r3
     48c:	2b00      	cmp	r3, #0
     48e:	db08      	blt.n	4a2 <rtc_calendar_reset+0x26>
     490:	2300      	movs	r3, #0
     492:	2b00      	cmp	r3, #0
     494:	d1f7      	bne.n	486 <rtc_calendar_reset+0xa>
     496:	882b      	ldrh	r3, [r5, #0]
     498:	2201      	movs	r2, #1
     49a:	4313      	orrs	r3, r2
     49c:	b29b      	uxth	r3, r3
     49e:	802b      	strh	r3, [r5, #0]
     4a0:	bd70      	pop	{r4, r5, r6, pc}
     4a2:	2301      	movs	r3, #1
     4a4:	e7f5      	b.n	492 <rtc_calendar_reset+0x16>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000459 	.word	0x00000459

000004ac <rtc_calendar_time_to_register_value>:
     4ac:	88cb      	ldrh	r3, [r1, #6]
     4ae:	88c2      	ldrh	r2, [r0, #6]
     4b0:	1a9b      	subs	r3, r3, r2
     4b2:	069b      	lsls	r3, r3, #26
     4b4:	794a      	ldrb	r2, [r1, #5]
     4b6:	0592      	lsls	r2, r2, #22
     4b8:	4313      	orrs	r3, r2
     4ba:	790a      	ldrb	r2, [r1, #4]
     4bc:	0452      	lsls	r2, r2, #17
     4be:	4313      	orrs	r3, r2
     4c0:	788a      	ldrb	r2, [r1, #2]
     4c2:	0312      	lsls	r2, r2, #12
     4c4:	4313      	orrs	r3, r2
     4c6:	7902      	ldrb	r2, [r0, #4]
     4c8:	2a00      	cmp	r2, #0
     4ca:	d105      	bne.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4cc:	78ca      	ldrb	r2, [r1, #3]
     4ce:	2a00      	cmp	r2, #0
     4d0:	d002      	beq.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4d2:	2280      	movs	r2, #128	; 0x80
     4d4:	0252      	lsls	r2, r2, #9
     4d6:	4313      	orrs	r3, r2
     4d8:	7848      	ldrb	r0, [r1, #1]
     4da:	0180      	lsls	r0, r0, #6
     4dc:	4303      	orrs	r3, r0
     4de:	7808      	ldrb	r0, [r1, #0]
     4e0:	4318      	orrs	r0, r3
     4e2:	4770      	bx	lr

000004e4 <rtc_calendar_register_value_to_time>:
     4e4:	b510      	push	{r4, lr}
     4e6:	0e8c      	lsrs	r4, r1, #26
     4e8:	88c3      	ldrh	r3, [r0, #6]
     4ea:	191b      	adds	r3, r3, r4
     4ec:	80d3      	strh	r3, [r2, #6]
     4ee:	0d8c      	lsrs	r4, r1, #22
     4f0:	230f      	movs	r3, #15
     4f2:	4023      	ands	r3, r4
     4f4:	7153      	strb	r3, [r2, #5]
     4f6:	0c4c      	lsrs	r4, r1, #17
     4f8:	231f      	movs	r3, #31
     4fa:	4023      	ands	r3, r4
     4fc:	7113      	strb	r3, [r2, #4]
     4fe:	7903      	ldrb	r3, [r0, #4]
     500:	2b00      	cmp	r3, #0
     502:	d110      	bne.n	526 <rtc_calendar_register_value_to_time+0x42>
     504:	0b08      	lsrs	r0, r1, #12
     506:	230f      	movs	r3, #15
     508:	4003      	ands	r3, r0
     50a:	7093      	strb	r3, [r2, #2]
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	025b      	lsls	r3, r3, #9
     510:	400b      	ands	r3, r1
     512:	1e58      	subs	r0, r3, #1
     514:	4183      	sbcs	r3, r0
     516:	70d3      	strb	r3, [r2, #3]
     518:	0988      	lsrs	r0, r1, #6
     51a:	233f      	movs	r3, #63	; 0x3f
     51c:	4018      	ands	r0, r3
     51e:	7050      	strb	r0, [r2, #1]
     520:	4019      	ands	r1, r3
     522:	7011      	strb	r1, [r2, #0]
     524:	bd10      	pop	{r4, pc}
     526:	0b08      	lsrs	r0, r1, #12
     528:	231f      	movs	r3, #31
     52a:	4003      	ands	r3, r0
     52c:	7093      	strb	r3, [r2, #2]
     52e:	e7f3      	b.n	518 <rtc_calendar_register_value_to_time+0x34>

00000530 <rtc_calendar_set_time>:
     530:	b510      	push	{r4, lr}
     532:	6804      	ldr	r4, [r0, #0]
     534:	4b06      	ldr	r3, [pc, #24]	; (550 <rtc_calendar_set_time+0x20>)
     536:	4798      	blx	r3
     538:	7aa3      	ldrb	r3, [r4, #10]
     53a:	b25b      	sxtb	r3, r3
     53c:	2b00      	cmp	r3, #0
     53e:	db04      	blt.n	54a <rtc_calendar_set_time+0x1a>
     540:	2300      	movs	r3, #0
     542:	2b00      	cmp	r3, #0
     544:	d1f8      	bne.n	538 <rtc_calendar_set_time+0x8>
     546:	6120      	str	r0, [r4, #16]
     548:	bd10      	pop	{r4, pc}
     54a:	2301      	movs	r3, #1
     54c:	e7f9      	b.n	542 <rtc_calendar_set_time+0x12>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	000004ad 	.word	0x000004ad

00000554 <rtc_calendar_get_time>:
     554:	b570      	push	{r4, r5, r6, lr}
     556:	000a      	movs	r2, r1
     558:	6803      	ldr	r3, [r0, #0]
     55a:	7944      	ldrb	r4, [r0, #5]
     55c:	2c00      	cmp	r4, #0
     55e:	d006      	beq.n	56e <rtc_calendar_get_time+0x1a>
     560:	8859      	ldrh	r1, [r3, #2]
     562:	0449      	lsls	r1, r1, #17
     564:	d510      	bpl.n	588 <rtc_calendar_get_time+0x34>
     566:	6919      	ldr	r1, [r3, #16]
     568:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <rtc_calendar_get_time+0x54>)
     56a:	4798      	blx	r3
     56c:	bd70      	pop	{r4, r5, r6, pc}
     56e:	490f      	ldr	r1, [pc, #60]	; (5ac <rtc_calendar_get_time+0x58>)
     570:	8059      	strh	r1, [r3, #2]
     572:	6801      	ldr	r1, [r0, #0]
     574:	7a89      	ldrb	r1, [r1, #10]
     576:	b249      	sxtb	r1, r1
     578:	2900      	cmp	r1, #0
     57a:	db03      	blt.n	584 <rtc_calendar_get_time+0x30>
     57c:	0021      	movs	r1, r4
     57e:	2900      	cmp	r1, #0
     580:	d1f7      	bne.n	572 <rtc_calendar_get_time+0x1e>
     582:	e7f0      	b.n	566 <rtc_calendar_get_time+0x12>
     584:	2101      	movs	r1, #1
     586:	e7fa      	b.n	57e <rtc_calendar_get_time+0x2a>
     588:	8859      	ldrh	r1, [r3, #2]
     58a:	4d09      	ldr	r5, [pc, #36]	; (5b0 <rtc_calendar_get_time+0x5c>)
     58c:	4329      	orrs	r1, r5
     58e:	b289      	uxth	r1, r1
     590:	8059      	strh	r1, [r3, #2]
     592:	6801      	ldr	r1, [r0, #0]
     594:	7a89      	ldrb	r1, [r1, #10]
     596:	b249      	sxtb	r1, r1
     598:	2900      	cmp	r1, #0
     59a:	db03      	blt.n	5a4 <rtc_calendar_get_time+0x50>
     59c:	2100      	movs	r1, #0
     59e:	2900      	cmp	r1, #0
     5a0:	d1f7      	bne.n	592 <rtc_calendar_get_time+0x3e>
     5a2:	e7e0      	b.n	566 <rtc_calendar_get_time+0x12>
     5a4:	0021      	movs	r1, r4
     5a6:	e7fa      	b.n	59e <rtc_calendar_get_time+0x4a>
     5a8:	000004e5 	.word	0x000004e5
     5ac:	ffff8000 	.word	0xffff8000
     5b0:	ffffc000 	.word	0xffffc000

000005b4 <rtc_calendar_set_alarm>:
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	000d      	movs	r5, r1
     5b8:	0014      	movs	r4, r2
     5ba:	6806      	ldr	r6, [r0, #0]
     5bc:	2a01      	cmp	r2, #1
     5be:	d901      	bls.n	5c4 <rtc_calendar_set_alarm+0x10>
     5c0:	2017      	movs	r0, #23
     5c2:	bd70      	pop	{r4, r5, r6, pc}
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <rtc_calendar_set_alarm+0x38>)
     5c6:	4798      	blx	r3
     5c8:	7ab3      	ldrb	r3, [r6, #10]
     5ca:	b25b      	sxtb	r3, r3
     5cc:	2b00      	cmp	r3, #0
     5ce:	db0a      	blt.n	5e6 <rtc_calendar_set_alarm+0x32>
     5d0:	2300      	movs	r3, #0
     5d2:	2b00      	cmp	r3, #0
     5d4:	d1f8      	bne.n	5c8 <rtc_calendar_set_alarm+0x14>
     5d6:	3403      	adds	r4, #3
     5d8:	00e4      	lsls	r4, r4, #3
     5da:	51a0      	str	r0, [r4, r6]
     5dc:	7a2b      	ldrb	r3, [r5, #8]
     5de:	1934      	adds	r4, r6, r4
     5e0:	7123      	strb	r3, [r4, #4]
     5e2:	2000      	movs	r0, #0
     5e4:	e7ed      	b.n	5c2 <rtc_calendar_set_alarm+0xe>
     5e6:	2301      	movs	r3, #1
     5e8:	e7f3      	b.n	5d2 <rtc_calendar_set_alarm+0x1e>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	000004ad 	.word	0x000004ad

000005f0 <_rtc_calendar_set_config>:
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	0005      	movs	r5, r0
     5f4:	000e      	movs	r6, r1
     5f6:	6801      	ldr	r1, [r0, #0]
     5f8:	8832      	ldrh	r2, [r6, #0]
     5fa:	2308      	movs	r3, #8
     5fc:	4313      	orrs	r3, r2
     5fe:	b29b      	uxth	r3, r3
     600:	7930      	ldrb	r0, [r6, #4]
     602:	2800      	cmp	r0, #0
     604:	d102      	bne.n	60c <_rtc_calendar_set_config+0x1c>
     606:	2348      	movs	r3, #72	; 0x48
     608:	4313      	orrs	r3, r2
     60a:	b29b      	uxth	r3, r3
     60c:	78b2      	ldrb	r2, [r6, #2]
     60e:	2a00      	cmp	r2, #0
     610:	d002      	beq.n	618 <_rtc_calendar_set_config+0x28>
     612:	2280      	movs	r2, #128	; 0x80
     614:	4313      	orrs	r3, r2
     616:	b29b      	uxth	r3, r3
     618:	800b      	strh	r3, [r1, #0]
     61a:	78f3      	ldrb	r3, [r6, #3]
     61c:	2b00      	cmp	r3, #0
     61e:	d004      	beq.n	62a <_rtc_calendar_set_config+0x3a>
     620:	884b      	ldrh	r3, [r1, #2]
     622:	2280      	movs	r2, #128	; 0x80
     624:	01d2      	lsls	r2, r2, #7
     626:	4313      	orrs	r3, r2
     628:	804b      	strh	r3, [r1, #2]
     62a:	2400      	movs	r4, #0
     62c:	e00a      	b.n	644 <_rtc_calendar_set_config+0x54>
     62e:	00a3      	lsls	r3, r4, #2
     630:	191b      	adds	r3, r3, r4
     632:	0059      	lsls	r1, r3, #1
     634:	3108      	adds	r1, #8
     636:	1871      	adds	r1, r6, r1
     638:	0022      	movs	r2, r4
     63a:	0028      	movs	r0, r5
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <_rtc_calendar_set_config+0x5c>)
     63e:	4798      	blx	r3
     640:	3401      	adds	r4, #1
     642:	b2e4      	uxtb	r4, r4
     644:	2c00      	cmp	r4, #0
     646:	d0f2      	beq.n	62e <_rtc_calendar_set_config+0x3e>
     648:	bd70      	pop	{r4, r5, r6, pc}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	000005b5 	.word	0x000005b5

00000650 <rtc_calendar_init>:
     650:	b530      	push	{r4, r5, lr}
     652:	b083      	sub	sp, #12
     654:	0004      	movs	r4, r0
     656:	0015      	movs	r5, r2
     658:	6001      	str	r1, [r0, #0]
     65a:	4a0f      	ldr	r2, [pc, #60]	; (698 <rtc_calendar_init+0x48>)
     65c:	6993      	ldr	r3, [r2, #24]
     65e:	2120      	movs	r1, #32
     660:	430b      	orrs	r3, r1
     662:	6193      	str	r3, [r2, #24]
     664:	a901      	add	r1, sp, #4
     666:	2302      	movs	r3, #2
     668:	700b      	strb	r3, [r1, #0]
     66a:	2004      	movs	r0, #4
     66c:	4b0b      	ldr	r3, [pc, #44]	; (69c <rtc_calendar_init+0x4c>)
     66e:	4798      	blx	r3
     670:	2004      	movs	r0, #4
     672:	4b0b      	ldr	r3, [pc, #44]	; (6a0 <rtc_calendar_init+0x50>)
     674:	4798      	blx	r3
     676:	0020      	movs	r0, r4
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <rtc_calendar_init+0x54>)
     67a:	4798      	blx	r3
     67c:	792b      	ldrb	r3, [r5, #4]
     67e:	7123      	strb	r3, [r4, #4]
     680:	78eb      	ldrb	r3, [r5, #3]
     682:	7163      	strb	r3, [r4, #5]
     684:	88eb      	ldrh	r3, [r5, #6]
     686:	80e3      	strh	r3, [r4, #6]
     688:	4b07      	ldr	r3, [pc, #28]	; (6a8 <rtc_calendar_init+0x58>)
     68a:	601c      	str	r4, [r3, #0]
     68c:	0029      	movs	r1, r5
     68e:	0020      	movs	r0, r4
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <rtc_calendar_init+0x5c>)
     692:	4798      	blx	r3
     694:	b003      	add	sp, #12
     696:	bd30      	pop	{r4, r5, pc}
     698:	40000400 	.word	0x40000400
     69c:	000048e9 	.word	0x000048e9
     6a0:	00004861 	.word	0x00004861
     6a4:	0000047d 	.word	0x0000047d
     6a8:	20000424 	.word	0x20000424
     6ac:	000005f1 	.word	0x000005f1

000006b0 <rtc_calendar_frequency_correction>:
     6b0:	6802      	ldr	r2, [r0, #0]
     6b2:	17c8      	asrs	r0, r1, #31
     6b4:	180b      	adds	r3, r1, r0
     6b6:	4043      	eors	r3, r0
     6b8:	2b7f      	cmp	r3, #127	; 0x7f
     6ba:	dd01      	ble.n	6c0 <rtc_calendar_frequency_correction+0x10>
     6bc:	2017      	movs	r0, #23
     6be:	4770      	bx	lr
     6c0:	0018      	movs	r0, r3
     6c2:	2900      	cmp	r1, #0
     6c4:	db0a      	blt.n	6dc <rtc_calendar_frequency_correction+0x2c>
     6c6:	7a93      	ldrb	r3, [r2, #10]
     6c8:	b25b      	sxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	db09      	blt.n	6e2 <rtc_calendar_frequency_correction+0x32>
     6ce:	2300      	movs	r3, #0
     6d0:	2b00      	cmp	r3, #0
     6d2:	d1f8      	bne.n	6c6 <rtc_calendar_frequency_correction+0x16>
     6d4:	b2c0      	uxtb	r0, r0
     6d6:	7310      	strb	r0, [r2, #12]
     6d8:	2000      	movs	r0, #0
     6da:	e7f0      	b.n	6be <rtc_calendar_frequency_correction+0xe>
     6dc:	2080      	movs	r0, #128	; 0x80
     6de:	4318      	orrs	r0, r3
     6e0:	e7f1      	b.n	6c6 <rtc_calendar_frequency_correction+0x16>
     6e2:	2301      	movs	r3, #1
     6e4:	e7f4      	b.n	6d0 <rtc_calendar_frequency_correction+0x20>

000006e6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e8:	46de      	mov	lr, fp
     6ea:	4657      	mov	r7, sl
     6ec:	464e      	mov	r6, r9
     6ee:	4645      	mov	r5, r8
     6f0:	b5e0      	push	{r5, r6, r7, lr}
     6f2:	b085      	sub	sp, #20
     6f4:	4689      	mov	r9, r1
     6f6:	0016      	movs	r6, r2
     6f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6fa:	2200      	movs	r2, #0
     6fc:	2300      	movs	r3, #0
     6fe:	2100      	movs	r1, #0
     700:	468b      	mov	fp, r1
     702:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     704:	253f      	movs	r5, #63	; 0x3f
     706:	9600      	str	r6, [sp, #0]
     708:	9701      	str	r7, [sp, #4]
     70a:	9002      	str	r0, [sp, #8]
     70c:	4649      	mov	r1, r9
     70e:	9103      	str	r1, [sp, #12]
     710:	e011      	b.n	736 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     712:	2120      	movs	r1, #32
     714:	1b49      	subs	r1, r1, r5
     716:	2400      	movs	r4, #0
     718:	3401      	adds	r4, #1
     71a:	40cc      	lsrs	r4, r1
     71c:	e013      	b.n	746 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     71e:	9800      	ldr	r0, [sp, #0]
     720:	9901      	ldr	r1, [sp, #4]
     722:	1a12      	subs	r2, r2, r0
     724:	418b      	sbcs	r3, r1
			q |= bit_shift;
     726:	4659      	mov	r1, fp
     728:	4660      	mov	r0, ip
     72a:	4301      	orrs	r1, r0
     72c:	468b      	mov	fp, r1
     72e:	4651      	mov	r1, sl
     730:	4321      	orrs	r1, r4
     732:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     734:	3d01      	subs	r5, #1
     736:	2d00      	cmp	r5, #0
     738:	db23      	blt.n	782 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     73a:	2120      	movs	r1, #32
     73c:	4249      	negs	r1, r1
     73e:	1869      	adds	r1, r5, r1
     740:	d4e7      	bmi.n	712 <long_division+0x2c>
     742:	2401      	movs	r4, #1
     744:	408c      	lsls	r4, r1
     746:	2101      	movs	r1, #1
     748:	40a9      	lsls	r1, r5
     74a:	468c      	mov	ip, r1
		r = r << 1;
     74c:	1892      	adds	r2, r2, r2
     74e:	415b      	adcs	r3, r3
     750:	0010      	movs	r0, r2
     752:	0019      	movs	r1, r3
		if (n & bit_shift) {
     754:	9e02      	ldr	r6, [sp, #8]
     756:	4667      	mov	r7, ip
     758:	403e      	ands	r6, r7
     75a:	46b1      	mov	r9, r6
     75c:	9e03      	ldr	r6, [sp, #12]
     75e:	4026      	ands	r6, r4
     760:	46b0      	mov	r8, r6
     762:	464e      	mov	r6, r9
     764:	4647      	mov	r7, r8
     766:	433e      	orrs	r6, r7
     768:	d003      	beq.n	772 <long_division+0x8c>
			r |= 0x01;
     76a:	2601      	movs	r6, #1
     76c:	4306      	orrs	r6, r0
     76e:	0032      	movs	r2, r6
     770:	000b      	movs	r3, r1
		if (r >= d) {
     772:	9800      	ldr	r0, [sp, #0]
     774:	9901      	ldr	r1, [sp, #4]
     776:	4299      	cmp	r1, r3
     778:	d8dc      	bhi.n	734 <long_division+0x4e>
     77a:	d1d0      	bne.n	71e <long_division+0x38>
     77c:	4290      	cmp	r0, r2
     77e:	d8d9      	bhi.n	734 <long_division+0x4e>
     780:	e7cd      	b.n	71e <long_division+0x38>
		}
	}

	return q;
}
     782:	4658      	mov	r0, fp
     784:	4651      	mov	r1, sl
     786:	b005      	add	sp, #20
     788:	bc3c      	pop	{r2, r3, r4, r5}
     78a:	4690      	mov	r8, r2
     78c:	4699      	mov	r9, r3
     78e:	46a2      	mov	sl, r4
     790:	46ab      	mov	fp, r5
     792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000794 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     794:	0849      	lsrs	r1, r1, #1
     796:	4281      	cmp	r1, r0
     798:	d201      	bcs.n	79e <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     79a:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     79c:	4770      	bx	lr
     79e:	2300      	movs	r3, #0
     7a0:	e002      	b.n	7a8 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     7a2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     7a4:	3301      	adds	r3, #1
     7a6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     7a8:	4281      	cmp	r1, r0
     7aa:	d2fa      	bcs.n	7a2 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     7ac:	3b01      	subs	r3, #1
     7ae:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     7b0:	2bff      	cmp	r3, #255	; 0xff
     7b2:	d901      	bls.n	7b8 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7b4:	2040      	movs	r0, #64	; 0x40
     7b6:	e7f1      	b.n	79c <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     7b8:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     7ba:	2000      	movs	r0, #0
     7bc:	e7ee      	b.n	79c <_sercom_get_sync_baud_val+0x8>
	...

000007c0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	000c      	movs	r4, r1
     7c6:	0015      	movs	r5, r2
     7c8:	aa06      	add	r2, sp, #24
     7ca:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     7cc:	0002      	movs	r2, r0
     7ce:	434a      	muls	r2, r1
     7d0:	42a2      	cmp	r2, r4
     7d2:	d902      	bls.n	7da <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7d4:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     7d6:	b002      	add	sp, #8
     7d8:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     7da:	2b00      	cmp	r3, #0
     7dc:	d114      	bne.n	808 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     7de:	0002      	movs	r2, r0
     7e0:	0008      	movs	r0, r1
     7e2:	2100      	movs	r1, #0
     7e4:	4e1b      	ldr	r6, [pc, #108]	; (854 <_sercom_get_async_baud_val+0x94>)
     7e6:	47b0      	blx	r6
     7e8:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     7ea:	0022      	movs	r2, r4
     7ec:	2300      	movs	r3, #0
     7ee:	2000      	movs	r0, #0
     7f0:	4c19      	ldr	r4, [pc, #100]	; (858 <_sercom_get_async_baud_val+0x98>)
     7f2:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     7f4:	2200      	movs	r2, #0
     7f6:	2301      	movs	r3, #1
     7f8:	1a12      	subs	r2, r2, r0
     7fa:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7fc:	0c10      	lsrs	r0, r2, #16
     7fe:	041b      	lsls	r3, r3, #16
     800:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     802:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     804:	2000      	movs	r0, #0
     806:	e7e6      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     808:	2b01      	cmp	r3, #1
     80a:	d001      	beq.n	810 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     80c:	2000      	movs	r0, #0
     80e:	e7f8      	b.n	802 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     810:	000a      	movs	r2, r1
     812:	2300      	movs	r3, #0
     814:	2100      	movs	r1, #0
     816:	4e0f      	ldr	r6, [pc, #60]	; (854 <_sercom_get_async_baud_val+0x94>)
     818:	47b0      	blx	r6
     81a:	0002      	movs	r2, r0
     81c:	000b      	movs	r3, r1
     81e:	9200      	str	r2, [sp, #0]
     820:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     822:	0020      	movs	r0, r4
     824:	2100      	movs	r1, #0
     826:	4e0c      	ldr	r6, [pc, #48]	; (858 <_sercom_get_async_baud_val+0x98>)
     828:	47b0      	blx	r6
     82a:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     82c:	2380      	movs	r3, #128	; 0x80
     82e:	019b      	lsls	r3, r3, #6
     830:	4298      	cmp	r0, r3
     832:	d901      	bls.n	838 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     834:	2040      	movs	r0, #64	; 0x40
     836:	e7ce      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     838:	0f61      	lsrs	r1, r4, #29
     83a:	00e0      	lsls	r0, r4, #3
     83c:	9a00      	ldr	r2, [sp, #0]
     83e:	9b01      	ldr	r3, [sp, #4]
     840:	4c05      	ldr	r4, [pc, #20]	; (858 <_sercom_get_async_baud_val+0x98>)
     842:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     844:	b2c0      	uxtb	r0, r0
     846:	00f3      	lsls	r3, r6, #3
     848:	b2db      	uxtb	r3, r3
     84a:	1ac0      	subs	r0, r0, r3
     84c:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     84e:	0340      	lsls	r0, r0, #13
     850:	4330      	orrs	r0, r6
     852:	e7d6      	b.n	802 <_sercom_get_async_baud_val+0x42>
     854:	00005055 	.word	0x00005055
     858:	000006e7 	.word	0x000006e7

0000085c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     85c:	b510      	push	{r4, lr}
     85e:	b082      	sub	sp, #8
     860:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <sercom_set_gclk_generator+0x40>)
     864:	781b      	ldrb	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d007      	beq.n	87a <sercom_set_gclk_generator+0x1e>
     86a:	2900      	cmp	r1, #0
     86c:	d105      	bne.n	87a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     86e:	4b0b      	ldr	r3, [pc, #44]	; (89c <sercom_set_gclk_generator+0x40>)
     870:	785b      	ldrb	r3, [r3, #1]
     872:	4283      	cmp	r3, r0
     874:	d010      	beq.n	898 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     876:	201d      	movs	r0, #29
     878:	e00c      	b.n	894 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     87a:	a901      	add	r1, sp, #4
     87c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     87e:	2013      	movs	r0, #19
     880:	4b07      	ldr	r3, [pc, #28]	; (8a0 <sercom_set_gclk_generator+0x44>)
     882:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     884:	2013      	movs	r0, #19
     886:	4b07      	ldr	r3, [pc, #28]	; (8a4 <sercom_set_gclk_generator+0x48>)
     888:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     88a:	4b04      	ldr	r3, [pc, #16]	; (89c <sercom_set_gclk_generator+0x40>)
     88c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     88e:	2201      	movs	r2, #1
     890:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     892:	2000      	movs	r0, #0
}
     894:	b002      	add	sp, #8
     896:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     898:	2000      	movs	r0, #0
     89a:	e7fb      	b.n	894 <sercom_set_gclk_generator+0x38>
     89c:	20000090 	.word	0x20000090
     8a0:	000048e9 	.word	0x000048e9
     8a4:	00004861 	.word	0x00004861

000008a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8a8:	4b40      	ldr	r3, [pc, #256]	; (9ac <_sercom_get_default_pad+0x104>)
     8aa:	4298      	cmp	r0, r3
     8ac:	d031      	beq.n	912 <_sercom_get_default_pad+0x6a>
     8ae:	d90a      	bls.n	8c6 <_sercom_get_default_pad+0x1e>
     8b0:	4b3f      	ldr	r3, [pc, #252]	; (9b0 <_sercom_get_default_pad+0x108>)
     8b2:	4298      	cmp	r0, r3
     8b4:	d04d      	beq.n	952 <_sercom_get_default_pad+0xaa>
     8b6:	4b3f      	ldr	r3, [pc, #252]	; (9b4 <_sercom_get_default_pad+0x10c>)
     8b8:	4298      	cmp	r0, r3
     8ba:	d05a      	beq.n	972 <_sercom_get_default_pad+0xca>
     8bc:	4b3e      	ldr	r3, [pc, #248]	; (9b8 <_sercom_get_default_pad+0x110>)
     8be:	4298      	cmp	r0, r3
     8c0:	d037      	beq.n	932 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8c2:	2000      	movs	r0, #0
}
     8c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8c6:	4b3d      	ldr	r3, [pc, #244]	; (9bc <_sercom_get_default_pad+0x114>)
     8c8:	4298      	cmp	r0, r3
     8ca:	d00c      	beq.n	8e6 <_sercom_get_default_pad+0x3e>
     8cc:	4b3c      	ldr	r3, [pc, #240]	; (9c0 <_sercom_get_default_pad+0x118>)
     8ce:	4298      	cmp	r0, r3
     8d0:	d1f7      	bne.n	8c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8d2:	2901      	cmp	r1, #1
     8d4:	d05f      	beq.n	996 <_sercom_get_default_pad+0xee>
     8d6:	2900      	cmp	r1, #0
     8d8:	d015      	beq.n	906 <_sercom_get_default_pad+0x5e>
     8da:	2902      	cmp	r1, #2
     8dc:	d015      	beq.n	90a <_sercom_get_default_pad+0x62>
     8de:	2903      	cmp	r1, #3
     8e0:	d015      	beq.n	90e <_sercom_get_default_pad+0x66>
	return 0;
     8e2:	2000      	movs	r0, #0
     8e4:	e7ee      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e6:	2901      	cmp	r1, #1
     8e8:	d053      	beq.n	992 <_sercom_get_default_pad+0xea>
     8ea:	2900      	cmp	r1, #0
     8ec:	d005      	beq.n	8fa <_sercom_get_default_pad+0x52>
     8ee:	2902      	cmp	r1, #2
     8f0:	d005      	beq.n	8fe <_sercom_get_default_pad+0x56>
     8f2:	2903      	cmp	r1, #3
     8f4:	d005      	beq.n	902 <_sercom_get_default_pad+0x5a>
	return 0;
     8f6:	2000      	movs	r0, #0
     8f8:	e7e4      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fa:	4832      	ldr	r0, [pc, #200]	; (9c4 <_sercom_get_default_pad+0x11c>)
     8fc:	e7e2      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     8fe:	4832      	ldr	r0, [pc, #200]	; (9c8 <_sercom_get_default_pad+0x120>)
     900:	e7e0      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     902:	4832      	ldr	r0, [pc, #200]	; (9cc <_sercom_get_default_pad+0x124>)
     904:	e7de      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     906:	2003      	movs	r0, #3
     908:	e7dc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90a:	4831      	ldr	r0, [pc, #196]	; (9d0 <_sercom_get_default_pad+0x128>)
     90c:	e7da      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90e:	4831      	ldr	r0, [pc, #196]	; (9d4 <_sercom_get_default_pad+0x12c>)
     910:	e7d8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     912:	2901      	cmp	r1, #1
     914:	d041      	beq.n	99a <_sercom_get_default_pad+0xf2>
     916:	2900      	cmp	r1, #0
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0x7e>
     91a:	2902      	cmp	r1, #2
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0x82>
     91e:	2903      	cmp	r1, #3
     920:	d005      	beq.n	92e <_sercom_get_default_pad+0x86>
	return 0;
     922:	2000      	movs	r0, #0
     924:	e7ce      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     926:	482c      	ldr	r0, [pc, #176]	; (9d8 <_sercom_get_default_pad+0x130>)
     928:	e7cc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92a:	482c      	ldr	r0, [pc, #176]	; (9dc <_sercom_get_default_pad+0x134>)
     92c:	e7ca      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92e:	482c      	ldr	r0, [pc, #176]	; (9e0 <_sercom_get_default_pad+0x138>)
     930:	e7c8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     932:	2901      	cmp	r1, #1
     934:	d033      	beq.n	99e <_sercom_get_default_pad+0xf6>
     936:	2900      	cmp	r1, #0
     938:	d005      	beq.n	946 <_sercom_get_default_pad+0x9e>
     93a:	2902      	cmp	r1, #2
     93c:	d005      	beq.n	94a <_sercom_get_default_pad+0xa2>
     93e:	2903      	cmp	r1, #3
     940:	d005      	beq.n	94e <_sercom_get_default_pad+0xa6>
	return 0;
     942:	2000      	movs	r0, #0
     944:	e7be      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     946:	4827      	ldr	r0, [pc, #156]	; (9e4 <_sercom_get_default_pad+0x13c>)
     948:	e7bc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94a:	4827      	ldr	r0, [pc, #156]	; (9e8 <_sercom_get_default_pad+0x140>)
     94c:	e7ba      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94e:	4827      	ldr	r0, [pc, #156]	; (9ec <_sercom_get_default_pad+0x144>)
     950:	e7b8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     952:	2901      	cmp	r1, #1
     954:	d025      	beq.n	9a2 <_sercom_get_default_pad+0xfa>
     956:	2900      	cmp	r1, #0
     958:	d005      	beq.n	966 <_sercom_get_default_pad+0xbe>
     95a:	2902      	cmp	r1, #2
     95c:	d005      	beq.n	96a <_sercom_get_default_pad+0xc2>
     95e:	2903      	cmp	r1, #3
     960:	d005      	beq.n	96e <_sercom_get_default_pad+0xc6>
	return 0;
     962:	2000      	movs	r0, #0
     964:	e7ae      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     966:	4822      	ldr	r0, [pc, #136]	; (9f0 <_sercom_get_default_pad+0x148>)
     968:	e7ac      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96a:	4822      	ldr	r0, [pc, #136]	; (9f4 <_sercom_get_default_pad+0x14c>)
     96c:	e7aa      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96e:	4822      	ldr	r0, [pc, #136]	; (9f8 <_sercom_get_default_pad+0x150>)
     970:	e7a8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     972:	2901      	cmp	r1, #1
     974:	d017      	beq.n	9a6 <_sercom_get_default_pad+0xfe>
     976:	2900      	cmp	r1, #0
     978:	d005      	beq.n	986 <_sercom_get_default_pad+0xde>
     97a:	2902      	cmp	r1, #2
     97c:	d005      	beq.n	98a <_sercom_get_default_pad+0xe2>
     97e:	2903      	cmp	r1, #3
     980:	d005      	beq.n	98e <_sercom_get_default_pad+0xe6>
	return 0;
     982:	2000      	movs	r0, #0
     984:	e79e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     986:	481d      	ldr	r0, [pc, #116]	; (9fc <_sercom_get_default_pad+0x154>)
     988:	e79c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98a:	481d      	ldr	r0, [pc, #116]	; (a00 <_sercom_get_default_pad+0x158>)
     98c:	e79a      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98e:	481d      	ldr	r0, [pc, #116]	; (a04 <_sercom_get_default_pad+0x15c>)
     990:	e798      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     992:	481d      	ldr	r0, [pc, #116]	; (a08 <_sercom_get_default_pad+0x160>)
     994:	e796      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     996:	481d      	ldr	r0, [pc, #116]	; (a0c <_sercom_get_default_pad+0x164>)
     998:	e794      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99a:	481d      	ldr	r0, [pc, #116]	; (a10 <_sercom_get_default_pad+0x168>)
     99c:	e792      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99e:	481d      	ldr	r0, [pc, #116]	; (a14 <_sercom_get_default_pad+0x16c>)
     9a0:	e790      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a2:	481d      	ldr	r0, [pc, #116]	; (a18 <_sercom_get_default_pad+0x170>)
     9a4:	e78e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a6:	481d      	ldr	r0, [pc, #116]	; (a1c <_sercom_get_default_pad+0x174>)
     9a8:	e78c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	42001000 	.word	0x42001000
     9b0:	42001800 	.word	0x42001800
     9b4:	42001c00 	.word	0x42001c00
     9b8:	42001400 	.word	0x42001400
     9bc:	42000800 	.word	0x42000800
     9c0:	42000c00 	.word	0x42000c00
     9c4:	00040003 	.word	0x00040003
     9c8:	00060003 	.word	0x00060003
     9cc:	00070003 	.word	0x00070003
     9d0:	001e0003 	.word	0x001e0003
     9d4:	001f0003 	.word	0x001f0003
     9d8:	00080003 	.word	0x00080003
     9dc:	000a0003 	.word	0x000a0003
     9e0:	000b0003 	.word	0x000b0003
     9e4:	00100003 	.word	0x00100003
     9e8:	00120003 	.word	0x00120003
     9ec:	00130003 	.word	0x00130003
     9f0:	000c0003 	.word	0x000c0003
     9f4:	000e0003 	.word	0x000e0003
     9f8:	000f0003 	.word	0x000f0003
     9fc:	00160003 	.word	0x00160003
     a00:	00180003 	.word	0x00180003
     a04:	00190003 	.word	0x00190003
     a08:	00050003 	.word	0x00050003
     a0c:	00010003 	.word	0x00010003
     a10:	00090003 	.word	0x00090003
     a14:	00110003 	.word	0x00110003
     a18:	000d0003 	.word	0x000d0003
     a1c:	00170003 	.word	0x00170003

00000a20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a20:	b530      	push	{r4, r5, lr}
     a22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a24:	4c0a      	ldr	r4, [pc, #40]	; (a50 <_sercom_get_sercom_inst_index+0x30>)
     a26:	466b      	mov	r3, sp
     a28:	0022      	movs	r2, r4
     a2a:	ca32      	ldmia	r2!, {r1, r4, r5}
     a2c:	c332      	stmia	r3!, {r1, r4, r5}
     a2e:	ca32      	ldmia	r2!, {r1, r4, r5}
     a30:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a32:	2300      	movs	r3, #0
     a34:	2b05      	cmp	r3, #5
     a36:	d808      	bhi.n	a4a <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a38:	009a      	lsls	r2, r3, #2
     a3a:	4669      	mov	r1, sp
     a3c:	5852      	ldr	r2, [r2, r1]
     a3e:	4282      	cmp	r2, r0
     a40:	d001      	beq.n	a46 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a42:	3301      	adds	r3, #1
     a44:	e7f6      	b.n	a34 <_sercom_get_sercom_inst_index+0x14>
			return i;
     a46:	b2d8      	uxtb	r0, r3
     a48:	e000      	b.n	a4c <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a4a:	2000      	movs	r0, #0
}
     a4c:	b007      	add	sp, #28
     a4e:	bd30      	pop	{r4, r5, pc}
     a50:	00005974 	.word	0x00005974

00000a54 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a54:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a56:	2202      	movs	r2, #2
     a58:	761a      	strb	r2, [r3, #24]
}
     a5a:	4770      	bx	lr

00000a5c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	b087      	sub	sp, #28
     a60:	0007      	movs	r7, r0
     a62:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a64:	6806      	ldr	r6, [r0, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a66:	ab05      	add	r3, sp, #20
     a68:	2280      	movs	r2, #128	; 0x80
     a6a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a6c:	2200      	movs	r2, #0
     a6e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a70:	2101      	movs	r1, #1
     a72:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     a74:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     a76:	782b      	ldrb	r3, [r5, #0]
     a78:	2b00      	cmp	r3, #0
     a7a:	d101      	bne.n	a80 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a7c:	ab05      	add	r3, sp, #20
     a7e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     a80:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a82:	9301      	str	r3, [sp, #4]
     a84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     a86:	9302      	str	r3, [sp, #8]
     a88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     a8a:	9303      	str	r3, [sp, #12]
     a8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     a8e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a90:	2400      	movs	r4, #0
     a92:	e006      	b.n	aa2 <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a94:	0021      	movs	r1, r4
     a96:	0030      	movs	r0, r6
     a98:	4b3d      	ldr	r3, [pc, #244]	; (b90 <_spi_set_config+0x134>)
     a9a:	4798      	blx	r3
     a9c:	e008      	b.n	ab0 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     a9e:	3401      	adds	r4, #1
     aa0:	b2e4      	uxtb	r4, r4
     aa2:	2c03      	cmp	r4, #3
     aa4:	d80d      	bhi.n	ac2 <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aa6:	00a3      	lsls	r3, r4, #2
     aa8:	aa01      	add	r2, sp, #4
     aaa:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     aac:	2800      	cmp	r0, #0
     aae:	d0f1      	beq.n	a94 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     ab0:	1c43      	adds	r3, r0, #1
     ab2:	d0f4      	beq.n	a9e <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ab4:	a905      	add	r1, sp, #20
     ab6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ab8:	0c00      	lsrs	r0, r0, #16
     aba:	b2c0      	uxtb	r0, r0
     abc:	4b35      	ldr	r3, [pc, #212]	; (b94 <_spi_set_config+0x138>)
     abe:	4798      	blx	r3
     ac0:	e7ed      	b.n	a9e <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     ac2:	782b      	ldrb	r3, [r5, #0]
     ac4:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     ac6:	7c2b      	ldrb	r3, [r5, #16]
     ac8:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     aca:	7cab      	ldrb	r3, [r5, #18]
     acc:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     ace:	7d2b      	ldrb	r3, [r5, #20]
     ad0:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     ad2:	2200      	movs	r2, #0
     ad4:	466b      	mov	r3, sp
     ad6:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     ad8:	782b      	ldrb	r3, [r5, #0]
     ada:	2b01      	cmp	r3, #1
     adc:	d014      	beq.n	b08 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     ade:	782b      	ldrb	r3, [r5, #0]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d127      	bne.n	b34 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     ae4:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     ae6:	8baa      	ldrh	r2, [r5, #28]
     ae8:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     aea:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     aec:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     aee:	7fef      	ldrb	r7, [r5, #31]
     af0:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     af2:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     af4:	4320      	orrs	r0, r4
     af6:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     af8:	2020      	movs	r0, #32
     afa:	5c28      	ldrb	r0, [r5, r0]
     afc:	2800      	cmp	r0, #0
     afe:	d01b      	beq.n	b38 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     b00:	2140      	movs	r1, #64	; 0x40
     b02:	4311      	orrs	r1, r2
     b04:	b289      	uxth	r1, r1
     b06:	e017      	b.n	b38 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b08:	6838      	ldr	r0, [r7, #0]
     b0a:	4b23      	ldr	r3, [pc, #140]	; (b98 <_spi_set_config+0x13c>)
     b0c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b0e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b10:	b2c0      	uxtb	r0, r0
     b12:	4b22      	ldr	r3, [pc, #136]	; (b9c <_spi_set_config+0x140>)
     b14:	4798      	blx	r3
     b16:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     b18:	466b      	mov	r3, sp
     b1a:	1c9a      	adds	r2, r3, #2
     b1c:	69a8      	ldr	r0, [r5, #24]
     b1e:	4b20      	ldr	r3, [pc, #128]	; (ba0 <_spi_set_config+0x144>)
     b20:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     b22:	2800      	cmp	r0, #0
     b24:	d001      	beq.n	b2a <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     b26:	2017      	movs	r0, #23
     b28:	e030      	b.n	b8c <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     b2a:	466b      	mov	r3, sp
     b2c:	3302      	adds	r3, #2
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	7333      	strb	r3, [r6, #12]
     b32:	e7d4      	b.n	ade <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     b34:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     b36:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     b38:	686a      	ldr	r2, [r5, #4]
     b3a:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     b3c:	68aa      	ldr	r2, [r5, #8]
     b3e:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     b40:	68ea      	ldr	r2, [r5, #12]
     b42:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     b44:	7c2a      	ldrb	r2, [r5, #16]
     b46:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b48:	7c69      	ldrb	r1, [r5, #17]
     b4a:	2900      	cmp	r1, #0
     b4c:	d103      	bne.n	b56 <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b4e:	4915      	ldr	r1, [pc, #84]	; (ba4 <_spi_set_config+0x148>)
     b50:	7889      	ldrb	r1, [r1, #2]
     b52:	0789      	lsls	r1, r1, #30
     b54:	d501      	bpl.n	b5a <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b56:	2180      	movs	r1, #128	; 0x80
     b58:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     b5a:	7ca9      	ldrb	r1, [r5, #18]
     b5c:	2900      	cmp	r1, #0
     b5e:	d002      	beq.n	b66 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b60:	2180      	movs	r1, #128	; 0x80
     b62:	0289      	lsls	r1, r1, #10
     b64:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     b66:	7ce9      	ldrb	r1, [r5, #19]
     b68:	2900      	cmp	r1, #0
     b6a:	d002      	beq.n	b72 <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     b6c:	2180      	movs	r1, #128	; 0x80
     b6e:	0089      	lsls	r1, r1, #2
     b70:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     b72:	7d29      	ldrb	r1, [r5, #20]
     b74:	2900      	cmp	r1, #0
     b76:	d002      	beq.n	b7e <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b78:	2180      	movs	r1, #128	; 0x80
     b7a:	0189      	lsls	r1, r1, #6
     b7c:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     b7e:	6831      	ldr	r1, [r6, #0]
     b80:	430b      	orrs	r3, r1
     b82:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     b84:	6873      	ldr	r3, [r6, #4]
     b86:	431a      	orrs	r2, r3
     b88:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     b8a:	2000      	movs	r0, #0
}
     b8c:	b007      	add	sp, #28
     b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b90:	000008a9 	.word	0x000008a9
     b94:	00004a21 	.word	0x00004a21
     b98:	00000a21 	.word	0x00000a21
     b9c:	00004905 	.word	0x00004905
     ba0:	00000795 	.word	0x00000795
     ba4:	41002000 	.word	0x41002000

00000ba8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
     baa:	b085      	sub	sp, #20
     bac:	0005      	movs	r5, r0
     bae:	000c      	movs	r4, r1
     bb0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     bb2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     bb4:	680b      	ldr	r3, [r1, #0]
     bb6:	079b      	lsls	r3, r3, #30
     bb8:	d502      	bpl.n	bc0 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     bba:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     bbc:	b005      	add	sp, #20
     bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     bc0:	680b      	ldr	r3, [r1, #0]
     bc2:	07db      	lsls	r3, r3, #31
     bc4:	d501      	bpl.n	bca <spi_init+0x22>
		return STATUS_BUSY;
     bc6:	2005      	movs	r0, #5
     bc8:	e7f8      	b.n	bbc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bca:	0008      	movs	r0, r1
     bcc:	4b28      	ldr	r3, [pc, #160]	; (c70 <spi_init+0xc8>)
     bce:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     bd0:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bd2:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bd4:	2301      	movs	r3, #1
     bd6:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     bd8:	4a26      	ldr	r2, [pc, #152]	; (c74 <spi_init+0xcc>)
     bda:	6a11      	ldr	r1, [r2, #32]
     bdc:	430b      	orrs	r3, r1
     bde:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     be0:	2724      	movs	r7, #36	; 0x24
     be2:	5df3      	ldrb	r3, [r6, r7]
     be4:	a903      	add	r1, sp, #12
     be6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     be8:	b2c3      	uxtb	r3, r0
     bea:	9301      	str	r3, [sp, #4]
     bec:	0018      	movs	r0, r3
     bee:	4b22      	ldr	r3, [pc, #136]	; (c78 <spi_init+0xd0>)
     bf0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bf2:	9801      	ldr	r0, [sp, #4]
     bf4:	4b21      	ldr	r3, [pc, #132]	; (c7c <spi_init+0xd4>)
     bf6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bf8:	5df0      	ldrb	r0, [r6, r7]
     bfa:	2100      	movs	r1, #0
     bfc:	4b20      	ldr	r3, [pc, #128]	; (c80 <spi_init+0xd8>)
     bfe:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     c00:	7833      	ldrb	r3, [r6, #0]
     c02:	2b01      	cmp	r3, #1
     c04:	d008      	beq.n	c18 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     c06:	7833      	ldrb	r3, [r6, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d103      	bne.n	c14 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     c0c:	6823      	ldr	r3, [r4, #0]
     c0e:	2208      	movs	r2, #8
     c10:	4313      	orrs	r3, r2
     c12:	6023      	str	r3, [r4, #0]
{
     c14:	2300      	movs	r3, #0
     c16:	e00b      	b.n	c30 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     c18:	6823      	ldr	r3, [r4, #0]
     c1a:	220c      	movs	r2, #12
     c1c:	4313      	orrs	r3, r2
     c1e:	6023      	str	r3, [r4, #0]
     c20:	e7f1      	b.n	c06 <spi_init+0x5e>
		module->callback[i]        = NULL;
     c22:	1c9a      	adds	r2, r3, #2
     c24:	0092      	lsls	r2, r2, #2
     c26:	18aa      	adds	r2, r5, r2
     c28:	2100      	movs	r1, #0
     c2a:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     c2c:	3301      	adds	r3, #1
     c2e:	b2db      	uxtb	r3, r3
     c30:	2b06      	cmp	r3, #6
     c32:	d9f6      	bls.n	c22 <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     c34:	2200      	movs	r2, #0
     c36:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     c38:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     c3a:	2300      	movs	r3, #0
     c3c:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     c3e:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     c40:	3236      	adds	r2, #54	; 0x36
     c42:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     c44:	3201      	adds	r2, #1
     c46:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     c48:	3201      	adds	r2, #1
     c4a:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     c4c:	3a35      	subs	r2, #53	; 0x35
     c4e:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     c50:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     c52:	6828      	ldr	r0, [r5, #0]
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <spi_init+0xc8>)
     c56:	4798      	blx	r3
     c58:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     c5a:	490a      	ldr	r1, [pc, #40]	; (c84 <spi_init+0xdc>)
     c5c:	4b0a      	ldr	r3, [pc, #40]	; (c88 <spi_init+0xe0>)
     c5e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c60:	00a4      	lsls	r4, r4, #2
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <spi_init+0xe4>)
     c64:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     c66:	0031      	movs	r1, r6
     c68:	0028      	movs	r0, r5
     c6a:	4b09      	ldr	r3, [pc, #36]	; (c90 <spi_init+0xe8>)
     c6c:	4798      	blx	r3
     c6e:	e7a5      	b.n	bbc <spi_init+0x14>
     c70:	00000a21 	.word	0x00000a21
     c74:	40000400 	.word	0x40000400
     c78:	000048e9 	.word	0x000048e9
     c7c:	00004861 	.word	0x00004861
     c80:	0000085d 	.word	0x0000085d
     c84:	00001369 	.word	0x00001369
     c88:	0000422d 	.word	0x0000422d
     c8c:	200009f0 	.word	0x200009f0
     c90:	00000a5d 	.word	0x00000a5d

00000c94 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c96:	0004      	movs	r4, r0
     c98:	000e      	movs	r6, r1
     c9a:	0017      	movs	r7, r2
     c9c:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     c9e:	2338      	movs	r3, #56	; 0x38
     ca0:	5cc3      	ldrb	r3, [r0, r3]
     ca2:	2b05      	cmp	r3, #5
     ca4:	d06d      	beq.n	d82 <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     ca6:	2a00      	cmp	r2, #0
     ca8:	d101      	bne.n	cae <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     caa:	2217      	movs	r2, #23
     cac:	e06a      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     cae:	79c3      	ldrb	r3, [r0, #7]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d101      	bne.n	cb8 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     cb4:	221c      	movs	r2, #28
     cb6:	e065      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     cb8:	7943      	ldrb	r3, [r0, #5]
     cba:	2b00      	cmp	r3, #0
     cbc:	d103      	bne.n	cc6 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cbe:	6803      	ldr	r3, [r0, #0]
     cc0:	7e1b      	ldrb	r3, [r3, #24]
     cc2:	079b      	lsls	r3, r3, #30
     cc4:	d401      	bmi.n	cca <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     cc6:	2000      	movs	r0, #0
     cc8:	e037      	b.n	d3a <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     cca:	4b2f      	ldr	r3, [pc, #188]	; (d88 <spi_read_buffer_wait+0xf4>)
     ccc:	4798      	blx	r3
     cce:	e7fa      	b.n	cc6 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cd0:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     cd2:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     cd4:	07d2      	lsls	r2, r2, #31
     cd6:	d5fb      	bpl.n	cd0 <spi_read_buffer_wait+0x3c>
     cd8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     cda:	07d2      	lsls	r2, r2, #31
     cdc:	d534      	bpl.n	d48 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     cde:	05ea      	lsls	r2, r5, #23
     ce0:	0dd2      	lsrs	r2, r2, #23
     ce2:	629a      	str	r2, [r3, #40]	; 0x28
     ce4:	e030      	b.n	d48 <spi_read_buffer_wait+0xb4>
     ce6:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ce8:	4a28      	ldr	r2, [pc, #160]	; (d8c <spi_read_buffer_wait+0xf8>)
     cea:	4293      	cmp	r3, r2
     cec:	d805      	bhi.n	cfa <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cee:	6822      	ldr	r2, [r4, #0]
     cf0:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     cf2:	0752      	lsls	r2, r2, #29
     cf4:	d401      	bmi.n	cfa <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     cf6:	3301      	adds	r3, #1
     cf8:	e7f6      	b.n	ce8 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     cfa:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cfc:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     cfe:	0792      	lsls	r2, r2, #30
     d00:	d404      	bmi.n	d0c <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d02:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     d04:	075b      	lsls	r3, r3, #29
     d06:	d422      	bmi.n	d4e <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     d08:	2212      	movs	r2, #18
     d0a:	e03b      	b.n	d84 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     d0c:	0020      	movs	r0, r4
     d0e:	4b1e      	ldr	r3, [pc, #120]	; (d88 <spi_read_buffer_wait+0xf4>)
     d10:	4798      	blx	r3
				return STATUS_ABORTED;
     d12:	2204      	movs	r2, #4
     d14:	e036      	b.n	d84 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     d16:	2200      	movs	r2, #0
     d18:	e026      	b.n	d68 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d1a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d1c:	05ff      	lsls	r7, r7, #23
     d1e:	0dff      	lsrs	r7, r7, #23
     d20:	e001      	b.n	d26 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     d22:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     d24:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     d26:	2a00      	cmp	r2, #0
     d28:	d12c      	bne.n	d84 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     d2a:	1c43      	adds	r3, r0, #1
     d2c:	b29b      	uxth	r3, r3
     d2e:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d30:	79a2      	ldrb	r2, [r4, #6]
     d32:	2a01      	cmp	r2, #1
     d34:	d01e      	beq.n	d74 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     d36:	0018      	movs	r0, r3
     d38:	000f      	movs	r7, r1
	while (length--) {
     d3a:	1e79      	subs	r1, r7, #1
     d3c:	b289      	uxth	r1, r1
     d3e:	2f00      	cmp	r7, #0
     d40:	d01d      	beq.n	d7e <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     d42:	7963      	ldrb	r3, [r4, #5]
     d44:	2b01      	cmp	r3, #1
     d46:	d0c3      	beq.n	cd0 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     d48:	7963      	ldrb	r3, [r4, #5]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d0cb      	beq.n	ce6 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d4e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d50:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     d52:	0752      	lsls	r2, r2, #29
     d54:	d5fb      	bpl.n	d4e <spi_read_buffer_wait+0xba>
     d56:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     d58:	0752      	lsls	r2, r2, #29
     d5a:	d5e2      	bpl.n	d22 <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d5c:	8b5a      	ldrh	r2, [r3, #26]
     d5e:	0752      	lsls	r2, r2, #29
     d60:	d5d9      	bpl.n	d16 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d62:	2204      	movs	r2, #4
     d64:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     d66:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d68:	79a7      	ldrb	r7, [r4, #6]
     d6a:	2f01      	cmp	r7, #1
     d6c:	d0d5      	beq.n	d1a <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d70:	b2ff      	uxtb	r7, r7
     d72:	e7d8      	b.n	d26 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     d74:	3002      	adds	r0, #2
     d76:	0a3f      	lsrs	r7, r7, #8
     d78:	54f7      	strb	r7, [r6, r3]
     d7a:	b283      	uxth	r3, r0
     d7c:	e7db      	b.n	d36 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     d7e:	2200      	movs	r2, #0
     d80:	e000      	b.n	d84 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     d82:	2205      	movs	r2, #5
}
     d84:	0010      	movs	r0, r2
     d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d88:	00000a55 	.word	0x00000a55
     d8c:	00002710 	.word	0x00002710

00000d90 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     d90:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d92:	7943      	ldrb	r3, [r0, #5]
     d94:	2b01      	cmp	r3, #1
     d96:	d001      	beq.n	d9c <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     d98:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     d9a:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     d9c:	7a03      	ldrb	r3, [r0, #8]
     d9e:	2b00      	cmp	r3, #0
     da0:	d16c      	bne.n	e7c <spi_select_slave+0xec>
		if (select) {
     da2:	2a00      	cmp	r2, #0
     da4:	d058      	beq.n	e58 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     da6:	784b      	ldrb	r3, [r1, #1]
     da8:	2b00      	cmp	r3, #0
     daa:	d043      	beq.n	e34 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dac:	6803      	ldr	r3, [r0, #0]
     dae:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     db0:	07db      	lsls	r3, r3, #31
     db2:	d411      	bmi.n	dd8 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     db4:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     db6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     db8:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     dba:	2900      	cmp	r1, #0
     dbc:	d10a      	bne.n	dd4 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     dbe:	01db      	lsls	r3, r3, #7
     dc0:	4931      	ldr	r1, [pc, #196]	; (e88 <spi_select_slave+0xf8>)
     dc2:	468c      	mov	ip, r1
     dc4:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dc6:	211f      	movs	r1, #31
     dc8:	4011      	ands	r1, r2
     dca:	2201      	movs	r2, #1
     dcc:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     dce:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     dd0:	2005      	movs	r0, #5
     dd2:	e7e2      	b.n	d9a <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
     dd4:	2300      	movs	r3, #0
     dd6:	e7f6      	b.n	dc6 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     dd8:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     dda:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     ddc:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     dde:	2c00      	cmp	r4, #0
     de0:	d104      	bne.n	dec <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     de2:	01db      	lsls	r3, r3, #7
     de4:	4c28      	ldr	r4, [pc, #160]	; (e88 <spi_select_slave+0xf8>)
     de6:	46a4      	mov	ip, r4
     de8:	4463      	add	r3, ip
     dea:	e000      	b.n	dee <spi_select_slave+0x5e>
		return NULL;
     dec:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dee:	241f      	movs	r4, #31
     df0:	4014      	ands	r4, r2
     df2:	2201      	movs	r2, #1
     df4:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     df6:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     df8:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     dfa:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dfc:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     dfe:	07c9      	lsls	r1, r1, #31
     e00:	d500      	bpl.n	e04 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e02:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     e04:	79c3      	ldrb	r3, [r0, #7]
     e06:	2b00      	cmp	r3, #0
     e08:	d13a      	bne.n	e80 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e0a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e0c:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     e0e:	0752      	lsls	r2, r2, #29
     e10:	d5fb      	bpl.n	e0a <spi_select_slave+0x7a>
     e12:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     e14:	0752      	lsls	r2, r2, #29
     e16:	d535      	bpl.n	e84 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e18:	8b5a      	ldrh	r2, [r3, #26]
     e1a:	0752      	lsls	r2, r2, #29
     e1c:	d501      	bpl.n	e22 <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     e1e:	2204      	movs	r2, #4
     e20:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e22:	7982      	ldrb	r2, [r0, #6]
     e24:	2a01      	cmp	r2, #1
     e26:	d002      	beq.n	e2e <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     e2a:	2000      	movs	r0, #0
     e2c:	e7b5      	b.n	d9a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e30:	2000      	movs	r0, #0
     e32:	e7b2      	b.n	d9a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     e34:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e36:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e38:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e3a:	2900      	cmp	r1, #0
     e3c:	d10a      	bne.n	e54 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     e3e:	01db      	lsls	r3, r3, #7
     e40:	4911      	ldr	r1, [pc, #68]	; (e88 <spi_select_slave+0xf8>)
     e42:	468c      	mov	ip, r1
     e44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e46:	211f      	movs	r1, #31
     e48:	4011      	ands	r1, r2
     e4a:	2201      	movs	r2, #1
     e4c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     e4e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     e50:	2000      	movs	r0, #0
     e52:	e7a2      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e54:	2300      	movs	r3, #0
     e56:	e7f6      	b.n	e46 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     e58:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e5a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e5c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e5e:	2900      	cmp	r1, #0
     e60:	d10a      	bne.n	e78 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     e62:	01db      	lsls	r3, r3, #7
     e64:	4908      	ldr	r1, [pc, #32]	; (e88 <spi_select_slave+0xf8>)
     e66:	468c      	mov	ip, r1
     e68:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e6a:	211f      	movs	r1, #31
     e6c:	4011      	ands	r1, r2
     e6e:	2201      	movs	r2, #1
     e70:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     e72:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     e74:	2000      	movs	r0, #0
     e76:	e790      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e78:	2300      	movs	r3, #0
     e7a:	e7f6      	b.n	e6a <spi_select_slave+0xda>
     e7c:	2000      	movs	r0, #0
     e7e:	e78c      	b.n	d9a <spi_select_slave+0xa>
     e80:	2000      	movs	r0, #0
     e82:	e78a      	b.n	d9a <spi_select_slave+0xa>
     e84:	2000      	movs	r0, #0
     e86:	e788      	b.n	d9a <spi_select_slave+0xa>
     e88:	41004400 	.word	0x41004400

00000e8c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8e:	46d6      	mov	lr, sl
     e90:	464f      	mov	r7, r9
     e92:	4646      	mov	r6, r8
     e94:	b5c0      	push	{r6, r7, lr}
     e96:	b082      	sub	sp, #8
     e98:	0004      	movs	r4, r0
     e9a:	468a      	mov	sl, r1
     e9c:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e9e:	2338      	movs	r3, #56	; 0x38
     ea0:	5cc3      	ldrb	r3, [r0, r3]
     ea2:	2b05      	cmp	r3, #5
     ea4:	d100      	bne.n	ea8 <spi_write_buffer_wait+0x1c>
     ea6:	e0d8      	b.n	105a <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     ea8:	2a00      	cmp	r2, #0
     eaa:	d101      	bne.n	eb0 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     eac:	2017      	movs	r0, #23
     eae:	e0d5      	b.n	105c <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     eb0:	7943      	ldrb	r3, [r0, #5]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d103      	bne.n	ebe <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     eb6:	6803      	ldr	r3, [r0, #0]
     eb8:	7e1b      	ldrb	r3, [r3, #24]
     eba:	079b      	lsls	r3, r3, #30
     ebc:	d402      	bmi.n	ec4 <spi_write_buffer_wait+0x38>
     ebe:	46bc      	mov	ip, r7
     ec0:	2600      	movs	r6, #0
     ec2:	e025      	b.n	f10 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     ec4:	4b6a      	ldr	r3, [pc, #424]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ec6:	4798      	blx	r3
     ec8:	e7f9      	b.n	ebe <spi_write_buffer_wait+0x32>
     eca:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ecc:	4a69      	ldr	r2, [pc, #420]	; (1074 <spi_write_buffer_wait+0x1e8>)
     ece:	4293      	cmp	r3, r2
     ed0:	d805      	bhi.n	ede <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ed2:	6822      	ldr	r2, [r4, #0]
     ed4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     ed6:	07d2      	lsls	r2, r2, #31
     ed8:	d401      	bmi.n	ede <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     eda:	3301      	adds	r3, #1
     edc:	e7f6      	b.n	ecc <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ede:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ee0:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     ee2:	0792      	lsls	r2, r2, #30
     ee4:	d404      	bmi.n	ef0 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ee6:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     ee8:	07db      	lsls	r3, r3, #31
     eea:	d418      	bmi.n	f1e <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     eec:	2012      	movs	r0, #18
     eee:	e0b5      	b.n	105c <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     ef0:	0020      	movs	r0, r4
     ef2:	4b5f      	ldr	r3, [pc, #380]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ef4:	4798      	blx	r3
				return STATUS_ABORTED;
     ef6:	2004      	movs	r0, #4
     ef8:	e0b0      	b.n	105c <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     efa:	3602      	adds	r6, #2
     efc:	b2b6      	uxth	r6, r6
     efe:	4652      	mov	r2, sl
     f00:	5dd2      	ldrb	r2, [r2, r7]
     f02:	0212      	lsls	r2, r2, #8
     f04:	4302      	orrs	r2, r0
     f06:	e017      	b.n	f38 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     f08:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     f0a:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     f0c:	2b00      	cmp	r3, #0
     f0e:	d11a      	bne.n	f46 <spi_write_buffer_wait+0xba>
	while (length--) {
     f10:	1e79      	subs	r1, r7, #1
     f12:	b289      	uxth	r1, r1
     f14:	2f00      	cmp	r7, #0
     f16:	d06c      	beq.n	ff2 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     f18:	7963      	ldrb	r3, [r4, #5]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d0d5      	beq.n	eca <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f1e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f20:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     f22:	07d2      	lsls	r2, r2, #31
     f24:	d5fb      	bpl.n	f1e <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     f26:	1c77      	adds	r7, r6, #1
     f28:	b2bf      	uxth	r7, r7
     f2a:	4652      	mov	r2, sl
     f2c:	5d90      	ldrb	r0, [r2, r6]
     f2e:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f30:	79a5      	ldrb	r5, [r4, #6]
     f32:	2d01      	cmp	r5, #1
     f34:	d0e1      	beq.n	efa <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     f36:	003e      	movs	r6, r7
     f38:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     f3a:	07f8      	lsls	r0, r7, #31
     f3c:	d5e4      	bpl.n	f08 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f3e:	05d2      	lsls	r2, r2, #23
     f40:	0dd2      	lsrs	r2, r2, #23
     f42:	629a      	str	r2, [r3, #40]	; 0x28
     f44:	e7e0      	b.n	f08 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     f46:	7963      	ldrb	r3, [r4, #5]
     f48:	2b00      	cmp	r3, #0
     f4a:	d040      	beq.n	fce <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f4c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f4e:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     f50:	0752      	lsls	r2, r2, #29
     f52:	d5fb      	bpl.n	f4c <spi_write_buffer_wait+0xc0>
     f54:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f56:	0752      	lsls	r2, r2, #29
     f58:	d508      	bpl.n	f6c <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f5a:	8b5a      	ldrh	r2, [r3, #26]
     f5c:	0752      	lsls	r2, r2, #29
     f5e:	d501      	bpl.n	f64 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f60:	2204      	movs	r2, #4
     f62:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f64:	79a2      	ldrb	r2, [r4, #6]
     f66:	2a01      	cmp	r2, #1
     f68:	d041      	beq.n	fee <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     f6c:	4660      	mov	r0, ip
     f6e:	3801      	subs	r0, #1
     f70:	b283      	uxth	r3, r0
     f72:	469c      	mov	ip, r3
     f74:	000f      	movs	r7, r1
     f76:	e7cb      	b.n	f10 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
     f78:	3602      	adds	r6, #2
     f7a:	4655      	mov	r5, sl
     f7c:	5c2f      	ldrb	r7, [r5, r0]
     f7e:	023f      	lsls	r7, r7, #8
     f80:	4640      	mov	r0, r8
     f82:	4307      	orrs	r7, r0
     f84:	b2b0      	uxth	r0, r6
     f86:	e01b      	b.n	fc0 <spi_write_buffer_wait+0x134>
						length--;
     f88:	3901      	subs	r1, #1
     f8a:	b289      	uxth	r1, r1
     f8c:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f8e:	6822      	ldr	r2, [r4, #0]
     f90:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     f92:	0752      	lsls	r2, r2, #29
     f94:	d41d      	bmi.n	fd2 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f96:	3301      	adds	r3, #1
     f98:	4a36      	ldr	r2, [pc, #216]	; (1074 <spi_write_buffer_wait+0x1e8>)
     f9a:	4293      	cmp	r3, r2
     f9c:	d819      	bhi.n	fd2 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
     f9e:	2900      	cmp	r1, #0
     fa0:	d0f5      	beq.n	f8e <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fa2:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fa4:	7e17      	ldrb	r7, [r2, #24]
     fa6:	07f8      	lsls	r0, r7, #31
     fa8:	d5f1      	bpl.n	f8e <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
     faa:	1c70      	adds	r0, r6, #1
     fac:	b280      	uxth	r0, r0
     fae:	4655      	mov	r5, sl
     fb0:	5dad      	ldrb	r5, [r5, r6]
     fb2:	46a8      	mov	r8, r5
     fb4:	466f      	mov	r7, sp
     fb6:	80fd      	strh	r5, [r7, #6]
     fb8:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fba:	79a5      	ldrb	r5, [r4, #6]
     fbc:	2d01      	cmp	r5, #1
     fbe:	d0db      	beq.n	f78 <spi_write_buffer_wait+0xec>
     fc0:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     fc2:	07f5      	lsls	r5, r6, #31
     fc4:	d5e0      	bpl.n	f88 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fc6:	05ff      	lsls	r7, r7, #23
     fc8:	0dff      	lsrs	r7, r7, #23
     fca:	6297      	str	r7, [r2, #40]	; 0x28
     fcc:	e7dc      	b.n	f88 <spi_write_buffer_wait+0xfc>
     fce:	2300      	movs	r3, #0
     fd0:	e7e2      	b.n	f98 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fd2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     fd4:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
     fd6:	0792      	lsls	r2, r2, #30
     fd8:	d404      	bmi.n	fe4 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fda:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     fdc:	075b      	lsls	r3, r3, #29
     fde:	d4b5      	bmi.n	f4c <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
     fe0:	2012      	movs	r0, #18
     fe2:	e03b      	b.n	105c <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
     fe4:	0020      	movs	r0, r4
     fe6:	4b22      	ldr	r3, [pc, #136]	; (1070 <spi_write_buffer_wait+0x1e4>)
     fe8:	4798      	blx	r3
					return STATUS_ABORTED;
     fea:	2004      	movs	r0, #4
     fec:	e036      	b.n	105c <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ff0:	e7bc      	b.n	f6c <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     ff2:	7962      	ldrb	r2, [r4, #5]
     ff4:	2a01      	cmp	r2, #1
     ff6:	d006      	beq.n	1006 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     ff8:	2a00      	cmp	r2, #0
     ffa:	d135      	bne.n	1068 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
     ffc:	79e3      	ldrb	r3, [r4, #7]
     ffe:	2b00      	cmp	r3, #0
    1000:	d11a      	bne.n	1038 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1002:	2000      	movs	r0, #0
    1004:	e02a      	b.n	105c <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1006:	6823      	ldr	r3, [r4, #0]
    1008:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    100a:	079b      	lsls	r3, r3, #30
    100c:	d5fb      	bpl.n	1006 <spi_write_buffer_wait+0x17a>
    100e:	e7f3      	b.n	ff8 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1010:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1012:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1014:	0752      	lsls	r2, r2, #29
    1016:	d529      	bpl.n	106c <spi_write_buffer_wait+0x1e0>
    1018:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    101a:	0752      	lsls	r2, r2, #29
    101c:	d508      	bpl.n	1030 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    101e:	8b5a      	ldrh	r2, [r3, #26]
    1020:	0752      	lsls	r2, r2, #29
    1022:	d501      	bpl.n	1028 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1024:	2204      	movs	r2, #4
    1026:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1028:	79a2      	ldrb	r2, [r4, #6]
    102a:	2a01      	cmp	r2, #1
    102c:	d011      	beq.n	1052 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    1030:	4660      	mov	r0, ip
    1032:	3801      	subs	r0, #1
    1034:	b283      	uxth	r3, r0
    1036:	469c      	mov	ip, r3
			while (flush_length) {
    1038:	4663      	mov	r3, ip
    103a:	2b00      	cmp	r3, #0
    103c:	d00b      	beq.n	1056 <spi_write_buffer_wait+0x1ca>
    103e:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1040:	4a0c      	ldr	r2, [pc, #48]	; (1074 <spi_write_buffer_wait+0x1e8>)
    1042:	4293      	cmp	r3, r2
    1044:	d8e4      	bhi.n	1010 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1046:	6822      	ldr	r2, [r4, #0]
    1048:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    104a:	0752      	lsls	r2, r2, #29
    104c:	d4e0      	bmi.n	1010 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    104e:	3301      	adds	r3, #1
    1050:	e7f6      	b.n	1040 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1054:	e7ec      	b.n	1030 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1056:	2000      	movs	r0, #0
    1058:	e000      	b.n	105c <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    105a:	2005      	movs	r0, #5
}
    105c:	b002      	add	sp, #8
    105e:	bc1c      	pop	{r2, r3, r4}
    1060:	4690      	mov	r8, r2
    1062:	4699      	mov	r9, r3
    1064:	46a2      	mov	sl, r4
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1068:	2000      	movs	r0, #0
    106a:	e7f7      	b.n	105c <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    106c:	2012      	movs	r0, #18
    106e:	e7f5      	b.n	105c <spi_write_buffer_wait+0x1d0>
    1070:	00000a55 	.word	0x00000a55
    1074:	00002710 	.word	0x00002710

00001078 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1078:	b5f0      	push	{r4, r5, r6, r7, lr}
    107a:	46de      	mov	lr, fp
    107c:	4657      	mov	r7, sl
    107e:	464e      	mov	r6, r9
    1080:	4645      	mov	r5, r8
    1082:	b5e0      	push	{r5, r6, r7, lr}
    1084:	b085      	sub	sp, #20
    1086:	0004      	movs	r4, r0
    1088:	9101      	str	r1, [sp, #4]
    108a:	9203      	str	r2, [sp, #12]
    108c:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    108e:	2338      	movs	r3, #56	; 0x38
    1090:	5cc3      	ldrb	r3, [r0, r3]
    1092:	2b05      	cmp	r3, #5
    1094:	d100      	bne.n	1098 <spi_transceive_buffer_wait+0x20>
    1096:	e112      	b.n	12be <spi_transceive_buffer_wait+0x246>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1098:	2e00      	cmp	r6, #0
    109a:	d101      	bne.n	10a0 <spi_transceive_buffer_wait+0x28>
		return STATUS_ERR_INVALID_ARG;
    109c:	2217      	movs	r2, #23
    109e:	e10f      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
	}

	if (!(module->receiver_enabled)) {
    10a0:	79c3      	ldrb	r3, [r0, #7]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d101      	bne.n	10aa <spi_transceive_buffer_wait+0x32>
		return STATUS_ERR_DENIED;
    10a6:	221c      	movs	r2, #28
    10a8:	e10a      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    10aa:	7943      	ldrb	r3, [r0, #5]
    10ac:	2b00      	cmp	r3, #0
    10ae:	d103      	bne.n	10b8 <spi_transceive_buffer_wait+0x40>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    10b0:	6803      	ldr	r3, [r0, #0]
    10b2:	7e1b      	ldrb	r3, [r3, #24]
    10b4:	079b      	lsls	r3, r3, #30
    10b6:	d404      	bmi.n	10c2 <spi_transceive_buffer_wait+0x4a>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    10b8:	46b4      	mov	ip, r6
    10ba:	2300      	movs	r3, #0
    10bc:	4698      	mov	r8, r3
    10be:	2100      	movs	r1, #0
    10c0:	e075      	b.n	11ae <spi_transceive_buffer_wait+0x136>
		_spi_clear_tx_complete_flag(module);
    10c2:	4b84      	ldr	r3, [pc, #528]	; (12d4 <spi_transceive_buffer_wait+0x25c>)
    10c4:	4798      	blx	r3
    10c6:	e7f7      	b.n	10b8 <spi_transceive_buffer_wait+0x40>
    10c8:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10ca:	4a83      	ldr	r2, [pc, #524]	; (12d8 <spi_transceive_buffer_wait+0x260>)
    10cc:	4293      	cmp	r3, r2
    10ce:	d805      	bhi.n	10dc <spi_transceive_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10d0:	6822      	ldr	r2, [r4, #0]
    10d2:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    10d4:	07d2      	lsls	r2, r2, #31
    10d6:	d401      	bmi.n	10dc <spi_transceive_buffer_wait+0x64>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10d8:	3301      	adds	r3, #1
    10da:	e7f6      	b.n	10ca <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10dc:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    10de:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    10e0:	0792      	lsls	r2, r2, #30
    10e2:	d404      	bmi.n	10ee <spi_transceive_buffer_wait+0x76>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10e4:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    10e6:	07db      	lsls	r3, r3, #31
    10e8:	d468      	bmi.n	11bc <spi_transceive_buffer_wait+0x144>
				return STATUS_ERR_TIMEOUT;
    10ea:	2212      	movs	r2, #18
    10ec:	e0e8      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    10ee:	0020      	movs	r0, r4
    10f0:	4b78      	ldr	r3, [pc, #480]	; (12d4 <spi_transceive_buffer_wait+0x25c>)
    10f2:	4798      	blx	r3
				return STATUS_ABORTED;
    10f4:	2204      	movs	r2, #4
    10f6:	e0e3      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
			data_to_send |= (tx_data[tx_pos++] << 8);
    10f8:	3102      	adds	r1, #2
    10fa:	9a01      	ldr	r2, [sp, #4]
    10fc:	5d92      	ldrb	r2, [r2, r6]
    10fe:	0212      	lsls	r2, r2, #8
    1100:	4650      	mov	r0, sl
    1102:	4302      	orrs	r2, r0
    1104:	b28e      	uxth	r6, r1
    1106:	e068      	b.n	11da <spi_transceive_buffer_wait+0x162>
						data_to_send |= (tx_data[tx_pos++] << 8);
    1108:	3602      	adds	r6, #2
    110a:	9901      	ldr	r1, [sp, #4]
    110c:	5c09      	ldrb	r1, [r1, r0]
    110e:	0209      	lsls	r1, r1, #8
    1110:	4650      	mov	r0, sl
    1112:	4301      	orrs	r1, r0
    1114:	4689      	mov	r9, r1
    1116:	b2b0      	uxth	r0, r6
    1118:	e01a      	b.n	1150 <spi_transceive_buffer_wait+0xd8>
					length--;
    111a:	3f01      	subs	r7, #1
    111c:	b2bf      	uxth	r7, r7
    111e:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1120:	6822      	ldr	r2, [r4, #0]
    1122:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1124:	0752      	lsls	r2, r2, #29
    1126:	d41d      	bmi.n	1164 <spi_transceive_buffer_wait+0xec>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1128:	3301      	adds	r3, #1
    112a:	4a6b      	ldr	r2, [pc, #428]	; (12d8 <spi_transceive_buffer_wait+0x260>)
    112c:	4293      	cmp	r3, r2
    112e:	d819      	bhi.n	1164 <spi_transceive_buffer_wait+0xec>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1130:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1132:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1134:	07c9      	lsls	r1, r1, #31
    1136:	d5f3      	bpl.n	1120 <spi_transceive_buffer_wait+0xa8>
					data_to_send = tx_data[tx_pos++];
    1138:	1c70      	adds	r0, r6, #1
    113a:	b280      	uxth	r0, r0
    113c:	9901      	ldr	r1, [sp, #4]
    113e:	5d89      	ldrb	r1, [r1, r6]
    1140:	468a      	mov	sl, r1
    1142:	ad02      	add	r5, sp, #8
    1144:	8069      	strh	r1, [r5, #2]
    1146:	8869      	ldrh	r1, [r5, #2]
    1148:	4689      	mov	r9, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    114a:	79a1      	ldrb	r1, [r4, #6]
    114c:	2901      	cmp	r1, #1
    114e:	d0db      	beq.n	1108 <spi_transceive_buffer_wait+0x90>
    1150:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1152:	07f1      	lsls	r1, r6, #31
    1154:	d5e1      	bpl.n	111a <spi_transceive_buffer_wait+0xa2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1156:	4649      	mov	r1, r9
    1158:	05c9      	lsls	r1, r1, #23
    115a:	0dc9      	lsrs	r1, r1, #23
    115c:	6291      	str	r1, [r2, #40]	; 0x28
    115e:	e7dc      	b.n	111a <spi_transceive_buffer_wait+0xa2>
    1160:	2300      	movs	r3, #0
    1162:	e7e2      	b.n	112a <spi_transceive_buffer_wait+0xb2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1164:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1166:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1168:	0792      	lsls	r2, r2, #30
    116a:	d404      	bmi.n	1176 <spi_transceive_buffer_wait+0xfe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    116c:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    116e:	075b      	lsls	r3, r3, #29
    1170:	d43c      	bmi.n	11ec <spi_transceive_buffer_wait+0x174>
				return STATUS_ERR_TIMEOUT;
    1172:	2212      	movs	r2, #18
    1174:	e0a4      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    1176:	0020      	movs	r0, r4
    1178:	4b56      	ldr	r3, [pc, #344]	; (12d4 <spi_transceive_buffer_wait+0x25c>)
    117a:	4798      	blx	r3
				return STATUS_ABORTED;
    117c:	2204      	movs	r2, #4
    117e:	e09f      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
	enum status_code retval = STATUS_OK;
    1180:	2200      	movs	r2, #0
    1182:	e044      	b.n	120e <spi_transceive_buffer_wait+0x196>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1184:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1186:	05c9      	lsls	r1, r1, #23
    1188:	0dc9      	lsrs	r1, r1, #23
    118a:	e001      	b.n	1190 <spi_transceive_buffer_wait+0x118>
		uint16_t received_data = 0;
    118c:	2100      	movs	r1, #0
		return STATUS_ERR_IO;
    118e:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
    1190:	2a00      	cmp	r2, #0
    1192:	d000      	beq.n	1196 <spi_transceive_buffer_wait+0x11e>
    1194:	e094      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
		rx_data[rx_pos++] = received_data;
    1196:	4643      	mov	r3, r8
    1198:	3301      	adds	r3, #1
    119a:	b29b      	uxth	r3, r3
    119c:	9a03      	ldr	r2, [sp, #12]
    119e:	4640      	mov	r0, r8
    11a0:	5411      	strb	r1, [r2, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11a2:	79a2      	ldrb	r2, [r4, #6]
    11a4:	2a01      	cmp	r2, #1
    11a6:	d038      	beq.n	121a <spi_transceive_buffer_wait+0x1a2>
			rx_data[rx_pos++] = (received_data >> 8);
    11a8:	4698      	mov	r8, r3
    11aa:	0031      	movs	r1, r6
    11ac:	003e      	movs	r6, r7
	while (length--) {
    11ae:	1e77      	subs	r7, r6, #1
    11b0:	b2bf      	uxth	r7, r7
    11b2:	2e00      	cmp	r6, #0
    11b4:	d037      	beq.n	1226 <spi_transceive_buffer_wait+0x1ae>
		if (module->mode == SPI_MODE_SLAVE) {
    11b6:	7963      	ldrb	r3, [r4, #5]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d085      	beq.n	10c8 <spi_transceive_buffer_wait+0x50>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11bc:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    11be:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    11c0:	07d2      	lsls	r2, r2, #31
    11c2:	d5fb      	bpl.n	11bc <spi_transceive_buffer_wait+0x144>
		uint16_t data_to_send = tx_data[tx_pos++];
    11c4:	1c4e      	adds	r6, r1, #1
    11c6:	b2b6      	uxth	r6, r6
    11c8:	9a01      	ldr	r2, [sp, #4]
    11ca:	5c52      	ldrb	r2, [r2, r1]
    11cc:	4692      	mov	sl, r2
    11ce:	a802      	add	r0, sp, #8
    11d0:	8042      	strh	r2, [r0, #2]
    11d2:	8842      	ldrh	r2, [r0, #2]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11d4:	79a0      	ldrb	r0, [r4, #6]
    11d6:	2801      	cmp	r0, #1
    11d8:	d08e      	beq.n	10f8 <spi_transceive_buffer_wait+0x80>
    11da:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    11dc:	07c9      	lsls	r1, r1, #31
    11de:	d502      	bpl.n	11e6 <spi_transceive_buffer_wait+0x16e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    11e0:	05d2      	lsls	r2, r2, #23
    11e2:	0dd2      	lsrs	r2, r2, #23
    11e4:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    11e6:	7963      	ldrb	r3, [r4, #5]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d0b9      	beq.n	1160 <spi_transceive_buffer_wait+0xe8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11ec:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11ee:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    11f0:	0752      	lsls	r2, r2, #29
    11f2:	d5fb      	bpl.n	11ec <spi_transceive_buffer_wait+0x174>
		rx_length--;
    11f4:	4662      	mov	r2, ip
    11f6:	3a01      	subs	r2, #1
    11f8:	b292      	uxth	r2, r2
    11fa:	4694      	mov	ip, r2
    11fc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    11fe:	0752      	lsls	r2, r2, #29
    1200:	d5c4      	bpl.n	118c <spi_transceive_buffer_wait+0x114>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1202:	8b5a      	ldrh	r2, [r3, #26]
    1204:	0752      	lsls	r2, r2, #29
    1206:	d5bb      	bpl.n	1180 <spi_transceive_buffer_wait+0x108>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1208:	2204      	movs	r2, #4
    120a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    120c:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    120e:	79a1      	ldrb	r1, [r4, #6]
    1210:	2901      	cmp	r1, #1
    1212:	d0b7      	beq.n	1184 <spi_transceive_buffer_wait+0x10c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1214:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1216:	b2c9      	uxtb	r1, r1
    1218:	e7ba      	b.n	1190 <spi_transceive_buffer_wait+0x118>
			rx_data[rx_pos++] = (received_data >> 8);
    121a:	3002      	adds	r0, #2
    121c:	0a09      	lsrs	r1, r1, #8
    121e:	9a03      	ldr	r2, [sp, #12]
    1220:	54d1      	strb	r1, [r2, r3]
    1222:	b283      	uxth	r3, r0
    1224:	e7c0      	b.n	11a8 <spi_transceive_buffer_wait+0x130>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1226:	7962      	ldrb	r2, [r4, #5]
    1228:	2a01      	cmp	r2, #1
    122a:	d003      	beq.n	1234 <spi_transceive_buffer_wait+0x1bc>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    122c:	2a00      	cmp	r2, #0
    122e:	d039      	beq.n	12a4 <spi_transceive_buffer_wait+0x22c>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1230:	2200      	movs	r2, #0
    1232:	e045      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1234:	6823      	ldr	r3, [r4, #0]
    1236:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    1238:	079b      	lsls	r3, r3, #30
    123a:	d5fb      	bpl.n	1234 <spi_transceive_buffer_wait+0x1bc>
    123c:	e7f6      	b.n	122c <spi_transceive_buffer_wait+0x1b4>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    123e:	3301      	adds	r3, #1
    1240:	4a25      	ldr	r2, [pc, #148]	; (12d8 <spi_transceive_buffer_wait+0x260>)
    1242:	4293      	cmp	r3, r2
    1244:	d803      	bhi.n	124e <spi_transceive_buffer_wait+0x1d6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1246:	6822      	ldr	r2, [r4, #0]
    1248:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    124a:	0752      	lsls	r2, r2, #29
    124c:	d5f7      	bpl.n	123e <spi_transceive_buffer_wait+0x1c6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    124e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1250:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1252:	0752      	lsls	r2, r2, #29
    1254:	d53c      	bpl.n	12d0 <spi_transceive_buffer_wait+0x258>
			rx_length--;
    1256:	4662      	mov	r2, ip
    1258:	3a01      	subs	r2, #1
    125a:	b292      	uxth	r2, r2
    125c:	4694      	mov	ip, r2
    125e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1260:	0752      	lsls	r2, r2, #29
    1262:	d511      	bpl.n	1288 <spi_transceive_buffer_wait+0x210>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1264:	8b5a      	ldrh	r2, [r3, #26]
    1266:	0752      	lsls	r2, r2, #29
    1268:	d508      	bpl.n	127c <spi_transceive_buffer_wait+0x204>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    126a:	2204      	movs	r2, #4
    126c:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    126e:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1270:	79a1      	ldrb	r1, [r4, #6]
    1272:	2901      	cmp	r1, #1
    1274:	d004      	beq.n	1280 <spi_transceive_buffer_wait+0x208>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1276:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1278:	b2c9      	uxtb	r1, r1
    127a:	e007      	b.n	128c <spi_transceive_buffer_wait+0x214>
	enum status_code retval = STATUS_OK;
    127c:	2200      	movs	r2, #0
    127e:	e7f7      	b.n	1270 <spi_transceive_buffer_wait+0x1f8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1280:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1282:	05c9      	lsls	r1, r1, #23
    1284:	0dc9      	lsrs	r1, r1, #23
    1286:	e001      	b.n	128c <spi_transceive_buffer_wait+0x214>
			uint16_t received_data = 0;
    1288:	0031      	movs	r1, r6
		return STATUS_ERR_IO;
    128a:	2210      	movs	r2, #16
			if (retval != STATUS_OK) {
    128c:	2a00      	cmp	r2, #0
    128e:	d117      	bne.n	12c0 <spi_transceive_buffer_wait+0x248>
			rx_data[rx_pos++] = received_data;
    1290:	4643      	mov	r3, r8
    1292:	3301      	adds	r3, #1
    1294:	b29b      	uxth	r3, r3
    1296:	9a03      	ldr	r2, [sp, #12]
    1298:	4640      	mov	r0, r8
    129a:	5411      	strb	r1, [r2, r0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    129c:	79a2      	ldrb	r2, [r4, #6]
    129e:	2a01      	cmp	r2, #1
    12a0:	d005      	beq.n	12ae <spi_transceive_buffer_wait+0x236>
				rx_data[rx_pos++] = (received_data >> 8);
    12a2:	4698      	mov	r8, r3
		while (rx_length) {
    12a4:	4663      	mov	r3, ip
    12a6:	2b00      	cmp	r3, #0
    12a8:	d007      	beq.n	12ba <spi_transceive_buffer_wait+0x242>
    12aa:	2300      	movs	r3, #0
    12ac:	e7c8      	b.n	1240 <spi_transceive_buffer_wait+0x1c8>
				rx_data[rx_pos++] = (received_data >> 8);
    12ae:	3002      	adds	r0, #2
    12b0:	0a09      	lsrs	r1, r1, #8
    12b2:	9a03      	ldr	r2, [sp, #12]
    12b4:	54d1      	strb	r1, [r2, r3]
    12b6:	b283      	uxth	r3, r0
    12b8:	e7f3      	b.n	12a2 <spi_transceive_buffer_wait+0x22a>
	return STATUS_OK;
    12ba:	2200      	movs	r2, #0
    12bc:	e000      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
		return STATUS_BUSY;
    12be:	2205      	movs	r2, #5
}
    12c0:	0010      	movs	r0, r2
    12c2:	b005      	add	sp, #20
    12c4:	bc3c      	pop	{r2, r3, r4, r5}
    12c6:	4690      	mov	r8, r2
    12c8:	4699      	mov	r9, r3
    12ca:	46a2      	mov	sl, r4
    12cc:	46ab      	mov	fp, r5
    12ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    12d0:	2212      	movs	r2, #18
    12d2:	e7f5      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
    12d4:	00000a55 	.word	0x00000a55
    12d8:	00002710 	.word	0x00002710

000012dc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    12dc:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12de:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    12e2:	780a      	ldrb	r2, [r1, #0]
    12e4:	b2d2      	uxtb	r2, r2
    12e6:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    12e8:	1c4c      	adds	r4, r1, #1
    12ea:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12ec:	7986      	ldrb	r6, [r0, #6]
    12ee:	2e01      	cmp	r6, #1
    12f0:	d007      	beq.n	1302 <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    12f2:	05db      	lsls	r3, r3, #23
    12f4:	0ddb      	lsrs	r3, r3, #23
    12f6:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    12f8:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    12fa:	3b01      	subs	r3, #1
    12fc:	b29b      	uxth	r3, r3
    12fe:	8683      	strh	r3, [r0, #52]	; 0x34
}
    1300:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1302:	784b      	ldrb	r3, [r1, #1]
    1304:	021b      	lsls	r3, r3, #8
    1306:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    1308:	1c8c      	adds	r4, r1, #2
    130a:	62c4      	str	r4, [r0, #44]	; 0x2c
    130c:	e7f1      	b.n	12f2 <_spi_write+0x16>
	...

00001310 <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1310:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1312:	4a04      	ldr	r2, [pc, #16]	; (1324 <_spi_write_dummy+0x14>)
    1314:	8812      	ldrh	r2, [r2, #0]
    1316:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1318:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    131a:	3b01      	subs	r3, #1
    131c:	b29b      	uxth	r3, r3
    131e:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1320:	4770      	bx	lr
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	20000428 	.word	0x20000428

00001328 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1328:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    132c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    132e:	3b01      	subs	r3, #1
    1330:	b29b      	uxth	r3, r3
    1332:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1334:	4770      	bx	lr

00001336 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1336:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    133a:	05db      	lsls	r3, r3, #23
    133c:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    133e:	b2da      	uxtb	r2, r3
    1340:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1342:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1344:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1346:	1c51      	adds	r1, r2, #1
    1348:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    134a:	7981      	ldrb	r1, [r0, #6]
    134c:	2901      	cmp	r1, #1
    134e:	d004      	beq.n	135a <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1350:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    1352:	3b01      	subs	r3, #1
    1354:	b29b      	uxth	r3, r3
    1356:	8603      	strh	r3, [r0, #48]	; 0x30
}
    1358:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    135a:	0a1b      	lsrs	r3, r3, #8
    135c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    135e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1360:	3301      	adds	r3, #1
    1362:	6283      	str	r3, [r0, #40]	; 0x28
    1364:	e7f4      	b.n	1350 <_spi_read+0x1a>
	...

00001368 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    136a:	0080      	lsls	r0, r0, #2
    136c:	4b6b      	ldr	r3, [pc, #428]	; (151c <_spi_interrupt_handler+0x1b4>)
    136e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1370:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1372:	2337      	movs	r3, #55	; 0x37
    1374:	5ce3      	ldrb	r3, [r4, r3]
    1376:	2236      	movs	r2, #54	; 0x36
    1378:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    137a:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    137c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    137e:	7db5      	ldrb	r5, [r6, #22]
    1380:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1382:	07eb      	lsls	r3, r5, #31
    1384:	d516      	bpl.n	13b4 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1386:	7963      	ldrb	r3, [r4, #5]
    1388:	2b01      	cmp	r3, #1
    138a:	d04d      	beq.n	1428 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    138c:	7963      	ldrb	r3, [r4, #5]
		if (0
    138e:	2b01      	cmp	r3, #1
    1390:	d057      	beq.n	1442 <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1392:	2b00      	cmp	r3, #0
    1394:	d10e      	bne.n	13b4 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    1396:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1398:	2b00      	cmp	r3, #0
    139a:	d00b      	beq.n	13b4 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    139c:	0020      	movs	r0, r4
    139e:	4b60      	ldr	r3, [pc, #384]	; (1520 <_spi_interrupt_handler+0x1b8>)
    13a0:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    13a2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    13a4:	b29b      	uxth	r3, r3
    13a6:	2b00      	cmp	r3, #0
    13a8:	d104      	bne.n	13b4 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    13aa:	3301      	adds	r3, #1
    13ac:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    13ae:	7a63      	ldrb	r3, [r4, #9]
    13b0:	2b01      	cmp	r3, #1
    13b2:	d04a      	beq.n	144a <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    13b4:	076b      	lsls	r3, r5, #29
    13b6:	d511      	bpl.n	13dc <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13b8:	8b73      	ldrh	r3, [r6, #26]
    13ba:	075b      	lsls	r3, r3, #29
    13bc:	d54f      	bpl.n	145e <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    13be:	7a63      	ldrb	r3, [r4, #9]
    13c0:	2b01      	cmp	r3, #1
    13c2:	d008      	beq.n	13d6 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    13c4:	221e      	movs	r2, #30
    13c6:	2338      	movs	r3, #56	; 0x38
    13c8:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    13ca:	3b35      	subs	r3, #53	; 0x35
    13cc:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    13ce:	3302      	adds	r3, #2
    13d0:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    13d2:	073b      	lsls	r3, r7, #28
    13d4:	d43f      	bmi.n	1456 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    13d6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    13d8:	2304      	movs	r3, #4
    13da:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    13dc:	07ab      	lsls	r3, r5, #30
    13de:	d513      	bpl.n	1408 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    13e0:	7963      	ldrb	r3, [r4, #5]
    13e2:	2b00      	cmp	r3, #0
    13e4:	d10d      	bne.n	1402 <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    13e6:	3307      	adds	r3, #7
    13e8:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    13ea:	3b05      	subs	r3, #5
    13ec:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    13ee:	3301      	adds	r3, #1
    13f0:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    13f2:	2300      	movs	r3, #0
    13f4:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    13f6:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    13f8:	3338      	adds	r3, #56	; 0x38
    13fa:	2200      	movs	r2, #0
    13fc:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    13fe:	06fb      	lsls	r3, r7, #27
    1400:	d464      	bmi.n	14cc <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1402:	7963      	ldrb	r3, [r4, #5]
    1404:	2b01      	cmp	r3, #1
    1406:	d065      	beq.n	14d4 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1408:	072b      	lsls	r3, r5, #28
    140a:	d508      	bpl.n	141e <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    140c:	7963      	ldrb	r3, [r4, #5]
    140e:	2b00      	cmp	r3, #0
    1410:	d105      	bne.n	141e <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1412:	3308      	adds	r3, #8
    1414:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1416:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1418:	06bb      	lsls	r3, r7, #26
    141a:	d500      	bpl.n	141e <_spi_interrupt_handler+0xb6>
    141c:	e070      	b.n	1500 <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    141e:	b26d      	sxtb	r5, r5
    1420:	2d00      	cmp	r5, #0
    1422:	da00      	bge.n	1426 <_spi_interrupt_handler+0xbe>
    1424:	e070      	b.n	1508 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    1428:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    142a:	2b00      	cmp	r3, #0
    142c:	d1ae      	bne.n	138c <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    142e:	0020      	movs	r0, r4
    1430:	4b3c      	ldr	r3, [pc, #240]	; (1524 <_spi_interrupt_handler+0x1bc>)
    1432:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1434:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1436:	b29b      	uxth	r3, r3
    1438:	2b00      	cmp	r3, #0
    143a:	d1a7      	bne.n	138c <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    143c:	3301      	adds	r3, #1
    143e:	7533      	strb	r3, [r6, #20]
    1440:	e7a4      	b.n	138c <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    1442:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1444:	2a00      	cmp	r2, #0
    1446:	d1a9      	bne.n	139c <_spi_interrupt_handler+0x34>
    1448:	e7a3      	b.n	1392 <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    144a:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    144c:	2b00      	cmp	r3, #0
    144e:	d1b1      	bne.n	13b4 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1450:	3302      	adds	r3, #2
    1452:	75b3      	strb	r3, [r6, #22]
    1454:	e7ae      	b.n	13b4 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1456:	0020      	movs	r0, r4
    1458:	69a3      	ldr	r3, [r4, #24]
    145a:	4798      	blx	r3
    145c:	e7bb      	b.n	13d6 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    145e:	7a63      	ldrb	r3, [r4, #9]
    1460:	2b01      	cmp	r3, #1
    1462:	d017      	beq.n	1494 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    1464:	0020      	movs	r0, r4
    1466:	4b30      	ldr	r3, [pc, #192]	; (1528 <_spi_interrupt_handler+0x1c0>)
    1468:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    146a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    146c:	b29b      	uxth	r3, r3
    146e:	2b00      	cmp	r3, #0
    1470:	d1b4      	bne.n	13dc <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    1472:	2200      	movs	r2, #0
    1474:	3338      	adds	r3, #56	; 0x38
    1476:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1478:	3b34      	subs	r3, #52	; 0x34
    147a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    147c:	7a63      	ldrb	r3, [r4, #9]
    147e:	2b02      	cmp	r3, #2
    1480:	d01d      	beq.n	14be <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1482:	7a63      	ldrb	r3, [r4, #9]
    1484:	2b00      	cmp	r3, #0
    1486:	d1a9      	bne.n	13dc <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1488:	07bb      	lsls	r3, r7, #30
    148a:	d5a7      	bpl.n	13dc <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    148c:	0020      	movs	r0, r4
    148e:	6923      	ldr	r3, [r4, #16]
    1490:	4798      	blx	r3
    1492:	e7a3      	b.n	13dc <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    1494:	0020      	movs	r0, r4
    1496:	4b25      	ldr	r3, [pc, #148]	; (152c <_spi_interrupt_handler+0x1c4>)
    1498:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    149a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    149c:	b29b      	uxth	r3, r3
    149e:	2b00      	cmp	r3, #0
    14a0:	d19c      	bne.n	13dc <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    14a2:	3304      	adds	r3, #4
    14a4:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    14a6:	2200      	movs	r2, #0
    14a8:	3334      	adds	r3, #52	; 0x34
    14aa:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    14ac:	3b35      	subs	r3, #53	; 0x35
    14ae:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    14b0:	07fb      	lsls	r3, r7, #31
    14b2:	d400      	bmi.n	14b6 <_spi_interrupt_handler+0x14e>
    14b4:	e792      	b.n	13dc <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    14b6:	0020      	movs	r0, r4
    14b8:	68e3      	ldr	r3, [r4, #12]
    14ba:	4798      	blx	r3
    14bc:	e78e      	b.n	13dc <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    14be:	077b      	lsls	r3, r7, #29
    14c0:	d400      	bmi.n	14c4 <_spi_interrupt_handler+0x15c>
    14c2:	e78b      	b.n	13dc <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    14c4:	0020      	movs	r0, r4
    14c6:	6963      	ldr	r3, [r4, #20]
    14c8:	4798      	blx	r3
    14ca:	e787      	b.n	13dc <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    14cc:	0020      	movs	r0, r4
    14ce:	69e3      	ldr	r3, [r4, #28]
    14d0:	4798      	blx	r3
    14d2:	e796      	b.n	1402 <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    14d4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    14d6:	2b01      	cmp	r3, #1
    14d8:	d000      	beq.n	14dc <_spi_interrupt_handler+0x174>
    14da:	e795      	b.n	1408 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    14dc:	79e3      	ldrb	r3, [r4, #7]
    14de:	2b00      	cmp	r3, #0
    14e0:	d000      	beq.n	14e4 <_spi_interrupt_handler+0x17c>
    14e2:	e791      	b.n	1408 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    14e4:	3302      	adds	r3, #2
    14e6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    14e8:	3301      	adds	r3, #1
    14ea:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    14ec:	2200      	movs	r2, #0
    14ee:	3335      	adds	r3, #53	; 0x35
    14f0:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    14f2:	07fb      	lsls	r3, r7, #31
    14f4:	d400      	bmi.n	14f8 <_spi_interrupt_handler+0x190>
    14f6:	e787      	b.n	1408 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    14f8:	0020      	movs	r0, r4
    14fa:	68e3      	ldr	r3, [r4, #12]
    14fc:	4798      	blx	r3
    14fe:	e783      	b.n	1408 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1500:	0020      	movs	r0, r4
    1502:	6a23      	ldr	r3, [r4, #32]
    1504:	4798      	blx	r3
    1506:	e78a      	b.n	141e <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1508:	2380      	movs	r3, #128	; 0x80
    150a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    150c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    150e:	067b      	lsls	r3, r7, #25
    1510:	d400      	bmi.n	1514 <_spi_interrupt_handler+0x1ac>
    1512:	e788      	b.n	1426 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1514:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1516:	0020      	movs	r0, r4
    1518:	4798      	blx	r3
}
    151a:	e784      	b.n	1426 <_spi_interrupt_handler+0xbe>
    151c:	200009f0 	.word	0x200009f0
    1520:	000012dd 	.word	0x000012dd
    1524:	00001311 	.word	0x00001311
    1528:	00001337 	.word	0x00001337
    152c:	00001329 	.word	0x00001329

00001530 <FIFO_Count>:
    1530:	2800      	cmp	r0, #0
    1532:	d003      	beq.n	153c <FIFO_Count+0xc>
    1534:	6803      	ldr	r3, [r0, #0]
    1536:	6840      	ldr	r0, [r0, #4]
    1538:	1a18      	subs	r0, r3, r0
    153a:	4770      	bx	lr
    153c:	2000      	movs	r0, #0
    153e:	e7fc      	b.n	153a <FIFO_Count+0xa>

00001540 <FIFO_Full>:
    1540:	b510      	push	{r4, lr}
    1542:	1e04      	subs	r4, r0, #0
    1544:	d006      	beq.n	1554 <FIFO_Full+0x14>
    1546:	4b05      	ldr	r3, [pc, #20]	; (155c <FIFO_Full+0x1c>)
    1548:	4798      	blx	r3
    154a:	68e3      	ldr	r3, [r4, #12]
    154c:	4298      	cmp	r0, r3
    154e:	d003      	beq.n	1558 <FIFO_Full+0x18>
    1550:	2000      	movs	r0, #0
    1552:	bd10      	pop	{r4, pc}
    1554:	2001      	movs	r0, #1
    1556:	e7fc      	b.n	1552 <FIFO_Full+0x12>
    1558:	2001      	movs	r0, #1
    155a:	e7fa      	b.n	1552 <FIFO_Full+0x12>
    155c:	00001531 	.word	0x00001531

00001560 <FIFO_Put>:
    1560:	b570      	push	{r4, r5, r6, lr}
    1562:	0004      	movs	r4, r0
    1564:	000d      	movs	r5, r1
    1566:	2800      	cmp	r0, #0
    1568:	d010      	beq.n	158c <FIFO_Put+0x2c>
    156a:	4b0a      	ldr	r3, [pc, #40]	; (1594 <FIFO_Put+0x34>)
    156c:	4798      	blx	r3
    156e:	2800      	cmp	r0, #0
    1570:	d10e      	bne.n	1590 <FIFO_Put+0x30>
    1572:	6820      	ldr	r0, [r4, #0]
    1574:	68e1      	ldr	r1, [r4, #12]
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <FIFO_Put+0x38>)
    1578:	4798      	blx	r3
    157a:	68a3      	ldr	r3, [r4, #8]
    157c:	469c      	mov	ip, r3
    157e:	4461      	add	r1, ip
    1580:	700d      	strb	r5, [r1, #0]
    1582:	6823      	ldr	r3, [r4, #0]
    1584:	3301      	adds	r3, #1
    1586:	6023      	str	r3, [r4, #0]
    1588:	2001      	movs	r0, #1
    158a:	bd70      	pop	{r4, r5, r6, pc}
    158c:	2000      	movs	r0, #0
    158e:	e7fc      	b.n	158a <FIFO_Put+0x2a>
    1590:	2000      	movs	r0, #0
    1592:	e7fa      	b.n	158a <FIFO_Put+0x2a>
    1594:	00001541 	.word	0x00001541
    1598:	00005049 	.word	0x00005049

0000159c <FIFO_Init>:
    159c:	2800      	cmp	r0, #0
    159e:	d008      	beq.n	15b2 <FIFO_Init+0x16>
    15a0:	2900      	cmp	r1, #0
    15a2:	d006      	beq.n	15b2 <FIFO_Init+0x16>
    15a4:	2a00      	cmp	r2, #0
    15a6:	d004      	beq.n	15b2 <FIFO_Init+0x16>
    15a8:	2300      	movs	r3, #0
    15aa:	6003      	str	r3, [r0, #0]
    15ac:	6043      	str	r3, [r0, #4]
    15ae:	6081      	str	r1, [r0, #8]
    15b0:	60c2      	str	r2, [r0, #12]
    15b2:	4770      	bx	lr

000015b4 <mstimer_set>:
    15b4:	b510      	push	{r4, lr}
    15b6:	0004      	movs	r4, r0
    15b8:	6041      	str	r1, [r0, #4]
    15ba:	4b02      	ldr	r3, [pc, #8]	; (15c4 <mstimer_set+0x10>)
    15bc:	4798      	blx	r3
    15be:	6020      	str	r0, [r4, #0]
    15c0:	bd10      	pop	{r4, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	00003959 	.word	0x00003959

000015c8 <eeprom_read_address>:
	}
}

//returns data from an address
struct shield_data eeprom_read_address(uint32_t address)
{
    15c8:	b530      	push	{r4, r5, lr}
    15ca:	b087      	sub	sp, #28
    15cc:	0004      	movs	r4, r0
	//prepare a struct to receive the return data
	union shield_data_union ret_data;
	
	//prepare the read data frame
	struct read_frame read_instructions;
	read_instructions.cmd = EEPROM_READ;
    15ce:	ab02      	add	r3, sp, #8
    15d0:	2203      	movs	r2, #3
    15d2:	701a      	strb	r2, [r3, #0]
	read_instructions.addr_high = (address & 0xFF0000) << 16;
    15d4:	2200      	movs	r2, #0
    15d6:	705a      	strb	r2, [r3, #1]
	read_instructions.addr_low = address & 0xFFFF;
    15d8:	8059      	strh	r1, [r3, #2]
	
	//load the frame into a union to be easily passed
	union read_frame_union read_instr;
	read_instr.frame = read_instructions;
    15da:	9b02      	ldr	r3, [sp, #8]
    15dc:	9301      	str	r3, [sp, #4]
	
	//begin the transceiver function
	spi_transceive_buffer_wait(&spieeprom_inst, &read_instr.databytes, &ret_data.databytes, sizeof(ret_data));
    15de:	230c      	movs	r3, #12
    15e0:	aa03      	add	r2, sp, #12
    15e2:	a901      	add	r1, sp, #4
    15e4:	4805      	ldr	r0, [pc, #20]	; (15fc <eeprom_read_address+0x34>)
    15e6:	4d06      	ldr	r5, [pc, #24]	; (1600 <eeprom_read_address+0x38>)
    15e8:	47a8      	blx	r5
	return ret_data.data;
    15ea:	220c      	movs	r2, #12
    15ec:	a903      	add	r1, sp, #12
    15ee:	0020      	movs	r0, r4
    15f0:	4b04      	ldr	r3, [pc, #16]	; (1604 <eeprom_read_address+0x3c>)
    15f2:	4798      	blx	r3
}
    15f4:	0020      	movs	r0, r4
    15f6:	b007      	add	sp, #28
    15f8:	bd30      	pop	{r4, r5, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	20000094 	.word	0x20000094
    1600:	00001079 	.word	0x00001079
    1604:	000050f1 	.word	0x000050f1

00001608 <is_timestamp_later>:

//returns true if time1 is later than time2
bool is_timestamp_later(struct rtc_calendar_time time1, struct rtc_calendar_time time2)
{
    1608:	b084      	sub	sp, #16
    160a:	9002      	str	r0, [sp, #8]
    160c:	9103      	str	r1, [sp, #12]
    160e:	9200      	str	r2, [sp, #0]
    1610:	9301      	str	r3, [sp, #4]
	if(time1.year > time2.year)
    1612:	0c08      	lsrs	r0, r1, #16
    1614:	0c1a      	lsrs	r2, r3, #16
    1616:	4290      	cmp	r0, r2
    1618:	d830      	bhi.n	167c <is_timestamp_later+0x74>
		return true;
	else if(time1.year == time2.year)
    161a:	d002      	beq.n	1622 <is_timestamp_later+0x1a>
					if(time1.minute > time2.minute)
						return true;
					else if(time1.minute == time2.hour)
						if(time1.second > time2.second)
							return true;
	return false;
    161c:	2000      	movs	r0, #0
}
    161e:	b004      	add	sp, #16
    1620:	4770      	bx	lr
		if(time1.month > time2.month)
    1622:	ab02      	add	r3, sp, #8
    1624:	795a      	ldrb	r2, [r3, #5]
    1626:	466b      	mov	r3, sp
    1628:	795b      	ldrb	r3, [r3, #5]
    162a:	429a      	cmp	r2, r3
    162c:	d828      	bhi.n	1680 <is_timestamp_later+0x78>
		else if(time1.month == time2.month)
    162e:	d001      	beq.n	1634 <is_timestamp_later+0x2c>
	return false;
    1630:	2000      	movs	r0, #0
    1632:	e7f4      	b.n	161e <is_timestamp_later+0x16>
			if(time1.day > time2.day)
    1634:	ab02      	add	r3, sp, #8
    1636:	791a      	ldrb	r2, [r3, #4]
    1638:	466b      	mov	r3, sp
    163a:	791b      	ldrb	r3, [r3, #4]
    163c:	429a      	cmp	r2, r3
    163e:	d821      	bhi.n	1684 <is_timestamp_later+0x7c>
			else if(time1.day == time2.day)
    1640:	d001      	beq.n	1646 <is_timestamp_later+0x3e>
	return false;
    1642:	2000      	movs	r0, #0
    1644:	e7eb      	b.n	161e <is_timestamp_later+0x16>
				if(time1.hour > time2.hour)
    1646:	ab02      	add	r3, sp, #8
    1648:	789a      	ldrb	r2, [r3, #2]
    164a:	466b      	mov	r3, sp
    164c:	789b      	ldrb	r3, [r3, #2]
    164e:	429a      	cmp	r2, r3
    1650:	d81a      	bhi.n	1688 <is_timestamp_later+0x80>
				else if(time1.hour == time2.hour)
    1652:	d001      	beq.n	1658 <is_timestamp_later+0x50>
	return false;
    1654:	2000      	movs	r0, #0
    1656:	e7e2      	b.n	161e <is_timestamp_later+0x16>
					if(time1.minute > time2.minute)
    1658:	aa02      	add	r2, sp, #8
    165a:	7852      	ldrb	r2, [r2, #1]
    165c:	4669      	mov	r1, sp
    165e:	7849      	ldrb	r1, [r1, #1]
    1660:	428a      	cmp	r2, r1
    1662:	d813      	bhi.n	168c <is_timestamp_later+0x84>
					else if(time1.minute == time2.hour)
    1664:	4293      	cmp	r3, r2
    1666:	d001      	beq.n	166c <is_timestamp_later+0x64>
	return false;
    1668:	2000      	movs	r0, #0
    166a:	e7d8      	b.n	161e <is_timestamp_later+0x16>
						if(time1.second > time2.second)
    166c:	ab02      	add	r3, sp, #8
    166e:	781a      	ldrb	r2, [r3, #0]
    1670:	466b      	mov	r3, sp
    1672:	781b      	ldrb	r3, [r3, #0]
    1674:	429a      	cmp	r2, r3
    1676:	d80b      	bhi.n	1690 <is_timestamp_later+0x88>
	return false;
    1678:	2000      	movs	r0, #0
    167a:	e7d0      	b.n	161e <is_timestamp_later+0x16>
		return true;
    167c:	2001      	movs	r0, #1
    167e:	e7ce      	b.n	161e <is_timestamp_later+0x16>
			return true;
    1680:	2001      	movs	r0, #1
    1682:	e7cc      	b.n	161e <is_timestamp_later+0x16>
				return true;
    1684:	2001      	movs	r0, #1
    1686:	e7ca      	b.n	161e <is_timestamp_later+0x16>
					return true;
    1688:	2001      	movs	r0, #1
    168a:	e7c8      	b.n	161e <is_timestamp_later+0x16>
						return true;
    168c:	2001      	movs	r0, #1
    168e:	e7c6      	b.n	161e <is_timestamp_later+0x16>
							return true;
    1690:	2001      	movs	r0, #1
    1692:	e7c4      	b.n	161e <is_timestamp_later+0x16>

00001694 <eeprom_find_latest_data>:

//returns the address of the first byte of the newest shield_data
uint32_t eeprom_find_latest_data()
{
    1694:	b570      	push	{r4, r5, r6, lr}
    1696:	b086      	sub	sp, #24
	//prepare the return data type
	union shield_data_union ret_data;
	ret_data.data.timestamp.year = 0;
    1698:	2200      	movs	r2, #0
    169a:	ab03      	add	r3, sp, #12
    169c:	80da      	strh	r2, [r3, #6]
	uint32_t address = 0;
	
	//begin a for loop to test all possible memory locations
	for(uint32_t i = 0; i < EEPROM_BYTE_TOTAL; i += sizeof(struct shield_data))
    169e:	2400      	movs	r4, #0
	uint32_t address = 0;
    16a0:	2500      	movs	r5, #0
	for(uint32_t i = 0; i < EEPROM_BYTE_TOTAL; i += sizeof(struct shield_data))
    16a2:	e000      	b.n	16a6 <eeprom_find_latest_data+0x12>
    16a4:	340c      	adds	r4, #12
    16a6:	4b0c      	ldr	r3, [pc, #48]	; (16d8 <eeprom_find_latest_data+0x44>)
    16a8:	429c      	cmp	r4, r3
    16aa:	d811      	bhi.n	16d0 <eeprom_find_latest_data+0x3c>
	{
		struct shield_data temp = eeprom_read_address(i);
    16ac:	0021      	movs	r1, r4
    16ae:	4668      	mov	r0, sp
    16b0:	4b0a      	ldr	r3, [pc, #40]	; (16dc <eeprom_find_latest_data+0x48>)
    16b2:	4798      	blx	r3
		if (is_timestamp_later(ret_data.data.timestamp, temp.timestamp))
    16b4:	9a00      	ldr	r2, [sp, #0]
    16b6:	9b01      	ldr	r3, [sp, #4]
    16b8:	9803      	ldr	r0, [sp, #12]
    16ba:	9904      	ldr	r1, [sp, #16]
    16bc:	4e08      	ldr	r6, [pc, #32]	; (16e0 <eeprom_find_latest_data+0x4c>)
    16be:	47b0      	blx	r6
    16c0:	2800      	cmp	r0, #0
    16c2:	d0ef      	beq.n	16a4 <eeprom_find_latest_data+0x10>
		{
			ret_data.data = temp;
    16c4:	aa03      	add	r2, sp, #12
    16c6:	466b      	mov	r3, sp
    16c8:	cb23      	ldmia	r3!, {r0, r1, r5}
    16ca:	c223      	stmia	r2!, {r0, r1, r5}
			address = i;
    16cc:	0025      	movs	r5, r4
    16ce:	e7e9      	b.n	16a4 <eeprom_find_latest_data+0x10>
		}
	}
	
	//return location of most recent data
	return address;
    16d0:	0028      	movs	r0, r5
    16d2:	b006      	add	sp, #24
    16d4:	bd70      	pop	{r4, r5, r6, pc}
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	0003ffff 	.word	0x0003ffff
    16dc:	000015c9 	.word	0x000015c9
    16e0:	00001609 	.word	0x00001609

000016e4 <spieeprom_init>:
{
    16e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16e6:	b091      	sub	sp, #68	; 0x44
	config->mode             = SPI_MODE_MASTER;
    16e8:	ac02      	add	r4, sp, #8
    16ea:	2601      	movs	r6, #1
    16ec:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    16ee:	2500      	movs	r5, #0
    16f0:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    16f2:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    16f4:	23c0      	movs	r3, #192	; 0xc0
    16f6:	039b      	lsls	r3, r3, #14
    16f8:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    16fa:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    16fc:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    16fe:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1700:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    1702:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    1704:	2724      	movs	r7, #36	; 0x24
    1706:	55e5      	strb	r5, [r4, r7]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1708:	220c      	movs	r2, #12
    170a:	2100      	movs	r1, #0
    170c:	a808      	add	r0, sp, #32
    170e:	4b2d      	ldr	r3, [pc, #180]	; (17c4 <spieeprom_init+0xe0>)
    1710:	4798      	blx	r3
	config_spi.mux_setting = EEPROM_PINMUX;
    1712:	2380      	movs	r3, #128	; 0x80
    1714:	025b      	lsls	r3, r3, #9
    1716:	60e3      	str	r3, [r4, #12]
	config_spi.pinmux_pad0 = EEPROM_MISO;
    1718:	4b2b      	ldr	r3, [pc, #172]	; (17c8 <spieeprom_init+0xe4>)
    171a:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi.pinmux_pad1 = EEPROM_CS;
    171c:	230d      	movs	r3, #13
    171e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi.pinmux_pad2 = EEPROM_MOSI;
    1720:	4b2a      	ldr	r3, [pc, #168]	; (17cc <spieeprom_init+0xe8>)
    1722:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi.pinmux_pad3 = EEPROM_SCK;
    1724:	4b2a      	ldr	r3, [pc, #168]	; (17d0 <spieeprom_init+0xec>)
    1726:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi.generator_source = SPI_EEPROM_CLOCK_SOURCE;
    1728:	55e5      	strb	r5, [r4, r7]
	config_spi.mode_specific.master.baudrate = SPI_EEPROM_MAX_CLOCK;
    172a:	4b2a      	ldr	r3, [pc, #168]	; (17d4 <spieeprom_init+0xf0>)
    172c:	61a3      	str	r3, [r4, #24]
	spi_init(&spieeprom_inst, SPI_EEPROM, &config_spi);
    172e:	4d2a      	ldr	r5, [pc, #168]	; (17d8 <spieeprom_init+0xf4>)
    1730:	0022      	movs	r2, r4
    1732:	492a      	ldr	r1, [pc, #168]	; (17dc <spieeprom_init+0xf8>)
    1734:	0028      	movs	r0, r5
    1736:	4b2a      	ldr	r3, [pc, #168]	; (17e0 <spieeprom_init+0xfc>)
    1738:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    173a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    173c:	0020      	movs	r0, r4
    173e:	4b29      	ldr	r3, [pc, #164]	; (17e4 <spieeprom_init+0x100>)
    1740:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1742:	231f      	movs	r3, #31
    1744:	4018      	ands	r0, r3
    1746:	4086      	lsls	r6, r0
    1748:	4b27      	ldr	r3, [pc, #156]	; (17e8 <spieeprom_init+0x104>)
    174a:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    174c:	4b22      	ldr	r3, [pc, #136]	; (17d8 <spieeprom_init+0xf4>)
    174e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    1750:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    1752:	2b00      	cmp	r3, #0
    1754:	d1fa      	bne.n	174c <spieeprom_init+0x68>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1756:	6823      	ldr	r3, [r4, #0]
    1758:	2202      	movs	r2, #2
    175a:	4313      	orrs	r3, r2
    175c:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    175e:	2300      	movs	r3, #0
	slave->ss_pin          = config->ss_pin;
    1760:	4c22      	ldr	r4, [pc, #136]	; (17ec <spieeprom_init+0x108>)
    1762:	320b      	adds	r2, #11
    1764:	7022      	strb	r2, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1766:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1768:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    176a:	3a0c      	subs	r2, #12
    176c:	4669      	mov	r1, sp
    176e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1770:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1772:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1774:	200d      	movs	r0, #13
    1776:	4b1e      	ldr	r3, [pc, #120]	; (17f0 <spieeprom_init+0x10c>)
    1778:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    177a:	7822      	ldrb	r2, [r4, #0]
	uint8_t port_index  = (gpio_pin / 128);
    177c:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    177e:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    1780:	2900      	cmp	r1, #0
    1782:	d11c      	bne.n	17be <spieeprom_init+0xda>
		return &(ports[port_index]->Group[group_index]);
    1784:	01db      	lsls	r3, r3, #7
    1786:	491b      	ldr	r1, [pc, #108]	; (17f4 <spieeprom_init+0x110>)
    1788:	468c      	mov	ip, r1
    178a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    178c:	211f      	movs	r1, #31
    178e:	4011      	ands	r1, r2
    1790:	2201      	movs	r2, #1
    1792:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1794:	619a      	str	r2, [r3, #24]
        read_status = spi_select_slave(&spieeprom_inst, &spiEEPROMSlave, true);
    1796:	2201      	movs	r2, #1
    1798:	4914      	ldr	r1, [pc, #80]	; (17ec <spieeprom_init+0x108>)
    179a:	480f      	ldr	r0, [pc, #60]	; (17d8 <spieeprom_init+0xf4>)
    179c:	4b16      	ldr	r3, [pc, #88]	; (17f8 <spieeprom_init+0x114>)
    179e:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
    17a0:	2805      	cmp	r0, #5
    17a2:	d0f8      	beq.n	1796 <spieeprom_init+0xb2>
	eeprom_data_pointer = eeprom_find_latest_data() + sizeof(struct shield_data);
    17a4:	4b15      	ldr	r3, [pc, #84]	; (17fc <spieeprom_init+0x118>)
    17a6:	4798      	blx	r3
    17a8:	300c      	adds	r0, #12
    17aa:	4b15      	ldr	r3, [pc, #84]	; (1800 <spieeprom_init+0x11c>)
    17ac:	6018      	str	r0, [r3, #0]
	if(eeprom_data_pointer > (EEPROM_BYTE_TOTAL - sizeof(struct shield_data)))
    17ae:	4b15      	ldr	r3, [pc, #84]	; (1804 <spieeprom_init+0x120>)
    17b0:	4298      	cmp	r0, r3
    17b2:	d902      	bls.n	17ba <spieeprom_init+0xd6>
		eeprom_data_pointer = 0;
    17b4:	2200      	movs	r2, #0
    17b6:	4b12      	ldr	r3, [pc, #72]	; (1800 <spieeprom_init+0x11c>)
    17b8:	601a      	str	r2, [r3, #0]
}
    17ba:	b011      	add	sp, #68	; 0x44
    17bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    17be:	2300      	movs	r3, #0
    17c0:	e7e4      	b.n	178c <spieeprom_init+0xa8>
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	00005103 	.word	0x00005103
    17c8:	000c0002 	.word	0x000c0002
    17cc:	000e0002 	.word	0x000e0002
    17d0:	000f0002 	.word	0x000f0002
    17d4:	004c4b40 	.word	0x004c4b40
    17d8:	20000094 	.word	0x20000094
    17dc:	42001000 	.word	0x42001000
    17e0:	00000ba9 	.word	0x00000ba9
    17e4:	0000426d 	.word	0x0000426d
    17e8:	e000e100 	.word	0xe000e100
    17ec:	20000430 	.word	0x20000430
    17f0:	000042f1 	.word	0x000042f1
    17f4:	41004400 	.word	0x41004400
    17f8:	00000d91 	.word	0x00000d91
    17fc:	00001695 	.word	0x00001695
    1800:	2000042c 	.word	0x2000042c
    1804:	0003fff4 	.word	0x0003fff4

00001808 <get_fiber1_status>:
}


enum fiber_data_status get_fiber1_status()
{
	return fiber1_data_status;
    1808:	4b01      	ldr	r3, [pc, #4]	; (1810 <get_fiber1_status+0x8>)
    180a:	7818      	ldrb	r0, [r3, #0]
    180c:	b2c0      	uxtb	r0, r0
};
    180e:	4770      	bx	lr
    1810:	20000434 	.word	0x20000434

00001814 <get_fiber2_status>:

enum fiber_data_status get_fiber2_status()
{
	return fiber2_data_status;
    1814:	4b01      	ldr	r3, [pc, #4]	; (181c <get_fiber2_status+0x8>)
    1816:	7818      	ldrb	r0, [r3, #0]
    1818:	b2c0      	uxtb	r0, r0
};
    181a:	4770      	bx	lr
    181c:	20000435 	.word	0x20000435

00001820 <Ft_Gpu_Copro_SendCmd>:
    1820:	b510      	push	{r4, lr}
    1822:	4b01      	ldr	r3, [pc, #4]	; (1828 <Ft_Gpu_Copro_SendCmd+0x8>)
    1824:	4798      	blx	r3
    1826:	bd10      	pop	{r4, pc}
    1828:	00001d01 	.word	0x00001d01

0000182c <Ft_Gpu_CoCmd_SendStr>:
    182c:	b510      	push	{r4, lr}
    182e:	4b01      	ldr	r3, [pc, #4]	; (1834 <Ft_Gpu_CoCmd_SendStr+0x8>)
    1830:	4798      	blx	r3
    1832:	bd10      	pop	{r4, pc}
    1834:	00001c91 	.word	0x00001c91

00001838 <Ft_Gpu_CoCmd_StartFunc>:
    1838:	b570      	push	{r4, r5, r6, lr}
    183a:	0004      	movs	r4, r0
    183c:	000d      	movs	r5, r1
    183e:	4b04      	ldr	r3, [pc, #16]	; (1850 <Ft_Gpu_CoCmd_StartFunc+0x18>)
    1840:	4798      	blx	r3
    1842:	002a      	movs	r2, r5
    1844:	2101      	movs	r1, #1
    1846:	0020      	movs	r0, r4
    1848:	4b02      	ldr	r3, [pc, #8]	; (1854 <Ft_Gpu_CoCmd_StartFunc+0x1c>)
    184a:	4798      	blx	r3
    184c:	bd70      	pop	{r4, r5, r6, pc}
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	00001e71 	.word	0x00001e71
    1854:	00001c39 	.word	0x00001c39

00001858 <Ft_Gpu_CoCmd_EndFunc>:
    1858:	b570      	push	{r4, r5, r6, lr}
    185a:	0004      	movs	r4, r0
    185c:	000d      	movs	r5, r1
    185e:	4b03      	ldr	r3, [pc, #12]	; (186c <Ft_Gpu_CoCmd_EndFunc+0x14>)
    1860:	4798      	blx	r3
    1862:	0029      	movs	r1, r5
    1864:	0020      	movs	r0, r4
    1866:	4b02      	ldr	r3, [pc, #8]	; (1870 <Ft_Gpu_CoCmd_EndFunc+0x18>)
    1868:	4798      	blx	r3
    186a:	bd70      	pop	{r4, r5, r6, pc}
    186c:	00001d35 	.word	0x00001d35
    1870:	00001e25 	.word	0x00001e25

00001874 <Ft_Gpu_CoCmd_Text>:
    1874:	b5f0      	push	{r4, r5, r6, r7, lr}
    1876:	46d6      	mov	lr, sl
    1878:	464f      	mov	r7, r9
    187a:	b580      	push	{r7, lr}
    187c:	b083      	sub	sp, #12
    187e:	0005      	movs	r5, r0
    1880:	468a      	mov	sl, r1
    1882:	4691      	mov	r9, r2
    1884:	001f      	movs	r7, r3
    1886:	ab0a      	add	r3, sp, #40	; 0x28
    1888:	881e      	ldrh	r6, [r3, #0]
    188a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    188c:	4b15      	ldr	r3, [pc, #84]	; (18e4 <Ft_Gpu_CoCmd_Text+0x70>)
    188e:	4798      	blx	r3
    1890:	b280      	uxth	r0, r0
    1892:	300d      	adds	r0, #13
    1894:	b284      	uxth	r4, r0
    1896:	0021      	movs	r1, r4
    1898:	0028      	movs	r0, r5
    189a:	4b13      	ldr	r3, [pc, #76]	; (18e8 <Ft_Gpu_CoCmd_Text+0x74>)
    189c:	4798      	blx	r3
    189e:	21f4      	movs	r1, #244	; 0xf4
    18a0:	4249      	negs	r1, r1
    18a2:	9501      	str	r5, [sp, #4]
    18a4:	0028      	movs	r0, r5
    18a6:	4d11      	ldr	r5, [pc, #68]	; (18ec <Ft_Gpu_CoCmd_Text+0x78>)
    18a8:	47a8      	blx	r5
    18aa:	464b      	mov	r3, r9
    18ac:	0419      	lsls	r1, r3, #16
    18ae:	4653      	mov	r3, sl
    18b0:	041b      	lsls	r3, r3, #16
    18b2:	0c1b      	lsrs	r3, r3, #16
    18b4:	4319      	orrs	r1, r3
    18b6:	9801      	ldr	r0, [sp, #4]
    18b8:	47a8      	blx	r5
    18ba:	0436      	lsls	r6, r6, #16
    18bc:	0439      	lsls	r1, r7, #16
    18be:	0c09      	lsrs	r1, r1, #16
    18c0:	4331      	orrs	r1, r6
    18c2:	9e01      	ldr	r6, [sp, #4]
    18c4:	0030      	movs	r0, r6
    18c6:	47a8      	blx	r5
    18c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    18ca:	0030      	movs	r0, r6
    18cc:	4b08      	ldr	r3, [pc, #32]	; (18f0 <Ft_Gpu_CoCmd_Text+0x7c>)
    18ce:	4798      	blx	r3
    18d0:	0021      	movs	r1, r4
    18d2:	0030      	movs	r0, r6
    18d4:	4b07      	ldr	r3, [pc, #28]	; (18f4 <Ft_Gpu_CoCmd_Text+0x80>)
    18d6:	4798      	blx	r3
    18d8:	b003      	add	sp, #12
    18da:	bc0c      	pop	{r2, r3}
    18dc:	4691      	mov	r9, r2
    18de:	469a      	mov	sl, r3
    18e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	00005179 	.word	0x00005179
    18e8:	00001839 	.word	0x00001839
    18ec:	00001821 	.word	0x00001821
    18f0:	0000182d 	.word	0x0000182d
    18f4:	00001859 	.word	0x00001859

000018f8 <Ft_Gpu_CoCmd_Number>:
    18f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fa:	46c6      	mov	lr, r8
    18fc:	b500      	push	{lr}
    18fe:	b082      	sub	sp, #8
    1900:	0007      	movs	r7, r0
    1902:	000c      	movs	r4, r1
    1904:	4690      	mov	r8, r2
    1906:	001e      	movs	r6, r3
    1908:	ab08      	add	r3, sp, #32
    190a:	881d      	ldrh	r5, [r3, #0]
    190c:	2110      	movs	r1, #16
    190e:	4b10      	ldr	r3, [pc, #64]	; (1950 <Ft_Gpu_CoCmd_Number+0x58>)
    1910:	4798      	blx	r3
    1912:	21d2      	movs	r1, #210	; 0xd2
    1914:	4249      	negs	r1, r1
    1916:	9701      	str	r7, [sp, #4]
    1918:	0038      	movs	r0, r7
    191a:	4f0e      	ldr	r7, [pc, #56]	; (1954 <Ft_Gpu_CoCmd_Number+0x5c>)
    191c:	47b8      	blx	r7
    191e:	4643      	mov	r3, r8
    1920:	0419      	lsls	r1, r3, #16
    1922:	0423      	lsls	r3, r4, #16
    1924:	0c1b      	lsrs	r3, r3, #16
    1926:	4319      	orrs	r1, r3
    1928:	9c01      	ldr	r4, [sp, #4]
    192a:	0020      	movs	r0, r4
    192c:	47b8      	blx	r7
    192e:	042d      	lsls	r5, r5, #16
    1930:	0431      	lsls	r1, r6, #16
    1932:	0c09      	lsrs	r1, r1, #16
    1934:	4329      	orrs	r1, r5
    1936:	0020      	movs	r0, r4
    1938:	47b8      	blx	r7
    193a:	9909      	ldr	r1, [sp, #36]	; 0x24
    193c:	0020      	movs	r0, r4
    193e:	47b8      	blx	r7
    1940:	2110      	movs	r1, #16
    1942:	0020      	movs	r0, r4
    1944:	4b04      	ldr	r3, [pc, #16]	; (1958 <Ft_Gpu_CoCmd_Number+0x60>)
    1946:	4798      	blx	r3
    1948:	b002      	add	sp, #8
    194a:	bc04      	pop	{r2}
    194c:	4690      	mov	r8, r2
    194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1950:	00001839 	.word	0x00001839
    1954:	00001821 	.word	0x00001821
    1958:	00001859 	.word	0x00001859

0000195c <Ft_Gpu_CoCmd_Swap>:
    195c:	b510      	push	{r4, lr}
    195e:	0004      	movs	r4, r0
    1960:	2104      	movs	r1, #4
    1962:	4b06      	ldr	r3, [pc, #24]	; (197c <Ft_Gpu_CoCmd_Swap+0x20>)
    1964:	4798      	blx	r3
    1966:	21ff      	movs	r1, #255	; 0xff
    1968:	4249      	negs	r1, r1
    196a:	0020      	movs	r0, r4
    196c:	4b04      	ldr	r3, [pc, #16]	; (1980 <Ft_Gpu_CoCmd_Swap+0x24>)
    196e:	4798      	blx	r3
    1970:	2104      	movs	r1, #4
    1972:	0020      	movs	r0, r4
    1974:	4b03      	ldr	r3, [pc, #12]	; (1984 <Ft_Gpu_CoCmd_Swap+0x28>)
    1976:	4798      	blx	r3
    1978:	bd10      	pop	{r4, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	00001839 	.word	0x00001839
    1980:	00001821 	.word	0x00001821
    1984:	00001859 	.word	0x00001859

00001988 <Ft_Gpu_CoCmd_Button>:
    1988:	b5f0      	push	{r4, r5, r6, r7, lr}
    198a:	46de      	mov	lr, fp
    198c:	4657      	mov	r7, sl
    198e:	464e      	mov	r6, r9
    1990:	4645      	mov	r5, r8
    1992:	b5e0      	push	{r5, r6, r7, lr}
    1994:	b083      	sub	sp, #12
    1996:	0005      	movs	r5, r0
    1998:	468a      	mov	sl, r1
    199a:	4691      	mov	r9, r2
    199c:	469b      	mov	fp, r3
    199e:	ab0c      	add	r3, sp, #48	; 0x30
    19a0:	2200      	movs	r2, #0
    19a2:	5e9b      	ldrsh	r3, [r3, r2]
    19a4:	4698      	mov	r8, r3
    19a6:	ab0d      	add	r3, sp, #52	; 0x34
    19a8:	2700      	movs	r7, #0
    19aa:	5fdf      	ldrsh	r7, [r3, r7]
    19ac:	ab0e      	add	r3, sp, #56	; 0x38
    19ae:	881e      	ldrh	r6, [r3, #0]
    19b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    19b2:	4b1a      	ldr	r3, [pc, #104]	; (1a1c <Ft_Gpu_CoCmd_Button+0x94>)
    19b4:	4798      	blx	r3
    19b6:	b280      	uxth	r0, r0
    19b8:	3011      	adds	r0, #17
    19ba:	b284      	uxth	r4, r0
    19bc:	0021      	movs	r1, r4
    19be:	0028      	movs	r0, r5
    19c0:	4b17      	ldr	r3, [pc, #92]	; (1a20 <Ft_Gpu_CoCmd_Button+0x98>)
    19c2:	4798      	blx	r3
    19c4:	21f3      	movs	r1, #243	; 0xf3
    19c6:	4249      	negs	r1, r1
    19c8:	9501      	str	r5, [sp, #4]
    19ca:	0028      	movs	r0, r5
    19cc:	4d15      	ldr	r5, [pc, #84]	; (1a24 <Ft_Gpu_CoCmd_Button+0x9c>)
    19ce:	47a8      	blx	r5
    19d0:	464b      	mov	r3, r9
    19d2:	0419      	lsls	r1, r3, #16
    19d4:	4653      	mov	r3, sl
    19d6:	041b      	lsls	r3, r3, #16
    19d8:	0c1b      	lsrs	r3, r3, #16
    19da:	4319      	orrs	r1, r3
    19dc:	9801      	ldr	r0, [sp, #4]
    19de:	47a8      	blx	r5
    19e0:	4643      	mov	r3, r8
    19e2:	0419      	lsls	r1, r3, #16
    19e4:	465b      	mov	r3, fp
    19e6:	041b      	lsls	r3, r3, #16
    19e8:	0c1b      	lsrs	r3, r3, #16
    19ea:	4319      	orrs	r1, r3
    19ec:	9801      	ldr	r0, [sp, #4]
    19ee:	47a8      	blx	r5
    19f0:	0436      	lsls	r6, r6, #16
    19f2:	0439      	lsls	r1, r7, #16
    19f4:	0c09      	lsrs	r1, r1, #16
    19f6:	4331      	orrs	r1, r6
    19f8:	9e01      	ldr	r6, [sp, #4]
    19fa:	0030      	movs	r0, r6
    19fc:	47a8      	blx	r5
    19fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1a00:	0030      	movs	r0, r6
    1a02:	4b09      	ldr	r3, [pc, #36]	; (1a28 <Ft_Gpu_CoCmd_Button+0xa0>)
    1a04:	4798      	blx	r3
    1a06:	0021      	movs	r1, r4
    1a08:	0030      	movs	r0, r6
    1a0a:	4b08      	ldr	r3, [pc, #32]	; (1a2c <Ft_Gpu_CoCmd_Button+0xa4>)
    1a0c:	4798      	blx	r3
    1a0e:	b003      	add	sp, #12
    1a10:	bc3c      	pop	{r2, r3, r4, r5}
    1a12:	4690      	mov	r8, r2
    1a14:	4699      	mov	r9, r3
    1a16:	46a2      	mov	sl, r4
    1a18:	46ab      	mov	fp, r5
    1a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a1c:	00005179 	.word	0x00005179
    1a20:	00001839 	.word	0x00001839
    1a24:	00001821 	.word	0x00001821
    1a28:	0000182d 	.word	0x0000182d
    1a2c:	00001859 	.word	0x00001859

00001a30 <Ft_Gpu_CoCmd_Calibrate>:
    1a30:	b570      	push	{r4, r5, r6, lr}
    1a32:	0004      	movs	r4, r0
    1a34:	000e      	movs	r6, r1
    1a36:	2108      	movs	r1, #8
    1a38:	4b08      	ldr	r3, [pc, #32]	; (1a5c <Ft_Gpu_CoCmd_Calibrate+0x2c>)
    1a3a:	4798      	blx	r3
    1a3c:	21eb      	movs	r1, #235	; 0xeb
    1a3e:	4249      	negs	r1, r1
    1a40:	0020      	movs	r0, r4
    1a42:	4d07      	ldr	r5, [pc, #28]	; (1a60 <Ft_Gpu_CoCmd_Calibrate+0x30>)
    1a44:	47a8      	blx	r5
    1a46:	0031      	movs	r1, r6
    1a48:	0020      	movs	r0, r4
    1a4a:	47a8      	blx	r5
    1a4c:	2108      	movs	r1, #8
    1a4e:	0020      	movs	r0, r4
    1a50:	4b04      	ldr	r3, [pc, #16]	; (1a64 <Ft_Gpu_CoCmd_Calibrate+0x34>)
    1a52:	4798      	blx	r3
    1a54:	0020      	movs	r0, r4
    1a56:	4b04      	ldr	r3, [pc, #16]	; (1a68 <Ft_Gpu_CoCmd_Calibrate+0x38>)
    1a58:	4798      	blx	r3
    1a5a:	bd70      	pop	{r4, r5, r6, pc}
    1a5c:	00001839 	.word	0x00001839
    1a60:	00001821 	.word	0x00001821
    1a64:	00001859 	.word	0x00001859
    1a68:	00001e89 	.word	0x00001e89

00001a6c <Ft_Gpu_CoCmd_Append>:
    1a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a6e:	0004      	movs	r4, r0
    1a70:	000f      	movs	r7, r1
    1a72:	0016      	movs	r6, r2
    1a74:	210c      	movs	r1, #12
    1a76:	4b09      	ldr	r3, [pc, #36]	; (1a9c <Ft_Gpu_CoCmd_Append+0x30>)
    1a78:	4798      	blx	r3
    1a7a:	21e2      	movs	r1, #226	; 0xe2
    1a7c:	4249      	negs	r1, r1
    1a7e:	0020      	movs	r0, r4
    1a80:	4d07      	ldr	r5, [pc, #28]	; (1aa0 <Ft_Gpu_CoCmd_Append+0x34>)
    1a82:	47a8      	blx	r5
    1a84:	0039      	movs	r1, r7
    1a86:	0020      	movs	r0, r4
    1a88:	47a8      	blx	r5
    1a8a:	0031      	movs	r1, r6
    1a8c:	0020      	movs	r0, r4
    1a8e:	47a8      	blx	r5
    1a90:	210c      	movs	r1, #12
    1a92:	0020      	movs	r0, r4
    1a94:	4b03      	ldr	r3, [pc, #12]	; (1aa4 <Ft_Gpu_CoCmd_Append+0x38>)
    1a96:	4798      	blx	r3
    1a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	00001839 	.word	0x00001839
    1aa0:	00001821 	.word	0x00001821
    1aa4:	00001859 	.word	0x00001859

00001aa8 <Ft_Gpu_CoCmd_Gradient>:
    1aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aaa:	46d6      	mov	lr, sl
    1aac:	464f      	mov	r7, r9
    1aae:	b580      	push	{r7, lr}
    1ab0:	b083      	sub	sp, #12
    1ab2:	0004      	movs	r4, r0
    1ab4:	468a      	mov	sl, r1
    1ab6:	4691      	mov	r9, r2
    1ab8:	9301      	str	r3, [sp, #4]
    1aba:	ab0a      	add	r3, sp, #40	; 0x28
    1abc:	2200      	movs	r2, #0
    1abe:	5e9f      	ldrsh	r7, [r3, r2]
    1ac0:	ab0b      	add	r3, sp, #44	; 0x2c
    1ac2:	2200      	movs	r2, #0
    1ac4:	5e9e      	ldrsh	r6, [r3, r2]
    1ac6:	2114      	movs	r1, #20
    1ac8:	4b11      	ldr	r3, [pc, #68]	; (1b10 <Ft_Gpu_CoCmd_Gradient+0x68>)
    1aca:	4798      	blx	r3
    1acc:	21f5      	movs	r1, #245	; 0xf5
    1ace:	4249      	negs	r1, r1
    1ad0:	0020      	movs	r0, r4
    1ad2:	4d10      	ldr	r5, [pc, #64]	; (1b14 <Ft_Gpu_CoCmd_Gradient+0x6c>)
    1ad4:	47a8      	blx	r5
    1ad6:	464a      	mov	r2, r9
    1ad8:	0411      	lsls	r1, r2, #16
    1ada:	4652      	mov	r2, sl
    1adc:	0413      	lsls	r3, r2, #16
    1ade:	0c1b      	lsrs	r3, r3, #16
    1ae0:	4319      	orrs	r1, r3
    1ae2:	0020      	movs	r0, r4
    1ae4:	47a8      	blx	r5
    1ae6:	9901      	ldr	r1, [sp, #4]
    1ae8:	0020      	movs	r0, r4
    1aea:	47a8      	blx	r5
    1aec:	0436      	lsls	r6, r6, #16
    1aee:	0439      	lsls	r1, r7, #16
    1af0:	0c09      	lsrs	r1, r1, #16
    1af2:	4331      	orrs	r1, r6
    1af4:	0020      	movs	r0, r4
    1af6:	47a8      	blx	r5
    1af8:	990c      	ldr	r1, [sp, #48]	; 0x30
    1afa:	0020      	movs	r0, r4
    1afc:	47a8      	blx	r5
    1afe:	2114      	movs	r1, #20
    1b00:	0020      	movs	r0, r4
    1b02:	4b05      	ldr	r3, [pc, #20]	; (1b18 <Ft_Gpu_CoCmd_Gradient+0x70>)
    1b04:	4798      	blx	r3
    1b06:	b003      	add	sp, #12
    1b08:	bc0c      	pop	{r2, r3}
    1b0a:	4691      	mov	r9, r2
    1b0c:	469a      	mov	sl, r3
    1b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b10:	00001839 	.word	0x00001839
    1b14:	00001821 	.word	0x00001821
    1b18:	00001859 	.word	0x00001859

00001b1c <Ft_Gpu_CoCmd_Keys>:
    1b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b1e:	46de      	mov	lr, fp
    1b20:	4657      	mov	r7, sl
    1b22:	464e      	mov	r6, r9
    1b24:	4645      	mov	r5, r8
    1b26:	b5e0      	push	{r5, r6, r7, lr}
    1b28:	b083      	sub	sp, #12
    1b2a:	0005      	movs	r5, r0
    1b2c:	468a      	mov	sl, r1
    1b2e:	4691      	mov	r9, r2
    1b30:	469b      	mov	fp, r3
    1b32:	ab0c      	add	r3, sp, #48	; 0x30
    1b34:	2200      	movs	r2, #0
    1b36:	5e9b      	ldrsh	r3, [r3, r2]
    1b38:	4698      	mov	r8, r3
    1b3a:	ab0d      	add	r3, sp, #52	; 0x34
    1b3c:	2700      	movs	r7, #0
    1b3e:	5fdf      	ldrsh	r7, [r3, r7]
    1b40:	ab0e      	add	r3, sp, #56	; 0x38
    1b42:	881e      	ldrh	r6, [r3, #0]
    1b44:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1b46:	4b1a      	ldr	r3, [pc, #104]	; (1bb0 <Ft_Gpu_CoCmd_Keys+0x94>)
    1b48:	4798      	blx	r3
    1b4a:	b280      	uxth	r0, r0
    1b4c:	3011      	adds	r0, #17
    1b4e:	b284      	uxth	r4, r0
    1b50:	0021      	movs	r1, r4
    1b52:	0028      	movs	r0, r5
    1b54:	4b17      	ldr	r3, [pc, #92]	; (1bb4 <Ft_Gpu_CoCmd_Keys+0x98>)
    1b56:	4798      	blx	r3
    1b58:	21f2      	movs	r1, #242	; 0xf2
    1b5a:	4249      	negs	r1, r1
    1b5c:	9501      	str	r5, [sp, #4]
    1b5e:	0028      	movs	r0, r5
    1b60:	4d15      	ldr	r5, [pc, #84]	; (1bb8 <Ft_Gpu_CoCmd_Keys+0x9c>)
    1b62:	47a8      	blx	r5
    1b64:	464b      	mov	r3, r9
    1b66:	0419      	lsls	r1, r3, #16
    1b68:	4653      	mov	r3, sl
    1b6a:	041b      	lsls	r3, r3, #16
    1b6c:	0c1b      	lsrs	r3, r3, #16
    1b6e:	4319      	orrs	r1, r3
    1b70:	9801      	ldr	r0, [sp, #4]
    1b72:	47a8      	blx	r5
    1b74:	4643      	mov	r3, r8
    1b76:	0419      	lsls	r1, r3, #16
    1b78:	465b      	mov	r3, fp
    1b7a:	041b      	lsls	r3, r3, #16
    1b7c:	0c1b      	lsrs	r3, r3, #16
    1b7e:	4319      	orrs	r1, r3
    1b80:	9801      	ldr	r0, [sp, #4]
    1b82:	47a8      	blx	r5
    1b84:	0436      	lsls	r6, r6, #16
    1b86:	0439      	lsls	r1, r7, #16
    1b88:	0c09      	lsrs	r1, r1, #16
    1b8a:	4331      	orrs	r1, r6
    1b8c:	9e01      	ldr	r6, [sp, #4]
    1b8e:	0030      	movs	r0, r6
    1b90:	47a8      	blx	r5
    1b92:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1b94:	0030      	movs	r0, r6
    1b96:	4b09      	ldr	r3, [pc, #36]	; (1bbc <Ft_Gpu_CoCmd_Keys+0xa0>)
    1b98:	4798      	blx	r3
    1b9a:	0021      	movs	r1, r4
    1b9c:	0030      	movs	r0, r6
    1b9e:	4b08      	ldr	r3, [pc, #32]	; (1bc0 <Ft_Gpu_CoCmd_Keys+0xa4>)
    1ba0:	4798      	blx	r3
    1ba2:	b003      	add	sp, #12
    1ba4:	bc3c      	pop	{r2, r3, r4, r5}
    1ba6:	4690      	mov	r8, r2
    1ba8:	4699      	mov	r9, r3
    1baa:	46a2      	mov	sl, r4
    1bac:	46ab      	mov	fp, r5
    1bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bb0:	00005179 	.word	0x00005179
    1bb4:	00001839 	.word	0x00001839
    1bb8:	00001821 	.word	0x00001821
    1bbc:	0000182d 	.word	0x0000182d
    1bc0:	00001859 	.word	0x00001859

00001bc4 <Ft_Gpu_CoCmd_Dlstart>:
    1bc4:	b510      	push	{r4, lr}
    1bc6:	0004      	movs	r4, r0
    1bc8:	2104      	movs	r1, #4
    1bca:	4b05      	ldr	r3, [pc, #20]	; (1be0 <Ft_Gpu_CoCmd_Dlstart+0x1c>)
    1bcc:	4798      	blx	r3
    1bce:	4905      	ldr	r1, [pc, #20]	; (1be4 <Ft_Gpu_CoCmd_Dlstart+0x20>)
    1bd0:	0020      	movs	r0, r4
    1bd2:	4b05      	ldr	r3, [pc, #20]	; (1be8 <Ft_Gpu_CoCmd_Dlstart+0x24>)
    1bd4:	4798      	blx	r3
    1bd6:	2104      	movs	r1, #4
    1bd8:	0020      	movs	r0, r4
    1bda:	4b04      	ldr	r3, [pc, #16]	; (1bec <Ft_Gpu_CoCmd_Dlstart+0x28>)
    1bdc:	4798      	blx	r3
    1bde:	bd10      	pop	{r4, pc}
    1be0:	00001839 	.word	0x00001839
    1be4:	ffffff00 	.word	0xffffff00
    1be8:	00001821 	.word	0x00001821
    1bec:	00001859 	.word	0x00001859

00001bf0 <Ft_Gpu_Hal_Open>:
	return true;
}


ft_bool_t Ft_Gpu_Hal_Open(Ft_Gpu_Hal_Context_t *host)
{
    1bf0:	b510      	push	{r4, lr}
     * the pinmux settings and the SPI init, so it's all done
     * in Ft_Gpu_Hal_Init().
     */
    
    // init current write buffer to zero, since we're just starting up
	host->ft_cmd_fifo_wp = host->ft_dl_buff_wp = 0;
    1bf2:	2200      	movs	r2, #0
    1bf4:	2300      	movs	r3, #0
    1bf6:	8142      	strh	r2, [r0, #10]
    1bf8:	8102      	strh	r2, [r0, #8]
    // by default ft800/801/810/811 goes with single dummy byte for read
	host->spinumdummy = 1;
    1bfa:	3201      	adds	r2, #1
    1bfc:	7542      	strb	r2, [r0, #21]
    // technically one channel, but zero for how the FT library does things
	host->spichannel = 0;
    1bfe:	7503      	strb	r3, [r0, #20]
    // indicate it's ready to go
	host->status = FT_GPU_HAL_OPENED;
    1c00:	7303      	strb	r3, [r0, #12]

    lcd_set_ft_host_ptr(host);
    1c02:	4b02      	ldr	r3, [pc, #8]	; (1c0c <Ft_Gpu_Hal_Open+0x1c>)
    1c04:	4798      	blx	r3

	return true;
}
    1c06:	2001      	movs	r0, #1
    1c08:	bd10      	pop	{r4, pc}
    1c0a:	46c0      	nop			; (mov r8, r8)
    1c0c:	00003901 	.word	0x00003901

00001c10 <Ft_Gpu_Hal_StartTransfer>:
}


/*The APIs for reading/writing transfer continuously only with small buffer system*/
ft_void_t  Ft_Gpu_Hal_StartTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint32_t addr)
{
    1c10:	b510      	push	{r4, lr}
    1c12:	0004      	movs	r4, r0
    /* determine if it's a read or write. This affects the preamble send to the
     * LCD (preamble = direction bits and address). */
	if (FT_GPU_READ == rw)
    1c14:	2900      	cmp	r1, #0
    1c16:	d006      	beq.n	1c26 <Ft_Gpu_Hal_StartTransfer+0x16>
		host->status = FT_GPU_HAL_READING;
	}
    else
    {
        // begin a write transfer
	    lcd_start_xfer(addr, WRT);
    1c18:	2101      	movs	r1, #1
    1c1a:	0010      	movs	r0, r2
    1c1c:	4b05      	ldr	r3, [pc, #20]	; (1c34 <Ft_Gpu_Hal_StartTransfer+0x24>)
    1c1e:	4798      	blx	r3
    
		host->status = FT_GPU_HAL_WRITING;
    1c20:	2302      	movs	r3, #2
    1c22:	7323      	strb	r3, [r4, #12]
	}
}
    1c24:	bd10      	pop	{r4, pc}
        lcd_start_xfer(addr, READ);
    1c26:	0010      	movs	r0, r2
    1c28:	4b02      	ldr	r3, [pc, #8]	; (1c34 <Ft_Gpu_Hal_StartTransfer+0x24>)
    1c2a:	4798      	blx	r3
		host->status = FT_GPU_HAL_READING;
    1c2c:	2301      	movs	r3, #1
    1c2e:	7323      	strb	r3, [r4, #12]
    1c30:	e7f8      	b.n	1c24 <Ft_Gpu_Hal_StartTransfer+0x14>
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	0000357d 	.word	0x0000357d

00001c38 <Ft_Gpu_Hal_StartCmdTransfer>:


/*The APIs for writing transfer continuously only*/
ft_void_t  Ft_Gpu_Hal_StartCmdTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint16_t count)
{
    1c38:	b510      	push	{r4, lr}
    // RAM_CMD = 0x308000
    // starting a transfer = sending preamble (read/write bits and address)
	Ft_Gpu_Hal_StartTransfer(host,rw,host->ft_cmd_fifo_wp + RAM_CMD);
    1c3a:	8902      	ldrh	r2, [r0, #8]
    1c3c:	23c2      	movs	r3, #194	; 0xc2
    1c3e:	039b      	lsls	r3, r3, #14
    1c40:	469c      	mov	ip, r3
    1c42:	4462      	add	r2, ip
    1c44:	4b01      	ldr	r3, [pc, #4]	; (1c4c <Ft_Gpu_Hal_StartCmdTransfer+0x14>)
    1c46:	4798      	blx	r3
}
    1c48:	bd10      	pop	{r4, pc}
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	00001c11 	.word	0x00001c11

00001c50 <Ft_Gpu_Hal_Transfer8>:
    Ft_Gpu_Hal_Transfer8(host,0);
}


ft_uint8_t Ft_Gpu_Hal_Transfer8(Ft_Gpu_Hal_Context_t *host, ft_uint8_t value)
{
    1c50:	b500      	push	{lr}
    1c52:	b085      	sub	sp, #20
    1c54:	466b      	mov	r3, sp
    1c56:	71d9      	strb	r1, [r3, #7]
    ft_uint8_t read_byte = 0;
    1c58:	2200      	movs	r2, #0
    1c5a:	230f      	movs	r3, #15
    1c5c:	446b      	add	r3, sp
    1c5e:	701a      	strb	r2, [r3, #0]
    
    // transmit or receive a byte
    if(host->status == FT_GPU_HAL_WRITING)
    1c60:	7b03      	ldrb	r3, [r0, #12]
    1c62:	2b02      	cmp	r3, #2
    1c64:	d009      	beq.n	1c7a <Ft_Gpu_Hal_Transfer8+0x2a>
        lcd_host_write(&value, 1);
    else
        lcd_host_read(&read_byte, 1);
    1c66:	2101      	movs	r1, #1
    1c68:	200f      	movs	r0, #15
    1c6a:	4468      	add	r0, sp
    1c6c:	4b06      	ldr	r3, [pc, #24]	; (1c88 <Ft_Gpu_Hal_Transfer8+0x38>)
    1c6e:	4798      	blx	r3
    
    return read_byte;
    1c70:	230f      	movs	r3, #15
    1c72:	446b      	add	r3, sp
    1c74:	7818      	ldrb	r0, [r3, #0]
}
    1c76:	b005      	add	sp, #20
    1c78:	bd00      	pop	{pc}
        lcd_host_write(&value, 1);
    1c7a:	2101      	movs	r1, #1
    1c7c:	466b      	mov	r3, sp
    1c7e:	1dd8      	adds	r0, r3, #7
    1c80:	4b02      	ldr	r3, [pc, #8]	; (1c8c <Ft_Gpu_Hal_Transfer8+0x3c>)
    1c82:	4798      	blx	r3
    1c84:	e7f4      	b.n	1c70 <Ft_Gpu_Hal_Transfer8+0x20>
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	00003621 	.word	0x00003621
    1c8c:	00003699 	.word	0x00003699

00001c90 <Ft_Gpu_Hal_TransferString>:
{
    1c90:	b570      	push	{r4, r5, r6, lr}
    1c92:	0005      	movs	r5, r0
    1c94:	000e      	movs	r6, r1
    ft_uint16_t length = strlen((const char*) string);
    1c96:	0008      	movs	r0, r1
    1c98:	4b09      	ldr	r3, [pc, #36]	; (1cc0 <Ft_Gpu_Hal_TransferString+0x30>)
    1c9a:	4798      	blx	r3
    1c9c:	b280      	uxth	r0, r0
    while(length--)
    1c9e:	e005      	b.n	1cac <Ft_Gpu_Hal_TransferString+0x1c>
       Ft_Gpu_Hal_Transfer8(host, *string);
    1ca0:	7831      	ldrb	r1, [r6, #0]
    1ca2:	0028      	movs	r0, r5
    1ca4:	4b07      	ldr	r3, [pc, #28]	; (1cc4 <Ft_Gpu_Hal_TransferString+0x34>)
    1ca6:	4798      	blx	r3
       string ++;
    1ca8:	3601      	adds	r6, #1
    while(length--)
    1caa:	0020      	movs	r0, r4
    1cac:	1e44      	subs	r4, r0, #1
    1cae:	b2a4      	uxth	r4, r4
    1cb0:	2800      	cmp	r0, #0
    1cb2:	d1f5      	bne.n	1ca0 <Ft_Gpu_Hal_TransferString+0x10>
    Ft_Gpu_Hal_Transfer8(host,0);
    1cb4:	2100      	movs	r1, #0
    1cb6:	0028      	movs	r0, r5
    1cb8:	4b02      	ldr	r3, [pc, #8]	; (1cc4 <Ft_Gpu_Hal_TransferString+0x34>)
    1cba:	4798      	blx	r3
}
    1cbc:	bd70      	pop	{r4, r5, r6, pc}
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	00005179 	.word	0x00005179
    1cc4:	00001c51 	.word	0x00001c51

00001cc8 <Ft_Gpu_Hal_Transfer16>:


ft_uint16_t Ft_Gpu_Hal_Transfer16(Ft_Gpu_Hal_Context_t *host, ft_uint16_t value)
{
    1cc8:	b570      	push	{r4, r5, r6, lr}
    1cca:	0004      	movs	r4, r0
    1ccc:	000d      	movs	r5, r1
	ft_uint16_t retVal = 0;

    // transmit or receive two bytes
    if (host->status == FT_GPU_HAL_WRITING)
    1cce:	7b03      	ldrb	r3, [r0, #12]
    1cd0:	2b02      	cmp	r3, #2
    1cd2:	d00a      	beq.n	1cea <Ft_Gpu_Hal_Transfer16+0x22>
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer8(host,0);
    1cd4:	2100      	movs	r1, #0
    1cd6:	4d09      	ldr	r5, [pc, #36]	; (1cfc <Ft_Gpu_Hal_Transfer16+0x34>)
    1cd8:	47a8      	blx	r5
    1cda:	0006      	movs	r6, r0
		retVal |= (ft_uint16_t)Ft_Gpu_Hal_Transfer8(host,0) << 8;
    1cdc:	2100      	movs	r1, #0
    1cde:	0020      	movs	r0, r4
    1ce0:	47a8      	blx	r5
    1ce2:	0200      	lsls	r0, r0, #8
    1ce4:	4330      	orrs	r0, r6
    1ce6:	b280      	uxth	r0, r0
	}

	return retVal;
}
    1ce8:	bd70      	pop	{r4, r5, r6, pc}
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
    1cea:	b2c9      	uxtb	r1, r1
    1cec:	4e03      	ldr	r6, [pc, #12]	; (1cfc <Ft_Gpu_Hal_Transfer16+0x34>)
    1cee:	47b0      	blx	r6
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
    1cf0:	0a29      	lsrs	r1, r5, #8
    1cf2:	0020      	movs	r0, r4
    1cf4:	47b0      	blx	r6
	ft_uint16_t retVal = 0;
    1cf6:	2000      	movs	r0, #0
    1cf8:	e7f6      	b.n	1ce8 <Ft_Gpu_Hal_Transfer16+0x20>
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	00001c51 	.word	0x00001c51

00001d00 <Ft_Gpu_Hal_Transfer32>:


ft_uint32_t Ft_Gpu_Hal_Transfer32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t value)
{
    1d00:	b570      	push	{r4, r5, r6, lr}
    1d02:	0004      	movs	r4, r0
    1d04:	000d      	movs	r5, r1
	ft_uint32_t retVal = 0;
    
    // transmit or receive four bytes
	if (host->status == FT_GPU_HAL_WRITING)
    1d06:	7b03      	ldrb	r3, [r0, #12]
    1d08:	2b02      	cmp	r3, #2
    1d0a:	d009      	beq.n	1d20 <Ft_Gpu_Hal_Transfer32+0x20>
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer16(host,0);
    1d0c:	2100      	movs	r1, #0
    1d0e:	4e08      	ldr	r6, [pc, #32]	; (1d30 <Ft_Gpu_Hal_Transfer32+0x30>)
    1d10:	47b0      	blx	r6
    1d12:	0005      	movs	r5, r0
		retVal |= (ft_uint32_t)Ft_Gpu_Hal_Transfer16(host,0) << 16;
    1d14:	2100      	movs	r1, #0
    1d16:	0020      	movs	r0, r4
    1d18:	47b0      	blx	r6
    1d1a:	0400      	lsls	r0, r0, #16
    1d1c:	4328      	orrs	r0, r5
	}
    
	return retVal;
}
    1d1e:	bd70      	pop	{r4, r5, r6, pc}
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
    1d20:	b289      	uxth	r1, r1
    1d22:	4e03      	ldr	r6, [pc, #12]	; (1d30 <Ft_Gpu_Hal_Transfer32+0x30>)
    1d24:	47b0      	blx	r6
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
    1d26:	0c29      	lsrs	r1, r5, #16
    1d28:	0020      	movs	r0, r4
    1d2a:	47b0      	blx	r6
	ft_uint32_t retVal = 0;
    1d2c:	2000      	movs	r0, #0
    1d2e:	e7f6      	b.n	1d1e <Ft_Gpu_Hal_Transfer32+0x1e>
    1d30:	00001cc9 	.word	0x00001cc9

00001d34 <Ft_Gpu_Hal_EndTransfer>:


ft_void_t Ft_Gpu_Hal_EndTransfer(Ft_Gpu_Hal_Context_t *host)
{
    1d34:	b510      	push	{r4, lr}
    1d36:	0004      	movs	r4, r0
    // deselect the slave (let slave CS float high for SIM System)
    lcd_stop_xfer();
    1d38:	4b02      	ldr	r3, [pc, #8]	; (1d44 <Ft_Gpu_Hal_EndTransfer+0x10>)
    1d3a:	4798      	blx	r3
    
	host->status = FT_GPU_HAL_OPENED;
    1d3c:	2300      	movs	r3, #0
    1d3e:	7323      	strb	r3, [r4, #12]
}
    1d40:	bd10      	pop	{r4, pc}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	00003605 	.word	0x00003605

00001d48 <Ft_Gpu_Hal_Rd8>:


ft_uint8_t Ft_Gpu_Hal_Rd8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    1d48:	b570      	push	{r4, r5, r6, lr}
    1d4a:	0004      	movs	r4, r0
    1d4c:	000a      	movs	r2, r1
	ft_uint8_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    1d4e:	2100      	movs	r1, #0
    1d50:	4b05      	ldr	r3, [pc, #20]	; (1d68 <Ft_Gpu_Hal_Rd8+0x20>)
    1d52:	4798      	blx	r3
    
    // read a byte
	value = Ft_Gpu_Hal_Transfer8(host,0);
    1d54:	2100      	movs	r1, #0
    1d56:	0020      	movs	r0, r4
    1d58:	4b04      	ldr	r3, [pc, #16]	; (1d6c <Ft_Gpu_Hal_Rd8+0x24>)
    1d5a:	4798      	blx	r3
    1d5c:	0005      	movs	r5, r0

    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1d5e:	0020      	movs	r0, r4
    1d60:	4b03      	ldr	r3, [pc, #12]	; (1d70 <Ft_Gpu_Hal_Rd8+0x28>)
    1d62:	4798      	blx	r3
    
	return value;
}
    1d64:	0028      	movs	r0, r5
    1d66:	bd70      	pop	{r4, r5, r6, pc}
    1d68:	00001c11 	.word	0x00001c11
    1d6c:	00001c51 	.word	0x00001c51
    1d70:	00001d35 	.word	0x00001d35

00001d74 <Ft_Gpu_Hal_Rd16>:


ft_uint16_t Ft_Gpu_Hal_Rd16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    1d74:	b570      	push	{r4, r5, r6, lr}
    1d76:	0004      	movs	r4, r0
    1d78:	000a      	movs	r2, r1
	ft_uint16_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    1d7a:	2100      	movs	r1, #0
    1d7c:	4b05      	ldr	r3, [pc, #20]	; (1d94 <Ft_Gpu_Hal_Rd16+0x20>)
    1d7e:	4798      	blx	r3
    
    // read 2 bytes
	value = Ft_Gpu_Hal_Transfer16(host,0);
    1d80:	2100      	movs	r1, #0
    1d82:	0020      	movs	r0, r4
    1d84:	4b04      	ldr	r3, [pc, #16]	; (1d98 <Ft_Gpu_Hal_Rd16+0x24>)
    1d86:	4798      	blx	r3
    1d88:	0005      	movs	r5, r0
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1d8a:	0020      	movs	r0, r4
    1d8c:	4b03      	ldr	r3, [pc, #12]	; (1d9c <Ft_Gpu_Hal_Rd16+0x28>)
    1d8e:	4798      	blx	r3
    
	return value;
}
    1d90:	0028      	movs	r0, r5
    1d92:	bd70      	pop	{r4, r5, r6, pc}
    1d94:	00001c11 	.word	0x00001c11
    1d98:	00001cc9 	.word	0x00001cc9
    1d9c:	00001d35 	.word	0x00001d35

00001da0 <Ft_Gpu_Hal_Wr8>:
	return value;
}


ft_void_t Ft_Gpu_Hal_Wr8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint8_t v)
{	
    1da0:	b570      	push	{r4, r5, r6, lr}
    1da2:	0004      	movs	r4, r0
    1da4:	0015      	movs	r5, r2
    
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1da6:	000a      	movs	r2, r1
    1da8:	2101      	movs	r1, #1
    1daa:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <Ft_Gpu_Hal_Wr8+0x20>)
    1dac:	4798      	blx	r3
    
    // read a byte
	Ft_Gpu_Hal_Transfer8(host,v);
    1dae:	0029      	movs	r1, r5
    1db0:	0020      	movs	r0, r4
    1db2:	4b04      	ldr	r3, [pc, #16]	; (1dc4 <Ft_Gpu_Hal_Wr8+0x24>)
    1db4:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1db6:	0020      	movs	r0, r4
    1db8:	4b03      	ldr	r3, [pc, #12]	; (1dc8 <Ft_Gpu_Hal_Wr8+0x28>)
    1dba:	4798      	blx	r3
}
    1dbc:	bd70      	pop	{r4, r5, r6, pc}
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	00001c11 	.word	0x00001c11
    1dc4:	00001c51 	.word	0x00001c51
    1dc8:	00001d35 	.word	0x00001d35

00001dcc <Ft_Gpu_Hal_Wr16>:


ft_void_t Ft_Gpu_Hal_Wr16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint16_t v)
{
    1dcc:	b570      	push	{r4, r5, r6, lr}
    1dce:	0004      	movs	r4, r0
    1dd0:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1dd2:	000a      	movs	r2, r1
    1dd4:	2101      	movs	r1, #1
    1dd6:	4b05      	ldr	r3, [pc, #20]	; (1dec <Ft_Gpu_Hal_Wr16+0x20>)
    1dd8:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer16(host,v);
    1dda:	0029      	movs	r1, r5
    1ddc:	0020      	movs	r0, r4
    1dde:	4b04      	ldr	r3, [pc, #16]	; (1df0 <Ft_Gpu_Hal_Wr16+0x24>)
    1de0:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1de2:	0020      	movs	r0, r4
    1de4:	4b03      	ldr	r3, [pc, #12]	; (1df4 <Ft_Gpu_Hal_Wr16+0x28>)
    1de6:	4798      	blx	r3
}
    1de8:	bd70      	pop	{r4, r5, r6, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00001c11 	.word	0x00001c11
    1df0:	00001cc9 	.word	0x00001cc9
    1df4:	00001d35 	.word	0x00001d35

00001df8 <Ft_Gpu_Hal_Wr32>:


ft_void_t Ft_Gpu_Hal_Wr32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint32_t v)
{
    1df8:	b570      	push	{r4, r5, r6, lr}
    1dfa:	0004      	movs	r4, r0
    1dfc:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1dfe:	000a      	movs	r2, r1
    1e00:	2101      	movs	r1, #1
    1e02:	4b05      	ldr	r3, [pc, #20]	; (1e18 <Ft_Gpu_Hal_Wr32+0x20>)
    1e04:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer32(host,v);
    1e06:	0029      	movs	r1, r5
    1e08:	0020      	movs	r0, r4
    1e0a:	4b04      	ldr	r3, [pc, #16]	; (1e1c <Ft_Gpu_Hal_Wr32+0x24>)
    1e0c:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1e0e:	0020      	movs	r0, r4
    1e10:	4b03      	ldr	r3, [pc, #12]	; (1e20 <Ft_Gpu_Hal_Wr32+0x28>)
    1e12:	4798      	blx	r3
}
    1e14:	bd70      	pop	{r4, r5, r6, pc}
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	00001c11 	.word	0x00001c11
    1e1c:	00001d01 	.word	0x00001d01
    1e20:	00001d35 	.word	0x00001d35

00001e24 <Ft_Gpu_Hal_Updatecmdfifo>:
	lcd_host_cmd((cmd & 0xFF), ((cmd >> 8) & 0xFF));
}


ft_void_t Ft_Gpu_Hal_Updatecmdfifo(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    1e24:	b510      	push	{r4, lr}
	host->ft_cmd_fifo_wp  = (host->ft_cmd_fifo_wp + count) & 4095;
    1e26:	8902      	ldrh	r2, [r0, #8]
    1e28:	1852      	adds	r2, r2, r1
    1e2a:	0512      	lsls	r2, r2, #20
    1e2c:	0d12      	lsrs	r2, r2, #20

	//4 byte alignment
	host->ft_cmd_fifo_wp = (host->ft_cmd_fifo_wp + 3) & 0xffc;
    1e2e:	3203      	adds	r2, #3
    1e30:	4903      	ldr	r1, [pc, #12]	; (1e40 <Ft_Gpu_Hal_Updatecmdfifo+0x1c>)
    1e32:	400a      	ands	r2, r1
    1e34:	8102      	strh	r2, [r0, #8]
    
	Ft_Gpu_Hal_Wr16(host,REG_CMD_WRITE,host->ft_cmd_fifo_wp);
    1e36:	4903      	ldr	r1, [pc, #12]	; (1e44 <Ft_Gpu_Hal_Updatecmdfifo+0x20>)
    1e38:	4b03      	ldr	r3, [pc, #12]	; (1e48 <Ft_Gpu_Hal_Updatecmdfifo+0x24>)
    1e3a:	4798      	blx	r3
}
    1e3c:	bd10      	pop	{r4, pc}
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	00000ffc 	.word	0x00000ffc
    1e44:	003020fc 	.word	0x003020fc
    1e48:	00001dcd 	.word	0x00001dcd

00001e4c <Ft_Gpu_Cmdfifo_Freespace>:


ft_uint16_t Ft_Gpu_Cmdfifo_Freespace(Ft_Gpu_Hal_Context_t *host)
{
    1e4c:	b510      	push	{r4, lr}
    /* calculate the free space for the coprocessor FIFO. Refer to pg 150 in
     * the FT81X_Series_Programmers_Guide datasheet */
	ft_uint16_t fullness,retval;

    // REG_CMD_READ = 0x3020F8
	fullness = (host->ft_cmd_fifo_wp - Ft_Gpu_Hal_Rd16(host,REG_CMD_READ)) & 4095;
    1e4e:	8904      	ldrh	r4, [r0, #8]
    1e50:	4904      	ldr	r1, [pc, #16]	; (1e64 <Ft_Gpu_Cmdfifo_Freespace+0x18>)
    1e52:	4b05      	ldr	r3, [pc, #20]	; (1e68 <Ft_Gpu_Cmdfifo_Freespace+0x1c>)
    1e54:	4798      	blx	r3
    1e56:	1a24      	subs	r4, r4, r0
    1e58:	0524      	lsls	r4, r4, #20
    1e5a:	0d24      	lsrs	r4, r4, #20
    
	retval = (FT_CMD_FIFO_SIZE - 4) - fullness;
    1e5c:	4803      	ldr	r0, [pc, #12]	; (1e6c <Ft_Gpu_Cmdfifo_Freespace+0x20>)
    1e5e:	1b00      	subs	r0, r0, r4
    1e60:	b280      	uxth	r0, r0
    
	return (retval);
}
    1e62:	bd10      	pop	{r4, pc}
    1e64:	003020f8 	.word	0x003020f8
    1e68:	00001d75 	.word	0x00001d75
    1e6c:	00000ffc 	.word	0x00000ffc

00001e70 <Ft_Gpu_Hal_CheckCmdBuffer>:
}
#endif


ft_void_t Ft_Gpu_Hal_CheckCmdBuffer(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
    1e72:	0005      	movs	r5, r0
    1e74:	000c      	movs	r4, r1
   ft_uint16_t getfreespace;
   do{
       // This "fixme" was here in the original code.
	   // FIXME: This can get stuck, non-even is returned in case of coprocessor issue
        getfreespace = Ft_Gpu_Cmdfifo_Freespace(host);
    1e76:	0028      	movs	r0, r5
    1e78:	4b02      	ldr	r3, [pc, #8]	; (1e84 <Ft_Gpu_Hal_CheckCmdBuffer+0x14>)
    1e7a:	4798      	blx	r3
        
   // loop until there is free space, else break if there is enough free space
   }while(getfreespace < count);
    1e7c:	42a0      	cmp	r0, r4
    1e7e:	d3fa      	bcc.n	1e76 <Ft_Gpu_Hal_CheckCmdBuffer+0x6>
}
    1e80:	bd70      	pop	{r4, r5, r6, pc}
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	00001e4d 	.word	0x00001e4d

00001e88 <Ft_Gpu_Hal_WaitCmdfifo_empty>:


ft_void_t Ft_Gpu_Hal_WaitCmdfifo_empty(Ft_Gpu_Hal_Context_t *host)
{
    1e88:	b570      	push	{r4, r5, r6, lr}
    1e8a:	0005      	movs	r5, r0
   /* wait for the FIFO read and write pointers to equal each other.
    * This is the naive way to do it, refer to pg 154 in 
    * the FT81X_Series_Programmers_Guide datasheet */
   while(Ft_Gpu_Hal_Rd16(host,REG_CMD_READ) != Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE));
    1e8c:	4907      	ldr	r1, [pc, #28]	; (1eac <Ft_Gpu_Hal_WaitCmdfifo_empty+0x24>)
    1e8e:	0028      	movs	r0, r5
    1e90:	4c07      	ldr	r4, [pc, #28]	; (1eb0 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    1e92:	47a0      	blx	r4
    1e94:	0006      	movs	r6, r0
    1e96:	4907      	ldr	r1, [pc, #28]	; (1eb4 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    1e98:	0028      	movs	r0, r5
    1e9a:	47a0      	blx	r4
    1e9c:	4286      	cmp	r6, r0
    1e9e:	d1f5      	bne.n	1e8c <Ft_Gpu_Hal_WaitCmdfifo_empty+0x4>
   
   host->ft_cmd_fifo_wp = Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE);
    1ea0:	4904      	ldr	r1, [pc, #16]	; (1eb4 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    1ea2:	0028      	movs	r0, r5
    1ea4:	4b02      	ldr	r3, [pc, #8]	; (1eb0 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    1ea6:	4798      	blx	r3
    1ea8:	8128      	strh	r0, [r5, #8]
}
    1eaa:	bd70      	pop	{r4, r5, r6, pc}
    1eac:	003020f8 	.word	0x003020f8
    1eb0:	00001d75 	.word	0x00001d75
    1eb4:	003020fc 	.word	0x003020fc

00001eb8 <Ft_Gpu_Hal_WrCmd32>:
    host->ft_cmd_fifo_wp = 0;
}


ft_void_t Ft_Gpu_Hal_WrCmd32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t cmd)
{
    1eb8:	b570      	push	{r4, r5, r6, lr}
    1eba:	0004      	movs	r4, r0
    1ebc:	000d      	movs	r5, r1
    Ft_Gpu_Hal_CheckCmdBuffer(host, sizeof(cmd));
    1ebe:	2104      	movs	r1, #4
    1ec0:	4b07      	ldr	r3, [pc, #28]	; (1ee0 <Ft_Gpu_Hal_WrCmd32+0x28>)
    1ec2:	4798      	blx	r3
    
    Ft_Gpu_Hal_Wr32(host, RAM_CMD + host->ft_cmd_fifo_wp, cmd);
    1ec4:	8921      	ldrh	r1, [r4, #8]
    1ec6:	23c2      	movs	r3, #194	; 0xc2
    1ec8:	039b      	lsls	r3, r3, #14
    1eca:	469c      	mov	ip, r3
    1ecc:	4461      	add	r1, ip
    1ece:	002a      	movs	r2, r5
    1ed0:	0020      	movs	r0, r4
    1ed2:	4b04      	ldr	r3, [pc, #16]	; (1ee4 <Ft_Gpu_Hal_WrCmd32+0x2c>)
    1ed4:	4798      	blx	r3
    
    Ft_Gpu_Hal_Updatecmdfifo(host, sizeof(cmd));
    1ed6:	2104      	movs	r1, #4
    1ed8:	0020      	movs	r0, r4
    1eda:	4b03      	ldr	r3, [pc, #12]	; (1ee8 <Ft_Gpu_Hal_WrCmd32+0x30>)
    1edc:	4798      	blx	r3
}
    1ede:	bd70      	pop	{r4, r5, r6, pc}
    1ee0:	00001e71 	.word	0x00001e71
    1ee4:	00001df9 	.word	0x00001df9
    1ee8:	00001e25 	.word	0x00001e25

00001eec <month31>:
 * Return Values(s) : int
 * Description      : Check if the month has 31 days. Return 1 if yes, else
 *  0 if no
 */
int month31(char month){
	if(month==1 || month==3 || month==5 || month==7 || month==8 || \
    1eec:	2801      	cmp	r0, #1
    1eee:	d00f      	beq.n	1f10 <month31+0x24>
    1ef0:	2803      	cmp	r0, #3
    1ef2:	d00f      	beq.n	1f14 <month31+0x28>
    1ef4:	2805      	cmp	r0, #5
    1ef6:	d00f      	beq.n	1f18 <month31+0x2c>
    1ef8:	2807      	cmp	r0, #7
    1efa:	d00f      	beq.n	1f1c <month31+0x30>
    1efc:	2808      	cmp	r0, #8
    1efe:	d00f      	beq.n	1f20 <month31+0x34>
    1f00:	280a      	cmp	r0, #10
    1f02:	d00f      	beq.n	1f24 <month31+0x38>
        month==10 || month==12)
    1f04:	280c      	cmp	r0, #12
    1f06:	d001      	beq.n	1f0c <month31+0x20>
		return 1;
	else
		return 0;
    1f08:	2000      	movs	r0, #0
}//end month31
    1f0a:	4770      	bx	lr
		return 1;
    1f0c:	380b      	subs	r0, #11
    1f0e:	e7fc      	b.n	1f0a <month31+0x1e>
    1f10:	2001      	movs	r0, #1
    1f12:	e7fa      	b.n	1f0a <month31+0x1e>
    1f14:	2001      	movs	r0, #1
    1f16:	e7f8      	b.n	1f0a <month31+0x1e>
    1f18:	2001      	movs	r0, #1
    1f1a:	e7f6      	b.n	1f0a <month31+0x1e>
    1f1c:	2001      	movs	r0, #1
    1f1e:	e7f4      	b.n	1f0a <month31+0x1e>
    1f20:	2001      	movs	r0, #1
    1f22:	e7f2      	b.n	1f0a <month31+0x1e>
    1f24:	2001      	movs	r0, #1
    1f26:	e7f0      	b.n	1f0a <month31+0x1e>

00001f28 <printTime>:
/* Function Name    : printTime
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Get the current time and date, display it on the screen
 */
void printTime(){
    1f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f2a:	46d6      	mov	lr, sl
    1f2c:	464f      	mov	r7, r9
    1f2e:	4646      	mov	r6, r8
    1f30:	b5c0      	push	{r6, r7, lr}
    1f32:	b08a      	sub	sp, #40	; 0x28
	int fstYloc = disHei - 60, sndYloc = disHei - 30;
	char buff[32];
	//get current time and date
	rtc_calendar_get_time(&rtc_instance, &time);
    1f34:	4c1b      	ldr	r4, [pc, #108]	; (1fa4 <printTime+0x7c>)
    1f36:	0021      	movs	r1, r4
    1f38:	481b      	ldr	r0, [pc, #108]	; (1fa8 <printTime+0x80>)
    1f3a:	4b1c      	ldr	r3, [pc, #112]	; (1fac <printTime+0x84>)
    1f3c:	4798      	blx	r3
	//put together a string for time and send to display
	snprintf(buff, 32, "%02d:%02d:%02d", time.hour, time.minute, time.second);
    1f3e:	78a3      	ldrb	r3, [r4, #2]
    1f40:	7862      	ldrb	r2, [r4, #1]
    1f42:	7821      	ldrb	r1, [r4, #0]
    1f44:	ad02      	add	r5, sp, #8
    1f46:	9101      	str	r1, [sp, #4]
    1f48:	9200      	str	r2, [sp, #0]
    1f4a:	4a19      	ldr	r2, [pc, #100]	; (1fb0 <printTime+0x88>)
    1f4c:	2120      	movs	r1, #32
    1f4e:	0028      	movs	r0, r5
    1f50:	4e18      	ldr	r6, [pc, #96]	; (1fb4 <printTime+0x8c>)
    1f52:	46b2      	mov	sl, r6
    1f54:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Text(phost, 10, fstYloc, font, 0, buff);
    1f56:	4b18      	ldr	r3, [pc, #96]	; (1fb8 <printTime+0x90>)
    1f58:	4699      	mov	r9, r3
    1f5a:	781b      	ldrb	r3, [r3, #0]
    1f5c:	4a17      	ldr	r2, [pc, #92]	; (1fbc <printTime+0x94>)
    1f5e:	4690      	mov	r8, r2
    1f60:	6810      	ldr	r0, [r2, #0]
    1f62:	9501      	str	r5, [sp, #4]
    1f64:	2700      	movs	r7, #0
    1f66:	9700      	str	r7, [sp, #0]
    1f68:	22d2      	movs	r2, #210	; 0xd2
    1f6a:	0052      	lsls	r2, r2, #1
    1f6c:	210a      	movs	r1, #10
    1f6e:	4e14      	ldr	r6, [pc, #80]	; (1fc0 <printTime+0x98>)
    1f70:	47b0      	blx	r6
	
	//put together a string for date and send to display
	snprintf(buff, 32, "%02d/%02d/%04d", time.month, time.day, time.year);
    1f72:	7963      	ldrb	r3, [r4, #5]
    1f74:	7922      	ldrb	r2, [r4, #4]
    1f76:	88e1      	ldrh	r1, [r4, #6]
    1f78:	9101      	str	r1, [sp, #4]
    1f7a:	9200      	str	r2, [sp, #0]
    1f7c:	4a11      	ldr	r2, [pc, #68]	; (1fc4 <printTime+0x9c>)
    1f7e:	2120      	movs	r1, #32
    1f80:	0028      	movs	r0, r5
    1f82:	47d0      	blx	sl
	Ft_Gpu_CoCmd_Text(phost, 10, sndYloc, font, 0, buff);
    1f84:	464b      	mov	r3, r9
    1f86:	781b      	ldrb	r3, [r3, #0]
    1f88:	4642      	mov	r2, r8
    1f8a:	6810      	ldr	r0, [r2, #0]
    1f8c:	9501      	str	r5, [sp, #4]
    1f8e:	9700      	str	r7, [sp, #0]
    1f90:	22e1      	movs	r2, #225	; 0xe1
    1f92:	0052      	lsls	r2, r2, #1
    1f94:	210a      	movs	r1, #10
    1f96:	47b0      	blx	r6
}//end printTime
    1f98:	b00a      	add	sp, #40	; 0x28
    1f9a:	bc1c      	pop	{r2, r3, r4}
    1f9c:	4690      	mov	r8, r2
    1f9e:	4699      	mov	r9, r3
    1fa0:	46a2      	mov	sl, r4
    1fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fa4:	2000075c 	.word	0x2000075c
    1fa8:	20000444 	.word	0x20000444
    1fac:	00000555 	.word	0x00000555
    1fb0:	00005a74 	.word	0x00005a74
    1fb4:	00005115 	.word	0x00005115
    1fb8:	20000009 	.word	0x20000009
    1fbc:	20000764 	.word	0x20000764
    1fc0:	00001875 	.word	0x00001875
    1fc4:	00005a84 	.word	0x00005a84

00001fc8 <play>:
/* Function Name    : play
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Play 3 consecutive beep at 660Hz when called
 */
void play(){
    1fc8:	b510      	push	{r4, lr}
	//set full volume
	Ft_Gpu_Hal_Wr8(phost,REG_VOL_SOUND,0x255);
    1fca:	4c0d      	ldr	r4, [pc, #52]	; (2000 <STACK_SIZE>)
    1fcc:	2255      	movs	r2, #85	; 0x55
    1fce:	490d      	ldr	r1, [pc, #52]	; (2004 <STACK_SIZE+0x4>)
    1fd0:	6820      	ldr	r0, [r4, #0]
    1fd2:	4b0d      	ldr	r3, [pc, #52]	; (2008 <STACK_SIZE+0x8>)
    1fd4:	4798      	blx	r3
	//set one single beet at 660Hz
	Ft_Gpu_Hal_Wr16(phost, REG_SOUND,  (73<< 8) | 0x10);
    1fd6:	6820      	ldr	r0, [r4, #0]
    1fd8:	4a0c      	ldr	r2, [pc, #48]	; (200c <STACK_SIZE+0xc>)
    1fda:	490d      	ldr	r1, [pc, #52]	; (2010 <STACK_SIZE+0x10>)
    1fdc:	4b0d      	ldr	r3, [pc, #52]	; (2014 <STACK_SIZE+0x14>)
    1fde:	4798      	blx	r3

	//play it 3 times delay 100ms inbetween
	int i;
	for (i=0; i < 3; i++){
    1fe0:	2400      	movs	r4, #0
    1fe2:	e009      	b.n	1ff8 <play+0x30>
		Ft_Gpu_Hal_Wr8(phost, REG_PLAY, 1);
    1fe4:	4b06      	ldr	r3, [pc, #24]	; (2000 <STACK_SIZE>)
    1fe6:	6818      	ldr	r0, [r3, #0]
    1fe8:	2201      	movs	r2, #1
    1fea:	490b      	ldr	r1, [pc, #44]	; (2018 <STACK_SIZE+0x18>)
    1fec:	4b06      	ldr	r3, [pc, #24]	; (2008 <STACK_SIZE+0x8>)
    1fee:	4798      	blx	r3
		delay_ms(100);
    1ff0:	2064      	movs	r0, #100	; 0x64
    1ff2:	4b0a      	ldr	r3, [pc, #40]	; (201c <STACK_SIZE+0x1c>)
    1ff4:	4798      	blx	r3
	for (i=0; i < 3; i++){
    1ff6:	3401      	adds	r4, #1
    1ff8:	2c02      	cmp	r4, #2
    1ffa:	ddf3      	ble.n	1fe4 <play+0x1c>
	}
}//end play
    1ffc:	bd10      	pop	{r4, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	20000764 	.word	0x20000764
    2004:	00302084 	.word	0x00302084
    2008:	00001da1 	.word	0x00001da1
    200c:	00004910 	.word	0x00004910
    2010:	00302088 	.word	0x00302088
    2014:	00001dcd 	.word	0x00001dcd
    2018:	0030208c 	.word	0x0030208c
    201c:	00000151 	.word	0x00000151

00002020 <drawTitle>:
/* Function Name    : drawTitle
 * Parameters       : char *title 
 * Return Values(s) : void
 * Description      : Draw the title to each screen based on title received
 */
void drawTitle(char *title){
    2020:	b5f0      	push	{r4, r5, r6, r7, lr}
    2022:	46ce      	mov	lr, r9
    2024:	4647      	mov	r7, r8
    2026:	b580      	push	{r7, lr}
    2028:	b085      	sub	sp, #20
    202a:	4681      	mov	r9, r0
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_XY(disWid/3,0));
    202c:	4c13      	ldr	r4, [pc, #76]	; (207c <drawTitle+0x5c>)
    202e:	4914      	ldr	r1, [pc, #80]	; (2080 <drawTitle+0x60>)
    2030:	6820      	ldr	r0, [r4, #0]
    2032:	4d14      	ldr	r5, [pc, #80]	; (2084 <drawTitle+0x64>)
    2034:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_SIZE((disWid*3/2), 50));
    2036:	4914      	ldr	r1, [pc, #80]	; (2088 <drawTitle+0x68>)
    2038:	6820      	ldr	r0, [r4, #0]
    203a:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Gradient(phost, disWid/3*2,0, 0x8B90FF, disWid/3*2, 50,0x2933FF);
    203c:	2685      	movs	r6, #133	; 0x85
    203e:	00b6      	lsls	r6, r6, #2
    2040:	6820      	ldr	r0, [r4, #0]
    2042:	4b12      	ldr	r3, [pc, #72]	; (208c <drawTitle+0x6c>)
    2044:	9302      	str	r3, [sp, #8]
    2046:	2332      	movs	r3, #50	; 0x32
    2048:	9301      	str	r3, [sp, #4]
    204a:	9600      	str	r6, [sp, #0]
    204c:	4b10      	ldr	r3, [pc, #64]	; (2090 <drawTitle+0x70>)
    204e:	2200      	movs	r2, #0
    2050:	0031      	movs	r1, r6
    2052:	4f10      	ldr	r7, [pc, #64]	; (2094 <drawTitle+0x74>)
    2054:	47b8      	blx	r7
//	Ft_Gpu_CoCmd_Gradient(phost, disWid/3,0, 0x2933FF, disWid, 50,0x8B90FF);
	Ft_Gpu_CoCmd_Text(phost, (disWid/3*2), 30, 30, OPT_CENTER, title);
    2056:	6820      	ldr	r0, [r4, #0]
    2058:	464b      	mov	r3, r9
    205a:	9301      	str	r3, [sp, #4]
    205c:	23c0      	movs	r3, #192	; 0xc0
    205e:	00db      	lsls	r3, r3, #3
    2060:	9300      	str	r3, [sp, #0]
    2062:	231e      	movs	r3, #30
    2064:	221e      	movs	r2, #30
    2066:	0031      	movs	r1, r6
    2068:	4e0b      	ldr	r6, [pc, #44]	; (2098 <drawTitle+0x78>)
    206a:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,1,1));
    206c:	6820      	ldr	r0, [r4, #0]
    206e:	490b      	ldr	r1, [pc, #44]	; (209c <drawTitle+0x7c>)
    2070:	47a8      	blx	r5
}//end drawTitle
    2072:	b005      	add	sp, #20
    2074:	bc0c      	pop	{r2, r3}
    2076:	4690      	mov	r8, r2
    2078:	4699      	mov	r9, r3
    207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    207c:	20000764 	.word	0x20000764
    2080:	1b085000 	.word	0x1b085000
    2084:	00001eb9 	.word	0x00001eb9
    2088:	1c4b0032 	.word	0x1c4b0032
    208c:	002933ff 	.word	0x002933ff
    2090:	008b90ff 	.word	0x008b90ff
    2094:	00001aa9 	.word	0x00001aa9
    2098:	00001875 	.word	0x00001875
    209c:	26000003 	.word	0x26000003

000020a0 <drawBack>:
/* Function Name    : drawBack
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Draw back button when called
 */
void drawBack(){
    20a0:	b510      	push	{r4, lr}
    20a2:	b084      	sub	sp, #16
	//assign tag value and draw button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(back));
    20a4:	4c0e      	ldr	r4, [pc, #56]	; (20e0 <drawBack+0x40>)
    20a6:	490f      	ldr	r1, [pc, #60]	; (20e4 <drawBack+0x44>)
    20a8:	6820      	ldr	r0, [r4, #0]
    20aa:	4b0f      	ldr	r3, [pc, #60]	; (20e8 <drawBack+0x48>)
    20ac:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    20ae:	6820      	ldr	r0, [r4, #0]
    20b0:	4b0e      	ldr	r3, [pc, #56]	; (20ec <drawBack+0x4c>)
    20b2:	781b      	ldrb	r3, [r3, #0]
    20b4:	4a0e      	ldr	r2, [pc, #56]	; (20f0 <drawBack+0x50>)
    20b6:	7812      	ldrb	r2, [r2, #0]
    20b8:	2a06      	cmp	r2, #6
    20ba:	d00d      	beq.n	20d8 <drawBack+0x38>
    20bc:	2100      	movs	r1, #0
    20be:	4a0d      	ldr	r2, [pc, #52]	; (20f4 <drawBack+0x54>)
    20c0:	9203      	str	r2, [sp, #12]
    20c2:	9102      	str	r1, [sp, #8]
    20c4:	9301      	str	r3, [sp, #4]
    20c6:	2335      	movs	r3, #53	; 0x35
    20c8:	9300      	str	r3, [sp, #0]
    20ca:	332f      	adds	r3, #47	; 0x2f
    20cc:	2200      	movs	r2, #0
    20ce:	2100      	movs	r1, #0
    20d0:	4c09      	ldr	r4, [pc, #36]	; (20f8 <drawBack+0x58>)
    20d2:	47a0      	blx	r4
}//end drawBack
    20d4:	b004      	add	sp, #16
    20d6:	bd10      	pop	{r4, pc}
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    20d8:	2180      	movs	r1, #128	; 0x80
    20da:	0049      	lsls	r1, r1, #1
    20dc:	e7ef      	b.n	20be <drawBack+0x1e>
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	20000764 	.word	0x20000764
    20e4:	03000006 	.word	0x03000006
    20e8:	00001eb9 	.word	0x00001eb9
    20ec:	20000009 	.word	0x20000009
    20f0:	200000f1 	.word	0x200000f1
    20f4:	000059d4 	.word	0x000059d4
    20f8:	00001989 	.word	0x00001989

000020fc <drawKeypad>:
/* Function Name    : drawKeypad
 * Parameters       : char pressed
 * Return Values(s) : void
 * Description      : Draw keypad and put effect on a key (if pressed)
 */
void drawKeypad(char pressed){
    20fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fe:	46c6      	mov	lr, r8
    2100:	b500      	push	{lr}
    2102:	b084      	sub	sp, #16
	//draw number from 1 to 9 
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.4, disWid*.3, 60, 29, pressed+48, "123");
    2104:	3030      	adds	r0, #48	; 0x30
    2106:	0005      	movs	r5, r0
    2108:	4c4a      	ldr	r4, [pc, #296]	; (2234 <drawKeypad+0x138>)
    210a:	6820      	ldr	r0, [r4, #0]
    210c:	4b4a      	ldr	r3, [pc, #296]	; (2238 <drawKeypad+0x13c>)
    210e:	9303      	str	r3, [sp, #12]
    2110:	9502      	str	r5, [sp, #8]
    2112:	231d      	movs	r3, #29
    2114:	4698      	mov	r8, r3
    2116:	9301      	str	r3, [sp, #4]
    2118:	273c      	movs	r7, #60	; 0x3c
    211a:	9700      	str	r7, [sp, #0]
    211c:	33d3      	adds	r3, #211	; 0xd3
    211e:	22c0      	movs	r2, #192	; 0xc0
    2120:	21f0      	movs	r1, #240	; 0xf0
    2122:	4e46      	ldr	r6, [pc, #280]	; (223c <drawKeypad+0x140>)
    2124:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.54, disWid*.3, 60, 29, pressed+48, "456");
    2126:	6820      	ldr	r0, [r4, #0]
    2128:	4b45      	ldr	r3, [pc, #276]	; (2240 <drawKeypad+0x144>)
    212a:	9303      	str	r3, [sp, #12]
    212c:	9502      	str	r5, [sp, #8]
    212e:	4643      	mov	r3, r8
    2130:	9301      	str	r3, [sp, #4]
    2132:	9700      	str	r7, [sp, #0]
    2134:	33d3      	adds	r3, #211	; 0xd3
    2136:	2204      	movs	r2, #4
    2138:	32ff      	adds	r2, #255	; 0xff
    213a:	21f0      	movs	r1, #240	; 0xf0
    213c:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.68, disWid*.3, 60, 29, pressed+48, "789");
    213e:	6820      	ldr	r0, [r4, #0]
    2140:	4b40      	ldr	r3, [pc, #256]	; (2244 <drawKeypad+0x148>)
    2142:	9303      	str	r3, [sp, #12]
    2144:	9502      	str	r5, [sp, #8]
    2146:	4643      	mov	r3, r8
    2148:	9301      	str	r3, [sp, #4]
    214a:	9700      	str	r7, [sp, #0]
    214c:	33d3      	adds	r3, #211	; 0xd3
    214e:	22a3      	movs	r2, #163	; 0xa3
    2150:	0052      	lsls	r2, r2, #1
    2152:	21f0      	movs	r1, #240	; 0xf0
    2154:	47b0      	blx	r6
	
	//draw '0' button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(zero));
    2156:	493c      	ldr	r1, [pc, #240]	; (2248 <drawKeypad+0x14c>)
    2158:	6820      	ldr	r0, [r4, #0]
    215a:	4b3c      	ldr	r3, [pc, #240]	; (224c <drawKeypad+0x150>)
    215c:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    215e:	6820      	ldr	r0, [r4, #0]
    2160:	4b3b      	ldr	r3, [pc, #236]	; (2250 <drawKeypad+0x154>)
    2162:	781b      	ldrb	r3, [r3, #0]
    2164:	2b30      	cmp	r3, #48	; 0x30
    2166:	d05b      	beq.n	2220 <drawKeypad+0x124>
    2168:	2300      	movs	r3, #0
    216a:	4a3a      	ldr	r2, [pc, #232]	; (2254 <drawKeypad+0x158>)
    216c:	9203      	str	r2, [sp, #12]
    216e:	9302      	str	r3, [sp, #8]
    2170:	231d      	movs	r3, #29
    2172:	9301      	str	r3, [sp, #4]
    2174:	331f      	adds	r3, #31
    2176:	9300      	str	r3, [sp, #0]
    2178:	3338      	adds	r3, #56	; 0x38
    217a:	228a      	movs	r2, #138	; 0x8a
    217c:	32ff      	adds	r2, #255	; 0xff
    217e:	21f0      	movs	r1, #240	; 0xf0
    2180:	4c35      	ldr	r4, [pc, #212]	; (2258 <drawKeypad+0x15c>)
    2182:	47a0      	blx	r4
	//draw delete button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(del));
    2184:	4c2b      	ldr	r4, [pc, #172]	; (2234 <drawKeypad+0x138>)
    2186:	4935      	ldr	r1, [pc, #212]	; (225c <drawKeypad+0x160>)
    2188:	6820      	ldr	r0, [r4, #0]
    218a:	4b30      	ldr	r3, [pc, #192]	; (224c <drawKeypad+0x150>)
    218c:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    218e:	6820      	ldr	r0, [r4, #0]
    2190:	4b2f      	ldr	r3, [pc, #188]	; (2250 <drawKeypad+0x154>)
    2192:	781b      	ldrb	r3, [r3, #0]
    2194:	2b09      	cmp	r3, #9
    2196:	d045      	beq.n	2224 <drawKeypad+0x128>
    2198:	2300      	movs	r3, #0
    219a:	4a31      	ldr	r2, [pc, #196]	; (2260 <drawKeypad+0x164>)
    219c:	9203      	str	r2, [sp, #12]
    219e:	9302      	str	r3, [sp, #8]
    21a0:	231d      	movs	r3, #29
    21a2:	9301      	str	r3, [sp, #4]
    21a4:	331f      	adds	r3, #31
    21a6:	9300      	str	r3, [sp, #0]
    21a8:	3338      	adds	r3, #56	; 0x38
    21aa:	228a      	movs	r2, #138	; 0x8a
    21ac:	32ff      	adds	r2, #255	; 0xff
    21ae:	21b6      	movs	r1, #182	; 0xb6
    21b0:	0049      	lsls	r1, r1, #1
    21b2:	4c29      	ldr	r4, [pc, #164]	; (2258 <drawKeypad+0x15c>)
    21b4:	47a0      	blx	r4
	//draw clear button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(clr));
    21b6:	4c1f      	ldr	r4, [pc, #124]	; (2234 <drawKeypad+0x138>)
    21b8:	492a      	ldr	r1, [pc, #168]	; (2264 <drawKeypad+0x168>)
    21ba:	6820      	ldr	r0, [r4, #0]
    21bc:	4b23      	ldr	r3, [pc, #140]	; (224c <drawKeypad+0x150>)
    21be:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    21c0:	6820      	ldr	r0, [r4, #0]
    21c2:	4b23      	ldr	r3, [pc, #140]	; (2250 <drawKeypad+0x154>)
    21c4:	781b      	ldrb	r3, [r3, #0]
    21c6:	2b0a      	cmp	r3, #10
    21c8:	d02e      	beq.n	2228 <drawKeypad+0x12c>
    21ca:	2300      	movs	r3, #0
    21cc:	4a26      	ldr	r2, [pc, #152]	; (2268 <drawKeypad+0x16c>)
    21ce:	9203      	str	r2, [sp, #12]
    21d0:	9302      	str	r3, [sp, #8]
    21d2:	231d      	movs	r3, #29
    21d4:	9301      	str	r3, [sp, #4]
    21d6:	3362      	adds	r3, #98	; 0x62
    21d8:	9300      	str	r3, [sp, #0]
    21da:	3b2f      	subs	r3, #47	; 0x2f
    21dc:	22c0      	movs	r2, #192	; 0xc0
    21de:	21f2      	movs	r1, #242	; 0xf2
    21e0:	0049      	lsls	r1, r1, #1
    21e2:	4c1d      	ldr	r4, [pc, #116]	; (2258 <drawKeypad+0x15c>)
    21e4:	47a0      	blx	r4
	//draw ok button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(ok));
    21e6:	4c13      	ldr	r4, [pc, #76]	; (2234 <drawKeypad+0x138>)
    21e8:	4920      	ldr	r1, [pc, #128]	; (226c <drawKeypad+0x170>)
    21ea:	6820      	ldr	r0, [r4, #0]
    21ec:	4b17      	ldr	r3, [pc, #92]	; (224c <drawKeypad+0x150>)
    21ee:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    21f0:	6820      	ldr	r0, [r4, #0]
    21f2:	4b17      	ldr	r3, [pc, #92]	; (2250 <drawKeypad+0x154>)
    21f4:	781b      	ldrb	r3, [r3, #0]
    21f6:	2b0b      	cmp	r3, #11
    21f8:	d018      	beq.n	222c <drawKeypad+0x130>
    21fa:	2200      	movs	r2, #0
    21fc:	4b1c      	ldr	r3, [pc, #112]	; (2270 <drawKeypad+0x174>)
    21fe:	9303      	str	r3, [sp, #12]
    2200:	9202      	str	r2, [sp, #8]
    2202:	231d      	movs	r3, #29
    2204:	9301      	str	r3, [sp, #4]
    2206:	3362      	adds	r3, #98	; 0x62
    2208:	9300      	str	r3, [sp, #0]
    220a:	3b2f      	subs	r3, #47	; 0x2f
    220c:	22a3      	movs	r2, #163	; 0xa3
    220e:	0052      	lsls	r2, r2, #1
    2210:	21f2      	movs	r1, #242	; 0xf2
    2212:	0049      	lsls	r1, r1, #1
    2214:	4c10      	ldr	r4, [pc, #64]	; (2258 <drawKeypad+0x15c>)
    2216:	47a0      	blx	r4
}//end drawKeypad
    2218:	b004      	add	sp, #16
    221a:	bc04      	pop	{r2}
    221c:	4690      	mov	r8, r2
    221e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    2220:	33d0      	adds	r3, #208	; 0xd0
    2222:	e7a2      	b.n	216a <drawKeypad+0x6e>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    2224:	33f7      	adds	r3, #247	; 0xf7
    2226:	e7b8      	b.n	219a <drawKeypad+0x9e>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    2228:	33f6      	adds	r3, #246	; 0xf6
    222a:	e7cf      	b.n	21cc <drawKeypad+0xd0>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    222c:	2280      	movs	r2, #128	; 0x80
    222e:	0052      	lsls	r2, r2, #1
    2230:	e7e4      	b.n	21fc <drawKeypad+0x100>
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	20000764 	.word	0x20000764
    2238:	000059e0 	.word	0x000059e0
    223c:	00001b1d 	.word	0x00001b1d
    2240:	000059e4 	.word	0x000059e4
    2244:	000059e8 	.word	0x000059e8
    2248:	03000030 	.word	0x03000030
    224c:	00001eb9 	.word	0x00001eb9
    2250:	200000f1 	.word	0x200000f1
    2254:	000059ec 	.word	0x000059ec
    2258:	00001989 	.word	0x00001989
    225c:	03000009 	.word	0x03000009
    2260:	000059f0 	.word	0x000059f0
    2264:	0300000a 	.word	0x0300000a
    2268:	000059f4 	.word	0x000059f4
    226c:	0300000b 	.word	0x0300000b
    2270:	000059f8 	.word	0x000059f8

00002274 <drawAlert>:
/* Function Name       : drawAlert
	* Parameters       : int x, int y, char stat
	* Return Values(s) : void
	* Description      : Draw alert, green if good attenuation, red otherwise
	*/
void drawAlert(int x, int y, char stat){
    2274:	b5f0      	push	{r4, r5, r6, r7, lr}
    2276:	46d6      	mov	lr, sl
    2278:	464f      	mov	r7, r9
    227a:	4646      	mov	r6, r8
    227c:	b5c0      	push	{r6, r7, lr}
    227e:	4680      	mov	r8, r0
    2280:	000d      	movs	r5, r1
    2282:	0014      	movs	r4, r2
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    2284:	4f1f      	ldr	r7, [pc, #124]	; (2304 <drawAlert+0x90>)
    2286:	4920      	ldr	r1, [pc, #128]	; (2308 <drawAlert+0x94>)
    2288:	6838      	ldr	r0, [r7, #0]
    228a:	4e20      	ldr	r6, [pc, #128]	; (230c <drawAlert+0x98>)
    228c:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(7 * 16));
    228e:	4920      	ldr	r1, [pc, #128]	; (2310 <drawAlert+0x9c>)
    2290:	6838      	ldr	r0, [r7, #0]
    2292:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    2294:	6838      	ldr	r0, [r7, #0]
    2296:	491f      	ldr	r1, [pc, #124]	; (2314 <drawAlert+0xa0>)
    2298:	47b0      	blx	r6
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    229a:	2c00      	cmp	r4, #0
    229c:	d02b      	beq.n	22f6 <drawAlert+0x82>
	else					Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(204, 51, 0));
    229e:	4b19      	ldr	r3, [pc, #100]	; (2304 <drawAlert+0x90>)
    22a0:	6818      	ldr	r0, [r3, #0]
    22a2:	491d      	ldr	r1, [pc, #116]	; (2318 <drawAlert+0xa4>)
    22a4:	4b19      	ldr	r3, [pc, #100]	; (230c <drawAlert+0x98>)
    22a6:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(x * 16, y * 16) );
    22a8:	4643      	mov	r3, r8
    22aa:	04d9      	lsls	r1, r3, #19
    22ac:	4b1b      	ldr	r3, [pc, #108]	; (231c <drawAlert+0xa8>)
    22ae:	469a      	mov	sl, r3
    22b0:	4019      	ands	r1, r3
    22b2:	012b      	lsls	r3, r5, #4
    22b4:	4a1a      	ldr	r2, [pc, #104]	; (2320 <drawAlert+0xac>)
    22b6:	4691      	mov	r9, r2
    22b8:	4013      	ands	r3, r2
    22ba:	4319      	orrs	r1, r3
    22bc:	2680      	movs	r6, #128	; 0x80
    22be:	05f6      	lsls	r6, r6, #23
    22c0:	4331      	orrs	r1, r6
    22c2:	4c10      	ldr	r4, [pc, #64]	; (2304 <drawAlert+0x90>)
    22c4:	6820      	ldr	r0, [r4, #0]
    22c6:	4f11      	ldr	r7, [pc, #68]	; (230c <drawAlert+0x98>)
    22c8:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + 25) * 16, (y + 20) * 16));
    22ca:	4641      	mov	r1, r8
    22cc:	3119      	adds	r1, #25
    22ce:	04c9      	lsls	r1, r1, #19
    22d0:	4653      	mov	r3, sl
    22d2:	4019      	ands	r1, r3
    22d4:	3514      	adds	r5, #20
    22d6:	012d      	lsls	r5, r5, #4
    22d8:	464b      	mov	r3, r9
    22da:	401d      	ands	r5, r3
    22dc:	4329      	orrs	r1, r5
    22de:	4331      	orrs	r1, r6
    22e0:	6820      	ldr	r0, [r4, #0]
    22e2:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, END());
    22e4:	6820      	ldr	r0, [r4, #0]
    22e6:	2184      	movs	r1, #132	; 0x84
    22e8:	0589      	lsls	r1, r1, #22
    22ea:	47b8      	blx	r7
}//end drawAlert
    22ec:	bc1c      	pop	{r2, r3, r4}
    22ee:	4690      	mov	r8, r2
    22f0:	4699      	mov	r9, r3
    22f2:	46a2      	mov	sl, r4
    22f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    22f6:	4b03      	ldr	r3, [pc, #12]	; (2304 <drawAlert+0x90>)
    22f8:	6818      	ldr	r0, [r3, #0]
    22fa:	490a      	ldr	r1, [pc, #40]	; (2324 <drawAlert+0xb0>)
    22fc:	4b03      	ldr	r3, [pc, #12]	; (230c <drawAlert+0x98>)
    22fe:	4798      	blx	r3
    2300:	e7d2      	b.n	22a8 <drawAlert+0x34>
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	20000764 	.word	0x20000764
    2308:	1f000009 	.word	0x1f000009
    230c:	00001eb9 	.word	0x00001eb9
    2310:	0e000070 	.word	0x0e000070
    2314:	100000ff 	.word	0x100000ff
    2318:	04cc3300 	.word	0x04cc3300
    231c:	3ff80000 	.word	0x3ff80000
    2320:	00007ff0 	.word	0x00007ff0
    2324:	0400ff55 	.word	0x0400ff55

00002328 <disStart>:
/* Function Name    : disStart
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display start sequence
 */
void disStart(){
    2328:	b570      	push	{r4, r5, r6, lr}
	Ft_Gpu_CoCmd_Dlstart(phost);
    232a:	4c06      	ldr	r4, [pc, #24]	; (2344 <disStart+0x1c>)
    232c:	6820      	ldr	r0, [r4, #0]
    232e:	4b06      	ldr	r3, [pc, #24]	; (2348 <disStart+0x20>)
    2330:	4798      	blx	r3
    //change this for initial bg
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    2332:	2180      	movs	r1, #128	; 0x80
    2334:	0489      	lsls	r1, r1, #18
    2336:	6820      	ldr	r0, [r4, #0]
    2338:	4d04      	ldr	r5, [pc, #16]	; (234c <disStart+0x24>)
    233a:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(1,1,1));
    233c:	6820      	ldr	r0, [r4, #0]
    233e:	4904      	ldr	r1, [pc, #16]	; (2350 <disStart+0x28>)
    2340:	47a8      	blx	r5
}//end disStart
    2342:	bd70      	pop	{r4, r5, r6, pc}
    2344:	20000764 	.word	0x20000764
    2348:	00001bc5 	.word	0x00001bc5
    234c:	00001eb9 	.word	0x00001eb9
    2350:	26000007 	.word	0x26000007

00002354 <disEnd>:
/* Function Name    : disEnd
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display end sequence
 */
void disEnd(){
    2354:	b510      	push	{r4, lr}
	Ft_Gpu_Hal_WrCmd32(phost,DISPLAY());
    2356:	4c06      	ldr	r4, [pc, #24]	; (2370 <disEnd+0x1c>)
    2358:	2100      	movs	r1, #0
    235a:	6820      	ldr	r0, [r4, #0]
    235c:	4b05      	ldr	r3, [pc, #20]	; (2374 <disEnd+0x20>)
    235e:	4798      	blx	r3
	Ft_Gpu_CoCmd_Swap(phost);
    2360:	6820      	ldr	r0, [r4, #0]
    2362:	4b05      	ldr	r3, [pc, #20]	; (2378 <disEnd+0x24>)
    2364:	4798      	blx	r3
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    2366:	6820      	ldr	r0, [r4, #0]
    2368:	4b04      	ldr	r3, [pc, #16]	; (237c <disEnd+0x28>)
    236a:	4798      	blx	r3
}//end disEnd
    236c:	bd10      	pop	{r4, pc}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	20000764 	.word	0x20000764
    2374:	00001eb9 	.word	0x00001eb9
    2378:	0000195d 	.word	0x0000195d
    237c:	00001e89 	.word	0x00001e89

00002380 <attnOp>:
void attnOp(){
    2380:	b5f0      	push	{r4, r5, r6, r7, lr}
    2382:	46de      	mov	lr, fp
    2384:	4657      	mov	r7, sl
    2386:	464e      	mov	r6, r9
    2388:	4645      	mov	r5, r8
    238a:	b5e0      	push	{r5, r6, r7, lr}
    238c:	b083      	sub	sp, #12
	char lastSec, lastMin=1, lastGood = time.second, trigger=0;
    238e:	4bb0      	ldr	r3, [pc, #704]	; (2650 <attnOp+0x2d0>)
    2390:	781b      	ldrb	r3, [r3, #0]
    2392:	4698      	mov	r8, r3
    2394:	2300      	movs	r3, #0
    2396:	469b      	mov	fp, r3
    2398:	3301      	adds	r3, #1
    239a:	4699      	mov	r9, r3
    239c:	e05e      	b.n	245c <attnOp+0xdc>
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi27<0)? 0:attenuation.rssi27));
    239e:	2300      	movs	r3, #0
    23a0:	e084      	b.n	24ac <attnOp+0x12c>
		Ft_Gpu_CoCmd_Number(phost, 500, 200, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    23a2:	2300      	movs	r3, #0
    23a4:	e097      	b.n	24d6 <attnOp+0x156>
		Ft_Gpu_CoCmd_Number(phost, 500, 275, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    23a6:	2300      	movs	r3, #0
    23a8:	e0aa      	b.n	2500 <attnOp+0x180>
		Ft_Gpu_CoCmd_Number(phost, 500, 350, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    23aa:	2300      	movs	r3, #0
    23ac:	e0be      	b.n	252c <attnOp+0x1ac>
			drawAlert(40, 125, (attenuation.rssi27<80)? 1:0);
    23ae:	4fa9      	ldr	r7, [pc, #676]	; (2654 <attnOp+0x2d4>)
    23b0:	88fb      	ldrh	r3, [r7, #6]
    23b2:	b21b      	sxth	r3, r3
    23b4:	254f      	movs	r5, #79	; 0x4f
    23b6:	0fda      	lsrs	r2, r3, #31
    23b8:	2600      	movs	r6, #0
    23ba:	429d      	cmp	r5, r3
    23bc:	4172      	adcs	r2, r6
    23be:	b2d2      	uxtb	r2, r2
    23c0:	217d      	movs	r1, #125	; 0x7d
    23c2:	2028      	movs	r0, #40	; 0x28
    23c4:	4ca4      	ldr	r4, [pc, #656]	; (2658 <attnOp+0x2d8>)
    23c6:	47a0      	blx	r4
			drawAlert(40, 200, (attenuation.rssi169<80)? 1:0);
    23c8:	883b      	ldrh	r3, [r7, #0]
    23ca:	b21b      	sxth	r3, r3
    23cc:	0fda      	lsrs	r2, r3, #31
    23ce:	429d      	cmp	r5, r3
    23d0:	4172      	adcs	r2, r6
    23d2:	b2d2      	uxtb	r2, r2
    23d4:	21c8      	movs	r1, #200	; 0xc8
    23d6:	2028      	movs	r0, #40	; 0x28
    23d8:	47a0      	blx	r4
			drawAlert(40, 275, (attenuation.rssi915<80)? 1:0);
    23da:	887b      	ldrh	r3, [r7, #2]
    23dc:	b21b      	sxth	r3, r3
    23de:	0fda      	lsrs	r2, r3, #31
    23e0:	429d      	cmp	r5, r3
    23e2:	4172      	adcs	r2, r6
    23e4:	b2d2      	uxtb	r2, r2
    23e6:	2114      	movs	r1, #20
    23e8:	31ff      	adds	r1, #255	; 0xff
    23ea:	2028      	movs	r0, #40	; 0x28
    23ec:	47a0      	blx	r4
			drawAlert(40, 350, (attenuation.rssi245<80)? 1:0);
    23ee:	88bb      	ldrh	r3, [r7, #4]
    23f0:	b21b      	sxth	r3, r3
    23f2:	0fda      	lsrs	r2, r3, #31
    23f4:	429d      	cmp	r5, r3
    23f6:	4172      	adcs	r2, r6
    23f8:	b2d2      	uxtb	r2, r2
    23fa:	21af      	movs	r1, #175	; 0xaf
    23fc:	0049      	lsls	r1, r1, #1
    23fe:	2028      	movs	r0, #40	; 0x28
    2400:	47a0      	blx	r4
    2402:	e0e6      	b.n	25d2 <attnOp+0x252>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    2404:	4b92      	ldr	r3, [pc, #584]	; (2650 <attnOp+0x2d0>)
    2406:	781b      	ldrb	r3, [r3, #0]
    2408:	4642      	mov	r2, r8
    240a:	1a9b      	subs	r3, r3, r2
    240c:	2b0a      	cmp	r3, #10
    240e:	d100      	bne.n	2412 <attnOp+0x92>
    2410:	e0f7      	b.n	2602 <attnOp+0x282>
    2412:	3332      	adds	r3, #50	; 0x32
    2414:	d100      	bne.n	2418 <attnOp+0x98>
    2416:	e0f4      	b.n	2602 <attnOp+0x282>
		if (trigger == 1){
    2418:	465b      	mov	r3, fp
    241a:	2b01      	cmp	r3, #1
    241c:	d100      	bne.n	2420 <attnOp+0xa0>
    241e:	e0f7      	b.n	2610 <attnOp+0x290>
		if (time.minute%30 == 0 && time.minute != lastMin){
    2420:	4b8b      	ldr	r3, [pc, #556]	; (2650 <attnOp+0x2d0>)
    2422:	785c      	ldrb	r4, [r3, #1]
    2424:	211e      	movs	r1, #30
    2426:	0020      	movs	r0, r4
    2428:	4b8c      	ldr	r3, [pc, #560]	; (265c <attnOp+0x2dc>)
    242a:	4798      	blx	r3
    242c:	b2c9      	uxtb	r1, r1
    242e:	2900      	cmp	r1, #0
    2430:	d103      	bne.n	243a <attnOp+0xba>
    2432:	464b      	mov	r3, r9
    2434:	42a3      	cmp	r3, r4
    2436:	d000      	beq.n	243a <attnOp+0xba>
			lastMin = time.minute;
    2438:	46a1      	mov	r9, r4
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    243a:	4b89      	ldr	r3, [pc, #548]	; (2660 <attnOp+0x2e0>)
    243c:	6818      	ldr	r0, [r3, #0]
    243e:	4989      	ldr	r1, [pc, #548]	; (2664 <attnOp+0x2e4>)
    2440:	4b89      	ldr	r3, [pc, #548]	; (2668 <attnOp+0x2e8>)
    2442:	4798      	blx	r3
		drawBack();
    2444:	4b89      	ldr	r3, [pc, #548]	; (266c <attnOp+0x2ec>)
    2446:	4798      	blx	r3
		drawTitle("Attenuation");
    2448:	4889      	ldr	r0, [pc, #548]	; (2670 <attnOp+0x2f0>)
    244a:	4b8a      	ldr	r3, [pc, #552]	; (2674 <attnOp+0x2f4>)
    244c:	4798      	blx	r3
		disEnd();
    244e:	4b8a      	ldr	r3, [pc, #552]	; (2678 <attnOp+0x2f8>)
    2450:	4798      	blx	r3
	} while (tag != back);
    2452:	4b8a      	ldr	r3, [pc, #552]	; (267c <attnOp+0x2fc>)
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	2b06      	cmp	r3, #6
    2458:	d100      	bne.n	245c <attnOp+0xdc>
    245a:	e0f2      	b.n	2642 <attnOp+0x2c2>
		tag = 0;
    245c:	4e87      	ldr	r6, [pc, #540]	; (267c <attnOp+0x2fc>)
    245e:	2300      	movs	r3, #0
    2460:	7033      	strb	r3, [r6, #0]
		rtc_calendar_get_time(&rtc_instance, &time);
    2462:	497b      	ldr	r1, [pc, #492]	; (2650 <attnOp+0x2d0>)
    2464:	4886      	ldr	r0, [pc, #536]	; (2680 <attnOp+0x300>)
    2466:	4b87      	ldr	r3, [pc, #540]	; (2684 <attnOp+0x304>)
    2468:	4798      	blx	r3
		attenuation.rssi27 = 90;
    246a:	4c7a      	ldr	r4, [pc, #488]	; (2654 <attnOp+0x2d4>)
    246c:	235a      	movs	r3, #90	; 0x5a
    246e:	80e3      	strh	r3, [r4, #6]
		attenuation.rssi169 =  82;	//10 offset added based on testing
    2470:	3b08      	subs	r3, #8
    2472:	8023      	strh	r3, [r4, #0]
		attenuation.rssi915 = 91;				// approved by Dr. Nguyen
    2474:	3309      	adds	r3, #9
    2476:	8063      	strh	r3, [r4, #2]
		attenuation.rssi245 =79;
    2478:	3b0c      	subs	r3, #12
    247a:	80a3      	strh	r3, [r4, #4]
		disStart();
    247c:	4b82      	ldr	r3, [pc, #520]	; (2688 <attnOp+0x308>)
    247e:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2480:	4d77      	ldr	r5, [pc, #476]	; (2660 <attnOp+0x2e0>)
    2482:	4982      	ldr	r1, [pc, #520]	; (268c <attnOp+0x30c>)
    2484:	6828      	ldr	r0, [r5, #0]
    2486:	4b82      	ldr	r3, [pc, #520]	; (2690 <attnOp+0x310>)
    2488:	4798      	blx	r3
    248a:	7030      	strb	r0, [r6, #0]
		Ft_Gpu_CoCmd_Append(phost, attnStart, attnEnd);
    248c:	4b81      	ldr	r3, [pc, #516]	; (2694 <attnOp+0x314>)
    248e:	681a      	ldr	r2, [r3, #0]
    2490:	4b81      	ldr	r3, [pc, #516]	; (2698 <attnOp+0x318>)
    2492:	6819      	ldr	r1, [r3, #0]
    2494:	6828      	ldr	r0, [r5, #0]
    2496:	4b81      	ldr	r3, [pc, #516]	; (269c <attnOp+0x31c>)
    2498:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi27<0)? 0:attenuation.rssi27));
    249a:	6828      	ldr	r0, [r5, #0]
    249c:	88e3      	ldrh	r3, [r4, #6]
    249e:	b21b      	sxth	r3, r3
    24a0:	2b00      	cmp	r3, #0
    24a2:	da00      	bge.n	24a6 <attnOp+0x126>
    24a4:	e77b      	b.n	239e <attnOp+0x1e>
    24a6:	4b6b      	ldr	r3, [pc, #428]	; (2654 <attnOp+0x2d4>)
    24a8:	88db      	ldrh	r3, [r3, #6]
    24aa:	b21b      	sxth	r3, r3
    24ac:	9301      	str	r3, [sp, #4]
    24ae:	2304      	movs	r3, #4
    24b0:	33ff      	adds	r3, #255	; 0xff
    24b2:	9300      	str	r3, [sp, #0]
    24b4:	3be4      	subs	r3, #228	; 0xe4
    24b6:	227d      	movs	r2, #125	; 0x7d
    24b8:	21fa      	movs	r1, #250	; 0xfa
    24ba:	0049      	lsls	r1, r1, #1
    24bc:	4c78      	ldr	r4, [pc, #480]	; (26a0 <attnOp+0x320>)
    24be:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 200, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    24c0:	4b67      	ldr	r3, [pc, #412]	; (2660 <attnOp+0x2e0>)
    24c2:	6818      	ldr	r0, [r3, #0]
    24c4:	4b63      	ldr	r3, [pc, #396]	; (2654 <attnOp+0x2d4>)
    24c6:	881b      	ldrh	r3, [r3, #0]
    24c8:	b21b      	sxth	r3, r3
    24ca:	2b00      	cmp	r3, #0
    24cc:	da00      	bge.n	24d0 <attnOp+0x150>
    24ce:	e768      	b.n	23a2 <attnOp+0x22>
    24d0:	4b60      	ldr	r3, [pc, #384]	; (2654 <attnOp+0x2d4>)
    24d2:	881b      	ldrh	r3, [r3, #0]
    24d4:	b21b      	sxth	r3, r3
    24d6:	9301      	str	r3, [sp, #4]
    24d8:	2304      	movs	r3, #4
    24da:	33ff      	adds	r3, #255	; 0xff
    24dc:	9300      	str	r3, [sp, #0]
    24de:	3be4      	subs	r3, #228	; 0xe4
    24e0:	22c8      	movs	r2, #200	; 0xc8
    24e2:	21fa      	movs	r1, #250	; 0xfa
    24e4:	0049      	lsls	r1, r1, #1
    24e6:	4c6e      	ldr	r4, [pc, #440]	; (26a0 <attnOp+0x320>)
    24e8:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 275, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    24ea:	4b5d      	ldr	r3, [pc, #372]	; (2660 <attnOp+0x2e0>)
    24ec:	6818      	ldr	r0, [r3, #0]
    24ee:	4b59      	ldr	r3, [pc, #356]	; (2654 <attnOp+0x2d4>)
    24f0:	885b      	ldrh	r3, [r3, #2]
    24f2:	b21b      	sxth	r3, r3
    24f4:	2b00      	cmp	r3, #0
    24f6:	da00      	bge.n	24fa <attnOp+0x17a>
    24f8:	e755      	b.n	23a6 <attnOp+0x26>
    24fa:	4b56      	ldr	r3, [pc, #344]	; (2654 <attnOp+0x2d4>)
    24fc:	885b      	ldrh	r3, [r3, #2]
    24fe:	b21b      	sxth	r3, r3
    2500:	9301      	str	r3, [sp, #4]
    2502:	2304      	movs	r3, #4
    2504:	33ff      	adds	r3, #255	; 0xff
    2506:	9300      	str	r3, [sp, #0]
    2508:	3be4      	subs	r3, #228	; 0xe4
    250a:	2214      	movs	r2, #20
    250c:	32ff      	adds	r2, #255	; 0xff
    250e:	21fa      	movs	r1, #250	; 0xfa
    2510:	0049      	lsls	r1, r1, #1
    2512:	4c63      	ldr	r4, [pc, #396]	; (26a0 <attnOp+0x320>)
    2514:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 350, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    2516:	4b52      	ldr	r3, [pc, #328]	; (2660 <attnOp+0x2e0>)
    2518:	6818      	ldr	r0, [r3, #0]
    251a:	4b4e      	ldr	r3, [pc, #312]	; (2654 <attnOp+0x2d4>)
    251c:	889b      	ldrh	r3, [r3, #4]
    251e:	b21b      	sxth	r3, r3
    2520:	2b00      	cmp	r3, #0
    2522:	da00      	bge.n	2526 <attnOp+0x1a6>
    2524:	e741      	b.n	23aa <attnOp+0x2a>
    2526:	4b4b      	ldr	r3, [pc, #300]	; (2654 <attnOp+0x2d4>)
    2528:	889b      	ldrh	r3, [r3, #4]
    252a:	b21b      	sxth	r3, r3
    252c:	9301      	str	r3, [sp, #4]
    252e:	2404      	movs	r4, #4
    2530:	34ff      	adds	r4, #255	; 0xff
    2532:	9400      	str	r4, [sp, #0]
    2534:	231f      	movs	r3, #31
    2536:	22af      	movs	r2, #175	; 0xaf
    2538:	0052      	lsls	r2, r2, #1
    253a:	21fa      	movs	r1, #250	; 0xfa
    253c:	0049      	lsls	r1, r1, #1
    253e:	4d58      	ldr	r5, [pc, #352]	; (26a0 <attnOp+0x320>)
    2540:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, 250, 125, 31, OPT_SIGNED|3, "27MHz");
    2542:	4d47      	ldr	r5, [pc, #284]	; (2660 <attnOp+0x2e0>)
    2544:	6828      	ldr	r0, [r5, #0]
    2546:	4b57      	ldr	r3, [pc, #348]	; (26a4 <attnOp+0x324>)
    2548:	9301      	str	r3, [sp, #4]
    254a:	9400      	str	r4, [sp, #0]
    254c:	231f      	movs	r3, #31
    254e:	227d      	movs	r2, #125	; 0x7d
    2550:	21fa      	movs	r1, #250	; 0xfa
    2552:	4f55      	ldr	r7, [pc, #340]	; (26a8 <attnOp+0x328>)
    2554:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 250, 200, 31, OPT_SIGNED|3, "169MHz");
    2556:	6828      	ldr	r0, [r5, #0]
    2558:	4b54      	ldr	r3, [pc, #336]	; (26ac <attnOp+0x32c>)
    255a:	9301      	str	r3, [sp, #4]
    255c:	9400      	str	r4, [sp, #0]
    255e:	231f      	movs	r3, #31
    2560:	22c8      	movs	r2, #200	; 0xc8
    2562:	21fa      	movs	r1, #250	; 0xfa
    2564:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 250, 275, 31, OPT_SIGNED|3, "915MHz");
    2566:	6828      	ldr	r0, [r5, #0]
    2568:	4b51      	ldr	r3, [pc, #324]	; (26b0 <attnOp+0x330>)
    256a:	9301      	str	r3, [sp, #4]
    256c:	9400      	str	r4, [sp, #0]
    256e:	231f      	movs	r3, #31
    2570:	2214      	movs	r2, #20
    2572:	32ff      	adds	r2, #255	; 0xff
    2574:	21fa      	movs	r1, #250	; 0xfa
    2576:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 250, 350, 31, OPT_SIGNED|3, "2.4GHz");
    2578:	6828      	ldr	r0, [r5, #0]
    257a:	4b4e      	ldr	r3, [pc, #312]	; (26b4 <attnOp+0x334>)
    257c:	9301      	str	r3, [sp, #4]
    257e:	9400      	str	r4, [sp, #0]
    2580:	231f      	movs	r3, #31
    2582:	22af      	movs	r2, #175	; 0xaf
    2584:	0052      	lsls	r2, r2, #1
    2586:	21fa      	movs	r1, #250	; 0xfa
    2588:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 650, 125, 31, OPT_SIGNED|3, "dB");
    258a:	6828      	ldr	r0, [r5, #0]
    258c:	4e4a      	ldr	r6, [pc, #296]	; (26b8 <attnOp+0x338>)
    258e:	9601      	str	r6, [sp, #4]
    2590:	9400      	str	r4, [sp, #0]
    2592:	231f      	movs	r3, #31
    2594:	227d      	movs	r2, #125	; 0x7d
    2596:	4949      	ldr	r1, [pc, #292]	; (26bc <attnOp+0x33c>)
    2598:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 650, 200, 31, OPT_SIGNED|3, "dB");
    259a:	6828      	ldr	r0, [r5, #0]
    259c:	9601      	str	r6, [sp, #4]
    259e:	9400      	str	r4, [sp, #0]
    25a0:	231f      	movs	r3, #31
    25a2:	22c8      	movs	r2, #200	; 0xc8
    25a4:	4945      	ldr	r1, [pc, #276]	; (26bc <attnOp+0x33c>)
    25a6:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 650, 275, 31, OPT_SIGNED|3, "dB");
    25a8:	6828      	ldr	r0, [r5, #0]
    25aa:	9601      	str	r6, [sp, #4]
    25ac:	9400      	str	r4, [sp, #0]
    25ae:	231f      	movs	r3, #31
    25b0:	2214      	movs	r2, #20
    25b2:	32ff      	adds	r2, #255	; 0xff
    25b4:	4941      	ldr	r1, [pc, #260]	; (26bc <attnOp+0x33c>)
    25b6:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 650, 350, 31, OPT_SIGNED|3, "dB");
    25b8:	6828      	ldr	r0, [r5, #0]
    25ba:	9601      	str	r6, [sp, #4]
    25bc:	9400      	str	r4, [sp, #0]
    25be:	231f      	movs	r3, #31
    25c0:	22af      	movs	r2, #175	; 0xaf
    25c2:	0052      	lsls	r2, r2, #1
    25c4:	493d      	ldr	r1, [pc, #244]	; (26bc <attnOp+0x33c>)
    25c6:	47b8      	blx	r7
		if (alert == 1){
    25c8:	4b3d      	ldr	r3, [pc, #244]	; (26c0 <attnOp+0x340>)
    25ca:	781b      	ldrb	r3, [r3, #0]
    25cc:	2b01      	cmp	r3, #1
    25ce:	d100      	bne.n	25d2 <attnOp+0x252>
    25d0:	e6ed      	b.n	23ae <attnOp+0x2e>
		if (attenuation.rssi169>80 && attenuation.rssi915>80 && attenuation.rssi245>80){
    25d2:	4b20      	ldr	r3, [pc, #128]	; (2654 <attnOp+0x2d4>)
    25d4:	881b      	ldrh	r3, [r3, #0]
    25d6:	b21b      	sxth	r3, r3
    25d8:	2b50      	cmp	r3, #80	; 0x50
    25da:	dc00      	bgt.n	25de <attnOp+0x25e>
    25dc:	e712      	b.n	2404 <attnOp+0x84>
    25de:	4b1d      	ldr	r3, [pc, #116]	; (2654 <attnOp+0x2d4>)
    25e0:	885b      	ldrh	r3, [r3, #2]
    25e2:	b21b      	sxth	r3, r3
    25e4:	2b50      	cmp	r3, #80	; 0x50
    25e6:	dc00      	bgt.n	25ea <attnOp+0x26a>
    25e8:	e70c      	b.n	2404 <attnOp+0x84>
    25ea:	4b1a      	ldr	r3, [pc, #104]	; (2654 <attnOp+0x2d4>)
    25ec:	889b      	ldrh	r3, [r3, #4]
    25ee:	b21b      	sxth	r3, r3
    25f0:	2b50      	cmp	r3, #80	; 0x50
    25f2:	dc00      	bgt.n	25f6 <attnOp+0x276>
    25f4:	e706      	b.n	2404 <attnOp+0x84>
			lastGood = time.second;
    25f6:	4b16      	ldr	r3, [pc, #88]	; (2650 <attnOp+0x2d0>)
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	4698      	mov	r8, r3
			trigger = 0;
    25fc:	2300      	movs	r3, #0
    25fe:	469b      	mov	fp, r3
    2600:	e70a      	b.n	2418 <attnOp+0x98>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    2602:	465b      	mov	r3, fp
    2604:	2b00      	cmp	r3, #0
    2606:	d000      	beq.n	260a <attnOp+0x28a>
    2608:	e706      	b.n	2418 <attnOp+0x98>
		trigger = 1;
    260a:	3301      	adds	r3, #1
    260c:	469b      	mov	fp, r3
    260e:	e703      	b.n	2418 <attnOp+0x98>
			if (time.second%5 == 0 && time.second != lastSec && sound==1){
    2610:	4b0f      	ldr	r3, [pc, #60]	; (2650 <attnOp+0x2d0>)
    2612:	781c      	ldrb	r4, [r3, #0]
    2614:	2105      	movs	r1, #5
    2616:	0020      	movs	r0, r4
    2618:	4b10      	ldr	r3, [pc, #64]	; (265c <attnOp+0x2dc>)
    261a:	4798      	blx	r3
    261c:	b2c9      	uxtb	r1, r1
    261e:	2900      	cmp	r1, #0
    2620:	d000      	beq.n	2624 <attnOp+0x2a4>
    2622:	e6fd      	b.n	2420 <attnOp+0xa0>
    2624:	4653      	mov	r3, sl
    2626:	42a3      	cmp	r3, r4
    2628:	d100      	bne.n	262c <attnOp+0x2ac>
    262a:	e6f9      	b.n	2420 <attnOp+0xa0>
    262c:	4b25      	ldr	r3, [pc, #148]	; (26c4 <attnOp+0x344>)
    262e:	781b      	ldrb	r3, [r3, #0]
    2630:	2b01      	cmp	r3, #1
    2632:	d000      	beq.n	2636 <attnOp+0x2b6>
    2634:	e6f4      	b.n	2420 <attnOp+0xa0>
				play();
    2636:	4b24      	ldr	r3, [pc, #144]	; (26c8 <attnOp+0x348>)
    2638:	4798      	blx	r3
				lastSec = time.second;
    263a:	4b05      	ldr	r3, [pc, #20]	; (2650 <attnOp+0x2d0>)
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	469a      	mov	sl, r3
    2640:	e6ee      	b.n	2420 <attnOp+0xa0>
}// end attnOp
    2642:	b003      	add	sp, #12
    2644:	bc3c      	pop	{r2, r3, r4, r5}
    2646:	4690      	mov	r8, r2
    2648:	4699      	mov	r9, r3
    264a:	46a2      	mov	sl, r4
    264c:	46ab      	mov	fp, r5
    264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2650:	2000075c 	.word	0x2000075c
    2654:	200000d0 	.word	0x200000d0
    2658:	00002275 	.word	0x00002275
    265c:	00005049 	.word	0x00005049
    2660:	20000764 	.word	0x20000764
    2664:	04ffffff 	.word	0x04ffffff
    2668:	00001eb9 	.word	0x00001eb9
    266c:	000020a1 	.word	0x000020a1
    2670:	000059b0 	.word	0x000059b0
    2674:	00002021 	.word	0x00002021
    2678:	00002355 	.word	0x00002355
    267c:	200000f1 	.word	0x200000f1
    2680:	20000444 	.word	0x20000444
    2684:	00000555 	.word	0x00000555
    2688:	00002329 	.word	0x00002329
    268c:	0030212c 	.word	0x0030212c
    2690:	00001d49 	.word	0x00001d49
    2694:	200000d8 	.word	0x200000d8
    2698:	200000dc 	.word	0x200000dc
    269c:	00001a6d 	.word	0x00001a6d
    26a0:	000018f9 	.word	0x000018f9
    26a4:	0000598c 	.word	0x0000598c
    26a8:	00001875 	.word	0x00001875
    26ac:	00005994 	.word	0x00005994
    26b0:	0000599c 	.word	0x0000599c
    26b4:	000059a4 	.word	0x000059a4
    26b8:	000059ac 	.word	0x000059ac
    26bc:	0000028a 	.word	0x0000028a
    26c0:	20000008 	.word	0x20000008
    26c4:	200000f0 	.word	0x200000f0
    26c8:	00001fc9 	.word	0x00001fc9

000026cc <historyOp>:
void historyOp(){
    26cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ce:	46de      	mov	lr, fp
    26d0:	4657      	mov	r7, sl
    26d2:	464e      	mov	r6, r9
    26d4:	4645      	mov	r5, r8
    26d6:	b5e0      	push	{r5, r6, r7, lr}
    26d8:	b0af      	sub	sp, #188	; 0xbc
    26da:	e05a      	b.n	2792 <historyOp+0xc6>
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    26dc:	1c5a      	adds	r2, r3, #1
    26de:	920b      	str	r2, [sp, #44]	; 0x2c
					i+1, history[i][0], history[i][1], history[i][2], history[i][3], history[i][4], \
    26e0:	4e3a      	ldr	r6, [pc, #232]	; (27cc <historyOp+0x100>)
    26e2:	009a      	lsls	r2, r3, #2
    26e4:	18d0      	adds	r0, r2, r3
    26e6:	0081      	lsls	r1, r0, #2
    26e8:	5f8d      	ldrsh	r5, [r1, r6]
    26ea:	0081      	lsls	r1, r0, #2
    26ec:	1871      	adds	r1, r6, r1
    26ee:	2702      	movs	r7, #2
    26f0:	5fc8      	ldrsh	r0, [r1, r7]
    26f2:	900c      	str	r0, [sp, #48]	; 0x30
    26f4:	2704      	movs	r7, #4
    26f6:	5fc8      	ldrsh	r0, [r1, r7]
    26f8:	2706      	movs	r7, #6
    26fa:	5fcc      	ldrsh	r4, [r1, r7]
    26fc:	940d      	str	r4, [sp, #52]	; 0x34
    26fe:	2408      	movs	r4, #8
    2700:	5f0f      	ldrsh	r7, [r1, r4]
    2702:	46bc      	mov	ip, r7
					history[i][5], history[i][6], history[i][7], history[i][8], history[i][9]);
    2704:	240a      	movs	r4, #10
    2706:	5f0f      	ldrsh	r7, [r1, r4]
    2708:	46b8      	mov	r8, r7
    270a:	240c      	movs	r4, #12
    270c:	5f0f      	ldrsh	r7, [r1, r4]
    270e:	46b9      	mov	r9, r7
    2710:	240e      	movs	r4, #14
    2712:	5f0f      	ldrsh	r7, [r1, r4]
    2714:	2410      	movs	r4, #16
    2716:	5f09      	ldrsh	r1, [r1, r4]
    2718:	468b      	mov	fp, r1
    271a:	18d3      	adds	r3, r2, r3
    271c:	009a      	lsls	r2, r3, #2
    271e:	18b6      	adds	r6, r6, r2
    2720:	2112      	movs	r1, #18
    2722:	5e73      	ldrsh	r3, [r6, r1]
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    2724:	ae0e      	add	r6, sp, #56	; 0x38
    2726:	9309      	str	r3, [sp, #36]	; 0x24
    2728:	465b      	mov	r3, fp
    272a:	9308      	str	r3, [sp, #32]
    272c:	9707      	str	r7, [sp, #28]
    272e:	464b      	mov	r3, r9
    2730:	9306      	str	r3, [sp, #24]
    2732:	4643      	mov	r3, r8
    2734:	9305      	str	r3, [sp, #20]
    2736:	4663      	mov	r3, ip
    2738:	9304      	str	r3, [sp, #16]
    273a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    273c:	9303      	str	r3, [sp, #12]
    273e:	9002      	str	r0, [sp, #8]
    2740:	980c      	ldr	r0, [sp, #48]	; 0x30
    2742:	9001      	str	r0, [sp, #4]
    2744:	9500      	str	r5, [sp, #0]
    2746:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2748:	002b      	movs	r3, r5
    274a:	4a21      	ldr	r2, [pc, #132]	; (27d0 <historyOp+0x104>)
    274c:	2180      	movs	r1, #128	; 0x80
    274e:	0030      	movs	r0, r6
    2750:	4f20      	ldr	r7, [pc, #128]	; (27d4 <historyOp+0x108>)
    2752:	47b8      	blx	r7
			Ft_Gpu_CoCmd_Text(phost, 50, y, 28, 0,buff);
    2754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2756:	b222      	sxth	r2, r4
    2758:	4b1f      	ldr	r3, [pc, #124]	; (27d8 <historyOp+0x10c>)
    275a:	6818      	ldr	r0, [r3, #0]
    275c:	9601      	str	r6, [sp, #4]
    275e:	2300      	movs	r3, #0
    2760:	9300      	str	r3, [sp, #0]
    2762:	331c      	adds	r3, #28
    2764:	2132      	movs	r1, #50	; 0x32
    2766:	4e1d      	ldr	r6, [pc, #116]	; (27dc <historyOp+0x110>)
    2768:	47b0      	blx	r6
			y = y + 30;
    276a:	0023      	movs	r3, r4
    276c:	331e      	adds	r3, #30
    276e:	930a      	str	r3, [sp, #40]	; 0x28
		for(i = 0; i < 10; i++){
    2770:	002b      	movs	r3, r5
    2772:	2b09      	cmp	r3, #9
    2774:	ddb2      	ble.n	26dc <historyOp+0x10>
		drawBack();
    2776:	4b1a      	ldr	r3, [pc, #104]	; (27e0 <historyOp+0x114>)
    2778:	4798      	blx	r3
		drawTitle("History");
    277a:	481a      	ldr	r0, [pc, #104]	; (27e4 <historyOp+0x118>)
    277c:	4b1a      	ldr	r3, [pc, #104]	; (27e8 <historyOp+0x11c>)
    277e:	4798      	blx	r3
		disEnd();
    2780:	4b1a      	ldr	r3, [pc, #104]	; (27ec <historyOp+0x120>)
    2782:	4798      	blx	r3
		delay_ms(50);
    2784:	2032      	movs	r0, #50	; 0x32
    2786:	4b1a      	ldr	r3, [pc, #104]	; (27f0 <historyOp+0x124>)
    2788:	4798      	blx	r3
	} while (tag != back);
    278a:	4b1a      	ldr	r3, [pc, #104]	; (27f4 <historyOp+0x128>)
    278c:	781b      	ldrb	r3, [r3, #0]
    278e:	2b06      	cmp	r3, #6
    2790:	d015      	beq.n	27be <historyOp+0xf2>
		tag = 0;
    2792:	4d18      	ldr	r5, [pc, #96]	; (27f4 <historyOp+0x128>)
    2794:	2300      	movs	r3, #0
    2796:	702b      	strb	r3, [r5, #0]
		disStart();
    2798:	4b17      	ldr	r3, [pc, #92]	; (27f8 <historyOp+0x12c>)
    279a:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    279c:	4c0e      	ldr	r4, [pc, #56]	; (27d8 <historyOp+0x10c>)
    279e:	4917      	ldr	r1, [pc, #92]	; (27fc <historyOp+0x130>)
    27a0:	6820      	ldr	r0, [r4, #0]
    27a2:	4b17      	ldr	r3, [pc, #92]	; (2800 <historyOp+0x134>)
    27a4:	4798      	blx	r3
    27a6:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Append(phost, histStart, histEnd);
    27a8:	4b16      	ldr	r3, [pc, #88]	; (2804 <historyOp+0x138>)
    27aa:	681a      	ldr	r2, [r3, #0]
    27ac:	4b16      	ldr	r3, [pc, #88]	; (2808 <historyOp+0x13c>)
    27ae:	6819      	ldr	r1, [r3, #0]
    27b0:	6820      	ldr	r0, [r4, #0]
    27b2:	4b16      	ldr	r3, [pc, #88]	; (280c <historyOp+0x140>)
    27b4:	4798      	blx	r3
		y = 125;
    27b6:	247d      	movs	r4, #125	; 0x7d
		for(i = 0; i < 10; i++){
    27b8:	2300      	movs	r3, #0
    27ba:	940a      	str	r4, [sp, #40]	; 0x28
    27bc:	e7d9      	b.n	2772 <historyOp+0xa6>
}//end histOp
    27be:	b02f      	add	sp, #188	; 0xbc
    27c0:	bc3c      	pop	{r2, r3, r4, r5}
    27c2:	4690      	mov	r8, r2
    27c4:	4699      	mov	r9, r3
    27c6:	46a2      	mov	sl, r4
    27c8:	46ab      	mov	fp, r5
    27ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27cc:	20000694 	.word	0x20000694
    27d0:	000059fc 	.word	0x000059fc
    27d4:	00005115 	.word	0x00005115
    27d8:	20000764 	.word	0x20000764
    27dc:	00001875 	.word	0x00001875
    27e0:	000020a1 	.word	0x000020a1
    27e4:	00005a6c 	.word	0x00005a6c
    27e8:	00002021 	.word	0x00002021
    27ec:	00002355 	.word	0x00002355
    27f0:	00000151 	.word	0x00000151
    27f4:	200000f1 	.word	0x200000f1
    27f8:	00002329 	.word	0x00002329
    27fc:	0030212c 	.word	0x0030212c
    2800:	00001d49 	.word	0x00001d49
    2804:	200000e0 	.word	0x200000e0
    2808:	200000e4 	.word	0x200000e4
    280c:	00001a6d 	.word	0x00001a6d

00002810 <rssiOp>:
void rssiOp(){
    2810:	b5f0      	push	{r4, r5, r6, r7, lr}
    2812:	46de      	mov	lr, fp
    2814:	b500      	push	{lr}
    2816:	b082      	sub	sp, #8
	tag = 0;
    2818:	4e48      	ldr	r6, [pc, #288]	; (293c <rssiOp+0x12c>)
    281a:	2300      	movs	r3, #0
    281c:	7033      	strb	r3, [r6, #0]
		disStart();
    281e:	4b48      	ldr	r3, [pc, #288]	; (2940 <rssiOp+0x130>)
    2820:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2822:	4c48      	ldr	r4, [pc, #288]	; (2944 <rssiOp+0x134>)
    2824:	4948      	ldr	r1, [pc, #288]	; (2948 <rssiOp+0x138>)
    2826:	6820      	ldr	r0, [r4, #0]
    2828:	4b48      	ldr	r3, [pc, #288]	; (294c <rssiOp+0x13c>)
    282a:	4798      	blx	r3
    282c:	7030      	strb	r0, [r6, #0]
		Ft_Gpu_CoCmd_Append(phost, rssiStart, rssiEnd);
    282e:	4b48      	ldr	r3, [pc, #288]	; (2950 <rssiOp+0x140>)
    2830:	681a      	ldr	r2, [r3, #0]
    2832:	4b48      	ldr	r3, [pc, #288]	; (2954 <rssiOp+0x144>)
    2834:	6819      	ldr	r1, [r3, #0]
    2836:	6820      	ldr	r0, [r4, #0]
    2838:	4b47      	ldr	r3, [pc, #284]	; (2958 <rssiOp+0x148>)
    283a:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 650, 125, 31, OPT_SIGNED|OPT_CENTER|3, 11);
    283c:	6820      	ldr	r0, [r4, #0]
    283e:	230b      	movs	r3, #11
    2840:	9301      	str	r3, [sp, #4]
    2842:	4d46      	ldr	r5, [pc, #280]	; (295c <rssiOp+0x14c>)
    2844:	9500      	str	r5, [sp, #0]
    2846:	3314      	adds	r3, #20
    2848:	227d      	movs	r2, #125	; 0x7d
    284a:	4945      	ldr	r1, [pc, #276]	; (2960 <rssiOp+0x150>)
    284c:	4f45      	ldr	r7, [pc, #276]	; (2964 <rssiOp+0x154>)
    284e:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 200, 31, OPT_SIGNED|OPT_CENTER|3, 10);
    2850:	6820      	ldr	r0, [r4, #0]
    2852:	230a      	movs	r3, #10
    2854:	9301      	str	r3, [sp, #4]
    2856:	9500      	str	r5, [sp, #0]
    2858:	3315      	adds	r3, #21
    285a:	22c8      	movs	r2, #200	; 0xc8
    285c:	4940      	ldr	r1, [pc, #256]	; (2960 <rssiOp+0x150>)
    285e:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 275, 31, OPT_SIGNED|OPT_CENTER|3, 23);
    2860:	6820      	ldr	r0, [r4, #0]
    2862:	2317      	movs	r3, #23
    2864:	9301      	str	r3, [sp, #4]
    2866:	9500      	str	r5, [sp, #0]
    2868:	3308      	adds	r3, #8
    286a:	2214      	movs	r2, #20
    286c:	32ff      	adds	r2, #255	; 0xff
    286e:	493c      	ldr	r1, [pc, #240]	; (2960 <rssiOp+0x150>)
    2870:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 350, 31, OPT_SIGNED|OPT_CENTER|3, 14);
    2872:	6820      	ldr	r0, [r4, #0]
    2874:	230e      	movs	r3, #14
    2876:	9301      	str	r3, [sp, #4]
    2878:	9500      	str	r5, [sp, #0]
    287a:	3311      	adds	r3, #17
    287c:	22af      	movs	r2, #175	; 0xaf
    287e:	0052      	lsls	r2, r2, #1
    2880:	4937      	ldr	r1, [pc, #220]	; (2960 <rssiOp+0x150>)
    2882:	47b8      	blx	r7
	  	Ft_Gpu_CoCmd_Text(phost, 400, 125, 31, OPT_SIGNED|3, "27MHz");
    2884:	6820      	ldr	r0, [r4, #0]
    2886:	4b38      	ldr	r3, [pc, #224]	; (2968 <rssiOp+0x158>)
    2888:	9301      	str	r3, [sp, #4]
    288a:	2504      	movs	r5, #4
    288c:	35ff      	adds	r5, #255	; 0xff
    288e:	9500      	str	r5, [sp, #0]
    2890:	231f      	movs	r3, #31
    2892:	227d      	movs	r2, #125	; 0x7d
    2894:	21c8      	movs	r1, #200	; 0xc8
    2896:	0049      	lsls	r1, r1, #1
    2898:	4f34      	ldr	r7, [pc, #208]	; (296c <rssiOp+0x15c>)
    289a:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 200, 31, OPT_SIGNED|3, "169MHz");
    289c:	6820      	ldr	r0, [r4, #0]
    289e:	4b34      	ldr	r3, [pc, #208]	; (2970 <rssiOp+0x160>)
    28a0:	9301      	str	r3, [sp, #4]
    28a2:	9500      	str	r5, [sp, #0]
    28a4:	231f      	movs	r3, #31
    28a6:	22c8      	movs	r2, #200	; 0xc8
    28a8:	21c8      	movs	r1, #200	; 0xc8
    28aa:	0049      	lsls	r1, r1, #1
    28ac:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 275, 31, OPT_SIGNED|3, "915MHz");
    28ae:	6820      	ldr	r0, [r4, #0]
    28b0:	4b30      	ldr	r3, [pc, #192]	; (2974 <rssiOp+0x164>)
    28b2:	9301      	str	r3, [sp, #4]
    28b4:	9500      	str	r5, [sp, #0]
    28b6:	231f      	movs	r3, #31
    28b8:	2214      	movs	r2, #20
    28ba:	32ff      	adds	r2, #255	; 0xff
    28bc:	21c8      	movs	r1, #200	; 0xc8
    28be:	0049      	lsls	r1, r1, #1
    28c0:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 350, 31, OPT_SIGNED|3, "2.4GHz");
    28c2:	6820      	ldr	r0, [r4, #0]
    28c4:	4b2c      	ldr	r3, [pc, #176]	; (2978 <rssiOp+0x168>)
    28c6:	9301      	str	r3, [sp, #4]
    28c8:	9500      	str	r5, [sp, #0]
    28ca:	231f      	movs	r3, #31
    28cc:	22af      	movs	r2, #175	; 0xaf
    28ce:	0052      	lsls	r2, r2, #1
    28d0:	21c8      	movs	r1, #200	; 0xc8
    28d2:	0049      	lsls	r1, r1, #1
    28d4:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 125, 31, OPT_SIGNED|3, "dB");
    28d6:	6820      	ldr	r0, [r4, #0]
    28d8:	4b28      	ldr	r3, [pc, #160]	; (297c <rssiOp+0x16c>)
    28da:	469b      	mov	fp, r3
    28dc:	9301      	str	r3, [sp, #4]
    28de:	9500      	str	r5, [sp, #0]
    28e0:	231f      	movs	r3, #31
    28e2:	227d      	movs	r2, #125	; 0x7d
    28e4:	4926      	ldr	r1, [pc, #152]	; (2980 <rssiOp+0x170>)
    28e6:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 200, 31, OPT_SIGNED|3, "dB");
    28e8:	6820      	ldr	r0, [r4, #0]
    28ea:	465b      	mov	r3, fp
    28ec:	9301      	str	r3, [sp, #4]
    28ee:	9500      	str	r5, [sp, #0]
    28f0:	231f      	movs	r3, #31
    28f2:	22c8      	movs	r2, #200	; 0xc8
    28f4:	4922      	ldr	r1, [pc, #136]	; (2980 <rssiOp+0x170>)
    28f6:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 275, 31, OPT_SIGNED|3, "dB");
    28f8:	6820      	ldr	r0, [r4, #0]
    28fa:	465b      	mov	r3, fp
    28fc:	9301      	str	r3, [sp, #4]
    28fe:	9500      	str	r5, [sp, #0]
    2900:	231f      	movs	r3, #31
    2902:	2214      	movs	r2, #20
    2904:	32ff      	adds	r2, #255	; 0xff
    2906:	491e      	ldr	r1, [pc, #120]	; (2980 <rssiOp+0x170>)
    2908:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 350, 31, OPT_SIGNED|3, "dB");
    290a:	6820      	ldr	r0, [r4, #0]
    290c:	465b      	mov	r3, fp
    290e:	9301      	str	r3, [sp, #4]
    2910:	9500      	str	r5, [sp, #0]
    2912:	231f      	movs	r3, #31
    2914:	22af      	movs	r2, #175	; 0xaf
    2916:	0052      	lsls	r2, r2, #1
    2918:	4919      	ldr	r1, [pc, #100]	; (2980 <rssiOp+0x170>)
    291a:	47b8      	blx	r7
		drawBack();
    291c:	4b19      	ldr	r3, [pc, #100]	; (2984 <rssiOp+0x174>)
    291e:	4798      	blx	r3
		drawTitle("RSSI [interior]");
    2920:	4819      	ldr	r0, [pc, #100]	; (2988 <rssiOp+0x178>)
    2922:	4b1a      	ldr	r3, [pc, #104]	; (298c <rssiOp+0x17c>)
    2924:	4798      	blx	r3
		disEnd();
    2926:	4b1a      	ldr	r3, [pc, #104]	; (2990 <rssiOp+0x180>)
    2928:	4798      	blx	r3
	} while (tag != back);
    292a:	7833      	ldrb	r3, [r6, #0]
    292c:	2b06      	cmp	r3, #6
    292e:	d000      	beq.n	2932 <rssiOp+0x122>
    2930:	e772      	b.n	2818 <rssiOp+0x8>
}//end rssiOp
    2932:	b002      	add	sp, #8
    2934:	bc04      	pop	{r2}
    2936:	4693      	mov	fp, r2
    2938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	200000f1 	.word	0x200000f1
    2940:	00002329 	.word	0x00002329
    2944:	20000764 	.word	0x20000764
    2948:	0030212c 	.word	0x0030212c
    294c:	00001d49 	.word	0x00001d49
    2950:	200000e8 	.word	0x200000e8
    2954:	200000ec 	.word	0x200000ec
    2958:	00001a6d 	.word	0x00001a6d
    295c:	00000703 	.word	0x00000703
    2960:	0000028a 	.word	0x0000028a
    2964:	000018f9 	.word	0x000018f9
    2968:	0000598c 	.word	0x0000598c
    296c:	00001875 	.word	0x00001875
    2970:	00005994 	.word	0x00005994
    2974:	0000599c 	.word	0x0000599c
    2978:	000059a4 	.word	0x000059a4
    297c:	000059ac 	.word	0x000059ac
    2980:	000002ee 	.word	0x000002ee
    2984:	000020a1 	.word	0x000020a1
    2988:	00005a94 	.word	0x00005a94
    298c:	00002021 	.word	0x00002021
    2990:	00002355 	.word	0x00002355

00002994 <calScreen>:
void calScreen(){
    2994:	b530      	push	{r4, r5, lr}
    2996:	b083      	sub	sp, #12
	disStart();
    2998:	4b0c      	ldr	r3, [pc, #48]	; (29cc <calScreen+0x38>)
    299a:	4798      	blx	r3
	Ft_Gpu_CoCmd_Text(phost,disWid/2,disHei/2,30,OPT_CENTER,"Please tap on the dot");
    299c:	4c0c      	ldr	r4, [pc, #48]	; (29d0 <calScreen+0x3c>)
    299e:	6820      	ldr	r0, [r4, #0]
    29a0:	4b0c      	ldr	r3, [pc, #48]	; (29d4 <calScreen+0x40>)
    29a2:	9301      	str	r3, [sp, #4]
    29a4:	23c0      	movs	r3, #192	; 0xc0
    29a6:	00db      	lsls	r3, r3, #3
    29a8:	9300      	str	r3, [sp, #0]
    29aa:	231e      	movs	r3, #30
    29ac:	22f0      	movs	r2, #240	; 0xf0
    29ae:	21c8      	movs	r1, #200	; 0xc8
    29b0:	0049      	lsls	r1, r1, #1
    29b2:	4d09      	ldr	r5, [pc, #36]	; (29d8 <calScreen+0x44>)
    29b4:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Calibrate(phost,0);
    29b6:	6820      	ldr	r0, [r4, #0]
    29b8:	2100      	movs	r1, #0
    29ba:	4b08      	ldr	r3, [pc, #32]	; (29dc <calScreen+0x48>)
    29bc:	4798      	blx	r3
	disEnd();
    29be:	4b08      	ldr	r3, [pc, #32]	; (29e0 <calScreen+0x4c>)
    29c0:	4798      	blx	r3
	delay_ms(100);
    29c2:	2064      	movs	r0, #100	; 0x64
    29c4:	4b07      	ldr	r3, [pc, #28]	; (29e4 <calScreen+0x50>)
    29c6:	4798      	blx	r3
}//end calScreen
    29c8:	b003      	add	sp, #12
    29ca:	bd30      	pop	{r4, r5, pc}
    29cc:	00002329 	.word	0x00002329
    29d0:	20000764 	.word	0x20000764
    29d4:	000059bc 	.word	0x000059bc
    29d8:	00001875 	.word	0x00001875
    29dc:	00001a31 	.word	0x00001a31
    29e0:	00002355 	.word	0x00002355
    29e4:	00000151 	.word	0x00000151

000029e8 <setTime>:
void setTime(){
    29e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ea:	46de      	mov	lr, fp
    29ec:	4657      	mov	r7, sl
    29ee:	464e      	mov	r6, r9
    29f0:	4645      	mov	r5, r8
    29f2:	b5e0      	push	{r5, r6, r7, lr}
    29f4:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, timeIn[10] = "0", i = 0, pressed = 0;
    29f6:	2330      	movs	r3, #48	; 0x30
    29f8:	9305      	str	r3, [sp, #20]
    29fa:	2206      	movs	r2, #6
    29fc:	2100      	movs	r1, #0
    29fe:	a806      	add	r0, sp, #24
    2a00:	4b88      	ldr	r3, [pc, #544]	; (2c24 <setTime+0x23c>)
    2a02:	4798      	blx	r3
    2a04:	2300      	movs	r3, #0
    2a06:	9303      	str	r3, [sp, #12]
    2a08:	2600      	movs	r6, #0
    2a0a:	469b      	mov	fp, r3
    2a0c:	e022      	b.n	2a54 <setTime+0x6c>
		else							timeIn[i] = '_';
    2a0e:	225f      	movs	r2, #95	; 0x5f
    2a10:	ab05      	add	r3, sp, #20
    2a12:	559a      	strb	r2, [r3, r6]
    2a14:	e029      	b.n	2a6a <setTime+0x82>
		if (tag>47 && tag<58)	pressed = tag - 48;
    2a16:	9203      	str	r2, [sp, #12]
    2a18:	e081      	b.n	2b1e <setTime+0x136>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    2a1a:	2e01      	cmp	r6, #1
    2a1c:	d100      	bne.n	2a20 <setTime+0x38>
    2a1e:	e090      	b.n	2b42 <setTime+0x15a>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    2a20:	2e03      	cmp	r6, #3
    2a22:	d100      	bne.n	2a26 <setTime+0x3e>
    2a24:	e096      	b.n	2b54 <setTime+0x16c>
    2a26:	2e06      	cmp	r6, #6
    2a28:	d100      	bne.n	2a2c <setTime+0x44>
    2a2a:	e093      	b.n	2b54 <setTime+0x16c>
					timeIn[i] = tag;
    2a2c:	aa05      	add	r2, sp, #20
    2a2e:	5593      	strb	r3, [r2, r6]
					i++;
    2a30:	3601      	adds	r6, #1
    2a32:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==9){		//if ok is pressed
    2a34:	2b0b      	cmp	r3, #11
    2a36:	d100      	bne.n	2a3a <setTime+0x52>
    2a38:	e0b0      	b.n	2b9c <setTime+0x1b4>
    2a3a:	2e09      	cmp	r6, #9
    2a3c:	d100      	bne.n	2a40 <setTime+0x58>
    2a3e:	e0ad      	b.n	2b9c <setTime+0x1b4>
			tempTag = tag;
    2a40:	469b      	mov	fp, r3
		if(i==2 || i==5){
    2a42:	2e02      	cmp	r6, #2
    2a44:	d100      	bne.n	2a48 <setTime+0x60>
    2a46:	e0e6      	b.n	2c16 <setTime+0x22e>
    2a48:	2e05      	cmp	r6, #5
    2a4a:	d100      	bne.n	2a4e <setTime+0x66>
    2a4c:	e0e3      	b.n	2c16 <setTime+0x22e>
	}while(tag != back);
    2a4e:	2b06      	cmp	r3, #6
    2a50:	d100      	bne.n	2a54 <setTime+0x6c>
    2a52:	e0d6      	b.n	2c02 <setTime+0x21a>
		rtc_calendar_get_time(&rtc_instance, &time);
    2a54:	4c74      	ldr	r4, [pc, #464]	; (2c28 <setTime+0x240>)
    2a56:	0021      	movs	r1, r4
    2a58:	4874      	ldr	r0, [pc, #464]	; (2c2c <setTime+0x244>)
    2a5a:	4b75      	ldr	r3, [pc, #468]	; (2c30 <setTime+0x248>)
    2a5c:	4798      	blx	r3
		if (time.second%2 == 1)			timeIn[i] = ' ';
    2a5e:	7823      	ldrb	r3, [r4, #0]
    2a60:	07db      	lsls	r3, r3, #31
    2a62:	d5d4      	bpl.n	2a0e <setTime+0x26>
    2a64:	2220      	movs	r2, #32
    2a66:	ab05      	add	r3, sp, #20
    2a68:	559a      	strb	r2, [r3, r6]
		tag = 0;
    2a6a:	4b72      	ldr	r3, [pc, #456]	; (2c34 <setTime+0x24c>)
    2a6c:	4699      	mov	r9, r3
    2a6e:	2300      	movs	r3, #0
    2a70:	4698      	mov	r8, r3
    2a72:	464a      	mov	r2, r9
    2a74:	7013      	strb	r3, [r2, #0]
		disStart();
    2a76:	4b70      	ldr	r3, [pc, #448]	; (2c38 <setTime+0x250>)
    2a78:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    2a7a:	4c70      	ldr	r4, [pc, #448]	; (2c3c <setTime+0x254>)
    2a7c:	4970      	ldr	r1, [pc, #448]	; (2c40 <setTime+0x258>)
    2a7e:	6820      	ldr	r0, [r4, #0]
    2a80:	4d70      	ldr	r5, [pc, #448]	; (2c44 <setTime+0x25c>)
    2a82:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    2a84:	4970      	ldr	r1, [pc, #448]	; (2c48 <setTime+0x260>)
    2a86:	6820      	ldr	r0, [r4, #0]
    2a88:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2a8a:	4970      	ldr	r1, [pc, #448]	; (2c4c <setTime+0x264>)
    2a8c:	6820      	ldr	r0, [r4, #0]
    2a8e:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    2a90:	496f      	ldr	r1, [pc, #444]	; (2c50 <setTime+0x268>)
    2a92:	6820      	ldr	r0, [r4, #0]
    2a94:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    2a96:	496f      	ldr	r1, [pc, #444]	; (2c54 <setTime+0x26c>)
    2a98:	6820      	ldr	r0, [r4, #0]
    2a9a:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    2a9c:	2184      	movs	r1, #132	; 0x84
    2a9e:	0589      	lsls	r1, r1, #22
    2aa0:	6820      	ldr	r0, [r4, #0]
    2aa2:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2aa4:	4969      	ldr	r1, [pc, #420]	; (2c4c <setTime+0x264>)
    2aa6:	6820      	ldr	r0, [r4, #0]
    2aa8:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Time");
    2aaa:	6820      	ldr	r0, [r4, #0]
    2aac:	4b6a      	ldr	r3, [pc, #424]	; (2c58 <setTime+0x270>)
    2aae:	9301      	str	r3, [sp, #4]
    2ab0:	4643      	mov	r3, r8
    2ab2:	9300      	str	r3, [sp, #0]
    2ab4:	331c      	adds	r3, #28
    2ab6:	2230      	movs	r2, #48	; 0x30
    2ab8:	21f0      	movs	r1, #240	; 0xf0
    2aba:	4f68      	ldr	r7, [pc, #416]	; (2c5c <setTime+0x274>)
    2abc:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "hh:mm:ss    (24h format)");
    2abe:	6820      	ldr	r0, [r4, #0]
    2ac0:	4b67      	ldr	r3, [pc, #412]	; (2c60 <setTime+0x278>)
    2ac2:	9301      	str	r3, [sp, #4]
    2ac4:	4643      	mov	r3, r8
    2ac6:	9300      	str	r3, [sp, #0]
    2ac8:	331c      	adds	r3, #28
    2aca:	2248      	movs	r2, #72	; 0x48
    2acc:	21f0      	movs	r1, #240	; 0xf0
    2ace:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    2ad0:	2180      	movs	r1, #128	; 0x80
    2ad2:	04c9      	lsls	r1, r1, #19
    2ad4:	6820      	ldr	r0, [r4, #0]
    2ad6:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, timeIn);
    2ad8:	6820      	ldr	r0, [r4, #0]
    2ada:	ab05      	add	r3, sp, #20
    2adc:	9301      	str	r3, [sp, #4]
    2ade:	4643      	mov	r3, r8
    2ae0:	9300      	str	r3, [sp, #0]
    2ae2:	331e      	adds	r3, #30
    2ae4:	2278      	movs	r2, #120	; 0x78
    2ae6:	21f5      	movs	r1, #245	; 0xf5
    2ae8:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    2aea:	4958      	ldr	r1, [pc, #352]	; (2c4c <setTime+0x264>)
    2aec:	6820      	ldr	r0, [r4, #0]
    2aee:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2af0:	6820      	ldr	r0, [r4, #0]
    2af2:	495c      	ldr	r1, [pc, #368]	; (2c64 <setTime+0x27c>)
    2af4:	4b5c      	ldr	r3, [pc, #368]	; (2c68 <setTime+0x280>)
    2af6:	4798      	blx	r3
    2af8:	464b      	mov	r3, r9
    2afa:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    2afc:	9803      	ldr	r0, [sp, #12]
    2afe:	4b5b      	ldr	r3, [pc, #364]	; (2c6c <setTime+0x284>)
    2b00:	4798      	blx	r3
		drawBack();
    2b02:	4b5b      	ldr	r3, [pc, #364]	; (2c70 <setTime+0x288>)
    2b04:	4798      	blx	r3
		disEnd();
    2b06:	4b5b      	ldr	r3, [pc, #364]	; (2c74 <setTime+0x28c>)
    2b08:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    2b0a:	464b      	mov	r3, r9
    2b0c:	781b      	ldrb	r3, [r3, #0]
    2b0e:	001a      	movs	r2, r3
    2b10:	3a30      	subs	r2, #48	; 0x30
    2b12:	b2d2      	uxtb	r2, r2
    2b14:	2a09      	cmp	r2, #9
    2b16:	d800      	bhi.n	2b1a <setTime+0x132>
    2b18:	e77d      	b.n	2a16 <setTime+0x2e>
		else					pressed = 0;
    2b1a:	2100      	movs	r1, #0
    2b1c:	9103      	str	r1, [sp, #12]
		if(tag==0)		tempTag = tag;
    2b1e:	2b00      	cmp	r3, #0
    2b20:	d100      	bne.n	2b24 <setTime+0x13c>
    2b22:	469b      	mov	fp, r3
		if (tempTag != tag && tag != 0 && tag!=back){
    2b24:	459b      	cmp	fp, r3
    2b26:	d08c      	beq.n	2a42 <setTime+0x5a>
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d08a      	beq.n	2a42 <setTime+0x5a>
    2b2c:	2b06      	cmp	r3, #6
    2b2e:	d088      	beq.n	2a42 <setTime+0x5a>
			if(tag> 47 && tag<58){
    2b30:	2a09      	cmp	r2, #9
    2b32:	d813      	bhi.n	2b5c <setTime+0x174>
				if(i==0 && tag>50);								//1st digit in hour
    2b34:	2e00      	cmp	r6, #0
    2b36:	d000      	beq.n	2b3a <setTime+0x152>
    2b38:	e76f      	b.n	2a1a <setTime+0x32>
    2b3a:	2b32      	cmp	r3, #50	; 0x32
    2b3c:	d900      	bls.n	2b40 <setTime+0x158>
    2b3e:	e779      	b.n	2a34 <setTime+0x4c>
    2b40:	e76b      	b.n	2a1a <setTime+0x32>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    2b42:	aa05      	add	r2, sp, #20
    2b44:	7812      	ldrb	r2, [r2, #0]
    2b46:	2a32      	cmp	r2, #50	; 0x32
    2b48:	d000      	beq.n	2b4c <setTime+0x164>
    2b4a:	e769      	b.n	2a20 <setTime+0x38>
    2b4c:	2b33      	cmp	r3, #51	; 0x33
    2b4e:	d900      	bls.n	2b52 <setTime+0x16a>
    2b50:	e770      	b.n	2a34 <setTime+0x4c>
    2b52:	e765      	b.n	2a20 <setTime+0x38>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    2b54:	2b35      	cmp	r3, #53	; 0x35
    2b56:	d900      	bls.n	2b5a <setTime+0x172>
    2b58:	e76c      	b.n	2a34 <setTime+0x4c>
    2b5a:	e767      	b.n	2a2c <setTime+0x44>
			} else if(tag == clr){		//if clr is pressed
    2b5c:	2b0a      	cmp	r3, #10
    2b5e:	d00f      	beq.n	2b80 <setTime+0x198>
			} else if(tag==del && i>0){		//if del is pressed
    2b60:	2b09      	cmp	r3, #9
    2b62:	d000      	beq.n	2b66 <setTime+0x17e>
    2b64:	e766      	b.n	2a34 <setTime+0x4c>
    2b66:	2e00      	cmp	r6, #0
    2b68:	d100      	bne.n	2b6c <setTime+0x184>
    2b6a:	e763      	b.n	2a34 <setTime+0x4c>
				if(i==3 || i==6){			//clear last user input
    2b6c:	2e03      	cmp	r6, #3
    2b6e:	d00f      	beq.n	2b90 <setTime+0x1a8>
    2b70:	2e06      	cmp	r6, #6
    2b72:	d00d      	beq.n	2b90 <setTime+0x1a8>
				timeIn[i] = 0;
    2b74:	2100      	movs	r1, #0
    2b76:	aa05      	add	r2, sp, #20
    2b78:	5591      	strb	r1, [r2, r6]
				i--;
    2b7a:	3e01      	subs	r6, #1
    2b7c:	b2f6      	uxtb	r6, r6
    2b7e:	e759      	b.n	2a34 <setTime+0x4c>
					timeIn[i] = 0;
    2b80:	2100      	movs	r1, #0
    2b82:	aa05      	add	r2, sp, #20
    2b84:	5591      	strb	r1, [r2, r6]
					i--;
    2b86:	3e01      	subs	r6, #1
    2b88:	b2f6      	uxtb	r6, r6
				}while(i>0);
    2b8a:	2e00      	cmp	r6, #0
    2b8c:	d1f8      	bne.n	2b80 <setTime+0x198>
    2b8e:	e751      	b.n	2a34 <setTime+0x4c>
					timeIn[i] = 0;
    2b90:	2100      	movs	r1, #0
    2b92:	aa05      	add	r2, sp, #20
    2b94:	5591      	strb	r1, [r2, r6]
					i--;
    2b96:	3e01      	subs	r6, #1
    2b98:	b2f6      	uxtb	r6, r6
    2b9a:	e7eb      	b.n	2b74 <setTime+0x18c>
				timeIn[i] = 0;			// compute time and update to the system
    2b9c:	ac05      	add	r4, sp, #20
    2b9e:	2300      	movs	r3, #0
    2ba0:	55a3      	strb	r3, [r4, r6]
				rtc_calendar_disable(&rtc_instance);
    2ba2:	4822      	ldr	r0, [pc, #136]	; (2c2c <setTime+0x244>)
    2ba4:	4b34      	ldr	r3, [pc, #208]	; (2c78 <setTime+0x290>)
    2ba6:	4798      	blx	r3
				time.hour = (timeIn[0]%48)*10+(timeIn[1]%48);
    2ba8:	7820      	ldrb	r0, [r4, #0]
    2baa:	4f34      	ldr	r7, [pc, #208]	; (2c7c <setTime+0x294>)
    2bac:	2130      	movs	r1, #48	; 0x30
    2bae:	47b8      	blx	r7
    2bb0:	008b      	lsls	r3, r1, #2
    2bb2:	18c9      	adds	r1, r1, r3
    2bb4:	004b      	lsls	r3, r1, #1
    2bb6:	b2dd      	uxtb	r5, r3
    2bb8:	7860      	ldrb	r0, [r4, #1]
    2bba:	2130      	movs	r1, #48	; 0x30
    2bbc:	47b8      	blx	r7
    2bbe:	1869      	adds	r1, r5, r1
    2bc0:	4e19      	ldr	r6, [pc, #100]	; (2c28 <setTime+0x240>)
    2bc2:	70b1      	strb	r1, [r6, #2]
				time.minute = (timeIn[3]%48)*10+(timeIn[4]%48);
    2bc4:	78e0      	ldrb	r0, [r4, #3]
    2bc6:	2130      	movs	r1, #48	; 0x30
    2bc8:	47b8      	blx	r7
    2bca:	008b      	lsls	r3, r1, #2
    2bcc:	18c9      	adds	r1, r1, r3
    2bce:	004b      	lsls	r3, r1, #1
    2bd0:	b2dd      	uxtb	r5, r3
    2bd2:	7920      	ldrb	r0, [r4, #4]
    2bd4:	2130      	movs	r1, #48	; 0x30
    2bd6:	47b8      	blx	r7
    2bd8:	1869      	adds	r1, r5, r1
    2bda:	7071      	strb	r1, [r6, #1]
				time.second = (timeIn[06]%48)*10+(timeIn[7]%48);
    2bdc:	79a0      	ldrb	r0, [r4, #6]
    2bde:	2130      	movs	r1, #48	; 0x30
    2be0:	47b8      	blx	r7
    2be2:	008b      	lsls	r3, r1, #2
    2be4:	18c9      	adds	r1, r1, r3
    2be6:	004b      	lsls	r3, r1, #1
    2be8:	b2dd      	uxtb	r5, r3
    2bea:	79e0      	ldrb	r0, [r4, #7]
    2bec:	2130      	movs	r1, #48	; 0x30
    2bee:	47b8      	blx	r7
    2bf0:	1869      	adds	r1, r5, r1
    2bf2:	7031      	strb	r1, [r6, #0]
				rtc_calendar_set_time(&rtc_instance, &time);
    2bf4:	0031      	movs	r1, r6
    2bf6:	480d      	ldr	r0, [pc, #52]	; (2c2c <setTime+0x244>)
    2bf8:	4b21      	ldr	r3, [pc, #132]	; (2c80 <setTime+0x298>)
    2bfa:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    2bfc:	480b      	ldr	r0, [pc, #44]	; (2c2c <setTime+0x244>)
    2bfe:	4b21      	ldr	r3, [pc, #132]	; (2c84 <setTime+0x29c>)
    2c00:	4798      	blx	r3
	tag = 0;
    2c02:	2200      	movs	r2, #0
    2c04:	4b0b      	ldr	r3, [pc, #44]	; (2c34 <setTime+0x24c>)
    2c06:	701a      	strb	r2, [r3, #0]
}//end setTime
    2c08:	b009      	add	sp, #36	; 0x24
    2c0a:	bc3c      	pop	{r2, r3, r4, r5}
    2c0c:	4690      	mov	r8, r2
    2c0e:	4699      	mov	r9, r3
    2c10:	46a2      	mov	sl, r4
    2c12:	46ab      	mov	fp, r5
    2c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			timeIn[i] = ':';
    2c16:	213a      	movs	r1, #58	; 0x3a
    2c18:	aa05      	add	r2, sp, #20
    2c1a:	5591      	strb	r1, [r2, r6]
			i++;
    2c1c:	3601      	adds	r6, #1
    2c1e:	b2f6      	uxtb	r6, r6
    2c20:	e715      	b.n	2a4e <setTime+0x66>
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	00005103 	.word	0x00005103
    2c28:	2000075c 	.word	0x2000075c
    2c2c:	20000444 	.word	0x20000444
    2c30:	00000555 	.word	0x00000555
    2c34:	200000f1 	.word	0x200000f1
    2c38:	00002329 	.word	0x00002329
    2c3c:	20000764 	.word	0x20000764
    2c40:	1f000009 	.word	0x1f000009
    2c44:	00001eb9 	.word	0x00001eb9
    2c48:	0e00003c 	.word	0x0e00003c
    2c4c:	04ffffff 	.word	0x04ffffff
    2c50:	478006e0 	.word	0x478006e0
    2c54:	51800a00 	.word	0x51800a00
    2c58:	00005abc 	.word	0x00005abc
    2c5c:	00001875 	.word	0x00001875
    2c60:	00005ac8 	.word	0x00005ac8
    2c64:	0030212c 	.word	0x0030212c
    2c68:	00001d49 	.word	0x00001d49
    2c6c:	000020fd 	.word	0x000020fd
    2c70:	000020a1 	.word	0x000020a1
    2c74:	00002355 	.word	0x00002355
    2c78:	00000459 	.word	0x00000459
    2c7c:	00005049 	.word	0x00005049
    2c80:	00000531 	.word	0x00000531
    2c84:	00000439 	.word	0x00000439

00002c88 <setDate>:
void setDate(){
    2c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c8a:	46de      	mov	lr, fp
    2c8c:	4657      	mov	r7, sl
    2c8e:	464e      	mov	r6, r9
    2c90:	4645      	mov	r5, r8
    2c92:	b5e0      	push	{r5, r6, r7, lr}
    2c94:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, pressed = 0, i = 0, month = 0, dateIn[12] = "0";
    2c96:	2330      	movs	r3, #48	; 0x30
    2c98:	9305      	str	r3, [sp, #20]
    2c9a:	2208      	movs	r2, #8
    2c9c:	2100      	movs	r1, #0
    2c9e:	a806      	add	r0, sp, #24
    2ca0:	4bc6      	ldr	r3, [pc, #792]	; (2fbc <setDate+0x334>)
    2ca2:	4798      	blx	r3
    2ca4:	2600      	movs	r6, #0
    2ca6:	2300      	movs	r3, #0
    2ca8:	9303      	str	r3, [sp, #12]
    2caa:	469b      	mov	fp, r3
    2cac:	e028      	b.n	2d00 <setDate+0x78>
		else							dateIn[i] = '_';
    2cae:	225f      	movs	r2, #95	; 0x5f
    2cb0:	ab05      	add	r3, sp, #20
    2cb2:	559a      	strb	r2, [r3, r6]
    2cb4:	e02f      	b.n	2d16 <setDate+0x8e>
		if (tag>47 && tag<58)	pressed = tag - 48;
    2cb6:	9303      	str	r3, [sp, #12]
    2cb8:	e087      	b.n	2dca <setDate+0x142>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    2cba:	2e01      	cmp	r6, #1
    2cbc:	d100      	bne.n	2cc0 <setDate+0x38>
    2cbe:	e096      	b.n	2dee <setDate+0x166>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    2cc0:	2e03      	cmp	r6, #3
    2cc2:	d100      	bne.n	2cc6 <setDate+0x3e>
    2cc4:	e09c      	b.n	2e00 <setDate+0x178>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    2cc6:	2e03      	cmp	r6, #3
    2cc8:	d100      	bne.n	2ccc <setDate+0x44>
    2cca:	e0af      	b.n	2e2c <setDate+0x1a4>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    2ccc:	2e04      	cmp	r6, #4
    2cce:	d100      	bne.n	2cd2 <setDate+0x4a>
    2cd0:	e0c2      	b.n	2e58 <setDate+0x1d0>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    2cd2:	2e04      	cmp	r6, #4
    2cd4:	d100      	bne.n	2cd8 <setDate+0x50>
    2cd6:	e0dc      	b.n	2e92 <setDate+0x20a>
					dateIn[i] = tag;
    2cd8:	ab05      	add	r3, sp, #20
    2cda:	559c      	strb	r4, [r3, r6]
					i++;
    2cdc:	3601      	adds	r6, #1
    2cde:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==11){			//if ok is pressed
    2ce0:	2c0b      	cmp	r4, #11
    2ce2:	d100      	bne.n	2ce6 <setDate+0x5e>
    2ce4:	e112      	b.n	2f0c <setDate+0x284>
    2ce6:	2e0b      	cmp	r6, #11
    2ce8:	d100      	bne.n	2cec <setDate+0x64>
    2cea:	e10f      	b.n	2f0c <setDate+0x284>
			tempTag = tag;
    2cec:	46a3      	mov	fp, r4
		if(i==2 || i==5){
    2cee:	2e02      	cmp	r6, #2
    2cf0:	d100      	bne.n	2cf4 <setDate+0x6c>
    2cf2:	e15d      	b.n	2fb0 <setDate+0x328>
    2cf4:	2e05      	cmp	r6, #5
    2cf6:	d100      	bne.n	2cfa <setDate+0x72>
    2cf8:	e15a      	b.n	2fb0 <setDate+0x328>
	}while(tag != back);
    2cfa:	2c06      	cmp	r4, #6
    2cfc:	d100      	bne.n	2d00 <setDate+0x78>
    2cfe:	e14d      	b.n	2f9c <setDate+0x314>
		rtc_calendar_get_time(&rtc_instance, &time);
    2d00:	4caf      	ldr	r4, [pc, #700]	; (2fc0 <setDate+0x338>)
    2d02:	0021      	movs	r1, r4
    2d04:	48af      	ldr	r0, [pc, #700]	; (2fc4 <setDate+0x33c>)
    2d06:	4bb0      	ldr	r3, [pc, #704]	; (2fc8 <setDate+0x340>)
    2d08:	4798      	blx	r3
		if (time.second%2 == 1)			dateIn[i] = ' ';
    2d0a:	7823      	ldrb	r3, [r4, #0]
    2d0c:	07db      	lsls	r3, r3, #31
    2d0e:	d5ce      	bpl.n	2cae <setDate+0x26>
    2d10:	2220      	movs	r2, #32
    2d12:	ab05      	add	r3, sp, #20
    2d14:	559a      	strb	r2, [r3, r6]
		tag = 0;
    2d16:	4bad      	ldr	r3, [pc, #692]	; (2fcc <setDate+0x344>)
    2d18:	4699      	mov	r9, r3
    2d1a:	2300      	movs	r3, #0
    2d1c:	4698      	mov	r8, r3
    2d1e:	464a      	mov	r2, r9
    2d20:	7013      	strb	r3, [r2, #0]
		disStart();
    2d22:	4bab      	ldr	r3, [pc, #684]	; (2fd0 <setDate+0x348>)
    2d24:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    2d26:	4cab      	ldr	r4, [pc, #684]	; (2fd4 <setDate+0x34c>)
    2d28:	49ab      	ldr	r1, [pc, #684]	; (2fd8 <setDate+0x350>)
    2d2a:	6820      	ldr	r0, [r4, #0]
    2d2c:	4dab      	ldr	r5, [pc, #684]	; (2fdc <setDate+0x354>)
    2d2e:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    2d30:	49ab      	ldr	r1, [pc, #684]	; (2fe0 <setDate+0x358>)
    2d32:	6820      	ldr	r0, [r4, #0]
    2d34:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2d36:	49ab      	ldr	r1, [pc, #684]	; (2fe4 <setDate+0x35c>)
    2d38:	6820      	ldr	r0, [r4, #0]
    2d3a:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    2d3c:	49aa      	ldr	r1, [pc, #680]	; (2fe8 <setDate+0x360>)
    2d3e:	6820      	ldr	r0, [r4, #0]
    2d40:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    2d42:	49aa      	ldr	r1, [pc, #680]	; (2fec <setDate+0x364>)
    2d44:	6820      	ldr	r0, [r4, #0]
    2d46:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    2d48:	2184      	movs	r1, #132	; 0x84
    2d4a:	0589      	lsls	r1, r1, #22
    2d4c:	6820      	ldr	r0, [r4, #0]
    2d4e:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2d50:	49a4      	ldr	r1, [pc, #656]	; (2fe4 <setDate+0x35c>)
    2d52:	6820      	ldr	r0, [r4, #0]
    2d54:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Date");
    2d56:	6820      	ldr	r0, [r4, #0]
    2d58:	4ba5      	ldr	r3, [pc, #660]	; (2ff0 <setDate+0x368>)
    2d5a:	9301      	str	r3, [sp, #4]
    2d5c:	4643      	mov	r3, r8
    2d5e:	9300      	str	r3, [sp, #0]
    2d60:	331c      	adds	r3, #28
    2d62:	2230      	movs	r2, #48	; 0x30
    2d64:	21f0      	movs	r1, #240	; 0xf0
    2d66:	4fa3      	ldr	r7, [pc, #652]	; (2ff4 <setDate+0x36c>)
    2d68:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "mm/dd/yyyy");
    2d6a:	6820      	ldr	r0, [r4, #0]
    2d6c:	4ba2      	ldr	r3, [pc, #648]	; (2ff8 <setDate+0x370>)
    2d6e:	9301      	str	r3, [sp, #4]
    2d70:	4643      	mov	r3, r8
    2d72:	9300      	str	r3, [sp, #0]
    2d74:	331c      	adds	r3, #28
    2d76:	2248      	movs	r2, #72	; 0x48
    2d78:	21f0      	movs	r1, #240	; 0xf0
    2d7a:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    2d7c:	2180      	movs	r1, #128	; 0x80
    2d7e:	04c9      	lsls	r1, r1, #19
    2d80:	6820      	ldr	r0, [r4, #0]
    2d82:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, dateIn);
    2d84:	6820      	ldr	r0, [r4, #0]
    2d86:	ab05      	add	r3, sp, #20
    2d88:	9301      	str	r3, [sp, #4]
    2d8a:	4643      	mov	r3, r8
    2d8c:	9300      	str	r3, [sp, #0]
    2d8e:	331e      	adds	r3, #30
    2d90:	2278      	movs	r2, #120	; 0x78
    2d92:	21f5      	movs	r1, #245	; 0xf5
    2d94:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    2d96:	4993      	ldr	r1, [pc, #588]	; (2fe4 <setDate+0x35c>)
    2d98:	6820      	ldr	r0, [r4, #0]
    2d9a:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2d9c:	6820      	ldr	r0, [r4, #0]
    2d9e:	4997      	ldr	r1, [pc, #604]	; (2ffc <setDate+0x374>)
    2da0:	4b97      	ldr	r3, [pc, #604]	; (3000 <setDate+0x378>)
    2da2:	4798      	blx	r3
    2da4:	464b      	mov	r3, r9
    2da6:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    2da8:	9803      	ldr	r0, [sp, #12]
    2daa:	4b96      	ldr	r3, [pc, #600]	; (3004 <setDate+0x37c>)
    2dac:	4798      	blx	r3
		drawBack();
    2dae:	4b96      	ldr	r3, [pc, #600]	; (3008 <setDate+0x380>)
    2db0:	4798      	blx	r3
		disEnd();
    2db2:	4b96      	ldr	r3, [pc, #600]	; (300c <setDate+0x384>)
    2db4:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    2db6:	464b      	mov	r3, r9
    2db8:	781c      	ldrb	r4, [r3, #0]
    2dba:	0023      	movs	r3, r4
    2dbc:	3b30      	subs	r3, #48	; 0x30
    2dbe:	b2db      	uxtb	r3, r3
    2dc0:	2b09      	cmp	r3, #9
    2dc2:	d800      	bhi.n	2dc6 <setDate+0x13e>
    2dc4:	e777      	b.n	2cb6 <setDate+0x2e>
		else					pressed = 0;
    2dc6:	2200      	movs	r2, #0
    2dc8:	9203      	str	r2, [sp, #12]
		if(tag==0)		tempTag = tag;
    2dca:	2c00      	cmp	r4, #0
    2dcc:	d100      	bne.n	2dd0 <setDate+0x148>
    2dce:	46a3      	mov	fp, r4
		if (tempTag != tag && tag != 0 && tag!=back){
    2dd0:	45a3      	cmp	fp, r4
    2dd2:	d08c      	beq.n	2cee <setDate+0x66>
    2dd4:	2c00      	cmp	r4, #0
    2dd6:	d08a      	beq.n	2cee <setDate+0x66>
    2dd8:	2c06      	cmp	r4, #6
    2dda:	d088      	beq.n	2cee <setDate+0x66>
			if(tag> 47 && tag<58){
    2ddc:	2b09      	cmp	r3, #9
    2dde:	d875      	bhi.n	2ecc <setDate+0x244>
				if(i==0 && tag>49);					//1st in month
    2de0:	2e00      	cmp	r6, #0
    2de2:	d000      	beq.n	2de6 <setDate+0x15e>
    2de4:	e769      	b.n	2cba <setDate+0x32>
    2de6:	2c31      	cmp	r4, #49	; 0x31
    2de8:	d900      	bls.n	2dec <setDate+0x164>
    2dea:	e779      	b.n	2ce0 <setDate+0x58>
    2dec:	e765      	b.n	2cba <setDate+0x32>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    2dee:	ab05      	add	r3, sp, #20
    2df0:	781b      	ldrb	r3, [r3, #0]
    2df2:	2b31      	cmp	r3, #49	; 0x31
    2df4:	d000      	beq.n	2df8 <setDate+0x170>
    2df6:	e763      	b.n	2cc0 <setDate+0x38>
    2df8:	2c32      	cmp	r4, #50	; 0x32
    2dfa:	d900      	bls.n	2dfe <setDate+0x176>
    2dfc:	e770      	b.n	2ce0 <setDate+0x58>
    2dfe:	e75f      	b.n	2cc0 <setDate+0x38>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    2e00:	ad05      	add	r5, sp, #20
    2e02:	7828      	ldrb	r0, [r5, #0]
    2e04:	4b82      	ldr	r3, [pc, #520]	; (3010 <setDate+0x388>)
    2e06:	4698      	mov	r8, r3
    2e08:	2130      	movs	r1, #48	; 0x30
    2e0a:	4798      	blx	r3
    2e0c:	b2cb      	uxtb	r3, r1
    2e0e:	0099      	lsls	r1, r3, #2
    2e10:	18c9      	adds	r1, r1, r3
    2e12:	004f      	lsls	r7, r1, #1
    2e14:	7868      	ldrb	r0, [r5, #1]
    2e16:	2130      	movs	r1, #48	; 0x30
    2e18:	47c0      	blx	r8
    2e1a:	b2c9      	uxtb	r1, r1
    2e1c:	187f      	adds	r7, r7, r1
    2e1e:	2f02      	cmp	r7, #2
    2e20:	d000      	beq.n	2e24 <setDate+0x19c>
    2e22:	e750      	b.n	2cc6 <setDate+0x3e>
    2e24:	2c32      	cmp	r4, #50	; 0x32
    2e26:	d900      	bls.n	2e2a <setDate+0x1a2>
    2e28:	e75a      	b.n	2ce0 <setDate+0x58>
    2e2a:	e74c      	b.n	2cc6 <setDate+0x3e>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    2e2c:	ad05      	add	r5, sp, #20
    2e2e:	7828      	ldrb	r0, [r5, #0]
    2e30:	4b77      	ldr	r3, [pc, #476]	; (3010 <setDate+0x388>)
    2e32:	4698      	mov	r8, r3
    2e34:	2130      	movs	r1, #48	; 0x30
    2e36:	4798      	blx	r3
    2e38:	b2cb      	uxtb	r3, r1
    2e3a:	0099      	lsls	r1, r3, #2
    2e3c:	18c9      	adds	r1, r1, r3
    2e3e:	004f      	lsls	r7, r1, #1
    2e40:	7868      	ldrb	r0, [r5, #1]
    2e42:	2130      	movs	r1, #48	; 0x30
    2e44:	47c0      	blx	r8
    2e46:	b2c9      	uxtb	r1, r1
    2e48:	187f      	adds	r7, r7, r1
    2e4a:	2f02      	cmp	r7, #2
    2e4c:	d100      	bne.n	2e50 <setDate+0x1c8>
    2e4e:	e73d      	b.n	2ccc <setDate+0x44>
    2e50:	2c33      	cmp	r4, #51	; 0x33
    2e52:	d900      	bls.n	2e56 <setDate+0x1ce>
    2e54:	e744      	b.n	2ce0 <setDate+0x58>
    2e56:	e739      	b.n	2ccc <setDate+0x44>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    2e58:	ad05      	add	r5, sp, #20
    2e5a:	7828      	ldrb	r0, [r5, #0]
    2e5c:	4b6c      	ldr	r3, [pc, #432]	; (3010 <setDate+0x388>)
    2e5e:	4698      	mov	r8, r3
    2e60:	2130      	movs	r1, #48	; 0x30
    2e62:	4798      	blx	r3
    2e64:	008b      	lsls	r3, r1, #2
    2e66:	18c9      	adds	r1, r1, r3
    2e68:	004b      	lsls	r3, r1, #1
    2e6a:	b2df      	uxtb	r7, r3
    2e6c:	7868      	ldrb	r0, [r5, #1]
    2e6e:	2130      	movs	r1, #48	; 0x30
    2e70:	47c0      	blx	r8
    2e72:	1879      	adds	r1, r7, r1
    2e74:	b2c8      	uxtb	r0, r1
    2e76:	4b67      	ldr	r3, [pc, #412]	; (3014 <setDate+0x38c>)
    2e78:	4798      	blx	r3
    2e7a:	2800      	cmp	r0, #0
    2e7c:	d000      	beq.n	2e80 <setDate+0x1f8>
    2e7e:	e728      	b.n	2cd2 <setDate+0x4a>
    2e80:	ab05      	add	r3, sp, #20
    2e82:	78db      	ldrb	r3, [r3, #3]
    2e84:	2b33      	cmp	r3, #51	; 0x33
    2e86:	d000      	beq.n	2e8a <setDate+0x202>
    2e88:	e723      	b.n	2cd2 <setDate+0x4a>
    2e8a:	2c30      	cmp	r4, #48	; 0x30
    2e8c:	d900      	bls.n	2e90 <setDate+0x208>
    2e8e:	e727      	b.n	2ce0 <setDate+0x58>
    2e90:	e71f      	b.n	2cd2 <setDate+0x4a>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    2e92:	ad05      	add	r5, sp, #20
    2e94:	7828      	ldrb	r0, [r5, #0]
    2e96:	4b5e      	ldr	r3, [pc, #376]	; (3010 <setDate+0x388>)
    2e98:	4698      	mov	r8, r3
    2e9a:	2130      	movs	r1, #48	; 0x30
    2e9c:	4798      	blx	r3
    2e9e:	008b      	lsls	r3, r1, #2
    2ea0:	18c9      	adds	r1, r1, r3
    2ea2:	004b      	lsls	r3, r1, #1
    2ea4:	b2df      	uxtb	r7, r3
    2ea6:	7868      	ldrb	r0, [r5, #1]
    2ea8:	2130      	movs	r1, #48	; 0x30
    2eaa:	47c0      	blx	r8
    2eac:	1879      	adds	r1, r7, r1
    2eae:	b2c8      	uxtb	r0, r1
    2eb0:	4b58      	ldr	r3, [pc, #352]	; (3014 <setDate+0x38c>)
    2eb2:	4798      	blx	r3
    2eb4:	2800      	cmp	r0, #0
    2eb6:	d100      	bne.n	2eba <setDate+0x232>
    2eb8:	e70e      	b.n	2cd8 <setDate+0x50>
    2eba:	ab05      	add	r3, sp, #20
    2ebc:	78db      	ldrb	r3, [r3, #3]
    2ebe:	2b33      	cmp	r3, #51	; 0x33
    2ec0:	d000      	beq.n	2ec4 <setDate+0x23c>
    2ec2:	e709      	b.n	2cd8 <setDate+0x50>
    2ec4:	2c31      	cmp	r4, #49	; 0x31
    2ec6:	d900      	bls.n	2eca <setDate+0x242>
    2ec8:	e70a      	b.n	2ce0 <setDate+0x58>
    2eca:	e705      	b.n	2cd8 <setDate+0x50>
			}else if(tag == clr){			//if clr is pressed
    2ecc:	2c0a      	cmp	r4, #10
    2ece:	d00f      	beq.n	2ef0 <setDate+0x268>
			}else if(tag==del && i>0){		//if del is pressed
    2ed0:	2c09      	cmp	r4, #9
    2ed2:	d000      	beq.n	2ed6 <setDate+0x24e>
    2ed4:	e704      	b.n	2ce0 <setDate+0x58>
    2ed6:	2e00      	cmp	r6, #0
    2ed8:	d100      	bne.n	2edc <setDate+0x254>
    2eda:	e701      	b.n	2ce0 <setDate+0x58>
				if(i==3 || i==6){			//clear last user input
    2edc:	2e03      	cmp	r6, #3
    2ede:	d00f      	beq.n	2f00 <setDate+0x278>
    2ee0:	2e06      	cmp	r6, #6
    2ee2:	d00d      	beq.n	2f00 <setDate+0x278>
				dateIn[i] = 0;
    2ee4:	2200      	movs	r2, #0
    2ee6:	ab05      	add	r3, sp, #20
    2ee8:	559a      	strb	r2, [r3, r6]
				i--;
    2eea:	3e01      	subs	r6, #1
    2eec:	b2f6      	uxtb	r6, r6
    2eee:	e6f7      	b.n	2ce0 <setDate+0x58>
					dateIn[i] = 0;
    2ef0:	2200      	movs	r2, #0
    2ef2:	ab05      	add	r3, sp, #20
    2ef4:	559a      	strb	r2, [r3, r6]
					i--;
    2ef6:	3e01      	subs	r6, #1
    2ef8:	b2f6      	uxtb	r6, r6
				}while(i>0);
    2efa:	2e00      	cmp	r6, #0
    2efc:	d1f8      	bne.n	2ef0 <setDate+0x268>
    2efe:	e6ef      	b.n	2ce0 <setDate+0x58>
					dateIn[i] = 0;
    2f00:	2200      	movs	r2, #0
    2f02:	ab05      	add	r3, sp, #20
    2f04:	559a      	strb	r2, [r3, r6]
					i--;
    2f06:	3e01      	subs	r6, #1
    2f08:	b2f6      	uxtb	r6, r6
    2f0a:	e7eb      	b.n	2ee4 <setDate+0x25c>
				dateIn[i] = 0;				//compute date and update to system
    2f0c:	ad05      	add	r5, sp, #20
    2f0e:	2300      	movs	r3, #0
    2f10:	55ab      	strb	r3, [r5, r6]
				rtc_calendar_disable(&rtc_instance);
    2f12:	482c      	ldr	r0, [pc, #176]	; (2fc4 <setDate+0x33c>)
    2f14:	4b40      	ldr	r3, [pc, #256]	; (3018 <setDate+0x390>)
    2f16:	4798      	blx	r3
				time.month = (dateIn[0]%48)*10+(dateIn[1]%48);
    2f18:	7828      	ldrb	r0, [r5, #0]
    2f1a:	4e3d      	ldr	r6, [pc, #244]	; (3010 <setDate+0x388>)
    2f1c:	2130      	movs	r1, #48	; 0x30
    2f1e:	47b0      	blx	r6
    2f20:	008b      	lsls	r3, r1, #2
    2f22:	18c9      	adds	r1, r1, r3
    2f24:	004b      	lsls	r3, r1, #1
    2f26:	b2dc      	uxtb	r4, r3
    2f28:	7868      	ldrb	r0, [r5, #1]
    2f2a:	2130      	movs	r1, #48	; 0x30
    2f2c:	47b0      	blx	r6
    2f2e:	1861      	adds	r1, r4, r1
    2f30:	4f23      	ldr	r7, [pc, #140]	; (2fc0 <setDate+0x338>)
    2f32:	7179      	strb	r1, [r7, #5]
				time.day = (dateIn[3]%48)*10+(dateIn[4]%48);
    2f34:	78e8      	ldrb	r0, [r5, #3]
    2f36:	2130      	movs	r1, #48	; 0x30
    2f38:	47b0      	blx	r6
    2f3a:	008b      	lsls	r3, r1, #2
    2f3c:	18c9      	adds	r1, r1, r3
    2f3e:	004b      	lsls	r3, r1, #1
    2f40:	b2dc      	uxtb	r4, r3
    2f42:	7928      	ldrb	r0, [r5, #4]
    2f44:	2130      	movs	r1, #48	; 0x30
    2f46:	47b0      	blx	r6
    2f48:	1861      	adds	r1, r4, r1
    2f4a:	7139      	strb	r1, [r7, #4]
				time.year = (dateIn[6]%48)*1000+(dateIn[7]%48)*100+dateIn[8]%48*10+dateIn[9]%48;
    2f4c:	79a8      	ldrb	r0, [r5, #6]
    2f4e:	2130      	movs	r1, #48	; 0x30
    2f50:	47b0      	blx	r6
    2f52:	b2c9      	uxtb	r1, r1
    2f54:	24fa      	movs	r4, #250	; 0xfa
    2f56:	00a4      	lsls	r4, r4, #2
    2f58:	434c      	muls	r4, r1
    2f5a:	b2a4      	uxth	r4, r4
    2f5c:	79e8      	ldrb	r0, [r5, #7]
    2f5e:	2130      	movs	r1, #48	; 0x30
    2f60:	47b0      	blx	r6
    2f62:	b2c9      	uxtb	r1, r1
    2f64:	2364      	movs	r3, #100	; 0x64
    2f66:	4359      	muls	r1, r3
    2f68:	b289      	uxth	r1, r1
    2f6a:	1864      	adds	r4, r4, r1
    2f6c:	b2a4      	uxth	r4, r4
    2f6e:	7a28      	ldrb	r0, [r5, #8]
    2f70:	2130      	movs	r1, #48	; 0x30
    2f72:	47b0      	blx	r6
    2f74:	b2c9      	uxtb	r1, r1
    2f76:	008b      	lsls	r3, r1, #2
    2f78:	18c9      	adds	r1, r1, r3
    2f7a:	004b      	lsls	r3, r1, #1
    2f7c:	b29b      	uxth	r3, r3
    2f7e:	18e4      	adds	r4, r4, r3
    2f80:	b2a4      	uxth	r4, r4
    2f82:	7a68      	ldrb	r0, [r5, #9]
    2f84:	2130      	movs	r1, #48	; 0x30
    2f86:	47b0      	blx	r6
    2f88:	b2c9      	uxtb	r1, r1
    2f8a:	1864      	adds	r4, r4, r1
    2f8c:	80fc      	strh	r4, [r7, #6]
				rtc_calendar_set_time(&rtc_instance, &time);
    2f8e:	0039      	movs	r1, r7
    2f90:	480c      	ldr	r0, [pc, #48]	; (2fc4 <setDate+0x33c>)
    2f92:	4b22      	ldr	r3, [pc, #136]	; (301c <setDate+0x394>)
    2f94:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    2f96:	480b      	ldr	r0, [pc, #44]	; (2fc4 <setDate+0x33c>)
    2f98:	4b21      	ldr	r3, [pc, #132]	; (3020 <setDate+0x398>)
    2f9a:	4798      	blx	r3
	tag = 0;
    2f9c:	2200      	movs	r2, #0
    2f9e:	4b0b      	ldr	r3, [pc, #44]	; (2fcc <setDate+0x344>)
    2fa0:	701a      	strb	r2, [r3, #0]
}//end setDate
    2fa2:	b009      	add	sp, #36	; 0x24
    2fa4:	bc3c      	pop	{r2, r3, r4, r5}
    2fa6:	4690      	mov	r8, r2
    2fa8:	4699      	mov	r9, r3
    2faa:	46a2      	mov	sl, r4
    2fac:	46ab      	mov	fp, r5
    2fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dateIn[i] = '/';
    2fb0:	222f      	movs	r2, #47	; 0x2f
    2fb2:	ab05      	add	r3, sp, #20
    2fb4:	559a      	strb	r2, [r3, r6]
			i++;
    2fb6:	3601      	adds	r6, #1
    2fb8:	b2f6      	uxtb	r6, r6
    2fba:	e69e      	b.n	2cfa <setDate+0x72>
    2fbc:	00005103 	.word	0x00005103
    2fc0:	2000075c 	.word	0x2000075c
    2fc4:	20000444 	.word	0x20000444
    2fc8:	00000555 	.word	0x00000555
    2fcc:	200000f1 	.word	0x200000f1
    2fd0:	00002329 	.word	0x00002329
    2fd4:	20000764 	.word	0x20000764
    2fd8:	1f000009 	.word	0x1f000009
    2fdc:	00001eb9 	.word	0x00001eb9
    2fe0:	0e00003c 	.word	0x0e00003c
    2fe4:	04ffffff 	.word	0x04ffffff
    2fe8:	478006e0 	.word	0x478006e0
    2fec:	51800a00 	.word	0x51800a00
    2ff0:	00005aa4 	.word	0x00005aa4
    2ff4:	00001875 	.word	0x00001875
    2ff8:	00005ab0 	.word	0x00005ab0
    2ffc:	0030212c 	.word	0x0030212c
    3000:	00001d49 	.word	0x00001d49
    3004:	000020fd 	.word	0x000020fd
    3008:	000020a1 	.word	0x000020a1
    300c:	00002355 	.word	0x00002355
    3010:	00005049 	.word	0x00005049
    3014:	00001eed 	.word	0x00001eed
    3018:	00000459 	.word	0x00000459
    301c:	00000531 	.word	0x00000531
    3020:	00000439 	.word	0x00000439

00003024 <settingOp>:
void settingOp(){
    3024:	b530      	push	{r4, r5, lr}
    3026:	b085      	sub	sp, #20
    3028:	e08a      	b.n	3140 <settingOp+0x11c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    302a:	32ff      	adds	r2, #255	; 0xff
    302c:	e0ab      	b.n	3186 <settingOp+0x162>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    302e:	2200      	movs	r2, #0
    3030:	e0c4      	b.n	31bc <settingOp+0x198>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    3032:	32ff      	adds	r2, #255	; 0xff
    3034:	e0e7      	b.n	3206 <settingOp+0x1e2>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    3036:	2200      	movs	r2, #0
    3038:	4991      	ldr	r1, [pc, #580]	; (3280 <settingOp+0x25c>)
    303a:	9103      	str	r1, [sp, #12]
    303c:	9202      	str	r2, [sp, #8]
    303e:	9301      	str	r3, [sp, #4]
    3040:	2335      	movs	r3, #53	; 0x35
    3042:	9300      	str	r3, [sp, #0]
    3044:	332b      	adds	r3, #43	; 0x2b
    3046:	22b1      	movs	r2, #177	; 0xb1
    3048:	21c8      	movs	r1, #200	; 0xc8
    304a:	0049      	lsls	r1, r1, #1
    304c:	4c8d      	ldr	r4, [pc, #564]	; (3284 <settingOp+0x260>)
    304e:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(cal));
    3050:	4c8d      	ldr	r4, [pc, #564]	; (3288 <settingOp+0x264>)
    3052:	498e      	ldr	r1, [pc, #568]	; (328c <settingOp+0x268>)
    3054:	6820      	ldr	r0, [r4, #0]
    3056:	4b8e      	ldr	r3, [pc, #568]	; (3290 <settingOp+0x26c>)
    3058:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    305a:	6820      	ldr	r0, [r4, #0]
    305c:	4b8d      	ldr	r3, [pc, #564]	; (3294 <settingOp+0x270>)
    305e:	781b      	ldrb	r3, [r3, #0]
    3060:	4a8d      	ldr	r2, [pc, #564]	; (3298 <settingOp+0x274>)
    3062:	7812      	ldrb	r2, [r2, #0]
    3064:	2a07      	cmp	r2, #7
    3066:	d100      	bne.n	306a <settingOp+0x46>
    3068:	e0e9      	b.n	323e <settingOp+0x21a>
    306a:	2200      	movs	r2, #0
    306c:	498b      	ldr	r1, [pc, #556]	; (329c <settingOp+0x278>)
    306e:	9103      	str	r1, [sp, #12]
    3070:	9202      	str	r2, [sp, #8]
    3072:	9301      	str	r3, [sp, #4]
    3074:	2335      	movs	r3, #53	; 0x35
    3076:	9300      	str	r3, [sp, #0]
    3078:	3393      	adds	r3, #147	; 0x93
    307a:	22f0      	movs	r2, #240	; 0xf0
    307c:	2196      	movs	r1, #150	; 0x96
    307e:	0049      	lsls	r1, r1, #1
    3080:	4c80      	ldr	r4, [pc, #512]	; (3284 <settingOp+0x260>)
    3082:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sDate));
    3084:	4c80      	ldr	r4, [pc, #512]	; (3288 <settingOp+0x264>)
    3086:	4986      	ldr	r1, [pc, #536]	; (32a0 <settingOp+0x27c>)
    3088:	6820      	ldr	r0, [r4, #0]
    308a:	4b81      	ldr	r3, [pc, #516]	; (3290 <settingOp+0x26c>)
    308c:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    308e:	6820      	ldr	r0, [r4, #0]
    3090:	4b80      	ldr	r3, [pc, #512]	; (3294 <settingOp+0x270>)
    3092:	781b      	ldrb	r3, [r3, #0]
    3094:	4a80      	ldr	r2, [pc, #512]	; (3298 <settingOp+0x274>)
    3096:	7812      	ldrb	r2, [r2, #0]
    3098:	2a08      	cmp	r2, #8
    309a:	d100      	bne.n	309e <settingOp+0x7a>
    309c:	e0d1      	b.n	3242 <settingOp+0x21e>
    309e:	2200      	movs	r2, #0
    30a0:	4980      	ldr	r1, [pc, #512]	; (32a4 <settingOp+0x280>)
    30a2:	9103      	str	r1, [sp, #12]
    30a4:	9202      	str	r2, [sp, #8]
    30a6:	9301      	str	r3, [sp, #4]
    30a8:	2335      	movs	r3, #53	; 0x35
    30aa:	9300      	str	r3, [sp, #0]
    30ac:	3393      	adds	r3, #147	; 0x93
    30ae:	2297      	movs	r2, #151	; 0x97
    30b0:	0052      	lsls	r2, r2, #1
    30b2:	2196      	movs	r1, #150	; 0x96
    30b4:	0049      	lsls	r1, r1, #1
    30b6:	4c73      	ldr	r4, [pc, #460]	; (3284 <settingOp+0x260>)
    30b8:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sTime));
    30ba:	4c73      	ldr	r4, [pc, #460]	; (3288 <settingOp+0x264>)
    30bc:	497a      	ldr	r1, [pc, #488]	; (32a8 <settingOp+0x284>)
    30be:	6820      	ldr	r0, [r4, #0]
    30c0:	4b73      	ldr	r3, [pc, #460]	; (3290 <settingOp+0x26c>)
    30c2:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    30c4:	6820      	ldr	r0, [r4, #0]
    30c6:	4b73      	ldr	r3, [pc, #460]	; (3294 <settingOp+0x270>)
    30c8:	781b      	ldrb	r3, [r3, #0]
    30ca:	4a73      	ldr	r2, [pc, #460]	; (3298 <settingOp+0x274>)
    30cc:	7812      	ldrb	r2, [r2, #0]
    30ce:	2a05      	cmp	r2, #5
    30d0:	d100      	bne.n	30d4 <settingOp+0xb0>
    30d2:	e0b8      	b.n	3246 <settingOp+0x222>
    30d4:	2200      	movs	r2, #0
    30d6:	4975      	ldr	r1, [pc, #468]	; (32ac <settingOp+0x288>)
    30d8:	9103      	str	r1, [sp, #12]
    30da:	9202      	str	r2, [sp, #8]
    30dc:	9301      	str	r3, [sp, #4]
    30de:	2335      	movs	r3, #53	; 0x35
    30e0:	9300      	str	r3, [sp, #0]
    30e2:	3393      	adds	r3, #147	; 0x93
    30e4:	22b6      	movs	r2, #182	; 0xb6
    30e6:	0052      	lsls	r2, r2, #1
    30e8:	2196      	movs	r1, #150	; 0x96
    30ea:	0049      	lsls	r1, r1, #1
    30ec:	4c65      	ldr	r4, [pc, #404]	; (3284 <settingOp+0x260>)
    30ee:	47a0      	blx	r4
		drawBack();
    30f0:	4b6f      	ldr	r3, [pc, #444]	; (32b0 <settingOp+0x28c>)
    30f2:	4798      	blx	r3
		drawTitle("Settings");
    30f4:	486f      	ldr	r0, [pc, #444]	; (32b4 <settingOp+0x290>)
    30f6:	4b70      	ldr	r3, [pc, #448]	; (32b8 <settingOp+0x294>)
    30f8:	4798      	blx	r3
		disEnd();
    30fa:	4b70      	ldr	r3, [pc, #448]	; (32bc <settingOp+0x298>)
    30fc:	4798      	blx	r3
		if (tag == cal)			calScreen();	//go to calibrate the screen
    30fe:	4b66      	ldr	r3, [pc, #408]	; (3298 <settingOp+0x274>)
    3100:	781b      	ldrb	r3, [r3, #0]
    3102:	2b07      	cmp	r3, #7
    3104:	d100      	bne.n	3108 <settingOp+0xe4>
    3106:	e0a0      	b.n	324a <settingOp+0x226>
		else if (tag == sTime)	setTime();		//set time screen
    3108:	2b05      	cmp	r3, #5
    310a:	d100      	bne.n	310e <settingOp+0xea>
    310c:	e0a0      	b.n	3250 <settingOp+0x22c>
		else if (tag == sDate)	setDate();		//set date screen
    310e:	2b08      	cmp	r3, #8
    3110:	d100      	bne.n	3114 <settingOp+0xf0>
    3112:	e0a0      	b.n	3256 <settingOp+0x232>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    3114:	4b60      	ldr	r3, [pc, #384]	; (3298 <settingOp+0x274>)
    3116:	781b      	ldrb	r3, [r3, #0]
    3118:	2b0c      	cmp	r3, #12
    311a:	d100      	bne.n	311e <settingOp+0xfa>
    311c:	e09e      	b.n	325c <settingOp+0x238>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    311e:	2b0d      	cmp	r3, #13
    3120:	d100      	bne.n	3124 <settingOp+0x100>
    3122:	e09f      	b.n	3264 <settingOp+0x240>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    3124:	2b0f      	cmp	r3, #15
    3126:	d100      	bne.n	312a <settingOp+0x106>
    3128:	e0a0      	b.n	326c <settingOp+0x248>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    312a:	2b0e      	cmp	r3, #14
    312c:	d100      	bne.n	3130 <settingOp+0x10c>
    312e:	e0a1      	b.n	3274 <settingOp+0x250>
		delay_ms(50);
    3130:	2032      	movs	r0, #50	; 0x32
    3132:	4b63      	ldr	r3, [pc, #396]	; (32c0 <settingOp+0x29c>)
    3134:	4798      	blx	r3
	} while (tag != back);
    3136:	4b58      	ldr	r3, [pc, #352]	; (3298 <settingOp+0x274>)
    3138:	781b      	ldrb	r3, [r3, #0]
    313a:	2b06      	cmp	r3, #6
    313c:	d100      	bne.n	3140 <settingOp+0x11c>
    313e:	e09d      	b.n	327c <settingOp+0x258>
		tag = 0;
    3140:	4d55      	ldr	r5, [pc, #340]	; (3298 <settingOp+0x274>)
    3142:	2300      	movs	r3, #0
    3144:	702b      	strb	r3, [r5, #0]
		disStart();
    3146:	4b5f      	ldr	r3, [pc, #380]	; (32c4 <settingOp+0x2a0>)
    3148:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    314a:	4c4f      	ldr	r4, [pc, #316]	; (3288 <settingOp+0x264>)
    314c:	495e      	ldr	r1, [pc, #376]	; (32c8 <settingOp+0x2a4>)
    314e:	6820      	ldr	r0, [r4, #0]
    3150:	4b5e      	ldr	r3, [pc, #376]	; (32cc <settingOp+0x2a8>)
    3152:	4798      	blx	r3
    3154:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3-20, 30, OPT_CENTER, "Visual:");
    3156:	6820      	ldr	r0, [r4, #0]
    3158:	4b5d      	ldr	r3, [pc, #372]	; (32d0 <settingOp+0x2ac>)
    315a:	9301      	str	r3, [sp, #4]
    315c:	23c0      	movs	r3, #192	; 0xc0
    315e:	00db      	lsls	r3, r3, #3
    3160:	9300      	str	r3, [sp, #0]
    3162:	231e      	movs	r3, #30
    3164:	228c      	movs	r2, #140	; 0x8c
    3166:	21c8      	movs	r1, #200	; 0xc8
    3168:	4d5a      	ldr	r5, [pc, #360]	; (32d4 <settingOp+0x2b0>)
    316a:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOn));
    316c:	495a      	ldr	r1, [pc, #360]	; (32d8 <settingOp+0x2b4>)
    316e:	6820      	ldr	r0, [r4, #0]
    3170:	4b47      	ldr	r3, [pc, #284]	; (3290 <settingOp+0x26c>)
    3172:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    3174:	6820      	ldr	r0, [r4, #0]
    3176:	4b47      	ldr	r3, [pc, #284]	; (3294 <settingOp+0x270>)
    3178:	781b      	ldrb	r3, [r3, #0]
    317a:	4a58      	ldr	r2, [pc, #352]	; (32dc <settingOp+0x2b8>)
    317c:	7812      	ldrb	r2, [r2, #0]
    317e:	2a01      	cmp	r2, #1
    3180:	d100      	bne.n	3184 <settingOp+0x160>
    3182:	e752      	b.n	302a <settingOp+0x6>
    3184:	2200      	movs	r2, #0
    3186:	4956      	ldr	r1, [pc, #344]	; (32e0 <settingOp+0x2bc>)
    3188:	9103      	str	r1, [sp, #12]
    318a:	9202      	str	r2, [sp, #8]
    318c:	9301      	str	r3, [sp, #4]
    318e:	2335      	movs	r3, #53	; 0x35
    3190:	9300      	str	r3, [sp, #0]
    3192:	332b      	adds	r3, #43	; 0x2b
    3194:	2273      	movs	r2, #115	; 0x73
    3196:	2196      	movs	r1, #150	; 0x96
    3198:	0049      	lsls	r1, r1, #1
    319a:	4c3a      	ldr	r4, [pc, #232]	; (3284 <settingOp+0x260>)
    319c:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOff));
    319e:	4c3a      	ldr	r4, [pc, #232]	; (3288 <settingOp+0x264>)
    31a0:	4950      	ldr	r1, [pc, #320]	; (32e4 <settingOp+0x2c0>)
    31a2:	6820      	ldr	r0, [r4, #0]
    31a4:	4b3a      	ldr	r3, [pc, #232]	; (3290 <settingOp+0x26c>)
    31a6:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    31a8:	6820      	ldr	r0, [r4, #0]
    31aa:	4b3a      	ldr	r3, [pc, #232]	; (3294 <settingOp+0x270>)
    31ac:	781b      	ldrb	r3, [r3, #0]
    31ae:	4a4b      	ldr	r2, [pc, #300]	; (32dc <settingOp+0x2b8>)
    31b0:	7812      	ldrb	r2, [r2, #0]
    31b2:	2a00      	cmp	r2, #0
    31b4:	d000      	beq.n	31b8 <settingOp+0x194>
    31b6:	e73a      	b.n	302e <settingOp+0xa>
    31b8:	3201      	adds	r2, #1
    31ba:	32ff      	adds	r2, #255	; 0xff
    31bc:	4930      	ldr	r1, [pc, #192]	; (3280 <settingOp+0x25c>)
    31be:	9103      	str	r1, [sp, #12]
    31c0:	9202      	str	r2, [sp, #8]
    31c2:	9301      	str	r3, [sp, #4]
    31c4:	2335      	movs	r3, #53	; 0x35
    31c6:	9300      	str	r3, [sp, #0]
    31c8:	332b      	adds	r3, #43	; 0x2b
    31ca:	2273      	movs	r2, #115	; 0x73
    31cc:	21c8      	movs	r1, #200	; 0xc8
    31ce:	0049      	lsls	r1, r1, #1
    31d0:	4c2c      	ldr	r4, [pc, #176]	; (3284 <settingOp+0x260>)
    31d2:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3+30, 30, OPT_CENTER, "Sound: ");
    31d4:	4c2c      	ldr	r4, [pc, #176]	; (3288 <settingOp+0x264>)
    31d6:	6820      	ldr	r0, [r4, #0]
    31d8:	4b43      	ldr	r3, [pc, #268]	; (32e8 <settingOp+0x2c4>)
    31da:	9301      	str	r3, [sp, #4]
    31dc:	23c0      	movs	r3, #192	; 0xc0
    31de:	00db      	lsls	r3, r3, #3
    31e0:	9300      	str	r3, [sp, #0]
    31e2:	231e      	movs	r3, #30
    31e4:	22be      	movs	r2, #190	; 0xbe
    31e6:	21c8      	movs	r1, #200	; 0xc8
    31e8:	4d3a      	ldr	r5, [pc, #232]	; (32d4 <settingOp+0x2b0>)
    31ea:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOn));
    31ec:	493f      	ldr	r1, [pc, #252]	; (32ec <settingOp+0x2c8>)
    31ee:	6820      	ldr	r0, [r4, #0]
    31f0:	4b27      	ldr	r3, [pc, #156]	; (3290 <settingOp+0x26c>)
    31f2:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    31f4:	6820      	ldr	r0, [r4, #0]
    31f6:	4b27      	ldr	r3, [pc, #156]	; (3294 <settingOp+0x270>)
    31f8:	781b      	ldrb	r3, [r3, #0]
    31fa:	4a3d      	ldr	r2, [pc, #244]	; (32f0 <settingOp+0x2cc>)
    31fc:	7812      	ldrb	r2, [r2, #0]
    31fe:	2a01      	cmp	r2, #1
    3200:	d100      	bne.n	3204 <settingOp+0x1e0>
    3202:	e716      	b.n	3032 <settingOp+0xe>
    3204:	2200      	movs	r2, #0
    3206:	4936      	ldr	r1, [pc, #216]	; (32e0 <settingOp+0x2bc>)
    3208:	9103      	str	r1, [sp, #12]
    320a:	9202      	str	r2, [sp, #8]
    320c:	9301      	str	r3, [sp, #4]
    320e:	2335      	movs	r3, #53	; 0x35
    3210:	9300      	str	r3, [sp, #0]
    3212:	332b      	adds	r3, #43	; 0x2b
    3214:	22b1      	movs	r2, #177	; 0xb1
    3216:	2196      	movs	r1, #150	; 0x96
    3218:	0049      	lsls	r1, r1, #1
    321a:	4c1a      	ldr	r4, [pc, #104]	; (3284 <settingOp+0x260>)
    321c:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOff));
    321e:	4c1a      	ldr	r4, [pc, #104]	; (3288 <settingOp+0x264>)
    3220:	4934      	ldr	r1, [pc, #208]	; (32f4 <settingOp+0x2d0>)
    3222:	6820      	ldr	r0, [r4, #0]
    3224:	4b1a      	ldr	r3, [pc, #104]	; (3290 <settingOp+0x26c>)
    3226:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    3228:	6820      	ldr	r0, [r4, #0]
    322a:	4b1a      	ldr	r3, [pc, #104]	; (3294 <settingOp+0x270>)
    322c:	781b      	ldrb	r3, [r3, #0]
    322e:	4a30      	ldr	r2, [pc, #192]	; (32f0 <settingOp+0x2cc>)
    3230:	7812      	ldrb	r2, [r2, #0]
    3232:	2a00      	cmp	r2, #0
    3234:	d000      	beq.n	3238 <settingOp+0x214>
    3236:	e6fe      	b.n	3036 <settingOp+0x12>
    3238:	3201      	adds	r2, #1
    323a:	32ff      	adds	r2, #255	; 0xff
    323c:	e6fc      	b.n	3038 <settingOp+0x14>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    323e:	32f9      	adds	r2, #249	; 0xf9
    3240:	e714      	b.n	306c <settingOp+0x48>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    3242:	32f8      	adds	r2, #248	; 0xf8
    3244:	e72c      	b.n	30a0 <settingOp+0x7c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    3246:	32fb      	adds	r2, #251	; 0xfb
    3248:	e745      	b.n	30d6 <settingOp+0xb2>
		if (tag == cal)			calScreen();	//go to calibrate the screen
    324a:	4b2b      	ldr	r3, [pc, #172]	; (32f8 <settingOp+0x2d4>)
    324c:	4798      	blx	r3
    324e:	e761      	b.n	3114 <settingOp+0xf0>
		else if (tag == sTime)	setTime();		//set time screen
    3250:	4b2a      	ldr	r3, [pc, #168]	; (32fc <settingOp+0x2d8>)
    3252:	4798      	blx	r3
    3254:	e75e      	b.n	3114 <settingOp+0xf0>
		else if (tag == sDate)	setDate();		//set date screen
    3256:	4b2a      	ldr	r3, [pc, #168]	; (3300 <settingOp+0x2dc>)
    3258:	4798      	blx	r3
    325a:	e75b      	b.n	3114 <settingOp+0xf0>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    325c:	2101      	movs	r1, #1
    325e:	4a1f      	ldr	r2, [pc, #124]	; (32dc <settingOp+0x2b8>)
    3260:	7011      	strb	r1, [r2, #0]
    3262:	e75c      	b.n	311e <settingOp+0xfa>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    3264:	2100      	movs	r1, #0
    3266:	4a1d      	ldr	r2, [pc, #116]	; (32dc <settingOp+0x2b8>)
    3268:	7011      	strb	r1, [r2, #0]
    326a:	e75b      	b.n	3124 <settingOp+0x100>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    326c:	2100      	movs	r1, #0
    326e:	4a20      	ldr	r2, [pc, #128]	; (32f0 <settingOp+0x2cc>)
    3270:	7011      	strb	r1, [r2, #0]
    3272:	e75a      	b.n	312a <settingOp+0x106>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    3274:	2201      	movs	r2, #1
    3276:	4b1e      	ldr	r3, [pc, #120]	; (32f0 <settingOp+0x2cc>)
    3278:	701a      	strb	r2, [r3, #0]
    327a:	e759      	b.n	3130 <settingOp+0x10c>
}//end settOp
    327c:	b005      	add	sp, #20
    327e:	bd30      	pop	{r4, r5, pc}
    3280:	00005af0 	.word	0x00005af0
    3284:	00001989 	.word	0x00001989
    3288:	20000764 	.word	0x20000764
    328c:	03000007 	.word	0x03000007
    3290:	00001eb9 	.word	0x00001eb9
    3294:	20000009 	.word	0x20000009
    3298:	200000f1 	.word	0x200000f1
    329c:	00005afc 	.word	0x00005afc
    32a0:	03000008 	.word	0x03000008
    32a4:	00005b14 	.word	0x00005b14
    32a8:	03000005 	.word	0x03000005
    32ac:	00005b24 	.word	0x00005b24
    32b0:	000020a1 	.word	0x000020a1
    32b4:	00005b34 	.word	0x00005b34
    32b8:	00002021 	.word	0x00002021
    32bc:	00002355 	.word	0x00002355
    32c0:	00000151 	.word	0x00000151
    32c4:	00002329 	.word	0x00002329
    32c8:	0030212c 	.word	0x0030212c
    32cc:	00001d49 	.word	0x00001d49
    32d0:	00005ae4 	.word	0x00005ae4
    32d4:	00001875 	.word	0x00001875
    32d8:	0300000c 	.word	0x0300000c
    32dc:	20000008 	.word	0x20000008
    32e0:	00005aec 	.word	0x00005aec
    32e4:	0300000d 	.word	0x0300000d
    32e8:	00005af4 	.word	0x00005af4
    32ec:	0300000e 	.word	0x0300000e
    32f0:	200000f0 	.word	0x200000f0
    32f4:	0300000f 	.word	0x0300000f
    32f8:	00002995 	.word	0x00002995
    32fc:	000029e9 	.word	0x000029e9
    3300:	00002c89 	.word	0x00002c89

00003304 <configure_ext_ints>:
/* Function Name    : configure_ext_ints
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt
	*/
void configure_ext_ints(void){
    3304:	b500      	push	{lr}
    3306:	b085      	sub	sp, #20
	// struct for external interrupt config
	struct extint_chan_conf ext_int_config;
	    
	// configure the external interrupt
	ext_int_config.gpio_pin            = LCD_INT;
    3308:	a901      	add	r1, sp, #4
    330a:	2309      	movs	r3, #9
    330c:	9301      	str	r3, [sp, #4]
	ext_int_config.gpio_pin_mux        = LCD_INT_PINMUX;
    330e:	604b      	str	r3, [r1, #4]
	ext_int_config.gpio_pin_pull       = LCD_INT_PULL;
    3310:	2300      	movs	r3, #0
    3312:	720b      	strb	r3, [r1, #8]
	ext_int_config.wake_if_sleeping    = true;
    3314:	2201      	movs	r2, #1
    3316:	724a      	strb	r2, [r1, #9]
	ext_int_config.filter_input_signal = false;
    3318:	728b      	strb	r3, [r1, #10]
	ext_int_config.detection_criteria  = LCD_INT_DETECT;
    331a:	3305      	adds	r3, #5
    331c:	72cb      	strb	r3, [r1, #11]

	extint_chan_set_config(LCD_INT_LINE, &ext_int_config);
    331e:	2009      	movs	r0, #9
    3320:	4b01      	ldr	r3, [pc, #4]	; (3328 <configure_ext_ints+0x24>)
    3322:	4798      	blx	r3
}//end configure_ext_ints
    3324:	b005      	add	sp, #20
    3326:	bd00      	pop	{pc}
    3328:	000003bd 	.word	0x000003bd

0000332c <configure_ext_int_callback>:
/* Function Name    : configure_ext_int_callback
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt callback
	*/
void configure_ext_int_callback(void){
    332c:	b510      	push	{r4, lr}
	// register callback for the LCD's interrupt
	extint_register_callback(lcd_interrupt_callback, LCD_INT_LINE, \
    332e:	2205      	movs	r2, #5
    3330:	2109      	movs	r1, #9
    3332:	4802      	ldr	r0, [pc, #8]	; (333c <configure_ext_int_callback+0x10>)
    3334:	4b02      	ldr	r3, [pc, #8]	; (3340 <configure_ext_int_callback+0x14>)
    3336:	4798      	blx	r3
	    LCD_INT_DETECT);
}//end configure_ext_int_callback
    3338:	bd10      	pop	{r4, pc}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	0000390d 	.word	0x0000390d
    3340:	00000275 	.word	0x00000275

00003344 <configure_rtc_calendar>:
/* Function Name    : configure_rtc_calendar
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config the rtc and set time to 00:00:00 01/01/2000
	*/
void configure_rtc_calendar(void){
    3344:	b530      	push	{r4, r5, lr}
    3346:	b089      	sub	sp, #36	; 0x24
	//initial time
	time.year   = 2017;
    3348:	4b26      	ldr	r3, [pc, #152]	; (33e4 <configure_rtc_calendar+0xa0>)
    334a:	4a27      	ldr	r2, [pc, #156]	; (33e8 <configure_rtc_calendar+0xa4>)
    334c:	80da      	strh	r2, [r3, #6]
	time.month  = 12;
    334e:	220c      	movs	r2, #12
    3350:	715a      	strb	r2, [r3, #5]
	time.day    = 31;
    3352:	3213      	adds	r2, #19
    3354:	711a      	strb	r2, [r3, #4]
	time.hour   = 23;
    3356:	3a08      	subs	r2, #8
    3358:	709a      	strb	r2, [r3, #2]
	time.minute = 59;
    335a:	3224      	adds	r2, #36	; 0x24
    335c:	705a      	strb	r2, [r3, #1]
	time.second = 55;
    335e:	3a04      	subs	r2, #4
    3360:	701a      	strb	r2, [r3, #0]
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    3362:	aa01      	add	r2, sp, #4
    3364:	2300      	movs	r3, #0
    3366:	7013      	strb	r3, [r2, #0]
	time->minute = 0;
    3368:	7053      	strb	r3, [r2, #1]
	time->hour   = 0;
    336a:	7093      	strb	r3, [r2, #2]
	time->pm     = 0;
    336c:	70d3      	strb	r3, [r2, #3]
	time->day    = 1;
    336e:	2101      	movs	r1, #1
    3370:	7111      	strb	r1, [r2, #4]
	time->month  = 1;
    3372:	7151      	strb	r1, [r2, #5]
	time->year   = 2000;
    3374:	21fa      	movs	r1, #250	; 0xfa
    3376:	00c9      	lsls	r1, r1, #3
    3378:	80d1      	strh	r1, [r2, #6]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    337a:	aa03      	add	r2, sp, #12
    337c:	20a0      	movs	r0, #160	; 0xa0
    337e:	0100      	lsls	r0, r0, #4
    3380:	8010      	strh	r0, [r2, #0]
	config->clear_on_match      = false;
    3382:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3384:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
    3386:	7113      	strb	r3, [r2, #4]
	config->year_init_value     = 2000;
    3388:	80d1      	strh	r1, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    338a:	2400      	movs	r4, #0
    338c:	2c00      	cmp	r4, #0
    338e:	d014      	beq.n	33ba <configure_rtc_calendar+0x76>
		
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	config_rtc_calendar.clock_24h     = true;
    3390:	aa03      	add	r2, sp, #12
    3392:	2301      	movs	r3, #1
    3394:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3396:	4c15      	ldr	r4, [pc, #84]	; (33ec <configure_rtc_calendar+0xa8>)
    3398:	4915      	ldr	r1, [pc, #84]	; (33f0 <configure_rtc_calendar+0xac>)
    339a:	0020      	movs	r0, r4
    339c:	4b15      	ldr	r3, [pc, #84]	; (33f4 <configure_rtc_calendar+0xb0>)
    339e:	4798      	blx	r3
		
	rtc_calendar_set_time(&rtc_instance, &time);
    33a0:	4910      	ldr	r1, [pc, #64]	; (33e4 <configure_rtc_calendar+0xa0>)
    33a2:	0020      	movs	r0, r4
    33a4:	4b14      	ldr	r3, [pc, #80]	; (33f8 <configure_rtc_calendar+0xb4>)
    33a6:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    33a8:	0020      	movs	r0, r4
    33aa:	4b14      	ldr	r3, [pc, #80]	; (33fc <configure_rtc_calendar+0xb8>)
    33ac:	4798      	blx	r3
	// adjust the frequency (the clock is slow atm)
	rtc_calendar_frequency_correction(&rtc_instance, 127);
    33ae:	217f      	movs	r1, #127	; 0x7f
    33b0:	0020      	movs	r0, r4
    33b2:	4b13      	ldr	r3, [pc, #76]	; (3400 <configure_rtc_calendar+0xbc>)
    33b4:	4798      	blx	r3
}//end configure_rtc_calendar
    33b6:	b009      	add	sp, #36	; 0x24
    33b8:	bd30      	pop	{r4, r5, pc}
		config->alarm[i].time = time;
    33ba:	00a5      	lsls	r5, r4, #2
    33bc:	192b      	adds	r3, r5, r4
    33be:	0058      	lsls	r0, r3, #1
    33c0:	ab03      	add	r3, sp, #12
    33c2:	469c      	mov	ip, r3
    33c4:	4460      	add	r0, ip
    33c6:	3008      	adds	r0, #8
    33c8:	2208      	movs	r2, #8
    33ca:	a901      	add	r1, sp, #4
    33cc:	4b0d      	ldr	r3, [pc, #52]	; (3404 <configure_rtc_calendar+0xc0>)
    33ce:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    33d0:	192d      	adds	r5, r5, r4
    33d2:	006b      	lsls	r3, r5, #1
    33d4:	aa03      	add	r2, sp, #12
    33d6:	4694      	mov	ip, r2
    33d8:	4463      	add	r3, ip
    33da:	2206      	movs	r2, #6
    33dc:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    33de:	3401      	adds	r4, #1
    33e0:	b2e4      	uxtb	r4, r4
    33e2:	e7d3      	b.n	338c <configure_rtc_calendar+0x48>
    33e4:	2000075c 	.word	0x2000075c
    33e8:	000007e1 	.word	0x000007e1
    33ec:	20000444 	.word	0x20000444
    33f0:	40001400 	.word	0x40001400
    33f4:	00000651 	.word	0x00000651
    33f8:	00000531 	.word	0x00000531
    33fc:	00000439 	.word	0x00000439
    3400:	000006b1 	.word	0x000006b1
    3404:	000050f1 	.word	0x000050f1

00003408 <clock_osc32k_init>:
/* Function Name    : clock_osc32k_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config internal oscillator 32 kHz
	*/
void clock_osc32k_init(void){
    3408:	b500      	push	{lr}
    340a:	b083      	sub	sp, #12
	config->enable_1khz_output  = true;
    340c:	2301      	movs	r3, #1
    340e:	466a      	mov	r2, sp
    3410:	7053      	strb	r3, [r2, #1]
	config->enable_32khz_output = true;
    3412:	7093      	strb	r3, [r2, #2]
	config->run_in_standby      = false;
    3414:	2200      	movs	r2, #0
    3416:	4669      	mov	r1, sp
    3418:	70ca      	strb	r2, [r1, #3]
	config->on_demand           = true;
    341a:	710b      	strb	r3, [r1, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    341c:	3306      	adds	r3, #6
    341e:	700b      	strb	r3, [r1, #0]
	config->write_once          = false;
    3420:	714a      	strb	r2, [r1, #5]
	osc32_config.on_demand				= true;
	osc32_config.run_in_standby			= false;
	osc32_config.startup_time			= SYSTEM_OSC32K_STARTUP_130;
	osc32_config.write_once				= false;
	
	system_clock_source_osc32k_set_config(&osc32_config);
    3422:	4668      	mov	r0, sp
    3424:	4b01      	ldr	r3, [pc, #4]	; (342c <clock_osc32k_init+0x24>)
    3426:	4798      	blx	r3
}//end clock_osc32k_init
    3428:	b003      	add	sp, #12
    342a:	bd00      	pop	{pc}
    342c:	0000447d 	.word	0x0000447d

00003430 <clock_gclk2_init>:
/* Function Name    : clock_gclk2_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : turn on glck using internal 32 kHz oscillator
	*/
void clock_gclk2_init(void){
    3430:	b500      	push	{lr}
    3432:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk2_config;
		
	system_gclk_init();
    3434:	4b09      	ldr	r3, [pc, #36]	; (345c <clock_gclk2_init+0x2c>)
    3436:	4798      	blx	r3
		
	gclk2_config.source_clock			= SYSTEM_CLOCK_SOURCE_OSC32K;
    3438:	a901      	add	r1, sp, #4
    343a:	2304      	movs	r3, #4
    343c:	700b      	strb	r3, [r1, #0]
	gclk2_config.output_enable			= false;
    343e:	2300      	movs	r3, #0
    3440:	724b      	strb	r3, [r1, #9]
	gclk2_config.high_when_disabled		= false;
    3442:	704b      	strb	r3, [r1, #1]
	gclk2_config.division_factor		= 32;
    3444:	2220      	movs	r2, #32
    3446:	604a      	str	r2, [r1, #4]
	gclk2_config.run_in_standby			= false;
    3448:	720b      	strb	r3, [r1, #8]
		
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclk2_config);
    344a:	2002      	movs	r0, #2
    344c:	4b04      	ldr	r3, [pc, #16]	; (3460 <clock_gclk2_init+0x30>)
    344e:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    3450:	2002      	movs	r0, #2
    3452:	4b04      	ldr	r3, [pc, #16]	; (3464 <clock_gclk2_init+0x34>)
    3454:	4798      	blx	r3
}//end clock_gclk2_init
    3456:	b005      	add	sp, #20
    3458:	bd00      	pop	{pc}
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	00004669 	.word	0x00004669
    3460:	0000468d 	.word	0x0000468d
    3464:	0000475d 	.word	0x0000475d

00003468 <lcd_spi_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for communicating with the LCD
 */
void lcd_spi_init(void)
{
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	46c6      	mov	lr, r8
    346c:	b500      	push	{lr}
    346e:	b090      	sub	sp, #64	; 0x40
    if(lcd_init_complete == true)
    3470:	4b34      	ldr	r3, [pc, #208]	; (3544 <lcd_spi_init+0xdc>)
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	2b00      	cmp	r3, #0
    3476:	d003      	beq.n	3480 <lcd_spi_init+0x18>
    spi_enable(&lcd_master);
	

    
    lcd_init_complete = true;
}
    3478:	b010      	add	sp, #64	; 0x40
    347a:	bc04      	pop	{r2}
    347c:	4690      	mov	r8, r2
    347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	config->address_enabled = false;
    3480:	aa01      	add	r2, sp, #4
    3482:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3484:	7093      	strb	r3, [r2, #2]
    lcd_init_slave_config.ss_pin = LCD_CS;
    3486:	212d      	movs	r1, #45	; 0x2d
    3488:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    348a:	4c2f      	ldr	r4, [pc, #188]	; (3548 <lcd_spi_init+0xe0>)
    348c:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    348e:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3490:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3492:	2201      	movs	r2, #1
    3494:	4669      	mov	r1, sp
    3496:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3498:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    349a:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    349c:	202d      	movs	r0, #45	; 0x2d
    349e:	4b2b      	ldr	r3, [pc, #172]	; (354c <lcd_spi_init+0xe4>)
    34a0:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    34a2:	7823      	ldrb	r3, [r4, #0]
	uint8_t port_index  = (gpio_pin / 128);
    34a4:	09d9      	lsrs	r1, r3, #7
	uint8_t group_index = (gpio_pin / 32);
    34a6:	095a      	lsrs	r2, r3, #5
	if (port_index < PORT_INST_NUM) {
    34a8:	2900      	cmp	r1, #0
    34aa:	d149      	bne.n	3540 <lcd_spi_init+0xd8>
		return &(ports[port_index]->Group[group_index]);
    34ac:	01d2      	lsls	r2, r2, #7
    34ae:	4928      	ldr	r1, [pc, #160]	; (3550 <lcd_spi_init+0xe8>)
    34b0:	468c      	mov	ip, r1
    34b2:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    34b4:	271f      	movs	r7, #31
    34b6:	403b      	ands	r3, r7
    34b8:	2501      	movs	r5, #1
    34ba:	0029      	movs	r1, r5
    34bc:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    34be:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    34c0:	ac02      	add	r4, sp, #8
    34c2:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    34c4:	2600      	movs	r6, #0
    34c6:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    34c8:	60a6      	str	r6, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    34ca:	23c0      	movs	r3, #192	; 0xc0
    34cc:	039b      	lsls	r3, r3, #14
    34ce:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    34d0:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
    34d2:	7466      	strb	r6, [r4, #17]
	config->receiver_enable  = true;
    34d4:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    34d6:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    34d8:	7526      	strb	r6, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    34da:	2324      	movs	r3, #36	; 0x24
    34dc:	4698      	mov	r8, r3
    34de:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    34e0:	220c      	movs	r2, #12
    34e2:	2100      	movs	r1, #0
    34e4:	a808      	add	r0, sp, #32
    34e6:	4b1b      	ldr	r3, [pc, #108]	; (3554 <lcd_spi_init+0xec>)
    34e8:	4798      	blx	r3
    lcd_init_master_config.mux_setting = LCD_PINMUX_SETTING;
    34ea:	2380      	movs	r3, #128	; 0x80
    34ec:	025b      	lsls	r3, r3, #9
    34ee:	60e3      	str	r3, [r4, #12]
    lcd_init_master_config.pinmux_pad0 = LCD_MISO_PAD;
    34f0:	4b19      	ldr	r3, [pc, #100]	; (3558 <lcd_spi_init+0xf0>)
    34f2:	62a3      	str	r3, [r4, #40]	; 0x28
    lcd_init_master_config.pinmux_pad1 = LCD_UNUSED; 
    34f4:	2301      	movs	r3, #1
    34f6:	425b      	negs	r3, r3
    34f8:	62e3      	str	r3, [r4, #44]	; 0x2c
    lcd_init_master_config.pinmux_pad2 = LCD_MOSI_PAD;
    34fa:	4b18      	ldr	r3, [pc, #96]	; (355c <lcd_spi_init+0xf4>)
    34fc:	6323      	str	r3, [r4, #48]	; 0x30
    lcd_init_master_config.pinmux_pad3 = LCD_SCK_PAD;
    34fe:	4b18      	ldr	r3, [pc, #96]	; (3560 <lcd_spi_init+0xf8>)
    3500:	6363      	str	r3, [r4, #52]	; 0x34
	lcd_init_master_config.generator_source = LCD_SPI_SOURCE_CLOCK;
    3502:	4643      	mov	r3, r8
    3504:	54e6      	strb	r6, [r4, r3]
	lcd_init_master_config.mode_specific.master.baudrate = LCD_SPI_MAX_CLOCK;
    3506:	4b17      	ldr	r3, [pc, #92]	; (3564 <lcd_spi_init+0xfc>)
    3508:	61a3      	str	r3, [r4, #24]
    spi_init(&lcd_master, LCD_SPI, &lcd_init_master_config);
    350a:	4e17      	ldr	r6, [pc, #92]	; (3568 <lcd_spi_init+0x100>)
    350c:	0022      	movs	r2, r4
    350e:	4917      	ldr	r1, [pc, #92]	; (356c <lcd_spi_init+0x104>)
    3510:	0030      	movs	r0, r6
    3512:	4b17      	ldr	r3, [pc, #92]	; (3570 <lcd_spi_init+0x108>)
    3514:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3516:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3518:	0020      	movs	r0, r4
    351a:	4b16      	ldr	r3, [pc, #88]	; (3574 <lcd_spi_init+0x10c>)
    351c:	4798      	blx	r3
    351e:	4038      	ands	r0, r7
    3520:	4085      	lsls	r5, r0
    3522:	4b15      	ldr	r3, [pc, #84]	; (3578 <lcd_spi_init+0x110>)
    3524:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3526:	4b10      	ldr	r3, [pc, #64]	; (3568 <lcd_spi_init+0x100>)
    3528:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    352a:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    352c:	2b00      	cmp	r3, #0
    352e:	d1fa      	bne.n	3526 <lcd_spi_init+0xbe>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3530:	6823      	ldr	r3, [r4, #0]
    3532:	2202      	movs	r2, #2
    3534:	4313      	orrs	r3, r2
    3536:	6023      	str	r3, [r4, #0]
    lcd_init_complete = true;
    3538:	3a01      	subs	r2, #1
    353a:	4b02      	ldr	r3, [pc, #8]	; (3544 <lcd_spi_init+0xdc>)
    353c:	701a      	strb	r2, [r3, #0]
    353e:	e79b      	b.n	3478 <lcd_spi_init+0x10>
		return NULL;
    3540:	2200      	movs	r2, #0
    3542:	e7b7      	b.n	34b4 <lcd_spi_init+0x4c>
    3544:	200000f3 	.word	0x200000f3
    3548:	20000990 	.word	0x20000990
    354c:	000042f1 	.word	0x000042f1
    3550:	41004400 	.word	0x41004400
    3554:	00005103 	.word	0x00005103
    3558:	002c0002 	.word	0x002c0002
    355c:	002e0002 	.word	0x002e0002
    3560:	002f0002 	.word	0x002f0002
    3564:	000f4240 	.word	0x000f4240
    3568:	20000994 	.word	0x20000994
    356c:	42001800 	.word	0x42001800
    3570:	00000ba9 	.word	0x00000ba9
    3574:	0000426d 	.word	0x0000426d
    3578:	e000e100 	.word	0xe000e100

0000357c <lcd_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Starts the SPI transfer by selecting the slave (pulling 
 *  CS low) and sending LCD address. For use in the FT library.
 */
status_code_genare_t lcd_start_xfer(LCD_ADDRESS param_addr, LCD_XFER_DIR dir)
{
    357c:	b510      	push	{r4, lr}
    357e:	b082      	sub	sp, #8
    3580:	1e0c      	subs	r4, r1, #0
        uint8_t preamble[4];
    } lcd_xfer_preamble;
    
    status_code_genare_t read_status;
    
    if(dir == READ)
    3582:	d11f      	bne.n	35c4 <lcd_start_xfer+0x48>
        // LCD read address should only be 22 bits
        lcd_xfer_preamble.addr = (0x3FFFFF & param_addr) << 8;
    3584:	0200      	lsls	r0, r0, #8
    3586:	4b1a      	ldr	r3, [pc, #104]	; (35f0 <lcd_start_xfer+0x74>)
    3588:	4018      	ands	r0, r3
    358a:	9001      	str	r0, [sp, #4]
        /* LCD read address should only be 22 bits. Also OR 0x800000 because the
         * host must send a 1-bit and then a 0-bit to indicate a write */
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    
    // preamble bytes need to be swapped so MSB is transmitted first
    XORSWAP(lcd_xfer_preamble.preamble[0], lcd_xfer_preamble.preamble[3]);
    358c:	ab01      	add	r3, sp, #4
    358e:	78d9      	ldrb	r1, [r3, #3]
    3590:	781a      	ldrb	r2, [r3, #0]
    3592:	404a      	eors	r2, r1
    3594:	4051      	eors	r1, r2
    3596:	70d9      	strb	r1, [r3, #3]
    3598:	404a      	eors	r2, r1
    359a:	701a      	strb	r2, [r3, #0]
    XORSWAP(lcd_xfer_preamble.preamble[1], lcd_xfer_preamble.preamble[2]);
    359c:	7899      	ldrb	r1, [r3, #2]
    359e:	785a      	ldrb	r2, [r3, #1]
    35a0:	404a      	eors	r2, r1
    35a2:	4051      	eors	r1, r2
    35a4:	7099      	strb	r1, [r3, #2]
    35a6:	404a      	eors	r2, r1
    35a8:	705a      	strb	r2, [r3, #1]
    
    do{
        // select the slave
        read_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    35aa:	2201      	movs	r2, #1
    35ac:	4911      	ldr	r1, [pc, #68]	; (35f4 <lcd_start_xfer+0x78>)
    35ae:	4812      	ldr	r0, [pc, #72]	; (35f8 <lcd_start_xfer+0x7c>)
    35b0:	4b12      	ldr	r3, [pc, #72]	; (35fc <lcd_start_xfer+0x80>)
    35b2:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
    35b4:	2805      	cmp	r0, #5
    35b6:	d0f8      	beq.n	35aa <lcd_start_xfer+0x2e>
    
    if(dir == READ)
    35b8:	2c00      	cmp	r4, #0
    35ba:	d00d      	beq.n	35d8 <lcd_start_xfer+0x5c>
        // send preamble = two read bits, 22 bit address, and dummy byte
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    else if(dir == WRT)
    35bc:	2c01      	cmp	r4, #1
    35be:	d011      	beq.n	35e4 <lcd_start_xfer+0x68>
        // send preamble = two wrt bits and 22 bit address
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    
    return read_status;
}
    35c0:	b002      	add	sp, #8
    35c2:	bd10      	pop	{r4, pc}
    else if(dir == WRT)
    35c4:	2901      	cmp	r1, #1
    35c6:	d1e1      	bne.n	358c <lcd_start_xfer+0x10>
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    35c8:	0200      	lsls	r0, r0, #8
    35ca:	4b09      	ldr	r3, [pc, #36]	; (35f0 <lcd_start_xfer+0x74>)
    35cc:	4018      	ands	r0, r3
    35ce:	2380      	movs	r3, #128	; 0x80
    35d0:	061b      	lsls	r3, r3, #24
    35d2:	4318      	orrs	r0, r3
    35d4:	9001      	str	r0, [sp, #4]
    35d6:	e7d9      	b.n	358c <lcd_start_xfer+0x10>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    35d8:	2204      	movs	r2, #4
    35da:	a901      	add	r1, sp, #4
    35dc:	4806      	ldr	r0, [pc, #24]	; (35f8 <lcd_start_xfer+0x7c>)
    35de:	4b08      	ldr	r3, [pc, #32]	; (3600 <lcd_start_xfer+0x84>)
    35e0:	4798      	blx	r3
    35e2:	e7ed      	b.n	35c0 <lcd_start_xfer+0x44>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    35e4:	2203      	movs	r2, #3
    35e6:	a901      	add	r1, sp, #4
    35e8:	4803      	ldr	r0, [pc, #12]	; (35f8 <lcd_start_xfer+0x7c>)
    35ea:	4b05      	ldr	r3, [pc, #20]	; (3600 <lcd_start_xfer+0x84>)
    35ec:	4798      	blx	r3
    35ee:	e7e7      	b.n	35c0 <lcd_start_xfer+0x44>
    35f0:	3fffff00 	.word	0x3fffff00
    35f4:	20000990 	.word	0x20000990
    35f8:	20000994 	.word	0x20000994
    35fc:	00000d91 	.word	0x00000d91
    3600:	00000e8d 	.word	0x00000e8d

00003604 <lcd_stop_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Stops the SPI transfer by deselecting the slave (letting 
 *  CS float high). For use in the FT library.
 */
status_code_genare_t lcd_stop_xfer(void)
{
    3604:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&lcd_master, &lcd_slave, false);
    3606:	2200      	movs	r2, #0
    3608:	4902      	ldr	r1, [pc, #8]	; (3614 <lcd_stop_xfer+0x10>)
    360a:	4803      	ldr	r0, [pc, #12]	; (3618 <lcd_stop_xfer+0x14>)
    360c:	4b03      	ldr	r3, [pc, #12]	; (361c <lcd_stop_xfer+0x18>)
    360e:	4798      	blx	r3
}
    3610:	bd10      	pop	{r4, pc}
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	20000990 	.word	0x20000990
    3618:	20000994 	.word	0x20000994
    361c:	00000d91 	.word	0x00000d91

00003620 <lcd_host_read>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 15.
 */
status_code_genare_t lcd_host_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
    3620:	b510      	push	{r4, lr}
    3622:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&lcd_master, \
    3624:	2300      	movs	r3, #0
    3626:	0001      	movs	r1, r0
    3628:	4801      	ldr	r0, [pc, #4]	; (3630 <lcd_host_read+0x10>)
    362a:	4c02      	ldr	r4, [pc, #8]	; (3634 <lcd_host_read+0x14>)
    362c:	47a0      	blx	r4
                        read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
    362e:	bd10      	pop	{r4, pc}
    3630:	20000994 	.word	0x20000994
    3634:	00000c95 	.word	0x00000c95

00003638 <lcd_rd8>:
 * Return Values(s) : uint8_t
 * Description      : Reads a 8-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint8_t lcd_rd8(LCD_ADDRESS read_addr)
{
    3638:	b510      	push	{r4, lr}
    363a:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
    363c:	466b      	mov	r3, sp
    363e:	1ddc      	adds	r4, r3, #7
    3640:	2300      	movs	r3, #0
    3642:	7023      	strb	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    3644:	2100      	movs	r1, #0
    3646:	4b05      	ldr	r3, [pc, #20]	; (365c <lcd_rd8+0x24>)
    3648:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    lcd_host_read(&read_byte, 1);
    364a:	2101      	movs	r1, #1
    364c:	0020      	movs	r0, r4
    364e:	4b04      	ldr	r3, [pc, #16]	; (3660 <lcd_rd8+0x28>)
    3650:	4798      	blx	r3
    
    lcd_stop_xfer();
    3652:	4b04      	ldr	r3, [pc, #16]	; (3664 <lcd_rd8+0x2c>)
    3654:	4798      	blx	r3
    
    return read_byte; 
    3656:	7820      	ldrb	r0, [r4, #0]
}
    3658:	b002      	add	sp, #8
    365a:	bd10      	pop	{r4, pc}
    365c:	0000357d 	.word	0x0000357d
    3660:	00003621 	.word	0x00003621
    3664:	00003605 	.word	0x00003605

00003668 <lcd_rd16>:
 * Return Values(s) : uint16_t
 * Description      : Reads a 16-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint16_t lcd_rd16(LCD_ADDRESS read_addr)
{
    3668:	b510      	push	{r4, lr}
    366a:	b082      	sub	sp, #8
    uint16_t read_word = 0;
    366c:	466b      	mov	r3, sp
    366e:	1d9c      	adds	r4, r3, #6
    3670:	2300      	movs	r3, #0
    3672:	8023      	strh	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    3674:	2100      	movs	r1, #0
    3676:	4b05      	ldr	r3, [pc, #20]	; (368c <lcd_rd16+0x24>)
    3678:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    lcd_host_read((uint8_t*) &read_word, 2);
    367a:	2102      	movs	r1, #2
    367c:	0020      	movs	r0, r4
    367e:	4b04      	ldr	r3, [pc, #16]	; (3690 <lcd_rd16+0x28>)
    3680:	4798      	blx	r3
    
    lcd_stop_xfer();
    3682:	4b04      	ldr	r3, [pc, #16]	; (3694 <lcd_rd16+0x2c>)
    3684:	4798      	blx	r3
    
    return read_word;
    3686:	8820      	ldrh	r0, [r4, #0]
}    
    3688:	b002      	add	sp, #8
    368a:	bd10      	pop	{r4, pc}
    368c:	0000357d 	.word	0x0000357d
    3690:	00003621 	.word	0x00003621
    3694:	00003605 	.word	0x00003605

00003698 <lcd_host_write>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 16.
 */
status_code_genare_t lcd_host_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
    3698:	b510      	push	{r4, lr}
    369a:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&lcd_master, \
    369c:	0001      	movs	r1, r0
    369e:	4802      	ldr	r0, [pc, #8]	; (36a8 <lcd_host_write+0x10>)
    36a0:	4b02      	ldr	r3, [pc, #8]	; (36ac <lcd_host_write+0x14>)
    36a2:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
    
}
    36a4:	bd10      	pop	{r4, pc}
    36a6:	46c0      	nop			; (mov r8, r8)
    36a8:	20000994 	.word	0x20000994
    36ac:	00000e8d 	.word	0x00000e8d

000036b0 <lcd_wr8>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 8-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr8(LCD_ADDRESS wrt_addr, uint8_t wrt_byte)
{
    36b0:	b510      	push	{r4, lr}
    36b2:	b082      	sub	sp, #8
    36b4:	466b      	mov	r3, sp
    36b6:	1ddc      	adds	r4, r3, #7
    36b8:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);    
    36ba:	2101      	movs	r1, #1
    36bc:	4b05      	ldr	r3, [pc, #20]	; (36d4 <lcd_wr8+0x24>)
    36be:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = lcd_host_write(&wrt_byte, 1);
    36c0:	2101      	movs	r1, #1
    36c2:	0020      	movs	r0, r4
    36c4:	4b04      	ldr	r3, [pc, #16]	; (36d8 <lcd_wr8+0x28>)
    36c6:	4798      	blx	r3
    36c8:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    36ca:	4b04      	ldr	r3, [pc, #16]	; (36dc <lcd_wr8+0x2c>)
    36cc:	4798      	blx	r3
    
    return status_result;
}
    36ce:	0020      	movs	r0, r4
    36d0:	b002      	add	sp, #8
    36d2:	bd10      	pop	{r4, pc}
    36d4:	0000357d 	.word	0x0000357d
    36d8:	00003699 	.word	0x00003699
    36dc:	00003605 	.word	0x00003605

000036e0 <lcd_wr16>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 16-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr16(LCD_ADDRESS wrt_addr, uint16_t wrt_word)
{
    36e0:	b510      	push	{r4, lr}
    36e2:	b082      	sub	sp, #8
    36e4:	466b      	mov	r3, sp
    36e6:	1d9c      	adds	r4, r3, #6
    36e8:	80d9      	strh	r1, [r3, #6]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    36ea:	2101      	movs	r1, #1
    36ec:	4b05      	ldr	r3, [pc, #20]	; (3704 <lcd_wr16+0x24>)
    36ee:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    status_result = lcd_host_write((uint8_t*) &wrt_word, 2);
    36f0:	2102      	movs	r1, #2
    36f2:	0020      	movs	r0, r4
    36f4:	4b04      	ldr	r3, [pc, #16]	; (3708 <lcd_wr16+0x28>)
    36f6:	4798      	blx	r3
    36f8:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    36fa:	4b04      	ldr	r3, [pc, #16]	; (370c <lcd_wr16+0x2c>)
    36fc:	4798      	blx	r3
    
    return status_result;
}
    36fe:	0020      	movs	r0, r4
    3700:	b002      	add	sp, #8
    3702:	bd10      	pop	{r4, pc}
    3704:	0000357d 	.word	0x0000357d
    3708:	00003699 	.word	0x00003699
    370c:	00003605 	.word	0x00003605

00003710 <lcd_wr32>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 32-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr32(LCD_ADDRESS wrt_addr, uint32_t wrt_dword)
{
    3710:	b510      	push	{r4, lr}
    3712:	b082      	sub	sp, #8
    3714:	9101      	str	r1, [sp, #4]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    3716:	2101      	movs	r1, #1
    3718:	4b05      	ldr	r3, [pc, #20]	; (3730 <lcd_wr32+0x20>)
    371a:	4798      	blx	r3
    
    // cast the dword pointer to an 8-bit pointer and use a 4 byte length
    status_result = lcd_host_write((uint8_t *) &wrt_dword, 4);
    371c:	2104      	movs	r1, #4
    371e:	a801      	add	r0, sp, #4
    3720:	4b04      	ldr	r3, [pc, #16]	; (3734 <lcd_wr32+0x24>)
    3722:	4798      	blx	r3
    3724:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    3726:	4b04      	ldr	r3, [pc, #16]	; (3738 <lcd_wr32+0x28>)
    3728:	4798      	blx	r3
    
    return status_result;
}
    372a:	0020      	movs	r0, r4
    372c:	b002      	add	sp, #8
    372e:	bd10      	pop	{r4, pc}
    3730:	0000357d 	.word	0x0000357d
    3734:	00003699 	.word	0x00003699
    3738:	00003605 	.word	0x00003605

0000373c <lcd_host_cmd>:
 * Description      : Sends a host command to the LCD. Host commands are
 *  for basic hardware configurations (like power mode, clock stuff, etc.).
 *  Refer to DS-FT81x datasheet pg 16 if the command has a parameter byte.
 */
status_code_genare_t lcd_host_cmd(uint8_t cmd, uint8_t param_byte)
{
    373c:	b510      	push	{r4, lr}
    373e:	b082      	sub	sp, #8
    // variable for holding ASF status code
    status_code_genare_t wrt_status;
    
    // 3 byte array for sending host command to the LCD
    uint8_t cmd_packet[3] = {cmd, param_byte, 0x00};
    3740:	ab01      	add	r3, sp, #4
    3742:	7018      	strb	r0, [r3, #0]
    3744:	7059      	strb	r1, [r3, #1]
    3746:	2200      	movs	r2, #0
    3748:	709a      	strb	r2, [r3, #2]
   
    // select the slave
    do{
        // select the slave
        wrt_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    374a:	2201      	movs	r2, #1
    374c:	490a      	ldr	r1, [pc, #40]	; (3778 <lcd_host_cmd+0x3c>)
    374e:	480b      	ldr	r0, [pc, #44]	; (377c <lcd_host_cmd+0x40>)
    3750:	4b0b      	ldr	r3, [pc, #44]	; (3780 <lcd_host_cmd+0x44>)
    3752:	4798      	blx	r3
		//port_pin_set_output_level(PIN_PA10, true);
    }while(wrt_status == STATUS_BUSY);
    3754:	2805      	cmp	r0, #5
    3756:	d0f8      	beq.n	374a <lcd_host_cmd+0xe>
    
    // send host command
    wrt_status = spi_write_buffer_wait(&lcd_master, cmd_packet, 3);
    3758:	2203      	movs	r2, #3
    375a:	a901      	add	r1, sp, #4
    375c:	4807      	ldr	r0, [pc, #28]	; (377c <lcd_host_cmd+0x40>)
    375e:	4b09      	ldr	r3, [pc, #36]	; (3784 <lcd_host_cmd+0x48>)
    3760:	4798      	blx	r3
    3762:	1e04      	subs	r4, r0, #0

    // status check
    if(wrt_status != STATUS_OK)
    3764:	d105      	bne.n	3772 <lcd_host_cmd+0x36>
        // return an error
        return wrt_status;
    }
    else
        // deselect slave
        wrt_status = lcd_stop_xfer();
    3766:	4b08      	ldr	r3, [pc, #32]	; (3788 <lcd_host_cmd+0x4c>)
    3768:	4798      	blx	r3
    376a:	0004      	movs	r4, r0
    
    return wrt_status;
}
    376c:	0020      	movs	r0, r4
    376e:	b002      	add	sp, #8
    3770:	bd10      	pop	{r4, pc}
        lcd_stop_xfer();
    3772:	4b05      	ldr	r3, [pc, #20]	; (3788 <lcd_host_cmd+0x4c>)
    3774:	4798      	blx	r3
        return wrt_status;
    3776:	e7f9      	b.n	376c <lcd_host_cmd+0x30>
    3778:	20000990 	.word	0x20000990
    377c:	20000994 	.word	0x20000994
    3780:	00000d91 	.word	0x00000d91
    3784:	00000e8d 	.word	0x00000e8d
    3788:	00003605 	.word	0x00003605

0000378c <lcd_powerdown>:
		port_base->OUTCLR.reg = pin_mask;
    378c:	2280      	movs	r2, #128	; 0x80
    378e:	0052      	lsls	r2, r2, #1
    3790:	4b01      	ldr	r3, [pc, #4]	; (3798 <lcd_powerdown+0xc>)
    3792:	615a      	str	r2, [r3, #20]
 * Description      : Pull down the LCD_PD pin to force power down the LCD
 */
void lcd_powerdown(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_EN);
}
    3794:	4770      	bx	lr
    3796:	46c0      	nop			; (mov r8, r8)
    3798:	41004400 	.word	0x41004400

0000379c <lcd_powerup>:
		port_base->OUTSET.reg = pin_mask;
    379c:	2280      	movs	r2, #128	; 0x80
    379e:	0052      	lsls	r2, r2, #1
    37a0:	4b01      	ldr	r3, [pc, #4]	; (37a8 <lcd_powerup+0xc>)
    37a2:	619a      	str	r2, [r3, #24]
 * Description      : Pull up the LCD_PD pin to force power up the LCD
 */
void lcd_powerup(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
}
    37a4:	4770      	bx	lr
    37a6:	46c0      	nop			; (mov r8, r8)
    37a8:	41004400 	.word	0x41004400

000037ac <lcd_init_seq>:
 * Return Values(s) : ASF general status code
 * Description      : Initialization sequence as described by the 
 *  FT81X_Series_Programmer_Guide datasheet pg 11.
 */
void lcd_init_seq(void)
{
    37ac:	b570      	push	{r4, r5, r6, lr}
    /* medium rare power cycle to get the LCD into a known state.
     * Medium rare because it resets a lot of things, but sometimes display
     * list behavior is funky even after this power cycle. It is recommended
     * that the user performs a hard power reset when testing display 
     * list stuff. */
    lcd_powerdown();
    37ae:	4b31      	ldr	r3, [pc, #196]	; (3874 <lcd_init_seq+0xc8>)
    37b0:	4798      	blx	r3
    delay_ms(20);
    37b2:	2014      	movs	r0, #20
    37b4:	4c30      	ldr	r4, [pc, #192]	; (3878 <lcd_init_seq+0xcc>)
    37b6:	47a0      	blx	r4
    lcd_powerup();
    37b8:	4b30      	ldr	r3, [pc, #192]	; (387c <lcd_init_seq+0xd0>)
    37ba:	4798      	blx	r3
    delay_ms(20);
    37bc:	2014      	movs	r0, #20
    37be:	47a0      	blx	r4
    
    // indicate that an external clock is being used
    lcd_host_cmd(CLKEXT, NO_PARAM);
    37c0:	2100      	movs	r1, #0
    37c2:	2044      	movs	r0, #68	; 0x44
    37c4:	4d2e      	ldr	r5, [pc, #184]	; (3880 <lcd_init_seq+0xd4>)
    37c6:	47a8      	blx	r5
    
    // wait a little bit, because CLKEXT triggers a software reset
    delay_ms(50);
    37c8:	2032      	movs	r0, #50	; 0x32
    37ca:	47a0      	blx	r4
    // wake up the LCD
    lcd_host_cmd(ACTIVE, NO_PARAM);
    37cc:	2100      	movs	r1, #0
    37ce:	2000      	movs	r0, #0
    37d0:	47a8      	blx	r5
    
    // wait until the LCD is active
	do{
	    result = lcd_rd16(REG_ID);
    37d2:	482c      	ldr	r0, [pc, #176]	; (3884 <lcd_init_seq+0xd8>)
    37d4:	4b2c      	ldr	r3, [pc, #176]	; (3888 <lcd_init_seq+0xdc>)
    37d6:	4798      	blx	r3
    37d8:	b2c0      	uxtb	r0, r0
	} while(result != 0x7c);  
    37da:	287c      	cmp	r0, #124	; 0x7c
    37dc:	d1f9      	bne.n	37d2 <lcd_init_seq+0x26>
    
    // Register settings, refer to NHD-5.0-800480FT-CTXL-CTP datasheet:
    // horizontal configuration registers
    lcd_wr16(REG_HSIZE, 800);
    37de:	21c8      	movs	r1, #200	; 0xc8
    37e0:	0089      	lsls	r1, r1, #2
    37e2:	482a      	ldr	r0, [pc, #168]	; (388c <lcd_init_seq+0xe0>)
    37e4:	4c2a      	ldr	r4, [pc, #168]	; (3890 <lcd_init_seq+0xe4>)
    37e6:	47a0      	blx	r4
    lcd_wr16(REG_HCYCLE, 928);
    37e8:	21e8      	movs	r1, #232	; 0xe8
    37ea:	0089      	lsls	r1, r1, #2
    37ec:	4829      	ldr	r0, [pc, #164]	; (3894 <lcd_init_seq+0xe8>)
    37ee:	47a0      	blx	r4
    lcd_wr16(REG_HOFFSET, 88);
    37f0:	2158      	movs	r1, #88	; 0x58
    37f2:	4829      	ldr	r0, [pc, #164]	; (3898 <lcd_init_seq+0xec>)
    37f4:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC0, 0);
    37f6:	2100      	movs	r1, #0
    37f8:	4828      	ldr	r0, [pc, #160]	; (389c <lcd_init_seq+0xf0>)
    37fa:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC1, 48);
    37fc:	2130      	movs	r1, #48	; 0x30
    37fe:	4828      	ldr	r0, [pc, #160]	; (38a0 <lcd_init_seq+0xf4>)
    3800:	47a0      	blx	r4
    
    // vertical configuration registers
    lcd_wr16(REG_VSIZE, 480);
    3802:	21f0      	movs	r1, #240	; 0xf0
    3804:	0049      	lsls	r1, r1, #1
    3806:	4827      	ldr	r0, [pc, #156]	; (38a4 <lcd_init_seq+0xf8>)
    3808:	47a0      	blx	r4
    lcd_wr16(REG_VCYCLE, 525);
    380a:	4927      	ldr	r1, [pc, #156]	; (38a8 <lcd_init_seq+0xfc>)
    380c:	4827      	ldr	r0, [pc, #156]	; (38ac <lcd_init_seq+0x100>)
    380e:	47a0      	blx	r4
    lcd_wr16(REG_VOFFSET, 32);
    3810:	2120      	movs	r1, #32
    3812:	4827      	ldr	r0, [pc, #156]	; (38b0 <lcd_init_seq+0x104>)
    3814:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC0, 0);
    3816:	2100      	movs	r1, #0
    3818:	4826      	ldr	r0, [pc, #152]	; (38b4 <lcd_init_seq+0x108>)
    381a:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC1, 3);
    381c:	2103      	movs	r1, #3
    381e:	4826      	ldr	r0, [pc, #152]	; (38b8 <lcd_init_seq+0x10c>)
    3820:	47a0      	blx	r4

    // misc. screen configuration registers
	lcd_wr8(REG_SWIZZLE, 0);
    3822:	2100      	movs	r1, #0
    3824:	4825      	ldr	r0, [pc, #148]	; (38bc <lcd_init_seq+0x110>)
    3826:	4d26      	ldr	r5, [pc, #152]	; (38c0 <lcd_init_seq+0x114>)
    3828:	47a8      	blx	r5
	lcd_wr8(REG_PCLK_POL, 0);
    382a:	2100      	movs	r1, #0
    382c:	4825      	ldr	r0, [pc, #148]	; (38c4 <lcd_init_seq+0x118>)
    382e:	47a8      	blx	r5
	lcd_wr8(REG_CSPREAD, 1);
    3830:	2101      	movs	r1, #1
    3832:	4825      	ldr	r0, [pc, #148]	; (38c8 <lcd_init_seq+0x11c>)
    3834:	47a8      	blx	r5
	lcd_wr8(REG_DITHER, 1);
    3836:	2101      	movs	r1, #1
    3838:	4824      	ldr	r0, [pc, #144]	; (38cc <lcd_init_seq+0x120>)
    383a:	47a8      	blx	r5

    // clear the display
    lcd_wr32(RAM_DL+0, CLEAR_COLOR_RGB(1, 1, 1));
    383c:	4924      	ldr	r1, [pc, #144]	; (38d0 <lcd_init_seq+0x124>)
    383e:	20c0      	movs	r0, #192	; 0xc0
    3840:	0380      	lsls	r0, r0, #14
    3842:	4e24      	ldr	r6, [pc, #144]	; (38d4 <lcd_init_seq+0x128>)
    3844:	47b0      	blx	r6
    lcd_wr32(RAM_DL+4, COLOR_RGB(255,255,255));
    3846:	4924      	ldr	r1, [pc, #144]	; (38d8 <lcd_init_seq+0x12c>)
    3848:	4824      	ldr	r0, [pc, #144]	; (38dc <lcd_init_seq+0x130>)
    384a:	47b0      	blx	r6
    lcd_wr32(RAM_DL+8, CLEAR(1,1,1));
    384c:	4924      	ldr	r1, [pc, #144]	; (38e0 <lcd_init_seq+0x134>)
    384e:	4825      	ldr	r0, [pc, #148]	; (38e4 <lcd_init_seq+0x138>)
    3850:	47b0      	blx	r6
    lcd_wr32(RAM_DL+12, DISPLAY());
    3852:	2100      	movs	r1, #0
    3854:	4824      	ldr	r0, [pc, #144]	; (38e8 <lcd_init_seq+0x13c>)
    3856:	47b0      	blx	r6

    // display list swap
    lcd_wr8(REG_DLSWAP,DLSWAP_FRAME);
    3858:	2102      	movs	r1, #2
    385a:	4824      	ldr	r0, [pc, #144]	; (38ec <lcd_init_seq+0x140>)
    385c:	47a8      	blx	r5

    // set the pin drive strength
    lcd_wr16(REG_GPIOX_DIR, 0xffff);
    385e:	4e24      	ldr	r6, [pc, #144]	; (38f0 <lcd_init_seq+0x144>)
    3860:	0031      	movs	r1, r6
    3862:	4824      	ldr	r0, [pc, #144]	; (38f4 <lcd_init_seq+0x148>)
    3864:	47a0      	blx	r4
    lcd_wr16(REG_GPIOX, 0xffff);
    3866:	0031      	movs	r1, r6
    3868:	4823      	ldr	r0, [pc, #140]	; (38f8 <lcd_init_seq+0x14c>)
    386a:	47a0      	blx	r4

    // enable the clock
    lcd_wr8(REG_PCLK,2);
    386c:	2102      	movs	r1, #2
    386e:	4823      	ldr	r0, [pc, #140]	; (38fc <lcd_init_seq+0x150>)
    3870:	47a8      	blx	r5
}
    3872:	bd70      	pop	{r4, r5, r6, pc}
    3874:	0000378d 	.word	0x0000378d
    3878:	00000151 	.word	0x00000151
    387c:	0000379d 	.word	0x0000379d
    3880:	0000373d 	.word	0x0000373d
    3884:	00302000 	.word	0x00302000
    3888:	00003669 	.word	0x00003669
    388c:	00302034 	.word	0x00302034
    3890:	000036e1 	.word	0x000036e1
    3894:	0030202c 	.word	0x0030202c
    3898:	00302030 	.word	0x00302030
    389c:	00302038 	.word	0x00302038
    38a0:	0030203c 	.word	0x0030203c
    38a4:	00302048 	.word	0x00302048
    38a8:	0000020d 	.word	0x0000020d
    38ac:	00302040 	.word	0x00302040
    38b0:	00302044 	.word	0x00302044
    38b4:	0030204c 	.word	0x0030204c
    38b8:	00302050 	.word	0x00302050
    38bc:	00302064 	.word	0x00302064
    38c0:	000036b1 	.word	0x000036b1
    38c4:	0030206c 	.word	0x0030206c
    38c8:	00302068 	.word	0x00302068
    38cc:	00302060 	.word	0x00302060
    38d0:	02010101 	.word	0x02010101
    38d4:	00003711 	.word	0x00003711
    38d8:	04ffffff 	.word	0x04ffffff
    38dc:	00300004 	.word	0x00300004
    38e0:	26000007 	.word	0x26000007
    38e4:	00300008 	.word	0x00300008
    38e8:	0030000c 	.word	0x0030000c
    38ec:	00302054 	.word	0x00302054
    38f0:	0000ffff 	.word	0x0000ffff
    38f4:	00302098 	.word	0x00302098
    38f8:	0030209c 	.word	0x0030209c
    38fc:	00302070 	.word	0x00302070

00003900 <lcd_set_ft_host_ptr>:
 * Description      : Sets the sim_system_glcd_software global pointer for the
 *  FTDI context struct.
 */
void lcd_set_ft_host_ptr(Ft_Gpu_Hal_Context_t* phost)
{
    lcd_firmware_phost = phost;
    3900:	4b01      	ldr	r3, [pc, #4]	; (3908 <lcd_set_ft_host_ptr+0x8>)
    3902:	6018      	str	r0, [r3, #0]
}
    3904:	4770      	bx	lr
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	200000f4 	.word	0x200000f4

0000390c <lcd_interrupt_callback>:
 * Return Values(s) : void
 * Description      : Callback for the LCD interrupt. Reads the LCD's flag
 *  register.
 */
void lcd_interrupt_callback(void)
{
    390c:	b510      	push	{r4, lr}
    lcd_int_flags = lcd_rd8(REG_INT_FLAGS);
    390e:	4803      	ldr	r0, [pc, #12]	; (391c <lcd_interrupt_callback+0x10>)
    3910:	4b03      	ldr	r3, [pc, #12]	; (3920 <lcd_interrupt_callback+0x14>)
    3912:	4798      	blx	r3
    3914:	4b03      	ldr	r3, [pc, #12]	; (3924 <lcd_interrupt_callback+0x18>)
    3916:	7018      	strb	r0, [r3, #0]
}
    3918:	bd10      	pop	{r4, pc}
    391a:	46c0      	nop			; (mov r8, r8)
    391c:	003020a8 	.word	0x003020a8
    3920:	00003639 	.word	0x00003639
    3924:	2000000a 	.word	0x2000000a

00003928 <led_tx_on>:
		port_base->OUTCLR.reg = pin_mask;
    3928:	2280      	movs	r2, #128	; 0x80
    392a:	0512      	lsls	r2, r2, #20
    392c:	4b01      	ldr	r3, [pc, #4]	; (3934 <led_tx_on+0xc>)
    392e:	615a      	str	r2, [r3, #20]
 * @brief Turn on Transmit LED
 */
void led_tx_on(void)
{
    port_pin_set_output_level(PIN_PA27, false);
}
    3930:	4770      	bx	lr
    3932:	46c0      	nop			; (mov r8, r8)
    3934:	41004400 	.word	0x41004400

00003938 <led_tx_off>:
		port_base->OUTSET.reg = pin_mask;
    3938:	2280      	movs	r2, #128	; 0x80
    393a:	0512      	lsls	r2, r2, #20
    393c:	4b01      	ldr	r3, [pc, #4]	; (3944 <led_tx_off+0xc>)
    393e:	619a      	str	r2, [r3, #24]
 * @brief Turn off Transmit LED
 */
void led_tx_off(void)
{
    port_pin_set_output_level(PIN_PA27, true);
}
    3940:	4770      	bx	lr
    3942:	46c0      	nop			; (mov r8, r8)
    3944:	41004400 	.word	0x41004400

00003948 <SysTick_Handler>:
 * Handles the interrupt from the timer
 */
void SysTick_Handler(void)
{
    /* increment the tick count */
    Millisecond_Counter++;
    3948:	4a02      	ldr	r2, [pc, #8]	; (3954 <SysTick_Handler+0xc>)
    394a:	6813      	ldr	r3, [r2, #0]
    394c:	3301      	adds	r3, #1
    394e:	6013      	str	r3, [r2, #0]
}
    3950:	4770      	bx	lr
    3952:	46c0      	nop			; (mov r8, r8)
    3954:	200000f8 	.word	0x200000f8

00003958 <mstimer_now>:
 * The system time is the time elapsed since OS was started.
 * @return milliseconds since OS was started
 */
unsigned long mstimer_now(void)
{
    return Millisecond_Counter;
    3958:	4b01      	ldr	r3, [pc, #4]	; (3960 <mstimer_now+0x8>)
    395a:	6818      	ldr	r0, [r3, #0]
}
    395c:	4770      	bx	lr
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	200000f8 	.word	0x200000f8

00003964 <mstimer_init>:

/**
 * @brief Initialization for timer
 */
void mstimer_init(void)
{
    3964:	b510      	push	{r4, lr}
    /* Setup SysTick Timer for 1ms interrupts  */
    if (SysTick_Config(SystemCoreClock / 1000)) {
    3966:	4b0f      	ldr	r3, [pc, #60]	; (39a4 <mstimer_init+0x40>)
    3968:	6818      	ldr	r0, [r3, #0]
    396a:	21fa      	movs	r1, #250	; 0xfa
    396c:	0089      	lsls	r1, r1, #2
    396e:	4b0e      	ldr	r3, [pc, #56]	; (39a8 <mstimer_init+0x44>)
    3970:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    3972:	3801      	subs	r0, #1
    3974:	4b0d      	ldr	r3, [pc, #52]	; (39ac <mstimer_init+0x48>)
    3976:	4298      	cmp	r0, r3
    3978:	d811      	bhi.n	399e <mstimer_init+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    397a:	4a0d      	ldr	r2, [pc, #52]	; (39b0 <mstimer_init+0x4c>)
    397c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    397e:	480d      	ldr	r0, [pc, #52]	; (39b4 <mstimer_init+0x50>)
    3980:	6a03      	ldr	r3, [r0, #32]
    3982:	021b      	lsls	r3, r3, #8
    3984:	0a1b      	lsrs	r3, r3, #8
    3986:	21c0      	movs	r1, #192	; 0xc0
    3988:	0609      	lsls	r1, r1, #24
    398a:	430b      	orrs	r3, r1
    398c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    398e:	2300      	movs	r3, #0
    3990:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3992:	3307      	adds	r3, #7
    3994:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    3996:	2300      	movs	r3, #0
    3998:	2b00      	cmp	r3, #0
    399a:	d002      	beq.n	39a2 <mstimer_init+0x3e>
    399c:	e7fe      	b.n	399c <mstimer_init+0x38>
    return (1UL);                                                   /* Reload value impossible */
    399e:	2301      	movs	r3, #1
    39a0:	e7fa      	b.n	3998 <mstimer_init+0x34>
        /* Capture error */
        while (1)
            ;
    }
    NVIC_EnableIRQ(SysTick_IRQn);
}
    39a2:	bd10      	pop	{r4, pc}
    39a4:	2000000c 	.word	0x2000000c
    39a8:	00004f3d 	.word	0x00004f3d
    39ac:	00ffffff 	.word	0x00ffffff
    39b0:	e000e010 	.word	0xe000e010
    39b4:	e000ed00 	.word	0xe000ed00

000039b8 <rs485_clock_init>:

/**
 * Initialize the USART SERCOM module clock
 */
static void rs485_clock_init(void)
{
    39b8:	b500      	push	{lr}
    39ba:	b083      	sub	sp, #12
			PM->APBCMASK.reg |= mask;
    39bc:	4a07      	ldr	r2, [pc, #28]	; (39dc <rs485_clock_init+0x24>)
    39be:	6a13      	ldr	r3, [r2, #32]
    39c0:	2120      	movs	r1, #32
    39c2:	430b      	orrs	r3, r1
    39c4:	6213      	str	r3, [r2, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    39c6:	a901      	add	r1, sp, #4
    39c8:	2300      	movs	r3, #0
    39ca:	700b      	strb	r3, [r1, #0]
    system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_SERCOM3);
    /* Turn on Generic clock for USART */
    system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    /*Default is generator 0. Other wise need to configure like below */
    /* gclk_chan_conf.source_generator = GCLK_GENERATOR_1; */
    system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    39cc:	2017      	movs	r0, #23
    39ce:	4b04      	ldr	r3, [pc, #16]	; (39e0 <rs485_clock_init+0x28>)
    39d0:	4798      	blx	r3
    system_gclk_chan_enable(gclk_index);
    39d2:	2017      	movs	r0, #23
    39d4:	4b03      	ldr	r3, [pc, #12]	; (39e4 <rs485_clock_init+0x2c>)
    39d6:	4798      	blx	r3
}
    39d8:	b003      	add	sp, #12
    39da:	bd00      	pop	{pc}
    39dc:	40000400 	.word	0x40000400
    39e0:	000048e9 	.word	0x000048e9
    39e4:	00004861 	.word	0x00004861

000039e8 <rs485_pin_init>:

/**
 * Initialize the RTS pin
 */
static void rs485_pin_init(void)
{
    39e8:	b570      	push	{r4, r5, r6, lr}
	config->powersave  = false;
    39ea:	4c0b      	ldr	r4, [pc, #44]	; (3a18 <rs485_pin_init+0x30>)
    39ec:	2300      	movs	r3, #0
    39ee:	70a3      	strb	r3, [r4, #2]
	//Configure PIN_A24 as DE and PIN_A25 as /RE
    port_get_config_defaults(&RS485_Port_Config);
    RS485_Port_Config.direction = PORT_PIN_DIR_OUTPUT;
    39f0:	2601      	movs	r6, #1
    39f2:	7026      	strb	r6, [r4, #0]
	
    RS485_Port_Config.input_pull = PORT_PIN_PULL_DOWN;
    39f4:	3302      	adds	r3, #2
    39f6:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(RS485_DE, &RS485_Port_Config);
    39f8:	0021      	movs	r1, r4
    39fa:	2018      	movs	r0, #24
    39fc:	4d07      	ldr	r5, [pc, #28]	; (3a1c <rs485_pin_init+0x34>)
    39fe:	47a8      	blx	r5
	
	RS485_Port_Config.input_pull = PORT_PIN_PULL_UP;
    3a00:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(RS485_RE, &RS485_Port_Config);
    3a02:	0021      	movs	r1, r4
    3a04:	2019      	movs	r0, #25
    3a06:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    3a08:	4b05      	ldr	r3, [pc, #20]	; (3a20 <rs485_pin_init+0x38>)
    3a0a:	2280      	movs	r2, #128	; 0x80
    3a0c:	0492      	lsls	r2, r2, #18
    3a0e:	615a      	str	r2, [r3, #20]
    3a10:	2280      	movs	r2, #128	; 0x80
    3a12:	0452      	lsls	r2, r2, #17
    3a14:	615a      	str	r2, [r3, #20]

	
	
    port_pin_set_output_level(RS485_RE, false);
	port_pin_set_output_level(RS485_DE, false);
}
    3a16:	bd70      	pop	{r4, r5, r6, pc}
    3a18:	20000100 	.word	0x20000100
    3a1c:	000042f1 	.word	0x000042f1
    3a20:	41004400 	.word	0x41004400

00003a24 <usart_read_callback>:
{
    3a24:	b510      	push	{r4, lr}
    if (!Transmitting) {
    3a26:	4b0a      	ldr	r3, [pc, #40]	; (3a50 <usart_read_callback+0x2c>)
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d004      	beq.n	3a38 <usart_read_callback+0x14>
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    3a2e:	4909      	ldr	r1, [pc, #36]	; (3a54 <usart_read_callback+0x30>)
    3a30:	4809      	ldr	r0, [pc, #36]	; (3a58 <usart_read_callback+0x34>)
    3a32:	4b0a      	ldr	r3, [pc, #40]	; (3a5c <usart_read_callback+0x38>)
    3a34:	4798      	blx	r3
}
    3a36:	bd10      	pop	{r4, pc}
        FIFO_Put(&Receive_Queue, rx_buffer[0]);
    3a38:	4b06      	ldr	r3, [pc, #24]	; (3a54 <usart_read_callback+0x30>)
    3a3a:	8819      	ldrh	r1, [r3, #0]
    3a3c:	b2c9      	uxtb	r1, r1
    3a3e:	4808      	ldr	r0, [pc, #32]	; (3a60 <usart_read_callback+0x3c>)
    3a40:	4b08      	ldr	r3, [pc, #32]	; (3a64 <usart_read_callback+0x40>)
    3a42:	4798      	blx	r3
        RS485_Receive_Bytes++;
    3a44:	4a08      	ldr	r2, [pc, #32]	; (3a68 <usart_read_callback+0x44>)
    3a46:	6813      	ldr	r3, [r2, #0]
    3a48:	3301      	adds	r3, #1
    3a4a:	6013      	str	r3, [r2, #0]
    3a4c:	e7ef      	b.n	3a2e <usart_read_callback+0xa>
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	2000038c 	.word	0x2000038c
    3a54:	200009d0 	.word	0x200009d0
    3a58:	20000148 	.word	0x20000148
    3a5c:	00004079 	.word	0x00004079
    3a60:	2000017c 	.word	0x2000017c
    3a64:	00001561 	.word	0x00001561
    3a68:	20000104 	.word	0x20000104

00003a6c <rs485_usart_init>:

/**
 * Initialize the USART SERCOM module for RS485
 */
static void rs485_usart_init(void)
{
    3a6c:	b570      	push	{r4, r5, r6, lr}
    enum status_code status;

    /* Disable this module since ASF expects it to be disabled. */
    RS485_USART->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3a6e:	4935      	ldr	r1, [pc, #212]	; (3b44 <rs485_usart_init+0xd8>)
    3a70:	680b      	ldr	r3, [r1, #0]
    3a72:	2202      	movs	r2, #2
    3a74:	4393      	bics	r3, r2
    3a76:	600b      	str	r3, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3a78:	4a33      	ldr	r2, [pc, #204]	; (3b48 <rs485_usart_init+0xdc>)
    3a7a:	2380      	movs	r3, #128	; 0x80
    3a7c:	05db      	lsls	r3, r3, #23
    3a7e:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3a80:	2300      	movs	r3, #0
    3a82:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    3a84:	20ff      	movs	r0, #255	; 0xff
    3a86:	8110      	strh	r0, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3a88:	2000      	movs	r0, #0
    3a8a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3a8c:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3a8e:	2401      	movs	r4, #1
    3a90:	2524      	movs	r5, #36	; 0x24
    3a92:	5554      	strb	r4, [r2, r5]
	config->transmitter_enable = true;
    3a94:	3501      	adds	r5, #1
    3a96:	5554      	strb	r4, [r2, r5]
	config->clock_polarity_inverted = false;
    3a98:	3425      	adds	r4, #37	; 0x25
    3a9a:	5513      	strb	r3, [r2, r4]
	config->use_external_clock = false;
    3a9c:	3401      	adds	r4, #1
    3a9e:	5513      	strb	r3, [r2, r4]
	config->ext_clock_freq   = 0;
    3aa0:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3aa2:	3405      	adds	r4, #5
    3aa4:	5513      	strb	r3, [r2, r4]
	config->generator_source = GCLK_GENERATOR_0;
    3aa6:	3401      	adds	r4, #1
    3aa8:	5513      	strb	r3, [r2, r4]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3aaa:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3aac:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3aae:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3ab0:	7610      	strb	r0, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3ab2:	7710      	strb	r0, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3ab4:	7650      	strb	r0, [r2, #25]
	config->receive_pulse_length                    = 19;
    3ab6:	2313      	movs	r3, #19
    3ab8:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3aba:	7750      	strb	r0, [r2, #29]
    // Get default settings
    usart_get_config_defaults(&RS485_USART_Config);
    RS485_USART_Config.baudrate = Baud_Rate;
    3abc:	4b23      	ldr	r3, [pc, #140]	; (3b4c <rs485_usart_init+0xe0>)
    3abe:	681b      	ldr	r3, [r3, #0]
    3ac0:	6213      	str	r3, [r2, #32]
    RS485_USART_Config.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
    3ac2:	2390      	movs	r3, #144	; 0x90
    3ac4:	035b      	lsls	r3, r3, #13
    3ac6:	60d3      	str	r3, [r2, #12]
    RS485_USART_Config.pinmux_pad0 = RS485_TX;
    3ac8:	4b21      	ldr	r3, [pc, #132]	; (3b50 <rs485_usart_init+0xe4>)
    3aca:	6313      	str	r3, [r2, #48]	; 0x30
    RS485_USART_Config.pinmux_pad1 = RS485_RX;
    3acc:	4b21      	ldr	r3, [pc, #132]	; (3b54 <rs485_usart_init+0xe8>)
    3ace:	6353      	str	r3, [r2, #52]	; 0x34
    RS485_USART_Config.pinmux_pad2 = PINMUX_UNUSED;
    3ad0:	2301      	movs	r3, #1
    3ad2:	425b      	negs	r3, r3
    3ad4:	6393      	str	r3, [r2, #56]	; 0x38
    RS485_USART_Config.pinmux_pad3 = PINMUX_UNUSED;
    3ad6:	63d3      	str	r3, [r2, #60]	; 0x3c
    status = usart_init(&RS485_USART_Module, RS485_USART, &RS485_USART_Config);
    3ad8:	481f      	ldr	r0, [pc, #124]	; (3b58 <rs485_usart_init+0xec>)
    3ada:	4b20      	ldr	r3, [pc, #128]	; (3b5c <rs485_usart_init+0xf0>)
    3adc:	4798      	blx	r3
    while (status != STATUS_OK) {
    3ade:	2800      	cmp	r0, #0
    3ae0:	d1fd      	bne.n	3ade <rs485_usart_init+0x72>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ae2:	4b1d      	ldr	r3, [pc, #116]	; (3b58 <rs485_usart_init+0xec>)
    3ae4:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3ae6:	0020      	movs	r0, r4
    3ae8:	4b1d      	ldr	r3, [pc, #116]	; (3b60 <rs485_usart_init+0xf4>)
    3aea:	4798      	blx	r3
    3aec:	231f      	movs	r3, #31
    3aee:	4018      	ands	r0, r3
    3af0:	3b1e      	subs	r3, #30
    3af2:	4083      	lsls	r3, r0
    3af4:	4a1b      	ldr	r2, [pc, #108]	; (3b64 <rs485_usart_init+0xf8>)
    3af6:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3af8:	4b17      	ldr	r3, [pc, #92]	; (3b58 <rs485_usart_init+0xec>)
    3afa:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3afc:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    3afe:	2b00      	cmp	r3, #0
    3b00:	d1fa      	bne.n	3af8 <rs485_usart_init+0x8c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3b02:	6823      	ldr	r3, [r4, #0]
    3b04:	2202      	movs	r2, #2
    3b06:	4313      	orrs	r3, r2
    3b08:	6023      	str	r3, [r4, #0]
        /* hardware not initialized correctly - figure out why! */
    }
    usart_enable(&RS485_USART_Module);
#ifdef USART_CALLBACK_MODE
    usart_register_callback(&RS485_USART_Module, usart_read_callback,
    3b0a:	4c13      	ldr	r4, [pc, #76]	; (3b58 <rs485_usart_init+0xec>)
    3b0c:	3a01      	subs	r2, #1
    3b0e:	4916      	ldr	r1, [pc, #88]	; (3b68 <rs485_usart_init+0xfc>)
    3b10:	0020      	movs	r0, r4
    3b12:	4e16      	ldr	r6, [pc, #88]	; (3b6c <rs485_usart_init+0x100>)
    3b14:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3b16:	2531      	movs	r5, #49	; 0x31
    3b18:	5d63      	ldrb	r3, [r4, r5]
    3b1a:	2202      	movs	r2, #2
    3b1c:	4313      	orrs	r3, r2
    3b1e:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_RECEIVED);
    usart_enable_callback(&RS485_USART_Module, USART_CALLBACK_BUFFER_RECEIVED);
    usart_register_callback(&RS485_USART_Module, usart_write_callback,
    3b20:	2200      	movs	r2, #0
    3b22:	4913      	ldr	r1, [pc, #76]	; (3b70 <rs485_usart_init+0x104>)
    3b24:	0020      	movs	r0, r4
    3b26:	47b0      	blx	r6
    3b28:	5d63      	ldrb	r3, [r4, r5]
    3b2a:	2201      	movs	r2, #1
    3b2c:	4313      	orrs	r3, r2
    3b2e:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(
        &RS485_USART_Module, USART_CALLBACK_BUFFER_TRANSMITTED);
    system_interrupt_set_priority(
    3b30:	2100      	movs	r1, #0
    3b32:	200c      	movs	r0, #12
    3b34:	4b0f      	ldr	r3, [pc, #60]	; (3b74 <rs485_usart_init+0x108>)
    3b36:	4798      	blx	r3
        SYSTEM_INTERRUPT_MODULE_SERCOM3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    /* initial callback call to prepare to begin receiving data */
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    3b38:	490f      	ldr	r1, [pc, #60]	; (3b78 <rs485_usart_init+0x10c>)
    3b3a:	0020      	movs	r0, r4
    3b3c:	4b0f      	ldr	r3, [pc, #60]	; (3b7c <rs485_usart_init+0x110>)
    3b3e:	4798      	blx	r3
#endif    
}
    3b40:	bd70      	pop	{r4, r5, r6, pc}
    3b42:	46c0      	nop			; (mov r8, r8)
    3b44:	42001400 	.word	0x42001400
    3b48:	20000108 	.word	0x20000108
    3b4c:	200000fc 	.word	0x200000fc
    3b50:	00160002 	.word	0x00160002
    3b54:	00170002 	.word	0x00170002
    3b58:	20000148 	.word	0x20000148
    3b5c:	00003ec9 	.word	0x00003ec9
    3b60:	0000426d 	.word	0x0000426d
    3b64:	e000e100 	.word	0xe000e100
    3b68:	00003a25 	.word	0x00003a25
    3b6c:	00004061 	.word	0x00004061
    3b70:	00003bcd 	.word	0x00003bcd
    3b74:	00004939 	.word	0x00004939
    3b78:	200009d0 	.word	0x200009d0
    3b7c:	00004079 	.word	0x00004079

00003b80 <rs485_rts_enable>:
{
    3b80:	b510      	push	{r4, lr}
    if (enable) {
    3b82:	2800      	cmp	r0, #0
    3b84:	d10c      	bne.n	3ba0 <rs485_rts_enable+0x20>
    3b86:	4b0d      	ldr	r3, [pc, #52]	; (3bbc <rs485_rts_enable+0x3c>)
    3b88:	2280      	movs	r2, #128	; 0x80
    3b8a:	0492      	lsls	r2, r2, #18
    3b8c:	615a      	str	r2, [r3, #20]
    3b8e:	2280      	movs	r2, #128	; 0x80
    3b90:	0452      	lsls	r2, r2, #17
    3b92:	615a      	str	r2, [r3, #20]
        led_tx_off();
    3b94:	4b0a      	ldr	r3, [pc, #40]	; (3bc0 <rs485_rts_enable+0x40>)
    3b96:	4798      	blx	r3
        Transmitting = false;
    3b98:	2200      	movs	r2, #0
    3b9a:	4b0a      	ldr	r3, [pc, #40]	; (3bc4 <rs485_rts_enable+0x44>)
    3b9c:	701a      	strb	r2, [r3, #0]
}
    3b9e:	bd10      	pop	{r4, pc}
        Transmitting = true;
    3ba0:	2201      	movs	r2, #1
    3ba2:	4b08      	ldr	r3, [pc, #32]	; (3bc4 <rs485_rts_enable+0x44>)
    3ba4:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    3ba6:	4b05      	ldr	r3, [pc, #20]	; (3bbc <rs485_rts_enable+0x3c>)
    3ba8:	2280      	movs	r2, #128	; 0x80
    3baa:	0492      	lsls	r2, r2, #18
    3bac:	619a      	str	r2, [r3, #24]
    3bae:	2280      	movs	r2, #128	; 0x80
    3bb0:	0452      	lsls	r2, r2, #17
    3bb2:	619a      	str	r2, [r3, #24]
        led_tx_on();
    3bb4:	4b04      	ldr	r3, [pc, #16]	; (3bc8 <rs485_rts_enable+0x48>)
    3bb6:	4798      	blx	r3
    3bb8:	e7f1      	b.n	3b9e <rs485_rts_enable+0x1e>
    3bba:	46c0      	nop			; (mov r8, r8)
    3bbc:	41004400 	.word	0x41004400
    3bc0:	00003939 	.word	0x00003939
    3bc4:	2000038c 	.word	0x2000038c
    3bc8:	00003929 	.word	0x00003929

00003bcc <usart_write_callback>:
{
    3bcc:	b510      	push	{r4, lr}
    rs485_rts_enable(false);
    3bce:	2000      	movs	r0, #0
    3bd0:	4b01      	ldr	r3, [pc, #4]	; (3bd8 <usart_write_callback+0xc>)
    3bd2:	4798      	blx	r3
}
    3bd4:	bd10      	pop	{r4, pc}
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	00003b81 	.word	0x00003b81

00003bdc <rs485_baud_rate_set>:
    switch (baudrate) {
    3bdc:	2396      	movs	r3, #150	; 0x96
    3bde:	021b      	lsls	r3, r3, #8
    3be0:	4298      	cmp	r0, r3
    3be2:	d103      	bne.n	3bec <rs485_baud_rate_set+0x10>
            Baud_Rate = baudrate;
    3be4:	4b02      	ldr	r3, [pc, #8]	; (3bf0 <rs485_baud_rate_set+0x14>)
    3be6:	6018      	str	r0, [r3, #0]
    bool valid = true;
    3be8:	2001      	movs	r0, #1
}
    3bea:	4770      	bx	lr
            valid = false;
    3bec:	2000      	movs	r0, #0
    3bee:	e7fc      	b.n	3bea <rs485_baud_rate_set+0xe>
    3bf0:	200000fc 	.word	0x200000fc

00003bf4 <rs485_init>:

/* SERCOM3 UART initialization */
void rs485_init(void)
{
    3bf4:	b510      	push	{r4, lr}
    /* initialize the Rx and Tx byte queues */
    FIFO_Init(&Receive_Queue, &Receive_Queue_Data[0],
    3bf6:	2280      	movs	r2, #128	; 0x80
    3bf8:	0092      	lsls	r2, r2, #2
    3bfa:	4905      	ldr	r1, [pc, #20]	; (3c10 <rs485_init+0x1c>)
    3bfc:	4805      	ldr	r0, [pc, #20]	; (3c14 <rs485_init+0x20>)
    3bfe:	4b06      	ldr	r3, [pc, #24]	; (3c18 <rs485_init+0x24>)
    3c00:	4798      	blx	r3
        (unsigned)sizeof(Receive_Queue_Data));
    rs485_clock_init();
    3c02:	4b06      	ldr	r3, [pc, #24]	; (3c1c <rs485_init+0x28>)
    3c04:	4798      	blx	r3
    rs485_pin_init();
    3c06:	4b06      	ldr	r3, [pc, #24]	; (3c20 <rs485_init+0x2c>)
    3c08:	4798      	blx	r3
    rs485_usart_init();
    3c0a:	4b06      	ldr	r3, [pc, #24]	; (3c24 <rs485_init+0x30>)
    3c0c:	4798      	blx	r3
}
    3c0e:	bd10      	pop	{r4, pc}
    3c10:	2000018c 	.word	0x2000018c
    3c14:	2000017c 	.word	0x2000017c
    3c18:	0000159d 	.word	0x0000159d
    3c1c:	000039b9 	.word	0x000039b9
    3c20:	000039e9 	.word	0x000039e9
    3c24:	00003a6d 	.word	0x00003a6d

00003c28 <WDT_Handler>:
    3c28:	b510      	push	{r4, lr}
    3c2a:	2201      	movs	r2, #1
    3c2c:	4b03      	ldr	r3, [pc, #12]	; (3c3c <WDT_Handler+0x14>)
    3c2e:	719a      	strb	r2, [r3, #6]
    3c30:	4b03      	ldr	r3, [pc, #12]	; (3c40 <WDT_Handler+0x18>)
    3c32:	681b      	ldr	r3, [r3, #0]
    3c34:	2b00      	cmp	r3, #0
    3c36:	d000      	beq.n	3c3a <WDT_Handler+0x12>
    3c38:	4798      	blx	r3
    3c3a:	bd10      	pop	{r4, pc}
    3c3c:	40001000 	.word	0x40001000
    3c40:	200009d8 	.word	0x200009d8

00003c44 <_tc_interrupt_handler>:
    3c44:	b570      	push	{r4, r5, r6, lr}
    3c46:	0080      	lsls	r0, r0, #2
    3c48:	4b16      	ldr	r3, [pc, #88]	; (3ca4 <_tc_interrupt_handler+0x60>)
    3c4a:	58c5      	ldr	r5, [r0, r3]
    3c4c:	682b      	ldr	r3, [r5, #0]
    3c4e:	7b9c      	ldrb	r4, [r3, #14]
    3c50:	7e2a      	ldrb	r2, [r5, #24]
    3c52:	7e6b      	ldrb	r3, [r5, #25]
    3c54:	4014      	ands	r4, r2
    3c56:	401c      	ands	r4, r3
    3c58:	07e3      	lsls	r3, r4, #31
    3c5a:	d406      	bmi.n	3c6a <_tc_interrupt_handler+0x26>
    3c5c:	07a3      	lsls	r3, r4, #30
    3c5e:	d40b      	bmi.n	3c78 <_tc_interrupt_handler+0x34>
    3c60:	06e3      	lsls	r3, r4, #27
    3c62:	d410      	bmi.n	3c86 <_tc_interrupt_handler+0x42>
    3c64:	06a3      	lsls	r3, r4, #26
    3c66:	d415      	bmi.n	3c94 <_tc_interrupt_handler+0x50>
    3c68:	bd70      	pop	{r4, r5, r6, pc}
    3c6a:	0028      	movs	r0, r5
    3c6c:	68ab      	ldr	r3, [r5, #8]
    3c6e:	4798      	blx	r3
    3c70:	2301      	movs	r3, #1
    3c72:	682a      	ldr	r2, [r5, #0]
    3c74:	7393      	strb	r3, [r2, #14]
    3c76:	e7f1      	b.n	3c5c <_tc_interrupt_handler+0x18>
    3c78:	0028      	movs	r0, r5
    3c7a:	68eb      	ldr	r3, [r5, #12]
    3c7c:	4798      	blx	r3
    3c7e:	2302      	movs	r3, #2
    3c80:	682a      	ldr	r2, [r5, #0]
    3c82:	7393      	strb	r3, [r2, #14]
    3c84:	e7ec      	b.n	3c60 <_tc_interrupt_handler+0x1c>
    3c86:	0028      	movs	r0, r5
    3c88:	692b      	ldr	r3, [r5, #16]
    3c8a:	4798      	blx	r3
    3c8c:	2310      	movs	r3, #16
    3c8e:	682a      	ldr	r2, [r5, #0]
    3c90:	7393      	strb	r3, [r2, #14]
    3c92:	e7e7      	b.n	3c64 <_tc_interrupt_handler+0x20>
    3c94:	0028      	movs	r0, r5
    3c96:	696b      	ldr	r3, [r5, #20]
    3c98:	4798      	blx	r3
    3c9a:	682b      	ldr	r3, [r5, #0]
    3c9c:	2220      	movs	r2, #32
    3c9e:	739a      	strb	r2, [r3, #14]
    3ca0:	e7e2      	b.n	3c68 <_tc_interrupt_handler+0x24>
    3ca2:	46c0      	nop			; (mov r8, r8)
    3ca4:	200009dc 	.word	0x200009dc

00003ca8 <TC3_Handler>:
    3ca8:	b510      	push	{r4, lr}
    3caa:	2000      	movs	r0, #0
    3cac:	4b01      	ldr	r3, [pc, #4]	; (3cb4 <TC3_Handler+0xc>)
    3cae:	4798      	blx	r3
    3cb0:	bd10      	pop	{r4, pc}
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	00003c45 	.word	0x00003c45

00003cb8 <TC4_Handler>:
    3cb8:	b510      	push	{r4, lr}
    3cba:	2001      	movs	r0, #1
    3cbc:	4b01      	ldr	r3, [pc, #4]	; (3cc4 <TC4_Handler+0xc>)
    3cbe:	4798      	blx	r3
    3cc0:	bd10      	pop	{r4, pc}
    3cc2:	46c0      	nop			; (mov r8, r8)
    3cc4:	00003c45 	.word	0x00003c45

00003cc8 <TC5_Handler>:
    3cc8:	b510      	push	{r4, lr}
    3cca:	2002      	movs	r0, #2
    3ccc:	4b01      	ldr	r3, [pc, #4]	; (3cd4 <TC5_Handler+0xc>)
    3cce:	4798      	blx	r3
    3cd0:	bd10      	pop	{r4, pc}
    3cd2:	46c0      	nop			; (mov r8, r8)
    3cd4:	00003c45 	.word	0x00003c45

00003cd8 <TC6_Handler>:
    3cd8:	b510      	push	{r4, lr}
    3cda:	2003      	movs	r0, #3
    3cdc:	4b01      	ldr	r3, [pc, #4]	; (3ce4 <TC6_Handler+0xc>)
    3cde:	4798      	blx	r3
    3ce0:	bd10      	pop	{r4, pc}
    3ce2:	46c0      	nop			; (mov r8, r8)
    3ce4:	00003c45 	.word	0x00003c45

00003ce8 <TC7_Handler>:
    3ce8:	b510      	push	{r4, lr}
    3cea:	2004      	movs	r0, #4
    3cec:	4b01      	ldr	r3, [pc, #4]	; (3cf4 <TC7_Handler+0xc>)
    3cee:	4798      	blx	r3
    3cf0:	bd10      	pop	{r4, pc}
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	00003c45 	.word	0x00003c45

00003cf8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    3cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cfa:	46de      	mov	lr, fp
    3cfc:	4657      	mov	r7, sl
    3cfe:	464e      	mov	r6, r9
    3d00:	4645      	mov	r5, r8
    3d02:	b5e0      	push	{r5, r6, r7, lr}
    3d04:	b087      	sub	sp, #28
    3d06:	0005      	movs	r5, r0
    3d08:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3d0a:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3d0c:	0030      	movs	r0, r6
    3d0e:	4b69      	ldr	r3, [pc, #420]	; (3eb4 <_usart_set_config+0x1bc>)
    3d10:	4798      	blx	r3
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3d12:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3d14:	2200      	movs	r2, #0
    3d16:	230e      	movs	r3, #14
    3d18:	a902      	add	r1, sp, #8
    3d1a:	468c      	mov	ip, r1
    3d1c:	4463      	add	r3, ip
    3d1e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3d20:	8a22      	ldrh	r2, [r4, #16]
    3d22:	2380      	movs	r3, #128	; 0x80
    3d24:	01db      	lsls	r3, r3, #7
    3d26:	429a      	cmp	r2, r3
    3d28:	d03b      	beq.n	3da2 <_usart_set_config+0xaa>
    3d2a:	d90c      	bls.n	3d46 <_usart_set_config+0x4e>
    3d2c:	23c0      	movs	r3, #192	; 0xc0
    3d2e:	01db      	lsls	r3, r3, #7
    3d30:	429a      	cmp	r2, r3
    3d32:	d031      	beq.n	3d98 <_usart_set_config+0xa0>
    3d34:	2380      	movs	r3, #128	; 0x80
    3d36:	021b      	lsls	r3, r3, #8
    3d38:	429a      	cmp	r2, r3
    3d3a:	d10d      	bne.n	3d58 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3d3c:	2303      	movs	r3, #3
    3d3e:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3d40:	2300      	movs	r3, #0
    3d42:	469a      	mov	sl, r3
			break;
    3d44:	e00c      	b.n	3d60 <_usart_set_config+0x68>
	switch (config->sample_rate) {
    3d46:	2380      	movs	r3, #128	; 0x80
    3d48:	019b      	lsls	r3, r3, #6
    3d4a:	429a      	cmp	r2, r3
    3d4c:	d104      	bne.n	3d58 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3d4e:	2310      	movs	r3, #16
    3d50:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3d52:	3b0f      	subs	r3, #15
    3d54:	469a      	mov	sl, r3
			break;
    3d56:	e003      	b.n	3d60 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3d58:	2310      	movs	r3, #16
    3d5a:	4698      	mov	r8, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3d5c:	2300      	movs	r3, #0
    3d5e:	469a      	mov	sl, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3d60:	6823      	ldr	r3, [r4, #0]
    3d62:	68e1      	ldr	r1, [r4, #12]
    3d64:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
    3d66:	6961      	ldr	r1, [r4, #20]
    3d68:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3d6a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3d6c:	7e22      	ldrb	r2, [r4, #24]
    3d6e:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    3d70:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3d72:	2226      	movs	r2, #38	; 0x26
    3d74:	5ca2      	ldrb	r2, [r4, r2]
    3d76:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    3d78:	4313      	orrs	r3, r2
    3d7a:	4699      	mov	r9, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3d7c:	6862      	ldr	r2, [r4, #4]
    3d7e:	9203      	str	r2, [sp, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3d80:	2a00      	cmp	r2, #0
    3d82:	d021      	beq.n	3dc8 <_usart_set_config+0xd0>
    3d84:	2380      	movs	r3, #128	; 0x80
    3d86:	055b      	lsls	r3, r3, #21
    3d88:	429a      	cmp	r2, r3
    3d8a:	d13e      	bne.n	3e0a <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3d8c:	2327      	movs	r3, #39	; 0x27
    3d8e:	5ce3      	ldrb	r3, [r4, r3]
    3d90:	2b00      	cmp	r3, #0
    3d92:	d00b      	beq.n	3dac <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
    3d94:	2000      	movs	r0, #0
    3d96:	e039      	b.n	3e0c <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3d98:	2308      	movs	r3, #8
    3d9a:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3d9c:	3b07      	subs	r3, #7
    3d9e:	469a      	mov	sl, r3
			break;
    3da0:	e7de      	b.n	3d60 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3da2:	2308      	movs	r3, #8
    3da4:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3da6:	2300      	movs	r3, #0
    3da8:	469a      	mov	sl, r3
    3daa:	e7d9      	b.n	3d60 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3dac:	6a23      	ldr	r3, [r4, #32]
    3dae:	4698      	mov	r8, r3
    3db0:	b2c0      	uxtb	r0, r0
    3db2:	4b41      	ldr	r3, [pc, #260]	; (3eb8 <_usart_set_config+0x1c0>)
    3db4:	4798      	blx	r3
    3db6:	0001      	movs	r1, r0
    3db8:	220e      	movs	r2, #14
    3dba:	ab02      	add	r3, sp, #8
    3dbc:	469c      	mov	ip, r3
    3dbe:	4462      	add	r2, ip
    3dc0:	4640      	mov	r0, r8
    3dc2:	4b3e      	ldr	r3, [pc, #248]	; (3ebc <_usart_set_config+0x1c4>)
    3dc4:	4798      	blx	r3
    3dc6:	e021      	b.n	3e0c <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3dc8:	2327      	movs	r3, #39	; 0x27
    3dca:	5ce3      	ldrb	r3, [r4, r3]
    3dcc:	2b00      	cmp	r3, #0
    3dce:	d00b      	beq.n	3de8 <_usart_set_config+0xf0>
				status_code =
    3dd0:	4643      	mov	r3, r8
    3dd2:	9300      	str	r3, [sp, #0]
    3dd4:	4653      	mov	r3, sl
    3dd6:	220e      	movs	r2, #14
    3dd8:	a902      	add	r1, sp, #8
    3dda:	468c      	mov	ip, r1
    3ddc:	4462      	add	r2, ip
    3dde:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3de0:	6a20      	ldr	r0, [r4, #32]
    3de2:	4f37      	ldr	r7, [pc, #220]	; (3ec0 <_usart_set_config+0x1c8>)
    3de4:	47b8      	blx	r7
    3de6:	e011      	b.n	3e0c <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    3de8:	6a23      	ldr	r3, [r4, #32]
    3dea:	469b      	mov	fp, r3
    3dec:	b2c0      	uxtb	r0, r0
    3dee:	4b32      	ldr	r3, [pc, #200]	; (3eb8 <_usart_set_config+0x1c0>)
    3df0:	4798      	blx	r3
    3df2:	0001      	movs	r1, r0
				status_code =
    3df4:	4643      	mov	r3, r8
    3df6:	9300      	str	r3, [sp, #0]
    3df8:	4653      	mov	r3, sl
    3dfa:	220e      	movs	r2, #14
    3dfc:	a802      	add	r0, sp, #8
    3dfe:	4684      	mov	ip, r0
    3e00:	4462      	add	r2, ip
    3e02:	4658      	mov	r0, fp
    3e04:	4f2e      	ldr	r7, [pc, #184]	; (3ec0 <_usart_set_config+0x1c8>)
    3e06:	47b8      	blx	r7
    3e08:	e000      	b.n	3e0c <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
    3e0a:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d142      	bne.n	3e96 <_usart_set_config+0x19e>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    3e10:	7e63      	ldrb	r3, [r4, #25]
    3e12:	2b00      	cmp	r3, #0
    3e14:	d001      	beq.n	3e1a <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3e16:	7ea3      	ldrb	r3, [r4, #26]
    3e18:	73b3      	strb	r3, [r6, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3e1a:	230e      	movs	r3, #14
    3e1c:	aa02      	add	r2, sp, #8
    3e1e:	4694      	mov	ip, r2
    3e20:	4463      	add	r3, ip
    3e22:	881b      	ldrh	r3, [r3, #0]
    3e24:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    3e26:	464b      	mov	r3, r9
    3e28:	9a03      	ldr	r2, [sp, #12]
    3e2a:	4313      	orrs	r3, r2

	if (config->use_external_clock == false) {
    3e2c:	2227      	movs	r2, #39	; 0x27
    3e2e:	5ca2      	ldrb	r2, [r4, r2]
    3e30:	2a00      	cmp	r2, #0
    3e32:	d101      	bne.n	3e38 <_usart_set_config+0x140>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3e34:	3204      	adds	r2, #4
    3e36:	4313      	orrs	r3, r2
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3e38:	7e61      	ldrb	r1, [r4, #25]
    3e3a:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3e3c:	7f22      	ldrb	r2, [r4, #28]
    3e3e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3e40:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3e42:	7f62      	ldrb	r2, [r4, #29]
    3e44:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3e46:	4311      	orrs	r1, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3e48:	2224      	movs	r2, #36	; 0x24
    3e4a:	5ca2      	ldrb	r2, [r4, r2]
    3e4c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3e4e:	4311      	orrs	r1, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3e50:	2225      	movs	r2, #37	; 0x25
    3e52:	5ca2      	ldrb	r2, [r4, r2]
    3e54:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3e56:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    3e58:	7aa2      	ldrb	r2, [r4, #10]
    3e5a:	4311      	orrs	r1, r2
	ctrlb |= (uint32_t)config->character_size;
    3e5c:	7ae2      	ldrb	r2, [r4, #11]
    3e5e:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3e60:	8922      	ldrh	r2, [r4, #8]
    3e62:	2aff      	cmp	r2, #255	; 0xff
    3e64:	d01e      	beq.n	3ea4 <_usart_set_config+0x1ac>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3e66:	2780      	movs	r7, #128	; 0x80
    3e68:	047f      	lsls	r7, r7, #17
    3e6a:	433b      	orrs	r3, r7
		ctrlb |= config->parity;
    3e6c:	4311      	orrs	r1, r2
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3e6e:	222c      	movs	r2, #44	; 0x2c
    3e70:	5ca2      	ldrb	r2, [r4, r2]
    3e72:	2a00      	cmp	r2, #0
    3e74:	d103      	bne.n	3e7e <_usart_set_config+0x186>
    3e76:	4a13      	ldr	r2, [pc, #76]	; (3ec4 <_usart_set_config+0x1cc>)
    3e78:	7892      	ldrb	r2, [r2, #2]
    3e7a:	0792      	lsls	r2, r2, #30
    3e7c:	d501      	bpl.n	3e82 <_usart_set_config+0x18a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3e7e:	2280      	movs	r2, #128	; 0x80
    3e80:	4313      	orrs	r3, r2
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e82:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3e84:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    3e86:	2a00      	cmp	r2, #0
    3e88:	d1fb      	bne.n	3e82 <_usart_set_config+0x18a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3e8a:	6071      	str	r1, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e8c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3e8e:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    3e90:	2a00      	cmp	r2, #0
    3e92:	d1fb      	bne.n	3e8c <_usart_set_config+0x194>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3e94:	6033      	str	r3, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
    3e96:	b007      	add	sp, #28
    3e98:	bc3c      	pop	{r2, r3, r4, r5}
    3e9a:	4690      	mov	r8, r2
    3e9c:	4699      	mov	r9, r3
    3e9e:	46a2      	mov	sl, r4
    3ea0:	46ab      	mov	fp, r5
    3ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
    3ea4:	7ee2      	ldrb	r2, [r4, #27]
    3ea6:	2a00      	cmp	r2, #0
    3ea8:	d0e1      	beq.n	3e6e <_usart_set_config+0x176>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3eaa:	2280      	movs	r2, #128	; 0x80
    3eac:	04d2      	lsls	r2, r2, #19
    3eae:	4313      	orrs	r3, r2
    3eb0:	e7dd      	b.n	3e6e <_usart_set_config+0x176>
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	00000a21 	.word	0x00000a21
    3eb8:	00004905 	.word	0x00004905
    3ebc:	00000795 	.word	0x00000795
    3ec0:	000007c1 	.word	0x000007c1
    3ec4:	41002000 	.word	0x41002000

00003ec8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eca:	b089      	sub	sp, #36	; 0x24
    3ecc:	0006      	movs	r6, r0
    3ece:	000c      	movs	r4, r1
    3ed0:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3ed2:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3ed4:	0008      	movs	r0, r1
    3ed6:	4b42      	ldr	r3, [pc, #264]	; (3fe0 <usart_init+0x118>)
    3ed8:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3eda:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3edc:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3ede:	6823      	ldr	r3, [r4, #0]
    3ee0:	07db      	lsls	r3, r3, #31
    3ee2:	d503      	bpl.n	3eec <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3ee4:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3ee6:	0028      	movs	r0, r5
    3ee8:	b009      	add	sp, #36	; 0x24
    3eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3eec:	6823      	ldr	r3, [r4, #0]
    3eee:	079b      	lsls	r3, r3, #30
    3ef0:	d501      	bpl.n	3ef6 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
    3ef2:	251c      	movs	r5, #28
    3ef4:	e7f7      	b.n	3ee6 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3ef6:	2301      	movs	r3, #1
    3ef8:	4093      	lsls	r3, r2
    3efa:	4a3a      	ldr	r2, [pc, #232]	; (3fe4 <usart_init+0x11c>)
    3efc:	6a11      	ldr	r1, [r2, #32]
    3efe:	430b      	orrs	r3, r1
    3f00:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3f02:	252d      	movs	r5, #45	; 0x2d
    3f04:	5d7b      	ldrb	r3, [r7, r5]
    3f06:	a907      	add	r1, sp, #28
    3f08:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3f0a:	b2c3      	uxtb	r3, r0
    3f0c:	9301      	str	r3, [sp, #4]
    3f0e:	0018      	movs	r0, r3
    3f10:	4b35      	ldr	r3, [pc, #212]	; (3fe8 <usart_init+0x120>)
    3f12:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3f14:	9801      	ldr	r0, [sp, #4]
    3f16:	4b35      	ldr	r3, [pc, #212]	; (3fec <usart_init+0x124>)
    3f18:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3f1a:	5d78      	ldrb	r0, [r7, r5]
    3f1c:	2100      	movs	r1, #0
    3f1e:	4b34      	ldr	r3, [pc, #208]	; (3ff0 <usart_init+0x128>)
    3f20:	4798      	blx	r3
	module->character_size = config->character_size;
    3f22:	7afb      	ldrb	r3, [r7, #11]
    3f24:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    3f26:	2324      	movs	r3, #36	; 0x24
    3f28:	5cfb      	ldrb	r3, [r7, r3]
    3f2a:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3f2c:	2325      	movs	r3, #37	; 0x25
    3f2e:	5cfb      	ldrb	r3, [r7, r3]
    3f30:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    3f32:	7efb      	ldrb	r3, [r7, #27]
    3f34:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3f36:	7f3b      	ldrb	r3, [r7, #28]
    3f38:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    3f3a:	0039      	movs	r1, r7
    3f3c:	0030      	movs	r0, r6
    3f3e:	4b2d      	ldr	r3, [pc, #180]	; (3ff4 <usart_init+0x12c>)
    3f40:	4798      	blx	r3
    3f42:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    3f44:	d1cf      	bne.n	3ee6 <usart_init+0x1e>
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3f46:	ab06      	add	r3, sp, #24
    3f48:	2280      	movs	r2, #128	; 0x80
    3f4a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3f4c:	2200      	movs	r2, #0
    3f4e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    3f50:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3f52:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3f56:	9302      	str	r3, [sp, #8]
    3f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f5a:	9303      	str	r3, [sp, #12]
    3f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f5e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    3f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f62:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    3f64:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    3f66:	2700      	movs	r7, #0
    3f68:	e006      	b.n	3f78 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3f6a:	0039      	movs	r1, r7
    3f6c:	0020      	movs	r0, r4
    3f6e:	4b22      	ldr	r3, [pc, #136]	; (3ff8 <usart_init+0x130>)
    3f70:	4798      	blx	r3
    3f72:	e008      	b.n	3f86 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    3f74:	3701      	adds	r7, #1
    3f76:	b2ff      	uxtb	r7, r7
    3f78:	2f03      	cmp	r7, #3
    3f7a:	d80d      	bhi.n	3f98 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3f7c:	00bb      	lsls	r3, r7, #2
    3f7e:	aa02      	add	r2, sp, #8
    3f80:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    3f82:	2800      	cmp	r0, #0
    3f84:	d0f1      	beq.n	3f6a <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    3f86:	1c43      	adds	r3, r0, #1
    3f88:	d0f4      	beq.n	3f74 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3f8a:	a906      	add	r1, sp, #24
    3f8c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3f8e:	0c00      	lsrs	r0, r0, #16
    3f90:	b2c0      	uxtb	r0, r0
    3f92:	4b1a      	ldr	r3, [pc, #104]	; (3ffc <usart_init+0x134>)
    3f94:	4798      	blx	r3
    3f96:	e7ed      	b.n	3f74 <usart_init+0xac>
    3f98:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    3f9a:	2a05      	cmp	r2, #5
    3f9c:	d806      	bhi.n	3fac <usart_init+0xe4>
		module->callback[i]            = NULL;
    3f9e:	1c93      	adds	r3, r2, #2
    3fa0:	009b      	lsls	r3, r3, #2
    3fa2:	18f3      	adds	r3, r6, r3
    3fa4:	2100      	movs	r1, #0
    3fa6:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    3fa8:	3201      	adds	r2, #1
    3faa:	e7f6      	b.n	3f9a <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    3fac:	2200      	movs	r2, #0
    3fae:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    3fb0:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    3fb2:	2300      	movs	r3, #0
    3fb4:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    3fb6:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3fb8:	3230      	adds	r2, #48	; 0x30
    3fba:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    3fbc:	3201      	adds	r2, #1
    3fbe:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    3fc0:	3201      	adds	r2, #1
    3fc2:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    3fc4:	3201      	adds	r2, #1
    3fc6:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3fc8:	6830      	ldr	r0, [r6, #0]
    3fca:	4b05      	ldr	r3, [pc, #20]	; (3fe0 <usart_init+0x118>)
    3fcc:	4798      	blx	r3
    3fce:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3fd0:	490b      	ldr	r1, [pc, #44]	; (4000 <usart_init+0x138>)
    3fd2:	4b0c      	ldr	r3, [pc, #48]	; (4004 <usart_init+0x13c>)
    3fd4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3fd6:	00a4      	lsls	r4, r4, #2
    3fd8:	4b0b      	ldr	r3, [pc, #44]	; (4008 <usart_init+0x140>)
    3fda:	50e6      	str	r6, [r4, r3]
	return status_code;
    3fdc:	e783      	b.n	3ee6 <usart_init+0x1e>
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	00000a21 	.word	0x00000a21
    3fe4:	40000400 	.word	0x40000400
    3fe8:	000048e9 	.word	0x000048e9
    3fec:	00004861 	.word	0x00004861
    3ff0:	0000085d 	.word	0x0000085d
    3ff4:	00003cf9 	.word	0x00003cf9
    3ff8:	000008a9 	.word	0x000008a9
    3ffc:	00004a21 	.word	0x00004a21
    4000:	00004089 	.word	0x00004089
    4004:	0000422d 	.word	0x0000422d
    4008:	200009f0 	.word	0x200009f0

0000400c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    400e:	0004      	movs	r4, r0
    4010:	000d      	movs	r5, r1
    4012:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4014:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    4016:	4b10      	ldr	r3, [pc, #64]	; (4058 <_usart_read_buffer+0x4c>)
    4018:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    401a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    401c:	b29b      	uxth	r3, r3
    401e:	2b00      	cmp	r3, #0
    4020:	d003      	beq.n	402a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    4022:	4b0e      	ldr	r3, [pc, #56]	; (405c <_usart_read_buffer+0x50>)
    4024:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    4026:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    4028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    402a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    402c:	4b0b      	ldr	r3, [pc, #44]	; (405c <_usart_read_buffer+0x50>)
    402e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    4030:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    4032:	2205      	movs	r2, #5
    4034:	2332      	movs	r3, #50	; 0x32
    4036:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    4038:	3b2e      	subs	r3, #46	; 0x2e
    403a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    403c:	7a23      	ldrb	r3, [r4, #8]
    403e:	2b00      	cmp	r3, #0
    4040:	d001      	beq.n	4046 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    4042:	2320      	movs	r3, #32
    4044:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    4046:	7a63      	ldrb	r3, [r4, #9]
    4048:	2b00      	cmp	r3, #0
    404a:	d003      	beq.n	4054 <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    404c:	2308      	movs	r3, #8
    404e:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    4050:	2000      	movs	r0, #0
    4052:	e7e9      	b.n	4028 <_usart_read_buffer+0x1c>
    4054:	2000      	movs	r0, #0
    4056:	e7e7      	b.n	4028 <_usart_read_buffer+0x1c>
    4058:	00004319 	.word	0x00004319
    405c:	00004359 	.word	0x00004359

00004060 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4060:	1c93      	adds	r3, r2, #2
    4062:	009b      	lsls	r3, r3, #2
    4064:	18c3      	adds	r3, r0, r3
    4066:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    4068:	2301      	movs	r3, #1
    406a:	4093      	lsls	r3, r2
    406c:	001a      	movs	r2, r3
    406e:	2130      	movs	r1, #48	; 0x30
    4070:	5c43      	ldrb	r3, [r0, r1]
    4072:	4313      	orrs	r3, r2
    4074:	5443      	strb	r3, [r0, r1]
}
    4076:	4770      	bx	lr

00004078 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    4078:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    407a:	2201      	movs	r2, #1
    407c:	4b01      	ldr	r3, [pc, #4]	; (4084 <usart_read_job+0xc>)
    407e:	4798      	blx	r3
}
    4080:	bd10      	pop	{r4, pc}
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	0000400d 	.word	0x0000400d

00004088 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4088:	b5f0      	push	{r4, r5, r6, r7, lr}
    408a:	46c6      	mov	lr, r8
    408c:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    408e:	0080      	lsls	r0, r0, #2
    4090:	4b64      	ldr	r3, [pc, #400]	; (4224 <_usart_interrupt_handler+0x19c>)
    4092:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4094:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4096:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    4098:	2b00      	cmp	r3, #0
    409a:	d1fc      	bne.n	4096 <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    409c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    409e:	7da6      	ldrb	r6, [r4, #22]
    40a0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    40a2:	2330      	movs	r3, #48	; 0x30
    40a4:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    40a6:	2231      	movs	r2, #49	; 0x31
    40a8:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    40aa:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    40ac:	07f3      	lsls	r3, r6, #31
    40ae:	d525      	bpl.n	40fc <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    40b0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    40b2:	b29b      	uxth	r3, r3
    40b4:	2b00      	cmp	r3, #0
    40b6:	d01f      	beq.n	40f8 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    40b8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    40ba:	780a      	ldrb	r2, [r1, #0]
    40bc:	b2d2      	uxtb	r2, r2
    40be:	b293      	uxth	r3, r2
    40c0:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    40c2:	1c48      	adds	r0, r1, #1
    40c4:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    40c6:	796b      	ldrb	r3, [r5, #5]
    40c8:	2b01      	cmp	r3, #1
    40ca:	d00e      	beq.n	40ea <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    40cc:	4643      	mov	r3, r8
    40ce:	05db      	lsls	r3, r3, #23
    40d0:	0ddb      	lsrs	r3, r3, #23
    40d2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    40d4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    40d6:	3b01      	subs	r3, #1
    40d8:	b29b      	uxth	r3, r3
    40da:	85eb      	strh	r3, [r5, #46]	; 0x2e
    40dc:	2b00      	cmp	r3, #0
    40de:	d10d      	bne.n	40fc <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    40e0:	3301      	adds	r3, #1
    40e2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    40e4:	3301      	adds	r3, #1
    40e6:	75a3      	strb	r3, [r4, #22]
    40e8:	e008      	b.n	40fc <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    40ea:	784b      	ldrb	r3, [r1, #1]
    40ec:	021b      	lsls	r3, r3, #8
    40ee:	4313      	orrs	r3, r2
    40f0:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    40f2:	1c88      	adds	r0, r1, #2
    40f4:	62a8      	str	r0, [r5, #40]	; 0x28
    40f6:	e7e9      	b.n	40cc <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    40f8:	2301      	movs	r3, #1
    40fa:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    40fc:	07b3      	lsls	r3, r6, #30
    40fe:	d506      	bpl.n	410e <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4100:	2302      	movs	r3, #2
    4102:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4104:	2200      	movs	r2, #0
    4106:	3331      	adds	r3, #49	; 0x31
    4108:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    410a:	07fb      	lsls	r3, r7, #31
    410c:	d41c      	bmi.n	4148 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    410e:	0773      	lsls	r3, r6, #29
    4110:	d564      	bpl.n	41dc <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    4112:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4114:	b29b      	uxth	r3, r3
    4116:	2b00      	cmp	r3, #0
    4118:	d05e      	beq.n	41d8 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    411a:	8b62      	ldrh	r2, [r4, #26]
    411c:	b2d2      	uxtb	r2, r2
    411e:	233f      	movs	r3, #63	; 0x3f
    4120:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4122:	0711      	lsls	r1, r2, #28
    4124:	d501      	bpl.n	412a <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4126:	2337      	movs	r3, #55	; 0x37
    4128:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    412a:	2b00      	cmp	r3, #0
    412c:	d031      	beq.n	4192 <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    412e:	079a      	lsls	r2, r3, #30
    4130:	d50e      	bpl.n	4150 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4132:	221a      	movs	r2, #26
    4134:	2332      	movs	r3, #50	; 0x32
    4136:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4138:	3b30      	subs	r3, #48	; 0x30
    413a:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    413c:	077b      	lsls	r3, r7, #29
    413e:	d54d      	bpl.n	41dc <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4140:	0028      	movs	r0, r5
    4142:	696b      	ldr	r3, [r5, #20]
    4144:	4798      	blx	r3
    4146:	e049      	b.n	41dc <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4148:	0028      	movs	r0, r5
    414a:	68eb      	ldr	r3, [r5, #12]
    414c:	4798      	blx	r3
    414e:	e7de      	b.n	410e <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4150:	075a      	lsls	r2, r3, #29
    4152:	d505      	bpl.n	4160 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    4154:	221e      	movs	r2, #30
    4156:	2332      	movs	r3, #50	; 0x32
    4158:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    415a:	3b2e      	subs	r3, #46	; 0x2e
    415c:	8363      	strh	r3, [r4, #26]
    415e:	e7ed      	b.n	413c <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4160:	07da      	lsls	r2, r3, #31
    4162:	d505      	bpl.n	4170 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    4164:	2213      	movs	r2, #19
    4166:	2332      	movs	r3, #50	; 0x32
    4168:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    416a:	3b31      	subs	r3, #49	; 0x31
    416c:	8363      	strh	r3, [r4, #26]
    416e:	e7e5      	b.n	413c <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4170:	06da      	lsls	r2, r3, #27
    4172:	d505      	bpl.n	4180 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    4174:	2242      	movs	r2, #66	; 0x42
    4176:	2332      	movs	r3, #50	; 0x32
    4178:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    417a:	3b22      	subs	r3, #34	; 0x22
    417c:	8363      	strh	r3, [r4, #26]
    417e:	e7dd      	b.n	413c <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4180:	2220      	movs	r2, #32
    4182:	421a      	tst	r2, r3
    4184:	d0da      	beq.n	413c <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4186:	3221      	adds	r2, #33	; 0x21
    4188:	2332      	movs	r3, #50	; 0x32
    418a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    418c:	3b12      	subs	r3, #18
    418e:	8363      	strh	r3, [r4, #26]
    4190:	e7d4      	b.n	413c <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4192:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4194:	05db      	lsls	r3, r3, #23
    4196:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4198:	b2da      	uxtb	r2, r3
    419a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    419c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    419e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    41a0:	1c51      	adds	r1, r2, #1
    41a2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    41a4:	7969      	ldrb	r1, [r5, #5]
    41a6:	2901      	cmp	r1, #1
    41a8:	d010      	beq.n	41cc <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    41aa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    41ac:	3b01      	subs	r3, #1
    41ae:	b29b      	uxth	r3, r3
    41b0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    41b2:	2b00      	cmp	r3, #0
    41b4:	d112      	bne.n	41dc <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    41b6:	3304      	adds	r3, #4
    41b8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    41ba:	2200      	movs	r2, #0
    41bc:	332e      	adds	r3, #46	; 0x2e
    41be:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    41c0:	07bb      	lsls	r3, r7, #30
    41c2:	d50b      	bpl.n	41dc <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    41c4:	0028      	movs	r0, r5
    41c6:	692b      	ldr	r3, [r5, #16]
    41c8:	4798      	blx	r3
    41ca:	e007      	b.n	41dc <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    41cc:	0a1b      	lsrs	r3, r3, #8
    41ce:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    41d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    41d2:	3301      	adds	r3, #1
    41d4:	626b      	str	r3, [r5, #36]	; 0x24
    41d6:	e7e8      	b.n	41aa <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    41d8:	2304      	movs	r3, #4
    41da:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    41dc:	06f3      	lsls	r3, r6, #27
    41de:	d504      	bpl.n	41ea <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    41e0:	2310      	movs	r3, #16
    41e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    41e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    41e6:	06fb      	lsls	r3, r7, #27
    41e8:	d410      	bmi.n	420c <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    41ea:	06b3      	lsls	r3, r6, #26
    41ec:	d504      	bpl.n	41f8 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    41ee:	2320      	movs	r3, #32
    41f0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    41f2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    41f4:	073b      	lsls	r3, r7, #28
    41f6:	d40d      	bmi.n	4214 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    41f8:	0733      	lsls	r3, r6, #28
    41fa:	d504      	bpl.n	4206 <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    41fc:	2308      	movs	r3, #8
    41fe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4200:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4202:	06bb      	lsls	r3, r7, #26
    4204:	d40a      	bmi.n	421c <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4206:	bc04      	pop	{r2}
    4208:	4690      	mov	r8, r2
    420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    420c:	0028      	movs	r0, r5
    420e:	69eb      	ldr	r3, [r5, #28]
    4210:	4798      	blx	r3
    4212:	e7ea      	b.n	41ea <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4214:	0028      	movs	r0, r5
    4216:	69ab      	ldr	r3, [r5, #24]
    4218:	4798      	blx	r3
    421a:	e7ed      	b.n	41f8 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    421c:	6a2b      	ldr	r3, [r5, #32]
    421e:	0028      	movs	r0, r5
    4220:	4798      	blx	r3
}
    4222:	e7f0      	b.n	4206 <_usart_interrupt_handler+0x17e>
    4224:	200009f0 	.word	0x200009f0

00004228 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4228:	4770      	bx	lr
	...

0000422c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    422c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    422e:	4b0b      	ldr	r3, [pc, #44]	; (425c <_sercom_set_handler+0x30>)
    4230:	781b      	ldrb	r3, [r3, #0]
    4232:	2b00      	cmp	r3, #0
    4234:	d008      	beq.n	4248 <_sercom_set_handler+0x1c>
    4236:	e00c      	b.n	4252 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4238:	009a      	lsls	r2, r3, #2
    423a:	4d09      	ldr	r5, [pc, #36]	; (4260 <_sercom_set_handler+0x34>)
    423c:	4c09      	ldr	r4, [pc, #36]	; (4264 <_sercom_set_handler+0x38>)
    423e:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    4240:	2500      	movs	r5, #0
    4242:	4c09      	ldr	r4, [pc, #36]	; (4268 <_sercom_set_handler+0x3c>)
    4244:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4246:	3301      	adds	r3, #1
    4248:	2b05      	cmp	r3, #5
    424a:	d9f5      	bls.n	4238 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    424c:	2201      	movs	r2, #1
    424e:	4b03      	ldr	r3, [pc, #12]	; (425c <_sercom_set_handler+0x30>)
    4250:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4252:	0080      	lsls	r0, r0, #2
    4254:	4b03      	ldr	r3, [pc, #12]	; (4264 <_sercom_set_handler+0x38>)
    4256:	50c1      	str	r1, [r0, r3]
}
    4258:	bd30      	pop	{r4, r5, pc}
    425a:	46c0      	nop			; (mov r8, r8)
    425c:	2000038d 	.word	0x2000038d
    4260:	00004229 	.word	0x00004229
    4264:	20000390 	.word	0x20000390
    4268:	200009f0 	.word	0x200009f0

0000426c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    426c:	b500      	push	{lr}
    426e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4270:	4b05      	ldr	r3, [pc, #20]	; (4288 <_sercom_get_interrupt_vector+0x1c>)
    4272:	681a      	ldr	r2, [r3, #0]
    4274:	9200      	str	r2, [sp, #0]
    4276:	889b      	ldrh	r3, [r3, #4]
    4278:	466a      	mov	r2, sp
    427a:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    427c:	4b03      	ldr	r3, [pc, #12]	; (428c <_sercom_get_interrupt_vector+0x20>)
    427e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4280:	466b      	mov	r3, sp
    4282:	5618      	ldrsb	r0, [r3, r0]
}
    4284:	b003      	add	sp, #12
    4286:	bd00      	pop	{pc}
    4288:	00005b40 	.word	0x00005b40
    428c:	00000a21 	.word	0x00000a21

00004290 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4290:	b510      	push	{r4, lr}
    4292:	4b02      	ldr	r3, [pc, #8]	; (429c <SERCOM0_Handler+0xc>)
    4294:	681b      	ldr	r3, [r3, #0]
    4296:	2000      	movs	r0, #0
    4298:	4798      	blx	r3
    429a:	bd10      	pop	{r4, pc}
    429c:	20000390 	.word	0x20000390

000042a0 <SERCOM1_Handler>:
    42a0:	b510      	push	{r4, lr}
    42a2:	4b02      	ldr	r3, [pc, #8]	; (42ac <SERCOM1_Handler+0xc>)
    42a4:	685b      	ldr	r3, [r3, #4]
    42a6:	2001      	movs	r0, #1
    42a8:	4798      	blx	r3
    42aa:	bd10      	pop	{r4, pc}
    42ac:	20000390 	.word	0x20000390

000042b0 <SERCOM2_Handler>:
    42b0:	b510      	push	{r4, lr}
    42b2:	4b02      	ldr	r3, [pc, #8]	; (42bc <SERCOM2_Handler+0xc>)
    42b4:	689b      	ldr	r3, [r3, #8]
    42b6:	2002      	movs	r0, #2
    42b8:	4798      	blx	r3
    42ba:	bd10      	pop	{r4, pc}
    42bc:	20000390 	.word	0x20000390

000042c0 <SERCOM3_Handler>:
    42c0:	b510      	push	{r4, lr}
    42c2:	4b02      	ldr	r3, [pc, #8]	; (42cc <SERCOM3_Handler+0xc>)
    42c4:	68db      	ldr	r3, [r3, #12]
    42c6:	2003      	movs	r0, #3
    42c8:	4798      	blx	r3
    42ca:	bd10      	pop	{r4, pc}
    42cc:	20000390 	.word	0x20000390

000042d0 <SERCOM4_Handler>:
    42d0:	b510      	push	{r4, lr}
    42d2:	4b02      	ldr	r3, [pc, #8]	; (42dc <SERCOM4_Handler+0xc>)
    42d4:	691b      	ldr	r3, [r3, #16]
    42d6:	2004      	movs	r0, #4
    42d8:	4798      	blx	r3
    42da:	bd10      	pop	{r4, pc}
    42dc:	20000390 	.word	0x20000390

000042e0 <SERCOM5_Handler>:
    42e0:	b510      	push	{r4, lr}
    42e2:	4b02      	ldr	r3, [pc, #8]	; (42ec <SERCOM5_Handler+0xc>)
    42e4:	695b      	ldr	r3, [r3, #20]
    42e6:	2005      	movs	r0, #5
    42e8:	4798      	blx	r3
    42ea:	bd10      	pop	{r4, pc}
    42ec:	20000390 	.word	0x20000390

000042f0 <port_pin_set_config>:
    42f0:	b500      	push	{lr}
    42f2:	b083      	sub	sp, #12
    42f4:	ab01      	add	r3, sp, #4
    42f6:	2280      	movs	r2, #128	; 0x80
    42f8:	701a      	strb	r2, [r3, #0]
    42fa:	780a      	ldrb	r2, [r1, #0]
    42fc:	705a      	strb	r2, [r3, #1]
    42fe:	784a      	ldrb	r2, [r1, #1]
    4300:	709a      	strb	r2, [r3, #2]
    4302:	788a      	ldrb	r2, [r1, #2]
    4304:	70da      	strb	r2, [r3, #3]
    4306:	0019      	movs	r1, r3
    4308:	4b01      	ldr	r3, [pc, #4]	; (4310 <port_pin_set_config+0x20>)
    430a:	4798      	blx	r3
    430c:	b003      	add	sp, #12
    430e:	bd00      	pop	{pc}
    4310:	00004a21 	.word	0x00004a21

00004314 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4314:	4770      	bx	lr
	...

00004318 <cpu_irq_enter_critical>:
    4318:	4b0c      	ldr	r3, [pc, #48]	; (434c <cpu_irq_enter_critical+0x34>)
    431a:	681b      	ldr	r3, [r3, #0]
    431c:	2b00      	cmp	r3, #0
    431e:	d106      	bne.n	432e <cpu_irq_enter_critical+0x16>
    4320:	f3ef 8310 	mrs	r3, PRIMASK
    4324:	2b00      	cmp	r3, #0
    4326:	d007      	beq.n	4338 <cpu_irq_enter_critical+0x20>
    4328:	2200      	movs	r2, #0
    432a:	4b09      	ldr	r3, [pc, #36]	; (4350 <cpu_irq_enter_critical+0x38>)
    432c:	701a      	strb	r2, [r3, #0]
    432e:	4a07      	ldr	r2, [pc, #28]	; (434c <cpu_irq_enter_critical+0x34>)
    4330:	6813      	ldr	r3, [r2, #0]
    4332:	3301      	adds	r3, #1
    4334:	6013      	str	r3, [r2, #0]
    4336:	4770      	bx	lr
    4338:	b672      	cpsid	i
    433a:	f3bf 8f5f 	dmb	sy
    433e:	2200      	movs	r2, #0
    4340:	4b04      	ldr	r3, [pc, #16]	; (4354 <cpu_irq_enter_critical+0x3c>)
    4342:	701a      	strb	r2, [r3, #0]
    4344:	3201      	adds	r2, #1
    4346:	4b02      	ldr	r3, [pc, #8]	; (4350 <cpu_irq_enter_critical+0x38>)
    4348:	701a      	strb	r2, [r3, #0]
    434a:	e7f0      	b.n	432e <cpu_irq_enter_critical+0x16>
    434c:	200003a8 	.word	0x200003a8
    4350:	200003ac 	.word	0x200003ac
    4354:	2000000b 	.word	0x2000000b

00004358 <cpu_irq_leave_critical>:
    4358:	4b08      	ldr	r3, [pc, #32]	; (437c <cpu_irq_leave_critical+0x24>)
    435a:	681a      	ldr	r2, [r3, #0]
    435c:	3a01      	subs	r2, #1
    435e:	601a      	str	r2, [r3, #0]
    4360:	681b      	ldr	r3, [r3, #0]
    4362:	2b00      	cmp	r3, #0
    4364:	d109      	bne.n	437a <cpu_irq_leave_critical+0x22>
    4366:	4b06      	ldr	r3, [pc, #24]	; (4380 <cpu_irq_leave_critical+0x28>)
    4368:	781b      	ldrb	r3, [r3, #0]
    436a:	2b00      	cmp	r3, #0
    436c:	d005      	beq.n	437a <cpu_irq_leave_critical+0x22>
    436e:	2201      	movs	r2, #1
    4370:	4b04      	ldr	r3, [pc, #16]	; (4384 <cpu_irq_leave_critical+0x2c>)
    4372:	701a      	strb	r2, [r3, #0]
    4374:	f3bf 8f5f 	dmb	sy
    4378:	b662      	cpsie	i
    437a:	4770      	bx	lr
    437c:	200003a8 	.word	0x200003a8
    4380:	200003ac 	.word	0x200003ac
    4384:	2000000b 	.word	0x2000000b

00004388 <_switch_peripheral_gclk>:
    4388:	b510      	push	{r4, lr}
    438a:	b082      	sub	sp, #8
    438c:	2201      	movs	r2, #1
    438e:	ab01      	add	r3, sp, #4
    4390:	701a      	strb	r2, [r3, #0]
    4392:	2400      	movs	r4, #0
    4394:	e004      	b.n	43a0 <_switch_peripheral_gclk+0x18>
    4396:	b2e0      	uxtb	r0, r4
    4398:	a901      	add	r1, sp, #4
    439a:	4b03      	ldr	r3, [pc, #12]	; (43a8 <_switch_peripheral_gclk+0x20>)
    439c:	4798      	blx	r3
    439e:	3401      	adds	r4, #1
    43a0:	2c24      	cmp	r4, #36	; 0x24
    43a2:	d9f8      	bls.n	4396 <_switch_peripheral_gclk+0xe>
    43a4:	b002      	add	sp, #8
    43a6:	bd10      	pop	{r4, pc}
    43a8:	000048e9 	.word	0x000048e9

000043ac <system_clock_source_get_hz>:
    43ac:	b510      	push	{r4, lr}
    43ae:	2808      	cmp	r0, #8
    43b0:	d834      	bhi.n	441c <system_clock_source_get_hz+0x70>
    43b2:	0080      	lsls	r0, r0, #2
    43b4:	4b1c      	ldr	r3, [pc, #112]	; (4428 <system_clock_source_get_hz+0x7c>)
    43b6:	581b      	ldr	r3, [r3, r0]
    43b8:	469f      	mov	pc, r3
    43ba:	2080      	movs	r0, #128	; 0x80
    43bc:	0200      	lsls	r0, r0, #8
    43be:	bd10      	pop	{r4, pc}
    43c0:	4b1a      	ldr	r3, [pc, #104]	; (442c <system_clock_source_get_hz+0x80>)
    43c2:	6918      	ldr	r0, [r3, #16]
    43c4:	e7fb      	b.n	43be <system_clock_source_get_hz+0x12>
    43c6:	4b1a      	ldr	r3, [pc, #104]	; (4430 <system_clock_source_get_hz+0x84>)
    43c8:	6a1b      	ldr	r3, [r3, #32]
    43ca:	059b      	lsls	r3, r3, #22
    43cc:	0f9b      	lsrs	r3, r3, #30
    43ce:	4819      	ldr	r0, [pc, #100]	; (4434 <system_clock_source_get_hz+0x88>)
    43d0:	40d8      	lsrs	r0, r3
    43d2:	e7f4      	b.n	43be <system_clock_source_get_hz+0x12>
    43d4:	4b15      	ldr	r3, [pc, #84]	; (442c <system_clock_source_get_hz+0x80>)
    43d6:	6958      	ldr	r0, [r3, #20]
    43d8:	e7f1      	b.n	43be <system_clock_source_get_hz+0x12>
    43da:	4b14      	ldr	r3, [pc, #80]	; (442c <system_clock_source_get_hz+0x80>)
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	079b      	lsls	r3, r3, #30
    43e0:	d51e      	bpl.n	4420 <system_clock_source_get_hz+0x74>
    43e2:	4b13      	ldr	r3, [pc, #76]	; (4430 <system_clock_source_get_hz+0x84>)
    43e4:	68db      	ldr	r3, [r3, #12]
    43e6:	06db      	lsls	r3, r3, #27
    43e8:	d5fb      	bpl.n	43e2 <system_clock_source_get_hz+0x36>
    43ea:	4b10      	ldr	r3, [pc, #64]	; (442c <system_clock_source_get_hz+0x80>)
    43ec:	681a      	ldr	r2, [r3, #0]
    43ee:	2324      	movs	r3, #36	; 0x24
    43f0:	4013      	ands	r3, r2
    43f2:	2b04      	cmp	r3, #4
    43f4:	d001      	beq.n	43fa <system_clock_source_get_hz+0x4e>
    43f6:	4810      	ldr	r0, [pc, #64]	; (4438 <system_clock_source_get_hz+0x8c>)
    43f8:	e7e1      	b.n	43be <system_clock_source_get_hz+0x12>
    43fa:	2000      	movs	r0, #0
    43fc:	4b0f      	ldr	r3, [pc, #60]	; (443c <system_clock_source_get_hz+0x90>)
    43fe:	4798      	blx	r3
    4400:	4b0a      	ldr	r3, [pc, #40]	; (442c <system_clock_source_get_hz+0x80>)
    4402:	689b      	ldr	r3, [r3, #8]
    4404:	041b      	lsls	r3, r3, #16
    4406:	0c1b      	lsrs	r3, r3, #16
    4408:	4358      	muls	r0, r3
    440a:	e7d8      	b.n	43be <system_clock_source_get_hz+0x12>
    440c:	2350      	movs	r3, #80	; 0x50
    440e:	4a08      	ldr	r2, [pc, #32]	; (4430 <system_clock_source_get_hz+0x84>)
    4410:	5cd3      	ldrb	r3, [r2, r3]
    4412:	075b      	lsls	r3, r3, #29
    4414:	d506      	bpl.n	4424 <system_clock_source_get_hz+0x78>
    4416:	4b05      	ldr	r3, [pc, #20]	; (442c <system_clock_source_get_hz+0x80>)
    4418:	68d8      	ldr	r0, [r3, #12]
    441a:	e7d0      	b.n	43be <system_clock_source_get_hz+0x12>
    441c:	2000      	movs	r0, #0
    441e:	e7ce      	b.n	43be <system_clock_source_get_hz+0x12>
    4420:	2000      	movs	r0, #0
    4422:	e7cc      	b.n	43be <system_clock_source_get_hz+0x12>
    4424:	2000      	movs	r0, #0
    4426:	e7ca      	b.n	43be <system_clock_source_get_hz+0x12>
    4428:	00005b48 	.word	0x00005b48
    442c:	200003b0 	.word	0x200003b0
    4430:	40000800 	.word	0x40000800
    4434:	007a1200 	.word	0x007a1200
    4438:	02dc6c00 	.word	0x02dc6c00
    443c:	00004905 	.word	0x00004905

00004440 <system_clock_source_osc8m_set_config>:
    4440:	b570      	push	{r4, r5, r6, lr}
    4442:	4d0c      	ldr	r5, [pc, #48]	; (4474 <system_clock_source_osc8m_set_config+0x34>)
    4444:	6a2e      	ldr	r6, [r5, #32]
    4446:	7802      	ldrb	r2, [r0, #0]
    4448:	2103      	movs	r1, #3
    444a:	400a      	ands	r2, r1
    444c:	0212      	lsls	r2, r2, #8
    444e:	490a      	ldr	r1, [pc, #40]	; (4478 <system_clock_source_osc8m_set_config+0x38>)
    4450:	4031      	ands	r1, r6
    4452:	4311      	orrs	r1, r2
    4454:	7882      	ldrb	r2, [r0, #2]
    4456:	2401      	movs	r4, #1
    4458:	4022      	ands	r2, r4
    445a:	01d2      	lsls	r2, r2, #7
    445c:	2380      	movs	r3, #128	; 0x80
    445e:	4399      	bics	r1, r3
    4460:	430a      	orrs	r2, r1
    4462:	7843      	ldrb	r3, [r0, #1]
    4464:	4023      	ands	r3, r4
    4466:	019b      	lsls	r3, r3, #6
    4468:	2140      	movs	r1, #64	; 0x40
    446a:	438a      	bics	r2, r1
    446c:	4313      	orrs	r3, r2
    446e:	622b      	str	r3, [r5, #32]
    4470:	bd70      	pop	{r4, r5, r6, pc}
    4472:	46c0      	nop			; (mov r8, r8)
    4474:	40000800 	.word	0x40000800
    4478:	fffffcff 	.word	0xfffffcff

0000447c <system_clock_source_osc32k_set_config>:
    447c:	b5f0      	push	{r4, r5, r6, r7, lr}
    447e:	4f15      	ldr	r7, [pc, #84]	; (44d4 <system_clock_source_osc32k_set_config+0x58>)
    4480:	69be      	ldr	r6, [r7, #24]
    4482:	7842      	ldrb	r2, [r0, #1]
    4484:	2301      	movs	r3, #1
    4486:	401a      	ands	r2, r3
    4488:	00d2      	lsls	r2, r2, #3
    448a:	2108      	movs	r1, #8
    448c:	438e      	bics	r6, r1
    448e:	4332      	orrs	r2, r6
    4490:	7885      	ldrb	r5, [r0, #2]
    4492:	401d      	ands	r5, r3
    4494:	00ad      	lsls	r5, r5, #2
    4496:	3904      	subs	r1, #4
    4498:	438a      	bics	r2, r1
    449a:	4315      	orrs	r5, r2
    449c:	7801      	ldrb	r1, [r0, #0]
    449e:	2407      	movs	r4, #7
    44a0:	400c      	ands	r4, r1
    44a2:	0224      	lsls	r4, r4, #8
    44a4:	490c      	ldr	r1, [pc, #48]	; (44d8 <system_clock_source_osc32k_set_config+0x5c>)
    44a6:	400d      	ands	r5, r1
    44a8:	432c      	orrs	r4, r5
    44aa:	7901      	ldrb	r1, [r0, #4]
    44ac:	4019      	ands	r1, r3
    44ae:	01c9      	lsls	r1, r1, #7
    44b0:	2280      	movs	r2, #128	; 0x80
    44b2:	4394      	bics	r4, r2
    44b4:	4321      	orrs	r1, r4
    44b6:	78c2      	ldrb	r2, [r0, #3]
    44b8:	401a      	ands	r2, r3
    44ba:	0192      	lsls	r2, r2, #6
    44bc:	2440      	movs	r4, #64	; 0x40
    44be:	43a1      	bics	r1, r4
    44c0:	430a      	orrs	r2, r1
    44c2:	7941      	ldrb	r1, [r0, #5]
    44c4:	400b      	ands	r3, r1
    44c6:	031b      	lsls	r3, r3, #12
    44c8:	4904      	ldr	r1, [pc, #16]	; (44dc <system_clock_source_osc32k_set_config+0x60>)
    44ca:	400a      	ands	r2, r1
    44cc:	4313      	orrs	r3, r2
    44ce:	61bb      	str	r3, [r7, #24]
    44d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	40000800 	.word	0x40000800
    44d8:	fffff8ff 	.word	0xfffff8ff
    44dc:	ffffefff 	.word	0xffffefff

000044e0 <system_clock_source_enable>:
    44e0:	2808      	cmp	r0, #8
    44e2:	d84a      	bhi.n	457a <system_clock_source_enable+0x9a>
    44e4:	0080      	lsls	r0, r0, #2
    44e6:	4b26      	ldr	r3, [pc, #152]	; (4580 <system_clock_source_enable+0xa0>)
    44e8:	581b      	ldr	r3, [r3, r0]
    44ea:	469f      	mov	pc, r3
    44ec:	2000      	movs	r0, #0
    44ee:	4770      	bx	lr
    44f0:	4a24      	ldr	r2, [pc, #144]	; (4584 <system_clock_source_enable+0xa4>)
    44f2:	6a13      	ldr	r3, [r2, #32]
    44f4:	2102      	movs	r1, #2
    44f6:	430b      	orrs	r3, r1
    44f8:	6213      	str	r3, [r2, #32]
    44fa:	2000      	movs	r0, #0
    44fc:	e7f7      	b.n	44ee <system_clock_source_enable+0xe>
    44fe:	4a21      	ldr	r2, [pc, #132]	; (4584 <system_clock_source_enable+0xa4>)
    4500:	6993      	ldr	r3, [r2, #24]
    4502:	2102      	movs	r1, #2
    4504:	430b      	orrs	r3, r1
    4506:	6193      	str	r3, [r2, #24]
    4508:	2000      	movs	r0, #0
    450a:	e7f0      	b.n	44ee <system_clock_source_enable+0xe>
    450c:	4a1d      	ldr	r2, [pc, #116]	; (4584 <system_clock_source_enable+0xa4>)
    450e:	8a13      	ldrh	r3, [r2, #16]
    4510:	2102      	movs	r1, #2
    4512:	430b      	orrs	r3, r1
    4514:	b29b      	uxth	r3, r3
    4516:	8213      	strh	r3, [r2, #16]
    4518:	2000      	movs	r0, #0
    451a:	e7e8      	b.n	44ee <system_clock_source_enable+0xe>
    451c:	4a19      	ldr	r2, [pc, #100]	; (4584 <system_clock_source_enable+0xa4>)
    451e:	8a93      	ldrh	r3, [r2, #20]
    4520:	2102      	movs	r1, #2
    4522:	430b      	orrs	r3, r1
    4524:	b29b      	uxth	r3, r3
    4526:	8293      	strh	r3, [r2, #20]
    4528:	2000      	movs	r0, #0
    452a:	e7e0      	b.n	44ee <system_clock_source_enable+0xe>
    452c:	4916      	ldr	r1, [pc, #88]	; (4588 <system_clock_source_enable+0xa8>)
    452e:	680b      	ldr	r3, [r1, #0]
    4530:	2202      	movs	r2, #2
    4532:	4313      	orrs	r3, r2
    4534:	600b      	str	r3, [r1, #0]
    4536:	4b13      	ldr	r3, [pc, #76]	; (4584 <system_clock_source_enable+0xa4>)
    4538:	849a      	strh	r2, [r3, #36]	; 0x24
    453a:	4b12      	ldr	r3, [pc, #72]	; (4584 <system_clock_source_enable+0xa4>)
    453c:	68db      	ldr	r3, [r3, #12]
    453e:	06db      	lsls	r3, r3, #27
    4540:	d5fb      	bpl.n	453a <system_clock_source_enable+0x5a>
    4542:	4a11      	ldr	r2, [pc, #68]	; (4588 <system_clock_source_enable+0xa8>)
    4544:	6891      	ldr	r1, [r2, #8]
    4546:	4b0f      	ldr	r3, [pc, #60]	; (4584 <system_clock_source_enable+0xa4>)
    4548:	62d9      	str	r1, [r3, #44]	; 0x2c
    454a:	6852      	ldr	r2, [r2, #4]
    454c:	629a      	str	r2, [r3, #40]	; 0x28
    454e:	2200      	movs	r2, #0
    4550:	849a      	strh	r2, [r3, #36]	; 0x24
    4552:	4b0c      	ldr	r3, [pc, #48]	; (4584 <system_clock_source_enable+0xa4>)
    4554:	68db      	ldr	r3, [r3, #12]
    4556:	06db      	lsls	r3, r3, #27
    4558:	d5fb      	bpl.n	4552 <system_clock_source_enable+0x72>
    455a:	4b0b      	ldr	r3, [pc, #44]	; (4588 <system_clock_source_enable+0xa8>)
    455c:	681b      	ldr	r3, [r3, #0]
    455e:	b29b      	uxth	r3, r3
    4560:	4a08      	ldr	r2, [pc, #32]	; (4584 <system_clock_source_enable+0xa4>)
    4562:	8493      	strh	r3, [r2, #36]	; 0x24
    4564:	2000      	movs	r0, #0
    4566:	e7c2      	b.n	44ee <system_clock_source_enable+0xe>
    4568:	4906      	ldr	r1, [pc, #24]	; (4584 <system_clock_source_enable+0xa4>)
    456a:	2244      	movs	r2, #68	; 0x44
    456c:	5c8b      	ldrb	r3, [r1, r2]
    456e:	2002      	movs	r0, #2
    4570:	4303      	orrs	r3, r0
    4572:	b2db      	uxtb	r3, r3
    4574:	548b      	strb	r3, [r1, r2]
    4576:	2000      	movs	r0, #0
    4578:	e7b9      	b.n	44ee <system_clock_source_enable+0xe>
    457a:	2017      	movs	r0, #23
    457c:	e7b7      	b.n	44ee <system_clock_source_enable+0xe>
    457e:	46c0      	nop			; (mov r8, r8)
    4580:	00005b6c 	.word	0x00005b6c
    4584:	40000800 	.word	0x40000800
    4588:	200003b0 	.word	0x200003b0

0000458c <system_clock_init>:
    458c:	b5f0      	push	{r4, r5, r6, r7, lr}
    458e:	b087      	sub	sp, #28
    4590:	4c29      	ldr	r4, [pc, #164]	; (4638 <system_clock_init+0xac>)
    4592:	23c2      	movs	r3, #194	; 0xc2
    4594:	00db      	lsls	r3, r3, #3
    4596:	60a3      	str	r3, [r4, #8]
    4598:	4b28      	ldr	r3, [pc, #160]	; (463c <system_clock_init+0xb0>)
    459a:	6859      	ldr	r1, [r3, #4]
    459c:	221e      	movs	r2, #30
    459e:	4391      	bics	r1, r2
    45a0:	6059      	str	r1, [r3, #4]
    45a2:	4b27      	ldr	r3, [pc, #156]	; (4640 <system_clock_init+0xb4>)
    45a4:	4798      	blx	r3
    45a6:	4b27      	ldr	r3, [pc, #156]	; (4644 <system_clock_init+0xb8>)
    45a8:	6819      	ldr	r1, [r3, #0]
    45aa:	0989      	lsrs	r1, r1, #6
    45ac:	69a2      	ldr	r2, [r4, #24]
    45ae:	237f      	movs	r3, #127	; 0x7f
    45b0:	400b      	ands	r3, r1
    45b2:	041b      	lsls	r3, r3, #16
    45b4:	4924      	ldr	r1, [pc, #144]	; (4648 <system_clock_init+0xbc>)
    45b6:	400a      	ands	r2, r1
    45b8:	4313      	orrs	r3, r2
    45ba:	61a3      	str	r3, [r4, #24]
    45bc:	a804      	add	r0, sp, #16
    45be:	2501      	movs	r5, #1
    45c0:	7045      	strb	r5, [r0, #1]
    45c2:	7085      	strb	r5, [r0, #2]
    45c4:	2400      	movs	r4, #0
    45c6:	70c4      	strb	r4, [r0, #3]
    45c8:	7105      	strb	r5, [r0, #4]
    45ca:	2307      	movs	r3, #7
    45cc:	7003      	strb	r3, [r0, #0]
    45ce:	7144      	strb	r4, [r0, #5]
    45d0:	4b1e      	ldr	r3, [pc, #120]	; (464c <system_clock_init+0xc0>)
    45d2:	4798      	blx	r3
    45d4:	2004      	movs	r0, #4
    45d6:	4e1e      	ldr	r6, [pc, #120]	; (4650 <system_clock_init+0xc4>)
    45d8:	47b0      	blx	r6
    45da:	a803      	add	r0, sp, #12
    45dc:	7044      	strb	r4, [r0, #1]
    45de:	7085      	strb	r5, [r0, #2]
    45e0:	7004      	strb	r4, [r0, #0]
    45e2:	4b1c      	ldr	r3, [pc, #112]	; (4654 <system_clock_init+0xc8>)
    45e4:	4798      	blx	r3
    45e6:	2006      	movs	r0, #6
    45e8:	47b0      	blx	r6
    45ea:	4b1b      	ldr	r3, [pc, #108]	; (4658 <system_clock_init+0xcc>)
    45ec:	4798      	blx	r3
    45ee:	466b      	mov	r3, sp
    45f0:	705c      	strb	r4, [r3, #1]
    45f2:	721c      	strb	r4, [r3, #8]
    45f4:	725c      	strb	r4, [r3, #9]
    45f6:	2304      	movs	r3, #4
    45f8:	466a      	mov	r2, sp
    45fa:	7013      	strb	r3, [r2, #0]
    45fc:	331c      	adds	r3, #28
    45fe:	9301      	str	r3, [sp, #4]
    4600:	4669      	mov	r1, sp
    4602:	2002      	movs	r0, #2
    4604:	4f15      	ldr	r7, [pc, #84]	; (465c <system_clock_init+0xd0>)
    4606:	47b8      	blx	r7
    4608:	2002      	movs	r0, #2
    460a:	4e15      	ldr	r6, [pc, #84]	; (4660 <system_clock_init+0xd4>)
    460c:	47b0      	blx	r6
    460e:	4b15      	ldr	r3, [pc, #84]	; (4664 <system_clock_init+0xd8>)
    4610:	721c      	strb	r4, [r3, #8]
    4612:	725c      	strb	r4, [r3, #9]
    4614:	729c      	strb	r4, [r3, #10]
    4616:	72dc      	strb	r4, [r3, #11]
    4618:	9501      	str	r5, [sp, #4]
    461a:	466b      	mov	r3, sp
    461c:	705c      	strb	r4, [r3, #1]
    461e:	2306      	movs	r3, #6
    4620:	466a      	mov	r2, sp
    4622:	7013      	strb	r3, [r2, #0]
    4624:	7214      	strb	r4, [r2, #8]
    4626:	7254      	strb	r4, [r2, #9]
    4628:	4669      	mov	r1, sp
    462a:	2000      	movs	r0, #0
    462c:	47b8      	blx	r7
    462e:	2000      	movs	r0, #0
    4630:	47b0      	blx	r6
    4632:	b007      	add	sp, #28
    4634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4636:	46c0      	nop			; (mov r8, r8)
    4638:	40000800 	.word	0x40000800
    463c:	41004000 	.word	0x41004000
    4640:	00004389 	.word	0x00004389
    4644:	00806024 	.word	0x00806024
    4648:	ff80ffff 	.word	0xff80ffff
    464c:	0000447d 	.word	0x0000447d
    4650:	000044e1 	.word	0x000044e1
    4654:	00004441 	.word	0x00004441
    4658:	00004669 	.word	0x00004669
    465c:	0000468d 	.word	0x0000468d
    4660:	0000475d 	.word	0x0000475d
    4664:	40000400 	.word	0x40000400

00004668 <system_gclk_init>:
    4668:	4a06      	ldr	r2, [pc, #24]	; (4684 <system_gclk_init+0x1c>)
    466a:	6993      	ldr	r3, [r2, #24]
    466c:	2108      	movs	r1, #8
    466e:	430b      	orrs	r3, r1
    4670:	6193      	str	r3, [r2, #24]
    4672:	2201      	movs	r2, #1
    4674:	4b04      	ldr	r3, [pc, #16]	; (4688 <system_gclk_init+0x20>)
    4676:	701a      	strb	r2, [r3, #0]
    4678:	4b03      	ldr	r3, [pc, #12]	; (4688 <system_gclk_init+0x20>)
    467a:	781b      	ldrb	r3, [r3, #0]
    467c:	07db      	lsls	r3, r3, #31
    467e:	d4fb      	bmi.n	4678 <system_gclk_init+0x10>
    4680:	4770      	bx	lr
    4682:	46c0      	nop			; (mov r8, r8)
    4684:	40000400 	.word	0x40000400
    4688:	40000c00 	.word	0x40000c00

0000468c <system_gclk_gen_set_config>:
    468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    468e:	0006      	movs	r6, r0
    4690:	0005      	movs	r5, r0
    4692:	780c      	ldrb	r4, [r1, #0]
    4694:	0224      	lsls	r4, r4, #8
    4696:	4304      	orrs	r4, r0
    4698:	784b      	ldrb	r3, [r1, #1]
    469a:	2b00      	cmp	r3, #0
    469c:	d002      	beq.n	46a4 <system_gclk_gen_set_config+0x18>
    469e:	2380      	movs	r3, #128	; 0x80
    46a0:	02db      	lsls	r3, r3, #11
    46a2:	431c      	orrs	r4, r3
    46a4:	7a4b      	ldrb	r3, [r1, #9]
    46a6:	2b00      	cmp	r3, #0
    46a8:	d002      	beq.n	46b0 <system_gclk_gen_set_config+0x24>
    46aa:	2380      	movs	r3, #128	; 0x80
    46ac:	031b      	lsls	r3, r3, #12
    46ae:	431c      	orrs	r4, r3
    46b0:	6848      	ldr	r0, [r1, #4]
    46b2:	2801      	cmp	r0, #1
    46b4:	d912      	bls.n	46dc <system_gclk_gen_set_config+0x50>
    46b6:	1e43      	subs	r3, r0, #1
    46b8:	4203      	tst	r3, r0
    46ba:	d03d      	beq.n	4738 <system_gclk_gen_set_config+0xac>
    46bc:	0205      	lsls	r5, r0, #8
    46be:	4335      	orrs	r5, r6
    46c0:	2380      	movs	r3, #128	; 0x80
    46c2:	029b      	lsls	r3, r3, #10
    46c4:	431c      	orrs	r4, r3
    46c6:	e009      	b.n	46dc <system_gclk_gen_set_config+0x50>
    46c8:	3201      	adds	r2, #1
    46ca:	005b      	lsls	r3, r3, #1
    46cc:	4283      	cmp	r3, r0
    46ce:	d3fb      	bcc.n	46c8 <system_gclk_gen_set_config+0x3c>
    46d0:	0212      	lsls	r2, r2, #8
    46d2:	4332      	orrs	r2, r6
    46d4:	0015      	movs	r5, r2
    46d6:	2380      	movs	r3, #128	; 0x80
    46d8:	035b      	lsls	r3, r3, #13
    46da:	431c      	orrs	r4, r3
    46dc:	7a0b      	ldrb	r3, [r1, #8]
    46de:	2b00      	cmp	r3, #0
    46e0:	d002      	beq.n	46e8 <system_gclk_gen_set_config+0x5c>
    46e2:	2380      	movs	r3, #128	; 0x80
    46e4:	039b      	lsls	r3, r3, #14
    46e6:	431c      	orrs	r4, r3
    46e8:	4b18      	ldr	r3, [pc, #96]	; (474c <system_gclk_gen_set_config+0xc0>)
    46ea:	785b      	ldrb	r3, [r3, #1]
    46ec:	b25b      	sxtb	r3, r3
    46ee:	2b00      	cmp	r3, #0
    46f0:	db25      	blt.n	473e <system_gclk_gen_set_config+0xb2>
    46f2:	2700      	movs	r7, #0
    46f4:	2f00      	cmp	r7, #0
    46f6:	d1f7      	bne.n	46e8 <system_gclk_gen_set_config+0x5c>
    46f8:	4b15      	ldr	r3, [pc, #84]	; (4750 <system_gclk_gen_set_config+0xc4>)
    46fa:	4798      	blx	r3
    46fc:	4b15      	ldr	r3, [pc, #84]	; (4754 <system_gclk_gen_set_config+0xc8>)
    46fe:	701e      	strb	r6, [r3, #0]
    4700:	4b12      	ldr	r3, [pc, #72]	; (474c <system_gclk_gen_set_config+0xc0>)
    4702:	785b      	ldrb	r3, [r3, #1]
    4704:	b25b      	sxtb	r3, r3
    4706:	2b00      	cmp	r3, #0
    4708:	db1b      	blt.n	4742 <system_gclk_gen_set_config+0xb6>
    470a:	003a      	movs	r2, r7
    470c:	2a00      	cmp	r2, #0
    470e:	d1f7      	bne.n	4700 <system_gclk_gen_set_config+0x74>
    4710:	4b0e      	ldr	r3, [pc, #56]	; (474c <system_gclk_gen_set_config+0xc0>)
    4712:	609d      	str	r5, [r3, #8]
    4714:	4b0d      	ldr	r3, [pc, #52]	; (474c <system_gclk_gen_set_config+0xc0>)
    4716:	785b      	ldrb	r3, [r3, #1]
    4718:	b25b      	sxtb	r3, r3
    471a:	2b00      	cmp	r3, #0
    471c:	db13      	blt.n	4746 <system_gclk_gen_set_config+0xba>
    471e:	0013      	movs	r3, r2
    4720:	2b00      	cmp	r3, #0
    4722:	d1f7      	bne.n	4714 <system_gclk_gen_set_config+0x88>
    4724:	4a09      	ldr	r2, [pc, #36]	; (474c <system_gclk_gen_set_config+0xc0>)
    4726:	6853      	ldr	r3, [r2, #4]
    4728:	2180      	movs	r1, #128	; 0x80
    472a:	0249      	lsls	r1, r1, #9
    472c:	400b      	ands	r3, r1
    472e:	431c      	orrs	r4, r3
    4730:	6054      	str	r4, [r2, #4]
    4732:	4b09      	ldr	r3, [pc, #36]	; (4758 <system_gclk_gen_set_config+0xcc>)
    4734:	4798      	blx	r3
    4736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4738:	2302      	movs	r3, #2
    473a:	2200      	movs	r2, #0
    473c:	e7c6      	b.n	46cc <system_gclk_gen_set_config+0x40>
    473e:	2701      	movs	r7, #1
    4740:	e7d8      	b.n	46f4 <system_gclk_gen_set_config+0x68>
    4742:	2201      	movs	r2, #1
    4744:	e7e2      	b.n	470c <system_gclk_gen_set_config+0x80>
    4746:	2301      	movs	r3, #1
    4748:	e7ea      	b.n	4720 <system_gclk_gen_set_config+0x94>
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	40000c00 	.word	0x40000c00
    4750:	00004319 	.word	0x00004319
    4754:	40000c08 	.word	0x40000c08
    4758:	00004359 	.word	0x00004359

0000475c <system_gclk_gen_enable>:
    475c:	b570      	push	{r4, r5, r6, lr}
    475e:	0005      	movs	r5, r0
    4760:	4b10      	ldr	r3, [pc, #64]	; (47a4 <system_gclk_gen_enable+0x48>)
    4762:	785b      	ldrb	r3, [r3, #1]
    4764:	b25b      	sxtb	r3, r3
    4766:	2b00      	cmp	r3, #0
    4768:	db17      	blt.n	479a <system_gclk_gen_enable+0x3e>
    476a:	2400      	movs	r4, #0
    476c:	2c00      	cmp	r4, #0
    476e:	d1f7      	bne.n	4760 <system_gclk_gen_enable+0x4>
    4770:	4b0d      	ldr	r3, [pc, #52]	; (47a8 <system_gclk_gen_enable+0x4c>)
    4772:	4798      	blx	r3
    4774:	4b0d      	ldr	r3, [pc, #52]	; (47ac <system_gclk_gen_enable+0x50>)
    4776:	701d      	strb	r5, [r3, #0]
    4778:	4b0a      	ldr	r3, [pc, #40]	; (47a4 <system_gclk_gen_enable+0x48>)
    477a:	785b      	ldrb	r3, [r3, #1]
    477c:	b25b      	sxtb	r3, r3
    477e:	2b00      	cmp	r3, #0
    4780:	db0d      	blt.n	479e <system_gclk_gen_enable+0x42>
    4782:	0023      	movs	r3, r4
    4784:	2b00      	cmp	r3, #0
    4786:	d1f7      	bne.n	4778 <system_gclk_gen_enable+0x1c>
    4788:	4a06      	ldr	r2, [pc, #24]	; (47a4 <system_gclk_gen_enable+0x48>)
    478a:	6851      	ldr	r1, [r2, #4]
    478c:	2380      	movs	r3, #128	; 0x80
    478e:	025b      	lsls	r3, r3, #9
    4790:	430b      	orrs	r3, r1
    4792:	6053      	str	r3, [r2, #4]
    4794:	4b06      	ldr	r3, [pc, #24]	; (47b0 <system_gclk_gen_enable+0x54>)
    4796:	4798      	blx	r3
    4798:	bd70      	pop	{r4, r5, r6, pc}
    479a:	2401      	movs	r4, #1
    479c:	e7e6      	b.n	476c <system_gclk_gen_enable+0x10>
    479e:	2301      	movs	r3, #1
    47a0:	e7f0      	b.n	4784 <system_gclk_gen_enable+0x28>
    47a2:	46c0      	nop			; (mov r8, r8)
    47a4:	40000c00 	.word	0x40000c00
    47a8:	00004319 	.word	0x00004319
    47ac:	40000c04 	.word	0x40000c04
    47b0:	00004359 	.word	0x00004359

000047b4 <system_gclk_gen_get_hz>:
    47b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47b6:	0007      	movs	r7, r0
    47b8:	4b22      	ldr	r3, [pc, #136]	; (4844 <system_gclk_gen_get_hz+0x90>)
    47ba:	785b      	ldrb	r3, [r3, #1]
    47bc:	b25b      	sxtb	r3, r3
    47be:	2b00      	cmp	r3, #0
    47c0:	db34      	blt.n	482c <system_gclk_gen_get_hz+0x78>
    47c2:	2500      	movs	r5, #0
    47c4:	2d00      	cmp	r5, #0
    47c6:	d1f7      	bne.n	47b8 <system_gclk_gen_get_hz+0x4>
    47c8:	4b1f      	ldr	r3, [pc, #124]	; (4848 <system_gclk_gen_get_hz+0x94>)
    47ca:	4798      	blx	r3
    47cc:	4b1f      	ldr	r3, [pc, #124]	; (484c <system_gclk_gen_get_hz+0x98>)
    47ce:	701f      	strb	r7, [r3, #0]
    47d0:	4b1c      	ldr	r3, [pc, #112]	; (4844 <system_gclk_gen_get_hz+0x90>)
    47d2:	785b      	ldrb	r3, [r3, #1]
    47d4:	b25b      	sxtb	r3, r3
    47d6:	2b00      	cmp	r3, #0
    47d8:	db2a      	blt.n	4830 <system_gclk_gen_get_hz+0x7c>
    47da:	002c      	movs	r4, r5
    47dc:	2c00      	cmp	r4, #0
    47de:	d1f7      	bne.n	47d0 <system_gclk_gen_get_hz+0x1c>
    47e0:	4e18      	ldr	r6, [pc, #96]	; (4844 <system_gclk_gen_get_hz+0x90>)
    47e2:	6870      	ldr	r0, [r6, #4]
    47e4:	04c0      	lsls	r0, r0, #19
    47e6:	0ec0      	lsrs	r0, r0, #27
    47e8:	4b19      	ldr	r3, [pc, #100]	; (4850 <system_gclk_gen_get_hz+0x9c>)
    47ea:	4798      	blx	r3
    47ec:	0005      	movs	r5, r0
    47ee:	4b17      	ldr	r3, [pc, #92]	; (484c <system_gclk_gen_get_hz+0x98>)
    47f0:	701f      	strb	r7, [r3, #0]
    47f2:	6876      	ldr	r6, [r6, #4]
    47f4:	02f6      	lsls	r6, r6, #11
    47f6:	0ff6      	lsrs	r6, r6, #31
    47f8:	4b16      	ldr	r3, [pc, #88]	; (4854 <system_gclk_gen_get_hz+0xa0>)
    47fa:	701f      	strb	r7, [r3, #0]
    47fc:	4b11      	ldr	r3, [pc, #68]	; (4844 <system_gclk_gen_get_hz+0x90>)
    47fe:	785b      	ldrb	r3, [r3, #1]
    4800:	b25b      	sxtb	r3, r3
    4802:	2b00      	cmp	r3, #0
    4804:	db16      	blt.n	4834 <system_gclk_gen_get_hz+0x80>
    4806:	0023      	movs	r3, r4
    4808:	2b00      	cmp	r3, #0
    480a:	d1f7      	bne.n	47fc <system_gclk_gen_get_hz+0x48>
    480c:	4b0d      	ldr	r3, [pc, #52]	; (4844 <system_gclk_gen_get_hz+0x90>)
    480e:	689c      	ldr	r4, [r3, #8]
    4810:	0224      	lsls	r4, r4, #8
    4812:	0c24      	lsrs	r4, r4, #16
    4814:	4b10      	ldr	r3, [pc, #64]	; (4858 <system_gclk_gen_get_hz+0xa4>)
    4816:	4798      	blx	r3
    4818:	2e00      	cmp	r6, #0
    481a:	d10d      	bne.n	4838 <system_gclk_gen_get_hz+0x84>
    481c:	2c01      	cmp	r4, #1
    481e:	d90b      	bls.n	4838 <system_gclk_gen_get_hz+0x84>
    4820:	0021      	movs	r1, r4
    4822:	0028      	movs	r0, r5
    4824:	4b0d      	ldr	r3, [pc, #52]	; (485c <system_gclk_gen_get_hz+0xa8>)
    4826:	4798      	blx	r3
    4828:	0005      	movs	r5, r0
    482a:	e009      	b.n	4840 <system_gclk_gen_get_hz+0x8c>
    482c:	2501      	movs	r5, #1
    482e:	e7c9      	b.n	47c4 <system_gclk_gen_get_hz+0x10>
    4830:	2401      	movs	r4, #1
    4832:	e7d3      	b.n	47dc <system_gclk_gen_get_hz+0x28>
    4834:	2301      	movs	r3, #1
    4836:	e7e7      	b.n	4808 <system_gclk_gen_get_hz+0x54>
    4838:	2e00      	cmp	r6, #0
    483a:	d001      	beq.n	4840 <system_gclk_gen_get_hz+0x8c>
    483c:	3401      	adds	r4, #1
    483e:	40e5      	lsrs	r5, r4
    4840:	0028      	movs	r0, r5
    4842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4844:	40000c00 	.word	0x40000c00
    4848:	00004319 	.word	0x00004319
    484c:	40000c04 	.word	0x40000c04
    4850:	000043ad 	.word	0x000043ad
    4854:	40000c08 	.word	0x40000c08
    4858:	00004359 	.word	0x00004359
    485c:	00004f3d 	.word	0x00004f3d

00004860 <system_gclk_chan_enable>:
    4860:	b510      	push	{r4, lr}
    4862:	0004      	movs	r4, r0
    4864:	4b06      	ldr	r3, [pc, #24]	; (4880 <system_gclk_chan_enable+0x20>)
    4866:	4798      	blx	r3
    4868:	4b06      	ldr	r3, [pc, #24]	; (4884 <system_gclk_chan_enable+0x24>)
    486a:	701c      	strb	r4, [r3, #0]
    486c:	4a06      	ldr	r2, [pc, #24]	; (4888 <system_gclk_chan_enable+0x28>)
    486e:	8853      	ldrh	r3, [r2, #2]
    4870:	2180      	movs	r1, #128	; 0x80
    4872:	01c9      	lsls	r1, r1, #7
    4874:	430b      	orrs	r3, r1
    4876:	8053      	strh	r3, [r2, #2]
    4878:	4b04      	ldr	r3, [pc, #16]	; (488c <system_gclk_chan_enable+0x2c>)
    487a:	4798      	blx	r3
    487c:	bd10      	pop	{r4, pc}
    487e:	46c0      	nop			; (mov r8, r8)
    4880:	00004319 	.word	0x00004319
    4884:	40000c02 	.word	0x40000c02
    4888:	40000c00 	.word	0x40000c00
    488c:	00004359 	.word	0x00004359

00004890 <system_gclk_chan_disable>:
    4890:	b510      	push	{r4, lr}
    4892:	0004      	movs	r4, r0
    4894:	4b0e      	ldr	r3, [pc, #56]	; (48d0 <system_gclk_chan_disable+0x40>)
    4896:	4798      	blx	r3
    4898:	4b0e      	ldr	r3, [pc, #56]	; (48d4 <system_gclk_chan_disable+0x44>)
    489a:	701c      	strb	r4, [r3, #0]
    489c:	490e      	ldr	r1, [pc, #56]	; (48d8 <system_gclk_chan_disable+0x48>)
    489e:	884b      	ldrh	r3, [r1, #2]
    48a0:	051b      	lsls	r3, r3, #20
    48a2:	0f1a      	lsrs	r2, r3, #28
    48a4:	884b      	ldrh	r3, [r1, #2]
    48a6:	480d      	ldr	r0, [pc, #52]	; (48dc <system_gclk_chan_disable+0x4c>)
    48a8:	4003      	ands	r3, r0
    48aa:	804b      	strh	r3, [r1, #2]
    48ac:	884b      	ldrh	r3, [r1, #2]
    48ae:	480c      	ldr	r0, [pc, #48]	; (48e0 <system_gclk_chan_disable+0x50>)
    48b0:	4003      	ands	r3, r0
    48b2:	804b      	strh	r3, [r1, #2]
    48b4:	4b08      	ldr	r3, [pc, #32]	; (48d8 <system_gclk_chan_disable+0x48>)
    48b6:	885b      	ldrh	r3, [r3, #2]
    48b8:	045b      	lsls	r3, r3, #17
    48ba:	d4fb      	bmi.n	48b4 <system_gclk_chan_disable+0x24>
    48bc:	4806      	ldr	r0, [pc, #24]	; (48d8 <system_gclk_chan_disable+0x48>)
    48be:	8841      	ldrh	r1, [r0, #2]
    48c0:	0213      	lsls	r3, r2, #8
    48c2:	4a06      	ldr	r2, [pc, #24]	; (48dc <system_gclk_chan_disable+0x4c>)
    48c4:	400a      	ands	r2, r1
    48c6:	4313      	orrs	r3, r2
    48c8:	8043      	strh	r3, [r0, #2]
    48ca:	4b06      	ldr	r3, [pc, #24]	; (48e4 <system_gclk_chan_disable+0x54>)
    48cc:	4798      	blx	r3
    48ce:	bd10      	pop	{r4, pc}
    48d0:	00004319 	.word	0x00004319
    48d4:	40000c02 	.word	0x40000c02
    48d8:	40000c00 	.word	0x40000c00
    48dc:	fffff0ff 	.word	0xfffff0ff
    48e0:	ffffbfff 	.word	0xffffbfff
    48e4:	00004359 	.word	0x00004359

000048e8 <system_gclk_chan_set_config>:
    48e8:	b510      	push	{r4, lr}
    48ea:	780c      	ldrb	r4, [r1, #0]
    48ec:	0224      	lsls	r4, r4, #8
    48ee:	4304      	orrs	r4, r0
    48f0:	4b02      	ldr	r3, [pc, #8]	; (48fc <system_gclk_chan_set_config+0x14>)
    48f2:	4798      	blx	r3
    48f4:	b2a4      	uxth	r4, r4
    48f6:	4b02      	ldr	r3, [pc, #8]	; (4900 <system_gclk_chan_set_config+0x18>)
    48f8:	805c      	strh	r4, [r3, #2]
    48fa:	bd10      	pop	{r4, pc}
    48fc:	00004891 	.word	0x00004891
    4900:	40000c00 	.word	0x40000c00

00004904 <system_gclk_chan_get_hz>:
    4904:	b510      	push	{r4, lr}
    4906:	0004      	movs	r4, r0
    4908:	4b06      	ldr	r3, [pc, #24]	; (4924 <system_gclk_chan_get_hz+0x20>)
    490a:	4798      	blx	r3
    490c:	4b06      	ldr	r3, [pc, #24]	; (4928 <system_gclk_chan_get_hz+0x24>)
    490e:	701c      	strb	r4, [r3, #0]
    4910:	4b06      	ldr	r3, [pc, #24]	; (492c <system_gclk_chan_get_hz+0x28>)
    4912:	885c      	ldrh	r4, [r3, #2]
    4914:	0524      	lsls	r4, r4, #20
    4916:	0f24      	lsrs	r4, r4, #28
    4918:	4b05      	ldr	r3, [pc, #20]	; (4930 <system_gclk_chan_get_hz+0x2c>)
    491a:	4798      	blx	r3
    491c:	0020      	movs	r0, r4
    491e:	4b05      	ldr	r3, [pc, #20]	; (4934 <system_gclk_chan_get_hz+0x30>)
    4920:	4798      	blx	r3
    4922:	bd10      	pop	{r4, pc}
    4924:	00004319 	.word	0x00004319
    4928:	40000c02 	.word	0x40000c02
    492c:	40000c00 	.word	0x40000c00
    4930:	00004359 	.word	0x00004359
    4934:	000047b5 	.word	0x000047b5

00004938 <system_interrupt_set_priority>:
    4938:	b530      	push	{r4, r5, lr}
    493a:	2800      	cmp	r0, #0
    493c:	db19      	blt.n	4972 <system_interrupt_set_priority+0x3a>
    493e:	17c3      	asrs	r3, r0, #31
    4940:	2403      	movs	r4, #3
    4942:	0022      	movs	r2, r4
    4944:	401a      	ands	r2, r3
    4946:	1812      	adds	r2, r2, r0
    4948:	1092      	asrs	r2, r2, #2
    494a:	b2d2      	uxtb	r2, r2
    494c:	0f9b      	lsrs	r3, r3, #30
    494e:	18c0      	adds	r0, r0, r3
    4950:	4020      	ands	r0, r4
    4952:	1ac3      	subs	r3, r0, r3
    4954:	00db      	lsls	r3, r3, #3
    4956:	b2db      	uxtb	r3, r3
    4958:	3306      	adds	r3, #6
    495a:	b2db      	uxtb	r3, r3
    495c:	4d09      	ldr	r5, [pc, #36]	; (4984 <system_interrupt_set_priority+0x4c>)
    495e:	32c0      	adds	r2, #192	; 0xc0
    4960:	0092      	lsls	r2, r2, #2
    4962:	5950      	ldr	r0, [r2, r5]
    4964:	409c      	lsls	r4, r3
    4966:	43a0      	bics	r0, r4
    4968:	4099      	lsls	r1, r3
    496a:	4301      	orrs	r1, r0
    496c:	5151      	str	r1, [r2, r5]
    496e:	2000      	movs	r0, #0
    4970:	bd30      	pop	{r4, r5, pc}
    4972:	1c43      	adds	r3, r0, #1
    4974:	d001      	beq.n	497a <system_interrupt_set_priority+0x42>
    4976:	2017      	movs	r0, #23
    4978:	e7fa      	b.n	4970 <system_interrupt_set_priority+0x38>
    497a:	0789      	lsls	r1, r1, #30
    497c:	4b02      	ldr	r3, [pc, #8]	; (4988 <system_interrupt_set_priority+0x50>)
    497e:	6219      	str	r1, [r3, #32]
    4980:	2000      	movs	r0, #0
    4982:	e7f5      	b.n	4970 <system_interrupt_set_priority+0x38>
    4984:	e000e100 	.word	0xe000e100
    4988:	e000ed00 	.word	0xe000ed00

0000498c <_system_pinmux_config>:
    498c:	b570      	push	{r4, r5, r6, lr}
    498e:	78d3      	ldrb	r3, [r2, #3]
    4990:	2b00      	cmp	r3, #0
    4992:	d120      	bne.n	49d6 <_system_pinmux_config+0x4a>
    4994:	7815      	ldrb	r5, [r2, #0]
    4996:	2d80      	cmp	r5, #128	; 0x80
    4998:	d01b      	beq.n	49d2 <_system_pinmux_config+0x46>
    499a:	062d      	lsls	r5, r5, #24
    499c:	2380      	movs	r3, #128	; 0x80
    499e:	025b      	lsls	r3, r3, #9
    49a0:	431d      	orrs	r5, r3
    49a2:	7853      	ldrb	r3, [r2, #1]
    49a4:	2b00      	cmp	r3, #0
    49a6:	d001      	beq.n	49ac <_system_pinmux_config+0x20>
    49a8:	2b02      	cmp	r3, #2
    49aa:	d10a      	bne.n	49c2 <_system_pinmux_config+0x36>
    49ac:	2380      	movs	r3, #128	; 0x80
    49ae:	029b      	lsls	r3, r3, #10
    49b0:	432b      	orrs	r3, r5
    49b2:	7894      	ldrb	r4, [r2, #2]
    49b4:	2c00      	cmp	r4, #0
    49b6:	d002      	beq.n	49be <_system_pinmux_config+0x32>
    49b8:	23c0      	movs	r3, #192	; 0xc0
    49ba:	02db      	lsls	r3, r3, #11
    49bc:	432b      	orrs	r3, r5
    49be:	6041      	str	r1, [r0, #4]
    49c0:	001d      	movs	r5, r3
    49c2:	7853      	ldrb	r3, [r2, #1]
    49c4:	3b01      	subs	r3, #1
    49c6:	b2db      	uxtb	r3, r3
    49c8:	2b01      	cmp	r3, #1
    49ca:	d806      	bhi.n	49da <_system_pinmux_config+0x4e>
    49cc:	4b13      	ldr	r3, [pc, #76]	; (4a1c <_system_pinmux_config+0x90>)
    49ce:	401d      	ands	r5, r3
    49d0:	e003      	b.n	49da <_system_pinmux_config+0x4e>
    49d2:	2500      	movs	r5, #0
    49d4:	e7e5      	b.n	49a2 <_system_pinmux_config+0x16>
    49d6:	6041      	str	r1, [r0, #4]
    49d8:	2500      	movs	r5, #0
    49da:	040c      	lsls	r4, r1, #16
    49dc:	0c24      	lsrs	r4, r4, #16
    49de:	0c0b      	lsrs	r3, r1, #16
    49e0:	432c      	orrs	r4, r5
    49e2:	26a0      	movs	r6, #160	; 0xa0
    49e4:	05f6      	lsls	r6, r6, #23
    49e6:	4334      	orrs	r4, r6
    49e8:	6284      	str	r4, [r0, #40]	; 0x28
    49ea:	432b      	orrs	r3, r5
    49ec:	24d0      	movs	r4, #208	; 0xd0
    49ee:	0624      	lsls	r4, r4, #24
    49f0:	4323      	orrs	r3, r4
    49f2:	6283      	str	r3, [r0, #40]	; 0x28
    49f4:	78d3      	ldrb	r3, [r2, #3]
    49f6:	2b00      	cmp	r3, #0
    49f8:	d10a      	bne.n	4a10 <_system_pinmux_config+0x84>
    49fa:	036b      	lsls	r3, r5, #13
    49fc:	d503      	bpl.n	4a06 <_system_pinmux_config+0x7a>
    49fe:	7893      	ldrb	r3, [r2, #2]
    4a00:	2b01      	cmp	r3, #1
    4a02:	d006      	beq.n	4a12 <_system_pinmux_config+0x86>
    4a04:	6141      	str	r1, [r0, #20]
    4a06:	7853      	ldrb	r3, [r2, #1]
    4a08:	3b01      	subs	r3, #1
    4a0a:	b2db      	uxtb	r3, r3
    4a0c:	2b01      	cmp	r3, #1
    4a0e:	d902      	bls.n	4a16 <_system_pinmux_config+0x8a>
    4a10:	bd70      	pop	{r4, r5, r6, pc}
    4a12:	6181      	str	r1, [r0, #24]
    4a14:	e7f7      	b.n	4a06 <_system_pinmux_config+0x7a>
    4a16:	6081      	str	r1, [r0, #8]
    4a18:	e7fa      	b.n	4a10 <_system_pinmux_config+0x84>
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	fffbffff 	.word	0xfffbffff

00004a20 <system_pinmux_pin_set_config>:
    4a20:	b510      	push	{r4, lr}
    4a22:	000a      	movs	r2, r1
    4a24:	09c1      	lsrs	r1, r0, #7
    4a26:	0943      	lsrs	r3, r0, #5
    4a28:	2900      	cmp	r1, #0
    4a2a:	d10b      	bne.n	4a44 <system_pinmux_pin_set_config+0x24>
    4a2c:	01db      	lsls	r3, r3, #7
    4a2e:	4906      	ldr	r1, [pc, #24]	; (4a48 <system_pinmux_pin_set_config+0x28>)
    4a30:	468c      	mov	ip, r1
    4a32:	4463      	add	r3, ip
    4a34:	241f      	movs	r4, #31
    4a36:	4020      	ands	r0, r4
    4a38:	2101      	movs	r1, #1
    4a3a:	4081      	lsls	r1, r0
    4a3c:	0018      	movs	r0, r3
    4a3e:	4b03      	ldr	r3, [pc, #12]	; (4a4c <system_pinmux_pin_set_config+0x2c>)
    4a40:	4798      	blx	r3
    4a42:	bd10      	pop	{r4, pc}
    4a44:	2300      	movs	r3, #0
    4a46:	e7f5      	b.n	4a34 <system_pinmux_pin_set_config+0x14>
    4a48:	41004400 	.word	0x41004400
    4a4c:	0000498d 	.word	0x0000498d

00004a50 <_system_dummy_init>:
    4a50:	4770      	bx	lr
	...

00004a54 <system_init>:
    4a54:	b510      	push	{r4, lr}
    4a56:	4b05      	ldr	r3, [pc, #20]	; (4a6c <system_init+0x18>)
    4a58:	4798      	blx	r3
    4a5a:	4b05      	ldr	r3, [pc, #20]	; (4a70 <system_init+0x1c>)
    4a5c:	4798      	blx	r3
    4a5e:	4b05      	ldr	r3, [pc, #20]	; (4a74 <system_init+0x20>)
    4a60:	4798      	blx	r3
    4a62:	4b05      	ldr	r3, [pc, #20]	; (4a78 <system_init+0x24>)
    4a64:	4798      	blx	r3
    4a66:	4b05      	ldr	r3, [pc, #20]	; (4a7c <system_init+0x28>)
    4a68:	4798      	blx	r3
    4a6a:	bd10      	pop	{r4, pc}
    4a6c:	0000458d 	.word	0x0000458d
    4a70:	00004315 	.word	0x00004315
    4a74:	00004a51 	.word	0x00004a51
    4a78:	0000032d 	.word	0x0000032d
    4a7c:	00004a51 	.word	0x00004a51

00004a80 <Dummy_Handler>:
    4a80:	e7fe      	b.n	4a80 <Dummy_Handler>
	...

00004a84 <Reset_Handler>:
    4a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a86:	4a23      	ldr	r2, [pc, #140]	; (4b14 <Reset_Handler+0x90>)
    4a88:	4b23      	ldr	r3, [pc, #140]	; (4b18 <Reset_Handler+0x94>)
    4a8a:	429a      	cmp	r2, r3
    4a8c:	d009      	beq.n	4aa2 <Reset_Handler+0x1e>
    4a8e:	4b22      	ldr	r3, [pc, #136]	; (4b18 <Reset_Handler+0x94>)
    4a90:	4a20      	ldr	r2, [pc, #128]	; (4b14 <Reset_Handler+0x90>)
    4a92:	e003      	b.n	4a9c <Reset_Handler+0x18>
    4a94:	6811      	ldr	r1, [r2, #0]
    4a96:	6019      	str	r1, [r3, #0]
    4a98:	3304      	adds	r3, #4
    4a9a:	3204      	adds	r2, #4
    4a9c:	491f      	ldr	r1, [pc, #124]	; (4b1c <Reset_Handler+0x98>)
    4a9e:	428b      	cmp	r3, r1
    4aa0:	d3f8      	bcc.n	4a94 <Reset_Handler+0x10>
    4aa2:	4b1f      	ldr	r3, [pc, #124]	; (4b20 <Reset_Handler+0x9c>)
    4aa4:	e002      	b.n	4aac <Reset_Handler+0x28>
    4aa6:	2200      	movs	r2, #0
    4aa8:	601a      	str	r2, [r3, #0]
    4aaa:	3304      	adds	r3, #4
    4aac:	4a1d      	ldr	r2, [pc, #116]	; (4b24 <Reset_Handler+0xa0>)
    4aae:	4293      	cmp	r3, r2
    4ab0:	d3f9      	bcc.n	4aa6 <Reset_Handler+0x22>
    4ab2:	4a1d      	ldr	r2, [pc, #116]	; (4b28 <Reset_Handler+0xa4>)
    4ab4:	21ff      	movs	r1, #255	; 0xff
    4ab6:	4b1d      	ldr	r3, [pc, #116]	; (4b2c <Reset_Handler+0xa8>)
    4ab8:	438b      	bics	r3, r1
    4aba:	6093      	str	r3, [r2, #8]
    4abc:	39fd      	subs	r1, #253	; 0xfd
    4abe:	2390      	movs	r3, #144	; 0x90
    4ac0:	005b      	lsls	r3, r3, #1
    4ac2:	4a1b      	ldr	r2, [pc, #108]	; (4b30 <Reset_Handler+0xac>)
    4ac4:	50d1      	str	r1, [r2, r3]
    4ac6:	4a1b      	ldr	r2, [pc, #108]	; (4b34 <Reset_Handler+0xb0>)
    4ac8:	78d3      	ldrb	r3, [r2, #3]
    4aca:	2503      	movs	r5, #3
    4acc:	43ab      	bics	r3, r5
    4ace:	2402      	movs	r4, #2
    4ad0:	4323      	orrs	r3, r4
    4ad2:	70d3      	strb	r3, [r2, #3]
    4ad4:	78d3      	ldrb	r3, [r2, #3]
    4ad6:	270c      	movs	r7, #12
    4ad8:	43bb      	bics	r3, r7
    4ada:	2608      	movs	r6, #8
    4adc:	4333      	orrs	r3, r6
    4ade:	70d3      	strb	r3, [r2, #3]
    4ae0:	4b15      	ldr	r3, [pc, #84]	; (4b38 <Reset_Handler+0xb4>)
    4ae2:	7b98      	ldrb	r0, [r3, #14]
    4ae4:	2230      	movs	r2, #48	; 0x30
    4ae6:	4390      	bics	r0, r2
    4ae8:	2220      	movs	r2, #32
    4aea:	4310      	orrs	r0, r2
    4aec:	7398      	strb	r0, [r3, #14]
    4aee:	7b99      	ldrb	r1, [r3, #14]
    4af0:	43b9      	bics	r1, r7
    4af2:	4331      	orrs	r1, r6
    4af4:	7399      	strb	r1, [r3, #14]
    4af6:	7b9a      	ldrb	r2, [r3, #14]
    4af8:	43aa      	bics	r2, r5
    4afa:	4322      	orrs	r2, r4
    4afc:	739a      	strb	r2, [r3, #14]
    4afe:	4a0f      	ldr	r2, [pc, #60]	; (4b3c <Reset_Handler+0xb8>)
    4b00:	6851      	ldr	r1, [r2, #4]
    4b02:	2380      	movs	r3, #128	; 0x80
    4b04:	430b      	orrs	r3, r1
    4b06:	6053      	str	r3, [r2, #4]
    4b08:	4b0d      	ldr	r3, [pc, #52]	; (4b40 <Reset_Handler+0xbc>)
    4b0a:	4798      	blx	r3
    4b0c:	4b0d      	ldr	r3, [pc, #52]	; (4b44 <Reset_Handler+0xc0>)
    4b0e:	4798      	blx	r3
    4b10:	e7fe      	b.n	4b10 <Reset_Handler+0x8c>
    4b12:	46c0      	nop			; (mov r8, r8)
    4b14:	00005c20 	.word	0x00005c20
    4b18:	20000000 	.word	0x20000000
    4b1c:	20000074 	.word	0x20000074
    4b20:	20000074 	.word	0x20000074
    4b24:	20000a24 	.word	0x20000a24
    4b28:	e000ed00 	.word	0xe000ed00
    4b2c:	00000000 	.word	0x00000000
    4b30:	41007000 	.word	0x41007000
    4b34:	41005000 	.word	0x41005000
    4b38:	41004800 	.word	0x41004800
    4b3c:	41004000 	.word	0x41004000
    4b40:	000050a9 	.word	0x000050a9
    4b44:	00004c89 	.word	0x00004c89

00004b48 <_sbrk>:
    4b48:	0003      	movs	r3, r0
    4b4a:	4a06      	ldr	r2, [pc, #24]	; (4b64 <_sbrk+0x1c>)
    4b4c:	6812      	ldr	r2, [r2, #0]
    4b4e:	2a00      	cmp	r2, #0
    4b50:	d004      	beq.n	4b5c <_sbrk+0x14>
    4b52:	4a04      	ldr	r2, [pc, #16]	; (4b64 <_sbrk+0x1c>)
    4b54:	6810      	ldr	r0, [r2, #0]
    4b56:	18c3      	adds	r3, r0, r3
    4b58:	6013      	str	r3, [r2, #0]
    4b5a:	4770      	bx	lr
    4b5c:	4902      	ldr	r1, [pc, #8]	; (4b68 <_sbrk+0x20>)
    4b5e:	4a01      	ldr	r2, [pc, #4]	; (4b64 <_sbrk+0x1c>)
    4b60:	6011      	str	r1, [r2, #0]
    4b62:	e7f6      	b.n	4b52 <_sbrk+0xa>
    4b64:	200003c8 	.word	0x200003c8
    4b68:	20002a28 	.word	0x20002a28

00004b6c <clock_osc8m_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes the 8 MHz oscillator to be used as the
	*  system clock source.
	*/
void clock_osc8m_init(void){
    4b6c:	b500      	push	{lr}
    4b6e:	b083      	sub	sp, #12
	//create system clock config struct
	struct system_clock_source_osc8m_config osc8_config;

	//config the 8 MHz oscillator
	//divide by 1 = 8 MHz clock
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    4b70:	a801      	add	r0, sp, #4
    4b72:	2300      	movs	r3, #0
    4b74:	7003      	strb	r3, [r0, #0]
	//run on demand
	osc8_config.on_demand = true;
    4b76:	2201      	movs	r2, #1
    4b78:	7082      	strb	r2, [r0, #2]
	//don't run in standby
	osc8_config.run_in_standby = false;
    4b7a:	7043      	strb	r3, [r0, #1]
	    
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    4b7c:	4b01      	ldr	r3, [pc, #4]	; (4b84 <clock_osc8m_init+0x18>)
    4b7e:	4798      	blx	r3
}//end clock_osc8m_init
    4b80:	b003      	add	sp, #12
    4b82:	bd00      	pop	{pc}
    4b84:	00004441 	.word	0x00004441

00004b88 <clock_gclk0_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes GCLK0, so it can be used by 
	*  peripherals. Uses the 8 MHz oscillator as its source.
	*/
void clock_gclk0_init(void){
    4b88:	b500      	push	{lr}
    4b8a:	b085      	sub	sp, #20
	//create GLCK0 config struct (for driving peripherals)
	struct system_gclk_gen_config gclk0_config;

	//init MCLK
	system_gclk_init();
    4b8c:	4b0a      	ldr	r3, [pc, #40]	; (4bb8 <clock_gclk0_init+0x30>)
    4b8e:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    4b90:	2300      	movs	r3, #0
    4b92:	4a0a      	ldr	r2, [pc, #40]	; (4bbc <clock_gclk0_init+0x34>)
    4b94:	7213      	strb	r3, [r2, #8]
	    
	//set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	    
	//use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    4b96:	a901      	add	r1, sp, #4
    4b98:	2206      	movs	r2, #6
    4b9a:	700a      	strb	r2, [r1, #0]
	//don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    4b9c:	724b      	strb	r3, [r1, #9]
	//We're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    4b9e:	704b      	strb	r3, [r1, #1]
	//division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    4ba0:	3a05      	subs	r2, #5
    4ba2:	604a      	str	r2, [r1, #4]
	//don't run in standby
	gclk0_config.run_in_standby = false;
    4ba4:	720b      	strb	r3, [r1, #8]
	//set GCLK0's config
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    4ba6:	2000      	movs	r0, #0
    4ba8:	4b05      	ldr	r3, [pc, #20]	; (4bc0 <clock_gclk0_init+0x38>)
    4baa:	4798      	blx	r3
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    4bac:	2000      	movs	r0, #0
    4bae:	4b05      	ldr	r3, [pc, #20]	; (4bc4 <clock_gclk0_init+0x3c>)
    4bb0:	4798      	blx	r3
}//end clock_gclk0_init
    4bb2:	b005      	add	sp, #20
    4bb4:	bd00      	pop	{pc}
    4bb6:	46c0      	nop			; (mov r8, r8)
    4bb8:	00004669 	.word	0x00004669
    4bbc:	40000400 	.word	0x40000400
    4bc0:	0000468d 	.word	0x0000468d
    4bc4:	0000475d 	.word	0x0000475d

00004bc8 <sys_clock_init>:
void sys_clock_init(void){
    4bc8:	b510      	push	{r4, lr}
	clock_osc8m_init();
    4bca:	4b05      	ldr	r3, [pc, #20]	; (4be0 <sys_clock_init+0x18>)
    4bcc:	4798      	blx	r3
	clock_gclk0_init();
    4bce:	4b05      	ldr	r3, [pc, #20]	; (4be4 <sys_clock_init+0x1c>)
    4bd0:	4798      	blx	r3
	clock_osc32k_init();
    4bd2:	4b05      	ldr	r3, [pc, #20]	; (4be8 <sys_clock_init+0x20>)
    4bd4:	4798      	blx	r3
	clock_gclk2_init();
    4bd6:	4b05      	ldr	r3, [pc, #20]	; (4bec <sys_clock_init+0x24>)
    4bd8:	4798      	blx	r3
	delay_init();
    4bda:	4b05      	ldr	r3, [pc, #20]	; (4bf0 <sys_clock_init+0x28>)
    4bdc:	4798      	blx	r3
}//end sys_clock_init
    4bde:	bd10      	pop	{r4, pc}
    4be0:	00004b6d 	.word	0x00004b6d
    4be4:	00004b89 	.word	0x00004b89
    4be8:	00003409 	.word	0x00003409
    4bec:	00003431 	.word	0x00003431
    4bf0:	00000115 	.word	0x00000115

00004bf4 <configure_port_pins>:
/* Function Name    : configure_port_pins
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config select pins for lcd 
	*/
void configure_port_pins(void){
    4bf4:	b570      	push	{r4, r5, r6, lr}
    4bf6:	b082      	sub	sp, #8
	config->powersave  = false;
    4bf8:	ac01      	add	r4, sp, #4
    4bfa:	2300      	movs	r3, #0
    4bfc:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);


	// configure outputs
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4bfe:	2601      	movs	r6, #1
    4c00:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = LCD_PD_PULL;
    4c02:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(LCD_PD, &config_port_pin);
    4c04:	0021      	movs	r1, r4
    4c06:	2008      	movs	r0, #8
    4c08:	4d05      	ldr	r5, [pc, #20]	; (4c20 <configure_port_pins+0x2c>)
    4c0a:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    4c0c:	2280      	movs	r2, #128	; 0x80
    4c0e:	0052      	lsls	r2, r2, #1
    4c10:	4b04      	ldr	r3, [pc, #16]	; (4c24 <configure_port_pins+0x30>)
    4c12:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
	
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4c14:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(EEPROM_CS,&config_port_pin);
    4c16:	0021      	movs	r1, r4
    4c18:	200d      	movs	r0, #13
    4c1a:	47a8      	blx	r5
	port_pin_set_output_level(PIN_PB15, true);	
	
*/


}//end configure_port_pins
    4c1c:	b002      	add	sp, #8
    4c1e:	bd70      	pop	{r4, r5, r6, pc}
    4c20:	000042f1 	.word	0x000042f1
    4c24:	41004400 	.word	0x41004400

00004c28 <sim_system_init>:
void sim_system_init(void){
    4c28:	b510      	push	{r4, lr}
	system_init();
    4c2a:	4b0c      	ldr	r3, [pc, #48]	; (4c5c <sim_system_init+0x34>)
    4c2c:	4798      	blx	r3
	sys_clock_init();
    4c2e:	4b0c      	ldr	r3, [pc, #48]	; (4c60 <sim_system_init+0x38>)
    4c30:	4798      	blx	r3
	configure_port_pins();
    4c32:	4b0c      	ldr	r3, [pc, #48]	; (4c64 <sim_system_init+0x3c>)
    4c34:	4798      	blx	r3
	lcd_spi_init();
    4c36:	4b0c      	ldr	r3, [pc, #48]	; (4c68 <sim_system_init+0x40>)
    4c38:	4798      	blx	r3
	configure_ext_ints();
    4c3a:	4b0c      	ldr	r3, [pc, #48]	; (4c6c <sim_system_init+0x44>)
    4c3c:	4798      	blx	r3
	configure_ext_int_callback();
    4c3e:	4b0c      	ldr	r3, [pc, #48]	; (4c70 <sim_system_init+0x48>)
    4c40:	4798      	blx	r3
	lcd_init_seq(); 
    4c42:	4b0c      	ldr	r3, [pc, #48]	; (4c74 <sim_system_init+0x4c>)
    4c44:	4798      	blx	r3
	lcd_int_mask(LCD_DEFAULT_MASK);
    4c46:	2104      	movs	r1, #4
    4c48:	480b      	ldr	r0, [pc, #44]	; (4c78 <sim_system_init+0x50>)
    4c4a:	4c0c      	ldr	r4, [pc, #48]	; (4c7c <sim_system_init+0x54>)
    4c4c:	47a0      	blx	r4
	lcd_int_enable();
    4c4e:	2101      	movs	r1, #1
    4c50:	480b      	ldr	r0, [pc, #44]	; (4c80 <sim_system_init+0x58>)
    4c52:	47a0      	blx	r4
	spieeprom_init();
    4c54:	4b0b      	ldr	r3, [pc, #44]	; (4c84 <sim_system_init+0x5c>)
    4c56:	4798      	blx	r3
}//end sim_system_init
    4c58:	bd10      	pop	{r4, pc}
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	00004a55 	.word	0x00004a55
    4c60:	00004bc9 	.word	0x00004bc9
    4c64:	00004bf5 	.word	0x00004bf5
    4c68:	00003469 	.word	0x00003469
    4c6c:	00003305 	.word	0x00003305
    4c70:	0000332d 	.word	0x0000332d
    4c74:	000037ad 	.word	0x000037ad
    4c78:	003020b0 	.word	0x003020b0
    4c7c:	000036b1 	.word	0x000036b1
    4c80:	003020ac 	.word	0x003020ac
    4c84:	000016e5 	.word	0x000016e5

00004c88 <main>:
int main(void){
    4c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c8a:	b087      	sub	sp, #28
	sim_system_init();
    4c8c:	4b7d      	ldr	r3, [pc, #500]	; (4e84 <main+0x1fc>)
    4c8e:	4798      	blx	r3
	cpu_irq_enable();
    4c90:	4d7d      	ldr	r5, [pc, #500]	; (4e88 <main+0x200>)
    4c92:	2601      	movs	r6, #1
    4c94:	702e      	strb	r6, [r5, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4c96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4c9a:	b662      	cpsie	i
	configure_rtc_calendar();
    4c9c:	4b7b      	ldr	r3, [pc, #492]	; (4e8c <main+0x204>)
    4c9e:	4798      	blx	r3
	phost = &host;
    4ca0:	4c7b      	ldr	r4, [pc, #492]	; (4e90 <main+0x208>)
    4ca2:	487c      	ldr	r0, [pc, #496]	; (4e94 <main+0x20c>)
    4ca4:	6020      	str	r0, [r4, #0]
	Ft_Gpu_Hal_Open(phost);
    4ca6:	4b7c      	ldr	r3, [pc, #496]	; (4e98 <main+0x210>)
    4ca8:	4798      	blx	r3
	Ft_Gpu_Hal_Wr8(phost, REG_INT_EN, 1);
    4caa:	2201      	movs	r2, #1
    4cac:	497b      	ldr	r1, [pc, #492]	; (4e9c <main+0x214>)
    4cae:	6820      	ldr	r0, [r4, #0]
    4cb0:	4f7b      	ldr	r7, [pc, #492]	; (4ea0 <main+0x218>)
    4cb2:	47b8      	blx	r7
	Ft_Gpu_Hal_Wr8(phost, REG_INT_MASK, 6);
    4cb4:	6820      	ldr	r0, [r4, #0]
    4cb6:	2206      	movs	r2, #6
    4cb8:	497a      	ldr	r1, [pc, #488]	; (4ea4 <main+0x21c>)
    4cba:	47b8      	blx	r7
	delay_ms(2000);
    4cbc:	20fa      	movs	r0, #250	; 0xfa
    4cbe:	00c0      	lsls	r0, r0, #3
    4cc0:	4b79      	ldr	r3, [pc, #484]	; (4ea8 <main+0x220>)
    4cc2:	4798      	blx	r3
	cpu_irq_enable();
    4cc4:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4cc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4cca:	b662      	cpsie	i
	mstimer_init();
    4ccc:	4b77      	ldr	r3, [pc, #476]	; (4eac <main+0x224>)
    4cce:	4798      	blx	r3
	rs485_baud_rate_set(38400);
    4cd0:	2096      	movs	r0, #150	; 0x96
    4cd2:	0200      	lsls	r0, r0, #8
    4cd4:	4b76      	ldr	r3, [pc, #472]	; (4eb0 <main+0x228>)
    4cd6:	4798      	blx	r3
	rs485_init();
    4cd8:	4b76      	ldr	r3, [pc, #472]	; (4eb4 <main+0x22c>)
    4cda:	4798      	blx	r3
	mstimer_set(&Blink_Timer, 125);
    4cdc:	217d      	movs	r1, #125	; 0x7d
    4cde:	4876      	ldr	r0, [pc, #472]	; (4eb8 <main+0x230>)
    4ce0:	4b76      	ldr	r3, [pc, #472]	; (4ebc <main+0x234>)
    4ce2:	4798      	blx	r3
    4ce4:	e01d      	b.n	4d22 <main+0x9a>
			current_fiber1_data.rssi_values = readings;//get_fiber1_data();
    4ce6:	2204      	movs	r2, #4
    4ce8:	a905      	add	r1, sp, #20
    4cea:	4875      	ldr	r0, [pc, #468]	; (4ec0 <main+0x238>)
    4cec:	3008      	adds	r0, #8
    4cee:	4b75      	ldr	r3, [pc, #468]	; (4ec4 <main+0x23c>)
    4cf0:	4798      	blx	r3
    4cf2:	e01d      	b.n	4d30 <main+0xa8>
			current_fiber2_data.rssi_values = readings; //get_fiber2_data();
    4cf4:	2204      	movs	r2, #4
    4cf6:	a905      	add	r1, sp, #20
    4cf8:	4873      	ldr	r0, [pc, #460]	; (4ec8 <main+0x240>)
    4cfa:	3008      	adds	r0, #8
    4cfc:	4b71      	ldr	r3, [pc, #452]	; (4ec4 <main+0x23c>)
    4cfe:	4798      	blx	r3
    4d00:	e01a      	b.n	4d38 <main+0xb0>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    4d02:	33ff      	adds	r3, #255	; 0xff
    4d04:	e043      	b.n	4d8e <main+0x106>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    4d06:	33fe      	adds	r3, #254	; 0xfe
    4d08:	e058      	b.n	4dbc <main+0x134>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    4d0a:	33fd      	adds	r3, #253	; 0xfd
    4d0c:	e06e      	b.n	4dec <main+0x164>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    4d0e:	33fc      	adds	r3, #252	; 0xfc
    4d10:	e084      	b.n	4e1c <main+0x194>
			if(tempTag == attn)			    attnOp();	//attnOp(current_fiber1_data, current_fiber2_data);
    4d12:	4b6e      	ldr	r3, [pc, #440]	; (4ecc <main+0x244>)
    4d14:	4798      	blx	r3
			tempTag = 0;
    4d16:	2200      	movs	r2, #0
    4d18:	4b6d      	ldr	r3, [pc, #436]	; (4ed0 <main+0x248>)
    4d1a:	701a      	strb	r2, [r3, #0]
			delay_ms(50);
    4d1c:	2032      	movs	r0, #50	; 0x32
    4d1e:	4b62      	ldr	r3, [pc, #392]	; (4ea8 <main+0x220>)
    4d20:	4798      	blx	r3
		struct measurement readings = {10,20,30,40};
    4d22:	4b6c      	ldr	r3, [pc, #432]	; (4ed4 <main+0x24c>)
    4d24:	681b      	ldr	r3, [r3, #0]
    4d26:	9305      	str	r3, [sp, #20]
		if(get_fiber1_status() == data_ready)
    4d28:	4b6b      	ldr	r3, [pc, #428]	; (4ed8 <main+0x250>)
    4d2a:	4798      	blx	r3
    4d2c:	2801      	cmp	r0, #1
    4d2e:	d0da      	beq.n	4ce6 <main+0x5e>
		if(get_fiber2_status() == data_ready)
    4d30:	4b6a      	ldr	r3, [pc, #424]	; (4edc <main+0x254>)
    4d32:	4798      	blx	r3
    4d34:	2801      	cmp	r0, #1
    4d36:	d0dd      	beq.n	4cf4 <main+0x6c>
		tag = 0;
    4d38:	4d69      	ldr	r5, [pc, #420]	; (4ee0 <main+0x258>)
    4d3a:	2300      	movs	r3, #0
    4d3c:	702b      	strb	r3, [r5, #0]
		disStart();
    4d3e:	4b69      	ldr	r3, [pc, #420]	; (4ee4 <main+0x25c>)
    4d40:	4798      	blx	r3
		Ft_Gpu_CoCmd_Gradient(phost, 0, 0x060A39, 0, disWid, disHei, 0x0A4F7A);
    4d42:	4c53      	ldr	r4, [pc, #332]	; (4e90 <main+0x208>)
    4d44:	6820      	ldr	r0, [r4, #0]
    4d46:	4b68      	ldr	r3, [pc, #416]	; (4ee8 <main+0x260>)
    4d48:	9302      	str	r3, [sp, #8]
    4d4a:	23f0      	movs	r3, #240	; 0xf0
    4d4c:	005b      	lsls	r3, r3, #1
    4d4e:	9301      	str	r3, [sp, #4]
    4d50:	3341      	adds	r3, #65	; 0x41
    4d52:	33ff      	adds	r3, #255	; 0xff
    4d54:	9300      	str	r3, [sp, #0]
    4d56:	2300      	movs	r3, #0
    4d58:	4a64      	ldr	r2, [pc, #400]	; (4eec <main+0x264>)
    4d5a:	2100      	movs	r1, #0
    4d5c:	4e64      	ldr	r6, [pc, #400]	; (4ef0 <main+0x268>)
    4d5e:	47b0      	blx	r6
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    4d60:	2180      	movs	r1, #128	; 0x80
    4d62:	04c9      	lsls	r1, r1, #19
    4d64:	6820      	ldr	r0, [r4, #0]
    4d66:	4e63      	ldr	r6, [pc, #396]	; (4ef4 <main+0x26c>)
    4d68:	47b0      	blx	r6
		printTime();
    4d6a:	4b63      	ldr	r3, [pc, #396]	; (4ef8 <main+0x270>)
    4d6c:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    4d6e:	4963      	ldr	r1, [pc, #396]	; (4efc <main+0x274>)
    4d70:	6820      	ldr	r0, [r4, #0]
    4d72:	47b0      	blx	r6
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    4d74:	4962      	ldr	r1, [pc, #392]	; (4f00 <main+0x278>)
    4d76:	6820      	ldr	r0, [r4, #0]
    4d78:	4b62      	ldr	r3, [pc, #392]	; (4f04 <main+0x27c>)
    4d7a:	4798      	blx	r3
    4d7c:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_Hal_WrCmd32(phost,TAG(attn));
    4d7e:	4962      	ldr	r1, [pc, #392]	; (4f08 <main+0x280>)
    4d80:	6820      	ldr	r0, [r4, #0]
    4d82:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    4d84:	6820      	ldr	r0, [r4, #0]
    4d86:	782b      	ldrb	r3, [r5, #0]
    4d88:	2b01      	cmp	r3, #1
    4d8a:	d0ba      	beq.n	4d02 <main+0x7a>
    4d8c:	2300      	movs	r3, #0
    4d8e:	4a5f      	ldr	r2, [pc, #380]	; (4f0c <main+0x284>)
    4d90:	9203      	str	r2, [sp, #12]
    4d92:	9302      	str	r3, [sp, #8]
    4d94:	231e      	movs	r3, #30
    4d96:	9301      	str	r3, [sp, #4]
    4d98:	335a      	adds	r3, #90	; 0x5a
    4d9a:	9300      	str	r3, [sp, #0]
    4d9c:	3350      	adds	r3, #80	; 0x50
    4d9e:	226e      	movs	r2, #110	; 0x6e
    4da0:	21b8      	movs	r1, #184	; 0xb8
    4da2:	4c5b      	ldr	r4, [pc, #364]	; (4f10 <main+0x288>)
    4da4:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(hist));
    4da6:	4c3a      	ldr	r4, [pc, #232]	; (4e90 <main+0x208>)
    4da8:	495a      	ldr	r1, [pc, #360]	; (4f14 <main+0x28c>)
    4daa:	6820      	ldr	r0, [r4, #0]
    4dac:	4b51      	ldr	r3, [pc, #324]	; (4ef4 <main+0x26c>)
    4dae:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    4db0:	6820      	ldr	r0, [r4, #0]
    4db2:	4b4b      	ldr	r3, [pc, #300]	; (4ee0 <main+0x258>)
    4db4:	781b      	ldrb	r3, [r3, #0]
    4db6:	2b02      	cmp	r3, #2
    4db8:	d0a5      	beq.n	4d06 <main+0x7e>
    4dba:	2300      	movs	r3, #0
    4dbc:	4a56      	ldr	r2, [pc, #344]	; (4f18 <main+0x290>)
    4dbe:	9203      	str	r2, [sp, #12]
    4dc0:	9302      	str	r3, [sp, #8]
    4dc2:	231e      	movs	r3, #30
    4dc4:	9301      	str	r3, [sp, #4]
    4dc6:	335a      	adds	r3, #90	; 0x5a
    4dc8:	9300      	str	r3, [sp, #0]
    4dca:	3350      	adds	r3, #80	; 0x50
    4dcc:	226e      	movs	r2, #110	; 0x6e
    4dce:	21d0      	movs	r1, #208	; 0xd0
    4dd0:	0049      	lsls	r1, r1, #1
    4dd2:	4c4f      	ldr	r4, [pc, #316]	; (4f10 <main+0x288>)
    4dd4:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(rssi));
    4dd6:	4c2e      	ldr	r4, [pc, #184]	; (4e90 <main+0x208>)
    4dd8:	4950      	ldr	r1, [pc, #320]	; (4f1c <main+0x294>)
    4dda:	6820      	ldr	r0, [r4, #0]
    4ddc:	4b45      	ldr	r3, [pc, #276]	; (4ef4 <main+0x26c>)
    4dde:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    4de0:	6820      	ldr	r0, [r4, #0]
    4de2:	4b3f      	ldr	r3, [pc, #252]	; (4ee0 <main+0x258>)
    4de4:	781b      	ldrb	r3, [r3, #0]
    4de6:	2b03      	cmp	r3, #3
    4de8:	d08f      	beq.n	4d0a <main+0x82>
    4dea:	2300      	movs	r3, #0
    4dec:	4a4c      	ldr	r2, [pc, #304]	; (4f20 <main+0x298>)
    4dee:	9203      	str	r2, [sp, #12]
    4df0:	9302      	str	r3, [sp, #8]
    4df2:	231e      	movs	r3, #30
    4df4:	9301      	str	r3, [sp, #4]
    4df6:	335a      	adds	r3, #90	; 0x5a
    4df8:	9300      	str	r3, [sp, #0]
    4dfa:	3350      	adds	r3, #80	; 0x50
    4dfc:	22f9      	movs	r2, #249	; 0xf9
    4dfe:	21b8      	movs	r1, #184	; 0xb8
    4e00:	4c43      	ldr	r4, [pc, #268]	; (4f10 <main+0x288>)
    4e02:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sett));
    4e04:	4c22      	ldr	r4, [pc, #136]	; (4e90 <main+0x208>)
    4e06:	4947      	ldr	r1, [pc, #284]	; (4f24 <main+0x29c>)
    4e08:	6820      	ldr	r0, [r4, #0]
    4e0a:	4b3a      	ldr	r3, [pc, #232]	; (4ef4 <main+0x26c>)
    4e0c:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    4e0e:	6820      	ldr	r0, [r4, #0]
    4e10:	4b33      	ldr	r3, [pc, #204]	; (4ee0 <main+0x258>)
    4e12:	781b      	ldrb	r3, [r3, #0]
    4e14:	2b04      	cmp	r3, #4
    4e16:	d100      	bne.n	4e1a <main+0x192>
    4e18:	e779      	b.n	4d0e <main+0x86>
    4e1a:	2300      	movs	r3, #0
    4e1c:	4a42      	ldr	r2, [pc, #264]	; (4f28 <main+0x2a0>)
    4e1e:	9203      	str	r2, [sp, #12]
    4e20:	9302      	str	r3, [sp, #8]
    4e22:	231e      	movs	r3, #30
    4e24:	9301      	str	r3, [sp, #4]
    4e26:	335a      	adds	r3, #90	; 0x5a
    4e28:	9300      	str	r3, [sp, #0]
    4e2a:	3350      	adds	r3, #80	; 0x50
    4e2c:	22f9      	movs	r2, #249	; 0xf9
    4e2e:	21d0      	movs	r1, #208	; 0xd0
    4e30:	0049      	lsls	r1, r1, #1
    4e32:	4c37      	ldr	r4, [pc, #220]	; (4f10 <main+0x288>)
    4e34:	47a0      	blx	r4
		disEnd();
    4e36:	4b3d      	ldr	r3, [pc, #244]	; (4f2c <main+0x2a4>)
    4e38:	4798      	blx	r3
		if(tag!=0)		tempTag = tag;
    4e3a:	4b29      	ldr	r3, [pc, #164]	; (4ee0 <main+0x258>)
    4e3c:	781b      	ldrb	r3, [r3, #0]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d001      	beq.n	4e46 <main+0x1be>
    4e42:	4a23      	ldr	r2, [pc, #140]	; (4ed0 <main+0x248>)
    4e44:	7013      	strb	r3, [r2, #0]
		if (tempTag != tag && tag == 0 && tag!=back){
    4e46:	4a22      	ldr	r2, [pc, #136]	; (4ed0 <main+0x248>)
    4e48:	7812      	ldrb	r2, [r2, #0]
    4e4a:	4293      	cmp	r3, r2
    4e4c:	d100      	bne.n	4e50 <main+0x1c8>
    4e4e:	e768      	b.n	4d22 <main+0x9a>
    4e50:	2b00      	cmp	r3, #0
    4e52:	d000      	beq.n	4e56 <main+0x1ce>
    4e54:	e765      	b.n	4d22 <main+0x9a>
    4e56:	2b06      	cmp	r3, #6
    4e58:	d100      	bne.n	4e5c <main+0x1d4>
    4e5a:	e762      	b.n	4d22 <main+0x9a>
			if(tempTag == attn)			    attnOp();	//attnOp(current_fiber1_data, current_fiber2_data);
    4e5c:	2a01      	cmp	r2, #1
    4e5e:	d100      	bne.n	4e62 <main+0x1da>
    4e60:	e757      	b.n	4d12 <main+0x8a>
			else if(tempTag == hist)		historyOp();
    4e62:	2a02      	cmp	r2, #2
    4e64:	d007      	beq.n	4e76 <main+0x1ee>
			else if(tempTag == sett)		settingOp();
    4e66:	2a04      	cmp	r2, #4
    4e68:	d008      	beq.n	4e7c <main+0x1f4>
			else if(tempTag == rssi)		rssiOp();
    4e6a:	2a03      	cmp	r2, #3
    4e6c:	d000      	beq.n	4e70 <main+0x1e8>
    4e6e:	e752      	b.n	4d16 <main+0x8e>
    4e70:	4b2f      	ldr	r3, [pc, #188]	; (4f30 <main+0x2a8>)
    4e72:	4798      	blx	r3
    4e74:	e74f      	b.n	4d16 <main+0x8e>
			else if(tempTag == hist)		historyOp();
    4e76:	4b2f      	ldr	r3, [pc, #188]	; (4f34 <main+0x2ac>)
    4e78:	4798      	blx	r3
    4e7a:	e74c      	b.n	4d16 <main+0x8e>
			else if(tempTag == sett)		settingOp();
    4e7c:	4b2e      	ldr	r3, [pc, #184]	; (4f38 <main+0x2b0>)
    4e7e:	4798      	blx	r3
    4e80:	e749      	b.n	4d16 <main+0x8e>
    4e82:	46c0      	nop			; (mov r8, r8)
    4e84:	00004c29 	.word	0x00004c29
    4e88:	2000000b 	.word	0x2000000b
    4e8c:	00003345 	.word	0x00003345
    4e90:	20000764 	.word	0x20000764
    4e94:	2000044c 	.word	0x2000044c
    4e98:	00001bf1 	.word	0x00001bf1
    4e9c:	003020ac 	.word	0x003020ac
    4ea0:	00001da1 	.word	0x00001da1
    4ea4:	003020b0 	.word	0x003020b0
    4ea8:	00000151 	.word	0x00000151
    4eac:	00003965 	.word	0x00003965
    4eb0:	00003bdd 	.word	0x00003bdd
    4eb4:	00003bf5 	.word	0x00003bf5
    4eb8:	200003cc 	.word	0x200003cc
    4ebc:	000015b5 	.word	0x000015b5
    4ec0:	20000a14 	.word	0x20000a14
    4ec4:	000050f1 	.word	0x000050f1
    4ec8:	20000a08 	.word	0x20000a08
    4ecc:	00002381 	.word	0x00002381
    4ed0:	200000f2 	.word	0x200000f2
    4ed4:	00005b90 	.word	0x00005b90
    4ed8:	00001809 	.word	0x00001809
    4edc:	00001815 	.word	0x00001815
    4ee0:	200000f1 	.word	0x200000f1
    4ee4:	00002329 	.word	0x00002329
    4ee8:	000a4f7a 	.word	0x000a4f7a
    4eec:	00000a39 	.word	0x00000a39
    4ef0:	00001aa9 	.word	0x00001aa9
    4ef4:	00001eb9 	.word	0x00001eb9
    4ef8:	00001f29 	.word	0x00001f29
    4efc:	04ffffff 	.word	0x04ffffff
    4f00:	0030212c 	.word	0x0030212c
    4f04:	00001d49 	.word	0x00001d49
    4f08:	03000001 	.word	0x03000001
    4f0c:	00005b94 	.word	0x00005b94
    4f10:	00001989 	.word	0x00001989
    4f14:	03000002 	.word	0x03000002
    4f18:	00005ba4 	.word	0x00005ba4
    4f1c:	03000003 	.word	0x03000003
    4f20:	00005bb0 	.word	0x00005bb0
    4f24:	03000004 	.word	0x03000004
    4f28:	00005bbc 	.word	0x00005bbc
    4f2c:	00002355 	.word	0x00002355
    4f30:	00002811 	.word	0x00002811
    4f34:	000026cd 	.word	0x000026cd
    4f38:	00003025 	.word	0x00003025

00004f3c <__udivsi3>:
    4f3c:	2200      	movs	r2, #0
    4f3e:	0843      	lsrs	r3, r0, #1
    4f40:	428b      	cmp	r3, r1
    4f42:	d374      	bcc.n	502e <__udivsi3+0xf2>
    4f44:	0903      	lsrs	r3, r0, #4
    4f46:	428b      	cmp	r3, r1
    4f48:	d35f      	bcc.n	500a <__udivsi3+0xce>
    4f4a:	0a03      	lsrs	r3, r0, #8
    4f4c:	428b      	cmp	r3, r1
    4f4e:	d344      	bcc.n	4fda <__udivsi3+0x9e>
    4f50:	0b03      	lsrs	r3, r0, #12
    4f52:	428b      	cmp	r3, r1
    4f54:	d328      	bcc.n	4fa8 <__udivsi3+0x6c>
    4f56:	0c03      	lsrs	r3, r0, #16
    4f58:	428b      	cmp	r3, r1
    4f5a:	d30d      	bcc.n	4f78 <__udivsi3+0x3c>
    4f5c:	22ff      	movs	r2, #255	; 0xff
    4f5e:	0209      	lsls	r1, r1, #8
    4f60:	ba12      	rev	r2, r2
    4f62:	0c03      	lsrs	r3, r0, #16
    4f64:	428b      	cmp	r3, r1
    4f66:	d302      	bcc.n	4f6e <__udivsi3+0x32>
    4f68:	1212      	asrs	r2, r2, #8
    4f6a:	0209      	lsls	r1, r1, #8
    4f6c:	d065      	beq.n	503a <__udivsi3+0xfe>
    4f6e:	0b03      	lsrs	r3, r0, #12
    4f70:	428b      	cmp	r3, r1
    4f72:	d319      	bcc.n	4fa8 <__udivsi3+0x6c>
    4f74:	e000      	b.n	4f78 <__udivsi3+0x3c>
    4f76:	0a09      	lsrs	r1, r1, #8
    4f78:	0bc3      	lsrs	r3, r0, #15
    4f7a:	428b      	cmp	r3, r1
    4f7c:	d301      	bcc.n	4f82 <__udivsi3+0x46>
    4f7e:	03cb      	lsls	r3, r1, #15
    4f80:	1ac0      	subs	r0, r0, r3
    4f82:	4152      	adcs	r2, r2
    4f84:	0b83      	lsrs	r3, r0, #14
    4f86:	428b      	cmp	r3, r1
    4f88:	d301      	bcc.n	4f8e <__udivsi3+0x52>
    4f8a:	038b      	lsls	r3, r1, #14
    4f8c:	1ac0      	subs	r0, r0, r3
    4f8e:	4152      	adcs	r2, r2
    4f90:	0b43      	lsrs	r3, r0, #13
    4f92:	428b      	cmp	r3, r1
    4f94:	d301      	bcc.n	4f9a <__udivsi3+0x5e>
    4f96:	034b      	lsls	r3, r1, #13
    4f98:	1ac0      	subs	r0, r0, r3
    4f9a:	4152      	adcs	r2, r2
    4f9c:	0b03      	lsrs	r3, r0, #12
    4f9e:	428b      	cmp	r3, r1
    4fa0:	d301      	bcc.n	4fa6 <__udivsi3+0x6a>
    4fa2:	030b      	lsls	r3, r1, #12
    4fa4:	1ac0      	subs	r0, r0, r3
    4fa6:	4152      	adcs	r2, r2
    4fa8:	0ac3      	lsrs	r3, r0, #11
    4faa:	428b      	cmp	r3, r1
    4fac:	d301      	bcc.n	4fb2 <__udivsi3+0x76>
    4fae:	02cb      	lsls	r3, r1, #11
    4fb0:	1ac0      	subs	r0, r0, r3
    4fb2:	4152      	adcs	r2, r2
    4fb4:	0a83      	lsrs	r3, r0, #10
    4fb6:	428b      	cmp	r3, r1
    4fb8:	d301      	bcc.n	4fbe <__udivsi3+0x82>
    4fba:	028b      	lsls	r3, r1, #10
    4fbc:	1ac0      	subs	r0, r0, r3
    4fbe:	4152      	adcs	r2, r2
    4fc0:	0a43      	lsrs	r3, r0, #9
    4fc2:	428b      	cmp	r3, r1
    4fc4:	d301      	bcc.n	4fca <__udivsi3+0x8e>
    4fc6:	024b      	lsls	r3, r1, #9
    4fc8:	1ac0      	subs	r0, r0, r3
    4fca:	4152      	adcs	r2, r2
    4fcc:	0a03      	lsrs	r3, r0, #8
    4fce:	428b      	cmp	r3, r1
    4fd0:	d301      	bcc.n	4fd6 <__udivsi3+0x9a>
    4fd2:	020b      	lsls	r3, r1, #8
    4fd4:	1ac0      	subs	r0, r0, r3
    4fd6:	4152      	adcs	r2, r2
    4fd8:	d2cd      	bcs.n	4f76 <__udivsi3+0x3a>
    4fda:	09c3      	lsrs	r3, r0, #7
    4fdc:	428b      	cmp	r3, r1
    4fde:	d301      	bcc.n	4fe4 <__udivsi3+0xa8>
    4fe0:	01cb      	lsls	r3, r1, #7
    4fe2:	1ac0      	subs	r0, r0, r3
    4fe4:	4152      	adcs	r2, r2
    4fe6:	0983      	lsrs	r3, r0, #6
    4fe8:	428b      	cmp	r3, r1
    4fea:	d301      	bcc.n	4ff0 <__udivsi3+0xb4>
    4fec:	018b      	lsls	r3, r1, #6
    4fee:	1ac0      	subs	r0, r0, r3
    4ff0:	4152      	adcs	r2, r2
    4ff2:	0943      	lsrs	r3, r0, #5
    4ff4:	428b      	cmp	r3, r1
    4ff6:	d301      	bcc.n	4ffc <__udivsi3+0xc0>
    4ff8:	014b      	lsls	r3, r1, #5
    4ffa:	1ac0      	subs	r0, r0, r3
    4ffc:	4152      	adcs	r2, r2
    4ffe:	0903      	lsrs	r3, r0, #4
    5000:	428b      	cmp	r3, r1
    5002:	d301      	bcc.n	5008 <__udivsi3+0xcc>
    5004:	010b      	lsls	r3, r1, #4
    5006:	1ac0      	subs	r0, r0, r3
    5008:	4152      	adcs	r2, r2
    500a:	08c3      	lsrs	r3, r0, #3
    500c:	428b      	cmp	r3, r1
    500e:	d301      	bcc.n	5014 <__udivsi3+0xd8>
    5010:	00cb      	lsls	r3, r1, #3
    5012:	1ac0      	subs	r0, r0, r3
    5014:	4152      	adcs	r2, r2
    5016:	0883      	lsrs	r3, r0, #2
    5018:	428b      	cmp	r3, r1
    501a:	d301      	bcc.n	5020 <__udivsi3+0xe4>
    501c:	008b      	lsls	r3, r1, #2
    501e:	1ac0      	subs	r0, r0, r3
    5020:	4152      	adcs	r2, r2
    5022:	0843      	lsrs	r3, r0, #1
    5024:	428b      	cmp	r3, r1
    5026:	d301      	bcc.n	502c <__udivsi3+0xf0>
    5028:	004b      	lsls	r3, r1, #1
    502a:	1ac0      	subs	r0, r0, r3
    502c:	4152      	adcs	r2, r2
    502e:	1a41      	subs	r1, r0, r1
    5030:	d200      	bcs.n	5034 <__udivsi3+0xf8>
    5032:	4601      	mov	r1, r0
    5034:	4152      	adcs	r2, r2
    5036:	4610      	mov	r0, r2
    5038:	4770      	bx	lr
    503a:	e7ff      	b.n	503c <__udivsi3+0x100>
    503c:	b501      	push	{r0, lr}
    503e:	2000      	movs	r0, #0
    5040:	f000 f806 	bl	5050 <__aeabi_idiv0>
    5044:	bd02      	pop	{r1, pc}
    5046:	46c0      	nop			; (mov r8, r8)

00005048 <__aeabi_uidivmod>:
    5048:	2900      	cmp	r1, #0
    504a:	d0f7      	beq.n	503c <__udivsi3+0x100>
    504c:	e776      	b.n	4f3c <__udivsi3>
    504e:	4770      	bx	lr

00005050 <__aeabi_idiv0>:
    5050:	4770      	bx	lr
    5052:	46c0      	nop			; (mov r8, r8)

00005054 <__aeabi_lmul>:
    5054:	b5f0      	push	{r4, r5, r6, r7, lr}
    5056:	46ce      	mov	lr, r9
    5058:	4647      	mov	r7, r8
    505a:	0415      	lsls	r5, r2, #16
    505c:	0c2d      	lsrs	r5, r5, #16
    505e:	002e      	movs	r6, r5
    5060:	b580      	push	{r7, lr}
    5062:	0407      	lsls	r7, r0, #16
    5064:	0c14      	lsrs	r4, r2, #16
    5066:	0c3f      	lsrs	r7, r7, #16
    5068:	4699      	mov	r9, r3
    506a:	0c03      	lsrs	r3, r0, #16
    506c:	437e      	muls	r6, r7
    506e:	435d      	muls	r5, r3
    5070:	4367      	muls	r7, r4
    5072:	4363      	muls	r3, r4
    5074:	197f      	adds	r7, r7, r5
    5076:	0c34      	lsrs	r4, r6, #16
    5078:	19e4      	adds	r4, r4, r7
    507a:	469c      	mov	ip, r3
    507c:	42a5      	cmp	r5, r4
    507e:	d903      	bls.n	5088 <__aeabi_lmul+0x34>
    5080:	2380      	movs	r3, #128	; 0x80
    5082:	025b      	lsls	r3, r3, #9
    5084:	4698      	mov	r8, r3
    5086:	44c4      	add	ip, r8
    5088:	464b      	mov	r3, r9
    508a:	4351      	muls	r1, r2
    508c:	4343      	muls	r3, r0
    508e:	0436      	lsls	r6, r6, #16
    5090:	0c36      	lsrs	r6, r6, #16
    5092:	0c25      	lsrs	r5, r4, #16
    5094:	0424      	lsls	r4, r4, #16
    5096:	4465      	add	r5, ip
    5098:	19a4      	adds	r4, r4, r6
    509a:	1859      	adds	r1, r3, r1
    509c:	1949      	adds	r1, r1, r5
    509e:	0020      	movs	r0, r4
    50a0:	bc0c      	pop	{r2, r3}
    50a2:	4690      	mov	r8, r2
    50a4:	4699      	mov	r9, r3
    50a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000050a8 <__libc_init_array>:
    50a8:	b570      	push	{r4, r5, r6, lr}
    50aa:	2600      	movs	r6, #0
    50ac:	4d0c      	ldr	r5, [pc, #48]	; (50e0 <__libc_init_array+0x38>)
    50ae:	4c0d      	ldr	r4, [pc, #52]	; (50e4 <__libc_init_array+0x3c>)
    50b0:	1b64      	subs	r4, r4, r5
    50b2:	10a4      	asrs	r4, r4, #2
    50b4:	42a6      	cmp	r6, r4
    50b6:	d109      	bne.n	50cc <__libc_init_array+0x24>
    50b8:	2600      	movs	r6, #0
    50ba:	f000 fda1 	bl	5c00 <_init>
    50be:	4d0a      	ldr	r5, [pc, #40]	; (50e8 <__libc_init_array+0x40>)
    50c0:	4c0a      	ldr	r4, [pc, #40]	; (50ec <__libc_init_array+0x44>)
    50c2:	1b64      	subs	r4, r4, r5
    50c4:	10a4      	asrs	r4, r4, #2
    50c6:	42a6      	cmp	r6, r4
    50c8:	d105      	bne.n	50d6 <__libc_init_array+0x2e>
    50ca:	bd70      	pop	{r4, r5, r6, pc}
    50cc:	00b3      	lsls	r3, r6, #2
    50ce:	58eb      	ldr	r3, [r5, r3]
    50d0:	4798      	blx	r3
    50d2:	3601      	adds	r6, #1
    50d4:	e7ee      	b.n	50b4 <__libc_init_array+0xc>
    50d6:	00b3      	lsls	r3, r6, #2
    50d8:	58eb      	ldr	r3, [r5, r3]
    50da:	4798      	blx	r3
    50dc:	3601      	adds	r6, #1
    50de:	e7f2      	b.n	50c6 <__libc_init_array+0x1e>
    50e0:	00005c0c 	.word	0x00005c0c
    50e4:	00005c0c 	.word	0x00005c0c
    50e8:	00005c0c 	.word	0x00005c0c
    50ec:	00005c10 	.word	0x00005c10

000050f0 <memcpy>:
    50f0:	2300      	movs	r3, #0
    50f2:	b510      	push	{r4, lr}
    50f4:	429a      	cmp	r2, r3
    50f6:	d100      	bne.n	50fa <memcpy+0xa>
    50f8:	bd10      	pop	{r4, pc}
    50fa:	5ccc      	ldrb	r4, [r1, r3]
    50fc:	54c4      	strb	r4, [r0, r3]
    50fe:	3301      	adds	r3, #1
    5100:	e7f8      	b.n	50f4 <memcpy+0x4>

00005102 <memset>:
    5102:	0003      	movs	r3, r0
    5104:	1882      	adds	r2, r0, r2
    5106:	4293      	cmp	r3, r2
    5108:	d100      	bne.n	510c <memset+0xa>
    510a:	4770      	bx	lr
    510c:	7019      	strb	r1, [r3, #0]
    510e:	3301      	adds	r3, #1
    5110:	e7f9      	b.n	5106 <memset+0x4>
	...

00005114 <sniprintf>:
    5114:	b40c      	push	{r2, r3}
    5116:	b530      	push	{r4, r5, lr}
    5118:	4b16      	ldr	r3, [pc, #88]	; (5174 <sniprintf+0x60>)
    511a:	b09d      	sub	sp, #116	; 0x74
    511c:	1e0c      	subs	r4, r1, #0
    511e:	681d      	ldr	r5, [r3, #0]
    5120:	da08      	bge.n	5134 <sniprintf+0x20>
    5122:	238b      	movs	r3, #139	; 0x8b
    5124:	2001      	movs	r0, #1
    5126:	602b      	str	r3, [r5, #0]
    5128:	4240      	negs	r0, r0
    512a:	b01d      	add	sp, #116	; 0x74
    512c:	bc30      	pop	{r4, r5}
    512e:	bc08      	pop	{r3}
    5130:	b002      	add	sp, #8
    5132:	4718      	bx	r3
    5134:	2382      	movs	r3, #130	; 0x82
    5136:	a902      	add	r1, sp, #8
    5138:	009b      	lsls	r3, r3, #2
    513a:	818b      	strh	r3, [r1, #12]
    513c:	2300      	movs	r3, #0
    513e:	9002      	str	r0, [sp, #8]
    5140:	6108      	str	r0, [r1, #16]
    5142:	429c      	cmp	r4, r3
    5144:	d000      	beq.n	5148 <sniprintf+0x34>
    5146:	1e63      	subs	r3, r4, #1
    5148:	608b      	str	r3, [r1, #8]
    514a:	614b      	str	r3, [r1, #20]
    514c:	2301      	movs	r3, #1
    514e:	425b      	negs	r3, r3
    5150:	81cb      	strh	r3, [r1, #14]
    5152:	9a20      	ldr	r2, [sp, #128]	; 0x80
    5154:	ab21      	add	r3, sp, #132	; 0x84
    5156:	0028      	movs	r0, r5
    5158:	9301      	str	r3, [sp, #4]
    515a:	f000 f91f 	bl	539c <_svfiprintf_r>
    515e:	1c43      	adds	r3, r0, #1
    5160:	da01      	bge.n	5166 <sniprintf+0x52>
    5162:	238b      	movs	r3, #139	; 0x8b
    5164:	602b      	str	r3, [r5, #0]
    5166:	2c00      	cmp	r4, #0
    5168:	d0df      	beq.n	512a <sniprintf+0x16>
    516a:	2300      	movs	r3, #0
    516c:	9a02      	ldr	r2, [sp, #8]
    516e:	7013      	strb	r3, [r2, #0]
    5170:	e7db      	b.n	512a <sniprintf+0x16>
    5172:	46c0      	nop			; (mov r8, r8)
    5174:	20000010 	.word	0x20000010

00005178 <strlen>:
    5178:	2300      	movs	r3, #0
    517a:	5cc2      	ldrb	r2, [r0, r3]
    517c:	3301      	adds	r3, #1
    517e:	2a00      	cmp	r2, #0
    5180:	d1fb      	bne.n	517a <strlen+0x2>
    5182:	1e58      	subs	r0, r3, #1
    5184:	4770      	bx	lr
	...

00005188 <_free_r>:
    5188:	b570      	push	{r4, r5, r6, lr}
    518a:	0005      	movs	r5, r0
    518c:	2900      	cmp	r1, #0
    518e:	d010      	beq.n	51b2 <_free_r+0x2a>
    5190:	1f0c      	subs	r4, r1, #4
    5192:	6823      	ldr	r3, [r4, #0]
    5194:	2b00      	cmp	r3, #0
    5196:	da00      	bge.n	519a <_free_r+0x12>
    5198:	18e4      	adds	r4, r4, r3
    519a:	0028      	movs	r0, r5
    519c:	f000 fbb9 	bl	5912 <__malloc_lock>
    51a0:	4a1d      	ldr	r2, [pc, #116]	; (5218 <_free_r+0x90>)
    51a2:	6813      	ldr	r3, [r2, #0]
    51a4:	2b00      	cmp	r3, #0
    51a6:	d105      	bne.n	51b4 <_free_r+0x2c>
    51a8:	6063      	str	r3, [r4, #4]
    51aa:	6014      	str	r4, [r2, #0]
    51ac:	0028      	movs	r0, r5
    51ae:	f000 fbb1 	bl	5914 <__malloc_unlock>
    51b2:	bd70      	pop	{r4, r5, r6, pc}
    51b4:	42a3      	cmp	r3, r4
    51b6:	d909      	bls.n	51cc <_free_r+0x44>
    51b8:	6821      	ldr	r1, [r4, #0]
    51ba:	1860      	adds	r0, r4, r1
    51bc:	4283      	cmp	r3, r0
    51be:	d1f3      	bne.n	51a8 <_free_r+0x20>
    51c0:	6818      	ldr	r0, [r3, #0]
    51c2:	685b      	ldr	r3, [r3, #4]
    51c4:	1841      	adds	r1, r0, r1
    51c6:	6021      	str	r1, [r4, #0]
    51c8:	e7ee      	b.n	51a8 <_free_r+0x20>
    51ca:	0013      	movs	r3, r2
    51cc:	685a      	ldr	r2, [r3, #4]
    51ce:	2a00      	cmp	r2, #0
    51d0:	d001      	beq.n	51d6 <_free_r+0x4e>
    51d2:	42a2      	cmp	r2, r4
    51d4:	d9f9      	bls.n	51ca <_free_r+0x42>
    51d6:	6819      	ldr	r1, [r3, #0]
    51d8:	1858      	adds	r0, r3, r1
    51da:	42a0      	cmp	r0, r4
    51dc:	d10b      	bne.n	51f6 <_free_r+0x6e>
    51de:	6820      	ldr	r0, [r4, #0]
    51e0:	1809      	adds	r1, r1, r0
    51e2:	1858      	adds	r0, r3, r1
    51e4:	6019      	str	r1, [r3, #0]
    51e6:	4282      	cmp	r2, r0
    51e8:	d1e0      	bne.n	51ac <_free_r+0x24>
    51ea:	6810      	ldr	r0, [r2, #0]
    51ec:	6852      	ldr	r2, [r2, #4]
    51ee:	1841      	adds	r1, r0, r1
    51f0:	6019      	str	r1, [r3, #0]
    51f2:	605a      	str	r2, [r3, #4]
    51f4:	e7da      	b.n	51ac <_free_r+0x24>
    51f6:	42a0      	cmp	r0, r4
    51f8:	d902      	bls.n	5200 <_free_r+0x78>
    51fa:	230c      	movs	r3, #12
    51fc:	602b      	str	r3, [r5, #0]
    51fe:	e7d5      	b.n	51ac <_free_r+0x24>
    5200:	6821      	ldr	r1, [r4, #0]
    5202:	1860      	adds	r0, r4, r1
    5204:	4282      	cmp	r2, r0
    5206:	d103      	bne.n	5210 <_free_r+0x88>
    5208:	6810      	ldr	r0, [r2, #0]
    520a:	6852      	ldr	r2, [r2, #4]
    520c:	1841      	adds	r1, r0, r1
    520e:	6021      	str	r1, [r4, #0]
    5210:	6062      	str	r2, [r4, #4]
    5212:	605c      	str	r4, [r3, #4]
    5214:	e7ca      	b.n	51ac <_free_r+0x24>
    5216:	46c0      	nop			; (mov r8, r8)
    5218:	200003d4 	.word	0x200003d4

0000521c <_malloc_r>:
    521c:	2303      	movs	r3, #3
    521e:	b570      	push	{r4, r5, r6, lr}
    5220:	1ccd      	adds	r5, r1, #3
    5222:	439d      	bics	r5, r3
    5224:	3508      	adds	r5, #8
    5226:	0006      	movs	r6, r0
    5228:	2d0c      	cmp	r5, #12
    522a:	d21e      	bcs.n	526a <_malloc_r+0x4e>
    522c:	250c      	movs	r5, #12
    522e:	42a9      	cmp	r1, r5
    5230:	d81d      	bhi.n	526e <_malloc_r+0x52>
    5232:	0030      	movs	r0, r6
    5234:	f000 fb6d 	bl	5912 <__malloc_lock>
    5238:	4a25      	ldr	r2, [pc, #148]	; (52d0 <_malloc_r+0xb4>)
    523a:	6814      	ldr	r4, [r2, #0]
    523c:	0021      	movs	r1, r4
    523e:	2900      	cmp	r1, #0
    5240:	d119      	bne.n	5276 <_malloc_r+0x5a>
    5242:	4c24      	ldr	r4, [pc, #144]	; (52d4 <_malloc_r+0xb8>)
    5244:	6823      	ldr	r3, [r4, #0]
    5246:	2b00      	cmp	r3, #0
    5248:	d103      	bne.n	5252 <_malloc_r+0x36>
    524a:	0030      	movs	r0, r6
    524c:	f000 fb32 	bl	58b4 <_sbrk_r>
    5250:	6020      	str	r0, [r4, #0]
    5252:	0029      	movs	r1, r5
    5254:	0030      	movs	r0, r6
    5256:	f000 fb2d 	bl	58b4 <_sbrk_r>
    525a:	1c43      	adds	r3, r0, #1
    525c:	d12c      	bne.n	52b8 <_malloc_r+0x9c>
    525e:	230c      	movs	r3, #12
    5260:	0030      	movs	r0, r6
    5262:	6033      	str	r3, [r6, #0]
    5264:	f000 fb56 	bl	5914 <__malloc_unlock>
    5268:	e003      	b.n	5272 <_malloc_r+0x56>
    526a:	2d00      	cmp	r5, #0
    526c:	dadf      	bge.n	522e <_malloc_r+0x12>
    526e:	230c      	movs	r3, #12
    5270:	6033      	str	r3, [r6, #0]
    5272:	2000      	movs	r0, #0
    5274:	bd70      	pop	{r4, r5, r6, pc}
    5276:	680b      	ldr	r3, [r1, #0]
    5278:	1b5b      	subs	r3, r3, r5
    527a:	d41a      	bmi.n	52b2 <_malloc_r+0x96>
    527c:	2b0b      	cmp	r3, #11
    527e:	d903      	bls.n	5288 <_malloc_r+0x6c>
    5280:	600b      	str	r3, [r1, #0]
    5282:	18cc      	adds	r4, r1, r3
    5284:	6025      	str	r5, [r4, #0]
    5286:	e003      	b.n	5290 <_malloc_r+0x74>
    5288:	428c      	cmp	r4, r1
    528a:	d10e      	bne.n	52aa <_malloc_r+0x8e>
    528c:	6863      	ldr	r3, [r4, #4]
    528e:	6013      	str	r3, [r2, #0]
    5290:	0030      	movs	r0, r6
    5292:	f000 fb3f 	bl	5914 <__malloc_unlock>
    5296:	0020      	movs	r0, r4
    5298:	2207      	movs	r2, #7
    529a:	300b      	adds	r0, #11
    529c:	1d23      	adds	r3, r4, #4
    529e:	4390      	bics	r0, r2
    52a0:	1ac3      	subs	r3, r0, r3
    52a2:	d0e7      	beq.n	5274 <_malloc_r+0x58>
    52a4:	425a      	negs	r2, r3
    52a6:	50e2      	str	r2, [r4, r3]
    52a8:	e7e4      	b.n	5274 <_malloc_r+0x58>
    52aa:	684b      	ldr	r3, [r1, #4]
    52ac:	6063      	str	r3, [r4, #4]
    52ae:	000c      	movs	r4, r1
    52b0:	e7ee      	b.n	5290 <_malloc_r+0x74>
    52b2:	000c      	movs	r4, r1
    52b4:	6849      	ldr	r1, [r1, #4]
    52b6:	e7c2      	b.n	523e <_malloc_r+0x22>
    52b8:	2303      	movs	r3, #3
    52ba:	1cc4      	adds	r4, r0, #3
    52bc:	439c      	bics	r4, r3
    52be:	42a0      	cmp	r0, r4
    52c0:	d0e0      	beq.n	5284 <_malloc_r+0x68>
    52c2:	1a21      	subs	r1, r4, r0
    52c4:	0030      	movs	r0, r6
    52c6:	f000 faf5 	bl	58b4 <_sbrk_r>
    52ca:	1c43      	adds	r3, r0, #1
    52cc:	d1da      	bne.n	5284 <_malloc_r+0x68>
    52ce:	e7c6      	b.n	525e <_malloc_r+0x42>
    52d0:	200003d4 	.word	0x200003d4
    52d4:	200003d8 	.word	0x200003d8

000052d8 <__ssputs_r>:
    52d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52da:	688e      	ldr	r6, [r1, #8]
    52dc:	b085      	sub	sp, #20
    52de:	0007      	movs	r7, r0
    52e0:	000c      	movs	r4, r1
    52e2:	9203      	str	r2, [sp, #12]
    52e4:	9301      	str	r3, [sp, #4]
    52e6:	429e      	cmp	r6, r3
    52e8:	d839      	bhi.n	535e <__ssputs_r+0x86>
    52ea:	2390      	movs	r3, #144	; 0x90
    52ec:	898a      	ldrh	r2, [r1, #12]
    52ee:	00db      	lsls	r3, r3, #3
    52f0:	421a      	tst	r2, r3
    52f2:	d034      	beq.n	535e <__ssputs_r+0x86>
    52f4:	2503      	movs	r5, #3
    52f6:	6909      	ldr	r1, [r1, #16]
    52f8:	6823      	ldr	r3, [r4, #0]
    52fa:	1a5b      	subs	r3, r3, r1
    52fc:	9302      	str	r3, [sp, #8]
    52fe:	6963      	ldr	r3, [r4, #20]
    5300:	9802      	ldr	r0, [sp, #8]
    5302:	435d      	muls	r5, r3
    5304:	0feb      	lsrs	r3, r5, #31
    5306:	195d      	adds	r5, r3, r5
    5308:	9b01      	ldr	r3, [sp, #4]
    530a:	106d      	asrs	r5, r5, #1
    530c:	3301      	adds	r3, #1
    530e:	181b      	adds	r3, r3, r0
    5310:	42ab      	cmp	r3, r5
    5312:	d900      	bls.n	5316 <__ssputs_r+0x3e>
    5314:	001d      	movs	r5, r3
    5316:	0553      	lsls	r3, r2, #21
    5318:	d532      	bpl.n	5380 <__ssputs_r+0xa8>
    531a:	0029      	movs	r1, r5
    531c:	0038      	movs	r0, r7
    531e:	f7ff ff7d 	bl	521c <_malloc_r>
    5322:	1e06      	subs	r6, r0, #0
    5324:	d109      	bne.n	533a <__ssputs_r+0x62>
    5326:	230c      	movs	r3, #12
    5328:	603b      	str	r3, [r7, #0]
    532a:	2340      	movs	r3, #64	; 0x40
    532c:	2001      	movs	r0, #1
    532e:	89a2      	ldrh	r2, [r4, #12]
    5330:	4240      	negs	r0, r0
    5332:	4313      	orrs	r3, r2
    5334:	81a3      	strh	r3, [r4, #12]
    5336:	b005      	add	sp, #20
    5338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    533a:	9a02      	ldr	r2, [sp, #8]
    533c:	6921      	ldr	r1, [r4, #16]
    533e:	f7ff fed7 	bl	50f0 <memcpy>
    5342:	89a3      	ldrh	r3, [r4, #12]
    5344:	4a14      	ldr	r2, [pc, #80]	; (5398 <__ssputs_r+0xc0>)
    5346:	401a      	ands	r2, r3
    5348:	2380      	movs	r3, #128	; 0x80
    534a:	4313      	orrs	r3, r2
    534c:	81a3      	strh	r3, [r4, #12]
    534e:	9b02      	ldr	r3, [sp, #8]
    5350:	6126      	str	r6, [r4, #16]
    5352:	18f6      	adds	r6, r6, r3
    5354:	6026      	str	r6, [r4, #0]
    5356:	6165      	str	r5, [r4, #20]
    5358:	9e01      	ldr	r6, [sp, #4]
    535a:	1aed      	subs	r5, r5, r3
    535c:	60a5      	str	r5, [r4, #8]
    535e:	9b01      	ldr	r3, [sp, #4]
    5360:	42b3      	cmp	r3, r6
    5362:	d200      	bcs.n	5366 <__ssputs_r+0x8e>
    5364:	001e      	movs	r6, r3
    5366:	0032      	movs	r2, r6
    5368:	9903      	ldr	r1, [sp, #12]
    536a:	6820      	ldr	r0, [r4, #0]
    536c:	f000 fabf 	bl	58ee <memmove>
    5370:	68a3      	ldr	r3, [r4, #8]
    5372:	2000      	movs	r0, #0
    5374:	1b9b      	subs	r3, r3, r6
    5376:	60a3      	str	r3, [r4, #8]
    5378:	6823      	ldr	r3, [r4, #0]
    537a:	199e      	adds	r6, r3, r6
    537c:	6026      	str	r6, [r4, #0]
    537e:	e7da      	b.n	5336 <__ssputs_r+0x5e>
    5380:	002a      	movs	r2, r5
    5382:	0038      	movs	r0, r7
    5384:	f000 fac7 	bl	5916 <_realloc_r>
    5388:	1e06      	subs	r6, r0, #0
    538a:	d1e0      	bne.n	534e <__ssputs_r+0x76>
    538c:	6921      	ldr	r1, [r4, #16]
    538e:	0038      	movs	r0, r7
    5390:	f7ff fefa 	bl	5188 <_free_r>
    5394:	e7c7      	b.n	5326 <__ssputs_r+0x4e>
    5396:	46c0      	nop			; (mov r8, r8)
    5398:	fffffb7f 	.word	0xfffffb7f

0000539c <_svfiprintf_r>:
    539c:	b5f0      	push	{r4, r5, r6, r7, lr}
    539e:	b09f      	sub	sp, #124	; 0x7c
    53a0:	9002      	str	r0, [sp, #8]
    53a2:	9305      	str	r3, [sp, #20]
    53a4:	898b      	ldrh	r3, [r1, #12]
    53a6:	000f      	movs	r7, r1
    53a8:	0016      	movs	r6, r2
    53aa:	061b      	lsls	r3, r3, #24
    53ac:	d511      	bpl.n	53d2 <_svfiprintf_r+0x36>
    53ae:	690b      	ldr	r3, [r1, #16]
    53b0:	2b00      	cmp	r3, #0
    53b2:	d10e      	bne.n	53d2 <_svfiprintf_r+0x36>
    53b4:	2140      	movs	r1, #64	; 0x40
    53b6:	f7ff ff31 	bl	521c <_malloc_r>
    53ba:	6038      	str	r0, [r7, #0]
    53bc:	6138      	str	r0, [r7, #16]
    53be:	2800      	cmp	r0, #0
    53c0:	d105      	bne.n	53ce <_svfiprintf_r+0x32>
    53c2:	230c      	movs	r3, #12
    53c4:	9a02      	ldr	r2, [sp, #8]
    53c6:	3801      	subs	r0, #1
    53c8:	6013      	str	r3, [r2, #0]
    53ca:	b01f      	add	sp, #124	; 0x7c
    53cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53ce:	2340      	movs	r3, #64	; 0x40
    53d0:	617b      	str	r3, [r7, #20]
    53d2:	2300      	movs	r3, #0
    53d4:	ad06      	add	r5, sp, #24
    53d6:	616b      	str	r3, [r5, #20]
    53d8:	3320      	adds	r3, #32
    53da:	766b      	strb	r3, [r5, #25]
    53dc:	3310      	adds	r3, #16
    53de:	76ab      	strb	r3, [r5, #26]
    53e0:	0034      	movs	r4, r6
    53e2:	7823      	ldrb	r3, [r4, #0]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d147      	bne.n	5478 <_svfiprintf_r+0xdc>
    53e8:	1ba3      	subs	r3, r4, r6
    53ea:	9304      	str	r3, [sp, #16]
    53ec:	d00d      	beq.n	540a <_svfiprintf_r+0x6e>
    53ee:	1ba3      	subs	r3, r4, r6
    53f0:	0032      	movs	r2, r6
    53f2:	0039      	movs	r1, r7
    53f4:	9802      	ldr	r0, [sp, #8]
    53f6:	f7ff ff6f 	bl	52d8 <__ssputs_r>
    53fa:	1c43      	adds	r3, r0, #1
    53fc:	d100      	bne.n	5400 <_svfiprintf_r+0x64>
    53fe:	e0b5      	b.n	556c <_svfiprintf_r+0x1d0>
    5400:	696a      	ldr	r2, [r5, #20]
    5402:	9b04      	ldr	r3, [sp, #16]
    5404:	4694      	mov	ip, r2
    5406:	4463      	add	r3, ip
    5408:	616b      	str	r3, [r5, #20]
    540a:	7823      	ldrb	r3, [r4, #0]
    540c:	2b00      	cmp	r3, #0
    540e:	d100      	bne.n	5412 <_svfiprintf_r+0x76>
    5410:	e0ac      	b.n	556c <_svfiprintf_r+0x1d0>
    5412:	2201      	movs	r2, #1
    5414:	2300      	movs	r3, #0
    5416:	4252      	negs	r2, r2
    5418:	606a      	str	r2, [r5, #4]
    541a:	a902      	add	r1, sp, #8
    541c:	3254      	adds	r2, #84	; 0x54
    541e:	1852      	adds	r2, r2, r1
    5420:	3401      	adds	r4, #1
    5422:	602b      	str	r3, [r5, #0]
    5424:	60eb      	str	r3, [r5, #12]
    5426:	60ab      	str	r3, [r5, #8]
    5428:	7013      	strb	r3, [r2, #0]
    542a:	65ab      	str	r3, [r5, #88]	; 0x58
    542c:	4e58      	ldr	r6, [pc, #352]	; (5590 <_svfiprintf_r+0x1f4>)
    542e:	2205      	movs	r2, #5
    5430:	7821      	ldrb	r1, [r4, #0]
    5432:	0030      	movs	r0, r6
    5434:	f000 fa50 	bl	58d8 <memchr>
    5438:	1c62      	adds	r2, r4, #1
    543a:	2800      	cmp	r0, #0
    543c:	d120      	bne.n	5480 <_svfiprintf_r+0xe4>
    543e:	6829      	ldr	r1, [r5, #0]
    5440:	06cb      	lsls	r3, r1, #27
    5442:	d504      	bpl.n	544e <_svfiprintf_r+0xb2>
    5444:	2353      	movs	r3, #83	; 0x53
    5446:	ae02      	add	r6, sp, #8
    5448:	3020      	adds	r0, #32
    544a:	199b      	adds	r3, r3, r6
    544c:	7018      	strb	r0, [r3, #0]
    544e:	070b      	lsls	r3, r1, #28
    5450:	d504      	bpl.n	545c <_svfiprintf_r+0xc0>
    5452:	2353      	movs	r3, #83	; 0x53
    5454:	202b      	movs	r0, #43	; 0x2b
    5456:	ae02      	add	r6, sp, #8
    5458:	199b      	adds	r3, r3, r6
    545a:	7018      	strb	r0, [r3, #0]
    545c:	7823      	ldrb	r3, [r4, #0]
    545e:	2b2a      	cmp	r3, #42	; 0x2a
    5460:	d016      	beq.n	5490 <_svfiprintf_r+0xf4>
    5462:	2000      	movs	r0, #0
    5464:	210a      	movs	r1, #10
    5466:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5468:	7822      	ldrb	r2, [r4, #0]
    546a:	3a30      	subs	r2, #48	; 0x30
    546c:	2a09      	cmp	r2, #9
    546e:	d955      	bls.n	551c <_svfiprintf_r+0x180>
    5470:	2800      	cmp	r0, #0
    5472:	d015      	beq.n	54a0 <_svfiprintf_r+0x104>
    5474:	9309      	str	r3, [sp, #36]	; 0x24
    5476:	e013      	b.n	54a0 <_svfiprintf_r+0x104>
    5478:	2b25      	cmp	r3, #37	; 0x25
    547a:	d0b5      	beq.n	53e8 <_svfiprintf_r+0x4c>
    547c:	3401      	adds	r4, #1
    547e:	e7b0      	b.n	53e2 <_svfiprintf_r+0x46>
    5480:	2301      	movs	r3, #1
    5482:	1b80      	subs	r0, r0, r6
    5484:	4083      	lsls	r3, r0
    5486:	6829      	ldr	r1, [r5, #0]
    5488:	0014      	movs	r4, r2
    548a:	430b      	orrs	r3, r1
    548c:	602b      	str	r3, [r5, #0]
    548e:	e7cd      	b.n	542c <_svfiprintf_r+0x90>
    5490:	9b05      	ldr	r3, [sp, #20]
    5492:	1d18      	adds	r0, r3, #4
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	9005      	str	r0, [sp, #20]
    5498:	2b00      	cmp	r3, #0
    549a:	db39      	blt.n	5510 <_svfiprintf_r+0x174>
    549c:	9309      	str	r3, [sp, #36]	; 0x24
    549e:	0014      	movs	r4, r2
    54a0:	7823      	ldrb	r3, [r4, #0]
    54a2:	2b2e      	cmp	r3, #46	; 0x2e
    54a4:	d10b      	bne.n	54be <_svfiprintf_r+0x122>
    54a6:	7863      	ldrb	r3, [r4, #1]
    54a8:	1c62      	adds	r2, r4, #1
    54aa:	2b2a      	cmp	r3, #42	; 0x2a
    54ac:	d13e      	bne.n	552c <_svfiprintf_r+0x190>
    54ae:	9b05      	ldr	r3, [sp, #20]
    54b0:	3402      	adds	r4, #2
    54b2:	1d1a      	adds	r2, r3, #4
    54b4:	681b      	ldr	r3, [r3, #0]
    54b6:	9205      	str	r2, [sp, #20]
    54b8:	2b00      	cmp	r3, #0
    54ba:	db34      	blt.n	5526 <_svfiprintf_r+0x18a>
    54bc:	9307      	str	r3, [sp, #28]
    54be:	4e35      	ldr	r6, [pc, #212]	; (5594 <_svfiprintf_r+0x1f8>)
    54c0:	7821      	ldrb	r1, [r4, #0]
    54c2:	2203      	movs	r2, #3
    54c4:	0030      	movs	r0, r6
    54c6:	f000 fa07 	bl	58d8 <memchr>
    54ca:	2800      	cmp	r0, #0
    54cc:	d006      	beq.n	54dc <_svfiprintf_r+0x140>
    54ce:	2340      	movs	r3, #64	; 0x40
    54d0:	1b80      	subs	r0, r0, r6
    54d2:	4083      	lsls	r3, r0
    54d4:	682a      	ldr	r2, [r5, #0]
    54d6:	3401      	adds	r4, #1
    54d8:	4313      	orrs	r3, r2
    54da:	602b      	str	r3, [r5, #0]
    54dc:	7821      	ldrb	r1, [r4, #0]
    54de:	2206      	movs	r2, #6
    54e0:	482d      	ldr	r0, [pc, #180]	; (5598 <_svfiprintf_r+0x1fc>)
    54e2:	1c66      	adds	r6, r4, #1
    54e4:	7629      	strb	r1, [r5, #24]
    54e6:	f000 f9f7 	bl	58d8 <memchr>
    54ea:	2800      	cmp	r0, #0
    54ec:	d046      	beq.n	557c <_svfiprintf_r+0x1e0>
    54ee:	4b2b      	ldr	r3, [pc, #172]	; (559c <_svfiprintf_r+0x200>)
    54f0:	2b00      	cmp	r3, #0
    54f2:	d12f      	bne.n	5554 <_svfiprintf_r+0x1b8>
    54f4:	6829      	ldr	r1, [r5, #0]
    54f6:	9b05      	ldr	r3, [sp, #20]
    54f8:	2207      	movs	r2, #7
    54fa:	05c9      	lsls	r1, r1, #23
    54fc:	d528      	bpl.n	5550 <_svfiprintf_r+0x1b4>
    54fe:	189b      	adds	r3, r3, r2
    5500:	4393      	bics	r3, r2
    5502:	3308      	adds	r3, #8
    5504:	9305      	str	r3, [sp, #20]
    5506:	696b      	ldr	r3, [r5, #20]
    5508:	9a03      	ldr	r2, [sp, #12]
    550a:	189b      	adds	r3, r3, r2
    550c:	616b      	str	r3, [r5, #20]
    550e:	e767      	b.n	53e0 <_svfiprintf_r+0x44>
    5510:	425b      	negs	r3, r3
    5512:	60eb      	str	r3, [r5, #12]
    5514:	2302      	movs	r3, #2
    5516:	430b      	orrs	r3, r1
    5518:	602b      	str	r3, [r5, #0]
    551a:	e7c0      	b.n	549e <_svfiprintf_r+0x102>
    551c:	434b      	muls	r3, r1
    551e:	3401      	adds	r4, #1
    5520:	189b      	adds	r3, r3, r2
    5522:	2001      	movs	r0, #1
    5524:	e7a0      	b.n	5468 <_svfiprintf_r+0xcc>
    5526:	2301      	movs	r3, #1
    5528:	425b      	negs	r3, r3
    552a:	e7c7      	b.n	54bc <_svfiprintf_r+0x120>
    552c:	2300      	movs	r3, #0
    552e:	0014      	movs	r4, r2
    5530:	200a      	movs	r0, #10
    5532:	001a      	movs	r2, r3
    5534:	606b      	str	r3, [r5, #4]
    5536:	7821      	ldrb	r1, [r4, #0]
    5538:	3930      	subs	r1, #48	; 0x30
    553a:	2909      	cmp	r1, #9
    553c:	d903      	bls.n	5546 <_svfiprintf_r+0x1aa>
    553e:	2b00      	cmp	r3, #0
    5540:	d0bd      	beq.n	54be <_svfiprintf_r+0x122>
    5542:	9207      	str	r2, [sp, #28]
    5544:	e7bb      	b.n	54be <_svfiprintf_r+0x122>
    5546:	4342      	muls	r2, r0
    5548:	3401      	adds	r4, #1
    554a:	1852      	adds	r2, r2, r1
    554c:	2301      	movs	r3, #1
    554e:	e7f2      	b.n	5536 <_svfiprintf_r+0x19a>
    5550:	3307      	adds	r3, #7
    5552:	e7d5      	b.n	5500 <_svfiprintf_r+0x164>
    5554:	ab05      	add	r3, sp, #20
    5556:	9300      	str	r3, [sp, #0]
    5558:	003a      	movs	r2, r7
    555a:	4b11      	ldr	r3, [pc, #68]	; (55a0 <_svfiprintf_r+0x204>)
    555c:	0029      	movs	r1, r5
    555e:	9802      	ldr	r0, [sp, #8]
    5560:	e000      	b.n	5564 <_svfiprintf_r+0x1c8>
    5562:	bf00      	nop
    5564:	9003      	str	r0, [sp, #12]
    5566:	9b03      	ldr	r3, [sp, #12]
    5568:	3301      	adds	r3, #1
    556a:	d1cc      	bne.n	5506 <_svfiprintf_r+0x16a>
    556c:	89bb      	ldrh	r3, [r7, #12]
    556e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5570:	065b      	lsls	r3, r3, #25
    5572:	d400      	bmi.n	5576 <_svfiprintf_r+0x1da>
    5574:	e729      	b.n	53ca <_svfiprintf_r+0x2e>
    5576:	2001      	movs	r0, #1
    5578:	4240      	negs	r0, r0
    557a:	e726      	b.n	53ca <_svfiprintf_r+0x2e>
    557c:	ab05      	add	r3, sp, #20
    557e:	9300      	str	r3, [sp, #0]
    5580:	003a      	movs	r2, r7
    5582:	4b07      	ldr	r3, [pc, #28]	; (55a0 <_svfiprintf_r+0x204>)
    5584:	0029      	movs	r1, r5
    5586:	9802      	ldr	r0, [sp, #8]
    5588:	f000 f87a 	bl	5680 <_printf_i>
    558c:	e7ea      	b.n	5564 <_svfiprintf_r+0x1c8>
    558e:	46c0      	nop			; (mov r8, r8)
    5590:	00005bcc 	.word	0x00005bcc
    5594:	00005bd2 	.word	0x00005bd2
    5598:	00005bd6 	.word	0x00005bd6
    559c:	00000000 	.word	0x00000000
    55a0:	000052d9 	.word	0x000052d9

000055a4 <_printf_common>:
    55a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55a6:	0015      	movs	r5, r2
    55a8:	9301      	str	r3, [sp, #4]
    55aa:	688a      	ldr	r2, [r1, #8]
    55ac:	690b      	ldr	r3, [r1, #16]
    55ae:	9000      	str	r0, [sp, #0]
    55b0:	000c      	movs	r4, r1
    55b2:	4293      	cmp	r3, r2
    55b4:	da00      	bge.n	55b8 <_printf_common+0x14>
    55b6:	0013      	movs	r3, r2
    55b8:	0022      	movs	r2, r4
    55ba:	602b      	str	r3, [r5, #0]
    55bc:	3243      	adds	r2, #67	; 0x43
    55be:	7812      	ldrb	r2, [r2, #0]
    55c0:	2a00      	cmp	r2, #0
    55c2:	d001      	beq.n	55c8 <_printf_common+0x24>
    55c4:	3301      	adds	r3, #1
    55c6:	602b      	str	r3, [r5, #0]
    55c8:	6823      	ldr	r3, [r4, #0]
    55ca:	069b      	lsls	r3, r3, #26
    55cc:	d502      	bpl.n	55d4 <_printf_common+0x30>
    55ce:	682b      	ldr	r3, [r5, #0]
    55d0:	3302      	adds	r3, #2
    55d2:	602b      	str	r3, [r5, #0]
    55d4:	2706      	movs	r7, #6
    55d6:	6823      	ldr	r3, [r4, #0]
    55d8:	401f      	ands	r7, r3
    55da:	d027      	beq.n	562c <_printf_common+0x88>
    55dc:	0023      	movs	r3, r4
    55de:	3343      	adds	r3, #67	; 0x43
    55e0:	781b      	ldrb	r3, [r3, #0]
    55e2:	1e5a      	subs	r2, r3, #1
    55e4:	4193      	sbcs	r3, r2
    55e6:	6822      	ldr	r2, [r4, #0]
    55e8:	0692      	lsls	r2, r2, #26
    55ea:	d430      	bmi.n	564e <_printf_common+0xaa>
    55ec:	0022      	movs	r2, r4
    55ee:	9901      	ldr	r1, [sp, #4]
    55f0:	3243      	adds	r2, #67	; 0x43
    55f2:	9800      	ldr	r0, [sp, #0]
    55f4:	9e08      	ldr	r6, [sp, #32]
    55f6:	47b0      	blx	r6
    55f8:	1c43      	adds	r3, r0, #1
    55fa:	d025      	beq.n	5648 <_printf_common+0xa4>
    55fc:	2306      	movs	r3, #6
    55fe:	6820      	ldr	r0, [r4, #0]
    5600:	682a      	ldr	r2, [r5, #0]
    5602:	68e1      	ldr	r1, [r4, #12]
    5604:	4003      	ands	r3, r0
    5606:	2500      	movs	r5, #0
    5608:	2b04      	cmp	r3, #4
    560a:	d103      	bne.n	5614 <_printf_common+0x70>
    560c:	1a8d      	subs	r5, r1, r2
    560e:	43eb      	mvns	r3, r5
    5610:	17db      	asrs	r3, r3, #31
    5612:	401d      	ands	r5, r3
    5614:	68a3      	ldr	r3, [r4, #8]
    5616:	6922      	ldr	r2, [r4, #16]
    5618:	4293      	cmp	r3, r2
    561a:	dd01      	ble.n	5620 <_printf_common+0x7c>
    561c:	1a9b      	subs	r3, r3, r2
    561e:	18ed      	adds	r5, r5, r3
    5620:	2700      	movs	r7, #0
    5622:	42bd      	cmp	r5, r7
    5624:	d120      	bne.n	5668 <_printf_common+0xc4>
    5626:	2000      	movs	r0, #0
    5628:	e010      	b.n	564c <_printf_common+0xa8>
    562a:	3701      	adds	r7, #1
    562c:	68e3      	ldr	r3, [r4, #12]
    562e:	682a      	ldr	r2, [r5, #0]
    5630:	1a9b      	subs	r3, r3, r2
    5632:	429f      	cmp	r7, r3
    5634:	dad2      	bge.n	55dc <_printf_common+0x38>
    5636:	0022      	movs	r2, r4
    5638:	2301      	movs	r3, #1
    563a:	3219      	adds	r2, #25
    563c:	9901      	ldr	r1, [sp, #4]
    563e:	9800      	ldr	r0, [sp, #0]
    5640:	9e08      	ldr	r6, [sp, #32]
    5642:	47b0      	blx	r6
    5644:	1c43      	adds	r3, r0, #1
    5646:	d1f0      	bne.n	562a <_printf_common+0x86>
    5648:	2001      	movs	r0, #1
    564a:	4240      	negs	r0, r0
    564c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    564e:	2030      	movs	r0, #48	; 0x30
    5650:	18e1      	adds	r1, r4, r3
    5652:	3143      	adds	r1, #67	; 0x43
    5654:	7008      	strb	r0, [r1, #0]
    5656:	0021      	movs	r1, r4
    5658:	1c5a      	adds	r2, r3, #1
    565a:	3145      	adds	r1, #69	; 0x45
    565c:	7809      	ldrb	r1, [r1, #0]
    565e:	18a2      	adds	r2, r4, r2
    5660:	3243      	adds	r2, #67	; 0x43
    5662:	3302      	adds	r3, #2
    5664:	7011      	strb	r1, [r2, #0]
    5666:	e7c1      	b.n	55ec <_printf_common+0x48>
    5668:	0022      	movs	r2, r4
    566a:	2301      	movs	r3, #1
    566c:	321a      	adds	r2, #26
    566e:	9901      	ldr	r1, [sp, #4]
    5670:	9800      	ldr	r0, [sp, #0]
    5672:	9e08      	ldr	r6, [sp, #32]
    5674:	47b0      	blx	r6
    5676:	1c43      	adds	r3, r0, #1
    5678:	d0e6      	beq.n	5648 <_printf_common+0xa4>
    567a:	3701      	adds	r7, #1
    567c:	e7d1      	b.n	5622 <_printf_common+0x7e>
	...

00005680 <_printf_i>:
    5680:	b5f0      	push	{r4, r5, r6, r7, lr}
    5682:	b08b      	sub	sp, #44	; 0x2c
    5684:	9206      	str	r2, [sp, #24]
    5686:	000a      	movs	r2, r1
    5688:	3243      	adds	r2, #67	; 0x43
    568a:	9307      	str	r3, [sp, #28]
    568c:	9005      	str	r0, [sp, #20]
    568e:	9204      	str	r2, [sp, #16]
    5690:	7e0a      	ldrb	r2, [r1, #24]
    5692:	000c      	movs	r4, r1
    5694:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5696:	2a6e      	cmp	r2, #110	; 0x6e
    5698:	d100      	bne.n	569c <_printf_i+0x1c>
    569a:	e08f      	b.n	57bc <_printf_i+0x13c>
    569c:	d817      	bhi.n	56ce <_printf_i+0x4e>
    569e:	2a63      	cmp	r2, #99	; 0x63
    56a0:	d02c      	beq.n	56fc <_printf_i+0x7c>
    56a2:	d808      	bhi.n	56b6 <_printf_i+0x36>
    56a4:	2a00      	cmp	r2, #0
    56a6:	d100      	bne.n	56aa <_printf_i+0x2a>
    56a8:	e099      	b.n	57de <_printf_i+0x15e>
    56aa:	2a58      	cmp	r2, #88	; 0x58
    56ac:	d054      	beq.n	5758 <_printf_i+0xd8>
    56ae:	0026      	movs	r6, r4
    56b0:	3642      	adds	r6, #66	; 0x42
    56b2:	7032      	strb	r2, [r6, #0]
    56b4:	e029      	b.n	570a <_printf_i+0x8a>
    56b6:	2a64      	cmp	r2, #100	; 0x64
    56b8:	d001      	beq.n	56be <_printf_i+0x3e>
    56ba:	2a69      	cmp	r2, #105	; 0x69
    56bc:	d1f7      	bne.n	56ae <_printf_i+0x2e>
    56be:	6821      	ldr	r1, [r4, #0]
    56c0:	681a      	ldr	r2, [r3, #0]
    56c2:	0608      	lsls	r0, r1, #24
    56c4:	d523      	bpl.n	570e <_printf_i+0x8e>
    56c6:	1d11      	adds	r1, r2, #4
    56c8:	6019      	str	r1, [r3, #0]
    56ca:	6815      	ldr	r5, [r2, #0]
    56cc:	e025      	b.n	571a <_printf_i+0x9a>
    56ce:	2a73      	cmp	r2, #115	; 0x73
    56d0:	d100      	bne.n	56d4 <_printf_i+0x54>
    56d2:	e088      	b.n	57e6 <_printf_i+0x166>
    56d4:	d808      	bhi.n	56e8 <_printf_i+0x68>
    56d6:	2a6f      	cmp	r2, #111	; 0x6f
    56d8:	d029      	beq.n	572e <_printf_i+0xae>
    56da:	2a70      	cmp	r2, #112	; 0x70
    56dc:	d1e7      	bne.n	56ae <_printf_i+0x2e>
    56de:	2220      	movs	r2, #32
    56e0:	6809      	ldr	r1, [r1, #0]
    56e2:	430a      	orrs	r2, r1
    56e4:	6022      	str	r2, [r4, #0]
    56e6:	e003      	b.n	56f0 <_printf_i+0x70>
    56e8:	2a75      	cmp	r2, #117	; 0x75
    56ea:	d020      	beq.n	572e <_printf_i+0xae>
    56ec:	2a78      	cmp	r2, #120	; 0x78
    56ee:	d1de      	bne.n	56ae <_printf_i+0x2e>
    56f0:	0022      	movs	r2, r4
    56f2:	2178      	movs	r1, #120	; 0x78
    56f4:	3245      	adds	r2, #69	; 0x45
    56f6:	7011      	strb	r1, [r2, #0]
    56f8:	4a6c      	ldr	r2, [pc, #432]	; (58ac <_printf_i+0x22c>)
    56fa:	e030      	b.n	575e <_printf_i+0xde>
    56fc:	000e      	movs	r6, r1
    56fe:	681a      	ldr	r2, [r3, #0]
    5700:	3642      	adds	r6, #66	; 0x42
    5702:	1d11      	adds	r1, r2, #4
    5704:	6019      	str	r1, [r3, #0]
    5706:	6813      	ldr	r3, [r2, #0]
    5708:	7033      	strb	r3, [r6, #0]
    570a:	2301      	movs	r3, #1
    570c:	e079      	b.n	5802 <_printf_i+0x182>
    570e:	0649      	lsls	r1, r1, #25
    5710:	d5d9      	bpl.n	56c6 <_printf_i+0x46>
    5712:	1d11      	adds	r1, r2, #4
    5714:	6019      	str	r1, [r3, #0]
    5716:	2300      	movs	r3, #0
    5718:	5ed5      	ldrsh	r5, [r2, r3]
    571a:	2d00      	cmp	r5, #0
    571c:	da03      	bge.n	5726 <_printf_i+0xa6>
    571e:	232d      	movs	r3, #45	; 0x2d
    5720:	9a04      	ldr	r2, [sp, #16]
    5722:	426d      	negs	r5, r5
    5724:	7013      	strb	r3, [r2, #0]
    5726:	4b62      	ldr	r3, [pc, #392]	; (58b0 <_printf_i+0x230>)
    5728:	270a      	movs	r7, #10
    572a:	9303      	str	r3, [sp, #12]
    572c:	e02f      	b.n	578e <_printf_i+0x10e>
    572e:	6820      	ldr	r0, [r4, #0]
    5730:	6819      	ldr	r1, [r3, #0]
    5732:	0605      	lsls	r5, r0, #24
    5734:	d503      	bpl.n	573e <_printf_i+0xbe>
    5736:	1d08      	adds	r0, r1, #4
    5738:	6018      	str	r0, [r3, #0]
    573a:	680d      	ldr	r5, [r1, #0]
    573c:	e005      	b.n	574a <_printf_i+0xca>
    573e:	0640      	lsls	r0, r0, #25
    5740:	d5f9      	bpl.n	5736 <_printf_i+0xb6>
    5742:	680d      	ldr	r5, [r1, #0]
    5744:	1d08      	adds	r0, r1, #4
    5746:	6018      	str	r0, [r3, #0]
    5748:	b2ad      	uxth	r5, r5
    574a:	4b59      	ldr	r3, [pc, #356]	; (58b0 <_printf_i+0x230>)
    574c:	2708      	movs	r7, #8
    574e:	9303      	str	r3, [sp, #12]
    5750:	2a6f      	cmp	r2, #111	; 0x6f
    5752:	d018      	beq.n	5786 <_printf_i+0x106>
    5754:	270a      	movs	r7, #10
    5756:	e016      	b.n	5786 <_printf_i+0x106>
    5758:	3145      	adds	r1, #69	; 0x45
    575a:	700a      	strb	r2, [r1, #0]
    575c:	4a54      	ldr	r2, [pc, #336]	; (58b0 <_printf_i+0x230>)
    575e:	9203      	str	r2, [sp, #12]
    5760:	681a      	ldr	r2, [r3, #0]
    5762:	6821      	ldr	r1, [r4, #0]
    5764:	1d10      	adds	r0, r2, #4
    5766:	6018      	str	r0, [r3, #0]
    5768:	6815      	ldr	r5, [r2, #0]
    576a:	0608      	lsls	r0, r1, #24
    576c:	d522      	bpl.n	57b4 <_printf_i+0x134>
    576e:	07cb      	lsls	r3, r1, #31
    5770:	d502      	bpl.n	5778 <_printf_i+0xf8>
    5772:	2320      	movs	r3, #32
    5774:	4319      	orrs	r1, r3
    5776:	6021      	str	r1, [r4, #0]
    5778:	2710      	movs	r7, #16
    577a:	2d00      	cmp	r5, #0
    577c:	d103      	bne.n	5786 <_printf_i+0x106>
    577e:	2320      	movs	r3, #32
    5780:	6822      	ldr	r2, [r4, #0]
    5782:	439a      	bics	r2, r3
    5784:	6022      	str	r2, [r4, #0]
    5786:	0023      	movs	r3, r4
    5788:	2200      	movs	r2, #0
    578a:	3343      	adds	r3, #67	; 0x43
    578c:	701a      	strb	r2, [r3, #0]
    578e:	6863      	ldr	r3, [r4, #4]
    5790:	60a3      	str	r3, [r4, #8]
    5792:	2b00      	cmp	r3, #0
    5794:	db5c      	blt.n	5850 <_printf_i+0x1d0>
    5796:	2204      	movs	r2, #4
    5798:	6821      	ldr	r1, [r4, #0]
    579a:	4391      	bics	r1, r2
    579c:	6021      	str	r1, [r4, #0]
    579e:	2d00      	cmp	r5, #0
    57a0:	d158      	bne.n	5854 <_printf_i+0x1d4>
    57a2:	9e04      	ldr	r6, [sp, #16]
    57a4:	2b00      	cmp	r3, #0
    57a6:	d064      	beq.n	5872 <_printf_i+0x1f2>
    57a8:	0026      	movs	r6, r4
    57aa:	9b03      	ldr	r3, [sp, #12]
    57ac:	3642      	adds	r6, #66	; 0x42
    57ae:	781b      	ldrb	r3, [r3, #0]
    57b0:	7033      	strb	r3, [r6, #0]
    57b2:	e05e      	b.n	5872 <_printf_i+0x1f2>
    57b4:	0648      	lsls	r0, r1, #25
    57b6:	d5da      	bpl.n	576e <_printf_i+0xee>
    57b8:	b2ad      	uxth	r5, r5
    57ba:	e7d8      	b.n	576e <_printf_i+0xee>
    57bc:	6809      	ldr	r1, [r1, #0]
    57be:	681a      	ldr	r2, [r3, #0]
    57c0:	0608      	lsls	r0, r1, #24
    57c2:	d505      	bpl.n	57d0 <_printf_i+0x150>
    57c4:	1d11      	adds	r1, r2, #4
    57c6:	6019      	str	r1, [r3, #0]
    57c8:	6813      	ldr	r3, [r2, #0]
    57ca:	6962      	ldr	r2, [r4, #20]
    57cc:	601a      	str	r2, [r3, #0]
    57ce:	e006      	b.n	57de <_printf_i+0x15e>
    57d0:	0649      	lsls	r1, r1, #25
    57d2:	d5f7      	bpl.n	57c4 <_printf_i+0x144>
    57d4:	1d11      	adds	r1, r2, #4
    57d6:	6019      	str	r1, [r3, #0]
    57d8:	6813      	ldr	r3, [r2, #0]
    57da:	8aa2      	ldrh	r2, [r4, #20]
    57dc:	801a      	strh	r2, [r3, #0]
    57de:	2300      	movs	r3, #0
    57e0:	9e04      	ldr	r6, [sp, #16]
    57e2:	6123      	str	r3, [r4, #16]
    57e4:	e054      	b.n	5890 <_printf_i+0x210>
    57e6:	681a      	ldr	r2, [r3, #0]
    57e8:	1d11      	adds	r1, r2, #4
    57ea:	6019      	str	r1, [r3, #0]
    57ec:	6816      	ldr	r6, [r2, #0]
    57ee:	2100      	movs	r1, #0
    57f0:	6862      	ldr	r2, [r4, #4]
    57f2:	0030      	movs	r0, r6
    57f4:	f000 f870 	bl	58d8 <memchr>
    57f8:	2800      	cmp	r0, #0
    57fa:	d001      	beq.n	5800 <_printf_i+0x180>
    57fc:	1b80      	subs	r0, r0, r6
    57fe:	6060      	str	r0, [r4, #4]
    5800:	6863      	ldr	r3, [r4, #4]
    5802:	6123      	str	r3, [r4, #16]
    5804:	2300      	movs	r3, #0
    5806:	9a04      	ldr	r2, [sp, #16]
    5808:	7013      	strb	r3, [r2, #0]
    580a:	e041      	b.n	5890 <_printf_i+0x210>
    580c:	6923      	ldr	r3, [r4, #16]
    580e:	0032      	movs	r2, r6
    5810:	9906      	ldr	r1, [sp, #24]
    5812:	9805      	ldr	r0, [sp, #20]
    5814:	9d07      	ldr	r5, [sp, #28]
    5816:	47a8      	blx	r5
    5818:	1c43      	adds	r3, r0, #1
    581a:	d043      	beq.n	58a4 <_printf_i+0x224>
    581c:	6823      	ldr	r3, [r4, #0]
    581e:	2500      	movs	r5, #0
    5820:	079b      	lsls	r3, r3, #30
    5822:	d40f      	bmi.n	5844 <_printf_i+0x1c4>
    5824:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5826:	68e0      	ldr	r0, [r4, #12]
    5828:	4298      	cmp	r0, r3
    582a:	da3d      	bge.n	58a8 <_printf_i+0x228>
    582c:	0018      	movs	r0, r3
    582e:	e03b      	b.n	58a8 <_printf_i+0x228>
    5830:	0022      	movs	r2, r4
    5832:	2301      	movs	r3, #1
    5834:	3219      	adds	r2, #25
    5836:	9906      	ldr	r1, [sp, #24]
    5838:	9805      	ldr	r0, [sp, #20]
    583a:	9e07      	ldr	r6, [sp, #28]
    583c:	47b0      	blx	r6
    583e:	1c43      	adds	r3, r0, #1
    5840:	d030      	beq.n	58a4 <_printf_i+0x224>
    5842:	3501      	adds	r5, #1
    5844:	68e3      	ldr	r3, [r4, #12]
    5846:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5848:	1a9b      	subs	r3, r3, r2
    584a:	429d      	cmp	r5, r3
    584c:	dbf0      	blt.n	5830 <_printf_i+0x1b0>
    584e:	e7e9      	b.n	5824 <_printf_i+0x1a4>
    5850:	2d00      	cmp	r5, #0
    5852:	d0a9      	beq.n	57a8 <_printf_i+0x128>
    5854:	9e04      	ldr	r6, [sp, #16]
    5856:	0028      	movs	r0, r5
    5858:	0039      	movs	r1, r7
    585a:	f7ff fbf5 	bl	5048 <__aeabi_uidivmod>
    585e:	9b03      	ldr	r3, [sp, #12]
    5860:	3e01      	subs	r6, #1
    5862:	5c5b      	ldrb	r3, [r3, r1]
    5864:	0028      	movs	r0, r5
    5866:	7033      	strb	r3, [r6, #0]
    5868:	0039      	movs	r1, r7
    586a:	f7ff fb67 	bl	4f3c <__udivsi3>
    586e:	1e05      	subs	r5, r0, #0
    5870:	d1f1      	bne.n	5856 <_printf_i+0x1d6>
    5872:	2f08      	cmp	r7, #8
    5874:	d109      	bne.n	588a <_printf_i+0x20a>
    5876:	6823      	ldr	r3, [r4, #0]
    5878:	07db      	lsls	r3, r3, #31
    587a:	d506      	bpl.n	588a <_printf_i+0x20a>
    587c:	6863      	ldr	r3, [r4, #4]
    587e:	6922      	ldr	r2, [r4, #16]
    5880:	4293      	cmp	r3, r2
    5882:	dc02      	bgt.n	588a <_printf_i+0x20a>
    5884:	2330      	movs	r3, #48	; 0x30
    5886:	3e01      	subs	r6, #1
    5888:	7033      	strb	r3, [r6, #0]
    588a:	9b04      	ldr	r3, [sp, #16]
    588c:	1b9b      	subs	r3, r3, r6
    588e:	6123      	str	r3, [r4, #16]
    5890:	9b07      	ldr	r3, [sp, #28]
    5892:	aa09      	add	r2, sp, #36	; 0x24
    5894:	9300      	str	r3, [sp, #0]
    5896:	0021      	movs	r1, r4
    5898:	9b06      	ldr	r3, [sp, #24]
    589a:	9805      	ldr	r0, [sp, #20]
    589c:	f7ff fe82 	bl	55a4 <_printf_common>
    58a0:	1c43      	adds	r3, r0, #1
    58a2:	d1b3      	bne.n	580c <_printf_i+0x18c>
    58a4:	2001      	movs	r0, #1
    58a6:	4240      	negs	r0, r0
    58a8:	b00b      	add	sp, #44	; 0x2c
    58aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58ac:	00005bee 	.word	0x00005bee
    58b0:	00005bdd 	.word	0x00005bdd

000058b4 <_sbrk_r>:
    58b4:	2300      	movs	r3, #0
    58b6:	b570      	push	{r4, r5, r6, lr}
    58b8:	4c06      	ldr	r4, [pc, #24]	; (58d4 <_sbrk_r+0x20>)
    58ba:	0005      	movs	r5, r0
    58bc:	0008      	movs	r0, r1
    58be:	6023      	str	r3, [r4, #0]
    58c0:	f7ff f942 	bl	4b48 <_sbrk>
    58c4:	1c43      	adds	r3, r0, #1
    58c6:	d103      	bne.n	58d0 <_sbrk_r+0x1c>
    58c8:	6823      	ldr	r3, [r4, #0]
    58ca:	2b00      	cmp	r3, #0
    58cc:	d000      	beq.n	58d0 <_sbrk_r+0x1c>
    58ce:	602b      	str	r3, [r5, #0]
    58d0:	bd70      	pop	{r4, r5, r6, pc}
    58d2:	46c0      	nop			; (mov r8, r8)
    58d4:	20000a20 	.word	0x20000a20

000058d8 <memchr>:
    58d8:	b2c9      	uxtb	r1, r1
    58da:	1882      	adds	r2, r0, r2
    58dc:	4290      	cmp	r0, r2
    58de:	d101      	bne.n	58e4 <memchr+0xc>
    58e0:	2000      	movs	r0, #0
    58e2:	4770      	bx	lr
    58e4:	7803      	ldrb	r3, [r0, #0]
    58e6:	428b      	cmp	r3, r1
    58e8:	d0fb      	beq.n	58e2 <memchr+0xa>
    58ea:	3001      	adds	r0, #1
    58ec:	e7f6      	b.n	58dc <memchr+0x4>

000058ee <memmove>:
    58ee:	b510      	push	{r4, lr}
    58f0:	4288      	cmp	r0, r1
    58f2:	d902      	bls.n	58fa <memmove+0xc>
    58f4:	188b      	adds	r3, r1, r2
    58f6:	4298      	cmp	r0, r3
    58f8:	d308      	bcc.n	590c <memmove+0x1e>
    58fa:	2300      	movs	r3, #0
    58fc:	429a      	cmp	r2, r3
    58fe:	d007      	beq.n	5910 <memmove+0x22>
    5900:	5ccc      	ldrb	r4, [r1, r3]
    5902:	54c4      	strb	r4, [r0, r3]
    5904:	3301      	adds	r3, #1
    5906:	e7f9      	b.n	58fc <memmove+0xe>
    5908:	5c8b      	ldrb	r3, [r1, r2]
    590a:	5483      	strb	r3, [r0, r2]
    590c:	3a01      	subs	r2, #1
    590e:	d2fb      	bcs.n	5908 <memmove+0x1a>
    5910:	bd10      	pop	{r4, pc}

00005912 <__malloc_lock>:
    5912:	4770      	bx	lr

00005914 <__malloc_unlock>:
    5914:	4770      	bx	lr

00005916 <_realloc_r>:
    5916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5918:	0007      	movs	r7, r0
    591a:	000d      	movs	r5, r1
    591c:	0016      	movs	r6, r2
    591e:	2900      	cmp	r1, #0
    5920:	d105      	bne.n	592e <_realloc_r+0x18>
    5922:	0011      	movs	r1, r2
    5924:	f7ff fc7a 	bl	521c <_malloc_r>
    5928:	0004      	movs	r4, r0
    592a:	0020      	movs	r0, r4
    592c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    592e:	2a00      	cmp	r2, #0
    5930:	d103      	bne.n	593a <_realloc_r+0x24>
    5932:	f7ff fc29 	bl	5188 <_free_r>
    5936:	0034      	movs	r4, r6
    5938:	e7f7      	b.n	592a <_realloc_r+0x14>
    593a:	f000 f812 	bl	5962 <_malloc_usable_size_r>
    593e:	002c      	movs	r4, r5
    5940:	4286      	cmp	r6, r0
    5942:	d9f2      	bls.n	592a <_realloc_r+0x14>
    5944:	0031      	movs	r1, r6
    5946:	0038      	movs	r0, r7
    5948:	f7ff fc68 	bl	521c <_malloc_r>
    594c:	1e04      	subs	r4, r0, #0
    594e:	d0ec      	beq.n	592a <_realloc_r+0x14>
    5950:	0029      	movs	r1, r5
    5952:	0032      	movs	r2, r6
    5954:	f7ff fbcc 	bl	50f0 <memcpy>
    5958:	0029      	movs	r1, r5
    595a:	0038      	movs	r0, r7
    595c:	f7ff fc14 	bl	5188 <_free_r>
    5960:	e7e3      	b.n	592a <_realloc_r+0x14>

00005962 <_malloc_usable_size_r>:
    5962:	1f0b      	subs	r3, r1, #4
    5964:	681b      	ldr	r3, [r3, #0]
    5966:	1f18      	subs	r0, r3, #4
    5968:	2b00      	cmp	r3, #0
    596a:	da01      	bge.n	5970 <_malloc_usable_size_r+0xe>
    596c:	580b      	ldr	r3, [r1, r0]
    596e:	18c0      	adds	r0, r0, r3
    5970:	4770      	bx	lr
    5972:	0000      	movs	r0, r0
    5974:	42000800 	.word	0x42000800
    5978:	42000c00 	.word	0x42000c00
    597c:	42001000 	.word	0x42001000
    5980:	42001400 	.word	0x42001400
    5984:	42001800 	.word	0x42001800
    5988:	42001c00 	.word	0x42001c00
    598c:	484d3732 	.word	0x484d3732
    5990:	0000007a 	.word	0x0000007a
    5994:	4d393631 	.word	0x4d393631
    5998:	00007a48 	.word	0x00007a48
    599c:	4d353139 	.word	0x4d353139
    59a0:	00007a48 	.word	0x00007a48
    59a4:	47342e32 	.word	0x47342e32
    59a8:	00007a48 	.word	0x00007a48
    59ac:	00004264 	.word	0x00004264
    59b0:	65747441 	.word	0x65747441
    59b4:	7461756e 	.word	0x7461756e
    59b8:	006e6f69 	.word	0x006e6f69
    59bc:	61656c50 	.word	0x61656c50
    59c0:	74206573 	.word	0x74206573
    59c4:	6f207061 	.word	0x6f207061
    59c8:	6874206e 	.word	0x6874206e
    59cc:	6f642065 	.word	0x6f642065
    59d0:	00000074 	.word	0x00000074
    59d4:	61422020 	.word	0x61422020
    59d8:	20206b63 	.word	0x20206b63
    59dc:	00000000 	.word	0x00000000
    59e0:	00333231 	.word	0x00333231
    59e4:	00363534 	.word	0x00363534
    59e8:	00393837 	.word	0x00393837
    59ec:	00000030 	.word	0x00000030
    59f0:	00002d3c 	.word	0x00002d3c
    59f4:	00524c43 	.word	0x00524c43
    59f8:	00004b4f 	.word	0x00004b4f
    59fc:	64323025 	.word	0x64323025
    5a00:	3025202e 	.word	0x3025202e
    5a04:	253a6432 	.word	0x253a6432
    5a08:	3a643230 	.word	0x3a643230
    5a0c:	64323025 	.word	0x64323025
    5a10:	25202020 	.word	0x25202020
    5a14:	2f643230 	.word	0x2f643230
    5a18:	64323025 	.word	0x64323025
    5a1c:	3430252f 	.word	0x3430252f
    5a20:	20202064 	.word	0x20202064
    5a24:	20202020 	.word	0x20202020
    5a28:	20202020 	.word	0x20202020
    5a2c:	20202020 	.word	0x20202020
    5a30:	30252020 	.word	0x30252020
    5a34:	20206433 	.word	0x20206433
    5a38:	20202020 	.word	0x20202020
    5a3c:	20202020 	.word	0x20202020
    5a40:	20202020 	.word	0x20202020
    5a44:	20202020 	.word	0x20202020
    5a48:	20202020 	.word	0x20202020
    5a4c:	33302520 	.word	0x33302520
    5a50:	20202064 	.word	0x20202064
    5a54:	20202020 	.word	0x20202020
    5a58:	20202020 	.word	0x20202020
    5a5c:	20202020 	.word	0x20202020
    5a60:	20202020 	.word	0x20202020
    5a64:	25202020 	.word	0x25202020
    5a68:	00643330 	.word	0x00643330
    5a6c:	74736948 	.word	0x74736948
    5a70:	0079726f 	.word	0x0079726f
    5a74:	64323025 	.word	0x64323025
    5a78:	3230253a 	.word	0x3230253a
    5a7c:	30253a64 	.word	0x30253a64
    5a80:	00006432 	.word	0x00006432
    5a84:	64323025 	.word	0x64323025
    5a88:	3230252f 	.word	0x3230252f
    5a8c:	30252f64 	.word	0x30252f64
    5a90:	00006434 	.word	0x00006434
    5a94:	49535352 	.word	0x49535352
    5a98:	6e695b20 	.word	0x6e695b20
    5a9c:	69726574 	.word	0x69726574
    5aa0:	005d726f 	.word	0x005d726f
    5aa4:	65746e45 	.word	0x65746e45
    5aa8:	61442072 	.word	0x61442072
    5aac:	00006574 	.word	0x00006574
    5ab0:	642f6d6d 	.word	0x642f6d6d
    5ab4:	79792f64 	.word	0x79792f64
    5ab8:	00007979 	.word	0x00007979
    5abc:	65746e45 	.word	0x65746e45
    5ac0:	69542072 	.word	0x69542072
    5ac4:	0000656d 	.word	0x0000656d
    5ac8:	6d3a6868 	.word	0x6d3a6868
    5acc:	73733a6d 	.word	0x73733a6d
    5ad0:	20202020 	.word	0x20202020
    5ad4:	68343228 	.word	0x68343228
    5ad8:	726f6620 	.word	0x726f6620
    5adc:	2974616d 	.word	0x2974616d
    5ae0:	00000000 	.word	0x00000000
    5ae4:	75736956 	.word	0x75736956
    5ae8:	003a6c61 	.word	0x003a6c61
    5aec:	00736559 	.word	0x00736559
    5af0:	00006f4e 	.word	0x00006f4e
    5af4:	6e756f53 	.word	0x6e756f53
    5af8:	00203a64 	.word	0x00203a64
    5afc:	61432020 	.word	0x61432020
    5b00:	7262696c 	.word	0x7262696c
    5b04:	20657461 	.word	0x20657461
    5b08:	65726353 	.word	0x65726353
    5b0c:	20206e65 	.word	0x20206e65
    5b10:	00000000 	.word	0x00000000
    5b14:	65532020 	.word	0x65532020
    5b18:	61442074 	.word	0x61442074
    5b1c:	20206574 	.word	0x20206574
    5b20:	00000000 	.word	0x00000000
    5b24:	65532020 	.word	0x65532020
    5b28:	69542074 	.word	0x69542074
    5b2c:	2020656d 	.word	0x2020656d
    5b30:	00000000 	.word	0x00000000
    5b34:	74746553 	.word	0x74746553
    5b38:	73676e69 	.word	0x73676e69
    5b3c:	00000000 	.word	0x00000000
    5b40:	0c0b0a09 	.word	0x0c0b0a09
    5b44:	00000e0d 	.word	0x00000e0d
    5b48:	000043c0 	.word	0x000043c0
    5b4c:	0000441c 	.word	0x0000441c
    5b50:	0000441c 	.word	0x0000441c
    5b54:	000043ba 	.word	0x000043ba
    5b58:	000043ba 	.word	0x000043ba
    5b5c:	000043d4 	.word	0x000043d4
    5b60:	000043c6 	.word	0x000043c6
    5b64:	000043da 	.word	0x000043da
    5b68:	0000440c 	.word	0x0000440c
    5b6c:	0000450c 	.word	0x0000450c
    5b70:	0000457a 	.word	0x0000457a
    5b74:	0000457a 	.word	0x0000457a
    5b78:	000044ec 	.word	0x000044ec
    5b7c:	000044fe 	.word	0x000044fe
    5b80:	0000451c 	.word	0x0000451c
    5b84:	000044f0 	.word	0x000044f0
    5b88:	0000452c 	.word	0x0000452c
    5b8c:	00004568 	.word	0x00004568
    5b90:	281e140a 	.word	0x281e140a
    5b94:	74412020 	.word	0x74412020
    5b98:	756e6574 	.word	0x756e6574
    5b9c:	6f697461 	.word	0x6f697461
    5ba0:	0020206e 	.word	0x0020206e
    5ba4:	69482020 	.word	0x69482020
    5ba8:	726f7473 	.word	0x726f7473
    5bac:	00202079 	.word	0x00202079
    5bb0:	53522020 	.word	0x53522020
    5bb4:	20204953 	.word	0x20204953
    5bb8:	00000000 	.word	0x00000000
    5bbc:	65532020 	.word	0x65532020
    5bc0:	6e697474 	.word	0x6e697474
    5bc4:	20207367 	.word	0x20207367
    5bc8:	00000000 	.word	0x00000000
    5bcc:	2b302d23 	.word	0x2b302d23
    5bd0:	6c680020 	.word	0x6c680020
    5bd4:	6665004c 	.word	0x6665004c
    5bd8:	47464567 	.word	0x47464567
    5bdc:	00          	.byte	0x00
    5bdd:	30          	.byte	0x30
    5bde:	3231      	.short	0x3231
    5be0:	36353433 	.word	0x36353433
    5be4:	41393837 	.word	0x41393837
    5be8:	45444342 	.word	0x45444342
    5bec:	31300046 	.word	0x31300046
    5bf0:	35343332 	.word	0x35343332
    5bf4:	39383736 	.word	0x39383736
    5bf8:	64636261 	.word	0x64636261
    5bfc:	00006665 	.word	0x00006665

00005c00 <_init>:
    5c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c02:	46c0      	nop			; (mov r8, r8)
    5c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5c06:	bc08      	pop	{r3}
    5c08:	469e      	mov	lr, r3
    5c0a:	4770      	bx	lr

00005c0c <__init_array_start>:
    5c0c:	000000dd 	.word	0x000000dd

00005c10 <_fini>:
    5c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5c16:	bc08      	pop	{r3}
    5c18:	469e      	mov	lr, r3
    5c1a:	4770      	bx	lr

00005c1c <__fini_array_start>:
    5c1c:	000000b5 	.word	0x000000b5
