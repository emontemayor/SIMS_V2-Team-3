
BACnet_MSTP_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b08  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00004b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009cc  20000074  00004b7c  00020074  2**2
                  ALLOC
  3 .stack        00002000  20000a40  00005548  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005c926  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007902  00000000  00000000  0007ca1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000fb2c  00000000  00000000  0008431d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000fb0  00000000  00000000  00093e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001580  00000000  00000000  00094df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021a12  00000000  00000000  00096379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ca30  00000000  00000000  000b7d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009540d  00000000  00000000  000d47bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d14  00000000  00000000  00169bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *
 * @brief  Updates the SystemCoreClock with current core Clock
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
       0:	40 2a 00 20 45 3a 00 00 41 3a 00 00 41 3a 00 00     @*. E:..A:..A:..
	...
      2c:	41 3a 00 00 00 00 00 00 00 00 00 00 41 3a 00 00     A:..........A:..
      3c:	e9 28 00 00 41 3a 00 00 41 3a 00 00 c9 2b 00 00     .(..A:..A:...+..
      4c:	41 3a 00 00 a1 02 00 00 41 3a 00 00 41 3a 00 00     A:......A:..A:..
      5c:	41 3a 00 00 41 3a 00 00 51 32 00 00 61 32 00 00     A:..A:..Q2..a2..
      6c:	71 32 00 00 81 32 00 00 91 32 00 00 a1 32 00 00     q2...2...2...2..
      7c:	41 3a 00 00 41 3a 00 00 41 3a 00 00 49 2c 00 00     A:..A:..A:..I,..
      8c:	59 2c 00 00 69 2c 00 00 79 2c 00 00 89 2c 00 00     Y,..i,..y,...,..
      9c:	65 02 00 00 41 3a 00 00 41 3a 00 00 41 3a 00 00     e...A:..A:..A:..
      ac:	41 3a 00 00 00 00 00 00                             A:......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00004b08 	.word	0x00004b08

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00004b08 	.word	0x00004b08
     10c:	00004b08 	.word	0x00004b08
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00003775 	.word	0x00003775
     140:	00003f2d 	.word	0x00003f2d
     144:	20000000 	.word	0x20000000
     148:	20000004 	.word	0x20000004
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     150:	e000      	b.n	154 <delay_cycles_ms+0x4>
{
     152:	0010      	movs	r0, r2
	while (n--) {
     154:	1e42      	subs	r2, r0, #1
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     15a:	4b07      	ldr	r3, [pc, #28]	; (178 <delay_cycles_ms+0x28>)
     15c:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15e:	2b00      	cmp	r3, #0
     160:	d0f7      	beq.n	152 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     162:	4906      	ldr	r1, [pc, #24]	; (17c <delay_cycles_ms+0x2c>)
     164:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     166:	2300      	movs	r3, #0
     168:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <delay_cycles_ms+0x2c>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	03db      	lsls	r3, r3, #15
     170:	d5fb      	bpl.n	16a <delay_cycles_ms+0x1a>
     172:	e7ee      	b.n	152 <delay_cycles_ms+0x2>
	}
}
     174:	4770      	bx	lr
     176:	46c0      	nop			; (mov r8, r8)
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     180:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     182:	0080      	lsls	r0, r0, #2
     184:	4b36      	ldr	r3, [pc, #216]	; (260 <_adc_interrupt_handler+0xe0>)
     186:	58c5      	ldr	r5, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     188:	682b      	ldr	r3, [r5, #0]
     18a:	7e1a      	ldrb	r2, [r3, #24]
     18c:	7ddc      	ldrb	r4, [r3, #23]
     18e:	4014      	ands	r4, r2

	if (flags & ADC_INTFLAG_RESRDY) {
     190:	07e2      	lsls	r2, r4, #31
     192:	d416      	bmi.n	1c2 <_adc_interrupt_handler+0x42>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     194:	0763      	lsls	r3, r4, #29
     196:	d508      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     198:	2304      	movs	r3, #4
     19a:	682a      	ldr	r2, [r5, #0]
     19c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     19e:	7eeb      	ldrb	r3, [r5, #27]
     1a0:	079b      	lsls	r3, r3, #30
     1a2:	d502      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     1a4:	7eab      	ldrb	r3, [r5, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     1a6:	079b      	lsls	r3, r3, #30
     1a8:	d452      	bmi.n	250 <_adc_interrupt_handler+0xd0>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     1aa:	07a3      	lsls	r3, r4, #30
     1ac:	d508      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     1ae:	2302      	movs	r3, #2
     1b0:	682a      	ldr	r2, [r5, #0]
     1b2:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1b4:	7eeb      	ldrb	r3, [r5, #27]
     1b6:	075b      	lsls	r3, r3, #29
     1b8:	d502      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     1ba:	7eab      	ldrb	r3, [r5, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1bc:	075b      	lsls	r3, r3, #29
     1be:	d44b      	bmi.n	258 <_adc_interrupt_handler+0xd8>
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     1c0:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1c2:	2201      	movs	r2, #1
     1c4:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1c6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1c8:	7e53      	ldrb	r3, [r2, #25]
     1ca:	b25b      	sxtb	r3, r3
     1cc:	2b00      	cmp	r3, #0
     1ce:	db27      	blt.n	220 <_adc_interrupt_handler+0xa0>
		return true;
	}

	return false;
     1d0:	2100      	movs	r1, #0
		while (adc_is_syncing(module)) {
     1d2:	2900      	cmp	r1, #0
     1d4:	d1f7      	bne.n	1c6 <_adc_interrupt_handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     1d6:	6968      	ldr	r0, [r5, #20]
     1d8:	1c83      	adds	r3, r0, #2
     1da:	616b      	str	r3, [r5, #20]
     1dc:	8b53      	ldrh	r3, [r2, #26]
     1de:	b29b      	uxth	r3, r3
     1e0:	8003      	strh	r3, [r0, #0]
		if (--module->remaining_conversions > 0) {
     1e2:	8b2b      	ldrh	r3, [r5, #24]
     1e4:	3b01      	subs	r3, #1
     1e6:	b29b      	uxth	r3, r3
     1e8:	832b      	strh	r3, [r5, #24]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d01e      	beq.n	22c <_adc_interrupt_handler+0xac>
			if (module->software_trigger == true) {
     1ee:	7f6b      	ldrb	r3, [r5, #29]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d0cf      	beq.n	194 <_adc_interrupt_handler+0x14>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     1f4:	682e      	ldr	r6, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1f6:	7e72      	ldrb	r2, [r6, #25]
     1f8:	b252      	sxtb	r2, r2
     1fa:	2a00      	cmp	r2, #0
     1fc:	db12      	blt.n	224 <_adc_interrupt_handler+0xa4>
	return false;
     1fe:	0008      	movs	r0, r1

	while (adc_is_syncing(module_inst)) {
     200:	2800      	cmp	r0, #0
     202:	d1f8      	bne.n	1f6 <_adc_interrupt_handler+0x76>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     204:	7b32      	ldrb	r2, [r6, #12]
     206:	2102      	movs	r1, #2
     208:	430a      	orrs	r2, r1
     20a:	b2d2      	uxtb	r2, r2
     20c:	7332      	strb	r2, [r6, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     20e:	682a      	ldr	r2, [r5, #0]
     210:	7e52      	ldrb	r2, [r2, #25]
     212:	b252      	sxtb	r2, r2
     214:	2a00      	cmp	r2, #0
     216:	db07      	blt.n	228 <_adc_interrupt_handler+0xa8>
	return false;
     218:	0002      	movs	r2, r0

	while (adc_is_syncing(module_inst)) {
     21a:	2a00      	cmp	r2, #0
     21c:	d1f7      	bne.n	20e <_adc_interrupt_handler+0x8e>
     21e:	e7b9      	b.n	194 <_adc_interrupt_handler+0x14>
		return true;
     220:	2101      	movs	r1, #1
     222:	e7d6      	b.n	1d2 <_adc_interrupt_handler+0x52>
     224:	0018      	movs	r0, r3
     226:	e7eb      	b.n	200 <_adc_interrupt_handler+0x80>
     228:	001a      	movs	r2, r3
     22a:	e7f6      	b.n	21a <_adc_interrupt_handler+0x9a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     22c:	2301      	movs	r3, #1
     22e:	682a      	ldr	r2, [r5, #0]
     230:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     232:	7f2b      	ldrb	r3, [r5, #28]
     234:	2b05      	cmp	r3, #5
     236:	d1ad      	bne.n	194 <_adc_interrupt_handler+0x14>
				module->job_status = STATUS_OK;
     238:	2300      	movs	r3, #0
     23a:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     23c:	7eeb      	ldrb	r3, [r5, #27]
     23e:	07db      	lsls	r3, r3, #31
     240:	d5a8      	bpl.n	194 <_adc_interrupt_handler+0x14>
					(module->registered_callback_mask &
     242:	7eab      	ldrb	r3, [r5, #26]
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     244:	07db      	lsls	r3, r3, #31
     246:	d5a5      	bpl.n	194 <_adc_interrupt_handler+0x14>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     248:	0028      	movs	r0, r5
     24a:	68ab      	ldr	r3, [r5, #8]
     24c:	4798      	blx	r3
     24e:	e7a1      	b.n	194 <_adc_interrupt_handler+0x14>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     250:	0028      	movs	r0, r5
     252:	68eb      	ldr	r3, [r5, #12]
     254:	4798      	blx	r3
     256:	e7a8      	b.n	1aa <_adc_interrupt_handler+0x2a>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     258:	692b      	ldr	r3, [r5, #16]
     25a:	0028      	movs	r0, r5
     25c:	4798      	blx	r3
}
     25e:	e7af      	b.n	1c0 <_adc_interrupt_handler+0x40>
     260:	20000400 	.word	0x20000400

00000264 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     264:	b510      	push	{r4, lr}
	_adc_interrupt_handler(0);
     266:	2000      	movs	r0, #0
     268:	4b01      	ldr	r3, [pc, #4]	; (270 <ADC_Handler+0xc>)
     26a:	4798      	blx	r3
}
     26c:	bd10      	pop	{r4, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00000181 	.word	0x00000181

00000274 <extint_register_callback>:
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     274:	2a00      	cmp	r2, #0
     276:	d001      	beq.n	27c <extint_register_callback+0x8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     278:	2017      	movs	r0, #23
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     27a:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     27c:	008b      	lsls	r3, r1, #2
     27e:	4a07      	ldr	r2, [pc, #28]	; (29c <extint_register_callback+0x28>)
     280:	589b      	ldr	r3, [r3, r2]
     282:	2b00      	cmp	r3, #0
     284:	d003      	beq.n	28e <extint_register_callback+0x1a>
	} else if (_extint_dev.callbacks[channel] == callback) {
     286:	4283      	cmp	r3, r0
     288:	d005      	beq.n	296 <extint_register_callback+0x22>
	return STATUS_ERR_ALREADY_INITIALIZED;
     28a:	201d      	movs	r0, #29
     28c:	e7f5      	b.n	27a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     28e:	0089      	lsls	r1, r1, #2
     290:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     292:	2000      	movs	r0, #0
     294:	e7f1      	b.n	27a <extint_register_callback+0x6>
		return STATUS_OK;
     296:	2000      	movs	r0, #0
     298:	e7ef      	b.n	27a <extint_register_callback+0x6>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	20000408 	.word	0x20000408

000002a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2a0:	b510      	push	{r4, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2a2:	2200      	movs	r2, #0
     2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <EIC_Handler+0x44>)
     2a6:	701a      	strb	r2, [r3, #0]
     2a8:	e005      	b.n	2b6 <EIC_Handler+0x16>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2aa:	480f      	ldr	r0, [pc, #60]	; (2e8 <EIC_Handler+0x48>)
     2ac:	e00a      	b.n	2c4 <EIC_Handler+0x24>
     2ae:	4a0d      	ldr	r2, [pc, #52]	; (2e4 <EIC_Handler+0x44>)
     2b0:	7813      	ldrb	r3, [r2, #0]
     2b2:	3301      	adds	r3, #1
     2b4:	7013      	strb	r3, [r2, #0]
     2b6:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <EIC_Handler+0x44>)
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b0f      	cmp	r3, #15
     2bc:	d811      	bhi.n	2e2 <EIC_Handler+0x42>
	if (eic_index < EIC_INST_NUM) {
     2be:	2b1f      	cmp	r3, #31
     2c0:	d9f3      	bls.n	2aa <EIC_Handler+0xa>
	} else {
		Assert(false);
		return NULL;
     2c2:	2000      	movs	r0, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2c4:	211f      	movs	r1, #31
     2c6:	4019      	ands	r1, r3
     2c8:	2201      	movs	r2, #1
     2ca:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     2cc:	6901      	ldr	r1, [r0, #16]
		if (extint_chan_is_detected(_current_channel)) {
     2ce:	4211      	tst	r1, r2
     2d0:	d0ed      	beq.n	2ae <EIC_Handler+0xe>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     2d2:	6102      	str	r2, [r0, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2d4:	009b      	lsls	r3, r3, #2
     2d6:	4a05      	ldr	r2, [pc, #20]	; (2ec <EIC_Handler+0x4c>)
     2d8:	589b      	ldr	r3, [r3, r2]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e7      	beq.n	2ae <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2de:	4798      	blx	r3
     2e0:	e7e5      	b.n	2ae <EIC_Handler+0xe>
			}
		}
	}
}
     2e2:	bd10      	pop	{r4, pc}
     2e4:	20000404 	.word	0x20000404
     2e8:	40001800 	.word	0x40001800
     2ec:	20000408 	.word	0x20000408

000002f0 <_extint_enable>:
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2f0:	2200      	movs	r2, #0
     2f2:	2a00      	cmp	r2, #0
     2f4:	d006      	beq.n	304 <_extint_enable+0x14>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2f6:	2300      	movs	r3, #0
     2f8:	2b00      	cmp	r3, #0
     2fa:	d00b      	beq.n	314 <_extint_enable+0x24>
	return false;
     2fc:	2300      	movs	r3, #0
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     2fe:	2b00      	cmp	r3, #0
     300:	d1f9      	bne.n	2f6 <_extint_enable+0x6>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     302:	4770      	bx	lr
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     304:	4908      	ldr	r1, [pc, #32]	; (328 <_extint_enable+0x38>)
     306:	780b      	ldrb	r3, [r1, #0]
     308:	2002      	movs	r0, #2
     30a:	4303      	orrs	r3, r0
     30c:	b2db      	uxtb	r3, r3
     30e:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     310:	3201      	adds	r2, #1
     312:	e7ee      	b.n	2f2 <_extint_enable+0x2>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     314:	4a04      	ldr	r2, [pc, #16]	; (328 <_extint_enable+0x38>)
     316:	7852      	ldrb	r2, [r2, #1]
     318:	b252      	sxtb	r2, r2
     31a:	2a00      	cmp	r2, #0
     31c:	db01      	blt.n	322 <_extint_enable+0x32>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     31e:	3301      	adds	r3, #1
     320:	e7ea      	b.n	2f8 <_extint_enable+0x8>
			return true;
     322:	2301      	movs	r3, #1
     324:	e7eb      	b.n	2fe <_extint_enable+0xe>
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <_system_extint_init>:
{
     32c:	b500      	push	{lr}
     32e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     330:	4a1b      	ldr	r2, [pc, #108]	; (3a0 <_system_extint_init+0x74>)
     332:	6993      	ldr	r3, [r2, #24]
     334:	2140      	movs	r1, #64	; 0x40
     336:	430b      	orrs	r3, r1
     338:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     340:	2005      	movs	r0, #5
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <_system_extint_init+0x78>)
     344:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     346:	2005      	movs	r0, #5
     348:	4b17      	ldr	r3, [pc, #92]	; (3a8 <_system_extint_init+0x7c>)
     34a:	4798      	blx	r3
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     34c:	2200      	movs	r2, #0
     34e:	2a00      	cmp	r2, #0
     350:	d006      	beq.n	360 <_system_extint_init+0x34>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     352:	2300      	movs	r3, #0
     354:	2b00      	cmp	r3, #0
     356:	d00b      	beq.n	370 <_system_extint_init+0x44>
	return false;
     358:	2300      	movs	r3, #0
	while (extint_is_syncing()) {
     35a:	2b00      	cmp	r3, #0
     35c:	d1f9      	bne.n	352 <_system_extint_init+0x26>
     35e:	e016      	b.n	38e <_system_extint_init+0x62>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     360:	4912      	ldr	r1, [pc, #72]	; (3ac <_system_extint_init+0x80>)
     362:	780b      	ldrb	r3, [r1, #0]
     364:	2001      	movs	r0, #1
     366:	4303      	orrs	r3, r0
     368:	b2db      	uxtb	r3, r3
     36a:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     36c:	3201      	adds	r2, #1
     36e:	e7ee      	b.n	34e <_system_extint_init+0x22>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     370:	4a0e      	ldr	r2, [pc, #56]	; (3ac <_system_extint_init+0x80>)
     372:	7852      	ldrb	r2, [r2, #1]
     374:	b252      	sxtb	r2, r2
     376:	2a00      	cmp	r2, #0
     378:	db01      	blt.n	37e <_system_extint_init+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     37a:	3301      	adds	r3, #1
     37c:	e7ea      	b.n	354 <_system_extint_init+0x28>
			return true;
     37e:	2301      	movs	r3, #1
     380:	e7eb      	b.n	35a <_system_extint_init+0x2e>
		_extint_dev.callbacks[j] = NULL;
     382:	0099      	lsls	r1, r3, #2
     384:	2000      	movs	r0, #0
     386:	4a0a      	ldr	r2, [pc, #40]	; (3b0 <_system_extint_init+0x84>)
     388:	5088      	str	r0, [r1, r2]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     38a:	3301      	adds	r3, #1
     38c:	b2db      	uxtb	r3, r3
     38e:	2b0f      	cmp	r3, #15
     390:	d9f7      	bls.n	382 <_system_extint_init+0x56>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     392:	2210      	movs	r2, #16
     394:	4b07      	ldr	r3, [pc, #28]	; (3b4 <_system_extint_init+0x88>)
     396:	601a      	str	r2, [r3, #0]
	_extint_enable();
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_system_extint_init+0x8c>)
     39a:	4798      	blx	r3
}
     39c:	b003      	add	sp, #12
     39e:	bd00      	pop	{pc}
     3a0:	40000400 	.word	0x40000400
     3a4:	000038a9 	.word	0x000038a9
     3a8:	00003821 	.word	0x00003821
     3ac:	40001800 	.word	0x40001800
     3b0:	20000408 	.word	0x20000408
     3b4:	e000e100 	.word	0xe000e100
     3b8:	000002f1 	.word	0x000002f1

000003bc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3be:	b083      	sub	sp, #12
     3c0:	0005      	movs	r5, r0
     3c2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3c4:	a901      	add	r1, sp, #4
     3c6:	2300      	movs	r3, #0
     3c8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3ca:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3cc:	7923      	ldrb	r3, [r4, #4]
     3ce:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3d0:	7a23      	ldrb	r3, [r4, #8]
     3d2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3d4:	7820      	ldrb	r0, [r4, #0]
     3d6:	4b16      	ldr	r3, [pc, #88]	; (430 <extint_chan_set_config+0x74>)
     3d8:	4798      	blx	r3
	if (eic_index < EIC_INST_NUM) {
     3da:	2d1f      	cmp	r5, #31
     3dc:	d920      	bls.n	420 <extint_chan_set_config+0x64>
		return NULL;
     3de:	2000      	movs	r0, #0

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3e0:	2207      	movs	r2, #7
     3e2:	402a      	ands	r2, r5
     3e4:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3e6:	7ae3      	ldrb	r3, [r4, #11]
     3e8:	001e      	movs	r6, r3

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3ea:	7aa1      	ldrb	r1, [r4, #10]
     3ec:	2900      	cmp	r1, #0
     3ee:	d002      	beq.n	3f6 <extint_chan_set_config+0x3a>
		new_config |= EIC_CONFIG_FILTEN0;
     3f0:	2608      	movs	r6, #8
     3f2:	431e      	orrs	r6, r3
     3f4:	b2f6      	uxtb	r6, r6
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     3f6:	08eb      	lsrs	r3, r5, #3
		= (EIC_module->CONFIG[channel / 8].reg &
     3f8:	3306      	adds	r3, #6
     3fa:	009b      	lsls	r3, r3, #2
     3fc:	5819      	ldr	r1, [r3, r0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3fe:	270f      	movs	r7, #15
     400:	4097      	lsls	r7, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     402:	43b9      	bics	r1, r7
			(new_config << config_pos);
     404:	4096      	lsls	r6, r2
     406:	0032      	movs	r2, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     408:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     40a:	501a      	str	r2, [r3, r0]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     40c:	7a63      	ldrb	r3, [r4, #9]
     40e:	2b00      	cmp	r3, #0
     410:	d108      	bne.n	424 <extint_chan_set_config+0x68>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     412:	6943      	ldr	r3, [r0, #20]
     414:	2201      	movs	r2, #1
     416:	40aa      	lsls	r2, r5
     418:	4393      	bics	r3, r2
     41a:	6143      	str	r3, [r0, #20]
	}
}
     41c:	b003      	add	sp, #12
     41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return eics[eic_index];
     420:	4804      	ldr	r0, [pc, #16]	; (434 <extint_chan_set_config+0x78>)
     422:	e7dd      	b.n	3e0 <extint_chan_set_config+0x24>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     424:	6943      	ldr	r3, [r0, #20]
     426:	2201      	movs	r2, #1
     428:	40aa      	lsls	r2, r5
     42a:	4313      	orrs	r3, r2
     42c:	6143      	str	r3, [r0, #20]
     42e:	e7f5      	b.n	41c <extint_chan_set_config+0x60>
     430:	000039e1 	.word	0x000039e1
     434:	40001800 	.word	0x40001800

00000438 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     438:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     43a:	7a93      	ldrb	r3, [r2, #10]
     43c:	b25b      	sxtb	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	db08      	blt.n	454 <rtc_calendar_enable+0x1c>
        return false;
     442:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     444:	2b00      	cmp	r3, #0
     446:	d1f8      	bne.n	43a <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     448:	8813      	ldrh	r3, [r2, #0]
     44a:	2102      	movs	r1, #2
     44c:	430b      	orrs	r3, r1
     44e:	b29b      	uxth	r3, r3
     450:	8013      	strh	r3, [r2, #0]
}
     452:	4770      	bx	lr
                return true;
     454:	2301      	movs	r3, #1
     456:	e7f5      	b.n	444 <rtc_calendar_enable+0xc>

00000458 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     458:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     45a:	7a93      	ldrb	r3, [r2, #10]
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	db0a      	blt.n	478 <rtc_calendar_disable+0x20>
        return false;
     462:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     464:	2b00      	cmp	r3, #0
     466:	d1f8      	bne.n	45a <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     468:	33c1      	adds	r3, #193	; 0xc1
     46a:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     46c:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     46e:	8813      	ldrh	r3, [r2, #0]
     470:	2102      	movs	r1, #2
     472:	438b      	bics	r3, r1
     474:	8013      	strh	r3, [r2, #0]
}
     476:	4770      	bx	lr
                return true;
     478:	2301      	movs	r3, #1
     47a:	e7f3      	b.n	464 <rtc_calendar_disable+0xc>

0000047c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     47c:	b570      	push	{r4, r5, r6, lr}
     47e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     480:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <rtc_calendar_reset+0x2c>)
     484:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     486:	6823      	ldr	r3, [r4, #0]
     488:	7a9b      	ldrb	r3, [r3, #10]
     48a:	b25b      	sxtb	r3, r3
     48c:	2b00      	cmp	r3, #0
     48e:	db08      	blt.n	4a2 <rtc_calendar_reset+0x26>
        return false;
     490:	2300      	movs	r3, #0
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     492:	2b00      	cmp	r3, #0
     494:	d1f7      	bne.n	486 <rtc_calendar_reset+0xa>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     496:	882b      	ldrh	r3, [r5, #0]
     498:	2201      	movs	r2, #1
     49a:	4313      	orrs	r3, r2
     49c:	b29b      	uxth	r3, r3
     49e:	802b      	strh	r3, [r5, #0]
}
     4a0:	bd70      	pop	{r4, r5, r6, pc}
                return true;
     4a2:	2301      	movs	r3, #1
     4a4:	e7f5      	b.n	492 <rtc_calendar_reset+0x16>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000459 	.word	0x00000459

000004ac <rtc_calendar_time_to_register_value>:
{
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     4ac:	88cb      	ldrh	r3, [r1, #6]
     4ae:	88c2      	ldrh	r2, [r0, #6]
     4b0:	1a9b      	subs	r3, r3, r2
     4b2:	069b      	lsls	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     4b4:	794a      	ldrb	r2, [r1, #5]
     4b6:	0592      	lsls	r2, r2, #22
     4b8:	4313      	orrs	r3, r2

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     4ba:	790a      	ldrb	r2, [r1, #4]
     4bc:	0452      	lsls	r2, r2, #17
     4be:	4313      	orrs	r3, r2

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     4c0:	788a      	ldrb	r2, [r1, #2]
     4c2:	0312      	lsls	r2, r2, #12
     4c4:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     4c6:	7902      	ldrb	r2, [r0, #4]
     4c8:	2a00      	cmp	r2, #0
     4ca:	d105      	bne.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4cc:	78ca      	ldrb	r2, [r1, #3]
     4ce:	2a00      	cmp	r2, #0
     4d0:	d002      	beq.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     4d2:	2280      	movs	r2, #128	; 0x80
     4d4:	0252      	lsls	r2, r2, #9
     4d6:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     4d8:	7848      	ldrb	r0, [r1, #1]
     4da:	0180      	lsls	r0, r0, #6
     4dc:	4303      	orrs	r3, r0

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     4de:	7808      	ldrb	r0, [r1, #0]
     4e0:	4318      	orrs	r0, r3

	return register_value;
}
     4e2:	4770      	bx	lr

000004e4 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     4e4:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     4e6:	0e8c      	lsrs	r4, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
     4e8:	88c3      	ldrh	r3, [r0, #6]
     4ea:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     4ec:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     4ee:	0d8c      	lsrs	r4, r1, #22
     4f0:	230f      	movs	r3, #15
     4f2:	4023      	ands	r3, r4
     4f4:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     4f6:	0c4c      	lsrs	r4, r1, #17
     4f8:	231f      	movs	r3, #31
     4fa:	4023      	ands	r3, r4
     4fc:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     4fe:	7903      	ldrb	r3, [r0, #4]
     500:	2b00      	cmp	r3, #0
     502:	d110      	bne.n	526 <rtc_calendar_register_value_to_time+0x42>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
     504:	0b08      	lsrs	r0, r1, #12
     506:	230f      	movs	r3, #15
     508:	4003      	ands	r3, r0
		time->hour = ((register_value &
     50a:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	025b      	lsls	r3, r3, #9
     510:	400b      	ands	r3, r1
     512:	1e58      	subs	r0, r3, #1
     514:	4183      	sbcs	r3, r0
     516:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     518:	0988      	lsrs	r0, r1, #6
     51a:	233f      	movs	r3, #63	; 0x3f
     51c:	4018      	ands	r0, r3
     51e:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     520:	4019      	ands	r1, r3
     522:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
     524:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     526:	0b08      	lsrs	r0, r1, #12
     528:	231f      	movs	r3, #31
     52a:	4003      	ands	r3, r0
     52c:	7093      	strb	r3, [r2, #2]
     52e:	e7f3      	b.n	518 <rtc_calendar_register_value_to_time+0x34>

00000530 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     530:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     532:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     534:	4b06      	ldr	r3, [pc, #24]	; (550 <rtc_calendar_set_time+0x20>)
     536:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     538:	7aa3      	ldrb	r3, [r4, #10]
     53a:	b25b      	sxtb	r3, r3
     53c:	2b00      	cmp	r3, #0
     53e:	db04      	blt.n	54a <rtc_calendar_set_time+0x1a>
        return false;
     540:	2300      	movs	r3, #0

	while (rtc_calendar_is_syncing(module)) {
     542:	2b00      	cmp	r3, #0
     544:	d1f8      	bne.n	538 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     546:	6120      	str	r0, [r4, #16]
}
     548:	bd10      	pop	{r4, pc}
                return true;
     54a:	2301      	movs	r3, #1
     54c:	e7f9      	b.n	542 <rtc_calendar_set_time+0x12>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	000004ad 	.word	0x000004ad

00000554 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
     554:	b570      	push	{r4, r5, r6, lr}
     556:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     558:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
     55a:	7944      	ldrb	r4, [r0, #5]
     55c:	2c00      	cmp	r4, #0
     55e:	d006      	beq.n	56e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
     560:	8859      	ldrh	r1, [r3, #2]
     562:	0449      	lsls	r1, r1, #17
     564:	d510      	bpl.n	588 <rtc_calendar_get_time+0x34>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
     566:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
     568:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <rtc_calendar_get_time+0x54>)
     56a:	4798      	blx	r3
}
     56c:	bd70      	pop	{r4, r5, r6, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
     56e:	490f      	ldr	r1, [pc, #60]	; (5ac <rtc_calendar_get_time+0x58>)
     570:	8059      	strh	r1, [r3, #2]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     572:	6801      	ldr	r1, [r0, #0]
     574:	7a89      	ldrb	r1, [r1, #10]
     576:	b249      	sxtb	r1, r1
     578:	2900      	cmp	r1, #0
     57a:	db03      	blt.n	584 <rtc_calendar_get_time+0x30>
        return false;
     57c:	0021      	movs	r1, r4
		while (rtc_calendar_is_syncing(module)) {
     57e:	2900      	cmp	r1, #0
     580:	d1f7      	bne.n	572 <rtc_calendar_get_time+0x1e>
     582:	e7f0      	b.n	566 <rtc_calendar_get_time+0x12>
                return true;
     584:	2101      	movs	r1, #1
     586:	e7fa      	b.n	57e <rtc_calendar_get_time+0x2a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
     588:	8859      	ldrh	r1, [r3, #2]
     58a:	4d09      	ldr	r5, [pc, #36]	; (5b0 <rtc_calendar_get_time+0x5c>)
     58c:	4329      	orrs	r1, r5
     58e:	b289      	uxth	r1, r1
     590:	8059      	strh	r1, [r3, #2]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     592:	6801      	ldr	r1, [r0, #0]
     594:	7a89      	ldrb	r1, [r1, #10]
     596:	b249      	sxtb	r1, r1
     598:	2900      	cmp	r1, #0
     59a:	db03      	blt.n	5a4 <rtc_calendar_get_time+0x50>
        return false;
     59c:	2100      	movs	r1, #0
		while (rtc_calendar_is_syncing(module)) {
     59e:	2900      	cmp	r1, #0
     5a0:	d1f7      	bne.n	592 <rtc_calendar_get_time+0x3e>
     5a2:	e7e0      	b.n	566 <rtc_calendar_get_time+0x12>
                return true;
     5a4:	0021      	movs	r1, r4
     5a6:	e7fa      	b.n	59e <rtc_calendar_get_time+0x4a>
     5a8:	000004e5 	.word	0x000004e5
     5ac:	ffff8000 	.word	0xffff8000
     5b0:	ffffc000 	.word	0xffffc000

000005b4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	000d      	movs	r5, r1
     5b8:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5ba:	6806      	ldr	r6, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     5bc:	2a01      	cmp	r2, #1
     5be:	d901      	bls.n	5c4 <rtc_calendar_set_alarm+0x10>
		return STATUS_ERR_INVALID_ARG;
     5c0:	2017      	movs	r0, #23

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
     5c2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <rtc_calendar_set_alarm+0x38>)
     5c6:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5c8:	7ab3      	ldrb	r3, [r6, #10]
     5ca:	b25b      	sxtb	r3, r3
     5cc:	2b00      	cmp	r3, #0
     5ce:	db0a      	blt.n	5e6 <rtc_calendar_set_alarm+0x32>
        return false;
     5d0:	2300      	movs	r3, #0
	while (rtc_calendar_is_syncing(module)) {
     5d2:	2b00      	cmp	r3, #0
     5d4:	d1f8      	bne.n	5c8 <rtc_calendar_set_alarm+0x14>
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     5d6:	3403      	adds	r4, #3
     5d8:	00e4      	lsls	r4, r4, #3
     5da:	51a0      	str	r0, [r4, r6]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     5dc:	7a2b      	ldrb	r3, [r5, #8]
     5de:	1934      	adds	r4, r6, r4
     5e0:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
     5e2:	2000      	movs	r0, #0
     5e4:	e7ed      	b.n	5c2 <rtc_calendar_set_alarm+0xe>
                return true;
     5e6:	2301      	movs	r3, #1
     5e8:	e7f3      	b.n	5d2 <rtc_calendar_set_alarm+0x1e>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	000004ad 	.word	0x000004ad

000005f0 <_rtc_calendar_set_config>:
{
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	0005      	movs	r5, r0
     5f4:	000e      	movs	r6, r1
	Rtc *const rtc_module = module->hw;
     5f6:	6801      	ldr	r1, [r0, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     5f8:	8832      	ldrh	r2, [r6, #0]
     5fa:	2308      	movs	r3, #8
     5fc:	4313      	orrs	r3, r2
     5fe:	b29b      	uxth	r3, r3
	if (!(config->clock_24h)) {
     600:	7930      	ldrb	r0, [r6, #4]
     602:	2800      	cmp	r0, #0
     604:	d102      	bne.n	60c <_rtc_calendar_set_config+0x1c>
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     606:	2348      	movs	r3, #72	; 0x48
     608:	4313      	orrs	r3, r2
     60a:	b29b      	uxth	r3, r3
	if (config->clear_on_match) {
     60c:	78b2      	ldrb	r2, [r6, #2]
     60e:	2a00      	cmp	r2, #0
     610:	d002      	beq.n	618 <_rtc_calendar_set_config+0x28>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     612:	2280      	movs	r2, #128	; 0x80
     614:	4313      	orrs	r3, r2
     616:	b29b      	uxth	r3, r3
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     618:	800b      	strh	r3, [r1, #0]
	if (config->continuously_update) {
     61a:	78f3      	ldrb	r3, [r6, #3]
     61c:	2b00      	cmp	r3, #0
     61e:	d004      	beq.n	62a <_rtc_calendar_set_config+0x3a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     620:	884b      	ldrh	r3, [r1, #2]
     622:	2280      	movs	r2, #128	; 0x80
     624:	01d2      	lsls	r2, r2, #7
     626:	4313      	orrs	r3, r2
     628:	804b      	strh	r3, [r1, #2]
{
     62a:	2400      	movs	r4, #0
     62c:	e00a      	b.n	644 <_rtc_calendar_set_config+0x54>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     62e:	00a3      	lsls	r3, r4, #2
     630:	191b      	adds	r3, r3, r4
     632:	0059      	lsls	r1, r3, #1
     634:	3108      	adds	r1, #8
     636:	1871      	adds	r1, r6, r1
     638:	0022      	movs	r2, r4
     63a:	0028      	movs	r0, r5
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <_rtc_calendar_set_config+0x5c>)
     63e:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     640:	3401      	adds	r4, #1
     642:	b2e4      	uxtb	r4, r4
     644:	2c00      	cmp	r4, #0
     646:	d0f2      	beq.n	62e <_rtc_calendar_set_config+0x3e>
}
     648:	bd70      	pop	{r4, r5, r6, pc}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	000005b5 	.word	0x000005b5

00000650 <rtc_calendar_init>:
{
     650:	b530      	push	{r4, r5, lr}
     652:	b083      	sub	sp, #12
     654:	0004      	movs	r4, r0
     656:	0015      	movs	r5, r2
	module->hw = hw;
     658:	6001      	str	r1, [r0, #0]
     65a:	4a0f      	ldr	r2, [pc, #60]	; (698 <rtc_calendar_init+0x48>)
     65c:	6993      	ldr	r3, [r2, #24]
     65e:	2120      	movs	r1, #32
     660:	430b      	orrs	r3, r1
     662:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     664:	a901      	add	r1, sp, #4
     666:	2302      	movs	r3, #2
     668:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     66a:	2004      	movs	r0, #4
     66c:	4b0b      	ldr	r3, [pc, #44]	; (69c <rtc_calendar_init+0x4c>)
     66e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     670:	2004      	movs	r0, #4
     672:	4b0b      	ldr	r3, [pc, #44]	; (6a0 <rtc_calendar_init+0x50>)
     674:	4798      	blx	r3
	rtc_calendar_reset(module);
     676:	0020      	movs	r0, r4
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <rtc_calendar_init+0x54>)
     67a:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     67c:	792b      	ldrb	r3, [r5, #4]
     67e:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     680:	78eb      	ldrb	r3, [r5, #3]
     682:	7163      	strb	r3, [r4, #5]
	module->year_init_value     = config->year_init_value;
     684:	88eb      	ldrh	r3, [r5, #6]
     686:	80e3      	strh	r3, [r4, #6]
	_rtc_instance[0] = module;
     688:	4b07      	ldr	r3, [pc, #28]	; (6a8 <rtc_calendar_init+0x58>)
     68a:	601c      	str	r4, [r3, #0]
	_rtc_calendar_set_config(module, config);
     68c:	0029      	movs	r1, r5
     68e:	0020      	movs	r0, r4
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <rtc_calendar_init+0x5c>)
     692:	4798      	blx	r3
}
     694:	b003      	add	sp, #12
     696:	bd30      	pop	{r4, r5, pc}
     698:	40000400 	.word	0x40000400
     69c:	000038a9 	.word	0x000038a9
     6a0:	00003821 	.word	0x00003821
     6a4:	0000047d 	.word	0x0000047d
     6a8:	20000448 	.word	0x20000448
     6ac:	000005f1 	.word	0x000005f1

000006b0 <rtc_calendar_frequency_correction>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6b0:	6802      	ldr	r2, [r0, #0]

	/* Check if valid argument. */
	if (abs(value) > 0x7F) {
     6b2:	17c8      	asrs	r0, r1, #31
     6b4:	180b      	adds	r3, r1, r0
     6b6:	4043      	eors	r3, r0
     6b8:	2b7f      	cmp	r3, #127	; 0x7f
     6ba:	dd01      	ble.n	6c0 <rtc_calendar_frequency_correction+0x10>
		/* Value bigger than allowed, return invalid argument. */
		return STATUS_ERR_INVALID_ARG;
     6bc:	2017      	movs	r0, #23

	/* Set value. */
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;

	return STATUS_OK;
}
     6be:	4770      	bx	lr
	new_correction_value = abs(value);
     6c0:	0018      	movs	r0, r3
	if (value < 0) {
     6c2:	2900      	cmp	r1, #0
     6c4:	db0a      	blt.n	6dc <rtc_calendar_frequency_correction+0x2c>
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     6c6:	7a93      	ldrb	r3, [r2, #10]
     6c8:	b25b      	sxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	db09      	blt.n	6e2 <rtc_calendar_frequency_correction+0x32>
        return false;
     6ce:	2300      	movs	r3, #0
	while (rtc_calendar_is_syncing(module)) {
     6d0:	2b00      	cmp	r3, #0
     6d2:	d1f8      	bne.n	6c6 <rtc_calendar_frequency_correction+0x16>
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;
     6d4:	b2c0      	uxtb	r0, r0
     6d6:	7310      	strb	r0, [r2, #12]
	return STATUS_OK;
     6d8:	2000      	movs	r0, #0
     6da:	e7f0      	b.n	6be <rtc_calendar_frequency_correction+0xe>
		new_correction_value |= RTC_FREQCORR_SIGN;
     6dc:	2080      	movs	r0, #128	; 0x80
     6de:	4318      	orrs	r0, r3
     6e0:	e7f1      	b.n	6c6 <rtc_calendar_frequency_correction+0x16>
                return true;
     6e2:	2301      	movs	r3, #1
     6e4:	e7f4      	b.n	6d0 <rtc_calendar_frequency_correction+0x20>

000006e6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e8:	46de      	mov	lr, fp
     6ea:	4657      	mov	r7, sl
     6ec:	464e      	mov	r6, r9
     6ee:	4645      	mov	r5, r8
     6f0:	b5e0      	push	{r5, r6, r7, lr}
     6f2:	b085      	sub	sp, #20
     6f4:	4689      	mov	r9, r1
     6f6:	0016      	movs	r6, r2
     6f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6fa:	2200      	movs	r2, #0
     6fc:	2300      	movs	r3, #0
     6fe:	2100      	movs	r1, #0
     700:	468b      	mov	fp, r1
     702:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     704:	253f      	movs	r5, #63	; 0x3f
     706:	9600      	str	r6, [sp, #0]
     708:	9701      	str	r7, [sp, #4]
     70a:	9002      	str	r0, [sp, #8]
     70c:	4649      	mov	r1, r9
     70e:	9103      	str	r1, [sp, #12]
     710:	e011      	b.n	736 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     712:	2120      	movs	r1, #32
     714:	1b49      	subs	r1, r1, r5
     716:	2400      	movs	r4, #0
     718:	3401      	adds	r4, #1
     71a:	40cc      	lsrs	r4, r1
     71c:	e013      	b.n	746 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     71e:	9800      	ldr	r0, [sp, #0]
     720:	9901      	ldr	r1, [sp, #4]
     722:	1a12      	subs	r2, r2, r0
     724:	418b      	sbcs	r3, r1
			q |= bit_shift;
     726:	4659      	mov	r1, fp
     728:	4660      	mov	r0, ip
     72a:	4301      	orrs	r1, r0
     72c:	468b      	mov	fp, r1
     72e:	4651      	mov	r1, sl
     730:	4321      	orrs	r1, r4
     732:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     734:	3d01      	subs	r5, #1
     736:	2d00      	cmp	r5, #0
     738:	db23      	blt.n	782 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     73a:	2120      	movs	r1, #32
     73c:	4249      	negs	r1, r1
     73e:	1869      	adds	r1, r5, r1
     740:	d4e7      	bmi.n	712 <long_division+0x2c>
     742:	2401      	movs	r4, #1
     744:	408c      	lsls	r4, r1
     746:	2101      	movs	r1, #1
     748:	40a9      	lsls	r1, r5
     74a:	468c      	mov	ip, r1
		r = r << 1;
     74c:	1892      	adds	r2, r2, r2
     74e:	415b      	adcs	r3, r3
     750:	0010      	movs	r0, r2
     752:	0019      	movs	r1, r3
		if (n & bit_shift) {
     754:	9e02      	ldr	r6, [sp, #8]
     756:	4667      	mov	r7, ip
     758:	403e      	ands	r6, r7
     75a:	46b1      	mov	r9, r6
     75c:	9e03      	ldr	r6, [sp, #12]
     75e:	4026      	ands	r6, r4
     760:	46b0      	mov	r8, r6
     762:	464e      	mov	r6, r9
     764:	4647      	mov	r7, r8
     766:	433e      	orrs	r6, r7
     768:	d003      	beq.n	772 <long_division+0x8c>
			r |= 0x01;
     76a:	2601      	movs	r6, #1
     76c:	4306      	orrs	r6, r0
     76e:	0032      	movs	r2, r6
     770:	000b      	movs	r3, r1
		if (r >= d) {
     772:	9800      	ldr	r0, [sp, #0]
     774:	9901      	ldr	r1, [sp, #4]
     776:	4299      	cmp	r1, r3
     778:	d8dc      	bhi.n	734 <long_division+0x4e>
     77a:	d1d0      	bne.n	71e <long_division+0x38>
     77c:	4290      	cmp	r0, r2
     77e:	d8d9      	bhi.n	734 <long_division+0x4e>
     780:	e7cd      	b.n	71e <long_division+0x38>
		}
	}

	return q;
}
     782:	4658      	mov	r0, fp
     784:	4651      	mov	r1, sl
     786:	b005      	add	sp, #20
     788:	bc3c      	pop	{r2, r3, r4, r5}
     78a:	4690      	mov	r8, r2
     78c:	4699      	mov	r9, r3
     78e:	46a2      	mov	sl, r4
     790:	46ab      	mov	fp, r5
     792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000794 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     794:	0849      	lsrs	r1, r1, #1
     796:	4281      	cmp	r1, r0
     798:	d201      	bcs.n	79e <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     79a:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     79c:	4770      	bx	lr
     79e:	2300      	movs	r3, #0
     7a0:	e002      	b.n	7a8 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     7a2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     7a4:	3301      	adds	r3, #1
     7a6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     7a8:	4281      	cmp	r1, r0
     7aa:	d2fa      	bcs.n	7a2 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     7ac:	3b01      	subs	r3, #1
     7ae:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     7b0:	2bff      	cmp	r3, #255	; 0xff
     7b2:	d901      	bls.n	7b8 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7b4:	2040      	movs	r0, #64	; 0x40
     7b6:	e7f1      	b.n	79c <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     7b8:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     7ba:	2000      	movs	r0, #0
     7bc:	e7ee      	b.n	79c <_sercom_get_sync_baud_val+0x8>
	...

000007c0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	000c      	movs	r4, r1
     7c6:	0015      	movs	r5, r2
     7c8:	aa06      	add	r2, sp, #24
     7ca:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     7cc:	0002      	movs	r2, r0
     7ce:	434a      	muls	r2, r1
     7d0:	42a2      	cmp	r2, r4
     7d2:	d902      	bls.n	7da <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7d4:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     7d6:	b002      	add	sp, #8
     7d8:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     7da:	2b00      	cmp	r3, #0
     7dc:	d114      	bne.n	808 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     7de:	0002      	movs	r2, r0
     7e0:	0008      	movs	r0, r1
     7e2:	2100      	movs	r1, #0
     7e4:	4e1b      	ldr	r6, [pc, #108]	; (854 <_sercom_get_async_baud_val+0x94>)
     7e6:	47b0      	blx	r6
     7e8:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     7ea:	0022      	movs	r2, r4
     7ec:	2300      	movs	r3, #0
     7ee:	2000      	movs	r0, #0
     7f0:	4c19      	ldr	r4, [pc, #100]	; (858 <_sercom_get_async_baud_val+0x98>)
     7f2:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     7f4:	2200      	movs	r2, #0
     7f6:	2301      	movs	r3, #1
     7f8:	1a12      	subs	r2, r2, r0
     7fa:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7fc:	0c10      	lsrs	r0, r2, #16
     7fe:	041b      	lsls	r3, r3, #16
     800:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     802:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     804:	2000      	movs	r0, #0
     806:	e7e6      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     808:	2b01      	cmp	r3, #1
     80a:	d001      	beq.n	810 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     80c:	2000      	movs	r0, #0
     80e:	e7f8      	b.n	802 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     810:	000a      	movs	r2, r1
     812:	2300      	movs	r3, #0
     814:	2100      	movs	r1, #0
     816:	4e0f      	ldr	r6, [pc, #60]	; (854 <_sercom_get_async_baud_val+0x94>)
     818:	47b0      	blx	r6
     81a:	0002      	movs	r2, r0
     81c:	000b      	movs	r3, r1
     81e:	9200      	str	r2, [sp, #0]
     820:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     822:	0020      	movs	r0, r4
     824:	2100      	movs	r1, #0
     826:	4e0c      	ldr	r6, [pc, #48]	; (858 <_sercom_get_async_baud_val+0x98>)
     828:	47b0      	blx	r6
     82a:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     82c:	2380      	movs	r3, #128	; 0x80
     82e:	019b      	lsls	r3, r3, #6
     830:	4298      	cmp	r0, r3
     832:	d901      	bls.n	838 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     834:	2040      	movs	r0, #64	; 0x40
     836:	e7ce      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     838:	0f61      	lsrs	r1, r4, #29
     83a:	00e0      	lsls	r0, r4, #3
     83c:	9a00      	ldr	r2, [sp, #0]
     83e:	9b01      	ldr	r3, [sp, #4]
     840:	4c05      	ldr	r4, [pc, #20]	; (858 <_sercom_get_async_baud_val+0x98>)
     842:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     844:	b2c0      	uxtb	r0, r0
     846:	00f3      	lsls	r3, r6, #3
     848:	b2db      	uxtb	r3, r3
     84a:	1ac0      	subs	r0, r0, r3
     84c:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     84e:	0340      	lsls	r0, r0, #13
     850:	4330      	orrs	r0, r6
     852:	e7d6      	b.n	802 <_sercom_get_async_baud_val+0x42>
     854:	00004045 	.word	0x00004045
     858:	000006e7 	.word	0x000006e7

0000085c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     85c:	b510      	push	{r4, lr}
     85e:	b082      	sub	sp, #8
     860:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <sercom_set_gclk_generator+0x40>)
     864:	781b      	ldrb	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d007      	beq.n	87a <sercom_set_gclk_generator+0x1e>
     86a:	2900      	cmp	r1, #0
     86c:	d105      	bne.n	87a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     86e:	4b0b      	ldr	r3, [pc, #44]	; (89c <sercom_set_gclk_generator+0x40>)
     870:	785b      	ldrb	r3, [r3, #1]
     872:	4283      	cmp	r3, r0
     874:	d010      	beq.n	898 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     876:	201d      	movs	r0, #29
     878:	e00c      	b.n	894 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     87a:	a901      	add	r1, sp, #4
     87c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     87e:	2013      	movs	r0, #19
     880:	4b07      	ldr	r3, [pc, #28]	; (8a0 <sercom_set_gclk_generator+0x44>)
     882:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     884:	2013      	movs	r0, #19
     886:	4b07      	ldr	r3, [pc, #28]	; (8a4 <sercom_set_gclk_generator+0x48>)
     888:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     88a:	4b04      	ldr	r3, [pc, #16]	; (89c <sercom_set_gclk_generator+0x40>)
     88c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     88e:	2201      	movs	r2, #1
     890:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     892:	2000      	movs	r0, #0
}
     894:	b002      	add	sp, #8
     896:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     898:	2000      	movs	r0, #0
     89a:	e7fb      	b.n	894 <sercom_set_gclk_generator+0x38>
     89c:	20000090 	.word	0x20000090
     8a0:	000038a9 	.word	0x000038a9
     8a4:	00003821 	.word	0x00003821

000008a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8a8:	4b40      	ldr	r3, [pc, #256]	; (9ac <_sercom_get_default_pad+0x104>)
     8aa:	4298      	cmp	r0, r3
     8ac:	d031      	beq.n	912 <_sercom_get_default_pad+0x6a>
     8ae:	d90a      	bls.n	8c6 <_sercom_get_default_pad+0x1e>
     8b0:	4b3f      	ldr	r3, [pc, #252]	; (9b0 <_sercom_get_default_pad+0x108>)
     8b2:	4298      	cmp	r0, r3
     8b4:	d04d      	beq.n	952 <_sercom_get_default_pad+0xaa>
     8b6:	4b3f      	ldr	r3, [pc, #252]	; (9b4 <_sercom_get_default_pad+0x10c>)
     8b8:	4298      	cmp	r0, r3
     8ba:	d05a      	beq.n	972 <_sercom_get_default_pad+0xca>
     8bc:	4b3e      	ldr	r3, [pc, #248]	; (9b8 <_sercom_get_default_pad+0x110>)
     8be:	4298      	cmp	r0, r3
     8c0:	d037      	beq.n	932 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8c2:	2000      	movs	r0, #0
}
     8c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8c6:	4b3d      	ldr	r3, [pc, #244]	; (9bc <_sercom_get_default_pad+0x114>)
     8c8:	4298      	cmp	r0, r3
     8ca:	d00c      	beq.n	8e6 <_sercom_get_default_pad+0x3e>
     8cc:	4b3c      	ldr	r3, [pc, #240]	; (9c0 <_sercom_get_default_pad+0x118>)
     8ce:	4298      	cmp	r0, r3
     8d0:	d1f7      	bne.n	8c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8d2:	2901      	cmp	r1, #1
     8d4:	d05f      	beq.n	996 <_sercom_get_default_pad+0xee>
     8d6:	2900      	cmp	r1, #0
     8d8:	d015      	beq.n	906 <_sercom_get_default_pad+0x5e>
     8da:	2902      	cmp	r1, #2
     8dc:	d015      	beq.n	90a <_sercom_get_default_pad+0x62>
     8de:	2903      	cmp	r1, #3
     8e0:	d015      	beq.n	90e <_sercom_get_default_pad+0x66>
	return 0;
     8e2:	2000      	movs	r0, #0
     8e4:	e7ee      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e6:	2901      	cmp	r1, #1
     8e8:	d053      	beq.n	992 <_sercom_get_default_pad+0xea>
     8ea:	2900      	cmp	r1, #0
     8ec:	d005      	beq.n	8fa <_sercom_get_default_pad+0x52>
     8ee:	2902      	cmp	r1, #2
     8f0:	d005      	beq.n	8fe <_sercom_get_default_pad+0x56>
     8f2:	2903      	cmp	r1, #3
     8f4:	d005      	beq.n	902 <_sercom_get_default_pad+0x5a>
	return 0;
     8f6:	2000      	movs	r0, #0
     8f8:	e7e4      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fa:	4832      	ldr	r0, [pc, #200]	; (9c4 <_sercom_get_default_pad+0x11c>)
     8fc:	e7e2      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     8fe:	4832      	ldr	r0, [pc, #200]	; (9c8 <_sercom_get_default_pad+0x120>)
     900:	e7e0      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     902:	4832      	ldr	r0, [pc, #200]	; (9cc <_sercom_get_default_pad+0x124>)
     904:	e7de      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     906:	2003      	movs	r0, #3
     908:	e7dc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90a:	4831      	ldr	r0, [pc, #196]	; (9d0 <_sercom_get_default_pad+0x128>)
     90c:	e7da      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90e:	4831      	ldr	r0, [pc, #196]	; (9d4 <_sercom_get_default_pad+0x12c>)
     910:	e7d8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     912:	2901      	cmp	r1, #1
     914:	d041      	beq.n	99a <_sercom_get_default_pad+0xf2>
     916:	2900      	cmp	r1, #0
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0x7e>
     91a:	2902      	cmp	r1, #2
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0x82>
     91e:	2903      	cmp	r1, #3
     920:	d005      	beq.n	92e <_sercom_get_default_pad+0x86>
	return 0;
     922:	2000      	movs	r0, #0
     924:	e7ce      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     926:	482c      	ldr	r0, [pc, #176]	; (9d8 <_sercom_get_default_pad+0x130>)
     928:	e7cc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92a:	482c      	ldr	r0, [pc, #176]	; (9dc <_sercom_get_default_pad+0x134>)
     92c:	e7ca      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92e:	482c      	ldr	r0, [pc, #176]	; (9e0 <_sercom_get_default_pad+0x138>)
     930:	e7c8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     932:	2901      	cmp	r1, #1
     934:	d033      	beq.n	99e <_sercom_get_default_pad+0xf6>
     936:	2900      	cmp	r1, #0
     938:	d005      	beq.n	946 <_sercom_get_default_pad+0x9e>
     93a:	2902      	cmp	r1, #2
     93c:	d005      	beq.n	94a <_sercom_get_default_pad+0xa2>
     93e:	2903      	cmp	r1, #3
     940:	d005      	beq.n	94e <_sercom_get_default_pad+0xa6>
	return 0;
     942:	2000      	movs	r0, #0
     944:	e7be      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     946:	4827      	ldr	r0, [pc, #156]	; (9e4 <_sercom_get_default_pad+0x13c>)
     948:	e7bc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94a:	4827      	ldr	r0, [pc, #156]	; (9e8 <_sercom_get_default_pad+0x140>)
     94c:	e7ba      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94e:	4827      	ldr	r0, [pc, #156]	; (9ec <_sercom_get_default_pad+0x144>)
     950:	e7b8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     952:	2901      	cmp	r1, #1
     954:	d025      	beq.n	9a2 <_sercom_get_default_pad+0xfa>
     956:	2900      	cmp	r1, #0
     958:	d005      	beq.n	966 <_sercom_get_default_pad+0xbe>
     95a:	2902      	cmp	r1, #2
     95c:	d005      	beq.n	96a <_sercom_get_default_pad+0xc2>
     95e:	2903      	cmp	r1, #3
     960:	d005      	beq.n	96e <_sercom_get_default_pad+0xc6>
	return 0;
     962:	2000      	movs	r0, #0
     964:	e7ae      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     966:	4822      	ldr	r0, [pc, #136]	; (9f0 <_sercom_get_default_pad+0x148>)
     968:	e7ac      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96a:	4822      	ldr	r0, [pc, #136]	; (9f4 <_sercom_get_default_pad+0x14c>)
     96c:	e7aa      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96e:	4822      	ldr	r0, [pc, #136]	; (9f8 <_sercom_get_default_pad+0x150>)
     970:	e7a8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     972:	2901      	cmp	r1, #1
     974:	d017      	beq.n	9a6 <_sercom_get_default_pad+0xfe>
     976:	2900      	cmp	r1, #0
     978:	d005      	beq.n	986 <_sercom_get_default_pad+0xde>
     97a:	2902      	cmp	r1, #2
     97c:	d005      	beq.n	98a <_sercom_get_default_pad+0xe2>
     97e:	2903      	cmp	r1, #3
     980:	d005      	beq.n	98e <_sercom_get_default_pad+0xe6>
	return 0;
     982:	2000      	movs	r0, #0
     984:	e79e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     986:	481d      	ldr	r0, [pc, #116]	; (9fc <_sercom_get_default_pad+0x154>)
     988:	e79c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98a:	481d      	ldr	r0, [pc, #116]	; (a00 <_sercom_get_default_pad+0x158>)
     98c:	e79a      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98e:	481d      	ldr	r0, [pc, #116]	; (a04 <_sercom_get_default_pad+0x15c>)
     990:	e798      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     992:	481d      	ldr	r0, [pc, #116]	; (a08 <_sercom_get_default_pad+0x160>)
     994:	e796      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     996:	481d      	ldr	r0, [pc, #116]	; (a0c <_sercom_get_default_pad+0x164>)
     998:	e794      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99a:	481d      	ldr	r0, [pc, #116]	; (a10 <_sercom_get_default_pad+0x168>)
     99c:	e792      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99e:	481d      	ldr	r0, [pc, #116]	; (a14 <_sercom_get_default_pad+0x16c>)
     9a0:	e790      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a2:	481d      	ldr	r0, [pc, #116]	; (a18 <_sercom_get_default_pad+0x170>)
     9a4:	e78e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a6:	481d      	ldr	r0, [pc, #116]	; (a1c <_sercom_get_default_pad+0x174>)
     9a8:	e78c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	42001000 	.word	0x42001000
     9b0:	42001800 	.word	0x42001800
     9b4:	42001c00 	.word	0x42001c00
     9b8:	42001400 	.word	0x42001400
     9bc:	42000800 	.word	0x42000800
     9c0:	42000c00 	.word	0x42000c00
     9c4:	00040003 	.word	0x00040003
     9c8:	00060003 	.word	0x00060003
     9cc:	00070003 	.word	0x00070003
     9d0:	001e0003 	.word	0x001e0003
     9d4:	001f0003 	.word	0x001f0003
     9d8:	00080003 	.word	0x00080003
     9dc:	000a0003 	.word	0x000a0003
     9e0:	000b0003 	.word	0x000b0003
     9e4:	00100003 	.word	0x00100003
     9e8:	00120003 	.word	0x00120003
     9ec:	00130003 	.word	0x00130003
     9f0:	000c0003 	.word	0x000c0003
     9f4:	000e0003 	.word	0x000e0003
     9f8:	000f0003 	.word	0x000f0003
     9fc:	00160003 	.word	0x00160003
     a00:	00180003 	.word	0x00180003
     a04:	00190003 	.word	0x00190003
     a08:	00050003 	.word	0x00050003
     a0c:	00010003 	.word	0x00010003
     a10:	00090003 	.word	0x00090003
     a14:	00110003 	.word	0x00110003
     a18:	000d0003 	.word	0x000d0003
     a1c:	00170003 	.word	0x00170003

00000a20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a20:	b530      	push	{r4, r5, lr}
     a22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a24:	4c0a      	ldr	r4, [pc, #40]	; (a50 <_sercom_get_sercom_inst_index+0x30>)
     a26:	466b      	mov	r3, sp
     a28:	0022      	movs	r2, r4
     a2a:	ca32      	ldmia	r2!, {r1, r4, r5}
     a2c:	c332      	stmia	r3!, {r1, r4, r5}
     a2e:	ca32      	ldmia	r2!, {r1, r4, r5}
     a30:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a32:	2300      	movs	r3, #0
     a34:	2b05      	cmp	r3, #5
     a36:	d808      	bhi.n	a4a <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a38:	009a      	lsls	r2, r3, #2
     a3a:	4669      	mov	r1, sp
     a3c:	5852      	ldr	r2, [r2, r1]
     a3e:	4282      	cmp	r2, r0
     a40:	d001      	beq.n	a46 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a42:	3301      	adds	r3, #1
     a44:	e7f6      	b.n	a34 <_sercom_get_sercom_inst_index+0x14>
			return i;
     a46:	b2d8      	uxtb	r0, r3
     a48:	e000      	b.n	a4c <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a4a:	2000      	movs	r0, #0
}
     a4c:	b007      	add	sp, #28
     a4e:	bd30      	pop	{r4, r5, pc}
     a50:	00004964 	.word	0x00004964

00000a54 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a54:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a56:	2202      	movs	r2, #2
     a58:	761a      	strb	r2, [r3, #24]
}
     a5a:	4770      	bx	lr

00000a5c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	b087      	sub	sp, #28
     a60:	0007      	movs	r7, r0
     a62:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a64:	6806      	ldr	r6, [r0, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a66:	ab05      	add	r3, sp, #20
     a68:	2280      	movs	r2, #128	; 0x80
     a6a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a6c:	2200      	movs	r2, #0
     a6e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a70:	2101      	movs	r1, #1
     a72:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     a74:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     a76:	782b      	ldrb	r3, [r5, #0]
     a78:	2b00      	cmp	r3, #0
     a7a:	d101      	bne.n	a80 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a7c:	ab05      	add	r3, sp, #20
     a7e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     a80:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a82:	9301      	str	r3, [sp, #4]
     a84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     a86:	9302      	str	r3, [sp, #8]
     a88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     a8a:	9303      	str	r3, [sp, #12]
     a8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     a8e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a90:	2400      	movs	r4, #0
     a92:	e006      	b.n	aa2 <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a94:	0021      	movs	r1, r4
     a96:	0030      	movs	r0, r6
     a98:	4b3d      	ldr	r3, [pc, #244]	; (b90 <_spi_set_config+0x134>)
     a9a:	4798      	blx	r3
     a9c:	e008      	b.n	ab0 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     a9e:	3401      	adds	r4, #1
     aa0:	b2e4      	uxtb	r4, r4
     aa2:	2c03      	cmp	r4, #3
     aa4:	d80d      	bhi.n	ac2 <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aa6:	00a3      	lsls	r3, r4, #2
     aa8:	aa01      	add	r2, sp, #4
     aaa:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     aac:	2800      	cmp	r0, #0
     aae:	d0f1      	beq.n	a94 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     ab0:	1c43      	adds	r3, r0, #1
     ab2:	d0f4      	beq.n	a9e <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ab4:	a905      	add	r1, sp, #20
     ab6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ab8:	0c00      	lsrs	r0, r0, #16
     aba:	b2c0      	uxtb	r0, r0
     abc:	4b35      	ldr	r3, [pc, #212]	; (b94 <_spi_set_config+0x138>)
     abe:	4798      	blx	r3
     ac0:	e7ed      	b.n	a9e <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     ac2:	782b      	ldrb	r3, [r5, #0]
     ac4:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     ac6:	7c2b      	ldrb	r3, [r5, #16]
     ac8:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     aca:	7cab      	ldrb	r3, [r5, #18]
     acc:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     ace:	7d2b      	ldrb	r3, [r5, #20]
     ad0:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     ad2:	2200      	movs	r2, #0
     ad4:	466b      	mov	r3, sp
     ad6:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     ad8:	782b      	ldrb	r3, [r5, #0]
     ada:	2b01      	cmp	r3, #1
     adc:	d014      	beq.n	b08 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     ade:	782b      	ldrb	r3, [r5, #0]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d127      	bne.n	b34 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     ae4:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     ae6:	8baa      	ldrh	r2, [r5, #28]
     ae8:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     aea:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     aec:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     aee:	7fef      	ldrb	r7, [r5, #31]
     af0:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     af2:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     af4:	4320      	orrs	r0, r4
     af6:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     af8:	2020      	movs	r0, #32
     afa:	5c28      	ldrb	r0, [r5, r0]
     afc:	2800      	cmp	r0, #0
     afe:	d01b      	beq.n	b38 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     b00:	2140      	movs	r1, #64	; 0x40
     b02:	4311      	orrs	r1, r2
     b04:	b289      	uxth	r1, r1
     b06:	e017      	b.n	b38 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b08:	6838      	ldr	r0, [r7, #0]
     b0a:	4b23      	ldr	r3, [pc, #140]	; (b98 <_spi_set_config+0x13c>)
     b0c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b0e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b10:	b2c0      	uxtb	r0, r0
     b12:	4b22      	ldr	r3, [pc, #136]	; (b9c <_spi_set_config+0x140>)
     b14:	4798      	blx	r3
     b16:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     b18:	466b      	mov	r3, sp
     b1a:	1c9a      	adds	r2, r3, #2
     b1c:	69a8      	ldr	r0, [r5, #24]
     b1e:	4b20      	ldr	r3, [pc, #128]	; (ba0 <_spi_set_config+0x144>)
     b20:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     b22:	2800      	cmp	r0, #0
     b24:	d001      	beq.n	b2a <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     b26:	2017      	movs	r0, #23
     b28:	e030      	b.n	b8c <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     b2a:	466b      	mov	r3, sp
     b2c:	3302      	adds	r3, #2
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	7333      	strb	r3, [r6, #12]
     b32:	e7d4      	b.n	ade <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     b34:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     b36:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     b38:	686a      	ldr	r2, [r5, #4]
     b3a:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     b3c:	68aa      	ldr	r2, [r5, #8]
     b3e:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     b40:	68ea      	ldr	r2, [r5, #12]
     b42:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     b44:	7c2a      	ldrb	r2, [r5, #16]
     b46:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b48:	7c69      	ldrb	r1, [r5, #17]
     b4a:	2900      	cmp	r1, #0
     b4c:	d103      	bne.n	b56 <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b4e:	4915      	ldr	r1, [pc, #84]	; (ba4 <_spi_set_config+0x148>)
     b50:	7889      	ldrb	r1, [r1, #2]
     b52:	0789      	lsls	r1, r1, #30
     b54:	d501      	bpl.n	b5a <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b56:	2180      	movs	r1, #128	; 0x80
     b58:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     b5a:	7ca9      	ldrb	r1, [r5, #18]
     b5c:	2900      	cmp	r1, #0
     b5e:	d002      	beq.n	b66 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b60:	2180      	movs	r1, #128	; 0x80
     b62:	0289      	lsls	r1, r1, #10
     b64:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     b66:	7ce9      	ldrb	r1, [r5, #19]
     b68:	2900      	cmp	r1, #0
     b6a:	d002      	beq.n	b72 <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     b6c:	2180      	movs	r1, #128	; 0x80
     b6e:	0089      	lsls	r1, r1, #2
     b70:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     b72:	7d29      	ldrb	r1, [r5, #20]
     b74:	2900      	cmp	r1, #0
     b76:	d002      	beq.n	b7e <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b78:	2180      	movs	r1, #128	; 0x80
     b7a:	0189      	lsls	r1, r1, #6
     b7c:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     b7e:	6831      	ldr	r1, [r6, #0]
     b80:	430b      	orrs	r3, r1
     b82:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     b84:	6873      	ldr	r3, [r6, #4]
     b86:	431a      	orrs	r2, r3
     b88:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     b8a:	2000      	movs	r0, #0
}
     b8c:	b007      	add	sp, #28
     b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b90:	000008a9 	.word	0x000008a9
     b94:	000039e1 	.word	0x000039e1
     b98:	00000a21 	.word	0x00000a21
     b9c:	000038c5 	.word	0x000038c5
     ba0:	00000795 	.word	0x00000795
     ba4:	41002000 	.word	0x41002000

00000ba8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
     baa:	b085      	sub	sp, #20
     bac:	0005      	movs	r5, r0
     bae:	000c      	movs	r4, r1
     bb0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     bb2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     bb4:	680b      	ldr	r3, [r1, #0]
     bb6:	079b      	lsls	r3, r3, #30
     bb8:	d502      	bpl.n	bc0 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     bba:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     bbc:	b005      	add	sp, #20
     bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     bc0:	680b      	ldr	r3, [r1, #0]
     bc2:	07db      	lsls	r3, r3, #31
     bc4:	d501      	bpl.n	bca <spi_init+0x22>
		return STATUS_BUSY;
     bc6:	2005      	movs	r0, #5
     bc8:	e7f8      	b.n	bbc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bca:	0008      	movs	r0, r1
     bcc:	4b28      	ldr	r3, [pc, #160]	; (c70 <spi_init+0xc8>)
     bce:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     bd0:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bd2:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bd4:	2301      	movs	r3, #1
     bd6:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     bd8:	4a26      	ldr	r2, [pc, #152]	; (c74 <spi_init+0xcc>)
     bda:	6a11      	ldr	r1, [r2, #32]
     bdc:	430b      	orrs	r3, r1
     bde:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     be0:	2724      	movs	r7, #36	; 0x24
     be2:	5df3      	ldrb	r3, [r6, r7]
     be4:	a903      	add	r1, sp, #12
     be6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     be8:	b2c3      	uxtb	r3, r0
     bea:	9301      	str	r3, [sp, #4]
     bec:	0018      	movs	r0, r3
     bee:	4b22      	ldr	r3, [pc, #136]	; (c78 <spi_init+0xd0>)
     bf0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bf2:	9801      	ldr	r0, [sp, #4]
     bf4:	4b21      	ldr	r3, [pc, #132]	; (c7c <spi_init+0xd4>)
     bf6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bf8:	5df0      	ldrb	r0, [r6, r7]
     bfa:	2100      	movs	r1, #0
     bfc:	4b20      	ldr	r3, [pc, #128]	; (c80 <spi_init+0xd8>)
     bfe:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     c00:	7833      	ldrb	r3, [r6, #0]
     c02:	2b01      	cmp	r3, #1
     c04:	d008      	beq.n	c18 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     c06:	7833      	ldrb	r3, [r6, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d103      	bne.n	c14 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     c0c:	6823      	ldr	r3, [r4, #0]
     c0e:	2208      	movs	r2, #8
     c10:	4313      	orrs	r3, r2
     c12:	6023      	str	r3, [r4, #0]
{
     c14:	2300      	movs	r3, #0
     c16:	e00b      	b.n	c30 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     c18:	6823      	ldr	r3, [r4, #0]
     c1a:	220c      	movs	r2, #12
     c1c:	4313      	orrs	r3, r2
     c1e:	6023      	str	r3, [r4, #0]
     c20:	e7f1      	b.n	c06 <spi_init+0x5e>
		module->callback[i]        = NULL;
     c22:	1c9a      	adds	r2, r3, #2
     c24:	0092      	lsls	r2, r2, #2
     c26:	18aa      	adds	r2, r5, r2
     c28:	2100      	movs	r1, #0
     c2a:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     c2c:	3301      	adds	r3, #1
     c2e:	b2db      	uxtb	r3, r3
     c30:	2b06      	cmp	r3, #6
     c32:	d9f6      	bls.n	c22 <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     c34:	2200      	movs	r2, #0
     c36:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     c38:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     c3a:	2300      	movs	r3, #0
     c3c:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     c3e:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     c40:	3236      	adds	r2, #54	; 0x36
     c42:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     c44:	3201      	adds	r2, #1
     c46:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     c48:	3201      	adds	r2, #1
     c4a:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     c4c:	3a35      	subs	r2, #53	; 0x35
     c4e:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     c50:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     c52:	6828      	ldr	r0, [r5, #0]
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <spi_init+0xc8>)
     c56:	4798      	blx	r3
     c58:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     c5a:	490a      	ldr	r1, [pc, #40]	; (c84 <spi_init+0xdc>)
     c5c:	4b0a      	ldr	r3, [pc, #40]	; (c88 <spi_init+0xe0>)
     c5e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c60:	00a4      	lsls	r4, r4, #2
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <spi_init+0xe4>)
     c64:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     c66:	0031      	movs	r1, r6
     c68:	0028      	movs	r0, r5
     c6a:	4b09      	ldr	r3, [pc, #36]	; (c90 <spi_init+0xe8>)
     c6c:	4798      	blx	r3
     c6e:	e7a5      	b.n	bbc <spi_init+0x14>
     c70:	00000a21 	.word	0x00000a21
     c74:	40000400 	.word	0x40000400
     c78:	000038a9 	.word	0x000038a9
     c7c:	00003821 	.word	0x00003821
     c80:	0000085d 	.word	0x0000085d
     c84:	00001105 	.word	0x00001105
     c88:	000031ed 	.word	0x000031ed
     c8c:	20000a0c 	.word	0x20000a0c
     c90:	00000a5d 	.word	0x00000a5d

00000c94 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c96:	0004      	movs	r4, r0
     c98:	000e      	movs	r6, r1
     c9a:	0017      	movs	r7, r2
     c9c:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     c9e:	2338      	movs	r3, #56	; 0x38
     ca0:	5cc3      	ldrb	r3, [r0, r3]
     ca2:	2b05      	cmp	r3, #5
     ca4:	d06d      	beq.n	d82 <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     ca6:	2a00      	cmp	r2, #0
     ca8:	d101      	bne.n	cae <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     caa:	2217      	movs	r2, #23
     cac:	e06a      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     cae:	79c3      	ldrb	r3, [r0, #7]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d101      	bne.n	cb8 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     cb4:	221c      	movs	r2, #28
     cb6:	e065      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     cb8:	7943      	ldrb	r3, [r0, #5]
     cba:	2b00      	cmp	r3, #0
     cbc:	d103      	bne.n	cc6 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cbe:	6803      	ldr	r3, [r0, #0]
     cc0:	7e1b      	ldrb	r3, [r3, #24]
     cc2:	079b      	lsls	r3, r3, #30
     cc4:	d401      	bmi.n	cca <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     cc6:	2000      	movs	r0, #0
     cc8:	e037      	b.n	d3a <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     cca:	4b2f      	ldr	r3, [pc, #188]	; (d88 <spi_read_buffer_wait+0xf4>)
     ccc:	4798      	blx	r3
     cce:	e7fa      	b.n	cc6 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cd0:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     cd2:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     cd4:	07d2      	lsls	r2, r2, #31
     cd6:	d5fb      	bpl.n	cd0 <spi_read_buffer_wait+0x3c>
     cd8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     cda:	07d2      	lsls	r2, r2, #31
     cdc:	d534      	bpl.n	d48 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     cde:	05ea      	lsls	r2, r5, #23
     ce0:	0dd2      	lsrs	r2, r2, #23
     ce2:	629a      	str	r2, [r3, #40]	; 0x28
     ce4:	e030      	b.n	d48 <spi_read_buffer_wait+0xb4>
     ce6:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ce8:	4a28      	ldr	r2, [pc, #160]	; (d8c <spi_read_buffer_wait+0xf8>)
     cea:	4293      	cmp	r3, r2
     cec:	d805      	bhi.n	cfa <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cee:	6822      	ldr	r2, [r4, #0]
     cf0:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     cf2:	0752      	lsls	r2, r2, #29
     cf4:	d401      	bmi.n	cfa <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     cf6:	3301      	adds	r3, #1
     cf8:	e7f6      	b.n	ce8 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     cfa:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cfc:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     cfe:	0792      	lsls	r2, r2, #30
     d00:	d404      	bmi.n	d0c <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d02:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     d04:	075b      	lsls	r3, r3, #29
     d06:	d422      	bmi.n	d4e <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     d08:	2212      	movs	r2, #18
     d0a:	e03b      	b.n	d84 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     d0c:	0020      	movs	r0, r4
     d0e:	4b1e      	ldr	r3, [pc, #120]	; (d88 <spi_read_buffer_wait+0xf4>)
     d10:	4798      	blx	r3
				return STATUS_ABORTED;
     d12:	2204      	movs	r2, #4
     d14:	e036      	b.n	d84 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     d16:	2200      	movs	r2, #0
     d18:	e026      	b.n	d68 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d1a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d1c:	05ff      	lsls	r7, r7, #23
     d1e:	0dff      	lsrs	r7, r7, #23
     d20:	e001      	b.n	d26 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     d22:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     d24:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     d26:	2a00      	cmp	r2, #0
     d28:	d12c      	bne.n	d84 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     d2a:	1c43      	adds	r3, r0, #1
     d2c:	b29b      	uxth	r3, r3
     d2e:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d30:	79a2      	ldrb	r2, [r4, #6]
     d32:	2a01      	cmp	r2, #1
     d34:	d01e      	beq.n	d74 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     d36:	0018      	movs	r0, r3
     d38:	000f      	movs	r7, r1
	while (length--) {
     d3a:	1e79      	subs	r1, r7, #1
     d3c:	b289      	uxth	r1, r1
     d3e:	2f00      	cmp	r7, #0
     d40:	d01d      	beq.n	d7e <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     d42:	7963      	ldrb	r3, [r4, #5]
     d44:	2b01      	cmp	r3, #1
     d46:	d0c3      	beq.n	cd0 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     d48:	7963      	ldrb	r3, [r4, #5]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d0cb      	beq.n	ce6 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d4e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d50:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     d52:	0752      	lsls	r2, r2, #29
     d54:	d5fb      	bpl.n	d4e <spi_read_buffer_wait+0xba>
     d56:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     d58:	0752      	lsls	r2, r2, #29
     d5a:	d5e2      	bpl.n	d22 <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d5c:	8b5a      	ldrh	r2, [r3, #26]
     d5e:	0752      	lsls	r2, r2, #29
     d60:	d5d9      	bpl.n	d16 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d62:	2204      	movs	r2, #4
     d64:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     d66:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d68:	79a7      	ldrb	r7, [r4, #6]
     d6a:	2f01      	cmp	r7, #1
     d6c:	d0d5      	beq.n	d1a <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d70:	b2ff      	uxtb	r7, r7
     d72:	e7d8      	b.n	d26 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     d74:	3002      	adds	r0, #2
     d76:	0a3f      	lsrs	r7, r7, #8
     d78:	54f7      	strb	r7, [r6, r3]
     d7a:	b283      	uxth	r3, r0
     d7c:	e7db      	b.n	d36 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     d7e:	2200      	movs	r2, #0
     d80:	e000      	b.n	d84 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     d82:	2205      	movs	r2, #5
}
     d84:	0010      	movs	r0, r2
     d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d88:	00000a55 	.word	0x00000a55
     d8c:	00002710 	.word	0x00002710

00000d90 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     d90:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d92:	7943      	ldrb	r3, [r0, #5]
     d94:	2b01      	cmp	r3, #1
     d96:	d001      	beq.n	d9c <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     d98:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     d9a:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     d9c:	7a03      	ldrb	r3, [r0, #8]
     d9e:	2b00      	cmp	r3, #0
     da0:	d16c      	bne.n	e7c <spi_select_slave+0xec>
		if (select) {
     da2:	2a00      	cmp	r2, #0
     da4:	d058      	beq.n	e58 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     da6:	784b      	ldrb	r3, [r1, #1]
     da8:	2b00      	cmp	r3, #0
     daa:	d043      	beq.n	e34 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dac:	6803      	ldr	r3, [r0, #0]
     dae:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     db0:	07db      	lsls	r3, r3, #31
     db2:	d411      	bmi.n	dd8 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     db4:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     db6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     db8:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     dba:	2900      	cmp	r1, #0
     dbc:	d10a      	bne.n	dd4 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     dbe:	01db      	lsls	r3, r3, #7
     dc0:	4931      	ldr	r1, [pc, #196]	; (e88 <spi_select_slave+0xf8>)
     dc2:	468c      	mov	ip, r1
     dc4:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dc6:	211f      	movs	r1, #31
     dc8:	4011      	ands	r1, r2
     dca:	2201      	movs	r2, #1
     dcc:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     dce:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     dd0:	2005      	movs	r0, #5
     dd2:	e7e2      	b.n	d9a <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
     dd4:	2300      	movs	r3, #0
     dd6:	e7f6      	b.n	dc6 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     dd8:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     dda:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     ddc:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     dde:	2c00      	cmp	r4, #0
     de0:	d104      	bne.n	dec <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     de2:	01db      	lsls	r3, r3, #7
     de4:	4c28      	ldr	r4, [pc, #160]	; (e88 <spi_select_slave+0xf8>)
     de6:	46a4      	mov	ip, r4
     de8:	4463      	add	r3, ip
     dea:	e000      	b.n	dee <spi_select_slave+0x5e>
		return NULL;
     dec:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dee:	241f      	movs	r4, #31
     df0:	4014      	ands	r4, r2
     df2:	2201      	movs	r2, #1
     df4:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     df6:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     df8:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     dfa:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dfc:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     dfe:	07c9      	lsls	r1, r1, #31
     e00:	d500      	bpl.n	e04 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e02:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     e04:	79c3      	ldrb	r3, [r0, #7]
     e06:	2b00      	cmp	r3, #0
     e08:	d13a      	bne.n	e80 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e0a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e0c:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     e0e:	0752      	lsls	r2, r2, #29
     e10:	d5fb      	bpl.n	e0a <spi_select_slave+0x7a>
     e12:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     e14:	0752      	lsls	r2, r2, #29
     e16:	d535      	bpl.n	e84 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e18:	8b5a      	ldrh	r2, [r3, #26]
     e1a:	0752      	lsls	r2, r2, #29
     e1c:	d501      	bpl.n	e22 <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     e1e:	2204      	movs	r2, #4
     e20:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e22:	7982      	ldrb	r2, [r0, #6]
     e24:	2a01      	cmp	r2, #1
     e26:	d002      	beq.n	e2e <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     e2a:	2000      	movs	r0, #0
     e2c:	e7b5      	b.n	d9a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e30:	2000      	movs	r0, #0
     e32:	e7b2      	b.n	d9a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     e34:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e36:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e38:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e3a:	2900      	cmp	r1, #0
     e3c:	d10a      	bne.n	e54 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     e3e:	01db      	lsls	r3, r3, #7
     e40:	4911      	ldr	r1, [pc, #68]	; (e88 <spi_select_slave+0xf8>)
     e42:	468c      	mov	ip, r1
     e44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e46:	211f      	movs	r1, #31
     e48:	4011      	ands	r1, r2
     e4a:	2201      	movs	r2, #1
     e4c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     e4e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     e50:	2000      	movs	r0, #0
     e52:	e7a2      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e54:	2300      	movs	r3, #0
     e56:	e7f6      	b.n	e46 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     e58:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e5a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e5c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e5e:	2900      	cmp	r1, #0
     e60:	d10a      	bne.n	e78 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     e62:	01db      	lsls	r3, r3, #7
     e64:	4908      	ldr	r1, [pc, #32]	; (e88 <spi_select_slave+0xf8>)
     e66:	468c      	mov	ip, r1
     e68:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e6a:	211f      	movs	r1, #31
     e6c:	4011      	ands	r1, r2
     e6e:	2201      	movs	r2, #1
     e70:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     e72:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     e74:	2000      	movs	r0, #0
     e76:	e790      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e78:	2300      	movs	r3, #0
     e7a:	e7f6      	b.n	e6a <spi_select_slave+0xda>
     e7c:	2000      	movs	r0, #0
     e7e:	e78c      	b.n	d9a <spi_select_slave+0xa>
     e80:	2000      	movs	r0, #0
     e82:	e78a      	b.n	d9a <spi_select_slave+0xa>
     e84:	2000      	movs	r0, #0
     e86:	e788      	b.n	d9a <spi_select_slave+0xa>
     e88:	41004400 	.word	0x41004400

00000e8c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8e:	46d6      	mov	lr, sl
     e90:	464f      	mov	r7, r9
     e92:	4646      	mov	r6, r8
     e94:	b5c0      	push	{r6, r7, lr}
     e96:	b082      	sub	sp, #8
     e98:	0004      	movs	r4, r0
     e9a:	468a      	mov	sl, r1
     e9c:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e9e:	2338      	movs	r3, #56	; 0x38
     ea0:	5cc3      	ldrb	r3, [r0, r3]
     ea2:	2b05      	cmp	r3, #5
     ea4:	d100      	bne.n	ea8 <spi_write_buffer_wait+0x1c>
     ea6:	e0d8      	b.n	105a <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     ea8:	2a00      	cmp	r2, #0
     eaa:	d101      	bne.n	eb0 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     eac:	2017      	movs	r0, #23
     eae:	e0d5      	b.n	105c <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     eb0:	7943      	ldrb	r3, [r0, #5]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d103      	bne.n	ebe <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     eb6:	6803      	ldr	r3, [r0, #0]
     eb8:	7e1b      	ldrb	r3, [r3, #24]
     eba:	079b      	lsls	r3, r3, #30
     ebc:	d402      	bmi.n	ec4 <spi_write_buffer_wait+0x38>
     ebe:	46bc      	mov	ip, r7
     ec0:	2600      	movs	r6, #0
     ec2:	e025      	b.n	f10 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     ec4:	4b6a      	ldr	r3, [pc, #424]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ec6:	4798      	blx	r3
     ec8:	e7f9      	b.n	ebe <spi_write_buffer_wait+0x32>
     eca:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ecc:	4a69      	ldr	r2, [pc, #420]	; (1074 <spi_write_buffer_wait+0x1e8>)
     ece:	4293      	cmp	r3, r2
     ed0:	d805      	bhi.n	ede <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ed2:	6822      	ldr	r2, [r4, #0]
     ed4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     ed6:	07d2      	lsls	r2, r2, #31
     ed8:	d401      	bmi.n	ede <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     eda:	3301      	adds	r3, #1
     edc:	e7f6      	b.n	ecc <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ede:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ee0:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     ee2:	0792      	lsls	r2, r2, #30
     ee4:	d404      	bmi.n	ef0 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ee6:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     ee8:	07db      	lsls	r3, r3, #31
     eea:	d418      	bmi.n	f1e <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     eec:	2012      	movs	r0, #18
     eee:	e0b5      	b.n	105c <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     ef0:	0020      	movs	r0, r4
     ef2:	4b5f      	ldr	r3, [pc, #380]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ef4:	4798      	blx	r3
				return STATUS_ABORTED;
     ef6:	2004      	movs	r0, #4
     ef8:	e0b0      	b.n	105c <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     efa:	3602      	adds	r6, #2
     efc:	b2b6      	uxth	r6, r6
     efe:	4652      	mov	r2, sl
     f00:	5dd2      	ldrb	r2, [r2, r7]
     f02:	0212      	lsls	r2, r2, #8
     f04:	4302      	orrs	r2, r0
     f06:	e017      	b.n	f38 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     f08:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     f0a:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     f0c:	2b00      	cmp	r3, #0
     f0e:	d11a      	bne.n	f46 <spi_write_buffer_wait+0xba>
	while (length--) {
     f10:	1e79      	subs	r1, r7, #1
     f12:	b289      	uxth	r1, r1
     f14:	2f00      	cmp	r7, #0
     f16:	d06c      	beq.n	ff2 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     f18:	7963      	ldrb	r3, [r4, #5]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d0d5      	beq.n	eca <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f1e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f20:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     f22:	07d2      	lsls	r2, r2, #31
     f24:	d5fb      	bpl.n	f1e <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     f26:	1c77      	adds	r7, r6, #1
     f28:	b2bf      	uxth	r7, r7
     f2a:	4652      	mov	r2, sl
     f2c:	5d90      	ldrb	r0, [r2, r6]
     f2e:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f30:	79a5      	ldrb	r5, [r4, #6]
     f32:	2d01      	cmp	r5, #1
     f34:	d0e1      	beq.n	efa <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     f36:	003e      	movs	r6, r7
     f38:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     f3a:	07f8      	lsls	r0, r7, #31
     f3c:	d5e4      	bpl.n	f08 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f3e:	05d2      	lsls	r2, r2, #23
     f40:	0dd2      	lsrs	r2, r2, #23
     f42:	629a      	str	r2, [r3, #40]	; 0x28
     f44:	e7e0      	b.n	f08 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     f46:	7963      	ldrb	r3, [r4, #5]
     f48:	2b00      	cmp	r3, #0
     f4a:	d040      	beq.n	fce <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f4c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f4e:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     f50:	0752      	lsls	r2, r2, #29
     f52:	d5fb      	bpl.n	f4c <spi_write_buffer_wait+0xc0>
     f54:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f56:	0752      	lsls	r2, r2, #29
     f58:	d508      	bpl.n	f6c <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f5a:	8b5a      	ldrh	r2, [r3, #26]
     f5c:	0752      	lsls	r2, r2, #29
     f5e:	d501      	bpl.n	f64 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f60:	2204      	movs	r2, #4
     f62:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f64:	79a2      	ldrb	r2, [r4, #6]
     f66:	2a01      	cmp	r2, #1
     f68:	d041      	beq.n	fee <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     f6c:	4660      	mov	r0, ip
     f6e:	3801      	subs	r0, #1
     f70:	b283      	uxth	r3, r0
     f72:	469c      	mov	ip, r3
     f74:	000f      	movs	r7, r1
     f76:	e7cb      	b.n	f10 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
     f78:	3602      	adds	r6, #2
     f7a:	4655      	mov	r5, sl
     f7c:	5c2f      	ldrb	r7, [r5, r0]
     f7e:	023f      	lsls	r7, r7, #8
     f80:	4640      	mov	r0, r8
     f82:	4307      	orrs	r7, r0
     f84:	b2b0      	uxth	r0, r6
     f86:	e01b      	b.n	fc0 <spi_write_buffer_wait+0x134>
						length--;
     f88:	3901      	subs	r1, #1
     f8a:	b289      	uxth	r1, r1
     f8c:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f8e:	6822      	ldr	r2, [r4, #0]
     f90:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     f92:	0752      	lsls	r2, r2, #29
     f94:	d41d      	bmi.n	fd2 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f96:	3301      	adds	r3, #1
     f98:	4a36      	ldr	r2, [pc, #216]	; (1074 <spi_write_buffer_wait+0x1e8>)
     f9a:	4293      	cmp	r3, r2
     f9c:	d819      	bhi.n	fd2 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
     f9e:	2900      	cmp	r1, #0
     fa0:	d0f5      	beq.n	f8e <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fa2:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fa4:	7e17      	ldrb	r7, [r2, #24]
     fa6:	07f8      	lsls	r0, r7, #31
     fa8:	d5f1      	bpl.n	f8e <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
     faa:	1c70      	adds	r0, r6, #1
     fac:	b280      	uxth	r0, r0
     fae:	4655      	mov	r5, sl
     fb0:	5dad      	ldrb	r5, [r5, r6]
     fb2:	46a8      	mov	r8, r5
     fb4:	466f      	mov	r7, sp
     fb6:	80fd      	strh	r5, [r7, #6]
     fb8:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fba:	79a5      	ldrb	r5, [r4, #6]
     fbc:	2d01      	cmp	r5, #1
     fbe:	d0db      	beq.n	f78 <spi_write_buffer_wait+0xec>
     fc0:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     fc2:	07f5      	lsls	r5, r6, #31
     fc4:	d5e0      	bpl.n	f88 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fc6:	05ff      	lsls	r7, r7, #23
     fc8:	0dff      	lsrs	r7, r7, #23
     fca:	6297      	str	r7, [r2, #40]	; 0x28
     fcc:	e7dc      	b.n	f88 <spi_write_buffer_wait+0xfc>
     fce:	2300      	movs	r3, #0
     fd0:	e7e2      	b.n	f98 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fd2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     fd4:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
     fd6:	0792      	lsls	r2, r2, #30
     fd8:	d404      	bmi.n	fe4 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fda:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     fdc:	075b      	lsls	r3, r3, #29
     fde:	d4b5      	bmi.n	f4c <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
     fe0:	2012      	movs	r0, #18
     fe2:	e03b      	b.n	105c <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
     fe4:	0020      	movs	r0, r4
     fe6:	4b22      	ldr	r3, [pc, #136]	; (1070 <spi_write_buffer_wait+0x1e4>)
     fe8:	4798      	blx	r3
					return STATUS_ABORTED;
     fea:	2004      	movs	r0, #4
     fec:	e036      	b.n	105c <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ff0:	e7bc      	b.n	f6c <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     ff2:	7962      	ldrb	r2, [r4, #5]
     ff4:	2a01      	cmp	r2, #1
     ff6:	d006      	beq.n	1006 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     ff8:	2a00      	cmp	r2, #0
     ffa:	d135      	bne.n	1068 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
     ffc:	79e3      	ldrb	r3, [r4, #7]
     ffe:	2b00      	cmp	r3, #0
    1000:	d11a      	bne.n	1038 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1002:	2000      	movs	r0, #0
    1004:	e02a      	b.n	105c <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1006:	6823      	ldr	r3, [r4, #0]
    1008:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    100a:	079b      	lsls	r3, r3, #30
    100c:	d5fb      	bpl.n	1006 <spi_write_buffer_wait+0x17a>
    100e:	e7f3      	b.n	ff8 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1010:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1012:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1014:	0752      	lsls	r2, r2, #29
    1016:	d529      	bpl.n	106c <spi_write_buffer_wait+0x1e0>
    1018:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    101a:	0752      	lsls	r2, r2, #29
    101c:	d508      	bpl.n	1030 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    101e:	8b5a      	ldrh	r2, [r3, #26]
    1020:	0752      	lsls	r2, r2, #29
    1022:	d501      	bpl.n	1028 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1024:	2204      	movs	r2, #4
    1026:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1028:	79a2      	ldrb	r2, [r4, #6]
    102a:	2a01      	cmp	r2, #1
    102c:	d011      	beq.n	1052 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    1030:	4660      	mov	r0, ip
    1032:	3801      	subs	r0, #1
    1034:	b283      	uxth	r3, r0
    1036:	469c      	mov	ip, r3
			while (flush_length) {
    1038:	4663      	mov	r3, ip
    103a:	2b00      	cmp	r3, #0
    103c:	d00b      	beq.n	1056 <spi_write_buffer_wait+0x1ca>
    103e:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1040:	4a0c      	ldr	r2, [pc, #48]	; (1074 <spi_write_buffer_wait+0x1e8>)
    1042:	4293      	cmp	r3, r2
    1044:	d8e4      	bhi.n	1010 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1046:	6822      	ldr	r2, [r4, #0]
    1048:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    104a:	0752      	lsls	r2, r2, #29
    104c:	d4e0      	bmi.n	1010 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    104e:	3301      	adds	r3, #1
    1050:	e7f6      	b.n	1040 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1054:	e7ec      	b.n	1030 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1056:	2000      	movs	r0, #0
    1058:	e000      	b.n	105c <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    105a:	2005      	movs	r0, #5
}
    105c:	b002      	add	sp, #8
    105e:	bc1c      	pop	{r2, r3, r4}
    1060:	4690      	mov	r8, r2
    1062:	4699      	mov	r9, r3
    1064:	46a2      	mov	sl, r4
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1068:	2000      	movs	r0, #0
    106a:	e7f7      	b.n	105c <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    106c:	2012      	movs	r0, #18
    106e:	e7f5      	b.n	105c <spi_write_buffer_wait+0x1d0>
    1070:	00000a55 	.word	0x00000a55
    1074:	00002710 	.word	0x00002710

00001078 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1078:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    107a:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    107c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    107e:	780a      	ldrb	r2, [r1, #0]
    1080:	b2d2      	uxtb	r2, r2
    1082:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1084:	1c4c      	adds	r4, r1, #1
    1086:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1088:	7986      	ldrb	r6, [r0, #6]
    108a:	2e01      	cmp	r6, #1
    108c:	d007      	beq.n	109e <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    108e:	05db      	lsls	r3, r3, #23
    1090:	0ddb      	lsrs	r3, r3, #23
    1092:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1094:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1096:	3b01      	subs	r3, #1
    1098:	b29b      	uxth	r3, r3
    109a:	8683      	strh	r3, [r0, #52]	; 0x34
}
    109c:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    109e:	784b      	ldrb	r3, [r1, #1]
    10a0:	021b      	lsls	r3, r3, #8
    10a2:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    10a4:	1c8c      	adds	r4, r1, #2
    10a6:	62c4      	str	r4, [r0, #44]	; 0x2c
    10a8:	e7f1      	b.n	108e <_spi_write+0x16>
	...

000010ac <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10ac:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    10ae:	4a04      	ldr	r2, [pc, #16]	; (10c0 <_spi_write_dummy+0x14>)
    10b0:	8812      	ldrh	r2, [r2, #0]
    10b2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    10b4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    10b6:	3b01      	subs	r3, #1
    10b8:	b29b      	uxth	r3, r3
    10ba:	8643      	strh	r3, [r0, #50]	; 0x32
}
    10bc:	4770      	bx	lr
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	2000044c 	.word	0x2000044c

000010c4 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10c4:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    10c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    10c8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    10ca:	3b01      	subs	r3, #1
    10cc:	b29b      	uxth	r3, r3
    10ce:	8643      	strh	r3, [r0, #50]	; 0x32
}
    10d0:	4770      	bx	lr

000010d2 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10d2:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    10d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10d6:	05db      	lsls	r3, r3, #23
    10d8:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    10da:	b2da      	uxtb	r2, r3
    10dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
    10de:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    10e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
    10e2:	1c51      	adds	r1, r2, #1
    10e4:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10e6:	7981      	ldrb	r1, [r0, #6]
    10e8:	2901      	cmp	r1, #1
    10ea:	d004      	beq.n	10f6 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    10ec:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    10ee:	3b01      	subs	r3, #1
    10f0:	b29b      	uxth	r3, r3
    10f2:	8603      	strh	r3, [r0, #48]	; 0x30
}
    10f4:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    10f6:	0a1b      	lsrs	r3, r3, #8
    10f8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    10fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    10fc:	3301      	adds	r3, #1
    10fe:	6283      	str	r3, [r0, #40]	; 0x28
    1100:	e7f4      	b.n	10ec <_spi_read+0x1a>
	...

00001104 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1106:	0080      	lsls	r0, r0, #2
    1108:	4b6b      	ldr	r3, [pc, #428]	; (12b8 <_spi_interrupt_handler+0x1b4>)
    110a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    110c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    110e:	2337      	movs	r3, #55	; 0x37
    1110:	5ce3      	ldrb	r3, [r4, r3]
    1112:	2236      	movs	r2, #54	; 0x36
    1114:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    1116:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1118:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    111a:	7db5      	ldrb	r5, [r6, #22]
    111c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    111e:	07eb      	lsls	r3, r5, #31
    1120:	d516      	bpl.n	1150 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1122:	7963      	ldrb	r3, [r4, #5]
    1124:	2b01      	cmp	r3, #1
    1126:	d04d      	beq.n	11c4 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1128:	7963      	ldrb	r3, [r4, #5]
		if (0
    112a:	2b01      	cmp	r3, #1
    112c:	d057      	beq.n	11de <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    112e:	2b00      	cmp	r3, #0
    1130:	d10e      	bne.n	1150 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    1132:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1134:	2b00      	cmp	r3, #0
    1136:	d00b      	beq.n	1150 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1138:	0020      	movs	r0, r4
    113a:	4b60      	ldr	r3, [pc, #384]	; (12bc <_spi_interrupt_handler+0x1b8>)
    113c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    113e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1140:	b29b      	uxth	r3, r3
    1142:	2b00      	cmp	r3, #0
    1144:	d104      	bne.n	1150 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1146:	3301      	adds	r3, #1
    1148:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    114a:	7a63      	ldrb	r3, [r4, #9]
    114c:	2b01      	cmp	r3, #1
    114e:	d04a      	beq.n	11e6 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1150:	076b      	lsls	r3, r5, #29
    1152:	d511      	bpl.n	1178 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1154:	8b73      	ldrh	r3, [r6, #26]
    1156:	075b      	lsls	r3, r3, #29
    1158:	d54f      	bpl.n	11fa <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    115a:	7a63      	ldrb	r3, [r4, #9]
    115c:	2b01      	cmp	r3, #1
    115e:	d008      	beq.n	1172 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1160:	221e      	movs	r2, #30
    1162:	2338      	movs	r3, #56	; 0x38
    1164:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1166:	3b35      	subs	r3, #53	; 0x35
    1168:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    116a:	3302      	adds	r3, #2
    116c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    116e:	073b      	lsls	r3, r7, #28
    1170:	d43f      	bmi.n	11f2 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1172:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1174:	2304      	movs	r3, #4
    1176:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1178:	07ab      	lsls	r3, r5, #30
    117a:	d513      	bpl.n	11a4 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    117c:	7963      	ldrb	r3, [r4, #5]
    117e:	2b00      	cmp	r3, #0
    1180:	d10d      	bne.n	119e <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1182:	3307      	adds	r3, #7
    1184:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1186:	3b05      	subs	r3, #5
    1188:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    118a:	3301      	adds	r3, #1
    118c:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    118e:	2300      	movs	r3, #0
    1190:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1192:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1194:	3338      	adds	r3, #56	; 0x38
    1196:	2200      	movs	r2, #0
    1198:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    119a:	06fb      	lsls	r3, r7, #27
    119c:	d464      	bmi.n	1268 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    119e:	7963      	ldrb	r3, [r4, #5]
    11a0:	2b01      	cmp	r3, #1
    11a2:	d065      	beq.n	1270 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    11a4:	072b      	lsls	r3, r5, #28
    11a6:	d508      	bpl.n	11ba <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    11a8:	7963      	ldrb	r3, [r4, #5]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d105      	bne.n	11ba <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    11ae:	3308      	adds	r3, #8
    11b0:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    11b2:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    11b4:	06bb      	lsls	r3, r7, #26
    11b6:	d500      	bpl.n	11ba <_spi_interrupt_handler+0xb6>
    11b8:	e070      	b.n	129c <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    11ba:	b26d      	sxtb	r5, r5
    11bc:	2d00      	cmp	r5, #0
    11be:	da00      	bge.n	11c2 <_spi_interrupt_handler+0xbe>
    11c0:	e070      	b.n	12a4 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    11c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    11c4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    11c6:	2b00      	cmp	r3, #0
    11c8:	d1ae      	bne.n	1128 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    11ca:	0020      	movs	r0, r4
    11cc:	4b3c      	ldr	r3, [pc, #240]	; (12c0 <_spi_interrupt_handler+0x1bc>)
    11ce:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    11d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    11d2:	b29b      	uxth	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	d1a7      	bne.n	1128 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    11d8:	3301      	adds	r3, #1
    11da:	7533      	strb	r3, [r6, #20]
    11dc:	e7a4      	b.n	1128 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    11de:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    11e0:	2a00      	cmp	r2, #0
    11e2:	d1a9      	bne.n	1138 <_spi_interrupt_handler+0x34>
    11e4:	e7a3      	b.n	112e <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    11e6:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    11e8:	2b00      	cmp	r3, #0
    11ea:	d1b1      	bne.n	1150 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    11ec:	3302      	adds	r3, #2
    11ee:	75b3      	strb	r3, [r6, #22]
    11f0:	e7ae      	b.n	1150 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    11f2:	0020      	movs	r0, r4
    11f4:	69a3      	ldr	r3, [r4, #24]
    11f6:	4798      	blx	r3
    11f8:	e7bb      	b.n	1172 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    11fa:	7a63      	ldrb	r3, [r4, #9]
    11fc:	2b01      	cmp	r3, #1
    11fe:	d017      	beq.n	1230 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    1200:	0020      	movs	r0, r4
    1202:	4b30      	ldr	r3, [pc, #192]	; (12c4 <_spi_interrupt_handler+0x1c0>)
    1204:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    1206:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1208:	b29b      	uxth	r3, r3
    120a:	2b00      	cmp	r3, #0
    120c:	d1b4      	bne.n	1178 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    120e:	2200      	movs	r2, #0
    1210:	3338      	adds	r3, #56	; 0x38
    1212:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1214:	3b34      	subs	r3, #52	; 0x34
    1216:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1218:	7a63      	ldrb	r3, [r4, #9]
    121a:	2b02      	cmp	r3, #2
    121c:	d01d      	beq.n	125a <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    121e:	7a63      	ldrb	r3, [r4, #9]
    1220:	2b00      	cmp	r3, #0
    1222:	d1a9      	bne.n	1178 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1224:	07bb      	lsls	r3, r7, #30
    1226:	d5a7      	bpl.n	1178 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1228:	0020      	movs	r0, r4
    122a:	6923      	ldr	r3, [r4, #16]
    122c:	4798      	blx	r3
    122e:	e7a3      	b.n	1178 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    1230:	0020      	movs	r0, r4
    1232:	4b25      	ldr	r3, [pc, #148]	; (12c8 <_spi_interrupt_handler+0x1c4>)
    1234:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1236:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1238:	b29b      	uxth	r3, r3
    123a:	2b00      	cmp	r3, #0
    123c:	d19c      	bne.n	1178 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    123e:	3304      	adds	r3, #4
    1240:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1242:	2200      	movs	r2, #0
    1244:	3334      	adds	r3, #52	; 0x34
    1246:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1248:	3b35      	subs	r3, #53	; 0x35
    124a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    124c:	07fb      	lsls	r3, r7, #31
    124e:	d400      	bmi.n	1252 <_spi_interrupt_handler+0x14e>
    1250:	e792      	b.n	1178 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1252:	0020      	movs	r0, r4
    1254:	68e3      	ldr	r3, [r4, #12]
    1256:	4798      	blx	r3
    1258:	e78e      	b.n	1178 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    125a:	077b      	lsls	r3, r7, #29
    125c:	d400      	bmi.n	1260 <_spi_interrupt_handler+0x15c>
    125e:	e78b      	b.n	1178 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1260:	0020      	movs	r0, r4
    1262:	6963      	ldr	r3, [r4, #20]
    1264:	4798      	blx	r3
    1266:	e787      	b.n	1178 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1268:	0020      	movs	r0, r4
    126a:	69e3      	ldr	r3, [r4, #28]
    126c:	4798      	blx	r3
    126e:	e796      	b.n	119e <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1270:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1272:	2b01      	cmp	r3, #1
    1274:	d000      	beq.n	1278 <_spi_interrupt_handler+0x174>
    1276:	e795      	b.n	11a4 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1278:	79e3      	ldrb	r3, [r4, #7]
    127a:	2b00      	cmp	r3, #0
    127c:	d000      	beq.n	1280 <_spi_interrupt_handler+0x17c>
    127e:	e791      	b.n	11a4 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1280:	3302      	adds	r3, #2
    1282:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1284:	3301      	adds	r3, #1
    1286:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1288:	2200      	movs	r2, #0
    128a:	3335      	adds	r3, #53	; 0x35
    128c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    128e:	07fb      	lsls	r3, r7, #31
    1290:	d400      	bmi.n	1294 <_spi_interrupt_handler+0x190>
    1292:	e787      	b.n	11a4 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1294:	0020      	movs	r0, r4
    1296:	68e3      	ldr	r3, [r4, #12]
    1298:	4798      	blx	r3
    129a:	e783      	b.n	11a4 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    129c:	0020      	movs	r0, r4
    129e:	6a23      	ldr	r3, [r4, #32]
    12a0:	4798      	blx	r3
    12a2:	e78a      	b.n	11ba <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    12a4:	2380      	movs	r3, #128	; 0x80
    12a6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    12a8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    12aa:	067b      	lsls	r3, r7, #25
    12ac:	d400      	bmi.n	12b0 <_spi_interrupt_handler+0x1ac>
    12ae:	e788      	b.n	11c2 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    12b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12b2:	0020      	movs	r0, r4
    12b4:	4798      	blx	r3
}
    12b6:	e784      	b.n	11c2 <_spi_interrupt_handler+0xbe>
    12b8:	20000a0c 	.word	0x20000a0c
    12bc:	00001079 	.word	0x00001079
    12c0:	000010ad 	.word	0x000010ad
    12c4:	000010d3 	.word	0x000010d3
    12c8:	000010c5 	.word	0x000010c5

000012cc <FIFO_Count>:
 */
unsigned FIFO_Count(FIFO_BUFFER const *b)
{
    unsigned head, tail; /* used to avoid volatile decision */

    if (b) {
    12cc:	2800      	cmp	r0, #0
    12ce:	d003      	beq.n	12d8 <FIFO_Count+0xc>
        head = b->head;
    12d0:	6803      	ldr	r3, [r0, #0]
        tail = b->tail;
    12d2:	6840      	ldr	r0, [r0, #4]
        return head - tail;
    12d4:	1a18      	subs	r0, r3, r0
    } else {
        return 0;
    }
}
    12d6:	4770      	bx	lr
        return 0;
    12d8:	2000      	movs	r0, #0
    12da:	e7fc      	b.n	12d6 <FIFO_Count+0xa>

000012dc <FIFO_Full>:
 * @param b - pointer to FIFO_BUFFER structure
 *
 * @return true if the FIFO is full, false if it is not.
 */
bool FIFO_Full(FIFO_BUFFER const *b)
{
    12dc:	b510      	push	{r4, lr}
    12de:	1e04      	subs	r4, r0, #0
    return (b ? (FIFO_Count(b) == b->buffer_len) : true);
    12e0:	d006      	beq.n	12f0 <FIFO_Full+0x14>
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <FIFO_Full+0x1c>)
    12e4:	4798      	blx	r3
    12e6:	68e3      	ldr	r3, [r4, #12]
    12e8:	4298      	cmp	r0, r3
    12ea:	d003      	beq.n	12f4 <FIFO_Full+0x18>
    12ec:	2000      	movs	r0, #0
}
    12ee:	bd10      	pop	{r4, pc}
    return (b ? (FIFO_Count(b) == b->buffer_len) : true);
    12f0:	2001      	movs	r0, #1
    12f2:	e7fc      	b.n	12ee <FIFO_Full+0x12>
    12f4:	2001      	movs	r0, #1
    12f6:	e7fa      	b.n	12ee <FIFO_Full+0x12>
    12f8:	000012cd 	.word	0x000012cd

000012fc <FIFO_Put>:
 * @param  data_byte [in] - data to put into the FIFO
 *
 * @return true on successful add, false if not added
 */
bool FIFO_Put(FIFO_BUFFER *b, uint8_t data_byte)
{
    12fc:	b570      	push	{r4, r5, r6, lr}
    12fe:	0004      	movs	r4, r0
    1300:	000d      	movs	r5, r1
    bool status = false; /* return value */
    unsigned index;

    if (b) {
    1302:	2800      	cmp	r0, #0
    1304:	d010      	beq.n	1328 <FIFO_Put+0x2c>
        /* limit the buffer to prevent overwriting */
        if (!FIFO_Full(b)) {
    1306:	4b0a      	ldr	r3, [pc, #40]	; (1330 <FIFO_Put+0x34>)
    1308:	4798      	blx	r3
    130a:	2800      	cmp	r0, #0
    130c:	d10e      	bne.n	132c <FIFO_Put+0x30>
            index = b->head % b->buffer_len;
    130e:	6820      	ldr	r0, [r4, #0]
    1310:	68e1      	ldr	r1, [r4, #12]
    1312:	4b08      	ldr	r3, [pc, #32]	; (1334 <FIFO_Put+0x38>)
    1314:	4798      	blx	r3
            b->buffer[index] = data_byte;
    1316:	68a3      	ldr	r3, [r4, #8]
    1318:	469c      	mov	ip, r3
    131a:	4461      	add	r1, ip
    131c:	700d      	strb	r5, [r1, #0]
            b->head++;
    131e:	6823      	ldr	r3, [r4, #0]
    1320:	3301      	adds	r3, #1
    1322:	6023      	str	r3, [r4, #0]
            status = true;
    1324:	2001      	movs	r0, #1
        }
    }

    return status;
}
    1326:	bd70      	pop	{r4, r5, r6, pc}
    bool status = false; /* return value */
    1328:	2000      	movs	r0, #0
    132a:	e7fc      	b.n	1326 <FIFO_Put+0x2a>
    132c:	2000      	movs	r0, #0
    132e:	e7fa      	b.n	1326 <FIFO_Put+0x2a>
    1330:	000012dd 	.word	0x000012dd
    1334:	00004039 	.word	0x00004039

00001338 <FIFO_Init>:
 *
 * @return      none
 */
void FIFO_Init(FIFO_BUFFER *b, volatile uint8_t *buffer, unsigned buffer_len)
{
    if (b && buffer && buffer_len) {
    1338:	2800      	cmp	r0, #0
    133a:	d008      	beq.n	134e <FIFO_Init+0x16>
    133c:	2900      	cmp	r1, #0
    133e:	d006      	beq.n	134e <FIFO_Init+0x16>
    1340:	2a00      	cmp	r2, #0
    1342:	d004      	beq.n	134e <FIFO_Init+0x16>
        b->head = 0;
    1344:	2300      	movs	r3, #0
    1346:	6003      	str	r3, [r0, #0]
        b->tail = 0;
    1348:	6043      	str	r3, [r0, #4]
        b->buffer = buffer;
    134a:	6081      	str	r1, [r0, #8]
        b->buffer_len = buffer_len;
    134c:	60c2      	str	r2, [r0, #12]
    }

    return;
}
    134e:	4770      	bx	lr

00001350 <mstimer_set>:
 *
 * @param t A pointer to the timer
 * @param interval The interval before the timer expires.
 */
void mstimer_set(struct mstimer *t, unsigned long interval)
{
    1350:	b510      	push	{r4, lr}
    1352:	0004      	movs	r4, r0
    t->interval = interval;
    1354:	6041      	str	r1, [r0, #4]
    t->start = mstimer_now();
    1356:	4b02      	ldr	r3, [pc, #8]	; (1360 <mstimer_set+0x10>)
    1358:	4798      	blx	r3
    135a:	6020      	str	r0, [r4, #0]
}
    135c:	bd10      	pop	{r4, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	000028f9 	.word	0x000028f9

00001364 <fiber2_callback>:
	system_interrupt_leave_critical_section();
}

void fiber2_callback()
{
	uint8_t tempdata = UART_FIBER2->USART.DATA.reg;
    1364:	4b02      	ldr	r3, [pc, #8]	; (1370 <fiber2_callback+0xc>)
    1366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	
	if(fiber2_data_status =! data_ready)
    1368:	2200      	movs	r2, #0
    136a:	4b02      	ldr	r3, [pc, #8]	; (1374 <fiber2_callback+0x10>)
    136c:	701a      	strb	r2, [r3, #0]
		else
		{
			fiber2_data.bytes[fiber1_pointer++] = tempdata;
		}
	}
}
    136e:	4770      	bx	lr
    1370:	42001c00 	.word	0x42001c00
    1374:	20000451 	.word	0x20000451

00001378 <fiber1_callback>:
{
    1378:	b500      	push	{lr}
    137a:	b087      	sub	sp, #28
	cpu_irq_enter_critical();
    137c:	4b14      	ldr	r3, [pc, #80]	; (13d0 <fiber1_callback+0x58>)
    137e:	4798      	blx	r3
	usart_read_buffer_job(&uartfiber_inst1, &buf, 6);
    1380:	2206      	movs	r2, #6
    1382:	4669      	mov	r1, sp
    1384:	4813      	ldr	r0, [pc, #76]	; (13d4 <fiber1_callback+0x5c>)
    1386:	4b14      	ldr	r3, [pc, #80]	; (13d8 <fiber1_callback+0x60>)
    1388:	4798      	blx	r3
	uint8_t tempdata = UART_FIBER1->USART.DATA.reg;
    138a:	4b14      	ldr	r3, [pc, #80]	; (13dc <fiber1_callback+0x64>)
    138c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    138e:	b2db      	uxtb	r3, r3
		if (tempdata == '$')
    1390:	2b24      	cmp	r3, #36	; 0x24
    1392:	d00d      	beq.n	13b0 <fiber1_callback+0x38>
		else if(tempdata == '%' && fiber1_data_status == data_being_processed)
    1394:	2b25      	cmp	r3, #37	; 0x25
    1396:	d012      	beq.n	13be <fiber1_callback+0x46>
			fiber1_data.bytes[fiber1_pointer++] = tempdata;
    1398:	4811      	ldr	r0, [pc, #68]	; (13e0 <fiber1_callback+0x68>)
    139a:	7802      	ldrb	r2, [r0, #0]
    139c:	b2d2      	uxtb	r2, r2
    139e:	1c51      	adds	r1, r2, #1
    13a0:	b2c9      	uxtb	r1, r1
    13a2:	7001      	strb	r1, [r0, #0]
    13a4:	490f      	ldr	r1, [pc, #60]	; (13e4 <fiber1_callback+0x6c>)
    13a6:	548b      	strb	r3, [r1, r2]
	cpu_irq_leave_critical();
    13a8:	4b0f      	ldr	r3, [pc, #60]	; (13e8 <fiber1_callback+0x70>)
    13aa:	4798      	blx	r3
}
    13ac:	b007      	add	sp, #28
    13ae:	bd00      	pop	{pc}
			fiber1_pointer = 0;
    13b0:	2200      	movs	r2, #0
    13b2:	4b0b      	ldr	r3, [pc, #44]	; (13e0 <fiber1_callback+0x68>)
    13b4:	701a      	strb	r2, [r3, #0]
			fiber1_data_status = data_being_processed;
    13b6:	3202      	adds	r2, #2
    13b8:	4b0c      	ldr	r3, [pc, #48]	; (13ec <fiber1_callback+0x74>)
    13ba:	701a      	strb	r2, [r3, #0]
    13bc:	e7f4      	b.n	13a8 <fiber1_callback+0x30>
		else if(tempdata == '%' && fiber1_data_status == data_being_processed)
    13be:	4a0b      	ldr	r2, [pc, #44]	; (13ec <fiber1_callback+0x74>)
    13c0:	7812      	ldrb	r2, [r2, #0]
    13c2:	2a02      	cmp	r2, #2
    13c4:	d1e8      	bne.n	1398 <fiber1_callback+0x20>
			fiber1_data_status = data_ready;
    13c6:	3a01      	subs	r2, #1
    13c8:	4b08      	ldr	r3, [pc, #32]	; (13ec <fiber1_callback+0x74>)
    13ca:	701a      	strb	r2, [r3, #0]
    13cc:	e7ec      	b.n	13a8 <fiber1_callback+0x30>
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	000032d9 	.word	0x000032d9
    13d4:	20000094 	.word	0x20000094
    13d8:	00003029 	.word	0x00003029
    13dc:	42000c00 	.word	0x42000c00
    13e0:	20000458 	.word	0x20000458
    13e4:	20000454 	.word	0x20000454
    13e8:	00003319 	.word	0x00003319
    13ec:	20000450 	.word	0x20000450

000013f0 <uartfiber_init>:
{
    13f0:	b570      	push	{r4, r5, r6, lr}
    13f2:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    13f4:	2380      	movs	r3, #128	; 0x80
    13f6:	05db      	lsls	r3, r3, #23
    13f8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    13fa:	2300      	movs	r3, #0
    13fc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    13fe:	22ff      	movs	r2, #255	; 0xff
    1400:	4669      	mov	r1, sp
    1402:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1404:	2200      	movs	r2, #0
    1406:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1408:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    140a:	2101      	movs	r1, #1
    140c:	2024      	movs	r0, #36	; 0x24
    140e:	466c      	mov	r4, sp
    1410:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1412:	3001      	adds	r0, #1
    1414:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1416:	3125      	adds	r1, #37	; 0x25
    1418:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    141a:	3101      	adds	r1, #1
    141c:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    141e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1420:	3105      	adds	r1, #5
    1422:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1424:	3101      	adds	r1, #1
    1426:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1428:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    142a:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    142c:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    142e:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1430:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1432:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1434:	2313      	movs	r3, #19
    1436:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1438:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    143a:	23e1      	movs	r3, #225	; 0xe1
    143c:	019b      	lsls	r3, r3, #6
    143e:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX1;
    1440:	23c0      	movs	r3, #192	; 0xc0
    1442:	039b      	lsls	r3, r3, #14
    1444:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1446:	2301      	movs	r3, #1
    1448:	425b      	negs	r3, r3
    144a:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    144c:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    144e:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = URX_FIBER1;
    1450:	4b40      	ldr	r3, [pc, #256]	; (1554 <uartfiber_init+0x164>)
    1452:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst1, UART_FIBER1, &config_usart) != STATUS_OK);
    1454:	466a      	mov	r2, sp
    1456:	4940      	ldr	r1, [pc, #256]	; (1558 <uartfiber_init+0x168>)
    1458:	4840      	ldr	r0, [pc, #256]	; (155c <uartfiber_init+0x16c>)
    145a:	4b41      	ldr	r3, [pc, #260]	; (1560 <uartfiber_init+0x170>)
    145c:	4798      	blx	r3
    145e:	2800      	cmp	r0, #0
    1460:	d1f8      	bne.n	1454 <uartfiber_init+0x64>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1462:	4b3e      	ldr	r3, [pc, #248]	; (155c <uartfiber_init+0x16c>)
    1464:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1466:	0020      	movs	r0, r4
    1468:	4b3e      	ldr	r3, [pc, #248]	; (1564 <uartfiber_init+0x174>)
    146a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    146c:	231f      	movs	r3, #31
    146e:	4018      	ands	r0, r3
    1470:	3b1e      	subs	r3, #30
    1472:	4083      	lsls	r3, r0
    1474:	4a3c      	ldr	r2, [pc, #240]	; (1568 <uartfiber_init+0x178>)
    1476:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1478:	4b38      	ldr	r3, [pc, #224]	; (155c <uartfiber_init+0x16c>)
    147a:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    147c:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    147e:	2b00      	cmp	r3, #0
    1480:	d1fa      	bne.n	1478 <uartfiber_init+0x88>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1482:	6823      	ldr	r3, [r4, #0]
    1484:	2202      	movs	r2, #2
    1486:	4313      	orrs	r3, r2
    1488:	6023      	str	r3, [r4, #0]
	config->data_order       = USART_DATAORDER_LSB;
    148a:	2380      	movs	r3, #128	; 0x80
    148c:	05db      	lsls	r3, r3, #23
    148e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1490:	2300      	movs	r3, #0
    1492:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1494:	32fd      	adds	r2, #253	; 0xfd
    1496:	4669      	mov	r1, sp
    1498:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    149a:	2200      	movs	r2, #0
    149c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    149e:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    14a0:	2101      	movs	r1, #1
    14a2:	2024      	movs	r0, #36	; 0x24
    14a4:	466c      	mov	r4, sp
    14a6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    14a8:	3001      	adds	r0, #1
    14aa:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    14ac:	3125      	adds	r1, #37	; 0x25
    14ae:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    14b0:	3101      	adds	r1, #1
    14b2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    14b4:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    14b6:	3105      	adds	r1, #5
    14b8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    14ba:	3101      	adds	r1, #1
    14bc:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    14be:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    14c0:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    14c2:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    14c4:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    14c6:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    14c8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    14ca:	2313      	movs	r3, #19
    14cc:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    14ce:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    14d0:	23e1      	movs	r3, #225	; 0xe1
    14d2:	019b      	lsls	r3, r3, #6
    14d4:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX2;
    14d6:	2380      	movs	r3, #128	; 0x80
    14d8:	025b      	lsls	r3, r3, #9
    14da:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = URX_FIBER2;
    14dc:	4b23      	ldr	r3, [pc, #140]	; (156c <uartfiber_init+0x17c>)
    14de:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    14e0:	2301      	movs	r3, #1
    14e2:	425b      	negs	r3, r3
    14e4:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    14e6:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    14e8:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst2, UART_FIBER2, &config_usart) != STATUS_OK);
    14ea:	466a      	mov	r2, sp
    14ec:	4920      	ldr	r1, [pc, #128]	; (1570 <uartfiber_init+0x180>)
    14ee:	4821      	ldr	r0, [pc, #132]	; (1574 <uartfiber_init+0x184>)
    14f0:	4b1b      	ldr	r3, [pc, #108]	; (1560 <uartfiber_init+0x170>)
    14f2:	4798      	blx	r3
    14f4:	2800      	cmp	r0, #0
    14f6:	d1f8      	bne.n	14ea <uartfiber_init+0xfa>
	SercomUsart *const usart_hw = &(module->hw->USART);
    14f8:	4b1e      	ldr	r3, [pc, #120]	; (1574 <uartfiber_init+0x184>)
    14fa:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14fc:	0020      	movs	r0, r4
    14fe:	4b19      	ldr	r3, [pc, #100]	; (1564 <uartfiber_init+0x174>)
    1500:	4798      	blx	r3
    1502:	231f      	movs	r3, #31
    1504:	4018      	ands	r0, r3
    1506:	3b1e      	subs	r3, #30
    1508:	4083      	lsls	r3, r0
    150a:	4a17      	ldr	r2, [pc, #92]	; (1568 <uartfiber_init+0x178>)
    150c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    150e:	4b19      	ldr	r3, [pc, #100]	; (1574 <uartfiber_init+0x184>)
    1510:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1512:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1514:	2b00      	cmp	r3, #0
    1516:	d1fa      	bne.n	150e <uartfiber_init+0x11e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1518:	6823      	ldr	r3, [r4, #0]
    151a:	2202      	movs	r2, #2
    151c:	4313      	orrs	r3, r2
    151e:	6023      	str	r3, [r4, #0]
	usart_register_callback(&uartfiber_inst1, fiber1_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1520:	4c0e      	ldr	r4, [pc, #56]	; (155c <uartfiber_init+0x16c>)
    1522:	3a01      	subs	r2, #1
    1524:	4914      	ldr	r1, [pc, #80]	; (1578 <uartfiber_init+0x188>)
    1526:	0020      	movs	r0, r4
    1528:	4e14      	ldr	r6, [pc, #80]	; (157c <uartfiber_init+0x18c>)
    152a:	47b0      	blx	r6
	usart_register_callback(&uartfiber_inst2, fiber2_callback, USART_CALLBACK_BUFFER_RECEIVED);
    152c:	4d11      	ldr	r5, [pc, #68]	; (1574 <uartfiber_init+0x184>)
    152e:	2201      	movs	r2, #1
    1530:	4913      	ldr	r1, [pc, #76]	; (1580 <uartfiber_init+0x190>)
    1532:	0028      	movs	r0, r5
    1534:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1536:	2331      	movs	r3, #49	; 0x31
    1538:	2002      	movs	r0, #2
    153a:	5ce1      	ldrb	r1, [r4, r3]
    153c:	4301      	orrs	r1, r0
    153e:	54e1      	strb	r1, [r4, r3]
    1540:	5cea      	ldrb	r2, [r5, r3]
    1542:	4302      	orrs	r2, r0
    1544:	54ea      	strb	r2, [r5, r3]
	usart_read_buffer_job(&uartfiber_inst1,(uint8_t *)fiber1_data.bytes, sizeof(fiber1_data));
    1546:	2204      	movs	r2, #4
    1548:	490e      	ldr	r1, [pc, #56]	; (1584 <uartfiber_init+0x194>)
    154a:	0020      	movs	r0, r4
    154c:	4b0e      	ldr	r3, [pc, #56]	; (1588 <uartfiber_init+0x198>)
    154e:	4798      	blx	r3
}
    1550:	b010      	add	sp, #64	; 0x40
    1552:	bd70      	pop	{r4, r5, r6, pc}
    1554:	00130002 	.word	0x00130002
    1558:	42000c00 	.word	0x42000c00
    155c:	20000094 	.word	0x20000094
    1560:	00002e69 	.word	0x00002e69
    1564:	0000322d 	.word	0x0000322d
    1568:	e000e100 	.word	0xe000e100
    156c:	00300002 	.word	0x00300002
    1570:	42001c00 	.word	0x42001c00
    1574:	200000c8 	.word	0x200000c8
    1578:	00001379 	.word	0x00001379
    157c:	00003001 	.word	0x00003001
    1580:	00001365 	.word	0x00001365
    1584:	20000454 	.word	0x20000454
    1588:	00003029 	.word	0x00003029

0000158c <get_fiber1_data>:

struct measurement get_fiber1_data()
{
    158c:	b510      	push	{r4, lr}
    158e:	b082      	sub	sp, #8
	return fiber1_data.data;
    1590:	ac01      	add	r4, sp, #4
    1592:	2204      	movs	r2, #4
    1594:	4908      	ldr	r1, [pc, #32]	; (15b8 <get_fiber1_data+0x2c>)
    1596:	0020      	movs	r0, r4
    1598:	4b08      	ldr	r3, [pc, #32]	; (15bc <get_fiber1_data+0x30>)
    159a:	4798      	blx	r3
    159c:	7822      	ldrb	r2, [r4, #0]
    159e:	7863      	ldrb	r3, [r4, #1]
    15a0:	021b      	lsls	r3, r3, #8
    15a2:	20ff      	movs	r0, #255	; 0xff
    15a4:	4010      	ands	r0, r2
    15a6:	78a2      	ldrb	r2, [r4, #2]
    15a8:	0412      	lsls	r2, r2, #16
    15aa:	4318      	orrs	r0, r3
    15ac:	78e3      	ldrb	r3, [r4, #3]
    15ae:	061b      	lsls	r3, r3, #24
    15b0:	4310      	orrs	r0, r2
    15b2:	4318      	orrs	r0, r3
}
    15b4:	b002      	add	sp, #8
    15b6:	bd10      	pop	{r4, pc}
    15b8:	20000454 	.word	0x20000454
    15bc:	000040e1 	.word	0x000040e1

000015c0 <get_fiber2_data>:
struct measurement get_fiber2_data()
{
    15c0:	b510      	push	{r4, lr}
    15c2:	b082      	sub	sp, #8
	return fiber2_data.data;
    15c4:	ac01      	add	r4, sp, #4
    15c6:	2204      	movs	r2, #4
    15c8:	4908      	ldr	r1, [pc, #32]	; (15ec <get_fiber2_data+0x2c>)
    15ca:	0020      	movs	r0, r4
    15cc:	4b08      	ldr	r3, [pc, #32]	; (15f0 <get_fiber2_data+0x30>)
    15ce:	4798      	blx	r3
    15d0:	7822      	ldrb	r2, [r4, #0]
    15d2:	7863      	ldrb	r3, [r4, #1]
    15d4:	021b      	lsls	r3, r3, #8
    15d6:	20ff      	movs	r0, #255	; 0xff
    15d8:	4010      	ands	r0, r2
    15da:	78a2      	ldrb	r2, [r4, #2]
    15dc:	0412      	lsls	r2, r2, #16
    15de:	4318      	orrs	r0, r3
    15e0:	78e3      	ldrb	r3, [r4, #3]
    15e2:	061b      	lsls	r3, r3, #24
    15e4:	4310      	orrs	r0, r2
    15e6:	4318      	orrs	r0, r3
}
    15e8:	b002      	add	sp, #8
    15ea:	bd10      	pop	{r4, pc}
    15ec:	2000045c 	.word	0x2000045c
    15f0:	000040e1 	.word	0x000040e1

000015f4 <get_fiber1_status>:


enum fiber_data_status get_fiber1_status()
{
	return fiber1_data_status;
    15f4:	4b01      	ldr	r3, [pc, #4]	; (15fc <get_fiber1_status+0x8>)
    15f6:	7818      	ldrb	r0, [r3, #0]
    15f8:	b2c0      	uxtb	r0, r0
};
    15fa:	4770      	bx	lr
    15fc:	20000450 	.word	0x20000450

00001600 <get_fiber2_status>:

enum fiber_data_status get_fiber2_status()
{
	return fiber2_data_status;
    1600:	4b01      	ldr	r3, [pc, #4]	; (1608 <get_fiber2_status+0x8>)
    1602:	7818      	ldrb	r0, [r3, #0]
    1604:	b2c0      	uxtb	r0, r0
};
    1606:	4770      	bx	lr
    1608:	20000451 	.word	0x20000451

0000160c <Ft_Gpu_Copro_SendCmd>:
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4));             
}


ft_void_t Ft_Gpu_Copro_SendCmd(Ft_Gpu_Hal_Context_t *phost,ft_uint32_t cmd)
{ 
    160c:	b510      	push	{r4, lr}
   Ft_Gpu_Hal_Transfer32(phost,cmd);
    160e:	4b01      	ldr	r3, [pc, #4]	; (1614 <Ft_Gpu_Copro_SendCmd+0x8>)
    1610:	4798      	blx	r3
}
    1612:	bd10      	pop	{r4, pc}
    1614:	00001a09 	.word	0x00001a09

00001618 <Ft_Gpu_CoCmd_SendStr>:


ft_void_t Ft_Gpu_CoCmd_SendStr(Ft_Gpu_Hal_Context_t *phost,const ft_char8_t *s)
{
    1618:	b510      	push	{r4, lr}
    Ft_Gpu_Hal_TransferString(phost,s);
    161a:	4b01      	ldr	r3, [pc, #4]	; (1620 <Ft_Gpu_CoCmd_SendStr+0x8>)
    161c:	4798      	blx	r3
}
    161e:	bd10      	pop	{r4, pc}
    1620:	00001999 	.word	0x00001999

00001624 <Ft_Gpu_CoCmd_StartFunc>:


ft_void_t Ft_Gpu_CoCmd_StartFunc(Ft_Gpu_Hal_Context_t *phost,ft_uint16_t count)
{
    1624:	b570      	push	{r4, r5, r6, lr}
    1626:	0004      	movs	r4, r0
    1628:	000d      	movs	r5, r1
    // wait until the copro circular buffer has enough space for this command
  	Ft_Gpu_Hal_CheckCmdBuffer(phost,count);
    162a:	4b04      	ldr	r3, [pc, #16]	; (163c <Ft_Gpu_CoCmd_StartFunc+0x18>)
    162c:	4798      	blx	r3
    // start the transfer if it does
    Ft_Gpu_Hal_StartCmdTransfer(phost,FT_GPU_WRITE,count);
    162e:	002a      	movs	r2, r5
    1630:	2101      	movs	r1, #1
    1632:	0020      	movs	r0, r4
    1634:	4b02      	ldr	r3, [pc, #8]	; (1640 <Ft_Gpu_CoCmd_StartFunc+0x1c>)
    1636:	4798      	blx	r3
}
    1638:	bd70      	pop	{r4, r5, r6, pc}
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	00001b79 	.word	0x00001b79
    1640:	00001941 	.word	0x00001941

00001644 <Ft_Gpu_CoCmd_EndFunc>:


ft_void_t Ft_Gpu_CoCmd_EndFunc(Ft_Gpu_Hal_Context_t *phost,ft_uint16_t count)
{
    1644:	b570      	push	{r4, r5, r6, lr}
    1646:	0004      	movs	r4, r0
    1648:	000d      	movs	r5, r1

    Ft_Gpu_Hal_EndTransfer(phost);
    164a:	4b03      	ldr	r3, [pc, #12]	; (1658 <Ft_Gpu_CoCmd_EndFunc+0x14>)
    164c:	4798      	blx	r3
    Ft_Gpu_Hal_Updatecmdfifo(phost,count);
    164e:	0029      	movs	r1, r5
    1650:	0020      	movs	r0, r4
    1652:	4b02      	ldr	r3, [pc, #8]	; (165c <Ft_Gpu_CoCmd_EndFunc+0x18>)
    1654:	4798      	blx	r3

}
    1656:	bd70      	pop	{r4, r5, r6, pc}
    1658:	00001a3d 	.word	0x00001a3d
    165c:	00001b2d 	.word	0x00001b2d

00001660 <Ft_Gpu_CoCmd_Text>:
{
    1660:	b5f0      	push	{r4, r5, r6, r7, lr}
    1662:	46d6      	mov	lr, sl
    1664:	464f      	mov	r7, r9
    1666:	b580      	push	{r7, lr}
    1668:	b083      	sub	sp, #12
    166a:	0005      	movs	r5, r0
    166c:	468a      	mov	sl, r1
    166e:	4691      	mov	r9, r2
    1670:	001f      	movs	r7, r3
    1672:	ab0a      	add	r3, sp, #40	; 0x28
    1674:	881e      	ldrh	r6, [r3, #0]
  ft_uint16_t len = strlen((const char*)s);
    1676:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1678:	4b15      	ldr	r3, [pc, #84]	; (16d0 <Ft_Gpu_CoCmd_Text+0x70>)
    167a:	4798      	blx	r3
    167c:	b280      	uxth	r0, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*3 + len + 1);
    167e:	300d      	adds	r0, #13
    1680:	b284      	uxth	r4, r0
    1682:	0021      	movs	r1, r4
    1684:	0028      	movs	r0, r5
    1686:	4b13      	ldr	r3, [pc, #76]	; (16d4 <Ft_Gpu_CoCmd_Text+0x74>)
    1688:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_TEXT);
    168a:	21f4      	movs	r1, #244	; 0xf4
    168c:	4249      	negs	r1, r1
    168e:	9501      	str	r5, [sp, #4]
    1690:	0028      	movs	r0, r5
    1692:	4d11      	ldr	r5, [pc, #68]	; (16d8 <Ft_Gpu_CoCmd_Text+0x78>)
    1694:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    1696:	464b      	mov	r3, r9
    1698:	0419      	lsls	r1, r3, #16
    169a:	4653      	mov	r3, sl
    169c:	041b      	lsls	r3, r3, #16
    169e:	0c1b      	lsrs	r3, r3, #16
    16a0:	4319      	orrs	r1, r3
    16a2:	9801      	ldr	r0, [sp, #4]
    16a4:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    16a6:	0436      	lsls	r6, r6, #16
    16a8:	0439      	lsls	r1, r7, #16
    16aa:	0c09      	lsrs	r1, r1, #16
    16ac:	4331      	orrs	r1, r6
    16ae:	9e01      	ldr	r6, [sp, #4]
    16b0:	0030      	movs	r0, r6
    16b2:	47a8      	blx	r5
  Ft_Gpu_CoCmd_SendStr(phost, s);
    16b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    16b6:	0030      	movs	r0, r6
    16b8:	4b08      	ldr	r3, [pc, #32]	; (16dc <Ft_Gpu_CoCmd_Text+0x7c>)
    16ba:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*3 + len + 1));
    16bc:	0021      	movs	r1, r4
    16be:	0030      	movs	r0, r6
    16c0:	4b07      	ldr	r3, [pc, #28]	; (16e0 <Ft_Gpu_CoCmd_Text+0x80>)
    16c2:	4798      	blx	r3
}
    16c4:	b003      	add	sp, #12
    16c6:	bc0c      	pop	{r2, r3}
    16c8:	4691      	mov	r9, r2
    16ca:	469a      	mov	sl, r3
    16cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	00004169 	.word	0x00004169
    16d4:	00001625 	.word	0x00001625
    16d8:	0000160d 	.word	0x0000160d
    16dc:	00001619 	.word	0x00001619
    16e0:	00001645 	.word	0x00001645

000016e4 <Ft_Gpu_CoCmd_Number>:
{
    16e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16e6:	46c6      	mov	lr, r8
    16e8:	b500      	push	{lr}
    16ea:	b082      	sub	sp, #8
    16ec:	0007      	movs	r7, r0
    16ee:	000c      	movs	r4, r1
    16f0:	4690      	mov	r8, r2
    16f2:	001e      	movs	r6, r3
    16f4:	ab08      	add	r3, sp, #32
    16f6:	881d      	ldrh	r5, [r3, #0]
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*4);  
    16f8:	2110      	movs	r1, #16
    16fa:	4b10      	ldr	r3, [pc, #64]	; (173c <Ft_Gpu_CoCmd_Number+0x58>)
    16fc:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_NUMBER);
    16fe:	21d2      	movs	r1, #210	; 0xd2
    1700:	4249      	negs	r1, r1
    1702:	9701      	str	r7, [sp, #4]
    1704:	0038      	movs	r0, r7
    1706:	4f0e      	ldr	r7, [pc, #56]	; (1740 <Ft_Gpu_CoCmd_Number+0x5c>)
    1708:	47b8      	blx	r7
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    170a:	4643      	mov	r3, r8
    170c:	0419      	lsls	r1, r3, #16
    170e:	0423      	lsls	r3, r4, #16
    1710:	0c1b      	lsrs	r3, r3, #16
    1712:	4319      	orrs	r1, r3
    1714:	9c01      	ldr	r4, [sp, #4]
    1716:	0020      	movs	r0, r4
    1718:	47b8      	blx	r7
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    171a:	042d      	lsls	r5, r5, #16
    171c:	0431      	lsls	r1, r6, #16
    171e:	0c09      	lsrs	r1, r1, #16
    1720:	4329      	orrs	r1, r5
    1722:	0020      	movs	r0, r4
    1724:	47b8      	blx	r7
  Ft_Gpu_Copro_SendCmd(phost, n);
    1726:	9909      	ldr	r1, [sp, #36]	; 0x24
    1728:	0020      	movs	r0, r4
    172a:	47b8      	blx	r7
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4));  
    172c:	2110      	movs	r1, #16
    172e:	0020      	movs	r0, r4
    1730:	4b04      	ldr	r3, [pc, #16]	; (1744 <Ft_Gpu_CoCmd_Number+0x60>)
    1732:	4798      	blx	r3
}
    1734:	b002      	add	sp, #8
    1736:	bc04      	pop	{r2}
    1738:	4690      	mov	r8, r2
    173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    173c:	00001625 	.word	0x00001625
    1740:	0000160d 	.word	0x0000160d
    1744:	00001645 	.word	0x00001645

00001748 <Ft_Gpu_CoCmd_Swap>:
{
    1748:	b510      	push	{r4, lr}
    174a:	0004      	movs	r4, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*1);         
    174c:	2104      	movs	r1, #4
    174e:	4b06      	ldr	r3, [pc, #24]	; (1768 <Ft_Gpu_CoCmd_Swap+0x20>)
    1750:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_SWAP);
    1752:	21ff      	movs	r1, #255	; 0xff
    1754:	4249      	negs	r1, r1
    1756:	0020      	movs	r0, r4
    1758:	4b04      	ldr	r3, [pc, #16]	; (176c <Ft_Gpu_CoCmd_Swap+0x24>)
    175a:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*1));         
    175c:	2104      	movs	r1, #4
    175e:	0020      	movs	r0, r4
    1760:	4b03      	ldr	r3, [pc, #12]	; (1770 <Ft_Gpu_CoCmd_Swap+0x28>)
    1762:	4798      	blx	r3
}
    1764:	bd10      	pop	{r4, pc}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	00001625 	.word	0x00001625
    176c:	0000160d 	.word	0x0000160d
    1770:	00001645 	.word	0x00001645

00001774 <Ft_Gpu_CoCmd_Button>:
{
    1774:	b5f0      	push	{r4, r5, r6, r7, lr}
    1776:	46de      	mov	lr, fp
    1778:	4657      	mov	r7, sl
    177a:	464e      	mov	r6, r9
    177c:	4645      	mov	r5, r8
    177e:	b5e0      	push	{r5, r6, r7, lr}
    1780:	b083      	sub	sp, #12
    1782:	0005      	movs	r5, r0
    1784:	468a      	mov	sl, r1
    1786:	4691      	mov	r9, r2
    1788:	469b      	mov	fp, r3
    178a:	ab0c      	add	r3, sp, #48	; 0x30
    178c:	2200      	movs	r2, #0
    178e:	5e9b      	ldrsh	r3, [r3, r2]
    1790:	4698      	mov	r8, r3
    1792:	ab0d      	add	r3, sp, #52	; 0x34
    1794:	2700      	movs	r7, #0
    1796:	5fdf      	ldrsh	r7, [r3, r7]
    1798:	ab0e      	add	r3, sp, #56	; 0x38
    179a:	881e      	ldrh	r6, [r3, #0]
  ft_uint16_t len = strlen((const char*)s);
    179c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    179e:	4b1a      	ldr	r3, [pc, #104]	; (1808 <Ft_Gpu_CoCmd_Button+0x94>)
    17a0:	4798      	blx	r3
    17a2:	b280      	uxth	r0, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*4 + len + 1);            
    17a4:	3011      	adds	r0, #17
    17a6:	b284      	uxth	r4, r0
    17a8:	0021      	movs	r1, r4
    17aa:	0028      	movs	r0, r5
    17ac:	4b17      	ldr	r3, [pc, #92]	; (180c <Ft_Gpu_CoCmd_Button+0x98>)
    17ae:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_BUTTON);
    17b0:	21f3      	movs	r1, #243	; 0xf3
    17b2:	4249      	negs	r1, r1
    17b4:	9501      	str	r5, [sp, #4]
    17b6:	0028      	movs	r0, r5
    17b8:	4d15      	ldr	r5, [pc, #84]	; (1810 <Ft_Gpu_CoCmd_Button+0x9c>)
    17ba:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    17bc:	464b      	mov	r3, r9
    17be:	0419      	lsls	r1, r3, #16
    17c0:	4653      	mov	r3, sl
    17c2:	041b      	lsls	r3, r3, #16
    17c4:	0c1b      	lsrs	r3, r3, #16
    17c6:	4319      	orrs	r1, r3
    17c8:	9801      	ldr	r0, [sp, #4]
    17ca:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)h<<16)|(w&0xffff)));
    17cc:	4643      	mov	r3, r8
    17ce:	0419      	lsls	r1, r3, #16
    17d0:	465b      	mov	r3, fp
    17d2:	041b      	lsls	r3, r3, #16
    17d4:	0c1b      	lsrs	r3, r3, #16
    17d6:	4319      	orrs	r1, r3
    17d8:	9801      	ldr	r0, [sp, #4]
    17da:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    17dc:	0436      	lsls	r6, r6, #16
    17de:	0439      	lsls	r1, r7, #16
    17e0:	0c09      	lsrs	r1, r1, #16
    17e2:	4331      	orrs	r1, r6
    17e4:	9e01      	ldr	r6, [sp, #4]
    17e6:	0030      	movs	r0, r6
    17e8:	47a8      	blx	r5
  Ft_Gpu_CoCmd_SendStr(phost, s);
    17ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    17ec:	0030      	movs	r0, r6
    17ee:	4b09      	ldr	r3, [pc, #36]	; (1814 <Ft_Gpu_CoCmd_Button+0xa0>)
    17f0:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4 + len + 1));              
    17f2:	0021      	movs	r1, r4
    17f4:	0030      	movs	r0, r6
    17f6:	4b08      	ldr	r3, [pc, #32]	; (1818 <Ft_Gpu_CoCmd_Button+0xa4>)
    17f8:	4798      	blx	r3
}
    17fa:	b003      	add	sp, #12
    17fc:	bc3c      	pop	{r2, r3, r4, r5}
    17fe:	4690      	mov	r8, r2
    1800:	4699      	mov	r9, r3
    1802:	46a2      	mov	sl, r4
    1804:	46ab      	mov	fp, r5
    1806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1808:	00004169 	.word	0x00004169
    180c:	00001625 	.word	0x00001625
    1810:	0000160d 	.word	0x0000160d
    1814:	00001619 	.word	0x00001619
    1818:	00001645 	.word	0x00001645

0000181c <Ft_Gpu_CoCmd_Append>:
{
    181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    181e:	0004      	movs	r4, r0
    1820:	000f      	movs	r7, r1
    1822:	0016      	movs	r6, r2
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*3);       
    1824:	210c      	movs	r1, #12
    1826:	4b09      	ldr	r3, [pc, #36]	; (184c <Ft_Gpu_CoCmd_Append+0x30>)
    1828:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_APPEND);
    182a:	21e2      	movs	r1, #226	; 0xe2
    182c:	4249      	negs	r1, r1
    182e:	0020      	movs	r0, r4
    1830:	4d07      	ldr	r5, [pc, #28]	; (1850 <Ft_Gpu_CoCmd_Append+0x34>)
    1832:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, ptr);
    1834:	0039      	movs	r1, r7
    1836:	0020      	movs	r0, r4
    1838:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, num);
    183a:	0031      	movs	r1, r6
    183c:	0020      	movs	r0, r4
    183e:	47a8      	blx	r5
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*3));       
    1840:	210c      	movs	r1, #12
    1842:	0020      	movs	r0, r4
    1844:	4b03      	ldr	r3, [pc, #12]	; (1854 <Ft_Gpu_CoCmd_Append+0x38>)
    1846:	4798      	blx	r3
}
    1848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	00001625 	.word	0x00001625
    1850:	0000160d 	.word	0x0000160d
    1854:	00001645 	.word	0x00001645

00001858 <Ft_Gpu_CoCmd_Gradient>:
{
    1858:	b5f0      	push	{r4, r5, r6, r7, lr}
    185a:	46d6      	mov	lr, sl
    185c:	464f      	mov	r7, r9
    185e:	b580      	push	{r7, lr}
    1860:	b083      	sub	sp, #12
    1862:	0004      	movs	r4, r0
    1864:	468a      	mov	sl, r1
    1866:	4691      	mov	r9, r2
    1868:	9301      	str	r3, [sp, #4]
    186a:	ab0a      	add	r3, sp, #40	; 0x28
    186c:	2200      	movs	r2, #0
    186e:	5e9f      	ldrsh	r7, [r3, r2]
    1870:	ab0b      	add	r3, sp, #44	; 0x2c
    1872:	2200      	movs	r2, #0
    1874:	5e9e      	ldrsh	r6, [r3, r2]
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*5);         
    1876:	2114      	movs	r1, #20
    1878:	4b11      	ldr	r3, [pc, #68]	; (18c0 <Ft_Gpu_CoCmd_Gradient+0x68>)
    187a:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_GRADIENT);
    187c:	21f5      	movs	r1, #245	; 0xf5
    187e:	4249      	negs	r1, r1
    1880:	0020      	movs	r0, r4
    1882:	4d10      	ldr	r5, [pc, #64]	; (18c4 <Ft_Gpu_CoCmd_Gradient+0x6c>)
    1884:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y0<<16)|(x0 & 0xffff)));
    1886:	464a      	mov	r2, r9
    1888:	0411      	lsls	r1, r2, #16
    188a:	4652      	mov	r2, sl
    188c:	0413      	lsls	r3, r2, #16
    188e:	0c1b      	lsrs	r3, r3, #16
    1890:	4319      	orrs	r1, r3
    1892:	0020      	movs	r0, r4
    1894:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, rgb0);
    1896:	9901      	ldr	r1, [sp, #4]
    1898:	0020      	movs	r0, r4
    189a:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y1<<16)|(x1 & 0xffff)));
    189c:	0436      	lsls	r6, r6, #16
    189e:	0439      	lsls	r1, r7, #16
    18a0:	0c09      	lsrs	r1, r1, #16
    18a2:	4331      	orrs	r1, r6
    18a4:	0020      	movs	r0, r4
    18a6:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, rgb1);
    18a8:	990c      	ldr	r1, [sp, #48]	; 0x30
    18aa:	0020      	movs	r0, r4
    18ac:	47a8      	blx	r5
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*5));         
    18ae:	2114      	movs	r1, #20
    18b0:	0020      	movs	r0, r4
    18b2:	4b05      	ldr	r3, [pc, #20]	; (18c8 <Ft_Gpu_CoCmd_Gradient+0x70>)
    18b4:	4798      	blx	r3
}
    18b6:	b003      	add	sp, #12
    18b8:	bc0c      	pop	{r2, r3}
    18ba:	4691      	mov	r9, r2
    18bc:	469a      	mov	sl, r3
    18be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18c0:	00001625 	.word	0x00001625
    18c4:	0000160d 	.word	0x0000160d
    18c8:	00001645 	.word	0x00001645

000018cc <Ft_Gpu_CoCmd_Dlstart>:
{
    18cc:	b510      	push	{r4, lr}
    18ce:	0004      	movs	r4, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*1);           
    18d0:	2104      	movs	r1, #4
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <Ft_Gpu_CoCmd_Dlstart+0x1c>)
    18d4:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_DLSTART);
    18d6:	4905      	ldr	r1, [pc, #20]	; (18ec <Ft_Gpu_CoCmd_Dlstart+0x20>)
    18d8:	0020      	movs	r0, r4
    18da:	4b05      	ldr	r3, [pc, #20]	; (18f0 <Ft_Gpu_CoCmd_Dlstart+0x24>)
    18dc:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*1));             
    18de:	2104      	movs	r1, #4
    18e0:	0020      	movs	r0, r4
    18e2:	4b04      	ldr	r3, [pc, #16]	; (18f4 <Ft_Gpu_CoCmd_Dlstart+0x28>)
    18e4:	4798      	blx	r3
}
    18e6:	bd10      	pop	{r4, pc}
    18e8:	00001625 	.word	0x00001625
    18ec:	ffffff00 	.word	0xffffff00
    18f0:	0000160d 	.word	0x0000160d
    18f4:	00001645 	.word	0x00001645

000018f8 <Ft_Gpu_Hal_Open>:
	return true;
}


ft_bool_t Ft_Gpu_Hal_Open(Ft_Gpu_Hal_Context_t *host)
{
    18f8:	b510      	push	{r4, lr}
     * the pinmux settings and the SPI init, so it's all done
     * in Ft_Gpu_Hal_Init().
     */
    
    // init current write buffer to zero, since we're just starting up
	host->ft_cmd_fifo_wp = host->ft_dl_buff_wp = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	2300      	movs	r3, #0
    18fe:	8142      	strh	r2, [r0, #10]
    1900:	8102      	strh	r2, [r0, #8]
    // by default ft800/801/810/811 goes with single dummy byte for read
	host->spinumdummy = 1;
    1902:	3201      	adds	r2, #1
    1904:	7542      	strb	r2, [r0, #21]
    // technically one channel, but zero for how the FT library does things
	host->spichannel = 0;
    1906:	7503      	strb	r3, [r0, #20]
    // indicate it's ready to go
	host->status = FT_GPU_HAL_OPENED;
    1908:	7303      	strb	r3, [r0, #12]

    lcd_set_ft_host_ptr(host);
    190a:	4b02      	ldr	r3, [pc, #8]	; (1914 <Ft_Gpu_Hal_Open+0x1c>)
    190c:	4798      	blx	r3

	return true;
}
    190e:	2001      	movs	r0, #1
    1910:	bd10      	pop	{r4, pc}
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	000028a1 	.word	0x000028a1

00001918 <Ft_Gpu_Hal_StartTransfer>:
}


/*The APIs for reading/writing transfer continuously only with small buffer system*/
ft_void_t  Ft_Gpu_Hal_StartTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint32_t addr)
{
    1918:	b510      	push	{r4, lr}
    191a:	0004      	movs	r4, r0
    /* determine if it's a read or write. This affects the preamble send to the
     * LCD (preamble = direction bits and address). */
	if (FT_GPU_READ == rw)
    191c:	2900      	cmp	r1, #0
    191e:	d006      	beq.n	192e <Ft_Gpu_Hal_StartTransfer+0x16>
		host->status = FT_GPU_HAL_READING;
	}
    else
    {
        // begin a write transfer
	    lcd_start_xfer(addr, WRT);
    1920:	2101      	movs	r1, #1
    1922:	0010      	movs	r0, r2
    1924:	4b05      	ldr	r3, [pc, #20]	; (193c <Ft_Gpu_Hal_StartTransfer+0x24>)
    1926:	4798      	blx	r3
    
		host->status = FT_GPU_HAL_WRITING;
    1928:	2302      	movs	r3, #2
    192a:	7323      	strb	r3, [r4, #12]
	}
}
    192c:	bd10      	pop	{r4, pc}
        lcd_start_xfer(addr, READ);
    192e:	0010      	movs	r0, r2
    1930:	4b02      	ldr	r3, [pc, #8]	; (193c <Ft_Gpu_Hal_StartTransfer+0x24>)
    1932:	4798      	blx	r3
		host->status = FT_GPU_HAL_READING;
    1934:	2301      	movs	r3, #1
    1936:	7323      	strb	r3, [r4, #12]
    1938:	e7f8      	b.n	192c <Ft_Gpu_Hal_StartTransfer+0x14>
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	0000251d 	.word	0x0000251d

00001940 <Ft_Gpu_Hal_StartCmdTransfer>:


/*The APIs for writing transfer continuously only*/
ft_void_t  Ft_Gpu_Hal_StartCmdTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint16_t count)
{
    1940:	b510      	push	{r4, lr}
    // RAM_CMD = 0x308000
    // starting a transfer = sending preamble (read/write bits and address)
	Ft_Gpu_Hal_StartTransfer(host,rw,host->ft_cmd_fifo_wp + RAM_CMD);
    1942:	8902      	ldrh	r2, [r0, #8]
    1944:	23c2      	movs	r3, #194	; 0xc2
    1946:	039b      	lsls	r3, r3, #14
    1948:	469c      	mov	ip, r3
    194a:	4462      	add	r2, ip
    194c:	4b01      	ldr	r3, [pc, #4]	; (1954 <Ft_Gpu_Hal_StartCmdTransfer+0x14>)
    194e:	4798      	blx	r3
}
    1950:	bd10      	pop	{r4, pc}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	00001919 	.word	0x00001919

00001958 <Ft_Gpu_Hal_Transfer8>:
    Ft_Gpu_Hal_Transfer8(host,0);
}


ft_uint8_t Ft_Gpu_Hal_Transfer8(Ft_Gpu_Hal_Context_t *host, ft_uint8_t value)
{
    1958:	b500      	push	{lr}
    195a:	b085      	sub	sp, #20
    195c:	466b      	mov	r3, sp
    195e:	71d9      	strb	r1, [r3, #7]
    ft_uint8_t read_byte = 0;
    1960:	2200      	movs	r2, #0
    1962:	230f      	movs	r3, #15
    1964:	446b      	add	r3, sp
    1966:	701a      	strb	r2, [r3, #0]
    
    // transmit or receive a byte
    if(host->status == FT_GPU_HAL_WRITING)
    1968:	7b03      	ldrb	r3, [r0, #12]
    196a:	2b02      	cmp	r3, #2
    196c:	d009      	beq.n	1982 <Ft_Gpu_Hal_Transfer8+0x2a>
        lcd_host_write(&value, 1);
    else
        lcd_host_read(&read_byte, 1);
    196e:	2101      	movs	r1, #1
    1970:	200f      	movs	r0, #15
    1972:	4468      	add	r0, sp
    1974:	4b06      	ldr	r3, [pc, #24]	; (1990 <Ft_Gpu_Hal_Transfer8+0x38>)
    1976:	4798      	blx	r3
    
    return read_byte;
    1978:	230f      	movs	r3, #15
    197a:	446b      	add	r3, sp
    197c:	7818      	ldrb	r0, [r3, #0]
}
    197e:	b005      	add	sp, #20
    1980:	bd00      	pop	{pc}
        lcd_host_write(&value, 1);
    1982:	2101      	movs	r1, #1
    1984:	466b      	mov	r3, sp
    1986:	1dd8      	adds	r0, r3, #7
    1988:	4b02      	ldr	r3, [pc, #8]	; (1994 <Ft_Gpu_Hal_Transfer8+0x3c>)
    198a:	4798      	blx	r3
    198c:	e7f4      	b.n	1978 <Ft_Gpu_Hal_Transfer8+0x20>
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	000025c1 	.word	0x000025c1
    1994:	00002639 	.word	0x00002639

00001998 <Ft_Gpu_Hal_TransferString>:
{
    1998:	b570      	push	{r4, r5, r6, lr}
    199a:	0005      	movs	r5, r0
    199c:	000e      	movs	r6, r1
    ft_uint16_t length = strlen((const char*) string);
    199e:	0008      	movs	r0, r1
    19a0:	4b09      	ldr	r3, [pc, #36]	; (19c8 <Ft_Gpu_Hal_TransferString+0x30>)
    19a2:	4798      	blx	r3
    19a4:	b280      	uxth	r0, r0
    while(length--)
    19a6:	e005      	b.n	19b4 <Ft_Gpu_Hal_TransferString+0x1c>
       Ft_Gpu_Hal_Transfer8(host, *string);
    19a8:	7831      	ldrb	r1, [r6, #0]
    19aa:	0028      	movs	r0, r5
    19ac:	4b07      	ldr	r3, [pc, #28]	; (19cc <Ft_Gpu_Hal_TransferString+0x34>)
    19ae:	4798      	blx	r3
       string ++;
    19b0:	3601      	adds	r6, #1
    while(length--)
    19b2:	0020      	movs	r0, r4
    19b4:	1e44      	subs	r4, r0, #1
    19b6:	b2a4      	uxth	r4, r4
    19b8:	2800      	cmp	r0, #0
    19ba:	d1f5      	bne.n	19a8 <Ft_Gpu_Hal_TransferString+0x10>
    Ft_Gpu_Hal_Transfer8(host,0);
    19bc:	2100      	movs	r1, #0
    19be:	0028      	movs	r0, r5
    19c0:	4b02      	ldr	r3, [pc, #8]	; (19cc <Ft_Gpu_Hal_TransferString+0x34>)
    19c2:	4798      	blx	r3
}
    19c4:	bd70      	pop	{r4, r5, r6, pc}
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	00004169 	.word	0x00004169
    19cc:	00001959 	.word	0x00001959

000019d0 <Ft_Gpu_Hal_Transfer16>:


ft_uint16_t Ft_Gpu_Hal_Transfer16(Ft_Gpu_Hal_Context_t *host, ft_uint16_t value)
{
    19d0:	b570      	push	{r4, r5, r6, lr}
    19d2:	0004      	movs	r4, r0
    19d4:	000d      	movs	r5, r1
	ft_uint16_t retVal = 0;

    // transmit or receive two bytes
    if (host->status == FT_GPU_HAL_WRITING)
    19d6:	7b03      	ldrb	r3, [r0, #12]
    19d8:	2b02      	cmp	r3, #2
    19da:	d00a      	beq.n	19f2 <Ft_Gpu_Hal_Transfer16+0x22>
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer8(host,0);
    19dc:	2100      	movs	r1, #0
    19de:	4d09      	ldr	r5, [pc, #36]	; (1a04 <Ft_Gpu_Hal_Transfer16+0x34>)
    19e0:	47a8      	blx	r5
    19e2:	0006      	movs	r6, r0
		retVal |= (ft_uint16_t)Ft_Gpu_Hal_Transfer8(host,0) << 8;
    19e4:	2100      	movs	r1, #0
    19e6:	0020      	movs	r0, r4
    19e8:	47a8      	blx	r5
    19ea:	0200      	lsls	r0, r0, #8
    19ec:	4330      	orrs	r0, r6
    19ee:	b280      	uxth	r0, r0
	}

	return retVal;
}
    19f0:	bd70      	pop	{r4, r5, r6, pc}
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
    19f2:	b2c9      	uxtb	r1, r1
    19f4:	4e03      	ldr	r6, [pc, #12]	; (1a04 <Ft_Gpu_Hal_Transfer16+0x34>)
    19f6:	47b0      	blx	r6
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
    19f8:	0a29      	lsrs	r1, r5, #8
    19fa:	0020      	movs	r0, r4
    19fc:	47b0      	blx	r6
	ft_uint16_t retVal = 0;
    19fe:	2000      	movs	r0, #0
    1a00:	e7f6      	b.n	19f0 <Ft_Gpu_Hal_Transfer16+0x20>
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	00001959 	.word	0x00001959

00001a08 <Ft_Gpu_Hal_Transfer32>:


ft_uint32_t Ft_Gpu_Hal_Transfer32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t value)
{
    1a08:	b570      	push	{r4, r5, r6, lr}
    1a0a:	0004      	movs	r4, r0
    1a0c:	000d      	movs	r5, r1
	ft_uint32_t retVal = 0;
    
    // transmit or receive four bytes
	if (host->status == FT_GPU_HAL_WRITING)
    1a0e:	7b03      	ldrb	r3, [r0, #12]
    1a10:	2b02      	cmp	r3, #2
    1a12:	d009      	beq.n	1a28 <Ft_Gpu_Hal_Transfer32+0x20>
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer16(host,0);
    1a14:	2100      	movs	r1, #0
    1a16:	4e08      	ldr	r6, [pc, #32]	; (1a38 <Ft_Gpu_Hal_Transfer32+0x30>)
    1a18:	47b0      	blx	r6
    1a1a:	0005      	movs	r5, r0
		retVal |= (ft_uint32_t)Ft_Gpu_Hal_Transfer16(host,0) << 16;
    1a1c:	2100      	movs	r1, #0
    1a1e:	0020      	movs	r0, r4
    1a20:	47b0      	blx	r6
    1a22:	0400      	lsls	r0, r0, #16
    1a24:	4328      	orrs	r0, r5
	}
    
	return retVal;
}
    1a26:	bd70      	pop	{r4, r5, r6, pc}
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
    1a28:	b289      	uxth	r1, r1
    1a2a:	4e03      	ldr	r6, [pc, #12]	; (1a38 <Ft_Gpu_Hal_Transfer32+0x30>)
    1a2c:	47b0      	blx	r6
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
    1a2e:	0c29      	lsrs	r1, r5, #16
    1a30:	0020      	movs	r0, r4
    1a32:	47b0      	blx	r6
	ft_uint32_t retVal = 0;
    1a34:	2000      	movs	r0, #0
    1a36:	e7f6      	b.n	1a26 <Ft_Gpu_Hal_Transfer32+0x1e>
    1a38:	000019d1 	.word	0x000019d1

00001a3c <Ft_Gpu_Hal_EndTransfer>:


ft_void_t Ft_Gpu_Hal_EndTransfer(Ft_Gpu_Hal_Context_t *host)
{
    1a3c:	b510      	push	{r4, lr}
    1a3e:	0004      	movs	r4, r0
    // deselect the slave (let slave CS float high for SIM System)
    lcd_stop_xfer();
    1a40:	4b02      	ldr	r3, [pc, #8]	; (1a4c <Ft_Gpu_Hal_EndTransfer+0x10>)
    1a42:	4798      	blx	r3
    
	host->status = FT_GPU_HAL_OPENED;
    1a44:	2300      	movs	r3, #0
    1a46:	7323      	strb	r3, [r4, #12]
}
    1a48:	bd10      	pop	{r4, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	000025a5 	.word	0x000025a5

00001a50 <Ft_Gpu_Hal_Rd8>:


ft_uint8_t Ft_Gpu_Hal_Rd8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    1a50:	b570      	push	{r4, r5, r6, lr}
    1a52:	0004      	movs	r4, r0
    1a54:	000a      	movs	r2, r1
	ft_uint8_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    1a56:	2100      	movs	r1, #0
    1a58:	4b05      	ldr	r3, [pc, #20]	; (1a70 <Ft_Gpu_Hal_Rd8+0x20>)
    1a5a:	4798      	blx	r3
    
    // read a byte
	value = Ft_Gpu_Hal_Transfer8(host,0);
    1a5c:	2100      	movs	r1, #0
    1a5e:	0020      	movs	r0, r4
    1a60:	4b04      	ldr	r3, [pc, #16]	; (1a74 <Ft_Gpu_Hal_Rd8+0x24>)
    1a62:	4798      	blx	r3
    1a64:	0005      	movs	r5, r0

    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1a66:	0020      	movs	r0, r4
    1a68:	4b03      	ldr	r3, [pc, #12]	; (1a78 <Ft_Gpu_Hal_Rd8+0x28>)
    1a6a:	4798      	blx	r3
    
	return value;
}
    1a6c:	0028      	movs	r0, r5
    1a6e:	bd70      	pop	{r4, r5, r6, pc}
    1a70:	00001919 	.word	0x00001919
    1a74:	00001959 	.word	0x00001959
    1a78:	00001a3d 	.word	0x00001a3d

00001a7c <Ft_Gpu_Hal_Rd16>:


ft_uint16_t Ft_Gpu_Hal_Rd16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    1a7c:	b570      	push	{r4, r5, r6, lr}
    1a7e:	0004      	movs	r4, r0
    1a80:	000a      	movs	r2, r1
	ft_uint16_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    1a82:	2100      	movs	r1, #0
    1a84:	4b05      	ldr	r3, [pc, #20]	; (1a9c <Ft_Gpu_Hal_Rd16+0x20>)
    1a86:	4798      	blx	r3
    
    // read 2 bytes
	value = Ft_Gpu_Hal_Transfer16(host,0);
    1a88:	2100      	movs	r1, #0
    1a8a:	0020      	movs	r0, r4
    1a8c:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <Ft_Gpu_Hal_Rd16+0x24>)
    1a8e:	4798      	blx	r3
    1a90:	0005      	movs	r5, r0
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1a92:	0020      	movs	r0, r4
    1a94:	4b03      	ldr	r3, [pc, #12]	; (1aa4 <Ft_Gpu_Hal_Rd16+0x28>)
    1a96:	4798      	blx	r3
    
	return value;
}
    1a98:	0028      	movs	r0, r5
    1a9a:	bd70      	pop	{r4, r5, r6, pc}
    1a9c:	00001919 	.word	0x00001919
    1aa0:	000019d1 	.word	0x000019d1
    1aa4:	00001a3d 	.word	0x00001a3d

00001aa8 <Ft_Gpu_Hal_Wr8>:
	return value;
}


ft_void_t Ft_Gpu_Hal_Wr8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint8_t v)
{	
    1aa8:	b570      	push	{r4, r5, r6, lr}
    1aaa:	0004      	movs	r4, r0
    1aac:	0015      	movs	r5, r2
    
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1aae:	000a      	movs	r2, r1
    1ab0:	2101      	movs	r1, #1
    1ab2:	4b05      	ldr	r3, [pc, #20]	; (1ac8 <Ft_Gpu_Hal_Wr8+0x20>)
    1ab4:	4798      	blx	r3
    
    // read a byte
	Ft_Gpu_Hal_Transfer8(host,v);
    1ab6:	0029      	movs	r1, r5
    1ab8:	0020      	movs	r0, r4
    1aba:	4b04      	ldr	r3, [pc, #16]	; (1acc <Ft_Gpu_Hal_Wr8+0x24>)
    1abc:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1abe:	0020      	movs	r0, r4
    1ac0:	4b03      	ldr	r3, [pc, #12]	; (1ad0 <Ft_Gpu_Hal_Wr8+0x28>)
    1ac2:	4798      	blx	r3
}
    1ac4:	bd70      	pop	{r4, r5, r6, pc}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	00001919 	.word	0x00001919
    1acc:	00001959 	.word	0x00001959
    1ad0:	00001a3d 	.word	0x00001a3d

00001ad4 <Ft_Gpu_Hal_Wr16>:


ft_void_t Ft_Gpu_Hal_Wr16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint16_t v)
{
    1ad4:	b570      	push	{r4, r5, r6, lr}
    1ad6:	0004      	movs	r4, r0
    1ad8:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1ada:	000a      	movs	r2, r1
    1adc:	2101      	movs	r1, #1
    1ade:	4b05      	ldr	r3, [pc, #20]	; (1af4 <Ft_Gpu_Hal_Wr16+0x20>)
    1ae0:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer16(host,v);
    1ae2:	0029      	movs	r1, r5
    1ae4:	0020      	movs	r0, r4
    1ae6:	4b04      	ldr	r3, [pc, #16]	; (1af8 <Ft_Gpu_Hal_Wr16+0x24>)
    1ae8:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1aea:	0020      	movs	r0, r4
    1aec:	4b03      	ldr	r3, [pc, #12]	; (1afc <Ft_Gpu_Hal_Wr16+0x28>)
    1aee:	4798      	blx	r3
}
    1af0:	bd70      	pop	{r4, r5, r6, pc}
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	00001919 	.word	0x00001919
    1af8:	000019d1 	.word	0x000019d1
    1afc:	00001a3d 	.word	0x00001a3d

00001b00 <Ft_Gpu_Hal_Wr32>:


ft_void_t Ft_Gpu_Hal_Wr32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint32_t v)
{
    1b00:	b570      	push	{r4, r5, r6, lr}
    1b02:	0004      	movs	r4, r0
    1b04:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1b06:	000a      	movs	r2, r1
    1b08:	2101      	movs	r1, #1
    1b0a:	4b05      	ldr	r3, [pc, #20]	; (1b20 <Ft_Gpu_Hal_Wr32+0x20>)
    1b0c:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer32(host,v);
    1b0e:	0029      	movs	r1, r5
    1b10:	0020      	movs	r0, r4
    1b12:	4b04      	ldr	r3, [pc, #16]	; (1b24 <Ft_Gpu_Hal_Wr32+0x24>)
    1b14:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1b16:	0020      	movs	r0, r4
    1b18:	4b03      	ldr	r3, [pc, #12]	; (1b28 <Ft_Gpu_Hal_Wr32+0x28>)
    1b1a:	4798      	blx	r3
}
    1b1c:	bd70      	pop	{r4, r5, r6, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	00001919 	.word	0x00001919
    1b24:	00001a09 	.word	0x00001a09
    1b28:	00001a3d 	.word	0x00001a3d

00001b2c <Ft_Gpu_Hal_Updatecmdfifo>:
	lcd_host_cmd((cmd & 0xFF), ((cmd >> 8) & 0xFF));
}


ft_void_t Ft_Gpu_Hal_Updatecmdfifo(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    1b2c:	b510      	push	{r4, lr}
	host->ft_cmd_fifo_wp  = (host->ft_cmd_fifo_wp + count) & 4095;
    1b2e:	8902      	ldrh	r2, [r0, #8]
    1b30:	1852      	adds	r2, r2, r1
    1b32:	0512      	lsls	r2, r2, #20
    1b34:	0d12      	lsrs	r2, r2, #20

	//4 byte alignment
	host->ft_cmd_fifo_wp = (host->ft_cmd_fifo_wp + 3) & 0xffc;
    1b36:	3203      	adds	r2, #3
    1b38:	4903      	ldr	r1, [pc, #12]	; (1b48 <Ft_Gpu_Hal_Updatecmdfifo+0x1c>)
    1b3a:	400a      	ands	r2, r1
    1b3c:	8102      	strh	r2, [r0, #8]
    
	Ft_Gpu_Hal_Wr16(host,REG_CMD_WRITE,host->ft_cmd_fifo_wp);
    1b3e:	4903      	ldr	r1, [pc, #12]	; (1b4c <Ft_Gpu_Hal_Updatecmdfifo+0x20>)
    1b40:	4b03      	ldr	r3, [pc, #12]	; (1b50 <Ft_Gpu_Hal_Updatecmdfifo+0x24>)
    1b42:	4798      	blx	r3
}
    1b44:	bd10      	pop	{r4, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	00000ffc 	.word	0x00000ffc
    1b4c:	003020fc 	.word	0x003020fc
    1b50:	00001ad5 	.word	0x00001ad5

00001b54 <Ft_Gpu_Cmdfifo_Freespace>:


ft_uint16_t Ft_Gpu_Cmdfifo_Freespace(Ft_Gpu_Hal_Context_t *host)
{
    1b54:	b510      	push	{r4, lr}
    /* calculate the free space for the coprocessor FIFO. Refer to pg 150 in
     * the FT81X_Series_Programmers_Guide datasheet */
	ft_uint16_t fullness,retval;

    // REG_CMD_READ = 0x3020F8
	fullness = (host->ft_cmd_fifo_wp - Ft_Gpu_Hal_Rd16(host,REG_CMD_READ)) & 4095;
    1b56:	8904      	ldrh	r4, [r0, #8]
    1b58:	4904      	ldr	r1, [pc, #16]	; (1b6c <Ft_Gpu_Cmdfifo_Freespace+0x18>)
    1b5a:	4b05      	ldr	r3, [pc, #20]	; (1b70 <Ft_Gpu_Cmdfifo_Freespace+0x1c>)
    1b5c:	4798      	blx	r3
    1b5e:	1a24      	subs	r4, r4, r0
    1b60:	0524      	lsls	r4, r4, #20
    1b62:	0d24      	lsrs	r4, r4, #20
    
	retval = (FT_CMD_FIFO_SIZE - 4) - fullness;
    1b64:	4803      	ldr	r0, [pc, #12]	; (1b74 <Ft_Gpu_Cmdfifo_Freespace+0x20>)
    1b66:	1b00      	subs	r0, r0, r4
    1b68:	b280      	uxth	r0, r0
    
	return (retval);
}
    1b6a:	bd10      	pop	{r4, pc}
    1b6c:	003020f8 	.word	0x003020f8
    1b70:	00001a7d 	.word	0x00001a7d
    1b74:	00000ffc 	.word	0x00000ffc

00001b78 <Ft_Gpu_Hal_CheckCmdBuffer>:
}
#endif


ft_void_t Ft_Gpu_Hal_CheckCmdBuffer(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    1b78:	b570      	push	{r4, r5, r6, lr}
    1b7a:	0005      	movs	r5, r0
    1b7c:	000c      	movs	r4, r1
   ft_uint16_t getfreespace;
   do{
       // This "fixme" was here in the original code.
	   // FIXME: This can get stuck, non-even is returned in case of coprocessor issue
        getfreespace = Ft_Gpu_Cmdfifo_Freespace(host);
    1b7e:	0028      	movs	r0, r5
    1b80:	4b02      	ldr	r3, [pc, #8]	; (1b8c <Ft_Gpu_Hal_CheckCmdBuffer+0x14>)
    1b82:	4798      	blx	r3
        
   // loop until there is free space, else break if there is enough free space
   }while(getfreespace < count);
    1b84:	42a0      	cmp	r0, r4
    1b86:	d3fa      	bcc.n	1b7e <Ft_Gpu_Hal_CheckCmdBuffer+0x6>
}
    1b88:	bd70      	pop	{r4, r5, r6, pc}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	00001b55 	.word	0x00001b55

00001b90 <Ft_Gpu_Hal_WaitCmdfifo_empty>:


ft_void_t Ft_Gpu_Hal_WaitCmdfifo_empty(Ft_Gpu_Hal_Context_t *host)
{
    1b90:	b570      	push	{r4, r5, r6, lr}
    1b92:	0005      	movs	r5, r0
   /* wait for the FIFO read and write pointers to equal each other.
    * This is the naive way to do it, refer to pg 154 in 
    * the FT81X_Series_Programmers_Guide datasheet */
   while(Ft_Gpu_Hal_Rd16(host,REG_CMD_READ) != Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE));
    1b94:	4907      	ldr	r1, [pc, #28]	; (1bb4 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x24>)
    1b96:	0028      	movs	r0, r5
    1b98:	4c07      	ldr	r4, [pc, #28]	; (1bb8 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    1b9a:	47a0      	blx	r4
    1b9c:	0006      	movs	r6, r0
    1b9e:	4907      	ldr	r1, [pc, #28]	; (1bbc <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    1ba0:	0028      	movs	r0, r5
    1ba2:	47a0      	blx	r4
    1ba4:	4286      	cmp	r6, r0
    1ba6:	d1f5      	bne.n	1b94 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x4>
   
   host->ft_cmd_fifo_wp = Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE);
    1ba8:	4904      	ldr	r1, [pc, #16]	; (1bbc <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    1baa:	0028      	movs	r0, r5
    1bac:	4b02      	ldr	r3, [pc, #8]	; (1bb8 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    1bae:	4798      	blx	r3
    1bb0:	8128      	strh	r0, [r5, #8]
}
    1bb2:	bd70      	pop	{r4, r5, r6, pc}
    1bb4:	003020f8 	.word	0x003020f8
    1bb8:	00001a7d 	.word	0x00001a7d
    1bbc:	003020fc 	.word	0x003020fc

00001bc0 <Ft_Gpu_Hal_WrCmd32>:
    host->ft_cmd_fifo_wp = 0;
}


ft_void_t Ft_Gpu_Hal_WrCmd32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t cmd)
{
    1bc0:	b570      	push	{r4, r5, r6, lr}
    1bc2:	0004      	movs	r4, r0
    1bc4:	000d      	movs	r5, r1
    Ft_Gpu_Hal_CheckCmdBuffer(host, sizeof(cmd));
    1bc6:	2104      	movs	r1, #4
    1bc8:	4b07      	ldr	r3, [pc, #28]	; (1be8 <Ft_Gpu_Hal_WrCmd32+0x28>)
    1bca:	4798      	blx	r3
    
    Ft_Gpu_Hal_Wr32(host, RAM_CMD + host->ft_cmd_fifo_wp, cmd);
    1bcc:	8921      	ldrh	r1, [r4, #8]
    1bce:	23c2      	movs	r3, #194	; 0xc2
    1bd0:	039b      	lsls	r3, r3, #14
    1bd2:	469c      	mov	ip, r3
    1bd4:	4461      	add	r1, ip
    1bd6:	002a      	movs	r2, r5
    1bd8:	0020      	movs	r0, r4
    1bda:	4b04      	ldr	r3, [pc, #16]	; (1bec <Ft_Gpu_Hal_WrCmd32+0x2c>)
    1bdc:	4798      	blx	r3
    
    Ft_Gpu_Hal_Updatecmdfifo(host, sizeof(cmd));
    1bde:	2104      	movs	r1, #4
    1be0:	0020      	movs	r0, r4
    1be2:	4b03      	ldr	r3, [pc, #12]	; (1bf0 <Ft_Gpu_Hal_WrCmd32+0x30>)
    1be4:	4798      	blx	r3
}
    1be6:	bd70      	pop	{r4, r5, r6, pc}
    1be8:	00001b79 	.word	0x00001b79
    1bec:	00001b01 	.word	0x00001b01
    1bf0:	00001b2d 	.word	0x00001b2d

00001bf4 <printTime>:
/* Function Name    : printTime
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Get the current time and date, display it on the screen
 */
void printTime(){
    1bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf6:	46d6      	mov	lr, sl
    1bf8:	464f      	mov	r7, r9
    1bfa:	4646      	mov	r6, r8
    1bfc:	b5c0      	push	{r6, r7, lr}
    1bfe:	b08a      	sub	sp, #40	; 0x28
	int fstYloc = disHei - 60, sndYloc = disHei - 30;
	char buff[32];
	//get current time and date
	rtc_calendar_get_time(&rtc_instance, &time);
    1c00:	4c1b      	ldr	r4, [pc, #108]	; (1c70 <printTime+0x7c>)
    1c02:	0021      	movs	r1, r4
    1c04:	481b      	ldr	r0, [pc, #108]	; (1c74 <printTime+0x80>)
    1c06:	4b1c      	ldr	r3, [pc, #112]	; (1c78 <printTime+0x84>)
    1c08:	4798      	blx	r3
	//put together a string for time and send to display
	snprintf(buff, 32, "%02d:%02d:%02d", time.hour, time.minute, time.second);
    1c0a:	78a3      	ldrb	r3, [r4, #2]
    1c0c:	7862      	ldrb	r2, [r4, #1]
    1c0e:	7821      	ldrb	r1, [r4, #0]
    1c10:	ad02      	add	r5, sp, #8
    1c12:	9101      	str	r1, [sp, #4]
    1c14:	9200      	str	r2, [sp, #0]
    1c16:	4a19      	ldr	r2, [pc, #100]	; (1c7c <printTime+0x88>)
    1c18:	2120      	movs	r1, #32
    1c1a:	0028      	movs	r0, r5
    1c1c:	4e18      	ldr	r6, [pc, #96]	; (1c80 <printTime+0x8c>)
    1c1e:	46b2      	mov	sl, r6
    1c20:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Text(phost, 10, fstYloc, font, 0, buff);
    1c22:	4b18      	ldr	r3, [pc, #96]	; (1c84 <printTime+0x90>)
    1c24:	4699      	mov	r9, r3
    1c26:	781b      	ldrb	r3, [r3, #0]
    1c28:	4a17      	ldr	r2, [pc, #92]	; (1c88 <printTime+0x94>)
    1c2a:	4690      	mov	r8, r2
    1c2c:	6810      	ldr	r0, [r2, #0]
    1c2e:	9501      	str	r5, [sp, #4]
    1c30:	2700      	movs	r7, #0
    1c32:	9700      	str	r7, [sp, #0]
    1c34:	22d2      	movs	r2, #210	; 0xd2
    1c36:	0052      	lsls	r2, r2, #1
    1c38:	210a      	movs	r1, #10
    1c3a:	4e14      	ldr	r6, [pc, #80]	; (1c8c <printTime+0x98>)
    1c3c:	47b0      	blx	r6
	
	//put together a string for date and send to display
	snprintf(buff, 32, "%02d/%02d/%04d", time.month, time.day, time.year);
    1c3e:	7963      	ldrb	r3, [r4, #5]
    1c40:	7922      	ldrb	r2, [r4, #4]
    1c42:	88e1      	ldrh	r1, [r4, #6]
    1c44:	9101      	str	r1, [sp, #4]
    1c46:	9200      	str	r2, [sp, #0]
    1c48:	4a11      	ldr	r2, [pc, #68]	; (1c90 <printTime+0x9c>)
    1c4a:	2120      	movs	r1, #32
    1c4c:	0028      	movs	r0, r5
    1c4e:	47d0      	blx	sl
	Ft_Gpu_CoCmd_Text(phost, 10, sndYloc, font, 0, buff);
    1c50:	464b      	mov	r3, r9
    1c52:	781b      	ldrb	r3, [r3, #0]
    1c54:	4642      	mov	r2, r8
    1c56:	6810      	ldr	r0, [r2, #0]
    1c58:	9501      	str	r5, [sp, #4]
    1c5a:	9700      	str	r7, [sp, #0]
    1c5c:	22e1      	movs	r2, #225	; 0xe1
    1c5e:	0052      	lsls	r2, r2, #1
    1c60:	210a      	movs	r1, #10
    1c62:	47b0      	blx	r6
}//end printTime
    1c64:	b00a      	add	sp, #40	; 0x28
    1c66:	bc1c      	pop	{r2, r3, r4}
    1c68:	4690      	mov	r8, r2
    1c6a:	4699      	mov	r9, r3
    1c6c:	46a2      	mov	sl, r4
    1c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c70:	20000778 	.word	0x20000778
    1c74:	20000460 	.word	0x20000460
    1c78:	00000555 	.word	0x00000555
    1c7c:	00004a0c 	.word	0x00004a0c
    1c80:	00004105 	.word	0x00004105
    1c84:	20000009 	.word	0x20000009
    1c88:	20000780 	.word	0x20000780
    1c8c:	00001661 	.word	0x00001661
    1c90:	00004a1c 	.word	0x00004a1c

00001c94 <play>:
/* Function Name    : play
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Play 3 consecutive beep at 660Hz when called
 */
void play(){
    1c94:	b510      	push	{r4, lr}
	//set full volume
	Ft_Gpu_Hal_Wr8(phost,REG_VOL_SOUND,0x255);
    1c96:	4c0d      	ldr	r4, [pc, #52]	; (1ccc <play+0x38>)
    1c98:	2255      	movs	r2, #85	; 0x55
    1c9a:	490d      	ldr	r1, [pc, #52]	; (1cd0 <play+0x3c>)
    1c9c:	6820      	ldr	r0, [r4, #0]
    1c9e:	4b0d      	ldr	r3, [pc, #52]	; (1cd4 <play+0x40>)
    1ca0:	4798      	blx	r3
	//set one single beet at 660Hz
	Ft_Gpu_Hal_Wr16(phost, REG_SOUND,  (73<< 8) | 0x10);
    1ca2:	6820      	ldr	r0, [r4, #0]
    1ca4:	4a0c      	ldr	r2, [pc, #48]	; (1cd8 <play+0x44>)
    1ca6:	490d      	ldr	r1, [pc, #52]	; (1cdc <play+0x48>)
    1ca8:	4b0d      	ldr	r3, [pc, #52]	; (1ce0 <play+0x4c>)
    1caa:	4798      	blx	r3

	//play it 3 times delay 100ms inbetween
	int i;
	for (i=0; i < 3; i++){
    1cac:	2400      	movs	r4, #0
    1cae:	e009      	b.n	1cc4 <play+0x30>
		Ft_Gpu_Hal_Wr8(phost, REG_PLAY, 1);
    1cb0:	4b06      	ldr	r3, [pc, #24]	; (1ccc <play+0x38>)
    1cb2:	6818      	ldr	r0, [r3, #0]
    1cb4:	2201      	movs	r2, #1
    1cb6:	490b      	ldr	r1, [pc, #44]	; (1ce4 <play+0x50>)
    1cb8:	4b06      	ldr	r3, [pc, #24]	; (1cd4 <play+0x40>)
    1cba:	4798      	blx	r3
		delay_ms(100);
    1cbc:	2064      	movs	r0, #100	; 0x64
    1cbe:	4b0a      	ldr	r3, [pc, #40]	; (1ce8 <play+0x54>)
    1cc0:	4798      	blx	r3
	for (i=0; i < 3; i++){
    1cc2:	3401      	adds	r4, #1
    1cc4:	2c02      	cmp	r4, #2
    1cc6:	ddf3      	ble.n	1cb0 <play+0x1c>
	}
}//end play
    1cc8:	bd10      	pop	{r4, pc}
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	20000780 	.word	0x20000780
    1cd0:	00302084 	.word	0x00302084
    1cd4:	00001aa9 	.word	0x00001aa9
    1cd8:	00004910 	.word	0x00004910
    1cdc:	00302088 	.word	0x00302088
    1ce0:	00001ad5 	.word	0x00001ad5
    1ce4:	0030208c 	.word	0x0030208c
    1ce8:	00000151 	.word	0x00000151

00001cec <drawTitle>:
/* Function Name    : drawTitle
 * Parameters       : char *title 
 * Return Values(s) : void
 * Description      : Draw the title to each screen based on title received
 */
void drawTitle(char *title){
    1cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cee:	46ce      	mov	lr, r9
    1cf0:	4647      	mov	r7, r8
    1cf2:	b580      	push	{r7, lr}
    1cf4:	b085      	sub	sp, #20
    1cf6:	4681      	mov	r9, r0
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_XY(disWid/3,0));
    1cf8:	4c13      	ldr	r4, [pc, #76]	; (1d48 <drawTitle+0x5c>)
    1cfa:	4914      	ldr	r1, [pc, #80]	; (1d4c <drawTitle+0x60>)
    1cfc:	6820      	ldr	r0, [r4, #0]
    1cfe:	4d14      	ldr	r5, [pc, #80]	; (1d50 <drawTitle+0x64>)
    1d00:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_SIZE((disWid*3/2), 50));
    1d02:	4914      	ldr	r1, [pc, #80]	; (1d54 <drawTitle+0x68>)
    1d04:	6820      	ldr	r0, [r4, #0]
    1d06:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Gradient(phost, disWid/3*2,0, 0x8B90FF, disWid/3*2, 50,0x2933FF);
    1d08:	2685      	movs	r6, #133	; 0x85
    1d0a:	00b6      	lsls	r6, r6, #2
    1d0c:	6820      	ldr	r0, [r4, #0]
    1d0e:	4b12      	ldr	r3, [pc, #72]	; (1d58 <drawTitle+0x6c>)
    1d10:	9302      	str	r3, [sp, #8]
    1d12:	2332      	movs	r3, #50	; 0x32
    1d14:	9301      	str	r3, [sp, #4]
    1d16:	9600      	str	r6, [sp, #0]
    1d18:	4b10      	ldr	r3, [pc, #64]	; (1d5c <drawTitle+0x70>)
    1d1a:	2200      	movs	r2, #0
    1d1c:	0031      	movs	r1, r6
    1d1e:	4f10      	ldr	r7, [pc, #64]	; (1d60 <drawTitle+0x74>)
    1d20:	47b8      	blx	r7
//	Ft_Gpu_CoCmd_Gradient(phost, disWid/3,0, 0x2933FF, disWid, 50,0x8B90FF);
	Ft_Gpu_CoCmd_Text(phost, (disWid/3*2), 30, 30, OPT_CENTER, title);
    1d22:	6820      	ldr	r0, [r4, #0]
    1d24:	464b      	mov	r3, r9
    1d26:	9301      	str	r3, [sp, #4]
    1d28:	23c0      	movs	r3, #192	; 0xc0
    1d2a:	00db      	lsls	r3, r3, #3
    1d2c:	9300      	str	r3, [sp, #0]
    1d2e:	231e      	movs	r3, #30
    1d30:	221e      	movs	r2, #30
    1d32:	0031      	movs	r1, r6
    1d34:	4e0b      	ldr	r6, [pc, #44]	; (1d64 <drawTitle+0x78>)
    1d36:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,1,1));
    1d38:	6820      	ldr	r0, [r4, #0]
    1d3a:	490b      	ldr	r1, [pc, #44]	; (1d68 <drawTitle+0x7c>)
    1d3c:	47a8      	blx	r5
}//end drawTitle
    1d3e:	b005      	add	sp, #20
    1d40:	bc0c      	pop	{r2, r3}
    1d42:	4690      	mov	r8, r2
    1d44:	4699      	mov	r9, r3
    1d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d48:	20000780 	.word	0x20000780
    1d4c:	1b085000 	.word	0x1b085000
    1d50:	00001bc1 	.word	0x00001bc1
    1d54:	1c4b0032 	.word	0x1c4b0032
    1d58:	002933ff 	.word	0x002933ff
    1d5c:	008b90ff 	.word	0x008b90ff
    1d60:	00001859 	.word	0x00001859
    1d64:	00001661 	.word	0x00001661
    1d68:	26000003 	.word	0x26000003

00001d6c <drawBack>:
/* Function Name    : drawBack
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Draw back button when called
 */
void drawBack(){
    1d6c:	b510      	push	{r4, lr}
    1d6e:	b084      	sub	sp, #16
	//assign tag value and draw button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(back));
    1d70:	4c0e      	ldr	r4, [pc, #56]	; (1dac <drawBack+0x40>)
    1d72:	490f      	ldr	r1, [pc, #60]	; (1db0 <drawBack+0x44>)
    1d74:	6820      	ldr	r0, [r4, #0]
    1d76:	4b0f      	ldr	r3, [pc, #60]	; (1db4 <drawBack+0x48>)
    1d78:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    1d7a:	6820      	ldr	r0, [r4, #0]
    1d7c:	4b0e      	ldr	r3, [pc, #56]	; (1db8 <drawBack+0x4c>)
    1d7e:	781b      	ldrb	r3, [r3, #0]
    1d80:	4a0e      	ldr	r2, [pc, #56]	; (1dbc <drawBack+0x50>)
    1d82:	7812      	ldrb	r2, [r2, #0]
    1d84:	2a06      	cmp	r2, #6
    1d86:	d00d      	beq.n	1da4 <drawBack+0x38>
    1d88:	2100      	movs	r1, #0
    1d8a:	4a0d      	ldr	r2, [pc, #52]	; (1dc0 <drawBack+0x54>)
    1d8c:	9203      	str	r2, [sp, #12]
    1d8e:	9102      	str	r1, [sp, #8]
    1d90:	9301      	str	r3, [sp, #4]
    1d92:	2335      	movs	r3, #53	; 0x35
    1d94:	9300      	str	r3, [sp, #0]
    1d96:	332f      	adds	r3, #47	; 0x2f
    1d98:	2200      	movs	r2, #0
    1d9a:	2100      	movs	r1, #0
    1d9c:	4c09      	ldr	r4, [pc, #36]	; (1dc4 <drawBack+0x58>)
    1d9e:	47a0      	blx	r4
}//end drawBack
    1da0:	b004      	add	sp, #16
    1da2:	bd10      	pop	{r4, pc}
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    1da4:	2180      	movs	r1, #128	; 0x80
    1da6:	0049      	lsls	r1, r1, #1
    1da8:	e7ef      	b.n	1d8a <drawBack+0x1e>
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	20000780 	.word	0x20000780
    1db0:	03000006 	.word	0x03000006
    1db4:	00001bc1 	.word	0x00001bc1
    1db8:	20000009 	.word	0x20000009
    1dbc:	20000115 	.word	0x20000115
    1dc0:	00004988 	.word	0x00004988
    1dc4:	00001775 	.word	0x00001775

00001dc8 <drawAlert>:
/* Function Name       : drawAlert
	* Parameters       : int x, int y, char stat
	* Return Values(s) : void
	* Description      : Draw alert, green if good attenuation, red otherwise
	*/
void drawAlert(int x, int y, char stat){
    1dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dca:	46d6      	mov	lr, sl
    1dcc:	464f      	mov	r7, r9
    1dce:	4646      	mov	r6, r8
    1dd0:	b5c0      	push	{r6, r7, lr}
    1dd2:	4680      	mov	r8, r0
    1dd4:	000d      	movs	r5, r1
    1dd6:	0014      	movs	r4, r2
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    1dd8:	4f1f      	ldr	r7, [pc, #124]	; (1e58 <drawAlert+0x90>)
    1dda:	4920      	ldr	r1, [pc, #128]	; (1e5c <drawAlert+0x94>)
    1ddc:	6838      	ldr	r0, [r7, #0]
    1dde:	4e20      	ldr	r6, [pc, #128]	; (1e60 <drawAlert+0x98>)
    1de0:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(7 * 16));
    1de2:	4920      	ldr	r1, [pc, #128]	; (1e64 <drawAlert+0x9c>)
    1de4:	6838      	ldr	r0, [r7, #0]
    1de6:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    1de8:	6838      	ldr	r0, [r7, #0]
    1dea:	491f      	ldr	r1, [pc, #124]	; (1e68 <drawAlert+0xa0>)
    1dec:	47b0      	blx	r6
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    1dee:	2c00      	cmp	r4, #0
    1df0:	d02b      	beq.n	1e4a <drawAlert+0x82>
	else					Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(204, 51, 0));
    1df2:	4b19      	ldr	r3, [pc, #100]	; (1e58 <drawAlert+0x90>)
    1df4:	6818      	ldr	r0, [r3, #0]
    1df6:	491d      	ldr	r1, [pc, #116]	; (1e6c <drawAlert+0xa4>)
    1df8:	4b19      	ldr	r3, [pc, #100]	; (1e60 <drawAlert+0x98>)
    1dfa:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(x * 16, y * 16) );
    1dfc:	4643      	mov	r3, r8
    1dfe:	04d9      	lsls	r1, r3, #19
    1e00:	4b1b      	ldr	r3, [pc, #108]	; (1e70 <drawAlert+0xa8>)
    1e02:	469a      	mov	sl, r3
    1e04:	4019      	ands	r1, r3
    1e06:	012b      	lsls	r3, r5, #4
    1e08:	4a1a      	ldr	r2, [pc, #104]	; (1e74 <drawAlert+0xac>)
    1e0a:	4691      	mov	r9, r2
    1e0c:	4013      	ands	r3, r2
    1e0e:	4319      	orrs	r1, r3
    1e10:	2680      	movs	r6, #128	; 0x80
    1e12:	05f6      	lsls	r6, r6, #23
    1e14:	4331      	orrs	r1, r6
    1e16:	4c10      	ldr	r4, [pc, #64]	; (1e58 <drawAlert+0x90>)
    1e18:	6820      	ldr	r0, [r4, #0]
    1e1a:	4f11      	ldr	r7, [pc, #68]	; (1e60 <drawAlert+0x98>)
    1e1c:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + 25) * 16, (y + 20) * 16));
    1e1e:	4641      	mov	r1, r8
    1e20:	3119      	adds	r1, #25
    1e22:	04c9      	lsls	r1, r1, #19
    1e24:	4653      	mov	r3, sl
    1e26:	4019      	ands	r1, r3
    1e28:	3514      	adds	r5, #20
    1e2a:	012d      	lsls	r5, r5, #4
    1e2c:	464b      	mov	r3, r9
    1e2e:	401d      	ands	r5, r3
    1e30:	4329      	orrs	r1, r5
    1e32:	4331      	orrs	r1, r6
    1e34:	6820      	ldr	r0, [r4, #0]
    1e36:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, END());
    1e38:	6820      	ldr	r0, [r4, #0]
    1e3a:	2184      	movs	r1, #132	; 0x84
    1e3c:	0589      	lsls	r1, r1, #22
    1e3e:	47b8      	blx	r7
}//end drawAlert
    1e40:	bc1c      	pop	{r2, r3, r4}
    1e42:	4690      	mov	r8, r2
    1e44:	4699      	mov	r9, r3
    1e46:	46a2      	mov	sl, r4
    1e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    1e4a:	4b03      	ldr	r3, [pc, #12]	; (1e58 <drawAlert+0x90>)
    1e4c:	6818      	ldr	r0, [r3, #0]
    1e4e:	490a      	ldr	r1, [pc, #40]	; (1e78 <drawAlert+0xb0>)
    1e50:	4b03      	ldr	r3, [pc, #12]	; (1e60 <drawAlert+0x98>)
    1e52:	4798      	blx	r3
    1e54:	e7d2      	b.n	1dfc <drawAlert+0x34>
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	20000780 	.word	0x20000780
    1e5c:	1f000009 	.word	0x1f000009
    1e60:	00001bc1 	.word	0x00001bc1
    1e64:	0e000070 	.word	0x0e000070
    1e68:	100000ff 	.word	0x100000ff
    1e6c:	04cc3300 	.word	0x04cc3300
    1e70:	3ff80000 	.word	0x3ff80000
    1e74:	00007ff0 	.word	0x00007ff0
    1e78:	0400ff55 	.word	0x0400ff55

00001e7c <disStart>:
/* Function Name    : disStart
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display start sequence
 */
void disStart(){
    1e7c:	b570      	push	{r4, r5, r6, lr}
	Ft_Gpu_CoCmd_Dlstart(phost);
    1e7e:	4c06      	ldr	r4, [pc, #24]	; (1e98 <disStart+0x1c>)
    1e80:	6820      	ldr	r0, [r4, #0]
    1e82:	4b06      	ldr	r3, [pc, #24]	; (1e9c <disStart+0x20>)
    1e84:	4798      	blx	r3
    //change this for initial bg
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    1e86:	2180      	movs	r1, #128	; 0x80
    1e88:	0489      	lsls	r1, r1, #18
    1e8a:	6820      	ldr	r0, [r4, #0]
    1e8c:	4d04      	ldr	r5, [pc, #16]	; (1ea0 <disStart+0x24>)
    1e8e:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(1,1,1));
    1e90:	6820      	ldr	r0, [r4, #0]
    1e92:	4904      	ldr	r1, [pc, #16]	; (1ea4 <disStart+0x28>)
    1e94:	47a8      	blx	r5
}//end disStart
    1e96:	bd70      	pop	{r4, r5, r6, pc}
    1e98:	20000780 	.word	0x20000780
    1e9c:	000018cd 	.word	0x000018cd
    1ea0:	00001bc1 	.word	0x00001bc1
    1ea4:	26000007 	.word	0x26000007

00001ea8 <disEnd>:
/* Function Name    : disEnd
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display end sequence
 */
void disEnd(){
    1ea8:	b510      	push	{r4, lr}
	Ft_Gpu_Hal_WrCmd32(phost,DISPLAY());
    1eaa:	4c06      	ldr	r4, [pc, #24]	; (1ec4 <disEnd+0x1c>)
    1eac:	2100      	movs	r1, #0
    1eae:	6820      	ldr	r0, [r4, #0]
    1eb0:	4b05      	ldr	r3, [pc, #20]	; (1ec8 <disEnd+0x20>)
    1eb2:	4798      	blx	r3
	Ft_Gpu_CoCmd_Swap(phost);
    1eb4:	6820      	ldr	r0, [r4, #0]
    1eb6:	4b05      	ldr	r3, [pc, #20]	; (1ecc <disEnd+0x24>)
    1eb8:	4798      	blx	r3
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    1eba:	6820      	ldr	r0, [r4, #0]
    1ebc:	4b04      	ldr	r3, [pc, #16]	; (1ed0 <disEnd+0x28>)
    1ebe:	4798      	blx	r3
}//end disEnd
    1ec0:	bd10      	pop	{r4, pc}
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	20000780 	.word	0x20000780
    1ec8:	00001bc1 	.word	0x00001bc1
    1ecc:	00001749 	.word	0x00001749
    1ed0:	00001b91 	.word	0x00001b91

00001ed4 <attnOp>:
void attnOp(struct shield_data current_fiber1_data, struct shield_data current_fiber2_data){
    1ed4:	b082      	sub	sp, #8
    1ed6:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ed8:	46de      	mov	lr, fp
    1eda:	4657      	mov	r7, sl
    1edc:	464e      	mov	r6, r9
    1ede:	4645      	mov	r5, r8
    1ee0:	b5e0      	push	{r5, r6, r7, lr}
    1ee2:	b087      	sub	sp, #28
    1ee4:	9003      	str	r0, [sp, #12]
    1ee6:	9104      	str	r1, [sp, #16]
    1ee8:	9205      	str	r2, [sp, #20]
    1eea:	9311      	str	r3, [sp, #68]	; 0x44
    char lastSec, lastMin=1, lastGood = time.second, trigger=0;
    1eec:	4b84      	ldr	r3, [pc, #528]	; (2100 <STACK_SIZE+0x100>)
    1eee:	781b      	ldrb	r3, [r3, #0]
    1ef0:	9302      	str	r3, [sp, #8]
    1ef2:	2600      	movs	r6, #0
    1ef4:	2301      	movs	r3, #1
    1ef6:	4698      	mov	r8, r3
    1ef8:	e055      	b.n	1fa6 <attnOp+0xd2>
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    1efa:	2300      	movs	r3, #0
    1efc:	e088      	b.n	2010 <STACK_SIZE+0x10>
		Ft_Gpu_CoCmd_Number(phost, 500, 255, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    1efe:	2300      	movs	r3, #0
    1f00:	e09b      	b.n	203a <STACK_SIZE+0x3a>
		Ft_Gpu_CoCmd_Number(phost, 500, 385, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    1f02:	2300      	movs	r3, #0
    1f04:	e0ae      	b.n	2064 <STACK_SIZE+0x64>
			drawAlert(40, 27, (attenuation.rssi169<80)? 1:0);
    1f06:	4b7f      	ldr	r3, [pc, #508]	; (2104 <STACK_SIZE+0x104>)
    1f08:	469b      	mov	fp, r3
    1f0a:	881b      	ldrh	r3, [r3, #0]
    1f0c:	b21b      	sxth	r3, r3
    1f0e:	254f      	movs	r5, #79	; 0x4f
    1f10:	0fda      	lsrs	r2, r3, #31
    1f12:	2100      	movs	r1, #0
    1f14:	468a      	mov	sl, r1
    1f16:	429d      	cmp	r5, r3
    1f18:	414a      	adcs	r2, r1
    1f1a:	b2d2      	uxtb	r2, r2
    1f1c:	311b      	adds	r1, #27
    1f1e:	2028      	movs	r0, #40	; 0x28
    1f20:	4c79      	ldr	r4, [pc, #484]	; (2108 <STACK_SIZE+0x108>)
    1f22:	47a0      	blx	r4
			drawAlert(40, 60, (attenuation.rssi915<80)? 1:0);
    1f24:	465b      	mov	r3, fp
    1f26:	885b      	ldrh	r3, [r3, #2]
    1f28:	b21b      	sxth	r3, r3
    1f2a:	0fda      	lsrs	r2, r3, #31
    1f2c:	4651      	mov	r1, sl
    1f2e:	429d      	cmp	r5, r3
    1f30:	414a      	adcs	r2, r1
    1f32:	b2d2      	uxtb	r2, r2
    1f34:	313c      	adds	r1, #60	; 0x3c
    1f36:	2028      	movs	r0, #40	; 0x28
    1f38:	47a0      	blx	r4
			drawAlert(40, 93, (attenuation.rssi245<80)? 1:0);
    1f3a:	465b      	mov	r3, fp
    1f3c:	889b      	ldrh	r3, [r3, #4]
    1f3e:	b21b      	sxth	r3, r3
    1f40:	0fda      	lsrs	r2, r3, #31
    1f42:	4651      	mov	r1, sl
    1f44:	429d      	cmp	r5, r3
    1f46:	414a      	adcs	r2, r1
    1f48:	b2d2      	uxtb	r2, r2
    1f4a:	315d      	adds	r1, #93	; 0x5d
    1f4c:	2028      	movs	r0, #40	; 0x28
    1f4e:	47a0      	blx	r4
    1f50:	e098      	b.n	2084 <STACK_SIZE+0x84>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    1f52:	4b6b      	ldr	r3, [pc, #428]	; (2100 <STACK_SIZE+0x100>)
    1f54:	781b      	ldrb	r3, [r3, #0]
    1f56:	9a02      	ldr	r2, [sp, #8]
    1f58:	1a9b      	subs	r3, r3, r2
    1f5a:	2b0a      	cmp	r3, #10
    1f5c:	d100      	bne.n	1f60 <attnOp+0x8c>
    1f5e:	e0a8      	b.n	20b2 <STACK_SIZE+0xb2>
    1f60:	3332      	adds	r3, #50	; 0x32
    1f62:	d100      	bne.n	1f66 <attnOp+0x92>
    1f64:	e0a5      	b.n	20b2 <STACK_SIZE+0xb2>
		if (trigger == 1){
    1f66:	2e01      	cmp	r6, #1
    1f68:	d100      	bne.n	1f6c <attnOp+0x98>
    1f6a:	e0a7      	b.n	20bc <STACK_SIZE+0xbc>
		if (time.minute%30 == 0 && time.minute != lastMin){
    1f6c:	4b64      	ldr	r3, [pc, #400]	; (2100 <STACK_SIZE+0x100>)
    1f6e:	785c      	ldrb	r4, [r3, #1]
    1f70:	211e      	movs	r1, #30
    1f72:	0020      	movs	r0, r4
    1f74:	4b65      	ldr	r3, [pc, #404]	; (210c <STACK_SIZE+0x10c>)
    1f76:	4798      	blx	r3
    1f78:	b2c9      	uxtb	r1, r1
    1f7a:	2900      	cmp	r1, #0
    1f7c:	d102      	bne.n	1f84 <attnOp+0xb0>
    1f7e:	45a0      	cmp	r8, r4
    1f80:	d000      	beq.n	1f84 <attnOp+0xb0>
			lastMin = time.minute;
    1f82:	46a0      	mov	r8, r4
        Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    1f84:	4b62      	ldr	r3, [pc, #392]	; (2110 <STACK_SIZE+0x110>)
    1f86:	6818      	ldr	r0, [r3, #0]
    1f88:	4962      	ldr	r1, [pc, #392]	; (2114 <STACK_SIZE+0x114>)
    1f8a:	4b63      	ldr	r3, [pc, #396]	; (2118 <STACK_SIZE+0x118>)
    1f8c:	4798      	blx	r3
        drawBack();
    1f8e:	4b63      	ldr	r3, [pc, #396]	; (211c <STACK_SIZE+0x11c>)
    1f90:	4798      	blx	r3
		drawTitle("Attenuation");
    1f92:	4863      	ldr	r0, [pc, #396]	; (2120 <STACK_SIZE+0x120>)
    1f94:	4b63      	ldr	r3, [pc, #396]	; (2124 <STACK_SIZE+0x124>)
    1f96:	4798      	blx	r3
		disEnd();
    1f98:	4b63      	ldr	r3, [pc, #396]	; (2128 <STACK_SIZE+0x128>)
    1f9a:	4798      	blx	r3
	} while (tag != back);
    1f9c:	4b63      	ldr	r3, [pc, #396]	; (212c <STACK_SIZE+0x12c>)
    1f9e:	781b      	ldrb	r3, [r3, #0]
    1fa0:	2b06      	cmp	r3, #6
    1fa2:	d100      	bne.n	1fa6 <attnOp+0xd2>
    1fa4:	e0a2      	b.n	20ec <STACK_SIZE+0xec>
		tag = 0;
    1fa6:	4d61      	ldr	r5, [pc, #388]	; (212c <STACK_SIZE+0x12c>)
    1fa8:	2300      	movs	r3, #0
    1faa:	702b      	strb	r3, [r5, #0]
		rtc_calendar_get_time(&rtc_instance, &time);
    1fac:	4954      	ldr	r1, [pc, #336]	; (2100 <STACK_SIZE+0x100>)
    1fae:	4860      	ldr	r0, [pc, #384]	; (2130 <STACK_SIZE+0x130>)
    1fb0:	4b60      	ldr	r3, [pc, #384]	; (2134 <STACK_SIZE+0x134>)
    1fb2:	4798      	blx	r3
		attenuation.rssi27 =  current_fiber1_data.rssi_values.MHz27RSSI - current_fiber2_data.rssi_values.MHz27RSSI;
    1fb4:	a903      	add	r1, sp, #12
    1fb6:	7a0b      	ldrb	r3, [r1, #8]
    1fb8:	aa11      	add	r2, sp, #68	; 0x44
    1fba:	7a10      	ldrb	r0, [r2, #8]
    1fbc:	1a1b      	subs	r3, r3, r0
    1fbe:	4c51      	ldr	r4, [pc, #324]	; (2104 <STACK_SIZE+0x104>)
    1fc0:	80e3      	strh	r3, [r4, #6]
		attenuation.rssi169 = current_fiber1_data.rssi_values.MHz169RSSI - current_fiber2_data.rssi_values.MHz169RSSI + 10;	//10 offset added based on testing 
    1fc2:	7a4b      	ldrb	r3, [r1, #9]
    1fc4:	7a50      	ldrb	r0, [r2, #9]
    1fc6:	1a1b      	subs	r3, r3, r0
    1fc8:	b29b      	uxth	r3, r3
    1fca:	330a      	adds	r3, #10
    1fcc:	b21b      	sxth	r3, r3
    1fce:	8023      	strh	r3, [r4, #0]
		attenuation.rssi915 = current_fiber1_data.rssi_values.MHz915RSSI - current_fiber2_data.rssi_values.MHz915RSSI;				// approved by Dr. Nguyen
    1fd0:	7a8b      	ldrb	r3, [r1, #10]
    1fd2:	7a90      	ldrb	r0, [r2, #10]
    1fd4:	1a1b      	subs	r3, r3, r0
    1fd6:	8063      	strh	r3, [r4, #2]
		attenuation.rssi245 = current_fiber1_data.rssi_values.GHz24RSSI - current_fiber2_data.rssi_values.GHz24RSSI;
    1fd8:	7acb      	ldrb	r3, [r1, #11]
    1fda:	7ad2      	ldrb	r2, [r2, #11]
    1fdc:	1a9b      	subs	r3, r3, r2
    1fde:	80a3      	strh	r3, [r4, #4]
		disStart();
    1fe0:	4b55      	ldr	r3, [pc, #340]	; (2138 <STACK_SIZE+0x138>)
    1fe2:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    1fe4:	4f4a      	ldr	r7, [pc, #296]	; (2110 <STACK_SIZE+0x110>)
    1fe6:	4955      	ldr	r1, [pc, #340]	; (213c <STACK_SIZE+0x13c>)
    1fe8:	6838      	ldr	r0, [r7, #0]
    1fea:	4b55      	ldr	r3, [pc, #340]	; (2140 <STACK_SIZE+0x140>)
    1fec:	4798      	blx	r3
    1fee:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Append(phost, attnStart, attnEnd);
    1ff0:	4b54      	ldr	r3, [pc, #336]	; (2144 <STACK_SIZE+0x144>)
    1ff2:	681a      	ldr	r2, [r3, #0]
    1ff4:	4b54      	ldr	r3, [pc, #336]	; (2148 <STACK_SIZE+0x148>)
    1ff6:	6819      	ldr	r1, [r3, #0]
    1ff8:	6838      	ldr	r0, [r7, #0]
    1ffa:	4b54      	ldr	r3, [pc, #336]	; (214c <STACK_SIZE+0x14c>)
    1ffc:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    1ffe:	6838      	ldr	r0, [r7, #0]
    2000:	8823      	ldrh	r3, [r4, #0]
    2002:	b21b      	sxth	r3, r3
    2004:	2b00      	cmp	r3, #0
    2006:	da00      	bge.n	200a <STACK_SIZE+0xa>
    2008:	e777      	b.n	1efa <attnOp+0x26>
    200a:	4b3e      	ldr	r3, [pc, #248]	; (2104 <STACK_SIZE+0x104>)
    200c:	881b      	ldrh	r3, [r3, #0]
    200e:	b21b      	sxth	r3, r3
    2010:	9301      	str	r3, [sp, #4]
    2012:	2304      	movs	r3, #4
    2014:	33ff      	adds	r3, #255	; 0xff
    2016:	9300      	str	r3, [sp, #0]
    2018:	3be4      	subs	r3, #228	; 0xe4
    201a:	227d      	movs	r2, #125	; 0x7d
    201c:	21fa      	movs	r1, #250	; 0xfa
    201e:	0049      	lsls	r1, r1, #1
    2020:	4c4b      	ldr	r4, [pc, #300]	; (2150 <STACK_SIZE+0x150>)
    2022:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 255, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    2024:	4b3a      	ldr	r3, [pc, #232]	; (2110 <STACK_SIZE+0x110>)
    2026:	6818      	ldr	r0, [r3, #0]
    2028:	4b36      	ldr	r3, [pc, #216]	; (2104 <STACK_SIZE+0x104>)
    202a:	885b      	ldrh	r3, [r3, #2]
    202c:	b21b      	sxth	r3, r3
    202e:	2b00      	cmp	r3, #0
    2030:	da00      	bge.n	2034 <STACK_SIZE+0x34>
    2032:	e764      	b.n	1efe <attnOp+0x2a>
    2034:	4b33      	ldr	r3, [pc, #204]	; (2104 <STACK_SIZE+0x104>)
    2036:	885b      	ldrh	r3, [r3, #2]
    2038:	b21b      	sxth	r3, r3
    203a:	9301      	str	r3, [sp, #4]
    203c:	2304      	movs	r3, #4
    203e:	33ff      	adds	r3, #255	; 0xff
    2040:	9300      	str	r3, [sp, #0]
    2042:	3be4      	subs	r3, #228	; 0xe4
    2044:	22ff      	movs	r2, #255	; 0xff
    2046:	21fa      	movs	r1, #250	; 0xfa
    2048:	0049      	lsls	r1, r1, #1
    204a:	4c41      	ldr	r4, [pc, #260]	; (2150 <STACK_SIZE+0x150>)
    204c:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 385, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    204e:	4b30      	ldr	r3, [pc, #192]	; (2110 <STACK_SIZE+0x110>)
    2050:	6818      	ldr	r0, [r3, #0]
    2052:	4b2c      	ldr	r3, [pc, #176]	; (2104 <STACK_SIZE+0x104>)
    2054:	889b      	ldrh	r3, [r3, #4]
    2056:	b21b      	sxth	r3, r3
    2058:	2b00      	cmp	r3, #0
    205a:	da00      	bge.n	205e <STACK_SIZE+0x5e>
    205c:	e751      	b.n	1f02 <attnOp+0x2e>
    205e:	4b29      	ldr	r3, [pc, #164]	; (2104 <STACK_SIZE+0x104>)
    2060:	889b      	ldrh	r3, [r3, #4]
    2062:	b21b      	sxth	r3, r3
    2064:	9301      	str	r3, [sp, #4]
    2066:	2304      	movs	r3, #4
    2068:	33ff      	adds	r3, #255	; 0xff
    206a:	9300      	str	r3, [sp, #0]
    206c:	3be4      	subs	r3, #228	; 0xe4
    206e:	2282      	movs	r2, #130	; 0x82
    2070:	32ff      	adds	r2, #255	; 0xff
    2072:	21fa      	movs	r1, #250	; 0xfa
    2074:	0049      	lsls	r1, r1, #1
    2076:	4c36      	ldr	r4, [pc, #216]	; (2150 <STACK_SIZE+0x150>)
    2078:	47a0      	blx	r4
		if (alert == 1){
    207a:	4b36      	ldr	r3, [pc, #216]	; (2154 <STACK_SIZE+0x154>)
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	2b01      	cmp	r3, #1
    2080:	d100      	bne.n	2084 <STACK_SIZE+0x84>
    2082:	e740      	b.n	1f06 <attnOp+0x32>
		if (attenuation.rssi169>80 && attenuation.rssi915>80 && attenuation.rssi245>80){
    2084:	4b1f      	ldr	r3, [pc, #124]	; (2104 <STACK_SIZE+0x104>)
    2086:	881b      	ldrh	r3, [r3, #0]
    2088:	b21b      	sxth	r3, r3
    208a:	2b50      	cmp	r3, #80	; 0x50
    208c:	dc00      	bgt.n	2090 <STACK_SIZE+0x90>
    208e:	e760      	b.n	1f52 <attnOp+0x7e>
    2090:	4b1c      	ldr	r3, [pc, #112]	; (2104 <STACK_SIZE+0x104>)
    2092:	885b      	ldrh	r3, [r3, #2]
    2094:	b21b      	sxth	r3, r3
    2096:	2b50      	cmp	r3, #80	; 0x50
    2098:	dc00      	bgt.n	209c <STACK_SIZE+0x9c>
    209a:	e75a      	b.n	1f52 <attnOp+0x7e>
    209c:	4b19      	ldr	r3, [pc, #100]	; (2104 <STACK_SIZE+0x104>)
    209e:	889b      	ldrh	r3, [r3, #4]
    20a0:	b21b      	sxth	r3, r3
    20a2:	2b50      	cmp	r3, #80	; 0x50
    20a4:	dc00      	bgt.n	20a8 <STACK_SIZE+0xa8>
    20a6:	e754      	b.n	1f52 <attnOp+0x7e>
			lastGood = time.second;
    20a8:	4b15      	ldr	r3, [pc, #84]	; (2100 <STACK_SIZE+0x100>)
    20aa:	781b      	ldrb	r3, [r3, #0]
    20ac:	9302      	str	r3, [sp, #8]
			trigger = 0;
    20ae:	2600      	movs	r6, #0
    20b0:	e759      	b.n	1f66 <attnOp+0x92>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    20b2:	2e00      	cmp	r6, #0
    20b4:	d000      	beq.n	20b8 <STACK_SIZE+0xb8>
    20b6:	e756      	b.n	1f66 <attnOp+0x92>
				trigger = 1;
    20b8:	3601      	adds	r6, #1
    20ba:	e754      	b.n	1f66 <attnOp+0x92>
			if (time.second%5 == 0 && time.second != lastSec && sound==1){
    20bc:	4b10      	ldr	r3, [pc, #64]	; (2100 <STACK_SIZE+0x100>)
    20be:	781c      	ldrb	r4, [r3, #0]
    20c0:	2105      	movs	r1, #5
    20c2:	0020      	movs	r0, r4
    20c4:	4b11      	ldr	r3, [pc, #68]	; (210c <STACK_SIZE+0x10c>)
    20c6:	4798      	blx	r3
    20c8:	b2c9      	uxtb	r1, r1
    20ca:	2900      	cmp	r1, #0
    20cc:	d000      	beq.n	20d0 <STACK_SIZE+0xd0>
    20ce:	e74d      	b.n	1f6c <attnOp+0x98>
    20d0:	45a1      	cmp	r9, r4
    20d2:	d100      	bne.n	20d6 <STACK_SIZE+0xd6>
    20d4:	e74a      	b.n	1f6c <attnOp+0x98>
    20d6:	4b20      	ldr	r3, [pc, #128]	; (2158 <STACK_SIZE+0x158>)
    20d8:	781b      	ldrb	r3, [r3, #0]
    20da:	2b01      	cmp	r3, #1
    20dc:	d000      	beq.n	20e0 <STACK_SIZE+0xe0>
    20de:	e745      	b.n	1f6c <attnOp+0x98>
				play();
    20e0:	4b1e      	ldr	r3, [pc, #120]	; (215c <STACK_SIZE+0x15c>)
    20e2:	4798      	blx	r3
				lastSec = time.second;
    20e4:	4b06      	ldr	r3, [pc, #24]	; (2100 <STACK_SIZE+0x100>)
    20e6:	781b      	ldrb	r3, [r3, #0]
    20e8:	4699      	mov	r9, r3
    20ea:	e73f      	b.n	1f6c <attnOp+0x98>
}// end attnOp
    20ec:	b007      	add	sp, #28
    20ee:	bc3c      	pop	{r2, r3, r4, r5}
    20f0:	4690      	mov	r8, r2
    20f2:	4699      	mov	r9, r3
    20f4:	46a2      	mov	sl, r4
    20f6:	46ab      	mov	fp, r5
    20f8:	bcf0      	pop	{r4, r5, r6, r7}
    20fa:	bc08      	pop	{r3}
    20fc:	b002      	add	sp, #8
    20fe:	4718      	bx	r3
    2100:	20000778 	.word	0x20000778
    2104:	200000fc 	.word	0x200000fc
    2108:	00001dc9 	.word	0x00001dc9
    210c:	00004039 	.word	0x00004039
    2110:	20000780 	.word	0x20000780
    2114:	04ffffff 	.word	0x04ffffff
    2118:	00001bc1 	.word	0x00001bc1
    211c:	00001d6d 	.word	0x00001d6d
    2120:	0000497c 	.word	0x0000497c
    2124:	00001ced 	.word	0x00001ced
    2128:	00001ea9 	.word	0x00001ea9
    212c:	20000115 	.word	0x20000115
    2130:	20000460 	.word	0x20000460
    2134:	00000555 	.word	0x00000555
    2138:	00001e7d 	.word	0x00001e7d
    213c:	0030212c 	.word	0x0030212c
    2140:	00001a51 	.word	0x00001a51
    2144:	20000104 	.word	0x20000104
    2148:	20000108 	.word	0x20000108
    214c:	0000181d 	.word	0x0000181d
    2150:	000016e5 	.word	0x000016e5
    2154:	20000008 	.word	0x20000008
    2158:	20000114 	.word	0x20000114
    215c:	00001c95 	.word	0x00001c95

00002160 <historyOp>:
void historyOp(){
    2160:	b5f0      	push	{r4, r5, r6, r7, lr}
    2162:	46de      	mov	lr, fp
    2164:	4657      	mov	r7, sl
    2166:	464e      	mov	r6, r9
    2168:	4645      	mov	r5, r8
    216a:	b5e0      	push	{r5, r6, r7, lr}
    216c:	b0af      	sub	sp, #188	; 0xbc
    216e:	e05a      	b.n	2226 <historyOp+0xc6>
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    2170:	1c5a      	adds	r2, r3, #1
    2172:	920b      	str	r2, [sp, #44]	; 0x2c
					i+1, history[i][0], history[i][1], history[i][2], history[i][3], history[i][4], \
    2174:	4e3a      	ldr	r6, [pc, #232]	; (2260 <historyOp+0x100>)
    2176:	009a      	lsls	r2, r3, #2
    2178:	18d0      	adds	r0, r2, r3
    217a:	0081      	lsls	r1, r0, #2
    217c:	5f8d      	ldrsh	r5, [r1, r6]
    217e:	0081      	lsls	r1, r0, #2
    2180:	1871      	adds	r1, r6, r1
    2182:	2702      	movs	r7, #2
    2184:	5fc8      	ldrsh	r0, [r1, r7]
    2186:	900c      	str	r0, [sp, #48]	; 0x30
    2188:	2704      	movs	r7, #4
    218a:	5fc8      	ldrsh	r0, [r1, r7]
    218c:	2706      	movs	r7, #6
    218e:	5fcc      	ldrsh	r4, [r1, r7]
    2190:	940d      	str	r4, [sp, #52]	; 0x34
    2192:	2408      	movs	r4, #8
    2194:	5f0f      	ldrsh	r7, [r1, r4]
    2196:	46bc      	mov	ip, r7
					history[i][5], history[i][6], history[i][7], history[i][8], history[i][9]);
    2198:	240a      	movs	r4, #10
    219a:	5f0f      	ldrsh	r7, [r1, r4]
    219c:	46b8      	mov	r8, r7
    219e:	240c      	movs	r4, #12
    21a0:	5f0f      	ldrsh	r7, [r1, r4]
    21a2:	46b9      	mov	r9, r7
    21a4:	240e      	movs	r4, #14
    21a6:	5f0f      	ldrsh	r7, [r1, r4]
    21a8:	2410      	movs	r4, #16
    21aa:	5f09      	ldrsh	r1, [r1, r4]
    21ac:	468b      	mov	fp, r1
    21ae:	18d3      	adds	r3, r2, r3
    21b0:	009a      	lsls	r2, r3, #2
    21b2:	18b6      	adds	r6, r6, r2
    21b4:	2112      	movs	r1, #18
    21b6:	5e73      	ldrsh	r3, [r6, r1]
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    21b8:	ae0e      	add	r6, sp, #56	; 0x38
    21ba:	9309      	str	r3, [sp, #36]	; 0x24
    21bc:	465b      	mov	r3, fp
    21be:	9308      	str	r3, [sp, #32]
    21c0:	9707      	str	r7, [sp, #28]
    21c2:	464b      	mov	r3, r9
    21c4:	9306      	str	r3, [sp, #24]
    21c6:	4643      	mov	r3, r8
    21c8:	9305      	str	r3, [sp, #20]
    21ca:	4663      	mov	r3, ip
    21cc:	9304      	str	r3, [sp, #16]
    21ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    21d0:	9303      	str	r3, [sp, #12]
    21d2:	9002      	str	r0, [sp, #8]
    21d4:	980c      	ldr	r0, [sp, #48]	; 0x30
    21d6:	9001      	str	r0, [sp, #4]
    21d8:	9500      	str	r5, [sp, #0]
    21da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    21dc:	002b      	movs	r3, r5
    21de:	4a21      	ldr	r2, [pc, #132]	; (2264 <historyOp+0x104>)
    21e0:	2180      	movs	r1, #128	; 0x80
    21e2:	0030      	movs	r0, r6
    21e4:	4f20      	ldr	r7, [pc, #128]	; (2268 <historyOp+0x108>)
    21e6:	47b8      	blx	r7
			Ft_Gpu_CoCmd_Text(phost, 50, y, 28, 0,buff);
    21e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    21ea:	b222      	sxth	r2, r4
    21ec:	4b1f      	ldr	r3, [pc, #124]	; (226c <historyOp+0x10c>)
    21ee:	6818      	ldr	r0, [r3, #0]
    21f0:	9601      	str	r6, [sp, #4]
    21f2:	2300      	movs	r3, #0
    21f4:	9300      	str	r3, [sp, #0]
    21f6:	331c      	adds	r3, #28
    21f8:	2132      	movs	r1, #50	; 0x32
    21fa:	4e1d      	ldr	r6, [pc, #116]	; (2270 <historyOp+0x110>)
    21fc:	47b0      	blx	r6
			y = y + 30;
    21fe:	0023      	movs	r3, r4
    2200:	331e      	adds	r3, #30
    2202:	930a      	str	r3, [sp, #40]	; 0x28
		for(i = 0; i < 10; i++){
    2204:	002b      	movs	r3, r5
    2206:	2b09      	cmp	r3, #9
    2208:	ddb2      	ble.n	2170 <historyOp+0x10>
		drawBack();
    220a:	4b1a      	ldr	r3, [pc, #104]	; (2274 <historyOp+0x114>)
    220c:	4798      	blx	r3
		drawTitle("History");
    220e:	481a      	ldr	r0, [pc, #104]	; (2278 <historyOp+0x118>)
    2210:	4b1a      	ldr	r3, [pc, #104]	; (227c <historyOp+0x11c>)
    2212:	4798      	blx	r3
		disEnd();
    2214:	4b1a      	ldr	r3, [pc, #104]	; (2280 <historyOp+0x120>)
    2216:	4798      	blx	r3
		delay_ms(50);
    2218:	2032      	movs	r0, #50	; 0x32
    221a:	4b1a      	ldr	r3, [pc, #104]	; (2284 <historyOp+0x124>)
    221c:	4798      	blx	r3
	} while (tag != back);
    221e:	4b1a      	ldr	r3, [pc, #104]	; (2288 <historyOp+0x128>)
    2220:	781b      	ldrb	r3, [r3, #0]
    2222:	2b06      	cmp	r3, #6
    2224:	d015      	beq.n	2252 <historyOp+0xf2>
		tag = 0;
    2226:	4d18      	ldr	r5, [pc, #96]	; (2288 <historyOp+0x128>)
    2228:	2300      	movs	r3, #0
    222a:	702b      	strb	r3, [r5, #0]
		disStart();
    222c:	4b17      	ldr	r3, [pc, #92]	; (228c <historyOp+0x12c>)
    222e:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2230:	4c0e      	ldr	r4, [pc, #56]	; (226c <historyOp+0x10c>)
    2232:	4917      	ldr	r1, [pc, #92]	; (2290 <historyOp+0x130>)
    2234:	6820      	ldr	r0, [r4, #0]
    2236:	4b17      	ldr	r3, [pc, #92]	; (2294 <historyOp+0x134>)
    2238:	4798      	blx	r3
    223a:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Append(phost, histStart, histEnd);
    223c:	4b16      	ldr	r3, [pc, #88]	; (2298 <historyOp+0x138>)
    223e:	681a      	ldr	r2, [r3, #0]
    2240:	4b16      	ldr	r3, [pc, #88]	; (229c <historyOp+0x13c>)
    2242:	6819      	ldr	r1, [r3, #0]
    2244:	6820      	ldr	r0, [r4, #0]
    2246:	4b16      	ldr	r3, [pc, #88]	; (22a0 <historyOp+0x140>)
    2248:	4798      	blx	r3
		y = 125;
    224a:	247d      	movs	r4, #125	; 0x7d
		for(i = 0; i < 10; i++){
    224c:	2300      	movs	r3, #0
    224e:	940a      	str	r4, [sp, #40]	; 0x28
    2250:	e7d9      	b.n	2206 <historyOp+0xa6>
}//end histOp
    2252:	b02f      	add	sp, #188	; 0xbc
    2254:	bc3c      	pop	{r2, r3, r4, r5}
    2256:	4690      	mov	r8, r2
    2258:	4699      	mov	r9, r3
    225a:	46a2      	mov	sl, r4
    225c:	46ab      	mov	fp, r5
    225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2260:	200006b0 	.word	0x200006b0
    2264:	00004994 	.word	0x00004994
    2268:	00004105 	.word	0x00004105
    226c:	20000780 	.word	0x20000780
    2270:	00001661 	.word	0x00001661
    2274:	00001d6d 	.word	0x00001d6d
    2278:	00004a04 	.word	0x00004a04
    227c:	00001ced 	.word	0x00001ced
    2280:	00001ea9 	.word	0x00001ea9
    2284:	00000151 	.word	0x00000151
    2288:	20000115 	.word	0x20000115
    228c:	00001e7d 	.word	0x00001e7d
    2290:	0030212c 	.word	0x0030212c
    2294:	00001a51 	.word	0x00001a51
    2298:	2000010c 	.word	0x2000010c
    229c:	20000110 	.word	0x20000110
    22a0:	0000181d 	.word	0x0000181d

000022a4 <configure_ext_ints>:
/* Function Name    : configure_ext_ints
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt
	*/
void configure_ext_ints(void){
    22a4:	b500      	push	{lr}
    22a6:	b085      	sub	sp, #20
	// struct for external interrupt config
	struct extint_chan_conf ext_int_config;
	    
	// configure the external interrupt
	ext_int_config.gpio_pin            = LCD_INT;
    22a8:	a901      	add	r1, sp, #4
    22aa:	2309      	movs	r3, #9
    22ac:	9301      	str	r3, [sp, #4]
	ext_int_config.gpio_pin_mux        = LCD_INT_PINMUX;
    22ae:	604b      	str	r3, [r1, #4]
	ext_int_config.gpio_pin_pull       = LCD_INT_PULL;
    22b0:	2300      	movs	r3, #0
    22b2:	720b      	strb	r3, [r1, #8]
	ext_int_config.wake_if_sleeping    = true;
    22b4:	2201      	movs	r2, #1
    22b6:	724a      	strb	r2, [r1, #9]
	ext_int_config.filter_input_signal = false;
    22b8:	728b      	strb	r3, [r1, #10]
	ext_int_config.detection_criteria  = LCD_INT_DETECT;
    22ba:	3305      	adds	r3, #5
    22bc:	72cb      	strb	r3, [r1, #11]

	extint_chan_set_config(LCD_INT_LINE, &ext_int_config);
    22be:	2009      	movs	r0, #9
    22c0:	4b01      	ldr	r3, [pc, #4]	; (22c8 <configure_ext_ints+0x24>)
    22c2:	4798      	blx	r3
}//end configure_ext_ints
    22c4:	b005      	add	sp, #20
    22c6:	bd00      	pop	{pc}
    22c8:	000003bd 	.word	0x000003bd

000022cc <configure_ext_int_callback>:
/* Function Name    : configure_ext_int_callback
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt callback
	*/
void configure_ext_int_callback(void){
    22cc:	b510      	push	{r4, lr}
	// register callback for the LCD's interrupt
	extint_register_callback(lcd_interrupt_callback, LCD_INT_LINE, \
    22ce:	2205      	movs	r2, #5
    22d0:	2109      	movs	r1, #9
    22d2:	4802      	ldr	r0, [pc, #8]	; (22dc <configure_ext_int_callback+0x10>)
    22d4:	4b02      	ldr	r3, [pc, #8]	; (22e0 <configure_ext_int_callback+0x14>)
    22d6:	4798      	blx	r3
	    LCD_INT_DETECT);
}//end configure_ext_int_callback
    22d8:	bd10      	pop	{r4, pc}
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	000028ad 	.word	0x000028ad
    22e0:	00000275 	.word	0x00000275

000022e4 <configure_rtc_calendar>:
/* Function Name    : configure_rtc_calendar
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config the rtc and set time to 00:00:00 01/01/2000
	*/
void configure_rtc_calendar(void){
    22e4:	b530      	push	{r4, r5, lr}
    22e6:	b089      	sub	sp, #36	; 0x24
	//initial time
	time.year   = 2017;
    22e8:	4b26      	ldr	r3, [pc, #152]	; (2384 <configure_rtc_calendar+0xa0>)
    22ea:	4a27      	ldr	r2, [pc, #156]	; (2388 <configure_rtc_calendar+0xa4>)
    22ec:	80da      	strh	r2, [r3, #6]
	time.month  = 12;
    22ee:	220c      	movs	r2, #12
    22f0:	715a      	strb	r2, [r3, #5]
	time.day    = 31;
    22f2:	3213      	adds	r2, #19
    22f4:	711a      	strb	r2, [r3, #4]
	time.hour   = 23;
    22f6:	3a08      	subs	r2, #8
    22f8:	709a      	strb	r2, [r3, #2]
	time.minute = 59;
    22fa:	3224      	adds	r2, #36	; 0x24
    22fc:	705a      	strb	r2, [r3, #1]
	time.second = 55;
    22fe:	3a04      	subs	r2, #4
    2300:	701a      	strb	r2, [r3, #0]
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    2302:	aa01      	add	r2, sp, #4
    2304:	2300      	movs	r3, #0
    2306:	7013      	strb	r3, [r2, #0]
	time->minute = 0;
    2308:	7053      	strb	r3, [r2, #1]
	time->hour   = 0;
    230a:	7093      	strb	r3, [r2, #2]
	time->pm     = 0;
    230c:	70d3      	strb	r3, [r2, #3]
	time->day    = 1;
    230e:	2101      	movs	r1, #1
    2310:	7111      	strb	r1, [r2, #4]
	time->month  = 1;
    2312:	7151      	strb	r1, [r2, #5]
	time->year   = 2000;
    2314:	21fa      	movs	r1, #250	; 0xfa
    2316:	00c9      	lsls	r1, r1, #3
    2318:	80d1      	strh	r1, [r2, #6]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    231a:	aa03      	add	r2, sp, #12
    231c:	20a0      	movs	r0, #160	; 0xa0
    231e:	0100      	lsls	r0, r0, #4
    2320:	8010      	strh	r0, [r2, #0]
	config->clear_on_match      = false;
    2322:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    2324:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
    2326:	7113      	strb	r3, [r2, #4]
	config->year_init_value     = 2000;
    2328:	80d1      	strh	r1, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    232a:	2400      	movs	r4, #0
    232c:	2c00      	cmp	r4, #0
    232e:	d014      	beq.n	235a <configure_rtc_calendar+0x76>
		
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	config_rtc_calendar.clock_24h     = true;
    2330:	aa03      	add	r2, sp, #12
    2332:	2301      	movs	r3, #1
    2334:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    2336:	4c15      	ldr	r4, [pc, #84]	; (238c <configure_rtc_calendar+0xa8>)
    2338:	4915      	ldr	r1, [pc, #84]	; (2390 <configure_rtc_calendar+0xac>)
    233a:	0020      	movs	r0, r4
    233c:	4b15      	ldr	r3, [pc, #84]	; (2394 <configure_rtc_calendar+0xb0>)
    233e:	4798      	blx	r3
		
	rtc_calendar_set_time(&rtc_instance, &time);
    2340:	4910      	ldr	r1, [pc, #64]	; (2384 <configure_rtc_calendar+0xa0>)
    2342:	0020      	movs	r0, r4
    2344:	4b14      	ldr	r3, [pc, #80]	; (2398 <configure_rtc_calendar+0xb4>)
    2346:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    2348:	0020      	movs	r0, r4
    234a:	4b14      	ldr	r3, [pc, #80]	; (239c <configure_rtc_calendar+0xb8>)
    234c:	4798      	blx	r3
	// adjust the frequency (the clock is slow atm)
	rtc_calendar_frequency_correction(&rtc_instance, 127);
    234e:	217f      	movs	r1, #127	; 0x7f
    2350:	0020      	movs	r0, r4
    2352:	4b13      	ldr	r3, [pc, #76]	; (23a0 <configure_rtc_calendar+0xbc>)
    2354:	4798      	blx	r3
}//end configure_rtc_calendar
    2356:	b009      	add	sp, #36	; 0x24
    2358:	bd30      	pop	{r4, r5, pc}
		config->alarm[i].time = time;
    235a:	00a5      	lsls	r5, r4, #2
    235c:	192b      	adds	r3, r5, r4
    235e:	0058      	lsls	r0, r3, #1
    2360:	ab03      	add	r3, sp, #12
    2362:	469c      	mov	ip, r3
    2364:	4460      	add	r0, ip
    2366:	3008      	adds	r0, #8
    2368:	2208      	movs	r2, #8
    236a:	a901      	add	r1, sp, #4
    236c:	4b0d      	ldr	r3, [pc, #52]	; (23a4 <configure_rtc_calendar+0xc0>)
    236e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    2370:	192d      	adds	r5, r5, r4
    2372:	006b      	lsls	r3, r5, #1
    2374:	aa03      	add	r2, sp, #12
    2376:	4694      	mov	ip, r2
    2378:	4463      	add	r3, ip
    237a:	2206      	movs	r2, #6
    237c:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    237e:	3401      	adds	r4, #1
    2380:	b2e4      	uxtb	r4, r4
    2382:	e7d3      	b.n	232c <configure_rtc_calendar+0x48>
    2384:	20000778 	.word	0x20000778
    2388:	000007e1 	.word	0x000007e1
    238c:	20000460 	.word	0x20000460
    2390:	40001400 	.word	0x40001400
    2394:	00000651 	.word	0x00000651
    2398:	00000531 	.word	0x00000531
    239c:	00000439 	.word	0x00000439
    23a0:	000006b1 	.word	0x000006b1
    23a4:	000040e1 	.word	0x000040e1

000023a8 <clock_osc32k_init>:
/* Function Name    : clock_osc32k_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config internal oscillator 32 kHz
	*/
void clock_osc32k_init(void){
    23a8:	b500      	push	{lr}
    23aa:	b083      	sub	sp, #12
	config->enable_1khz_output  = true;
    23ac:	2301      	movs	r3, #1
    23ae:	466a      	mov	r2, sp
    23b0:	7053      	strb	r3, [r2, #1]
	config->enable_32khz_output = true;
    23b2:	7093      	strb	r3, [r2, #2]
	config->run_in_standby      = false;
    23b4:	2200      	movs	r2, #0
    23b6:	4669      	mov	r1, sp
    23b8:	70ca      	strb	r2, [r1, #3]
	config->on_demand           = true;
    23ba:	710b      	strb	r3, [r1, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    23bc:	3306      	adds	r3, #6
    23be:	700b      	strb	r3, [r1, #0]
	config->write_once          = false;
    23c0:	714a      	strb	r2, [r1, #5]
	osc32_config.on_demand				= true;
	osc32_config.run_in_standby			= false;
	osc32_config.startup_time			= SYSTEM_OSC32K_STARTUP_130;
	osc32_config.write_once				= false;
	
	system_clock_source_osc32k_set_config(&osc32_config);
    23c2:	4668      	mov	r0, sp
    23c4:	4b01      	ldr	r3, [pc, #4]	; (23cc <clock_osc32k_init+0x24>)
    23c6:	4798      	blx	r3
}//end clock_osc32k_init
    23c8:	b003      	add	sp, #12
    23ca:	bd00      	pop	{pc}
    23cc:	0000343d 	.word	0x0000343d

000023d0 <clock_gclk2_init>:
/* Function Name    : clock_gclk2_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : turn on glck using internal 32 kHz oscillator
	*/
void clock_gclk2_init(void){
    23d0:	b500      	push	{lr}
    23d2:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk2_config;
		
	system_gclk_init();
    23d4:	4b09      	ldr	r3, [pc, #36]	; (23fc <clock_gclk2_init+0x2c>)
    23d6:	4798      	blx	r3
		
	gclk2_config.source_clock			= SYSTEM_CLOCK_SOURCE_OSC32K;
    23d8:	a901      	add	r1, sp, #4
    23da:	2304      	movs	r3, #4
    23dc:	700b      	strb	r3, [r1, #0]
	gclk2_config.output_enable			= false;
    23de:	2300      	movs	r3, #0
    23e0:	724b      	strb	r3, [r1, #9]
	gclk2_config.high_when_disabled		= false;
    23e2:	704b      	strb	r3, [r1, #1]
	gclk2_config.division_factor		= 32;
    23e4:	2220      	movs	r2, #32
    23e6:	604a      	str	r2, [r1, #4]
	gclk2_config.run_in_standby			= false;
    23e8:	720b      	strb	r3, [r1, #8]
		
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclk2_config);
    23ea:	2002      	movs	r0, #2
    23ec:	4b04      	ldr	r3, [pc, #16]	; (2400 <clock_gclk2_init+0x30>)
    23ee:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    23f0:	2002      	movs	r0, #2
    23f2:	4b04      	ldr	r3, [pc, #16]	; (2404 <clock_gclk2_init+0x34>)
    23f4:	4798      	blx	r3
}//end clock_gclk2_init
    23f6:	b005      	add	sp, #20
    23f8:	bd00      	pop	{pc}
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	00003629 	.word	0x00003629
    2400:	0000364d 	.word	0x0000364d
    2404:	0000371d 	.word	0x0000371d

00002408 <lcd_spi_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for communicating with the LCD
 */
void lcd_spi_init(void)
{
    2408:	b5f0      	push	{r4, r5, r6, r7, lr}
    240a:	46c6      	mov	lr, r8
    240c:	b500      	push	{lr}
    240e:	b090      	sub	sp, #64	; 0x40
    if(lcd_init_complete == true)
    2410:	4b34      	ldr	r3, [pc, #208]	; (24e4 <lcd_spi_init+0xdc>)
    2412:	781b      	ldrb	r3, [r3, #0]
    2414:	2b00      	cmp	r3, #0
    2416:	d003      	beq.n	2420 <lcd_spi_init+0x18>
    spi_enable(&lcd_master);
	

    
    lcd_init_complete = true;
}
    2418:	b010      	add	sp, #64	; 0x40
    241a:	bc04      	pop	{r2}
    241c:	4690      	mov	r8, r2
    241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	config->address_enabled = false;
    2420:	aa01      	add	r2, sp, #4
    2422:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    2424:	7093      	strb	r3, [r2, #2]
    lcd_init_slave_config.ss_pin = LCD_CS;
    2426:	212d      	movs	r1, #45	; 0x2d
    2428:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    242a:	4c2f      	ldr	r4, [pc, #188]	; (24e8 <lcd_spi_init+0xe0>)
    242c:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    242e:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2430:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2432:	2201      	movs	r2, #1
    2434:	4669      	mov	r1, sp
    2436:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2438:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    243a:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    243c:	202d      	movs	r0, #45	; 0x2d
    243e:	4b2b      	ldr	r3, [pc, #172]	; (24ec <lcd_spi_init+0xe4>)
    2440:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2442:	7823      	ldrb	r3, [r4, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2444:	09d9      	lsrs	r1, r3, #7
	uint8_t group_index = (gpio_pin / 32);
    2446:	095a      	lsrs	r2, r3, #5
	if (port_index < PORT_INST_NUM) {
    2448:	2900      	cmp	r1, #0
    244a:	d149      	bne.n	24e0 <lcd_spi_init+0xd8>
		return &(ports[port_index]->Group[group_index]);
    244c:	01d2      	lsls	r2, r2, #7
    244e:	4928      	ldr	r1, [pc, #160]	; (24f0 <lcd_spi_init+0xe8>)
    2450:	468c      	mov	ip, r1
    2452:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2454:	271f      	movs	r7, #31
    2456:	403b      	ands	r3, r7
    2458:	2501      	movs	r5, #1
    245a:	0029      	movs	r1, r5
    245c:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    245e:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    2460:	ac02      	add	r4, sp, #8
    2462:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2464:	2600      	movs	r6, #0
    2466:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2468:	60a6      	str	r6, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    246a:	23c0      	movs	r3, #192	; 0xc0
    246c:	039b      	lsls	r3, r3, #14
    246e:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2470:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
    2472:	7466      	strb	r6, [r4, #17]
	config->receiver_enable  = true;
    2474:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2476:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    2478:	7526      	strb	r6, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    247a:	2324      	movs	r3, #36	; 0x24
    247c:	4698      	mov	r8, r3
    247e:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2480:	220c      	movs	r2, #12
    2482:	2100      	movs	r1, #0
    2484:	a808      	add	r0, sp, #32
    2486:	4b1b      	ldr	r3, [pc, #108]	; (24f4 <lcd_spi_init+0xec>)
    2488:	4798      	blx	r3
    lcd_init_master_config.mux_setting = LCD_PINMUX_SETTING;
    248a:	2380      	movs	r3, #128	; 0x80
    248c:	025b      	lsls	r3, r3, #9
    248e:	60e3      	str	r3, [r4, #12]
    lcd_init_master_config.pinmux_pad0 = LCD_MISO_PAD;
    2490:	4b19      	ldr	r3, [pc, #100]	; (24f8 <lcd_spi_init+0xf0>)
    2492:	62a3      	str	r3, [r4, #40]	; 0x28
    lcd_init_master_config.pinmux_pad1 = LCD_UNUSED; 
    2494:	2301      	movs	r3, #1
    2496:	425b      	negs	r3, r3
    2498:	62e3      	str	r3, [r4, #44]	; 0x2c
    lcd_init_master_config.pinmux_pad2 = LCD_MOSI_PAD;
    249a:	4b18      	ldr	r3, [pc, #96]	; (24fc <lcd_spi_init+0xf4>)
    249c:	6323      	str	r3, [r4, #48]	; 0x30
    lcd_init_master_config.pinmux_pad3 = LCD_SCK_PAD;
    249e:	4b18      	ldr	r3, [pc, #96]	; (2500 <lcd_spi_init+0xf8>)
    24a0:	6363      	str	r3, [r4, #52]	; 0x34
	lcd_init_master_config.generator_source = LCD_SPI_SOURCE_CLOCK;
    24a2:	4643      	mov	r3, r8
    24a4:	54e6      	strb	r6, [r4, r3]
	lcd_init_master_config.mode_specific.master.baudrate = LCD_SPI_MAX_CLOCK;
    24a6:	4b17      	ldr	r3, [pc, #92]	; (2504 <lcd_spi_init+0xfc>)
    24a8:	61a3      	str	r3, [r4, #24]
    spi_init(&lcd_master, LCD_SPI, &lcd_init_master_config);
    24aa:	4e17      	ldr	r6, [pc, #92]	; (2508 <lcd_spi_init+0x100>)
    24ac:	0022      	movs	r2, r4
    24ae:	4917      	ldr	r1, [pc, #92]	; (250c <lcd_spi_init+0x104>)
    24b0:	0030      	movs	r0, r6
    24b2:	4b17      	ldr	r3, [pc, #92]	; (2510 <lcd_spi_init+0x108>)
    24b4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    24b6:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    24b8:	0020      	movs	r0, r4
    24ba:	4b16      	ldr	r3, [pc, #88]	; (2514 <lcd_spi_init+0x10c>)
    24bc:	4798      	blx	r3
    24be:	4038      	ands	r0, r7
    24c0:	4085      	lsls	r5, r0
    24c2:	4b15      	ldr	r3, [pc, #84]	; (2518 <lcd_spi_init+0x110>)
    24c4:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    24c6:	4b10      	ldr	r3, [pc, #64]	; (2508 <lcd_spi_init+0x100>)
    24c8:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    24ca:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    24cc:	2b00      	cmp	r3, #0
    24ce:	d1fa      	bne.n	24c6 <lcd_spi_init+0xbe>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    24d0:	6823      	ldr	r3, [r4, #0]
    24d2:	2202      	movs	r2, #2
    24d4:	4313      	orrs	r3, r2
    24d6:	6023      	str	r3, [r4, #0]
    lcd_init_complete = true;
    24d8:	3a01      	subs	r2, #1
    24da:	4b02      	ldr	r3, [pc, #8]	; (24e4 <lcd_spi_init+0xdc>)
    24dc:	701a      	strb	r2, [r3, #0]
    24de:	e79b      	b.n	2418 <lcd_spi_init+0x10>
		return NULL;
    24e0:	2200      	movs	r2, #0
    24e2:	e7b7      	b.n	2454 <lcd_spi_init+0x4c>
    24e4:	20000117 	.word	0x20000117
    24e8:	200009ac 	.word	0x200009ac
    24ec:	000032b1 	.word	0x000032b1
    24f0:	41004400 	.word	0x41004400
    24f4:	000040f3 	.word	0x000040f3
    24f8:	002c0002 	.word	0x002c0002
    24fc:	002e0002 	.word	0x002e0002
    2500:	002f0002 	.word	0x002f0002
    2504:	000f4240 	.word	0x000f4240
    2508:	200009b0 	.word	0x200009b0
    250c:	42001800 	.word	0x42001800
    2510:	00000ba9 	.word	0x00000ba9
    2514:	0000322d 	.word	0x0000322d
    2518:	e000e100 	.word	0xe000e100

0000251c <lcd_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Starts the SPI transfer by selecting the slave (pulling 
 *  CS low) and sending LCD address. For use in the FT library.
 */
status_code_genare_t lcd_start_xfer(LCD_ADDRESS param_addr, LCD_XFER_DIR dir)
{
    251c:	b510      	push	{r4, lr}
    251e:	b082      	sub	sp, #8
    2520:	1e0c      	subs	r4, r1, #0
        uint8_t preamble[4];
    } lcd_xfer_preamble;
    
    status_code_genare_t read_status;
    
    if(dir == READ)
    2522:	d11f      	bne.n	2564 <lcd_start_xfer+0x48>
        // LCD read address should only be 22 bits
        lcd_xfer_preamble.addr = (0x3FFFFF & param_addr) << 8;
    2524:	0200      	lsls	r0, r0, #8
    2526:	4b1a      	ldr	r3, [pc, #104]	; (2590 <lcd_start_xfer+0x74>)
    2528:	4018      	ands	r0, r3
    252a:	9001      	str	r0, [sp, #4]
        /* LCD read address should only be 22 bits. Also OR 0x800000 because the
         * host must send a 1-bit and then a 0-bit to indicate a write */
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    
    // preamble bytes need to be swapped so MSB is transmitted first
    XORSWAP(lcd_xfer_preamble.preamble[0], lcd_xfer_preamble.preamble[3]);
    252c:	ab01      	add	r3, sp, #4
    252e:	78d9      	ldrb	r1, [r3, #3]
    2530:	781a      	ldrb	r2, [r3, #0]
    2532:	404a      	eors	r2, r1
    2534:	4051      	eors	r1, r2
    2536:	70d9      	strb	r1, [r3, #3]
    2538:	404a      	eors	r2, r1
    253a:	701a      	strb	r2, [r3, #0]
    XORSWAP(lcd_xfer_preamble.preamble[1], lcd_xfer_preamble.preamble[2]);
    253c:	7899      	ldrb	r1, [r3, #2]
    253e:	785a      	ldrb	r2, [r3, #1]
    2540:	404a      	eors	r2, r1
    2542:	4051      	eors	r1, r2
    2544:	7099      	strb	r1, [r3, #2]
    2546:	404a      	eors	r2, r1
    2548:	705a      	strb	r2, [r3, #1]
    
    do{
        // select the slave
        read_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    254a:	2201      	movs	r2, #1
    254c:	4911      	ldr	r1, [pc, #68]	; (2594 <lcd_start_xfer+0x78>)
    254e:	4812      	ldr	r0, [pc, #72]	; (2598 <lcd_start_xfer+0x7c>)
    2550:	4b12      	ldr	r3, [pc, #72]	; (259c <lcd_start_xfer+0x80>)
    2552:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
    2554:	2805      	cmp	r0, #5
    2556:	d0f8      	beq.n	254a <lcd_start_xfer+0x2e>
    
    if(dir == READ)
    2558:	2c00      	cmp	r4, #0
    255a:	d00d      	beq.n	2578 <lcd_start_xfer+0x5c>
        // send preamble = two read bits, 22 bit address, and dummy byte
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    else if(dir == WRT)
    255c:	2c01      	cmp	r4, #1
    255e:	d011      	beq.n	2584 <lcd_start_xfer+0x68>
        // send preamble = two wrt bits and 22 bit address
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    
    return read_status;
}
    2560:	b002      	add	sp, #8
    2562:	bd10      	pop	{r4, pc}
    else if(dir == WRT)
    2564:	2901      	cmp	r1, #1
    2566:	d1e1      	bne.n	252c <lcd_start_xfer+0x10>
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    2568:	0200      	lsls	r0, r0, #8
    256a:	4b09      	ldr	r3, [pc, #36]	; (2590 <lcd_start_xfer+0x74>)
    256c:	4018      	ands	r0, r3
    256e:	2380      	movs	r3, #128	; 0x80
    2570:	061b      	lsls	r3, r3, #24
    2572:	4318      	orrs	r0, r3
    2574:	9001      	str	r0, [sp, #4]
    2576:	e7d9      	b.n	252c <lcd_start_xfer+0x10>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    2578:	2204      	movs	r2, #4
    257a:	a901      	add	r1, sp, #4
    257c:	4806      	ldr	r0, [pc, #24]	; (2598 <lcd_start_xfer+0x7c>)
    257e:	4b08      	ldr	r3, [pc, #32]	; (25a0 <lcd_start_xfer+0x84>)
    2580:	4798      	blx	r3
    2582:	e7ed      	b.n	2560 <lcd_start_xfer+0x44>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    2584:	2203      	movs	r2, #3
    2586:	a901      	add	r1, sp, #4
    2588:	4803      	ldr	r0, [pc, #12]	; (2598 <lcd_start_xfer+0x7c>)
    258a:	4b05      	ldr	r3, [pc, #20]	; (25a0 <lcd_start_xfer+0x84>)
    258c:	4798      	blx	r3
    258e:	e7e7      	b.n	2560 <lcd_start_xfer+0x44>
    2590:	3fffff00 	.word	0x3fffff00
    2594:	200009ac 	.word	0x200009ac
    2598:	200009b0 	.word	0x200009b0
    259c:	00000d91 	.word	0x00000d91
    25a0:	00000e8d 	.word	0x00000e8d

000025a4 <lcd_stop_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Stops the SPI transfer by deselecting the slave (letting 
 *  CS float high). For use in the FT library.
 */
status_code_genare_t lcd_stop_xfer(void)
{
    25a4:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&lcd_master, &lcd_slave, false);
    25a6:	2200      	movs	r2, #0
    25a8:	4902      	ldr	r1, [pc, #8]	; (25b4 <lcd_stop_xfer+0x10>)
    25aa:	4803      	ldr	r0, [pc, #12]	; (25b8 <lcd_stop_xfer+0x14>)
    25ac:	4b03      	ldr	r3, [pc, #12]	; (25bc <lcd_stop_xfer+0x18>)
    25ae:	4798      	blx	r3
}
    25b0:	bd10      	pop	{r4, pc}
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	200009ac 	.word	0x200009ac
    25b8:	200009b0 	.word	0x200009b0
    25bc:	00000d91 	.word	0x00000d91

000025c0 <lcd_host_read>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 15.
 */
status_code_genare_t lcd_host_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
    25c0:	b510      	push	{r4, lr}
    25c2:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&lcd_master, \
    25c4:	2300      	movs	r3, #0
    25c6:	0001      	movs	r1, r0
    25c8:	4801      	ldr	r0, [pc, #4]	; (25d0 <lcd_host_read+0x10>)
    25ca:	4c02      	ldr	r4, [pc, #8]	; (25d4 <lcd_host_read+0x14>)
    25cc:	47a0      	blx	r4
                        read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
    25ce:	bd10      	pop	{r4, pc}
    25d0:	200009b0 	.word	0x200009b0
    25d4:	00000c95 	.word	0x00000c95

000025d8 <lcd_rd8>:
 * Return Values(s) : uint8_t
 * Description      : Reads a 8-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint8_t lcd_rd8(LCD_ADDRESS read_addr)
{
    25d8:	b510      	push	{r4, lr}
    25da:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
    25dc:	466b      	mov	r3, sp
    25de:	1ddc      	adds	r4, r3, #7
    25e0:	2300      	movs	r3, #0
    25e2:	7023      	strb	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    25e4:	2100      	movs	r1, #0
    25e6:	4b05      	ldr	r3, [pc, #20]	; (25fc <lcd_rd8+0x24>)
    25e8:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    lcd_host_read(&read_byte, 1);
    25ea:	2101      	movs	r1, #1
    25ec:	0020      	movs	r0, r4
    25ee:	4b04      	ldr	r3, [pc, #16]	; (2600 <lcd_rd8+0x28>)
    25f0:	4798      	blx	r3
    
    lcd_stop_xfer();
    25f2:	4b04      	ldr	r3, [pc, #16]	; (2604 <lcd_rd8+0x2c>)
    25f4:	4798      	blx	r3
    
    return read_byte; 
    25f6:	7820      	ldrb	r0, [r4, #0]
}
    25f8:	b002      	add	sp, #8
    25fa:	bd10      	pop	{r4, pc}
    25fc:	0000251d 	.word	0x0000251d
    2600:	000025c1 	.word	0x000025c1
    2604:	000025a5 	.word	0x000025a5

00002608 <lcd_rd16>:
 * Return Values(s) : uint16_t
 * Description      : Reads a 16-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint16_t lcd_rd16(LCD_ADDRESS read_addr)
{
    2608:	b510      	push	{r4, lr}
    260a:	b082      	sub	sp, #8
    uint16_t read_word = 0;
    260c:	466b      	mov	r3, sp
    260e:	1d9c      	adds	r4, r3, #6
    2610:	2300      	movs	r3, #0
    2612:	8023      	strh	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    2614:	2100      	movs	r1, #0
    2616:	4b05      	ldr	r3, [pc, #20]	; (262c <lcd_rd16+0x24>)
    2618:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    lcd_host_read((uint8_t*) &read_word, 2);
    261a:	2102      	movs	r1, #2
    261c:	0020      	movs	r0, r4
    261e:	4b04      	ldr	r3, [pc, #16]	; (2630 <lcd_rd16+0x28>)
    2620:	4798      	blx	r3
    
    lcd_stop_xfer();
    2622:	4b04      	ldr	r3, [pc, #16]	; (2634 <lcd_rd16+0x2c>)
    2624:	4798      	blx	r3
    
    return read_word;
    2626:	8820      	ldrh	r0, [r4, #0]
}    
    2628:	b002      	add	sp, #8
    262a:	bd10      	pop	{r4, pc}
    262c:	0000251d 	.word	0x0000251d
    2630:	000025c1 	.word	0x000025c1
    2634:	000025a5 	.word	0x000025a5

00002638 <lcd_host_write>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 16.
 */
status_code_genare_t lcd_host_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
    2638:	b510      	push	{r4, lr}
    263a:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&lcd_master, \
    263c:	0001      	movs	r1, r0
    263e:	4802      	ldr	r0, [pc, #8]	; (2648 <lcd_host_write+0x10>)
    2640:	4b02      	ldr	r3, [pc, #8]	; (264c <lcd_host_write+0x14>)
    2642:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
    
}
    2644:	bd10      	pop	{r4, pc}
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	200009b0 	.word	0x200009b0
    264c:	00000e8d 	.word	0x00000e8d

00002650 <lcd_wr8>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 8-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr8(LCD_ADDRESS wrt_addr, uint8_t wrt_byte)
{
    2650:	b510      	push	{r4, lr}
    2652:	b082      	sub	sp, #8
    2654:	466b      	mov	r3, sp
    2656:	1ddc      	adds	r4, r3, #7
    2658:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);    
    265a:	2101      	movs	r1, #1
    265c:	4b05      	ldr	r3, [pc, #20]	; (2674 <lcd_wr8+0x24>)
    265e:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = lcd_host_write(&wrt_byte, 1);
    2660:	2101      	movs	r1, #1
    2662:	0020      	movs	r0, r4
    2664:	4b04      	ldr	r3, [pc, #16]	; (2678 <lcd_wr8+0x28>)
    2666:	4798      	blx	r3
    2668:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    266a:	4b04      	ldr	r3, [pc, #16]	; (267c <lcd_wr8+0x2c>)
    266c:	4798      	blx	r3
    
    return status_result;
}
    266e:	0020      	movs	r0, r4
    2670:	b002      	add	sp, #8
    2672:	bd10      	pop	{r4, pc}
    2674:	0000251d 	.word	0x0000251d
    2678:	00002639 	.word	0x00002639
    267c:	000025a5 	.word	0x000025a5

00002680 <lcd_wr16>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 16-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr16(LCD_ADDRESS wrt_addr, uint16_t wrt_word)
{
    2680:	b510      	push	{r4, lr}
    2682:	b082      	sub	sp, #8
    2684:	466b      	mov	r3, sp
    2686:	1d9c      	adds	r4, r3, #6
    2688:	80d9      	strh	r1, [r3, #6]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    268a:	2101      	movs	r1, #1
    268c:	4b05      	ldr	r3, [pc, #20]	; (26a4 <lcd_wr16+0x24>)
    268e:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    status_result = lcd_host_write((uint8_t*) &wrt_word, 2);
    2690:	2102      	movs	r1, #2
    2692:	0020      	movs	r0, r4
    2694:	4b04      	ldr	r3, [pc, #16]	; (26a8 <lcd_wr16+0x28>)
    2696:	4798      	blx	r3
    2698:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    269a:	4b04      	ldr	r3, [pc, #16]	; (26ac <lcd_wr16+0x2c>)
    269c:	4798      	blx	r3
    
    return status_result;
}
    269e:	0020      	movs	r0, r4
    26a0:	b002      	add	sp, #8
    26a2:	bd10      	pop	{r4, pc}
    26a4:	0000251d 	.word	0x0000251d
    26a8:	00002639 	.word	0x00002639
    26ac:	000025a5 	.word	0x000025a5

000026b0 <lcd_wr32>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 32-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr32(LCD_ADDRESS wrt_addr, uint32_t wrt_dword)
{
    26b0:	b510      	push	{r4, lr}
    26b2:	b082      	sub	sp, #8
    26b4:	9101      	str	r1, [sp, #4]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    26b6:	2101      	movs	r1, #1
    26b8:	4b05      	ldr	r3, [pc, #20]	; (26d0 <lcd_wr32+0x20>)
    26ba:	4798      	blx	r3
    
    // cast the dword pointer to an 8-bit pointer and use a 4 byte length
    status_result = lcd_host_write((uint8_t *) &wrt_dword, 4);
    26bc:	2104      	movs	r1, #4
    26be:	a801      	add	r0, sp, #4
    26c0:	4b04      	ldr	r3, [pc, #16]	; (26d4 <lcd_wr32+0x24>)
    26c2:	4798      	blx	r3
    26c4:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    26c6:	4b04      	ldr	r3, [pc, #16]	; (26d8 <lcd_wr32+0x28>)
    26c8:	4798      	blx	r3
    
    return status_result;
}
    26ca:	0020      	movs	r0, r4
    26cc:	b002      	add	sp, #8
    26ce:	bd10      	pop	{r4, pc}
    26d0:	0000251d 	.word	0x0000251d
    26d4:	00002639 	.word	0x00002639
    26d8:	000025a5 	.word	0x000025a5

000026dc <lcd_host_cmd>:
 * Description      : Sends a host command to the LCD. Host commands are
 *  for basic hardware configurations (like power mode, clock stuff, etc.).
 *  Refer to DS-FT81x datasheet pg 16 if the command has a parameter byte.
 */
status_code_genare_t lcd_host_cmd(uint8_t cmd, uint8_t param_byte)
{
    26dc:	b510      	push	{r4, lr}
    26de:	b082      	sub	sp, #8
    // variable for holding ASF status code
    status_code_genare_t wrt_status;
    
    // 3 byte array for sending host command to the LCD
    uint8_t cmd_packet[3] = {cmd, param_byte, 0x00};
    26e0:	ab01      	add	r3, sp, #4
    26e2:	7018      	strb	r0, [r3, #0]
    26e4:	7059      	strb	r1, [r3, #1]
    26e6:	2200      	movs	r2, #0
    26e8:	709a      	strb	r2, [r3, #2]
   
    // select the slave
    do{
        // select the slave
        wrt_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    26ea:	2201      	movs	r2, #1
    26ec:	490a      	ldr	r1, [pc, #40]	; (2718 <lcd_host_cmd+0x3c>)
    26ee:	480b      	ldr	r0, [pc, #44]	; (271c <lcd_host_cmd+0x40>)
    26f0:	4b0b      	ldr	r3, [pc, #44]	; (2720 <lcd_host_cmd+0x44>)
    26f2:	4798      	blx	r3
		//port_pin_set_output_level(PIN_PA10, true);
    }while(wrt_status == STATUS_BUSY);
    26f4:	2805      	cmp	r0, #5
    26f6:	d0f8      	beq.n	26ea <lcd_host_cmd+0xe>
    
    // send host command
    wrt_status = spi_write_buffer_wait(&lcd_master, cmd_packet, 3);
    26f8:	2203      	movs	r2, #3
    26fa:	a901      	add	r1, sp, #4
    26fc:	4807      	ldr	r0, [pc, #28]	; (271c <lcd_host_cmd+0x40>)
    26fe:	4b09      	ldr	r3, [pc, #36]	; (2724 <lcd_host_cmd+0x48>)
    2700:	4798      	blx	r3
    2702:	1e04      	subs	r4, r0, #0

    // status check
    if(wrt_status != STATUS_OK)
    2704:	d105      	bne.n	2712 <lcd_host_cmd+0x36>
        // return an error
        return wrt_status;
    }
    else
        // deselect slave
        wrt_status = lcd_stop_xfer();
    2706:	4b08      	ldr	r3, [pc, #32]	; (2728 <lcd_host_cmd+0x4c>)
    2708:	4798      	blx	r3
    270a:	0004      	movs	r4, r0
    
    return wrt_status;
}
    270c:	0020      	movs	r0, r4
    270e:	b002      	add	sp, #8
    2710:	bd10      	pop	{r4, pc}
        lcd_stop_xfer();
    2712:	4b05      	ldr	r3, [pc, #20]	; (2728 <lcd_host_cmd+0x4c>)
    2714:	4798      	blx	r3
        return wrt_status;
    2716:	e7f9      	b.n	270c <lcd_host_cmd+0x30>
    2718:	200009ac 	.word	0x200009ac
    271c:	200009b0 	.word	0x200009b0
    2720:	00000d91 	.word	0x00000d91
    2724:	00000e8d 	.word	0x00000e8d
    2728:	000025a5 	.word	0x000025a5

0000272c <lcd_powerdown>:
		port_base->OUTCLR.reg = pin_mask;
    272c:	2280      	movs	r2, #128	; 0x80
    272e:	0052      	lsls	r2, r2, #1
    2730:	4b01      	ldr	r3, [pc, #4]	; (2738 <lcd_powerdown+0xc>)
    2732:	615a      	str	r2, [r3, #20]
 * Description      : Pull down the LCD_PD pin to force power down the LCD
 */
void lcd_powerdown(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_EN);
}
    2734:	4770      	bx	lr
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	41004400 	.word	0x41004400

0000273c <lcd_powerup>:
		port_base->OUTSET.reg = pin_mask;
    273c:	2280      	movs	r2, #128	; 0x80
    273e:	0052      	lsls	r2, r2, #1
    2740:	4b01      	ldr	r3, [pc, #4]	; (2748 <lcd_powerup+0xc>)
    2742:	619a      	str	r2, [r3, #24]
 * Description      : Pull up the LCD_PD pin to force power up the LCD
 */
void lcd_powerup(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
}
    2744:	4770      	bx	lr
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	41004400 	.word	0x41004400

0000274c <lcd_init_seq>:
 * Return Values(s) : ASF general status code
 * Description      : Initialization sequence as described by the 
 *  FT81X_Series_Programmer_Guide datasheet pg 11.
 */
void lcd_init_seq(void)
{
    274c:	b570      	push	{r4, r5, r6, lr}
    /* medium rare power cycle to get the LCD into a known state.
     * Medium rare because it resets a lot of things, but sometimes display
     * list behavior is funky even after this power cycle. It is recommended
     * that the user performs a hard power reset when testing display 
     * list stuff. */
    lcd_powerdown();
    274e:	4b31      	ldr	r3, [pc, #196]	; (2814 <lcd_init_seq+0xc8>)
    2750:	4798      	blx	r3
    delay_ms(20);
    2752:	2014      	movs	r0, #20
    2754:	4c30      	ldr	r4, [pc, #192]	; (2818 <lcd_init_seq+0xcc>)
    2756:	47a0      	blx	r4
    lcd_powerup();
    2758:	4b30      	ldr	r3, [pc, #192]	; (281c <lcd_init_seq+0xd0>)
    275a:	4798      	blx	r3
    delay_ms(20);
    275c:	2014      	movs	r0, #20
    275e:	47a0      	blx	r4
    
    // indicate that an external clock is being used
    lcd_host_cmd(CLKEXT, NO_PARAM);
    2760:	2100      	movs	r1, #0
    2762:	2044      	movs	r0, #68	; 0x44
    2764:	4d2e      	ldr	r5, [pc, #184]	; (2820 <lcd_init_seq+0xd4>)
    2766:	47a8      	blx	r5
    
    // wait a little bit, because CLKEXT triggers a software reset
    delay_ms(50);
    2768:	2032      	movs	r0, #50	; 0x32
    276a:	47a0      	blx	r4
    // wake up the LCD
    lcd_host_cmd(ACTIVE, NO_PARAM);
    276c:	2100      	movs	r1, #0
    276e:	2000      	movs	r0, #0
    2770:	47a8      	blx	r5
    
    // wait until the LCD is active
	do{
	    result = lcd_rd16(REG_ID);
    2772:	482c      	ldr	r0, [pc, #176]	; (2824 <lcd_init_seq+0xd8>)
    2774:	4b2c      	ldr	r3, [pc, #176]	; (2828 <lcd_init_seq+0xdc>)
    2776:	4798      	blx	r3
    2778:	b2c0      	uxtb	r0, r0
	} while(result != 0x7c);  
    277a:	287c      	cmp	r0, #124	; 0x7c
    277c:	d1f9      	bne.n	2772 <lcd_init_seq+0x26>
    
    // Register settings, refer to NHD-5.0-800480FT-CTXL-CTP datasheet:
    // horizontal configuration registers
    lcd_wr16(REG_HSIZE, 800);
    277e:	21c8      	movs	r1, #200	; 0xc8
    2780:	0089      	lsls	r1, r1, #2
    2782:	482a      	ldr	r0, [pc, #168]	; (282c <lcd_init_seq+0xe0>)
    2784:	4c2a      	ldr	r4, [pc, #168]	; (2830 <lcd_init_seq+0xe4>)
    2786:	47a0      	blx	r4
    lcd_wr16(REG_HCYCLE, 928);
    2788:	21e8      	movs	r1, #232	; 0xe8
    278a:	0089      	lsls	r1, r1, #2
    278c:	4829      	ldr	r0, [pc, #164]	; (2834 <lcd_init_seq+0xe8>)
    278e:	47a0      	blx	r4
    lcd_wr16(REG_HOFFSET, 88);
    2790:	2158      	movs	r1, #88	; 0x58
    2792:	4829      	ldr	r0, [pc, #164]	; (2838 <lcd_init_seq+0xec>)
    2794:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC0, 0);
    2796:	2100      	movs	r1, #0
    2798:	4828      	ldr	r0, [pc, #160]	; (283c <lcd_init_seq+0xf0>)
    279a:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC1, 48);
    279c:	2130      	movs	r1, #48	; 0x30
    279e:	4828      	ldr	r0, [pc, #160]	; (2840 <lcd_init_seq+0xf4>)
    27a0:	47a0      	blx	r4
    
    // vertical configuration registers
    lcd_wr16(REG_VSIZE, 480);
    27a2:	21f0      	movs	r1, #240	; 0xf0
    27a4:	0049      	lsls	r1, r1, #1
    27a6:	4827      	ldr	r0, [pc, #156]	; (2844 <lcd_init_seq+0xf8>)
    27a8:	47a0      	blx	r4
    lcd_wr16(REG_VCYCLE, 525);
    27aa:	4927      	ldr	r1, [pc, #156]	; (2848 <lcd_init_seq+0xfc>)
    27ac:	4827      	ldr	r0, [pc, #156]	; (284c <lcd_init_seq+0x100>)
    27ae:	47a0      	blx	r4
    lcd_wr16(REG_VOFFSET, 32);
    27b0:	2120      	movs	r1, #32
    27b2:	4827      	ldr	r0, [pc, #156]	; (2850 <lcd_init_seq+0x104>)
    27b4:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC0, 0);
    27b6:	2100      	movs	r1, #0
    27b8:	4826      	ldr	r0, [pc, #152]	; (2854 <lcd_init_seq+0x108>)
    27ba:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC1, 3);
    27bc:	2103      	movs	r1, #3
    27be:	4826      	ldr	r0, [pc, #152]	; (2858 <lcd_init_seq+0x10c>)
    27c0:	47a0      	blx	r4

    // misc. screen configuration registers
	lcd_wr8(REG_SWIZZLE, 0);
    27c2:	2100      	movs	r1, #0
    27c4:	4825      	ldr	r0, [pc, #148]	; (285c <lcd_init_seq+0x110>)
    27c6:	4d26      	ldr	r5, [pc, #152]	; (2860 <lcd_init_seq+0x114>)
    27c8:	47a8      	blx	r5
	lcd_wr8(REG_PCLK_POL, 0);
    27ca:	2100      	movs	r1, #0
    27cc:	4825      	ldr	r0, [pc, #148]	; (2864 <lcd_init_seq+0x118>)
    27ce:	47a8      	blx	r5
	lcd_wr8(REG_CSPREAD, 1);
    27d0:	2101      	movs	r1, #1
    27d2:	4825      	ldr	r0, [pc, #148]	; (2868 <lcd_init_seq+0x11c>)
    27d4:	47a8      	blx	r5
	lcd_wr8(REG_DITHER, 1);
    27d6:	2101      	movs	r1, #1
    27d8:	4824      	ldr	r0, [pc, #144]	; (286c <lcd_init_seq+0x120>)
    27da:	47a8      	blx	r5

    // clear the display
    lcd_wr32(RAM_DL+0, CLEAR_COLOR_RGB(1, 1, 1));
    27dc:	4924      	ldr	r1, [pc, #144]	; (2870 <lcd_init_seq+0x124>)
    27de:	20c0      	movs	r0, #192	; 0xc0
    27e0:	0380      	lsls	r0, r0, #14
    27e2:	4e24      	ldr	r6, [pc, #144]	; (2874 <lcd_init_seq+0x128>)
    27e4:	47b0      	blx	r6
    lcd_wr32(RAM_DL+4, COLOR_RGB(255,255,255));
    27e6:	4924      	ldr	r1, [pc, #144]	; (2878 <lcd_init_seq+0x12c>)
    27e8:	4824      	ldr	r0, [pc, #144]	; (287c <lcd_init_seq+0x130>)
    27ea:	47b0      	blx	r6
    lcd_wr32(RAM_DL+8, CLEAR(1,1,1));
    27ec:	4924      	ldr	r1, [pc, #144]	; (2880 <lcd_init_seq+0x134>)
    27ee:	4825      	ldr	r0, [pc, #148]	; (2884 <lcd_init_seq+0x138>)
    27f0:	47b0      	blx	r6
    lcd_wr32(RAM_DL+12, DISPLAY());
    27f2:	2100      	movs	r1, #0
    27f4:	4824      	ldr	r0, [pc, #144]	; (2888 <lcd_init_seq+0x13c>)
    27f6:	47b0      	blx	r6

    // display list swap
    lcd_wr8(REG_DLSWAP,DLSWAP_FRAME);
    27f8:	2102      	movs	r1, #2
    27fa:	4824      	ldr	r0, [pc, #144]	; (288c <lcd_init_seq+0x140>)
    27fc:	47a8      	blx	r5

    // set the pin drive strength
    lcd_wr16(REG_GPIOX_DIR, 0xffff);
    27fe:	4e24      	ldr	r6, [pc, #144]	; (2890 <lcd_init_seq+0x144>)
    2800:	0031      	movs	r1, r6
    2802:	4824      	ldr	r0, [pc, #144]	; (2894 <lcd_init_seq+0x148>)
    2804:	47a0      	blx	r4
    lcd_wr16(REG_GPIOX, 0xffff);
    2806:	0031      	movs	r1, r6
    2808:	4823      	ldr	r0, [pc, #140]	; (2898 <lcd_init_seq+0x14c>)
    280a:	47a0      	blx	r4

    // enable the clock
    lcd_wr8(REG_PCLK,2);
    280c:	2102      	movs	r1, #2
    280e:	4823      	ldr	r0, [pc, #140]	; (289c <lcd_init_seq+0x150>)
    2810:	47a8      	blx	r5
}
    2812:	bd70      	pop	{r4, r5, r6, pc}
    2814:	0000272d 	.word	0x0000272d
    2818:	00000151 	.word	0x00000151
    281c:	0000273d 	.word	0x0000273d
    2820:	000026dd 	.word	0x000026dd
    2824:	00302000 	.word	0x00302000
    2828:	00002609 	.word	0x00002609
    282c:	00302034 	.word	0x00302034
    2830:	00002681 	.word	0x00002681
    2834:	0030202c 	.word	0x0030202c
    2838:	00302030 	.word	0x00302030
    283c:	00302038 	.word	0x00302038
    2840:	0030203c 	.word	0x0030203c
    2844:	00302048 	.word	0x00302048
    2848:	0000020d 	.word	0x0000020d
    284c:	00302040 	.word	0x00302040
    2850:	00302044 	.word	0x00302044
    2854:	0030204c 	.word	0x0030204c
    2858:	00302050 	.word	0x00302050
    285c:	00302064 	.word	0x00302064
    2860:	00002651 	.word	0x00002651
    2864:	0030206c 	.word	0x0030206c
    2868:	00302068 	.word	0x00302068
    286c:	00302060 	.word	0x00302060
    2870:	02010101 	.word	0x02010101
    2874:	000026b1 	.word	0x000026b1
    2878:	04ffffff 	.word	0x04ffffff
    287c:	00300004 	.word	0x00300004
    2880:	26000007 	.word	0x26000007
    2884:	00300008 	.word	0x00300008
    2888:	0030000c 	.word	0x0030000c
    288c:	00302054 	.word	0x00302054
    2890:	0000ffff 	.word	0x0000ffff
    2894:	00302098 	.word	0x00302098
    2898:	0030209c 	.word	0x0030209c
    289c:	00302070 	.word	0x00302070

000028a0 <lcd_set_ft_host_ptr>:
 * Description      : Sets the sim_system_glcd_software global pointer for the
 *  FTDI context struct.
 */
void lcd_set_ft_host_ptr(Ft_Gpu_Hal_Context_t* phost)
{
    lcd_firmware_phost = phost;
    28a0:	4b01      	ldr	r3, [pc, #4]	; (28a8 <lcd_set_ft_host_ptr+0x8>)
    28a2:	6018      	str	r0, [r3, #0]
}
    28a4:	4770      	bx	lr
    28a6:	46c0      	nop			; (mov r8, r8)
    28a8:	20000118 	.word	0x20000118

000028ac <lcd_interrupt_callback>:
 * Return Values(s) : void
 * Description      : Callback for the LCD interrupt. Reads the LCD's flag
 *  register.
 */
void lcd_interrupt_callback(void)
{
    28ac:	b510      	push	{r4, lr}
    lcd_int_flags = lcd_rd8(REG_INT_FLAGS);
    28ae:	4803      	ldr	r0, [pc, #12]	; (28bc <lcd_interrupt_callback+0x10>)
    28b0:	4b03      	ldr	r3, [pc, #12]	; (28c0 <lcd_interrupt_callback+0x14>)
    28b2:	4798      	blx	r3
    28b4:	4b03      	ldr	r3, [pc, #12]	; (28c4 <lcd_interrupt_callback+0x18>)
    28b6:	7018      	strb	r0, [r3, #0]
}
    28b8:	bd10      	pop	{r4, pc}
    28ba:	46c0      	nop			; (mov r8, r8)
    28bc:	003020a8 	.word	0x003020a8
    28c0:	000025d9 	.word	0x000025d9
    28c4:	2000000a 	.word	0x2000000a

000028c8 <led_tx_on>:
		port_base->OUTCLR.reg = pin_mask;
    28c8:	2280      	movs	r2, #128	; 0x80
    28ca:	0512      	lsls	r2, r2, #20
    28cc:	4b01      	ldr	r3, [pc, #4]	; (28d4 <led_tx_on+0xc>)
    28ce:	615a      	str	r2, [r3, #20]
 * @brief Turn on Transmit LED
 */
void led_tx_on(void)
{
    port_pin_set_output_level(PIN_PA27, false);
}
    28d0:	4770      	bx	lr
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	41004400 	.word	0x41004400

000028d8 <led_tx_off>:
		port_base->OUTSET.reg = pin_mask;
    28d8:	2280      	movs	r2, #128	; 0x80
    28da:	0512      	lsls	r2, r2, #20
    28dc:	4b01      	ldr	r3, [pc, #4]	; (28e4 <led_tx_off+0xc>)
    28de:	619a      	str	r2, [r3, #24]
 * @brief Turn off Transmit LED
 */
void led_tx_off(void)
{
    port_pin_set_output_level(PIN_PA27, true);
}
    28e0:	4770      	bx	lr
    28e2:	46c0      	nop			; (mov r8, r8)
    28e4:	41004400 	.word	0x41004400

000028e8 <SysTick_Handler>:
 * Handles the interrupt from the timer
 */
void SysTick_Handler(void)
{
    /* increment the tick count */
    Millisecond_Counter++;
    28e8:	4a02      	ldr	r2, [pc, #8]	; (28f4 <SysTick_Handler+0xc>)
    28ea:	6813      	ldr	r3, [r2, #0]
    28ec:	3301      	adds	r3, #1
    28ee:	6013      	str	r3, [r2, #0]
}
    28f0:	4770      	bx	lr
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	2000011c 	.word	0x2000011c

000028f8 <mstimer_now>:
 * The system time is the time elapsed since OS was started.
 * @return milliseconds since OS was started
 */
unsigned long mstimer_now(void)
{
    return Millisecond_Counter;
    28f8:	4b01      	ldr	r3, [pc, #4]	; (2900 <mstimer_now+0x8>)
    28fa:	6818      	ldr	r0, [r3, #0]
}
    28fc:	4770      	bx	lr
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	2000011c 	.word	0x2000011c

00002904 <mstimer_init>:

/**
 * @brief Initialization for timer
 */
void mstimer_init(void)
{
    2904:	b510      	push	{r4, lr}
    /* Setup SysTick Timer for 1ms interrupts  */
    if (SysTick_Config(SystemCoreClock / 1000)) {
    2906:	4b0f      	ldr	r3, [pc, #60]	; (2944 <mstimer_init+0x40>)
    2908:	6818      	ldr	r0, [r3, #0]
    290a:	21fa      	movs	r1, #250	; 0xfa
    290c:	0089      	lsls	r1, r1, #2
    290e:	4b0e      	ldr	r3, [pc, #56]	; (2948 <mstimer_init+0x44>)
    2910:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    2912:	3801      	subs	r0, #1
    2914:	4b0d      	ldr	r3, [pc, #52]	; (294c <mstimer_init+0x48>)
    2916:	4298      	cmp	r0, r3
    2918:	d811      	bhi.n	293e <mstimer_init+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    291a:	4a0d      	ldr	r2, [pc, #52]	; (2950 <mstimer_init+0x4c>)
    291c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    291e:	480d      	ldr	r0, [pc, #52]	; (2954 <mstimer_init+0x50>)
    2920:	6a03      	ldr	r3, [r0, #32]
    2922:	021b      	lsls	r3, r3, #8
    2924:	0a1b      	lsrs	r3, r3, #8
    2926:	21c0      	movs	r1, #192	; 0xc0
    2928:	0609      	lsls	r1, r1, #24
    292a:	430b      	orrs	r3, r1
    292c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    292e:	2300      	movs	r3, #0
    2930:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2932:	3307      	adds	r3, #7
    2934:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    2936:	2300      	movs	r3, #0
    2938:	2b00      	cmp	r3, #0
    293a:	d002      	beq.n	2942 <mstimer_init+0x3e>
    293c:	e7fe      	b.n	293c <mstimer_init+0x38>
    return (1UL);                                                   /* Reload value impossible */
    293e:	2301      	movs	r3, #1
    2940:	e7fa      	b.n	2938 <mstimer_init+0x34>
        /* Capture error */
        while (1)
            ;
    }
    NVIC_EnableIRQ(SysTick_IRQn);
}
    2942:	bd10      	pop	{r4, pc}
    2944:	2000000c 	.word	0x2000000c
    2948:	00003f2d 	.word	0x00003f2d
    294c:	00ffffff 	.word	0x00ffffff
    2950:	e000e010 	.word	0xe000e010
    2954:	e000ed00 	.word	0xe000ed00

00002958 <rs485_clock_init>:

/**
 * Initialize the USART SERCOM module clock
 */
static void rs485_clock_init(void)
{
    2958:	b500      	push	{lr}
    295a:	b083      	sub	sp, #12
			PM->APBCMASK.reg |= mask;
    295c:	4a07      	ldr	r2, [pc, #28]	; (297c <rs485_clock_init+0x24>)
    295e:	6a13      	ldr	r3, [r2, #32]
    2960:	2120      	movs	r1, #32
    2962:	430b      	orrs	r3, r1
    2964:	6213      	str	r3, [r2, #32]
    2966:	a901      	add	r1, sp, #4
    2968:	2300      	movs	r3, #0
    296a:	700b      	strb	r3, [r1, #0]
    system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_SERCOM3);
    /* Turn on Generic clock for USART */
    system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    /*Default is generator 0. Other wise need to configure like below */
    /* gclk_chan_conf.source_generator = GCLK_GENERATOR_1; */
    system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    296c:	2017      	movs	r0, #23
    296e:	4b04      	ldr	r3, [pc, #16]	; (2980 <rs485_clock_init+0x28>)
    2970:	4798      	blx	r3
    system_gclk_chan_enable(gclk_index);
    2972:	2017      	movs	r0, #23
    2974:	4b03      	ldr	r3, [pc, #12]	; (2984 <rs485_clock_init+0x2c>)
    2976:	4798      	blx	r3
}
    2978:	b003      	add	sp, #12
    297a:	bd00      	pop	{pc}
    297c:	40000400 	.word	0x40000400
    2980:	000038a9 	.word	0x000038a9
    2984:	00003821 	.word	0x00003821

00002988 <rs485_pin_init>:

/**
 * Initialize the RTS pin
 */
static void rs485_pin_init(void)
{
    2988:	b570      	push	{r4, r5, r6, lr}
	config->powersave  = false;
    298a:	4c0b      	ldr	r4, [pc, #44]	; (29b8 <rs485_pin_init+0x30>)
    298c:	2300      	movs	r3, #0
    298e:	70a3      	strb	r3, [r4, #2]
	//Configure PIN_A24 as DE and PIN_A25 as /RE
    port_get_config_defaults(&RS485_Port_Config);
    RS485_Port_Config.direction = PORT_PIN_DIR_OUTPUT;
    2990:	2601      	movs	r6, #1
    2992:	7026      	strb	r6, [r4, #0]
	
    RS485_Port_Config.input_pull = PORT_PIN_PULL_DOWN;
    2994:	3302      	adds	r3, #2
    2996:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(RS485_DE, &RS485_Port_Config);
    2998:	0021      	movs	r1, r4
    299a:	2018      	movs	r0, #24
    299c:	4d07      	ldr	r5, [pc, #28]	; (29bc <rs485_pin_init+0x34>)
    299e:	47a8      	blx	r5
	
	RS485_Port_Config.input_pull = PORT_PIN_PULL_UP;
    29a0:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(RS485_RE, &RS485_Port_Config);
    29a2:	0021      	movs	r1, r4
    29a4:	2019      	movs	r0, #25
    29a6:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    29a8:	4b05      	ldr	r3, [pc, #20]	; (29c0 <rs485_pin_init+0x38>)
    29aa:	2280      	movs	r2, #128	; 0x80
    29ac:	0492      	lsls	r2, r2, #18
    29ae:	615a      	str	r2, [r3, #20]
    29b0:	2280      	movs	r2, #128	; 0x80
    29b2:	0452      	lsls	r2, r2, #17
    29b4:	615a      	str	r2, [r3, #20]

	
	
    port_pin_set_output_level(RS485_RE, false);
	port_pin_set_output_level(RS485_DE, false);
}
    29b6:	bd70      	pop	{r4, r5, r6, pc}
    29b8:	20000124 	.word	0x20000124
    29bc:	000032b1 	.word	0x000032b1
    29c0:	41004400 	.word	0x41004400

000029c4 <usart_read_callback>:
{
    29c4:	b510      	push	{r4, lr}
    if (!Transmitting) {
    29c6:	4b0a      	ldr	r3, [pc, #40]	; (29f0 <usart_read_callback+0x2c>)
    29c8:	781b      	ldrb	r3, [r3, #0]
    29ca:	2b00      	cmp	r3, #0
    29cc:	d004      	beq.n	29d8 <usart_read_callback+0x14>
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    29ce:	4909      	ldr	r1, [pc, #36]	; (29f4 <usart_read_callback+0x30>)
    29d0:	4809      	ldr	r0, [pc, #36]	; (29f8 <usart_read_callback+0x34>)
    29d2:	4b0a      	ldr	r3, [pc, #40]	; (29fc <usart_read_callback+0x38>)
    29d4:	4798      	blx	r3
}
    29d6:	bd10      	pop	{r4, pc}
        FIFO_Put(&Receive_Queue, rx_buffer[0]);
    29d8:	4b06      	ldr	r3, [pc, #24]	; (29f4 <usart_read_callback+0x30>)
    29da:	8819      	ldrh	r1, [r3, #0]
    29dc:	b2c9      	uxtb	r1, r1
    29de:	4808      	ldr	r0, [pc, #32]	; (2a00 <usart_read_callback+0x3c>)
    29e0:	4b08      	ldr	r3, [pc, #32]	; (2a04 <usart_read_callback+0x40>)
    29e2:	4798      	blx	r3
        RS485_Receive_Bytes++;
    29e4:	4a08      	ldr	r2, [pc, #32]	; (2a08 <usart_read_callback+0x44>)
    29e6:	6813      	ldr	r3, [r2, #0]
    29e8:	3301      	adds	r3, #1
    29ea:	6013      	str	r3, [r2, #0]
    29ec:	e7ef      	b.n	29ce <usart_read_callback+0xa>
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	200003b0 	.word	0x200003b0
    29f4:	200009ec 	.word	0x200009ec
    29f8:	2000016c 	.word	0x2000016c
    29fc:	00003019 	.word	0x00003019
    2a00:	200001a0 	.word	0x200001a0
    2a04:	000012fd 	.word	0x000012fd
    2a08:	20000128 	.word	0x20000128

00002a0c <rs485_usart_init>:

/**
 * Initialize the USART SERCOM module for RS485
 */
static void rs485_usart_init(void)
{
    2a0c:	b570      	push	{r4, r5, r6, lr}
    enum status_code status;

    /* Disable this module since ASF expects it to be disabled. */
    RS485_USART->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2a0e:	4935      	ldr	r1, [pc, #212]	; (2ae4 <rs485_usart_init+0xd8>)
    2a10:	680b      	ldr	r3, [r1, #0]
    2a12:	2202      	movs	r2, #2
    2a14:	4393      	bics	r3, r2
    2a16:	600b      	str	r3, [r1, #0]
	config->data_order       = USART_DATAORDER_LSB;
    2a18:	4a33      	ldr	r2, [pc, #204]	; (2ae8 <rs485_usart_init+0xdc>)
    2a1a:	2380      	movs	r3, #128	; 0x80
    2a1c:	05db      	lsls	r3, r3, #23
    2a1e:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2a20:	2300      	movs	r3, #0
    2a22:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    2a24:	20ff      	movs	r0, #255	; 0xff
    2a26:	8110      	strh	r0, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    2a28:	2000      	movs	r0, #0
    2a2a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2a2c:	72d3      	strb	r3, [r2, #11]
	config->receiver_enable  = true;
    2a2e:	2401      	movs	r4, #1
    2a30:	2524      	movs	r5, #36	; 0x24
    2a32:	5554      	strb	r4, [r2, r5]
	config->transmitter_enable = true;
    2a34:	3501      	adds	r5, #1
    2a36:	5554      	strb	r4, [r2, r5]
	config->clock_polarity_inverted = false;
    2a38:	3425      	adds	r4, #37	; 0x25
    2a3a:	5513      	strb	r3, [r2, r4]
	config->use_external_clock = false;
    2a3c:	3401      	adds	r4, #1
    2a3e:	5513      	strb	r3, [r2, r4]
	config->ext_clock_freq   = 0;
    2a40:	6293      	str	r3, [r2, #40]	; 0x28
	config->run_in_standby   = false;
    2a42:	3405      	adds	r4, #5
    2a44:	5513      	strb	r3, [r2, r4]
	config->generator_source = GCLK_GENERATOR_0;
    2a46:	3401      	adds	r4, #1
    2a48:	5513      	strb	r3, [r2, r4]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2a4a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2a4c:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
    2a4e:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
    2a50:	7610      	strb	r0, [r2, #24]
	config->start_frame_detection_enable            = false;
    2a52:	7710      	strb	r0, [r2, #28]
	config->encoding_format_enable                  = false;
    2a54:	7650      	strb	r0, [r2, #25]
	config->receive_pulse_length                    = 19;
    2a56:	2313      	movs	r3, #19
    2a58:	7693      	strb	r3, [r2, #26]
	config->collision_detection_enable              = false;
    2a5a:	7750      	strb	r0, [r2, #29]
    // Get default settings
    usart_get_config_defaults(&RS485_USART_Config);
    RS485_USART_Config.baudrate = Baud_Rate;
    2a5c:	4b23      	ldr	r3, [pc, #140]	; (2aec <rs485_usart_init+0xe0>)
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	6213      	str	r3, [r2, #32]
    RS485_USART_Config.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
    2a62:	2390      	movs	r3, #144	; 0x90
    2a64:	035b      	lsls	r3, r3, #13
    2a66:	60d3      	str	r3, [r2, #12]
    RS485_USART_Config.pinmux_pad0 = RS485_TX;
    2a68:	4b21      	ldr	r3, [pc, #132]	; (2af0 <rs485_usart_init+0xe4>)
    2a6a:	6313      	str	r3, [r2, #48]	; 0x30
    RS485_USART_Config.pinmux_pad1 = RS485_RX;
    2a6c:	4b21      	ldr	r3, [pc, #132]	; (2af4 <rs485_usart_init+0xe8>)
    2a6e:	6353      	str	r3, [r2, #52]	; 0x34
    RS485_USART_Config.pinmux_pad2 = PINMUX_UNUSED;
    2a70:	2301      	movs	r3, #1
    2a72:	425b      	negs	r3, r3
    2a74:	6393      	str	r3, [r2, #56]	; 0x38
    RS485_USART_Config.pinmux_pad3 = PINMUX_UNUSED;
    2a76:	63d3      	str	r3, [r2, #60]	; 0x3c
    status = usart_init(&RS485_USART_Module, RS485_USART, &RS485_USART_Config);
    2a78:	481f      	ldr	r0, [pc, #124]	; (2af8 <rs485_usart_init+0xec>)
    2a7a:	4b20      	ldr	r3, [pc, #128]	; (2afc <rs485_usart_init+0xf0>)
    2a7c:	4798      	blx	r3
    while (status != STATUS_OK) {
    2a7e:	2800      	cmp	r0, #0
    2a80:	d1fd      	bne.n	2a7e <rs485_usart_init+0x72>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a82:	4b1d      	ldr	r3, [pc, #116]	; (2af8 <rs485_usart_init+0xec>)
    2a84:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2a86:	0020      	movs	r0, r4
    2a88:	4b1d      	ldr	r3, [pc, #116]	; (2b00 <rs485_usart_init+0xf4>)
    2a8a:	4798      	blx	r3
    2a8c:	231f      	movs	r3, #31
    2a8e:	4018      	ands	r0, r3
    2a90:	3b1e      	subs	r3, #30
    2a92:	4083      	lsls	r3, r0
    2a94:	4a1b      	ldr	r2, [pc, #108]	; (2b04 <rs485_usart_init+0xf8>)
    2a96:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a98:	4b17      	ldr	r3, [pc, #92]	; (2af8 <rs485_usart_init+0xec>)
    2a9a:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a9c:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d1fa      	bne.n	2a98 <rs485_usart_init+0x8c>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2aa2:	6823      	ldr	r3, [r4, #0]
    2aa4:	2202      	movs	r2, #2
    2aa6:	4313      	orrs	r3, r2
    2aa8:	6023      	str	r3, [r4, #0]
        /* hardware not initialized correctly - figure out why! */
    }
    usart_enable(&RS485_USART_Module);
#ifdef USART_CALLBACK_MODE
    usart_register_callback(&RS485_USART_Module, usart_read_callback,
    2aaa:	4c13      	ldr	r4, [pc, #76]	; (2af8 <rs485_usart_init+0xec>)
    2aac:	3a01      	subs	r2, #1
    2aae:	4916      	ldr	r1, [pc, #88]	; (2b08 <rs485_usart_init+0xfc>)
    2ab0:	0020      	movs	r0, r4
    2ab2:	4e16      	ldr	r6, [pc, #88]	; (2b0c <rs485_usart_init+0x100>)
    2ab4:	47b0      	blx	r6
    2ab6:	2531      	movs	r5, #49	; 0x31
    2ab8:	5d63      	ldrb	r3, [r4, r5]
    2aba:	2202      	movs	r2, #2
    2abc:	4313      	orrs	r3, r2
    2abe:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_RECEIVED);
    usart_enable_callback(&RS485_USART_Module, USART_CALLBACK_BUFFER_RECEIVED);
    usart_register_callback(&RS485_USART_Module, usart_write_callback,
    2ac0:	2200      	movs	r2, #0
    2ac2:	4913      	ldr	r1, [pc, #76]	; (2b10 <rs485_usart_init+0x104>)
    2ac4:	0020      	movs	r0, r4
    2ac6:	47b0      	blx	r6
    2ac8:	5d63      	ldrb	r3, [r4, r5]
    2aca:	2201      	movs	r2, #1
    2acc:	4313      	orrs	r3, r2
    2ace:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(
        &RS485_USART_Module, USART_CALLBACK_BUFFER_TRANSMITTED);
    system_interrupt_set_priority(
    2ad0:	2100      	movs	r1, #0
    2ad2:	200c      	movs	r0, #12
    2ad4:	4b0f      	ldr	r3, [pc, #60]	; (2b14 <rs485_usart_init+0x108>)
    2ad6:	4798      	blx	r3
        SYSTEM_INTERRUPT_MODULE_SERCOM3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    /* initial callback call to prepare to begin receiving data */
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    2ad8:	490f      	ldr	r1, [pc, #60]	; (2b18 <rs485_usart_init+0x10c>)
    2ada:	0020      	movs	r0, r4
    2adc:	4b0f      	ldr	r3, [pc, #60]	; (2b1c <rs485_usart_init+0x110>)
    2ade:	4798      	blx	r3
#endif    
}
    2ae0:	bd70      	pop	{r4, r5, r6, pc}
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	42001400 	.word	0x42001400
    2ae8:	2000012c 	.word	0x2000012c
    2aec:	20000120 	.word	0x20000120
    2af0:	00160002 	.word	0x00160002
    2af4:	00170002 	.word	0x00170002
    2af8:	2000016c 	.word	0x2000016c
    2afc:	00002e69 	.word	0x00002e69
    2b00:	0000322d 	.word	0x0000322d
    2b04:	e000e100 	.word	0xe000e100
    2b08:	000029c5 	.word	0x000029c5
    2b0c:	00003001 	.word	0x00003001
    2b10:	00002b6d 	.word	0x00002b6d
    2b14:	000038f9 	.word	0x000038f9
    2b18:	200009ec 	.word	0x200009ec
    2b1c:	00003019 	.word	0x00003019

00002b20 <rs485_rts_enable>:
{
    2b20:	b510      	push	{r4, lr}
    if (enable) {
    2b22:	2800      	cmp	r0, #0
    2b24:	d10c      	bne.n	2b40 <rs485_rts_enable+0x20>
    2b26:	4b0d      	ldr	r3, [pc, #52]	; (2b5c <rs485_rts_enable+0x3c>)
    2b28:	2280      	movs	r2, #128	; 0x80
    2b2a:	0492      	lsls	r2, r2, #18
    2b2c:	615a      	str	r2, [r3, #20]
    2b2e:	2280      	movs	r2, #128	; 0x80
    2b30:	0452      	lsls	r2, r2, #17
    2b32:	615a      	str	r2, [r3, #20]
        led_tx_off();
    2b34:	4b0a      	ldr	r3, [pc, #40]	; (2b60 <rs485_rts_enable+0x40>)
    2b36:	4798      	blx	r3
        Transmitting = false;
    2b38:	2200      	movs	r2, #0
    2b3a:	4b0a      	ldr	r3, [pc, #40]	; (2b64 <rs485_rts_enable+0x44>)
    2b3c:	701a      	strb	r2, [r3, #0]
}
    2b3e:	bd10      	pop	{r4, pc}
        Transmitting = true;
    2b40:	2201      	movs	r2, #1
    2b42:	4b08      	ldr	r3, [pc, #32]	; (2b64 <rs485_rts_enable+0x44>)
    2b44:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    2b46:	4b05      	ldr	r3, [pc, #20]	; (2b5c <rs485_rts_enable+0x3c>)
    2b48:	2280      	movs	r2, #128	; 0x80
    2b4a:	0492      	lsls	r2, r2, #18
    2b4c:	619a      	str	r2, [r3, #24]
    2b4e:	2280      	movs	r2, #128	; 0x80
    2b50:	0452      	lsls	r2, r2, #17
    2b52:	619a      	str	r2, [r3, #24]
        led_tx_on();
    2b54:	4b04      	ldr	r3, [pc, #16]	; (2b68 <rs485_rts_enable+0x48>)
    2b56:	4798      	blx	r3
    2b58:	e7f1      	b.n	2b3e <rs485_rts_enable+0x1e>
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	41004400 	.word	0x41004400
    2b60:	000028d9 	.word	0x000028d9
    2b64:	200003b0 	.word	0x200003b0
    2b68:	000028c9 	.word	0x000028c9

00002b6c <usart_write_callback>:
{
    2b6c:	b510      	push	{r4, lr}
    rs485_rts_enable(false);
    2b6e:	2000      	movs	r0, #0
    2b70:	4b01      	ldr	r3, [pc, #4]	; (2b78 <usart_write_callback+0xc>)
    2b72:	4798      	blx	r3
}
    2b74:	bd10      	pop	{r4, pc}
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	00002b21 	.word	0x00002b21

00002b7c <rs485_baud_rate_set>:
    switch (baudrate) {
    2b7c:	2396      	movs	r3, #150	; 0x96
    2b7e:	021b      	lsls	r3, r3, #8
    2b80:	4298      	cmp	r0, r3
    2b82:	d103      	bne.n	2b8c <rs485_baud_rate_set+0x10>
            Baud_Rate = baudrate;
    2b84:	4b02      	ldr	r3, [pc, #8]	; (2b90 <rs485_baud_rate_set+0x14>)
    2b86:	6018      	str	r0, [r3, #0]
    bool valid = true;
    2b88:	2001      	movs	r0, #1
}
    2b8a:	4770      	bx	lr
            valid = false;
    2b8c:	2000      	movs	r0, #0
    2b8e:	e7fc      	b.n	2b8a <rs485_baud_rate_set+0xe>
    2b90:	20000120 	.word	0x20000120

00002b94 <rs485_init>:

/* SERCOM3 UART initialization */
void rs485_init(void)
{
    2b94:	b510      	push	{r4, lr}
    /* initialize the Rx and Tx byte queues */
    FIFO_Init(&Receive_Queue, &Receive_Queue_Data[0],
    2b96:	2280      	movs	r2, #128	; 0x80
    2b98:	0092      	lsls	r2, r2, #2
    2b9a:	4905      	ldr	r1, [pc, #20]	; (2bb0 <rs485_init+0x1c>)
    2b9c:	4805      	ldr	r0, [pc, #20]	; (2bb4 <rs485_init+0x20>)
    2b9e:	4b06      	ldr	r3, [pc, #24]	; (2bb8 <rs485_init+0x24>)
    2ba0:	4798      	blx	r3
        (unsigned)sizeof(Receive_Queue_Data));
    rs485_clock_init();
    2ba2:	4b06      	ldr	r3, [pc, #24]	; (2bbc <rs485_init+0x28>)
    2ba4:	4798      	blx	r3
    rs485_pin_init();
    2ba6:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <rs485_init+0x2c>)
    2ba8:	4798      	blx	r3
    rs485_usart_init();
    2baa:	4b06      	ldr	r3, [pc, #24]	; (2bc4 <rs485_init+0x30>)
    2bac:	4798      	blx	r3
}
    2bae:	bd10      	pop	{r4, pc}
    2bb0:	200001b0 	.word	0x200001b0
    2bb4:	200001a0 	.word	0x200001a0
    2bb8:	00001339 	.word	0x00001339
    2bbc:	00002959 	.word	0x00002959
    2bc0:	00002989 	.word	0x00002989
    2bc4:	00002a0d 	.word	0x00002a0d

00002bc8 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    2bc8:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    2bca:	2201      	movs	r2, #1
    2bcc:	4b03      	ldr	r3, [pc, #12]	; (2bdc <WDT_Handler+0x14>)
    2bce:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    2bd0:	4b03      	ldr	r3, [pc, #12]	; (2be0 <WDT_Handler+0x18>)
    2bd2:	681b      	ldr	r3, [r3, #0]
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d000      	beq.n	2bda <WDT_Handler+0x12>
		wdt_early_warning_callback();
    2bd8:	4798      	blx	r3
	}
}
    2bda:	bd10      	pop	{r4, pc}
    2bdc:	40001000 	.word	0x40001000
    2be0:	200009f4 	.word	0x200009f4

00002be4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2be4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2be6:	0080      	lsls	r0, r0, #2
    2be8:	4b16      	ldr	r3, [pc, #88]	; (2c44 <_tc_interrupt_handler+0x60>)
    2bea:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2bec:	682b      	ldr	r3, [r5, #0]
    2bee:	7b9c      	ldrb	r4, [r3, #14]
			module->register_callback_mask &
    2bf0:	7e2a      	ldrb	r2, [r5, #24]
			module->enable_callback_mask;
    2bf2:	7e6b      	ldrb	r3, [r5, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2bf4:	4014      	ands	r4, r2
    2bf6:	401c      	ands	r4, r3

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2bf8:	07e3      	lsls	r3, r4, #31
    2bfa:	d406      	bmi.n	2c0a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2bfc:	07a3      	lsls	r3, r4, #30
    2bfe:	d40b      	bmi.n	2c18 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2c00:	06e3      	lsls	r3, r4, #27
    2c02:	d410      	bmi.n	2c26 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2c04:	06a3      	lsls	r3, r4, #26
    2c06:	d415      	bmi.n	2c34 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2c08:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2c0a:	0028      	movs	r0, r5
    2c0c:	68ab      	ldr	r3, [r5, #8]
    2c0e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2c10:	2301      	movs	r3, #1
    2c12:	682a      	ldr	r2, [r5, #0]
    2c14:	7393      	strb	r3, [r2, #14]
    2c16:	e7f1      	b.n	2bfc <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2c18:	0028      	movs	r0, r5
    2c1a:	68eb      	ldr	r3, [r5, #12]
    2c1c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2c1e:	2302      	movs	r3, #2
    2c20:	682a      	ldr	r2, [r5, #0]
    2c22:	7393      	strb	r3, [r2, #14]
    2c24:	e7ec      	b.n	2c00 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2c26:	0028      	movs	r0, r5
    2c28:	692b      	ldr	r3, [r5, #16]
    2c2a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2c2c:	2310      	movs	r3, #16
    2c2e:	682a      	ldr	r2, [r5, #0]
    2c30:	7393      	strb	r3, [r2, #14]
    2c32:	e7e7      	b.n	2c04 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2c34:	0028      	movs	r0, r5
    2c36:	696b      	ldr	r3, [r5, #20]
    2c38:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2c3a:	682b      	ldr	r3, [r5, #0]
    2c3c:	2220      	movs	r2, #32
    2c3e:	739a      	strb	r2, [r3, #14]
}
    2c40:	e7e2      	b.n	2c08 <_tc_interrupt_handler+0x24>
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	200009f8 	.word	0x200009f8

00002c48 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2c48:	b510      	push	{r4, lr}
    2c4a:	2000      	movs	r0, #0
    2c4c:	4b01      	ldr	r3, [pc, #4]	; (2c54 <TC3_Handler+0xc>)
    2c4e:	4798      	blx	r3
    2c50:	bd10      	pop	{r4, pc}
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	00002be5 	.word	0x00002be5

00002c58 <TC4_Handler>:
    2c58:	b510      	push	{r4, lr}
    2c5a:	2001      	movs	r0, #1
    2c5c:	4b01      	ldr	r3, [pc, #4]	; (2c64 <TC4_Handler+0xc>)
    2c5e:	4798      	blx	r3
    2c60:	bd10      	pop	{r4, pc}
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	00002be5 	.word	0x00002be5

00002c68 <TC5_Handler>:
    2c68:	b510      	push	{r4, lr}
    2c6a:	2002      	movs	r0, #2
    2c6c:	4b01      	ldr	r3, [pc, #4]	; (2c74 <TC5_Handler+0xc>)
    2c6e:	4798      	blx	r3
    2c70:	bd10      	pop	{r4, pc}
    2c72:	46c0      	nop			; (mov r8, r8)
    2c74:	00002be5 	.word	0x00002be5

00002c78 <TC6_Handler>:
    2c78:	b510      	push	{r4, lr}
    2c7a:	2003      	movs	r0, #3
    2c7c:	4b01      	ldr	r3, [pc, #4]	; (2c84 <TC6_Handler+0xc>)
    2c7e:	4798      	blx	r3
    2c80:	bd10      	pop	{r4, pc}
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	00002be5 	.word	0x00002be5

00002c88 <TC7_Handler>:
    2c88:	b510      	push	{r4, lr}
    2c8a:	2004      	movs	r0, #4
    2c8c:	4b01      	ldr	r3, [pc, #4]	; (2c94 <TC7_Handler+0xc>)
    2c8e:	4798      	blx	r3
    2c90:	bd10      	pop	{r4, pc}
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	00002be5 	.word	0x00002be5

00002c98 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    2c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c9a:	46de      	mov	lr, fp
    2c9c:	4657      	mov	r7, sl
    2c9e:	464e      	mov	r6, r9
    2ca0:	4645      	mov	r5, r8
    2ca2:	b5e0      	push	{r5, r6, r7, lr}
    2ca4:	b087      	sub	sp, #28
    2ca6:	0005      	movs	r5, r0
    2ca8:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2caa:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2cac:	0030      	movs	r0, r6
    2cae:	4b69      	ldr	r3, [pc, #420]	; (2e54 <_usart_set_config+0x1bc>)
    2cb0:	4798      	blx	r3
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2cb2:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2cb4:	2200      	movs	r2, #0
    2cb6:	230e      	movs	r3, #14
    2cb8:	a902      	add	r1, sp, #8
    2cba:	468c      	mov	ip, r1
    2cbc:	4463      	add	r3, ip
    2cbe:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    2cc0:	8a22      	ldrh	r2, [r4, #16]
    2cc2:	2380      	movs	r3, #128	; 0x80
    2cc4:	01db      	lsls	r3, r3, #7
    2cc6:	429a      	cmp	r2, r3
    2cc8:	d03b      	beq.n	2d42 <_usart_set_config+0xaa>
    2cca:	d90c      	bls.n	2ce6 <_usart_set_config+0x4e>
    2ccc:	23c0      	movs	r3, #192	; 0xc0
    2cce:	01db      	lsls	r3, r3, #7
    2cd0:	429a      	cmp	r2, r3
    2cd2:	d031      	beq.n	2d38 <_usart_set_config+0xa0>
    2cd4:	2380      	movs	r3, #128	; 0x80
    2cd6:	021b      	lsls	r3, r3, #8
    2cd8:	429a      	cmp	r2, r3
    2cda:	d10d      	bne.n	2cf8 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2cdc:	2303      	movs	r3, #3
    2cde:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2ce0:	2300      	movs	r3, #0
    2ce2:	469a      	mov	sl, r3
			break;
    2ce4:	e00c      	b.n	2d00 <_usart_set_config+0x68>
	switch (config->sample_rate) {
    2ce6:	2380      	movs	r3, #128	; 0x80
    2ce8:	019b      	lsls	r3, r3, #6
    2cea:	429a      	cmp	r2, r3
    2cec:	d104      	bne.n	2cf8 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2cee:	2310      	movs	r3, #16
    2cf0:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2cf2:	3b0f      	subs	r3, #15
    2cf4:	469a      	mov	sl, r3
			break;
    2cf6:	e003      	b.n	2d00 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2cf8:	2310      	movs	r3, #16
    2cfa:	4698      	mov	r8, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2cfc:	2300      	movs	r3, #0
    2cfe:	469a      	mov	sl, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2d00:	6823      	ldr	r3, [r4, #0]
    2d02:	68e1      	ldr	r1, [r4, #12]
    2d04:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
    2d06:	6961      	ldr	r1, [r4, #20]
    2d08:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2d0a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2d0c:	7e22      	ldrb	r2, [r4, #24]
    2d0e:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    2d10:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2d12:	2226      	movs	r2, #38	; 0x26
    2d14:	5ca2      	ldrb	r2, [r4, r2]
    2d16:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    2d18:	4313      	orrs	r3, r2
    2d1a:	4699      	mov	r9, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2d1c:	6862      	ldr	r2, [r4, #4]
    2d1e:	9203      	str	r2, [sp, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2d20:	2a00      	cmp	r2, #0
    2d22:	d021      	beq.n	2d68 <_usart_set_config+0xd0>
    2d24:	2380      	movs	r3, #128	; 0x80
    2d26:	055b      	lsls	r3, r3, #21
    2d28:	429a      	cmp	r2, r3
    2d2a:	d13e      	bne.n	2daa <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2d2c:	2327      	movs	r3, #39	; 0x27
    2d2e:	5ce3      	ldrb	r3, [r4, r3]
    2d30:	2b00      	cmp	r3, #0
    2d32:	d00b      	beq.n	2d4c <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
    2d34:	2000      	movs	r0, #0
    2d36:	e039      	b.n	2dac <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2d38:	2308      	movs	r3, #8
    2d3a:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2d3c:	3b07      	subs	r3, #7
    2d3e:	469a      	mov	sl, r3
			break;
    2d40:	e7de      	b.n	2d00 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2d42:	2308      	movs	r3, #8
    2d44:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2d46:	2300      	movs	r3, #0
    2d48:	469a      	mov	sl, r3
    2d4a:	e7d9      	b.n	2d00 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2d4c:	6a23      	ldr	r3, [r4, #32]
    2d4e:	4698      	mov	r8, r3
    2d50:	b2c0      	uxtb	r0, r0
    2d52:	4b41      	ldr	r3, [pc, #260]	; (2e58 <_usart_set_config+0x1c0>)
    2d54:	4798      	blx	r3
    2d56:	0001      	movs	r1, r0
    2d58:	220e      	movs	r2, #14
    2d5a:	ab02      	add	r3, sp, #8
    2d5c:	469c      	mov	ip, r3
    2d5e:	4462      	add	r2, ip
    2d60:	4640      	mov	r0, r8
    2d62:	4b3e      	ldr	r3, [pc, #248]	; (2e5c <_usart_set_config+0x1c4>)
    2d64:	4798      	blx	r3
    2d66:	e021      	b.n	2dac <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2d68:	2327      	movs	r3, #39	; 0x27
    2d6a:	5ce3      	ldrb	r3, [r4, r3]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d00b      	beq.n	2d88 <_usart_set_config+0xf0>
				status_code =
    2d70:	4643      	mov	r3, r8
    2d72:	9300      	str	r3, [sp, #0]
    2d74:	4653      	mov	r3, sl
    2d76:	220e      	movs	r2, #14
    2d78:	a902      	add	r1, sp, #8
    2d7a:	468c      	mov	ip, r1
    2d7c:	4462      	add	r2, ip
    2d7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2d80:	6a20      	ldr	r0, [r4, #32]
    2d82:	4f37      	ldr	r7, [pc, #220]	; (2e60 <_usart_set_config+0x1c8>)
    2d84:	47b8      	blx	r7
    2d86:	e011      	b.n	2dac <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2d88:	6a23      	ldr	r3, [r4, #32]
    2d8a:	469b      	mov	fp, r3
    2d8c:	b2c0      	uxtb	r0, r0
    2d8e:	4b32      	ldr	r3, [pc, #200]	; (2e58 <_usart_set_config+0x1c0>)
    2d90:	4798      	blx	r3
    2d92:	0001      	movs	r1, r0
				status_code =
    2d94:	4643      	mov	r3, r8
    2d96:	9300      	str	r3, [sp, #0]
    2d98:	4653      	mov	r3, sl
    2d9a:	220e      	movs	r2, #14
    2d9c:	a802      	add	r0, sp, #8
    2d9e:	4684      	mov	ip, r0
    2da0:	4462      	add	r2, ip
    2da2:	4658      	mov	r0, fp
    2da4:	4f2e      	ldr	r7, [pc, #184]	; (2e60 <_usart_set_config+0x1c8>)
    2da6:	47b8      	blx	r7
    2da8:	e000      	b.n	2dac <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
    2daa:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2dac:	2800      	cmp	r0, #0
    2dae:	d142      	bne.n	2e36 <_usart_set_config+0x19e>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    2db0:	7e63      	ldrb	r3, [r4, #25]
    2db2:	2b00      	cmp	r3, #0
    2db4:	d001      	beq.n	2dba <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2db6:	7ea3      	ldrb	r3, [r4, #26]
    2db8:	73b3      	strb	r3, [r6, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2dba:	230e      	movs	r3, #14
    2dbc:	aa02      	add	r2, sp, #8
    2dbe:	4694      	mov	ip, r2
    2dc0:	4463      	add	r3, ip
    2dc2:	881b      	ldrh	r3, [r3, #0]
    2dc4:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    2dc6:	464b      	mov	r3, r9
    2dc8:	9a03      	ldr	r2, [sp, #12]
    2dca:	4313      	orrs	r3, r2

	if (config->use_external_clock == false) {
    2dcc:	2227      	movs	r2, #39	; 0x27
    2dce:	5ca2      	ldrb	r2, [r4, r2]
    2dd0:	2a00      	cmp	r2, #0
    2dd2:	d101      	bne.n	2dd8 <_usart_set_config+0x140>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2dd4:	3204      	adds	r2, #4
    2dd6:	4313      	orrs	r3, r2
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2dd8:	7e61      	ldrb	r1, [r4, #25]
    2dda:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2ddc:	7f22      	ldrb	r2, [r4, #28]
    2dde:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2de0:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2de2:	7f62      	ldrb	r2, [r4, #29]
    2de4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2de6:	4311      	orrs	r1, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2de8:	2224      	movs	r2, #36	; 0x24
    2dea:	5ca2      	ldrb	r2, [r4, r2]
    2dec:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2dee:	4311      	orrs	r1, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2df0:	2225      	movs	r2, #37	; 0x25
    2df2:	5ca2      	ldrb	r2, [r4, r2]
    2df4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2df6:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    2df8:	7aa2      	ldrb	r2, [r4, #10]
    2dfa:	4311      	orrs	r1, r2
	ctrlb |= (uint32_t)config->character_size;
    2dfc:	7ae2      	ldrb	r2, [r4, #11]
    2dfe:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    2e00:	8922      	ldrh	r2, [r4, #8]
    2e02:	2aff      	cmp	r2, #255	; 0xff
    2e04:	d01e      	beq.n	2e44 <_usart_set_config+0x1ac>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2e06:	2780      	movs	r7, #128	; 0x80
    2e08:	047f      	lsls	r7, r7, #17
    2e0a:	433b      	orrs	r3, r7
		ctrlb |= config->parity;
    2e0c:	4311      	orrs	r1, r2
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2e0e:	222c      	movs	r2, #44	; 0x2c
    2e10:	5ca2      	ldrb	r2, [r4, r2]
    2e12:	2a00      	cmp	r2, #0
    2e14:	d103      	bne.n	2e1e <_usart_set_config+0x186>
    2e16:	4a13      	ldr	r2, [pc, #76]	; (2e64 <_usart_set_config+0x1cc>)
    2e18:	7892      	ldrb	r2, [r2, #2]
    2e1a:	0792      	lsls	r2, r2, #30
    2e1c:	d501      	bpl.n	2e22 <_usart_set_config+0x18a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2e1e:	2280      	movs	r2, #128	; 0x80
    2e20:	4313      	orrs	r3, r2
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e22:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2e24:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    2e26:	2a00      	cmp	r2, #0
    2e28:	d1fb      	bne.n	2e22 <_usart_set_config+0x18a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2e2a:	6071      	str	r1, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e2c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2e2e:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    2e30:	2a00      	cmp	r2, #0
    2e32:	d1fb      	bne.n	2e2c <_usart_set_config+0x194>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2e34:	6033      	str	r3, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
    2e36:	b007      	add	sp, #28
    2e38:	bc3c      	pop	{r2, r3, r4, r5}
    2e3a:	4690      	mov	r8, r2
    2e3c:	4699      	mov	r9, r3
    2e3e:	46a2      	mov	sl, r4
    2e40:	46ab      	mov	fp, r5
    2e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
    2e44:	7ee2      	ldrb	r2, [r4, #27]
    2e46:	2a00      	cmp	r2, #0
    2e48:	d0e1      	beq.n	2e0e <_usart_set_config+0x176>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2e4a:	2280      	movs	r2, #128	; 0x80
    2e4c:	04d2      	lsls	r2, r2, #19
    2e4e:	4313      	orrs	r3, r2
    2e50:	e7dd      	b.n	2e0e <_usart_set_config+0x176>
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	00000a21 	.word	0x00000a21
    2e58:	000038c5 	.word	0x000038c5
    2e5c:	00000795 	.word	0x00000795
    2e60:	000007c1 	.word	0x000007c1
    2e64:	41002000 	.word	0x41002000

00002e68 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e6a:	b089      	sub	sp, #36	; 0x24
    2e6c:	0006      	movs	r6, r0
    2e6e:	000c      	movs	r4, r1
    2e70:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2e72:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2e74:	0008      	movs	r0, r1
    2e76:	4b42      	ldr	r3, [pc, #264]	; (2f80 <usart_init+0x118>)
    2e78:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2e7a:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2e7c:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2e7e:	6823      	ldr	r3, [r4, #0]
    2e80:	07db      	lsls	r3, r3, #31
    2e82:	d503      	bpl.n	2e8c <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2e84:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2e86:	0028      	movs	r0, r5
    2e88:	b009      	add	sp, #36	; 0x24
    2e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2e8c:	6823      	ldr	r3, [r4, #0]
    2e8e:	079b      	lsls	r3, r3, #30
    2e90:	d501      	bpl.n	2e96 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
    2e92:	251c      	movs	r5, #28
    2e94:	e7f7      	b.n	2e86 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2e96:	2301      	movs	r3, #1
    2e98:	4093      	lsls	r3, r2
    2e9a:	4a3a      	ldr	r2, [pc, #232]	; (2f84 <usart_init+0x11c>)
    2e9c:	6a11      	ldr	r1, [r2, #32]
    2e9e:	430b      	orrs	r3, r1
    2ea0:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2ea2:	252d      	movs	r5, #45	; 0x2d
    2ea4:	5d7b      	ldrb	r3, [r7, r5]
    2ea6:	a907      	add	r1, sp, #28
    2ea8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2eaa:	b2c3      	uxtb	r3, r0
    2eac:	9301      	str	r3, [sp, #4]
    2eae:	0018      	movs	r0, r3
    2eb0:	4b35      	ldr	r3, [pc, #212]	; (2f88 <usart_init+0x120>)
    2eb2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2eb4:	9801      	ldr	r0, [sp, #4]
    2eb6:	4b35      	ldr	r3, [pc, #212]	; (2f8c <usart_init+0x124>)
    2eb8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2eba:	5d78      	ldrb	r0, [r7, r5]
    2ebc:	2100      	movs	r1, #0
    2ebe:	4b34      	ldr	r3, [pc, #208]	; (2f90 <usart_init+0x128>)
    2ec0:	4798      	blx	r3
	module->character_size = config->character_size;
    2ec2:	7afb      	ldrb	r3, [r7, #11]
    2ec4:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    2ec6:	2324      	movs	r3, #36	; 0x24
    2ec8:	5cfb      	ldrb	r3, [r7, r3]
    2eca:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2ecc:	2325      	movs	r3, #37	; 0x25
    2ece:	5cfb      	ldrb	r3, [r7, r3]
    2ed0:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2ed2:	7efb      	ldrb	r3, [r7, #27]
    2ed4:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2ed6:	7f3b      	ldrb	r3, [r7, #28]
    2ed8:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    2eda:	0039      	movs	r1, r7
    2edc:	0030      	movs	r0, r6
    2ede:	4b2d      	ldr	r3, [pc, #180]	; (2f94 <usart_init+0x12c>)
    2ee0:	4798      	blx	r3
    2ee2:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    2ee4:	d1cf      	bne.n	2e86 <usart_init+0x1e>
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2ee6:	ab06      	add	r3, sp, #24
    2ee8:	2280      	movs	r2, #128	; 0x80
    2eea:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2eec:	2200      	movs	r2, #0
    2eee:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2ef0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2ef2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ef6:	9302      	str	r3, [sp, #8]
    2ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2efa:	9303      	str	r3, [sp, #12]
    2efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2efe:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    2f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f02:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    2f04:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    2f06:	2700      	movs	r7, #0
    2f08:	e006      	b.n	2f18 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2f0a:	0039      	movs	r1, r7
    2f0c:	0020      	movs	r0, r4
    2f0e:	4b22      	ldr	r3, [pc, #136]	; (2f98 <usart_init+0x130>)
    2f10:	4798      	blx	r3
    2f12:	e008      	b.n	2f26 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    2f14:	3701      	adds	r7, #1
    2f16:	b2ff      	uxtb	r7, r7
    2f18:	2f03      	cmp	r7, #3
    2f1a:	d80d      	bhi.n	2f38 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2f1c:	00bb      	lsls	r3, r7, #2
    2f1e:	aa02      	add	r2, sp, #8
    2f20:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    2f22:	2800      	cmp	r0, #0
    2f24:	d0f1      	beq.n	2f0a <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    2f26:	1c43      	adds	r3, r0, #1
    2f28:	d0f4      	beq.n	2f14 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2f2a:	a906      	add	r1, sp, #24
    2f2c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2f2e:	0c00      	lsrs	r0, r0, #16
    2f30:	b2c0      	uxtb	r0, r0
    2f32:	4b1a      	ldr	r3, [pc, #104]	; (2f9c <usart_init+0x134>)
    2f34:	4798      	blx	r3
    2f36:	e7ed      	b.n	2f14 <usart_init+0xac>
    2f38:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2f3a:	2a05      	cmp	r2, #5
    2f3c:	d806      	bhi.n	2f4c <usart_init+0xe4>
		module->callback[i]            = NULL;
    2f3e:	1c93      	adds	r3, r2, #2
    2f40:	009b      	lsls	r3, r3, #2
    2f42:	18f3      	adds	r3, r6, r3
    2f44:	2100      	movs	r1, #0
    2f46:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2f48:	3201      	adds	r2, #1
    2f4a:	e7f6      	b.n	2f3a <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    2f4c:	2200      	movs	r2, #0
    2f4e:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2f50:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2f52:	2300      	movs	r3, #0
    2f54:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2f56:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2f58:	3230      	adds	r2, #48	; 0x30
    2f5a:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    2f5c:	3201      	adds	r2, #1
    2f5e:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    2f60:	3201      	adds	r2, #1
    2f62:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    2f64:	3201      	adds	r2, #1
    2f66:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2f68:	6830      	ldr	r0, [r6, #0]
    2f6a:	4b05      	ldr	r3, [pc, #20]	; (2f80 <usart_init+0x118>)
    2f6c:	4798      	blx	r3
    2f6e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2f70:	490b      	ldr	r1, [pc, #44]	; (2fa0 <usart_init+0x138>)
    2f72:	4b0c      	ldr	r3, [pc, #48]	; (2fa4 <usart_init+0x13c>)
    2f74:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2f76:	00a4      	lsls	r4, r4, #2
    2f78:	4b0b      	ldr	r3, [pc, #44]	; (2fa8 <usart_init+0x140>)
    2f7a:	50e6      	str	r6, [r4, r3]
	return status_code;
    2f7c:	e783      	b.n	2e86 <usart_init+0x1e>
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	00000a21 	.word	0x00000a21
    2f84:	40000400 	.word	0x40000400
    2f88:	000038a9 	.word	0x000038a9
    2f8c:	00003821 	.word	0x00003821
    2f90:	0000085d 	.word	0x0000085d
    2f94:	00002c99 	.word	0x00002c99
    2f98:	000008a9 	.word	0x000008a9
    2f9c:	000039e1 	.word	0x000039e1
    2fa0:	00003049 	.word	0x00003049
    2fa4:	000031ed 	.word	0x000031ed
    2fa8:	20000a0c 	.word	0x20000a0c

00002fac <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fae:	0004      	movs	r4, r0
    2fb0:	000d      	movs	r5, r1
    2fb2:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2fb4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2fb6:	4b10      	ldr	r3, [pc, #64]	; (2ff8 <_usart_read_buffer+0x4c>)
    2fb8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2fba:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2fbc:	b29b      	uxth	r3, r3
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d003      	beq.n	2fca <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2fc2:	4b0e      	ldr	r3, [pc, #56]	; (2ffc <_usart_read_buffer+0x50>)
    2fc4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2fc6:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2fca:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2fcc:	4b0b      	ldr	r3, [pc, #44]	; (2ffc <_usart_read_buffer+0x50>)
    2fce:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2fd0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2fd2:	2205      	movs	r2, #5
    2fd4:	2332      	movs	r3, #50	; 0x32
    2fd6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2fd8:	3b2e      	subs	r3, #46	; 0x2e
    2fda:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2fdc:	7a23      	ldrb	r3, [r4, #8]
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d001      	beq.n	2fe6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2fe2:	2320      	movs	r3, #32
    2fe4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2fe6:	7a63      	ldrb	r3, [r4, #9]
    2fe8:	2b00      	cmp	r3, #0
    2fea:	d003      	beq.n	2ff4 <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2fec:	2308      	movs	r3, #8
    2fee:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2ff0:	2000      	movs	r0, #0
    2ff2:	e7e9      	b.n	2fc8 <_usart_read_buffer+0x1c>
    2ff4:	2000      	movs	r0, #0
    2ff6:	e7e7      	b.n	2fc8 <_usart_read_buffer+0x1c>
    2ff8:	000032d9 	.word	0x000032d9
    2ffc:	00003319 	.word	0x00003319

00003000 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3000:	1c93      	adds	r3, r2, #2
    3002:	009b      	lsls	r3, r3, #2
    3004:	18c3      	adds	r3, r0, r3
    3006:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    3008:	2301      	movs	r3, #1
    300a:	4093      	lsls	r3, r2
    300c:	001a      	movs	r2, r3
    300e:	2130      	movs	r1, #48	; 0x30
    3010:	5c43      	ldrb	r3, [r0, r1]
    3012:	4313      	orrs	r3, r2
    3014:	5443      	strb	r3, [r0, r1]
}
    3016:	4770      	bx	lr

00003018 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    3018:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    301a:	2201      	movs	r2, #1
    301c:	4b01      	ldr	r3, [pc, #4]	; (3024 <usart_read_job+0xc>)
    301e:	4798      	blx	r3
}
    3020:	bd10      	pop	{r4, pc}
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	00002fad 	.word	0x00002fad

00003028 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    3028:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    302a:	2a00      	cmp	r2, #0
    302c:	d101      	bne.n	3032 <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    302e:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    3030:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    3032:	7983      	ldrb	r3, [r0, #6]
    3034:	2b00      	cmp	r3, #0
    3036:	d101      	bne.n	303c <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    3038:	201c      	movs	r0, #28
    303a:	e7f9      	b.n	3030 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    303c:	4b01      	ldr	r3, [pc, #4]	; (3044 <usart_read_buffer_job+0x1c>)
    303e:	4798      	blx	r3
    3040:	e7f6      	b.n	3030 <usart_read_buffer_job+0x8>
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	00002fad 	.word	0x00002fad

00003048 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3048:	b5f0      	push	{r4, r5, r6, r7, lr}
    304a:	46c6      	mov	lr, r8
    304c:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    304e:	0080      	lsls	r0, r0, #2
    3050:	4b64      	ldr	r3, [pc, #400]	; (31e4 <_usart_interrupt_handler+0x19c>)
    3052:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3054:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3056:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    3058:	2b00      	cmp	r3, #0
    305a:	d1fc      	bne.n	3056 <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    305c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    305e:	7da6      	ldrb	r6, [r4, #22]
    3060:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    3062:	2330      	movs	r3, #48	; 0x30
    3064:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    3066:	2231      	movs	r2, #49	; 0x31
    3068:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    306a:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    306c:	07f3      	lsls	r3, r6, #31
    306e:	d525      	bpl.n	30bc <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    3070:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3072:	b29b      	uxth	r3, r3
    3074:	2b00      	cmp	r3, #0
    3076:	d01f      	beq.n	30b8 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3078:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    307a:	780a      	ldrb	r2, [r1, #0]
    307c:	b2d2      	uxtb	r2, r2
    307e:	b293      	uxth	r3, r2
    3080:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3082:	1c48      	adds	r0, r1, #1
    3084:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3086:	796b      	ldrb	r3, [r5, #5]
    3088:	2b01      	cmp	r3, #1
    308a:	d00e      	beq.n	30aa <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    308c:	4643      	mov	r3, r8
    308e:	05db      	lsls	r3, r3, #23
    3090:	0ddb      	lsrs	r3, r3, #23
    3092:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3094:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3096:	3b01      	subs	r3, #1
    3098:	b29b      	uxth	r3, r3
    309a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    309c:	2b00      	cmp	r3, #0
    309e:	d10d      	bne.n	30bc <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    30a0:	3301      	adds	r3, #1
    30a2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    30a4:	3301      	adds	r3, #1
    30a6:	75a3      	strb	r3, [r4, #22]
    30a8:	e008      	b.n	30bc <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    30aa:	784b      	ldrb	r3, [r1, #1]
    30ac:	021b      	lsls	r3, r3, #8
    30ae:	4313      	orrs	r3, r2
    30b0:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    30b2:	1c88      	adds	r0, r1, #2
    30b4:	62a8      	str	r0, [r5, #40]	; 0x28
    30b6:	e7e9      	b.n	308c <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    30b8:	2301      	movs	r3, #1
    30ba:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    30bc:	07b3      	lsls	r3, r6, #30
    30be:	d506      	bpl.n	30ce <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    30c0:	2302      	movs	r3, #2
    30c2:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    30c4:	2200      	movs	r2, #0
    30c6:	3331      	adds	r3, #49	; 0x31
    30c8:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    30ca:	07fb      	lsls	r3, r7, #31
    30cc:	d41c      	bmi.n	3108 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    30ce:	0773      	lsls	r3, r6, #29
    30d0:	d564      	bpl.n	319c <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    30d2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    30d4:	b29b      	uxth	r3, r3
    30d6:	2b00      	cmp	r3, #0
    30d8:	d05e      	beq.n	3198 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    30da:	8b62      	ldrh	r2, [r4, #26]
    30dc:	b2d2      	uxtb	r2, r2
    30de:	233f      	movs	r3, #63	; 0x3f
    30e0:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    30e2:	0711      	lsls	r1, r2, #28
    30e4:	d501      	bpl.n	30ea <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    30e6:	2337      	movs	r3, #55	; 0x37
    30e8:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    30ea:	2b00      	cmp	r3, #0
    30ec:	d031      	beq.n	3152 <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    30ee:	079a      	lsls	r2, r3, #30
    30f0:	d50e      	bpl.n	3110 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    30f2:	221a      	movs	r2, #26
    30f4:	2332      	movs	r3, #50	; 0x32
    30f6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    30f8:	3b30      	subs	r3, #48	; 0x30
    30fa:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    30fc:	077b      	lsls	r3, r7, #29
    30fe:	d54d      	bpl.n	319c <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3100:	0028      	movs	r0, r5
    3102:	696b      	ldr	r3, [r5, #20]
    3104:	4798      	blx	r3
    3106:	e049      	b.n	319c <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    3108:	0028      	movs	r0, r5
    310a:	68eb      	ldr	r3, [r5, #12]
    310c:	4798      	blx	r3
    310e:	e7de      	b.n	30ce <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3110:	075a      	lsls	r2, r3, #29
    3112:	d505      	bpl.n	3120 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    3114:	221e      	movs	r2, #30
    3116:	2332      	movs	r3, #50	; 0x32
    3118:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    311a:	3b2e      	subs	r3, #46	; 0x2e
    311c:	8363      	strh	r3, [r4, #26]
    311e:	e7ed      	b.n	30fc <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3120:	07da      	lsls	r2, r3, #31
    3122:	d505      	bpl.n	3130 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    3124:	2213      	movs	r2, #19
    3126:	2332      	movs	r3, #50	; 0x32
    3128:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    312a:	3b31      	subs	r3, #49	; 0x31
    312c:	8363      	strh	r3, [r4, #26]
    312e:	e7e5      	b.n	30fc <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    3130:	06da      	lsls	r2, r3, #27
    3132:	d505      	bpl.n	3140 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    3134:	2242      	movs	r2, #66	; 0x42
    3136:	2332      	movs	r3, #50	; 0x32
    3138:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    313a:	3b22      	subs	r3, #34	; 0x22
    313c:	8363      	strh	r3, [r4, #26]
    313e:	e7dd      	b.n	30fc <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    3140:	2220      	movs	r2, #32
    3142:	421a      	tst	r2, r3
    3144:	d0da      	beq.n	30fc <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3146:	3221      	adds	r2, #33	; 0x21
    3148:	2332      	movs	r3, #50	; 0x32
    314a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    314c:	3b12      	subs	r3, #18
    314e:	8363      	strh	r3, [r4, #26]
    3150:	e7d4      	b.n	30fc <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3152:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3154:	05db      	lsls	r3, r3, #23
    3156:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3158:	b2da      	uxtb	r2, r3
    315a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    315c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    315e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3160:	1c51      	adds	r1, r2, #1
    3162:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3164:	7969      	ldrb	r1, [r5, #5]
    3166:	2901      	cmp	r1, #1
    3168:	d010      	beq.n	318c <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    316a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    316c:	3b01      	subs	r3, #1
    316e:	b29b      	uxth	r3, r3
    3170:	85ab      	strh	r3, [r5, #44]	; 0x2c
    3172:	2b00      	cmp	r3, #0
    3174:	d112      	bne.n	319c <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3176:	3304      	adds	r3, #4
    3178:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    317a:	2200      	movs	r2, #0
    317c:	332e      	adds	r3, #46	; 0x2e
    317e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    3180:	07bb      	lsls	r3, r7, #30
    3182:	d50b      	bpl.n	319c <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3184:	0028      	movs	r0, r5
    3186:	692b      	ldr	r3, [r5, #16]
    3188:	4798      	blx	r3
    318a:	e007      	b.n	319c <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    318c:	0a1b      	lsrs	r3, r3, #8
    318e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    3190:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3192:	3301      	adds	r3, #1
    3194:	626b      	str	r3, [r5, #36]	; 0x24
    3196:	e7e8      	b.n	316a <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3198:	2304      	movs	r3, #4
    319a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    319c:	06f3      	lsls	r3, r6, #27
    319e:	d504      	bpl.n	31aa <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    31a0:	2310      	movs	r3, #16
    31a2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    31a4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    31a6:	06fb      	lsls	r3, r7, #27
    31a8:	d410      	bmi.n	31cc <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    31aa:	06b3      	lsls	r3, r6, #26
    31ac:	d504      	bpl.n	31b8 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    31ae:	2320      	movs	r3, #32
    31b0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    31b2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    31b4:	073b      	lsls	r3, r7, #28
    31b6:	d40d      	bmi.n	31d4 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    31b8:	0733      	lsls	r3, r6, #28
    31ba:	d504      	bpl.n	31c6 <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    31bc:	2308      	movs	r3, #8
    31be:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    31c0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    31c2:	06bb      	lsls	r3, r7, #26
    31c4:	d40a      	bmi.n	31dc <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    31c6:	bc04      	pop	{r2}
    31c8:	4690      	mov	r8, r2
    31ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    31cc:	0028      	movs	r0, r5
    31ce:	69eb      	ldr	r3, [r5, #28]
    31d0:	4798      	blx	r3
    31d2:	e7ea      	b.n	31aa <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    31d4:	0028      	movs	r0, r5
    31d6:	69ab      	ldr	r3, [r5, #24]
    31d8:	4798      	blx	r3
    31da:	e7ed      	b.n	31b8 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    31dc:	6a2b      	ldr	r3, [r5, #32]
    31de:	0028      	movs	r0, r5
    31e0:	4798      	blx	r3
}
    31e2:	e7f0      	b.n	31c6 <_usart_interrupt_handler+0x17e>
    31e4:	20000a0c 	.word	0x20000a0c

000031e8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    31e8:	4770      	bx	lr
	...

000031ec <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    31ec:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    31ee:	4b0b      	ldr	r3, [pc, #44]	; (321c <_sercom_set_handler+0x30>)
    31f0:	781b      	ldrb	r3, [r3, #0]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d008      	beq.n	3208 <_sercom_set_handler+0x1c>
    31f6:	e00c      	b.n	3212 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    31f8:	009a      	lsls	r2, r3, #2
    31fa:	4d09      	ldr	r5, [pc, #36]	; (3220 <_sercom_set_handler+0x34>)
    31fc:	4c09      	ldr	r4, [pc, #36]	; (3224 <_sercom_set_handler+0x38>)
    31fe:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    3200:	2500      	movs	r5, #0
    3202:	4c09      	ldr	r4, [pc, #36]	; (3228 <_sercom_set_handler+0x3c>)
    3204:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3206:	3301      	adds	r3, #1
    3208:	2b05      	cmp	r3, #5
    320a:	d9f5      	bls.n	31f8 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    320c:	2201      	movs	r2, #1
    320e:	4b03      	ldr	r3, [pc, #12]	; (321c <_sercom_set_handler+0x30>)
    3210:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3212:	0080      	lsls	r0, r0, #2
    3214:	4b03      	ldr	r3, [pc, #12]	; (3224 <_sercom_set_handler+0x38>)
    3216:	50c1      	str	r1, [r0, r3]
}
    3218:	bd30      	pop	{r4, r5, pc}
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	200003b1 	.word	0x200003b1
    3220:	000031e9 	.word	0x000031e9
    3224:	200003b4 	.word	0x200003b4
    3228:	20000a0c 	.word	0x20000a0c

0000322c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    322c:	b500      	push	{lr}
    322e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3230:	4b05      	ldr	r3, [pc, #20]	; (3248 <_sercom_get_interrupt_vector+0x1c>)
    3232:	681a      	ldr	r2, [r3, #0]
    3234:	9200      	str	r2, [sp, #0]
    3236:	889b      	ldrh	r3, [r3, #4]
    3238:	466a      	mov	r2, sp
    323a:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    323c:	4b03      	ldr	r3, [pc, #12]	; (324c <_sercom_get_interrupt_vector+0x20>)
    323e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3240:	466b      	mov	r3, sp
    3242:	5618      	ldrsb	r0, [r3, r0]
}
    3244:	b003      	add	sp, #12
    3246:	bd00      	pop	{pc}
    3248:	00004a2c 	.word	0x00004a2c
    324c:	00000a21 	.word	0x00000a21

00003250 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3250:	b510      	push	{r4, lr}
    3252:	4b02      	ldr	r3, [pc, #8]	; (325c <SERCOM0_Handler+0xc>)
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	2000      	movs	r0, #0
    3258:	4798      	blx	r3
    325a:	bd10      	pop	{r4, pc}
    325c:	200003b4 	.word	0x200003b4

00003260 <SERCOM1_Handler>:
    3260:	b510      	push	{r4, lr}
    3262:	4b02      	ldr	r3, [pc, #8]	; (326c <SERCOM1_Handler+0xc>)
    3264:	685b      	ldr	r3, [r3, #4]
    3266:	2001      	movs	r0, #1
    3268:	4798      	blx	r3
    326a:	bd10      	pop	{r4, pc}
    326c:	200003b4 	.word	0x200003b4

00003270 <SERCOM2_Handler>:
    3270:	b510      	push	{r4, lr}
    3272:	4b02      	ldr	r3, [pc, #8]	; (327c <SERCOM2_Handler+0xc>)
    3274:	689b      	ldr	r3, [r3, #8]
    3276:	2002      	movs	r0, #2
    3278:	4798      	blx	r3
    327a:	bd10      	pop	{r4, pc}
    327c:	200003b4 	.word	0x200003b4

00003280 <SERCOM3_Handler>:
    3280:	b510      	push	{r4, lr}
    3282:	4b02      	ldr	r3, [pc, #8]	; (328c <SERCOM3_Handler+0xc>)
    3284:	68db      	ldr	r3, [r3, #12]
    3286:	2003      	movs	r0, #3
    3288:	4798      	blx	r3
    328a:	bd10      	pop	{r4, pc}
    328c:	200003b4 	.word	0x200003b4

00003290 <SERCOM4_Handler>:
    3290:	b510      	push	{r4, lr}
    3292:	4b02      	ldr	r3, [pc, #8]	; (329c <SERCOM4_Handler+0xc>)
    3294:	691b      	ldr	r3, [r3, #16]
    3296:	2004      	movs	r0, #4
    3298:	4798      	blx	r3
    329a:	bd10      	pop	{r4, pc}
    329c:	200003b4 	.word	0x200003b4

000032a0 <SERCOM5_Handler>:
    32a0:	b510      	push	{r4, lr}
    32a2:	4b02      	ldr	r3, [pc, #8]	; (32ac <SERCOM5_Handler+0xc>)
    32a4:	695b      	ldr	r3, [r3, #20]
    32a6:	2005      	movs	r0, #5
    32a8:	4798      	blx	r3
    32aa:	bd10      	pop	{r4, pc}
    32ac:	200003b4 	.word	0x200003b4

000032b0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    32b0:	b500      	push	{lr}
    32b2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    32b4:	ab01      	add	r3, sp, #4
    32b6:	2280      	movs	r2, #128	; 0x80
    32b8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    32ba:	780a      	ldrb	r2, [r1, #0]
    32bc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    32be:	784a      	ldrb	r2, [r1, #1]
    32c0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    32c2:	788a      	ldrb	r2, [r1, #2]
    32c4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    32c6:	0019      	movs	r1, r3
    32c8:	4b01      	ldr	r3, [pc, #4]	; (32d0 <port_pin_set_config+0x20>)
    32ca:	4798      	blx	r3
}
    32cc:	b003      	add	sp, #12
    32ce:	bd00      	pop	{pc}
    32d0:	000039e1 	.word	0x000039e1

000032d4 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    32d4:	4770      	bx	lr
	...

000032d8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    32d8:	4b0c      	ldr	r3, [pc, #48]	; (330c <cpu_irq_enter_critical+0x34>)
    32da:	681b      	ldr	r3, [r3, #0]
    32dc:	2b00      	cmp	r3, #0
    32de:	d106      	bne.n	32ee <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    32e0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    32e4:	2b00      	cmp	r3, #0
    32e6:	d007      	beq.n	32f8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    32e8:	2200      	movs	r2, #0
    32ea:	4b09      	ldr	r3, [pc, #36]	; (3310 <cpu_irq_enter_critical+0x38>)
    32ec:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    32ee:	4a07      	ldr	r2, [pc, #28]	; (330c <cpu_irq_enter_critical+0x34>)
    32f0:	6813      	ldr	r3, [r2, #0]
    32f2:	3301      	adds	r3, #1
    32f4:	6013      	str	r3, [r2, #0]
}
    32f6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    32f8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    32fa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    32fe:	2200      	movs	r2, #0
    3300:	4b04      	ldr	r3, [pc, #16]	; (3314 <cpu_irq_enter_critical+0x3c>)
    3302:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3304:	3201      	adds	r2, #1
    3306:	4b02      	ldr	r3, [pc, #8]	; (3310 <cpu_irq_enter_critical+0x38>)
    3308:	701a      	strb	r2, [r3, #0]
    330a:	e7f0      	b.n	32ee <cpu_irq_enter_critical+0x16>
    330c:	200003cc 	.word	0x200003cc
    3310:	200003d0 	.word	0x200003d0
    3314:	2000000b 	.word	0x2000000b

00003318 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3318:	4b08      	ldr	r3, [pc, #32]	; (333c <cpu_irq_leave_critical+0x24>)
    331a:	681a      	ldr	r2, [r3, #0]
    331c:	3a01      	subs	r2, #1
    331e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3320:	681b      	ldr	r3, [r3, #0]
    3322:	2b00      	cmp	r3, #0
    3324:	d109      	bne.n	333a <cpu_irq_leave_critical+0x22>
    3326:	4b06      	ldr	r3, [pc, #24]	; (3340 <cpu_irq_leave_critical+0x28>)
    3328:	781b      	ldrb	r3, [r3, #0]
    332a:	2b00      	cmp	r3, #0
    332c:	d005      	beq.n	333a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    332e:	2201      	movs	r2, #1
    3330:	4b04      	ldr	r3, [pc, #16]	; (3344 <cpu_irq_leave_critical+0x2c>)
    3332:	701a      	strb	r2, [r3, #0]
    3334:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3338:	b662      	cpsie	i
	}
}
    333a:	4770      	bx	lr
    333c:	200003cc 	.word	0x200003cc
    3340:	200003d0 	.word	0x200003d0
    3344:	2000000b 	.word	0x2000000b

00003348 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3348:	b510      	push	{r4, lr}
    334a:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    334c:	2201      	movs	r2, #1
    334e:	ab01      	add	r3, sp, #4
    3350:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3352:	2400      	movs	r4, #0
    3354:	e004      	b.n	3360 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3356:	b2e0      	uxtb	r0, r4
    3358:	a901      	add	r1, sp, #4
    335a:	4b03      	ldr	r3, [pc, #12]	; (3368 <_switch_peripheral_gclk+0x20>)
    335c:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    335e:	3401      	adds	r4, #1
    3360:	2c24      	cmp	r4, #36	; 0x24
    3362:	d9f8      	bls.n	3356 <_switch_peripheral_gclk+0xe>
	}
}
    3364:	b002      	add	sp, #8
    3366:	bd10      	pop	{r4, pc}
    3368:	000038a9 	.word	0x000038a9

0000336c <system_clock_source_get_hz>:
{
    336c:	b510      	push	{r4, lr}
	switch (clock_source) {
    336e:	2808      	cmp	r0, #8
    3370:	d834      	bhi.n	33dc <system_clock_source_get_hz+0x70>
    3372:	0080      	lsls	r0, r0, #2
    3374:	4b1c      	ldr	r3, [pc, #112]	; (33e8 <system_clock_source_get_hz+0x7c>)
    3376:	581b      	ldr	r3, [r3, r0]
    3378:	469f      	mov	pc, r3
		return 32768UL;
    337a:	2080      	movs	r0, #128	; 0x80
    337c:	0200      	lsls	r0, r0, #8
}
    337e:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    3380:	4b1a      	ldr	r3, [pc, #104]	; (33ec <system_clock_source_get_hz+0x80>)
    3382:	6918      	ldr	r0, [r3, #16]
    3384:	e7fb      	b.n	337e <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3386:	4b1a      	ldr	r3, [pc, #104]	; (33f0 <system_clock_source_get_hz+0x84>)
    3388:	6a1b      	ldr	r3, [r3, #32]
    338a:	059b      	lsls	r3, r3, #22
    338c:	0f9b      	lsrs	r3, r3, #30
    338e:	4819      	ldr	r0, [pc, #100]	; (33f4 <system_clock_source_get_hz+0x88>)
    3390:	40d8      	lsrs	r0, r3
    3392:	e7f4      	b.n	337e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    3394:	4b15      	ldr	r3, [pc, #84]	; (33ec <system_clock_source_get_hz+0x80>)
    3396:	6958      	ldr	r0, [r3, #20]
    3398:	e7f1      	b.n	337e <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    339a:	4b14      	ldr	r3, [pc, #80]	; (33ec <system_clock_source_get_hz+0x80>)
    339c:	681b      	ldr	r3, [r3, #0]
    339e:	079b      	lsls	r3, r3, #30
    33a0:	d51e      	bpl.n	33e0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    33a2:	4b13      	ldr	r3, [pc, #76]	; (33f0 <system_clock_source_get_hz+0x84>)
    33a4:	68db      	ldr	r3, [r3, #12]
    33a6:	06db      	lsls	r3, r3, #27
    33a8:	d5fb      	bpl.n	33a2 <system_clock_source_get_hz+0x36>
		switch(_system_clock_inst.dfll.control &
    33aa:	4b10      	ldr	r3, [pc, #64]	; (33ec <system_clock_source_get_hz+0x80>)
    33ac:	681a      	ldr	r2, [r3, #0]
    33ae:	2324      	movs	r3, #36	; 0x24
    33b0:	4013      	ands	r3, r2
    33b2:	2b04      	cmp	r3, #4
    33b4:	d001      	beq.n	33ba <system_clock_source_get_hz+0x4e>
			return 48000000UL;
    33b6:	4810      	ldr	r0, [pc, #64]	; (33f8 <system_clock_source_get_hz+0x8c>)
    33b8:	e7e1      	b.n	337e <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    33ba:	2000      	movs	r0, #0
    33bc:	4b0f      	ldr	r3, [pc, #60]	; (33fc <system_clock_source_get_hz+0x90>)
    33be:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    33c0:	4b0a      	ldr	r3, [pc, #40]	; (33ec <system_clock_source_get_hz+0x80>)
    33c2:	689b      	ldr	r3, [r3, #8]
    33c4:	041b      	lsls	r3, r3, #16
    33c6:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    33c8:	4358      	muls	r0, r3
    33ca:	e7d8      	b.n	337e <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    33cc:	2350      	movs	r3, #80	; 0x50
    33ce:	4a08      	ldr	r2, [pc, #32]	; (33f0 <system_clock_source_get_hz+0x84>)
    33d0:	5cd3      	ldrb	r3, [r2, r3]
    33d2:	075b      	lsls	r3, r3, #29
    33d4:	d506      	bpl.n	33e4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    33d6:	4b05      	ldr	r3, [pc, #20]	; (33ec <system_clock_source_get_hz+0x80>)
    33d8:	68d8      	ldr	r0, [r3, #12]
    33da:	e7d0      	b.n	337e <system_clock_source_get_hz+0x12>
		return 0;
    33dc:	2000      	movs	r0, #0
    33de:	e7ce      	b.n	337e <system_clock_source_get_hz+0x12>
			return 0;
    33e0:	2000      	movs	r0, #0
    33e2:	e7cc      	b.n	337e <system_clock_source_get_hz+0x12>
			return 0;
    33e4:	2000      	movs	r0, #0
    33e6:	e7ca      	b.n	337e <system_clock_source_get_hz+0x12>
    33e8:	00004a34 	.word	0x00004a34
    33ec:	200003d4 	.word	0x200003d4
    33f0:	40000800 	.word	0x40000800
    33f4:	007a1200 	.word	0x007a1200
    33f8:	02dc6c00 	.word	0x02dc6c00
    33fc:	000038c5 	.word	0x000038c5

00003400 <system_clock_source_osc8m_set_config>:
{
    3400:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3402:	4d0c      	ldr	r5, [pc, #48]	; (3434 <system_clock_source_osc8m_set_config+0x34>)
    3404:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    3406:	7802      	ldrb	r2, [r0, #0]
    3408:	2103      	movs	r1, #3
    340a:	400a      	ands	r2, r1
    340c:	0212      	lsls	r2, r2, #8
    340e:	490a      	ldr	r1, [pc, #40]	; (3438 <system_clock_source_osc8m_set_config+0x38>)
    3410:	4031      	ands	r1, r6
    3412:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    3414:	7882      	ldrb	r2, [r0, #2]
    3416:	2401      	movs	r4, #1
    3418:	4022      	ands	r2, r4
    341a:	01d2      	lsls	r2, r2, #7
    341c:	2380      	movs	r3, #128	; 0x80
    341e:	4399      	bics	r1, r3
    3420:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    3422:	7843      	ldrb	r3, [r0, #1]
    3424:	4023      	ands	r3, r4
    3426:	019b      	lsls	r3, r3, #6
    3428:	2140      	movs	r1, #64	; 0x40
    342a:	438a      	bics	r2, r1
    342c:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    342e:	622b      	str	r3, [r5, #32]
}
    3430:	bd70      	pop	{r4, r5, r6, pc}
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	40000800 	.word	0x40000800
    3438:	fffffcff 	.word	0xfffffcff

0000343c <system_clock_source_osc32k_set_config>:
{
    343c:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    343e:	4f15      	ldr	r7, [pc, #84]	; (3494 <system_clock_source_osc32k_set_config+0x58>)
    3440:	69be      	ldr	r6, [r7, #24]
	temp.bit.EN1K     = config->enable_1khz_output;
    3442:	7842      	ldrb	r2, [r0, #1]
    3444:	2301      	movs	r3, #1
    3446:	401a      	ands	r2, r3
    3448:	00d2      	lsls	r2, r2, #3
    344a:	2108      	movs	r1, #8
    344c:	438e      	bics	r6, r1
    344e:	4332      	orrs	r2, r6
	temp.bit.EN32K    = config->enable_32khz_output;
    3450:	7885      	ldrb	r5, [r0, #2]
    3452:	401d      	ands	r5, r3
    3454:	00ad      	lsls	r5, r5, #2
    3456:	3904      	subs	r1, #4
    3458:	438a      	bics	r2, r1
    345a:	4315      	orrs	r5, r2
	temp.bit.STARTUP  = config->startup_time;
    345c:	7801      	ldrb	r1, [r0, #0]
    345e:	2407      	movs	r4, #7
    3460:	400c      	ands	r4, r1
    3462:	0224      	lsls	r4, r4, #8
    3464:	490c      	ldr	r1, [pc, #48]	; (3498 <system_clock_source_osc32k_set_config+0x5c>)
    3466:	400d      	ands	r5, r1
    3468:	432c      	orrs	r4, r5
	temp.bit.ONDEMAND = config->on_demand;
    346a:	7901      	ldrb	r1, [r0, #4]
    346c:	4019      	ands	r1, r3
    346e:	01c9      	lsls	r1, r1, #7
    3470:	2280      	movs	r2, #128	; 0x80
    3472:	4394      	bics	r4, r2
    3474:	4321      	orrs	r1, r4
	temp.bit.RUNSTDBY = config->run_in_standby;
    3476:	78c2      	ldrb	r2, [r0, #3]
    3478:	401a      	ands	r2, r3
    347a:	0192      	lsls	r2, r2, #6
    347c:	2440      	movs	r4, #64	; 0x40
    347e:	43a1      	bics	r1, r4
    3480:	430a      	orrs	r2, r1
	temp.bit.WRTLOCK  = config->write_once;
    3482:	7941      	ldrb	r1, [r0, #5]
    3484:	400b      	ands	r3, r1
    3486:	031b      	lsls	r3, r3, #12
    3488:	4904      	ldr	r1, [pc, #16]	; (349c <system_clock_source_osc32k_set_config+0x60>)
    348a:	400a      	ands	r2, r1
    348c:	4313      	orrs	r3, r2
	SYSCTRL->OSC32K  = temp;
    348e:	61bb      	str	r3, [r7, #24]
}
    3490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3492:	46c0      	nop			; (mov r8, r8)
    3494:	40000800 	.word	0x40000800
    3498:	fffff8ff 	.word	0xfffff8ff
    349c:	ffffefff 	.word	0xffffefff

000034a0 <system_clock_source_enable>:
	switch (clock_source) {
    34a0:	2808      	cmp	r0, #8
    34a2:	d84a      	bhi.n	353a <system_clock_source_enable+0x9a>
    34a4:	0080      	lsls	r0, r0, #2
    34a6:	4b26      	ldr	r3, [pc, #152]	; (3540 <system_clock_source_enable+0xa0>)
    34a8:	581b      	ldr	r3, [r3, r0]
    34aa:	469f      	mov	pc, r3
		return STATUS_OK;
    34ac:	2000      	movs	r0, #0
}
    34ae:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    34b0:	4a24      	ldr	r2, [pc, #144]	; (3544 <system_clock_source_enable+0xa4>)
    34b2:	6a13      	ldr	r3, [r2, #32]
    34b4:	2102      	movs	r1, #2
    34b6:	430b      	orrs	r3, r1
    34b8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    34ba:	2000      	movs	r0, #0
    34bc:	e7f7      	b.n	34ae <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    34be:	4a21      	ldr	r2, [pc, #132]	; (3544 <system_clock_source_enable+0xa4>)
    34c0:	6993      	ldr	r3, [r2, #24]
    34c2:	2102      	movs	r1, #2
    34c4:	430b      	orrs	r3, r1
    34c6:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    34c8:	2000      	movs	r0, #0
		break;
    34ca:	e7f0      	b.n	34ae <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    34cc:	4a1d      	ldr	r2, [pc, #116]	; (3544 <system_clock_source_enable+0xa4>)
    34ce:	8a13      	ldrh	r3, [r2, #16]
    34d0:	2102      	movs	r1, #2
    34d2:	430b      	orrs	r3, r1
    34d4:	b29b      	uxth	r3, r3
    34d6:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    34d8:	2000      	movs	r0, #0
		break;
    34da:	e7e8      	b.n	34ae <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    34dc:	4a19      	ldr	r2, [pc, #100]	; (3544 <system_clock_source_enable+0xa4>)
    34de:	8a93      	ldrh	r3, [r2, #20]
    34e0:	2102      	movs	r1, #2
    34e2:	430b      	orrs	r3, r1
    34e4:	b29b      	uxth	r3, r3
    34e6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    34e8:	2000      	movs	r0, #0
		break;
    34ea:	e7e0      	b.n	34ae <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    34ec:	4916      	ldr	r1, [pc, #88]	; (3548 <system_clock_source_enable+0xa8>)
    34ee:	680b      	ldr	r3, [r1, #0]
    34f0:	2202      	movs	r2, #2
    34f2:	4313      	orrs	r3, r2
    34f4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    34f6:	4b13      	ldr	r3, [pc, #76]	; (3544 <system_clock_source_enable+0xa4>)
    34f8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    34fa:	4b12      	ldr	r3, [pc, #72]	; (3544 <system_clock_source_enable+0xa4>)
    34fc:	68db      	ldr	r3, [r3, #12]
    34fe:	06db      	lsls	r3, r3, #27
    3500:	d5fb      	bpl.n	34fa <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3502:	4a11      	ldr	r2, [pc, #68]	; (3548 <system_clock_source_enable+0xa8>)
    3504:	6891      	ldr	r1, [r2, #8]
    3506:	4b0f      	ldr	r3, [pc, #60]	; (3544 <system_clock_source_enable+0xa4>)
    3508:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    350a:	6852      	ldr	r2, [r2, #4]
    350c:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    350e:	2200      	movs	r2, #0
    3510:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3512:	4b0c      	ldr	r3, [pc, #48]	; (3544 <system_clock_source_enable+0xa4>)
    3514:	68db      	ldr	r3, [r3, #12]
    3516:	06db      	lsls	r3, r3, #27
    3518:	d5fb      	bpl.n	3512 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    351a:	4b0b      	ldr	r3, [pc, #44]	; (3548 <system_clock_source_enable+0xa8>)
    351c:	681b      	ldr	r3, [r3, #0]
    351e:	b29b      	uxth	r3, r3
    3520:	4a08      	ldr	r2, [pc, #32]	; (3544 <system_clock_source_enable+0xa4>)
    3522:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3524:	2000      	movs	r0, #0
    3526:	e7c2      	b.n	34ae <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3528:	4906      	ldr	r1, [pc, #24]	; (3544 <system_clock_source_enable+0xa4>)
    352a:	2244      	movs	r2, #68	; 0x44
    352c:	5c8b      	ldrb	r3, [r1, r2]
    352e:	2002      	movs	r0, #2
    3530:	4303      	orrs	r3, r0
    3532:	b2db      	uxtb	r3, r3
    3534:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3536:	2000      	movs	r0, #0
		break;
    3538:	e7b9      	b.n	34ae <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    353a:	2017      	movs	r0, #23
    353c:	e7b7      	b.n	34ae <system_clock_source_enable+0xe>
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	00004a58 	.word	0x00004a58
    3544:	40000800 	.word	0x40000800
    3548:	200003d4 	.word	0x200003d4

0000354c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    354c:	b5f0      	push	{r4, r5, r6, r7, lr}
    354e:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3550:	4c29      	ldr	r4, [pc, #164]	; (35f8 <system_clock_init+0xac>)
    3552:	23c2      	movs	r3, #194	; 0xc2
    3554:	00db      	lsls	r3, r3, #3
    3556:	60a3      	str	r3, [r4, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3558:	4b28      	ldr	r3, [pc, #160]	; (35fc <system_clock_init+0xb0>)
    355a:	6859      	ldr	r1, [r3, #4]
    355c:	221e      	movs	r2, #30
    355e:	4391      	bics	r1, r2
    3560:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3562:	4b27      	ldr	r3, [pc, #156]	; (3600 <system_clock_init+0xb4>)
    3564:	4798      	blx	r3


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    3566:	4b27      	ldr	r3, [pc, #156]	; (3604 <system_clock_init+0xb8>)
    3568:	6819      	ldr	r1, [r3, #0]
    356a:	0989      	lsrs	r1, r1, #6
	SYSCTRL->OSC32K.bit.CALIB =
    356c:	69a2      	ldr	r2, [r4, #24]
    356e:	237f      	movs	r3, #127	; 0x7f
    3570:	400b      	ands	r3, r1
    3572:	041b      	lsls	r3, r3, #16
    3574:	4924      	ldr	r1, [pc, #144]	; (3608 <system_clock_init+0xbc>)
    3576:	400a      	ands	r2, r1
    3578:	4313      	orrs	r3, r2
    357a:	61a3      	str	r3, [r4, #24]
	config->enable_1khz_output  = true;
    357c:	a804      	add	r0, sp, #16
    357e:	2501      	movs	r5, #1
    3580:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    3582:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    3584:	2400      	movs	r4, #0
    3586:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    3588:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    358a:	2307      	movs	r3, #7
    358c:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    358e:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    3590:	4b1e      	ldr	r3, [pc, #120]	; (360c <system_clock_init+0xc0>)
    3592:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    3594:	2004      	movs	r0, #4
    3596:	4e1e      	ldr	r6, [pc, #120]	; (3610 <system_clock_init+0xc4>)
    3598:	47b0      	blx	r6
	config->run_in_standby  = false;
    359a:	a803      	add	r0, sp, #12
    359c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    359e:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    35a0:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    35a2:	4b1c      	ldr	r3, [pc, #112]	; (3614 <system_clock_init+0xc8>)
    35a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    35a6:	2006      	movs	r0, #6
    35a8:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    35aa:	4b1b      	ldr	r3, [pc, #108]	; (3618 <system_clock_init+0xcc>)
    35ac:	4798      	blx	r3
	config->high_when_disabled = false;
    35ae:	466b      	mov	r3, sp
    35b0:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    35b2:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    35b4:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    35b6:	2304      	movs	r3, #4
    35b8:	466a      	mov	r2, sp
    35ba:	7013      	strb	r3, [r2, #0]
    35bc:	331c      	adds	r3, #28
    35be:	9301      	str	r3, [sp, #4]
    35c0:	4669      	mov	r1, sp
    35c2:	2002      	movs	r0, #2
    35c4:	4f15      	ldr	r7, [pc, #84]	; (361c <system_clock_init+0xd0>)
    35c6:	47b8      	blx	r7
    35c8:	2002      	movs	r0, #2
    35ca:	4e15      	ldr	r6, [pc, #84]	; (3620 <system_clock_init+0xd4>)
    35cc:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    35ce:	4b15      	ldr	r3, [pc, #84]	; (3624 <system_clock_init+0xd8>)
    35d0:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    35d2:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    35d4:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    35d6:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    35d8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    35da:	466b      	mov	r3, sp
    35dc:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    35de:	2306      	movs	r3, #6
    35e0:	466a      	mov	r2, sp
    35e2:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    35e4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    35e6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    35e8:	4669      	mov	r1, sp
    35ea:	2000      	movs	r0, #0
    35ec:	47b8      	blx	r7
    35ee:	2000      	movs	r0, #0
    35f0:	47b0      	blx	r6
#endif
}
    35f2:	b007      	add	sp, #28
    35f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35f6:	46c0      	nop			; (mov r8, r8)
    35f8:	40000800 	.word	0x40000800
    35fc:	41004000 	.word	0x41004000
    3600:	00003349 	.word	0x00003349
    3604:	00806024 	.word	0x00806024
    3608:	ff80ffff 	.word	0xff80ffff
    360c:	0000343d 	.word	0x0000343d
    3610:	000034a1 	.word	0x000034a1
    3614:	00003401 	.word	0x00003401
    3618:	00003629 	.word	0x00003629
    361c:	0000364d 	.word	0x0000364d
    3620:	0000371d 	.word	0x0000371d
    3624:	40000400 	.word	0x40000400

00003628 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3628:	4a06      	ldr	r2, [pc, #24]	; (3644 <system_gclk_init+0x1c>)
    362a:	6993      	ldr	r3, [r2, #24]
    362c:	2108      	movs	r1, #8
    362e:	430b      	orrs	r3, r1
    3630:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3632:	2201      	movs	r2, #1
    3634:	4b04      	ldr	r3, [pc, #16]	; (3648 <system_gclk_init+0x20>)
    3636:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3638:	4b03      	ldr	r3, [pc, #12]	; (3648 <system_gclk_init+0x20>)
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	07db      	lsls	r3, r3, #31
    363e:	d4fb      	bmi.n	3638 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    3640:	4770      	bx	lr
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	40000400 	.word	0x40000400
    3648:	40000c00 	.word	0x40000c00

0000364c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    364e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3650:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3652:	780c      	ldrb	r4, [r1, #0]
    3654:	0224      	lsls	r4, r4, #8
    3656:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3658:	784b      	ldrb	r3, [r1, #1]
    365a:	2b00      	cmp	r3, #0
    365c:	d002      	beq.n	3664 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    365e:	2380      	movs	r3, #128	; 0x80
    3660:	02db      	lsls	r3, r3, #11
    3662:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3664:	7a4b      	ldrb	r3, [r1, #9]
    3666:	2b00      	cmp	r3, #0
    3668:	d002      	beq.n	3670 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    366a:	2380      	movs	r3, #128	; 0x80
    366c:	031b      	lsls	r3, r3, #12
    366e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3670:	6848      	ldr	r0, [r1, #4]
    3672:	2801      	cmp	r0, #1
    3674:	d912      	bls.n	369c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3676:	1e43      	subs	r3, r0, #1
    3678:	4203      	tst	r3, r0
    367a:	d03d      	beq.n	36f8 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    367c:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    367e:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3680:	2380      	movs	r3, #128	; 0x80
    3682:	029b      	lsls	r3, r3, #10
    3684:	431c      	orrs	r4, r3
    3686:	e009      	b.n	369c <system_gclk_gen_set_config+0x50>
				div2_count++;
    3688:	3201      	adds	r2, #1
						mask <<= 1) {
    368a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    368c:	4283      	cmp	r3, r0
    368e:	d3fb      	bcc.n	3688 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3690:	0212      	lsls	r2, r2, #8
    3692:	4332      	orrs	r2, r6
    3694:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3696:	2380      	movs	r3, #128	; 0x80
    3698:	035b      	lsls	r3, r3, #13
    369a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    369c:	7a0b      	ldrb	r3, [r1, #8]
    369e:	2b00      	cmp	r3, #0
    36a0:	d002      	beq.n	36a8 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    36a2:	2380      	movs	r3, #128	; 0x80
    36a4:	039b      	lsls	r3, r3, #14
    36a6:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    36a8:	4b18      	ldr	r3, [pc, #96]	; (370c <system_gclk_gen_set_config+0xc0>)
    36aa:	785b      	ldrb	r3, [r3, #1]
    36ac:	b25b      	sxtb	r3, r3
    36ae:	2b00      	cmp	r3, #0
    36b0:	db25      	blt.n	36fe <system_gclk_gen_set_config+0xb2>
	return false;
    36b2:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    36b4:	2f00      	cmp	r7, #0
    36b6:	d1f7      	bne.n	36a8 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    36b8:	4b15      	ldr	r3, [pc, #84]	; (3710 <system_gclk_gen_set_config+0xc4>)
    36ba:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    36bc:	4b15      	ldr	r3, [pc, #84]	; (3714 <system_gclk_gen_set_config+0xc8>)
    36be:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    36c0:	4b12      	ldr	r3, [pc, #72]	; (370c <system_gclk_gen_set_config+0xc0>)
    36c2:	785b      	ldrb	r3, [r3, #1]
    36c4:	b25b      	sxtb	r3, r3
    36c6:	2b00      	cmp	r3, #0
    36c8:	db1b      	blt.n	3702 <system_gclk_gen_set_config+0xb6>
	return false;
    36ca:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    36cc:	2a00      	cmp	r2, #0
    36ce:	d1f7      	bne.n	36c0 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    36d0:	4b0e      	ldr	r3, [pc, #56]	; (370c <system_gclk_gen_set_config+0xc0>)
    36d2:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    36d4:	4b0d      	ldr	r3, [pc, #52]	; (370c <system_gclk_gen_set_config+0xc0>)
    36d6:	785b      	ldrb	r3, [r3, #1]
    36d8:	b25b      	sxtb	r3, r3
    36da:	2b00      	cmp	r3, #0
    36dc:	db13      	blt.n	3706 <system_gclk_gen_set_config+0xba>
	return false;
    36de:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    36e0:	2b00      	cmp	r3, #0
    36e2:	d1f7      	bne.n	36d4 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    36e4:	4a09      	ldr	r2, [pc, #36]	; (370c <system_gclk_gen_set_config+0xc0>)
    36e6:	6853      	ldr	r3, [r2, #4]
    36e8:	2180      	movs	r1, #128	; 0x80
    36ea:	0249      	lsls	r1, r1, #9
    36ec:	400b      	ands	r3, r1
    36ee:	431c      	orrs	r4, r3
    36f0:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    36f2:	4b09      	ldr	r3, [pc, #36]	; (3718 <system_gclk_gen_set_config+0xcc>)
    36f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    36f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36f8:	2302      	movs	r3, #2
    36fa:	2200      	movs	r2, #0
    36fc:	e7c6      	b.n	368c <system_gclk_gen_set_config+0x40>
		return true;
    36fe:	2701      	movs	r7, #1
    3700:	e7d8      	b.n	36b4 <system_gclk_gen_set_config+0x68>
    3702:	2201      	movs	r2, #1
    3704:	e7e2      	b.n	36cc <system_gclk_gen_set_config+0x80>
    3706:	2301      	movs	r3, #1
    3708:	e7ea      	b.n	36e0 <system_gclk_gen_set_config+0x94>
    370a:	46c0      	nop			; (mov r8, r8)
    370c:	40000c00 	.word	0x40000c00
    3710:	000032d9 	.word	0x000032d9
    3714:	40000c08 	.word	0x40000c08
    3718:	00003319 	.word	0x00003319

0000371c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    371c:	b570      	push	{r4, r5, r6, lr}
    371e:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3720:	4b10      	ldr	r3, [pc, #64]	; (3764 <system_gclk_gen_enable+0x48>)
    3722:	785b      	ldrb	r3, [r3, #1]
    3724:	b25b      	sxtb	r3, r3
    3726:	2b00      	cmp	r3, #0
    3728:	db17      	blt.n	375a <system_gclk_gen_enable+0x3e>
	return false;
    372a:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    372c:	2c00      	cmp	r4, #0
    372e:	d1f7      	bne.n	3720 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    3730:	4b0d      	ldr	r3, [pc, #52]	; (3768 <system_gclk_gen_enable+0x4c>)
    3732:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3734:	4b0d      	ldr	r3, [pc, #52]	; (376c <system_gclk_gen_enable+0x50>)
    3736:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3738:	4b0a      	ldr	r3, [pc, #40]	; (3764 <system_gclk_gen_enable+0x48>)
    373a:	785b      	ldrb	r3, [r3, #1]
    373c:	b25b      	sxtb	r3, r3
    373e:	2b00      	cmp	r3, #0
    3740:	db0d      	blt.n	375e <system_gclk_gen_enable+0x42>
	return false;
    3742:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    3744:	2b00      	cmp	r3, #0
    3746:	d1f7      	bne.n	3738 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3748:	4a06      	ldr	r2, [pc, #24]	; (3764 <system_gclk_gen_enable+0x48>)
    374a:	6851      	ldr	r1, [r2, #4]
    374c:	2380      	movs	r3, #128	; 0x80
    374e:	025b      	lsls	r3, r3, #9
    3750:	430b      	orrs	r3, r1
    3752:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3754:	4b06      	ldr	r3, [pc, #24]	; (3770 <system_gclk_gen_enable+0x54>)
    3756:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3758:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    375a:	2401      	movs	r4, #1
    375c:	e7e6      	b.n	372c <system_gclk_gen_enable+0x10>
    375e:	2301      	movs	r3, #1
    3760:	e7f0      	b.n	3744 <system_gclk_gen_enable+0x28>
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	40000c00 	.word	0x40000c00
    3768:	000032d9 	.word	0x000032d9
    376c:	40000c04 	.word	0x40000c04
    3770:	00003319 	.word	0x00003319

00003774 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3776:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3778:	4b22      	ldr	r3, [pc, #136]	; (3804 <system_gclk_gen_get_hz+0x90>)
    377a:	785b      	ldrb	r3, [r3, #1]
    377c:	b25b      	sxtb	r3, r3
    377e:	2b00      	cmp	r3, #0
    3780:	db34      	blt.n	37ec <system_gclk_gen_get_hz+0x78>
	return false;
    3782:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    3784:	2d00      	cmp	r5, #0
    3786:	d1f7      	bne.n	3778 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    3788:	4b1f      	ldr	r3, [pc, #124]	; (3808 <system_gclk_gen_get_hz+0x94>)
    378a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    378c:	4b1f      	ldr	r3, [pc, #124]	; (380c <system_gclk_gen_get_hz+0x98>)
    378e:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3790:	4b1c      	ldr	r3, [pc, #112]	; (3804 <system_gclk_gen_get_hz+0x90>)
    3792:	785b      	ldrb	r3, [r3, #1]
    3794:	b25b      	sxtb	r3, r3
    3796:	2b00      	cmp	r3, #0
    3798:	db2a      	blt.n	37f0 <system_gclk_gen_get_hz+0x7c>
	return false;
    379a:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    379c:	2c00      	cmp	r4, #0
    379e:	d1f7      	bne.n	3790 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    37a0:	4e18      	ldr	r6, [pc, #96]	; (3804 <system_gclk_gen_get_hz+0x90>)
    37a2:	6870      	ldr	r0, [r6, #4]
    37a4:	04c0      	lsls	r0, r0, #19
    37a6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    37a8:	4b19      	ldr	r3, [pc, #100]	; (3810 <system_gclk_gen_get_hz+0x9c>)
    37aa:	4798      	blx	r3
    37ac:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    37ae:	4b17      	ldr	r3, [pc, #92]	; (380c <system_gclk_gen_get_hz+0x98>)
    37b0:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    37b2:	6876      	ldr	r6, [r6, #4]
    37b4:	02f6      	lsls	r6, r6, #11
    37b6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    37b8:	4b16      	ldr	r3, [pc, #88]	; (3814 <system_gclk_gen_get_hz+0xa0>)
    37ba:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    37bc:	4b11      	ldr	r3, [pc, #68]	; (3804 <system_gclk_gen_get_hz+0x90>)
    37be:	785b      	ldrb	r3, [r3, #1]
    37c0:	b25b      	sxtb	r3, r3
    37c2:	2b00      	cmp	r3, #0
    37c4:	db16      	blt.n	37f4 <system_gclk_gen_get_hz+0x80>
	return false;
    37c6:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    37c8:	2b00      	cmp	r3, #0
    37ca:	d1f7      	bne.n	37bc <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    37cc:	4b0d      	ldr	r3, [pc, #52]	; (3804 <system_gclk_gen_get_hz+0x90>)
    37ce:	689c      	ldr	r4, [r3, #8]
    37d0:	0224      	lsls	r4, r4, #8
    37d2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    37d4:	4b10      	ldr	r3, [pc, #64]	; (3818 <system_gclk_gen_get_hz+0xa4>)
    37d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    37d8:	2e00      	cmp	r6, #0
    37da:	d10d      	bne.n	37f8 <system_gclk_gen_get_hz+0x84>
    37dc:	2c01      	cmp	r4, #1
    37de:	d90b      	bls.n	37f8 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    37e0:	0021      	movs	r1, r4
    37e2:	0028      	movs	r0, r5
    37e4:	4b0d      	ldr	r3, [pc, #52]	; (381c <system_gclk_gen_get_hz+0xa8>)
    37e6:	4798      	blx	r3
    37e8:	0005      	movs	r5, r0
    37ea:	e009      	b.n	3800 <system_gclk_gen_get_hz+0x8c>
		return true;
    37ec:	2501      	movs	r5, #1
    37ee:	e7c9      	b.n	3784 <system_gclk_gen_get_hz+0x10>
    37f0:	2401      	movs	r4, #1
    37f2:	e7d3      	b.n	379c <system_gclk_gen_get_hz+0x28>
    37f4:	2301      	movs	r3, #1
    37f6:	e7e7      	b.n	37c8 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    37f8:	2e00      	cmp	r6, #0
    37fa:	d001      	beq.n	3800 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    37fc:	3401      	adds	r4, #1
    37fe:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3800:	0028      	movs	r0, r5
    3802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3804:	40000c00 	.word	0x40000c00
    3808:	000032d9 	.word	0x000032d9
    380c:	40000c04 	.word	0x40000c04
    3810:	0000336d 	.word	0x0000336d
    3814:	40000c08 	.word	0x40000c08
    3818:	00003319 	.word	0x00003319
    381c:	00003f2d 	.word	0x00003f2d

00003820 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3820:	b510      	push	{r4, lr}
    3822:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3824:	4b06      	ldr	r3, [pc, #24]	; (3840 <system_gclk_chan_enable+0x20>)
    3826:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3828:	4b06      	ldr	r3, [pc, #24]	; (3844 <system_gclk_chan_enable+0x24>)
    382a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    382c:	4a06      	ldr	r2, [pc, #24]	; (3848 <system_gclk_chan_enable+0x28>)
    382e:	8853      	ldrh	r3, [r2, #2]
    3830:	2180      	movs	r1, #128	; 0x80
    3832:	01c9      	lsls	r1, r1, #7
    3834:	430b      	orrs	r3, r1
    3836:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3838:	4b04      	ldr	r3, [pc, #16]	; (384c <system_gclk_chan_enable+0x2c>)
    383a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    383c:	bd10      	pop	{r4, pc}
    383e:	46c0      	nop			; (mov r8, r8)
    3840:	000032d9 	.word	0x000032d9
    3844:	40000c02 	.word	0x40000c02
    3848:	40000c00 	.word	0x40000c00
    384c:	00003319 	.word	0x00003319

00003850 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3850:	b510      	push	{r4, lr}
    3852:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3854:	4b0e      	ldr	r3, [pc, #56]	; (3890 <system_gclk_chan_disable+0x40>)
    3856:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3858:	4b0e      	ldr	r3, [pc, #56]	; (3894 <system_gclk_chan_disable+0x44>)
    385a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    385c:	490e      	ldr	r1, [pc, #56]	; (3898 <system_gclk_chan_disable+0x48>)
    385e:	884b      	ldrh	r3, [r1, #2]
    3860:	051b      	lsls	r3, r3, #20
    3862:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3864:	884b      	ldrh	r3, [r1, #2]
    3866:	480d      	ldr	r0, [pc, #52]	; (389c <system_gclk_chan_disable+0x4c>)
    3868:	4003      	ands	r3, r0
    386a:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    386c:	884b      	ldrh	r3, [r1, #2]
    386e:	480c      	ldr	r0, [pc, #48]	; (38a0 <system_gclk_chan_disable+0x50>)
    3870:	4003      	ands	r3, r0
    3872:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3874:	4b08      	ldr	r3, [pc, #32]	; (3898 <system_gclk_chan_disable+0x48>)
    3876:	885b      	ldrh	r3, [r3, #2]
    3878:	045b      	lsls	r3, r3, #17
    387a:	d4fb      	bmi.n	3874 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    387c:	4806      	ldr	r0, [pc, #24]	; (3898 <system_gclk_chan_disable+0x48>)
    387e:	8841      	ldrh	r1, [r0, #2]
    3880:	0213      	lsls	r3, r2, #8
    3882:	4a06      	ldr	r2, [pc, #24]	; (389c <system_gclk_chan_disable+0x4c>)
    3884:	400a      	ands	r2, r1
    3886:	4313      	orrs	r3, r2
    3888:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    388a:	4b06      	ldr	r3, [pc, #24]	; (38a4 <system_gclk_chan_disable+0x54>)
    388c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    388e:	bd10      	pop	{r4, pc}
    3890:	000032d9 	.word	0x000032d9
    3894:	40000c02 	.word	0x40000c02
    3898:	40000c00 	.word	0x40000c00
    389c:	fffff0ff 	.word	0xfffff0ff
    38a0:	ffffbfff 	.word	0xffffbfff
    38a4:	00003319 	.word	0x00003319

000038a8 <system_gclk_chan_set_config>:
{
    38a8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    38aa:	780c      	ldrb	r4, [r1, #0]
    38ac:	0224      	lsls	r4, r4, #8
    38ae:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    38b0:	4b02      	ldr	r3, [pc, #8]	; (38bc <system_gclk_chan_set_config+0x14>)
    38b2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    38b4:	b2a4      	uxth	r4, r4
    38b6:	4b02      	ldr	r3, [pc, #8]	; (38c0 <system_gclk_chan_set_config+0x18>)
    38b8:	805c      	strh	r4, [r3, #2]
}
    38ba:	bd10      	pop	{r4, pc}
    38bc:	00003851 	.word	0x00003851
    38c0:	40000c00 	.word	0x40000c00

000038c4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    38c4:	b510      	push	{r4, lr}
    38c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    38c8:	4b06      	ldr	r3, [pc, #24]	; (38e4 <system_gclk_chan_get_hz+0x20>)
    38ca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    38cc:	4b06      	ldr	r3, [pc, #24]	; (38e8 <system_gclk_chan_get_hz+0x24>)
    38ce:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    38d0:	4b06      	ldr	r3, [pc, #24]	; (38ec <system_gclk_chan_get_hz+0x28>)
    38d2:	885c      	ldrh	r4, [r3, #2]
    38d4:	0524      	lsls	r4, r4, #20
    38d6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    38d8:	4b05      	ldr	r3, [pc, #20]	; (38f0 <system_gclk_chan_get_hz+0x2c>)
    38da:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    38dc:	0020      	movs	r0, r4
    38de:	4b05      	ldr	r3, [pc, #20]	; (38f4 <system_gclk_chan_get_hz+0x30>)
    38e0:	4798      	blx	r3
}
    38e2:	bd10      	pop	{r4, pc}
    38e4:	000032d9 	.word	0x000032d9
    38e8:	40000c02 	.word	0x40000c02
    38ec:	40000c00 	.word	0x40000c00
    38f0:	00003319 	.word	0x00003319
    38f4:	00003775 	.word	0x00003775

000038f8 <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    38f8:	b530      	push	{r4, r5, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    38fa:	2800      	cmp	r0, #0
    38fc:	db19      	blt.n	3932 <system_interrupt_set_priority+0x3a>
		uint8_t register_num = vector / 4;
    38fe:	17c3      	asrs	r3, r0, #31
    3900:	2403      	movs	r4, #3
    3902:	0022      	movs	r2, r4
    3904:	401a      	ands	r2, r3
    3906:	1812      	adds	r2, r2, r0
    3908:	1092      	asrs	r2, r2, #2
    390a:	b2d2      	uxtb	r2, r2
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    390c:	0f9b      	lsrs	r3, r3, #30
    390e:	18c0      	adds	r0, r0, r3
    3910:	4020      	ands	r0, r4
    3912:	1ac3      	subs	r3, r0, r3
    3914:	00db      	lsls	r3, r3, #3
    3916:	b2db      	uxtb	r3, r3
    3918:	3306      	adds	r3, #6
    391a:	b2db      	uxtb	r3, r3

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    391c:	4d09      	ldr	r5, [pc, #36]	; (3944 <system_interrupt_set_priority+0x4c>)
    391e:	32c0      	adds	r2, #192	; 0xc0
    3920:	0092      	lsls	r2, r2, #2
    3922:	5950      	ldr	r0, [r2, r5]
    3924:	409c      	lsls	r4, r3
    3926:	43a0      	bics	r0, r4
				(priority_level << priority_pos);
    3928:	4099      	lsls	r1, r3
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    392a:	4301      	orrs	r1, r0
		NVIC->IP[register_num] =
    392c:	5151      	str	r1, [r2, r5]
	enum status_code status = STATUS_OK;
    392e:	2000      	movs	r0, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    3930:	bd30      	pop	{r4, r5, pc}
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    3932:	1c43      	adds	r3, r0, #1
    3934:	d001      	beq.n	393a <system_interrupt_set_priority+0x42>
		status = STATUS_ERR_INVALID_ARG;
    3936:	2017      	movs	r0, #23
    3938:	e7fa      	b.n	3930 <system_interrupt_set_priority+0x38>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    393a:	0789      	lsls	r1, r1, #30
    393c:	4b02      	ldr	r3, [pc, #8]	; (3948 <system_interrupt_set_priority+0x50>)
    393e:	6219      	str	r1, [r3, #32]
	enum status_code status = STATUS_OK;
    3940:	2000      	movs	r0, #0
    3942:	e7f5      	b.n	3930 <system_interrupt_set_priority+0x38>
    3944:	e000e100 	.word	0xe000e100
    3948:	e000ed00 	.word	0xe000ed00

0000394c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    394c:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    394e:	78d3      	ldrb	r3, [r2, #3]
    3950:	2b00      	cmp	r3, #0
    3952:	d120      	bne.n	3996 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3954:	7815      	ldrb	r5, [r2, #0]
    3956:	2d80      	cmp	r5, #128	; 0x80
    3958:	d01b      	beq.n	3992 <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    395a:	062d      	lsls	r5, r5, #24
    395c:	2380      	movs	r3, #128	; 0x80
    395e:	025b      	lsls	r3, r3, #9
    3960:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3962:	7853      	ldrb	r3, [r2, #1]
    3964:	2b00      	cmp	r3, #0
    3966:	d001      	beq.n	396c <_system_pinmux_config+0x20>
    3968:	2b02      	cmp	r3, #2
    396a:	d10a      	bne.n	3982 <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    396c:	2380      	movs	r3, #128	; 0x80
    396e:	029b      	lsls	r3, r3, #10
    3970:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3972:	7894      	ldrb	r4, [r2, #2]
    3974:	2c00      	cmp	r4, #0
    3976:	d002      	beq.n	397e <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3978:	23c0      	movs	r3, #192	; 0xc0
    397a:	02db      	lsls	r3, r3, #11
    397c:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    397e:	6041      	str	r1, [r0, #4]
    3980:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3982:	7853      	ldrb	r3, [r2, #1]
    3984:	3b01      	subs	r3, #1
    3986:	b2db      	uxtb	r3, r3
    3988:	2b01      	cmp	r3, #1
    398a:	d806      	bhi.n	399a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    398c:	4b13      	ldr	r3, [pc, #76]	; (39dc <_system_pinmux_config+0x90>)
    398e:	401d      	ands	r5, r3
    3990:	e003      	b.n	399a <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    3992:	2500      	movs	r5, #0
    3994:	e7e5      	b.n	3962 <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3996:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    3998:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    399a:	040c      	lsls	r4, r1, #16
    399c:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    399e:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39a0:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    39a2:	26a0      	movs	r6, #160	; 0xa0
    39a4:	05f6      	lsls	r6, r6, #23
    39a6:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39a8:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39aa:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    39ac:	24d0      	movs	r4, #208	; 0xd0
    39ae:	0624      	lsls	r4, r4, #24
    39b0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39b2:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    39b4:	78d3      	ldrb	r3, [r2, #3]
    39b6:	2b00      	cmp	r3, #0
    39b8:	d10a      	bne.n	39d0 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    39ba:	036b      	lsls	r3, r5, #13
    39bc:	d503      	bpl.n	39c6 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    39be:	7893      	ldrb	r3, [r2, #2]
    39c0:	2b01      	cmp	r3, #1
    39c2:	d006      	beq.n	39d2 <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    39c4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    39c6:	7853      	ldrb	r3, [r2, #1]
    39c8:	3b01      	subs	r3, #1
    39ca:	b2db      	uxtb	r3, r3
    39cc:	2b01      	cmp	r3, #1
    39ce:	d902      	bls.n	39d6 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    39d0:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    39d2:	6181      	str	r1, [r0, #24]
    39d4:	e7f7      	b.n	39c6 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    39d6:	6081      	str	r1, [r0, #8]
}
    39d8:	e7fa      	b.n	39d0 <_system_pinmux_config+0x84>
    39da:	46c0      	nop			; (mov r8, r8)
    39dc:	fffbffff 	.word	0xfffbffff

000039e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    39e0:	b510      	push	{r4, lr}
    39e2:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    39e4:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    39e6:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    39e8:	2900      	cmp	r1, #0
    39ea:	d10b      	bne.n	3a04 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    39ec:	01db      	lsls	r3, r3, #7
    39ee:	4906      	ldr	r1, [pc, #24]	; (3a08 <system_pinmux_pin_set_config+0x28>)
    39f0:	468c      	mov	ip, r1
    39f2:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    39f4:	241f      	movs	r4, #31
    39f6:	4020      	ands	r0, r4
    39f8:	2101      	movs	r1, #1
    39fa:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    39fc:	0018      	movs	r0, r3
    39fe:	4b03      	ldr	r3, [pc, #12]	; (3a0c <system_pinmux_pin_set_config+0x2c>)
    3a00:	4798      	blx	r3
}
    3a02:	bd10      	pop	{r4, pc}
		return NULL;
    3a04:	2300      	movs	r3, #0
    3a06:	e7f5      	b.n	39f4 <system_pinmux_pin_set_config+0x14>
    3a08:	41004400 	.word	0x41004400
    3a0c:	0000394d 	.word	0x0000394d

00003a10 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3a10:	4770      	bx	lr
	...

00003a14 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3a14:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3a16:	4b05      	ldr	r3, [pc, #20]	; (3a2c <system_init+0x18>)
    3a18:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3a1a:	4b05      	ldr	r3, [pc, #20]	; (3a30 <system_init+0x1c>)
    3a1c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3a1e:	4b05      	ldr	r3, [pc, #20]	; (3a34 <system_init+0x20>)
    3a20:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3a22:	4b05      	ldr	r3, [pc, #20]	; (3a38 <system_init+0x24>)
    3a24:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3a26:	4b05      	ldr	r3, [pc, #20]	; (3a3c <system_init+0x28>)
    3a28:	4798      	blx	r3
}
    3a2a:	bd10      	pop	{r4, pc}
    3a2c:	0000354d 	.word	0x0000354d
    3a30:	000032d5 	.word	0x000032d5
    3a34:	00003a11 	.word	0x00003a11
    3a38:	0000032d 	.word	0x0000032d
    3a3c:	00003a11 	.word	0x00003a11

00003a40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3a40:	e7fe      	b.n	3a40 <Dummy_Handler>
	...

00003a44 <Reset_Handler>:
{
    3a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3a46:	4a23      	ldr	r2, [pc, #140]	; (3ad4 <Reset_Handler+0x90>)
    3a48:	4b23      	ldr	r3, [pc, #140]	; (3ad8 <Reset_Handler+0x94>)
    3a4a:	429a      	cmp	r2, r3
    3a4c:	d009      	beq.n	3a62 <Reset_Handler+0x1e>
    3a4e:	4b22      	ldr	r3, [pc, #136]	; (3ad8 <Reset_Handler+0x94>)
    3a50:	4a20      	ldr	r2, [pc, #128]	; (3ad4 <Reset_Handler+0x90>)
    3a52:	e003      	b.n	3a5c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    3a54:	6811      	ldr	r1, [r2, #0]
    3a56:	6019      	str	r1, [r3, #0]
    3a58:	3304      	adds	r3, #4
    3a5a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3a5c:	491f      	ldr	r1, [pc, #124]	; (3adc <Reset_Handler+0x98>)
    3a5e:	428b      	cmp	r3, r1
    3a60:	d3f8      	bcc.n	3a54 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    3a62:	4b1f      	ldr	r3, [pc, #124]	; (3ae0 <Reset_Handler+0x9c>)
    3a64:	e002      	b.n	3a6c <Reset_Handler+0x28>
                *pDest++ = 0;
    3a66:	2200      	movs	r2, #0
    3a68:	601a      	str	r2, [r3, #0]
    3a6a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    3a6c:	4a1d      	ldr	r2, [pc, #116]	; (3ae4 <Reset_Handler+0xa0>)
    3a6e:	4293      	cmp	r3, r2
    3a70:	d3f9      	bcc.n	3a66 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3a72:	4a1d      	ldr	r2, [pc, #116]	; (3ae8 <Reset_Handler+0xa4>)
    3a74:	21ff      	movs	r1, #255	; 0xff
    3a76:	4b1d      	ldr	r3, [pc, #116]	; (3aec <Reset_Handler+0xa8>)
    3a78:	438b      	bics	r3, r1
    3a7a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3a7c:	39fd      	subs	r1, #253	; 0xfd
    3a7e:	2390      	movs	r3, #144	; 0x90
    3a80:	005b      	lsls	r3, r3, #1
    3a82:	4a1b      	ldr	r2, [pc, #108]	; (3af0 <Reset_Handler+0xac>)
    3a84:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3a86:	4a1b      	ldr	r2, [pc, #108]	; (3af4 <Reset_Handler+0xb0>)
    3a88:	78d3      	ldrb	r3, [r2, #3]
    3a8a:	2503      	movs	r5, #3
    3a8c:	43ab      	bics	r3, r5
    3a8e:	2402      	movs	r4, #2
    3a90:	4323      	orrs	r3, r4
    3a92:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3a94:	78d3      	ldrb	r3, [r2, #3]
    3a96:	270c      	movs	r7, #12
    3a98:	43bb      	bics	r3, r7
    3a9a:	2608      	movs	r6, #8
    3a9c:	4333      	orrs	r3, r6
    3a9e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3aa0:	4b15      	ldr	r3, [pc, #84]	; (3af8 <Reset_Handler+0xb4>)
    3aa2:	7b98      	ldrb	r0, [r3, #14]
    3aa4:	2230      	movs	r2, #48	; 0x30
    3aa6:	4390      	bics	r0, r2
    3aa8:	2220      	movs	r2, #32
    3aaa:	4310      	orrs	r0, r2
    3aac:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3aae:	7b99      	ldrb	r1, [r3, #14]
    3ab0:	43b9      	bics	r1, r7
    3ab2:	4331      	orrs	r1, r6
    3ab4:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3ab6:	7b9a      	ldrb	r2, [r3, #14]
    3ab8:	43aa      	bics	r2, r5
    3aba:	4322      	orrs	r2, r4
    3abc:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3abe:	4a0f      	ldr	r2, [pc, #60]	; (3afc <Reset_Handler+0xb8>)
    3ac0:	6851      	ldr	r1, [r2, #4]
    3ac2:	2380      	movs	r3, #128	; 0x80
    3ac4:	430b      	orrs	r3, r1
    3ac6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3ac8:	4b0d      	ldr	r3, [pc, #52]	; (3b00 <Reset_Handler+0xbc>)
    3aca:	4798      	blx	r3
        main();
    3acc:	4b0d      	ldr	r3, [pc, #52]	; (3b04 <Reset_Handler+0xc0>)
    3ace:	4798      	blx	r3
    3ad0:	e7fe      	b.n	3ad0 <Reset_Handler+0x8c>
    3ad2:	46c0      	nop			; (mov r8, r8)
    3ad4:	00004b08 	.word	0x00004b08
    3ad8:	20000000 	.word	0x20000000
    3adc:	20000074 	.word	0x20000074
    3ae0:	20000074 	.word	0x20000074
    3ae4:	20000a40 	.word	0x20000a40
    3ae8:	e000ed00 	.word	0xe000ed00
    3aec:	00000000 	.word	0x00000000
    3af0:	41007000 	.word	0x41007000
    3af4:	41005000 	.word	0x41005000
    3af8:	41004800 	.word	0x41004800
    3afc:	41004000 	.word	0x41004000
    3b00:	00004099 	.word	0x00004099
    3b04:	00003c41 	.word	0x00003c41

00003b08 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3b08:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3b0a:	4a06      	ldr	r2, [pc, #24]	; (3b24 <_sbrk+0x1c>)
    3b0c:	6812      	ldr	r2, [r2, #0]
    3b0e:	2a00      	cmp	r2, #0
    3b10:	d004      	beq.n	3b1c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3b12:	4a04      	ldr	r2, [pc, #16]	; (3b24 <_sbrk+0x1c>)
    3b14:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3b16:	18c3      	adds	r3, r0, r3
    3b18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3b1a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3b1c:	4902      	ldr	r1, [pc, #8]	; (3b28 <_sbrk+0x20>)
    3b1e:	4a01      	ldr	r2, [pc, #4]	; (3b24 <_sbrk+0x1c>)
    3b20:	6011      	str	r1, [r2, #0]
    3b22:	e7f6      	b.n	3b12 <_sbrk+0xa>
    3b24:	200003ec 	.word	0x200003ec
    3b28:	20002a40 	.word	0x20002a40

00003b2c <clock_osc8m_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes the 8 MHz oscillator to be used as the
	*  system clock source.
	*/
void clock_osc8m_init(void){
    3b2c:	b500      	push	{lr}
    3b2e:	b083      	sub	sp, #12
	//create system clock config struct
	struct system_clock_source_osc8m_config osc8_config;

	//config the 8 MHz oscillator
	//divide by 1 = 8 MHz clock
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    3b30:	a801      	add	r0, sp, #4
    3b32:	2300      	movs	r3, #0
    3b34:	7003      	strb	r3, [r0, #0]
	//run on demand
	osc8_config.on_demand = true;
    3b36:	2201      	movs	r2, #1
    3b38:	7082      	strb	r2, [r0, #2]
	//don't run in standby
	osc8_config.run_in_standby = false;
    3b3a:	7043      	strb	r3, [r0, #1]
	    
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    3b3c:	4b01      	ldr	r3, [pc, #4]	; (3b44 <clock_osc8m_init+0x18>)
    3b3e:	4798      	blx	r3
}//end clock_osc8m_init
    3b40:	b003      	add	sp, #12
    3b42:	bd00      	pop	{pc}
    3b44:	00003401 	.word	0x00003401

00003b48 <clock_gclk0_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes GCLK0, so it can be used by 
	*  peripherals. Uses the 8 MHz oscillator as its source.
	*/
void clock_gclk0_init(void){
    3b48:	b500      	push	{lr}
    3b4a:	b085      	sub	sp, #20
	//create GLCK0 config struct (for driving peripherals)
	struct system_gclk_gen_config gclk0_config;

	//init MCLK
	system_gclk_init();
    3b4c:	4b0a      	ldr	r3, [pc, #40]	; (3b78 <clock_gclk0_init+0x30>)
    3b4e:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    3b50:	2300      	movs	r3, #0
    3b52:	4a0a      	ldr	r2, [pc, #40]	; (3b7c <clock_gclk0_init+0x34>)
    3b54:	7213      	strb	r3, [r2, #8]
	    
	//set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	    
	//use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    3b56:	a901      	add	r1, sp, #4
    3b58:	2206      	movs	r2, #6
    3b5a:	700a      	strb	r2, [r1, #0]
	//don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    3b5c:	724b      	strb	r3, [r1, #9]
	//We're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    3b5e:	704b      	strb	r3, [r1, #1]
	//division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    3b60:	3a05      	subs	r2, #5
    3b62:	604a      	str	r2, [r1, #4]
	//don't run in standby
	gclk0_config.run_in_standby = false;
    3b64:	720b      	strb	r3, [r1, #8]
	//set GCLK0's config
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    3b66:	2000      	movs	r0, #0
    3b68:	4b05      	ldr	r3, [pc, #20]	; (3b80 <clock_gclk0_init+0x38>)
    3b6a:	4798      	blx	r3
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    3b6c:	2000      	movs	r0, #0
    3b6e:	4b05      	ldr	r3, [pc, #20]	; (3b84 <clock_gclk0_init+0x3c>)
    3b70:	4798      	blx	r3
}//end clock_gclk0_init
    3b72:	b005      	add	sp, #20
    3b74:	bd00      	pop	{pc}
    3b76:	46c0      	nop			; (mov r8, r8)
    3b78:	00003629 	.word	0x00003629
    3b7c:	40000400 	.word	0x40000400
    3b80:	0000364d 	.word	0x0000364d
    3b84:	0000371d 	.word	0x0000371d

00003b88 <sys_clock_init>:
void sys_clock_init(void){
    3b88:	b510      	push	{r4, lr}
	clock_osc8m_init();
    3b8a:	4b05      	ldr	r3, [pc, #20]	; (3ba0 <sys_clock_init+0x18>)
    3b8c:	4798      	blx	r3
	clock_gclk0_init();
    3b8e:	4b05      	ldr	r3, [pc, #20]	; (3ba4 <sys_clock_init+0x1c>)
    3b90:	4798      	blx	r3
	clock_osc32k_init();
    3b92:	4b05      	ldr	r3, [pc, #20]	; (3ba8 <sys_clock_init+0x20>)
    3b94:	4798      	blx	r3
	clock_gclk2_init();
    3b96:	4b05      	ldr	r3, [pc, #20]	; (3bac <sys_clock_init+0x24>)
    3b98:	4798      	blx	r3
	delay_init();
    3b9a:	4b05      	ldr	r3, [pc, #20]	; (3bb0 <sys_clock_init+0x28>)
    3b9c:	4798      	blx	r3
}//end sys_clock_init
    3b9e:	bd10      	pop	{r4, pc}
    3ba0:	00003b2d 	.word	0x00003b2d
    3ba4:	00003b49 	.word	0x00003b49
    3ba8:	000023a9 	.word	0x000023a9
    3bac:	000023d1 	.word	0x000023d1
    3bb0:	00000115 	.word	0x00000115

00003bb4 <configure_port_pins>:
/* Function Name    : configure_port_pins
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config select pins for lcd 
	*/
void configure_port_pins(void){
    3bb4:	b500      	push	{lr}
    3bb6:	b083      	sub	sp, #12
	config->powersave  = false;
    3bb8:	a901      	add	r1, sp, #4
    3bba:	2300      	movs	r3, #0
    3bbc:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);


	// configure outputs
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3bbe:	2201      	movs	r2, #1
    3bc0:	700a      	strb	r2, [r1, #0]
	config_port_pin.input_pull = LCD_PD_PULL;
    3bc2:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(LCD_PD, &config_port_pin);
    3bc4:	2008      	movs	r0, #8
    3bc6:	4b04      	ldr	r3, [pc, #16]	; (3bd8 <configure_port_pins+0x24>)
    3bc8:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3bca:	2280      	movs	r2, #128	; 0x80
    3bcc:	0052      	lsls	r2, r2, #1
    3bce:	4b03      	ldr	r3, [pc, #12]	; (3bdc <configure_port_pins+0x28>)
    3bd0:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB15, true);	
	
*/


}//end configure_port_pins
    3bd2:	b003      	add	sp, #12
    3bd4:	bd00      	pop	{pc}
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	000032b1 	.word	0x000032b1
    3bdc:	41004400 	.word	0x41004400

00003be0 <sim_system_init>:
void sim_system_init(void){
    3be0:	b510      	push	{r4, lr}
	system_init();
    3be2:	4b0c      	ldr	r3, [pc, #48]	; (3c14 <sim_system_init+0x34>)
    3be4:	4798      	blx	r3
	sys_clock_init();
    3be6:	4b0c      	ldr	r3, [pc, #48]	; (3c18 <sim_system_init+0x38>)
    3be8:	4798      	blx	r3
	configure_port_pins();
    3bea:	4b0c      	ldr	r3, [pc, #48]	; (3c1c <sim_system_init+0x3c>)
    3bec:	4798      	blx	r3
	lcd_spi_init();
    3bee:	4b0c      	ldr	r3, [pc, #48]	; (3c20 <sim_system_init+0x40>)
    3bf0:	4798      	blx	r3
	configure_ext_ints();
    3bf2:	4b0c      	ldr	r3, [pc, #48]	; (3c24 <sim_system_init+0x44>)
    3bf4:	4798      	blx	r3
	configure_ext_int_callback();
    3bf6:	4b0c      	ldr	r3, [pc, #48]	; (3c28 <sim_system_init+0x48>)
    3bf8:	4798      	blx	r3
	lcd_init_seq(); 
    3bfa:	4b0c      	ldr	r3, [pc, #48]	; (3c2c <sim_system_init+0x4c>)
    3bfc:	4798      	blx	r3
	lcd_int_mask(LCD_DEFAULT_MASK);
    3bfe:	2104      	movs	r1, #4
    3c00:	480b      	ldr	r0, [pc, #44]	; (3c30 <sim_system_init+0x50>)
    3c02:	4c0c      	ldr	r4, [pc, #48]	; (3c34 <sim_system_init+0x54>)
    3c04:	47a0      	blx	r4
	lcd_int_enable();
    3c06:	2101      	movs	r1, #1
    3c08:	480b      	ldr	r0, [pc, #44]	; (3c38 <sim_system_init+0x58>)
    3c0a:	47a0      	blx	r4
    uartfiber_init();
    3c0c:	4b0b      	ldr	r3, [pc, #44]	; (3c3c <sim_system_init+0x5c>)
    3c0e:	4798      	blx	r3
}//end sim_system_init
    3c10:	bd10      	pop	{r4, pc}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	00003a15 	.word	0x00003a15
    3c18:	00003b89 	.word	0x00003b89
    3c1c:	00003bb5 	.word	0x00003bb5
    3c20:	00002409 	.word	0x00002409
    3c24:	000022a5 	.word	0x000022a5
    3c28:	000022cd 	.word	0x000022cd
    3c2c:	0000274d 	.word	0x0000274d
    3c30:	003020b0 	.word	0x003020b0
    3c34:	00002651 	.word	0x00002651
    3c38:	003020ac 	.word	0x003020ac
    3c3c:	000013f1 	.word	0x000013f1

00003c40 <main>:
int main(void){
    3c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c42:	b085      	sub	sp, #20
	sim_system_init();
    3c44:	4b8c      	ldr	r3, [pc, #560]	; (3e78 <main+0x238>)
    3c46:	4798      	blx	r3
	cpu_irq_enable();
    3c48:	4d8c      	ldr	r5, [pc, #560]	; (3e7c <main+0x23c>)
    3c4a:	2601      	movs	r6, #1
    3c4c:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3c4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3c52:	b662      	cpsie	i
	configure_rtc_calendar();
    3c54:	4b8a      	ldr	r3, [pc, #552]	; (3e80 <main+0x240>)
    3c56:	4798      	blx	r3
	phost = &host;
    3c58:	4c8a      	ldr	r4, [pc, #552]	; (3e84 <main+0x244>)
    3c5a:	488b      	ldr	r0, [pc, #556]	; (3e88 <main+0x248>)
    3c5c:	6020      	str	r0, [r4, #0]
	Ft_Gpu_Hal_Open(phost);
    3c5e:	4b8b      	ldr	r3, [pc, #556]	; (3e8c <main+0x24c>)
    3c60:	4798      	blx	r3
	Ft_Gpu_Hal_Wr8(phost, REG_INT_EN, 1);
    3c62:	2201      	movs	r2, #1
    3c64:	498a      	ldr	r1, [pc, #552]	; (3e90 <main+0x250>)
    3c66:	6820      	ldr	r0, [r4, #0]
    3c68:	4f8a      	ldr	r7, [pc, #552]	; (3e94 <main+0x254>)
    3c6a:	47b8      	blx	r7
	Ft_Gpu_Hal_Wr8(phost, REG_INT_MASK, 6);
    3c6c:	6820      	ldr	r0, [r4, #0]
    3c6e:	2206      	movs	r2, #6
    3c70:	4989      	ldr	r1, [pc, #548]	; (3e98 <main+0x258>)
    3c72:	47b8      	blx	r7
	delay_ms(2000);
    3c74:	20fa      	movs	r0, #250	; 0xfa
    3c76:	00c0      	lsls	r0, r0, #3
    3c78:	4b88      	ldr	r3, [pc, #544]	; (3e9c <main+0x25c>)
    3c7a:	4798      	blx	r3
	cpu_irq_enable();
    3c7c:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3c7e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3c82:	b662      	cpsie	i
	mstimer_init();
    3c84:	4b86      	ldr	r3, [pc, #536]	; (3ea0 <main+0x260>)
    3c86:	4798      	blx	r3
	rs485_baud_rate_set(38400);
    3c88:	2096      	movs	r0, #150	; 0x96
    3c8a:	0200      	lsls	r0, r0, #8
    3c8c:	4b85      	ldr	r3, [pc, #532]	; (3ea4 <main+0x264>)
    3c8e:	4798      	blx	r3
	rs485_init();
    3c90:	4b85      	ldr	r3, [pc, #532]	; (3ea8 <main+0x268>)
    3c92:	4798      	blx	r3
	mstimer_set(&Blink_Timer, 125);
    3c94:	217d      	movs	r1, #125	; 0x7d
    3c96:	4885      	ldr	r0, [pc, #532]	; (3eac <main+0x26c>)
    3c98:	4b85      	ldr	r3, [pc, #532]	; (3eb0 <main+0x270>)
    3c9a:	4798      	blx	r3
    3c9c:	e044      	b.n	3d28 <main+0xe8>
			current_fiber1_data.rssi_values = get_fiber1_data();
    3c9e:	4c85      	ldr	r4, [pc, #532]	; (3eb4 <main+0x274>)
    3ca0:	4b85      	ldr	r3, [pc, #532]	; (3eb8 <main+0x278>)
    3ca2:	4798      	blx	r3
    3ca4:	7220      	strb	r0, [r4, #8]
    3ca6:	0403      	lsls	r3, r0, #16
    3ca8:	0e1b      	lsrs	r3, r3, #24
    3caa:	7263      	strb	r3, [r4, #9]
    3cac:	0203      	lsls	r3, r0, #8
    3cae:	0e1b      	lsrs	r3, r3, #24
    3cb0:	72a3      	strb	r3, [r4, #10]
    3cb2:	0e00      	lsrs	r0, r0, #24
    3cb4:	72e0      	strb	r0, [r4, #11]
    3cb6:	e03e      	b.n	3d36 <main+0xf6>
			current_fiber2_data.rssi_values = get_fiber2_data();
    3cb8:	4c80      	ldr	r4, [pc, #512]	; (3ebc <main+0x27c>)
    3cba:	4b81      	ldr	r3, [pc, #516]	; (3ec0 <main+0x280>)
    3cbc:	4798      	blx	r3
    3cbe:	7220      	strb	r0, [r4, #8]
    3cc0:	0403      	lsls	r3, r0, #16
    3cc2:	0e1b      	lsrs	r3, r3, #24
    3cc4:	7263      	strb	r3, [r4, #9]
    3cc6:	0203      	lsls	r3, r0, #8
    3cc8:	0e1b      	lsrs	r3, r3, #24
    3cca:	72a3      	strb	r3, [r4, #10]
    3ccc:	0e00      	lsrs	r0, r0, #24
    3cce:	72e0      	strb	r0, [r4, #11]
    3cd0:	e035      	b.n	3d3e <main+0xfe>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    3cd2:	33ff      	adds	r3, #255	; 0xff
    3cd4:	e05e      	b.n	3d94 <main+0x154>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    3cd6:	33fe      	adds	r3, #254	; 0xfe
    3cd8:	e073      	b.n	3dc2 <main+0x182>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    3cda:	33fd      	adds	r3, #253	; 0xfd
    3cdc:	e08a      	b.n	3df4 <main+0x1b4>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    3cde:	33fc      	adds	r3, #252	; 0xfc
    3ce0:	e0a0      	b.n	3e24 <main+0x1e4>
			if(tempTag == attn)				attnOp(current_fiber1_data, current_fiber2_data);
    3ce2:	4976      	ldr	r1, [pc, #472]	; (3ebc <main+0x27c>)
    3ce4:	4c73      	ldr	r4, [pc, #460]	; (3eb4 <main+0x274>)
    3ce6:	880b      	ldrh	r3, [r1, #0]
    3ce8:	884f      	ldrh	r7, [r1, #2]
    3cea:	043f      	lsls	r7, r7, #16
    3cec:	431f      	orrs	r7, r3
    3cee:	8823      	ldrh	r3, [r4, #0]
    3cf0:	8866      	ldrh	r6, [r4, #2]
    3cf2:	0436      	lsls	r6, r6, #16
    3cf4:	431e      	orrs	r6, r3
    3cf6:	88a3      	ldrh	r3, [r4, #4]
    3cf8:	88e5      	ldrh	r5, [r4, #6]
    3cfa:	042d      	lsls	r5, r5, #16
    3cfc:	431d      	orrs	r5, r3
    3cfe:	8923      	ldrh	r3, [r4, #8]
    3d00:	8964      	ldrh	r4, [r4, #10]
    3d02:	0424      	lsls	r4, r4, #16
    3d04:	431c      	orrs	r4, r3
    3d06:	3104      	adds	r1, #4
    3d08:	3207      	adds	r2, #7
    3d0a:	4668      	mov	r0, sp
    3d0c:	4b6d      	ldr	r3, [pc, #436]	; (3ec4 <main+0x284>)
    3d0e:	4798      	blx	r3
    3d10:	003b      	movs	r3, r7
    3d12:	0030      	movs	r0, r6
    3d14:	0029      	movs	r1, r5
    3d16:	0022      	movs	r2, r4
    3d18:	4c6b      	ldr	r4, [pc, #428]	; (3ec8 <main+0x288>)
    3d1a:	47a0      	blx	r4
			tempTag = 0;
    3d1c:	2200      	movs	r2, #0
    3d1e:	4b6b      	ldr	r3, [pc, #428]	; (3ecc <main+0x28c>)
    3d20:	701a      	strb	r2, [r3, #0]
			delay_ms(50);
    3d22:	2032      	movs	r0, #50	; 0x32
    3d24:	4b5d      	ldr	r3, [pc, #372]	; (3e9c <main+0x25c>)
    3d26:	4798      	blx	r3
		delay_ms(1);
    3d28:	2001      	movs	r0, #1
    3d2a:	4b5c      	ldr	r3, [pc, #368]	; (3e9c <main+0x25c>)
    3d2c:	4798      	blx	r3
		if(get_fiber1_status() == data_ready)
    3d2e:	4b68      	ldr	r3, [pc, #416]	; (3ed0 <main+0x290>)
    3d30:	4798      	blx	r3
    3d32:	2801      	cmp	r0, #1
    3d34:	d0b3      	beq.n	3c9e <main+0x5e>
		if(get_fiber2_status() == data_ready)
    3d36:	4b67      	ldr	r3, [pc, #412]	; (3ed4 <main+0x294>)
    3d38:	4798      	blx	r3
    3d3a:	2801      	cmp	r0, #1
    3d3c:	d0bc      	beq.n	3cb8 <main+0x78>
		tag = 0;
    3d3e:	4d66      	ldr	r5, [pc, #408]	; (3ed8 <main+0x298>)
    3d40:	2300      	movs	r3, #0
    3d42:	702b      	strb	r3, [r5, #0]
		disStart();
    3d44:	4b65      	ldr	r3, [pc, #404]	; (3edc <main+0x29c>)
    3d46:	4798      	blx	r3
		Ft_Gpu_CoCmd_Gradient(phost, 0, 0x060A39, 0, disWid, disHei, 0x0A4F7A);
    3d48:	4c4e      	ldr	r4, [pc, #312]	; (3e84 <main+0x244>)
    3d4a:	6820      	ldr	r0, [r4, #0]
    3d4c:	4b64      	ldr	r3, [pc, #400]	; (3ee0 <main+0x2a0>)
    3d4e:	9302      	str	r3, [sp, #8]
    3d50:	23f0      	movs	r3, #240	; 0xf0
    3d52:	005b      	lsls	r3, r3, #1
    3d54:	9301      	str	r3, [sp, #4]
    3d56:	3341      	adds	r3, #65	; 0x41
    3d58:	33ff      	adds	r3, #255	; 0xff
    3d5a:	9300      	str	r3, [sp, #0]
    3d5c:	2300      	movs	r3, #0
    3d5e:	4a61      	ldr	r2, [pc, #388]	; (3ee4 <main+0x2a4>)
    3d60:	2100      	movs	r1, #0
    3d62:	4e61      	ldr	r6, [pc, #388]	; (3ee8 <main+0x2a8>)
    3d64:	47b0      	blx	r6
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    3d66:	2180      	movs	r1, #128	; 0x80
    3d68:	04c9      	lsls	r1, r1, #19
    3d6a:	6820      	ldr	r0, [r4, #0]
    3d6c:	4e5f      	ldr	r6, [pc, #380]	; (3eec <main+0x2ac>)
    3d6e:	47b0      	blx	r6
		printTime();
    3d70:	4b5f      	ldr	r3, [pc, #380]	; (3ef0 <main+0x2b0>)
    3d72:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    3d74:	495f      	ldr	r1, [pc, #380]	; (3ef4 <main+0x2b4>)
    3d76:	6820      	ldr	r0, [r4, #0]
    3d78:	47b0      	blx	r6
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    3d7a:	495f      	ldr	r1, [pc, #380]	; (3ef8 <main+0x2b8>)
    3d7c:	6820      	ldr	r0, [r4, #0]
    3d7e:	4b5f      	ldr	r3, [pc, #380]	; (3efc <main+0x2bc>)
    3d80:	4798      	blx	r3
    3d82:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_Hal_WrCmd32(phost,TAG(attn));
    3d84:	495e      	ldr	r1, [pc, #376]	; (3f00 <main+0x2c0>)
    3d86:	6820      	ldr	r0, [r4, #0]
    3d88:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    3d8a:	6820      	ldr	r0, [r4, #0]
    3d8c:	782b      	ldrb	r3, [r5, #0]
    3d8e:	2b01      	cmp	r3, #1
    3d90:	d09f      	beq.n	3cd2 <main+0x92>
    3d92:	2300      	movs	r3, #0
    3d94:	4a5b      	ldr	r2, [pc, #364]	; (3f04 <main+0x2c4>)
    3d96:	9203      	str	r2, [sp, #12]
    3d98:	9302      	str	r3, [sp, #8]
    3d9a:	231e      	movs	r3, #30
    3d9c:	9301      	str	r3, [sp, #4]
    3d9e:	335a      	adds	r3, #90	; 0x5a
    3da0:	9300      	str	r3, [sp, #0]
    3da2:	3350      	adds	r3, #80	; 0x50
    3da4:	226e      	movs	r2, #110	; 0x6e
    3da6:	21b8      	movs	r1, #184	; 0xb8
    3da8:	4c57      	ldr	r4, [pc, #348]	; (3f08 <main+0x2c8>)
    3daa:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(hist));
    3dac:	4c35      	ldr	r4, [pc, #212]	; (3e84 <main+0x244>)
    3dae:	4957      	ldr	r1, [pc, #348]	; (3f0c <main+0x2cc>)
    3db0:	6820      	ldr	r0, [r4, #0]
    3db2:	4b4e      	ldr	r3, [pc, #312]	; (3eec <main+0x2ac>)
    3db4:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    3db6:	6820      	ldr	r0, [r4, #0]
    3db8:	4b47      	ldr	r3, [pc, #284]	; (3ed8 <main+0x298>)
    3dba:	781b      	ldrb	r3, [r3, #0]
    3dbc:	2b02      	cmp	r3, #2
    3dbe:	d08a      	beq.n	3cd6 <main+0x96>
    3dc0:	2300      	movs	r3, #0
    3dc2:	4a53      	ldr	r2, [pc, #332]	; (3f10 <main+0x2d0>)
    3dc4:	9203      	str	r2, [sp, #12]
    3dc6:	9302      	str	r3, [sp, #8]
    3dc8:	231e      	movs	r3, #30
    3dca:	9301      	str	r3, [sp, #4]
    3dcc:	335a      	adds	r3, #90	; 0x5a
    3dce:	9300      	str	r3, [sp, #0]
    3dd0:	3350      	adds	r3, #80	; 0x50
    3dd2:	226e      	movs	r2, #110	; 0x6e
    3dd4:	21d0      	movs	r1, #208	; 0xd0
    3dd6:	0049      	lsls	r1, r1, #1
    3dd8:	4c4b      	ldr	r4, [pc, #300]	; (3f08 <main+0x2c8>)
    3dda:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(rssi));
    3ddc:	4c29      	ldr	r4, [pc, #164]	; (3e84 <main+0x244>)
    3dde:	494d      	ldr	r1, [pc, #308]	; (3f14 <main+0x2d4>)
    3de0:	6820      	ldr	r0, [r4, #0]
    3de2:	4b42      	ldr	r3, [pc, #264]	; (3eec <main+0x2ac>)
    3de4:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    3de6:	6820      	ldr	r0, [r4, #0]
    3de8:	4b3b      	ldr	r3, [pc, #236]	; (3ed8 <main+0x298>)
    3dea:	781b      	ldrb	r3, [r3, #0]
    3dec:	2b03      	cmp	r3, #3
    3dee:	d100      	bne.n	3df2 <main+0x1b2>
    3df0:	e773      	b.n	3cda <main+0x9a>
    3df2:	2300      	movs	r3, #0
    3df4:	4a48      	ldr	r2, [pc, #288]	; (3f18 <main+0x2d8>)
    3df6:	9203      	str	r2, [sp, #12]
    3df8:	9302      	str	r3, [sp, #8]
    3dfa:	231e      	movs	r3, #30
    3dfc:	9301      	str	r3, [sp, #4]
    3dfe:	335a      	adds	r3, #90	; 0x5a
    3e00:	9300      	str	r3, [sp, #0]
    3e02:	3350      	adds	r3, #80	; 0x50
    3e04:	22f9      	movs	r2, #249	; 0xf9
    3e06:	21b8      	movs	r1, #184	; 0xb8
    3e08:	4c3f      	ldr	r4, [pc, #252]	; (3f08 <main+0x2c8>)
    3e0a:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sett));
    3e0c:	4c1d      	ldr	r4, [pc, #116]	; (3e84 <main+0x244>)
    3e0e:	4943      	ldr	r1, [pc, #268]	; (3f1c <main+0x2dc>)
    3e10:	6820      	ldr	r0, [r4, #0]
    3e12:	4b36      	ldr	r3, [pc, #216]	; (3eec <main+0x2ac>)
    3e14:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    3e16:	6820      	ldr	r0, [r4, #0]
    3e18:	4b2f      	ldr	r3, [pc, #188]	; (3ed8 <main+0x298>)
    3e1a:	781b      	ldrb	r3, [r3, #0]
    3e1c:	2b04      	cmp	r3, #4
    3e1e:	d100      	bne.n	3e22 <main+0x1e2>
    3e20:	e75d      	b.n	3cde <main+0x9e>
    3e22:	2300      	movs	r3, #0
    3e24:	4a3e      	ldr	r2, [pc, #248]	; (3f20 <main+0x2e0>)
    3e26:	9203      	str	r2, [sp, #12]
    3e28:	9302      	str	r3, [sp, #8]
    3e2a:	231e      	movs	r3, #30
    3e2c:	9301      	str	r3, [sp, #4]
    3e2e:	335a      	adds	r3, #90	; 0x5a
    3e30:	9300      	str	r3, [sp, #0]
    3e32:	3350      	adds	r3, #80	; 0x50
    3e34:	22f9      	movs	r2, #249	; 0xf9
    3e36:	21d0      	movs	r1, #208	; 0xd0
    3e38:	0049      	lsls	r1, r1, #1
    3e3a:	4c33      	ldr	r4, [pc, #204]	; (3f08 <main+0x2c8>)
    3e3c:	47a0      	blx	r4
		disEnd();
    3e3e:	4b39      	ldr	r3, [pc, #228]	; (3f24 <main+0x2e4>)
    3e40:	4798      	blx	r3
		if(tag!=0)		tempTag = tag;
    3e42:	4b25      	ldr	r3, [pc, #148]	; (3ed8 <main+0x298>)
    3e44:	781b      	ldrb	r3, [r3, #0]
    3e46:	2b00      	cmp	r3, #0
    3e48:	d001      	beq.n	3e4e <main+0x20e>
    3e4a:	4a20      	ldr	r2, [pc, #128]	; (3ecc <main+0x28c>)
    3e4c:	7013      	strb	r3, [r2, #0]
		if (tempTag != tag && tag == 0 && tag!=back){
    3e4e:	4a1f      	ldr	r2, [pc, #124]	; (3ecc <main+0x28c>)
    3e50:	7812      	ldrb	r2, [r2, #0]
    3e52:	4293      	cmp	r3, r2
    3e54:	d100      	bne.n	3e58 <main+0x218>
    3e56:	e767      	b.n	3d28 <main+0xe8>
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d000      	beq.n	3e5e <main+0x21e>
    3e5c:	e764      	b.n	3d28 <main+0xe8>
    3e5e:	2b06      	cmp	r3, #6
    3e60:	d100      	bne.n	3e64 <main+0x224>
    3e62:	e761      	b.n	3d28 <main+0xe8>
			if(tempTag == attn)				attnOp(current_fiber1_data, current_fiber2_data);
    3e64:	2a01      	cmp	r2, #1
    3e66:	d100      	bne.n	3e6a <main+0x22a>
    3e68:	e73b      	b.n	3ce2 <main+0xa2>
			else if(tempTag == hist)		historyOp();
    3e6a:	2a02      	cmp	r2, #2
    3e6c:	d000      	beq.n	3e70 <main+0x230>
    3e6e:	e755      	b.n	3d1c <main+0xdc>
    3e70:	4b2d      	ldr	r3, [pc, #180]	; (3f28 <main+0x2e8>)
    3e72:	4798      	blx	r3
    3e74:	e752      	b.n	3d1c <main+0xdc>
    3e76:	46c0      	nop			; (mov r8, r8)
    3e78:	00003be1 	.word	0x00003be1
    3e7c:	2000000b 	.word	0x2000000b
    3e80:	000022e5 	.word	0x000022e5
    3e84:	20000780 	.word	0x20000780
    3e88:	20000468 	.word	0x20000468
    3e8c:	000018f9 	.word	0x000018f9
    3e90:	003020ac 	.word	0x003020ac
    3e94:	00001aa9 	.word	0x00001aa9
    3e98:	003020b0 	.word	0x003020b0
    3e9c:	00000151 	.word	0x00000151
    3ea0:	00002905 	.word	0x00002905
    3ea4:	00002b7d 	.word	0x00002b7d
    3ea8:	00002b95 	.word	0x00002b95
    3eac:	200003f0 	.word	0x200003f0
    3eb0:	00001351 	.word	0x00001351
    3eb4:	20000a30 	.word	0x20000a30
    3eb8:	0000158d 	.word	0x0000158d
    3ebc:	20000a24 	.word	0x20000a24
    3ec0:	000015c1 	.word	0x000015c1
    3ec4:	000040e1 	.word	0x000040e1
    3ec8:	00001ed5 	.word	0x00001ed5
    3ecc:	20000116 	.word	0x20000116
    3ed0:	000015f5 	.word	0x000015f5
    3ed4:	00001601 	.word	0x00001601
    3ed8:	20000115 	.word	0x20000115
    3edc:	00001e7d 	.word	0x00001e7d
    3ee0:	000a4f7a 	.word	0x000a4f7a
    3ee4:	00000a39 	.word	0x00000a39
    3ee8:	00001859 	.word	0x00001859
    3eec:	00001bc1 	.word	0x00001bc1
    3ef0:	00001bf5 	.word	0x00001bf5
    3ef4:	04ffffff 	.word	0x04ffffff
    3ef8:	0030212c 	.word	0x0030212c
    3efc:	00001a51 	.word	0x00001a51
    3f00:	03000001 	.word	0x03000001
    3f04:	00004a7c 	.word	0x00004a7c
    3f08:	00001775 	.word	0x00001775
    3f0c:	03000002 	.word	0x03000002
    3f10:	00004a8c 	.word	0x00004a8c
    3f14:	03000003 	.word	0x03000003
    3f18:	00004a98 	.word	0x00004a98
    3f1c:	03000004 	.word	0x03000004
    3f20:	00004aa4 	.word	0x00004aa4
    3f24:	00001ea9 	.word	0x00001ea9
    3f28:	00002161 	.word	0x00002161

00003f2c <__udivsi3>:
    3f2c:	2200      	movs	r2, #0
    3f2e:	0843      	lsrs	r3, r0, #1
    3f30:	428b      	cmp	r3, r1
    3f32:	d374      	bcc.n	401e <__udivsi3+0xf2>
    3f34:	0903      	lsrs	r3, r0, #4
    3f36:	428b      	cmp	r3, r1
    3f38:	d35f      	bcc.n	3ffa <__udivsi3+0xce>
    3f3a:	0a03      	lsrs	r3, r0, #8
    3f3c:	428b      	cmp	r3, r1
    3f3e:	d344      	bcc.n	3fca <__udivsi3+0x9e>
    3f40:	0b03      	lsrs	r3, r0, #12
    3f42:	428b      	cmp	r3, r1
    3f44:	d328      	bcc.n	3f98 <__udivsi3+0x6c>
    3f46:	0c03      	lsrs	r3, r0, #16
    3f48:	428b      	cmp	r3, r1
    3f4a:	d30d      	bcc.n	3f68 <__udivsi3+0x3c>
    3f4c:	22ff      	movs	r2, #255	; 0xff
    3f4e:	0209      	lsls	r1, r1, #8
    3f50:	ba12      	rev	r2, r2
    3f52:	0c03      	lsrs	r3, r0, #16
    3f54:	428b      	cmp	r3, r1
    3f56:	d302      	bcc.n	3f5e <__udivsi3+0x32>
    3f58:	1212      	asrs	r2, r2, #8
    3f5a:	0209      	lsls	r1, r1, #8
    3f5c:	d065      	beq.n	402a <__udivsi3+0xfe>
    3f5e:	0b03      	lsrs	r3, r0, #12
    3f60:	428b      	cmp	r3, r1
    3f62:	d319      	bcc.n	3f98 <__udivsi3+0x6c>
    3f64:	e000      	b.n	3f68 <__udivsi3+0x3c>
    3f66:	0a09      	lsrs	r1, r1, #8
    3f68:	0bc3      	lsrs	r3, r0, #15
    3f6a:	428b      	cmp	r3, r1
    3f6c:	d301      	bcc.n	3f72 <__udivsi3+0x46>
    3f6e:	03cb      	lsls	r3, r1, #15
    3f70:	1ac0      	subs	r0, r0, r3
    3f72:	4152      	adcs	r2, r2
    3f74:	0b83      	lsrs	r3, r0, #14
    3f76:	428b      	cmp	r3, r1
    3f78:	d301      	bcc.n	3f7e <__udivsi3+0x52>
    3f7a:	038b      	lsls	r3, r1, #14
    3f7c:	1ac0      	subs	r0, r0, r3
    3f7e:	4152      	adcs	r2, r2
    3f80:	0b43      	lsrs	r3, r0, #13
    3f82:	428b      	cmp	r3, r1
    3f84:	d301      	bcc.n	3f8a <__udivsi3+0x5e>
    3f86:	034b      	lsls	r3, r1, #13
    3f88:	1ac0      	subs	r0, r0, r3
    3f8a:	4152      	adcs	r2, r2
    3f8c:	0b03      	lsrs	r3, r0, #12
    3f8e:	428b      	cmp	r3, r1
    3f90:	d301      	bcc.n	3f96 <__udivsi3+0x6a>
    3f92:	030b      	lsls	r3, r1, #12
    3f94:	1ac0      	subs	r0, r0, r3
    3f96:	4152      	adcs	r2, r2
    3f98:	0ac3      	lsrs	r3, r0, #11
    3f9a:	428b      	cmp	r3, r1
    3f9c:	d301      	bcc.n	3fa2 <__udivsi3+0x76>
    3f9e:	02cb      	lsls	r3, r1, #11
    3fa0:	1ac0      	subs	r0, r0, r3
    3fa2:	4152      	adcs	r2, r2
    3fa4:	0a83      	lsrs	r3, r0, #10
    3fa6:	428b      	cmp	r3, r1
    3fa8:	d301      	bcc.n	3fae <__udivsi3+0x82>
    3faa:	028b      	lsls	r3, r1, #10
    3fac:	1ac0      	subs	r0, r0, r3
    3fae:	4152      	adcs	r2, r2
    3fb0:	0a43      	lsrs	r3, r0, #9
    3fb2:	428b      	cmp	r3, r1
    3fb4:	d301      	bcc.n	3fba <__udivsi3+0x8e>
    3fb6:	024b      	lsls	r3, r1, #9
    3fb8:	1ac0      	subs	r0, r0, r3
    3fba:	4152      	adcs	r2, r2
    3fbc:	0a03      	lsrs	r3, r0, #8
    3fbe:	428b      	cmp	r3, r1
    3fc0:	d301      	bcc.n	3fc6 <__udivsi3+0x9a>
    3fc2:	020b      	lsls	r3, r1, #8
    3fc4:	1ac0      	subs	r0, r0, r3
    3fc6:	4152      	adcs	r2, r2
    3fc8:	d2cd      	bcs.n	3f66 <__udivsi3+0x3a>
    3fca:	09c3      	lsrs	r3, r0, #7
    3fcc:	428b      	cmp	r3, r1
    3fce:	d301      	bcc.n	3fd4 <__udivsi3+0xa8>
    3fd0:	01cb      	lsls	r3, r1, #7
    3fd2:	1ac0      	subs	r0, r0, r3
    3fd4:	4152      	adcs	r2, r2
    3fd6:	0983      	lsrs	r3, r0, #6
    3fd8:	428b      	cmp	r3, r1
    3fda:	d301      	bcc.n	3fe0 <__udivsi3+0xb4>
    3fdc:	018b      	lsls	r3, r1, #6
    3fde:	1ac0      	subs	r0, r0, r3
    3fe0:	4152      	adcs	r2, r2
    3fe2:	0943      	lsrs	r3, r0, #5
    3fe4:	428b      	cmp	r3, r1
    3fe6:	d301      	bcc.n	3fec <__udivsi3+0xc0>
    3fe8:	014b      	lsls	r3, r1, #5
    3fea:	1ac0      	subs	r0, r0, r3
    3fec:	4152      	adcs	r2, r2
    3fee:	0903      	lsrs	r3, r0, #4
    3ff0:	428b      	cmp	r3, r1
    3ff2:	d301      	bcc.n	3ff8 <__udivsi3+0xcc>
    3ff4:	010b      	lsls	r3, r1, #4
    3ff6:	1ac0      	subs	r0, r0, r3
    3ff8:	4152      	adcs	r2, r2
    3ffa:	08c3      	lsrs	r3, r0, #3
    3ffc:	428b      	cmp	r3, r1
    3ffe:	d301      	bcc.n	4004 <__udivsi3+0xd8>
    4000:	00cb      	lsls	r3, r1, #3
    4002:	1ac0      	subs	r0, r0, r3
    4004:	4152      	adcs	r2, r2
    4006:	0883      	lsrs	r3, r0, #2
    4008:	428b      	cmp	r3, r1
    400a:	d301      	bcc.n	4010 <__udivsi3+0xe4>
    400c:	008b      	lsls	r3, r1, #2
    400e:	1ac0      	subs	r0, r0, r3
    4010:	4152      	adcs	r2, r2
    4012:	0843      	lsrs	r3, r0, #1
    4014:	428b      	cmp	r3, r1
    4016:	d301      	bcc.n	401c <__udivsi3+0xf0>
    4018:	004b      	lsls	r3, r1, #1
    401a:	1ac0      	subs	r0, r0, r3
    401c:	4152      	adcs	r2, r2
    401e:	1a41      	subs	r1, r0, r1
    4020:	d200      	bcs.n	4024 <__udivsi3+0xf8>
    4022:	4601      	mov	r1, r0
    4024:	4152      	adcs	r2, r2
    4026:	4610      	mov	r0, r2
    4028:	4770      	bx	lr
    402a:	e7ff      	b.n	402c <__udivsi3+0x100>
    402c:	b501      	push	{r0, lr}
    402e:	2000      	movs	r0, #0
    4030:	f000 f806 	bl	4040 <__aeabi_idiv0>
    4034:	bd02      	pop	{r1, pc}
    4036:	46c0      	nop			; (mov r8, r8)

00004038 <__aeabi_uidivmod>:
    4038:	2900      	cmp	r1, #0
    403a:	d0f7      	beq.n	402c <__udivsi3+0x100>
    403c:	e776      	b.n	3f2c <__udivsi3>
    403e:	4770      	bx	lr

00004040 <__aeabi_idiv0>:
    4040:	4770      	bx	lr
    4042:	46c0      	nop			; (mov r8, r8)

00004044 <__aeabi_lmul>:
    4044:	b5f0      	push	{r4, r5, r6, r7, lr}
    4046:	46ce      	mov	lr, r9
    4048:	4647      	mov	r7, r8
    404a:	0415      	lsls	r5, r2, #16
    404c:	0c2d      	lsrs	r5, r5, #16
    404e:	002e      	movs	r6, r5
    4050:	b580      	push	{r7, lr}
    4052:	0407      	lsls	r7, r0, #16
    4054:	0c14      	lsrs	r4, r2, #16
    4056:	0c3f      	lsrs	r7, r7, #16
    4058:	4699      	mov	r9, r3
    405a:	0c03      	lsrs	r3, r0, #16
    405c:	437e      	muls	r6, r7
    405e:	435d      	muls	r5, r3
    4060:	4367      	muls	r7, r4
    4062:	4363      	muls	r3, r4
    4064:	197f      	adds	r7, r7, r5
    4066:	0c34      	lsrs	r4, r6, #16
    4068:	19e4      	adds	r4, r4, r7
    406a:	469c      	mov	ip, r3
    406c:	42a5      	cmp	r5, r4
    406e:	d903      	bls.n	4078 <__aeabi_lmul+0x34>
    4070:	2380      	movs	r3, #128	; 0x80
    4072:	025b      	lsls	r3, r3, #9
    4074:	4698      	mov	r8, r3
    4076:	44c4      	add	ip, r8
    4078:	464b      	mov	r3, r9
    407a:	4351      	muls	r1, r2
    407c:	4343      	muls	r3, r0
    407e:	0436      	lsls	r6, r6, #16
    4080:	0c36      	lsrs	r6, r6, #16
    4082:	0c25      	lsrs	r5, r4, #16
    4084:	0424      	lsls	r4, r4, #16
    4086:	4465      	add	r5, ip
    4088:	19a4      	adds	r4, r4, r6
    408a:	1859      	adds	r1, r3, r1
    408c:	1949      	adds	r1, r1, r5
    408e:	0020      	movs	r0, r4
    4090:	bc0c      	pop	{r2, r3}
    4092:	4690      	mov	r8, r2
    4094:	4699      	mov	r9, r3
    4096:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004098 <__libc_init_array>:
    4098:	b570      	push	{r4, r5, r6, lr}
    409a:	2600      	movs	r6, #0
    409c:	4d0c      	ldr	r5, [pc, #48]	; (40d0 <__libc_init_array+0x38>)
    409e:	4c0d      	ldr	r4, [pc, #52]	; (40d4 <__libc_init_array+0x3c>)
    40a0:	1b64      	subs	r4, r4, r5
    40a2:	10a4      	asrs	r4, r4, #2
    40a4:	42a6      	cmp	r6, r4
    40a6:	d109      	bne.n	40bc <__libc_init_array+0x24>
    40a8:	2600      	movs	r6, #0
    40aa:	f000 fd1d 	bl	4ae8 <_init>
    40ae:	4d0a      	ldr	r5, [pc, #40]	; (40d8 <__libc_init_array+0x40>)
    40b0:	4c0a      	ldr	r4, [pc, #40]	; (40dc <__libc_init_array+0x44>)
    40b2:	1b64      	subs	r4, r4, r5
    40b4:	10a4      	asrs	r4, r4, #2
    40b6:	42a6      	cmp	r6, r4
    40b8:	d105      	bne.n	40c6 <__libc_init_array+0x2e>
    40ba:	bd70      	pop	{r4, r5, r6, pc}
    40bc:	00b3      	lsls	r3, r6, #2
    40be:	58eb      	ldr	r3, [r5, r3]
    40c0:	4798      	blx	r3
    40c2:	3601      	adds	r6, #1
    40c4:	e7ee      	b.n	40a4 <__libc_init_array+0xc>
    40c6:	00b3      	lsls	r3, r6, #2
    40c8:	58eb      	ldr	r3, [r5, r3]
    40ca:	4798      	blx	r3
    40cc:	3601      	adds	r6, #1
    40ce:	e7f2      	b.n	40b6 <__libc_init_array+0x1e>
    40d0:	00004af4 	.word	0x00004af4
    40d4:	00004af4 	.word	0x00004af4
    40d8:	00004af4 	.word	0x00004af4
    40dc:	00004af8 	.word	0x00004af8

000040e0 <memcpy>:
    40e0:	2300      	movs	r3, #0
    40e2:	b510      	push	{r4, lr}
    40e4:	429a      	cmp	r2, r3
    40e6:	d100      	bne.n	40ea <memcpy+0xa>
    40e8:	bd10      	pop	{r4, pc}
    40ea:	5ccc      	ldrb	r4, [r1, r3]
    40ec:	54c4      	strb	r4, [r0, r3]
    40ee:	3301      	adds	r3, #1
    40f0:	e7f8      	b.n	40e4 <memcpy+0x4>

000040f2 <memset>:
    40f2:	0003      	movs	r3, r0
    40f4:	1882      	adds	r2, r0, r2
    40f6:	4293      	cmp	r3, r2
    40f8:	d100      	bne.n	40fc <memset+0xa>
    40fa:	4770      	bx	lr
    40fc:	7019      	strb	r1, [r3, #0]
    40fe:	3301      	adds	r3, #1
    4100:	e7f9      	b.n	40f6 <memset+0x4>
	...

00004104 <sniprintf>:
    4104:	b40c      	push	{r2, r3}
    4106:	b530      	push	{r4, r5, lr}
    4108:	4b16      	ldr	r3, [pc, #88]	; (4164 <sniprintf+0x60>)
    410a:	b09d      	sub	sp, #116	; 0x74
    410c:	1e0c      	subs	r4, r1, #0
    410e:	681d      	ldr	r5, [r3, #0]
    4110:	da08      	bge.n	4124 <sniprintf+0x20>
    4112:	238b      	movs	r3, #139	; 0x8b
    4114:	2001      	movs	r0, #1
    4116:	602b      	str	r3, [r5, #0]
    4118:	4240      	negs	r0, r0
    411a:	b01d      	add	sp, #116	; 0x74
    411c:	bc30      	pop	{r4, r5}
    411e:	bc08      	pop	{r3}
    4120:	b002      	add	sp, #8
    4122:	4718      	bx	r3
    4124:	2382      	movs	r3, #130	; 0x82
    4126:	a902      	add	r1, sp, #8
    4128:	009b      	lsls	r3, r3, #2
    412a:	818b      	strh	r3, [r1, #12]
    412c:	2300      	movs	r3, #0
    412e:	9002      	str	r0, [sp, #8]
    4130:	6108      	str	r0, [r1, #16]
    4132:	429c      	cmp	r4, r3
    4134:	d000      	beq.n	4138 <sniprintf+0x34>
    4136:	1e63      	subs	r3, r4, #1
    4138:	608b      	str	r3, [r1, #8]
    413a:	614b      	str	r3, [r1, #20]
    413c:	2301      	movs	r3, #1
    413e:	425b      	negs	r3, r3
    4140:	81cb      	strh	r3, [r1, #14]
    4142:	9a20      	ldr	r2, [sp, #128]	; 0x80
    4144:	ab21      	add	r3, sp, #132	; 0x84
    4146:	0028      	movs	r0, r5
    4148:	9301      	str	r3, [sp, #4]
    414a:	f000 f91f 	bl	438c <_svfiprintf_r>
    414e:	1c43      	adds	r3, r0, #1
    4150:	da01      	bge.n	4156 <sniprintf+0x52>
    4152:	238b      	movs	r3, #139	; 0x8b
    4154:	602b      	str	r3, [r5, #0]
    4156:	2c00      	cmp	r4, #0
    4158:	d0df      	beq.n	411a <sniprintf+0x16>
    415a:	2300      	movs	r3, #0
    415c:	9a02      	ldr	r2, [sp, #8]
    415e:	7013      	strb	r3, [r2, #0]
    4160:	e7db      	b.n	411a <sniprintf+0x16>
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	20000010 	.word	0x20000010

00004168 <strlen>:
    4168:	2300      	movs	r3, #0
    416a:	5cc2      	ldrb	r2, [r0, r3]
    416c:	3301      	adds	r3, #1
    416e:	2a00      	cmp	r2, #0
    4170:	d1fb      	bne.n	416a <strlen+0x2>
    4172:	1e58      	subs	r0, r3, #1
    4174:	4770      	bx	lr
	...

00004178 <_free_r>:
    4178:	b570      	push	{r4, r5, r6, lr}
    417a:	0005      	movs	r5, r0
    417c:	2900      	cmp	r1, #0
    417e:	d010      	beq.n	41a2 <_free_r+0x2a>
    4180:	1f0c      	subs	r4, r1, #4
    4182:	6823      	ldr	r3, [r4, #0]
    4184:	2b00      	cmp	r3, #0
    4186:	da00      	bge.n	418a <_free_r+0x12>
    4188:	18e4      	adds	r4, r4, r3
    418a:	0028      	movs	r0, r5
    418c:	f000 fbb9 	bl	4902 <__malloc_lock>
    4190:	4a1d      	ldr	r2, [pc, #116]	; (4208 <_free_r+0x90>)
    4192:	6813      	ldr	r3, [r2, #0]
    4194:	2b00      	cmp	r3, #0
    4196:	d105      	bne.n	41a4 <_free_r+0x2c>
    4198:	6063      	str	r3, [r4, #4]
    419a:	6014      	str	r4, [r2, #0]
    419c:	0028      	movs	r0, r5
    419e:	f000 fbb1 	bl	4904 <__malloc_unlock>
    41a2:	bd70      	pop	{r4, r5, r6, pc}
    41a4:	42a3      	cmp	r3, r4
    41a6:	d909      	bls.n	41bc <_free_r+0x44>
    41a8:	6821      	ldr	r1, [r4, #0]
    41aa:	1860      	adds	r0, r4, r1
    41ac:	4283      	cmp	r3, r0
    41ae:	d1f3      	bne.n	4198 <_free_r+0x20>
    41b0:	6818      	ldr	r0, [r3, #0]
    41b2:	685b      	ldr	r3, [r3, #4]
    41b4:	1841      	adds	r1, r0, r1
    41b6:	6021      	str	r1, [r4, #0]
    41b8:	e7ee      	b.n	4198 <_free_r+0x20>
    41ba:	0013      	movs	r3, r2
    41bc:	685a      	ldr	r2, [r3, #4]
    41be:	2a00      	cmp	r2, #0
    41c0:	d001      	beq.n	41c6 <_free_r+0x4e>
    41c2:	42a2      	cmp	r2, r4
    41c4:	d9f9      	bls.n	41ba <_free_r+0x42>
    41c6:	6819      	ldr	r1, [r3, #0]
    41c8:	1858      	adds	r0, r3, r1
    41ca:	42a0      	cmp	r0, r4
    41cc:	d10b      	bne.n	41e6 <_free_r+0x6e>
    41ce:	6820      	ldr	r0, [r4, #0]
    41d0:	1809      	adds	r1, r1, r0
    41d2:	1858      	adds	r0, r3, r1
    41d4:	6019      	str	r1, [r3, #0]
    41d6:	4282      	cmp	r2, r0
    41d8:	d1e0      	bne.n	419c <_free_r+0x24>
    41da:	6810      	ldr	r0, [r2, #0]
    41dc:	6852      	ldr	r2, [r2, #4]
    41de:	1841      	adds	r1, r0, r1
    41e0:	6019      	str	r1, [r3, #0]
    41e2:	605a      	str	r2, [r3, #4]
    41e4:	e7da      	b.n	419c <_free_r+0x24>
    41e6:	42a0      	cmp	r0, r4
    41e8:	d902      	bls.n	41f0 <_free_r+0x78>
    41ea:	230c      	movs	r3, #12
    41ec:	602b      	str	r3, [r5, #0]
    41ee:	e7d5      	b.n	419c <_free_r+0x24>
    41f0:	6821      	ldr	r1, [r4, #0]
    41f2:	1860      	adds	r0, r4, r1
    41f4:	4282      	cmp	r2, r0
    41f6:	d103      	bne.n	4200 <_free_r+0x88>
    41f8:	6810      	ldr	r0, [r2, #0]
    41fa:	6852      	ldr	r2, [r2, #4]
    41fc:	1841      	adds	r1, r0, r1
    41fe:	6021      	str	r1, [r4, #0]
    4200:	6062      	str	r2, [r4, #4]
    4202:	605c      	str	r4, [r3, #4]
    4204:	e7ca      	b.n	419c <_free_r+0x24>
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	200003f8 	.word	0x200003f8

0000420c <_malloc_r>:
    420c:	2303      	movs	r3, #3
    420e:	b570      	push	{r4, r5, r6, lr}
    4210:	1ccd      	adds	r5, r1, #3
    4212:	439d      	bics	r5, r3
    4214:	3508      	adds	r5, #8
    4216:	0006      	movs	r6, r0
    4218:	2d0c      	cmp	r5, #12
    421a:	d21e      	bcs.n	425a <_malloc_r+0x4e>
    421c:	250c      	movs	r5, #12
    421e:	42a9      	cmp	r1, r5
    4220:	d81d      	bhi.n	425e <_malloc_r+0x52>
    4222:	0030      	movs	r0, r6
    4224:	f000 fb6d 	bl	4902 <__malloc_lock>
    4228:	4a25      	ldr	r2, [pc, #148]	; (42c0 <_malloc_r+0xb4>)
    422a:	6814      	ldr	r4, [r2, #0]
    422c:	0021      	movs	r1, r4
    422e:	2900      	cmp	r1, #0
    4230:	d119      	bne.n	4266 <_malloc_r+0x5a>
    4232:	4c24      	ldr	r4, [pc, #144]	; (42c4 <_malloc_r+0xb8>)
    4234:	6823      	ldr	r3, [r4, #0]
    4236:	2b00      	cmp	r3, #0
    4238:	d103      	bne.n	4242 <_malloc_r+0x36>
    423a:	0030      	movs	r0, r6
    423c:	f000 fb32 	bl	48a4 <_sbrk_r>
    4240:	6020      	str	r0, [r4, #0]
    4242:	0029      	movs	r1, r5
    4244:	0030      	movs	r0, r6
    4246:	f000 fb2d 	bl	48a4 <_sbrk_r>
    424a:	1c43      	adds	r3, r0, #1
    424c:	d12c      	bne.n	42a8 <_malloc_r+0x9c>
    424e:	230c      	movs	r3, #12
    4250:	0030      	movs	r0, r6
    4252:	6033      	str	r3, [r6, #0]
    4254:	f000 fb56 	bl	4904 <__malloc_unlock>
    4258:	e003      	b.n	4262 <_malloc_r+0x56>
    425a:	2d00      	cmp	r5, #0
    425c:	dadf      	bge.n	421e <_malloc_r+0x12>
    425e:	230c      	movs	r3, #12
    4260:	6033      	str	r3, [r6, #0]
    4262:	2000      	movs	r0, #0
    4264:	bd70      	pop	{r4, r5, r6, pc}
    4266:	680b      	ldr	r3, [r1, #0]
    4268:	1b5b      	subs	r3, r3, r5
    426a:	d41a      	bmi.n	42a2 <_malloc_r+0x96>
    426c:	2b0b      	cmp	r3, #11
    426e:	d903      	bls.n	4278 <_malloc_r+0x6c>
    4270:	600b      	str	r3, [r1, #0]
    4272:	18cc      	adds	r4, r1, r3
    4274:	6025      	str	r5, [r4, #0]
    4276:	e003      	b.n	4280 <_malloc_r+0x74>
    4278:	428c      	cmp	r4, r1
    427a:	d10e      	bne.n	429a <_malloc_r+0x8e>
    427c:	6863      	ldr	r3, [r4, #4]
    427e:	6013      	str	r3, [r2, #0]
    4280:	0030      	movs	r0, r6
    4282:	f000 fb3f 	bl	4904 <__malloc_unlock>
    4286:	0020      	movs	r0, r4
    4288:	2207      	movs	r2, #7
    428a:	300b      	adds	r0, #11
    428c:	1d23      	adds	r3, r4, #4
    428e:	4390      	bics	r0, r2
    4290:	1ac3      	subs	r3, r0, r3
    4292:	d0e7      	beq.n	4264 <_malloc_r+0x58>
    4294:	425a      	negs	r2, r3
    4296:	50e2      	str	r2, [r4, r3]
    4298:	e7e4      	b.n	4264 <_malloc_r+0x58>
    429a:	684b      	ldr	r3, [r1, #4]
    429c:	6063      	str	r3, [r4, #4]
    429e:	000c      	movs	r4, r1
    42a0:	e7ee      	b.n	4280 <_malloc_r+0x74>
    42a2:	000c      	movs	r4, r1
    42a4:	6849      	ldr	r1, [r1, #4]
    42a6:	e7c2      	b.n	422e <_malloc_r+0x22>
    42a8:	2303      	movs	r3, #3
    42aa:	1cc4      	adds	r4, r0, #3
    42ac:	439c      	bics	r4, r3
    42ae:	42a0      	cmp	r0, r4
    42b0:	d0e0      	beq.n	4274 <_malloc_r+0x68>
    42b2:	1a21      	subs	r1, r4, r0
    42b4:	0030      	movs	r0, r6
    42b6:	f000 faf5 	bl	48a4 <_sbrk_r>
    42ba:	1c43      	adds	r3, r0, #1
    42bc:	d1da      	bne.n	4274 <_malloc_r+0x68>
    42be:	e7c6      	b.n	424e <_malloc_r+0x42>
    42c0:	200003f8 	.word	0x200003f8
    42c4:	200003fc 	.word	0x200003fc

000042c8 <__ssputs_r>:
    42c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ca:	688e      	ldr	r6, [r1, #8]
    42cc:	b085      	sub	sp, #20
    42ce:	0007      	movs	r7, r0
    42d0:	000c      	movs	r4, r1
    42d2:	9203      	str	r2, [sp, #12]
    42d4:	9301      	str	r3, [sp, #4]
    42d6:	429e      	cmp	r6, r3
    42d8:	d839      	bhi.n	434e <__ssputs_r+0x86>
    42da:	2390      	movs	r3, #144	; 0x90
    42dc:	898a      	ldrh	r2, [r1, #12]
    42de:	00db      	lsls	r3, r3, #3
    42e0:	421a      	tst	r2, r3
    42e2:	d034      	beq.n	434e <__ssputs_r+0x86>
    42e4:	2503      	movs	r5, #3
    42e6:	6909      	ldr	r1, [r1, #16]
    42e8:	6823      	ldr	r3, [r4, #0]
    42ea:	1a5b      	subs	r3, r3, r1
    42ec:	9302      	str	r3, [sp, #8]
    42ee:	6963      	ldr	r3, [r4, #20]
    42f0:	9802      	ldr	r0, [sp, #8]
    42f2:	435d      	muls	r5, r3
    42f4:	0feb      	lsrs	r3, r5, #31
    42f6:	195d      	adds	r5, r3, r5
    42f8:	9b01      	ldr	r3, [sp, #4]
    42fa:	106d      	asrs	r5, r5, #1
    42fc:	3301      	adds	r3, #1
    42fe:	181b      	adds	r3, r3, r0
    4300:	42ab      	cmp	r3, r5
    4302:	d900      	bls.n	4306 <__ssputs_r+0x3e>
    4304:	001d      	movs	r5, r3
    4306:	0553      	lsls	r3, r2, #21
    4308:	d532      	bpl.n	4370 <__ssputs_r+0xa8>
    430a:	0029      	movs	r1, r5
    430c:	0038      	movs	r0, r7
    430e:	f7ff ff7d 	bl	420c <_malloc_r>
    4312:	1e06      	subs	r6, r0, #0
    4314:	d109      	bne.n	432a <__ssputs_r+0x62>
    4316:	230c      	movs	r3, #12
    4318:	603b      	str	r3, [r7, #0]
    431a:	2340      	movs	r3, #64	; 0x40
    431c:	2001      	movs	r0, #1
    431e:	89a2      	ldrh	r2, [r4, #12]
    4320:	4240      	negs	r0, r0
    4322:	4313      	orrs	r3, r2
    4324:	81a3      	strh	r3, [r4, #12]
    4326:	b005      	add	sp, #20
    4328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    432a:	9a02      	ldr	r2, [sp, #8]
    432c:	6921      	ldr	r1, [r4, #16]
    432e:	f7ff fed7 	bl	40e0 <memcpy>
    4332:	89a3      	ldrh	r3, [r4, #12]
    4334:	4a14      	ldr	r2, [pc, #80]	; (4388 <__ssputs_r+0xc0>)
    4336:	401a      	ands	r2, r3
    4338:	2380      	movs	r3, #128	; 0x80
    433a:	4313      	orrs	r3, r2
    433c:	81a3      	strh	r3, [r4, #12]
    433e:	9b02      	ldr	r3, [sp, #8]
    4340:	6126      	str	r6, [r4, #16]
    4342:	18f6      	adds	r6, r6, r3
    4344:	6026      	str	r6, [r4, #0]
    4346:	6165      	str	r5, [r4, #20]
    4348:	9e01      	ldr	r6, [sp, #4]
    434a:	1aed      	subs	r5, r5, r3
    434c:	60a5      	str	r5, [r4, #8]
    434e:	9b01      	ldr	r3, [sp, #4]
    4350:	42b3      	cmp	r3, r6
    4352:	d200      	bcs.n	4356 <__ssputs_r+0x8e>
    4354:	001e      	movs	r6, r3
    4356:	0032      	movs	r2, r6
    4358:	9903      	ldr	r1, [sp, #12]
    435a:	6820      	ldr	r0, [r4, #0]
    435c:	f000 fabf 	bl	48de <memmove>
    4360:	68a3      	ldr	r3, [r4, #8]
    4362:	2000      	movs	r0, #0
    4364:	1b9b      	subs	r3, r3, r6
    4366:	60a3      	str	r3, [r4, #8]
    4368:	6823      	ldr	r3, [r4, #0]
    436a:	199e      	adds	r6, r3, r6
    436c:	6026      	str	r6, [r4, #0]
    436e:	e7da      	b.n	4326 <__ssputs_r+0x5e>
    4370:	002a      	movs	r2, r5
    4372:	0038      	movs	r0, r7
    4374:	f000 fac7 	bl	4906 <_realloc_r>
    4378:	1e06      	subs	r6, r0, #0
    437a:	d1e0      	bne.n	433e <__ssputs_r+0x76>
    437c:	6921      	ldr	r1, [r4, #16]
    437e:	0038      	movs	r0, r7
    4380:	f7ff fefa 	bl	4178 <_free_r>
    4384:	e7c7      	b.n	4316 <__ssputs_r+0x4e>
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	fffffb7f 	.word	0xfffffb7f

0000438c <_svfiprintf_r>:
    438c:	b5f0      	push	{r4, r5, r6, r7, lr}
    438e:	b09f      	sub	sp, #124	; 0x7c
    4390:	9002      	str	r0, [sp, #8]
    4392:	9305      	str	r3, [sp, #20]
    4394:	898b      	ldrh	r3, [r1, #12]
    4396:	000f      	movs	r7, r1
    4398:	0016      	movs	r6, r2
    439a:	061b      	lsls	r3, r3, #24
    439c:	d511      	bpl.n	43c2 <_svfiprintf_r+0x36>
    439e:	690b      	ldr	r3, [r1, #16]
    43a0:	2b00      	cmp	r3, #0
    43a2:	d10e      	bne.n	43c2 <_svfiprintf_r+0x36>
    43a4:	2140      	movs	r1, #64	; 0x40
    43a6:	f7ff ff31 	bl	420c <_malloc_r>
    43aa:	6038      	str	r0, [r7, #0]
    43ac:	6138      	str	r0, [r7, #16]
    43ae:	2800      	cmp	r0, #0
    43b0:	d105      	bne.n	43be <_svfiprintf_r+0x32>
    43b2:	230c      	movs	r3, #12
    43b4:	9a02      	ldr	r2, [sp, #8]
    43b6:	3801      	subs	r0, #1
    43b8:	6013      	str	r3, [r2, #0]
    43ba:	b01f      	add	sp, #124	; 0x7c
    43bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43be:	2340      	movs	r3, #64	; 0x40
    43c0:	617b      	str	r3, [r7, #20]
    43c2:	2300      	movs	r3, #0
    43c4:	ad06      	add	r5, sp, #24
    43c6:	616b      	str	r3, [r5, #20]
    43c8:	3320      	adds	r3, #32
    43ca:	766b      	strb	r3, [r5, #25]
    43cc:	3310      	adds	r3, #16
    43ce:	76ab      	strb	r3, [r5, #26]
    43d0:	0034      	movs	r4, r6
    43d2:	7823      	ldrb	r3, [r4, #0]
    43d4:	2b00      	cmp	r3, #0
    43d6:	d147      	bne.n	4468 <_svfiprintf_r+0xdc>
    43d8:	1ba3      	subs	r3, r4, r6
    43da:	9304      	str	r3, [sp, #16]
    43dc:	d00d      	beq.n	43fa <_svfiprintf_r+0x6e>
    43de:	1ba3      	subs	r3, r4, r6
    43e0:	0032      	movs	r2, r6
    43e2:	0039      	movs	r1, r7
    43e4:	9802      	ldr	r0, [sp, #8]
    43e6:	f7ff ff6f 	bl	42c8 <__ssputs_r>
    43ea:	1c43      	adds	r3, r0, #1
    43ec:	d100      	bne.n	43f0 <_svfiprintf_r+0x64>
    43ee:	e0b5      	b.n	455c <_svfiprintf_r+0x1d0>
    43f0:	696a      	ldr	r2, [r5, #20]
    43f2:	9b04      	ldr	r3, [sp, #16]
    43f4:	4694      	mov	ip, r2
    43f6:	4463      	add	r3, ip
    43f8:	616b      	str	r3, [r5, #20]
    43fa:	7823      	ldrb	r3, [r4, #0]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d100      	bne.n	4402 <_svfiprintf_r+0x76>
    4400:	e0ac      	b.n	455c <_svfiprintf_r+0x1d0>
    4402:	2201      	movs	r2, #1
    4404:	2300      	movs	r3, #0
    4406:	4252      	negs	r2, r2
    4408:	606a      	str	r2, [r5, #4]
    440a:	a902      	add	r1, sp, #8
    440c:	3254      	adds	r2, #84	; 0x54
    440e:	1852      	adds	r2, r2, r1
    4410:	3401      	adds	r4, #1
    4412:	602b      	str	r3, [r5, #0]
    4414:	60eb      	str	r3, [r5, #12]
    4416:	60ab      	str	r3, [r5, #8]
    4418:	7013      	strb	r3, [r2, #0]
    441a:	65ab      	str	r3, [r5, #88]	; 0x58
    441c:	4e58      	ldr	r6, [pc, #352]	; (4580 <_svfiprintf_r+0x1f4>)
    441e:	2205      	movs	r2, #5
    4420:	7821      	ldrb	r1, [r4, #0]
    4422:	0030      	movs	r0, r6
    4424:	f000 fa50 	bl	48c8 <memchr>
    4428:	1c62      	adds	r2, r4, #1
    442a:	2800      	cmp	r0, #0
    442c:	d120      	bne.n	4470 <_svfiprintf_r+0xe4>
    442e:	6829      	ldr	r1, [r5, #0]
    4430:	06cb      	lsls	r3, r1, #27
    4432:	d504      	bpl.n	443e <_svfiprintf_r+0xb2>
    4434:	2353      	movs	r3, #83	; 0x53
    4436:	ae02      	add	r6, sp, #8
    4438:	3020      	adds	r0, #32
    443a:	199b      	adds	r3, r3, r6
    443c:	7018      	strb	r0, [r3, #0]
    443e:	070b      	lsls	r3, r1, #28
    4440:	d504      	bpl.n	444c <_svfiprintf_r+0xc0>
    4442:	2353      	movs	r3, #83	; 0x53
    4444:	202b      	movs	r0, #43	; 0x2b
    4446:	ae02      	add	r6, sp, #8
    4448:	199b      	adds	r3, r3, r6
    444a:	7018      	strb	r0, [r3, #0]
    444c:	7823      	ldrb	r3, [r4, #0]
    444e:	2b2a      	cmp	r3, #42	; 0x2a
    4450:	d016      	beq.n	4480 <_svfiprintf_r+0xf4>
    4452:	2000      	movs	r0, #0
    4454:	210a      	movs	r1, #10
    4456:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4458:	7822      	ldrb	r2, [r4, #0]
    445a:	3a30      	subs	r2, #48	; 0x30
    445c:	2a09      	cmp	r2, #9
    445e:	d955      	bls.n	450c <_svfiprintf_r+0x180>
    4460:	2800      	cmp	r0, #0
    4462:	d015      	beq.n	4490 <_svfiprintf_r+0x104>
    4464:	9309      	str	r3, [sp, #36]	; 0x24
    4466:	e013      	b.n	4490 <_svfiprintf_r+0x104>
    4468:	2b25      	cmp	r3, #37	; 0x25
    446a:	d0b5      	beq.n	43d8 <_svfiprintf_r+0x4c>
    446c:	3401      	adds	r4, #1
    446e:	e7b0      	b.n	43d2 <_svfiprintf_r+0x46>
    4470:	2301      	movs	r3, #1
    4472:	1b80      	subs	r0, r0, r6
    4474:	4083      	lsls	r3, r0
    4476:	6829      	ldr	r1, [r5, #0]
    4478:	0014      	movs	r4, r2
    447a:	430b      	orrs	r3, r1
    447c:	602b      	str	r3, [r5, #0]
    447e:	e7cd      	b.n	441c <_svfiprintf_r+0x90>
    4480:	9b05      	ldr	r3, [sp, #20]
    4482:	1d18      	adds	r0, r3, #4
    4484:	681b      	ldr	r3, [r3, #0]
    4486:	9005      	str	r0, [sp, #20]
    4488:	2b00      	cmp	r3, #0
    448a:	db39      	blt.n	4500 <_svfiprintf_r+0x174>
    448c:	9309      	str	r3, [sp, #36]	; 0x24
    448e:	0014      	movs	r4, r2
    4490:	7823      	ldrb	r3, [r4, #0]
    4492:	2b2e      	cmp	r3, #46	; 0x2e
    4494:	d10b      	bne.n	44ae <_svfiprintf_r+0x122>
    4496:	7863      	ldrb	r3, [r4, #1]
    4498:	1c62      	adds	r2, r4, #1
    449a:	2b2a      	cmp	r3, #42	; 0x2a
    449c:	d13e      	bne.n	451c <_svfiprintf_r+0x190>
    449e:	9b05      	ldr	r3, [sp, #20]
    44a0:	3402      	adds	r4, #2
    44a2:	1d1a      	adds	r2, r3, #4
    44a4:	681b      	ldr	r3, [r3, #0]
    44a6:	9205      	str	r2, [sp, #20]
    44a8:	2b00      	cmp	r3, #0
    44aa:	db34      	blt.n	4516 <_svfiprintf_r+0x18a>
    44ac:	9307      	str	r3, [sp, #28]
    44ae:	4e35      	ldr	r6, [pc, #212]	; (4584 <_svfiprintf_r+0x1f8>)
    44b0:	7821      	ldrb	r1, [r4, #0]
    44b2:	2203      	movs	r2, #3
    44b4:	0030      	movs	r0, r6
    44b6:	f000 fa07 	bl	48c8 <memchr>
    44ba:	2800      	cmp	r0, #0
    44bc:	d006      	beq.n	44cc <_svfiprintf_r+0x140>
    44be:	2340      	movs	r3, #64	; 0x40
    44c0:	1b80      	subs	r0, r0, r6
    44c2:	4083      	lsls	r3, r0
    44c4:	682a      	ldr	r2, [r5, #0]
    44c6:	3401      	adds	r4, #1
    44c8:	4313      	orrs	r3, r2
    44ca:	602b      	str	r3, [r5, #0]
    44cc:	7821      	ldrb	r1, [r4, #0]
    44ce:	2206      	movs	r2, #6
    44d0:	482d      	ldr	r0, [pc, #180]	; (4588 <_svfiprintf_r+0x1fc>)
    44d2:	1c66      	adds	r6, r4, #1
    44d4:	7629      	strb	r1, [r5, #24]
    44d6:	f000 f9f7 	bl	48c8 <memchr>
    44da:	2800      	cmp	r0, #0
    44dc:	d046      	beq.n	456c <_svfiprintf_r+0x1e0>
    44de:	4b2b      	ldr	r3, [pc, #172]	; (458c <_svfiprintf_r+0x200>)
    44e0:	2b00      	cmp	r3, #0
    44e2:	d12f      	bne.n	4544 <_svfiprintf_r+0x1b8>
    44e4:	6829      	ldr	r1, [r5, #0]
    44e6:	9b05      	ldr	r3, [sp, #20]
    44e8:	2207      	movs	r2, #7
    44ea:	05c9      	lsls	r1, r1, #23
    44ec:	d528      	bpl.n	4540 <_svfiprintf_r+0x1b4>
    44ee:	189b      	adds	r3, r3, r2
    44f0:	4393      	bics	r3, r2
    44f2:	3308      	adds	r3, #8
    44f4:	9305      	str	r3, [sp, #20]
    44f6:	696b      	ldr	r3, [r5, #20]
    44f8:	9a03      	ldr	r2, [sp, #12]
    44fa:	189b      	adds	r3, r3, r2
    44fc:	616b      	str	r3, [r5, #20]
    44fe:	e767      	b.n	43d0 <_svfiprintf_r+0x44>
    4500:	425b      	negs	r3, r3
    4502:	60eb      	str	r3, [r5, #12]
    4504:	2302      	movs	r3, #2
    4506:	430b      	orrs	r3, r1
    4508:	602b      	str	r3, [r5, #0]
    450a:	e7c0      	b.n	448e <_svfiprintf_r+0x102>
    450c:	434b      	muls	r3, r1
    450e:	3401      	adds	r4, #1
    4510:	189b      	adds	r3, r3, r2
    4512:	2001      	movs	r0, #1
    4514:	e7a0      	b.n	4458 <_svfiprintf_r+0xcc>
    4516:	2301      	movs	r3, #1
    4518:	425b      	negs	r3, r3
    451a:	e7c7      	b.n	44ac <_svfiprintf_r+0x120>
    451c:	2300      	movs	r3, #0
    451e:	0014      	movs	r4, r2
    4520:	200a      	movs	r0, #10
    4522:	001a      	movs	r2, r3
    4524:	606b      	str	r3, [r5, #4]
    4526:	7821      	ldrb	r1, [r4, #0]
    4528:	3930      	subs	r1, #48	; 0x30
    452a:	2909      	cmp	r1, #9
    452c:	d903      	bls.n	4536 <_svfiprintf_r+0x1aa>
    452e:	2b00      	cmp	r3, #0
    4530:	d0bd      	beq.n	44ae <_svfiprintf_r+0x122>
    4532:	9207      	str	r2, [sp, #28]
    4534:	e7bb      	b.n	44ae <_svfiprintf_r+0x122>
    4536:	4342      	muls	r2, r0
    4538:	3401      	adds	r4, #1
    453a:	1852      	adds	r2, r2, r1
    453c:	2301      	movs	r3, #1
    453e:	e7f2      	b.n	4526 <_svfiprintf_r+0x19a>
    4540:	3307      	adds	r3, #7
    4542:	e7d5      	b.n	44f0 <_svfiprintf_r+0x164>
    4544:	ab05      	add	r3, sp, #20
    4546:	9300      	str	r3, [sp, #0]
    4548:	003a      	movs	r2, r7
    454a:	4b11      	ldr	r3, [pc, #68]	; (4590 <_svfiprintf_r+0x204>)
    454c:	0029      	movs	r1, r5
    454e:	9802      	ldr	r0, [sp, #8]
    4550:	e000      	b.n	4554 <_svfiprintf_r+0x1c8>
    4552:	bf00      	nop
    4554:	9003      	str	r0, [sp, #12]
    4556:	9b03      	ldr	r3, [sp, #12]
    4558:	3301      	adds	r3, #1
    455a:	d1cc      	bne.n	44f6 <_svfiprintf_r+0x16a>
    455c:	89bb      	ldrh	r3, [r7, #12]
    455e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4560:	065b      	lsls	r3, r3, #25
    4562:	d400      	bmi.n	4566 <_svfiprintf_r+0x1da>
    4564:	e729      	b.n	43ba <_svfiprintf_r+0x2e>
    4566:	2001      	movs	r0, #1
    4568:	4240      	negs	r0, r0
    456a:	e726      	b.n	43ba <_svfiprintf_r+0x2e>
    456c:	ab05      	add	r3, sp, #20
    456e:	9300      	str	r3, [sp, #0]
    4570:	003a      	movs	r2, r7
    4572:	4b07      	ldr	r3, [pc, #28]	; (4590 <_svfiprintf_r+0x204>)
    4574:	0029      	movs	r1, r5
    4576:	9802      	ldr	r0, [sp, #8]
    4578:	f000 f87a 	bl	4670 <_printf_i>
    457c:	e7ea      	b.n	4554 <_svfiprintf_r+0x1c8>
    457e:	46c0      	nop			; (mov r8, r8)
    4580:	00004ab4 	.word	0x00004ab4
    4584:	00004aba 	.word	0x00004aba
    4588:	00004abe 	.word	0x00004abe
    458c:	00000000 	.word	0x00000000
    4590:	000042c9 	.word	0x000042c9

00004594 <_printf_common>:
    4594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4596:	0015      	movs	r5, r2
    4598:	9301      	str	r3, [sp, #4]
    459a:	688a      	ldr	r2, [r1, #8]
    459c:	690b      	ldr	r3, [r1, #16]
    459e:	9000      	str	r0, [sp, #0]
    45a0:	000c      	movs	r4, r1
    45a2:	4293      	cmp	r3, r2
    45a4:	da00      	bge.n	45a8 <_printf_common+0x14>
    45a6:	0013      	movs	r3, r2
    45a8:	0022      	movs	r2, r4
    45aa:	602b      	str	r3, [r5, #0]
    45ac:	3243      	adds	r2, #67	; 0x43
    45ae:	7812      	ldrb	r2, [r2, #0]
    45b0:	2a00      	cmp	r2, #0
    45b2:	d001      	beq.n	45b8 <_printf_common+0x24>
    45b4:	3301      	adds	r3, #1
    45b6:	602b      	str	r3, [r5, #0]
    45b8:	6823      	ldr	r3, [r4, #0]
    45ba:	069b      	lsls	r3, r3, #26
    45bc:	d502      	bpl.n	45c4 <_printf_common+0x30>
    45be:	682b      	ldr	r3, [r5, #0]
    45c0:	3302      	adds	r3, #2
    45c2:	602b      	str	r3, [r5, #0]
    45c4:	2706      	movs	r7, #6
    45c6:	6823      	ldr	r3, [r4, #0]
    45c8:	401f      	ands	r7, r3
    45ca:	d027      	beq.n	461c <_printf_common+0x88>
    45cc:	0023      	movs	r3, r4
    45ce:	3343      	adds	r3, #67	; 0x43
    45d0:	781b      	ldrb	r3, [r3, #0]
    45d2:	1e5a      	subs	r2, r3, #1
    45d4:	4193      	sbcs	r3, r2
    45d6:	6822      	ldr	r2, [r4, #0]
    45d8:	0692      	lsls	r2, r2, #26
    45da:	d430      	bmi.n	463e <_printf_common+0xaa>
    45dc:	0022      	movs	r2, r4
    45de:	9901      	ldr	r1, [sp, #4]
    45e0:	3243      	adds	r2, #67	; 0x43
    45e2:	9800      	ldr	r0, [sp, #0]
    45e4:	9e08      	ldr	r6, [sp, #32]
    45e6:	47b0      	blx	r6
    45e8:	1c43      	adds	r3, r0, #1
    45ea:	d025      	beq.n	4638 <_printf_common+0xa4>
    45ec:	2306      	movs	r3, #6
    45ee:	6820      	ldr	r0, [r4, #0]
    45f0:	682a      	ldr	r2, [r5, #0]
    45f2:	68e1      	ldr	r1, [r4, #12]
    45f4:	4003      	ands	r3, r0
    45f6:	2500      	movs	r5, #0
    45f8:	2b04      	cmp	r3, #4
    45fa:	d103      	bne.n	4604 <_printf_common+0x70>
    45fc:	1a8d      	subs	r5, r1, r2
    45fe:	43eb      	mvns	r3, r5
    4600:	17db      	asrs	r3, r3, #31
    4602:	401d      	ands	r5, r3
    4604:	68a3      	ldr	r3, [r4, #8]
    4606:	6922      	ldr	r2, [r4, #16]
    4608:	4293      	cmp	r3, r2
    460a:	dd01      	ble.n	4610 <_printf_common+0x7c>
    460c:	1a9b      	subs	r3, r3, r2
    460e:	18ed      	adds	r5, r5, r3
    4610:	2700      	movs	r7, #0
    4612:	42bd      	cmp	r5, r7
    4614:	d120      	bne.n	4658 <_printf_common+0xc4>
    4616:	2000      	movs	r0, #0
    4618:	e010      	b.n	463c <_printf_common+0xa8>
    461a:	3701      	adds	r7, #1
    461c:	68e3      	ldr	r3, [r4, #12]
    461e:	682a      	ldr	r2, [r5, #0]
    4620:	1a9b      	subs	r3, r3, r2
    4622:	429f      	cmp	r7, r3
    4624:	dad2      	bge.n	45cc <_printf_common+0x38>
    4626:	0022      	movs	r2, r4
    4628:	2301      	movs	r3, #1
    462a:	3219      	adds	r2, #25
    462c:	9901      	ldr	r1, [sp, #4]
    462e:	9800      	ldr	r0, [sp, #0]
    4630:	9e08      	ldr	r6, [sp, #32]
    4632:	47b0      	blx	r6
    4634:	1c43      	adds	r3, r0, #1
    4636:	d1f0      	bne.n	461a <_printf_common+0x86>
    4638:	2001      	movs	r0, #1
    463a:	4240      	negs	r0, r0
    463c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    463e:	2030      	movs	r0, #48	; 0x30
    4640:	18e1      	adds	r1, r4, r3
    4642:	3143      	adds	r1, #67	; 0x43
    4644:	7008      	strb	r0, [r1, #0]
    4646:	0021      	movs	r1, r4
    4648:	1c5a      	adds	r2, r3, #1
    464a:	3145      	adds	r1, #69	; 0x45
    464c:	7809      	ldrb	r1, [r1, #0]
    464e:	18a2      	adds	r2, r4, r2
    4650:	3243      	adds	r2, #67	; 0x43
    4652:	3302      	adds	r3, #2
    4654:	7011      	strb	r1, [r2, #0]
    4656:	e7c1      	b.n	45dc <_printf_common+0x48>
    4658:	0022      	movs	r2, r4
    465a:	2301      	movs	r3, #1
    465c:	321a      	adds	r2, #26
    465e:	9901      	ldr	r1, [sp, #4]
    4660:	9800      	ldr	r0, [sp, #0]
    4662:	9e08      	ldr	r6, [sp, #32]
    4664:	47b0      	blx	r6
    4666:	1c43      	adds	r3, r0, #1
    4668:	d0e6      	beq.n	4638 <_printf_common+0xa4>
    466a:	3701      	adds	r7, #1
    466c:	e7d1      	b.n	4612 <_printf_common+0x7e>
	...

00004670 <_printf_i>:
    4670:	b5f0      	push	{r4, r5, r6, r7, lr}
    4672:	b08b      	sub	sp, #44	; 0x2c
    4674:	9206      	str	r2, [sp, #24]
    4676:	000a      	movs	r2, r1
    4678:	3243      	adds	r2, #67	; 0x43
    467a:	9307      	str	r3, [sp, #28]
    467c:	9005      	str	r0, [sp, #20]
    467e:	9204      	str	r2, [sp, #16]
    4680:	7e0a      	ldrb	r2, [r1, #24]
    4682:	000c      	movs	r4, r1
    4684:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4686:	2a6e      	cmp	r2, #110	; 0x6e
    4688:	d100      	bne.n	468c <_printf_i+0x1c>
    468a:	e08f      	b.n	47ac <_printf_i+0x13c>
    468c:	d817      	bhi.n	46be <_printf_i+0x4e>
    468e:	2a63      	cmp	r2, #99	; 0x63
    4690:	d02c      	beq.n	46ec <_printf_i+0x7c>
    4692:	d808      	bhi.n	46a6 <_printf_i+0x36>
    4694:	2a00      	cmp	r2, #0
    4696:	d100      	bne.n	469a <_printf_i+0x2a>
    4698:	e099      	b.n	47ce <_printf_i+0x15e>
    469a:	2a58      	cmp	r2, #88	; 0x58
    469c:	d054      	beq.n	4748 <_printf_i+0xd8>
    469e:	0026      	movs	r6, r4
    46a0:	3642      	adds	r6, #66	; 0x42
    46a2:	7032      	strb	r2, [r6, #0]
    46a4:	e029      	b.n	46fa <_printf_i+0x8a>
    46a6:	2a64      	cmp	r2, #100	; 0x64
    46a8:	d001      	beq.n	46ae <_printf_i+0x3e>
    46aa:	2a69      	cmp	r2, #105	; 0x69
    46ac:	d1f7      	bne.n	469e <_printf_i+0x2e>
    46ae:	6821      	ldr	r1, [r4, #0]
    46b0:	681a      	ldr	r2, [r3, #0]
    46b2:	0608      	lsls	r0, r1, #24
    46b4:	d523      	bpl.n	46fe <_printf_i+0x8e>
    46b6:	1d11      	adds	r1, r2, #4
    46b8:	6019      	str	r1, [r3, #0]
    46ba:	6815      	ldr	r5, [r2, #0]
    46bc:	e025      	b.n	470a <_printf_i+0x9a>
    46be:	2a73      	cmp	r2, #115	; 0x73
    46c0:	d100      	bne.n	46c4 <_printf_i+0x54>
    46c2:	e088      	b.n	47d6 <_printf_i+0x166>
    46c4:	d808      	bhi.n	46d8 <_printf_i+0x68>
    46c6:	2a6f      	cmp	r2, #111	; 0x6f
    46c8:	d029      	beq.n	471e <_printf_i+0xae>
    46ca:	2a70      	cmp	r2, #112	; 0x70
    46cc:	d1e7      	bne.n	469e <_printf_i+0x2e>
    46ce:	2220      	movs	r2, #32
    46d0:	6809      	ldr	r1, [r1, #0]
    46d2:	430a      	orrs	r2, r1
    46d4:	6022      	str	r2, [r4, #0]
    46d6:	e003      	b.n	46e0 <_printf_i+0x70>
    46d8:	2a75      	cmp	r2, #117	; 0x75
    46da:	d020      	beq.n	471e <_printf_i+0xae>
    46dc:	2a78      	cmp	r2, #120	; 0x78
    46de:	d1de      	bne.n	469e <_printf_i+0x2e>
    46e0:	0022      	movs	r2, r4
    46e2:	2178      	movs	r1, #120	; 0x78
    46e4:	3245      	adds	r2, #69	; 0x45
    46e6:	7011      	strb	r1, [r2, #0]
    46e8:	4a6c      	ldr	r2, [pc, #432]	; (489c <_printf_i+0x22c>)
    46ea:	e030      	b.n	474e <_printf_i+0xde>
    46ec:	000e      	movs	r6, r1
    46ee:	681a      	ldr	r2, [r3, #0]
    46f0:	3642      	adds	r6, #66	; 0x42
    46f2:	1d11      	adds	r1, r2, #4
    46f4:	6019      	str	r1, [r3, #0]
    46f6:	6813      	ldr	r3, [r2, #0]
    46f8:	7033      	strb	r3, [r6, #0]
    46fa:	2301      	movs	r3, #1
    46fc:	e079      	b.n	47f2 <_printf_i+0x182>
    46fe:	0649      	lsls	r1, r1, #25
    4700:	d5d9      	bpl.n	46b6 <_printf_i+0x46>
    4702:	1d11      	adds	r1, r2, #4
    4704:	6019      	str	r1, [r3, #0]
    4706:	2300      	movs	r3, #0
    4708:	5ed5      	ldrsh	r5, [r2, r3]
    470a:	2d00      	cmp	r5, #0
    470c:	da03      	bge.n	4716 <_printf_i+0xa6>
    470e:	232d      	movs	r3, #45	; 0x2d
    4710:	9a04      	ldr	r2, [sp, #16]
    4712:	426d      	negs	r5, r5
    4714:	7013      	strb	r3, [r2, #0]
    4716:	4b62      	ldr	r3, [pc, #392]	; (48a0 <_printf_i+0x230>)
    4718:	270a      	movs	r7, #10
    471a:	9303      	str	r3, [sp, #12]
    471c:	e02f      	b.n	477e <_printf_i+0x10e>
    471e:	6820      	ldr	r0, [r4, #0]
    4720:	6819      	ldr	r1, [r3, #0]
    4722:	0605      	lsls	r5, r0, #24
    4724:	d503      	bpl.n	472e <_printf_i+0xbe>
    4726:	1d08      	adds	r0, r1, #4
    4728:	6018      	str	r0, [r3, #0]
    472a:	680d      	ldr	r5, [r1, #0]
    472c:	e005      	b.n	473a <_printf_i+0xca>
    472e:	0640      	lsls	r0, r0, #25
    4730:	d5f9      	bpl.n	4726 <_printf_i+0xb6>
    4732:	680d      	ldr	r5, [r1, #0]
    4734:	1d08      	adds	r0, r1, #4
    4736:	6018      	str	r0, [r3, #0]
    4738:	b2ad      	uxth	r5, r5
    473a:	4b59      	ldr	r3, [pc, #356]	; (48a0 <_printf_i+0x230>)
    473c:	2708      	movs	r7, #8
    473e:	9303      	str	r3, [sp, #12]
    4740:	2a6f      	cmp	r2, #111	; 0x6f
    4742:	d018      	beq.n	4776 <_printf_i+0x106>
    4744:	270a      	movs	r7, #10
    4746:	e016      	b.n	4776 <_printf_i+0x106>
    4748:	3145      	adds	r1, #69	; 0x45
    474a:	700a      	strb	r2, [r1, #0]
    474c:	4a54      	ldr	r2, [pc, #336]	; (48a0 <_printf_i+0x230>)
    474e:	9203      	str	r2, [sp, #12]
    4750:	681a      	ldr	r2, [r3, #0]
    4752:	6821      	ldr	r1, [r4, #0]
    4754:	1d10      	adds	r0, r2, #4
    4756:	6018      	str	r0, [r3, #0]
    4758:	6815      	ldr	r5, [r2, #0]
    475a:	0608      	lsls	r0, r1, #24
    475c:	d522      	bpl.n	47a4 <_printf_i+0x134>
    475e:	07cb      	lsls	r3, r1, #31
    4760:	d502      	bpl.n	4768 <_printf_i+0xf8>
    4762:	2320      	movs	r3, #32
    4764:	4319      	orrs	r1, r3
    4766:	6021      	str	r1, [r4, #0]
    4768:	2710      	movs	r7, #16
    476a:	2d00      	cmp	r5, #0
    476c:	d103      	bne.n	4776 <_printf_i+0x106>
    476e:	2320      	movs	r3, #32
    4770:	6822      	ldr	r2, [r4, #0]
    4772:	439a      	bics	r2, r3
    4774:	6022      	str	r2, [r4, #0]
    4776:	0023      	movs	r3, r4
    4778:	2200      	movs	r2, #0
    477a:	3343      	adds	r3, #67	; 0x43
    477c:	701a      	strb	r2, [r3, #0]
    477e:	6863      	ldr	r3, [r4, #4]
    4780:	60a3      	str	r3, [r4, #8]
    4782:	2b00      	cmp	r3, #0
    4784:	db5c      	blt.n	4840 <_printf_i+0x1d0>
    4786:	2204      	movs	r2, #4
    4788:	6821      	ldr	r1, [r4, #0]
    478a:	4391      	bics	r1, r2
    478c:	6021      	str	r1, [r4, #0]
    478e:	2d00      	cmp	r5, #0
    4790:	d158      	bne.n	4844 <_printf_i+0x1d4>
    4792:	9e04      	ldr	r6, [sp, #16]
    4794:	2b00      	cmp	r3, #0
    4796:	d064      	beq.n	4862 <_printf_i+0x1f2>
    4798:	0026      	movs	r6, r4
    479a:	9b03      	ldr	r3, [sp, #12]
    479c:	3642      	adds	r6, #66	; 0x42
    479e:	781b      	ldrb	r3, [r3, #0]
    47a0:	7033      	strb	r3, [r6, #0]
    47a2:	e05e      	b.n	4862 <_printf_i+0x1f2>
    47a4:	0648      	lsls	r0, r1, #25
    47a6:	d5da      	bpl.n	475e <_printf_i+0xee>
    47a8:	b2ad      	uxth	r5, r5
    47aa:	e7d8      	b.n	475e <_printf_i+0xee>
    47ac:	6809      	ldr	r1, [r1, #0]
    47ae:	681a      	ldr	r2, [r3, #0]
    47b0:	0608      	lsls	r0, r1, #24
    47b2:	d505      	bpl.n	47c0 <_printf_i+0x150>
    47b4:	1d11      	adds	r1, r2, #4
    47b6:	6019      	str	r1, [r3, #0]
    47b8:	6813      	ldr	r3, [r2, #0]
    47ba:	6962      	ldr	r2, [r4, #20]
    47bc:	601a      	str	r2, [r3, #0]
    47be:	e006      	b.n	47ce <_printf_i+0x15e>
    47c0:	0649      	lsls	r1, r1, #25
    47c2:	d5f7      	bpl.n	47b4 <_printf_i+0x144>
    47c4:	1d11      	adds	r1, r2, #4
    47c6:	6019      	str	r1, [r3, #0]
    47c8:	6813      	ldr	r3, [r2, #0]
    47ca:	8aa2      	ldrh	r2, [r4, #20]
    47cc:	801a      	strh	r2, [r3, #0]
    47ce:	2300      	movs	r3, #0
    47d0:	9e04      	ldr	r6, [sp, #16]
    47d2:	6123      	str	r3, [r4, #16]
    47d4:	e054      	b.n	4880 <_printf_i+0x210>
    47d6:	681a      	ldr	r2, [r3, #0]
    47d8:	1d11      	adds	r1, r2, #4
    47da:	6019      	str	r1, [r3, #0]
    47dc:	6816      	ldr	r6, [r2, #0]
    47de:	2100      	movs	r1, #0
    47e0:	6862      	ldr	r2, [r4, #4]
    47e2:	0030      	movs	r0, r6
    47e4:	f000 f870 	bl	48c8 <memchr>
    47e8:	2800      	cmp	r0, #0
    47ea:	d001      	beq.n	47f0 <_printf_i+0x180>
    47ec:	1b80      	subs	r0, r0, r6
    47ee:	6060      	str	r0, [r4, #4]
    47f0:	6863      	ldr	r3, [r4, #4]
    47f2:	6123      	str	r3, [r4, #16]
    47f4:	2300      	movs	r3, #0
    47f6:	9a04      	ldr	r2, [sp, #16]
    47f8:	7013      	strb	r3, [r2, #0]
    47fa:	e041      	b.n	4880 <_printf_i+0x210>
    47fc:	6923      	ldr	r3, [r4, #16]
    47fe:	0032      	movs	r2, r6
    4800:	9906      	ldr	r1, [sp, #24]
    4802:	9805      	ldr	r0, [sp, #20]
    4804:	9d07      	ldr	r5, [sp, #28]
    4806:	47a8      	blx	r5
    4808:	1c43      	adds	r3, r0, #1
    480a:	d043      	beq.n	4894 <_printf_i+0x224>
    480c:	6823      	ldr	r3, [r4, #0]
    480e:	2500      	movs	r5, #0
    4810:	079b      	lsls	r3, r3, #30
    4812:	d40f      	bmi.n	4834 <_printf_i+0x1c4>
    4814:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4816:	68e0      	ldr	r0, [r4, #12]
    4818:	4298      	cmp	r0, r3
    481a:	da3d      	bge.n	4898 <_printf_i+0x228>
    481c:	0018      	movs	r0, r3
    481e:	e03b      	b.n	4898 <_printf_i+0x228>
    4820:	0022      	movs	r2, r4
    4822:	2301      	movs	r3, #1
    4824:	3219      	adds	r2, #25
    4826:	9906      	ldr	r1, [sp, #24]
    4828:	9805      	ldr	r0, [sp, #20]
    482a:	9e07      	ldr	r6, [sp, #28]
    482c:	47b0      	blx	r6
    482e:	1c43      	adds	r3, r0, #1
    4830:	d030      	beq.n	4894 <_printf_i+0x224>
    4832:	3501      	adds	r5, #1
    4834:	68e3      	ldr	r3, [r4, #12]
    4836:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4838:	1a9b      	subs	r3, r3, r2
    483a:	429d      	cmp	r5, r3
    483c:	dbf0      	blt.n	4820 <_printf_i+0x1b0>
    483e:	e7e9      	b.n	4814 <_printf_i+0x1a4>
    4840:	2d00      	cmp	r5, #0
    4842:	d0a9      	beq.n	4798 <_printf_i+0x128>
    4844:	9e04      	ldr	r6, [sp, #16]
    4846:	0028      	movs	r0, r5
    4848:	0039      	movs	r1, r7
    484a:	f7ff fbf5 	bl	4038 <__aeabi_uidivmod>
    484e:	9b03      	ldr	r3, [sp, #12]
    4850:	3e01      	subs	r6, #1
    4852:	5c5b      	ldrb	r3, [r3, r1]
    4854:	0028      	movs	r0, r5
    4856:	7033      	strb	r3, [r6, #0]
    4858:	0039      	movs	r1, r7
    485a:	f7ff fb67 	bl	3f2c <__udivsi3>
    485e:	1e05      	subs	r5, r0, #0
    4860:	d1f1      	bne.n	4846 <_printf_i+0x1d6>
    4862:	2f08      	cmp	r7, #8
    4864:	d109      	bne.n	487a <_printf_i+0x20a>
    4866:	6823      	ldr	r3, [r4, #0]
    4868:	07db      	lsls	r3, r3, #31
    486a:	d506      	bpl.n	487a <_printf_i+0x20a>
    486c:	6863      	ldr	r3, [r4, #4]
    486e:	6922      	ldr	r2, [r4, #16]
    4870:	4293      	cmp	r3, r2
    4872:	dc02      	bgt.n	487a <_printf_i+0x20a>
    4874:	2330      	movs	r3, #48	; 0x30
    4876:	3e01      	subs	r6, #1
    4878:	7033      	strb	r3, [r6, #0]
    487a:	9b04      	ldr	r3, [sp, #16]
    487c:	1b9b      	subs	r3, r3, r6
    487e:	6123      	str	r3, [r4, #16]
    4880:	9b07      	ldr	r3, [sp, #28]
    4882:	aa09      	add	r2, sp, #36	; 0x24
    4884:	9300      	str	r3, [sp, #0]
    4886:	0021      	movs	r1, r4
    4888:	9b06      	ldr	r3, [sp, #24]
    488a:	9805      	ldr	r0, [sp, #20]
    488c:	f7ff fe82 	bl	4594 <_printf_common>
    4890:	1c43      	adds	r3, r0, #1
    4892:	d1b3      	bne.n	47fc <_printf_i+0x18c>
    4894:	2001      	movs	r0, #1
    4896:	4240      	negs	r0, r0
    4898:	b00b      	add	sp, #44	; 0x2c
    489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    489c:	00004ad6 	.word	0x00004ad6
    48a0:	00004ac5 	.word	0x00004ac5

000048a4 <_sbrk_r>:
    48a4:	2300      	movs	r3, #0
    48a6:	b570      	push	{r4, r5, r6, lr}
    48a8:	4c06      	ldr	r4, [pc, #24]	; (48c4 <_sbrk_r+0x20>)
    48aa:	0005      	movs	r5, r0
    48ac:	0008      	movs	r0, r1
    48ae:	6023      	str	r3, [r4, #0]
    48b0:	f7ff f92a 	bl	3b08 <_sbrk>
    48b4:	1c43      	adds	r3, r0, #1
    48b6:	d103      	bne.n	48c0 <_sbrk_r+0x1c>
    48b8:	6823      	ldr	r3, [r4, #0]
    48ba:	2b00      	cmp	r3, #0
    48bc:	d000      	beq.n	48c0 <_sbrk_r+0x1c>
    48be:	602b      	str	r3, [r5, #0]
    48c0:	bd70      	pop	{r4, r5, r6, pc}
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	20000a3c 	.word	0x20000a3c

000048c8 <memchr>:
    48c8:	b2c9      	uxtb	r1, r1
    48ca:	1882      	adds	r2, r0, r2
    48cc:	4290      	cmp	r0, r2
    48ce:	d101      	bne.n	48d4 <memchr+0xc>
    48d0:	2000      	movs	r0, #0
    48d2:	4770      	bx	lr
    48d4:	7803      	ldrb	r3, [r0, #0]
    48d6:	428b      	cmp	r3, r1
    48d8:	d0fb      	beq.n	48d2 <memchr+0xa>
    48da:	3001      	adds	r0, #1
    48dc:	e7f6      	b.n	48cc <memchr+0x4>

000048de <memmove>:
    48de:	b510      	push	{r4, lr}
    48e0:	4288      	cmp	r0, r1
    48e2:	d902      	bls.n	48ea <memmove+0xc>
    48e4:	188b      	adds	r3, r1, r2
    48e6:	4298      	cmp	r0, r3
    48e8:	d308      	bcc.n	48fc <memmove+0x1e>
    48ea:	2300      	movs	r3, #0
    48ec:	429a      	cmp	r2, r3
    48ee:	d007      	beq.n	4900 <memmove+0x22>
    48f0:	5ccc      	ldrb	r4, [r1, r3]
    48f2:	54c4      	strb	r4, [r0, r3]
    48f4:	3301      	adds	r3, #1
    48f6:	e7f9      	b.n	48ec <memmove+0xe>
    48f8:	5c8b      	ldrb	r3, [r1, r2]
    48fa:	5483      	strb	r3, [r0, r2]
    48fc:	3a01      	subs	r2, #1
    48fe:	d2fb      	bcs.n	48f8 <memmove+0x1a>
    4900:	bd10      	pop	{r4, pc}

00004902 <__malloc_lock>:
    4902:	4770      	bx	lr

00004904 <__malloc_unlock>:
    4904:	4770      	bx	lr

00004906 <_realloc_r>:
    4906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4908:	0007      	movs	r7, r0
    490a:	000d      	movs	r5, r1
    490c:	0016      	movs	r6, r2
    490e:	2900      	cmp	r1, #0
    4910:	d105      	bne.n	491e <_realloc_r+0x18>
    4912:	0011      	movs	r1, r2
    4914:	f7ff fc7a 	bl	420c <_malloc_r>
    4918:	0004      	movs	r4, r0
    491a:	0020      	movs	r0, r4
    491c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    491e:	2a00      	cmp	r2, #0
    4920:	d103      	bne.n	492a <_realloc_r+0x24>
    4922:	f7ff fc29 	bl	4178 <_free_r>
    4926:	0034      	movs	r4, r6
    4928:	e7f7      	b.n	491a <_realloc_r+0x14>
    492a:	f000 f812 	bl	4952 <_malloc_usable_size_r>
    492e:	002c      	movs	r4, r5
    4930:	4286      	cmp	r6, r0
    4932:	d9f2      	bls.n	491a <_realloc_r+0x14>
    4934:	0031      	movs	r1, r6
    4936:	0038      	movs	r0, r7
    4938:	f7ff fc68 	bl	420c <_malloc_r>
    493c:	1e04      	subs	r4, r0, #0
    493e:	d0ec      	beq.n	491a <_realloc_r+0x14>
    4940:	0029      	movs	r1, r5
    4942:	0032      	movs	r2, r6
    4944:	f7ff fbcc 	bl	40e0 <memcpy>
    4948:	0029      	movs	r1, r5
    494a:	0038      	movs	r0, r7
    494c:	f7ff fc14 	bl	4178 <_free_r>
    4950:	e7e3      	b.n	491a <_realloc_r+0x14>

00004952 <_malloc_usable_size_r>:
    4952:	1f0b      	subs	r3, r1, #4
    4954:	681b      	ldr	r3, [r3, #0]
    4956:	1f18      	subs	r0, r3, #4
    4958:	2b00      	cmp	r3, #0
    495a:	da01      	bge.n	4960 <_malloc_usable_size_r+0xe>
    495c:	580b      	ldr	r3, [r1, r0]
    495e:	18c0      	adds	r0, r0, r3
    4960:	4770      	bx	lr
    4962:	0000      	movs	r0, r0
    4964:	42000800 	.word	0x42000800
    4968:	42000c00 	.word	0x42000c00
    496c:	42001000 	.word	0x42001000
    4970:	42001400 	.word	0x42001400
    4974:	42001800 	.word	0x42001800
    4978:	42001c00 	.word	0x42001c00
    497c:	65747441 	.word	0x65747441
    4980:	7461756e 	.word	0x7461756e
    4984:	006e6f69 	.word	0x006e6f69
    4988:	61422020 	.word	0x61422020
    498c:	20206b63 	.word	0x20206b63
    4990:	00000000 	.word	0x00000000
    4994:	64323025 	.word	0x64323025
    4998:	3025202e 	.word	0x3025202e
    499c:	253a6432 	.word	0x253a6432
    49a0:	3a643230 	.word	0x3a643230
    49a4:	64323025 	.word	0x64323025
    49a8:	25202020 	.word	0x25202020
    49ac:	2f643230 	.word	0x2f643230
    49b0:	64323025 	.word	0x64323025
    49b4:	3430252f 	.word	0x3430252f
    49b8:	20202064 	.word	0x20202064
    49bc:	20202020 	.word	0x20202020
    49c0:	20202020 	.word	0x20202020
    49c4:	20202020 	.word	0x20202020
    49c8:	30252020 	.word	0x30252020
    49cc:	20206433 	.word	0x20206433
    49d0:	20202020 	.word	0x20202020
    49d4:	20202020 	.word	0x20202020
    49d8:	20202020 	.word	0x20202020
    49dc:	20202020 	.word	0x20202020
    49e0:	20202020 	.word	0x20202020
    49e4:	33302520 	.word	0x33302520
    49e8:	20202064 	.word	0x20202064
    49ec:	20202020 	.word	0x20202020
    49f0:	20202020 	.word	0x20202020
    49f4:	20202020 	.word	0x20202020
    49f8:	20202020 	.word	0x20202020
    49fc:	25202020 	.word	0x25202020
    4a00:	00643330 	.word	0x00643330
    4a04:	74736948 	.word	0x74736948
    4a08:	0079726f 	.word	0x0079726f
    4a0c:	64323025 	.word	0x64323025
    4a10:	3230253a 	.word	0x3230253a
    4a14:	30253a64 	.word	0x30253a64
    4a18:	00006432 	.word	0x00006432
    4a1c:	64323025 	.word	0x64323025
    4a20:	3230252f 	.word	0x3230252f
    4a24:	30252f64 	.word	0x30252f64
    4a28:	00006434 	.word	0x00006434
    4a2c:	0c0b0a09 	.word	0x0c0b0a09
    4a30:	00000e0d 	.word	0x00000e0d
    4a34:	00003380 	.word	0x00003380
    4a38:	000033dc 	.word	0x000033dc
    4a3c:	000033dc 	.word	0x000033dc
    4a40:	0000337a 	.word	0x0000337a
    4a44:	0000337a 	.word	0x0000337a
    4a48:	00003394 	.word	0x00003394
    4a4c:	00003386 	.word	0x00003386
    4a50:	0000339a 	.word	0x0000339a
    4a54:	000033cc 	.word	0x000033cc
    4a58:	000034cc 	.word	0x000034cc
    4a5c:	0000353a 	.word	0x0000353a
    4a60:	0000353a 	.word	0x0000353a
    4a64:	000034ac 	.word	0x000034ac
    4a68:	000034be 	.word	0x000034be
    4a6c:	000034dc 	.word	0x000034dc
    4a70:	000034b0 	.word	0x000034b0
    4a74:	000034ec 	.word	0x000034ec
    4a78:	00003528 	.word	0x00003528
    4a7c:	74412020 	.word	0x74412020
    4a80:	756e6574 	.word	0x756e6574
    4a84:	6f697461 	.word	0x6f697461
    4a88:	0020206e 	.word	0x0020206e
    4a8c:	69482020 	.word	0x69482020
    4a90:	726f7473 	.word	0x726f7473
    4a94:	00202079 	.word	0x00202079
    4a98:	53522020 	.word	0x53522020
    4a9c:	20204953 	.word	0x20204953
    4aa0:	00000000 	.word	0x00000000
    4aa4:	65532020 	.word	0x65532020
    4aa8:	6e697474 	.word	0x6e697474
    4aac:	20207367 	.word	0x20207367
    4ab0:	00000000 	.word	0x00000000
    4ab4:	2b302d23 	.word	0x2b302d23
    4ab8:	6c680020 	.word	0x6c680020
    4abc:	6665004c 	.word	0x6665004c
    4ac0:	47464567 	.word	0x47464567
    4ac4:	00          	.byte	0x00
    4ac5:	30          	.byte	0x30
    4ac6:	3231      	.short	0x3231
    4ac8:	36353433 	.word	0x36353433
    4acc:	41393837 	.word	0x41393837
    4ad0:	45444342 	.word	0x45444342
    4ad4:	31300046 	.word	0x31300046
    4ad8:	35343332 	.word	0x35343332
    4adc:	39383736 	.word	0x39383736
    4ae0:	64636261 	.word	0x64636261
    4ae4:	00006665 	.word	0x00006665

00004ae8 <_init>:
    4ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aea:	46c0      	nop			; (mov r8, r8)
    4aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4aee:	bc08      	pop	{r3}
    4af0:	469e      	mov	lr, r3
    4af2:	4770      	bx	lr

00004af4 <__init_array_start>:
    4af4:	000000dd 	.word	0x000000dd

00004af8 <_fini>:
    4af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4afa:	46c0      	nop			; (mov r8, r8)
    4afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4afe:	bc08      	pop	{r3}
    4b00:	469e      	mov	lr, r3
    4b02:	4770      	bx	lr

00004b04 <__fini_array_start>:
    4b04:	000000b5 	.word	0x000000b5
