
BACnet_MSTP_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f34  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00002f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000098c  20000010  00002f44  00020010  2**2
                  ALLOC
  3 .stack        00002004  2000099c  000038d0  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00056d82  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007382  00000000  00000000  00076e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c518  00000000  00000000  0007e195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d18  00000000  00000000  0008a6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001308  00000000  00000000  0008b3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000213a9  00000000  00000000  0008c6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001baea  00000000  00000000  000ada76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000947f4  00000000  00000000  000c9560  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002138  00000000  00000000  0015dd54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *
 * @brief  Updates the SystemCoreClock with current core Clock
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
       0:	a0 29 00 20 65 2a 00 00 61 2a 00 00 61 2a 00 00     .). e*..a*..a*..
	...
      2c:	61 2a 00 00 00 00 00 00 00 00 00 00 61 2a 00 00     a*..........a*..
      3c:	29 19 00 00 61 2a 00 00 61 2a 00 00 09 1c 00 00     )...a*..a*......
      4c:	61 2a 00 00 a1 02 00 00 61 2a 00 00 61 2a 00 00     a*......a*..a*..
      5c:	61 2a 00 00 61 2a 00 00 71 22 00 00 81 22 00 00     a*..a*..q"..."..
      6c:	91 22 00 00 a1 22 00 00 b1 22 00 00 c1 22 00 00     ."..."..."..."..
      7c:	61 2a 00 00 61 2a 00 00 61 2a 00 00 89 1c 00 00     a*..a*..a*......
      8c:	99 1c 00 00 a9 1c 00 00 b9 1c 00 00 c9 1c 00 00     ................
      9c:	65 02 00 00 61 2a 00 00 61 2a 00 00 61 2a 00 00     e...a*..a*..a*..
      ac:	61 2a 00 00 00 00 00 00                             a*......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00002f34 	.word	0x00002f34

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00002f34 	.word	0x00002f34
     10c:	00002f34 	.word	0x00002f34
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00002795 	.word	0x00002795
     140:	00002cd5 	.word	0x00002cd5
     144:	20000000 	.word	0x20000000
     148:	20000004 	.word	0x20000004
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     150:	e000      	b.n	154 <delay_cycles_ms+0x4>
{
     152:	0010      	movs	r0, r2
	while (n--) {
     154:	1e42      	subs	r2, r0, #1
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     15a:	4b07      	ldr	r3, [pc, #28]	; (178 <delay_cycles_ms+0x28>)
     15c:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15e:	2b00      	cmp	r3, #0
     160:	d0f7      	beq.n	152 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     162:	4906      	ldr	r1, [pc, #24]	; (17c <delay_cycles_ms+0x2c>)
     164:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     166:	2300      	movs	r3, #0
     168:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <delay_cycles_ms+0x2c>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	03db      	lsls	r3, r3, #15
     170:	d5fb      	bpl.n	16a <delay_cycles_ms+0x1a>
     172:	e7ee      	b.n	152 <delay_cycles_ms+0x2>
	}
}
     174:	4770      	bx	lr
     176:	46c0      	nop			; (mov r8, r8)
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     180:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     182:	0080      	lsls	r0, r0, #2
     184:	4b36      	ldr	r3, [pc, #216]	; (260 <_adc_interrupt_handler+0xe0>)
     186:	58c5      	ldr	r5, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     188:	682b      	ldr	r3, [r5, #0]
     18a:	7e1a      	ldrb	r2, [r3, #24]
     18c:	7ddc      	ldrb	r4, [r3, #23]
     18e:	4014      	ands	r4, r2

	if (flags & ADC_INTFLAG_RESRDY) {
     190:	07e2      	lsls	r2, r4, #31
     192:	d416      	bmi.n	1c2 <_adc_interrupt_handler+0x42>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     194:	0763      	lsls	r3, r4, #29
     196:	d508      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     198:	2304      	movs	r3, #4
     19a:	682a      	ldr	r2, [r5, #0]
     19c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     19e:	7eeb      	ldrb	r3, [r5, #27]
     1a0:	079b      	lsls	r3, r3, #30
     1a2:	d502      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     1a4:	7eab      	ldrb	r3, [r5, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     1a6:	079b      	lsls	r3, r3, #30
     1a8:	d452      	bmi.n	250 <_adc_interrupt_handler+0xd0>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     1aa:	07a3      	lsls	r3, r4, #30
     1ac:	d508      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     1ae:	2302      	movs	r3, #2
     1b0:	682a      	ldr	r2, [r5, #0]
     1b2:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1b4:	7eeb      	ldrb	r3, [r5, #27]
     1b6:	075b      	lsls	r3, r3, #29
     1b8:	d502      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     1ba:	7eab      	ldrb	r3, [r5, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1bc:	075b      	lsls	r3, r3, #29
     1be:	d44b      	bmi.n	258 <_adc_interrupt_handler+0xd8>
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     1c0:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1c2:	2201      	movs	r2, #1
     1c4:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1c6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1c8:	7e53      	ldrb	r3, [r2, #25]
     1ca:	b25b      	sxtb	r3, r3
     1cc:	2b00      	cmp	r3, #0
     1ce:	db27      	blt.n	220 <_adc_interrupt_handler+0xa0>
		return true;
	}

	return false;
     1d0:	2100      	movs	r1, #0
		while (adc_is_syncing(module)) {
     1d2:	2900      	cmp	r1, #0
     1d4:	d1f7      	bne.n	1c6 <_adc_interrupt_handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     1d6:	6968      	ldr	r0, [r5, #20]
     1d8:	1c83      	adds	r3, r0, #2
     1da:	616b      	str	r3, [r5, #20]
     1dc:	8b53      	ldrh	r3, [r2, #26]
     1de:	b29b      	uxth	r3, r3
     1e0:	8003      	strh	r3, [r0, #0]
		if (--module->remaining_conversions > 0) {
     1e2:	8b2b      	ldrh	r3, [r5, #24]
     1e4:	3b01      	subs	r3, #1
     1e6:	b29b      	uxth	r3, r3
     1e8:	832b      	strh	r3, [r5, #24]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d01e      	beq.n	22c <_adc_interrupt_handler+0xac>
			if (module->software_trigger == true) {
     1ee:	7f6b      	ldrb	r3, [r5, #29]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d0cf      	beq.n	194 <_adc_interrupt_handler+0x14>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     1f4:	682e      	ldr	r6, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1f6:	7e72      	ldrb	r2, [r6, #25]
     1f8:	b252      	sxtb	r2, r2
     1fa:	2a00      	cmp	r2, #0
     1fc:	db12      	blt.n	224 <_adc_interrupt_handler+0xa4>
	return false;
     1fe:	0008      	movs	r0, r1

	while (adc_is_syncing(module_inst)) {
     200:	2800      	cmp	r0, #0
     202:	d1f8      	bne.n	1f6 <_adc_interrupt_handler+0x76>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     204:	7b32      	ldrb	r2, [r6, #12]
     206:	2102      	movs	r1, #2
     208:	430a      	orrs	r2, r1
     20a:	b2d2      	uxtb	r2, r2
     20c:	7332      	strb	r2, [r6, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     20e:	682a      	ldr	r2, [r5, #0]
     210:	7e52      	ldrb	r2, [r2, #25]
     212:	b252      	sxtb	r2, r2
     214:	2a00      	cmp	r2, #0
     216:	db07      	blt.n	228 <_adc_interrupt_handler+0xa8>
	return false;
     218:	0002      	movs	r2, r0

	while (adc_is_syncing(module_inst)) {
     21a:	2a00      	cmp	r2, #0
     21c:	d1f7      	bne.n	20e <_adc_interrupt_handler+0x8e>
     21e:	e7b9      	b.n	194 <_adc_interrupt_handler+0x14>
		return true;
     220:	2101      	movs	r1, #1
     222:	e7d6      	b.n	1d2 <_adc_interrupt_handler+0x52>
     224:	0018      	movs	r0, r3
     226:	e7eb      	b.n	200 <_adc_interrupt_handler+0x80>
     228:	001a      	movs	r2, r3
     22a:	e7f6      	b.n	21a <_adc_interrupt_handler+0x9a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     22c:	2301      	movs	r3, #1
     22e:	682a      	ldr	r2, [r5, #0]
     230:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     232:	7f2b      	ldrb	r3, [r5, #28]
     234:	2b05      	cmp	r3, #5
     236:	d1ad      	bne.n	194 <_adc_interrupt_handler+0x14>
				module->job_status = STATUS_OK;
     238:	2300      	movs	r3, #0
     23a:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     23c:	7eeb      	ldrb	r3, [r5, #27]
     23e:	07db      	lsls	r3, r3, #31
     240:	d5a8      	bpl.n	194 <_adc_interrupt_handler+0x14>
					(module->registered_callback_mask &
     242:	7eab      	ldrb	r3, [r5, #26]
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     244:	07db      	lsls	r3, r3, #31
     246:	d5a5      	bpl.n	194 <_adc_interrupt_handler+0x14>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     248:	0028      	movs	r0, r5
     24a:	68ab      	ldr	r3, [r5, #8]
     24c:	4798      	blx	r3
     24e:	e7a1      	b.n	194 <_adc_interrupt_handler+0x14>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     250:	0028      	movs	r0, r5
     252:	68eb      	ldr	r3, [r5, #12]
     254:	4798      	blx	r3
     256:	e7a8      	b.n	1aa <_adc_interrupt_handler+0x2a>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     258:	692b      	ldr	r3, [r5, #16]
     25a:	0028      	movs	r0, r5
     25c:	4798      	blx	r3
}
     25e:	e7af      	b.n	1c0 <_adc_interrupt_handler+0x40>
     260:	20000378 	.word	0x20000378

00000264 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     264:	b510      	push	{r4, lr}
	_adc_interrupt_handler(0);
     266:	2000      	movs	r0, #0
     268:	4b01      	ldr	r3, [pc, #4]	; (270 <ADC_Handler+0xc>)
     26a:	4798      	blx	r3
}
     26c:	bd10      	pop	{r4, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00000181 	.word	0x00000181

00000274 <extint_register_callback>:
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     274:	2a00      	cmp	r2, #0
     276:	d001      	beq.n	27c <extint_register_callback+0x8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     278:	2017      	movs	r0, #23
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     27a:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     27c:	008b      	lsls	r3, r1, #2
     27e:	4a07      	ldr	r2, [pc, #28]	; (29c <extint_register_callback+0x28>)
     280:	589b      	ldr	r3, [r3, r2]
     282:	2b00      	cmp	r3, #0
     284:	d003      	beq.n	28e <extint_register_callback+0x1a>
	} else if (_extint_dev.callbacks[channel] == callback) {
     286:	4283      	cmp	r3, r0
     288:	d005      	beq.n	296 <extint_register_callback+0x22>
	return STATUS_ERR_ALREADY_INITIALIZED;
     28a:	201d      	movs	r0, #29
     28c:	e7f5      	b.n	27a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     28e:	0089      	lsls	r1, r1, #2
     290:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     292:	2000      	movs	r0, #0
     294:	e7f1      	b.n	27a <extint_register_callback+0x6>
		return STATUS_OK;
     296:	2000      	movs	r0, #0
     298:	e7ef      	b.n	27a <extint_register_callback+0x6>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	20000380 	.word	0x20000380

000002a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2a0:	b510      	push	{r4, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2a2:	2200      	movs	r2, #0
     2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <EIC_Handler+0x44>)
     2a6:	701a      	strb	r2, [r3, #0]
     2a8:	e005      	b.n	2b6 <EIC_Handler+0x16>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2aa:	480f      	ldr	r0, [pc, #60]	; (2e8 <EIC_Handler+0x48>)
     2ac:	e00a      	b.n	2c4 <EIC_Handler+0x24>
     2ae:	4a0d      	ldr	r2, [pc, #52]	; (2e4 <EIC_Handler+0x44>)
     2b0:	7813      	ldrb	r3, [r2, #0]
     2b2:	3301      	adds	r3, #1
     2b4:	7013      	strb	r3, [r2, #0]
     2b6:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <EIC_Handler+0x44>)
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b0f      	cmp	r3, #15
     2bc:	d811      	bhi.n	2e2 <EIC_Handler+0x42>
	if (eic_index < EIC_INST_NUM) {
     2be:	2b1f      	cmp	r3, #31
     2c0:	d9f3      	bls.n	2aa <EIC_Handler+0xa>
	} else {
		Assert(false);
		return NULL;
     2c2:	2000      	movs	r0, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2c4:	211f      	movs	r1, #31
     2c6:	4019      	ands	r1, r3
     2c8:	2201      	movs	r2, #1
     2ca:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     2cc:	6901      	ldr	r1, [r0, #16]
		if (extint_chan_is_detected(_current_channel)) {
     2ce:	4211      	tst	r1, r2
     2d0:	d0ed      	beq.n	2ae <EIC_Handler+0xe>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     2d2:	6102      	str	r2, [r0, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2d4:	009b      	lsls	r3, r3, #2
     2d6:	4a05      	ldr	r2, [pc, #20]	; (2ec <EIC_Handler+0x4c>)
     2d8:	589b      	ldr	r3, [r3, r2]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e7      	beq.n	2ae <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2de:	4798      	blx	r3
     2e0:	e7e5      	b.n	2ae <EIC_Handler+0xe>
			}
		}
	}
}
     2e2:	bd10      	pop	{r4, pc}
     2e4:	2000037c 	.word	0x2000037c
     2e8:	40001800 	.word	0x40001800
     2ec:	20000380 	.word	0x20000380

000002f0 <_extint_enable>:
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2f0:	2200      	movs	r2, #0
     2f2:	2a00      	cmp	r2, #0
     2f4:	d006      	beq.n	304 <_extint_enable+0x14>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2f6:	2300      	movs	r3, #0
     2f8:	2b00      	cmp	r3, #0
     2fa:	d00b      	beq.n	314 <_extint_enable+0x24>
	return false;
     2fc:	2300      	movs	r3, #0
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     2fe:	2b00      	cmp	r3, #0
     300:	d1f9      	bne.n	2f6 <_extint_enable+0x6>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     302:	4770      	bx	lr
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     304:	4908      	ldr	r1, [pc, #32]	; (328 <_extint_enable+0x38>)
     306:	780b      	ldrb	r3, [r1, #0]
     308:	2002      	movs	r0, #2
     30a:	4303      	orrs	r3, r0
     30c:	b2db      	uxtb	r3, r3
     30e:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     310:	3201      	adds	r2, #1
     312:	e7ee      	b.n	2f2 <_extint_enable+0x2>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     314:	4a04      	ldr	r2, [pc, #16]	; (328 <_extint_enable+0x38>)
     316:	7852      	ldrb	r2, [r2, #1]
     318:	b252      	sxtb	r2, r2
     31a:	2a00      	cmp	r2, #0
     31c:	db01      	blt.n	322 <_extint_enable+0x32>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     31e:	3301      	adds	r3, #1
     320:	e7ea      	b.n	2f8 <_extint_enable+0x8>
			return true;
     322:	2301      	movs	r3, #1
     324:	e7eb      	b.n	2fe <_extint_enable+0xe>
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <_system_extint_init>:
{
     32c:	b500      	push	{lr}
     32e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     330:	4a1b      	ldr	r2, [pc, #108]	; (3a0 <_system_extint_init+0x74>)
     332:	6993      	ldr	r3, [r2, #24]
     334:	2140      	movs	r1, #64	; 0x40
     336:	430b      	orrs	r3, r1
     338:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     340:	2005      	movs	r0, #5
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <_system_extint_init+0x78>)
     344:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     346:	2005      	movs	r0, #5
     348:	4b17      	ldr	r3, [pc, #92]	; (3a8 <_system_extint_init+0x7c>)
     34a:	4798      	blx	r3
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     34c:	2200      	movs	r2, #0
     34e:	2a00      	cmp	r2, #0
     350:	d006      	beq.n	360 <_system_extint_init+0x34>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     352:	2300      	movs	r3, #0
     354:	2b00      	cmp	r3, #0
     356:	d00b      	beq.n	370 <_system_extint_init+0x44>
	return false;
     358:	2300      	movs	r3, #0
	while (extint_is_syncing()) {
     35a:	2b00      	cmp	r3, #0
     35c:	d1f9      	bne.n	352 <_system_extint_init+0x26>
     35e:	e016      	b.n	38e <_system_extint_init+0x62>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     360:	4912      	ldr	r1, [pc, #72]	; (3ac <_system_extint_init+0x80>)
     362:	780b      	ldrb	r3, [r1, #0]
     364:	2001      	movs	r0, #1
     366:	4303      	orrs	r3, r0
     368:	b2db      	uxtb	r3, r3
     36a:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     36c:	3201      	adds	r2, #1
     36e:	e7ee      	b.n	34e <_system_extint_init+0x22>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     370:	4a0e      	ldr	r2, [pc, #56]	; (3ac <_system_extint_init+0x80>)
     372:	7852      	ldrb	r2, [r2, #1]
     374:	b252      	sxtb	r2, r2
     376:	2a00      	cmp	r2, #0
     378:	db01      	blt.n	37e <_system_extint_init+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     37a:	3301      	adds	r3, #1
     37c:	e7ea      	b.n	354 <_system_extint_init+0x28>
			return true;
     37e:	2301      	movs	r3, #1
     380:	e7eb      	b.n	35a <_system_extint_init+0x2e>
		_extint_dev.callbacks[j] = NULL;
     382:	0099      	lsls	r1, r3, #2
     384:	2000      	movs	r0, #0
     386:	4a0a      	ldr	r2, [pc, #40]	; (3b0 <_system_extint_init+0x84>)
     388:	5088      	str	r0, [r1, r2]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     38a:	3301      	adds	r3, #1
     38c:	b2db      	uxtb	r3, r3
     38e:	2b0f      	cmp	r3, #15
     390:	d9f7      	bls.n	382 <_system_extint_init+0x56>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     392:	2210      	movs	r2, #16
     394:	4b07      	ldr	r3, [pc, #28]	; (3b4 <_system_extint_init+0x88>)
     396:	601a      	str	r2, [r3, #0]
	_extint_enable();
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_system_extint_init+0x8c>)
     39a:	4798      	blx	r3
}
     39c:	b003      	add	sp, #12
     39e:	bd00      	pop	{pc}
     3a0:	40000400 	.word	0x40000400
     3a4:	000028c9 	.word	0x000028c9
     3a8:	00002841 	.word	0x00002841
     3ac:	40001800 	.word	0x40001800
     3b0:	20000380 	.word	0x20000380
     3b4:	e000e100 	.word	0xe000e100
     3b8:	000002f1 	.word	0x000002f1

000003bc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3be:	b083      	sub	sp, #12
     3c0:	0005      	movs	r5, r0
     3c2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3c4:	a901      	add	r1, sp, #4
     3c6:	2300      	movs	r3, #0
     3c8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3ca:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3cc:	7923      	ldrb	r3, [r4, #4]
     3ce:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3d0:	7a23      	ldrb	r3, [r4, #8]
     3d2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3d4:	7820      	ldrb	r0, [r4, #0]
     3d6:	4b16      	ldr	r3, [pc, #88]	; (430 <extint_chan_set_config+0x74>)
     3d8:	4798      	blx	r3
	if (eic_index < EIC_INST_NUM) {
     3da:	2d1f      	cmp	r5, #31
     3dc:	d920      	bls.n	420 <extint_chan_set_config+0x64>
		return NULL;
     3de:	2000      	movs	r0, #0

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3e0:	2207      	movs	r2, #7
     3e2:	402a      	ands	r2, r5
     3e4:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3e6:	7ae3      	ldrb	r3, [r4, #11]
     3e8:	001e      	movs	r6, r3

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3ea:	7aa1      	ldrb	r1, [r4, #10]
     3ec:	2900      	cmp	r1, #0
     3ee:	d002      	beq.n	3f6 <extint_chan_set_config+0x3a>
		new_config |= EIC_CONFIG_FILTEN0;
     3f0:	2608      	movs	r6, #8
     3f2:	431e      	orrs	r6, r3
     3f4:	b2f6      	uxtb	r6, r6
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     3f6:	08eb      	lsrs	r3, r5, #3
		= (EIC_module->CONFIG[channel / 8].reg &
     3f8:	3306      	adds	r3, #6
     3fa:	009b      	lsls	r3, r3, #2
     3fc:	5819      	ldr	r1, [r3, r0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3fe:	270f      	movs	r7, #15
     400:	4097      	lsls	r7, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     402:	43b9      	bics	r1, r7
			(new_config << config_pos);
     404:	4096      	lsls	r6, r2
     406:	0032      	movs	r2, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     408:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     40a:	501a      	str	r2, [r3, r0]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     40c:	7a63      	ldrb	r3, [r4, #9]
     40e:	2b00      	cmp	r3, #0
     410:	d108      	bne.n	424 <extint_chan_set_config+0x68>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     412:	6943      	ldr	r3, [r0, #20]
     414:	2201      	movs	r2, #1
     416:	40aa      	lsls	r2, r5
     418:	4393      	bics	r3, r2
     41a:	6143      	str	r3, [r0, #20]
	}
}
     41c:	b003      	add	sp, #12
     41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return eics[eic_index];
     420:	4804      	ldr	r0, [pc, #16]	; (434 <extint_chan_set_config+0x78>)
     422:	e7dd      	b.n	3e0 <extint_chan_set_config+0x24>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     424:	6943      	ldr	r3, [r0, #20]
     426:	2201      	movs	r2, #1
     428:	40aa      	lsls	r2, r5
     42a:	4313      	orrs	r3, r2
     42c:	6143      	str	r3, [r0, #20]
     42e:	e7f5      	b.n	41c <extint_chan_set_config+0x60>
     430:	00002a01 	.word	0x00002a01
     434:	40001800 	.word	0x40001800

00000438 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     438:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     43a:	7a93      	ldrb	r3, [r2, #10]
     43c:	b25b      	sxtb	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	db08      	blt.n	454 <rtc_calendar_enable+0x1c>
        return false;
     442:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     444:	2b00      	cmp	r3, #0
     446:	d1f8      	bne.n	43a <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     448:	8813      	ldrh	r3, [r2, #0]
     44a:	2102      	movs	r1, #2
     44c:	430b      	orrs	r3, r1
     44e:	b29b      	uxth	r3, r3
     450:	8013      	strh	r3, [r2, #0]
}
     452:	4770      	bx	lr
                return true;
     454:	2301      	movs	r3, #1
     456:	e7f5      	b.n	444 <rtc_calendar_enable+0xc>

00000458 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     458:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     45a:	7a93      	ldrb	r3, [r2, #10]
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	db0a      	blt.n	478 <rtc_calendar_disable+0x20>
        return false;
     462:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     464:	2b00      	cmp	r3, #0
     466:	d1f8      	bne.n	45a <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     468:	33c1      	adds	r3, #193	; 0xc1
     46a:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     46c:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     46e:	8813      	ldrh	r3, [r2, #0]
     470:	2102      	movs	r1, #2
     472:	438b      	bics	r3, r1
     474:	8013      	strh	r3, [r2, #0]
}
     476:	4770      	bx	lr
                return true;
     478:	2301      	movs	r3, #1
     47a:	e7f3      	b.n	464 <rtc_calendar_disable+0xc>

0000047c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     47c:	b570      	push	{r4, r5, r6, lr}
     47e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     480:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <rtc_calendar_reset+0x2c>)
     484:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     486:	6823      	ldr	r3, [r4, #0]
     488:	7a9b      	ldrb	r3, [r3, #10]
     48a:	b25b      	sxtb	r3, r3
     48c:	2b00      	cmp	r3, #0
     48e:	db08      	blt.n	4a2 <rtc_calendar_reset+0x26>
        return false;
     490:	2300      	movs	r3, #0
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     492:	2b00      	cmp	r3, #0
     494:	d1f7      	bne.n	486 <rtc_calendar_reset+0xa>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     496:	882b      	ldrh	r3, [r5, #0]
     498:	2201      	movs	r2, #1
     49a:	4313      	orrs	r3, r2
     49c:	b29b      	uxth	r3, r3
     49e:	802b      	strh	r3, [r5, #0]
}
     4a0:	bd70      	pop	{r4, r5, r6, pc}
                return true;
     4a2:	2301      	movs	r3, #1
     4a4:	e7f5      	b.n	492 <rtc_calendar_reset+0x16>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000459 	.word	0x00000459

000004ac <rtc_calendar_time_to_register_value>:
{
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     4ac:	88cb      	ldrh	r3, [r1, #6]
     4ae:	88c2      	ldrh	r2, [r0, #6]
     4b0:	1a9b      	subs	r3, r3, r2
     4b2:	069b      	lsls	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     4b4:	794a      	ldrb	r2, [r1, #5]
     4b6:	0592      	lsls	r2, r2, #22
     4b8:	4313      	orrs	r3, r2

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     4ba:	790a      	ldrb	r2, [r1, #4]
     4bc:	0452      	lsls	r2, r2, #17
     4be:	4313      	orrs	r3, r2

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     4c0:	788a      	ldrb	r2, [r1, #2]
     4c2:	0312      	lsls	r2, r2, #12
     4c4:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     4c6:	7902      	ldrb	r2, [r0, #4]
     4c8:	2a00      	cmp	r2, #0
     4ca:	d105      	bne.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4cc:	78ca      	ldrb	r2, [r1, #3]
     4ce:	2a00      	cmp	r2, #0
     4d0:	d002      	beq.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     4d2:	2280      	movs	r2, #128	; 0x80
     4d4:	0252      	lsls	r2, r2, #9
     4d6:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     4d8:	7848      	ldrb	r0, [r1, #1]
     4da:	0180      	lsls	r0, r0, #6
     4dc:	4303      	orrs	r3, r0

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     4de:	7808      	ldrb	r0, [r1, #0]
     4e0:	4318      	orrs	r0, r3

	return register_value;
}
     4e2:	4770      	bx	lr

000004e4 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     4e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4e6:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     4e8:	4b06      	ldr	r3, [pc, #24]	; (504 <rtc_calendar_set_time+0x20>)
     4ea:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     4ec:	7aa3      	ldrb	r3, [r4, #10]
     4ee:	b25b      	sxtb	r3, r3
     4f0:	2b00      	cmp	r3, #0
     4f2:	db04      	blt.n	4fe <rtc_calendar_set_time+0x1a>
        return false;
     4f4:	2300      	movs	r3, #0

	while (rtc_calendar_is_syncing(module)) {
     4f6:	2b00      	cmp	r3, #0
     4f8:	d1f8      	bne.n	4ec <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     4fa:	6120      	str	r0, [r4, #16]
}
     4fc:	bd10      	pop	{r4, pc}
                return true;
     4fe:	2301      	movs	r3, #1
     500:	e7f9      	b.n	4f6 <rtc_calendar_set_time+0x12>
     502:	46c0      	nop			; (mov r8, r8)
     504:	000004ad 	.word	0x000004ad

00000508 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     508:	b570      	push	{r4, r5, r6, lr}
     50a:	000d      	movs	r5, r1
     50c:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     50e:	6806      	ldr	r6, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     510:	2a01      	cmp	r2, #1
     512:	d901      	bls.n	518 <rtc_calendar_set_alarm+0x10>
		return STATUS_ERR_INVALID_ARG;
     514:	2017      	movs	r0, #23

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
     516:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     518:	4b09      	ldr	r3, [pc, #36]	; (540 <rtc_calendar_set_alarm+0x38>)
     51a:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     51c:	7ab3      	ldrb	r3, [r6, #10]
     51e:	b25b      	sxtb	r3, r3
     520:	2b00      	cmp	r3, #0
     522:	db0a      	blt.n	53a <rtc_calendar_set_alarm+0x32>
        return false;
     524:	2300      	movs	r3, #0
	while (rtc_calendar_is_syncing(module)) {
     526:	2b00      	cmp	r3, #0
     528:	d1f8      	bne.n	51c <rtc_calendar_set_alarm+0x14>
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     52a:	3403      	adds	r4, #3
     52c:	00e4      	lsls	r4, r4, #3
     52e:	51a0      	str	r0, [r4, r6]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     530:	7a2b      	ldrb	r3, [r5, #8]
     532:	1934      	adds	r4, r6, r4
     534:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
     536:	2000      	movs	r0, #0
     538:	e7ed      	b.n	516 <rtc_calendar_set_alarm+0xe>
                return true;
     53a:	2301      	movs	r3, #1
     53c:	e7f3      	b.n	526 <rtc_calendar_set_alarm+0x1e>
     53e:	46c0      	nop			; (mov r8, r8)
     540:	000004ad 	.word	0x000004ad

00000544 <_rtc_calendar_set_config>:
{
     544:	b570      	push	{r4, r5, r6, lr}
     546:	0005      	movs	r5, r0
     548:	000e      	movs	r6, r1
	Rtc *const rtc_module = module->hw;
     54a:	6801      	ldr	r1, [r0, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     54c:	8832      	ldrh	r2, [r6, #0]
     54e:	2308      	movs	r3, #8
     550:	4313      	orrs	r3, r2
     552:	b29b      	uxth	r3, r3
	if (!(config->clock_24h)) {
     554:	7930      	ldrb	r0, [r6, #4]
     556:	2800      	cmp	r0, #0
     558:	d102      	bne.n	560 <_rtc_calendar_set_config+0x1c>
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     55a:	2348      	movs	r3, #72	; 0x48
     55c:	4313      	orrs	r3, r2
     55e:	b29b      	uxth	r3, r3
	if (config->clear_on_match) {
     560:	78b2      	ldrb	r2, [r6, #2]
     562:	2a00      	cmp	r2, #0
     564:	d002      	beq.n	56c <_rtc_calendar_set_config+0x28>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     566:	2280      	movs	r2, #128	; 0x80
     568:	4313      	orrs	r3, r2
     56a:	b29b      	uxth	r3, r3
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     56c:	800b      	strh	r3, [r1, #0]
	if (config->continuously_update) {
     56e:	78f3      	ldrb	r3, [r6, #3]
     570:	2b00      	cmp	r3, #0
     572:	d004      	beq.n	57e <_rtc_calendar_set_config+0x3a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     574:	884b      	ldrh	r3, [r1, #2]
     576:	2280      	movs	r2, #128	; 0x80
     578:	01d2      	lsls	r2, r2, #7
     57a:	4313      	orrs	r3, r2
     57c:	804b      	strh	r3, [r1, #2]
{
     57e:	2400      	movs	r4, #0
     580:	e00a      	b.n	598 <_rtc_calendar_set_config+0x54>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     582:	00a3      	lsls	r3, r4, #2
     584:	191b      	adds	r3, r3, r4
     586:	0059      	lsls	r1, r3, #1
     588:	3108      	adds	r1, #8
     58a:	1871      	adds	r1, r6, r1
     58c:	0022      	movs	r2, r4
     58e:	0028      	movs	r0, r5
     590:	4b03      	ldr	r3, [pc, #12]	; (5a0 <_rtc_calendar_set_config+0x5c>)
     592:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     594:	3401      	adds	r4, #1
     596:	b2e4      	uxtb	r4, r4
     598:	2c00      	cmp	r4, #0
     59a:	d0f2      	beq.n	582 <_rtc_calendar_set_config+0x3e>
}
     59c:	bd70      	pop	{r4, r5, r6, pc}
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	00000509 	.word	0x00000509

000005a4 <rtc_calendar_init>:
{
     5a4:	b530      	push	{r4, r5, lr}
     5a6:	b083      	sub	sp, #12
     5a8:	0004      	movs	r4, r0
     5aa:	0015      	movs	r5, r2
	module->hw = hw;
     5ac:	6001      	str	r1, [r0, #0]
     5ae:	4a0f      	ldr	r2, [pc, #60]	; (5ec <rtc_calendar_init+0x48>)
     5b0:	6993      	ldr	r3, [r2, #24]
     5b2:	2120      	movs	r1, #32
     5b4:	430b      	orrs	r3, r1
     5b6:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     5b8:	a901      	add	r1, sp, #4
     5ba:	2302      	movs	r3, #2
     5bc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     5be:	2004      	movs	r0, #4
     5c0:	4b0b      	ldr	r3, [pc, #44]	; (5f0 <rtc_calendar_init+0x4c>)
     5c2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     5c4:	2004      	movs	r0, #4
     5c6:	4b0b      	ldr	r3, [pc, #44]	; (5f4 <rtc_calendar_init+0x50>)
     5c8:	4798      	blx	r3
	rtc_calendar_reset(module);
     5ca:	0020      	movs	r0, r4
     5cc:	4b0a      	ldr	r3, [pc, #40]	; (5f8 <rtc_calendar_init+0x54>)
     5ce:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     5d0:	792b      	ldrb	r3, [r5, #4]
     5d2:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     5d4:	78eb      	ldrb	r3, [r5, #3]
     5d6:	7163      	strb	r3, [r4, #5]
	module->year_init_value     = config->year_init_value;
     5d8:	88eb      	ldrh	r3, [r5, #6]
     5da:	80e3      	strh	r3, [r4, #6]
	_rtc_instance[0] = module;
     5dc:	4b07      	ldr	r3, [pc, #28]	; (5fc <rtc_calendar_init+0x58>)
     5de:	601c      	str	r4, [r3, #0]
	_rtc_calendar_set_config(module, config);
     5e0:	0029      	movs	r1, r5
     5e2:	0020      	movs	r0, r4
     5e4:	4b06      	ldr	r3, [pc, #24]	; (600 <rtc_calendar_init+0x5c>)
     5e6:	4798      	blx	r3
}
     5e8:	b003      	add	sp, #12
     5ea:	bd30      	pop	{r4, r5, pc}
     5ec:	40000400 	.word	0x40000400
     5f0:	000028c9 	.word	0x000028c9
     5f4:	00002841 	.word	0x00002841
     5f8:	0000047d 	.word	0x0000047d
     5fc:	200003c0 	.word	0x200003c0
     600:	00000545 	.word	0x00000545

00000604 <rtc_calendar_frequency_correction>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     604:	6802      	ldr	r2, [r0, #0]

	/* Check if valid argument. */
	if (abs(value) > 0x7F) {
     606:	17c8      	asrs	r0, r1, #31
     608:	180b      	adds	r3, r1, r0
     60a:	4043      	eors	r3, r0
     60c:	2b7f      	cmp	r3, #127	; 0x7f
     60e:	dd01      	ble.n	614 <rtc_calendar_frequency_correction+0x10>
		/* Value bigger than allowed, return invalid argument. */
		return STATUS_ERR_INVALID_ARG;
     610:	2017      	movs	r0, #23

	/* Set value. */
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;

	return STATUS_OK;
}
     612:	4770      	bx	lr
	new_correction_value = abs(value);
     614:	0018      	movs	r0, r3
	if (value < 0) {
     616:	2900      	cmp	r1, #0
     618:	db0a      	blt.n	630 <rtc_calendar_frequency_correction+0x2c>
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     61a:	7a93      	ldrb	r3, [r2, #10]
     61c:	b25b      	sxtb	r3, r3
     61e:	2b00      	cmp	r3, #0
     620:	db09      	blt.n	636 <rtc_calendar_frequency_correction+0x32>
        return false;
     622:	2300      	movs	r3, #0
	while (rtc_calendar_is_syncing(module)) {
     624:	2b00      	cmp	r3, #0
     626:	d1f8      	bne.n	61a <rtc_calendar_frequency_correction+0x16>
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;
     628:	b2c0      	uxtb	r0, r0
     62a:	7310      	strb	r0, [r2, #12]
	return STATUS_OK;
     62c:	2000      	movs	r0, #0
     62e:	e7f0      	b.n	612 <rtc_calendar_frequency_correction+0xe>
		new_correction_value |= RTC_FREQCORR_SIGN;
     630:	2080      	movs	r0, #128	; 0x80
     632:	4318      	orrs	r0, r3
     634:	e7f1      	b.n	61a <rtc_calendar_frequency_correction+0x16>
                return true;
     636:	2301      	movs	r3, #1
     638:	e7f4      	b.n	624 <rtc_calendar_frequency_correction+0x20>

0000063a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     63a:	b5f0      	push	{r4, r5, r6, r7, lr}
     63c:	46de      	mov	lr, fp
     63e:	4657      	mov	r7, sl
     640:	464e      	mov	r6, r9
     642:	4645      	mov	r5, r8
     644:	b5e0      	push	{r5, r6, r7, lr}
     646:	b085      	sub	sp, #20
     648:	4689      	mov	r9, r1
     64a:	0016      	movs	r6, r2
     64c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     64e:	2200      	movs	r2, #0
     650:	2300      	movs	r3, #0
     652:	2100      	movs	r1, #0
     654:	468b      	mov	fp, r1
     656:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     658:	253f      	movs	r5, #63	; 0x3f
     65a:	9600      	str	r6, [sp, #0]
     65c:	9701      	str	r7, [sp, #4]
     65e:	9002      	str	r0, [sp, #8]
     660:	4649      	mov	r1, r9
     662:	9103      	str	r1, [sp, #12]
     664:	e011      	b.n	68a <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     666:	2120      	movs	r1, #32
     668:	1b49      	subs	r1, r1, r5
     66a:	2400      	movs	r4, #0
     66c:	3401      	adds	r4, #1
     66e:	40cc      	lsrs	r4, r1
     670:	e013      	b.n	69a <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     672:	9800      	ldr	r0, [sp, #0]
     674:	9901      	ldr	r1, [sp, #4]
     676:	1a12      	subs	r2, r2, r0
     678:	418b      	sbcs	r3, r1
			q |= bit_shift;
     67a:	4659      	mov	r1, fp
     67c:	4660      	mov	r0, ip
     67e:	4301      	orrs	r1, r0
     680:	468b      	mov	fp, r1
     682:	4651      	mov	r1, sl
     684:	4321      	orrs	r1, r4
     686:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     688:	3d01      	subs	r5, #1
     68a:	2d00      	cmp	r5, #0
     68c:	db23      	blt.n	6d6 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     68e:	2120      	movs	r1, #32
     690:	4249      	negs	r1, r1
     692:	1869      	adds	r1, r5, r1
     694:	d4e7      	bmi.n	666 <long_division+0x2c>
     696:	2401      	movs	r4, #1
     698:	408c      	lsls	r4, r1
     69a:	2101      	movs	r1, #1
     69c:	40a9      	lsls	r1, r5
     69e:	468c      	mov	ip, r1
		r = r << 1;
     6a0:	1892      	adds	r2, r2, r2
     6a2:	415b      	adcs	r3, r3
     6a4:	0010      	movs	r0, r2
     6a6:	0019      	movs	r1, r3
		if (n & bit_shift) {
     6a8:	9e02      	ldr	r6, [sp, #8]
     6aa:	4667      	mov	r7, ip
     6ac:	403e      	ands	r6, r7
     6ae:	46b1      	mov	r9, r6
     6b0:	9e03      	ldr	r6, [sp, #12]
     6b2:	4026      	ands	r6, r4
     6b4:	46b0      	mov	r8, r6
     6b6:	464e      	mov	r6, r9
     6b8:	4647      	mov	r7, r8
     6ba:	433e      	orrs	r6, r7
     6bc:	d003      	beq.n	6c6 <long_division+0x8c>
			r |= 0x01;
     6be:	2601      	movs	r6, #1
     6c0:	4306      	orrs	r6, r0
     6c2:	0032      	movs	r2, r6
     6c4:	000b      	movs	r3, r1
		if (r >= d) {
     6c6:	9800      	ldr	r0, [sp, #0]
     6c8:	9901      	ldr	r1, [sp, #4]
     6ca:	4299      	cmp	r1, r3
     6cc:	d8dc      	bhi.n	688 <long_division+0x4e>
     6ce:	d1d0      	bne.n	672 <long_division+0x38>
     6d0:	4290      	cmp	r0, r2
     6d2:	d8d9      	bhi.n	688 <long_division+0x4e>
     6d4:	e7cd      	b.n	672 <long_division+0x38>
		}
	}

	return q;
}
     6d6:	4658      	mov	r0, fp
     6d8:	4651      	mov	r1, sl
     6da:	b005      	add	sp, #20
     6dc:	bc3c      	pop	{r2, r3, r4, r5}
     6de:	4690      	mov	r8, r2
     6e0:	4699      	mov	r9, r3
     6e2:	46a2      	mov	sl, r4
     6e4:	46ab      	mov	fp, r5
     6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000006e8 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     6e8:	0849      	lsrs	r1, r1, #1
     6ea:	4281      	cmp	r1, r0
     6ec:	d201      	bcs.n	6f2 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6ee:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     6f0:	4770      	bx	lr
     6f2:	2300      	movs	r3, #0
     6f4:	e002      	b.n	6fc <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     6f6:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     6f8:	3301      	adds	r3, #1
     6fa:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     6fc:	4281      	cmp	r1, r0
     6fe:	d2fa      	bcs.n	6f6 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     700:	3b01      	subs	r3, #1
     702:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     704:	2bff      	cmp	r3, #255	; 0xff
     706:	d901      	bls.n	70c <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     708:	2040      	movs	r0, #64	; 0x40
     70a:	e7f1      	b.n	6f0 <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     70c:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     70e:	2000      	movs	r0, #0
     710:	e7ee      	b.n	6f0 <_sercom_get_sync_baud_val+0x8>
	...

00000714 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     714:	b570      	push	{r4, r5, r6, lr}
     716:	b082      	sub	sp, #8
     718:	000c      	movs	r4, r1
     71a:	0015      	movs	r5, r2
     71c:	aa06      	add	r2, sp, #24
     71e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     720:	0002      	movs	r2, r0
     722:	434a      	muls	r2, r1
     724:	42a2      	cmp	r2, r4
     726:	d902      	bls.n	72e <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     728:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     72a:	b002      	add	sp, #8
     72c:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     72e:	2b00      	cmp	r3, #0
     730:	d114      	bne.n	75c <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     732:	0002      	movs	r2, r0
     734:	0008      	movs	r0, r1
     736:	2100      	movs	r1, #0
     738:	4e1b      	ldr	r6, [pc, #108]	; (7a8 <_sercom_get_async_baud_val+0x94>)
     73a:	47b0      	blx	r6
     73c:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     73e:	0022      	movs	r2, r4
     740:	2300      	movs	r3, #0
     742:	2000      	movs	r0, #0
     744:	4c19      	ldr	r4, [pc, #100]	; (7ac <_sercom_get_async_baud_val+0x98>)
     746:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     748:	2200      	movs	r2, #0
     74a:	2301      	movs	r3, #1
     74c:	1a12      	subs	r2, r2, r0
     74e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     750:	0c10      	lsrs	r0, r2, #16
     752:	041b      	lsls	r3, r3, #16
     754:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     756:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     758:	2000      	movs	r0, #0
     75a:	e7e6      	b.n	72a <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     75c:	2b01      	cmp	r3, #1
     75e:	d001      	beq.n	764 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     760:	2000      	movs	r0, #0
     762:	e7f8      	b.n	756 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     764:	000a      	movs	r2, r1
     766:	2300      	movs	r3, #0
     768:	2100      	movs	r1, #0
     76a:	4e0f      	ldr	r6, [pc, #60]	; (7a8 <_sercom_get_async_baud_val+0x94>)
     76c:	47b0      	blx	r6
     76e:	0002      	movs	r2, r0
     770:	000b      	movs	r3, r1
     772:	9200      	str	r2, [sp, #0]
     774:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     776:	0020      	movs	r0, r4
     778:	2100      	movs	r1, #0
     77a:	4e0c      	ldr	r6, [pc, #48]	; (7ac <_sercom_get_async_baud_val+0x98>)
     77c:	47b0      	blx	r6
     77e:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     780:	2380      	movs	r3, #128	; 0x80
     782:	019b      	lsls	r3, r3, #6
     784:	4298      	cmp	r0, r3
     786:	d901      	bls.n	78c <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     788:	2040      	movs	r0, #64	; 0x40
     78a:	e7ce      	b.n	72a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     78c:	0f61      	lsrs	r1, r4, #29
     78e:	00e0      	lsls	r0, r4, #3
     790:	9a00      	ldr	r2, [sp, #0]
     792:	9b01      	ldr	r3, [sp, #4]
     794:	4c05      	ldr	r4, [pc, #20]	; (7ac <_sercom_get_async_baud_val+0x98>)
     796:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     798:	b2c0      	uxtb	r0, r0
     79a:	00f3      	lsls	r3, r6, #3
     79c:	b2db      	uxtb	r3, r3
     79e:	1ac0      	subs	r0, r0, r3
     7a0:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     7a2:	0340      	lsls	r0, r0, #13
     7a4:	4330      	orrs	r0, r6
     7a6:	e7d6      	b.n	756 <_sercom_get_async_baud_val+0x42>
     7a8:	00002ded 	.word	0x00002ded
     7ac:	0000063b 	.word	0x0000063b

000007b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7b0:	b510      	push	{r4, lr}
     7b2:	b082      	sub	sp, #8
     7b4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7b6:	4b0e      	ldr	r3, [pc, #56]	; (7f0 <sercom_set_gclk_generator+0x40>)
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	2b00      	cmp	r3, #0
     7bc:	d007      	beq.n	7ce <sercom_set_gclk_generator+0x1e>
     7be:	2900      	cmp	r1, #0
     7c0:	d105      	bne.n	7ce <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     7c2:	4b0b      	ldr	r3, [pc, #44]	; (7f0 <sercom_set_gclk_generator+0x40>)
     7c4:	785b      	ldrb	r3, [r3, #1]
     7c6:	4283      	cmp	r3, r0
     7c8:	d010      	beq.n	7ec <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7ca:	201d      	movs	r0, #29
     7cc:	e00c      	b.n	7e8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     7ce:	a901      	add	r1, sp, #4
     7d0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7d2:	2013      	movs	r0, #19
     7d4:	4b07      	ldr	r3, [pc, #28]	; (7f4 <sercom_set_gclk_generator+0x44>)
     7d6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7d8:	2013      	movs	r0, #19
     7da:	4b07      	ldr	r3, [pc, #28]	; (7f8 <sercom_set_gclk_generator+0x48>)
     7dc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     7de:	4b04      	ldr	r3, [pc, #16]	; (7f0 <sercom_set_gclk_generator+0x40>)
     7e0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     7e2:	2201      	movs	r2, #1
     7e4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     7e6:	2000      	movs	r0, #0
}
     7e8:	b002      	add	sp, #8
     7ea:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     7ec:	2000      	movs	r0, #0
     7ee:	e7fb      	b.n	7e8 <sercom_set_gclk_generator+0x38>
     7f0:	2000002c 	.word	0x2000002c
     7f4:	000028c9 	.word	0x000028c9
     7f8:	00002841 	.word	0x00002841

000007fc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7fc:	4b40      	ldr	r3, [pc, #256]	; (900 <_sercom_get_default_pad+0x104>)
     7fe:	4298      	cmp	r0, r3
     800:	d031      	beq.n	866 <_sercom_get_default_pad+0x6a>
     802:	d90a      	bls.n	81a <_sercom_get_default_pad+0x1e>
     804:	4b3f      	ldr	r3, [pc, #252]	; (904 <_sercom_get_default_pad+0x108>)
     806:	4298      	cmp	r0, r3
     808:	d04d      	beq.n	8a6 <_sercom_get_default_pad+0xaa>
     80a:	4b3f      	ldr	r3, [pc, #252]	; (908 <_sercom_get_default_pad+0x10c>)
     80c:	4298      	cmp	r0, r3
     80e:	d05a      	beq.n	8c6 <_sercom_get_default_pad+0xca>
     810:	4b3e      	ldr	r3, [pc, #248]	; (90c <_sercom_get_default_pad+0x110>)
     812:	4298      	cmp	r0, r3
     814:	d037      	beq.n	886 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     816:	2000      	movs	r0, #0
}
     818:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     81a:	4b3d      	ldr	r3, [pc, #244]	; (910 <_sercom_get_default_pad+0x114>)
     81c:	4298      	cmp	r0, r3
     81e:	d00c      	beq.n	83a <_sercom_get_default_pad+0x3e>
     820:	4b3c      	ldr	r3, [pc, #240]	; (914 <_sercom_get_default_pad+0x118>)
     822:	4298      	cmp	r0, r3
     824:	d1f7      	bne.n	816 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     826:	2901      	cmp	r1, #1
     828:	d05f      	beq.n	8ea <_sercom_get_default_pad+0xee>
     82a:	2900      	cmp	r1, #0
     82c:	d015      	beq.n	85a <_sercom_get_default_pad+0x5e>
     82e:	2902      	cmp	r1, #2
     830:	d015      	beq.n	85e <_sercom_get_default_pad+0x62>
     832:	2903      	cmp	r1, #3
     834:	d015      	beq.n	862 <_sercom_get_default_pad+0x66>
	return 0;
     836:	2000      	movs	r0, #0
     838:	e7ee      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     83a:	2901      	cmp	r1, #1
     83c:	d053      	beq.n	8e6 <_sercom_get_default_pad+0xea>
     83e:	2900      	cmp	r1, #0
     840:	d005      	beq.n	84e <_sercom_get_default_pad+0x52>
     842:	2902      	cmp	r1, #2
     844:	d005      	beq.n	852 <_sercom_get_default_pad+0x56>
     846:	2903      	cmp	r1, #3
     848:	d005      	beq.n	856 <_sercom_get_default_pad+0x5a>
	return 0;
     84a:	2000      	movs	r0, #0
     84c:	e7e4      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     84e:	4832      	ldr	r0, [pc, #200]	; (918 <_sercom_get_default_pad+0x11c>)
     850:	e7e2      	b.n	818 <_sercom_get_default_pad+0x1c>
     852:	4832      	ldr	r0, [pc, #200]	; (91c <_sercom_get_default_pad+0x120>)
     854:	e7e0      	b.n	818 <_sercom_get_default_pad+0x1c>
     856:	4832      	ldr	r0, [pc, #200]	; (920 <_sercom_get_default_pad+0x124>)
     858:	e7de      	b.n	818 <_sercom_get_default_pad+0x1c>
     85a:	2003      	movs	r0, #3
     85c:	e7dc      	b.n	818 <_sercom_get_default_pad+0x1c>
     85e:	4831      	ldr	r0, [pc, #196]	; (924 <_sercom_get_default_pad+0x128>)
     860:	e7da      	b.n	818 <_sercom_get_default_pad+0x1c>
     862:	4831      	ldr	r0, [pc, #196]	; (928 <_sercom_get_default_pad+0x12c>)
     864:	e7d8      	b.n	818 <_sercom_get_default_pad+0x1c>
     866:	2901      	cmp	r1, #1
     868:	d041      	beq.n	8ee <_sercom_get_default_pad+0xf2>
     86a:	2900      	cmp	r1, #0
     86c:	d005      	beq.n	87a <_sercom_get_default_pad+0x7e>
     86e:	2902      	cmp	r1, #2
     870:	d005      	beq.n	87e <_sercom_get_default_pad+0x82>
     872:	2903      	cmp	r1, #3
     874:	d005      	beq.n	882 <_sercom_get_default_pad+0x86>
	return 0;
     876:	2000      	movs	r0, #0
     878:	e7ce      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     87a:	482c      	ldr	r0, [pc, #176]	; (92c <_sercom_get_default_pad+0x130>)
     87c:	e7cc      	b.n	818 <_sercom_get_default_pad+0x1c>
     87e:	482c      	ldr	r0, [pc, #176]	; (930 <_sercom_get_default_pad+0x134>)
     880:	e7ca      	b.n	818 <_sercom_get_default_pad+0x1c>
     882:	482c      	ldr	r0, [pc, #176]	; (934 <_sercom_get_default_pad+0x138>)
     884:	e7c8      	b.n	818 <_sercom_get_default_pad+0x1c>
     886:	2901      	cmp	r1, #1
     888:	d033      	beq.n	8f2 <_sercom_get_default_pad+0xf6>
     88a:	2900      	cmp	r1, #0
     88c:	d005      	beq.n	89a <_sercom_get_default_pad+0x9e>
     88e:	2902      	cmp	r1, #2
     890:	d005      	beq.n	89e <_sercom_get_default_pad+0xa2>
     892:	2903      	cmp	r1, #3
     894:	d005      	beq.n	8a2 <_sercom_get_default_pad+0xa6>
	return 0;
     896:	2000      	movs	r0, #0
     898:	e7be      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     89a:	4827      	ldr	r0, [pc, #156]	; (938 <_sercom_get_default_pad+0x13c>)
     89c:	e7bc      	b.n	818 <_sercom_get_default_pad+0x1c>
     89e:	4827      	ldr	r0, [pc, #156]	; (93c <_sercom_get_default_pad+0x140>)
     8a0:	e7ba      	b.n	818 <_sercom_get_default_pad+0x1c>
     8a2:	4827      	ldr	r0, [pc, #156]	; (940 <_sercom_get_default_pad+0x144>)
     8a4:	e7b8      	b.n	818 <_sercom_get_default_pad+0x1c>
     8a6:	2901      	cmp	r1, #1
     8a8:	d025      	beq.n	8f6 <_sercom_get_default_pad+0xfa>
     8aa:	2900      	cmp	r1, #0
     8ac:	d005      	beq.n	8ba <_sercom_get_default_pad+0xbe>
     8ae:	2902      	cmp	r1, #2
     8b0:	d005      	beq.n	8be <_sercom_get_default_pad+0xc2>
     8b2:	2903      	cmp	r1, #3
     8b4:	d005      	beq.n	8c2 <_sercom_get_default_pad+0xc6>
	return 0;
     8b6:	2000      	movs	r0, #0
     8b8:	e7ae      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8ba:	4822      	ldr	r0, [pc, #136]	; (944 <_sercom_get_default_pad+0x148>)
     8bc:	e7ac      	b.n	818 <_sercom_get_default_pad+0x1c>
     8be:	4822      	ldr	r0, [pc, #136]	; (948 <_sercom_get_default_pad+0x14c>)
     8c0:	e7aa      	b.n	818 <_sercom_get_default_pad+0x1c>
     8c2:	4822      	ldr	r0, [pc, #136]	; (94c <_sercom_get_default_pad+0x150>)
     8c4:	e7a8      	b.n	818 <_sercom_get_default_pad+0x1c>
     8c6:	2901      	cmp	r1, #1
     8c8:	d017      	beq.n	8fa <_sercom_get_default_pad+0xfe>
     8ca:	2900      	cmp	r1, #0
     8cc:	d005      	beq.n	8da <_sercom_get_default_pad+0xde>
     8ce:	2902      	cmp	r1, #2
     8d0:	d005      	beq.n	8de <_sercom_get_default_pad+0xe2>
     8d2:	2903      	cmp	r1, #3
     8d4:	d005      	beq.n	8e2 <_sercom_get_default_pad+0xe6>
	return 0;
     8d6:	2000      	movs	r0, #0
     8d8:	e79e      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8da:	481d      	ldr	r0, [pc, #116]	; (950 <_sercom_get_default_pad+0x154>)
     8dc:	e79c      	b.n	818 <_sercom_get_default_pad+0x1c>
     8de:	481d      	ldr	r0, [pc, #116]	; (954 <_sercom_get_default_pad+0x158>)
     8e0:	e79a      	b.n	818 <_sercom_get_default_pad+0x1c>
     8e2:	481d      	ldr	r0, [pc, #116]	; (958 <_sercom_get_default_pad+0x15c>)
     8e4:	e798      	b.n	818 <_sercom_get_default_pad+0x1c>
     8e6:	481d      	ldr	r0, [pc, #116]	; (95c <_sercom_get_default_pad+0x160>)
     8e8:	e796      	b.n	818 <_sercom_get_default_pad+0x1c>
     8ea:	481d      	ldr	r0, [pc, #116]	; (960 <_sercom_get_default_pad+0x164>)
     8ec:	e794      	b.n	818 <_sercom_get_default_pad+0x1c>
     8ee:	481d      	ldr	r0, [pc, #116]	; (964 <_sercom_get_default_pad+0x168>)
     8f0:	e792      	b.n	818 <_sercom_get_default_pad+0x1c>
     8f2:	481d      	ldr	r0, [pc, #116]	; (968 <_sercom_get_default_pad+0x16c>)
     8f4:	e790      	b.n	818 <_sercom_get_default_pad+0x1c>
     8f6:	481d      	ldr	r0, [pc, #116]	; (96c <_sercom_get_default_pad+0x170>)
     8f8:	e78e      	b.n	818 <_sercom_get_default_pad+0x1c>
     8fa:	481d      	ldr	r0, [pc, #116]	; (970 <_sercom_get_default_pad+0x174>)
     8fc:	e78c      	b.n	818 <_sercom_get_default_pad+0x1c>
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	42001000 	.word	0x42001000
     904:	42001800 	.word	0x42001800
     908:	42001c00 	.word	0x42001c00
     90c:	42001400 	.word	0x42001400
     910:	42000800 	.word	0x42000800
     914:	42000c00 	.word	0x42000c00
     918:	00040003 	.word	0x00040003
     91c:	00060003 	.word	0x00060003
     920:	00070003 	.word	0x00070003
     924:	001e0003 	.word	0x001e0003
     928:	001f0003 	.word	0x001f0003
     92c:	00080003 	.word	0x00080003
     930:	000a0003 	.word	0x000a0003
     934:	000b0003 	.word	0x000b0003
     938:	00100003 	.word	0x00100003
     93c:	00120003 	.word	0x00120003
     940:	00130003 	.word	0x00130003
     944:	000c0003 	.word	0x000c0003
     948:	000e0003 	.word	0x000e0003
     94c:	000f0003 	.word	0x000f0003
     950:	00160003 	.word	0x00160003
     954:	00180003 	.word	0x00180003
     958:	00190003 	.word	0x00190003
     95c:	00050003 	.word	0x00050003
     960:	00010003 	.word	0x00010003
     964:	00090003 	.word	0x00090003
     968:	00110003 	.word	0x00110003
     96c:	000d0003 	.word	0x000d0003
     970:	00170003 	.word	0x00170003

00000974 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     974:	b530      	push	{r4, r5, lr}
     976:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     978:	4c0a      	ldr	r4, [pc, #40]	; (9a4 <_sercom_get_sercom_inst_index+0x30>)
     97a:	466b      	mov	r3, sp
     97c:	0022      	movs	r2, r4
     97e:	ca32      	ldmia	r2!, {r1, r4, r5}
     980:	c332      	stmia	r3!, {r1, r4, r5}
     982:	ca32      	ldmia	r2!, {r1, r4, r5}
     984:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     986:	2300      	movs	r3, #0
     988:	2b05      	cmp	r3, #5
     98a:	d808      	bhi.n	99e <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     98c:	009a      	lsls	r2, r3, #2
     98e:	4669      	mov	r1, sp
     990:	5852      	ldr	r2, [r2, r1]
     992:	4282      	cmp	r2, r0
     994:	d001      	beq.n	99a <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     996:	3301      	adds	r3, #1
     998:	e7f6      	b.n	988 <_sercom_get_sercom_inst_index+0x14>
			return i;
     99a:	b2d8      	uxtb	r0, r3
     99c:	e000      	b.n	9a0 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     99e:	2000      	movs	r0, #0
}
     9a0:	b007      	add	sp, #28
     9a2:	bd30      	pop	{r4, r5, pc}
     9a4:	00002eac 	.word	0x00002eac

000009a8 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9a8:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     9aa:	2202      	movs	r2, #2
     9ac:	761a      	strb	r2, [r3, #24]
}
     9ae:	4770      	bx	lr

000009b0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b2:	b087      	sub	sp, #28
     9b4:	0007      	movs	r7, r0
     9b6:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9b8:	6806      	ldr	r6, [r0, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9ba:	ab05      	add	r3, sp, #20
     9bc:	2280      	movs	r2, #128	; 0x80
     9be:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9c0:	2200      	movs	r2, #0
     9c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9c4:	2101      	movs	r1, #1
     9c6:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     9c8:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     9ca:	782b      	ldrb	r3, [r5, #0]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d101      	bne.n	9d4 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9d0:	ab05      	add	r3, sp, #20
     9d2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     9d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
     9d6:	9301      	str	r3, [sp, #4]
     9d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     9da:	9302      	str	r3, [sp, #8]
     9dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     9de:	9303      	str	r3, [sp, #12]
     9e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     9e2:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     9e4:	2400      	movs	r4, #0
     9e6:	e006      	b.n	9f6 <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9e8:	0021      	movs	r1, r4
     9ea:	0030      	movs	r0, r6
     9ec:	4b3d      	ldr	r3, [pc, #244]	; (ae4 <_spi_set_config+0x134>)
     9ee:	4798      	blx	r3
     9f0:	e008      	b.n	a04 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     9f2:	3401      	adds	r4, #1
     9f4:	b2e4      	uxtb	r4, r4
     9f6:	2c03      	cmp	r4, #3
     9f8:	d80d      	bhi.n	a16 <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9fa:	00a3      	lsls	r3, r4, #2
     9fc:	aa01      	add	r2, sp, #4
     9fe:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     a00:	2800      	cmp	r0, #0
     a02:	d0f1      	beq.n	9e8 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     a04:	1c43      	adds	r3, r0, #1
     a06:	d0f4      	beq.n	9f2 <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a08:	a905      	add	r1, sp, #20
     a0a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a0c:	0c00      	lsrs	r0, r0, #16
     a0e:	b2c0      	uxtb	r0, r0
     a10:	4b35      	ldr	r3, [pc, #212]	; (ae8 <_spi_set_config+0x138>)
     a12:	4798      	blx	r3
     a14:	e7ed      	b.n	9f2 <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     a16:	782b      	ldrb	r3, [r5, #0]
     a18:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     a1a:	7c2b      	ldrb	r3, [r5, #16]
     a1c:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     a1e:	7cab      	ldrb	r3, [r5, #18]
     a20:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     a22:	7d2b      	ldrb	r3, [r5, #20]
     a24:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     a26:	2200      	movs	r2, #0
     a28:	466b      	mov	r3, sp
     a2a:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     a2c:	782b      	ldrb	r3, [r5, #0]
     a2e:	2b01      	cmp	r3, #1
     a30:	d014      	beq.n	a5c <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     a32:	782b      	ldrb	r3, [r5, #0]
     a34:	2b00      	cmp	r3, #0
     a36:	d127      	bne.n	a88 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     a38:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     a3a:	8baa      	ldrh	r2, [r5, #28]
     a3c:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     a3e:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     a40:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     a42:	7fef      	ldrb	r7, [r5, #31]
     a44:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     a46:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     a48:	4320      	orrs	r0, r4
     a4a:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     a4c:	2020      	movs	r0, #32
     a4e:	5c28      	ldrb	r0, [r5, r0]
     a50:	2800      	cmp	r0, #0
     a52:	d01b      	beq.n	a8c <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     a54:	2140      	movs	r1, #64	; 0x40
     a56:	4311      	orrs	r1, r2
     a58:	b289      	uxth	r1, r1
     a5a:	e017      	b.n	a8c <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a5c:	6838      	ldr	r0, [r7, #0]
     a5e:	4b23      	ldr	r3, [pc, #140]	; (aec <_spi_set_config+0x13c>)
     a60:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a62:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     a64:	b2c0      	uxtb	r0, r0
     a66:	4b22      	ldr	r3, [pc, #136]	; (af0 <_spi_set_config+0x140>)
     a68:	4798      	blx	r3
     a6a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     a6c:	466b      	mov	r3, sp
     a6e:	1c9a      	adds	r2, r3, #2
     a70:	69a8      	ldr	r0, [r5, #24]
     a72:	4b20      	ldr	r3, [pc, #128]	; (af4 <_spi_set_config+0x144>)
     a74:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     a76:	2800      	cmp	r0, #0
     a78:	d001      	beq.n	a7e <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     a7a:	2017      	movs	r0, #23
     a7c:	e030      	b.n	ae0 <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     a7e:	466b      	mov	r3, sp
     a80:	3302      	adds	r3, #2
     a82:	781b      	ldrb	r3, [r3, #0]
     a84:	7333      	strb	r3, [r6, #12]
     a86:	e7d4      	b.n	a32 <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     a88:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     a8a:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     a8c:	686a      	ldr	r2, [r5, #4]
     a8e:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     a90:	68aa      	ldr	r2, [r5, #8]
     a92:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a94:	68ea      	ldr	r2, [r5, #12]
     a96:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a98:	7c2a      	ldrb	r2, [r5, #16]
     a9a:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a9c:	7c69      	ldrb	r1, [r5, #17]
     a9e:	2900      	cmp	r1, #0
     aa0:	d103      	bne.n	aaa <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     aa2:	4915      	ldr	r1, [pc, #84]	; (af8 <_spi_set_config+0x148>)
     aa4:	7889      	ldrb	r1, [r1, #2]
     aa6:	0789      	lsls	r1, r1, #30
     aa8:	d501      	bpl.n	aae <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     aaa:	2180      	movs	r1, #128	; 0x80
     aac:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     aae:	7ca9      	ldrb	r1, [r5, #18]
     ab0:	2900      	cmp	r1, #0
     ab2:	d002      	beq.n	aba <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ab4:	2180      	movs	r1, #128	; 0x80
     ab6:	0289      	lsls	r1, r1, #10
     ab8:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     aba:	7ce9      	ldrb	r1, [r5, #19]
     abc:	2900      	cmp	r1, #0
     abe:	d002      	beq.n	ac6 <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ac0:	2180      	movs	r1, #128	; 0x80
     ac2:	0089      	lsls	r1, r1, #2
     ac4:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     ac6:	7d29      	ldrb	r1, [r5, #20]
     ac8:	2900      	cmp	r1, #0
     aca:	d002      	beq.n	ad2 <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     acc:	2180      	movs	r1, #128	; 0x80
     ace:	0189      	lsls	r1, r1, #6
     ad0:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     ad2:	6831      	ldr	r1, [r6, #0]
     ad4:	430b      	orrs	r3, r1
     ad6:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     ad8:	6873      	ldr	r3, [r6, #4]
     ada:	431a      	orrs	r2, r3
     adc:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     ade:	2000      	movs	r0, #0
}
     ae0:	b007      	add	sp, #28
     ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae4:	000007fd 	.word	0x000007fd
     ae8:	00002a01 	.word	0x00002a01
     aec:	00000975 	.word	0x00000975
     af0:	000028e5 	.word	0x000028e5
     af4:	000006e9 	.word	0x000006e9
     af8:	41002000 	.word	0x41002000

00000afc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     afc:	b5f0      	push	{r4, r5, r6, r7, lr}
     afe:	b085      	sub	sp, #20
     b00:	0005      	movs	r5, r0
     b02:	000c      	movs	r4, r1
     b04:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     b06:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     b08:	680b      	ldr	r3, [r1, #0]
     b0a:	079b      	lsls	r3, r3, #30
     b0c:	d502      	bpl.n	b14 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     b0e:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     b10:	b005      	add	sp, #20
     b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b14:	680b      	ldr	r3, [r1, #0]
     b16:	07db      	lsls	r3, r3, #31
     b18:	d501      	bpl.n	b1e <spi_init+0x22>
		return STATUS_BUSY;
     b1a:	2005      	movs	r0, #5
     b1c:	e7f8      	b.n	b10 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b1e:	0008      	movs	r0, r1
     b20:	4b28      	ldr	r3, [pc, #160]	; (bc4 <spi_init+0xc8>)
     b22:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b24:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b26:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b28:	2301      	movs	r3, #1
     b2a:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b2c:	4a26      	ldr	r2, [pc, #152]	; (bc8 <spi_init+0xcc>)
     b2e:	6a11      	ldr	r1, [r2, #32]
     b30:	430b      	orrs	r3, r1
     b32:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     b34:	2724      	movs	r7, #36	; 0x24
     b36:	5df3      	ldrb	r3, [r6, r7]
     b38:	a903      	add	r1, sp, #12
     b3a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b3c:	b2c3      	uxtb	r3, r0
     b3e:	9301      	str	r3, [sp, #4]
     b40:	0018      	movs	r0, r3
     b42:	4b22      	ldr	r3, [pc, #136]	; (bcc <spi_init+0xd0>)
     b44:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b46:	9801      	ldr	r0, [sp, #4]
     b48:	4b21      	ldr	r3, [pc, #132]	; (bd0 <spi_init+0xd4>)
     b4a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b4c:	5df0      	ldrb	r0, [r6, r7]
     b4e:	2100      	movs	r1, #0
     b50:	4b20      	ldr	r3, [pc, #128]	; (bd4 <spi_init+0xd8>)
     b52:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     b54:	7833      	ldrb	r3, [r6, #0]
     b56:	2b01      	cmp	r3, #1
     b58:	d008      	beq.n	b6c <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     b5a:	7833      	ldrb	r3, [r6, #0]
     b5c:	2b00      	cmp	r3, #0
     b5e:	d103      	bne.n	b68 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     b60:	6823      	ldr	r3, [r4, #0]
     b62:	2208      	movs	r2, #8
     b64:	4313      	orrs	r3, r2
     b66:	6023      	str	r3, [r4, #0]
{
     b68:	2300      	movs	r3, #0
     b6a:	e00b      	b.n	b84 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b6c:	6823      	ldr	r3, [r4, #0]
     b6e:	220c      	movs	r2, #12
     b70:	4313      	orrs	r3, r2
     b72:	6023      	str	r3, [r4, #0]
     b74:	e7f1      	b.n	b5a <spi_init+0x5e>
		module->callback[i]        = NULL;
     b76:	1c9a      	adds	r2, r3, #2
     b78:	0092      	lsls	r2, r2, #2
     b7a:	18aa      	adds	r2, r5, r2
     b7c:	2100      	movs	r1, #0
     b7e:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     b80:	3301      	adds	r3, #1
     b82:	b2db      	uxtb	r3, r3
     b84:	2b06      	cmp	r3, #6
     b86:	d9f6      	bls.n	b76 <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     b88:	2200      	movs	r2, #0
     b8a:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     b8c:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     b8e:	2300      	movs	r3, #0
     b90:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     b92:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     b94:	3236      	adds	r2, #54	; 0x36
     b96:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     b98:	3201      	adds	r2, #1
     b9a:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     b9c:	3201      	adds	r2, #1
     b9e:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     ba0:	3a35      	subs	r2, #53	; 0x35
     ba2:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     ba4:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     ba6:	6828      	ldr	r0, [r5, #0]
     ba8:	4b06      	ldr	r3, [pc, #24]	; (bc4 <spi_init+0xc8>)
     baa:	4798      	blx	r3
     bac:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     bae:	490a      	ldr	r1, [pc, #40]	; (bd8 <spi_init+0xdc>)
     bb0:	4b0a      	ldr	r3, [pc, #40]	; (bdc <spi_init+0xe0>)
     bb2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     bb4:	00a4      	lsls	r4, r4, #2
     bb6:	4b0a      	ldr	r3, [pc, #40]	; (be0 <spi_init+0xe4>)
     bb8:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     bba:	0031      	movs	r1, r6
     bbc:	0028      	movs	r0, r5
     bbe:	4b09      	ldr	r3, [pc, #36]	; (be4 <spi_init+0xe8>)
     bc0:	4798      	blx	r3
     bc2:	e7a5      	b.n	b10 <spi_init+0x14>
     bc4:	00000975 	.word	0x00000975
     bc8:	40000400 	.word	0x40000400
     bcc:	000028c9 	.word	0x000028c9
     bd0:	00002841 	.word	0x00002841
     bd4:	000007b1 	.word	0x000007b1
     bd8:	00001059 	.word	0x00001059
     bdc:	0000220d 	.word	0x0000220d
     be0:	20000984 	.word	0x20000984
     be4:	000009b1 	.word	0x000009b1

00000be8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bea:	0004      	movs	r4, r0
     bec:	000e      	movs	r6, r1
     bee:	0017      	movs	r7, r2
     bf0:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     bf2:	2338      	movs	r3, #56	; 0x38
     bf4:	5cc3      	ldrb	r3, [r0, r3]
     bf6:	2b05      	cmp	r3, #5
     bf8:	d06d      	beq.n	cd6 <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     bfa:	2a00      	cmp	r2, #0
     bfc:	d101      	bne.n	c02 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     bfe:	2217      	movs	r2, #23
     c00:	e06a      	b.n	cd8 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     c02:	79c3      	ldrb	r3, [r0, #7]
     c04:	2b00      	cmp	r3, #0
     c06:	d101      	bne.n	c0c <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     c08:	221c      	movs	r2, #28
     c0a:	e065      	b.n	cd8 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     c0c:	7943      	ldrb	r3, [r0, #5]
     c0e:	2b00      	cmp	r3, #0
     c10:	d103      	bne.n	c1a <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     c12:	6803      	ldr	r3, [r0, #0]
     c14:	7e1b      	ldrb	r3, [r3, #24]
     c16:	079b      	lsls	r3, r3, #30
     c18:	d401      	bmi.n	c1e <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     c1a:	2000      	movs	r0, #0
     c1c:	e037      	b.n	c8e <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     c1e:	4b2f      	ldr	r3, [pc, #188]	; (cdc <spi_read_buffer_wait+0xf4>)
     c20:	4798      	blx	r3
     c22:	e7fa      	b.n	c1a <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c24:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c26:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     c28:	07d2      	lsls	r2, r2, #31
     c2a:	d5fb      	bpl.n	c24 <spi_read_buffer_wait+0x3c>
     c2c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     c2e:	07d2      	lsls	r2, r2, #31
     c30:	d534      	bpl.n	c9c <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     c32:	05ea      	lsls	r2, r5, #23
     c34:	0dd2      	lsrs	r2, r2, #23
     c36:	629a      	str	r2, [r3, #40]	; 0x28
     c38:	e030      	b.n	c9c <spi_read_buffer_wait+0xb4>
     c3a:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     c3c:	4a28      	ldr	r2, [pc, #160]	; (ce0 <spi_read_buffer_wait+0xf8>)
     c3e:	4293      	cmp	r3, r2
     c40:	d805      	bhi.n	c4e <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     c42:	6822      	ldr	r2, [r4, #0]
     c44:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     c46:	0752      	lsls	r2, r2, #29
     c48:	d401      	bmi.n	c4e <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     c4a:	3301      	adds	r3, #1
     c4c:	e7f6      	b.n	c3c <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     c4e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     c50:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     c52:	0792      	lsls	r2, r2, #30
     c54:	d404      	bmi.n	c60 <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     c56:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     c58:	075b      	lsls	r3, r3, #29
     c5a:	d422      	bmi.n	ca2 <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     c5c:	2212      	movs	r2, #18
     c5e:	e03b      	b.n	cd8 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     c60:	0020      	movs	r0, r4
     c62:	4b1e      	ldr	r3, [pc, #120]	; (cdc <spi_read_buffer_wait+0xf4>)
     c64:	4798      	blx	r3
				return STATUS_ABORTED;
     c66:	2204      	movs	r2, #4
     c68:	e036      	b.n	cd8 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     c6a:	2200      	movs	r2, #0
     c6c:	e026      	b.n	cbc <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     c6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     c70:	05ff      	lsls	r7, r7, #23
     c72:	0dff      	lsrs	r7, r7, #23
     c74:	e001      	b.n	c7a <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     c76:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     c78:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     c7a:	2a00      	cmp	r2, #0
     c7c:	d12c      	bne.n	cd8 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     c7e:	1c43      	adds	r3, r0, #1
     c80:	b29b      	uxth	r3, r3
     c82:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c84:	79a2      	ldrb	r2, [r4, #6]
     c86:	2a01      	cmp	r2, #1
     c88:	d01e      	beq.n	cc8 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     c8a:	0018      	movs	r0, r3
     c8c:	000f      	movs	r7, r1
	while (length--) {
     c8e:	1e79      	subs	r1, r7, #1
     c90:	b289      	uxth	r1, r1
     c92:	2f00      	cmp	r7, #0
     c94:	d01d      	beq.n	cd2 <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     c96:	7963      	ldrb	r3, [r4, #5]
     c98:	2b01      	cmp	r3, #1
     c9a:	d0c3      	beq.n	c24 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     c9c:	7963      	ldrb	r3, [r4, #5]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d0cb      	beq.n	c3a <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ca2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ca4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     ca6:	0752      	lsls	r2, r2, #29
     ca8:	d5fb      	bpl.n	ca2 <spi_read_buffer_wait+0xba>
     caa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     cac:	0752      	lsls	r2, r2, #29
     cae:	d5e2      	bpl.n	c76 <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     cb0:	8b5a      	ldrh	r2, [r3, #26]
     cb2:	0752      	lsls	r2, r2, #29
     cb4:	d5d9      	bpl.n	c6a <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     cb6:	2204      	movs	r2, #4
     cb8:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     cba:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cbc:	79a7      	ldrb	r7, [r4, #6]
     cbe:	2f01      	cmp	r7, #1
     cc0:	d0d5      	beq.n	c6e <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     cc2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     cc4:	b2ff      	uxtb	r7, r7
     cc6:	e7d8      	b.n	c7a <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     cc8:	3002      	adds	r0, #2
     cca:	0a3f      	lsrs	r7, r7, #8
     ccc:	54f7      	strb	r7, [r6, r3]
     cce:	b283      	uxth	r3, r0
     cd0:	e7db      	b.n	c8a <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     cd2:	2200      	movs	r2, #0
     cd4:	e000      	b.n	cd8 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     cd6:	2205      	movs	r2, #5
}
     cd8:	0010      	movs	r0, r2
     cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cdc:	000009a9 	.word	0x000009a9
     ce0:	00002710 	.word	0x00002710

00000ce4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     ce4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     ce6:	7943      	ldrb	r3, [r0, #5]
     ce8:	2b01      	cmp	r3, #1
     cea:	d001      	beq.n	cf0 <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     cec:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     cee:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     cf0:	7a03      	ldrb	r3, [r0, #8]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d16c      	bne.n	dd0 <spi_select_slave+0xec>
		if (select) {
     cf6:	2a00      	cmp	r2, #0
     cf8:	d058      	beq.n	dac <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     cfa:	784b      	ldrb	r3, [r1, #1]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d043      	beq.n	d88 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d00:	6803      	ldr	r3, [r0, #0]
     d02:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     d04:	07db      	lsls	r3, r3, #31
     d06:	d411      	bmi.n	d2c <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     d08:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     d0a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     d0c:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d0e:	2900      	cmp	r1, #0
     d10:	d10a      	bne.n	d28 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     d12:	01db      	lsls	r3, r3, #7
     d14:	4931      	ldr	r1, [pc, #196]	; (ddc <spi_select_slave+0xf8>)
     d16:	468c      	mov	ip, r1
     d18:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d1a:	211f      	movs	r1, #31
     d1c:	4011      	ands	r1, r2
     d1e:	2201      	movs	r2, #1
     d20:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d22:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     d24:	2005      	movs	r0, #5
     d26:	e7e2      	b.n	cee <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
     d28:	2300      	movs	r3, #0
     d2a:	e7f6      	b.n	d1a <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     d2c:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     d2e:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     d30:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     d32:	2c00      	cmp	r4, #0
     d34:	d104      	bne.n	d40 <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     d36:	01db      	lsls	r3, r3, #7
     d38:	4c28      	ldr	r4, [pc, #160]	; (ddc <spi_select_slave+0xf8>)
     d3a:	46a4      	mov	ip, r4
     d3c:	4463      	add	r3, ip
     d3e:	e000      	b.n	d42 <spi_select_slave+0x5e>
		return NULL;
     d40:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d42:	241f      	movs	r4, #31
     d44:	4014      	ands	r4, r2
     d46:	2201      	movs	r2, #1
     d48:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d4a:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     d4c:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     d4e:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d50:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     d52:	07c9      	lsls	r1, r1, #31
     d54:	d500      	bpl.n	d58 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d56:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     d58:	79c3      	ldrb	r3, [r0, #7]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d13a      	bne.n	dd4 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d5e:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d60:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     d62:	0752      	lsls	r2, r2, #29
     d64:	d5fb      	bpl.n	d5e <spi_select_slave+0x7a>
     d66:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     d68:	0752      	lsls	r2, r2, #29
     d6a:	d535      	bpl.n	dd8 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d6c:	8b5a      	ldrh	r2, [r3, #26]
     d6e:	0752      	lsls	r2, r2, #29
     d70:	d501      	bpl.n	d76 <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d72:	2204      	movs	r2, #4
     d74:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d76:	7982      	ldrb	r2, [r0, #6]
     d78:	2a01      	cmp	r2, #1
     d7a:	d002      	beq.n	d82 <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     d7e:	2000      	movs	r0, #0
     d80:	e7b5      	b.n	cee <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     d84:	2000      	movs	r0, #0
     d86:	e7b2      	b.n	cee <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     d88:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     d8a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     d8c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     d8e:	2900      	cmp	r1, #0
     d90:	d10a      	bne.n	da8 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     d92:	01db      	lsls	r3, r3, #7
     d94:	4911      	ldr	r1, [pc, #68]	; (ddc <spi_select_slave+0xf8>)
     d96:	468c      	mov	ip, r1
     d98:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d9a:	211f      	movs	r1, #31
     d9c:	4011      	ands	r1, r2
     d9e:	2201      	movs	r2, #1
     da0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     da2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     da4:	2000      	movs	r0, #0
     da6:	e7a2      	b.n	cee <spi_select_slave+0xa>
		return NULL;
     da8:	2300      	movs	r3, #0
     daa:	e7f6      	b.n	d9a <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     dac:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     dae:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     db0:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     db2:	2900      	cmp	r1, #0
     db4:	d10a      	bne.n	dcc <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     db6:	01db      	lsls	r3, r3, #7
     db8:	4908      	ldr	r1, [pc, #32]	; (ddc <spi_select_slave+0xf8>)
     dba:	468c      	mov	ip, r1
     dbc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dbe:	211f      	movs	r1, #31
     dc0:	4011      	ands	r1, r2
     dc2:	2201      	movs	r2, #1
     dc4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     dc6:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     dc8:	2000      	movs	r0, #0
     dca:	e790      	b.n	cee <spi_select_slave+0xa>
		return NULL;
     dcc:	2300      	movs	r3, #0
     dce:	e7f6      	b.n	dbe <spi_select_slave+0xda>
     dd0:	2000      	movs	r0, #0
     dd2:	e78c      	b.n	cee <spi_select_slave+0xa>
     dd4:	2000      	movs	r0, #0
     dd6:	e78a      	b.n	cee <spi_select_slave+0xa>
     dd8:	2000      	movs	r0, #0
     dda:	e788      	b.n	cee <spi_select_slave+0xa>
     ddc:	41004400 	.word	0x41004400

00000de0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     de0:	b5f0      	push	{r4, r5, r6, r7, lr}
     de2:	46d6      	mov	lr, sl
     de4:	464f      	mov	r7, r9
     de6:	4646      	mov	r6, r8
     de8:	b5c0      	push	{r6, r7, lr}
     dea:	b082      	sub	sp, #8
     dec:	0004      	movs	r4, r0
     dee:	468a      	mov	sl, r1
     df0:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     df2:	2338      	movs	r3, #56	; 0x38
     df4:	5cc3      	ldrb	r3, [r0, r3]
     df6:	2b05      	cmp	r3, #5
     df8:	d100      	bne.n	dfc <spi_write_buffer_wait+0x1c>
     dfa:	e0d8      	b.n	fae <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     dfc:	2a00      	cmp	r2, #0
     dfe:	d101      	bne.n	e04 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     e00:	2017      	movs	r0, #23
     e02:	e0d5      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     e04:	7943      	ldrb	r3, [r0, #5]
     e06:	2b00      	cmp	r3, #0
     e08:	d103      	bne.n	e12 <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e0a:	6803      	ldr	r3, [r0, #0]
     e0c:	7e1b      	ldrb	r3, [r3, #24]
     e0e:	079b      	lsls	r3, r3, #30
     e10:	d402      	bmi.n	e18 <spi_write_buffer_wait+0x38>
     e12:	46bc      	mov	ip, r7
     e14:	2600      	movs	r6, #0
     e16:	e025      	b.n	e64 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     e18:	4b6a      	ldr	r3, [pc, #424]	; (fc4 <spi_write_buffer_wait+0x1e4>)
     e1a:	4798      	blx	r3
     e1c:	e7f9      	b.n	e12 <spi_write_buffer_wait+0x32>
     e1e:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e20:	4a69      	ldr	r2, [pc, #420]	; (fc8 <spi_write_buffer_wait+0x1e8>)
     e22:	4293      	cmp	r3, r2
     e24:	d805      	bhi.n	e32 <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e26:	6822      	ldr	r2, [r4, #0]
     e28:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     e2a:	07d2      	lsls	r2, r2, #31
     e2c:	d401      	bmi.n	e32 <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e2e:	3301      	adds	r3, #1
     e30:	e7f6      	b.n	e20 <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e32:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e34:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     e36:	0792      	lsls	r2, r2, #30
     e38:	d404      	bmi.n	e44 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e3a:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     e3c:	07db      	lsls	r3, r3, #31
     e3e:	d418      	bmi.n	e72 <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     e40:	2012      	movs	r0, #18
     e42:	e0b5      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     e44:	0020      	movs	r0, r4
     e46:	4b5f      	ldr	r3, [pc, #380]	; (fc4 <spi_write_buffer_wait+0x1e4>)
     e48:	4798      	blx	r3
				return STATUS_ABORTED;
     e4a:	2004      	movs	r0, #4
     e4c:	e0b0      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     e4e:	3602      	adds	r6, #2
     e50:	b2b6      	uxth	r6, r6
     e52:	4652      	mov	r2, sl
     e54:	5dd2      	ldrb	r2, [r2, r7]
     e56:	0212      	lsls	r2, r2, #8
     e58:	4302      	orrs	r2, r0
     e5a:	e017      	b.n	e8c <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     e5c:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     e5e:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     e60:	2b00      	cmp	r3, #0
     e62:	d11a      	bne.n	e9a <spi_write_buffer_wait+0xba>
	while (length--) {
     e64:	1e79      	subs	r1, r7, #1
     e66:	b289      	uxth	r1, r1
     e68:	2f00      	cmp	r7, #0
     e6a:	d06c      	beq.n	f46 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     e6c:	7963      	ldrb	r3, [r4, #5]
     e6e:	2b00      	cmp	r3, #0
     e70:	d0d5      	beq.n	e1e <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e72:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e74:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     e76:	07d2      	lsls	r2, r2, #31
     e78:	d5fb      	bpl.n	e72 <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     e7a:	1c77      	adds	r7, r6, #1
     e7c:	b2bf      	uxth	r7, r7
     e7e:	4652      	mov	r2, sl
     e80:	5d90      	ldrb	r0, [r2, r6]
     e82:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e84:	79a5      	ldrb	r5, [r4, #6]
     e86:	2d01      	cmp	r5, #1
     e88:	d0e1      	beq.n	e4e <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     e8a:	003e      	movs	r6, r7
     e8c:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     e8e:	07f8      	lsls	r0, r7, #31
     e90:	d5e4      	bpl.n	e5c <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e92:	05d2      	lsls	r2, r2, #23
     e94:	0dd2      	lsrs	r2, r2, #23
     e96:	629a      	str	r2, [r3, #40]	; 0x28
     e98:	e7e0      	b.n	e5c <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     e9a:	7963      	ldrb	r3, [r4, #5]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d040      	beq.n	f22 <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ea0:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ea2:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     ea4:	0752      	lsls	r2, r2, #29
     ea6:	d5fb      	bpl.n	ea0 <spi_write_buffer_wait+0xc0>
     ea8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     eaa:	0752      	lsls	r2, r2, #29
     eac:	d508      	bpl.n	ec0 <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     eae:	8b5a      	ldrh	r2, [r3, #26]
     eb0:	0752      	lsls	r2, r2, #29
     eb2:	d501      	bpl.n	eb8 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     eb4:	2204      	movs	r2, #4
     eb6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eb8:	79a2      	ldrb	r2, [r4, #6]
     eba:	2a01      	cmp	r2, #1
     ebc:	d041      	beq.n	f42 <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     ec0:	4660      	mov	r0, ip
     ec2:	3801      	subs	r0, #1
     ec4:	b283      	uxth	r3, r0
     ec6:	469c      	mov	ip, r3
     ec8:	000f      	movs	r7, r1
     eca:	e7cb      	b.n	e64 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
     ecc:	3602      	adds	r6, #2
     ece:	4655      	mov	r5, sl
     ed0:	5c2f      	ldrb	r7, [r5, r0]
     ed2:	023f      	lsls	r7, r7, #8
     ed4:	4640      	mov	r0, r8
     ed6:	4307      	orrs	r7, r0
     ed8:	b2b0      	uxth	r0, r6
     eda:	e01b      	b.n	f14 <spi_write_buffer_wait+0x134>
						length--;
     edc:	3901      	subs	r1, #1
     ede:	b289      	uxth	r1, r1
     ee0:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ee2:	6822      	ldr	r2, [r4, #0]
     ee4:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     ee6:	0752      	lsls	r2, r2, #29
     ee8:	d41d      	bmi.n	f26 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     eea:	3301      	adds	r3, #1
     eec:	4a36      	ldr	r2, [pc, #216]	; (fc8 <spi_write_buffer_wait+0x1e8>)
     eee:	4293      	cmp	r3, r2
     ef0:	d819      	bhi.n	f26 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
     ef2:	2900      	cmp	r1, #0
     ef4:	d0f5      	beq.n	ee2 <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ef6:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ef8:	7e17      	ldrb	r7, [r2, #24]
     efa:	07f8      	lsls	r0, r7, #31
     efc:	d5f1      	bpl.n	ee2 <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
     efe:	1c70      	adds	r0, r6, #1
     f00:	b280      	uxth	r0, r0
     f02:	4655      	mov	r5, sl
     f04:	5dad      	ldrb	r5, [r5, r6]
     f06:	46a8      	mov	r8, r5
     f08:	466f      	mov	r7, sp
     f0a:	80fd      	strh	r5, [r7, #6]
     f0c:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f0e:	79a5      	ldrb	r5, [r4, #6]
     f10:	2d01      	cmp	r5, #1
     f12:	d0db      	beq.n	ecc <spi_write_buffer_wait+0xec>
     f14:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     f16:	07f5      	lsls	r5, r6, #31
     f18:	d5e0      	bpl.n	edc <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f1a:	05ff      	lsls	r7, r7, #23
     f1c:	0dff      	lsrs	r7, r7, #23
     f1e:	6297      	str	r7, [r2, #40]	; 0x28
     f20:	e7dc      	b.n	edc <spi_write_buffer_wait+0xfc>
     f22:	2300      	movs	r3, #0
     f24:	e7e2      	b.n	eec <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f26:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f28:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
     f2a:	0792      	lsls	r2, r2, #30
     f2c:	d404      	bmi.n	f38 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f2e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     f30:	075b      	lsls	r3, r3, #29
     f32:	d4b5      	bmi.n	ea0 <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
     f34:	2012      	movs	r0, #18
     f36:	e03b      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
     f38:	0020      	movs	r0, r4
     f3a:	4b22      	ldr	r3, [pc, #136]	; (fc4 <spi_write_buffer_wait+0x1e4>)
     f3c:	4798      	blx	r3
					return STATUS_ABORTED;
     f3e:	2004      	movs	r0, #4
     f40:	e036      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f44:	e7bc      	b.n	ec0 <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     f46:	7962      	ldrb	r2, [r4, #5]
     f48:	2a01      	cmp	r2, #1
     f4a:	d006      	beq.n	f5a <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     f4c:	2a00      	cmp	r2, #0
     f4e:	d135      	bne.n	fbc <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
     f50:	79e3      	ldrb	r3, [r4, #7]
     f52:	2b00      	cmp	r3, #0
     f54:	d11a      	bne.n	f8c <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     f56:	2000      	movs	r0, #0
     f58:	e02a      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f5a:	6823      	ldr	r3, [r4, #0]
     f5c:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
     f5e:	079b      	lsls	r3, r3, #30
     f60:	d5fb      	bpl.n	f5a <spi_write_buffer_wait+0x17a>
     f62:	e7f3      	b.n	f4c <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f64:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f66:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     f68:	0752      	lsls	r2, r2, #29
     f6a:	d529      	bpl.n	fc0 <spi_write_buffer_wait+0x1e0>
     f6c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f6e:	0752      	lsls	r2, r2, #29
     f70:	d508      	bpl.n	f84 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f72:	8b5a      	ldrh	r2, [r3, #26]
     f74:	0752      	lsls	r2, r2, #29
     f76:	d501      	bpl.n	f7c <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f78:	2204      	movs	r2, #4
     f7a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f7c:	79a2      	ldrb	r2, [r4, #6]
     f7e:	2a01      	cmp	r2, #1
     f80:	d011      	beq.n	fa6 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
     f84:	4660      	mov	r0, ip
     f86:	3801      	subs	r0, #1
     f88:	b283      	uxth	r3, r0
     f8a:	469c      	mov	ip, r3
			while (flush_length) {
     f8c:	4663      	mov	r3, ip
     f8e:	2b00      	cmp	r3, #0
     f90:	d00b      	beq.n	faa <spi_write_buffer_wait+0x1ca>
     f92:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f94:	4a0c      	ldr	r2, [pc, #48]	; (fc8 <spi_write_buffer_wait+0x1e8>)
     f96:	4293      	cmp	r3, r2
     f98:	d8e4      	bhi.n	f64 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f9a:	6822      	ldr	r2, [r4, #0]
     f9c:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     f9e:	0752      	lsls	r2, r2, #29
     fa0:	d4e0      	bmi.n	f64 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     fa2:	3301      	adds	r3, #1
     fa4:	e7f6      	b.n	f94 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fa8:	e7ec      	b.n	f84 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
     faa:	2000      	movs	r0, #0
     fac:	e000      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
     fae:	2005      	movs	r0, #5
}
     fb0:	b002      	add	sp, #8
     fb2:	bc1c      	pop	{r2, r3, r4}
     fb4:	4690      	mov	r8, r2
     fb6:	4699      	mov	r9, r3
     fb8:	46a2      	mov	sl, r4
     fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
     fbc:	2000      	movs	r0, #0
     fbe:	e7f7      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
     fc0:	2012      	movs	r0, #18
     fc2:	e7f5      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
     fc4:	000009a9 	.word	0x000009a9
     fc8:	00002710 	.word	0x00002710

00000fcc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
     fcc:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     fce:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     fd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
     fd2:	780a      	ldrb	r2, [r1, #0]
     fd4:	b2d2      	uxtb	r2, r2
     fd6:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     fd8:	1c4c      	adds	r4, r1, #1
     fda:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fdc:	7986      	ldrb	r6, [r0, #6]
     fde:	2e01      	cmp	r6, #1
     fe0:	d007      	beq.n	ff2 <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     fe2:	05db      	lsls	r3, r3, #23
     fe4:	0ddb      	lsrs	r3, r3, #23
     fe6:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     fe8:	8e83      	ldrh	r3, [r0, #52]	; 0x34
     fea:	3b01      	subs	r3, #1
     fec:	b29b      	uxth	r3, r3
     fee:	8683      	strh	r3, [r0, #52]	; 0x34
}
     ff0:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     ff2:	784b      	ldrb	r3, [r1, #1]
     ff4:	021b      	lsls	r3, r3, #8
     ff6:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
     ff8:	1c8c      	adds	r4, r1, #2
     ffa:	62c4      	str	r4, [r0, #44]	; 0x2c
     ffc:	e7f1      	b.n	fe2 <_spi_write+0x16>
	...

00001000 <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1000:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1002:	4a04      	ldr	r2, [pc, #16]	; (1014 <_spi_write_dummy+0x14>)
    1004:	8812      	ldrh	r2, [r2, #0]
    1006:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1008:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    100a:	3b01      	subs	r3, #1
    100c:	b29b      	uxth	r3, r3
    100e:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1010:	4770      	bx	lr
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	200003c4 	.word	0x200003c4

00001018 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1018:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    101c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    101e:	3b01      	subs	r3, #1
    1020:	b29b      	uxth	r3, r3
    1022:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1024:	4770      	bx	lr

00001026 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1026:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    102a:	05db      	lsls	r3, r3, #23
    102c:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    102e:	b2da      	uxtb	r2, r3
    1030:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1032:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1034:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1036:	1c51      	adds	r1, r2, #1
    1038:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    103a:	7981      	ldrb	r1, [r0, #6]
    103c:	2901      	cmp	r1, #1
    103e:	d004      	beq.n	104a <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1040:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    1042:	3b01      	subs	r3, #1
    1044:	b29b      	uxth	r3, r3
    1046:	8603      	strh	r3, [r0, #48]	; 0x30
}
    1048:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    104a:	0a1b      	lsrs	r3, r3, #8
    104c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    104e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1050:	3301      	adds	r3, #1
    1052:	6283      	str	r3, [r0, #40]	; 0x28
    1054:	e7f4      	b.n	1040 <_spi_read+0x1a>
	...

00001058 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    105a:	0080      	lsls	r0, r0, #2
    105c:	4b6b      	ldr	r3, [pc, #428]	; (120c <_spi_interrupt_handler+0x1b4>)
    105e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1060:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1062:	2337      	movs	r3, #55	; 0x37
    1064:	5ce3      	ldrb	r3, [r4, r3]
    1066:	2236      	movs	r2, #54	; 0x36
    1068:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    106a:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    106c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    106e:	7db5      	ldrb	r5, [r6, #22]
    1070:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1072:	07eb      	lsls	r3, r5, #31
    1074:	d516      	bpl.n	10a4 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1076:	7963      	ldrb	r3, [r4, #5]
    1078:	2b01      	cmp	r3, #1
    107a:	d04d      	beq.n	1118 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    107c:	7963      	ldrb	r3, [r4, #5]
		if (0
    107e:	2b01      	cmp	r3, #1
    1080:	d057      	beq.n	1132 <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1082:	2b00      	cmp	r3, #0
    1084:	d10e      	bne.n	10a4 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    1086:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1088:	2b00      	cmp	r3, #0
    108a:	d00b      	beq.n	10a4 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    108c:	0020      	movs	r0, r4
    108e:	4b60      	ldr	r3, [pc, #384]	; (1210 <_spi_interrupt_handler+0x1b8>)
    1090:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    1092:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1094:	b29b      	uxth	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	d104      	bne.n	10a4 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    109a:	3301      	adds	r3, #1
    109c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    109e:	7a63      	ldrb	r3, [r4, #9]
    10a0:	2b01      	cmp	r3, #1
    10a2:	d04a      	beq.n	113a <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    10a4:	076b      	lsls	r3, r5, #29
    10a6:	d511      	bpl.n	10cc <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    10a8:	8b73      	ldrh	r3, [r6, #26]
    10aa:	075b      	lsls	r3, r3, #29
    10ac:	d54f      	bpl.n	114e <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    10ae:	7a63      	ldrb	r3, [r4, #9]
    10b0:	2b01      	cmp	r3, #1
    10b2:	d008      	beq.n	10c6 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    10b4:	221e      	movs	r2, #30
    10b6:	2338      	movs	r3, #56	; 0x38
    10b8:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    10ba:	3b35      	subs	r3, #53	; 0x35
    10bc:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    10be:	3302      	adds	r3, #2
    10c0:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    10c2:	073b      	lsls	r3, r7, #28
    10c4:	d43f      	bmi.n	1146 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    10c6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    10c8:	2304      	movs	r3, #4
    10ca:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    10cc:	07ab      	lsls	r3, r5, #30
    10ce:	d513      	bpl.n	10f8 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    10d0:	7963      	ldrb	r3, [r4, #5]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d10d      	bne.n	10f2 <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    10d6:	3307      	adds	r3, #7
    10d8:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    10da:	3b05      	subs	r3, #5
    10dc:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    10de:	3301      	adds	r3, #1
    10e0:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    10e2:	2300      	movs	r3, #0
    10e4:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    10e6:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    10e8:	3338      	adds	r3, #56	; 0x38
    10ea:	2200      	movs	r2, #0
    10ec:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    10ee:	06fb      	lsls	r3, r7, #27
    10f0:	d464      	bmi.n	11bc <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    10f2:	7963      	ldrb	r3, [r4, #5]
    10f4:	2b01      	cmp	r3, #1
    10f6:	d065      	beq.n	11c4 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    10f8:	072b      	lsls	r3, r5, #28
    10fa:	d508      	bpl.n	110e <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    10fc:	7963      	ldrb	r3, [r4, #5]
    10fe:	2b00      	cmp	r3, #0
    1100:	d105      	bne.n	110e <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1102:	3308      	adds	r3, #8
    1104:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1106:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1108:	06bb      	lsls	r3, r7, #26
    110a:	d500      	bpl.n	110e <_spi_interrupt_handler+0xb6>
    110c:	e070      	b.n	11f0 <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    110e:	b26d      	sxtb	r5, r5
    1110:	2d00      	cmp	r5, #0
    1112:	da00      	bge.n	1116 <_spi_interrupt_handler+0xbe>
    1114:	e070      	b.n	11f8 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    1118:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    111a:	2b00      	cmp	r3, #0
    111c:	d1ae      	bne.n	107c <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    111e:	0020      	movs	r0, r4
    1120:	4b3c      	ldr	r3, [pc, #240]	; (1214 <_spi_interrupt_handler+0x1bc>)
    1122:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1124:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1126:	b29b      	uxth	r3, r3
    1128:	2b00      	cmp	r3, #0
    112a:	d1a7      	bne.n	107c <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    112c:	3301      	adds	r3, #1
    112e:	7533      	strb	r3, [r6, #20]
    1130:	e7a4      	b.n	107c <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    1132:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1134:	2a00      	cmp	r2, #0
    1136:	d1a9      	bne.n	108c <_spi_interrupt_handler+0x34>
    1138:	e7a3      	b.n	1082 <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    113a:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    113c:	2b00      	cmp	r3, #0
    113e:	d1b1      	bne.n	10a4 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1140:	3302      	adds	r3, #2
    1142:	75b3      	strb	r3, [r6, #22]
    1144:	e7ae      	b.n	10a4 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1146:	0020      	movs	r0, r4
    1148:	69a3      	ldr	r3, [r4, #24]
    114a:	4798      	blx	r3
    114c:	e7bb      	b.n	10c6 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    114e:	7a63      	ldrb	r3, [r4, #9]
    1150:	2b01      	cmp	r3, #1
    1152:	d017      	beq.n	1184 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    1154:	0020      	movs	r0, r4
    1156:	4b30      	ldr	r3, [pc, #192]	; (1218 <_spi_interrupt_handler+0x1c0>)
    1158:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    115a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    115c:	b29b      	uxth	r3, r3
    115e:	2b00      	cmp	r3, #0
    1160:	d1b4      	bne.n	10cc <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    1162:	2200      	movs	r2, #0
    1164:	3338      	adds	r3, #56	; 0x38
    1166:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1168:	3b34      	subs	r3, #52	; 0x34
    116a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    116c:	7a63      	ldrb	r3, [r4, #9]
    116e:	2b02      	cmp	r3, #2
    1170:	d01d      	beq.n	11ae <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1172:	7a63      	ldrb	r3, [r4, #9]
    1174:	2b00      	cmp	r3, #0
    1176:	d1a9      	bne.n	10cc <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1178:	07bb      	lsls	r3, r7, #30
    117a:	d5a7      	bpl.n	10cc <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    117c:	0020      	movs	r0, r4
    117e:	6923      	ldr	r3, [r4, #16]
    1180:	4798      	blx	r3
    1182:	e7a3      	b.n	10cc <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    1184:	0020      	movs	r0, r4
    1186:	4b25      	ldr	r3, [pc, #148]	; (121c <_spi_interrupt_handler+0x1c4>)
    1188:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    118a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    118c:	b29b      	uxth	r3, r3
    118e:	2b00      	cmp	r3, #0
    1190:	d19c      	bne.n	10cc <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1192:	3304      	adds	r3, #4
    1194:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1196:	2200      	movs	r2, #0
    1198:	3334      	adds	r3, #52	; 0x34
    119a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    119c:	3b35      	subs	r3, #53	; 0x35
    119e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    11a0:	07fb      	lsls	r3, r7, #31
    11a2:	d400      	bmi.n	11a6 <_spi_interrupt_handler+0x14e>
    11a4:	e792      	b.n	10cc <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    11a6:	0020      	movs	r0, r4
    11a8:	68e3      	ldr	r3, [r4, #12]
    11aa:	4798      	blx	r3
    11ac:	e78e      	b.n	10cc <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    11ae:	077b      	lsls	r3, r7, #29
    11b0:	d400      	bmi.n	11b4 <_spi_interrupt_handler+0x15c>
    11b2:	e78b      	b.n	10cc <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    11b4:	0020      	movs	r0, r4
    11b6:	6963      	ldr	r3, [r4, #20]
    11b8:	4798      	blx	r3
    11ba:	e787      	b.n	10cc <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    11bc:	0020      	movs	r0, r4
    11be:	69e3      	ldr	r3, [r4, #28]
    11c0:	4798      	blx	r3
    11c2:	e796      	b.n	10f2 <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    11c4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    11c6:	2b01      	cmp	r3, #1
    11c8:	d000      	beq.n	11cc <_spi_interrupt_handler+0x174>
    11ca:	e795      	b.n	10f8 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    11cc:	79e3      	ldrb	r3, [r4, #7]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d000      	beq.n	11d4 <_spi_interrupt_handler+0x17c>
    11d2:	e791      	b.n	10f8 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    11d4:	3302      	adds	r3, #2
    11d6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    11d8:	3301      	adds	r3, #1
    11da:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    11dc:	2200      	movs	r2, #0
    11de:	3335      	adds	r3, #53	; 0x35
    11e0:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    11e2:	07fb      	lsls	r3, r7, #31
    11e4:	d400      	bmi.n	11e8 <_spi_interrupt_handler+0x190>
    11e6:	e787      	b.n	10f8 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    11e8:	0020      	movs	r0, r4
    11ea:	68e3      	ldr	r3, [r4, #12]
    11ec:	4798      	blx	r3
    11ee:	e783      	b.n	10f8 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    11f0:	0020      	movs	r0, r4
    11f2:	6a23      	ldr	r3, [r4, #32]
    11f4:	4798      	blx	r3
    11f6:	e78a      	b.n	110e <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    11f8:	2380      	movs	r3, #128	; 0x80
    11fa:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    11fc:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    11fe:	067b      	lsls	r3, r7, #25
    1200:	d400      	bmi.n	1204 <_spi_interrupt_handler+0x1ac>
    1202:	e788      	b.n	1116 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1204:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1206:	0020      	movs	r0, r4
    1208:	4798      	blx	r3
}
    120a:	e784      	b.n	1116 <_spi_interrupt_handler+0xbe>
    120c:	20000984 	.word	0x20000984
    1210:	00000fcd 	.word	0x00000fcd
    1214:	00001001 	.word	0x00001001
    1218:	00001027 	.word	0x00001027
    121c:	00001019 	.word	0x00001019

00001220 <FIFO_Count>:
 */
unsigned FIFO_Count(FIFO_BUFFER const *b)
{
    unsigned head, tail; /* used to avoid volatile decision */

    if (b) {
    1220:	2800      	cmp	r0, #0
    1222:	d003      	beq.n	122c <FIFO_Count+0xc>
        head = b->head;
    1224:	6803      	ldr	r3, [r0, #0]
        tail = b->tail;
    1226:	6840      	ldr	r0, [r0, #4]
        return head - tail;
    1228:	1a18      	subs	r0, r3, r0
    } else {
        return 0;
    }
}
    122a:	4770      	bx	lr
        return 0;
    122c:	2000      	movs	r0, #0
    122e:	e7fc      	b.n	122a <FIFO_Count+0xa>

00001230 <FIFO_Full>:
 * @param b - pointer to FIFO_BUFFER structure
 *
 * @return true if the FIFO is full, false if it is not.
 */
bool FIFO_Full(FIFO_BUFFER const *b)
{
    1230:	b510      	push	{r4, lr}
    1232:	1e04      	subs	r4, r0, #0
    return (b ? (FIFO_Count(b) == b->buffer_len) : true);
    1234:	d006      	beq.n	1244 <FIFO_Full+0x14>
    1236:	4b05      	ldr	r3, [pc, #20]	; (124c <FIFO_Full+0x1c>)
    1238:	4798      	blx	r3
    123a:	68e3      	ldr	r3, [r4, #12]
    123c:	4298      	cmp	r0, r3
    123e:	d003      	beq.n	1248 <FIFO_Full+0x18>
    1240:	2000      	movs	r0, #0
}
    1242:	bd10      	pop	{r4, pc}
    return (b ? (FIFO_Count(b) == b->buffer_len) : true);
    1244:	2001      	movs	r0, #1
    1246:	e7fc      	b.n	1242 <FIFO_Full+0x12>
    1248:	2001      	movs	r0, #1
    124a:	e7fa      	b.n	1242 <FIFO_Full+0x12>
    124c:	00001221 	.word	0x00001221

00001250 <FIFO_Put>:
 * @param  data_byte [in] - data to put into the FIFO
 *
 * @return true on successful add, false if not added
 */
bool FIFO_Put(FIFO_BUFFER *b, uint8_t data_byte)
{
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	0004      	movs	r4, r0
    1254:	000d      	movs	r5, r1
    bool status = false; /* return value */
    unsigned index;

    if (b) {
    1256:	2800      	cmp	r0, #0
    1258:	d010      	beq.n	127c <FIFO_Put+0x2c>
        /* limit the buffer to prevent overwriting */
        if (!FIFO_Full(b)) {
    125a:	4b0a      	ldr	r3, [pc, #40]	; (1284 <FIFO_Put+0x34>)
    125c:	4798      	blx	r3
    125e:	2800      	cmp	r0, #0
    1260:	d10e      	bne.n	1280 <FIFO_Put+0x30>
            index = b->head % b->buffer_len;
    1262:	6820      	ldr	r0, [r4, #0]
    1264:	68e1      	ldr	r1, [r4, #12]
    1266:	4b08      	ldr	r3, [pc, #32]	; (1288 <FIFO_Put+0x38>)
    1268:	4798      	blx	r3
            b->buffer[index] = data_byte;
    126a:	68a3      	ldr	r3, [r4, #8]
    126c:	469c      	mov	ip, r3
    126e:	4461      	add	r1, ip
    1270:	700d      	strb	r5, [r1, #0]
            b->head++;
    1272:	6823      	ldr	r3, [r4, #0]
    1274:	3301      	adds	r3, #1
    1276:	6023      	str	r3, [r4, #0]
            status = true;
    1278:	2001      	movs	r0, #1
        }
    }

    return status;
}
    127a:	bd70      	pop	{r4, r5, r6, pc}
    bool status = false; /* return value */
    127c:	2000      	movs	r0, #0
    127e:	e7fc      	b.n	127a <FIFO_Put+0x2a>
    1280:	2000      	movs	r0, #0
    1282:	e7fa      	b.n	127a <FIFO_Put+0x2a>
    1284:	00001231 	.word	0x00001231
    1288:	00002de1 	.word	0x00002de1

0000128c <FIFO_Init>:
 *
 * @return      none
 */
void FIFO_Init(FIFO_BUFFER *b, volatile uint8_t *buffer, unsigned buffer_len)
{
    if (b && buffer && buffer_len) {
    128c:	2800      	cmp	r0, #0
    128e:	d008      	beq.n	12a2 <FIFO_Init+0x16>
    1290:	2900      	cmp	r1, #0
    1292:	d006      	beq.n	12a2 <FIFO_Init+0x16>
    1294:	2a00      	cmp	r2, #0
    1296:	d004      	beq.n	12a2 <FIFO_Init+0x16>
        b->head = 0;
    1298:	2300      	movs	r3, #0
    129a:	6003      	str	r3, [r0, #0]
        b->tail = 0;
    129c:	6043      	str	r3, [r0, #4]
        b->buffer = buffer;
    129e:	6081      	str	r1, [r0, #8]
        b->buffer_len = buffer_len;
    12a0:	60c2      	str	r2, [r0, #12]
    }

    return;
}
    12a2:	4770      	bx	lr

000012a4 <mstimer_set>:
 *
 * @param t A pointer to the timer
 * @param interval The interval before the timer expires.
 */
void mstimer_set(struct mstimer *t, unsigned long interval)
{
    12a4:	b510      	push	{r4, lr}
    12a6:	0004      	movs	r4, r0
    t->interval = interval;
    12a8:	6041      	str	r1, [r0, #4]
    t->start = mstimer_now();
    12aa:	4b02      	ldr	r3, [pc, #8]	; (12b4 <mstimer_set+0x10>)
    12ac:	4798      	blx	r3
    12ae:	6020      	str	r0, [r4, #0]
}
    12b0:	bd10      	pop	{r4, pc}
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	00001939 	.word	0x00001939

000012b8 <fiber1_callback>:
	usart_disable(&uartfiber_inst2);
}

void fiber1_callback()
{
	uint8_t tempdata = UART_FIBER1->USART.DATA.reg;
    12b8:	4b02      	ldr	r3, [pc, #8]	; (12c4 <fiber1_callback+0xc>)
    12ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	
	if(fiber1_data_status =! data_ready)
    12bc:	2200      	movs	r2, #0
    12be:	4b02      	ldr	r3, [pc, #8]	; (12c8 <fiber1_callback+0x10>)
    12c0:	701a      	strb	r2, [r3, #0]
		else
		{
			fiber1_data.bytes[fiber1_pointer++] = tempdata;
		}
	}
}
    12c2:	4770      	bx	lr
    12c4:	42000c00 	.word	0x42000c00
    12c8:	200003c8 	.word	0x200003c8

000012cc <fiber2_callback>:

void fiber2_callback()
{
	uint8_t tempdata = UART_FIBER2->USART.DATA.reg;
    12cc:	4b02      	ldr	r3, [pc, #8]	; (12d8 <fiber2_callback+0xc>)
    12ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	
	if(fiber2_data_status =! data_ready)
    12d0:	2200      	movs	r2, #0
    12d2:	4b02      	ldr	r3, [pc, #8]	; (12dc <fiber2_callback+0x10>)
    12d4:	701a      	strb	r2, [r3, #0]
		else
		{
			fiber2_data.bytes[fiber1_pointer++] = tempdata;
		}
	}
}
    12d6:	4770      	bx	lr
    12d8:	42001c00 	.word	0x42001c00
    12dc:	200003c9 	.word	0x200003c9

000012e0 <uartfiber_init>:
{
    12e0:	b570      	push	{r4, r5, r6, lr}
    12e2:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    12e4:	2380      	movs	r3, #128	; 0x80
    12e6:	05db      	lsls	r3, r3, #23
    12e8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    12ea:	2300      	movs	r3, #0
    12ec:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    12ee:	22ff      	movs	r2, #255	; 0xff
    12f0:	4669      	mov	r1, sp
    12f2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    12f4:	2200      	movs	r2, #0
    12f6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    12f8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    12fa:	2101      	movs	r1, #1
    12fc:	2024      	movs	r0, #36	; 0x24
    12fe:	466c      	mov	r4, sp
    1300:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1302:	3001      	adds	r0, #1
    1304:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1306:	3125      	adds	r1, #37	; 0x25
    1308:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    130a:	3101      	adds	r1, #1
    130c:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    130e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1310:	3105      	adds	r1, #5
    1312:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1314:	3101      	adds	r1, #1
    1316:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1318:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    131a:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    131c:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    131e:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1320:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1322:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1324:	2313      	movs	r3, #19
    1326:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1328:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    132a:	23e1      	movs	r3, #225	; 0xe1
    132c:	019b      	lsls	r3, r3, #6
    132e:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX1;
    1330:	23c0      	movs	r3, #192	; 0xc0
    1332:	039b      	lsls	r3, r3, #14
    1334:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1336:	2301      	movs	r3, #1
    1338:	425b      	negs	r3, r3
    133a:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    133c:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    133e:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = URX_FIBER1;
    1340:	4b3e      	ldr	r3, [pc, #248]	; (143c <uartfiber_init+0x15c>)
    1342:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst1, UART_FIBER1, &config_usart) != STATUS_OK);
    1344:	466a      	mov	r2, sp
    1346:	493e      	ldr	r1, [pc, #248]	; (1440 <uartfiber_init+0x160>)
    1348:	483e      	ldr	r0, [pc, #248]	; (1444 <uartfiber_init+0x164>)
    134a:	4b3f      	ldr	r3, [pc, #252]	; (1448 <uartfiber_init+0x168>)
    134c:	4798      	blx	r3
    134e:	2800      	cmp	r0, #0
    1350:	d1f8      	bne.n	1344 <uartfiber_init+0x64>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1352:	4b3c      	ldr	r3, [pc, #240]	; (1444 <uartfiber_init+0x164>)
    1354:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1356:	0020      	movs	r0, r4
    1358:	4b3c      	ldr	r3, [pc, #240]	; (144c <uartfiber_init+0x16c>)
    135a:	4798      	blx	r3
    135c:	231f      	movs	r3, #31
    135e:	4018      	ands	r0, r3
    1360:	3b1e      	subs	r3, #30
    1362:	4083      	lsls	r3, r0
    1364:	4a3a      	ldr	r2, [pc, #232]	; (1450 <uartfiber_init+0x170>)
    1366:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1368:	4b36      	ldr	r3, [pc, #216]	; (1444 <uartfiber_init+0x164>)
    136a:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    136c:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    136e:	2b00      	cmp	r3, #0
    1370:	d1fa      	bne.n	1368 <uartfiber_init+0x88>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1372:	6823      	ldr	r3, [r4, #0]
    1374:	2202      	movs	r2, #2
    1376:	4313      	orrs	r3, r2
    1378:	6023      	str	r3, [r4, #0]
	config->data_order       = USART_DATAORDER_LSB;
    137a:	2380      	movs	r3, #128	; 0x80
    137c:	05db      	lsls	r3, r3, #23
    137e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1380:	2300      	movs	r3, #0
    1382:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1384:	32fd      	adds	r2, #253	; 0xfd
    1386:	4669      	mov	r1, sp
    1388:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    138a:	2200      	movs	r2, #0
    138c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    138e:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    1390:	2101      	movs	r1, #1
    1392:	2024      	movs	r0, #36	; 0x24
    1394:	466c      	mov	r4, sp
    1396:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1398:	3001      	adds	r0, #1
    139a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    139c:	3125      	adds	r1, #37	; 0x25
    139e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    13a0:	3101      	adds	r1, #1
    13a2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    13a4:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    13a6:	3105      	adds	r1, #5
    13a8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    13aa:	3101      	adds	r1, #1
    13ac:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    13ae:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    13b0:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    13b2:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    13b4:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    13b6:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    13b8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    13ba:	2313      	movs	r3, #19
    13bc:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    13be:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    13c0:	23e1      	movs	r3, #225	; 0xe1
    13c2:	019b      	lsls	r3, r3, #6
    13c4:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX2;
    13c6:	2380      	movs	r3, #128	; 0x80
    13c8:	025b      	lsls	r3, r3, #9
    13ca:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = URX_FIBER2;
    13cc:	4b21      	ldr	r3, [pc, #132]	; (1454 <uartfiber_init+0x174>)
    13ce:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    13d0:	2301      	movs	r3, #1
    13d2:	425b      	negs	r3, r3
    13d4:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    13d6:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    13d8:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst2, UART_FIBER2, &config_usart) != STATUS_OK);
    13da:	466a      	mov	r2, sp
    13dc:	491e      	ldr	r1, [pc, #120]	; (1458 <uartfiber_init+0x178>)
    13de:	481f      	ldr	r0, [pc, #124]	; (145c <uartfiber_init+0x17c>)
    13e0:	4b19      	ldr	r3, [pc, #100]	; (1448 <uartfiber_init+0x168>)
    13e2:	4798      	blx	r3
    13e4:	2800      	cmp	r0, #0
    13e6:	d1f8      	bne.n	13da <uartfiber_init+0xfa>
	SercomUsart *const usart_hw = &(module->hw->USART);
    13e8:	4b1c      	ldr	r3, [pc, #112]	; (145c <uartfiber_init+0x17c>)
    13ea:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    13ec:	0020      	movs	r0, r4
    13ee:	4b17      	ldr	r3, [pc, #92]	; (144c <uartfiber_init+0x16c>)
    13f0:	4798      	blx	r3
    13f2:	231f      	movs	r3, #31
    13f4:	4018      	ands	r0, r3
    13f6:	3b1e      	subs	r3, #30
    13f8:	4083      	lsls	r3, r0
    13fa:	4a15      	ldr	r2, [pc, #84]	; (1450 <uartfiber_init+0x170>)
    13fc:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    13fe:	4b17      	ldr	r3, [pc, #92]	; (145c <uartfiber_init+0x17c>)
    1400:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1402:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1404:	2b00      	cmp	r3, #0
    1406:	d1fa      	bne.n	13fe <uartfiber_init+0x11e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1408:	6823      	ldr	r3, [r4, #0]
    140a:	2202      	movs	r2, #2
    140c:	4313      	orrs	r3, r2
    140e:	6023      	str	r3, [r4, #0]
	usart_register_callback(&uartfiber_inst1, &fiber1_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1410:	4d0c      	ldr	r5, [pc, #48]	; (1444 <uartfiber_init+0x164>)
    1412:	3a01      	subs	r2, #1
    1414:	4912      	ldr	r1, [pc, #72]	; (1460 <uartfiber_init+0x180>)
    1416:	0028      	movs	r0, r5
    1418:	4e12      	ldr	r6, [pc, #72]	; (1464 <uartfiber_init+0x184>)
    141a:	47b0      	blx	r6
	usart_register_callback(&uartfiber_inst2, &fiber2_callback, USART_CALLBACK_BUFFER_RECEIVED);
    141c:	4c0f      	ldr	r4, [pc, #60]	; (145c <uartfiber_init+0x17c>)
    141e:	2201      	movs	r2, #1
    1420:	4911      	ldr	r1, [pc, #68]	; (1468 <uartfiber_init+0x188>)
    1422:	0020      	movs	r0, r4
    1424:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1426:	2331      	movs	r3, #49	; 0x31
    1428:	2002      	movs	r0, #2
    142a:	5ce9      	ldrb	r1, [r5, r3]
    142c:	4301      	orrs	r1, r0
    142e:	54e9      	strb	r1, [r5, r3]
    1430:	5ce2      	ldrb	r2, [r4, r3]
    1432:	4302      	orrs	r2, r0
    1434:	54e2      	strb	r2, [r4, r3]
}
    1436:	b010      	add	sp, #64	; 0x40
    1438:	bd70      	pop	{r4, r5, r6, pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	00130002 	.word	0x00130002
    1440:	42000c00 	.word	0x42000c00
    1444:	20000030 	.word	0x20000030
    1448:	00001ea9 	.word	0x00001ea9
    144c:	0000224d 	.word	0x0000224d
    1450:	e000e100 	.word	0xe000e100
    1454:	00300002 	.word	0x00300002
    1458:	42001c00 	.word	0x42001c00
    145c:	20000064 	.word	0x20000064
    1460:	000012b9 	.word	0x000012b9
    1464:	00002041 	.word	0x00002041
    1468:	000012cd 	.word	0x000012cd

0000146c <Ft_Gpu_Hal_Open>:
	return true;
}


ft_bool_t Ft_Gpu_Hal_Open(Ft_Gpu_Hal_Context_t *host)
{
    146c:	b510      	push	{r4, lr}
     * the pinmux settings and the SPI init, so it's all done
     * in Ft_Gpu_Hal_Init().
     */
    
    // init current write buffer to zero, since we're just starting up
	host->ft_cmd_fifo_wp = host->ft_dl_buff_wp = 0;
    146e:	2200      	movs	r2, #0
    1470:	2300      	movs	r3, #0
    1472:	8142      	strh	r2, [r0, #10]
    1474:	8102      	strh	r2, [r0, #8]
    // by default ft800/801/810/811 goes with single dummy byte for read
	host->spinumdummy = 1;
    1476:	3201      	adds	r2, #1
    1478:	7542      	strb	r2, [r0, #21]
    // technically one channel, but zero for how the FT library does things
	host->spichannel = 0;
    147a:	7503      	strb	r3, [r0, #20]
    // indicate it's ready to go
	host->status = FT_GPU_HAL_OPENED;
    147c:	7303      	strb	r3, [r0, #12]

    lcd_set_ft_host_ptr(host);
    147e:	4b02      	ldr	r3, [pc, #8]	; (1488 <Ft_Gpu_Hal_Open+0x1c>)
    1480:	4798      	blx	r3

	return true;
}
    1482:	2001      	movs	r0, #1
    1484:	bd10      	pop	{r4, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	000018e1 	.word	0x000018e1

0000148c <Ft_Gpu_Hal_StartTransfer>:
}


/*The APIs for reading/writing transfer continuously only with small buffer system*/
ft_void_t  Ft_Gpu_Hal_StartTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint32_t addr)
{
    148c:	b510      	push	{r4, lr}
    148e:	0004      	movs	r4, r0
    /* determine if it's a read or write. This affects the preamble send to the
     * LCD (preamble = direction bits and address). */
	if (FT_GPU_READ == rw)
    1490:	2900      	cmp	r1, #0
    1492:	d006      	beq.n	14a2 <Ft_Gpu_Hal_StartTransfer+0x16>
		host->status = FT_GPU_HAL_READING;
	}
    else
    {
        // begin a write transfer
	    lcd_start_xfer(addr, WRT);
    1494:	2101      	movs	r1, #1
    1496:	0010      	movs	r0, r2
    1498:	4b05      	ldr	r3, [pc, #20]	; (14b0 <Ft_Gpu_Hal_StartTransfer+0x24>)
    149a:	4798      	blx	r3
    
		host->status = FT_GPU_HAL_WRITING;
    149c:	2302      	movs	r3, #2
    149e:	7323      	strb	r3, [r4, #12]
	}
}
    14a0:	bd10      	pop	{r4, pc}
        lcd_start_xfer(addr, READ);
    14a2:	0010      	movs	r0, r2
    14a4:	4b02      	ldr	r3, [pc, #8]	; (14b0 <Ft_Gpu_Hal_StartTransfer+0x24>)
    14a6:	4798      	blx	r3
		host->status = FT_GPU_HAL_READING;
    14a8:	2301      	movs	r3, #1
    14aa:	7323      	strb	r3, [r4, #12]
    14ac:	e7f8      	b.n	14a0 <Ft_Gpu_Hal_StartTransfer+0x14>
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	000017ad 	.word	0x000017ad

000014b4 <Ft_Gpu_Hal_Transfer8>:
    Ft_Gpu_Hal_Transfer8(host,0);
}


ft_uint8_t Ft_Gpu_Hal_Transfer8(Ft_Gpu_Hal_Context_t *host, ft_uint8_t value)
{
    14b4:	b500      	push	{lr}
    14b6:	b085      	sub	sp, #20
    14b8:	466b      	mov	r3, sp
    14ba:	71d9      	strb	r1, [r3, #7]
    ft_uint8_t read_byte = 0;
    14bc:	2200      	movs	r2, #0
    14be:	230f      	movs	r3, #15
    14c0:	446b      	add	r3, sp
    14c2:	701a      	strb	r2, [r3, #0]
    
    // transmit or receive a byte
    if(host->status == FT_GPU_HAL_WRITING)
    14c4:	7b03      	ldrb	r3, [r0, #12]
    14c6:	2b02      	cmp	r3, #2
    14c8:	d009      	beq.n	14de <Ft_Gpu_Hal_Transfer8+0x2a>
        lcd_host_write(&value, 1);
    else
        lcd_host_read(&read_byte, 1);
    14ca:	2101      	movs	r1, #1
    14cc:	200f      	movs	r0, #15
    14ce:	4468      	add	r0, sp
    14d0:	4b06      	ldr	r3, [pc, #24]	; (14ec <Ft_Gpu_Hal_Transfer8+0x38>)
    14d2:	4798      	blx	r3
    
    return read_byte;
    14d4:	230f      	movs	r3, #15
    14d6:	446b      	add	r3, sp
    14d8:	7818      	ldrb	r0, [r3, #0]
}
    14da:	b005      	add	sp, #20
    14dc:	bd00      	pop	{pc}
        lcd_host_write(&value, 1);
    14de:	2101      	movs	r1, #1
    14e0:	466b      	mov	r3, sp
    14e2:	1dd8      	adds	r0, r3, #7
    14e4:	4b02      	ldr	r3, [pc, #8]	; (14f0 <Ft_Gpu_Hal_Transfer8+0x3c>)
    14e6:	4798      	blx	r3
    14e8:	e7f4      	b.n	14d4 <Ft_Gpu_Hal_Transfer8+0x20>
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	00001851 	.word	0x00001851
    14f0:	00001899 	.word	0x00001899

000014f4 <Ft_Gpu_Hal_EndTransfer>:
	return retVal;
}


ft_void_t Ft_Gpu_Hal_EndTransfer(Ft_Gpu_Hal_Context_t *host)
{
    14f4:	b510      	push	{r4, lr}
    14f6:	0004      	movs	r4, r0
    // deselect the slave (let slave CS float high for SIM System)
    lcd_stop_xfer();
    14f8:	4b02      	ldr	r3, [pc, #8]	; (1504 <Ft_Gpu_Hal_EndTransfer+0x10>)
    14fa:	4798      	blx	r3
    
	host->status = FT_GPU_HAL_OPENED;
    14fc:	2300      	movs	r3, #0
    14fe:	7323      	strb	r3, [r4, #12]
}
    1500:	bd10      	pop	{r4, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	00001835 	.word	0x00001835

00001508 <Ft_Gpu_Hal_Wr8>:
	return value;
}


ft_void_t Ft_Gpu_Hal_Wr8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint8_t v)
{	
    1508:	b570      	push	{r4, r5, r6, lr}
    150a:	0004      	movs	r4, r0
    150c:	0015      	movs	r5, r2
    
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    150e:	000a      	movs	r2, r1
    1510:	2101      	movs	r1, #1
    1512:	4b05      	ldr	r3, [pc, #20]	; (1528 <Ft_Gpu_Hal_Wr8+0x20>)
    1514:	4798      	blx	r3
    
    // read a byte
	Ft_Gpu_Hal_Transfer8(host,v);
    1516:	0029      	movs	r1, r5
    1518:	0020      	movs	r0, r4
    151a:	4b04      	ldr	r3, [pc, #16]	; (152c <Ft_Gpu_Hal_Wr8+0x24>)
    151c:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    151e:	0020      	movs	r0, r4
    1520:	4b03      	ldr	r3, [pc, #12]	; (1530 <Ft_Gpu_Hal_Wr8+0x28>)
    1522:	4798      	blx	r3
}
    1524:	bd70      	pop	{r4, r5, r6, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	0000148d 	.word	0x0000148d
    152c:	000014b5 	.word	0x000014b5
    1530:	000014f5 	.word	0x000014f5

00001534 <configure_ext_ints>:
/* Function Name    : configure_ext_ints
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt
	*/
void configure_ext_ints(void){
    1534:	b500      	push	{lr}
    1536:	b085      	sub	sp, #20
	// struct for external interrupt config
	struct extint_chan_conf ext_int_config;
	    
	// configure the external interrupt
	ext_int_config.gpio_pin            = LCD_INT;
    1538:	a901      	add	r1, sp, #4
    153a:	2309      	movs	r3, #9
    153c:	9301      	str	r3, [sp, #4]
	ext_int_config.gpio_pin_mux        = LCD_INT_PINMUX;
    153e:	604b      	str	r3, [r1, #4]
	ext_int_config.gpio_pin_pull       = LCD_INT_PULL;
    1540:	2300      	movs	r3, #0
    1542:	720b      	strb	r3, [r1, #8]
	ext_int_config.wake_if_sleeping    = true;
    1544:	2201      	movs	r2, #1
    1546:	724a      	strb	r2, [r1, #9]
	ext_int_config.filter_input_signal = false;
    1548:	728b      	strb	r3, [r1, #10]
	ext_int_config.detection_criteria  = LCD_INT_DETECT;
    154a:	3305      	adds	r3, #5
    154c:	72cb      	strb	r3, [r1, #11]

	extint_chan_set_config(LCD_INT_LINE, &ext_int_config);
    154e:	2009      	movs	r0, #9
    1550:	4b01      	ldr	r3, [pc, #4]	; (1558 <configure_ext_ints+0x24>)
    1552:	4798      	blx	r3
}//end configure_ext_ints
    1554:	b005      	add	sp, #20
    1556:	bd00      	pop	{pc}
    1558:	000003bd 	.word	0x000003bd

0000155c <configure_ext_int_callback>:
/* Function Name    : configure_ext_int_callback
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt callback
	*/
void configure_ext_int_callback(void){
    155c:	b510      	push	{r4, lr}
	// register callback for the LCD's interrupt
	extint_register_callback(lcd_interrupt_callback, LCD_INT_LINE, \
    155e:	2205      	movs	r2, #5
    1560:	2109      	movs	r1, #9
    1562:	4802      	ldr	r0, [pc, #8]	; (156c <configure_ext_int_callback+0x10>)
    1564:	4b02      	ldr	r3, [pc, #8]	; (1570 <configure_ext_int_callback+0x14>)
    1566:	4798      	blx	r3
	    LCD_INT_DETECT);
}//end configure_ext_int_callback
    1568:	bd10      	pop	{r4, pc}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	000018ed 	.word	0x000018ed
    1570:	00000275 	.word	0x00000275

00001574 <configure_rtc_calendar>:
/* Function Name    : configure_rtc_calendar
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config the rtc and set time to 00:00:00 01/01/2000
	*/
void configure_rtc_calendar(void){
    1574:	b530      	push	{r4, r5, lr}
    1576:	b089      	sub	sp, #36	; 0x24
	//initial time
	time.year   = 2017;
    1578:	4b26      	ldr	r3, [pc, #152]	; (1614 <configure_rtc_calendar+0xa0>)
    157a:	4a27      	ldr	r2, [pc, #156]	; (1618 <configure_rtc_calendar+0xa4>)
    157c:	80da      	strh	r2, [r3, #6]
	time.month  = 12;
    157e:	220c      	movs	r2, #12
    1580:	715a      	strb	r2, [r3, #5]
	time.day    = 31;
    1582:	3213      	adds	r2, #19
    1584:	711a      	strb	r2, [r3, #4]
	time.hour   = 23;
    1586:	3a08      	subs	r2, #8
    1588:	709a      	strb	r2, [r3, #2]
	time.minute = 59;
    158a:	3224      	adds	r2, #36	; 0x24
    158c:	705a      	strb	r2, [r3, #1]
	time.second = 55;
    158e:	3a04      	subs	r2, #4
    1590:	701a      	strb	r2, [r3, #0]
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    1592:	aa01      	add	r2, sp, #4
    1594:	2300      	movs	r3, #0
    1596:	7013      	strb	r3, [r2, #0]
	time->minute = 0;
    1598:	7053      	strb	r3, [r2, #1]
	time->hour   = 0;
    159a:	7093      	strb	r3, [r2, #2]
	time->pm     = 0;
    159c:	70d3      	strb	r3, [r2, #3]
	time->day    = 1;
    159e:	2101      	movs	r1, #1
    15a0:	7111      	strb	r1, [r2, #4]
	time->month  = 1;
    15a2:	7151      	strb	r1, [r2, #5]
	time->year   = 2000;
    15a4:	21fa      	movs	r1, #250	; 0xfa
    15a6:	00c9      	lsls	r1, r1, #3
    15a8:	80d1      	strh	r1, [r2, #6]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    15aa:	aa03      	add	r2, sp, #12
    15ac:	20a0      	movs	r0, #160	; 0xa0
    15ae:	0100      	lsls	r0, r0, #4
    15b0:	8010      	strh	r0, [r2, #0]
	config->clear_on_match      = false;
    15b2:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    15b4:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
    15b6:	7113      	strb	r3, [r2, #4]
	config->year_init_value     = 2000;
    15b8:	80d1      	strh	r1, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    15ba:	2400      	movs	r4, #0
    15bc:	2c00      	cmp	r4, #0
    15be:	d014      	beq.n	15ea <configure_rtc_calendar+0x76>
		
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	config_rtc_calendar.clock_24h     = true;
    15c0:	aa03      	add	r2, sp, #12
    15c2:	2301      	movs	r3, #1
    15c4:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    15c6:	4c15      	ldr	r4, [pc, #84]	; (161c <configure_rtc_calendar+0xa8>)
    15c8:	4915      	ldr	r1, [pc, #84]	; (1620 <configure_rtc_calendar+0xac>)
    15ca:	0020      	movs	r0, r4
    15cc:	4b15      	ldr	r3, [pc, #84]	; (1624 <configure_rtc_calendar+0xb0>)
    15ce:	4798      	blx	r3
		
	rtc_calendar_set_time(&rtc_instance, &time);
    15d0:	4910      	ldr	r1, [pc, #64]	; (1614 <configure_rtc_calendar+0xa0>)
    15d2:	0020      	movs	r0, r4
    15d4:	4b14      	ldr	r3, [pc, #80]	; (1628 <configure_rtc_calendar+0xb4>)
    15d6:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    15d8:	0020      	movs	r0, r4
    15da:	4b14      	ldr	r3, [pc, #80]	; (162c <configure_rtc_calendar+0xb8>)
    15dc:	4798      	blx	r3
	// adjust the frequency (the clock is slow atm)
	rtc_calendar_frequency_correction(&rtc_instance, 127);
    15de:	217f      	movs	r1, #127	; 0x7f
    15e0:	0020      	movs	r0, r4
    15e2:	4b13      	ldr	r3, [pc, #76]	; (1630 <configure_rtc_calendar+0xbc>)
    15e4:	4798      	blx	r3
}//end configure_rtc_calendar
    15e6:	b009      	add	sp, #36	; 0x24
    15e8:	bd30      	pop	{r4, r5, pc}
		config->alarm[i].time = time;
    15ea:	00a5      	lsls	r5, r4, #2
    15ec:	192b      	adds	r3, r5, r4
    15ee:	0058      	lsls	r0, r3, #1
    15f0:	ab03      	add	r3, sp, #12
    15f2:	469c      	mov	ip, r3
    15f4:	4460      	add	r0, ip
    15f6:	3008      	adds	r0, #8
    15f8:	2208      	movs	r2, #8
    15fa:	a901      	add	r1, sp, #4
    15fc:	4b0d      	ldr	r3, [pc, #52]	; (1634 <configure_rtc_calendar+0xc0>)
    15fe:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    1600:	192d      	adds	r5, r5, r4
    1602:	006b      	lsls	r3, r5, #1
    1604:	aa03      	add	r2, sp, #12
    1606:	4694      	mov	ip, r2
    1608:	4463      	add	r3, ip
    160a:	2206      	movs	r2, #6
    160c:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    160e:	3401      	adds	r4, #1
    1610:	b2e4      	uxtb	r4, r4
    1612:	e7d3      	b.n	15bc <configure_rtc_calendar+0x48>
    1614:	200006f0 	.word	0x200006f0
    1618:	000007e1 	.word	0x000007e1
    161c:	200003d8 	.word	0x200003d8
    1620:	40001400 	.word	0x40001400
    1624:	000005a5 	.word	0x000005a5
    1628:	000004e5 	.word	0x000004e5
    162c:	00000439 	.word	0x00000439
    1630:	00000605 	.word	0x00000605
    1634:	00002e89 	.word	0x00002e89

00001638 <clock_osc32k_init>:
/* Function Name    : clock_osc32k_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config internal oscillator 32 kHz
	*/
void clock_osc32k_init(void){
    1638:	b500      	push	{lr}
    163a:	b083      	sub	sp, #12
	config->enable_1khz_output  = true;
    163c:	2301      	movs	r3, #1
    163e:	466a      	mov	r2, sp
    1640:	7053      	strb	r3, [r2, #1]
	config->enable_32khz_output = true;
    1642:	7093      	strb	r3, [r2, #2]
	config->run_in_standby      = false;
    1644:	2200      	movs	r2, #0
    1646:	4669      	mov	r1, sp
    1648:	70ca      	strb	r2, [r1, #3]
	config->on_demand           = true;
    164a:	710b      	strb	r3, [r1, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    164c:	3306      	adds	r3, #6
    164e:	700b      	strb	r3, [r1, #0]
	config->write_once          = false;
    1650:	714a      	strb	r2, [r1, #5]
	osc32_config.on_demand				= true;
	osc32_config.run_in_standby			= false;
	osc32_config.startup_time			= SYSTEM_OSC32K_STARTUP_130;
	osc32_config.write_once				= false;
	
	system_clock_source_osc32k_set_config(&osc32_config);
    1652:	4668      	mov	r0, sp
    1654:	4b01      	ldr	r3, [pc, #4]	; (165c <clock_osc32k_init+0x24>)
    1656:	4798      	blx	r3
}//end clock_osc32k_init
    1658:	b003      	add	sp, #12
    165a:	bd00      	pop	{pc}
    165c:	0000245d 	.word	0x0000245d

00001660 <clock_gclk2_init>:
/* Function Name    : clock_gclk2_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : turn on glck using internal 32 kHz oscillator
	*/
void clock_gclk2_init(void){
    1660:	b500      	push	{lr}
    1662:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk2_config;
		
	system_gclk_init();
    1664:	4b09      	ldr	r3, [pc, #36]	; (168c <clock_gclk2_init+0x2c>)
    1666:	4798      	blx	r3
		
	gclk2_config.source_clock			= SYSTEM_CLOCK_SOURCE_OSC32K;
    1668:	a901      	add	r1, sp, #4
    166a:	2304      	movs	r3, #4
    166c:	700b      	strb	r3, [r1, #0]
	gclk2_config.output_enable			= false;
    166e:	2300      	movs	r3, #0
    1670:	724b      	strb	r3, [r1, #9]
	gclk2_config.high_when_disabled		= false;
    1672:	704b      	strb	r3, [r1, #1]
	gclk2_config.division_factor		= 32;
    1674:	2220      	movs	r2, #32
    1676:	604a      	str	r2, [r1, #4]
	gclk2_config.run_in_standby			= false;
    1678:	720b      	strb	r3, [r1, #8]
		
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclk2_config);
    167a:	2002      	movs	r0, #2
    167c:	4b04      	ldr	r3, [pc, #16]	; (1690 <clock_gclk2_init+0x30>)
    167e:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    1680:	2002      	movs	r0, #2
    1682:	4b04      	ldr	r3, [pc, #16]	; (1694 <clock_gclk2_init+0x34>)
    1684:	4798      	blx	r3
}//end clock_gclk2_init
    1686:	b005      	add	sp, #20
    1688:	bd00      	pop	{pc}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	00002649 	.word	0x00002649
    1690:	0000266d 	.word	0x0000266d
    1694:	0000273d 	.word	0x0000273d

00001698 <lcd_spi_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for communicating with the LCD
 */
void lcd_spi_init(void)
{
    1698:	b5f0      	push	{r4, r5, r6, r7, lr}
    169a:	46c6      	mov	lr, r8
    169c:	b500      	push	{lr}
    169e:	b090      	sub	sp, #64	; 0x40
    if(lcd_init_complete == true)
    16a0:	4b34      	ldr	r3, [pc, #208]	; (1774 <lcd_spi_init+0xdc>)
    16a2:	781b      	ldrb	r3, [r3, #0]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d003      	beq.n	16b0 <lcd_spi_init+0x18>
    spi_enable(&lcd_master);
	

    
    lcd_init_complete = true;
}
    16a8:	b010      	add	sp, #64	; 0x40
    16aa:	bc04      	pop	{r2}
    16ac:	4690      	mov	r8, r2
    16ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	config->address_enabled = false;
    16b0:	aa01      	add	r2, sp, #4
    16b2:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    16b4:	7093      	strb	r3, [r2, #2]
    lcd_init_slave_config.ss_pin = LCD_CS;
    16b6:	212d      	movs	r1, #45	; 0x2d
    16b8:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    16ba:	4c2f      	ldr	r4, [pc, #188]	; (1778 <lcd_spi_init+0xe0>)
    16bc:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    16be:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    16c0:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    16c2:	2201      	movs	r2, #1
    16c4:	4669      	mov	r1, sp
    16c6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    16c8:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    16ca:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    16cc:	202d      	movs	r0, #45	; 0x2d
    16ce:	4b2b      	ldr	r3, [pc, #172]	; (177c <lcd_spi_init+0xe4>)
    16d0:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    16d2:	7823      	ldrb	r3, [r4, #0]
	uint8_t port_index  = (gpio_pin / 128);
    16d4:	09d9      	lsrs	r1, r3, #7
	uint8_t group_index = (gpio_pin / 32);
    16d6:	095a      	lsrs	r2, r3, #5
	if (port_index < PORT_INST_NUM) {
    16d8:	2900      	cmp	r1, #0
    16da:	d149      	bne.n	1770 <lcd_spi_init+0xd8>
		return &(ports[port_index]->Group[group_index]);
    16dc:	01d2      	lsls	r2, r2, #7
    16de:	4928      	ldr	r1, [pc, #160]	; (1780 <lcd_spi_init+0xe8>)
    16e0:	468c      	mov	ip, r1
    16e2:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    16e4:	271f      	movs	r7, #31
    16e6:	403b      	ands	r3, r7
    16e8:	2501      	movs	r5, #1
    16ea:	0029      	movs	r1, r5
    16ec:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    16ee:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    16f0:	ac02      	add	r4, sp, #8
    16f2:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    16f4:	2600      	movs	r6, #0
    16f6:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    16f8:	60a6      	str	r6, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    16fa:	23c0      	movs	r3, #192	; 0xc0
    16fc:	039b      	lsls	r3, r3, #14
    16fe:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1700:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
    1702:	7466      	strb	r6, [r4, #17]
	config->receiver_enable  = true;
    1704:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1706:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    1708:	7526      	strb	r6, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    170a:	2324      	movs	r3, #36	; 0x24
    170c:	4698      	mov	r8, r3
    170e:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1710:	220c      	movs	r2, #12
    1712:	2100      	movs	r1, #0
    1714:	a808      	add	r0, sp, #32
    1716:	4b1b      	ldr	r3, [pc, #108]	; (1784 <lcd_spi_init+0xec>)
    1718:	4798      	blx	r3
    lcd_init_master_config.mux_setting = LCD_PINMUX_SETTING;
    171a:	2380      	movs	r3, #128	; 0x80
    171c:	025b      	lsls	r3, r3, #9
    171e:	60e3      	str	r3, [r4, #12]
    lcd_init_master_config.pinmux_pad0 = LCD_MISO_PAD;
    1720:	4b19      	ldr	r3, [pc, #100]	; (1788 <lcd_spi_init+0xf0>)
    1722:	62a3      	str	r3, [r4, #40]	; 0x28
    lcd_init_master_config.pinmux_pad1 = LCD_UNUSED; 
    1724:	2301      	movs	r3, #1
    1726:	425b      	negs	r3, r3
    1728:	62e3      	str	r3, [r4, #44]	; 0x2c
    lcd_init_master_config.pinmux_pad2 = LCD_MOSI_PAD;
    172a:	4b18      	ldr	r3, [pc, #96]	; (178c <lcd_spi_init+0xf4>)
    172c:	6323      	str	r3, [r4, #48]	; 0x30
    lcd_init_master_config.pinmux_pad3 = LCD_SCK_PAD;
    172e:	4b18      	ldr	r3, [pc, #96]	; (1790 <lcd_spi_init+0xf8>)
    1730:	6363      	str	r3, [r4, #52]	; 0x34
	lcd_init_master_config.generator_source = LCD_SPI_SOURCE_CLOCK;
    1732:	4643      	mov	r3, r8
    1734:	54e6      	strb	r6, [r4, r3]
	lcd_init_master_config.mode_specific.master.baudrate = LCD_SPI_MAX_CLOCK;
    1736:	4b17      	ldr	r3, [pc, #92]	; (1794 <lcd_spi_init+0xfc>)
    1738:	61a3      	str	r3, [r4, #24]
    spi_init(&lcd_master, LCD_SPI, &lcd_init_master_config);
    173a:	4e17      	ldr	r6, [pc, #92]	; (1798 <lcd_spi_init+0x100>)
    173c:	0022      	movs	r2, r4
    173e:	4917      	ldr	r1, [pc, #92]	; (179c <lcd_spi_init+0x104>)
    1740:	0030      	movs	r0, r6
    1742:	4b17      	ldr	r3, [pc, #92]	; (17a0 <lcd_spi_init+0x108>)
    1744:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1746:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1748:	0020      	movs	r0, r4
    174a:	4b16      	ldr	r3, [pc, #88]	; (17a4 <lcd_spi_init+0x10c>)
    174c:	4798      	blx	r3
    174e:	4038      	ands	r0, r7
    1750:	4085      	lsls	r5, r0
    1752:	4b15      	ldr	r3, [pc, #84]	; (17a8 <lcd_spi_init+0x110>)
    1754:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1756:	4b10      	ldr	r3, [pc, #64]	; (1798 <lcd_spi_init+0x100>)
    1758:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    175a:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    175c:	2b00      	cmp	r3, #0
    175e:	d1fa      	bne.n	1756 <lcd_spi_init+0xbe>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1760:	6823      	ldr	r3, [r4, #0]
    1762:	2202      	movs	r2, #2
    1764:	4313      	orrs	r3, r2
    1766:	6023      	str	r3, [r4, #0]
    lcd_init_complete = true;
    1768:	3a01      	subs	r2, #1
    176a:	4b02      	ldr	r3, [pc, #8]	; (1774 <lcd_spi_init+0xdc>)
    176c:	701a      	strb	r2, [r3, #0]
    176e:	e79b      	b.n	16a8 <lcd_spi_init+0x10>
		return NULL;
    1770:	2200      	movs	r2, #0
    1772:	e7b7      	b.n	16e4 <lcd_spi_init+0x4c>
    1774:	20000098 	.word	0x20000098
    1778:	20000924 	.word	0x20000924
    177c:	000022d1 	.word	0x000022d1
    1780:	41004400 	.word	0x41004400
    1784:	00002e9b 	.word	0x00002e9b
    1788:	002c0002 	.word	0x002c0002
    178c:	002e0002 	.word	0x002e0002
    1790:	002f0002 	.word	0x002f0002
    1794:	000f4240 	.word	0x000f4240
    1798:	20000928 	.word	0x20000928
    179c:	42001800 	.word	0x42001800
    17a0:	00000afd 	.word	0x00000afd
    17a4:	0000224d 	.word	0x0000224d
    17a8:	e000e100 	.word	0xe000e100

000017ac <lcd_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Starts the SPI transfer by selecting the slave (pulling 
 *  CS low) and sending LCD address. For use in the FT library.
 */
status_code_genare_t lcd_start_xfer(LCD_ADDRESS param_addr, LCD_XFER_DIR dir)
{
    17ac:	b510      	push	{r4, lr}
    17ae:	b082      	sub	sp, #8
    17b0:	1e0c      	subs	r4, r1, #0
        uint8_t preamble[4];
    } lcd_xfer_preamble;
    
    status_code_genare_t read_status;
    
    if(dir == READ)
    17b2:	d11f      	bne.n	17f4 <lcd_start_xfer+0x48>
        // LCD read address should only be 22 bits
        lcd_xfer_preamble.addr = (0x3FFFFF & param_addr) << 8;
    17b4:	0200      	lsls	r0, r0, #8
    17b6:	4b1a      	ldr	r3, [pc, #104]	; (1820 <lcd_start_xfer+0x74>)
    17b8:	4018      	ands	r0, r3
    17ba:	9001      	str	r0, [sp, #4]
        /* LCD read address should only be 22 bits. Also OR 0x800000 because the
         * host must send a 1-bit and then a 0-bit to indicate a write */
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    
    // preamble bytes need to be swapped so MSB is transmitted first
    XORSWAP(lcd_xfer_preamble.preamble[0], lcd_xfer_preamble.preamble[3]);
    17bc:	ab01      	add	r3, sp, #4
    17be:	78d9      	ldrb	r1, [r3, #3]
    17c0:	781a      	ldrb	r2, [r3, #0]
    17c2:	404a      	eors	r2, r1
    17c4:	4051      	eors	r1, r2
    17c6:	70d9      	strb	r1, [r3, #3]
    17c8:	404a      	eors	r2, r1
    17ca:	701a      	strb	r2, [r3, #0]
    XORSWAP(lcd_xfer_preamble.preamble[1], lcd_xfer_preamble.preamble[2]);
    17cc:	7899      	ldrb	r1, [r3, #2]
    17ce:	785a      	ldrb	r2, [r3, #1]
    17d0:	404a      	eors	r2, r1
    17d2:	4051      	eors	r1, r2
    17d4:	7099      	strb	r1, [r3, #2]
    17d6:	404a      	eors	r2, r1
    17d8:	705a      	strb	r2, [r3, #1]
    
    do{
        // select the slave
        read_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    17da:	2201      	movs	r2, #1
    17dc:	4911      	ldr	r1, [pc, #68]	; (1824 <lcd_start_xfer+0x78>)
    17de:	4812      	ldr	r0, [pc, #72]	; (1828 <lcd_start_xfer+0x7c>)
    17e0:	4b12      	ldr	r3, [pc, #72]	; (182c <lcd_start_xfer+0x80>)
    17e2:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
    17e4:	2805      	cmp	r0, #5
    17e6:	d0f8      	beq.n	17da <lcd_start_xfer+0x2e>
    
    if(dir == READ)
    17e8:	2c00      	cmp	r4, #0
    17ea:	d00d      	beq.n	1808 <lcd_start_xfer+0x5c>
        // send preamble = two read bits, 22 bit address, and dummy byte
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    else if(dir == WRT)
    17ec:	2c01      	cmp	r4, #1
    17ee:	d011      	beq.n	1814 <lcd_start_xfer+0x68>
        // send preamble = two wrt bits and 22 bit address
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    
    return read_status;
}
    17f0:	b002      	add	sp, #8
    17f2:	bd10      	pop	{r4, pc}
    else if(dir == WRT)
    17f4:	2901      	cmp	r1, #1
    17f6:	d1e1      	bne.n	17bc <lcd_start_xfer+0x10>
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    17f8:	0200      	lsls	r0, r0, #8
    17fa:	4b09      	ldr	r3, [pc, #36]	; (1820 <lcd_start_xfer+0x74>)
    17fc:	4018      	ands	r0, r3
    17fe:	2380      	movs	r3, #128	; 0x80
    1800:	061b      	lsls	r3, r3, #24
    1802:	4318      	orrs	r0, r3
    1804:	9001      	str	r0, [sp, #4]
    1806:	e7d9      	b.n	17bc <lcd_start_xfer+0x10>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    1808:	2204      	movs	r2, #4
    180a:	a901      	add	r1, sp, #4
    180c:	4806      	ldr	r0, [pc, #24]	; (1828 <lcd_start_xfer+0x7c>)
    180e:	4b08      	ldr	r3, [pc, #32]	; (1830 <lcd_start_xfer+0x84>)
    1810:	4798      	blx	r3
    1812:	e7ed      	b.n	17f0 <lcd_start_xfer+0x44>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    1814:	2203      	movs	r2, #3
    1816:	a901      	add	r1, sp, #4
    1818:	4803      	ldr	r0, [pc, #12]	; (1828 <lcd_start_xfer+0x7c>)
    181a:	4b05      	ldr	r3, [pc, #20]	; (1830 <lcd_start_xfer+0x84>)
    181c:	4798      	blx	r3
    181e:	e7e7      	b.n	17f0 <lcd_start_xfer+0x44>
    1820:	3fffff00 	.word	0x3fffff00
    1824:	20000924 	.word	0x20000924
    1828:	20000928 	.word	0x20000928
    182c:	00000ce5 	.word	0x00000ce5
    1830:	00000de1 	.word	0x00000de1

00001834 <lcd_stop_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Stops the SPI transfer by deselecting the slave (letting 
 *  CS float high). For use in the FT library.
 */
status_code_genare_t lcd_stop_xfer(void)
{
    1834:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&lcd_master, &lcd_slave, false);
    1836:	2200      	movs	r2, #0
    1838:	4902      	ldr	r1, [pc, #8]	; (1844 <lcd_stop_xfer+0x10>)
    183a:	4803      	ldr	r0, [pc, #12]	; (1848 <lcd_stop_xfer+0x14>)
    183c:	4b03      	ldr	r3, [pc, #12]	; (184c <lcd_stop_xfer+0x18>)
    183e:	4798      	blx	r3
}
    1840:	bd10      	pop	{r4, pc}
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	20000924 	.word	0x20000924
    1848:	20000928 	.word	0x20000928
    184c:	00000ce5 	.word	0x00000ce5

00001850 <lcd_host_read>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 15.
 */
status_code_genare_t lcd_host_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
    1850:	b510      	push	{r4, lr}
    1852:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&lcd_master, \
    1854:	2300      	movs	r3, #0
    1856:	0001      	movs	r1, r0
    1858:	4801      	ldr	r0, [pc, #4]	; (1860 <lcd_host_read+0x10>)
    185a:	4c02      	ldr	r4, [pc, #8]	; (1864 <lcd_host_read+0x14>)
    185c:	47a0      	blx	r4
                        read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
    185e:	bd10      	pop	{r4, pc}
    1860:	20000928 	.word	0x20000928
    1864:	00000be9 	.word	0x00000be9

00001868 <lcd_rd8>:
 * Return Values(s) : uint8_t
 * Description      : Reads a 8-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint8_t lcd_rd8(LCD_ADDRESS read_addr)
{
    1868:	b510      	push	{r4, lr}
    186a:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
    186c:	466b      	mov	r3, sp
    186e:	1ddc      	adds	r4, r3, #7
    1870:	2300      	movs	r3, #0
    1872:	7023      	strb	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    1874:	2100      	movs	r1, #0
    1876:	4b05      	ldr	r3, [pc, #20]	; (188c <lcd_rd8+0x24>)
    1878:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    lcd_host_read(&read_byte, 1);
    187a:	2101      	movs	r1, #1
    187c:	0020      	movs	r0, r4
    187e:	4b04      	ldr	r3, [pc, #16]	; (1890 <lcd_rd8+0x28>)
    1880:	4798      	blx	r3
    
    lcd_stop_xfer();
    1882:	4b04      	ldr	r3, [pc, #16]	; (1894 <lcd_rd8+0x2c>)
    1884:	4798      	blx	r3
    
    return read_byte; 
    1886:	7820      	ldrb	r0, [r4, #0]
}
    1888:	b002      	add	sp, #8
    188a:	bd10      	pop	{r4, pc}
    188c:	000017ad 	.word	0x000017ad
    1890:	00001851 	.word	0x00001851
    1894:	00001835 	.word	0x00001835

00001898 <lcd_host_write>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 16.
 */
status_code_genare_t lcd_host_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
    1898:	b510      	push	{r4, lr}
    189a:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&lcd_master, \
    189c:	0001      	movs	r1, r0
    189e:	4802      	ldr	r0, [pc, #8]	; (18a8 <lcd_host_write+0x10>)
    18a0:	4b02      	ldr	r3, [pc, #8]	; (18ac <lcd_host_write+0x14>)
    18a2:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
    
}
    18a4:	bd10      	pop	{r4, pc}
    18a6:	46c0      	nop			; (mov r8, r8)
    18a8:	20000928 	.word	0x20000928
    18ac:	00000de1 	.word	0x00000de1

000018b0 <lcd_wr8>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 8-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr8(LCD_ADDRESS wrt_addr, uint8_t wrt_byte)
{
    18b0:	b510      	push	{r4, lr}
    18b2:	b082      	sub	sp, #8
    18b4:	466b      	mov	r3, sp
    18b6:	1ddc      	adds	r4, r3, #7
    18b8:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);    
    18ba:	2101      	movs	r1, #1
    18bc:	4b05      	ldr	r3, [pc, #20]	; (18d4 <lcd_wr8+0x24>)
    18be:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = lcd_host_write(&wrt_byte, 1);
    18c0:	2101      	movs	r1, #1
    18c2:	0020      	movs	r0, r4
    18c4:	4b04      	ldr	r3, [pc, #16]	; (18d8 <lcd_wr8+0x28>)
    18c6:	4798      	blx	r3
    18c8:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    18ca:	4b04      	ldr	r3, [pc, #16]	; (18dc <lcd_wr8+0x2c>)
    18cc:	4798      	blx	r3
    
    return status_result;
}
    18ce:	0020      	movs	r0, r4
    18d0:	b002      	add	sp, #8
    18d2:	bd10      	pop	{r4, pc}
    18d4:	000017ad 	.word	0x000017ad
    18d8:	00001899 	.word	0x00001899
    18dc:	00001835 	.word	0x00001835

000018e0 <lcd_set_ft_host_ptr>:
 * Description      : Sets the sim_system_glcd_software global pointer for the
 *  FTDI context struct.
 */
void lcd_set_ft_host_ptr(Ft_Gpu_Hal_Context_t* phost)
{
    lcd_firmware_phost = phost;
    18e0:	4b01      	ldr	r3, [pc, #4]	; (18e8 <lcd_set_ft_host_ptr+0x8>)
    18e2:	6018      	str	r0, [r3, #0]
}
    18e4:	4770      	bx	lr
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	2000009c 	.word	0x2000009c

000018ec <lcd_interrupt_callback>:
 * Return Values(s) : void
 * Description      : Callback for the LCD interrupt. Reads the LCD's flag
 *  register.
 */
void lcd_interrupt_callback(void)
{
    18ec:	b510      	push	{r4, lr}
    lcd_int_flags = lcd_rd8(REG_INT_FLAGS);
    18ee:	4803      	ldr	r0, [pc, #12]	; (18fc <lcd_interrupt_callback+0x10>)
    18f0:	4b03      	ldr	r3, [pc, #12]	; (1900 <lcd_interrupt_callback+0x14>)
    18f2:	4798      	blx	r3
    18f4:	4b03      	ldr	r3, [pc, #12]	; (1904 <lcd_interrupt_callback+0x18>)
    18f6:	7018      	strb	r0, [r3, #0]
}
    18f8:	bd10      	pop	{r4, pc}
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	003020a8 	.word	0x003020a8
    1900:	00001869 	.word	0x00001869
    1904:	20000008 	.word	0x20000008

00001908 <led_tx_on>:
		port_base->OUTCLR.reg = pin_mask;
    1908:	2280      	movs	r2, #128	; 0x80
    190a:	0512      	lsls	r2, r2, #20
    190c:	4b01      	ldr	r3, [pc, #4]	; (1914 <led_tx_on+0xc>)
    190e:	615a      	str	r2, [r3, #20]
 * @brief Turn on Transmit LED
 */
void led_tx_on(void)
{
    port_pin_set_output_level(PIN_PA27, false);
}
    1910:	4770      	bx	lr
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	41004400 	.word	0x41004400

00001918 <led_tx_off>:
		port_base->OUTSET.reg = pin_mask;
    1918:	2280      	movs	r2, #128	; 0x80
    191a:	0512      	lsls	r2, r2, #20
    191c:	4b01      	ldr	r3, [pc, #4]	; (1924 <led_tx_off+0xc>)
    191e:	619a      	str	r2, [r3, #24]
 * @brief Turn off Transmit LED
 */
void led_tx_off(void)
{
    port_pin_set_output_level(PIN_PA27, true);
}
    1920:	4770      	bx	lr
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	41004400 	.word	0x41004400

00001928 <SysTick_Handler>:
 * Handles the interrupt from the timer
 */
void SysTick_Handler(void)
{
    /* increment the tick count */
    Millisecond_Counter++;
    1928:	4a02      	ldr	r2, [pc, #8]	; (1934 <SysTick_Handler+0xc>)
    192a:	6813      	ldr	r3, [r2, #0]
    192c:	3301      	adds	r3, #1
    192e:	6013      	str	r3, [r2, #0]
}
    1930:	4770      	bx	lr
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	200000a0 	.word	0x200000a0

00001938 <mstimer_now>:
 * The system time is the time elapsed since OS was started.
 * @return milliseconds since OS was started
 */
unsigned long mstimer_now(void)
{
    return Millisecond_Counter;
    1938:	4b01      	ldr	r3, [pc, #4]	; (1940 <mstimer_now+0x8>)
    193a:	6818      	ldr	r0, [r3, #0]
}
    193c:	4770      	bx	lr
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	200000a0 	.word	0x200000a0

00001944 <mstimer_init>:

/**
 * @brief Initialization for timer
 */
void mstimer_init(void)
{
    1944:	b510      	push	{r4, lr}
    /* Setup SysTick Timer for 1ms interrupts  */
    if (SysTick_Config(SystemCoreClock / 1000)) {
    1946:	4b0f      	ldr	r3, [pc, #60]	; (1984 <mstimer_init+0x40>)
    1948:	6818      	ldr	r0, [r3, #0]
    194a:	21fa      	movs	r1, #250	; 0xfa
    194c:	0089      	lsls	r1, r1, #2
    194e:	4b0e      	ldr	r3, [pc, #56]	; (1988 <mstimer_init+0x44>)
    1950:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1952:	3801      	subs	r0, #1
    1954:	4b0d      	ldr	r3, [pc, #52]	; (198c <mstimer_init+0x48>)
    1956:	4298      	cmp	r0, r3
    1958:	d811      	bhi.n	197e <mstimer_init+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    195a:	4a0d      	ldr	r2, [pc, #52]	; (1990 <mstimer_init+0x4c>)
    195c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    195e:	480d      	ldr	r0, [pc, #52]	; (1994 <mstimer_init+0x50>)
    1960:	6a03      	ldr	r3, [r0, #32]
    1962:	021b      	lsls	r3, r3, #8
    1964:	0a1b      	lsrs	r3, r3, #8
    1966:	21c0      	movs	r1, #192	; 0xc0
    1968:	0609      	lsls	r1, r1, #24
    196a:	430b      	orrs	r3, r1
    196c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    196e:	2300      	movs	r3, #0
    1970:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1972:	3307      	adds	r3, #7
    1974:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    1976:	2300      	movs	r3, #0
    1978:	2b00      	cmp	r3, #0
    197a:	d002      	beq.n	1982 <mstimer_init+0x3e>
    197c:	e7fe      	b.n	197c <mstimer_init+0x38>
    return (1UL);                                                   /* Reload value impossible */
    197e:	2301      	movs	r3, #1
    1980:	e7fa      	b.n	1978 <mstimer_init+0x34>
        /* Capture error */
        while (1)
            ;
    }
    NVIC_EnableIRQ(SysTick_IRQn);
}
    1982:	bd10      	pop	{r4, pc}
    1984:	2000000c 	.word	0x2000000c
    1988:	00002cd5 	.word	0x00002cd5
    198c:	00ffffff 	.word	0x00ffffff
    1990:	e000e010 	.word	0xe000e010
    1994:	e000ed00 	.word	0xe000ed00

00001998 <rs485_clock_init>:

/**
 * Initialize the USART SERCOM module clock
 */
static void rs485_clock_init(void)
{
    1998:	b500      	push	{lr}
    199a:	b083      	sub	sp, #12
			PM->APBCMASK.reg |= mask;
    199c:	4a07      	ldr	r2, [pc, #28]	; (19bc <rs485_clock_init+0x24>)
    199e:	6a13      	ldr	r3, [r2, #32]
    19a0:	2120      	movs	r1, #32
    19a2:	430b      	orrs	r3, r1
    19a4:	6213      	str	r3, [r2, #32]
    19a6:	a901      	add	r1, sp, #4
    19a8:	2300      	movs	r3, #0
    19aa:	700b      	strb	r3, [r1, #0]
    system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_SERCOM3);
    /* Turn on Generic clock for USART */
    system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    /*Default is generator 0. Other wise need to configure like below */
    /* gclk_chan_conf.source_generator = GCLK_GENERATOR_1; */
    system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    19ac:	2017      	movs	r0, #23
    19ae:	4b04      	ldr	r3, [pc, #16]	; (19c0 <rs485_clock_init+0x28>)
    19b0:	4798      	blx	r3
    system_gclk_chan_enable(gclk_index);
    19b2:	2017      	movs	r0, #23
    19b4:	4b03      	ldr	r3, [pc, #12]	; (19c4 <rs485_clock_init+0x2c>)
    19b6:	4798      	blx	r3
}
    19b8:	b003      	add	sp, #12
    19ba:	bd00      	pop	{pc}
    19bc:	40000400 	.word	0x40000400
    19c0:	000028c9 	.word	0x000028c9
    19c4:	00002841 	.word	0x00002841

000019c8 <rs485_pin_init>:

/**
 * Initialize the RTS pin
 */
static void rs485_pin_init(void)
{
    19c8:	b570      	push	{r4, r5, r6, lr}
	config->powersave  = false;
    19ca:	4c0b      	ldr	r4, [pc, #44]	; (19f8 <rs485_pin_init+0x30>)
    19cc:	2300      	movs	r3, #0
    19ce:	70a3      	strb	r3, [r4, #2]
	//Configure PIN_A24 as DE and PIN_A25 as /RE
    port_get_config_defaults(&RS485_Port_Config);
    RS485_Port_Config.direction = PORT_PIN_DIR_OUTPUT;
    19d0:	2601      	movs	r6, #1
    19d2:	7026      	strb	r6, [r4, #0]
	
    RS485_Port_Config.input_pull = PORT_PIN_PULL_DOWN;
    19d4:	3302      	adds	r3, #2
    19d6:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(RS485_DE, &RS485_Port_Config);
    19d8:	0021      	movs	r1, r4
    19da:	2018      	movs	r0, #24
    19dc:	4d07      	ldr	r5, [pc, #28]	; (19fc <rs485_pin_init+0x34>)
    19de:	47a8      	blx	r5
	
	RS485_Port_Config.input_pull = PORT_PIN_PULL_UP;
    19e0:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(RS485_RE, &RS485_Port_Config);
    19e2:	0021      	movs	r1, r4
    19e4:	2019      	movs	r0, #25
    19e6:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    19e8:	4b05      	ldr	r3, [pc, #20]	; (1a00 <rs485_pin_init+0x38>)
    19ea:	2280      	movs	r2, #128	; 0x80
    19ec:	0492      	lsls	r2, r2, #18
    19ee:	615a      	str	r2, [r3, #20]
    19f0:	2280      	movs	r2, #128	; 0x80
    19f2:	0452      	lsls	r2, r2, #17
    19f4:	615a      	str	r2, [r3, #20]

	
	
    port_pin_set_output_level(RS485_RE, false);
	port_pin_set_output_level(RS485_DE, false);
}
    19f6:	bd70      	pop	{r4, r5, r6, pc}
    19f8:	200000a8 	.word	0x200000a8
    19fc:	000022d1 	.word	0x000022d1
    1a00:	41004400 	.word	0x41004400

00001a04 <usart_read_callback>:
{
    1a04:	b510      	push	{r4, lr}
    if (!Transmitting) {
    1a06:	4b0a      	ldr	r3, [pc, #40]	; (1a30 <usart_read_callback+0x2c>)
    1a08:	781b      	ldrb	r3, [r3, #0]
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d004      	beq.n	1a18 <usart_read_callback+0x14>
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    1a0e:	4909      	ldr	r1, [pc, #36]	; (1a34 <usart_read_callback+0x30>)
    1a10:	4809      	ldr	r0, [pc, #36]	; (1a38 <usart_read_callback+0x34>)
    1a12:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <usart_read_callback+0x38>)
    1a14:	4798      	blx	r3
}
    1a16:	bd10      	pop	{r4, pc}
        FIFO_Put(&Receive_Queue, rx_buffer[0]);
    1a18:	4b06      	ldr	r3, [pc, #24]	; (1a34 <usart_read_callback+0x30>)
    1a1a:	8819      	ldrh	r1, [r3, #0]
    1a1c:	b2c9      	uxtb	r1, r1
    1a1e:	4808      	ldr	r0, [pc, #32]	; (1a40 <usart_read_callback+0x3c>)
    1a20:	4b08      	ldr	r3, [pc, #32]	; (1a44 <usart_read_callback+0x40>)
    1a22:	4798      	blx	r3
        RS485_Receive_Bytes++;
    1a24:	4a08      	ldr	r2, [pc, #32]	; (1a48 <usart_read_callback+0x44>)
    1a26:	6813      	ldr	r3, [r2, #0]
    1a28:	3301      	adds	r3, #1
    1a2a:	6013      	str	r3, [r2, #0]
    1a2c:	e7ef      	b.n	1a0e <usart_read_callback+0xa>
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	20000334 	.word	0x20000334
    1a34:	20000964 	.word	0x20000964
    1a38:	200000f0 	.word	0x200000f0
    1a3c:	00002059 	.word	0x00002059
    1a40:	20000124 	.word	0x20000124
    1a44:	00001251 	.word	0x00001251
    1a48:	200000ac 	.word	0x200000ac

00001a4c <rs485_usart_init>:

/**
 * Initialize the USART SERCOM module for RS485
 */
static void rs485_usart_init(void)
{
    1a4c:	b570      	push	{r4, r5, r6, lr}
    enum status_code status;

    /* Disable this module since ASF expects it to be disabled. */
    RS485_USART->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1a4e:	4935      	ldr	r1, [pc, #212]	; (1b24 <rs485_usart_init+0xd8>)
    1a50:	680b      	ldr	r3, [r1, #0]
    1a52:	2202      	movs	r2, #2
    1a54:	4393      	bics	r3, r2
    1a56:	600b      	str	r3, [r1, #0]
	config->data_order       = USART_DATAORDER_LSB;
    1a58:	4a33      	ldr	r2, [pc, #204]	; (1b28 <rs485_usart_init+0xdc>)
    1a5a:	2380      	movs	r3, #128	; 0x80
    1a5c:	05db      	lsls	r3, r3, #23
    1a5e:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1a60:	2300      	movs	r3, #0
    1a62:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    1a64:	20ff      	movs	r0, #255	; 0xff
    1a66:	8110      	strh	r0, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    1a68:	2000      	movs	r0, #0
    1a6a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1a6c:	72d3      	strb	r3, [r2, #11]
	config->receiver_enable  = true;
    1a6e:	2401      	movs	r4, #1
    1a70:	2524      	movs	r5, #36	; 0x24
    1a72:	5554      	strb	r4, [r2, r5]
	config->transmitter_enable = true;
    1a74:	3501      	adds	r5, #1
    1a76:	5554      	strb	r4, [r2, r5]
	config->clock_polarity_inverted = false;
    1a78:	3425      	adds	r4, #37	; 0x25
    1a7a:	5513      	strb	r3, [r2, r4]
	config->use_external_clock = false;
    1a7c:	3401      	adds	r4, #1
    1a7e:	5513      	strb	r3, [r2, r4]
	config->ext_clock_freq   = 0;
    1a80:	6293      	str	r3, [r2, #40]	; 0x28
	config->run_in_standby   = false;
    1a82:	3405      	adds	r4, #5
    1a84:	5513      	strb	r3, [r2, r4]
	config->generator_source = GCLK_GENERATOR_0;
    1a86:	3401      	adds	r4, #1
    1a88:	5513      	strb	r3, [r2, r4]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1a8a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1a8c:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
    1a8e:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
    1a90:	7610      	strb	r0, [r2, #24]
	config->start_frame_detection_enable            = false;
    1a92:	7710      	strb	r0, [r2, #28]
	config->encoding_format_enable                  = false;
    1a94:	7650      	strb	r0, [r2, #25]
	config->receive_pulse_length                    = 19;
    1a96:	2313      	movs	r3, #19
    1a98:	7693      	strb	r3, [r2, #26]
	config->collision_detection_enable              = false;
    1a9a:	7750      	strb	r0, [r2, #29]
    // Get default settings
    usart_get_config_defaults(&RS485_USART_Config);
    RS485_USART_Config.baudrate = Baud_Rate;
    1a9c:	4b23      	ldr	r3, [pc, #140]	; (1b2c <rs485_usart_init+0xe0>)
    1a9e:	681b      	ldr	r3, [r3, #0]
    1aa0:	6213      	str	r3, [r2, #32]
    RS485_USART_Config.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
    1aa2:	2390      	movs	r3, #144	; 0x90
    1aa4:	035b      	lsls	r3, r3, #13
    1aa6:	60d3      	str	r3, [r2, #12]
    RS485_USART_Config.pinmux_pad0 = RS485_TX;
    1aa8:	4b21      	ldr	r3, [pc, #132]	; (1b30 <rs485_usart_init+0xe4>)
    1aaa:	6313      	str	r3, [r2, #48]	; 0x30
    RS485_USART_Config.pinmux_pad1 = RS485_RX;
    1aac:	4b21      	ldr	r3, [pc, #132]	; (1b34 <rs485_usart_init+0xe8>)
    1aae:	6353      	str	r3, [r2, #52]	; 0x34
    RS485_USART_Config.pinmux_pad2 = PINMUX_UNUSED;
    1ab0:	2301      	movs	r3, #1
    1ab2:	425b      	negs	r3, r3
    1ab4:	6393      	str	r3, [r2, #56]	; 0x38
    RS485_USART_Config.pinmux_pad3 = PINMUX_UNUSED;
    1ab6:	63d3      	str	r3, [r2, #60]	; 0x3c
    status = usart_init(&RS485_USART_Module, RS485_USART, &RS485_USART_Config);
    1ab8:	481f      	ldr	r0, [pc, #124]	; (1b38 <rs485_usart_init+0xec>)
    1aba:	4b20      	ldr	r3, [pc, #128]	; (1b3c <rs485_usart_init+0xf0>)
    1abc:	4798      	blx	r3
    while (status != STATUS_OK) {
    1abe:	2800      	cmp	r0, #0
    1ac0:	d1fd      	bne.n	1abe <rs485_usart_init+0x72>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ac2:	4b1d      	ldr	r3, [pc, #116]	; (1b38 <rs485_usart_init+0xec>)
    1ac4:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ac6:	0020      	movs	r0, r4
    1ac8:	4b1d      	ldr	r3, [pc, #116]	; (1b40 <rs485_usart_init+0xf4>)
    1aca:	4798      	blx	r3
    1acc:	231f      	movs	r3, #31
    1ace:	4018      	ands	r0, r3
    1ad0:	3b1e      	subs	r3, #30
    1ad2:	4083      	lsls	r3, r0
    1ad4:	4a1b      	ldr	r2, [pc, #108]	; (1b44 <rs485_usart_init+0xf8>)
    1ad6:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ad8:	4b17      	ldr	r3, [pc, #92]	; (1b38 <rs485_usart_init+0xec>)
    1ada:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1adc:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d1fa      	bne.n	1ad8 <rs485_usart_init+0x8c>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1ae2:	6823      	ldr	r3, [r4, #0]
    1ae4:	2202      	movs	r2, #2
    1ae6:	4313      	orrs	r3, r2
    1ae8:	6023      	str	r3, [r4, #0]
        /* hardware not initialized correctly - figure out why! */
    }
    usart_enable(&RS485_USART_Module);
#ifdef USART_CALLBACK_MODE
    usart_register_callback(&RS485_USART_Module, usart_read_callback,
    1aea:	4c13      	ldr	r4, [pc, #76]	; (1b38 <rs485_usart_init+0xec>)
    1aec:	3a01      	subs	r2, #1
    1aee:	4916      	ldr	r1, [pc, #88]	; (1b48 <rs485_usart_init+0xfc>)
    1af0:	0020      	movs	r0, r4
    1af2:	4e16      	ldr	r6, [pc, #88]	; (1b4c <rs485_usart_init+0x100>)
    1af4:	47b0      	blx	r6
    1af6:	2531      	movs	r5, #49	; 0x31
    1af8:	5d63      	ldrb	r3, [r4, r5]
    1afa:	2202      	movs	r2, #2
    1afc:	4313      	orrs	r3, r2
    1afe:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_RECEIVED);
    usart_enable_callback(&RS485_USART_Module, USART_CALLBACK_BUFFER_RECEIVED);
    usart_register_callback(&RS485_USART_Module, usart_write_callback,
    1b00:	2200      	movs	r2, #0
    1b02:	4913      	ldr	r1, [pc, #76]	; (1b50 <rs485_usart_init+0x104>)
    1b04:	0020      	movs	r0, r4
    1b06:	47b0      	blx	r6
    1b08:	5d63      	ldrb	r3, [r4, r5]
    1b0a:	2201      	movs	r2, #1
    1b0c:	4313      	orrs	r3, r2
    1b0e:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(
        &RS485_USART_Module, USART_CALLBACK_BUFFER_TRANSMITTED);
    system_interrupt_set_priority(
    1b10:	2100      	movs	r1, #0
    1b12:	200c      	movs	r0, #12
    1b14:	4b0f      	ldr	r3, [pc, #60]	; (1b54 <rs485_usart_init+0x108>)
    1b16:	4798      	blx	r3
        SYSTEM_INTERRUPT_MODULE_SERCOM3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    /* initial callback call to prepare to begin receiving data */
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    1b18:	490f      	ldr	r1, [pc, #60]	; (1b58 <rs485_usart_init+0x10c>)
    1b1a:	0020      	movs	r0, r4
    1b1c:	4b0f      	ldr	r3, [pc, #60]	; (1b5c <rs485_usart_init+0x110>)
    1b1e:	4798      	blx	r3
#endif    
}
    1b20:	bd70      	pop	{r4, r5, r6, pc}
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	42001400 	.word	0x42001400
    1b28:	200000b0 	.word	0x200000b0
    1b2c:	200000a4 	.word	0x200000a4
    1b30:	00160002 	.word	0x00160002
    1b34:	00170002 	.word	0x00170002
    1b38:	200000f0 	.word	0x200000f0
    1b3c:	00001ea9 	.word	0x00001ea9
    1b40:	0000224d 	.word	0x0000224d
    1b44:	e000e100 	.word	0xe000e100
    1b48:	00001a05 	.word	0x00001a05
    1b4c:	00002041 	.word	0x00002041
    1b50:	00001bad 	.word	0x00001bad
    1b54:	00002919 	.word	0x00002919
    1b58:	20000964 	.word	0x20000964
    1b5c:	00002059 	.word	0x00002059

00001b60 <rs485_rts_enable>:
{
    1b60:	b510      	push	{r4, lr}
    if (enable) {
    1b62:	2800      	cmp	r0, #0
    1b64:	d10c      	bne.n	1b80 <rs485_rts_enable+0x20>
    1b66:	4b0d      	ldr	r3, [pc, #52]	; (1b9c <rs485_rts_enable+0x3c>)
    1b68:	2280      	movs	r2, #128	; 0x80
    1b6a:	0492      	lsls	r2, r2, #18
    1b6c:	615a      	str	r2, [r3, #20]
    1b6e:	2280      	movs	r2, #128	; 0x80
    1b70:	0452      	lsls	r2, r2, #17
    1b72:	615a      	str	r2, [r3, #20]
        led_tx_off();
    1b74:	4b0a      	ldr	r3, [pc, #40]	; (1ba0 <rs485_rts_enable+0x40>)
    1b76:	4798      	blx	r3
        Transmitting = false;
    1b78:	2200      	movs	r2, #0
    1b7a:	4b0a      	ldr	r3, [pc, #40]	; (1ba4 <rs485_rts_enable+0x44>)
    1b7c:	701a      	strb	r2, [r3, #0]
}
    1b7e:	bd10      	pop	{r4, pc}
        Transmitting = true;
    1b80:	2201      	movs	r2, #1
    1b82:	4b08      	ldr	r3, [pc, #32]	; (1ba4 <rs485_rts_enable+0x44>)
    1b84:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    1b86:	4b05      	ldr	r3, [pc, #20]	; (1b9c <rs485_rts_enable+0x3c>)
    1b88:	2280      	movs	r2, #128	; 0x80
    1b8a:	0492      	lsls	r2, r2, #18
    1b8c:	619a      	str	r2, [r3, #24]
    1b8e:	2280      	movs	r2, #128	; 0x80
    1b90:	0452      	lsls	r2, r2, #17
    1b92:	619a      	str	r2, [r3, #24]
        led_tx_on();
    1b94:	4b04      	ldr	r3, [pc, #16]	; (1ba8 <rs485_rts_enable+0x48>)
    1b96:	4798      	blx	r3
    1b98:	e7f1      	b.n	1b7e <rs485_rts_enable+0x1e>
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	41004400 	.word	0x41004400
    1ba0:	00001919 	.word	0x00001919
    1ba4:	20000334 	.word	0x20000334
    1ba8:	00001909 	.word	0x00001909

00001bac <usart_write_callback>:
{
    1bac:	b510      	push	{r4, lr}
    rs485_rts_enable(false);
    1bae:	2000      	movs	r0, #0
    1bb0:	4b01      	ldr	r3, [pc, #4]	; (1bb8 <usart_write_callback+0xc>)
    1bb2:	4798      	blx	r3
}
    1bb4:	bd10      	pop	{r4, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	00001b61 	.word	0x00001b61

00001bbc <rs485_baud_rate_set>:
    switch (baudrate) {
    1bbc:	2396      	movs	r3, #150	; 0x96
    1bbe:	021b      	lsls	r3, r3, #8
    1bc0:	4298      	cmp	r0, r3
    1bc2:	d103      	bne.n	1bcc <rs485_baud_rate_set+0x10>
            Baud_Rate = baudrate;
    1bc4:	4b02      	ldr	r3, [pc, #8]	; (1bd0 <rs485_baud_rate_set+0x14>)
    1bc6:	6018      	str	r0, [r3, #0]
    bool valid = true;
    1bc8:	2001      	movs	r0, #1
}
    1bca:	4770      	bx	lr
            valid = false;
    1bcc:	2000      	movs	r0, #0
    1bce:	e7fc      	b.n	1bca <rs485_baud_rate_set+0xe>
    1bd0:	200000a4 	.word	0x200000a4

00001bd4 <rs485_init>:

/* SERCOM3 UART initialization */
void rs485_init(void)
{
    1bd4:	b510      	push	{r4, lr}
    /* initialize the Rx and Tx byte queues */
    FIFO_Init(&Receive_Queue, &Receive_Queue_Data[0],
    1bd6:	2280      	movs	r2, #128	; 0x80
    1bd8:	0092      	lsls	r2, r2, #2
    1bda:	4905      	ldr	r1, [pc, #20]	; (1bf0 <rs485_init+0x1c>)
    1bdc:	4805      	ldr	r0, [pc, #20]	; (1bf4 <rs485_init+0x20>)
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <rs485_init+0x24>)
    1be0:	4798      	blx	r3
        (unsigned)sizeof(Receive_Queue_Data));
    rs485_clock_init();
    1be2:	4b06      	ldr	r3, [pc, #24]	; (1bfc <rs485_init+0x28>)
    1be4:	4798      	blx	r3
    rs485_pin_init();
    1be6:	4b06      	ldr	r3, [pc, #24]	; (1c00 <rs485_init+0x2c>)
    1be8:	4798      	blx	r3
    rs485_usart_init();
    1bea:	4b06      	ldr	r3, [pc, #24]	; (1c04 <rs485_init+0x30>)
    1bec:	4798      	blx	r3
}
    1bee:	bd10      	pop	{r4, pc}
    1bf0:	20000134 	.word	0x20000134
    1bf4:	20000124 	.word	0x20000124
    1bf8:	0000128d 	.word	0x0000128d
    1bfc:	00001999 	.word	0x00001999
    1c00:	000019c9 	.word	0x000019c9
    1c04:	00001a4d 	.word	0x00001a4d

00001c08 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1c08:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    1c0a:	2201      	movs	r2, #1
    1c0c:	4b03      	ldr	r3, [pc, #12]	; (1c1c <WDT_Handler+0x14>)
    1c0e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    1c10:	4b03      	ldr	r3, [pc, #12]	; (1c20 <WDT_Handler+0x18>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	2b00      	cmp	r3, #0
    1c16:	d000      	beq.n	1c1a <WDT_Handler+0x12>
		wdt_early_warning_callback();
    1c18:	4798      	blx	r3
	}
}
    1c1a:	bd10      	pop	{r4, pc}
    1c1c:	40001000 	.word	0x40001000
    1c20:	2000096c 	.word	0x2000096c

00001c24 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1c24:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1c26:	0080      	lsls	r0, r0, #2
    1c28:	4b16      	ldr	r3, [pc, #88]	; (1c84 <_tc_interrupt_handler+0x60>)
    1c2a:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c2c:	682b      	ldr	r3, [r5, #0]
    1c2e:	7b9c      	ldrb	r4, [r3, #14]
			module->register_callback_mask &
    1c30:	7e2a      	ldrb	r2, [r5, #24]
			module->enable_callback_mask;
    1c32:	7e6b      	ldrb	r3, [r5, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c34:	4014      	ands	r4, r2
    1c36:	401c      	ands	r4, r3

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1c38:	07e3      	lsls	r3, r4, #31
    1c3a:	d406      	bmi.n	1c4a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1c3c:	07a3      	lsls	r3, r4, #30
    1c3e:	d40b      	bmi.n	1c58 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1c40:	06e3      	lsls	r3, r4, #27
    1c42:	d410      	bmi.n	1c66 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1c44:	06a3      	lsls	r3, r4, #26
    1c46:	d415      	bmi.n	1c74 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1c48:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1c4a:	0028      	movs	r0, r5
    1c4c:	68ab      	ldr	r3, [r5, #8]
    1c4e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1c50:	2301      	movs	r3, #1
    1c52:	682a      	ldr	r2, [r5, #0]
    1c54:	7393      	strb	r3, [r2, #14]
    1c56:	e7f1      	b.n	1c3c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1c58:	0028      	movs	r0, r5
    1c5a:	68eb      	ldr	r3, [r5, #12]
    1c5c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1c5e:	2302      	movs	r3, #2
    1c60:	682a      	ldr	r2, [r5, #0]
    1c62:	7393      	strb	r3, [r2, #14]
    1c64:	e7ec      	b.n	1c40 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1c66:	0028      	movs	r0, r5
    1c68:	692b      	ldr	r3, [r5, #16]
    1c6a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1c6c:	2310      	movs	r3, #16
    1c6e:	682a      	ldr	r2, [r5, #0]
    1c70:	7393      	strb	r3, [r2, #14]
    1c72:	e7e7      	b.n	1c44 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1c74:	0028      	movs	r0, r5
    1c76:	696b      	ldr	r3, [r5, #20]
    1c78:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1c7a:	682b      	ldr	r3, [r5, #0]
    1c7c:	2220      	movs	r2, #32
    1c7e:	739a      	strb	r2, [r3, #14]
}
    1c80:	e7e2      	b.n	1c48 <_tc_interrupt_handler+0x24>
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	20000970 	.word	0x20000970

00001c88 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1c88:	b510      	push	{r4, lr}
    1c8a:	2000      	movs	r0, #0
    1c8c:	4b01      	ldr	r3, [pc, #4]	; (1c94 <TC3_Handler+0xc>)
    1c8e:	4798      	blx	r3
    1c90:	bd10      	pop	{r4, pc}
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	00001c25 	.word	0x00001c25

00001c98 <TC4_Handler>:
    1c98:	b510      	push	{r4, lr}
    1c9a:	2001      	movs	r0, #1
    1c9c:	4b01      	ldr	r3, [pc, #4]	; (1ca4 <TC4_Handler+0xc>)
    1c9e:	4798      	blx	r3
    1ca0:	bd10      	pop	{r4, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	00001c25 	.word	0x00001c25

00001ca8 <TC5_Handler>:
    1ca8:	b510      	push	{r4, lr}
    1caa:	2002      	movs	r0, #2
    1cac:	4b01      	ldr	r3, [pc, #4]	; (1cb4 <TC5_Handler+0xc>)
    1cae:	4798      	blx	r3
    1cb0:	bd10      	pop	{r4, pc}
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	00001c25 	.word	0x00001c25

00001cb8 <TC6_Handler>:
    1cb8:	b510      	push	{r4, lr}
    1cba:	2003      	movs	r0, #3
    1cbc:	4b01      	ldr	r3, [pc, #4]	; (1cc4 <TC6_Handler+0xc>)
    1cbe:	4798      	blx	r3
    1cc0:	bd10      	pop	{r4, pc}
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	00001c25 	.word	0x00001c25

00001cc8 <TC7_Handler>:
    1cc8:	b510      	push	{r4, lr}
    1cca:	2004      	movs	r0, #4
    1ccc:	4b01      	ldr	r3, [pc, #4]	; (1cd4 <TC7_Handler+0xc>)
    1cce:	4798      	blx	r3
    1cd0:	bd10      	pop	{r4, pc}
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	00001c25 	.word	0x00001c25

00001cd8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	46de      	mov	lr, fp
    1cdc:	4657      	mov	r7, sl
    1cde:	464e      	mov	r6, r9
    1ce0:	4645      	mov	r5, r8
    1ce2:	b5e0      	push	{r5, r6, r7, lr}
    1ce4:	b087      	sub	sp, #28
    1ce6:	0005      	movs	r5, r0
    1ce8:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1cea:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1cec:	0030      	movs	r0, r6
    1cee:	4b69      	ldr	r3, [pc, #420]	; (1e94 <_usart_set_config+0x1bc>)
    1cf0:	4798      	blx	r3
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1cf2:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1cf4:	2200      	movs	r2, #0
    1cf6:	230e      	movs	r3, #14
    1cf8:	a902      	add	r1, sp, #8
    1cfa:	468c      	mov	ip, r1
    1cfc:	4463      	add	r3, ip
    1cfe:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1d00:	8a22      	ldrh	r2, [r4, #16]
    1d02:	2380      	movs	r3, #128	; 0x80
    1d04:	01db      	lsls	r3, r3, #7
    1d06:	429a      	cmp	r2, r3
    1d08:	d03b      	beq.n	1d82 <_usart_set_config+0xaa>
    1d0a:	d90c      	bls.n	1d26 <_usart_set_config+0x4e>
    1d0c:	23c0      	movs	r3, #192	; 0xc0
    1d0e:	01db      	lsls	r3, r3, #7
    1d10:	429a      	cmp	r2, r3
    1d12:	d031      	beq.n	1d78 <_usart_set_config+0xa0>
    1d14:	2380      	movs	r3, #128	; 0x80
    1d16:	021b      	lsls	r3, r3, #8
    1d18:	429a      	cmp	r2, r3
    1d1a:	d10d      	bne.n	1d38 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1d1c:	2303      	movs	r3, #3
    1d1e:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d20:	2300      	movs	r3, #0
    1d22:	469a      	mov	sl, r3
			break;
    1d24:	e00c      	b.n	1d40 <_usart_set_config+0x68>
	switch (config->sample_rate) {
    1d26:	2380      	movs	r3, #128	; 0x80
    1d28:	019b      	lsls	r3, r3, #6
    1d2a:	429a      	cmp	r2, r3
    1d2c:	d104      	bne.n	1d38 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1d2e:	2310      	movs	r3, #16
    1d30:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1d32:	3b0f      	subs	r3, #15
    1d34:	469a      	mov	sl, r3
			break;
    1d36:	e003      	b.n	1d40 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1d38:	2310      	movs	r3, #16
    1d3a:	4698      	mov	r8, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d3c:	2300      	movs	r3, #0
    1d3e:	469a      	mov	sl, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1d40:	6823      	ldr	r3, [r4, #0]
    1d42:	68e1      	ldr	r1, [r4, #12]
    1d44:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
    1d46:	6961      	ldr	r1, [r4, #20]
    1d48:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1d4a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1d4c:	7e22      	ldrb	r2, [r4, #24]
    1d4e:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    1d50:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1d52:	2226      	movs	r2, #38	; 0x26
    1d54:	5ca2      	ldrb	r2, [r4, r2]
    1d56:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    1d58:	4313      	orrs	r3, r2
    1d5a:	4699      	mov	r9, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1d5c:	6862      	ldr	r2, [r4, #4]
    1d5e:	9203      	str	r2, [sp, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1d60:	2a00      	cmp	r2, #0
    1d62:	d021      	beq.n	1da8 <_usart_set_config+0xd0>
    1d64:	2380      	movs	r3, #128	; 0x80
    1d66:	055b      	lsls	r3, r3, #21
    1d68:	429a      	cmp	r2, r3
    1d6a:	d13e      	bne.n	1dea <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1d6c:	2327      	movs	r3, #39	; 0x27
    1d6e:	5ce3      	ldrb	r3, [r4, r3]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d00b      	beq.n	1d8c <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
    1d74:	2000      	movs	r0, #0
    1d76:	e039      	b.n	1dec <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1d78:	2308      	movs	r3, #8
    1d7a:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1d7c:	3b07      	subs	r3, #7
    1d7e:	469a      	mov	sl, r3
			break;
    1d80:	e7de      	b.n	1d40 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1d82:	2308      	movs	r3, #8
    1d84:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d86:	2300      	movs	r3, #0
    1d88:	469a      	mov	sl, r3
    1d8a:	e7d9      	b.n	1d40 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1d8c:	6a23      	ldr	r3, [r4, #32]
    1d8e:	4698      	mov	r8, r3
    1d90:	b2c0      	uxtb	r0, r0
    1d92:	4b41      	ldr	r3, [pc, #260]	; (1e98 <_usart_set_config+0x1c0>)
    1d94:	4798      	blx	r3
    1d96:	0001      	movs	r1, r0
    1d98:	220e      	movs	r2, #14
    1d9a:	ab02      	add	r3, sp, #8
    1d9c:	469c      	mov	ip, r3
    1d9e:	4462      	add	r2, ip
    1da0:	4640      	mov	r0, r8
    1da2:	4b3e      	ldr	r3, [pc, #248]	; (1e9c <_usart_set_config+0x1c4>)
    1da4:	4798      	blx	r3
    1da6:	e021      	b.n	1dec <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1da8:	2327      	movs	r3, #39	; 0x27
    1daa:	5ce3      	ldrb	r3, [r4, r3]
    1dac:	2b00      	cmp	r3, #0
    1dae:	d00b      	beq.n	1dc8 <_usart_set_config+0xf0>
				status_code =
    1db0:	4643      	mov	r3, r8
    1db2:	9300      	str	r3, [sp, #0]
    1db4:	4653      	mov	r3, sl
    1db6:	220e      	movs	r2, #14
    1db8:	a902      	add	r1, sp, #8
    1dba:	468c      	mov	ip, r1
    1dbc:	4462      	add	r2, ip
    1dbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1dc0:	6a20      	ldr	r0, [r4, #32]
    1dc2:	4f37      	ldr	r7, [pc, #220]	; (1ea0 <_usart_set_config+0x1c8>)
    1dc4:	47b8      	blx	r7
    1dc6:	e011      	b.n	1dec <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1dc8:	6a23      	ldr	r3, [r4, #32]
    1dca:	469b      	mov	fp, r3
    1dcc:	b2c0      	uxtb	r0, r0
    1dce:	4b32      	ldr	r3, [pc, #200]	; (1e98 <_usart_set_config+0x1c0>)
    1dd0:	4798      	blx	r3
    1dd2:	0001      	movs	r1, r0
				status_code =
    1dd4:	4643      	mov	r3, r8
    1dd6:	9300      	str	r3, [sp, #0]
    1dd8:	4653      	mov	r3, sl
    1dda:	220e      	movs	r2, #14
    1ddc:	a802      	add	r0, sp, #8
    1dde:	4684      	mov	ip, r0
    1de0:	4462      	add	r2, ip
    1de2:	4658      	mov	r0, fp
    1de4:	4f2e      	ldr	r7, [pc, #184]	; (1ea0 <_usart_set_config+0x1c8>)
    1de6:	47b8      	blx	r7
    1de8:	e000      	b.n	1dec <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
    1dea:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1dec:	2800      	cmp	r0, #0
    1dee:	d142      	bne.n	1e76 <_usart_set_config+0x19e>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1df0:	7e63      	ldrb	r3, [r4, #25]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d001      	beq.n	1dfa <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1df6:	7ea3      	ldrb	r3, [r4, #26]
    1df8:	73b3      	strb	r3, [r6, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1dfa:	230e      	movs	r3, #14
    1dfc:	aa02      	add	r2, sp, #8
    1dfe:	4694      	mov	ip, r2
    1e00:	4463      	add	r3, ip
    1e02:	881b      	ldrh	r3, [r3, #0]
    1e04:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1e06:	464b      	mov	r3, r9
    1e08:	9a03      	ldr	r2, [sp, #12]
    1e0a:	4313      	orrs	r3, r2

	if (config->use_external_clock == false) {
    1e0c:	2227      	movs	r2, #39	; 0x27
    1e0e:	5ca2      	ldrb	r2, [r4, r2]
    1e10:	2a00      	cmp	r2, #0
    1e12:	d101      	bne.n	1e18 <_usart_set_config+0x140>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1e14:	3204      	adds	r2, #4
    1e16:	4313      	orrs	r3, r2
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e18:	7e61      	ldrb	r1, [r4, #25]
    1e1a:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e1c:	7f22      	ldrb	r2, [r4, #28]
    1e1e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e20:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e22:	7f62      	ldrb	r2, [r4, #29]
    1e24:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e26:	4311      	orrs	r1, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e28:	2224      	movs	r2, #36	; 0x24
    1e2a:	5ca2      	ldrb	r2, [r4, r2]
    1e2c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e2e:	4311      	orrs	r1, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1e30:	2225      	movs	r2, #37	; 0x25
    1e32:	5ca2      	ldrb	r2, [r4, r2]
    1e34:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e36:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1e38:	7aa2      	ldrb	r2, [r4, #10]
    1e3a:	4311      	orrs	r1, r2
	ctrlb |= (uint32_t)config->character_size;
    1e3c:	7ae2      	ldrb	r2, [r4, #11]
    1e3e:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1e40:	8922      	ldrh	r2, [r4, #8]
    1e42:	2aff      	cmp	r2, #255	; 0xff
    1e44:	d01e      	beq.n	1e84 <_usart_set_config+0x1ac>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1e46:	2780      	movs	r7, #128	; 0x80
    1e48:	047f      	lsls	r7, r7, #17
    1e4a:	433b      	orrs	r3, r7
		ctrlb |= config->parity;
    1e4c:	4311      	orrs	r1, r2
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1e4e:	222c      	movs	r2, #44	; 0x2c
    1e50:	5ca2      	ldrb	r2, [r4, r2]
    1e52:	2a00      	cmp	r2, #0
    1e54:	d103      	bne.n	1e5e <_usart_set_config+0x186>
    1e56:	4a13      	ldr	r2, [pc, #76]	; (1ea4 <_usart_set_config+0x1cc>)
    1e58:	7892      	ldrb	r2, [r2, #2]
    1e5a:	0792      	lsls	r2, r2, #30
    1e5c:	d501      	bpl.n	1e62 <_usart_set_config+0x18a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1e5e:	2280      	movs	r2, #128	; 0x80
    1e60:	4313      	orrs	r3, r2
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e62:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e64:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    1e66:	2a00      	cmp	r2, #0
    1e68:	d1fb      	bne.n	1e62 <_usart_set_config+0x18a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1e6a:	6071      	str	r1, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e6c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e6e:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    1e70:	2a00      	cmp	r2, #0
    1e72:	d1fb      	bne.n	1e6c <_usart_set_config+0x194>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1e74:	6033      	str	r3, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
    1e76:	b007      	add	sp, #28
    1e78:	bc3c      	pop	{r2, r3, r4, r5}
    1e7a:	4690      	mov	r8, r2
    1e7c:	4699      	mov	r9, r3
    1e7e:	46a2      	mov	sl, r4
    1e80:	46ab      	mov	fp, r5
    1e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
    1e84:	7ee2      	ldrb	r2, [r4, #27]
    1e86:	2a00      	cmp	r2, #0
    1e88:	d0e1      	beq.n	1e4e <_usart_set_config+0x176>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1e8a:	2280      	movs	r2, #128	; 0x80
    1e8c:	04d2      	lsls	r2, r2, #19
    1e8e:	4313      	orrs	r3, r2
    1e90:	e7dd      	b.n	1e4e <_usart_set_config+0x176>
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	00000975 	.word	0x00000975
    1e98:	000028e5 	.word	0x000028e5
    1e9c:	000006e9 	.word	0x000006e9
    1ea0:	00000715 	.word	0x00000715
    1ea4:	41002000 	.word	0x41002000

00001ea8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eaa:	b089      	sub	sp, #36	; 0x24
    1eac:	0006      	movs	r6, r0
    1eae:	000c      	movs	r4, r1
    1eb0:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1eb2:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1eb4:	0008      	movs	r0, r1
    1eb6:	4b42      	ldr	r3, [pc, #264]	; (1fc0 <usart_init+0x118>)
    1eb8:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1eba:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1ebc:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1ebe:	6823      	ldr	r3, [r4, #0]
    1ec0:	07db      	lsls	r3, r3, #31
    1ec2:	d503      	bpl.n	1ecc <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1ec4:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1ec6:	0028      	movs	r0, r5
    1ec8:	b009      	add	sp, #36	; 0x24
    1eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1ecc:	6823      	ldr	r3, [r4, #0]
    1ece:	079b      	lsls	r3, r3, #30
    1ed0:	d501      	bpl.n	1ed6 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
    1ed2:	251c      	movs	r5, #28
    1ed4:	e7f7      	b.n	1ec6 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1ed6:	2301      	movs	r3, #1
    1ed8:	4093      	lsls	r3, r2
    1eda:	4a3a      	ldr	r2, [pc, #232]	; (1fc4 <usart_init+0x11c>)
    1edc:	6a11      	ldr	r1, [r2, #32]
    1ede:	430b      	orrs	r3, r1
    1ee0:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1ee2:	252d      	movs	r5, #45	; 0x2d
    1ee4:	5d7b      	ldrb	r3, [r7, r5]
    1ee6:	a907      	add	r1, sp, #28
    1ee8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1eea:	b2c3      	uxtb	r3, r0
    1eec:	9301      	str	r3, [sp, #4]
    1eee:	0018      	movs	r0, r3
    1ef0:	4b35      	ldr	r3, [pc, #212]	; (1fc8 <usart_init+0x120>)
    1ef2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1ef4:	9801      	ldr	r0, [sp, #4]
    1ef6:	4b35      	ldr	r3, [pc, #212]	; (1fcc <usart_init+0x124>)
    1ef8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1efa:	5d78      	ldrb	r0, [r7, r5]
    1efc:	2100      	movs	r1, #0
    1efe:	4b34      	ldr	r3, [pc, #208]	; (1fd0 <usart_init+0x128>)
    1f00:	4798      	blx	r3
	module->character_size = config->character_size;
    1f02:	7afb      	ldrb	r3, [r7, #11]
    1f04:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    1f06:	2324      	movs	r3, #36	; 0x24
    1f08:	5cfb      	ldrb	r3, [r7, r3]
    1f0a:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1f0c:	2325      	movs	r3, #37	; 0x25
    1f0e:	5cfb      	ldrb	r3, [r7, r3]
    1f10:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1f12:	7efb      	ldrb	r3, [r7, #27]
    1f14:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1f16:	7f3b      	ldrb	r3, [r7, #28]
    1f18:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    1f1a:	0039      	movs	r1, r7
    1f1c:	0030      	movs	r0, r6
    1f1e:	4b2d      	ldr	r3, [pc, #180]	; (1fd4 <usart_init+0x12c>)
    1f20:	4798      	blx	r3
    1f22:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    1f24:	d1cf      	bne.n	1ec6 <usart_init+0x1e>
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1f26:	ab06      	add	r3, sp, #24
    1f28:	2280      	movs	r2, #128	; 0x80
    1f2a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f2c:	2200      	movs	r2, #0
    1f2e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1f30:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f32:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1f36:	9302      	str	r3, [sp, #8]
    1f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f3a:	9303      	str	r3, [sp, #12]
    1f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f3e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    1f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f42:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    1f44:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    1f46:	2700      	movs	r7, #0
    1f48:	e006      	b.n	1f58 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1f4a:	0039      	movs	r1, r7
    1f4c:	0020      	movs	r0, r4
    1f4e:	4b22      	ldr	r3, [pc, #136]	; (1fd8 <usart_init+0x130>)
    1f50:	4798      	blx	r3
    1f52:	e008      	b.n	1f66 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    1f54:	3701      	adds	r7, #1
    1f56:	b2ff      	uxtb	r7, r7
    1f58:	2f03      	cmp	r7, #3
    1f5a:	d80d      	bhi.n	1f78 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f5c:	00bb      	lsls	r3, r7, #2
    1f5e:	aa02      	add	r2, sp, #8
    1f60:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    1f62:	2800      	cmp	r0, #0
    1f64:	d0f1      	beq.n	1f4a <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    1f66:	1c43      	adds	r3, r0, #1
    1f68:	d0f4      	beq.n	1f54 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1f6a:	a906      	add	r1, sp, #24
    1f6c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1f6e:	0c00      	lsrs	r0, r0, #16
    1f70:	b2c0      	uxtb	r0, r0
    1f72:	4b1a      	ldr	r3, [pc, #104]	; (1fdc <usart_init+0x134>)
    1f74:	4798      	blx	r3
    1f76:	e7ed      	b.n	1f54 <usart_init+0xac>
    1f78:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1f7a:	2a05      	cmp	r2, #5
    1f7c:	d806      	bhi.n	1f8c <usart_init+0xe4>
		module->callback[i]            = NULL;
    1f7e:	1c93      	adds	r3, r2, #2
    1f80:	009b      	lsls	r3, r3, #2
    1f82:	18f3      	adds	r3, r6, r3
    1f84:	2100      	movs	r1, #0
    1f86:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1f88:	3201      	adds	r2, #1
    1f8a:	e7f6      	b.n	1f7a <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    1f8c:	2200      	movs	r2, #0
    1f8e:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1f90:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1f92:	2300      	movs	r3, #0
    1f94:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1f96:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1f98:	3230      	adds	r2, #48	; 0x30
    1f9a:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    1f9c:	3201      	adds	r2, #1
    1f9e:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    1fa0:	3201      	adds	r2, #1
    1fa2:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    1fa4:	3201      	adds	r2, #1
    1fa6:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1fa8:	6830      	ldr	r0, [r6, #0]
    1faa:	4b05      	ldr	r3, [pc, #20]	; (1fc0 <usart_init+0x118>)
    1fac:	4798      	blx	r3
    1fae:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1fb0:	490b      	ldr	r1, [pc, #44]	; (1fe0 <usart_init+0x138>)
    1fb2:	4b0c      	ldr	r3, [pc, #48]	; (1fe4 <usart_init+0x13c>)
    1fb4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1fb6:	00a4      	lsls	r4, r4, #2
    1fb8:	4b0b      	ldr	r3, [pc, #44]	; (1fe8 <usart_init+0x140>)
    1fba:	50e6      	str	r6, [r4, r3]
	return status_code;
    1fbc:	e783      	b.n	1ec6 <usart_init+0x1e>
    1fbe:	46c0      	nop			; (mov r8, r8)
    1fc0:	00000975 	.word	0x00000975
    1fc4:	40000400 	.word	0x40000400
    1fc8:	000028c9 	.word	0x000028c9
    1fcc:	00002841 	.word	0x00002841
    1fd0:	000007b1 	.word	0x000007b1
    1fd4:	00001cd9 	.word	0x00001cd9
    1fd8:	000007fd 	.word	0x000007fd
    1fdc:	00002a01 	.word	0x00002a01
    1fe0:	00002069 	.word	0x00002069
    1fe4:	0000220d 	.word	0x0000220d
    1fe8:	20000984 	.word	0x20000984

00001fec <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fee:	0004      	movs	r4, r0
    1ff0:	000d      	movs	r5, r1
    1ff2:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ff4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1ff6:	4b10      	ldr	r3, [pc, #64]	; (2038 <STACK_SIZE+0x38>)
    1ff8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1ffa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1ffc:	b29b      	uxth	r3, r3
    1ffe:	2b00      	cmp	r3, #0
    2000:	d003      	beq.n	200a <STACK_SIZE+0xa>
	cpu_irq_leave_critical();
    2002:	4b0e      	ldr	r3, [pc, #56]	; (203c <STACK_SIZE+0x3c>)
    2004:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2006:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    200a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    200c:	4b0b      	ldr	r3, [pc, #44]	; (203c <STACK_SIZE+0x3c>)
    200e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2010:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2012:	2205      	movs	r2, #5
    2014:	2332      	movs	r3, #50	; 0x32
    2016:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2018:	3b2e      	subs	r3, #46	; 0x2e
    201a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    201c:	7a23      	ldrb	r3, [r4, #8]
    201e:	2b00      	cmp	r3, #0
    2020:	d001      	beq.n	2026 <STACK_SIZE+0x26>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2022:	2320      	movs	r3, #32
    2024:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2026:	7a63      	ldrb	r3, [r4, #9]
    2028:	2b00      	cmp	r3, #0
    202a:	d003      	beq.n	2034 <STACK_SIZE+0x34>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    202c:	2308      	movs	r3, #8
    202e:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2030:	2000      	movs	r0, #0
    2032:	e7e9      	b.n	2008 <STACK_SIZE+0x8>
    2034:	2000      	movs	r0, #0
    2036:	e7e7      	b.n	2008 <STACK_SIZE+0x8>
    2038:	000022f9 	.word	0x000022f9
    203c:	00002339 	.word	0x00002339

00002040 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2040:	1c93      	adds	r3, r2, #2
    2042:	009b      	lsls	r3, r3, #2
    2044:	18c3      	adds	r3, r0, r3
    2046:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2048:	2301      	movs	r3, #1
    204a:	4093      	lsls	r3, r2
    204c:	001a      	movs	r2, r3
    204e:	2130      	movs	r1, #48	; 0x30
    2050:	5c43      	ldrb	r3, [r0, r1]
    2052:	4313      	orrs	r3, r2
    2054:	5443      	strb	r3, [r0, r1]
}
    2056:	4770      	bx	lr

00002058 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2058:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    205a:	2201      	movs	r2, #1
    205c:	4b01      	ldr	r3, [pc, #4]	; (2064 <usart_read_job+0xc>)
    205e:	4798      	blx	r3
}
    2060:	bd10      	pop	{r4, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	00001fed 	.word	0x00001fed

00002068 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2068:	b5f0      	push	{r4, r5, r6, r7, lr}
    206a:	46c6      	mov	lr, r8
    206c:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    206e:	0080      	lsls	r0, r0, #2
    2070:	4b64      	ldr	r3, [pc, #400]	; (2204 <_usart_interrupt_handler+0x19c>)
    2072:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2074:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2076:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2078:	2b00      	cmp	r3, #0
    207a:	d1fc      	bne.n	2076 <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    207c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    207e:	7da6      	ldrb	r6, [r4, #22]
    2080:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2082:	2330      	movs	r3, #48	; 0x30
    2084:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    2086:	2231      	movs	r2, #49	; 0x31
    2088:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    208a:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    208c:	07f3      	lsls	r3, r6, #31
    208e:	d525      	bpl.n	20dc <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    2090:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2092:	b29b      	uxth	r3, r3
    2094:	2b00      	cmp	r3, #0
    2096:	d01f      	beq.n	20d8 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2098:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    209a:	780a      	ldrb	r2, [r1, #0]
    209c:	b2d2      	uxtb	r2, r2
    209e:	b293      	uxth	r3, r2
    20a0:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    20a2:	1c48      	adds	r0, r1, #1
    20a4:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    20a6:	796b      	ldrb	r3, [r5, #5]
    20a8:	2b01      	cmp	r3, #1
    20aa:	d00e      	beq.n	20ca <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    20ac:	4643      	mov	r3, r8
    20ae:	05db      	lsls	r3, r3, #23
    20b0:	0ddb      	lsrs	r3, r3, #23
    20b2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    20b4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    20b6:	3b01      	subs	r3, #1
    20b8:	b29b      	uxth	r3, r3
    20ba:	85eb      	strh	r3, [r5, #46]	; 0x2e
    20bc:	2b00      	cmp	r3, #0
    20be:	d10d      	bne.n	20dc <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    20c0:	3301      	adds	r3, #1
    20c2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    20c4:	3301      	adds	r3, #1
    20c6:	75a3      	strb	r3, [r4, #22]
    20c8:	e008      	b.n	20dc <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    20ca:	784b      	ldrb	r3, [r1, #1]
    20cc:	021b      	lsls	r3, r3, #8
    20ce:	4313      	orrs	r3, r2
    20d0:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    20d2:	1c88      	adds	r0, r1, #2
    20d4:	62a8      	str	r0, [r5, #40]	; 0x28
    20d6:	e7e9      	b.n	20ac <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    20d8:	2301      	movs	r3, #1
    20da:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    20dc:	07b3      	lsls	r3, r6, #30
    20de:	d506      	bpl.n	20ee <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    20e0:	2302      	movs	r3, #2
    20e2:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    20e4:	2200      	movs	r2, #0
    20e6:	3331      	adds	r3, #49	; 0x31
    20e8:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    20ea:	07fb      	lsls	r3, r7, #31
    20ec:	d41c      	bmi.n	2128 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    20ee:	0773      	lsls	r3, r6, #29
    20f0:	d564      	bpl.n	21bc <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    20f2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    20f4:	b29b      	uxth	r3, r3
    20f6:	2b00      	cmp	r3, #0
    20f8:	d05e      	beq.n	21b8 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    20fa:	8b62      	ldrh	r2, [r4, #26]
    20fc:	b2d2      	uxtb	r2, r2
    20fe:	233f      	movs	r3, #63	; 0x3f
    2100:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2102:	0711      	lsls	r1, r2, #28
    2104:	d501      	bpl.n	210a <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2106:	2337      	movs	r3, #55	; 0x37
    2108:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    210a:	2b00      	cmp	r3, #0
    210c:	d031      	beq.n	2172 <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    210e:	079a      	lsls	r2, r3, #30
    2110:	d50e      	bpl.n	2130 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2112:	221a      	movs	r2, #26
    2114:	2332      	movs	r3, #50	; 0x32
    2116:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2118:	3b30      	subs	r3, #48	; 0x30
    211a:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    211c:	077b      	lsls	r3, r7, #29
    211e:	d54d      	bpl.n	21bc <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2120:	0028      	movs	r0, r5
    2122:	696b      	ldr	r3, [r5, #20]
    2124:	4798      	blx	r3
    2126:	e049      	b.n	21bc <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2128:	0028      	movs	r0, r5
    212a:	68eb      	ldr	r3, [r5, #12]
    212c:	4798      	blx	r3
    212e:	e7de      	b.n	20ee <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2130:	075a      	lsls	r2, r3, #29
    2132:	d505      	bpl.n	2140 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2134:	221e      	movs	r2, #30
    2136:	2332      	movs	r3, #50	; 0x32
    2138:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    213a:	3b2e      	subs	r3, #46	; 0x2e
    213c:	8363      	strh	r3, [r4, #26]
    213e:	e7ed      	b.n	211c <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2140:	07da      	lsls	r2, r3, #31
    2142:	d505      	bpl.n	2150 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2144:	2213      	movs	r2, #19
    2146:	2332      	movs	r3, #50	; 0x32
    2148:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    214a:	3b31      	subs	r3, #49	; 0x31
    214c:	8363      	strh	r3, [r4, #26]
    214e:	e7e5      	b.n	211c <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2150:	06da      	lsls	r2, r3, #27
    2152:	d505      	bpl.n	2160 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2154:	2242      	movs	r2, #66	; 0x42
    2156:	2332      	movs	r3, #50	; 0x32
    2158:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    215a:	3b22      	subs	r3, #34	; 0x22
    215c:	8363      	strh	r3, [r4, #26]
    215e:	e7dd      	b.n	211c <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2160:	2220      	movs	r2, #32
    2162:	421a      	tst	r2, r3
    2164:	d0da      	beq.n	211c <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2166:	3221      	adds	r2, #33	; 0x21
    2168:	2332      	movs	r3, #50	; 0x32
    216a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    216c:	3b12      	subs	r3, #18
    216e:	8363      	strh	r3, [r4, #26]
    2170:	e7d4      	b.n	211c <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2172:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2174:	05db      	lsls	r3, r3, #23
    2176:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2178:	b2da      	uxtb	r2, r3
    217a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    217c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    217e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2180:	1c51      	adds	r1, r2, #1
    2182:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2184:	7969      	ldrb	r1, [r5, #5]
    2186:	2901      	cmp	r1, #1
    2188:	d010      	beq.n	21ac <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    218a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    218c:	3b01      	subs	r3, #1
    218e:	b29b      	uxth	r3, r3
    2190:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2192:	2b00      	cmp	r3, #0
    2194:	d112      	bne.n	21bc <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2196:	3304      	adds	r3, #4
    2198:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    219a:	2200      	movs	r2, #0
    219c:	332e      	adds	r3, #46	; 0x2e
    219e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    21a0:	07bb      	lsls	r3, r7, #30
    21a2:	d50b      	bpl.n	21bc <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    21a4:	0028      	movs	r0, r5
    21a6:	692b      	ldr	r3, [r5, #16]
    21a8:	4798      	blx	r3
    21aa:	e007      	b.n	21bc <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    21ac:	0a1b      	lsrs	r3, r3, #8
    21ae:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    21b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    21b2:	3301      	adds	r3, #1
    21b4:	626b      	str	r3, [r5, #36]	; 0x24
    21b6:	e7e8      	b.n	218a <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    21b8:	2304      	movs	r3, #4
    21ba:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    21bc:	06f3      	lsls	r3, r6, #27
    21be:	d504      	bpl.n	21ca <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    21c0:	2310      	movs	r3, #16
    21c2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    21c4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    21c6:	06fb      	lsls	r3, r7, #27
    21c8:	d410      	bmi.n	21ec <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    21ca:	06b3      	lsls	r3, r6, #26
    21cc:	d504      	bpl.n	21d8 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    21ce:	2320      	movs	r3, #32
    21d0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    21d2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    21d4:	073b      	lsls	r3, r7, #28
    21d6:	d40d      	bmi.n	21f4 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    21d8:	0733      	lsls	r3, r6, #28
    21da:	d504      	bpl.n	21e6 <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    21dc:	2308      	movs	r3, #8
    21de:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    21e0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    21e2:	06bb      	lsls	r3, r7, #26
    21e4:	d40a      	bmi.n	21fc <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    21e6:	bc04      	pop	{r2}
    21e8:	4690      	mov	r8, r2
    21ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    21ec:	0028      	movs	r0, r5
    21ee:	69eb      	ldr	r3, [r5, #28]
    21f0:	4798      	blx	r3
    21f2:	e7ea      	b.n	21ca <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    21f4:	0028      	movs	r0, r5
    21f6:	69ab      	ldr	r3, [r5, #24]
    21f8:	4798      	blx	r3
    21fa:	e7ed      	b.n	21d8 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    21fc:	6a2b      	ldr	r3, [r5, #32]
    21fe:	0028      	movs	r0, r5
    2200:	4798      	blx	r3
}
    2202:	e7f0      	b.n	21e6 <_usart_interrupt_handler+0x17e>
    2204:	20000984 	.word	0x20000984

00002208 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2208:	4770      	bx	lr
	...

0000220c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    220c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    220e:	4b0b      	ldr	r3, [pc, #44]	; (223c <_sercom_set_handler+0x30>)
    2210:	781b      	ldrb	r3, [r3, #0]
    2212:	2b00      	cmp	r3, #0
    2214:	d008      	beq.n	2228 <_sercom_set_handler+0x1c>
    2216:	e00c      	b.n	2232 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2218:	009a      	lsls	r2, r3, #2
    221a:	4d09      	ldr	r5, [pc, #36]	; (2240 <_sercom_set_handler+0x34>)
    221c:	4c09      	ldr	r4, [pc, #36]	; (2244 <_sercom_set_handler+0x38>)
    221e:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    2220:	2500      	movs	r5, #0
    2222:	4c09      	ldr	r4, [pc, #36]	; (2248 <_sercom_set_handler+0x3c>)
    2224:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2226:	3301      	adds	r3, #1
    2228:	2b05      	cmp	r3, #5
    222a:	d9f5      	bls.n	2218 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    222c:	2201      	movs	r2, #1
    222e:	4b03      	ldr	r3, [pc, #12]	; (223c <_sercom_set_handler+0x30>)
    2230:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2232:	0080      	lsls	r0, r0, #2
    2234:	4b03      	ldr	r3, [pc, #12]	; (2244 <_sercom_set_handler+0x38>)
    2236:	50c1      	str	r1, [r0, r3]
}
    2238:	bd30      	pop	{r4, r5, pc}
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	20000335 	.word	0x20000335
    2240:	00002209 	.word	0x00002209
    2244:	20000338 	.word	0x20000338
    2248:	20000984 	.word	0x20000984

0000224c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    224c:	b500      	push	{lr}
    224e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2250:	4b05      	ldr	r3, [pc, #20]	; (2268 <_sercom_get_interrupt_vector+0x1c>)
    2252:	681a      	ldr	r2, [r3, #0]
    2254:	9200      	str	r2, [sp, #0]
    2256:	889b      	ldrh	r3, [r3, #4]
    2258:	466a      	mov	r2, sp
    225a:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    225c:	4b03      	ldr	r3, [pc, #12]	; (226c <_sercom_get_interrupt_vector+0x20>)
    225e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2260:	466b      	mov	r3, sp
    2262:	5618      	ldrsb	r0, [r3, r0]
}
    2264:	b003      	add	sp, #12
    2266:	bd00      	pop	{pc}
    2268:	00002ec4 	.word	0x00002ec4
    226c:	00000975 	.word	0x00000975

00002270 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2270:	b510      	push	{r4, lr}
    2272:	4b02      	ldr	r3, [pc, #8]	; (227c <SERCOM0_Handler+0xc>)
    2274:	681b      	ldr	r3, [r3, #0]
    2276:	2000      	movs	r0, #0
    2278:	4798      	blx	r3
    227a:	bd10      	pop	{r4, pc}
    227c:	20000338 	.word	0x20000338

00002280 <SERCOM1_Handler>:
    2280:	b510      	push	{r4, lr}
    2282:	4b02      	ldr	r3, [pc, #8]	; (228c <SERCOM1_Handler+0xc>)
    2284:	685b      	ldr	r3, [r3, #4]
    2286:	2001      	movs	r0, #1
    2288:	4798      	blx	r3
    228a:	bd10      	pop	{r4, pc}
    228c:	20000338 	.word	0x20000338

00002290 <SERCOM2_Handler>:
    2290:	b510      	push	{r4, lr}
    2292:	4b02      	ldr	r3, [pc, #8]	; (229c <SERCOM2_Handler+0xc>)
    2294:	689b      	ldr	r3, [r3, #8]
    2296:	2002      	movs	r0, #2
    2298:	4798      	blx	r3
    229a:	bd10      	pop	{r4, pc}
    229c:	20000338 	.word	0x20000338

000022a0 <SERCOM3_Handler>:
    22a0:	b510      	push	{r4, lr}
    22a2:	4b02      	ldr	r3, [pc, #8]	; (22ac <SERCOM3_Handler+0xc>)
    22a4:	68db      	ldr	r3, [r3, #12]
    22a6:	2003      	movs	r0, #3
    22a8:	4798      	blx	r3
    22aa:	bd10      	pop	{r4, pc}
    22ac:	20000338 	.word	0x20000338

000022b0 <SERCOM4_Handler>:
    22b0:	b510      	push	{r4, lr}
    22b2:	4b02      	ldr	r3, [pc, #8]	; (22bc <SERCOM4_Handler+0xc>)
    22b4:	691b      	ldr	r3, [r3, #16]
    22b6:	2004      	movs	r0, #4
    22b8:	4798      	blx	r3
    22ba:	bd10      	pop	{r4, pc}
    22bc:	20000338 	.word	0x20000338

000022c0 <SERCOM5_Handler>:
    22c0:	b510      	push	{r4, lr}
    22c2:	4b02      	ldr	r3, [pc, #8]	; (22cc <SERCOM5_Handler+0xc>)
    22c4:	695b      	ldr	r3, [r3, #20]
    22c6:	2005      	movs	r0, #5
    22c8:	4798      	blx	r3
    22ca:	bd10      	pop	{r4, pc}
    22cc:	20000338 	.word	0x20000338

000022d0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    22d0:	b500      	push	{lr}
    22d2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    22d4:	ab01      	add	r3, sp, #4
    22d6:	2280      	movs	r2, #128	; 0x80
    22d8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    22da:	780a      	ldrb	r2, [r1, #0]
    22dc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    22de:	784a      	ldrb	r2, [r1, #1]
    22e0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    22e2:	788a      	ldrb	r2, [r1, #2]
    22e4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    22e6:	0019      	movs	r1, r3
    22e8:	4b01      	ldr	r3, [pc, #4]	; (22f0 <port_pin_set_config+0x20>)
    22ea:	4798      	blx	r3
}
    22ec:	b003      	add	sp, #12
    22ee:	bd00      	pop	{pc}
    22f0:	00002a01 	.word	0x00002a01

000022f4 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    22f4:	4770      	bx	lr
	...

000022f8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    22f8:	4b0c      	ldr	r3, [pc, #48]	; (232c <cpu_irq_enter_critical+0x34>)
    22fa:	681b      	ldr	r3, [r3, #0]
    22fc:	2b00      	cmp	r3, #0
    22fe:	d106      	bne.n	230e <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2300:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2304:	2b00      	cmp	r3, #0
    2306:	d007      	beq.n	2318 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2308:	2200      	movs	r2, #0
    230a:	4b09      	ldr	r3, [pc, #36]	; (2330 <cpu_irq_enter_critical+0x38>)
    230c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    230e:	4a07      	ldr	r2, [pc, #28]	; (232c <cpu_irq_enter_critical+0x34>)
    2310:	6813      	ldr	r3, [r2, #0]
    2312:	3301      	adds	r3, #1
    2314:	6013      	str	r3, [r2, #0]
}
    2316:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2318:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    231a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    231e:	2200      	movs	r2, #0
    2320:	4b04      	ldr	r3, [pc, #16]	; (2334 <cpu_irq_enter_critical+0x3c>)
    2322:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2324:	3201      	adds	r2, #1
    2326:	4b02      	ldr	r3, [pc, #8]	; (2330 <cpu_irq_enter_critical+0x38>)
    2328:	701a      	strb	r2, [r3, #0]
    232a:	e7f0      	b.n	230e <cpu_irq_enter_critical+0x16>
    232c:	20000350 	.word	0x20000350
    2330:	20000354 	.word	0x20000354
    2334:	20000009 	.word	0x20000009

00002338 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2338:	4b08      	ldr	r3, [pc, #32]	; (235c <cpu_irq_leave_critical+0x24>)
    233a:	681a      	ldr	r2, [r3, #0]
    233c:	3a01      	subs	r2, #1
    233e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2340:	681b      	ldr	r3, [r3, #0]
    2342:	2b00      	cmp	r3, #0
    2344:	d109      	bne.n	235a <cpu_irq_leave_critical+0x22>
    2346:	4b06      	ldr	r3, [pc, #24]	; (2360 <cpu_irq_leave_critical+0x28>)
    2348:	781b      	ldrb	r3, [r3, #0]
    234a:	2b00      	cmp	r3, #0
    234c:	d005      	beq.n	235a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    234e:	2201      	movs	r2, #1
    2350:	4b04      	ldr	r3, [pc, #16]	; (2364 <cpu_irq_leave_critical+0x2c>)
    2352:	701a      	strb	r2, [r3, #0]
    2354:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2358:	b662      	cpsie	i
	}
}
    235a:	4770      	bx	lr
    235c:	20000350 	.word	0x20000350
    2360:	20000354 	.word	0x20000354
    2364:	20000009 	.word	0x20000009

00002368 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    2368:	b510      	push	{r4, lr}
    236a:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    236c:	2201      	movs	r2, #1
    236e:	ab01      	add	r3, sp, #4
    2370:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2372:	2400      	movs	r4, #0
    2374:	e004      	b.n	2380 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2376:	b2e0      	uxtb	r0, r4
    2378:	a901      	add	r1, sp, #4
    237a:	4b03      	ldr	r3, [pc, #12]	; (2388 <_switch_peripheral_gclk+0x20>)
    237c:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    237e:	3401      	adds	r4, #1
    2380:	2c24      	cmp	r4, #36	; 0x24
    2382:	d9f8      	bls.n	2376 <_switch_peripheral_gclk+0xe>
	}
}
    2384:	b002      	add	sp, #8
    2386:	bd10      	pop	{r4, pc}
    2388:	000028c9 	.word	0x000028c9

0000238c <system_clock_source_get_hz>:
{
    238c:	b510      	push	{r4, lr}
	switch (clock_source) {
    238e:	2808      	cmp	r0, #8
    2390:	d834      	bhi.n	23fc <system_clock_source_get_hz+0x70>
    2392:	0080      	lsls	r0, r0, #2
    2394:	4b1c      	ldr	r3, [pc, #112]	; (2408 <system_clock_source_get_hz+0x7c>)
    2396:	581b      	ldr	r3, [r3, r0]
    2398:	469f      	mov	pc, r3
		return 32768UL;
    239a:	2080      	movs	r0, #128	; 0x80
    239c:	0200      	lsls	r0, r0, #8
}
    239e:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    23a0:	4b1a      	ldr	r3, [pc, #104]	; (240c <system_clock_source_get_hz+0x80>)
    23a2:	6918      	ldr	r0, [r3, #16]
    23a4:	e7fb      	b.n	239e <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    23a6:	4b1a      	ldr	r3, [pc, #104]	; (2410 <system_clock_source_get_hz+0x84>)
    23a8:	6a1b      	ldr	r3, [r3, #32]
    23aa:	059b      	lsls	r3, r3, #22
    23ac:	0f9b      	lsrs	r3, r3, #30
    23ae:	4819      	ldr	r0, [pc, #100]	; (2414 <system_clock_source_get_hz+0x88>)
    23b0:	40d8      	lsrs	r0, r3
    23b2:	e7f4      	b.n	239e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    23b4:	4b15      	ldr	r3, [pc, #84]	; (240c <system_clock_source_get_hz+0x80>)
    23b6:	6958      	ldr	r0, [r3, #20]
    23b8:	e7f1      	b.n	239e <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    23ba:	4b14      	ldr	r3, [pc, #80]	; (240c <system_clock_source_get_hz+0x80>)
    23bc:	681b      	ldr	r3, [r3, #0]
    23be:	079b      	lsls	r3, r3, #30
    23c0:	d51e      	bpl.n	2400 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23c2:	4b13      	ldr	r3, [pc, #76]	; (2410 <system_clock_source_get_hz+0x84>)
    23c4:	68db      	ldr	r3, [r3, #12]
    23c6:	06db      	lsls	r3, r3, #27
    23c8:	d5fb      	bpl.n	23c2 <system_clock_source_get_hz+0x36>
		switch(_system_clock_inst.dfll.control &
    23ca:	4b10      	ldr	r3, [pc, #64]	; (240c <system_clock_source_get_hz+0x80>)
    23cc:	681a      	ldr	r2, [r3, #0]
    23ce:	2324      	movs	r3, #36	; 0x24
    23d0:	4013      	ands	r3, r2
    23d2:	2b04      	cmp	r3, #4
    23d4:	d001      	beq.n	23da <system_clock_source_get_hz+0x4e>
			return 48000000UL;
    23d6:	4810      	ldr	r0, [pc, #64]	; (2418 <system_clock_source_get_hz+0x8c>)
    23d8:	e7e1      	b.n	239e <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    23da:	2000      	movs	r0, #0
    23dc:	4b0f      	ldr	r3, [pc, #60]	; (241c <system_clock_source_get_hz+0x90>)
    23de:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    23e0:	4b0a      	ldr	r3, [pc, #40]	; (240c <system_clock_source_get_hz+0x80>)
    23e2:	689b      	ldr	r3, [r3, #8]
    23e4:	041b      	lsls	r3, r3, #16
    23e6:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    23e8:	4358      	muls	r0, r3
    23ea:	e7d8      	b.n	239e <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    23ec:	2350      	movs	r3, #80	; 0x50
    23ee:	4a08      	ldr	r2, [pc, #32]	; (2410 <system_clock_source_get_hz+0x84>)
    23f0:	5cd3      	ldrb	r3, [r2, r3]
    23f2:	075b      	lsls	r3, r3, #29
    23f4:	d506      	bpl.n	2404 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    23f6:	4b05      	ldr	r3, [pc, #20]	; (240c <system_clock_source_get_hz+0x80>)
    23f8:	68d8      	ldr	r0, [r3, #12]
    23fa:	e7d0      	b.n	239e <system_clock_source_get_hz+0x12>
		return 0;
    23fc:	2000      	movs	r0, #0
    23fe:	e7ce      	b.n	239e <system_clock_source_get_hz+0x12>
			return 0;
    2400:	2000      	movs	r0, #0
    2402:	e7cc      	b.n	239e <system_clock_source_get_hz+0x12>
			return 0;
    2404:	2000      	movs	r0, #0
    2406:	e7ca      	b.n	239e <system_clock_source_get_hz+0x12>
    2408:	00002ecc 	.word	0x00002ecc
    240c:	20000358 	.word	0x20000358
    2410:	40000800 	.word	0x40000800
    2414:	007a1200 	.word	0x007a1200
    2418:	02dc6c00 	.word	0x02dc6c00
    241c:	000028e5 	.word	0x000028e5

00002420 <system_clock_source_osc8m_set_config>:
{
    2420:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2422:	4d0c      	ldr	r5, [pc, #48]	; (2454 <system_clock_source_osc8m_set_config+0x34>)
    2424:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    2426:	7802      	ldrb	r2, [r0, #0]
    2428:	2103      	movs	r1, #3
    242a:	400a      	ands	r2, r1
    242c:	0212      	lsls	r2, r2, #8
    242e:	490a      	ldr	r1, [pc, #40]	; (2458 <system_clock_source_osc8m_set_config+0x38>)
    2430:	4031      	ands	r1, r6
    2432:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    2434:	7882      	ldrb	r2, [r0, #2]
    2436:	2401      	movs	r4, #1
    2438:	4022      	ands	r2, r4
    243a:	01d2      	lsls	r2, r2, #7
    243c:	2380      	movs	r3, #128	; 0x80
    243e:	4399      	bics	r1, r3
    2440:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    2442:	7843      	ldrb	r3, [r0, #1]
    2444:	4023      	ands	r3, r4
    2446:	019b      	lsls	r3, r3, #6
    2448:	2140      	movs	r1, #64	; 0x40
    244a:	438a      	bics	r2, r1
    244c:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    244e:	622b      	str	r3, [r5, #32]
}
    2450:	bd70      	pop	{r4, r5, r6, pc}
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	40000800 	.word	0x40000800
    2458:	fffffcff 	.word	0xfffffcff

0000245c <system_clock_source_osc32k_set_config>:
{
    245c:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    245e:	4f15      	ldr	r7, [pc, #84]	; (24b4 <system_clock_source_osc32k_set_config+0x58>)
    2460:	69be      	ldr	r6, [r7, #24]
	temp.bit.EN1K     = config->enable_1khz_output;
    2462:	7842      	ldrb	r2, [r0, #1]
    2464:	2301      	movs	r3, #1
    2466:	401a      	ands	r2, r3
    2468:	00d2      	lsls	r2, r2, #3
    246a:	2108      	movs	r1, #8
    246c:	438e      	bics	r6, r1
    246e:	4332      	orrs	r2, r6
	temp.bit.EN32K    = config->enable_32khz_output;
    2470:	7885      	ldrb	r5, [r0, #2]
    2472:	401d      	ands	r5, r3
    2474:	00ad      	lsls	r5, r5, #2
    2476:	3904      	subs	r1, #4
    2478:	438a      	bics	r2, r1
    247a:	4315      	orrs	r5, r2
	temp.bit.STARTUP  = config->startup_time;
    247c:	7801      	ldrb	r1, [r0, #0]
    247e:	2407      	movs	r4, #7
    2480:	400c      	ands	r4, r1
    2482:	0224      	lsls	r4, r4, #8
    2484:	490c      	ldr	r1, [pc, #48]	; (24b8 <system_clock_source_osc32k_set_config+0x5c>)
    2486:	400d      	ands	r5, r1
    2488:	432c      	orrs	r4, r5
	temp.bit.ONDEMAND = config->on_demand;
    248a:	7901      	ldrb	r1, [r0, #4]
    248c:	4019      	ands	r1, r3
    248e:	01c9      	lsls	r1, r1, #7
    2490:	2280      	movs	r2, #128	; 0x80
    2492:	4394      	bics	r4, r2
    2494:	4321      	orrs	r1, r4
	temp.bit.RUNSTDBY = config->run_in_standby;
    2496:	78c2      	ldrb	r2, [r0, #3]
    2498:	401a      	ands	r2, r3
    249a:	0192      	lsls	r2, r2, #6
    249c:	2440      	movs	r4, #64	; 0x40
    249e:	43a1      	bics	r1, r4
    24a0:	430a      	orrs	r2, r1
	temp.bit.WRTLOCK  = config->write_once;
    24a2:	7941      	ldrb	r1, [r0, #5]
    24a4:	400b      	ands	r3, r1
    24a6:	031b      	lsls	r3, r3, #12
    24a8:	4904      	ldr	r1, [pc, #16]	; (24bc <system_clock_source_osc32k_set_config+0x60>)
    24aa:	400a      	ands	r2, r1
    24ac:	4313      	orrs	r3, r2
	SYSCTRL->OSC32K  = temp;
    24ae:	61bb      	str	r3, [r7, #24]
}
    24b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	40000800 	.word	0x40000800
    24b8:	fffff8ff 	.word	0xfffff8ff
    24bc:	ffffefff 	.word	0xffffefff

000024c0 <system_clock_source_enable>:
	switch (clock_source) {
    24c0:	2808      	cmp	r0, #8
    24c2:	d84a      	bhi.n	255a <system_clock_source_enable+0x9a>
    24c4:	0080      	lsls	r0, r0, #2
    24c6:	4b26      	ldr	r3, [pc, #152]	; (2560 <system_clock_source_enable+0xa0>)
    24c8:	581b      	ldr	r3, [r3, r0]
    24ca:	469f      	mov	pc, r3
		return STATUS_OK;
    24cc:	2000      	movs	r0, #0
}
    24ce:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    24d0:	4a24      	ldr	r2, [pc, #144]	; (2564 <system_clock_source_enable+0xa4>)
    24d2:	6a13      	ldr	r3, [r2, #32]
    24d4:	2102      	movs	r1, #2
    24d6:	430b      	orrs	r3, r1
    24d8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    24da:	2000      	movs	r0, #0
    24dc:	e7f7      	b.n	24ce <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    24de:	4a21      	ldr	r2, [pc, #132]	; (2564 <system_clock_source_enable+0xa4>)
    24e0:	6993      	ldr	r3, [r2, #24]
    24e2:	2102      	movs	r1, #2
    24e4:	430b      	orrs	r3, r1
    24e6:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    24e8:	2000      	movs	r0, #0
		break;
    24ea:	e7f0      	b.n	24ce <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    24ec:	4a1d      	ldr	r2, [pc, #116]	; (2564 <system_clock_source_enable+0xa4>)
    24ee:	8a13      	ldrh	r3, [r2, #16]
    24f0:	2102      	movs	r1, #2
    24f2:	430b      	orrs	r3, r1
    24f4:	b29b      	uxth	r3, r3
    24f6:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    24f8:	2000      	movs	r0, #0
		break;
    24fa:	e7e8      	b.n	24ce <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    24fc:	4a19      	ldr	r2, [pc, #100]	; (2564 <system_clock_source_enable+0xa4>)
    24fe:	8a93      	ldrh	r3, [r2, #20]
    2500:	2102      	movs	r1, #2
    2502:	430b      	orrs	r3, r1
    2504:	b29b      	uxth	r3, r3
    2506:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2508:	2000      	movs	r0, #0
		break;
    250a:	e7e0      	b.n	24ce <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    250c:	4916      	ldr	r1, [pc, #88]	; (2568 <system_clock_source_enable+0xa8>)
    250e:	680b      	ldr	r3, [r1, #0]
    2510:	2202      	movs	r2, #2
    2512:	4313      	orrs	r3, r2
    2514:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2516:	4b13      	ldr	r3, [pc, #76]	; (2564 <system_clock_source_enable+0xa4>)
    2518:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    251a:	4b12      	ldr	r3, [pc, #72]	; (2564 <system_clock_source_enable+0xa4>)
    251c:	68db      	ldr	r3, [r3, #12]
    251e:	06db      	lsls	r3, r3, #27
    2520:	d5fb      	bpl.n	251a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2522:	4a11      	ldr	r2, [pc, #68]	; (2568 <system_clock_source_enable+0xa8>)
    2524:	6891      	ldr	r1, [r2, #8]
    2526:	4b0f      	ldr	r3, [pc, #60]	; (2564 <system_clock_source_enable+0xa4>)
    2528:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    252a:	6852      	ldr	r2, [r2, #4]
    252c:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    252e:	2200      	movs	r2, #0
    2530:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2532:	4b0c      	ldr	r3, [pc, #48]	; (2564 <system_clock_source_enable+0xa4>)
    2534:	68db      	ldr	r3, [r3, #12]
    2536:	06db      	lsls	r3, r3, #27
    2538:	d5fb      	bpl.n	2532 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    253a:	4b0b      	ldr	r3, [pc, #44]	; (2568 <system_clock_source_enable+0xa8>)
    253c:	681b      	ldr	r3, [r3, #0]
    253e:	b29b      	uxth	r3, r3
    2540:	4a08      	ldr	r2, [pc, #32]	; (2564 <system_clock_source_enable+0xa4>)
    2542:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2544:	2000      	movs	r0, #0
    2546:	e7c2      	b.n	24ce <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2548:	4906      	ldr	r1, [pc, #24]	; (2564 <system_clock_source_enable+0xa4>)
    254a:	2244      	movs	r2, #68	; 0x44
    254c:	5c8b      	ldrb	r3, [r1, r2]
    254e:	2002      	movs	r0, #2
    2550:	4303      	orrs	r3, r0
    2552:	b2db      	uxtb	r3, r3
    2554:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2556:	2000      	movs	r0, #0
		break;
    2558:	e7b9      	b.n	24ce <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    255a:	2017      	movs	r0, #23
    255c:	e7b7      	b.n	24ce <system_clock_source_enable+0xe>
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	00002ef0 	.word	0x00002ef0
    2564:	40000800 	.word	0x40000800
    2568:	20000358 	.word	0x20000358

0000256c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    256c:	b5f0      	push	{r4, r5, r6, r7, lr}
    256e:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2570:	4c29      	ldr	r4, [pc, #164]	; (2618 <system_clock_init+0xac>)
    2572:	23c2      	movs	r3, #194	; 0xc2
    2574:	00db      	lsls	r3, r3, #3
    2576:	60a3      	str	r3, [r4, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2578:	4b28      	ldr	r3, [pc, #160]	; (261c <system_clock_init+0xb0>)
    257a:	6859      	ldr	r1, [r3, #4]
    257c:	221e      	movs	r2, #30
    257e:	4391      	bics	r1, r2
    2580:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    2582:	4b27      	ldr	r3, [pc, #156]	; (2620 <system_clock_init+0xb4>)
    2584:	4798      	blx	r3


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    2586:	4b27      	ldr	r3, [pc, #156]	; (2624 <system_clock_init+0xb8>)
    2588:	6819      	ldr	r1, [r3, #0]
    258a:	0989      	lsrs	r1, r1, #6
	SYSCTRL->OSC32K.bit.CALIB =
    258c:	69a2      	ldr	r2, [r4, #24]
    258e:	237f      	movs	r3, #127	; 0x7f
    2590:	400b      	ands	r3, r1
    2592:	041b      	lsls	r3, r3, #16
    2594:	4924      	ldr	r1, [pc, #144]	; (2628 <system_clock_init+0xbc>)
    2596:	400a      	ands	r2, r1
    2598:	4313      	orrs	r3, r2
    259a:	61a3      	str	r3, [r4, #24]
	config->enable_1khz_output  = true;
    259c:	a804      	add	r0, sp, #16
    259e:	2501      	movs	r5, #1
    25a0:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    25a2:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    25a4:	2400      	movs	r4, #0
    25a6:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    25a8:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    25aa:	2307      	movs	r3, #7
    25ac:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    25ae:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    25b0:	4b1e      	ldr	r3, [pc, #120]	; (262c <system_clock_init+0xc0>)
    25b2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    25b4:	2004      	movs	r0, #4
    25b6:	4e1e      	ldr	r6, [pc, #120]	; (2630 <system_clock_init+0xc4>)
    25b8:	47b0      	blx	r6
	config->run_in_standby  = false;
    25ba:	a803      	add	r0, sp, #12
    25bc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    25be:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    25c0:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    25c2:	4b1c      	ldr	r3, [pc, #112]	; (2634 <system_clock_init+0xc8>)
    25c4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    25c6:	2006      	movs	r0, #6
    25c8:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    25ca:	4b1b      	ldr	r3, [pc, #108]	; (2638 <system_clock_init+0xcc>)
    25cc:	4798      	blx	r3
	config->high_when_disabled = false;
    25ce:	466b      	mov	r3, sp
    25d0:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    25d2:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    25d4:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    25d6:	2304      	movs	r3, #4
    25d8:	466a      	mov	r2, sp
    25da:	7013      	strb	r3, [r2, #0]
    25dc:	331c      	adds	r3, #28
    25de:	9301      	str	r3, [sp, #4]
    25e0:	4669      	mov	r1, sp
    25e2:	2002      	movs	r0, #2
    25e4:	4f15      	ldr	r7, [pc, #84]	; (263c <system_clock_init+0xd0>)
    25e6:	47b8      	blx	r7
    25e8:	2002      	movs	r0, #2
    25ea:	4e15      	ldr	r6, [pc, #84]	; (2640 <system_clock_init+0xd4>)
    25ec:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    25ee:	4b15      	ldr	r3, [pc, #84]	; (2644 <system_clock_init+0xd8>)
    25f0:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    25f2:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    25f4:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    25f6:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    25f8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    25fa:	466b      	mov	r3, sp
    25fc:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    25fe:	2306      	movs	r3, #6
    2600:	466a      	mov	r2, sp
    2602:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    2604:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2606:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2608:	4669      	mov	r1, sp
    260a:	2000      	movs	r0, #0
    260c:	47b8      	blx	r7
    260e:	2000      	movs	r0, #0
    2610:	47b0      	blx	r6
#endif
}
    2612:	b007      	add	sp, #28
    2614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	40000800 	.word	0x40000800
    261c:	41004000 	.word	0x41004000
    2620:	00002369 	.word	0x00002369
    2624:	00806024 	.word	0x00806024
    2628:	ff80ffff 	.word	0xff80ffff
    262c:	0000245d 	.word	0x0000245d
    2630:	000024c1 	.word	0x000024c1
    2634:	00002421 	.word	0x00002421
    2638:	00002649 	.word	0x00002649
    263c:	0000266d 	.word	0x0000266d
    2640:	0000273d 	.word	0x0000273d
    2644:	40000400 	.word	0x40000400

00002648 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2648:	4a06      	ldr	r2, [pc, #24]	; (2664 <system_gclk_init+0x1c>)
    264a:	6993      	ldr	r3, [r2, #24]
    264c:	2108      	movs	r1, #8
    264e:	430b      	orrs	r3, r1
    2650:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2652:	2201      	movs	r2, #1
    2654:	4b04      	ldr	r3, [pc, #16]	; (2668 <system_gclk_init+0x20>)
    2656:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2658:	4b03      	ldr	r3, [pc, #12]	; (2668 <system_gclk_init+0x20>)
    265a:	781b      	ldrb	r3, [r3, #0]
    265c:	07db      	lsls	r3, r3, #31
    265e:	d4fb      	bmi.n	2658 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    2660:	4770      	bx	lr
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	40000400 	.word	0x40000400
    2668:	40000c00 	.word	0x40000c00

0000266c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    266e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2670:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2672:	780c      	ldrb	r4, [r1, #0]
    2674:	0224      	lsls	r4, r4, #8
    2676:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2678:	784b      	ldrb	r3, [r1, #1]
    267a:	2b00      	cmp	r3, #0
    267c:	d002      	beq.n	2684 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    267e:	2380      	movs	r3, #128	; 0x80
    2680:	02db      	lsls	r3, r3, #11
    2682:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2684:	7a4b      	ldrb	r3, [r1, #9]
    2686:	2b00      	cmp	r3, #0
    2688:	d002      	beq.n	2690 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    268a:	2380      	movs	r3, #128	; 0x80
    268c:	031b      	lsls	r3, r3, #12
    268e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2690:	6848      	ldr	r0, [r1, #4]
    2692:	2801      	cmp	r0, #1
    2694:	d912      	bls.n	26bc <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2696:	1e43      	subs	r3, r0, #1
    2698:	4203      	tst	r3, r0
    269a:	d03d      	beq.n	2718 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    269c:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    269e:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    26a0:	2380      	movs	r3, #128	; 0x80
    26a2:	029b      	lsls	r3, r3, #10
    26a4:	431c      	orrs	r4, r3
    26a6:	e009      	b.n	26bc <system_gclk_gen_set_config+0x50>
				div2_count++;
    26a8:	3201      	adds	r2, #1
						mask <<= 1) {
    26aa:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    26ac:	4283      	cmp	r3, r0
    26ae:	d3fb      	bcc.n	26a8 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    26b0:	0212      	lsls	r2, r2, #8
    26b2:	4332      	orrs	r2, r6
    26b4:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    26b6:	2380      	movs	r3, #128	; 0x80
    26b8:	035b      	lsls	r3, r3, #13
    26ba:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    26bc:	7a0b      	ldrb	r3, [r1, #8]
    26be:	2b00      	cmp	r3, #0
    26c0:	d002      	beq.n	26c8 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    26c2:	2380      	movs	r3, #128	; 0x80
    26c4:	039b      	lsls	r3, r3, #14
    26c6:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26c8:	4b18      	ldr	r3, [pc, #96]	; (272c <system_gclk_gen_set_config+0xc0>)
    26ca:	785b      	ldrb	r3, [r3, #1]
    26cc:	b25b      	sxtb	r3, r3
    26ce:	2b00      	cmp	r3, #0
    26d0:	db25      	blt.n	271e <system_gclk_gen_set_config+0xb2>
	return false;
    26d2:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    26d4:	2f00      	cmp	r7, #0
    26d6:	d1f7      	bne.n	26c8 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    26d8:	4b15      	ldr	r3, [pc, #84]	; (2730 <system_gclk_gen_set_config+0xc4>)
    26da:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    26dc:	4b15      	ldr	r3, [pc, #84]	; (2734 <system_gclk_gen_set_config+0xc8>)
    26de:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26e0:	4b12      	ldr	r3, [pc, #72]	; (272c <system_gclk_gen_set_config+0xc0>)
    26e2:	785b      	ldrb	r3, [r3, #1]
    26e4:	b25b      	sxtb	r3, r3
    26e6:	2b00      	cmp	r3, #0
    26e8:	db1b      	blt.n	2722 <system_gclk_gen_set_config+0xb6>
	return false;
    26ea:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    26ec:	2a00      	cmp	r2, #0
    26ee:	d1f7      	bne.n	26e0 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    26f0:	4b0e      	ldr	r3, [pc, #56]	; (272c <system_gclk_gen_set_config+0xc0>)
    26f2:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26f4:	4b0d      	ldr	r3, [pc, #52]	; (272c <system_gclk_gen_set_config+0xc0>)
    26f6:	785b      	ldrb	r3, [r3, #1]
    26f8:	b25b      	sxtb	r3, r3
    26fa:	2b00      	cmp	r3, #0
    26fc:	db13      	blt.n	2726 <system_gclk_gen_set_config+0xba>
	return false;
    26fe:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    2700:	2b00      	cmp	r3, #0
    2702:	d1f7      	bne.n	26f4 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2704:	4a09      	ldr	r2, [pc, #36]	; (272c <system_gclk_gen_set_config+0xc0>)
    2706:	6853      	ldr	r3, [r2, #4]
    2708:	2180      	movs	r1, #128	; 0x80
    270a:	0249      	lsls	r1, r1, #9
    270c:	400b      	ands	r3, r1
    270e:	431c      	orrs	r4, r3
    2710:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    2712:	4b09      	ldr	r3, [pc, #36]	; (2738 <system_gclk_gen_set_config+0xcc>)
    2714:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2718:	2302      	movs	r3, #2
    271a:	2200      	movs	r2, #0
    271c:	e7c6      	b.n	26ac <system_gclk_gen_set_config+0x40>
		return true;
    271e:	2701      	movs	r7, #1
    2720:	e7d8      	b.n	26d4 <system_gclk_gen_set_config+0x68>
    2722:	2201      	movs	r2, #1
    2724:	e7e2      	b.n	26ec <system_gclk_gen_set_config+0x80>
    2726:	2301      	movs	r3, #1
    2728:	e7ea      	b.n	2700 <system_gclk_gen_set_config+0x94>
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	40000c00 	.word	0x40000c00
    2730:	000022f9 	.word	0x000022f9
    2734:	40000c08 	.word	0x40000c08
    2738:	00002339 	.word	0x00002339

0000273c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2740:	4b10      	ldr	r3, [pc, #64]	; (2784 <system_gclk_gen_enable+0x48>)
    2742:	785b      	ldrb	r3, [r3, #1]
    2744:	b25b      	sxtb	r3, r3
    2746:	2b00      	cmp	r3, #0
    2748:	db17      	blt.n	277a <system_gclk_gen_enable+0x3e>
	return false;
    274a:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    274c:	2c00      	cmp	r4, #0
    274e:	d1f7      	bne.n	2740 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    2750:	4b0d      	ldr	r3, [pc, #52]	; (2788 <system_gclk_gen_enable+0x4c>)
    2752:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2754:	4b0d      	ldr	r3, [pc, #52]	; (278c <system_gclk_gen_enable+0x50>)
    2756:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2758:	4b0a      	ldr	r3, [pc, #40]	; (2784 <system_gclk_gen_enable+0x48>)
    275a:	785b      	ldrb	r3, [r3, #1]
    275c:	b25b      	sxtb	r3, r3
    275e:	2b00      	cmp	r3, #0
    2760:	db0d      	blt.n	277e <system_gclk_gen_enable+0x42>
	return false;
    2762:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    2764:	2b00      	cmp	r3, #0
    2766:	d1f7      	bne.n	2758 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2768:	4a06      	ldr	r2, [pc, #24]	; (2784 <system_gclk_gen_enable+0x48>)
    276a:	6851      	ldr	r1, [r2, #4]
    276c:	2380      	movs	r3, #128	; 0x80
    276e:	025b      	lsls	r3, r3, #9
    2770:	430b      	orrs	r3, r1
    2772:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2774:	4b06      	ldr	r3, [pc, #24]	; (2790 <system_gclk_gen_enable+0x54>)
    2776:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2778:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    277a:	2401      	movs	r4, #1
    277c:	e7e6      	b.n	274c <system_gclk_gen_enable+0x10>
    277e:	2301      	movs	r3, #1
    2780:	e7f0      	b.n	2764 <system_gclk_gen_enable+0x28>
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	40000c00 	.word	0x40000c00
    2788:	000022f9 	.word	0x000022f9
    278c:	40000c04 	.word	0x40000c04
    2790:	00002339 	.word	0x00002339

00002794 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2796:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2798:	4b22      	ldr	r3, [pc, #136]	; (2824 <system_gclk_gen_get_hz+0x90>)
    279a:	785b      	ldrb	r3, [r3, #1]
    279c:	b25b      	sxtb	r3, r3
    279e:	2b00      	cmp	r3, #0
    27a0:	db34      	blt.n	280c <system_gclk_gen_get_hz+0x78>
	return false;
    27a2:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    27a4:	2d00      	cmp	r5, #0
    27a6:	d1f7      	bne.n	2798 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    27a8:	4b1f      	ldr	r3, [pc, #124]	; (2828 <system_gclk_gen_get_hz+0x94>)
    27aa:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    27ac:	4b1f      	ldr	r3, [pc, #124]	; (282c <system_gclk_gen_get_hz+0x98>)
    27ae:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27b0:	4b1c      	ldr	r3, [pc, #112]	; (2824 <system_gclk_gen_get_hz+0x90>)
    27b2:	785b      	ldrb	r3, [r3, #1]
    27b4:	b25b      	sxtb	r3, r3
    27b6:	2b00      	cmp	r3, #0
    27b8:	db2a      	blt.n	2810 <system_gclk_gen_get_hz+0x7c>
	return false;
    27ba:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    27bc:	2c00      	cmp	r4, #0
    27be:	d1f7      	bne.n	27b0 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    27c0:	4e18      	ldr	r6, [pc, #96]	; (2824 <system_gclk_gen_get_hz+0x90>)
    27c2:	6870      	ldr	r0, [r6, #4]
    27c4:	04c0      	lsls	r0, r0, #19
    27c6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    27c8:	4b19      	ldr	r3, [pc, #100]	; (2830 <system_gclk_gen_get_hz+0x9c>)
    27ca:	4798      	blx	r3
    27cc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    27ce:	4b17      	ldr	r3, [pc, #92]	; (282c <system_gclk_gen_get_hz+0x98>)
    27d0:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    27d2:	6876      	ldr	r6, [r6, #4]
    27d4:	02f6      	lsls	r6, r6, #11
    27d6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    27d8:	4b16      	ldr	r3, [pc, #88]	; (2834 <system_gclk_gen_get_hz+0xa0>)
    27da:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27dc:	4b11      	ldr	r3, [pc, #68]	; (2824 <system_gclk_gen_get_hz+0x90>)
    27de:	785b      	ldrb	r3, [r3, #1]
    27e0:	b25b      	sxtb	r3, r3
    27e2:	2b00      	cmp	r3, #0
    27e4:	db16      	blt.n	2814 <system_gclk_gen_get_hz+0x80>
	return false;
    27e6:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    27e8:	2b00      	cmp	r3, #0
    27ea:	d1f7      	bne.n	27dc <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    27ec:	4b0d      	ldr	r3, [pc, #52]	; (2824 <system_gclk_gen_get_hz+0x90>)
    27ee:	689c      	ldr	r4, [r3, #8]
    27f0:	0224      	lsls	r4, r4, #8
    27f2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    27f4:	4b10      	ldr	r3, [pc, #64]	; (2838 <system_gclk_gen_get_hz+0xa4>)
    27f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    27f8:	2e00      	cmp	r6, #0
    27fa:	d10d      	bne.n	2818 <system_gclk_gen_get_hz+0x84>
    27fc:	2c01      	cmp	r4, #1
    27fe:	d90b      	bls.n	2818 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    2800:	0021      	movs	r1, r4
    2802:	0028      	movs	r0, r5
    2804:	4b0d      	ldr	r3, [pc, #52]	; (283c <system_gclk_gen_get_hz+0xa8>)
    2806:	4798      	blx	r3
    2808:	0005      	movs	r5, r0
    280a:	e009      	b.n	2820 <system_gclk_gen_get_hz+0x8c>
		return true;
    280c:	2501      	movs	r5, #1
    280e:	e7c9      	b.n	27a4 <system_gclk_gen_get_hz+0x10>
    2810:	2401      	movs	r4, #1
    2812:	e7d3      	b.n	27bc <system_gclk_gen_get_hz+0x28>
    2814:	2301      	movs	r3, #1
    2816:	e7e7      	b.n	27e8 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    2818:	2e00      	cmp	r6, #0
    281a:	d001      	beq.n	2820 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    281c:	3401      	adds	r4, #1
    281e:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2820:	0028      	movs	r0, r5
    2822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2824:	40000c00 	.word	0x40000c00
    2828:	000022f9 	.word	0x000022f9
    282c:	40000c04 	.word	0x40000c04
    2830:	0000238d 	.word	0x0000238d
    2834:	40000c08 	.word	0x40000c08
    2838:	00002339 	.word	0x00002339
    283c:	00002cd5 	.word	0x00002cd5

00002840 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2840:	b510      	push	{r4, lr}
    2842:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2844:	4b06      	ldr	r3, [pc, #24]	; (2860 <system_gclk_chan_enable+0x20>)
    2846:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2848:	4b06      	ldr	r3, [pc, #24]	; (2864 <system_gclk_chan_enable+0x24>)
    284a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    284c:	4a06      	ldr	r2, [pc, #24]	; (2868 <system_gclk_chan_enable+0x28>)
    284e:	8853      	ldrh	r3, [r2, #2]
    2850:	2180      	movs	r1, #128	; 0x80
    2852:	01c9      	lsls	r1, r1, #7
    2854:	430b      	orrs	r3, r1
    2856:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2858:	4b04      	ldr	r3, [pc, #16]	; (286c <system_gclk_chan_enable+0x2c>)
    285a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    285c:	bd10      	pop	{r4, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	000022f9 	.word	0x000022f9
    2864:	40000c02 	.word	0x40000c02
    2868:	40000c00 	.word	0x40000c00
    286c:	00002339 	.word	0x00002339

00002870 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2870:	b510      	push	{r4, lr}
    2872:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2874:	4b0e      	ldr	r3, [pc, #56]	; (28b0 <system_gclk_chan_disable+0x40>)
    2876:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2878:	4b0e      	ldr	r3, [pc, #56]	; (28b4 <system_gclk_chan_disable+0x44>)
    287a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    287c:	490e      	ldr	r1, [pc, #56]	; (28b8 <system_gclk_chan_disable+0x48>)
    287e:	884b      	ldrh	r3, [r1, #2]
    2880:	051b      	lsls	r3, r3, #20
    2882:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2884:	884b      	ldrh	r3, [r1, #2]
    2886:	480d      	ldr	r0, [pc, #52]	; (28bc <system_gclk_chan_disable+0x4c>)
    2888:	4003      	ands	r3, r0
    288a:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    288c:	884b      	ldrh	r3, [r1, #2]
    288e:	480c      	ldr	r0, [pc, #48]	; (28c0 <system_gclk_chan_disable+0x50>)
    2890:	4003      	ands	r3, r0
    2892:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2894:	4b08      	ldr	r3, [pc, #32]	; (28b8 <system_gclk_chan_disable+0x48>)
    2896:	885b      	ldrh	r3, [r3, #2]
    2898:	045b      	lsls	r3, r3, #17
    289a:	d4fb      	bmi.n	2894 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    289c:	4806      	ldr	r0, [pc, #24]	; (28b8 <system_gclk_chan_disable+0x48>)
    289e:	8841      	ldrh	r1, [r0, #2]
    28a0:	0213      	lsls	r3, r2, #8
    28a2:	4a06      	ldr	r2, [pc, #24]	; (28bc <system_gclk_chan_disable+0x4c>)
    28a4:	400a      	ands	r2, r1
    28a6:	4313      	orrs	r3, r2
    28a8:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    28aa:	4b06      	ldr	r3, [pc, #24]	; (28c4 <system_gclk_chan_disable+0x54>)
    28ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    28ae:	bd10      	pop	{r4, pc}
    28b0:	000022f9 	.word	0x000022f9
    28b4:	40000c02 	.word	0x40000c02
    28b8:	40000c00 	.word	0x40000c00
    28bc:	fffff0ff 	.word	0xfffff0ff
    28c0:	ffffbfff 	.word	0xffffbfff
    28c4:	00002339 	.word	0x00002339

000028c8 <system_gclk_chan_set_config>:
{
    28c8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    28ca:	780c      	ldrb	r4, [r1, #0]
    28cc:	0224      	lsls	r4, r4, #8
    28ce:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    28d0:	4b02      	ldr	r3, [pc, #8]	; (28dc <system_gclk_chan_set_config+0x14>)
    28d2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    28d4:	b2a4      	uxth	r4, r4
    28d6:	4b02      	ldr	r3, [pc, #8]	; (28e0 <system_gclk_chan_set_config+0x18>)
    28d8:	805c      	strh	r4, [r3, #2]
}
    28da:	bd10      	pop	{r4, pc}
    28dc:	00002871 	.word	0x00002871
    28e0:	40000c00 	.word	0x40000c00

000028e4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    28e4:	b510      	push	{r4, lr}
    28e6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    28e8:	4b06      	ldr	r3, [pc, #24]	; (2904 <system_gclk_chan_get_hz+0x20>)
    28ea:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    28ec:	4b06      	ldr	r3, [pc, #24]	; (2908 <system_gclk_chan_get_hz+0x24>)
    28ee:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    28f0:	4b06      	ldr	r3, [pc, #24]	; (290c <system_gclk_chan_get_hz+0x28>)
    28f2:	885c      	ldrh	r4, [r3, #2]
    28f4:	0524      	lsls	r4, r4, #20
    28f6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    28f8:	4b05      	ldr	r3, [pc, #20]	; (2910 <system_gclk_chan_get_hz+0x2c>)
    28fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    28fc:	0020      	movs	r0, r4
    28fe:	4b05      	ldr	r3, [pc, #20]	; (2914 <system_gclk_chan_get_hz+0x30>)
    2900:	4798      	blx	r3
}
    2902:	bd10      	pop	{r4, pc}
    2904:	000022f9 	.word	0x000022f9
    2908:	40000c02 	.word	0x40000c02
    290c:	40000c00 	.word	0x40000c00
    2910:	00002339 	.word	0x00002339
    2914:	00002795 	.word	0x00002795

00002918 <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    2918:	b530      	push	{r4, r5, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    291a:	2800      	cmp	r0, #0
    291c:	db19      	blt.n	2952 <system_interrupt_set_priority+0x3a>
		uint8_t register_num = vector / 4;
    291e:	17c3      	asrs	r3, r0, #31
    2920:	2403      	movs	r4, #3
    2922:	0022      	movs	r2, r4
    2924:	401a      	ands	r2, r3
    2926:	1812      	adds	r2, r2, r0
    2928:	1092      	asrs	r2, r2, #2
    292a:	b2d2      	uxtb	r2, r2
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    292c:	0f9b      	lsrs	r3, r3, #30
    292e:	18c0      	adds	r0, r0, r3
    2930:	4020      	ands	r0, r4
    2932:	1ac3      	subs	r3, r0, r3
    2934:	00db      	lsls	r3, r3, #3
    2936:	b2db      	uxtb	r3, r3
    2938:	3306      	adds	r3, #6
    293a:	b2db      	uxtb	r3, r3

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    293c:	4d09      	ldr	r5, [pc, #36]	; (2964 <system_interrupt_set_priority+0x4c>)
    293e:	32c0      	adds	r2, #192	; 0xc0
    2940:	0092      	lsls	r2, r2, #2
    2942:	5950      	ldr	r0, [r2, r5]
    2944:	409c      	lsls	r4, r3
    2946:	43a0      	bics	r0, r4
				(priority_level << priority_pos);
    2948:	4099      	lsls	r1, r3
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    294a:	4301      	orrs	r1, r0
		NVIC->IP[register_num] =
    294c:	5151      	str	r1, [r2, r5]
	enum status_code status = STATUS_OK;
    294e:	2000      	movs	r0, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    2950:	bd30      	pop	{r4, r5, pc}
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    2952:	1c43      	adds	r3, r0, #1
    2954:	d001      	beq.n	295a <system_interrupt_set_priority+0x42>
		status = STATUS_ERR_INVALID_ARG;
    2956:	2017      	movs	r0, #23
    2958:	e7fa      	b.n	2950 <system_interrupt_set_priority+0x38>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    295a:	0789      	lsls	r1, r1, #30
    295c:	4b02      	ldr	r3, [pc, #8]	; (2968 <system_interrupt_set_priority+0x50>)
    295e:	6219      	str	r1, [r3, #32]
	enum status_code status = STATUS_OK;
    2960:	2000      	movs	r0, #0
    2962:	e7f5      	b.n	2950 <system_interrupt_set_priority+0x38>
    2964:	e000e100 	.word	0xe000e100
    2968:	e000ed00 	.word	0xe000ed00

0000296c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    296c:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    296e:	78d3      	ldrb	r3, [r2, #3]
    2970:	2b00      	cmp	r3, #0
    2972:	d120      	bne.n	29b6 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2974:	7815      	ldrb	r5, [r2, #0]
    2976:	2d80      	cmp	r5, #128	; 0x80
    2978:	d01b      	beq.n	29b2 <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    297a:	062d      	lsls	r5, r5, #24
    297c:	2380      	movs	r3, #128	; 0x80
    297e:	025b      	lsls	r3, r3, #9
    2980:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2982:	7853      	ldrb	r3, [r2, #1]
    2984:	2b00      	cmp	r3, #0
    2986:	d001      	beq.n	298c <_system_pinmux_config+0x20>
    2988:	2b02      	cmp	r3, #2
    298a:	d10a      	bne.n	29a2 <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    298c:	2380      	movs	r3, #128	; 0x80
    298e:	029b      	lsls	r3, r3, #10
    2990:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2992:	7894      	ldrb	r4, [r2, #2]
    2994:	2c00      	cmp	r4, #0
    2996:	d002      	beq.n	299e <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2998:	23c0      	movs	r3, #192	; 0xc0
    299a:	02db      	lsls	r3, r3, #11
    299c:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    299e:	6041      	str	r1, [r0, #4]
    29a0:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29a2:	7853      	ldrb	r3, [r2, #1]
    29a4:	3b01      	subs	r3, #1
    29a6:	b2db      	uxtb	r3, r3
    29a8:	2b01      	cmp	r3, #1
    29aa:	d806      	bhi.n	29ba <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    29ac:	4b13      	ldr	r3, [pc, #76]	; (29fc <_system_pinmux_config+0x90>)
    29ae:	401d      	ands	r5, r3
    29b0:	e003      	b.n	29ba <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    29b2:	2500      	movs	r5, #0
    29b4:	e7e5      	b.n	2982 <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    29b6:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    29b8:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    29ba:	040c      	lsls	r4, r1, #16
    29bc:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    29be:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29c0:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    29c2:	26a0      	movs	r6, #160	; 0xa0
    29c4:	05f6      	lsls	r6, r6, #23
    29c6:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29c8:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29ca:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    29cc:	24d0      	movs	r4, #208	; 0xd0
    29ce:	0624      	lsls	r4, r4, #24
    29d0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29d2:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    29d4:	78d3      	ldrb	r3, [r2, #3]
    29d6:	2b00      	cmp	r3, #0
    29d8:	d10a      	bne.n	29f0 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    29da:	036b      	lsls	r3, r5, #13
    29dc:	d503      	bpl.n	29e6 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    29de:	7893      	ldrb	r3, [r2, #2]
    29e0:	2b01      	cmp	r3, #1
    29e2:	d006      	beq.n	29f2 <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    29e4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29e6:	7853      	ldrb	r3, [r2, #1]
    29e8:	3b01      	subs	r3, #1
    29ea:	b2db      	uxtb	r3, r3
    29ec:	2b01      	cmp	r3, #1
    29ee:	d902      	bls.n	29f6 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    29f0:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    29f2:	6181      	str	r1, [r0, #24]
    29f4:	e7f7      	b.n	29e6 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    29f6:	6081      	str	r1, [r0, #8]
}
    29f8:	e7fa      	b.n	29f0 <_system_pinmux_config+0x84>
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	fffbffff 	.word	0xfffbffff

00002a00 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2a00:	b510      	push	{r4, lr}
    2a02:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    2a04:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    2a06:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    2a08:	2900      	cmp	r1, #0
    2a0a:	d10b      	bne.n	2a24 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    2a0c:	01db      	lsls	r3, r3, #7
    2a0e:	4906      	ldr	r1, [pc, #24]	; (2a28 <system_pinmux_pin_set_config+0x28>)
    2a10:	468c      	mov	ip, r1
    2a12:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2a14:	241f      	movs	r4, #31
    2a16:	4020      	ands	r0, r4
    2a18:	2101      	movs	r1, #1
    2a1a:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2a1c:	0018      	movs	r0, r3
    2a1e:	4b03      	ldr	r3, [pc, #12]	; (2a2c <system_pinmux_pin_set_config+0x2c>)
    2a20:	4798      	blx	r3
}
    2a22:	bd10      	pop	{r4, pc}
		return NULL;
    2a24:	2300      	movs	r3, #0
    2a26:	e7f5      	b.n	2a14 <system_pinmux_pin_set_config+0x14>
    2a28:	41004400 	.word	0x41004400
    2a2c:	0000296d 	.word	0x0000296d

00002a30 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2a30:	4770      	bx	lr
	...

00002a34 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2a34:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2a36:	4b05      	ldr	r3, [pc, #20]	; (2a4c <system_init+0x18>)
    2a38:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2a3a:	4b05      	ldr	r3, [pc, #20]	; (2a50 <system_init+0x1c>)
    2a3c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2a3e:	4b05      	ldr	r3, [pc, #20]	; (2a54 <system_init+0x20>)
    2a40:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2a42:	4b05      	ldr	r3, [pc, #20]	; (2a58 <system_init+0x24>)
    2a44:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2a46:	4b05      	ldr	r3, [pc, #20]	; (2a5c <system_init+0x28>)
    2a48:	4798      	blx	r3
}
    2a4a:	bd10      	pop	{r4, pc}
    2a4c:	0000256d 	.word	0x0000256d
    2a50:	000022f5 	.word	0x000022f5
    2a54:	00002a31 	.word	0x00002a31
    2a58:	0000032d 	.word	0x0000032d
    2a5c:	00002a31 	.word	0x00002a31

00002a60 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2a60:	e7fe      	b.n	2a60 <Dummy_Handler>
	...

00002a64 <Reset_Handler>:
{
    2a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2a66:	4a23      	ldr	r2, [pc, #140]	; (2af4 <Reset_Handler+0x90>)
    2a68:	4b23      	ldr	r3, [pc, #140]	; (2af8 <Reset_Handler+0x94>)
    2a6a:	429a      	cmp	r2, r3
    2a6c:	d009      	beq.n	2a82 <Reset_Handler+0x1e>
    2a6e:	4b22      	ldr	r3, [pc, #136]	; (2af8 <Reset_Handler+0x94>)
    2a70:	4a20      	ldr	r2, [pc, #128]	; (2af4 <Reset_Handler+0x90>)
    2a72:	e003      	b.n	2a7c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    2a74:	6811      	ldr	r1, [r2, #0]
    2a76:	6019      	str	r1, [r3, #0]
    2a78:	3304      	adds	r3, #4
    2a7a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2a7c:	491f      	ldr	r1, [pc, #124]	; (2afc <Reset_Handler+0x98>)
    2a7e:	428b      	cmp	r3, r1
    2a80:	d3f8      	bcc.n	2a74 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    2a82:	4b1f      	ldr	r3, [pc, #124]	; (2b00 <Reset_Handler+0x9c>)
    2a84:	e002      	b.n	2a8c <Reset_Handler+0x28>
                *pDest++ = 0;
    2a86:	2200      	movs	r2, #0
    2a88:	601a      	str	r2, [r3, #0]
    2a8a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    2a8c:	4a1d      	ldr	r2, [pc, #116]	; (2b04 <Reset_Handler+0xa0>)
    2a8e:	4293      	cmp	r3, r2
    2a90:	d3f9      	bcc.n	2a86 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2a92:	4a1d      	ldr	r2, [pc, #116]	; (2b08 <Reset_Handler+0xa4>)
    2a94:	21ff      	movs	r1, #255	; 0xff
    2a96:	4b1d      	ldr	r3, [pc, #116]	; (2b0c <Reset_Handler+0xa8>)
    2a98:	438b      	bics	r3, r1
    2a9a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2a9c:	39fd      	subs	r1, #253	; 0xfd
    2a9e:	2390      	movs	r3, #144	; 0x90
    2aa0:	005b      	lsls	r3, r3, #1
    2aa2:	4a1b      	ldr	r2, [pc, #108]	; (2b10 <Reset_Handler+0xac>)
    2aa4:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2aa6:	4a1b      	ldr	r2, [pc, #108]	; (2b14 <Reset_Handler+0xb0>)
    2aa8:	78d3      	ldrb	r3, [r2, #3]
    2aaa:	2503      	movs	r5, #3
    2aac:	43ab      	bics	r3, r5
    2aae:	2402      	movs	r4, #2
    2ab0:	4323      	orrs	r3, r4
    2ab2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2ab4:	78d3      	ldrb	r3, [r2, #3]
    2ab6:	270c      	movs	r7, #12
    2ab8:	43bb      	bics	r3, r7
    2aba:	2608      	movs	r6, #8
    2abc:	4333      	orrs	r3, r6
    2abe:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2ac0:	4b15      	ldr	r3, [pc, #84]	; (2b18 <Reset_Handler+0xb4>)
    2ac2:	7b98      	ldrb	r0, [r3, #14]
    2ac4:	2230      	movs	r2, #48	; 0x30
    2ac6:	4390      	bics	r0, r2
    2ac8:	2220      	movs	r2, #32
    2aca:	4310      	orrs	r0, r2
    2acc:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2ace:	7b99      	ldrb	r1, [r3, #14]
    2ad0:	43b9      	bics	r1, r7
    2ad2:	4331      	orrs	r1, r6
    2ad4:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2ad6:	7b9a      	ldrb	r2, [r3, #14]
    2ad8:	43aa      	bics	r2, r5
    2ada:	4322      	orrs	r2, r4
    2adc:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2ade:	4a0f      	ldr	r2, [pc, #60]	; (2b1c <Reset_Handler+0xb8>)
    2ae0:	6851      	ldr	r1, [r2, #4]
    2ae2:	2380      	movs	r3, #128	; 0x80
    2ae4:	430b      	orrs	r3, r1
    2ae6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2ae8:	4b0d      	ldr	r3, [pc, #52]	; (2b20 <Reset_Handler+0xbc>)
    2aea:	4798      	blx	r3
        main();
    2aec:	4b0d      	ldr	r3, [pc, #52]	; (2b24 <Reset_Handler+0xc0>)
    2aee:	4798      	blx	r3
    2af0:	e7fe      	b.n	2af0 <Reset_Handler+0x8c>
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	00002f34 	.word	0x00002f34
    2af8:	20000000 	.word	0x20000000
    2afc:	20000010 	.word	0x20000010
    2b00:	20000010 	.word	0x20000010
    2b04:	2000099c 	.word	0x2000099c
    2b08:	e000ed00 	.word	0xe000ed00
    2b0c:	00000000 	.word	0x00000000
    2b10:	41007000 	.word	0x41007000
    2b14:	41005000 	.word	0x41005000
    2b18:	41004800 	.word	0x41004800
    2b1c:	41004000 	.word	0x41004000
    2b20:	00002e41 	.word	0x00002e41
    2b24:	00002c35 	.word	0x00002c35

00002b28 <clock_osc8m_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes the 8 MHz oscillator to be used as the
	*  system clock source.
	*/
void clock_osc8m_init(void){
    2b28:	b500      	push	{lr}
    2b2a:	b083      	sub	sp, #12
	//create system clock config struct
	struct system_clock_source_osc8m_config osc8_config;

	//config the 8 MHz oscillator
	//divide by 1 = 8 MHz clock
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    2b2c:	a801      	add	r0, sp, #4
    2b2e:	2300      	movs	r3, #0
    2b30:	7003      	strb	r3, [r0, #0]
	//run on demand
	osc8_config.on_demand = true;
    2b32:	2201      	movs	r2, #1
    2b34:	7082      	strb	r2, [r0, #2]
	//don't run in standby
	osc8_config.run_in_standby = false;
    2b36:	7043      	strb	r3, [r0, #1]
	    
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    2b38:	4b01      	ldr	r3, [pc, #4]	; (2b40 <clock_osc8m_init+0x18>)
    2b3a:	4798      	blx	r3
}//end clock_osc8m_init
    2b3c:	b003      	add	sp, #12
    2b3e:	bd00      	pop	{pc}
    2b40:	00002421 	.word	0x00002421

00002b44 <clock_gclk0_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes GCLK0, so it can be used by 
	*  peripherals. Uses the 8 MHz oscillator as its source.
	*/
void clock_gclk0_init(void){
    2b44:	b500      	push	{lr}
    2b46:	b085      	sub	sp, #20
	//create GLCK0 config struct (for driving peripherals)
	struct system_gclk_gen_config gclk0_config;

	//init MCLK
	system_gclk_init();
    2b48:	4b0a      	ldr	r3, [pc, #40]	; (2b74 <clock_gclk0_init+0x30>)
    2b4a:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2b4c:	2300      	movs	r3, #0
    2b4e:	4a0a      	ldr	r2, [pc, #40]	; (2b78 <clock_gclk0_init+0x34>)
    2b50:	7213      	strb	r3, [r2, #8]
	    
	//set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	    
	//use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    2b52:	a901      	add	r1, sp, #4
    2b54:	2206      	movs	r2, #6
    2b56:	700a      	strb	r2, [r1, #0]
	//don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    2b58:	724b      	strb	r3, [r1, #9]
	//We're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    2b5a:	704b      	strb	r3, [r1, #1]
	//division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    2b5c:	3a05      	subs	r2, #5
    2b5e:	604a      	str	r2, [r1, #4]
	//don't run in standby
	gclk0_config.run_in_standby = false;
    2b60:	720b      	strb	r3, [r1, #8]
	//set GCLK0's config
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    2b62:	2000      	movs	r0, #0
    2b64:	4b05      	ldr	r3, [pc, #20]	; (2b7c <clock_gclk0_init+0x38>)
    2b66:	4798      	blx	r3
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    2b68:	2000      	movs	r0, #0
    2b6a:	4b05      	ldr	r3, [pc, #20]	; (2b80 <clock_gclk0_init+0x3c>)
    2b6c:	4798      	blx	r3
}//end clock_gclk0_init
    2b6e:	b005      	add	sp, #20
    2b70:	bd00      	pop	{pc}
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	00002649 	.word	0x00002649
    2b78:	40000400 	.word	0x40000400
    2b7c:	0000266d 	.word	0x0000266d
    2b80:	0000273d 	.word	0x0000273d

00002b84 <sys_clock_init>:
void sys_clock_init(void){
    2b84:	b510      	push	{r4, lr}
	clock_osc8m_init();
    2b86:	4b05      	ldr	r3, [pc, #20]	; (2b9c <sys_clock_init+0x18>)
    2b88:	4798      	blx	r3
	clock_gclk0_init();
    2b8a:	4b05      	ldr	r3, [pc, #20]	; (2ba0 <sys_clock_init+0x1c>)
    2b8c:	4798      	blx	r3
	clock_osc32k_init();
    2b8e:	4b05      	ldr	r3, [pc, #20]	; (2ba4 <sys_clock_init+0x20>)
    2b90:	4798      	blx	r3
	clock_gclk2_init();
    2b92:	4b05      	ldr	r3, [pc, #20]	; (2ba8 <sys_clock_init+0x24>)
    2b94:	4798      	blx	r3
	delay_init();
    2b96:	4b05      	ldr	r3, [pc, #20]	; (2bac <sys_clock_init+0x28>)
    2b98:	4798      	blx	r3
}//end sys_clock_init
    2b9a:	bd10      	pop	{r4, pc}
    2b9c:	00002b29 	.word	0x00002b29
    2ba0:	00002b45 	.word	0x00002b45
    2ba4:	00001639 	.word	0x00001639
    2ba8:	00001661 	.word	0x00001661
    2bac:	00000115 	.word	0x00000115

00002bb0 <configure_port_pins>:
/* Function Name    : configure_port_pins
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config select pins for lcd 
	*/
void configure_port_pins(void){
    2bb0:	b500      	push	{lr}
    2bb2:	b083      	sub	sp, #12
	config->powersave  = false;
    2bb4:	a901      	add	r1, sp, #4
    2bb6:	2300      	movs	r3, #0
    2bb8:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);


	// configure outputs
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2bba:	2201      	movs	r2, #1
    2bbc:	700a      	strb	r2, [r1, #0]
	config_port_pin.input_pull = LCD_PD_PULL;
    2bbe:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(LCD_PD, &config_port_pin);
    2bc0:	2008      	movs	r0, #8
    2bc2:	4b04      	ldr	r3, [pc, #16]	; (2bd4 <configure_port_pins+0x24>)
    2bc4:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2bc6:	2280      	movs	r2, #128	; 0x80
    2bc8:	0052      	lsls	r2, r2, #1
    2bca:	4b03      	ldr	r3, [pc, #12]	; (2bd8 <configure_port_pins+0x28>)
    2bcc:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB15, true);	
	
*/


}//end configure_port_pins
    2bce:	b003      	add	sp, #12
    2bd0:	bd00      	pop	{pc}
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	000022d1 	.word	0x000022d1
    2bd8:	41004400 	.word	0x41004400

00002bdc <sim_system_init>:
void sim_system_init(void){
    2bdc:	b510      	push	{r4, lr}
	system_init();
    2bde:	4b0b      	ldr	r3, [pc, #44]	; (2c0c <sim_system_init+0x30>)
    2be0:	4798      	blx	r3
	sys_clock_init();
    2be2:	4b0b      	ldr	r3, [pc, #44]	; (2c10 <sim_system_init+0x34>)
    2be4:	4798      	blx	r3
	configure_port_pins();
    2be6:	4b0b      	ldr	r3, [pc, #44]	; (2c14 <sim_system_init+0x38>)
    2be8:	4798      	blx	r3
	lcd_spi_init();
    2bea:	4b0b      	ldr	r3, [pc, #44]	; (2c18 <sim_system_init+0x3c>)
    2bec:	4798      	blx	r3
	configure_ext_ints();
    2bee:	4b0b      	ldr	r3, [pc, #44]	; (2c1c <sim_system_init+0x40>)
    2bf0:	4798      	blx	r3
	configure_ext_int_callback();
    2bf2:	4b0b      	ldr	r3, [pc, #44]	; (2c20 <sim_system_init+0x44>)
    2bf4:	4798      	blx	r3
	lcd_int_mask(LCD_DEFAULT_MASK);
    2bf6:	2104      	movs	r1, #4
    2bf8:	480a      	ldr	r0, [pc, #40]	; (2c24 <sim_system_init+0x48>)
    2bfa:	4c0b      	ldr	r4, [pc, #44]	; (2c28 <sim_system_init+0x4c>)
    2bfc:	47a0      	blx	r4
	lcd_int_enable();
    2bfe:	2101      	movs	r1, #1
    2c00:	480a      	ldr	r0, [pc, #40]	; (2c2c <sim_system_init+0x50>)
    2c02:	47a0      	blx	r4
    uartfiber_init();
    2c04:	4b0a      	ldr	r3, [pc, #40]	; (2c30 <sim_system_init+0x54>)
    2c06:	4798      	blx	r3
}//end sim_system_init
    2c08:	bd10      	pop	{r4, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	00002a35 	.word	0x00002a35
    2c10:	00002b85 	.word	0x00002b85
    2c14:	00002bb1 	.word	0x00002bb1
    2c18:	00001699 	.word	0x00001699
    2c1c:	00001535 	.word	0x00001535
    2c20:	0000155d 	.word	0x0000155d
    2c24:	003020b0 	.word	0x003020b0
    2c28:	000018b1 	.word	0x000018b1
    2c2c:	003020ac 	.word	0x003020ac
    2c30:	000012e1 	.word	0x000012e1

00002c34 <main>:
int main(void){
    2c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sim_system_init();
    2c36:	4b18      	ldr	r3, [pc, #96]	; (2c98 <main+0x64>)
    2c38:	4798      	blx	r3
	cpu_irq_enable();
    2c3a:	4d18      	ldr	r5, [pc, #96]	; (2c9c <main+0x68>)
    2c3c:	2601      	movs	r6, #1
    2c3e:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2c40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2c44:	b662      	cpsie	i
	configure_rtc_calendar();
    2c46:	4b16      	ldr	r3, [pc, #88]	; (2ca0 <main+0x6c>)
    2c48:	4798      	blx	r3
	phost = &host;
    2c4a:	4c16      	ldr	r4, [pc, #88]	; (2ca4 <main+0x70>)
    2c4c:	4816      	ldr	r0, [pc, #88]	; (2ca8 <main+0x74>)
    2c4e:	6020      	str	r0, [r4, #0]
	Ft_Gpu_Hal_Open(phost);
    2c50:	4b16      	ldr	r3, [pc, #88]	; (2cac <main+0x78>)
    2c52:	4798      	blx	r3
	Ft_Gpu_Hal_Wr8(phost, REG_INT_EN, 1);
    2c54:	2201      	movs	r2, #1
    2c56:	4916      	ldr	r1, [pc, #88]	; (2cb0 <main+0x7c>)
    2c58:	6820      	ldr	r0, [r4, #0]
    2c5a:	4f16      	ldr	r7, [pc, #88]	; (2cb4 <main+0x80>)
    2c5c:	47b8      	blx	r7
	Ft_Gpu_Hal_Wr8(phost, REG_INT_MASK, 6);
    2c5e:	6820      	ldr	r0, [r4, #0]
    2c60:	2206      	movs	r2, #6
    2c62:	4915      	ldr	r1, [pc, #84]	; (2cb8 <main+0x84>)
    2c64:	47b8      	blx	r7
	delay_ms(2000);
    2c66:	20fa      	movs	r0, #250	; 0xfa
    2c68:	00c0      	lsls	r0, r0, #3
    2c6a:	4b14      	ldr	r3, [pc, #80]	; (2cbc <main+0x88>)
    2c6c:	4798      	blx	r3
	cpu_irq_enable();
    2c6e:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2c70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2c74:	b662      	cpsie	i
	mstimer_init();
    2c76:	4b12      	ldr	r3, [pc, #72]	; (2cc0 <main+0x8c>)
    2c78:	4798      	blx	r3
	rs485_baud_rate_set(38400);
    2c7a:	2096      	movs	r0, #150	; 0x96
    2c7c:	0200      	lsls	r0, r0, #8
    2c7e:	4b11      	ldr	r3, [pc, #68]	; (2cc4 <main+0x90>)
    2c80:	4798      	blx	r3
	rs485_init();
    2c82:	4b11      	ldr	r3, [pc, #68]	; (2cc8 <main+0x94>)
    2c84:	4798      	blx	r3
	mstimer_set(&Blink_Timer, 125);
    2c86:	217d      	movs	r1, #125	; 0x7d
    2c88:	4810      	ldr	r0, [pc, #64]	; (2ccc <main+0x98>)
    2c8a:	4b11      	ldr	r3, [pc, #68]	; (2cd0 <main+0x9c>)
    2c8c:	4798      	blx	r3
		delay_ms(1);
    2c8e:	2001      	movs	r0, #1
    2c90:	4b0a      	ldr	r3, [pc, #40]	; (2cbc <main+0x88>)
    2c92:	4798      	blx	r3
    2c94:	e7fb      	b.n	2c8e <main+0x5a>
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	00002bdd 	.word	0x00002bdd
    2c9c:	20000009 	.word	0x20000009
    2ca0:	00001575 	.word	0x00001575
    2ca4:	200006f8 	.word	0x200006f8
    2ca8:	200003e0 	.word	0x200003e0
    2cac:	0000146d 	.word	0x0000146d
    2cb0:	003020ac 	.word	0x003020ac
    2cb4:	00001509 	.word	0x00001509
    2cb8:	003020b0 	.word	0x003020b0
    2cbc:	00000151 	.word	0x00000151
    2cc0:	00001945 	.word	0x00001945
    2cc4:	00001bbd 	.word	0x00001bbd
    2cc8:	00001bd5 	.word	0x00001bd5
    2ccc:	20000370 	.word	0x20000370
    2cd0:	000012a5 	.word	0x000012a5

00002cd4 <__udivsi3>:
    2cd4:	2200      	movs	r2, #0
    2cd6:	0843      	lsrs	r3, r0, #1
    2cd8:	428b      	cmp	r3, r1
    2cda:	d374      	bcc.n	2dc6 <__udivsi3+0xf2>
    2cdc:	0903      	lsrs	r3, r0, #4
    2cde:	428b      	cmp	r3, r1
    2ce0:	d35f      	bcc.n	2da2 <__udivsi3+0xce>
    2ce2:	0a03      	lsrs	r3, r0, #8
    2ce4:	428b      	cmp	r3, r1
    2ce6:	d344      	bcc.n	2d72 <__udivsi3+0x9e>
    2ce8:	0b03      	lsrs	r3, r0, #12
    2cea:	428b      	cmp	r3, r1
    2cec:	d328      	bcc.n	2d40 <__udivsi3+0x6c>
    2cee:	0c03      	lsrs	r3, r0, #16
    2cf0:	428b      	cmp	r3, r1
    2cf2:	d30d      	bcc.n	2d10 <__udivsi3+0x3c>
    2cf4:	22ff      	movs	r2, #255	; 0xff
    2cf6:	0209      	lsls	r1, r1, #8
    2cf8:	ba12      	rev	r2, r2
    2cfa:	0c03      	lsrs	r3, r0, #16
    2cfc:	428b      	cmp	r3, r1
    2cfe:	d302      	bcc.n	2d06 <__udivsi3+0x32>
    2d00:	1212      	asrs	r2, r2, #8
    2d02:	0209      	lsls	r1, r1, #8
    2d04:	d065      	beq.n	2dd2 <__udivsi3+0xfe>
    2d06:	0b03      	lsrs	r3, r0, #12
    2d08:	428b      	cmp	r3, r1
    2d0a:	d319      	bcc.n	2d40 <__udivsi3+0x6c>
    2d0c:	e000      	b.n	2d10 <__udivsi3+0x3c>
    2d0e:	0a09      	lsrs	r1, r1, #8
    2d10:	0bc3      	lsrs	r3, r0, #15
    2d12:	428b      	cmp	r3, r1
    2d14:	d301      	bcc.n	2d1a <__udivsi3+0x46>
    2d16:	03cb      	lsls	r3, r1, #15
    2d18:	1ac0      	subs	r0, r0, r3
    2d1a:	4152      	adcs	r2, r2
    2d1c:	0b83      	lsrs	r3, r0, #14
    2d1e:	428b      	cmp	r3, r1
    2d20:	d301      	bcc.n	2d26 <__udivsi3+0x52>
    2d22:	038b      	lsls	r3, r1, #14
    2d24:	1ac0      	subs	r0, r0, r3
    2d26:	4152      	adcs	r2, r2
    2d28:	0b43      	lsrs	r3, r0, #13
    2d2a:	428b      	cmp	r3, r1
    2d2c:	d301      	bcc.n	2d32 <__udivsi3+0x5e>
    2d2e:	034b      	lsls	r3, r1, #13
    2d30:	1ac0      	subs	r0, r0, r3
    2d32:	4152      	adcs	r2, r2
    2d34:	0b03      	lsrs	r3, r0, #12
    2d36:	428b      	cmp	r3, r1
    2d38:	d301      	bcc.n	2d3e <__udivsi3+0x6a>
    2d3a:	030b      	lsls	r3, r1, #12
    2d3c:	1ac0      	subs	r0, r0, r3
    2d3e:	4152      	adcs	r2, r2
    2d40:	0ac3      	lsrs	r3, r0, #11
    2d42:	428b      	cmp	r3, r1
    2d44:	d301      	bcc.n	2d4a <__udivsi3+0x76>
    2d46:	02cb      	lsls	r3, r1, #11
    2d48:	1ac0      	subs	r0, r0, r3
    2d4a:	4152      	adcs	r2, r2
    2d4c:	0a83      	lsrs	r3, r0, #10
    2d4e:	428b      	cmp	r3, r1
    2d50:	d301      	bcc.n	2d56 <__udivsi3+0x82>
    2d52:	028b      	lsls	r3, r1, #10
    2d54:	1ac0      	subs	r0, r0, r3
    2d56:	4152      	adcs	r2, r2
    2d58:	0a43      	lsrs	r3, r0, #9
    2d5a:	428b      	cmp	r3, r1
    2d5c:	d301      	bcc.n	2d62 <__udivsi3+0x8e>
    2d5e:	024b      	lsls	r3, r1, #9
    2d60:	1ac0      	subs	r0, r0, r3
    2d62:	4152      	adcs	r2, r2
    2d64:	0a03      	lsrs	r3, r0, #8
    2d66:	428b      	cmp	r3, r1
    2d68:	d301      	bcc.n	2d6e <__udivsi3+0x9a>
    2d6a:	020b      	lsls	r3, r1, #8
    2d6c:	1ac0      	subs	r0, r0, r3
    2d6e:	4152      	adcs	r2, r2
    2d70:	d2cd      	bcs.n	2d0e <__udivsi3+0x3a>
    2d72:	09c3      	lsrs	r3, r0, #7
    2d74:	428b      	cmp	r3, r1
    2d76:	d301      	bcc.n	2d7c <__udivsi3+0xa8>
    2d78:	01cb      	lsls	r3, r1, #7
    2d7a:	1ac0      	subs	r0, r0, r3
    2d7c:	4152      	adcs	r2, r2
    2d7e:	0983      	lsrs	r3, r0, #6
    2d80:	428b      	cmp	r3, r1
    2d82:	d301      	bcc.n	2d88 <__udivsi3+0xb4>
    2d84:	018b      	lsls	r3, r1, #6
    2d86:	1ac0      	subs	r0, r0, r3
    2d88:	4152      	adcs	r2, r2
    2d8a:	0943      	lsrs	r3, r0, #5
    2d8c:	428b      	cmp	r3, r1
    2d8e:	d301      	bcc.n	2d94 <__udivsi3+0xc0>
    2d90:	014b      	lsls	r3, r1, #5
    2d92:	1ac0      	subs	r0, r0, r3
    2d94:	4152      	adcs	r2, r2
    2d96:	0903      	lsrs	r3, r0, #4
    2d98:	428b      	cmp	r3, r1
    2d9a:	d301      	bcc.n	2da0 <__udivsi3+0xcc>
    2d9c:	010b      	lsls	r3, r1, #4
    2d9e:	1ac0      	subs	r0, r0, r3
    2da0:	4152      	adcs	r2, r2
    2da2:	08c3      	lsrs	r3, r0, #3
    2da4:	428b      	cmp	r3, r1
    2da6:	d301      	bcc.n	2dac <__udivsi3+0xd8>
    2da8:	00cb      	lsls	r3, r1, #3
    2daa:	1ac0      	subs	r0, r0, r3
    2dac:	4152      	adcs	r2, r2
    2dae:	0883      	lsrs	r3, r0, #2
    2db0:	428b      	cmp	r3, r1
    2db2:	d301      	bcc.n	2db8 <__udivsi3+0xe4>
    2db4:	008b      	lsls	r3, r1, #2
    2db6:	1ac0      	subs	r0, r0, r3
    2db8:	4152      	adcs	r2, r2
    2dba:	0843      	lsrs	r3, r0, #1
    2dbc:	428b      	cmp	r3, r1
    2dbe:	d301      	bcc.n	2dc4 <__udivsi3+0xf0>
    2dc0:	004b      	lsls	r3, r1, #1
    2dc2:	1ac0      	subs	r0, r0, r3
    2dc4:	4152      	adcs	r2, r2
    2dc6:	1a41      	subs	r1, r0, r1
    2dc8:	d200      	bcs.n	2dcc <__udivsi3+0xf8>
    2dca:	4601      	mov	r1, r0
    2dcc:	4152      	adcs	r2, r2
    2dce:	4610      	mov	r0, r2
    2dd0:	4770      	bx	lr
    2dd2:	e7ff      	b.n	2dd4 <__udivsi3+0x100>
    2dd4:	b501      	push	{r0, lr}
    2dd6:	2000      	movs	r0, #0
    2dd8:	f000 f806 	bl	2de8 <__aeabi_idiv0>
    2ddc:	bd02      	pop	{r1, pc}
    2dde:	46c0      	nop			; (mov r8, r8)

00002de0 <__aeabi_uidivmod>:
    2de0:	2900      	cmp	r1, #0
    2de2:	d0f7      	beq.n	2dd4 <__udivsi3+0x100>
    2de4:	e776      	b.n	2cd4 <__udivsi3>
    2de6:	4770      	bx	lr

00002de8 <__aeabi_idiv0>:
    2de8:	4770      	bx	lr
    2dea:	46c0      	nop			; (mov r8, r8)

00002dec <__aeabi_lmul>:
    2dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dee:	46ce      	mov	lr, r9
    2df0:	4647      	mov	r7, r8
    2df2:	0415      	lsls	r5, r2, #16
    2df4:	0c2d      	lsrs	r5, r5, #16
    2df6:	002e      	movs	r6, r5
    2df8:	b580      	push	{r7, lr}
    2dfa:	0407      	lsls	r7, r0, #16
    2dfc:	0c14      	lsrs	r4, r2, #16
    2dfe:	0c3f      	lsrs	r7, r7, #16
    2e00:	4699      	mov	r9, r3
    2e02:	0c03      	lsrs	r3, r0, #16
    2e04:	437e      	muls	r6, r7
    2e06:	435d      	muls	r5, r3
    2e08:	4367      	muls	r7, r4
    2e0a:	4363      	muls	r3, r4
    2e0c:	197f      	adds	r7, r7, r5
    2e0e:	0c34      	lsrs	r4, r6, #16
    2e10:	19e4      	adds	r4, r4, r7
    2e12:	469c      	mov	ip, r3
    2e14:	42a5      	cmp	r5, r4
    2e16:	d903      	bls.n	2e20 <__aeabi_lmul+0x34>
    2e18:	2380      	movs	r3, #128	; 0x80
    2e1a:	025b      	lsls	r3, r3, #9
    2e1c:	4698      	mov	r8, r3
    2e1e:	44c4      	add	ip, r8
    2e20:	464b      	mov	r3, r9
    2e22:	4351      	muls	r1, r2
    2e24:	4343      	muls	r3, r0
    2e26:	0436      	lsls	r6, r6, #16
    2e28:	0c36      	lsrs	r6, r6, #16
    2e2a:	0c25      	lsrs	r5, r4, #16
    2e2c:	0424      	lsls	r4, r4, #16
    2e2e:	4465      	add	r5, ip
    2e30:	19a4      	adds	r4, r4, r6
    2e32:	1859      	adds	r1, r3, r1
    2e34:	1949      	adds	r1, r1, r5
    2e36:	0020      	movs	r0, r4
    2e38:	bc0c      	pop	{r2, r3}
    2e3a:	4690      	mov	r8, r2
    2e3c:	4699      	mov	r9, r3
    2e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002e40 <__libc_init_array>:
    2e40:	b570      	push	{r4, r5, r6, lr}
    2e42:	2600      	movs	r6, #0
    2e44:	4d0c      	ldr	r5, [pc, #48]	; (2e78 <__libc_init_array+0x38>)
    2e46:	4c0d      	ldr	r4, [pc, #52]	; (2e7c <__libc_init_array+0x3c>)
    2e48:	1b64      	subs	r4, r4, r5
    2e4a:	10a4      	asrs	r4, r4, #2
    2e4c:	42a6      	cmp	r6, r4
    2e4e:	d109      	bne.n	2e64 <__libc_init_array+0x24>
    2e50:	2600      	movs	r6, #0
    2e52:	f000 f85f 	bl	2f14 <_init>
    2e56:	4d0a      	ldr	r5, [pc, #40]	; (2e80 <__libc_init_array+0x40>)
    2e58:	4c0a      	ldr	r4, [pc, #40]	; (2e84 <__libc_init_array+0x44>)
    2e5a:	1b64      	subs	r4, r4, r5
    2e5c:	10a4      	asrs	r4, r4, #2
    2e5e:	42a6      	cmp	r6, r4
    2e60:	d105      	bne.n	2e6e <__libc_init_array+0x2e>
    2e62:	bd70      	pop	{r4, r5, r6, pc}
    2e64:	00b3      	lsls	r3, r6, #2
    2e66:	58eb      	ldr	r3, [r5, r3]
    2e68:	4798      	blx	r3
    2e6a:	3601      	adds	r6, #1
    2e6c:	e7ee      	b.n	2e4c <__libc_init_array+0xc>
    2e6e:	00b3      	lsls	r3, r6, #2
    2e70:	58eb      	ldr	r3, [r5, r3]
    2e72:	4798      	blx	r3
    2e74:	3601      	adds	r6, #1
    2e76:	e7f2      	b.n	2e5e <__libc_init_array+0x1e>
    2e78:	00002f20 	.word	0x00002f20
    2e7c:	00002f20 	.word	0x00002f20
    2e80:	00002f20 	.word	0x00002f20
    2e84:	00002f24 	.word	0x00002f24

00002e88 <memcpy>:
    2e88:	2300      	movs	r3, #0
    2e8a:	b510      	push	{r4, lr}
    2e8c:	429a      	cmp	r2, r3
    2e8e:	d100      	bne.n	2e92 <memcpy+0xa>
    2e90:	bd10      	pop	{r4, pc}
    2e92:	5ccc      	ldrb	r4, [r1, r3]
    2e94:	54c4      	strb	r4, [r0, r3]
    2e96:	3301      	adds	r3, #1
    2e98:	e7f8      	b.n	2e8c <memcpy+0x4>

00002e9a <memset>:
    2e9a:	0003      	movs	r3, r0
    2e9c:	1882      	adds	r2, r0, r2
    2e9e:	4293      	cmp	r3, r2
    2ea0:	d100      	bne.n	2ea4 <memset+0xa>
    2ea2:	4770      	bx	lr
    2ea4:	7019      	strb	r1, [r3, #0]
    2ea6:	3301      	adds	r3, #1
    2ea8:	e7f9      	b.n	2e9e <memset+0x4>
    2eaa:	0000      	movs	r0, r0
    2eac:	42000800 	.word	0x42000800
    2eb0:	42000c00 	.word	0x42000c00
    2eb4:	42001000 	.word	0x42001000
    2eb8:	42001400 	.word	0x42001400
    2ebc:	42001800 	.word	0x42001800
    2ec0:	42001c00 	.word	0x42001c00
    2ec4:	0c0b0a09 	.word	0x0c0b0a09
    2ec8:	00000e0d 	.word	0x00000e0d
    2ecc:	000023a0 	.word	0x000023a0
    2ed0:	000023fc 	.word	0x000023fc
    2ed4:	000023fc 	.word	0x000023fc
    2ed8:	0000239a 	.word	0x0000239a
    2edc:	0000239a 	.word	0x0000239a
    2ee0:	000023b4 	.word	0x000023b4
    2ee4:	000023a6 	.word	0x000023a6
    2ee8:	000023ba 	.word	0x000023ba
    2eec:	000023ec 	.word	0x000023ec
    2ef0:	000024ec 	.word	0x000024ec
    2ef4:	0000255a 	.word	0x0000255a
    2ef8:	0000255a 	.word	0x0000255a
    2efc:	000024cc 	.word	0x000024cc
    2f00:	000024de 	.word	0x000024de
    2f04:	000024fc 	.word	0x000024fc
    2f08:	000024d0 	.word	0x000024d0
    2f0c:	0000250c 	.word	0x0000250c
    2f10:	00002548 	.word	0x00002548

00002f14 <_init>:
    2f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f16:	46c0      	nop			; (mov r8, r8)
    2f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f1a:	bc08      	pop	{r3}
    2f1c:	469e      	mov	lr, r3
    2f1e:	4770      	bx	lr

00002f20 <__init_array_start>:
    2f20:	000000dd 	.word	0x000000dd

00002f24 <_fini>:
    2f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f2a:	bc08      	pop	{r3}
    2f2c:	469e      	mov	lr, r3
    2f2e:	4770      	bx	lr

00002f30 <__fini_array_start>:
    2f30:	000000b5 	.word	0x000000b5
