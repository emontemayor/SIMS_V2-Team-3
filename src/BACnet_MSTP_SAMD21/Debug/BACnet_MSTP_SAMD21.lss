
BACnet_MSTP_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ae8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00005ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009d4  20000074  00005b5c  00020074  2**2
                  ALLOC
  3 .stack        00002000  20000a48  00006530  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005ce34  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000078d6  00000000  00000000  0007cf29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000fbd4  00000000  00000000  000847ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000fc8  00000000  00000000  000943d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001598  00000000  00000000  0009539b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000219df  00000000  00000000  00096933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001cc3b  00000000  00000000  000b8312  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000954ec  00000000  00000000  000d4f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d70  00000000  00000000  0016a43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 2a 00 20 2d 49 00 00 29 49 00 00 29 49 00 00     H*. -I..)I..)I..
	...
      2c:	29 49 00 00 00 00 00 00 00 00 00 00 29 49 00 00     )I..........)I..
      3c:	d1 37 00 00 29 49 00 00 29 49 00 00 b1 3a 00 00     .7..)I..)I...:..
      4c:	29 49 00 00 a1 02 00 00 29 49 00 00 29 49 00 00     )I......)I..)I..
      5c:	29 49 00 00 29 49 00 00 39 41 00 00 49 41 00 00     )I..)I..9A..IA..
      6c:	59 41 00 00 69 41 00 00 79 41 00 00 89 41 00 00     YA..iA..yA...A..
      7c:	29 49 00 00 29 49 00 00 29 49 00 00 31 3b 00 00     )I..)I..)I..1;..
      8c:	41 3b 00 00 51 3b 00 00 61 3b 00 00 71 3b 00 00     A;..Q;..a;..q;..
      9c:	65 02 00 00 29 49 00 00 29 49 00 00 29 49 00 00     e...)I..)I..)I..
      ac:	29 49 00 00 00 00 00 00                             )I......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00005ae8 	.word	0x00005ae8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00005ae8 	.word	0x00005ae8
     10c:	00005ae8 	.word	0x00005ae8
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
     114:	b510      	push	{r4, lr}
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	0000465d 	.word	0x0000465d
     140:	00004e09 	.word	0x00004e09
     144:	20000000 	.word	0x20000000
     148:	20000004 	.word	0x20000004
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
     150:	e000      	b.n	154 <delay_cycles_ms+0x4>
     152:	0010      	movs	r0, r2
     154:	1e42      	subs	r2, r0, #1
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <delay_cycles_ms+0x24>
     15a:	4b07      	ldr	r3, [pc, #28]	; (178 <delay_cycles_ms+0x28>)
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d0f7      	beq.n	152 <delay_cycles_ms+0x2>
     162:	4906      	ldr	r1, [pc, #24]	; (17c <delay_cycles_ms+0x2c>)
     164:	604b      	str	r3, [r1, #4]
     166:	2300      	movs	r3, #0
     168:	608b      	str	r3, [r1, #8]
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <delay_cycles_ms+0x2c>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	03db      	lsls	r3, r3, #15
     170:	d5fb      	bpl.n	16a <delay_cycles_ms+0x1a>
     172:	e7ee      	b.n	152 <delay_cycles_ms+0x2>
     174:	4770      	bx	lr
     176:	46c0      	nop			; (mov r8, r8)
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <_adc_interrupt_handler>:
     180:	b570      	push	{r4, r5, r6, lr}
     182:	0080      	lsls	r0, r0, #2
     184:	4b36      	ldr	r3, [pc, #216]	; (260 <_adc_interrupt_handler+0xe0>)
     186:	58c5      	ldr	r5, [r0, r3]
     188:	682b      	ldr	r3, [r5, #0]
     18a:	7e1a      	ldrb	r2, [r3, #24]
     18c:	7ddc      	ldrb	r4, [r3, #23]
     18e:	4014      	ands	r4, r2
     190:	07e2      	lsls	r2, r4, #31
     192:	d416      	bmi.n	1c2 <_adc_interrupt_handler+0x42>
     194:	0763      	lsls	r3, r4, #29
     196:	d508      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
     198:	2304      	movs	r3, #4
     19a:	682a      	ldr	r2, [r5, #0]
     19c:	7613      	strb	r3, [r2, #24]
     19e:	7eeb      	ldrb	r3, [r5, #27]
     1a0:	079b      	lsls	r3, r3, #30
     1a2:	d502      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
     1a4:	7eab      	ldrb	r3, [r5, #26]
     1a6:	079b      	lsls	r3, r3, #30
     1a8:	d452      	bmi.n	250 <_adc_interrupt_handler+0xd0>
     1aa:	07a3      	lsls	r3, r4, #30
     1ac:	d508      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
     1ae:	2302      	movs	r3, #2
     1b0:	682a      	ldr	r2, [r5, #0]
     1b2:	7613      	strb	r3, [r2, #24]
     1b4:	7eeb      	ldrb	r3, [r5, #27]
     1b6:	075b      	lsls	r3, r3, #29
     1b8:	d502      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
     1ba:	7eab      	ldrb	r3, [r5, #26]
     1bc:	075b      	lsls	r3, r3, #29
     1be:	d44b      	bmi.n	258 <_adc_interrupt_handler+0xd8>
     1c0:	bd70      	pop	{r4, r5, r6, pc}
     1c2:	2201      	movs	r2, #1
     1c4:	761a      	strb	r2, [r3, #24]
     1c6:	682a      	ldr	r2, [r5, #0]
     1c8:	7e53      	ldrb	r3, [r2, #25]
     1ca:	b25b      	sxtb	r3, r3
     1cc:	2b00      	cmp	r3, #0
     1ce:	db27      	blt.n	220 <_adc_interrupt_handler+0xa0>
     1d0:	2100      	movs	r1, #0
     1d2:	2900      	cmp	r1, #0
     1d4:	d1f7      	bne.n	1c6 <_adc_interrupt_handler+0x46>
     1d6:	6968      	ldr	r0, [r5, #20]
     1d8:	1c83      	adds	r3, r0, #2
     1da:	616b      	str	r3, [r5, #20]
     1dc:	8b53      	ldrh	r3, [r2, #26]
     1de:	b29b      	uxth	r3, r3
     1e0:	8003      	strh	r3, [r0, #0]
     1e2:	8b2b      	ldrh	r3, [r5, #24]
     1e4:	3b01      	subs	r3, #1
     1e6:	b29b      	uxth	r3, r3
     1e8:	832b      	strh	r3, [r5, #24]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d01e      	beq.n	22c <_adc_interrupt_handler+0xac>
     1ee:	7f6b      	ldrb	r3, [r5, #29]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d0cf      	beq.n	194 <_adc_interrupt_handler+0x14>
     1f4:	682e      	ldr	r6, [r5, #0]
     1f6:	7e72      	ldrb	r2, [r6, #25]
     1f8:	b252      	sxtb	r2, r2
     1fa:	2a00      	cmp	r2, #0
     1fc:	db12      	blt.n	224 <_adc_interrupt_handler+0xa4>
     1fe:	0008      	movs	r0, r1
     200:	2800      	cmp	r0, #0
     202:	d1f8      	bne.n	1f6 <_adc_interrupt_handler+0x76>
     204:	7b32      	ldrb	r2, [r6, #12]
     206:	2102      	movs	r1, #2
     208:	430a      	orrs	r2, r1
     20a:	b2d2      	uxtb	r2, r2
     20c:	7332      	strb	r2, [r6, #12]
     20e:	682a      	ldr	r2, [r5, #0]
     210:	7e52      	ldrb	r2, [r2, #25]
     212:	b252      	sxtb	r2, r2
     214:	2a00      	cmp	r2, #0
     216:	db07      	blt.n	228 <_adc_interrupt_handler+0xa8>
     218:	0002      	movs	r2, r0
     21a:	2a00      	cmp	r2, #0
     21c:	d1f7      	bne.n	20e <_adc_interrupt_handler+0x8e>
     21e:	e7b9      	b.n	194 <_adc_interrupt_handler+0x14>
     220:	2101      	movs	r1, #1
     222:	e7d6      	b.n	1d2 <_adc_interrupt_handler+0x52>
     224:	0018      	movs	r0, r3
     226:	e7eb      	b.n	200 <_adc_interrupt_handler+0x80>
     228:	001a      	movs	r2, r3
     22a:	e7f6      	b.n	21a <_adc_interrupt_handler+0x9a>
     22c:	2301      	movs	r3, #1
     22e:	682a      	ldr	r2, [r5, #0]
     230:	7593      	strb	r3, [r2, #22]
     232:	7f2b      	ldrb	r3, [r5, #28]
     234:	2b05      	cmp	r3, #5
     236:	d1ad      	bne.n	194 <_adc_interrupt_handler+0x14>
     238:	2300      	movs	r3, #0
     23a:	772b      	strb	r3, [r5, #28]
     23c:	7eeb      	ldrb	r3, [r5, #27]
     23e:	07db      	lsls	r3, r3, #31
     240:	d5a8      	bpl.n	194 <_adc_interrupt_handler+0x14>
     242:	7eab      	ldrb	r3, [r5, #26]
     244:	07db      	lsls	r3, r3, #31
     246:	d5a5      	bpl.n	194 <_adc_interrupt_handler+0x14>
     248:	0028      	movs	r0, r5
     24a:	68ab      	ldr	r3, [r5, #8]
     24c:	4798      	blx	r3
     24e:	e7a1      	b.n	194 <_adc_interrupt_handler+0x14>
     250:	0028      	movs	r0, r5
     252:	68eb      	ldr	r3, [r5, #12]
     254:	4798      	blx	r3
     256:	e7a8      	b.n	1aa <_adc_interrupt_handler+0x2a>
     258:	692b      	ldr	r3, [r5, #16]
     25a:	0028      	movs	r0, r5
     25c:	4798      	blx	r3
     25e:	e7af      	b.n	1c0 <_adc_interrupt_handler+0x40>
     260:	20000408 	.word	0x20000408

00000264 <ADC_Handler>:
     264:	b510      	push	{r4, lr}
     266:	2000      	movs	r0, #0
     268:	4b01      	ldr	r3, [pc, #4]	; (270 <ADC_Handler+0xc>)
     26a:	4798      	blx	r3
     26c:	bd10      	pop	{r4, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00000181 	.word	0x00000181

00000274 <extint_register_callback>:
     274:	2a00      	cmp	r2, #0
     276:	d001      	beq.n	27c <extint_register_callback+0x8>
     278:	2017      	movs	r0, #23
     27a:	4770      	bx	lr
     27c:	008b      	lsls	r3, r1, #2
     27e:	4a07      	ldr	r2, [pc, #28]	; (29c <extint_register_callback+0x28>)
     280:	589b      	ldr	r3, [r3, r2]
     282:	2b00      	cmp	r3, #0
     284:	d003      	beq.n	28e <extint_register_callback+0x1a>
     286:	4283      	cmp	r3, r0
     288:	d005      	beq.n	296 <extint_register_callback+0x22>
     28a:	201d      	movs	r0, #29
     28c:	e7f5      	b.n	27a <extint_register_callback+0x6>
     28e:	0089      	lsls	r1, r1, #2
     290:	5088      	str	r0, [r1, r2]
     292:	2000      	movs	r0, #0
     294:	e7f1      	b.n	27a <extint_register_callback+0x6>
     296:	2000      	movs	r0, #0
     298:	e7ef      	b.n	27a <extint_register_callback+0x6>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	20000410 	.word	0x20000410

000002a0 <EIC_Handler>:
     2a0:	b510      	push	{r4, lr}
     2a2:	2200      	movs	r2, #0
     2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <EIC_Handler+0x44>)
     2a6:	701a      	strb	r2, [r3, #0]
     2a8:	e005      	b.n	2b6 <EIC_Handler+0x16>
     2aa:	480f      	ldr	r0, [pc, #60]	; (2e8 <EIC_Handler+0x48>)
     2ac:	e00a      	b.n	2c4 <EIC_Handler+0x24>
     2ae:	4a0d      	ldr	r2, [pc, #52]	; (2e4 <EIC_Handler+0x44>)
     2b0:	7813      	ldrb	r3, [r2, #0]
     2b2:	3301      	adds	r3, #1
     2b4:	7013      	strb	r3, [r2, #0]
     2b6:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <EIC_Handler+0x44>)
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b0f      	cmp	r3, #15
     2bc:	d811      	bhi.n	2e2 <EIC_Handler+0x42>
     2be:	2b1f      	cmp	r3, #31
     2c0:	d9f3      	bls.n	2aa <EIC_Handler+0xa>
     2c2:	2000      	movs	r0, #0
     2c4:	211f      	movs	r1, #31
     2c6:	4019      	ands	r1, r3
     2c8:	2201      	movs	r2, #1
     2ca:	408a      	lsls	r2, r1
     2cc:	6901      	ldr	r1, [r0, #16]
     2ce:	4211      	tst	r1, r2
     2d0:	d0ed      	beq.n	2ae <EIC_Handler+0xe>
     2d2:	6102      	str	r2, [r0, #16]
     2d4:	009b      	lsls	r3, r3, #2
     2d6:	4a05      	ldr	r2, [pc, #20]	; (2ec <EIC_Handler+0x4c>)
     2d8:	589b      	ldr	r3, [r3, r2]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e7      	beq.n	2ae <EIC_Handler+0xe>
     2de:	4798      	blx	r3
     2e0:	e7e5      	b.n	2ae <EIC_Handler+0xe>
     2e2:	bd10      	pop	{r4, pc}
     2e4:	2000040c 	.word	0x2000040c
     2e8:	40001800 	.word	0x40001800
     2ec:	20000410 	.word	0x20000410

000002f0 <_extint_enable>:
     2f0:	2200      	movs	r2, #0
     2f2:	2a00      	cmp	r2, #0
     2f4:	d006      	beq.n	304 <_extint_enable+0x14>
     2f6:	2300      	movs	r3, #0
     2f8:	2b00      	cmp	r3, #0
     2fa:	d00b      	beq.n	314 <_extint_enable+0x24>
     2fc:	2300      	movs	r3, #0
     2fe:	2b00      	cmp	r3, #0
     300:	d1f9      	bne.n	2f6 <_extint_enable+0x6>
     302:	4770      	bx	lr
     304:	4908      	ldr	r1, [pc, #32]	; (328 <_extint_enable+0x38>)
     306:	780b      	ldrb	r3, [r1, #0]
     308:	2002      	movs	r0, #2
     30a:	4303      	orrs	r3, r0
     30c:	b2db      	uxtb	r3, r3
     30e:	700b      	strb	r3, [r1, #0]
     310:	3201      	adds	r2, #1
     312:	e7ee      	b.n	2f2 <_extint_enable+0x2>
     314:	4a04      	ldr	r2, [pc, #16]	; (328 <_extint_enable+0x38>)
     316:	7852      	ldrb	r2, [r2, #1]
     318:	b252      	sxtb	r2, r2
     31a:	2a00      	cmp	r2, #0
     31c:	db01      	blt.n	322 <_extint_enable+0x32>
     31e:	3301      	adds	r3, #1
     320:	e7ea      	b.n	2f8 <_extint_enable+0x8>
     322:	2301      	movs	r3, #1
     324:	e7eb      	b.n	2fe <_extint_enable+0xe>
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <_system_extint_init>:
     32c:	b500      	push	{lr}
     32e:	b083      	sub	sp, #12
     330:	4a1b      	ldr	r2, [pc, #108]	; (3a0 <_system_extint_init+0x74>)
     332:	6993      	ldr	r3, [r2, #24]
     334:	2140      	movs	r1, #64	; 0x40
     336:	430b      	orrs	r3, r1
     338:	6193      	str	r3, [r2, #24]
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	700b      	strb	r3, [r1, #0]
     340:	2005      	movs	r0, #5
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <_system_extint_init+0x78>)
     344:	4798      	blx	r3
     346:	2005      	movs	r0, #5
     348:	4b17      	ldr	r3, [pc, #92]	; (3a8 <_system_extint_init+0x7c>)
     34a:	4798      	blx	r3
     34c:	2200      	movs	r2, #0
     34e:	2a00      	cmp	r2, #0
     350:	d006      	beq.n	360 <_system_extint_init+0x34>
     352:	2300      	movs	r3, #0
     354:	2b00      	cmp	r3, #0
     356:	d00b      	beq.n	370 <_system_extint_init+0x44>
     358:	2300      	movs	r3, #0
     35a:	2b00      	cmp	r3, #0
     35c:	d1f9      	bne.n	352 <_system_extint_init+0x26>
     35e:	e016      	b.n	38e <_system_extint_init+0x62>
     360:	4912      	ldr	r1, [pc, #72]	; (3ac <_system_extint_init+0x80>)
     362:	780b      	ldrb	r3, [r1, #0]
     364:	2001      	movs	r0, #1
     366:	4303      	orrs	r3, r0
     368:	b2db      	uxtb	r3, r3
     36a:	700b      	strb	r3, [r1, #0]
     36c:	3201      	adds	r2, #1
     36e:	e7ee      	b.n	34e <_system_extint_init+0x22>
     370:	4a0e      	ldr	r2, [pc, #56]	; (3ac <_system_extint_init+0x80>)
     372:	7852      	ldrb	r2, [r2, #1]
     374:	b252      	sxtb	r2, r2
     376:	2a00      	cmp	r2, #0
     378:	db01      	blt.n	37e <_system_extint_init+0x52>
     37a:	3301      	adds	r3, #1
     37c:	e7ea      	b.n	354 <_system_extint_init+0x28>
     37e:	2301      	movs	r3, #1
     380:	e7eb      	b.n	35a <_system_extint_init+0x2e>
     382:	0099      	lsls	r1, r3, #2
     384:	2000      	movs	r0, #0
     386:	4a0a      	ldr	r2, [pc, #40]	; (3b0 <_system_extint_init+0x84>)
     388:	5088      	str	r0, [r1, r2]
     38a:	3301      	adds	r3, #1
     38c:	b2db      	uxtb	r3, r3
     38e:	2b0f      	cmp	r3, #15
     390:	d9f7      	bls.n	382 <_system_extint_init+0x56>
     392:	2210      	movs	r2, #16
     394:	4b07      	ldr	r3, [pc, #28]	; (3b4 <_system_extint_init+0x88>)
     396:	601a      	str	r2, [r3, #0]
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_system_extint_init+0x8c>)
     39a:	4798      	blx	r3
     39c:	b003      	add	sp, #12
     39e:	bd00      	pop	{pc}
     3a0:	40000400 	.word	0x40000400
     3a4:	00004791 	.word	0x00004791
     3a8:	00004709 	.word	0x00004709
     3ac:	40001800 	.word	0x40001800
     3b0:	20000410 	.word	0x20000410
     3b4:	e000e100 	.word	0xe000e100
     3b8:	000002f1 	.word	0x000002f1

000003bc <extint_chan_set_config>:
     3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3be:	b083      	sub	sp, #12
     3c0:	0005      	movs	r5, r0
     3c2:	000c      	movs	r4, r1
     3c4:	a901      	add	r1, sp, #4
     3c6:	2300      	movs	r3, #0
     3c8:	704b      	strb	r3, [r1, #1]
     3ca:	70cb      	strb	r3, [r1, #3]
     3cc:	7923      	ldrb	r3, [r4, #4]
     3ce:	700b      	strb	r3, [r1, #0]
     3d0:	7a23      	ldrb	r3, [r4, #8]
     3d2:	708b      	strb	r3, [r1, #2]
     3d4:	7820      	ldrb	r0, [r4, #0]
     3d6:	4b16      	ldr	r3, [pc, #88]	; (430 <extint_chan_set_config+0x74>)
     3d8:	4798      	blx	r3
     3da:	2d1f      	cmp	r5, #31
     3dc:	d920      	bls.n	420 <extint_chan_set_config+0x64>
     3de:	2000      	movs	r0, #0
     3e0:	2207      	movs	r2, #7
     3e2:	402a      	ands	r2, r5
     3e4:	0092      	lsls	r2, r2, #2
     3e6:	7ae3      	ldrb	r3, [r4, #11]
     3e8:	001e      	movs	r6, r3
     3ea:	7aa1      	ldrb	r1, [r4, #10]
     3ec:	2900      	cmp	r1, #0
     3ee:	d002      	beq.n	3f6 <extint_chan_set_config+0x3a>
     3f0:	2608      	movs	r6, #8
     3f2:	431e      	orrs	r6, r3
     3f4:	b2f6      	uxtb	r6, r6
     3f6:	08eb      	lsrs	r3, r5, #3
     3f8:	3306      	adds	r3, #6
     3fa:	009b      	lsls	r3, r3, #2
     3fc:	5819      	ldr	r1, [r3, r0]
     3fe:	270f      	movs	r7, #15
     400:	4097      	lsls	r7, r2
     402:	43b9      	bics	r1, r7
     404:	4096      	lsls	r6, r2
     406:	0032      	movs	r2, r6
     408:	430a      	orrs	r2, r1
     40a:	501a      	str	r2, [r3, r0]
     40c:	7a63      	ldrb	r3, [r4, #9]
     40e:	2b00      	cmp	r3, #0
     410:	d108      	bne.n	424 <extint_chan_set_config+0x68>
     412:	6943      	ldr	r3, [r0, #20]
     414:	2201      	movs	r2, #1
     416:	40aa      	lsls	r2, r5
     418:	4393      	bics	r3, r2
     41a:	6143      	str	r3, [r0, #20]
     41c:	b003      	add	sp, #12
     41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     420:	4804      	ldr	r0, [pc, #16]	; (434 <extint_chan_set_config+0x78>)
     422:	e7dd      	b.n	3e0 <extint_chan_set_config+0x24>
     424:	6943      	ldr	r3, [r0, #20]
     426:	2201      	movs	r2, #1
     428:	40aa      	lsls	r2, r5
     42a:	4313      	orrs	r3, r2
     42c:	6143      	str	r3, [r0, #20]
     42e:	e7f5      	b.n	41c <extint_chan_set_config+0x60>
     430:	000048c9 	.word	0x000048c9
     434:	40001800 	.word	0x40001800

00000438 <rtc_calendar_enable>:
     438:	6802      	ldr	r2, [r0, #0]
     43a:	7a93      	ldrb	r3, [r2, #10]
     43c:	b25b      	sxtb	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	db08      	blt.n	454 <rtc_calendar_enable+0x1c>
     442:	2300      	movs	r3, #0
     444:	2b00      	cmp	r3, #0
     446:	d1f8      	bne.n	43a <rtc_calendar_enable+0x2>
     448:	8813      	ldrh	r3, [r2, #0]
     44a:	2102      	movs	r1, #2
     44c:	430b      	orrs	r3, r1
     44e:	b29b      	uxth	r3, r3
     450:	8013      	strh	r3, [r2, #0]
     452:	4770      	bx	lr
     454:	2301      	movs	r3, #1
     456:	e7f5      	b.n	444 <rtc_calendar_enable+0xc>

00000458 <rtc_calendar_disable>:
     458:	6802      	ldr	r2, [r0, #0]
     45a:	7a93      	ldrb	r3, [r2, #10]
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	db0a      	blt.n	478 <rtc_calendar_disable+0x20>
     462:	2300      	movs	r3, #0
     464:	2b00      	cmp	r3, #0
     466:	d1f8      	bne.n	45a <rtc_calendar_disable+0x2>
     468:	33c1      	adds	r3, #193	; 0xc1
     46a:	7193      	strb	r3, [r2, #6]
     46c:	7213      	strb	r3, [r2, #8]
     46e:	8813      	ldrh	r3, [r2, #0]
     470:	2102      	movs	r1, #2
     472:	438b      	bics	r3, r1
     474:	8013      	strh	r3, [r2, #0]
     476:	4770      	bx	lr
     478:	2301      	movs	r3, #1
     47a:	e7f3      	b.n	464 <rtc_calendar_disable+0xc>

0000047c <rtc_calendar_reset>:
     47c:	b570      	push	{r4, r5, r6, lr}
     47e:	0004      	movs	r4, r0
     480:	6805      	ldr	r5, [r0, #0]
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <rtc_calendar_reset+0x2c>)
     484:	4798      	blx	r3
     486:	6823      	ldr	r3, [r4, #0]
     488:	7a9b      	ldrb	r3, [r3, #10]
     48a:	b25b      	sxtb	r3, r3
     48c:	2b00      	cmp	r3, #0
     48e:	db08      	blt.n	4a2 <rtc_calendar_reset+0x26>
     490:	2300      	movs	r3, #0
     492:	2b00      	cmp	r3, #0
     494:	d1f7      	bne.n	486 <rtc_calendar_reset+0xa>
     496:	882b      	ldrh	r3, [r5, #0]
     498:	2201      	movs	r2, #1
     49a:	4313      	orrs	r3, r2
     49c:	b29b      	uxth	r3, r3
     49e:	802b      	strh	r3, [r5, #0]
     4a0:	bd70      	pop	{r4, r5, r6, pc}
     4a2:	2301      	movs	r3, #1
     4a4:	e7f5      	b.n	492 <rtc_calendar_reset+0x16>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000459 	.word	0x00000459

000004ac <rtc_calendar_time_to_register_value>:
     4ac:	88cb      	ldrh	r3, [r1, #6]
     4ae:	88c2      	ldrh	r2, [r0, #6]
     4b0:	1a9b      	subs	r3, r3, r2
     4b2:	069b      	lsls	r3, r3, #26
     4b4:	794a      	ldrb	r2, [r1, #5]
     4b6:	0592      	lsls	r2, r2, #22
     4b8:	4313      	orrs	r3, r2
     4ba:	790a      	ldrb	r2, [r1, #4]
     4bc:	0452      	lsls	r2, r2, #17
     4be:	4313      	orrs	r3, r2
     4c0:	788a      	ldrb	r2, [r1, #2]
     4c2:	0312      	lsls	r2, r2, #12
     4c4:	4313      	orrs	r3, r2
     4c6:	7902      	ldrb	r2, [r0, #4]
     4c8:	2a00      	cmp	r2, #0
     4ca:	d105      	bne.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4cc:	78ca      	ldrb	r2, [r1, #3]
     4ce:	2a00      	cmp	r2, #0
     4d0:	d002      	beq.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4d2:	2280      	movs	r2, #128	; 0x80
     4d4:	0252      	lsls	r2, r2, #9
     4d6:	4313      	orrs	r3, r2
     4d8:	7848      	ldrb	r0, [r1, #1]
     4da:	0180      	lsls	r0, r0, #6
     4dc:	4303      	orrs	r3, r0
     4de:	7808      	ldrb	r0, [r1, #0]
     4e0:	4318      	orrs	r0, r3
     4e2:	4770      	bx	lr

000004e4 <rtc_calendar_register_value_to_time>:
     4e4:	b510      	push	{r4, lr}
     4e6:	0e8c      	lsrs	r4, r1, #26
     4e8:	88c3      	ldrh	r3, [r0, #6]
     4ea:	191b      	adds	r3, r3, r4
     4ec:	80d3      	strh	r3, [r2, #6]
     4ee:	0d8c      	lsrs	r4, r1, #22
     4f0:	230f      	movs	r3, #15
     4f2:	4023      	ands	r3, r4
     4f4:	7153      	strb	r3, [r2, #5]
     4f6:	0c4c      	lsrs	r4, r1, #17
     4f8:	231f      	movs	r3, #31
     4fa:	4023      	ands	r3, r4
     4fc:	7113      	strb	r3, [r2, #4]
     4fe:	7903      	ldrb	r3, [r0, #4]
     500:	2b00      	cmp	r3, #0
     502:	d110      	bne.n	526 <rtc_calendar_register_value_to_time+0x42>
     504:	0b08      	lsrs	r0, r1, #12
     506:	230f      	movs	r3, #15
     508:	4003      	ands	r3, r0
     50a:	7093      	strb	r3, [r2, #2]
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	025b      	lsls	r3, r3, #9
     510:	400b      	ands	r3, r1
     512:	1e58      	subs	r0, r3, #1
     514:	4183      	sbcs	r3, r0
     516:	70d3      	strb	r3, [r2, #3]
     518:	0988      	lsrs	r0, r1, #6
     51a:	233f      	movs	r3, #63	; 0x3f
     51c:	4018      	ands	r0, r3
     51e:	7050      	strb	r0, [r2, #1]
     520:	4019      	ands	r1, r3
     522:	7011      	strb	r1, [r2, #0]
     524:	bd10      	pop	{r4, pc}
     526:	0b08      	lsrs	r0, r1, #12
     528:	231f      	movs	r3, #31
     52a:	4003      	ands	r3, r0
     52c:	7093      	strb	r3, [r2, #2]
     52e:	e7f3      	b.n	518 <rtc_calendar_register_value_to_time+0x34>

00000530 <rtc_calendar_set_time>:
     530:	b510      	push	{r4, lr}
     532:	6804      	ldr	r4, [r0, #0]
     534:	4b06      	ldr	r3, [pc, #24]	; (550 <rtc_calendar_set_time+0x20>)
     536:	4798      	blx	r3
     538:	7aa3      	ldrb	r3, [r4, #10]
     53a:	b25b      	sxtb	r3, r3
     53c:	2b00      	cmp	r3, #0
     53e:	db04      	blt.n	54a <rtc_calendar_set_time+0x1a>
     540:	2300      	movs	r3, #0
     542:	2b00      	cmp	r3, #0
     544:	d1f8      	bne.n	538 <rtc_calendar_set_time+0x8>
     546:	6120      	str	r0, [r4, #16]
     548:	bd10      	pop	{r4, pc}
     54a:	2301      	movs	r3, #1
     54c:	e7f9      	b.n	542 <rtc_calendar_set_time+0x12>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	000004ad 	.word	0x000004ad

00000554 <rtc_calendar_get_time>:
     554:	b570      	push	{r4, r5, r6, lr}
     556:	000a      	movs	r2, r1
     558:	6803      	ldr	r3, [r0, #0]
     55a:	7944      	ldrb	r4, [r0, #5]
     55c:	2c00      	cmp	r4, #0
     55e:	d006      	beq.n	56e <rtc_calendar_get_time+0x1a>
     560:	8859      	ldrh	r1, [r3, #2]
     562:	0449      	lsls	r1, r1, #17
     564:	d510      	bpl.n	588 <rtc_calendar_get_time+0x34>
     566:	6919      	ldr	r1, [r3, #16]
     568:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <rtc_calendar_get_time+0x54>)
     56a:	4798      	blx	r3
     56c:	bd70      	pop	{r4, r5, r6, pc}
     56e:	490f      	ldr	r1, [pc, #60]	; (5ac <rtc_calendar_get_time+0x58>)
     570:	8059      	strh	r1, [r3, #2]
     572:	6801      	ldr	r1, [r0, #0]
     574:	7a89      	ldrb	r1, [r1, #10]
     576:	b249      	sxtb	r1, r1
     578:	2900      	cmp	r1, #0
     57a:	db03      	blt.n	584 <rtc_calendar_get_time+0x30>
     57c:	0021      	movs	r1, r4
     57e:	2900      	cmp	r1, #0
     580:	d1f7      	bne.n	572 <rtc_calendar_get_time+0x1e>
     582:	e7f0      	b.n	566 <rtc_calendar_get_time+0x12>
     584:	2101      	movs	r1, #1
     586:	e7fa      	b.n	57e <rtc_calendar_get_time+0x2a>
     588:	8859      	ldrh	r1, [r3, #2]
     58a:	4d09      	ldr	r5, [pc, #36]	; (5b0 <rtc_calendar_get_time+0x5c>)
     58c:	4329      	orrs	r1, r5
     58e:	b289      	uxth	r1, r1
     590:	8059      	strh	r1, [r3, #2]
     592:	6801      	ldr	r1, [r0, #0]
     594:	7a89      	ldrb	r1, [r1, #10]
     596:	b249      	sxtb	r1, r1
     598:	2900      	cmp	r1, #0
     59a:	db03      	blt.n	5a4 <rtc_calendar_get_time+0x50>
     59c:	2100      	movs	r1, #0
     59e:	2900      	cmp	r1, #0
     5a0:	d1f7      	bne.n	592 <rtc_calendar_get_time+0x3e>
     5a2:	e7e0      	b.n	566 <rtc_calendar_get_time+0x12>
     5a4:	0021      	movs	r1, r4
     5a6:	e7fa      	b.n	59e <rtc_calendar_get_time+0x4a>
     5a8:	000004e5 	.word	0x000004e5
     5ac:	ffff8000 	.word	0xffff8000
     5b0:	ffffc000 	.word	0xffffc000

000005b4 <rtc_calendar_set_alarm>:
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	000d      	movs	r5, r1
     5b8:	0014      	movs	r4, r2
     5ba:	6806      	ldr	r6, [r0, #0]
     5bc:	2a01      	cmp	r2, #1
     5be:	d901      	bls.n	5c4 <rtc_calendar_set_alarm+0x10>
     5c0:	2017      	movs	r0, #23
     5c2:	bd70      	pop	{r4, r5, r6, pc}
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <rtc_calendar_set_alarm+0x38>)
     5c6:	4798      	blx	r3
     5c8:	7ab3      	ldrb	r3, [r6, #10]
     5ca:	b25b      	sxtb	r3, r3
     5cc:	2b00      	cmp	r3, #0
     5ce:	db0a      	blt.n	5e6 <rtc_calendar_set_alarm+0x32>
     5d0:	2300      	movs	r3, #0
     5d2:	2b00      	cmp	r3, #0
     5d4:	d1f8      	bne.n	5c8 <rtc_calendar_set_alarm+0x14>
     5d6:	3403      	adds	r4, #3
     5d8:	00e4      	lsls	r4, r4, #3
     5da:	51a0      	str	r0, [r4, r6]
     5dc:	7a2b      	ldrb	r3, [r5, #8]
     5de:	1934      	adds	r4, r6, r4
     5e0:	7123      	strb	r3, [r4, #4]
     5e2:	2000      	movs	r0, #0
     5e4:	e7ed      	b.n	5c2 <rtc_calendar_set_alarm+0xe>
     5e6:	2301      	movs	r3, #1
     5e8:	e7f3      	b.n	5d2 <rtc_calendar_set_alarm+0x1e>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	000004ad 	.word	0x000004ad

000005f0 <_rtc_calendar_set_config>:
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	0005      	movs	r5, r0
     5f4:	000e      	movs	r6, r1
     5f6:	6801      	ldr	r1, [r0, #0]
     5f8:	8832      	ldrh	r2, [r6, #0]
     5fa:	2308      	movs	r3, #8
     5fc:	4313      	orrs	r3, r2
     5fe:	b29b      	uxth	r3, r3
     600:	7930      	ldrb	r0, [r6, #4]
     602:	2800      	cmp	r0, #0
     604:	d102      	bne.n	60c <_rtc_calendar_set_config+0x1c>
     606:	2348      	movs	r3, #72	; 0x48
     608:	4313      	orrs	r3, r2
     60a:	b29b      	uxth	r3, r3
     60c:	78b2      	ldrb	r2, [r6, #2]
     60e:	2a00      	cmp	r2, #0
     610:	d002      	beq.n	618 <_rtc_calendar_set_config+0x28>
     612:	2280      	movs	r2, #128	; 0x80
     614:	4313      	orrs	r3, r2
     616:	b29b      	uxth	r3, r3
     618:	800b      	strh	r3, [r1, #0]
     61a:	78f3      	ldrb	r3, [r6, #3]
     61c:	2b00      	cmp	r3, #0
     61e:	d004      	beq.n	62a <_rtc_calendar_set_config+0x3a>
     620:	884b      	ldrh	r3, [r1, #2]
     622:	2280      	movs	r2, #128	; 0x80
     624:	01d2      	lsls	r2, r2, #7
     626:	4313      	orrs	r3, r2
     628:	804b      	strh	r3, [r1, #2]
     62a:	2400      	movs	r4, #0
     62c:	e00a      	b.n	644 <_rtc_calendar_set_config+0x54>
     62e:	00a3      	lsls	r3, r4, #2
     630:	191b      	adds	r3, r3, r4
     632:	0059      	lsls	r1, r3, #1
     634:	3108      	adds	r1, #8
     636:	1871      	adds	r1, r6, r1
     638:	0022      	movs	r2, r4
     63a:	0028      	movs	r0, r5
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <_rtc_calendar_set_config+0x5c>)
     63e:	4798      	blx	r3
     640:	3401      	adds	r4, #1
     642:	b2e4      	uxtb	r4, r4
     644:	2c00      	cmp	r4, #0
     646:	d0f2      	beq.n	62e <_rtc_calendar_set_config+0x3e>
     648:	bd70      	pop	{r4, r5, r6, pc}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	000005b5 	.word	0x000005b5

00000650 <rtc_calendar_init>:
     650:	b530      	push	{r4, r5, lr}
     652:	b083      	sub	sp, #12
     654:	0004      	movs	r4, r0
     656:	0015      	movs	r5, r2
     658:	6001      	str	r1, [r0, #0]
     65a:	4a0f      	ldr	r2, [pc, #60]	; (698 <rtc_calendar_init+0x48>)
     65c:	6993      	ldr	r3, [r2, #24]
     65e:	2120      	movs	r1, #32
     660:	430b      	orrs	r3, r1
     662:	6193      	str	r3, [r2, #24]
     664:	a901      	add	r1, sp, #4
     666:	2302      	movs	r3, #2
     668:	700b      	strb	r3, [r1, #0]
     66a:	2004      	movs	r0, #4
     66c:	4b0b      	ldr	r3, [pc, #44]	; (69c <rtc_calendar_init+0x4c>)
     66e:	4798      	blx	r3
     670:	2004      	movs	r0, #4
     672:	4b0b      	ldr	r3, [pc, #44]	; (6a0 <rtc_calendar_init+0x50>)
     674:	4798      	blx	r3
     676:	0020      	movs	r0, r4
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <rtc_calendar_init+0x54>)
     67a:	4798      	blx	r3
     67c:	792b      	ldrb	r3, [r5, #4]
     67e:	7123      	strb	r3, [r4, #4]
     680:	78eb      	ldrb	r3, [r5, #3]
     682:	7163      	strb	r3, [r4, #5]
     684:	88eb      	ldrh	r3, [r5, #6]
     686:	80e3      	strh	r3, [r4, #6]
     688:	4b07      	ldr	r3, [pc, #28]	; (6a8 <rtc_calendar_init+0x58>)
     68a:	601c      	str	r4, [r3, #0]
     68c:	0029      	movs	r1, r5
     68e:	0020      	movs	r0, r4
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <rtc_calendar_init+0x5c>)
     692:	4798      	blx	r3
     694:	b003      	add	sp, #12
     696:	bd30      	pop	{r4, r5, pc}
     698:	40000400 	.word	0x40000400
     69c:	00004791 	.word	0x00004791
     6a0:	00004709 	.word	0x00004709
     6a4:	0000047d 	.word	0x0000047d
     6a8:	20000450 	.word	0x20000450
     6ac:	000005f1 	.word	0x000005f1

000006b0 <rtc_calendar_frequency_correction>:
     6b0:	6802      	ldr	r2, [r0, #0]
     6b2:	17c8      	asrs	r0, r1, #31
     6b4:	180b      	adds	r3, r1, r0
     6b6:	4043      	eors	r3, r0
     6b8:	2b7f      	cmp	r3, #127	; 0x7f
     6ba:	dd01      	ble.n	6c0 <rtc_calendar_frequency_correction+0x10>
     6bc:	2017      	movs	r0, #23
     6be:	4770      	bx	lr
     6c0:	0018      	movs	r0, r3
     6c2:	2900      	cmp	r1, #0
     6c4:	db0a      	blt.n	6dc <rtc_calendar_frequency_correction+0x2c>
     6c6:	7a93      	ldrb	r3, [r2, #10]
     6c8:	b25b      	sxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	db09      	blt.n	6e2 <rtc_calendar_frequency_correction+0x32>
     6ce:	2300      	movs	r3, #0
     6d0:	2b00      	cmp	r3, #0
     6d2:	d1f8      	bne.n	6c6 <rtc_calendar_frequency_correction+0x16>
     6d4:	b2c0      	uxtb	r0, r0
     6d6:	7310      	strb	r0, [r2, #12]
     6d8:	2000      	movs	r0, #0
     6da:	e7f0      	b.n	6be <rtc_calendar_frequency_correction+0xe>
     6dc:	2080      	movs	r0, #128	; 0x80
     6de:	4318      	orrs	r0, r3
     6e0:	e7f1      	b.n	6c6 <rtc_calendar_frequency_correction+0x16>
     6e2:	2301      	movs	r3, #1
     6e4:	e7f4      	b.n	6d0 <rtc_calendar_frequency_correction+0x20>

000006e6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e8:	46de      	mov	lr, fp
     6ea:	4657      	mov	r7, sl
     6ec:	464e      	mov	r6, r9
     6ee:	4645      	mov	r5, r8
     6f0:	b5e0      	push	{r5, r6, r7, lr}
     6f2:	b085      	sub	sp, #20
     6f4:	4689      	mov	r9, r1
     6f6:	0016      	movs	r6, r2
     6f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6fa:	2200      	movs	r2, #0
     6fc:	2300      	movs	r3, #0
     6fe:	2100      	movs	r1, #0
     700:	468b      	mov	fp, r1
     702:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     704:	253f      	movs	r5, #63	; 0x3f
     706:	9600      	str	r6, [sp, #0]
     708:	9701      	str	r7, [sp, #4]
     70a:	9002      	str	r0, [sp, #8]
     70c:	4649      	mov	r1, r9
     70e:	9103      	str	r1, [sp, #12]
     710:	e011      	b.n	736 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     712:	2120      	movs	r1, #32
     714:	1b49      	subs	r1, r1, r5
     716:	2400      	movs	r4, #0
     718:	3401      	adds	r4, #1
     71a:	40cc      	lsrs	r4, r1
     71c:	e013      	b.n	746 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     71e:	9800      	ldr	r0, [sp, #0]
     720:	9901      	ldr	r1, [sp, #4]
     722:	1a12      	subs	r2, r2, r0
     724:	418b      	sbcs	r3, r1
			q |= bit_shift;
     726:	4659      	mov	r1, fp
     728:	4660      	mov	r0, ip
     72a:	4301      	orrs	r1, r0
     72c:	468b      	mov	fp, r1
     72e:	4651      	mov	r1, sl
     730:	4321      	orrs	r1, r4
     732:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     734:	3d01      	subs	r5, #1
     736:	2d00      	cmp	r5, #0
     738:	db23      	blt.n	782 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     73a:	2120      	movs	r1, #32
     73c:	4249      	negs	r1, r1
     73e:	1869      	adds	r1, r5, r1
     740:	d4e7      	bmi.n	712 <long_division+0x2c>
     742:	2401      	movs	r4, #1
     744:	408c      	lsls	r4, r1
     746:	2101      	movs	r1, #1
     748:	40a9      	lsls	r1, r5
     74a:	468c      	mov	ip, r1
		r = r << 1;
     74c:	1892      	adds	r2, r2, r2
     74e:	415b      	adcs	r3, r3
     750:	0010      	movs	r0, r2
     752:	0019      	movs	r1, r3
		if (n & bit_shift) {
     754:	9e02      	ldr	r6, [sp, #8]
     756:	4667      	mov	r7, ip
     758:	403e      	ands	r6, r7
     75a:	46b1      	mov	r9, r6
     75c:	9e03      	ldr	r6, [sp, #12]
     75e:	4026      	ands	r6, r4
     760:	46b0      	mov	r8, r6
     762:	464e      	mov	r6, r9
     764:	4647      	mov	r7, r8
     766:	433e      	orrs	r6, r7
     768:	d003      	beq.n	772 <long_division+0x8c>
			r |= 0x01;
     76a:	2601      	movs	r6, #1
     76c:	4306      	orrs	r6, r0
     76e:	0032      	movs	r2, r6
     770:	000b      	movs	r3, r1
		if (r >= d) {
     772:	9800      	ldr	r0, [sp, #0]
     774:	9901      	ldr	r1, [sp, #4]
     776:	4299      	cmp	r1, r3
     778:	d8dc      	bhi.n	734 <long_division+0x4e>
     77a:	d1d0      	bne.n	71e <long_division+0x38>
     77c:	4290      	cmp	r0, r2
     77e:	d8d9      	bhi.n	734 <long_division+0x4e>
     780:	e7cd      	b.n	71e <long_division+0x38>
		}
	}

	return q;
}
     782:	4658      	mov	r0, fp
     784:	4651      	mov	r1, sl
     786:	b005      	add	sp, #20
     788:	bc3c      	pop	{r2, r3, r4, r5}
     78a:	4690      	mov	r8, r2
     78c:	4699      	mov	r9, r3
     78e:	46a2      	mov	sl, r4
     790:	46ab      	mov	fp, r5
     792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000794 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     794:	0849      	lsrs	r1, r1, #1
     796:	4281      	cmp	r1, r0
     798:	d201      	bcs.n	79e <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     79a:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     79c:	4770      	bx	lr
     79e:	2300      	movs	r3, #0
     7a0:	e002      	b.n	7a8 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     7a2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     7a4:	3301      	adds	r3, #1
     7a6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     7a8:	4281      	cmp	r1, r0
     7aa:	d2fa      	bcs.n	7a2 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     7ac:	3b01      	subs	r3, #1
     7ae:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     7b0:	2bff      	cmp	r3, #255	; 0xff
     7b2:	d901      	bls.n	7b8 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7b4:	2040      	movs	r0, #64	; 0x40
     7b6:	e7f1      	b.n	79c <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     7b8:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     7ba:	2000      	movs	r0, #0
     7bc:	e7ee      	b.n	79c <_sercom_get_sync_baud_val+0x8>
	...

000007c0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	000c      	movs	r4, r1
     7c6:	0015      	movs	r5, r2
     7c8:	aa06      	add	r2, sp, #24
     7ca:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     7cc:	0002      	movs	r2, r0
     7ce:	434a      	muls	r2, r1
     7d0:	42a2      	cmp	r2, r4
     7d2:	d902      	bls.n	7da <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7d4:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     7d6:	b002      	add	sp, #8
     7d8:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     7da:	2b00      	cmp	r3, #0
     7dc:	d114      	bne.n	808 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     7de:	0002      	movs	r2, r0
     7e0:	0008      	movs	r0, r1
     7e2:	2100      	movs	r1, #0
     7e4:	4e1b      	ldr	r6, [pc, #108]	; (854 <_sercom_get_async_baud_val+0x94>)
     7e6:	47b0      	blx	r6
     7e8:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     7ea:	0022      	movs	r2, r4
     7ec:	2300      	movs	r3, #0
     7ee:	2000      	movs	r0, #0
     7f0:	4c19      	ldr	r4, [pc, #100]	; (858 <_sercom_get_async_baud_val+0x98>)
     7f2:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     7f4:	2200      	movs	r2, #0
     7f6:	2301      	movs	r3, #1
     7f8:	1a12      	subs	r2, r2, r0
     7fa:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7fc:	0c10      	lsrs	r0, r2, #16
     7fe:	041b      	lsls	r3, r3, #16
     800:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     802:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     804:	2000      	movs	r0, #0
     806:	e7e6      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     808:	2b01      	cmp	r3, #1
     80a:	d001      	beq.n	810 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     80c:	2000      	movs	r0, #0
     80e:	e7f8      	b.n	802 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     810:	000a      	movs	r2, r1
     812:	2300      	movs	r3, #0
     814:	2100      	movs	r1, #0
     816:	4e0f      	ldr	r6, [pc, #60]	; (854 <_sercom_get_async_baud_val+0x94>)
     818:	47b0      	blx	r6
     81a:	0002      	movs	r2, r0
     81c:	000b      	movs	r3, r1
     81e:	9200      	str	r2, [sp, #0]
     820:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     822:	0020      	movs	r0, r4
     824:	2100      	movs	r1, #0
     826:	4e0c      	ldr	r6, [pc, #48]	; (858 <_sercom_get_async_baud_val+0x98>)
     828:	47b0      	blx	r6
     82a:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     82c:	2380      	movs	r3, #128	; 0x80
     82e:	019b      	lsls	r3, r3, #6
     830:	4298      	cmp	r0, r3
     832:	d901      	bls.n	838 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     834:	2040      	movs	r0, #64	; 0x40
     836:	e7ce      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     838:	0f61      	lsrs	r1, r4, #29
     83a:	00e0      	lsls	r0, r4, #3
     83c:	9a00      	ldr	r2, [sp, #0]
     83e:	9b01      	ldr	r3, [sp, #4]
     840:	4c05      	ldr	r4, [pc, #20]	; (858 <_sercom_get_async_baud_val+0x98>)
     842:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     844:	b2c0      	uxtb	r0, r0
     846:	00f3      	lsls	r3, r6, #3
     848:	b2db      	uxtb	r3, r3
     84a:	1ac0      	subs	r0, r0, r3
     84c:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     84e:	0340      	lsls	r0, r0, #13
     850:	4330      	orrs	r0, r6
     852:	e7d6      	b.n	802 <_sercom_get_async_baud_val+0x42>
     854:	00004f21 	.word	0x00004f21
     858:	000006e7 	.word	0x000006e7

0000085c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     85c:	b510      	push	{r4, lr}
     85e:	b082      	sub	sp, #8
     860:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <sercom_set_gclk_generator+0x40>)
     864:	781b      	ldrb	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d007      	beq.n	87a <sercom_set_gclk_generator+0x1e>
     86a:	2900      	cmp	r1, #0
     86c:	d105      	bne.n	87a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     86e:	4b0b      	ldr	r3, [pc, #44]	; (89c <sercom_set_gclk_generator+0x40>)
     870:	785b      	ldrb	r3, [r3, #1]
     872:	4283      	cmp	r3, r0
     874:	d010      	beq.n	898 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     876:	201d      	movs	r0, #29
     878:	e00c      	b.n	894 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     87a:	a901      	add	r1, sp, #4
     87c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     87e:	2013      	movs	r0, #19
     880:	4b07      	ldr	r3, [pc, #28]	; (8a0 <sercom_set_gclk_generator+0x44>)
     882:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     884:	2013      	movs	r0, #19
     886:	4b07      	ldr	r3, [pc, #28]	; (8a4 <sercom_set_gclk_generator+0x48>)
     888:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     88a:	4b04      	ldr	r3, [pc, #16]	; (89c <sercom_set_gclk_generator+0x40>)
     88c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     88e:	2201      	movs	r2, #1
     890:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     892:	2000      	movs	r0, #0
}
     894:	b002      	add	sp, #8
     896:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     898:	2000      	movs	r0, #0
     89a:	e7fb      	b.n	894 <sercom_set_gclk_generator+0x38>
     89c:	20000090 	.word	0x20000090
     8a0:	00004791 	.word	0x00004791
     8a4:	00004709 	.word	0x00004709

000008a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8a8:	4b40      	ldr	r3, [pc, #256]	; (9ac <_sercom_get_default_pad+0x104>)
     8aa:	4298      	cmp	r0, r3
     8ac:	d031      	beq.n	912 <_sercom_get_default_pad+0x6a>
     8ae:	d90a      	bls.n	8c6 <_sercom_get_default_pad+0x1e>
     8b0:	4b3f      	ldr	r3, [pc, #252]	; (9b0 <_sercom_get_default_pad+0x108>)
     8b2:	4298      	cmp	r0, r3
     8b4:	d04d      	beq.n	952 <_sercom_get_default_pad+0xaa>
     8b6:	4b3f      	ldr	r3, [pc, #252]	; (9b4 <_sercom_get_default_pad+0x10c>)
     8b8:	4298      	cmp	r0, r3
     8ba:	d05a      	beq.n	972 <_sercom_get_default_pad+0xca>
     8bc:	4b3e      	ldr	r3, [pc, #248]	; (9b8 <_sercom_get_default_pad+0x110>)
     8be:	4298      	cmp	r0, r3
     8c0:	d037      	beq.n	932 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8c2:	2000      	movs	r0, #0
}
     8c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8c6:	4b3d      	ldr	r3, [pc, #244]	; (9bc <_sercom_get_default_pad+0x114>)
     8c8:	4298      	cmp	r0, r3
     8ca:	d00c      	beq.n	8e6 <_sercom_get_default_pad+0x3e>
     8cc:	4b3c      	ldr	r3, [pc, #240]	; (9c0 <_sercom_get_default_pad+0x118>)
     8ce:	4298      	cmp	r0, r3
     8d0:	d1f7      	bne.n	8c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8d2:	2901      	cmp	r1, #1
     8d4:	d05f      	beq.n	996 <_sercom_get_default_pad+0xee>
     8d6:	2900      	cmp	r1, #0
     8d8:	d015      	beq.n	906 <_sercom_get_default_pad+0x5e>
     8da:	2902      	cmp	r1, #2
     8dc:	d015      	beq.n	90a <_sercom_get_default_pad+0x62>
     8de:	2903      	cmp	r1, #3
     8e0:	d015      	beq.n	90e <_sercom_get_default_pad+0x66>
	return 0;
     8e2:	2000      	movs	r0, #0
     8e4:	e7ee      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e6:	2901      	cmp	r1, #1
     8e8:	d053      	beq.n	992 <_sercom_get_default_pad+0xea>
     8ea:	2900      	cmp	r1, #0
     8ec:	d005      	beq.n	8fa <_sercom_get_default_pad+0x52>
     8ee:	2902      	cmp	r1, #2
     8f0:	d005      	beq.n	8fe <_sercom_get_default_pad+0x56>
     8f2:	2903      	cmp	r1, #3
     8f4:	d005      	beq.n	902 <_sercom_get_default_pad+0x5a>
	return 0;
     8f6:	2000      	movs	r0, #0
     8f8:	e7e4      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fa:	4832      	ldr	r0, [pc, #200]	; (9c4 <_sercom_get_default_pad+0x11c>)
     8fc:	e7e2      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     8fe:	4832      	ldr	r0, [pc, #200]	; (9c8 <_sercom_get_default_pad+0x120>)
     900:	e7e0      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     902:	4832      	ldr	r0, [pc, #200]	; (9cc <_sercom_get_default_pad+0x124>)
     904:	e7de      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     906:	2003      	movs	r0, #3
     908:	e7dc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90a:	4831      	ldr	r0, [pc, #196]	; (9d0 <_sercom_get_default_pad+0x128>)
     90c:	e7da      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90e:	4831      	ldr	r0, [pc, #196]	; (9d4 <_sercom_get_default_pad+0x12c>)
     910:	e7d8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     912:	2901      	cmp	r1, #1
     914:	d041      	beq.n	99a <_sercom_get_default_pad+0xf2>
     916:	2900      	cmp	r1, #0
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0x7e>
     91a:	2902      	cmp	r1, #2
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0x82>
     91e:	2903      	cmp	r1, #3
     920:	d005      	beq.n	92e <_sercom_get_default_pad+0x86>
	return 0;
     922:	2000      	movs	r0, #0
     924:	e7ce      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     926:	482c      	ldr	r0, [pc, #176]	; (9d8 <_sercom_get_default_pad+0x130>)
     928:	e7cc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92a:	482c      	ldr	r0, [pc, #176]	; (9dc <_sercom_get_default_pad+0x134>)
     92c:	e7ca      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92e:	482c      	ldr	r0, [pc, #176]	; (9e0 <_sercom_get_default_pad+0x138>)
     930:	e7c8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     932:	2901      	cmp	r1, #1
     934:	d033      	beq.n	99e <_sercom_get_default_pad+0xf6>
     936:	2900      	cmp	r1, #0
     938:	d005      	beq.n	946 <_sercom_get_default_pad+0x9e>
     93a:	2902      	cmp	r1, #2
     93c:	d005      	beq.n	94a <_sercom_get_default_pad+0xa2>
     93e:	2903      	cmp	r1, #3
     940:	d005      	beq.n	94e <_sercom_get_default_pad+0xa6>
	return 0;
     942:	2000      	movs	r0, #0
     944:	e7be      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     946:	4827      	ldr	r0, [pc, #156]	; (9e4 <_sercom_get_default_pad+0x13c>)
     948:	e7bc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94a:	4827      	ldr	r0, [pc, #156]	; (9e8 <_sercom_get_default_pad+0x140>)
     94c:	e7ba      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94e:	4827      	ldr	r0, [pc, #156]	; (9ec <_sercom_get_default_pad+0x144>)
     950:	e7b8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     952:	2901      	cmp	r1, #1
     954:	d025      	beq.n	9a2 <_sercom_get_default_pad+0xfa>
     956:	2900      	cmp	r1, #0
     958:	d005      	beq.n	966 <_sercom_get_default_pad+0xbe>
     95a:	2902      	cmp	r1, #2
     95c:	d005      	beq.n	96a <_sercom_get_default_pad+0xc2>
     95e:	2903      	cmp	r1, #3
     960:	d005      	beq.n	96e <_sercom_get_default_pad+0xc6>
	return 0;
     962:	2000      	movs	r0, #0
     964:	e7ae      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     966:	4822      	ldr	r0, [pc, #136]	; (9f0 <_sercom_get_default_pad+0x148>)
     968:	e7ac      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96a:	4822      	ldr	r0, [pc, #136]	; (9f4 <_sercom_get_default_pad+0x14c>)
     96c:	e7aa      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96e:	4822      	ldr	r0, [pc, #136]	; (9f8 <_sercom_get_default_pad+0x150>)
     970:	e7a8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     972:	2901      	cmp	r1, #1
     974:	d017      	beq.n	9a6 <_sercom_get_default_pad+0xfe>
     976:	2900      	cmp	r1, #0
     978:	d005      	beq.n	986 <_sercom_get_default_pad+0xde>
     97a:	2902      	cmp	r1, #2
     97c:	d005      	beq.n	98a <_sercom_get_default_pad+0xe2>
     97e:	2903      	cmp	r1, #3
     980:	d005      	beq.n	98e <_sercom_get_default_pad+0xe6>
	return 0;
     982:	2000      	movs	r0, #0
     984:	e79e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     986:	481d      	ldr	r0, [pc, #116]	; (9fc <_sercom_get_default_pad+0x154>)
     988:	e79c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98a:	481d      	ldr	r0, [pc, #116]	; (a00 <_sercom_get_default_pad+0x158>)
     98c:	e79a      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98e:	481d      	ldr	r0, [pc, #116]	; (a04 <_sercom_get_default_pad+0x15c>)
     990:	e798      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     992:	481d      	ldr	r0, [pc, #116]	; (a08 <_sercom_get_default_pad+0x160>)
     994:	e796      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     996:	481d      	ldr	r0, [pc, #116]	; (a0c <_sercom_get_default_pad+0x164>)
     998:	e794      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99a:	481d      	ldr	r0, [pc, #116]	; (a10 <_sercom_get_default_pad+0x168>)
     99c:	e792      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99e:	481d      	ldr	r0, [pc, #116]	; (a14 <_sercom_get_default_pad+0x16c>)
     9a0:	e790      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a2:	481d      	ldr	r0, [pc, #116]	; (a18 <_sercom_get_default_pad+0x170>)
     9a4:	e78e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a6:	481d      	ldr	r0, [pc, #116]	; (a1c <_sercom_get_default_pad+0x174>)
     9a8:	e78c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	42001000 	.word	0x42001000
     9b0:	42001800 	.word	0x42001800
     9b4:	42001c00 	.word	0x42001c00
     9b8:	42001400 	.word	0x42001400
     9bc:	42000800 	.word	0x42000800
     9c0:	42000c00 	.word	0x42000c00
     9c4:	00040003 	.word	0x00040003
     9c8:	00060003 	.word	0x00060003
     9cc:	00070003 	.word	0x00070003
     9d0:	001e0003 	.word	0x001e0003
     9d4:	001f0003 	.word	0x001f0003
     9d8:	00080003 	.word	0x00080003
     9dc:	000a0003 	.word	0x000a0003
     9e0:	000b0003 	.word	0x000b0003
     9e4:	00100003 	.word	0x00100003
     9e8:	00120003 	.word	0x00120003
     9ec:	00130003 	.word	0x00130003
     9f0:	000c0003 	.word	0x000c0003
     9f4:	000e0003 	.word	0x000e0003
     9f8:	000f0003 	.word	0x000f0003
     9fc:	00160003 	.word	0x00160003
     a00:	00180003 	.word	0x00180003
     a04:	00190003 	.word	0x00190003
     a08:	00050003 	.word	0x00050003
     a0c:	00010003 	.word	0x00010003
     a10:	00090003 	.word	0x00090003
     a14:	00110003 	.word	0x00110003
     a18:	000d0003 	.word	0x000d0003
     a1c:	00170003 	.word	0x00170003

00000a20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a20:	b530      	push	{r4, r5, lr}
     a22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a24:	4c0a      	ldr	r4, [pc, #40]	; (a50 <_sercom_get_sercom_inst_index+0x30>)
     a26:	466b      	mov	r3, sp
     a28:	0022      	movs	r2, r4
     a2a:	ca32      	ldmia	r2!, {r1, r4, r5}
     a2c:	c332      	stmia	r3!, {r1, r4, r5}
     a2e:	ca32      	ldmia	r2!, {r1, r4, r5}
     a30:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a32:	2300      	movs	r3, #0
     a34:	2b05      	cmp	r3, #5
     a36:	d808      	bhi.n	a4a <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a38:	009a      	lsls	r2, r3, #2
     a3a:	4669      	mov	r1, sp
     a3c:	5852      	ldr	r2, [r2, r1]
     a3e:	4282      	cmp	r2, r0
     a40:	d001      	beq.n	a46 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a42:	3301      	adds	r3, #1
     a44:	e7f6      	b.n	a34 <_sercom_get_sercom_inst_index+0x14>
			return i;
     a46:	b2d8      	uxtb	r0, r3
     a48:	e000      	b.n	a4c <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a4a:	2000      	movs	r0, #0
}
     a4c:	b007      	add	sp, #28
     a4e:	bd30      	pop	{r4, r5, pc}
     a50:	00005840 	.word	0x00005840

00000a54 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a54:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a56:	2202      	movs	r2, #2
     a58:	761a      	strb	r2, [r3, #24]
}
     a5a:	4770      	bx	lr

00000a5c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	b087      	sub	sp, #28
     a60:	0007      	movs	r7, r0
     a62:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a64:	6806      	ldr	r6, [r0, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a66:	ab05      	add	r3, sp, #20
     a68:	2280      	movs	r2, #128	; 0x80
     a6a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a6c:	2200      	movs	r2, #0
     a6e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a70:	2101      	movs	r1, #1
     a72:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     a74:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     a76:	782b      	ldrb	r3, [r5, #0]
     a78:	2b00      	cmp	r3, #0
     a7a:	d101      	bne.n	a80 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a7c:	ab05      	add	r3, sp, #20
     a7e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     a80:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a82:	9301      	str	r3, [sp, #4]
     a84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     a86:	9302      	str	r3, [sp, #8]
     a88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     a8a:	9303      	str	r3, [sp, #12]
     a8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     a8e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a90:	2400      	movs	r4, #0
     a92:	e006      	b.n	aa2 <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a94:	0021      	movs	r1, r4
     a96:	0030      	movs	r0, r6
     a98:	4b3d      	ldr	r3, [pc, #244]	; (b90 <_spi_set_config+0x134>)
     a9a:	4798      	blx	r3
     a9c:	e008      	b.n	ab0 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     a9e:	3401      	adds	r4, #1
     aa0:	b2e4      	uxtb	r4, r4
     aa2:	2c03      	cmp	r4, #3
     aa4:	d80d      	bhi.n	ac2 <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aa6:	00a3      	lsls	r3, r4, #2
     aa8:	aa01      	add	r2, sp, #4
     aaa:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     aac:	2800      	cmp	r0, #0
     aae:	d0f1      	beq.n	a94 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     ab0:	1c43      	adds	r3, r0, #1
     ab2:	d0f4      	beq.n	a9e <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ab4:	a905      	add	r1, sp, #20
     ab6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ab8:	0c00      	lsrs	r0, r0, #16
     aba:	b2c0      	uxtb	r0, r0
     abc:	4b35      	ldr	r3, [pc, #212]	; (b94 <_spi_set_config+0x138>)
     abe:	4798      	blx	r3
     ac0:	e7ed      	b.n	a9e <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     ac2:	782b      	ldrb	r3, [r5, #0]
     ac4:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     ac6:	7c2b      	ldrb	r3, [r5, #16]
     ac8:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     aca:	7cab      	ldrb	r3, [r5, #18]
     acc:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     ace:	7d2b      	ldrb	r3, [r5, #20]
     ad0:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     ad2:	2200      	movs	r2, #0
     ad4:	466b      	mov	r3, sp
     ad6:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     ad8:	782b      	ldrb	r3, [r5, #0]
     ada:	2b01      	cmp	r3, #1
     adc:	d014      	beq.n	b08 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     ade:	782b      	ldrb	r3, [r5, #0]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d127      	bne.n	b34 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     ae4:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     ae6:	8baa      	ldrh	r2, [r5, #28]
     ae8:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     aea:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     aec:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     aee:	7fef      	ldrb	r7, [r5, #31]
     af0:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     af2:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     af4:	4320      	orrs	r0, r4
     af6:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     af8:	2020      	movs	r0, #32
     afa:	5c28      	ldrb	r0, [r5, r0]
     afc:	2800      	cmp	r0, #0
     afe:	d01b      	beq.n	b38 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     b00:	2140      	movs	r1, #64	; 0x40
     b02:	4311      	orrs	r1, r2
     b04:	b289      	uxth	r1, r1
     b06:	e017      	b.n	b38 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b08:	6838      	ldr	r0, [r7, #0]
     b0a:	4b23      	ldr	r3, [pc, #140]	; (b98 <_spi_set_config+0x13c>)
     b0c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b0e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b10:	b2c0      	uxtb	r0, r0
     b12:	4b22      	ldr	r3, [pc, #136]	; (b9c <_spi_set_config+0x140>)
     b14:	4798      	blx	r3
     b16:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     b18:	466b      	mov	r3, sp
     b1a:	1c9a      	adds	r2, r3, #2
     b1c:	69a8      	ldr	r0, [r5, #24]
     b1e:	4b20      	ldr	r3, [pc, #128]	; (ba0 <_spi_set_config+0x144>)
     b20:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     b22:	2800      	cmp	r0, #0
     b24:	d001      	beq.n	b2a <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     b26:	2017      	movs	r0, #23
     b28:	e030      	b.n	b8c <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     b2a:	466b      	mov	r3, sp
     b2c:	3302      	adds	r3, #2
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	7333      	strb	r3, [r6, #12]
     b32:	e7d4      	b.n	ade <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     b34:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     b36:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     b38:	686a      	ldr	r2, [r5, #4]
     b3a:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     b3c:	68aa      	ldr	r2, [r5, #8]
     b3e:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     b40:	68ea      	ldr	r2, [r5, #12]
     b42:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     b44:	7c2a      	ldrb	r2, [r5, #16]
     b46:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b48:	7c69      	ldrb	r1, [r5, #17]
     b4a:	2900      	cmp	r1, #0
     b4c:	d103      	bne.n	b56 <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b4e:	4915      	ldr	r1, [pc, #84]	; (ba4 <_spi_set_config+0x148>)
     b50:	7889      	ldrb	r1, [r1, #2]
     b52:	0789      	lsls	r1, r1, #30
     b54:	d501      	bpl.n	b5a <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b56:	2180      	movs	r1, #128	; 0x80
     b58:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     b5a:	7ca9      	ldrb	r1, [r5, #18]
     b5c:	2900      	cmp	r1, #0
     b5e:	d002      	beq.n	b66 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b60:	2180      	movs	r1, #128	; 0x80
     b62:	0289      	lsls	r1, r1, #10
     b64:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     b66:	7ce9      	ldrb	r1, [r5, #19]
     b68:	2900      	cmp	r1, #0
     b6a:	d002      	beq.n	b72 <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     b6c:	2180      	movs	r1, #128	; 0x80
     b6e:	0089      	lsls	r1, r1, #2
     b70:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     b72:	7d29      	ldrb	r1, [r5, #20]
     b74:	2900      	cmp	r1, #0
     b76:	d002      	beq.n	b7e <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b78:	2180      	movs	r1, #128	; 0x80
     b7a:	0189      	lsls	r1, r1, #6
     b7c:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     b7e:	6831      	ldr	r1, [r6, #0]
     b80:	430b      	orrs	r3, r1
     b82:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     b84:	6873      	ldr	r3, [r6, #4]
     b86:	431a      	orrs	r2, r3
     b88:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     b8a:	2000      	movs	r0, #0
}
     b8c:	b007      	add	sp, #28
     b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b90:	000008a9 	.word	0x000008a9
     b94:	000048c9 	.word	0x000048c9
     b98:	00000a21 	.word	0x00000a21
     b9c:	000047ad 	.word	0x000047ad
     ba0:	00000795 	.word	0x00000795
     ba4:	41002000 	.word	0x41002000

00000ba8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
     baa:	b085      	sub	sp, #20
     bac:	0005      	movs	r5, r0
     bae:	000c      	movs	r4, r1
     bb0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     bb2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     bb4:	680b      	ldr	r3, [r1, #0]
     bb6:	079b      	lsls	r3, r3, #30
     bb8:	d502      	bpl.n	bc0 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     bba:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     bbc:	b005      	add	sp, #20
     bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     bc0:	680b      	ldr	r3, [r1, #0]
     bc2:	07db      	lsls	r3, r3, #31
     bc4:	d501      	bpl.n	bca <spi_init+0x22>
		return STATUS_BUSY;
     bc6:	2005      	movs	r0, #5
     bc8:	e7f8      	b.n	bbc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bca:	0008      	movs	r0, r1
     bcc:	4b28      	ldr	r3, [pc, #160]	; (c70 <spi_init+0xc8>)
     bce:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     bd0:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bd2:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bd4:	2301      	movs	r3, #1
     bd6:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     bd8:	4a26      	ldr	r2, [pc, #152]	; (c74 <spi_init+0xcc>)
     bda:	6a11      	ldr	r1, [r2, #32]
     bdc:	430b      	orrs	r3, r1
     bde:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     be0:	2724      	movs	r7, #36	; 0x24
     be2:	5df3      	ldrb	r3, [r6, r7]
     be4:	a903      	add	r1, sp, #12
     be6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     be8:	b2c3      	uxtb	r3, r0
     bea:	9301      	str	r3, [sp, #4]
     bec:	0018      	movs	r0, r3
     bee:	4b22      	ldr	r3, [pc, #136]	; (c78 <spi_init+0xd0>)
     bf0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bf2:	9801      	ldr	r0, [sp, #4]
     bf4:	4b21      	ldr	r3, [pc, #132]	; (c7c <spi_init+0xd4>)
     bf6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bf8:	5df0      	ldrb	r0, [r6, r7]
     bfa:	2100      	movs	r1, #0
     bfc:	4b20      	ldr	r3, [pc, #128]	; (c80 <spi_init+0xd8>)
     bfe:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     c00:	7833      	ldrb	r3, [r6, #0]
     c02:	2b01      	cmp	r3, #1
     c04:	d008      	beq.n	c18 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     c06:	7833      	ldrb	r3, [r6, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d103      	bne.n	c14 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     c0c:	6823      	ldr	r3, [r4, #0]
     c0e:	2208      	movs	r2, #8
     c10:	4313      	orrs	r3, r2
     c12:	6023      	str	r3, [r4, #0]
{
     c14:	2300      	movs	r3, #0
     c16:	e00b      	b.n	c30 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     c18:	6823      	ldr	r3, [r4, #0]
     c1a:	220c      	movs	r2, #12
     c1c:	4313      	orrs	r3, r2
     c1e:	6023      	str	r3, [r4, #0]
     c20:	e7f1      	b.n	c06 <spi_init+0x5e>
		module->callback[i]        = NULL;
     c22:	1c9a      	adds	r2, r3, #2
     c24:	0092      	lsls	r2, r2, #2
     c26:	18aa      	adds	r2, r5, r2
     c28:	2100      	movs	r1, #0
     c2a:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     c2c:	3301      	adds	r3, #1
     c2e:	b2db      	uxtb	r3, r3
     c30:	2b06      	cmp	r3, #6
     c32:	d9f6      	bls.n	c22 <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     c34:	2200      	movs	r2, #0
     c36:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     c38:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     c3a:	2300      	movs	r3, #0
     c3c:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     c3e:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     c40:	3236      	adds	r2, #54	; 0x36
     c42:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     c44:	3201      	adds	r2, #1
     c46:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     c48:	3201      	adds	r2, #1
     c4a:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     c4c:	3a35      	subs	r2, #53	; 0x35
     c4e:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     c50:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     c52:	6828      	ldr	r0, [r5, #0]
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <spi_init+0xc8>)
     c56:	4798      	blx	r3
     c58:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     c5a:	490a      	ldr	r1, [pc, #40]	; (c84 <spi_init+0xdc>)
     c5c:	4b0a      	ldr	r3, [pc, #40]	; (c88 <spi_init+0xe0>)
     c5e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c60:	00a4      	lsls	r4, r4, #2
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <spi_init+0xe4>)
     c64:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     c66:	0031      	movs	r1, r6
     c68:	0028      	movs	r0, r5
     c6a:	4b09      	ldr	r3, [pc, #36]	; (c90 <spi_init+0xe8>)
     c6c:	4798      	blx	r3
     c6e:	e7a5      	b.n	bbc <spi_init+0x14>
     c70:	00000a21 	.word	0x00000a21
     c74:	40000400 	.word	0x40000400
     c78:	00004791 	.word	0x00004791
     c7c:	00004709 	.word	0x00004709
     c80:	0000085d 	.word	0x0000085d
     c84:	00001105 	.word	0x00001105
     c88:	000040d5 	.word	0x000040d5
     c8c:	20000a14 	.word	0x20000a14
     c90:	00000a5d 	.word	0x00000a5d

00000c94 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c96:	0004      	movs	r4, r0
     c98:	000e      	movs	r6, r1
     c9a:	0017      	movs	r7, r2
     c9c:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     c9e:	2338      	movs	r3, #56	; 0x38
     ca0:	5cc3      	ldrb	r3, [r0, r3]
     ca2:	2b05      	cmp	r3, #5
     ca4:	d06d      	beq.n	d82 <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     ca6:	2a00      	cmp	r2, #0
     ca8:	d101      	bne.n	cae <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     caa:	2217      	movs	r2, #23
     cac:	e06a      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     cae:	79c3      	ldrb	r3, [r0, #7]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d101      	bne.n	cb8 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     cb4:	221c      	movs	r2, #28
     cb6:	e065      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     cb8:	7943      	ldrb	r3, [r0, #5]
     cba:	2b00      	cmp	r3, #0
     cbc:	d103      	bne.n	cc6 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cbe:	6803      	ldr	r3, [r0, #0]
     cc0:	7e1b      	ldrb	r3, [r3, #24]
     cc2:	079b      	lsls	r3, r3, #30
     cc4:	d401      	bmi.n	cca <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     cc6:	2000      	movs	r0, #0
     cc8:	e037      	b.n	d3a <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     cca:	4b2f      	ldr	r3, [pc, #188]	; (d88 <spi_read_buffer_wait+0xf4>)
     ccc:	4798      	blx	r3
     cce:	e7fa      	b.n	cc6 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cd0:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     cd2:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     cd4:	07d2      	lsls	r2, r2, #31
     cd6:	d5fb      	bpl.n	cd0 <spi_read_buffer_wait+0x3c>
     cd8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     cda:	07d2      	lsls	r2, r2, #31
     cdc:	d534      	bpl.n	d48 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     cde:	05ea      	lsls	r2, r5, #23
     ce0:	0dd2      	lsrs	r2, r2, #23
     ce2:	629a      	str	r2, [r3, #40]	; 0x28
     ce4:	e030      	b.n	d48 <spi_read_buffer_wait+0xb4>
     ce6:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ce8:	4a28      	ldr	r2, [pc, #160]	; (d8c <spi_read_buffer_wait+0xf8>)
     cea:	4293      	cmp	r3, r2
     cec:	d805      	bhi.n	cfa <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cee:	6822      	ldr	r2, [r4, #0]
     cf0:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     cf2:	0752      	lsls	r2, r2, #29
     cf4:	d401      	bmi.n	cfa <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     cf6:	3301      	adds	r3, #1
     cf8:	e7f6      	b.n	ce8 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     cfa:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cfc:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     cfe:	0792      	lsls	r2, r2, #30
     d00:	d404      	bmi.n	d0c <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d02:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     d04:	075b      	lsls	r3, r3, #29
     d06:	d422      	bmi.n	d4e <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     d08:	2212      	movs	r2, #18
     d0a:	e03b      	b.n	d84 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     d0c:	0020      	movs	r0, r4
     d0e:	4b1e      	ldr	r3, [pc, #120]	; (d88 <spi_read_buffer_wait+0xf4>)
     d10:	4798      	blx	r3
				return STATUS_ABORTED;
     d12:	2204      	movs	r2, #4
     d14:	e036      	b.n	d84 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     d16:	2200      	movs	r2, #0
     d18:	e026      	b.n	d68 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d1a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d1c:	05ff      	lsls	r7, r7, #23
     d1e:	0dff      	lsrs	r7, r7, #23
     d20:	e001      	b.n	d26 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     d22:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     d24:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     d26:	2a00      	cmp	r2, #0
     d28:	d12c      	bne.n	d84 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     d2a:	1c43      	adds	r3, r0, #1
     d2c:	b29b      	uxth	r3, r3
     d2e:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d30:	79a2      	ldrb	r2, [r4, #6]
     d32:	2a01      	cmp	r2, #1
     d34:	d01e      	beq.n	d74 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     d36:	0018      	movs	r0, r3
     d38:	000f      	movs	r7, r1
	while (length--) {
     d3a:	1e79      	subs	r1, r7, #1
     d3c:	b289      	uxth	r1, r1
     d3e:	2f00      	cmp	r7, #0
     d40:	d01d      	beq.n	d7e <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     d42:	7963      	ldrb	r3, [r4, #5]
     d44:	2b01      	cmp	r3, #1
     d46:	d0c3      	beq.n	cd0 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     d48:	7963      	ldrb	r3, [r4, #5]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d0cb      	beq.n	ce6 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d4e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d50:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     d52:	0752      	lsls	r2, r2, #29
     d54:	d5fb      	bpl.n	d4e <spi_read_buffer_wait+0xba>
     d56:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     d58:	0752      	lsls	r2, r2, #29
     d5a:	d5e2      	bpl.n	d22 <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d5c:	8b5a      	ldrh	r2, [r3, #26]
     d5e:	0752      	lsls	r2, r2, #29
     d60:	d5d9      	bpl.n	d16 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d62:	2204      	movs	r2, #4
     d64:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     d66:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d68:	79a7      	ldrb	r7, [r4, #6]
     d6a:	2f01      	cmp	r7, #1
     d6c:	d0d5      	beq.n	d1a <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d70:	b2ff      	uxtb	r7, r7
     d72:	e7d8      	b.n	d26 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     d74:	3002      	adds	r0, #2
     d76:	0a3f      	lsrs	r7, r7, #8
     d78:	54f7      	strb	r7, [r6, r3]
     d7a:	b283      	uxth	r3, r0
     d7c:	e7db      	b.n	d36 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     d7e:	2200      	movs	r2, #0
     d80:	e000      	b.n	d84 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     d82:	2205      	movs	r2, #5
}
     d84:	0010      	movs	r0, r2
     d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d88:	00000a55 	.word	0x00000a55
     d8c:	00002710 	.word	0x00002710

00000d90 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     d90:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d92:	7943      	ldrb	r3, [r0, #5]
     d94:	2b01      	cmp	r3, #1
     d96:	d001      	beq.n	d9c <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     d98:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     d9a:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     d9c:	7a03      	ldrb	r3, [r0, #8]
     d9e:	2b00      	cmp	r3, #0
     da0:	d16c      	bne.n	e7c <spi_select_slave+0xec>
		if (select) {
     da2:	2a00      	cmp	r2, #0
     da4:	d058      	beq.n	e58 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     da6:	784b      	ldrb	r3, [r1, #1]
     da8:	2b00      	cmp	r3, #0
     daa:	d043      	beq.n	e34 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dac:	6803      	ldr	r3, [r0, #0]
     dae:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     db0:	07db      	lsls	r3, r3, #31
     db2:	d411      	bmi.n	dd8 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     db4:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     db6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     db8:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     dba:	2900      	cmp	r1, #0
     dbc:	d10a      	bne.n	dd4 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     dbe:	01db      	lsls	r3, r3, #7
     dc0:	4931      	ldr	r1, [pc, #196]	; (e88 <spi_select_slave+0xf8>)
     dc2:	468c      	mov	ip, r1
     dc4:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dc6:	211f      	movs	r1, #31
     dc8:	4011      	ands	r1, r2
     dca:	2201      	movs	r2, #1
     dcc:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     dce:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     dd0:	2005      	movs	r0, #5
     dd2:	e7e2      	b.n	d9a <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
     dd4:	2300      	movs	r3, #0
     dd6:	e7f6      	b.n	dc6 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     dd8:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     dda:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     ddc:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     dde:	2c00      	cmp	r4, #0
     de0:	d104      	bne.n	dec <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     de2:	01db      	lsls	r3, r3, #7
     de4:	4c28      	ldr	r4, [pc, #160]	; (e88 <spi_select_slave+0xf8>)
     de6:	46a4      	mov	ip, r4
     de8:	4463      	add	r3, ip
     dea:	e000      	b.n	dee <spi_select_slave+0x5e>
		return NULL;
     dec:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dee:	241f      	movs	r4, #31
     df0:	4014      	ands	r4, r2
     df2:	2201      	movs	r2, #1
     df4:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     df6:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     df8:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     dfa:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dfc:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     dfe:	07c9      	lsls	r1, r1, #31
     e00:	d500      	bpl.n	e04 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e02:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     e04:	79c3      	ldrb	r3, [r0, #7]
     e06:	2b00      	cmp	r3, #0
     e08:	d13a      	bne.n	e80 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e0a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e0c:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     e0e:	0752      	lsls	r2, r2, #29
     e10:	d5fb      	bpl.n	e0a <spi_select_slave+0x7a>
     e12:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     e14:	0752      	lsls	r2, r2, #29
     e16:	d535      	bpl.n	e84 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e18:	8b5a      	ldrh	r2, [r3, #26]
     e1a:	0752      	lsls	r2, r2, #29
     e1c:	d501      	bpl.n	e22 <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     e1e:	2204      	movs	r2, #4
     e20:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e22:	7982      	ldrb	r2, [r0, #6]
     e24:	2a01      	cmp	r2, #1
     e26:	d002      	beq.n	e2e <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     e2a:	2000      	movs	r0, #0
     e2c:	e7b5      	b.n	d9a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e30:	2000      	movs	r0, #0
     e32:	e7b2      	b.n	d9a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     e34:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e36:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e38:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e3a:	2900      	cmp	r1, #0
     e3c:	d10a      	bne.n	e54 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     e3e:	01db      	lsls	r3, r3, #7
     e40:	4911      	ldr	r1, [pc, #68]	; (e88 <spi_select_slave+0xf8>)
     e42:	468c      	mov	ip, r1
     e44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e46:	211f      	movs	r1, #31
     e48:	4011      	ands	r1, r2
     e4a:	2201      	movs	r2, #1
     e4c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     e4e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     e50:	2000      	movs	r0, #0
     e52:	e7a2      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e54:	2300      	movs	r3, #0
     e56:	e7f6      	b.n	e46 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     e58:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e5a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e5c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e5e:	2900      	cmp	r1, #0
     e60:	d10a      	bne.n	e78 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     e62:	01db      	lsls	r3, r3, #7
     e64:	4908      	ldr	r1, [pc, #32]	; (e88 <spi_select_slave+0xf8>)
     e66:	468c      	mov	ip, r1
     e68:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e6a:	211f      	movs	r1, #31
     e6c:	4011      	ands	r1, r2
     e6e:	2201      	movs	r2, #1
     e70:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     e72:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     e74:	2000      	movs	r0, #0
     e76:	e790      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e78:	2300      	movs	r3, #0
     e7a:	e7f6      	b.n	e6a <spi_select_slave+0xda>
     e7c:	2000      	movs	r0, #0
     e7e:	e78c      	b.n	d9a <spi_select_slave+0xa>
     e80:	2000      	movs	r0, #0
     e82:	e78a      	b.n	d9a <spi_select_slave+0xa>
     e84:	2000      	movs	r0, #0
     e86:	e788      	b.n	d9a <spi_select_slave+0xa>
     e88:	41004400 	.word	0x41004400

00000e8c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8e:	46d6      	mov	lr, sl
     e90:	464f      	mov	r7, r9
     e92:	4646      	mov	r6, r8
     e94:	b5c0      	push	{r6, r7, lr}
     e96:	b082      	sub	sp, #8
     e98:	0004      	movs	r4, r0
     e9a:	468a      	mov	sl, r1
     e9c:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e9e:	2338      	movs	r3, #56	; 0x38
     ea0:	5cc3      	ldrb	r3, [r0, r3]
     ea2:	2b05      	cmp	r3, #5
     ea4:	d100      	bne.n	ea8 <spi_write_buffer_wait+0x1c>
     ea6:	e0d8      	b.n	105a <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     ea8:	2a00      	cmp	r2, #0
     eaa:	d101      	bne.n	eb0 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     eac:	2017      	movs	r0, #23
     eae:	e0d5      	b.n	105c <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     eb0:	7943      	ldrb	r3, [r0, #5]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d103      	bne.n	ebe <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     eb6:	6803      	ldr	r3, [r0, #0]
     eb8:	7e1b      	ldrb	r3, [r3, #24]
     eba:	079b      	lsls	r3, r3, #30
     ebc:	d402      	bmi.n	ec4 <spi_write_buffer_wait+0x38>
     ebe:	46bc      	mov	ip, r7
     ec0:	2600      	movs	r6, #0
     ec2:	e025      	b.n	f10 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     ec4:	4b6a      	ldr	r3, [pc, #424]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ec6:	4798      	blx	r3
     ec8:	e7f9      	b.n	ebe <spi_write_buffer_wait+0x32>
     eca:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ecc:	4a69      	ldr	r2, [pc, #420]	; (1074 <spi_write_buffer_wait+0x1e8>)
     ece:	4293      	cmp	r3, r2
     ed0:	d805      	bhi.n	ede <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ed2:	6822      	ldr	r2, [r4, #0]
     ed4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     ed6:	07d2      	lsls	r2, r2, #31
     ed8:	d401      	bmi.n	ede <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     eda:	3301      	adds	r3, #1
     edc:	e7f6      	b.n	ecc <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ede:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ee0:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     ee2:	0792      	lsls	r2, r2, #30
     ee4:	d404      	bmi.n	ef0 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ee6:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     ee8:	07db      	lsls	r3, r3, #31
     eea:	d418      	bmi.n	f1e <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     eec:	2012      	movs	r0, #18
     eee:	e0b5      	b.n	105c <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     ef0:	0020      	movs	r0, r4
     ef2:	4b5f      	ldr	r3, [pc, #380]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ef4:	4798      	blx	r3
				return STATUS_ABORTED;
     ef6:	2004      	movs	r0, #4
     ef8:	e0b0      	b.n	105c <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     efa:	3602      	adds	r6, #2
     efc:	b2b6      	uxth	r6, r6
     efe:	4652      	mov	r2, sl
     f00:	5dd2      	ldrb	r2, [r2, r7]
     f02:	0212      	lsls	r2, r2, #8
     f04:	4302      	orrs	r2, r0
     f06:	e017      	b.n	f38 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     f08:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     f0a:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     f0c:	2b00      	cmp	r3, #0
     f0e:	d11a      	bne.n	f46 <spi_write_buffer_wait+0xba>
	while (length--) {
     f10:	1e79      	subs	r1, r7, #1
     f12:	b289      	uxth	r1, r1
     f14:	2f00      	cmp	r7, #0
     f16:	d06c      	beq.n	ff2 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     f18:	7963      	ldrb	r3, [r4, #5]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d0d5      	beq.n	eca <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f1e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f20:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     f22:	07d2      	lsls	r2, r2, #31
     f24:	d5fb      	bpl.n	f1e <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     f26:	1c77      	adds	r7, r6, #1
     f28:	b2bf      	uxth	r7, r7
     f2a:	4652      	mov	r2, sl
     f2c:	5d90      	ldrb	r0, [r2, r6]
     f2e:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f30:	79a5      	ldrb	r5, [r4, #6]
     f32:	2d01      	cmp	r5, #1
     f34:	d0e1      	beq.n	efa <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     f36:	003e      	movs	r6, r7
     f38:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     f3a:	07f8      	lsls	r0, r7, #31
     f3c:	d5e4      	bpl.n	f08 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f3e:	05d2      	lsls	r2, r2, #23
     f40:	0dd2      	lsrs	r2, r2, #23
     f42:	629a      	str	r2, [r3, #40]	; 0x28
     f44:	e7e0      	b.n	f08 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     f46:	7963      	ldrb	r3, [r4, #5]
     f48:	2b00      	cmp	r3, #0
     f4a:	d040      	beq.n	fce <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f4c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f4e:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     f50:	0752      	lsls	r2, r2, #29
     f52:	d5fb      	bpl.n	f4c <spi_write_buffer_wait+0xc0>
     f54:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f56:	0752      	lsls	r2, r2, #29
     f58:	d508      	bpl.n	f6c <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f5a:	8b5a      	ldrh	r2, [r3, #26]
     f5c:	0752      	lsls	r2, r2, #29
     f5e:	d501      	bpl.n	f64 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f60:	2204      	movs	r2, #4
     f62:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f64:	79a2      	ldrb	r2, [r4, #6]
     f66:	2a01      	cmp	r2, #1
     f68:	d041      	beq.n	fee <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     f6c:	4660      	mov	r0, ip
     f6e:	3801      	subs	r0, #1
     f70:	b283      	uxth	r3, r0
     f72:	469c      	mov	ip, r3
     f74:	000f      	movs	r7, r1
     f76:	e7cb      	b.n	f10 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
     f78:	3602      	adds	r6, #2
     f7a:	4655      	mov	r5, sl
     f7c:	5c2f      	ldrb	r7, [r5, r0]
     f7e:	023f      	lsls	r7, r7, #8
     f80:	4640      	mov	r0, r8
     f82:	4307      	orrs	r7, r0
     f84:	b2b0      	uxth	r0, r6
     f86:	e01b      	b.n	fc0 <spi_write_buffer_wait+0x134>
						length--;
     f88:	3901      	subs	r1, #1
     f8a:	b289      	uxth	r1, r1
     f8c:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f8e:	6822      	ldr	r2, [r4, #0]
     f90:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     f92:	0752      	lsls	r2, r2, #29
     f94:	d41d      	bmi.n	fd2 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f96:	3301      	adds	r3, #1
     f98:	4a36      	ldr	r2, [pc, #216]	; (1074 <spi_write_buffer_wait+0x1e8>)
     f9a:	4293      	cmp	r3, r2
     f9c:	d819      	bhi.n	fd2 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
     f9e:	2900      	cmp	r1, #0
     fa0:	d0f5      	beq.n	f8e <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fa2:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fa4:	7e17      	ldrb	r7, [r2, #24]
     fa6:	07f8      	lsls	r0, r7, #31
     fa8:	d5f1      	bpl.n	f8e <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
     faa:	1c70      	adds	r0, r6, #1
     fac:	b280      	uxth	r0, r0
     fae:	4655      	mov	r5, sl
     fb0:	5dad      	ldrb	r5, [r5, r6]
     fb2:	46a8      	mov	r8, r5
     fb4:	466f      	mov	r7, sp
     fb6:	80fd      	strh	r5, [r7, #6]
     fb8:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fba:	79a5      	ldrb	r5, [r4, #6]
     fbc:	2d01      	cmp	r5, #1
     fbe:	d0db      	beq.n	f78 <spi_write_buffer_wait+0xec>
     fc0:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     fc2:	07f5      	lsls	r5, r6, #31
     fc4:	d5e0      	bpl.n	f88 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fc6:	05ff      	lsls	r7, r7, #23
     fc8:	0dff      	lsrs	r7, r7, #23
     fca:	6297      	str	r7, [r2, #40]	; 0x28
     fcc:	e7dc      	b.n	f88 <spi_write_buffer_wait+0xfc>
     fce:	2300      	movs	r3, #0
     fd0:	e7e2      	b.n	f98 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fd2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     fd4:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
     fd6:	0792      	lsls	r2, r2, #30
     fd8:	d404      	bmi.n	fe4 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fda:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     fdc:	075b      	lsls	r3, r3, #29
     fde:	d4b5      	bmi.n	f4c <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
     fe0:	2012      	movs	r0, #18
     fe2:	e03b      	b.n	105c <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
     fe4:	0020      	movs	r0, r4
     fe6:	4b22      	ldr	r3, [pc, #136]	; (1070 <spi_write_buffer_wait+0x1e4>)
     fe8:	4798      	blx	r3
					return STATUS_ABORTED;
     fea:	2004      	movs	r0, #4
     fec:	e036      	b.n	105c <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ff0:	e7bc      	b.n	f6c <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     ff2:	7962      	ldrb	r2, [r4, #5]
     ff4:	2a01      	cmp	r2, #1
     ff6:	d006      	beq.n	1006 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     ff8:	2a00      	cmp	r2, #0
     ffa:	d135      	bne.n	1068 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
     ffc:	79e3      	ldrb	r3, [r4, #7]
     ffe:	2b00      	cmp	r3, #0
    1000:	d11a      	bne.n	1038 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1002:	2000      	movs	r0, #0
    1004:	e02a      	b.n	105c <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1006:	6823      	ldr	r3, [r4, #0]
    1008:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    100a:	079b      	lsls	r3, r3, #30
    100c:	d5fb      	bpl.n	1006 <spi_write_buffer_wait+0x17a>
    100e:	e7f3      	b.n	ff8 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1010:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1012:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1014:	0752      	lsls	r2, r2, #29
    1016:	d529      	bpl.n	106c <spi_write_buffer_wait+0x1e0>
    1018:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    101a:	0752      	lsls	r2, r2, #29
    101c:	d508      	bpl.n	1030 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    101e:	8b5a      	ldrh	r2, [r3, #26]
    1020:	0752      	lsls	r2, r2, #29
    1022:	d501      	bpl.n	1028 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1024:	2204      	movs	r2, #4
    1026:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1028:	79a2      	ldrb	r2, [r4, #6]
    102a:	2a01      	cmp	r2, #1
    102c:	d011      	beq.n	1052 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    1030:	4660      	mov	r0, ip
    1032:	3801      	subs	r0, #1
    1034:	b283      	uxth	r3, r0
    1036:	469c      	mov	ip, r3
			while (flush_length) {
    1038:	4663      	mov	r3, ip
    103a:	2b00      	cmp	r3, #0
    103c:	d00b      	beq.n	1056 <spi_write_buffer_wait+0x1ca>
    103e:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1040:	4a0c      	ldr	r2, [pc, #48]	; (1074 <spi_write_buffer_wait+0x1e8>)
    1042:	4293      	cmp	r3, r2
    1044:	d8e4      	bhi.n	1010 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1046:	6822      	ldr	r2, [r4, #0]
    1048:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    104a:	0752      	lsls	r2, r2, #29
    104c:	d4e0      	bmi.n	1010 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    104e:	3301      	adds	r3, #1
    1050:	e7f6      	b.n	1040 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1054:	e7ec      	b.n	1030 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1056:	2000      	movs	r0, #0
    1058:	e000      	b.n	105c <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    105a:	2005      	movs	r0, #5
}
    105c:	b002      	add	sp, #8
    105e:	bc1c      	pop	{r2, r3, r4}
    1060:	4690      	mov	r8, r2
    1062:	4699      	mov	r9, r3
    1064:	46a2      	mov	sl, r4
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1068:	2000      	movs	r0, #0
    106a:	e7f7      	b.n	105c <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    106c:	2012      	movs	r0, #18
    106e:	e7f5      	b.n	105c <spi_write_buffer_wait+0x1d0>
    1070:	00000a55 	.word	0x00000a55
    1074:	00002710 	.word	0x00002710

00001078 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1078:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    107a:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    107c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    107e:	780a      	ldrb	r2, [r1, #0]
    1080:	b2d2      	uxtb	r2, r2
    1082:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1084:	1c4c      	adds	r4, r1, #1
    1086:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1088:	7986      	ldrb	r6, [r0, #6]
    108a:	2e01      	cmp	r6, #1
    108c:	d007      	beq.n	109e <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    108e:	05db      	lsls	r3, r3, #23
    1090:	0ddb      	lsrs	r3, r3, #23
    1092:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1094:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1096:	3b01      	subs	r3, #1
    1098:	b29b      	uxth	r3, r3
    109a:	8683      	strh	r3, [r0, #52]	; 0x34
}
    109c:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    109e:	784b      	ldrb	r3, [r1, #1]
    10a0:	021b      	lsls	r3, r3, #8
    10a2:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    10a4:	1c8c      	adds	r4, r1, #2
    10a6:	62c4      	str	r4, [r0, #44]	; 0x2c
    10a8:	e7f1      	b.n	108e <_spi_write+0x16>
	...

000010ac <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10ac:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    10ae:	4a04      	ldr	r2, [pc, #16]	; (10c0 <_spi_write_dummy+0x14>)
    10b0:	8812      	ldrh	r2, [r2, #0]
    10b2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    10b4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    10b6:	3b01      	subs	r3, #1
    10b8:	b29b      	uxth	r3, r3
    10ba:	8643      	strh	r3, [r0, #50]	; 0x32
}
    10bc:	4770      	bx	lr
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	20000454 	.word	0x20000454

000010c4 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10c4:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    10c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    10c8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    10ca:	3b01      	subs	r3, #1
    10cc:	b29b      	uxth	r3, r3
    10ce:	8643      	strh	r3, [r0, #50]	; 0x32
}
    10d0:	4770      	bx	lr

000010d2 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10d2:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    10d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10d6:	05db      	lsls	r3, r3, #23
    10d8:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    10da:	b2da      	uxtb	r2, r3
    10dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
    10de:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    10e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
    10e2:	1c51      	adds	r1, r2, #1
    10e4:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10e6:	7981      	ldrb	r1, [r0, #6]
    10e8:	2901      	cmp	r1, #1
    10ea:	d004      	beq.n	10f6 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    10ec:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    10ee:	3b01      	subs	r3, #1
    10f0:	b29b      	uxth	r3, r3
    10f2:	8603      	strh	r3, [r0, #48]	; 0x30
}
    10f4:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    10f6:	0a1b      	lsrs	r3, r3, #8
    10f8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    10fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    10fc:	3301      	adds	r3, #1
    10fe:	6283      	str	r3, [r0, #40]	; 0x28
    1100:	e7f4      	b.n	10ec <_spi_read+0x1a>
	...

00001104 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1106:	0080      	lsls	r0, r0, #2
    1108:	4b6b      	ldr	r3, [pc, #428]	; (12b8 <_spi_interrupt_handler+0x1b4>)
    110a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    110c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    110e:	2337      	movs	r3, #55	; 0x37
    1110:	5ce3      	ldrb	r3, [r4, r3]
    1112:	2236      	movs	r2, #54	; 0x36
    1114:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    1116:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1118:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    111a:	7db5      	ldrb	r5, [r6, #22]
    111c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    111e:	07eb      	lsls	r3, r5, #31
    1120:	d516      	bpl.n	1150 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1122:	7963      	ldrb	r3, [r4, #5]
    1124:	2b01      	cmp	r3, #1
    1126:	d04d      	beq.n	11c4 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1128:	7963      	ldrb	r3, [r4, #5]
		if (0
    112a:	2b01      	cmp	r3, #1
    112c:	d057      	beq.n	11de <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    112e:	2b00      	cmp	r3, #0
    1130:	d10e      	bne.n	1150 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    1132:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1134:	2b00      	cmp	r3, #0
    1136:	d00b      	beq.n	1150 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1138:	0020      	movs	r0, r4
    113a:	4b60      	ldr	r3, [pc, #384]	; (12bc <_spi_interrupt_handler+0x1b8>)
    113c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    113e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1140:	b29b      	uxth	r3, r3
    1142:	2b00      	cmp	r3, #0
    1144:	d104      	bne.n	1150 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1146:	3301      	adds	r3, #1
    1148:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    114a:	7a63      	ldrb	r3, [r4, #9]
    114c:	2b01      	cmp	r3, #1
    114e:	d04a      	beq.n	11e6 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1150:	076b      	lsls	r3, r5, #29
    1152:	d511      	bpl.n	1178 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1154:	8b73      	ldrh	r3, [r6, #26]
    1156:	075b      	lsls	r3, r3, #29
    1158:	d54f      	bpl.n	11fa <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    115a:	7a63      	ldrb	r3, [r4, #9]
    115c:	2b01      	cmp	r3, #1
    115e:	d008      	beq.n	1172 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1160:	221e      	movs	r2, #30
    1162:	2338      	movs	r3, #56	; 0x38
    1164:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1166:	3b35      	subs	r3, #53	; 0x35
    1168:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    116a:	3302      	adds	r3, #2
    116c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    116e:	073b      	lsls	r3, r7, #28
    1170:	d43f      	bmi.n	11f2 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1172:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1174:	2304      	movs	r3, #4
    1176:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1178:	07ab      	lsls	r3, r5, #30
    117a:	d513      	bpl.n	11a4 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    117c:	7963      	ldrb	r3, [r4, #5]
    117e:	2b00      	cmp	r3, #0
    1180:	d10d      	bne.n	119e <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1182:	3307      	adds	r3, #7
    1184:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1186:	3b05      	subs	r3, #5
    1188:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    118a:	3301      	adds	r3, #1
    118c:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    118e:	2300      	movs	r3, #0
    1190:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1192:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1194:	3338      	adds	r3, #56	; 0x38
    1196:	2200      	movs	r2, #0
    1198:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    119a:	06fb      	lsls	r3, r7, #27
    119c:	d464      	bmi.n	1268 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    119e:	7963      	ldrb	r3, [r4, #5]
    11a0:	2b01      	cmp	r3, #1
    11a2:	d065      	beq.n	1270 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    11a4:	072b      	lsls	r3, r5, #28
    11a6:	d508      	bpl.n	11ba <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    11a8:	7963      	ldrb	r3, [r4, #5]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d105      	bne.n	11ba <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    11ae:	3308      	adds	r3, #8
    11b0:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    11b2:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    11b4:	06bb      	lsls	r3, r7, #26
    11b6:	d500      	bpl.n	11ba <_spi_interrupt_handler+0xb6>
    11b8:	e070      	b.n	129c <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    11ba:	b26d      	sxtb	r5, r5
    11bc:	2d00      	cmp	r5, #0
    11be:	da00      	bge.n	11c2 <_spi_interrupt_handler+0xbe>
    11c0:	e070      	b.n	12a4 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    11c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    11c4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    11c6:	2b00      	cmp	r3, #0
    11c8:	d1ae      	bne.n	1128 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    11ca:	0020      	movs	r0, r4
    11cc:	4b3c      	ldr	r3, [pc, #240]	; (12c0 <_spi_interrupt_handler+0x1bc>)
    11ce:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    11d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    11d2:	b29b      	uxth	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	d1a7      	bne.n	1128 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    11d8:	3301      	adds	r3, #1
    11da:	7533      	strb	r3, [r6, #20]
    11dc:	e7a4      	b.n	1128 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    11de:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    11e0:	2a00      	cmp	r2, #0
    11e2:	d1a9      	bne.n	1138 <_spi_interrupt_handler+0x34>
    11e4:	e7a3      	b.n	112e <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    11e6:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    11e8:	2b00      	cmp	r3, #0
    11ea:	d1b1      	bne.n	1150 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    11ec:	3302      	adds	r3, #2
    11ee:	75b3      	strb	r3, [r6, #22]
    11f0:	e7ae      	b.n	1150 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    11f2:	0020      	movs	r0, r4
    11f4:	69a3      	ldr	r3, [r4, #24]
    11f6:	4798      	blx	r3
    11f8:	e7bb      	b.n	1172 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    11fa:	7a63      	ldrb	r3, [r4, #9]
    11fc:	2b01      	cmp	r3, #1
    11fe:	d017      	beq.n	1230 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    1200:	0020      	movs	r0, r4
    1202:	4b30      	ldr	r3, [pc, #192]	; (12c4 <_spi_interrupt_handler+0x1c0>)
    1204:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    1206:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1208:	b29b      	uxth	r3, r3
    120a:	2b00      	cmp	r3, #0
    120c:	d1b4      	bne.n	1178 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    120e:	2200      	movs	r2, #0
    1210:	3338      	adds	r3, #56	; 0x38
    1212:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1214:	3b34      	subs	r3, #52	; 0x34
    1216:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1218:	7a63      	ldrb	r3, [r4, #9]
    121a:	2b02      	cmp	r3, #2
    121c:	d01d      	beq.n	125a <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    121e:	7a63      	ldrb	r3, [r4, #9]
    1220:	2b00      	cmp	r3, #0
    1222:	d1a9      	bne.n	1178 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1224:	07bb      	lsls	r3, r7, #30
    1226:	d5a7      	bpl.n	1178 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1228:	0020      	movs	r0, r4
    122a:	6923      	ldr	r3, [r4, #16]
    122c:	4798      	blx	r3
    122e:	e7a3      	b.n	1178 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    1230:	0020      	movs	r0, r4
    1232:	4b25      	ldr	r3, [pc, #148]	; (12c8 <_spi_interrupt_handler+0x1c4>)
    1234:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1236:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1238:	b29b      	uxth	r3, r3
    123a:	2b00      	cmp	r3, #0
    123c:	d19c      	bne.n	1178 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    123e:	3304      	adds	r3, #4
    1240:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1242:	2200      	movs	r2, #0
    1244:	3334      	adds	r3, #52	; 0x34
    1246:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1248:	3b35      	subs	r3, #53	; 0x35
    124a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    124c:	07fb      	lsls	r3, r7, #31
    124e:	d400      	bmi.n	1252 <_spi_interrupt_handler+0x14e>
    1250:	e792      	b.n	1178 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1252:	0020      	movs	r0, r4
    1254:	68e3      	ldr	r3, [r4, #12]
    1256:	4798      	blx	r3
    1258:	e78e      	b.n	1178 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    125a:	077b      	lsls	r3, r7, #29
    125c:	d400      	bmi.n	1260 <_spi_interrupt_handler+0x15c>
    125e:	e78b      	b.n	1178 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1260:	0020      	movs	r0, r4
    1262:	6963      	ldr	r3, [r4, #20]
    1264:	4798      	blx	r3
    1266:	e787      	b.n	1178 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1268:	0020      	movs	r0, r4
    126a:	69e3      	ldr	r3, [r4, #28]
    126c:	4798      	blx	r3
    126e:	e796      	b.n	119e <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1270:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1272:	2b01      	cmp	r3, #1
    1274:	d000      	beq.n	1278 <_spi_interrupt_handler+0x174>
    1276:	e795      	b.n	11a4 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1278:	79e3      	ldrb	r3, [r4, #7]
    127a:	2b00      	cmp	r3, #0
    127c:	d000      	beq.n	1280 <_spi_interrupt_handler+0x17c>
    127e:	e791      	b.n	11a4 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1280:	3302      	adds	r3, #2
    1282:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1284:	3301      	adds	r3, #1
    1286:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1288:	2200      	movs	r2, #0
    128a:	3335      	adds	r3, #53	; 0x35
    128c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    128e:	07fb      	lsls	r3, r7, #31
    1290:	d400      	bmi.n	1294 <_spi_interrupt_handler+0x190>
    1292:	e787      	b.n	11a4 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1294:	0020      	movs	r0, r4
    1296:	68e3      	ldr	r3, [r4, #12]
    1298:	4798      	blx	r3
    129a:	e783      	b.n	11a4 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    129c:	0020      	movs	r0, r4
    129e:	6a23      	ldr	r3, [r4, #32]
    12a0:	4798      	blx	r3
    12a2:	e78a      	b.n	11ba <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    12a4:	2380      	movs	r3, #128	; 0x80
    12a6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    12a8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    12aa:	067b      	lsls	r3, r7, #25
    12ac:	d400      	bmi.n	12b0 <_spi_interrupt_handler+0x1ac>
    12ae:	e788      	b.n	11c2 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    12b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12b2:	0020      	movs	r0, r4
    12b4:	4798      	blx	r3
}
    12b6:	e784      	b.n	11c2 <_spi_interrupt_handler+0xbe>
    12b8:	20000a14 	.word	0x20000a14
    12bc:	00001079 	.word	0x00001079
    12c0:	000010ad 	.word	0x000010ad
    12c4:	000010d3 	.word	0x000010d3
    12c8:	000010c5 	.word	0x000010c5

000012cc <FIFO_Count>:
    12cc:	2800      	cmp	r0, #0
    12ce:	d003      	beq.n	12d8 <FIFO_Count+0xc>
    12d0:	6803      	ldr	r3, [r0, #0]
    12d2:	6840      	ldr	r0, [r0, #4]
    12d4:	1a18      	subs	r0, r3, r0
    12d6:	4770      	bx	lr
    12d8:	2000      	movs	r0, #0
    12da:	e7fc      	b.n	12d6 <FIFO_Count+0xa>

000012dc <FIFO_Full>:
    12dc:	b510      	push	{r4, lr}
    12de:	1e04      	subs	r4, r0, #0
    12e0:	d006      	beq.n	12f0 <FIFO_Full+0x14>
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <FIFO_Full+0x1c>)
    12e4:	4798      	blx	r3
    12e6:	68e3      	ldr	r3, [r4, #12]
    12e8:	4298      	cmp	r0, r3
    12ea:	d003      	beq.n	12f4 <FIFO_Full+0x18>
    12ec:	2000      	movs	r0, #0
    12ee:	bd10      	pop	{r4, pc}
    12f0:	2001      	movs	r0, #1
    12f2:	e7fc      	b.n	12ee <FIFO_Full+0x12>
    12f4:	2001      	movs	r0, #1
    12f6:	e7fa      	b.n	12ee <FIFO_Full+0x12>
    12f8:	000012cd 	.word	0x000012cd

000012fc <FIFO_Put>:
    12fc:	b570      	push	{r4, r5, r6, lr}
    12fe:	0004      	movs	r4, r0
    1300:	000d      	movs	r5, r1
    1302:	2800      	cmp	r0, #0
    1304:	d010      	beq.n	1328 <FIFO_Put+0x2c>
    1306:	4b0a      	ldr	r3, [pc, #40]	; (1330 <FIFO_Put+0x34>)
    1308:	4798      	blx	r3
    130a:	2800      	cmp	r0, #0
    130c:	d10e      	bne.n	132c <FIFO_Put+0x30>
    130e:	6820      	ldr	r0, [r4, #0]
    1310:	68e1      	ldr	r1, [r4, #12]
    1312:	4b08      	ldr	r3, [pc, #32]	; (1334 <FIFO_Put+0x38>)
    1314:	4798      	blx	r3
    1316:	68a3      	ldr	r3, [r4, #8]
    1318:	469c      	mov	ip, r3
    131a:	4461      	add	r1, ip
    131c:	700d      	strb	r5, [r1, #0]
    131e:	6823      	ldr	r3, [r4, #0]
    1320:	3301      	adds	r3, #1
    1322:	6023      	str	r3, [r4, #0]
    1324:	2001      	movs	r0, #1
    1326:	bd70      	pop	{r4, r5, r6, pc}
    1328:	2000      	movs	r0, #0
    132a:	e7fc      	b.n	1326 <FIFO_Put+0x2a>
    132c:	2000      	movs	r0, #0
    132e:	e7fa      	b.n	1326 <FIFO_Put+0x2a>
    1330:	000012dd 	.word	0x000012dd
    1334:	00004f15 	.word	0x00004f15

00001338 <FIFO_Init>:
    1338:	2800      	cmp	r0, #0
    133a:	d008      	beq.n	134e <FIFO_Init+0x16>
    133c:	2900      	cmp	r1, #0
    133e:	d006      	beq.n	134e <FIFO_Init+0x16>
    1340:	2a00      	cmp	r2, #0
    1342:	d004      	beq.n	134e <FIFO_Init+0x16>
    1344:	2300      	movs	r3, #0
    1346:	6003      	str	r3, [r0, #0]
    1348:	6043      	str	r3, [r0, #4]
    134a:	6081      	str	r1, [r0, #8]
    134c:	60c2      	str	r2, [r0, #12]
    134e:	4770      	bx	lr

00001350 <mstimer_set>:
    1350:	b510      	push	{r4, lr}
    1352:	0004      	movs	r4, r0
    1354:	6041      	str	r1, [r0, #4]
    1356:	4b02      	ldr	r3, [pc, #8]	; (1360 <mstimer_set+0x10>)
    1358:	4798      	blx	r3
    135a:	6020      	str	r0, [r4, #0]
    135c:	bd10      	pop	{r4, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	000037e1 	.word	0x000037e1

00001364 <fiber1_callback>:
    usart_disable(&uartfiber_inst1);
	usart_disable(&uartfiber_inst2);
}

void fiber1_callback()
{
    1364:	b570      	push	{r4, r5, r6, lr}
	uint8_t tempdata = UART_FIBER1->USART.DATA.reg;
    1366:	4b16      	ldr	r3, [pc, #88]	; (13c0 <fiber1_callback+0x5c>)
    1368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    136a:	b2db      	uxtb	r3, r3
	
	if(fiber1_data_status != data_ready)
    136c:	4a15      	ldr	r2, [pc, #84]	; (13c4 <fiber1_callback+0x60>)
    136e:	7812      	ldrb	r2, [r2, #0]
    1370:	2a01      	cmp	r2, #1
    1372:	d00b      	beq.n	138c <fiber1_callback+0x28>
	{
		if (tempdata == '$')
    1374:	2b24      	cmp	r3, #36	; 0x24
    1376:	d014      	beq.n	13a2 <fiber1_callback+0x3e>
		{
			fiber1_pointer = 0;
			fiber1_data_status = data_being_processed;
		}
		else if(tempdata == '%' && fiber1_data_status == data_being_processed)
    1378:	2b25      	cmp	r3, #37	; 0x25
    137a:	d019      	beq.n	13b0 <fiber1_callback+0x4c>
		{
			fiber1_data_status = data_ready;
		}
		else
		{
			fiber1_data.bytes[fiber1_pointer++] = tempdata;
    137c:	4812      	ldr	r0, [pc, #72]	; (13c8 <fiber1_callback+0x64>)
    137e:	7802      	ldrb	r2, [r0, #0]
    1380:	b2d2      	uxtb	r2, r2
    1382:	1c51      	adds	r1, r2, #1
    1384:	b2c9      	uxtb	r1, r1
    1386:	7001      	strb	r1, [r0, #0]
    1388:	4910      	ldr	r1, [pc, #64]	; (13cc <fiber1_callback+0x68>)
    138a:	548b      	strb	r3, [r1, r2]
		}
	}
	usart_read_buffer_job(&uartfiber_inst1, &dummyChar, 1);
    138c:	4d10      	ldr	r5, [pc, #64]	; (13d0 <fiber1_callback+0x6c>)
    138e:	2201      	movs	r2, #1
    1390:	0029      	movs	r1, r5
    1392:	4810      	ldr	r0, [pc, #64]	; (13d4 <fiber1_callback+0x70>)
    1394:	4c10      	ldr	r4, [pc, #64]	; (13d8 <fiber1_callback+0x74>)
    1396:	47a0      	blx	r4
	usart_read_buffer_job(&uartfiber_inst2, &dummyChar, 1);
    1398:	2201      	movs	r2, #1
    139a:	0029      	movs	r1, r5
    139c:	480f      	ldr	r0, [pc, #60]	; (13dc <fiber1_callback+0x78>)
    139e:	47a0      	blx	r4
}
    13a0:	bd70      	pop	{r4, r5, r6, pc}
			fiber1_pointer = 0;
    13a2:	2200      	movs	r2, #0
    13a4:	4b08      	ldr	r3, [pc, #32]	; (13c8 <fiber1_callback+0x64>)
    13a6:	701a      	strb	r2, [r3, #0]
			fiber1_data_status = data_being_processed;
    13a8:	3202      	adds	r2, #2
    13aa:	4b06      	ldr	r3, [pc, #24]	; (13c4 <fiber1_callback+0x60>)
    13ac:	701a      	strb	r2, [r3, #0]
    13ae:	e7ed      	b.n	138c <fiber1_callback+0x28>
		else if(tempdata == '%' && fiber1_data_status == data_being_processed)
    13b0:	4a04      	ldr	r2, [pc, #16]	; (13c4 <fiber1_callback+0x60>)
    13b2:	7812      	ldrb	r2, [r2, #0]
    13b4:	2a02      	cmp	r2, #2
    13b6:	d1e1      	bne.n	137c <fiber1_callback+0x18>
			fiber1_data_status = data_ready;
    13b8:	3a01      	subs	r2, #1
    13ba:	4b02      	ldr	r3, [pc, #8]	; (13c4 <fiber1_callback+0x60>)
    13bc:	701a      	strb	r2, [r3, #0]
    13be:	e7e5      	b.n	138c <fiber1_callback+0x28>
    13c0:	42000c00 	.word	0x42000c00
    13c4:	20000458 	.word	0x20000458
    13c8:	20000461 	.word	0x20000461
    13cc:	2000045c 	.word	0x2000045c
    13d0:	20000460 	.word	0x20000460
    13d4:	20000094 	.word	0x20000094
    13d8:	00003f11 	.word	0x00003f11
    13dc:	200000c8 	.word	0x200000c8

000013e0 <fiber2_callback>:
void fiber2_callback()
{
    13e0:	b570      	push	{r4, r5, r6, lr}
	uint8_t tempdata = UART_FIBER2->USART.DATA.reg;
    13e2:	4b16      	ldr	r3, [pc, #88]	; (143c <fiber2_callback+0x5c>)
    13e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    13e6:	b2db      	uxtb	r3, r3
	
	if(fiber2_data_status != data_ready)
    13e8:	4a15      	ldr	r2, [pc, #84]	; (1440 <fiber2_callback+0x60>)
    13ea:	7812      	ldrb	r2, [r2, #0]
    13ec:	2a01      	cmp	r2, #1
    13ee:	d00b      	beq.n	1408 <fiber2_callback+0x28>
	{
		if (tempdata == '$')
    13f0:	2b24      	cmp	r3, #36	; 0x24
    13f2:	d014      	beq.n	141e <fiber2_callback+0x3e>
		{
			fiber2_pointer = 0;
			fiber2_data_status = data_being_processed;
		}
		else if(tempdata == '%' && fiber2_data_status == data_being_processed)
    13f4:	2b25      	cmp	r3, #37	; 0x25
    13f6:	d019      	beq.n	142c <fiber2_callback+0x4c>
		{
			fiber2_data_status = data_ready;
		}
		else
		{
			fiber2_data.bytes[fiber2_pointer++] = tempdata;
    13f8:	4812      	ldr	r0, [pc, #72]	; (1444 <fiber2_callback+0x64>)
    13fa:	7802      	ldrb	r2, [r0, #0]
    13fc:	b2d2      	uxtb	r2, r2
    13fe:	1c51      	adds	r1, r2, #1
    1400:	b2c9      	uxtb	r1, r1
    1402:	7001      	strb	r1, [r0, #0]
    1404:	4910      	ldr	r1, [pc, #64]	; (1448 <fiber2_callback+0x68>)
    1406:	548b      	strb	r3, [r1, r2]
		}
	}
	usart_read_buffer_job(&uartfiber_inst1, &dummyChar, 1);
    1408:	4d10      	ldr	r5, [pc, #64]	; (144c <fiber2_callback+0x6c>)
    140a:	2201      	movs	r2, #1
    140c:	0029      	movs	r1, r5
    140e:	4810      	ldr	r0, [pc, #64]	; (1450 <fiber2_callback+0x70>)
    1410:	4c10      	ldr	r4, [pc, #64]	; (1454 <fiber2_callback+0x74>)
    1412:	47a0      	blx	r4
	usart_read_buffer_job(&uartfiber_inst2, &dummyChar, 1);
    1414:	2201      	movs	r2, #1
    1416:	0029      	movs	r1, r5
    1418:	480f      	ldr	r0, [pc, #60]	; (1458 <fiber2_callback+0x78>)
    141a:	47a0      	blx	r4
}
    141c:	bd70      	pop	{r4, r5, r6, pc}
			fiber2_pointer = 0;
    141e:	2200      	movs	r2, #0
    1420:	4b08      	ldr	r3, [pc, #32]	; (1444 <fiber2_callback+0x64>)
    1422:	701a      	strb	r2, [r3, #0]
			fiber2_data_status = data_being_processed;
    1424:	3202      	adds	r2, #2
    1426:	4b06      	ldr	r3, [pc, #24]	; (1440 <fiber2_callback+0x60>)
    1428:	701a      	strb	r2, [r3, #0]
    142a:	e7ed      	b.n	1408 <fiber2_callback+0x28>
		else if(tempdata == '%' && fiber2_data_status == data_being_processed)
    142c:	4a04      	ldr	r2, [pc, #16]	; (1440 <fiber2_callback+0x60>)
    142e:	7812      	ldrb	r2, [r2, #0]
    1430:	2a02      	cmp	r2, #2
    1432:	d1e1      	bne.n	13f8 <fiber2_callback+0x18>
			fiber2_data_status = data_ready;
    1434:	3a01      	subs	r2, #1
    1436:	4b02      	ldr	r3, [pc, #8]	; (1440 <fiber2_callback+0x60>)
    1438:	701a      	strb	r2, [r3, #0]
    143a:	e7e5      	b.n	1408 <fiber2_callback+0x28>
    143c:	42001c00 	.word	0x42001c00
    1440:	20000459 	.word	0x20000459
    1444:	2000045a 	.word	0x2000045a
    1448:	20000464 	.word	0x20000464
    144c:	20000460 	.word	0x20000460
    1450:	20000094 	.word	0x20000094
    1454:	00003f11 	.word	0x00003f11
    1458:	200000c8 	.word	0x200000c8

0000145c <uartfiber_init>:
{
    145c:	b570      	push	{r4, r5, r6, lr}
    145e:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1460:	2380      	movs	r3, #128	; 0x80
    1462:	05db      	lsls	r3, r3, #23
    1464:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1466:	2300      	movs	r3, #0
    1468:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    146a:	22ff      	movs	r2, #255	; 0xff
    146c:	4669      	mov	r1, sp
    146e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1470:	2200      	movs	r2, #0
    1472:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1474:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1476:	2101      	movs	r1, #1
    1478:	2024      	movs	r0, #36	; 0x24
    147a:	466c      	mov	r4, sp
    147c:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    147e:	3001      	adds	r0, #1
    1480:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1482:	3125      	adds	r1, #37	; 0x25
    1484:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1486:	3101      	adds	r1, #1
    1488:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    148a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    148c:	3105      	adds	r1, #5
    148e:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1490:	3101      	adds	r1, #1
    1492:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1494:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1496:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1498:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    149a:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    149c:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    149e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    14a0:	2313      	movs	r3, #19
    14a2:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    14a4:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    14a6:	23e1      	movs	r3, #225	; 0xe1
    14a8:	019b      	lsls	r3, r3, #6
    14aa:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX1;
    14ac:	23c0      	movs	r3, #192	; 0xc0
    14ae:	039b      	lsls	r3, r3, #14
    14b0:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_UNUSED;
    14b2:	2301      	movs	r3, #1
    14b4:	425b      	negs	r3, r3
    14b6:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    14b8:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    14ba:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = URX_FIBER1;
    14bc:	4b43      	ldr	r3, [pc, #268]	; (15cc <uartfiber_init+0x170>)
    14be:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst1, UART_FIBER1, &config_usart) != STATUS_OK);
    14c0:	466a      	mov	r2, sp
    14c2:	4943      	ldr	r1, [pc, #268]	; (15d0 <uartfiber_init+0x174>)
    14c4:	4843      	ldr	r0, [pc, #268]	; (15d4 <uartfiber_init+0x178>)
    14c6:	4b44      	ldr	r3, [pc, #272]	; (15d8 <uartfiber_init+0x17c>)
    14c8:	4798      	blx	r3
    14ca:	2800      	cmp	r0, #0
    14cc:	d1f8      	bne.n	14c0 <uartfiber_init+0x64>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14ce:	4b41      	ldr	r3, [pc, #260]	; (15d4 <uartfiber_init+0x178>)
    14d0:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14d2:	0020      	movs	r0, r4
    14d4:	4b41      	ldr	r3, [pc, #260]	; (15dc <uartfiber_init+0x180>)
    14d6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14d8:	231f      	movs	r3, #31
    14da:	4018      	ands	r0, r3
    14dc:	3b1e      	subs	r3, #30
    14de:	4083      	lsls	r3, r0
    14e0:	4a3f      	ldr	r2, [pc, #252]	; (15e0 <uartfiber_init+0x184>)
    14e2:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14e4:	4b3b      	ldr	r3, [pc, #236]	; (15d4 <uartfiber_init+0x178>)
    14e6:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    14e8:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    14ea:	2b00      	cmp	r3, #0
    14ec:	d1fa      	bne.n	14e4 <uartfiber_init+0x88>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    14ee:	6823      	ldr	r3, [r4, #0]
    14f0:	2202      	movs	r2, #2
    14f2:	4313      	orrs	r3, r2
    14f4:	6023      	str	r3, [r4, #0]
	config->data_order       = USART_DATAORDER_LSB;
    14f6:	2380      	movs	r3, #128	; 0x80
    14f8:	05db      	lsls	r3, r3, #23
    14fa:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    14fc:	2300      	movs	r3, #0
    14fe:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1500:	32fd      	adds	r2, #253	; 0xfd
    1502:	4669      	mov	r1, sp
    1504:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1506:	2200      	movs	r2, #0
    1508:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    150a:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    150c:	2101      	movs	r1, #1
    150e:	2024      	movs	r0, #36	; 0x24
    1510:	466c      	mov	r4, sp
    1512:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1514:	3001      	adds	r0, #1
    1516:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1518:	3125      	adds	r1, #37	; 0x25
    151a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    151c:	3101      	adds	r1, #1
    151e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1520:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    1522:	3105      	adds	r1, #5
    1524:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1526:	3101      	adds	r1, #1
    1528:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    152a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    152c:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    152e:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    1530:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    1532:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    1534:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1536:	2313      	movs	r3, #19
    1538:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    153a:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    153c:	23e1      	movs	r3, #225	; 0xe1
    153e:	019b      	lsls	r3, r3, #6
    1540:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX2;
    1542:	2380      	movs	r3, #128	; 0x80
    1544:	025b      	lsls	r3, r3, #9
    1546:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = URX_FIBER2;
    1548:	4b26      	ldr	r3, [pc, #152]	; (15e4 <uartfiber_init+0x188>)
    154a:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    154c:	2301      	movs	r3, #1
    154e:	425b      	negs	r3, r3
    1550:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    1552:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    1554:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst2, UART_FIBER2, &config_usart) != STATUS_OK);
    1556:	466a      	mov	r2, sp
    1558:	4923      	ldr	r1, [pc, #140]	; (15e8 <uartfiber_init+0x18c>)
    155a:	4824      	ldr	r0, [pc, #144]	; (15ec <uartfiber_init+0x190>)
    155c:	4b1e      	ldr	r3, [pc, #120]	; (15d8 <uartfiber_init+0x17c>)
    155e:	4798      	blx	r3
    1560:	2800      	cmp	r0, #0
    1562:	d1f8      	bne.n	1556 <uartfiber_init+0xfa>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1564:	4b21      	ldr	r3, [pc, #132]	; (15ec <uartfiber_init+0x190>)
    1566:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1568:	0020      	movs	r0, r4
    156a:	4b1c      	ldr	r3, [pc, #112]	; (15dc <uartfiber_init+0x180>)
    156c:	4798      	blx	r3
    156e:	231f      	movs	r3, #31
    1570:	4018      	ands	r0, r3
    1572:	3b1e      	subs	r3, #30
    1574:	4083      	lsls	r3, r0
    1576:	4a1a      	ldr	r2, [pc, #104]	; (15e0 <uartfiber_init+0x184>)
    1578:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    157a:	4b1c      	ldr	r3, [pc, #112]	; (15ec <uartfiber_init+0x190>)
    157c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    157e:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1580:	2b00      	cmp	r3, #0
    1582:	d1fa      	bne.n	157a <uartfiber_init+0x11e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1584:	6823      	ldr	r3, [r4, #0]
    1586:	2202      	movs	r2, #2
    1588:	4313      	orrs	r3, r2
    158a:	6023      	str	r3, [r4, #0]
	usart_register_callback(&uartfiber_inst1, &fiber1_callback, USART_CALLBACK_BUFFER_RECEIVED);
    158c:	4d11      	ldr	r5, [pc, #68]	; (15d4 <uartfiber_init+0x178>)
    158e:	3a01      	subs	r2, #1
    1590:	4917      	ldr	r1, [pc, #92]	; (15f0 <uartfiber_init+0x194>)
    1592:	0028      	movs	r0, r5
    1594:	4e17      	ldr	r6, [pc, #92]	; (15f4 <uartfiber_init+0x198>)
    1596:	47b0      	blx	r6
	usart_register_callback(&uartfiber_inst2, &fiber2_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1598:	4c14      	ldr	r4, [pc, #80]	; (15ec <uartfiber_init+0x190>)
    159a:	2201      	movs	r2, #1
    159c:	4916      	ldr	r1, [pc, #88]	; (15f8 <uartfiber_init+0x19c>)
    159e:	0020      	movs	r0, r4
    15a0:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    15a2:	2331      	movs	r3, #49	; 0x31
    15a4:	2002      	movs	r0, #2
    15a6:	5ce9      	ldrb	r1, [r5, r3]
    15a8:	4301      	orrs	r1, r0
    15aa:	54e9      	strb	r1, [r5, r3]
    15ac:	5ce2      	ldrb	r2, [r4, r3]
    15ae:	4302      	orrs	r2, r0
    15b0:	54e2      	strb	r2, [r4, r3]
	usart_read_buffer_job(&uartfiber_inst1, &dummyChar, 1);
    15b2:	4e12      	ldr	r6, [pc, #72]	; (15fc <uartfiber_init+0x1a0>)
    15b4:	2201      	movs	r2, #1
    15b6:	0031      	movs	r1, r6
    15b8:	0028      	movs	r0, r5
    15ba:	4d11      	ldr	r5, [pc, #68]	; (1600 <uartfiber_init+0x1a4>)
    15bc:	47a8      	blx	r5
	usart_read_buffer_job(&uartfiber_inst2, &dummyChar, 1);
    15be:	2201      	movs	r2, #1
    15c0:	0031      	movs	r1, r6
    15c2:	0020      	movs	r0, r4
    15c4:	47a8      	blx	r5
}
    15c6:	b010      	add	sp, #64	; 0x40
    15c8:	bd70      	pop	{r4, r5, r6, pc}
    15ca:	46c0      	nop			; (mov r8, r8)
    15cc:	00130002 	.word	0x00130002
    15d0:	42000c00 	.word	0x42000c00
    15d4:	20000094 	.word	0x20000094
    15d8:	00003d51 	.word	0x00003d51
    15dc:	00004115 	.word	0x00004115
    15e0:	e000e100 	.word	0xe000e100
    15e4:	00300002 	.word	0x00300002
    15e8:	42001c00 	.word	0x42001c00
    15ec:	200000c8 	.word	0x200000c8
    15f0:	00001365 	.word	0x00001365
    15f4:	00003ee9 	.word	0x00003ee9
    15f8:	000013e1 	.word	0x000013e1
    15fc:	20000460 	.word	0x20000460
    1600:	00003f11 	.word	0x00003f11

00001604 <get_fiber1_data>:

struct measurement get_fiber1_data()
{
    1604:	b510      	push	{r4, lr}
    1606:	b082      	sub	sp, #8
	return fiber1_data.data;
    1608:	ac01      	add	r4, sp, #4
    160a:	2204      	movs	r2, #4
    160c:	4908      	ldr	r1, [pc, #32]	; (1630 <get_fiber1_data+0x2c>)
    160e:	0020      	movs	r0, r4
    1610:	4b08      	ldr	r3, [pc, #32]	; (1634 <get_fiber1_data+0x30>)
    1612:	4798      	blx	r3
    1614:	7822      	ldrb	r2, [r4, #0]
    1616:	7863      	ldrb	r3, [r4, #1]
    1618:	021b      	lsls	r3, r3, #8
    161a:	20ff      	movs	r0, #255	; 0xff
    161c:	4010      	ands	r0, r2
    161e:	78a2      	ldrb	r2, [r4, #2]
    1620:	0412      	lsls	r2, r2, #16
    1622:	4318      	orrs	r0, r3
    1624:	78e3      	ldrb	r3, [r4, #3]
    1626:	061b      	lsls	r3, r3, #24
    1628:	4310      	orrs	r0, r2
    162a:	4318      	orrs	r0, r3
}
    162c:	b002      	add	sp, #8
    162e:	bd10      	pop	{r4, pc}
    1630:	2000045c 	.word	0x2000045c
    1634:	00004fbd 	.word	0x00004fbd

00001638 <get_fiber2_data>:
struct measurement get_fiber2_data()
{
    1638:	b510      	push	{r4, lr}
    163a:	b082      	sub	sp, #8
	return fiber2_data.data;
    163c:	ac01      	add	r4, sp, #4
    163e:	2204      	movs	r2, #4
    1640:	4908      	ldr	r1, [pc, #32]	; (1664 <get_fiber2_data+0x2c>)
    1642:	0020      	movs	r0, r4
    1644:	4b08      	ldr	r3, [pc, #32]	; (1668 <get_fiber2_data+0x30>)
    1646:	4798      	blx	r3
    1648:	7822      	ldrb	r2, [r4, #0]
    164a:	7863      	ldrb	r3, [r4, #1]
    164c:	021b      	lsls	r3, r3, #8
    164e:	20ff      	movs	r0, #255	; 0xff
    1650:	4010      	ands	r0, r2
    1652:	78a2      	ldrb	r2, [r4, #2]
    1654:	0412      	lsls	r2, r2, #16
    1656:	4318      	orrs	r0, r3
    1658:	78e3      	ldrb	r3, [r4, #3]
    165a:	061b      	lsls	r3, r3, #24
    165c:	4310      	orrs	r0, r2
    165e:	4318      	orrs	r0, r3
}
    1660:	b002      	add	sp, #8
    1662:	bd10      	pop	{r4, pc}
    1664:	20000464 	.word	0x20000464
    1668:	00004fbd 	.word	0x00004fbd

0000166c <get_fiber1_status>:

enum fiber_data_status get_fiber1_status()
{
	return fiber1_data_status;
    166c:	4b01      	ldr	r3, [pc, #4]	; (1674 <get_fiber1_status+0x8>)
    166e:	7818      	ldrb	r0, [r3, #0]
    1670:	b2c0      	uxtb	r0, r0
}
    1672:	4770      	bx	lr
    1674:	20000458 	.word	0x20000458

00001678 <get_fiber2_status>:
enum fiber_data_status get_fiber2_status()
{
	return fiber2_data_status;
    1678:	4b01      	ldr	r3, [pc, #4]	; (1680 <get_fiber2_status+0x8>)
    167a:	7818      	ldrb	r0, [r3, #0]
    167c:	b2c0      	uxtb	r0, r0
}
    167e:	4770      	bx	lr
    1680:	20000459 	.word	0x20000459

00001684 <reset_fiber1_status>:

void reset_fiber1_status()
{
	fiber1_data_status = data_not_ready;
    1684:	2200      	movs	r2, #0
    1686:	4b01      	ldr	r3, [pc, #4]	; (168c <reset_fiber1_status+0x8>)
    1688:	701a      	strb	r2, [r3, #0]
}
    168a:	4770      	bx	lr
    168c:	20000458 	.word	0x20000458

00001690 <reset_fiber2_status>:
void reset_fiber2_status()
{
	fiber2_data_status = data_not_ready;
    1690:	2200      	movs	r2, #0
    1692:	4b01      	ldr	r3, [pc, #4]	; (1698 <reset_fiber2_status+0x8>)
    1694:	701a      	strb	r2, [r3, #0]
}
    1696:	4770      	bx	lr
    1698:	20000459 	.word	0x20000459

0000169c <Ft_Gpu_Copro_SendCmd>:
    169c:	b510      	push	{r4, lr}
    169e:	4b01      	ldr	r3, [pc, #4]	; (16a4 <Ft_Gpu_Copro_SendCmd+0x8>)
    16a0:	4798      	blx	r3
    16a2:	bd10      	pop	{r4, pc}
    16a4:	00001b7d 	.word	0x00001b7d

000016a8 <Ft_Gpu_CoCmd_SendStr>:
    16a8:	b510      	push	{r4, lr}
    16aa:	4b01      	ldr	r3, [pc, #4]	; (16b0 <Ft_Gpu_CoCmd_SendStr+0x8>)
    16ac:	4798      	blx	r3
    16ae:	bd10      	pop	{r4, pc}
    16b0:	00001b0d 	.word	0x00001b0d

000016b4 <Ft_Gpu_CoCmd_StartFunc>:
    16b4:	b570      	push	{r4, r5, r6, lr}
    16b6:	0004      	movs	r4, r0
    16b8:	000d      	movs	r5, r1
    16ba:	4b04      	ldr	r3, [pc, #16]	; (16cc <Ft_Gpu_CoCmd_StartFunc+0x18>)
    16bc:	4798      	blx	r3
    16be:	002a      	movs	r2, r5
    16c0:	2101      	movs	r1, #1
    16c2:	0020      	movs	r0, r4
    16c4:	4b02      	ldr	r3, [pc, #8]	; (16d0 <Ft_Gpu_CoCmd_StartFunc+0x1c>)
    16c6:	4798      	blx	r3
    16c8:	bd70      	pop	{r4, r5, r6, pc}
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	00001ced 	.word	0x00001ced
    16d0:	00001ab5 	.word	0x00001ab5

000016d4 <Ft_Gpu_CoCmd_EndFunc>:
    16d4:	b570      	push	{r4, r5, r6, lr}
    16d6:	0004      	movs	r4, r0
    16d8:	000d      	movs	r5, r1
    16da:	4b03      	ldr	r3, [pc, #12]	; (16e8 <Ft_Gpu_CoCmd_EndFunc+0x14>)
    16dc:	4798      	blx	r3
    16de:	0029      	movs	r1, r5
    16e0:	0020      	movs	r0, r4
    16e2:	4b02      	ldr	r3, [pc, #8]	; (16ec <Ft_Gpu_CoCmd_EndFunc+0x18>)
    16e4:	4798      	blx	r3
    16e6:	bd70      	pop	{r4, r5, r6, pc}
    16e8:	00001bb1 	.word	0x00001bb1
    16ec:	00001ca1 	.word	0x00001ca1

000016f0 <Ft_Gpu_CoCmd_Text>:
    16f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f2:	46d6      	mov	lr, sl
    16f4:	464f      	mov	r7, r9
    16f6:	b580      	push	{r7, lr}
    16f8:	b083      	sub	sp, #12
    16fa:	0005      	movs	r5, r0
    16fc:	468a      	mov	sl, r1
    16fe:	4691      	mov	r9, r2
    1700:	001f      	movs	r7, r3
    1702:	ab0a      	add	r3, sp, #40	; 0x28
    1704:	881e      	ldrh	r6, [r3, #0]
    1706:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1708:	4b15      	ldr	r3, [pc, #84]	; (1760 <Ft_Gpu_CoCmd_Text+0x70>)
    170a:	4798      	blx	r3
    170c:	b280      	uxth	r0, r0
    170e:	300d      	adds	r0, #13
    1710:	b284      	uxth	r4, r0
    1712:	0021      	movs	r1, r4
    1714:	0028      	movs	r0, r5
    1716:	4b13      	ldr	r3, [pc, #76]	; (1764 <Ft_Gpu_CoCmd_Text+0x74>)
    1718:	4798      	blx	r3
    171a:	21f4      	movs	r1, #244	; 0xf4
    171c:	4249      	negs	r1, r1
    171e:	9501      	str	r5, [sp, #4]
    1720:	0028      	movs	r0, r5
    1722:	4d11      	ldr	r5, [pc, #68]	; (1768 <Ft_Gpu_CoCmd_Text+0x78>)
    1724:	47a8      	blx	r5
    1726:	464b      	mov	r3, r9
    1728:	0419      	lsls	r1, r3, #16
    172a:	4653      	mov	r3, sl
    172c:	041b      	lsls	r3, r3, #16
    172e:	0c1b      	lsrs	r3, r3, #16
    1730:	4319      	orrs	r1, r3
    1732:	9801      	ldr	r0, [sp, #4]
    1734:	47a8      	blx	r5
    1736:	0436      	lsls	r6, r6, #16
    1738:	0439      	lsls	r1, r7, #16
    173a:	0c09      	lsrs	r1, r1, #16
    173c:	4331      	orrs	r1, r6
    173e:	9e01      	ldr	r6, [sp, #4]
    1740:	0030      	movs	r0, r6
    1742:	47a8      	blx	r5
    1744:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1746:	0030      	movs	r0, r6
    1748:	4b08      	ldr	r3, [pc, #32]	; (176c <Ft_Gpu_CoCmd_Text+0x7c>)
    174a:	4798      	blx	r3
    174c:	0021      	movs	r1, r4
    174e:	0030      	movs	r0, r6
    1750:	4b07      	ldr	r3, [pc, #28]	; (1770 <Ft_Gpu_CoCmd_Text+0x80>)
    1752:	4798      	blx	r3
    1754:	b003      	add	sp, #12
    1756:	bc0c      	pop	{r2, r3}
    1758:	4691      	mov	r9, r2
    175a:	469a      	mov	sl, r3
    175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00005045 	.word	0x00005045
    1764:	000016b5 	.word	0x000016b5
    1768:	0000169d 	.word	0x0000169d
    176c:	000016a9 	.word	0x000016a9
    1770:	000016d5 	.word	0x000016d5

00001774 <Ft_Gpu_CoCmd_Number>:
    1774:	b5f0      	push	{r4, r5, r6, r7, lr}
    1776:	46c6      	mov	lr, r8
    1778:	b500      	push	{lr}
    177a:	b082      	sub	sp, #8
    177c:	0007      	movs	r7, r0
    177e:	000c      	movs	r4, r1
    1780:	4690      	mov	r8, r2
    1782:	001e      	movs	r6, r3
    1784:	ab08      	add	r3, sp, #32
    1786:	881d      	ldrh	r5, [r3, #0]
    1788:	2110      	movs	r1, #16
    178a:	4b10      	ldr	r3, [pc, #64]	; (17cc <Ft_Gpu_CoCmd_Number+0x58>)
    178c:	4798      	blx	r3
    178e:	21d2      	movs	r1, #210	; 0xd2
    1790:	4249      	negs	r1, r1
    1792:	9701      	str	r7, [sp, #4]
    1794:	0038      	movs	r0, r7
    1796:	4f0e      	ldr	r7, [pc, #56]	; (17d0 <Ft_Gpu_CoCmd_Number+0x5c>)
    1798:	47b8      	blx	r7
    179a:	4643      	mov	r3, r8
    179c:	0419      	lsls	r1, r3, #16
    179e:	0423      	lsls	r3, r4, #16
    17a0:	0c1b      	lsrs	r3, r3, #16
    17a2:	4319      	orrs	r1, r3
    17a4:	9c01      	ldr	r4, [sp, #4]
    17a6:	0020      	movs	r0, r4
    17a8:	47b8      	blx	r7
    17aa:	042d      	lsls	r5, r5, #16
    17ac:	0431      	lsls	r1, r6, #16
    17ae:	0c09      	lsrs	r1, r1, #16
    17b0:	4329      	orrs	r1, r5
    17b2:	0020      	movs	r0, r4
    17b4:	47b8      	blx	r7
    17b6:	9909      	ldr	r1, [sp, #36]	; 0x24
    17b8:	0020      	movs	r0, r4
    17ba:	47b8      	blx	r7
    17bc:	2110      	movs	r1, #16
    17be:	0020      	movs	r0, r4
    17c0:	4b04      	ldr	r3, [pc, #16]	; (17d4 <Ft_Gpu_CoCmd_Number+0x60>)
    17c2:	4798      	blx	r3
    17c4:	b002      	add	sp, #8
    17c6:	bc04      	pop	{r2}
    17c8:	4690      	mov	r8, r2
    17ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17cc:	000016b5 	.word	0x000016b5
    17d0:	0000169d 	.word	0x0000169d
    17d4:	000016d5 	.word	0x000016d5

000017d8 <Ft_Gpu_CoCmd_Swap>:
    17d8:	b510      	push	{r4, lr}
    17da:	0004      	movs	r4, r0
    17dc:	2104      	movs	r1, #4
    17de:	4b06      	ldr	r3, [pc, #24]	; (17f8 <Ft_Gpu_CoCmd_Swap+0x20>)
    17e0:	4798      	blx	r3
    17e2:	21ff      	movs	r1, #255	; 0xff
    17e4:	4249      	negs	r1, r1
    17e6:	0020      	movs	r0, r4
    17e8:	4b04      	ldr	r3, [pc, #16]	; (17fc <Ft_Gpu_CoCmd_Swap+0x24>)
    17ea:	4798      	blx	r3
    17ec:	2104      	movs	r1, #4
    17ee:	0020      	movs	r0, r4
    17f0:	4b03      	ldr	r3, [pc, #12]	; (1800 <Ft_Gpu_CoCmd_Swap+0x28>)
    17f2:	4798      	blx	r3
    17f4:	bd10      	pop	{r4, pc}
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	000016b5 	.word	0x000016b5
    17fc:	0000169d 	.word	0x0000169d
    1800:	000016d5 	.word	0x000016d5

00001804 <Ft_Gpu_CoCmd_Button>:
    1804:	b5f0      	push	{r4, r5, r6, r7, lr}
    1806:	46de      	mov	lr, fp
    1808:	4657      	mov	r7, sl
    180a:	464e      	mov	r6, r9
    180c:	4645      	mov	r5, r8
    180e:	b5e0      	push	{r5, r6, r7, lr}
    1810:	b083      	sub	sp, #12
    1812:	0005      	movs	r5, r0
    1814:	468a      	mov	sl, r1
    1816:	4691      	mov	r9, r2
    1818:	469b      	mov	fp, r3
    181a:	ab0c      	add	r3, sp, #48	; 0x30
    181c:	2200      	movs	r2, #0
    181e:	5e9b      	ldrsh	r3, [r3, r2]
    1820:	4698      	mov	r8, r3
    1822:	ab0d      	add	r3, sp, #52	; 0x34
    1824:	2700      	movs	r7, #0
    1826:	5fdf      	ldrsh	r7, [r3, r7]
    1828:	ab0e      	add	r3, sp, #56	; 0x38
    182a:	881e      	ldrh	r6, [r3, #0]
    182c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    182e:	4b1a      	ldr	r3, [pc, #104]	; (1898 <Ft_Gpu_CoCmd_Button+0x94>)
    1830:	4798      	blx	r3
    1832:	b280      	uxth	r0, r0
    1834:	3011      	adds	r0, #17
    1836:	b284      	uxth	r4, r0
    1838:	0021      	movs	r1, r4
    183a:	0028      	movs	r0, r5
    183c:	4b17      	ldr	r3, [pc, #92]	; (189c <Ft_Gpu_CoCmd_Button+0x98>)
    183e:	4798      	blx	r3
    1840:	21f3      	movs	r1, #243	; 0xf3
    1842:	4249      	negs	r1, r1
    1844:	9501      	str	r5, [sp, #4]
    1846:	0028      	movs	r0, r5
    1848:	4d15      	ldr	r5, [pc, #84]	; (18a0 <Ft_Gpu_CoCmd_Button+0x9c>)
    184a:	47a8      	blx	r5
    184c:	464b      	mov	r3, r9
    184e:	0419      	lsls	r1, r3, #16
    1850:	4653      	mov	r3, sl
    1852:	041b      	lsls	r3, r3, #16
    1854:	0c1b      	lsrs	r3, r3, #16
    1856:	4319      	orrs	r1, r3
    1858:	9801      	ldr	r0, [sp, #4]
    185a:	47a8      	blx	r5
    185c:	4643      	mov	r3, r8
    185e:	0419      	lsls	r1, r3, #16
    1860:	465b      	mov	r3, fp
    1862:	041b      	lsls	r3, r3, #16
    1864:	0c1b      	lsrs	r3, r3, #16
    1866:	4319      	orrs	r1, r3
    1868:	9801      	ldr	r0, [sp, #4]
    186a:	47a8      	blx	r5
    186c:	0436      	lsls	r6, r6, #16
    186e:	0439      	lsls	r1, r7, #16
    1870:	0c09      	lsrs	r1, r1, #16
    1872:	4331      	orrs	r1, r6
    1874:	9e01      	ldr	r6, [sp, #4]
    1876:	0030      	movs	r0, r6
    1878:	47a8      	blx	r5
    187a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    187c:	0030      	movs	r0, r6
    187e:	4b09      	ldr	r3, [pc, #36]	; (18a4 <Ft_Gpu_CoCmd_Button+0xa0>)
    1880:	4798      	blx	r3
    1882:	0021      	movs	r1, r4
    1884:	0030      	movs	r0, r6
    1886:	4b08      	ldr	r3, [pc, #32]	; (18a8 <Ft_Gpu_CoCmd_Button+0xa4>)
    1888:	4798      	blx	r3
    188a:	b003      	add	sp, #12
    188c:	bc3c      	pop	{r2, r3, r4, r5}
    188e:	4690      	mov	r8, r2
    1890:	4699      	mov	r9, r3
    1892:	46a2      	mov	sl, r4
    1894:	46ab      	mov	fp, r5
    1896:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1898:	00005045 	.word	0x00005045
    189c:	000016b5 	.word	0x000016b5
    18a0:	0000169d 	.word	0x0000169d
    18a4:	000016a9 	.word	0x000016a9
    18a8:	000016d5 	.word	0x000016d5

000018ac <Ft_Gpu_CoCmd_Calibrate>:
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	0004      	movs	r4, r0
    18b0:	000e      	movs	r6, r1
    18b2:	2108      	movs	r1, #8
    18b4:	4b08      	ldr	r3, [pc, #32]	; (18d8 <Ft_Gpu_CoCmd_Calibrate+0x2c>)
    18b6:	4798      	blx	r3
    18b8:	21eb      	movs	r1, #235	; 0xeb
    18ba:	4249      	negs	r1, r1
    18bc:	0020      	movs	r0, r4
    18be:	4d07      	ldr	r5, [pc, #28]	; (18dc <Ft_Gpu_CoCmd_Calibrate+0x30>)
    18c0:	47a8      	blx	r5
    18c2:	0031      	movs	r1, r6
    18c4:	0020      	movs	r0, r4
    18c6:	47a8      	blx	r5
    18c8:	2108      	movs	r1, #8
    18ca:	0020      	movs	r0, r4
    18cc:	4b04      	ldr	r3, [pc, #16]	; (18e0 <Ft_Gpu_CoCmd_Calibrate+0x34>)
    18ce:	4798      	blx	r3
    18d0:	0020      	movs	r0, r4
    18d2:	4b04      	ldr	r3, [pc, #16]	; (18e4 <Ft_Gpu_CoCmd_Calibrate+0x38>)
    18d4:	4798      	blx	r3
    18d6:	bd70      	pop	{r4, r5, r6, pc}
    18d8:	000016b5 	.word	0x000016b5
    18dc:	0000169d 	.word	0x0000169d
    18e0:	000016d5 	.word	0x000016d5
    18e4:	00001d05 	.word	0x00001d05

000018e8 <Ft_Gpu_CoCmd_Append>:
    18e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ea:	0004      	movs	r4, r0
    18ec:	000f      	movs	r7, r1
    18ee:	0016      	movs	r6, r2
    18f0:	210c      	movs	r1, #12
    18f2:	4b09      	ldr	r3, [pc, #36]	; (1918 <Ft_Gpu_CoCmd_Append+0x30>)
    18f4:	4798      	blx	r3
    18f6:	21e2      	movs	r1, #226	; 0xe2
    18f8:	4249      	negs	r1, r1
    18fa:	0020      	movs	r0, r4
    18fc:	4d07      	ldr	r5, [pc, #28]	; (191c <Ft_Gpu_CoCmd_Append+0x34>)
    18fe:	47a8      	blx	r5
    1900:	0039      	movs	r1, r7
    1902:	0020      	movs	r0, r4
    1904:	47a8      	blx	r5
    1906:	0031      	movs	r1, r6
    1908:	0020      	movs	r0, r4
    190a:	47a8      	blx	r5
    190c:	210c      	movs	r1, #12
    190e:	0020      	movs	r0, r4
    1910:	4b03      	ldr	r3, [pc, #12]	; (1920 <Ft_Gpu_CoCmd_Append+0x38>)
    1912:	4798      	blx	r3
    1914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	000016b5 	.word	0x000016b5
    191c:	0000169d 	.word	0x0000169d
    1920:	000016d5 	.word	0x000016d5

00001924 <Ft_Gpu_CoCmd_Gradient>:
    1924:	b5f0      	push	{r4, r5, r6, r7, lr}
    1926:	46d6      	mov	lr, sl
    1928:	464f      	mov	r7, r9
    192a:	b580      	push	{r7, lr}
    192c:	b083      	sub	sp, #12
    192e:	0004      	movs	r4, r0
    1930:	468a      	mov	sl, r1
    1932:	4691      	mov	r9, r2
    1934:	9301      	str	r3, [sp, #4]
    1936:	ab0a      	add	r3, sp, #40	; 0x28
    1938:	2200      	movs	r2, #0
    193a:	5e9f      	ldrsh	r7, [r3, r2]
    193c:	ab0b      	add	r3, sp, #44	; 0x2c
    193e:	2200      	movs	r2, #0
    1940:	5e9e      	ldrsh	r6, [r3, r2]
    1942:	2114      	movs	r1, #20
    1944:	4b11      	ldr	r3, [pc, #68]	; (198c <Ft_Gpu_CoCmd_Gradient+0x68>)
    1946:	4798      	blx	r3
    1948:	21f5      	movs	r1, #245	; 0xf5
    194a:	4249      	negs	r1, r1
    194c:	0020      	movs	r0, r4
    194e:	4d10      	ldr	r5, [pc, #64]	; (1990 <Ft_Gpu_CoCmd_Gradient+0x6c>)
    1950:	47a8      	blx	r5
    1952:	464a      	mov	r2, r9
    1954:	0411      	lsls	r1, r2, #16
    1956:	4652      	mov	r2, sl
    1958:	0413      	lsls	r3, r2, #16
    195a:	0c1b      	lsrs	r3, r3, #16
    195c:	4319      	orrs	r1, r3
    195e:	0020      	movs	r0, r4
    1960:	47a8      	blx	r5
    1962:	9901      	ldr	r1, [sp, #4]
    1964:	0020      	movs	r0, r4
    1966:	47a8      	blx	r5
    1968:	0436      	lsls	r6, r6, #16
    196a:	0439      	lsls	r1, r7, #16
    196c:	0c09      	lsrs	r1, r1, #16
    196e:	4331      	orrs	r1, r6
    1970:	0020      	movs	r0, r4
    1972:	47a8      	blx	r5
    1974:	990c      	ldr	r1, [sp, #48]	; 0x30
    1976:	0020      	movs	r0, r4
    1978:	47a8      	blx	r5
    197a:	2114      	movs	r1, #20
    197c:	0020      	movs	r0, r4
    197e:	4b05      	ldr	r3, [pc, #20]	; (1994 <Ft_Gpu_CoCmd_Gradient+0x70>)
    1980:	4798      	blx	r3
    1982:	b003      	add	sp, #12
    1984:	bc0c      	pop	{r2, r3}
    1986:	4691      	mov	r9, r2
    1988:	469a      	mov	sl, r3
    198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    198c:	000016b5 	.word	0x000016b5
    1990:	0000169d 	.word	0x0000169d
    1994:	000016d5 	.word	0x000016d5

00001998 <Ft_Gpu_CoCmd_Keys>:
    1998:	b5f0      	push	{r4, r5, r6, r7, lr}
    199a:	46de      	mov	lr, fp
    199c:	4657      	mov	r7, sl
    199e:	464e      	mov	r6, r9
    19a0:	4645      	mov	r5, r8
    19a2:	b5e0      	push	{r5, r6, r7, lr}
    19a4:	b083      	sub	sp, #12
    19a6:	0005      	movs	r5, r0
    19a8:	468a      	mov	sl, r1
    19aa:	4691      	mov	r9, r2
    19ac:	469b      	mov	fp, r3
    19ae:	ab0c      	add	r3, sp, #48	; 0x30
    19b0:	2200      	movs	r2, #0
    19b2:	5e9b      	ldrsh	r3, [r3, r2]
    19b4:	4698      	mov	r8, r3
    19b6:	ab0d      	add	r3, sp, #52	; 0x34
    19b8:	2700      	movs	r7, #0
    19ba:	5fdf      	ldrsh	r7, [r3, r7]
    19bc:	ab0e      	add	r3, sp, #56	; 0x38
    19be:	881e      	ldrh	r6, [r3, #0]
    19c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    19c2:	4b1a      	ldr	r3, [pc, #104]	; (1a2c <Ft_Gpu_CoCmd_Keys+0x94>)
    19c4:	4798      	blx	r3
    19c6:	b280      	uxth	r0, r0
    19c8:	3011      	adds	r0, #17
    19ca:	b284      	uxth	r4, r0
    19cc:	0021      	movs	r1, r4
    19ce:	0028      	movs	r0, r5
    19d0:	4b17      	ldr	r3, [pc, #92]	; (1a30 <Ft_Gpu_CoCmd_Keys+0x98>)
    19d2:	4798      	blx	r3
    19d4:	21f2      	movs	r1, #242	; 0xf2
    19d6:	4249      	negs	r1, r1
    19d8:	9501      	str	r5, [sp, #4]
    19da:	0028      	movs	r0, r5
    19dc:	4d15      	ldr	r5, [pc, #84]	; (1a34 <Ft_Gpu_CoCmd_Keys+0x9c>)
    19de:	47a8      	blx	r5
    19e0:	464b      	mov	r3, r9
    19e2:	0419      	lsls	r1, r3, #16
    19e4:	4653      	mov	r3, sl
    19e6:	041b      	lsls	r3, r3, #16
    19e8:	0c1b      	lsrs	r3, r3, #16
    19ea:	4319      	orrs	r1, r3
    19ec:	9801      	ldr	r0, [sp, #4]
    19ee:	47a8      	blx	r5
    19f0:	4643      	mov	r3, r8
    19f2:	0419      	lsls	r1, r3, #16
    19f4:	465b      	mov	r3, fp
    19f6:	041b      	lsls	r3, r3, #16
    19f8:	0c1b      	lsrs	r3, r3, #16
    19fa:	4319      	orrs	r1, r3
    19fc:	9801      	ldr	r0, [sp, #4]
    19fe:	47a8      	blx	r5
    1a00:	0436      	lsls	r6, r6, #16
    1a02:	0439      	lsls	r1, r7, #16
    1a04:	0c09      	lsrs	r1, r1, #16
    1a06:	4331      	orrs	r1, r6
    1a08:	9e01      	ldr	r6, [sp, #4]
    1a0a:	0030      	movs	r0, r6
    1a0c:	47a8      	blx	r5
    1a0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1a10:	0030      	movs	r0, r6
    1a12:	4b09      	ldr	r3, [pc, #36]	; (1a38 <Ft_Gpu_CoCmd_Keys+0xa0>)
    1a14:	4798      	blx	r3
    1a16:	0021      	movs	r1, r4
    1a18:	0030      	movs	r0, r6
    1a1a:	4b08      	ldr	r3, [pc, #32]	; (1a3c <Ft_Gpu_CoCmd_Keys+0xa4>)
    1a1c:	4798      	blx	r3
    1a1e:	b003      	add	sp, #12
    1a20:	bc3c      	pop	{r2, r3, r4, r5}
    1a22:	4690      	mov	r8, r2
    1a24:	4699      	mov	r9, r3
    1a26:	46a2      	mov	sl, r4
    1a28:	46ab      	mov	fp, r5
    1a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a2c:	00005045 	.word	0x00005045
    1a30:	000016b5 	.word	0x000016b5
    1a34:	0000169d 	.word	0x0000169d
    1a38:	000016a9 	.word	0x000016a9
    1a3c:	000016d5 	.word	0x000016d5

00001a40 <Ft_Gpu_CoCmd_Dlstart>:
    1a40:	b510      	push	{r4, lr}
    1a42:	0004      	movs	r4, r0
    1a44:	2104      	movs	r1, #4
    1a46:	4b05      	ldr	r3, [pc, #20]	; (1a5c <Ft_Gpu_CoCmd_Dlstart+0x1c>)
    1a48:	4798      	blx	r3
    1a4a:	4905      	ldr	r1, [pc, #20]	; (1a60 <Ft_Gpu_CoCmd_Dlstart+0x20>)
    1a4c:	0020      	movs	r0, r4
    1a4e:	4b05      	ldr	r3, [pc, #20]	; (1a64 <Ft_Gpu_CoCmd_Dlstart+0x24>)
    1a50:	4798      	blx	r3
    1a52:	2104      	movs	r1, #4
    1a54:	0020      	movs	r0, r4
    1a56:	4b04      	ldr	r3, [pc, #16]	; (1a68 <Ft_Gpu_CoCmd_Dlstart+0x28>)
    1a58:	4798      	blx	r3
    1a5a:	bd10      	pop	{r4, pc}
    1a5c:	000016b5 	.word	0x000016b5
    1a60:	ffffff00 	.word	0xffffff00
    1a64:	0000169d 	.word	0x0000169d
    1a68:	000016d5 	.word	0x000016d5

00001a6c <Ft_Gpu_Hal_Open>:
	return true;
}


ft_bool_t Ft_Gpu_Hal_Open(Ft_Gpu_Hal_Context_t *host)
{
    1a6c:	b510      	push	{r4, lr}
     * the pinmux settings and the SPI init, so it's all done
     * in Ft_Gpu_Hal_Init().
     */
    
    // init current write buffer to zero, since we're just starting up
	host->ft_cmd_fifo_wp = host->ft_dl_buff_wp = 0;
    1a6e:	2200      	movs	r2, #0
    1a70:	2300      	movs	r3, #0
    1a72:	8142      	strh	r2, [r0, #10]
    1a74:	8102      	strh	r2, [r0, #8]
    // by default ft800/801/810/811 goes with single dummy byte for read
	host->spinumdummy = 1;
    1a76:	3201      	adds	r2, #1
    1a78:	7542      	strb	r2, [r0, #21]
    // technically one channel, but zero for how the FT library does things
	host->spichannel = 0;
    1a7a:	7503      	strb	r3, [r0, #20]
    // indicate it's ready to go
	host->status = FT_GPU_HAL_OPENED;
    1a7c:	7303      	strb	r3, [r0, #12]

    lcd_set_ft_host_ptr(host);
    1a7e:	4b02      	ldr	r3, [pc, #8]	; (1a88 <Ft_Gpu_Hal_Open+0x1c>)
    1a80:	4798      	blx	r3

	return true;
}
    1a82:	2001      	movs	r0, #1
    1a84:	bd10      	pop	{r4, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	00003789 	.word	0x00003789

00001a8c <Ft_Gpu_Hal_StartTransfer>:
}


/*The APIs for reading/writing transfer continuously only with small buffer system*/
ft_void_t  Ft_Gpu_Hal_StartTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint32_t addr)
{
    1a8c:	b510      	push	{r4, lr}
    1a8e:	0004      	movs	r4, r0
    /* determine if it's a read or write. This affects the preamble send to the
     * LCD (preamble = direction bits and address). */
	if (FT_GPU_READ == rw)
    1a90:	2900      	cmp	r1, #0
    1a92:	d006      	beq.n	1aa2 <Ft_Gpu_Hal_StartTransfer+0x16>
		host->status = FT_GPU_HAL_READING;
	}
    else
    {
        // begin a write transfer
	    lcd_start_xfer(addr, WRT);
    1a94:	2101      	movs	r1, #1
    1a96:	0010      	movs	r0, r2
    1a98:	4b05      	ldr	r3, [pc, #20]	; (1ab0 <Ft_Gpu_Hal_StartTransfer+0x24>)
    1a9a:	4798      	blx	r3
    
		host->status = FT_GPU_HAL_WRITING;
    1a9c:	2302      	movs	r3, #2
    1a9e:	7323      	strb	r3, [r4, #12]
	}
}
    1aa0:	bd10      	pop	{r4, pc}
        lcd_start_xfer(addr, READ);
    1aa2:	0010      	movs	r0, r2
    1aa4:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <Ft_Gpu_Hal_StartTransfer+0x24>)
    1aa6:	4798      	blx	r3
		host->status = FT_GPU_HAL_READING;
    1aa8:	2301      	movs	r3, #1
    1aaa:	7323      	strb	r3, [r4, #12]
    1aac:	e7f8      	b.n	1aa0 <Ft_Gpu_Hal_StartTransfer+0x14>
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	00003405 	.word	0x00003405

00001ab4 <Ft_Gpu_Hal_StartCmdTransfer>:


/*The APIs for writing transfer continuously only*/
ft_void_t  Ft_Gpu_Hal_StartCmdTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint16_t count)
{
    1ab4:	b510      	push	{r4, lr}
    // RAM_CMD = 0x308000
    // starting a transfer = sending preamble (read/write bits and address)
	Ft_Gpu_Hal_StartTransfer(host,rw,host->ft_cmd_fifo_wp + RAM_CMD);
    1ab6:	8902      	ldrh	r2, [r0, #8]
    1ab8:	23c2      	movs	r3, #194	; 0xc2
    1aba:	039b      	lsls	r3, r3, #14
    1abc:	469c      	mov	ip, r3
    1abe:	4462      	add	r2, ip
    1ac0:	4b01      	ldr	r3, [pc, #4]	; (1ac8 <Ft_Gpu_Hal_StartCmdTransfer+0x14>)
    1ac2:	4798      	blx	r3
}
    1ac4:	bd10      	pop	{r4, pc}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	00001a8d 	.word	0x00001a8d

00001acc <Ft_Gpu_Hal_Transfer8>:
    Ft_Gpu_Hal_Transfer8(host,0);
}


ft_uint8_t Ft_Gpu_Hal_Transfer8(Ft_Gpu_Hal_Context_t *host, ft_uint8_t value)
{
    1acc:	b500      	push	{lr}
    1ace:	b085      	sub	sp, #20
    1ad0:	466b      	mov	r3, sp
    1ad2:	71d9      	strb	r1, [r3, #7]
    ft_uint8_t read_byte = 0;
    1ad4:	2200      	movs	r2, #0
    1ad6:	230f      	movs	r3, #15
    1ad8:	446b      	add	r3, sp
    1ada:	701a      	strb	r2, [r3, #0]
    
    // transmit or receive a byte
    if(host->status == FT_GPU_HAL_WRITING)
    1adc:	7b03      	ldrb	r3, [r0, #12]
    1ade:	2b02      	cmp	r3, #2
    1ae0:	d009      	beq.n	1af6 <Ft_Gpu_Hal_Transfer8+0x2a>
        lcd_host_write(&value, 1);
    else
        lcd_host_read(&read_byte, 1);
    1ae2:	2101      	movs	r1, #1
    1ae4:	200f      	movs	r0, #15
    1ae6:	4468      	add	r0, sp
    1ae8:	4b06      	ldr	r3, [pc, #24]	; (1b04 <Ft_Gpu_Hal_Transfer8+0x38>)
    1aea:	4798      	blx	r3
    
    return read_byte;
    1aec:	230f      	movs	r3, #15
    1aee:	446b      	add	r3, sp
    1af0:	7818      	ldrb	r0, [r3, #0]
}
    1af2:	b005      	add	sp, #20
    1af4:	bd00      	pop	{pc}
        lcd_host_write(&value, 1);
    1af6:	2101      	movs	r1, #1
    1af8:	466b      	mov	r3, sp
    1afa:	1dd8      	adds	r0, r3, #7
    1afc:	4b02      	ldr	r3, [pc, #8]	; (1b08 <Ft_Gpu_Hal_Transfer8+0x3c>)
    1afe:	4798      	blx	r3
    1b00:	e7f4      	b.n	1aec <Ft_Gpu_Hal_Transfer8+0x20>
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	000034a9 	.word	0x000034a9
    1b08:	00003521 	.word	0x00003521

00001b0c <Ft_Gpu_Hal_TransferString>:
{
    1b0c:	b570      	push	{r4, r5, r6, lr}
    1b0e:	0005      	movs	r5, r0
    1b10:	000e      	movs	r6, r1
    ft_uint16_t length = strlen((const char*) string);
    1b12:	0008      	movs	r0, r1
    1b14:	4b09      	ldr	r3, [pc, #36]	; (1b3c <Ft_Gpu_Hal_TransferString+0x30>)
    1b16:	4798      	blx	r3
    1b18:	b280      	uxth	r0, r0
    while(length--)
    1b1a:	e005      	b.n	1b28 <Ft_Gpu_Hal_TransferString+0x1c>
       Ft_Gpu_Hal_Transfer8(host, *string);
    1b1c:	7831      	ldrb	r1, [r6, #0]
    1b1e:	0028      	movs	r0, r5
    1b20:	4b07      	ldr	r3, [pc, #28]	; (1b40 <Ft_Gpu_Hal_TransferString+0x34>)
    1b22:	4798      	blx	r3
       string ++;
    1b24:	3601      	adds	r6, #1
    while(length--)
    1b26:	0020      	movs	r0, r4
    1b28:	1e44      	subs	r4, r0, #1
    1b2a:	b2a4      	uxth	r4, r4
    1b2c:	2800      	cmp	r0, #0
    1b2e:	d1f5      	bne.n	1b1c <Ft_Gpu_Hal_TransferString+0x10>
    Ft_Gpu_Hal_Transfer8(host,0);
    1b30:	2100      	movs	r1, #0
    1b32:	0028      	movs	r0, r5
    1b34:	4b02      	ldr	r3, [pc, #8]	; (1b40 <Ft_Gpu_Hal_TransferString+0x34>)
    1b36:	4798      	blx	r3
}
    1b38:	bd70      	pop	{r4, r5, r6, pc}
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	00005045 	.word	0x00005045
    1b40:	00001acd 	.word	0x00001acd

00001b44 <Ft_Gpu_Hal_Transfer16>:


ft_uint16_t Ft_Gpu_Hal_Transfer16(Ft_Gpu_Hal_Context_t *host, ft_uint16_t value)
{
    1b44:	b570      	push	{r4, r5, r6, lr}
    1b46:	0004      	movs	r4, r0
    1b48:	000d      	movs	r5, r1
	ft_uint16_t retVal = 0;

    // transmit or receive two bytes
    if (host->status == FT_GPU_HAL_WRITING)
    1b4a:	7b03      	ldrb	r3, [r0, #12]
    1b4c:	2b02      	cmp	r3, #2
    1b4e:	d00a      	beq.n	1b66 <Ft_Gpu_Hal_Transfer16+0x22>
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer8(host,0);
    1b50:	2100      	movs	r1, #0
    1b52:	4d09      	ldr	r5, [pc, #36]	; (1b78 <Ft_Gpu_Hal_Transfer16+0x34>)
    1b54:	47a8      	blx	r5
    1b56:	0006      	movs	r6, r0
		retVal |= (ft_uint16_t)Ft_Gpu_Hal_Transfer8(host,0) << 8;
    1b58:	2100      	movs	r1, #0
    1b5a:	0020      	movs	r0, r4
    1b5c:	47a8      	blx	r5
    1b5e:	0200      	lsls	r0, r0, #8
    1b60:	4330      	orrs	r0, r6
    1b62:	b280      	uxth	r0, r0
	}

	return retVal;
}
    1b64:	bd70      	pop	{r4, r5, r6, pc}
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
    1b66:	b2c9      	uxtb	r1, r1
    1b68:	4e03      	ldr	r6, [pc, #12]	; (1b78 <Ft_Gpu_Hal_Transfer16+0x34>)
    1b6a:	47b0      	blx	r6
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
    1b6c:	0a29      	lsrs	r1, r5, #8
    1b6e:	0020      	movs	r0, r4
    1b70:	47b0      	blx	r6
	ft_uint16_t retVal = 0;
    1b72:	2000      	movs	r0, #0
    1b74:	e7f6      	b.n	1b64 <Ft_Gpu_Hal_Transfer16+0x20>
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	00001acd 	.word	0x00001acd

00001b7c <Ft_Gpu_Hal_Transfer32>:


ft_uint32_t Ft_Gpu_Hal_Transfer32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t value)
{
    1b7c:	b570      	push	{r4, r5, r6, lr}
    1b7e:	0004      	movs	r4, r0
    1b80:	000d      	movs	r5, r1
	ft_uint32_t retVal = 0;
    
    // transmit or receive four bytes
	if (host->status == FT_GPU_HAL_WRITING)
    1b82:	7b03      	ldrb	r3, [r0, #12]
    1b84:	2b02      	cmp	r3, #2
    1b86:	d009      	beq.n	1b9c <Ft_Gpu_Hal_Transfer32+0x20>
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer16(host,0);
    1b88:	2100      	movs	r1, #0
    1b8a:	4e08      	ldr	r6, [pc, #32]	; (1bac <Ft_Gpu_Hal_Transfer32+0x30>)
    1b8c:	47b0      	blx	r6
    1b8e:	0005      	movs	r5, r0
		retVal |= (ft_uint32_t)Ft_Gpu_Hal_Transfer16(host,0) << 16;
    1b90:	2100      	movs	r1, #0
    1b92:	0020      	movs	r0, r4
    1b94:	47b0      	blx	r6
    1b96:	0400      	lsls	r0, r0, #16
    1b98:	4328      	orrs	r0, r5
	}
    
	return retVal;
}
    1b9a:	bd70      	pop	{r4, r5, r6, pc}
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
    1b9c:	b289      	uxth	r1, r1
    1b9e:	4e03      	ldr	r6, [pc, #12]	; (1bac <Ft_Gpu_Hal_Transfer32+0x30>)
    1ba0:	47b0      	blx	r6
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
    1ba2:	0c29      	lsrs	r1, r5, #16
    1ba4:	0020      	movs	r0, r4
    1ba6:	47b0      	blx	r6
	ft_uint32_t retVal = 0;
    1ba8:	2000      	movs	r0, #0
    1baa:	e7f6      	b.n	1b9a <Ft_Gpu_Hal_Transfer32+0x1e>
    1bac:	00001b45 	.word	0x00001b45

00001bb0 <Ft_Gpu_Hal_EndTransfer>:


ft_void_t Ft_Gpu_Hal_EndTransfer(Ft_Gpu_Hal_Context_t *host)
{
    1bb0:	b510      	push	{r4, lr}
    1bb2:	0004      	movs	r4, r0
    // deselect the slave (let slave CS float high for SIM System)
    lcd_stop_xfer();
    1bb4:	4b02      	ldr	r3, [pc, #8]	; (1bc0 <Ft_Gpu_Hal_EndTransfer+0x10>)
    1bb6:	4798      	blx	r3
    
	host->status = FT_GPU_HAL_OPENED;
    1bb8:	2300      	movs	r3, #0
    1bba:	7323      	strb	r3, [r4, #12]
}
    1bbc:	bd10      	pop	{r4, pc}
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	0000348d 	.word	0x0000348d

00001bc4 <Ft_Gpu_Hal_Rd8>:


ft_uint8_t Ft_Gpu_Hal_Rd8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    1bc4:	b570      	push	{r4, r5, r6, lr}
    1bc6:	0004      	movs	r4, r0
    1bc8:	000a      	movs	r2, r1
	ft_uint8_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    1bca:	2100      	movs	r1, #0
    1bcc:	4b05      	ldr	r3, [pc, #20]	; (1be4 <Ft_Gpu_Hal_Rd8+0x20>)
    1bce:	4798      	blx	r3
    
    // read a byte
	value = Ft_Gpu_Hal_Transfer8(host,0);
    1bd0:	2100      	movs	r1, #0
    1bd2:	0020      	movs	r0, r4
    1bd4:	4b04      	ldr	r3, [pc, #16]	; (1be8 <Ft_Gpu_Hal_Rd8+0x24>)
    1bd6:	4798      	blx	r3
    1bd8:	0005      	movs	r5, r0

    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1bda:	0020      	movs	r0, r4
    1bdc:	4b03      	ldr	r3, [pc, #12]	; (1bec <Ft_Gpu_Hal_Rd8+0x28>)
    1bde:	4798      	blx	r3
    
	return value;
}
    1be0:	0028      	movs	r0, r5
    1be2:	bd70      	pop	{r4, r5, r6, pc}
    1be4:	00001a8d 	.word	0x00001a8d
    1be8:	00001acd 	.word	0x00001acd
    1bec:	00001bb1 	.word	0x00001bb1

00001bf0 <Ft_Gpu_Hal_Rd16>:


ft_uint16_t Ft_Gpu_Hal_Rd16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    1bf0:	b570      	push	{r4, r5, r6, lr}
    1bf2:	0004      	movs	r4, r0
    1bf4:	000a      	movs	r2, r1
	ft_uint16_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    1bf6:	2100      	movs	r1, #0
    1bf8:	4b05      	ldr	r3, [pc, #20]	; (1c10 <Ft_Gpu_Hal_Rd16+0x20>)
    1bfa:	4798      	blx	r3
    
    // read 2 bytes
	value = Ft_Gpu_Hal_Transfer16(host,0);
    1bfc:	2100      	movs	r1, #0
    1bfe:	0020      	movs	r0, r4
    1c00:	4b04      	ldr	r3, [pc, #16]	; (1c14 <Ft_Gpu_Hal_Rd16+0x24>)
    1c02:	4798      	blx	r3
    1c04:	0005      	movs	r5, r0
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1c06:	0020      	movs	r0, r4
    1c08:	4b03      	ldr	r3, [pc, #12]	; (1c18 <Ft_Gpu_Hal_Rd16+0x28>)
    1c0a:	4798      	blx	r3
    
	return value;
}
    1c0c:	0028      	movs	r0, r5
    1c0e:	bd70      	pop	{r4, r5, r6, pc}
    1c10:	00001a8d 	.word	0x00001a8d
    1c14:	00001b45 	.word	0x00001b45
    1c18:	00001bb1 	.word	0x00001bb1

00001c1c <Ft_Gpu_Hal_Wr8>:
	return value;
}


ft_void_t Ft_Gpu_Hal_Wr8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint8_t v)
{	
    1c1c:	b570      	push	{r4, r5, r6, lr}
    1c1e:	0004      	movs	r4, r0
    1c20:	0015      	movs	r5, r2
    
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1c22:	000a      	movs	r2, r1
    1c24:	2101      	movs	r1, #1
    1c26:	4b05      	ldr	r3, [pc, #20]	; (1c3c <Ft_Gpu_Hal_Wr8+0x20>)
    1c28:	4798      	blx	r3
    
    // read a byte
	Ft_Gpu_Hal_Transfer8(host,v);
    1c2a:	0029      	movs	r1, r5
    1c2c:	0020      	movs	r0, r4
    1c2e:	4b04      	ldr	r3, [pc, #16]	; (1c40 <Ft_Gpu_Hal_Wr8+0x24>)
    1c30:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1c32:	0020      	movs	r0, r4
    1c34:	4b03      	ldr	r3, [pc, #12]	; (1c44 <Ft_Gpu_Hal_Wr8+0x28>)
    1c36:	4798      	blx	r3
}
    1c38:	bd70      	pop	{r4, r5, r6, pc}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	00001a8d 	.word	0x00001a8d
    1c40:	00001acd 	.word	0x00001acd
    1c44:	00001bb1 	.word	0x00001bb1

00001c48 <Ft_Gpu_Hal_Wr16>:


ft_void_t Ft_Gpu_Hal_Wr16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint16_t v)
{
    1c48:	b570      	push	{r4, r5, r6, lr}
    1c4a:	0004      	movs	r4, r0
    1c4c:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1c4e:	000a      	movs	r2, r1
    1c50:	2101      	movs	r1, #1
    1c52:	4b05      	ldr	r3, [pc, #20]	; (1c68 <Ft_Gpu_Hal_Wr16+0x20>)
    1c54:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer16(host,v);
    1c56:	0029      	movs	r1, r5
    1c58:	0020      	movs	r0, r4
    1c5a:	4b04      	ldr	r3, [pc, #16]	; (1c6c <Ft_Gpu_Hal_Wr16+0x24>)
    1c5c:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1c5e:	0020      	movs	r0, r4
    1c60:	4b03      	ldr	r3, [pc, #12]	; (1c70 <Ft_Gpu_Hal_Wr16+0x28>)
    1c62:	4798      	blx	r3
}
    1c64:	bd70      	pop	{r4, r5, r6, pc}
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	00001a8d 	.word	0x00001a8d
    1c6c:	00001b45 	.word	0x00001b45
    1c70:	00001bb1 	.word	0x00001bb1

00001c74 <Ft_Gpu_Hal_Wr32>:


ft_void_t Ft_Gpu_Hal_Wr32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint32_t v)
{
    1c74:	b570      	push	{r4, r5, r6, lr}
    1c76:	0004      	movs	r4, r0
    1c78:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1c7a:	000a      	movs	r2, r1
    1c7c:	2101      	movs	r1, #1
    1c7e:	4b05      	ldr	r3, [pc, #20]	; (1c94 <Ft_Gpu_Hal_Wr32+0x20>)
    1c80:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer32(host,v);
    1c82:	0029      	movs	r1, r5
    1c84:	0020      	movs	r0, r4
    1c86:	4b04      	ldr	r3, [pc, #16]	; (1c98 <Ft_Gpu_Hal_Wr32+0x24>)
    1c88:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1c8a:	0020      	movs	r0, r4
    1c8c:	4b03      	ldr	r3, [pc, #12]	; (1c9c <Ft_Gpu_Hal_Wr32+0x28>)
    1c8e:	4798      	blx	r3
}
    1c90:	bd70      	pop	{r4, r5, r6, pc}
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	00001a8d 	.word	0x00001a8d
    1c98:	00001b7d 	.word	0x00001b7d
    1c9c:	00001bb1 	.word	0x00001bb1

00001ca0 <Ft_Gpu_Hal_Updatecmdfifo>:
	lcd_host_cmd((cmd & 0xFF), ((cmd >> 8) & 0xFF));
}


ft_void_t Ft_Gpu_Hal_Updatecmdfifo(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    1ca0:	b510      	push	{r4, lr}
	host->ft_cmd_fifo_wp  = (host->ft_cmd_fifo_wp + count) & 4095;
    1ca2:	8902      	ldrh	r2, [r0, #8]
    1ca4:	1852      	adds	r2, r2, r1
    1ca6:	0512      	lsls	r2, r2, #20
    1ca8:	0d12      	lsrs	r2, r2, #20

	//4 byte alignment
	host->ft_cmd_fifo_wp = (host->ft_cmd_fifo_wp + 3) & 0xffc;
    1caa:	3203      	adds	r2, #3
    1cac:	4903      	ldr	r1, [pc, #12]	; (1cbc <Ft_Gpu_Hal_Updatecmdfifo+0x1c>)
    1cae:	400a      	ands	r2, r1
    1cb0:	8102      	strh	r2, [r0, #8]
    
	Ft_Gpu_Hal_Wr16(host,REG_CMD_WRITE,host->ft_cmd_fifo_wp);
    1cb2:	4903      	ldr	r1, [pc, #12]	; (1cc0 <Ft_Gpu_Hal_Updatecmdfifo+0x20>)
    1cb4:	4b03      	ldr	r3, [pc, #12]	; (1cc4 <Ft_Gpu_Hal_Updatecmdfifo+0x24>)
    1cb6:	4798      	blx	r3
}
    1cb8:	bd10      	pop	{r4, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	00000ffc 	.word	0x00000ffc
    1cc0:	003020fc 	.word	0x003020fc
    1cc4:	00001c49 	.word	0x00001c49

00001cc8 <Ft_Gpu_Cmdfifo_Freespace>:


ft_uint16_t Ft_Gpu_Cmdfifo_Freespace(Ft_Gpu_Hal_Context_t *host)
{
    1cc8:	b510      	push	{r4, lr}
    /* calculate the free space for the coprocessor FIFO. Refer to pg 150 in
     * the FT81X_Series_Programmers_Guide datasheet */
	ft_uint16_t fullness,retval;

    // REG_CMD_READ = 0x3020F8
	fullness = (host->ft_cmd_fifo_wp - Ft_Gpu_Hal_Rd16(host,REG_CMD_READ)) & 4095;
    1cca:	8904      	ldrh	r4, [r0, #8]
    1ccc:	4904      	ldr	r1, [pc, #16]	; (1ce0 <Ft_Gpu_Cmdfifo_Freespace+0x18>)
    1cce:	4b05      	ldr	r3, [pc, #20]	; (1ce4 <Ft_Gpu_Cmdfifo_Freespace+0x1c>)
    1cd0:	4798      	blx	r3
    1cd2:	1a24      	subs	r4, r4, r0
    1cd4:	0524      	lsls	r4, r4, #20
    1cd6:	0d24      	lsrs	r4, r4, #20
    
	retval = (FT_CMD_FIFO_SIZE - 4) - fullness;
    1cd8:	4803      	ldr	r0, [pc, #12]	; (1ce8 <Ft_Gpu_Cmdfifo_Freespace+0x20>)
    1cda:	1b00      	subs	r0, r0, r4
    1cdc:	b280      	uxth	r0, r0
    
	return (retval);
}
    1cde:	bd10      	pop	{r4, pc}
    1ce0:	003020f8 	.word	0x003020f8
    1ce4:	00001bf1 	.word	0x00001bf1
    1ce8:	00000ffc 	.word	0x00000ffc

00001cec <Ft_Gpu_Hal_CheckCmdBuffer>:
}
#endif


ft_void_t Ft_Gpu_Hal_CheckCmdBuffer(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    1cec:	b570      	push	{r4, r5, r6, lr}
    1cee:	0005      	movs	r5, r0
    1cf0:	000c      	movs	r4, r1
   ft_uint16_t getfreespace;
   do{
       // This "fixme" was here in the original code.
	   // FIXME: This can get stuck, non-even is returned in case of coprocessor issue
        getfreespace = Ft_Gpu_Cmdfifo_Freespace(host);
    1cf2:	0028      	movs	r0, r5
    1cf4:	4b02      	ldr	r3, [pc, #8]	; (1d00 <Ft_Gpu_Hal_CheckCmdBuffer+0x14>)
    1cf6:	4798      	blx	r3
        
   // loop until there is free space, else break if there is enough free space
   }while(getfreespace < count);
    1cf8:	42a0      	cmp	r0, r4
    1cfa:	d3fa      	bcc.n	1cf2 <Ft_Gpu_Hal_CheckCmdBuffer+0x6>
}
    1cfc:	bd70      	pop	{r4, r5, r6, pc}
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	00001cc9 	.word	0x00001cc9

00001d04 <Ft_Gpu_Hal_WaitCmdfifo_empty>:


ft_void_t Ft_Gpu_Hal_WaitCmdfifo_empty(Ft_Gpu_Hal_Context_t *host)
{
    1d04:	b570      	push	{r4, r5, r6, lr}
    1d06:	0005      	movs	r5, r0
   /* wait for the FIFO read and write pointers to equal each other.
    * This is the naive way to do it, refer to pg 154 in 
    * the FT81X_Series_Programmers_Guide datasheet */
   while(Ft_Gpu_Hal_Rd16(host,REG_CMD_READ) != Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE));
    1d08:	4907      	ldr	r1, [pc, #28]	; (1d28 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x24>)
    1d0a:	0028      	movs	r0, r5
    1d0c:	4c07      	ldr	r4, [pc, #28]	; (1d2c <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    1d0e:	47a0      	blx	r4
    1d10:	0006      	movs	r6, r0
    1d12:	4907      	ldr	r1, [pc, #28]	; (1d30 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    1d14:	0028      	movs	r0, r5
    1d16:	47a0      	blx	r4
    1d18:	4286      	cmp	r6, r0
    1d1a:	d1f5      	bne.n	1d08 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x4>
   
   host->ft_cmd_fifo_wp = Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE);
    1d1c:	4904      	ldr	r1, [pc, #16]	; (1d30 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    1d1e:	0028      	movs	r0, r5
    1d20:	4b02      	ldr	r3, [pc, #8]	; (1d2c <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    1d22:	4798      	blx	r3
    1d24:	8128      	strh	r0, [r5, #8]
}
    1d26:	bd70      	pop	{r4, r5, r6, pc}
    1d28:	003020f8 	.word	0x003020f8
    1d2c:	00001bf1 	.word	0x00001bf1
    1d30:	003020fc 	.word	0x003020fc

00001d34 <Ft_Gpu_Hal_WrCmd32>:
    host->ft_cmd_fifo_wp = 0;
}


ft_void_t Ft_Gpu_Hal_WrCmd32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t cmd)
{
    1d34:	b570      	push	{r4, r5, r6, lr}
    1d36:	0004      	movs	r4, r0
    1d38:	000d      	movs	r5, r1
    Ft_Gpu_Hal_CheckCmdBuffer(host, sizeof(cmd));
    1d3a:	2104      	movs	r1, #4
    1d3c:	4b07      	ldr	r3, [pc, #28]	; (1d5c <Ft_Gpu_Hal_WrCmd32+0x28>)
    1d3e:	4798      	blx	r3
    
    Ft_Gpu_Hal_Wr32(host, RAM_CMD + host->ft_cmd_fifo_wp, cmd);
    1d40:	8921      	ldrh	r1, [r4, #8]
    1d42:	23c2      	movs	r3, #194	; 0xc2
    1d44:	039b      	lsls	r3, r3, #14
    1d46:	469c      	mov	ip, r3
    1d48:	4461      	add	r1, ip
    1d4a:	002a      	movs	r2, r5
    1d4c:	0020      	movs	r0, r4
    1d4e:	4b04      	ldr	r3, [pc, #16]	; (1d60 <Ft_Gpu_Hal_WrCmd32+0x2c>)
    1d50:	4798      	blx	r3
    
    Ft_Gpu_Hal_Updatecmdfifo(host, sizeof(cmd));
    1d52:	2104      	movs	r1, #4
    1d54:	0020      	movs	r0, r4
    1d56:	4b03      	ldr	r3, [pc, #12]	; (1d64 <Ft_Gpu_Hal_WrCmd32+0x30>)
    1d58:	4798      	blx	r3
}
    1d5a:	bd70      	pop	{r4, r5, r6, pc}
    1d5c:	00001ced 	.word	0x00001ced
    1d60:	00001c75 	.word	0x00001c75
    1d64:	00001ca1 	.word	0x00001ca1

00001d68 <month31>:
 * Return Values(s) : int
 * Description      : Check if the month has 31 days. Return 1 if yes, else
 *  0 if no
 */
int month31(char month){
	if(month==1 || month==3 || month==5 || month==7 || month==8 || \
    1d68:	2801      	cmp	r0, #1
    1d6a:	d00f      	beq.n	1d8c <month31+0x24>
    1d6c:	2803      	cmp	r0, #3
    1d6e:	d00f      	beq.n	1d90 <month31+0x28>
    1d70:	2805      	cmp	r0, #5
    1d72:	d00f      	beq.n	1d94 <month31+0x2c>
    1d74:	2807      	cmp	r0, #7
    1d76:	d00f      	beq.n	1d98 <month31+0x30>
    1d78:	2808      	cmp	r0, #8
    1d7a:	d00f      	beq.n	1d9c <month31+0x34>
    1d7c:	280a      	cmp	r0, #10
    1d7e:	d00f      	beq.n	1da0 <month31+0x38>
        month==10 || month==12)
    1d80:	280c      	cmp	r0, #12
    1d82:	d001      	beq.n	1d88 <month31+0x20>
		return 1;
	else
		return 0;
    1d84:	2000      	movs	r0, #0
}//end month31
    1d86:	4770      	bx	lr
		return 1;
    1d88:	380b      	subs	r0, #11
    1d8a:	e7fc      	b.n	1d86 <month31+0x1e>
    1d8c:	2001      	movs	r0, #1
    1d8e:	e7fa      	b.n	1d86 <month31+0x1e>
    1d90:	2001      	movs	r0, #1
    1d92:	e7f8      	b.n	1d86 <month31+0x1e>
    1d94:	2001      	movs	r0, #1
    1d96:	e7f6      	b.n	1d86 <month31+0x1e>
    1d98:	2001      	movs	r0, #1
    1d9a:	e7f4      	b.n	1d86 <month31+0x1e>
    1d9c:	2001      	movs	r0, #1
    1d9e:	e7f2      	b.n	1d86 <month31+0x1e>
    1da0:	2001      	movs	r0, #1
    1da2:	e7f0      	b.n	1d86 <month31+0x1e>

00001da4 <printTime>:
/* Function Name    : printTime
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Get the current time and date, display it on the screen
 */
void printTime(){
    1da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1da6:	46d6      	mov	lr, sl
    1da8:	464f      	mov	r7, r9
    1daa:	4646      	mov	r6, r8
    1dac:	b5c0      	push	{r6, r7, lr}
    1dae:	b08a      	sub	sp, #40	; 0x28
	int fstYloc = disHei - 60, sndYloc = disHei - 30;
	char buff[32];
	//get current time and date
	rtc_calendar_get_time(&rtc_instance, &time);
    1db0:	4c1b      	ldr	r4, [pc, #108]	; (1e20 <printTime+0x7c>)
    1db2:	0021      	movs	r1, r4
    1db4:	481b      	ldr	r0, [pc, #108]	; (1e24 <printTime+0x80>)
    1db6:	4b1c      	ldr	r3, [pc, #112]	; (1e28 <printTime+0x84>)
    1db8:	4798      	blx	r3
	//put together a string for time and send to display
	snprintf(buff, 32, "%02d:%02d:%02d", time.hour, time.minute, time.second);
    1dba:	78a3      	ldrb	r3, [r4, #2]
    1dbc:	7862      	ldrb	r2, [r4, #1]
    1dbe:	7821      	ldrb	r1, [r4, #0]
    1dc0:	ad02      	add	r5, sp, #8
    1dc2:	9101      	str	r1, [sp, #4]
    1dc4:	9200      	str	r2, [sp, #0]
    1dc6:	4a19      	ldr	r2, [pc, #100]	; (1e2c <printTime+0x88>)
    1dc8:	2120      	movs	r1, #32
    1dca:	0028      	movs	r0, r5
    1dcc:	4e18      	ldr	r6, [pc, #96]	; (1e30 <printTime+0x8c>)
    1dce:	46b2      	mov	sl, r6
    1dd0:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Text(phost, 10, fstYloc, font, 0, buff);
    1dd2:	4b18      	ldr	r3, [pc, #96]	; (1e34 <printTime+0x90>)
    1dd4:	4699      	mov	r9, r3
    1dd6:	781b      	ldrb	r3, [r3, #0]
    1dd8:	4a17      	ldr	r2, [pc, #92]	; (1e38 <printTime+0x94>)
    1dda:	4690      	mov	r8, r2
    1ddc:	6810      	ldr	r0, [r2, #0]
    1dde:	9501      	str	r5, [sp, #4]
    1de0:	2700      	movs	r7, #0
    1de2:	9700      	str	r7, [sp, #0]
    1de4:	22d2      	movs	r2, #210	; 0xd2
    1de6:	0052      	lsls	r2, r2, #1
    1de8:	210a      	movs	r1, #10
    1dea:	4e14      	ldr	r6, [pc, #80]	; (1e3c <printTime+0x98>)
    1dec:	47b0      	blx	r6
	
	//put together a string for date and send to display
	snprintf(buff, 32, "%02d/%02d/%04d", time.month, time.day, time.year);
    1dee:	7963      	ldrb	r3, [r4, #5]
    1df0:	7922      	ldrb	r2, [r4, #4]
    1df2:	88e1      	ldrh	r1, [r4, #6]
    1df4:	9101      	str	r1, [sp, #4]
    1df6:	9200      	str	r2, [sp, #0]
    1df8:	4a11      	ldr	r2, [pc, #68]	; (1e40 <printTime+0x9c>)
    1dfa:	2120      	movs	r1, #32
    1dfc:	0028      	movs	r0, r5
    1dfe:	47d0      	blx	sl
	Ft_Gpu_CoCmd_Text(phost, 10, sndYloc, font, 0, buff);
    1e00:	464b      	mov	r3, r9
    1e02:	781b      	ldrb	r3, [r3, #0]
    1e04:	4642      	mov	r2, r8
    1e06:	6810      	ldr	r0, [r2, #0]
    1e08:	9501      	str	r5, [sp, #4]
    1e0a:	9700      	str	r7, [sp, #0]
    1e0c:	22e1      	movs	r2, #225	; 0xe1
    1e0e:	0052      	lsls	r2, r2, #1
    1e10:	210a      	movs	r1, #10
    1e12:	47b0      	blx	r6
}//end printTime
    1e14:	b00a      	add	sp, #40	; 0x28
    1e16:	bc1c      	pop	{r2, r3, r4}
    1e18:	4690      	mov	r8, r2
    1e1a:	4699      	mov	r9, r3
    1e1c:	46a2      	mov	sl, r4
    1e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e20:	20000780 	.word	0x20000780
    1e24:	20000468 	.word	0x20000468
    1e28:	00000555 	.word	0x00000555
    1e2c:	00005940 	.word	0x00005940
    1e30:	00004fe1 	.word	0x00004fe1
    1e34:	20000009 	.word	0x20000009
    1e38:	20000788 	.word	0x20000788
    1e3c:	000016f1 	.word	0x000016f1
    1e40:	00005950 	.word	0x00005950

00001e44 <play>:
/* Function Name    : play
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Play 3 consecutive beep at 660Hz when called
 */
void play(){
    1e44:	b510      	push	{r4, lr}
	//set full volume
	Ft_Gpu_Hal_Wr8(phost,REG_VOL_SOUND,0x255);
    1e46:	4c0d      	ldr	r4, [pc, #52]	; (1e7c <play+0x38>)
    1e48:	2255      	movs	r2, #85	; 0x55
    1e4a:	490d      	ldr	r1, [pc, #52]	; (1e80 <play+0x3c>)
    1e4c:	6820      	ldr	r0, [r4, #0]
    1e4e:	4b0d      	ldr	r3, [pc, #52]	; (1e84 <play+0x40>)
    1e50:	4798      	blx	r3
	//set one single beet at 660Hz
	Ft_Gpu_Hal_Wr16(phost, REG_SOUND,  (73<< 8) | 0x10);
    1e52:	6820      	ldr	r0, [r4, #0]
    1e54:	4a0c      	ldr	r2, [pc, #48]	; (1e88 <play+0x44>)
    1e56:	490d      	ldr	r1, [pc, #52]	; (1e8c <play+0x48>)
    1e58:	4b0d      	ldr	r3, [pc, #52]	; (1e90 <play+0x4c>)
    1e5a:	4798      	blx	r3

	//play it 3 times delay 100ms inbetween
	int i;
	for (i=0; i < 3; i++){
    1e5c:	2400      	movs	r4, #0
    1e5e:	e009      	b.n	1e74 <play+0x30>
		Ft_Gpu_Hal_Wr8(phost, REG_PLAY, 1);
    1e60:	4b06      	ldr	r3, [pc, #24]	; (1e7c <play+0x38>)
    1e62:	6818      	ldr	r0, [r3, #0]
    1e64:	2201      	movs	r2, #1
    1e66:	490b      	ldr	r1, [pc, #44]	; (1e94 <play+0x50>)
    1e68:	4b06      	ldr	r3, [pc, #24]	; (1e84 <play+0x40>)
    1e6a:	4798      	blx	r3
		delay_ms(100);
    1e6c:	2064      	movs	r0, #100	; 0x64
    1e6e:	4b0a      	ldr	r3, [pc, #40]	; (1e98 <play+0x54>)
    1e70:	4798      	blx	r3
	for (i=0; i < 3; i++){
    1e72:	3401      	adds	r4, #1
    1e74:	2c02      	cmp	r4, #2
    1e76:	ddf3      	ble.n	1e60 <play+0x1c>
	}
}//end play
    1e78:	bd10      	pop	{r4, pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	20000788 	.word	0x20000788
    1e80:	00302084 	.word	0x00302084
    1e84:	00001c1d 	.word	0x00001c1d
    1e88:	00004910 	.word	0x00004910
    1e8c:	00302088 	.word	0x00302088
    1e90:	00001c49 	.word	0x00001c49
    1e94:	0030208c 	.word	0x0030208c
    1e98:	00000151 	.word	0x00000151

00001e9c <drawTitle>:
/* Function Name    : drawTitle
 * Parameters       : char *title 
 * Return Values(s) : void
 * Description      : Draw the title to each screen based on title received
 */
void drawTitle(char *title){
    1e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e9e:	46ce      	mov	lr, r9
    1ea0:	4647      	mov	r7, r8
    1ea2:	b580      	push	{r7, lr}
    1ea4:	b085      	sub	sp, #20
    1ea6:	4681      	mov	r9, r0
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_XY(disWid/3,0));
    1ea8:	4c13      	ldr	r4, [pc, #76]	; (1ef8 <drawTitle+0x5c>)
    1eaa:	4914      	ldr	r1, [pc, #80]	; (1efc <drawTitle+0x60>)
    1eac:	6820      	ldr	r0, [r4, #0]
    1eae:	4d14      	ldr	r5, [pc, #80]	; (1f00 <drawTitle+0x64>)
    1eb0:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_SIZE((disWid*3/2), 50));
    1eb2:	4914      	ldr	r1, [pc, #80]	; (1f04 <drawTitle+0x68>)
    1eb4:	6820      	ldr	r0, [r4, #0]
    1eb6:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Gradient(phost, disWid/3*2,0, 0x8B90FF, disWid/3*2, 50,0x2933FF);
    1eb8:	2685      	movs	r6, #133	; 0x85
    1eba:	00b6      	lsls	r6, r6, #2
    1ebc:	6820      	ldr	r0, [r4, #0]
    1ebe:	4b12      	ldr	r3, [pc, #72]	; (1f08 <drawTitle+0x6c>)
    1ec0:	9302      	str	r3, [sp, #8]
    1ec2:	2332      	movs	r3, #50	; 0x32
    1ec4:	9301      	str	r3, [sp, #4]
    1ec6:	9600      	str	r6, [sp, #0]
    1ec8:	4b10      	ldr	r3, [pc, #64]	; (1f0c <drawTitle+0x70>)
    1eca:	2200      	movs	r2, #0
    1ecc:	0031      	movs	r1, r6
    1ece:	4f10      	ldr	r7, [pc, #64]	; (1f10 <drawTitle+0x74>)
    1ed0:	47b8      	blx	r7
//	Ft_Gpu_CoCmd_Gradient(phost, disWid/3,0, 0x2933FF, disWid, 50,0x8B90FF);
	Ft_Gpu_CoCmd_Text(phost, (disWid/3*2), 30, 30, OPT_CENTER, title);
    1ed2:	6820      	ldr	r0, [r4, #0]
    1ed4:	464b      	mov	r3, r9
    1ed6:	9301      	str	r3, [sp, #4]
    1ed8:	23c0      	movs	r3, #192	; 0xc0
    1eda:	00db      	lsls	r3, r3, #3
    1edc:	9300      	str	r3, [sp, #0]
    1ede:	231e      	movs	r3, #30
    1ee0:	221e      	movs	r2, #30
    1ee2:	0031      	movs	r1, r6
    1ee4:	4e0b      	ldr	r6, [pc, #44]	; (1f14 <drawTitle+0x78>)
    1ee6:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,1,1));
    1ee8:	6820      	ldr	r0, [r4, #0]
    1eea:	490b      	ldr	r1, [pc, #44]	; (1f18 <drawTitle+0x7c>)
    1eec:	47a8      	blx	r5
}//end drawTitle
    1eee:	b005      	add	sp, #20
    1ef0:	bc0c      	pop	{r2, r3}
    1ef2:	4690      	mov	r8, r2
    1ef4:	4699      	mov	r9, r3
    1ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ef8:	20000788 	.word	0x20000788
    1efc:	1b085000 	.word	0x1b085000
    1f00:	00001d35 	.word	0x00001d35
    1f04:	1c4b0032 	.word	0x1c4b0032
    1f08:	002933ff 	.word	0x002933ff
    1f0c:	008b90ff 	.word	0x008b90ff
    1f10:	00001925 	.word	0x00001925
    1f14:	000016f1 	.word	0x000016f1
    1f18:	26000003 	.word	0x26000003

00001f1c <drawBack>:
/* Function Name    : drawBack
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Draw back button when called
 */
void drawBack(){
    1f1c:	b510      	push	{r4, lr}
    1f1e:	b084      	sub	sp, #16
	//assign tag value and draw button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(back));
    1f20:	4c0e      	ldr	r4, [pc, #56]	; (1f5c <drawBack+0x40>)
    1f22:	490f      	ldr	r1, [pc, #60]	; (1f60 <drawBack+0x44>)
    1f24:	6820      	ldr	r0, [r4, #0]
    1f26:	4b0f      	ldr	r3, [pc, #60]	; (1f64 <drawBack+0x48>)
    1f28:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    1f2a:	6820      	ldr	r0, [r4, #0]
    1f2c:	4b0e      	ldr	r3, [pc, #56]	; (1f68 <drawBack+0x4c>)
    1f2e:	781b      	ldrb	r3, [r3, #0]
    1f30:	4a0e      	ldr	r2, [pc, #56]	; (1f6c <drawBack+0x50>)
    1f32:	7812      	ldrb	r2, [r2, #0]
    1f34:	2a06      	cmp	r2, #6
    1f36:	d00d      	beq.n	1f54 <drawBack+0x38>
    1f38:	2100      	movs	r1, #0
    1f3a:	4a0d      	ldr	r2, [pc, #52]	; (1f70 <drawBack+0x54>)
    1f3c:	9203      	str	r2, [sp, #12]
    1f3e:	9102      	str	r1, [sp, #8]
    1f40:	9301      	str	r3, [sp, #4]
    1f42:	2335      	movs	r3, #53	; 0x35
    1f44:	9300      	str	r3, [sp, #0]
    1f46:	332f      	adds	r3, #47	; 0x2f
    1f48:	2200      	movs	r2, #0
    1f4a:	2100      	movs	r1, #0
    1f4c:	4c09      	ldr	r4, [pc, #36]	; (1f74 <drawBack+0x58>)
    1f4e:	47a0      	blx	r4
}//end drawBack
    1f50:	b004      	add	sp, #16
    1f52:	bd10      	pop	{r4, pc}
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    1f54:	2180      	movs	r1, #128	; 0x80
    1f56:	0049      	lsls	r1, r1, #1
    1f58:	e7ef      	b.n	1f3a <drawBack+0x1e>
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	20000788 	.word	0x20000788
    1f60:	03000006 	.word	0x03000006
    1f64:	00001d35 	.word	0x00001d35
    1f68:	20000009 	.word	0x20000009
    1f6c:	2000011d 	.word	0x2000011d
    1f70:	000058a0 	.word	0x000058a0
    1f74:	00001805 	.word	0x00001805

00001f78 <drawKeypad>:
/* Function Name    : drawKeypad
 * Parameters       : char pressed
 * Return Values(s) : void
 * Description      : Draw keypad and put effect on a key (if pressed)
 */
void drawKeypad(char pressed){
    1f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7a:	46c6      	mov	lr, r8
    1f7c:	b500      	push	{lr}
    1f7e:	b084      	sub	sp, #16
	//draw number from 1 to 9 
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.4, disWid*.3, 60, 29, pressed+48, "123");
    1f80:	3030      	adds	r0, #48	; 0x30
    1f82:	0005      	movs	r5, r0
    1f84:	4c4a      	ldr	r4, [pc, #296]	; (20b0 <STACK_SIZE+0xb0>)
    1f86:	6820      	ldr	r0, [r4, #0]
    1f88:	4b4a      	ldr	r3, [pc, #296]	; (20b4 <STACK_SIZE+0xb4>)
    1f8a:	9303      	str	r3, [sp, #12]
    1f8c:	9502      	str	r5, [sp, #8]
    1f8e:	231d      	movs	r3, #29
    1f90:	4698      	mov	r8, r3
    1f92:	9301      	str	r3, [sp, #4]
    1f94:	273c      	movs	r7, #60	; 0x3c
    1f96:	9700      	str	r7, [sp, #0]
    1f98:	33d3      	adds	r3, #211	; 0xd3
    1f9a:	22c0      	movs	r2, #192	; 0xc0
    1f9c:	21f0      	movs	r1, #240	; 0xf0
    1f9e:	4e46      	ldr	r6, [pc, #280]	; (20b8 <STACK_SIZE+0xb8>)
    1fa0:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.54, disWid*.3, 60, 29, pressed+48, "456");
    1fa2:	6820      	ldr	r0, [r4, #0]
    1fa4:	4b45      	ldr	r3, [pc, #276]	; (20bc <STACK_SIZE+0xbc>)
    1fa6:	9303      	str	r3, [sp, #12]
    1fa8:	9502      	str	r5, [sp, #8]
    1faa:	4643      	mov	r3, r8
    1fac:	9301      	str	r3, [sp, #4]
    1fae:	9700      	str	r7, [sp, #0]
    1fb0:	33d3      	adds	r3, #211	; 0xd3
    1fb2:	2204      	movs	r2, #4
    1fb4:	32ff      	adds	r2, #255	; 0xff
    1fb6:	21f0      	movs	r1, #240	; 0xf0
    1fb8:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.68, disWid*.3, 60, 29, pressed+48, "789");
    1fba:	6820      	ldr	r0, [r4, #0]
    1fbc:	4b40      	ldr	r3, [pc, #256]	; (20c0 <STACK_SIZE+0xc0>)
    1fbe:	9303      	str	r3, [sp, #12]
    1fc0:	9502      	str	r5, [sp, #8]
    1fc2:	4643      	mov	r3, r8
    1fc4:	9301      	str	r3, [sp, #4]
    1fc6:	9700      	str	r7, [sp, #0]
    1fc8:	33d3      	adds	r3, #211	; 0xd3
    1fca:	22a3      	movs	r2, #163	; 0xa3
    1fcc:	0052      	lsls	r2, r2, #1
    1fce:	21f0      	movs	r1, #240	; 0xf0
    1fd0:	47b0      	blx	r6
	
	//draw '0' button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(zero));
    1fd2:	493c      	ldr	r1, [pc, #240]	; (20c4 <STACK_SIZE+0xc4>)
    1fd4:	6820      	ldr	r0, [r4, #0]
    1fd6:	4b3c      	ldr	r3, [pc, #240]	; (20c8 <STACK_SIZE+0xc8>)
    1fd8:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    1fda:	6820      	ldr	r0, [r4, #0]
    1fdc:	4b3b      	ldr	r3, [pc, #236]	; (20cc <STACK_SIZE+0xcc>)
    1fde:	781b      	ldrb	r3, [r3, #0]
    1fe0:	2b30      	cmp	r3, #48	; 0x30
    1fe2:	d05b      	beq.n	209c <STACK_SIZE+0x9c>
    1fe4:	2300      	movs	r3, #0
    1fe6:	4a3a      	ldr	r2, [pc, #232]	; (20d0 <STACK_SIZE+0xd0>)
    1fe8:	9203      	str	r2, [sp, #12]
    1fea:	9302      	str	r3, [sp, #8]
    1fec:	231d      	movs	r3, #29
    1fee:	9301      	str	r3, [sp, #4]
    1ff0:	331f      	adds	r3, #31
    1ff2:	9300      	str	r3, [sp, #0]
    1ff4:	3338      	adds	r3, #56	; 0x38
    1ff6:	228a      	movs	r2, #138	; 0x8a
    1ff8:	32ff      	adds	r2, #255	; 0xff
    1ffa:	21f0      	movs	r1, #240	; 0xf0
    1ffc:	4c35      	ldr	r4, [pc, #212]	; (20d4 <STACK_SIZE+0xd4>)
    1ffe:	47a0      	blx	r4
	//draw delete button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(del));
    2000:	4c2b      	ldr	r4, [pc, #172]	; (20b0 <STACK_SIZE+0xb0>)
    2002:	4935      	ldr	r1, [pc, #212]	; (20d8 <STACK_SIZE+0xd8>)
    2004:	6820      	ldr	r0, [r4, #0]
    2006:	4b30      	ldr	r3, [pc, #192]	; (20c8 <STACK_SIZE+0xc8>)
    2008:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    200a:	6820      	ldr	r0, [r4, #0]
    200c:	4b2f      	ldr	r3, [pc, #188]	; (20cc <STACK_SIZE+0xcc>)
    200e:	781b      	ldrb	r3, [r3, #0]
    2010:	2b09      	cmp	r3, #9
    2012:	d045      	beq.n	20a0 <STACK_SIZE+0xa0>
    2014:	2300      	movs	r3, #0
    2016:	4a31      	ldr	r2, [pc, #196]	; (20dc <STACK_SIZE+0xdc>)
    2018:	9203      	str	r2, [sp, #12]
    201a:	9302      	str	r3, [sp, #8]
    201c:	231d      	movs	r3, #29
    201e:	9301      	str	r3, [sp, #4]
    2020:	331f      	adds	r3, #31
    2022:	9300      	str	r3, [sp, #0]
    2024:	3338      	adds	r3, #56	; 0x38
    2026:	228a      	movs	r2, #138	; 0x8a
    2028:	32ff      	adds	r2, #255	; 0xff
    202a:	21b6      	movs	r1, #182	; 0xb6
    202c:	0049      	lsls	r1, r1, #1
    202e:	4c29      	ldr	r4, [pc, #164]	; (20d4 <STACK_SIZE+0xd4>)
    2030:	47a0      	blx	r4
	//draw clear button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(clr));
    2032:	4c1f      	ldr	r4, [pc, #124]	; (20b0 <STACK_SIZE+0xb0>)
    2034:	492a      	ldr	r1, [pc, #168]	; (20e0 <STACK_SIZE+0xe0>)
    2036:	6820      	ldr	r0, [r4, #0]
    2038:	4b23      	ldr	r3, [pc, #140]	; (20c8 <STACK_SIZE+0xc8>)
    203a:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    203c:	6820      	ldr	r0, [r4, #0]
    203e:	4b23      	ldr	r3, [pc, #140]	; (20cc <STACK_SIZE+0xcc>)
    2040:	781b      	ldrb	r3, [r3, #0]
    2042:	2b0a      	cmp	r3, #10
    2044:	d02e      	beq.n	20a4 <STACK_SIZE+0xa4>
    2046:	2300      	movs	r3, #0
    2048:	4a26      	ldr	r2, [pc, #152]	; (20e4 <STACK_SIZE+0xe4>)
    204a:	9203      	str	r2, [sp, #12]
    204c:	9302      	str	r3, [sp, #8]
    204e:	231d      	movs	r3, #29
    2050:	9301      	str	r3, [sp, #4]
    2052:	3362      	adds	r3, #98	; 0x62
    2054:	9300      	str	r3, [sp, #0]
    2056:	3b2f      	subs	r3, #47	; 0x2f
    2058:	22c0      	movs	r2, #192	; 0xc0
    205a:	21f2      	movs	r1, #242	; 0xf2
    205c:	0049      	lsls	r1, r1, #1
    205e:	4c1d      	ldr	r4, [pc, #116]	; (20d4 <STACK_SIZE+0xd4>)
    2060:	47a0      	blx	r4
	//draw ok button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(ok));
    2062:	4c13      	ldr	r4, [pc, #76]	; (20b0 <STACK_SIZE+0xb0>)
    2064:	4920      	ldr	r1, [pc, #128]	; (20e8 <STACK_SIZE+0xe8>)
    2066:	6820      	ldr	r0, [r4, #0]
    2068:	4b17      	ldr	r3, [pc, #92]	; (20c8 <STACK_SIZE+0xc8>)
    206a:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    206c:	6820      	ldr	r0, [r4, #0]
    206e:	4b17      	ldr	r3, [pc, #92]	; (20cc <STACK_SIZE+0xcc>)
    2070:	781b      	ldrb	r3, [r3, #0]
    2072:	2b0b      	cmp	r3, #11
    2074:	d018      	beq.n	20a8 <STACK_SIZE+0xa8>
    2076:	2200      	movs	r2, #0
    2078:	4b1c      	ldr	r3, [pc, #112]	; (20ec <STACK_SIZE+0xec>)
    207a:	9303      	str	r3, [sp, #12]
    207c:	9202      	str	r2, [sp, #8]
    207e:	231d      	movs	r3, #29
    2080:	9301      	str	r3, [sp, #4]
    2082:	3362      	adds	r3, #98	; 0x62
    2084:	9300      	str	r3, [sp, #0]
    2086:	3b2f      	subs	r3, #47	; 0x2f
    2088:	22a3      	movs	r2, #163	; 0xa3
    208a:	0052      	lsls	r2, r2, #1
    208c:	21f2      	movs	r1, #242	; 0xf2
    208e:	0049      	lsls	r1, r1, #1
    2090:	4c10      	ldr	r4, [pc, #64]	; (20d4 <STACK_SIZE+0xd4>)
    2092:	47a0      	blx	r4
}//end drawKeypad
    2094:	b004      	add	sp, #16
    2096:	bc04      	pop	{r2}
    2098:	4690      	mov	r8, r2
    209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    209c:	33d0      	adds	r3, #208	; 0xd0
    209e:	e7a2      	b.n	1fe6 <drawKeypad+0x6e>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    20a0:	33f7      	adds	r3, #247	; 0xf7
    20a2:	e7b8      	b.n	2016 <STACK_SIZE+0x16>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    20a4:	33f6      	adds	r3, #246	; 0xf6
    20a6:	e7cf      	b.n	2048 <STACK_SIZE+0x48>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    20a8:	2280      	movs	r2, #128	; 0x80
    20aa:	0052      	lsls	r2, r2, #1
    20ac:	e7e4      	b.n	2078 <STACK_SIZE+0x78>
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	20000788 	.word	0x20000788
    20b4:	000058ac 	.word	0x000058ac
    20b8:	00001999 	.word	0x00001999
    20bc:	000058b0 	.word	0x000058b0
    20c0:	000058b4 	.word	0x000058b4
    20c4:	03000030 	.word	0x03000030
    20c8:	00001d35 	.word	0x00001d35
    20cc:	2000011d 	.word	0x2000011d
    20d0:	000058b8 	.word	0x000058b8
    20d4:	00001805 	.word	0x00001805
    20d8:	03000009 	.word	0x03000009
    20dc:	000058bc 	.word	0x000058bc
    20e0:	0300000a 	.word	0x0300000a
    20e4:	000058c0 	.word	0x000058c0
    20e8:	0300000b 	.word	0x0300000b
    20ec:	000058c4 	.word	0x000058c4

000020f0 <drawAlert>:
/* Function Name       : drawAlert
	* Parameters       : int x, int y, char stat
	* Return Values(s) : void
	* Description      : Draw alert, green if good attenuation, red otherwise
	*/
void drawAlert(int x, int y, char stat){
    20f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20f2:	46d6      	mov	lr, sl
    20f4:	464f      	mov	r7, r9
    20f6:	4646      	mov	r6, r8
    20f8:	b5c0      	push	{r6, r7, lr}
    20fa:	4680      	mov	r8, r0
    20fc:	000d      	movs	r5, r1
    20fe:	0014      	movs	r4, r2
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    2100:	4f1f      	ldr	r7, [pc, #124]	; (2180 <drawAlert+0x90>)
    2102:	4920      	ldr	r1, [pc, #128]	; (2184 <drawAlert+0x94>)
    2104:	6838      	ldr	r0, [r7, #0]
    2106:	4e20      	ldr	r6, [pc, #128]	; (2188 <drawAlert+0x98>)
    2108:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(7 * 16));
    210a:	4920      	ldr	r1, [pc, #128]	; (218c <drawAlert+0x9c>)
    210c:	6838      	ldr	r0, [r7, #0]
    210e:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    2110:	6838      	ldr	r0, [r7, #0]
    2112:	491f      	ldr	r1, [pc, #124]	; (2190 <drawAlert+0xa0>)
    2114:	47b0      	blx	r6
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    2116:	2c00      	cmp	r4, #0
    2118:	d02b      	beq.n	2172 <drawAlert+0x82>
	else					Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(204, 51, 0));
    211a:	4b19      	ldr	r3, [pc, #100]	; (2180 <drawAlert+0x90>)
    211c:	6818      	ldr	r0, [r3, #0]
    211e:	491d      	ldr	r1, [pc, #116]	; (2194 <drawAlert+0xa4>)
    2120:	4b19      	ldr	r3, [pc, #100]	; (2188 <drawAlert+0x98>)
    2122:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(x * 16, y * 16) );
    2124:	4643      	mov	r3, r8
    2126:	04d9      	lsls	r1, r3, #19
    2128:	4b1b      	ldr	r3, [pc, #108]	; (2198 <drawAlert+0xa8>)
    212a:	469a      	mov	sl, r3
    212c:	4019      	ands	r1, r3
    212e:	012b      	lsls	r3, r5, #4
    2130:	4a1a      	ldr	r2, [pc, #104]	; (219c <drawAlert+0xac>)
    2132:	4691      	mov	r9, r2
    2134:	4013      	ands	r3, r2
    2136:	4319      	orrs	r1, r3
    2138:	2680      	movs	r6, #128	; 0x80
    213a:	05f6      	lsls	r6, r6, #23
    213c:	4331      	orrs	r1, r6
    213e:	4c10      	ldr	r4, [pc, #64]	; (2180 <drawAlert+0x90>)
    2140:	6820      	ldr	r0, [r4, #0]
    2142:	4f11      	ldr	r7, [pc, #68]	; (2188 <drawAlert+0x98>)
    2144:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + 25) * 16, (y + 20) * 16));
    2146:	4641      	mov	r1, r8
    2148:	3119      	adds	r1, #25
    214a:	04c9      	lsls	r1, r1, #19
    214c:	4653      	mov	r3, sl
    214e:	4019      	ands	r1, r3
    2150:	3514      	adds	r5, #20
    2152:	012d      	lsls	r5, r5, #4
    2154:	464b      	mov	r3, r9
    2156:	401d      	ands	r5, r3
    2158:	4329      	orrs	r1, r5
    215a:	4331      	orrs	r1, r6
    215c:	6820      	ldr	r0, [r4, #0]
    215e:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, END());
    2160:	6820      	ldr	r0, [r4, #0]
    2162:	2184      	movs	r1, #132	; 0x84
    2164:	0589      	lsls	r1, r1, #22
    2166:	47b8      	blx	r7
}//end drawAlert
    2168:	bc1c      	pop	{r2, r3, r4}
    216a:	4690      	mov	r8, r2
    216c:	4699      	mov	r9, r3
    216e:	46a2      	mov	sl, r4
    2170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    2172:	4b03      	ldr	r3, [pc, #12]	; (2180 <drawAlert+0x90>)
    2174:	6818      	ldr	r0, [r3, #0]
    2176:	490a      	ldr	r1, [pc, #40]	; (21a0 <drawAlert+0xb0>)
    2178:	4b03      	ldr	r3, [pc, #12]	; (2188 <drawAlert+0x98>)
    217a:	4798      	blx	r3
    217c:	e7d2      	b.n	2124 <drawAlert+0x34>
    217e:	46c0      	nop			; (mov r8, r8)
    2180:	20000788 	.word	0x20000788
    2184:	1f000009 	.word	0x1f000009
    2188:	00001d35 	.word	0x00001d35
    218c:	0e000070 	.word	0x0e000070
    2190:	100000ff 	.word	0x100000ff
    2194:	04cc3300 	.word	0x04cc3300
    2198:	3ff80000 	.word	0x3ff80000
    219c:	00007ff0 	.word	0x00007ff0
    21a0:	0400ff55 	.word	0x0400ff55

000021a4 <disStart>:
/* Function Name    : disStart
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display start sequence
 */
void disStart(){
    21a4:	b570      	push	{r4, r5, r6, lr}
	Ft_Gpu_CoCmd_Dlstart(phost);
    21a6:	4c06      	ldr	r4, [pc, #24]	; (21c0 <disStart+0x1c>)
    21a8:	6820      	ldr	r0, [r4, #0]
    21aa:	4b06      	ldr	r3, [pc, #24]	; (21c4 <disStart+0x20>)
    21ac:	4798      	blx	r3
    //change this for initial bg
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    21ae:	2180      	movs	r1, #128	; 0x80
    21b0:	0489      	lsls	r1, r1, #18
    21b2:	6820      	ldr	r0, [r4, #0]
    21b4:	4d04      	ldr	r5, [pc, #16]	; (21c8 <disStart+0x24>)
    21b6:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(1,1,1));
    21b8:	6820      	ldr	r0, [r4, #0]
    21ba:	4904      	ldr	r1, [pc, #16]	; (21cc <disStart+0x28>)
    21bc:	47a8      	blx	r5
}//end disStart
    21be:	bd70      	pop	{r4, r5, r6, pc}
    21c0:	20000788 	.word	0x20000788
    21c4:	00001a41 	.word	0x00001a41
    21c8:	00001d35 	.word	0x00001d35
    21cc:	26000007 	.word	0x26000007

000021d0 <disEnd>:
/* Function Name    : disEnd
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display end sequence
 */
void disEnd(){
    21d0:	b510      	push	{r4, lr}
	Ft_Gpu_Hal_WrCmd32(phost,DISPLAY());
    21d2:	4c06      	ldr	r4, [pc, #24]	; (21ec <disEnd+0x1c>)
    21d4:	2100      	movs	r1, #0
    21d6:	6820      	ldr	r0, [r4, #0]
    21d8:	4b05      	ldr	r3, [pc, #20]	; (21f0 <disEnd+0x20>)
    21da:	4798      	blx	r3
	Ft_Gpu_CoCmd_Swap(phost);
    21dc:	6820      	ldr	r0, [r4, #0]
    21de:	4b05      	ldr	r3, [pc, #20]	; (21f4 <disEnd+0x24>)
    21e0:	4798      	blx	r3
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    21e2:	6820      	ldr	r0, [r4, #0]
    21e4:	4b04      	ldr	r3, [pc, #16]	; (21f8 <disEnd+0x28>)
    21e6:	4798      	blx	r3
}//end disEnd
    21e8:	bd10      	pop	{r4, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	20000788 	.word	0x20000788
    21f0:	00001d35 	.word	0x00001d35
    21f4:	000017d9 	.word	0x000017d9
    21f8:	00001d05 	.word	0x00001d05

000021fc <attnOp>:
void attnOp(struct shield_data *receiver_data){
    21fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fe:	46de      	mov	lr, fp
    2200:	4657      	mov	r7, sl
    2202:	464e      	mov	r6, r9
    2204:	4645      	mov	r5, r8
    2206:	b5e0      	push	{r5, r6, r7, lr}
    2208:	b085      	sub	sp, #20
    220a:	4681      	mov	r9, r0
	char lastSec, lastMin=1, lastGood = time.second, trigger=0;
    220c:	4bb2      	ldr	r3, [pc, #712]	; (24d8 <attnOp+0x2dc>)
    220e:	781b      	ldrb	r3, [r3, #0]
    2210:	469a      	mov	sl, r3
    2212:	2300      	movs	r3, #0
    2214:	4698      	mov	r8, r3
    2216:	3301      	adds	r3, #1
    2218:	9303      	str	r3, [sp, #12]
    221a:	e05e      	b.n	22da <attnOp+0xde>
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi27<0)? 0:attenuation.rssi27));
    221c:	2300      	movs	r3, #0
    221e:	e088      	b.n	2332 <attnOp+0x136>
		Ft_Gpu_CoCmd_Number(phost, 500, 200, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    2220:	2300      	movs	r3, #0
    2222:	e09b      	b.n	235c <attnOp+0x160>
		Ft_Gpu_CoCmd_Number(phost, 500, 275, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    2224:	2300      	movs	r3, #0
    2226:	e0ae      	b.n	2386 <attnOp+0x18a>
		Ft_Gpu_CoCmd_Number(phost, 500, 350, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    2228:	2300      	movs	r3, #0
    222a:	e0c2      	b.n	23b2 <attnOp+0x1b6>
			drawAlert(40, 125, (attenuation.rssi27<80)? 1:0);
    222c:	4fab      	ldr	r7, [pc, #684]	; (24dc <attnOp+0x2e0>)
    222e:	88fb      	ldrh	r3, [r7, #6]
    2230:	b21b      	sxth	r3, r3
    2232:	254f      	movs	r5, #79	; 0x4f
    2234:	0fda      	lsrs	r2, r3, #31
    2236:	2600      	movs	r6, #0
    2238:	429d      	cmp	r5, r3
    223a:	4172      	adcs	r2, r6
    223c:	b2d2      	uxtb	r2, r2
    223e:	217d      	movs	r1, #125	; 0x7d
    2240:	2028      	movs	r0, #40	; 0x28
    2242:	4ca7      	ldr	r4, [pc, #668]	; (24e0 <attnOp+0x2e4>)
    2244:	47a0      	blx	r4
			drawAlert(40, 200, (attenuation.rssi169<80)? 1:0);
    2246:	883b      	ldrh	r3, [r7, #0]
    2248:	b21b      	sxth	r3, r3
    224a:	0fda      	lsrs	r2, r3, #31
    224c:	429d      	cmp	r5, r3
    224e:	4172      	adcs	r2, r6
    2250:	b2d2      	uxtb	r2, r2
    2252:	21c8      	movs	r1, #200	; 0xc8
    2254:	2028      	movs	r0, #40	; 0x28
    2256:	47a0      	blx	r4
			drawAlert(40, 275, (attenuation.rssi915<80)? 1:0);
    2258:	887b      	ldrh	r3, [r7, #2]
    225a:	b21b      	sxth	r3, r3
    225c:	0fda      	lsrs	r2, r3, #31
    225e:	429d      	cmp	r5, r3
    2260:	4172      	adcs	r2, r6
    2262:	b2d2      	uxtb	r2, r2
    2264:	2114      	movs	r1, #20
    2266:	31ff      	adds	r1, #255	; 0xff
    2268:	2028      	movs	r0, #40	; 0x28
    226a:	47a0      	blx	r4
			drawAlert(40, 350, (attenuation.rssi245<80)? 1:0);
    226c:	88bb      	ldrh	r3, [r7, #4]
    226e:	b21b      	sxth	r3, r3
    2270:	0fda      	lsrs	r2, r3, #31
    2272:	429d      	cmp	r5, r3
    2274:	4172      	adcs	r2, r6
    2276:	b2d2      	uxtb	r2, r2
    2278:	21af      	movs	r1, #175	; 0xaf
    227a:	0049      	lsls	r1, r1, #1
    227c:	2028      	movs	r0, #40	; 0x28
    227e:	47a0      	blx	r4
    2280:	e0ea      	b.n	2458 <attnOp+0x25c>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    2282:	4b95      	ldr	r3, [pc, #596]	; (24d8 <attnOp+0x2dc>)
    2284:	781b      	ldrb	r3, [r3, #0]
    2286:	4652      	mov	r2, sl
    2288:	1a9b      	subs	r3, r3, r2
    228a:	2b0a      	cmp	r3, #10
    228c:	d100      	bne.n	2290 <attnOp+0x94>
    228e:	e0fb      	b.n	2488 <attnOp+0x28c>
    2290:	3332      	adds	r3, #50	; 0x32
    2292:	d100      	bne.n	2296 <attnOp+0x9a>
    2294:	e0f8      	b.n	2488 <attnOp+0x28c>
		if (trigger == 1){
    2296:	4643      	mov	r3, r8
    2298:	2b01      	cmp	r3, #1
    229a:	d100      	bne.n	229e <attnOp+0xa2>
    229c:	e0fb      	b.n	2496 <attnOp+0x29a>
		if (time.minute%30 == 0 && time.minute != lastMin){
    229e:	4b8e      	ldr	r3, [pc, #568]	; (24d8 <attnOp+0x2dc>)
    22a0:	785c      	ldrb	r4, [r3, #1]
    22a2:	211e      	movs	r1, #30
    22a4:	0020      	movs	r0, r4
    22a6:	4b8f      	ldr	r3, [pc, #572]	; (24e4 <attnOp+0x2e8>)
    22a8:	4798      	blx	r3
    22aa:	b2c9      	uxtb	r1, r1
    22ac:	2900      	cmp	r1, #0
    22ae:	d103      	bne.n	22b8 <attnOp+0xbc>
    22b0:	9b03      	ldr	r3, [sp, #12]
    22b2:	42a3      	cmp	r3, r4
    22b4:	d000      	beq.n	22b8 <attnOp+0xbc>
			lastMin = time.minute;
    22b6:	9403      	str	r4, [sp, #12]
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    22b8:	4b8b      	ldr	r3, [pc, #556]	; (24e8 <attnOp+0x2ec>)
    22ba:	6818      	ldr	r0, [r3, #0]
    22bc:	498b      	ldr	r1, [pc, #556]	; (24ec <attnOp+0x2f0>)
    22be:	4b8c      	ldr	r3, [pc, #560]	; (24f0 <attnOp+0x2f4>)
    22c0:	4798      	blx	r3
		drawBack();
    22c2:	4b8c      	ldr	r3, [pc, #560]	; (24f4 <attnOp+0x2f8>)
    22c4:	4798      	blx	r3
		drawTitle("Attenuation");
    22c6:	488c      	ldr	r0, [pc, #560]	; (24f8 <attnOp+0x2fc>)
    22c8:	4b8c      	ldr	r3, [pc, #560]	; (24fc <attnOp+0x300>)
    22ca:	4798      	blx	r3
		disEnd();
    22cc:	4b8c      	ldr	r3, [pc, #560]	; (2500 <attnOp+0x304>)
    22ce:	4798      	blx	r3
	} while (tag != back);
    22d0:	4b8c      	ldr	r3, [pc, #560]	; (2504 <attnOp+0x308>)
    22d2:	781b      	ldrb	r3, [r3, #0]
    22d4:	2b06      	cmp	r3, #6
    22d6:	d100      	bne.n	22da <attnOp+0xde>
    22d8:	e0f6      	b.n	24c8 <attnOp+0x2cc>
		tag = 0;
    22da:	4e8a      	ldr	r6, [pc, #552]	; (2504 <attnOp+0x308>)
    22dc:	2300      	movs	r3, #0
    22de:	7033      	strb	r3, [r6, #0]
		rtc_calendar_get_time(&rtc_instance, &time);
    22e0:	497d      	ldr	r1, [pc, #500]	; (24d8 <attnOp+0x2dc>)
    22e2:	4889      	ldr	r0, [pc, #548]	; (2508 <attnOp+0x30c>)
    22e4:	4b89      	ldr	r3, [pc, #548]	; (250c <attnOp+0x310>)
    22e6:	4798      	blx	r3
		attenuation.rssi27  = receiver_data->rssi_values.MHz27RSSI;
    22e8:	464b      	mov	r3, r9
    22ea:	7a1b      	ldrb	r3, [r3, #8]
    22ec:	4c7b      	ldr	r4, [pc, #492]	; (24dc <attnOp+0x2e0>)
    22ee:	80e3      	strh	r3, [r4, #6]
		attenuation.rssi169 = receiver_data->rssi_values.MHz169RSSI;	//10 offset added based on testing
    22f0:	464b      	mov	r3, r9
    22f2:	7a5b      	ldrb	r3, [r3, #9]
    22f4:	8023      	strh	r3, [r4, #0]
		attenuation.rssi915 = receiver_data->rssi_values.MHz915RSSI;	// approved by Dr. Nguyen
    22f6:	464b      	mov	r3, r9
    22f8:	7a9b      	ldrb	r3, [r3, #10]
    22fa:	8063      	strh	r3, [r4, #2]
		attenuation.rssi245 = receiver_data->rssi_values.GHz24RSSI;
    22fc:	464b      	mov	r3, r9
    22fe:	7adb      	ldrb	r3, [r3, #11]
    2300:	80a3      	strh	r3, [r4, #4]
		disStart();
    2302:	4b83      	ldr	r3, [pc, #524]	; (2510 <attnOp+0x314>)
    2304:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2306:	4d78      	ldr	r5, [pc, #480]	; (24e8 <attnOp+0x2ec>)
    2308:	4982      	ldr	r1, [pc, #520]	; (2514 <attnOp+0x318>)
    230a:	6828      	ldr	r0, [r5, #0]
    230c:	4b82      	ldr	r3, [pc, #520]	; (2518 <attnOp+0x31c>)
    230e:	4798      	blx	r3
    2310:	7030      	strb	r0, [r6, #0]
		Ft_Gpu_CoCmd_Append(phost, attnStart, attnEnd);
    2312:	4b82      	ldr	r3, [pc, #520]	; (251c <attnOp+0x320>)
    2314:	681a      	ldr	r2, [r3, #0]
    2316:	4b82      	ldr	r3, [pc, #520]	; (2520 <attnOp+0x324>)
    2318:	6819      	ldr	r1, [r3, #0]
    231a:	6828      	ldr	r0, [r5, #0]
    231c:	4b81      	ldr	r3, [pc, #516]	; (2524 <attnOp+0x328>)
    231e:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi27<0)? 0:attenuation.rssi27));
    2320:	6828      	ldr	r0, [r5, #0]
    2322:	88e3      	ldrh	r3, [r4, #6]
    2324:	b21b      	sxth	r3, r3
    2326:	2b00      	cmp	r3, #0
    2328:	da00      	bge.n	232c <attnOp+0x130>
    232a:	e777      	b.n	221c <attnOp+0x20>
    232c:	4b6b      	ldr	r3, [pc, #428]	; (24dc <attnOp+0x2e0>)
    232e:	88db      	ldrh	r3, [r3, #6]
    2330:	b21b      	sxth	r3, r3
    2332:	9301      	str	r3, [sp, #4]
    2334:	2304      	movs	r3, #4
    2336:	33ff      	adds	r3, #255	; 0xff
    2338:	9300      	str	r3, [sp, #0]
    233a:	3be4      	subs	r3, #228	; 0xe4
    233c:	227d      	movs	r2, #125	; 0x7d
    233e:	21fa      	movs	r1, #250	; 0xfa
    2340:	0049      	lsls	r1, r1, #1
    2342:	4c79      	ldr	r4, [pc, #484]	; (2528 <attnOp+0x32c>)
    2344:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 200, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    2346:	4b68      	ldr	r3, [pc, #416]	; (24e8 <attnOp+0x2ec>)
    2348:	6818      	ldr	r0, [r3, #0]
    234a:	4b64      	ldr	r3, [pc, #400]	; (24dc <attnOp+0x2e0>)
    234c:	881b      	ldrh	r3, [r3, #0]
    234e:	b21b      	sxth	r3, r3
    2350:	2b00      	cmp	r3, #0
    2352:	da00      	bge.n	2356 <attnOp+0x15a>
    2354:	e764      	b.n	2220 <attnOp+0x24>
    2356:	4b61      	ldr	r3, [pc, #388]	; (24dc <attnOp+0x2e0>)
    2358:	881b      	ldrh	r3, [r3, #0]
    235a:	b21b      	sxth	r3, r3
    235c:	9301      	str	r3, [sp, #4]
    235e:	2304      	movs	r3, #4
    2360:	33ff      	adds	r3, #255	; 0xff
    2362:	9300      	str	r3, [sp, #0]
    2364:	3be4      	subs	r3, #228	; 0xe4
    2366:	22c8      	movs	r2, #200	; 0xc8
    2368:	21fa      	movs	r1, #250	; 0xfa
    236a:	0049      	lsls	r1, r1, #1
    236c:	4c6e      	ldr	r4, [pc, #440]	; (2528 <attnOp+0x32c>)
    236e:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 275, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    2370:	4b5d      	ldr	r3, [pc, #372]	; (24e8 <attnOp+0x2ec>)
    2372:	6818      	ldr	r0, [r3, #0]
    2374:	4b59      	ldr	r3, [pc, #356]	; (24dc <attnOp+0x2e0>)
    2376:	885b      	ldrh	r3, [r3, #2]
    2378:	b21b      	sxth	r3, r3
    237a:	2b00      	cmp	r3, #0
    237c:	da00      	bge.n	2380 <attnOp+0x184>
    237e:	e751      	b.n	2224 <attnOp+0x28>
    2380:	4b56      	ldr	r3, [pc, #344]	; (24dc <attnOp+0x2e0>)
    2382:	885b      	ldrh	r3, [r3, #2]
    2384:	b21b      	sxth	r3, r3
    2386:	9301      	str	r3, [sp, #4]
    2388:	2304      	movs	r3, #4
    238a:	33ff      	adds	r3, #255	; 0xff
    238c:	9300      	str	r3, [sp, #0]
    238e:	3be4      	subs	r3, #228	; 0xe4
    2390:	2214      	movs	r2, #20
    2392:	32ff      	adds	r2, #255	; 0xff
    2394:	21fa      	movs	r1, #250	; 0xfa
    2396:	0049      	lsls	r1, r1, #1
    2398:	4c63      	ldr	r4, [pc, #396]	; (2528 <attnOp+0x32c>)
    239a:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 350, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    239c:	4b52      	ldr	r3, [pc, #328]	; (24e8 <attnOp+0x2ec>)
    239e:	6818      	ldr	r0, [r3, #0]
    23a0:	4b4e      	ldr	r3, [pc, #312]	; (24dc <attnOp+0x2e0>)
    23a2:	889b      	ldrh	r3, [r3, #4]
    23a4:	b21b      	sxth	r3, r3
    23a6:	2b00      	cmp	r3, #0
    23a8:	da00      	bge.n	23ac <attnOp+0x1b0>
    23aa:	e73d      	b.n	2228 <attnOp+0x2c>
    23ac:	4b4b      	ldr	r3, [pc, #300]	; (24dc <attnOp+0x2e0>)
    23ae:	889b      	ldrh	r3, [r3, #4]
    23b0:	b21b      	sxth	r3, r3
    23b2:	9301      	str	r3, [sp, #4]
    23b4:	2404      	movs	r4, #4
    23b6:	34ff      	adds	r4, #255	; 0xff
    23b8:	9400      	str	r4, [sp, #0]
    23ba:	231f      	movs	r3, #31
    23bc:	22af      	movs	r2, #175	; 0xaf
    23be:	0052      	lsls	r2, r2, #1
    23c0:	21fa      	movs	r1, #250	; 0xfa
    23c2:	0049      	lsls	r1, r1, #1
    23c4:	4d58      	ldr	r5, [pc, #352]	; (2528 <attnOp+0x32c>)
    23c6:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, 250, 125, 31, OPT_SIGNED|3, "27MHz");
    23c8:	4f47      	ldr	r7, [pc, #284]	; (24e8 <attnOp+0x2ec>)
    23ca:	6838      	ldr	r0, [r7, #0]
    23cc:	4b57      	ldr	r3, [pc, #348]	; (252c <attnOp+0x330>)
    23ce:	9301      	str	r3, [sp, #4]
    23d0:	9400      	str	r4, [sp, #0]
    23d2:	231f      	movs	r3, #31
    23d4:	227d      	movs	r2, #125	; 0x7d
    23d6:	21fa      	movs	r1, #250	; 0xfa
    23d8:	4e55      	ldr	r6, [pc, #340]	; (2530 <attnOp+0x334>)
    23da:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 250, 200, 31, OPT_SIGNED|3, "169MHz");
    23dc:	6838      	ldr	r0, [r7, #0]
    23de:	4b55      	ldr	r3, [pc, #340]	; (2534 <attnOp+0x338>)
    23e0:	9301      	str	r3, [sp, #4]
    23e2:	9400      	str	r4, [sp, #0]
    23e4:	231f      	movs	r3, #31
    23e6:	22c8      	movs	r2, #200	; 0xc8
    23e8:	21fa      	movs	r1, #250	; 0xfa
    23ea:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 250, 275, 31, OPT_SIGNED|3, "915MHz");
    23ec:	6838      	ldr	r0, [r7, #0]
    23ee:	4b52      	ldr	r3, [pc, #328]	; (2538 <attnOp+0x33c>)
    23f0:	9301      	str	r3, [sp, #4]
    23f2:	9400      	str	r4, [sp, #0]
    23f4:	231f      	movs	r3, #31
    23f6:	2214      	movs	r2, #20
    23f8:	32ff      	adds	r2, #255	; 0xff
    23fa:	21fa      	movs	r1, #250	; 0xfa
    23fc:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 250, 350, 31, OPT_SIGNED|3, "2.4GHz");
    23fe:	6838      	ldr	r0, [r7, #0]
    2400:	4b4e      	ldr	r3, [pc, #312]	; (253c <attnOp+0x340>)
    2402:	9301      	str	r3, [sp, #4]
    2404:	9400      	str	r4, [sp, #0]
    2406:	231f      	movs	r3, #31
    2408:	22af      	movs	r2, #175	; 0xaf
    240a:	0052      	lsls	r2, r2, #1
    240c:	21fa      	movs	r1, #250	; 0xfa
    240e:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 650, 125, 31, OPT_SIGNED|3, "dB");
    2410:	6838      	ldr	r0, [r7, #0]
    2412:	4d4b      	ldr	r5, [pc, #300]	; (2540 <attnOp+0x344>)
    2414:	9501      	str	r5, [sp, #4]
    2416:	9400      	str	r4, [sp, #0]
    2418:	231f      	movs	r3, #31
    241a:	227d      	movs	r2, #125	; 0x7d
    241c:	4949      	ldr	r1, [pc, #292]	; (2544 <attnOp+0x348>)
    241e:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 650, 200, 31, OPT_SIGNED|3, "dB");
    2420:	6838      	ldr	r0, [r7, #0]
    2422:	9501      	str	r5, [sp, #4]
    2424:	9400      	str	r4, [sp, #0]
    2426:	231f      	movs	r3, #31
    2428:	22c8      	movs	r2, #200	; 0xc8
    242a:	4946      	ldr	r1, [pc, #280]	; (2544 <attnOp+0x348>)
    242c:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 650, 275, 31, OPT_SIGNED|3, "dB");
    242e:	6838      	ldr	r0, [r7, #0]
    2430:	9501      	str	r5, [sp, #4]
    2432:	9400      	str	r4, [sp, #0]
    2434:	231f      	movs	r3, #31
    2436:	2214      	movs	r2, #20
    2438:	32ff      	adds	r2, #255	; 0xff
    243a:	4942      	ldr	r1, [pc, #264]	; (2544 <attnOp+0x348>)
    243c:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 650, 350, 31, OPT_SIGNED|3, "dB");
    243e:	6838      	ldr	r0, [r7, #0]
    2440:	9501      	str	r5, [sp, #4]
    2442:	9400      	str	r4, [sp, #0]
    2444:	231f      	movs	r3, #31
    2446:	22af      	movs	r2, #175	; 0xaf
    2448:	0052      	lsls	r2, r2, #1
    244a:	493e      	ldr	r1, [pc, #248]	; (2544 <attnOp+0x348>)
    244c:	47b0      	blx	r6
		if (alert == 1){
    244e:	4b3e      	ldr	r3, [pc, #248]	; (2548 <attnOp+0x34c>)
    2450:	781b      	ldrb	r3, [r3, #0]
    2452:	2b01      	cmp	r3, #1
    2454:	d100      	bne.n	2458 <attnOp+0x25c>
    2456:	e6e9      	b.n	222c <attnOp+0x30>
		if (attenuation.rssi169>80 && attenuation.rssi915>80 && attenuation.rssi245>80){
    2458:	4b20      	ldr	r3, [pc, #128]	; (24dc <attnOp+0x2e0>)
    245a:	881b      	ldrh	r3, [r3, #0]
    245c:	b21b      	sxth	r3, r3
    245e:	2b50      	cmp	r3, #80	; 0x50
    2460:	dc00      	bgt.n	2464 <attnOp+0x268>
    2462:	e70e      	b.n	2282 <attnOp+0x86>
    2464:	4b1d      	ldr	r3, [pc, #116]	; (24dc <attnOp+0x2e0>)
    2466:	885b      	ldrh	r3, [r3, #2]
    2468:	b21b      	sxth	r3, r3
    246a:	2b50      	cmp	r3, #80	; 0x50
    246c:	dc00      	bgt.n	2470 <attnOp+0x274>
    246e:	e708      	b.n	2282 <attnOp+0x86>
    2470:	4b1a      	ldr	r3, [pc, #104]	; (24dc <attnOp+0x2e0>)
    2472:	889b      	ldrh	r3, [r3, #4]
    2474:	b21b      	sxth	r3, r3
    2476:	2b50      	cmp	r3, #80	; 0x50
    2478:	dc00      	bgt.n	247c <attnOp+0x280>
    247a:	e702      	b.n	2282 <attnOp+0x86>
			lastGood = time.second;
    247c:	4b16      	ldr	r3, [pc, #88]	; (24d8 <attnOp+0x2dc>)
    247e:	781b      	ldrb	r3, [r3, #0]
    2480:	469a      	mov	sl, r3
			trigger = 0;
    2482:	2300      	movs	r3, #0
    2484:	4698      	mov	r8, r3
    2486:	e706      	b.n	2296 <attnOp+0x9a>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    2488:	4643      	mov	r3, r8
    248a:	2b00      	cmp	r3, #0
    248c:	d000      	beq.n	2490 <attnOp+0x294>
    248e:	e702      	b.n	2296 <attnOp+0x9a>
		trigger = 1;
    2490:	3301      	adds	r3, #1
    2492:	4698      	mov	r8, r3
    2494:	e6ff      	b.n	2296 <attnOp+0x9a>
			if (time.second%5 == 0 && time.second != lastSec && sound==1){
    2496:	4b10      	ldr	r3, [pc, #64]	; (24d8 <attnOp+0x2dc>)
    2498:	781c      	ldrb	r4, [r3, #0]
    249a:	2105      	movs	r1, #5
    249c:	0020      	movs	r0, r4
    249e:	4b11      	ldr	r3, [pc, #68]	; (24e4 <attnOp+0x2e8>)
    24a0:	4798      	blx	r3
    24a2:	b2c9      	uxtb	r1, r1
    24a4:	2900      	cmp	r1, #0
    24a6:	d000      	beq.n	24aa <attnOp+0x2ae>
    24a8:	e6f9      	b.n	229e <attnOp+0xa2>
    24aa:	465b      	mov	r3, fp
    24ac:	42a3      	cmp	r3, r4
    24ae:	d100      	bne.n	24b2 <attnOp+0x2b6>
    24b0:	e6f5      	b.n	229e <attnOp+0xa2>
    24b2:	4b26      	ldr	r3, [pc, #152]	; (254c <attnOp+0x350>)
    24b4:	781b      	ldrb	r3, [r3, #0]
    24b6:	2b01      	cmp	r3, #1
    24b8:	d000      	beq.n	24bc <attnOp+0x2c0>
    24ba:	e6f0      	b.n	229e <attnOp+0xa2>
				play();
    24bc:	4b24      	ldr	r3, [pc, #144]	; (2550 <attnOp+0x354>)
    24be:	4798      	blx	r3
				lastSec = time.second;
    24c0:	4b05      	ldr	r3, [pc, #20]	; (24d8 <attnOp+0x2dc>)
    24c2:	781b      	ldrb	r3, [r3, #0]
    24c4:	469b      	mov	fp, r3
    24c6:	e6ea      	b.n	229e <attnOp+0xa2>
}// end attnOp
    24c8:	b005      	add	sp, #20
    24ca:	bc3c      	pop	{r2, r3, r4, r5}
    24cc:	4690      	mov	r8, r2
    24ce:	4699      	mov	r9, r3
    24d0:	46a2      	mov	sl, r4
    24d2:	46ab      	mov	fp, r5
    24d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	20000780 	.word	0x20000780
    24dc:	200000fc 	.word	0x200000fc
    24e0:	000020f1 	.word	0x000020f1
    24e4:	00004f15 	.word	0x00004f15
    24e8:	20000788 	.word	0x20000788
    24ec:	04ffffff 	.word	0x04ffffff
    24f0:	00001d35 	.word	0x00001d35
    24f4:	00001f1d 	.word	0x00001f1d
    24f8:	0000587c 	.word	0x0000587c
    24fc:	00001e9d 	.word	0x00001e9d
    2500:	000021d1 	.word	0x000021d1
    2504:	2000011d 	.word	0x2000011d
    2508:	20000468 	.word	0x20000468
    250c:	00000555 	.word	0x00000555
    2510:	000021a5 	.word	0x000021a5
    2514:	0030212c 	.word	0x0030212c
    2518:	00001bc5 	.word	0x00001bc5
    251c:	20000104 	.word	0x20000104
    2520:	20000108 	.word	0x20000108
    2524:	000018e9 	.word	0x000018e9
    2528:	00001775 	.word	0x00001775
    252c:	00005858 	.word	0x00005858
    2530:	000016f1 	.word	0x000016f1
    2534:	00005860 	.word	0x00005860
    2538:	00005868 	.word	0x00005868
    253c:	00005870 	.word	0x00005870
    2540:	00005878 	.word	0x00005878
    2544:	0000028a 	.word	0x0000028a
    2548:	20000008 	.word	0x20000008
    254c:	2000011c 	.word	0x2000011c
    2550:	00001e45 	.word	0x00001e45

00002554 <historyOp>:
void historyOp(){
    2554:	b5f0      	push	{r4, r5, r6, r7, lr}
    2556:	46de      	mov	lr, fp
    2558:	4657      	mov	r7, sl
    255a:	464e      	mov	r6, r9
    255c:	4645      	mov	r5, r8
    255e:	b5e0      	push	{r5, r6, r7, lr}
    2560:	b0af      	sub	sp, #188	; 0xbc
    2562:	e05a      	b.n	261a <historyOp+0xc6>
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    2564:	1c5a      	adds	r2, r3, #1
    2566:	920b      	str	r2, [sp, #44]	; 0x2c
					i+1, history[i][0], history[i][1], history[i][2], history[i][3], history[i][4], \
    2568:	4e3a      	ldr	r6, [pc, #232]	; (2654 <historyOp+0x100>)
    256a:	009a      	lsls	r2, r3, #2
    256c:	18d0      	adds	r0, r2, r3
    256e:	0081      	lsls	r1, r0, #2
    2570:	5f8d      	ldrsh	r5, [r1, r6]
    2572:	0081      	lsls	r1, r0, #2
    2574:	1871      	adds	r1, r6, r1
    2576:	2702      	movs	r7, #2
    2578:	5fc8      	ldrsh	r0, [r1, r7]
    257a:	900c      	str	r0, [sp, #48]	; 0x30
    257c:	2704      	movs	r7, #4
    257e:	5fc8      	ldrsh	r0, [r1, r7]
    2580:	2706      	movs	r7, #6
    2582:	5fcc      	ldrsh	r4, [r1, r7]
    2584:	940d      	str	r4, [sp, #52]	; 0x34
    2586:	2408      	movs	r4, #8
    2588:	5f0f      	ldrsh	r7, [r1, r4]
    258a:	46bc      	mov	ip, r7
					history[i][5], history[i][6], history[i][7], history[i][8], history[i][9]);
    258c:	240a      	movs	r4, #10
    258e:	5f0f      	ldrsh	r7, [r1, r4]
    2590:	46b8      	mov	r8, r7
    2592:	240c      	movs	r4, #12
    2594:	5f0f      	ldrsh	r7, [r1, r4]
    2596:	46b9      	mov	r9, r7
    2598:	240e      	movs	r4, #14
    259a:	5f0f      	ldrsh	r7, [r1, r4]
    259c:	2410      	movs	r4, #16
    259e:	5f09      	ldrsh	r1, [r1, r4]
    25a0:	468b      	mov	fp, r1
    25a2:	18d3      	adds	r3, r2, r3
    25a4:	009a      	lsls	r2, r3, #2
    25a6:	18b6      	adds	r6, r6, r2
    25a8:	2112      	movs	r1, #18
    25aa:	5e73      	ldrsh	r3, [r6, r1]
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    25ac:	ae0e      	add	r6, sp, #56	; 0x38
    25ae:	9309      	str	r3, [sp, #36]	; 0x24
    25b0:	465b      	mov	r3, fp
    25b2:	9308      	str	r3, [sp, #32]
    25b4:	9707      	str	r7, [sp, #28]
    25b6:	464b      	mov	r3, r9
    25b8:	9306      	str	r3, [sp, #24]
    25ba:	4643      	mov	r3, r8
    25bc:	9305      	str	r3, [sp, #20]
    25be:	4663      	mov	r3, ip
    25c0:	9304      	str	r3, [sp, #16]
    25c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    25c4:	9303      	str	r3, [sp, #12]
    25c6:	9002      	str	r0, [sp, #8]
    25c8:	980c      	ldr	r0, [sp, #48]	; 0x30
    25ca:	9001      	str	r0, [sp, #4]
    25cc:	9500      	str	r5, [sp, #0]
    25ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    25d0:	002b      	movs	r3, r5
    25d2:	4a21      	ldr	r2, [pc, #132]	; (2658 <historyOp+0x104>)
    25d4:	2180      	movs	r1, #128	; 0x80
    25d6:	0030      	movs	r0, r6
    25d8:	4f20      	ldr	r7, [pc, #128]	; (265c <historyOp+0x108>)
    25da:	47b8      	blx	r7
			Ft_Gpu_CoCmd_Text(phost, 50, y, 28, 0,buff);
    25dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    25de:	b222      	sxth	r2, r4
    25e0:	4b1f      	ldr	r3, [pc, #124]	; (2660 <historyOp+0x10c>)
    25e2:	6818      	ldr	r0, [r3, #0]
    25e4:	9601      	str	r6, [sp, #4]
    25e6:	2300      	movs	r3, #0
    25e8:	9300      	str	r3, [sp, #0]
    25ea:	331c      	adds	r3, #28
    25ec:	2132      	movs	r1, #50	; 0x32
    25ee:	4e1d      	ldr	r6, [pc, #116]	; (2664 <historyOp+0x110>)
    25f0:	47b0      	blx	r6
			y = y + 30;
    25f2:	0023      	movs	r3, r4
    25f4:	331e      	adds	r3, #30
    25f6:	930a      	str	r3, [sp, #40]	; 0x28
		for(i = 0; i < 10; i++){
    25f8:	002b      	movs	r3, r5
    25fa:	2b09      	cmp	r3, #9
    25fc:	ddb2      	ble.n	2564 <historyOp+0x10>
		drawBack();
    25fe:	4b1a      	ldr	r3, [pc, #104]	; (2668 <historyOp+0x114>)
    2600:	4798      	blx	r3
		drawTitle("History");
    2602:	481a      	ldr	r0, [pc, #104]	; (266c <historyOp+0x118>)
    2604:	4b1a      	ldr	r3, [pc, #104]	; (2670 <historyOp+0x11c>)
    2606:	4798      	blx	r3
		disEnd();
    2608:	4b1a      	ldr	r3, [pc, #104]	; (2674 <historyOp+0x120>)
    260a:	4798      	blx	r3
		delay_ms(50);
    260c:	2032      	movs	r0, #50	; 0x32
    260e:	4b1a      	ldr	r3, [pc, #104]	; (2678 <historyOp+0x124>)
    2610:	4798      	blx	r3
	} while (tag != back);
    2612:	4b1a      	ldr	r3, [pc, #104]	; (267c <historyOp+0x128>)
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	2b06      	cmp	r3, #6
    2618:	d015      	beq.n	2646 <historyOp+0xf2>
		tag = 0;
    261a:	4d18      	ldr	r5, [pc, #96]	; (267c <historyOp+0x128>)
    261c:	2300      	movs	r3, #0
    261e:	702b      	strb	r3, [r5, #0]
		disStart();
    2620:	4b17      	ldr	r3, [pc, #92]	; (2680 <historyOp+0x12c>)
    2622:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2624:	4c0e      	ldr	r4, [pc, #56]	; (2660 <historyOp+0x10c>)
    2626:	4917      	ldr	r1, [pc, #92]	; (2684 <historyOp+0x130>)
    2628:	6820      	ldr	r0, [r4, #0]
    262a:	4b17      	ldr	r3, [pc, #92]	; (2688 <historyOp+0x134>)
    262c:	4798      	blx	r3
    262e:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Append(phost, histStart, histEnd);
    2630:	4b16      	ldr	r3, [pc, #88]	; (268c <historyOp+0x138>)
    2632:	681a      	ldr	r2, [r3, #0]
    2634:	4b16      	ldr	r3, [pc, #88]	; (2690 <historyOp+0x13c>)
    2636:	6819      	ldr	r1, [r3, #0]
    2638:	6820      	ldr	r0, [r4, #0]
    263a:	4b16      	ldr	r3, [pc, #88]	; (2694 <historyOp+0x140>)
    263c:	4798      	blx	r3
		y = 125;
    263e:	247d      	movs	r4, #125	; 0x7d
		for(i = 0; i < 10; i++){
    2640:	2300      	movs	r3, #0
    2642:	940a      	str	r4, [sp, #40]	; 0x28
    2644:	e7d9      	b.n	25fa <historyOp+0xa6>
}//end histOp
    2646:	b02f      	add	sp, #188	; 0xbc
    2648:	bc3c      	pop	{r2, r3, r4, r5}
    264a:	4690      	mov	r8, r2
    264c:	4699      	mov	r9, r3
    264e:	46a2      	mov	sl, r4
    2650:	46ab      	mov	fp, r5
    2652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2654:	200006b8 	.word	0x200006b8
    2658:	000058c8 	.word	0x000058c8
    265c:	00004fe1 	.word	0x00004fe1
    2660:	20000788 	.word	0x20000788
    2664:	000016f1 	.word	0x000016f1
    2668:	00001f1d 	.word	0x00001f1d
    266c:	00005938 	.word	0x00005938
    2670:	00001e9d 	.word	0x00001e9d
    2674:	000021d1 	.word	0x000021d1
    2678:	00000151 	.word	0x00000151
    267c:	2000011d 	.word	0x2000011d
    2680:	000021a5 	.word	0x000021a5
    2684:	0030212c 	.word	0x0030212c
    2688:	00001bc5 	.word	0x00001bc5
    268c:	2000010c 	.word	0x2000010c
    2690:	20000110 	.word	0x20000110
    2694:	000018e9 	.word	0x000018e9

00002698 <rssiOp>:
void rssiOp(){
    2698:	b5f0      	push	{r4, r5, r6, r7, lr}
    269a:	46de      	mov	lr, fp
    269c:	b500      	push	{lr}
    269e:	b082      	sub	sp, #8
	tag = 0;
    26a0:	4e48      	ldr	r6, [pc, #288]	; (27c4 <rssiOp+0x12c>)
    26a2:	2300      	movs	r3, #0
    26a4:	7033      	strb	r3, [r6, #0]
		disStart();
    26a6:	4b48      	ldr	r3, [pc, #288]	; (27c8 <rssiOp+0x130>)
    26a8:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    26aa:	4c48      	ldr	r4, [pc, #288]	; (27cc <rssiOp+0x134>)
    26ac:	4948      	ldr	r1, [pc, #288]	; (27d0 <rssiOp+0x138>)
    26ae:	6820      	ldr	r0, [r4, #0]
    26b0:	4b48      	ldr	r3, [pc, #288]	; (27d4 <rssiOp+0x13c>)
    26b2:	4798      	blx	r3
    26b4:	7030      	strb	r0, [r6, #0]
		Ft_Gpu_CoCmd_Append(phost, rssiStart, rssiEnd);
    26b6:	4b48      	ldr	r3, [pc, #288]	; (27d8 <rssiOp+0x140>)
    26b8:	681a      	ldr	r2, [r3, #0]
    26ba:	4b48      	ldr	r3, [pc, #288]	; (27dc <rssiOp+0x144>)
    26bc:	6819      	ldr	r1, [r3, #0]
    26be:	6820      	ldr	r0, [r4, #0]
    26c0:	4b47      	ldr	r3, [pc, #284]	; (27e0 <rssiOp+0x148>)
    26c2:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 650, 125, 31, OPT_SIGNED|OPT_CENTER|3, 11);
    26c4:	6820      	ldr	r0, [r4, #0]
    26c6:	230b      	movs	r3, #11
    26c8:	9301      	str	r3, [sp, #4]
    26ca:	4d46      	ldr	r5, [pc, #280]	; (27e4 <rssiOp+0x14c>)
    26cc:	9500      	str	r5, [sp, #0]
    26ce:	3314      	adds	r3, #20
    26d0:	227d      	movs	r2, #125	; 0x7d
    26d2:	4945      	ldr	r1, [pc, #276]	; (27e8 <rssiOp+0x150>)
    26d4:	4f45      	ldr	r7, [pc, #276]	; (27ec <rssiOp+0x154>)
    26d6:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 200, 31, OPT_SIGNED|OPT_CENTER|3, 10);
    26d8:	6820      	ldr	r0, [r4, #0]
    26da:	230a      	movs	r3, #10
    26dc:	9301      	str	r3, [sp, #4]
    26de:	9500      	str	r5, [sp, #0]
    26e0:	3315      	adds	r3, #21
    26e2:	22c8      	movs	r2, #200	; 0xc8
    26e4:	4940      	ldr	r1, [pc, #256]	; (27e8 <rssiOp+0x150>)
    26e6:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 275, 31, OPT_SIGNED|OPT_CENTER|3, 23);
    26e8:	6820      	ldr	r0, [r4, #0]
    26ea:	2317      	movs	r3, #23
    26ec:	9301      	str	r3, [sp, #4]
    26ee:	9500      	str	r5, [sp, #0]
    26f0:	3308      	adds	r3, #8
    26f2:	2214      	movs	r2, #20
    26f4:	32ff      	adds	r2, #255	; 0xff
    26f6:	493c      	ldr	r1, [pc, #240]	; (27e8 <rssiOp+0x150>)
    26f8:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 350, 31, OPT_SIGNED|OPT_CENTER|3, 14);
    26fa:	6820      	ldr	r0, [r4, #0]
    26fc:	230e      	movs	r3, #14
    26fe:	9301      	str	r3, [sp, #4]
    2700:	9500      	str	r5, [sp, #0]
    2702:	3311      	adds	r3, #17
    2704:	22af      	movs	r2, #175	; 0xaf
    2706:	0052      	lsls	r2, r2, #1
    2708:	4937      	ldr	r1, [pc, #220]	; (27e8 <rssiOp+0x150>)
    270a:	47b8      	blx	r7
	  	Ft_Gpu_CoCmd_Text(phost, 400, 125, 31, OPT_SIGNED|3, "27MHz");
    270c:	6820      	ldr	r0, [r4, #0]
    270e:	4b38      	ldr	r3, [pc, #224]	; (27f0 <rssiOp+0x158>)
    2710:	9301      	str	r3, [sp, #4]
    2712:	2504      	movs	r5, #4
    2714:	35ff      	adds	r5, #255	; 0xff
    2716:	9500      	str	r5, [sp, #0]
    2718:	231f      	movs	r3, #31
    271a:	227d      	movs	r2, #125	; 0x7d
    271c:	21c8      	movs	r1, #200	; 0xc8
    271e:	0049      	lsls	r1, r1, #1
    2720:	4f34      	ldr	r7, [pc, #208]	; (27f4 <rssiOp+0x15c>)
    2722:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 200, 31, OPT_SIGNED|3, "169MHz");
    2724:	6820      	ldr	r0, [r4, #0]
    2726:	4b34      	ldr	r3, [pc, #208]	; (27f8 <rssiOp+0x160>)
    2728:	9301      	str	r3, [sp, #4]
    272a:	9500      	str	r5, [sp, #0]
    272c:	231f      	movs	r3, #31
    272e:	22c8      	movs	r2, #200	; 0xc8
    2730:	21c8      	movs	r1, #200	; 0xc8
    2732:	0049      	lsls	r1, r1, #1
    2734:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 275, 31, OPT_SIGNED|3, "915MHz");
    2736:	6820      	ldr	r0, [r4, #0]
    2738:	4b30      	ldr	r3, [pc, #192]	; (27fc <rssiOp+0x164>)
    273a:	9301      	str	r3, [sp, #4]
    273c:	9500      	str	r5, [sp, #0]
    273e:	231f      	movs	r3, #31
    2740:	2214      	movs	r2, #20
    2742:	32ff      	adds	r2, #255	; 0xff
    2744:	21c8      	movs	r1, #200	; 0xc8
    2746:	0049      	lsls	r1, r1, #1
    2748:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 350, 31, OPT_SIGNED|3, "2.4GHz");
    274a:	6820      	ldr	r0, [r4, #0]
    274c:	4b2c      	ldr	r3, [pc, #176]	; (2800 <rssiOp+0x168>)
    274e:	9301      	str	r3, [sp, #4]
    2750:	9500      	str	r5, [sp, #0]
    2752:	231f      	movs	r3, #31
    2754:	22af      	movs	r2, #175	; 0xaf
    2756:	0052      	lsls	r2, r2, #1
    2758:	21c8      	movs	r1, #200	; 0xc8
    275a:	0049      	lsls	r1, r1, #1
    275c:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 125, 31, OPT_SIGNED|3, "dB");
    275e:	6820      	ldr	r0, [r4, #0]
    2760:	4b28      	ldr	r3, [pc, #160]	; (2804 <rssiOp+0x16c>)
    2762:	469b      	mov	fp, r3
    2764:	9301      	str	r3, [sp, #4]
    2766:	9500      	str	r5, [sp, #0]
    2768:	231f      	movs	r3, #31
    276a:	227d      	movs	r2, #125	; 0x7d
    276c:	4926      	ldr	r1, [pc, #152]	; (2808 <rssiOp+0x170>)
    276e:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 200, 31, OPT_SIGNED|3, "dB");
    2770:	6820      	ldr	r0, [r4, #0]
    2772:	465b      	mov	r3, fp
    2774:	9301      	str	r3, [sp, #4]
    2776:	9500      	str	r5, [sp, #0]
    2778:	231f      	movs	r3, #31
    277a:	22c8      	movs	r2, #200	; 0xc8
    277c:	4922      	ldr	r1, [pc, #136]	; (2808 <rssiOp+0x170>)
    277e:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 275, 31, OPT_SIGNED|3, "dB");
    2780:	6820      	ldr	r0, [r4, #0]
    2782:	465b      	mov	r3, fp
    2784:	9301      	str	r3, [sp, #4]
    2786:	9500      	str	r5, [sp, #0]
    2788:	231f      	movs	r3, #31
    278a:	2214      	movs	r2, #20
    278c:	32ff      	adds	r2, #255	; 0xff
    278e:	491e      	ldr	r1, [pc, #120]	; (2808 <rssiOp+0x170>)
    2790:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 350, 31, OPT_SIGNED|3, "dB");
    2792:	6820      	ldr	r0, [r4, #0]
    2794:	465b      	mov	r3, fp
    2796:	9301      	str	r3, [sp, #4]
    2798:	9500      	str	r5, [sp, #0]
    279a:	231f      	movs	r3, #31
    279c:	22af      	movs	r2, #175	; 0xaf
    279e:	0052      	lsls	r2, r2, #1
    27a0:	4919      	ldr	r1, [pc, #100]	; (2808 <rssiOp+0x170>)
    27a2:	47b8      	blx	r7
		drawBack();
    27a4:	4b19      	ldr	r3, [pc, #100]	; (280c <rssiOp+0x174>)
    27a6:	4798      	blx	r3
		drawTitle("RSSI [interior]");
    27a8:	4819      	ldr	r0, [pc, #100]	; (2810 <rssiOp+0x178>)
    27aa:	4b1a      	ldr	r3, [pc, #104]	; (2814 <rssiOp+0x17c>)
    27ac:	4798      	blx	r3
		disEnd();
    27ae:	4b1a      	ldr	r3, [pc, #104]	; (2818 <rssiOp+0x180>)
    27b0:	4798      	blx	r3
	} while (tag != back);
    27b2:	7833      	ldrb	r3, [r6, #0]
    27b4:	2b06      	cmp	r3, #6
    27b6:	d000      	beq.n	27ba <rssiOp+0x122>
    27b8:	e772      	b.n	26a0 <rssiOp+0x8>
}//end rssiOp
    27ba:	b002      	add	sp, #8
    27bc:	bc04      	pop	{r2}
    27be:	4693      	mov	fp, r2
    27c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	2000011d 	.word	0x2000011d
    27c8:	000021a5 	.word	0x000021a5
    27cc:	20000788 	.word	0x20000788
    27d0:	0030212c 	.word	0x0030212c
    27d4:	00001bc5 	.word	0x00001bc5
    27d8:	20000114 	.word	0x20000114
    27dc:	20000118 	.word	0x20000118
    27e0:	000018e9 	.word	0x000018e9
    27e4:	00000703 	.word	0x00000703
    27e8:	0000028a 	.word	0x0000028a
    27ec:	00001775 	.word	0x00001775
    27f0:	00005858 	.word	0x00005858
    27f4:	000016f1 	.word	0x000016f1
    27f8:	00005860 	.word	0x00005860
    27fc:	00005868 	.word	0x00005868
    2800:	00005870 	.word	0x00005870
    2804:	00005878 	.word	0x00005878
    2808:	000002ee 	.word	0x000002ee
    280c:	00001f1d 	.word	0x00001f1d
    2810:	00005960 	.word	0x00005960
    2814:	00001e9d 	.word	0x00001e9d
    2818:	000021d1 	.word	0x000021d1

0000281c <calScreen>:
void calScreen(){
    281c:	b530      	push	{r4, r5, lr}
    281e:	b083      	sub	sp, #12
	disStart();
    2820:	4b0c      	ldr	r3, [pc, #48]	; (2854 <calScreen+0x38>)
    2822:	4798      	blx	r3
	Ft_Gpu_CoCmd_Text(phost,disWid/2,disHei/2,30,OPT_CENTER,"Please tap on the dot");
    2824:	4c0c      	ldr	r4, [pc, #48]	; (2858 <calScreen+0x3c>)
    2826:	6820      	ldr	r0, [r4, #0]
    2828:	4b0c      	ldr	r3, [pc, #48]	; (285c <calScreen+0x40>)
    282a:	9301      	str	r3, [sp, #4]
    282c:	23c0      	movs	r3, #192	; 0xc0
    282e:	00db      	lsls	r3, r3, #3
    2830:	9300      	str	r3, [sp, #0]
    2832:	231e      	movs	r3, #30
    2834:	22f0      	movs	r2, #240	; 0xf0
    2836:	21c8      	movs	r1, #200	; 0xc8
    2838:	0049      	lsls	r1, r1, #1
    283a:	4d09      	ldr	r5, [pc, #36]	; (2860 <calScreen+0x44>)
    283c:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Calibrate(phost,0);
    283e:	6820      	ldr	r0, [r4, #0]
    2840:	2100      	movs	r1, #0
    2842:	4b08      	ldr	r3, [pc, #32]	; (2864 <calScreen+0x48>)
    2844:	4798      	blx	r3
	disEnd();
    2846:	4b08      	ldr	r3, [pc, #32]	; (2868 <calScreen+0x4c>)
    2848:	4798      	blx	r3
	delay_ms(100);
    284a:	2064      	movs	r0, #100	; 0x64
    284c:	4b07      	ldr	r3, [pc, #28]	; (286c <calScreen+0x50>)
    284e:	4798      	blx	r3
}//end calScreen
    2850:	b003      	add	sp, #12
    2852:	bd30      	pop	{r4, r5, pc}
    2854:	000021a5 	.word	0x000021a5
    2858:	20000788 	.word	0x20000788
    285c:	00005888 	.word	0x00005888
    2860:	000016f1 	.word	0x000016f1
    2864:	000018ad 	.word	0x000018ad
    2868:	000021d1 	.word	0x000021d1
    286c:	00000151 	.word	0x00000151

00002870 <setTime>:
void setTime(){
    2870:	b5f0      	push	{r4, r5, r6, r7, lr}
    2872:	46de      	mov	lr, fp
    2874:	4657      	mov	r7, sl
    2876:	464e      	mov	r6, r9
    2878:	4645      	mov	r5, r8
    287a:	b5e0      	push	{r5, r6, r7, lr}
    287c:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, timeIn[10] = "0", i = 0, pressed = 0;
    287e:	2330      	movs	r3, #48	; 0x30
    2880:	9305      	str	r3, [sp, #20]
    2882:	2206      	movs	r2, #6
    2884:	2100      	movs	r1, #0
    2886:	a806      	add	r0, sp, #24
    2888:	4b88      	ldr	r3, [pc, #544]	; (2aac <setTime+0x23c>)
    288a:	4798      	blx	r3
    288c:	2300      	movs	r3, #0
    288e:	9303      	str	r3, [sp, #12]
    2890:	2600      	movs	r6, #0
    2892:	469b      	mov	fp, r3
    2894:	e022      	b.n	28dc <setTime+0x6c>
		else							timeIn[i] = '_';
    2896:	225f      	movs	r2, #95	; 0x5f
    2898:	ab05      	add	r3, sp, #20
    289a:	559a      	strb	r2, [r3, r6]
    289c:	e029      	b.n	28f2 <setTime+0x82>
		if (tag>47 && tag<58)	pressed = tag - 48;
    289e:	9203      	str	r2, [sp, #12]
    28a0:	e081      	b.n	29a6 <setTime+0x136>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    28a2:	2e01      	cmp	r6, #1
    28a4:	d100      	bne.n	28a8 <setTime+0x38>
    28a6:	e090      	b.n	29ca <setTime+0x15a>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    28a8:	2e03      	cmp	r6, #3
    28aa:	d100      	bne.n	28ae <setTime+0x3e>
    28ac:	e096      	b.n	29dc <setTime+0x16c>
    28ae:	2e06      	cmp	r6, #6
    28b0:	d100      	bne.n	28b4 <setTime+0x44>
    28b2:	e093      	b.n	29dc <setTime+0x16c>
					timeIn[i] = tag;
    28b4:	aa05      	add	r2, sp, #20
    28b6:	5593      	strb	r3, [r2, r6]
					i++;
    28b8:	3601      	adds	r6, #1
    28ba:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==9){		//if ok is pressed
    28bc:	2b0b      	cmp	r3, #11
    28be:	d100      	bne.n	28c2 <setTime+0x52>
    28c0:	e0b0      	b.n	2a24 <setTime+0x1b4>
    28c2:	2e09      	cmp	r6, #9
    28c4:	d100      	bne.n	28c8 <setTime+0x58>
    28c6:	e0ad      	b.n	2a24 <setTime+0x1b4>
			tempTag = tag;
    28c8:	469b      	mov	fp, r3
		if(i==2 || i==5){
    28ca:	2e02      	cmp	r6, #2
    28cc:	d100      	bne.n	28d0 <setTime+0x60>
    28ce:	e0e6      	b.n	2a9e <setTime+0x22e>
    28d0:	2e05      	cmp	r6, #5
    28d2:	d100      	bne.n	28d6 <setTime+0x66>
    28d4:	e0e3      	b.n	2a9e <setTime+0x22e>
	}while(tag != back);
    28d6:	2b06      	cmp	r3, #6
    28d8:	d100      	bne.n	28dc <setTime+0x6c>
    28da:	e0d6      	b.n	2a8a <setTime+0x21a>
		rtc_calendar_get_time(&rtc_instance, &time);
    28dc:	4c74      	ldr	r4, [pc, #464]	; (2ab0 <setTime+0x240>)
    28de:	0021      	movs	r1, r4
    28e0:	4874      	ldr	r0, [pc, #464]	; (2ab4 <setTime+0x244>)
    28e2:	4b75      	ldr	r3, [pc, #468]	; (2ab8 <setTime+0x248>)
    28e4:	4798      	blx	r3
		if (time.second%2 == 1)			timeIn[i] = ' ';
    28e6:	7823      	ldrb	r3, [r4, #0]
    28e8:	07db      	lsls	r3, r3, #31
    28ea:	d5d4      	bpl.n	2896 <setTime+0x26>
    28ec:	2220      	movs	r2, #32
    28ee:	ab05      	add	r3, sp, #20
    28f0:	559a      	strb	r2, [r3, r6]
		tag = 0;
    28f2:	4b72      	ldr	r3, [pc, #456]	; (2abc <setTime+0x24c>)
    28f4:	4699      	mov	r9, r3
    28f6:	2300      	movs	r3, #0
    28f8:	4698      	mov	r8, r3
    28fa:	464a      	mov	r2, r9
    28fc:	7013      	strb	r3, [r2, #0]
		disStart();
    28fe:	4b70      	ldr	r3, [pc, #448]	; (2ac0 <setTime+0x250>)
    2900:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    2902:	4c70      	ldr	r4, [pc, #448]	; (2ac4 <setTime+0x254>)
    2904:	4970      	ldr	r1, [pc, #448]	; (2ac8 <setTime+0x258>)
    2906:	6820      	ldr	r0, [r4, #0]
    2908:	4d70      	ldr	r5, [pc, #448]	; (2acc <setTime+0x25c>)
    290a:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    290c:	4970      	ldr	r1, [pc, #448]	; (2ad0 <setTime+0x260>)
    290e:	6820      	ldr	r0, [r4, #0]
    2910:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2912:	4970      	ldr	r1, [pc, #448]	; (2ad4 <setTime+0x264>)
    2914:	6820      	ldr	r0, [r4, #0]
    2916:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    2918:	496f      	ldr	r1, [pc, #444]	; (2ad8 <setTime+0x268>)
    291a:	6820      	ldr	r0, [r4, #0]
    291c:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    291e:	496f      	ldr	r1, [pc, #444]	; (2adc <setTime+0x26c>)
    2920:	6820      	ldr	r0, [r4, #0]
    2922:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    2924:	2184      	movs	r1, #132	; 0x84
    2926:	0589      	lsls	r1, r1, #22
    2928:	6820      	ldr	r0, [r4, #0]
    292a:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    292c:	4969      	ldr	r1, [pc, #420]	; (2ad4 <setTime+0x264>)
    292e:	6820      	ldr	r0, [r4, #0]
    2930:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Time");
    2932:	6820      	ldr	r0, [r4, #0]
    2934:	4b6a      	ldr	r3, [pc, #424]	; (2ae0 <setTime+0x270>)
    2936:	9301      	str	r3, [sp, #4]
    2938:	4643      	mov	r3, r8
    293a:	9300      	str	r3, [sp, #0]
    293c:	331c      	adds	r3, #28
    293e:	2230      	movs	r2, #48	; 0x30
    2940:	21f0      	movs	r1, #240	; 0xf0
    2942:	4f68      	ldr	r7, [pc, #416]	; (2ae4 <setTime+0x274>)
    2944:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "hh:mm:ss    (24h format)");
    2946:	6820      	ldr	r0, [r4, #0]
    2948:	4b67      	ldr	r3, [pc, #412]	; (2ae8 <setTime+0x278>)
    294a:	9301      	str	r3, [sp, #4]
    294c:	4643      	mov	r3, r8
    294e:	9300      	str	r3, [sp, #0]
    2950:	331c      	adds	r3, #28
    2952:	2248      	movs	r2, #72	; 0x48
    2954:	21f0      	movs	r1, #240	; 0xf0
    2956:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    2958:	2180      	movs	r1, #128	; 0x80
    295a:	04c9      	lsls	r1, r1, #19
    295c:	6820      	ldr	r0, [r4, #0]
    295e:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, timeIn);
    2960:	6820      	ldr	r0, [r4, #0]
    2962:	ab05      	add	r3, sp, #20
    2964:	9301      	str	r3, [sp, #4]
    2966:	4643      	mov	r3, r8
    2968:	9300      	str	r3, [sp, #0]
    296a:	331e      	adds	r3, #30
    296c:	2278      	movs	r2, #120	; 0x78
    296e:	21f5      	movs	r1, #245	; 0xf5
    2970:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    2972:	4958      	ldr	r1, [pc, #352]	; (2ad4 <setTime+0x264>)
    2974:	6820      	ldr	r0, [r4, #0]
    2976:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2978:	6820      	ldr	r0, [r4, #0]
    297a:	495c      	ldr	r1, [pc, #368]	; (2aec <setTime+0x27c>)
    297c:	4b5c      	ldr	r3, [pc, #368]	; (2af0 <setTime+0x280>)
    297e:	4798      	blx	r3
    2980:	464b      	mov	r3, r9
    2982:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    2984:	9803      	ldr	r0, [sp, #12]
    2986:	4b5b      	ldr	r3, [pc, #364]	; (2af4 <setTime+0x284>)
    2988:	4798      	blx	r3
		drawBack();
    298a:	4b5b      	ldr	r3, [pc, #364]	; (2af8 <setTime+0x288>)
    298c:	4798      	blx	r3
		disEnd();
    298e:	4b5b      	ldr	r3, [pc, #364]	; (2afc <setTime+0x28c>)
    2990:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    2992:	464b      	mov	r3, r9
    2994:	781b      	ldrb	r3, [r3, #0]
    2996:	001a      	movs	r2, r3
    2998:	3a30      	subs	r2, #48	; 0x30
    299a:	b2d2      	uxtb	r2, r2
    299c:	2a09      	cmp	r2, #9
    299e:	d800      	bhi.n	29a2 <setTime+0x132>
    29a0:	e77d      	b.n	289e <setTime+0x2e>
		else					pressed = 0;
    29a2:	2100      	movs	r1, #0
    29a4:	9103      	str	r1, [sp, #12]
		if(tag==0)		tempTag = tag;
    29a6:	2b00      	cmp	r3, #0
    29a8:	d100      	bne.n	29ac <setTime+0x13c>
    29aa:	469b      	mov	fp, r3
		if (tempTag != tag && tag != 0 && tag!=back){
    29ac:	459b      	cmp	fp, r3
    29ae:	d08c      	beq.n	28ca <setTime+0x5a>
    29b0:	2b00      	cmp	r3, #0
    29b2:	d08a      	beq.n	28ca <setTime+0x5a>
    29b4:	2b06      	cmp	r3, #6
    29b6:	d088      	beq.n	28ca <setTime+0x5a>
			if(tag> 47 && tag<58){
    29b8:	2a09      	cmp	r2, #9
    29ba:	d813      	bhi.n	29e4 <setTime+0x174>
				if(i==0 && tag>50);								//1st digit in hour
    29bc:	2e00      	cmp	r6, #0
    29be:	d000      	beq.n	29c2 <setTime+0x152>
    29c0:	e76f      	b.n	28a2 <setTime+0x32>
    29c2:	2b32      	cmp	r3, #50	; 0x32
    29c4:	d900      	bls.n	29c8 <setTime+0x158>
    29c6:	e779      	b.n	28bc <setTime+0x4c>
    29c8:	e76b      	b.n	28a2 <setTime+0x32>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    29ca:	aa05      	add	r2, sp, #20
    29cc:	7812      	ldrb	r2, [r2, #0]
    29ce:	2a32      	cmp	r2, #50	; 0x32
    29d0:	d000      	beq.n	29d4 <setTime+0x164>
    29d2:	e769      	b.n	28a8 <setTime+0x38>
    29d4:	2b33      	cmp	r3, #51	; 0x33
    29d6:	d900      	bls.n	29da <setTime+0x16a>
    29d8:	e770      	b.n	28bc <setTime+0x4c>
    29da:	e765      	b.n	28a8 <setTime+0x38>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    29dc:	2b35      	cmp	r3, #53	; 0x35
    29de:	d900      	bls.n	29e2 <setTime+0x172>
    29e0:	e76c      	b.n	28bc <setTime+0x4c>
    29e2:	e767      	b.n	28b4 <setTime+0x44>
			} else if(tag == clr){		//if clr is pressed
    29e4:	2b0a      	cmp	r3, #10
    29e6:	d00f      	beq.n	2a08 <setTime+0x198>
			} else if(tag==del && i>0){		//if del is pressed
    29e8:	2b09      	cmp	r3, #9
    29ea:	d000      	beq.n	29ee <setTime+0x17e>
    29ec:	e766      	b.n	28bc <setTime+0x4c>
    29ee:	2e00      	cmp	r6, #0
    29f0:	d100      	bne.n	29f4 <setTime+0x184>
    29f2:	e763      	b.n	28bc <setTime+0x4c>
				if(i==3 || i==6){			//clear last user input
    29f4:	2e03      	cmp	r6, #3
    29f6:	d00f      	beq.n	2a18 <setTime+0x1a8>
    29f8:	2e06      	cmp	r6, #6
    29fa:	d00d      	beq.n	2a18 <setTime+0x1a8>
				timeIn[i] = 0;
    29fc:	2100      	movs	r1, #0
    29fe:	aa05      	add	r2, sp, #20
    2a00:	5591      	strb	r1, [r2, r6]
				i--;
    2a02:	3e01      	subs	r6, #1
    2a04:	b2f6      	uxtb	r6, r6
    2a06:	e759      	b.n	28bc <setTime+0x4c>
					timeIn[i] = 0;
    2a08:	2100      	movs	r1, #0
    2a0a:	aa05      	add	r2, sp, #20
    2a0c:	5591      	strb	r1, [r2, r6]
					i--;
    2a0e:	3e01      	subs	r6, #1
    2a10:	b2f6      	uxtb	r6, r6
				}while(i>0);
    2a12:	2e00      	cmp	r6, #0
    2a14:	d1f8      	bne.n	2a08 <setTime+0x198>
    2a16:	e751      	b.n	28bc <setTime+0x4c>
					timeIn[i] = 0;
    2a18:	2100      	movs	r1, #0
    2a1a:	aa05      	add	r2, sp, #20
    2a1c:	5591      	strb	r1, [r2, r6]
					i--;
    2a1e:	3e01      	subs	r6, #1
    2a20:	b2f6      	uxtb	r6, r6
    2a22:	e7eb      	b.n	29fc <setTime+0x18c>
				timeIn[i] = 0;			// compute time and update to the system
    2a24:	ac05      	add	r4, sp, #20
    2a26:	2300      	movs	r3, #0
    2a28:	55a3      	strb	r3, [r4, r6]
				rtc_calendar_disable(&rtc_instance);
    2a2a:	4822      	ldr	r0, [pc, #136]	; (2ab4 <setTime+0x244>)
    2a2c:	4b34      	ldr	r3, [pc, #208]	; (2b00 <setTime+0x290>)
    2a2e:	4798      	blx	r3
				time.hour = (timeIn[0]%48)*10+(timeIn[1]%48);
    2a30:	7820      	ldrb	r0, [r4, #0]
    2a32:	4f34      	ldr	r7, [pc, #208]	; (2b04 <setTime+0x294>)
    2a34:	2130      	movs	r1, #48	; 0x30
    2a36:	47b8      	blx	r7
    2a38:	008b      	lsls	r3, r1, #2
    2a3a:	18c9      	adds	r1, r1, r3
    2a3c:	004b      	lsls	r3, r1, #1
    2a3e:	b2dd      	uxtb	r5, r3
    2a40:	7860      	ldrb	r0, [r4, #1]
    2a42:	2130      	movs	r1, #48	; 0x30
    2a44:	47b8      	blx	r7
    2a46:	1869      	adds	r1, r5, r1
    2a48:	4e19      	ldr	r6, [pc, #100]	; (2ab0 <setTime+0x240>)
    2a4a:	70b1      	strb	r1, [r6, #2]
				time.minute = (timeIn[3]%48)*10+(timeIn[4]%48);
    2a4c:	78e0      	ldrb	r0, [r4, #3]
    2a4e:	2130      	movs	r1, #48	; 0x30
    2a50:	47b8      	blx	r7
    2a52:	008b      	lsls	r3, r1, #2
    2a54:	18c9      	adds	r1, r1, r3
    2a56:	004b      	lsls	r3, r1, #1
    2a58:	b2dd      	uxtb	r5, r3
    2a5a:	7920      	ldrb	r0, [r4, #4]
    2a5c:	2130      	movs	r1, #48	; 0x30
    2a5e:	47b8      	blx	r7
    2a60:	1869      	adds	r1, r5, r1
    2a62:	7071      	strb	r1, [r6, #1]
				time.second = (timeIn[06]%48)*10+(timeIn[7]%48);
    2a64:	79a0      	ldrb	r0, [r4, #6]
    2a66:	2130      	movs	r1, #48	; 0x30
    2a68:	47b8      	blx	r7
    2a6a:	008b      	lsls	r3, r1, #2
    2a6c:	18c9      	adds	r1, r1, r3
    2a6e:	004b      	lsls	r3, r1, #1
    2a70:	b2dd      	uxtb	r5, r3
    2a72:	79e0      	ldrb	r0, [r4, #7]
    2a74:	2130      	movs	r1, #48	; 0x30
    2a76:	47b8      	blx	r7
    2a78:	1869      	adds	r1, r5, r1
    2a7a:	7031      	strb	r1, [r6, #0]
				rtc_calendar_set_time(&rtc_instance, &time);
    2a7c:	0031      	movs	r1, r6
    2a7e:	480d      	ldr	r0, [pc, #52]	; (2ab4 <setTime+0x244>)
    2a80:	4b21      	ldr	r3, [pc, #132]	; (2b08 <setTime+0x298>)
    2a82:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    2a84:	480b      	ldr	r0, [pc, #44]	; (2ab4 <setTime+0x244>)
    2a86:	4b21      	ldr	r3, [pc, #132]	; (2b0c <setTime+0x29c>)
    2a88:	4798      	blx	r3
	tag = 0;
    2a8a:	2200      	movs	r2, #0
    2a8c:	4b0b      	ldr	r3, [pc, #44]	; (2abc <setTime+0x24c>)
    2a8e:	701a      	strb	r2, [r3, #0]
}//end setTime
    2a90:	b009      	add	sp, #36	; 0x24
    2a92:	bc3c      	pop	{r2, r3, r4, r5}
    2a94:	4690      	mov	r8, r2
    2a96:	4699      	mov	r9, r3
    2a98:	46a2      	mov	sl, r4
    2a9a:	46ab      	mov	fp, r5
    2a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			timeIn[i] = ':';
    2a9e:	213a      	movs	r1, #58	; 0x3a
    2aa0:	aa05      	add	r2, sp, #20
    2aa2:	5591      	strb	r1, [r2, r6]
			i++;
    2aa4:	3601      	adds	r6, #1
    2aa6:	b2f6      	uxtb	r6, r6
    2aa8:	e715      	b.n	28d6 <setTime+0x66>
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	00004fcf 	.word	0x00004fcf
    2ab0:	20000780 	.word	0x20000780
    2ab4:	20000468 	.word	0x20000468
    2ab8:	00000555 	.word	0x00000555
    2abc:	2000011d 	.word	0x2000011d
    2ac0:	000021a5 	.word	0x000021a5
    2ac4:	20000788 	.word	0x20000788
    2ac8:	1f000009 	.word	0x1f000009
    2acc:	00001d35 	.word	0x00001d35
    2ad0:	0e00003c 	.word	0x0e00003c
    2ad4:	04ffffff 	.word	0x04ffffff
    2ad8:	478006e0 	.word	0x478006e0
    2adc:	51800a00 	.word	0x51800a00
    2ae0:	00005988 	.word	0x00005988
    2ae4:	000016f1 	.word	0x000016f1
    2ae8:	00005994 	.word	0x00005994
    2aec:	0030212c 	.word	0x0030212c
    2af0:	00001bc5 	.word	0x00001bc5
    2af4:	00001f79 	.word	0x00001f79
    2af8:	00001f1d 	.word	0x00001f1d
    2afc:	000021d1 	.word	0x000021d1
    2b00:	00000459 	.word	0x00000459
    2b04:	00004f15 	.word	0x00004f15
    2b08:	00000531 	.word	0x00000531
    2b0c:	00000439 	.word	0x00000439

00002b10 <setDate>:
void setDate(){
    2b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b12:	46de      	mov	lr, fp
    2b14:	4657      	mov	r7, sl
    2b16:	464e      	mov	r6, r9
    2b18:	4645      	mov	r5, r8
    2b1a:	b5e0      	push	{r5, r6, r7, lr}
    2b1c:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, pressed = 0, i = 0, month = 0, dateIn[12] = "0";
    2b1e:	2330      	movs	r3, #48	; 0x30
    2b20:	9305      	str	r3, [sp, #20]
    2b22:	2208      	movs	r2, #8
    2b24:	2100      	movs	r1, #0
    2b26:	a806      	add	r0, sp, #24
    2b28:	4bc6      	ldr	r3, [pc, #792]	; (2e44 <setDate+0x334>)
    2b2a:	4798      	blx	r3
    2b2c:	2600      	movs	r6, #0
    2b2e:	2300      	movs	r3, #0
    2b30:	9303      	str	r3, [sp, #12]
    2b32:	469b      	mov	fp, r3
    2b34:	e028      	b.n	2b88 <setDate+0x78>
		else							dateIn[i] = '_';
    2b36:	225f      	movs	r2, #95	; 0x5f
    2b38:	ab05      	add	r3, sp, #20
    2b3a:	559a      	strb	r2, [r3, r6]
    2b3c:	e02f      	b.n	2b9e <setDate+0x8e>
		if (tag>47 && tag<58)	pressed = tag - 48;
    2b3e:	9303      	str	r3, [sp, #12]
    2b40:	e087      	b.n	2c52 <setDate+0x142>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    2b42:	2e01      	cmp	r6, #1
    2b44:	d100      	bne.n	2b48 <setDate+0x38>
    2b46:	e096      	b.n	2c76 <setDate+0x166>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    2b48:	2e03      	cmp	r6, #3
    2b4a:	d100      	bne.n	2b4e <setDate+0x3e>
    2b4c:	e09c      	b.n	2c88 <setDate+0x178>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    2b4e:	2e03      	cmp	r6, #3
    2b50:	d100      	bne.n	2b54 <setDate+0x44>
    2b52:	e0af      	b.n	2cb4 <setDate+0x1a4>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    2b54:	2e04      	cmp	r6, #4
    2b56:	d100      	bne.n	2b5a <setDate+0x4a>
    2b58:	e0c2      	b.n	2ce0 <setDate+0x1d0>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    2b5a:	2e04      	cmp	r6, #4
    2b5c:	d100      	bne.n	2b60 <setDate+0x50>
    2b5e:	e0dc      	b.n	2d1a <setDate+0x20a>
					dateIn[i] = tag;
    2b60:	ab05      	add	r3, sp, #20
    2b62:	559c      	strb	r4, [r3, r6]
					i++;
    2b64:	3601      	adds	r6, #1
    2b66:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==11){			//if ok is pressed
    2b68:	2c0b      	cmp	r4, #11
    2b6a:	d100      	bne.n	2b6e <setDate+0x5e>
    2b6c:	e112      	b.n	2d94 <setDate+0x284>
    2b6e:	2e0b      	cmp	r6, #11
    2b70:	d100      	bne.n	2b74 <setDate+0x64>
    2b72:	e10f      	b.n	2d94 <setDate+0x284>
			tempTag = tag;
    2b74:	46a3      	mov	fp, r4
		if(i==2 || i==5){
    2b76:	2e02      	cmp	r6, #2
    2b78:	d100      	bne.n	2b7c <setDate+0x6c>
    2b7a:	e15d      	b.n	2e38 <setDate+0x328>
    2b7c:	2e05      	cmp	r6, #5
    2b7e:	d100      	bne.n	2b82 <setDate+0x72>
    2b80:	e15a      	b.n	2e38 <setDate+0x328>
	}while(tag != back);
    2b82:	2c06      	cmp	r4, #6
    2b84:	d100      	bne.n	2b88 <setDate+0x78>
    2b86:	e14d      	b.n	2e24 <setDate+0x314>
		rtc_calendar_get_time(&rtc_instance, &time);
    2b88:	4caf      	ldr	r4, [pc, #700]	; (2e48 <setDate+0x338>)
    2b8a:	0021      	movs	r1, r4
    2b8c:	48af      	ldr	r0, [pc, #700]	; (2e4c <setDate+0x33c>)
    2b8e:	4bb0      	ldr	r3, [pc, #704]	; (2e50 <setDate+0x340>)
    2b90:	4798      	blx	r3
		if (time.second%2 == 1)			dateIn[i] = ' ';
    2b92:	7823      	ldrb	r3, [r4, #0]
    2b94:	07db      	lsls	r3, r3, #31
    2b96:	d5ce      	bpl.n	2b36 <setDate+0x26>
    2b98:	2220      	movs	r2, #32
    2b9a:	ab05      	add	r3, sp, #20
    2b9c:	559a      	strb	r2, [r3, r6]
		tag = 0;
    2b9e:	4bad      	ldr	r3, [pc, #692]	; (2e54 <setDate+0x344>)
    2ba0:	4699      	mov	r9, r3
    2ba2:	2300      	movs	r3, #0
    2ba4:	4698      	mov	r8, r3
    2ba6:	464a      	mov	r2, r9
    2ba8:	7013      	strb	r3, [r2, #0]
		disStart();
    2baa:	4bab      	ldr	r3, [pc, #684]	; (2e58 <setDate+0x348>)
    2bac:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    2bae:	4cab      	ldr	r4, [pc, #684]	; (2e5c <setDate+0x34c>)
    2bb0:	49ab      	ldr	r1, [pc, #684]	; (2e60 <setDate+0x350>)
    2bb2:	6820      	ldr	r0, [r4, #0]
    2bb4:	4dab      	ldr	r5, [pc, #684]	; (2e64 <setDate+0x354>)
    2bb6:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    2bb8:	49ab      	ldr	r1, [pc, #684]	; (2e68 <setDate+0x358>)
    2bba:	6820      	ldr	r0, [r4, #0]
    2bbc:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2bbe:	49ab      	ldr	r1, [pc, #684]	; (2e6c <setDate+0x35c>)
    2bc0:	6820      	ldr	r0, [r4, #0]
    2bc2:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    2bc4:	49aa      	ldr	r1, [pc, #680]	; (2e70 <setDate+0x360>)
    2bc6:	6820      	ldr	r0, [r4, #0]
    2bc8:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    2bca:	49aa      	ldr	r1, [pc, #680]	; (2e74 <setDate+0x364>)
    2bcc:	6820      	ldr	r0, [r4, #0]
    2bce:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    2bd0:	2184      	movs	r1, #132	; 0x84
    2bd2:	0589      	lsls	r1, r1, #22
    2bd4:	6820      	ldr	r0, [r4, #0]
    2bd6:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2bd8:	49a4      	ldr	r1, [pc, #656]	; (2e6c <setDate+0x35c>)
    2bda:	6820      	ldr	r0, [r4, #0]
    2bdc:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Date");
    2bde:	6820      	ldr	r0, [r4, #0]
    2be0:	4ba5      	ldr	r3, [pc, #660]	; (2e78 <setDate+0x368>)
    2be2:	9301      	str	r3, [sp, #4]
    2be4:	4643      	mov	r3, r8
    2be6:	9300      	str	r3, [sp, #0]
    2be8:	331c      	adds	r3, #28
    2bea:	2230      	movs	r2, #48	; 0x30
    2bec:	21f0      	movs	r1, #240	; 0xf0
    2bee:	4fa3      	ldr	r7, [pc, #652]	; (2e7c <setDate+0x36c>)
    2bf0:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "mm/dd/yyyy");
    2bf2:	6820      	ldr	r0, [r4, #0]
    2bf4:	4ba2      	ldr	r3, [pc, #648]	; (2e80 <setDate+0x370>)
    2bf6:	9301      	str	r3, [sp, #4]
    2bf8:	4643      	mov	r3, r8
    2bfa:	9300      	str	r3, [sp, #0]
    2bfc:	331c      	adds	r3, #28
    2bfe:	2248      	movs	r2, #72	; 0x48
    2c00:	21f0      	movs	r1, #240	; 0xf0
    2c02:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    2c04:	2180      	movs	r1, #128	; 0x80
    2c06:	04c9      	lsls	r1, r1, #19
    2c08:	6820      	ldr	r0, [r4, #0]
    2c0a:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, dateIn);
    2c0c:	6820      	ldr	r0, [r4, #0]
    2c0e:	ab05      	add	r3, sp, #20
    2c10:	9301      	str	r3, [sp, #4]
    2c12:	4643      	mov	r3, r8
    2c14:	9300      	str	r3, [sp, #0]
    2c16:	331e      	adds	r3, #30
    2c18:	2278      	movs	r2, #120	; 0x78
    2c1a:	21f5      	movs	r1, #245	; 0xf5
    2c1c:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    2c1e:	4993      	ldr	r1, [pc, #588]	; (2e6c <setDate+0x35c>)
    2c20:	6820      	ldr	r0, [r4, #0]
    2c22:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2c24:	6820      	ldr	r0, [r4, #0]
    2c26:	4997      	ldr	r1, [pc, #604]	; (2e84 <setDate+0x374>)
    2c28:	4b97      	ldr	r3, [pc, #604]	; (2e88 <setDate+0x378>)
    2c2a:	4798      	blx	r3
    2c2c:	464b      	mov	r3, r9
    2c2e:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    2c30:	9803      	ldr	r0, [sp, #12]
    2c32:	4b96      	ldr	r3, [pc, #600]	; (2e8c <setDate+0x37c>)
    2c34:	4798      	blx	r3
		drawBack();
    2c36:	4b96      	ldr	r3, [pc, #600]	; (2e90 <setDate+0x380>)
    2c38:	4798      	blx	r3
		disEnd();
    2c3a:	4b96      	ldr	r3, [pc, #600]	; (2e94 <setDate+0x384>)
    2c3c:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    2c3e:	464b      	mov	r3, r9
    2c40:	781c      	ldrb	r4, [r3, #0]
    2c42:	0023      	movs	r3, r4
    2c44:	3b30      	subs	r3, #48	; 0x30
    2c46:	b2db      	uxtb	r3, r3
    2c48:	2b09      	cmp	r3, #9
    2c4a:	d800      	bhi.n	2c4e <setDate+0x13e>
    2c4c:	e777      	b.n	2b3e <setDate+0x2e>
		else					pressed = 0;
    2c4e:	2200      	movs	r2, #0
    2c50:	9203      	str	r2, [sp, #12]
		if(tag==0)		tempTag = tag;
    2c52:	2c00      	cmp	r4, #0
    2c54:	d100      	bne.n	2c58 <setDate+0x148>
    2c56:	46a3      	mov	fp, r4
		if (tempTag != tag && tag != 0 && tag!=back){
    2c58:	45a3      	cmp	fp, r4
    2c5a:	d08c      	beq.n	2b76 <setDate+0x66>
    2c5c:	2c00      	cmp	r4, #0
    2c5e:	d08a      	beq.n	2b76 <setDate+0x66>
    2c60:	2c06      	cmp	r4, #6
    2c62:	d088      	beq.n	2b76 <setDate+0x66>
			if(tag> 47 && tag<58){
    2c64:	2b09      	cmp	r3, #9
    2c66:	d875      	bhi.n	2d54 <setDate+0x244>
				if(i==0 && tag>49);					//1st in month
    2c68:	2e00      	cmp	r6, #0
    2c6a:	d000      	beq.n	2c6e <setDate+0x15e>
    2c6c:	e769      	b.n	2b42 <setDate+0x32>
    2c6e:	2c31      	cmp	r4, #49	; 0x31
    2c70:	d900      	bls.n	2c74 <setDate+0x164>
    2c72:	e779      	b.n	2b68 <setDate+0x58>
    2c74:	e765      	b.n	2b42 <setDate+0x32>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    2c76:	ab05      	add	r3, sp, #20
    2c78:	781b      	ldrb	r3, [r3, #0]
    2c7a:	2b31      	cmp	r3, #49	; 0x31
    2c7c:	d000      	beq.n	2c80 <setDate+0x170>
    2c7e:	e763      	b.n	2b48 <setDate+0x38>
    2c80:	2c32      	cmp	r4, #50	; 0x32
    2c82:	d900      	bls.n	2c86 <setDate+0x176>
    2c84:	e770      	b.n	2b68 <setDate+0x58>
    2c86:	e75f      	b.n	2b48 <setDate+0x38>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    2c88:	ad05      	add	r5, sp, #20
    2c8a:	7828      	ldrb	r0, [r5, #0]
    2c8c:	4b82      	ldr	r3, [pc, #520]	; (2e98 <setDate+0x388>)
    2c8e:	4698      	mov	r8, r3
    2c90:	2130      	movs	r1, #48	; 0x30
    2c92:	4798      	blx	r3
    2c94:	b2cb      	uxtb	r3, r1
    2c96:	0099      	lsls	r1, r3, #2
    2c98:	18c9      	adds	r1, r1, r3
    2c9a:	004f      	lsls	r7, r1, #1
    2c9c:	7868      	ldrb	r0, [r5, #1]
    2c9e:	2130      	movs	r1, #48	; 0x30
    2ca0:	47c0      	blx	r8
    2ca2:	b2c9      	uxtb	r1, r1
    2ca4:	187f      	adds	r7, r7, r1
    2ca6:	2f02      	cmp	r7, #2
    2ca8:	d000      	beq.n	2cac <setDate+0x19c>
    2caa:	e750      	b.n	2b4e <setDate+0x3e>
    2cac:	2c32      	cmp	r4, #50	; 0x32
    2cae:	d900      	bls.n	2cb2 <setDate+0x1a2>
    2cb0:	e75a      	b.n	2b68 <setDate+0x58>
    2cb2:	e74c      	b.n	2b4e <setDate+0x3e>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    2cb4:	ad05      	add	r5, sp, #20
    2cb6:	7828      	ldrb	r0, [r5, #0]
    2cb8:	4b77      	ldr	r3, [pc, #476]	; (2e98 <setDate+0x388>)
    2cba:	4698      	mov	r8, r3
    2cbc:	2130      	movs	r1, #48	; 0x30
    2cbe:	4798      	blx	r3
    2cc0:	b2cb      	uxtb	r3, r1
    2cc2:	0099      	lsls	r1, r3, #2
    2cc4:	18c9      	adds	r1, r1, r3
    2cc6:	004f      	lsls	r7, r1, #1
    2cc8:	7868      	ldrb	r0, [r5, #1]
    2cca:	2130      	movs	r1, #48	; 0x30
    2ccc:	47c0      	blx	r8
    2cce:	b2c9      	uxtb	r1, r1
    2cd0:	187f      	adds	r7, r7, r1
    2cd2:	2f02      	cmp	r7, #2
    2cd4:	d100      	bne.n	2cd8 <setDate+0x1c8>
    2cd6:	e73d      	b.n	2b54 <setDate+0x44>
    2cd8:	2c33      	cmp	r4, #51	; 0x33
    2cda:	d900      	bls.n	2cde <setDate+0x1ce>
    2cdc:	e744      	b.n	2b68 <setDate+0x58>
    2cde:	e739      	b.n	2b54 <setDate+0x44>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    2ce0:	ad05      	add	r5, sp, #20
    2ce2:	7828      	ldrb	r0, [r5, #0]
    2ce4:	4b6c      	ldr	r3, [pc, #432]	; (2e98 <setDate+0x388>)
    2ce6:	4698      	mov	r8, r3
    2ce8:	2130      	movs	r1, #48	; 0x30
    2cea:	4798      	blx	r3
    2cec:	008b      	lsls	r3, r1, #2
    2cee:	18c9      	adds	r1, r1, r3
    2cf0:	004b      	lsls	r3, r1, #1
    2cf2:	b2df      	uxtb	r7, r3
    2cf4:	7868      	ldrb	r0, [r5, #1]
    2cf6:	2130      	movs	r1, #48	; 0x30
    2cf8:	47c0      	blx	r8
    2cfa:	1879      	adds	r1, r7, r1
    2cfc:	b2c8      	uxtb	r0, r1
    2cfe:	4b67      	ldr	r3, [pc, #412]	; (2e9c <setDate+0x38c>)
    2d00:	4798      	blx	r3
    2d02:	2800      	cmp	r0, #0
    2d04:	d000      	beq.n	2d08 <setDate+0x1f8>
    2d06:	e728      	b.n	2b5a <setDate+0x4a>
    2d08:	ab05      	add	r3, sp, #20
    2d0a:	78db      	ldrb	r3, [r3, #3]
    2d0c:	2b33      	cmp	r3, #51	; 0x33
    2d0e:	d000      	beq.n	2d12 <setDate+0x202>
    2d10:	e723      	b.n	2b5a <setDate+0x4a>
    2d12:	2c30      	cmp	r4, #48	; 0x30
    2d14:	d900      	bls.n	2d18 <setDate+0x208>
    2d16:	e727      	b.n	2b68 <setDate+0x58>
    2d18:	e71f      	b.n	2b5a <setDate+0x4a>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    2d1a:	ad05      	add	r5, sp, #20
    2d1c:	7828      	ldrb	r0, [r5, #0]
    2d1e:	4b5e      	ldr	r3, [pc, #376]	; (2e98 <setDate+0x388>)
    2d20:	4698      	mov	r8, r3
    2d22:	2130      	movs	r1, #48	; 0x30
    2d24:	4798      	blx	r3
    2d26:	008b      	lsls	r3, r1, #2
    2d28:	18c9      	adds	r1, r1, r3
    2d2a:	004b      	lsls	r3, r1, #1
    2d2c:	b2df      	uxtb	r7, r3
    2d2e:	7868      	ldrb	r0, [r5, #1]
    2d30:	2130      	movs	r1, #48	; 0x30
    2d32:	47c0      	blx	r8
    2d34:	1879      	adds	r1, r7, r1
    2d36:	b2c8      	uxtb	r0, r1
    2d38:	4b58      	ldr	r3, [pc, #352]	; (2e9c <setDate+0x38c>)
    2d3a:	4798      	blx	r3
    2d3c:	2800      	cmp	r0, #0
    2d3e:	d100      	bne.n	2d42 <setDate+0x232>
    2d40:	e70e      	b.n	2b60 <setDate+0x50>
    2d42:	ab05      	add	r3, sp, #20
    2d44:	78db      	ldrb	r3, [r3, #3]
    2d46:	2b33      	cmp	r3, #51	; 0x33
    2d48:	d000      	beq.n	2d4c <setDate+0x23c>
    2d4a:	e709      	b.n	2b60 <setDate+0x50>
    2d4c:	2c31      	cmp	r4, #49	; 0x31
    2d4e:	d900      	bls.n	2d52 <setDate+0x242>
    2d50:	e70a      	b.n	2b68 <setDate+0x58>
    2d52:	e705      	b.n	2b60 <setDate+0x50>
			}else if(tag == clr){			//if clr is pressed
    2d54:	2c0a      	cmp	r4, #10
    2d56:	d00f      	beq.n	2d78 <setDate+0x268>
			}else if(tag==del && i>0){		//if del is pressed
    2d58:	2c09      	cmp	r4, #9
    2d5a:	d000      	beq.n	2d5e <setDate+0x24e>
    2d5c:	e704      	b.n	2b68 <setDate+0x58>
    2d5e:	2e00      	cmp	r6, #0
    2d60:	d100      	bne.n	2d64 <setDate+0x254>
    2d62:	e701      	b.n	2b68 <setDate+0x58>
				if(i==3 || i==6){			//clear last user input
    2d64:	2e03      	cmp	r6, #3
    2d66:	d00f      	beq.n	2d88 <setDate+0x278>
    2d68:	2e06      	cmp	r6, #6
    2d6a:	d00d      	beq.n	2d88 <setDate+0x278>
				dateIn[i] = 0;
    2d6c:	2200      	movs	r2, #0
    2d6e:	ab05      	add	r3, sp, #20
    2d70:	559a      	strb	r2, [r3, r6]
				i--;
    2d72:	3e01      	subs	r6, #1
    2d74:	b2f6      	uxtb	r6, r6
    2d76:	e6f7      	b.n	2b68 <setDate+0x58>
					dateIn[i] = 0;
    2d78:	2200      	movs	r2, #0
    2d7a:	ab05      	add	r3, sp, #20
    2d7c:	559a      	strb	r2, [r3, r6]
					i--;
    2d7e:	3e01      	subs	r6, #1
    2d80:	b2f6      	uxtb	r6, r6
				}while(i>0);
    2d82:	2e00      	cmp	r6, #0
    2d84:	d1f8      	bne.n	2d78 <setDate+0x268>
    2d86:	e6ef      	b.n	2b68 <setDate+0x58>
					dateIn[i] = 0;
    2d88:	2200      	movs	r2, #0
    2d8a:	ab05      	add	r3, sp, #20
    2d8c:	559a      	strb	r2, [r3, r6]
					i--;
    2d8e:	3e01      	subs	r6, #1
    2d90:	b2f6      	uxtb	r6, r6
    2d92:	e7eb      	b.n	2d6c <setDate+0x25c>
				dateIn[i] = 0;				//compute date and update to system
    2d94:	ad05      	add	r5, sp, #20
    2d96:	2300      	movs	r3, #0
    2d98:	55ab      	strb	r3, [r5, r6]
				rtc_calendar_disable(&rtc_instance);
    2d9a:	482c      	ldr	r0, [pc, #176]	; (2e4c <setDate+0x33c>)
    2d9c:	4b40      	ldr	r3, [pc, #256]	; (2ea0 <setDate+0x390>)
    2d9e:	4798      	blx	r3
				time.month = (dateIn[0]%48)*10+(dateIn[1]%48);
    2da0:	7828      	ldrb	r0, [r5, #0]
    2da2:	4e3d      	ldr	r6, [pc, #244]	; (2e98 <setDate+0x388>)
    2da4:	2130      	movs	r1, #48	; 0x30
    2da6:	47b0      	blx	r6
    2da8:	008b      	lsls	r3, r1, #2
    2daa:	18c9      	adds	r1, r1, r3
    2dac:	004b      	lsls	r3, r1, #1
    2dae:	b2dc      	uxtb	r4, r3
    2db0:	7868      	ldrb	r0, [r5, #1]
    2db2:	2130      	movs	r1, #48	; 0x30
    2db4:	47b0      	blx	r6
    2db6:	1861      	adds	r1, r4, r1
    2db8:	4f23      	ldr	r7, [pc, #140]	; (2e48 <setDate+0x338>)
    2dba:	7179      	strb	r1, [r7, #5]
				time.day = (dateIn[3]%48)*10+(dateIn[4]%48);
    2dbc:	78e8      	ldrb	r0, [r5, #3]
    2dbe:	2130      	movs	r1, #48	; 0x30
    2dc0:	47b0      	blx	r6
    2dc2:	008b      	lsls	r3, r1, #2
    2dc4:	18c9      	adds	r1, r1, r3
    2dc6:	004b      	lsls	r3, r1, #1
    2dc8:	b2dc      	uxtb	r4, r3
    2dca:	7928      	ldrb	r0, [r5, #4]
    2dcc:	2130      	movs	r1, #48	; 0x30
    2dce:	47b0      	blx	r6
    2dd0:	1861      	adds	r1, r4, r1
    2dd2:	7139      	strb	r1, [r7, #4]
				time.year = (dateIn[6]%48)*1000+(dateIn[7]%48)*100+dateIn[8]%48*10+dateIn[9]%48;
    2dd4:	79a8      	ldrb	r0, [r5, #6]
    2dd6:	2130      	movs	r1, #48	; 0x30
    2dd8:	47b0      	blx	r6
    2dda:	b2c9      	uxtb	r1, r1
    2ddc:	24fa      	movs	r4, #250	; 0xfa
    2dde:	00a4      	lsls	r4, r4, #2
    2de0:	434c      	muls	r4, r1
    2de2:	b2a4      	uxth	r4, r4
    2de4:	79e8      	ldrb	r0, [r5, #7]
    2de6:	2130      	movs	r1, #48	; 0x30
    2de8:	47b0      	blx	r6
    2dea:	b2c9      	uxtb	r1, r1
    2dec:	2364      	movs	r3, #100	; 0x64
    2dee:	4359      	muls	r1, r3
    2df0:	b289      	uxth	r1, r1
    2df2:	1864      	adds	r4, r4, r1
    2df4:	b2a4      	uxth	r4, r4
    2df6:	7a28      	ldrb	r0, [r5, #8]
    2df8:	2130      	movs	r1, #48	; 0x30
    2dfa:	47b0      	blx	r6
    2dfc:	b2c9      	uxtb	r1, r1
    2dfe:	008b      	lsls	r3, r1, #2
    2e00:	18c9      	adds	r1, r1, r3
    2e02:	004b      	lsls	r3, r1, #1
    2e04:	b29b      	uxth	r3, r3
    2e06:	18e4      	adds	r4, r4, r3
    2e08:	b2a4      	uxth	r4, r4
    2e0a:	7a68      	ldrb	r0, [r5, #9]
    2e0c:	2130      	movs	r1, #48	; 0x30
    2e0e:	47b0      	blx	r6
    2e10:	b2c9      	uxtb	r1, r1
    2e12:	1864      	adds	r4, r4, r1
    2e14:	80fc      	strh	r4, [r7, #6]
				rtc_calendar_set_time(&rtc_instance, &time);
    2e16:	0039      	movs	r1, r7
    2e18:	480c      	ldr	r0, [pc, #48]	; (2e4c <setDate+0x33c>)
    2e1a:	4b22      	ldr	r3, [pc, #136]	; (2ea4 <setDate+0x394>)
    2e1c:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    2e1e:	480b      	ldr	r0, [pc, #44]	; (2e4c <setDate+0x33c>)
    2e20:	4b21      	ldr	r3, [pc, #132]	; (2ea8 <setDate+0x398>)
    2e22:	4798      	blx	r3
	tag = 0;
    2e24:	2200      	movs	r2, #0
    2e26:	4b0b      	ldr	r3, [pc, #44]	; (2e54 <setDate+0x344>)
    2e28:	701a      	strb	r2, [r3, #0]
}//end setDate
    2e2a:	b009      	add	sp, #36	; 0x24
    2e2c:	bc3c      	pop	{r2, r3, r4, r5}
    2e2e:	4690      	mov	r8, r2
    2e30:	4699      	mov	r9, r3
    2e32:	46a2      	mov	sl, r4
    2e34:	46ab      	mov	fp, r5
    2e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dateIn[i] = '/';
    2e38:	222f      	movs	r2, #47	; 0x2f
    2e3a:	ab05      	add	r3, sp, #20
    2e3c:	559a      	strb	r2, [r3, r6]
			i++;
    2e3e:	3601      	adds	r6, #1
    2e40:	b2f6      	uxtb	r6, r6
    2e42:	e69e      	b.n	2b82 <setDate+0x72>
    2e44:	00004fcf 	.word	0x00004fcf
    2e48:	20000780 	.word	0x20000780
    2e4c:	20000468 	.word	0x20000468
    2e50:	00000555 	.word	0x00000555
    2e54:	2000011d 	.word	0x2000011d
    2e58:	000021a5 	.word	0x000021a5
    2e5c:	20000788 	.word	0x20000788
    2e60:	1f000009 	.word	0x1f000009
    2e64:	00001d35 	.word	0x00001d35
    2e68:	0e00003c 	.word	0x0e00003c
    2e6c:	04ffffff 	.word	0x04ffffff
    2e70:	478006e0 	.word	0x478006e0
    2e74:	51800a00 	.word	0x51800a00
    2e78:	00005970 	.word	0x00005970
    2e7c:	000016f1 	.word	0x000016f1
    2e80:	0000597c 	.word	0x0000597c
    2e84:	0030212c 	.word	0x0030212c
    2e88:	00001bc5 	.word	0x00001bc5
    2e8c:	00001f79 	.word	0x00001f79
    2e90:	00001f1d 	.word	0x00001f1d
    2e94:	000021d1 	.word	0x000021d1
    2e98:	00004f15 	.word	0x00004f15
    2e9c:	00001d69 	.word	0x00001d69
    2ea0:	00000459 	.word	0x00000459
    2ea4:	00000531 	.word	0x00000531
    2ea8:	00000439 	.word	0x00000439

00002eac <settingOp>:
void settingOp(){
    2eac:	b530      	push	{r4, r5, lr}
    2eae:	b085      	sub	sp, #20
    2eb0:	e08a      	b.n	2fc8 <settingOp+0x11c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    2eb2:	32ff      	adds	r2, #255	; 0xff
    2eb4:	e0ab      	b.n	300e <settingOp+0x162>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    2eb6:	2200      	movs	r2, #0
    2eb8:	e0c4      	b.n	3044 <settingOp+0x198>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    2eba:	32ff      	adds	r2, #255	; 0xff
    2ebc:	e0e7      	b.n	308e <settingOp+0x1e2>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    2ebe:	2200      	movs	r2, #0
    2ec0:	4991      	ldr	r1, [pc, #580]	; (3108 <settingOp+0x25c>)
    2ec2:	9103      	str	r1, [sp, #12]
    2ec4:	9202      	str	r2, [sp, #8]
    2ec6:	9301      	str	r3, [sp, #4]
    2ec8:	2335      	movs	r3, #53	; 0x35
    2eca:	9300      	str	r3, [sp, #0]
    2ecc:	332b      	adds	r3, #43	; 0x2b
    2ece:	22b1      	movs	r2, #177	; 0xb1
    2ed0:	21c8      	movs	r1, #200	; 0xc8
    2ed2:	0049      	lsls	r1, r1, #1
    2ed4:	4c8d      	ldr	r4, [pc, #564]	; (310c <settingOp+0x260>)
    2ed6:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(cal));
    2ed8:	4c8d      	ldr	r4, [pc, #564]	; (3110 <settingOp+0x264>)
    2eda:	498e      	ldr	r1, [pc, #568]	; (3114 <settingOp+0x268>)
    2edc:	6820      	ldr	r0, [r4, #0]
    2ede:	4b8e      	ldr	r3, [pc, #568]	; (3118 <settingOp+0x26c>)
    2ee0:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    2ee2:	6820      	ldr	r0, [r4, #0]
    2ee4:	4b8d      	ldr	r3, [pc, #564]	; (311c <settingOp+0x270>)
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	4a8d      	ldr	r2, [pc, #564]	; (3120 <settingOp+0x274>)
    2eea:	7812      	ldrb	r2, [r2, #0]
    2eec:	2a07      	cmp	r2, #7
    2eee:	d100      	bne.n	2ef2 <settingOp+0x46>
    2ef0:	e0e9      	b.n	30c6 <settingOp+0x21a>
    2ef2:	2200      	movs	r2, #0
    2ef4:	498b      	ldr	r1, [pc, #556]	; (3124 <settingOp+0x278>)
    2ef6:	9103      	str	r1, [sp, #12]
    2ef8:	9202      	str	r2, [sp, #8]
    2efa:	9301      	str	r3, [sp, #4]
    2efc:	2335      	movs	r3, #53	; 0x35
    2efe:	9300      	str	r3, [sp, #0]
    2f00:	3393      	adds	r3, #147	; 0x93
    2f02:	22f0      	movs	r2, #240	; 0xf0
    2f04:	2196      	movs	r1, #150	; 0x96
    2f06:	0049      	lsls	r1, r1, #1
    2f08:	4c80      	ldr	r4, [pc, #512]	; (310c <settingOp+0x260>)
    2f0a:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sDate));
    2f0c:	4c80      	ldr	r4, [pc, #512]	; (3110 <settingOp+0x264>)
    2f0e:	4986      	ldr	r1, [pc, #536]	; (3128 <settingOp+0x27c>)
    2f10:	6820      	ldr	r0, [r4, #0]
    2f12:	4b81      	ldr	r3, [pc, #516]	; (3118 <settingOp+0x26c>)
    2f14:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    2f16:	6820      	ldr	r0, [r4, #0]
    2f18:	4b80      	ldr	r3, [pc, #512]	; (311c <settingOp+0x270>)
    2f1a:	781b      	ldrb	r3, [r3, #0]
    2f1c:	4a80      	ldr	r2, [pc, #512]	; (3120 <settingOp+0x274>)
    2f1e:	7812      	ldrb	r2, [r2, #0]
    2f20:	2a08      	cmp	r2, #8
    2f22:	d100      	bne.n	2f26 <settingOp+0x7a>
    2f24:	e0d1      	b.n	30ca <settingOp+0x21e>
    2f26:	2200      	movs	r2, #0
    2f28:	4980      	ldr	r1, [pc, #512]	; (312c <settingOp+0x280>)
    2f2a:	9103      	str	r1, [sp, #12]
    2f2c:	9202      	str	r2, [sp, #8]
    2f2e:	9301      	str	r3, [sp, #4]
    2f30:	2335      	movs	r3, #53	; 0x35
    2f32:	9300      	str	r3, [sp, #0]
    2f34:	3393      	adds	r3, #147	; 0x93
    2f36:	2297      	movs	r2, #151	; 0x97
    2f38:	0052      	lsls	r2, r2, #1
    2f3a:	2196      	movs	r1, #150	; 0x96
    2f3c:	0049      	lsls	r1, r1, #1
    2f3e:	4c73      	ldr	r4, [pc, #460]	; (310c <settingOp+0x260>)
    2f40:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sTime));
    2f42:	4c73      	ldr	r4, [pc, #460]	; (3110 <settingOp+0x264>)
    2f44:	497a      	ldr	r1, [pc, #488]	; (3130 <settingOp+0x284>)
    2f46:	6820      	ldr	r0, [r4, #0]
    2f48:	4b73      	ldr	r3, [pc, #460]	; (3118 <settingOp+0x26c>)
    2f4a:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    2f4c:	6820      	ldr	r0, [r4, #0]
    2f4e:	4b73      	ldr	r3, [pc, #460]	; (311c <settingOp+0x270>)
    2f50:	781b      	ldrb	r3, [r3, #0]
    2f52:	4a73      	ldr	r2, [pc, #460]	; (3120 <settingOp+0x274>)
    2f54:	7812      	ldrb	r2, [r2, #0]
    2f56:	2a05      	cmp	r2, #5
    2f58:	d100      	bne.n	2f5c <settingOp+0xb0>
    2f5a:	e0b8      	b.n	30ce <settingOp+0x222>
    2f5c:	2200      	movs	r2, #0
    2f5e:	4975      	ldr	r1, [pc, #468]	; (3134 <settingOp+0x288>)
    2f60:	9103      	str	r1, [sp, #12]
    2f62:	9202      	str	r2, [sp, #8]
    2f64:	9301      	str	r3, [sp, #4]
    2f66:	2335      	movs	r3, #53	; 0x35
    2f68:	9300      	str	r3, [sp, #0]
    2f6a:	3393      	adds	r3, #147	; 0x93
    2f6c:	22b6      	movs	r2, #182	; 0xb6
    2f6e:	0052      	lsls	r2, r2, #1
    2f70:	2196      	movs	r1, #150	; 0x96
    2f72:	0049      	lsls	r1, r1, #1
    2f74:	4c65      	ldr	r4, [pc, #404]	; (310c <settingOp+0x260>)
    2f76:	47a0      	blx	r4
		drawBack();
    2f78:	4b6f      	ldr	r3, [pc, #444]	; (3138 <settingOp+0x28c>)
    2f7a:	4798      	blx	r3
		drawTitle("Settings");
    2f7c:	486f      	ldr	r0, [pc, #444]	; (313c <settingOp+0x290>)
    2f7e:	4b70      	ldr	r3, [pc, #448]	; (3140 <settingOp+0x294>)
    2f80:	4798      	blx	r3
		disEnd();
    2f82:	4b70      	ldr	r3, [pc, #448]	; (3144 <settingOp+0x298>)
    2f84:	4798      	blx	r3
		if (tag == cal)			calScreen();	//go to calibrate the screen
    2f86:	4b66      	ldr	r3, [pc, #408]	; (3120 <settingOp+0x274>)
    2f88:	781b      	ldrb	r3, [r3, #0]
    2f8a:	2b07      	cmp	r3, #7
    2f8c:	d100      	bne.n	2f90 <settingOp+0xe4>
    2f8e:	e0a0      	b.n	30d2 <settingOp+0x226>
		else if (tag == sTime)	setTime();		//set time screen
    2f90:	2b05      	cmp	r3, #5
    2f92:	d100      	bne.n	2f96 <settingOp+0xea>
    2f94:	e0a0      	b.n	30d8 <settingOp+0x22c>
		else if (tag == sDate)	setDate();		//set date screen
    2f96:	2b08      	cmp	r3, #8
    2f98:	d100      	bne.n	2f9c <settingOp+0xf0>
    2f9a:	e0a0      	b.n	30de <settingOp+0x232>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    2f9c:	4b60      	ldr	r3, [pc, #384]	; (3120 <settingOp+0x274>)
    2f9e:	781b      	ldrb	r3, [r3, #0]
    2fa0:	2b0c      	cmp	r3, #12
    2fa2:	d100      	bne.n	2fa6 <settingOp+0xfa>
    2fa4:	e09e      	b.n	30e4 <settingOp+0x238>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    2fa6:	2b0d      	cmp	r3, #13
    2fa8:	d100      	bne.n	2fac <settingOp+0x100>
    2faa:	e09f      	b.n	30ec <settingOp+0x240>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    2fac:	2b0f      	cmp	r3, #15
    2fae:	d100      	bne.n	2fb2 <settingOp+0x106>
    2fb0:	e0a0      	b.n	30f4 <settingOp+0x248>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    2fb2:	2b0e      	cmp	r3, #14
    2fb4:	d100      	bne.n	2fb8 <settingOp+0x10c>
    2fb6:	e0a1      	b.n	30fc <settingOp+0x250>
		delay_ms(50);
    2fb8:	2032      	movs	r0, #50	; 0x32
    2fba:	4b63      	ldr	r3, [pc, #396]	; (3148 <settingOp+0x29c>)
    2fbc:	4798      	blx	r3
	} while (tag != back);
    2fbe:	4b58      	ldr	r3, [pc, #352]	; (3120 <settingOp+0x274>)
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	2b06      	cmp	r3, #6
    2fc4:	d100      	bne.n	2fc8 <settingOp+0x11c>
    2fc6:	e09d      	b.n	3104 <settingOp+0x258>
		tag = 0;
    2fc8:	4d55      	ldr	r5, [pc, #340]	; (3120 <settingOp+0x274>)
    2fca:	2300      	movs	r3, #0
    2fcc:	702b      	strb	r3, [r5, #0]
		disStart();
    2fce:	4b5f      	ldr	r3, [pc, #380]	; (314c <settingOp+0x2a0>)
    2fd0:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2fd2:	4c4f      	ldr	r4, [pc, #316]	; (3110 <settingOp+0x264>)
    2fd4:	495e      	ldr	r1, [pc, #376]	; (3150 <settingOp+0x2a4>)
    2fd6:	6820      	ldr	r0, [r4, #0]
    2fd8:	4b5e      	ldr	r3, [pc, #376]	; (3154 <settingOp+0x2a8>)
    2fda:	4798      	blx	r3
    2fdc:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3-20, 30, OPT_CENTER, "Visual:");
    2fde:	6820      	ldr	r0, [r4, #0]
    2fe0:	4b5d      	ldr	r3, [pc, #372]	; (3158 <settingOp+0x2ac>)
    2fe2:	9301      	str	r3, [sp, #4]
    2fe4:	23c0      	movs	r3, #192	; 0xc0
    2fe6:	00db      	lsls	r3, r3, #3
    2fe8:	9300      	str	r3, [sp, #0]
    2fea:	231e      	movs	r3, #30
    2fec:	228c      	movs	r2, #140	; 0x8c
    2fee:	21c8      	movs	r1, #200	; 0xc8
    2ff0:	4d5a      	ldr	r5, [pc, #360]	; (315c <settingOp+0x2b0>)
    2ff2:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOn));
    2ff4:	495a      	ldr	r1, [pc, #360]	; (3160 <settingOp+0x2b4>)
    2ff6:	6820      	ldr	r0, [r4, #0]
    2ff8:	4b47      	ldr	r3, [pc, #284]	; (3118 <settingOp+0x26c>)
    2ffa:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    2ffc:	6820      	ldr	r0, [r4, #0]
    2ffe:	4b47      	ldr	r3, [pc, #284]	; (311c <settingOp+0x270>)
    3000:	781b      	ldrb	r3, [r3, #0]
    3002:	4a58      	ldr	r2, [pc, #352]	; (3164 <settingOp+0x2b8>)
    3004:	7812      	ldrb	r2, [r2, #0]
    3006:	2a01      	cmp	r2, #1
    3008:	d100      	bne.n	300c <settingOp+0x160>
    300a:	e752      	b.n	2eb2 <settingOp+0x6>
    300c:	2200      	movs	r2, #0
    300e:	4956      	ldr	r1, [pc, #344]	; (3168 <settingOp+0x2bc>)
    3010:	9103      	str	r1, [sp, #12]
    3012:	9202      	str	r2, [sp, #8]
    3014:	9301      	str	r3, [sp, #4]
    3016:	2335      	movs	r3, #53	; 0x35
    3018:	9300      	str	r3, [sp, #0]
    301a:	332b      	adds	r3, #43	; 0x2b
    301c:	2273      	movs	r2, #115	; 0x73
    301e:	2196      	movs	r1, #150	; 0x96
    3020:	0049      	lsls	r1, r1, #1
    3022:	4c3a      	ldr	r4, [pc, #232]	; (310c <settingOp+0x260>)
    3024:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOff));
    3026:	4c3a      	ldr	r4, [pc, #232]	; (3110 <settingOp+0x264>)
    3028:	4950      	ldr	r1, [pc, #320]	; (316c <settingOp+0x2c0>)
    302a:	6820      	ldr	r0, [r4, #0]
    302c:	4b3a      	ldr	r3, [pc, #232]	; (3118 <settingOp+0x26c>)
    302e:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    3030:	6820      	ldr	r0, [r4, #0]
    3032:	4b3a      	ldr	r3, [pc, #232]	; (311c <settingOp+0x270>)
    3034:	781b      	ldrb	r3, [r3, #0]
    3036:	4a4b      	ldr	r2, [pc, #300]	; (3164 <settingOp+0x2b8>)
    3038:	7812      	ldrb	r2, [r2, #0]
    303a:	2a00      	cmp	r2, #0
    303c:	d000      	beq.n	3040 <settingOp+0x194>
    303e:	e73a      	b.n	2eb6 <settingOp+0xa>
    3040:	3201      	adds	r2, #1
    3042:	32ff      	adds	r2, #255	; 0xff
    3044:	4930      	ldr	r1, [pc, #192]	; (3108 <settingOp+0x25c>)
    3046:	9103      	str	r1, [sp, #12]
    3048:	9202      	str	r2, [sp, #8]
    304a:	9301      	str	r3, [sp, #4]
    304c:	2335      	movs	r3, #53	; 0x35
    304e:	9300      	str	r3, [sp, #0]
    3050:	332b      	adds	r3, #43	; 0x2b
    3052:	2273      	movs	r2, #115	; 0x73
    3054:	21c8      	movs	r1, #200	; 0xc8
    3056:	0049      	lsls	r1, r1, #1
    3058:	4c2c      	ldr	r4, [pc, #176]	; (310c <settingOp+0x260>)
    305a:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3+30, 30, OPT_CENTER, "Sound: ");
    305c:	4c2c      	ldr	r4, [pc, #176]	; (3110 <settingOp+0x264>)
    305e:	6820      	ldr	r0, [r4, #0]
    3060:	4b43      	ldr	r3, [pc, #268]	; (3170 <settingOp+0x2c4>)
    3062:	9301      	str	r3, [sp, #4]
    3064:	23c0      	movs	r3, #192	; 0xc0
    3066:	00db      	lsls	r3, r3, #3
    3068:	9300      	str	r3, [sp, #0]
    306a:	231e      	movs	r3, #30
    306c:	22be      	movs	r2, #190	; 0xbe
    306e:	21c8      	movs	r1, #200	; 0xc8
    3070:	4d3a      	ldr	r5, [pc, #232]	; (315c <settingOp+0x2b0>)
    3072:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOn));
    3074:	493f      	ldr	r1, [pc, #252]	; (3174 <settingOp+0x2c8>)
    3076:	6820      	ldr	r0, [r4, #0]
    3078:	4b27      	ldr	r3, [pc, #156]	; (3118 <settingOp+0x26c>)
    307a:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    307c:	6820      	ldr	r0, [r4, #0]
    307e:	4b27      	ldr	r3, [pc, #156]	; (311c <settingOp+0x270>)
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	4a3d      	ldr	r2, [pc, #244]	; (3178 <settingOp+0x2cc>)
    3084:	7812      	ldrb	r2, [r2, #0]
    3086:	2a01      	cmp	r2, #1
    3088:	d100      	bne.n	308c <settingOp+0x1e0>
    308a:	e716      	b.n	2eba <settingOp+0xe>
    308c:	2200      	movs	r2, #0
    308e:	4936      	ldr	r1, [pc, #216]	; (3168 <settingOp+0x2bc>)
    3090:	9103      	str	r1, [sp, #12]
    3092:	9202      	str	r2, [sp, #8]
    3094:	9301      	str	r3, [sp, #4]
    3096:	2335      	movs	r3, #53	; 0x35
    3098:	9300      	str	r3, [sp, #0]
    309a:	332b      	adds	r3, #43	; 0x2b
    309c:	22b1      	movs	r2, #177	; 0xb1
    309e:	2196      	movs	r1, #150	; 0x96
    30a0:	0049      	lsls	r1, r1, #1
    30a2:	4c1a      	ldr	r4, [pc, #104]	; (310c <settingOp+0x260>)
    30a4:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOff));
    30a6:	4c1a      	ldr	r4, [pc, #104]	; (3110 <settingOp+0x264>)
    30a8:	4934      	ldr	r1, [pc, #208]	; (317c <settingOp+0x2d0>)
    30aa:	6820      	ldr	r0, [r4, #0]
    30ac:	4b1a      	ldr	r3, [pc, #104]	; (3118 <settingOp+0x26c>)
    30ae:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    30b0:	6820      	ldr	r0, [r4, #0]
    30b2:	4b1a      	ldr	r3, [pc, #104]	; (311c <settingOp+0x270>)
    30b4:	781b      	ldrb	r3, [r3, #0]
    30b6:	4a30      	ldr	r2, [pc, #192]	; (3178 <settingOp+0x2cc>)
    30b8:	7812      	ldrb	r2, [r2, #0]
    30ba:	2a00      	cmp	r2, #0
    30bc:	d000      	beq.n	30c0 <settingOp+0x214>
    30be:	e6fe      	b.n	2ebe <settingOp+0x12>
    30c0:	3201      	adds	r2, #1
    30c2:	32ff      	adds	r2, #255	; 0xff
    30c4:	e6fc      	b.n	2ec0 <settingOp+0x14>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    30c6:	32f9      	adds	r2, #249	; 0xf9
    30c8:	e714      	b.n	2ef4 <settingOp+0x48>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    30ca:	32f8      	adds	r2, #248	; 0xf8
    30cc:	e72c      	b.n	2f28 <settingOp+0x7c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    30ce:	32fb      	adds	r2, #251	; 0xfb
    30d0:	e745      	b.n	2f5e <settingOp+0xb2>
		if (tag == cal)			calScreen();	//go to calibrate the screen
    30d2:	4b2b      	ldr	r3, [pc, #172]	; (3180 <settingOp+0x2d4>)
    30d4:	4798      	blx	r3
    30d6:	e761      	b.n	2f9c <settingOp+0xf0>
		else if (tag == sTime)	setTime();		//set time screen
    30d8:	4b2a      	ldr	r3, [pc, #168]	; (3184 <settingOp+0x2d8>)
    30da:	4798      	blx	r3
    30dc:	e75e      	b.n	2f9c <settingOp+0xf0>
		else if (tag == sDate)	setDate();		//set date screen
    30de:	4b2a      	ldr	r3, [pc, #168]	; (3188 <settingOp+0x2dc>)
    30e0:	4798      	blx	r3
    30e2:	e75b      	b.n	2f9c <settingOp+0xf0>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    30e4:	2101      	movs	r1, #1
    30e6:	4a1f      	ldr	r2, [pc, #124]	; (3164 <settingOp+0x2b8>)
    30e8:	7011      	strb	r1, [r2, #0]
    30ea:	e75c      	b.n	2fa6 <settingOp+0xfa>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    30ec:	2100      	movs	r1, #0
    30ee:	4a1d      	ldr	r2, [pc, #116]	; (3164 <settingOp+0x2b8>)
    30f0:	7011      	strb	r1, [r2, #0]
    30f2:	e75b      	b.n	2fac <settingOp+0x100>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    30f4:	2100      	movs	r1, #0
    30f6:	4a20      	ldr	r2, [pc, #128]	; (3178 <settingOp+0x2cc>)
    30f8:	7011      	strb	r1, [r2, #0]
    30fa:	e75a      	b.n	2fb2 <settingOp+0x106>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    30fc:	2201      	movs	r2, #1
    30fe:	4b1e      	ldr	r3, [pc, #120]	; (3178 <settingOp+0x2cc>)
    3100:	701a      	strb	r2, [r3, #0]
    3102:	e759      	b.n	2fb8 <settingOp+0x10c>
}//end settOp
    3104:	b005      	add	sp, #20
    3106:	bd30      	pop	{r4, r5, pc}
    3108:	000059bc 	.word	0x000059bc
    310c:	00001805 	.word	0x00001805
    3110:	20000788 	.word	0x20000788
    3114:	03000007 	.word	0x03000007
    3118:	00001d35 	.word	0x00001d35
    311c:	20000009 	.word	0x20000009
    3120:	2000011d 	.word	0x2000011d
    3124:	000059c8 	.word	0x000059c8
    3128:	03000008 	.word	0x03000008
    312c:	000059e0 	.word	0x000059e0
    3130:	03000005 	.word	0x03000005
    3134:	000059f0 	.word	0x000059f0
    3138:	00001f1d 	.word	0x00001f1d
    313c:	00005a00 	.word	0x00005a00
    3140:	00001e9d 	.word	0x00001e9d
    3144:	000021d1 	.word	0x000021d1
    3148:	00000151 	.word	0x00000151
    314c:	000021a5 	.word	0x000021a5
    3150:	0030212c 	.word	0x0030212c
    3154:	00001bc5 	.word	0x00001bc5
    3158:	000059b0 	.word	0x000059b0
    315c:	000016f1 	.word	0x000016f1
    3160:	0300000c 	.word	0x0300000c
    3164:	20000008 	.word	0x20000008
    3168:	000059b8 	.word	0x000059b8
    316c:	0300000d 	.word	0x0300000d
    3170:	000059c0 	.word	0x000059c0
    3174:	0300000e 	.word	0x0300000e
    3178:	2000011c 	.word	0x2000011c
    317c:	0300000f 	.word	0x0300000f
    3180:	0000281d 	.word	0x0000281d
    3184:	00002871 	.word	0x00002871
    3188:	00002b11 	.word	0x00002b11

0000318c <configure_ext_ints>:
/* Function Name    : configure_ext_ints
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt
	*/
void configure_ext_ints(void){
    318c:	b500      	push	{lr}
    318e:	b085      	sub	sp, #20
	// struct for external interrupt config
	struct extint_chan_conf ext_int_config;
	    
	// configure the external interrupt
	ext_int_config.gpio_pin            = LCD_INT;
    3190:	a901      	add	r1, sp, #4
    3192:	2309      	movs	r3, #9
    3194:	9301      	str	r3, [sp, #4]
	ext_int_config.gpio_pin_mux        = LCD_INT_PINMUX;
    3196:	604b      	str	r3, [r1, #4]
	ext_int_config.gpio_pin_pull       = LCD_INT_PULL;
    3198:	2300      	movs	r3, #0
    319a:	720b      	strb	r3, [r1, #8]
	ext_int_config.wake_if_sleeping    = true;
    319c:	2201      	movs	r2, #1
    319e:	724a      	strb	r2, [r1, #9]
	ext_int_config.filter_input_signal = false;
    31a0:	728b      	strb	r3, [r1, #10]
	ext_int_config.detection_criteria  = LCD_INT_DETECT;
    31a2:	3305      	adds	r3, #5
    31a4:	72cb      	strb	r3, [r1, #11]

	extint_chan_set_config(LCD_INT_LINE, &ext_int_config);
    31a6:	2009      	movs	r0, #9
    31a8:	4b01      	ldr	r3, [pc, #4]	; (31b0 <configure_ext_ints+0x24>)
    31aa:	4798      	blx	r3
}//end configure_ext_ints
    31ac:	b005      	add	sp, #20
    31ae:	bd00      	pop	{pc}
    31b0:	000003bd 	.word	0x000003bd

000031b4 <configure_ext_int_callback>:
/* Function Name    : configure_ext_int_callback
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt callback
	*/
void configure_ext_int_callback(void){
    31b4:	b510      	push	{r4, lr}
	// register callback for the LCD's interrupt
	extint_register_callback(lcd_interrupt_callback, LCD_INT_LINE, \
    31b6:	2205      	movs	r2, #5
    31b8:	2109      	movs	r1, #9
    31ba:	4802      	ldr	r0, [pc, #8]	; (31c4 <configure_ext_int_callback+0x10>)
    31bc:	4b02      	ldr	r3, [pc, #8]	; (31c8 <configure_ext_int_callback+0x14>)
    31be:	4798      	blx	r3
	    LCD_INT_DETECT);
}//end configure_ext_int_callback
    31c0:	bd10      	pop	{r4, pc}
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	00003795 	.word	0x00003795
    31c8:	00000275 	.word	0x00000275

000031cc <configure_rtc_calendar>:
/* Function Name    : configure_rtc_calendar
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config the rtc and set time to 00:00:00 01/01/2000
	*/
void configure_rtc_calendar(void){
    31cc:	b530      	push	{r4, r5, lr}
    31ce:	b089      	sub	sp, #36	; 0x24
	//initial time
	time.year   = 2017;
    31d0:	4b26      	ldr	r3, [pc, #152]	; (326c <configure_rtc_calendar+0xa0>)
    31d2:	4a27      	ldr	r2, [pc, #156]	; (3270 <configure_rtc_calendar+0xa4>)
    31d4:	80da      	strh	r2, [r3, #6]
	time.month  = 12;
    31d6:	220c      	movs	r2, #12
    31d8:	715a      	strb	r2, [r3, #5]
	time.day    = 31;
    31da:	3213      	adds	r2, #19
    31dc:	711a      	strb	r2, [r3, #4]
	time.hour   = 23;
    31de:	3a08      	subs	r2, #8
    31e0:	709a      	strb	r2, [r3, #2]
	time.minute = 59;
    31e2:	3224      	adds	r2, #36	; 0x24
    31e4:	705a      	strb	r2, [r3, #1]
	time.second = 55;
    31e6:	3a04      	subs	r2, #4
    31e8:	701a      	strb	r2, [r3, #0]
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    31ea:	aa01      	add	r2, sp, #4
    31ec:	2300      	movs	r3, #0
    31ee:	7013      	strb	r3, [r2, #0]
	time->minute = 0;
    31f0:	7053      	strb	r3, [r2, #1]
	time->hour   = 0;
    31f2:	7093      	strb	r3, [r2, #2]
	time->pm     = 0;
    31f4:	70d3      	strb	r3, [r2, #3]
	time->day    = 1;
    31f6:	2101      	movs	r1, #1
    31f8:	7111      	strb	r1, [r2, #4]
	time->month  = 1;
    31fa:	7151      	strb	r1, [r2, #5]
	time->year   = 2000;
    31fc:	21fa      	movs	r1, #250	; 0xfa
    31fe:	00c9      	lsls	r1, r1, #3
    3200:	80d1      	strh	r1, [r2, #6]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3202:	aa03      	add	r2, sp, #12
    3204:	20a0      	movs	r0, #160	; 0xa0
    3206:	0100      	lsls	r0, r0, #4
    3208:	8010      	strh	r0, [r2, #0]
	config->clear_on_match      = false;
    320a:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    320c:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
    320e:	7113      	strb	r3, [r2, #4]
	config->year_init_value     = 2000;
    3210:	80d1      	strh	r1, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3212:	2400      	movs	r4, #0
    3214:	2c00      	cmp	r4, #0
    3216:	d014      	beq.n	3242 <configure_rtc_calendar+0x76>
		
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	config_rtc_calendar.clock_24h     = true;
    3218:	aa03      	add	r2, sp, #12
    321a:	2301      	movs	r3, #1
    321c:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    321e:	4c15      	ldr	r4, [pc, #84]	; (3274 <configure_rtc_calendar+0xa8>)
    3220:	4915      	ldr	r1, [pc, #84]	; (3278 <configure_rtc_calendar+0xac>)
    3222:	0020      	movs	r0, r4
    3224:	4b15      	ldr	r3, [pc, #84]	; (327c <configure_rtc_calendar+0xb0>)
    3226:	4798      	blx	r3
		
	rtc_calendar_set_time(&rtc_instance, &time);
    3228:	4910      	ldr	r1, [pc, #64]	; (326c <configure_rtc_calendar+0xa0>)
    322a:	0020      	movs	r0, r4
    322c:	4b14      	ldr	r3, [pc, #80]	; (3280 <configure_rtc_calendar+0xb4>)
    322e:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3230:	0020      	movs	r0, r4
    3232:	4b14      	ldr	r3, [pc, #80]	; (3284 <configure_rtc_calendar+0xb8>)
    3234:	4798      	blx	r3
	// adjust the frequency (the clock is slow atm)
	rtc_calendar_frequency_correction(&rtc_instance, 127);
    3236:	217f      	movs	r1, #127	; 0x7f
    3238:	0020      	movs	r0, r4
    323a:	4b13      	ldr	r3, [pc, #76]	; (3288 <configure_rtc_calendar+0xbc>)
    323c:	4798      	blx	r3
}//end configure_rtc_calendar
    323e:	b009      	add	sp, #36	; 0x24
    3240:	bd30      	pop	{r4, r5, pc}
		config->alarm[i].time = time;
    3242:	00a5      	lsls	r5, r4, #2
    3244:	192b      	adds	r3, r5, r4
    3246:	0058      	lsls	r0, r3, #1
    3248:	ab03      	add	r3, sp, #12
    324a:	469c      	mov	ip, r3
    324c:	4460      	add	r0, ip
    324e:	3008      	adds	r0, #8
    3250:	2208      	movs	r2, #8
    3252:	a901      	add	r1, sp, #4
    3254:	4b0d      	ldr	r3, [pc, #52]	; (328c <configure_rtc_calendar+0xc0>)
    3256:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3258:	192d      	adds	r5, r5, r4
    325a:	006b      	lsls	r3, r5, #1
    325c:	aa03      	add	r2, sp, #12
    325e:	4694      	mov	ip, r2
    3260:	4463      	add	r3, ip
    3262:	2206      	movs	r2, #6
    3264:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3266:	3401      	adds	r4, #1
    3268:	b2e4      	uxtb	r4, r4
    326a:	e7d3      	b.n	3214 <configure_rtc_calendar+0x48>
    326c:	20000780 	.word	0x20000780
    3270:	000007e1 	.word	0x000007e1
    3274:	20000468 	.word	0x20000468
    3278:	40001400 	.word	0x40001400
    327c:	00000651 	.word	0x00000651
    3280:	00000531 	.word	0x00000531
    3284:	00000439 	.word	0x00000439
    3288:	000006b1 	.word	0x000006b1
    328c:	00004fbd 	.word	0x00004fbd

00003290 <clock_osc32k_init>:
/* Function Name    : clock_osc32k_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config internal oscillator 32 kHz
	*/
void clock_osc32k_init(void){
    3290:	b500      	push	{lr}
    3292:	b083      	sub	sp, #12
	config->enable_1khz_output  = true;
    3294:	2301      	movs	r3, #1
    3296:	466a      	mov	r2, sp
    3298:	7053      	strb	r3, [r2, #1]
	config->enable_32khz_output = true;
    329a:	7093      	strb	r3, [r2, #2]
	config->run_in_standby      = false;
    329c:	2200      	movs	r2, #0
    329e:	4669      	mov	r1, sp
    32a0:	70ca      	strb	r2, [r1, #3]
	config->on_demand           = true;
    32a2:	710b      	strb	r3, [r1, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    32a4:	3306      	adds	r3, #6
    32a6:	700b      	strb	r3, [r1, #0]
	config->write_once          = false;
    32a8:	714a      	strb	r2, [r1, #5]
	osc32_config.on_demand				= true;
	osc32_config.run_in_standby			= false;
	osc32_config.startup_time			= SYSTEM_OSC32K_STARTUP_130;
	osc32_config.write_once				= false;
	
	system_clock_source_osc32k_set_config(&osc32_config);
    32aa:	4668      	mov	r0, sp
    32ac:	4b01      	ldr	r3, [pc, #4]	; (32b4 <clock_osc32k_init+0x24>)
    32ae:	4798      	blx	r3
}//end clock_osc32k_init
    32b0:	b003      	add	sp, #12
    32b2:	bd00      	pop	{pc}
    32b4:	00004325 	.word	0x00004325

000032b8 <clock_gclk2_init>:
/* Function Name    : clock_gclk2_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : turn on glck using internal 32 kHz oscillator
	*/
void clock_gclk2_init(void){
    32b8:	b500      	push	{lr}
    32ba:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk2_config;
		
	system_gclk_init();
    32bc:	4b09      	ldr	r3, [pc, #36]	; (32e4 <clock_gclk2_init+0x2c>)
    32be:	4798      	blx	r3
		
	gclk2_config.source_clock			= SYSTEM_CLOCK_SOURCE_OSC32K;
    32c0:	a901      	add	r1, sp, #4
    32c2:	2304      	movs	r3, #4
    32c4:	700b      	strb	r3, [r1, #0]
	gclk2_config.output_enable			= false;
    32c6:	2300      	movs	r3, #0
    32c8:	724b      	strb	r3, [r1, #9]
	gclk2_config.high_when_disabled		= false;
    32ca:	704b      	strb	r3, [r1, #1]
	gclk2_config.division_factor		= 32;
    32cc:	2220      	movs	r2, #32
    32ce:	604a      	str	r2, [r1, #4]
	gclk2_config.run_in_standby			= false;
    32d0:	720b      	strb	r3, [r1, #8]
		
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclk2_config);
    32d2:	2002      	movs	r0, #2
    32d4:	4b04      	ldr	r3, [pc, #16]	; (32e8 <clock_gclk2_init+0x30>)
    32d6:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    32d8:	2002      	movs	r0, #2
    32da:	4b04      	ldr	r3, [pc, #16]	; (32ec <clock_gclk2_init+0x34>)
    32dc:	4798      	blx	r3
}//end clock_gclk2_init
    32de:	b005      	add	sp, #20
    32e0:	bd00      	pop	{pc}
    32e2:	46c0      	nop			; (mov r8, r8)
    32e4:	00004511 	.word	0x00004511
    32e8:	00004535 	.word	0x00004535
    32ec:	00004605 	.word	0x00004605

000032f0 <lcd_spi_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for communicating with the LCD
 */
void lcd_spi_init(void)
{
    32f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32f2:	46c6      	mov	lr, r8
    32f4:	b500      	push	{lr}
    32f6:	b090      	sub	sp, #64	; 0x40
    if(lcd_init_complete == true)
    32f8:	4b34      	ldr	r3, [pc, #208]	; (33cc <lcd_spi_init+0xdc>)
    32fa:	781b      	ldrb	r3, [r3, #0]
    32fc:	2b00      	cmp	r3, #0
    32fe:	d003      	beq.n	3308 <lcd_spi_init+0x18>
    spi_enable(&lcd_master);
	

    
    lcd_init_complete = true;
}
    3300:	b010      	add	sp, #64	; 0x40
    3302:	bc04      	pop	{r2}
    3304:	4690      	mov	r8, r2
    3306:	bdf0      	pop	{r4, r5, r6, r7, pc}
	config->address_enabled = false;
    3308:	aa01      	add	r2, sp, #4
    330a:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    330c:	7093      	strb	r3, [r2, #2]
    lcd_init_slave_config.ss_pin = LCD_CS;
    330e:	212d      	movs	r1, #45	; 0x2d
    3310:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    3312:	4c2f      	ldr	r4, [pc, #188]	; (33d0 <lcd_spi_init+0xe0>)
    3314:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3316:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3318:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    331a:	2201      	movs	r2, #1
    331c:	4669      	mov	r1, sp
    331e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3320:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3322:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3324:	202d      	movs	r0, #45	; 0x2d
    3326:	4b2b      	ldr	r3, [pc, #172]	; (33d4 <lcd_spi_init+0xe4>)
    3328:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    332a:	7823      	ldrb	r3, [r4, #0]
	uint8_t port_index  = (gpio_pin / 128);
    332c:	09d9      	lsrs	r1, r3, #7
	uint8_t group_index = (gpio_pin / 32);
    332e:	095a      	lsrs	r2, r3, #5
	if (port_index < PORT_INST_NUM) {
    3330:	2900      	cmp	r1, #0
    3332:	d149      	bne.n	33c8 <lcd_spi_init+0xd8>
		return &(ports[port_index]->Group[group_index]);
    3334:	01d2      	lsls	r2, r2, #7
    3336:	4928      	ldr	r1, [pc, #160]	; (33d8 <lcd_spi_init+0xe8>)
    3338:	468c      	mov	ip, r1
    333a:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    333c:	271f      	movs	r7, #31
    333e:	403b      	ands	r3, r7
    3340:	2501      	movs	r5, #1
    3342:	0029      	movs	r1, r5
    3344:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    3346:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    3348:	ac02      	add	r4, sp, #8
    334a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    334c:	2600      	movs	r6, #0
    334e:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3350:	60a6      	str	r6, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    3352:	23c0      	movs	r3, #192	; 0xc0
    3354:	039b      	lsls	r3, r3, #14
    3356:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3358:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
    335a:	7466      	strb	r6, [r4, #17]
	config->receiver_enable  = true;
    335c:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    335e:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    3360:	7526      	strb	r6, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3362:	2324      	movs	r3, #36	; 0x24
    3364:	4698      	mov	r8, r3
    3366:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3368:	220c      	movs	r2, #12
    336a:	2100      	movs	r1, #0
    336c:	a808      	add	r0, sp, #32
    336e:	4b1b      	ldr	r3, [pc, #108]	; (33dc <lcd_spi_init+0xec>)
    3370:	4798      	blx	r3
    lcd_init_master_config.mux_setting = LCD_PINMUX_SETTING;
    3372:	2380      	movs	r3, #128	; 0x80
    3374:	025b      	lsls	r3, r3, #9
    3376:	60e3      	str	r3, [r4, #12]
    lcd_init_master_config.pinmux_pad0 = LCD_MISO_PAD;
    3378:	4b19      	ldr	r3, [pc, #100]	; (33e0 <lcd_spi_init+0xf0>)
    337a:	62a3      	str	r3, [r4, #40]	; 0x28
    lcd_init_master_config.pinmux_pad1 = LCD_UNUSED; 
    337c:	2301      	movs	r3, #1
    337e:	425b      	negs	r3, r3
    3380:	62e3      	str	r3, [r4, #44]	; 0x2c
    lcd_init_master_config.pinmux_pad2 = LCD_MOSI_PAD;
    3382:	4b18      	ldr	r3, [pc, #96]	; (33e4 <lcd_spi_init+0xf4>)
    3384:	6323      	str	r3, [r4, #48]	; 0x30
    lcd_init_master_config.pinmux_pad3 = LCD_SCK_PAD;
    3386:	4b18      	ldr	r3, [pc, #96]	; (33e8 <lcd_spi_init+0xf8>)
    3388:	6363      	str	r3, [r4, #52]	; 0x34
	lcd_init_master_config.generator_source = LCD_SPI_SOURCE_CLOCK;
    338a:	4643      	mov	r3, r8
    338c:	54e6      	strb	r6, [r4, r3]
	lcd_init_master_config.mode_specific.master.baudrate = LCD_SPI_MAX_CLOCK;
    338e:	4b17      	ldr	r3, [pc, #92]	; (33ec <lcd_spi_init+0xfc>)
    3390:	61a3      	str	r3, [r4, #24]
    spi_init(&lcd_master, LCD_SPI, &lcd_init_master_config);
    3392:	4e17      	ldr	r6, [pc, #92]	; (33f0 <lcd_spi_init+0x100>)
    3394:	0022      	movs	r2, r4
    3396:	4917      	ldr	r1, [pc, #92]	; (33f4 <lcd_spi_init+0x104>)
    3398:	0030      	movs	r0, r6
    339a:	4b17      	ldr	r3, [pc, #92]	; (33f8 <lcd_spi_init+0x108>)
    339c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    339e:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    33a0:	0020      	movs	r0, r4
    33a2:	4b16      	ldr	r3, [pc, #88]	; (33fc <lcd_spi_init+0x10c>)
    33a4:	4798      	blx	r3
    33a6:	4038      	ands	r0, r7
    33a8:	4085      	lsls	r5, r0
    33aa:	4b15      	ldr	r3, [pc, #84]	; (3400 <lcd_spi_init+0x110>)
    33ac:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    33ae:	4b10      	ldr	r3, [pc, #64]	; (33f0 <lcd_spi_init+0x100>)
    33b0:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    33b2:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    33b4:	2b00      	cmp	r3, #0
    33b6:	d1fa      	bne.n	33ae <lcd_spi_init+0xbe>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    33b8:	6823      	ldr	r3, [r4, #0]
    33ba:	2202      	movs	r2, #2
    33bc:	4313      	orrs	r3, r2
    33be:	6023      	str	r3, [r4, #0]
    lcd_init_complete = true;
    33c0:	3a01      	subs	r2, #1
    33c2:	4b02      	ldr	r3, [pc, #8]	; (33cc <lcd_spi_init+0xdc>)
    33c4:	701a      	strb	r2, [r3, #0]
    33c6:	e79b      	b.n	3300 <lcd_spi_init+0x10>
		return NULL;
    33c8:	2200      	movs	r2, #0
    33ca:	e7b7      	b.n	333c <lcd_spi_init+0x4c>
    33cc:	2000011f 	.word	0x2000011f
    33d0:	200009b4 	.word	0x200009b4
    33d4:	00004199 	.word	0x00004199
    33d8:	41004400 	.word	0x41004400
    33dc:	00004fcf 	.word	0x00004fcf
    33e0:	002c0002 	.word	0x002c0002
    33e4:	002e0002 	.word	0x002e0002
    33e8:	002f0002 	.word	0x002f0002
    33ec:	000f4240 	.word	0x000f4240
    33f0:	200009b8 	.word	0x200009b8
    33f4:	42001800 	.word	0x42001800
    33f8:	00000ba9 	.word	0x00000ba9
    33fc:	00004115 	.word	0x00004115
    3400:	e000e100 	.word	0xe000e100

00003404 <lcd_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Starts the SPI transfer by selecting the slave (pulling 
 *  CS low) and sending LCD address. For use in the FT library.
 */
status_code_genare_t lcd_start_xfer(LCD_ADDRESS param_addr, LCD_XFER_DIR dir)
{
    3404:	b510      	push	{r4, lr}
    3406:	b082      	sub	sp, #8
    3408:	1e0c      	subs	r4, r1, #0
        uint8_t preamble[4];
    } lcd_xfer_preamble;
    
    status_code_genare_t read_status;
    
    if(dir == READ)
    340a:	d11f      	bne.n	344c <lcd_start_xfer+0x48>
        // LCD read address should only be 22 bits
        lcd_xfer_preamble.addr = (0x3FFFFF & param_addr) << 8;
    340c:	0200      	lsls	r0, r0, #8
    340e:	4b1a      	ldr	r3, [pc, #104]	; (3478 <lcd_start_xfer+0x74>)
    3410:	4018      	ands	r0, r3
    3412:	9001      	str	r0, [sp, #4]
        /* LCD read address should only be 22 bits. Also OR 0x800000 because the
         * host must send a 1-bit and then a 0-bit to indicate a write */
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    
    // preamble bytes need to be swapped so MSB is transmitted first
    XORSWAP(lcd_xfer_preamble.preamble[0], lcd_xfer_preamble.preamble[3]);
    3414:	ab01      	add	r3, sp, #4
    3416:	78d9      	ldrb	r1, [r3, #3]
    3418:	781a      	ldrb	r2, [r3, #0]
    341a:	404a      	eors	r2, r1
    341c:	4051      	eors	r1, r2
    341e:	70d9      	strb	r1, [r3, #3]
    3420:	404a      	eors	r2, r1
    3422:	701a      	strb	r2, [r3, #0]
    XORSWAP(lcd_xfer_preamble.preamble[1], lcd_xfer_preamble.preamble[2]);
    3424:	7899      	ldrb	r1, [r3, #2]
    3426:	785a      	ldrb	r2, [r3, #1]
    3428:	404a      	eors	r2, r1
    342a:	4051      	eors	r1, r2
    342c:	7099      	strb	r1, [r3, #2]
    342e:	404a      	eors	r2, r1
    3430:	705a      	strb	r2, [r3, #1]
    
    do{
        // select the slave
        read_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    3432:	2201      	movs	r2, #1
    3434:	4911      	ldr	r1, [pc, #68]	; (347c <lcd_start_xfer+0x78>)
    3436:	4812      	ldr	r0, [pc, #72]	; (3480 <lcd_start_xfer+0x7c>)
    3438:	4b12      	ldr	r3, [pc, #72]	; (3484 <lcd_start_xfer+0x80>)
    343a:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
    343c:	2805      	cmp	r0, #5
    343e:	d0f8      	beq.n	3432 <lcd_start_xfer+0x2e>
    
    if(dir == READ)
    3440:	2c00      	cmp	r4, #0
    3442:	d00d      	beq.n	3460 <lcd_start_xfer+0x5c>
        // send preamble = two read bits, 22 bit address, and dummy byte
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    else if(dir == WRT)
    3444:	2c01      	cmp	r4, #1
    3446:	d011      	beq.n	346c <lcd_start_xfer+0x68>
        // send preamble = two wrt bits and 22 bit address
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    
    return read_status;
}
    3448:	b002      	add	sp, #8
    344a:	bd10      	pop	{r4, pc}
    else if(dir == WRT)
    344c:	2901      	cmp	r1, #1
    344e:	d1e1      	bne.n	3414 <lcd_start_xfer+0x10>
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    3450:	0200      	lsls	r0, r0, #8
    3452:	4b09      	ldr	r3, [pc, #36]	; (3478 <lcd_start_xfer+0x74>)
    3454:	4018      	ands	r0, r3
    3456:	2380      	movs	r3, #128	; 0x80
    3458:	061b      	lsls	r3, r3, #24
    345a:	4318      	orrs	r0, r3
    345c:	9001      	str	r0, [sp, #4]
    345e:	e7d9      	b.n	3414 <lcd_start_xfer+0x10>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    3460:	2204      	movs	r2, #4
    3462:	a901      	add	r1, sp, #4
    3464:	4806      	ldr	r0, [pc, #24]	; (3480 <lcd_start_xfer+0x7c>)
    3466:	4b08      	ldr	r3, [pc, #32]	; (3488 <lcd_start_xfer+0x84>)
    3468:	4798      	blx	r3
    346a:	e7ed      	b.n	3448 <lcd_start_xfer+0x44>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    346c:	2203      	movs	r2, #3
    346e:	a901      	add	r1, sp, #4
    3470:	4803      	ldr	r0, [pc, #12]	; (3480 <lcd_start_xfer+0x7c>)
    3472:	4b05      	ldr	r3, [pc, #20]	; (3488 <lcd_start_xfer+0x84>)
    3474:	4798      	blx	r3
    3476:	e7e7      	b.n	3448 <lcd_start_xfer+0x44>
    3478:	3fffff00 	.word	0x3fffff00
    347c:	200009b4 	.word	0x200009b4
    3480:	200009b8 	.word	0x200009b8
    3484:	00000d91 	.word	0x00000d91
    3488:	00000e8d 	.word	0x00000e8d

0000348c <lcd_stop_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Stops the SPI transfer by deselecting the slave (letting 
 *  CS float high). For use in the FT library.
 */
status_code_genare_t lcd_stop_xfer(void)
{
    348c:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&lcd_master, &lcd_slave, false);
    348e:	2200      	movs	r2, #0
    3490:	4902      	ldr	r1, [pc, #8]	; (349c <lcd_stop_xfer+0x10>)
    3492:	4803      	ldr	r0, [pc, #12]	; (34a0 <lcd_stop_xfer+0x14>)
    3494:	4b03      	ldr	r3, [pc, #12]	; (34a4 <lcd_stop_xfer+0x18>)
    3496:	4798      	blx	r3
}
    3498:	bd10      	pop	{r4, pc}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	200009b4 	.word	0x200009b4
    34a0:	200009b8 	.word	0x200009b8
    34a4:	00000d91 	.word	0x00000d91

000034a8 <lcd_host_read>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 15.
 */
status_code_genare_t lcd_host_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
    34a8:	b510      	push	{r4, lr}
    34aa:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&lcd_master, \
    34ac:	2300      	movs	r3, #0
    34ae:	0001      	movs	r1, r0
    34b0:	4801      	ldr	r0, [pc, #4]	; (34b8 <lcd_host_read+0x10>)
    34b2:	4c02      	ldr	r4, [pc, #8]	; (34bc <lcd_host_read+0x14>)
    34b4:	47a0      	blx	r4
                        read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
    34b6:	bd10      	pop	{r4, pc}
    34b8:	200009b8 	.word	0x200009b8
    34bc:	00000c95 	.word	0x00000c95

000034c0 <lcd_rd8>:
 * Return Values(s) : uint8_t
 * Description      : Reads a 8-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint8_t lcd_rd8(LCD_ADDRESS read_addr)
{
    34c0:	b510      	push	{r4, lr}
    34c2:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
    34c4:	466b      	mov	r3, sp
    34c6:	1ddc      	adds	r4, r3, #7
    34c8:	2300      	movs	r3, #0
    34ca:	7023      	strb	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    34cc:	2100      	movs	r1, #0
    34ce:	4b05      	ldr	r3, [pc, #20]	; (34e4 <lcd_rd8+0x24>)
    34d0:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    lcd_host_read(&read_byte, 1);
    34d2:	2101      	movs	r1, #1
    34d4:	0020      	movs	r0, r4
    34d6:	4b04      	ldr	r3, [pc, #16]	; (34e8 <lcd_rd8+0x28>)
    34d8:	4798      	blx	r3
    
    lcd_stop_xfer();
    34da:	4b04      	ldr	r3, [pc, #16]	; (34ec <lcd_rd8+0x2c>)
    34dc:	4798      	blx	r3
    
    return read_byte; 
    34de:	7820      	ldrb	r0, [r4, #0]
}
    34e0:	b002      	add	sp, #8
    34e2:	bd10      	pop	{r4, pc}
    34e4:	00003405 	.word	0x00003405
    34e8:	000034a9 	.word	0x000034a9
    34ec:	0000348d 	.word	0x0000348d

000034f0 <lcd_rd16>:
 * Return Values(s) : uint16_t
 * Description      : Reads a 16-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint16_t lcd_rd16(LCD_ADDRESS read_addr)
{
    34f0:	b510      	push	{r4, lr}
    34f2:	b082      	sub	sp, #8
    uint16_t read_word = 0;
    34f4:	466b      	mov	r3, sp
    34f6:	1d9c      	adds	r4, r3, #6
    34f8:	2300      	movs	r3, #0
    34fa:	8023      	strh	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    34fc:	2100      	movs	r1, #0
    34fe:	4b05      	ldr	r3, [pc, #20]	; (3514 <lcd_rd16+0x24>)
    3500:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    lcd_host_read((uint8_t*) &read_word, 2);
    3502:	2102      	movs	r1, #2
    3504:	0020      	movs	r0, r4
    3506:	4b04      	ldr	r3, [pc, #16]	; (3518 <lcd_rd16+0x28>)
    3508:	4798      	blx	r3
    
    lcd_stop_xfer();
    350a:	4b04      	ldr	r3, [pc, #16]	; (351c <lcd_rd16+0x2c>)
    350c:	4798      	blx	r3
    
    return read_word;
    350e:	8820      	ldrh	r0, [r4, #0]
}    
    3510:	b002      	add	sp, #8
    3512:	bd10      	pop	{r4, pc}
    3514:	00003405 	.word	0x00003405
    3518:	000034a9 	.word	0x000034a9
    351c:	0000348d 	.word	0x0000348d

00003520 <lcd_host_write>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 16.
 */
status_code_genare_t lcd_host_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
    3520:	b510      	push	{r4, lr}
    3522:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&lcd_master, \
    3524:	0001      	movs	r1, r0
    3526:	4802      	ldr	r0, [pc, #8]	; (3530 <lcd_host_write+0x10>)
    3528:	4b02      	ldr	r3, [pc, #8]	; (3534 <lcd_host_write+0x14>)
    352a:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
    
}
    352c:	bd10      	pop	{r4, pc}
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	200009b8 	.word	0x200009b8
    3534:	00000e8d 	.word	0x00000e8d

00003538 <lcd_wr8>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 8-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr8(LCD_ADDRESS wrt_addr, uint8_t wrt_byte)
{
    3538:	b510      	push	{r4, lr}
    353a:	b082      	sub	sp, #8
    353c:	466b      	mov	r3, sp
    353e:	1ddc      	adds	r4, r3, #7
    3540:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);    
    3542:	2101      	movs	r1, #1
    3544:	4b05      	ldr	r3, [pc, #20]	; (355c <lcd_wr8+0x24>)
    3546:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = lcd_host_write(&wrt_byte, 1);
    3548:	2101      	movs	r1, #1
    354a:	0020      	movs	r0, r4
    354c:	4b04      	ldr	r3, [pc, #16]	; (3560 <lcd_wr8+0x28>)
    354e:	4798      	blx	r3
    3550:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    3552:	4b04      	ldr	r3, [pc, #16]	; (3564 <lcd_wr8+0x2c>)
    3554:	4798      	blx	r3
    
    return status_result;
}
    3556:	0020      	movs	r0, r4
    3558:	b002      	add	sp, #8
    355a:	bd10      	pop	{r4, pc}
    355c:	00003405 	.word	0x00003405
    3560:	00003521 	.word	0x00003521
    3564:	0000348d 	.word	0x0000348d

00003568 <lcd_wr16>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 16-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr16(LCD_ADDRESS wrt_addr, uint16_t wrt_word)
{
    3568:	b510      	push	{r4, lr}
    356a:	b082      	sub	sp, #8
    356c:	466b      	mov	r3, sp
    356e:	1d9c      	adds	r4, r3, #6
    3570:	80d9      	strh	r1, [r3, #6]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    3572:	2101      	movs	r1, #1
    3574:	4b05      	ldr	r3, [pc, #20]	; (358c <lcd_wr16+0x24>)
    3576:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    status_result = lcd_host_write((uint8_t*) &wrt_word, 2);
    3578:	2102      	movs	r1, #2
    357a:	0020      	movs	r0, r4
    357c:	4b04      	ldr	r3, [pc, #16]	; (3590 <lcd_wr16+0x28>)
    357e:	4798      	blx	r3
    3580:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    3582:	4b04      	ldr	r3, [pc, #16]	; (3594 <lcd_wr16+0x2c>)
    3584:	4798      	blx	r3
    
    return status_result;
}
    3586:	0020      	movs	r0, r4
    3588:	b002      	add	sp, #8
    358a:	bd10      	pop	{r4, pc}
    358c:	00003405 	.word	0x00003405
    3590:	00003521 	.word	0x00003521
    3594:	0000348d 	.word	0x0000348d

00003598 <lcd_wr32>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 32-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr32(LCD_ADDRESS wrt_addr, uint32_t wrt_dword)
{
    3598:	b510      	push	{r4, lr}
    359a:	b082      	sub	sp, #8
    359c:	9101      	str	r1, [sp, #4]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    359e:	2101      	movs	r1, #1
    35a0:	4b05      	ldr	r3, [pc, #20]	; (35b8 <lcd_wr32+0x20>)
    35a2:	4798      	blx	r3
    
    // cast the dword pointer to an 8-bit pointer and use a 4 byte length
    status_result = lcd_host_write((uint8_t *) &wrt_dword, 4);
    35a4:	2104      	movs	r1, #4
    35a6:	a801      	add	r0, sp, #4
    35a8:	4b04      	ldr	r3, [pc, #16]	; (35bc <lcd_wr32+0x24>)
    35aa:	4798      	blx	r3
    35ac:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    35ae:	4b04      	ldr	r3, [pc, #16]	; (35c0 <lcd_wr32+0x28>)
    35b0:	4798      	blx	r3
    
    return status_result;
}
    35b2:	0020      	movs	r0, r4
    35b4:	b002      	add	sp, #8
    35b6:	bd10      	pop	{r4, pc}
    35b8:	00003405 	.word	0x00003405
    35bc:	00003521 	.word	0x00003521
    35c0:	0000348d 	.word	0x0000348d

000035c4 <lcd_host_cmd>:
 * Description      : Sends a host command to the LCD. Host commands are
 *  for basic hardware configurations (like power mode, clock stuff, etc.).
 *  Refer to DS-FT81x datasheet pg 16 if the command has a parameter byte.
 */
status_code_genare_t lcd_host_cmd(uint8_t cmd, uint8_t param_byte)
{
    35c4:	b510      	push	{r4, lr}
    35c6:	b082      	sub	sp, #8
    // variable for holding ASF status code
    status_code_genare_t wrt_status;
    
    // 3 byte array for sending host command to the LCD
    uint8_t cmd_packet[3] = {cmd, param_byte, 0x00};
    35c8:	ab01      	add	r3, sp, #4
    35ca:	7018      	strb	r0, [r3, #0]
    35cc:	7059      	strb	r1, [r3, #1]
    35ce:	2200      	movs	r2, #0
    35d0:	709a      	strb	r2, [r3, #2]
   
    // select the slave
    do{
        // select the slave
        wrt_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    35d2:	2201      	movs	r2, #1
    35d4:	490a      	ldr	r1, [pc, #40]	; (3600 <lcd_host_cmd+0x3c>)
    35d6:	480b      	ldr	r0, [pc, #44]	; (3604 <lcd_host_cmd+0x40>)
    35d8:	4b0b      	ldr	r3, [pc, #44]	; (3608 <lcd_host_cmd+0x44>)
    35da:	4798      	blx	r3
		//port_pin_set_output_level(PIN_PA10, true);
    }while(wrt_status == STATUS_BUSY);
    35dc:	2805      	cmp	r0, #5
    35de:	d0f8      	beq.n	35d2 <lcd_host_cmd+0xe>
    
    // send host command
    wrt_status = spi_write_buffer_wait(&lcd_master, cmd_packet, 3);
    35e0:	2203      	movs	r2, #3
    35e2:	a901      	add	r1, sp, #4
    35e4:	4807      	ldr	r0, [pc, #28]	; (3604 <lcd_host_cmd+0x40>)
    35e6:	4b09      	ldr	r3, [pc, #36]	; (360c <lcd_host_cmd+0x48>)
    35e8:	4798      	blx	r3
    35ea:	1e04      	subs	r4, r0, #0

    // status check
    if(wrt_status != STATUS_OK)
    35ec:	d105      	bne.n	35fa <lcd_host_cmd+0x36>
        // return an error
        return wrt_status;
    }
    else
        // deselect slave
        wrt_status = lcd_stop_xfer();
    35ee:	4b08      	ldr	r3, [pc, #32]	; (3610 <lcd_host_cmd+0x4c>)
    35f0:	4798      	blx	r3
    35f2:	0004      	movs	r4, r0
    
    return wrt_status;
}
    35f4:	0020      	movs	r0, r4
    35f6:	b002      	add	sp, #8
    35f8:	bd10      	pop	{r4, pc}
        lcd_stop_xfer();
    35fa:	4b05      	ldr	r3, [pc, #20]	; (3610 <lcd_host_cmd+0x4c>)
    35fc:	4798      	blx	r3
        return wrt_status;
    35fe:	e7f9      	b.n	35f4 <lcd_host_cmd+0x30>
    3600:	200009b4 	.word	0x200009b4
    3604:	200009b8 	.word	0x200009b8
    3608:	00000d91 	.word	0x00000d91
    360c:	00000e8d 	.word	0x00000e8d
    3610:	0000348d 	.word	0x0000348d

00003614 <lcd_powerdown>:
		port_base->OUTCLR.reg = pin_mask;
    3614:	2280      	movs	r2, #128	; 0x80
    3616:	0052      	lsls	r2, r2, #1
    3618:	4b01      	ldr	r3, [pc, #4]	; (3620 <lcd_powerdown+0xc>)
    361a:	615a      	str	r2, [r3, #20]
 * Description      : Pull down the LCD_PD pin to force power down the LCD
 */
void lcd_powerdown(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_EN);
}
    361c:	4770      	bx	lr
    361e:	46c0      	nop			; (mov r8, r8)
    3620:	41004400 	.word	0x41004400

00003624 <lcd_powerup>:
		port_base->OUTSET.reg = pin_mask;
    3624:	2280      	movs	r2, #128	; 0x80
    3626:	0052      	lsls	r2, r2, #1
    3628:	4b01      	ldr	r3, [pc, #4]	; (3630 <lcd_powerup+0xc>)
    362a:	619a      	str	r2, [r3, #24]
 * Description      : Pull up the LCD_PD pin to force power up the LCD
 */
void lcd_powerup(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
}
    362c:	4770      	bx	lr
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	41004400 	.word	0x41004400

00003634 <lcd_init_seq>:
 * Return Values(s) : ASF general status code
 * Description      : Initialization sequence as described by the 
 *  FT81X_Series_Programmer_Guide datasheet pg 11.
 */
void lcd_init_seq(void)
{
    3634:	b570      	push	{r4, r5, r6, lr}
    /* medium rare power cycle to get the LCD into a known state.
     * Medium rare because it resets a lot of things, but sometimes display
     * list behavior is funky even after this power cycle. It is recommended
     * that the user performs a hard power reset when testing display 
     * list stuff. */
    lcd_powerdown();
    3636:	4b31      	ldr	r3, [pc, #196]	; (36fc <lcd_init_seq+0xc8>)
    3638:	4798      	blx	r3
    delay_ms(20);
    363a:	2014      	movs	r0, #20
    363c:	4c30      	ldr	r4, [pc, #192]	; (3700 <lcd_init_seq+0xcc>)
    363e:	47a0      	blx	r4
    lcd_powerup();
    3640:	4b30      	ldr	r3, [pc, #192]	; (3704 <lcd_init_seq+0xd0>)
    3642:	4798      	blx	r3
    delay_ms(20);
    3644:	2014      	movs	r0, #20
    3646:	47a0      	blx	r4
    
    // indicate that an external clock is being used
    lcd_host_cmd(CLKEXT, NO_PARAM);
    3648:	2100      	movs	r1, #0
    364a:	2044      	movs	r0, #68	; 0x44
    364c:	4d2e      	ldr	r5, [pc, #184]	; (3708 <lcd_init_seq+0xd4>)
    364e:	47a8      	blx	r5
    
    // wait a little bit, because CLKEXT triggers a software reset
    delay_ms(50);
    3650:	2032      	movs	r0, #50	; 0x32
    3652:	47a0      	blx	r4
    // wake up the LCD
    lcd_host_cmd(ACTIVE, NO_PARAM);
    3654:	2100      	movs	r1, #0
    3656:	2000      	movs	r0, #0
    3658:	47a8      	blx	r5
    
    // wait until the LCD is active
	do{
	    result = lcd_rd16(REG_ID);
    365a:	482c      	ldr	r0, [pc, #176]	; (370c <lcd_init_seq+0xd8>)
    365c:	4b2c      	ldr	r3, [pc, #176]	; (3710 <lcd_init_seq+0xdc>)
    365e:	4798      	blx	r3
    3660:	b2c0      	uxtb	r0, r0
	} while(result != 0x7c);  
    3662:	287c      	cmp	r0, #124	; 0x7c
    3664:	d1f9      	bne.n	365a <lcd_init_seq+0x26>
    
    // Register settings, refer to NHD-5.0-800480FT-CTXL-CTP datasheet:
    // horizontal configuration registers
    lcd_wr16(REG_HSIZE, 800);
    3666:	21c8      	movs	r1, #200	; 0xc8
    3668:	0089      	lsls	r1, r1, #2
    366a:	482a      	ldr	r0, [pc, #168]	; (3714 <lcd_init_seq+0xe0>)
    366c:	4c2a      	ldr	r4, [pc, #168]	; (3718 <lcd_init_seq+0xe4>)
    366e:	47a0      	blx	r4
    lcd_wr16(REG_HCYCLE, 928);
    3670:	21e8      	movs	r1, #232	; 0xe8
    3672:	0089      	lsls	r1, r1, #2
    3674:	4829      	ldr	r0, [pc, #164]	; (371c <lcd_init_seq+0xe8>)
    3676:	47a0      	blx	r4
    lcd_wr16(REG_HOFFSET, 88);
    3678:	2158      	movs	r1, #88	; 0x58
    367a:	4829      	ldr	r0, [pc, #164]	; (3720 <lcd_init_seq+0xec>)
    367c:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC0, 0);
    367e:	2100      	movs	r1, #0
    3680:	4828      	ldr	r0, [pc, #160]	; (3724 <lcd_init_seq+0xf0>)
    3682:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC1, 48);
    3684:	2130      	movs	r1, #48	; 0x30
    3686:	4828      	ldr	r0, [pc, #160]	; (3728 <lcd_init_seq+0xf4>)
    3688:	47a0      	blx	r4
    
    // vertical configuration registers
    lcd_wr16(REG_VSIZE, 480);
    368a:	21f0      	movs	r1, #240	; 0xf0
    368c:	0049      	lsls	r1, r1, #1
    368e:	4827      	ldr	r0, [pc, #156]	; (372c <lcd_init_seq+0xf8>)
    3690:	47a0      	blx	r4
    lcd_wr16(REG_VCYCLE, 525);
    3692:	4927      	ldr	r1, [pc, #156]	; (3730 <lcd_init_seq+0xfc>)
    3694:	4827      	ldr	r0, [pc, #156]	; (3734 <lcd_init_seq+0x100>)
    3696:	47a0      	blx	r4
    lcd_wr16(REG_VOFFSET, 32);
    3698:	2120      	movs	r1, #32
    369a:	4827      	ldr	r0, [pc, #156]	; (3738 <lcd_init_seq+0x104>)
    369c:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC0, 0);
    369e:	2100      	movs	r1, #0
    36a0:	4826      	ldr	r0, [pc, #152]	; (373c <lcd_init_seq+0x108>)
    36a2:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC1, 3);
    36a4:	2103      	movs	r1, #3
    36a6:	4826      	ldr	r0, [pc, #152]	; (3740 <lcd_init_seq+0x10c>)
    36a8:	47a0      	blx	r4

    // misc. screen configuration registers
	lcd_wr8(REG_SWIZZLE, 0);
    36aa:	2100      	movs	r1, #0
    36ac:	4825      	ldr	r0, [pc, #148]	; (3744 <lcd_init_seq+0x110>)
    36ae:	4d26      	ldr	r5, [pc, #152]	; (3748 <lcd_init_seq+0x114>)
    36b0:	47a8      	blx	r5
	lcd_wr8(REG_PCLK_POL, 0);
    36b2:	2100      	movs	r1, #0
    36b4:	4825      	ldr	r0, [pc, #148]	; (374c <lcd_init_seq+0x118>)
    36b6:	47a8      	blx	r5
	lcd_wr8(REG_CSPREAD, 1);
    36b8:	2101      	movs	r1, #1
    36ba:	4825      	ldr	r0, [pc, #148]	; (3750 <lcd_init_seq+0x11c>)
    36bc:	47a8      	blx	r5
	lcd_wr8(REG_DITHER, 1);
    36be:	2101      	movs	r1, #1
    36c0:	4824      	ldr	r0, [pc, #144]	; (3754 <lcd_init_seq+0x120>)
    36c2:	47a8      	blx	r5

    // clear the display
    lcd_wr32(RAM_DL+0, CLEAR_COLOR_RGB(1, 1, 1));
    36c4:	4924      	ldr	r1, [pc, #144]	; (3758 <lcd_init_seq+0x124>)
    36c6:	20c0      	movs	r0, #192	; 0xc0
    36c8:	0380      	lsls	r0, r0, #14
    36ca:	4e24      	ldr	r6, [pc, #144]	; (375c <lcd_init_seq+0x128>)
    36cc:	47b0      	blx	r6
    lcd_wr32(RAM_DL+4, COLOR_RGB(255,255,255));
    36ce:	4924      	ldr	r1, [pc, #144]	; (3760 <lcd_init_seq+0x12c>)
    36d0:	4824      	ldr	r0, [pc, #144]	; (3764 <lcd_init_seq+0x130>)
    36d2:	47b0      	blx	r6
    lcd_wr32(RAM_DL+8, CLEAR(1,1,1));
    36d4:	4924      	ldr	r1, [pc, #144]	; (3768 <lcd_init_seq+0x134>)
    36d6:	4825      	ldr	r0, [pc, #148]	; (376c <lcd_init_seq+0x138>)
    36d8:	47b0      	blx	r6
    lcd_wr32(RAM_DL+12, DISPLAY());
    36da:	2100      	movs	r1, #0
    36dc:	4824      	ldr	r0, [pc, #144]	; (3770 <lcd_init_seq+0x13c>)
    36de:	47b0      	blx	r6

    // display list swap
    lcd_wr8(REG_DLSWAP,DLSWAP_FRAME);
    36e0:	2102      	movs	r1, #2
    36e2:	4824      	ldr	r0, [pc, #144]	; (3774 <lcd_init_seq+0x140>)
    36e4:	47a8      	blx	r5

    // set the pin drive strength
    lcd_wr16(REG_GPIOX_DIR, 0xffff);
    36e6:	4e24      	ldr	r6, [pc, #144]	; (3778 <lcd_init_seq+0x144>)
    36e8:	0031      	movs	r1, r6
    36ea:	4824      	ldr	r0, [pc, #144]	; (377c <lcd_init_seq+0x148>)
    36ec:	47a0      	blx	r4
    lcd_wr16(REG_GPIOX, 0xffff);
    36ee:	0031      	movs	r1, r6
    36f0:	4823      	ldr	r0, [pc, #140]	; (3780 <lcd_init_seq+0x14c>)
    36f2:	47a0      	blx	r4

    // enable the clock
    lcd_wr8(REG_PCLK,2);
    36f4:	2102      	movs	r1, #2
    36f6:	4823      	ldr	r0, [pc, #140]	; (3784 <lcd_init_seq+0x150>)
    36f8:	47a8      	blx	r5
}
    36fa:	bd70      	pop	{r4, r5, r6, pc}
    36fc:	00003615 	.word	0x00003615
    3700:	00000151 	.word	0x00000151
    3704:	00003625 	.word	0x00003625
    3708:	000035c5 	.word	0x000035c5
    370c:	00302000 	.word	0x00302000
    3710:	000034f1 	.word	0x000034f1
    3714:	00302034 	.word	0x00302034
    3718:	00003569 	.word	0x00003569
    371c:	0030202c 	.word	0x0030202c
    3720:	00302030 	.word	0x00302030
    3724:	00302038 	.word	0x00302038
    3728:	0030203c 	.word	0x0030203c
    372c:	00302048 	.word	0x00302048
    3730:	0000020d 	.word	0x0000020d
    3734:	00302040 	.word	0x00302040
    3738:	00302044 	.word	0x00302044
    373c:	0030204c 	.word	0x0030204c
    3740:	00302050 	.word	0x00302050
    3744:	00302064 	.word	0x00302064
    3748:	00003539 	.word	0x00003539
    374c:	0030206c 	.word	0x0030206c
    3750:	00302068 	.word	0x00302068
    3754:	00302060 	.word	0x00302060
    3758:	02010101 	.word	0x02010101
    375c:	00003599 	.word	0x00003599
    3760:	04ffffff 	.word	0x04ffffff
    3764:	00300004 	.word	0x00300004
    3768:	26000007 	.word	0x26000007
    376c:	00300008 	.word	0x00300008
    3770:	0030000c 	.word	0x0030000c
    3774:	00302054 	.word	0x00302054
    3778:	0000ffff 	.word	0x0000ffff
    377c:	00302098 	.word	0x00302098
    3780:	0030209c 	.word	0x0030209c
    3784:	00302070 	.word	0x00302070

00003788 <lcd_set_ft_host_ptr>:
 * Description      : Sets the sim_system_glcd_software global pointer for the
 *  FTDI context struct.
 */
void lcd_set_ft_host_ptr(Ft_Gpu_Hal_Context_t* phost)
{
    lcd_firmware_phost = phost;
    3788:	4b01      	ldr	r3, [pc, #4]	; (3790 <lcd_set_ft_host_ptr+0x8>)
    378a:	6018      	str	r0, [r3, #0]
}
    378c:	4770      	bx	lr
    378e:	46c0      	nop			; (mov r8, r8)
    3790:	20000120 	.word	0x20000120

00003794 <lcd_interrupt_callback>:
 * Return Values(s) : void
 * Description      : Callback for the LCD interrupt. Reads the LCD's flag
 *  register.
 */
void lcd_interrupt_callback(void)
{
    3794:	b510      	push	{r4, lr}
    lcd_int_flags = lcd_rd8(REG_INT_FLAGS);
    3796:	4803      	ldr	r0, [pc, #12]	; (37a4 <lcd_interrupt_callback+0x10>)
    3798:	4b03      	ldr	r3, [pc, #12]	; (37a8 <lcd_interrupt_callback+0x14>)
    379a:	4798      	blx	r3
    379c:	4b03      	ldr	r3, [pc, #12]	; (37ac <lcd_interrupt_callback+0x18>)
    379e:	7018      	strb	r0, [r3, #0]
}
    37a0:	bd10      	pop	{r4, pc}
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	003020a8 	.word	0x003020a8
    37a8:	000034c1 	.word	0x000034c1
    37ac:	2000000a 	.word	0x2000000a

000037b0 <led_tx_on>:
		port_base->OUTCLR.reg = pin_mask;
    37b0:	2280      	movs	r2, #128	; 0x80
    37b2:	0512      	lsls	r2, r2, #20
    37b4:	4b01      	ldr	r3, [pc, #4]	; (37bc <led_tx_on+0xc>)
    37b6:	615a      	str	r2, [r3, #20]
 * @brief Turn on Transmit LED
 */
void led_tx_on(void)
{
    port_pin_set_output_level(PIN_PA27, false);
}
    37b8:	4770      	bx	lr
    37ba:	46c0      	nop			; (mov r8, r8)
    37bc:	41004400 	.word	0x41004400

000037c0 <led_tx_off>:
		port_base->OUTSET.reg = pin_mask;
    37c0:	2280      	movs	r2, #128	; 0x80
    37c2:	0512      	lsls	r2, r2, #20
    37c4:	4b01      	ldr	r3, [pc, #4]	; (37cc <led_tx_off+0xc>)
    37c6:	619a      	str	r2, [r3, #24]
 * @brief Turn off Transmit LED
 */
void led_tx_off(void)
{
    port_pin_set_output_level(PIN_PA27, true);
}
    37c8:	4770      	bx	lr
    37ca:	46c0      	nop			; (mov r8, r8)
    37cc:	41004400 	.word	0x41004400

000037d0 <SysTick_Handler>:
 * Handles the interrupt from the timer
 */
void SysTick_Handler(void)
{
    /* increment the tick count */
    Millisecond_Counter++;
    37d0:	4a02      	ldr	r2, [pc, #8]	; (37dc <SysTick_Handler+0xc>)
    37d2:	6813      	ldr	r3, [r2, #0]
    37d4:	3301      	adds	r3, #1
    37d6:	6013      	str	r3, [r2, #0]
}
    37d8:	4770      	bx	lr
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	20000124 	.word	0x20000124

000037e0 <mstimer_now>:
 * The system time is the time elapsed since OS was started.
 * @return milliseconds since OS was started
 */
unsigned long mstimer_now(void)
{
    return Millisecond_Counter;
    37e0:	4b01      	ldr	r3, [pc, #4]	; (37e8 <mstimer_now+0x8>)
    37e2:	6818      	ldr	r0, [r3, #0]
}
    37e4:	4770      	bx	lr
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	20000124 	.word	0x20000124

000037ec <mstimer_init>:

/**
 * @brief Initialization for timer
 */
void mstimer_init(void)
{
    37ec:	b510      	push	{r4, lr}
    /* Setup SysTick Timer for 1ms interrupts  */
    if (SysTick_Config(SystemCoreClock / 1000)) {
    37ee:	4b0f      	ldr	r3, [pc, #60]	; (382c <mstimer_init+0x40>)
    37f0:	6818      	ldr	r0, [r3, #0]
    37f2:	21fa      	movs	r1, #250	; 0xfa
    37f4:	0089      	lsls	r1, r1, #2
    37f6:	4b0e      	ldr	r3, [pc, #56]	; (3830 <mstimer_init+0x44>)
    37f8:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    37fa:	3801      	subs	r0, #1
    37fc:	4b0d      	ldr	r3, [pc, #52]	; (3834 <mstimer_init+0x48>)
    37fe:	4298      	cmp	r0, r3
    3800:	d811      	bhi.n	3826 <mstimer_init+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3802:	4a0d      	ldr	r2, [pc, #52]	; (3838 <mstimer_init+0x4c>)
    3804:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3806:	480d      	ldr	r0, [pc, #52]	; (383c <mstimer_init+0x50>)
    3808:	6a03      	ldr	r3, [r0, #32]
    380a:	021b      	lsls	r3, r3, #8
    380c:	0a1b      	lsrs	r3, r3, #8
    380e:	21c0      	movs	r1, #192	; 0xc0
    3810:	0609      	lsls	r1, r1, #24
    3812:	430b      	orrs	r3, r1
    3814:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3816:	2300      	movs	r3, #0
    3818:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    381a:	3307      	adds	r3, #7
    381c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    381e:	2300      	movs	r3, #0
    3820:	2b00      	cmp	r3, #0
    3822:	d002      	beq.n	382a <mstimer_init+0x3e>
    3824:	e7fe      	b.n	3824 <mstimer_init+0x38>
    return (1UL);                                                   /* Reload value impossible */
    3826:	2301      	movs	r3, #1
    3828:	e7fa      	b.n	3820 <mstimer_init+0x34>
        /* Capture error */
        while (1)
            ;
    }
    NVIC_EnableIRQ(SysTick_IRQn);
}
    382a:	bd10      	pop	{r4, pc}
    382c:	2000000c 	.word	0x2000000c
    3830:	00004e09 	.word	0x00004e09
    3834:	00ffffff 	.word	0x00ffffff
    3838:	e000e010 	.word	0xe000e010
    383c:	e000ed00 	.word	0xe000ed00

00003840 <rs485_clock_init>:

/**
 * Initialize the USART SERCOM module clock
 */
static void rs485_clock_init(void)
{
    3840:	b500      	push	{lr}
    3842:	b083      	sub	sp, #12
			PM->APBCMASK.reg |= mask;
    3844:	4a07      	ldr	r2, [pc, #28]	; (3864 <rs485_clock_init+0x24>)
    3846:	6a13      	ldr	r3, [r2, #32]
    3848:	2120      	movs	r1, #32
    384a:	430b      	orrs	r3, r1
    384c:	6213      	str	r3, [r2, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    384e:	a901      	add	r1, sp, #4
    3850:	2300      	movs	r3, #0
    3852:	700b      	strb	r3, [r1, #0]
    system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_SERCOM3);
    /* Turn on Generic clock for USART */
    system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    /*Default is generator 0. Other wise need to configure like below */
    /* gclk_chan_conf.source_generator = GCLK_GENERATOR_1; */
    system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3854:	2017      	movs	r0, #23
    3856:	4b04      	ldr	r3, [pc, #16]	; (3868 <rs485_clock_init+0x28>)
    3858:	4798      	blx	r3
    system_gclk_chan_enable(gclk_index);
    385a:	2017      	movs	r0, #23
    385c:	4b03      	ldr	r3, [pc, #12]	; (386c <rs485_clock_init+0x2c>)
    385e:	4798      	blx	r3
}
    3860:	b003      	add	sp, #12
    3862:	bd00      	pop	{pc}
    3864:	40000400 	.word	0x40000400
    3868:	00004791 	.word	0x00004791
    386c:	00004709 	.word	0x00004709

00003870 <rs485_pin_init>:

/**
 * Initialize the RTS pin
 */
static void rs485_pin_init(void)
{
    3870:	b570      	push	{r4, r5, r6, lr}
	config->powersave  = false;
    3872:	4c0b      	ldr	r4, [pc, #44]	; (38a0 <rs485_pin_init+0x30>)
    3874:	2300      	movs	r3, #0
    3876:	70a3      	strb	r3, [r4, #2]
	//Configure PIN_A24 as DE and PIN_A25 as /RE
    port_get_config_defaults(&RS485_Port_Config);
    RS485_Port_Config.direction = PORT_PIN_DIR_OUTPUT;
    3878:	2601      	movs	r6, #1
    387a:	7026      	strb	r6, [r4, #0]
	
    RS485_Port_Config.input_pull = PORT_PIN_PULL_DOWN;
    387c:	3302      	adds	r3, #2
    387e:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(RS485_DE, &RS485_Port_Config);
    3880:	0021      	movs	r1, r4
    3882:	2018      	movs	r0, #24
    3884:	4d07      	ldr	r5, [pc, #28]	; (38a4 <rs485_pin_init+0x34>)
    3886:	47a8      	blx	r5
	
	RS485_Port_Config.input_pull = PORT_PIN_PULL_UP;
    3888:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(RS485_RE, &RS485_Port_Config);
    388a:	0021      	movs	r1, r4
    388c:	2019      	movs	r0, #25
    388e:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    3890:	4b05      	ldr	r3, [pc, #20]	; (38a8 <rs485_pin_init+0x38>)
    3892:	2280      	movs	r2, #128	; 0x80
    3894:	0492      	lsls	r2, r2, #18
    3896:	615a      	str	r2, [r3, #20]
    3898:	2280      	movs	r2, #128	; 0x80
    389a:	0452      	lsls	r2, r2, #17
    389c:	615a      	str	r2, [r3, #20]

	
	
    port_pin_set_output_level(RS485_RE, false);
	port_pin_set_output_level(RS485_DE, false);
}
    389e:	bd70      	pop	{r4, r5, r6, pc}
    38a0:	2000012c 	.word	0x2000012c
    38a4:	00004199 	.word	0x00004199
    38a8:	41004400 	.word	0x41004400

000038ac <usart_read_callback>:
{
    38ac:	b510      	push	{r4, lr}
    if (!Transmitting) {
    38ae:	4b0a      	ldr	r3, [pc, #40]	; (38d8 <usart_read_callback+0x2c>)
    38b0:	781b      	ldrb	r3, [r3, #0]
    38b2:	2b00      	cmp	r3, #0
    38b4:	d004      	beq.n	38c0 <usart_read_callback+0x14>
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    38b6:	4909      	ldr	r1, [pc, #36]	; (38dc <usart_read_callback+0x30>)
    38b8:	4809      	ldr	r0, [pc, #36]	; (38e0 <usart_read_callback+0x34>)
    38ba:	4b0a      	ldr	r3, [pc, #40]	; (38e4 <usart_read_callback+0x38>)
    38bc:	4798      	blx	r3
}
    38be:	bd10      	pop	{r4, pc}
        FIFO_Put(&Receive_Queue, rx_buffer[0]);
    38c0:	4b06      	ldr	r3, [pc, #24]	; (38dc <usart_read_callback+0x30>)
    38c2:	8819      	ldrh	r1, [r3, #0]
    38c4:	b2c9      	uxtb	r1, r1
    38c6:	4808      	ldr	r0, [pc, #32]	; (38e8 <usart_read_callback+0x3c>)
    38c8:	4b08      	ldr	r3, [pc, #32]	; (38ec <usart_read_callback+0x40>)
    38ca:	4798      	blx	r3
        RS485_Receive_Bytes++;
    38cc:	4a08      	ldr	r2, [pc, #32]	; (38f0 <usart_read_callback+0x44>)
    38ce:	6813      	ldr	r3, [r2, #0]
    38d0:	3301      	adds	r3, #1
    38d2:	6013      	str	r3, [r2, #0]
    38d4:	e7ef      	b.n	38b6 <usart_read_callback+0xa>
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	200003b8 	.word	0x200003b8
    38dc:	200009f4 	.word	0x200009f4
    38e0:	20000174 	.word	0x20000174
    38e4:	00003f01 	.word	0x00003f01
    38e8:	200001a8 	.word	0x200001a8
    38ec:	000012fd 	.word	0x000012fd
    38f0:	20000130 	.word	0x20000130

000038f4 <rs485_usart_init>:

/**
 * Initialize the USART SERCOM module for RS485
 */
static void rs485_usart_init(void)
{
    38f4:	b570      	push	{r4, r5, r6, lr}
    enum status_code status;

    /* Disable this module since ASF expects it to be disabled. */
    RS485_USART->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    38f6:	4935      	ldr	r1, [pc, #212]	; (39cc <rs485_usart_init+0xd8>)
    38f8:	680b      	ldr	r3, [r1, #0]
    38fa:	2202      	movs	r2, #2
    38fc:	4393      	bics	r3, r2
    38fe:	600b      	str	r3, [r1, #0]
	config->data_order       = USART_DATAORDER_LSB;
    3900:	4a33      	ldr	r2, [pc, #204]	; (39d0 <rs485_usart_init+0xdc>)
    3902:	2380      	movs	r3, #128	; 0x80
    3904:	05db      	lsls	r3, r3, #23
    3906:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3908:	2300      	movs	r3, #0
    390a:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    390c:	20ff      	movs	r0, #255	; 0xff
    390e:	8110      	strh	r0, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3910:	2000      	movs	r0, #0
    3912:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3914:	72d3      	strb	r3, [r2, #11]
	config->receiver_enable  = true;
    3916:	2401      	movs	r4, #1
    3918:	2524      	movs	r5, #36	; 0x24
    391a:	5554      	strb	r4, [r2, r5]
	config->transmitter_enable = true;
    391c:	3501      	adds	r5, #1
    391e:	5554      	strb	r4, [r2, r5]
	config->clock_polarity_inverted = false;
    3920:	3425      	adds	r4, #37	; 0x25
    3922:	5513      	strb	r3, [r2, r4]
	config->use_external_clock = false;
    3924:	3401      	adds	r4, #1
    3926:	5513      	strb	r3, [r2, r4]
	config->ext_clock_freq   = 0;
    3928:	6293      	str	r3, [r2, #40]	; 0x28
	config->run_in_standby   = false;
    392a:	3405      	adds	r4, #5
    392c:	5513      	strb	r3, [r2, r4]
	config->generator_source = GCLK_GENERATOR_0;
    392e:	3401      	adds	r4, #1
    3930:	5513      	strb	r3, [r2, r4]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3932:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3934:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
    3936:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
    3938:	7610      	strb	r0, [r2, #24]
	config->start_frame_detection_enable            = false;
    393a:	7710      	strb	r0, [r2, #28]
	config->encoding_format_enable                  = false;
    393c:	7650      	strb	r0, [r2, #25]
	config->receive_pulse_length                    = 19;
    393e:	2313      	movs	r3, #19
    3940:	7693      	strb	r3, [r2, #26]
	config->collision_detection_enable              = false;
    3942:	7750      	strb	r0, [r2, #29]
    // Get default settings
    usart_get_config_defaults(&RS485_USART_Config);
    RS485_USART_Config.baudrate = Baud_Rate;
    3944:	4b23      	ldr	r3, [pc, #140]	; (39d4 <rs485_usart_init+0xe0>)
    3946:	681b      	ldr	r3, [r3, #0]
    3948:	6213      	str	r3, [r2, #32]
    RS485_USART_Config.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
    394a:	2390      	movs	r3, #144	; 0x90
    394c:	035b      	lsls	r3, r3, #13
    394e:	60d3      	str	r3, [r2, #12]
    RS485_USART_Config.pinmux_pad0 = RS485_TX;
    3950:	4b21      	ldr	r3, [pc, #132]	; (39d8 <rs485_usart_init+0xe4>)
    3952:	6313      	str	r3, [r2, #48]	; 0x30
    RS485_USART_Config.pinmux_pad1 = RS485_RX;
    3954:	4b21      	ldr	r3, [pc, #132]	; (39dc <rs485_usart_init+0xe8>)
    3956:	6353      	str	r3, [r2, #52]	; 0x34
    RS485_USART_Config.pinmux_pad2 = PINMUX_UNUSED;
    3958:	2301      	movs	r3, #1
    395a:	425b      	negs	r3, r3
    395c:	6393      	str	r3, [r2, #56]	; 0x38
    RS485_USART_Config.pinmux_pad3 = PINMUX_UNUSED;
    395e:	63d3      	str	r3, [r2, #60]	; 0x3c
    status = usart_init(&RS485_USART_Module, RS485_USART, &RS485_USART_Config);
    3960:	481f      	ldr	r0, [pc, #124]	; (39e0 <rs485_usart_init+0xec>)
    3962:	4b20      	ldr	r3, [pc, #128]	; (39e4 <rs485_usart_init+0xf0>)
    3964:	4798      	blx	r3
    while (status != STATUS_OK) {
    3966:	2800      	cmp	r0, #0
    3968:	d1fd      	bne.n	3966 <rs485_usart_init+0x72>
	SercomUsart *const usart_hw = &(module->hw->USART);
    396a:	4b1d      	ldr	r3, [pc, #116]	; (39e0 <rs485_usart_init+0xec>)
    396c:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    396e:	0020      	movs	r0, r4
    3970:	4b1d      	ldr	r3, [pc, #116]	; (39e8 <rs485_usart_init+0xf4>)
    3972:	4798      	blx	r3
    3974:	231f      	movs	r3, #31
    3976:	4018      	ands	r0, r3
    3978:	3b1e      	subs	r3, #30
    397a:	4083      	lsls	r3, r0
    397c:	4a1b      	ldr	r2, [pc, #108]	; (39ec <rs485_usart_init+0xf8>)
    397e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3980:	4b17      	ldr	r3, [pc, #92]	; (39e0 <rs485_usart_init+0xec>)
    3982:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3984:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    3986:	2b00      	cmp	r3, #0
    3988:	d1fa      	bne.n	3980 <rs485_usart_init+0x8c>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    398a:	6823      	ldr	r3, [r4, #0]
    398c:	2202      	movs	r2, #2
    398e:	4313      	orrs	r3, r2
    3990:	6023      	str	r3, [r4, #0]
        /* hardware not initialized correctly - figure out why! */
    }
    usart_enable(&RS485_USART_Module);
#ifdef USART_CALLBACK_MODE
    usart_register_callback(&RS485_USART_Module, usart_read_callback,
    3992:	4c13      	ldr	r4, [pc, #76]	; (39e0 <rs485_usart_init+0xec>)
    3994:	3a01      	subs	r2, #1
    3996:	4916      	ldr	r1, [pc, #88]	; (39f0 <rs485_usart_init+0xfc>)
    3998:	0020      	movs	r0, r4
    399a:	4e16      	ldr	r6, [pc, #88]	; (39f4 <rs485_usart_init+0x100>)
    399c:	47b0      	blx	r6
    399e:	2531      	movs	r5, #49	; 0x31
    39a0:	5d63      	ldrb	r3, [r4, r5]
    39a2:	2202      	movs	r2, #2
    39a4:	4313      	orrs	r3, r2
    39a6:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_RECEIVED);
    usart_enable_callback(&RS485_USART_Module, USART_CALLBACK_BUFFER_RECEIVED);
    usart_register_callback(&RS485_USART_Module, usart_write_callback,
    39a8:	2200      	movs	r2, #0
    39aa:	4913      	ldr	r1, [pc, #76]	; (39f8 <rs485_usart_init+0x104>)
    39ac:	0020      	movs	r0, r4
    39ae:	47b0      	blx	r6
    39b0:	5d63      	ldrb	r3, [r4, r5]
    39b2:	2201      	movs	r2, #1
    39b4:	4313      	orrs	r3, r2
    39b6:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(
        &RS485_USART_Module, USART_CALLBACK_BUFFER_TRANSMITTED);
    system_interrupt_set_priority(
    39b8:	2100      	movs	r1, #0
    39ba:	200c      	movs	r0, #12
    39bc:	4b0f      	ldr	r3, [pc, #60]	; (39fc <rs485_usart_init+0x108>)
    39be:	4798      	blx	r3
        SYSTEM_INTERRUPT_MODULE_SERCOM3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    /* initial callback call to prepare to begin receiving data */
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    39c0:	490f      	ldr	r1, [pc, #60]	; (3a00 <rs485_usart_init+0x10c>)
    39c2:	0020      	movs	r0, r4
    39c4:	4b0f      	ldr	r3, [pc, #60]	; (3a04 <rs485_usart_init+0x110>)
    39c6:	4798      	blx	r3
#endif    
}
    39c8:	bd70      	pop	{r4, r5, r6, pc}
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	42001400 	.word	0x42001400
    39d0:	20000134 	.word	0x20000134
    39d4:	20000128 	.word	0x20000128
    39d8:	00160002 	.word	0x00160002
    39dc:	00170002 	.word	0x00170002
    39e0:	20000174 	.word	0x20000174
    39e4:	00003d51 	.word	0x00003d51
    39e8:	00004115 	.word	0x00004115
    39ec:	e000e100 	.word	0xe000e100
    39f0:	000038ad 	.word	0x000038ad
    39f4:	00003ee9 	.word	0x00003ee9
    39f8:	00003a55 	.word	0x00003a55
    39fc:	000047e1 	.word	0x000047e1
    3a00:	200009f4 	.word	0x200009f4
    3a04:	00003f01 	.word	0x00003f01

00003a08 <rs485_rts_enable>:
{
    3a08:	b510      	push	{r4, lr}
    if (enable) {
    3a0a:	2800      	cmp	r0, #0
    3a0c:	d10c      	bne.n	3a28 <rs485_rts_enable+0x20>
    3a0e:	4b0d      	ldr	r3, [pc, #52]	; (3a44 <rs485_rts_enable+0x3c>)
    3a10:	2280      	movs	r2, #128	; 0x80
    3a12:	0492      	lsls	r2, r2, #18
    3a14:	615a      	str	r2, [r3, #20]
    3a16:	2280      	movs	r2, #128	; 0x80
    3a18:	0452      	lsls	r2, r2, #17
    3a1a:	615a      	str	r2, [r3, #20]
        led_tx_off();
    3a1c:	4b0a      	ldr	r3, [pc, #40]	; (3a48 <rs485_rts_enable+0x40>)
    3a1e:	4798      	blx	r3
        Transmitting = false;
    3a20:	2200      	movs	r2, #0
    3a22:	4b0a      	ldr	r3, [pc, #40]	; (3a4c <rs485_rts_enable+0x44>)
    3a24:	701a      	strb	r2, [r3, #0]
}
    3a26:	bd10      	pop	{r4, pc}
        Transmitting = true;
    3a28:	2201      	movs	r2, #1
    3a2a:	4b08      	ldr	r3, [pc, #32]	; (3a4c <rs485_rts_enable+0x44>)
    3a2c:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    3a2e:	4b05      	ldr	r3, [pc, #20]	; (3a44 <rs485_rts_enable+0x3c>)
    3a30:	2280      	movs	r2, #128	; 0x80
    3a32:	0492      	lsls	r2, r2, #18
    3a34:	619a      	str	r2, [r3, #24]
    3a36:	2280      	movs	r2, #128	; 0x80
    3a38:	0452      	lsls	r2, r2, #17
    3a3a:	619a      	str	r2, [r3, #24]
        led_tx_on();
    3a3c:	4b04      	ldr	r3, [pc, #16]	; (3a50 <rs485_rts_enable+0x48>)
    3a3e:	4798      	blx	r3
    3a40:	e7f1      	b.n	3a26 <rs485_rts_enable+0x1e>
    3a42:	46c0      	nop			; (mov r8, r8)
    3a44:	41004400 	.word	0x41004400
    3a48:	000037c1 	.word	0x000037c1
    3a4c:	200003b8 	.word	0x200003b8
    3a50:	000037b1 	.word	0x000037b1

00003a54 <usart_write_callback>:
{
    3a54:	b510      	push	{r4, lr}
    rs485_rts_enable(false);
    3a56:	2000      	movs	r0, #0
    3a58:	4b01      	ldr	r3, [pc, #4]	; (3a60 <usart_write_callback+0xc>)
    3a5a:	4798      	blx	r3
}
    3a5c:	bd10      	pop	{r4, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	00003a09 	.word	0x00003a09

00003a64 <rs485_baud_rate_set>:
    switch (baudrate) {
    3a64:	2396      	movs	r3, #150	; 0x96
    3a66:	021b      	lsls	r3, r3, #8
    3a68:	4298      	cmp	r0, r3
    3a6a:	d103      	bne.n	3a74 <rs485_baud_rate_set+0x10>
            Baud_Rate = baudrate;
    3a6c:	4b02      	ldr	r3, [pc, #8]	; (3a78 <rs485_baud_rate_set+0x14>)
    3a6e:	6018      	str	r0, [r3, #0]
    bool valid = true;
    3a70:	2001      	movs	r0, #1
}
    3a72:	4770      	bx	lr
            valid = false;
    3a74:	2000      	movs	r0, #0
    3a76:	e7fc      	b.n	3a72 <rs485_baud_rate_set+0xe>
    3a78:	20000128 	.word	0x20000128

00003a7c <rs485_init>:

/* SERCOM3 UART initialization */
void rs485_init(void)
{
    3a7c:	b510      	push	{r4, lr}
    /* initialize the Rx and Tx byte queues */
    FIFO_Init(&Receive_Queue, &Receive_Queue_Data[0],
    3a7e:	2280      	movs	r2, #128	; 0x80
    3a80:	0092      	lsls	r2, r2, #2
    3a82:	4905      	ldr	r1, [pc, #20]	; (3a98 <rs485_init+0x1c>)
    3a84:	4805      	ldr	r0, [pc, #20]	; (3a9c <rs485_init+0x20>)
    3a86:	4b06      	ldr	r3, [pc, #24]	; (3aa0 <rs485_init+0x24>)
    3a88:	4798      	blx	r3
        (unsigned)sizeof(Receive_Queue_Data));
    rs485_clock_init();
    3a8a:	4b06      	ldr	r3, [pc, #24]	; (3aa4 <rs485_init+0x28>)
    3a8c:	4798      	blx	r3
    rs485_pin_init();
    3a8e:	4b06      	ldr	r3, [pc, #24]	; (3aa8 <rs485_init+0x2c>)
    3a90:	4798      	blx	r3
    rs485_usart_init();
    3a92:	4b06      	ldr	r3, [pc, #24]	; (3aac <rs485_init+0x30>)
    3a94:	4798      	blx	r3
}
    3a96:	bd10      	pop	{r4, pc}
    3a98:	200001b8 	.word	0x200001b8
    3a9c:	200001a8 	.word	0x200001a8
    3aa0:	00001339 	.word	0x00001339
    3aa4:	00003841 	.word	0x00003841
    3aa8:	00003871 	.word	0x00003871
    3aac:	000038f5 	.word	0x000038f5

00003ab0 <WDT_Handler>:
    3ab0:	b510      	push	{r4, lr}
    3ab2:	2201      	movs	r2, #1
    3ab4:	4b03      	ldr	r3, [pc, #12]	; (3ac4 <WDT_Handler+0x14>)
    3ab6:	719a      	strb	r2, [r3, #6]
    3ab8:	4b03      	ldr	r3, [pc, #12]	; (3ac8 <WDT_Handler+0x18>)
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	2b00      	cmp	r3, #0
    3abe:	d000      	beq.n	3ac2 <WDT_Handler+0x12>
    3ac0:	4798      	blx	r3
    3ac2:	bd10      	pop	{r4, pc}
    3ac4:	40001000 	.word	0x40001000
    3ac8:	200009fc 	.word	0x200009fc

00003acc <_tc_interrupt_handler>:
    3acc:	b570      	push	{r4, r5, r6, lr}
    3ace:	0080      	lsls	r0, r0, #2
    3ad0:	4b16      	ldr	r3, [pc, #88]	; (3b2c <_tc_interrupt_handler+0x60>)
    3ad2:	58c5      	ldr	r5, [r0, r3]
    3ad4:	682b      	ldr	r3, [r5, #0]
    3ad6:	7b9c      	ldrb	r4, [r3, #14]
    3ad8:	7e2a      	ldrb	r2, [r5, #24]
    3ada:	7e6b      	ldrb	r3, [r5, #25]
    3adc:	4014      	ands	r4, r2
    3ade:	401c      	ands	r4, r3
    3ae0:	07e3      	lsls	r3, r4, #31
    3ae2:	d406      	bmi.n	3af2 <_tc_interrupt_handler+0x26>
    3ae4:	07a3      	lsls	r3, r4, #30
    3ae6:	d40b      	bmi.n	3b00 <_tc_interrupt_handler+0x34>
    3ae8:	06e3      	lsls	r3, r4, #27
    3aea:	d410      	bmi.n	3b0e <_tc_interrupt_handler+0x42>
    3aec:	06a3      	lsls	r3, r4, #26
    3aee:	d415      	bmi.n	3b1c <_tc_interrupt_handler+0x50>
    3af0:	bd70      	pop	{r4, r5, r6, pc}
    3af2:	0028      	movs	r0, r5
    3af4:	68ab      	ldr	r3, [r5, #8]
    3af6:	4798      	blx	r3
    3af8:	2301      	movs	r3, #1
    3afa:	682a      	ldr	r2, [r5, #0]
    3afc:	7393      	strb	r3, [r2, #14]
    3afe:	e7f1      	b.n	3ae4 <_tc_interrupt_handler+0x18>
    3b00:	0028      	movs	r0, r5
    3b02:	68eb      	ldr	r3, [r5, #12]
    3b04:	4798      	blx	r3
    3b06:	2302      	movs	r3, #2
    3b08:	682a      	ldr	r2, [r5, #0]
    3b0a:	7393      	strb	r3, [r2, #14]
    3b0c:	e7ec      	b.n	3ae8 <_tc_interrupt_handler+0x1c>
    3b0e:	0028      	movs	r0, r5
    3b10:	692b      	ldr	r3, [r5, #16]
    3b12:	4798      	blx	r3
    3b14:	2310      	movs	r3, #16
    3b16:	682a      	ldr	r2, [r5, #0]
    3b18:	7393      	strb	r3, [r2, #14]
    3b1a:	e7e7      	b.n	3aec <_tc_interrupt_handler+0x20>
    3b1c:	0028      	movs	r0, r5
    3b1e:	696b      	ldr	r3, [r5, #20]
    3b20:	4798      	blx	r3
    3b22:	682b      	ldr	r3, [r5, #0]
    3b24:	2220      	movs	r2, #32
    3b26:	739a      	strb	r2, [r3, #14]
    3b28:	e7e2      	b.n	3af0 <_tc_interrupt_handler+0x24>
    3b2a:	46c0      	nop			; (mov r8, r8)
    3b2c:	20000a00 	.word	0x20000a00

00003b30 <TC3_Handler>:
    3b30:	b510      	push	{r4, lr}
    3b32:	2000      	movs	r0, #0
    3b34:	4b01      	ldr	r3, [pc, #4]	; (3b3c <TC3_Handler+0xc>)
    3b36:	4798      	blx	r3
    3b38:	bd10      	pop	{r4, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	00003acd 	.word	0x00003acd

00003b40 <TC4_Handler>:
    3b40:	b510      	push	{r4, lr}
    3b42:	2001      	movs	r0, #1
    3b44:	4b01      	ldr	r3, [pc, #4]	; (3b4c <TC4_Handler+0xc>)
    3b46:	4798      	blx	r3
    3b48:	bd10      	pop	{r4, pc}
    3b4a:	46c0      	nop			; (mov r8, r8)
    3b4c:	00003acd 	.word	0x00003acd

00003b50 <TC5_Handler>:
    3b50:	b510      	push	{r4, lr}
    3b52:	2002      	movs	r0, #2
    3b54:	4b01      	ldr	r3, [pc, #4]	; (3b5c <TC5_Handler+0xc>)
    3b56:	4798      	blx	r3
    3b58:	bd10      	pop	{r4, pc}
    3b5a:	46c0      	nop			; (mov r8, r8)
    3b5c:	00003acd 	.word	0x00003acd

00003b60 <TC6_Handler>:
    3b60:	b510      	push	{r4, lr}
    3b62:	2003      	movs	r0, #3
    3b64:	4b01      	ldr	r3, [pc, #4]	; (3b6c <TC6_Handler+0xc>)
    3b66:	4798      	blx	r3
    3b68:	bd10      	pop	{r4, pc}
    3b6a:	46c0      	nop			; (mov r8, r8)
    3b6c:	00003acd 	.word	0x00003acd

00003b70 <TC7_Handler>:
    3b70:	b510      	push	{r4, lr}
    3b72:	2004      	movs	r0, #4
    3b74:	4b01      	ldr	r3, [pc, #4]	; (3b7c <TC7_Handler+0xc>)
    3b76:	4798      	blx	r3
    3b78:	bd10      	pop	{r4, pc}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	00003acd 	.word	0x00003acd

00003b80 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    3b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b82:	46de      	mov	lr, fp
    3b84:	4657      	mov	r7, sl
    3b86:	464e      	mov	r6, r9
    3b88:	4645      	mov	r5, r8
    3b8a:	b5e0      	push	{r5, r6, r7, lr}
    3b8c:	b087      	sub	sp, #28
    3b8e:	0005      	movs	r5, r0
    3b90:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b92:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b94:	0030      	movs	r0, r6
    3b96:	4b69      	ldr	r3, [pc, #420]	; (3d3c <_usart_set_config+0x1bc>)
    3b98:	4798      	blx	r3
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3b9a:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3b9c:	2200      	movs	r2, #0
    3b9e:	230e      	movs	r3, #14
    3ba0:	a902      	add	r1, sp, #8
    3ba2:	468c      	mov	ip, r1
    3ba4:	4463      	add	r3, ip
    3ba6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3ba8:	8a22      	ldrh	r2, [r4, #16]
    3baa:	2380      	movs	r3, #128	; 0x80
    3bac:	01db      	lsls	r3, r3, #7
    3bae:	429a      	cmp	r2, r3
    3bb0:	d03b      	beq.n	3c2a <_usart_set_config+0xaa>
    3bb2:	d90c      	bls.n	3bce <_usart_set_config+0x4e>
    3bb4:	23c0      	movs	r3, #192	; 0xc0
    3bb6:	01db      	lsls	r3, r3, #7
    3bb8:	429a      	cmp	r2, r3
    3bba:	d031      	beq.n	3c20 <_usart_set_config+0xa0>
    3bbc:	2380      	movs	r3, #128	; 0x80
    3bbe:	021b      	lsls	r3, r3, #8
    3bc0:	429a      	cmp	r2, r3
    3bc2:	d10d      	bne.n	3be0 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3bc4:	2303      	movs	r3, #3
    3bc6:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3bc8:	2300      	movs	r3, #0
    3bca:	469a      	mov	sl, r3
			break;
    3bcc:	e00c      	b.n	3be8 <_usart_set_config+0x68>
	switch (config->sample_rate) {
    3bce:	2380      	movs	r3, #128	; 0x80
    3bd0:	019b      	lsls	r3, r3, #6
    3bd2:	429a      	cmp	r2, r3
    3bd4:	d104      	bne.n	3be0 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3bd6:	2310      	movs	r3, #16
    3bd8:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3bda:	3b0f      	subs	r3, #15
    3bdc:	469a      	mov	sl, r3
			break;
    3bde:	e003      	b.n	3be8 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3be0:	2310      	movs	r3, #16
    3be2:	4698      	mov	r8, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3be4:	2300      	movs	r3, #0
    3be6:	469a      	mov	sl, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3be8:	6823      	ldr	r3, [r4, #0]
    3bea:	68e1      	ldr	r1, [r4, #12]
    3bec:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
    3bee:	6961      	ldr	r1, [r4, #20]
    3bf0:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3bf2:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3bf4:	7e22      	ldrb	r2, [r4, #24]
    3bf6:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    3bf8:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3bfa:	2226      	movs	r2, #38	; 0x26
    3bfc:	5ca2      	ldrb	r2, [r4, r2]
    3bfe:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    3c00:	4313      	orrs	r3, r2
    3c02:	4699      	mov	r9, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    3c04:	6862      	ldr	r2, [r4, #4]
    3c06:	9203      	str	r2, [sp, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3c08:	2a00      	cmp	r2, #0
    3c0a:	d021      	beq.n	3c50 <_usart_set_config+0xd0>
    3c0c:	2380      	movs	r3, #128	; 0x80
    3c0e:	055b      	lsls	r3, r3, #21
    3c10:	429a      	cmp	r2, r3
    3c12:	d13e      	bne.n	3c92 <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3c14:	2327      	movs	r3, #39	; 0x27
    3c16:	5ce3      	ldrb	r3, [r4, r3]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d00b      	beq.n	3c34 <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
    3c1c:	2000      	movs	r0, #0
    3c1e:	e039      	b.n	3c94 <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3c20:	2308      	movs	r3, #8
    3c22:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3c24:	3b07      	subs	r3, #7
    3c26:	469a      	mov	sl, r3
			break;
    3c28:	e7de      	b.n	3be8 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3c2a:	2308      	movs	r3, #8
    3c2c:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3c2e:	2300      	movs	r3, #0
    3c30:	469a      	mov	sl, r3
    3c32:	e7d9      	b.n	3be8 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3c34:	6a23      	ldr	r3, [r4, #32]
    3c36:	4698      	mov	r8, r3
    3c38:	b2c0      	uxtb	r0, r0
    3c3a:	4b41      	ldr	r3, [pc, #260]	; (3d40 <_usart_set_config+0x1c0>)
    3c3c:	4798      	blx	r3
    3c3e:	0001      	movs	r1, r0
    3c40:	220e      	movs	r2, #14
    3c42:	ab02      	add	r3, sp, #8
    3c44:	469c      	mov	ip, r3
    3c46:	4462      	add	r2, ip
    3c48:	4640      	mov	r0, r8
    3c4a:	4b3e      	ldr	r3, [pc, #248]	; (3d44 <_usart_set_config+0x1c4>)
    3c4c:	4798      	blx	r3
    3c4e:	e021      	b.n	3c94 <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3c50:	2327      	movs	r3, #39	; 0x27
    3c52:	5ce3      	ldrb	r3, [r4, r3]
    3c54:	2b00      	cmp	r3, #0
    3c56:	d00b      	beq.n	3c70 <_usart_set_config+0xf0>
				status_code =
    3c58:	4643      	mov	r3, r8
    3c5a:	9300      	str	r3, [sp, #0]
    3c5c:	4653      	mov	r3, sl
    3c5e:	220e      	movs	r2, #14
    3c60:	a902      	add	r1, sp, #8
    3c62:	468c      	mov	ip, r1
    3c64:	4462      	add	r2, ip
    3c66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3c68:	6a20      	ldr	r0, [r4, #32]
    3c6a:	4f37      	ldr	r7, [pc, #220]	; (3d48 <_usart_set_config+0x1c8>)
    3c6c:	47b8      	blx	r7
    3c6e:	e011      	b.n	3c94 <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    3c70:	6a23      	ldr	r3, [r4, #32]
    3c72:	469b      	mov	fp, r3
    3c74:	b2c0      	uxtb	r0, r0
    3c76:	4b32      	ldr	r3, [pc, #200]	; (3d40 <_usart_set_config+0x1c0>)
    3c78:	4798      	blx	r3
    3c7a:	0001      	movs	r1, r0
				status_code =
    3c7c:	4643      	mov	r3, r8
    3c7e:	9300      	str	r3, [sp, #0]
    3c80:	4653      	mov	r3, sl
    3c82:	220e      	movs	r2, #14
    3c84:	a802      	add	r0, sp, #8
    3c86:	4684      	mov	ip, r0
    3c88:	4462      	add	r2, ip
    3c8a:	4658      	mov	r0, fp
    3c8c:	4f2e      	ldr	r7, [pc, #184]	; (3d48 <_usart_set_config+0x1c8>)
    3c8e:	47b8      	blx	r7
    3c90:	e000      	b.n	3c94 <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
    3c92:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    3c94:	2800      	cmp	r0, #0
    3c96:	d142      	bne.n	3d1e <_usart_set_config+0x19e>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    3c98:	7e63      	ldrb	r3, [r4, #25]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d001      	beq.n	3ca2 <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3c9e:	7ea3      	ldrb	r3, [r4, #26]
    3ca0:	73b3      	strb	r3, [r6, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3ca2:	230e      	movs	r3, #14
    3ca4:	aa02      	add	r2, sp, #8
    3ca6:	4694      	mov	ip, r2
    3ca8:	4463      	add	r3, ip
    3caa:	881b      	ldrh	r3, [r3, #0]
    3cac:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    3cae:	464b      	mov	r3, r9
    3cb0:	9a03      	ldr	r2, [sp, #12]
    3cb2:	4313      	orrs	r3, r2

	if (config->use_external_clock == false) {
    3cb4:	2227      	movs	r2, #39	; 0x27
    3cb6:	5ca2      	ldrb	r2, [r4, r2]
    3cb8:	2a00      	cmp	r2, #0
    3cba:	d101      	bne.n	3cc0 <_usart_set_config+0x140>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3cbc:	3204      	adds	r2, #4
    3cbe:	4313      	orrs	r3, r2
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3cc0:	7e61      	ldrb	r1, [r4, #25]
    3cc2:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3cc4:	7f22      	ldrb	r2, [r4, #28]
    3cc6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3cc8:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3cca:	7f62      	ldrb	r2, [r4, #29]
    3ccc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3cce:	4311      	orrs	r1, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3cd0:	2224      	movs	r2, #36	; 0x24
    3cd2:	5ca2      	ldrb	r2, [r4, r2]
    3cd4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3cd6:	4311      	orrs	r1, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3cd8:	2225      	movs	r2, #37	; 0x25
    3cda:	5ca2      	ldrb	r2, [r4, r2]
    3cdc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3cde:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    3ce0:	7aa2      	ldrb	r2, [r4, #10]
    3ce2:	4311      	orrs	r1, r2
	ctrlb |= (uint32_t)config->character_size;
    3ce4:	7ae2      	ldrb	r2, [r4, #11]
    3ce6:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3ce8:	8922      	ldrh	r2, [r4, #8]
    3cea:	2aff      	cmp	r2, #255	; 0xff
    3cec:	d01e      	beq.n	3d2c <_usart_set_config+0x1ac>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3cee:	2780      	movs	r7, #128	; 0x80
    3cf0:	047f      	lsls	r7, r7, #17
    3cf2:	433b      	orrs	r3, r7
		ctrlb |= config->parity;
    3cf4:	4311      	orrs	r1, r2
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3cf6:	222c      	movs	r2, #44	; 0x2c
    3cf8:	5ca2      	ldrb	r2, [r4, r2]
    3cfa:	2a00      	cmp	r2, #0
    3cfc:	d103      	bne.n	3d06 <_usart_set_config+0x186>
    3cfe:	4a13      	ldr	r2, [pc, #76]	; (3d4c <_usart_set_config+0x1cc>)
    3d00:	7892      	ldrb	r2, [r2, #2]
    3d02:	0792      	lsls	r2, r2, #30
    3d04:	d501      	bpl.n	3d0a <_usart_set_config+0x18a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3d06:	2280      	movs	r2, #128	; 0x80
    3d08:	4313      	orrs	r3, r2
	SercomUsart *const usart_hw = &(module->hw->USART);
    3d0a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3d0c:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    3d0e:	2a00      	cmp	r2, #0
    3d10:	d1fb      	bne.n	3d0a <_usart_set_config+0x18a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3d12:	6071      	str	r1, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3d14:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3d16:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    3d18:	2a00      	cmp	r2, #0
    3d1a:	d1fb      	bne.n	3d14 <_usart_set_config+0x194>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3d1c:	6033      	str	r3, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
    3d1e:	b007      	add	sp, #28
    3d20:	bc3c      	pop	{r2, r3, r4, r5}
    3d22:	4690      	mov	r8, r2
    3d24:	4699      	mov	r9, r3
    3d26:	46a2      	mov	sl, r4
    3d28:	46ab      	mov	fp, r5
    3d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
    3d2c:	7ee2      	ldrb	r2, [r4, #27]
    3d2e:	2a00      	cmp	r2, #0
    3d30:	d0e1      	beq.n	3cf6 <_usart_set_config+0x176>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3d32:	2280      	movs	r2, #128	; 0x80
    3d34:	04d2      	lsls	r2, r2, #19
    3d36:	4313      	orrs	r3, r2
    3d38:	e7dd      	b.n	3cf6 <_usart_set_config+0x176>
    3d3a:	46c0      	nop			; (mov r8, r8)
    3d3c:	00000a21 	.word	0x00000a21
    3d40:	000047ad 	.word	0x000047ad
    3d44:	00000795 	.word	0x00000795
    3d48:	000007c1 	.word	0x000007c1
    3d4c:	41002000 	.word	0x41002000

00003d50 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d52:	b089      	sub	sp, #36	; 0x24
    3d54:	0006      	movs	r6, r0
    3d56:	000c      	movs	r4, r1
    3d58:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3d5a:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3d5c:	0008      	movs	r0, r1
    3d5e:	4b42      	ldr	r3, [pc, #264]	; (3e68 <usart_init+0x118>)
    3d60:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3d62:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3d64:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3d66:	6823      	ldr	r3, [r4, #0]
    3d68:	07db      	lsls	r3, r3, #31
    3d6a:	d503      	bpl.n	3d74 <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3d6c:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3d6e:	0028      	movs	r0, r5
    3d70:	b009      	add	sp, #36	; 0x24
    3d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3d74:	6823      	ldr	r3, [r4, #0]
    3d76:	079b      	lsls	r3, r3, #30
    3d78:	d501      	bpl.n	3d7e <usart_init+0x2e>
		return STATUS_ERR_DENIED;
    3d7a:	251c      	movs	r5, #28
    3d7c:	e7f7      	b.n	3d6e <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3d7e:	2301      	movs	r3, #1
    3d80:	4093      	lsls	r3, r2
    3d82:	4a3a      	ldr	r2, [pc, #232]	; (3e6c <usart_init+0x11c>)
    3d84:	6a11      	ldr	r1, [r2, #32]
    3d86:	430b      	orrs	r3, r1
    3d88:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3d8a:	252d      	movs	r5, #45	; 0x2d
    3d8c:	5d7b      	ldrb	r3, [r7, r5]
    3d8e:	a907      	add	r1, sp, #28
    3d90:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3d92:	b2c3      	uxtb	r3, r0
    3d94:	9301      	str	r3, [sp, #4]
    3d96:	0018      	movs	r0, r3
    3d98:	4b35      	ldr	r3, [pc, #212]	; (3e70 <usart_init+0x120>)
    3d9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3d9c:	9801      	ldr	r0, [sp, #4]
    3d9e:	4b35      	ldr	r3, [pc, #212]	; (3e74 <usart_init+0x124>)
    3da0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3da2:	5d78      	ldrb	r0, [r7, r5]
    3da4:	2100      	movs	r1, #0
    3da6:	4b34      	ldr	r3, [pc, #208]	; (3e78 <usart_init+0x128>)
    3da8:	4798      	blx	r3
	module->character_size = config->character_size;
    3daa:	7afb      	ldrb	r3, [r7, #11]
    3dac:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    3dae:	2324      	movs	r3, #36	; 0x24
    3db0:	5cfb      	ldrb	r3, [r7, r3]
    3db2:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3db4:	2325      	movs	r3, #37	; 0x25
    3db6:	5cfb      	ldrb	r3, [r7, r3]
    3db8:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    3dba:	7efb      	ldrb	r3, [r7, #27]
    3dbc:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3dbe:	7f3b      	ldrb	r3, [r7, #28]
    3dc0:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    3dc2:	0039      	movs	r1, r7
    3dc4:	0030      	movs	r0, r6
    3dc6:	4b2d      	ldr	r3, [pc, #180]	; (3e7c <usart_init+0x12c>)
    3dc8:	4798      	blx	r3
    3dca:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    3dcc:	d1cf      	bne.n	3d6e <usart_init+0x1e>
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3dce:	ab06      	add	r3, sp, #24
    3dd0:	2280      	movs	r2, #128	; 0x80
    3dd2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3dd4:	2200      	movs	r2, #0
    3dd6:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    3dd8:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3dda:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3dde:	9302      	str	r3, [sp, #8]
    3de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3de2:	9303      	str	r3, [sp, #12]
    3de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3de6:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    3de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3dea:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    3dec:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    3dee:	2700      	movs	r7, #0
    3df0:	e006      	b.n	3e00 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3df2:	0039      	movs	r1, r7
    3df4:	0020      	movs	r0, r4
    3df6:	4b22      	ldr	r3, [pc, #136]	; (3e80 <usart_init+0x130>)
    3df8:	4798      	blx	r3
    3dfa:	e008      	b.n	3e0e <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    3dfc:	3701      	adds	r7, #1
    3dfe:	b2ff      	uxtb	r7, r7
    3e00:	2f03      	cmp	r7, #3
    3e02:	d80d      	bhi.n	3e20 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3e04:	00bb      	lsls	r3, r7, #2
    3e06:	aa02      	add	r2, sp, #8
    3e08:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    3e0a:	2800      	cmp	r0, #0
    3e0c:	d0f1      	beq.n	3df2 <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    3e0e:	1c43      	adds	r3, r0, #1
    3e10:	d0f4      	beq.n	3dfc <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3e12:	a906      	add	r1, sp, #24
    3e14:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3e16:	0c00      	lsrs	r0, r0, #16
    3e18:	b2c0      	uxtb	r0, r0
    3e1a:	4b1a      	ldr	r3, [pc, #104]	; (3e84 <usart_init+0x134>)
    3e1c:	4798      	blx	r3
    3e1e:	e7ed      	b.n	3dfc <usart_init+0xac>
    3e20:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    3e22:	2a05      	cmp	r2, #5
    3e24:	d806      	bhi.n	3e34 <usart_init+0xe4>
		module->callback[i]            = NULL;
    3e26:	1c93      	adds	r3, r2, #2
    3e28:	009b      	lsls	r3, r3, #2
    3e2a:	18f3      	adds	r3, r6, r3
    3e2c:	2100      	movs	r1, #0
    3e2e:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    3e30:	3201      	adds	r2, #1
    3e32:	e7f6      	b.n	3e22 <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    3e34:	2200      	movs	r2, #0
    3e36:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    3e38:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    3e3a:	2300      	movs	r3, #0
    3e3c:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    3e3e:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3e40:	3230      	adds	r2, #48	; 0x30
    3e42:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    3e44:	3201      	adds	r2, #1
    3e46:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    3e48:	3201      	adds	r2, #1
    3e4a:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    3e4c:	3201      	adds	r2, #1
    3e4e:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3e50:	6830      	ldr	r0, [r6, #0]
    3e52:	4b05      	ldr	r3, [pc, #20]	; (3e68 <usart_init+0x118>)
    3e54:	4798      	blx	r3
    3e56:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3e58:	490b      	ldr	r1, [pc, #44]	; (3e88 <usart_init+0x138>)
    3e5a:	4b0c      	ldr	r3, [pc, #48]	; (3e8c <usart_init+0x13c>)
    3e5c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3e5e:	00a4      	lsls	r4, r4, #2
    3e60:	4b0b      	ldr	r3, [pc, #44]	; (3e90 <usart_init+0x140>)
    3e62:	50e6      	str	r6, [r4, r3]
	return status_code;
    3e64:	e783      	b.n	3d6e <usart_init+0x1e>
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	00000a21 	.word	0x00000a21
    3e6c:	40000400 	.word	0x40000400
    3e70:	00004791 	.word	0x00004791
    3e74:	00004709 	.word	0x00004709
    3e78:	0000085d 	.word	0x0000085d
    3e7c:	00003b81 	.word	0x00003b81
    3e80:	000008a9 	.word	0x000008a9
    3e84:	000048c9 	.word	0x000048c9
    3e88:	00003f31 	.word	0x00003f31
    3e8c:	000040d5 	.word	0x000040d5
    3e90:	20000a14 	.word	0x20000a14

00003e94 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    3e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e96:	0004      	movs	r4, r0
    3e98:	000d      	movs	r5, r1
    3e9a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e9c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    3e9e:	4b10      	ldr	r3, [pc, #64]	; (3ee0 <_usart_read_buffer+0x4c>)
    3ea0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    3ea2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    3ea4:	b29b      	uxth	r3, r3
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d003      	beq.n	3eb2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    3eaa:	4b0e      	ldr	r3, [pc, #56]	; (3ee4 <_usart_read_buffer+0x50>)
    3eac:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    3eae:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    3eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    3eb2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    3eb4:	4b0b      	ldr	r3, [pc, #44]	; (3ee4 <_usart_read_buffer+0x50>)
    3eb6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    3eb8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    3eba:	2205      	movs	r2, #5
    3ebc:	2332      	movs	r3, #50	; 0x32
    3ebe:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    3ec0:	3b2e      	subs	r3, #46	; 0x2e
    3ec2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    3ec4:	7a23      	ldrb	r3, [r4, #8]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d001      	beq.n	3ece <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    3eca:	2320      	movs	r3, #32
    3ecc:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    3ece:	7a63      	ldrb	r3, [r4, #9]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d003      	beq.n	3edc <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    3ed4:	2308      	movs	r3, #8
    3ed6:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    3ed8:	2000      	movs	r0, #0
    3eda:	e7e9      	b.n	3eb0 <_usart_read_buffer+0x1c>
    3edc:	2000      	movs	r0, #0
    3ede:	e7e7      	b.n	3eb0 <_usart_read_buffer+0x1c>
    3ee0:	000041c1 	.word	0x000041c1
    3ee4:	00004201 	.word	0x00004201

00003ee8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3ee8:	1c93      	adds	r3, r2, #2
    3eea:	009b      	lsls	r3, r3, #2
    3eec:	18c3      	adds	r3, r0, r3
    3eee:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    3ef0:	2301      	movs	r3, #1
    3ef2:	4093      	lsls	r3, r2
    3ef4:	001a      	movs	r2, r3
    3ef6:	2130      	movs	r1, #48	; 0x30
    3ef8:	5c43      	ldrb	r3, [r0, r1]
    3efa:	4313      	orrs	r3, r2
    3efc:	5443      	strb	r3, [r0, r1]
}
    3efe:	4770      	bx	lr

00003f00 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    3f00:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    3f02:	2201      	movs	r2, #1
    3f04:	4b01      	ldr	r3, [pc, #4]	; (3f0c <usart_read_job+0xc>)
    3f06:	4798      	blx	r3
}
    3f08:	bd10      	pop	{r4, pc}
    3f0a:	46c0      	nop			; (mov r8, r8)
    3f0c:	00003e95 	.word	0x00003e95

00003f10 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    3f10:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    3f12:	2a00      	cmp	r2, #0
    3f14:	d101      	bne.n	3f1a <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    3f16:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    3f18:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    3f1a:	7983      	ldrb	r3, [r0, #6]
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	d101      	bne.n	3f24 <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    3f20:	201c      	movs	r0, #28
    3f22:	e7f9      	b.n	3f18 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    3f24:	4b01      	ldr	r3, [pc, #4]	; (3f2c <usart_read_buffer_job+0x1c>)
    3f26:	4798      	blx	r3
    3f28:	e7f6      	b.n	3f18 <usart_read_buffer_job+0x8>
    3f2a:	46c0      	nop			; (mov r8, r8)
    3f2c:	00003e95 	.word	0x00003e95

00003f30 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f32:	46c6      	mov	lr, r8
    3f34:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    3f36:	0080      	lsls	r0, r0, #2
    3f38:	4b64      	ldr	r3, [pc, #400]	; (40cc <_usart_interrupt_handler+0x19c>)
    3f3a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3f3c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3f3e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    3f40:	2b00      	cmp	r3, #0
    3f42:	d1fc      	bne.n	3f3e <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    3f44:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    3f46:	7da6      	ldrb	r6, [r4, #22]
    3f48:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    3f4a:	2330      	movs	r3, #48	; 0x30
    3f4c:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    3f4e:	2231      	movs	r2, #49	; 0x31
    3f50:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    3f52:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    3f54:	07f3      	lsls	r3, r6, #31
    3f56:	d525      	bpl.n	3fa4 <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    3f58:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3f5a:	b29b      	uxth	r3, r3
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d01f      	beq.n	3fa0 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3f60:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    3f62:	780a      	ldrb	r2, [r1, #0]
    3f64:	b2d2      	uxtb	r2, r2
    3f66:	b293      	uxth	r3, r2
    3f68:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3f6a:	1c48      	adds	r0, r1, #1
    3f6c:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3f6e:	796b      	ldrb	r3, [r5, #5]
    3f70:	2b01      	cmp	r3, #1
    3f72:	d00e      	beq.n	3f92 <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    3f74:	4643      	mov	r3, r8
    3f76:	05db      	lsls	r3, r3, #23
    3f78:	0ddb      	lsrs	r3, r3, #23
    3f7a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    3f7c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    3f7e:	3b01      	subs	r3, #1
    3f80:	b29b      	uxth	r3, r3
    3f82:	85eb      	strh	r3, [r5, #46]	; 0x2e
    3f84:	2b00      	cmp	r3, #0
    3f86:	d10d      	bne.n	3fa4 <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3f88:	3301      	adds	r3, #1
    3f8a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    3f8c:	3301      	adds	r3, #1
    3f8e:	75a3      	strb	r3, [r4, #22]
    3f90:	e008      	b.n	3fa4 <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    3f92:	784b      	ldrb	r3, [r1, #1]
    3f94:	021b      	lsls	r3, r3, #8
    3f96:	4313      	orrs	r3, r2
    3f98:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    3f9a:	1c88      	adds	r0, r1, #2
    3f9c:	62a8      	str	r0, [r5, #40]	; 0x28
    3f9e:	e7e9      	b.n	3f74 <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3fa0:	2301      	movs	r3, #1
    3fa2:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    3fa4:	07b3      	lsls	r3, r6, #30
    3fa6:	d506      	bpl.n	3fb6 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    3fa8:	2302      	movs	r3, #2
    3faa:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    3fac:	2200      	movs	r2, #0
    3fae:	3331      	adds	r3, #49	; 0x31
    3fb0:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3fb2:	07fb      	lsls	r3, r7, #31
    3fb4:	d41c      	bmi.n	3ff0 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    3fb6:	0773      	lsls	r3, r6, #29
    3fb8:	d564      	bpl.n	4084 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    3fba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3fbc:	b29b      	uxth	r3, r3
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d05e      	beq.n	4080 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3fc2:	8b62      	ldrh	r2, [r4, #26]
    3fc4:	b2d2      	uxtb	r2, r2
    3fc6:	233f      	movs	r3, #63	; 0x3f
    3fc8:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3fca:	0711      	lsls	r1, r2, #28
    3fcc:	d501      	bpl.n	3fd2 <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    3fce:	2337      	movs	r3, #55	; 0x37
    3fd0:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d031      	beq.n	403a <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3fd6:	079a      	lsls	r2, r3, #30
    3fd8:	d50e      	bpl.n	3ff8 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3fda:	221a      	movs	r2, #26
    3fdc:	2332      	movs	r3, #50	; 0x32
    3fde:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    3fe0:	3b30      	subs	r3, #48	; 0x30
    3fe2:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3fe4:	077b      	lsls	r3, r7, #29
    3fe6:	d54d      	bpl.n	4084 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3fe8:	0028      	movs	r0, r5
    3fea:	696b      	ldr	r3, [r5, #20]
    3fec:	4798      	blx	r3
    3fee:	e049      	b.n	4084 <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    3ff0:	0028      	movs	r0, r5
    3ff2:	68eb      	ldr	r3, [r5, #12]
    3ff4:	4798      	blx	r3
    3ff6:	e7de      	b.n	3fb6 <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3ff8:	075a      	lsls	r2, r3, #29
    3ffa:	d505      	bpl.n	4008 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    3ffc:	221e      	movs	r2, #30
    3ffe:	2332      	movs	r3, #50	; 0x32
    4000:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4002:	3b2e      	subs	r3, #46	; 0x2e
    4004:	8363      	strh	r3, [r4, #26]
    4006:	e7ed      	b.n	3fe4 <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4008:	07da      	lsls	r2, r3, #31
    400a:	d505      	bpl.n	4018 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    400c:	2213      	movs	r2, #19
    400e:	2332      	movs	r3, #50	; 0x32
    4010:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4012:	3b31      	subs	r3, #49	; 0x31
    4014:	8363      	strh	r3, [r4, #26]
    4016:	e7e5      	b.n	3fe4 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4018:	06da      	lsls	r2, r3, #27
    401a:	d505      	bpl.n	4028 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    401c:	2242      	movs	r2, #66	; 0x42
    401e:	2332      	movs	r3, #50	; 0x32
    4020:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4022:	3b22      	subs	r3, #34	; 0x22
    4024:	8363      	strh	r3, [r4, #26]
    4026:	e7dd      	b.n	3fe4 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4028:	2220      	movs	r2, #32
    402a:	421a      	tst	r2, r3
    402c:	d0da      	beq.n	3fe4 <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    402e:	3221      	adds	r2, #33	; 0x21
    4030:	2332      	movs	r3, #50	; 0x32
    4032:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4034:	3b12      	subs	r3, #18
    4036:	8363      	strh	r3, [r4, #26]
    4038:	e7d4      	b.n	3fe4 <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    403a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    403c:	05db      	lsls	r3, r3, #23
    403e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4040:	b2da      	uxtb	r2, r3
    4042:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4044:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4046:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4048:	1c51      	adds	r1, r2, #1
    404a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    404c:	7969      	ldrb	r1, [r5, #5]
    404e:	2901      	cmp	r1, #1
    4050:	d010      	beq.n	4074 <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4052:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4054:	3b01      	subs	r3, #1
    4056:	b29b      	uxth	r3, r3
    4058:	85ab      	strh	r3, [r5, #44]	; 0x2c
    405a:	2b00      	cmp	r3, #0
    405c:	d112      	bne.n	4084 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    405e:	3304      	adds	r3, #4
    4060:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4062:	2200      	movs	r2, #0
    4064:	332e      	adds	r3, #46	; 0x2e
    4066:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4068:	07bb      	lsls	r3, r7, #30
    406a:	d50b      	bpl.n	4084 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    406c:	0028      	movs	r0, r5
    406e:	692b      	ldr	r3, [r5, #16]
    4070:	4798      	blx	r3
    4072:	e007      	b.n	4084 <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4074:	0a1b      	lsrs	r3, r3, #8
    4076:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4078:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    407a:	3301      	adds	r3, #1
    407c:	626b      	str	r3, [r5, #36]	; 0x24
    407e:	e7e8      	b.n	4052 <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4080:	2304      	movs	r3, #4
    4082:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4084:	06f3      	lsls	r3, r6, #27
    4086:	d504      	bpl.n	4092 <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4088:	2310      	movs	r3, #16
    408a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    408c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    408e:	06fb      	lsls	r3, r7, #27
    4090:	d410      	bmi.n	40b4 <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4092:	06b3      	lsls	r3, r6, #26
    4094:	d504      	bpl.n	40a0 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4096:	2320      	movs	r3, #32
    4098:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    409a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    409c:	073b      	lsls	r3, r7, #28
    409e:	d40d      	bmi.n	40bc <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    40a0:	0733      	lsls	r3, r6, #28
    40a2:	d504      	bpl.n	40ae <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    40a4:	2308      	movs	r3, #8
    40a6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    40a8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    40aa:	06bb      	lsls	r3, r7, #26
    40ac:	d40a      	bmi.n	40c4 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    40ae:	bc04      	pop	{r2}
    40b0:	4690      	mov	r8, r2
    40b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    40b4:	0028      	movs	r0, r5
    40b6:	69eb      	ldr	r3, [r5, #28]
    40b8:	4798      	blx	r3
    40ba:	e7ea      	b.n	4092 <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    40bc:	0028      	movs	r0, r5
    40be:	69ab      	ldr	r3, [r5, #24]
    40c0:	4798      	blx	r3
    40c2:	e7ed      	b.n	40a0 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    40c4:	6a2b      	ldr	r3, [r5, #32]
    40c6:	0028      	movs	r0, r5
    40c8:	4798      	blx	r3
}
    40ca:	e7f0      	b.n	40ae <_usart_interrupt_handler+0x17e>
    40cc:	20000a14 	.word	0x20000a14

000040d0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    40d0:	4770      	bx	lr
	...

000040d4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    40d4:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    40d6:	4b0b      	ldr	r3, [pc, #44]	; (4104 <_sercom_set_handler+0x30>)
    40d8:	781b      	ldrb	r3, [r3, #0]
    40da:	2b00      	cmp	r3, #0
    40dc:	d008      	beq.n	40f0 <_sercom_set_handler+0x1c>
    40de:	e00c      	b.n	40fa <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    40e0:	009a      	lsls	r2, r3, #2
    40e2:	4d09      	ldr	r5, [pc, #36]	; (4108 <_sercom_set_handler+0x34>)
    40e4:	4c09      	ldr	r4, [pc, #36]	; (410c <_sercom_set_handler+0x38>)
    40e6:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    40e8:	2500      	movs	r5, #0
    40ea:	4c09      	ldr	r4, [pc, #36]	; (4110 <_sercom_set_handler+0x3c>)
    40ec:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    40ee:	3301      	adds	r3, #1
    40f0:	2b05      	cmp	r3, #5
    40f2:	d9f5      	bls.n	40e0 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    40f4:	2201      	movs	r2, #1
    40f6:	4b03      	ldr	r3, [pc, #12]	; (4104 <_sercom_set_handler+0x30>)
    40f8:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    40fa:	0080      	lsls	r0, r0, #2
    40fc:	4b03      	ldr	r3, [pc, #12]	; (410c <_sercom_set_handler+0x38>)
    40fe:	50c1      	str	r1, [r0, r3]
}
    4100:	bd30      	pop	{r4, r5, pc}
    4102:	46c0      	nop			; (mov r8, r8)
    4104:	200003b9 	.word	0x200003b9
    4108:	000040d1 	.word	0x000040d1
    410c:	200003bc 	.word	0x200003bc
    4110:	20000a14 	.word	0x20000a14

00004114 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4114:	b500      	push	{lr}
    4116:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4118:	4b05      	ldr	r3, [pc, #20]	; (4130 <_sercom_get_interrupt_vector+0x1c>)
    411a:	681a      	ldr	r2, [r3, #0]
    411c:	9200      	str	r2, [sp, #0]
    411e:	889b      	ldrh	r3, [r3, #4]
    4120:	466a      	mov	r2, sp
    4122:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4124:	4b03      	ldr	r3, [pc, #12]	; (4134 <_sercom_get_interrupt_vector+0x20>)
    4126:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4128:	466b      	mov	r3, sp
    412a:	5618      	ldrsb	r0, [r3, r0]
}
    412c:	b003      	add	sp, #12
    412e:	bd00      	pop	{pc}
    4130:	00005a0c 	.word	0x00005a0c
    4134:	00000a21 	.word	0x00000a21

00004138 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4138:	b510      	push	{r4, lr}
    413a:	4b02      	ldr	r3, [pc, #8]	; (4144 <SERCOM0_Handler+0xc>)
    413c:	681b      	ldr	r3, [r3, #0]
    413e:	2000      	movs	r0, #0
    4140:	4798      	blx	r3
    4142:	bd10      	pop	{r4, pc}
    4144:	200003bc 	.word	0x200003bc

00004148 <SERCOM1_Handler>:
    4148:	b510      	push	{r4, lr}
    414a:	4b02      	ldr	r3, [pc, #8]	; (4154 <SERCOM1_Handler+0xc>)
    414c:	685b      	ldr	r3, [r3, #4]
    414e:	2001      	movs	r0, #1
    4150:	4798      	blx	r3
    4152:	bd10      	pop	{r4, pc}
    4154:	200003bc 	.word	0x200003bc

00004158 <SERCOM2_Handler>:
    4158:	b510      	push	{r4, lr}
    415a:	4b02      	ldr	r3, [pc, #8]	; (4164 <SERCOM2_Handler+0xc>)
    415c:	689b      	ldr	r3, [r3, #8]
    415e:	2002      	movs	r0, #2
    4160:	4798      	blx	r3
    4162:	bd10      	pop	{r4, pc}
    4164:	200003bc 	.word	0x200003bc

00004168 <SERCOM3_Handler>:
    4168:	b510      	push	{r4, lr}
    416a:	4b02      	ldr	r3, [pc, #8]	; (4174 <SERCOM3_Handler+0xc>)
    416c:	68db      	ldr	r3, [r3, #12]
    416e:	2003      	movs	r0, #3
    4170:	4798      	blx	r3
    4172:	bd10      	pop	{r4, pc}
    4174:	200003bc 	.word	0x200003bc

00004178 <SERCOM4_Handler>:
    4178:	b510      	push	{r4, lr}
    417a:	4b02      	ldr	r3, [pc, #8]	; (4184 <SERCOM4_Handler+0xc>)
    417c:	691b      	ldr	r3, [r3, #16]
    417e:	2004      	movs	r0, #4
    4180:	4798      	blx	r3
    4182:	bd10      	pop	{r4, pc}
    4184:	200003bc 	.word	0x200003bc

00004188 <SERCOM5_Handler>:
    4188:	b510      	push	{r4, lr}
    418a:	4b02      	ldr	r3, [pc, #8]	; (4194 <SERCOM5_Handler+0xc>)
    418c:	695b      	ldr	r3, [r3, #20]
    418e:	2005      	movs	r0, #5
    4190:	4798      	blx	r3
    4192:	bd10      	pop	{r4, pc}
    4194:	200003bc 	.word	0x200003bc

00004198 <port_pin_set_config>:
    4198:	b500      	push	{lr}
    419a:	b083      	sub	sp, #12
    419c:	ab01      	add	r3, sp, #4
    419e:	2280      	movs	r2, #128	; 0x80
    41a0:	701a      	strb	r2, [r3, #0]
    41a2:	780a      	ldrb	r2, [r1, #0]
    41a4:	705a      	strb	r2, [r3, #1]
    41a6:	784a      	ldrb	r2, [r1, #1]
    41a8:	709a      	strb	r2, [r3, #2]
    41aa:	788a      	ldrb	r2, [r1, #2]
    41ac:	70da      	strb	r2, [r3, #3]
    41ae:	0019      	movs	r1, r3
    41b0:	4b01      	ldr	r3, [pc, #4]	; (41b8 <port_pin_set_config+0x20>)
    41b2:	4798      	blx	r3
    41b4:	b003      	add	sp, #12
    41b6:	bd00      	pop	{pc}
    41b8:	000048c9 	.word	0x000048c9

000041bc <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    41bc:	4770      	bx	lr
	...

000041c0 <cpu_irq_enter_critical>:
    41c0:	4b0c      	ldr	r3, [pc, #48]	; (41f4 <cpu_irq_enter_critical+0x34>)
    41c2:	681b      	ldr	r3, [r3, #0]
    41c4:	2b00      	cmp	r3, #0
    41c6:	d106      	bne.n	41d6 <cpu_irq_enter_critical+0x16>
    41c8:	f3ef 8310 	mrs	r3, PRIMASK
    41cc:	2b00      	cmp	r3, #0
    41ce:	d007      	beq.n	41e0 <cpu_irq_enter_critical+0x20>
    41d0:	2200      	movs	r2, #0
    41d2:	4b09      	ldr	r3, [pc, #36]	; (41f8 <cpu_irq_enter_critical+0x38>)
    41d4:	701a      	strb	r2, [r3, #0]
    41d6:	4a07      	ldr	r2, [pc, #28]	; (41f4 <cpu_irq_enter_critical+0x34>)
    41d8:	6813      	ldr	r3, [r2, #0]
    41da:	3301      	adds	r3, #1
    41dc:	6013      	str	r3, [r2, #0]
    41de:	4770      	bx	lr
    41e0:	b672      	cpsid	i
    41e2:	f3bf 8f5f 	dmb	sy
    41e6:	2200      	movs	r2, #0
    41e8:	4b04      	ldr	r3, [pc, #16]	; (41fc <cpu_irq_enter_critical+0x3c>)
    41ea:	701a      	strb	r2, [r3, #0]
    41ec:	3201      	adds	r2, #1
    41ee:	4b02      	ldr	r3, [pc, #8]	; (41f8 <cpu_irq_enter_critical+0x38>)
    41f0:	701a      	strb	r2, [r3, #0]
    41f2:	e7f0      	b.n	41d6 <cpu_irq_enter_critical+0x16>
    41f4:	200003d4 	.word	0x200003d4
    41f8:	200003d8 	.word	0x200003d8
    41fc:	2000000b 	.word	0x2000000b

00004200 <cpu_irq_leave_critical>:
    4200:	4b08      	ldr	r3, [pc, #32]	; (4224 <cpu_irq_leave_critical+0x24>)
    4202:	681a      	ldr	r2, [r3, #0]
    4204:	3a01      	subs	r2, #1
    4206:	601a      	str	r2, [r3, #0]
    4208:	681b      	ldr	r3, [r3, #0]
    420a:	2b00      	cmp	r3, #0
    420c:	d109      	bne.n	4222 <cpu_irq_leave_critical+0x22>
    420e:	4b06      	ldr	r3, [pc, #24]	; (4228 <cpu_irq_leave_critical+0x28>)
    4210:	781b      	ldrb	r3, [r3, #0]
    4212:	2b00      	cmp	r3, #0
    4214:	d005      	beq.n	4222 <cpu_irq_leave_critical+0x22>
    4216:	2201      	movs	r2, #1
    4218:	4b04      	ldr	r3, [pc, #16]	; (422c <cpu_irq_leave_critical+0x2c>)
    421a:	701a      	strb	r2, [r3, #0]
    421c:	f3bf 8f5f 	dmb	sy
    4220:	b662      	cpsie	i
    4222:	4770      	bx	lr
    4224:	200003d4 	.word	0x200003d4
    4228:	200003d8 	.word	0x200003d8
    422c:	2000000b 	.word	0x2000000b

00004230 <_switch_peripheral_gclk>:
    4230:	b510      	push	{r4, lr}
    4232:	b082      	sub	sp, #8
    4234:	2201      	movs	r2, #1
    4236:	ab01      	add	r3, sp, #4
    4238:	701a      	strb	r2, [r3, #0]
    423a:	2400      	movs	r4, #0
    423c:	e004      	b.n	4248 <_switch_peripheral_gclk+0x18>
    423e:	b2e0      	uxtb	r0, r4
    4240:	a901      	add	r1, sp, #4
    4242:	4b03      	ldr	r3, [pc, #12]	; (4250 <_switch_peripheral_gclk+0x20>)
    4244:	4798      	blx	r3
    4246:	3401      	adds	r4, #1
    4248:	2c24      	cmp	r4, #36	; 0x24
    424a:	d9f8      	bls.n	423e <_switch_peripheral_gclk+0xe>
    424c:	b002      	add	sp, #8
    424e:	bd10      	pop	{r4, pc}
    4250:	00004791 	.word	0x00004791

00004254 <system_clock_source_get_hz>:
    4254:	b510      	push	{r4, lr}
    4256:	2808      	cmp	r0, #8
    4258:	d834      	bhi.n	42c4 <system_clock_source_get_hz+0x70>
    425a:	0080      	lsls	r0, r0, #2
    425c:	4b1c      	ldr	r3, [pc, #112]	; (42d0 <system_clock_source_get_hz+0x7c>)
    425e:	581b      	ldr	r3, [r3, r0]
    4260:	469f      	mov	pc, r3
    4262:	2080      	movs	r0, #128	; 0x80
    4264:	0200      	lsls	r0, r0, #8
    4266:	bd10      	pop	{r4, pc}
    4268:	4b1a      	ldr	r3, [pc, #104]	; (42d4 <system_clock_source_get_hz+0x80>)
    426a:	6918      	ldr	r0, [r3, #16]
    426c:	e7fb      	b.n	4266 <system_clock_source_get_hz+0x12>
    426e:	4b1a      	ldr	r3, [pc, #104]	; (42d8 <system_clock_source_get_hz+0x84>)
    4270:	6a1b      	ldr	r3, [r3, #32]
    4272:	059b      	lsls	r3, r3, #22
    4274:	0f9b      	lsrs	r3, r3, #30
    4276:	4819      	ldr	r0, [pc, #100]	; (42dc <system_clock_source_get_hz+0x88>)
    4278:	40d8      	lsrs	r0, r3
    427a:	e7f4      	b.n	4266 <system_clock_source_get_hz+0x12>
    427c:	4b15      	ldr	r3, [pc, #84]	; (42d4 <system_clock_source_get_hz+0x80>)
    427e:	6958      	ldr	r0, [r3, #20]
    4280:	e7f1      	b.n	4266 <system_clock_source_get_hz+0x12>
    4282:	4b14      	ldr	r3, [pc, #80]	; (42d4 <system_clock_source_get_hz+0x80>)
    4284:	681b      	ldr	r3, [r3, #0]
    4286:	079b      	lsls	r3, r3, #30
    4288:	d51e      	bpl.n	42c8 <system_clock_source_get_hz+0x74>
    428a:	4b13      	ldr	r3, [pc, #76]	; (42d8 <system_clock_source_get_hz+0x84>)
    428c:	68db      	ldr	r3, [r3, #12]
    428e:	06db      	lsls	r3, r3, #27
    4290:	d5fb      	bpl.n	428a <system_clock_source_get_hz+0x36>
    4292:	4b10      	ldr	r3, [pc, #64]	; (42d4 <system_clock_source_get_hz+0x80>)
    4294:	681a      	ldr	r2, [r3, #0]
    4296:	2324      	movs	r3, #36	; 0x24
    4298:	4013      	ands	r3, r2
    429a:	2b04      	cmp	r3, #4
    429c:	d001      	beq.n	42a2 <system_clock_source_get_hz+0x4e>
    429e:	4810      	ldr	r0, [pc, #64]	; (42e0 <system_clock_source_get_hz+0x8c>)
    42a0:	e7e1      	b.n	4266 <system_clock_source_get_hz+0x12>
    42a2:	2000      	movs	r0, #0
    42a4:	4b0f      	ldr	r3, [pc, #60]	; (42e4 <system_clock_source_get_hz+0x90>)
    42a6:	4798      	blx	r3
    42a8:	4b0a      	ldr	r3, [pc, #40]	; (42d4 <system_clock_source_get_hz+0x80>)
    42aa:	689b      	ldr	r3, [r3, #8]
    42ac:	041b      	lsls	r3, r3, #16
    42ae:	0c1b      	lsrs	r3, r3, #16
    42b0:	4358      	muls	r0, r3
    42b2:	e7d8      	b.n	4266 <system_clock_source_get_hz+0x12>
    42b4:	2350      	movs	r3, #80	; 0x50
    42b6:	4a08      	ldr	r2, [pc, #32]	; (42d8 <system_clock_source_get_hz+0x84>)
    42b8:	5cd3      	ldrb	r3, [r2, r3]
    42ba:	075b      	lsls	r3, r3, #29
    42bc:	d506      	bpl.n	42cc <system_clock_source_get_hz+0x78>
    42be:	4b05      	ldr	r3, [pc, #20]	; (42d4 <system_clock_source_get_hz+0x80>)
    42c0:	68d8      	ldr	r0, [r3, #12]
    42c2:	e7d0      	b.n	4266 <system_clock_source_get_hz+0x12>
    42c4:	2000      	movs	r0, #0
    42c6:	e7ce      	b.n	4266 <system_clock_source_get_hz+0x12>
    42c8:	2000      	movs	r0, #0
    42ca:	e7cc      	b.n	4266 <system_clock_source_get_hz+0x12>
    42cc:	2000      	movs	r0, #0
    42ce:	e7ca      	b.n	4266 <system_clock_source_get_hz+0x12>
    42d0:	00005a14 	.word	0x00005a14
    42d4:	200003dc 	.word	0x200003dc
    42d8:	40000800 	.word	0x40000800
    42dc:	007a1200 	.word	0x007a1200
    42e0:	02dc6c00 	.word	0x02dc6c00
    42e4:	000047ad 	.word	0x000047ad

000042e8 <system_clock_source_osc8m_set_config>:
    42e8:	b570      	push	{r4, r5, r6, lr}
    42ea:	4d0c      	ldr	r5, [pc, #48]	; (431c <system_clock_source_osc8m_set_config+0x34>)
    42ec:	6a2e      	ldr	r6, [r5, #32]
    42ee:	7802      	ldrb	r2, [r0, #0]
    42f0:	2103      	movs	r1, #3
    42f2:	400a      	ands	r2, r1
    42f4:	0212      	lsls	r2, r2, #8
    42f6:	490a      	ldr	r1, [pc, #40]	; (4320 <system_clock_source_osc8m_set_config+0x38>)
    42f8:	4031      	ands	r1, r6
    42fa:	4311      	orrs	r1, r2
    42fc:	7882      	ldrb	r2, [r0, #2]
    42fe:	2401      	movs	r4, #1
    4300:	4022      	ands	r2, r4
    4302:	01d2      	lsls	r2, r2, #7
    4304:	2380      	movs	r3, #128	; 0x80
    4306:	4399      	bics	r1, r3
    4308:	430a      	orrs	r2, r1
    430a:	7843      	ldrb	r3, [r0, #1]
    430c:	4023      	ands	r3, r4
    430e:	019b      	lsls	r3, r3, #6
    4310:	2140      	movs	r1, #64	; 0x40
    4312:	438a      	bics	r2, r1
    4314:	4313      	orrs	r3, r2
    4316:	622b      	str	r3, [r5, #32]
    4318:	bd70      	pop	{r4, r5, r6, pc}
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	40000800 	.word	0x40000800
    4320:	fffffcff 	.word	0xfffffcff

00004324 <system_clock_source_osc32k_set_config>:
    4324:	b5f0      	push	{r4, r5, r6, r7, lr}
    4326:	4f15      	ldr	r7, [pc, #84]	; (437c <system_clock_source_osc32k_set_config+0x58>)
    4328:	69be      	ldr	r6, [r7, #24]
    432a:	7842      	ldrb	r2, [r0, #1]
    432c:	2301      	movs	r3, #1
    432e:	401a      	ands	r2, r3
    4330:	00d2      	lsls	r2, r2, #3
    4332:	2108      	movs	r1, #8
    4334:	438e      	bics	r6, r1
    4336:	4332      	orrs	r2, r6
    4338:	7885      	ldrb	r5, [r0, #2]
    433a:	401d      	ands	r5, r3
    433c:	00ad      	lsls	r5, r5, #2
    433e:	3904      	subs	r1, #4
    4340:	438a      	bics	r2, r1
    4342:	4315      	orrs	r5, r2
    4344:	7801      	ldrb	r1, [r0, #0]
    4346:	2407      	movs	r4, #7
    4348:	400c      	ands	r4, r1
    434a:	0224      	lsls	r4, r4, #8
    434c:	490c      	ldr	r1, [pc, #48]	; (4380 <system_clock_source_osc32k_set_config+0x5c>)
    434e:	400d      	ands	r5, r1
    4350:	432c      	orrs	r4, r5
    4352:	7901      	ldrb	r1, [r0, #4]
    4354:	4019      	ands	r1, r3
    4356:	01c9      	lsls	r1, r1, #7
    4358:	2280      	movs	r2, #128	; 0x80
    435a:	4394      	bics	r4, r2
    435c:	4321      	orrs	r1, r4
    435e:	78c2      	ldrb	r2, [r0, #3]
    4360:	401a      	ands	r2, r3
    4362:	0192      	lsls	r2, r2, #6
    4364:	2440      	movs	r4, #64	; 0x40
    4366:	43a1      	bics	r1, r4
    4368:	430a      	orrs	r2, r1
    436a:	7941      	ldrb	r1, [r0, #5]
    436c:	400b      	ands	r3, r1
    436e:	031b      	lsls	r3, r3, #12
    4370:	4904      	ldr	r1, [pc, #16]	; (4384 <system_clock_source_osc32k_set_config+0x60>)
    4372:	400a      	ands	r2, r1
    4374:	4313      	orrs	r3, r2
    4376:	61bb      	str	r3, [r7, #24]
    4378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    437a:	46c0      	nop			; (mov r8, r8)
    437c:	40000800 	.word	0x40000800
    4380:	fffff8ff 	.word	0xfffff8ff
    4384:	ffffefff 	.word	0xffffefff

00004388 <system_clock_source_enable>:
    4388:	2808      	cmp	r0, #8
    438a:	d84a      	bhi.n	4422 <system_clock_source_enable+0x9a>
    438c:	0080      	lsls	r0, r0, #2
    438e:	4b26      	ldr	r3, [pc, #152]	; (4428 <system_clock_source_enable+0xa0>)
    4390:	581b      	ldr	r3, [r3, r0]
    4392:	469f      	mov	pc, r3
    4394:	2000      	movs	r0, #0
    4396:	4770      	bx	lr
    4398:	4a24      	ldr	r2, [pc, #144]	; (442c <system_clock_source_enable+0xa4>)
    439a:	6a13      	ldr	r3, [r2, #32]
    439c:	2102      	movs	r1, #2
    439e:	430b      	orrs	r3, r1
    43a0:	6213      	str	r3, [r2, #32]
    43a2:	2000      	movs	r0, #0
    43a4:	e7f7      	b.n	4396 <system_clock_source_enable+0xe>
    43a6:	4a21      	ldr	r2, [pc, #132]	; (442c <system_clock_source_enable+0xa4>)
    43a8:	6993      	ldr	r3, [r2, #24]
    43aa:	2102      	movs	r1, #2
    43ac:	430b      	orrs	r3, r1
    43ae:	6193      	str	r3, [r2, #24]
    43b0:	2000      	movs	r0, #0
    43b2:	e7f0      	b.n	4396 <system_clock_source_enable+0xe>
    43b4:	4a1d      	ldr	r2, [pc, #116]	; (442c <system_clock_source_enable+0xa4>)
    43b6:	8a13      	ldrh	r3, [r2, #16]
    43b8:	2102      	movs	r1, #2
    43ba:	430b      	orrs	r3, r1
    43bc:	b29b      	uxth	r3, r3
    43be:	8213      	strh	r3, [r2, #16]
    43c0:	2000      	movs	r0, #0
    43c2:	e7e8      	b.n	4396 <system_clock_source_enable+0xe>
    43c4:	4a19      	ldr	r2, [pc, #100]	; (442c <system_clock_source_enable+0xa4>)
    43c6:	8a93      	ldrh	r3, [r2, #20]
    43c8:	2102      	movs	r1, #2
    43ca:	430b      	orrs	r3, r1
    43cc:	b29b      	uxth	r3, r3
    43ce:	8293      	strh	r3, [r2, #20]
    43d0:	2000      	movs	r0, #0
    43d2:	e7e0      	b.n	4396 <system_clock_source_enable+0xe>
    43d4:	4916      	ldr	r1, [pc, #88]	; (4430 <system_clock_source_enable+0xa8>)
    43d6:	680b      	ldr	r3, [r1, #0]
    43d8:	2202      	movs	r2, #2
    43da:	4313      	orrs	r3, r2
    43dc:	600b      	str	r3, [r1, #0]
    43de:	4b13      	ldr	r3, [pc, #76]	; (442c <system_clock_source_enable+0xa4>)
    43e0:	849a      	strh	r2, [r3, #36]	; 0x24
    43e2:	4b12      	ldr	r3, [pc, #72]	; (442c <system_clock_source_enable+0xa4>)
    43e4:	68db      	ldr	r3, [r3, #12]
    43e6:	06db      	lsls	r3, r3, #27
    43e8:	d5fb      	bpl.n	43e2 <system_clock_source_enable+0x5a>
    43ea:	4a11      	ldr	r2, [pc, #68]	; (4430 <system_clock_source_enable+0xa8>)
    43ec:	6891      	ldr	r1, [r2, #8]
    43ee:	4b0f      	ldr	r3, [pc, #60]	; (442c <system_clock_source_enable+0xa4>)
    43f0:	62d9      	str	r1, [r3, #44]	; 0x2c
    43f2:	6852      	ldr	r2, [r2, #4]
    43f4:	629a      	str	r2, [r3, #40]	; 0x28
    43f6:	2200      	movs	r2, #0
    43f8:	849a      	strh	r2, [r3, #36]	; 0x24
    43fa:	4b0c      	ldr	r3, [pc, #48]	; (442c <system_clock_source_enable+0xa4>)
    43fc:	68db      	ldr	r3, [r3, #12]
    43fe:	06db      	lsls	r3, r3, #27
    4400:	d5fb      	bpl.n	43fa <system_clock_source_enable+0x72>
    4402:	4b0b      	ldr	r3, [pc, #44]	; (4430 <system_clock_source_enable+0xa8>)
    4404:	681b      	ldr	r3, [r3, #0]
    4406:	b29b      	uxth	r3, r3
    4408:	4a08      	ldr	r2, [pc, #32]	; (442c <system_clock_source_enable+0xa4>)
    440a:	8493      	strh	r3, [r2, #36]	; 0x24
    440c:	2000      	movs	r0, #0
    440e:	e7c2      	b.n	4396 <system_clock_source_enable+0xe>
    4410:	4906      	ldr	r1, [pc, #24]	; (442c <system_clock_source_enable+0xa4>)
    4412:	2244      	movs	r2, #68	; 0x44
    4414:	5c8b      	ldrb	r3, [r1, r2]
    4416:	2002      	movs	r0, #2
    4418:	4303      	orrs	r3, r0
    441a:	b2db      	uxtb	r3, r3
    441c:	548b      	strb	r3, [r1, r2]
    441e:	2000      	movs	r0, #0
    4420:	e7b9      	b.n	4396 <system_clock_source_enable+0xe>
    4422:	2017      	movs	r0, #23
    4424:	e7b7      	b.n	4396 <system_clock_source_enable+0xe>
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	00005a38 	.word	0x00005a38
    442c:	40000800 	.word	0x40000800
    4430:	200003dc 	.word	0x200003dc

00004434 <system_clock_init>:
    4434:	b5f0      	push	{r4, r5, r6, r7, lr}
    4436:	b087      	sub	sp, #28
    4438:	4c29      	ldr	r4, [pc, #164]	; (44e0 <system_clock_init+0xac>)
    443a:	23c2      	movs	r3, #194	; 0xc2
    443c:	00db      	lsls	r3, r3, #3
    443e:	60a3      	str	r3, [r4, #8]
    4440:	4b28      	ldr	r3, [pc, #160]	; (44e4 <system_clock_init+0xb0>)
    4442:	6859      	ldr	r1, [r3, #4]
    4444:	221e      	movs	r2, #30
    4446:	4391      	bics	r1, r2
    4448:	6059      	str	r1, [r3, #4]
    444a:	4b27      	ldr	r3, [pc, #156]	; (44e8 <system_clock_init+0xb4>)
    444c:	4798      	blx	r3
    444e:	4b27      	ldr	r3, [pc, #156]	; (44ec <system_clock_init+0xb8>)
    4450:	6819      	ldr	r1, [r3, #0]
    4452:	0989      	lsrs	r1, r1, #6
    4454:	69a2      	ldr	r2, [r4, #24]
    4456:	237f      	movs	r3, #127	; 0x7f
    4458:	400b      	ands	r3, r1
    445a:	041b      	lsls	r3, r3, #16
    445c:	4924      	ldr	r1, [pc, #144]	; (44f0 <system_clock_init+0xbc>)
    445e:	400a      	ands	r2, r1
    4460:	4313      	orrs	r3, r2
    4462:	61a3      	str	r3, [r4, #24]
    4464:	a804      	add	r0, sp, #16
    4466:	2501      	movs	r5, #1
    4468:	7045      	strb	r5, [r0, #1]
    446a:	7085      	strb	r5, [r0, #2]
    446c:	2400      	movs	r4, #0
    446e:	70c4      	strb	r4, [r0, #3]
    4470:	7105      	strb	r5, [r0, #4]
    4472:	2307      	movs	r3, #7
    4474:	7003      	strb	r3, [r0, #0]
    4476:	7144      	strb	r4, [r0, #5]
    4478:	4b1e      	ldr	r3, [pc, #120]	; (44f4 <system_clock_init+0xc0>)
    447a:	4798      	blx	r3
    447c:	2004      	movs	r0, #4
    447e:	4e1e      	ldr	r6, [pc, #120]	; (44f8 <system_clock_init+0xc4>)
    4480:	47b0      	blx	r6
    4482:	a803      	add	r0, sp, #12
    4484:	7044      	strb	r4, [r0, #1]
    4486:	7085      	strb	r5, [r0, #2]
    4488:	7004      	strb	r4, [r0, #0]
    448a:	4b1c      	ldr	r3, [pc, #112]	; (44fc <system_clock_init+0xc8>)
    448c:	4798      	blx	r3
    448e:	2006      	movs	r0, #6
    4490:	47b0      	blx	r6
    4492:	4b1b      	ldr	r3, [pc, #108]	; (4500 <system_clock_init+0xcc>)
    4494:	4798      	blx	r3
    4496:	466b      	mov	r3, sp
    4498:	705c      	strb	r4, [r3, #1]
    449a:	721c      	strb	r4, [r3, #8]
    449c:	725c      	strb	r4, [r3, #9]
    449e:	2304      	movs	r3, #4
    44a0:	466a      	mov	r2, sp
    44a2:	7013      	strb	r3, [r2, #0]
    44a4:	331c      	adds	r3, #28
    44a6:	9301      	str	r3, [sp, #4]
    44a8:	4669      	mov	r1, sp
    44aa:	2002      	movs	r0, #2
    44ac:	4f15      	ldr	r7, [pc, #84]	; (4504 <system_clock_init+0xd0>)
    44ae:	47b8      	blx	r7
    44b0:	2002      	movs	r0, #2
    44b2:	4e15      	ldr	r6, [pc, #84]	; (4508 <system_clock_init+0xd4>)
    44b4:	47b0      	blx	r6
    44b6:	4b15      	ldr	r3, [pc, #84]	; (450c <system_clock_init+0xd8>)
    44b8:	721c      	strb	r4, [r3, #8]
    44ba:	725c      	strb	r4, [r3, #9]
    44bc:	729c      	strb	r4, [r3, #10]
    44be:	72dc      	strb	r4, [r3, #11]
    44c0:	9501      	str	r5, [sp, #4]
    44c2:	466b      	mov	r3, sp
    44c4:	705c      	strb	r4, [r3, #1]
    44c6:	2306      	movs	r3, #6
    44c8:	466a      	mov	r2, sp
    44ca:	7013      	strb	r3, [r2, #0]
    44cc:	7214      	strb	r4, [r2, #8]
    44ce:	7254      	strb	r4, [r2, #9]
    44d0:	4669      	mov	r1, sp
    44d2:	2000      	movs	r0, #0
    44d4:	47b8      	blx	r7
    44d6:	2000      	movs	r0, #0
    44d8:	47b0      	blx	r6
    44da:	b007      	add	sp, #28
    44dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44de:	46c0      	nop			; (mov r8, r8)
    44e0:	40000800 	.word	0x40000800
    44e4:	41004000 	.word	0x41004000
    44e8:	00004231 	.word	0x00004231
    44ec:	00806024 	.word	0x00806024
    44f0:	ff80ffff 	.word	0xff80ffff
    44f4:	00004325 	.word	0x00004325
    44f8:	00004389 	.word	0x00004389
    44fc:	000042e9 	.word	0x000042e9
    4500:	00004511 	.word	0x00004511
    4504:	00004535 	.word	0x00004535
    4508:	00004605 	.word	0x00004605
    450c:	40000400 	.word	0x40000400

00004510 <system_gclk_init>:
    4510:	4a06      	ldr	r2, [pc, #24]	; (452c <system_gclk_init+0x1c>)
    4512:	6993      	ldr	r3, [r2, #24]
    4514:	2108      	movs	r1, #8
    4516:	430b      	orrs	r3, r1
    4518:	6193      	str	r3, [r2, #24]
    451a:	2201      	movs	r2, #1
    451c:	4b04      	ldr	r3, [pc, #16]	; (4530 <system_gclk_init+0x20>)
    451e:	701a      	strb	r2, [r3, #0]
    4520:	4b03      	ldr	r3, [pc, #12]	; (4530 <system_gclk_init+0x20>)
    4522:	781b      	ldrb	r3, [r3, #0]
    4524:	07db      	lsls	r3, r3, #31
    4526:	d4fb      	bmi.n	4520 <system_gclk_init+0x10>
    4528:	4770      	bx	lr
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	40000400 	.word	0x40000400
    4530:	40000c00 	.word	0x40000c00

00004534 <system_gclk_gen_set_config>:
    4534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4536:	0006      	movs	r6, r0
    4538:	0005      	movs	r5, r0
    453a:	780c      	ldrb	r4, [r1, #0]
    453c:	0224      	lsls	r4, r4, #8
    453e:	4304      	orrs	r4, r0
    4540:	784b      	ldrb	r3, [r1, #1]
    4542:	2b00      	cmp	r3, #0
    4544:	d002      	beq.n	454c <system_gclk_gen_set_config+0x18>
    4546:	2380      	movs	r3, #128	; 0x80
    4548:	02db      	lsls	r3, r3, #11
    454a:	431c      	orrs	r4, r3
    454c:	7a4b      	ldrb	r3, [r1, #9]
    454e:	2b00      	cmp	r3, #0
    4550:	d002      	beq.n	4558 <system_gclk_gen_set_config+0x24>
    4552:	2380      	movs	r3, #128	; 0x80
    4554:	031b      	lsls	r3, r3, #12
    4556:	431c      	orrs	r4, r3
    4558:	6848      	ldr	r0, [r1, #4]
    455a:	2801      	cmp	r0, #1
    455c:	d912      	bls.n	4584 <system_gclk_gen_set_config+0x50>
    455e:	1e43      	subs	r3, r0, #1
    4560:	4203      	tst	r3, r0
    4562:	d03d      	beq.n	45e0 <system_gclk_gen_set_config+0xac>
    4564:	0205      	lsls	r5, r0, #8
    4566:	4335      	orrs	r5, r6
    4568:	2380      	movs	r3, #128	; 0x80
    456a:	029b      	lsls	r3, r3, #10
    456c:	431c      	orrs	r4, r3
    456e:	e009      	b.n	4584 <system_gclk_gen_set_config+0x50>
    4570:	3201      	adds	r2, #1
    4572:	005b      	lsls	r3, r3, #1
    4574:	4283      	cmp	r3, r0
    4576:	d3fb      	bcc.n	4570 <system_gclk_gen_set_config+0x3c>
    4578:	0212      	lsls	r2, r2, #8
    457a:	4332      	orrs	r2, r6
    457c:	0015      	movs	r5, r2
    457e:	2380      	movs	r3, #128	; 0x80
    4580:	035b      	lsls	r3, r3, #13
    4582:	431c      	orrs	r4, r3
    4584:	7a0b      	ldrb	r3, [r1, #8]
    4586:	2b00      	cmp	r3, #0
    4588:	d002      	beq.n	4590 <system_gclk_gen_set_config+0x5c>
    458a:	2380      	movs	r3, #128	; 0x80
    458c:	039b      	lsls	r3, r3, #14
    458e:	431c      	orrs	r4, r3
    4590:	4b18      	ldr	r3, [pc, #96]	; (45f4 <system_gclk_gen_set_config+0xc0>)
    4592:	785b      	ldrb	r3, [r3, #1]
    4594:	b25b      	sxtb	r3, r3
    4596:	2b00      	cmp	r3, #0
    4598:	db25      	blt.n	45e6 <system_gclk_gen_set_config+0xb2>
    459a:	2700      	movs	r7, #0
    459c:	2f00      	cmp	r7, #0
    459e:	d1f7      	bne.n	4590 <system_gclk_gen_set_config+0x5c>
    45a0:	4b15      	ldr	r3, [pc, #84]	; (45f8 <system_gclk_gen_set_config+0xc4>)
    45a2:	4798      	blx	r3
    45a4:	4b15      	ldr	r3, [pc, #84]	; (45fc <system_gclk_gen_set_config+0xc8>)
    45a6:	701e      	strb	r6, [r3, #0]
    45a8:	4b12      	ldr	r3, [pc, #72]	; (45f4 <system_gclk_gen_set_config+0xc0>)
    45aa:	785b      	ldrb	r3, [r3, #1]
    45ac:	b25b      	sxtb	r3, r3
    45ae:	2b00      	cmp	r3, #0
    45b0:	db1b      	blt.n	45ea <system_gclk_gen_set_config+0xb6>
    45b2:	003a      	movs	r2, r7
    45b4:	2a00      	cmp	r2, #0
    45b6:	d1f7      	bne.n	45a8 <system_gclk_gen_set_config+0x74>
    45b8:	4b0e      	ldr	r3, [pc, #56]	; (45f4 <system_gclk_gen_set_config+0xc0>)
    45ba:	609d      	str	r5, [r3, #8]
    45bc:	4b0d      	ldr	r3, [pc, #52]	; (45f4 <system_gclk_gen_set_config+0xc0>)
    45be:	785b      	ldrb	r3, [r3, #1]
    45c0:	b25b      	sxtb	r3, r3
    45c2:	2b00      	cmp	r3, #0
    45c4:	db13      	blt.n	45ee <system_gclk_gen_set_config+0xba>
    45c6:	0013      	movs	r3, r2
    45c8:	2b00      	cmp	r3, #0
    45ca:	d1f7      	bne.n	45bc <system_gclk_gen_set_config+0x88>
    45cc:	4a09      	ldr	r2, [pc, #36]	; (45f4 <system_gclk_gen_set_config+0xc0>)
    45ce:	6853      	ldr	r3, [r2, #4]
    45d0:	2180      	movs	r1, #128	; 0x80
    45d2:	0249      	lsls	r1, r1, #9
    45d4:	400b      	ands	r3, r1
    45d6:	431c      	orrs	r4, r3
    45d8:	6054      	str	r4, [r2, #4]
    45da:	4b09      	ldr	r3, [pc, #36]	; (4600 <system_gclk_gen_set_config+0xcc>)
    45dc:	4798      	blx	r3
    45de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45e0:	2302      	movs	r3, #2
    45e2:	2200      	movs	r2, #0
    45e4:	e7c6      	b.n	4574 <system_gclk_gen_set_config+0x40>
    45e6:	2701      	movs	r7, #1
    45e8:	e7d8      	b.n	459c <system_gclk_gen_set_config+0x68>
    45ea:	2201      	movs	r2, #1
    45ec:	e7e2      	b.n	45b4 <system_gclk_gen_set_config+0x80>
    45ee:	2301      	movs	r3, #1
    45f0:	e7ea      	b.n	45c8 <system_gclk_gen_set_config+0x94>
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	40000c00 	.word	0x40000c00
    45f8:	000041c1 	.word	0x000041c1
    45fc:	40000c08 	.word	0x40000c08
    4600:	00004201 	.word	0x00004201

00004604 <system_gclk_gen_enable>:
    4604:	b570      	push	{r4, r5, r6, lr}
    4606:	0005      	movs	r5, r0
    4608:	4b10      	ldr	r3, [pc, #64]	; (464c <system_gclk_gen_enable+0x48>)
    460a:	785b      	ldrb	r3, [r3, #1]
    460c:	b25b      	sxtb	r3, r3
    460e:	2b00      	cmp	r3, #0
    4610:	db17      	blt.n	4642 <system_gclk_gen_enable+0x3e>
    4612:	2400      	movs	r4, #0
    4614:	2c00      	cmp	r4, #0
    4616:	d1f7      	bne.n	4608 <system_gclk_gen_enable+0x4>
    4618:	4b0d      	ldr	r3, [pc, #52]	; (4650 <system_gclk_gen_enable+0x4c>)
    461a:	4798      	blx	r3
    461c:	4b0d      	ldr	r3, [pc, #52]	; (4654 <system_gclk_gen_enable+0x50>)
    461e:	701d      	strb	r5, [r3, #0]
    4620:	4b0a      	ldr	r3, [pc, #40]	; (464c <system_gclk_gen_enable+0x48>)
    4622:	785b      	ldrb	r3, [r3, #1]
    4624:	b25b      	sxtb	r3, r3
    4626:	2b00      	cmp	r3, #0
    4628:	db0d      	blt.n	4646 <system_gclk_gen_enable+0x42>
    462a:	0023      	movs	r3, r4
    462c:	2b00      	cmp	r3, #0
    462e:	d1f7      	bne.n	4620 <system_gclk_gen_enable+0x1c>
    4630:	4a06      	ldr	r2, [pc, #24]	; (464c <system_gclk_gen_enable+0x48>)
    4632:	6851      	ldr	r1, [r2, #4]
    4634:	2380      	movs	r3, #128	; 0x80
    4636:	025b      	lsls	r3, r3, #9
    4638:	430b      	orrs	r3, r1
    463a:	6053      	str	r3, [r2, #4]
    463c:	4b06      	ldr	r3, [pc, #24]	; (4658 <system_gclk_gen_enable+0x54>)
    463e:	4798      	blx	r3
    4640:	bd70      	pop	{r4, r5, r6, pc}
    4642:	2401      	movs	r4, #1
    4644:	e7e6      	b.n	4614 <system_gclk_gen_enable+0x10>
    4646:	2301      	movs	r3, #1
    4648:	e7f0      	b.n	462c <system_gclk_gen_enable+0x28>
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	40000c00 	.word	0x40000c00
    4650:	000041c1 	.word	0x000041c1
    4654:	40000c04 	.word	0x40000c04
    4658:	00004201 	.word	0x00004201

0000465c <system_gclk_gen_get_hz>:
    465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    465e:	0007      	movs	r7, r0
    4660:	4b22      	ldr	r3, [pc, #136]	; (46ec <system_gclk_gen_get_hz+0x90>)
    4662:	785b      	ldrb	r3, [r3, #1]
    4664:	b25b      	sxtb	r3, r3
    4666:	2b00      	cmp	r3, #0
    4668:	db34      	blt.n	46d4 <system_gclk_gen_get_hz+0x78>
    466a:	2500      	movs	r5, #0
    466c:	2d00      	cmp	r5, #0
    466e:	d1f7      	bne.n	4660 <system_gclk_gen_get_hz+0x4>
    4670:	4b1f      	ldr	r3, [pc, #124]	; (46f0 <system_gclk_gen_get_hz+0x94>)
    4672:	4798      	blx	r3
    4674:	4b1f      	ldr	r3, [pc, #124]	; (46f4 <system_gclk_gen_get_hz+0x98>)
    4676:	701f      	strb	r7, [r3, #0]
    4678:	4b1c      	ldr	r3, [pc, #112]	; (46ec <system_gclk_gen_get_hz+0x90>)
    467a:	785b      	ldrb	r3, [r3, #1]
    467c:	b25b      	sxtb	r3, r3
    467e:	2b00      	cmp	r3, #0
    4680:	db2a      	blt.n	46d8 <system_gclk_gen_get_hz+0x7c>
    4682:	002c      	movs	r4, r5
    4684:	2c00      	cmp	r4, #0
    4686:	d1f7      	bne.n	4678 <system_gclk_gen_get_hz+0x1c>
    4688:	4e18      	ldr	r6, [pc, #96]	; (46ec <system_gclk_gen_get_hz+0x90>)
    468a:	6870      	ldr	r0, [r6, #4]
    468c:	04c0      	lsls	r0, r0, #19
    468e:	0ec0      	lsrs	r0, r0, #27
    4690:	4b19      	ldr	r3, [pc, #100]	; (46f8 <system_gclk_gen_get_hz+0x9c>)
    4692:	4798      	blx	r3
    4694:	0005      	movs	r5, r0
    4696:	4b17      	ldr	r3, [pc, #92]	; (46f4 <system_gclk_gen_get_hz+0x98>)
    4698:	701f      	strb	r7, [r3, #0]
    469a:	6876      	ldr	r6, [r6, #4]
    469c:	02f6      	lsls	r6, r6, #11
    469e:	0ff6      	lsrs	r6, r6, #31
    46a0:	4b16      	ldr	r3, [pc, #88]	; (46fc <system_gclk_gen_get_hz+0xa0>)
    46a2:	701f      	strb	r7, [r3, #0]
    46a4:	4b11      	ldr	r3, [pc, #68]	; (46ec <system_gclk_gen_get_hz+0x90>)
    46a6:	785b      	ldrb	r3, [r3, #1]
    46a8:	b25b      	sxtb	r3, r3
    46aa:	2b00      	cmp	r3, #0
    46ac:	db16      	blt.n	46dc <system_gclk_gen_get_hz+0x80>
    46ae:	0023      	movs	r3, r4
    46b0:	2b00      	cmp	r3, #0
    46b2:	d1f7      	bne.n	46a4 <system_gclk_gen_get_hz+0x48>
    46b4:	4b0d      	ldr	r3, [pc, #52]	; (46ec <system_gclk_gen_get_hz+0x90>)
    46b6:	689c      	ldr	r4, [r3, #8]
    46b8:	0224      	lsls	r4, r4, #8
    46ba:	0c24      	lsrs	r4, r4, #16
    46bc:	4b10      	ldr	r3, [pc, #64]	; (4700 <system_gclk_gen_get_hz+0xa4>)
    46be:	4798      	blx	r3
    46c0:	2e00      	cmp	r6, #0
    46c2:	d10d      	bne.n	46e0 <system_gclk_gen_get_hz+0x84>
    46c4:	2c01      	cmp	r4, #1
    46c6:	d90b      	bls.n	46e0 <system_gclk_gen_get_hz+0x84>
    46c8:	0021      	movs	r1, r4
    46ca:	0028      	movs	r0, r5
    46cc:	4b0d      	ldr	r3, [pc, #52]	; (4704 <system_gclk_gen_get_hz+0xa8>)
    46ce:	4798      	blx	r3
    46d0:	0005      	movs	r5, r0
    46d2:	e009      	b.n	46e8 <system_gclk_gen_get_hz+0x8c>
    46d4:	2501      	movs	r5, #1
    46d6:	e7c9      	b.n	466c <system_gclk_gen_get_hz+0x10>
    46d8:	2401      	movs	r4, #1
    46da:	e7d3      	b.n	4684 <system_gclk_gen_get_hz+0x28>
    46dc:	2301      	movs	r3, #1
    46de:	e7e7      	b.n	46b0 <system_gclk_gen_get_hz+0x54>
    46e0:	2e00      	cmp	r6, #0
    46e2:	d001      	beq.n	46e8 <system_gclk_gen_get_hz+0x8c>
    46e4:	3401      	adds	r4, #1
    46e6:	40e5      	lsrs	r5, r4
    46e8:	0028      	movs	r0, r5
    46ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46ec:	40000c00 	.word	0x40000c00
    46f0:	000041c1 	.word	0x000041c1
    46f4:	40000c04 	.word	0x40000c04
    46f8:	00004255 	.word	0x00004255
    46fc:	40000c08 	.word	0x40000c08
    4700:	00004201 	.word	0x00004201
    4704:	00004e09 	.word	0x00004e09

00004708 <system_gclk_chan_enable>:
    4708:	b510      	push	{r4, lr}
    470a:	0004      	movs	r4, r0
    470c:	4b06      	ldr	r3, [pc, #24]	; (4728 <system_gclk_chan_enable+0x20>)
    470e:	4798      	blx	r3
    4710:	4b06      	ldr	r3, [pc, #24]	; (472c <system_gclk_chan_enable+0x24>)
    4712:	701c      	strb	r4, [r3, #0]
    4714:	4a06      	ldr	r2, [pc, #24]	; (4730 <system_gclk_chan_enable+0x28>)
    4716:	8853      	ldrh	r3, [r2, #2]
    4718:	2180      	movs	r1, #128	; 0x80
    471a:	01c9      	lsls	r1, r1, #7
    471c:	430b      	orrs	r3, r1
    471e:	8053      	strh	r3, [r2, #2]
    4720:	4b04      	ldr	r3, [pc, #16]	; (4734 <system_gclk_chan_enable+0x2c>)
    4722:	4798      	blx	r3
    4724:	bd10      	pop	{r4, pc}
    4726:	46c0      	nop			; (mov r8, r8)
    4728:	000041c1 	.word	0x000041c1
    472c:	40000c02 	.word	0x40000c02
    4730:	40000c00 	.word	0x40000c00
    4734:	00004201 	.word	0x00004201

00004738 <system_gclk_chan_disable>:
    4738:	b510      	push	{r4, lr}
    473a:	0004      	movs	r4, r0
    473c:	4b0e      	ldr	r3, [pc, #56]	; (4778 <system_gclk_chan_disable+0x40>)
    473e:	4798      	blx	r3
    4740:	4b0e      	ldr	r3, [pc, #56]	; (477c <system_gclk_chan_disable+0x44>)
    4742:	701c      	strb	r4, [r3, #0]
    4744:	490e      	ldr	r1, [pc, #56]	; (4780 <system_gclk_chan_disable+0x48>)
    4746:	884b      	ldrh	r3, [r1, #2]
    4748:	051b      	lsls	r3, r3, #20
    474a:	0f1a      	lsrs	r2, r3, #28
    474c:	884b      	ldrh	r3, [r1, #2]
    474e:	480d      	ldr	r0, [pc, #52]	; (4784 <system_gclk_chan_disable+0x4c>)
    4750:	4003      	ands	r3, r0
    4752:	804b      	strh	r3, [r1, #2]
    4754:	884b      	ldrh	r3, [r1, #2]
    4756:	480c      	ldr	r0, [pc, #48]	; (4788 <system_gclk_chan_disable+0x50>)
    4758:	4003      	ands	r3, r0
    475a:	804b      	strh	r3, [r1, #2]
    475c:	4b08      	ldr	r3, [pc, #32]	; (4780 <system_gclk_chan_disable+0x48>)
    475e:	885b      	ldrh	r3, [r3, #2]
    4760:	045b      	lsls	r3, r3, #17
    4762:	d4fb      	bmi.n	475c <system_gclk_chan_disable+0x24>
    4764:	4806      	ldr	r0, [pc, #24]	; (4780 <system_gclk_chan_disable+0x48>)
    4766:	8841      	ldrh	r1, [r0, #2]
    4768:	0213      	lsls	r3, r2, #8
    476a:	4a06      	ldr	r2, [pc, #24]	; (4784 <system_gclk_chan_disable+0x4c>)
    476c:	400a      	ands	r2, r1
    476e:	4313      	orrs	r3, r2
    4770:	8043      	strh	r3, [r0, #2]
    4772:	4b06      	ldr	r3, [pc, #24]	; (478c <system_gclk_chan_disable+0x54>)
    4774:	4798      	blx	r3
    4776:	bd10      	pop	{r4, pc}
    4778:	000041c1 	.word	0x000041c1
    477c:	40000c02 	.word	0x40000c02
    4780:	40000c00 	.word	0x40000c00
    4784:	fffff0ff 	.word	0xfffff0ff
    4788:	ffffbfff 	.word	0xffffbfff
    478c:	00004201 	.word	0x00004201

00004790 <system_gclk_chan_set_config>:
    4790:	b510      	push	{r4, lr}
    4792:	780c      	ldrb	r4, [r1, #0]
    4794:	0224      	lsls	r4, r4, #8
    4796:	4304      	orrs	r4, r0
    4798:	4b02      	ldr	r3, [pc, #8]	; (47a4 <system_gclk_chan_set_config+0x14>)
    479a:	4798      	blx	r3
    479c:	b2a4      	uxth	r4, r4
    479e:	4b02      	ldr	r3, [pc, #8]	; (47a8 <system_gclk_chan_set_config+0x18>)
    47a0:	805c      	strh	r4, [r3, #2]
    47a2:	bd10      	pop	{r4, pc}
    47a4:	00004739 	.word	0x00004739
    47a8:	40000c00 	.word	0x40000c00

000047ac <system_gclk_chan_get_hz>:
    47ac:	b510      	push	{r4, lr}
    47ae:	0004      	movs	r4, r0
    47b0:	4b06      	ldr	r3, [pc, #24]	; (47cc <system_gclk_chan_get_hz+0x20>)
    47b2:	4798      	blx	r3
    47b4:	4b06      	ldr	r3, [pc, #24]	; (47d0 <system_gclk_chan_get_hz+0x24>)
    47b6:	701c      	strb	r4, [r3, #0]
    47b8:	4b06      	ldr	r3, [pc, #24]	; (47d4 <system_gclk_chan_get_hz+0x28>)
    47ba:	885c      	ldrh	r4, [r3, #2]
    47bc:	0524      	lsls	r4, r4, #20
    47be:	0f24      	lsrs	r4, r4, #28
    47c0:	4b05      	ldr	r3, [pc, #20]	; (47d8 <system_gclk_chan_get_hz+0x2c>)
    47c2:	4798      	blx	r3
    47c4:	0020      	movs	r0, r4
    47c6:	4b05      	ldr	r3, [pc, #20]	; (47dc <system_gclk_chan_get_hz+0x30>)
    47c8:	4798      	blx	r3
    47ca:	bd10      	pop	{r4, pc}
    47cc:	000041c1 	.word	0x000041c1
    47d0:	40000c02 	.word	0x40000c02
    47d4:	40000c00 	.word	0x40000c00
    47d8:	00004201 	.word	0x00004201
    47dc:	0000465d 	.word	0x0000465d

000047e0 <system_interrupt_set_priority>:
    47e0:	b530      	push	{r4, r5, lr}
    47e2:	2800      	cmp	r0, #0
    47e4:	db19      	blt.n	481a <system_interrupt_set_priority+0x3a>
    47e6:	17c3      	asrs	r3, r0, #31
    47e8:	2403      	movs	r4, #3
    47ea:	0022      	movs	r2, r4
    47ec:	401a      	ands	r2, r3
    47ee:	1812      	adds	r2, r2, r0
    47f0:	1092      	asrs	r2, r2, #2
    47f2:	b2d2      	uxtb	r2, r2
    47f4:	0f9b      	lsrs	r3, r3, #30
    47f6:	18c0      	adds	r0, r0, r3
    47f8:	4020      	ands	r0, r4
    47fa:	1ac3      	subs	r3, r0, r3
    47fc:	00db      	lsls	r3, r3, #3
    47fe:	b2db      	uxtb	r3, r3
    4800:	3306      	adds	r3, #6
    4802:	b2db      	uxtb	r3, r3
    4804:	4d09      	ldr	r5, [pc, #36]	; (482c <system_interrupt_set_priority+0x4c>)
    4806:	32c0      	adds	r2, #192	; 0xc0
    4808:	0092      	lsls	r2, r2, #2
    480a:	5950      	ldr	r0, [r2, r5]
    480c:	409c      	lsls	r4, r3
    480e:	43a0      	bics	r0, r4
    4810:	4099      	lsls	r1, r3
    4812:	4301      	orrs	r1, r0
    4814:	5151      	str	r1, [r2, r5]
    4816:	2000      	movs	r0, #0
    4818:	bd30      	pop	{r4, r5, pc}
    481a:	1c43      	adds	r3, r0, #1
    481c:	d001      	beq.n	4822 <system_interrupt_set_priority+0x42>
    481e:	2017      	movs	r0, #23
    4820:	e7fa      	b.n	4818 <system_interrupt_set_priority+0x38>
    4822:	0789      	lsls	r1, r1, #30
    4824:	4b02      	ldr	r3, [pc, #8]	; (4830 <system_interrupt_set_priority+0x50>)
    4826:	6219      	str	r1, [r3, #32]
    4828:	2000      	movs	r0, #0
    482a:	e7f5      	b.n	4818 <system_interrupt_set_priority+0x38>
    482c:	e000e100 	.word	0xe000e100
    4830:	e000ed00 	.word	0xe000ed00

00004834 <_system_pinmux_config>:
    4834:	b570      	push	{r4, r5, r6, lr}
    4836:	78d3      	ldrb	r3, [r2, #3]
    4838:	2b00      	cmp	r3, #0
    483a:	d120      	bne.n	487e <_system_pinmux_config+0x4a>
    483c:	7815      	ldrb	r5, [r2, #0]
    483e:	2d80      	cmp	r5, #128	; 0x80
    4840:	d01b      	beq.n	487a <_system_pinmux_config+0x46>
    4842:	062d      	lsls	r5, r5, #24
    4844:	2380      	movs	r3, #128	; 0x80
    4846:	025b      	lsls	r3, r3, #9
    4848:	431d      	orrs	r5, r3
    484a:	7853      	ldrb	r3, [r2, #1]
    484c:	2b00      	cmp	r3, #0
    484e:	d001      	beq.n	4854 <_system_pinmux_config+0x20>
    4850:	2b02      	cmp	r3, #2
    4852:	d10a      	bne.n	486a <_system_pinmux_config+0x36>
    4854:	2380      	movs	r3, #128	; 0x80
    4856:	029b      	lsls	r3, r3, #10
    4858:	432b      	orrs	r3, r5
    485a:	7894      	ldrb	r4, [r2, #2]
    485c:	2c00      	cmp	r4, #0
    485e:	d002      	beq.n	4866 <_system_pinmux_config+0x32>
    4860:	23c0      	movs	r3, #192	; 0xc0
    4862:	02db      	lsls	r3, r3, #11
    4864:	432b      	orrs	r3, r5
    4866:	6041      	str	r1, [r0, #4]
    4868:	001d      	movs	r5, r3
    486a:	7853      	ldrb	r3, [r2, #1]
    486c:	3b01      	subs	r3, #1
    486e:	b2db      	uxtb	r3, r3
    4870:	2b01      	cmp	r3, #1
    4872:	d806      	bhi.n	4882 <_system_pinmux_config+0x4e>
    4874:	4b13      	ldr	r3, [pc, #76]	; (48c4 <_system_pinmux_config+0x90>)
    4876:	401d      	ands	r5, r3
    4878:	e003      	b.n	4882 <_system_pinmux_config+0x4e>
    487a:	2500      	movs	r5, #0
    487c:	e7e5      	b.n	484a <_system_pinmux_config+0x16>
    487e:	6041      	str	r1, [r0, #4]
    4880:	2500      	movs	r5, #0
    4882:	040c      	lsls	r4, r1, #16
    4884:	0c24      	lsrs	r4, r4, #16
    4886:	0c0b      	lsrs	r3, r1, #16
    4888:	432c      	orrs	r4, r5
    488a:	26a0      	movs	r6, #160	; 0xa0
    488c:	05f6      	lsls	r6, r6, #23
    488e:	4334      	orrs	r4, r6
    4890:	6284      	str	r4, [r0, #40]	; 0x28
    4892:	432b      	orrs	r3, r5
    4894:	24d0      	movs	r4, #208	; 0xd0
    4896:	0624      	lsls	r4, r4, #24
    4898:	4323      	orrs	r3, r4
    489a:	6283      	str	r3, [r0, #40]	; 0x28
    489c:	78d3      	ldrb	r3, [r2, #3]
    489e:	2b00      	cmp	r3, #0
    48a0:	d10a      	bne.n	48b8 <_system_pinmux_config+0x84>
    48a2:	036b      	lsls	r3, r5, #13
    48a4:	d503      	bpl.n	48ae <_system_pinmux_config+0x7a>
    48a6:	7893      	ldrb	r3, [r2, #2]
    48a8:	2b01      	cmp	r3, #1
    48aa:	d006      	beq.n	48ba <_system_pinmux_config+0x86>
    48ac:	6141      	str	r1, [r0, #20]
    48ae:	7853      	ldrb	r3, [r2, #1]
    48b0:	3b01      	subs	r3, #1
    48b2:	b2db      	uxtb	r3, r3
    48b4:	2b01      	cmp	r3, #1
    48b6:	d902      	bls.n	48be <_system_pinmux_config+0x8a>
    48b8:	bd70      	pop	{r4, r5, r6, pc}
    48ba:	6181      	str	r1, [r0, #24]
    48bc:	e7f7      	b.n	48ae <_system_pinmux_config+0x7a>
    48be:	6081      	str	r1, [r0, #8]
    48c0:	e7fa      	b.n	48b8 <_system_pinmux_config+0x84>
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	fffbffff 	.word	0xfffbffff

000048c8 <system_pinmux_pin_set_config>:
    48c8:	b510      	push	{r4, lr}
    48ca:	000a      	movs	r2, r1
    48cc:	09c1      	lsrs	r1, r0, #7
    48ce:	0943      	lsrs	r3, r0, #5
    48d0:	2900      	cmp	r1, #0
    48d2:	d10b      	bne.n	48ec <system_pinmux_pin_set_config+0x24>
    48d4:	01db      	lsls	r3, r3, #7
    48d6:	4906      	ldr	r1, [pc, #24]	; (48f0 <system_pinmux_pin_set_config+0x28>)
    48d8:	468c      	mov	ip, r1
    48da:	4463      	add	r3, ip
    48dc:	241f      	movs	r4, #31
    48de:	4020      	ands	r0, r4
    48e0:	2101      	movs	r1, #1
    48e2:	4081      	lsls	r1, r0
    48e4:	0018      	movs	r0, r3
    48e6:	4b03      	ldr	r3, [pc, #12]	; (48f4 <system_pinmux_pin_set_config+0x2c>)
    48e8:	4798      	blx	r3
    48ea:	bd10      	pop	{r4, pc}
    48ec:	2300      	movs	r3, #0
    48ee:	e7f5      	b.n	48dc <system_pinmux_pin_set_config+0x14>
    48f0:	41004400 	.word	0x41004400
    48f4:	00004835 	.word	0x00004835

000048f8 <_system_dummy_init>:
    48f8:	4770      	bx	lr
	...

000048fc <system_init>:
    48fc:	b510      	push	{r4, lr}
    48fe:	4b05      	ldr	r3, [pc, #20]	; (4914 <system_init+0x18>)
    4900:	4798      	blx	r3
    4902:	4b05      	ldr	r3, [pc, #20]	; (4918 <system_init+0x1c>)
    4904:	4798      	blx	r3
    4906:	4b05      	ldr	r3, [pc, #20]	; (491c <system_init+0x20>)
    4908:	4798      	blx	r3
    490a:	4b05      	ldr	r3, [pc, #20]	; (4920 <system_init+0x24>)
    490c:	4798      	blx	r3
    490e:	4b05      	ldr	r3, [pc, #20]	; (4924 <system_init+0x28>)
    4910:	4798      	blx	r3
    4912:	bd10      	pop	{r4, pc}
    4914:	00004435 	.word	0x00004435
    4918:	000041bd 	.word	0x000041bd
    491c:	000048f9 	.word	0x000048f9
    4920:	0000032d 	.word	0x0000032d
    4924:	000048f9 	.word	0x000048f9

00004928 <Dummy_Handler>:
    4928:	e7fe      	b.n	4928 <Dummy_Handler>
	...

0000492c <Reset_Handler>:
    492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    492e:	4a23      	ldr	r2, [pc, #140]	; (49bc <Reset_Handler+0x90>)
    4930:	4b23      	ldr	r3, [pc, #140]	; (49c0 <Reset_Handler+0x94>)
    4932:	429a      	cmp	r2, r3
    4934:	d009      	beq.n	494a <Reset_Handler+0x1e>
    4936:	4b22      	ldr	r3, [pc, #136]	; (49c0 <Reset_Handler+0x94>)
    4938:	4a20      	ldr	r2, [pc, #128]	; (49bc <Reset_Handler+0x90>)
    493a:	e003      	b.n	4944 <Reset_Handler+0x18>
    493c:	6811      	ldr	r1, [r2, #0]
    493e:	6019      	str	r1, [r3, #0]
    4940:	3304      	adds	r3, #4
    4942:	3204      	adds	r2, #4
    4944:	491f      	ldr	r1, [pc, #124]	; (49c4 <Reset_Handler+0x98>)
    4946:	428b      	cmp	r3, r1
    4948:	d3f8      	bcc.n	493c <Reset_Handler+0x10>
    494a:	4b1f      	ldr	r3, [pc, #124]	; (49c8 <Reset_Handler+0x9c>)
    494c:	e002      	b.n	4954 <Reset_Handler+0x28>
    494e:	2200      	movs	r2, #0
    4950:	601a      	str	r2, [r3, #0]
    4952:	3304      	adds	r3, #4
    4954:	4a1d      	ldr	r2, [pc, #116]	; (49cc <Reset_Handler+0xa0>)
    4956:	4293      	cmp	r3, r2
    4958:	d3f9      	bcc.n	494e <Reset_Handler+0x22>
    495a:	4a1d      	ldr	r2, [pc, #116]	; (49d0 <Reset_Handler+0xa4>)
    495c:	21ff      	movs	r1, #255	; 0xff
    495e:	4b1d      	ldr	r3, [pc, #116]	; (49d4 <Reset_Handler+0xa8>)
    4960:	438b      	bics	r3, r1
    4962:	6093      	str	r3, [r2, #8]
    4964:	39fd      	subs	r1, #253	; 0xfd
    4966:	2390      	movs	r3, #144	; 0x90
    4968:	005b      	lsls	r3, r3, #1
    496a:	4a1b      	ldr	r2, [pc, #108]	; (49d8 <Reset_Handler+0xac>)
    496c:	50d1      	str	r1, [r2, r3]
    496e:	4a1b      	ldr	r2, [pc, #108]	; (49dc <Reset_Handler+0xb0>)
    4970:	78d3      	ldrb	r3, [r2, #3]
    4972:	2503      	movs	r5, #3
    4974:	43ab      	bics	r3, r5
    4976:	2402      	movs	r4, #2
    4978:	4323      	orrs	r3, r4
    497a:	70d3      	strb	r3, [r2, #3]
    497c:	78d3      	ldrb	r3, [r2, #3]
    497e:	270c      	movs	r7, #12
    4980:	43bb      	bics	r3, r7
    4982:	2608      	movs	r6, #8
    4984:	4333      	orrs	r3, r6
    4986:	70d3      	strb	r3, [r2, #3]
    4988:	4b15      	ldr	r3, [pc, #84]	; (49e0 <Reset_Handler+0xb4>)
    498a:	7b98      	ldrb	r0, [r3, #14]
    498c:	2230      	movs	r2, #48	; 0x30
    498e:	4390      	bics	r0, r2
    4990:	2220      	movs	r2, #32
    4992:	4310      	orrs	r0, r2
    4994:	7398      	strb	r0, [r3, #14]
    4996:	7b99      	ldrb	r1, [r3, #14]
    4998:	43b9      	bics	r1, r7
    499a:	4331      	orrs	r1, r6
    499c:	7399      	strb	r1, [r3, #14]
    499e:	7b9a      	ldrb	r2, [r3, #14]
    49a0:	43aa      	bics	r2, r5
    49a2:	4322      	orrs	r2, r4
    49a4:	739a      	strb	r2, [r3, #14]
    49a6:	4a0f      	ldr	r2, [pc, #60]	; (49e4 <Reset_Handler+0xb8>)
    49a8:	6851      	ldr	r1, [r2, #4]
    49aa:	2380      	movs	r3, #128	; 0x80
    49ac:	430b      	orrs	r3, r1
    49ae:	6053      	str	r3, [r2, #4]
    49b0:	4b0d      	ldr	r3, [pc, #52]	; (49e8 <Reset_Handler+0xbc>)
    49b2:	4798      	blx	r3
    49b4:	4b0d      	ldr	r3, [pc, #52]	; (49ec <Reset_Handler+0xc0>)
    49b6:	4798      	blx	r3
    49b8:	e7fe      	b.n	49b8 <Reset_Handler+0x8c>
    49ba:	46c0      	nop			; (mov r8, r8)
    49bc:	00005ae8 	.word	0x00005ae8
    49c0:	20000000 	.word	0x20000000
    49c4:	20000074 	.word	0x20000074
    49c8:	20000074 	.word	0x20000074
    49cc:	20000a48 	.word	0x20000a48
    49d0:	e000ed00 	.word	0xe000ed00
    49d4:	00000000 	.word	0x00000000
    49d8:	41007000 	.word	0x41007000
    49dc:	41005000 	.word	0x41005000
    49e0:	41004800 	.word	0x41004800
    49e4:	41004000 	.word	0x41004000
    49e8:	00004f75 	.word	0x00004f75
    49ec:	00004b31 	.word	0x00004b31

000049f0 <_sbrk>:
    49f0:	0003      	movs	r3, r0
    49f2:	4a06      	ldr	r2, [pc, #24]	; (4a0c <_sbrk+0x1c>)
    49f4:	6812      	ldr	r2, [r2, #0]
    49f6:	2a00      	cmp	r2, #0
    49f8:	d004      	beq.n	4a04 <_sbrk+0x14>
    49fa:	4a04      	ldr	r2, [pc, #16]	; (4a0c <_sbrk+0x1c>)
    49fc:	6810      	ldr	r0, [r2, #0]
    49fe:	18c3      	adds	r3, r0, r3
    4a00:	6013      	str	r3, [r2, #0]
    4a02:	4770      	bx	lr
    4a04:	4902      	ldr	r1, [pc, #8]	; (4a10 <_sbrk+0x20>)
    4a06:	4a01      	ldr	r2, [pc, #4]	; (4a0c <_sbrk+0x1c>)
    4a08:	6011      	str	r1, [r2, #0]
    4a0a:	e7f6      	b.n	49fa <_sbrk+0xa>
    4a0c:	200003f4 	.word	0x200003f4
    4a10:	20002a48 	.word	0x20002a48

00004a14 <clock_osc8m_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes the 8 MHz oscillator to be used as the
	*  system clock source.
	*/
void clock_osc8m_init(void){
    4a14:	b500      	push	{lr}
    4a16:	b083      	sub	sp, #12
	//create system clock config struct
	struct system_clock_source_osc8m_config osc8_config;

	//config the 8 MHz oscillator
	//divide by 1 = 8 MHz clock
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    4a18:	a801      	add	r0, sp, #4
    4a1a:	2300      	movs	r3, #0
    4a1c:	7003      	strb	r3, [r0, #0]
	//run on demand
	osc8_config.on_demand = true;
    4a1e:	2201      	movs	r2, #1
    4a20:	7082      	strb	r2, [r0, #2]
	//don't run in standby
	osc8_config.run_in_standby = false;
    4a22:	7043      	strb	r3, [r0, #1]
	    
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    4a24:	4b01      	ldr	r3, [pc, #4]	; (4a2c <clock_osc8m_init+0x18>)
    4a26:	4798      	blx	r3
}//end clock_osc8m_init
    4a28:	b003      	add	sp, #12
    4a2a:	bd00      	pop	{pc}
    4a2c:	000042e9 	.word	0x000042e9

00004a30 <clock_gclk0_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes GCLK0, so it can be used by 
	*  peripherals. Uses the 8 MHz oscillator as its source.
	*/
void clock_gclk0_init(void){
    4a30:	b500      	push	{lr}
    4a32:	b085      	sub	sp, #20
	//create GLCK0 config struct (for driving peripherals)
	struct system_gclk_gen_config gclk0_config;

	//init MCLK
	system_gclk_init();
    4a34:	4b0a      	ldr	r3, [pc, #40]	; (4a60 <clock_gclk0_init+0x30>)
    4a36:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    4a38:	2300      	movs	r3, #0
    4a3a:	4a0a      	ldr	r2, [pc, #40]	; (4a64 <clock_gclk0_init+0x34>)
    4a3c:	7213      	strb	r3, [r2, #8]
	    
	//set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	    
	//use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    4a3e:	a901      	add	r1, sp, #4
    4a40:	2206      	movs	r2, #6
    4a42:	700a      	strb	r2, [r1, #0]
	//don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    4a44:	724b      	strb	r3, [r1, #9]
	//We're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    4a46:	704b      	strb	r3, [r1, #1]
	//division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    4a48:	3a05      	subs	r2, #5
    4a4a:	604a      	str	r2, [r1, #4]
	//don't run in standby
	gclk0_config.run_in_standby = false;
    4a4c:	720b      	strb	r3, [r1, #8]
	//set GCLK0's config
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    4a4e:	2000      	movs	r0, #0
    4a50:	4b05      	ldr	r3, [pc, #20]	; (4a68 <clock_gclk0_init+0x38>)
    4a52:	4798      	blx	r3
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    4a54:	2000      	movs	r0, #0
    4a56:	4b05      	ldr	r3, [pc, #20]	; (4a6c <clock_gclk0_init+0x3c>)
    4a58:	4798      	blx	r3
}//end clock_gclk0_init
    4a5a:	b005      	add	sp, #20
    4a5c:	bd00      	pop	{pc}
    4a5e:	46c0      	nop			; (mov r8, r8)
    4a60:	00004511 	.word	0x00004511
    4a64:	40000400 	.word	0x40000400
    4a68:	00004535 	.word	0x00004535
    4a6c:	00004605 	.word	0x00004605

00004a70 <sys_clock_init>:
void sys_clock_init(void){
    4a70:	b510      	push	{r4, lr}
	clock_osc8m_init();
    4a72:	4b05      	ldr	r3, [pc, #20]	; (4a88 <sys_clock_init+0x18>)
    4a74:	4798      	blx	r3
	clock_gclk0_init();
    4a76:	4b05      	ldr	r3, [pc, #20]	; (4a8c <sys_clock_init+0x1c>)
    4a78:	4798      	blx	r3
	clock_osc32k_init();
    4a7a:	4b05      	ldr	r3, [pc, #20]	; (4a90 <sys_clock_init+0x20>)
    4a7c:	4798      	blx	r3
	clock_gclk2_init();
    4a7e:	4b05      	ldr	r3, [pc, #20]	; (4a94 <sys_clock_init+0x24>)
    4a80:	4798      	blx	r3
	delay_init();
    4a82:	4b05      	ldr	r3, [pc, #20]	; (4a98 <sys_clock_init+0x28>)
    4a84:	4798      	blx	r3
}//end sys_clock_init
    4a86:	bd10      	pop	{r4, pc}
    4a88:	00004a15 	.word	0x00004a15
    4a8c:	00004a31 	.word	0x00004a31
    4a90:	00003291 	.word	0x00003291
    4a94:	000032b9 	.word	0x000032b9
    4a98:	00000115 	.word	0x00000115

00004a9c <configure_port_pins>:
/* Function Name    : configure_port_pins
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config select pins for lcd 
	*/
void configure_port_pins(void){
    4a9c:	b570      	push	{r4, r5, r6, lr}
    4a9e:	b082      	sub	sp, #8
	config->powersave  = false;
    4aa0:	ac01      	add	r4, sp, #4
    4aa2:	2300      	movs	r3, #0
    4aa4:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);


	// configure outputs
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4aa6:	2601      	movs	r6, #1
    4aa8:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = LCD_PD_PULL;
    4aaa:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(LCD_PD, &config_port_pin);
    4aac:	0021      	movs	r1, r4
    4aae:	2008      	movs	r0, #8
    4ab0:	4d05      	ldr	r5, [pc, #20]	; (4ac8 <configure_port_pins+0x2c>)
    4ab2:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    4ab4:	2280      	movs	r2, #128	; 0x80
    4ab6:	0052      	lsls	r2, r2, #1
    4ab8:	4b04      	ldr	r3, [pc, #16]	; (4acc <configure_port_pins+0x30>)
    4aba:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
	
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4abc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(EEPROM_CS,&config_port_pin);
    4abe:	0021      	movs	r1, r4
    4ac0:	200d      	movs	r0, #13
    4ac2:	47a8      	blx	r5
	port_pin_set_output_level(PIN_PB15, true);	
	
*/


}//end configure_port_pins
    4ac4:	b002      	add	sp, #8
    4ac6:	bd70      	pop	{r4, r5, r6, pc}
    4ac8:	00004199 	.word	0x00004199
    4acc:	41004400 	.word	0x41004400

00004ad0 <sim_system_init>:
void sim_system_init(void){
    4ad0:	b510      	push	{r4, lr}
	system_init();
    4ad2:	4b0c      	ldr	r3, [pc, #48]	; (4b04 <sim_system_init+0x34>)
    4ad4:	4798      	blx	r3
	sys_clock_init();
    4ad6:	4b0c      	ldr	r3, [pc, #48]	; (4b08 <sim_system_init+0x38>)
    4ad8:	4798      	blx	r3
	configure_port_pins();
    4ada:	4b0c      	ldr	r3, [pc, #48]	; (4b0c <sim_system_init+0x3c>)
    4adc:	4798      	blx	r3
	lcd_spi_init();
    4ade:	4b0c      	ldr	r3, [pc, #48]	; (4b10 <sim_system_init+0x40>)
    4ae0:	4798      	blx	r3
	configure_ext_ints();
    4ae2:	4b0c      	ldr	r3, [pc, #48]	; (4b14 <sim_system_init+0x44>)
    4ae4:	4798      	blx	r3
	configure_ext_int_callback();
    4ae6:	4b0c      	ldr	r3, [pc, #48]	; (4b18 <sim_system_init+0x48>)
    4ae8:	4798      	blx	r3
	lcd_init_seq(); 
    4aea:	4b0c      	ldr	r3, [pc, #48]	; (4b1c <sim_system_init+0x4c>)
    4aec:	4798      	blx	r3
	lcd_int_mask(LCD_DEFAULT_MASK);
    4aee:	2104      	movs	r1, #4
    4af0:	480b      	ldr	r0, [pc, #44]	; (4b20 <sim_system_init+0x50>)
    4af2:	4c0c      	ldr	r4, [pc, #48]	; (4b24 <sim_system_init+0x54>)
    4af4:	47a0      	blx	r4
	lcd_int_enable();
    4af6:	2101      	movs	r1, #1
    4af8:	480b      	ldr	r0, [pc, #44]	; (4b28 <sim_system_init+0x58>)
    4afa:	47a0      	blx	r4
    uartfiber_init();
    4afc:	4b0b      	ldr	r3, [pc, #44]	; (4b2c <sim_system_init+0x5c>)
    4afe:	4798      	blx	r3
}//end sim_system_init
    4b00:	bd10      	pop	{r4, pc}
    4b02:	46c0      	nop			; (mov r8, r8)
    4b04:	000048fd 	.word	0x000048fd
    4b08:	00004a71 	.word	0x00004a71
    4b0c:	00004a9d 	.word	0x00004a9d
    4b10:	000032f1 	.word	0x000032f1
    4b14:	0000318d 	.word	0x0000318d
    4b18:	000031b5 	.word	0x000031b5
    4b1c:	00003635 	.word	0x00003635
    4b20:	003020b0 	.word	0x003020b0
    4b24:	00003539 	.word	0x00003539
    4b28:	003020ac 	.word	0x003020ac
    4b2c:	0000145d 	.word	0x0000145d

00004b30 <main>:
int main(void){
    4b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b32:	b085      	sub	sp, #20
	sim_system_init();
    4b34:	4b84      	ldr	r3, [pc, #528]	; (4d48 <main+0x218>)
    4b36:	4798      	blx	r3
	cpu_irq_enable();
    4b38:	4d84      	ldr	r5, [pc, #528]	; (4d4c <main+0x21c>)
    4b3a:	2601      	movs	r6, #1
    4b3c:	702e      	strb	r6, [r5, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4b3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4b42:	b662      	cpsie	i
	configure_rtc_calendar();
    4b44:	4b82      	ldr	r3, [pc, #520]	; (4d50 <main+0x220>)
    4b46:	4798      	blx	r3
	phost = &host;
    4b48:	4c82      	ldr	r4, [pc, #520]	; (4d54 <main+0x224>)
    4b4a:	4883      	ldr	r0, [pc, #524]	; (4d58 <main+0x228>)
    4b4c:	6020      	str	r0, [r4, #0]
	Ft_Gpu_Hal_Open(phost);
    4b4e:	4b83      	ldr	r3, [pc, #524]	; (4d5c <main+0x22c>)
    4b50:	4798      	blx	r3
	Ft_Gpu_Hal_Wr8(phost, REG_INT_EN, 1);
    4b52:	2201      	movs	r2, #1
    4b54:	4982      	ldr	r1, [pc, #520]	; (4d60 <main+0x230>)
    4b56:	6820      	ldr	r0, [r4, #0]
    4b58:	4f82      	ldr	r7, [pc, #520]	; (4d64 <main+0x234>)
    4b5a:	47b8      	blx	r7
	Ft_Gpu_Hal_Wr8(phost, REG_INT_MASK, 6);
    4b5c:	6820      	ldr	r0, [r4, #0]
    4b5e:	2206      	movs	r2, #6
    4b60:	4981      	ldr	r1, [pc, #516]	; (4d68 <main+0x238>)
    4b62:	47b8      	blx	r7
	delay_ms(2000);
    4b64:	20fa      	movs	r0, #250	; 0xfa
    4b66:	00c0      	lsls	r0, r0, #3
    4b68:	4b80      	ldr	r3, [pc, #512]	; (4d6c <main+0x23c>)
    4b6a:	4798      	blx	r3
	cpu_irq_enable();
    4b6c:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4b6e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4b72:	b662      	cpsie	i
	mstimer_init();
    4b74:	4b7e      	ldr	r3, [pc, #504]	; (4d70 <main+0x240>)
    4b76:	4798      	blx	r3
	rs485_baud_rate_set(38400);
    4b78:	2096      	movs	r0, #150	; 0x96
    4b7a:	0200      	lsls	r0, r0, #8
    4b7c:	4b7d      	ldr	r3, [pc, #500]	; (4d74 <main+0x244>)
    4b7e:	4798      	blx	r3
	rs485_init();
    4b80:	4b7d      	ldr	r3, [pc, #500]	; (4d78 <main+0x248>)
    4b82:	4798      	blx	r3
	mstimer_set(&Blink_Timer, 125);
    4b84:	217d      	movs	r1, #125	; 0x7d
    4b86:	487d      	ldr	r0, [pc, #500]	; (4d7c <main+0x24c>)
    4b88:	4b7d      	ldr	r3, [pc, #500]	; (4d80 <main+0x250>)
    4b8a:	4798      	blx	r3
    4b8c:	e02e      	b.n	4bec <main+0xbc>
			current_fiber1_data.rssi_values = get_fiber1_data();
    4b8e:	4c7d      	ldr	r4, [pc, #500]	; (4d84 <main+0x254>)
    4b90:	4b7d      	ldr	r3, [pc, #500]	; (4d88 <main+0x258>)
    4b92:	4798      	blx	r3
    4b94:	7220      	strb	r0, [r4, #8]
    4b96:	0403      	lsls	r3, r0, #16
    4b98:	0e1b      	lsrs	r3, r3, #24
    4b9a:	7263      	strb	r3, [r4, #9]
    4b9c:	0203      	lsls	r3, r0, #8
    4b9e:	0e1b      	lsrs	r3, r3, #24
    4ba0:	72a3      	strb	r3, [r4, #10]
    4ba2:	0e00      	lsrs	r0, r0, #24
    4ba4:	72e0      	strb	r0, [r4, #11]
			reset_fiber1_status();
    4ba6:	4b79      	ldr	r3, [pc, #484]	; (4d8c <main+0x25c>)
    4ba8:	4798      	blx	r3
    4baa:	e023      	b.n	4bf4 <main+0xc4>
			current_fiber2_data.rssi_values = get_fiber2_data();
    4bac:	4c78      	ldr	r4, [pc, #480]	; (4d90 <main+0x260>)
    4bae:	4b79      	ldr	r3, [pc, #484]	; (4d94 <main+0x264>)
    4bb0:	4798      	blx	r3
    4bb2:	7220      	strb	r0, [r4, #8]
    4bb4:	0403      	lsls	r3, r0, #16
    4bb6:	0e1b      	lsrs	r3, r3, #24
    4bb8:	7263      	strb	r3, [r4, #9]
    4bba:	0203      	lsls	r3, r0, #8
    4bbc:	0e1b      	lsrs	r3, r3, #24
    4bbe:	72a3      	strb	r3, [r4, #10]
    4bc0:	0e00      	lsrs	r0, r0, #24
    4bc2:	72e0      	strb	r0, [r4, #11]
			reset_fiber2_status();
    4bc4:	4b74      	ldr	r3, [pc, #464]	; (4d98 <main+0x268>)
    4bc6:	4798      	blx	r3
    4bc8:	e018      	b.n	4bfc <main+0xcc>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    4bca:	33ff      	adds	r3, #255	; 0xff
    4bcc:	e041      	b.n	4c52 <main+0x122>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    4bce:	33fe      	adds	r3, #254	; 0xfe
    4bd0:	e056      	b.n	4c80 <main+0x150>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    4bd2:	33fd      	adds	r3, #253	; 0xfd
    4bd4:	e06c      	b.n	4cb0 <main+0x180>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    4bd6:	33fc      	adds	r3, #252	; 0xfc
    4bd8:	e082      	b.n	4ce0 <main+0x1b0>
			if(tempTag == attn)			    attnOp(&current_fiber1_data);	//attnOp(current_fiber1_data, current_fiber2_data);
    4bda:	486a      	ldr	r0, [pc, #424]	; (4d84 <main+0x254>)
    4bdc:	4b6f      	ldr	r3, [pc, #444]	; (4d9c <main+0x26c>)
    4bde:	4798      	blx	r3
			tempTag = 0;
    4be0:	2200      	movs	r2, #0
    4be2:	4b6f      	ldr	r3, [pc, #444]	; (4da0 <main+0x270>)
    4be4:	701a      	strb	r2, [r3, #0]
			delay_ms(50);
    4be6:	2032      	movs	r0, #50	; 0x32
    4be8:	4b60      	ldr	r3, [pc, #384]	; (4d6c <main+0x23c>)
    4bea:	4798      	blx	r3
		if(get_fiber1_status() == data_ready)
    4bec:	4b6d      	ldr	r3, [pc, #436]	; (4da4 <main+0x274>)
    4bee:	4798      	blx	r3
    4bf0:	2801      	cmp	r0, #1
    4bf2:	d0cc      	beq.n	4b8e <main+0x5e>
		if(get_fiber2_status() == data_ready)
    4bf4:	4b6c      	ldr	r3, [pc, #432]	; (4da8 <main+0x278>)
    4bf6:	4798      	blx	r3
    4bf8:	2801      	cmp	r0, #1
    4bfa:	d0d7      	beq.n	4bac <main+0x7c>
		tag = 0;
    4bfc:	4d6b      	ldr	r5, [pc, #428]	; (4dac <main+0x27c>)
    4bfe:	2300      	movs	r3, #0
    4c00:	702b      	strb	r3, [r5, #0]
		disStart();
    4c02:	4b6b      	ldr	r3, [pc, #428]	; (4db0 <main+0x280>)
    4c04:	4798      	blx	r3
		Ft_Gpu_CoCmd_Gradient(phost, 0, 0x060A39, 0, disWid, disHei, 0x0A4F7A);
    4c06:	4c53      	ldr	r4, [pc, #332]	; (4d54 <main+0x224>)
    4c08:	6820      	ldr	r0, [r4, #0]
    4c0a:	4b6a      	ldr	r3, [pc, #424]	; (4db4 <main+0x284>)
    4c0c:	9302      	str	r3, [sp, #8]
    4c0e:	23f0      	movs	r3, #240	; 0xf0
    4c10:	005b      	lsls	r3, r3, #1
    4c12:	9301      	str	r3, [sp, #4]
    4c14:	3341      	adds	r3, #65	; 0x41
    4c16:	33ff      	adds	r3, #255	; 0xff
    4c18:	9300      	str	r3, [sp, #0]
    4c1a:	2300      	movs	r3, #0
    4c1c:	4a66      	ldr	r2, [pc, #408]	; (4db8 <main+0x288>)
    4c1e:	2100      	movs	r1, #0
    4c20:	4e66      	ldr	r6, [pc, #408]	; (4dbc <main+0x28c>)
    4c22:	47b0      	blx	r6
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    4c24:	2180      	movs	r1, #128	; 0x80
    4c26:	04c9      	lsls	r1, r1, #19
    4c28:	6820      	ldr	r0, [r4, #0]
    4c2a:	4e65      	ldr	r6, [pc, #404]	; (4dc0 <main+0x290>)
    4c2c:	47b0      	blx	r6
		printTime();
    4c2e:	4b65      	ldr	r3, [pc, #404]	; (4dc4 <main+0x294>)
    4c30:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    4c32:	4965      	ldr	r1, [pc, #404]	; (4dc8 <main+0x298>)
    4c34:	6820      	ldr	r0, [r4, #0]
    4c36:	47b0      	blx	r6
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    4c38:	4964      	ldr	r1, [pc, #400]	; (4dcc <main+0x29c>)
    4c3a:	6820      	ldr	r0, [r4, #0]
    4c3c:	4b64      	ldr	r3, [pc, #400]	; (4dd0 <main+0x2a0>)
    4c3e:	4798      	blx	r3
    4c40:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_Hal_WrCmd32(phost,TAG(attn));
    4c42:	4964      	ldr	r1, [pc, #400]	; (4dd4 <main+0x2a4>)
    4c44:	6820      	ldr	r0, [r4, #0]
    4c46:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    4c48:	6820      	ldr	r0, [r4, #0]
    4c4a:	782b      	ldrb	r3, [r5, #0]
    4c4c:	2b01      	cmp	r3, #1
    4c4e:	d0bc      	beq.n	4bca <main+0x9a>
    4c50:	2300      	movs	r3, #0
    4c52:	4a61      	ldr	r2, [pc, #388]	; (4dd8 <main+0x2a8>)
    4c54:	9203      	str	r2, [sp, #12]
    4c56:	9302      	str	r3, [sp, #8]
    4c58:	231e      	movs	r3, #30
    4c5a:	9301      	str	r3, [sp, #4]
    4c5c:	335a      	adds	r3, #90	; 0x5a
    4c5e:	9300      	str	r3, [sp, #0]
    4c60:	3350      	adds	r3, #80	; 0x50
    4c62:	226e      	movs	r2, #110	; 0x6e
    4c64:	21b8      	movs	r1, #184	; 0xb8
    4c66:	4c5d      	ldr	r4, [pc, #372]	; (4ddc <main+0x2ac>)
    4c68:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(hist));
    4c6a:	4c3a      	ldr	r4, [pc, #232]	; (4d54 <main+0x224>)
    4c6c:	495c      	ldr	r1, [pc, #368]	; (4de0 <main+0x2b0>)
    4c6e:	6820      	ldr	r0, [r4, #0]
    4c70:	4b53      	ldr	r3, [pc, #332]	; (4dc0 <main+0x290>)
    4c72:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    4c74:	6820      	ldr	r0, [r4, #0]
    4c76:	4b4d      	ldr	r3, [pc, #308]	; (4dac <main+0x27c>)
    4c78:	781b      	ldrb	r3, [r3, #0]
    4c7a:	2b02      	cmp	r3, #2
    4c7c:	d0a7      	beq.n	4bce <main+0x9e>
    4c7e:	2300      	movs	r3, #0
    4c80:	4a58      	ldr	r2, [pc, #352]	; (4de4 <main+0x2b4>)
    4c82:	9203      	str	r2, [sp, #12]
    4c84:	9302      	str	r3, [sp, #8]
    4c86:	231e      	movs	r3, #30
    4c88:	9301      	str	r3, [sp, #4]
    4c8a:	335a      	adds	r3, #90	; 0x5a
    4c8c:	9300      	str	r3, [sp, #0]
    4c8e:	3350      	adds	r3, #80	; 0x50
    4c90:	226e      	movs	r2, #110	; 0x6e
    4c92:	21d0      	movs	r1, #208	; 0xd0
    4c94:	0049      	lsls	r1, r1, #1
    4c96:	4c51      	ldr	r4, [pc, #324]	; (4ddc <main+0x2ac>)
    4c98:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(rssi));
    4c9a:	4c2e      	ldr	r4, [pc, #184]	; (4d54 <main+0x224>)
    4c9c:	4952      	ldr	r1, [pc, #328]	; (4de8 <main+0x2b8>)
    4c9e:	6820      	ldr	r0, [r4, #0]
    4ca0:	4b47      	ldr	r3, [pc, #284]	; (4dc0 <main+0x290>)
    4ca2:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    4ca4:	6820      	ldr	r0, [r4, #0]
    4ca6:	4b41      	ldr	r3, [pc, #260]	; (4dac <main+0x27c>)
    4ca8:	781b      	ldrb	r3, [r3, #0]
    4caa:	2b03      	cmp	r3, #3
    4cac:	d091      	beq.n	4bd2 <main+0xa2>
    4cae:	2300      	movs	r3, #0
    4cb0:	4a4e      	ldr	r2, [pc, #312]	; (4dec <main+0x2bc>)
    4cb2:	9203      	str	r2, [sp, #12]
    4cb4:	9302      	str	r3, [sp, #8]
    4cb6:	231e      	movs	r3, #30
    4cb8:	9301      	str	r3, [sp, #4]
    4cba:	335a      	adds	r3, #90	; 0x5a
    4cbc:	9300      	str	r3, [sp, #0]
    4cbe:	3350      	adds	r3, #80	; 0x50
    4cc0:	22f9      	movs	r2, #249	; 0xf9
    4cc2:	21b8      	movs	r1, #184	; 0xb8
    4cc4:	4c45      	ldr	r4, [pc, #276]	; (4ddc <main+0x2ac>)
    4cc6:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sett));
    4cc8:	4c22      	ldr	r4, [pc, #136]	; (4d54 <main+0x224>)
    4cca:	4949      	ldr	r1, [pc, #292]	; (4df0 <main+0x2c0>)
    4ccc:	6820      	ldr	r0, [r4, #0]
    4cce:	4b3c      	ldr	r3, [pc, #240]	; (4dc0 <main+0x290>)
    4cd0:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    4cd2:	6820      	ldr	r0, [r4, #0]
    4cd4:	4b35      	ldr	r3, [pc, #212]	; (4dac <main+0x27c>)
    4cd6:	781b      	ldrb	r3, [r3, #0]
    4cd8:	2b04      	cmp	r3, #4
    4cda:	d100      	bne.n	4cde <main+0x1ae>
    4cdc:	e77b      	b.n	4bd6 <main+0xa6>
    4cde:	2300      	movs	r3, #0
    4ce0:	4a44      	ldr	r2, [pc, #272]	; (4df4 <main+0x2c4>)
    4ce2:	9203      	str	r2, [sp, #12]
    4ce4:	9302      	str	r3, [sp, #8]
    4ce6:	231e      	movs	r3, #30
    4ce8:	9301      	str	r3, [sp, #4]
    4cea:	335a      	adds	r3, #90	; 0x5a
    4cec:	9300      	str	r3, [sp, #0]
    4cee:	3350      	adds	r3, #80	; 0x50
    4cf0:	22f9      	movs	r2, #249	; 0xf9
    4cf2:	21d0      	movs	r1, #208	; 0xd0
    4cf4:	0049      	lsls	r1, r1, #1
    4cf6:	4c39      	ldr	r4, [pc, #228]	; (4ddc <main+0x2ac>)
    4cf8:	47a0      	blx	r4
		disEnd();
    4cfa:	4b3f      	ldr	r3, [pc, #252]	; (4df8 <main+0x2c8>)
    4cfc:	4798      	blx	r3
		if(tag!=0)		tempTag = tag;
    4cfe:	4b2b      	ldr	r3, [pc, #172]	; (4dac <main+0x27c>)
    4d00:	781b      	ldrb	r3, [r3, #0]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d001      	beq.n	4d0a <main+0x1da>
    4d06:	4a26      	ldr	r2, [pc, #152]	; (4da0 <main+0x270>)
    4d08:	7013      	strb	r3, [r2, #0]
		if (tempTag != tag && tag == 0 && tag!=back){
    4d0a:	4a25      	ldr	r2, [pc, #148]	; (4da0 <main+0x270>)
    4d0c:	7812      	ldrb	r2, [r2, #0]
    4d0e:	4293      	cmp	r3, r2
    4d10:	d100      	bne.n	4d14 <main+0x1e4>
    4d12:	e76b      	b.n	4bec <main+0xbc>
    4d14:	2b00      	cmp	r3, #0
    4d16:	d000      	beq.n	4d1a <main+0x1ea>
    4d18:	e768      	b.n	4bec <main+0xbc>
    4d1a:	2b06      	cmp	r3, #6
    4d1c:	d100      	bne.n	4d20 <main+0x1f0>
    4d1e:	e765      	b.n	4bec <main+0xbc>
			if(tempTag == attn)			    attnOp(&current_fiber1_data);	//attnOp(current_fiber1_data, current_fiber2_data);
    4d20:	2a01      	cmp	r2, #1
    4d22:	d100      	bne.n	4d26 <main+0x1f6>
    4d24:	e759      	b.n	4bda <main+0xaa>
			else if(tempTag == hist)		historyOp();
    4d26:	2a02      	cmp	r2, #2
    4d28:	d007      	beq.n	4d3a <main+0x20a>
			else if(tempTag == sett)		settingOp();
    4d2a:	2a04      	cmp	r2, #4
    4d2c:	d008      	beq.n	4d40 <main+0x210>
			else if(tempTag == rssi)		rssiOp();
    4d2e:	2a03      	cmp	r2, #3
    4d30:	d000      	beq.n	4d34 <main+0x204>
    4d32:	e755      	b.n	4be0 <main+0xb0>
    4d34:	4b31      	ldr	r3, [pc, #196]	; (4dfc <main+0x2cc>)
    4d36:	4798      	blx	r3
    4d38:	e752      	b.n	4be0 <main+0xb0>
			else if(tempTag == hist)		historyOp();
    4d3a:	4b31      	ldr	r3, [pc, #196]	; (4e00 <main+0x2d0>)
    4d3c:	4798      	blx	r3
    4d3e:	e74f      	b.n	4be0 <main+0xb0>
			else if(tempTag == sett)		settingOp();
    4d40:	4b30      	ldr	r3, [pc, #192]	; (4e04 <main+0x2d4>)
    4d42:	4798      	blx	r3
    4d44:	e74c      	b.n	4be0 <main+0xb0>
    4d46:	46c0      	nop			; (mov r8, r8)
    4d48:	00004ad1 	.word	0x00004ad1
    4d4c:	2000000b 	.word	0x2000000b
    4d50:	000031cd 	.word	0x000031cd
    4d54:	20000788 	.word	0x20000788
    4d58:	20000470 	.word	0x20000470
    4d5c:	00001a6d 	.word	0x00001a6d
    4d60:	003020ac 	.word	0x003020ac
    4d64:	00001c1d 	.word	0x00001c1d
    4d68:	003020b0 	.word	0x003020b0
    4d6c:	00000151 	.word	0x00000151
    4d70:	000037ed 	.word	0x000037ed
    4d74:	00003a65 	.word	0x00003a65
    4d78:	00003a7d 	.word	0x00003a7d
    4d7c:	200003f8 	.word	0x200003f8
    4d80:	00001351 	.word	0x00001351
    4d84:	20000a38 	.word	0x20000a38
    4d88:	00001605 	.word	0x00001605
    4d8c:	00001685 	.word	0x00001685
    4d90:	20000a2c 	.word	0x20000a2c
    4d94:	00001639 	.word	0x00001639
    4d98:	00001691 	.word	0x00001691
    4d9c:	000021fd 	.word	0x000021fd
    4da0:	2000011e 	.word	0x2000011e
    4da4:	0000166d 	.word	0x0000166d
    4da8:	00001679 	.word	0x00001679
    4dac:	2000011d 	.word	0x2000011d
    4db0:	000021a5 	.word	0x000021a5
    4db4:	000a4f7a 	.word	0x000a4f7a
    4db8:	00000a39 	.word	0x00000a39
    4dbc:	00001925 	.word	0x00001925
    4dc0:	00001d35 	.word	0x00001d35
    4dc4:	00001da5 	.word	0x00001da5
    4dc8:	04ffffff 	.word	0x04ffffff
    4dcc:	0030212c 	.word	0x0030212c
    4dd0:	00001bc5 	.word	0x00001bc5
    4dd4:	03000001 	.word	0x03000001
    4dd8:	00005a5c 	.word	0x00005a5c
    4ddc:	00001805 	.word	0x00001805
    4de0:	03000002 	.word	0x03000002
    4de4:	00005a6c 	.word	0x00005a6c
    4de8:	03000003 	.word	0x03000003
    4dec:	00005a78 	.word	0x00005a78
    4df0:	03000004 	.word	0x03000004
    4df4:	00005a84 	.word	0x00005a84
    4df8:	000021d1 	.word	0x000021d1
    4dfc:	00002699 	.word	0x00002699
    4e00:	00002555 	.word	0x00002555
    4e04:	00002ead 	.word	0x00002ead

00004e08 <__udivsi3>:
    4e08:	2200      	movs	r2, #0
    4e0a:	0843      	lsrs	r3, r0, #1
    4e0c:	428b      	cmp	r3, r1
    4e0e:	d374      	bcc.n	4efa <__udivsi3+0xf2>
    4e10:	0903      	lsrs	r3, r0, #4
    4e12:	428b      	cmp	r3, r1
    4e14:	d35f      	bcc.n	4ed6 <__udivsi3+0xce>
    4e16:	0a03      	lsrs	r3, r0, #8
    4e18:	428b      	cmp	r3, r1
    4e1a:	d344      	bcc.n	4ea6 <__udivsi3+0x9e>
    4e1c:	0b03      	lsrs	r3, r0, #12
    4e1e:	428b      	cmp	r3, r1
    4e20:	d328      	bcc.n	4e74 <__udivsi3+0x6c>
    4e22:	0c03      	lsrs	r3, r0, #16
    4e24:	428b      	cmp	r3, r1
    4e26:	d30d      	bcc.n	4e44 <__udivsi3+0x3c>
    4e28:	22ff      	movs	r2, #255	; 0xff
    4e2a:	0209      	lsls	r1, r1, #8
    4e2c:	ba12      	rev	r2, r2
    4e2e:	0c03      	lsrs	r3, r0, #16
    4e30:	428b      	cmp	r3, r1
    4e32:	d302      	bcc.n	4e3a <__udivsi3+0x32>
    4e34:	1212      	asrs	r2, r2, #8
    4e36:	0209      	lsls	r1, r1, #8
    4e38:	d065      	beq.n	4f06 <__udivsi3+0xfe>
    4e3a:	0b03      	lsrs	r3, r0, #12
    4e3c:	428b      	cmp	r3, r1
    4e3e:	d319      	bcc.n	4e74 <__udivsi3+0x6c>
    4e40:	e000      	b.n	4e44 <__udivsi3+0x3c>
    4e42:	0a09      	lsrs	r1, r1, #8
    4e44:	0bc3      	lsrs	r3, r0, #15
    4e46:	428b      	cmp	r3, r1
    4e48:	d301      	bcc.n	4e4e <__udivsi3+0x46>
    4e4a:	03cb      	lsls	r3, r1, #15
    4e4c:	1ac0      	subs	r0, r0, r3
    4e4e:	4152      	adcs	r2, r2
    4e50:	0b83      	lsrs	r3, r0, #14
    4e52:	428b      	cmp	r3, r1
    4e54:	d301      	bcc.n	4e5a <__udivsi3+0x52>
    4e56:	038b      	lsls	r3, r1, #14
    4e58:	1ac0      	subs	r0, r0, r3
    4e5a:	4152      	adcs	r2, r2
    4e5c:	0b43      	lsrs	r3, r0, #13
    4e5e:	428b      	cmp	r3, r1
    4e60:	d301      	bcc.n	4e66 <__udivsi3+0x5e>
    4e62:	034b      	lsls	r3, r1, #13
    4e64:	1ac0      	subs	r0, r0, r3
    4e66:	4152      	adcs	r2, r2
    4e68:	0b03      	lsrs	r3, r0, #12
    4e6a:	428b      	cmp	r3, r1
    4e6c:	d301      	bcc.n	4e72 <__udivsi3+0x6a>
    4e6e:	030b      	lsls	r3, r1, #12
    4e70:	1ac0      	subs	r0, r0, r3
    4e72:	4152      	adcs	r2, r2
    4e74:	0ac3      	lsrs	r3, r0, #11
    4e76:	428b      	cmp	r3, r1
    4e78:	d301      	bcc.n	4e7e <__udivsi3+0x76>
    4e7a:	02cb      	lsls	r3, r1, #11
    4e7c:	1ac0      	subs	r0, r0, r3
    4e7e:	4152      	adcs	r2, r2
    4e80:	0a83      	lsrs	r3, r0, #10
    4e82:	428b      	cmp	r3, r1
    4e84:	d301      	bcc.n	4e8a <__udivsi3+0x82>
    4e86:	028b      	lsls	r3, r1, #10
    4e88:	1ac0      	subs	r0, r0, r3
    4e8a:	4152      	adcs	r2, r2
    4e8c:	0a43      	lsrs	r3, r0, #9
    4e8e:	428b      	cmp	r3, r1
    4e90:	d301      	bcc.n	4e96 <__udivsi3+0x8e>
    4e92:	024b      	lsls	r3, r1, #9
    4e94:	1ac0      	subs	r0, r0, r3
    4e96:	4152      	adcs	r2, r2
    4e98:	0a03      	lsrs	r3, r0, #8
    4e9a:	428b      	cmp	r3, r1
    4e9c:	d301      	bcc.n	4ea2 <__udivsi3+0x9a>
    4e9e:	020b      	lsls	r3, r1, #8
    4ea0:	1ac0      	subs	r0, r0, r3
    4ea2:	4152      	adcs	r2, r2
    4ea4:	d2cd      	bcs.n	4e42 <__udivsi3+0x3a>
    4ea6:	09c3      	lsrs	r3, r0, #7
    4ea8:	428b      	cmp	r3, r1
    4eaa:	d301      	bcc.n	4eb0 <__udivsi3+0xa8>
    4eac:	01cb      	lsls	r3, r1, #7
    4eae:	1ac0      	subs	r0, r0, r3
    4eb0:	4152      	adcs	r2, r2
    4eb2:	0983      	lsrs	r3, r0, #6
    4eb4:	428b      	cmp	r3, r1
    4eb6:	d301      	bcc.n	4ebc <__udivsi3+0xb4>
    4eb8:	018b      	lsls	r3, r1, #6
    4eba:	1ac0      	subs	r0, r0, r3
    4ebc:	4152      	adcs	r2, r2
    4ebe:	0943      	lsrs	r3, r0, #5
    4ec0:	428b      	cmp	r3, r1
    4ec2:	d301      	bcc.n	4ec8 <__udivsi3+0xc0>
    4ec4:	014b      	lsls	r3, r1, #5
    4ec6:	1ac0      	subs	r0, r0, r3
    4ec8:	4152      	adcs	r2, r2
    4eca:	0903      	lsrs	r3, r0, #4
    4ecc:	428b      	cmp	r3, r1
    4ece:	d301      	bcc.n	4ed4 <__udivsi3+0xcc>
    4ed0:	010b      	lsls	r3, r1, #4
    4ed2:	1ac0      	subs	r0, r0, r3
    4ed4:	4152      	adcs	r2, r2
    4ed6:	08c3      	lsrs	r3, r0, #3
    4ed8:	428b      	cmp	r3, r1
    4eda:	d301      	bcc.n	4ee0 <__udivsi3+0xd8>
    4edc:	00cb      	lsls	r3, r1, #3
    4ede:	1ac0      	subs	r0, r0, r3
    4ee0:	4152      	adcs	r2, r2
    4ee2:	0883      	lsrs	r3, r0, #2
    4ee4:	428b      	cmp	r3, r1
    4ee6:	d301      	bcc.n	4eec <__udivsi3+0xe4>
    4ee8:	008b      	lsls	r3, r1, #2
    4eea:	1ac0      	subs	r0, r0, r3
    4eec:	4152      	adcs	r2, r2
    4eee:	0843      	lsrs	r3, r0, #1
    4ef0:	428b      	cmp	r3, r1
    4ef2:	d301      	bcc.n	4ef8 <__udivsi3+0xf0>
    4ef4:	004b      	lsls	r3, r1, #1
    4ef6:	1ac0      	subs	r0, r0, r3
    4ef8:	4152      	adcs	r2, r2
    4efa:	1a41      	subs	r1, r0, r1
    4efc:	d200      	bcs.n	4f00 <__udivsi3+0xf8>
    4efe:	4601      	mov	r1, r0
    4f00:	4152      	adcs	r2, r2
    4f02:	4610      	mov	r0, r2
    4f04:	4770      	bx	lr
    4f06:	e7ff      	b.n	4f08 <__udivsi3+0x100>
    4f08:	b501      	push	{r0, lr}
    4f0a:	2000      	movs	r0, #0
    4f0c:	f000 f806 	bl	4f1c <__aeabi_idiv0>
    4f10:	bd02      	pop	{r1, pc}
    4f12:	46c0      	nop			; (mov r8, r8)

00004f14 <__aeabi_uidivmod>:
    4f14:	2900      	cmp	r1, #0
    4f16:	d0f7      	beq.n	4f08 <__udivsi3+0x100>
    4f18:	e776      	b.n	4e08 <__udivsi3>
    4f1a:	4770      	bx	lr

00004f1c <__aeabi_idiv0>:
    4f1c:	4770      	bx	lr
    4f1e:	46c0      	nop			; (mov r8, r8)

00004f20 <__aeabi_lmul>:
    4f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f22:	46ce      	mov	lr, r9
    4f24:	4647      	mov	r7, r8
    4f26:	0415      	lsls	r5, r2, #16
    4f28:	0c2d      	lsrs	r5, r5, #16
    4f2a:	002e      	movs	r6, r5
    4f2c:	b580      	push	{r7, lr}
    4f2e:	0407      	lsls	r7, r0, #16
    4f30:	0c14      	lsrs	r4, r2, #16
    4f32:	0c3f      	lsrs	r7, r7, #16
    4f34:	4699      	mov	r9, r3
    4f36:	0c03      	lsrs	r3, r0, #16
    4f38:	437e      	muls	r6, r7
    4f3a:	435d      	muls	r5, r3
    4f3c:	4367      	muls	r7, r4
    4f3e:	4363      	muls	r3, r4
    4f40:	197f      	adds	r7, r7, r5
    4f42:	0c34      	lsrs	r4, r6, #16
    4f44:	19e4      	adds	r4, r4, r7
    4f46:	469c      	mov	ip, r3
    4f48:	42a5      	cmp	r5, r4
    4f4a:	d903      	bls.n	4f54 <__aeabi_lmul+0x34>
    4f4c:	2380      	movs	r3, #128	; 0x80
    4f4e:	025b      	lsls	r3, r3, #9
    4f50:	4698      	mov	r8, r3
    4f52:	44c4      	add	ip, r8
    4f54:	464b      	mov	r3, r9
    4f56:	4351      	muls	r1, r2
    4f58:	4343      	muls	r3, r0
    4f5a:	0436      	lsls	r6, r6, #16
    4f5c:	0c36      	lsrs	r6, r6, #16
    4f5e:	0c25      	lsrs	r5, r4, #16
    4f60:	0424      	lsls	r4, r4, #16
    4f62:	4465      	add	r5, ip
    4f64:	19a4      	adds	r4, r4, r6
    4f66:	1859      	adds	r1, r3, r1
    4f68:	1949      	adds	r1, r1, r5
    4f6a:	0020      	movs	r0, r4
    4f6c:	bc0c      	pop	{r2, r3}
    4f6e:	4690      	mov	r8, r2
    4f70:	4699      	mov	r9, r3
    4f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004f74 <__libc_init_array>:
    4f74:	b570      	push	{r4, r5, r6, lr}
    4f76:	2600      	movs	r6, #0
    4f78:	4d0c      	ldr	r5, [pc, #48]	; (4fac <__libc_init_array+0x38>)
    4f7a:	4c0d      	ldr	r4, [pc, #52]	; (4fb0 <__libc_init_array+0x3c>)
    4f7c:	1b64      	subs	r4, r4, r5
    4f7e:	10a4      	asrs	r4, r4, #2
    4f80:	42a6      	cmp	r6, r4
    4f82:	d109      	bne.n	4f98 <__libc_init_array+0x24>
    4f84:	2600      	movs	r6, #0
    4f86:	f000 fd9f 	bl	5ac8 <_init>
    4f8a:	4d0a      	ldr	r5, [pc, #40]	; (4fb4 <__libc_init_array+0x40>)
    4f8c:	4c0a      	ldr	r4, [pc, #40]	; (4fb8 <__libc_init_array+0x44>)
    4f8e:	1b64      	subs	r4, r4, r5
    4f90:	10a4      	asrs	r4, r4, #2
    4f92:	42a6      	cmp	r6, r4
    4f94:	d105      	bne.n	4fa2 <__libc_init_array+0x2e>
    4f96:	bd70      	pop	{r4, r5, r6, pc}
    4f98:	00b3      	lsls	r3, r6, #2
    4f9a:	58eb      	ldr	r3, [r5, r3]
    4f9c:	4798      	blx	r3
    4f9e:	3601      	adds	r6, #1
    4fa0:	e7ee      	b.n	4f80 <__libc_init_array+0xc>
    4fa2:	00b3      	lsls	r3, r6, #2
    4fa4:	58eb      	ldr	r3, [r5, r3]
    4fa6:	4798      	blx	r3
    4fa8:	3601      	adds	r6, #1
    4faa:	e7f2      	b.n	4f92 <__libc_init_array+0x1e>
    4fac:	00005ad4 	.word	0x00005ad4
    4fb0:	00005ad4 	.word	0x00005ad4
    4fb4:	00005ad4 	.word	0x00005ad4
    4fb8:	00005ad8 	.word	0x00005ad8

00004fbc <memcpy>:
    4fbc:	2300      	movs	r3, #0
    4fbe:	b510      	push	{r4, lr}
    4fc0:	429a      	cmp	r2, r3
    4fc2:	d100      	bne.n	4fc6 <memcpy+0xa>
    4fc4:	bd10      	pop	{r4, pc}
    4fc6:	5ccc      	ldrb	r4, [r1, r3]
    4fc8:	54c4      	strb	r4, [r0, r3]
    4fca:	3301      	adds	r3, #1
    4fcc:	e7f8      	b.n	4fc0 <memcpy+0x4>

00004fce <memset>:
    4fce:	0003      	movs	r3, r0
    4fd0:	1882      	adds	r2, r0, r2
    4fd2:	4293      	cmp	r3, r2
    4fd4:	d100      	bne.n	4fd8 <memset+0xa>
    4fd6:	4770      	bx	lr
    4fd8:	7019      	strb	r1, [r3, #0]
    4fda:	3301      	adds	r3, #1
    4fdc:	e7f9      	b.n	4fd2 <memset+0x4>
	...

00004fe0 <sniprintf>:
    4fe0:	b40c      	push	{r2, r3}
    4fe2:	b530      	push	{r4, r5, lr}
    4fe4:	4b16      	ldr	r3, [pc, #88]	; (5040 <sniprintf+0x60>)
    4fe6:	b09d      	sub	sp, #116	; 0x74
    4fe8:	1e0c      	subs	r4, r1, #0
    4fea:	681d      	ldr	r5, [r3, #0]
    4fec:	da08      	bge.n	5000 <sniprintf+0x20>
    4fee:	238b      	movs	r3, #139	; 0x8b
    4ff0:	2001      	movs	r0, #1
    4ff2:	602b      	str	r3, [r5, #0]
    4ff4:	4240      	negs	r0, r0
    4ff6:	b01d      	add	sp, #116	; 0x74
    4ff8:	bc30      	pop	{r4, r5}
    4ffa:	bc08      	pop	{r3}
    4ffc:	b002      	add	sp, #8
    4ffe:	4718      	bx	r3
    5000:	2382      	movs	r3, #130	; 0x82
    5002:	a902      	add	r1, sp, #8
    5004:	009b      	lsls	r3, r3, #2
    5006:	818b      	strh	r3, [r1, #12]
    5008:	2300      	movs	r3, #0
    500a:	9002      	str	r0, [sp, #8]
    500c:	6108      	str	r0, [r1, #16]
    500e:	429c      	cmp	r4, r3
    5010:	d000      	beq.n	5014 <sniprintf+0x34>
    5012:	1e63      	subs	r3, r4, #1
    5014:	608b      	str	r3, [r1, #8]
    5016:	614b      	str	r3, [r1, #20]
    5018:	2301      	movs	r3, #1
    501a:	425b      	negs	r3, r3
    501c:	81cb      	strh	r3, [r1, #14]
    501e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    5020:	ab21      	add	r3, sp, #132	; 0x84
    5022:	0028      	movs	r0, r5
    5024:	9301      	str	r3, [sp, #4]
    5026:	f000 f91f 	bl	5268 <_svfiprintf_r>
    502a:	1c43      	adds	r3, r0, #1
    502c:	da01      	bge.n	5032 <sniprintf+0x52>
    502e:	238b      	movs	r3, #139	; 0x8b
    5030:	602b      	str	r3, [r5, #0]
    5032:	2c00      	cmp	r4, #0
    5034:	d0df      	beq.n	4ff6 <sniprintf+0x16>
    5036:	2300      	movs	r3, #0
    5038:	9a02      	ldr	r2, [sp, #8]
    503a:	7013      	strb	r3, [r2, #0]
    503c:	e7db      	b.n	4ff6 <sniprintf+0x16>
    503e:	46c0      	nop			; (mov r8, r8)
    5040:	20000010 	.word	0x20000010

00005044 <strlen>:
    5044:	2300      	movs	r3, #0
    5046:	5cc2      	ldrb	r2, [r0, r3]
    5048:	3301      	adds	r3, #1
    504a:	2a00      	cmp	r2, #0
    504c:	d1fb      	bne.n	5046 <strlen+0x2>
    504e:	1e58      	subs	r0, r3, #1
    5050:	4770      	bx	lr
	...

00005054 <_free_r>:
    5054:	b570      	push	{r4, r5, r6, lr}
    5056:	0005      	movs	r5, r0
    5058:	2900      	cmp	r1, #0
    505a:	d010      	beq.n	507e <_free_r+0x2a>
    505c:	1f0c      	subs	r4, r1, #4
    505e:	6823      	ldr	r3, [r4, #0]
    5060:	2b00      	cmp	r3, #0
    5062:	da00      	bge.n	5066 <_free_r+0x12>
    5064:	18e4      	adds	r4, r4, r3
    5066:	0028      	movs	r0, r5
    5068:	f000 fbb9 	bl	57de <__malloc_lock>
    506c:	4a1d      	ldr	r2, [pc, #116]	; (50e4 <_free_r+0x90>)
    506e:	6813      	ldr	r3, [r2, #0]
    5070:	2b00      	cmp	r3, #0
    5072:	d105      	bne.n	5080 <_free_r+0x2c>
    5074:	6063      	str	r3, [r4, #4]
    5076:	6014      	str	r4, [r2, #0]
    5078:	0028      	movs	r0, r5
    507a:	f000 fbb1 	bl	57e0 <__malloc_unlock>
    507e:	bd70      	pop	{r4, r5, r6, pc}
    5080:	42a3      	cmp	r3, r4
    5082:	d909      	bls.n	5098 <_free_r+0x44>
    5084:	6821      	ldr	r1, [r4, #0]
    5086:	1860      	adds	r0, r4, r1
    5088:	4283      	cmp	r3, r0
    508a:	d1f3      	bne.n	5074 <_free_r+0x20>
    508c:	6818      	ldr	r0, [r3, #0]
    508e:	685b      	ldr	r3, [r3, #4]
    5090:	1841      	adds	r1, r0, r1
    5092:	6021      	str	r1, [r4, #0]
    5094:	e7ee      	b.n	5074 <_free_r+0x20>
    5096:	0013      	movs	r3, r2
    5098:	685a      	ldr	r2, [r3, #4]
    509a:	2a00      	cmp	r2, #0
    509c:	d001      	beq.n	50a2 <_free_r+0x4e>
    509e:	42a2      	cmp	r2, r4
    50a0:	d9f9      	bls.n	5096 <_free_r+0x42>
    50a2:	6819      	ldr	r1, [r3, #0]
    50a4:	1858      	adds	r0, r3, r1
    50a6:	42a0      	cmp	r0, r4
    50a8:	d10b      	bne.n	50c2 <_free_r+0x6e>
    50aa:	6820      	ldr	r0, [r4, #0]
    50ac:	1809      	adds	r1, r1, r0
    50ae:	1858      	adds	r0, r3, r1
    50b0:	6019      	str	r1, [r3, #0]
    50b2:	4282      	cmp	r2, r0
    50b4:	d1e0      	bne.n	5078 <_free_r+0x24>
    50b6:	6810      	ldr	r0, [r2, #0]
    50b8:	6852      	ldr	r2, [r2, #4]
    50ba:	1841      	adds	r1, r0, r1
    50bc:	6019      	str	r1, [r3, #0]
    50be:	605a      	str	r2, [r3, #4]
    50c0:	e7da      	b.n	5078 <_free_r+0x24>
    50c2:	42a0      	cmp	r0, r4
    50c4:	d902      	bls.n	50cc <_free_r+0x78>
    50c6:	230c      	movs	r3, #12
    50c8:	602b      	str	r3, [r5, #0]
    50ca:	e7d5      	b.n	5078 <_free_r+0x24>
    50cc:	6821      	ldr	r1, [r4, #0]
    50ce:	1860      	adds	r0, r4, r1
    50d0:	4282      	cmp	r2, r0
    50d2:	d103      	bne.n	50dc <_free_r+0x88>
    50d4:	6810      	ldr	r0, [r2, #0]
    50d6:	6852      	ldr	r2, [r2, #4]
    50d8:	1841      	adds	r1, r0, r1
    50da:	6021      	str	r1, [r4, #0]
    50dc:	6062      	str	r2, [r4, #4]
    50de:	605c      	str	r4, [r3, #4]
    50e0:	e7ca      	b.n	5078 <_free_r+0x24>
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	20000400 	.word	0x20000400

000050e8 <_malloc_r>:
    50e8:	2303      	movs	r3, #3
    50ea:	b570      	push	{r4, r5, r6, lr}
    50ec:	1ccd      	adds	r5, r1, #3
    50ee:	439d      	bics	r5, r3
    50f0:	3508      	adds	r5, #8
    50f2:	0006      	movs	r6, r0
    50f4:	2d0c      	cmp	r5, #12
    50f6:	d21e      	bcs.n	5136 <_malloc_r+0x4e>
    50f8:	250c      	movs	r5, #12
    50fa:	42a9      	cmp	r1, r5
    50fc:	d81d      	bhi.n	513a <_malloc_r+0x52>
    50fe:	0030      	movs	r0, r6
    5100:	f000 fb6d 	bl	57de <__malloc_lock>
    5104:	4a25      	ldr	r2, [pc, #148]	; (519c <_malloc_r+0xb4>)
    5106:	6814      	ldr	r4, [r2, #0]
    5108:	0021      	movs	r1, r4
    510a:	2900      	cmp	r1, #0
    510c:	d119      	bne.n	5142 <_malloc_r+0x5a>
    510e:	4c24      	ldr	r4, [pc, #144]	; (51a0 <_malloc_r+0xb8>)
    5110:	6823      	ldr	r3, [r4, #0]
    5112:	2b00      	cmp	r3, #0
    5114:	d103      	bne.n	511e <_malloc_r+0x36>
    5116:	0030      	movs	r0, r6
    5118:	f000 fb32 	bl	5780 <_sbrk_r>
    511c:	6020      	str	r0, [r4, #0]
    511e:	0029      	movs	r1, r5
    5120:	0030      	movs	r0, r6
    5122:	f000 fb2d 	bl	5780 <_sbrk_r>
    5126:	1c43      	adds	r3, r0, #1
    5128:	d12c      	bne.n	5184 <_malloc_r+0x9c>
    512a:	230c      	movs	r3, #12
    512c:	0030      	movs	r0, r6
    512e:	6033      	str	r3, [r6, #0]
    5130:	f000 fb56 	bl	57e0 <__malloc_unlock>
    5134:	e003      	b.n	513e <_malloc_r+0x56>
    5136:	2d00      	cmp	r5, #0
    5138:	dadf      	bge.n	50fa <_malloc_r+0x12>
    513a:	230c      	movs	r3, #12
    513c:	6033      	str	r3, [r6, #0]
    513e:	2000      	movs	r0, #0
    5140:	bd70      	pop	{r4, r5, r6, pc}
    5142:	680b      	ldr	r3, [r1, #0]
    5144:	1b5b      	subs	r3, r3, r5
    5146:	d41a      	bmi.n	517e <_malloc_r+0x96>
    5148:	2b0b      	cmp	r3, #11
    514a:	d903      	bls.n	5154 <_malloc_r+0x6c>
    514c:	600b      	str	r3, [r1, #0]
    514e:	18cc      	adds	r4, r1, r3
    5150:	6025      	str	r5, [r4, #0]
    5152:	e003      	b.n	515c <_malloc_r+0x74>
    5154:	428c      	cmp	r4, r1
    5156:	d10e      	bne.n	5176 <_malloc_r+0x8e>
    5158:	6863      	ldr	r3, [r4, #4]
    515a:	6013      	str	r3, [r2, #0]
    515c:	0030      	movs	r0, r6
    515e:	f000 fb3f 	bl	57e0 <__malloc_unlock>
    5162:	0020      	movs	r0, r4
    5164:	2207      	movs	r2, #7
    5166:	300b      	adds	r0, #11
    5168:	1d23      	adds	r3, r4, #4
    516a:	4390      	bics	r0, r2
    516c:	1ac3      	subs	r3, r0, r3
    516e:	d0e7      	beq.n	5140 <_malloc_r+0x58>
    5170:	425a      	negs	r2, r3
    5172:	50e2      	str	r2, [r4, r3]
    5174:	e7e4      	b.n	5140 <_malloc_r+0x58>
    5176:	684b      	ldr	r3, [r1, #4]
    5178:	6063      	str	r3, [r4, #4]
    517a:	000c      	movs	r4, r1
    517c:	e7ee      	b.n	515c <_malloc_r+0x74>
    517e:	000c      	movs	r4, r1
    5180:	6849      	ldr	r1, [r1, #4]
    5182:	e7c2      	b.n	510a <_malloc_r+0x22>
    5184:	2303      	movs	r3, #3
    5186:	1cc4      	adds	r4, r0, #3
    5188:	439c      	bics	r4, r3
    518a:	42a0      	cmp	r0, r4
    518c:	d0e0      	beq.n	5150 <_malloc_r+0x68>
    518e:	1a21      	subs	r1, r4, r0
    5190:	0030      	movs	r0, r6
    5192:	f000 faf5 	bl	5780 <_sbrk_r>
    5196:	1c43      	adds	r3, r0, #1
    5198:	d1da      	bne.n	5150 <_malloc_r+0x68>
    519a:	e7c6      	b.n	512a <_malloc_r+0x42>
    519c:	20000400 	.word	0x20000400
    51a0:	20000404 	.word	0x20000404

000051a4 <__ssputs_r>:
    51a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51a6:	688e      	ldr	r6, [r1, #8]
    51a8:	b085      	sub	sp, #20
    51aa:	0007      	movs	r7, r0
    51ac:	000c      	movs	r4, r1
    51ae:	9203      	str	r2, [sp, #12]
    51b0:	9301      	str	r3, [sp, #4]
    51b2:	429e      	cmp	r6, r3
    51b4:	d839      	bhi.n	522a <__ssputs_r+0x86>
    51b6:	2390      	movs	r3, #144	; 0x90
    51b8:	898a      	ldrh	r2, [r1, #12]
    51ba:	00db      	lsls	r3, r3, #3
    51bc:	421a      	tst	r2, r3
    51be:	d034      	beq.n	522a <__ssputs_r+0x86>
    51c0:	2503      	movs	r5, #3
    51c2:	6909      	ldr	r1, [r1, #16]
    51c4:	6823      	ldr	r3, [r4, #0]
    51c6:	1a5b      	subs	r3, r3, r1
    51c8:	9302      	str	r3, [sp, #8]
    51ca:	6963      	ldr	r3, [r4, #20]
    51cc:	9802      	ldr	r0, [sp, #8]
    51ce:	435d      	muls	r5, r3
    51d0:	0feb      	lsrs	r3, r5, #31
    51d2:	195d      	adds	r5, r3, r5
    51d4:	9b01      	ldr	r3, [sp, #4]
    51d6:	106d      	asrs	r5, r5, #1
    51d8:	3301      	adds	r3, #1
    51da:	181b      	adds	r3, r3, r0
    51dc:	42ab      	cmp	r3, r5
    51de:	d900      	bls.n	51e2 <__ssputs_r+0x3e>
    51e0:	001d      	movs	r5, r3
    51e2:	0553      	lsls	r3, r2, #21
    51e4:	d532      	bpl.n	524c <__ssputs_r+0xa8>
    51e6:	0029      	movs	r1, r5
    51e8:	0038      	movs	r0, r7
    51ea:	f7ff ff7d 	bl	50e8 <_malloc_r>
    51ee:	1e06      	subs	r6, r0, #0
    51f0:	d109      	bne.n	5206 <__ssputs_r+0x62>
    51f2:	230c      	movs	r3, #12
    51f4:	603b      	str	r3, [r7, #0]
    51f6:	2340      	movs	r3, #64	; 0x40
    51f8:	2001      	movs	r0, #1
    51fa:	89a2      	ldrh	r2, [r4, #12]
    51fc:	4240      	negs	r0, r0
    51fe:	4313      	orrs	r3, r2
    5200:	81a3      	strh	r3, [r4, #12]
    5202:	b005      	add	sp, #20
    5204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5206:	9a02      	ldr	r2, [sp, #8]
    5208:	6921      	ldr	r1, [r4, #16]
    520a:	f7ff fed7 	bl	4fbc <memcpy>
    520e:	89a3      	ldrh	r3, [r4, #12]
    5210:	4a14      	ldr	r2, [pc, #80]	; (5264 <__ssputs_r+0xc0>)
    5212:	401a      	ands	r2, r3
    5214:	2380      	movs	r3, #128	; 0x80
    5216:	4313      	orrs	r3, r2
    5218:	81a3      	strh	r3, [r4, #12]
    521a:	9b02      	ldr	r3, [sp, #8]
    521c:	6126      	str	r6, [r4, #16]
    521e:	18f6      	adds	r6, r6, r3
    5220:	6026      	str	r6, [r4, #0]
    5222:	6165      	str	r5, [r4, #20]
    5224:	9e01      	ldr	r6, [sp, #4]
    5226:	1aed      	subs	r5, r5, r3
    5228:	60a5      	str	r5, [r4, #8]
    522a:	9b01      	ldr	r3, [sp, #4]
    522c:	42b3      	cmp	r3, r6
    522e:	d200      	bcs.n	5232 <__ssputs_r+0x8e>
    5230:	001e      	movs	r6, r3
    5232:	0032      	movs	r2, r6
    5234:	9903      	ldr	r1, [sp, #12]
    5236:	6820      	ldr	r0, [r4, #0]
    5238:	f000 fabf 	bl	57ba <memmove>
    523c:	68a3      	ldr	r3, [r4, #8]
    523e:	2000      	movs	r0, #0
    5240:	1b9b      	subs	r3, r3, r6
    5242:	60a3      	str	r3, [r4, #8]
    5244:	6823      	ldr	r3, [r4, #0]
    5246:	199e      	adds	r6, r3, r6
    5248:	6026      	str	r6, [r4, #0]
    524a:	e7da      	b.n	5202 <__ssputs_r+0x5e>
    524c:	002a      	movs	r2, r5
    524e:	0038      	movs	r0, r7
    5250:	f000 fac7 	bl	57e2 <_realloc_r>
    5254:	1e06      	subs	r6, r0, #0
    5256:	d1e0      	bne.n	521a <__ssputs_r+0x76>
    5258:	6921      	ldr	r1, [r4, #16]
    525a:	0038      	movs	r0, r7
    525c:	f7ff fefa 	bl	5054 <_free_r>
    5260:	e7c7      	b.n	51f2 <__ssputs_r+0x4e>
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	fffffb7f 	.word	0xfffffb7f

00005268 <_svfiprintf_r>:
    5268:	b5f0      	push	{r4, r5, r6, r7, lr}
    526a:	b09f      	sub	sp, #124	; 0x7c
    526c:	9002      	str	r0, [sp, #8]
    526e:	9305      	str	r3, [sp, #20]
    5270:	898b      	ldrh	r3, [r1, #12]
    5272:	000f      	movs	r7, r1
    5274:	0016      	movs	r6, r2
    5276:	061b      	lsls	r3, r3, #24
    5278:	d511      	bpl.n	529e <_svfiprintf_r+0x36>
    527a:	690b      	ldr	r3, [r1, #16]
    527c:	2b00      	cmp	r3, #0
    527e:	d10e      	bne.n	529e <_svfiprintf_r+0x36>
    5280:	2140      	movs	r1, #64	; 0x40
    5282:	f7ff ff31 	bl	50e8 <_malloc_r>
    5286:	6038      	str	r0, [r7, #0]
    5288:	6138      	str	r0, [r7, #16]
    528a:	2800      	cmp	r0, #0
    528c:	d105      	bne.n	529a <_svfiprintf_r+0x32>
    528e:	230c      	movs	r3, #12
    5290:	9a02      	ldr	r2, [sp, #8]
    5292:	3801      	subs	r0, #1
    5294:	6013      	str	r3, [r2, #0]
    5296:	b01f      	add	sp, #124	; 0x7c
    5298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    529a:	2340      	movs	r3, #64	; 0x40
    529c:	617b      	str	r3, [r7, #20]
    529e:	2300      	movs	r3, #0
    52a0:	ad06      	add	r5, sp, #24
    52a2:	616b      	str	r3, [r5, #20]
    52a4:	3320      	adds	r3, #32
    52a6:	766b      	strb	r3, [r5, #25]
    52a8:	3310      	adds	r3, #16
    52aa:	76ab      	strb	r3, [r5, #26]
    52ac:	0034      	movs	r4, r6
    52ae:	7823      	ldrb	r3, [r4, #0]
    52b0:	2b00      	cmp	r3, #0
    52b2:	d147      	bne.n	5344 <_svfiprintf_r+0xdc>
    52b4:	1ba3      	subs	r3, r4, r6
    52b6:	9304      	str	r3, [sp, #16]
    52b8:	d00d      	beq.n	52d6 <_svfiprintf_r+0x6e>
    52ba:	1ba3      	subs	r3, r4, r6
    52bc:	0032      	movs	r2, r6
    52be:	0039      	movs	r1, r7
    52c0:	9802      	ldr	r0, [sp, #8]
    52c2:	f7ff ff6f 	bl	51a4 <__ssputs_r>
    52c6:	1c43      	adds	r3, r0, #1
    52c8:	d100      	bne.n	52cc <_svfiprintf_r+0x64>
    52ca:	e0b5      	b.n	5438 <_svfiprintf_r+0x1d0>
    52cc:	696a      	ldr	r2, [r5, #20]
    52ce:	9b04      	ldr	r3, [sp, #16]
    52d0:	4694      	mov	ip, r2
    52d2:	4463      	add	r3, ip
    52d4:	616b      	str	r3, [r5, #20]
    52d6:	7823      	ldrb	r3, [r4, #0]
    52d8:	2b00      	cmp	r3, #0
    52da:	d100      	bne.n	52de <_svfiprintf_r+0x76>
    52dc:	e0ac      	b.n	5438 <_svfiprintf_r+0x1d0>
    52de:	2201      	movs	r2, #1
    52e0:	2300      	movs	r3, #0
    52e2:	4252      	negs	r2, r2
    52e4:	606a      	str	r2, [r5, #4]
    52e6:	a902      	add	r1, sp, #8
    52e8:	3254      	adds	r2, #84	; 0x54
    52ea:	1852      	adds	r2, r2, r1
    52ec:	3401      	adds	r4, #1
    52ee:	602b      	str	r3, [r5, #0]
    52f0:	60eb      	str	r3, [r5, #12]
    52f2:	60ab      	str	r3, [r5, #8]
    52f4:	7013      	strb	r3, [r2, #0]
    52f6:	65ab      	str	r3, [r5, #88]	; 0x58
    52f8:	4e58      	ldr	r6, [pc, #352]	; (545c <_svfiprintf_r+0x1f4>)
    52fa:	2205      	movs	r2, #5
    52fc:	7821      	ldrb	r1, [r4, #0]
    52fe:	0030      	movs	r0, r6
    5300:	f000 fa50 	bl	57a4 <memchr>
    5304:	1c62      	adds	r2, r4, #1
    5306:	2800      	cmp	r0, #0
    5308:	d120      	bne.n	534c <_svfiprintf_r+0xe4>
    530a:	6829      	ldr	r1, [r5, #0]
    530c:	06cb      	lsls	r3, r1, #27
    530e:	d504      	bpl.n	531a <_svfiprintf_r+0xb2>
    5310:	2353      	movs	r3, #83	; 0x53
    5312:	ae02      	add	r6, sp, #8
    5314:	3020      	adds	r0, #32
    5316:	199b      	adds	r3, r3, r6
    5318:	7018      	strb	r0, [r3, #0]
    531a:	070b      	lsls	r3, r1, #28
    531c:	d504      	bpl.n	5328 <_svfiprintf_r+0xc0>
    531e:	2353      	movs	r3, #83	; 0x53
    5320:	202b      	movs	r0, #43	; 0x2b
    5322:	ae02      	add	r6, sp, #8
    5324:	199b      	adds	r3, r3, r6
    5326:	7018      	strb	r0, [r3, #0]
    5328:	7823      	ldrb	r3, [r4, #0]
    532a:	2b2a      	cmp	r3, #42	; 0x2a
    532c:	d016      	beq.n	535c <_svfiprintf_r+0xf4>
    532e:	2000      	movs	r0, #0
    5330:	210a      	movs	r1, #10
    5332:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5334:	7822      	ldrb	r2, [r4, #0]
    5336:	3a30      	subs	r2, #48	; 0x30
    5338:	2a09      	cmp	r2, #9
    533a:	d955      	bls.n	53e8 <_svfiprintf_r+0x180>
    533c:	2800      	cmp	r0, #0
    533e:	d015      	beq.n	536c <_svfiprintf_r+0x104>
    5340:	9309      	str	r3, [sp, #36]	; 0x24
    5342:	e013      	b.n	536c <_svfiprintf_r+0x104>
    5344:	2b25      	cmp	r3, #37	; 0x25
    5346:	d0b5      	beq.n	52b4 <_svfiprintf_r+0x4c>
    5348:	3401      	adds	r4, #1
    534a:	e7b0      	b.n	52ae <_svfiprintf_r+0x46>
    534c:	2301      	movs	r3, #1
    534e:	1b80      	subs	r0, r0, r6
    5350:	4083      	lsls	r3, r0
    5352:	6829      	ldr	r1, [r5, #0]
    5354:	0014      	movs	r4, r2
    5356:	430b      	orrs	r3, r1
    5358:	602b      	str	r3, [r5, #0]
    535a:	e7cd      	b.n	52f8 <_svfiprintf_r+0x90>
    535c:	9b05      	ldr	r3, [sp, #20]
    535e:	1d18      	adds	r0, r3, #4
    5360:	681b      	ldr	r3, [r3, #0]
    5362:	9005      	str	r0, [sp, #20]
    5364:	2b00      	cmp	r3, #0
    5366:	db39      	blt.n	53dc <_svfiprintf_r+0x174>
    5368:	9309      	str	r3, [sp, #36]	; 0x24
    536a:	0014      	movs	r4, r2
    536c:	7823      	ldrb	r3, [r4, #0]
    536e:	2b2e      	cmp	r3, #46	; 0x2e
    5370:	d10b      	bne.n	538a <_svfiprintf_r+0x122>
    5372:	7863      	ldrb	r3, [r4, #1]
    5374:	1c62      	adds	r2, r4, #1
    5376:	2b2a      	cmp	r3, #42	; 0x2a
    5378:	d13e      	bne.n	53f8 <_svfiprintf_r+0x190>
    537a:	9b05      	ldr	r3, [sp, #20]
    537c:	3402      	adds	r4, #2
    537e:	1d1a      	adds	r2, r3, #4
    5380:	681b      	ldr	r3, [r3, #0]
    5382:	9205      	str	r2, [sp, #20]
    5384:	2b00      	cmp	r3, #0
    5386:	db34      	blt.n	53f2 <_svfiprintf_r+0x18a>
    5388:	9307      	str	r3, [sp, #28]
    538a:	4e35      	ldr	r6, [pc, #212]	; (5460 <_svfiprintf_r+0x1f8>)
    538c:	7821      	ldrb	r1, [r4, #0]
    538e:	2203      	movs	r2, #3
    5390:	0030      	movs	r0, r6
    5392:	f000 fa07 	bl	57a4 <memchr>
    5396:	2800      	cmp	r0, #0
    5398:	d006      	beq.n	53a8 <_svfiprintf_r+0x140>
    539a:	2340      	movs	r3, #64	; 0x40
    539c:	1b80      	subs	r0, r0, r6
    539e:	4083      	lsls	r3, r0
    53a0:	682a      	ldr	r2, [r5, #0]
    53a2:	3401      	adds	r4, #1
    53a4:	4313      	orrs	r3, r2
    53a6:	602b      	str	r3, [r5, #0]
    53a8:	7821      	ldrb	r1, [r4, #0]
    53aa:	2206      	movs	r2, #6
    53ac:	482d      	ldr	r0, [pc, #180]	; (5464 <_svfiprintf_r+0x1fc>)
    53ae:	1c66      	adds	r6, r4, #1
    53b0:	7629      	strb	r1, [r5, #24]
    53b2:	f000 f9f7 	bl	57a4 <memchr>
    53b6:	2800      	cmp	r0, #0
    53b8:	d046      	beq.n	5448 <_svfiprintf_r+0x1e0>
    53ba:	4b2b      	ldr	r3, [pc, #172]	; (5468 <_svfiprintf_r+0x200>)
    53bc:	2b00      	cmp	r3, #0
    53be:	d12f      	bne.n	5420 <_svfiprintf_r+0x1b8>
    53c0:	6829      	ldr	r1, [r5, #0]
    53c2:	9b05      	ldr	r3, [sp, #20]
    53c4:	2207      	movs	r2, #7
    53c6:	05c9      	lsls	r1, r1, #23
    53c8:	d528      	bpl.n	541c <_svfiprintf_r+0x1b4>
    53ca:	189b      	adds	r3, r3, r2
    53cc:	4393      	bics	r3, r2
    53ce:	3308      	adds	r3, #8
    53d0:	9305      	str	r3, [sp, #20]
    53d2:	696b      	ldr	r3, [r5, #20]
    53d4:	9a03      	ldr	r2, [sp, #12]
    53d6:	189b      	adds	r3, r3, r2
    53d8:	616b      	str	r3, [r5, #20]
    53da:	e767      	b.n	52ac <_svfiprintf_r+0x44>
    53dc:	425b      	negs	r3, r3
    53de:	60eb      	str	r3, [r5, #12]
    53e0:	2302      	movs	r3, #2
    53e2:	430b      	orrs	r3, r1
    53e4:	602b      	str	r3, [r5, #0]
    53e6:	e7c0      	b.n	536a <_svfiprintf_r+0x102>
    53e8:	434b      	muls	r3, r1
    53ea:	3401      	adds	r4, #1
    53ec:	189b      	adds	r3, r3, r2
    53ee:	2001      	movs	r0, #1
    53f0:	e7a0      	b.n	5334 <_svfiprintf_r+0xcc>
    53f2:	2301      	movs	r3, #1
    53f4:	425b      	negs	r3, r3
    53f6:	e7c7      	b.n	5388 <_svfiprintf_r+0x120>
    53f8:	2300      	movs	r3, #0
    53fa:	0014      	movs	r4, r2
    53fc:	200a      	movs	r0, #10
    53fe:	001a      	movs	r2, r3
    5400:	606b      	str	r3, [r5, #4]
    5402:	7821      	ldrb	r1, [r4, #0]
    5404:	3930      	subs	r1, #48	; 0x30
    5406:	2909      	cmp	r1, #9
    5408:	d903      	bls.n	5412 <_svfiprintf_r+0x1aa>
    540a:	2b00      	cmp	r3, #0
    540c:	d0bd      	beq.n	538a <_svfiprintf_r+0x122>
    540e:	9207      	str	r2, [sp, #28]
    5410:	e7bb      	b.n	538a <_svfiprintf_r+0x122>
    5412:	4342      	muls	r2, r0
    5414:	3401      	adds	r4, #1
    5416:	1852      	adds	r2, r2, r1
    5418:	2301      	movs	r3, #1
    541a:	e7f2      	b.n	5402 <_svfiprintf_r+0x19a>
    541c:	3307      	adds	r3, #7
    541e:	e7d5      	b.n	53cc <_svfiprintf_r+0x164>
    5420:	ab05      	add	r3, sp, #20
    5422:	9300      	str	r3, [sp, #0]
    5424:	003a      	movs	r2, r7
    5426:	4b11      	ldr	r3, [pc, #68]	; (546c <_svfiprintf_r+0x204>)
    5428:	0029      	movs	r1, r5
    542a:	9802      	ldr	r0, [sp, #8]
    542c:	e000      	b.n	5430 <_svfiprintf_r+0x1c8>
    542e:	bf00      	nop
    5430:	9003      	str	r0, [sp, #12]
    5432:	9b03      	ldr	r3, [sp, #12]
    5434:	3301      	adds	r3, #1
    5436:	d1cc      	bne.n	53d2 <_svfiprintf_r+0x16a>
    5438:	89bb      	ldrh	r3, [r7, #12]
    543a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    543c:	065b      	lsls	r3, r3, #25
    543e:	d400      	bmi.n	5442 <_svfiprintf_r+0x1da>
    5440:	e729      	b.n	5296 <_svfiprintf_r+0x2e>
    5442:	2001      	movs	r0, #1
    5444:	4240      	negs	r0, r0
    5446:	e726      	b.n	5296 <_svfiprintf_r+0x2e>
    5448:	ab05      	add	r3, sp, #20
    544a:	9300      	str	r3, [sp, #0]
    544c:	003a      	movs	r2, r7
    544e:	4b07      	ldr	r3, [pc, #28]	; (546c <_svfiprintf_r+0x204>)
    5450:	0029      	movs	r1, r5
    5452:	9802      	ldr	r0, [sp, #8]
    5454:	f000 f87a 	bl	554c <_printf_i>
    5458:	e7ea      	b.n	5430 <_svfiprintf_r+0x1c8>
    545a:	46c0      	nop			; (mov r8, r8)
    545c:	00005a94 	.word	0x00005a94
    5460:	00005a9a 	.word	0x00005a9a
    5464:	00005a9e 	.word	0x00005a9e
    5468:	00000000 	.word	0x00000000
    546c:	000051a5 	.word	0x000051a5

00005470 <_printf_common>:
    5470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5472:	0015      	movs	r5, r2
    5474:	9301      	str	r3, [sp, #4]
    5476:	688a      	ldr	r2, [r1, #8]
    5478:	690b      	ldr	r3, [r1, #16]
    547a:	9000      	str	r0, [sp, #0]
    547c:	000c      	movs	r4, r1
    547e:	4293      	cmp	r3, r2
    5480:	da00      	bge.n	5484 <_printf_common+0x14>
    5482:	0013      	movs	r3, r2
    5484:	0022      	movs	r2, r4
    5486:	602b      	str	r3, [r5, #0]
    5488:	3243      	adds	r2, #67	; 0x43
    548a:	7812      	ldrb	r2, [r2, #0]
    548c:	2a00      	cmp	r2, #0
    548e:	d001      	beq.n	5494 <_printf_common+0x24>
    5490:	3301      	adds	r3, #1
    5492:	602b      	str	r3, [r5, #0]
    5494:	6823      	ldr	r3, [r4, #0]
    5496:	069b      	lsls	r3, r3, #26
    5498:	d502      	bpl.n	54a0 <_printf_common+0x30>
    549a:	682b      	ldr	r3, [r5, #0]
    549c:	3302      	adds	r3, #2
    549e:	602b      	str	r3, [r5, #0]
    54a0:	2706      	movs	r7, #6
    54a2:	6823      	ldr	r3, [r4, #0]
    54a4:	401f      	ands	r7, r3
    54a6:	d027      	beq.n	54f8 <_printf_common+0x88>
    54a8:	0023      	movs	r3, r4
    54aa:	3343      	adds	r3, #67	; 0x43
    54ac:	781b      	ldrb	r3, [r3, #0]
    54ae:	1e5a      	subs	r2, r3, #1
    54b0:	4193      	sbcs	r3, r2
    54b2:	6822      	ldr	r2, [r4, #0]
    54b4:	0692      	lsls	r2, r2, #26
    54b6:	d430      	bmi.n	551a <_printf_common+0xaa>
    54b8:	0022      	movs	r2, r4
    54ba:	9901      	ldr	r1, [sp, #4]
    54bc:	3243      	adds	r2, #67	; 0x43
    54be:	9800      	ldr	r0, [sp, #0]
    54c0:	9e08      	ldr	r6, [sp, #32]
    54c2:	47b0      	blx	r6
    54c4:	1c43      	adds	r3, r0, #1
    54c6:	d025      	beq.n	5514 <_printf_common+0xa4>
    54c8:	2306      	movs	r3, #6
    54ca:	6820      	ldr	r0, [r4, #0]
    54cc:	682a      	ldr	r2, [r5, #0]
    54ce:	68e1      	ldr	r1, [r4, #12]
    54d0:	4003      	ands	r3, r0
    54d2:	2500      	movs	r5, #0
    54d4:	2b04      	cmp	r3, #4
    54d6:	d103      	bne.n	54e0 <_printf_common+0x70>
    54d8:	1a8d      	subs	r5, r1, r2
    54da:	43eb      	mvns	r3, r5
    54dc:	17db      	asrs	r3, r3, #31
    54de:	401d      	ands	r5, r3
    54e0:	68a3      	ldr	r3, [r4, #8]
    54e2:	6922      	ldr	r2, [r4, #16]
    54e4:	4293      	cmp	r3, r2
    54e6:	dd01      	ble.n	54ec <_printf_common+0x7c>
    54e8:	1a9b      	subs	r3, r3, r2
    54ea:	18ed      	adds	r5, r5, r3
    54ec:	2700      	movs	r7, #0
    54ee:	42bd      	cmp	r5, r7
    54f0:	d120      	bne.n	5534 <_printf_common+0xc4>
    54f2:	2000      	movs	r0, #0
    54f4:	e010      	b.n	5518 <_printf_common+0xa8>
    54f6:	3701      	adds	r7, #1
    54f8:	68e3      	ldr	r3, [r4, #12]
    54fa:	682a      	ldr	r2, [r5, #0]
    54fc:	1a9b      	subs	r3, r3, r2
    54fe:	429f      	cmp	r7, r3
    5500:	dad2      	bge.n	54a8 <_printf_common+0x38>
    5502:	0022      	movs	r2, r4
    5504:	2301      	movs	r3, #1
    5506:	3219      	adds	r2, #25
    5508:	9901      	ldr	r1, [sp, #4]
    550a:	9800      	ldr	r0, [sp, #0]
    550c:	9e08      	ldr	r6, [sp, #32]
    550e:	47b0      	blx	r6
    5510:	1c43      	adds	r3, r0, #1
    5512:	d1f0      	bne.n	54f6 <_printf_common+0x86>
    5514:	2001      	movs	r0, #1
    5516:	4240      	negs	r0, r0
    5518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    551a:	2030      	movs	r0, #48	; 0x30
    551c:	18e1      	adds	r1, r4, r3
    551e:	3143      	adds	r1, #67	; 0x43
    5520:	7008      	strb	r0, [r1, #0]
    5522:	0021      	movs	r1, r4
    5524:	1c5a      	adds	r2, r3, #1
    5526:	3145      	adds	r1, #69	; 0x45
    5528:	7809      	ldrb	r1, [r1, #0]
    552a:	18a2      	adds	r2, r4, r2
    552c:	3243      	adds	r2, #67	; 0x43
    552e:	3302      	adds	r3, #2
    5530:	7011      	strb	r1, [r2, #0]
    5532:	e7c1      	b.n	54b8 <_printf_common+0x48>
    5534:	0022      	movs	r2, r4
    5536:	2301      	movs	r3, #1
    5538:	321a      	adds	r2, #26
    553a:	9901      	ldr	r1, [sp, #4]
    553c:	9800      	ldr	r0, [sp, #0]
    553e:	9e08      	ldr	r6, [sp, #32]
    5540:	47b0      	blx	r6
    5542:	1c43      	adds	r3, r0, #1
    5544:	d0e6      	beq.n	5514 <_printf_common+0xa4>
    5546:	3701      	adds	r7, #1
    5548:	e7d1      	b.n	54ee <_printf_common+0x7e>
	...

0000554c <_printf_i>:
    554c:	b5f0      	push	{r4, r5, r6, r7, lr}
    554e:	b08b      	sub	sp, #44	; 0x2c
    5550:	9206      	str	r2, [sp, #24]
    5552:	000a      	movs	r2, r1
    5554:	3243      	adds	r2, #67	; 0x43
    5556:	9307      	str	r3, [sp, #28]
    5558:	9005      	str	r0, [sp, #20]
    555a:	9204      	str	r2, [sp, #16]
    555c:	7e0a      	ldrb	r2, [r1, #24]
    555e:	000c      	movs	r4, r1
    5560:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5562:	2a6e      	cmp	r2, #110	; 0x6e
    5564:	d100      	bne.n	5568 <_printf_i+0x1c>
    5566:	e08f      	b.n	5688 <_printf_i+0x13c>
    5568:	d817      	bhi.n	559a <_printf_i+0x4e>
    556a:	2a63      	cmp	r2, #99	; 0x63
    556c:	d02c      	beq.n	55c8 <_printf_i+0x7c>
    556e:	d808      	bhi.n	5582 <_printf_i+0x36>
    5570:	2a00      	cmp	r2, #0
    5572:	d100      	bne.n	5576 <_printf_i+0x2a>
    5574:	e099      	b.n	56aa <_printf_i+0x15e>
    5576:	2a58      	cmp	r2, #88	; 0x58
    5578:	d054      	beq.n	5624 <_printf_i+0xd8>
    557a:	0026      	movs	r6, r4
    557c:	3642      	adds	r6, #66	; 0x42
    557e:	7032      	strb	r2, [r6, #0]
    5580:	e029      	b.n	55d6 <_printf_i+0x8a>
    5582:	2a64      	cmp	r2, #100	; 0x64
    5584:	d001      	beq.n	558a <_printf_i+0x3e>
    5586:	2a69      	cmp	r2, #105	; 0x69
    5588:	d1f7      	bne.n	557a <_printf_i+0x2e>
    558a:	6821      	ldr	r1, [r4, #0]
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	0608      	lsls	r0, r1, #24
    5590:	d523      	bpl.n	55da <_printf_i+0x8e>
    5592:	1d11      	adds	r1, r2, #4
    5594:	6019      	str	r1, [r3, #0]
    5596:	6815      	ldr	r5, [r2, #0]
    5598:	e025      	b.n	55e6 <_printf_i+0x9a>
    559a:	2a73      	cmp	r2, #115	; 0x73
    559c:	d100      	bne.n	55a0 <_printf_i+0x54>
    559e:	e088      	b.n	56b2 <_printf_i+0x166>
    55a0:	d808      	bhi.n	55b4 <_printf_i+0x68>
    55a2:	2a6f      	cmp	r2, #111	; 0x6f
    55a4:	d029      	beq.n	55fa <_printf_i+0xae>
    55a6:	2a70      	cmp	r2, #112	; 0x70
    55a8:	d1e7      	bne.n	557a <_printf_i+0x2e>
    55aa:	2220      	movs	r2, #32
    55ac:	6809      	ldr	r1, [r1, #0]
    55ae:	430a      	orrs	r2, r1
    55b0:	6022      	str	r2, [r4, #0]
    55b2:	e003      	b.n	55bc <_printf_i+0x70>
    55b4:	2a75      	cmp	r2, #117	; 0x75
    55b6:	d020      	beq.n	55fa <_printf_i+0xae>
    55b8:	2a78      	cmp	r2, #120	; 0x78
    55ba:	d1de      	bne.n	557a <_printf_i+0x2e>
    55bc:	0022      	movs	r2, r4
    55be:	2178      	movs	r1, #120	; 0x78
    55c0:	3245      	adds	r2, #69	; 0x45
    55c2:	7011      	strb	r1, [r2, #0]
    55c4:	4a6c      	ldr	r2, [pc, #432]	; (5778 <_printf_i+0x22c>)
    55c6:	e030      	b.n	562a <_printf_i+0xde>
    55c8:	000e      	movs	r6, r1
    55ca:	681a      	ldr	r2, [r3, #0]
    55cc:	3642      	adds	r6, #66	; 0x42
    55ce:	1d11      	adds	r1, r2, #4
    55d0:	6019      	str	r1, [r3, #0]
    55d2:	6813      	ldr	r3, [r2, #0]
    55d4:	7033      	strb	r3, [r6, #0]
    55d6:	2301      	movs	r3, #1
    55d8:	e079      	b.n	56ce <_printf_i+0x182>
    55da:	0649      	lsls	r1, r1, #25
    55dc:	d5d9      	bpl.n	5592 <_printf_i+0x46>
    55de:	1d11      	adds	r1, r2, #4
    55e0:	6019      	str	r1, [r3, #0]
    55e2:	2300      	movs	r3, #0
    55e4:	5ed5      	ldrsh	r5, [r2, r3]
    55e6:	2d00      	cmp	r5, #0
    55e8:	da03      	bge.n	55f2 <_printf_i+0xa6>
    55ea:	232d      	movs	r3, #45	; 0x2d
    55ec:	9a04      	ldr	r2, [sp, #16]
    55ee:	426d      	negs	r5, r5
    55f0:	7013      	strb	r3, [r2, #0]
    55f2:	4b62      	ldr	r3, [pc, #392]	; (577c <_printf_i+0x230>)
    55f4:	270a      	movs	r7, #10
    55f6:	9303      	str	r3, [sp, #12]
    55f8:	e02f      	b.n	565a <_printf_i+0x10e>
    55fa:	6820      	ldr	r0, [r4, #0]
    55fc:	6819      	ldr	r1, [r3, #0]
    55fe:	0605      	lsls	r5, r0, #24
    5600:	d503      	bpl.n	560a <_printf_i+0xbe>
    5602:	1d08      	adds	r0, r1, #4
    5604:	6018      	str	r0, [r3, #0]
    5606:	680d      	ldr	r5, [r1, #0]
    5608:	e005      	b.n	5616 <_printf_i+0xca>
    560a:	0640      	lsls	r0, r0, #25
    560c:	d5f9      	bpl.n	5602 <_printf_i+0xb6>
    560e:	680d      	ldr	r5, [r1, #0]
    5610:	1d08      	adds	r0, r1, #4
    5612:	6018      	str	r0, [r3, #0]
    5614:	b2ad      	uxth	r5, r5
    5616:	4b59      	ldr	r3, [pc, #356]	; (577c <_printf_i+0x230>)
    5618:	2708      	movs	r7, #8
    561a:	9303      	str	r3, [sp, #12]
    561c:	2a6f      	cmp	r2, #111	; 0x6f
    561e:	d018      	beq.n	5652 <_printf_i+0x106>
    5620:	270a      	movs	r7, #10
    5622:	e016      	b.n	5652 <_printf_i+0x106>
    5624:	3145      	adds	r1, #69	; 0x45
    5626:	700a      	strb	r2, [r1, #0]
    5628:	4a54      	ldr	r2, [pc, #336]	; (577c <_printf_i+0x230>)
    562a:	9203      	str	r2, [sp, #12]
    562c:	681a      	ldr	r2, [r3, #0]
    562e:	6821      	ldr	r1, [r4, #0]
    5630:	1d10      	adds	r0, r2, #4
    5632:	6018      	str	r0, [r3, #0]
    5634:	6815      	ldr	r5, [r2, #0]
    5636:	0608      	lsls	r0, r1, #24
    5638:	d522      	bpl.n	5680 <_printf_i+0x134>
    563a:	07cb      	lsls	r3, r1, #31
    563c:	d502      	bpl.n	5644 <_printf_i+0xf8>
    563e:	2320      	movs	r3, #32
    5640:	4319      	orrs	r1, r3
    5642:	6021      	str	r1, [r4, #0]
    5644:	2710      	movs	r7, #16
    5646:	2d00      	cmp	r5, #0
    5648:	d103      	bne.n	5652 <_printf_i+0x106>
    564a:	2320      	movs	r3, #32
    564c:	6822      	ldr	r2, [r4, #0]
    564e:	439a      	bics	r2, r3
    5650:	6022      	str	r2, [r4, #0]
    5652:	0023      	movs	r3, r4
    5654:	2200      	movs	r2, #0
    5656:	3343      	adds	r3, #67	; 0x43
    5658:	701a      	strb	r2, [r3, #0]
    565a:	6863      	ldr	r3, [r4, #4]
    565c:	60a3      	str	r3, [r4, #8]
    565e:	2b00      	cmp	r3, #0
    5660:	db5c      	blt.n	571c <_printf_i+0x1d0>
    5662:	2204      	movs	r2, #4
    5664:	6821      	ldr	r1, [r4, #0]
    5666:	4391      	bics	r1, r2
    5668:	6021      	str	r1, [r4, #0]
    566a:	2d00      	cmp	r5, #0
    566c:	d158      	bne.n	5720 <_printf_i+0x1d4>
    566e:	9e04      	ldr	r6, [sp, #16]
    5670:	2b00      	cmp	r3, #0
    5672:	d064      	beq.n	573e <_printf_i+0x1f2>
    5674:	0026      	movs	r6, r4
    5676:	9b03      	ldr	r3, [sp, #12]
    5678:	3642      	adds	r6, #66	; 0x42
    567a:	781b      	ldrb	r3, [r3, #0]
    567c:	7033      	strb	r3, [r6, #0]
    567e:	e05e      	b.n	573e <_printf_i+0x1f2>
    5680:	0648      	lsls	r0, r1, #25
    5682:	d5da      	bpl.n	563a <_printf_i+0xee>
    5684:	b2ad      	uxth	r5, r5
    5686:	e7d8      	b.n	563a <_printf_i+0xee>
    5688:	6809      	ldr	r1, [r1, #0]
    568a:	681a      	ldr	r2, [r3, #0]
    568c:	0608      	lsls	r0, r1, #24
    568e:	d505      	bpl.n	569c <_printf_i+0x150>
    5690:	1d11      	adds	r1, r2, #4
    5692:	6019      	str	r1, [r3, #0]
    5694:	6813      	ldr	r3, [r2, #0]
    5696:	6962      	ldr	r2, [r4, #20]
    5698:	601a      	str	r2, [r3, #0]
    569a:	e006      	b.n	56aa <_printf_i+0x15e>
    569c:	0649      	lsls	r1, r1, #25
    569e:	d5f7      	bpl.n	5690 <_printf_i+0x144>
    56a0:	1d11      	adds	r1, r2, #4
    56a2:	6019      	str	r1, [r3, #0]
    56a4:	6813      	ldr	r3, [r2, #0]
    56a6:	8aa2      	ldrh	r2, [r4, #20]
    56a8:	801a      	strh	r2, [r3, #0]
    56aa:	2300      	movs	r3, #0
    56ac:	9e04      	ldr	r6, [sp, #16]
    56ae:	6123      	str	r3, [r4, #16]
    56b0:	e054      	b.n	575c <_printf_i+0x210>
    56b2:	681a      	ldr	r2, [r3, #0]
    56b4:	1d11      	adds	r1, r2, #4
    56b6:	6019      	str	r1, [r3, #0]
    56b8:	6816      	ldr	r6, [r2, #0]
    56ba:	2100      	movs	r1, #0
    56bc:	6862      	ldr	r2, [r4, #4]
    56be:	0030      	movs	r0, r6
    56c0:	f000 f870 	bl	57a4 <memchr>
    56c4:	2800      	cmp	r0, #0
    56c6:	d001      	beq.n	56cc <_printf_i+0x180>
    56c8:	1b80      	subs	r0, r0, r6
    56ca:	6060      	str	r0, [r4, #4]
    56cc:	6863      	ldr	r3, [r4, #4]
    56ce:	6123      	str	r3, [r4, #16]
    56d0:	2300      	movs	r3, #0
    56d2:	9a04      	ldr	r2, [sp, #16]
    56d4:	7013      	strb	r3, [r2, #0]
    56d6:	e041      	b.n	575c <_printf_i+0x210>
    56d8:	6923      	ldr	r3, [r4, #16]
    56da:	0032      	movs	r2, r6
    56dc:	9906      	ldr	r1, [sp, #24]
    56de:	9805      	ldr	r0, [sp, #20]
    56e0:	9d07      	ldr	r5, [sp, #28]
    56e2:	47a8      	blx	r5
    56e4:	1c43      	adds	r3, r0, #1
    56e6:	d043      	beq.n	5770 <_printf_i+0x224>
    56e8:	6823      	ldr	r3, [r4, #0]
    56ea:	2500      	movs	r5, #0
    56ec:	079b      	lsls	r3, r3, #30
    56ee:	d40f      	bmi.n	5710 <_printf_i+0x1c4>
    56f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    56f2:	68e0      	ldr	r0, [r4, #12]
    56f4:	4298      	cmp	r0, r3
    56f6:	da3d      	bge.n	5774 <_printf_i+0x228>
    56f8:	0018      	movs	r0, r3
    56fa:	e03b      	b.n	5774 <_printf_i+0x228>
    56fc:	0022      	movs	r2, r4
    56fe:	2301      	movs	r3, #1
    5700:	3219      	adds	r2, #25
    5702:	9906      	ldr	r1, [sp, #24]
    5704:	9805      	ldr	r0, [sp, #20]
    5706:	9e07      	ldr	r6, [sp, #28]
    5708:	47b0      	blx	r6
    570a:	1c43      	adds	r3, r0, #1
    570c:	d030      	beq.n	5770 <_printf_i+0x224>
    570e:	3501      	adds	r5, #1
    5710:	68e3      	ldr	r3, [r4, #12]
    5712:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5714:	1a9b      	subs	r3, r3, r2
    5716:	429d      	cmp	r5, r3
    5718:	dbf0      	blt.n	56fc <_printf_i+0x1b0>
    571a:	e7e9      	b.n	56f0 <_printf_i+0x1a4>
    571c:	2d00      	cmp	r5, #0
    571e:	d0a9      	beq.n	5674 <_printf_i+0x128>
    5720:	9e04      	ldr	r6, [sp, #16]
    5722:	0028      	movs	r0, r5
    5724:	0039      	movs	r1, r7
    5726:	f7ff fbf5 	bl	4f14 <__aeabi_uidivmod>
    572a:	9b03      	ldr	r3, [sp, #12]
    572c:	3e01      	subs	r6, #1
    572e:	5c5b      	ldrb	r3, [r3, r1]
    5730:	0028      	movs	r0, r5
    5732:	7033      	strb	r3, [r6, #0]
    5734:	0039      	movs	r1, r7
    5736:	f7ff fb67 	bl	4e08 <__udivsi3>
    573a:	1e05      	subs	r5, r0, #0
    573c:	d1f1      	bne.n	5722 <_printf_i+0x1d6>
    573e:	2f08      	cmp	r7, #8
    5740:	d109      	bne.n	5756 <_printf_i+0x20a>
    5742:	6823      	ldr	r3, [r4, #0]
    5744:	07db      	lsls	r3, r3, #31
    5746:	d506      	bpl.n	5756 <_printf_i+0x20a>
    5748:	6863      	ldr	r3, [r4, #4]
    574a:	6922      	ldr	r2, [r4, #16]
    574c:	4293      	cmp	r3, r2
    574e:	dc02      	bgt.n	5756 <_printf_i+0x20a>
    5750:	2330      	movs	r3, #48	; 0x30
    5752:	3e01      	subs	r6, #1
    5754:	7033      	strb	r3, [r6, #0]
    5756:	9b04      	ldr	r3, [sp, #16]
    5758:	1b9b      	subs	r3, r3, r6
    575a:	6123      	str	r3, [r4, #16]
    575c:	9b07      	ldr	r3, [sp, #28]
    575e:	aa09      	add	r2, sp, #36	; 0x24
    5760:	9300      	str	r3, [sp, #0]
    5762:	0021      	movs	r1, r4
    5764:	9b06      	ldr	r3, [sp, #24]
    5766:	9805      	ldr	r0, [sp, #20]
    5768:	f7ff fe82 	bl	5470 <_printf_common>
    576c:	1c43      	adds	r3, r0, #1
    576e:	d1b3      	bne.n	56d8 <_printf_i+0x18c>
    5770:	2001      	movs	r0, #1
    5772:	4240      	negs	r0, r0
    5774:	b00b      	add	sp, #44	; 0x2c
    5776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5778:	00005ab6 	.word	0x00005ab6
    577c:	00005aa5 	.word	0x00005aa5

00005780 <_sbrk_r>:
    5780:	2300      	movs	r3, #0
    5782:	b570      	push	{r4, r5, r6, lr}
    5784:	4c06      	ldr	r4, [pc, #24]	; (57a0 <_sbrk_r+0x20>)
    5786:	0005      	movs	r5, r0
    5788:	0008      	movs	r0, r1
    578a:	6023      	str	r3, [r4, #0]
    578c:	f7ff f930 	bl	49f0 <_sbrk>
    5790:	1c43      	adds	r3, r0, #1
    5792:	d103      	bne.n	579c <_sbrk_r+0x1c>
    5794:	6823      	ldr	r3, [r4, #0]
    5796:	2b00      	cmp	r3, #0
    5798:	d000      	beq.n	579c <_sbrk_r+0x1c>
    579a:	602b      	str	r3, [r5, #0]
    579c:	bd70      	pop	{r4, r5, r6, pc}
    579e:	46c0      	nop			; (mov r8, r8)
    57a0:	20000a44 	.word	0x20000a44

000057a4 <memchr>:
    57a4:	b2c9      	uxtb	r1, r1
    57a6:	1882      	adds	r2, r0, r2
    57a8:	4290      	cmp	r0, r2
    57aa:	d101      	bne.n	57b0 <memchr+0xc>
    57ac:	2000      	movs	r0, #0
    57ae:	4770      	bx	lr
    57b0:	7803      	ldrb	r3, [r0, #0]
    57b2:	428b      	cmp	r3, r1
    57b4:	d0fb      	beq.n	57ae <memchr+0xa>
    57b6:	3001      	adds	r0, #1
    57b8:	e7f6      	b.n	57a8 <memchr+0x4>

000057ba <memmove>:
    57ba:	b510      	push	{r4, lr}
    57bc:	4288      	cmp	r0, r1
    57be:	d902      	bls.n	57c6 <memmove+0xc>
    57c0:	188b      	adds	r3, r1, r2
    57c2:	4298      	cmp	r0, r3
    57c4:	d308      	bcc.n	57d8 <memmove+0x1e>
    57c6:	2300      	movs	r3, #0
    57c8:	429a      	cmp	r2, r3
    57ca:	d007      	beq.n	57dc <memmove+0x22>
    57cc:	5ccc      	ldrb	r4, [r1, r3]
    57ce:	54c4      	strb	r4, [r0, r3]
    57d0:	3301      	adds	r3, #1
    57d2:	e7f9      	b.n	57c8 <memmove+0xe>
    57d4:	5c8b      	ldrb	r3, [r1, r2]
    57d6:	5483      	strb	r3, [r0, r2]
    57d8:	3a01      	subs	r2, #1
    57da:	d2fb      	bcs.n	57d4 <memmove+0x1a>
    57dc:	bd10      	pop	{r4, pc}

000057de <__malloc_lock>:
    57de:	4770      	bx	lr

000057e0 <__malloc_unlock>:
    57e0:	4770      	bx	lr

000057e2 <_realloc_r>:
    57e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57e4:	0007      	movs	r7, r0
    57e6:	000d      	movs	r5, r1
    57e8:	0016      	movs	r6, r2
    57ea:	2900      	cmp	r1, #0
    57ec:	d105      	bne.n	57fa <_realloc_r+0x18>
    57ee:	0011      	movs	r1, r2
    57f0:	f7ff fc7a 	bl	50e8 <_malloc_r>
    57f4:	0004      	movs	r4, r0
    57f6:	0020      	movs	r0, r4
    57f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57fa:	2a00      	cmp	r2, #0
    57fc:	d103      	bne.n	5806 <_realloc_r+0x24>
    57fe:	f7ff fc29 	bl	5054 <_free_r>
    5802:	0034      	movs	r4, r6
    5804:	e7f7      	b.n	57f6 <_realloc_r+0x14>
    5806:	f000 f812 	bl	582e <_malloc_usable_size_r>
    580a:	002c      	movs	r4, r5
    580c:	4286      	cmp	r6, r0
    580e:	d9f2      	bls.n	57f6 <_realloc_r+0x14>
    5810:	0031      	movs	r1, r6
    5812:	0038      	movs	r0, r7
    5814:	f7ff fc68 	bl	50e8 <_malloc_r>
    5818:	1e04      	subs	r4, r0, #0
    581a:	d0ec      	beq.n	57f6 <_realloc_r+0x14>
    581c:	0029      	movs	r1, r5
    581e:	0032      	movs	r2, r6
    5820:	f7ff fbcc 	bl	4fbc <memcpy>
    5824:	0029      	movs	r1, r5
    5826:	0038      	movs	r0, r7
    5828:	f7ff fc14 	bl	5054 <_free_r>
    582c:	e7e3      	b.n	57f6 <_realloc_r+0x14>

0000582e <_malloc_usable_size_r>:
    582e:	1f0b      	subs	r3, r1, #4
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	1f18      	subs	r0, r3, #4
    5834:	2b00      	cmp	r3, #0
    5836:	da01      	bge.n	583c <_malloc_usable_size_r+0xe>
    5838:	580b      	ldr	r3, [r1, r0]
    583a:	18c0      	adds	r0, r0, r3
    583c:	4770      	bx	lr
    583e:	0000      	movs	r0, r0
    5840:	42000800 	.word	0x42000800
    5844:	42000c00 	.word	0x42000c00
    5848:	42001000 	.word	0x42001000
    584c:	42001400 	.word	0x42001400
    5850:	42001800 	.word	0x42001800
    5854:	42001c00 	.word	0x42001c00
    5858:	484d3732 	.word	0x484d3732
    585c:	0000007a 	.word	0x0000007a
    5860:	4d393631 	.word	0x4d393631
    5864:	00007a48 	.word	0x00007a48
    5868:	4d353139 	.word	0x4d353139
    586c:	00007a48 	.word	0x00007a48
    5870:	47342e32 	.word	0x47342e32
    5874:	00007a48 	.word	0x00007a48
    5878:	00004264 	.word	0x00004264
    587c:	65747441 	.word	0x65747441
    5880:	7461756e 	.word	0x7461756e
    5884:	006e6f69 	.word	0x006e6f69
    5888:	61656c50 	.word	0x61656c50
    588c:	74206573 	.word	0x74206573
    5890:	6f207061 	.word	0x6f207061
    5894:	6874206e 	.word	0x6874206e
    5898:	6f642065 	.word	0x6f642065
    589c:	00000074 	.word	0x00000074
    58a0:	61422020 	.word	0x61422020
    58a4:	20206b63 	.word	0x20206b63
    58a8:	00000000 	.word	0x00000000
    58ac:	00333231 	.word	0x00333231
    58b0:	00363534 	.word	0x00363534
    58b4:	00393837 	.word	0x00393837
    58b8:	00000030 	.word	0x00000030
    58bc:	00002d3c 	.word	0x00002d3c
    58c0:	00524c43 	.word	0x00524c43
    58c4:	00004b4f 	.word	0x00004b4f
    58c8:	64323025 	.word	0x64323025
    58cc:	3025202e 	.word	0x3025202e
    58d0:	253a6432 	.word	0x253a6432
    58d4:	3a643230 	.word	0x3a643230
    58d8:	64323025 	.word	0x64323025
    58dc:	25202020 	.word	0x25202020
    58e0:	2f643230 	.word	0x2f643230
    58e4:	64323025 	.word	0x64323025
    58e8:	3430252f 	.word	0x3430252f
    58ec:	20202064 	.word	0x20202064
    58f0:	20202020 	.word	0x20202020
    58f4:	20202020 	.word	0x20202020
    58f8:	20202020 	.word	0x20202020
    58fc:	30252020 	.word	0x30252020
    5900:	20206433 	.word	0x20206433
    5904:	20202020 	.word	0x20202020
    5908:	20202020 	.word	0x20202020
    590c:	20202020 	.word	0x20202020
    5910:	20202020 	.word	0x20202020
    5914:	20202020 	.word	0x20202020
    5918:	33302520 	.word	0x33302520
    591c:	20202064 	.word	0x20202064
    5920:	20202020 	.word	0x20202020
    5924:	20202020 	.word	0x20202020
    5928:	20202020 	.word	0x20202020
    592c:	20202020 	.word	0x20202020
    5930:	25202020 	.word	0x25202020
    5934:	00643330 	.word	0x00643330
    5938:	74736948 	.word	0x74736948
    593c:	0079726f 	.word	0x0079726f
    5940:	64323025 	.word	0x64323025
    5944:	3230253a 	.word	0x3230253a
    5948:	30253a64 	.word	0x30253a64
    594c:	00006432 	.word	0x00006432
    5950:	64323025 	.word	0x64323025
    5954:	3230252f 	.word	0x3230252f
    5958:	30252f64 	.word	0x30252f64
    595c:	00006434 	.word	0x00006434
    5960:	49535352 	.word	0x49535352
    5964:	6e695b20 	.word	0x6e695b20
    5968:	69726574 	.word	0x69726574
    596c:	005d726f 	.word	0x005d726f
    5970:	65746e45 	.word	0x65746e45
    5974:	61442072 	.word	0x61442072
    5978:	00006574 	.word	0x00006574
    597c:	642f6d6d 	.word	0x642f6d6d
    5980:	79792f64 	.word	0x79792f64
    5984:	00007979 	.word	0x00007979
    5988:	65746e45 	.word	0x65746e45
    598c:	69542072 	.word	0x69542072
    5990:	0000656d 	.word	0x0000656d
    5994:	6d3a6868 	.word	0x6d3a6868
    5998:	73733a6d 	.word	0x73733a6d
    599c:	20202020 	.word	0x20202020
    59a0:	68343228 	.word	0x68343228
    59a4:	726f6620 	.word	0x726f6620
    59a8:	2974616d 	.word	0x2974616d
    59ac:	00000000 	.word	0x00000000
    59b0:	75736956 	.word	0x75736956
    59b4:	003a6c61 	.word	0x003a6c61
    59b8:	00736559 	.word	0x00736559
    59bc:	00006f4e 	.word	0x00006f4e
    59c0:	6e756f53 	.word	0x6e756f53
    59c4:	00203a64 	.word	0x00203a64
    59c8:	61432020 	.word	0x61432020
    59cc:	7262696c 	.word	0x7262696c
    59d0:	20657461 	.word	0x20657461
    59d4:	65726353 	.word	0x65726353
    59d8:	20206e65 	.word	0x20206e65
    59dc:	00000000 	.word	0x00000000
    59e0:	65532020 	.word	0x65532020
    59e4:	61442074 	.word	0x61442074
    59e8:	20206574 	.word	0x20206574
    59ec:	00000000 	.word	0x00000000
    59f0:	65532020 	.word	0x65532020
    59f4:	69542074 	.word	0x69542074
    59f8:	2020656d 	.word	0x2020656d
    59fc:	00000000 	.word	0x00000000
    5a00:	74746553 	.word	0x74746553
    5a04:	73676e69 	.word	0x73676e69
    5a08:	00000000 	.word	0x00000000
    5a0c:	0c0b0a09 	.word	0x0c0b0a09
    5a10:	00000e0d 	.word	0x00000e0d
    5a14:	00004268 	.word	0x00004268
    5a18:	000042c4 	.word	0x000042c4
    5a1c:	000042c4 	.word	0x000042c4
    5a20:	00004262 	.word	0x00004262
    5a24:	00004262 	.word	0x00004262
    5a28:	0000427c 	.word	0x0000427c
    5a2c:	0000426e 	.word	0x0000426e
    5a30:	00004282 	.word	0x00004282
    5a34:	000042b4 	.word	0x000042b4
    5a38:	000043b4 	.word	0x000043b4
    5a3c:	00004422 	.word	0x00004422
    5a40:	00004422 	.word	0x00004422
    5a44:	00004394 	.word	0x00004394
    5a48:	000043a6 	.word	0x000043a6
    5a4c:	000043c4 	.word	0x000043c4
    5a50:	00004398 	.word	0x00004398
    5a54:	000043d4 	.word	0x000043d4
    5a58:	00004410 	.word	0x00004410
    5a5c:	74412020 	.word	0x74412020
    5a60:	756e6574 	.word	0x756e6574
    5a64:	6f697461 	.word	0x6f697461
    5a68:	0020206e 	.word	0x0020206e
    5a6c:	69482020 	.word	0x69482020
    5a70:	726f7473 	.word	0x726f7473
    5a74:	00202079 	.word	0x00202079
    5a78:	53522020 	.word	0x53522020
    5a7c:	20204953 	.word	0x20204953
    5a80:	00000000 	.word	0x00000000
    5a84:	65532020 	.word	0x65532020
    5a88:	6e697474 	.word	0x6e697474
    5a8c:	20207367 	.word	0x20207367
    5a90:	00000000 	.word	0x00000000
    5a94:	2b302d23 	.word	0x2b302d23
    5a98:	6c680020 	.word	0x6c680020
    5a9c:	6665004c 	.word	0x6665004c
    5aa0:	47464567 	.word	0x47464567
    5aa4:	00          	.byte	0x00
    5aa5:	30          	.byte	0x30
    5aa6:	3231      	.short	0x3231
    5aa8:	36353433 	.word	0x36353433
    5aac:	41393837 	.word	0x41393837
    5ab0:	45444342 	.word	0x45444342
    5ab4:	31300046 	.word	0x31300046
    5ab8:	35343332 	.word	0x35343332
    5abc:	39383736 	.word	0x39383736
    5ac0:	64636261 	.word	0x64636261
    5ac4:	00006665 	.word	0x00006665

00005ac8 <_init>:
    5ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5ace:	bc08      	pop	{r3}
    5ad0:	469e      	mov	lr, r3
    5ad2:	4770      	bx	lr

00005ad4 <__init_array_start>:
    5ad4:	000000dd 	.word	0x000000dd

00005ad8 <_fini>:
    5ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ada:	46c0      	nop			; (mov r8, r8)
    5adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5ade:	bc08      	pop	{r3}
    5ae0:	469e      	mov	lr, r3
    5ae2:	4770      	bx	lr

00005ae4 <__fini_array_start>:
    5ae4:	000000b5 	.word	0x000000b5
