
BACnet_MSTP_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000605c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  0000605c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009c8  20000074  000060d0  00020074  2**2
                  ALLOC
  3 .stack        00002004  20000a3c  00006a98  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00062084  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007cf2  00000000  00000000  00082179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000105a4  00000000  00000000  00089e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001040  00000000  00000000  0009a40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001630  00000000  00000000  0009b44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002219a  00000000  00000000  0009ca7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001df0f  00000000  00000000  000bec19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000956ef  00000000  00000000  000dcb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ec8  00000000  00000000  00172218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 2a 00 20 15 4e 00 00 11 4e 00 00 11 4e 00 00     @*. .N...N...N..
	...
      2c:	11 4e 00 00 00 00 00 00 00 00 00 00 11 4e 00 00     .N...........N..
      3c:	b9 3c 00 00 11 4e 00 00 11 4e 00 00 99 3f 00 00     .<...N...N...?..
      4c:	11 4e 00 00 a1 02 00 00 11 4e 00 00 11 4e 00 00     .N.......N...N..
      5c:	11 4e 00 00 11 4e 00 00 21 46 00 00 31 46 00 00     .N...N..!F..1F..
      6c:	41 46 00 00 51 46 00 00 61 46 00 00 71 46 00 00     AF..QF..aF..qF..
      7c:	11 4e 00 00 11 4e 00 00 11 4e 00 00 19 40 00 00     .N...N...N...@..
      8c:	29 40 00 00 39 40 00 00 49 40 00 00 59 40 00 00     )@..9@..I@..Y@..
      9c:	65 02 00 00 11 4e 00 00 11 4e 00 00 11 4e 00 00     e....N...N...N..
      ac:	11 4e 00 00 00 00 00 00                             .N......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	0000605c 	.word	0x0000605c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	0000605c 	.word	0x0000605c
     10c:	0000605c 	.word	0x0000605c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
     114:	b510      	push	{r4, lr}
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00004b45 	.word	0x00004b45
     140:	00005319 	.word	0x00005319
     144:	20000000 	.word	0x20000000
     148:	20000004 	.word	0x20000004
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
     150:	e000      	b.n	154 <delay_cycles_ms+0x4>
     152:	0010      	movs	r0, r2
     154:	1e42      	subs	r2, r0, #1
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <delay_cycles_ms+0x24>
     15a:	4b07      	ldr	r3, [pc, #28]	; (178 <delay_cycles_ms+0x28>)
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d0f7      	beq.n	152 <delay_cycles_ms+0x2>
     162:	4906      	ldr	r1, [pc, #24]	; (17c <delay_cycles_ms+0x2c>)
     164:	604b      	str	r3, [r1, #4]
     166:	2300      	movs	r3, #0
     168:	608b      	str	r3, [r1, #8]
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <delay_cycles_ms+0x2c>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	03db      	lsls	r3, r3, #15
     170:	d5fb      	bpl.n	16a <delay_cycles_ms+0x1a>
     172:	e7ee      	b.n	152 <delay_cycles_ms+0x2>
     174:	4770      	bx	lr
     176:	46c0      	nop			; (mov r8, r8)
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <_adc_interrupt_handler>:
     180:	b570      	push	{r4, r5, r6, lr}
     182:	0080      	lsls	r0, r0, #2
     184:	4b36      	ldr	r3, [pc, #216]	; (260 <_adc_interrupt_handler+0xe0>)
     186:	58c5      	ldr	r5, [r0, r3]
     188:	682b      	ldr	r3, [r5, #0]
     18a:	7e1a      	ldrb	r2, [r3, #24]
     18c:	7ddc      	ldrb	r4, [r3, #23]
     18e:	4014      	ands	r4, r2
     190:	07e2      	lsls	r2, r4, #31
     192:	d416      	bmi.n	1c2 <_adc_interrupt_handler+0x42>
     194:	0763      	lsls	r3, r4, #29
     196:	d508      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
     198:	2304      	movs	r3, #4
     19a:	682a      	ldr	r2, [r5, #0]
     19c:	7613      	strb	r3, [r2, #24]
     19e:	7eeb      	ldrb	r3, [r5, #27]
     1a0:	079b      	lsls	r3, r3, #30
     1a2:	d502      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
     1a4:	7eab      	ldrb	r3, [r5, #26]
     1a6:	079b      	lsls	r3, r3, #30
     1a8:	d452      	bmi.n	250 <_adc_interrupt_handler+0xd0>
     1aa:	07a3      	lsls	r3, r4, #30
     1ac:	d508      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
     1ae:	2302      	movs	r3, #2
     1b0:	682a      	ldr	r2, [r5, #0]
     1b2:	7613      	strb	r3, [r2, #24]
     1b4:	7eeb      	ldrb	r3, [r5, #27]
     1b6:	075b      	lsls	r3, r3, #29
     1b8:	d502      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
     1ba:	7eab      	ldrb	r3, [r5, #26]
     1bc:	075b      	lsls	r3, r3, #29
     1be:	d44b      	bmi.n	258 <_adc_interrupt_handler+0xd8>
     1c0:	bd70      	pop	{r4, r5, r6, pc}
     1c2:	2201      	movs	r2, #1
     1c4:	761a      	strb	r2, [r3, #24]
     1c6:	682a      	ldr	r2, [r5, #0]
     1c8:	7e53      	ldrb	r3, [r2, #25]
     1ca:	b25b      	sxtb	r3, r3
     1cc:	2b00      	cmp	r3, #0
     1ce:	db27      	blt.n	220 <_adc_interrupt_handler+0xa0>
     1d0:	2100      	movs	r1, #0
     1d2:	2900      	cmp	r1, #0
     1d4:	d1f7      	bne.n	1c6 <_adc_interrupt_handler+0x46>
     1d6:	6968      	ldr	r0, [r5, #20]
     1d8:	1c83      	adds	r3, r0, #2
     1da:	616b      	str	r3, [r5, #20]
     1dc:	8b53      	ldrh	r3, [r2, #26]
     1de:	b29b      	uxth	r3, r3
     1e0:	8003      	strh	r3, [r0, #0]
     1e2:	8b2b      	ldrh	r3, [r5, #24]
     1e4:	3b01      	subs	r3, #1
     1e6:	b29b      	uxth	r3, r3
     1e8:	832b      	strh	r3, [r5, #24]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d01e      	beq.n	22c <_adc_interrupt_handler+0xac>
     1ee:	7f6b      	ldrb	r3, [r5, #29]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d0cf      	beq.n	194 <_adc_interrupt_handler+0x14>
     1f4:	682e      	ldr	r6, [r5, #0]
     1f6:	7e72      	ldrb	r2, [r6, #25]
     1f8:	b252      	sxtb	r2, r2
     1fa:	2a00      	cmp	r2, #0
     1fc:	db12      	blt.n	224 <_adc_interrupt_handler+0xa4>
     1fe:	0008      	movs	r0, r1
     200:	2800      	cmp	r0, #0
     202:	d1f8      	bne.n	1f6 <_adc_interrupt_handler+0x76>
     204:	7b32      	ldrb	r2, [r6, #12]
     206:	2102      	movs	r1, #2
     208:	430a      	orrs	r2, r1
     20a:	b2d2      	uxtb	r2, r2
     20c:	7332      	strb	r2, [r6, #12]
     20e:	682a      	ldr	r2, [r5, #0]
     210:	7e52      	ldrb	r2, [r2, #25]
     212:	b252      	sxtb	r2, r2
     214:	2a00      	cmp	r2, #0
     216:	db07      	blt.n	228 <_adc_interrupt_handler+0xa8>
     218:	0002      	movs	r2, r0
     21a:	2a00      	cmp	r2, #0
     21c:	d1f7      	bne.n	20e <_adc_interrupt_handler+0x8e>
     21e:	e7b9      	b.n	194 <_adc_interrupt_handler+0x14>
     220:	2101      	movs	r1, #1
     222:	e7d6      	b.n	1d2 <_adc_interrupt_handler+0x52>
     224:	0018      	movs	r0, r3
     226:	e7eb      	b.n	200 <_adc_interrupt_handler+0x80>
     228:	001a      	movs	r2, r3
     22a:	e7f6      	b.n	21a <_adc_interrupt_handler+0x9a>
     22c:	2301      	movs	r3, #1
     22e:	682a      	ldr	r2, [r5, #0]
     230:	7593      	strb	r3, [r2, #22]
     232:	7f2b      	ldrb	r3, [r5, #28]
     234:	2b05      	cmp	r3, #5
     236:	d1ad      	bne.n	194 <_adc_interrupt_handler+0x14>
     238:	2300      	movs	r3, #0
     23a:	772b      	strb	r3, [r5, #28]
     23c:	7eeb      	ldrb	r3, [r5, #27]
     23e:	07db      	lsls	r3, r3, #31
     240:	d5a8      	bpl.n	194 <_adc_interrupt_handler+0x14>
     242:	7eab      	ldrb	r3, [r5, #26]
     244:	07db      	lsls	r3, r3, #31
     246:	d5a5      	bpl.n	194 <_adc_interrupt_handler+0x14>
     248:	0028      	movs	r0, r5
     24a:	68ab      	ldr	r3, [r5, #8]
     24c:	4798      	blx	r3
     24e:	e7a1      	b.n	194 <_adc_interrupt_handler+0x14>
     250:	0028      	movs	r0, r5
     252:	68eb      	ldr	r3, [r5, #12]
     254:	4798      	blx	r3
     256:	e7a8      	b.n	1aa <_adc_interrupt_handler+0x2a>
     258:	692b      	ldr	r3, [r5, #16]
     25a:	0028      	movs	r0, r5
     25c:	4798      	blx	r3
     25e:	e7af      	b.n	1c0 <_adc_interrupt_handler+0x40>
     260:	20000444 	.word	0x20000444

00000264 <ADC_Handler>:
     264:	b510      	push	{r4, lr}
     266:	2000      	movs	r0, #0
     268:	4b01      	ldr	r3, [pc, #4]	; (270 <ADC_Handler+0xc>)
     26a:	4798      	blx	r3
     26c:	bd10      	pop	{r4, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00000181 	.word	0x00000181

00000274 <extint_register_callback>:
     274:	2a00      	cmp	r2, #0
     276:	d001      	beq.n	27c <extint_register_callback+0x8>
     278:	2017      	movs	r0, #23
     27a:	4770      	bx	lr
     27c:	008b      	lsls	r3, r1, #2
     27e:	4a07      	ldr	r2, [pc, #28]	; (29c <extint_register_callback+0x28>)
     280:	589b      	ldr	r3, [r3, r2]
     282:	2b00      	cmp	r3, #0
     284:	d003      	beq.n	28e <extint_register_callback+0x1a>
     286:	4283      	cmp	r3, r0
     288:	d005      	beq.n	296 <extint_register_callback+0x22>
     28a:	201d      	movs	r0, #29
     28c:	e7f5      	b.n	27a <extint_register_callback+0x6>
     28e:	0089      	lsls	r1, r1, #2
     290:	5088      	str	r0, [r1, r2]
     292:	2000      	movs	r0, #0
     294:	e7f1      	b.n	27a <extint_register_callback+0x6>
     296:	2000      	movs	r0, #0
     298:	e7ef      	b.n	27a <extint_register_callback+0x6>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	2000044c 	.word	0x2000044c

000002a0 <EIC_Handler>:
     2a0:	b510      	push	{r4, lr}
     2a2:	2200      	movs	r2, #0
     2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <EIC_Handler+0x44>)
     2a6:	701a      	strb	r2, [r3, #0]
     2a8:	e005      	b.n	2b6 <EIC_Handler+0x16>
     2aa:	480f      	ldr	r0, [pc, #60]	; (2e8 <EIC_Handler+0x48>)
     2ac:	e00a      	b.n	2c4 <EIC_Handler+0x24>
     2ae:	4a0d      	ldr	r2, [pc, #52]	; (2e4 <EIC_Handler+0x44>)
     2b0:	7813      	ldrb	r3, [r2, #0]
     2b2:	3301      	adds	r3, #1
     2b4:	7013      	strb	r3, [r2, #0]
     2b6:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <EIC_Handler+0x44>)
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b0f      	cmp	r3, #15
     2bc:	d811      	bhi.n	2e2 <EIC_Handler+0x42>
     2be:	2b1f      	cmp	r3, #31
     2c0:	d9f3      	bls.n	2aa <EIC_Handler+0xa>
     2c2:	2000      	movs	r0, #0
     2c4:	211f      	movs	r1, #31
     2c6:	4019      	ands	r1, r3
     2c8:	2201      	movs	r2, #1
     2ca:	408a      	lsls	r2, r1
     2cc:	6901      	ldr	r1, [r0, #16]
     2ce:	4211      	tst	r1, r2
     2d0:	d0ed      	beq.n	2ae <EIC_Handler+0xe>
     2d2:	6102      	str	r2, [r0, #16]
     2d4:	009b      	lsls	r3, r3, #2
     2d6:	4a05      	ldr	r2, [pc, #20]	; (2ec <EIC_Handler+0x4c>)
     2d8:	589b      	ldr	r3, [r3, r2]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e7      	beq.n	2ae <EIC_Handler+0xe>
     2de:	4798      	blx	r3
     2e0:	e7e5      	b.n	2ae <EIC_Handler+0xe>
     2e2:	bd10      	pop	{r4, pc}
     2e4:	20000448 	.word	0x20000448
     2e8:	40001800 	.word	0x40001800
     2ec:	2000044c 	.word	0x2000044c

000002f0 <_extint_enable>:
     2f0:	2200      	movs	r2, #0
     2f2:	2a00      	cmp	r2, #0
     2f4:	d006      	beq.n	304 <_extint_enable+0x14>
     2f6:	2300      	movs	r3, #0
     2f8:	2b00      	cmp	r3, #0
     2fa:	d00b      	beq.n	314 <_extint_enable+0x24>
     2fc:	2300      	movs	r3, #0
     2fe:	2b00      	cmp	r3, #0
     300:	d1f9      	bne.n	2f6 <_extint_enable+0x6>
     302:	4770      	bx	lr
     304:	4908      	ldr	r1, [pc, #32]	; (328 <_extint_enable+0x38>)
     306:	780b      	ldrb	r3, [r1, #0]
     308:	2002      	movs	r0, #2
     30a:	4303      	orrs	r3, r0
     30c:	b2db      	uxtb	r3, r3
     30e:	700b      	strb	r3, [r1, #0]
     310:	3201      	adds	r2, #1
     312:	e7ee      	b.n	2f2 <_extint_enable+0x2>
     314:	4a04      	ldr	r2, [pc, #16]	; (328 <_extint_enable+0x38>)
     316:	7852      	ldrb	r2, [r2, #1]
     318:	b252      	sxtb	r2, r2
     31a:	2a00      	cmp	r2, #0
     31c:	db01      	blt.n	322 <_extint_enable+0x32>
     31e:	3301      	adds	r3, #1
     320:	e7ea      	b.n	2f8 <_extint_enable+0x8>
     322:	2301      	movs	r3, #1
     324:	e7eb      	b.n	2fe <_extint_enable+0xe>
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <_system_extint_init>:
     32c:	b500      	push	{lr}
     32e:	b083      	sub	sp, #12
     330:	4a1b      	ldr	r2, [pc, #108]	; (3a0 <_system_extint_init+0x74>)
     332:	6993      	ldr	r3, [r2, #24]
     334:	2140      	movs	r1, #64	; 0x40
     336:	430b      	orrs	r3, r1
     338:	6193      	str	r3, [r2, #24]
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	700b      	strb	r3, [r1, #0]
     340:	2005      	movs	r0, #5
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <_system_extint_init+0x78>)
     344:	4798      	blx	r3
     346:	2005      	movs	r0, #5
     348:	4b17      	ldr	r3, [pc, #92]	; (3a8 <_system_extint_init+0x7c>)
     34a:	4798      	blx	r3
     34c:	2200      	movs	r2, #0
     34e:	2a00      	cmp	r2, #0
     350:	d006      	beq.n	360 <_system_extint_init+0x34>
     352:	2300      	movs	r3, #0
     354:	2b00      	cmp	r3, #0
     356:	d00b      	beq.n	370 <_system_extint_init+0x44>
     358:	2300      	movs	r3, #0
     35a:	2b00      	cmp	r3, #0
     35c:	d1f9      	bne.n	352 <_system_extint_init+0x26>
     35e:	e016      	b.n	38e <_system_extint_init+0x62>
     360:	4912      	ldr	r1, [pc, #72]	; (3ac <_system_extint_init+0x80>)
     362:	780b      	ldrb	r3, [r1, #0]
     364:	2001      	movs	r0, #1
     366:	4303      	orrs	r3, r0
     368:	b2db      	uxtb	r3, r3
     36a:	700b      	strb	r3, [r1, #0]
     36c:	3201      	adds	r2, #1
     36e:	e7ee      	b.n	34e <_system_extint_init+0x22>
     370:	4a0e      	ldr	r2, [pc, #56]	; (3ac <_system_extint_init+0x80>)
     372:	7852      	ldrb	r2, [r2, #1]
     374:	b252      	sxtb	r2, r2
     376:	2a00      	cmp	r2, #0
     378:	db01      	blt.n	37e <_system_extint_init+0x52>
     37a:	3301      	adds	r3, #1
     37c:	e7ea      	b.n	354 <_system_extint_init+0x28>
     37e:	2301      	movs	r3, #1
     380:	e7eb      	b.n	35a <_system_extint_init+0x2e>
     382:	0099      	lsls	r1, r3, #2
     384:	2000      	movs	r0, #0
     386:	4a0a      	ldr	r2, [pc, #40]	; (3b0 <_system_extint_init+0x84>)
     388:	5088      	str	r0, [r1, r2]
     38a:	3301      	adds	r3, #1
     38c:	b2db      	uxtb	r3, r3
     38e:	2b0f      	cmp	r3, #15
     390:	d9f7      	bls.n	382 <_system_extint_init+0x56>
     392:	2210      	movs	r2, #16
     394:	4b07      	ldr	r3, [pc, #28]	; (3b4 <_system_extint_init+0x88>)
     396:	601a      	str	r2, [r3, #0]
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_system_extint_init+0x8c>)
     39a:	4798      	blx	r3
     39c:	b003      	add	sp, #12
     39e:	bd00      	pop	{pc}
     3a0:	40000400 	.word	0x40000400
     3a4:	00004c79 	.word	0x00004c79
     3a8:	00004bf1 	.word	0x00004bf1
     3ac:	40001800 	.word	0x40001800
     3b0:	2000044c 	.word	0x2000044c
     3b4:	e000e100 	.word	0xe000e100
     3b8:	000002f1 	.word	0x000002f1

000003bc <extint_chan_set_config>:
     3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3be:	b083      	sub	sp, #12
     3c0:	0005      	movs	r5, r0
     3c2:	000c      	movs	r4, r1
     3c4:	a901      	add	r1, sp, #4
     3c6:	2300      	movs	r3, #0
     3c8:	704b      	strb	r3, [r1, #1]
     3ca:	70cb      	strb	r3, [r1, #3]
     3cc:	7923      	ldrb	r3, [r4, #4]
     3ce:	700b      	strb	r3, [r1, #0]
     3d0:	7a23      	ldrb	r3, [r4, #8]
     3d2:	708b      	strb	r3, [r1, #2]
     3d4:	7820      	ldrb	r0, [r4, #0]
     3d6:	4b16      	ldr	r3, [pc, #88]	; (430 <extint_chan_set_config+0x74>)
     3d8:	4798      	blx	r3
     3da:	2d1f      	cmp	r5, #31
     3dc:	d920      	bls.n	420 <extint_chan_set_config+0x64>
     3de:	2000      	movs	r0, #0
     3e0:	2207      	movs	r2, #7
     3e2:	402a      	ands	r2, r5
     3e4:	0092      	lsls	r2, r2, #2
     3e6:	7ae3      	ldrb	r3, [r4, #11]
     3e8:	001e      	movs	r6, r3
     3ea:	7aa1      	ldrb	r1, [r4, #10]
     3ec:	2900      	cmp	r1, #0
     3ee:	d002      	beq.n	3f6 <extint_chan_set_config+0x3a>
     3f0:	2608      	movs	r6, #8
     3f2:	431e      	orrs	r6, r3
     3f4:	b2f6      	uxtb	r6, r6
     3f6:	08eb      	lsrs	r3, r5, #3
     3f8:	3306      	adds	r3, #6
     3fa:	009b      	lsls	r3, r3, #2
     3fc:	5819      	ldr	r1, [r3, r0]
     3fe:	270f      	movs	r7, #15
     400:	4097      	lsls	r7, r2
     402:	43b9      	bics	r1, r7
     404:	4096      	lsls	r6, r2
     406:	0032      	movs	r2, r6
     408:	430a      	orrs	r2, r1
     40a:	501a      	str	r2, [r3, r0]
     40c:	7a63      	ldrb	r3, [r4, #9]
     40e:	2b00      	cmp	r3, #0
     410:	d108      	bne.n	424 <extint_chan_set_config+0x68>
     412:	6943      	ldr	r3, [r0, #20]
     414:	2201      	movs	r2, #1
     416:	40aa      	lsls	r2, r5
     418:	4393      	bics	r3, r2
     41a:	6143      	str	r3, [r0, #20]
     41c:	b003      	add	sp, #12
     41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     420:	4804      	ldr	r0, [pc, #16]	; (434 <extint_chan_set_config+0x78>)
     422:	e7dd      	b.n	3e0 <extint_chan_set_config+0x24>
     424:	6943      	ldr	r3, [r0, #20]
     426:	2201      	movs	r2, #1
     428:	40aa      	lsls	r2, r5
     42a:	4313      	orrs	r3, r2
     42c:	6143      	str	r3, [r0, #20]
     42e:	e7f5      	b.n	41c <extint_chan_set_config+0x60>
     430:	00004db1 	.word	0x00004db1
     434:	40001800 	.word	0x40001800

00000438 <rtc_calendar_enable>:
     438:	6802      	ldr	r2, [r0, #0]
     43a:	7a93      	ldrb	r3, [r2, #10]
     43c:	b25b      	sxtb	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	db08      	blt.n	454 <rtc_calendar_enable+0x1c>
     442:	2300      	movs	r3, #0
     444:	2b00      	cmp	r3, #0
     446:	d1f8      	bne.n	43a <rtc_calendar_enable+0x2>
     448:	8813      	ldrh	r3, [r2, #0]
     44a:	2102      	movs	r1, #2
     44c:	430b      	orrs	r3, r1
     44e:	b29b      	uxth	r3, r3
     450:	8013      	strh	r3, [r2, #0]
     452:	4770      	bx	lr
     454:	2301      	movs	r3, #1
     456:	e7f5      	b.n	444 <rtc_calendar_enable+0xc>

00000458 <rtc_calendar_disable>:
     458:	6802      	ldr	r2, [r0, #0]
     45a:	7a93      	ldrb	r3, [r2, #10]
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	db0a      	blt.n	478 <rtc_calendar_disable+0x20>
     462:	2300      	movs	r3, #0
     464:	2b00      	cmp	r3, #0
     466:	d1f8      	bne.n	45a <rtc_calendar_disable+0x2>
     468:	33c1      	adds	r3, #193	; 0xc1
     46a:	7193      	strb	r3, [r2, #6]
     46c:	7213      	strb	r3, [r2, #8]
     46e:	8813      	ldrh	r3, [r2, #0]
     470:	2102      	movs	r1, #2
     472:	438b      	bics	r3, r1
     474:	8013      	strh	r3, [r2, #0]
     476:	4770      	bx	lr
     478:	2301      	movs	r3, #1
     47a:	e7f3      	b.n	464 <rtc_calendar_disable+0xc>

0000047c <rtc_calendar_reset>:
     47c:	b570      	push	{r4, r5, r6, lr}
     47e:	0004      	movs	r4, r0
     480:	6805      	ldr	r5, [r0, #0]
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <rtc_calendar_reset+0x2c>)
     484:	4798      	blx	r3
     486:	6823      	ldr	r3, [r4, #0]
     488:	7a9b      	ldrb	r3, [r3, #10]
     48a:	b25b      	sxtb	r3, r3
     48c:	2b00      	cmp	r3, #0
     48e:	db08      	blt.n	4a2 <rtc_calendar_reset+0x26>
     490:	2300      	movs	r3, #0
     492:	2b00      	cmp	r3, #0
     494:	d1f7      	bne.n	486 <rtc_calendar_reset+0xa>
     496:	882b      	ldrh	r3, [r5, #0]
     498:	2201      	movs	r2, #1
     49a:	4313      	orrs	r3, r2
     49c:	b29b      	uxth	r3, r3
     49e:	802b      	strh	r3, [r5, #0]
     4a0:	bd70      	pop	{r4, r5, r6, pc}
     4a2:	2301      	movs	r3, #1
     4a4:	e7f5      	b.n	492 <rtc_calendar_reset+0x16>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000459 	.word	0x00000459

000004ac <rtc_calendar_time_to_register_value>:
     4ac:	88cb      	ldrh	r3, [r1, #6]
     4ae:	88c2      	ldrh	r2, [r0, #6]
     4b0:	1a9b      	subs	r3, r3, r2
     4b2:	069b      	lsls	r3, r3, #26
     4b4:	794a      	ldrb	r2, [r1, #5]
     4b6:	0592      	lsls	r2, r2, #22
     4b8:	4313      	orrs	r3, r2
     4ba:	790a      	ldrb	r2, [r1, #4]
     4bc:	0452      	lsls	r2, r2, #17
     4be:	4313      	orrs	r3, r2
     4c0:	788a      	ldrb	r2, [r1, #2]
     4c2:	0312      	lsls	r2, r2, #12
     4c4:	4313      	orrs	r3, r2
     4c6:	7902      	ldrb	r2, [r0, #4]
     4c8:	2a00      	cmp	r2, #0
     4ca:	d105      	bne.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4cc:	78ca      	ldrb	r2, [r1, #3]
     4ce:	2a00      	cmp	r2, #0
     4d0:	d002      	beq.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4d2:	2280      	movs	r2, #128	; 0x80
     4d4:	0252      	lsls	r2, r2, #9
     4d6:	4313      	orrs	r3, r2
     4d8:	7848      	ldrb	r0, [r1, #1]
     4da:	0180      	lsls	r0, r0, #6
     4dc:	4303      	orrs	r3, r0
     4de:	7808      	ldrb	r0, [r1, #0]
     4e0:	4318      	orrs	r0, r3
     4e2:	4770      	bx	lr

000004e4 <rtc_calendar_register_value_to_time>:
     4e4:	b510      	push	{r4, lr}
     4e6:	0e8c      	lsrs	r4, r1, #26
     4e8:	88c3      	ldrh	r3, [r0, #6]
     4ea:	191b      	adds	r3, r3, r4
     4ec:	80d3      	strh	r3, [r2, #6]
     4ee:	0d8c      	lsrs	r4, r1, #22
     4f0:	230f      	movs	r3, #15
     4f2:	4023      	ands	r3, r4
     4f4:	7153      	strb	r3, [r2, #5]
     4f6:	0c4c      	lsrs	r4, r1, #17
     4f8:	231f      	movs	r3, #31
     4fa:	4023      	ands	r3, r4
     4fc:	7113      	strb	r3, [r2, #4]
     4fe:	7903      	ldrb	r3, [r0, #4]
     500:	2b00      	cmp	r3, #0
     502:	d110      	bne.n	526 <rtc_calendar_register_value_to_time+0x42>
     504:	0b08      	lsrs	r0, r1, #12
     506:	230f      	movs	r3, #15
     508:	4003      	ands	r3, r0
     50a:	7093      	strb	r3, [r2, #2]
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	025b      	lsls	r3, r3, #9
     510:	400b      	ands	r3, r1
     512:	1e58      	subs	r0, r3, #1
     514:	4183      	sbcs	r3, r0
     516:	70d3      	strb	r3, [r2, #3]
     518:	0988      	lsrs	r0, r1, #6
     51a:	233f      	movs	r3, #63	; 0x3f
     51c:	4018      	ands	r0, r3
     51e:	7050      	strb	r0, [r2, #1]
     520:	4019      	ands	r1, r3
     522:	7011      	strb	r1, [r2, #0]
     524:	bd10      	pop	{r4, pc}
     526:	0b08      	lsrs	r0, r1, #12
     528:	231f      	movs	r3, #31
     52a:	4003      	ands	r3, r0
     52c:	7093      	strb	r3, [r2, #2]
     52e:	e7f3      	b.n	518 <rtc_calendar_register_value_to_time+0x34>

00000530 <rtc_calendar_set_time>:
     530:	b510      	push	{r4, lr}
     532:	6804      	ldr	r4, [r0, #0]
     534:	4b06      	ldr	r3, [pc, #24]	; (550 <rtc_calendar_set_time+0x20>)
     536:	4798      	blx	r3
     538:	7aa3      	ldrb	r3, [r4, #10]
     53a:	b25b      	sxtb	r3, r3
     53c:	2b00      	cmp	r3, #0
     53e:	db04      	blt.n	54a <rtc_calendar_set_time+0x1a>
     540:	2300      	movs	r3, #0
     542:	2b00      	cmp	r3, #0
     544:	d1f8      	bne.n	538 <rtc_calendar_set_time+0x8>
     546:	6120      	str	r0, [r4, #16]
     548:	bd10      	pop	{r4, pc}
     54a:	2301      	movs	r3, #1
     54c:	e7f9      	b.n	542 <rtc_calendar_set_time+0x12>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	000004ad 	.word	0x000004ad

00000554 <rtc_calendar_get_time>:
     554:	b570      	push	{r4, r5, r6, lr}
     556:	000a      	movs	r2, r1
     558:	6803      	ldr	r3, [r0, #0]
     55a:	7944      	ldrb	r4, [r0, #5]
     55c:	2c00      	cmp	r4, #0
     55e:	d006      	beq.n	56e <rtc_calendar_get_time+0x1a>
     560:	8859      	ldrh	r1, [r3, #2]
     562:	0449      	lsls	r1, r1, #17
     564:	d510      	bpl.n	588 <rtc_calendar_get_time+0x34>
     566:	6919      	ldr	r1, [r3, #16]
     568:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <rtc_calendar_get_time+0x54>)
     56a:	4798      	blx	r3
     56c:	bd70      	pop	{r4, r5, r6, pc}
     56e:	490f      	ldr	r1, [pc, #60]	; (5ac <rtc_calendar_get_time+0x58>)
     570:	8059      	strh	r1, [r3, #2]
     572:	6801      	ldr	r1, [r0, #0]
     574:	7a89      	ldrb	r1, [r1, #10]
     576:	b249      	sxtb	r1, r1
     578:	2900      	cmp	r1, #0
     57a:	db03      	blt.n	584 <rtc_calendar_get_time+0x30>
     57c:	0021      	movs	r1, r4
     57e:	2900      	cmp	r1, #0
     580:	d1f7      	bne.n	572 <rtc_calendar_get_time+0x1e>
     582:	e7f0      	b.n	566 <rtc_calendar_get_time+0x12>
     584:	2101      	movs	r1, #1
     586:	e7fa      	b.n	57e <rtc_calendar_get_time+0x2a>
     588:	8859      	ldrh	r1, [r3, #2]
     58a:	4d09      	ldr	r5, [pc, #36]	; (5b0 <rtc_calendar_get_time+0x5c>)
     58c:	4329      	orrs	r1, r5
     58e:	b289      	uxth	r1, r1
     590:	8059      	strh	r1, [r3, #2]
     592:	6801      	ldr	r1, [r0, #0]
     594:	7a89      	ldrb	r1, [r1, #10]
     596:	b249      	sxtb	r1, r1
     598:	2900      	cmp	r1, #0
     59a:	db03      	blt.n	5a4 <rtc_calendar_get_time+0x50>
     59c:	2100      	movs	r1, #0
     59e:	2900      	cmp	r1, #0
     5a0:	d1f7      	bne.n	592 <rtc_calendar_get_time+0x3e>
     5a2:	e7e0      	b.n	566 <rtc_calendar_get_time+0x12>
     5a4:	0021      	movs	r1, r4
     5a6:	e7fa      	b.n	59e <rtc_calendar_get_time+0x4a>
     5a8:	000004e5 	.word	0x000004e5
     5ac:	ffff8000 	.word	0xffff8000
     5b0:	ffffc000 	.word	0xffffc000

000005b4 <rtc_calendar_set_alarm>:
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	000d      	movs	r5, r1
     5b8:	0014      	movs	r4, r2
     5ba:	6806      	ldr	r6, [r0, #0]
     5bc:	2a01      	cmp	r2, #1
     5be:	d901      	bls.n	5c4 <rtc_calendar_set_alarm+0x10>
     5c0:	2017      	movs	r0, #23
     5c2:	bd70      	pop	{r4, r5, r6, pc}
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <rtc_calendar_set_alarm+0x38>)
     5c6:	4798      	blx	r3
     5c8:	7ab3      	ldrb	r3, [r6, #10]
     5ca:	b25b      	sxtb	r3, r3
     5cc:	2b00      	cmp	r3, #0
     5ce:	db0a      	blt.n	5e6 <rtc_calendar_set_alarm+0x32>
     5d0:	2300      	movs	r3, #0
     5d2:	2b00      	cmp	r3, #0
     5d4:	d1f8      	bne.n	5c8 <rtc_calendar_set_alarm+0x14>
     5d6:	3403      	adds	r4, #3
     5d8:	00e4      	lsls	r4, r4, #3
     5da:	51a0      	str	r0, [r4, r6]
     5dc:	7a2b      	ldrb	r3, [r5, #8]
     5de:	1934      	adds	r4, r6, r4
     5e0:	7123      	strb	r3, [r4, #4]
     5e2:	2000      	movs	r0, #0
     5e4:	e7ed      	b.n	5c2 <rtc_calendar_set_alarm+0xe>
     5e6:	2301      	movs	r3, #1
     5e8:	e7f3      	b.n	5d2 <rtc_calendar_set_alarm+0x1e>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	000004ad 	.word	0x000004ad

000005f0 <_rtc_calendar_set_config>:
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	0005      	movs	r5, r0
     5f4:	000e      	movs	r6, r1
     5f6:	6801      	ldr	r1, [r0, #0]
     5f8:	8832      	ldrh	r2, [r6, #0]
     5fa:	2308      	movs	r3, #8
     5fc:	4313      	orrs	r3, r2
     5fe:	b29b      	uxth	r3, r3
     600:	7930      	ldrb	r0, [r6, #4]
     602:	2800      	cmp	r0, #0
     604:	d102      	bne.n	60c <_rtc_calendar_set_config+0x1c>
     606:	2348      	movs	r3, #72	; 0x48
     608:	4313      	orrs	r3, r2
     60a:	b29b      	uxth	r3, r3
     60c:	78b2      	ldrb	r2, [r6, #2]
     60e:	2a00      	cmp	r2, #0
     610:	d002      	beq.n	618 <_rtc_calendar_set_config+0x28>
     612:	2280      	movs	r2, #128	; 0x80
     614:	4313      	orrs	r3, r2
     616:	b29b      	uxth	r3, r3
     618:	800b      	strh	r3, [r1, #0]
     61a:	78f3      	ldrb	r3, [r6, #3]
     61c:	2b00      	cmp	r3, #0
     61e:	d004      	beq.n	62a <_rtc_calendar_set_config+0x3a>
     620:	884b      	ldrh	r3, [r1, #2]
     622:	2280      	movs	r2, #128	; 0x80
     624:	01d2      	lsls	r2, r2, #7
     626:	4313      	orrs	r3, r2
     628:	804b      	strh	r3, [r1, #2]
     62a:	2400      	movs	r4, #0
     62c:	e00a      	b.n	644 <_rtc_calendar_set_config+0x54>
     62e:	00a3      	lsls	r3, r4, #2
     630:	191b      	adds	r3, r3, r4
     632:	0059      	lsls	r1, r3, #1
     634:	3108      	adds	r1, #8
     636:	1871      	adds	r1, r6, r1
     638:	0022      	movs	r2, r4
     63a:	0028      	movs	r0, r5
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <_rtc_calendar_set_config+0x5c>)
     63e:	4798      	blx	r3
     640:	3401      	adds	r4, #1
     642:	b2e4      	uxtb	r4, r4
     644:	2c00      	cmp	r4, #0
     646:	d0f2      	beq.n	62e <_rtc_calendar_set_config+0x3e>
     648:	bd70      	pop	{r4, r5, r6, pc}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	000005b5 	.word	0x000005b5

00000650 <rtc_calendar_init>:
     650:	b530      	push	{r4, r5, lr}
     652:	b083      	sub	sp, #12
     654:	0004      	movs	r4, r0
     656:	0015      	movs	r5, r2
     658:	6001      	str	r1, [r0, #0]
     65a:	4a0f      	ldr	r2, [pc, #60]	; (698 <rtc_calendar_init+0x48>)
     65c:	6993      	ldr	r3, [r2, #24]
     65e:	2120      	movs	r1, #32
     660:	430b      	orrs	r3, r1
     662:	6193      	str	r3, [r2, #24]
     664:	a901      	add	r1, sp, #4
     666:	2302      	movs	r3, #2
     668:	700b      	strb	r3, [r1, #0]
     66a:	2004      	movs	r0, #4
     66c:	4b0b      	ldr	r3, [pc, #44]	; (69c <rtc_calendar_init+0x4c>)
     66e:	4798      	blx	r3
     670:	2004      	movs	r0, #4
     672:	4b0b      	ldr	r3, [pc, #44]	; (6a0 <rtc_calendar_init+0x50>)
     674:	4798      	blx	r3
     676:	0020      	movs	r0, r4
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <rtc_calendar_init+0x54>)
     67a:	4798      	blx	r3
     67c:	792b      	ldrb	r3, [r5, #4]
     67e:	7123      	strb	r3, [r4, #4]
     680:	78eb      	ldrb	r3, [r5, #3]
     682:	7163      	strb	r3, [r4, #5]
     684:	88eb      	ldrh	r3, [r5, #6]
     686:	80e3      	strh	r3, [r4, #6]
     688:	4b07      	ldr	r3, [pc, #28]	; (6a8 <rtc_calendar_init+0x58>)
     68a:	601c      	str	r4, [r3, #0]
     68c:	0029      	movs	r1, r5
     68e:	0020      	movs	r0, r4
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <rtc_calendar_init+0x5c>)
     692:	4798      	blx	r3
     694:	b003      	add	sp, #12
     696:	bd30      	pop	{r4, r5, pc}
     698:	40000400 	.word	0x40000400
     69c:	00004c79 	.word	0x00004c79
     6a0:	00004bf1 	.word	0x00004bf1
     6a4:	0000047d 	.word	0x0000047d
     6a8:	2000048c 	.word	0x2000048c
     6ac:	000005f1 	.word	0x000005f1

000006b0 <rtc_calendar_frequency_correction>:
     6b0:	6802      	ldr	r2, [r0, #0]
     6b2:	17c8      	asrs	r0, r1, #31
     6b4:	180b      	adds	r3, r1, r0
     6b6:	4043      	eors	r3, r0
     6b8:	2b7f      	cmp	r3, #127	; 0x7f
     6ba:	dd01      	ble.n	6c0 <rtc_calendar_frequency_correction+0x10>
     6bc:	2017      	movs	r0, #23
     6be:	4770      	bx	lr
     6c0:	0018      	movs	r0, r3
     6c2:	2900      	cmp	r1, #0
     6c4:	db0a      	blt.n	6dc <rtc_calendar_frequency_correction+0x2c>
     6c6:	7a93      	ldrb	r3, [r2, #10]
     6c8:	b25b      	sxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	db09      	blt.n	6e2 <rtc_calendar_frequency_correction+0x32>
     6ce:	2300      	movs	r3, #0
     6d0:	2b00      	cmp	r3, #0
     6d2:	d1f8      	bne.n	6c6 <rtc_calendar_frequency_correction+0x16>
     6d4:	b2c0      	uxtb	r0, r0
     6d6:	7310      	strb	r0, [r2, #12]
     6d8:	2000      	movs	r0, #0
     6da:	e7f0      	b.n	6be <rtc_calendar_frequency_correction+0xe>
     6dc:	2080      	movs	r0, #128	; 0x80
     6de:	4318      	orrs	r0, r3
     6e0:	e7f1      	b.n	6c6 <rtc_calendar_frequency_correction+0x16>
     6e2:	2301      	movs	r3, #1
     6e4:	e7f4      	b.n	6d0 <rtc_calendar_frequency_correction+0x20>

000006e6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e8:	46de      	mov	lr, fp
     6ea:	4657      	mov	r7, sl
     6ec:	464e      	mov	r6, r9
     6ee:	4645      	mov	r5, r8
     6f0:	b5e0      	push	{r5, r6, r7, lr}
     6f2:	b085      	sub	sp, #20
     6f4:	4689      	mov	r9, r1
     6f6:	0016      	movs	r6, r2
     6f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6fa:	2200      	movs	r2, #0
     6fc:	2300      	movs	r3, #0
     6fe:	2100      	movs	r1, #0
     700:	468b      	mov	fp, r1
     702:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     704:	253f      	movs	r5, #63	; 0x3f
     706:	9600      	str	r6, [sp, #0]
     708:	9701      	str	r7, [sp, #4]
     70a:	9002      	str	r0, [sp, #8]
     70c:	4649      	mov	r1, r9
     70e:	9103      	str	r1, [sp, #12]
     710:	e011      	b.n	736 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     712:	2120      	movs	r1, #32
     714:	1b49      	subs	r1, r1, r5
     716:	2400      	movs	r4, #0
     718:	3401      	adds	r4, #1
     71a:	40cc      	lsrs	r4, r1
     71c:	e013      	b.n	746 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     71e:	9800      	ldr	r0, [sp, #0]
     720:	9901      	ldr	r1, [sp, #4]
     722:	1a12      	subs	r2, r2, r0
     724:	418b      	sbcs	r3, r1
			q |= bit_shift;
     726:	4659      	mov	r1, fp
     728:	4660      	mov	r0, ip
     72a:	4301      	orrs	r1, r0
     72c:	468b      	mov	fp, r1
     72e:	4651      	mov	r1, sl
     730:	4321      	orrs	r1, r4
     732:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     734:	3d01      	subs	r5, #1
     736:	2d00      	cmp	r5, #0
     738:	db23      	blt.n	782 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     73a:	2120      	movs	r1, #32
     73c:	4249      	negs	r1, r1
     73e:	1869      	adds	r1, r5, r1
     740:	d4e7      	bmi.n	712 <long_division+0x2c>
     742:	2401      	movs	r4, #1
     744:	408c      	lsls	r4, r1
     746:	2101      	movs	r1, #1
     748:	40a9      	lsls	r1, r5
     74a:	468c      	mov	ip, r1
		r = r << 1;
     74c:	1892      	adds	r2, r2, r2
     74e:	415b      	adcs	r3, r3
     750:	0010      	movs	r0, r2
     752:	0019      	movs	r1, r3
		if (n & bit_shift) {
     754:	9e02      	ldr	r6, [sp, #8]
     756:	4667      	mov	r7, ip
     758:	403e      	ands	r6, r7
     75a:	46b1      	mov	r9, r6
     75c:	9e03      	ldr	r6, [sp, #12]
     75e:	4026      	ands	r6, r4
     760:	46b0      	mov	r8, r6
     762:	464e      	mov	r6, r9
     764:	4647      	mov	r7, r8
     766:	433e      	orrs	r6, r7
     768:	d003      	beq.n	772 <long_division+0x8c>
			r |= 0x01;
     76a:	2601      	movs	r6, #1
     76c:	4306      	orrs	r6, r0
     76e:	0032      	movs	r2, r6
     770:	000b      	movs	r3, r1
		if (r >= d) {
     772:	9800      	ldr	r0, [sp, #0]
     774:	9901      	ldr	r1, [sp, #4]
     776:	4299      	cmp	r1, r3
     778:	d8dc      	bhi.n	734 <long_division+0x4e>
     77a:	d1d0      	bne.n	71e <long_division+0x38>
     77c:	4290      	cmp	r0, r2
     77e:	d8d9      	bhi.n	734 <long_division+0x4e>
     780:	e7cd      	b.n	71e <long_division+0x38>
		}
	}

	return q;
}
     782:	4658      	mov	r0, fp
     784:	4651      	mov	r1, sl
     786:	b005      	add	sp, #20
     788:	bc3c      	pop	{r2, r3, r4, r5}
     78a:	4690      	mov	r8, r2
     78c:	4699      	mov	r9, r3
     78e:	46a2      	mov	sl, r4
     790:	46ab      	mov	fp, r5
     792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000794 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     794:	0849      	lsrs	r1, r1, #1
     796:	4281      	cmp	r1, r0
     798:	d201      	bcs.n	79e <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     79a:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     79c:	4770      	bx	lr
     79e:	2300      	movs	r3, #0
     7a0:	e002      	b.n	7a8 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     7a2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     7a4:	3301      	adds	r3, #1
     7a6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     7a8:	4281      	cmp	r1, r0
     7aa:	d2fa      	bcs.n	7a2 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     7ac:	3b01      	subs	r3, #1
     7ae:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     7b0:	2bff      	cmp	r3, #255	; 0xff
     7b2:	d901      	bls.n	7b8 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7b4:	2040      	movs	r0, #64	; 0x40
     7b6:	e7f1      	b.n	79c <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     7b8:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     7ba:	2000      	movs	r0, #0
     7bc:	e7ee      	b.n	79c <_sercom_get_sync_baud_val+0x8>
	...

000007c0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	000c      	movs	r4, r1
     7c6:	0015      	movs	r5, r2
     7c8:	aa06      	add	r2, sp, #24
     7ca:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     7cc:	0002      	movs	r2, r0
     7ce:	434a      	muls	r2, r1
     7d0:	42a2      	cmp	r2, r4
     7d2:	d902      	bls.n	7da <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7d4:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     7d6:	b002      	add	sp, #8
     7d8:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     7da:	2b00      	cmp	r3, #0
     7dc:	d114      	bne.n	808 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     7de:	0002      	movs	r2, r0
     7e0:	0008      	movs	r0, r1
     7e2:	2100      	movs	r1, #0
     7e4:	4e1b      	ldr	r6, [pc, #108]	; (854 <_sercom_get_async_baud_val+0x94>)
     7e6:	47b0      	blx	r6
     7e8:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     7ea:	0022      	movs	r2, r4
     7ec:	2300      	movs	r3, #0
     7ee:	2000      	movs	r0, #0
     7f0:	4c19      	ldr	r4, [pc, #100]	; (858 <_sercom_get_async_baud_val+0x98>)
     7f2:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     7f4:	2200      	movs	r2, #0
     7f6:	2301      	movs	r3, #1
     7f8:	1a12      	subs	r2, r2, r0
     7fa:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7fc:	0c10      	lsrs	r0, r2, #16
     7fe:	041b      	lsls	r3, r3, #16
     800:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     802:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     804:	2000      	movs	r0, #0
     806:	e7e6      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     808:	2b01      	cmp	r3, #1
     80a:	d001      	beq.n	810 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     80c:	2000      	movs	r0, #0
     80e:	e7f8      	b.n	802 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     810:	000a      	movs	r2, r1
     812:	2300      	movs	r3, #0
     814:	2100      	movs	r1, #0
     816:	4e0f      	ldr	r6, [pc, #60]	; (854 <_sercom_get_async_baud_val+0x94>)
     818:	47b0      	blx	r6
     81a:	0002      	movs	r2, r0
     81c:	000b      	movs	r3, r1
     81e:	9200      	str	r2, [sp, #0]
     820:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     822:	0020      	movs	r0, r4
     824:	2100      	movs	r1, #0
     826:	4e0c      	ldr	r6, [pc, #48]	; (858 <_sercom_get_async_baud_val+0x98>)
     828:	47b0      	blx	r6
     82a:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     82c:	2380      	movs	r3, #128	; 0x80
     82e:	019b      	lsls	r3, r3, #6
     830:	4298      	cmp	r0, r3
     832:	d901      	bls.n	838 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     834:	2040      	movs	r0, #64	; 0x40
     836:	e7ce      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     838:	0f61      	lsrs	r1, r4, #29
     83a:	00e0      	lsls	r0, r4, #3
     83c:	9a00      	ldr	r2, [sp, #0]
     83e:	9b01      	ldr	r3, [sp, #4]
     840:	4c05      	ldr	r4, [pc, #20]	; (858 <_sercom_get_async_baud_val+0x98>)
     842:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     844:	b2c0      	uxtb	r0, r0
     846:	00f3      	lsls	r3, r6, #3
     848:	b2db      	uxtb	r3, r3
     84a:	1ac0      	subs	r0, r0, r3
     84c:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     84e:	0340      	lsls	r0, r0, #13
     850:	4330      	orrs	r0, r6
     852:	e7d6      	b.n	802 <_sercom_get_async_baud_val+0x42>
     854:	00005431 	.word	0x00005431
     858:	000006e7 	.word	0x000006e7

0000085c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     85c:	b510      	push	{r4, lr}
     85e:	b082      	sub	sp, #8
     860:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <sercom_set_gclk_generator+0x40>)
     864:	781b      	ldrb	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d007      	beq.n	87a <sercom_set_gclk_generator+0x1e>
     86a:	2900      	cmp	r1, #0
     86c:	d105      	bne.n	87a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     86e:	4b0b      	ldr	r3, [pc, #44]	; (89c <sercom_set_gclk_generator+0x40>)
     870:	785b      	ldrb	r3, [r3, #1]
     872:	4283      	cmp	r3, r0
     874:	d010      	beq.n	898 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     876:	201d      	movs	r0, #29
     878:	e00c      	b.n	894 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     87a:	a901      	add	r1, sp, #4
     87c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     87e:	2013      	movs	r0, #19
     880:	4b07      	ldr	r3, [pc, #28]	; (8a0 <sercom_set_gclk_generator+0x44>)
     882:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     884:	2013      	movs	r0, #19
     886:	4b07      	ldr	r3, [pc, #28]	; (8a4 <sercom_set_gclk_generator+0x48>)
     888:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     88a:	4b04      	ldr	r3, [pc, #16]	; (89c <sercom_set_gclk_generator+0x40>)
     88c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     88e:	2201      	movs	r2, #1
     890:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     892:	2000      	movs	r0, #0
}
     894:	b002      	add	sp, #8
     896:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     898:	2000      	movs	r0, #0
     89a:	e7fb      	b.n	894 <sercom_set_gclk_generator+0x38>
     89c:	20000090 	.word	0x20000090
     8a0:	00004c79 	.word	0x00004c79
     8a4:	00004bf1 	.word	0x00004bf1

000008a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8a8:	4b40      	ldr	r3, [pc, #256]	; (9ac <_sercom_get_default_pad+0x104>)
     8aa:	4298      	cmp	r0, r3
     8ac:	d031      	beq.n	912 <_sercom_get_default_pad+0x6a>
     8ae:	d90a      	bls.n	8c6 <_sercom_get_default_pad+0x1e>
     8b0:	4b3f      	ldr	r3, [pc, #252]	; (9b0 <_sercom_get_default_pad+0x108>)
     8b2:	4298      	cmp	r0, r3
     8b4:	d04d      	beq.n	952 <_sercom_get_default_pad+0xaa>
     8b6:	4b3f      	ldr	r3, [pc, #252]	; (9b4 <_sercom_get_default_pad+0x10c>)
     8b8:	4298      	cmp	r0, r3
     8ba:	d05a      	beq.n	972 <_sercom_get_default_pad+0xca>
     8bc:	4b3e      	ldr	r3, [pc, #248]	; (9b8 <_sercom_get_default_pad+0x110>)
     8be:	4298      	cmp	r0, r3
     8c0:	d037      	beq.n	932 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8c2:	2000      	movs	r0, #0
}
     8c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8c6:	4b3d      	ldr	r3, [pc, #244]	; (9bc <_sercom_get_default_pad+0x114>)
     8c8:	4298      	cmp	r0, r3
     8ca:	d00c      	beq.n	8e6 <_sercom_get_default_pad+0x3e>
     8cc:	4b3c      	ldr	r3, [pc, #240]	; (9c0 <_sercom_get_default_pad+0x118>)
     8ce:	4298      	cmp	r0, r3
     8d0:	d1f7      	bne.n	8c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8d2:	2901      	cmp	r1, #1
     8d4:	d05f      	beq.n	996 <_sercom_get_default_pad+0xee>
     8d6:	2900      	cmp	r1, #0
     8d8:	d015      	beq.n	906 <_sercom_get_default_pad+0x5e>
     8da:	2902      	cmp	r1, #2
     8dc:	d015      	beq.n	90a <_sercom_get_default_pad+0x62>
     8de:	2903      	cmp	r1, #3
     8e0:	d015      	beq.n	90e <_sercom_get_default_pad+0x66>
	return 0;
     8e2:	2000      	movs	r0, #0
     8e4:	e7ee      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e6:	2901      	cmp	r1, #1
     8e8:	d053      	beq.n	992 <_sercom_get_default_pad+0xea>
     8ea:	2900      	cmp	r1, #0
     8ec:	d005      	beq.n	8fa <_sercom_get_default_pad+0x52>
     8ee:	2902      	cmp	r1, #2
     8f0:	d005      	beq.n	8fe <_sercom_get_default_pad+0x56>
     8f2:	2903      	cmp	r1, #3
     8f4:	d005      	beq.n	902 <_sercom_get_default_pad+0x5a>
	return 0;
     8f6:	2000      	movs	r0, #0
     8f8:	e7e4      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fa:	4832      	ldr	r0, [pc, #200]	; (9c4 <_sercom_get_default_pad+0x11c>)
     8fc:	e7e2      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     8fe:	4832      	ldr	r0, [pc, #200]	; (9c8 <_sercom_get_default_pad+0x120>)
     900:	e7e0      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     902:	4832      	ldr	r0, [pc, #200]	; (9cc <_sercom_get_default_pad+0x124>)
     904:	e7de      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     906:	2003      	movs	r0, #3
     908:	e7dc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90a:	4831      	ldr	r0, [pc, #196]	; (9d0 <_sercom_get_default_pad+0x128>)
     90c:	e7da      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90e:	4831      	ldr	r0, [pc, #196]	; (9d4 <_sercom_get_default_pad+0x12c>)
     910:	e7d8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     912:	2901      	cmp	r1, #1
     914:	d041      	beq.n	99a <_sercom_get_default_pad+0xf2>
     916:	2900      	cmp	r1, #0
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0x7e>
     91a:	2902      	cmp	r1, #2
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0x82>
     91e:	2903      	cmp	r1, #3
     920:	d005      	beq.n	92e <_sercom_get_default_pad+0x86>
	return 0;
     922:	2000      	movs	r0, #0
     924:	e7ce      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     926:	482c      	ldr	r0, [pc, #176]	; (9d8 <_sercom_get_default_pad+0x130>)
     928:	e7cc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92a:	482c      	ldr	r0, [pc, #176]	; (9dc <_sercom_get_default_pad+0x134>)
     92c:	e7ca      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92e:	482c      	ldr	r0, [pc, #176]	; (9e0 <_sercom_get_default_pad+0x138>)
     930:	e7c8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     932:	2901      	cmp	r1, #1
     934:	d033      	beq.n	99e <_sercom_get_default_pad+0xf6>
     936:	2900      	cmp	r1, #0
     938:	d005      	beq.n	946 <_sercom_get_default_pad+0x9e>
     93a:	2902      	cmp	r1, #2
     93c:	d005      	beq.n	94a <_sercom_get_default_pad+0xa2>
     93e:	2903      	cmp	r1, #3
     940:	d005      	beq.n	94e <_sercom_get_default_pad+0xa6>
	return 0;
     942:	2000      	movs	r0, #0
     944:	e7be      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     946:	4827      	ldr	r0, [pc, #156]	; (9e4 <_sercom_get_default_pad+0x13c>)
     948:	e7bc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94a:	4827      	ldr	r0, [pc, #156]	; (9e8 <_sercom_get_default_pad+0x140>)
     94c:	e7ba      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94e:	4827      	ldr	r0, [pc, #156]	; (9ec <_sercom_get_default_pad+0x144>)
     950:	e7b8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     952:	2901      	cmp	r1, #1
     954:	d025      	beq.n	9a2 <_sercom_get_default_pad+0xfa>
     956:	2900      	cmp	r1, #0
     958:	d005      	beq.n	966 <_sercom_get_default_pad+0xbe>
     95a:	2902      	cmp	r1, #2
     95c:	d005      	beq.n	96a <_sercom_get_default_pad+0xc2>
     95e:	2903      	cmp	r1, #3
     960:	d005      	beq.n	96e <_sercom_get_default_pad+0xc6>
	return 0;
     962:	2000      	movs	r0, #0
     964:	e7ae      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     966:	4822      	ldr	r0, [pc, #136]	; (9f0 <_sercom_get_default_pad+0x148>)
     968:	e7ac      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96a:	4822      	ldr	r0, [pc, #136]	; (9f4 <_sercom_get_default_pad+0x14c>)
     96c:	e7aa      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96e:	4822      	ldr	r0, [pc, #136]	; (9f8 <_sercom_get_default_pad+0x150>)
     970:	e7a8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     972:	2901      	cmp	r1, #1
     974:	d017      	beq.n	9a6 <_sercom_get_default_pad+0xfe>
     976:	2900      	cmp	r1, #0
     978:	d005      	beq.n	986 <_sercom_get_default_pad+0xde>
     97a:	2902      	cmp	r1, #2
     97c:	d005      	beq.n	98a <_sercom_get_default_pad+0xe2>
     97e:	2903      	cmp	r1, #3
     980:	d005      	beq.n	98e <_sercom_get_default_pad+0xe6>
	return 0;
     982:	2000      	movs	r0, #0
     984:	e79e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     986:	481d      	ldr	r0, [pc, #116]	; (9fc <_sercom_get_default_pad+0x154>)
     988:	e79c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98a:	481d      	ldr	r0, [pc, #116]	; (a00 <_sercom_get_default_pad+0x158>)
     98c:	e79a      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98e:	481d      	ldr	r0, [pc, #116]	; (a04 <_sercom_get_default_pad+0x15c>)
     990:	e798      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     992:	481d      	ldr	r0, [pc, #116]	; (a08 <_sercom_get_default_pad+0x160>)
     994:	e796      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     996:	481d      	ldr	r0, [pc, #116]	; (a0c <_sercom_get_default_pad+0x164>)
     998:	e794      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99a:	481d      	ldr	r0, [pc, #116]	; (a10 <_sercom_get_default_pad+0x168>)
     99c:	e792      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99e:	481d      	ldr	r0, [pc, #116]	; (a14 <_sercom_get_default_pad+0x16c>)
     9a0:	e790      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a2:	481d      	ldr	r0, [pc, #116]	; (a18 <_sercom_get_default_pad+0x170>)
     9a4:	e78e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a6:	481d      	ldr	r0, [pc, #116]	; (a1c <_sercom_get_default_pad+0x174>)
     9a8:	e78c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	42001000 	.word	0x42001000
     9b0:	42001800 	.word	0x42001800
     9b4:	42001c00 	.word	0x42001c00
     9b8:	42001400 	.word	0x42001400
     9bc:	42000800 	.word	0x42000800
     9c0:	42000c00 	.word	0x42000c00
     9c4:	00040003 	.word	0x00040003
     9c8:	00060003 	.word	0x00060003
     9cc:	00070003 	.word	0x00070003
     9d0:	001e0003 	.word	0x001e0003
     9d4:	001f0003 	.word	0x001f0003
     9d8:	00080003 	.word	0x00080003
     9dc:	000a0003 	.word	0x000a0003
     9e0:	000b0003 	.word	0x000b0003
     9e4:	00100003 	.word	0x00100003
     9e8:	00120003 	.word	0x00120003
     9ec:	00130003 	.word	0x00130003
     9f0:	000c0003 	.word	0x000c0003
     9f4:	000e0003 	.word	0x000e0003
     9f8:	000f0003 	.word	0x000f0003
     9fc:	00160003 	.word	0x00160003
     a00:	00180003 	.word	0x00180003
     a04:	00190003 	.word	0x00190003
     a08:	00050003 	.word	0x00050003
     a0c:	00010003 	.word	0x00010003
     a10:	00090003 	.word	0x00090003
     a14:	00110003 	.word	0x00110003
     a18:	000d0003 	.word	0x000d0003
     a1c:	00170003 	.word	0x00170003

00000a20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a20:	b530      	push	{r4, r5, lr}
     a22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a24:	4c0a      	ldr	r4, [pc, #40]	; (a50 <_sercom_get_sercom_inst_index+0x30>)
     a26:	466b      	mov	r3, sp
     a28:	0022      	movs	r2, r4
     a2a:	ca32      	ldmia	r2!, {r1, r4, r5}
     a2c:	c332      	stmia	r3!, {r1, r4, r5}
     a2e:	ca32      	ldmia	r2!, {r1, r4, r5}
     a30:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a32:	2300      	movs	r3, #0
     a34:	2b05      	cmp	r3, #5
     a36:	d808      	bhi.n	a4a <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a38:	009a      	lsls	r2, r3, #2
     a3a:	4669      	mov	r1, sp
     a3c:	5852      	ldr	r2, [r2, r1]
     a3e:	4282      	cmp	r2, r0
     a40:	d001      	beq.n	a46 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a42:	3301      	adds	r3, #1
     a44:	e7f6      	b.n	a34 <_sercom_get_sercom_inst_index+0x14>
			return i;
     a46:	b2d8      	uxtb	r0, r3
     a48:	e000      	b.n	a4c <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a4a:	2000      	movs	r0, #0
}
     a4c:	b007      	add	sp, #28
     a4e:	bd30      	pop	{r4, r5, pc}
     a50:	00005d50 	.word	0x00005d50

00000a54 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a54:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a56:	2202      	movs	r2, #2
     a58:	761a      	strb	r2, [r3, #24]
}
     a5a:	4770      	bx	lr

00000a5c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	b087      	sub	sp, #28
     a60:	0007      	movs	r7, r0
     a62:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a64:	6806      	ldr	r6, [r0, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a66:	ab05      	add	r3, sp, #20
     a68:	2280      	movs	r2, #128	; 0x80
     a6a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a6c:	2200      	movs	r2, #0
     a6e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a70:	2101      	movs	r1, #1
     a72:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     a74:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     a76:	782b      	ldrb	r3, [r5, #0]
     a78:	2b00      	cmp	r3, #0
     a7a:	d101      	bne.n	a80 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a7c:	ab05      	add	r3, sp, #20
     a7e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     a80:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a82:	9301      	str	r3, [sp, #4]
     a84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     a86:	9302      	str	r3, [sp, #8]
     a88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     a8a:	9303      	str	r3, [sp, #12]
     a8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     a8e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a90:	2400      	movs	r4, #0
     a92:	e006      	b.n	aa2 <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a94:	0021      	movs	r1, r4
     a96:	0030      	movs	r0, r6
     a98:	4b3d      	ldr	r3, [pc, #244]	; (b90 <_spi_set_config+0x134>)
     a9a:	4798      	blx	r3
     a9c:	e008      	b.n	ab0 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     a9e:	3401      	adds	r4, #1
     aa0:	b2e4      	uxtb	r4, r4
     aa2:	2c03      	cmp	r4, #3
     aa4:	d80d      	bhi.n	ac2 <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aa6:	00a3      	lsls	r3, r4, #2
     aa8:	aa01      	add	r2, sp, #4
     aaa:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     aac:	2800      	cmp	r0, #0
     aae:	d0f1      	beq.n	a94 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     ab0:	1c43      	adds	r3, r0, #1
     ab2:	d0f4      	beq.n	a9e <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ab4:	a905      	add	r1, sp, #20
     ab6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ab8:	0c00      	lsrs	r0, r0, #16
     aba:	b2c0      	uxtb	r0, r0
     abc:	4b35      	ldr	r3, [pc, #212]	; (b94 <_spi_set_config+0x138>)
     abe:	4798      	blx	r3
     ac0:	e7ed      	b.n	a9e <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     ac2:	782b      	ldrb	r3, [r5, #0]
     ac4:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     ac6:	7c2b      	ldrb	r3, [r5, #16]
     ac8:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     aca:	7cab      	ldrb	r3, [r5, #18]
     acc:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     ace:	7d2b      	ldrb	r3, [r5, #20]
     ad0:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     ad2:	2200      	movs	r2, #0
     ad4:	466b      	mov	r3, sp
     ad6:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     ad8:	782b      	ldrb	r3, [r5, #0]
     ada:	2b01      	cmp	r3, #1
     adc:	d014      	beq.n	b08 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     ade:	782b      	ldrb	r3, [r5, #0]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d127      	bne.n	b34 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     ae4:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     ae6:	8baa      	ldrh	r2, [r5, #28]
     ae8:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     aea:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     aec:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     aee:	7fef      	ldrb	r7, [r5, #31]
     af0:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     af2:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     af4:	4320      	orrs	r0, r4
     af6:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     af8:	2020      	movs	r0, #32
     afa:	5c28      	ldrb	r0, [r5, r0]
     afc:	2800      	cmp	r0, #0
     afe:	d01b      	beq.n	b38 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     b00:	2140      	movs	r1, #64	; 0x40
     b02:	4311      	orrs	r1, r2
     b04:	b289      	uxth	r1, r1
     b06:	e017      	b.n	b38 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b08:	6838      	ldr	r0, [r7, #0]
     b0a:	4b23      	ldr	r3, [pc, #140]	; (b98 <_spi_set_config+0x13c>)
     b0c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b0e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b10:	b2c0      	uxtb	r0, r0
     b12:	4b22      	ldr	r3, [pc, #136]	; (b9c <_spi_set_config+0x140>)
     b14:	4798      	blx	r3
     b16:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     b18:	466b      	mov	r3, sp
     b1a:	1c9a      	adds	r2, r3, #2
     b1c:	69a8      	ldr	r0, [r5, #24]
     b1e:	4b20      	ldr	r3, [pc, #128]	; (ba0 <_spi_set_config+0x144>)
     b20:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     b22:	2800      	cmp	r0, #0
     b24:	d001      	beq.n	b2a <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     b26:	2017      	movs	r0, #23
     b28:	e030      	b.n	b8c <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     b2a:	466b      	mov	r3, sp
     b2c:	3302      	adds	r3, #2
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	7333      	strb	r3, [r6, #12]
     b32:	e7d4      	b.n	ade <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     b34:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     b36:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     b38:	686a      	ldr	r2, [r5, #4]
     b3a:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     b3c:	68aa      	ldr	r2, [r5, #8]
     b3e:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     b40:	68ea      	ldr	r2, [r5, #12]
     b42:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     b44:	7c2a      	ldrb	r2, [r5, #16]
     b46:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b48:	7c69      	ldrb	r1, [r5, #17]
     b4a:	2900      	cmp	r1, #0
     b4c:	d103      	bne.n	b56 <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b4e:	4915      	ldr	r1, [pc, #84]	; (ba4 <_spi_set_config+0x148>)
     b50:	7889      	ldrb	r1, [r1, #2]
     b52:	0789      	lsls	r1, r1, #30
     b54:	d501      	bpl.n	b5a <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b56:	2180      	movs	r1, #128	; 0x80
     b58:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     b5a:	7ca9      	ldrb	r1, [r5, #18]
     b5c:	2900      	cmp	r1, #0
     b5e:	d002      	beq.n	b66 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b60:	2180      	movs	r1, #128	; 0x80
     b62:	0289      	lsls	r1, r1, #10
     b64:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     b66:	7ce9      	ldrb	r1, [r5, #19]
     b68:	2900      	cmp	r1, #0
     b6a:	d002      	beq.n	b72 <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     b6c:	2180      	movs	r1, #128	; 0x80
     b6e:	0089      	lsls	r1, r1, #2
     b70:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     b72:	7d29      	ldrb	r1, [r5, #20]
     b74:	2900      	cmp	r1, #0
     b76:	d002      	beq.n	b7e <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b78:	2180      	movs	r1, #128	; 0x80
     b7a:	0189      	lsls	r1, r1, #6
     b7c:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     b7e:	6831      	ldr	r1, [r6, #0]
     b80:	430b      	orrs	r3, r1
     b82:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     b84:	6873      	ldr	r3, [r6, #4]
     b86:	431a      	orrs	r2, r3
     b88:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     b8a:	2000      	movs	r0, #0
}
     b8c:	b007      	add	sp, #28
     b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b90:	000008a9 	.word	0x000008a9
     b94:	00004db1 	.word	0x00004db1
     b98:	00000a21 	.word	0x00000a21
     b9c:	00004c95 	.word	0x00004c95
     ba0:	00000795 	.word	0x00000795
     ba4:	41002000 	.word	0x41002000

00000ba8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
     baa:	b085      	sub	sp, #20
     bac:	0005      	movs	r5, r0
     bae:	000c      	movs	r4, r1
     bb0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     bb2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     bb4:	680b      	ldr	r3, [r1, #0]
     bb6:	079b      	lsls	r3, r3, #30
     bb8:	d502      	bpl.n	bc0 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     bba:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     bbc:	b005      	add	sp, #20
     bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     bc0:	680b      	ldr	r3, [r1, #0]
     bc2:	07db      	lsls	r3, r3, #31
     bc4:	d501      	bpl.n	bca <spi_init+0x22>
		return STATUS_BUSY;
     bc6:	2005      	movs	r0, #5
     bc8:	e7f8      	b.n	bbc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bca:	0008      	movs	r0, r1
     bcc:	4b28      	ldr	r3, [pc, #160]	; (c70 <spi_init+0xc8>)
     bce:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     bd0:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bd2:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bd4:	2301      	movs	r3, #1
     bd6:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     bd8:	4a26      	ldr	r2, [pc, #152]	; (c74 <spi_init+0xcc>)
     bda:	6a11      	ldr	r1, [r2, #32]
     bdc:	430b      	orrs	r3, r1
     bde:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     be0:	2724      	movs	r7, #36	; 0x24
     be2:	5df3      	ldrb	r3, [r6, r7]
     be4:	a903      	add	r1, sp, #12
     be6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     be8:	b2c3      	uxtb	r3, r0
     bea:	9301      	str	r3, [sp, #4]
     bec:	0018      	movs	r0, r3
     bee:	4b22      	ldr	r3, [pc, #136]	; (c78 <spi_init+0xd0>)
     bf0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bf2:	9801      	ldr	r0, [sp, #4]
     bf4:	4b21      	ldr	r3, [pc, #132]	; (c7c <spi_init+0xd4>)
     bf6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bf8:	5df0      	ldrb	r0, [r6, r7]
     bfa:	2100      	movs	r1, #0
     bfc:	4b20      	ldr	r3, [pc, #128]	; (c80 <spi_init+0xd8>)
     bfe:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     c00:	7833      	ldrb	r3, [r6, #0]
     c02:	2b01      	cmp	r3, #1
     c04:	d008      	beq.n	c18 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     c06:	7833      	ldrb	r3, [r6, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d103      	bne.n	c14 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     c0c:	6823      	ldr	r3, [r4, #0]
     c0e:	2208      	movs	r2, #8
     c10:	4313      	orrs	r3, r2
     c12:	6023      	str	r3, [r4, #0]
{
     c14:	2300      	movs	r3, #0
     c16:	e00b      	b.n	c30 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     c18:	6823      	ldr	r3, [r4, #0]
     c1a:	220c      	movs	r2, #12
     c1c:	4313      	orrs	r3, r2
     c1e:	6023      	str	r3, [r4, #0]
     c20:	e7f1      	b.n	c06 <spi_init+0x5e>
		module->callback[i]        = NULL;
     c22:	1c9a      	adds	r2, r3, #2
     c24:	0092      	lsls	r2, r2, #2
     c26:	18aa      	adds	r2, r5, r2
     c28:	2100      	movs	r1, #0
     c2a:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     c2c:	3301      	adds	r3, #1
     c2e:	b2db      	uxtb	r3, r3
     c30:	2b06      	cmp	r3, #6
     c32:	d9f6      	bls.n	c22 <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     c34:	2200      	movs	r2, #0
     c36:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     c38:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     c3a:	2300      	movs	r3, #0
     c3c:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     c3e:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     c40:	3236      	adds	r2, #54	; 0x36
     c42:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     c44:	3201      	adds	r2, #1
     c46:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     c48:	3201      	adds	r2, #1
     c4a:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     c4c:	3a35      	subs	r2, #53	; 0x35
     c4e:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     c50:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     c52:	6828      	ldr	r0, [r5, #0]
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <spi_init+0xc8>)
     c56:	4798      	blx	r3
     c58:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     c5a:	490a      	ldr	r1, [pc, #40]	; (c84 <spi_init+0xdc>)
     c5c:	4b0a      	ldr	r3, [pc, #40]	; (c88 <spi_init+0xe0>)
     c5e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c60:	00a4      	lsls	r4, r4, #2
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <spi_init+0xe4>)
     c64:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     c66:	0031      	movs	r1, r6
     c68:	0028      	movs	r0, r5
     c6a:	4b09      	ldr	r3, [pc, #36]	; (c90 <spi_init+0xe8>)
     c6c:	4798      	blx	r3
     c6e:	e7a5      	b.n	bbc <spi_init+0x14>
     c70:	00000a21 	.word	0x00000a21
     c74:	40000400 	.word	0x40000400
     c78:	00004c79 	.word	0x00004c79
     c7c:	00004bf1 	.word	0x00004bf1
     c80:	0000085d 	.word	0x0000085d
     c84:	00001369 	.word	0x00001369
     c88:	000045bd 	.word	0x000045bd
     c8c:	20000a08 	.word	0x20000a08
     c90:	00000a5d 	.word	0x00000a5d

00000c94 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c96:	0004      	movs	r4, r0
     c98:	000e      	movs	r6, r1
     c9a:	0017      	movs	r7, r2
     c9c:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     c9e:	2338      	movs	r3, #56	; 0x38
     ca0:	5cc3      	ldrb	r3, [r0, r3]
     ca2:	2b05      	cmp	r3, #5
     ca4:	d06d      	beq.n	d82 <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     ca6:	2a00      	cmp	r2, #0
     ca8:	d101      	bne.n	cae <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     caa:	2217      	movs	r2, #23
     cac:	e06a      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     cae:	79c3      	ldrb	r3, [r0, #7]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d101      	bne.n	cb8 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     cb4:	221c      	movs	r2, #28
     cb6:	e065      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     cb8:	7943      	ldrb	r3, [r0, #5]
     cba:	2b00      	cmp	r3, #0
     cbc:	d103      	bne.n	cc6 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cbe:	6803      	ldr	r3, [r0, #0]
     cc0:	7e1b      	ldrb	r3, [r3, #24]
     cc2:	079b      	lsls	r3, r3, #30
     cc4:	d401      	bmi.n	cca <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     cc6:	2000      	movs	r0, #0
     cc8:	e037      	b.n	d3a <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     cca:	4b2f      	ldr	r3, [pc, #188]	; (d88 <spi_read_buffer_wait+0xf4>)
     ccc:	4798      	blx	r3
     cce:	e7fa      	b.n	cc6 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cd0:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     cd2:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     cd4:	07d2      	lsls	r2, r2, #31
     cd6:	d5fb      	bpl.n	cd0 <spi_read_buffer_wait+0x3c>
     cd8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     cda:	07d2      	lsls	r2, r2, #31
     cdc:	d534      	bpl.n	d48 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     cde:	05ea      	lsls	r2, r5, #23
     ce0:	0dd2      	lsrs	r2, r2, #23
     ce2:	629a      	str	r2, [r3, #40]	; 0x28
     ce4:	e030      	b.n	d48 <spi_read_buffer_wait+0xb4>
     ce6:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ce8:	4a28      	ldr	r2, [pc, #160]	; (d8c <spi_read_buffer_wait+0xf8>)
     cea:	4293      	cmp	r3, r2
     cec:	d805      	bhi.n	cfa <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cee:	6822      	ldr	r2, [r4, #0]
     cf0:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     cf2:	0752      	lsls	r2, r2, #29
     cf4:	d401      	bmi.n	cfa <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     cf6:	3301      	adds	r3, #1
     cf8:	e7f6      	b.n	ce8 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     cfa:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cfc:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     cfe:	0792      	lsls	r2, r2, #30
     d00:	d404      	bmi.n	d0c <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d02:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     d04:	075b      	lsls	r3, r3, #29
     d06:	d422      	bmi.n	d4e <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     d08:	2212      	movs	r2, #18
     d0a:	e03b      	b.n	d84 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     d0c:	0020      	movs	r0, r4
     d0e:	4b1e      	ldr	r3, [pc, #120]	; (d88 <spi_read_buffer_wait+0xf4>)
     d10:	4798      	blx	r3
				return STATUS_ABORTED;
     d12:	2204      	movs	r2, #4
     d14:	e036      	b.n	d84 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     d16:	2200      	movs	r2, #0
     d18:	e026      	b.n	d68 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d1a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d1c:	05ff      	lsls	r7, r7, #23
     d1e:	0dff      	lsrs	r7, r7, #23
     d20:	e001      	b.n	d26 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     d22:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     d24:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     d26:	2a00      	cmp	r2, #0
     d28:	d12c      	bne.n	d84 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     d2a:	1c43      	adds	r3, r0, #1
     d2c:	b29b      	uxth	r3, r3
     d2e:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d30:	79a2      	ldrb	r2, [r4, #6]
     d32:	2a01      	cmp	r2, #1
     d34:	d01e      	beq.n	d74 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     d36:	0018      	movs	r0, r3
     d38:	000f      	movs	r7, r1
	while (length--) {
     d3a:	1e79      	subs	r1, r7, #1
     d3c:	b289      	uxth	r1, r1
     d3e:	2f00      	cmp	r7, #0
     d40:	d01d      	beq.n	d7e <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     d42:	7963      	ldrb	r3, [r4, #5]
     d44:	2b01      	cmp	r3, #1
     d46:	d0c3      	beq.n	cd0 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     d48:	7963      	ldrb	r3, [r4, #5]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d0cb      	beq.n	ce6 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d4e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d50:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     d52:	0752      	lsls	r2, r2, #29
     d54:	d5fb      	bpl.n	d4e <spi_read_buffer_wait+0xba>
     d56:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     d58:	0752      	lsls	r2, r2, #29
     d5a:	d5e2      	bpl.n	d22 <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d5c:	8b5a      	ldrh	r2, [r3, #26]
     d5e:	0752      	lsls	r2, r2, #29
     d60:	d5d9      	bpl.n	d16 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d62:	2204      	movs	r2, #4
     d64:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     d66:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d68:	79a7      	ldrb	r7, [r4, #6]
     d6a:	2f01      	cmp	r7, #1
     d6c:	d0d5      	beq.n	d1a <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d70:	b2ff      	uxtb	r7, r7
     d72:	e7d8      	b.n	d26 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     d74:	3002      	adds	r0, #2
     d76:	0a3f      	lsrs	r7, r7, #8
     d78:	54f7      	strb	r7, [r6, r3]
     d7a:	b283      	uxth	r3, r0
     d7c:	e7db      	b.n	d36 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     d7e:	2200      	movs	r2, #0
     d80:	e000      	b.n	d84 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     d82:	2205      	movs	r2, #5
}
     d84:	0010      	movs	r0, r2
     d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d88:	00000a55 	.word	0x00000a55
     d8c:	00002710 	.word	0x00002710

00000d90 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     d90:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d92:	7943      	ldrb	r3, [r0, #5]
     d94:	2b01      	cmp	r3, #1
     d96:	d001      	beq.n	d9c <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     d98:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     d9a:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     d9c:	7a03      	ldrb	r3, [r0, #8]
     d9e:	2b00      	cmp	r3, #0
     da0:	d16c      	bne.n	e7c <spi_select_slave+0xec>
		if (select) {
     da2:	2a00      	cmp	r2, #0
     da4:	d058      	beq.n	e58 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     da6:	784b      	ldrb	r3, [r1, #1]
     da8:	2b00      	cmp	r3, #0
     daa:	d043      	beq.n	e34 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dac:	6803      	ldr	r3, [r0, #0]
     dae:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     db0:	07db      	lsls	r3, r3, #31
     db2:	d411      	bmi.n	dd8 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     db4:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     db6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     db8:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     dba:	2900      	cmp	r1, #0
     dbc:	d10a      	bne.n	dd4 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     dbe:	01db      	lsls	r3, r3, #7
     dc0:	4931      	ldr	r1, [pc, #196]	; (e88 <spi_select_slave+0xf8>)
     dc2:	468c      	mov	ip, r1
     dc4:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dc6:	211f      	movs	r1, #31
     dc8:	4011      	ands	r1, r2
     dca:	2201      	movs	r2, #1
     dcc:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     dce:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     dd0:	2005      	movs	r0, #5
     dd2:	e7e2      	b.n	d9a <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
     dd4:	2300      	movs	r3, #0
     dd6:	e7f6      	b.n	dc6 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     dd8:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     dda:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     ddc:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     dde:	2c00      	cmp	r4, #0
     de0:	d104      	bne.n	dec <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     de2:	01db      	lsls	r3, r3, #7
     de4:	4c28      	ldr	r4, [pc, #160]	; (e88 <spi_select_slave+0xf8>)
     de6:	46a4      	mov	ip, r4
     de8:	4463      	add	r3, ip
     dea:	e000      	b.n	dee <spi_select_slave+0x5e>
		return NULL;
     dec:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dee:	241f      	movs	r4, #31
     df0:	4014      	ands	r4, r2
     df2:	2201      	movs	r2, #1
     df4:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     df6:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     df8:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     dfa:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dfc:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     dfe:	07c9      	lsls	r1, r1, #31
     e00:	d500      	bpl.n	e04 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e02:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     e04:	79c3      	ldrb	r3, [r0, #7]
     e06:	2b00      	cmp	r3, #0
     e08:	d13a      	bne.n	e80 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e0a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e0c:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     e0e:	0752      	lsls	r2, r2, #29
     e10:	d5fb      	bpl.n	e0a <spi_select_slave+0x7a>
     e12:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     e14:	0752      	lsls	r2, r2, #29
     e16:	d535      	bpl.n	e84 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e18:	8b5a      	ldrh	r2, [r3, #26]
     e1a:	0752      	lsls	r2, r2, #29
     e1c:	d501      	bpl.n	e22 <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     e1e:	2204      	movs	r2, #4
     e20:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e22:	7982      	ldrb	r2, [r0, #6]
     e24:	2a01      	cmp	r2, #1
     e26:	d002      	beq.n	e2e <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     e2a:	2000      	movs	r0, #0
     e2c:	e7b5      	b.n	d9a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e30:	2000      	movs	r0, #0
     e32:	e7b2      	b.n	d9a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     e34:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e36:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e38:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e3a:	2900      	cmp	r1, #0
     e3c:	d10a      	bne.n	e54 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     e3e:	01db      	lsls	r3, r3, #7
     e40:	4911      	ldr	r1, [pc, #68]	; (e88 <spi_select_slave+0xf8>)
     e42:	468c      	mov	ip, r1
     e44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e46:	211f      	movs	r1, #31
     e48:	4011      	ands	r1, r2
     e4a:	2201      	movs	r2, #1
     e4c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     e4e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     e50:	2000      	movs	r0, #0
     e52:	e7a2      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e54:	2300      	movs	r3, #0
     e56:	e7f6      	b.n	e46 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     e58:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e5a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e5c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e5e:	2900      	cmp	r1, #0
     e60:	d10a      	bne.n	e78 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     e62:	01db      	lsls	r3, r3, #7
     e64:	4908      	ldr	r1, [pc, #32]	; (e88 <spi_select_slave+0xf8>)
     e66:	468c      	mov	ip, r1
     e68:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e6a:	211f      	movs	r1, #31
     e6c:	4011      	ands	r1, r2
     e6e:	2201      	movs	r2, #1
     e70:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     e72:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     e74:	2000      	movs	r0, #0
     e76:	e790      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e78:	2300      	movs	r3, #0
     e7a:	e7f6      	b.n	e6a <spi_select_slave+0xda>
     e7c:	2000      	movs	r0, #0
     e7e:	e78c      	b.n	d9a <spi_select_slave+0xa>
     e80:	2000      	movs	r0, #0
     e82:	e78a      	b.n	d9a <spi_select_slave+0xa>
     e84:	2000      	movs	r0, #0
     e86:	e788      	b.n	d9a <spi_select_slave+0xa>
     e88:	41004400 	.word	0x41004400

00000e8c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8e:	46d6      	mov	lr, sl
     e90:	464f      	mov	r7, r9
     e92:	4646      	mov	r6, r8
     e94:	b5c0      	push	{r6, r7, lr}
     e96:	b082      	sub	sp, #8
     e98:	0004      	movs	r4, r0
     e9a:	468a      	mov	sl, r1
     e9c:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e9e:	2338      	movs	r3, #56	; 0x38
     ea0:	5cc3      	ldrb	r3, [r0, r3]
     ea2:	2b05      	cmp	r3, #5
     ea4:	d100      	bne.n	ea8 <spi_write_buffer_wait+0x1c>
     ea6:	e0d8      	b.n	105a <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     ea8:	2a00      	cmp	r2, #0
     eaa:	d101      	bne.n	eb0 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     eac:	2017      	movs	r0, #23
     eae:	e0d5      	b.n	105c <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     eb0:	7943      	ldrb	r3, [r0, #5]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d103      	bne.n	ebe <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     eb6:	6803      	ldr	r3, [r0, #0]
     eb8:	7e1b      	ldrb	r3, [r3, #24]
     eba:	079b      	lsls	r3, r3, #30
     ebc:	d402      	bmi.n	ec4 <spi_write_buffer_wait+0x38>
     ebe:	46bc      	mov	ip, r7
     ec0:	2600      	movs	r6, #0
     ec2:	e025      	b.n	f10 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     ec4:	4b6a      	ldr	r3, [pc, #424]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ec6:	4798      	blx	r3
     ec8:	e7f9      	b.n	ebe <spi_write_buffer_wait+0x32>
     eca:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ecc:	4a69      	ldr	r2, [pc, #420]	; (1074 <spi_write_buffer_wait+0x1e8>)
     ece:	4293      	cmp	r3, r2
     ed0:	d805      	bhi.n	ede <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ed2:	6822      	ldr	r2, [r4, #0]
     ed4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     ed6:	07d2      	lsls	r2, r2, #31
     ed8:	d401      	bmi.n	ede <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     eda:	3301      	adds	r3, #1
     edc:	e7f6      	b.n	ecc <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ede:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ee0:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     ee2:	0792      	lsls	r2, r2, #30
     ee4:	d404      	bmi.n	ef0 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ee6:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     ee8:	07db      	lsls	r3, r3, #31
     eea:	d418      	bmi.n	f1e <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     eec:	2012      	movs	r0, #18
     eee:	e0b5      	b.n	105c <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     ef0:	0020      	movs	r0, r4
     ef2:	4b5f      	ldr	r3, [pc, #380]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ef4:	4798      	blx	r3
				return STATUS_ABORTED;
     ef6:	2004      	movs	r0, #4
     ef8:	e0b0      	b.n	105c <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     efa:	3602      	adds	r6, #2
     efc:	b2b6      	uxth	r6, r6
     efe:	4652      	mov	r2, sl
     f00:	5dd2      	ldrb	r2, [r2, r7]
     f02:	0212      	lsls	r2, r2, #8
     f04:	4302      	orrs	r2, r0
     f06:	e017      	b.n	f38 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     f08:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     f0a:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     f0c:	2b00      	cmp	r3, #0
     f0e:	d11a      	bne.n	f46 <spi_write_buffer_wait+0xba>
	while (length--) {
     f10:	1e79      	subs	r1, r7, #1
     f12:	b289      	uxth	r1, r1
     f14:	2f00      	cmp	r7, #0
     f16:	d06c      	beq.n	ff2 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     f18:	7963      	ldrb	r3, [r4, #5]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d0d5      	beq.n	eca <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f1e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f20:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     f22:	07d2      	lsls	r2, r2, #31
     f24:	d5fb      	bpl.n	f1e <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     f26:	1c77      	adds	r7, r6, #1
     f28:	b2bf      	uxth	r7, r7
     f2a:	4652      	mov	r2, sl
     f2c:	5d90      	ldrb	r0, [r2, r6]
     f2e:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f30:	79a5      	ldrb	r5, [r4, #6]
     f32:	2d01      	cmp	r5, #1
     f34:	d0e1      	beq.n	efa <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     f36:	003e      	movs	r6, r7
     f38:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     f3a:	07f8      	lsls	r0, r7, #31
     f3c:	d5e4      	bpl.n	f08 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f3e:	05d2      	lsls	r2, r2, #23
     f40:	0dd2      	lsrs	r2, r2, #23
     f42:	629a      	str	r2, [r3, #40]	; 0x28
     f44:	e7e0      	b.n	f08 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     f46:	7963      	ldrb	r3, [r4, #5]
     f48:	2b00      	cmp	r3, #0
     f4a:	d040      	beq.n	fce <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f4c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f4e:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     f50:	0752      	lsls	r2, r2, #29
     f52:	d5fb      	bpl.n	f4c <spi_write_buffer_wait+0xc0>
     f54:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f56:	0752      	lsls	r2, r2, #29
     f58:	d508      	bpl.n	f6c <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f5a:	8b5a      	ldrh	r2, [r3, #26]
     f5c:	0752      	lsls	r2, r2, #29
     f5e:	d501      	bpl.n	f64 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f60:	2204      	movs	r2, #4
     f62:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f64:	79a2      	ldrb	r2, [r4, #6]
     f66:	2a01      	cmp	r2, #1
     f68:	d041      	beq.n	fee <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     f6c:	4660      	mov	r0, ip
     f6e:	3801      	subs	r0, #1
     f70:	b283      	uxth	r3, r0
     f72:	469c      	mov	ip, r3
     f74:	000f      	movs	r7, r1
     f76:	e7cb      	b.n	f10 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
     f78:	3602      	adds	r6, #2
     f7a:	4655      	mov	r5, sl
     f7c:	5c2f      	ldrb	r7, [r5, r0]
     f7e:	023f      	lsls	r7, r7, #8
     f80:	4640      	mov	r0, r8
     f82:	4307      	orrs	r7, r0
     f84:	b2b0      	uxth	r0, r6
     f86:	e01b      	b.n	fc0 <spi_write_buffer_wait+0x134>
						length--;
     f88:	3901      	subs	r1, #1
     f8a:	b289      	uxth	r1, r1
     f8c:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f8e:	6822      	ldr	r2, [r4, #0]
     f90:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     f92:	0752      	lsls	r2, r2, #29
     f94:	d41d      	bmi.n	fd2 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f96:	3301      	adds	r3, #1
     f98:	4a36      	ldr	r2, [pc, #216]	; (1074 <spi_write_buffer_wait+0x1e8>)
     f9a:	4293      	cmp	r3, r2
     f9c:	d819      	bhi.n	fd2 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
     f9e:	2900      	cmp	r1, #0
     fa0:	d0f5      	beq.n	f8e <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fa2:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fa4:	7e17      	ldrb	r7, [r2, #24]
     fa6:	07f8      	lsls	r0, r7, #31
     fa8:	d5f1      	bpl.n	f8e <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
     faa:	1c70      	adds	r0, r6, #1
     fac:	b280      	uxth	r0, r0
     fae:	4655      	mov	r5, sl
     fb0:	5dad      	ldrb	r5, [r5, r6]
     fb2:	46a8      	mov	r8, r5
     fb4:	466f      	mov	r7, sp
     fb6:	80fd      	strh	r5, [r7, #6]
     fb8:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fba:	79a5      	ldrb	r5, [r4, #6]
     fbc:	2d01      	cmp	r5, #1
     fbe:	d0db      	beq.n	f78 <spi_write_buffer_wait+0xec>
     fc0:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     fc2:	07f5      	lsls	r5, r6, #31
     fc4:	d5e0      	bpl.n	f88 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fc6:	05ff      	lsls	r7, r7, #23
     fc8:	0dff      	lsrs	r7, r7, #23
     fca:	6297      	str	r7, [r2, #40]	; 0x28
     fcc:	e7dc      	b.n	f88 <spi_write_buffer_wait+0xfc>
     fce:	2300      	movs	r3, #0
     fd0:	e7e2      	b.n	f98 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fd2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     fd4:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
     fd6:	0792      	lsls	r2, r2, #30
     fd8:	d404      	bmi.n	fe4 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fda:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     fdc:	075b      	lsls	r3, r3, #29
     fde:	d4b5      	bmi.n	f4c <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
     fe0:	2012      	movs	r0, #18
     fe2:	e03b      	b.n	105c <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
     fe4:	0020      	movs	r0, r4
     fe6:	4b22      	ldr	r3, [pc, #136]	; (1070 <spi_write_buffer_wait+0x1e4>)
     fe8:	4798      	blx	r3
					return STATUS_ABORTED;
     fea:	2004      	movs	r0, #4
     fec:	e036      	b.n	105c <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ff0:	e7bc      	b.n	f6c <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     ff2:	7962      	ldrb	r2, [r4, #5]
     ff4:	2a01      	cmp	r2, #1
     ff6:	d006      	beq.n	1006 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     ff8:	2a00      	cmp	r2, #0
     ffa:	d135      	bne.n	1068 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
     ffc:	79e3      	ldrb	r3, [r4, #7]
     ffe:	2b00      	cmp	r3, #0
    1000:	d11a      	bne.n	1038 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1002:	2000      	movs	r0, #0
    1004:	e02a      	b.n	105c <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1006:	6823      	ldr	r3, [r4, #0]
    1008:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    100a:	079b      	lsls	r3, r3, #30
    100c:	d5fb      	bpl.n	1006 <spi_write_buffer_wait+0x17a>
    100e:	e7f3      	b.n	ff8 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1010:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1012:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1014:	0752      	lsls	r2, r2, #29
    1016:	d529      	bpl.n	106c <spi_write_buffer_wait+0x1e0>
    1018:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    101a:	0752      	lsls	r2, r2, #29
    101c:	d508      	bpl.n	1030 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    101e:	8b5a      	ldrh	r2, [r3, #26]
    1020:	0752      	lsls	r2, r2, #29
    1022:	d501      	bpl.n	1028 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1024:	2204      	movs	r2, #4
    1026:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1028:	79a2      	ldrb	r2, [r4, #6]
    102a:	2a01      	cmp	r2, #1
    102c:	d011      	beq.n	1052 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    1030:	4660      	mov	r0, ip
    1032:	3801      	subs	r0, #1
    1034:	b283      	uxth	r3, r0
    1036:	469c      	mov	ip, r3
			while (flush_length) {
    1038:	4663      	mov	r3, ip
    103a:	2b00      	cmp	r3, #0
    103c:	d00b      	beq.n	1056 <spi_write_buffer_wait+0x1ca>
    103e:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1040:	4a0c      	ldr	r2, [pc, #48]	; (1074 <spi_write_buffer_wait+0x1e8>)
    1042:	4293      	cmp	r3, r2
    1044:	d8e4      	bhi.n	1010 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1046:	6822      	ldr	r2, [r4, #0]
    1048:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    104a:	0752      	lsls	r2, r2, #29
    104c:	d4e0      	bmi.n	1010 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    104e:	3301      	adds	r3, #1
    1050:	e7f6      	b.n	1040 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1054:	e7ec      	b.n	1030 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1056:	2000      	movs	r0, #0
    1058:	e000      	b.n	105c <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    105a:	2005      	movs	r0, #5
}
    105c:	b002      	add	sp, #8
    105e:	bc1c      	pop	{r2, r3, r4}
    1060:	4690      	mov	r8, r2
    1062:	4699      	mov	r9, r3
    1064:	46a2      	mov	sl, r4
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1068:	2000      	movs	r0, #0
    106a:	e7f7      	b.n	105c <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    106c:	2012      	movs	r0, #18
    106e:	e7f5      	b.n	105c <spi_write_buffer_wait+0x1d0>
    1070:	00000a55 	.word	0x00000a55
    1074:	00002710 	.word	0x00002710

00001078 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1078:	b5f0      	push	{r4, r5, r6, r7, lr}
    107a:	46de      	mov	lr, fp
    107c:	4657      	mov	r7, sl
    107e:	464e      	mov	r6, r9
    1080:	4645      	mov	r5, r8
    1082:	b5e0      	push	{r5, r6, r7, lr}
    1084:	b085      	sub	sp, #20
    1086:	0004      	movs	r4, r0
    1088:	9101      	str	r1, [sp, #4]
    108a:	9203      	str	r2, [sp, #12]
    108c:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    108e:	2338      	movs	r3, #56	; 0x38
    1090:	5cc3      	ldrb	r3, [r0, r3]
    1092:	2b05      	cmp	r3, #5
    1094:	d100      	bne.n	1098 <spi_transceive_buffer_wait+0x20>
    1096:	e112      	b.n	12be <spi_transceive_buffer_wait+0x246>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1098:	2e00      	cmp	r6, #0
    109a:	d101      	bne.n	10a0 <spi_transceive_buffer_wait+0x28>
		return STATUS_ERR_INVALID_ARG;
    109c:	2217      	movs	r2, #23
    109e:	e10f      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
	}

	if (!(module->receiver_enabled)) {
    10a0:	79c3      	ldrb	r3, [r0, #7]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d101      	bne.n	10aa <spi_transceive_buffer_wait+0x32>
		return STATUS_ERR_DENIED;
    10a6:	221c      	movs	r2, #28
    10a8:	e10a      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    10aa:	7943      	ldrb	r3, [r0, #5]
    10ac:	2b00      	cmp	r3, #0
    10ae:	d103      	bne.n	10b8 <spi_transceive_buffer_wait+0x40>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    10b0:	6803      	ldr	r3, [r0, #0]
    10b2:	7e1b      	ldrb	r3, [r3, #24]
    10b4:	079b      	lsls	r3, r3, #30
    10b6:	d404      	bmi.n	10c2 <spi_transceive_buffer_wait+0x4a>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    10b8:	46b4      	mov	ip, r6
    10ba:	2300      	movs	r3, #0
    10bc:	4698      	mov	r8, r3
    10be:	2100      	movs	r1, #0
    10c0:	e075      	b.n	11ae <spi_transceive_buffer_wait+0x136>
		_spi_clear_tx_complete_flag(module);
    10c2:	4b84      	ldr	r3, [pc, #528]	; (12d4 <spi_transceive_buffer_wait+0x25c>)
    10c4:	4798      	blx	r3
    10c6:	e7f7      	b.n	10b8 <spi_transceive_buffer_wait+0x40>
    10c8:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10ca:	4a83      	ldr	r2, [pc, #524]	; (12d8 <spi_transceive_buffer_wait+0x260>)
    10cc:	4293      	cmp	r3, r2
    10ce:	d805      	bhi.n	10dc <spi_transceive_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10d0:	6822      	ldr	r2, [r4, #0]
    10d2:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    10d4:	07d2      	lsls	r2, r2, #31
    10d6:	d401      	bmi.n	10dc <spi_transceive_buffer_wait+0x64>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10d8:	3301      	adds	r3, #1
    10da:	e7f6      	b.n	10ca <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10dc:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    10de:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    10e0:	0792      	lsls	r2, r2, #30
    10e2:	d404      	bmi.n	10ee <spi_transceive_buffer_wait+0x76>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10e4:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    10e6:	07db      	lsls	r3, r3, #31
    10e8:	d468      	bmi.n	11bc <spi_transceive_buffer_wait+0x144>
				return STATUS_ERR_TIMEOUT;
    10ea:	2212      	movs	r2, #18
    10ec:	e0e8      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    10ee:	0020      	movs	r0, r4
    10f0:	4b78      	ldr	r3, [pc, #480]	; (12d4 <spi_transceive_buffer_wait+0x25c>)
    10f2:	4798      	blx	r3
				return STATUS_ABORTED;
    10f4:	2204      	movs	r2, #4
    10f6:	e0e3      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
			data_to_send |= (tx_data[tx_pos++] << 8);
    10f8:	3102      	adds	r1, #2
    10fa:	9a01      	ldr	r2, [sp, #4]
    10fc:	5d92      	ldrb	r2, [r2, r6]
    10fe:	0212      	lsls	r2, r2, #8
    1100:	4650      	mov	r0, sl
    1102:	4302      	orrs	r2, r0
    1104:	b28e      	uxth	r6, r1
    1106:	e068      	b.n	11da <spi_transceive_buffer_wait+0x162>
						data_to_send |= (tx_data[tx_pos++] << 8);
    1108:	3602      	adds	r6, #2
    110a:	9901      	ldr	r1, [sp, #4]
    110c:	5c09      	ldrb	r1, [r1, r0]
    110e:	0209      	lsls	r1, r1, #8
    1110:	4650      	mov	r0, sl
    1112:	4301      	orrs	r1, r0
    1114:	4689      	mov	r9, r1
    1116:	b2b0      	uxth	r0, r6
    1118:	e01a      	b.n	1150 <spi_transceive_buffer_wait+0xd8>
					length--;
    111a:	3f01      	subs	r7, #1
    111c:	b2bf      	uxth	r7, r7
    111e:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1120:	6822      	ldr	r2, [r4, #0]
    1122:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1124:	0752      	lsls	r2, r2, #29
    1126:	d41d      	bmi.n	1164 <spi_transceive_buffer_wait+0xec>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1128:	3301      	adds	r3, #1
    112a:	4a6b      	ldr	r2, [pc, #428]	; (12d8 <spi_transceive_buffer_wait+0x260>)
    112c:	4293      	cmp	r3, r2
    112e:	d819      	bhi.n	1164 <spi_transceive_buffer_wait+0xec>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1130:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1132:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1134:	07c9      	lsls	r1, r1, #31
    1136:	d5f3      	bpl.n	1120 <spi_transceive_buffer_wait+0xa8>
					data_to_send = tx_data[tx_pos++];
    1138:	1c70      	adds	r0, r6, #1
    113a:	b280      	uxth	r0, r0
    113c:	9901      	ldr	r1, [sp, #4]
    113e:	5d89      	ldrb	r1, [r1, r6]
    1140:	468a      	mov	sl, r1
    1142:	ad02      	add	r5, sp, #8
    1144:	8069      	strh	r1, [r5, #2]
    1146:	8869      	ldrh	r1, [r5, #2]
    1148:	4689      	mov	r9, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    114a:	79a1      	ldrb	r1, [r4, #6]
    114c:	2901      	cmp	r1, #1
    114e:	d0db      	beq.n	1108 <spi_transceive_buffer_wait+0x90>
    1150:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1152:	07f1      	lsls	r1, r6, #31
    1154:	d5e1      	bpl.n	111a <spi_transceive_buffer_wait+0xa2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1156:	4649      	mov	r1, r9
    1158:	05c9      	lsls	r1, r1, #23
    115a:	0dc9      	lsrs	r1, r1, #23
    115c:	6291      	str	r1, [r2, #40]	; 0x28
    115e:	e7dc      	b.n	111a <spi_transceive_buffer_wait+0xa2>
    1160:	2300      	movs	r3, #0
    1162:	e7e2      	b.n	112a <spi_transceive_buffer_wait+0xb2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1164:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1166:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1168:	0792      	lsls	r2, r2, #30
    116a:	d404      	bmi.n	1176 <spi_transceive_buffer_wait+0xfe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    116c:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    116e:	075b      	lsls	r3, r3, #29
    1170:	d43c      	bmi.n	11ec <spi_transceive_buffer_wait+0x174>
				return STATUS_ERR_TIMEOUT;
    1172:	2212      	movs	r2, #18
    1174:	e0a4      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    1176:	0020      	movs	r0, r4
    1178:	4b56      	ldr	r3, [pc, #344]	; (12d4 <spi_transceive_buffer_wait+0x25c>)
    117a:	4798      	blx	r3
				return STATUS_ABORTED;
    117c:	2204      	movs	r2, #4
    117e:	e09f      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
	enum status_code retval = STATUS_OK;
    1180:	2200      	movs	r2, #0
    1182:	e044      	b.n	120e <spi_transceive_buffer_wait+0x196>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1184:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1186:	05c9      	lsls	r1, r1, #23
    1188:	0dc9      	lsrs	r1, r1, #23
    118a:	e001      	b.n	1190 <spi_transceive_buffer_wait+0x118>
		uint16_t received_data = 0;
    118c:	2100      	movs	r1, #0
		return STATUS_ERR_IO;
    118e:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
    1190:	2a00      	cmp	r2, #0
    1192:	d000      	beq.n	1196 <spi_transceive_buffer_wait+0x11e>
    1194:	e094      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
		rx_data[rx_pos++] = received_data;
    1196:	4643      	mov	r3, r8
    1198:	3301      	adds	r3, #1
    119a:	b29b      	uxth	r3, r3
    119c:	9a03      	ldr	r2, [sp, #12]
    119e:	4640      	mov	r0, r8
    11a0:	5411      	strb	r1, [r2, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11a2:	79a2      	ldrb	r2, [r4, #6]
    11a4:	2a01      	cmp	r2, #1
    11a6:	d038      	beq.n	121a <spi_transceive_buffer_wait+0x1a2>
			rx_data[rx_pos++] = (received_data >> 8);
    11a8:	4698      	mov	r8, r3
    11aa:	0031      	movs	r1, r6
    11ac:	003e      	movs	r6, r7
	while (length--) {
    11ae:	1e77      	subs	r7, r6, #1
    11b0:	b2bf      	uxth	r7, r7
    11b2:	2e00      	cmp	r6, #0
    11b4:	d037      	beq.n	1226 <spi_transceive_buffer_wait+0x1ae>
		if (module->mode == SPI_MODE_SLAVE) {
    11b6:	7963      	ldrb	r3, [r4, #5]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d085      	beq.n	10c8 <spi_transceive_buffer_wait+0x50>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11bc:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    11be:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    11c0:	07d2      	lsls	r2, r2, #31
    11c2:	d5fb      	bpl.n	11bc <spi_transceive_buffer_wait+0x144>
		uint16_t data_to_send = tx_data[tx_pos++];
    11c4:	1c4e      	adds	r6, r1, #1
    11c6:	b2b6      	uxth	r6, r6
    11c8:	9a01      	ldr	r2, [sp, #4]
    11ca:	5c52      	ldrb	r2, [r2, r1]
    11cc:	4692      	mov	sl, r2
    11ce:	a802      	add	r0, sp, #8
    11d0:	8042      	strh	r2, [r0, #2]
    11d2:	8842      	ldrh	r2, [r0, #2]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11d4:	79a0      	ldrb	r0, [r4, #6]
    11d6:	2801      	cmp	r0, #1
    11d8:	d08e      	beq.n	10f8 <spi_transceive_buffer_wait+0x80>
    11da:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    11dc:	07c9      	lsls	r1, r1, #31
    11de:	d502      	bpl.n	11e6 <spi_transceive_buffer_wait+0x16e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    11e0:	05d2      	lsls	r2, r2, #23
    11e2:	0dd2      	lsrs	r2, r2, #23
    11e4:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    11e6:	7963      	ldrb	r3, [r4, #5]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d0b9      	beq.n	1160 <spi_transceive_buffer_wait+0xe8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11ec:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11ee:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    11f0:	0752      	lsls	r2, r2, #29
    11f2:	d5fb      	bpl.n	11ec <spi_transceive_buffer_wait+0x174>
		rx_length--;
    11f4:	4662      	mov	r2, ip
    11f6:	3a01      	subs	r2, #1
    11f8:	b292      	uxth	r2, r2
    11fa:	4694      	mov	ip, r2
    11fc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    11fe:	0752      	lsls	r2, r2, #29
    1200:	d5c4      	bpl.n	118c <spi_transceive_buffer_wait+0x114>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1202:	8b5a      	ldrh	r2, [r3, #26]
    1204:	0752      	lsls	r2, r2, #29
    1206:	d5bb      	bpl.n	1180 <spi_transceive_buffer_wait+0x108>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1208:	2204      	movs	r2, #4
    120a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    120c:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    120e:	79a1      	ldrb	r1, [r4, #6]
    1210:	2901      	cmp	r1, #1
    1212:	d0b7      	beq.n	1184 <spi_transceive_buffer_wait+0x10c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1214:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1216:	b2c9      	uxtb	r1, r1
    1218:	e7ba      	b.n	1190 <spi_transceive_buffer_wait+0x118>
			rx_data[rx_pos++] = (received_data >> 8);
    121a:	3002      	adds	r0, #2
    121c:	0a09      	lsrs	r1, r1, #8
    121e:	9a03      	ldr	r2, [sp, #12]
    1220:	54d1      	strb	r1, [r2, r3]
    1222:	b283      	uxth	r3, r0
    1224:	e7c0      	b.n	11a8 <spi_transceive_buffer_wait+0x130>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1226:	7962      	ldrb	r2, [r4, #5]
    1228:	2a01      	cmp	r2, #1
    122a:	d003      	beq.n	1234 <spi_transceive_buffer_wait+0x1bc>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    122c:	2a00      	cmp	r2, #0
    122e:	d039      	beq.n	12a4 <spi_transceive_buffer_wait+0x22c>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1230:	2200      	movs	r2, #0
    1232:	e045      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1234:	6823      	ldr	r3, [r4, #0]
    1236:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    1238:	079b      	lsls	r3, r3, #30
    123a:	d5fb      	bpl.n	1234 <spi_transceive_buffer_wait+0x1bc>
    123c:	e7f6      	b.n	122c <spi_transceive_buffer_wait+0x1b4>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    123e:	3301      	adds	r3, #1
    1240:	4a25      	ldr	r2, [pc, #148]	; (12d8 <spi_transceive_buffer_wait+0x260>)
    1242:	4293      	cmp	r3, r2
    1244:	d803      	bhi.n	124e <spi_transceive_buffer_wait+0x1d6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1246:	6822      	ldr	r2, [r4, #0]
    1248:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    124a:	0752      	lsls	r2, r2, #29
    124c:	d5f7      	bpl.n	123e <spi_transceive_buffer_wait+0x1c6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    124e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1250:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1252:	0752      	lsls	r2, r2, #29
    1254:	d53c      	bpl.n	12d0 <spi_transceive_buffer_wait+0x258>
			rx_length--;
    1256:	4662      	mov	r2, ip
    1258:	3a01      	subs	r2, #1
    125a:	b292      	uxth	r2, r2
    125c:	4694      	mov	ip, r2
    125e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1260:	0752      	lsls	r2, r2, #29
    1262:	d511      	bpl.n	1288 <spi_transceive_buffer_wait+0x210>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1264:	8b5a      	ldrh	r2, [r3, #26]
    1266:	0752      	lsls	r2, r2, #29
    1268:	d508      	bpl.n	127c <spi_transceive_buffer_wait+0x204>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    126a:	2204      	movs	r2, #4
    126c:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    126e:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1270:	79a1      	ldrb	r1, [r4, #6]
    1272:	2901      	cmp	r1, #1
    1274:	d004      	beq.n	1280 <spi_transceive_buffer_wait+0x208>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1276:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1278:	b2c9      	uxtb	r1, r1
    127a:	e007      	b.n	128c <spi_transceive_buffer_wait+0x214>
	enum status_code retval = STATUS_OK;
    127c:	2200      	movs	r2, #0
    127e:	e7f7      	b.n	1270 <spi_transceive_buffer_wait+0x1f8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1280:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1282:	05c9      	lsls	r1, r1, #23
    1284:	0dc9      	lsrs	r1, r1, #23
    1286:	e001      	b.n	128c <spi_transceive_buffer_wait+0x214>
			uint16_t received_data = 0;
    1288:	0031      	movs	r1, r6
		return STATUS_ERR_IO;
    128a:	2210      	movs	r2, #16
			if (retval != STATUS_OK) {
    128c:	2a00      	cmp	r2, #0
    128e:	d117      	bne.n	12c0 <spi_transceive_buffer_wait+0x248>
			rx_data[rx_pos++] = received_data;
    1290:	4643      	mov	r3, r8
    1292:	3301      	adds	r3, #1
    1294:	b29b      	uxth	r3, r3
    1296:	9a03      	ldr	r2, [sp, #12]
    1298:	4640      	mov	r0, r8
    129a:	5411      	strb	r1, [r2, r0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    129c:	79a2      	ldrb	r2, [r4, #6]
    129e:	2a01      	cmp	r2, #1
    12a0:	d005      	beq.n	12ae <spi_transceive_buffer_wait+0x236>
				rx_data[rx_pos++] = (received_data >> 8);
    12a2:	4698      	mov	r8, r3
		while (rx_length) {
    12a4:	4663      	mov	r3, ip
    12a6:	2b00      	cmp	r3, #0
    12a8:	d007      	beq.n	12ba <spi_transceive_buffer_wait+0x242>
    12aa:	2300      	movs	r3, #0
    12ac:	e7c8      	b.n	1240 <spi_transceive_buffer_wait+0x1c8>
				rx_data[rx_pos++] = (received_data >> 8);
    12ae:	3002      	adds	r0, #2
    12b0:	0a09      	lsrs	r1, r1, #8
    12b2:	9a03      	ldr	r2, [sp, #12]
    12b4:	54d1      	strb	r1, [r2, r3]
    12b6:	b283      	uxth	r3, r0
    12b8:	e7f3      	b.n	12a2 <spi_transceive_buffer_wait+0x22a>
	return STATUS_OK;
    12ba:	2200      	movs	r2, #0
    12bc:	e000      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
		return STATUS_BUSY;
    12be:	2205      	movs	r2, #5
}
    12c0:	0010      	movs	r0, r2
    12c2:	b005      	add	sp, #20
    12c4:	bc3c      	pop	{r2, r3, r4, r5}
    12c6:	4690      	mov	r8, r2
    12c8:	4699      	mov	r9, r3
    12ca:	46a2      	mov	sl, r4
    12cc:	46ab      	mov	fp, r5
    12ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    12d0:	2212      	movs	r2, #18
    12d2:	e7f5      	b.n	12c0 <spi_transceive_buffer_wait+0x248>
    12d4:	00000a55 	.word	0x00000a55
    12d8:	00002710 	.word	0x00002710

000012dc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    12dc:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12de:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    12e2:	780a      	ldrb	r2, [r1, #0]
    12e4:	b2d2      	uxtb	r2, r2
    12e6:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    12e8:	1c4c      	adds	r4, r1, #1
    12ea:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12ec:	7986      	ldrb	r6, [r0, #6]
    12ee:	2e01      	cmp	r6, #1
    12f0:	d007      	beq.n	1302 <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    12f2:	05db      	lsls	r3, r3, #23
    12f4:	0ddb      	lsrs	r3, r3, #23
    12f6:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    12f8:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    12fa:	3b01      	subs	r3, #1
    12fc:	b29b      	uxth	r3, r3
    12fe:	8683      	strh	r3, [r0, #52]	; 0x34
}
    1300:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1302:	784b      	ldrb	r3, [r1, #1]
    1304:	021b      	lsls	r3, r3, #8
    1306:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    1308:	1c8c      	adds	r4, r1, #2
    130a:	62c4      	str	r4, [r0, #44]	; 0x2c
    130c:	e7f1      	b.n	12f2 <_spi_write+0x16>
	...

00001310 <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1310:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1312:	4a04      	ldr	r2, [pc, #16]	; (1324 <_spi_write_dummy+0x14>)
    1314:	8812      	ldrh	r2, [r2, #0]
    1316:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1318:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    131a:	3b01      	subs	r3, #1
    131c:	b29b      	uxth	r3, r3
    131e:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1320:	4770      	bx	lr
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	20000490 	.word	0x20000490

00001328 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1328:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    132c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    132e:	3b01      	subs	r3, #1
    1330:	b29b      	uxth	r3, r3
    1332:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1334:	4770      	bx	lr

00001336 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1336:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    133a:	05db      	lsls	r3, r3, #23
    133c:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    133e:	b2da      	uxtb	r2, r3
    1340:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1342:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1344:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1346:	1c51      	adds	r1, r2, #1
    1348:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    134a:	7981      	ldrb	r1, [r0, #6]
    134c:	2901      	cmp	r1, #1
    134e:	d004      	beq.n	135a <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1350:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    1352:	3b01      	subs	r3, #1
    1354:	b29b      	uxth	r3, r3
    1356:	8603      	strh	r3, [r0, #48]	; 0x30
}
    1358:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    135a:	0a1b      	lsrs	r3, r3, #8
    135c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    135e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1360:	3301      	adds	r3, #1
    1362:	6283      	str	r3, [r0, #40]	; 0x28
    1364:	e7f4      	b.n	1350 <_spi_read+0x1a>
	...

00001368 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    136a:	0080      	lsls	r0, r0, #2
    136c:	4b6b      	ldr	r3, [pc, #428]	; (151c <_spi_interrupt_handler+0x1b4>)
    136e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1370:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1372:	2337      	movs	r3, #55	; 0x37
    1374:	5ce3      	ldrb	r3, [r4, r3]
    1376:	2236      	movs	r2, #54	; 0x36
    1378:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    137a:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    137c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    137e:	7db5      	ldrb	r5, [r6, #22]
    1380:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1382:	07eb      	lsls	r3, r5, #31
    1384:	d516      	bpl.n	13b4 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1386:	7963      	ldrb	r3, [r4, #5]
    1388:	2b01      	cmp	r3, #1
    138a:	d04d      	beq.n	1428 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    138c:	7963      	ldrb	r3, [r4, #5]
		if (0
    138e:	2b01      	cmp	r3, #1
    1390:	d057      	beq.n	1442 <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1392:	2b00      	cmp	r3, #0
    1394:	d10e      	bne.n	13b4 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    1396:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1398:	2b00      	cmp	r3, #0
    139a:	d00b      	beq.n	13b4 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    139c:	0020      	movs	r0, r4
    139e:	4b60      	ldr	r3, [pc, #384]	; (1520 <_spi_interrupt_handler+0x1b8>)
    13a0:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    13a2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    13a4:	b29b      	uxth	r3, r3
    13a6:	2b00      	cmp	r3, #0
    13a8:	d104      	bne.n	13b4 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    13aa:	3301      	adds	r3, #1
    13ac:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    13ae:	7a63      	ldrb	r3, [r4, #9]
    13b0:	2b01      	cmp	r3, #1
    13b2:	d04a      	beq.n	144a <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    13b4:	076b      	lsls	r3, r5, #29
    13b6:	d511      	bpl.n	13dc <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13b8:	8b73      	ldrh	r3, [r6, #26]
    13ba:	075b      	lsls	r3, r3, #29
    13bc:	d54f      	bpl.n	145e <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    13be:	7a63      	ldrb	r3, [r4, #9]
    13c0:	2b01      	cmp	r3, #1
    13c2:	d008      	beq.n	13d6 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    13c4:	221e      	movs	r2, #30
    13c6:	2338      	movs	r3, #56	; 0x38
    13c8:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    13ca:	3b35      	subs	r3, #53	; 0x35
    13cc:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    13ce:	3302      	adds	r3, #2
    13d0:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    13d2:	073b      	lsls	r3, r7, #28
    13d4:	d43f      	bmi.n	1456 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    13d6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    13d8:	2304      	movs	r3, #4
    13da:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    13dc:	07ab      	lsls	r3, r5, #30
    13de:	d513      	bpl.n	1408 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    13e0:	7963      	ldrb	r3, [r4, #5]
    13e2:	2b00      	cmp	r3, #0
    13e4:	d10d      	bne.n	1402 <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    13e6:	3307      	adds	r3, #7
    13e8:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    13ea:	3b05      	subs	r3, #5
    13ec:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    13ee:	3301      	adds	r3, #1
    13f0:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    13f2:	2300      	movs	r3, #0
    13f4:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    13f6:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    13f8:	3338      	adds	r3, #56	; 0x38
    13fa:	2200      	movs	r2, #0
    13fc:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    13fe:	06fb      	lsls	r3, r7, #27
    1400:	d464      	bmi.n	14cc <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1402:	7963      	ldrb	r3, [r4, #5]
    1404:	2b01      	cmp	r3, #1
    1406:	d065      	beq.n	14d4 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1408:	072b      	lsls	r3, r5, #28
    140a:	d508      	bpl.n	141e <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    140c:	7963      	ldrb	r3, [r4, #5]
    140e:	2b00      	cmp	r3, #0
    1410:	d105      	bne.n	141e <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1412:	3308      	adds	r3, #8
    1414:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1416:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1418:	06bb      	lsls	r3, r7, #26
    141a:	d500      	bpl.n	141e <_spi_interrupt_handler+0xb6>
    141c:	e070      	b.n	1500 <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    141e:	b26d      	sxtb	r5, r5
    1420:	2d00      	cmp	r5, #0
    1422:	da00      	bge.n	1426 <_spi_interrupt_handler+0xbe>
    1424:	e070      	b.n	1508 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    1428:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    142a:	2b00      	cmp	r3, #0
    142c:	d1ae      	bne.n	138c <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    142e:	0020      	movs	r0, r4
    1430:	4b3c      	ldr	r3, [pc, #240]	; (1524 <_spi_interrupt_handler+0x1bc>)
    1432:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1434:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1436:	b29b      	uxth	r3, r3
    1438:	2b00      	cmp	r3, #0
    143a:	d1a7      	bne.n	138c <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    143c:	3301      	adds	r3, #1
    143e:	7533      	strb	r3, [r6, #20]
    1440:	e7a4      	b.n	138c <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    1442:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1444:	2a00      	cmp	r2, #0
    1446:	d1a9      	bne.n	139c <_spi_interrupt_handler+0x34>
    1448:	e7a3      	b.n	1392 <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    144a:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    144c:	2b00      	cmp	r3, #0
    144e:	d1b1      	bne.n	13b4 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1450:	3302      	adds	r3, #2
    1452:	75b3      	strb	r3, [r6, #22]
    1454:	e7ae      	b.n	13b4 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1456:	0020      	movs	r0, r4
    1458:	69a3      	ldr	r3, [r4, #24]
    145a:	4798      	blx	r3
    145c:	e7bb      	b.n	13d6 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    145e:	7a63      	ldrb	r3, [r4, #9]
    1460:	2b01      	cmp	r3, #1
    1462:	d017      	beq.n	1494 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    1464:	0020      	movs	r0, r4
    1466:	4b30      	ldr	r3, [pc, #192]	; (1528 <_spi_interrupt_handler+0x1c0>)
    1468:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    146a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    146c:	b29b      	uxth	r3, r3
    146e:	2b00      	cmp	r3, #0
    1470:	d1b4      	bne.n	13dc <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    1472:	2200      	movs	r2, #0
    1474:	3338      	adds	r3, #56	; 0x38
    1476:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1478:	3b34      	subs	r3, #52	; 0x34
    147a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    147c:	7a63      	ldrb	r3, [r4, #9]
    147e:	2b02      	cmp	r3, #2
    1480:	d01d      	beq.n	14be <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1482:	7a63      	ldrb	r3, [r4, #9]
    1484:	2b00      	cmp	r3, #0
    1486:	d1a9      	bne.n	13dc <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1488:	07bb      	lsls	r3, r7, #30
    148a:	d5a7      	bpl.n	13dc <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    148c:	0020      	movs	r0, r4
    148e:	6923      	ldr	r3, [r4, #16]
    1490:	4798      	blx	r3
    1492:	e7a3      	b.n	13dc <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    1494:	0020      	movs	r0, r4
    1496:	4b25      	ldr	r3, [pc, #148]	; (152c <_spi_interrupt_handler+0x1c4>)
    1498:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    149a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    149c:	b29b      	uxth	r3, r3
    149e:	2b00      	cmp	r3, #0
    14a0:	d19c      	bne.n	13dc <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    14a2:	3304      	adds	r3, #4
    14a4:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    14a6:	2200      	movs	r2, #0
    14a8:	3334      	adds	r3, #52	; 0x34
    14aa:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    14ac:	3b35      	subs	r3, #53	; 0x35
    14ae:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    14b0:	07fb      	lsls	r3, r7, #31
    14b2:	d400      	bmi.n	14b6 <_spi_interrupt_handler+0x14e>
    14b4:	e792      	b.n	13dc <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    14b6:	0020      	movs	r0, r4
    14b8:	68e3      	ldr	r3, [r4, #12]
    14ba:	4798      	blx	r3
    14bc:	e78e      	b.n	13dc <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    14be:	077b      	lsls	r3, r7, #29
    14c0:	d400      	bmi.n	14c4 <_spi_interrupt_handler+0x15c>
    14c2:	e78b      	b.n	13dc <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    14c4:	0020      	movs	r0, r4
    14c6:	6963      	ldr	r3, [r4, #20]
    14c8:	4798      	blx	r3
    14ca:	e787      	b.n	13dc <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    14cc:	0020      	movs	r0, r4
    14ce:	69e3      	ldr	r3, [r4, #28]
    14d0:	4798      	blx	r3
    14d2:	e796      	b.n	1402 <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    14d4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    14d6:	2b01      	cmp	r3, #1
    14d8:	d000      	beq.n	14dc <_spi_interrupt_handler+0x174>
    14da:	e795      	b.n	1408 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    14dc:	79e3      	ldrb	r3, [r4, #7]
    14de:	2b00      	cmp	r3, #0
    14e0:	d000      	beq.n	14e4 <_spi_interrupt_handler+0x17c>
    14e2:	e791      	b.n	1408 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    14e4:	3302      	adds	r3, #2
    14e6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    14e8:	3301      	adds	r3, #1
    14ea:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    14ec:	2200      	movs	r2, #0
    14ee:	3335      	adds	r3, #53	; 0x35
    14f0:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    14f2:	07fb      	lsls	r3, r7, #31
    14f4:	d400      	bmi.n	14f8 <_spi_interrupt_handler+0x190>
    14f6:	e787      	b.n	1408 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    14f8:	0020      	movs	r0, r4
    14fa:	68e3      	ldr	r3, [r4, #12]
    14fc:	4798      	blx	r3
    14fe:	e783      	b.n	1408 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1500:	0020      	movs	r0, r4
    1502:	6a23      	ldr	r3, [r4, #32]
    1504:	4798      	blx	r3
    1506:	e78a      	b.n	141e <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1508:	2380      	movs	r3, #128	; 0x80
    150a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    150c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    150e:	067b      	lsls	r3, r7, #25
    1510:	d400      	bmi.n	1514 <_spi_interrupt_handler+0x1ac>
    1512:	e788      	b.n	1426 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1514:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1516:	0020      	movs	r0, r4
    1518:	4798      	blx	r3
}
    151a:	e784      	b.n	1426 <_spi_interrupt_handler+0xbe>
    151c:	20000a08 	.word	0x20000a08
    1520:	000012dd 	.word	0x000012dd
    1524:	00001311 	.word	0x00001311
    1528:	00001337 	.word	0x00001337
    152c:	00001329 	.word	0x00001329

00001530 <FIFO_Count>:
    1530:	2800      	cmp	r0, #0
    1532:	d003      	beq.n	153c <FIFO_Count+0xc>
    1534:	6803      	ldr	r3, [r0, #0]
    1536:	6840      	ldr	r0, [r0, #4]
    1538:	1a18      	subs	r0, r3, r0
    153a:	4770      	bx	lr
    153c:	2000      	movs	r0, #0
    153e:	e7fc      	b.n	153a <FIFO_Count+0xa>

00001540 <FIFO_Full>:
    1540:	b510      	push	{r4, lr}
    1542:	1e04      	subs	r4, r0, #0
    1544:	d006      	beq.n	1554 <FIFO_Full+0x14>
    1546:	4b05      	ldr	r3, [pc, #20]	; (155c <FIFO_Full+0x1c>)
    1548:	4798      	blx	r3
    154a:	68e3      	ldr	r3, [r4, #12]
    154c:	4298      	cmp	r0, r3
    154e:	d003      	beq.n	1558 <FIFO_Full+0x18>
    1550:	2000      	movs	r0, #0
    1552:	bd10      	pop	{r4, pc}
    1554:	2001      	movs	r0, #1
    1556:	e7fc      	b.n	1552 <FIFO_Full+0x12>
    1558:	2001      	movs	r0, #1
    155a:	e7fa      	b.n	1552 <FIFO_Full+0x12>
    155c:	00001531 	.word	0x00001531

00001560 <FIFO_Put>:
    1560:	b570      	push	{r4, r5, r6, lr}
    1562:	0004      	movs	r4, r0
    1564:	000d      	movs	r5, r1
    1566:	2800      	cmp	r0, #0
    1568:	d010      	beq.n	158c <FIFO_Put+0x2c>
    156a:	4b0a      	ldr	r3, [pc, #40]	; (1594 <FIFO_Put+0x34>)
    156c:	4798      	blx	r3
    156e:	2800      	cmp	r0, #0
    1570:	d10e      	bne.n	1590 <FIFO_Put+0x30>
    1572:	6820      	ldr	r0, [r4, #0]
    1574:	68e1      	ldr	r1, [r4, #12]
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <FIFO_Put+0x38>)
    1578:	4798      	blx	r3
    157a:	68a3      	ldr	r3, [r4, #8]
    157c:	469c      	mov	ip, r3
    157e:	4461      	add	r1, ip
    1580:	700d      	strb	r5, [r1, #0]
    1582:	6823      	ldr	r3, [r4, #0]
    1584:	3301      	adds	r3, #1
    1586:	6023      	str	r3, [r4, #0]
    1588:	2001      	movs	r0, #1
    158a:	bd70      	pop	{r4, r5, r6, pc}
    158c:	2000      	movs	r0, #0
    158e:	e7fc      	b.n	158a <FIFO_Put+0x2a>
    1590:	2000      	movs	r0, #0
    1592:	e7fa      	b.n	158a <FIFO_Put+0x2a>
    1594:	00001541 	.word	0x00001541
    1598:	00005425 	.word	0x00005425

0000159c <FIFO_Init>:
    159c:	2800      	cmp	r0, #0
    159e:	d008      	beq.n	15b2 <FIFO_Init+0x16>
    15a0:	2900      	cmp	r1, #0
    15a2:	d006      	beq.n	15b2 <FIFO_Init+0x16>
    15a4:	2a00      	cmp	r2, #0
    15a6:	d004      	beq.n	15b2 <FIFO_Init+0x16>
    15a8:	2300      	movs	r3, #0
    15aa:	6003      	str	r3, [r0, #0]
    15ac:	6043      	str	r3, [r0, #4]
    15ae:	6081      	str	r1, [r0, #8]
    15b0:	60c2      	str	r2, [r0, #12]
    15b2:	4770      	bx	lr

000015b4 <mstimer_set>:
    15b4:	b510      	push	{r4, lr}
    15b6:	0004      	movs	r4, r0
    15b8:	6041      	str	r1, [r0, #4]
    15ba:	4b02      	ldr	r3, [pc, #8]	; (15c4 <mstimer_set+0x10>)
    15bc:	4798      	blx	r3
    15be:	6020      	str	r0, [r4, #0]
    15c0:	bd10      	pop	{r4, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	00003cc9 	.word	0x00003cc9

000015c8 <get_eeprom_data_pointer>:
	}
}

struct shield_data *get_eeprom_data_pointer(void)
{
	return eeprom_data_pointer;
    15c8:	4b01      	ldr	r3, [pc, #4]	; (15d0 <get_eeprom_data_pointer+0x8>)
    15ca:	6818      	ldr	r0, [r3, #0]
}
    15cc:	4770      	bx	lr
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	20000494 	.word	0x20000494

000015d4 <spi_eeprom_wait>:
	port_pin_set_output_level(EEPROM_CS, 1);
}

//waits until eeprom chip says it is done with the write cycle
void spi_eeprom_wait()
{
    15d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15d6:	b083      	sub	sp, #12
		uint8_t data;
	};
	struct command_frame command_data;
	do
	{
		command_data.command = EEPROM_LPWP;
    15d8:	ac01      	add	r4, sp, #4
    15da:	2308      	movs	r3, #8
    15dc:	7023      	strb	r3, [r4, #0]
		port_base->OUTCLR.reg = pin_mask;
    15de:	4d08      	ldr	r5, [pc, #32]	; (1600 <spi_eeprom_wait+0x2c>)
    15e0:	2680      	movs	r6, #128	; 0x80
    15e2:	01b6      	lsls	r6, r6, #6
    15e4:	616e      	str	r6, [r5, #20]
		port_pin_set_output_level(EEPROM_CS, 0);
		spi_transceive_buffer_wait(&spieeprom_inst, &command_data, &command_data, sizeof(struct command_frame));
    15e6:	3b06      	subs	r3, #6
    15e8:	0022      	movs	r2, r4
    15ea:	0021      	movs	r1, r4
    15ec:	4805      	ldr	r0, [pc, #20]	; (1604 <spi_eeprom_wait+0x30>)
    15ee:	4f06      	ldr	r7, [pc, #24]	; (1608 <spi_eeprom_wait+0x34>)
    15f0:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    15f2:	61ae      	str	r6, [r5, #24]
		port_pin_set_output_level(EEPROM_CS, 1);
	} while((command_data.data) == 0xFF);
    15f4:	7863      	ldrb	r3, [r4, #1]
    15f6:	2bff      	cmp	r3, #255	; 0xff
    15f8:	d0ee      	beq.n	15d8 <spi_eeprom_wait+0x4>
}
    15fa:	b003      	add	sp, #12
    15fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	41004400 	.word	0x41004400
    1604:	20000094 	.word	0x20000094
    1608:	00001079 	.word	0x00001079

0000160c <spi_eeprom_enable_write>:
{
    160c:	b5f0      	push	{r4, r5, r6, r7, lr}
    160e:	b085      	sub	sp, #20
    1610:	9000      	str	r0, [sp, #0]
    1612:	9101      	str	r1, [sp, #4]
	spi_eeprom_wait();
    1614:	4b0b      	ldr	r3, [pc, #44]	; (1644 <spi_eeprom_enable_write+0x38>)
    1616:	4798      	blx	r3
	uint8_t command = EEPROM_WREN;
    1618:	ab02      	add	r3, sp, #8
    161a:	1dd9      	adds	r1, r3, #7
    161c:	2306      	movs	r3, #6
    161e:	700b      	strb	r3, [r1, #0]
		port_base->OUTCLR.reg = pin_mask;
    1620:	4c09      	ldr	r4, [pc, #36]	; (1648 <spi_eeprom_enable_write+0x3c>)
    1622:	2680      	movs	r6, #128	; 0x80
    1624:	01b6      	lsls	r6, r6, #6
    1626:	6166      	str	r6, [r4, #20]
	spi_write_buffer_wait(&spieeprom_inst, &command, 1);
    1628:	4d08      	ldr	r5, [pc, #32]	; (164c <spi_eeprom_enable_write+0x40>)
    162a:	2201      	movs	r2, #1
    162c:	0028      	movs	r0, r5
    162e:	4f08      	ldr	r7, [pc, #32]	; (1650 <spi_eeprom_enable_write+0x44>)
    1630:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    1632:	61a6      	str	r6, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    1634:	6166      	str	r6, [r4, #20]
	spi_write_buffer_wait(&spieeprom_inst, data, size);
    1636:	9a01      	ldr	r2, [sp, #4]
    1638:	9900      	ldr	r1, [sp, #0]
    163a:	0028      	movs	r0, r5
    163c:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    163e:	61a6      	str	r6, [r4, #24]
}
    1640:	b005      	add	sp, #20
    1642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1644:	000015d5 	.word	0x000015d5
    1648:	41004400 	.word	0x41004400
    164c:	20000094 	.word	0x20000094
    1650:	00000e8d 	.word	0x00000e8d

00001654 <spi_eeprom_write_address>:

//writes shield data to a specific address
void spi_eeprom_write_address(struct shield_data *address, struct shield_data *data)
{
    1654:	b500      	push	{lr}
    1656:	b085      	sub	sp, #20
	write_frame_union curr_frame;
	curr_frame.frame.cmd = EEPROM_WRITE;
    1658:	2302      	movs	r3, #2
    165a:	466a      	mov	r2, sp
    165c:	7013      	strb	r3, [r2, #0]
	curr_frame.frame.addr_high = (((uint32_t) address) >> 16) & 0x3;
    165e:	0c02      	lsrs	r2, r0, #16
    1660:	3301      	adds	r3, #1
    1662:	4013      	ands	r3, r2
    1664:	466a      	mov	r2, sp
    1666:	7053      	strb	r3, [r2, #1]
	curr_frame.frame.addr_mid = (((uint32_t) address) >> 8) & 0xFF;
    1668:	0a03      	lsrs	r3, r0, #8
    166a:	7093      	strb	r3, [r2, #2]
	curr_frame.frame.addr_low = ((uint32_t) address) & 0xFF;
    166c:	70d0      	strb	r0, [r2, #3]
	memcpy(&curr_frame.frame.data, data, sizeof(struct shield_data));
    166e:	220c      	movs	r2, #12
    1670:	a801      	add	r0, sp, #4
    1672:	4b04      	ldr	r3, [pc, #16]	; (1684 <spi_eeprom_write_address+0x30>)
    1674:	4798      	blx	r3
	spi_eeprom_enable_write(&curr_frame.databytes, sizeof(write_frame_union));
    1676:	2110      	movs	r1, #16
    1678:	4668      	mov	r0, sp
    167a:	4b03      	ldr	r3, [pc, #12]	; (1688 <spi_eeprom_write_address+0x34>)
    167c:	4798      	blx	r3
}
    167e:	b005      	add	sp, #20
    1680:	bd00      	pop	{pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	000054cd 	.word	0x000054cd
    1688:	0000160d 	.word	0x0000160d

0000168c <spi_eeprom_read_address>:

//reads shield data from a specific address
struct shield_data spi_eeprom_read_address(struct shield_data *address)
{
    168c:	b5f0      	push	{r4, r5, r6, r7, lr}
    168e:	b085      	sub	sp, #20
    1690:	0004      	movs	r4, r0
	struct shield_data ret_data;
	write_frame_union curr_frame;
	curr_frame.frame.cmd = EEPROM_READ;
    1692:	2303      	movs	r3, #3
    1694:	466a      	mov	r2, sp
    1696:	7013      	strb	r3, [r2, #0]
	curr_frame.frame.addr_high = (((uint32_t) address) >> 16) & 0x3;
    1698:	0c0a      	lsrs	r2, r1, #16
    169a:	4013      	ands	r3, r2
    169c:	466a      	mov	r2, sp
    169e:	7053      	strb	r3, [r2, #1]
	curr_frame.frame.addr_mid = (((uint32_t) address) >> 8) & 0xFF;
    16a0:	0a0b      	lsrs	r3, r1, #8
    16a2:	7093      	strb	r3, [r2, #2]
	curr_frame.frame.addr_low = ((uint32_t) address) & 0xFF;
    16a4:	70d1      	strb	r1, [r2, #3]
	spi_eeprom_wait();
    16a6:	4b0a      	ldr	r3, [pc, #40]	; (16d0 <spi_eeprom_read_address+0x44>)
    16a8:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    16aa:	4d0a      	ldr	r5, [pc, #40]	; (16d4 <spi_eeprom_read_address+0x48>)
    16ac:	2680      	movs	r6, #128	; 0x80
    16ae:	01b6      	lsls	r6, r6, #6
    16b0:	616e      	str	r6, [r5, #20]
	port_pin_set_output_level(EEPROM_CS, 0);
	spi_transceive_buffer_wait(&spieeprom_inst, &curr_frame.databytes, &curr_frame.databytes, sizeof(write_frame_union));
    16b2:	2310      	movs	r3, #16
    16b4:	466a      	mov	r2, sp
    16b6:	4669      	mov	r1, sp
    16b8:	4807      	ldr	r0, [pc, #28]	; (16d8 <spi_eeprom_read_address+0x4c>)
    16ba:	4f08      	ldr	r7, [pc, #32]	; (16dc <spi_eeprom_read_address+0x50>)
    16bc:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    16be:	61ae      	str	r6, [r5, #24]
	port_pin_set_output_level(EEPROM_CS, 1);
	return curr_frame.frame.data;
    16c0:	220c      	movs	r2, #12
    16c2:	a901      	add	r1, sp, #4
    16c4:	0020      	movs	r0, r4
    16c6:	4b06      	ldr	r3, [pc, #24]	; (16e0 <spi_eeprom_read_address+0x54>)
    16c8:	4798      	blx	r3
}
    16ca:	0020      	movs	r0, r4
    16cc:	b005      	add	sp, #20
    16ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16d0:	000015d5 	.word	0x000015d5
    16d4:	41004400 	.word	0x41004400
    16d8:	20000094 	.word	0x20000094
    16dc:	00001079 	.word	0x00001079
    16e0:	000054cd 	.word	0x000054cd

000016e4 <is_timestamp_later>:

//returns true if time1 is later than time2
bool is_timestamp_later(struct rtc_calendar_time *time1, struct rtc_calendar_time *time2)
{
    16e4:	b510      	push	{r4, lr}
	if(time1->year > time2->year)
    16e6:	88c2      	ldrh	r2, [r0, #6]
    16e8:	88cb      	ldrh	r3, [r1, #6]
    16ea:	429a      	cmp	r2, r3
    16ec:	d825      	bhi.n	173a <is_timestamp_later+0x56>
		return true;
	else if(time1->year == time2->year)
    16ee:	d001      	beq.n	16f4 <is_timestamp_later+0x10>
					if(time1->minute > time2->minute)
						return true;
					else if(time1->minute == time2->hour)
						if(time1->second > time2->second)
							return true;
	return false;
    16f0:	2000      	movs	r0, #0
}
    16f2:	bd10      	pop	{r4, pc}
		if(time1->month > time2->month)
    16f4:	7942      	ldrb	r2, [r0, #5]
    16f6:	794b      	ldrb	r3, [r1, #5]
    16f8:	429a      	cmp	r2, r3
    16fa:	d820      	bhi.n	173e <is_timestamp_later+0x5a>
		else if(time1->month == time2->month)
    16fc:	d001      	beq.n	1702 <is_timestamp_later+0x1e>
	return false;
    16fe:	2000      	movs	r0, #0
    1700:	e7f7      	b.n	16f2 <is_timestamp_later+0xe>
			if(time1->day > time2->day)
    1702:	7902      	ldrb	r2, [r0, #4]
    1704:	790b      	ldrb	r3, [r1, #4]
    1706:	429a      	cmp	r2, r3
    1708:	d81b      	bhi.n	1742 <is_timestamp_later+0x5e>
			else if(time1->day == time2->day)
    170a:	d001      	beq.n	1710 <is_timestamp_later+0x2c>
	return false;
    170c:	2000      	movs	r0, #0
    170e:	e7f0      	b.n	16f2 <is_timestamp_later+0xe>
				if(time1->hour > time2->hour)
    1710:	7882      	ldrb	r2, [r0, #2]
    1712:	788b      	ldrb	r3, [r1, #2]
    1714:	429a      	cmp	r2, r3
    1716:	d816      	bhi.n	1746 <is_timestamp_later+0x62>
				else if(time1->hour == time2->hour)
    1718:	d001      	beq.n	171e <is_timestamp_later+0x3a>
	return false;
    171a:	2000      	movs	r0, #0
    171c:	e7e9      	b.n	16f2 <is_timestamp_later+0xe>
					if(time1->minute > time2->minute)
    171e:	7842      	ldrb	r2, [r0, #1]
    1720:	784c      	ldrb	r4, [r1, #1]
    1722:	42a2      	cmp	r2, r4
    1724:	d811      	bhi.n	174a <is_timestamp_later+0x66>
					else if(time1->minute == time2->hour)
    1726:	4293      	cmp	r3, r2
    1728:	d001      	beq.n	172e <is_timestamp_later+0x4a>
	return false;
    172a:	2000      	movs	r0, #0
    172c:	e7e1      	b.n	16f2 <is_timestamp_later+0xe>
						if(time1->second > time2->second)
    172e:	7802      	ldrb	r2, [r0, #0]
    1730:	780b      	ldrb	r3, [r1, #0]
    1732:	429a      	cmp	r2, r3
    1734:	d80b      	bhi.n	174e <is_timestamp_later+0x6a>
	return false;
    1736:	2000      	movs	r0, #0
    1738:	e7db      	b.n	16f2 <is_timestamp_later+0xe>
		return true;
    173a:	2001      	movs	r0, #1
    173c:	e7d9      	b.n	16f2 <is_timestamp_later+0xe>
			return true;
    173e:	2001      	movs	r0, #1
    1740:	e7d7      	b.n	16f2 <is_timestamp_later+0xe>
				return true;
    1742:	2001      	movs	r0, #1
    1744:	e7d5      	b.n	16f2 <is_timestamp_later+0xe>
					return true;
    1746:	2001      	movs	r0, #1
    1748:	e7d3      	b.n	16f2 <is_timestamp_later+0xe>
						return true;
    174a:	2001      	movs	r0, #1
    174c:	e7d1      	b.n	16f2 <is_timestamp_later+0xe>
							return true;
    174e:	2001      	movs	r0, #1
    1750:	e7cf      	b.n	16f2 <is_timestamp_later+0xe>
	...

00001754 <eeprom_find_latest_data>:

//sets eeprom_data_pointer to point to the most recent shield data entry in eeprom
void eeprom_find_latest_data()
{
    1754:	b530      	push	{r4, r5, lr}
    1756:	b087      	sub	sp, #28
	struct shield_data latest_data = {0};
    1758:	220c      	movs	r2, #12
    175a:	2100      	movs	r1, #0
    175c:	a803      	add	r0, sp, #12
    175e:	4b0e      	ldr	r3, [pc, #56]	; (1798 <eeprom_find_latest_data+0x44>)
    1760:	4798      	blx	r3
	struct shield_data *latest_data_address = 0;
	for(struct shield_data *i = 0; i < EEPROM_BYTE_TOTAL; i++)
    1762:	2400      	movs	r4, #0
	struct shield_data *latest_data_address = 0;
    1764:	2500      	movs	r5, #0
	for(struct shield_data *i = 0; i < EEPROM_BYTE_TOTAL; i++)
    1766:	e000      	b.n	176a <eeprom_find_latest_data+0x16>
    1768:	340c      	adds	r4, #12
    176a:	4b0c      	ldr	r3, [pc, #48]	; (179c <eeprom_find_latest_data+0x48>)
    176c:	429c      	cmp	r4, r3
    176e:	d80f      	bhi.n	1790 <eeprom_find_latest_data+0x3c>
	{
		struct shield_data temp = spi_eeprom_read_address(i);
    1770:	0021      	movs	r1, r4
    1772:	4668      	mov	r0, sp
    1774:	4b0a      	ldr	r3, [pc, #40]	; (17a0 <eeprom_find_latest_data+0x4c>)
    1776:	4798      	blx	r3
		if(is_timestamp_later(&temp.timestamp, &latest_data.timestamp))
    1778:	a903      	add	r1, sp, #12
    177a:	4668      	mov	r0, sp
    177c:	4b09      	ldr	r3, [pc, #36]	; (17a4 <eeprom_find_latest_data+0x50>)
    177e:	4798      	blx	r3
    1780:	2800      	cmp	r0, #0
    1782:	d0f1      	beq.n	1768 <eeprom_find_latest_data+0x14>
		{
			latest_data_address = i;
			latest_data = temp;
    1784:	aa03      	add	r2, sp, #12
    1786:	466b      	mov	r3, sp
    1788:	cb23      	ldmia	r3!, {r0, r1, r5}
    178a:	c223      	stmia	r2!, {r0, r1, r5}
			latest_data_address = i;
    178c:	0025      	movs	r5, r4
    178e:	e7eb      	b.n	1768 <eeprom_find_latest_data+0x14>
		}
	}
	eeprom_data_pointer = latest_data_address;
    1790:	4b05      	ldr	r3, [pc, #20]	; (17a8 <eeprom_find_latest_data+0x54>)
    1792:	601d      	str	r5, [r3, #0]
}
    1794:	b007      	add	sp, #28
    1796:	bd30      	pop	{r4, r5, pc}
    1798:	000054df 	.word	0x000054df
    179c:	0003ffff 	.word	0x0003ffff
    17a0:	0000168d 	.word	0x0000168d
    17a4:	000016e5 	.word	0x000016e5
    17a8:	20000494 	.word	0x20000494

000017ac <spieeprom_init>:
{
    17ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ae:	b091      	sub	sp, #68	; 0x44
	config->mode             = SPI_MODE_MASTER;
    17b0:	ac02      	add	r4, sp, #8
    17b2:	2601      	movs	r6, #1
    17b4:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    17b6:	2500      	movs	r5, #0
    17b8:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    17ba:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    17bc:	23c0      	movs	r3, #192	; 0xc0
    17be:	039b      	lsls	r3, r3, #14
    17c0:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    17c2:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    17c4:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    17c6:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    17c8:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    17ca:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    17cc:	2724      	movs	r7, #36	; 0x24
    17ce:	55e5      	strb	r5, [r4, r7]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    17d0:	220c      	movs	r2, #12
    17d2:	2100      	movs	r1, #0
    17d4:	a808      	add	r0, sp, #32
    17d6:	4b29      	ldr	r3, [pc, #164]	; (187c <spieeprom_init+0xd0>)
    17d8:	4798      	blx	r3
	config_spi.mux_setting = EEPROM_PINMUX;
    17da:	2380      	movs	r3, #128	; 0x80
    17dc:	025b      	lsls	r3, r3, #9
    17de:	60e3      	str	r3, [r4, #12]
	config_spi.pinmux_pad0 = EEPROM_MISO;
    17e0:	4b27      	ldr	r3, [pc, #156]	; (1880 <spieeprom_init+0xd4>)
    17e2:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi.pinmux_pad1 = PINMUX_UNUSED;
    17e4:	2301      	movs	r3, #1
    17e6:	425b      	negs	r3, r3
    17e8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi.pinmux_pad2 = EEPROM_MOSI;
    17ea:	4b26      	ldr	r3, [pc, #152]	; (1884 <spieeprom_init+0xd8>)
    17ec:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi.pinmux_pad3 = EEPROM_SCK;
    17ee:	4b26      	ldr	r3, [pc, #152]	; (1888 <spieeprom_init+0xdc>)
    17f0:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi.transfer_mode = SPI_TRANSFER_MODE_3;
    17f2:	23c0      	movs	r3, #192	; 0xc0
    17f4:	059b      	lsls	r3, r3, #22
    17f6:	60a3      	str	r3, [r4, #8]
	config_spi.generator_source = SPI_EEPROM_CLOCK_SOURCE;
    17f8:	55e5      	strb	r5, [r4, r7]
	config_spi.mode_specific.master.baudrate = SPI_EEPROM_MAX_CLOCK;
    17fa:	4b24      	ldr	r3, [pc, #144]	; (188c <spieeprom_init+0xe0>)
    17fc:	61a3      	str	r3, [r4, #24]
	spi_init(&spieeprom_inst, SPI_EEPROM, &config_spi);
    17fe:	4d24      	ldr	r5, [pc, #144]	; (1890 <spieeprom_init+0xe4>)
    1800:	0022      	movs	r2, r4
    1802:	4924      	ldr	r1, [pc, #144]	; (1894 <spieeprom_init+0xe8>)
    1804:	0028      	movs	r0, r5
    1806:	4b24      	ldr	r3, [pc, #144]	; (1898 <spieeprom_init+0xec>)
    1808:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    180a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    180c:	0020      	movs	r0, r4
    180e:	4b23      	ldr	r3, [pc, #140]	; (189c <spieeprom_init+0xf0>)
    1810:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1812:	231f      	movs	r3, #31
    1814:	4018      	ands	r0, r3
    1816:	4086      	lsls	r6, r0
    1818:	4b21      	ldr	r3, [pc, #132]	; (18a0 <spieeprom_init+0xf4>)
    181a:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    181c:	4b1c      	ldr	r3, [pc, #112]	; (1890 <spieeprom_init+0xe4>)
    181e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    1820:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    1822:	2b00      	cmp	r3, #0
    1824:	d1fa      	bne.n	181c <spieeprom_init+0x70>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1826:	6823      	ldr	r3, [r4, #0]
    1828:	2202      	movs	r2, #2
    182a:	4313      	orrs	r3, r2
    182c:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    182e:	ac01      	add	r4, sp, #4
    1830:	2301      	movs	r3, #1
    1832:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1834:	2200      	movs	r2, #0
    1836:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1838:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(EEPROM_CS, &config_port_pin);
    183a:	0021      	movs	r1, r4
    183c:	200d      	movs	r0, #13
    183e:	4d19      	ldr	r5, [pc, #100]	; (18a4 <spieeprom_init+0xf8>)
    1840:	47a8      	blx	r5
	port_pin_set_config(EEPROM_WP, &config_port_pin);
    1842:	0021      	movs	r1, r4
    1844:	2010      	movs	r0, #16
    1846:	47a8      	blx	r5
	port_pin_set_config(EEPROM_HOLD, &config_port_pin);
    1848:	0021      	movs	r1, r4
    184a:	2011      	movs	r0, #17
    184c:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    184e:	4b16      	ldr	r3, [pc, #88]	; (18a8 <spieeprom_init+0xfc>)
    1850:	2280      	movs	r2, #128	; 0x80
    1852:	0192      	lsls	r2, r2, #6
    1854:	619a      	str	r2, [r3, #24]
    1856:	2280      	movs	r2, #128	; 0x80
    1858:	0252      	lsls	r2, r2, #9
    185a:	619a      	str	r2, [r3, #24]
    185c:	2280      	movs	r2, #128	; 0x80
    185e:	0292      	lsls	r2, r2, #10
    1860:	619a      	str	r2, [r3, #24]
	eeprom_find_latest_data();
    1862:	4b12      	ldr	r3, [pc, #72]	; (18ac <spieeprom_init+0x100>)
    1864:	4798      	blx	r3
	if(eeprom_data_pointer == 15)
    1866:	4b12      	ldr	r3, [pc, #72]	; (18b0 <spieeprom_init+0x104>)
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	2b0f      	cmp	r3, #15
    186c:	d001      	beq.n	1872 <spieeprom_init+0xc6>
}
    186e:	b011      	add	sp, #68	; 0x44
    1870:	bdf0      	pop	{r4, r5, r6, r7, pc}
		delay_ms(1);
    1872:	2001      	movs	r0, #1
    1874:	4b0f      	ldr	r3, [pc, #60]	; (18b4 <spieeprom_init+0x108>)
    1876:	4798      	blx	r3
}
    1878:	e7f9      	b.n	186e <spieeprom_init+0xc2>
    187a:	46c0      	nop			; (mov r8, r8)
    187c:	000054df 	.word	0x000054df
    1880:	000c0002 	.word	0x000c0002
    1884:	000e0002 	.word	0x000e0002
    1888:	000f0002 	.word	0x000f0002
    188c:	000f4240 	.word	0x000f4240
    1890:	20000094 	.word	0x20000094
    1894:	42001000 	.word	0x42001000
    1898:	00000ba9 	.word	0x00000ba9
    189c:	000045fd 	.word	0x000045fd
    18a0:	e000e100 	.word	0xe000e100
    18a4:	00004681 	.word	0x00004681
    18a8:	41004400 	.word	0x41004400
    18ac:	00001755 	.word	0x00001755
    18b0:	20000494 	.word	0x20000494
    18b4:	00000151 	.word	0x00000151

000018b8 <eeprom_read_ten_data>:
{
	return spi_eeprom_read_address(eeprom_data_pointer);
}

void eeprom_read_ten_data(struct shield_data target[10], struct shield_data *address)
{
    18b8:	b570      	push	{r4, r5, r6, lr}
    18ba:	b084      	sub	sp, #16
    18bc:	0006      	movs	r6, r0
	for(uint8_t i = 0; i < 10; i++)
    18be:	2400      	movs	r4, #0
    18c0:	e00f      	b.n	18e2 <eeprom_read_ten_data+0x2a>
	{
		struct shield_data temp = spi_eeprom_read_address(address--);
    18c2:	000d      	movs	r5, r1
    18c4:	3d0c      	subs	r5, #12
    18c6:	a801      	add	r0, sp, #4
    18c8:	4b08      	ldr	r3, [pc, #32]	; (18ec <eeprom_read_ten_data+0x34>)
    18ca:	4798      	blx	r3
		target[i] = temp;
    18cc:	0063      	lsls	r3, r4, #1
    18ce:	191b      	adds	r3, r3, r4
    18d0:	0098      	lsls	r0, r3, #2
    18d2:	1830      	adds	r0, r6, r0
    18d4:	220c      	movs	r2, #12
    18d6:	a901      	add	r1, sp, #4
    18d8:	4b05      	ldr	r3, [pc, #20]	; (18f0 <eeprom_read_ten_data+0x38>)
    18da:	4798      	blx	r3
	for(uint8_t i = 0; i < 10; i++)
    18dc:	3401      	adds	r4, #1
    18de:	b2e4      	uxtb	r4, r4
		struct shield_data temp = spi_eeprom_read_address(address--);
    18e0:	0029      	movs	r1, r5
	for(uint8_t i = 0; i < 10; i++)
    18e2:	2c09      	cmp	r4, #9
    18e4:	d9ed      	bls.n	18c2 <eeprom_read_ten_data+0xa>
	}
    18e6:	b004      	add	sp, #16
    18e8:	bd70      	pop	{r4, r5, r6, pc}
    18ea:	46c0      	nop			; (mov r8, r8)
    18ec:	0000168d 	.word	0x0000168d
    18f0:	000054cd 	.word	0x000054cd

000018f4 <fiber1_callback>:
    usart_disable(&uartfiber_inst1);
	usart_disable(&uartfiber_inst2);
}

void fiber1_callback()
{
    18f4:	b510      	push	{r4, lr}
	uint8_t tempdata = fiber1_buffer;
    18f6:	4b14      	ldr	r3, [pc, #80]	; (1948 <fiber1_callback+0x54>)
    18f8:	781b      	ldrb	r3, [r3, #0]
    18fa:	b2db      	uxtb	r3, r3
	
	if(fiber1_data_status != data_ready)
    18fc:	4a13      	ldr	r2, [pc, #76]	; (194c <fiber1_callback+0x58>)
    18fe:	7812      	ldrb	r2, [r2, #0]
    1900:	2a01      	cmp	r2, #1
    1902:	d00b      	beq.n	191c <fiber1_callback+0x28>
	{
		if (tempdata == '$')
    1904:	2b24      	cmp	r3, #36	; 0x24
    1906:	d00f      	beq.n	1928 <fiber1_callback+0x34>
		{
			fiber1_pointer = 0;
			fiber1_data_status = data_being_processed;
		}
		else if(tempdata == '%' && fiber1_data_status == data_being_processed)
    1908:	2b25      	cmp	r3, #37	; 0x25
    190a:	d014      	beq.n	1936 <fiber1_callback+0x42>
		{
			fiber1_data_status = data_ready;
		}
		else
		{
			fiber1_data.bytes[fiber1_pointer++] = tempdata;
    190c:	4810      	ldr	r0, [pc, #64]	; (1950 <fiber1_callback+0x5c>)
    190e:	7802      	ldrb	r2, [r0, #0]
    1910:	b2d2      	uxtb	r2, r2
    1912:	1c51      	adds	r1, r2, #1
    1914:	b2c9      	uxtb	r1, r1
    1916:	7001      	strb	r1, [r0, #0]
    1918:	490e      	ldr	r1, [pc, #56]	; (1954 <fiber1_callback+0x60>)
    191a:	548b      	strb	r3, [r1, r2]
		}
	}
	usart_read_buffer_job(&uartfiber_inst1, &fiber1_buffer, 1);
    191c:	2201      	movs	r2, #1
    191e:	490a      	ldr	r1, [pc, #40]	; (1948 <fiber1_callback+0x54>)
    1920:	480d      	ldr	r0, [pc, #52]	; (1958 <fiber1_callback+0x64>)
    1922:	4b0e      	ldr	r3, [pc, #56]	; (195c <fiber1_callback+0x68>)
    1924:	4798      	blx	r3
}
    1926:	bd10      	pop	{r4, pc}
			fiber1_pointer = 0;
    1928:	2200      	movs	r2, #0
    192a:	4b09      	ldr	r3, [pc, #36]	; (1950 <fiber1_callback+0x5c>)
    192c:	701a      	strb	r2, [r3, #0]
			fiber1_data_status = data_being_processed;
    192e:	3202      	adds	r2, #2
    1930:	4b06      	ldr	r3, [pc, #24]	; (194c <fiber1_callback+0x58>)
    1932:	701a      	strb	r2, [r3, #0]
    1934:	e7f2      	b.n	191c <fiber1_callback+0x28>
		else if(tempdata == '%' && fiber1_data_status == data_being_processed)
    1936:	4a05      	ldr	r2, [pc, #20]	; (194c <fiber1_callback+0x58>)
    1938:	7812      	ldrb	r2, [r2, #0]
    193a:	2a02      	cmp	r2, #2
    193c:	d1e6      	bne.n	190c <fiber1_callback+0x18>
			fiber1_data_status = data_ready;
    193e:	3a01      	subs	r2, #1
    1940:	4b02      	ldr	r3, [pc, #8]	; (194c <fiber1_callback+0x58>)
    1942:	701a      	strb	r2, [r3, #0]
    1944:	e7ea      	b.n	191c <fiber1_callback+0x28>
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	200004a4 	.word	0x200004a4
    194c:	2000049c 	.word	0x2000049c
    1950:	200004a5 	.word	0x200004a5
    1954:	200004a0 	.word	0x200004a0
    1958:	200000d0 	.word	0x200000d0
    195c:	000043f9 	.word	0x000043f9

00001960 <fiber2_callback>:
void fiber2_callback()
{
    1960:	b510      	push	{r4, lr}
	uint8_t tempdata = fiber2_buffer;
    1962:	4b14      	ldr	r3, [pc, #80]	; (19b4 <fiber2_callback+0x54>)
    1964:	781b      	ldrb	r3, [r3, #0]
    1966:	b2db      	uxtb	r3, r3
	
	if(fiber2_data_status != data_ready)
    1968:	4a13      	ldr	r2, [pc, #76]	; (19b8 <fiber2_callback+0x58>)
    196a:	7812      	ldrb	r2, [r2, #0]
    196c:	2a01      	cmp	r2, #1
    196e:	d00b      	beq.n	1988 <fiber2_callback+0x28>
	{
		if (tempdata == '$')
    1970:	2b24      	cmp	r3, #36	; 0x24
    1972:	d00f      	beq.n	1994 <fiber2_callback+0x34>
		{
			fiber2_pointer = 0;
			fiber2_data_status = data_being_processed;
		}
		else if(tempdata == '%' && fiber2_data_status == data_being_processed)
    1974:	2b25      	cmp	r3, #37	; 0x25
    1976:	d014      	beq.n	19a2 <fiber2_callback+0x42>
		{
			fiber2_data_status = data_ready;
		}
		else
		{
			fiber2_data.bytes[fiber2_pointer++] = tempdata;
    1978:	4810      	ldr	r0, [pc, #64]	; (19bc <fiber2_callback+0x5c>)
    197a:	7802      	ldrb	r2, [r0, #0]
    197c:	b2d2      	uxtb	r2, r2
    197e:	1c51      	adds	r1, r2, #1
    1980:	b2c9      	uxtb	r1, r1
    1982:	7001      	strb	r1, [r0, #0]
    1984:	490e      	ldr	r1, [pc, #56]	; (19c0 <fiber2_callback+0x60>)
    1986:	548b      	strb	r3, [r1, r2]
		}
	}
	usart_read_buffer_job(&uartfiber_inst2, &fiber2_buffer, 1);
    1988:	2201      	movs	r2, #1
    198a:	490a      	ldr	r1, [pc, #40]	; (19b4 <fiber2_callback+0x54>)
    198c:	480d      	ldr	r0, [pc, #52]	; (19c4 <fiber2_callback+0x64>)
    198e:	4b0e      	ldr	r3, [pc, #56]	; (19c8 <fiber2_callback+0x68>)
    1990:	4798      	blx	r3
}
    1992:	bd10      	pop	{r4, pc}
			fiber2_pointer = 0;
    1994:	2200      	movs	r2, #0
    1996:	4b09      	ldr	r3, [pc, #36]	; (19bc <fiber2_callback+0x5c>)
    1998:	701a      	strb	r2, [r3, #0]
			fiber2_data_status = data_being_processed;
    199a:	3202      	adds	r2, #2
    199c:	4b06      	ldr	r3, [pc, #24]	; (19b8 <fiber2_callback+0x58>)
    199e:	701a      	strb	r2, [r3, #0]
    19a0:	e7f2      	b.n	1988 <fiber2_callback+0x28>
		else if(tempdata == '%' && fiber2_data_status == data_being_processed)
    19a2:	4a05      	ldr	r2, [pc, #20]	; (19b8 <fiber2_callback+0x58>)
    19a4:	7812      	ldrb	r2, [r2, #0]
    19a6:	2a02      	cmp	r2, #2
    19a8:	d1e6      	bne.n	1978 <fiber2_callback+0x18>
			fiber2_data_status = data_ready;
    19aa:	3a01      	subs	r2, #1
    19ac:	4b02      	ldr	r3, [pc, #8]	; (19b8 <fiber2_callback+0x58>)
    19ae:	701a      	strb	r2, [r3, #0]
    19b0:	e7ea      	b.n	1988 <fiber2_callback+0x28>
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	2000049f 	.word	0x2000049f
    19b8:	2000049d 	.word	0x2000049d
    19bc:	2000049e 	.word	0x2000049e
    19c0:	200004a8 	.word	0x200004a8
    19c4:	20000104 	.word	0x20000104
    19c8:	000043f9 	.word	0x000043f9

000019cc <uartfiber_init>:
{
    19cc:	b570      	push	{r4, r5, r6, lr}
    19ce:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    19d0:	2380      	movs	r3, #128	; 0x80
    19d2:	05db      	lsls	r3, r3, #23
    19d4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    19d6:	2300      	movs	r3, #0
    19d8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    19da:	22ff      	movs	r2, #255	; 0xff
    19dc:	4669      	mov	r1, sp
    19de:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    19e0:	2200      	movs	r2, #0
    19e2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    19e4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    19e6:	2101      	movs	r1, #1
    19e8:	2024      	movs	r0, #36	; 0x24
    19ea:	466c      	mov	r4, sp
    19ec:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    19ee:	3001      	adds	r0, #1
    19f0:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    19f2:	3125      	adds	r1, #37	; 0x25
    19f4:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    19f6:	3101      	adds	r1, #1
    19f8:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    19fa:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    19fc:	3105      	adds	r1, #5
    19fe:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1a00:	3101      	adds	r1, #1
    1a02:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1a04:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1a06:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1a08:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1a0a:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1a0c:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1a0e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1a10:	2313      	movs	r3, #19
    1a12:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1a14:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    1a16:	23e1      	movs	r3, #225	; 0xe1
    1a18:	019b      	lsls	r3, r3, #6
    1a1a:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX1;
    1a1c:	23c0      	movs	r3, #192	; 0xc0
    1a1e:	039b      	lsls	r3, r3, #14
    1a20:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1a22:	2301      	movs	r3, #1
    1a24:	425b      	negs	r3, r3
    1a26:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1a28:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    1a2a:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = URX_FIBER1;
    1a2c:	4b42      	ldr	r3, [pc, #264]	; (1b38 <uartfiber_init+0x16c>)
    1a2e:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst1, UART_FIBER1, &config_usart) != STATUS_OK);
    1a30:	466a      	mov	r2, sp
    1a32:	4942      	ldr	r1, [pc, #264]	; (1b3c <uartfiber_init+0x170>)
    1a34:	4842      	ldr	r0, [pc, #264]	; (1b40 <uartfiber_init+0x174>)
    1a36:	4b43      	ldr	r3, [pc, #268]	; (1b44 <uartfiber_init+0x178>)
    1a38:	4798      	blx	r3
    1a3a:	2800      	cmp	r0, #0
    1a3c:	d1f8      	bne.n	1a30 <uartfiber_init+0x64>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a3e:	4b40      	ldr	r3, [pc, #256]	; (1b40 <uartfiber_init+0x174>)
    1a40:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1a42:	0020      	movs	r0, r4
    1a44:	4b40      	ldr	r3, [pc, #256]	; (1b48 <uartfiber_init+0x17c>)
    1a46:	4798      	blx	r3
    1a48:	231f      	movs	r3, #31
    1a4a:	4018      	ands	r0, r3
    1a4c:	3b1e      	subs	r3, #30
    1a4e:	4083      	lsls	r3, r0
    1a50:	4a3e      	ldr	r2, [pc, #248]	; (1b4c <uartfiber_init+0x180>)
    1a52:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a54:	4b3a      	ldr	r3, [pc, #232]	; (1b40 <uartfiber_init+0x174>)
    1a56:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1a58:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d1fa      	bne.n	1a54 <uartfiber_init+0x88>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1a5e:	6823      	ldr	r3, [r4, #0]
    1a60:	2202      	movs	r2, #2
    1a62:	4313      	orrs	r3, r2
    1a64:	6023      	str	r3, [r4, #0]
	config->data_order       = USART_DATAORDER_LSB;
    1a66:	2380      	movs	r3, #128	; 0x80
    1a68:	05db      	lsls	r3, r3, #23
    1a6a:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1a6c:	2300      	movs	r3, #0
    1a6e:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1a70:	32fd      	adds	r2, #253	; 0xfd
    1a72:	4669      	mov	r1, sp
    1a74:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1a76:	2200      	movs	r2, #0
    1a78:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1a7a:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    1a7c:	2101      	movs	r1, #1
    1a7e:	2024      	movs	r0, #36	; 0x24
    1a80:	466c      	mov	r4, sp
    1a82:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1a84:	3001      	adds	r0, #1
    1a86:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1a88:	3125      	adds	r1, #37	; 0x25
    1a8a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1a8c:	3101      	adds	r1, #1
    1a8e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1a90:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    1a92:	3105      	adds	r1, #5
    1a94:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1a96:	3101      	adds	r1, #1
    1a98:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1a9a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1a9c:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    1a9e:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    1aa0:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    1aa2:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    1aa4:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1aa6:	2313      	movs	r3, #19
    1aa8:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    1aaa:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    1aac:	23e1      	movs	r3, #225	; 0xe1
    1aae:	019b      	lsls	r3, r3, #6
    1ab0:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX2;
    1ab2:	2380      	movs	r3, #128	; 0x80
    1ab4:	025b      	lsls	r3, r3, #9
    1ab6:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = URX_FIBER2;
    1ab8:	4b25      	ldr	r3, [pc, #148]	; (1b50 <uartfiber_init+0x184>)
    1aba:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1abc:	2301      	movs	r3, #1
    1abe:	425b      	negs	r3, r3
    1ac0:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    1ac2:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    1ac4:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst2, UART_FIBER2, &config_usart) != STATUS_OK);
    1ac6:	466a      	mov	r2, sp
    1ac8:	4922      	ldr	r1, [pc, #136]	; (1b54 <uartfiber_init+0x188>)
    1aca:	4823      	ldr	r0, [pc, #140]	; (1b58 <uartfiber_init+0x18c>)
    1acc:	4b1d      	ldr	r3, [pc, #116]	; (1b44 <uartfiber_init+0x178>)
    1ace:	4798      	blx	r3
    1ad0:	2800      	cmp	r0, #0
    1ad2:	d1f8      	bne.n	1ac6 <uartfiber_init+0xfa>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ad4:	4b20      	ldr	r3, [pc, #128]	; (1b58 <uartfiber_init+0x18c>)
    1ad6:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ad8:	0020      	movs	r0, r4
    1ada:	4b1b      	ldr	r3, [pc, #108]	; (1b48 <uartfiber_init+0x17c>)
    1adc:	4798      	blx	r3
    1ade:	231f      	movs	r3, #31
    1ae0:	4018      	ands	r0, r3
    1ae2:	3b1e      	subs	r3, #30
    1ae4:	4083      	lsls	r3, r0
    1ae6:	4a19      	ldr	r2, [pc, #100]	; (1b4c <uartfiber_init+0x180>)
    1ae8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1aea:	4b1b      	ldr	r3, [pc, #108]	; (1b58 <uartfiber_init+0x18c>)
    1aec:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1aee:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1af0:	2b00      	cmp	r3, #0
    1af2:	d1fa      	bne.n	1aea <uartfiber_init+0x11e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1af4:	6823      	ldr	r3, [r4, #0]
    1af6:	2202      	movs	r2, #2
    1af8:	4313      	orrs	r3, r2
    1afa:	6023      	str	r3, [r4, #0]
	usart_register_callback(&uartfiber_inst1, fiber1_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1afc:	4d10      	ldr	r5, [pc, #64]	; (1b40 <uartfiber_init+0x174>)
    1afe:	3a01      	subs	r2, #1
    1b00:	4916      	ldr	r1, [pc, #88]	; (1b5c <uartfiber_init+0x190>)
    1b02:	0028      	movs	r0, r5
    1b04:	4e16      	ldr	r6, [pc, #88]	; (1b60 <uartfiber_init+0x194>)
    1b06:	47b0      	blx	r6
	usart_register_callback(&uartfiber_inst2, fiber2_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1b08:	4c13      	ldr	r4, [pc, #76]	; (1b58 <uartfiber_init+0x18c>)
    1b0a:	2201      	movs	r2, #1
    1b0c:	4915      	ldr	r1, [pc, #84]	; (1b64 <uartfiber_init+0x198>)
    1b0e:	0020      	movs	r0, r4
    1b10:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1b12:	2331      	movs	r3, #49	; 0x31
    1b14:	2002      	movs	r0, #2
    1b16:	5ce9      	ldrb	r1, [r5, r3]
    1b18:	4301      	orrs	r1, r0
    1b1a:	54e9      	strb	r1, [r5, r3]
    1b1c:	5ce2      	ldrb	r2, [r4, r3]
    1b1e:	4302      	orrs	r2, r0
    1b20:	54e2      	strb	r2, [r4, r3]
	usart_read_buffer_job(&uartfiber_inst1, &fiber1_buffer, 1);
    1b22:	2201      	movs	r2, #1
    1b24:	4910      	ldr	r1, [pc, #64]	; (1b68 <uartfiber_init+0x19c>)
    1b26:	0028      	movs	r0, r5
    1b28:	4d10      	ldr	r5, [pc, #64]	; (1b6c <uartfiber_init+0x1a0>)
    1b2a:	47a8      	blx	r5
	usart_read_buffer_job(&uartfiber_inst2, &fiber2_buffer, 1);
    1b2c:	2201      	movs	r2, #1
    1b2e:	4910      	ldr	r1, [pc, #64]	; (1b70 <uartfiber_init+0x1a4>)
    1b30:	0020      	movs	r0, r4
    1b32:	47a8      	blx	r5
}
    1b34:	b010      	add	sp, #64	; 0x40
    1b36:	bd70      	pop	{r4, r5, r6, pc}
    1b38:	00130002 	.word	0x00130002
    1b3c:	42000c00 	.word	0x42000c00
    1b40:	200000d0 	.word	0x200000d0
    1b44:	00004239 	.word	0x00004239
    1b48:	000045fd 	.word	0x000045fd
    1b4c:	e000e100 	.word	0xe000e100
    1b50:	00300002 	.word	0x00300002
    1b54:	42001c00 	.word	0x42001c00
    1b58:	20000104 	.word	0x20000104
    1b5c:	000018f5 	.word	0x000018f5
    1b60:	000043d1 	.word	0x000043d1
    1b64:	00001961 	.word	0x00001961
    1b68:	200004a4 	.word	0x200004a4
    1b6c:	000043f9 	.word	0x000043f9
    1b70:	2000049f 	.word	0x2000049f

00001b74 <Ft_Gpu_Copro_SendCmd>:
    1b74:	b510      	push	{r4, lr}
    1b76:	4b01      	ldr	r3, [pc, #4]	; (1b7c <Ft_Gpu_Copro_SendCmd+0x8>)
    1b78:	4798      	blx	r3
    1b7a:	bd10      	pop	{r4, pc}
    1b7c:	00002055 	.word	0x00002055

00001b80 <Ft_Gpu_CoCmd_SendStr>:
    1b80:	b510      	push	{r4, lr}
    1b82:	4b01      	ldr	r3, [pc, #4]	; (1b88 <Ft_Gpu_CoCmd_SendStr+0x8>)
    1b84:	4798      	blx	r3
    1b86:	bd10      	pop	{r4, pc}
    1b88:	00001fe5 	.word	0x00001fe5

00001b8c <Ft_Gpu_CoCmd_StartFunc>:
    1b8c:	b570      	push	{r4, r5, r6, lr}
    1b8e:	0004      	movs	r4, r0
    1b90:	000d      	movs	r5, r1
    1b92:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <Ft_Gpu_CoCmd_StartFunc+0x18>)
    1b94:	4798      	blx	r3
    1b96:	002a      	movs	r2, r5
    1b98:	2101      	movs	r1, #1
    1b9a:	0020      	movs	r0, r4
    1b9c:	4b02      	ldr	r3, [pc, #8]	; (1ba8 <Ft_Gpu_CoCmd_StartFunc+0x1c>)
    1b9e:	4798      	blx	r3
    1ba0:	bd70      	pop	{r4, r5, r6, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	000021c5 	.word	0x000021c5
    1ba8:	00001f8d 	.word	0x00001f8d

00001bac <Ft_Gpu_CoCmd_EndFunc>:
    1bac:	b570      	push	{r4, r5, r6, lr}
    1bae:	0004      	movs	r4, r0
    1bb0:	000d      	movs	r5, r1
    1bb2:	4b03      	ldr	r3, [pc, #12]	; (1bc0 <Ft_Gpu_CoCmd_EndFunc+0x14>)
    1bb4:	4798      	blx	r3
    1bb6:	0029      	movs	r1, r5
    1bb8:	0020      	movs	r0, r4
    1bba:	4b02      	ldr	r3, [pc, #8]	; (1bc4 <Ft_Gpu_CoCmd_EndFunc+0x18>)
    1bbc:	4798      	blx	r3
    1bbe:	bd70      	pop	{r4, r5, r6, pc}
    1bc0:	00002089 	.word	0x00002089
    1bc4:	00002179 	.word	0x00002179

00001bc8 <Ft_Gpu_CoCmd_Text>:
    1bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bca:	46d6      	mov	lr, sl
    1bcc:	464f      	mov	r7, r9
    1bce:	b580      	push	{r7, lr}
    1bd0:	b083      	sub	sp, #12
    1bd2:	0005      	movs	r5, r0
    1bd4:	468a      	mov	sl, r1
    1bd6:	4691      	mov	r9, r2
    1bd8:	001f      	movs	r7, r3
    1bda:	ab0a      	add	r3, sp, #40	; 0x28
    1bdc:	881e      	ldrh	r6, [r3, #0]
    1bde:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1be0:	4b15      	ldr	r3, [pc, #84]	; (1c38 <Ft_Gpu_CoCmd_Text+0x70>)
    1be2:	4798      	blx	r3
    1be4:	b280      	uxth	r0, r0
    1be6:	300d      	adds	r0, #13
    1be8:	b284      	uxth	r4, r0
    1bea:	0021      	movs	r1, r4
    1bec:	0028      	movs	r0, r5
    1bee:	4b13      	ldr	r3, [pc, #76]	; (1c3c <Ft_Gpu_CoCmd_Text+0x74>)
    1bf0:	4798      	blx	r3
    1bf2:	21f4      	movs	r1, #244	; 0xf4
    1bf4:	4249      	negs	r1, r1
    1bf6:	9501      	str	r5, [sp, #4]
    1bf8:	0028      	movs	r0, r5
    1bfa:	4d11      	ldr	r5, [pc, #68]	; (1c40 <Ft_Gpu_CoCmd_Text+0x78>)
    1bfc:	47a8      	blx	r5
    1bfe:	464b      	mov	r3, r9
    1c00:	0419      	lsls	r1, r3, #16
    1c02:	4653      	mov	r3, sl
    1c04:	041b      	lsls	r3, r3, #16
    1c06:	0c1b      	lsrs	r3, r3, #16
    1c08:	4319      	orrs	r1, r3
    1c0a:	9801      	ldr	r0, [sp, #4]
    1c0c:	47a8      	blx	r5
    1c0e:	0436      	lsls	r6, r6, #16
    1c10:	0439      	lsls	r1, r7, #16
    1c12:	0c09      	lsrs	r1, r1, #16
    1c14:	4331      	orrs	r1, r6
    1c16:	9e01      	ldr	r6, [sp, #4]
    1c18:	0030      	movs	r0, r6
    1c1a:	47a8      	blx	r5
    1c1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c1e:	0030      	movs	r0, r6
    1c20:	4b08      	ldr	r3, [pc, #32]	; (1c44 <Ft_Gpu_CoCmd_Text+0x7c>)
    1c22:	4798      	blx	r3
    1c24:	0021      	movs	r1, r4
    1c26:	0030      	movs	r0, r6
    1c28:	4b07      	ldr	r3, [pc, #28]	; (1c48 <Ft_Gpu_CoCmd_Text+0x80>)
    1c2a:	4798      	blx	r3
    1c2c:	b003      	add	sp, #12
    1c2e:	bc0c      	pop	{r2, r3}
    1c30:	4691      	mov	r9, r2
    1c32:	469a      	mov	sl, r3
    1c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	00005555 	.word	0x00005555
    1c3c:	00001b8d 	.word	0x00001b8d
    1c40:	00001b75 	.word	0x00001b75
    1c44:	00001b81 	.word	0x00001b81
    1c48:	00001bad 	.word	0x00001bad

00001c4c <Ft_Gpu_CoCmd_Number>:
    1c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c4e:	46c6      	mov	lr, r8
    1c50:	b500      	push	{lr}
    1c52:	b082      	sub	sp, #8
    1c54:	0007      	movs	r7, r0
    1c56:	000c      	movs	r4, r1
    1c58:	4690      	mov	r8, r2
    1c5a:	001e      	movs	r6, r3
    1c5c:	ab08      	add	r3, sp, #32
    1c5e:	881d      	ldrh	r5, [r3, #0]
    1c60:	2110      	movs	r1, #16
    1c62:	4b10      	ldr	r3, [pc, #64]	; (1ca4 <Ft_Gpu_CoCmd_Number+0x58>)
    1c64:	4798      	blx	r3
    1c66:	21d2      	movs	r1, #210	; 0xd2
    1c68:	4249      	negs	r1, r1
    1c6a:	9701      	str	r7, [sp, #4]
    1c6c:	0038      	movs	r0, r7
    1c6e:	4f0e      	ldr	r7, [pc, #56]	; (1ca8 <Ft_Gpu_CoCmd_Number+0x5c>)
    1c70:	47b8      	blx	r7
    1c72:	4643      	mov	r3, r8
    1c74:	0419      	lsls	r1, r3, #16
    1c76:	0423      	lsls	r3, r4, #16
    1c78:	0c1b      	lsrs	r3, r3, #16
    1c7a:	4319      	orrs	r1, r3
    1c7c:	9c01      	ldr	r4, [sp, #4]
    1c7e:	0020      	movs	r0, r4
    1c80:	47b8      	blx	r7
    1c82:	042d      	lsls	r5, r5, #16
    1c84:	0431      	lsls	r1, r6, #16
    1c86:	0c09      	lsrs	r1, r1, #16
    1c88:	4329      	orrs	r1, r5
    1c8a:	0020      	movs	r0, r4
    1c8c:	47b8      	blx	r7
    1c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c90:	0020      	movs	r0, r4
    1c92:	47b8      	blx	r7
    1c94:	2110      	movs	r1, #16
    1c96:	0020      	movs	r0, r4
    1c98:	4b04      	ldr	r3, [pc, #16]	; (1cac <Ft_Gpu_CoCmd_Number+0x60>)
    1c9a:	4798      	blx	r3
    1c9c:	b002      	add	sp, #8
    1c9e:	bc04      	pop	{r2}
    1ca0:	4690      	mov	r8, r2
    1ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ca4:	00001b8d 	.word	0x00001b8d
    1ca8:	00001b75 	.word	0x00001b75
    1cac:	00001bad 	.word	0x00001bad

00001cb0 <Ft_Gpu_CoCmd_Swap>:
    1cb0:	b510      	push	{r4, lr}
    1cb2:	0004      	movs	r4, r0
    1cb4:	2104      	movs	r1, #4
    1cb6:	4b06      	ldr	r3, [pc, #24]	; (1cd0 <Ft_Gpu_CoCmd_Swap+0x20>)
    1cb8:	4798      	blx	r3
    1cba:	21ff      	movs	r1, #255	; 0xff
    1cbc:	4249      	negs	r1, r1
    1cbe:	0020      	movs	r0, r4
    1cc0:	4b04      	ldr	r3, [pc, #16]	; (1cd4 <Ft_Gpu_CoCmd_Swap+0x24>)
    1cc2:	4798      	blx	r3
    1cc4:	2104      	movs	r1, #4
    1cc6:	0020      	movs	r0, r4
    1cc8:	4b03      	ldr	r3, [pc, #12]	; (1cd8 <Ft_Gpu_CoCmd_Swap+0x28>)
    1cca:	4798      	blx	r3
    1ccc:	bd10      	pop	{r4, pc}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	00001b8d 	.word	0x00001b8d
    1cd4:	00001b75 	.word	0x00001b75
    1cd8:	00001bad 	.word	0x00001bad

00001cdc <Ft_Gpu_CoCmd_Button>:
    1cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cde:	46de      	mov	lr, fp
    1ce0:	4657      	mov	r7, sl
    1ce2:	464e      	mov	r6, r9
    1ce4:	4645      	mov	r5, r8
    1ce6:	b5e0      	push	{r5, r6, r7, lr}
    1ce8:	b083      	sub	sp, #12
    1cea:	0005      	movs	r5, r0
    1cec:	468a      	mov	sl, r1
    1cee:	4691      	mov	r9, r2
    1cf0:	469b      	mov	fp, r3
    1cf2:	ab0c      	add	r3, sp, #48	; 0x30
    1cf4:	2200      	movs	r2, #0
    1cf6:	5e9b      	ldrsh	r3, [r3, r2]
    1cf8:	4698      	mov	r8, r3
    1cfa:	ab0d      	add	r3, sp, #52	; 0x34
    1cfc:	2700      	movs	r7, #0
    1cfe:	5fdf      	ldrsh	r7, [r3, r7]
    1d00:	ab0e      	add	r3, sp, #56	; 0x38
    1d02:	881e      	ldrh	r6, [r3, #0]
    1d04:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1d06:	4b1a      	ldr	r3, [pc, #104]	; (1d70 <Ft_Gpu_CoCmd_Button+0x94>)
    1d08:	4798      	blx	r3
    1d0a:	b280      	uxth	r0, r0
    1d0c:	3011      	adds	r0, #17
    1d0e:	b284      	uxth	r4, r0
    1d10:	0021      	movs	r1, r4
    1d12:	0028      	movs	r0, r5
    1d14:	4b17      	ldr	r3, [pc, #92]	; (1d74 <Ft_Gpu_CoCmd_Button+0x98>)
    1d16:	4798      	blx	r3
    1d18:	21f3      	movs	r1, #243	; 0xf3
    1d1a:	4249      	negs	r1, r1
    1d1c:	9501      	str	r5, [sp, #4]
    1d1e:	0028      	movs	r0, r5
    1d20:	4d15      	ldr	r5, [pc, #84]	; (1d78 <Ft_Gpu_CoCmd_Button+0x9c>)
    1d22:	47a8      	blx	r5
    1d24:	464b      	mov	r3, r9
    1d26:	0419      	lsls	r1, r3, #16
    1d28:	4653      	mov	r3, sl
    1d2a:	041b      	lsls	r3, r3, #16
    1d2c:	0c1b      	lsrs	r3, r3, #16
    1d2e:	4319      	orrs	r1, r3
    1d30:	9801      	ldr	r0, [sp, #4]
    1d32:	47a8      	blx	r5
    1d34:	4643      	mov	r3, r8
    1d36:	0419      	lsls	r1, r3, #16
    1d38:	465b      	mov	r3, fp
    1d3a:	041b      	lsls	r3, r3, #16
    1d3c:	0c1b      	lsrs	r3, r3, #16
    1d3e:	4319      	orrs	r1, r3
    1d40:	9801      	ldr	r0, [sp, #4]
    1d42:	47a8      	blx	r5
    1d44:	0436      	lsls	r6, r6, #16
    1d46:	0439      	lsls	r1, r7, #16
    1d48:	0c09      	lsrs	r1, r1, #16
    1d4a:	4331      	orrs	r1, r6
    1d4c:	9e01      	ldr	r6, [sp, #4]
    1d4e:	0030      	movs	r0, r6
    1d50:	47a8      	blx	r5
    1d52:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1d54:	0030      	movs	r0, r6
    1d56:	4b09      	ldr	r3, [pc, #36]	; (1d7c <Ft_Gpu_CoCmd_Button+0xa0>)
    1d58:	4798      	blx	r3
    1d5a:	0021      	movs	r1, r4
    1d5c:	0030      	movs	r0, r6
    1d5e:	4b08      	ldr	r3, [pc, #32]	; (1d80 <Ft_Gpu_CoCmd_Button+0xa4>)
    1d60:	4798      	blx	r3
    1d62:	b003      	add	sp, #12
    1d64:	bc3c      	pop	{r2, r3, r4, r5}
    1d66:	4690      	mov	r8, r2
    1d68:	4699      	mov	r9, r3
    1d6a:	46a2      	mov	sl, r4
    1d6c:	46ab      	mov	fp, r5
    1d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d70:	00005555 	.word	0x00005555
    1d74:	00001b8d 	.word	0x00001b8d
    1d78:	00001b75 	.word	0x00001b75
    1d7c:	00001b81 	.word	0x00001b81
    1d80:	00001bad 	.word	0x00001bad

00001d84 <Ft_Gpu_CoCmd_Calibrate>:
    1d84:	b570      	push	{r4, r5, r6, lr}
    1d86:	0004      	movs	r4, r0
    1d88:	000e      	movs	r6, r1
    1d8a:	2108      	movs	r1, #8
    1d8c:	4b08      	ldr	r3, [pc, #32]	; (1db0 <Ft_Gpu_CoCmd_Calibrate+0x2c>)
    1d8e:	4798      	blx	r3
    1d90:	21eb      	movs	r1, #235	; 0xeb
    1d92:	4249      	negs	r1, r1
    1d94:	0020      	movs	r0, r4
    1d96:	4d07      	ldr	r5, [pc, #28]	; (1db4 <Ft_Gpu_CoCmd_Calibrate+0x30>)
    1d98:	47a8      	blx	r5
    1d9a:	0031      	movs	r1, r6
    1d9c:	0020      	movs	r0, r4
    1d9e:	47a8      	blx	r5
    1da0:	2108      	movs	r1, #8
    1da2:	0020      	movs	r0, r4
    1da4:	4b04      	ldr	r3, [pc, #16]	; (1db8 <Ft_Gpu_CoCmd_Calibrate+0x34>)
    1da6:	4798      	blx	r3
    1da8:	0020      	movs	r0, r4
    1daa:	4b04      	ldr	r3, [pc, #16]	; (1dbc <Ft_Gpu_CoCmd_Calibrate+0x38>)
    1dac:	4798      	blx	r3
    1dae:	bd70      	pop	{r4, r5, r6, pc}
    1db0:	00001b8d 	.word	0x00001b8d
    1db4:	00001b75 	.word	0x00001b75
    1db8:	00001bad 	.word	0x00001bad
    1dbc:	000021dd 	.word	0x000021dd

00001dc0 <Ft_Gpu_CoCmd_Append>:
    1dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dc2:	0004      	movs	r4, r0
    1dc4:	000f      	movs	r7, r1
    1dc6:	0016      	movs	r6, r2
    1dc8:	210c      	movs	r1, #12
    1dca:	4b09      	ldr	r3, [pc, #36]	; (1df0 <Ft_Gpu_CoCmd_Append+0x30>)
    1dcc:	4798      	blx	r3
    1dce:	21e2      	movs	r1, #226	; 0xe2
    1dd0:	4249      	negs	r1, r1
    1dd2:	0020      	movs	r0, r4
    1dd4:	4d07      	ldr	r5, [pc, #28]	; (1df4 <Ft_Gpu_CoCmd_Append+0x34>)
    1dd6:	47a8      	blx	r5
    1dd8:	0039      	movs	r1, r7
    1dda:	0020      	movs	r0, r4
    1ddc:	47a8      	blx	r5
    1dde:	0031      	movs	r1, r6
    1de0:	0020      	movs	r0, r4
    1de2:	47a8      	blx	r5
    1de4:	210c      	movs	r1, #12
    1de6:	0020      	movs	r0, r4
    1de8:	4b03      	ldr	r3, [pc, #12]	; (1df8 <Ft_Gpu_CoCmd_Append+0x38>)
    1dea:	4798      	blx	r3
    1dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	00001b8d 	.word	0x00001b8d
    1df4:	00001b75 	.word	0x00001b75
    1df8:	00001bad 	.word	0x00001bad

00001dfc <Ft_Gpu_CoCmd_Gradient>:
    1dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dfe:	46d6      	mov	lr, sl
    1e00:	464f      	mov	r7, r9
    1e02:	b580      	push	{r7, lr}
    1e04:	b083      	sub	sp, #12
    1e06:	0004      	movs	r4, r0
    1e08:	468a      	mov	sl, r1
    1e0a:	4691      	mov	r9, r2
    1e0c:	9301      	str	r3, [sp, #4]
    1e0e:	ab0a      	add	r3, sp, #40	; 0x28
    1e10:	2200      	movs	r2, #0
    1e12:	5e9f      	ldrsh	r7, [r3, r2]
    1e14:	ab0b      	add	r3, sp, #44	; 0x2c
    1e16:	2200      	movs	r2, #0
    1e18:	5e9e      	ldrsh	r6, [r3, r2]
    1e1a:	2114      	movs	r1, #20
    1e1c:	4b11      	ldr	r3, [pc, #68]	; (1e64 <Ft_Gpu_CoCmd_Gradient+0x68>)
    1e1e:	4798      	blx	r3
    1e20:	21f5      	movs	r1, #245	; 0xf5
    1e22:	4249      	negs	r1, r1
    1e24:	0020      	movs	r0, r4
    1e26:	4d10      	ldr	r5, [pc, #64]	; (1e68 <Ft_Gpu_CoCmd_Gradient+0x6c>)
    1e28:	47a8      	blx	r5
    1e2a:	464a      	mov	r2, r9
    1e2c:	0411      	lsls	r1, r2, #16
    1e2e:	4652      	mov	r2, sl
    1e30:	0413      	lsls	r3, r2, #16
    1e32:	0c1b      	lsrs	r3, r3, #16
    1e34:	4319      	orrs	r1, r3
    1e36:	0020      	movs	r0, r4
    1e38:	47a8      	blx	r5
    1e3a:	9901      	ldr	r1, [sp, #4]
    1e3c:	0020      	movs	r0, r4
    1e3e:	47a8      	blx	r5
    1e40:	0436      	lsls	r6, r6, #16
    1e42:	0439      	lsls	r1, r7, #16
    1e44:	0c09      	lsrs	r1, r1, #16
    1e46:	4331      	orrs	r1, r6
    1e48:	0020      	movs	r0, r4
    1e4a:	47a8      	blx	r5
    1e4c:	990c      	ldr	r1, [sp, #48]	; 0x30
    1e4e:	0020      	movs	r0, r4
    1e50:	47a8      	blx	r5
    1e52:	2114      	movs	r1, #20
    1e54:	0020      	movs	r0, r4
    1e56:	4b05      	ldr	r3, [pc, #20]	; (1e6c <Ft_Gpu_CoCmd_Gradient+0x70>)
    1e58:	4798      	blx	r3
    1e5a:	b003      	add	sp, #12
    1e5c:	bc0c      	pop	{r2, r3}
    1e5e:	4691      	mov	r9, r2
    1e60:	469a      	mov	sl, r3
    1e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e64:	00001b8d 	.word	0x00001b8d
    1e68:	00001b75 	.word	0x00001b75
    1e6c:	00001bad 	.word	0x00001bad

00001e70 <Ft_Gpu_CoCmd_Keys>:
    1e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e72:	46de      	mov	lr, fp
    1e74:	4657      	mov	r7, sl
    1e76:	464e      	mov	r6, r9
    1e78:	4645      	mov	r5, r8
    1e7a:	b5e0      	push	{r5, r6, r7, lr}
    1e7c:	b083      	sub	sp, #12
    1e7e:	0005      	movs	r5, r0
    1e80:	468a      	mov	sl, r1
    1e82:	4691      	mov	r9, r2
    1e84:	469b      	mov	fp, r3
    1e86:	ab0c      	add	r3, sp, #48	; 0x30
    1e88:	2200      	movs	r2, #0
    1e8a:	5e9b      	ldrsh	r3, [r3, r2]
    1e8c:	4698      	mov	r8, r3
    1e8e:	ab0d      	add	r3, sp, #52	; 0x34
    1e90:	2700      	movs	r7, #0
    1e92:	5fdf      	ldrsh	r7, [r3, r7]
    1e94:	ab0e      	add	r3, sp, #56	; 0x38
    1e96:	881e      	ldrh	r6, [r3, #0]
    1e98:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1e9a:	4b1a      	ldr	r3, [pc, #104]	; (1f04 <Ft_Gpu_CoCmd_Keys+0x94>)
    1e9c:	4798      	blx	r3
    1e9e:	b280      	uxth	r0, r0
    1ea0:	3011      	adds	r0, #17
    1ea2:	b284      	uxth	r4, r0
    1ea4:	0021      	movs	r1, r4
    1ea6:	0028      	movs	r0, r5
    1ea8:	4b17      	ldr	r3, [pc, #92]	; (1f08 <Ft_Gpu_CoCmd_Keys+0x98>)
    1eaa:	4798      	blx	r3
    1eac:	21f2      	movs	r1, #242	; 0xf2
    1eae:	4249      	negs	r1, r1
    1eb0:	9501      	str	r5, [sp, #4]
    1eb2:	0028      	movs	r0, r5
    1eb4:	4d15      	ldr	r5, [pc, #84]	; (1f0c <Ft_Gpu_CoCmd_Keys+0x9c>)
    1eb6:	47a8      	blx	r5
    1eb8:	464b      	mov	r3, r9
    1eba:	0419      	lsls	r1, r3, #16
    1ebc:	4653      	mov	r3, sl
    1ebe:	041b      	lsls	r3, r3, #16
    1ec0:	0c1b      	lsrs	r3, r3, #16
    1ec2:	4319      	orrs	r1, r3
    1ec4:	9801      	ldr	r0, [sp, #4]
    1ec6:	47a8      	blx	r5
    1ec8:	4643      	mov	r3, r8
    1eca:	0419      	lsls	r1, r3, #16
    1ecc:	465b      	mov	r3, fp
    1ece:	041b      	lsls	r3, r3, #16
    1ed0:	0c1b      	lsrs	r3, r3, #16
    1ed2:	4319      	orrs	r1, r3
    1ed4:	9801      	ldr	r0, [sp, #4]
    1ed6:	47a8      	blx	r5
    1ed8:	0436      	lsls	r6, r6, #16
    1eda:	0439      	lsls	r1, r7, #16
    1edc:	0c09      	lsrs	r1, r1, #16
    1ede:	4331      	orrs	r1, r6
    1ee0:	9e01      	ldr	r6, [sp, #4]
    1ee2:	0030      	movs	r0, r6
    1ee4:	47a8      	blx	r5
    1ee6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1ee8:	0030      	movs	r0, r6
    1eea:	4b09      	ldr	r3, [pc, #36]	; (1f10 <Ft_Gpu_CoCmd_Keys+0xa0>)
    1eec:	4798      	blx	r3
    1eee:	0021      	movs	r1, r4
    1ef0:	0030      	movs	r0, r6
    1ef2:	4b08      	ldr	r3, [pc, #32]	; (1f14 <Ft_Gpu_CoCmd_Keys+0xa4>)
    1ef4:	4798      	blx	r3
    1ef6:	b003      	add	sp, #12
    1ef8:	bc3c      	pop	{r2, r3, r4, r5}
    1efa:	4690      	mov	r8, r2
    1efc:	4699      	mov	r9, r3
    1efe:	46a2      	mov	sl, r4
    1f00:	46ab      	mov	fp, r5
    1f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f04:	00005555 	.word	0x00005555
    1f08:	00001b8d 	.word	0x00001b8d
    1f0c:	00001b75 	.word	0x00001b75
    1f10:	00001b81 	.word	0x00001b81
    1f14:	00001bad 	.word	0x00001bad

00001f18 <Ft_Gpu_CoCmd_Dlstart>:
    1f18:	b510      	push	{r4, lr}
    1f1a:	0004      	movs	r4, r0
    1f1c:	2104      	movs	r1, #4
    1f1e:	4b05      	ldr	r3, [pc, #20]	; (1f34 <Ft_Gpu_CoCmd_Dlstart+0x1c>)
    1f20:	4798      	blx	r3
    1f22:	4905      	ldr	r1, [pc, #20]	; (1f38 <Ft_Gpu_CoCmd_Dlstart+0x20>)
    1f24:	0020      	movs	r0, r4
    1f26:	4b05      	ldr	r3, [pc, #20]	; (1f3c <Ft_Gpu_CoCmd_Dlstart+0x24>)
    1f28:	4798      	blx	r3
    1f2a:	2104      	movs	r1, #4
    1f2c:	0020      	movs	r0, r4
    1f2e:	4b04      	ldr	r3, [pc, #16]	; (1f40 <Ft_Gpu_CoCmd_Dlstart+0x28>)
    1f30:	4798      	blx	r3
    1f32:	bd10      	pop	{r4, pc}
    1f34:	00001b8d 	.word	0x00001b8d
    1f38:	ffffff00 	.word	0xffffff00
    1f3c:	00001b75 	.word	0x00001b75
    1f40:	00001bad 	.word	0x00001bad

00001f44 <Ft_Gpu_Hal_Open>:
	return true;
}


ft_bool_t Ft_Gpu_Hal_Open(Ft_Gpu_Hal_Context_t *host)
{
    1f44:	b510      	push	{r4, lr}
     * the pinmux settings and the SPI init, so it's all done
     * in Ft_Gpu_Hal_Init().
     */
    
    // init current write buffer to zero, since we're just starting up
	host->ft_cmd_fifo_wp = host->ft_dl_buff_wp = 0;
    1f46:	2200      	movs	r2, #0
    1f48:	2300      	movs	r3, #0
    1f4a:	8142      	strh	r2, [r0, #10]
    1f4c:	8102      	strh	r2, [r0, #8]
    // by default ft800/801/810/811 goes with single dummy byte for read
	host->spinumdummy = 1;
    1f4e:	3201      	adds	r2, #1
    1f50:	7542      	strb	r2, [r0, #21]
    // technically one channel, but zero for how the FT library does things
	host->spichannel = 0;
    1f52:	7503      	strb	r3, [r0, #20]
    // indicate it's ready to go
	host->status = FT_GPU_HAL_OPENED;
    1f54:	7303      	strb	r3, [r0, #12]

    lcd_set_ft_host_ptr(host);
    1f56:	4b02      	ldr	r3, [pc, #8]	; (1f60 <Ft_Gpu_Hal_Open+0x1c>)
    1f58:	4798      	blx	r3

	return true;
}
    1f5a:	2001      	movs	r0, #1
    1f5c:	bd10      	pop	{r4, pc}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	00003c71 	.word	0x00003c71

00001f64 <Ft_Gpu_Hal_StartTransfer>:
}


/*The APIs for reading/writing transfer continuously only with small buffer system*/
ft_void_t  Ft_Gpu_Hal_StartTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint32_t addr)
{
    1f64:	b510      	push	{r4, lr}
    1f66:	0004      	movs	r4, r0
    /* determine if it's a read or write. This affects the preamble send to the
     * LCD (preamble = direction bits and address). */
	if (FT_GPU_READ == rw)
    1f68:	2900      	cmp	r1, #0
    1f6a:	d006      	beq.n	1f7a <Ft_Gpu_Hal_StartTransfer+0x16>
		host->status = FT_GPU_HAL_READING;
	}
    else
    {
        // begin a write transfer
	    lcd_start_xfer(addr, WRT);
    1f6c:	2101      	movs	r1, #1
    1f6e:	0010      	movs	r0, r2
    1f70:	4b05      	ldr	r3, [pc, #20]	; (1f88 <Ft_Gpu_Hal_StartTransfer+0x24>)
    1f72:	4798      	blx	r3
    
		host->status = FT_GPU_HAL_WRITING;
    1f74:	2302      	movs	r3, #2
    1f76:	7323      	strb	r3, [r4, #12]
	}
}
    1f78:	bd10      	pop	{r4, pc}
        lcd_start_xfer(addr, READ);
    1f7a:	0010      	movs	r0, r2
    1f7c:	4b02      	ldr	r3, [pc, #8]	; (1f88 <Ft_Gpu_Hal_StartTransfer+0x24>)
    1f7e:	4798      	blx	r3
		host->status = FT_GPU_HAL_READING;
    1f80:	2301      	movs	r3, #1
    1f82:	7323      	strb	r3, [r4, #12]
    1f84:	e7f8      	b.n	1f78 <Ft_Gpu_Hal_StartTransfer+0x14>
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	000038ed 	.word	0x000038ed

00001f8c <Ft_Gpu_Hal_StartCmdTransfer>:


/*The APIs for writing transfer continuously only*/
ft_void_t  Ft_Gpu_Hal_StartCmdTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint16_t count)
{
    1f8c:	b510      	push	{r4, lr}
    // RAM_CMD = 0x308000
    // starting a transfer = sending preamble (read/write bits and address)
	Ft_Gpu_Hal_StartTransfer(host,rw,host->ft_cmd_fifo_wp + RAM_CMD);
    1f8e:	8902      	ldrh	r2, [r0, #8]
    1f90:	23c2      	movs	r3, #194	; 0xc2
    1f92:	039b      	lsls	r3, r3, #14
    1f94:	469c      	mov	ip, r3
    1f96:	4462      	add	r2, ip
    1f98:	4b01      	ldr	r3, [pc, #4]	; (1fa0 <Ft_Gpu_Hal_StartCmdTransfer+0x14>)
    1f9a:	4798      	blx	r3
}
    1f9c:	bd10      	pop	{r4, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	00001f65 	.word	0x00001f65

00001fa4 <Ft_Gpu_Hal_Transfer8>:
    Ft_Gpu_Hal_Transfer8(host,0);
}


ft_uint8_t Ft_Gpu_Hal_Transfer8(Ft_Gpu_Hal_Context_t *host, ft_uint8_t value)
{
    1fa4:	b500      	push	{lr}
    1fa6:	b085      	sub	sp, #20
    1fa8:	466b      	mov	r3, sp
    1faa:	71d9      	strb	r1, [r3, #7]
    ft_uint8_t read_byte = 0;
    1fac:	2200      	movs	r2, #0
    1fae:	230f      	movs	r3, #15
    1fb0:	446b      	add	r3, sp
    1fb2:	701a      	strb	r2, [r3, #0]
    
    // transmit or receive a byte
    if(host->status == FT_GPU_HAL_WRITING)
    1fb4:	7b03      	ldrb	r3, [r0, #12]
    1fb6:	2b02      	cmp	r3, #2
    1fb8:	d009      	beq.n	1fce <Ft_Gpu_Hal_Transfer8+0x2a>
        lcd_host_write(&value, 1);
    else
        lcd_host_read(&read_byte, 1);
    1fba:	2101      	movs	r1, #1
    1fbc:	200f      	movs	r0, #15
    1fbe:	4468      	add	r0, sp
    1fc0:	4b06      	ldr	r3, [pc, #24]	; (1fdc <Ft_Gpu_Hal_Transfer8+0x38>)
    1fc2:	4798      	blx	r3
    
    return read_byte;
    1fc4:	230f      	movs	r3, #15
    1fc6:	446b      	add	r3, sp
    1fc8:	7818      	ldrb	r0, [r3, #0]
}
    1fca:	b005      	add	sp, #20
    1fcc:	bd00      	pop	{pc}
        lcd_host_write(&value, 1);
    1fce:	2101      	movs	r1, #1
    1fd0:	466b      	mov	r3, sp
    1fd2:	1dd8      	adds	r0, r3, #7
    1fd4:	4b02      	ldr	r3, [pc, #8]	; (1fe0 <Ft_Gpu_Hal_Transfer8+0x3c>)
    1fd6:	4798      	blx	r3
    1fd8:	e7f4      	b.n	1fc4 <Ft_Gpu_Hal_Transfer8+0x20>
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	00003991 	.word	0x00003991
    1fe0:	00003a09 	.word	0x00003a09

00001fe4 <Ft_Gpu_Hal_TransferString>:
{
    1fe4:	b570      	push	{r4, r5, r6, lr}
    1fe6:	0005      	movs	r5, r0
    1fe8:	000e      	movs	r6, r1
    ft_uint16_t length = strlen((const char*) string);
    1fea:	0008      	movs	r0, r1
    1fec:	4b09      	ldr	r3, [pc, #36]	; (2014 <STACK_SIZE+0x14>)
    1fee:	4798      	blx	r3
    1ff0:	b280      	uxth	r0, r0
    while(length--)
    1ff2:	e005      	b.n	2000 <STACK_SIZE>
       Ft_Gpu_Hal_Transfer8(host, *string);
    1ff4:	7831      	ldrb	r1, [r6, #0]
    1ff6:	0028      	movs	r0, r5
    1ff8:	4b07      	ldr	r3, [pc, #28]	; (2018 <STACK_SIZE+0x18>)
    1ffa:	4798      	blx	r3
       string ++;
    1ffc:	3601      	adds	r6, #1
    while(length--)
    1ffe:	0020      	movs	r0, r4
    2000:	1e44      	subs	r4, r0, #1
    2002:	b2a4      	uxth	r4, r4
    2004:	2800      	cmp	r0, #0
    2006:	d1f5      	bne.n	1ff4 <Ft_Gpu_Hal_TransferString+0x10>
    Ft_Gpu_Hal_Transfer8(host,0);
    2008:	2100      	movs	r1, #0
    200a:	0028      	movs	r0, r5
    200c:	4b02      	ldr	r3, [pc, #8]	; (2018 <STACK_SIZE+0x18>)
    200e:	4798      	blx	r3
}
    2010:	bd70      	pop	{r4, r5, r6, pc}
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	00005555 	.word	0x00005555
    2018:	00001fa5 	.word	0x00001fa5

0000201c <Ft_Gpu_Hal_Transfer16>:


ft_uint16_t Ft_Gpu_Hal_Transfer16(Ft_Gpu_Hal_Context_t *host, ft_uint16_t value)
{
    201c:	b570      	push	{r4, r5, r6, lr}
    201e:	0004      	movs	r4, r0
    2020:	000d      	movs	r5, r1
	ft_uint16_t retVal = 0;

    // transmit or receive two bytes
    if (host->status == FT_GPU_HAL_WRITING)
    2022:	7b03      	ldrb	r3, [r0, #12]
    2024:	2b02      	cmp	r3, #2
    2026:	d00a      	beq.n	203e <Ft_Gpu_Hal_Transfer16+0x22>
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer8(host,0);
    2028:	2100      	movs	r1, #0
    202a:	4d09      	ldr	r5, [pc, #36]	; (2050 <Ft_Gpu_Hal_Transfer16+0x34>)
    202c:	47a8      	blx	r5
    202e:	0006      	movs	r6, r0
		retVal |= (ft_uint16_t)Ft_Gpu_Hal_Transfer8(host,0) << 8;
    2030:	2100      	movs	r1, #0
    2032:	0020      	movs	r0, r4
    2034:	47a8      	blx	r5
    2036:	0200      	lsls	r0, r0, #8
    2038:	4330      	orrs	r0, r6
    203a:	b280      	uxth	r0, r0
	}

	return retVal;
}
    203c:	bd70      	pop	{r4, r5, r6, pc}
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
    203e:	b2c9      	uxtb	r1, r1
    2040:	4e03      	ldr	r6, [pc, #12]	; (2050 <Ft_Gpu_Hal_Transfer16+0x34>)
    2042:	47b0      	blx	r6
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
    2044:	0a29      	lsrs	r1, r5, #8
    2046:	0020      	movs	r0, r4
    2048:	47b0      	blx	r6
	ft_uint16_t retVal = 0;
    204a:	2000      	movs	r0, #0
    204c:	e7f6      	b.n	203c <Ft_Gpu_Hal_Transfer16+0x20>
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	00001fa5 	.word	0x00001fa5

00002054 <Ft_Gpu_Hal_Transfer32>:


ft_uint32_t Ft_Gpu_Hal_Transfer32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t value)
{
    2054:	b570      	push	{r4, r5, r6, lr}
    2056:	0004      	movs	r4, r0
    2058:	000d      	movs	r5, r1
	ft_uint32_t retVal = 0;
    
    // transmit or receive four bytes
	if (host->status == FT_GPU_HAL_WRITING)
    205a:	7b03      	ldrb	r3, [r0, #12]
    205c:	2b02      	cmp	r3, #2
    205e:	d009      	beq.n	2074 <Ft_Gpu_Hal_Transfer32+0x20>
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer16(host,0);
    2060:	2100      	movs	r1, #0
    2062:	4e08      	ldr	r6, [pc, #32]	; (2084 <Ft_Gpu_Hal_Transfer32+0x30>)
    2064:	47b0      	blx	r6
    2066:	0005      	movs	r5, r0
		retVal |= (ft_uint32_t)Ft_Gpu_Hal_Transfer16(host,0) << 16;
    2068:	2100      	movs	r1, #0
    206a:	0020      	movs	r0, r4
    206c:	47b0      	blx	r6
    206e:	0400      	lsls	r0, r0, #16
    2070:	4328      	orrs	r0, r5
	}
    
	return retVal;
}
    2072:	bd70      	pop	{r4, r5, r6, pc}
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
    2074:	b289      	uxth	r1, r1
    2076:	4e03      	ldr	r6, [pc, #12]	; (2084 <Ft_Gpu_Hal_Transfer32+0x30>)
    2078:	47b0      	blx	r6
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
    207a:	0c29      	lsrs	r1, r5, #16
    207c:	0020      	movs	r0, r4
    207e:	47b0      	blx	r6
	ft_uint32_t retVal = 0;
    2080:	2000      	movs	r0, #0
    2082:	e7f6      	b.n	2072 <Ft_Gpu_Hal_Transfer32+0x1e>
    2084:	0000201d 	.word	0x0000201d

00002088 <Ft_Gpu_Hal_EndTransfer>:


ft_void_t Ft_Gpu_Hal_EndTransfer(Ft_Gpu_Hal_Context_t *host)
{
    2088:	b510      	push	{r4, lr}
    208a:	0004      	movs	r4, r0
    // deselect the slave (let slave CS float high for SIM System)
    lcd_stop_xfer();
    208c:	4b02      	ldr	r3, [pc, #8]	; (2098 <Ft_Gpu_Hal_EndTransfer+0x10>)
    208e:	4798      	blx	r3
    
	host->status = FT_GPU_HAL_OPENED;
    2090:	2300      	movs	r3, #0
    2092:	7323      	strb	r3, [r4, #12]
}
    2094:	bd10      	pop	{r4, pc}
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	00003975 	.word	0x00003975

0000209c <Ft_Gpu_Hal_Rd8>:


ft_uint8_t Ft_Gpu_Hal_Rd8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    209c:	b570      	push	{r4, r5, r6, lr}
    209e:	0004      	movs	r4, r0
    20a0:	000a      	movs	r2, r1
	ft_uint8_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    20a2:	2100      	movs	r1, #0
    20a4:	4b05      	ldr	r3, [pc, #20]	; (20bc <Ft_Gpu_Hal_Rd8+0x20>)
    20a6:	4798      	blx	r3
    
    // read a byte
	value = Ft_Gpu_Hal_Transfer8(host,0);
    20a8:	2100      	movs	r1, #0
    20aa:	0020      	movs	r0, r4
    20ac:	4b04      	ldr	r3, [pc, #16]	; (20c0 <Ft_Gpu_Hal_Rd8+0x24>)
    20ae:	4798      	blx	r3
    20b0:	0005      	movs	r5, r0

    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    20b2:	0020      	movs	r0, r4
    20b4:	4b03      	ldr	r3, [pc, #12]	; (20c4 <Ft_Gpu_Hal_Rd8+0x28>)
    20b6:	4798      	blx	r3
    
	return value;
}
    20b8:	0028      	movs	r0, r5
    20ba:	bd70      	pop	{r4, r5, r6, pc}
    20bc:	00001f65 	.word	0x00001f65
    20c0:	00001fa5 	.word	0x00001fa5
    20c4:	00002089 	.word	0x00002089

000020c8 <Ft_Gpu_Hal_Rd16>:


ft_uint16_t Ft_Gpu_Hal_Rd16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    20c8:	b570      	push	{r4, r5, r6, lr}
    20ca:	0004      	movs	r4, r0
    20cc:	000a      	movs	r2, r1
	ft_uint16_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    20ce:	2100      	movs	r1, #0
    20d0:	4b05      	ldr	r3, [pc, #20]	; (20e8 <Ft_Gpu_Hal_Rd16+0x20>)
    20d2:	4798      	blx	r3
    
    // read 2 bytes
	value = Ft_Gpu_Hal_Transfer16(host,0);
    20d4:	2100      	movs	r1, #0
    20d6:	0020      	movs	r0, r4
    20d8:	4b04      	ldr	r3, [pc, #16]	; (20ec <Ft_Gpu_Hal_Rd16+0x24>)
    20da:	4798      	blx	r3
    20dc:	0005      	movs	r5, r0
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    20de:	0020      	movs	r0, r4
    20e0:	4b03      	ldr	r3, [pc, #12]	; (20f0 <Ft_Gpu_Hal_Rd16+0x28>)
    20e2:	4798      	blx	r3
    
	return value;
}
    20e4:	0028      	movs	r0, r5
    20e6:	bd70      	pop	{r4, r5, r6, pc}
    20e8:	00001f65 	.word	0x00001f65
    20ec:	0000201d 	.word	0x0000201d
    20f0:	00002089 	.word	0x00002089

000020f4 <Ft_Gpu_Hal_Wr8>:
	return value;
}


ft_void_t Ft_Gpu_Hal_Wr8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint8_t v)
{	
    20f4:	b570      	push	{r4, r5, r6, lr}
    20f6:	0004      	movs	r4, r0
    20f8:	0015      	movs	r5, r2
    
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    20fa:	000a      	movs	r2, r1
    20fc:	2101      	movs	r1, #1
    20fe:	4b05      	ldr	r3, [pc, #20]	; (2114 <Ft_Gpu_Hal_Wr8+0x20>)
    2100:	4798      	blx	r3
    
    // read a byte
	Ft_Gpu_Hal_Transfer8(host,v);
    2102:	0029      	movs	r1, r5
    2104:	0020      	movs	r0, r4
    2106:	4b04      	ldr	r3, [pc, #16]	; (2118 <Ft_Gpu_Hal_Wr8+0x24>)
    2108:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    210a:	0020      	movs	r0, r4
    210c:	4b03      	ldr	r3, [pc, #12]	; (211c <Ft_Gpu_Hal_Wr8+0x28>)
    210e:	4798      	blx	r3
}
    2110:	bd70      	pop	{r4, r5, r6, pc}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	00001f65 	.word	0x00001f65
    2118:	00001fa5 	.word	0x00001fa5
    211c:	00002089 	.word	0x00002089

00002120 <Ft_Gpu_Hal_Wr16>:


ft_void_t Ft_Gpu_Hal_Wr16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint16_t v)
{
    2120:	b570      	push	{r4, r5, r6, lr}
    2122:	0004      	movs	r4, r0
    2124:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    2126:	000a      	movs	r2, r1
    2128:	2101      	movs	r1, #1
    212a:	4b05      	ldr	r3, [pc, #20]	; (2140 <Ft_Gpu_Hal_Wr16+0x20>)
    212c:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer16(host,v);
    212e:	0029      	movs	r1, r5
    2130:	0020      	movs	r0, r4
    2132:	4b04      	ldr	r3, [pc, #16]	; (2144 <Ft_Gpu_Hal_Wr16+0x24>)
    2134:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    2136:	0020      	movs	r0, r4
    2138:	4b03      	ldr	r3, [pc, #12]	; (2148 <Ft_Gpu_Hal_Wr16+0x28>)
    213a:	4798      	blx	r3
}
    213c:	bd70      	pop	{r4, r5, r6, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	00001f65 	.word	0x00001f65
    2144:	0000201d 	.word	0x0000201d
    2148:	00002089 	.word	0x00002089

0000214c <Ft_Gpu_Hal_Wr32>:


ft_void_t Ft_Gpu_Hal_Wr32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint32_t v)
{
    214c:	b570      	push	{r4, r5, r6, lr}
    214e:	0004      	movs	r4, r0
    2150:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    2152:	000a      	movs	r2, r1
    2154:	2101      	movs	r1, #1
    2156:	4b05      	ldr	r3, [pc, #20]	; (216c <Ft_Gpu_Hal_Wr32+0x20>)
    2158:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer32(host,v);
    215a:	0029      	movs	r1, r5
    215c:	0020      	movs	r0, r4
    215e:	4b04      	ldr	r3, [pc, #16]	; (2170 <Ft_Gpu_Hal_Wr32+0x24>)
    2160:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    2162:	0020      	movs	r0, r4
    2164:	4b03      	ldr	r3, [pc, #12]	; (2174 <Ft_Gpu_Hal_Wr32+0x28>)
    2166:	4798      	blx	r3
}
    2168:	bd70      	pop	{r4, r5, r6, pc}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	00001f65 	.word	0x00001f65
    2170:	00002055 	.word	0x00002055
    2174:	00002089 	.word	0x00002089

00002178 <Ft_Gpu_Hal_Updatecmdfifo>:
	lcd_host_cmd((cmd & 0xFF), ((cmd >> 8) & 0xFF));
}


ft_void_t Ft_Gpu_Hal_Updatecmdfifo(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    2178:	b510      	push	{r4, lr}
	host->ft_cmd_fifo_wp  = (host->ft_cmd_fifo_wp + count) & 4095;
    217a:	8902      	ldrh	r2, [r0, #8]
    217c:	1852      	adds	r2, r2, r1
    217e:	0512      	lsls	r2, r2, #20
    2180:	0d12      	lsrs	r2, r2, #20

	//4 byte alignment
	host->ft_cmd_fifo_wp = (host->ft_cmd_fifo_wp + 3) & 0xffc;
    2182:	3203      	adds	r2, #3
    2184:	4903      	ldr	r1, [pc, #12]	; (2194 <Ft_Gpu_Hal_Updatecmdfifo+0x1c>)
    2186:	400a      	ands	r2, r1
    2188:	8102      	strh	r2, [r0, #8]
    
	Ft_Gpu_Hal_Wr16(host,REG_CMD_WRITE,host->ft_cmd_fifo_wp);
    218a:	4903      	ldr	r1, [pc, #12]	; (2198 <Ft_Gpu_Hal_Updatecmdfifo+0x20>)
    218c:	4b03      	ldr	r3, [pc, #12]	; (219c <Ft_Gpu_Hal_Updatecmdfifo+0x24>)
    218e:	4798      	blx	r3
}
    2190:	bd10      	pop	{r4, pc}
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	00000ffc 	.word	0x00000ffc
    2198:	003020fc 	.word	0x003020fc
    219c:	00002121 	.word	0x00002121

000021a0 <Ft_Gpu_Cmdfifo_Freespace>:


ft_uint16_t Ft_Gpu_Cmdfifo_Freespace(Ft_Gpu_Hal_Context_t *host)
{
    21a0:	b510      	push	{r4, lr}
    /* calculate the free space for the coprocessor FIFO. Refer to pg 150 in
     * the FT81X_Series_Programmers_Guide datasheet */
	ft_uint16_t fullness,retval;

    // REG_CMD_READ = 0x3020F8
	fullness = (host->ft_cmd_fifo_wp - Ft_Gpu_Hal_Rd16(host,REG_CMD_READ)) & 4095;
    21a2:	8904      	ldrh	r4, [r0, #8]
    21a4:	4904      	ldr	r1, [pc, #16]	; (21b8 <Ft_Gpu_Cmdfifo_Freespace+0x18>)
    21a6:	4b05      	ldr	r3, [pc, #20]	; (21bc <Ft_Gpu_Cmdfifo_Freespace+0x1c>)
    21a8:	4798      	blx	r3
    21aa:	1a24      	subs	r4, r4, r0
    21ac:	0524      	lsls	r4, r4, #20
    21ae:	0d24      	lsrs	r4, r4, #20
    
	retval = (FT_CMD_FIFO_SIZE - 4) - fullness;
    21b0:	4803      	ldr	r0, [pc, #12]	; (21c0 <Ft_Gpu_Cmdfifo_Freespace+0x20>)
    21b2:	1b00      	subs	r0, r0, r4
    21b4:	b280      	uxth	r0, r0
    
	return (retval);
}
    21b6:	bd10      	pop	{r4, pc}
    21b8:	003020f8 	.word	0x003020f8
    21bc:	000020c9 	.word	0x000020c9
    21c0:	00000ffc 	.word	0x00000ffc

000021c4 <Ft_Gpu_Hal_CheckCmdBuffer>:
}
#endif


ft_void_t Ft_Gpu_Hal_CheckCmdBuffer(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    21c4:	b570      	push	{r4, r5, r6, lr}
    21c6:	0005      	movs	r5, r0
    21c8:	000c      	movs	r4, r1
   ft_uint16_t getfreespace;
   do{
       // This "fixme" was here in the original code.
	   // FIXME: This can get stuck, non-even is returned in case of coprocessor issue
        getfreespace = Ft_Gpu_Cmdfifo_Freespace(host);
    21ca:	0028      	movs	r0, r5
    21cc:	4b02      	ldr	r3, [pc, #8]	; (21d8 <Ft_Gpu_Hal_CheckCmdBuffer+0x14>)
    21ce:	4798      	blx	r3
        
   // loop until there is free space, else break if there is enough free space
   }while(getfreespace < count);
    21d0:	42a0      	cmp	r0, r4
    21d2:	d3fa      	bcc.n	21ca <Ft_Gpu_Hal_CheckCmdBuffer+0x6>
}
    21d4:	bd70      	pop	{r4, r5, r6, pc}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	000021a1 	.word	0x000021a1

000021dc <Ft_Gpu_Hal_WaitCmdfifo_empty>:


ft_void_t Ft_Gpu_Hal_WaitCmdfifo_empty(Ft_Gpu_Hal_Context_t *host)
{
    21dc:	b570      	push	{r4, r5, r6, lr}
    21de:	0005      	movs	r5, r0
   /* wait for the FIFO read and write pointers to equal each other.
    * This is the naive way to do it, refer to pg 154 in 
    * the FT81X_Series_Programmers_Guide datasheet */
   while(Ft_Gpu_Hal_Rd16(host,REG_CMD_READ) != Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE));
    21e0:	4907      	ldr	r1, [pc, #28]	; (2200 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x24>)
    21e2:	0028      	movs	r0, r5
    21e4:	4c07      	ldr	r4, [pc, #28]	; (2204 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    21e6:	47a0      	blx	r4
    21e8:	0006      	movs	r6, r0
    21ea:	4907      	ldr	r1, [pc, #28]	; (2208 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    21ec:	0028      	movs	r0, r5
    21ee:	47a0      	blx	r4
    21f0:	4286      	cmp	r6, r0
    21f2:	d1f5      	bne.n	21e0 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x4>
   
   host->ft_cmd_fifo_wp = Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE);
    21f4:	4904      	ldr	r1, [pc, #16]	; (2208 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    21f6:	0028      	movs	r0, r5
    21f8:	4b02      	ldr	r3, [pc, #8]	; (2204 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    21fa:	4798      	blx	r3
    21fc:	8128      	strh	r0, [r5, #8]
}
    21fe:	bd70      	pop	{r4, r5, r6, pc}
    2200:	003020f8 	.word	0x003020f8
    2204:	000020c9 	.word	0x000020c9
    2208:	003020fc 	.word	0x003020fc

0000220c <Ft_Gpu_Hal_WrCmd32>:
    host->ft_cmd_fifo_wp = 0;
}


ft_void_t Ft_Gpu_Hal_WrCmd32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t cmd)
{
    220c:	b570      	push	{r4, r5, r6, lr}
    220e:	0004      	movs	r4, r0
    2210:	000d      	movs	r5, r1
    Ft_Gpu_Hal_CheckCmdBuffer(host, sizeof(cmd));
    2212:	2104      	movs	r1, #4
    2214:	4b07      	ldr	r3, [pc, #28]	; (2234 <Ft_Gpu_Hal_WrCmd32+0x28>)
    2216:	4798      	blx	r3
    
    Ft_Gpu_Hal_Wr32(host, RAM_CMD + host->ft_cmd_fifo_wp, cmd);
    2218:	8921      	ldrh	r1, [r4, #8]
    221a:	23c2      	movs	r3, #194	; 0xc2
    221c:	039b      	lsls	r3, r3, #14
    221e:	469c      	mov	ip, r3
    2220:	4461      	add	r1, ip
    2222:	002a      	movs	r2, r5
    2224:	0020      	movs	r0, r4
    2226:	4b04      	ldr	r3, [pc, #16]	; (2238 <Ft_Gpu_Hal_WrCmd32+0x2c>)
    2228:	4798      	blx	r3
    
    Ft_Gpu_Hal_Updatecmdfifo(host, sizeof(cmd));
    222a:	2104      	movs	r1, #4
    222c:	0020      	movs	r0, r4
    222e:	4b03      	ldr	r3, [pc, #12]	; (223c <Ft_Gpu_Hal_WrCmd32+0x30>)
    2230:	4798      	blx	r3
}
    2232:	bd70      	pop	{r4, r5, r6, pc}
    2234:	000021c5 	.word	0x000021c5
    2238:	0000214d 	.word	0x0000214d
    223c:	00002179 	.word	0x00002179

00002240 <month31>:
 * Return Values(s) : int
 * Description      : Check if the month has 31 days. Return 1 if yes, else
 *  0 if no
 */
int month31(char month){
	if(month==1 || month==3 || month==5 || month==7 || month==8 || \
    2240:	2801      	cmp	r0, #1
    2242:	d00f      	beq.n	2264 <month31+0x24>
    2244:	2803      	cmp	r0, #3
    2246:	d00f      	beq.n	2268 <month31+0x28>
    2248:	2805      	cmp	r0, #5
    224a:	d00f      	beq.n	226c <month31+0x2c>
    224c:	2807      	cmp	r0, #7
    224e:	d00f      	beq.n	2270 <month31+0x30>
    2250:	2808      	cmp	r0, #8
    2252:	d00f      	beq.n	2274 <month31+0x34>
    2254:	280a      	cmp	r0, #10
    2256:	d00f      	beq.n	2278 <month31+0x38>
        month==10 || month==12)
    2258:	280c      	cmp	r0, #12
    225a:	d001      	beq.n	2260 <month31+0x20>
		return 1;
	else
		return 0;
    225c:	2000      	movs	r0, #0
}//end month31
    225e:	4770      	bx	lr
		return 1;
    2260:	380b      	subs	r0, #11
    2262:	e7fc      	b.n	225e <month31+0x1e>
    2264:	2001      	movs	r0, #1
    2266:	e7fa      	b.n	225e <month31+0x1e>
    2268:	2001      	movs	r0, #1
    226a:	e7f8      	b.n	225e <month31+0x1e>
    226c:	2001      	movs	r0, #1
    226e:	e7f6      	b.n	225e <month31+0x1e>
    2270:	2001      	movs	r0, #1
    2272:	e7f4      	b.n	225e <month31+0x1e>
    2274:	2001      	movs	r0, #1
    2276:	e7f2      	b.n	225e <month31+0x1e>
    2278:	2001      	movs	r0, #1
    227a:	e7f0      	b.n	225e <month31+0x1e>

0000227c <printTime>:
/* Function Name    : printTime
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Get the current time and date, display it on the screen
 */
void printTime(){
    227c:	b5f0      	push	{r4, r5, r6, r7, lr}
    227e:	46d6      	mov	lr, sl
    2280:	464f      	mov	r7, r9
    2282:	4646      	mov	r6, r8
    2284:	b5c0      	push	{r6, r7, lr}
    2286:	b08a      	sub	sp, #40	; 0x28
	int fstYloc = disHei - 60, sndYloc = disHei - 30;
	char buff[32];
	//get current time and date
	rtc_calendar_get_time(&rtc_instance, &time);
    2288:	4c1b      	ldr	r4, [pc, #108]	; (22f8 <printTime+0x7c>)
    228a:	0021      	movs	r1, r4
    228c:	481b      	ldr	r0, [pc, #108]	; (22fc <printTime+0x80>)
    228e:	4b1c      	ldr	r3, [pc, #112]	; (2300 <printTime+0x84>)
    2290:	4798      	blx	r3
	//put together a string for time and send to display
	snprintf(buff, 32, "%02d:%02d:%02d", time.hour, time.minute, time.second);
    2292:	78a3      	ldrb	r3, [r4, #2]
    2294:	7862      	ldrb	r2, [r4, #1]
    2296:	7821      	ldrb	r1, [r4, #0]
    2298:	ad02      	add	r5, sp, #8
    229a:	9101      	str	r1, [sp, #4]
    229c:	9200      	str	r2, [sp, #0]
    229e:	4a19      	ldr	r2, [pc, #100]	; (2304 <printTime+0x88>)
    22a0:	2120      	movs	r1, #32
    22a2:	0028      	movs	r0, r5
    22a4:	4e18      	ldr	r6, [pc, #96]	; (2308 <printTime+0x8c>)
    22a6:	46b2      	mov	sl, r6
    22a8:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Text(phost, 10, fstYloc, font, 0, buff);
    22aa:	4b18      	ldr	r3, [pc, #96]	; (230c <printTime+0x90>)
    22ac:	4699      	mov	r9, r3
    22ae:	781b      	ldrb	r3, [r3, #0]
    22b0:	4a17      	ldr	r2, [pc, #92]	; (2310 <printTime+0x94>)
    22b2:	4690      	mov	r8, r2
    22b4:	6810      	ldr	r0, [r2, #0]
    22b6:	9501      	str	r5, [sp, #4]
    22b8:	2700      	movs	r7, #0
    22ba:	9700      	str	r7, [sp, #0]
    22bc:	22d2      	movs	r2, #210	; 0xd2
    22be:	0052      	lsls	r2, r2, #1
    22c0:	210a      	movs	r1, #10
    22c2:	4e14      	ldr	r6, [pc, #80]	; (2314 <printTime+0x98>)
    22c4:	47b0      	blx	r6
	
	//put together a string for date and send to display
	snprintf(buff, 32, "%02d/%02d/%04d", time.month, time.day, time.year);
    22c6:	7963      	ldrb	r3, [r4, #5]
    22c8:	7922      	ldrb	r2, [r4, #4]
    22ca:	88e1      	ldrh	r1, [r4, #6]
    22cc:	9101      	str	r1, [sp, #4]
    22ce:	9200      	str	r2, [sp, #0]
    22d0:	4a11      	ldr	r2, [pc, #68]	; (2318 <printTime+0x9c>)
    22d2:	2120      	movs	r1, #32
    22d4:	0028      	movs	r0, r5
    22d6:	47d0      	blx	sl
	Ft_Gpu_CoCmd_Text(phost, 10, sndYloc, font, 0, buff);
    22d8:	464b      	mov	r3, r9
    22da:	781b      	ldrb	r3, [r3, #0]
    22dc:	4642      	mov	r2, r8
    22de:	6810      	ldr	r0, [r2, #0]
    22e0:	9501      	str	r5, [sp, #4]
    22e2:	9700      	str	r7, [sp, #0]
    22e4:	22e1      	movs	r2, #225	; 0xe1
    22e6:	0052      	lsls	r2, r2, #1
    22e8:	210a      	movs	r1, #10
    22ea:	47b0      	blx	r6
}//end printTime
    22ec:	b00a      	add	sp, #40	; 0x28
    22ee:	bc1c      	pop	{r2, r3, r4}
    22f0:	4690      	mov	r8, r2
    22f2:	4699      	mov	r9, r3
    22f4:	46a2      	mov	sl, r4
    22f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22f8:	20000774 	.word	0x20000774
    22fc:	200004ac 	.word	0x200004ac
    2300:	00000555 	.word	0x00000555
    2304:	00005eb4 	.word	0x00005eb4
    2308:	000054f1 	.word	0x000054f1
    230c:	20000009 	.word	0x20000009
    2310:	2000077c 	.word	0x2000077c
    2314:	00001bc9 	.word	0x00001bc9
    2318:	00005ec4 	.word	0x00005ec4

0000231c <play>:
/* Function Name    : play
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Play 3 consecutive beep at 660Hz when called
 */
void play(){
    231c:	b510      	push	{r4, lr}
	//set full volume
	Ft_Gpu_Hal_Wr8(phost,REG_VOL_SOUND,0x255);
    231e:	4c0d      	ldr	r4, [pc, #52]	; (2354 <play+0x38>)
    2320:	2255      	movs	r2, #85	; 0x55
    2322:	490d      	ldr	r1, [pc, #52]	; (2358 <play+0x3c>)
    2324:	6820      	ldr	r0, [r4, #0]
    2326:	4b0d      	ldr	r3, [pc, #52]	; (235c <play+0x40>)
    2328:	4798      	blx	r3
	//set one single beet at 660Hz
	Ft_Gpu_Hal_Wr16(phost, REG_SOUND,  (73<< 8) | 0x10);
    232a:	6820      	ldr	r0, [r4, #0]
    232c:	4a0c      	ldr	r2, [pc, #48]	; (2360 <play+0x44>)
    232e:	490d      	ldr	r1, [pc, #52]	; (2364 <play+0x48>)
    2330:	4b0d      	ldr	r3, [pc, #52]	; (2368 <play+0x4c>)
    2332:	4798      	blx	r3

	//play it 3 times delay 100ms inbetween
	int i;
	for (i=0; i < 3; i++){
    2334:	2400      	movs	r4, #0
    2336:	e009      	b.n	234c <play+0x30>
		Ft_Gpu_Hal_Wr8(phost, REG_PLAY, 1);
    2338:	4b06      	ldr	r3, [pc, #24]	; (2354 <play+0x38>)
    233a:	6818      	ldr	r0, [r3, #0]
    233c:	2201      	movs	r2, #1
    233e:	490b      	ldr	r1, [pc, #44]	; (236c <play+0x50>)
    2340:	4b06      	ldr	r3, [pc, #24]	; (235c <play+0x40>)
    2342:	4798      	blx	r3
		delay_ms(100);
    2344:	2064      	movs	r0, #100	; 0x64
    2346:	4b0a      	ldr	r3, [pc, #40]	; (2370 <play+0x54>)
    2348:	4798      	blx	r3
	for (i=0; i < 3; i++){
    234a:	3401      	adds	r4, #1
    234c:	2c02      	cmp	r4, #2
    234e:	ddf3      	ble.n	2338 <play+0x1c>
	}
}//end play
    2350:	bd10      	pop	{r4, pc}
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	2000077c 	.word	0x2000077c
    2358:	00302084 	.word	0x00302084
    235c:	000020f5 	.word	0x000020f5
    2360:	00004910 	.word	0x00004910
    2364:	00302088 	.word	0x00302088
    2368:	00002121 	.word	0x00002121
    236c:	0030208c 	.word	0x0030208c
    2370:	00000151 	.word	0x00000151

00002374 <drawTitle>:
/* Function Name    : drawTitle
 * Parameters       : char *title 
 * Return Values(s) : void
 * Description      : Draw the title to each screen based on title received
 */
void drawTitle(char *title){
    2374:	b5f0      	push	{r4, r5, r6, r7, lr}
    2376:	46ce      	mov	lr, r9
    2378:	4647      	mov	r7, r8
    237a:	b580      	push	{r7, lr}
    237c:	b085      	sub	sp, #20
    237e:	4681      	mov	r9, r0
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_XY(disWid/3,0));
    2380:	4c13      	ldr	r4, [pc, #76]	; (23d0 <drawTitle+0x5c>)
    2382:	4914      	ldr	r1, [pc, #80]	; (23d4 <drawTitle+0x60>)
    2384:	6820      	ldr	r0, [r4, #0]
    2386:	4d14      	ldr	r5, [pc, #80]	; (23d8 <drawTitle+0x64>)
    2388:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_SIZE((disWid*3/2), 50));
    238a:	4914      	ldr	r1, [pc, #80]	; (23dc <drawTitle+0x68>)
    238c:	6820      	ldr	r0, [r4, #0]
    238e:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Gradient(phost, disWid/3*2,0, 0x8B90FF, disWid/3*2, 50,0x2933FF);
    2390:	2685      	movs	r6, #133	; 0x85
    2392:	00b6      	lsls	r6, r6, #2
    2394:	6820      	ldr	r0, [r4, #0]
    2396:	4b12      	ldr	r3, [pc, #72]	; (23e0 <drawTitle+0x6c>)
    2398:	9302      	str	r3, [sp, #8]
    239a:	2332      	movs	r3, #50	; 0x32
    239c:	9301      	str	r3, [sp, #4]
    239e:	9600      	str	r6, [sp, #0]
    23a0:	4b10      	ldr	r3, [pc, #64]	; (23e4 <drawTitle+0x70>)
    23a2:	2200      	movs	r2, #0
    23a4:	0031      	movs	r1, r6
    23a6:	4f10      	ldr	r7, [pc, #64]	; (23e8 <drawTitle+0x74>)
    23a8:	47b8      	blx	r7
//	Ft_Gpu_CoCmd_Gradient(phost, disWid/3,0, 0x2933FF, disWid, 50,0x8B90FF);
	Ft_Gpu_CoCmd_Text(phost, (disWid/3*2), 30, 30, OPT_CENTER, title);
    23aa:	6820      	ldr	r0, [r4, #0]
    23ac:	464b      	mov	r3, r9
    23ae:	9301      	str	r3, [sp, #4]
    23b0:	23c0      	movs	r3, #192	; 0xc0
    23b2:	00db      	lsls	r3, r3, #3
    23b4:	9300      	str	r3, [sp, #0]
    23b6:	231e      	movs	r3, #30
    23b8:	221e      	movs	r2, #30
    23ba:	0031      	movs	r1, r6
    23bc:	4e0b      	ldr	r6, [pc, #44]	; (23ec <drawTitle+0x78>)
    23be:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,1,1));
    23c0:	6820      	ldr	r0, [r4, #0]
    23c2:	490b      	ldr	r1, [pc, #44]	; (23f0 <drawTitle+0x7c>)
    23c4:	47a8      	blx	r5
}//end drawTitle
    23c6:	b005      	add	sp, #20
    23c8:	bc0c      	pop	{r2, r3}
    23ca:	4690      	mov	r8, r2
    23cc:	4699      	mov	r9, r3
    23ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23d0:	2000077c 	.word	0x2000077c
    23d4:	1b085000 	.word	0x1b085000
    23d8:	0000220d 	.word	0x0000220d
    23dc:	1c4b0032 	.word	0x1c4b0032
    23e0:	002933ff 	.word	0x002933ff
    23e4:	008b90ff 	.word	0x008b90ff
    23e8:	00001dfd 	.word	0x00001dfd
    23ec:	00001bc9 	.word	0x00001bc9
    23f0:	26000003 	.word	0x26000003

000023f4 <drawBack>:
/* Function Name    : drawBack
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Draw back button when called
 */
void drawBack(){
    23f4:	b510      	push	{r4, lr}
    23f6:	b084      	sub	sp, #16
	//assign tag value and draw button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(back));
    23f8:	4c0e      	ldr	r4, [pc, #56]	; (2434 <drawBack+0x40>)
    23fa:	490f      	ldr	r1, [pc, #60]	; (2438 <drawBack+0x44>)
    23fc:	6820      	ldr	r0, [r4, #0]
    23fe:	4b0f      	ldr	r3, [pc, #60]	; (243c <drawBack+0x48>)
    2400:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    2402:	6820      	ldr	r0, [r4, #0]
    2404:	4b0e      	ldr	r3, [pc, #56]	; (2440 <drawBack+0x4c>)
    2406:	781b      	ldrb	r3, [r3, #0]
    2408:	4a0e      	ldr	r2, [pc, #56]	; (2444 <drawBack+0x50>)
    240a:	7812      	ldrb	r2, [r2, #0]
    240c:	2a06      	cmp	r2, #6
    240e:	d00d      	beq.n	242c <drawBack+0x38>
    2410:	2100      	movs	r1, #0
    2412:	4a0d      	ldr	r2, [pc, #52]	; (2448 <drawBack+0x54>)
    2414:	9203      	str	r2, [sp, #12]
    2416:	9102      	str	r1, [sp, #8]
    2418:	9301      	str	r3, [sp, #4]
    241a:	2335      	movs	r3, #53	; 0x35
    241c:	9300      	str	r3, [sp, #0]
    241e:	332f      	adds	r3, #47	; 0x2f
    2420:	2200      	movs	r2, #0
    2422:	2100      	movs	r1, #0
    2424:	4c09      	ldr	r4, [pc, #36]	; (244c <drawBack+0x58>)
    2426:	47a0      	blx	r4
}//end drawBack
    2428:	b004      	add	sp, #16
    242a:	bd10      	pop	{r4, pc}
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    242c:	2180      	movs	r1, #128	; 0x80
    242e:	0049      	lsls	r1, r1, #1
    2430:	e7ef      	b.n	2412 <drawBack+0x1e>
    2432:	46c0      	nop			; (mov r8, r8)
    2434:	2000077c 	.word	0x2000077c
    2438:	03000006 	.word	0x03000006
    243c:	0000220d 	.word	0x0000220d
    2440:	20000009 	.word	0x20000009
    2444:	20000159 	.word	0x20000159
    2448:	00005db0 	.word	0x00005db0
    244c:	00001cdd 	.word	0x00001cdd

00002450 <drawKeypad>:
/* Function Name    : drawKeypad
 * Parameters       : char pressed
 * Return Values(s) : void
 * Description      : Draw keypad and put effect on a key (if pressed)
 */
void drawKeypad(char pressed){
    2450:	b5f0      	push	{r4, r5, r6, r7, lr}
    2452:	46c6      	mov	lr, r8
    2454:	b500      	push	{lr}
    2456:	b084      	sub	sp, #16
	//draw number from 1 to 9 
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.4, disWid*.3, 60, 29, pressed+48, "123");
    2458:	3030      	adds	r0, #48	; 0x30
    245a:	0005      	movs	r5, r0
    245c:	4c4a      	ldr	r4, [pc, #296]	; (2588 <drawKeypad+0x138>)
    245e:	6820      	ldr	r0, [r4, #0]
    2460:	4b4a      	ldr	r3, [pc, #296]	; (258c <drawKeypad+0x13c>)
    2462:	9303      	str	r3, [sp, #12]
    2464:	9502      	str	r5, [sp, #8]
    2466:	231d      	movs	r3, #29
    2468:	4698      	mov	r8, r3
    246a:	9301      	str	r3, [sp, #4]
    246c:	273c      	movs	r7, #60	; 0x3c
    246e:	9700      	str	r7, [sp, #0]
    2470:	33d3      	adds	r3, #211	; 0xd3
    2472:	22c0      	movs	r2, #192	; 0xc0
    2474:	21f0      	movs	r1, #240	; 0xf0
    2476:	4e46      	ldr	r6, [pc, #280]	; (2590 <drawKeypad+0x140>)
    2478:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.54, disWid*.3, 60, 29, pressed+48, "456");
    247a:	6820      	ldr	r0, [r4, #0]
    247c:	4b45      	ldr	r3, [pc, #276]	; (2594 <drawKeypad+0x144>)
    247e:	9303      	str	r3, [sp, #12]
    2480:	9502      	str	r5, [sp, #8]
    2482:	4643      	mov	r3, r8
    2484:	9301      	str	r3, [sp, #4]
    2486:	9700      	str	r7, [sp, #0]
    2488:	33d3      	adds	r3, #211	; 0xd3
    248a:	2204      	movs	r2, #4
    248c:	32ff      	adds	r2, #255	; 0xff
    248e:	21f0      	movs	r1, #240	; 0xf0
    2490:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.68, disWid*.3, 60, 29, pressed+48, "789");
    2492:	6820      	ldr	r0, [r4, #0]
    2494:	4b40      	ldr	r3, [pc, #256]	; (2598 <drawKeypad+0x148>)
    2496:	9303      	str	r3, [sp, #12]
    2498:	9502      	str	r5, [sp, #8]
    249a:	4643      	mov	r3, r8
    249c:	9301      	str	r3, [sp, #4]
    249e:	9700      	str	r7, [sp, #0]
    24a0:	33d3      	adds	r3, #211	; 0xd3
    24a2:	22a3      	movs	r2, #163	; 0xa3
    24a4:	0052      	lsls	r2, r2, #1
    24a6:	21f0      	movs	r1, #240	; 0xf0
    24a8:	47b0      	blx	r6
	
	//draw '0' button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(zero));
    24aa:	493c      	ldr	r1, [pc, #240]	; (259c <drawKeypad+0x14c>)
    24ac:	6820      	ldr	r0, [r4, #0]
    24ae:	4b3c      	ldr	r3, [pc, #240]	; (25a0 <drawKeypad+0x150>)
    24b0:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    24b2:	6820      	ldr	r0, [r4, #0]
    24b4:	4b3b      	ldr	r3, [pc, #236]	; (25a4 <drawKeypad+0x154>)
    24b6:	781b      	ldrb	r3, [r3, #0]
    24b8:	2b30      	cmp	r3, #48	; 0x30
    24ba:	d05b      	beq.n	2574 <drawKeypad+0x124>
    24bc:	2300      	movs	r3, #0
    24be:	4a3a      	ldr	r2, [pc, #232]	; (25a8 <drawKeypad+0x158>)
    24c0:	9203      	str	r2, [sp, #12]
    24c2:	9302      	str	r3, [sp, #8]
    24c4:	231d      	movs	r3, #29
    24c6:	9301      	str	r3, [sp, #4]
    24c8:	331f      	adds	r3, #31
    24ca:	9300      	str	r3, [sp, #0]
    24cc:	3338      	adds	r3, #56	; 0x38
    24ce:	228a      	movs	r2, #138	; 0x8a
    24d0:	32ff      	adds	r2, #255	; 0xff
    24d2:	21f0      	movs	r1, #240	; 0xf0
    24d4:	4c35      	ldr	r4, [pc, #212]	; (25ac <drawKeypad+0x15c>)
    24d6:	47a0      	blx	r4
	//draw delete button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(del));
    24d8:	4c2b      	ldr	r4, [pc, #172]	; (2588 <drawKeypad+0x138>)
    24da:	4935      	ldr	r1, [pc, #212]	; (25b0 <drawKeypad+0x160>)
    24dc:	6820      	ldr	r0, [r4, #0]
    24de:	4b30      	ldr	r3, [pc, #192]	; (25a0 <drawKeypad+0x150>)
    24e0:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    24e2:	6820      	ldr	r0, [r4, #0]
    24e4:	4b2f      	ldr	r3, [pc, #188]	; (25a4 <drawKeypad+0x154>)
    24e6:	781b      	ldrb	r3, [r3, #0]
    24e8:	2b09      	cmp	r3, #9
    24ea:	d045      	beq.n	2578 <drawKeypad+0x128>
    24ec:	2300      	movs	r3, #0
    24ee:	4a31      	ldr	r2, [pc, #196]	; (25b4 <drawKeypad+0x164>)
    24f0:	9203      	str	r2, [sp, #12]
    24f2:	9302      	str	r3, [sp, #8]
    24f4:	231d      	movs	r3, #29
    24f6:	9301      	str	r3, [sp, #4]
    24f8:	331f      	adds	r3, #31
    24fa:	9300      	str	r3, [sp, #0]
    24fc:	3338      	adds	r3, #56	; 0x38
    24fe:	228a      	movs	r2, #138	; 0x8a
    2500:	32ff      	adds	r2, #255	; 0xff
    2502:	21b6      	movs	r1, #182	; 0xb6
    2504:	0049      	lsls	r1, r1, #1
    2506:	4c29      	ldr	r4, [pc, #164]	; (25ac <drawKeypad+0x15c>)
    2508:	47a0      	blx	r4
	//draw clear button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(clr));
    250a:	4c1f      	ldr	r4, [pc, #124]	; (2588 <drawKeypad+0x138>)
    250c:	492a      	ldr	r1, [pc, #168]	; (25b8 <drawKeypad+0x168>)
    250e:	6820      	ldr	r0, [r4, #0]
    2510:	4b23      	ldr	r3, [pc, #140]	; (25a0 <drawKeypad+0x150>)
    2512:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    2514:	6820      	ldr	r0, [r4, #0]
    2516:	4b23      	ldr	r3, [pc, #140]	; (25a4 <drawKeypad+0x154>)
    2518:	781b      	ldrb	r3, [r3, #0]
    251a:	2b0a      	cmp	r3, #10
    251c:	d02e      	beq.n	257c <drawKeypad+0x12c>
    251e:	2300      	movs	r3, #0
    2520:	4a26      	ldr	r2, [pc, #152]	; (25bc <drawKeypad+0x16c>)
    2522:	9203      	str	r2, [sp, #12]
    2524:	9302      	str	r3, [sp, #8]
    2526:	231d      	movs	r3, #29
    2528:	9301      	str	r3, [sp, #4]
    252a:	3362      	adds	r3, #98	; 0x62
    252c:	9300      	str	r3, [sp, #0]
    252e:	3b2f      	subs	r3, #47	; 0x2f
    2530:	22c0      	movs	r2, #192	; 0xc0
    2532:	21f2      	movs	r1, #242	; 0xf2
    2534:	0049      	lsls	r1, r1, #1
    2536:	4c1d      	ldr	r4, [pc, #116]	; (25ac <drawKeypad+0x15c>)
    2538:	47a0      	blx	r4
	//draw ok button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(ok));
    253a:	4c13      	ldr	r4, [pc, #76]	; (2588 <drawKeypad+0x138>)
    253c:	4920      	ldr	r1, [pc, #128]	; (25c0 <drawKeypad+0x170>)
    253e:	6820      	ldr	r0, [r4, #0]
    2540:	4b17      	ldr	r3, [pc, #92]	; (25a0 <drawKeypad+0x150>)
    2542:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    2544:	6820      	ldr	r0, [r4, #0]
    2546:	4b17      	ldr	r3, [pc, #92]	; (25a4 <drawKeypad+0x154>)
    2548:	781b      	ldrb	r3, [r3, #0]
    254a:	2b0b      	cmp	r3, #11
    254c:	d018      	beq.n	2580 <drawKeypad+0x130>
    254e:	2200      	movs	r2, #0
    2550:	4b1c      	ldr	r3, [pc, #112]	; (25c4 <drawKeypad+0x174>)
    2552:	9303      	str	r3, [sp, #12]
    2554:	9202      	str	r2, [sp, #8]
    2556:	231d      	movs	r3, #29
    2558:	9301      	str	r3, [sp, #4]
    255a:	3362      	adds	r3, #98	; 0x62
    255c:	9300      	str	r3, [sp, #0]
    255e:	3b2f      	subs	r3, #47	; 0x2f
    2560:	22a3      	movs	r2, #163	; 0xa3
    2562:	0052      	lsls	r2, r2, #1
    2564:	21f2      	movs	r1, #242	; 0xf2
    2566:	0049      	lsls	r1, r1, #1
    2568:	4c10      	ldr	r4, [pc, #64]	; (25ac <drawKeypad+0x15c>)
    256a:	47a0      	blx	r4
}//end drawKeypad
    256c:	b004      	add	sp, #16
    256e:	bc04      	pop	{r2}
    2570:	4690      	mov	r8, r2
    2572:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    2574:	33d0      	adds	r3, #208	; 0xd0
    2576:	e7a2      	b.n	24be <drawKeypad+0x6e>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    2578:	33f7      	adds	r3, #247	; 0xf7
    257a:	e7b8      	b.n	24ee <drawKeypad+0x9e>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    257c:	33f6      	adds	r3, #246	; 0xf6
    257e:	e7cf      	b.n	2520 <drawKeypad+0xd0>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    2580:	2280      	movs	r2, #128	; 0x80
    2582:	0052      	lsls	r2, r2, #1
    2584:	e7e4      	b.n	2550 <drawKeypad+0x100>
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	2000077c 	.word	0x2000077c
    258c:	00005dbc 	.word	0x00005dbc
    2590:	00001e71 	.word	0x00001e71
    2594:	00005dc0 	.word	0x00005dc0
    2598:	00005dc4 	.word	0x00005dc4
    259c:	03000030 	.word	0x03000030
    25a0:	0000220d 	.word	0x0000220d
    25a4:	20000159 	.word	0x20000159
    25a8:	00005dc8 	.word	0x00005dc8
    25ac:	00001cdd 	.word	0x00001cdd
    25b0:	03000009 	.word	0x03000009
    25b4:	00005dcc 	.word	0x00005dcc
    25b8:	0300000a 	.word	0x0300000a
    25bc:	00005dd0 	.word	0x00005dd0
    25c0:	0300000b 	.word	0x0300000b
    25c4:	00005dd4 	.word	0x00005dd4

000025c8 <drawAlert>:
/* Function Name       : drawAlert
	* Parameters       : int x, int y, char stat
	* Return Values(s) : void
	* Description      : Draw alert, green if good attenuation, red otherwise
	*/
void drawAlert(int x, int y, char stat){
    25c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ca:	46d6      	mov	lr, sl
    25cc:	464f      	mov	r7, r9
    25ce:	4646      	mov	r6, r8
    25d0:	b5c0      	push	{r6, r7, lr}
    25d2:	4680      	mov	r8, r0
    25d4:	000d      	movs	r5, r1
    25d6:	0014      	movs	r4, r2
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    25d8:	4f1f      	ldr	r7, [pc, #124]	; (2658 <drawAlert+0x90>)
    25da:	4920      	ldr	r1, [pc, #128]	; (265c <drawAlert+0x94>)
    25dc:	6838      	ldr	r0, [r7, #0]
    25de:	4e20      	ldr	r6, [pc, #128]	; (2660 <drawAlert+0x98>)
    25e0:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(7 * 16));
    25e2:	4920      	ldr	r1, [pc, #128]	; (2664 <drawAlert+0x9c>)
    25e4:	6838      	ldr	r0, [r7, #0]
    25e6:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    25e8:	6838      	ldr	r0, [r7, #0]
    25ea:	491f      	ldr	r1, [pc, #124]	; (2668 <drawAlert+0xa0>)
    25ec:	47b0      	blx	r6
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    25ee:	2c00      	cmp	r4, #0
    25f0:	d02b      	beq.n	264a <drawAlert+0x82>
	else					Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(204, 51, 0));
    25f2:	4b19      	ldr	r3, [pc, #100]	; (2658 <drawAlert+0x90>)
    25f4:	6818      	ldr	r0, [r3, #0]
    25f6:	491d      	ldr	r1, [pc, #116]	; (266c <drawAlert+0xa4>)
    25f8:	4b19      	ldr	r3, [pc, #100]	; (2660 <drawAlert+0x98>)
    25fa:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(x * 16, y * 16) );
    25fc:	4643      	mov	r3, r8
    25fe:	04d9      	lsls	r1, r3, #19
    2600:	4b1b      	ldr	r3, [pc, #108]	; (2670 <drawAlert+0xa8>)
    2602:	469a      	mov	sl, r3
    2604:	4019      	ands	r1, r3
    2606:	012b      	lsls	r3, r5, #4
    2608:	4a1a      	ldr	r2, [pc, #104]	; (2674 <drawAlert+0xac>)
    260a:	4691      	mov	r9, r2
    260c:	4013      	ands	r3, r2
    260e:	4319      	orrs	r1, r3
    2610:	2680      	movs	r6, #128	; 0x80
    2612:	05f6      	lsls	r6, r6, #23
    2614:	4331      	orrs	r1, r6
    2616:	4c10      	ldr	r4, [pc, #64]	; (2658 <drawAlert+0x90>)
    2618:	6820      	ldr	r0, [r4, #0]
    261a:	4f11      	ldr	r7, [pc, #68]	; (2660 <drawAlert+0x98>)
    261c:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + 25) * 16, (y + 20) * 16));
    261e:	4641      	mov	r1, r8
    2620:	3119      	adds	r1, #25
    2622:	04c9      	lsls	r1, r1, #19
    2624:	4653      	mov	r3, sl
    2626:	4019      	ands	r1, r3
    2628:	3514      	adds	r5, #20
    262a:	012d      	lsls	r5, r5, #4
    262c:	464b      	mov	r3, r9
    262e:	401d      	ands	r5, r3
    2630:	4329      	orrs	r1, r5
    2632:	4331      	orrs	r1, r6
    2634:	6820      	ldr	r0, [r4, #0]
    2636:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, END());
    2638:	6820      	ldr	r0, [r4, #0]
    263a:	2184      	movs	r1, #132	; 0x84
    263c:	0589      	lsls	r1, r1, #22
    263e:	47b8      	blx	r7
}//end drawAlert
    2640:	bc1c      	pop	{r2, r3, r4}
    2642:	4690      	mov	r8, r2
    2644:	4699      	mov	r9, r3
    2646:	46a2      	mov	sl, r4
    2648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    264a:	4b03      	ldr	r3, [pc, #12]	; (2658 <drawAlert+0x90>)
    264c:	6818      	ldr	r0, [r3, #0]
    264e:	490a      	ldr	r1, [pc, #40]	; (2678 <drawAlert+0xb0>)
    2650:	4b03      	ldr	r3, [pc, #12]	; (2660 <drawAlert+0x98>)
    2652:	4798      	blx	r3
    2654:	e7d2      	b.n	25fc <drawAlert+0x34>
    2656:	46c0      	nop			; (mov r8, r8)
    2658:	2000077c 	.word	0x2000077c
    265c:	1f000009 	.word	0x1f000009
    2660:	0000220d 	.word	0x0000220d
    2664:	0e000070 	.word	0x0e000070
    2668:	100000ff 	.word	0x100000ff
    266c:	04cc3300 	.word	0x04cc3300
    2670:	3ff80000 	.word	0x3ff80000
    2674:	00007ff0 	.word	0x00007ff0
    2678:	0400ff55 	.word	0x0400ff55

0000267c <disStart>:
/* Function Name    : disStart
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display start sequence
 */
void disStart(){
    267c:	b570      	push	{r4, r5, r6, lr}
	Ft_Gpu_CoCmd_Dlstart(phost);
    267e:	4c06      	ldr	r4, [pc, #24]	; (2698 <disStart+0x1c>)
    2680:	6820      	ldr	r0, [r4, #0]
    2682:	4b06      	ldr	r3, [pc, #24]	; (269c <disStart+0x20>)
    2684:	4798      	blx	r3
    //change this for initial bg
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    2686:	2180      	movs	r1, #128	; 0x80
    2688:	0489      	lsls	r1, r1, #18
    268a:	6820      	ldr	r0, [r4, #0]
    268c:	4d04      	ldr	r5, [pc, #16]	; (26a0 <disStart+0x24>)
    268e:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(1,1,1));
    2690:	6820      	ldr	r0, [r4, #0]
    2692:	4904      	ldr	r1, [pc, #16]	; (26a4 <disStart+0x28>)
    2694:	47a8      	blx	r5
}//end disStart
    2696:	bd70      	pop	{r4, r5, r6, pc}
    2698:	2000077c 	.word	0x2000077c
    269c:	00001f19 	.word	0x00001f19
    26a0:	0000220d 	.word	0x0000220d
    26a4:	26000007 	.word	0x26000007

000026a8 <disEnd>:
/* Function Name    : disEnd
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display end sequence
 */
void disEnd(){
    26a8:	b510      	push	{r4, lr}
	Ft_Gpu_Hal_WrCmd32(phost,DISPLAY());
    26aa:	4c06      	ldr	r4, [pc, #24]	; (26c4 <disEnd+0x1c>)
    26ac:	2100      	movs	r1, #0
    26ae:	6820      	ldr	r0, [r4, #0]
    26b0:	4b05      	ldr	r3, [pc, #20]	; (26c8 <disEnd+0x20>)
    26b2:	4798      	blx	r3
	Ft_Gpu_CoCmd_Swap(phost);
    26b4:	6820      	ldr	r0, [r4, #0]
    26b6:	4b05      	ldr	r3, [pc, #20]	; (26cc <disEnd+0x24>)
    26b8:	4798      	blx	r3
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    26ba:	6820      	ldr	r0, [r4, #0]
    26bc:	4b04      	ldr	r3, [pc, #16]	; (26d0 <disEnd+0x28>)
    26be:	4798      	blx	r3
}//end disEnd
    26c0:	bd10      	pop	{r4, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	2000077c 	.word	0x2000077c
    26c8:	0000220d 	.word	0x0000220d
    26cc:	00001cb1 	.word	0x00001cb1
    26d0:	000021dd 	.word	0x000021dd

000026d4 <attnOp>:
void attnOp(struct shield_data *receiver_data){
    26d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d6:	46de      	mov	lr, fp
    26d8:	4657      	mov	r7, sl
    26da:	464e      	mov	r6, r9
    26dc:	4645      	mov	r5, r8
    26de:	b5e0      	push	{r5, r6, r7, lr}
    26e0:	b085      	sub	sp, #20
    26e2:	4681      	mov	r9, r0
	char lastSec, lastMin=1, lastGood = time.second, trigger=0;
    26e4:	4bb2      	ldr	r3, [pc, #712]	; (29b0 <attnOp+0x2dc>)
    26e6:	781b      	ldrb	r3, [r3, #0]
    26e8:	469a      	mov	sl, r3
    26ea:	2300      	movs	r3, #0
    26ec:	4698      	mov	r8, r3
    26ee:	3301      	adds	r3, #1
    26f0:	9303      	str	r3, [sp, #12]
    26f2:	e05e      	b.n	27b2 <attnOp+0xde>
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi27<0)? 0:attenuation.rssi27));
    26f4:	2300      	movs	r3, #0
    26f6:	e088      	b.n	280a <attnOp+0x136>
		Ft_Gpu_CoCmd_Number(phost, 500, 200, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    26f8:	2300      	movs	r3, #0
    26fa:	e09b      	b.n	2834 <attnOp+0x160>
		Ft_Gpu_CoCmd_Number(phost, 500, 275, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    26fc:	2300      	movs	r3, #0
    26fe:	e0ae      	b.n	285e <attnOp+0x18a>
		Ft_Gpu_CoCmd_Number(phost, 500, 350, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    2700:	2300      	movs	r3, #0
    2702:	e0c2      	b.n	288a <attnOp+0x1b6>
			drawAlert(40, 125, (attenuation.rssi27<80)? 1:0);
    2704:	4fab      	ldr	r7, [pc, #684]	; (29b4 <attnOp+0x2e0>)
    2706:	88fb      	ldrh	r3, [r7, #6]
    2708:	b21b      	sxth	r3, r3
    270a:	254f      	movs	r5, #79	; 0x4f
    270c:	0fda      	lsrs	r2, r3, #31
    270e:	2600      	movs	r6, #0
    2710:	429d      	cmp	r5, r3
    2712:	4172      	adcs	r2, r6
    2714:	b2d2      	uxtb	r2, r2
    2716:	217d      	movs	r1, #125	; 0x7d
    2718:	2028      	movs	r0, #40	; 0x28
    271a:	4ca7      	ldr	r4, [pc, #668]	; (29b8 <attnOp+0x2e4>)
    271c:	47a0      	blx	r4
			drawAlert(40, 200, (attenuation.rssi169<80)? 1:0);
    271e:	883b      	ldrh	r3, [r7, #0]
    2720:	b21b      	sxth	r3, r3
    2722:	0fda      	lsrs	r2, r3, #31
    2724:	429d      	cmp	r5, r3
    2726:	4172      	adcs	r2, r6
    2728:	b2d2      	uxtb	r2, r2
    272a:	21c8      	movs	r1, #200	; 0xc8
    272c:	2028      	movs	r0, #40	; 0x28
    272e:	47a0      	blx	r4
			drawAlert(40, 275, (attenuation.rssi915<80)? 1:0);
    2730:	887b      	ldrh	r3, [r7, #2]
    2732:	b21b      	sxth	r3, r3
    2734:	0fda      	lsrs	r2, r3, #31
    2736:	429d      	cmp	r5, r3
    2738:	4172      	adcs	r2, r6
    273a:	b2d2      	uxtb	r2, r2
    273c:	2114      	movs	r1, #20
    273e:	31ff      	adds	r1, #255	; 0xff
    2740:	2028      	movs	r0, #40	; 0x28
    2742:	47a0      	blx	r4
			drawAlert(40, 350, (attenuation.rssi245<80)? 1:0);
    2744:	88bb      	ldrh	r3, [r7, #4]
    2746:	b21b      	sxth	r3, r3
    2748:	0fda      	lsrs	r2, r3, #31
    274a:	429d      	cmp	r5, r3
    274c:	4172      	adcs	r2, r6
    274e:	b2d2      	uxtb	r2, r2
    2750:	21af      	movs	r1, #175	; 0xaf
    2752:	0049      	lsls	r1, r1, #1
    2754:	2028      	movs	r0, #40	; 0x28
    2756:	47a0      	blx	r4
    2758:	e0ea      	b.n	2930 <attnOp+0x25c>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    275a:	4b95      	ldr	r3, [pc, #596]	; (29b0 <attnOp+0x2dc>)
    275c:	781b      	ldrb	r3, [r3, #0]
    275e:	4652      	mov	r2, sl
    2760:	1a9b      	subs	r3, r3, r2
    2762:	2b0a      	cmp	r3, #10
    2764:	d100      	bne.n	2768 <attnOp+0x94>
    2766:	e0fb      	b.n	2960 <attnOp+0x28c>
    2768:	3332      	adds	r3, #50	; 0x32
    276a:	d100      	bne.n	276e <attnOp+0x9a>
    276c:	e0f8      	b.n	2960 <attnOp+0x28c>
		if (trigger == 1){
    276e:	4643      	mov	r3, r8
    2770:	2b01      	cmp	r3, #1
    2772:	d100      	bne.n	2776 <attnOp+0xa2>
    2774:	e0fb      	b.n	296e <attnOp+0x29a>
		if (time.minute%30 == 0 && time.minute != lastMin){
    2776:	4b8e      	ldr	r3, [pc, #568]	; (29b0 <attnOp+0x2dc>)
    2778:	785c      	ldrb	r4, [r3, #1]
    277a:	211e      	movs	r1, #30
    277c:	0020      	movs	r0, r4
    277e:	4b8f      	ldr	r3, [pc, #572]	; (29bc <attnOp+0x2e8>)
    2780:	4798      	blx	r3
    2782:	b2c9      	uxtb	r1, r1
    2784:	2900      	cmp	r1, #0
    2786:	d103      	bne.n	2790 <attnOp+0xbc>
    2788:	9b03      	ldr	r3, [sp, #12]
    278a:	42a3      	cmp	r3, r4
    278c:	d000      	beq.n	2790 <attnOp+0xbc>
			lastMin = time.minute;
    278e:	9403      	str	r4, [sp, #12]
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    2790:	4b8b      	ldr	r3, [pc, #556]	; (29c0 <attnOp+0x2ec>)
    2792:	6818      	ldr	r0, [r3, #0]
    2794:	498b      	ldr	r1, [pc, #556]	; (29c4 <attnOp+0x2f0>)
    2796:	4b8c      	ldr	r3, [pc, #560]	; (29c8 <attnOp+0x2f4>)
    2798:	4798      	blx	r3
		drawBack();
    279a:	4b8c      	ldr	r3, [pc, #560]	; (29cc <attnOp+0x2f8>)
    279c:	4798      	blx	r3
		drawTitle("Attenuation");
    279e:	488c      	ldr	r0, [pc, #560]	; (29d0 <attnOp+0x2fc>)
    27a0:	4b8c      	ldr	r3, [pc, #560]	; (29d4 <attnOp+0x300>)
    27a2:	4798      	blx	r3
		disEnd();
    27a4:	4b8c      	ldr	r3, [pc, #560]	; (29d8 <attnOp+0x304>)
    27a6:	4798      	blx	r3
	} while (tag != back);
    27a8:	4b8c      	ldr	r3, [pc, #560]	; (29dc <attnOp+0x308>)
    27aa:	781b      	ldrb	r3, [r3, #0]
    27ac:	2b06      	cmp	r3, #6
    27ae:	d100      	bne.n	27b2 <attnOp+0xde>
    27b0:	e0f6      	b.n	29a0 <attnOp+0x2cc>
		tag = 0;
    27b2:	4e8a      	ldr	r6, [pc, #552]	; (29dc <attnOp+0x308>)
    27b4:	2300      	movs	r3, #0
    27b6:	7033      	strb	r3, [r6, #0]
		rtc_calendar_get_time(&rtc_instance, &time);
    27b8:	497d      	ldr	r1, [pc, #500]	; (29b0 <attnOp+0x2dc>)
    27ba:	4889      	ldr	r0, [pc, #548]	; (29e0 <attnOp+0x30c>)
    27bc:	4b89      	ldr	r3, [pc, #548]	; (29e4 <attnOp+0x310>)
    27be:	4798      	blx	r3
		attenuation.rssi27  = receiver_data->rssi_values.MHz27RSSI;
    27c0:	464b      	mov	r3, r9
    27c2:	7a1b      	ldrb	r3, [r3, #8]
    27c4:	4c7b      	ldr	r4, [pc, #492]	; (29b4 <attnOp+0x2e0>)
    27c6:	80e3      	strh	r3, [r4, #6]
		attenuation.rssi169 = receiver_data->rssi_values.MHz169RSSI;	//10 offset added based on testing
    27c8:	464b      	mov	r3, r9
    27ca:	7a5b      	ldrb	r3, [r3, #9]
    27cc:	8023      	strh	r3, [r4, #0]
		attenuation.rssi915 = receiver_data->rssi_values.MHz915RSSI;	// approved by Dr. Nguyen
    27ce:	464b      	mov	r3, r9
    27d0:	7a9b      	ldrb	r3, [r3, #10]
    27d2:	8063      	strh	r3, [r4, #2]
		attenuation.rssi245 = receiver_data->rssi_values.GHz24RSSI;
    27d4:	464b      	mov	r3, r9
    27d6:	7adb      	ldrb	r3, [r3, #11]
    27d8:	80a3      	strh	r3, [r4, #4]
		disStart();
    27da:	4b83      	ldr	r3, [pc, #524]	; (29e8 <attnOp+0x314>)
    27dc:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    27de:	4d78      	ldr	r5, [pc, #480]	; (29c0 <attnOp+0x2ec>)
    27e0:	4982      	ldr	r1, [pc, #520]	; (29ec <attnOp+0x318>)
    27e2:	6828      	ldr	r0, [r5, #0]
    27e4:	4b82      	ldr	r3, [pc, #520]	; (29f0 <attnOp+0x31c>)
    27e6:	4798      	blx	r3
    27e8:	7030      	strb	r0, [r6, #0]
		Ft_Gpu_CoCmd_Append(phost, attnStart, attnEnd);
    27ea:	4b82      	ldr	r3, [pc, #520]	; (29f4 <attnOp+0x320>)
    27ec:	681a      	ldr	r2, [r3, #0]
    27ee:	4b82      	ldr	r3, [pc, #520]	; (29f8 <attnOp+0x324>)
    27f0:	6819      	ldr	r1, [r3, #0]
    27f2:	6828      	ldr	r0, [r5, #0]
    27f4:	4b81      	ldr	r3, [pc, #516]	; (29fc <attnOp+0x328>)
    27f6:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi27<0)? 0:attenuation.rssi27));
    27f8:	6828      	ldr	r0, [r5, #0]
    27fa:	88e3      	ldrh	r3, [r4, #6]
    27fc:	b21b      	sxth	r3, r3
    27fe:	2b00      	cmp	r3, #0
    2800:	da00      	bge.n	2804 <attnOp+0x130>
    2802:	e777      	b.n	26f4 <attnOp+0x20>
    2804:	4b6b      	ldr	r3, [pc, #428]	; (29b4 <attnOp+0x2e0>)
    2806:	88db      	ldrh	r3, [r3, #6]
    2808:	b21b      	sxth	r3, r3
    280a:	9301      	str	r3, [sp, #4]
    280c:	2304      	movs	r3, #4
    280e:	33ff      	adds	r3, #255	; 0xff
    2810:	9300      	str	r3, [sp, #0]
    2812:	3be4      	subs	r3, #228	; 0xe4
    2814:	227d      	movs	r2, #125	; 0x7d
    2816:	21fa      	movs	r1, #250	; 0xfa
    2818:	0049      	lsls	r1, r1, #1
    281a:	4c79      	ldr	r4, [pc, #484]	; (2a00 <attnOp+0x32c>)
    281c:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 200, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    281e:	4b68      	ldr	r3, [pc, #416]	; (29c0 <attnOp+0x2ec>)
    2820:	6818      	ldr	r0, [r3, #0]
    2822:	4b64      	ldr	r3, [pc, #400]	; (29b4 <attnOp+0x2e0>)
    2824:	881b      	ldrh	r3, [r3, #0]
    2826:	b21b      	sxth	r3, r3
    2828:	2b00      	cmp	r3, #0
    282a:	da00      	bge.n	282e <attnOp+0x15a>
    282c:	e764      	b.n	26f8 <attnOp+0x24>
    282e:	4b61      	ldr	r3, [pc, #388]	; (29b4 <attnOp+0x2e0>)
    2830:	881b      	ldrh	r3, [r3, #0]
    2832:	b21b      	sxth	r3, r3
    2834:	9301      	str	r3, [sp, #4]
    2836:	2304      	movs	r3, #4
    2838:	33ff      	adds	r3, #255	; 0xff
    283a:	9300      	str	r3, [sp, #0]
    283c:	3be4      	subs	r3, #228	; 0xe4
    283e:	22c8      	movs	r2, #200	; 0xc8
    2840:	21fa      	movs	r1, #250	; 0xfa
    2842:	0049      	lsls	r1, r1, #1
    2844:	4c6e      	ldr	r4, [pc, #440]	; (2a00 <attnOp+0x32c>)
    2846:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 275, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    2848:	4b5d      	ldr	r3, [pc, #372]	; (29c0 <attnOp+0x2ec>)
    284a:	6818      	ldr	r0, [r3, #0]
    284c:	4b59      	ldr	r3, [pc, #356]	; (29b4 <attnOp+0x2e0>)
    284e:	885b      	ldrh	r3, [r3, #2]
    2850:	b21b      	sxth	r3, r3
    2852:	2b00      	cmp	r3, #0
    2854:	da00      	bge.n	2858 <attnOp+0x184>
    2856:	e751      	b.n	26fc <attnOp+0x28>
    2858:	4b56      	ldr	r3, [pc, #344]	; (29b4 <attnOp+0x2e0>)
    285a:	885b      	ldrh	r3, [r3, #2]
    285c:	b21b      	sxth	r3, r3
    285e:	9301      	str	r3, [sp, #4]
    2860:	2304      	movs	r3, #4
    2862:	33ff      	adds	r3, #255	; 0xff
    2864:	9300      	str	r3, [sp, #0]
    2866:	3be4      	subs	r3, #228	; 0xe4
    2868:	2214      	movs	r2, #20
    286a:	32ff      	adds	r2, #255	; 0xff
    286c:	21fa      	movs	r1, #250	; 0xfa
    286e:	0049      	lsls	r1, r1, #1
    2870:	4c63      	ldr	r4, [pc, #396]	; (2a00 <attnOp+0x32c>)
    2872:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 350, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    2874:	4b52      	ldr	r3, [pc, #328]	; (29c0 <attnOp+0x2ec>)
    2876:	6818      	ldr	r0, [r3, #0]
    2878:	4b4e      	ldr	r3, [pc, #312]	; (29b4 <attnOp+0x2e0>)
    287a:	889b      	ldrh	r3, [r3, #4]
    287c:	b21b      	sxth	r3, r3
    287e:	2b00      	cmp	r3, #0
    2880:	da00      	bge.n	2884 <attnOp+0x1b0>
    2882:	e73d      	b.n	2700 <attnOp+0x2c>
    2884:	4b4b      	ldr	r3, [pc, #300]	; (29b4 <attnOp+0x2e0>)
    2886:	889b      	ldrh	r3, [r3, #4]
    2888:	b21b      	sxth	r3, r3
    288a:	9301      	str	r3, [sp, #4]
    288c:	2404      	movs	r4, #4
    288e:	34ff      	adds	r4, #255	; 0xff
    2890:	9400      	str	r4, [sp, #0]
    2892:	231f      	movs	r3, #31
    2894:	22af      	movs	r2, #175	; 0xaf
    2896:	0052      	lsls	r2, r2, #1
    2898:	21fa      	movs	r1, #250	; 0xfa
    289a:	0049      	lsls	r1, r1, #1
    289c:	4d58      	ldr	r5, [pc, #352]	; (2a00 <attnOp+0x32c>)
    289e:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, 250, 125, 31, OPT_SIGNED|3, "27MHz");
    28a0:	4f47      	ldr	r7, [pc, #284]	; (29c0 <attnOp+0x2ec>)
    28a2:	6838      	ldr	r0, [r7, #0]
    28a4:	4b57      	ldr	r3, [pc, #348]	; (2a04 <attnOp+0x330>)
    28a6:	9301      	str	r3, [sp, #4]
    28a8:	9400      	str	r4, [sp, #0]
    28aa:	231f      	movs	r3, #31
    28ac:	227d      	movs	r2, #125	; 0x7d
    28ae:	21fa      	movs	r1, #250	; 0xfa
    28b0:	4e55      	ldr	r6, [pc, #340]	; (2a08 <attnOp+0x334>)
    28b2:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 250, 200, 31, OPT_SIGNED|3, "169MHz");
    28b4:	6838      	ldr	r0, [r7, #0]
    28b6:	4b55      	ldr	r3, [pc, #340]	; (2a0c <attnOp+0x338>)
    28b8:	9301      	str	r3, [sp, #4]
    28ba:	9400      	str	r4, [sp, #0]
    28bc:	231f      	movs	r3, #31
    28be:	22c8      	movs	r2, #200	; 0xc8
    28c0:	21fa      	movs	r1, #250	; 0xfa
    28c2:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 250, 275, 31, OPT_SIGNED|3, "915MHz");
    28c4:	6838      	ldr	r0, [r7, #0]
    28c6:	4b52      	ldr	r3, [pc, #328]	; (2a10 <attnOp+0x33c>)
    28c8:	9301      	str	r3, [sp, #4]
    28ca:	9400      	str	r4, [sp, #0]
    28cc:	231f      	movs	r3, #31
    28ce:	2214      	movs	r2, #20
    28d0:	32ff      	adds	r2, #255	; 0xff
    28d2:	21fa      	movs	r1, #250	; 0xfa
    28d4:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 250, 350, 31, OPT_SIGNED|3, "2.4GHz");
    28d6:	6838      	ldr	r0, [r7, #0]
    28d8:	4b4e      	ldr	r3, [pc, #312]	; (2a14 <attnOp+0x340>)
    28da:	9301      	str	r3, [sp, #4]
    28dc:	9400      	str	r4, [sp, #0]
    28de:	231f      	movs	r3, #31
    28e0:	22af      	movs	r2, #175	; 0xaf
    28e2:	0052      	lsls	r2, r2, #1
    28e4:	21fa      	movs	r1, #250	; 0xfa
    28e6:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 650, 125, 31, OPT_SIGNED|3, "dB");
    28e8:	6838      	ldr	r0, [r7, #0]
    28ea:	4d4b      	ldr	r5, [pc, #300]	; (2a18 <attnOp+0x344>)
    28ec:	9501      	str	r5, [sp, #4]
    28ee:	9400      	str	r4, [sp, #0]
    28f0:	231f      	movs	r3, #31
    28f2:	227d      	movs	r2, #125	; 0x7d
    28f4:	4949      	ldr	r1, [pc, #292]	; (2a1c <attnOp+0x348>)
    28f6:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 650, 200, 31, OPT_SIGNED|3, "dB");
    28f8:	6838      	ldr	r0, [r7, #0]
    28fa:	9501      	str	r5, [sp, #4]
    28fc:	9400      	str	r4, [sp, #0]
    28fe:	231f      	movs	r3, #31
    2900:	22c8      	movs	r2, #200	; 0xc8
    2902:	4946      	ldr	r1, [pc, #280]	; (2a1c <attnOp+0x348>)
    2904:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 650, 275, 31, OPT_SIGNED|3, "dB");
    2906:	6838      	ldr	r0, [r7, #0]
    2908:	9501      	str	r5, [sp, #4]
    290a:	9400      	str	r4, [sp, #0]
    290c:	231f      	movs	r3, #31
    290e:	2214      	movs	r2, #20
    2910:	32ff      	adds	r2, #255	; 0xff
    2912:	4942      	ldr	r1, [pc, #264]	; (2a1c <attnOp+0x348>)
    2914:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Text(phost, 650, 350, 31, OPT_SIGNED|3, "dB");
    2916:	6838      	ldr	r0, [r7, #0]
    2918:	9501      	str	r5, [sp, #4]
    291a:	9400      	str	r4, [sp, #0]
    291c:	231f      	movs	r3, #31
    291e:	22af      	movs	r2, #175	; 0xaf
    2920:	0052      	lsls	r2, r2, #1
    2922:	493e      	ldr	r1, [pc, #248]	; (2a1c <attnOp+0x348>)
    2924:	47b0      	blx	r6
		if (alert == 1){
    2926:	4b3e      	ldr	r3, [pc, #248]	; (2a20 <attnOp+0x34c>)
    2928:	781b      	ldrb	r3, [r3, #0]
    292a:	2b01      	cmp	r3, #1
    292c:	d100      	bne.n	2930 <attnOp+0x25c>
    292e:	e6e9      	b.n	2704 <attnOp+0x30>
		if (attenuation.rssi169>80 && attenuation.rssi915>80 && attenuation.rssi245>80){
    2930:	4b20      	ldr	r3, [pc, #128]	; (29b4 <attnOp+0x2e0>)
    2932:	881b      	ldrh	r3, [r3, #0]
    2934:	b21b      	sxth	r3, r3
    2936:	2b50      	cmp	r3, #80	; 0x50
    2938:	dc00      	bgt.n	293c <attnOp+0x268>
    293a:	e70e      	b.n	275a <attnOp+0x86>
    293c:	4b1d      	ldr	r3, [pc, #116]	; (29b4 <attnOp+0x2e0>)
    293e:	885b      	ldrh	r3, [r3, #2]
    2940:	b21b      	sxth	r3, r3
    2942:	2b50      	cmp	r3, #80	; 0x50
    2944:	dc00      	bgt.n	2948 <attnOp+0x274>
    2946:	e708      	b.n	275a <attnOp+0x86>
    2948:	4b1a      	ldr	r3, [pc, #104]	; (29b4 <attnOp+0x2e0>)
    294a:	889b      	ldrh	r3, [r3, #4]
    294c:	b21b      	sxth	r3, r3
    294e:	2b50      	cmp	r3, #80	; 0x50
    2950:	dc00      	bgt.n	2954 <attnOp+0x280>
    2952:	e702      	b.n	275a <attnOp+0x86>
			lastGood = time.second;
    2954:	4b16      	ldr	r3, [pc, #88]	; (29b0 <attnOp+0x2dc>)
    2956:	781b      	ldrb	r3, [r3, #0]
    2958:	469a      	mov	sl, r3
			trigger = 0;
    295a:	2300      	movs	r3, #0
    295c:	4698      	mov	r8, r3
    295e:	e706      	b.n	276e <attnOp+0x9a>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    2960:	4643      	mov	r3, r8
    2962:	2b00      	cmp	r3, #0
    2964:	d000      	beq.n	2968 <attnOp+0x294>
    2966:	e702      	b.n	276e <attnOp+0x9a>
		trigger = 1;
    2968:	3301      	adds	r3, #1
    296a:	4698      	mov	r8, r3
    296c:	e6ff      	b.n	276e <attnOp+0x9a>
			if (time.second%5 == 0 && time.second != lastSec && sound==1){
    296e:	4b10      	ldr	r3, [pc, #64]	; (29b0 <attnOp+0x2dc>)
    2970:	781c      	ldrb	r4, [r3, #0]
    2972:	2105      	movs	r1, #5
    2974:	0020      	movs	r0, r4
    2976:	4b11      	ldr	r3, [pc, #68]	; (29bc <attnOp+0x2e8>)
    2978:	4798      	blx	r3
    297a:	b2c9      	uxtb	r1, r1
    297c:	2900      	cmp	r1, #0
    297e:	d000      	beq.n	2982 <attnOp+0x2ae>
    2980:	e6f9      	b.n	2776 <attnOp+0xa2>
    2982:	465b      	mov	r3, fp
    2984:	42a3      	cmp	r3, r4
    2986:	d100      	bne.n	298a <attnOp+0x2b6>
    2988:	e6f5      	b.n	2776 <attnOp+0xa2>
    298a:	4b26      	ldr	r3, [pc, #152]	; (2a24 <attnOp+0x350>)
    298c:	781b      	ldrb	r3, [r3, #0]
    298e:	2b01      	cmp	r3, #1
    2990:	d000      	beq.n	2994 <attnOp+0x2c0>
    2992:	e6f0      	b.n	2776 <attnOp+0xa2>
				play();
    2994:	4b24      	ldr	r3, [pc, #144]	; (2a28 <attnOp+0x354>)
    2996:	4798      	blx	r3
				lastSec = time.second;
    2998:	4b05      	ldr	r3, [pc, #20]	; (29b0 <attnOp+0x2dc>)
    299a:	781b      	ldrb	r3, [r3, #0]
    299c:	469b      	mov	fp, r3
    299e:	e6ea      	b.n	2776 <attnOp+0xa2>
}// end attnOp
    29a0:	b005      	add	sp, #20
    29a2:	bc3c      	pop	{r2, r3, r4, r5}
    29a4:	4690      	mov	r8, r2
    29a6:	4699      	mov	r9, r3
    29a8:	46a2      	mov	sl, r4
    29aa:	46ab      	mov	fp, r5
    29ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	20000774 	.word	0x20000774
    29b4:	20000138 	.word	0x20000138
    29b8:	000025c9 	.word	0x000025c9
    29bc:	00005425 	.word	0x00005425
    29c0:	2000077c 	.word	0x2000077c
    29c4:	04ffffff 	.word	0x04ffffff
    29c8:	0000220d 	.word	0x0000220d
    29cc:	000023f5 	.word	0x000023f5
    29d0:	00005d8c 	.word	0x00005d8c
    29d4:	00002375 	.word	0x00002375
    29d8:	000026a9 	.word	0x000026a9
    29dc:	20000159 	.word	0x20000159
    29e0:	200004ac 	.word	0x200004ac
    29e4:	00000555 	.word	0x00000555
    29e8:	0000267d 	.word	0x0000267d
    29ec:	0030212c 	.word	0x0030212c
    29f0:	0000209d 	.word	0x0000209d
    29f4:	20000140 	.word	0x20000140
    29f8:	20000144 	.word	0x20000144
    29fc:	00001dc1 	.word	0x00001dc1
    2a00:	00001c4d 	.word	0x00001c4d
    2a04:	00005d68 	.word	0x00005d68
    2a08:	00001bc9 	.word	0x00001bc9
    2a0c:	00005d70 	.word	0x00005d70
    2a10:	00005d78 	.word	0x00005d78
    2a14:	00005d80 	.word	0x00005d80
    2a18:	00005d88 	.word	0x00005d88
    2a1c:	0000028a 	.word	0x0000028a
    2a20:	20000008 	.word	0x20000008
    2a24:	20000158 	.word	0x20000158
    2a28:	0000231d 	.word	0x0000231d

00002a2c <historyOp>:
void historyOp(){
    2a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a2e:	46de      	mov	lr, fp
    2a30:	4657      	mov	r7, sl
    2a32:	464e      	mov	r6, r9
    2a34:	4645      	mov	r5, r8
    2a36:	b5e0      	push	{r5, r6, r7, lr}
    2a38:	b0af      	sub	sp, #188	; 0xbc
    2a3a:	e04d      	b.n	2ad8 <historyOp+0xac>
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d               %03d               %03d               %03d               %03d", \
    2a3c:	1c5a      	adds	r2, r3, #1
    2a3e:	920b      	str	r2, [sp, #44]	; 0x2c
					history[i].timestamp.hour,
    2a40:	4e3b      	ldr	r6, [pc, #236]	; (2b30 <historyOp+0x104>)
    2a42:	005a      	lsls	r2, r3, #1
    2a44:	18d0      	adds	r0, r2, r3
    2a46:	0081      	lsls	r1, r0, #2
    2a48:	1871      	adds	r1, r6, r1
    2a4a:	788d      	ldrb	r5, [r1, #2]
					history[i].timestamp.minute,
    2a4c:	7848      	ldrb	r0, [r1, #1]
    2a4e:	900c      	str	r0, [sp, #48]	; 0x30
					history[i].timestamp.second,
    2a50:	18d7      	adds	r7, r2, r3
    2a52:	00b8      	lsls	r0, r7, #2
    2a54:	5d80      	ldrb	r0, [r0, r6]
					history[i].timestamp.month,
    2a56:	794f      	ldrb	r7, [r1, #5]
    2a58:	970d      	str	r7, [sp, #52]	; 0x34
					history[i].timestamp.day,
    2a5a:	790f      	ldrb	r7, [r1, #4]
    2a5c:	46bc      	mov	ip, r7
					history[i].timestamp.year,
    2a5e:	88cf      	ldrh	r7, [r1, #6]
    2a60:	46b8      	mov	r8, r7
					history[i].rssi_values.MHz27RSSI,
    2a62:	7a0f      	ldrb	r7, [r1, #8]
    2a64:	46b9      	mov	r9, r7
					history[i].rssi_values.MHz169RSSI,
    2a66:	7a4f      	ldrb	r7, [r1, #9]
					history[i].rssi_values.MHz915RSSI,
    2a68:	7a89      	ldrb	r1, [r1, #10]
					history[i].rssi_values.GHz24RSSI);
    2a6a:	18d3      	adds	r3, r2, r3
    2a6c:	009a      	lsls	r2, r3, #2
    2a6e:	18b6      	adds	r6, r6, r2
    2a70:	7af3      	ldrb	r3, [r6, #11]
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d               %03d               %03d               %03d               %03d", \
    2a72:	ae0e      	add	r6, sp, #56	; 0x38
    2a74:	9309      	str	r3, [sp, #36]	; 0x24
    2a76:	9108      	str	r1, [sp, #32]
    2a78:	9707      	str	r7, [sp, #28]
    2a7a:	464b      	mov	r3, r9
    2a7c:	9306      	str	r3, [sp, #24]
    2a7e:	4643      	mov	r3, r8
    2a80:	9305      	str	r3, [sp, #20]
    2a82:	4663      	mov	r3, ip
    2a84:	9304      	str	r3, [sp, #16]
    2a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a88:	9303      	str	r3, [sp, #12]
    2a8a:	9002      	str	r0, [sp, #8]
    2a8c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a8e:	9001      	str	r0, [sp, #4]
    2a90:	9500      	str	r5, [sp, #0]
    2a92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2a94:	002b      	movs	r3, r5
    2a96:	4a27      	ldr	r2, [pc, #156]	; (2b34 <historyOp+0x108>)
    2a98:	2180      	movs	r1, #128	; 0x80
    2a9a:	0030      	movs	r0, r6
    2a9c:	4f26      	ldr	r7, [pc, #152]	; (2b38 <historyOp+0x10c>)
    2a9e:	47b8      	blx	r7
			Ft_Gpu_CoCmd_Text(phost, 50, y, 28, 0, buff);
    2aa0:	b222      	sxth	r2, r4
    2aa2:	4b26      	ldr	r3, [pc, #152]	; (2b3c <historyOp+0x110>)
    2aa4:	6818      	ldr	r0, [r3, #0]
    2aa6:	9601      	str	r6, [sp, #4]
    2aa8:	2300      	movs	r3, #0
    2aaa:	9300      	str	r3, [sp, #0]
    2aac:	331c      	adds	r3, #28
    2aae:	2132      	movs	r1, #50	; 0x32
    2ab0:	4e23      	ldr	r6, [pc, #140]	; (2b40 <historyOp+0x114>)
    2ab2:	47b0      	blx	r6
			y = y + 30;
    2ab4:	341e      	adds	r4, #30
		for(i = 0; i < 10; i++){
    2ab6:	002b      	movs	r3, r5
    2ab8:	2b09      	cmp	r3, #9
    2aba:	ddbf      	ble.n	2a3c <historyOp+0x10>
		drawBack();
    2abc:	4b21      	ldr	r3, [pc, #132]	; (2b44 <historyOp+0x118>)
    2abe:	4798      	blx	r3
		drawTitle("History");
    2ac0:	4821      	ldr	r0, [pc, #132]	; (2b48 <historyOp+0x11c>)
    2ac2:	4b22      	ldr	r3, [pc, #136]	; (2b4c <historyOp+0x120>)
    2ac4:	4798      	blx	r3
		disEnd();
    2ac6:	4b22      	ldr	r3, [pc, #136]	; (2b50 <historyOp+0x124>)
    2ac8:	4798      	blx	r3
		delay_ms(50);
    2aca:	2032      	movs	r0, #50	; 0x32
    2acc:	4b21      	ldr	r3, [pc, #132]	; (2b54 <historyOp+0x128>)
    2ace:	4798      	blx	r3
	} while (tag != back);
    2ad0:	4b21      	ldr	r3, [pc, #132]	; (2b58 <historyOp+0x12c>)
    2ad2:	781b      	ldrb	r3, [r3, #0]
    2ad4:	2b06      	cmp	r3, #6
    2ad6:	d023      	beq.n	2b20 <historyOp+0xf4>
		tag = 0;
    2ad8:	4e1f      	ldr	r6, [pc, #124]	; (2b58 <historyOp+0x12c>)
    2ada:	2500      	movs	r5, #0
    2adc:	7035      	strb	r5, [r6, #0]
		disStart();
    2ade:	4b1f      	ldr	r3, [pc, #124]	; (2b5c <historyOp+0x130>)
    2ae0:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2ae2:	4c16      	ldr	r4, [pc, #88]	; (2b3c <historyOp+0x110>)
    2ae4:	491e      	ldr	r1, [pc, #120]	; (2b60 <historyOp+0x134>)
    2ae6:	6820      	ldr	r0, [r4, #0]
    2ae8:	4b1e      	ldr	r3, [pc, #120]	; (2b64 <historyOp+0x138>)
    2aea:	4798      	blx	r3
    2aec:	7030      	strb	r0, [r6, #0]
		Ft_Gpu_CoCmd_Append(phost, histStart, histEnd);
    2aee:	4b1e      	ldr	r3, [pc, #120]	; (2b68 <historyOp+0x13c>)
    2af0:	681a      	ldr	r2, [r3, #0]
    2af2:	4b1e      	ldr	r3, [pc, #120]	; (2b6c <historyOp+0x140>)
    2af4:	6819      	ldr	r1, [r3, #0]
    2af6:	6820      	ldr	r0, [r4, #0]
    2af8:	4b1d      	ldr	r3, [pc, #116]	; (2b70 <historyOp+0x144>)
    2afa:	4798      	blx	r3
		eeprom_read_ten_data(history, get_eeprom_data_pointer());
    2afc:	4b1d      	ldr	r3, [pc, #116]	; (2b74 <historyOp+0x148>)
    2afe:	4798      	blx	r3
    2b00:	0001      	movs	r1, r0
    2b02:	480b      	ldr	r0, [pc, #44]	; (2b30 <historyOp+0x104>)
    2b04:	4b1c      	ldr	r3, [pc, #112]	; (2b78 <historyOp+0x14c>)
    2b06:	4798      	blx	r3
		Ft_Gpu_CoCmd_Text(phost, 50, y, 28, 0, "#    Time          Date                          27Mhz        169Mhz      915Mhz        2.4Ghz");
    2b08:	6820      	ldr	r0, [r4, #0]
    2b0a:	4b1c      	ldr	r3, [pc, #112]	; (2b7c <historyOp+0x150>)
    2b0c:	9301      	str	r3, [sp, #4]
    2b0e:	9500      	str	r5, [sp, #0]
    2b10:	231c      	movs	r3, #28
    2b12:	2264      	movs	r2, #100	; 0x64
    2b14:	2132      	movs	r1, #50	; 0x32
    2b16:	4c0a      	ldr	r4, [pc, #40]	; (2b40 <historyOp+0x114>)
    2b18:	47a0      	blx	r4
		y += 35;
    2b1a:	2487      	movs	r4, #135	; 0x87
		for(i = 0; i < 10; i++){
    2b1c:	2300      	movs	r3, #0
    2b1e:	e7cb      	b.n	2ab8 <historyOp+0x8c>
}//end histOp
    2b20:	b02f      	add	sp, #188	; 0xbc
    2b22:	bc3c      	pop	{r2, r3, r4, r5}
    2b24:	4690      	mov	r8, r2
    2b26:	4699      	mov	r9, r3
    2b28:	46a2      	mov	sl, r4
    2b2a:	46ab      	mov	fp, r5
    2b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	200006fc 	.word	0x200006fc
    2b34:	00005e38 	.word	0x00005e38
    2b38:	000054f1 	.word	0x000054f1
    2b3c:	2000077c 	.word	0x2000077c
    2b40:	00001bc9 	.word	0x00001bc9
    2b44:	000023f5 	.word	0x000023f5
    2b48:	00005eac 	.word	0x00005eac
    2b4c:	00002375 	.word	0x00002375
    2b50:	000026a9 	.word	0x000026a9
    2b54:	00000151 	.word	0x00000151
    2b58:	20000159 	.word	0x20000159
    2b5c:	0000267d 	.word	0x0000267d
    2b60:	0030212c 	.word	0x0030212c
    2b64:	0000209d 	.word	0x0000209d
    2b68:	20000148 	.word	0x20000148
    2b6c:	2000014c 	.word	0x2000014c
    2b70:	00001dc1 	.word	0x00001dc1
    2b74:	000015c9 	.word	0x000015c9
    2b78:	000018b9 	.word	0x000018b9
    2b7c:	00005dd8 	.word	0x00005dd8

00002b80 <rssiOp>:
void rssiOp(){
    2b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b82:	46de      	mov	lr, fp
    2b84:	b500      	push	{lr}
    2b86:	b082      	sub	sp, #8
	tag = 0;
    2b88:	4e48      	ldr	r6, [pc, #288]	; (2cac <rssiOp+0x12c>)
    2b8a:	2300      	movs	r3, #0
    2b8c:	7033      	strb	r3, [r6, #0]
		disStart();
    2b8e:	4b48      	ldr	r3, [pc, #288]	; (2cb0 <rssiOp+0x130>)
    2b90:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2b92:	4c48      	ldr	r4, [pc, #288]	; (2cb4 <rssiOp+0x134>)
    2b94:	4948      	ldr	r1, [pc, #288]	; (2cb8 <rssiOp+0x138>)
    2b96:	6820      	ldr	r0, [r4, #0]
    2b98:	4b48      	ldr	r3, [pc, #288]	; (2cbc <rssiOp+0x13c>)
    2b9a:	4798      	blx	r3
    2b9c:	7030      	strb	r0, [r6, #0]
		Ft_Gpu_CoCmd_Append(phost, rssiStart, rssiEnd);
    2b9e:	4b48      	ldr	r3, [pc, #288]	; (2cc0 <rssiOp+0x140>)
    2ba0:	681a      	ldr	r2, [r3, #0]
    2ba2:	4b48      	ldr	r3, [pc, #288]	; (2cc4 <rssiOp+0x144>)
    2ba4:	6819      	ldr	r1, [r3, #0]
    2ba6:	6820      	ldr	r0, [r4, #0]
    2ba8:	4b47      	ldr	r3, [pc, #284]	; (2cc8 <rssiOp+0x148>)
    2baa:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 650, 125, 31, OPT_SIGNED|OPT_CENTER|3, 11);
    2bac:	6820      	ldr	r0, [r4, #0]
    2bae:	230b      	movs	r3, #11
    2bb0:	9301      	str	r3, [sp, #4]
    2bb2:	4d46      	ldr	r5, [pc, #280]	; (2ccc <rssiOp+0x14c>)
    2bb4:	9500      	str	r5, [sp, #0]
    2bb6:	3314      	adds	r3, #20
    2bb8:	227d      	movs	r2, #125	; 0x7d
    2bba:	4945      	ldr	r1, [pc, #276]	; (2cd0 <rssiOp+0x150>)
    2bbc:	4f45      	ldr	r7, [pc, #276]	; (2cd4 <rssiOp+0x154>)
    2bbe:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 200, 31, OPT_SIGNED|OPT_CENTER|3, 10);
    2bc0:	6820      	ldr	r0, [r4, #0]
    2bc2:	230a      	movs	r3, #10
    2bc4:	9301      	str	r3, [sp, #4]
    2bc6:	9500      	str	r5, [sp, #0]
    2bc8:	3315      	adds	r3, #21
    2bca:	22c8      	movs	r2, #200	; 0xc8
    2bcc:	4940      	ldr	r1, [pc, #256]	; (2cd0 <rssiOp+0x150>)
    2bce:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 275, 31, OPT_SIGNED|OPT_CENTER|3, 23);
    2bd0:	6820      	ldr	r0, [r4, #0]
    2bd2:	2317      	movs	r3, #23
    2bd4:	9301      	str	r3, [sp, #4]
    2bd6:	9500      	str	r5, [sp, #0]
    2bd8:	3308      	adds	r3, #8
    2bda:	2214      	movs	r2, #20
    2bdc:	32ff      	adds	r2, #255	; 0xff
    2bde:	493c      	ldr	r1, [pc, #240]	; (2cd0 <rssiOp+0x150>)
    2be0:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Number(phost, 650, 350, 31, OPT_SIGNED|OPT_CENTER|3, 14);
    2be2:	6820      	ldr	r0, [r4, #0]
    2be4:	230e      	movs	r3, #14
    2be6:	9301      	str	r3, [sp, #4]
    2be8:	9500      	str	r5, [sp, #0]
    2bea:	3311      	adds	r3, #17
    2bec:	22af      	movs	r2, #175	; 0xaf
    2bee:	0052      	lsls	r2, r2, #1
    2bf0:	4937      	ldr	r1, [pc, #220]	; (2cd0 <rssiOp+0x150>)
    2bf2:	47b8      	blx	r7
	  	Ft_Gpu_CoCmd_Text(phost, 400, 125, 31, OPT_SIGNED|3, "27MHz");
    2bf4:	6820      	ldr	r0, [r4, #0]
    2bf6:	4b38      	ldr	r3, [pc, #224]	; (2cd8 <rssiOp+0x158>)
    2bf8:	9301      	str	r3, [sp, #4]
    2bfa:	2504      	movs	r5, #4
    2bfc:	35ff      	adds	r5, #255	; 0xff
    2bfe:	9500      	str	r5, [sp, #0]
    2c00:	231f      	movs	r3, #31
    2c02:	227d      	movs	r2, #125	; 0x7d
    2c04:	21c8      	movs	r1, #200	; 0xc8
    2c06:	0049      	lsls	r1, r1, #1
    2c08:	4f34      	ldr	r7, [pc, #208]	; (2cdc <rssiOp+0x15c>)
    2c0a:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 200, 31, OPT_SIGNED|3, "169MHz");
    2c0c:	6820      	ldr	r0, [r4, #0]
    2c0e:	4b34      	ldr	r3, [pc, #208]	; (2ce0 <rssiOp+0x160>)
    2c10:	9301      	str	r3, [sp, #4]
    2c12:	9500      	str	r5, [sp, #0]
    2c14:	231f      	movs	r3, #31
    2c16:	22c8      	movs	r2, #200	; 0xc8
    2c18:	21c8      	movs	r1, #200	; 0xc8
    2c1a:	0049      	lsls	r1, r1, #1
    2c1c:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 275, 31, OPT_SIGNED|3, "915MHz");
    2c1e:	6820      	ldr	r0, [r4, #0]
    2c20:	4b30      	ldr	r3, [pc, #192]	; (2ce4 <rssiOp+0x164>)
    2c22:	9301      	str	r3, [sp, #4]
    2c24:	9500      	str	r5, [sp, #0]
    2c26:	231f      	movs	r3, #31
    2c28:	2214      	movs	r2, #20
    2c2a:	32ff      	adds	r2, #255	; 0xff
    2c2c:	21c8      	movs	r1, #200	; 0xc8
    2c2e:	0049      	lsls	r1, r1, #1
    2c30:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 400, 350, 31, OPT_SIGNED|3, "2.4GHz");
    2c32:	6820      	ldr	r0, [r4, #0]
    2c34:	4b2c      	ldr	r3, [pc, #176]	; (2ce8 <rssiOp+0x168>)
    2c36:	9301      	str	r3, [sp, #4]
    2c38:	9500      	str	r5, [sp, #0]
    2c3a:	231f      	movs	r3, #31
    2c3c:	22af      	movs	r2, #175	; 0xaf
    2c3e:	0052      	lsls	r2, r2, #1
    2c40:	21c8      	movs	r1, #200	; 0xc8
    2c42:	0049      	lsls	r1, r1, #1
    2c44:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 125, 31, OPT_SIGNED|3, "dB");
    2c46:	6820      	ldr	r0, [r4, #0]
    2c48:	4b28      	ldr	r3, [pc, #160]	; (2cec <rssiOp+0x16c>)
    2c4a:	469b      	mov	fp, r3
    2c4c:	9301      	str	r3, [sp, #4]
    2c4e:	9500      	str	r5, [sp, #0]
    2c50:	231f      	movs	r3, #31
    2c52:	227d      	movs	r2, #125	; 0x7d
    2c54:	4926      	ldr	r1, [pc, #152]	; (2cf0 <rssiOp+0x170>)
    2c56:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 200, 31, OPT_SIGNED|3, "dB");
    2c58:	6820      	ldr	r0, [r4, #0]
    2c5a:	465b      	mov	r3, fp
    2c5c:	9301      	str	r3, [sp, #4]
    2c5e:	9500      	str	r5, [sp, #0]
    2c60:	231f      	movs	r3, #31
    2c62:	22c8      	movs	r2, #200	; 0xc8
    2c64:	4922      	ldr	r1, [pc, #136]	; (2cf0 <rssiOp+0x170>)
    2c66:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 275, 31, OPT_SIGNED|3, "dB");
    2c68:	6820      	ldr	r0, [r4, #0]
    2c6a:	465b      	mov	r3, fp
    2c6c:	9301      	str	r3, [sp, #4]
    2c6e:	9500      	str	r5, [sp, #0]
    2c70:	231f      	movs	r3, #31
    2c72:	2214      	movs	r2, #20
    2c74:	32ff      	adds	r2, #255	; 0xff
    2c76:	491e      	ldr	r1, [pc, #120]	; (2cf0 <rssiOp+0x170>)
    2c78:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, 750, 350, 31, OPT_SIGNED|3, "dB");
    2c7a:	6820      	ldr	r0, [r4, #0]
    2c7c:	465b      	mov	r3, fp
    2c7e:	9301      	str	r3, [sp, #4]
    2c80:	9500      	str	r5, [sp, #0]
    2c82:	231f      	movs	r3, #31
    2c84:	22af      	movs	r2, #175	; 0xaf
    2c86:	0052      	lsls	r2, r2, #1
    2c88:	4919      	ldr	r1, [pc, #100]	; (2cf0 <rssiOp+0x170>)
    2c8a:	47b8      	blx	r7
		drawBack();
    2c8c:	4b19      	ldr	r3, [pc, #100]	; (2cf4 <rssiOp+0x174>)
    2c8e:	4798      	blx	r3
		drawTitle("RSSI [interior]");
    2c90:	4819      	ldr	r0, [pc, #100]	; (2cf8 <rssiOp+0x178>)
    2c92:	4b1a      	ldr	r3, [pc, #104]	; (2cfc <rssiOp+0x17c>)
    2c94:	4798      	blx	r3
		disEnd();
    2c96:	4b1a      	ldr	r3, [pc, #104]	; (2d00 <rssiOp+0x180>)
    2c98:	4798      	blx	r3
	} while (tag != back);
    2c9a:	7833      	ldrb	r3, [r6, #0]
    2c9c:	2b06      	cmp	r3, #6
    2c9e:	d000      	beq.n	2ca2 <rssiOp+0x122>
    2ca0:	e772      	b.n	2b88 <rssiOp+0x8>
}//end rssiOp
    2ca2:	b002      	add	sp, #8
    2ca4:	bc04      	pop	{r2}
    2ca6:	4693      	mov	fp, r2
    2ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	20000159 	.word	0x20000159
    2cb0:	0000267d 	.word	0x0000267d
    2cb4:	2000077c 	.word	0x2000077c
    2cb8:	0030212c 	.word	0x0030212c
    2cbc:	0000209d 	.word	0x0000209d
    2cc0:	20000150 	.word	0x20000150
    2cc4:	20000154 	.word	0x20000154
    2cc8:	00001dc1 	.word	0x00001dc1
    2ccc:	00000703 	.word	0x00000703
    2cd0:	0000028a 	.word	0x0000028a
    2cd4:	00001c4d 	.word	0x00001c4d
    2cd8:	00005d68 	.word	0x00005d68
    2cdc:	00001bc9 	.word	0x00001bc9
    2ce0:	00005d70 	.word	0x00005d70
    2ce4:	00005d78 	.word	0x00005d78
    2ce8:	00005d80 	.word	0x00005d80
    2cec:	00005d88 	.word	0x00005d88
    2cf0:	000002ee 	.word	0x000002ee
    2cf4:	000023f5 	.word	0x000023f5
    2cf8:	00005ed4 	.word	0x00005ed4
    2cfc:	00002375 	.word	0x00002375
    2d00:	000026a9 	.word	0x000026a9

00002d04 <calScreen>:
void calScreen(){
    2d04:	b530      	push	{r4, r5, lr}
    2d06:	b083      	sub	sp, #12
	disStart();
    2d08:	4b0c      	ldr	r3, [pc, #48]	; (2d3c <calScreen+0x38>)
    2d0a:	4798      	blx	r3
	Ft_Gpu_CoCmd_Text(phost,disWid/2,disHei/2,30,OPT_CENTER,"Please tap on the dot");
    2d0c:	4c0c      	ldr	r4, [pc, #48]	; (2d40 <calScreen+0x3c>)
    2d0e:	6820      	ldr	r0, [r4, #0]
    2d10:	4b0c      	ldr	r3, [pc, #48]	; (2d44 <calScreen+0x40>)
    2d12:	9301      	str	r3, [sp, #4]
    2d14:	23c0      	movs	r3, #192	; 0xc0
    2d16:	00db      	lsls	r3, r3, #3
    2d18:	9300      	str	r3, [sp, #0]
    2d1a:	231e      	movs	r3, #30
    2d1c:	22f0      	movs	r2, #240	; 0xf0
    2d1e:	21c8      	movs	r1, #200	; 0xc8
    2d20:	0049      	lsls	r1, r1, #1
    2d22:	4d09      	ldr	r5, [pc, #36]	; (2d48 <calScreen+0x44>)
    2d24:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Calibrate(phost,0);
    2d26:	6820      	ldr	r0, [r4, #0]
    2d28:	2100      	movs	r1, #0
    2d2a:	4b08      	ldr	r3, [pc, #32]	; (2d4c <calScreen+0x48>)
    2d2c:	4798      	blx	r3
	disEnd();
    2d2e:	4b08      	ldr	r3, [pc, #32]	; (2d50 <calScreen+0x4c>)
    2d30:	4798      	blx	r3
	delay_ms(100);
    2d32:	2064      	movs	r0, #100	; 0x64
    2d34:	4b07      	ldr	r3, [pc, #28]	; (2d54 <calScreen+0x50>)
    2d36:	4798      	blx	r3
}//end calScreen
    2d38:	b003      	add	sp, #12
    2d3a:	bd30      	pop	{r4, r5, pc}
    2d3c:	0000267d 	.word	0x0000267d
    2d40:	2000077c 	.word	0x2000077c
    2d44:	00005d98 	.word	0x00005d98
    2d48:	00001bc9 	.word	0x00001bc9
    2d4c:	00001d85 	.word	0x00001d85
    2d50:	000026a9 	.word	0x000026a9
    2d54:	00000151 	.word	0x00000151

00002d58 <setTime>:
void setTime(){
    2d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d5a:	46de      	mov	lr, fp
    2d5c:	4657      	mov	r7, sl
    2d5e:	464e      	mov	r6, r9
    2d60:	4645      	mov	r5, r8
    2d62:	b5e0      	push	{r5, r6, r7, lr}
    2d64:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, timeIn[10] = "0", i = 0, pressed = 0;
    2d66:	2330      	movs	r3, #48	; 0x30
    2d68:	9305      	str	r3, [sp, #20]
    2d6a:	2206      	movs	r2, #6
    2d6c:	2100      	movs	r1, #0
    2d6e:	a806      	add	r0, sp, #24
    2d70:	4b88      	ldr	r3, [pc, #544]	; (2f94 <setTime+0x23c>)
    2d72:	4798      	blx	r3
    2d74:	2300      	movs	r3, #0
    2d76:	9303      	str	r3, [sp, #12]
    2d78:	2600      	movs	r6, #0
    2d7a:	469b      	mov	fp, r3
    2d7c:	e022      	b.n	2dc4 <setTime+0x6c>
		else							timeIn[i] = '_';
    2d7e:	225f      	movs	r2, #95	; 0x5f
    2d80:	ab05      	add	r3, sp, #20
    2d82:	559a      	strb	r2, [r3, r6]
    2d84:	e029      	b.n	2dda <setTime+0x82>
		if (tag>47 && tag<58)	pressed = tag - 48;
    2d86:	9203      	str	r2, [sp, #12]
    2d88:	e081      	b.n	2e8e <setTime+0x136>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    2d8a:	2e01      	cmp	r6, #1
    2d8c:	d100      	bne.n	2d90 <setTime+0x38>
    2d8e:	e090      	b.n	2eb2 <setTime+0x15a>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    2d90:	2e03      	cmp	r6, #3
    2d92:	d100      	bne.n	2d96 <setTime+0x3e>
    2d94:	e096      	b.n	2ec4 <setTime+0x16c>
    2d96:	2e06      	cmp	r6, #6
    2d98:	d100      	bne.n	2d9c <setTime+0x44>
    2d9a:	e093      	b.n	2ec4 <setTime+0x16c>
					timeIn[i] = tag;
    2d9c:	aa05      	add	r2, sp, #20
    2d9e:	5593      	strb	r3, [r2, r6]
					i++;
    2da0:	3601      	adds	r6, #1
    2da2:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==9){		//if ok is pressed
    2da4:	2b0b      	cmp	r3, #11
    2da6:	d100      	bne.n	2daa <setTime+0x52>
    2da8:	e0b0      	b.n	2f0c <setTime+0x1b4>
    2daa:	2e09      	cmp	r6, #9
    2dac:	d100      	bne.n	2db0 <setTime+0x58>
    2dae:	e0ad      	b.n	2f0c <setTime+0x1b4>
			tempTag = tag;
    2db0:	469b      	mov	fp, r3
		if(i==2 || i==5){
    2db2:	2e02      	cmp	r6, #2
    2db4:	d100      	bne.n	2db8 <setTime+0x60>
    2db6:	e0e6      	b.n	2f86 <setTime+0x22e>
    2db8:	2e05      	cmp	r6, #5
    2dba:	d100      	bne.n	2dbe <setTime+0x66>
    2dbc:	e0e3      	b.n	2f86 <setTime+0x22e>
	}while(tag != back);
    2dbe:	2b06      	cmp	r3, #6
    2dc0:	d100      	bne.n	2dc4 <setTime+0x6c>
    2dc2:	e0d6      	b.n	2f72 <setTime+0x21a>
		rtc_calendar_get_time(&rtc_instance, &time);
    2dc4:	4c74      	ldr	r4, [pc, #464]	; (2f98 <setTime+0x240>)
    2dc6:	0021      	movs	r1, r4
    2dc8:	4874      	ldr	r0, [pc, #464]	; (2f9c <setTime+0x244>)
    2dca:	4b75      	ldr	r3, [pc, #468]	; (2fa0 <setTime+0x248>)
    2dcc:	4798      	blx	r3
		if (time.second%2 == 1)			timeIn[i] = ' ';
    2dce:	7823      	ldrb	r3, [r4, #0]
    2dd0:	07db      	lsls	r3, r3, #31
    2dd2:	d5d4      	bpl.n	2d7e <setTime+0x26>
    2dd4:	2220      	movs	r2, #32
    2dd6:	ab05      	add	r3, sp, #20
    2dd8:	559a      	strb	r2, [r3, r6]
		tag = 0;
    2dda:	4b72      	ldr	r3, [pc, #456]	; (2fa4 <setTime+0x24c>)
    2ddc:	4699      	mov	r9, r3
    2dde:	2300      	movs	r3, #0
    2de0:	4698      	mov	r8, r3
    2de2:	464a      	mov	r2, r9
    2de4:	7013      	strb	r3, [r2, #0]
		disStart();
    2de6:	4b70      	ldr	r3, [pc, #448]	; (2fa8 <setTime+0x250>)
    2de8:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    2dea:	4c70      	ldr	r4, [pc, #448]	; (2fac <setTime+0x254>)
    2dec:	4970      	ldr	r1, [pc, #448]	; (2fb0 <setTime+0x258>)
    2dee:	6820      	ldr	r0, [r4, #0]
    2df0:	4d70      	ldr	r5, [pc, #448]	; (2fb4 <setTime+0x25c>)
    2df2:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    2df4:	4970      	ldr	r1, [pc, #448]	; (2fb8 <setTime+0x260>)
    2df6:	6820      	ldr	r0, [r4, #0]
    2df8:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2dfa:	4970      	ldr	r1, [pc, #448]	; (2fbc <setTime+0x264>)
    2dfc:	6820      	ldr	r0, [r4, #0]
    2dfe:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    2e00:	496f      	ldr	r1, [pc, #444]	; (2fc0 <setTime+0x268>)
    2e02:	6820      	ldr	r0, [r4, #0]
    2e04:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    2e06:	496f      	ldr	r1, [pc, #444]	; (2fc4 <setTime+0x26c>)
    2e08:	6820      	ldr	r0, [r4, #0]
    2e0a:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    2e0c:	2184      	movs	r1, #132	; 0x84
    2e0e:	0589      	lsls	r1, r1, #22
    2e10:	6820      	ldr	r0, [r4, #0]
    2e12:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    2e14:	4969      	ldr	r1, [pc, #420]	; (2fbc <setTime+0x264>)
    2e16:	6820      	ldr	r0, [r4, #0]
    2e18:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Time");
    2e1a:	6820      	ldr	r0, [r4, #0]
    2e1c:	4b6a      	ldr	r3, [pc, #424]	; (2fc8 <setTime+0x270>)
    2e1e:	9301      	str	r3, [sp, #4]
    2e20:	4643      	mov	r3, r8
    2e22:	9300      	str	r3, [sp, #0]
    2e24:	331c      	adds	r3, #28
    2e26:	2230      	movs	r2, #48	; 0x30
    2e28:	21f0      	movs	r1, #240	; 0xf0
    2e2a:	4f68      	ldr	r7, [pc, #416]	; (2fcc <setTime+0x274>)
    2e2c:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "hh:mm:ss    (24h format)");
    2e2e:	6820      	ldr	r0, [r4, #0]
    2e30:	4b67      	ldr	r3, [pc, #412]	; (2fd0 <setTime+0x278>)
    2e32:	9301      	str	r3, [sp, #4]
    2e34:	4643      	mov	r3, r8
    2e36:	9300      	str	r3, [sp, #0]
    2e38:	331c      	adds	r3, #28
    2e3a:	2248      	movs	r2, #72	; 0x48
    2e3c:	21f0      	movs	r1, #240	; 0xf0
    2e3e:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    2e40:	2180      	movs	r1, #128	; 0x80
    2e42:	04c9      	lsls	r1, r1, #19
    2e44:	6820      	ldr	r0, [r4, #0]
    2e46:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, timeIn);
    2e48:	6820      	ldr	r0, [r4, #0]
    2e4a:	ab05      	add	r3, sp, #20
    2e4c:	9301      	str	r3, [sp, #4]
    2e4e:	4643      	mov	r3, r8
    2e50:	9300      	str	r3, [sp, #0]
    2e52:	331e      	adds	r3, #30
    2e54:	2278      	movs	r2, #120	; 0x78
    2e56:	21f5      	movs	r1, #245	; 0xf5
    2e58:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    2e5a:	4958      	ldr	r1, [pc, #352]	; (2fbc <setTime+0x264>)
    2e5c:	6820      	ldr	r0, [r4, #0]
    2e5e:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    2e60:	6820      	ldr	r0, [r4, #0]
    2e62:	495c      	ldr	r1, [pc, #368]	; (2fd4 <setTime+0x27c>)
    2e64:	4b5c      	ldr	r3, [pc, #368]	; (2fd8 <setTime+0x280>)
    2e66:	4798      	blx	r3
    2e68:	464b      	mov	r3, r9
    2e6a:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    2e6c:	9803      	ldr	r0, [sp, #12]
    2e6e:	4b5b      	ldr	r3, [pc, #364]	; (2fdc <setTime+0x284>)
    2e70:	4798      	blx	r3
		drawBack();
    2e72:	4b5b      	ldr	r3, [pc, #364]	; (2fe0 <setTime+0x288>)
    2e74:	4798      	blx	r3
		disEnd();
    2e76:	4b5b      	ldr	r3, [pc, #364]	; (2fe4 <setTime+0x28c>)
    2e78:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    2e7a:	464b      	mov	r3, r9
    2e7c:	781b      	ldrb	r3, [r3, #0]
    2e7e:	001a      	movs	r2, r3
    2e80:	3a30      	subs	r2, #48	; 0x30
    2e82:	b2d2      	uxtb	r2, r2
    2e84:	2a09      	cmp	r2, #9
    2e86:	d800      	bhi.n	2e8a <setTime+0x132>
    2e88:	e77d      	b.n	2d86 <setTime+0x2e>
		else					pressed = 0;
    2e8a:	2100      	movs	r1, #0
    2e8c:	9103      	str	r1, [sp, #12]
		if(tag==0)		tempTag = tag;
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d100      	bne.n	2e94 <setTime+0x13c>
    2e92:	469b      	mov	fp, r3
		if (tempTag != tag && tag != 0 && tag!=back){
    2e94:	459b      	cmp	fp, r3
    2e96:	d08c      	beq.n	2db2 <setTime+0x5a>
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d08a      	beq.n	2db2 <setTime+0x5a>
    2e9c:	2b06      	cmp	r3, #6
    2e9e:	d088      	beq.n	2db2 <setTime+0x5a>
			if(tag> 47 && tag<58){
    2ea0:	2a09      	cmp	r2, #9
    2ea2:	d813      	bhi.n	2ecc <setTime+0x174>
				if(i==0 && tag>50);								//1st digit in hour
    2ea4:	2e00      	cmp	r6, #0
    2ea6:	d000      	beq.n	2eaa <setTime+0x152>
    2ea8:	e76f      	b.n	2d8a <setTime+0x32>
    2eaa:	2b32      	cmp	r3, #50	; 0x32
    2eac:	d900      	bls.n	2eb0 <setTime+0x158>
    2eae:	e779      	b.n	2da4 <setTime+0x4c>
    2eb0:	e76b      	b.n	2d8a <setTime+0x32>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    2eb2:	aa05      	add	r2, sp, #20
    2eb4:	7812      	ldrb	r2, [r2, #0]
    2eb6:	2a32      	cmp	r2, #50	; 0x32
    2eb8:	d000      	beq.n	2ebc <setTime+0x164>
    2eba:	e769      	b.n	2d90 <setTime+0x38>
    2ebc:	2b33      	cmp	r3, #51	; 0x33
    2ebe:	d900      	bls.n	2ec2 <setTime+0x16a>
    2ec0:	e770      	b.n	2da4 <setTime+0x4c>
    2ec2:	e765      	b.n	2d90 <setTime+0x38>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    2ec4:	2b35      	cmp	r3, #53	; 0x35
    2ec6:	d900      	bls.n	2eca <setTime+0x172>
    2ec8:	e76c      	b.n	2da4 <setTime+0x4c>
    2eca:	e767      	b.n	2d9c <setTime+0x44>
			} else if(tag == clr){		//if clr is pressed
    2ecc:	2b0a      	cmp	r3, #10
    2ece:	d00f      	beq.n	2ef0 <setTime+0x198>
			} else if(tag==del && i>0){		//if del is pressed
    2ed0:	2b09      	cmp	r3, #9
    2ed2:	d000      	beq.n	2ed6 <setTime+0x17e>
    2ed4:	e766      	b.n	2da4 <setTime+0x4c>
    2ed6:	2e00      	cmp	r6, #0
    2ed8:	d100      	bne.n	2edc <setTime+0x184>
    2eda:	e763      	b.n	2da4 <setTime+0x4c>
				if(i==3 || i==6){			//clear last user input
    2edc:	2e03      	cmp	r6, #3
    2ede:	d00f      	beq.n	2f00 <setTime+0x1a8>
    2ee0:	2e06      	cmp	r6, #6
    2ee2:	d00d      	beq.n	2f00 <setTime+0x1a8>
				timeIn[i] = 0;
    2ee4:	2100      	movs	r1, #0
    2ee6:	aa05      	add	r2, sp, #20
    2ee8:	5591      	strb	r1, [r2, r6]
				i--;
    2eea:	3e01      	subs	r6, #1
    2eec:	b2f6      	uxtb	r6, r6
    2eee:	e759      	b.n	2da4 <setTime+0x4c>
					timeIn[i] = 0;
    2ef0:	2100      	movs	r1, #0
    2ef2:	aa05      	add	r2, sp, #20
    2ef4:	5591      	strb	r1, [r2, r6]
					i--;
    2ef6:	3e01      	subs	r6, #1
    2ef8:	b2f6      	uxtb	r6, r6
				}while(i>0);
    2efa:	2e00      	cmp	r6, #0
    2efc:	d1f8      	bne.n	2ef0 <setTime+0x198>
    2efe:	e751      	b.n	2da4 <setTime+0x4c>
					timeIn[i] = 0;
    2f00:	2100      	movs	r1, #0
    2f02:	aa05      	add	r2, sp, #20
    2f04:	5591      	strb	r1, [r2, r6]
					i--;
    2f06:	3e01      	subs	r6, #1
    2f08:	b2f6      	uxtb	r6, r6
    2f0a:	e7eb      	b.n	2ee4 <setTime+0x18c>
				timeIn[i] = 0;			// compute time and update to the system
    2f0c:	ac05      	add	r4, sp, #20
    2f0e:	2300      	movs	r3, #0
    2f10:	55a3      	strb	r3, [r4, r6]
				rtc_calendar_disable(&rtc_instance);
    2f12:	4822      	ldr	r0, [pc, #136]	; (2f9c <setTime+0x244>)
    2f14:	4b34      	ldr	r3, [pc, #208]	; (2fe8 <setTime+0x290>)
    2f16:	4798      	blx	r3
				time.hour = (timeIn[0]%48)*10+(timeIn[1]%48);
    2f18:	7820      	ldrb	r0, [r4, #0]
    2f1a:	4f34      	ldr	r7, [pc, #208]	; (2fec <setTime+0x294>)
    2f1c:	2130      	movs	r1, #48	; 0x30
    2f1e:	47b8      	blx	r7
    2f20:	008b      	lsls	r3, r1, #2
    2f22:	18c9      	adds	r1, r1, r3
    2f24:	004b      	lsls	r3, r1, #1
    2f26:	b2dd      	uxtb	r5, r3
    2f28:	7860      	ldrb	r0, [r4, #1]
    2f2a:	2130      	movs	r1, #48	; 0x30
    2f2c:	47b8      	blx	r7
    2f2e:	1869      	adds	r1, r5, r1
    2f30:	4e19      	ldr	r6, [pc, #100]	; (2f98 <setTime+0x240>)
    2f32:	70b1      	strb	r1, [r6, #2]
				time.minute = (timeIn[3]%48)*10+(timeIn[4]%48);
    2f34:	78e0      	ldrb	r0, [r4, #3]
    2f36:	2130      	movs	r1, #48	; 0x30
    2f38:	47b8      	blx	r7
    2f3a:	008b      	lsls	r3, r1, #2
    2f3c:	18c9      	adds	r1, r1, r3
    2f3e:	004b      	lsls	r3, r1, #1
    2f40:	b2dd      	uxtb	r5, r3
    2f42:	7920      	ldrb	r0, [r4, #4]
    2f44:	2130      	movs	r1, #48	; 0x30
    2f46:	47b8      	blx	r7
    2f48:	1869      	adds	r1, r5, r1
    2f4a:	7071      	strb	r1, [r6, #1]
				time.second = (timeIn[06]%48)*10+(timeIn[7]%48);
    2f4c:	79a0      	ldrb	r0, [r4, #6]
    2f4e:	2130      	movs	r1, #48	; 0x30
    2f50:	47b8      	blx	r7
    2f52:	008b      	lsls	r3, r1, #2
    2f54:	18c9      	adds	r1, r1, r3
    2f56:	004b      	lsls	r3, r1, #1
    2f58:	b2dd      	uxtb	r5, r3
    2f5a:	79e0      	ldrb	r0, [r4, #7]
    2f5c:	2130      	movs	r1, #48	; 0x30
    2f5e:	47b8      	blx	r7
    2f60:	1869      	adds	r1, r5, r1
    2f62:	7031      	strb	r1, [r6, #0]
				rtc_calendar_set_time(&rtc_instance, &time);
    2f64:	0031      	movs	r1, r6
    2f66:	480d      	ldr	r0, [pc, #52]	; (2f9c <setTime+0x244>)
    2f68:	4b21      	ldr	r3, [pc, #132]	; (2ff0 <setTime+0x298>)
    2f6a:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    2f6c:	480b      	ldr	r0, [pc, #44]	; (2f9c <setTime+0x244>)
    2f6e:	4b21      	ldr	r3, [pc, #132]	; (2ff4 <setTime+0x29c>)
    2f70:	4798      	blx	r3
	tag = 0;
    2f72:	2200      	movs	r2, #0
    2f74:	4b0b      	ldr	r3, [pc, #44]	; (2fa4 <setTime+0x24c>)
    2f76:	701a      	strb	r2, [r3, #0]
}//end setTime
    2f78:	b009      	add	sp, #36	; 0x24
    2f7a:	bc3c      	pop	{r2, r3, r4, r5}
    2f7c:	4690      	mov	r8, r2
    2f7e:	4699      	mov	r9, r3
    2f80:	46a2      	mov	sl, r4
    2f82:	46ab      	mov	fp, r5
    2f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
			timeIn[i] = ':';
    2f86:	213a      	movs	r1, #58	; 0x3a
    2f88:	aa05      	add	r2, sp, #20
    2f8a:	5591      	strb	r1, [r2, r6]
			i++;
    2f8c:	3601      	adds	r6, #1
    2f8e:	b2f6      	uxtb	r6, r6
    2f90:	e715      	b.n	2dbe <setTime+0x66>
    2f92:	46c0      	nop			; (mov r8, r8)
    2f94:	000054df 	.word	0x000054df
    2f98:	20000774 	.word	0x20000774
    2f9c:	200004ac 	.word	0x200004ac
    2fa0:	00000555 	.word	0x00000555
    2fa4:	20000159 	.word	0x20000159
    2fa8:	0000267d 	.word	0x0000267d
    2fac:	2000077c 	.word	0x2000077c
    2fb0:	1f000009 	.word	0x1f000009
    2fb4:	0000220d 	.word	0x0000220d
    2fb8:	0e00003c 	.word	0x0e00003c
    2fbc:	04ffffff 	.word	0x04ffffff
    2fc0:	478006e0 	.word	0x478006e0
    2fc4:	51800a00 	.word	0x51800a00
    2fc8:	00005efc 	.word	0x00005efc
    2fcc:	00001bc9 	.word	0x00001bc9
    2fd0:	00005f08 	.word	0x00005f08
    2fd4:	0030212c 	.word	0x0030212c
    2fd8:	0000209d 	.word	0x0000209d
    2fdc:	00002451 	.word	0x00002451
    2fe0:	000023f5 	.word	0x000023f5
    2fe4:	000026a9 	.word	0x000026a9
    2fe8:	00000459 	.word	0x00000459
    2fec:	00005425 	.word	0x00005425
    2ff0:	00000531 	.word	0x00000531
    2ff4:	00000439 	.word	0x00000439

00002ff8 <setDate>:
void setDate(){
    2ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ffa:	46de      	mov	lr, fp
    2ffc:	4657      	mov	r7, sl
    2ffe:	464e      	mov	r6, r9
    3000:	4645      	mov	r5, r8
    3002:	b5e0      	push	{r5, r6, r7, lr}
    3004:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, pressed = 0, i = 0, month = 0, dateIn[12] = "0";
    3006:	2330      	movs	r3, #48	; 0x30
    3008:	9305      	str	r3, [sp, #20]
    300a:	2208      	movs	r2, #8
    300c:	2100      	movs	r1, #0
    300e:	a806      	add	r0, sp, #24
    3010:	4bc6      	ldr	r3, [pc, #792]	; (332c <setDate+0x334>)
    3012:	4798      	blx	r3
    3014:	2600      	movs	r6, #0
    3016:	2300      	movs	r3, #0
    3018:	9303      	str	r3, [sp, #12]
    301a:	469b      	mov	fp, r3
    301c:	e028      	b.n	3070 <setDate+0x78>
		else							dateIn[i] = '_';
    301e:	225f      	movs	r2, #95	; 0x5f
    3020:	ab05      	add	r3, sp, #20
    3022:	559a      	strb	r2, [r3, r6]
    3024:	e02f      	b.n	3086 <setDate+0x8e>
		if (tag>47 && tag<58)	pressed = tag - 48;
    3026:	9303      	str	r3, [sp, #12]
    3028:	e087      	b.n	313a <setDate+0x142>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    302a:	2e01      	cmp	r6, #1
    302c:	d100      	bne.n	3030 <setDate+0x38>
    302e:	e096      	b.n	315e <setDate+0x166>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    3030:	2e03      	cmp	r6, #3
    3032:	d100      	bne.n	3036 <setDate+0x3e>
    3034:	e09c      	b.n	3170 <setDate+0x178>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    3036:	2e03      	cmp	r6, #3
    3038:	d100      	bne.n	303c <setDate+0x44>
    303a:	e0af      	b.n	319c <setDate+0x1a4>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    303c:	2e04      	cmp	r6, #4
    303e:	d100      	bne.n	3042 <setDate+0x4a>
    3040:	e0c2      	b.n	31c8 <setDate+0x1d0>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    3042:	2e04      	cmp	r6, #4
    3044:	d100      	bne.n	3048 <setDate+0x50>
    3046:	e0dc      	b.n	3202 <setDate+0x20a>
					dateIn[i] = tag;
    3048:	ab05      	add	r3, sp, #20
    304a:	559c      	strb	r4, [r3, r6]
					i++;
    304c:	3601      	adds	r6, #1
    304e:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==11){			//if ok is pressed
    3050:	2c0b      	cmp	r4, #11
    3052:	d100      	bne.n	3056 <setDate+0x5e>
    3054:	e112      	b.n	327c <setDate+0x284>
    3056:	2e0b      	cmp	r6, #11
    3058:	d100      	bne.n	305c <setDate+0x64>
    305a:	e10f      	b.n	327c <setDate+0x284>
			tempTag = tag;
    305c:	46a3      	mov	fp, r4
		if(i==2 || i==5){
    305e:	2e02      	cmp	r6, #2
    3060:	d100      	bne.n	3064 <setDate+0x6c>
    3062:	e15d      	b.n	3320 <setDate+0x328>
    3064:	2e05      	cmp	r6, #5
    3066:	d100      	bne.n	306a <setDate+0x72>
    3068:	e15a      	b.n	3320 <setDate+0x328>
	}while(tag != back);
    306a:	2c06      	cmp	r4, #6
    306c:	d100      	bne.n	3070 <setDate+0x78>
    306e:	e14d      	b.n	330c <setDate+0x314>
		rtc_calendar_get_time(&rtc_instance, &time);
    3070:	4caf      	ldr	r4, [pc, #700]	; (3330 <setDate+0x338>)
    3072:	0021      	movs	r1, r4
    3074:	48af      	ldr	r0, [pc, #700]	; (3334 <setDate+0x33c>)
    3076:	4bb0      	ldr	r3, [pc, #704]	; (3338 <setDate+0x340>)
    3078:	4798      	blx	r3
		if (time.second%2 == 1)			dateIn[i] = ' ';
    307a:	7823      	ldrb	r3, [r4, #0]
    307c:	07db      	lsls	r3, r3, #31
    307e:	d5ce      	bpl.n	301e <setDate+0x26>
    3080:	2220      	movs	r2, #32
    3082:	ab05      	add	r3, sp, #20
    3084:	559a      	strb	r2, [r3, r6]
		tag = 0;
    3086:	4bad      	ldr	r3, [pc, #692]	; (333c <setDate+0x344>)
    3088:	4699      	mov	r9, r3
    308a:	2300      	movs	r3, #0
    308c:	4698      	mov	r8, r3
    308e:	464a      	mov	r2, r9
    3090:	7013      	strb	r3, [r2, #0]
		disStart();
    3092:	4bab      	ldr	r3, [pc, #684]	; (3340 <setDate+0x348>)
    3094:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    3096:	4cab      	ldr	r4, [pc, #684]	; (3344 <setDate+0x34c>)
    3098:	49ab      	ldr	r1, [pc, #684]	; (3348 <setDate+0x350>)
    309a:	6820      	ldr	r0, [r4, #0]
    309c:	4dab      	ldr	r5, [pc, #684]	; (334c <setDate+0x354>)
    309e:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    30a0:	49ab      	ldr	r1, [pc, #684]	; (3350 <setDate+0x358>)
    30a2:	6820      	ldr	r0, [r4, #0]
    30a4:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    30a6:	49ab      	ldr	r1, [pc, #684]	; (3354 <setDate+0x35c>)
    30a8:	6820      	ldr	r0, [r4, #0]
    30aa:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    30ac:	49aa      	ldr	r1, [pc, #680]	; (3358 <setDate+0x360>)
    30ae:	6820      	ldr	r0, [r4, #0]
    30b0:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    30b2:	49aa      	ldr	r1, [pc, #680]	; (335c <setDate+0x364>)
    30b4:	6820      	ldr	r0, [r4, #0]
    30b6:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    30b8:	2184      	movs	r1, #132	; 0x84
    30ba:	0589      	lsls	r1, r1, #22
    30bc:	6820      	ldr	r0, [r4, #0]
    30be:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    30c0:	49a4      	ldr	r1, [pc, #656]	; (3354 <setDate+0x35c>)
    30c2:	6820      	ldr	r0, [r4, #0]
    30c4:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Date");
    30c6:	6820      	ldr	r0, [r4, #0]
    30c8:	4ba5      	ldr	r3, [pc, #660]	; (3360 <setDate+0x368>)
    30ca:	9301      	str	r3, [sp, #4]
    30cc:	4643      	mov	r3, r8
    30ce:	9300      	str	r3, [sp, #0]
    30d0:	331c      	adds	r3, #28
    30d2:	2230      	movs	r2, #48	; 0x30
    30d4:	21f0      	movs	r1, #240	; 0xf0
    30d6:	4fa3      	ldr	r7, [pc, #652]	; (3364 <setDate+0x36c>)
    30d8:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "mm/dd/yyyy");
    30da:	6820      	ldr	r0, [r4, #0]
    30dc:	4ba2      	ldr	r3, [pc, #648]	; (3368 <setDate+0x370>)
    30de:	9301      	str	r3, [sp, #4]
    30e0:	4643      	mov	r3, r8
    30e2:	9300      	str	r3, [sp, #0]
    30e4:	331c      	adds	r3, #28
    30e6:	2248      	movs	r2, #72	; 0x48
    30e8:	21f0      	movs	r1, #240	; 0xf0
    30ea:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    30ec:	2180      	movs	r1, #128	; 0x80
    30ee:	04c9      	lsls	r1, r1, #19
    30f0:	6820      	ldr	r0, [r4, #0]
    30f2:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, dateIn);
    30f4:	6820      	ldr	r0, [r4, #0]
    30f6:	ab05      	add	r3, sp, #20
    30f8:	9301      	str	r3, [sp, #4]
    30fa:	4643      	mov	r3, r8
    30fc:	9300      	str	r3, [sp, #0]
    30fe:	331e      	adds	r3, #30
    3100:	2278      	movs	r2, #120	; 0x78
    3102:	21f5      	movs	r1, #245	; 0xf5
    3104:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    3106:	4993      	ldr	r1, [pc, #588]	; (3354 <setDate+0x35c>)
    3108:	6820      	ldr	r0, [r4, #0]
    310a:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    310c:	6820      	ldr	r0, [r4, #0]
    310e:	4997      	ldr	r1, [pc, #604]	; (336c <setDate+0x374>)
    3110:	4b97      	ldr	r3, [pc, #604]	; (3370 <setDate+0x378>)
    3112:	4798      	blx	r3
    3114:	464b      	mov	r3, r9
    3116:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    3118:	9803      	ldr	r0, [sp, #12]
    311a:	4b96      	ldr	r3, [pc, #600]	; (3374 <setDate+0x37c>)
    311c:	4798      	blx	r3
		drawBack();
    311e:	4b96      	ldr	r3, [pc, #600]	; (3378 <setDate+0x380>)
    3120:	4798      	blx	r3
		disEnd();
    3122:	4b96      	ldr	r3, [pc, #600]	; (337c <setDate+0x384>)
    3124:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    3126:	464b      	mov	r3, r9
    3128:	781c      	ldrb	r4, [r3, #0]
    312a:	0023      	movs	r3, r4
    312c:	3b30      	subs	r3, #48	; 0x30
    312e:	b2db      	uxtb	r3, r3
    3130:	2b09      	cmp	r3, #9
    3132:	d800      	bhi.n	3136 <setDate+0x13e>
    3134:	e777      	b.n	3026 <setDate+0x2e>
		else					pressed = 0;
    3136:	2200      	movs	r2, #0
    3138:	9203      	str	r2, [sp, #12]
		if(tag==0)		tempTag = tag;
    313a:	2c00      	cmp	r4, #0
    313c:	d100      	bne.n	3140 <setDate+0x148>
    313e:	46a3      	mov	fp, r4
		if (tempTag != tag && tag != 0 && tag!=back){
    3140:	45a3      	cmp	fp, r4
    3142:	d08c      	beq.n	305e <setDate+0x66>
    3144:	2c00      	cmp	r4, #0
    3146:	d08a      	beq.n	305e <setDate+0x66>
    3148:	2c06      	cmp	r4, #6
    314a:	d088      	beq.n	305e <setDate+0x66>
			if(tag> 47 && tag<58){
    314c:	2b09      	cmp	r3, #9
    314e:	d875      	bhi.n	323c <setDate+0x244>
				if(i==0 && tag>49);					//1st in month
    3150:	2e00      	cmp	r6, #0
    3152:	d000      	beq.n	3156 <setDate+0x15e>
    3154:	e769      	b.n	302a <setDate+0x32>
    3156:	2c31      	cmp	r4, #49	; 0x31
    3158:	d900      	bls.n	315c <setDate+0x164>
    315a:	e779      	b.n	3050 <setDate+0x58>
    315c:	e765      	b.n	302a <setDate+0x32>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    315e:	ab05      	add	r3, sp, #20
    3160:	781b      	ldrb	r3, [r3, #0]
    3162:	2b31      	cmp	r3, #49	; 0x31
    3164:	d000      	beq.n	3168 <setDate+0x170>
    3166:	e763      	b.n	3030 <setDate+0x38>
    3168:	2c32      	cmp	r4, #50	; 0x32
    316a:	d900      	bls.n	316e <setDate+0x176>
    316c:	e770      	b.n	3050 <setDate+0x58>
    316e:	e75f      	b.n	3030 <setDate+0x38>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    3170:	ad05      	add	r5, sp, #20
    3172:	7828      	ldrb	r0, [r5, #0]
    3174:	4b82      	ldr	r3, [pc, #520]	; (3380 <setDate+0x388>)
    3176:	4698      	mov	r8, r3
    3178:	2130      	movs	r1, #48	; 0x30
    317a:	4798      	blx	r3
    317c:	b2cb      	uxtb	r3, r1
    317e:	0099      	lsls	r1, r3, #2
    3180:	18c9      	adds	r1, r1, r3
    3182:	004f      	lsls	r7, r1, #1
    3184:	7868      	ldrb	r0, [r5, #1]
    3186:	2130      	movs	r1, #48	; 0x30
    3188:	47c0      	blx	r8
    318a:	b2c9      	uxtb	r1, r1
    318c:	187f      	adds	r7, r7, r1
    318e:	2f02      	cmp	r7, #2
    3190:	d000      	beq.n	3194 <setDate+0x19c>
    3192:	e750      	b.n	3036 <setDate+0x3e>
    3194:	2c32      	cmp	r4, #50	; 0x32
    3196:	d900      	bls.n	319a <setDate+0x1a2>
    3198:	e75a      	b.n	3050 <setDate+0x58>
    319a:	e74c      	b.n	3036 <setDate+0x3e>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    319c:	ad05      	add	r5, sp, #20
    319e:	7828      	ldrb	r0, [r5, #0]
    31a0:	4b77      	ldr	r3, [pc, #476]	; (3380 <setDate+0x388>)
    31a2:	4698      	mov	r8, r3
    31a4:	2130      	movs	r1, #48	; 0x30
    31a6:	4798      	blx	r3
    31a8:	b2cb      	uxtb	r3, r1
    31aa:	0099      	lsls	r1, r3, #2
    31ac:	18c9      	adds	r1, r1, r3
    31ae:	004f      	lsls	r7, r1, #1
    31b0:	7868      	ldrb	r0, [r5, #1]
    31b2:	2130      	movs	r1, #48	; 0x30
    31b4:	47c0      	blx	r8
    31b6:	b2c9      	uxtb	r1, r1
    31b8:	187f      	adds	r7, r7, r1
    31ba:	2f02      	cmp	r7, #2
    31bc:	d100      	bne.n	31c0 <setDate+0x1c8>
    31be:	e73d      	b.n	303c <setDate+0x44>
    31c0:	2c33      	cmp	r4, #51	; 0x33
    31c2:	d900      	bls.n	31c6 <setDate+0x1ce>
    31c4:	e744      	b.n	3050 <setDate+0x58>
    31c6:	e739      	b.n	303c <setDate+0x44>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    31c8:	ad05      	add	r5, sp, #20
    31ca:	7828      	ldrb	r0, [r5, #0]
    31cc:	4b6c      	ldr	r3, [pc, #432]	; (3380 <setDate+0x388>)
    31ce:	4698      	mov	r8, r3
    31d0:	2130      	movs	r1, #48	; 0x30
    31d2:	4798      	blx	r3
    31d4:	008b      	lsls	r3, r1, #2
    31d6:	18c9      	adds	r1, r1, r3
    31d8:	004b      	lsls	r3, r1, #1
    31da:	b2df      	uxtb	r7, r3
    31dc:	7868      	ldrb	r0, [r5, #1]
    31de:	2130      	movs	r1, #48	; 0x30
    31e0:	47c0      	blx	r8
    31e2:	1879      	adds	r1, r7, r1
    31e4:	b2c8      	uxtb	r0, r1
    31e6:	4b67      	ldr	r3, [pc, #412]	; (3384 <setDate+0x38c>)
    31e8:	4798      	blx	r3
    31ea:	2800      	cmp	r0, #0
    31ec:	d000      	beq.n	31f0 <setDate+0x1f8>
    31ee:	e728      	b.n	3042 <setDate+0x4a>
    31f0:	ab05      	add	r3, sp, #20
    31f2:	78db      	ldrb	r3, [r3, #3]
    31f4:	2b33      	cmp	r3, #51	; 0x33
    31f6:	d000      	beq.n	31fa <setDate+0x202>
    31f8:	e723      	b.n	3042 <setDate+0x4a>
    31fa:	2c30      	cmp	r4, #48	; 0x30
    31fc:	d900      	bls.n	3200 <setDate+0x208>
    31fe:	e727      	b.n	3050 <setDate+0x58>
    3200:	e71f      	b.n	3042 <setDate+0x4a>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    3202:	ad05      	add	r5, sp, #20
    3204:	7828      	ldrb	r0, [r5, #0]
    3206:	4b5e      	ldr	r3, [pc, #376]	; (3380 <setDate+0x388>)
    3208:	4698      	mov	r8, r3
    320a:	2130      	movs	r1, #48	; 0x30
    320c:	4798      	blx	r3
    320e:	008b      	lsls	r3, r1, #2
    3210:	18c9      	adds	r1, r1, r3
    3212:	004b      	lsls	r3, r1, #1
    3214:	b2df      	uxtb	r7, r3
    3216:	7868      	ldrb	r0, [r5, #1]
    3218:	2130      	movs	r1, #48	; 0x30
    321a:	47c0      	blx	r8
    321c:	1879      	adds	r1, r7, r1
    321e:	b2c8      	uxtb	r0, r1
    3220:	4b58      	ldr	r3, [pc, #352]	; (3384 <setDate+0x38c>)
    3222:	4798      	blx	r3
    3224:	2800      	cmp	r0, #0
    3226:	d100      	bne.n	322a <setDate+0x232>
    3228:	e70e      	b.n	3048 <setDate+0x50>
    322a:	ab05      	add	r3, sp, #20
    322c:	78db      	ldrb	r3, [r3, #3]
    322e:	2b33      	cmp	r3, #51	; 0x33
    3230:	d000      	beq.n	3234 <setDate+0x23c>
    3232:	e709      	b.n	3048 <setDate+0x50>
    3234:	2c31      	cmp	r4, #49	; 0x31
    3236:	d900      	bls.n	323a <setDate+0x242>
    3238:	e70a      	b.n	3050 <setDate+0x58>
    323a:	e705      	b.n	3048 <setDate+0x50>
			}else if(tag == clr){			//if clr is pressed
    323c:	2c0a      	cmp	r4, #10
    323e:	d00f      	beq.n	3260 <setDate+0x268>
			}else if(tag==del && i>0){		//if del is pressed
    3240:	2c09      	cmp	r4, #9
    3242:	d000      	beq.n	3246 <setDate+0x24e>
    3244:	e704      	b.n	3050 <setDate+0x58>
    3246:	2e00      	cmp	r6, #0
    3248:	d100      	bne.n	324c <setDate+0x254>
    324a:	e701      	b.n	3050 <setDate+0x58>
				if(i==3 || i==6){			//clear last user input
    324c:	2e03      	cmp	r6, #3
    324e:	d00f      	beq.n	3270 <setDate+0x278>
    3250:	2e06      	cmp	r6, #6
    3252:	d00d      	beq.n	3270 <setDate+0x278>
				dateIn[i] = 0;
    3254:	2200      	movs	r2, #0
    3256:	ab05      	add	r3, sp, #20
    3258:	559a      	strb	r2, [r3, r6]
				i--;
    325a:	3e01      	subs	r6, #1
    325c:	b2f6      	uxtb	r6, r6
    325e:	e6f7      	b.n	3050 <setDate+0x58>
					dateIn[i] = 0;
    3260:	2200      	movs	r2, #0
    3262:	ab05      	add	r3, sp, #20
    3264:	559a      	strb	r2, [r3, r6]
					i--;
    3266:	3e01      	subs	r6, #1
    3268:	b2f6      	uxtb	r6, r6
				}while(i>0);
    326a:	2e00      	cmp	r6, #0
    326c:	d1f8      	bne.n	3260 <setDate+0x268>
    326e:	e6ef      	b.n	3050 <setDate+0x58>
					dateIn[i] = 0;
    3270:	2200      	movs	r2, #0
    3272:	ab05      	add	r3, sp, #20
    3274:	559a      	strb	r2, [r3, r6]
					i--;
    3276:	3e01      	subs	r6, #1
    3278:	b2f6      	uxtb	r6, r6
    327a:	e7eb      	b.n	3254 <setDate+0x25c>
				dateIn[i] = 0;				//compute date and update to system
    327c:	ad05      	add	r5, sp, #20
    327e:	2300      	movs	r3, #0
    3280:	55ab      	strb	r3, [r5, r6]
				rtc_calendar_disable(&rtc_instance);
    3282:	482c      	ldr	r0, [pc, #176]	; (3334 <setDate+0x33c>)
    3284:	4b40      	ldr	r3, [pc, #256]	; (3388 <setDate+0x390>)
    3286:	4798      	blx	r3
				time.month = (dateIn[0]%48)*10+(dateIn[1]%48);
    3288:	7828      	ldrb	r0, [r5, #0]
    328a:	4e3d      	ldr	r6, [pc, #244]	; (3380 <setDate+0x388>)
    328c:	2130      	movs	r1, #48	; 0x30
    328e:	47b0      	blx	r6
    3290:	008b      	lsls	r3, r1, #2
    3292:	18c9      	adds	r1, r1, r3
    3294:	004b      	lsls	r3, r1, #1
    3296:	b2dc      	uxtb	r4, r3
    3298:	7868      	ldrb	r0, [r5, #1]
    329a:	2130      	movs	r1, #48	; 0x30
    329c:	47b0      	blx	r6
    329e:	1861      	adds	r1, r4, r1
    32a0:	4f23      	ldr	r7, [pc, #140]	; (3330 <setDate+0x338>)
    32a2:	7179      	strb	r1, [r7, #5]
				time.day = (dateIn[3]%48)*10+(dateIn[4]%48);
    32a4:	78e8      	ldrb	r0, [r5, #3]
    32a6:	2130      	movs	r1, #48	; 0x30
    32a8:	47b0      	blx	r6
    32aa:	008b      	lsls	r3, r1, #2
    32ac:	18c9      	adds	r1, r1, r3
    32ae:	004b      	lsls	r3, r1, #1
    32b0:	b2dc      	uxtb	r4, r3
    32b2:	7928      	ldrb	r0, [r5, #4]
    32b4:	2130      	movs	r1, #48	; 0x30
    32b6:	47b0      	blx	r6
    32b8:	1861      	adds	r1, r4, r1
    32ba:	7139      	strb	r1, [r7, #4]
				time.year = (dateIn[6]%48)*1000+(dateIn[7]%48)*100+dateIn[8]%48*10+dateIn[9]%48;
    32bc:	79a8      	ldrb	r0, [r5, #6]
    32be:	2130      	movs	r1, #48	; 0x30
    32c0:	47b0      	blx	r6
    32c2:	b2c9      	uxtb	r1, r1
    32c4:	24fa      	movs	r4, #250	; 0xfa
    32c6:	00a4      	lsls	r4, r4, #2
    32c8:	434c      	muls	r4, r1
    32ca:	b2a4      	uxth	r4, r4
    32cc:	79e8      	ldrb	r0, [r5, #7]
    32ce:	2130      	movs	r1, #48	; 0x30
    32d0:	47b0      	blx	r6
    32d2:	b2c9      	uxtb	r1, r1
    32d4:	2364      	movs	r3, #100	; 0x64
    32d6:	4359      	muls	r1, r3
    32d8:	b289      	uxth	r1, r1
    32da:	1864      	adds	r4, r4, r1
    32dc:	b2a4      	uxth	r4, r4
    32de:	7a28      	ldrb	r0, [r5, #8]
    32e0:	2130      	movs	r1, #48	; 0x30
    32e2:	47b0      	blx	r6
    32e4:	b2c9      	uxtb	r1, r1
    32e6:	008b      	lsls	r3, r1, #2
    32e8:	18c9      	adds	r1, r1, r3
    32ea:	004b      	lsls	r3, r1, #1
    32ec:	b29b      	uxth	r3, r3
    32ee:	18e4      	adds	r4, r4, r3
    32f0:	b2a4      	uxth	r4, r4
    32f2:	7a68      	ldrb	r0, [r5, #9]
    32f4:	2130      	movs	r1, #48	; 0x30
    32f6:	47b0      	blx	r6
    32f8:	b2c9      	uxtb	r1, r1
    32fa:	1864      	adds	r4, r4, r1
    32fc:	80fc      	strh	r4, [r7, #6]
				rtc_calendar_set_time(&rtc_instance, &time);
    32fe:	0039      	movs	r1, r7
    3300:	480c      	ldr	r0, [pc, #48]	; (3334 <setDate+0x33c>)
    3302:	4b22      	ldr	r3, [pc, #136]	; (338c <setDate+0x394>)
    3304:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    3306:	480b      	ldr	r0, [pc, #44]	; (3334 <setDate+0x33c>)
    3308:	4b21      	ldr	r3, [pc, #132]	; (3390 <setDate+0x398>)
    330a:	4798      	blx	r3
	tag = 0;
    330c:	2200      	movs	r2, #0
    330e:	4b0b      	ldr	r3, [pc, #44]	; (333c <setDate+0x344>)
    3310:	701a      	strb	r2, [r3, #0]
}//end setDate
    3312:	b009      	add	sp, #36	; 0x24
    3314:	bc3c      	pop	{r2, r3, r4, r5}
    3316:	4690      	mov	r8, r2
    3318:	4699      	mov	r9, r3
    331a:	46a2      	mov	sl, r4
    331c:	46ab      	mov	fp, r5
    331e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dateIn[i] = '/';
    3320:	222f      	movs	r2, #47	; 0x2f
    3322:	ab05      	add	r3, sp, #20
    3324:	559a      	strb	r2, [r3, r6]
			i++;
    3326:	3601      	adds	r6, #1
    3328:	b2f6      	uxtb	r6, r6
    332a:	e69e      	b.n	306a <setDate+0x72>
    332c:	000054df 	.word	0x000054df
    3330:	20000774 	.word	0x20000774
    3334:	200004ac 	.word	0x200004ac
    3338:	00000555 	.word	0x00000555
    333c:	20000159 	.word	0x20000159
    3340:	0000267d 	.word	0x0000267d
    3344:	2000077c 	.word	0x2000077c
    3348:	1f000009 	.word	0x1f000009
    334c:	0000220d 	.word	0x0000220d
    3350:	0e00003c 	.word	0x0e00003c
    3354:	04ffffff 	.word	0x04ffffff
    3358:	478006e0 	.word	0x478006e0
    335c:	51800a00 	.word	0x51800a00
    3360:	00005ee4 	.word	0x00005ee4
    3364:	00001bc9 	.word	0x00001bc9
    3368:	00005ef0 	.word	0x00005ef0
    336c:	0030212c 	.word	0x0030212c
    3370:	0000209d 	.word	0x0000209d
    3374:	00002451 	.word	0x00002451
    3378:	000023f5 	.word	0x000023f5
    337c:	000026a9 	.word	0x000026a9
    3380:	00005425 	.word	0x00005425
    3384:	00002241 	.word	0x00002241
    3388:	00000459 	.word	0x00000459
    338c:	00000531 	.word	0x00000531
    3390:	00000439 	.word	0x00000439

00003394 <settingOp>:
void settingOp(){
    3394:	b530      	push	{r4, r5, lr}
    3396:	b085      	sub	sp, #20
    3398:	e08a      	b.n	34b0 <settingOp+0x11c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    339a:	32ff      	adds	r2, #255	; 0xff
    339c:	e0ab      	b.n	34f6 <settingOp+0x162>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    339e:	2200      	movs	r2, #0
    33a0:	e0c4      	b.n	352c <settingOp+0x198>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    33a2:	32ff      	adds	r2, #255	; 0xff
    33a4:	e0e7      	b.n	3576 <settingOp+0x1e2>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    33a6:	2200      	movs	r2, #0
    33a8:	4991      	ldr	r1, [pc, #580]	; (35f0 <settingOp+0x25c>)
    33aa:	9103      	str	r1, [sp, #12]
    33ac:	9202      	str	r2, [sp, #8]
    33ae:	9301      	str	r3, [sp, #4]
    33b0:	2335      	movs	r3, #53	; 0x35
    33b2:	9300      	str	r3, [sp, #0]
    33b4:	332b      	adds	r3, #43	; 0x2b
    33b6:	22b1      	movs	r2, #177	; 0xb1
    33b8:	21c8      	movs	r1, #200	; 0xc8
    33ba:	0049      	lsls	r1, r1, #1
    33bc:	4c8d      	ldr	r4, [pc, #564]	; (35f4 <settingOp+0x260>)
    33be:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(cal));
    33c0:	4c8d      	ldr	r4, [pc, #564]	; (35f8 <settingOp+0x264>)
    33c2:	498e      	ldr	r1, [pc, #568]	; (35fc <settingOp+0x268>)
    33c4:	6820      	ldr	r0, [r4, #0]
    33c6:	4b8e      	ldr	r3, [pc, #568]	; (3600 <settingOp+0x26c>)
    33c8:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    33ca:	6820      	ldr	r0, [r4, #0]
    33cc:	4b8d      	ldr	r3, [pc, #564]	; (3604 <settingOp+0x270>)
    33ce:	781b      	ldrb	r3, [r3, #0]
    33d0:	4a8d      	ldr	r2, [pc, #564]	; (3608 <settingOp+0x274>)
    33d2:	7812      	ldrb	r2, [r2, #0]
    33d4:	2a07      	cmp	r2, #7
    33d6:	d100      	bne.n	33da <settingOp+0x46>
    33d8:	e0e9      	b.n	35ae <settingOp+0x21a>
    33da:	2200      	movs	r2, #0
    33dc:	498b      	ldr	r1, [pc, #556]	; (360c <settingOp+0x278>)
    33de:	9103      	str	r1, [sp, #12]
    33e0:	9202      	str	r2, [sp, #8]
    33e2:	9301      	str	r3, [sp, #4]
    33e4:	2335      	movs	r3, #53	; 0x35
    33e6:	9300      	str	r3, [sp, #0]
    33e8:	3393      	adds	r3, #147	; 0x93
    33ea:	22f0      	movs	r2, #240	; 0xf0
    33ec:	2196      	movs	r1, #150	; 0x96
    33ee:	0049      	lsls	r1, r1, #1
    33f0:	4c80      	ldr	r4, [pc, #512]	; (35f4 <settingOp+0x260>)
    33f2:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sDate));
    33f4:	4c80      	ldr	r4, [pc, #512]	; (35f8 <settingOp+0x264>)
    33f6:	4986      	ldr	r1, [pc, #536]	; (3610 <settingOp+0x27c>)
    33f8:	6820      	ldr	r0, [r4, #0]
    33fa:	4b81      	ldr	r3, [pc, #516]	; (3600 <settingOp+0x26c>)
    33fc:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    33fe:	6820      	ldr	r0, [r4, #0]
    3400:	4b80      	ldr	r3, [pc, #512]	; (3604 <settingOp+0x270>)
    3402:	781b      	ldrb	r3, [r3, #0]
    3404:	4a80      	ldr	r2, [pc, #512]	; (3608 <settingOp+0x274>)
    3406:	7812      	ldrb	r2, [r2, #0]
    3408:	2a08      	cmp	r2, #8
    340a:	d100      	bne.n	340e <settingOp+0x7a>
    340c:	e0d1      	b.n	35b2 <settingOp+0x21e>
    340e:	2200      	movs	r2, #0
    3410:	4980      	ldr	r1, [pc, #512]	; (3614 <settingOp+0x280>)
    3412:	9103      	str	r1, [sp, #12]
    3414:	9202      	str	r2, [sp, #8]
    3416:	9301      	str	r3, [sp, #4]
    3418:	2335      	movs	r3, #53	; 0x35
    341a:	9300      	str	r3, [sp, #0]
    341c:	3393      	adds	r3, #147	; 0x93
    341e:	2297      	movs	r2, #151	; 0x97
    3420:	0052      	lsls	r2, r2, #1
    3422:	2196      	movs	r1, #150	; 0x96
    3424:	0049      	lsls	r1, r1, #1
    3426:	4c73      	ldr	r4, [pc, #460]	; (35f4 <settingOp+0x260>)
    3428:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sTime));
    342a:	4c73      	ldr	r4, [pc, #460]	; (35f8 <settingOp+0x264>)
    342c:	497a      	ldr	r1, [pc, #488]	; (3618 <settingOp+0x284>)
    342e:	6820      	ldr	r0, [r4, #0]
    3430:	4b73      	ldr	r3, [pc, #460]	; (3600 <settingOp+0x26c>)
    3432:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    3434:	6820      	ldr	r0, [r4, #0]
    3436:	4b73      	ldr	r3, [pc, #460]	; (3604 <settingOp+0x270>)
    3438:	781b      	ldrb	r3, [r3, #0]
    343a:	4a73      	ldr	r2, [pc, #460]	; (3608 <settingOp+0x274>)
    343c:	7812      	ldrb	r2, [r2, #0]
    343e:	2a05      	cmp	r2, #5
    3440:	d100      	bne.n	3444 <settingOp+0xb0>
    3442:	e0b8      	b.n	35b6 <settingOp+0x222>
    3444:	2200      	movs	r2, #0
    3446:	4975      	ldr	r1, [pc, #468]	; (361c <settingOp+0x288>)
    3448:	9103      	str	r1, [sp, #12]
    344a:	9202      	str	r2, [sp, #8]
    344c:	9301      	str	r3, [sp, #4]
    344e:	2335      	movs	r3, #53	; 0x35
    3450:	9300      	str	r3, [sp, #0]
    3452:	3393      	adds	r3, #147	; 0x93
    3454:	22b6      	movs	r2, #182	; 0xb6
    3456:	0052      	lsls	r2, r2, #1
    3458:	2196      	movs	r1, #150	; 0x96
    345a:	0049      	lsls	r1, r1, #1
    345c:	4c65      	ldr	r4, [pc, #404]	; (35f4 <settingOp+0x260>)
    345e:	47a0      	blx	r4
		drawBack();
    3460:	4b6f      	ldr	r3, [pc, #444]	; (3620 <settingOp+0x28c>)
    3462:	4798      	blx	r3
		drawTitle("Settings");
    3464:	486f      	ldr	r0, [pc, #444]	; (3624 <settingOp+0x290>)
    3466:	4b70      	ldr	r3, [pc, #448]	; (3628 <settingOp+0x294>)
    3468:	4798      	blx	r3
		disEnd();
    346a:	4b70      	ldr	r3, [pc, #448]	; (362c <settingOp+0x298>)
    346c:	4798      	blx	r3
		if (tag == cal)			calScreen();	//go to calibrate the screen
    346e:	4b66      	ldr	r3, [pc, #408]	; (3608 <settingOp+0x274>)
    3470:	781b      	ldrb	r3, [r3, #0]
    3472:	2b07      	cmp	r3, #7
    3474:	d100      	bne.n	3478 <settingOp+0xe4>
    3476:	e0a0      	b.n	35ba <settingOp+0x226>
		else if (tag == sTime)	setTime();		//set time screen
    3478:	2b05      	cmp	r3, #5
    347a:	d100      	bne.n	347e <settingOp+0xea>
    347c:	e0a0      	b.n	35c0 <settingOp+0x22c>
		else if (tag == sDate)	setDate();		//set date screen
    347e:	2b08      	cmp	r3, #8
    3480:	d100      	bne.n	3484 <settingOp+0xf0>
    3482:	e0a0      	b.n	35c6 <settingOp+0x232>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    3484:	4b60      	ldr	r3, [pc, #384]	; (3608 <settingOp+0x274>)
    3486:	781b      	ldrb	r3, [r3, #0]
    3488:	2b0c      	cmp	r3, #12
    348a:	d100      	bne.n	348e <settingOp+0xfa>
    348c:	e09e      	b.n	35cc <settingOp+0x238>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    348e:	2b0d      	cmp	r3, #13
    3490:	d100      	bne.n	3494 <settingOp+0x100>
    3492:	e09f      	b.n	35d4 <settingOp+0x240>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    3494:	2b0f      	cmp	r3, #15
    3496:	d100      	bne.n	349a <settingOp+0x106>
    3498:	e0a0      	b.n	35dc <settingOp+0x248>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    349a:	2b0e      	cmp	r3, #14
    349c:	d100      	bne.n	34a0 <settingOp+0x10c>
    349e:	e0a1      	b.n	35e4 <settingOp+0x250>
		delay_ms(50);
    34a0:	2032      	movs	r0, #50	; 0x32
    34a2:	4b63      	ldr	r3, [pc, #396]	; (3630 <settingOp+0x29c>)
    34a4:	4798      	blx	r3
	} while (tag != back);
    34a6:	4b58      	ldr	r3, [pc, #352]	; (3608 <settingOp+0x274>)
    34a8:	781b      	ldrb	r3, [r3, #0]
    34aa:	2b06      	cmp	r3, #6
    34ac:	d100      	bne.n	34b0 <settingOp+0x11c>
    34ae:	e09d      	b.n	35ec <settingOp+0x258>
		tag = 0;
    34b0:	4d55      	ldr	r5, [pc, #340]	; (3608 <settingOp+0x274>)
    34b2:	2300      	movs	r3, #0
    34b4:	702b      	strb	r3, [r5, #0]
		disStart();
    34b6:	4b5f      	ldr	r3, [pc, #380]	; (3634 <settingOp+0x2a0>)
    34b8:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    34ba:	4c4f      	ldr	r4, [pc, #316]	; (35f8 <settingOp+0x264>)
    34bc:	495e      	ldr	r1, [pc, #376]	; (3638 <settingOp+0x2a4>)
    34be:	6820      	ldr	r0, [r4, #0]
    34c0:	4b5e      	ldr	r3, [pc, #376]	; (363c <settingOp+0x2a8>)
    34c2:	4798      	blx	r3
    34c4:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3-20, 30, OPT_CENTER, "Visual:");
    34c6:	6820      	ldr	r0, [r4, #0]
    34c8:	4b5d      	ldr	r3, [pc, #372]	; (3640 <settingOp+0x2ac>)
    34ca:	9301      	str	r3, [sp, #4]
    34cc:	23c0      	movs	r3, #192	; 0xc0
    34ce:	00db      	lsls	r3, r3, #3
    34d0:	9300      	str	r3, [sp, #0]
    34d2:	231e      	movs	r3, #30
    34d4:	228c      	movs	r2, #140	; 0x8c
    34d6:	21c8      	movs	r1, #200	; 0xc8
    34d8:	4d5a      	ldr	r5, [pc, #360]	; (3644 <settingOp+0x2b0>)
    34da:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOn));
    34dc:	495a      	ldr	r1, [pc, #360]	; (3648 <settingOp+0x2b4>)
    34de:	6820      	ldr	r0, [r4, #0]
    34e0:	4b47      	ldr	r3, [pc, #284]	; (3600 <settingOp+0x26c>)
    34e2:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    34e4:	6820      	ldr	r0, [r4, #0]
    34e6:	4b47      	ldr	r3, [pc, #284]	; (3604 <settingOp+0x270>)
    34e8:	781b      	ldrb	r3, [r3, #0]
    34ea:	4a58      	ldr	r2, [pc, #352]	; (364c <settingOp+0x2b8>)
    34ec:	7812      	ldrb	r2, [r2, #0]
    34ee:	2a01      	cmp	r2, #1
    34f0:	d100      	bne.n	34f4 <settingOp+0x160>
    34f2:	e752      	b.n	339a <settingOp+0x6>
    34f4:	2200      	movs	r2, #0
    34f6:	4956      	ldr	r1, [pc, #344]	; (3650 <settingOp+0x2bc>)
    34f8:	9103      	str	r1, [sp, #12]
    34fa:	9202      	str	r2, [sp, #8]
    34fc:	9301      	str	r3, [sp, #4]
    34fe:	2335      	movs	r3, #53	; 0x35
    3500:	9300      	str	r3, [sp, #0]
    3502:	332b      	adds	r3, #43	; 0x2b
    3504:	2273      	movs	r2, #115	; 0x73
    3506:	2196      	movs	r1, #150	; 0x96
    3508:	0049      	lsls	r1, r1, #1
    350a:	4c3a      	ldr	r4, [pc, #232]	; (35f4 <settingOp+0x260>)
    350c:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOff));
    350e:	4c3a      	ldr	r4, [pc, #232]	; (35f8 <settingOp+0x264>)
    3510:	4950      	ldr	r1, [pc, #320]	; (3654 <settingOp+0x2c0>)
    3512:	6820      	ldr	r0, [r4, #0]
    3514:	4b3a      	ldr	r3, [pc, #232]	; (3600 <settingOp+0x26c>)
    3516:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    3518:	6820      	ldr	r0, [r4, #0]
    351a:	4b3a      	ldr	r3, [pc, #232]	; (3604 <settingOp+0x270>)
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	4a4b      	ldr	r2, [pc, #300]	; (364c <settingOp+0x2b8>)
    3520:	7812      	ldrb	r2, [r2, #0]
    3522:	2a00      	cmp	r2, #0
    3524:	d000      	beq.n	3528 <settingOp+0x194>
    3526:	e73a      	b.n	339e <settingOp+0xa>
    3528:	3201      	adds	r2, #1
    352a:	32ff      	adds	r2, #255	; 0xff
    352c:	4930      	ldr	r1, [pc, #192]	; (35f0 <settingOp+0x25c>)
    352e:	9103      	str	r1, [sp, #12]
    3530:	9202      	str	r2, [sp, #8]
    3532:	9301      	str	r3, [sp, #4]
    3534:	2335      	movs	r3, #53	; 0x35
    3536:	9300      	str	r3, [sp, #0]
    3538:	332b      	adds	r3, #43	; 0x2b
    353a:	2273      	movs	r2, #115	; 0x73
    353c:	21c8      	movs	r1, #200	; 0xc8
    353e:	0049      	lsls	r1, r1, #1
    3540:	4c2c      	ldr	r4, [pc, #176]	; (35f4 <settingOp+0x260>)
    3542:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3+30, 30, OPT_CENTER, "Sound: ");
    3544:	4c2c      	ldr	r4, [pc, #176]	; (35f8 <settingOp+0x264>)
    3546:	6820      	ldr	r0, [r4, #0]
    3548:	4b43      	ldr	r3, [pc, #268]	; (3658 <settingOp+0x2c4>)
    354a:	9301      	str	r3, [sp, #4]
    354c:	23c0      	movs	r3, #192	; 0xc0
    354e:	00db      	lsls	r3, r3, #3
    3550:	9300      	str	r3, [sp, #0]
    3552:	231e      	movs	r3, #30
    3554:	22be      	movs	r2, #190	; 0xbe
    3556:	21c8      	movs	r1, #200	; 0xc8
    3558:	4d3a      	ldr	r5, [pc, #232]	; (3644 <settingOp+0x2b0>)
    355a:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOn));
    355c:	493f      	ldr	r1, [pc, #252]	; (365c <settingOp+0x2c8>)
    355e:	6820      	ldr	r0, [r4, #0]
    3560:	4b27      	ldr	r3, [pc, #156]	; (3600 <settingOp+0x26c>)
    3562:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    3564:	6820      	ldr	r0, [r4, #0]
    3566:	4b27      	ldr	r3, [pc, #156]	; (3604 <settingOp+0x270>)
    3568:	781b      	ldrb	r3, [r3, #0]
    356a:	4a3d      	ldr	r2, [pc, #244]	; (3660 <settingOp+0x2cc>)
    356c:	7812      	ldrb	r2, [r2, #0]
    356e:	2a01      	cmp	r2, #1
    3570:	d100      	bne.n	3574 <settingOp+0x1e0>
    3572:	e716      	b.n	33a2 <settingOp+0xe>
    3574:	2200      	movs	r2, #0
    3576:	4936      	ldr	r1, [pc, #216]	; (3650 <settingOp+0x2bc>)
    3578:	9103      	str	r1, [sp, #12]
    357a:	9202      	str	r2, [sp, #8]
    357c:	9301      	str	r3, [sp, #4]
    357e:	2335      	movs	r3, #53	; 0x35
    3580:	9300      	str	r3, [sp, #0]
    3582:	332b      	adds	r3, #43	; 0x2b
    3584:	22b1      	movs	r2, #177	; 0xb1
    3586:	2196      	movs	r1, #150	; 0x96
    3588:	0049      	lsls	r1, r1, #1
    358a:	4c1a      	ldr	r4, [pc, #104]	; (35f4 <settingOp+0x260>)
    358c:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOff));
    358e:	4c1a      	ldr	r4, [pc, #104]	; (35f8 <settingOp+0x264>)
    3590:	4934      	ldr	r1, [pc, #208]	; (3664 <settingOp+0x2d0>)
    3592:	6820      	ldr	r0, [r4, #0]
    3594:	4b1a      	ldr	r3, [pc, #104]	; (3600 <settingOp+0x26c>)
    3596:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    3598:	6820      	ldr	r0, [r4, #0]
    359a:	4b1a      	ldr	r3, [pc, #104]	; (3604 <settingOp+0x270>)
    359c:	781b      	ldrb	r3, [r3, #0]
    359e:	4a30      	ldr	r2, [pc, #192]	; (3660 <settingOp+0x2cc>)
    35a0:	7812      	ldrb	r2, [r2, #0]
    35a2:	2a00      	cmp	r2, #0
    35a4:	d000      	beq.n	35a8 <settingOp+0x214>
    35a6:	e6fe      	b.n	33a6 <settingOp+0x12>
    35a8:	3201      	adds	r2, #1
    35aa:	32ff      	adds	r2, #255	; 0xff
    35ac:	e6fc      	b.n	33a8 <settingOp+0x14>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    35ae:	32f9      	adds	r2, #249	; 0xf9
    35b0:	e714      	b.n	33dc <settingOp+0x48>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    35b2:	32f8      	adds	r2, #248	; 0xf8
    35b4:	e72c      	b.n	3410 <settingOp+0x7c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    35b6:	32fb      	adds	r2, #251	; 0xfb
    35b8:	e745      	b.n	3446 <settingOp+0xb2>
		if (tag == cal)			calScreen();	//go to calibrate the screen
    35ba:	4b2b      	ldr	r3, [pc, #172]	; (3668 <settingOp+0x2d4>)
    35bc:	4798      	blx	r3
    35be:	e761      	b.n	3484 <settingOp+0xf0>
		else if (tag == sTime)	setTime();		//set time screen
    35c0:	4b2a      	ldr	r3, [pc, #168]	; (366c <settingOp+0x2d8>)
    35c2:	4798      	blx	r3
    35c4:	e75e      	b.n	3484 <settingOp+0xf0>
		else if (tag == sDate)	setDate();		//set date screen
    35c6:	4b2a      	ldr	r3, [pc, #168]	; (3670 <settingOp+0x2dc>)
    35c8:	4798      	blx	r3
    35ca:	e75b      	b.n	3484 <settingOp+0xf0>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    35cc:	2101      	movs	r1, #1
    35ce:	4a1f      	ldr	r2, [pc, #124]	; (364c <settingOp+0x2b8>)
    35d0:	7011      	strb	r1, [r2, #0]
    35d2:	e75c      	b.n	348e <settingOp+0xfa>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    35d4:	2100      	movs	r1, #0
    35d6:	4a1d      	ldr	r2, [pc, #116]	; (364c <settingOp+0x2b8>)
    35d8:	7011      	strb	r1, [r2, #0]
    35da:	e75b      	b.n	3494 <settingOp+0x100>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    35dc:	2100      	movs	r1, #0
    35de:	4a20      	ldr	r2, [pc, #128]	; (3660 <settingOp+0x2cc>)
    35e0:	7011      	strb	r1, [r2, #0]
    35e2:	e75a      	b.n	349a <settingOp+0x106>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    35e4:	2201      	movs	r2, #1
    35e6:	4b1e      	ldr	r3, [pc, #120]	; (3660 <settingOp+0x2cc>)
    35e8:	701a      	strb	r2, [r3, #0]
    35ea:	e759      	b.n	34a0 <settingOp+0x10c>
}//end settOp
    35ec:	b005      	add	sp, #20
    35ee:	bd30      	pop	{r4, r5, pc}
    35f0:	00005f30 	.word	0x00005f30
    35f4:	00001cdd 	.word	0x00001cdd
    35f8:	2000077c 	.word	0x2000077c
    35fc:	03000007 	.word	0x03000007
    3600:	0000220d 	.word	0x0000220d
    3604:	20000009 	.word	0x20000009
    3608:	20000159 	.word	0x20000159
    360c:	00005f3c 	.word	0x00005f3c
    3610:	03000008 	.word	0x03000008
    3614:	00005f54 	.word	0x00005f54
    3618:	03000005 	.word	0x03000005
    361c:	00005f64 	.word	0x00005f64
    3620:	000023f5 	.word	0x000023f5
    3624:	00005f74 	.word	0x00005f74
    3628:	00002375 	.word	0x00002375
    362c:	000026a9 	.word	0x000026a9
    3630:	00000151 	.word	0x00000151
    3634:	0000267d 	.word	0x0000267d
    3638:	0030212c 	.word	0x0030212c
    363c:	0000209d 	.word	0x0000209d
    3640:	00005f24 	.word	0x00005f24
    3644:	00001bc9 	.word	0x00001bc9
    3648:	0300000c 	.word	0x0300000c
    364c:	20000008 	.word	0x20000008
    3650:	00005f2c 	.word	0x00005f2c
    3654:	0300000d 	.word	0x0300000d
    3658:	00005f34 	.word	0x00005f34
    365c:	0300000e 	.word	0x0300000e
    3660:	20000158 	.word	0x20000158
    3664:	0300000f 	.word	0x0300000f
    3668:	00002d05 	.word	0x00002d05
    366c:	00002d59 	.word	0x00002d59
    3670:	00002ff9 	.word	0x00002ff9

00003674 <configure_ext_ints>:
/* Function Name    : configure_ext_ints
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt
	*/
void configure_ext_ints(void){
    3674:	b500      	push	{lr}
    3676:	b085      	sub	sp, #20
	// struct for external interrupt config
	struct extint_chan_conf ext_int_config;
	    
	// configure the external interrupt
	ext_int_config.gpio_pin            = LCD_INT;
    3678:	a901      	add	r1, sp, #4
    367a:	2309      	movs	r3, #9
    367c:	9301      	str	r3, [sp, #4]
	ext_int_config.gpio_pin_mux        = LCD_INT_PINMUX;
    367e:	604b      	str	r3, [r1, #4]
	ext_int_config.gpio_pin_pull       = LCD_INT_PULL;
    3680:	2300      	movs	r3, #0
    3682:	720b      	strb	r3, [r1, #8]
	ext_int_config.wake_if_sleeping    = true;
    3684:	2201      	movs	r2, #1
    3686:	724a      	strb	r2, [r1, #9]
	ext_int_config.filter_input_signal = false;
    3688:	728b      	strb	r3, [r1, #10]
	ext_int_config.detection_criteria  = LCD_INT_DETECT;
    368a:	3305      	adds	r3, #5
    368c:	72cb      	strb	r3, [r1, #11]

	extint_chan_set_config(LCD_INT_LINE, &ext_int_config);
    368e:	2009      	movs	r0, #9
    3690:	4b01      	ldr	r3, [pc, #4]	; (3698 <configure_ext_ints+0x24>)
    3692:	4798      	blx	r3
}//end configure_ext_ints
    3694:	b005      	add	sp, #20
    3696:	bd00      	pop	{pc}
    3698:	000003bd 	.word	0x000003bd

0000369c <configure_ext_int_callback>:
/* Function Name    : configure_ext_int_callback
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt callback
	*/
void configure_ext_int_callback(void){
    369c:	b510      	push	{r4, lr}
	// register callback for the LCD's interrupt
	extint_register_callback(lcd_interrupt_callback, LCD_INT_LINE, \
    369e:	2205      	movs	r2, #5
    36a0:	2109      	movs	r1, #9
    36a2:	4802      	ldr	r0, [pc, #8]	; (36ac <configure_ext_int_callback+0x10>)
    36a4:	4b02      	ldr	r3, [pc, #8]	; (36b0 <configure_ext_int_callback+0x14>)
    36a6:	4798      	blx	r3
	    LCD_INT_DETECT);
}//end configure_ext_int_callback
    36a8:	bd10      	pop	{r4, pc}
    36aa:	46c0      	nop			; (mov r8, r8)
    36ac:	00003c7d 	.word	0x00003c7d
    36b0:	00000275 	.word	0x00000275

000036b4 <configure_rtc_calendar>:
/* Function Name    : configure_rtc_calendar
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config the rtc and set time to 00:00:00 01/01/2000
	*/
void configure_rtc_calendar(void){
    36b4:	b530      	push	{r4, r5, lr}
    36b6:	b089      	sub	sp, #36	; 0x24
	//initial time
	time.year   = 2017;
    36b8:	4b26      	ldr	r3, [pc, #152]	; (3754 <configure_rtc_calendar+0xa0>)
    36ba:	4a27      	ldr	r2, [pc, #156]	; (3758 <configure_rtc_calendar+0xa4>)
    36bc:	80da      	strh	r2, [r3, #6]
	time.month  = 12;
    36be:	220c      	movs	r2, #12
    36c0:	715a      	strb	r2, [r3, #5]
	time.day    = 31;
    36c2:	3213      	adds	r2, #19
    36c4:	711a      	strb	r2, [r3, #4]
	time.hour   = 23;
    36c6:	3a08      	subs	r2, #8
    36c8:	709a      	strb	r2, [r3, #2]
	time.minute = 59;
    36ca:	3224      	adds	r2, #36	; 0x24
    36cc:	705a      	strb	r2, [r3, #1]
	time.second = 55;
    36ce:	3a04      	subs	r2, #4
    36d0:	701a      	strb	r2, [r3, #0]
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    36d2:	aa01      	add	r2, sp, #4
    36d4:	2300      	movs	r3, #0
    36d6:	7013      	strb	r3, [r2, #0]
	time->minute = 0;
    36d8:	7053      	strb	r3, [r2, #1]
	time->hour   = 0;
    36da:	7093      	strb	r3, [r2, #2]
	time->pm     = 0;
    36dc:	70d3      	strb	r3, [r2, #3]
	time->day    = 1;
    36de:	2101      	movs	r1, #1
    36e0:	7111      	strb	r1, [r2, #4]
	time->month  = 1;
    36e2:	7151      	strb	r1, [r2, #5]
	time->year   = 2000;
    36e4:	21fa      	movs	r1, #250	; 0xfa
    36e6:	00c9      	lsls	r1, r1, #3
    36e8:	80d1      	strh	r1, [r2, #6]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    36ea:	aa03      	add	r2, sp, #12
    36ec:	20a0      	movs	r0, #160	; 0xa0
    36ee:	0100      	lsls	r0, r0, #4
    36f0:	8010      	strh	r0, [r2, #0]
	config->clear_on_match      = false;
    36f2:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    36f4:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
    36f6:	7113      	strb	r3, [r2, #4]
	config->year_init_value     = 2000;
    36f8:	80d1      	strh	r1, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    36fa:	2400      	movs	r4, #0
    36fc:	2c00      	cmp	r4, #0
    36fe:	d014      	beq.n	372a <configure_rtc_calendar+0x76>
		
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	config_rtc_calendar.clock_24h     = true;
    3700:	aa03      	add	r2, sp, #12
    3702:	2301      	movs	r3, #1
    3704:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3706:	4c15      	ldr	r4, [pc, #84]	; (375c <configure_rtc_calendar+0xa8>)
    3708:	4915      	ldr	r1, [pc, #84]	; (3760 <configure_rtc_calendar+0xac>)
    370a:	0020      	movs	r0, r4
    370c:	4b15      	ldr	r3, [pc, #84]	; (3764 <configure_rtc_calendar+0xb0>)
    370e:	4798      	blx	r3
		
	rtc_calendar_set_time(&rtc_instance, &time);
    3710:	4910      	ldr	r1, [pc, #64]	; (3754 <configure_rtc_calendar+0xa0>)
    3712:	0020      	movs	r0, r4
    3714:	4b14      	ldr	r3, [pc, #80]	; (3768 <configure_rtc_calendar+0xb4>)
    3716:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3718:	0020      	movs	r0, r4
    371a:	4b14      	ldr	r3, [pc, #80]	; (376c <configure_rtc_calendar+0xb8>)
    371c:	4798      	blx	r3
	// adjust the frequency (the clock is slow atm)
	rtc_calendar_frequency_correction(&rtc_instance, 127);
    371e:	217f      	movs	r1, #127	; 0x7f
    3720:	0020      	movs	r0, r4
    3722:	4b13      	ldr	r3, [pc, #76]	; (3770 <configure_rtc_calendar+0xbc>)
    3724:	4798      	blx	r3
}//end configure_rtc_calendar
    3726:	b009      	add	sp, #36	; 0x24
    3728:	bd30      	pop	{r4, r5, pc}
		config->alarm[i].time = time;
    372a:	00a5      	lsls	r5, r4, #2
    372c:	192b      	adds	r3, r5, r4
    372e:	0058      	lsls	r0, r3, #1
    3730:	ab03      	add	r3, sp, #12
    3732:	469c      	mov	ip, r3
    3734:	4460      	add	r0, ip
    3736:	3008      	adds	r0, #8
    3738:	2208      	movs	r2, #8
    373a:	a901      	add	r1, sp, #4
    373c:	4b0d      	ldr	r3, [pc, #52]	; (3774 <configure_rtc_calendar+0xc0>)
    373e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3740:	192d      	adds	r5, r5, r4
    3742:	006b      	lsls	r3, r5, #1
    3744:	aa03      	add	r2, sp, #12
    3746:	4694      	mov	ip, r2
    3748:	4463      	add	r3, ip
    374a:	2206      	movs	r2, #6
    374c:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    374e:	3401      	adds	r4, #1
    3750:	b2e4      	uxtb	r4, r4
    3752:	e7d3      	b.n	36fc <configure_rtc_calendar+0x48>
    3754:	20000774 	.word	0x20000774
    3758:	000007e1 	.word	0x000007e1
    375c:	200004ac 	.word	0x200004ac
    3760:	40001400 	.word	0x40001400
    3764:	00000651 	.word	0x00000651
    3768:	00000531 	.word	0x00000531
    376c:	00000439 	.word	0x00000439
    3770:	000006b1 	.word	0x000006b1
    3774:	000054cd 	.word	0x000054cd

00003778 <clock_osc32k_init>:
/* Function Name    : clock_osc32k_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config internal oscillator 32 kHz
	*/
void clock_osc32k_init(void){
    3778:	b500      	push	{lr}
    377a:	b083      	sub	sp, #12
	config->enable_1khz_output  = true;
    377c:	2301      	movs	r3, #1
    377e:	466a      	mov	r2, sp
    3780:	7053      	strb	r3, [r2, #1]
	config->enable_32khz_output = true;
    3782:	7093      	strb	r3, [r2, #2]
	config->run_in_standby      = false;
    3784:	2200      	movs	r2, #0
    3786:	4669      	mov	r1, sp
    3788:	70ca      	strb	r2, [r1, #3]
	config->on_demand           = true;
    378a:	710b      	strb	r3, [r1, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    378c:	3306      	adds	r3, #6
    378e:	700b      	strb	r3, [r1, #0]
	config->write_once          = false;
    3790:	714a      	strb	r2, [r1, #5]
	osc32_config.on_demand				= true;
	osc32_config.run_in_standby			= false;
	osc32_config.startup_time			= SYSTEM_OSC32K_STARTUP_130;
	osc32_config.write_once				= false;
	
	system_clock_source_osc32k_set_config(&osc32_config);
    3792:	4668      	mov	r0, sp
    3794:	4b01      	ldr	r3, [pc, #4]	; (379c <clock_osc32k_init+0x24>)
    3796:	4798      	blx	r3
}//end clock_osc32k_init
    3798:	b003      	add	sp, #12
    379a:	bd00      	pop	{pc}
    379c:	0000480d 	.word	0x0000480d

000037a0 <clock_gclk2_init>:
/* Function Name    : clock_gclk2_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : turn on glck using internal 32 kHz oscillator
	*/
void clock_gclk2_init(void){
    37a0:	b500      	push	{lr}
    37a2:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk2_config;
		
	system_gclk_init();
    37a4:	4b09      	ldr	r3, [pc, #36]	; (37cc <clock_gclk2_init+0x2c>)
    37a6:	4798      	blx	r3
		
	gclk2_config.source_clock			= SYSTEM_CLOCK_SOURCE_OSC32K;
    37a8:	a901      	add	r1, sp, #4
    37aa:	2304      	movs	r3, #4
    37ac:	700b      	strb	r3, [r1, #0]
	gclk2_config.output_enable			= false;
    37ae:	2300      	movs	r3, #0
    37b0:	724b      	strb	r3, [r1, #9]
	gclk2_config.high_when_disabled		= false;
    37b2:	704b      	strb	r3, [r1, #1]
	gclk2_config.division_factor		= 32;
    37b4:	2220      	movs	r2, #32
    37b6:	604a      	str	r2, [r1, #4]
	gclk2_config.run_in_standby			= false;
    37b8:	720b      	strb	r3, [r1, #8]
		
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclk2_config);
    37ba:	2002      	movs	r0, #2
    37bc:	4b04      	ldr	r3, [pc, #16]	; (37d0 <clock_gclk2_init+0x30>)
    37be:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    37c0:	2002      	movs	r0, #2
    37c2:	4b04      	ldr	r3, [pc, #16]	; (37d4 <clock_gclk2_init+0x34>)
    37c4:	4798      	blx	r3
}//end clock_gclk2_init
    37c6:	b005      	add	sp, #20
    37c8:	bd00      	pop	{pc}
    37ca:	46c0      	nop			; (mov r8, r8)
    37cc:	000049f9 	.word	0x000049f9
    37d0:	00004a1d 	.word	0x00004a1d
    37d4:	00004aed 	.word	0x00004aed

000037d8 <lcd_spi_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for communicating with the LCD
 */
void lcd_spi_init(void)
{
    37d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37da:	46c6      	mov	lr, r8
    37dc:	b500      	push	{lr}
    37de:	b090      	sub	sp, #64	; 0x40
    if(lcd_init_complete == true)
    37e0:	4b34      	ldr	r3, [pc, #208]	; (38b4 <lcd_spi_init+0xdc>)
    37e2:	781b      	ldrb	r3, [r3, #0]
    37e4:	2b00      	cmp	r3, #0
    37e6:	d003      	beq.n	37f0 <lcd_spi_init+0x18>
    spi_enable(&lcd_master);
	

    
    lcd_init_complete = true;
}
    37e8:	b010      	add	sp, #64	; 0x40
    37ea:	bc04      	pop	{r2}
    37ec:	4690      	mov	r8, r2
    37ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	config->address_enabled = false;
    37f0:	aa01      	add	r2, sp, #4
    37f2:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    37f4:	7093      	strb	r3, [r2, #2]
    lcd_init_slave_config.ss_pin = LCD_CS;
    37f6:	212d      	movs	r1, #45	; 0x2d
    37f8:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    37fa:	4c2f      	ldr	r4, [pc, #188]	; (38b8 <lcd_spi_init+0xe0>)
    37fc:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    37fe:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3800:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3802:	2201      	movs	r2, #1
    3804:	4669      	mov	r1, sp
    3806:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3808:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    380a:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    380c:	202d      	movs	r0, #45	; 0x2d
    380e:	4b2b      	ldr	r3, [pc, #172]	; (38bc <lcd_spi_init+0xe4>)
    3810:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3812:	7823      	ldrb	r3, [r4, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3814:	09d9      	lsrs	r1, r3, #7
	uint8_t group_index = (gpio_pin / 32);
    3816:	095a      	lsrs	r2, r3, #5
	if (port_index < PORT_INST_NUM) {
    3818:	2900      	cmp	r1, #0
    381a:	d149      	bne.n	38b0 <lcd_spi_init+0xd8>
		return &(ports[port_index]->Group[group_index]);
    381c:	01d2      	lsls	r2, r2, #7
    381e:	4928      	ldr	r1, [pc, #160]	; (38c0 <lcd_spi_init+0xe8>)
    3820:	468c      	mov	ip, r1
    3822:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3824:	271f      	movs	r7, #31
    3826:	403b      	ands	r3, r7
    3828:	2501      	movs	r5, #1
    382a:	0029      	movs	r1, r5
    382c:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    382e:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    3830:	ac02      	add	r4, sp, #8
    3832:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3834:	2600      	movs	r6, #0
    3836:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3838:	60a6      	str	r6, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    383a:	23c0      	movs	r3, #192	; 0xc0
    383c:	039b      	lsls	r3, r3, #14
    383e:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3840:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
    3842:	7466      	strb	r6, [r4, #17]
	config->receiver_enable  = true;
    3844:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3846:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    3848:	7526      	strb	r6, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    384a:	2324      	movs	r3, #36	; 0x24
    384c:	4698      	mov	r8, r3
    384e:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3850:	220c      	movs	r2, #12
    3852:	2100      	movs	r1, #0
    3854:	a808      	add	r0, sp, #32
    3856:	4b1b      	ldr	r3, [pc, #108]	; (38c4 <lcd_spi_init+0xec>)
    3858:	4798      	blx	r3
    lcd_init_master_config.mux_setting = LCD_PINMUX_SETTING;
    385a:	2380      	movs	r3, #128	; 0x80
    385c:	025b      	lsls	r3, r3, #9
    385e:	60e3      	str	r3, [r4, #12]
    lcd_init_master_config.pinmux_pad0 = LCD_MISO_PAD;
    3860:	4b19      	ldr	r3, [pc, #100]	; (38c8 <lcd_spi_init+0xf0>)
    3862:	62a3      	str	r3, [r4, #40]	; 0x28
    lcd_init_master_config.pinmux_pad1 = LCD_UNUSED; 
    3864:	2301      	movs	r3, #1
    3866:	425b      	negs	r3, r3
    3868:	62e3      	str	r3, [r4, #44]	; 0x2c
    lcd_init_master_config.pinmux_pad2 = LCD_MOSI_PAD;
    386a:	4b18      	ldr	r3, [pc, #96]	; (38cc <lcd_spi_init+0xf4>)
    386c:	6323      	str	r3, [r4, #48]	; 0x30
    lcd_init_master_config.pinmux_pad3 = LCD_SCK_PAD;
    386e:	4b18      	ldr	r3, [pc, #96]	; (38d0 <lcd_spi_init+0xf8>)
    3870:	6363      	str	r3, [r4, #52]	; 0x34
	lcd_init_master_config.generator_source = LCD_SPI_SOURCE_CLOCK;
    3872:	4643      	mov	r3, r8
    3874:	54e6      	strb	r6, [r4, r3]
	lcd_init_master_config.mode_specific.master.baudrate = LCD_SPI_MAX_CLOCK;
    3876:	4b17      	ldr	r3, [pc, #92]	; (38d4 <lcd_spi_init+0xfc>)
    3878:	61a3      	str	r3, [r4, #24]
    spi_init(&lcd_master, LCD_SPI, &lcd_init_master_config);
    387a:	4e17      	ldr	r6, [pc, #92]	; (38d8 <lcd_spi_init+0x100>)
    387c:	0022      	movs	r2, r4
    387e:	4917      	ldr	r1, [pc, #92]	; (38dc <lcd_spi_init+0x104>)
    3880:	0030      	movs	r0, r6
    3882:	4b17      	ldr	r3, [pc, #92]	; (38e0 <lcd_spi_init+0x108>)
    3884:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3886:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3888:	0020      	movs	r0, r4
    388a:	4b16      	ldr	r3, [pc, #88]	; (38e4 <lcd_spi_init+0x10c>)
    388c:	4798      	blx	r3
    388e:	4038      	ands	r0, r7
    3890:	4085      	lsls	r5, r0
    3892:	4b15      	ldr	r3, [pc, #84]	; (38e8 <lcd_spi_init+0x110>)
    3894:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3896:	4b10      	ldr	r3, [pc, #64]	; (38d8 <lcd_spi_init+0x100>)
    3898:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    389a:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    389c:	2b00      	cmp	r3, #0
    389e:	d1fa      	bne.n	3896 <lcd_spi_init+0xbe>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    38a0:	6823      	ldr	r3, [r4, #0]
    38a2:	2202      	movs	r2, #2
    38a4:	4313      	orrs	r3, r2
    38a6:	6023      	str	r3, [r4, #0]
    lcd_init_complete = true;
    38a8:	3a01      	subs	r2, #1
    38aa:	4b02      	ldr	r3, [pc, #8]	; (38b4 <lcd_spi_init+0xdc>)
    38ac:	701a      	strb	r2, [r3, #0]
    38ae:	e79b      	b.n	37e8 <lcd_spi_init+0x10>
		return NULL;
    38b0:	2200      	movs	r2, #0
    38b2:	e7b7      	b.n	3824 <lcd_spi_init+0x4c>
    38b4:	2000015b 	.word	0x2000015b
    38b8:	200009a8 	.word	0x200009a8
    38bc:	00004681 	.word	0x00004681
    38c0:	41004400 	.word	0x41004400
    38c4:	000054df 	.word	0x000054df
    38c8:	002c0002 	.word	0x002c0002
    38cc:	002e0002 	.word	0x002e0002
    38d0:	002f0002 	.word	0x002f0002
    38d4:	000f4240 	.word	0x000f4240
    38d8:	200009ac 	.word	0x200009ac
    38dc:	42001800 	.word	0x42001800
    38e0:	00000ba9 	.word	0x00000ba9
    38e4:	000045fd 	.word	0x000045fd
    38e8:	e000e100 	.word	0xe000e100

000038ec <lcd_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Starts the SPI transfer by selecting the slave (pulling 
 *  CS low) and sending LCD address. For use in the FT library.
 */
status_code_genare_t lcd_start_xfer(LCD_ADDRESS param_addr, LCD_XFER_DIR dir)
{
    38ec:	b510      	push	{r4, lr}
    38ee:	b082      	sub	sp, #8
    38f0:	1e0c      	subs	r4, r1, #0
        uint8_t preamble[4];
    } lcd_xfer_preamble;
    
    status_code_genare_t read_status;
    
    if(dir == READ)
    38f2:	d11f      	bne.n	3934 <lcd_start_xfer+0x48>
        // LCD read address should only be 22 bits
        lcd_xfer_preamble.addr = (0x3FFFFF & param_addr) << 8;
    38f4:	0200      	lsls	r0, r0, #8
    38f6:	4b1a      	ldr	r3, [pc, #104]	; (3960 <lcd_start_xfer+0x74>)
    38f8:	4018      	ands	r0, r3
    38fa:	9001      	str	r0, [sp, #4]
        /* LCD read address should only be 22 bits. Also OR 0x800000 because the
         * host must send a 1-bit and then a 0-bit to indicate a write */
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    
    // preamble bytes need to be swapped so MSB is transmitted first
    XORSWAP(lcd_xfer_preamble.preamble[0], lcd_xfer_preamble.preamble[3]);
    38fc:	ab01      	add	r3, sp, #4
    38fe:	78d9      	ldrb	r1, [r3, #3]
    3900:	781a      	ldrb	r2, [r3, #0]
    3902:	404a      	eors	r2, r1
    3904:	4051      	eors	r1, r2
    3906:	70d9      	strb	r1, [r3, #3]
    3908:	404a      	eors	r2, r1
    390a:	701a      	strb	r2, [r3, #0]
    XORSWAP(lcd_xfer_preamble.preamble[1], lcd_xfer_preamble.preamble[2]);
    390c:	7899      	ldrb	r1, [r3, #2]
    390e:	785a      	ldrb	r2, [r3, #1]
    3910:	404a      	eors	r2, r1
    3912:	4051      	eors	r1, r2
    3914:	7099      	strb	r1, [r3, #2]
    3916:	404a      	eors	r2, r1
    3918:	705a      	strb	r2, [r3, #1]
    
    do{
        // select the slave
        read_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    391a:	2201      	movs	r2, #1
    391c:	4911      	ldr	r1, [pc, #68]	; (3964 <lcd_start_xfer+0x78>)
    391e:	4812      	ldr	r0, [pc, #72]	; (3968 <lcd_start_xfer+0x7c>)
    3920:	4b12      	ldr	r3, [pc, #72]	; (396c <lcd_start_xfer+0x80>)
    3922:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
    3924:	2805      	cmp	r0, #5
    3926:	d0f8      	beq.n	391a <lcd_start_xfer+0x2e>
    
    if(dir == READ)
    3928:	2c00      	cmp	r4, #0
    392a:	d00d      	beq.n	3948 <lcd_start_xfer+0x5c>
        // send preamble = two read bits, 22 bit address, and dummy byte
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    else if(dir == WRT)
    392c:	2c01      	cmp	r4, #1
    392e:	d011      	beq.n	3954 <lcd_start_xfer+0x68>
        // send preamble = two wrt bits and 22 bit address
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    
    return read_status;
}
    3930:	b002      	add	sp, #8
    3932:	bd10      	pop	{r4, pc}
    else if(dir == WRT)
    3934:	2901      	cmp	r1, #1
    3936:	d1e1      	bne.n	38fc <lcd_start_xfer+0x10>
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    3938:	0200      	lsls	r0, r0, #8
    393a:	4b09      	ldr	r3, [pc, #36]	; (3960 <lcd_start_xfer+0x74>)
    393c:	4018      	ands	r0, r3
    393e:	2380      	movs	r3, #128	; 0x80
    3940:	061b      	lsls	r3, r3, #24
    3942:	4318      	orrs	r0, r3
    3944:	9001      	str	r0, [sp, #4]
    3946:	e7d9      	b.n	38fc <lcd_start_xfer+0x10>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    3948:	2204      	movs	r2, #4
    394a:	a901      	add	r1, sp, #4
    394c:	4806      	ldr	r0, [pc, #24]	; (3968 <lcd_start_xfer+0x7c>)
    394e:	4b08      	ldr	r3, [pc, #32]	; (3970 <lcd_start_xfer+0x84>)
    3950:	4798      	blx	r3
    3952:	e7ed      	b.n	3930 <lcd_start_xfer+0x44>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    3954:	2203      	movs	r2, #3
    3956:	a901      	add	r1, sp, #4
    3958:	4803      	ldr	r0, [pc, #12]	; (3968 <lcd_start_xfer+0x7c>)
    395a:	4b05      	ldr	r3, [pc, #20]	; (3970 <lcd_start_xfer+0x84>)
    395c:	4798      	blx	r3
    395e:	e7e7      	b.n	3930 <lcd_start_xfer+0x44>
    3960:	3fffff00 	.word	0x3fffff00
    3964:	200009a8 	.word	0x200009a8
    3968:	200009ac 	.word	0x200009ac
    396c:	00000d91 	.word	0x00000d91
    3970:	00000e8d 	.word	0x00000e8d

00003974 <lcd_stop_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Stops the SPI transfer by deselecting the slave (letting 
 *  CS float high). For use in the FT library.
 */
status_code_genare_t lcd_stop_xfer(void)
{
    3974:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&lcd_master, &lcd_slave, false);
    3976:	2200      	movs	r2, #0
    3978:	4902      	ldr	r1, [pc, #8]	; (3984 <lcd_stop_xfer+0x10>)
    397a:	4803      	ldr	r0, [pc, #12]	; (3988 <lcd_stop_xfer+0x14>)
    397c:	4b03      	ldr	r3, [pc, #12]	; (398c <lcd_stop_xfer+0x18>)
    397e:	4798      	blx	r3
}
    3980:	bd10      	pop	{r4, pc}
    3982:	46c0      	nop			; (mov r8, r8)
    3984:	200009a8 	.word	0x200009a8
    3988:	200009ac 	.word	0x200009ac
    398c:	00000d91 	.word	0x00000d91

00003990 <lcd_host_read>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 15.
 */
status_code_genare_t lcd_host_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
    3990:	b510      	push	{r4, lr}
    3992:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&lcd_master, \
    3994:	2300      	movs	r3, #0
    3996:	0001      	movs	r1, r0
    3998:	4801      	ldr	r0, [pc, #4]	; (39a0 <lcd_host_read+0x10>)
    399a:	4c02      	ldr	r4, [pc, #8]	; (39a4 <lcd_host_read+0x14>)
    399c:	47a0      	blx	r4
                        read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
    399e:	bd10      	pop	{r4, pc}
    39a0:	200009ac 	.word	0x200009ac
    39a4:	00000c95 	.word	0x00000c95

000039a8 <lcd_rd8>:
 * Return Values(s) : uint8_t
 * Description      : Reads a 8-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint8_t lcd_rd8(LCD_ADDRESS read_addr)
{
    39a8:	b510      	push	{r4, lr}
    39aa:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
    39ac:	466b      	mov	r3, sp
    39ae:	1ddc      	adds	r4, r3, #7
    39b0:	2300      	movs	r3, #0
    39b2:	7023      	strb	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    39b4:	2100      	movs	r1, #0
    39b6:	4b05      	ldr	r3, [pc, #20]	; (39cc <lcd_rd8+0x24>)
    39b8:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    lcd_host_read(&read_byte, 1);
    39ba:	2101      	movs	r1, #1
    39bc:	0020      	movs	r0, r4
    39be:	4b04      	ldr	r3, [pc, #16]	; (39d0 <lcd_rd8+0x28>)
    39c0:	4798      	blx	r3
    
    lcd_stop_xfer();
    39c2:	4b04      	ldr	r3, [pc, #16]	; (39d4 <lcd_rd8+0x2c>)
    39c4:	4798      	blx	r3
    
    return read_byte; 
    39c6:	7820      	ldrb	r0, [r4, #0]
}
    39c8:	b002      	add	sp, #8
    39ca:	bd10      	pop	{r4, pc}
    39cc:	000038ed 	.word	0x000038ed
    39d0:	00003991 	.word	0x00003991
    39d4:	00003975 	.word	0x00003975

000039d8 <lcd_rd16>:
 * Return Values(s) : uint16_t
 * Description      : Reads a 16-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint16_t lcd_rd16(LCD_ADDRESS read_addr)
{
    39d8:	b510      	push	{r4, lr}
    39da:	b082      	sub	sp, #8
    uint16_t read_word = 0;
    39dc:	466b      	mov	r3, sp
    39de:	1d9c      	adds	r4, r3, #6
    39e0:	2300      	movs	r3, #0
    39e2:	8023      	strh	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    39e4:	2100      	movs	r1, #0
    39e6:	4b05      	ldr	r3, [pc, #20]	; (39fc <lcd_rd16+0x24>)
    39e8:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    lcd_host_read((uint8_t*) &read_word, 2);
    39ea:	2102      	movs	r1, #2
    39ec:	0020      	movs	r0, r4
    39ee:	4b04      	ldr	r3, [pc, #16]	; (3a00 <lcd_rd16+0x28>)
    39f0:	4798      	blx	r3
    
    lcd_stop_xfer();
    39f2:	4b04      	ldr	r3, [pc, #16]	; (3a04 <lcd_rd16+0x2c>)
    39f4:	4798      	blx	r3
    
    return read_word;
    39f6:	8820      	ldrh	r0, [r4, #0]
}    
    39f8:	b002      	add	sp, #8
    39fa:	bd10      	pop	{r4, pc}
    39fc:	000038ed 	.word	0x000038ed
    3a00:	00003991 	.word	0x00003991
    3a04:	00003975 	.word	0x00003975

00003a08 <lcd_host_write>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 16.
 */
status_code_genare_t lcd_host_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
    3a08:	b510      	push	{r4, lr}
    3a0a:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&lcd_master, \
    3a0c:	0001      	movs	r1, r0
    3a0e:	4802      	ldr	r0, [pc, #8]	; (3a18 <lcd_host_write+0x10>)
    3a10:	4b02      	ldr	r3, [pc, #8]	; (3a1c <lcd_host_write+0x14>)
    3a12:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
    
}
    3a14:	bd10      	pop	{r4, pc}
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	200009ac 	.word	0x200009ac
    3a1c:	00000e8d 	.word	0x00000e8d

00003a20 <lcd_wr8>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 8-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr8(LCD_ADDRESS wrt_addr, uint8_t wrt_byte)
{
    3a20:	b510      	push	{r4, lr}
    3a22:	b082      	sub	sp, #8
    3a24:	466b      	mov	r3, sp
    3a26:	1ddc      	adds	r4, r3, #7
    3a28:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);    
    3a2a:	2101      	movs	r1, #1
    3a2c:	4b05      	ldr	r3, [pc, #20]	; (3a44 <lcd_wr8+0x24>)
    3a2e:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = lcd_host_write(&wrt_byte, 1);
    3a30:	2101      	movs	r1, #1
    3a32:	0020      	movs	r0, r4
    3a34:	4b04      	ldr	r3, [pc, #16]	; (3a48 <lcd_wr8+0x28>)
    3a36:	4798      	blx	r3
    3a38:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    3a3a:	4b04      	ldr	r3, [pc, #16]	; (3a4c <lcd_wr8+0x2c>)
    3a3c:	4798      	blx	r3
    
    return status_result;
}
    3a3e:	0020      	movs	r0, r4
    3a40:	b002      	add	sp, #8
    3a42:	bd10      	pop	{r4, pc}
    3a44:	000038ed 	.word	0x000038ed
    3a48:	00003a09 	.word	0x00003a09
    3a4c:	00003975 	.word	0x00003975

00003a50 <lcd_wr16>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 16-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr16(LCD_ADDRESS wrt_addr, uint16_t wrt_word)
{
    3a50:	b510      	push	{r4, lr}
    3a52:	b082      	sub	sp, #8
    3a54:	466b      	mov	r3, sp
    3a56:	1d9c      	adds	r4, r3, #6
    3a58:	80d9      	strh	r1, [r3, #6]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    3a5a:	2101      	movs	r1, #1
    3a5c:	4b05      	ldr	r3, [pc, #20]	; (3a74 <lcd_wr16+0x24>)
    3a5e:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    status_result = lcd_host_write((uint8_t*) &wrt_word, 2);
    3a60:	2102      	movs	r1, #2
    3a62:	0020      	movs	r0, r4
    3a64:	4b04      	ldr	r3, [pc, #16]	; (3a78 <lcd_wr16+0x28>)
    3a66:	4798      	blx	r3
    3a68:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    3a6a:	4b04      	ldr	r3, [pc, #16]	; (3a7c <lcd_wr16+0x2c>)
    3a6c:	4798      	blx	r3
    
    return status_result;
}
    3a6e:	0020      	movs	r0, r4
    3a70:	b002      	add	sp, #8
    3a72:	bd10      	pop	{r4, pc}
    3a74:	000038ed 	.word	0x000038ed
    3a78:	00003a09 	.word	0x00003a09
    3a7c:	00003975 	.word	0x00003975

00003a80 <lcd_wr32>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 32-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr32(LCD_ADDRESS wrt_addr, uint32_t wrt_dword)
{
    3a80:	b510      	push	{r4, lr}
    3a82:	b082      	sub	sp, #8
    3a84:	9101      	str	r1, [sp, #4]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    3a86:	2101      	movs	r1, #1
    3a88:	4b05      	ldr	r3, [pc, #20]	; (3aa0 <lcd_wr32+0x20>)
    3a8a:	4798      	blx	r3
    
    // cast the dword pointer to an 8-bit pointer and use a 4 byte length
    status_result = lcd_host_write((uint8_t *) &wrt_dword, 4);
    3a8c:	2104      	movs	r1, #4
    3a8e:	a801      	add	r0, sp, #4
    3a90:	4b04      	ldr	r3, [pc, #16]	; (3aa4 <lcd_wr32+0x24>)
    3a92:	4798      	blx	r3
    3a94:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    3a96:	4b04      	ldr	r3, [pc, #16]	; (3aa8 <lcd_wr32+0x28>)
    3a98:	4798      	blx	r3
    
    return status_result;
}
    3a9a:	0020      	movs	r0, r4
    3a9c:	b002      	add	sp, #8
    3a9e:	bd10      	pop	{r4, pc}
    3aa0:	000038ed 	.word	0x000038ed
    3aa4:	00003a09 	.word	0x00003a09
    3aa8:	00003975 	.word	0x00003975

00003aac <lcd_host_cmd>:
 * Description      : Sends a host command to the LCD. Host commands are
 *  for basic hardware configurations (like power mode, clock stuff, etc.).
 *  Refer to DS-FT81x datasheet pg 16 if the command has a parameter byte.
 */
status_code_genare_t lcd_host_cmd(uint8_t cmd, uint8_t param_byte)
{
    3aac:	b510      	push	{r4, lr}
    3aae:	b082      	sub	sp, #8
    // variable for holding ASF status code
    status_code_genare_t wrt_status;
    
    // 3 byte array for sending host command to the LCD
    uint8_t cmd_packet[3] = {cmd, param_byte, 0x00};
    3ab0:	ab01      	add	r3, sp, #4
    3ab2:	7018      	strb	r0, [r3, #0]
    3ab4:	7059      	strb	r1, [r3, #1]
    3ab6:	2200      	movs	r2, #0
    3ab8:	709a      	strb	r2, [r3, #2]
   
    // select the slave
    do{
        // select the slave
        wrt_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    3aba:	2201      	movs	r2, #1
    3abc:	490a      	ldr	r1, [pc, #40]	; (3ae8 <lcd_host_cmd+0x3c>)
    3abe:	480b      	ldr	r0, [pc, #44]	; (3aec <lcd_host_cmd+0x40>)
    3ac0:	4b0b      	ldr	r3, [pc, #44]	; (3af0 <lcd_host_cmd+0x44>)
    3ac2:	4798      	blx	r3
		//port_pin_set_output_level(PIN_PA10, true);
    }while(wrt_status == STATUS_BUSY);
    3ac4:	2805      	cmp	r0, #5
    3ac6:	d0f8      	beq.n	3aba <lcd_host_cmd+0xe>
    
    // send host command
    wrt_status = spi_write_buffer_wait(&lcd_master, cmd_packet, 3);
    3ac8:	2203      	movs	r2, #3
    3aca:	a901      	add	r1, sp, #4
    3acc:	4807      	ldr	r0, [pc, #28]	; (3aec <lcd_host_cmd+0x40>)
    3ace:	4b09      	ldr	r3, [pc, #36]	; (3af4 <lcd_host_cmd+0x48>)
    3ad0:	4798      	blx	r3
    3ad2:	1e04      	subs	r4, r0, #0

    // status check
    if(wrt_status != STATUS_OK)
    3ad4:	d105      	bne.n	3ae2 <lcd_host_cmd+0x36>
        // return an error
        return wrt_status;
    }
    else
        // deselect slave
        wrt_status = lcd_stop_xfer();
    3ad6:	4b08      	ldr	r3, [pc, #32]	; (3af8 <lcd_host_cmd+0x4c>)
    3ad8:	4798      	blx	r3
    3ada:	0004      	movs	r4, r0
    
    return wrt_status;
}
    3adc:	0020      	movs	r0, r4
    3ade:	b002      	add	sp, #8
    3ae0:	bd10      	pop	{r4, pc}
        lcd_stop_xfer();
    3ae2:	4b05      	ldr	r3, [pc, #20]	; (3af8 <lcd_host_cmd+0x4c>)
    3ae4:	4798      	blx	r3
        return wrt_status;
    3ae6:	e7f9      	b.n	3adc <lcd_host_cmd+0x30>
    3ae8:	200009a8 	.word	0x200009a8
    3aec:	200009ac 	.word	0x200009ac
    3af0:	00000d91 	.word	0x00000d91
    3af4:	00000e8d 	.word	0x00000e8d
    3af8:	00003975 	.word	0x00003975

00003afc <lcd_powerdown>:
		port_base->OUTCLR.reg = pin_mask;
    3afc:	2280      	movs	r2, #128	; 0x80
    3afe:	0052      	lsls	r2, r2, #1
    3b00:	4b01      	ldr	r3, [pc, #4]	; (3b08 <lcd_powerdown+0xc>)
    3b02:	615a      	str	r2, [r3, #20]
 * Description      : Pull down the LCD_PD pin to force power down the LCD
 */
void lcd_powerdown(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_EN);
}
    3b04:	4770      	bx	lr
    3b06:	46c0      	nop			; (mov r8, r8)
    3b08:	41004400 	.word	0x41004400

00003b0c <lcd_powerup>:
		port_base->OUTSET.reg = pin_mask;
    3b0c:	2280      	movs	r2, #128	; 0x80
    3b0e:	0052      	lsls	r2, r2, #1
    3b10:	4b01      	ldr	r3, [pc, #4]	; (3b18 <lcd_powerup+0xc>)
    3b12:	619a      	str	r2, [r3, #24]
 * Description      : Pull up the LCD_PD pin to force power up the LCD
 */
void lcd_powerup(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
}
    3b14:	4770      	bx	lr
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	41004400 	.word	0x41004400

00003b1c <lcd_init_seq>:
 * Return Values(s) : ASF general status code
 * Description      : Initialization sequence as described by the 
 *  FT81X_Series_Programmer_Guide datasheet pg 11.
 */
void lcd_init_seq(void)
{
    3b1c:	b570      	push	{r4, r5, r6, lr}
    /* medium rare power cycle to get the LCD into a known state.
     * Medium rare because it resets a lot of things, but sometimes display
     * list behavior is funky even after this power cycle. It is recommended
     * that the user performs a hard power reset when testing display 
     * list stuff. */
    lcd_powerdown();
    3b1e:	4b31      	ldr	r3, [pc, #196]	; (3be4 <lcd_init_seq+0xc8>)
    3b20:	4798      	blx	r3
    delay_ms(20);
    3b22:	2014      	movs	r0, #20
    3b24:	4c30      	ldr	r4, [pc, #192]	; (3be8 <lcd_init_seq+0xcc>)
    3b26:	47a0      	blx	r4
    lcd_powerup();
    3b28:	4b30      	ldr	r3, [pc, #192]	; (3bec <lcd_init_seq+0xd0>)
    3b2a:	4798      	blx	r3
    delay_ms(20);
    3b2c:	2014      	movs	r0, #20
    3b2e:	47a0      	blx	r4
    
    // indicate that an external clock is being used
    lcd_host_cmd(CLKEXT, NO_PARAM);
    3b30:	2100      	movs	r1, #0
    3b32:	2044      	movs	r0, #68	; 0x44
    3b34:	4d2e      	ldr	r5, [pc, #184]	; (3bf0 <lcd_init_seq+0xd4>)
    3b36:	47a8      	blx	r5
    
    // wait a little bit, because CLKEXT triggers a software reset
    delay_ms(50);
    3b38:	2032      	movs	r0, #50	; 0x32
    3b3a:	47a0      	blx	r4
    // wake up the LCD
    lcd_host_cmd(ACTIVE, NO_PARAM);
    3b3c:	2100      	movs	r1, #0
    3b3e:	2000      	movs	r0, #0
    3b40:	47a8      	blx	r5
    
    // wait until the LCD is active
	do{
	    result = lcd_rd16(REG_ID);
    3b42:	482c      	ldr	r0, [pc, #176]	; (3bf4 <lcd_init_seq+0xd8>)
    3b44:	4b2c      	ldr	r3, [pc, #176]	; (3bf8 <lcd_init_seq+0xdc>)
    3b46:	4798      	blx	r3
    3b48:	b2c0      	uxtb	r0, r0
	} while(result != 0x7c);  
    3b4a:	287c      	cmp	r0, #124	; 0x7c
    3b4c:	d1f9      	bne.n	3b42 <lcd_init_seq+0x26>
    
    // Register settings, refer to NHD-5.0-800480FT-CTXL-CTP datasheet:
    // horizontal configuration registers
    lcd_wr16(REG_HSIZE, 800);
    3b4e:	21c8      	movs	r1, #200	; 0xc8
    3b50:	0089      	lsls	r1, r1, #2
    3b52:	482a      	ldr	r0, [pc, #168]	; (3bfc <lcd_init_seq+0xe0>)
    3b54:	4c2a      	ldr	r4, [pc, #168]	; (3c00 <lcd_init_seq+0xe4>)
    3b56:	47a0      	blx	r4
    lcd_wr16(REG_HCYCLE, 928);
    3b58:	21e8      	movs	r1, #232	; 0xe8
    3b5a:	0089      	lsls	r1, r1, #2
    3b5c:	4829      	ldr	r0, [pc, #164]	; (3c04 <lcd_init_seq+0xe8>)
    3b5e:	47a0      	blx	r4
    lcd_wr16(REG_HOFFSET, 88);
    3b60:	2158      	movs	r1, #88	; 0x58
    3b62:	4829      	ldr	r0, [pc, #164]	; (3c08 <lcd_init_seq+0xec>)
    3b64:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC0, 0);
    3b66:	2100      	movs	r1, #0
    3b68:	4828      	ldr	r0, [pc, #160]	; (3c0c <lcd_init_seq+0xf0>)
    3b6a:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC1, 48);
    3b6c:	2130      	movs	r1, #48	; 0x30
    3b6e:	4828      	ldr	r0, [pc, #160]	; (3c10 <lcd_init_seq+0xf4>)
    3b70:	47a0      	blx	r4
    
    // vertical configuration registers
    lcd_wr16(REG_VSIZE, 480);
    3b72:	21f0      	movs	r1, #240	; 0xf0
    3b74:	0049      	lsls	r1, r1, #1
    3b76:	4827      	ldr	r0, [pc, #156]	; (3c14 <lcd_init_seq+0xf8>)
    3b78:	47a0      	blx	r4
    lcd_wr16(REG_VCYCLE, 525);
    3b7a:	4927      	ldr	r1, [pc, #156]	; (3c18 <lcd_init_seq+0xfc>)
    3b7c:	4827      	ldr	r0, [pc, #156]	; (3c1c <lcd_init_seq+0x100>)
    3b7e:	47a0      	blx	r4
    lcd_wr16(REG_VOFFSET, 32);
    3b80:	2120      	movs	r1, #32
    3b82:	4827      	ldr	r0, [pc, #156]	; (3c20 <lcd_init_seq+0x104>)
    3b84:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC0, 0);
    3b86:	2100      	movs	r1, #0
    3b88:	4826      	ldr	r0, [pc, #152]	; (3c24 <lcd_init_seq+0x108>)
    3b8a:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC1, 3);
    3b8c:	2103      	movs	r1, #3
    3b8e:	4826      	ldr	r0, [pc, #152]	; (3c28 <lcd_init_seq+0x10c>)
    3b90:	47a0      	blx	r4

    // misc. screen configuration registers
	lcd_wr8(REG_SWIZZLE, 0);
    3b92:	2100      	movs	r1, #0
    3b94:	4825      	ldr	r0, [pc, #148]	; (3c2c <lcd_init_seq+0x110>)
    3b96:	4d26      	ldr	r5, [pc, #152]	; (3c30 <lcd_init_seq+0x114>)
    3b98:	47a8      	blx	r5
	lcd_wr8(REG_PCLK_POL, 0);
    3b9a:	2100      	movs	r1, #0
    3b9c:	4825      	ldr	r0, [pc, #148]	; (3c34 <lcd_init_seq+0x118>)
    3b9e:	47a8      	blx	r5
	lcd_wr8(REG_CSPREAD, 1);
    3ba0:	2101      	movs	r1, #1
    3ba2:	4825      	ldr	r0, [pc, #148]	; (3c38 <lcd_init_seq+0x11c>)
    3ba4:	47a8      	blx	r5
	lcd_wr8(REG_DITHER, 1);
    3ba6:	2101      	movs	r1, #1
    3ba8:	4824      	ldr	r0, [pc, #144]	; (3c3c <lcd_init_seq+0x120>)
    3baa:	47a8      	blx	r5

    // clear the display
    lcd_wr32(RAM_DL+0, CLEAR_COLOR_RGB(1, 1, 1));
    3bac:	4924      	ldr	r1, [pc, #144]	; (3c40 <lcd_init_seq+0x124>)
    3bae:	20c0      	movs	r0, #192	; 0xc0
    3bb0:	0380      	lsls	r0, r0, #14
    3bb2:	4e24      	ldr	r6, [pc, #144]	; (3c44 <lcd_init_seq+0x128>)
    3bb4:	47b0      	blx	r6
    lcd_wr32(RAM_DL+4, COLOR_RGB(255,255,255));
    3bb6:	4924      	ldr	r1, [pc, #144]	; (3c48 <lcd_init_seq+0x12c>)
    3bb8:	4824      	ldr	r0, [pc, #144]	; (3c4c <lcd_init_seq+0x130>)
    3bba:	47b0      	blx	r6
    lcd_wr32(RAM_DL+8, CLEAR(1,1,1));
    3bbc:	4924      	ldr	r1, [pc, #144]	; (3c50 <lcd_init_seq+0x134>)
    3bbe:	4825      	ldr	r0, [pc, #148]	; (3c54 <lcd_init_seq+0x138>)
    3bc0:	47b0      	blx	r6
    lcd_wr32(RAM_DL+12, DISPLAY());
    3bc2:	2100      	movs	r1, #0
    3bc4:	4824      	ldr	r0, [pc, #144]	; (3c58 <lcd_init_seq+0x13c>)
    3bc6:	47b0      	blx	r6

    // display list swap
    lcd_wr8(REG_DLSWAP,DLSWAP_FRAME);
    3bc8:	2102      	movs	r1, #2
    3bca:	4824      	ldr	r0, [pc, #144]	; (3c5c <lcd_init_seq+0x140>)
    3bcc:	47a8      	blx	r5

    // set the pin drive strength
    lcd_wr16(REG_GPIOX_DIR, 0xffff);
    3bce:	4e24      	ldr	r6, [pc, #144]	; (3c60 <lcd_init_seq+0x144>)
    3bd0:	0031      	movs	r1, r6
    3bd2:	4824      	ldr	r0, [pc, #144]	; (3c64 <lcd_init_seq+0x148>)
    3bd4:	47a0      	blx	r4
    lcd_wr16(REG_GPIOX, 0xffff);
    3bd6:	0031      	movs	r1, r6
    3bd8:	4823      	ldr	r0, [pc, #140]	; (3c68 <lcd_init_seq+0x14c>)
    3bda:	47a0      	blx	r4

    // enable the clock
    lcd_wr8(REG_PCLK,2);
    3bdc:	2102      	movs	r1, #2
    3bde:	4823      	ldr	r0, [pc, #140]	; (3c6c <lcd_init_seq+0x150>)
    3be0:	47a8      	blx	r5
}
    3be2:	bd70      	pop	{r4, r5, r6, pc}
    3be4:	00003afd 	.word	0x00003afd
    3be8:	00000151 	.word	0x00000151
    3bec:	00003b0d 	.word	0x00003b0d
    3bf0:	00003aad 	.word	0x00003aad
    3bf4:	00302000 	.word	0x00302000
    3bf8:	000039d9 	.word	0x000039d9
    3bfc:	00302034 	.word	0x00302034
    3c00:	00003a51 	.word	0x00003a51
    3c04:	0030202c 	.word	0x0030202c
    3c08:	00302030 	.word	0x00302030
    3c0c:	00302038 	.word	0x00302038
    3c10:	0030203c 	.word	0x0030203c
    3c14:	00302048 	.word	0x00302048
    3c18:	0000020d 	.word	0x0000020d
    3c1c:	00302040 	.word	0x00302040
    3c20:	00302044 	.word	0x00302044
    3c24:	0030204c 	.word	0x0030204c
    3c28:	00302050 	.word	0x00302050
    3c2c:	00302064 	.word	0x00302064
    3c30:	00003a21 	.word	0x00003a21
    3c34:	0030206c 	.word	0x0030206c
    3c38:	00302068 	.word	0x00302068
    3c3c:	00302060 	.word	0x00302060
    3c40:	02010101 	.word	0x02010101
    3c44:	00003a81 	.word	0x00003a81
    3c48:	04ffffff 	.word	0x04ffffff
    3c4c:	00300004 	.word	0x00300004
    3c50:	26000007 	.word	0x26000007
    3c54:	00300008 	.word	0x00300008
    3c58:	0030000c 	.word	0x0030000c
    3c5c:	00302054 	.word	0x00302054
    3c60:	0000ffff 	.word	0x0000ffff
    3c64:	00302098 	.word	0x00302098
    3c68:	0030209c 	.word	0x0030209c
    3c6c:	00302070 	.word	0x00302070

00003c70 <lcd_set_ft_host_ptr>:
 * Description      : Sets the sim_system_glcd_software global pointer for the
 *  FTDI context struct.
 */
void lcd_set_ft_host_ptr(Ft_Gpu_Hal_Context_t* phost)
{
    lcd_firmware_phost = phost;
    3c70:	4b01      	ldr	r3, [pc, #4]	; (3c78 <lcd_set_ft_host_ptr+0x8>)
    3c72:	6018      	str	r0, [r3, #0]
}
    3c74:	4770      	bx	lr
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	2000015c 	.word	0x2000015c

00003c7c <lcd_interrupt_callback>:
 * Return Values(s) : void
 * Description      : Callback for the LCD interrupt. Reads the LCD's flag
 *  register.
 */
void lcd_interrupt_callback(void)
{
    3c7c:	b510      	push	{r4, lr}
    lcd_int_flags = lcd_rd8(REG_INT_FLAGS);
    3c7e:	4803      	ldr	r0, [pc, #12]	; (3c8c <lcd_interrupt_callback+0x10>)
    3c80:	4b03      	ldr	r3, [pc, #12]	; (3c90 <lcd_interrupt_callback+0x14>)
    3c82:	4798      	blx	r3
    3c84:	4b03      	ldr	r3, [pc, #12]	; (3c94 <lcd_interrupt_callback+0x18>)
    3c86:	7018      	strb	r0, [r3, #0]
}
    3c88:	bd10      	pop	{r4, pc}
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	003020a8 	.word	0x003020a8
    3c90:	000039a9 	.word	0x000039a9
    3c94:	2000000a 	.word	0x2000000a

00003c98 <led_tx_on>:
		port_base->OUTCLR.reg = pin_mask;
    3c98:	2280      	movs	r2, #128	; 0x80
    3c9a:	0512      	lsls	r2, r2, #20
    3c9c:	4b01      	ldr	r3, [pc, #4]	; (3ca4 <led_tx_on+0xc>)
    3c9e:	615a      	str	r2, [r3, #20]
 * @brief Turn on Transmit LED
 */
void led_tx_on(void)
{
    port_pin_set_output_level(PIN_PA27, false);
}
    3ca0:	4770      	bx	lr
    3ca2:	46c0      	nop			; (mov r8, r8)
    3ca4:	41004400 	.word	0x41004400

00003ca8 <led_tx_off>:
		port_base->OUTSET.reg = pin_mask;
    3ca8:	2280      	movs	r2, #128	; 0x80
    3caa:	0512      	lsls	r2, r2, #20
    3cac:	4b01      	ldr	r3, [pc, #4]	; (3cb4 <led_tx_off+0xc>)
    3cae:	619a      	str	r2, [r3, #24]
 * @brief Turn off Transmit LED
 */
void led_tx_off(void)
{
    port_pin_set_output_level(PIN_PA27, true);
}
    3cb0:	4770      	bx	lr
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	41004400 	.word	0x41004400

00003cb8 <SysTick_Handler>:
 * Handles the interrupt from the timer
 */
void SysTick_Handler(void)
{
    /* increment the tick count */
    Millisecond_Counter++;
    3cb8:	4a02      	ldr	r2, [pc, #8]	; (3cc4 <SysTick_Handler+0xc>)
    3cba:	6813      	ldr	r3, [r2, #0]
    3cbc:	3301      	adds	r3, #1
    3cbe:	6013      	str	r3, [r2, #0]
}
    3cc0:	4770      	bx	lr
    3cc2:	46c0      	nop			; (mov r8, r8)
    3cc4:	20000160 	.word	0x20000160

00003cc8 <mstimer_now>:
 * The system time is the time elapsed since OS was started.
 * @return milliseconds since OS was started
 */
unsigned long mstimer_now(void)
{
    return Millisecond_Counter;
    3cc8:	4b01      	ldr	r3, [pc, #4]	; (3cd0 <mstimer_now+0x8>)
    3cca:	6818      	ldr	r0, [r3, #0]
}
    3ccc:	4770      	bx	lr
    3cce:	46c0      	nop			; (mov r8, r8)
    3cd0:	20000160 	.word	0x20000160

00003cd4 <mstimer_init>:

/**
 * @brief Initialization for timer
 */
void mstimer_init(void)
{
    3cd4:	b510      	push	{r4, lr}
    /* Setup SysTick Timer for 1ms interrupts  */
    if (SysTick_Config(SystemCoreClock / 1000)) {
    3cd6:	4b0f      	ldr	r3, [pc, #60]	; (3d14 <mstimer_init+0x40>)
    3cd8:	6818      	ldr	r0, [r3, #0]
    3cda:	21fa      	movs	r1, #250	; 0xfa
    3cdc:	0089      	lsls	r1, r1, #2
    3cde:	4b0e      	ldr	r3, [pc, #56]	; (3d18 <mstimer_init+0x44>)
    3ce0:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    3ce2:	3801      	subs	r0, #1
    3ce4:	4b0d      	ldr	r3, [pc, #52]	; (3d1c <mstimer_init+0x48>)
    3ce6:	4298      	cmp	r0, r3
    3ce8:	d811      	bhi.n	3d0e <mstimer_init+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3cea:	4a0d      	ldr	r2, [pc, #52]	; (3d20 <mstimer_init+0x4c>)
    3cec:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3cee:	480d      	ldr	r0, [pc, #52]	; (3d24 <mstimer_init+0x50>)
    3cf0:	6a03      	ldr	r3, [r0, #32]
    3cf2:	021b      	lsls	r3, r3, #8
    3cf4:	0a1b      	lsrs	r3, r3, #8
    3cf6:	21c0      	movs	r1, #192	; 0xc0
    3cf8:	0609      	lsls	r1, r1, #24
    3cfa:	430b      	orrs	r3, r1
    3cfc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3cfe:	2300      	movs	r3, #0
    3d00:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3d02:	3307      	adds	r3, #7
    3d04:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    3d06:	2300      	movs	r3, #0
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d002      	beq.n	3d12 <mstimer_init+0x3e>
    3d0c:	e7fe      	b.n	3d0c <mstimer_init+0x38>
    return (1UL);                                                   /* Reload value impossible */
    3d0e:	2301      	movs	r3, #1
    3d10:	e7fa      	b.n	3d08 <mstimer_init+0x34>
        /* Capture error */
        while (1)
            ;
    }
    NVIC_EnableIRQ(SysTick_IRQn);
}
    3d12:	bd10      	pop	{r4, pc}
    3d14:	2000000c 	.word	0x2000000c
    3d18:	00005319 	.word	0x00005319
    3d1c:	00ffffff 	.word	0x00ffffff
    3d20:	e000e010 	.word	0xe000e010
    3d24:	e000ed00 	.word	0xe000ed00

00003d28 <rs485_clock_init>:

/**
 * Initialize the USART SERCOM module clock
 */
static void rs485_clock_init(void)
{
    3d28:	b500      	push	{lr}
    3d2a:	b083      	sub	sp, #12
			PM->APBCMASK.reg |= mask;
    3d2c:	4a07      	ldr	r2, [pc, #28]	; (3d4c <rs485_clock_init+0x24>)
    3d2e:	6a13      	ldr	r3, [r2, #32]
    3d30:	2120      	movs	r1, #32
    3d32:	430b      	orrs	r3, r1
    3d34:	6213      	str	r3, [r2, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3d36:	a901      	add	r1, sp, #4
    3d38:	2300      	movs	r3, #0
    3d3a:	700b      	strb	r3, [r1, #0]
    system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_SERCOM3);
    /* Turn on Generic clock for USART */
    system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    /*Default is generator 0. Other wise need to configure like below */
    /* gclk_chan_conf.source_generator = GCLK_GENERATOR_1; */
    system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3d3c:	2017      	movs	r0, #23
    3d3e:	4b04      	ldr	r3, [pc, #16]	; (3d50 <rs485_clock_init+0x28>)
    3d40:	4798      	blx	r3
    system_gclk_chan_enable(gclk_index);
    3d42:	2017      	movs	r0, #23
    3d44:	4b03      	ldr	r3, [pc, #12]	; (3d54 <rs485_clock_init+0x2c>)
    3d46:	4798      	blx	r3
}
    3d48:	b003      	add	sp, #12
    3d4a:	bd00      	pop	{pc}
    3d4c:	40000400 	.word	0x40000400
    3d50:	00004c79 	.word	0x00004c79
    3d54:	00004bf1 	.word	0x00004bf1

00003d58 <rs485_pin_init>:

/**
 * Initialize the RTS pin
 */
static void rs485_pin_init(void)
{
    3d58:	b570      	push	{r4, r5, r6, lr}
	config->powersave  = false;
    3d5a:	4c0b      	ldr	r4, [pc, #44]	; (3d88 <rs485_pin_init+0x30>)
    3d5c:	2300      	movs	r3, #0
    3d5e:	70a3      	strb	r3, [r4, #2]
	//Configure PIN_A24 as DE and PIN_A25 as /RE
    port_get_config_defaults(&RS485_Port_Config);
    RS485_Port_Config.direction = PORT_PIN_DIR_OUTPUT;
    3d60:	2601      	movs	r6, #1
    3d62:	7026      	strb	r6, [r4, #0]
	
    RS485_Port_Config.input_pull = PORT_PIN_PULL_DOWN;
    3d64:	3302      	adds	r3, #2
    3d66:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(RS485_DE, &RS485_Port_Config);
    3d68:	0021      	movs	r1, r4
    3d6a:	2018      	movs	r0, #24
    3d6c:	4d07      	ldr	r5, [pc, #28]	; (3d8c <rs485_pin_init+0x34>)
    3d6e:	47a8      	blx	r5
	
	RS485_Port_Config.input_pull = PORT_PIN_PULL_UP;
    3d70:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(RS485_RE, &RS485_Port_Config);
    3d72:	0021      	movs	r1, r4
    3d74:	2019      	movs	r0, #25
    3d76:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    3d78:	4b05      	ldr	r3, [pc, #20]	; (3d90 <rs485_pin_init+0x38>)
    3d7a:	2280      	movs	r2, #128	; 0x80
    3d7c:	0492      	lsls	r2, r2, #18
    3d7e:	615a      	str	r2, [r3, #20]
    3d80:	2280      	movs	r2, #128	; 0x80
    3d82:	0452      	lsls	r2, r2, #17
    3d84:	615a      	str	r2, [r3, #20]

	
	
    port_pin_set_output_level(RS485_RE, false);
	port_pin_set_output_level(RS485_DE, false);
}
    3d86:	bd70      	pop	{r4, r5, r6, pc}
    3d88:	20000168 	.word	0x20000168
    3d8c:	00004681 	.word	0x00004681
    3d90:	41004400 	.word	0x41004400

00003d94 <usart_read_callback>:
{
    3d94:	b510      	push	{r4, lr}
    if (!Transmitting) {
    3d96:	4b0a      	ldr	r3, [pc, #40]	; (3dc0 <usart_read_callback+0x2c>)
    3d98:	781b      	ldrb	r3, [r3, #0]
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	d004      	beq.n	3da8 <usart_read_callback+0x14>
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    3d9e:	4909      	ldr	r1, [pc, #36]	; (3dc4 <usart_read_callback+0x30>)
    3da0:	4809      	ldr	r0, [pc, #36]	; (3dc8 <usart_read_callback+0x34>)
    3da2:	4b0a      	ldr	r3, [pc, #40]	; (3dcc <usart_read_callback+0x38>)
    3da4:	4798      	blx	r3
}
    3da6:	bd10      	pop	{r4, pc}
        FIFO_Put(&Receive_Queue, rx_buffer[0]);
    3da8:	4b06      	ldr	r3, [pc, #24]	; (3dc4 <usart_read_callback+0x30>)
    3daa:	8819      	ldrh	r1, [r3, #0]
    3dac:	b2c9      	uxtb	r1, r1
    3dae:	4808      	ldr	r0, [pc, #32]	; (3dd0 <usart_read_callback+0x3c>)
    3db0:	4b08      	ldr	r3, [pc, #32]	; (3dd4 <usart_read_callback+0x40>)
    3db2:	4798      	blx	r3
        RS485_Receive_Bytes++;
    3db4:	4a08      	ldr	r2, [pc, #32]	; (3dd8 <usart_read_callback+0x44>)
    3db6:	6813      	ldr	r3, [r2, #0]
    3db8:	3301      	adds	r3, #1
    3dba:	6013      	str	r3, [r2, #0]
    3dbc:	e7ef      	b.n	3d9e <usart_read_callback+0xa>
    3dbe:	46c0      	nop			; (mov r8, r8)
    3dc0:	200003f4 	.word	0x200003f4
    3dc4:	200009e8 	.word	0x200009e8
    3dc8:	200001b0 	.word	0x200001b0
    3dcc:	000043e9 	.word	0x000043e9
    3dd0:	200001e4 	.word	0x200001e4
    3dd4:	00001561 	.word	0x00001561
    3dd8:	2000016c 	.word	0x2000016c

00003ddc <rs485_usart_init>:

/**
 * Initialize the USART SERCOM module for RS485
 */
static void rs485_usart_init(void)
{
    3ddc:	b570      	push	{r4, r5, r6, lr}
    enum status_code status;

    /* Disable this module since ASF expects it to be disabled. */
    RS485_USART->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3dde:	4935      	ldr	r1, [pc, #212]	; (3eb4 <rs485_usart_init+0xd8>)
    3de0:	680b      	ldr	r3, [r1, #0]
    3de2:	2202      	movs	r2, #2
    3de4:	4393      	bics	r3, r2
    3de6:	600b      	str	r3, [r1, #0]
	config->data_order       = USART_DATAORDER_LSB;
    3de8:	4a33      	ldr	r2, [pc, #204]	; (3eb8 <rs485_usart_init+0xdc>)
    3dea:	2380      	movs	r3, #128	; 0x80
    3dec:	05db      	lsls	r3, r3, #23
    3dee:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3df0:	2300      	movs	r3, #0
    3df2:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    3df4:	20ff      	movs	r0, #255	; 0xff
    3df6:	8110      	strh	r0, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3df8:	2000      	movs	r0, #0
    3dfa:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3dfc:	72d3      	strb	r3, [r2, #11]
	config->receiver_enable  = true;
    3dfe:	2401      	movs	r4, #1
    3e00:	2524      	movs	r5, #36	; 0x24
    3e02:	5554      	strb	r4, [r2, r5]
	config->transmitter_enable = true;
    3e04:	3501      	adds	r5, #1
    3e06:	5554      	strb	r4, [r2, r5]
	config->clock_polarity_inverted = false;
    3e08:	3425      	adds	r4, #37	; 0x25
    3e0a:	5513      	strb	r3, [r2, r4]
	config->use_external_clock = false;
    3e0c:	3401      	adds	r4, #1
    3e0e:	5513      	strb	r3, [r2, r4]
	config->ext_clock_freq   = 0;
    3e10:	6293      	str	r3, [r2, #40]	; 0x28
	config->run_in_standby   = false;
    3e12:	3405      	adds	r4, #5
    3e14:	5513      	strb	r3, [r2, r4]
	config->generator_source = GCLK_GENERATOR_0;
    3e16:	3401      	adds	r4, #1
    3e18:	5513      	strb	r3, [r2, r4]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3e1a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3e1c:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
    3e1e:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
    3e20:	7610      	strb	r0, [r2, #24]
	config->start_frame_detection_enable            = false;
    3e22:	7710      	strb	r0, [r2, #28]
	config->encoding_format_enable                  = false;
    3e24:	7650      	strb	r0, [r2, #25]
	config->receive_pulse_length                    = 19;
    3e26:	2313      	movs	r3, #19
    3e28:	7693      	strb	r3, [r2, #26]
	config->collision_detection_enable              = false;
    3e2a:	7750      	strb	r0, [r2, #29]
    // Get default settings
    usart_get_config_defaults(&RS485_USART_Config);
    RS485_USART_Config.baudrate = Baud_Rate;
    3e2c:	4b23      	ldr	r3, [pc, #140]	; (3ebc <rs485_usart_init+0xe0>)
    3e2e:	681b      	ldr	r3, [r3, #0]
    3e30:	6213      	str	r3, [r2, #32]
    RS485_USART_Config.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
    3e32:	2390      	movs	r3, #144	; 0x90
    3e34:	035b      	lsls	r3, r3, #13
    3e36:	60d3      	str	r3, [r2, #12]
    RS485_USART_Config.pinmux_pad0 = RS485_TX;
    3e38:	4b21      	ldr	r3, [pc, #132]	; (3ec0 <rs485_usart_init+0xe4>)
    3e3a:	6313      	str	r3, [r2, #48]	; 0x30
    RS485_USART_Config.pinmux_pad1 = RS485_RX;
    3e3c:	4b21      	ldr	r3, [pc, #132]	; (3ec4 <rs485_usart_init+0xe8>)
    3e3e:	6353      	str	r3, [r2, #52]	; 0x34
    RS485_USART_Config.pinmux_pad2 = PINMUX_UNUSED;
    3e40:	2301      	movs	r3, #1
    3e42:	425b      	negs	r3, r3
    3e44:	6393      	str	r3, [r2, #56]	; 0x38
    RS485_USART_Config.pinmux_pad3 = PINMUX_UNUSED;
    3e46:	63d3      	str	r3, [r2, #60]	; 0x3c
    status = usart_init(&RS485_USART_Module, RS485_USART, &RS485_USART_Config);
    3e48:	481f      	ldr	r0, [pc, #124]	; (3ec8 <rs485_usart_init+0xec>)
    3e4a:	4b20      	ldr	r3, [pc, #128]	; (3ecc <rs485_usart_init+0xf0>)
    3e4c:	4798      	blx	r3
    while (status != STATUS_OK) {
    3e4e:	2800      	cmp	r0, #0
    3e50:	d1fd      	bne.n	3e4e <rs485_usart_init+0x72>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e52:	4b1d      	ldr	r3, [pc, #116]	; (3ec8 <rs485_usart_init+0xec>)
    3e54:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3e56:	0020      	movs	r0, r4
    3e58:	4b1d      	ldr	r3, [pc, #116]	; (3ed0 <rs485_usart_init+0xf4>)
    3e5a:	4798      	blx	r3
    3e5c:	231f      	movs	r3, #31
    3e5e:	4018      	ands	r0, r3
    3e60:	3b1e      	subs	r3, #30
    3e62:	4083      	lsls	r3, r0
    3e64:	4a1b      	ldr	r2, [pc, #108]	; (3ed4 <rs485_usart_init+0xf8>)
    3e66:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e68:	4b17      	ldr	r3, [pc, #92]	; (3ec8 <rs485_usart_init+0xec>)
    3e6a:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3e6c:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d1fa      	bne.n	3e68 <rs485_usart_init+0x8c>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3e72:	6823      	ldr	r3, [r4, #0]
    3e74:	2202      	movs	r2, #2
    3e76:	4313      	orrs	r3, r2
    3e78:	6023      	str	r3, [r4, #0]
        /* hardware not initialized correctly - figure out why! */
    }
    usart_enable(&RS485_USART_Module);
#ifdef USART_CALLBACK_MODE
    usart_register_callback(&RS485_USART_Module, usart_read_callback,
    3e7a:	4c13      	ldr	r4, [pc, #76]	; (3ec8 <rs485_usart_init+0xec>)
    3e7c:	3a01      	subs	r2, #1
    3e7e:	4916      	ldr	r1, [pc, #88]	; (3ed8 <rs485_usart_init+0xfc>)
    3e80:	0020      	movs	r0, r4
    3e82:	4e16      	ldr	r6, [pc, #88]	; (3edc <rs485_usart_init+0x100>)
    3e84:	47b0      	blx	r6
    3e86:	2531      	movs	r5, #49	; 0x31
    3e88:	5d63      	ldrb	r3, [r4, r5]
    3e8a:	2202      	movs	r2, #2
    3e8c:	4313      	orrs	r3, r2
    3e8e:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_RECEIVED);
    usart_enable_callback(&RS485_USART_Module, USART_CALLBACK_BUFFER_RECEIVED);
    usart_register_callback(&RS485_USART_Module, usart_write_callback,
    3e90:	2200      	movs	r2, #0
    3e92:	4913      	ldr	r1, [pc, #76]	; (3ee0 <rs485_usart_init+0x104>)
    3e94:	0020      	movs	r0, r4
    3e96:	47b0      	blx	r6
    3e98:	5d63      	ldrb	r3, [r4, r5]
    3e9a:	2201      	movs	r2, #1
    3e9c:	4313      	orrs	r3, r2
    3e9e:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(
        &RS485_USART_Module, USART_CALLBACK_BUFFER_TRANSMITTED);
    system_interrupt_set_priority(
    3ea0:	2100      	movs	r1, #0
    3ea2:	200c      	movs	r0, #12
    3ea4:	4b0f      	ldr	r3, [pc, #60]	; (3ee4 <rs485_usart_init+0x108>)
    3ea6:	4798      	blx	r3
        SYSTEM_INTERRUPT_MODULE_SERCOM3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    /* initial callback call to prepare to begin receiving data */
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    3ea8:	490f      	ldr	r1, [pc, #60]	; (3ee8 <rs485_usart_init+0x10c>)
    3eaa:	0020      	movs	r0, r4
    3eac:	4b0f      	ldr	r3, [pc, #60]	; (3eec <rs485_usart_init+0x110>)
    3eae:	4798      	blx	r3
#endif    
}
    3eb0:	bd70      	pop	{r4, r5, r6, pc}
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	42001400 	.word	0x42001400
    3eb8:	20000170 	.word	0x20000170
    3ebc:	20000164 	.word	0x20000164
    3ec0:	00160002 	.word	0x00160002
    3ec4:	00170002 	.word	0x00170002
    3ec8:	200001b0 	.word	0x200001b0
    3ecc:	00004239 	.word	0x00004239
    3ed0:	000045fd 	.word	0x000045fd
    3ed4:	e000e100 	.word	0xe000e100
    3ed8:	00003d95 	.word	0x00003d95
    3edc:	000043d1 	.word	0x000043d1
    3ee0:	00003f3d 	.word	0x00003f3d
    3ee4:	00004cc9 	.word	0x00004cc9
    3ee8:	200009e8 	.word	0x200009e8
    3eec:	000043e9 	.word	0x000043e9

00003ef0 <rs485_rts_enable>:
{
    3ef0:	b510      	push	{r4, lr}
    if (enable) {
    3ef2:	2800      	cmp	r0, #0
    3ef4:	d10c      	bne.n	3f10 <rs485_rts_enable+0x20>
    3ef6:	4b0d      	ldr	r3, [pc, #52]	; (3f2c <rs485_rts_enable+0x3c>)
    3ef8:	2280      	movs	r2, #128	; 0x80
    3efa:	0492      	lsls	r2, r2, #18
    3efc:	615a      	str	r2, [r3, #20]
    3efe:	2280      	movs	r2, #128	; 0x80
    3f00:	0452      	lsls	r2, r2, #17
    3f02:	615a      	str	r2, [r3, #20]
        led_tx_off();
    3f04:	4b0a      	ldr	r3, [pc, #40]	; (3f30 <rs485_rts_enable+0x40>)
    3f06:	4798      	blx	r3
        Transmitting = false;
    3f08:	2200      	movs	r2, #0
    3f0a:	4b0a      	ldr	r3, [pc, #40]	; (3f34 <rs485_rts_enable+0x44>)
    3f0c:	701a      	strb	r2, [r3, #0]
}
    3f0e:	bd10      	pop	{r4, pc}
        Transmitting = true;
    3f10:	2201      	movs	r2, #1
    3f12:	4b08      	ldr	r3, [pc, #32]	; (3f34 <rs485_rts_enable+0x44>)
    3f14:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    3f16:	4b05      	ldr	r3, [pc, #20]	; (3f2c <rs485_rts_enable+0x3c>)
    3f18:	2280      	movs	r2, #128	; 0x80
    3f1a:	0492      	lsls	r2, r2, #18
    3f1c:	619a      	str	r2, [r3, #24]
    3f1e:	2280      	movs	r2, #128	; 0x80
    3f20:	0452      	lsls	r2, r2, #17
    3f22:	619a      	str	r2, [r3, #24]
        led_tx_on();
    3f24:	4b04      	ldr	r3, [pc, #16]	; (3f38 <rs485_rts_enable+0x48>)
    3f26:	4798      	blx	r3
    3f28:	e7f1      	b.n	3f0e <rs485_rts_enable+0x1e>
    3f2a:	46c0      	nop			; (mov r8, r8)
    3f2c:	41004400 	.word	0x41004400
    3f30:	00003ca9 	.word	0x00003ca9
    3f34:	200003f4 	.word	0x200003f4
    3f38:	00003c99 	.word	0x00003c99

00003f3c <usart_write_callback>:
{
    3f3c:	b510      	push	{r4, lr}
    rs485_rts_enable(false);
    3f3e:	2000      	movs	r0, #0
    3f40:	4b01      	ldr	r3, [pc, #4]	; (3f48 <usart_write_callback+0xc>)
    3f42:	4798      	blx	r3
}
    3f44:	bd10      	pop	{r4, pc}
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	00003ef1 	.word	0x00003ef1

00003f4c <rs485_baud_rate_set>:
    switch (baudrate) {
    3f4c:	2396      	movs	r3, #150	; 0x96
    3f4e:	021b      	lsls	r3, r3, #8
    3f50:	4298      	cmp	r0, r3
    3f52:	d103      	bne.n	3f5c <rs485_baud_rate_set+0x10>
            Baud_Rate = baudrate;
    3f54:	4b02      	ldr	r3, [pc, #8]	; (3f60 <rs485_baud_rate_set+0x14>)
    3f56:	6018      	str	r0, [r3, #0]
    bool valid = true;
    3f58:	2001      	movs	r0, #1
}
    3f5a:	4770      	bx	lr
            valid = false;
    3f5c:	2000      	movs	r0, #0
    3f5e:	e7fc      	b.n	3f5a <rs485_baud_rate_set+0xe>
    3f60:	20000164 	.word	0x20000164

00003f64 <rs485_init>:

/* SERCOM3 UART initialization */
void rs485_init(void)
{
    3f64:	b510      	push	{r4, lr}
    /* initialize the Rx and Tx byte queues */
    FIFO_Init(&Receive_Queue, &Receive_Queue_Data[0],
    3f66:	2280      	movs	r2, #128	; 0x80
    3f68:	0092      	lsls	r2, r2, #2
    3f6a:	4905      	ldr	r1, [pc, #20]	; (3f80 <rs485_init+0x1c>)
    3f6c:	4805      	ldr	r0, [pc, #20]	; (3f84 <rs485_init+0x20>)
    3f6e:	4b06      	ldr	r3, [pc, #24]	; (3f88 <rs485_init+0x24>)
    3f70:	4798      	blx	r3
        (unsigned)sizeof(Receive_Queue_Data));
    rs485_clock_init();
    3f72:	4b06      	ldr	r3, [pc, #24]	; (3f8c <rs485_init+0x28>)
    3f74:	4798      	blx	r3
    rs485_pin_init();
    3f76:	4b06      	ldr	r3, [pc, #24]	; (3f90 <rs485_init+0x2c>)
    3f78:	4798      	blx	r3
    rs485_usart_init();
    3f7a:	4b06      	ldr	r3, [pc, #24]	; (3f94 <rs485_init+0x30>)
    3f7c:	4798      	blx	r3
}
    3f7e:	bd10      	pop	{r4, pc}
    3f80:	200001f4 	.word	0x200001f4
    3f84:	200001e4 	.word	0x200001e4
    3f88:	0000159d 	.word	0x0000159d
    3f8c:	00003d29 	.word	0x00003d29
    3f90:	00003d59 	.word	0x00003d59
    3f94:	00003ddd 	.word	0x00003ddd

00003f98 <WDT_Handler>:
    3f98:	b510      	push	{r4, lr}
    3f9a:	2201      	movs	r2, #1
    3f9c:	4b03      	ldr	r3, [pc, #12]	; (3fac <WDT_Handler+0x14>)
    3f9e:	719a      	strb	r2, [r3, #6]
    3fa0:	4b03      	ldr	r3, [pc, #12]	; (3fb0 <WDT_Handler+0x18>)
    3fa2:	681b      	ldr	r3, [r3, #0]
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	d000      	beq.n	3faa <WDT_Handler+0x12>
    3fa8:	4798      	blx	r3
    3faa:	bd10      	pop	{r4, pc}
    3fac:	40001000 	.word	0x40001000
    3fb0:	200009f0 	.word	0x200009f0

00003fb4 <_tc_interrupt_handler>:
    3fb4:	b570      	push	{r4, r5, r6, lr}
    3fb6:	0080      	lsls	r0, r0, #2
    3fb8:	4b16      	ldr	r3, [pc, #88]	; (4014 <_tc_interrupt_handler+0x60>)
    3fba:	58c5      	ldr	r5, [r0, r3]
    3fbc:	682b      	ldr	r3, [r5, #0]
    3fbe:	7b9c      	ldrb	r4, [r3, #14]
    3fc0:	7e2a      	ldrb	r2, [r5, #24]
    3fc2:	7e6b      	ldrb	r3, [r5, #25]
    3fc4:	4014      	ands	r4, r2
    3fc6:	401c      	ands	r4, r3
    3fc8:	07e3      	lsls	r3, r4, #31
    3fca:	d406      	bmi.n	3fda <_tc_interrupt_handler+0x26>
    3fcc:	07a3      	lsls	r3, r4, #30
    3fce:	d40b      	bmi.n	3fe8 <_tc_interrupt_handler+0x34>
    3fd0:	06e3      	lsls	r3, r4, #27
    3fd2:	d410      	bmi.n	3ff6 <_tc_interrupt_handler+0x42>
    3fd4:	06a3      	lsls	r3, r4, #26
    3fd6:	d415      	bmi.n	4004 <_tc_interrupt_handler+0x50>
    3fd8:	bd70      	pop	{r4, r5, r6, pc}
    3fda:	0028      	movs	r0, r5
    3fdc:	68ab      	ldr	r3, [r5, #8]
    3fde:	4798      	blx	r3
    3fe0:	2301      	movs	r3, #1
    3fe2:	682a      	ldr	r2, [r5, #0]
    3fe4:	7393      	strb	r3, [r2, #14]
    3fe6:	e7f1      	b.n	3fcc <_tc_interrupt_handler+0x18>
    3fe8:	0028      	movs	r0, r5
    3fea:	68eb      	ldr	r3, [r5, #12]
    3fec:	4798      	blx	r3
    3fee:	2302      	movs	r3, #2
    3ff0:	682a      	ldr	r2, [r5, #0]
    3ff2:	7393      	strb	r3, [r2, #14]
    3ff4:	e7ec      	b.n	3fd0 <_tc_interrupt_handler+0x1c>
    3ff6:	0028      	movs	r0, r5
    3ff8:	692b      	ldr	r3, [r5, #16]
    3ffa:	4798      	blx	r3
    3ffc:	2310      	movs	r3, #16
    3ffe:	682a      	ldr	r2, [r5, #0]
    4000:	7393      	strb	r3, [r2, #14]
    4002:	e7e7      	b.n	3fd4 <_tc_interrupt_handler+0x20>
    4004:	0028      	movs	r0, r5
    4006:	696b      	ldr	r3, [r5, #20]
    4008:	4798      	blx	r3
    400a:	682b      	ldr	r3, [r5, #0]
    400c:	2220      	movs	r2, #32
    400e:	739a      	strb	r2, [r3, #14]
    4010:	e7e2      	b.n	3fd8 <_tc_interrupt_handler+0x24>
    4012:	46c0      	nop			; (mov r8, r8)
    4014:	200009f4 	.word	0x200009f4

00004018 <TC3_Handler>:
    4018:	b510      	push	{r4, lr}
    401a:	2000      	movs	r0, #0
    401c:	4b01      	ldr	r3, [pc, #4]	; (4024 <TC3_Handler+0xc>)
    401e:	4798      	blx	r3
    4020:	bd10      	pop	{r4, pc}
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	00003fb5 	.word	0x00003fb5

00004028 <TC4_Handler>:
    4028:	b510      	push	{r4, lr}
    402a:	2001      	movs	r0, #1
    402c:	4b01      	ldr	r3, [pc, #4]	; (4034 <TC4_Handler+0xc>)
    402e:	4798      	blx	r3
    4030:	bd10      	pop	{r4, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	00003fb5 	.word	0x00003fb5

00004038 <TC5_Handler>:
    4038:	b510      	push	{r4, lr}
    403a:	2002      	movs	r0, #2
    403c:	4b01      	ldr	r3, [pc, #4]	; (4044 <TC5_Handler+0xc>)
    403e:	4798      	blx	r3
    4040:	bd10      	pop	{r4, pc}
    4042:	46c0      	nop			; (mov r8, r8)
    4044:	00003fb5 	.word	0x00003fb5

00004048 <TC6_Handler>:
    4048:	b510      	push	{r4, lr}
    404a:	2003      	movs	r0, #3
    404c:	4b01      	ldr	r3, [pc, #4]	; (4054 <TC6_Handler+0xc>)
    404e:	4798      	blx	r3
    4050:	bd10      	pop	{r4, pc}
    4052:	46c0      	nop			; (mov r8, r8)
    4054:	00003fb5 	.word	0x00003fb5

00004058 <TC7_Handler>:
    4058:	b510      	push	{r4, lr}
    405a:	2004      	movs	r0, #4
    405c:	4b01      	ldr	r3, [pc, #4]	; (4064 <TC7_Handler+0xc>)
    405e:	4798      	blx	r3
    4060:	bd10      	pop	{r4, pc}
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	00003fb5 	.word	0x00003fb5

00004068 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4068:	b5f0      	push	{r4, r5, r6, r7, lr}
    406a:	46de      	mov	lr, fp
    406c:	4657      	mov	r7, sl
    406e:	464e      	mov	r6, r9
    4070:	4645      	mov	r5, r8
    4072:	b5e0      	push	{r5, r6, r7, lr}
    4074:	b087      	sub	sp, #28
    4076:	0005      	movs	r5, r0
    4078:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    407a:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    407c:	0030      	movs	r0, r6
    407e:	4b69      	ldr	r3, [pc, #420]	; (4224 <_usart_set_config+0x1bc>)
    4080:	4798      	blx	r3
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4082:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    4084:	2200      	movs	r2, #0
    4086:	230e      	movs	r3, #14
    4088:	a902      	add	r1, sp, #8
    408a:	468c      	mov	ip, r1
    408c:	4463      	add	r3, ip
    408e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    4090:	8a22      	ldrh	r2, [r4, #16]
    4092:	2380      	movs	r3, #128	; 0x80
    4094:	01db      	lsls	r3, r3, #7
    4096:	429a      	cmp	r2, r3
    4098:	d03b      	beq.n	4112 <_usart_set_config+0xaa>
    409a:	d90c      	bls.n	40b6 <_usart_set_config+0x4e>
    409c:	23c0      	movs	r3, #192	; 0xc0
    409e:	01db      	lsls	r3, r3, #7
    40a0:	429a      	cmp	r2, r3
    40a2:	d031      	beq.n	4108 <_usart_set_config+0xa0>
    40a4:	2380      	movs	r3, #128	; 0x80
    40a6:	021b      	lsls	r3, r3, #8
    40a8:	429a      	cmp	r2, r3
    40aa:	d10d      	bne.n	40c8 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    40ac:	2303      	movs	r3, #3
    40ae:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    40b0:	2300      	movs	r3, #0
    40b2:	469a      	mov	sl, r3
			break;
    40b4:	e00c      	b.n	40d0 <_usart_set_config+0x68>
	switch (config->sample_rate) {
    40b6:	2380      	movs	r3, #128	; 0x80
    40b8:	019b      	lsls	r3, r3, #6
    40ba:	429a      	cmp	r2, r3
    40bc:	d104      	bne.n	40c8 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    40be:	2310      	movs	r3, #16
    40c0:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    40c2:	3b0f      	subs	r3, #15
    40c4:	469a      	mov	sl, r3
			break;
    40c6:	e003      	b.n	40d0 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    40c8:	2310      	movs	r3, #16
    40ca:	4698      	mov	r8, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    40cc:	2300      	movs	r3, #0
    40ce:	469a      	mov	sl, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    40d0:	6823      	ldr	r3, [r4, #0]
    40d2:	68e1      	ldr	r1, [r4, #12]
    40d4:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
    40d6:	6961      	ldr	r1, [r4, #20]
    40d8:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    40da:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    40dc:	7e22      	ldrb	r2, [r4, #24]
    40de:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    40e0:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    40e2:	2226      	movs	r2, #38	; 0x26
    40e4:	5ca2      	ldrb	r2, [r4, r2]
    40e6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    40e8:	4313      	orrs	r3, r2
    40ea:	4699      	mov	r9, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    40ec:	6862      	ldr	r2, [r4, #4]
    40ee:	9203      	str	r2, [sp, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    40f0:	2a00      	cmp	r2, #0
    40f2:	d021      	beq.n	4138 <_usart_set_config+0xd0>
    40f4:	2380      	movs	r3, #128	; 0x80
    40f6:	055b      	lsls	r3, r3, #21
    40f8:	429a      	cmp	r2, r3
    40fa:	d13e      	bne.n	417a <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    40fc:	2327      	movs	r3, #39	; 0x27
    40fe:	5ce3      	ldrb	r3, [r4, r3]
    4100:	2b00      	cmp	r3, #0
    4102:	d00b      	beq.n	411c <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
    4104:	2000      	movs	r0, #0
    4106:	e039      	b.n	417c <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4108:	2308      	movs	r3, #8
    410a:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    410c:	3b07      	subs	r3, #7
    410e:	469a      	mov	sl, r3
			break;
    4110:	e7de      	b.n	40d0 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4112:	2308      	movs	r3, #8
    4114:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4116:	2300      	movs	r3, #0
    4118:	469a      	mov	sl, r3
    411a:	e7d9      	b.n	40d0 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    411c:	6a23      	ldr	r3, [r4, #32]
    411e:	4698      	mov	r8, r3
    4120:	b2c0      	uxtb	r0, r0
    4122:	4b41      	ldr	r3, [pc, #260]	; (4228 <_usart_set_config+0x1c0>)
    4124:	4798      	blx	r3
    4126:	0001      	movs	r1, r0
    4128:	220e      	movs	r2, #14
    412a:	ab02      	add	r3, sp, #8
    412c:	469c      	mov	ip, r3
    412e:	4462      	add	r2, ip
    4130:	4640      	mov	r0, r8
    4132:	4b3e      	ldr	r3, [pc, #248]	; (422c <_usart_set_config+0x1c4>)
    4134:	4798      	blx	r3
    4136:	e021      	b.n	417c <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4138:	2327      	movs	r3, #39	; 0x27
    413a:	5ce3      	ldrb	r3, [r4, r3]
    413c:	2b00      	cmp	r3, #0
    413e:	d00b      	beq.n	4158 <_usart_set_config+0xf0>
				status_code =
    4140:	4643      	mov	r3, r8
    4142:	9300      	str	r3, [sp, #0]
    4144:	4653      	mov	r3, sl
    4146:	220e      	movs	r2, #14
    4148:	a902      	add	r1, sp, #8
    414a:	468c      	mov	ip, r1
    414c:	4462      	add	r2, ip
    414e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4150:	6a20      	ldr	r0, [r4, #32]
    4152:	4f37      	ldr	r7, [pc, #220]	; (4230 <_usart_set_config+0x1c8>)
    4154:	47b8      	blx	r7
    4156:	e011      	b.n	417c <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4158:	6a23      	ldr	r3, [r4, #32]
    415a:	469b      	mov	fp, r3
    415c:	b2c0      	uxtb	r0, r0
    415e:	4b32      	ldr	r3, [pc, #200]	; (4228 <_usart_set_config+0x1c0>)
    4160:	4798      	blx	r3
    4162:	0001      	movs	r1, r0
				status_code =
    4164:	4643      	mov	r3, r8
    4166:	9300      	str	r3, [sp, #0]
    4168:	4653      	mov	r3, sl
    416a:	220e      	movs	r2, #14
    416c:	a802      	add	r0, sp, #8
    416e:	4684      	mov	ip, r0
    4170:	4462      	add	r2, ip
    4172:	4658      	mov	r0, fp
    4174:	4f2e      	ldr	r7, [pc, #184]	; (4230 <_usart_set_config+0x1c8>)
    4176:	47b8      	blx	r7
    4178:	e000      	b.n	417c <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
    417a:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    417c:	2800      	cmp	r0, #0
    417e:	d142      	bne.n	4206 <_usart_set_config+0x19e>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    4180:	7e63      	ldrb	r3, [r4, #25]
    4182:	2b00      	cmp	r3, #0
    4184:	d001      	beq.n	418a <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4186:	7ea3      	ldrb	r3, [r4, #26]
    4188:	73b3      	strb	r3, [r6, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    418a:	230e      	movs	r3, #14
    418c:	aa02      	add	r2, sp, #8
    418e:	4694      	mov	ip, r2
    4190:	4463      	add	r3, ip
    4192:	881b      	ldrh	r3, [r3, #0]
    4194:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    4196:	464b      	mov	r3, r9
    4198:	9a03      	ldr	r2, [sp, #12]
    419a:	4313      	orrs	r3, r2

	if (config->use_external_clock == false) {
    419c:	2227      	movs	r2, #39	; 0x27
    419e:	5ca2      	ldrb	r2, [r4, r2]
    41a0:	2a00      	cmp	r2, #0
    41a2:	d101      	bne.n	41a8 <_usart_set_config+0x140>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    41a4:	3204      	adds	r2, #4
    41a6:	4313      	orrs	r3, r2
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    41a8:	7e61      	ldrb	r1, [r4, #25]
    41aa:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    41ac:	7f22      	ldrb	r2, [r4, #28]
    41ae:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    41b0:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    41b2:	7f62      	ldrb	r2, [r4, #29]
    41b4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    41b6:	4311      	orrs	r1, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    41b8:	2224      	movs	r2, #36	; 0x24
    41ba:	5ca2      	ldrb	r2, [r4, r2]
    41bc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    41be:	4311      	orrs	r1, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    41c0:	2225      	movs	r2, #37	; 0x25
    41c2:	5ca2      	ldrb	r2, [r4, r2]
    41c4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    41c6:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    41c8:	7aa2      	ldrb	r2, [r4, #10]
    41ca:	4311      	orrs	r1, r2
	ctrlb |= (uint32_t)config->character_size;
    41cc:	7ae2      	ldrb	r2, [r4, #11]
    41ce:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    41d0:	8922      	ldrh	r2, [r4, #8]
    41d2:	2aff      	cmp	r2, #255	; 0xff
    41d4:	d01e      	beq.n	4214 <_usart_set_config+0x1ac>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    41d6:	2780      	movs	r7, #128	; 0x80
    41d8:	047f      	lsls	r7, r7, #17
    41da:	433b      	orrs	r3, r7
		ctrlb |= config->parity;
    41dc:	4311      	orrs	r1, r2
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    41de:	222c      	movs	r2, #44	; 0x2c
    41e0:	5ca2      	ldrb	r2, [r4, r2]
    41e2:	2a00      	cmp	r2, #0
    41e4:	d103      	bne.n	41ee <_usart_set_config+0x186>
    41e6:	4a13      	ldr	r2, [pc, #76]	; (4234 <_usart_set_config+0x1cc>)
    41e8:	7892      	ldrb	r2, [r2, #2]
    41ea:	0792      	lsls	r2, r2, #30
    41ec:	d501      	bpl.n	41f2 <_usart_set_config+0x18a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    41ee:	2280      	movs	r2, #128	; 0x80
    41f0:	4313      	orrs	r3, r2
	SercomUsart *const usart_hw = &(module->hw->USART);
    41f2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    41f4:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    41f6:	2a00      	cmp	r2, #0
    41f8:	d1fb      	bne.n	41f2 <_usart_set_config+0x18a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    41fa:	6071      	str	r1, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    41fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    41fe:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    4200:	2a00      	cmp	r2, #0
    4202:	d1fb      	bne.n	41fc <_usart_set_config+0x194>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4204:	6033      	str	r3, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
    4206:	b007      	add	sp, #28
    4208:	bc3c      	pop	{r2, r3, r4, r5}
    420a:	4690      	mov	r8, r2
    420c:	4699      	mov	r9, r3
    420e:	46a2      	mov	sl, r4
    4210:	46ab      	mov	fp, r5
    4212:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
    4214:	7ee2      	ldrb	r2, [r4, #27]
    4216:	2a00      	cmp	r2, #0
    4218:	d0e1      	beq.n	41de <_usart_set_config+0x176>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    421a:	2280      	movs	r2, #128	; 0x80
    421c:	04d2      	lsls	r2, r2, #19
    421e:	4313      	orrs	r3, r2
    4220:	e7dd      	b.n	41de <_usart_set_config+0x176>
    4222:	46c0      	nop			; (mov r8, r8)
    4224:	00000a21 	.word	0x00000a21
    4228:	00004c95 	.word	0x00004c95
    422c:	00000795 	.word	0x00000795
    4230:	000007c1 	.word	0x000007c1
    4234:	41002000 	.word	0x41002000

00004238 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4238:	b5f0      	push	{r4, r5, r6, r7, lr}
    423a:	b089      	sub	sp, #36	; 0x24
    423c:	0006      	movs	r6, r0
    423e:	000c      	movs	r4, r1
    4240:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4242:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4244:	0008      	movs	r0, r1
    4246:	4b42      	ldr	r3, [pc, #264]	; (4350 <usart_init+0x118>)
    4248:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    424a:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    424c:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    424e:	6823      	ldr	r3, [r4, #0]
    4250:	07db      	lsls	r3, r3, #31
    4252:	d503      	bpl.n	425c <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4254:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4256:	0028      	movs	r0, r5
    4258:	b009      	add	sp, #36	; 0x24
    425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    425c:	6823      	ldr	r3, [r4, #0]
    425e:	079b      	lsls	r3, r3, #30
    4260:	d501      	bpl.n	4266 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
    4262:	251c      	movs	r5, #28
    4264:	e7f7      	b.n	4256 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4266:	2301      	movs	r3, #1
    4268:	4093      	lsls	r3, r2
    426a:	4a3a      	ldr	r2, [pc, #232]	; (4354 <usart_init+0x11c>)
    426c:	6a11      	ldr	r1, [r2, #32]
    426e:	430b      	orrs	r3, r1
    4270:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4272:	252d      	movs	r5, #45	; 0x2d
    4274:	5d7b      	ldrb	r3, [r7, r5]
    4276:	a907      	add	r1, sp, #28
    4278:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    427a:	b2c3      	uxtb	r3, r0
    427c:	9301      	str	r3, [sp, #4]
    427e:	0018      	movs	r0, r3
    4280:	4b35      	ldr	r3, [pc, #212]	; (4358 <usart_init+0x120>)
    4282:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4284:	9801      	ldr	r0, [sp, #4]
    4286:	4b35      	ldr	r3, [pc, #212]	; (435c <usart_init+0x124>)
    4288:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    428a:	5d78      	ldrb	r0, [r7, r5]
    428c:	2100      	movs	r1, #0
    428e:	4b34      	ldr	r3, [pc, #208]	; (4360 <usart_init+0x128>)
    4290:	4798      	blx	r3
	module->character_size = config->character_size;
    4292:	7afb      	ldrb	r3, [r7, #11]
    4294:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    4296:	2324      	movs	r3, #36	; 0x24
    4298:	5cfb      	ldrb	r3, [r7, r3]
    429a:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    429c:	2325      	movs	r3, #37	; 0x25
    429e:	5cfb      	ldrb	r3, [r7, r3]
    42a0:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    42a2:	7efb      	ldrb	r3, [r7, #27]
    42a4:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    42a6:	7f3b      	ldrb	r3, [r7, #28]
    42a8:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    42aa:	0039      	movs	r1, r7
    42ac:	0030      	movs	r0, r6
    42ae:	4b2d      	ldr	r3, [pc, #180]	; (4364 <usart_init+0x12c>)
    42b0:	4798      	blx	r3
    42b2:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    42b4:	d1cf      	bne.n	4256 <usart_init+0x1e>
	config->mux_position = SYSTEM_PINMUX_GPIO;
    42b6:	ab06      	add	r3, sp, #24
    42b8:	2280      	movs	r2, #128	; 0x80
    42ba:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    42bc:	2200      	movs	r2, #0
    42be:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    42c0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    42c2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    42c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    42c6:	9302      	str	r3, [sp, #8]
    42c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42ca:	9303      	str	r3, [sp, #12]
    42cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    42ce:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    42d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    42d2:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    42d4:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    42d6:	2700      	movs	r7, #0
    42d8:	e006      	b.n	42e8 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    42da:	0039      	movs	r1, r7
    42dc:	0020      	movs	r0, r4
    42de:	4b22      	ldr	r3, [pc, #136]	; (4368 <usart_init+0x130>)
    42e0:	4798      	blx	r3
    42e2:	e008      	b.n	42f6 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    42e4:	3701      	adds	r7, #1
    42e6:	b2ff      	uxtb	r7, r7
    42e8:	2f03      	cmp	r7, #3
    42ea:	d80d      	bhi.n	4308 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    42ec:	00bb      	lsls	r3, r7, #2
    42ee:	aa02      	add	r2, sp, #8
    42f0:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    42f2:	2800      	cmp	r0, #0
    42f4:	d0f1      	beq.n	42da <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    42f6:	1c43      	adds	r3, r0, #1
    42f8:	d0f4      	beq.n	42e4 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    42fa:	a906      	add	r1, sp, #24
    42fc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    42fe:	0c00      	lsrs	r0, r0, #16
    4300:	b2c0      	uxtb	r0, r0
    4302:	4b1a      	ldr	r3, [pc, #104]	; (436c <usart_init+0x134>)
    4304:	4798      	blx	r3
    4306:	e7ed      	b.n	42e4 <usart_init+0xac>
    4308:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    430a:	2a05      	cmp	r2, #5
    430c:	d806      	bhi.n	431c <usart_init+0xe4>
		module->callback[i]            = NULL;
    430e:	1c93      	adds	r3, r2, #2
    4310:	009b      	lsls	r3, r3, #2
    4312:	18f3      	adds	r3, r6, r3
    4314:	2100      	movs	r1, #0
    4316:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4318:	3201      	adds	r2, #1
    431a:	e7f6      	b.n	430a <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    431c:	2200      	movs	r2, #0
    431e:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4320:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4322:	2300      	movs	r3, #0
    4324:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4326:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4328:	3230      	adds	r2, #48	; 0x30
    432a:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    432c:	3201      	adds	r2, #1
    432e:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    4330:	3201      	adds	r2, #1
    4332:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    4334:	3201      	adds	r2, #1
    4336:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4338:	6830      	ldr	r0, [r6, #0]
    433a:	4b05      	ldr	r3, [pc, #20]	; (4350 <usart_init+0x118>)
    433c:	4798      	blx	r3
    433e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4340:	490b      	ldr	r1, [pc, #44]	; (4370 <usart_init+0x138>)
    4342:	4b0c      	ldr	r3, [pc, #48]	; (4374 <usart_init+0x13c>)
    4344:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4346:	00a4      	lsls	r4, r4, #2
    4348:	4b0b      	ldr	r3, [pc, #44]	; (4378 <usart_init+0x140>)
    434a:	50e6      	str	r6, [r4, r3]
	return status_code;
    434c:	e783      	b.n	4256 <usart_init+0x1e>
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	00000a21 	.word	0x00000a21
    4354:	40000400 	.word	0x40000400
    4358:	00004c79 	.word	0x00004c79
    435c:	00004bf1 	.word	0x00004bf1
    4360:	0000085d 	.word	0x0000085d
    4364:	00004069 	.word	0x00004069
    4368:	000008a9 	.word	0x000008a9
    436c:	00004db1 	.word	0x00004db1
    4370:	00004419 	.word	0x00004419
    4374:	000045bd 	.word	0x000045bd
    4378:	20000a08 	.word	0x20000a08

0000437c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    437e:	0004      	movs	r4, r0
    4380:	000d      	movs	r5, r1
    4382:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4384:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    4386:	4b10      	ldr	r3, [pc, #64]	; (43c8 <_usart_read_buffer+0x4c>)
    4388:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    438a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    438c:	b29b      	uxth	r3, r3
    438e:	2b00      	cmp	r3, #0
    4390:	d003      	beq.n	439a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    4392:	4b0e      	ldr	r3, [pc, #56]	; (43cc <_usart_read_buffer+0x50>)
    4394:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    4396:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    4398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    439a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    439c:	4b0b      	ldr	r3, [pc, #44]	; (43cc <_usart_read_buffer+0x50>)
    439e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    43a0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    43a2:	2205      	movs	r2, #5
    43a4:	2332      	movs	r3, #50	; 0x32
    43a6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    43a8:	3b2e      	subs	r3, #46	; 0x2e
    43aa:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    43ac:	7a23      	ldrb	r3, [r4, #8]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d001      	beq.n	43b6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    43b2:	2320      	movs	r3, #32
    43b4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    43b6:	7a63      	ldrb	r3, [r4, #9]
    43b8:	2b00      	cmp	r3, #0
    43ba:	d003      	beq.n	43c4 <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    43bc:	2308      	movs	r3, #8
    43be:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    43c0:	2000      	movs	r0, #0
    43c2:	e7e9      	b.n	4398 <_usart_read_buffer+0x1c>
    43c4:	2000      	movs	r0, #0
    43c6:	e7e7      	b.n	4398 <_usart_read_buffer+0x1c>
    43c8:	000046a9 	.word	0x000046a9
    43cc:	000046e9 	.word	0x000046e9

000043d0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    43d0:	1c93      	adds	r3, r2, #2
    43d2:	009b      	lsls	r3, r3, #2
    43d4:	18c3      	adds	r3, r0, r3
    43d6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    43d8:	2301      	movs	r3, #1
    43da:	4093      	lsls	r3, r2
    43dc:	001a      	movs	r2, r3
    43de:	2130      	movs	r1, #48	; 0x30
    43e0:	5c43      	ldrb	r3, [r0, r1]
    43e2:	4313      	orrs	r3, r2
    43e4:	5443      	strb	r3, [r0, r1]
}
    43e6:	4770      	bx	lr

000043e8 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    43e8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    43ea:	2201      	movs	r2, #1
    43ec:	4b01      	ldr	r3, [pc, #4]	; (43f4 <usart_read_job+0xc>)
    43ee:	4798      	blx	r3
}
    43f0:	bd10      	pop	{r4, pc}
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	0000437d 	.word	0x0000437d

000043f8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    43f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    43fa:	2a00      	cmp	r2, #0
    43fc:	d101      	bne.n	4402 <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    43fe:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    4400:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    4402:	7983      	ldrb	r3, [r0, #6]
    4404:	2b00      	cmp	r3, #0
    4406:	d101      	bne.n	440c <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    4408:	201c      	movs	r0, #28
    440a:	e7f9      	b.n	4400 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    440c:	4b01      	ldr	r3, [pc, #4]	; (4414 <usart_read_buffer_job+0x1c>)
    440e:	4798      	blx	r3
    4410:	e7f6      	b.n	4400 <usart_read_buffer_job+0x8>
    4412:	46c0      	nop			; (mov r8, r8)
    4414:	0000437d 	.word	0x0000437d

00004418 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4418:	b5f0      	push	{r4, r5, r6, r7, lr}
    441a:	46c6      	mov	lr, r8
    441c:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    441e:	0080      	lsls	r0, r0, #2
    4420:	4b64      	ldr	r3, [pc, #400]	; (45b4 <_usart_interrupt_handler+0x19c>)
    4422:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4424:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4426:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    4428:	2b00      	cmp	r3, #0
    442a:	d1fc      	bne.n	4426 <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    442c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    442e:	7da6      	ldrb	r6, [r4, #22]
    4430:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4432:	2330      	movs	r3, #48	; 0x30
    4434:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    4436:	2231      	movs	r2, #49	; 0x31
    4438:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    443a:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    443c:	07f3      	lsls	r3, r6, #31
    443e:	d525      	bpl.n	448c <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    4440:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4442:	b29b      	uxth	r3, r3
    4444:	2b00      	cmp	r3, #0
    4446:	d01f      	beq.n	4488 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4448:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    444a:	780a      	ldrb	r2, [r1, #0]
    444c:	b2d2      	uxtb	r2, r2
    444e:	b293      	uxth	r3, r2
    4450:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4452:	1c48      	adds	r0, r1, #1
    4454:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4456:	796b      	ldrb	r3, [r5, #5]
    4458:	2b01      	cmp	r3, #1
    445a:	d00e      	beq.n	447a <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    445c:	4643      	mov	r3, r8
    445e:	05db      	lsls	r3, r3, #23
    4460:	0ddb      	lsrs	r3, r3, #23
    4462:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4464:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4466:	3b01      	subs	r3, #1
    4468:	b29b      	uxth	r3, r3
    446a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    446c:	2b00      	cmp	r3, #0
    446e:	d10d      	bne.n	448c <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4470:	3301      	adds	r3, #1
    4472:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4474:	3301      	adds	r3, #1
    4476:	75a3      	strb	r3, [r4, #22]
    4478:	e008      	b.n	448c <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    447a:	784b      	ldrb	r3, [r1, #1]
    447c:	021b      	lsls	r3, r3, #8
    447e:	4313      	orrs	r3, r2
    4480:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    4482:	1c88      	adds	r0, r1, #2
    4484:	62a8      	str	r0, [r5, #40]	; 0x28
    4486:	e7e9      	b.n	445c <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4488:	2301      	movs	r3, #1
    448a:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    448c:	07b3      	lsls	r3, r6, #30
    448e:	d506      	bpl.n	449e <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4490:	2302      	movs	r3, #2
    4492:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4494:	2200      	movs	r2, #0
    4496:	3331      	adds	r3, #49	; 0x31
    4498:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    449a:	07fb      	lsls	r3, r7, #31
    449c:	d41c      	bmi.n	44d8 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    449e:	0773      	lsls	r3, r6, #29
    44a0:	d564      	bpl.n	456c <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    44a2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    44a4:	b29b      	uxth	r3, r3
    44a6:	2b00      	cmp	r3, #0
    44a8:	d05e      	beq.n	4568 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    44aa:	8b62      	ldrh	r2, [r4, #26]
    44ac:	b2d2      	uxtb	r2, r2
    44ae:	233f      	movs	r3, #63	; 0x3f
    44b0:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    44b2:	0711      	lsls	r1, r2, #28
    44b4:	d501      	bpl.n	44ba <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    44b6:	2337      	movs	r3, #55	; 0x37
    44b8:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    44ba:	2b00      	cmp	r3, #0
    44bc:	d031      	beq.n	4522 <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    44be:	079a      	lsls	r2, r3, #30
    44c0:	d50e      	bpl.n	44e0 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    44c2:	221a      	movs	r2, #26
    44c4:	2332      	movs	r3, #50	; 0x32
    44c6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    44c8:	3b30      	subs	r3, #48	; 0x30
    44ca:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    44cc:	077b      	lsls	r3, r7, #29
    44ce:	d54d      	bpl.n	456c <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    44d0:	0028      	movs	r0, r5
    44d2:	696b      	ldr	r3, [r5, #20]
    44d4:	4798      	blx	r3
    44d6:	e049      	b.n	456c <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    44d8:	0028      	movs	r0, r5
    44da:	68eb      	ldr	r3, [r5, #12]
    44dc:	4798      	blx	r3
    44de:	e7de      	b.n	449e <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    44e0:	075a      	lsls	r2, r3, #29
    44e2:	d505      	bpl.n	44f0 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    44e4:	221e      	movs	r2, #30
    44e6:	2332      	movs	r3, #50	; 0x32
    44e8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    44ea:	3b2e      	subs	r3, #46	; 0x2e
    44ec:	8363      	strh	r3, [r4, #26]
    44ee:	e7ed      	b.n	44cc <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    44f0:	07da      	lsls	r2, r3, #31
    44f2:	d505      	bpl.n	4500 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    44f4:	2213      	movs	r2, #19
    44f6:	2332      	movs	r3, #50	; 0x32
    44f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    44fa:	3b31      	subs	r3, #49	; 0x31
    44fc:	8363      	strh	r3, [r4, #26]
    44fe:	e7e5      	b.n	44cc <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4500:	06da      	lsls	r2, r3, #27
    4502:	d505      	bpl.n	4510 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    4504:	2242      	movs	r2, #66	; 0x42
    4506:	2332      	movs	r3, #50	; 0x32
    4508:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    450a:	3b22      	subs	r3, #34	; 0x22
    450c:	8363      	strh	r3, [r4, #26]
    450e:	e7dd      	b.n	44cc <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4510:	2220      	movs	r2, #32
    4512:	421a      	tst	r2, r3
    4514:	d0da      	beq.n	44cc <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4516:	3221      	adds	r2, #33	; 0x21
    4518:	2332      	movs	r3, #50	; 0x32
    451a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    451c:	3b12      	subs	r3, #18
    451e:	8363      	strh	r3, [r4, #26]
    4520:	e7d4      	b.n	44cc <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4522:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4524:	05db      	lsls	r3, r3, #23
    4526:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4528:	b2da      	uxtb	r2, r3
    452a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    452c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    452e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4530:	1c51      	adds	r1, r2, #1
    4532:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4534:	7969      	ldrb	r1, [r5, #5]
    4536:	2901      	cmp	r1, #1
    4538:	d010      	beq.n	455c <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    453a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    453c:	3b01      	subs	r3, #1
    453e:	b29b      	uxth	r3, r3
    4540:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4542:	2b00      	cmp	r3, #0
    4544:	d112      	bne.n	456c <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4546:	3304      	adds	r3, #4
    4548:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    454a:	2200      	movs	r2, #0
    454c:	332e      	adds	r3, #46	; 0x2e
    454e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4550:	07bb      	lsls	r3, r7, #30
    4552:	d50b      	bpl.n	456c <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4554:	0028      	movs	r0, r5
    4556:	692b      	ldr	r3, [r5, #16]
    4558:	4798      	blx	r3
    455a:	e007      	b.n	456c <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    455c:	0a1b      	lsrs	r3, r3, #8
    455e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4560:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4562:	3301      	adds	r3, #1
    4564:	626b      	str	r3, [r5, #36]	; 0x24
    4566:	e7e8      	b.n	453a <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4568:	2304      	movs	r3, #4
    456a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    456c:	06f3      	lsls	r3, r6, #27
    456e:	d504      	bpl.n	457a <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4570:	2310      	movs	r3, #16
    4572:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4574:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4576:	06fb      	lsls	r3, r7, #27
    4578:	d410      	bmi.n	459c <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    457a:	06b3      	lsls	r3, r6, #26
    457c:	d504      	bpl.n	4588 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    457e:	2320      	movs	r3, #32
    4580:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4582:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4584:	073b      	lsls	r3, r7, #28
    4586:	d40d      	bmi.n	45a4 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4588:	0733      	lsls	r3, r6, #28
    458a:	d504      	bpl.n	4596 <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    458c:	2308      	movs	r3, #8
    458e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4590:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4592:	06bb      	lsls	r3, r7, #26
    4594:	d40a      	bmi.n	45ac <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4596:	bc04      	pop	{r2}
    4598:	4690      	mov	r8, r2
    459a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    459c:	0028      	movs	r0, r5
    459e:	69eb      	ldr	r3, [r5, #28]
    45a0:	4798      	blx	r3
    45a2:	e7ea      	b.n	457a <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    45a4:	0028      	movs	r0, r5
    45a6:	69ab      	ldr	r3, [r5, #24]
    45a8:	4798      	blx	r3
    45aa:	e7ed      	b.n	4588 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    45ac:	6a2b      	ldr	r3, [r5, #32]
    45ae:	0028      	movs	r0, r5
    45b0:	4798      	blx	r3
}
    45b2:	e7f0      	b.n	4596 <_usart_interrupt_handler+0x17e>
    45b4:	20000a08 	.word	0x20000a08

000045b8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    45b8:	4770      	bx	lr
	...

000045bc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    45bc:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    45be:	4b0b      	ldr	r3, [pc, #44]	; (45ec <_sercom_set_handler+0x30>)
    45c0:	781b      	ldrb	r3, [r3, #0]
    45c2:	2b00      	cmp	r3, #0
    45c4:	d008      	beq.n	45d8 <_sercom_set_handler+0x1c>
    45c6:	e00c      	b.n	45e2 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    45c8:	009a      	lsls	r2, r3, #2
    45ca:	4d09      	ldr	r5, [pc, #36]	; (45f0 <_sercom_set_handler+0x34>)
    45cc:	4c09      	ldr	r4, [pc, #36]	; (45f4 <_sercom_set_handler+0x38>)
    45ce:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    45d0:	2500      	movs	r5, #0
    45d2:	4c09      	ldr	r4, [pc, #36]	; (45f8 <_sercom_set_handler+0x3c>)
    45d4:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    45d6:	3301      	adds	r3, #1
    45d8:	2b05      	cmp	r3, #5
    45da:	d9f5      	bls.n	45c8 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    45dc:	2201      	movs	r2, #1
    45de:	4b03      	ldr	r3, [pc, #12]	; (45ec <_sercom_set_handler+0x30>)
    45e0:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    45e2:	0080      	lsls	r0, r0, #2
    45e4:	4b03      	ldr	r3, [pc, #12]	; (45f4 <_sercom_set_handler+0x38>)
    45e6:	50c1      	str	r1, [r0, r3]
}
    45e8:	bd30      	pop	{r4, r5, pc}
    45ea:	46c0      	nop			; (mov r8, r8)
    45ec:	200003f5 	.word	0x200003f5
    45f0:	000045b9 	.word	0x000045b9
    45f4:	200003f8 	.word	0x200003f8
    45f8:	20000a08 	.word	0x20000a08

000045fc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    45fc:	b500      	push	{lr}
    45fe:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4600:	4b05      	ldr	r3, [pc, #20]	; (4618 <_sercom_get_interrupt_vector+0x1c>)
    4602:	681a      	ldr	r2, [r3, #0]
    4604:	9200      	str	r2, [sp, #0]
    4606:	889b      	ldrh	r3, [r3, #4]
    4608:	466a      	mov	r2, sp
    460a:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    460c:	4b03      	ldr	r3, [pc, #12]	; (461c <_sercom_get_interrupt_vector+0x20>)
    460e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4610:	466b      	mov	r3, sp
    4612:	5618      	ldrsb	r0, [r3, r0]
}
    4614:	b003      	add	sp, #12
    4616:	bd00      	pop	{pc}
    4618:	00005f80 	.word	0x00005f80
    461c:	00000a21 	.word	0x00000a21

00004620 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4620:	b510      	push	{r4, lr}
    4622:	4b02      	ldr	r3, [pc, #8]	; (462c <SERCOM0_Handler+0xc>)
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	2000      	movs	r0, #0
    4628:	4798      	blx	r3
    462a:	bd10      	pop	{r4, pc}
    462c:	200003f8 	.word	0x200003f8

00004630 <SERCOM1_Handler>:
    4630:	b510      	push	{r4, lr}
    4632:	4b02      	ldr	r3, [pc, #8]	; (463c <SERCOM1_Handler+0xc>)
    4634:	685b      	ldr	r3, [r3, #4]
    4636:	2001      	movs	r0, #1
    4638:	4798      	blx	r3
    463a:	bd10      	pop	{r4, pc}
    463c:	200003f8 	.word	0x200003f8

00004640 <SERCOM2_Handler>:
    4640:	b510      	push	{r4, lr}
    4642:	4b02      	ldr	r3, [pc, #8]	; (464c <SERCOM2_Handler+0xc>)
    4644:	689b      	ldr	r3, [r3, #8]
    4646:	2002      	movs	r0, #2
    4648:	4798      	blx	r3
    464a:	bd10      	pop	{r4, pc}
    464c:	200003f8 	.word	0x200003f8

00004650 <SERCOM3_Handler>:
    4650:	b510      	push	{r4, lr}
    4652:	4b02      	ldr	r3, [pc, #8]	; (465c <SERCOM3_Handler+0xc>)
    4654:	68db      	ldr	r3, [r3, #12]
    4656:	2003      	movs	r0, #3
    4658:	4798      	blx	r3
    465a:	bd10      	pop	{r4, pc}
    465c:	200003f8 	.word	0x200003f8

00004660 <SERCOM4_Handler>:
    4660:	b510      	push	{r4, lr}
    4662:	4b02      	ldr	r3, [pc, #8]	; (466c <SERCOM4_Handler+0xc>)
    4664:	691b      	ldr	r3, [r3, #16]
    4666:	2004      	movs	r0, #4
    4668:	4798      	blx	r3
    466a:	bd10      	pop	{r4, pc}
    466c:	200003f8 	.word	0x200003f8

00004670 <SERCOM5_Handler>:
    4670:	b510      	push	{r4, lr}
    4672:	4b02      	ldr	r3, [pc, #8]	; (467c <SERCOM5_Handler+0xc>)
    4674:	695b      	ldr	r3, [r3, #20]
    4676:	2005      	movs	r0, #5
    4678:	4798      	blx	r3
    467a:	bd10      	pop	{r4, pc}
    467c:	200003f8 	.word	0x200003f8

00004680 <port_pin_set_config>:
    4680:	b500      	push	{lr}
    4682:	b083      	sub	sp, #12
    4684:	ab01      	add	r3, sp, #4
    4686:	2280      	movs	r2, #128	; 0x80
    4688:	701a      	strb	r2, [r3, #0]
    468a:	780a      	ldrb	r2, [r1, #0]
    468c:	705a      	strb	r2, [r3, #1]
    468e:	784a      	ldrb	r2, [r1, #1]
    4690:	709a      	strb	r2, [r3, #2]
    4692:	788a      	ldrb	r2, [r1, #2]
    4694:	70da      	strb	r2, [r3, #3]
    4696:	0019      	movs	r1, r3
    4698:	4b01      	ldr	r3, [pc, #4]	; (46a0 <port_pin_set_config+0x20>)
    469a:	4798      	blx	r3
    469c:	b003      	add	sp, #12
    469e:	bd00      	pop	{pc}
    46a0:	00004db1 	.word	0x00004db1

000046a4 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    46a4:	4770      	bx	lr
	...

000046a8 <cpu_irq_enter_critical>:
    46a8:	4b0c      	ldr	r3, [pc, #48]	; (46dc <cpu_irq_enter_critical+0x34>)
    46aa:	681b      	ldr	r3, [r3, #0]
    46ac:	2b00      	cmp	r3, #0
    46ae:	d106      	bne.n	46be <cpu_irq_enter_critical+0x16>
    46b0:	f3ef 8310 	mrs	r3, PRIMASK
    46b4:	2b00      	cmp	r3, #0
    46b6:	d007      	beq.n	46c8 <cpu_irq_enter_critical+0x20>
    46b8:	2200      	movs	r2, #0
    46ba:	4b09      	ldr	r3, [pc, #36]	; (46e0 <cpu_irq_enter_critical+0x38>)
    46bc:	701a      	strb	r2, [r3, #0]
    46be:	4a07      	ldr	r2, [pc, #28]	; (46dc <cpu_irq_enter_critical+0x34>)
    46c0:	6813      	ldr	r3, [r2, #0]
    46c2:	3301      	adds	r3, #1
    46c4:	6013      	str	r3, [r2, #0]
    46c6:	4770      	bx	lr
    46c8:	b672      	cpsid	i
    46ca:	f3bf 8f5f 	dmb	sy
    46ce:	2200      	movs	r2, #0
    46d0:	4b04      	ldr	r3, [pc, #16]	; (46e4 <cpu_irq_enter_critical+0x3c>)
    46d2:	701a      	strb	r2, [r3, #0]
    46d4:	3201      	adds	r2, #1
    46d6:	4b02      	ldr	r3, [pc, #8]	; (46e0 <cpu_irq_enter_critical+0x38>)
    46d8:	701a      	strb	r2, [r3, #0]
    46da:	e7f0      	b.n	46be <cpu_irq_enter_critical+0x16>
    46dc:	20000410 	.word	0x20000410
    46e0:	20000414 	.word	0x20000414
    46e4:	2000000b 	.word	0x2000000b

000046e8 <cpu_irq_leave_critical>:
    46e8:	4b08      	ldr	r3, [pc, #32]	; (470c <cpu_irq_leave_critical+0x24>)
    46ea:	681a      	ldr	r2, [r3, #0]
    46ec:	3a01      	subs	r2, #1
    46ee:	601a      	str	r2, [r3, #0]
    46f0:	681b      	ldr	r3, [r3, #0]
    46f2:	2b00      	cmp	r3, #0
    46f4:	d109      	bne.n	470a <cpu_irq_leave_critical+0x22>
    46f6:	4b06      	ldr	r3, [pc, #24]	; (4710 <cpu_irq_leave_critical+0x28>)
    46f8:	781b      	ldrb	r3, [r3, #0]
    46fa:	2b00      	cmp	r3, #0
    46fc:	d005      	beq.n	470a <cpu_irq_leave_critical+0x22>
    46fe:	2201      	movs	r2, #1
    4700:	4b04      	ldr	r3, [pc, #16]	; (4714 <cpu_irq_leave_critical+0x2c>)
    4702:	701a      	strb	r2, [r3, #0]
    4704:	f3bf 8f5f 	dmb	sy
    4708:	b662      	cpsie	i
    470a:	4770      	bx	lr
    470c:	20000410 	.word	0x20000410
    4710:	20000414 	.word	0x20000414
    4714:	2000000b 	.word	0x2000000b

00004718 <_switch_peripheral_gclk>:
    4718:	b510      	push	{r4, lr}
    471a:	b082      	sub	sp, #8
    471c:	2201      	movs	r2, #1
    471e:	ab01      	add	r3, sp, #4
    4720:	701a      	strb	r2, [r3, #0]
    4722:	2400      	movs	r4, #0
    4724:	e004      	b.n	4730 <_switch_peripheral_gclk+0x18>
    4726:	b2e0      	uxtb	r0, r4
    4728:	a901      	add	r1, sp, #4
    472a:	4b03      	ldr	r3, [pc, #12]	; (4738 <_switch_peripheral_gclk+0x20>)
    472c:	4798      	blx	r3
    472e:	3401      	adds	r4, #1
    4730:	2c24      	cmp	r4, #36	; 0x24
    4732:	d9f8      	bls.n	4726 <_switch_peripheral_gclk+0xe>
    4734:	b002      	add	sp, #8
    4736:	bd10      	pop	{r4, pc}
    4738:	00004c79 	.word	0x00004c79

0000473c <system_clock_source_get_hz>:
    473c:	b510      	push	{r4, lr}
    473e:	2808      	cmp	r0, #8
    4740:	d834      	bhi.n	47ac <system_clock_source_get_hz+0x70>
    4742:	0080      	lsls	r0, r0, #2
    4744:	4b1c      	ldr	r3, [pc, #112]	; (47b8 <system_clock_source_get_hz+0x7c>)
    4746:	581b      	ldr	r3, [r3, r0]
    4748:	469f      	mov	pc, r3
    474a:	2080      	movs	r0, #128	; 0x80
    474c:	0200      	lsls	r0, r0, #8
    474e:	bd10      	pop	{r4, pc}
    4750:	4b1a      	ldr	r3, [pc, #104]	; (47bc <system_clock_source_get_hz+0x80>)
    4752:	6918      	ldr	r0, [r3, #16]
    4754:	e7fb      	b.n	474e <system_clock_source_get_hz+0x12>
    4756:	4b1a      	ldr	r3, [pc, #104]	; (47c0 <system_clock_source_get_hz+0x84>)
    4758:	6a1b      	ldr	r3, [r3, #32]
    475a:	059b      	lsls	r3, r3, #22
    475c:	0f9b      	lsrs	r3, r3, #30
    475e:	4819      	ldr	r0, [pc, #100]	; (47c4 <system_clock_source_get_hz+0x88>)
    4760:	40d8      	lsrs	r0, r3
    4762:	e7f4      	b.n	474e <system_clock_source_get_hz+0x12>
    4764:	4b15      	ldr	r3, [pc, #84]	; (47bc <system_clock_source_get_hz+0x80>)
    4766:	6958      	ldr	r0, [r3, #20]
    4768:	e7f1      	b.n	474e <system_clock_source_get_hz+0x12>
    476a:	4b14      	ldr	r3, [pc, #80]	; (47bc <system_clock_source_get_hz+0x80>)
    476c:	681b      	ldr	r3, [r3, #0]
    476e:	079b      	lsls	r3, r3, #30
    4770:	d51e      	bpl.n	47b0 <system_clock_source_get_hz+0x74>
    4772:	4b13      	ldr	r3, [pc, #76]	; (47c0 <system_clock_source_get_hz+0x84>)
    4774:	68db      	ldr	r3, [r3, #12]
    4776:	06db      	lsls	r3, r3, #27
    4778:	d5fb      	bpl.n	4772 <system_clock_source_get_hz+0x36>
    477a:	4b10      	ldr	r3, [pc, #64]	; (47bc <system_clock_source_get_hz+0x80>)
    477c:	681a      	ldr	r2, [r3, #0]
    477e:	2324      	movs	r3, #36	; 0x24
    4780:	4013      	ands	r3, r2
    4782:	2b04      	cmp	r3, #4
    4784:	d001      	beq.n	478a <system_clock_source_get_hz+0x4e>
    4786:	4810      	ldr	r0, [pc, #64]	; (47c8 <system_clock_source_get_hz+0x8c>)
    4788:	e7e1      	b.n	474e <system_clock_source_get_hz+0x12>
    478a:	2000      	movs	r0, #0
    478c:	4b0f      	ldr	r3, [pc, #60]	; (47cc <system_clock_source_get_hz+0x90>)
    478e:	4798      	blx	r3
    4790:	4b0a      	ldr	r3, [pc, #40]	; (47bc <system_clock_source_get_hz+0x80>)
    4792:	689b      	ldr	r3, [r3, #8]
    4794:	041b      	lsls	r3, r3, #16
    4796:	0c1b      	lsrs	r3, r3, #16
    4798:	4358      	muls	r0, r3
    479a:	e7d8      	b.n	474e <system_clock_source_get_hz+0x12>
    479c:	2350      	movs	r3, #80	; 0x50
    479e:	4a08      	ldr	r2, [pc, #32]	; (47c0 <system_clock_source_get_hz+0x84>)
    47a0:	5cd3      	ldrb	r3, [r2, r3]
    47a2:	075b      	lsls	r3, r3, #29
    47a4:	d506      	bpl.n	47b4 <system_clock_source_get_hz+0x78>
    47a6:	4b05      	ldr	r3, [pc, #20]	; (47bc <system_clock_source_get_hz+0x80>)
    47a8:	68d8      	ldr	r0, [r3, #12]
    47aa:	e7d0      	b.n	474e <system_clock_source_get_hz+0x12>
    47ac:	2000      	movs	r0, #0
    47ae:	e7ce      	b.n	474e <system_clock_source_get_hz+0x12>
    47b0:	2000      	movs	r0, #0
    47b2:	e7cc      	b.n	474e <system_clock_source_get_hz+0x12>
    47b4:	2000      	movs	r0, #0
    47b6:	e7ca      	b.n	474e <system_clock_source_get_hz+0x12>
    47b8:	00005f88 	.word	0x00005f88
    47bc:	20000418 	.word	0x20000418
    47c0:	40000800 	.word	0x40000800
    47c4:	007a1200 	.word	0x007a1200
    47c8:	02dc6c00 	.word	0x02dc6c00
    47cc:	00004c95 	.word	0x00004c95

000047d0 <system_clock_source_osc8m_set_config>:
    47d0:	b570      	push	{r4, r5, r6, lr}
    47d2:	4d0c      	ldr	r5, [pc, #48]	; (4804 <system_clock_source_osc8m_set_config+0x34>)
    47d4:	6a2e      	ldr	r6, [r5, #32]
    47d6:	7802      	ldrb	r2, [r0, #0]
    47d8:	2103      	movs	r1, #3
    47da:	400a      	ands	r2, r1
    47dc:	0212      	lsls	r2, r2, #8
    47de:	490a      	ldr	r1, [pc, #40]	; (4808 <system_clock_source_osc8m_set_config+0x38>)
    47e0:	4031      	ands	r1, r6
    47e2:	4311      	orrs	r1, r2
    47e4:	7882      	ldrb	r2, [r0, #2]
    47e6:	2401      	movs	r4, #1
    47e8:	4022      	ands	r2, r4
    47ea:	01d2      	lsls	r2, r2, #7
    47ec:	2380      	movs	r3, #128	; 0x80
    47ee:	4399      	bics	r1, r3
    47f0:	430a      	orrs	r2, r1
    47f2:	7843      	ldrb	r3, [r0, #1]
    47f4:	4023      	ands	r3, r4
    47f6:	019b      	lsls	r3, r3, #6
    47f8:	2140      	movs	r1, #64	; 0x40
    47fa:	438a      	bics	r2, r1
    47fc:	4313      	orrs	r3, r2
    47fe:	622b      	str	r3, [r5, #32]
    4800:	bd70      	pop	{r4, r5, r6, pc}
    4802:	46c0      	nop			; (mov r8, r8)
    4804:	40000800 	.word	0x40000800
    4808:	fffffcff 	.word	0xfffffcff

0000480c <system_clock_source_osc32k_set_config>:
    480c:	b5f0      	push	{r4, r5, r6, r7, lr}
    480e:	4f15      	ldr	r7, [pc, #84]	; (4864 <system_clock_source_osc32k_set_config+0x58>)
    4810:	69be      	ldr	r6, [r7, #24]
    4812:	7842      	ldrb	r2, [r0, #1]
    4814:	2301      	movs	r3, #1
    4816:	401a      	ands	r2, r3
    4818:	00d2      	lsls	r2, r2, #3
    481a:	2108      	movs	r1, #8
    481c:	438e      	bics	r6, r1
    481e:	4332      	orrs	r2, r6
    4820:	7885      	ldrb	r5, [r0, #2]
    4822:	401d      	ands	r5, r3
    4824:	00ad      	lsls	r5, r5, #2
    4826:	3904      	subs	r1, #4
    4828:	438a      	bics	r2, r1
    482a:	4315      	orrs	r5, r2
    482c:	7801      	ldrb	r1, [r0, #0]
    482e:	2407      	movs	r4, #7
    4830:	400c      	ands	r4, r1
    4832:	0224      	lsls	r4, r4, #8
    4834:	490c      	ldr	r1, [pc, #48]	; (4868 <system_clock_source_osc32k_set_config+0x5c>)
    4836:	400d      	ands	r5, r1
    4838:	432c      	orrs	r4, r5
    483a:	7901      	ldrb	r1, [r0, #4]
    483c:	4019      	ands	r1, r3
    483e:	01c9      	lsls	r1, r1, #7
    4840:	2280      	movs	r2, #128	; 0x80
    4842:	4394      	bics	r4, r2
    4844:	4321      	orrs	r1, r4
    4846:	78c2      	ldrb	r2, [r0, #3]
    4848:	401a      	ands	r2, r3
    484a:	0192      	lsls	r2, r2, #6
    484c:	2440      	movs	r4, #64	; 0x40
    484e:	43a1      	bics	r1, r4
    4850:	430a      	orrs	r2, r1
    4852:	7941      	ldrb	r1, [r0, #5]
    4854:	400b      	ands	r3, r1
    4856:	031b      	lsls	r3, r3, #12
    4858:	4904      	ldr	r1, [pc, #16]	; (486c <system_clock_source_osc32k_set_config+0x60>)
    485a:	400a      	ands	r2, r1
    485c:	4313      	orrs	r3, r2
    485e:	61bb      	str	r3, [r7, #24]
    4860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	40000800 	.word	0x40000800
    4868:	fffff8ff 	.word	0xfffff8ff
    486c:	ffffefff 	.word	0xffffefff

00004870 <system_clock_source_enable>:
    4870:	2808      	cmp	r0, #8
    4872:	d84a      	bhi.n	490a <system_clock_source_enable+0x9a>
    4874:	0080      	lsls	r0, r0, #2
    4876:	4b26      	ldr	r3, [pc, #152]	; (4910 <system_clock_source_enable+0xa0>)
    4878:	581b      	ldr	r3, [r3, r0]
    487a:	469f      	mov	pc, r3
    487c:	2000      	movs	r0, #0
    487e:	4770      	bx	lr
    4880:	4a24      	ldr	r2, [pc, #144]	; (4914 <system_clock_source_enable+0xa4>)
    4882:	6a13      	ldr	r3, [r2, #32]
    4884:	2102      	movs	r1, #2
    4886:	430b      	orrs	r3, r1
    4888:	6213      	str	r3, [r2, #32]
    488a:	2000      	movs	r0, #0
    488c:	e7f7      	b.n	487e <system_clock_source_enable+0xe>
    488e:	4a21      	ldr	r2, [pc, #132]	; (4914 <system_clock_source_enable+0xa4>)
    4890:	6993      	ldr	r3, [r2, #24]
    4892:	2102      	movs	r1, #2
    4894:	430b      	orrs	r3, r1
    4896:	6193      	str	r3, [r2, #24]
    4898:	2000      	movs	r0, #0
    489a:	e7f0      	b.n	487e <system_clock_source_enable+0xe>
    489c:	4a1d      	ldr	r2, [pc, #116]	; (4914 <system_clock_source_enable+0xa4>)
    489e:	8a13      	ldrh	r3, [r2, #16]
    48a0:	2102      	movs	r1, #2
    48a2:	430b      	orrs	r3, r1
    48a4:	b29b      	uxth	r3, r3
    48a6:	8213      	strh	r3, [r2, #16]
    48a8:	2000      	movs	r0, #0
    48aa:	e7e8      	b.n	487e <system_clock_source_enable+0xe>
    48ac:	4a19      	ldr	r2, [pc, #100]	; (4914 <system_clock_source_enable+0xa4>)
    48ae:	8a93      	ldrh	r3, [r2, #20]
    48b0:	2102      	movs	r1, #2
    48b2:	430b      	orrs	r3, r1
    48b4:	b29b      	uxth	r3, r3
    48b6:	8293      	strh	r3, [r2, #20]
    48b8:	2000      	movs	r0, #0
    48ba:	e7e0      	b.n	487e <system_clock_source_enable+0xe>
    48bc:	4916      	ldr	r1, [pc, #88]	; (4918 <system_clock_source_enable+0xa8>)
    48be:	680b      	ldr	r3, [r1, #0]
    48c0:	2202      	movs	r2, #2
    48c2:	4313      	orrs	r3, r2
    48c4:	600b      	str	r3, [r1, #0]
    48c6:	4b13      	ldr	r3, [pc, #76]	; (4914 <system_clock_source_enable+0xa4>)
    48c8:	849a      	strh	r2, [r3, #36]	; 0x24
    48ca:	4b12      	ldr	r3, [pc, #72]	; (4914 <system_clock_source_enable+0xa4>)
    48cc:	68db      	ldr	r3, [r3, #12]
    48ce:	06db      	lsls	r3, r3, #27
    48d0:	d5fb      	bpl.n	48ca <system_clock_source_enable+0x5a>
    48d2:	4a11      	ldr	r2, [pc, #68]	; (4918 <system_clock_source_enable+0xa8>)
    48d4:	6891      	ldr	r1, [r2, #8]
    48d6:	4b0f      	ldr	r3, [pc, #60]	; (4914 <system_clock_source_enable+0xa4>)
    48d8:	62d9      	str	r1, [r3, #44]	; 0x2c
    48da:	6852      	ldr	r2, [r2, #4]
    48dc:	629a      	str	r2, [r3, #40]	; 0x28
    48de:	2200      	movs	r2, #0
    48e0:	849a      	strh	r2, [r3, #36]	; 0x24
    48e2:	4b0c      	ldr	r3, [pc, #48]	; (4914 <system_clock_source_enable+0xa4>)
    48e4:	68db      	ldr	r3, [r3, #12]
    48e6:	06db      	lsls	r3, r3, #27
    48e8:	d5fb      	bpl.n	48e2 <system_clock_source_enable+0x72>
    48ea:	4b0b      	ldr	r3, [pc, #44]	; (4918 <system_clock_source_enable+0xa8>)
    48ec:	681b      	ldr	r3, [r3, #0]
    48ee:	b29b      	uxth	r3, r3
    48f0:	4a08      	ldr	r2, [pc, #32]	; (4914 <system_clock_source_enable+0xa4>)
    48f2:	8493      	strh	r3, [r2, #36]	; 0x24
    48f4:	2000      	movs	r0, #0
    48f6:	e7c2      	b.n	487e <system_clock_source_enable+0xe>
    48f8:	4906      	ldr	r1, [pc, #24]	; (4914 <system_clock_source_enable+0xa4>)
    48fa:	2244      	movs	r2, #68	; 0x44
    48fc:	5c8b      	ldrb	r3, [r1, r2]
    48fe:	2002      	movs	r0, #2
    4900:	4303      	orrs	r3, r0
    4902:	b2db      	uxtb	r3, r3
    4904:	548b      	strb	r3, [r1, r2]
    4906:	2000      	movs	r0, #0
    4908:	e7b9      	b.n	487e <system_clock_source_enable+0xe>
    490a:	2017      	movs	r0, #23
    490c:	e7b7      	b.n	487e <system_clock_source_enable+0xe>
    490e:	46c0      	nop			; (mov r8, r8)
    4910:	00005fac 	.word	0x00005fac
    4914:	40000800 	.word	0x40000800
    4918:	20000418 	.word	0x20000418

0000491c <system_clock_init>:
    491c:	b5f0      	push	{r4, r5, r6, r7, lr}
    491e:	b087      	sub	sp, #28
    4920:	4c29      	ldr	r4, [pc, #164]	; (49c8 <system_clock_init+0xac>)
    4922:	23c2      	movs	r3, #194	; 0xc2
    4924:	00db      	lsls	r3, r3, #3
    4926:	60a3      	str	r3, [r4, #8]
    4928:	4b28      	ldr	r3, [pc, #160]	; (49cc <system_clock_init+0xb0>)
    492a:	6859      	ldr	r1, [r3, #4]
    492c:	221e      	movs	r2, #30
    492e:	4391      	bics	r1, r2
    4930:	6059      	str	r1, [r3, #4]
    4932:	4b27      	ldr	r3, [pc, #156]	; (49d0 <system_clock_init+0xb4>)
    4934:	4798      	blx	r3
    4936:	4b27      	ldr	r3, [pc, #156]	; (49d4 <system_clock_init+0xb8>)
    4938:	6819      	ldr	r1, [r3, #0]
    493a:	0989      	lsrs	r1, r1, #6
    493c:	69a2      	ldr	r2, [r4, #24]
    493e:	237f      	movs	r3, #127	; 0x7f
    4940:	400b      	ands	r3, r1
    4942:	041b      	lsls	r3, r3, #16
    4944:	4924      	ldr	r1, [pc, #144]	; (49d8 <system_clock_init+0xbc>)
    4946:	400a      	ands	r2, r1
    4948:	4313      	orrs	r3, r2
    494a:	61a3      	str	r3, [r4, #24]
    494c:	a804      	add	r0, sp, #16
    494e:	2501      	movs	r5, #1
    4950:	7045      	strb	r5, [r0, #1]
    4952:	7085      	strb	r5, [r0, #2]
    4954:	2400      	movs	r4, #0
    4956:	70c4      	strb	r4, [r0, #3]
    4958:	7105      	strb	r5, [r0, #4]
    495a:	2307      	movs	r3, #7
    495c:	7003      	strb	r3, [r0, #0]
    495e:	7144      	strb	r4, [r0, #5]
    4960:	4b1e      	ldr	r3, [pc, #120]	; (49dc <system_clock_init+0xc0>)
    4962:	4798      	blx	r3
    4964:	2004      	movs	r0, #4
    4966:	4e1e      	ldr	r6, [pc, #120]	; (49e0 <system_clock_init+0xc4>)
    4968:	47b0      	blx	r6
    496a:	a803      	add	r0, sp, #12
    496c:	7044      	strb	r4, [r0, #1]
    496e:	7085      	strb	r5, [r0, #2]
    4970:	7004      	strb	r4, [r0, #0]
    4972:	4b1c      	ldr	r3, [pc, #112]	; (49e4 <system_clock_init+0xc8>)
    4974:	4798      	blx	r3
    4976:	2006      	movs	r0, #6
    4978:	47b0      	blx	r6
    497a:	4b1b      	ldr	r3, [pc, #108]	; (49e8 <system_clock_init+0xcc>)
    497c:	4798      	blx	r3
    497e:	466b      	mov	r3, sp
    4980:	705c      	strb	r4, [r3, #1]
    4982:	721c      	strb	r4, [r3, #8]
    4984:	725c      	strb	r4, [r3, #9]
    4986:	2304      	movs	r3, #4
    4988:	466a      	mov	r2, sp
    498a:	7013      	strb	r3, [r2, #0]
    498c:	331c      	adds	r3, #28
    498e:	9301      	str	r3, [sp, #4]
    4990:	4669      	mov	r1, sp
    4992:	2002      	movs	r0, #2
    4994:	4f15      	ldr	r7, [pc, #84]	; (49ec <system_clock_init+0xd0>)
    4996:	47b8      	blx	r7
    4998:	2002      	movs	r0, #2
    499a:	4e15      	ldr	r6, [pc, #84]	; (49f0 <system_clock_init+0xd4>)
    499c:	47b0      	blx	r6
    499e:	4b15      	ldr	r3, [pc, #84]	; (49f4 <system_clock_init+0xd8>)
    49a0:	721c      	strb	r4, [r3, #8]
    49a2:	725c      	strb	r4, [r3, #9]
    49a4:	729c      	strb	r4, [r3, #10]
    49a6:	72dc      	strb	r4, [r3, #11]
    49a8:	9501      	str	r5, [sp, #4]
    49aa:	466b      	mov	r3, sp
    49ac:	705c      	strb	r4, [r3, #1]
    49ae:	2306      	movs	r3, #6
    49b0:	466a      	mov	r2, sp
    49b2:	7013      	strb	r3, [r2, #0]
    49b4:	7214      	strb	r4, [r2, #8]
    49b6:	7254      	strb	r4, [r2, #9]
    49b8:	4669      	mov	r1, sp
    49ba:	2000      	movs	r0, #0
    49bc:	47b8      	blx	r7
    49be:	2000      	movs	r0, #0
    49c0:	47b0      	blx	r6
    49c2:	b007      	add	sp, #28
    49c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49c6:	46c0      	nop			; (mov r8, r8)
    49c8:	40000800 	.word	0x40000800
    49cc:	41004000 	.word	0x41004000
    49d0:	00004719 	.word	0x00004719
    49d4:	00806024 	.word	0x00806024
    49d8:	ff80ffff 	.word	0xff80ffff
    49dc:	0000480d 	.word	0x0000480d
    49e0:	00004871 	.word	0x00004871
    49e4:	000047d1 	.word	0x000047d1
    49e8:	000049f9 	.word	0x000049f9
    49ec:	00004a1d 	.word	0x00004a1d
    49f0:	00004aed 	.word	0x00004aed
    49f4:	40000400 	.word	0x40000400

000049f8 <system_gclk_init>:
    49f8:	4a06      	ldr	r2, [pc, #24]	; (4a14 <system_gclk_init+0x1c>)
    49fa:	6993      	ldr	r3, [r2, #24]
    49fc:	2108      	movs	r1, #8
    49fe:	430b      	orrs	r3, r1
    4a00:	6193      	str	r3, [r2, #24]
    4a02:	2201      	movs	r2, #1
    4a04:	4b04      	ldr	r3, [pc, #16]	; (4a18 <system_gclk_init+0x20>)
    4a06:	701a      	strb	r2, [r3, #0]
    4a08:	4b03      	ldr	r3, [pc, #12]	; (4a18 <system_gclk_init+0x20>)
    4a0a:	781b      	ldrb	r3, [r3, #0]
    4a0c:	07db      	lsls	r3, r3, #31
    4a0e:	d4fb      	bmi.n	4a08 <system_gclk_init+0x10>
    4a10:	4770      	bx	lr
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	40000400 	.word	0x40000400
    4a18:	40000c00 	.word	0x40000c00

00004a1c <system_gclk_gen_set_config>:
    4a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a1e:	0006      	movs	r6, r0
    4a20:	0005      	movs	r5, r0
    4a22:	780c      	ldrb	r4, [r1, #0]
    4a24:	0224      	lsls	r4, r4, #8
    4a26:	4304      	orrs	r4, r0
    4a28:	784b      	ldrb	r3, [r1, #1]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d002      	beq.n	4a34 <system_gclk_gen_set_config+0x18>
    4a2e:	2380      	movs	r3, #128	; 0x80
    4a30:	02db      	lsls	r3, r3, #11
    4a32:	431c      	orrs	r4, r3
    4a34:	7a4b      	ldrb	r3, [r1, #9]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d002      	beq.n	4a40 <system_gclk_gen_set_config+0x24>
    4a3a:	2380      	movs	r3, #128	; 0x80
    4a3c:	031b      	lsls	r3, r3, #12
    4a3e:	431c      	orrs	r4, r3
    4a40:	6848      	ldr	r0, [r1, #4]
    4a42:	2801      	cmp	r0, #1
    4a44:	d912      	bls.n	4a6c <system_gclk_gen_set_config+0x50>
    4a46:	1e43      	subs	r3, r0, #1
    4a48:	4203      	tst	r3, r0
    4a4a:	d03d      	beq.n	4ac8 <system_gclk_gen_set_config+0xac>
    4a4c:	0205      	lsls	r5, r0, #8
    4a4e:	4335      	orrs	r5, r6
    4a50:	2380      	movs	r3, #128	; 0x80
    4a52:	029b      	lsls	r3, r3, #10
    4a54:	431c      	orrs	r4, r3
    4a56:	e009      	b.n	4a6c <system_gclk_gen_set_config+0x50>
    4a58:	3201      	adds	r2, #1
    4a5a:	005b      	lsls	r3, r3, #1
    4a5c:	4283      	cmp	r3, r0
    4a5e:	d3fb      	bcc.n	4a58 <system_gclk_gen_set_config+0x3c>
    4a60:	0212      	lsls	r2, r2, #8
    4a62:	4332      	orrs	r2, r6
    4a64:	0015      	movs	r5, r2
    4a66:	2380      	movs	r3, #128	; 0x80
    4a68:	035b      	lsls	r3, r3, #13
    4a6a:	431c      	orrs	r4, r3
    4a6c:	7a0b      	ldrb	r3, [r1, #8]
    4a6e:	2b00      	cmp	r3, #0
    4a70:	d002      	beq.n	4a78 <system_gclk_gen_set_config+0x5c>
    4a72:	2380      	movs	r3, #128	; 0x80
    4a74:	039b      	lsls	r3, r3, #14
    4a76:	431c      	orrs	r4, r3
    4a78:	4b18      	ldr	r3, [pc, #96]	; (4adc <system_gclk_gen_set_config+0xc0>)
    4a7a:	785b      	ldrb	r3, [r3, #1]
    4a7c:	b25b      	sxtb	r3, r3
    4a7e:	2b00      	cmp	r3, #0
    4a80:	db25      	blt.n	4ace <system_gclk_gen_set_config+0xb2>
    4a82:	2700      	movs	r7, #0
    4a84:	2f00      	cmp	r7, #0
    4a86:	d1f7      	bne.n	4a78 <system_gclk_gen_set_config+0x5c>
    4a88:	4b15      	ldr	r3, [pc, #84]	; (4ae0 <system_gclk_gen_set_config+0xc4>)
    4a8a:	4798      	blx	r3
    4a8c:	4b15      	ldr	r3, [pc, #84]	; (4ae4 <system_gclk_gen_set_config+0xc8>)
    4a8e:	701e      	strb	r6, [r3, #0]
    4a90:	4b12      	ldr	r3, [pc, #72]	; (4adc <system_gclk_gen_set_config+0xc0>)
    4a92:	785b      	ldrb	r3, [r3, #1]
    4a94:	b25b      	sxtb	r3, r3
    4a96:	2b00      	cmp	r3, #0
    4a98:	db1b      	blt.n	4ad2 <system_gclk_gen_set_config+0xb6>
    4a9a:	003a      	movs	r2, r7
    4a9c:	2a00      	cmp	r2, #0
    4a9e:	d1f7      	bne.n	4a90 <system_gclk_gen_set_config+0x74>
    4aa0:	4b0e      	ldr	r3, [pc, #56]	; (4adc <system_gclk_gen_set_config+0xc0>)
    4aa2:	609d      	str	r5, [r3, #8]
    4aa4:	4b0d      	ldr	r3, [pc, #52]	; (4adc <system_gclk_gen_set_config+0xc0>)
    4aa6:	785b      	ldrb	r3, [r3, #1]
    4aa8:	b25b      	sxtb	r3, r3
    4aaa:	2b00      	cmp	r3, #0
    4aac:	db13      	blt.n	4ad6 <system_gclk_gen_set_config+0xba>
    4aae:	0013      	movs	r3, r2
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d1f7      	bne.n	4aa4 <system_gclk_gen_set_config+0x88>
    4ab4:	4a09      	ldr	r2, [pc, #36]	; (4adc <system_gclk_gen_set_config+0xc0>)
    4ab6:	6853      	ldr	r3, [r2, #4]
    4ab8:	2180      	movs	r1, #128	; 0x80
    4aba:	0249      	lsls	r1, r1, #9
    4abc:	400b      	ands	r3, r1
    4abe:	431c      	orrs	r4, r3
    4ac0:	6054      	str	r4, [r2, #4]
    4ac2:	4b09      	ldr	r3, [pc, #36]	; (4ae8 <system_gclk_gen_set_config+0xcc>)
    4ac4:	4798      	blx	r3
    4ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ac8:	2302      	movs	r3, #2
    4aca:	2200      	movs	r2, #0
    4acc:	e7c6      	b.n	4a5c <system_gclk_gen_set_config+0x40>
    4ace:	2701      	movs	r7, #1
    4ad0:	e7d8      	b.n	4a84 <system_gclk_gen_set_config+0x68>
    4ad2:	2201      	movs	r2, #1
    4ad4:	e7e2      	b.n	4a9c <system_gclk_gen_set_config+0x80>
    4ad6:	2301      	movs	r3, #1
    4ad8:	e7ea      	b.n	4ab0 <system_gclk_gen_set_config+0x94>
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	40000c00 	.word	0x40000c00
    4ae0:	000046a9 	.word	0x000046a9
    4ae4:	40000c08 	.word	0x40000c08
    4ae8:	000046e9 	.word	0x000046e9

00004aec <system_gclk_gen_enable>:
    4aec:	b570      	push	{r4, r5, r6, lr}
    4aee:	0005      	movs	r5, r0
    4af0:	4b10      	ldr	r3, [pc, #64]	; (4b34 <system_gclk_gen_enable+0x48>)
    4af2:	785b      	ldrb	r3, [r3, #1]
    4af4:	b25b      	sxtb	r3, r3
    4af6:	2b00      	cmp	r3, #0
    4af8:	db17      	blt.n	4b2a <system_gclk_gen_enable+0x3e>
    4afa:	2400      	movs	r4, #0
    4afc:	2c00      	cmp	r4, #0
    4afe:	d1f7      	bne.n	4af0 <system_gclk_gen_enable+0x4>
    4b00:	4b0d      	ldr	r3, [pc, #52]	; (4b38 <system_gclk_gen_enable+0x4c>)
    4b02:	4798      	blx	r3
    4b04:	4b0d      	ldr	r3, [pc, #52]	; (4b3c <system_gclk_gen_enable+0x50>)
    4b06:	701d      	strb	r5, [r3, #0]
    4b08:	4b0a      	ldr	r3, [pc, #40]	; (4b34 <system_gclk_gen_enable+0x48>)
    4b0a:	785b      	ldrb	r3, [r3, #1]
    4b0c:	b25b      	sxtb	r3, r3
    4b0e:	2b00      	cmp	r3, #0
    4b10:	db0d      	blt.n	4b2e <system_gclk_gen_enable+0x42>
    4b12:	0023      	movs	r3, r4
    4b14:	2b00      	cmp	r3, #0
    4b16:	d1f7      	bne.n	4b08 <system_gclk_gen_enable+0x1c>
    4b18:	4a06      	ldr	r2, [pc, #24]	; (4b34 <system_gclk_gen_enable+0x48>)
    4b1a:	6851      	ldr	r1, [r2, #4]
    4b1c:	2380      	movs	r3, #128	; 0x80
    4b1e:	025b      	lsls	r3, r3, #9
    4b20:	430b      	orrs	r3, r1
    4b22:	6053      	str	r3, [r2, #4]
    4b24:	4b06      	ldr	r3, [pc, #24]	; (4b40 <system_gclk_gen_enable+0x54>)
    4b26:	4798      	blx	r3
    4b28:	bd70      	pop	{r4, r5, r6, pc}
    4b2a:	2401      	movs	r4, #1
    4b2c:	e7e6      	b.n	4afc <system_gclk_gen_enable+0x10>
    4b2e:	2301      	movs	r3, #1
    4b30:	e7f0      	b.n	4b14 <system_gclk_gen_enable+0x28>
    4b32:	46c0      	nop			; (mov r8, r8)
    4b34:	40000c00 	.word	0x40000c00
    4b38:	000046a9 	.word	0x000046a9
    4b3c:	40000c04 	.word	0x40000c04
    4b40:	000046e9 	.word	0x000046e9

00004b44 <system_gclk_gen_get_hz>:
    4b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b46:	0007      	movs	r7, r0
    4b48:	4b22      	ldr	r3, [pc, #136]	; (4bd4 <system_gclk_gen_get_hz+0x90>)
    4b4a:	785b      	ldrb	r3, [r3, #1]
    4b4c:	b25b      	sxtb	r3, r3
    4b4e:	2b00      	cmp	r3, #0
    4b50:	db34      	blt.n	4bbc <system_gclk_gen_get_hz+0x78>
    4b52:	2500      	movs	r5, #0
    4b54:	2d00      	cmp	r5, #0
    4b56:	d1f7      	bne.n	4b48 <system_gclk_gen_get_hz+0x4>
    4b58:	4b1f      	ldr	r3, [pc, #124]	; (4bd8 <system_gclk_gen_get_hz+0x94>)
    4b5a:	4798      	blx	r3
    4b5c:	4b1f      	ldr	r3, [pc, #124]	; (4bdc <system_gclk_gen_get_hz+0x98>)
    4b5e:	701f      	strb	r7, [r3, #0]
    4b60:	4b1c      	ldr	r3, [pc, #112]	; (4bd4 <system_gclk_gen_get_hz+0x90>)
    4b62:	785b      	ldrb	r3, [r3, #1]
    4b64:	b25b      	sxtb	r3, r3
    4b66:	2b00      	cmp	r3, #0
    4b68:	db2a      	blt.n	4bc0 <system_gclk_gen_get_hz+0x7c>
    4b6a:	002c      	movs	r4, r5
    4b6c:	2c00      	cmp	r4, #0
    4b6e:	d1f7      	bne.n	4b60 <system_gclk_gen_get_hz+0x1c>
    4b70:	4e18      	ldr	r6, [pc, #96]	; (4bd4 <system_gclk_gen_get_hz+0x90>)
    4b72:	6870      	ldr	r0, [r6, #4]
    4b74:	04c0      	lsls	r0, r0, #19
    4b76:	0ec0      	lsrs	r0, r0, #27
    4b78:	4b19      	ldr	r3, [pc, #100]	; (4be0 <system_gclk_gen_get_hz+0x9c>)
    4b7a:	4798      	blx	r3
    4b7c:	0005      	movs	r5, r0
    4b7e:	4b17      	ldr	r3, [pc, #92]	; (4bdc <system_gclk_gen_get_hz+0x98>)
    4b80:	701f      	strb	r7, [r3, #0]
    4b82:	6876      	ldr	r6, [r6, #4]
    4b84:	02f6      	lsls	r6, r6, #11
    4b86:	0ff6      	lsrs	r6, r6, #31
    4b88:	4b16      	ldr	r3, [pc, #88]	; (4be4 <system_gclk_gen_get_hz+0xa0>)
    4b8a:	701f      	strb	r7, [r3, #0]
    4b8c:	4b11      	ldr	r3, [pc, #68]	; (4bd4 <system_gclk_gen_get_hz+0x90>)
    4b8e:	785b      	ldrb	r3, [r3, #1]
    4b90:	b25b      	sxtb	r3, r3
    4b92:	2b00      	cmp	r3, #0
    4b94:	db16      	blt.n	4bc4 <system_gclk_gen_get_hz+0x80>
    4b96:	0023      	movs	r3, r4
    4b98:	2b00      	cmp	r3, #0
    4b9a:	d1f7      	bne.n	4b8c <system_gclk_gen_get_hz+0x48>
    4b9c:	4b0d      	ldr	r3, [pc, #52]	; (4bd4 <system_gclk_gen_get_hz+0x90>)
    4b9e:	689c      	ldr	r4, [r3, #8]
    4ba0:	0224      	lsls	r4, r4, #8
    4ba2:	0c24      	lsrs	r4, r4, #16
    4ba4:	4b10      	ldr	r3, [pc, #64]	; (4be8 <system_gclk_gen_get_hz+0xa4>)
    4ba6:	4798      	blx	r3
    4ba8:	2e00      	cmp	r6, #0
    4baa:	d10d      	bne.n	4bc8 <system_gclk_gen_get_hz+0x84>
    4bac:	2c01      	cmp	r4, #1
    4bae:	d90b      	bls.n	4bc8 <system_gclk_gen_get_hz+0x84>
    4bb0:	0021      	movs	r1, r4
    4bb2:	0028      	movs	r0, r5
    4bb4:	4b0d      	ldr	r3, [pc, #52]	; (4bec <system_gclk_gen_get_hz+0xa8>)
    4bb6:	4798      	blx	r3
    4bb8:	0005      	movs	r5, r0
    4bba:	e009      	b.n	4bd0 <system_gclk_gen_get_hz+0x8c>
    4bbc:	2501      	movs	r5, #1
    4bbe:	e7c9      	b.n	4b54 <system_gclk_gen_get_hz+0x10>
    4bc0:	2401      	movs	r4, #1
    4bc2:	e7d3      	b.n	4b6c <system_gclk_gen_get_hz+0x28>
    4bc4:	2301      	movs	r3, #1
    4bc6:	e7e7      	b.n	4b98 <system_gclk_gen_get_hz+0x54>
    4bc8:	2e00      	cmp	r6, #0
    4bca:	d001      	beq.n	4bd0 <system_gclk_gen_get_hz+0x8c>
    4bcc:	3401      	adds	r4, #1
    4bce:	40e5      	lsrs	r5, r4
    4bd0:	0028      	movs	r0, r5
    4bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bd4:	40000c00 	.word	0x40000c00
    4bd8:	000046a9 	.word	0x000046a9
    4bdc:	40000c04 	.word	0x40000c04
    4be0:	0000473d 	.word	0x0000473d
    4be4:	40000c08 	.word	0x40000c08
    4be8:	000046e9 	.word	0x000046e9
    4bec:	00005319 	.word	0x00005319

00004bf0 <system_gclk_chan_enable>:
    4bf0:	b510      	push	{r4, lr}
    4bf2:	0004      	movs	r4, r0
    4bf4:	4b06      	ldr	r3, [pc, #24]	; (4c10 <system_gclk_chan_enable+0x20>)
    4bf6:	4798      	blx	r3
    4bf8:	4b06      	ldr	r3, [pc, #24]	; (4c14 <system_gclk_chan_enable+0x24>)
    4bfa:	701c      	strb	r4, [r3, #0]
    4bfc:	4a06      	ldr	r2, [pc, #24]	; (4c18 <system_gclk_chan_enable+0x28>)
    4bfe:	8853      	ldrh	r3, [r2, #2]
    4c00:	2180      	movs	r1, #128	; 0x80
    4c02:	01c9      	lsls	r1, r1, #7
    4c04:	430b      	orrs	r3, r1
    4c06:	8053      	strh	r3, [r2, #2]
    4c08:	4b04      	ldr	r3, [pc, #16]	; (4c1c <system_gclk_chan_enable+0x2c>)
    4c0a:	4798      	blx	r3
    4c0c:	bd10      	pop	{r4, pc}
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	000046a9 	.word	0x000046a9
    4c14:	40000c02 	.word	0x40000c02
    4c18:	40000c00 	.word	0x40000c00
    4c1c:	000046e9 	.word	0x000046e9

00004c20 <system_gclk_chan_disable>:
    4c20:	b510      	push	{r4, lr}
    4c22:	0004      	movs	r4, r0
    4c24:	4b0e      	ldr	r3, [pc, #56]	; (4c60 <system_gclk_chan_disable+0x40>)
    4c26:	4798      	blx	r3
    4c28:	4b0e      	ldr	r3, [pc, #56]	; (4c64 <system_gclk_chan_disable+0x44>)
    4c2a:	701c      	strb	r4, [r3, #0]
    4c2c:	490e      	ldr	r1, [pc, #56]	; (4c68 <system_gclk_chan_disable+0x48>)
    4c2e:	884b      	ldrh	r3, [r1, #2]
    4c30:	051b      	lsls	r3, r3, #20
    4c32:	0f1a      	lsrs	r2, r3, #28
    4c34:	884b      	ldrh	r3, [r1, #2]
    4c36:	480d      	ldr	r0, [pc, #52]	; (4c6c <system_gclk_chan_disable+0x4c>)
    4c38:	4003      	ands	r3, r0
    4c3a:	804b      	strh	r3, [r1, #2]
    4c3c:	884b      	ldrh	r3, [r1, #2]
    4c3e:	480c      	ldr	r0, [pc, #48]	; (4c70 <system_gclk_chan_disable+0x50>)
    4c40:	4003      	ands	r3, r0
    4c42:	804b      	strh	r3, [r1, #2]
    4c44:	4b08      	ldr	r3, [pc, #32]	; (4c68 <system_gclk_chan_disable+0x48>)
    4c46:	885b      	ldrh	r3, [r3, #2]
    4c48:	045b      	lsls	r3, r3, #17
    4c4a:	d4fb      	bmi.n	4c44 <system_gclk_chan_disable+0x24>
    4c4c:	4806      	ldr	r0, [pc, #24]	; (4c68 <system_gclk_chan_disable+0x48>)
    4c4e:	8841      	ldrh	r1, [r0, #2]
    4c50:	0213      	lsls	r3, r2, #8
    4c52:	4a06      	ldr	r2, [pc, #24]	; (4c6c <system_gclk_chan_disable+0x4c>)
    4c54:	400a      	ands	r2, r1
    4c56:	4313      	orrs	r3, r2
    4c58:	8043      	strh	r3, [r0, #2]
    4c5a:	4b06      	ldr	r3, [pc, #24]	; (4c74 <system_gclk_chan_disable+0x54>)
    4c5c:	4798      	blx	r3
    4c5e:	bd10      	pop	{r4, pc}
    4c60:	000046a9 	.word	0x000046a9
    4c64:	40000c02 	.word	0x40000c02
    4c68:	40000c00 	.word	0x40000c00
    4c6c:	fffff0ff 	.word	0xfffff0ff
    4c70:	ffffbfff 	.word	0xffffbfff
    4c74:	000046e9 	.word	0x000046e9

00004c78 <system_gclk_chan_set_config>:
    4c78:	b510      	push	{r4, lr}
    4c7a:	780c      	ldrb	r4, [r1, #0]
    4c7c:	0224      	lsls	r4, r4, #8
    4c7e:	4304      	orrs	r4, r0
    4c80:	4b02      	ldr	r3, [pc, #8]	; (4c8c <system_gclk_chan_set_config+0x14>)
    4c82:	4798      	blx	r3
    4c84:	b2a4      	uxth	r4, r4
    4c86:	4b02      	ldr	r3, [pc, #8]	; (4c90 <system_gclk_chan_set_config+0x18>)
    4c88:	805c      	strh	r4, [r3, #2]
    4c8a:	bd10      	pop	{r4, pc}
    4c8c:	00004c21 	.word	0x00004c21
    4c90:	40000c00 	.word	0x40000c00

00004c94 <system_gclk_chan_get_hz>:
    4c94:	b510      	push	{r4, lr}
    4c96:	0004      	movs	r4, r0
    4c98:	4b06      	ldr	r3, [pc, #24]	; (4cb4 <system_gclk_chan_get_hz+0x20>)
    4c9a:	4798      	blx	r3
    4c9c:	4b06      	ldr	r3, [pc, #24]	; (4cb8 <system_gclk_chan_get_hz+0x24>)
    4c9e:	701c      	strb	r4, [r3, #0]
    4ca0:	4b06      	ldr	r3, [pc, #24]	; (4cbc <system_gclk_chan_get_hz+0x28>)
    4ca2:	885c      	ldrh	r4, [r3, #2]
    4ca4:	0524      	lsls	r4, r4, #20
    4ca6:	0f24      	lsrs	r4, r4, #28
    4ca8:	4b05      	ldr	r3, [pc, #20]	; (4cc0 <system_gclk_chan_get_hz+0x2c>)
    4caa:	4798      	blx	r3
    4cac:	0020      	movs	r0, r4
    4cae:	4b05      	ldr	r3, [pc, #20]	; (4cc4 <system_gclk_chan_get_hz+0x30>)
    4cb0:	4798      	blx	r3
    4cb2:	bd10      	pop	{r4, pc}
    4cb4:	000046a9 	.word	0x000046a9
    4cb8:	40000c02 	.word	0x40000c02
    4cbc:	40000c00 	.word	0x40000c00
    4cc0:	000046e9 	.word	0x000046e9
    4cc4:	00004b45 	.word	0x00004b45

00004cc8 <system_interrupt_set_priority>:
    4cc8:	b530      	push	{r4, r5, lr}
    4cca:	2800      	cmp	r0, #0
    4ccc:	db19      	blt.n	4d02 <system_interrupt_set_priority+0x3a>
    4cce:	17c3      	asrs	r3, r0, #31
    4cd0:	2403      	movs	r4, #3
    4cd2:	0022      	movs	r2, r4
    4cd4:	401a      	ands	r2, r3
    4cd6:	1812      	adds	r2, r2, r0
    4cd8:	1092      	asrs	r2, r2, #2
    4cda:	b2d2      	uxtb	r2, r2
    4cdc:	0f9b      	lsrs	r3, r3, #30
    4cde:	18c0      	adds	r0, r0, r3
    4ce0:	4020      	ands	r0, r4
    4ce2:	1ac3      	subs	r3, r0, r3
    4ce4:	00db      	lsls	r3, r3, #3
    4ce6:	b2db      	uxtb	r3, r3
    4ce8:	3306      	adds	r3, #6
    4cea:	b2db      	uxtb	r3, r3
    4cec:	4d09      	ldr	r5, [pc, #36]	; (4d14 <system_interrupt_set_priority+0x4c>)
    4cee:	32c0      	adds	r2, #192	; 0xc0
    4cf0:	0092      	lsls	r2, r2, #2
    4cf2:	5950      	ldr	r0, [r2, r5]
    4cf4:	409c      	lsls	r4, r3
    4cf6:	43a0      	bics	r0, r4
    4cf8:	4099      	lsls	r1, r3
    4cfa:	4301      	orrs	r1, r0
    4cfc:	5151      	str	r1, [r2, r5]
    4cfe:	2000      	movs	r0, #0
    4d00:	bd30      	pop	{r4, r5, pc}
    4d02:	1c43      	adds	r3, r0, #1
    4d04:	d001      	beq.n	4d0a <system_interrupt_set_priority+0x42>
    4d06:	2017      	movs	r0, #23
    4d08:	e7fa      	b.n	4d00 <system_interrupt_set_priority+0x38>
    4d0a:	0789      	lsls	r1, r1, #30
    4d0c:	4b02      	ldr	r3, [pc, #8]	; (4d18 <system_interrupt_set_priority+0x50>)
    4d0e:	6219      	str	r1, [r3, #32]
    4d10:	2000      	movs	r0, #0
    4d12:	e7f5      	b.n	4d00 <system_interrupt_set_priority+0x38>
    4d14:	e000e100 	.word	0xe000e100
    4d18:	e000ed00 	.word	0xe000ed00

00004d1c <_system_pinmux_config>:
    4d1c:	b570      	push	{r4, r5, r6, lr}
    4d1e:	78d3      	ldrb	r3, [r2, #3]
    4d20:	2b00      	cmp	r3, #0
    4d22:	d120      	bne.n	4d66 <_system_pinmux_config+0x4a>
    4d24:	7815      	ldrb	r5, [r2, #0]
    4d26:	2d80      	cmp	r5, #128	; 0x80
    4d28:	d01b      	beq.n	4d62 <_system_pinmux_config+0x46>
    4d2a:	062d      	lsls	r5, r5, #24
    4d2c:	2380      	movs	r3, #128	; 0x80
    4d2e:	025b      	lsls	r3, r3, #9
    4d30:	431d      	orrs	r5, r3
    4d32:	7853      	ldrb	r3, [r2, #1]
    4d34:	2b00      	cmp	r3, #0
    4d36:	d001      	beq.n	4d3c <_system_pinmux_config+0x20>
    4d38:	2b02      	cmp	r3, #2
    4d3a:	d10a      	bne.n	4d52 <_system_pinmux_config+0x36>
    4d3c:	2380      	movs	r3, #128	; 0x80
    4d3e:	029b      	lsls	r3, r3, #10
    4d40:	432b      	orrs	r3, r5
    4d42:	7894      	ldrb	r4, [r2, #2]
    4d44:	2c00      	cmp	r4, #0
    4d46:	d002      	beq.n	4d4e <_system_pinmux_config+0x32>
    4d48:	23c0      	movs	r3, #192	; 0xc0
    4d4a:	02db      	lsls	r3, r3, #11
    4d4c:	432b      	orrs	r3, r5
    4d4e:	6041      	str	r1, [r0, #4]
    4d50:	001d      	movs	r5, r3
    4d52:	7853      	ldrb	r3, [r2, #1]
    4d54:	3b01      	subs	r3, #1
    4d56:	b2db      	uxtb	r3, r3
    4d58:	2b01      	cmp	r3, #1
    4d5a:	d806      	bhi.n	4d6a <_system_pinmux_config+0x4e>
    4d5c:	4b13      	ldr	r3, [pc, #76]	; (4dac <_system_pinmux_config+0x90>)
    4d5e:	401d      	ands	r5, r3
    4d60:	e003      	b.n	4d6a <_system_pinmux_config+0x4e>
    4d62:	2500      	movs	r5, #0
    4d64:	e7e5      	b.n	4d32 <_system_pinmux_config+0x16>
    4d66:	6041      	str	r1, [r0, #4]
    4d68:	2500      	movs	r5, #0
    4d6a:	040c      	lsls	r4, r1, #16
    4d6c:	0c24      	lsrs	r4, r4, #16
    4d6e:	0c0b      	lsrs	r3, r1, #16
    4d70:	432c      	orrs	r4, r5
    4d72:	26a0      	movs	r6, #160	; 0xa0
    4d74:	05f6      	lsls	r6, r6, #23
    4d76:	4334      	orrs	r4, r6
    4d78:	6284      	str	r4, [r0, #40]	; 0x28
    4d7a:	432b      	orrs	r3, r5
    4d7c:	24d0      	movs	r4, #208	; 0xd0
    4d7e:	0624      	lsls	r4, r4, #24
    4d80:	4323      	orrs	r3, r4
    4d82:	6283      	str	r3, [r0, #40]	; 0x28
    4d84:	78d3      	ldrb	r3, [r2, #3]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d10a      	bne.n	4da0 <_system_pinmux_config+0x84>
    4d8a:	036b      	lsls	r3, r5, #13
    4d8c:	d503      	bpl.n	4d96 <_system_pinmux_config+0x7a>
    4d8e:	7893      	ldrb	r3, [r2, #2]
    4d90:	2b01      	cmp	r3, #1
    4d92:	d006      	beq.n	4da2 <_system_pinmux_config+0x86>
    4d94:	6141      	str	r1, [r0, #20]
    4d96:	7853      	ldrb	r3, [r2, #1]
    4d98:	3b01      	subs	r3, #1
    4d9a:	b2db      	uxtb	r3, r3
    4d9c:	2b01      	cmp	r3, #1
    4d9e:	d902      	bls.n	4da6 <_system_pinmux_config+0x8a>
    4da0:	bd70      	pop	{r4, r5, r6, pc}
    4da2:	6181      	str	r1, [r0, #24]
    4da4:	e7f7      	b.n	4d96 <_system_pinmux_config+0x7a>
    4da6:	6081      	str	r1, [r0, #8]
    4da8:	e7fa      	b.n	4da0 <_system_pinmux_config+0x84>
    4daa:	46c0      	nop			; (mov r8, r8)
    4dac:	fffbffff 	.word	0xfffbffff

00004db0 <system_pinmux_pin_set_config>:
    4db0:	b510      	push	{r4, lr}
    4db2:	000a      	movs	r2, r1
    4db4:	09c1      	lsrs	r1, r0, #7
    4db6:	0943      	lsrs	r3, r0, #5
    4db8:	2900      	cmp	r1, #0
    4dba:	d10b      	bne.n	4dd4 <system_pinmux_pin_set_config+0x24>
    4dbc:	01db      	lsls	r3, r3, #7
    4dbe:	4906      	ldr	r1, [pc, #24]	; (4dd8 <system_pinmux_pin_set_config+0x28>)
    4dc0:	468c      	mov	ip, r1
    4dc2:	4463      	add	r3, ip
    4dc4:	241f      	movs	r4, #31
    4dc6:	4020      	ands	r0, r4
    4dc8:	2101      	movs	r1, #1
    4dca:	4081      	lsls	r1, r0
    4dcc:	0018      	movs	r0, r3
    4dce:	4b03      	ldr	r3, [pc, #12]	; (4ddc <system_pinmux_pin_set_config+0x2c>)
    4dd0:	4798      	blx	r3
    4dd2:	bd10      	pop	{r4, pc}
    4dd4:	2300      	movs	r3, #0
    4dd6:	e7f5      	b.n	4dc4 <system_pinmux_pin_set_config+0x14>
    4dd8:	41004400 	.word	0x41004400
    4ddc:	00004d1d 	.word	0x00004d1d

00004de0 <_system_dummy_init>:
    4de0:	4770      	bx	lr
	...

00004de4 <system_init>:
    4de4:	b510      	push	{r4, lr}
    4de6:	4b05      	ldr	r3, [pc, #20]	; (4dfc <system_init+0x18>)
    4de8:	4798      	blx	r3
    4dea:	4b05      	ldr	r3, [pc, #20]	; (4e00 <system_init+0x1c>)
    4dec:	4798      	blx	r3
    4dee:	4b05      	ldr	r3, [pc, #20]	; (4e04 <system_init+0x20>)
    4df0:	4798      	blx	r3
    4df2:	4b05      	ldr	r3, [pc, #20]	; (4e08 <system_init+0x24>)
    4df4:	4798      	blx	r3
    4df6:	4b05      	ldr	r3, [pc, #20]	; (4e0c <system_init+0x28>)
    4df8:	4798      	blx	r3
    4dfa:	bd10      	pop	{r4, pc}
    4dfc:	0000491d 	.word	0x0000491d
    4e00:	000046a5 	.word	0x000046a5
    4e04:	00004de1 	.word	0x00004de1
    4e08:	0000032d 	.word	0x0000032d
    4e0c:	00004de1 	.word	0x00004de1

00004e10 <Dummy_Handler>:
    4e10:	e7fe      	b.n	4e10 <Dummy_Handler>
	...

00004e14 <Reset_Handler>:
    4e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e16:	4a23      	ldr	r2, [pc, #140]	; (4ea4 <Reset_Handler+0x90>)
    4e18:	4b23      	ldr	r3, [pc, #140]	; (4ea8 <Reset_Handler+0x94>)
    4e1a:	429a      	cmp	r2, r3
    4e1c:	d009      	beq.n	4e32 <Reset_Handler+0x1e>
    4e1e:	4b22      	ldr	r3, [pc, #136]	; (4ea8 <Reset_Handler+0x94>)
    4e20:	4a20      	ldr	r2, [pc, #128]	; (4ea4 <Reset_Handler+0x90>)
    4e22:	e003      	b.n	4e2c <Reset_Handler+0x18>
    4e24:	6811      	ldr	r1, [r2, #0]
    4e26:	6019      	str	r1, [r3, #0]
    4e28:	3304      	adds	r3, #4
    4e2a:	3204      	adds	r2, #4
    4e2c:	491f      	ldr	r1, [pc, #124]	; (4eac <Reset_Handler+0x98>)
    4e2e:	428b      	cmp	r3, r1
    4e30:	d3f8      	bcc.n	4e24 <Reset_Handler+0x10>
    4e32:	4b1f      	ldr	r3, [pc, #124]	; (4eb0 <Reset_Handler+0x9c>)
    4e34:	e002      	b.n	4e3c <Reset_Handler+0x28>
    4e36:	2200      	movs	r2, #0
    4e38:	601a      	str	r2, [r3, #0]
    4e3a:	3304      	adds	r3, #4
    4e3c:	4a1d      	ldr	r2, [pc, #116]	; (4eb4 <Reset_Handler+0xa0>)
    4e3e:	4293      	cmp	r3, r2
    4e40:	d3f9      	bcc.n	4e36 <Reset_Handler+0x22>
    4e42:	4a1d      	ldr	r2, [pc, #116]	; (4eb8 <Reset_Handler+0xa4>)
    4e44:	21ff      	movs	r1, #255	; 0xff
    4e46:	4b1d      	ldr	r3, [pc, #116]	; (4ebc <Reset_Handler+0xa8>)
    4e48:	438b      	bics	r3, r1
    4e4a:	6093      	str	r3, [r2, #8]
    4e4c:	39fd      	subs	r1, #253	; 0xfd
    4e4e:	2390      	movs	r3, #144	; 0x90
    4e50:	005b      	lsls	r3, r3, #1
    4e52:	4a1b      	ldr	r2, [pc, #108]	; (4ec0 <Reset_Handler+0xac>)
    4e54:	50d1      	str	r1, [r2, r3]
    4e56:	4a1b      	ldr	r2, [pc, #108]	; (4ec4 <Reset_Handler+0xb0>)
    4e58:	78d3      	ldrb	r3, [r2, #3]
    4e5a:	2503      	movs	r5, #3
    4e5c:	43ab      	bics	r3, r5
    4e5e:	2402      	movs	r4, #2
    4e60:	4323      	orrs	r3, r4
    4e62:	70d3      	strb	r3, [r2, #3]
    4e64:	78d3      	ldrb	r3, [r2, #3]
    4e66:	270c      	movs	r7, #12
    4e68:	43bb      	bics	r3, r7
    4e6a:	2608      	movs	r6, #8
    4e6c:	4333      	orrs	r3, r6
    4e6e:	70d3      	strb	r3, [r2, #3]
    4e70:	4b15      	ldr	r3, [pc, #84]	; (4ec8 <Reset_Handler+0xb4>)
    4e72:	7b98      	ldrb	r0, [r3, #14]
    4e74:	2230      	movs	r2, #48	; 0x30
    4e76:	4390      	bics	r0, r2
    4e78:	2220      	movs	r2, #32
    4e7a:	4310      	orrs	r0, r2
    4e7c:	7398      	strb	r0, [r3, #14]
    4e7e:	7b99      	ldrb	r1, [r3, #14]
    4e80:	43b9      	bics	r1, r7
    4e82:	4331      	orrs	r1, r6
    4e84:	7399      	strb	r1, [r3, #14]
    4e86:	7b9a      	ldrb	r2, [r3, #14]
    4e88:	43aa      	bics	r2, r5
    4e8a:	4322      	orrs	r2, r4
    4e8c:	739a      	strb	r2, [r3, #14]
    4e8e:	4a0f      	ldr	r2, [pc, #60]	; (4ecc <Reset_Handler+0xb8>)
    4e90:	6851      	ldr	r1, [r2, #4]
    4e92:	2380      	movs	r3, #128	; 0x80
    4e94:	430b      	orrs	r3, r1
    4e96:	6053      	str	r3, [r2, #4]
    4e98:	4b0d      	ldr	r3, [pc, #52]	; (4ed0 <Reset_Handler+0xbc>)
    4e9a:	4798      	blx	r3
    4e9c:	4b0d      	ldr	r3, [pc, #52]	; (4ed4 <Reset_Handler+0xc0>)
    4e9e:	4798      	blx	r3
    4ea0:	e7fe      	b.n	4ea0 <Reset_Handler+0x8c>
    4ea2:	46c0      	nop			; (mov r8, r8)
    4ea4:	0000605c 	.word	0x0000605c
    4ea8:	20000000 	.word	0x20000000
    4eac:	20000074 	.word	0x20000074
    4eb0:	20000074 	.word	0x20000074
    4eb4:	20000a3c 	.word	0x20000a3c
    4eb8:	e000ed00 	.word	0xe000ed00
    4ebc:	00000000 	.word	0x00000000
    4ec0:	41007000 	.word	0x41007000
    4ec4:	41005000 	.word	0x41005000
    4ec8:	41004800 	.word	0x41004800
    4ecc:	41004000 	.word	0x41004000
    4ed0:	00005485 	.word	0x00005485
    4ed4:	00005051 	.word	0x00005051

00004ed8 <_sbrk>:
    4ed8:	0003      	movs	r3, r0
    4eda:	4a06      	ldr	r2, [pc, #24]	; (4ef4 <_sbrk+0x1c>)
    4edc:	6812      	ldr	r2, [r2, #0]
    4ede:	2a00      	cmp	r2, #0
    4ee0:	d004      	beq.n	4eec <_sbrk+0x14>
    4ee2:	4a04      	ldr	r2, [pc, #16]	; (4ef4 <_sbrk+0x1c>)
    4ee4:	6810      	ldr	r0, [r2, #0]
    4ee6:	18c3      	adds	r3, r0, r3
    4ee8:	6013      	str	r3, [r2, #0]
    4eea:	4770      	bx	lr
    4eec:	4902      	ldr	r1, [pc, #8]	; (4ef8 <_sbrk+0x20>)
    4eee:	4a01      	ldr	r2, [pc, #4]	; (4ef4 <_sbrk+0x1c>)
    4ef0:	6011      	str	r1, [r2, #0]
    4ef2:	e7f6      	b.n	4ee2 <_sbrk+0xa>
    4ef4:	20000430 	.word	0x20000430
    4ef8:	20002a40 	.word	0x20002a40

00004efc <clock_osc8m_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes the 8 MHz oscillator to be used as the
	*  system clock source.
	*/
void clock_osc8m_init(void){
    4efc:	b500      	push	{lr}
    4efe:	b083      	sub	sp, #12
	//create system clock config struct
	struct system_clock_source_osc8m_config osc8_config;

	//config the 8 MHz oscillator
	//divide by 1 = 8 MHz clock
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    4f00:	a801      	add	r0, sp, #4
    4f02:	2300      	movs	r3, #0
    4f04:	7003      	strb	r3, [r0, #0]
	//run on demand
	osc8_config.on_demand = true;
    4f06:	2201      	movs	r2, #1
    4f08:	7082      	strb	r2, [r0, #2]
	//don't run in standby
	osc8_config.run_in_standby = false;
    4f0a:	7043      	strb	r3, [r0, #1]
	    
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    4f0c:	4b01      	ldr	r3, [pc, #4]	; (4f14 <clock_osc8m_init+0x18>)
    4f0e:	4798      	blx	r3
}//end clock_osc8m_init
    4f10:	b003      	add	sp, #12
    4f12:	bd00      	pop	{pc}
    4f14:	000047d1 	.word	0x000047d1

00004f18 <clock_gclk0_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes GCLK0, so it can be used by 
	*  peripherals. Uses the 8 MHz oscillator as its source.
	*/
void clock_gclk0_init(void){
    4f18:	b500      	push	{lr}
    4f1a:	b085      	sub	sp, #20
	//create GLCK0 config struct (for driving peripherals)
	struct system_gclk_gen_config gclk0_config;

	//init MCLK
	system_gclk_init();
    4f1c:	4b0a      	ldr	r3, [pc, #40]	; (4f48 <clock_gclk0_init+0x30>)
    4f1e:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    4f20:	2300      	movs	r3, #0
    4f22:	4a0a      	ldr	r2, [pc, #40]	; (4f4c <clock_gclk0_init+0x34>)
    4f24:	7213      	strb	r3, [r2, #8]
	    
	//set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	    
	//use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    4f26:	a901      	add	r1, sp, #4
    4f28:	2206      	movs	r2, #6
    4f2a:	700a      	strb	r2, [r1, #0]
	//don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    4f2c:	724b      	strb	r3, [r1, #9]
	//We're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    4f2e:	704b      	strb	r3, [r1, #1]
	//division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    4f30:	3a05      	subs	r2, #5
    4f32:	604a      	str	r2, [r1, #4]
	//don't run in standby
	gclk0_config.run_in_standby = false;
    4f34:	720b      	strb	r3, [r1, #8]
	//set GCLK0's config
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    4f36:	2000      	movs	r0, #0
    4f38:	4b05      	ldr	r3, [pc, #20]	; (4f50 <clock_gclk0_init+0x38>)
    4f3a:	4798      	blx	r3
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    4f3c:	2000      	movs	r0, #0
    4f3e:	4b05      	ldr	r3, [pc, #20]	; (4f54 <clock_gclk0_init+0x3c>)
    4f40:	4798      	blx	r3
}//end clock_gclk0_init
    4f42:	b005      	add	sp, #20
    4f44:	bd00      	pop	{pc}
    4f46:	46c0      	nop			; (mov r8, r8)
    4f48:	000049f9 	.word	0x000049f9
    4f4c:	40000400 	.word	0x40000400
    4f50:	00004a1d 	.word	0x00004a1d
    4f54:	00004aed 	.word	0x00004aed

00004f58 <sys_clock_init>:
void sys_clock_init(void){
    4f58:	b510      	push	{r4, lr}
	clock_osc8m_init();
    4f5a:	4b05      	ldr	r3, [pc, #20]	; (4f70 <sys_clock_init+0x18>)
    4f5c:	4798      	blx	r3
	clock_gclk0_init();
    4f5e:	4b05      	ldr	r3, [pc, #20]	; (4f74 <sys_clock_init+0x1c>)
    4f60:	4798      	blx	r3
	clock_osc32k_init();
    4f62:	4b05      	ldr	r3, [pc, #20]	; (4f78 <sys_clock_init+0x20>)
    4f64:	4798      	blx	r3
	clock_gclk2_init();
    4f66:	4b05      	ldr	r3, [pc, #20]	; (4f7c <sys_clock_init+0x24>)
    4f68:	4798      	blx	r3
	delay_init();
    4f6a:	4b05      	ldr	r3, [pc, #20]	; (4f80 <sys_clock_init+0x28>)
    4f6c:	4798      	blx	r3
}//end sys_clock_init
    4f6e:	bd10      	pop	{r4, pc}
    4f70:	00004efd 	.word	0x00004efd
    4f74:	00004f19 	.word	0x00004f19
    4f78:	00003779 	.word	0x00003779
    4f7c:	000037a1 	.word	0x000037a1
    4f80:	00000115 	.word	0x00000115

00004f84 <configure_port_pins>:
/* Function Name    : configure_port_pins
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config select pins for lcd 
	*/
void configure_port_pins(void){
    4f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f86:	46c6      	mov	lr, r8
    4f88:	b500      	push	{lr}
    4f8a:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    4f8c:	ac01      	add	r4, sp, #4
    4f8e:	2501      	movs	r5, #1
    4f90:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4f92:	2300      	movs	r3, #0
    4f94:	4698      	mov	r8, r3
    4f96:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);

	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4f98:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PB16, &config_port_pin);
    4f9a:	0021      	movs	r1, r4
    4f9c:	2030      	movs	r0, #48	; 0x30
    4f9e:	4e0f      	ldr	r6, [pc, #60]	; (4fdc <configure_port_pins+0x58>)
    4fa0:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4fa2:	4f0f      	ldr	r7, [pc, #60]	; (4fe0 <configure_port_pins+0x5c>)
    4fa4:	2280      	movs	r2, #128	; 0x80
    4fa6:	0252      	lsls	r2, r2, #9
    4fa8:	4b0e      	ldr	r3, [pc, #56]	; (4fe4 <configure_port_pins+0x60>)
    4faa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB16, 1);

	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4fac:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PA19, &config_port_pin);
    4fae:	0021      	movs	r1, r4
    4fb0:	2013      	movs	r0, #19
    4fb2:	47b0      	blx	r6
    4fb4:	2380      	movs	r3, #128	; 0x80
    4fb6:	031b      	lsls	r3, r3, #12
    4fb8:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(PIN_PA19, 1);

	// configure outputs
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4fba:	7025      	strb	r5, [r4, #0]
	config_port_pin.input_pull = LCD_PD_PULL;
    4fbc:	4643      	mov	r3, r8
    4fbe:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(LCD_PD, &config_port_pin);
    4fc0:	0021      	movs	r1, r4
    4fc2:	2008      	movs	r0, #8
    4fc4:	47b0      	blx	r6
    4fc6:	2380      	movs	r3, #128	; 0x80
    4fc8:	005b      	lsls	r3, r3, #1
    4fca:	61bb      	str	r3, [r7, #24]
	
	port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
	
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4fcc:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(EEPROM_CS,&config_port_pin);
    4fce:	0021      	movs	r1, r4
    4fd0:	200d      	movs	r0, #13
    4fd2:	47b0      	blx	r6
	port_pin_set_output_level(PIN_PB15, true);	
	
*/


}//end configure_port_pins
    4fd4:	b002      	add	sp, #8
    4fd6:	bc04      	pop	{r2}
    4fd8:	4690      	mov	r8, r2
    4fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fdc:	00004681 	.word	0x00004681
    4fe0:	41004400 	.word	0x41004400
    4fe4:	41004480 	.word	0x41004480

00004fe8 <sim_system_init>:
void sim_system_init(void){
    4fe8:	b510      	push	{r4, lr}
	system_init();
    4fea:	4b0d      	ldr	r3, [pc, #52]	; (5020 <sim_system_init+0x38>)
    4fec:	4798      	blx	r3
	sys_clock_init();
    4fee:	4b0d      	ldr	r3, [pc, #52]	; (5024 <sim_system_init+0x3c>)
    4ff0:	4798      	blx	r3
	configure_port_pins();
    4ff2:	4b0d      	ldr	r3, [pc, #52]	; (5028 <sim_system_init+0x40>)
    4ff4:	4798      	blx	r3
	lcd_spi_init();
    4ff6:	4b0d      	ldr	r3, [pc, #52]	; (502c <sim_system_init+0x44>)
    4ff8:	4798      	blx	r3
	configure_ext_ints();
    4ffa:	4b0d      	ldr	r3, [pc, #52]	; (5030 <sim_system_init+0x48>)
    4ffc:	4798      	blx	r3
	configure_ext_int_callback();
    4ffe:	4b0d      	ldr	r3, [pc, #52]	; (5034 <sim_system_init+0x4c>)
    5000:	4798      	blx	r3
	lcd_init_seq(); 
    5002:	4b0d      	ldr	r3, [pc, #52]	; (5038 <sim_system_init+0x50>)
    5004:	4798      	blx	r3
	lcd_int_mask(LCD_DEFAULT_MASK);
    5006:	2104      	movs	r1, #4
    5008:	480c      	ldr	r0, [pc, #48]	; (503c <sim_system_init+0x54>)
    500a:	4c0d      	ldr	r4, [pc, #52]	; (5040 <sim_system_init+0x58>)
    500c:	47a0      	blx	r4
	lcd_int_enable();
    500e:	2101      	movs	r1, #1
    5010:	480c      	ldr	r0, [pc, #48]	; (5044 <sim_system_init+0x5c>)
    5012:	47a0      	blx	r4
	spieeprom_init();
    5014:	4b0c      	ldr	r3, [pc, #48]	; (5048 <sim_system_init+0x60>)
    5016:	4798      	blx	r3
    uartfiber_init();
    5018:	4b0c      	ldr	r3, [pc, #48]	; (504c <sim_system_init+0x64>)
    501a:	4798      	blx	r3
}//end sim_system_init
    501c:	bd10      	pop	{r4, pc}
    501e:	46c0      	nop			; (mov r8, r8)
    5020:	00004de5 	.word	0x00004de5
    5024:	00004f59 	.word	0x00004f59
    5028:	00004f85 	.word	0x00004f85
    502c:	000037d9 	.word	0x000037d9
    5030:	00003675 	.word	0x00003675
    5034:	0000369d 	.word	0x0000369d
    5038:	00003b1d 	.word	0x00003b1d
    503c:	003020b0 	.word	0x003020b0
    5040:	00003a21 	.word	0x00003a21
    5044:	003020ac 	.word	0x003020ac
    5048:	000017ad 	.word	0x000017ad
    504c:	000019cd 	.word	0x000019cd

00005050 <main>:
int main(void){
    5050:	b5f0      	push	{r4, r5, r6, r7, lr}
    5052:	b089      	sub	sp, #36	; 0x24
	sim_system_init();
    5054:	4b83      	ldr	r3, [pc, #524]	; (5264 <main+0x214>)
    5056:	4798      	blx	r3
	cpu_irq_enable();
    5058:	4e83      	ldr	r6, [pc, #524]	; (5268 <main+0x218>)
    505a:	2401      	movs	r4, #1
    505c:	7034      	strb	r4, [r6, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    505e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5062:	b662      	cpsie	i
	configure_rtc_calendar();
    5064:	4b81      	ldr	r3, [pc, #516]	; (526c <main+0x21c>)
    5066:	4798      	blx	r3
	phost = &host;
    5068:	4d81      	ldr	r5, [pc, #516]	; (5270 <main+0x220>)
    506a:	4882      	ldr	r0, [pc, #520]	; (5274 <main+0x224>)
    506c:	6028      	str	r0, [r5, #0]
	Ft_Gpu_Hal_Open(phost);
    506e:	4b82      	ldr	r3, [pc, #520]	; (5278 <main+0x228>)
    5070:	4798      	blx	r3
	Ft_Gpu_Hal_Wr8(phost, REG_INT_EN, 1);
    5072:	2201      	movs	r2, #1
    5074:	4981      	ldr	r1, [pc, #516]	; (527c <main+0x22c>)
    5076:	6828      	ldr	r0, [r5, #0]
    5078:	4f81      	ldr	r7, [pc, #516]	; (5280 <main+0x230>)
    507a:	47b8      	blx	r7
	Ft_Gpu_Hal_Wr8(phost, REG_INT_MASK, 6);
    507c:	6828      	ldr	r0, [r5, #0]
    507e:	2206      	movs	r2, #6
    5080:	4980      	ldr	r1, [pc, #512]	; (5284 <main+0x234>)
    5082:	47b8      	blx	r7
	delay_ms(2000);
    5084:	20fa      	movs	r0, #250	; 0xfa
    5086:	00c0      	lsls	r0, r0, #3
    5088:	4b7f      	ldr	r3, [pc, #508]	; (5288 <main+0x238>)
    508a:	4798      	blx	r3
	cpu_irq_enable();
    508c:	7034      	strb	r4, [r6, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    508e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5092:	b662      	cpsie	i
	mstimer_init();
    5094:	4b7d      	ldr	r3, [pc, #500]	; (528c <main+0x23c>)
    5096:	4798      	blx	r3
	rs485_baud_rate_set(38400);
    5098:	2096      	movs	r0, #150	; 0x96
    509a:	0200      	lsls	r0, r0, #8
    509c:	4b7c      	ldr	r3, [pc, #496]	; (5290 <main+0x240>)
    509e:	4798      	blx	r3
	rs485_init();
    50a0:	4b7c      	ldr	r3, [pc, #496]	; (5294 <main+0x244>)
    50a2:	4798      	blx	r3
	mstimer_set(&Blink_Timer, 125);
    50a4:	217d      	movs	r1, #125	; 0x7d
    50a6:	487c      	ldr	r0, [pc, #496]	; (5298 <main+0x248>)
    50a8:	4b7c      	ldr	r3, [pc, #496]	; (529c <main+0x24c>)
    50aa:	4798      	blx	r3
	data1.rssi_values.GHz24RSSI = 0x45;
    50ac:	a905      	add	r1, sp, #20
    50ae:	2345      	movs	r3, #69	; 0x45
    50b0:	72cb      	strb	r3, [r1, #11]
	data1.rssi_values.MHz169RSSI = 0x45;
    50b2:	724b      	strb	r3, [r1, #9]
	data1.rssi_values.MHz27RSSI = 0x45;
    50b4:	720b      	strb	r3, [r1, #8]
	data1.rssi_values.MHz915RSSI = 0x45;
    50b6:	728b      	strb	r3, [r1, #10]
	data1.timestamp.year = 2021;
    50b8:	4b79      	ldr	r3, [pc, #484]	; (52a0 <main+0x250>)
    50ba:	80cb      	strh	r3, [r1, #6]
	data1.timestamp.month = 3;
    50bc:	2303      	movs	r3, #3
    50be:	714b      	strb	r3, [r1, #5]
	data1.timestamp.day = 12;
    50c0:	3309      	adds	r3, #9
    50c2:	710b      	strb	r3, [r1, #4]
	data1.timestamp.pm = true;
    50c4:	70cc      	strb	r4, [r1, #3]
	data1.timestamp.hour = 5;
    50c6:	3b07      	subs	r3, #7
    50c8:	708b      	strb	r3, [r1, #2]
	data1.timestamp.minute = 33;
    50ca:	331c      	adds	r3, #28
    50cc:	704b      	strb	r3, [r1, #1]
	spi_eeprom_write_address((struct shield_data *) (sizeof(struct shield_data) * 10), &data1);
    50ce:	2078      	movs	r0, #120	; 0x78
    50d0:	4b74      	ldr	r3, [pc, #464]	; (52a4 <main+0x254>)
    50d2:	4798      	blx	r3
    50d4:	e010      	b.n	50f8 <main+0xa8>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    50d6:	33ff      	adds	r3, #255	; 0xff
    50d8:	e04a      	b.n	5170 <main+0x120>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    50da:	33fe      	adds	r3, #254	; 0xfe
    50dc:	e05f      	b.n	519e <main+0x14e>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    50de:	33fd      	adds	r3, #253	; 0xfd
    50e0:	e075      	b.n	51ce <main+0x17e>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    50e2:	33fc      	adds	r3, #252	; 0xfc
    50e4:	e08b      	b.n	51fe <main+0x1ae>
			if(tempTag == attn)			    attnOp(&current_fiber1_data);	//attnOp(current_fiber1_data, current_fiber2_data);
    50e6:	4870      	ldr	r0, [pc, #448]	; (52a8 <main+0x258>)
    50e8:	4b70      	ldr	r3, [pc, #448]	; (52ac <main+0x25c>)
    50ea:	4798      	blx	r3
			tempTag = 0;
    50ec:	2200      	movs	r2, #0
    50ee:	4b70      	ldr	r3, [pc, #448]	; (52b0 <main+0x260>)
    50f0:	701a      	strb	r2, [r3, #0]
			delay_ms(50);
    50f2:	2032      	movs	r0, #50	; 0x32
    50f4:	4b64      	ldr	r3, [pc, #400]	; (5288 <main+0x238>)
    50f6:	4798      	blx	r3
    50f8:	4d6e      	ldr	r5, [pc, #440]	; (52b4 <main+0x264>)
    50fa:	4e6f      	ldr	r6, [pc, #444]	; (52b8 <main+0x268>)
    50fc:	2780      	movs	r7, #128	; 0x80
    50fe:	027f      	lsls	r7, r7, #9
    5100:	61b7      	str	r7, [r6, #24]
		delay_ms(1);
    5102:	2001      	movs	r0, #1
    5104:	4c60      	ldr	r4, [pc, #384]	; (5288 <main+0x238>)
    5106:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    5108:	6177      	str	r7, [r6, #20]
		delay_ms(1);
    510a:	2001      	movs	r0, #1
    510c:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    510e:	2680      	movs	r6, #128	; 0x80
    5110:	0336      	lsls	r6, r6, #12
    5112:	61ae      	str	r6, [r5, #24]
		delay_ms(1);
    5114:	2001      	movs	r0, #1
    5116:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    5118:	616e      	str	r6, [r5, #20]
		tag = 0;
    511a:	4d68      	ldr	r5, [pc, #416]	; (52bc <main+0x26c>)
    511c:	2300      	movs	r3, #0
    511e:	702b      	strb	r3, [r5, #0]
		disStart();
    5120:	4b67      	ldr	r3, [pc, #412]	; (52c0 <main+0x270>)
    5122:	4798      	blx	r3
		Ft_Gpu_CoCmd_Gradient(phost, 0, 0x060A39, 0, disWid, disHei, 0x0A4F7A);
    5124:	4c52      	ldr	r4, [pc, #328]	; (5270 <main+0x220>)
    5126:	6820      	ldr	r0, [r4, #0]
    5128:	4b66      	ldr	r3, [pc, #408]	; (52c4 <main+0x274>)
    512a:	9302      	str	r3, [sp, #8]
    512c:	23f0      	movs	r3, #240	; 0xf0
    512e:	005b      	lsls	r3, r3, #1
    5130:	9301      	str	r3, [sp, #4]
    5132:	3341      	adds	r3, #65	; 0x41
    5134:	33ff      	adds	r3, #255	; 0xff
    5136:	9300      	str	r3, [sp, #0]
    5138:	2300      	movs	r3, #0
    513a:	4a63      	ldr	r2, [pc, #396]	; (52c8 <main+0x278>)
    513c:	2100      	movs	r1, #0
    513e:	4e63      	ldr	r6, [pc, #396]	; (52cc <main+0x27c>)
    5140:	47b0      	blx	r6
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    5142:	2180      	movs	r1, #128	; 0x80
    5144:	04c9      	lsls	r1, r1, #19
    5146:	6820      	ldr	r0, [r4, #0]
    5148:	4e61      	ldr	r6, [pc, #388]	; (52d0 <main+0x280>)
    514a:	47b0      	blx	r6
		printTime();
    514c:	4b61      	ldr	r3, [pc, #388]	; (52d4 <main+0x284>)
    514e:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    5150:	4961      	ldr	r1, [pc, #388]	; (52d8 <main+0x288>)
    5152:	6820      	ldr	r0, [r4, #0]
    5154:	47b0      	blx	r6
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    5156:	4961      	ldr	r1, [pc, #388]	; (52dc <main+0x28c>)
    5158:	6820      	ldr	r0, [r4, #0]
    515a:	4b61      	ldr	r3, [pc, #388]	; (52e0 <main+0x290>)
    515c:	4798      	blx	r3
    515e:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_Hal_WrCmd32(phost,TAG(attn));
    5160:	4960      	ldr	r1, [pc, #384]	; (52e4 <main+0x294>)
    5162:	6820      	ldr	r0, [r4, #0]
    5164:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    5166:	6820      	ldr	r0, [r4, #0]
    5168:	782b      	ldrb	r3, [r5, #0]
    516a:	2b01      	cmp	r3, #1
    516c:	d0b3      	beq.n	50d6 <main+0x86>
    516e:	2300      	movs	r3, #0
    5170:	4a5d      	ldr	r2, [pc, #372]	; (52e8 <main+0x298>)
    5172:	9203      	str	r2, [sp, #12]
    5174:	9302      	str	r3, [sp, #8]
    5176:	231e      	movs	r3, #30
    5178:	9301      	str	r3, [sp, #4]
    517a:	335a      	adds	r3, #90	; 0x5a
    517c:	9300      	str	r3, [sp, #0]
    517e:	3350      	adds	r3, #80	; 0x50
    5180:	226e      	movs	r2, #110	; 0x6e
    5182:	21b8      	movs	r1, #184	; 0xb8
    5184:	4c59      	ldr	r4, [pc, #356]	; (52ec <main+0x29c>)
    5186:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(hist));
    5188:	4c39      	ldr	r4, [pc, #228]	; (5270 <main+0x220>)
    518a:	4959      	ldr	r1, [pc, #356]	; (52f0 <main+0x2a0>)
    518c:	6820      	ldr	r0, [r4, #0]
    518e:	4b50      	ldr	r3, [pc, #320]	; (52d0 <main+0x280>)
    5190:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    5192:	6820      	ldr	r0, [r4, #0]
    5194:	4b49      	ldr	r3, [pc, #292]	; (52bc <main+0x26c>)
    5196:	781b      	ldrb	r3, [r3, #0]
    5198:	2b02      	cmp	r3, #2
    519a:	d09e      	beq.n	50da <main+0x8a>
    519c:	2300      	movs	r3, #0
    519e:	4a55      	ldr	r2, [pc, #340]	; (52f4 <main+0x2a4>)
    51a0:	9203      	str	r2, [sp, #12]
    51a2:	9302      	str	r3, [sp, #8]
    51a4:	231e      	movs	r3, #30
    51a6:	9301      	str	r3, [sp, #4]
    51a8:	335a      	adds	r3, #90	; 0x5a
    51aa:	9300      	str	r3, [sp, #0]
    51ac:	3350      	adds	r3, #80	; 0x50
    51ae:	226e      	movs	r2, #110	; 0x6e
    51b0:	21d0      	movs	r1, #208	; 0xd0
    51b2:	0049      	lsls	r1, r1, #1
    51b4:	4c4d      	ldr	r4, [pc, #308]	; (52ec <main+0x29c>)
    51b6:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(rssi));
    51b8:	4c2d      	ldr	r4, [pc, #180]	; (5270 <main+0x220>)
    51ba:	494f      	ldr	r1, [pc, #316]	; (52f8 <main+0x2a8>)
    51bc:	6820      	ldr	r0, [r4, #0]
    51be:	4b44      	ldr	r3, [pc, #272]	; (52d0 <main+0x280>)
    51c0:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    51c2:	6820      	ldr	r0, [r4, #0]
    51c4:	4b3d      	ldr	r3, [pc, #244]	; (52bc <main+0x26c>)
    51c6:	781b      	ldrb	r3, [r3, #0]
    51c8:	2b03      	cmp	r3, #3
    51ca:	d088      	beq.n	50de <main+0x8e>
    51cc:	2300      	movs	r3, #0
    51ce:	4a4b      	ldr	r2, [pc, #300]	; (52fc <main+0x2ac>)
    51d0:	9203      	str	r2, [sp, #12]
    51d2:	9302      	str	r3, [sp, #8]
    51d4:	231e      	movs	r3, #30
    51d6:	9301      	str	r3, [sp, #4]
    51d8:	335a      	adds	r3, #90	; 0x5a
    51da:	9300      	str	r3, [sp, #0]
    51dc:	3350      	adds	r3, #80	; 0x50
    51de:	22f9      	movs	r2, #249	; 0xf9
    51e0:	21b8      	movs	r1, #184	; 0xb8
    51e2:	4c42      	ldr	r4, [pc, #264]	; (52ec <main+0x29c>)
    51e4:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sett));
    51e6:	4c22      	ldr	r4, [pc, #136]	; (5270 <main+0x220>)
    51e8:	4945      	ldr	r1, [pc, #276]	; (5300 <main+0x2b0>)
    51ea:	6820      	ldr	r0, [r4, #0]
    51ec:	4b38      	ldr	r3, [pc, #224]	; (52d0 <main+0x280>)
    51ee:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    51f0:	6820      	ldr	r0, [r4, #0]
    51f2:	4b32      	ldr	r3, [pc, #200]	; (52bc <main+0x26c>)
    51f4:	781b      	ldrb	r3, [r3, #0]
    51f6:	2b04      	cmp	r3, #4
    51f8:	d100      	bne.n	51fc <main+0x1ac>
    51fa:	e772      	b.n	50e2 <main+0x92>
    51fc:	2300      	movs	r3, #0
    51fe:	4a41      	ldr	r2, [pc, #260]	; (5304 <main+0x2b4>)
    5200:	9203      	str	r2, [sp, #12]
    5202:	9302      	str	r3, [sp, #8]
    5204:	231e      	movs	r3, #30
    5206:	9301      	str	r3, [sp, #4]
    5208:	335a      	adds	r3, #90	; 0x5a
    520a:	9300      	str	r3, [sp, #0]
    520c:	3350      	adds	r3, #80	; 0x50
    520e:	22f9      	movs	r2, #249	; 0xf9
    5210:	21d0      	movs	r1, #208	; 0xd0
    5212:	0049      	lsls	r1, r1, #1
    5214:	4c35      	ldr	r4, [pc, #212]	; (52ec <main+0x29c>)
    5216:	47a0      	blx	r4
		disEnd();
    5218:	4b3b      	ldr	r3, [pc, #236]	; (5308 <main+0x2b8>)
    521a:	4798      	blx	r3
		if(tag!=0)		tempTag = tag;
    521c:	4b27      	ldr	r3, [pc, #156]	; (52bc <main+0x26c>)
    521e:	781b      	ldrb	r3, [r3, #0]
    5220:	2b00      	cmp	r3, #0
    5222:	d001      	beq.n	5228 <main+0x1d8>
    5224:	4a22      	ldr	r2, [pc, #136]	; (52b0 <main+0x260>)
    5226:	7013      	strb	r3, [r2, #0]
		if (tempTag != tag && tag == 0 && tag!=back){
    5228:	4a21      	ldr	r2, [pc, #132]	; (52b0 <main+0x260>)
    522a:	7812      	ldrb	r2, [r2, #0]
    522c:	4293      	cmp	r3, r2
    522e:	d100      	bne.n	5232 <main+0x1e2>
    5230:	e762      	b.n	50f8 <main+0xa8>
    5232:	2b00      	cmp	r3, #0
    5234:	d000      	beq.n	5238 <main+0x1e8>
    5236:	e75f      	b.n	50f8 <main+0xa8>
    5238:	2b06      	cmp	r3, #6
    523a:	d100      	bne.n	523e <main+0x1ee>
    523c:	e75c      	b.n	50f8 <main+0xa8>
			if(tempTag == attn)			    attnOp(&current_fiber1_data);	//attnOp(current_fiber1_data, current_fiber2_data);
    523e:	2a01      	cmp	r2, #1
    5240:	d100      	bne.n	5244 <main+0x1f4>
    5242:	e750      	b.n	50e6 <main+0x96>
			else if(tempTag == hist)		historyOp();
    5244:	2a02      	cmp	r2, #2
    5246:	d007      	beq.n	5258 <main+0x208>
			else if(tempTag == sett)		settingOp();
    5248:	2a04      	cmp	r2, #4
    524a:	d008      	beq.n	525e <main+0x20e>
			else if(tempTag == rssi)		rssiOp();
    524c:	2a03      	cmp	r2, #3
    524e:	d000      	beq.n	5252 <main+0x202>
    5250:	e74c      	b.n	50ec <main+0x9c>
    5252:	4b2e      	ldr	r3, [pc, #184]	; (530c <main+0x2bc>)
    5254:	4798      	blx	r3
    5256:	e749      	b.n	50ec <main+0x9c>
			else if(tempTag == hist)		historyOp();
    5258:	4b2d      	ldr	r3, [pc, #180]	; (5310 <main+0x2c0>)
    525a:	4798      	blx	r3
    525c:	e746      	b.n	50ec <main+0x9c>
			else if(tempTag == sett)		settingOp();
    525e:	4b2d      	ldr	r3, [pc, #180]	; (5314 <main+0x2c4>)
    5260:	4798      	blx	r3
    5262:	e743      	b.n	50ec <main+0x9c>
    5264:	00004fe9 	.word	0x00004fe9
    5268:	2000000b 	.word	0x2000000b
    526c:	000036b5 	.word	0x000036b5
    5270:	2000077c 	.word	0x2000077c
    5274:	200004b4 	.word	0x200004b4
    5278:	00001f45 	.word	0x00001f45
    527c:	003020ac 	.word	0x003020ac
    5280:	000020f5 	.word	0x000020f5
    5284:	003020b0 	.word	0x003020b0
    5288:	00000151 	.word	0x00000151
    528c:	00003cd5 	.word	0x00003cd5
    5290:	00003f4d 	.word	0x00003f4d
    5294:	00003f65 	.word	0x00003f65
    5298:	20000434 	.word	0x20000434
    529c:	000015b5 	.word	0x000015b5
    52a0:	000007e5 	.word	0x000007e5
    52a4:	00001655 	.word	0x00001655
    52a8:	20000a2c 	.word	0x20000a2c
    52ac:	000026d5 	.word	0x000026d5
    52b0:	2000015a 	.word	0x2000015a
    52b4:	41004400 	.word	0x41004400
    52b8:	41004480 	.word	0x41004480
    52bc:	20000159 	.word	0x20000159
    52c0:	0000267d 	.word	0x0000267d
    52c4:	000a4f7a 	.word	0x000a4f7a
    52c8:	00000a39 	.word	0x00000a39
    52cc:	00001dfd 	.word	0x00001dfd
    52d0:	0000220d 	.word	0x0000220d
    52d4:	0000227d 	.word	0x0000227d
    52d8:	04ffffff 	.word	0x04ffffff
    52dc:	0030212c 	.word	0x0030212c
    52e0:	0000209d 	.word	0x0000209d
    52e4:	03000001 	.word	0x03000001
    52e8:	00005fd0 	.word	0x00005fd0
    52ec:	00001cdd 	.word	0x00001cdd
    52f0:	03000002 	.word	0x03000002
    52f4:	00005fe0 	.word	0x00005fe0
    52f8:	03000003 	.word	0x03000003
    52fc:	00005fec 	.word	0x00005fec
    5300:	03000004 	.word	0x03000004
    5304:	00005ff8 	.word	0x00005ff8
    5308:	000026a9 	.word	0x000026a9
    530c:	00002b81 	.word	0x00002b81
    5310:	00002a2d 	.word	0x00002a2d
    5314:	00003395 	.word	0x00003395

00005318 <__udivsi3>:
    5318:	2200      	movs	r2, #0
    531a:	0843      	lsrs	r3, r0, #1
    531c:	428b      	cmp	r3, r1
    531e:	d374      	bcc.n	540a <__udivsi3+0xf2>
    5320:	0903      	lsrs	r3, r0, #4
    5322:	428b      	cmp	r3, r1
    5324:	d35f      	bcc.n	53e6 <__udivsi3+0xce>
    5326:	0a03      	lsrs	r3, r0, #8
    5328:	428b      	cmp	r3, r1
    532a:	d344      	bcc.n	53b6 <__udivsi3+0x9e>
    532c:	0b03      	lsrs	r3, r0, #12
    532e:	428b      	cmp	r3, r1
    5330:	d328      	bcc.n	5384 <__udivsi3+0x6c>
    5332:	0c03      	lsrs	r3, r0, #16
    5334:	428b      	cmp	r3, r1
    5336:	d30d      	bcc.n	5354 <__udivsi3+0x3c>
    5338:	22ff      	movs	r2, #255	; 0xff
    533a:	0209      	lsls	r1, r1, #8
    533c:	ba12      	rev	r2, r2
    533e:	0c03      	lsrs	r3, r0, #16
    5340:	428b      	cmp	r3, r1
    5342:	d302      	bcc.n	534a <__udivsi3+0x32>
    5344:	1212      	asrs	r2, r2, #8
    5346:	0209      	lsls	r1, r1, #8
    5348:	d065      	beq.n	5416 <__udivsi3+0xfe>
    534a:	0b03      	lsrs	r3, r0, #12
    534c:	428b      	cmp	r3, r1
    534e:	d319      	bcc.n	5384 <__udivsi3+0x6c>
    5350:	e000      	b.n	5354 <__udivsi3+0x3c>
    5352:	0a09      	lsrs	r1, r1, #8
    5354:	0bc3      	lsrs	r3, r0, #15
    5356:	428b      	cmp	r3, r1
    5358:	d301      	bcc.n	535e <__udivsi3+0x46>
    535a:	03cb      	lsls	r3, r1, #15
    535c:	1ac0      	subs	r0, r0, r3
    535e:	4152      	adcs	r2, r2
    5360:	0b83      	lsrs	r3, r0, #14
    5362:	428b      	cmp	r3, r1
    5364:	d301      	bcc.n	536a <__udivsi3+0x52>
    5366:	038b      	lsls	r3, r1, #14
    5368:	1ac0      	subs	r0, r0, r3
    536a:	4152      	adcs	r2, r2
    536c:	0b43      	lsrs	r3, r0, #13
    536e:	428b      	cmp	r3, r1
    5370:	d301      	bcc.n	5376 <__udivsi3+0x5e>
    5372:	034b      	lsls	r3, r1, #13
    5374:	1ac0      	subs	r0, r0, r3
    5376:	4152      	adcs	r2, r2
    5378:	0b03      	lsrs	r3, r0, #12
    537a:	428b      	cmp	r3, r1
    537c:	d301      	bcc.n	5382 <__udivsi3+0x6a>
    537e:	030b      	lsls	r3, r1, #12
    5380:	1ac0      	subs	r0, r0, r3
    5382:	4152      	adcs	r2, r2
    5384:	0ac3      	lsrs	r3, r0, #11
    5386:	428b      	cmp	r3, r1
    5388:	d301      	bcc.n	538e <__udivsi3+0x76>
    538a:	02cb      	lsls	r3, r1, #11
    538c:	1ac0      	subs	r0, r0, r3
    538e:	4152      	adcs	r2, r2
    5390:	0a83      	lsrs	r3, r0, #10
    5392:	428b      	cmp	r3, r1
    5394:	d301      	bcc.n	539a <__udivsi3+0x82>
    5396:	028b      	lsls	r3, r1, #10
    5398:	1ac0      	subs	r0, r0, r3
    539a:	4152      	adcs	r2, r2
    539c:	0a43      	lsrs	r3, r0, #9
    539e:	428b      	cmp	r3, r1
    53a0:	d301      	bcc.n	53a6 <__udivsi3+0x8e>
    53a2:	024b      	lsls	r3, r1, #9
    53a4:	1ac0      	subs	r0, r0, r3
    53a6:	4152      	adcs	r2, r2
    53a8:	0a03      	lsrs	r3, r0, #8
    53aa:	428b      	cmp	r3, r1
    53ac:	d301      	bcc.n	53b2 <__udivsi3+0x9a>
    53ae:	020b      	lsls	r3, r1, #8
    53b0:	1ac0      	subs	r0, r0, r3
    53b2:	4152      	adcs	r2, r2
    53b4:	d2cd      	bcs.n	5352 <__udivsi3+0x3a>
    53b6:	09c3      	lsrs	r3, r0, #7
    53b8:	428b      	cmp	r3, r1
    53ba:	d301      	bcc.n	53c0 <__udivsi3+0xa8>
    53bc:	01cb      	lsls	r3, r1, #7
    53be:	1ac0      	subs	r0, r0, r3
    53c0:	4152      	adcs	r2, r2
    53c2:	0983      	lsrs	r3, r0, #6
    53c4:	428b      	cmp	r3, r1
    53c6:	d301      	bcc.n	53cc <__udivsi3+0xb4>
    53c8:	018b      	lsls	r3, r1, #6
    53ca:	1ac0      	subs	r0, r0, r3
    53cc:	4152      	adcs	r2, r2
    53ce:	0943      	lsrs	r3, r0, #5
    53d0:	428b      	cmp	r3, r1
    53d2:	d301      	bcc.n	53d8 <__udivsi3+0xc0>
    53d4:	014b      	lsls	r3, r1, #5
    53d6:	1ac0      	subs	r0, r0, r3
    53d8:	4152      	adcs	r2, r2
    53da:	0903      	lsrs	r3, r0, #4
    53dc:	428b      	cmp	r3, r1
    53de:	d301      	bcc.n	53e4 <__udivsi3+0xcc>
    53e0:	010b      	lsls	r3, r1, #4
    53e2:	1ac0      	subs	r0, r0, r3
    53e4:	4152      	adcs	r2, r2
    53e6:	08c3      	lsrs	r3, r0, #3
    53e8:	428b      	cmp	r3, r1
    53ea:	d301      	bcc.n	53f0 <__udivsi3+0xd8>
    53ec:	00cb      	lsls	r3, r1, #3
    53ee:	1ac0      	subs	r0, r0, r3
    53f0:	4152      	adcs	r2, r2
    53f2:	0883      	lsrs	r3, r0, #2
    53f4:	428b      	cmp	r3, r1
    53f6:	d301      	bcc.n	53fc <__udivsi3+0xe4>
    53f8:	008b      	lsls	r3, r1, #2
    53fa:	1ac0      	subs	r0, r0, r3
    53fc:	4152      	adcs	r2, r2
    53fe:	0843      	lsrs	r3, r0, #1
    5400:	428b      	cmp	r3, r1
    5402:	d301      	bcc.n	5408 <__udivsi3+0xf0>
    5404:	004b      	lsls	r3, r1, #1
    5406:	1ac0      	subs	r0, r0, r3
    5408:	4152      	adcs	r2, r2
    540a:	1a41      	subs	r1, r0, r1
    540c:	d200      	bcs.n	5410 <__udivsi3+0xf8>
    540e:	4601      	mov	r1, r0
    5410:	4152      	adcs	r2, r2
    5412:	4610      	mov	r0, r2
    5414:	4770      	bx	lr
    5416:	e7ff      	b.n	5418 <__udivsi3+0x100>
    5418:	b501      	push	{r0, lr}
    541a:	2000      	movs	r0, #0
    541c:	f000 f806 	bl	542c <__aeabi_idiv0>
    5420:	bd02      	pop	{r1, pc}
    5422:	46c0      	nop			; (mov r8, r8)

00005424 <__aeabi_uidivmod>:
    5424:	2900      	cmp	r1, #0
    5426:	d0f7      	beq.n	5418 <__udivsi3+0x100>
    5428:	e776      	b.n	5318 <__udivsi3>
    542a:	4770      	bx	lr

0000542c <__aeabi_idiv0>:
    542c:	4770      	bx	lr
    542e:	46c0      	nop			; (mov r8, r8)

00005430 <__aeabi_lmul>:
    5430:	b5f0      	push	{r4, r5, r6, r7, lr}
    5432:	46ce      	mov	lr, r9
    5434:	4647      	mov	r7, r8
    5436:	0415      	lsls	r5, r2, #16
    5438:	0c2d      	lsrs	r5, r5, #16
    543a:	002e      	movs	r6, r5
    543c:	b580      	push	{r7, lr}
    543e:	0407      	lsls	r7, r0, #16
    5440:	0c14      	lsrs	r4, r2, #16
    5442:	0c3f      	lsrs	r7, r7, #16
    5444:	4699      	mov	r9, r3
    5446:	0c03      	lsrs	r3, r0, #16
    5448:	437e      	muls	r6, r7
    544a:	435d      	muls	r5, r3
    544c:	4367      	muls	r7, r4
    544e:	4363      	muls	r3, r4
    5450:	197f      	adds	r7, r7, r5
    5452:	0c34      	lsrs	r4, r6, #16
    5454:	19e4      	adds	r4, r4, r7
    5456:	469c      	mov	ip, r3
    5458:	42a5      	cmp	r5, r4
    545a:	d903      	bls.n	5464 <__aeabi_lmul+0x34>
    545c:	2380      	movs	r3, #128	; 0x80
    545e:	025b      	lsls	r3, r3, #9
    5460:	4698      	mov	r8, r3
    5462:	44c4      	add	ip, r8
    5464:	464b      	mov	r3, r9
    5466:	4351      	muls	r1, r2
    5468:	4343      	muls	r3, r0
    546a:	0436      	lsls	r6, r6, #16
    546c:	0c36      	lsrs	r6, r6, #16
    546e:	0c25      	lsrs	r5, r4, #16
    5470:	0424      	lsls	r4, r4, #16
    5472:	4465      	add	r5, ip
    5474:	19a4      	adds	r4, r4, r6
    5476:	1859      	adds	r1, r3, r1
    5478:	1949      	adds	r1, r1, r5
    547a:	0020      	movs	r0, r4
    547c:	bc0c      	pop	{r2, r3}
    547e:	4690      	mov	r8, r2
    5480:	4699      	mov	r9, r3
    5482:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005484 <__libc_init_array>:
    5484:	b570      	push	{r4, r5, r6, lr}
    5486:	2600      	movs	r6, #0
    5488:	4d0c      	ldr	r5, [pc, #48]	; (54bc <__libc_init_array+0x38>)
    548a:	4c0d      	ldr	r4, [pc, #52]	; (54c0 <__libc_init_array+0x3c>)
    548c:	1b64      	subs	r4, r4, r5
    548e:	10a4      	asrs	r4, r4, #2
    5490:	42a6      	cmp	r6, r4
    5492:	d109      	bne.n	54a8 <__libc_init_array+0x24>
    5494:	2600      	movs	r6, #0
    5496:	f000 fdd1 	bl	603c <_init>
    549a:	4d0a      	ldr	r5, [pc, #40]	; (54c4 <__libc_init_array+0x40>)
    549c:	4c0a      	ldr	r4, [pc, #40]	; (54c8 <__libc_init_array+0x44>)
    549e:	1b64      	subs	r4, r4, r5
    54a0:	10a4      	asrs	r4, r4, #2
    54a2:	42a6      	cmp	r6, r4
    54a4:	d105      	bne.n	54b2 <__libc_init_array+0x2e>
    54a6:	bd70      	pop	{r4, r5, r6, pc}
    54a8:	00b3      	lsls	r3, r6, #2
    54aa:	58eb      	ldr	r3, [r5, r3]
    54ac:	4798      	blx	r3
    54ae:	3601      	adds	r6, #1
    54b0:	e7ee      	b.n	5490 <__libc_init_array+0xc>
    54b2:	00b3      	lsls	r3, r6, #2
    54b4:	58eb      	ldr	r3, [r5, r3]
    54b6:	4798      	blx	r3
    54b8:	3601      	adds	r6, #1
    54ba:	e7f2      	b.n	54a2 <__libc_init_array+0x1e>
    54bc:	00006048 	.word	0x00006048
    54c0:	00006048 	.word	0x00006048
    54c4:	00006048 	.word	0x00006048
    54c8:	0000604c 	.word	0x0000604c

000054cc <memcpy>:
    54cc:	2300      	movs	r3, #0
    54ce:	b510      	push	{r4, lr}
    54d0:	429a      	cmp	r2, r3
    54d2:	d100      	bne.n	54d6 <memcpy+0xa>
    54d4:	bd10      	pop	{r4, pc}
    54d6:	5ccc      	ldrb	r4, [r1, r3]
    54d8:	54c4      	strb	r4, [r0, r3]
    54da:	3301      	adds	r3, #1
    54dc:	e7f8      	b.n	54d0 <memcpy+0x4>

000054de <memset>:
    54de:	0003      	movs	r3, r0
    54e0:	1882      	adds	r2, r0, r2
    54e2:	4293      	cmp	r3, r2
    54e4:	d100      	bne.n	54e8 <memset+0xa>
    54e6:	4770      	bx	lr
    54e8:	7019      	strb	r1, [r3, #0]
    54ea:	3301      	adds	r3, #1
    54ec:	e7f9      	b.n	54e2 <memset+0x4>
	...

000054f0 <sniprintf>:
    54f0:	b40c      	push	{r2, r3}
    54f2:	b530      	push	{r4, r5, lr}
    54f4:	4b16      	ldr	r3, [pc, #88]	; (5550 <sniprintf+0x60>)
    54f6:	b09d      	sub	sp, #116	; 0x74
    54f8:	1e0c      	subs	r4, r1, #0
    54fa:	681d      	ldr	r5, [r3, #0]
    54fc:	da08      	bge.n	5510 <sniprintf+0x20>
    54fe:	238b      	movs	r3, #139	; 0x8b
    5500:	2001      	movs	r0, #1
    5502:	602b      	str	r3, [r5, #0]
    5504:	4240      	negs	r0, r0
    5506:	b01d      	add	sp, #116	; 0x74
    5508:	bc30      	pop	{r4, r5}
    550a:	bc08      	pop	{r3}
    550c:	b002      	add	sp, #8
    550e:	4718      	bx	r3
    5510:	2382      	movs	r3, #130	; 0x82
    5512:	a902      	add	r1, sp, #8
    5514:	009b      	lsls	r3, r3, #2
    5516:	818b      	strh	r3, [r1, #12]
    5518:	2300      	movs	r3, #0
    551a:	9002      	str	r0, [sp, #8]
    551c:	6108      	str	r0, [r1, #16]
    551e:	429c      	cmp	r4, r3
    5520:	d000      	beq.n	5524 <sniprintf+0x34>
    5522:	1e63      	subs	r3, r4, #1
    5524:	608b      	str	r3, [r1, #8]
    5526:	614b      	str	r3, [r1, #20]
    5528:	2301      	movs	r3, #1
    552a:	425b      	negs	r3, r3
    552c:	81cb      	strh	r3, [r1, #14]
    552e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    5530:	ab21      	add	r3, sp, #132	; 0x84
    5532:	0028      	movs	r0, r5
    5534:	9301      	str	r3, [sp, #4]
    5536:	f000 f91f 	bl	5778 <_svfiprintf_r>
    553a:	1c43      	adds	r3, r0, #1
    553c:	da01      	bge.n	5542 <sniprintf+0x52>
    553e:	238b      	movs	r3, #139	; 0x8b
    5540:	602b      	str	r3, [r5, #0]
    5542:	2c00      	cmp	r4, #0
    5544:	d0df      	beq.n	5506 <sniprintf+0x16>
    5546:	2300      	movs	r3, #0
    5548:	9a02      	ldr	r2, [sp, #8]
    554a:	7013      	strb	r3, [r2, #0]
    554c:	e7db      	b.n	5506 <sniprintf+0x16>
    554e:	46c0      	nop			; (mov r8, r8)
    5550:	20000010 	.word	0x20000010

00005554 <strlen>:
    5554:	2300      	movs	r3, #0
    5556:	5cc2      	ldrb	r2, [r0, r3]
    5558:	3301      	adds	r3, #1
    555a:	2a00      	cmp	r2, #0
    555c:	d1fb      	bne.n	5556 <strlen+0x2>
    555e:	1e58      	subs	r0, r3, #1
    5560:	4770      	bx	lr
	...

00005564 <_free_r>:
    5564:	b570      	push	{r4, r5, r6, lr}
    5566:	0005      	movs	r5, r0
    5568:	2900      	cmp	r1, #0
    556a:	d010      	beq.n	558e <_free_r+0x2a>
    556c:	1f0c      	subs	r4, r1, #4
    556e:	6823      	ldr	r3, [r4, #0]
    5570:	2b00      	cmp	r3, #0
    5572:	da00      	bge.n	5576 <_free_r+0x12>
    5574:	18e4      	adds	r4, r4, r3
    5576:	0028      	movs	r0, r5
    5578:	f000 fbb9 	bl	5cee <__malloc_lock>
    557c:	4a1d      	ldr	r2, [pc, #116]	; (55f4 <_free_r+0x90>)
    557e:	6813      	ldr	r3, [r2, #0]
    5580:	2b00      	cmp	r3, #0
    5582:	d105      	bne.n	5590 <_free_r+0x2c>
    5584:	6063      	str	r3, [r4, #4]
    5586:	6014      	str	r4, [r2, #0]
    5588:	0028      	movs	r0, r5
    558a:	f000 fbb1 	bl	5cf0 <__malloc_unlock>
    558e:	bd70      	pop	{r4, r5, r6, pc}
    5590:	42a3      	cmp	r3, r4
    5592:	d909      	bls.n	55a8 <_free_r+0x44>
    5594:	6821      	ldr	r1, [r4, #0]
    5596:	1860      	adds	r0, r4, r1
    5598:	4283      	cmp	r3, r0
    559a:	d1f3      	bne.n	5584 <_free_r+0x20>
    559c:	6818      	ldr	r0, [r3, #0]
    559e:	685b      	ldr	r3, [r3, #4]
    55a0:	1841      	adds	r1, r0, r1
    55a2:	6021      	str	r1, [r4, #0]
    55a4:	e7ee      	b.n	5584 <_free_r+0x20>
    55a6:	0013      	movs	r3, r2
    55a8:	685a      	ldr	r2, [r3, #4]
    55aa:	2a00      	cmp	r2, #0
    55ac:	d001      	beq.n	55b2 <_free_r+0x4e>
    55ae:	42a2      	cmp	r2, r4
    55b0:	d9f9      	bls.n	55a6 <_free_r+0x42>
    55b2:	6819      	ldr	r1, [r3, #0]
    55b4:	1858      	adds	r0, r3, r1
    55b6:	42a0      	cmp	r0, r4
    55b8:	d10b      	bne.n	55d2 <_free_r+0x6e>
    55ba:	6820      	ldr	r0, [r4, #0]
    55bc:	1809      	adds	r1, r1, r0
    55be:	1858      	adds	r0, r3, r1
    55c0:	6019      	str	r1, [r3, #0]
    55c2:	4282      	cmp	r2, r0
    55c4:	d1e0      	bne.n	5588 <_free_r+0x24>
    55c6:	6810      	ldr	r0, [r2, #0]
    55c8:	6852      	ldr	r2, [r2, #4]
    55ca:	1841      	adds	r1, r0, r1
    55cc:	6019      	str	r1, [r3, #0]
    55ce:	605a      	str	r2, [r3, #4]
    55d0:	e7da      	b.n	5588 <_free_r+0x24>
    55d2:	42a0      	cmp	r0, r4
    55d4:	d902      	bls.n	55dc <_free_r+0x78>
    55d6:	230c      	movs	r3, #12
    55d8:	602b      	str	r3, [r5, #0]
    55da:	e7d5      	b.n	5588 <_free_r+0x24>
    55dc:	6821      	ldr	r1, [r4, #0]
    55de:	1860      	adds	r0, r4, r1
    55e0:	4282      	cmp	r2, r0
    55e2:	d103      	bne.n	55ec <_free_r+0x88>
    55e4:	6810      	ldr	r0, [r2, #0]
    55e6:	6852      	ldr	r2, [r2, #4]
    55e8:	1841      	adds	r1, r0, r1
    55ea:	6021      	str	r1, [r4, #0]
    55ec:	6062      	str	r2, [r4, #4]
    55ee:	605c      	str	r4, [r3, #4]
    55f0:	e7ca      	b.n	5588 <_free_r+0x24>
    55f2:	46c0      	nop			; (mov r8, r8)
    55f4:	2000043c 	.word	0x2000043c

000055f8 <_malloc_r>:
    55f8:	2303      	movs	r3, #3
    55fa:	b570      	push	{r4, r5, r6, lr}
    55fc:	1ccd      	adds	r5, r1, #3
    55fe:	439d      	bics	r5, r3
    5600:	3508      	adds	r5, #8
    5602:	0006      	movs	r6, r0
    5604:	2d0c      	cmp	r5, #12
    5606:	d21e      	bcs.n	5646 <_malloc_r+0x4e>
    5608:	250c      	movs	r5, #12
    560a:	42a9      	cmp	r1, r5
    560c:	d81d      	bhi.n	564a <_malloc_r+0x52>
    560e:	0030      	movs	r0, r6
    5610:	f000 fb6d 	bl	5cee <__malloc_lock>
    5614:	4a25      	ldr	r2, [pc, #148]	; (56ac <_malloc_r+0xb4>)
    5616:	6814      	ldr	r4, [r2, #0]
    5618:	0021      	movs	r1, r4
    561a:	2900      	cmp	r1, #0
    561c:	d119      	bne.n	5652 <_malloc_r+0x5a>
    561e:	4c24      	ldr	r4, [pc, #144]	; (56b0 <_malloc_r+0xb8>)
    5620:	6823      	ldr	r3, [r4, #0]
    5622:	2b00      	cmp	r3, #0
    5624:	d103      	bne.n	562e <_malloc_r+0x36>
    5626:	0030      	movs	r0, r6
    5628:	f000 fb32 	bl	5c90 <_sbrk_r>
    562c:	6020      	str	r0, [r4, #0]
    562e:	0029      	movs	r1, r5
    5630:	0030      	movs	r0, r6
    5632:	f000 fb2d 	bl	5c90 <_sbrk_r>
    5636:	1c43      	adds	r3, r0, #1
    5638:	d12c      	bne.n	5694 <_malloc_r+0x9c>
    563a:	230c      	movs	r3, #12
    563c:	0030      	movs	r0, r6
    563e:	6033      	str	r3, [r6, #0]
    5640:	f000 fb56 	bl	5cf0 <__malloc_unlock>
    5644:	e003      	b.n	564e <_malloc_r+0x56>
    5646:	2d00      	cmp	r5, #0
    5648:	dadf      	bge.n	560a <_malloc_r+0x12>
    564a:	230c      	movs	r3, #12
    564c:	6033      	str	r3, [r6, #0]
    564e:	2000      	movs	r0, #0
    5650:	bd70      	pop	{r4, r5, r6, pc}
    5652:	680b      	ldr	r3, [r1, #0]
    5654:	1b5b      	subs	r3, r3, r5
    5656:	d41a      	bmi.n	568e <_malloc_r+0x96>
    5658:	2b0b      	cmp	r3, #11
    565a:	d903      	bls.n	5664 <_malloc_r+0x6c>
    565c:	600b      	str	r3, [r1, #0]
    565e:	18cc      	adds	r4, r1, r3
    5660:	6025      	str	r5, [r4, #0]
    5662:	e003      	b.n	566c <_malloc_r+0x74>
    5664:	428c      	cmp	r4, r1
    5666:	d10e      	bne.n	5686 <_malloc_r+0x8e>
    5668:	6863      	ldr	r3, [r4, #4]
    566a:	6013      	str	r3, [r2, #0]
    566c:	0030      	movs	r0, r6
    566e:	f000 fb3f 	bl	5cf0 <__malloc_unlock>
    5672:	0020      	movs	r0, r4
    5674:	2207      	movs	r2, #7
    5676:	300b      	adds	r0, #11
    5678:	1d23      	adds	r3, r4, #4
    567a:	4390      	bics	r0, r2
    567c:	1ac3      	subs	r3, r0, r3
    567e:	d0e7      	beq.n	5650 <_malloc_r+0x58>
    5680:	425a      	negs	r2, r3
    5682:	50e2      	str	r2, [r4, r3]
    5684:	e7e4      	b.n	5650 <_malloc_r+0x58>
    5686:	684b      	ldr	r3, [r1, #4]
    5688:	6063      	str	r3, [r4, #4]
    568a:	000c      	movs	r4, r1
    568c:	e7ee      	b.n	566c <_malloc_r+0x74>
    568e:	000c      	movs	r4, r1
    5690:	6849      	ldr	r1, [r1, #4]
    5692:	e7c2      	b.n	561a <_malloc_r+0x22>
    5694:	2303      	movs	r3, #3
    5696:	1cc4      	adds	r4, r0, #3
    5698:	439c      	bics	r4, r3
    569a:	42a0      	cmp	r0, r4
    569c:	d0e0      	beq.n	5660 <_malloc_r+0x68>
    569e:	1a21      	subs	r1, r4, r0
    56a0:	0030      	movs	r0, r6
    56a2:	f000 faf5 	bl	5c90 <_sbrk_r>
    56a6:	1c43      	adds	r3, r0, #1
    56a8:	d1da      	bne.n	5660 <_malloc_r+0x68>
    56aa:	e7c6      	b.n	563a <_malloc_r+0x42>
    56ac:	2000043c 	.word	0x2000043c
    56b0:	20000440 	.word	0x20000440

000056b4 <__ssputs_r>:
    56b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56b6:	688e      	ldr	r6, [r1, #8]
    56b8:	b085      	sub	sp, #20
    56ba:	0007      	movs	r7, r0
    56bc:	000c      	movs	r4, r1
    56be:	9203      	str	r2, [sp, #12]
    56c0:	9301      	str	r3, [sp, #4]
    56c2:	429e      	cmp	r6, r3
    56c4:	d839      	bhi.n	573a <__ssputs_r+0x86>
    56c6:	2390      	movs	r3, #144	; 0x90
    56c8:	898a      	ldrh	r2, [r1, #12]
    56ca:	00db      	lsls	r3, r3, #3
    56cc:	421a      	tst	r2, r3
    56ce:	d034      	beq.n	573a <__ssputs_r+0x86>
    56d0:	2503      	movs	r5, #3
    56d2:	6909      	ldr	r1, [r1, #16]
    56d4:	6823      	ldr	r3, [r4, #0]
    56d6:	1a5b      	subs	r3, r3, r1
    56d8:	9302      	str	r3, [sp, #8]
    56da:	6963      	ldr	r3, [r4, #20]
    56dc:	9802      	ldr	r0, [sp, #8]
    56de:	435d      	muls	r5, r3
    56e0:	0feb      	lsrs	r3, r5, #31
    56e2:	195d      	adds	r5, r3, r5
    56e4:	9b01      	ldr	r3, [sp, #4]
    56e6:	106d      	asrs	r5, r5, #1
    56e8:	3301      	adds	r3, #1
    56ea:	181b      	adds	r3, r3, r0
    56ec:	42ab      	cmp	r3, r5
    56ee:	d900      	bls.n	56f2 <__ssputs_r+0x3e>
    56f0:	001d      	movs	r5, r3
    56f2:	0553      	lsls	r3, r2, #21
    56f4:	d532      	bpl.n	575c <__ssputs_r+0xa8>
    56f6:	0029      	movs	r1, r5
    56f8:	0038      	movs	r0, r7
    56fa:	f7ff ff7d 	bl	55f8 <_malloc_r>
    56fe:	1e06      	subs	r6, r0, #0
    5700:	d109      	bne.n	5716 <__ssputs_r+0x62>
    5702:	230c      	movs	r3, #12
    5704:	603b      	str	r3, [r7, #0]
    5706:	2340      	movs	r3, #64	; 0x40
    5708:	2001      	movs	r0, #1
    570a:	89a2      	ldrh	r2, [r4, #12]
    570c:	4240      	negs	r0, r0
    570e:	4313      	orrs	r3, r2
    5710:	81a3      	strh	r3, [r4, #12]
    5712:	b005      	add	sp, #20
    5714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5716:	9a02      	ldr	r2, [sp, #8]
    5718:	6921      	ldr	r1, [r4, #16]
    571a:	f7ff fed7 	bl	54cc <memcpy>
    571e:	89a3      	ldrh	r3, [r4, #12]
    5720:	4a14      	ldr	r2, [pc, #80]	; (5774 <__ssputs_r+0xc0>)
    5722:	401a      	ands	r2, r3
    5724:	2380      	movs	r3, #128	; 0x80
    5726:	4313      	orrs	r3, r2
    5728:	81a3      	strh	r3, [r4, #12]
    572a:	9b02      	ldr	r3, [sp, #8]
    572c:	6126      	str	r6, [r4, #16]
    572e:	18f6      	adds	r6, r6, r3
    5730:	6026      	str	r6, [r4, #0]
    5732:	6165      	str	r5, [r4, #20]
    5734:	9e01      	ldr	r6, [sp, #4]
    5736:	1aed      	subs	r5, r5, r3
    5738:	60a5      	str	r5, [r4, #8]
    573a:	9b01      	ldr	r3, [sp, #4]
    573c:	42b3      	cmp	r3, r6
    573e:	d200      	bcs.n	5742 <__ssputs_r+0x8e>
    5740:	001e      	movs	r6, r3
    5742:	0032      	movs	r2, r6
    5744:	9903      	ldr	r1, [sp, #12]
    5746:	6820      	ldr	r0, [r4, #0]
    5748:	f000 fabf 	bl	5cca <memmove>
    574c:	68a3      	ldr	r3, [r4, #8]
    574e:	2000      	movs	r0, #0
    5750:	1b9b      	subs	r3, r3, r6
    5752:	60a3      	str	r3, [r4, #8]
    5754:	6823      	ldr	r3, [r4, #0]
    5756:	199e      	adds	r6, r3, r6
    5758:	6026      	str	r6, [r4, #0]
    575a:	e7da      	b.n	5712 <__ssputs_r+0x5e>
    575c:	002a      	movs	r2, r5
    575e:	0038      	movs	r0, r7
    5760:	f000 fac7 	bl	5cf2 <_realloc_r>
    5764:	1e06      	subs	r6, r0, #0
    5766:	d1e0      	bne.n	572a <__ssputs_r+0x76>
    5768:	6921      	ldr	r1, [r4, #16]
    576a:	0038      	movs	r0, r7
    576c:	f7ff fefa 	bl	5564 <_free_r>
    5770:	e7c7      	b.n	5702 <__ssputs_r+0x4e>
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	fffffb7f 	.word	0xfffffb7f

00005778 <_svfiprintf_r>:
    5778:	b5f0      	push	{r4, r5, r6, r7, lr}
    577a:	b09f      	sub	sp, #124	; 0x7c
    577c:	9002      	str	r0, [sp, #8]
    577e:	9305      	str	r3, [sp, #20]
    5780:	898b      	ldrh	r3, [r1, #12]
    5782:	000f      	movs	r7, r1
    5784:	0016      	movs	r6, r2
    5786:	061b      	lsls	r3, r3, #24
    5788:	d511      	bpl.n	57ae <_svfiprintf_r+0x36>
    578a:	690b      	ldr	r3, [r1, #16]
    578c:	2b00      	cmp	r3, #0
    578e:	d10e      	bne.n	57ae <_svfiprintf_r+0x36>
    5790:	2140      	movs	r1, #64	; 0x40
    5792:	f7ff ff31 	bl	55f8 <_malloc_r>
    5796:	6038      	str	r0, [r7, #0]
    5798:	6138      	str	r0, [r7, #16]
    579a:	2800      	cmp	r0, #0
    579c:	d105      	bne.n	57aa <_svfiprintf_r+0x32>
    579e:	230c      	movs	r3, #12
    57a0:	9a02      	ldr	r2, [sp, #8]
    57a2:	3801      	subs	r0, #1
    57a4:	6013      	str	r3, [r2, #0]
    57a6:	b01f      	add	sp, #124	; 0x7c
    57a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57aa:	2340      	movs	r3, #64	; 0x40
    57ac:	617b      	str	r3, [r7, #20]
    57ae:	2300      	movs	r3, #0
    57b0:	ad06      	add	r5, sp, #24
    57b2:	616b      	str	r3, [r5, #20]
    57b4:	3320      	adds	r3, #32
    57b6:	766b      	strb	r3, [r5, #25]
    57b8:	3310      	adds	r3, #16
    57ba:	76ab      	strb	r3, [r5, #26]
    57bc:	0034      	movs	r4, r6
    57be:	7823      	ldrb	r3, [r4, #0]
    57c0:	2b00      	cmp	r3, #0
    57c2:	d147      	bne.n	5854 <_svfiprintf_r+0xdc>
    57c4:	1ba3      	subs	r3, r4, r6
    57c6:	9304      	str	r3, [sp, #16]
    57c8:	d00d      	beq.n	57e6 <_svfiprintf_r+0x6e>
    57ca:	1ba3      	subs	r3, r4, r6
    57cc:	0032      	movs	r2, r6
    57ce:	0039      	movs	r1, r7
    57d0:	9802      	ldr	r0, [sp, #8]
    57d2:	f7ff ff6f 	bl	56b4 <__ssputs_r>
    57d6:	1c43      	adds	r3, r0, #1
    57d8:	d100      	bne.n	57dc <_svfiprintf_r+0x64>
    57da:	e0b5      	b.n	5948 <_svfiprintf_r+0x1d0>
    57dc:	696a      	ldr	r2, [r5, #20]
    57de:	9b04      	ldr	r3, [sp, #16]
    57e0:	4694      	mov	ip, r2
    57e2:	4463      	add	r3, ip
    57e4:	616b      	str	r3, [r5, #20]
    57e6:	7823      	ldrb	r3, [r4, #0]
    57e8:	2b00      	cmp	r3, #0
    57ea:	d100      	bne.n	57ee <_svfiprintf_r+0x76>
    57ec:	e0ac      	b.n	5948 <_svfiprintf_r+0x1d0>
    57ee:	2201      	movs	r2, #1
    57f0:	2300      	movs	r3, #0
    57f2:	4252      	negs	r2, r2
    57f4:	606a      	str	r2, [r5, #4]
    57f6:	a902      	add	r1, sp, #8
    57f8:	3254      	adds	r2, #84	; 0x54
    57fa:	1852      	adds	r2, r2, r1
    57fc:	3401      	adds	r4, #1
    57fe:	602b      	str	r3, [r5, #0]
    5800:	60eb      	str	r3, [r5, #12]
    5802:	60ab      	str	r3, [r5, #8]
    5804:	7013      	strb	r3, [r2, #0]
    5806:	65ab      	str	r3, [r5, #88]	; 0x58
    5808:	4e58      	ldr	r6, [pc, #352]	; (596c <_svfiprintf_r+0x1f4>)
    580a:	2205      	movs	r2, #5
    580c:	7821      	ldrb	r1, [r4, #0]
    580e:	0030      	movs	r0, r6
    5810:	f000 fa50 	bl	5cb4 <memchr>
    5814:	1c62      	adds	r2, r4, #1
    5816:	2800      	cmp	r0, #0
    5818:	d120      	bne.n	585c <_svfiprintf_r+0xe4>
    581a:	6829      	ldr	r1, [r5, #0]
    581c:	06cb      	lsls	r3, r1, #27
    581e:	d504      	bpl.n	582a <_svfiprintf_r+0xb2>
    5820:	2353      	movs	r3, #83	; 0x53
    5822:	ae02      	add	r6, sp, #8
    5824:	3020      	adds	r0, #32
    5826:	199b      	adds	r3, r3, r6
    5828:	7018      	strb	r0, [r3, #0]
    582a:	070b      	lsls	r3, r1, #28
    582c:	d504      	bpl.n	5838 <_svfiprintf_r+0xc0>
    582e:	2353      	movs	r3, #83	; 0x53
    5830:	202b      	movs	r0, #43	; 0x2b
    5832:	ae02      	add	r6, sp, #8
    5834:	199b      	adds	r3, r3, r6
    5836:	7018      	strb	r0, [r3, #0]
    5838:	7823      	ldrb	r3, [r4, #0]
    583a:	2b2a      	cmp	r3, #42	; 0x2a
    583c:	d016      	beq.n	586c <_svfiprintf_r+0xf4>
    583e:	2000      	movs	r0, #0
    5840:	210a      	movs	r1, #10
    5842:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5844:	7822      	ldrb	r2, [r4, #0]
    5846:	3a30      	subs	r2, #48	; 0x30
    5848:	2a09      	cmp	r2, #9
    584a:	d955      	bls.n	58f8 <_svfiprintf_r+0x180>
    584c:	2800      	cmp	r0, #0
    584e:	d015      	beq.n	587c <_svfiprintf_r+0x104>
    5850:	9309      	str	r3, [sp, #36]	; 0x24
    5852:	e013      	b.n	587c <_svfiprintf_r+0x104>
    5854:	2b25      	cmp	r3, #37	; 0x25
    5856:	d0b5      	beq.n	57c4 <_svfiprintf_r+0x4c>
    5858:	3401      	adds	r4, #1
    585a:	e7b0      	b.n	57be <_svfiprintf_r+0x46>
    585c:	2301      	movs	r3, #1
    585e:	1b80      	subs	r0, r0, r6
    5860:	4083      	lsls	r3, r0
    5862:	6829      	ldr	r1, [r5, #0]
    5864:	0014      	movs	r4, r2
    5866:	430b      	orrs	r3, r1
    5868:	602b      	str	r3, [r5, #0]
    586a:	e7cd      	b.n	5808 <_svfiprintf_r+0x90>
    586c:	9b05      	ldr	r3, [sp, #20]
    586e:	1d18      	adds	r0, r3, #4
    5870:	681b      	ldr	r3, [r3, #0]
    5872:	9005      	str	r0, [sp, #20]
    5874:	2b00      	cmp	r3, #0
    5876:	db39      	blt.n	58ec <_svfiprintf_r+0x174>
    5878:	9309      	str	r3, [sp, #36]	; 0x24
    587a:	0014      	movs	r4, r2
    587c:	7823      	ldrb	r3, [r4, #0]
    587e:	2b2e      	cmp	r3, #46	; 0x2e
    5880:	d10b      	bne.n	589a <_svfiprintf_r+0x122>
    5882:	7863      	ldrb	r3, [r4, #1]
    5884:	1c62      	adds	r2, r4, #1
    5886:	2b2a      	cmp	r3, #42	; 0x2a
    5888:	d13e      	bne.n	5908 <_svfiprintf_r+0x190>
    588a:	9b05      	ldr	r3, [sp, #20]
    588c:	3402      	adds	r4, #2
    588e:	1d1a      	adds	r2, r3, #4
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	9205      	str	r2, [sp, #20]
    5894:	2b00      	cmp	r3, #0
    5896:	db34      	blt.n	5902 <_svfiprintf_r+0x18a>
    5898:	9307      	str	r3, [sp, #28]
    589a:	4e35      	ldr	r6, [pc, #212]	; (5970 <_svfiprintf_r+0x1f8>)
    589c:	7821      	ldrb	r1, [r4, #0]
    589e:	2203      	movs	r2, #3
    58a0:	0030      	movs	r0, r6
    58a2:	f000 fa07 	bl	5cb4 <memchr>
    58a6:	2800      	cmp	r0, #0
    58a8:	d006      	beq.n	58b8 <_svfiprintf_r+0x140>
    58aa:	2340      	movs	r3, #64	; 0x40
    58ac:	1b80      	subs	r0, r0, r6
    58ae:	4083      	lsls	r3, r0
    58b0:	682a      	ldr	r2, [r5, #0]
    58b2:	3401      	adds	r4, #1
    58b4:	4313      	orrs	r3, r2
    58b6:	602b      	str	r3, [r5, #0]
    58b8:	7821      	ldrb	r1, [r4, #0]
    58ba:	2206      	movs	r2, #6
    58bc:	482d      	ldr	r0, [pc, #180]	; (5974 <_svfiprintf_r+0x1fc>)
    58be:	1c66      	adds	r6, r4, #1
    58c0:	7629      	strb	r1, [r5, #24]
    58c2:	f000 f9f7 	bl	5cb4 <memchr>
    58c6:	2800      	cmp	r0, #0
    58c8:	d046      	beq.n	5958 <_svfiprintf_r+0x1e0>
    58ca:	4b2b      	ldr	r3, [pc, #172]	; (5978 <_svfiprintf_r+0x200>)
    58cc:	2b00      	cmp	r3, #0
    58ce:	d12f      	bne.n	5930 <_svfiprintf_r+0x1b8>
    58d0:	6829      	ldr	r1, [r5, #0]
    58d2:	9b05      	ldr	r3, [sp, #20]
    58d4:	2207      	movs	r2, #7
    58d6:	05c9      	lsls	r1, r1, #23
    58d8:	d528      	bpl.n	592c <_svfiprintf_r+0x1b4>
    58da:	189b      	adds	r3, r3, r2
    58dc:	4393      	bics	r3, r2
    58de:	3308      	adds	r3, #8
    58e0:	9305      	str	r3, [sp, #20]
    58e2:	696b      	ldr	r3, [r5, #20]
    58e4:	9a03      	ldr	r2, [sp, #12]
    58e6:	189b      	adds	r3, r3, r2
    58e8:	616b      	str	r3, [r5, #20]
    58ea:	e767      	b.n	57bc <_svfiprintf_r+0x44>
    58ec:	425b      	negs	r3, r3
    58ee:	60eb      	str	r3, [r5, #12]
    58f0:	2302      	movs	r3, #2
    58f2:	430b      	orrs	r3, r1
    58f4:	602b      	str	r3, [r5, #0]
    58f6:	e7c0      	b.n	587a <_svfiprintf_r+0x102>
    58f8:	434b      	muls	r3, r1
    58fa:	3401      	adds	r4, #1
    58fc:	189b      	adds	r3, r3, r2
    58fe:	2001      	movs	r0, #1
    5900:	e7a0      	b.n	5844 <_svfiprintf_r+0xcc>
    5902:	2301      	movs	r3, #1
    5904:	425b      	negs	r3, r3
    5906:	e7c7      	b.n	5898 <_svfiprintf_r+0x120>
    5908:	2300      	movs	r3, #0
    590a:	0014      	movs	r4, r2
    590c:	200a      	movs	r0, #10
    590e:	001a      	movs	r2, r3
    5910:	606b      	str	r3, [r5, #4]
    5912:	7821      	ldrb	r1, [r4, #0]
    5914:	3930      	subs	r1, #48	; 0x30
    5916:	2909      	cmp	r1, #9
    5918:	d903      	bls.n	5922 <_svfiprintf_r+0x1aa>
    591a:	2b00      	cmp	r3, #0
    591c:	d0bd      	beq.n	589a <_svfiprintf_r+0x122>
    591e:	9207      	str	r2, [sp, #28]
    5920:	e7bb      	b.n	589a <_svfiprintf_r+0x122>
    5922:	4342      	muls	r2, r0
    5924:	3401      	adds	r4, #1
    5926:	1852      	adds	r2, r2, r1
    5928:	2301      	movs	r3, #1
    592a:	e7f2      	b.n	5912 <_svfiprintf_r+0x19a>
    592c:	3307      	adds	r3, #7
    592e:	e7d5      	b.n	58dc <_svfiprintf_r+0x164>
    5930:	ab05      	add	r3, sp, #20
    5932:	9300      	str	r3, [sp, #0]
    5934:	003a      	movs	r2, r7
    5936:	4b11      	ldr	r3, [pc, #68]	; (597c <_svfiprintf_r+0x204>)
    5938:	0029      	movs	r1, r5
    593a:	9802      	ldr	r0, [sp, #8]
    593c:	e000      	b.n	5940 <_svfiprintf_r+0x1c8>
    593e:	bf00      	nop
    5940:	9003      	str	r0, [sp, #12]
    5942:	9b03      	ldr	r3, [sp, #12]
    5944:	3301      	adds	r3, #1
    5946:	d1cc      	bne.n	58e2 <_svfiprintf_r+0x16a>
    5948:	89bb      	ldrh	r3, [r7, #12]
    594a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    594c:	065b      	lsls	r3, r3, #25
    594e:	d400      	bmi.n	5952 <_svfiprintf_r+0x1da>
    5950:	e729      	b.n	57a6 <_svfiprintf_r+0x2e>
    5952:	2001      	movs	r0, #1
    5954:	4240      	negs	r0, r0
    5956:	e726      	b.n	57a6 <_svfiprintf_r+0x2e>
    5958:	ab05      	add	r3, sp, #20
    595a:	9300      	str	r3, [sp, #0]
    595c:	003a      	movs	r2, r7
    595e:	4b07      	ldr	r3, [pc, #28]	; (597c <_svfiprintf_r+0x204>)
    5960:	0029      	movs	r1, r5
    5962:	9802      	ldr	r0, [sp, #8]
    5964:	f000 f87a 	bl	5a5c <_printf_i>
    5968:	e7ea      	b.n	5940 <_svfiprintf_r+0x1c8>
    596a:	46c0      	nop			; (mov r8, r8)
    596c:	00006008 	.word	0x00006008
    5970:	0000600e 	.word	0x0000600e
    5974:	00006012 	.word	0x00006012
    5978:	00000000 	.word	0x00000000
    597c:	000056b5 	.word	0x000056b5

00005980 <_printf_common>:
    5980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5982:	0015      	movs	r5, r2
    5984:	9301      	str	r3, [sp, #4]
    5986:	688a      	ldr	r2, [r1, #8]
    5988:	690b      	ldr	r3, [r1, #16]
    598a:	9000      	str	r0, [sp, #0]
    598c:	000c      	movs	r4, r1
    598e:	4293      	cmp	r3, r2
    5990:	da00      	bge.n	5994 <_printf_common+0x14>
    5992:	0013      	movs	r3, r2
    5994:	0022      	movs	r2, r4
    5996:	602b      	str	r3, [r5, #0]
    5998:	3243      	adds	r2, #67	; 0x43
    599a:	7812      	ldrb	r2, [r2, #0]
    599c:	2a00      	cmp	r2, #0
    599e:	d001      	beq.n	59a4 <_printf_common+0x24>
    59a0:	3301      	adds	r3, #1
    59a2:	602b      	str	r3, [r5, #0]
    59a4:	6823      	ldr	r3, [r4, #0]
    59a6:	069b      	lsls	r3, r3, #26
    59a8:	d502      	bpl.n	59b0 <_printf_common+0x30>
    59aa:	682b      	ldr	r3, [r5, #0]
    59ac:	3302      	adds	r3, #2
    59ae:	602b      	str	r3, [r5, #0]
    59b0:	2706      	movs	r7, #6
    59b2:	6823      	ldr	r3, [r4, #0]
    59b4:	401f      	ands	r7, r3
    59b6:	d027      	beq.n	5a08 <_printf_common+0x88>
    59b8:	0023      	movs	r3, r4
    59ba:	3343      	adds	r3, #67	; 0x43
    59bc:	781b      	ldrb	r3, [r3, #0]
    59be:	1e5a      	subs	r2, r3, #1
    59c0:	4193      	sbcs	r3, r2
    59c2:	6822      	ldr	r2, [r4, #0]
    59c4:	0692      	lsls	r2, r2, #26
    59c6:	d430      	bmi.n	5a2a <_printf_common+0xaa>
    59c8:	0022      	movs	r2, r4
    59ca:	9901      	ldr	r1, [sp, #4]
    59cc:	3243      	adds	r2, #67	; 0x43
    59ce:	9800      	ldr	r0, [sp, #0]
    59d0:	9e08      	ldr	r6, [sp, #32]
    59d2:	47b0      	blx	r6
    59d4:	1c43      	adds	r3, r0, #1
    59d6:	d025      	beq.n	5a24 <_printf_common+0xa4>
    59d8:	2306      	movs	r3, #6
    59da:	6820      	ldr	r0, [r4, #0]
    59dc:	682a      	ldr	r2, [r5, #0]
    59de:	68e1      	ldr	r1, [r4, #12]
    59e0:	4003      	ands	r3, r0
    59e2:	2500      	movs	r5, #0
    59e4:	2b04      	cmp	r3, #4
    59e6:	d103      	bne.n	59f0 <_printf_common+0x70>
    59e8:	1a8d      	subs	r5, r1, r2
    59ea:	43eb      	mvns	r3, r5
    59ec:	17db      	asrs	r3, r3, #31
    59ee:	401d      	ands	r5, r3
    59f0:	68a3      	ldr	r3, [r4, #8]
    59f2:	6922      	ldr	r2, [r4, #16]
    59f4:	4293      	cmp	r3, r2
    59f6:	dd01      	ble.n	59fc <_printf_common+0x7c>
    59f8:	1a9b      	subs	r3, r3, r2
    59fa:	18ed      	adds	r5, r5, r3
    59fc:	2700      	movs	r7, #0
    59fe:	42bd      	cmp	r5, r7
    5a00:	d120      	bne.n	5a44 <_printf_common+0xc4>
    5a02:	2000      	movs	r0, #0
    5a04:	e010      	b.n	5a28 <_printf_common+0xa8>
    5a06:	3701      	adds	r7, #1
    5a08:	68e3      	ldr	r3, [r4, #12]
    5a0a:	682a      	ldr	r2, [r5, #0]
    5a0c:	1a9b      	subs	r3, r3, r2
    5a0e:	429f      	cmp	r7, r3
    5a10:	dad2      	bge.n	59b8 <_printf_common+0x38>
    5a12:	0022      	movs	r2, r4
    5a14:	2301      	movs	r3, #1
    5a16:	3219      	adds	r2, #25
    5a18:	9901      	ldr	r1, [sp, #4]
    5a1a:	9800      	ldr	r0, [sp, #0]
    5a1c:	9e08      	ldr	r6, [sp, #32]
    5a1e:	47b0      	blx	r6
    5a20:	1c43      	adds	r3, r0, #1
    5a22:	d1f0      	bne.n	5a06 <_printf_common+0x86>
    5a24:	2001      	movs	r0, #1
    5a26:	4240      	negs	r0, r0
    5a28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a2a:	2030      	movs	r0, #48	; 0x30
    5a2c:	18e1      	adds	r1, r4, r3
    5a2e:	3143      	adds	r1, #67	; 0x43
    5a30:	7008      	strb	r0, [r1, #0]
    5a32:	0021      	movs	r1, r4
    5a34:	1c5a      	adds	r2, r3, #1
    5a36:	3145      	adds	r1, #69	; 0x45
    5a38:	7809      	ldrb	r1, [r1, #0]
    5a3a:	18a2      	adds	r2, r4, r2
    5a3c:	3243      	adds	r2, #67	; 0x43
    5a3e:	3302      	adds	r3, #2
    5a40:	7011      	strb	r1, [r2, #0]
    5a42:	e7c1      	b.n	59c8 <_printf_common+0x48>
    5a44:	0022      	movs	r2, r4
    5a46:	2301      	movs	r3, #1
    5a48:	321a      	adds	r2, #26
    5a4a:	9901      	ldr	r1, [sp, #4]
    5a4c:	9800      	ldr	r0, [sp, #0]
    5a4e:	9e08      	ldr	r6, [sp, #32]
    5a50:	47b0      	blx	r6
    5a52:	1c43      	adds	r3, r0, #1
    5a54:	d0e6      	beq.n	5a24 <_printf_common+0xa4>
    5a56:	3701      	adds	r7, #1
    5a58:	e7d1      	b.n	59fe <_printf_common+0x7e>
	...

00005a5c <_printf_i>:
    5a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a5e:	b08b      	sub	sp, #44	; 0x2c
    5a60:	9206      	str	r2, [sp, #24]
    5a62:	000a      	movs	r2, r1
    5a64:	3243      	adds	r2, #67	; 0x43
    5a66:	9307      	str	r3, [sp, #28]
    5a68:	9005      	str	r0, [sp, #20]
    5a6a:	9204      	str	r2, [sp, #16]
    5a6c:	7e0a      	ldrb	r2, [r1, #24]
    5a6e:	000c      	movs	r4, r1
    5a70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5a72:	2a6e      	cmp	r2, #110	; 0x6e
    5a74:	d100      	bne.n	5a78 <_printf_i+0x1c>
    5a76:	e08f      	b.n	5b98 <_printf_i+0x13c>
    5a78:	d817      	bhi.n	5aaa <_printf_i+0x4e>
    5a7a:	2a63      	cmp	r2, #99	; 0x63
    5a7c:	d02c      	beq.n	5ad8 <_printf_i+0x7c>
    5a7e:	d808      	bhi.n	5a92 <_printf_i+0x36>
    5a80:	2a00      	cmp	r2, #0
    5a82:	d100      	bne.n	5a86 <_printf_i+0x2a>
    5a84:	e099      	b.n	5bba <_printf_i+0x15e>
    5a86:	2a58      	cmp	r2, #88	; 0x58
    5a88:	d054      	beq.n	5b34 <_printf_i+0xd8>
    5a8a:	0026      	movs	r6, r4
    5a8c:	3642      	adds	r6, #66	; 0x42
    5a8e:	7032      	strb	r2, [r6, #0]
    5a90:	e029      	b.n	5ae6 <_printf_i+0x8a>
    5a92:	2a64      	cmp	r2, #100	; 0x64
    5a94:	d001      	beq.n	5a9a <_printf_i+0x3e>
    5a96:	2a69      	cmp	r2, #105	; 0x69
    5a98:	d1f7      	bne.n	5a8a <_printf_i+0x2e>
    5a9a:	6821      	ldr	r1, [r4, #0]
    5a9c:	681a      	ldr	r2, [r3, #0]
    5a9e:	0608      	lsls	r0, r1, #24
    5aa0:	d523      	bpl.n	5aea <_printf_i+0x8e>
    5aa2:	1d11      	adds	r1, r2, #4
    5aa4:	6019      	str	r1, [r3, #0]
    5aa6:	6815      	ldr	r5, [r2, #0]
    5aa8:	e025      	b.n	5af6 <_printf_i+0x9a>
    5aaa:	2a73      	cmp	r2, #115	; 0x73
    5aac:	d100      	bne.n	5ab0 <_printf_i+0x54>
    5aae:	e088      	b.n	5bc2 <_printf_i+0x166>
    5ab0:	d808      	bhi.n	5ac4 <_printf_i+0x68>
    5ab2:	2a6f      	cmp	r2, #111	; 0x6f
    5ab4:	d029      	beq.n	5b0a <_printf_i+0xae>
    5ab6:	2a70      	cmp	r2, #112	; 0x70
    5ab8:	d1e7      	bne.n	5a8a <_printf_i+0x2e>
    5aba:	2220      	movs	r2, #32
    5abc:	6809      	ldr	r1, [r1, #0]
    5abe:	430a      	orrs	r2, r1
    5ac0:	6022      	str	r2, [r4, #0]
    5ac2:	e003      	b.n	5acc <_printf_i+0x70>
    5ac4:	2a75      	cmp	r2, #117	; 0x75
    5ac6:	d020      	beq.n	5b0a <_printf_i+0xae>
    5ac8:	2a78      	cmp	r2, #120	; 0x78
    5aca:	d1de      	bne.n	5a8a <_printf_i+0x2e>
    5acc:	0022      	movs	r2, r4
    5ace:	2178      	movs	r1, #120	; 0x78
    5ad0:	3245      	adds	r2, #69	; 0x45
    5ad2:	7011      	strb	r1, [r2, #0]
    5ad4:	4a6c      	ldr	r2, [pc, #432]	; (5c88 <_printf_i+0x22c>)
    5ad6:	e030      	b.n	5b3a <_printf_i+0xde>
    5ad8:	000e      	movs	r6, r1
    5ada:	681a      	ldr	r2, [r3, #0]
    5adc:	3642      	adds	r6, #66	; 0x42
    5ade:	1d11      	adds	r1, r2, #4
    5ae0:	6019      	str	r1, [r3, #0]
    5ae2:	6813      	ldr	r3, [r2, #0]
    5ae4:	7033      	strb	r3, [r6, #0]
    5ae6:	2301      	movs	r3, #1
    5ae8:	e079      	b.n	5bde <_printf_i+0x182>
    5aea:	0649      	lsls	r1, r1, #25
    5aec:	d5d9      	bpl.n	5aa2 <_printf_i+0x46>
    5aee:	1d11      	adds	r1, r2, #4
    5af0:	6019      	str	r1, [r3, #0]
    5af2:	2300      	movs	r3, #0
    5af4:	5ed5      	ldrsh	r5, [r2, r3]
    5af6:	2d00      	cmp	r5, #0
    5af8:	da03      	bge.n	5b02 <_printf_i+0xa6>
    5afa:	232d      	movs	r3, #45	; 0x2d
    5afc:	9a04      	ldr	r2, [sp, #16]
    5afe:	426d      	negs	r5, r5
    5b00:	7013      	strb	r3, [r2, #0]
    5b02:	4b62      	ldr	r3, [pc, #392]	; (5c8c <_printf_i+0x230>)
    5b04:	270a      	movs	r7, #10
    5b06:	9303      	str	r3, [sp, #12]
    5b08:	e02f      	b.n	5b6a <_printf_i+0x10e>
    5b0a:	6820      	ldr	r0, [r4, #0]
    5b0c:	6819      	ldr	r1, [r3, #0]
    5b0e:	0605      	lsls	r5, r0, #24
    5b10:	d503      	bpl.n	5b1a <_printf_i+0xbe>
    5b12:	1d08      	adds	r0, r1, #4
    5b14:	6018      	str	r0, [r3, #0]
    5b16:	680d      	ldr	r5, [r1, #0]
    5b18:	e005      	b.n	5b26 <_printf_i+0xca>
    5b1a:	0640      	lsls	r0, r0, #25
    5b1c:	d5f9      	bpl.n	5b12 <_printf_i+0xb6>
    5b1e:	680d      	ldr	r5, [r1, #0]
    5b20:	1d08      	adds	r0, r1, #4
    5b22:	6018      	str	r0, [r3, #0]
    5b24:	b2ad      	uxth	r5, r5
    5b26:	4b59      	ldr	r3, [pc, #356]	; (5c8c <_printf_i+0x230>)
    5b28:	2708      	movs	r7, #8
    5b2a:	9303      	str	r3, [sp, #12]
    5b2c:	2a6f      	cmp	r2, #111	; 0x6f
    5b2e:	d018      	beq.n	5b62 <_printf_i+0x106>
    5b30:	270a      	movs	r7, #10
    5b32:	e016      	b.n	5b62 <_printf_i+0x106>
    5b34:	3145      	adds	r1, #69	; 0x45
    5b36:	700a      	strb	r2, [r1, #0]
    5b38:	4a54      	ldr	r2, [pc, #336]	; (5c8c <_printf_i+0x230>)
    5b3a:	9203      	str	r2, [sp, #12]
    5b3c:	681a      	ldr	r2, [r3, #0]
    5b3e:	6821      	ldr	r1, [r4, #0]
    5b40:	1d10      	adds	r0, r2, #4
    5b42:	6018      	str	r0, [r3, #0]
    5b44:	6815      	ldr	r5, [r2, #0]
    5b46:	0608      	lsls	r0, r1, #24
    5b48:	d522      	bpl.n	5b90 <_printf_i+0x134>
    5b4a:	07cb      	lsls	r3, r1, #31
    5b4c:	d502      	bpl.n	5b54 <_printf_i+0xf8>
    5b4e:	2320      	movs	r3, #32
    5b50:	4319      	orrs	r1, r3
    5b52:	6021      	str	r1, [r4, #0]
    5b54:	2710      	movs	r7, #16
    5b56:	2d00      	cmp	r5, #0
    5b58:	d103      	bne.n	5b62 <_printf_i+0x106>
    5b5a:	2320      	movs	r3, #32
    5b5c:	6822      	ldr	r2, [r4, #0]
    5b5e:	439a      	bics	r2, r3
    5b60:	6022      	str	r2, [r4, #0]
    5b62:	0023      	movs	r3, r4
    5b64:	2200      	movs	r2, #0
    5b66:	3343      	adds	r3, #67	; 0x43
    5b68:	701a      	strb	r2, [r3, #0]
    5b6a:	6863      	ldr	r3, [r4, #4]
    5b6c:	60a3      	str	r3, [r4, #8]
    5b6e:	2b00      	cmp	r3, #0
    5b70:	db5c      	blt.n	5c2c <_printf_i+0x1d0>
    5b72:	2204      	movs	r2, #4
    5b74:	6821      	ldr	r1, [r4, #0]
    5b76:	4391      	bics	r1, r2
    5b78:	6021      	str	r1, [r4, #0]
    5b7a:	2d00      	cmp	r5, #0
    5b7c:	d158      	bne.n	5c30 <_printf_i+0x1d4>
    5b7e:	9e04      	ldr	r6, [sp, #16]
    5b80:	2b00      	cmp	r3, #0
    5b82:	d064      	beq.n	5c4e <_printf_i+0x1f2>
    5b84:	0026      	movs	r6, r4
    5b86:	9b03      	ldr	r3, [sp, #12]
    5b88:	3642      	adds	r6, #66	; 0x42
    5b8a:	781b      	ldrb	r3, [r3, #0]
    5b8c:	7033      	strb	r3, [r6, #0]
    5b8e:	e05e      	b.n	5c4e <_printf_i+0x1f2>
    5b90:	0648      	lsls	r0, r1, #25
    5b92:	d5da      	bpl.n	5b4a <_printf_i+0xee>
    5b94:	b2ad      	uxth	r5, r5
    5b96:	e7d8      	b.n	5b4a <_printf_i+0xee>
    5b98:	6809      	ldr	r1, [r1, #0]
    5b9a:	681a      	ldr	r2, [r3, #0]
    5b9c:	0608      	lsls	r0, r1, #24
    5b9e:	d505      	bpl.n	5bac <_printf_i+0x150>
    5ba0:	1d11      	adds	r1, r2, #4
    5ba2:	6019      	str	r1, [r3, #0]
    5ba4:	6813      	ldr	r3, [r2, #0]
    5ba6:	6962      	ldr	r2, [r4, #20]
    5ba8:	601a      	str	r2, [r3, #0]
    5baa:	e006      	b.n	5bba <_printf_i+0x15e>
    5bac:	0649      	lsls	r1, r1, #25
    5bae:	d5f7      	bpl.n	5ba0 <_printf_i+0x144>
    5bb0:	1d11      	adds	r1, r2, #4
    5bb2:	6019      	str	r1, [r3, #0]
    5bb4:	6813      	ldr	r3, [r2, #0]
    5bb6:	8aa2      	ldrh	r2, [r4, #20]
    5bb8:	801a      	strh	r2, [r3, #0]
    5bba:	2300      	movs	r3, #0
    5bbc:	9e04      	ldr	r6, [sp, #16]
    5bbe:	6123      	str	r3, [r4, #16]
    5bc0:	e054      	b.n	5c6c <_printf_i+0x210>
    5bc2:	681a      	ldr	r2, [r3, #0]
    5bc4:	1d11      	adds	r1, r2, #4
    5bc6:	6019      	str	r1, [r3, #0]
    5bc8:	6816      	ldr	r6, [r2, #0]
    5bca:	2100      	movs	r1, #0
    5bcc:	6862      	ldr	r2, [r4, #4]
    5bce:	0030      	movs	r0, r6
    5bd0:	f000 f870 	bl	5cb4 <memchr>
    5bd4:	2800      	cmp	r0, #0
    5bd6:	d001      	beq.n	5bdc <_printf_i+0x180>
    5bd8:	1b80      	subs	r0, r0, r6
    5bda:	6060      	str	r0, [r4, #4]
    5bdc:	6863      	ldr	r3, [r4, #4]
    5bde:	6123      	str	r3, [r4, #16]
    5be0:	2300      	movs	r3, #0
    5be2:	9a04      	ldr	r2, [sp, #16]
    5be4:	7013      	strb	r3, [r2, #0]
    5be6:	e041      	b.n	5c6c <_printf_i+0x210>
    5be8:	6923      	ldr	r3, [r4, #16]
    5bea:	0032      	movs	r2, r6
    5bec:	9906      	ldr	r1, [sp, #24]
    5bee:	9805      	ldr	r0, [sp, #20]
    5bf0:	9d07      	ldr	r5, [sp, #28]
    5bf2:	47a8      	blx	r5
    5bf4:	1c43      	adds	r3, r0, #1
    5bf6:	d043      	beq.n	5c80 <_printf_i+0x224>
    5bf8:	6823      	ldr	r3, [r4, #0]
    5bfa:	2500      	movs	r5, #0
    5bfc:	079b      	lsls	r3, r3, #30
    5bfe:	d40f      	bmi.n	5c20 <_printf_i+0x1c4>
    5c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c02:	68e0      	ldr	r0, [r4, #12]
    5c04:	4298      	cmp	r0, r3
    5c06:	da3d      	bge.n	5c84 <_printf_i+0x228>
    5c08:	0018      	movs	r0, r3
    5c0a:	e03b      	b.n	5c84 <_printf_i+0x228>
    5c0c:	0022      	movs	r2, r4
    5c0e:	2301      	movs	r3, #1
    5c10:	3219      	adds	r2, #25
    5c12:	9906      	ldr	r1, [sp, #24]
    5c14:	9805      	ldr	r0, [sp, #20]
    5c16:	9e07      	ldr	r6, [sp, #28]
    5c18:	47b0      	blx	r6
    5c1a:	1c43      	adds	r3, r0, #1
    5c1c:	d030      	beq.n	5c80 <_printf_i+0x224>
    5c1e:	3501      	adds	r5, #1
    5c20:	68e3      	ldr	r3, [r4, #12]
    5c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c24:	1a9b      	subs	r3, r3, r2
    5c26:	429d      	cmp	r5, r3
    5c28:	dbf0      	blt.n	5c0c <_printf_i+0x1b0>
    5c2a:	e7e9      	b.n	5c00 <_printf_i+0x1a4>
    5c2c:	2d00      	cmp	r5, #0
    5c2e:	d0a9      	beq.n	5b84 <_printf_i+0x128>
    5c30:	9e04      	ldr	r6, [sp, #16]
    5c32:	0028      	movs	r0, r5
    5c34:	0039      	movs	r1, r7
    5c36:	f7ff fbf5 	bl	5424 <__aeabi_uidivmod>
    5c3a:	9b03      	ldr	r3, [sp, #12]
    5c3c:	3e01      	subs	r6, #1
    5c3e:	5c5b      	ldrb	r3, [r3, r1]
    5c40:	0028      	movs	r0, r5
    5c42:	7033      	strb	r3, [r6, #0]
    5c44:	0039      	movs	r1, r7
    5c46:	f7ff fb67 	bl	5318 <__udivsi3>
    5c4a:	1e05      	subs	r5, r0, #0
    5c4c:	d1f1      	bne.n	5c32 <_printf_i+0x1d6>
    5c4e:	2f08      	cmp	r7, #8
    5c50:	d109      	bne.n	5c66 <_printf_i+0x20a>
    5c52:	6823      	ldr	r3, [r4, #0]
    5c54:	07db      	lsls	r3, r3, #31
    5c56:	d506      	bpl.n	5c66 <_printf_i+0x20a>
    5c58:	6863      	ldr	r3, [r4, #4]
    5c5a:	6922      	ldr	r2, [r4, #16]
    5c5c:	4293      	cmp	r3, r2
    5c5e:	dc02      	bgt.n	5c66 <_printf_i+0x20a>
    5c60:	2330      	movs	r3, #48	; 0x30
    5c62:	3e01      	subs	r6, #1
    5c64:	7033      	strb	r3, [r6, #0]
    5c66:	9b04      	ldr	r3, [sp, #16]
    5c68:	1b9b      	subs	r3, r3, r6
    5c6a:	6123      	str	r3, [r4, #16]
    5c6c:	9b07      	ldr	r3, [sp, #28]
    5c6e:	aa09      	add	r2, sp, #36	; 0x24
    5c70:	9300      	str	r3, [sp, #0]
    5c72:	0021      	movs	r1, r4
    5c74:	9b06      	ldr	r3, [sp, #24]
    5c76:	9805      	ldr	r0, [sp, #20]
    5c78:	f7ff fe82 	bl	5980 <_printf_common>
    5c7c:	1c43      	adds	r3, r0, #1
    5c7e:	d1b3      	bne.n	5be8 <_printf_i+0x18c>
    5c80:	2001      	movs	r0, #1
    5c82:	4240      	negs	r0, r0
    5c84:	b00b      	add	sp, #44	; 0x2c
    5c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c88:	0000602a 	.word	0x0000602a
    5c8c:	00006019 	.word	0x00006019

00005c90 <_sbrk_r>:
    5c90:	2300      	movs	r3, #0
    5c92:	b570      	push	{r4, r5, r6, lr}
    5c94:	4c06      	ldr	r4, [pc, #24]	; (5cb0 <_sbrk_r+0x20>)
    5c96:	0005      	movs	r5, r0
    5c98:	0008      	movs	r0, r1
    5c9a:	6023      	str	r3, [r4, #0]
    5c9c:	f7ff f91c 	bl	4ed8 <_sbrk>
    5ca0:	1c43      	adds	r3, r0, #1
    5ca2:	d103      	bne.n	5cac <_sbrk_r+0x1c>
    5ca4:	6823      	ldr	r3, [r4, #0]
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d000      	beq.n	5cac <_sbrk_r+0x1c>
    5caa:	602b      	str	r3, [r5, #0]
    5cac:	bd70      	pop	{r4, r5, r6, pc}
    5cae:	46c0      	nop			; (mov r8, r8)
    5cb0:	20000a38 	.word	0x20000a38

00005cb4 <memchr>:
    5cb4:	b2c9      	uxtb	r1, r1
    5cb6:	1882      	adds	r2, r0, r2
    5cb8:	4290      	cmp	r0, r2
    5cba:	d101      	bne.n	5cc0 <memchr+0xc>
    5cbc:	2000      	movs	r0, #0
    5cbe:	4770      	bx	lr
    5cc0:	7803      	ldrb	r3, [r0, #0]
    5cc2:	428b      	cmp	r3, r1
    5cc4:	d0fb      	beq.n	5cbe <memchr+0xa>
    5cc6:	3001      	adds	r0, #1
    5cc8:	e7f6      	b.n	5cb8 <memchr+0x4>

00005cca <memmove>:
    5cca:	b510      	push	{r4, lr}
    5ccc:	4288      	cmp	r0, r1
    5cce:	d902      	bls.n	5cd6 <memmove+0xc>
    5cd0:	188b      	adds	r3, r1, r2
    5cd2:	4298      	cmp	r0, r3
    5cd4:	d308      	bcc.n	5ce8 <memmove+0x1e>
    5cd6:	2300      	movs	r3, #0
    5cd8:	429a      	cmp	r2, r3
    5cda:	d007      	beq.n	5cec <memmove+0x22>
    5cdc:	5ccc      	ldrb	r4, [r1, r3]
    5cde:	54c4      	strb	r4, [r0, r3]
    5ce0:	3301      	adds	r3, #1
    5ce2:	e7f9      	b.n	5cd8 <memmove+0xe>
    5ce4:	5c8b      	ldrb	r3, [r1, r2]
    5ce6:	5483      	strb	r3, [r0, r2]
    5ce8:	3a01      	subs	r2, #1
    5cea:	d2fb      	bcs.n	5ce4 <memmove+0x1a>
    5cec:	bd10      	pop	{r4, pc}

00005cee <__malloc_lock>:
    5cee:	4770      	bx	lr

00005cf0 <__malloc_unlock>:
    5cf0:	4770      	bx	lr

00005cf2 <_realloc_r>:
    5cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cf4:	0007      	movs	r7, r0
    5cf6:	000d      	movs	r5, r1
    5cf8:	0016      	movs	r6, r2
    5cfa:	2900      	cmp	r1, #0
    5cfc:	d105      	bne.n	5d0a <_realloc_r+0x18>
    5cfe:	0011      	movs	r1, r2
    5d00:	f7ff fc7a 	bl	55f8 <_malloc_r>
    5d04:	0004      	movs	r4, r0
    5d06:	0020      	movs	r0, r4
    5d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d0a:	2a00      	cmp	r2, #0
    5d0c:	d103      	bne.n	5d16 <_realloc_r+0x24>
    5d0e:	f7ff fc29 	bl	5564 <_free_r>
    5d12:	0034      	movs	r4, r6
    5d14:	e7f7      	b.n	5d06 <_realloc_r+0x14>
    5d16:	f000 f812 	bl	5d3e <_malloc_usable_size_r>
    5d1a:	002c      	movs	r4, r5
    5d1c:	4286      	cmp	r6, r0
    5d1e:	d9f2      	bls.n	5d06 <_realloc_r+0x14>
    5d20:	0031      	movs	r1, r6
    5d22:	0038      	movs	r0, r7
    5d24:	f7ff fc68 	bl	55f8 <_malloc_r>
    5d28:	1e04      	subs	r4, r0, #0
    5d2a:	d0ec      	beq.n	5d06 <_realloc_r+0x14>
    5d2c:	0029      	movs	r1, r5
    5d2e:	0032      	movs	r2, r6
    5d30:	f7ff fbcc 	bl	54cc <memcpy>
    5d34:	0029      	movs	r1, r5
    5d36:	0038      	movs	r0, r7
    5d38:	f7ff fc14 	bl	5564 <_free_r>
    5d3c:	e7e3      	b.n	5d06 <_realloc_r+0x14>

00005d3e <_malloc_usable_size_r>:
    5d3e:	1f0b      	subs	r3, r1, #4
    5d40:	681b      	ldr	r3, [r3, #0]
    5d42:	1f18      	subs	r0, r3, #4
    5d44:	2b00      	cmp	r3, #0
    5d46:	da01      	bge.n	5d4c <_malloc_usable_size_r+0xe>
    5d48:	580b      	ldr	r3, [r1, r0]
    5d4a:	18c0      	adds	r0, r0, r3
    5d4c:	4770      	bx	lr
    5d4e:	0000      	movs	r0, r0
    5d50:	42000800 	.word	0x42000800
    5d54:	42000c00 	.word	0x42000c00
    5d58:	42001000 	.word	0x42001000
    5d5c:	42001400 	.word	0x42001400
    5d60:	42001800 	.word	0x42001800
    5d64:	42001c00 	.word	0x42001c00
    5d68:	484d3732 	.word	0x484d3732
    5d6c:	0000007a 	.word	0x0000007a
    5d70:	4d393631 	.word	0x4d393631
    5d74:	00007a48 	.word	0x00007a48
    5d78:	4d353139 	.word	0x4d353139
    5d7c:	00007a48 	.word	0x00007a48
    5d80:	47342e32 	.word	0x47342e32
    5d84:	00007a48 	.word	0x00007a48
    5d88:	00004264 	.word	0x00004264
    5d8c:	65747441 	.word	0x65747441
    5d90:	7461756e 	.word	0x7461756e
    5d94:	006e6f69 	.word	0x006e6f69
    5d98:	61656c50 	.word	0x61656c50
    5d9c:	74206573 	.word	0x74206573
    5da0:	6f207061 	.word	0x6f207061
    5da4:	6874206e 	.word	0x6874206e
    5da8:	6f642065 	.word	0x6f642065
    5dac:	00000074 	.word	0x00000074
    5db0:	61422020 	.word	0x61422020
    5db4:	20206b63 	.word	0x20206b63
    5db8:	00000000 	.word	0x00000000
    5dbc:	00333231 	.word	0x00333231
    5dc0:	00363534 	.word	0x00363534
    5dc4:	00393837 	.word	0x00393837
    5dc8:	00000030 	.word	0x00000030
    5dcc:	00002d3c 	.word	0x00002d3c
    5dd0:	00524c43 	.word	0x00524c43
    5dd4:	00004b4f 	.word	0x00004b4f
    5dd8:	20202023 	.word	0x20202023
    5ddc:	6d695420 	.word	0x6d695420
    5de0:	20202065 	.word	0x20202065
    5de4:	20202020 	.word	0x20202020
    5de8:	44202020 	.word	0x44202020
    5dec:	20657461 	.word	0x20657461
    5df0:	20202020 	.word	0x20202020
    5df4:	20202020 	.word	0x20202020
    5df8:	20202020 	.word	0x20202020
    5dfc:	20202020 	.word	0x20202020
    5e00:	20202020 	.word	0x20202020
    5e04:	20202020 	.word	0x20202020
    5e08:	4d373220 	.word	0x4d373220
    5e0c:	20207a68 	.word	0x20207a68
    5e10:	20202020 	.word	0x20202020
    5e14:	36312020 	.word	0x36312020
    5e18:	7a684d39 	.word	0x7a684d39
    5e1c:	20202020 	.word	0x20202020
    5e20:	31392020 	.word	0x31392020
    5e24:	7a684d35 	.word	0x7a684d35
    5e28:	20202020 	.word	0x20202020
    5e2c:	20202020 	.word	0x20202020
    5e30:	47342e32 	.word	0x47342e32
    5e34:	00007a68 	.word	0x00007a68
    5e38:	64323025 	.word	0x64323025
    5e3c:	3025202e 	.word	0x3025202e
    5e40:	253a6432 	.word	0x253a6432
    5e44:	3a643230 	.word	0x3a643230
    5e48:	64323025 	.word	0x64323025
    5e4c:	25202020 	.word	0x25202020
    5e50:	2f643230 	.word	0x2f643230
    5e54:	64323025 	.word	0x64323025
    5e58:	3430252f 	.word	0x3430252f
    5e5c:	20202064 	.word	0x20202064
    5e60:	20202020 	.word	0x20202020
    5e64:	20202020 	.word	0x20202020
    5e68:	20202020 	.word	0x20202020
    5e6c:	64333025 	.word	0x64333025
    5e70:	20202020 	.word	0x20202020
    5e74:	20202020 	.word	0x20202020
    5e78:	20202020 	.word	0x20202020
    5e7c:	25202020 	.word	0x25202020
    5e80:	20643330 	.word	0x20643330
    5e84:	20202020 	.word	0x20202020
    5e88:	20202020 	.word	0x20202020
    5e8c:	20202020 	.word	0x20202020
    5e90:	30252020 	.word	0x30252020
    5e94:	20206433 	.word	0x20206433
    5e98:	20202020 	.word	0x20202020
    5e9c:	20202020 	.word	0x20202020
    5ea0:	20202020 	.word	0x20202020
    5ea4:	33302520 	.word	0x33302520
    5ea8:	00000064 	.word	0x00000064
    5eac:	74736948 	.word	0x74736948
    5eb0:	0079726f 	.word	0x0079726f
    5eb4:	64323025 	.word	0x64323025
    5eb8:	3230253a 	.word	0x3230253a
    5ebc:	30253a64 	.word	0x30253a64
    5ec0:	00006432 	.word	0x00006432
    5ec4:	64323025 	.word	0x64323025
    5ec8:	3230252f 	.word	0x3230252f
    5ecc:	30252f64 	.word	0x30252f64
    5ed0:	00006434 	.word	0x00006434
    5ed4:	49535352 	.word	0x49535352
    5ed8:	6e695b20 	.word	0x6e695b20
    5edc:	69726574 	.word	0x69726574
    5ee0:	005d726f 	.word	0x005d726f
    5ee4:	65746e45 	.word	0x65746e45
    5ee8:	61442072 	.word	0x61442072
    5eec:	00006574 	.word	0x00006574
    5ef0:	642f6d6d 	.word	0x642f6d6d
    5ef4:	79792f64 	.word	0x79792f64
    5ef8:	00007979 	.word	0x00007979
    5efc:	65746e45 	.word	0x65746e45
    5f00:	69542072 	.word	0x69542072
    5f04:	0000656d 	.word	0x0000656d
    5f08:	6d3a6868 	.word	0x6d3a6868
    5f0c:	73733a6d 	.word	0x73733a6d
    5f10:	20202020 	.word	0x20202020
    5f14:	68343228 	.word	0x68343228
    5f18:	726f6620 	.word	0x726f6620
    5f1c:	2974616d 	.word	0x2974616d
    5f20:	00000000 	.word	0x00000000
    5f24:	75736956 	.word	0x75736956
    5f28:	003a6c61 	.word	0x003a6c61
    5f2c:	00736559 	.word	0x00736559
    5f30:	00006f4e 	.word	0x00006f4e
    5f34:	6e756f53 	.word	0x6e756f53
    5f38:	00203a64 	.word	0x00203a64
    5f3c:	61432020 	.word	0x61432020
    5f40:	7262696c 	.word	0x7262696c
    5f44:	20657461 	.word	0x20657461
    5f48:	65726353 	.word	0x65726353
    5f4c:	20206e65 	.word	0x20206e65
    5f50:	00000000 	.word	0x00000000
    5f54:	65532020 	.word	0x65532020
    5f58:	61442074 	.word	0x61442074
    5f5c:	20206574 	.word	0x20206574
    5f60:	00000000 	.word	0x00000000
    5f64:	65532020 	.word	0x65532020
    5f68:	69542074 	.word	0x69542074
    5f6c:	2020656d 	.word	0x2020656d
    5f70:	00000000 	.word	0x00000000
    5f74:	74746553 	.word	0x74746553
    5f78:	73676e69 	.word	0x73676e69
    5f7c:	00000000 	.word	0x00000000
    5f80:	0c0b0a09 	.word	0x0c0b0a09
    5f84:	00000e0d 	.word	0x00000e0d
    5f88:	00004750 	.word	0x00004750
    5f8c:	000047ac 	.word	0x000047ac
    5f90:	000047ac 	.word	0x000047ac
    5f94:	0000474a 	.word	0x0000474a
    5f98:	0000474a 	.word	0x0000474a
    5f9c:	00004764 	.word	0x00004764
    5fa0:	00004756 	.word	0x00004756
    5fa4:	0000476a 	.word	0x0000476a
    5fa8:	0000479c 	.word	0x0000479c
    5fac:	0000489c 	.word	0x0000489c
    5fb0:	0000490a 	.word	0x0000490a
    5fb4:	0000490a 	.word	0x0000490a
    5fb8:	0000487c 	.word	0x0000487c
    5fbc:	0000488e 	.word	0x0000488e
    5fc0:	000048ac 	.word	0x000048ac
    5fc4:	00004880 	.word	0x00004880
    5fc8:	000048bc 	.word	0x000048bc
    5fcc:	000048f8 	.word	0x000048f8
    5fd0:	74412020 	.word	0x74412020
    5fd4:	756e6574 	.word	0x756e6574
    5fd8:	6f697461 	.word	0x6f697461
    5fdc:	0020206e 	.word	0x0020206e
    5fe0:	69482020 	.word	0x69482020
    5fe4:	726f7473 	.word	0x726f7473
    5fe8:	00202079 	.word	0x00202079
    5fec:	53522020 	.word	0x53522020
    5ff0:	20204953 	.word	0x20204953
    5ff4:	00000000 	.word	0x00000000
    5ff8:	65532020 	.word	0x65532020
    5ffc:	6e697474 	.word	0x6e697474
    6000:	20207367 	.word	0x20207367
    6004:	00000000 	.word	0x00000000
    6008:	2b302d23 	.word	0x2b302d23
    600c:	6c680020 	.word	0x6c680020
    6010:	6665004c 	.word	0x6665004c
    6014:	47464567 	.word	0x47464567
    6018:	00          	.byte	0x00
    6019:	30          	.byte	0x30
    601a:	3231      	.short	0x3231
    601c:	36353433 	.word	0x36353433
    6020:	41393837 	.word	0x41393837
    6024:	45444342 	.word	0x45444342
    6028:	31300046 	.word	0x31300046
    602c:	35343332 	.word	0x35343332
    6030:	39383736 	.word	0x39383736
    6034:	64636261 	.word	0x64636261
    6038:	00006665 	.word	0x00006665

0000603c <_init>:
    603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    603e:	46c0      	nop			; (mov r8, r8)
    6040:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6042:	bc08      	pop	{r3}
    6044:	469e      	mov	lr, r3
    6046:	4770      	bx	lr

00006048 <__init_array_start>:
    6048:	000000dd 	.word	0x000000dd

0000604c <_fini>:
    604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    604e:	46c0      	nop			; (mov r8, r8)
    6050:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6052:	bc08      	pop	{r3}
    6054:	469e      	mov	lr, r3
    6056:	4770      	bx	lr

00006058 <__fini_array_start>:
    6058:	000000b5 	.word	0x000000b5
