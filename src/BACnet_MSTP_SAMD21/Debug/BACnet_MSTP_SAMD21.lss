
BACnet_MSTP_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fa10  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000328  20000000  0000fa10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001be8  20000328  0000fd38  00020328  2**2
                  ALLOC
  3 .stack        00002000  20001f10  00011920  00020328  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
  6 .debug_info   000a0fb7  00000000  00000000  000203a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000e2f0  00000000  00000000  000c1360  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00029c71  00000000  00000000  000cf650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000022d8  00000000  00000000  000f92c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000025d8  00000000  00000000  000fb599  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002d8e4  00000000  00000000  000fdb71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0003108a  00000000  00000000  0012b455  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a36ea  00000000  00000000  0015c4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006098  00000000  00000000  001ffbcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *
 * @brief  Updates the SystemCoreClock with current core Clock
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
       0:	10 3f 00 20 1d c7 00 00 19 c7 00 00 19 c7 00 00     .?. ............
	...
      2c:	19 c7 00 00 00 00 00 00 00 00 00 00 19 c7 00 00     ................
      3c:	31 99 00 00 19 c7 00 00 19 c7 00 00 45 b7 00 00     1...........E...
      4c:	19 c7 00 00 a1 02 00 00 19 c7 00 00 19 c7 00 00     ................
      5c:	19 c7 00 00 19 c7 00 00 29 bf 00 00 39 bf 00 00     ........)...9...
      6c:	49 bf 00 00 59 bf 00 00 69 bf 00 00 79 bf 00 00     I...Y...i...y...
      7c:	19 c7 00 00 19 c7 00 00 19 c7 00 00 c5 b7 00 00     ................
      8c:	d5 b7 00 00 e5 b7 00 00 f5 b7 00 00 05 b8 00 00     ................
      9c:	65 02 00 00 19 c7 00 00 19 c7 00 00 19 c7 00 00     e...............
      ac:	19 c7 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000328 	.word	0x20000328
      d4:	00000000 	.word	0x00000000
      d8:	0000fa10 	.word	0x0000fa10

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000032c 	.word	0x2000032c
     108:	0000fa10 	.word	0x0000fa10
     10c:	0000fa10 	.word	0x0000fa10
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	0000c44d 	.word	0x0000c44d
     140:	0000cbb1 	.word	0x0000cbb1
     144:	20000000 	.word	0x20000000
     148:	20000004 	.word	0x20000004
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     150:	e000      	b.n	154 <delay_cycles_ms+0x4>
{
     152:	0010      	movs	r0, r2
	while (n--) {
     154:	1e42      	subs	r2, r0, #1
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     15a:	4b07      	ldr	r3, [pc, #28]	; (178 <delay_cycles_ms+0x28>)
     15c:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15e:	2b00      	cmp	r3, #0
     160:	d0f7      	beq.n	152 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     162:	4906      	ldr	r1, [pc, #24]	; (17c <delay_cycles_ms+0x2c>)
     164:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     166:	2300      	movs	r3, #0
     168:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <delay_cycles_ms+0x2c>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	03db      	lsls	r3, r3, #15
     170:	d5fb      	bpl.n	16a <delay_cycles_ms+0x1a>
     172:	e7ee      	b.n	152 <delay_cycles_ms+0x2>
	}
}
     174:	4770      	bx	lr
     176:	46c0      	nop			; (mov r8, r8)
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     180:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     182:	0080      	lsls	r0, r0, #2
     184:	4b36      	ldr	r3, [pc, #216]	; (260 <_adc_interrupt_handler+0xe0>)
     186:	58c5      	ldr	r5, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     188:	682b      	ldr	r3, [r5, #0]
     18a:	7e1a      	ldrb	r2, [r3, #24]
     18c:	7ddc      	ldrb	r4, [r3, #23]
     18e:	4014      	ands	r4, r2

	if (flags & ADC_INTFLAG_RESRDY) {
     190:	07e2      	lsls	r2, r4, #31
     192:	d416      	bmi.n	1c2 <_adc_interrupt_handler+0x42>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     194:	0763      	lsls	r3, r4, #29
     196:	d508      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     198:	2304      	movs	r3, #4
     19a:	682a      	ldr	r2, [r5, #0]
     19c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     19e:	7eeb      	ldrb	r3, [r5, #27]
     1a0:	079b      	lsls	r3, r3, #30
     1a2:	d502      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     1a4:	7eab      	ldrb	r3, [r5, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     1a6:	079b      	lsls	r3, r3, #30
     1a8:	d452      	bmi.n	250 <_adc_interrupt_handler+0xd0>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     1aa:	07a3      	lsls	r3, r4, #30
     1ac:	d508      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     1ae:	2302      	movs	r3, #2
     1b0:	682a      	ldr	r2, [r5, #0]
     1b2:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1b4:	7eeb      	ldrb	r3, [r5, #27]
     1b6:	075b      	lsls	r3, r3, #29
     1b8:	d502      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     1ba:	7eab      	ldrb	r3, [r5, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1bc:	075b      	lsls	r3, r3, #29
     1be:	d44b      	bmi.n	258 <_adc_interrupt_handler+0xd8>
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     1c0:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1c2:	2201      	movs	r2, #1
     1c4:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1c6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1c8:	7e53      	ldrb	r3, [r2, #25]
     1ca:	b25b      	sxtb	r3, r3
     1cc:	2b00      	cmp	r3, #0
     1ce:	db27      	blt.n	220 <_adc_interrupt_handler+0xa0>
		return true;
	}

	return false;
     1d0:	2100      	movs	r1, #0
		while (adc_is_syncing(module)) {
     1d2:	2900      	cmp	r1, #0
     1d4:	d1f7      	bne.n	1c6 <_adc_interrupt_handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     1d6:	6968      	ldr	r0, [r5, #20]
     1d8:	1c83      	adds	r3, r0, #2
     1da:	616b      	str	r3, [r5, #20]
     1dc:	8b53      	ldrh	r3, [r2, #26]
     1de:	b29b      	uxth	r3, r3
     1e0:	8003      	strh	r3, [r0, #0]
		if (--module->remaining_conversions > 0) {
     1e2:	8b2b      	ldrh	r3, [r5, #24]
     1e4:	3b01      	subs	r3, #1
     1e6:	b29b      	uxth	r3, r3
     1e8:	832b      	strh	r3, [r5, #24]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d01e      	beq.n	22c <_adc_interrupt_handler+0xac>
			if (module->software_trigger == true) {
     1ee:	7f6b      	ldrb	r3, [r5, #29]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d0cf      	beq.n	194 <_adc_interrupt_handler+0x14>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     1f4:	682e      	ldr	r6, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1f6:	7e72      	ldrb	r2, [r6, #25]
     1f8:	b252      	sxtb	r2, r2
     1fa:	2a00      	cmp	r2, #0
     1fc:	db12      	blt.n	224 <_adc_interrupt_handler+0xa4>
	return false;
     1fe:	0008      	movs	r0, r1

	while (adc_is_syncing(module_inst)) {
     200:	2800      	cmp	r0, #0
     202:	d1f8      	bne.n	1f6 <_adc_interrupt_handler+0x76>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     204:	7b32      	ldrb	r2, [r6, #12]
     206:	2102      	movs	r1, #2
     208:	430a      	orrs	r2, r1
     20a:	b2d2      	uxtb	r2, r2
     20c:	7332      	strb	r2, [r6, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     20e:	682a      	ldr	r2, [r5, #0]
     210:	7e52      	ldrb	r2, [r2, #25]
     212:	b252      	sxtb	r2, r2
     214:	2a00      	cmp	r2, #0
     216:	db07      	blt.n	228 <_adc_interrupt_handler+0xa8>
	return false;
     218:	0002      	movs	r2, r0

	while (adc_is_syncing(module_inst)) {
     21a:	2a00      	cmp	r2, #0
     21c:	d1f7      	bne.n	20e <_adc_interrupt_handler+0x8e>
     21e:	e7b9      	b.n	194 <_adc_interrupt_handler+0x14>
		return true;
     220:	2101      	movs	r1, #1
     222:	e7d6      	b.n	1d2 <_adc_interrupt_handler+0x52>
     224:	0018      	movs	r0, r3
     226:	e7eb      	b.n	200 <_adc_interrupt_handler+0x80>
     228:	001a      	movs	r2, r3
     22a:	e7f6      	b.n	21a <_adc_interrupt_handler+0x9a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     22c:	2301      	movs	r3, #1
     22e:	682a      	ldr	r2, [r5, #0]
     230:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     232:	7f2b      	ldrb	r3, [r5, #28]
     234:	2b05      	cmp	r3, #5
     236:	d1ad      	bne.n	194 <_adc_interrupt_handler+0x14>
				module->job_status = STATUS_OK;
     238:	2300      	movs	r3, #0
     23a:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     23c:	7eeb      	ldrb	r3, [r5, #27]
     23e:	07db      	lsls	r3, r3, #31
     240:	d5a8      	bpl.n	194 <_adc_interrupt_handler+0x14>
					(module->registered_callback_mask &
     242:	7eab      	ldrb	r3, [r5, #26]
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     244:	07db      	lsls	r3, r3, #31
     246:	d5a5      	bpl.n	194 <_adc_interrupt_handler+0x14>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     248:	0028      	movs	r0, r5
     24a:	68ab      	ldr	r3, [r5, #8]
     24c:	4798      	blx	r3
     24e:	e7a1      	b.n	194 <_adc_interrupt_handler+0x14>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     250:	0028      	movs	r0, r5
     252:	68eb      	ldr	r3, [r5, #12]
     254:	4798      	blx	r3
     256:	e7a8      	b.n	1aa <_adc_interrupt_handler+0x2a>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     258:	692b      	ldr	r3, [r5, #16]
     25a:	0028      	movs	r0, r5
     25c:	4798      	blx	r3
}
     25e:	e7af      	b.n	1c0 <_adc_interrupt_handler+0x40>
     260:	200018f0 	.word	0x200018f0

00000264 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     264:	b510      	push	{r4, lr}
	_adc_interrupt_handler(0);
     266:	2000      	movs	r0, #0
     268:	4b01      	ldr	r3, [pc, #4]	; (270 <ADC_Handler+0xc>)
     26a:	4798      	blx	r3
}
     26c:	bd10      	pop	{r4, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00000181 	.word	0x00000181

00000274 <extint_register_callback>:
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     274:	2a00      	cmp	r2, #0
     276:	d001      	beq.n	27c <extint_register_callback+0x8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     278:	2017      	movs	r0, #23
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     27a:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     27c:	008b      	lsls	r3, r1, #2
     27e:	4a07      	ldr	r2, [pc, #28]	; (29c <extint_register_callback+0x28>)
     280:	589b      	ldr	r3, [r3, r2]
     282:	2b00      	cmp	r3, #0
     284:	d003      	beq.n	28e <extint_register_callback+0x1a>
	} else if (_extint_dev.callbacks[channel] == callback) {
     286:	4283      	cmp	r3, r0
     288:	d005      	beq.n	296 <extint_register_callback+0x22>
	return STATUS_ERR_ALREADY_INITIALIZED;
     28a:	201d      	movs	r0, #29
     28c:	e7f5      	b.n	27a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     28e:	0089      	lsls	r1, r1, #2
     290:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     292:	2000      	movs	r0, #0
     294:	e7f1      	b.n	27a <extint_register_callback+0x6>
		return STATUS_OK;
     296:	2000      	movs	r0, #0
     298:	e7ef      	b.n	27a <extint_register_callback+0x6>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	200018f8 	.word	0x200018f8

000002a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2a0:	b510      	push	{r4, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2a2:	2200      	movs	r2, #0
     2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <EIC_Handler+0x44>)
     2a6:	701a      	strb	r2, [r3, #0]
     2a8:	e005      	b.n	2b6 <EIC_Handler+0x16>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2aa:	480f      	ldr	r0, [pc, #60]	; (2e8 <EIC_Handler+0x48>)
     2ac:	e00a      	b.n	2c4 <EIC_Handler+0x24>
     2ae:	4a0d      	ldr	r2, [pc, #52]	; (2e4 <EIC_Handler+0x44>)
     2b0:	7813      	ldrb	r3, [r2, #0]
     2b2:	3301      	adds	r3, #1
     2b4:	7013      	strb	r3, [r2, #0]
     2b6:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <EIC_Handler+0x44>)
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b0f      	cmp	r3, #15
     2bc:	d811      	bhi.n	2e2 <EIC_Handler+0x42>
	if (eic_index < EIC_INST_NUM) {
     2be:	2b1f      	cmp	r3, #31
     2c0:	d9f3      	bls.n	2aa <EIC_Handler+0xa>
	} else {
		Assert(false);
		return NULL;
     2c2:	2000      	movs	r0, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2c4:	211f      	movs	r1, #31
     2c6:	4019      	ands	r1, r3
     2c8:	2201      	movs	r2, #1
     2ca:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     2cc:	6901      	ldr	r1, [r0, #16]
		if (extint_chan_is_detected(_current_channel)) {
     2ce:	4211      	tst	r1, r2
     2d0:	d0ed      	beq.n	2ae <EIC_Handler+0xe>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     2d2:	6102      	str	r2, [r0, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2d4:	009b      	lsls	r3, r3, #2
     2d6:	4a05      	ldr	r2, [pc, #20]	; (2ec <EIC_Handler+0x4c>)
     2d8:	589b      	ldr	r3, [r3, r2]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e7      	beq.n	2ae <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2de:	4798      	blx	r3
     2e0:	e7e5      	b.n	2ae <EIC_Handler+0xe>
			}
		}
	}
}
     2e2:	bd10      	pop	{r4, pc}
     2e4:	200018f4 	.word	0x200018f4
     2e8:	40001800 	.word	0x40001800
     2ec:	200018f8 	.word	0x200018f8

000002f0 <_extint_enable>:
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2f0:	2200      	movs	r2, #0
     2f2:	2a00      	cmp	r2, #0
     2f4:	d006      	beq.n	304 <_extint_enable+0x14>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2f6:	2300      	movs	r3, #0
     2f8:	2b00      	cmp	r3, #0
     2fa:	d00b      	beq.n	314 <_extint_enable+0x24>
	return false;
     2fc:	2300      	movs	r3, #0
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     2fe:	2b00      	cmp	r3, #0
     300:	d1f9      	bne.n	2f6 <_extint_enable+0x6>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     302:	4770      	bx	lr
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     304:	4908      	ldr	r1, [pc, #32]	; (328 <_extint_enable+0x38>)
     306:	780b      	ldrb	r3, [r1, #0]
     308:	2002      	movs	r0, #2
     30a:	4303      	orrs	r3, r0
     30c:	b2db      	uxtb	r3, r3
     30e:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     310:	3201      	adds	r2, #1
     312:	e7ee      	b.n	2f2 <_extint_enable+0x2>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     314:	4a04      	ldr	r2, [pc, #16]	; (328 <_extint_enable+0x38>)
     316:	7852      	ldrb	r2, [r2, #1]
     318:	b252      	sxtb	r2, r2
     31a:	2a00      	cmp	r2, #0
     31c:	db01      	blt.n	322 <_extint_enable+0x32>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     31e:	3301      	adds	r3, #1
     320:	e7ea      	b.n	2f8 <_extint_enable+0x8>
			return true;
     322:	2301      	movs	r3, #1
     324:	e7eb      	b.n	2fe <_extint_enable+0xe>
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <_system_extint_init>:
{
     32c:	b500      	push	{lr}
     32e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     330:	4a1b      	ldr	r2, [pc, #108]	; (3a0 <_system_extint_init+0x74>)
     332:	6993      	ldr	r3, [r2, #24]
     334:	2140      	movs	r1, #64	; 0x40
     336:	430b      	orrs	r3, r1
     338:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     340:	2005      	movs	r0, #5
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <_system_extint_init+0x78>)
     344:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     346:	2005      	movs	r0, #5
     348:	4b17      	ldr	r3, [pc, #92]	; (3a8 <_system_extint_init+0x7c>)
     34a:	4798      	blx	r3
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     34c:	2200      	movs	r2, #0
     34e:	2a00      	cmp	r2, #0
     350:	d006      	beq.n	360 <_system_extint_init+0x34>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     352:	2300      	movs	r3, #0
     354:	2b00      	cmp	r3, #0
     356:	d00b      	beq.n	370 <_system_extint_init+0x44>
	return false;
     358:	2300      	movs	r3, #0
	while (extint_is_syncing()) {
     35a:	2b00      	cmp	r3, #0
     35c:	d1f9      	bne.n	352 <_system_extint_init+0x26>
     35e:	e016      	b.n	38e <_system_extint_init+0x62>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     360:	4912      	ldr	r1, [pc, #72]	; (3ac <_system_extint_init+0x80>)
     362:	780b      	ldrb	r3, [r1, #0]
     364:	2001      	movs	r0, #1
     366:	4303      	orrs	r3, r0
     368:	b2db      	uxtb	r3, r3
     36a:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     36c:	3201      	adds	r2, #1
     36e:	e7ee      	b.n	34e <_system_extint_init+0x22>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     370:	4a0e      	ldr	r2, [pc, #56]	; (3ac <_system_extint_init+0x80>)
     372:	7852      	ldrb	r2, [r2, #1]
     374:	b252      	sxtb	r2, r2
     376:	2a00      	cmp	r2, #0
     378:	db01      	blt.n	37e <_system_extint_init+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     37a:	3301      	adds	r3, #1
     37c:	e7ea      	b.n	354 <_system_extint_init+0x28>
			return true;
     37e:	2301      	movs	r3, #1
     380:	e7eb      	b.n	35a <_system_extint_init+0x2e>
		_extint_dev.callbacks[j] = NULL;
     382:	0099      	lsls	r1, r3, #2
     384:	2000      	movs	r0, #0
     386:	4a0a      	ldr	r2, [pc, #40]	; (3b0 <_system_extint_init+0x84>)
     388:	5088      	str	r0, [r1, r2]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     38a:	3301      	adds	r3, #1
     38c:	b2db      	uxtb	r3, r3
     38e:	2b0f      	cmp	r3, #15
     390:	d9f7      	bls.n	382 <_system_extint_init+0x56>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     392:	2210      	movs	r2, #16
     394:	4b07      	ldr	r3, [pc, #28]	; (3b4 <_system_extint_init+0x88>)
     396:	601a      	str	r2, [r3, #0]
	_extint_enable();
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_system_extint_init+0x8c>)
     39a:	4798      	blx	r3
}
     39c:	b003      	add	sp, #12
     39e:	bd00      	pop	{pc}
     3a0:	40000400 	.word	0x40000400
     3a4:	0000c581 	.word	0x0000c581
     3a8:	0000c4f9 	.word	0x0000c4f9
     3ac:	40001800 	.word	0x40001800
     3b0:	200018f8 	.word	0x200018f8
     3b4:	e000e100 	.word	0xe000e100
     3b8:	000002f1 	.word	0x000002f1

000003bc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3be:	b083      	sub	sp, #12
     3c0:	0005      	movs	r5, r0
     3c2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3c4:	a901      	add	r1, sp, #4
     3c6:	2300      	movs	r3, #0
     3c8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3ca:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3cc:	7923      	ldrb	r3, [r4, #4]
     3ce:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3d0:	7a23      	ldrb	r3, [r4, #8]
     3d2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3d4:	7820      	ldrb	r0, [r4, #0]
     3d6:	4b16      	ldr	r3, [pc, #88]	; (430 <extint_chan_set_config+0x74>)
     3d8:	4798      	blx	r3
	if (eic_index < EIC_INST_NUM) {
     3da:	2d1f      	cmp	r5, #31
     3dc:	d920      	bls.n	420 <extint_chan_set_config+0x64>
		return NULL;
     3de:	2000      	movs	r0, #0

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3e0:	2207      	movs	r2, #7
     3e2:	402a      	ands	r2, r5
     3e4:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3e6:	7ae3      	ldrb	r3, [r4, #11]
     3e8:	001e      	movs	r6, r3

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3ea:	7aa1      	ldrb	r1, [r4, #10]
     3ec:	2900      	cmp	r1, #0
     3ee:	d002      	beq.n	3f6 <extint_chan_set_config+0x3a>
		new_config |= EIC_CONFIG_FILTEN0;
     3f0:	2608      	movs	r6, #8
     3f2:	431e      	orrs	r6, r3
     3f4:	b2f6      	uxtb	r6, r6
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     3f6:	08eb      	lsrs	r3, r5, #3
		= (EIC_module->CONFIG[channel / 8].reg &
     3f8:	3306      	adds	r3, #6
     3fa:	009b      	lsls	r3, r3, #2
     3fc:	5819      	ldr	r1, [r3, r0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3fe:	270f      	movs	r7, #15
     400:	4097      	lsls	r7, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     402:	43b9      	bics	r1, r7
			(new_config << config_pos);
     404:	4096      	lsls	r6, r2
     406:	0032      	movs	r2, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     408:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     40a:	501a      	str	r2, [r3, r0]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     40c:	7a63      	ldrb	r3, [r4, #9]
     40e:	2b00      	cmp	r3, #0
     410:	d108      	bne.n	424 <extint_chan_set_config+0x68>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     412:	6943      	ldr	r3, [r0, #20]
     414:	2201      	movs	r2, #1
     416:	40aa      	lsls	r2, r5
     418:	4393      	bics	r3, r2
     41a:	6143      	str	r3, [r0, #20]
	}
}
     41c:	b003      	add	sp, #12
     41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return eics[eic_index];
     420:	4804      	ldr	r0, [pc, #16]	; (434 <extint_chan_set_config+0x78>)
     422:	e7dd      	b.n	3e0 <extint_chan_set_config+0x24>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     424:	6943      	ldr	r3, [r0, #20]
     426:	2201      	movs	r2, #1
     428:	40aa      	lsls	r2, r5
     42a:	4313      	orrs	r3, r2
     42c:	6143      	str	r3, [r0, #20]
     42e:	e7f5      	b.n	41c <extint_chan_set_config+0x60>
     430:	0000c6b9 	.word	0x0000c6b9
     434:	40001800 	.word	0x40001800

00000438 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     438:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     43a:	7a93      	ldrb	r3, [r2, #10]
     43c:	b25b      	sxtb	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	db08      	blt.n	454 <rtc_calendar_enable+0x1c>
        return false;
     442:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     444:	2b00      	cmp	r3, #0
     446:	d1f8      	bne.n	43a <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     448:	8813      	ldrh	r3, [r2, #0]
     44a:	2102      	movs	r1, #2
     44c:	430b      	orrs	r3, r1
     44e:	b29b      	uxth	r3, r3
     450:	8013      	strh	r3, [r2, #0]
}
     452:	4770      	bx	lr
                return true;
     454:	2301      	movs	r3, #1
     456:	e7f5      	b.n	444 <rtc_calendar_enable+0xc>

00000458 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     458:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     45a:	7a93      	ldrb	r3, [r2, #10]
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	db0a      	blt.n	478 <rtc_calendar_disable+0x20>
        return false;
     462:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     464:	2b00      	cmp	r3, #0
     466:	d1f8      	bne.n	45a <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     468:	33c1      	adds	r3, #193	; 0xc1
     46a:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     46c:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     46e:	8813      	ldrh	r3, [r2, #0]
     470:	2102      	movs	r1, #2
     472:	438b      	bics	r3, r1
     474:	8013      	strh	r3, [r2, #0]
}
     476:	4770      	bx	lr
                return true;
     478:	2301      	movs	r3, #1
     47a:	e7f3      	b.n	464 <rtc_calendar_disable+0xc>

0000047c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     47c:	b570      	push	{r4, r5, r6, lr}
     47e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     480:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <rtc_calendar_reset+0x2c>)
     484:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     486:	6823      	ldr	r3, [r4, #0]
     488:	7a9b      	ldrb	r3, [r3, #10]
     48a:	b25b      	sxtb	r3, r3
     48c:	2b00      	cmp	r3, #0
     48e:	db08      	blt.n	4a2 <rtc_calendar_reset+0x26>
        return false;
     490:	2300      	movs	r3, #0
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     492:	2b00      	cmp	r3, #0
     494:	d1f7      	bne.n	486 <rtc_calendar_reset+0xa>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     496:	882b      	ldrh	r3, [r5, #0]
     498:	2201      	movs	r2, #1
     49a:	4313      	orrs	r3, r2
     49c:	b29b      	uxth	r3, r3
     49e:	802b      	strh	r3, [r5, #0]
}
     4a0:	bd70      	pop	{r4, r5, r6, pc}
                return true;
     4a2:	2301      	movs	r3, #1
     4a4:	e7f5      	b.n	492 <rtc_calendar_reset+0x16>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000459 	.word	0x00000459

000004ac <rtc_calendar_time_to_register_value>:
{
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     4ac:	88cb      	ldrh	r3, [r1, #6]
     4ae:	88c2      	ldrh	r2, [r0, #6]
     4b0:	1a9b      	subs	r3, r3, r2
     4b2:	069b      	lsls	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     4b4:	794a      	ldrb	r2, [r1, #5]
     4b6:	0592      	lsls	r2, r2, #22
     4b8:	4313      	orrs	r3, r2

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     4ba:	790a      	ldrb	r2, [r1, #4]
     4bc:	0452      	lsls	r2, r2, #17
     4be:	4313      	orrs	r3, r2

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     4c0:	788a      	ldrb	r2, [r1, #2]
     4c2:	0312      	lsls	r2, r2, #12
     4c4:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     4c6:	7902      	ldrb	r2, [r0, #4]
     4c8:	2a00      	cmp	r2, #0
     4ca:	d105      	bne.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4cc:	78ca      	ldrb	r2, [r1, #3]
     4ce:	2a00      	cmp	r2, #0
     4d0:	d002      	beq.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     4d2:	2280      	movs	r2, #128	; 0x80
     4d4:	0252      	lsls	r2, r2, #9
     4d6:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     4d8:	7848      	ldrb	r0, [r1, #1]
     4da:	0180      	lsls	r0, r0, #6
     4dc:	4303      	orrs	r3, r0

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     4de:	7808      	ldrb	r0, [r1, #0]
     4e0:	4318      	orrs	r0, r3

	return register_value;
}
     4e2:	4770      	bx	lr

000004e4 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     4e4:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     4e6:	0e8c      	lsrs	r4, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
     4e8:	88c3      	ldrh	r3, [r0, #6]
     4ea:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     4ec:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     4ee:	0d8c      	lsrs	r4, r1, #22
     4f0:	230f      	movs	r3, #15
     4f2:	4023      	ands	r3, r4
     4f4:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     4f6:	0c4c      	lsrs	r4, r1, #17
     4f8:	231f      	movs	r3, #31
     4fa:	4023      	ands	r3, r4
     4fc:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     4fe:	7903      	ldrb	r3, [r0, #4]
     500:	2b00      	cmp	r3, #0
     502:	d110      	bne.n	526 <rtc_calendar_register_value_to_time+0x42>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
     504:	0b08      	lsrs	r0, r1, #12
     506:	230f      	movs	r3, #15
     508:	4003      	ands	r3, r0
		time->hour = ((register_value &
     50a:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	025b      	lsls	r3, r3, #9
     510:	400b      	ands	r3, r1
     512:	1e58      	subs	r0, r3, #1
     514:	4183      	sbcs	r3, r0
     516:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     518:	0988      	lsrs	r0, r1, #6
     51a:	233f      	movs	r3, #63	; 0x3f
     51c:	4018      	ands	r0, r3
     51e:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     520:	4019      	ands	r1, r3
     522:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
     524:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     526:	0b08      	lsrs	r0, r1, #12
     528:	231f      	movs	r3, #31
     52a:	4003      	ands	r3, r0
     52c:	7093      	strb	r3, [r2, #2]
     52e:	e7f3      	b.n	518 <rtc_calendar_register_value_to_time+0x34>

00000530 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     530:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     532:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     534:	4b06      	ldr	r3, [pc, #24]	; (550 <rtc_calendar_set_time+0x20>)
     536:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     538:	7aa3      	ldrb	r3, [r4, #10]
     53a:	b25b      	sxtb	r3, r3
     53c:	2b00      	cmp	r3, #0
     53e:	db04      	blt.n	54a <rtc_calendar_set_time+0x1a>
        return false;
     540:	2300      	movs	r3, #0

	while (rtc_calendar_is_syncing(module)) {
     542:	2b00      	cmp	r3, #0
     544:	d1f8      	bne.n	538 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     546:	6120      	str	r0, [r4, #16]
}
     548:	bd10      	pop	{r4, pc}
                return true;
     54a:	2301      	movs	r3, #1
     54c:	e7f9      	b.n	542 <rtc_calendar_set_time+0x12>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	000004ad 	.word	0x000004ad

00000554 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
     554:	b570      	push	{r4, r5, r6, lr}
     556:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     558:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
     55a:	7944      	ldrb	r4, [r0, #5]
     55c:	2c00      	cmp	r4, #0
     55e:	d006      	beq.n	56e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
     560:	8859      	ldrh	r1, [r3, #2]
     562:	0449      	lsls	r1, r1, #17
     564:	d510      	bpl.n	588 <rtc_calendar_get_time+0x34>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
     566:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
     568:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <rtc_calendar_get_time+0x54>)
     56a:	4798      	blx	r3
}
     56c:	bd70      	pop	{r4, r5, r6, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
     56e:	490f      	ldr	r1, [pc, #60]	; (5ac <rtc_calendar_get_time+0x58>)
     570:	8059      	strh	r1, [r3, #2]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     572:	6801      	ldr	r1, [r0, #0]
     574:	7a89      	ldrb	r1, [r1, #10]
     576:	b249      	sxtb	r1, r1
     578:	2900      	cmp	r1, #0
     57a:	db03      	blt.n	584 <rtc_calendar_get_time+0x30>
        return false;
     57c:	0021      	movs	r1, r4
		while (rtc_calendar_is_syncing(module)) {
     57e:	2900      	cmp	r1, #0
     580:	d1f7      	bne.n	572 <rtc_calendar_get_time+0x1e>
     582:	e7f0      	b.n	566 <rtc_calendar_get_time+0x12>
                return true;
     584:	2101      	movs	r1, #1
     586:	e7fa      	b.n	57e <rtc_calendar_get_time+0x2a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
     588:	8859      	ldrh	r1, [r3, #2]
     58a:	4d09      	ldr	r5, [pc, #36]	; (5b0 <rtc_calendar_get_time+0x5c>)
     58c:	4329      	orrs	r1, r5
     58e:	b289      	uxth	r1, r1
     590:	8059      	strh	r1, [r3, #2]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     592:	6801      	ldr	r1, [r0, #0]
     594:	7a89      	ldrb	r1, [r1, #10]
     596:	b249      	sxtb	r1, r1
     598:	2900      	cmp	r1, #0
     59a:	db03      	blt.n	5a4 <rtc_calendar_get_time+0x50>
        return false;
     59c:	2100      	movs	r1, #0
		while (rtc_calendar_is_syncing(module)) {
     59e:	2900      	cmp	r1, #0
     5a0:	d1f7      	bne.n	592 <rtc_calendar_get_time+0x3e>
     5a2:	e7e0      	b.n	566 <rtc_calendar_get_time+0x12>
                return true;
     5a4:	0021      	movs	r1, r4
     5a6:	e7fa      	b.n	59e <rtc_calendar_get_time+0x4a>
     5a8:	000004e5 	.word	0x000004e5
     5ac:	ffff8000 	.word	0xffff8000
     5b0:	ffffc000 	.word	0xffffc000

000005b4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     5b4:	b570      	push	{r4, r5, r6, lr}
     5b6:	000d      	movs	r5, r1
     5b8:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5ba:	6806      	ldr	r6, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     5bc:	2a01      	cmp	r2, #1
     5be:	d901      	bls.n	5c4 <rtc_calendar_set_alarm+0x10>
		return STATUS_ERR_INVALID_ARG;
     5c0:	2017      	movs	r0, #23

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
     5c2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <rtc_calendar_set_alarm+0x38>)
     5c6:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5c8:	7ab3      	ldrb	r3, [r6, #10]
     5ca:	b25b      	sxtb	r3, r3
     5cc:	2b00      	cmp	r3, #0
     5ce:	db0a      	blt.n	5e6 <rtc_calendar_set_alarm+0x32>
        return false;
     5d0:	2300      	movs	r3, #0
	while (rtc_calendar_is_syncing(module)) {
     5d2:	2b00      	cmp	r3, #0
     5d4:	d1f8      	bne.n	5c8 <rtc_calendar_set_alarm+0x14>
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     5d6:	3403      	adds	r4, #3
     5d8:	00e4      	lsls	r4, r4, #3
     5da:	51a0      	str	r0, [r4, r6]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     5dc:	7a2b      	ldrb	r3, [r5, #8]
     5de:	1934      	adds	r4, r6, r4
     5e0:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
     5e2:	2000      	movs	r0, #0
     5e4:	e7ed      	b.n	5c2 <rtc_calendar_set_alarm+0xe>
                return true;
     5e6:	2301      	movs	r3, #1
     5e8:	e7f3      	b.n	5d2 <rtc_calendar_set_alarm+0x1e>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	000004ad 	.word	0x000004ad

000005f0 <_rtc_calendar_set_config>:
{
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	0005      	movs	r5, r0
     5f4:	000e      	movs	r6, r1
	Rtc *const rtc_module = module->hw;
     5f6:	6801      	ldr	r1, [r0, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     5f8:	8832      	ldrh	r2, [r6, #0]
     5fa:	2308      	movs	r3, #8
     5fc:	4313      	orrs	r3, r2
     5fe:	b29b      	uxth	r3, r3
	if (!(config->clock_24h)) {
     600:	7930      	ldrb	r0, [r6, #4]
     602:	2800      	cmp	r0, #0
     604:	d102      	bne.n	60c <_rtc_calendar_set_config+0x1c>
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     606:	2348      	movs	r3, #72	; 0x48
     608:	4313      	orrs	r3, r2
     60a:	b29b      	uxth	r3, r3
	if (config->clear_on_match) {
     60c:	78b2      	ldrb	r2, [r6, #2]
     60e:	2a00      	cmp	r2, #0
     610:	d002      	beq.n	618 <_rtc_calendar_set_config+0x28>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     612:	2280      	movs	r2, #128	; 0x80
     614:	4313      	orrs	r3, r2
     616:	b29b      	uxth	r3, r3
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     618:	800b      	strh	r3, [r1, #0]
	if (config->continuously_update) {
     61a:	78f3      	ldrb	r3, [r6, #3]
     61c:	2b00      	cmp	r3, #0
     61e:	d004      	beq.n	62a <_rtc_calendar_set_config+0x3a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     620:	884b      	ldrh	r3, [r1, #2]
     622:	2280      	movs	r2, #128	; 0x80
     624:	01d2      	lsls	r2, r2, #7
     626:	4313      	orrs	r3, r2
     628:	804b      	strh	r3, [r1, #2]
{
     62a:	2400      	movs	r4, #0
     62c:	e00a      	b.n	644 <_rtc_calendar_set_config+0x54>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     62e:	00a3      	lsls	r3, r4, #2
     630:	191b      	adds	r3, r3, r4
     632:	0059      	lsls	r1, r3, #1
     634:	3108      	adds	r1, #8
     636:	1871      	adds	r1, r6, r1
     638:	0022      	movs	r2, r4
     63a:	0028      	movs	r0, r5
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <_rtc_calendar_set_config+0x5c>)
     63e:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     640:	3401      	adds	r4, #1
     642:	b2e4      	uxtb	r4, r4
     644:	2c00      	cmp	r4, #0
     646:	d0f2      	beq.n	62e <_rtc_calendar_set_config+0x3e>
}
     648:	bd70      	pop	{r4, r5, r6, pc}
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	000005b5 	.word	0x000005b5

00000650 <rtc_calendar_init>:
{
     650:	b530      	push	{r4, r5, lr}
     652:	b083      	sub	sp, #12
     654:	0004      	movs	r4, r0
     656:	0015      	movs	r5, r2
	module->hw = hw;
     658:	6001      	str	r1, [r0, #0]
     65a:	4a0f      	ldr	r2, [pc, #60]	; (698 <rtc_calendar_init+0x48>)
     65c:	6993      	ldr	r3, [r2, #24]
     65e:	2120      	movs	r1, #32
     660:	430b      	orrs	r3, r1
     662:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     664:	a901      	add	r1, sp, #4
     666:	2302      	movs	r3, #2
     668:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     66a:	2004      	movs	r0, #4
     66c:	4b0b      	ldr	r3, [pc, #44]	; (69c <rtc_calendar_init+0x4c>)
     66e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     670:	2004      	movs	r0, #4
     672:	4b0b      	ldr	r3, [pc, #44]	; (6a0 <rtc_calendar_init+0x50>)
     674:	4798      	blx	r3
	rtc_calendar_reset(module);
     676:	0020      	movs	r0, r4
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <rtc_calendar_init+0x54>)
     67a:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     67c:	792b      	ldrb	r3, [r5, #4]
     67e:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     680:	78eb      	ldrb	r3, [r5, #3]
     682:	7163      	strb	r3, [r4, #5]
	module->year_init_value     = config->year_init_value;
     684:	88eb      	ldrh	r3, [r5, #6]
     686:	80e3      	strh	r3, [r4, #6]
	_rtc_instance[0] = module;
     688:	4b07      	ldr	r3, [pc, #28]	; (6a8 <rtc_calendar_init+0x58>)
     68a:	601c      	str	r4, [r3, #0]
	_rtc_calendar_set_config(module, config);
     68c:	0029      	movs	r1, r5
     68e:	0020      	movs	r0, r4
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <rtc_calendar_init+0x5c>)
     692:	4798      	blx	r3
}
     694:	b003      	add	sp, #12
     696:	bd30      	pop	{r4, r5, pc}
     698:	40000400 	.word	0x40000400
     69c:	0000c581 	.word	0x0000c581
     6a0:	0000c4f9 	.word	0x0000c4f9
     6a4:	0000047d 	.word	0x0000047d
     6a8:	20001938 	.word	0x20001938
     6ac:	000005f1 	.word	0x000005f1

000006b0 <rtc_calendar_frequency_correction>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6b0:	6802      	ldr	r2, [r0, #0]

	/* Check if valid argument. */
	if (abs(value) > 0x7F) {
     6b2:	17c8      	asrs	r0, r1, #31
     6b4:	180b      	adds	r3, r1, r0
     6b6:	4043      	eors	r3, r0
     6b8:	2b7f      	cmp	r3, #127	; 0x7f
     6ba:	dd01      	ble.n	6c0 <rtc_calendar_frequency_correction+0x10>
		/* Value bigger than allowed, return invalid argument. */
		return STATUS_ERR_INVALID_ARG;
     6bc:	2017      	movs	r0, #23

	/* Set value. */
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;

	return STATUS_OK;
}
     6be:	4770      	bx	lr
	new_correction_value = abs(value);
     6c0:	0018      	movs	r0, r3
	if (value < 0) {
     6c2:	2900      	cmp	r1, #0
     6c4:	db0a      	blt.n	6dc <rtc_calendar_frequency_correction+0x2c>
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     6c6:	7a93      	ldrb	r3, [r2, #10]
     6c8:	b25b      	sxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	db09      	blt.n	6e2 <rtc_calendar_frequency_correction+0x32>
        return false;
     6ce:	2300      	movs	r3, #0
	while (rtc_calendar_is_syncing(module)) {
     6d0:	2b00      	cmp	r3, #0
     6d2:	d1f8      	bne.n	6c6 <rtc_calendar_frequency_correction+0x16>
	rtc_module->MODE2.FREQCORR.reg = new_correction_value;
     6d4:	b2c0      	uxtb	r0, r0
     6d6:	7310      	strb	r0, [r2, #12]
	return STATUS_OK;
     6d8:	2000      	movs	r0, #0
     6da:	e7f0      	b.n	6be <rtc_calendar_frequency_correction+0xe>
		new_correction_value |= RTC_FREQCORR_SIGN;
     6dc:	2080      	movs	r0, #128	; 0x80
     6de:	4318      	orrs	r0, r3
     6e0:	e7f1      	b.n	6c6 <rtc_calendar_frequency_correction+0x16>
                return true;
     6e2:	2301      	movs	r3, #1
     6e4:	e7f4      	b.n	6d0 <rtc_calendar_frequency_correction+0x20>

000006e6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e8:	46de      	mov	lr, fp
     6ea:	4657      	mov	r7, sl
     6ec:	464e      	mov	r6, r9
     6ee:	4645      	mov	r5, r8
     6f0:	b5e0      	push	{r5, r6, r7, lr}
     6f2:	b085      	sub	sp, #20
     6f4:	4689      	mov	r9, r1
     6f6:	0016      	movs	r6, r2
     6f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6fa:	2200      	movs	r2, #0
     6fc:	2300      	movs	r3, #0
     6fe:	2100      	movs	r1, #0
     700:	468b      	mov	fp, r1
     702:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     704:	253f      	movs	r5, #63	; 0x3f
     706:	9600      	str	r6, [sp, #0]
     708:	9701      	str	r7, [sp, #4]
     70a:	9002      	str	r0, [sp, #8]
     70c:	4649      	mov	r1, r9
     70e:	9103      	str	r1, [sp, #12]
     710:	e011      	b.n	736 <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     712:	2120      	movs	r1, #32
     714:	1b49      	subs	r1, r1, r5
     716:	2400      	movs	r4, #0
     718:	3401      	adds	r4, #1
     71a:	40cc      	lsrs	r4, r1
     71c:	e013      	b.n	746 <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     71e:	9800      	ldr	r0, [sp, #0]
     720:	9901      	ldr	r1, [sp, #4]
     722:	1a12      	subs	r2, r2, r0
     724:	418b      	sbcs	r3, r1
			q |= bit_shift;
     726:	4659      	mov	r1, fp
     728:	4660      	mov	r0, ip
     72a:	4301      	orrs	r1, r0
     72c:	468b      	mov	fp, r1
     72e:	4651      	mov	r1, sl
     730:	4321      	orrs	r1, r4
     732:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     734:	3d01      	subs	r5, #1
     736:	2d00      	cmp	r5, #0
     738:	db23      	blt.n	782 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     73a:	2120      	movs	r1, #32
     73c:	4249      	negs	r1, r1
     73e:	1869      	adds	r1, r5, r1
     740:	d4e7      	bmi.n	712 <long_division+0x2c>
     742:	2401      	movs	r4, #1
     744:	408c      	lsls	r4, r1
     746:	2101      	movs	r1, #1
     748:	40a9      	lsls	r1, r5
     74a:	468c      	mov	ip, r1
		r = r << 1;
     74c:	1892      	adds	r2, r2, r2
     74e:	415b      	adcs	r3, r3
     750:	0010      	movs	r0, r2
     752:	0019      	movs	r1, r3
		if (n & bit_shift) {
     754:	9e02      	ldr	r6, [sp, #8]
     756:	4667      	mov	r7, ip
     758:	403e      	ands	r6, r7
     75a:	46b1      	mov	r9, r6
     75c:	9e03      	ldr	r6, [sp, #12]
     75e:	4026      	ands	r6, r4
     760:	46b0      	mov	r8, r6
     762:	464e      	mov	r6, r9
     764:	4647      	mov	r7, r8
     766:	433e      	orrs	r6, r7
     768:	d003      	beq.n	772 <long_division+0x8c>
			r |= 0x01;
     76a:	2601      	movs	r6, #1
     76c:	4306      	orrs	r6, r0
     76e:	0032      	movs	r2, r6
     770:	000b      	movs	r3, r1
		if (r >= d) {
     772:	9800      	ldr	r0, [sp, #0]
     774:	9901      	ldr	r1, [sp, #4]
     776:	4299      	cmp	r1, r3
     778:	d8dc      	bhi.n	734 <long_division+0x4e>
     77a:	d1d0      	bne.n	71e <long_division+0x38>
     77c:	4290      	cmp	r0, r2
     77e:	d8d9      	bhi.n	734 <long_division+0x4e>
     780:	e7cd      	b.n	71e <long_division+0x38>
		}
	}

	return q;
}
     782:	4658      	mov	r0, fp
     784:	4651      	mov	r1, sl
     786:	b005      	add	sp, #20
     788:	bc3c      	pop	{r2, r3, r4, r5}
     78a:	4690      	mov	r8, r2
     78c:	4699      	mov	r9, r3
     78e:	46a2      	mov	sl, r4
     790:	46ab      	mov	fp, r5
     792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000794 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     794:	0849      	lsrs	r1, r1, #1
     796:	4281      	cmp	r1, r0
     798:	d201      	bcs.n	79e <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     79a:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     79c:	4770      	bx	lr
     79e:	2300      	movs	r3, #0
     7a0:	e002      	b.n	7a8 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     7a2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     7a4:	3301      	adds	r3, #1
     7a6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     7a8:	4281      	cmp	r1, r0
     7aa:	d2fa      	bcs.n	7a2 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     7ac:	3b01      	subs	r3, #1
     7ae:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     7b0:	2bff      	cmp	r3, #255	; 0xff
     7b2:	d901      	bls.n	7b8 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7b4:	2040      	movs	r0, #64	; 0x40
     7b6:	e7f1      	b.n	79c <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     7b8:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     7ba:	2000      	movs	r0, #0
     7bc:	e7ee      	b.n	79c <_sercom_get_sync_baud_val+0x8>
	...

000007c0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	000c      	movs	r4, r1
     7c6:	0015      	movs	r5, r2
     7c8:	aa06      	add	r2, sp, #24
     7ca:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     7cc:	0002      	movs	r2, r0
     7ce:	434a      	muls	r2, r1
     7d0:	42a2      	cmp	r2, r4
     7d2:	d902      	bls.n	7da <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7d4:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     7d6:	b002      	add	sp, #8
     7d8:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     7da:	2b00      	cmp	r3, #0
     7dc:	d114      	bne.n	808 <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     7de:	0002      	movs	r2, r0
     7e0:	0008      	movs	r0, r1
     7e2:	2100      	movs	r1, #0
     7e4:	4e1b      	ldr	r6, [pc, #108]	; (854 <_sercom_get_async_baud_val+0x94>)
     7e6:	47b0      	blx	r6
     7e8:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     7ea:	0022      	movs	r2, r4
     7ec:	2300      	movs	r3, #0
     7ee:	2000      	movs	r0, #0
     7f0:	4c19      	ldr	r4, [pc, #100]	; (858 <_sercom_get_async_baud_val+0x98>)
     7f2:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     7f4:	2200      	movs	r2, #0
     7f6:	2301      	movs	r3, #1
     7f8:	1a12      	subs	r2, r2, r0
     7fa:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7fc:	0c10      	lsrs	r0, r2, #16
     7fe:	041b      	lsls	r3, r3, #16
     800:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     802:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     804:	2000      	movs	r0, #0
     806:	e7e6      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     808:	2b01      	cmp	r3, #1
     80a:	d001      	beq.n	810 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     80c:	2000      	movs	r0, #0
     80e:	e7f8      	b.n	802 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     810:	000a      	movs	r2, r1
     812:	2300      	movs	r3, #0
     814:	2100      	movs	r1, #0
     816:	4e0f      	ldr	r6, [pc, #60]	; (854 <_sercom_get_async_baud_val+0x94>)
     818:	47b0      	blx	r6
     81a:	0002      	movs	r2, r0
     81c:	000b      	movs	r3, r1
     81e:	9200      	str	r2, [sp, #0]
     820:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     822:	0020      	movs	r0, r4
     824:	2100      	movs	r1, #0
     826:	4e0c      	ldr	r6, [pc, #48]	; (858 <_sercom_get_async_baud_val+0x98>)
     828:	47b0      	blx	r6
     82a:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     82c:	2380      	movs	r3, #128	; 0x80
     82e:	019b      	lsls	r3, r3, #6
     830:	4298      	cmp	r0, r3
     832:	d901      	bls.n	838 <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     834:	2040      	movs	r0, #64	; 0x40
     836:	e7ce      	b.n	7d6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     838:	0f61      	lsrs	r1, r4, #29
     83a:	00e0      	lsls	r0, r4, #3
     83c:	9a00      	ldr	r2, [sp, #0]
     83e:	9b01      	ldr	r3, [sp, #4]
     840:	4c05      	ldr	r4, [pc, #20]	; (858 <_sercom_get_async_baud_val+0x98>)
     842:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     844:	b2c0      	uxtb	r0, r0
     846:	00f3      	lsls	r3, r6, #3
     848:	b2db      	uxtb	r3, r3
     84a:	1ac0      	subs	r0, r0, r3
     84c:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     84e:	0340      	lsls	r0, r0, #13
     850:	4330      	orrs	r0, r6
     852:	e7d6      	b.n	802 <_sercom_get_async_baud_val+0x42>
     854:	0000cf8d 	.word	0x0000cf8d
     858:	000006e7 	.word	0x000006e7

0000085c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     85c:	b510      	push	{r4, lr}
     85e:	b082      	sub	sp, #8
     860:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <sercom_set_gclk_generator+0x40>)
     864:	781b      	ldrb	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d007      	beq.n	87a <sercom_set_gclk_generator+0x1e>
     86a:	2900      	cmp	r1, #0
     86c:	d105      	bne.n	87a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     86e:	4b0b      	ldr	r3, [pc, #44]	; (89c <sercom_set_gclk_generator+0x40>)
     870:	785b      	ldrb	r3, [r3, #1]
     872:	4283      	cmp	r3, r0
     874:	d010      	beq.n	898 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     876:	201d      	movs	r0, #29
     878:	e00c      	b.n	894 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     87a:	a901      	add	r1, sp, #4
     87c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     87e:	2013      	movs	r0, #19
     880:	4b07      	ldr	r3, [pc, #28]	; (8a0 <sercom_set_gclk_generator+0x44>)
     882:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     884:	2013      	movs	r0, #19
     886:	4b07      	ldr	r3, [pc, #28]	; (8a4 <sercom_set_gclk_generator+0x48>)
     888:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     88a:	4b04      	ldr	r3, [pc, #16]	; (89c <sercom_set_gclk_generator+0x40>)
     88c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     88e:	2201      	movs	r2, #1
     890:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     892:	2000      	movs	r0, #0
}
     894:	b002      	add	sp, #8
     896:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     898:	2000      	movs	r0, #0
     89a:	e7fb      	b.n	894 <sercom_set_gclk_generator+0x38>
     89c:	20000344 	.word	0x20000344
     8a0:	0000c581 	.word	0x0000c581
     8a4:	0000c4f9 	.word	0x0000c4f9

000008a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8a8:	4b40      	ldr	r3, [pc, #256]	; (9ac <_sercom_get_default_pad+0x104>)
     8aa:	4298      	cmp	r0, r3
     8ac:	d031      	beq.n	912 <_sercom_get_default_pad+0x6a>
     8ae:	d90a      	bls.n	8c6 <_sercom_get_default_pad+0x1e>
     8b0:	4b3f      	ldr	r3, [pc, #252]	; (9b0 <_sercom_get_default_pad+0x108>)
     8b2:	4298      	cmp	r0, r3
     8b4:	d04d      	beq.n	952 <_sercom_get_default_pad+0xaa>
     8b6:	4b3f      	ldr	r3, [pc, #252]	; (9b4 <_sercom_get_default_pad+0x10c>)
     8b8:	4298      	cmp	r0, r3
     8ba:	d05a      	beq.n	972 <_sercom_get_default_pad+0xca>
     8bc:	4b3e      	ldr	r3, [pc, #248]	; (9b8 <_sercom_get_default_pad+0x110>)
     8be:	4298      	cmp	r0, r3
     8c0:	d037      	beq.n	932 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8c2:	2000      	movs	r0, #0
}
     8c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8c6:	4b3d      	ldr	r3, [pc, #244]	; (9bc <_sercom_get_default_pad+0x114>)
     8c8:	4298      	cmp	r0, r3
     8ca:	d00c      	beq.n	8e6 <_sercom_get_default_pad+0x3e>
     8cc:	4b3c      	ldr	r3, [pc, #240]	; (9c0 <_sercom_get_default_pad+0x118>)
     8ce:	4298      	cmp	r0, r3
     8d0:	d1f7      	bne.n	8c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8d2:	2901      	cmp	r1, #1
     8d4:	d05f      	beq.n	996 <_sercom_get_default_pad+0xee>
     8d6:	2900      	cmp	r1, #0
     8d8:	d015      	beq.n	906 <_sercom_get_default_pad+0x5e>
     8da:	2902      	cmp	r1, #2
     8dc:	d015      	beq.n	90a <_sercom_get_default_pad+0x62>
     8de:	2903      	cmp	r1, #3
     8e0:	d015      	beq.n	90e <_sercom_get_default_pad+0x66>
	return 0;
     8e2:	2000      	movs	r0, #0
     8e4:	e7ee      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e6:	2901      	cmp	r1, #1
     8e8:	d053      	beq.n	992 <_sercom_get_default_pad+0xea>
     8ea:	2900      	cmp	r1, #0
     8ec:	d005      	beq.n	8fa <_sercom_get_default_pad+0x52>
     8ee:	2902      	cmp	r1, #2
     8f0:	d005      	beq.n	8fe <_sercom_get_default_pad+0x56>
     8f2:	2903      	cmp	r1, #3
     8f4:	d005      	beq.n	902 <_sercom_get_default_pad+0x5a>
	return 0;
     8f6:	2000      	movs	r0, #0
     8f8:	e7e4      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fa:	4832      	ldr	r0, [pc, #200]	; (9c4 <_sercom_get_default_pad+0x11c>)
     8fc:	e7e2      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     8fe:	4832      	ldr	r0, [pc, #200]	; (9c8 <_sercom_get_default_pad+0x120>)
     900:	e7e0      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     902:	4832      	ldr	r0, [pc, #200]	; (9cc <_sercom_get_default_pad+0x124>)
     904:	e7de      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     906:	2003      	movs	r0, #3
     908:	e7dc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90a:	4831      	ldr	r0, [pc, #196]	; (9d0 <_sercom_get_default_pad+0x128>)
     90c:	e7da      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     90e:	4831      	ldr	r0, [pc, #196]	; (9d4 <_sercom_get_default_pad+0x12c>)
     910:	e7d8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     912:	2901      	cmp	r1, #1
     914:	d041      	beq.n	99a <_sercom_get_default_pad+0xf2>
     916:	2900      	cmp	r1, #0
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0x7e>
     91a:	2902      	cmp	r1, #2
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0x82>
     91e:	2903      	cmp	r1, #3
     920:	d005      	beq.n	92e <_sercom_get_default_pad+0x86>
	return 0;
     922:	2000      	movs	r0, #0
     924:	e7ce      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     926:	482c      	ldr	r0, [pc, #176]	; (9d8 <_sercom_get_default_pad+0x130>)
     928:	e7cc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92a:	482c      	ldr	r0, [pc, #176]	; (9dc <_sercom_get_default_pad+0x134>)
     92c:	e7ca      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     92e:	482c      	ldr	r0, [pc, #176]	; (9e0 <_sercom_get_default_pad+0x138>)
     930:	e7c8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     932:	2901      	cmp	r1, #1
     934:	d033      	beq.n	99e <_sercom_get_default_pad+0xf6>
     936:	2900      	cmp	r1, #0
     938:	d005      	beq.n	946 <_sercom_get_default_pad+0x9e>
     93a:	2902      	cmp	r1, #2
     93c:	d005      	beq.n	94a <_sercom_get_default_pad+0xa2>
     93e:	2903      	cmp	r1, #3
     940:	d005      	beq.n	94e <_sercom_get_default_pad+0xa6>
	return 0;
     942:	2000      	movs	r0, #0
     944:	e7be      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     946:	4827      	ldr	r0, [pc, #156]	; (9e4 <_sercom_get_default_pad+0x13c>)
     948:	e7bc      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94a:	4827      	ldr	r0, [pc, #156]	; (9e8 <_sercom_get_default_pad+0x140>)
     94c:	e7ba      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     94e:	4827      	ldr	r0, [pc, #156]	; (9ec <_sercom_get_default_pad+0x144>)
     950:	e7b8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     952:	2901      	cmp	r1, #1
     954:	d025      	beq.n	9a2 <_sercom_get_default_pad+0xfa>
     956:	2900      	cmp	r1, #0
     958:	d005      	beq.n	966 <_sercom_get_default_pad+0xbe>
     95a:	2902      	cmp	r1, #2
     95c:	d005      	beq.n	96a <_sercom_get_default_pad+0xc2>
     95e:	2903      	cmp	r1, #3
     960:	d005      	beq.n	96e <_sercom_get_default_pad+0xc6>
	return 0;
     962:	2000      	movs	r0, #0
     964:	e7ae      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     966:	4822      	ldr	r0, [pc, #136]	; (9f0 <_sercom_get_default_pad+0x148>)
     968:	e7ac      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96a:	4822      	ldr	r0, [pc, #136]	; (9f4 <_sercom_get_default_pad+0x14c>)
     96c:	e7aa      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     96e:	4822      	ldr	r0, [pc, #136]	; (9f8 <_sercom_get_default_pad+0x150>)
     970:	e7a8      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     972:	2901      	cmp	r1, #1
     974:	d017      	beq.n	9a6 <_sercom_get_default_pad+0xfe>
     976:	2900      	cmp	r1, #0
     978:	d005      	beq.n	986 <_sercom_get_default_pad+0xde>
     97a:	2902      	cmp	r1, #2
     97c:	d005      	beq.n	98a <_sercom_get_default_pad+0xe2>
     97e:	2903      	cmp	r1, #3
     980:	d005      	beq.n	98e <_sercom_get_default_pad+0xe6>
	return 0;
     982:	2000      	movs	r0, #0
     984:	e79e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     986:	481d      	ldr	r0, [pc, #116]	; (9fc <_sercom_get_default_pad+0x154>)
     988:	e79c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98a:	481d      	ldr	r0, [pc, #116]	; (a00 <_sercom_get_default_pad+0x158>)
     98c:	e79a      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     98e:	481d      	ldr	r0, [pc, #116]	; (a04 <_sercom_get_default_pad+0x15c>)
     990:	e798      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     992:	481d      	ldr	r0, [pc, #116]	; (a08 <_sercom_get_default_pad+0x160>)
     994:	e796      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     996:	481d      	ldr	r0, [pc, #116]	; (a0c <_sercom_get_default_pad+0x164>)
     998:	e794      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99a:	481d      	ldr	r0, [pc, #116]	; (a10 <_sercom_get_default_pad+0x168>)
     99c:	e792      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     99e:	481d      	ldr	r0, [pc, #116]	; (a14 <_sercom_get_default_pad+0x16c>)
     9a0:	e790      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a2:	481d      	ldr	r0, [pc, #116]	; (a18 <_sercom_get_default_pad+0x170>)
     9a4:	e78e      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9a6:	481d      	ldr	r0, [pc, #116]	; (a1c <_sercom_get_default_pad+0x174>)
     9a8:	e78c      	b.n	8c4 <_sercom_get_default_pad+0x1c>
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	42001000 	.word	0x42001000
     9b0:	42001800 	.word	0x42001800
     9b4:	42001c00 	.word	0x42001c00
     9b8:	42001400 	.word	0x42001400
     9bc:	42000800 	.word	0x42000800
     9c0:	42000c00 	.word	0x42000c00
     9c4:	00040003 	.word	0x00040003
     9c8:	00060003 	.word	0x00060003
     9cc:	00070003 	.word	0x00070003
     9d0:	001e0003 	.word	0x001e0003
     9d4:	001f0003 	.word	0x001f0003
     9d8:	00080003 	.word	0x00080003
     9dc:	000a0003 	.word	0x000a0003
     9e0:	000b0003 	.word	0x000b0003
     9e4:	00100003 	.word	0x00100003
     9e8:	00120003 	.word	0x00120003
     9ec:	00130003 	.word	0x00130003
     9f0:	000c0003 	.word	0x000c0003
     9f4:	000e0003 	.word	0x000e0003
     9f8:	000f0003 	.word	0x000f0003
     9fc:	00160003 	.word	0x00160003
     a00:	00180003 	.word	0x00180003
     a04:	00190003 	.word	0x00190003
     a08:	00050003 	.word	0x00050003
     a0c:	00010003 	.word	0x00010003
     a10:	00090003 	.word	0x00090003
     a14:	00110003 	.word	0x00110003
     a18:	000d0003 	.word	0x000d0003
     a1c:	00170003 	.word	0x00170003

00000a20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a20:	b530      	push	{r4, r5, lr}
     a22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a24:	4c0a      	ldr	r4, [pc, #40]	; (a50 <_sercom_get_sercom_inst_index+0x30>)
     a26:	466b      	mov	r3, sp
     a28:	0022      	movs	r2, r4
     a2a:	ca32      	ldmia	r2!, {r1, r4, r5}
     a2c:	c332      	stmia	r3!, {r1, r4, r5}
     a2e:	ca32      	ldmia	r2!, {r1, r4, r5}
     a30:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a32:	2300      	movs	r3, #0
     a34:	2b05      	cmp	r3, #5
     a36:	d808      	bhi.n	a4a <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a38:	009a      	lsls	r2, r3, #2
     a3a:	4669      	mov	r1, sp
     a3c:	5852      	ldr	r2, [r2, r1]
     a3e:	4282      	cmp	r2, r0
     a40:	d001      	beq.n	a46 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a42:	3301      	adds	r3, #1
     a44:	e7f6      	b.n	a34 <_sercom_get_sercom_inst_index+0x14>
			return i;
     a46:	b2d8      	uxtb	r0, r3
     a48:	e000      	b.n	a4c <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a4a:	2000      	movs	r0, #0
}
     a4c:	b007      	add	sp, #28
     a4e:	bd30      	pop	{r4, r5, pc}
     a50:	0000e400 	.word	0x0000e400

00000a54 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a54:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a56:	2202      	movs	r2, #2
     a58:	761a      	strb	r2, [r3, #24]
}
     a5a:	4770      	bx	lr

00000a5c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	b087      	sub	sp, #28
     a60:	0007      	movs	r7, r0
     a62:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a64:	6806      	ldr	r6, [r0, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a66:	ab05      	add	r3, sp, #20
     a68:	2280      	movs	r2, #128	; 0x80
     a6a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a6c:	2200      	movs	r2, #0
     a6e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a70:	2101      	movs	r1, #1
     a72:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     a74:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     a76:	782b      	ldrb	r3, [r5, #0]
     a78:	2b00      	cmp	r3, #0
     a7a:	d101      	bne.n	a80 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a7c:	ab05      	add	r3, sp, #20
     a7e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     a80:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a82:	9301      	str	r3, [sp, #4]
     a84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     a86:	9302      	str	r3, [sp, #8]
     a88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     a8a:	9303      	str	r3, [sp, #12]
     a8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     a8e:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a90:	2400      	movs	r4, #0
     a92:	e006      	b.n	aa2 <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a94:	0021      	movs	r1, r4
     a96:	0030      	movs	r0, r6
     a98:	4b3d      	ldr	r3, [pc, #244]	; (b90 <_spi_set_config+0x134>)
     a9a:	4798      	blx	r3
     a9c:	e008      	b.n	ab0 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     a9e:	3401      	adds	r4, #1
     aa0:	b2e4      	uxtb	r4, r4
     aa2:	2c03      	cmp	r4, #3
     aa4:	d80d      	bhi.n	ac2 <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aa6:	00a3      	lsls	r3, r4, #2
     aa8:	aa01      	add	r2, sp, #4
     aaa:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     aac:	2800      	cmp	r0, #0
     aae:	d0f1      	beq.n	a94 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     ab0:	1c43      	adds	r3, r0, #1
     ab2:	d0f4      	beq.n	a9e <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ab4:	a905      	add	r1, sp, #20
     ab6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ab8:	0c00      	lsrs	r0, r0, #16
     aba:	b2c0      	uxtb	r0, r0
     abc:	4b35      	ldr	r3, [pc, #212]	; (b94 <_spi_set_config+0x138>)
     abe:	4798      	blx	r3
     ac0:	e7ed      	b.n	a9e <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     ac2:	782b      	ldrb	r3, [r5, #0]
     ac4:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     ac6:	7c2b      	ldrb	r3, [r5, #16]
     ac8:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     aca:	7cab      	ldrb	r3, [r5, #18]
     acc:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     ace:	7d2b      	ldrb	r3, [r5, #20]
     ad0:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     ad2:	2200      	movs	r2, #0
     ad4:	466b      	mov	r3, sp
     ad6:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     ad8:	782b      	ldrb	r3, [r5, #0]
     ada:	2b01      	cmp	r3, #1
     adc:	d014      	beq.n	b08 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     ade:	782b      	ldrb	r3, [r5, #0]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d127      	bne.n	b34 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     ae4:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     ae6:	8baa      	ldrh	r2, [r5, #28]
     ae8:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     aea:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     aec:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     aee:	7fef      	ldrb	r7, [r5, #31]
     af0:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     af2:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     af4:	4320      	orrs	r0, r4
     af6:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     af8:	2020      	movs	r0, #32
     afa:	5c28      	ldrb	r0, [r5, r0]
     afc:	2800      	cmp	r0, #0
     afe:	d01b      	beq.n	b38 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     b00:	2140      	movs	r1, #64	; 0x40
     b02:	4311      	orrs	r1, r2
     b04:	b289      	uxth	r1, r1
     b06:	e017      	b.n	b38 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b08:	6838      	ldr	r0, [r7, #0]
     b0a:	4b23      	ldr	r3, [pc, #140]	; (b98 <_spi_set_config+0x13c>)
     b0c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b0e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b10:	b2c0      	uxtb	r0, r0
     b12:	4b22      	ldr	r3, [pc, #136]	; (b9c <_spi_set_config+0x140>)
     b14:	4798      	blx	r3
     b16:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     b18:	466b      	mov	r3, sp
     b1a:	1c9a      	adds	r2, r3, #2
     b1c:	69a8      	ldr	r0, [r5, #24]
     b1e:	4b20      	ldr	r3, [pc, #128]	; (ba0 <_spi_set_config+0x144>)
     b20:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     b22:	2800      	cmp	r0, #0
     b24:	d001      	beq.n	b2a <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     b26:	2017      	movs	r0, #23
     b28:	e030      	b.n	b8c <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     b2a:	466b      	mov	r3, sp
     b2c:	3302      	adds	r3, #2
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	7333      	strb	r3, [r6, #12]
     b32:	e7d4      	b.n	ade <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     b34:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     b36:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     b38:	686a      	ldr	r2, [r5, #4]
     b3a:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     b3c:	68aa      	ldr	r2, [r5, #8]
     b3e:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     b40:	68ea      	ldr	r2, [r5, #12]
     b42:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     b44:	7c2a      	ldrb	r2, [r5, #16]
     b46:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b48:	7c69      	ldrb	r1, [r5, #17]
     b4a:	2900      	cmp	r1, #0
     b4c:	d103      	bne.n	b56 <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b4e:	4915      	ldr	r1, [pc, #84]	; (ba4 <_spi_set_config+0x148>)
     b50:	7889      	ldrb	r1, [r1, #2]
     b52:	0789      	lsls	r1, r1, #30
     b54:	d501      	bpl.n	b5a <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b56:	2180      	movs	r1, #128	; 0x80
     b58:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     b5a:	7ca9      	ldrb	r1, [r5, #18]
     b5c:	2900      	cmp	r1, #0
     b5e:	d002      	beq.n	b66 <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b60:	2180      	movs	r1, #128	; 0x80
     b62:	0289      	lsls	r1, r1, #10
     b64:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     b66:	7ce9      	ldrb	r1, [r5, #19]
     b68:	2900      	cmp	r1, #0
     b6a:	d002      	beq.n	b72 <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     b6c:	2180      	movs	r1, #128	; 0x80
     b6e:	0089      	lsls	r1, r1, #2
     b70:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     b72:	7d29      	ldrb	r1, [r5, #20]
     b74:	2900      	cmp	r1, #0
     b76:	d002      	beq.n	b7e <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b78:	2180      	movs	r1, #128	; 0x80
     b7a:	0189      	lsls	r1, r1, #6
     b7c:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     b7e:	6831      	ldr	r1, [r6, #0]
     b80:	430b      	orrs	r3, r1
     b82:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     b84:	6873      	ldr	r3, [r6, #4]
     b86:	431a      	orrs	r2, r3
     b88:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     b8a:	2000      	movs	r0, #0
}
     b8c:	b007      	add	sp, #28
     b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b90:	000008a9 	.word	0x000008a9
     b94:	0000c6b9 	.word	0x0000c6b9
     b98:	00000a21 	.word	0x00000a21
     b9c:	0000c59d 	.word	0x0000c59d
     ba0:	00000795 	.word	0x00000795
     ba4:	41002000 	.word	0x41002000

00000ba8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
     baa:	b085      	sub	sp, #20
     bac:	0005      	movs	r5, r0
     bae:	000c      	movs	r4, r1
     bb0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     bb2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     bb4:	680b      	ldr	r3, [r1, #0]
     bb6:	079b      	lsls	r3, r3, #30
     bb8:	d502      	bpl.n	bc0 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     bba:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     bbc:	b005      	add	sp, #20
     bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     bc0:	680b      	ldr	r3, [r1, #0]
     bc2:	07db      	lsls	r3, r3, #31
     bc4:	d501      	bpl.n	bca <spi_init+0x22>
		return STATUS_BUSY;
     bc6:	2005      	movs	r0, #5
     bc8:	e7f8      	b.n	bbc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bca:	0008      	movs	r0, r1
     bcc:	4b28      	ldr	r3, [pc, #160]	; (c70 <spi_init+0xc8>)
     bce:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     bd0:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bd2:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     bd4:	2301      	movs	r3, #1
     bd6:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     bd8:	4a26      	ldr	r2, [pc, #152]	; (c74 <spi_init+0xcc>)
     bda:	6a11      	ldr	r1, [r2, #32]
     bdc:	430b      	orrs	r3, r1
     bde:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     be0:	2724      	movs	r7, #36	; 0x24
     be2:	5df3      	ldrb	r3, [r6, r7]
     be4:	a903      	add	r1, sp, #12
     be6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     be8:	b2c3      	uxtb	r3, r0
     bea:	9301      	str	r3, [sp, #4]
     bec:	0018      	movs	r0, r3
     bee:	4b22      	ldr	r3, [pc, #136]	; (c78 <spi_init+0xd0>)
     bf0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     bf2:	9801      	ldr	r0, [sp, #4]
     bf4:	4b21      	ldr	r3, [pc, #132]	; (c7c <spi_init+0xd4>)
     bf6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bf8:	5df0      	ldrb	r0, [r6, r7]
     bfa:	2100      	movs	r1, #0
     bfc:	4b20      	ldr	r3, [pc, #128]	; (c80 <spi_init+0xd8>)
     bfe:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     c00:	7833      	ldrb	r3, [r6, #0]
     c02:	2b01      	cmp	r3, #1
     c04:	d008      	beq.n	c18 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     c06:	7833      	ldrb	r3, [r6, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d103      	bne.n	c14 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     c0c:	6823      	ldr	r3, [r4, #0]
     c0e:	2208      	movs	r2, #8
     c10:	4313      	orrs	r3, r2
     c12:	6023      	str	r3, [r4, #0]
{
     c14:	2300      	movs	r3, #0
     c16:	e00b      	b.n	c30 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     c18:	6823      	ldr	r3, [r4, #0]
     c1a:	220c      	movs	r2, #12
     c1c:	4313      	orrs	r3, r2
     c1e:	6023      	str	r3, [r4, #0]
     c20:	e7f1      	b.n	c06 <spi_init+0x5e>
		module->callback[i]        = NULL;
     c22:	1c9a      	adds	r2, r3, #2
     c24:	0092      	lsls	r2, r2, #2
     c26:	18aa      	adds	r2, r5, r2
     c28:	2100      	movs	r1, #0
     c2a:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     c2c:	3301      	adds	r3, #1
     c2e:	b2db      	uxtb	r3, r3
     c30:	2b06      	cmp	r3, #6
     c32:	d9f6      	bls.n	c22 <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     c34:	2200      	movs	r2, #0
     c36:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     c38:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     c3a:	2300      	movs	r3, #0
     c3c:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     c3e:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     c40:	3236      	adds	r2, #54	; 0x36
     c42:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     c44:	3201      	adds	r2, #1
     c46:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     c48:	3201      	adds	r2, #1
     c4a:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     c4c:	3a35      	subs	r2, #53	; 0x35
     c4e:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     c50:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     c52:	6828      	ldr	r0, [r5, #0]
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <spi_init+0xc8>)
     c56:	4798      	blx	r3
     c58:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     c5a:	490a      	ldr	r1, [pc, #40]	; (c84 <spi_init+0xdc>)
     c5c:	4b0a      	ldr	r3, [pc, #40]	; (c88 <spi_init+0xe0>)
     c5e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c60:	00a4      	lsls	r4, r4, #2
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <spi_init+0xe4>)
     c64:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     c66:	0031      	movs	r1, r6
     c68:	0028      	movs	r0, r5
     c6a:	4b09      	ldr	r3, [pc, #36]	; (c90 <spi_init+0xe8>)
     c6c:	4798      	blx	r3
     c6e:	e7a5      	b.n	bbc <spi_init+0x14>
     c70:	00000a21 	.word	0x00000a21
     c74:	40000400 	.word	0x40000400
     c78:	0000c581 	.word	0x0000c581
     c7c:	0000c4f9 	.word	0x0000c4f9
     c80:	0000085d 	.word	0x0000085d
     c84:	00001105 	.word	0x00001105
     c88:	0000bec5 	.word	0x0000bec5
     c8c:	20001ef4 	.word	0x20001ef4
     c90:	00000a5d 	.word	0x00000a5d

00000c94 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c96:	0004      	movs	r4, r0
     c98:	000e      	movs	r6, r1
     c9a:	0017      	movs	r7, r2
     c9c:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     c9e:	2338      	movs	r3, #56	; 0x38
     ca0:	5cc3      	ldrb	r3, [r0, r3]
     ca2:	2b05      	cmp	r3, #5
     ca4:	d06d      	beq.n	d82 <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     ca6:	2a00      	cmp	r2, #0
     ca8:	d101      	bne.n	cae <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     caa:	2217      	movs	r2, #23
     cac:	e06a      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     cae:	79c3      	ldrb	r3, [r0, #7]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d101      	bne.n	cb8 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     cb4:	221c      	movs	r2, #28
     cb6:	e065      	b.n	d84 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     cb8:	7943      	ldrb	r3, [r0, #5]
     cba:	2b00      	cmp	r3, #0
     cbc:	d103      	bne.n	cc6 <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cbe:	6803      	ldr	r3, [r0, #0]
     cc0:	7e1b      	ldrb	r3, [r3, #24]
     cc2:	079b      	lsls	r3, r3, #30
     cc4:	d401      	bmi.n	cca <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     cc6:	2000      	movs	r0, #0
     cc8:	e037      	b.n	d3a <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     cca:	4b2f      	ldr	r3, [pc, #188]	; (d88 <spi_read_buffer_wait+0xf4>)
     ccc:	4798      	blx	r3
     cce:	e7fa      	b.n	cc6 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cd0:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     cd2:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     cd4:	07d2      	lsls	r2, r2, #31
     cd6:	d5fb      	bpl.n	cd0 <spi_read_buffer_wait+0x3c>
     cd8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     cda:	07d2      	lsls	r2, r2, #31
     cdc:	d534      	bpl.n	d48 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     cde:	05ea      	lsls	r2, r5, #23
     ce0:	0dd2      	lsrs	r2, r2, #23
     ce2:	629a      	str	r2, [r3, #40]	; 0x28
     ce4:	e030      	b.n	d48 <spi_read_buffer_wait+0xb4>
     ce6:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ce8:	4a28      	ldr	r2, [pc, #160]	; (d8c <spi_read_buffer_wait+0xf8>)
     cea:	4293      	cmp	r3, r2
     cec:	d805      	bhi.n	cfa <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cee:	6822      	ldr	r2, [r4, #0]
     cf0:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     cf2:	0752      	lsls	r2, r2, #29
     cf4:	d401      	bmi.n	cfa <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     cf6:	3301      	adds	r3, #1
     cf8:	e7f6      	b.n	ce8 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     cfa:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cfc:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     cfe:	0792      	lsls	r2, r2, #30
     d00:	d404      	bmi.n	d0c <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d02:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     d04:	075b      	lsls	r3, r3, #29
     d06:	d422      	bmi.n	d4e <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     d08:	2212      	movs	r2, #18
     d0a:	e03b      	b.n	d84 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     d0c:	0020      	movs	r0, r4
     d0e:	4b1e      	ldr	r3, [pc, #120]	; (d88 <spi_read_buffer_wait+0xf4>)
     d10:	4798      	blx	r3
				return STATUS_ABORTED;
     d12:	2204      	movs	r2, #4
     d14:	e036      	b.n	d84 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     d16:	2200      	movs	r2, #0
     d18:	e026      	b.n	d68 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d1a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d1c:	05ff      	lsls	r7, r7, #23
     d1e:	0dff      	lsrs	r7, r7, #23
     d20:	e001      	b.n	d26 <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     d22:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     d24:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     d26:	2a00      	cmp	r2, #0
     d28:	d12c      	bne.n	d84 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     d2a:	1c43      	adds	r3, r0, #1
     d2c:	b29b      	uxth	r3, r3
     d2e:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d30:	79a2      	ldrb	r2, [r4, #6]
     d32:	2a01      	cmp	r2, #1
     d34:	d01e      	beq.n	d74 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     d36:	0018      	movs	r0, r3
     d38:	000f      	movs	r7, r1
	while (length--) {
     d3a:	1e79      	subs	r1, r7, #1
     d3c:	b289      	uxth	r1, r1
     d3e:	2f00      	cmp	r7, #0
     d40:	d01d      	beq.n	d7e <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     d42:	7963      	ldrb	r3, [r4, #5]
     d44:	2b01      	cmp	r3, #1
     d46:	d0c3      	beq.n	cd0 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     d48:	7963      	ldrb	r3, [r4, #5]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d0cb      	beq.n	ce6 <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d4e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d50:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     d52:	0752      	lsls	r2, r2, #29
     d54:	d5fb      	bpl.n	d4e <spi_read_buffer_wait+0xba>
     d56:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     d58:	0752      	lsls	r2, r2, #29
     d5a:	d5e2      	bpl.n	d22 <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d5c:	8b5a      	ldrh	r2, [r3, #26]
     d5e:	0752      	lsls	r2, r2, #29
     d60:	d5d9      	bpl.n	d16 <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d62:	2204      	movs	r2, #4
     d64:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     d66:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d68:	79a7      	ldrb	r7, [r4, #6]
     d6a:	2f01      	cmp	r7, #1
     d6c:	d0d5      	beq.n	d1a <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d70:	b2ff      	uxtb	r7, r7
     d72:	e7d8      	b.n	d26 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     d74:	3002      	adds	r0, #2
     d76:	0a3f      	lsrs	r7, r7, #8
     d78:	54f7      	strb	r7, [r6, r3]
     d7a:	b283      	uxth	r3, r0
     d7c:	e7db      	b.n	d36 <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     d7e:	2200      	movs	r2, #0
     d80:	e000      	b.n	d84 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     d82:	2205      	movs	r2, #5
}
     d84:	0010      	movs	r0, r2
     d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d88:	00000a55 	.word	0x00000a55
     d8c:	00002710 	.word	0x00002710

00000d90 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     d90:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d92:	7943      	ldrb	r3, [r0, #5]
     d94:	2b01      	cmp	r3, #1
     d96:	d001      	beq.n	d9c <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     d98:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     d9a:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     d9c:	7a03      	ldrb	r3, [r0, #8]
     d9e:	2b00      	cmp	r3, #0
     da0:	d16c      	bne.n	e7c <spi_select_slave+0xec>
		if (select) {
     da2:	2a00      	cmp	r2, #0
     da4:	d058      	beq.n	e58 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     da6:	784b      	ldrb	r3, [r1, #1]
     da8:	2b00      	cmp	r3, #0
     daa:	d043      	beq.n	e34 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dac:	6803      	ldr	r3, [r0, #0]
     dae:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     db0:	07db      	lsls	r3, r3, #31
     db2:	d411      	bmi.n	dd8 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     db4:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     db6:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     db8:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     dba:	2900      	cmp	r1, #0
     dbc:	d10a      	bne.n	dd4 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     dbe:	01db      	lsls	r3, r3, #7
     dc0:	4931      	ldr	r1, [pc, #196]	; (e88 <spi_select_slave+0xf8>)
     dc2:	468c      	mov	ip, r1
     dc4:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dc6:	211f      	movs	r1, #31
     dc8:	4011      	ands	r1, r2
     dca:	2201      	movs	r2, #1
     dcc:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     dce:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     dd0:	2005      	movs	r0, #5
     dd2:	e7e2      	b.n	d9a <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
     dd4:	2300      	movs	r3, #0
     dd6:	e7f6      	b.n	dc6 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     dd8:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     dda:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     ddc:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     dde:	2c00      	cmp	r4, #0
     de0:	d104      	bne.n	dec <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     de2:	01db      	lsls	r3, r3, #7
     de4:	4c28      	ldr	r4, [pc, #160]	; (e88 <spi_select_slave+0xf8>)
     de6:	46a4      	mov	ip, r4
     de8:	4463      	add	r3, ip
     dea:	e000      	b.n	dee <spi_select_slave+0x5e>
		return NULL;
     dec:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dee:	241f      	movs	r4, #31
     df0:	4014      	ands	r4, r2
     df2:	2201      	movs	r2, #1
     df4:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     df6:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     df8:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     dfa:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dfc:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     dfe:	07c9      	lsls	r1, r1, #31
     e00:	d500      	bpl.n	e04 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e02:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     e04:	79c3      	ldrb	r3, [r0, #7]
     e06:	2b00      	cmp	r3, #0
     e08:	d13a      	bne.n	e80 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e0a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e0c:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     e0e:	0752      	lsls	r2, r2, #29
     e10:	d5fb      	bpl.n	e0a <spi_select_slave+0x7a>
     e12:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     e14:	0752      	lsls	r2, r2, #29
     e16:	d535      	bpl.n	e84 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e18:	8b5a      	ldrh	r2, [r3, #26]
     e1a:	0752      	lsls	r2, r2, #29
     e1c:	d501      	bpl.n	e22 <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     e1e:	2204      	movs	r2, #4
     e20:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e22:	7982      	ldrb	r2, [r0, #6]
     e24:	2a01      	cmp	r2, #1
     e26:	d002      	beq.n	e2e <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     e2a:	2000      	movs	r0, #0
     e2c:	e7b5      	b.n	d9a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e30:	2000      	movs	r0, #0
     e32:	e7b2      	b.n	d9a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     e34:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e36:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e38:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e3a:	2900      	cmp	r1, #0
     e3c:	d10a      	bne.n	e54 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     e3e:	01db      	lsls	r3, r3, #7
     e40:	4911      	ldr	r1, [pc, #68]	; (e88 <spi_select_slave+0xf8>)
     e42:	468c      	mov	ip, r1
     e44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e46:	211f      	movs	r1, #31
     e48:	4011      	ands	r1, r2
     e4a:	2201      	movs	r2, #1
     e4c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     e4e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     e50:	2000      	movs	r0, #0
     e52:	e7a2      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e54:	2300      	movs	r3, #0
     e56:	e7f6      	b.n	e46 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     e58:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e5a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e5c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e5e:	2900      	cmp	r1, #0
     e60:	d10a      	bne.n	e78 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     e62:	01db      	lsls	r3, r3, #7
     e64:	4908      	ldr	r1, [pc, #32]	; (e88 <spi_select_slave+0xf8>)
     e66:	468c      	mov	ip, r1
     e68:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e6a:	211f      	movs	r1, #31
     e6c:	4011      	ands	r1, r2
     e6e:	2201      	movs	r2, #1
     e70:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     e72:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     e74:	2000      	movs	r0, #0
     e76:	e790      	b.n	d9a <spi_select_slave+0xa>
		return NULL;
     e78:	2300      	movs	r3, #0
     e7a:	e7f6      	b.n	e6a <spi_select_slave+0xda>
     e7c:	2000      	movs	r0, #0
     e7e:	e78c      	b.n	d9a <spi_select_slave+0xa>
     e80:	2000      	movs	r0, #0
     e82:	e78a      	b.n	d9a <spi_select_slave+0xa>
     e84:	2000      	movs	r0, #0
     e86:	e788      	b.n	d9a <spi_select_slave+0xa>
     e88:	41004400 	.word	0x41004400

00000e8c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8e:	46d6      	mov	lr, sl
     e90:	464f      	mov	r7, r9
     e92:	4646      	mov	r6, r8
     e94:	b5c0      	push	{r6, r7, lr}
     e96:	b082      	sub	sp, #8
     e98:	0004      	movs	r4, r0
     e9a:	468a      	mov	sl, r1
     e9c:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e9e:	2338      	movs	r3, #56	; 0x38
     ea0:	5cc3      	ldrb	r3, [r0, r3]
     ea2:	2b05      	cmp	r3, #5
     ea4:	d100      	bne.n	ea8 <spi_write_buffer_wait+0x1c>
     ea6:	e0d8      	b.n	105a <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     ea8:	2a00      	cmp	r2, #0
     eaa:	d101      	bne.n	eb0 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     eac:	2017      	movs	r0, #23
     eae:	e0d5      	b.n	105c <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     eb0:	7943      	ldrb	r3, [r0, #5]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d103      	bne.n	ebe <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     eb6:	6803      	ldr	r3, [r0, #0]
     eb8:	7e1b      	ldrb	r3, [r3, #24]
     eba:	079b      	lsls	r3, r3, #30
     ebc:	d402      	bmi.n	ec4 <spi_write_buffer_wait+0x38>
     ebe:	46bc      	mov	ip, r7
     ec0:	2600      	movs	r6, #0
     ec2:	e025      	b.n	f10 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     ec4:	4b6a      	ldr	r3, [pc, #424]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ec6:	4798      	blx	r3
     ec8:	e7f9      	b.n	ebe <spi_write_buffer_wait+0x32>
     eca:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ecc:	4a69      	ldr	r2, [pc, #420]	; (1074 <spi_write_buffer_wait+0x1e8>)
     ece:	4293      	cmp	r3, r2
     ed0:	d805      	bhi.n	ede <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ed2:	6822      	ldr	r2, [r4, #0]
     ed4:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     ed6:	07d2      	lsls	r2, r2, #31
     ed8:	d401      	bmi.n	ede <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     eda:	3301      	adds	r3, #1
     edc:	e7f6      	b.n	ecc <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ede:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ee0:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     ee2:	0792      	lsls	r2, r2, #30
     ee4:	d404      	bmi.n	ef0 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ee6:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     ee8:	07db      	lsls	r3, r3, #31
     eea:	d418      	bmi.n	f1e <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     eec:	2012      	movs	r0, #18
     eee:	e0b5      	b.n	105c <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     ef0:	0020      	movs	r0, r4
     ef2:	4b5f      	ldr	r3, [pc, #380]	; (1070 <spi_write_buffer_wait+0x1e4>)
     ef4:	4798      	blx	r3
				return STATUS_ABORTED;
     ef6:	2004      	movs	r0, #4
     ef8:	e0b0      	b.n	105c <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     efa:	3602      	adds	r6, #2
     efc:	b2b6      	uxth	r6, r6
     efe:	4652      	mov	r2, sl
     f00:	5dd2      	ldrb	r2, [r2, r7]
     f02:	0212      	lsls	r2, r2, #8
     f04:	4302      	orrs	r2, r0
     f06:	e017      	b.n	f38 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     f08:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     f0a:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     f0c:	2b00      	cmp	r3, #0
     f0e:	d11a      	bne.n	f46 <spi_write_buffer_wait+0xba>
	while (length--) {
     f10:	1e79      	subs	r1, r7, #1
     f12:	b289      	uxth	r1, r1
     f14:	2f00      	cmp	r7, #0
     f16:	d06c      	beq.n	ff2 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     f18:	7963      	ldrb	r3, [r4, #5]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d0d5      	beq.n	eca <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f1e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f20:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     f22:	07d2      	lsls	r2, r2, #31
     f24:	d5fb      	bpl.n	f1e <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     f26:	1c77      	adds	r7, r6, #1
     f28:	b2bf      	uxth	r7, r7
     f2a:	4652      	mov	r2, sl
     f2c:	5d90      	ldrb	r0, [r2, r6]
     f2e:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f30:	79a5      	ldrb	r5, [r4, #6]
     f32:	2d01      	cmp	r5, #1
     f34:	d0e1      	beq.n	efa <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     f36:	003e      	movs	r6, r7
     f38:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     f3a:	07f8      	lsls	r0, r7, #31
     f3c:	d5e4      	bpl.n	f08 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f3e:	05d2      	lsls	r2, r2, #23
     f40:	0dd2      	lsrs	r2, r2, #23
     f42:	629a      	str	r2, [r3, #40]	; 0x28
     f44:	e7e0      	b.n	f08 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     f46:	7963      	ldrb	r3, [r4, #5]
     f48:	2b00      	cmp	r3, #0
     f4a:	d040      	beq.n	fce <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f4c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f4e:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     f50:	0752      	lsls	r2, r2, #29
     f52:	d5fb      	bpl.n	f4c <spi_write_buffer_wait+0xc0>
     f54:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f56:	0752      	lsls	r2, r2, #29
     f58:	d508      	bpl.n	f6c <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f5a:	8b5a      	ldrh	r2, [r3, #26]
     f5c:	0752      	lsls	r2, r2, #29
     f5e:	d501      	bpl.n	f64 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f60:	2204      	movs	r2, #4
     f62:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f64:	79a2      	ldrb	r2, [r4, #6]
     f66:	2a01      	cmp	r2, #1
     f68:	d041      	beq.n	fee <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     f6c:	4660      	mov	r0, ip
     f6e:	3801      	subs	r0, #1
     f70:	b283      	uxth	r3, r0
     f72:	469c      	mov	ip, r3
     f74:	000f      	movs	r7, r1
     f76:	e7cb      	b.n	f10 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
     f78:	3602      	adds	r6, #2
     f7a:	4655      	mov	r5, sl
     f7c:	5c2f      	ldrb	r7, [r5, r0]
     f7e:	023f      	lsls	r7, r7, #8
     f80:	4640      	mov	r0, r8
     f82:	4307      	orrs	r7, r0
     f84:	b2b0      	uxth	r0, r6
     f86:	e01b      	b.n	fc0 <spi_write_buffer_wait+0x134>
						length--;
     f88:	3901      	subs	r1, #1
     f8a:	b289      	uxth	r1, r1
     f8c:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f8e:	6822      	ldr	r2, [r4, #0]
     f90:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     f92:	0752      	lsls	r2, r2, #29
     f94:	d41d      	bmi.n	fd2 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f96:	3301      	adds	r3, #1
     f98:	4a36      	ldr	r2, [pc, #216]	; (1074 <spi_write_buffer_wait+0x1e8>)
     f9a:	4293      	cmp	r3, r2
     f9c:	d819      	bhi.n	fd2 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
     f9e:	2900      	cmp	r1, #0
     fa0:	d0f5      	beq.n	f8e <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fa2:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fa4:	7e17      	ldrb	r7, [r2, #24]
     fa6:	07f8      	lsls	r0, r7, #31
     fa8:	d5f1      	bpl.n	f8e <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
     faa:	1c70      	adds	r0, r6, #1
     fac:	b280      	uxth	r0, r0
     fae:	4655      	mov	r5, sl
     fb0:	5dad      	ldrb	r5, [r5, r6]
     fb2:	46a8      	mov	r8, r5
     fb4:	466f      	mov	r7, sp
     fb6:	80fd      	strh	r5, [r7, #6]
     fb8:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fba:	79a5      	ldrb	r5, [r4, #6]
     fbc:	2d01      	cmp	r5, #1
     fbe:	d0db      	beq.n	f78 <spi_write_buffer_wait+0xec>
     fc0:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     fc2:	07f5      	lsls	r5, r6, #31
     fc4:	d5e0      	bpl.n	f88 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fc6:	05ff      	lsls	r7, r7, #23
     fc8:	0dff      	lsrs	r7, r7, #23
     fca:	6297      	str	r7, [r2, #40]	; 0x28
     fcc:	e7dc      	b.n	f88 <spi_write_buffer_wait+0xfc>
     fce:	2300      	movs	r3, #0
     fd0:	e7e2      	b.n	f98 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fd2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     fd4:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
     fd6:	0792      	lsls	r2, r2, #30
     fd8:	d404      	bmi.n	fe4 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fda:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     fdc:	075b      	lsls	r3, r3, #29
     fde:	d4b5      	bmi.n	f4c <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
     fe0:	2012      	movs	r0, #18
     fe2:	e03b      	b.n	105c <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
     fe4:	0020      	movs	r0, r4
     fe6:	4b22      	ldr	r3, [pc, #136]	; (1070 <spi_write_buffer_wait+0x1e4>)
     fe8:	4798      	blx	r3
					return STATUS_ABORTED;
     fea:	2004      	movs	r0, #4
     fec:	e036      	b.n	105c <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ff0:	e7bc      	b.n	f6c <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     ff2:	7962      	ldrb	r2, [r4, #5]
     ff4:	2a01      	cmp	r2, #1
     ff6:	d006      	beq.n	1006 <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     ff8:	2a00      	cmp	r2, #0
     ffa:	d135      	bne.n	1068 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
     ffc:	79e3      	ldrb	r3, [r4, #7]
     ffe:	2b00      	cmp	r3, #0
    1000:	d11a      	bne.n	1038 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1002:	2000      	movs	r0, #0
    1004:	e02a      	b.n	105c <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1006:	6823      	ldr	r3, [r4, #0]
    1008:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    100a:	079b      	lsls	r3, r3, #30
    100c:	d5fb      	bpl.n	1006 <spi_write_buffer_wait+0x17a>
    100e:	e7f3      	b.n	ff8 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1010:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1012:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
    1014:	0752      	lsls	r2, r2, #29
    1016:	d529      	bpl.n	106c <spi_write_buffer_wait+0x1e0>
    1018:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    101a:	0752      	lsls	r2, r2, #29
    101c:	d508      	bpl.n	1030 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    101e:	8b5a      	ldrh	r2, [r3, #26]
    1020:	0752      	lsls	r2, r2, #29
    1022:	d501      	bpl.n	1028 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1024:	2204      	movs	r2, #4
    1026:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1028:	79a2      	ldrb	r2, [r4, #6]
    102a:	2a01      	cmp	r2, #1
    102c:	d011      	beq.n	1052 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
    1030:	4660      	mov	r0, ip
    1032:	3801      	subs	r0, #1
    1034:	b283      	uxth	r3, r0
    1036:	469c      	mov	ip, r3
			while (flush_length) {
    1038:	4663      	mov	r3, ip
    103a:	2b00      	cmp	r3, #0
    103c:	d00b      	beq.n	1056 <spi_write_buffer_wait+0x1ca>
    103e:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1040:	4a0c      	ldr	r2, [pc, #48]	; (1074 <spi_write_buffer_wait+0x1e8>)
    1042:	4293      	cmp	r3, r2
    1044:	d8e4      	bhi.n	1010 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1046:	6822      	ldr	r2, [r4, #0]
    1048:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    104a:	0752      	lsls	r2, r2, #29
    104c:	d4e0      	bmi.n	1010 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    104e:	3301      	adds	r3, #1
    1050:	e7f6      	b.n	1040 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1054:	e7ec      	b.n	1030 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1056:	2000      	movs	r0, #0
    1058:	e000      	b.n	105c <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    105a:	2005      	movs	r0, #5
}
    105c:	b002      	add	sp, #8
    105e:	bc1c      	pop	{r2, r3, r4}
    1060:	4690      	mov	r8, r2
    1062:	4699      	mov	r9, r3
    1064:	46a2      	mov	sl, r4
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1068:	2000      	movs	r0, #0
    106a:	e7f7      	b.n	105c <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    106c:	2012      	movs	r0, #18
    106e:	e7f5      	b.n	105c <spi_write_buffer_wait+0x1d0>
    1070:	00000a55 	.word	0x00000a55
    1074:	00002710 	.word	0x00002710

00001078 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1078:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    107a:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    107c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    107e:	780a      	ldrb	r2, [r1, #0]
    1080:	b2d2      	uxtb	r2, r2
    1082:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1084:	1c4c      	adds	r4, r1, #1
    1086:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1088:	7986      	ldrb	r6, [r0, #6]
    108a:	2e01      	cmp	r6, #1
    108c:	d007      	beq.n	109e <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    108e:	05db      	lsls	r3, r3, #23
    1090:	0ddb      	lsrs	r3, r3, #23
    1092:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1094:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1096:	3b01      	subs	r3, #1
    1098:	b29b      	uxth	r3, r3
    109a:	8683      	strh	r3, [r0, #52]	; 0x34
}
    109c:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    109e:	784b      	ldrb	r3, [r1, #1]
    10a0:	021b      	lsls	r3, r3, #8
    10a2:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    10a4:	1c8c      	adds	r4, r1, #2
    10a6:	62c4      	str	r4, [r0, #44]	; 0x2c
    10a8:	e7f1      	b.n	108e <_spi_write+0x16>
	...

000010ac <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10ac:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    10ae:	4a04      	ldr	r2, [pc, #16]	; (10c0 <_spi_write_dummy+0x14>)
    10b0:	8812      	ldrh	r2, [r2, #0]
    10b2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    10b4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    10b6:	3b01      	subs	r3, #1
    10b8:	b29b      	uxth	r3, r3
    10ba:	8643      	strh	r3, [r0, #50]	; 0x32
}
    10bc:	4770      	bx	lr
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	2000193c 	.word	0x2000193c

000010c4 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10c4:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    10c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    10c8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    10ca:	3b01      	subs	r3, #1
    10cc:	b29b      	uxth	r3, r3
    10ce:	8643      	strh	r3, [r0, #50]	; 0x32
}
    10d0:	4770      	bx	lr

000010d2 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10d2:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    10d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10d6:	05db      	lsls	r3, r3, #23
    10d8:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    10da:	b2da      	uxtb	r2, r3
    10dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
    10de:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    10e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
    10e2:	1c51      	adds	r1, r2, #1
    10e4:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10e6:	7981      	ldrb	r1, [r0, #6]
    10e8:	2901      	cmp	r1, #1
    10ea:	d004      	beq.n	10f6 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    10ec:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    10ee:	3b01      	subs	r3, #1
    10f0:	b29b      	uxth	r3, r3
    10f2:	8603      	strh	r3, [r0, #48]	; 0x30
}
    10f4:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    10f6:	0a1b      	lsrs	r3, r3, #8
    10f8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    10fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    10fc:	3301      	adds	r3, #1
    10fe:	6283      	str	r3, [r0, #40]	; 0x28
    1100:	e7f4      	b.n	10ec <_spi_read+0x1a>
	...

00001104 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1106:	0080      	lsls	r0, r0, #2
    1108:	4b6b      	ldr	r3, [pc, #428]	; (12b8 <_spi_interrupt_handler+0x1b4>)
    110a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    110c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    110e:	2337      	movs	r3, #55	; 0x37
    1110:	5ce3      	ldrb	r3, [r4, r3]
    1112:	2236      	movs	r2, #54	; 0x36
    1114:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    1116:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1118:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    111a:	7db5      	ldrb	r5, [r6, #22]
    111c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    111e:	07eb      	lsls	r3, r5, #31
    1120:	d516      	bpl.n	1150 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1122:	7963      	ldrb	r3, [r4, #5]
    1124:	2b01      	cmp	r3, #1
    1126:	d04d      	beq.n	11c4 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1128:	7963      	ldrb	r3, [r4, #5]
		if (0
    112a:	2b01      	cmp	r3, #1
    112c:	d057      	beq.n	11de <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    112e:	2b00      	cmp	r3, #0
    1130:	d10e      	bne.n	1150 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    1132:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1134:	2b00      	cmp	r3, #0
    1136:	d00b      	beq.n	1150 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1138:	0020      	movs	r0, r4
    113a:	4b60      	ldr	r3, [pc, #384]	; (12bc <_spi_interrupt_handler+0x1b8>)
    113c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    113e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1140:	b29b      	uxth	r3, r3
    1142:	2b00      	cmp	r3, #0
    1144:	d104      	bne.n	1150 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1146:	3301      	adds	r3, #1
    1148:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    114a:	7a63      	ldrb	r3, [r4, #9]
    114c:	2b01      	cmp	r3, #1
    114e:	d04a      	beq.n	11e6 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1150:	076b      	lsls	r3, r5, #29
    1152:	d511      	bpl.n	1178 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1154:	8b73      	ldrh	r3, [r6, #26]
    1156:	075b      	lsls	r3, r3, #29
    1158:	d54f      	bpl.n	11fa <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    115a:	7a63      	ldrb	r3, [r4, #9]
    115c:	2b01      	cmp	r3, #1
    115e:	d008      	beq.n	1172 <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1160:	221e      	movs	r2, #30
    1162:	2338      	movs	r3, #56	; 0x38
    1164:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1166:	3b35      	subs	r3, #53	; 0x35
    1168:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    116a:	3302      	adds	r3, #2
    116c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    116e:	073b      	lsls	r3, r7, #28
    1170:	d43f      	bmi.n	11f2 <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1172:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1174:	2304      	movs	r3, #4
    1176:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1178:	07ab      	lsls	r3, r5, #30
    117a:	d513      	bpl.n	11a4 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    117c:	7963      	ldrb	r3, [r4, #5]
    117e:	2b00      	cmp	r3, #0
    1180:	d10d      	bne.n	119e <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1182:	3307      	adds	r3, #7
    1184:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1186:	3b05      	subs	r3, #5
    1188:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    118a:	3301      	adds	r3, #1
    118c:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    118e:	2300      	movs	r3, #0
    1190:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1192:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1194:	3338      	adds	r3, #56	; 0x38
    1196:	2200      	movs	r2, #0
    1198:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    119a:	06fb      	lsls	r3, r7, #27
    119c:	d464      	bmi.n	1268 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    119e:	7963      	ldrb	r3, [r4, #5]
    11a0:	2b01      	cmp	r3, #1
    11a2:	d065      	beq.n	1270 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    11a4:	072b      	lsls	r3, r5, #28
    11a6:	d508      	bpl.n	11ba <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    11a8:	7963      	ldrb	r3, [r4, #5]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d105      	bne.n	11ba <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    11ae:	3308      	adds	r3, #8
    11b0:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    11b2:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    11b4:	06bb      	lsls	r3, r7, #26
    11b6:	d500      	bpl.n	11ba <_spi_interrupt_handler+0xb6>
    11b8:	e070      	b.n	129c <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    11ba:	b26d      	sxtb	r5, r5
    11bc:	2d00      	cmp	r5, #0
    11be:	da00      	bge.n	11c2 <_spi_interrupt_handler+0xbe>
    11c0:	e070      	b.n	12a4 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    11c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    11c4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    11c6:	2b00      	cmp	r3, #0
    11c8:	d1ae      	bne.n	1128 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    11ca:	0020      	movs	r0, r4
    11cc:	4b3c      	ldr	r3, [pc, #240]	; (12c0 <_spi_interrupt_handler+0x1bc>)
    11ce:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    11d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    11d2:	b29b      	uxth	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	d1a7      	bne.n	1128 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    11d8:	3301      	adds	r3, #1
    11da:	7533      	strb	r3, [r6, #20]
    11dc:	e7a4      	b.n	1128 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    11de:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    11e0:	2a00      	cmp	r2, #0
    11e2:	d1a9      	bne.n	1138 <_spi_interrupt_handler+0x34>
    11e4:	e7a3      	b.n	112e <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    11e6:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    11e8:	2b00      	cmp	r3, #0
    11ea:	d1b1      	bne.n	1150 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    11ec:	3302      	adds	r3, #2
    11ee:	75b3      	strb	r3, [r6, #22]
    11f0:	e7ae      	b.n	1150 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    11f2:	0020      	movs	r0, r4
    11f4:	69a3      	ldr	r3, [r4, #24]
    11f6:	4798      	blx	r3
    11f8:	e7bb      	b.n	1172 <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    11fa:	7a63      	ldrb	r3, [r4, #9]
    11fc:	2b01      	cmp	r3, #1
    11fe:	d017      	beq.n	1230 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    1200:	0020      	movs	r0, r4
    1202:	4b30      	ldr	r3, [pc, #192]	; (12c4 <_spi_interrupt_handler+0x1c0>)
    1204:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    1206:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1208:	b29b      	uxth	r3, r3
    120a:	2b00      	cmp	r3, #0
    120c:	d1b4      	bne.n	1178 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    120e:	2200      	movs	r2, #0
    1210:	3338      	adds	r3, #56	; 0x38
    1212:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1214:	3b34      	subs	r3, #52	; 0x34
    1216:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1218:	7a63      	ldrb	r3, [r4, #9]
    121a:	2b02      	cmp	r3, #2
    121c:	d01d      	beq.n	125a <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    121e:	7a63      	ldrb	r3, [r4, #9]
    1220:	2b00      	cmp	r3, #0
    1222:	d1a9      	bne.n	1178 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1224:	07bb      	lsls	r3, r7, #30
    1226:	d5a7      	bpl.n	1178 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1228:	0020      	movs	r0, r4
    122a:	6923      	ldr	r3, [r4, #16]
    122c:	4798      	blx	r3
    122e:	e7a3      	b.n	1178 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    1230:	0020      	movs	r0, r4
    1232:	4b25      	ldr	r3, [pc, #148]	; (12c8 <_spi_interrupt_handler+0x1c4>)
    1234:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1236:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1238:	b29b      	uxth	r3, r3
    123a:	2b00      	cmp	r3, #0
    123c:	d19c      	bne.n	1178 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    123e:	3304      	adds	r3, #4
    1240:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1242:	2200      	movs	r2, #0
    1244:	3334      	adds	r3, #52	; 0x34
    1246:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1248:	3b35      	subs	r3, #53	; 0x35
    124a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    124c:	07fb      	lsls	r3, r7, #31
    124e:	d400      	bmi.n	1252 <_spi_interrupt_handler+0x14e>
    1250:	e792      	b.n	1178 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1252:	0020      	movs	r0, r4
    1254:	68e3      	ldr	r3, [r4, #12]
    1256:	4798      	blx	r3
    1258:	e78e      	b.n	1178 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    125a:	077b      	lsls	r3, r7, #29
    125c:	d400      	bmi.n	1260 <_spi_interrupt_handler+0x15c>
    125e:	e78b      	b.n	1178 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1260:	0020      	movs	r0, r4
    1262:	6963      	ldr	r3, [r4, #20]
    1264:	4798      	blx	r3
    1266:	e787      	b.n	1178 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1268:	0020      	movs	r0, r4
    126a:	69e3      	ldr	r3, [r4, #28]
    126c:	4798      	blx	r3
    126e:	e796      	b.n	119e <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1270:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1272:	2b01      	cmp	r3, #1
    1274:	d000      	beq.n	1278 <_spi_interrupt_handler+0x174>
    1276:	e795      	b.n	11a4 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1278:	79e3      	ldrb	r3, [r4, #7]
    127a:	2b00      	cmp	r3, #0
    127c:	d000      	beq.n	1280 <_spi_interrupt_handler+0x17c>
    127e:	e791      	b.n	11a4 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1280:	3302      	adds	r3, #2
    1282:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1284:	3301      	adds	r3, #1
    1286:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1288:	2200      	movs	r2, #0
    128a:	3335      	adds	r3, #53	; 0x35
    128c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    128e:	07fb      	lsls	r3, r7, #31
    1290:	d400      	bmi.n	1294 <_spi_interrupt_handler+0x190>
    1292:	e787      	b.n	11a4 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1294:	0020      	movs	r0, r4
    1296:	68e3      	ldr	r3, [r4, #12]
    1298:	4798      	blx	r3
    129a:	e783      	b.n	11a4 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    129c:	0020      	movs	r0, r4
    129e:	6a23      	ldr	r3, [r4, #32]
    12a0:	4798      	blx	r3
    12a2:	e78a      	b.n	11ba <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    12a4:	2380      	movs	r3, #128	; 0x80
    12a6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    12a8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    12aa:	067b      	lsls	r3, r7, #25
    12ac:	d400      	bmi.n	12b0 <_spi_interrupt_handler+0x1ac>
    12ae:	e788      	b.n	11c2 <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    12b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12b2:	0020      	movs	r0, r4
    12b4:	4798      	blx	r3
}
    12b6:	e784      	b.n	11c2 <_spi_interrupt_handler+0xbe>
    12b8:	20001ef4 	.word	0x20001ef4
    12bc:	00001079 	.word	0x00001079
    12c0:	000010ad 	.word	0x000010ad
    12c4:	000010d3 	.word	0x000010d3
    12c8:	000010c5 	.word	0x000010c5

000012cc <abort_convert_error_code>:
 */
BACNET_ABORT_REASON abort_convert_error_code(BACNET_ERROR_CODE error_code)
{
    BACNET_ABORT_REASON abort_code = ABORT_REASON_OTHER;

    switch (error_code) {
    12cc:	2836      	cmp	r0, #54	; 0x36
    12ce:	d011      	beq.n	12f4 <abort_convert_error_code+0x28>
    12d0:	d806      	bhi.n	12e0 <abort_convert_error_code+0x14>
    12d2:	2834      	cmp	r0, #52	; 0x34
    12d4:	d016      	beq.n	1304 <abort_convert_error_code+0x38>
    12d6:	d80b      	bhi.n	12f0 <abort_convert_error_code+0x24>
    12d8:	2833      	cmp	r0, #51	; 0x33
    12da:	d107      	bne.n	12ec <abort_convert_error_code+0x20>
        case ERROR_CODE_ABORT_BUFFER_OVERFLOW:
            abort_code = ABORT_REASON_BUFFER_OVERFLOW;
    12dc:	2001      	movs	r0, #1
            abort_code = ABORT_REASON_OTHER;
            break;
    }

    return (abort_code);
}
    12de:	4770      	bx	lr
    switch (error_code) {
    12e0:	2887      	cmp	r0, #135	; 0x87
    12e2:	d00b      	beq.n	12fc <abort_convert_error_code+0x30>
    12e4:	2888      	cmp	r0, #136	; 0x88
    12e6:	d007      	beq.n	12f8 <abort_convert_error_code+0x2c>
    12e8:	2837      	cmp	r0, #55	; 0x37
    12ea:	d009      	beq.n	1300 <abort_convert_error_code+0x34>
            abort_code = ABORT_REASON_OTHER;
    12ec:	2000      	movs	r0, #0
            break;
    12ee:	e7f6      	b.n	12de <abort_convert_error_code+0x12>
            abort_code = ABORT_REASON_PREEMPTED_BY_HIGHER_PRIORITY_TASK;
    12f0:	2003      	movs	r0, #3
            break;
    12f2:	e7f4      	b.n	12de <abort_convert_error_code+0x12>
            abort_code = ABORT_REASON_SEGMENTATION_NOT_SUPPORTED;
    12f4:	2004      	movs	r0, #4
            break;
    12f6:	e7f2      	b.n	12de <abort_convert_error_code+0x12>
            abort_code = ABORT_REASON_SECURITY_ERROR;
    12f8:	2005      	movs	r0, #5
            break;
    12fa:	e7f0      	b.n	12de <abort_convert_error_code+0x12>
            abort_code = ABORT_REASON_INSUFFICIENT_SECURITY;
    12fc:	2006      	movs	r0, #6
            break;
    12fe:	e7ee      	b.n	12de <abort_convert_error_code+0x12>
            abort_code = ABORT_REASON_PROPRIETARY_FIRST;
    1300:	2040      	movs	r0, #64	; 0x40
            break;
    1302:	e7ec      	b.n	12de <abort_convert_error_code+0x12>
            abort_code = ABORT_REASON_INVALID_APDU_IN_THIS_STATE;
    1304:	2002      	movs	r0, #2
    1306:	e7ea      	b.n	12de <abort_convert_error_code+0x12>

00001308 <abort_encode_apdu>:
int abort_encode_apdu(
    uint8_t *apdu, uint8_t invoke_id, uint8_t abort_reason, bool server)
{
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    1308:	2800      	cmp	r0, #0
    130a:	d00a      	beq.n	1322 <abort_encode_apdu+0x1a>
        if (server) {
    130c:	2b00      	cmp	r3, #0
    130e:	d005      	beq.n	131c <abort_encode_apdu+0x14>
            apdu[0] = PDU_TYPE_ABORT | 1;
    1310:	2371      	movs	r3, #113	; 0x71
    1312:	7003      	strb	r3, [r0, #0]
        } else {
            apdu[0] = PDU_TYPE_ABORT;
        }
        apdu[1] = invoke_id;
    1314:	7041      	strb	r1, [r0, #1]
        apdu[2] = abort_reason;
    1316:	7082      	strb	r2, [r0, #2]
        apdu_len = 3;
    1318:	2003      	movs	r0, #3
    }

    return apdu_len;
}
    131a:	4770      	bx	lr
            apdu[0] = PDU_TYPE_ABORT;
    131c:	2370      	movs	r3, #112	; 0x70
    131e:	7003      	strb	r3, [r0, #0]
    1320:	e7f8      	b.n	1314 <abort_encode_apdu+0xc>
    int apdu_len = 0; /* total length of the apdu, return value */
    1322:	2000      	movs	r0, #0
    return apdu_len;
    1324:	e7f9      	b.n	131a <abort_encode_apdu+0x12>
	...

00001328 <npdu_handler>:
 *  @param pdu_len [in] The size of the received message in the pdu[] buffer.
 */
void npdu_handler(BACNET_ADDRESS *src, /* source address */
    uint8_t *pdu, /* PDU data */
    uint16_t pdu_len)
{ /* length PDU  */
    1328:	b5f0      	push	{r4, r5, r6, r7, lr}
    132a:	b089      	sub	sp, #36	; 0x24
    132c:	0006      	movs	r6, r0
    132e:	000d      	movs	r5, r1
    1330:	0017      	movs	r7, r2
    int apdu_offset = 0;
    BACNET_ADDRESS dest = { 0 };
    1332:	2212      	movs	r2, #18
    1334:	2100      	movs	r1, #0
    1336:	a803      	add	r0, sp, #12
    1338:	4c17      	ldr	r4, [pc, #92]	; (1398 <npdu_handler+0x70>)
    133a:	47a0      	blx	r4
    BACNET_NPDU_DATA npdu_data = { 0 };
    133c:	220a      	movs	r2, #10
    133e:	2100      	movs	r1, #0
    1340:	4668      	mov	r0, sp
    1342:	47a0      	blx	r4

    /* only handle the version that we know how to handle */
    if (pdu[0] == BACNET_PROTOCOL_VERSION) {
    1344:	782b      	ldrb	r3, [r5, #0]
    1346:	2b01      	cmp	r3, #1
    1348:	d001      	beq.n	134e <npdu_handler+0x26>
            (unsigned)pdu[0]);
#endif
    }

    return;
}
    134a:	b009      	add	sp, #36	; 0x24
    134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        apdu_offset = npdu_decode(&pdu[0], &dest, src, &npdu_data);
    134e:	466b      	mov	r3, sp
    1350:	0032      	movs	r2, r6
    1352:	a903      	add	r1, sp, #12
    1354:	0028      	movs	r0, r5
    1356:	4c11      	ldr	r4, [pc, #68]	; (139c <npdu_handler+0x74>)
    1358:	47a0      	blx	r4
        if (npdu_data.network_layer_message) {
    135a:	466b      	mov	r3, sp
    135c:	789b      	ldrb	r3, [r3, #2]
    135e:	2b00      	cmp	r3, #0
    1360:	d1f3      	bne.n	134a <npdu_handler+0x22>
        } else if ((apdu_offset > 0) && (apdu_offset <= pdu_len)) {
    1362:	2800      	cmp	r0, #0
    1364:	ddf1      	ble.n	134a <npdu_handler+0x22>
    1366:	42b8      	cmp	r0, r7
    1368:	dcef      	bgt.n	134a <npdu_handler+0x22>
            if ((dest.net == 0) || (dest.net == BACNET_BROADCAST_NETWORK)) {
    136a:	ab03      	add	r3, sp, #12
    136c:	891a      	ldrh	r2, [r3, #8]
    136e:	1e53      	subs	r3, r2, #1
    1370:	b29b      	uxth	r3, r3
    1372:	490b      	ldr	r1, [pc, #44]	; (13a0 <npdu_handler+0x78>)
    1374:	428b      	cmp	r3, r1
    1376:	d9e8      	bls.n	134a <npdu_handler+0x22>
                if ((dest.net == BACNET_BROADCAST_NETWORK) &&
    1378:	4b0a      	ldr	r3, [pc, #40]	; (13a4 <npdu_handler+0x7c>)
    137a:	429a      	cmp	r2, r3
    137c:	d006      	beq.n	138c <npdu_handler+0x64>
                    apdu_handler(src, &pdu[apdu_offset],
    137e:	1a3a      	subs	r2, r7, r0
    1380:	b292      	uxth	r2, r2
    1382:	1829      	adds	r1, r5, r0
    1384:	0030      	movs	r0, r6
    1386:	4b08      	ldr	r3, [pc, #32]	; (13a8 <npdu_handler+0x80>)
    1388:	4798      	blx	r3
    return;
    138a:	e7de      	b.n	134a <npdu_handler+0x22>
                    ((pdu[apdu_offset] & 0xF0) ==
    138c:	5c2b      	ldrb	r3, [r5, r0]
                if ((dest.net == BACNET_BROADCAST_NETWORK) &&
    138e:	220f      	movs	r2, #15
    1390:	4393      	bics	r3, r2
    1392:	d1f4      	bne.n	137e <npdu_handler+0x56>
    1394:	e7d9      	b.n	134a <npdu_handler+0x22>
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	0000db1f 	.word	0x0000db1f
    139c:	0000a6bd 	.word	0x0000a6bd
    13a0:	0000fffd 	.word	0x0000fffd
    13a4:	0000ffff 	.word	0x0000ffff
    13a8:	00001529 	.word	0x00001529

000013ac <apdu_confirmed_dcc_disabled>:
   shall be processed and no messages shall be initiated.
   When the initiation of communications is disabled,
   all APDUs shall be processed and responses returned as
   required... */
static bool apdu_confirmed_dcc_disabled(uint8_t service_choice)
{
    13ac:	b510      	push	{r4, lr}
    13ae:	0004      	movs	r4, r0
    bool status = false;

    if (dcc_communication_disabled()) {
    13b0:	4b05      	ldr	r3, [pc, #20]	; (13c8 <apdu_confirmed_dcc_disabled+0x1c>)
    13b2:	4798      	blx	r3
    13b4:	2800      	cmp	r0, #0
    13b6:	d003      	beq.n	13c0 <apdu_confirmed_dcc_disabled+0x14>
        switch (service_choice) {
    13b8:	2c11      	cmp	r4, #17
    13ba:	d002      	beq.n	13c2 <apdu_confirmed_dcc_disabled+0x16>
    13bc:	2c14      	cmp	r4, #20
    13be:	d000      	beq.n	13c2 <apdu_confirmed_dcc_disabled+0x16>
                break;
        }
    }

    return status;
}
    13c0:	bd10      	pop	{r4, pc}
    bool status = false;
    13c2:	2000      	movs	r0, #0
    13c4:	e7fc      	b.n	13c0 <apdu_confirmed_dcc_disabled+0x14>
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	00004165 	.word	0x00004165

000013cc <apdu_unconfirmed_dcc_disabled>:
/* If the request is valid and the 'Enable/Disable' parameter is
   DISABLE_INITIATION, the responding BACnet-user shall
   discontinue the initiation of messages except for I-Am
   requests issued in accordance with the Who-Is service procedure.*/
static bool apdu_unconfirmed_dcc_disabled(uint8_t service_choice)
{
    13cc:	b570      	push	{r4, r5, r6, lr}
    13ce:	0005      	movs	r5, r0
    bool status = false;

    if (dcc_communication_disabled()) {
    13d0:	4b07      	ldr	r3, [pc, #28]	; (13f0 <apdu_unconfirmed_dcc_disabled+0x24>)
    13d2:	4798      	blx	r3
    13d4:	1e04      	subs	r4, r0, #0
    13d6:	d001      	beq.n	13dc <apdu_unconfirmed_dcc_disabled+0x10>
                break;
        }
    }

    return status;
}
    13d8:	0020      	movs	r0, r4
    13da:	bd70      	pop	{r4, r5, r6, pc}
    } else if (dcc_communication_initiation_disabled()) {
    13dc:	4b05      	ldr	r3, [pc, #20]	; (13f4 <apdu_unconfirmed_dcc_disabled+0x28>)
    13de:	4798      	blx	r3
    13e0:	2800      	cmp	r0, #0
    13e2:	d003      	beq.n	13ec <apdu_unconfirmed_dcc_disabled+0x20>
        switch (service_choice) {
    13e4:	2d08      	cmp	r5, #8
    13e6:	d0f7      	beq.n	13d8 <apdu_unconfirmed_dcc_disabled+0xc>
                status = true;
    13e8:	0004      	movs	r4, r0
    13ea:	e7f5      	b.n	13d8 <apdu_unconfirmed_dcc_disabled+0xc>
    bool status = false;
    13ec:	0004      	movs	r4, r0
    13ee:	e7f3      	b.n	13d8 <apdu_unconfirmed_dcc_disabled+0xc>
    13f0:	00004165 	.word	0x00004165
    13f4:	00004179 	.word	0x00004179

000013f8 <apdu_set_confirmed_handler>:
    if (service_choice < MAX_BACNET_CONFIRMED_SERVICE) {
    13f8:	281d      	cmp	r0, #29
    13fa:	d802      	bhi.n	1402 <apdu_set_confirmed_handler+0xa>
        Confirmed_Function[service_choice] = pFunction;
    13fc:	0080      	lsls	r0, r0, #2
    13fe:	4b01      	ldr	r3, [pc, #4]	; (1404 <apdu_set_confirmed_handler+0xc>)
    1400:	50c1      	str	r1, [r0, r3]
}
    1402:	4770      	bx	lr
    1404:	200003c4 	.word	0x200003c4

00001408 <apdu_set_unrecognized_service_handler_handler>:
    Unrecognized_Service_Handler = pFunction;
    1408:	4b01      	ldr	r3, [pc, #4]	; (1410 <apdu_set_unrecognized_service_handler_handler+0x8>)
    140a:	6018      	str	r0, [r3, #0]
}
    140c:	4770      	bx	lr
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	200004e4 	.word	0x200004e4

00001414 <apdu_set_unconfirmed_handler>:
    if (service_choice < MAX_BACNET_UNCONFIRMED_SERVICE) {
    1414:	280a      	cmp	r0, #10
    1416:	d802      	bhi.n	141e <apdu_set_unconfirmed_handler+0xa>
        Unconfirmed_Function[service_choice] = pFunction;
    1418:	0080      	lsls	r0, r0, #2
    141a:	4b01      	ldr	r3, [pc, #4]	; (1420 <apdu_set_unconfirmed_handler+0xc>)
    141c:	50c1      	str	r1, [r0, r3]
}
    141e:	4770      	bx	lr
    1420:	200004b8 	.word	0x200004b8

00001424 <apdu_service_supported>:
    if (service_supported < MAX_BACNET_SERVICES_SUPPORTED) {
    1424:	282b      	cmp	r0, #43	; 0x2b
    1426:	d808      	bhi.n	143a <apdu_service_supported+0x16>
    1428:	2300      	movs	r3, #0
        for (i = 0; i < MAX_BACNET_CONFIRMED_SERVICE; i++) {
    142a:	2b1d      	cmp	r3, #29
    142c:	dc1c      	bgt.n	1468 <apdu_service_supported+0x44>
            if (confirmed_service_supported[i] == service_supported) {
    142e:	4a13      	ldr	r2, [pc, #76]	; (147c <apdu_service_supported+0x58>)
    1430:	5cd2      	ldrb	r2, [r2, r3]
    1432:	4290      	cmp	r0, r2
    1434:	d004      	beq.n	1440 <apdu_service_supported+0x1c>
        for (i = 0; i < MAX_BACNET_CONFIRMED_SERVICE; i++) {
    1436:	3301      	adds	r3, #1
    1438:	e7f7      	b.n	142a <apdu_service_supported+0x6>
    bool status = false;
    143a:	2100      	movs	r1, #0
}
    143c:	0008      	movs	r0, r1
    143e:	4770      	bx	lr
                if (Confirmed_Function[i] != NULL) {
    1440:	009b      	lsls	r3, r3, #2
    1442:	4a0f      	ldr	r2, [pc, #60]	; (1480 <apdu_service_supported+0x5c>)
    1444:	589b      	ldr	r3, [r3, r2]
    1446:	2b00      	cmp	r3, #0
    1448:	d00b      	beq.n	1462 <apdu_service_supported+0x3e>
                found = true;
    144a:	2301      	movs	r3, #1
                    status = true;
    144c:	2101      	movs	r1, #1
        if (!found) {
    144e:	2b00      	cmp	r3, #0
    1450:	d1f4      	bne.n	143c <apdu_service_supported+0x18>
            for (i = 0; i < MAX_BACNET_UNCONFIRMED_SERVICE; i++) {
    1452:	2b0a      	cmp	r3, #10
    1454:	dcf2      	bgt.n	143c <apdu_service_supported+0x18>
                if (unconfirmed_service_supported[i] == service_supported) {
    1456:	4a0b      	ldr	r2, [pc, #44]	; (1484 <apdu_service_supported+0x60>)
    1458:	5cd2      	ldrb	r2, [r2, r3]
    145a:	4290      	cmp	r0, r2
    145c:	d007      	beq.n	146e <apdu_service_supported+0x4a>
            for (i = 0; i < MAX_BACNET_UNCONFIRMED_SERVICE; i++) {
    145e:	3301      	adds	r3, #1
    1460:	e7f7      	b.n	1452 <apdu_service_supported+0x2e>
                found = true;
    1462:	3301      	adds	r3, #1
    bool status = false;
    1464:	2100      	movs	r1, #0
    1466:	e7f2      	b.n	144e <apdu_service_supported+0x2a>
    bool found = false;
    1468:	2300      	movs	r3, #0
    bool status = false;
    146a:	2100      	movs	r1, #0
    146c:	e7ef      	b.n	144e <apdu_service_supported+0x2a>
                    if (Unconfirmed_Function[i] != NULL) {
    146e:	009b      	lsls	r3, r3, #2
    1470:	4a05      	ldr	r2, [pc, #20]	; (1488 <apdu_service_supported+0x64>)
    1472:	589b      	ldr	r3, [r3, r2]
    1474:	2b00      	cmp	r3, #0
    1476:	d0e1      	beq.n	143c <apdu_service_supported+0x18>
                        status = true;
    1478:	2101      	movs	r1, #1
    147a:	e7df      	b.n	143c <apdu_service_supported+0x18>
    147c:	0000e4f8 	.word	0x0000e4f8
    1480:	200003c4 	.word	0x200003c4
    1484:	0000e518 	.word	0x0000e518
    1488:	200004b8 	.word	0x200004b8

0000148c <apdu_decode_confirmed_service_request>:
{
    148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    148e:	0004      	movs	r4, r0
    1490:	000e      	movs	r6, r1
    1492:	0015      	movs	r5, r2
    1494:	001f      	movs	r7, r3
    if (apdu_len >= 3) {
    1496:	2902      	cmp	r1, #2
    1498:	d801      	bhi.n	149e <apdu_decode_confirmed_service_request+0x12>
    uint16_t len = 0; /* counts where we are in PDU */
    149a:	2000      	movs	r0, #0
}
    149c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        service_data->segmented_message = (apdu[0] & BIT(3)) ? true : false;
    149e:	7802      	ldrb	r2, [r0, #0]
    14a0:	08d2      	lsrs	r2, r2, #3
    14a2:	2301      	movs	r3, #1
    14a4:	401a      	ands	r2, r3
    14a6:	702a      	strb	r2, [r5, #0]
        service_data->more_follows = (apdu[0] & BIT(2)) ? true : false;
    14a8:	7802      	ldrb	r2, [r0, #0]
    14aa:	0892      	lsrs	r2, r2, #2
    14ac:	401a      	ands	r2, r3
    14ae:	706a      	strb	r2, [r5, #1]
            (apdu[0] & BIT(1)) ? true : false;
    14b0:	7802      	ldrb	r2, [r0, #0]
    14b2:	0852      	lsrs	r2, r2, #1
    14b4:	4013      	ands	r3, r2
        service_data->segmented_response_accepted =
    14b6:	70ab      	strb	r3, [r5, #2]
        service_data->max_segs = decode_max_segs(apdu[1]);
    14b8:	7840      	ldrb	r0, [r0, #1]
    14ba:	4b13      	ldr	r3, [pc, #76]	; (1508 <apdu_decode_confirmed_service_request+0x7c>)
    14bc:	4798      	blx	r3
    14be:	6068      	str	r0, [r5, #4]
        service_data->max_resp = decode_max_apdu(apdu[1]);
    14c0:	7860      	ldrb	r0, [r4, #1]
    14c2:	4b12      	ldr	r3, [pc, #72]	; (150c <apdu_decode_confirmed_service_request+0x80>)
    14c4:	4798      	blx	r3
    14c6:	60a8      	str	r0, [r5, #8]
        service_data->invoke_id = apdu[2];
    14c8:	78a3      	ldrb	r3, [r4, #2]
    14ca:	732b      	strb	r3, [r5, #12]
        if (service_data->segmented_message) {
    14cc:	782b      	ldrb	r3, [r5, #0]
    14ce:	2b00      	cmp	r3, #0
    14d0:	d007      	beq.n	14e2 <apdu_decode_confirmed_service_request+0x56>
            if (apdu_len >= (len+2)) {
    14d2:	2e04      	cmp	r6, #4
    14d4:	dd13      	ble.n	14fe <apdu_decode_confirmed_service_request+0x72>
                service_data->sequence_number = apdu[len++];
    14d6:	78e3      	ldrb	r3, [r4, #3]
    14d8:	736b      	strb	r3, [r5, #13]
                service_data->proposed_window_number = apdu[len++];
    14da:	7923      	ldrb	r3, [r4, #4]
    14dc:	73ab      	strb	r3, [r5, #14]
    14de:	2305      	movs	r3, #5
    14e0:	e000      	b.n	14e4 <apdu_decode_confirmed_service_request+0x58>
        len = 3;
    14e2:	2303      	movs	r3, #3
        if (apdu_len >= (len+2)) {
    14e4:	1c9a      	adds	r2, r3, #2
    14e6:	4296      	cmp	r6, r2
    14e8:	db0b      	blt.n	1502 <apdu_decode_confirmed_service_request+0x76>
            *service_choice = apdu[len++];
    14ea:	1c58      	adds	r0, r3, #1
    14ec:	5ce3      	ldrb	r3, [r4, r3]
    14ee:	703b      	strb	r3, [r7, #0]
            *service_request = &apdu[len];
    14f0:	1824      	adds	r4, r4, r0
    14f2:	9b06      	ldr	r3, [sp, #24]
    14f4:	601c      	str	r4, [r3, #0]
            *service_request_len = apdu_len - len;
    14f6:	1a36      	subs	r6, r6, r0
    14f8:	9b07      	ldr	r3, [sp, #28]
    14fa:	801e      	strh	r6, [r3, #0]
    14fc:	e7ce      	b.n	149c <apdu_decode_confirmed_service_request+0x10>
                return 0;
    14fe:	2000      	movs	r0, #0
    1500:	e7cc      	b.n	149c <apdu_decode_confirmed_service_request+0x10>
            return 0;
    1502:	2000      	movs	r0, #0
    1504:	e7ca      	b.n	149c <apdu_decode_confirmed_service_request+0x10>
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	00002bf5 	.word	0x00002bf5
    150c:	00002c3d 	.word	0x00002c3d

00001510 <apdu_timeout>:
    return Timeout_Milliseconds;
    1510:	4b01      	ldr	r3, [pc, #4]	; (1518 <apdu_timeout+0x8>)
    1512:	8818      	ldrh	r0, [r3, #0]
}
    1514:	4770      	bx	lr
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	2000000a 	.word	0x2000000a

0000151c <apdu_retries>:
    return Number_Of_Retries;
    151c:	4b01      	ldr	r3, [pc, #4]	; (1524 <apdu_retries+0x8>)
    151e:	7818      	ldrb	r0, [r3, #0]
}
    1520:	4770      	bx	lr
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	20000008 	.word	0x20000008

00001528 <apdu_handler>:
 * @param apdu_len [in] The total (remaining) length of the apdu.
 */
void apdu_handler(BACNET_ADDRESS *src,
    uint8_t *apdu, /* APDU data */
    uint16_t apdu_len)
{
    1528:	b5f0      	push	{r4, r5, r6, r7, lr}
    152a:	46ce      	mov	lr, r9
    152c:	4647      	mov	r7, r8
    152e:	b580      	push	{r7, lr}
    1530:	b08f      	sub	sp, #60	; 0x3c
    1532:	0006      	movs	r6, r0
    1534:	000c      	movs	r4, r1
    1536:	0015      	movs	r5, r2
    BACNET_CONFIRMED_SERVICE_DATA service_data = { 0 };
    1538:	2210      	movs	r2, #16
    153a:	2100      	movs	r1, #0
    153c:	a80a      	add	r0, sp, #40	; 0x28
    153e:	4f9a      	ldr	r7, [pc, #616]	; (17a8 <apdu_handler+0x280>)
    1540:	47b8      	blx	r7
    BACNET_CONFIRMED_SERVICE_ACK_DATA service_ack_data = { 0 };
    1542:	2205      	movs	r2, #5
    1544:	2100      	movs	r1, #0
    1546:	a808      	add	r0, sp, #32
    1548:	47b8      	blx	r7
    uint8_t invoke_id = 0;
    uint8_t service_choice = 0;
    154a:	2300      	movs	r3, #0
    154c:	221f      	movs	r2, #31
    154e:	446a      	add	r2, sp
    1550:	7013      	strb	r3, [r2, #0]
    uint8_t *service_request = NULL;
    1552:	9306      	str	r3, [sp, #24]
    uint16_t service_request_len = 0;
    1554:	2216      	movs	r2, #22
    1556:	446a      	add	r2, sp
    1558:	8013      	strh	r3, [r2, #0]
    int len = 0; /* counts where we are in PDU */
    uint8_t tag_number = 0;
    155a:	2215      	movs	r2, #21
    155c:	446a      	add	r2, sp
    155e:	2100      	movs	r1, #0
    1560:	7011      	strb	r1, [r2, #0]
    uint32_t len_value = 0;
    1562:	9304      	str	r3, [sp, #16]
    uint32_t error_code = 0;
    1564:	9303      	str	r3, [sp, #12]
    uint32_t error_class = 0;
    1566:	9302      	str	r3, [sp, #8]
    uint8_t reason = 0;
    bool server = false;

    if (apdu) {
    1568:	2c00      	cmp	r4, #0
    156a:	d012      	beq.n	1592 <apdu_handler+0x6a>
        /* PDU Type */
        switch (apdu[0] & 0xF0) {
    156c:	7823      	ldrb	r3, [r4, #0]
    156e:	220f      	movs	r2, #15
    1570:	0019      	movs	r1, r3
    1572:	4391      	bics	r1, r2
    1574:	000a      	movs	r2, r1
    1576:	2930      	cmp	r1, #48	; 0x30
    1578:	d100      	bne.n	157c <apdu_handler+0x54>
    157a:	e0bc      	b.n	16f6 <apdu_handler+0x1ce>
    157c:	b2c9      	uxtb	r1, r1
    157e:	2930      	cmp	r1, #48	; 0x30
    1580:	d80c      	bhi.n	159c <apdu_handler+0x74>
    1582:	2a10      	cmp	r2, #16
    1584:	d100      	bne.n	1588 <apdu_handler+0x60>
    1586:	e07f      	b.n	1688 <apdu_handler+0x160>
    1588:	2a20      	cmp	r2, #32
    158a:	d100      	bne.n	158e <apdu_handler+0x66>
    158c:	e09e      	b.n	16cc <apdu_handler+0x1a4>
    158e:	2a00      	cmp	r2, #0
    1590:	d049      	beq.n	1626 <apdu_handler+0xfe>
            default:
                break;
        }
    }
    return;
}
    1592:	b00f      	add	sp, #60	; 0x3c
    1594:	bc0c      	pop	{r2, r3}
    1596:	4690      	mov	r8, r2
    1598:	4699      	mov	r9, r3
    159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (apdu[0] & 0xF0) {
    159c:	2a60      	cmp	r2, #96	; 0x60
    159e:	d100      	bne.n	15a2 <apdu_handler+0x7a>
    15a0:	e0ec      	b.n	177c <apdu_handler+0x254>
    15a2:	2a70      	cmp	r2, #112	; 0x70
    15a4:	d100      	bne.n	15a8 <apdu_handler+0x80>
    15a6:	e0f3      	b.n	1790 <apdu_handler+0x268>
    15a8:	2a50      	cmp	r2, #80	; 0x50
    15aa:	d1f2      	bne.n	1592 <apdu_handler+0x6a>
                invoke_id = apdu[1];
    15ac:	7863      	ldrb	r3, [r4, #1]
    15ae:	4698      	mov	r8, r3
                service_choice = apdu[2];
    15b0:	78a3      	ldrb	r3, [r4, #2]
    15b2:	221f      	movs	r2, #31
    15b4:	446a      	add	r2, sp
    15b6:	7013      	strb	r3, [r2, #0]
                if (service_choice ==
    15b8:	2b12      	cmp	r3, #18
    15ba:	d100      	bne.n	15be <apdu_handler+0x96>
    15bc:	e0cf      	b.n	175e <apdu_handler+0x236>
                len = 3;
    15be:	2503      	movs	r5, #3
                len += decode_tag_number_and_value(
    15c0:	1960      	adds	r0, r4, r5
    15c2:	aa04      	add	r2, sp, #16
    15c4:	2315      	movs	r3, #21
    15c6:	446b      	add	r3, sp
    15c8:	0019      	movs	r1, r3
    15ca:	4b78      	ldr	r3, [pc, #480]	; (17ac <apdu_handler+0x284>)
    15cc:	4699      	mov	r9, r3
    15ce:	4798      	blx	r3
    15d0:	182d      	adds	r5, r5, r0
                len += decode_enumerated(&apdu[len], len_value, &error_class);
    15d2:	1960      	adds	r0, r4, r5
    15d4:	aa02      	add	r2, sp, #8
    15d6:	9904      	ldr	r1, [sp, #16]
    15d8:	4f75      	ldr	r7, [pc, #468]	; (17b0 <apdu_handler+0x288>)
    15da:	47b8      	blx	r7
    15dc:	182d      	adds	r5, r5, r0
                len += decode_tag_number_and_value(
    15de:	1960      	adds	r0, r4, r5
    15e0:	aa04      	add	r2, sp, #16
    15e2:	2315      	movs	r3, #21
    15e4:	446b      	add	r3, sp
    15e6:	0019      	movs	r1, r3
    15e8:	47c8      	blx	r9
    15ea:	182d      	adds	r5, r5, r0
                len += decode_enumerated(&apdu[len], len_value, &error_code);
    15ec:	1960      	adds	r0, r4, r5
    15ee:	aa03      	add	r2, sp, #12
    15f0:	9904      	ldr	r1, [sp, #16]
    15f2:	47b8      	blx	r7
    15f4:	1828      	adds	r0, r5, r0
                if (service_choice ==
    15f6:	231f      	movs	r3, #31
    15f8:	446b      	add	r3, sp
    15fa:	781b      	ldrb	r3, [r3, #0]
    15fc:	2b12      	cmp	r3, #18
    15fe:	d100      	bne.n	1602 <apdu_handler+0xda>
    1600:	e0b7      	b.n	1772 <apdu_handler+0x24a>
                if (service_choice < MAX_BACNET_CONFIRMED_SERVICE) {
    1602:	231f      	movs	r3, #31
    1604:	446b      	add	r3, sp
    1606:	781b      	ldrb	r3, [r3, #0]
    1608:	2b1d      	cmp	r3, #29
    160a:	d8c2      	bhi.n	1592 <apdu_handler+0x6a>
                    if (Error_Function[service_choice]) {
    160c:	009b      	lsls	r3, r3, #2
    160e:	4a69      	ldr	r2, [pc, #420]	; (17b4 <apdu_handler+0x28c>)
    1610:	589c      	ldr	r4, [r3, r2]
    1612:	2c00      	cmp	r4, #0
    1614:	d0bd      	beq.n	1592 <apdu_handler+0x6a>
                        Error_Function[service_choice](src, invoke_id,
    1616:	466b      	mov	r3, sp
    1618:	899b      	ldrh	r3, [r3, #12]
    161a:	466a      	mov	r2, sp
    161c:	8912      	ldrh	r2, [r2, #8]
    161e:	4641      	mov	r1, r8
    1620:	0030      	movs	r0, r6
    1622:	47a0      	blx	r4
    1624:	e7b5      	b.n	1592 <apdu_handler+0x6a>
                (void)apdu_decode_confirmed_service_request(&apdu[0], apdu_len,
    1626:	271f      	movs	r7, #31
    1628:	446f      	add	r7, sp
    162a:	2316      	movs	r3, #22
    162c:	446b      	add	r3, sp
    162e:	9301      	str	r3, [sp, #4]
    1630:	ab06      	add	r3, sp, #24
    1632:	9300      	str	r3, [sp, #0]
    1634:	003b      	movs	r3, r7
    1636:	aa0a      	add	r2, sp, #40	; 0x28
    1638:	0029      	movs	r1, r5
    163a:	0020      	movs	r0, r4
    163c:	4c5e      	ldr	r4, [pc, #376]	; (17b8 <apdu_handler+0x290>)
    163e:	47a0      	blx	r4
                if (apdu_confirmed_dcc_disabled(service_choice)) {
    1640:	7838      	ldrb	r0, [r7, #0]
    1642:	4b5e      	ldr	r3, [pc, #376]	; (17bc <apdu_handler+0x294>)
    1644:	4798      	blx	r3
    1646:	2800      	cmp	r0, #0
    1648:	d1a3      	bne.n	1592 <apdu_handler+0x6a>
                if ((service_choice < MAX_BACNET_CONFIRMED_SERVICE) &&
    164a:	231f      	movs	r3, #31
    164c:	446b      	add	r3, sp
    164e:	781b      	ldrb	r3, [r3, #0]
    1650:	2b1d      	cmp	r3, #29
    1652:	d80c      	bhi.n	166e <apdu_handler+0x146>
                    (Confirmed_Function[service_choice])) {
    1654:	009b      	lsls	r3, r3, #2
    1656:	4a5a      	ldr	r2, [pc, #360]	; (17c0 <apdu_handler+0x298>)
    1658:	589c      	ldr	r4, [r3, r2]
                if ((service_choice < MAX_BACNET_CONFIRMED_SERVICE) &&
    165a:	2c00      	cmp	r4, #0
    165c:	d007      	beq.n	166e <apdu_handler+0x146>
                    Confirmed_Function[service_choice](service_request,
    165e:	2316      	movs	r3, #22
    1660:	446b      	add	r3, sp
    1662:	8819      	ldrh	r1, [r3, #0]
    1664:	ab0a      	add	r3, sp, #40	; 0x28
    1666:	0032      	movs	r2, r6
    1668:	9806      	ldr	r0, [sp, #24]
    166a:	47a0      	blx	r4
    166c:	e791      	b.n	1592 <apdu_handler+0x6a>
                } else if (Unrecognized_Service_Handler) {
    166e:	4b55      	ldr	r3, [pc, #340]	; (17c4 <apdu_handler+0x29c>)
    1670:	681c      	ldr	r4, [r3, #0]
    1672:	2c00      	cmp	r4, #0
    1674:	d100      	bne.n	1678 <apdu_handler+0x150>
    1676:	e78c      	b.n	1592 <apdu_handler+0x6a>
                    Unrecognized_Service_Handler(service_request,
    1678:	2316      	movs	r3, #22
    167a:	446b      	add	r3, sp
    167c:	8819      	ldrh	r1, [r3, #0]
    167e:	ab0a      	add	r3, sp, #40	; 0x28
    1680:	0032      	movs	r2, r6
    1682:	9806      	ldr	r0, [sp, #24]
    1684:	47a0      	blx	r4
    1686:	e784      	b.n	1592 <apdu_handler+0x6a>
                service_choice = apdu[1];
    1688:	7860      	ldrb	r0, [r4, #1]
    168a:	231f      	movs	r3, #31
    168c:	446b      	add	r3, sp
    168e:	7018      	strb	r0, [r3, #0]
                service_request = &apdu[2];
    1690:	3402      	adds	r4, #2
    1692:	9406      	str	r4, [sp, #24]
                service_request_len = apdu_len - 2;
    1694:	3d02      	subs	r5, #2
    1696:	2316      	movs	r3, #22
    1698:	446b      	add	r3, sp
    169a:	801d      	strh	r5, [r3, #0]
                if (apdu_unconfirmed_dcc_disabled(service_choice)) {
    169c:	4b4a      	ldr	r3, [pc, #296]	; (17c8 <apdu_handler+0x2a0>)
    169e:	4798      	blx	r3
    16a0:	2800      	cmp	r0, #0
    16a2:	d000      	beq.n	16a6 <apdu_handler+0x17e>
    16a4:	e775      	b.n	1592 <apdu_handler+0x6a>
                if (service_choice < MAX_BACNET_UNCONFIRMED_SERVICE) {
    16a6:	231f      	movs	r3, #31
    16a8:	446b      	add	r3, sp
    16aa:	781b      	ldrb	r3, [r3, #0]
    16ac:	2b0a      	cmp	r3, #10
    16ae:	d900      	bls.n	16b2 <apdu_handler+0x18a>
    16b0:	e76f      	b.n	1592 <apdu_handler+0x6a>
                    if (Unconfirmed_Function[service_choice]) {
    16b2:	009b      	lsls	r3, r3, #2
    16b4:	4a45      	ldr	r2, [pc, #276]	; (17cc <apdu_handler+0x2a4>)
    16b6:	589b      	ldr	r3, [r3, r2]
    16b8:	2b00      	cmp	r3, #0
    16ba:	d100      	bne.n	16be <apdu_handler+0x196>
    16bc:	e769      	b.n	1592 <apdu_handler+0x6a>
                        Unconfirmed_Function[service_choice](
    16be:	2216      	movs	r2, #22
    16c0:	446a      	add	r2, sp
    16c2:	8811      	ldrh	r1, [r2, #0]
    16c4:	0032      	movs	r2, r6
    16c6:	9806      	ldr	r0, [sp, #24]
    16c8:	4798      	blx	r3
    16ca:	e762      	b.n	1592 <apdu_handler+0x6a>
                invoke_id = apdu[1];
    16cc:	7861      	ldrb	r1, [r4, #1]
                service_choice = apdu[2];
    16ce:	78a3      	ldrb	r3, [r4, #2]
    16d0:	221f      	movs	r2, #31
    16d2:	446a      	add	r2, sp
    16d4:	7013      	strb	r3, [r2, #0]
                switch (service_choice) {
    16d6:	2b1c      	cmp	r3, #28
    16d8:	d900      	bls.n	16dc <apdu_handler+0x1b4>
    16da:	e75a      	b.n	1592 <apdu_handler+0x6a>
    16dc:	009a      	lsls	r2, r3, #2
    16de:	483c      	ldr	r0, [pc, #240]	; (17d0 <apdu_handler+0x2a8>)
    16e0:	5882      	ldr	r2, [r0, r2]
    16e2:	4697      	mov	pc, r2
                        if (Confirmed_ACK_Function[service_choice] != NULL) {
    16e4:	009b      	lsls	r3, r3, #2
    16e6:	4a3b      	ldr	r2, [pc, #236]	; (17d4 <apdu_handler+0x2ac>)
    16e8:	589b      	ldr	r3, [r3, r2]
    16ea:	2b00      	cmp	r3, #0
    16ec:	d100      	bne.n	16f0 <apdu_handler+0x1c8>
    16ee:	e750      	b.n	1592 <apdu_handler+0x6a>
                            ((confirmed_simple_ack_function)
    16f0:	0030      	movs	r0, r6
    16f2:	4798      	blx	r3
    16f4:	e74d      	b.n	1592 <apdu_handler+0x6a>
                    (apdu[0] & BIT(3)) ? true : false;
    16f6:	08db      	lsrs	r3, r3, #3
    16f8:	2201      	movs	r2, #1
    16fa:	4013      	ands	r3, r2
                service_ack_data.segmented_message =
    16fc:	a908      	add	r1, sp, #32
    16fe:	700b      	strb	r3, [r1, #0]
                    (apdu[0] & BIT(2)) ? true : false;
    1700:	7820      	ldrb	r0, [r4, #0]
    1702:	0880      	lsrs	r0, r0, #2
    1704:	4002      	ands	r2, r0
                service_ack_data.more_follows =
    1706:	704a      	strb	r2, [r1, #1]
                invoke_id = service_ack_data.invoke_id = apdu[1];
    1708:	7862      	ldrb	r2, [r4, #1]
    170a:	708a      	strb	r2, [r1, #2]
                if (service_ack_data.segmented_message) {
    170c:	2b00      	cmp	r3, #0
    170e:	d01a      	beq.n	1746 <apdu_handler+0x21e>
                    service_ack_data.sequence_number = apdu[len++];
    1710:	78a2      	ldrb	r2, [r4, #2]
    1712:	70ca      	strb	r2, [r1, #3]
                    service_ack_data.proposed_window_number = apdu[len++];
    1714:	78e2      	ldrb	r2, [r4, #3]
    1716:	710a      	strb	r2, [r1, #4]
    1718:	2304      	movs	r3, #4
                service_choice = apdu[len++];
    171a:	1c59      	adds	r1, r3, #1
    171c:	5ce2      	ldrb	r2, [r4, r3]
    171e:	231f      	movs	r3, #31
    1720:	446b      	add	r3, sp
    1722:	701a      	strb	r2, [r3, #0]
                service_request = &apdu[len];
    1724:	1860      	adds	r0, r4, r1
    1726:	9006      	str	r0, [sp, #24]
                service_request_len = apdu_len - (uint16_t)len;
    1728:	b289      	uxth	r1, r1
    172a:	1a69      	subs	r1, r5, r1
    172c:	b289      	uxth	r1, r1
    172e:	2316      	movs	r3, #22
    1730:	446b      	add	r3, sp
    1732:	8019      	strh	r1, [r3, #0]
                switch (service_choice) {
    1734:	1ed3      	subs	r3, r2, #3
    1736:	b2dc      	uxtb	r4, r3
    1738:	2c1a      	cmp	r4, #26
    173a:	d900      	bls.n	173e <apdu_handler+0x216>
    173c:	e729      	b.n	1592 <apdu_handler+0x6a>
    173e:	00a3      	lsls	r3, r4, #2
    1740:	4c25      	ldr	r4, [pc, #148]	; (17d8 <apdu_handler+0x2b0>)
    1742:	58e3      	ldr	r3, [r4, r3]
    1744:	469f      	mov	pc, r3
                len = 2;
    1746:	2302      	movs	r3, #2
    1748:	e7e7      	b.n	171a <apdu_handler+0x1f2>
                        if (Confirmed_ACK_Function[service_choice] != NULL) {
    174a:	0092      	lsls	r2, r2, #2
    174c:	4b21      	ldr	r3, [pc, #132]	; (17d4 <apdu_handler+0x2ac>)
    174e:	58d4      	ldr	r4, [r2, r3]
    1750:	2c00      	cmp	r4, #0
    1752:	d100      	bne.n	1756 <apdu_handler+0x22e>
    1754:	e71d      	b.n	1592 <apdu_handler+0x6a>
                            (Confirmed_ACK_Function[service_choice])(
    1756:	ab08      	add	r3, sp, #32
    1758:	0032      	movs	r2, r6
    175a:	47a0      	blx	r4
    175c:	e719      	b.n	1592 <apdu_handler+0x6a>
                    if (decode_is_opening_tag_number(&apdu[len], 0)) {
    175e:	1ce0      	adds	r0, r4, #3
    1760:	2100      	movs	r1, #0
    1762:	4b1e      	ldr	r3, [pc, #120]	; (17dc <apdu_handler+0x2b4>)
    1764:	4798      	blx	r3
    1766:	2800      	cmp	r0, #0
    1768:	d101      	bne.n	176e <apdu_handler+0x246>
                len = 3;
    176a:	2503      	movs	r5, #3
    176c:	e728      	b.n	15c0 <apdu_handler+0x98>
                        len++; /* a tag number of 0 is not extended so only one
    176e:	2504      	movs	r5, #4
    1770:	e726      	b.n	15c0 <apdu_handler+0x98>
                    if (decode_is_closing_tag_number(&apdu[len], 0)) {
    1772:	1820      	adds	r0, r4, r0
    1774:	2100      	movs	r1, #0
    1776:	4b1a      	ldr	r3, [pc, #104]	; (17e0 <apdu_handler+0x2b8>)
    1778:	4798      	blx	r3
    177a:	e742      	b.n	1602 <apdu_handler+0xda>
                invoke_id = apdu[1];
    177c:	7861      	ldrb	r1, [r4, #1]
                reason = apdu[2];
    177e:	78a2      	ldrb	r2, [r4, #2]
                if (Reject_Function) {
    1780:	4b18      	ldr	r3, [pc, #96]	; (17e4 <apdu_handler+0x2bc>)
    1782:	681b      	ldr	r3, [r3, #0]
    1784:	2b00      	cmp	r3, #0
    1786:	d100      	bne.n	178a <apdu_handler+0x262>
    1788:	e703      	b.n	1592 <apdu_handler+0x6a>
                    Reject_Function(src, invoke_id, reason);
    178a:	0030      	movs	r0, r6
    178c:	4798      	blx	r3
    178e:	e700      	b.n	1592 <apdu_handler+0x6a>
                server = apdu[0] & 0x01;
    1790:	2201      	movs	r2, #1
    1792:	4013      	ands	r3, r2
                invoke_id = apdu[1];
    1794:	7861      	ldrb	r1, [r4, #1]
                reason = apdu[2];
    1796:	78a2      	ldrb	r2, [r4, #2]
                if (Abort_Function) {
    1798:	4813      	ldr	r0, [pc, #76]	; (17e8 <apdu_handler+0x2c0>)
    179a:	6804      	ldr	r4, [r0, #0]
    179c:	2c00      	cmp	r4, #0
    179e:	d100      	bne.n	17a2 <apdu_handler+0x27a>
    17a0:	e6f7      	b.n	1592 <apdu_handler+0x6a>
                    Abort_Function(src, invoke_id, reason, server);
    17a2:	0030      	movs	r0, r6
    17a4:	47a0      	blx	r4
    return;
    17a6:	e6f4      	b.n	1592 <apdu_handler+0x6a>
    17a8:	0000db1f 	.word	0x0000db1f
    17ac:	00002dc1 	.word	0x00002dc1
    17b0:	0000363d 	.word	0x0000363d
    17b4:	2000043c 	.word	0x2000043c
    17b8:	0000148d 	.word	0x0000148d
    17bc:	000013ad 	.word	0x000013ad
    17c0:	200003c4 	.word	0x200003c4
    17c4:	200004e4 	.word	0x200004e4
    17c8:	000013cd 	.word	0x000013cd
    17cc:	200004b8 	.word	0x200004b8
    17d0:	0000e418 	.word	0x0000e418
    17d4:	2000034c 	.word	0x2000034c
    17d8:	0000e48c 	.word	0x0000e48c
    17dc:	00002f35 	.word	0x00002f35
    17e0:	00002f71 	.word	0x00002f71
    17e4:	200004b4 	.word	0x200004b4
    17e8:	20000348 	.word	0x20000348

000017ec <handler_device_communication_control>:
 */
void handler_device_communication_control(uint8_t *service_request,
    uint16_t service_len,
    BACNET_ADDRESS *src,
    BACNET_CONFIRMED_SERVICE_DATA *service_data)
{
    17ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ee:	4c3e      	ldr	r4, [pc, #248]	; (18e8 <handler_device_communication_control+0xfc>)
    17f0:	44a5      	add	sp, r4
    17f2:	0004      	movs	r4, r0
    17f4:	9103      	str	r1, [sp, #12]
    17f6:	0015      	movs	r5, r2
    17f8:	001f      	movs	r7, r3
    uint16_t timeDuration = 0;
    17fa:	2200      	movs	r2, #0
    17fc:	4b3b      	ldr	r3, [pc, #236]	; (18ec <handler_device_communication_control+0x100>)
    17fe:	a902      	add	r1, sp, #8
    1800:	468c      	mov	ip, r1
    1802:	4463      	add	r3, ip
    1804:	801a      	strh	r2, [r3, #0]
    BACNET_COMMUNICATION_ENABLE_DISABLE state = COMMUNICATION_ENABLE;
    1806:	4b3a      	ldr	r3, [pc, #232]	; (18f0 <handler_device_communication_control+0x104>)
    1808:	4463      	add	r3, ip
    180a:	2200      	movs	r2, #0
    180c:	701a      	strb	r2, [r3, #0]
    int pdu_len = 0;
    BACNET_NPDU_DATA npdu_data;
    BACNET_ADDRESS my_address;

    /* encode the NPDU portion of the reply packet */
    datalink_get_my_address(&my_address);
    180e:	a805      	add	r0, sp, #20
    1810:	4b38      	ldr	r3, [pc, #224]	; (18f4 <handler_device_communication_control+0x108>)
    1812:	4798      	blx	r3
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    1814:	2200      	movs	r2, #0
    1816:	2100      	movs	r1, #0
    1818:	a80a      	add	r0, sp, #40	; 0x28
    181a:	4b37      	ldr	r3, [pc, #220]	; (18f8 <handler_device_communication_control+0x10c>)
    181c:	4798      	blx	r3
    pdu_len = npdu_encode_pdu(
    181e:	ab0a      	add	r3, sp, #40	; 0x28
    1820:	aa05      	add	r2, sp, #20
    1822:	0029      	movs	r1, r5
    1824:	4835      	ldr	r0, [pc, #212]	; (18fc <handler_device_communication_control+0x110>)
    1826:	4e36      	ldr	r6, [pc, #216]	; (1900 <handler_device_communication_control+0x114>)
    1828:	47b0      	blx	r6
    182a:	0006      	movs	r6, r0
        &Handler_Transmit_Buffer[0], src, &my_address, &npdu_data);
#if PRINT_ENABLED
    fprintf(stderr, "DeviceCommunicationControl!\n");
#endif
    if (service_data->segmented_message) {
    182c:	783b      	ldrb	r3, [r7, #0]
    182e:	2b00      	cmp	r3, #0
    1830:	d125      	bne.n	187e <handler_device_communication_control+0x92>
            "Sending Abort - segmented message.\n");
#endif
        goto DCC_ABORT;
    }
    /* decode the service request only */
    len = dcc_decode_service_request(
    1832:	ab0d      	add	r3, sp, #52	; 0x34
    1834:	9300      	str	r3, [sp, #0]
    1836:	4b2e      	ldr	r3, [pc, #184]	; (18f0 <handler_device_communication_control+0x104>)
    1838:	aa02      	add	r2, sp, #8
    183a:	4694      	mov	ip, r2
    183c:	4463      	add	r3, ip
    183e:	4a2b      	ldr	r2, [pc, #172]	; (18ec <handler_device_communication_control+0x100>)
    1840:	4462      	add	r2, ip
    1842:	9903      	ldr	r1, [sp, #12]
    1844:	0020      	movs	r0, r4
    1846:	4c2f      	ldr	r4, [pc, #188]	; (1904 <handler_device_communication_control+0x118>)
    1848:	47a0      	blx	r4
            "timeout=%u state=%u password=%s\n",
            (unsigned)timeDuration, (unsigned)state,
            characterstring_value(&password));
#endif
    /* bad decoding or something we didn't understand - send an abort */
    if (len < 0) {
    184a:	2800      	cmp	r0, #0
    184c:	db29      	blt.n	18a2 <handler_device_communication_control+0xb6>
            "DeviceCommunicationControl: "
            "Sending Abort - could not decode.\n");
#endif
        goto DCC_ABORT;
    }
    if (state >= MAX_BACNET_COMMUNICATION_ENABLE_DISABLE) {
    184e:	4b28      	ldr	r3, [pc, #160]	; (18f0 <handler_device_communication_control+0x104>)
    1850:	aa02      	add	r2, sp, #8
    1852:	4694      	mov	ip, r2
    1854:	4463      	add	r3, ip
    1856:	781b      	ldrb	r3, [r3, #0]
    1858:	2b02      	cmp	r3, #2
    185a:	d82b      	bhi.n	18b4 <handler_device_communication_control+0xc8>
            &Handler_Transmit_Buffer[pdu_len], service_data->invoke_id);
        if (len > 0)
            goto DCC_ABORT;
#endif

        if (characterstring_ansi_same(&password, My_Password)) {
    185c:	492a      	ldr	r1, [pc, #168]	; (1908 <handler_device_communication_control+0x11c>)
    185e:	a80d      	add	r0, sp, #52	; 0x34
    1860:	4b2a      	ldr	r3, [pc, #168]	; (190c <handler_device_communication_control+0x120>)
    1862:	4798      	blx	r3
    1864:	2800      	cmp	r0, #0
    1866:	d12d      	bne.n	18c4 <handler_device_communication_control+0xd8>
                "DeviceCommunicationControl: "
                "Sending Simple Ack!\n");
#endif
            dcc_set_status_duration(state, timeDuration);
        } else {
            len = bacerror_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    1868:	4824      	ldr	r0, [pc, #144]	; (18fc <handler_device_communication_control+0x110>)
    186a:	1830      	adds	r0, r6, r0
    186c:	7b39      	ldrb	r1, [r7, #12]
    186e:	231a      	movs	r3, #26
    1870:	9300      	str	r3, [sp, #0]
    1872:	3b16      	subs	r3, #22
    1874:	2211      	movs	r2, #17
    1876:	4c26      	ldr	r4, [pc, #152]	; (1910 <handler_device_communication_control+0x124>)
    1878:	47a0      	blx	r4
    187a:	0004      	movs	r4, r0
    187c:	e007      	b.n	188e <handler_device_communication_control+0xa2>
        len = abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    187e:	481f      	ldr	r0, [pc, #124]	; (18fc <handler_device_communication_control+0x110>)
    1880:	1830      	adds	r0, r6, r0
    1882:	7b39      	ldrb	r1, [r7, #12]
    1884:	2301      	movs	r3, #1
    1886:	2204      	movs	r2, #4
    1888:	4c22      	ldr	r4, [pc, #136]	; (1914 <handler_device_communication_control+0x128>)
    188a:	47a0      	blx	r4
    188c:	0004      	movs	r4, r0
                "Sending Error - password failure.\n");
#endif
        }
    }
DCC_ABORT:
    pdu_len += len;
    188e:	19a3      	adds	r3, r4, r6
    len = datalink_send_pdu(
    1890:	4a1a      	ldr	r2, [pc, #104]	; (18fc <handler_device_communication_control+0x110>)
    1892:	a90a      	add	r1, sp, #40	; 0x28
    1894:	0028      	movs	r0, r5
    1896:	4c20      	ldr	r4, [pc, #128]	; (1918 <handler_device_communication_control+0x12c>)
    1898:	47a0      	blx	r4
            strerror(errno));
#endif
    }

    return;
}
    189a:	2387      	movs	r3, #135	; 0x87
    189c:	009b      	lsls	r3, r3, #2
    189e:	449d      	add	sp, r3
    18a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        len = abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    18a2:	4816      	ldr	r0, [pc, #88]	; (18fc <handler_device_communication_control+0x110>)
    18a4:	1830      	adds	r0, r6, r0
    18a6:	7b39      	ldrb	r1, [r7, #12]
    18a8:	2301      	movs	r3, #1
    18aa:	2200      	movs	r2, #0
    18ac:	4c19      	ldr	r4, [pc, #100]	; (1914 <handler_device_communication_control+0x128>)
    18ae:	47a0      	blx	r4
    18b0:	0004      	movs	r4, r0
        goto DCC_ABORT;
    18b2:	e7ec      	b.n	188e <handler_device_communication_control+0xa2>
        len = reject_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    18b4:	4811      	ldr	r0, [pc, #68]	; (18fc <handler_device_communication_control+0x110>)
    18b6:	1830      	adds	r0, r6, r0
    18b8:	7b39      	ldrb	r1, [r7, #12]
    18ba:	2208      	movs	r2, #8
    18bc:	4b17      	ldr	r3, [pc, #92]	; (191c <handler_device_communication_control+0x130>)
    18be:	4798      	blx	r3
    18c0:	0004      	movs	r4, r0
    18c2:	e7e4      	b.n	188e <handler_device_communication_control+0xa2>
            len = encode_simple_ack(&Handler_Transmit_Buffer[pdu_len],
    18c4:	480d      	ldr	r0, [pc, #52]	; (18fc <handler_device_communication_control+0x110>)
    18c6:	1830      	adds	r0, r6, r0
    18c8:	7b39      	ldrb	r1, [r7, #12]
    18ca:	2211      	movs	r2, #17
    18cc:	4b14      	ldr	r3, [pc, #80]	; (1920 <handler_device_communication_control+0x134>)
    18ce:	4798      	blx	r3
    18d0:	0004      	movs	r4, r0
            dcc_set_status_duration(state, timeDuration);
    18d2:	4b06      	ldr	r3, [pc, #24]	; (18ec <handler_device_communication_control+0x100>)
    18d4:	aa02      	add	r2, sp, #8
    18d6:	4694      	mov	ip, r2
    18d8:	4463      	add	r3, ip
    18da:	8819      	ldrh	r1, [r3, #0]
    18dc:	4b04      	ldr	r3, [pc, #16]	; (18f0 <handler_device_communication_control+0x104>)
    18de:	4463      	add	r3, ip
    18e0:	7818      	ldrb	r0, [r3, #0]
    18e2:	4b10      	ldr	r3, [pc, #64]	; (1924 <handler_device_communication_control+0x138>)
    18e4:	4798      	blx	r3
    18e6:	e7d2      	b.n	188e <handler_device_communication_control+0xa2>
    18e8:	fffffde4 	.word	0xfffffde4
    18ec:	0000020e 	.word	0x0000020e
    18f0:	0000020d 	.word	0x0000020d
    18f4:	00006ce1 	.word	0x00006ce1
    18f8:	0000a69d 	.word	0x0000a69d
    18fc:	200006c8 	.word	0x200006c8
    1900:	0000a561 	.word	0x0000a561
    1904:	000041ed 	.word	0x000041ed
    1908:	2000000c 	.word	0x2000000c
    190c:	00004009 	.word	0x00004009
    1910:	000038ad 	.word	0x000038ad
    1914:	00001309 	.word	0x00001309
    1918:	00006a95 	.word	0x00006a95
    191c:	0000ab79 	.word	0x0000ab79
    1920:	000038a1 	.word	0x000038a1
    1924:	000041bd 	.word	0x000041bd

00001928 <handler_reinitialize_device>:
 */
void handler_reinitialize_device(uint8_t *service_request,
    uint16_t service_len,
    BACNET_ADDRESS *src,
    BACNET_CONFIRMED_SERVICE_DATA *service_data)
{
    1928:	b5f0      	push	{r4, r5, r6, r7, lr}
    192a:	4c2f      	ldr	r4, [pc, #188]	; (19e8 <handler_reinitialize_device+0xc0>)
    192c:	44a5      	add	sp, r4
    192e:	0006      	movs	r6, r0
    1930:	9103      	str	r1, [sp, #12]
    1932:	0014      	movs	r4, r2
    1934:	001f      	movs	r7, r3
    int pdu_len = 0;
    BACNET_NPDU_DATA npdu_data;
    BACNET_ADDRESS my_address;

    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    1936:	a804      	add	r0, sp, #16
    1938:	4b2c      	ldr	r3, [pc, #176]	; (19ec <handler_reinitialize_device+0xc4>)
    193a:	4798      	blx	r3
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    193c:	2200      	movs	r2, #0
    193e:	2100      	movs	r1, #0
    1940:	a809      	add	r0, sp, #36	; 0x24
    1942:	4b2b      	ldr	r3, [pc, #172]	; (19f0 <handler_reinitialize_device+0xc8>)
    1944:	4798      	blx	r3
    pdu_len = npdu_encode_pdu(
    1946:	ab09      	add	r3, sp, #36	; 0x24
    1948:	aa04      	add	r2, sp, #16
    194a:	0021      	movs	r1, r4
    194c:	4829      	ldr	r0, [pc, #164]	; (19f4 <handler_reinitialize_device+0xcc>)
    194e:	4d2a      	ldr	r5, [pc, #168]	; (19f8 <handler_reinitialize_device+0xd0>)
    1950:	47a8      	blx	r5
    1952:	0005      	movs	r5, r0
        &Handler_Transmit_Buffer[0], src, &my_address, &npdu_data);
#if PRINT_ENABLED
    fprintf(stderr, "ReinitializeDevice!\n");
#endif
    if (service_data->segmented_message) {
    1954:	783b      	ldrb	r3, [r7, #0]
    1956:	2b00      	cmp	r3, #0
    1958:	d11f      	bne.n	199a <handler_reinitialize_device+0x72>
            stderr, "ReinitializeDevice: Sending Abort - segmented message.\n");
#endif
        goto RD_ABORT;
    }
    /* decode the service request only */
    len = rd_decode_service_request(
    195a:	ab0d      	add	r3, sp, #52	; 0x34
    195c:	aa0c      	add	r2, sp, #48	; 0x30
    195e:	9903      	ldr	r1, [sp, #12]
    1960:	0030      	movs	r0, r6
    1962:	4e26      	ldr	r6, [pc, #152]	; (19fc <handler_reinitialize_device+0xd4>)
    1964:	47b0      	blx	r6
    } else {
        fprintf(stderr, "ReinitializeDevice: Unable to decode request!\n");
    }
#endif
    /* bad decoding or something we didn't understand - send an abort */
    if (len < 0) {
    1966:	2800      	cmp	r0, #0
    1968:	db28      	blt.n	19bc <handler_reinitialize_device+0x94>
            stderr, "ReinitializeDevice: Sending Abort - could not decode.\n");
#endif
        goto RD_ABORT;
    }
    /* check the data from the request */
    if (rd_data.state >= BACNET_REINIT_MAX) {
    196a:	ab0c      	add	r3, sp, #48	; 0x30
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	2bff      	cmp	r3, #255	; 0xff
    1970:	d02c      	beq.n	19cc <handler_reinitialize_device+0xa4>
            &Handler_Transmit_Buffer[pdu_len], service_data->invoke_id);
        if (len > 0)
            goto RD_ABORT;
#endif

        if (Device_Reinitialize(&rd_data)) {
    1972:	a80c      	add	r0, sp, #48	; 0x30
    1974:	4b22      	ldr	r3, [pc, #136]	; (1a00 <handler_reinitialize_device+0xd8>)
    1976:	4798      	blx	r3
    1978:	2800      	cmp	r0, #0
    197a:	d12e      	bne.n	19da <handler_reinitialize_device+0xb2>
                service_data->invoke_id, SERVICE_CONFIRMED_REINITIALIZE_DEVICE);
#if PRINT_ENABLED
            fprintf(stderr, "ReinitializeDevice: Sending Simple Ack!\n");
#endif
        } else {
            len = bacerror_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    197c:	481d      	ldr	r0, [pc, #116]	; (19f4 <handler_reinitialize_device+0xcc>)
    197e:	1828      	adds	r0, r5, r0
    1980:	7b39      	ldrb	r1, [r7, #12]
    1982:	aa0c      	add	r2, sp, #48	; 0x30
    1984:	23f2      	movs	r3, #242	; 0xf2
    1986:	005b      	lsls	r3, r3, #1
    1988:	5ad3      	ldrh	r3, [r2, r3]
    198a:	26f3      	movs	r6, #243	; 0xf3
    198c:	0076      	lsls	r6, r6, #1
    198e:	5b92      	ldrh	r2, [r2, r6]
    1990:	9200      	str	r2, [sp, #0]
    1992:	2214      	movs	r2, #20
    1994:	4e1b      	ldr	r6, [pc, #108]	; (1a04 <handler_reinitialize_device+0xdc>)
    1996:	47b0      	blx	r6
    1998:	e006      	b.n	19a8 <handler_reinitialize_device+0x80>
        len = abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    199a:	4816      	ldr	r0, [pc, #88]	; (19f4 <handler_reinitialize_device+0xcc>)
    199c:	1828      	adds	r0, r5, r0
    199e:	7b39      	ldrb	r1, [r7, #12]
    19a0:	2301      	movs	r3, #1
    19a2:	2204      	movs	r2, #4
    19a4:	4e18      	ldr	r6, [pc, #96]	; (1a08 <handler_reinitialize_device+0xe0>)
    19a6:	47b0      	blx	r6
            fprintf(stderr, "ReinitializeDevice: Sending Error.\n");
#endif
        }
    }
RD_ABORT:
    pdu_len += len;
    19a8:	1943      	adds	r3, r0, r5
    len = datalink_send_pdu(
    19aa:	4a12      	ldr	r2, [pc, #72]	; (19f4 <handler_reinitialize_device+0xcc>)
    19ac:	a909      	add	r1, sp, #36	; 0x24
    19ae:	0020      	movs	r0, r4
    19b0:	4c16      	ldr	r4, [pc, #88]	; (1a0c <handler_reinitialize_device+0xe4>)
    19b2:	47a0      	blx	r4
            strerror(errno));
#endif
    }

    return;
}
    19b4:	2387      	movs	r3, #135	; 0x87
    19b6:	009b      	lsls	r3, r3, #2
    19b8:	449d      	add	sp, r3
    19ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        len = abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    19bc:	480d      	ldr	r0, [pc, #52]	; (19f4 <handler_reinitialize_device+0xcc>)
    19be:	1828      	adds	r0, r5, r0
    19c0:	7b39      	ldrb	r1, [r7, #12]
    19c2:	2301      	movs	r3, #1
    19c4:	2200      	movs	r2, #0
    19c6:	4e10      	ldr	r6, [pc, #64]	; (1a08 <handler_reinitialize_device+0xe0>)
    19c8:	47b0      	blx	r6
        goto RD_ABORT;
    19ca:	e7ed      	b.n	19a8 <handler_reinitialize_device+0x80>
        len = reject_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    19cc:	4809      	ldr	r0, [pc, #36]	; (19f4 <handler_reinitialize_device+0xcc>)
    19ce:	1828      	adds	r0, r5, r0
    19d0:	7b39      	ldrb	r1, [r7, #12]
    19d2:	2208      	movs	r2, #8
    19d4:	4b0e      	ldr	r3, [pc, #56]	; (1a10 <handler_reinitialize_device+0xe8>)
    19d6:	4798      	blx	r3
    19d8:	e7e6      	b.n	19a8 <handler_reinitialize_device+0x80>
            len = encode_simple_ack(&Handler_Transmit_Buffer[pdu_len],
    19da:	4806      	ldr	r0, [pc, #24]	; (19f4 <handler_reinitialize_device+0xcc>)
    19dc:	1828      	adds	r0, r5, r0
    19de:	7b39      	ldrb	r1, [r7, #12]
    19e0:	2214      	movs	r2, #20
    19e2:	4b0c      	ldr	r3, [pc, #48]	; (1a14 <handler_reinitialize_device+0xec>)
    19e4:	4798      	blx	r3
    19e6:	e7df      	b.n	19a8 <handler_reinitialize_device+0x80>
    19e8:	fffffde4 	.word	0xfffffde4
    19ec:	00006ce1 	.word	0x00006ce1
    19f0:	0000a69d 	.word	0x0000a69d
    19f4:	200006c8 	.word	0x200006c8
    19f8:	0000a561 	.word	0x0000a561
    19fc:	0000aa8d 	.word	0x0000aa8d
    1a00:	000052b1 	.word	0x000052b1
    1a04:	000038ad 	.word	0x000038ad
    1a08:	00001309 	.word	0x00001309
    1a0c:	00006a95 	.word	0x00006a95
    1a10:	0000ab79 	.word	0x0000ab79
    1a14:	000038a1 	.word	0x000038a1

00001a18 <handler_read_property>:
 */
void handler_read_property(uint8_t *service_request,
    uint16_t service_len,
    BACNET_ADDRESS *src,
    BACNET_CONFIRMED_SERVICE_DATA *service_data)
{
    1a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1a:	46ce      	mov	lr, r9
    1a1c:	b500      	push	{lr}
    1a1e:	b094      	sub	sp, #80	; 0x50
    1a20:	0007      	movs	r7, r0
    1a22:	000c      	movs	r4, r1
    1a24:	0015      	movs	r5, r2
    1a26:	9203      	str	r2, [sp, #12]
    1a28:	4699      	mov	r9, r3
    bool error = true; /* assume that there is an error */
    int bytes_sent = 0;
    BACNET_ADDRESS my_address;

    /* configure default error code as an abort since it is common */
    rpdata.error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
    1a2a:	2236      	movs	r2, #54	; 0x36
    1a2c:	ab0d      	add	r3, sp, #52	; 0x34
    1a2e:	835a      	strh	r2, [r3, #26]
    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    1a30:	a805      	add	r0, sp, #20
    1a32:	4b49      	ldr	r3, [pc, #292]	; (1b58 <handler_read_property+0x140>)
    1a34:	4798      	blx	r3
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    1a36:	2200      	movs	r2, #0
    1a38:	2100      	movs	r1, #0
    1a3a:	a80a      	add	r0, sp, #40	; 0x28
    1a3c:	4b47      	ldr	r3, [pc, #284]	; (1b5c <handler_read_property+0x144>)
    1a3e:	4798      	blx	r3
    npdu_len = npdu_encode_pdu(
    1a40:	ab0a      	add	r3, sp, #40	; 0x28
    1a42:	aa05      	add	r2, sp, #20
    1a44:	0029      	movs	r1, r5
    1a46:	4846      	ldr	r0, [pc, #280]	; (1b60 <handler_read_property+0x148>)
    1a48:	4e46      	ldr	r6, [pc, #280]	; (1b64 <handler_read_property+0x14c>)
    1a4a:	47b0      	blx	r6
    1a4c:	0005      	movs	r5, r0
        &Handler_Transmit_Buffer[0], src, &my_address, &npdu_data);
    if (service_data->segmented_message) {
    1a4e:	464b      	mov	r3, r9
    1a50:	781e      	ldrb	r6, [r3, #0]
    1a52:	2e00      	cmp	r6, #0
    1a54:	d015      	beq.n	1a82 <handler_read_property+0x6a>
    int apdu_len = -1;
    1a56:	2401      	movs	r4, #1
    1a58:	4264      	negs	r4, r4
        /* we don't support segmentation - send an abort */
        len = BACNET_STATUS_ABORT;
    1a5a:	2002      	movs	r0, #2
    1a5c:	4240      	negs	r0, r0
        }
#endif
    }

RP_FAILURE:
    if (error) {
    1a5e:	2e00      	cmp	r6, #0
    1a60:	d005      	beq.n	1a6e <handler_read_property+0x56>
        if (len == BACNET_STATUS_ABORT) {
    1a62:	1c83      	adds	r3, r0, #2
    1a64:	d04c      	beq.n	1b00 <handler_read_property+0xe8>
                service_data->invoke_id,
                abort_convert_error_code(rpdata.error_code), true);
#if PRINT_ENABLED
            fprintf(stderr, "RP: Sending Abort!\n");
#endif
        } else if (len == BACNET_STATUS_ERROR) {
    1a66:	1c43      	adds	r3, r0, #1
    1a68:	d05a      	beq.n	1b20 <handler_read_property+0x108>
                service_data->invoke_id, SERVICE_CONFIRMED_READ_PROPERTY,
                rpdata.error_class, rpdata.error_code);
#if PRINT_ENABLED
            fprintf(stderr, "RP: Sending Error!\n");
#endif
        } else if (len == BACNET_STATUS_REJECT) {
    1a6a:	1cc3      	adds	r3, r0, #3
    1a6c:	d065      	beq.n	1b3a <handler_read_property+0x122>
            fprintf(stderr, "RP: Sending Reject!\n");
#endif
        }
    }

    pdu_len = npdu_len + apdu_len;
    1a6e:	1963      	adds	r3, r4, r5
    bytes_sent = datalink_send_pdu(
    1a70:	4a3b      	ldr	r2, [pc, #236]	; (1b60 <handler_read_property+0x148>)
    1a72:	a90a      	add	r1, sp, #40	; 0x28
    1a74:	9803      	ldr	r0, [sp, #12]
    1a76:	4c3c      	ldr	r4, [pc, #240]	; (1b68 <handler_read_property+0x150>)
    1a78:	47a0      	blx	r4
        fprintf(stderr, "Failed to send PDU (%s)!\n", strerror(errno));
#endif
    }

    return;
}
    1a7a:	b014      	add	sp, #80	; 0x50
    1a7c:	bc04      	pop	{r2}
    1a7e:	4691      	mov	r9, r2
    1a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    len = rp_decode_service_request(service_request, service_len, &rpdata);
    1a82:	aa0d      	add	r2, sp, #52	; 0x34
    1a84:	0021      	movs	r1, r4
    1a86:	0038      	movs	r0, r7
    1a88:	4b38      	ldr	r3, [pc, #224]	; (1b6c <handler_read_property+0x154>)
    1a8a:	4798      	blx	r3
    if (len < 0) {
    1a8c:	2800      	cmp	r0, #0
    1a8e:	db31      	blt.n	1af4 <handler_read_property+0xdc>
    if ((rpdata.object_type == OBJECT_DEVICE) &&
    1a90:	ab0d      	add	r3, sp, #52	; 0x34
    1a92:	881b      	ldrh	r3, [r3, #0]
    1a94:	2b08      	cmp	r3, #8
    1a96:	d025      	beq.n	1ae4 <handler_read_property+0xcc>
    apdu_len = rp_ack_encode_apdu_init(
    1a98:	4f31      	ldr	r7, [pc, #196]	; (1b60 <handler_read_property+0x148>)
    1a9a:	19e8      	adds	r0, r5, r7
    1a9c:	464b      	mov	r3, r9
    1a9e:	7b19      	ldrb	r1, [r3, #12]
    1aa0:	aa0d      	add	r2, sp, #52	; 0x34
    1aa2:	4b33      	ldr	r3, [pc, #204]	; (1b70 <handler_read_property+0x158>)
    1aa4:	4798      	blx	r3
    1aa6:	0004      	movs	r4, r0
    rpdata.application_data = &Handler_Transmit_Buffer[npdu_len + apdu_len];
    1aa8:	182a      	adds	r2, r5, r0
    1aaa:	19d7      	adds	r7, r2, r7
    1aac:	9711      	str	r7, [sp, #68]	; 0x44
        sizeof(Handler_Transmit_Buffer) - (npdu_len + apdu_len);
    1aae:	23fd      	movs	r3, #253	; 0xfd
    1ab0:	005b      	lsls	r3, r3, #1
    1ab2:	1a9b      	subs	r3, r3, r2
    rpdata.application_data_len =
    1ab4:	9312      	str	r3, [sp, #72]	; 0x48
    len = Device_Read_Property(&rpdata);
    1ab6:	a80d      	add	r0, sp, #52	; 0x34
    1ab8:	4b2e      	ldr	r3, [pc, #184]	; (1b74 <handler_read_property+0x15c>)
    1aba:	4798      	blx	r3
    if (len >= 0) {
    1abc:	2800      	cmp	r0, #0
    1abe:	db1d      	blt.n	1afc <handler_read_property+0xe4>
        apdu_len += len;
    1ac0:	1824      	adds	r4, r4, r0
            &Handler_Transmit_Buffer[npdu_len + apdu_len]);
    1ac2:	1928      	adds	r0, r5, r4
        len = rp_ack_encode_apdu_object_property_end(
    1ac4:	4b26      	ldr	r3, [pc, #152]	; (1b60 <handler_read_property+0x148>)
    1ac6:	18c0      	adds	r0, r0, r3
    1ac8:	4b2b      	ldr	r3, [pc, #172]	; (1b78 <handler_read_property+0x160>)
    1aca:	4798      	blx	r3
        apdu_len += len;
    1acc:	1824      	adds	r4, r4, r0
        if (apdu_len > service_data->max_resp) {
    1ace:	464b      	mov	r3, r9
    1ad0:	689b      	ldr	r3, [r3, #8]
    1ad2:	429c      	cmp	r4, r3
    1ad4:	ddc3      	ble.n	1a5e <handler_read_property+0x46>
            rpdata.error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
    1ad6:	2236      	movs	r2, #54	; 0x36
    1ad8:	ab0d      	add	r3, sp, #52	; 0x34
    1ada:	835a      	strh	r2, [r3, #26]
    bool error = true; /* assume that there is an error */
    1adc:	2601      	movs	r6, #1
            len = BACNET_STATUS_ABORT;
    1ade:	2002      	movs	r0, #2
    1ae0:	4240      	negs	r0, r0
    1ae2:	e7bc      	b.n	1a5e <handler_read_property+0x46>
    if ((rpdata.object_type == OBJECT_DEVICE) &&
    1ae4:	4b25      	ldr	r3, [pc, #148]	; (1b7c <handler_read_property+0x164>)
    1ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ae8:	429a      	cmp	r2, r3
    1aea:	d1d5      	bne.n	1a98 <handler_read_property+0x80>
        rpdata.object_instance = Device_Object_Instance_Number();
    1aec:	4b24      	ldr	r3, [pc, #144]	; (1b80 <handler_read_property+0x168>)
    1aee:	4798      	blx	r3
    1af0:	900e      	str	r0, [sp, #56]	; 0x38
    1af2:	e7d1      	b.n	1a98 <handler_read_property+0x80>
        error = true;
    1af4:	2601      	movs	r6, #1
    int apdu_len = -1;
    1af6:	2401      	movs	r4, #1
    1af8:	4264      	negs	r4, r4
    1afa:	e7b0      	b.n	1a5e <handler_read_property+0x46>
    bool error = true; /* assume that there is an error */
    1afc:	2601      	movs	r6, #1
    1afe:	e7ae      	b.n	1a5e <handler_read_property+0x46>
            apdu_len = abort_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1b00:	4c17      	ldr	r4, [pc, #92]	; (1b60 <handler_read_property+0x148>)
    1b02:	192c      	adds	r4, r5, r4
    1b04:	464b      	mov	r3, r9
    1b06:	7b1e      	ldrb	r6, [r3, #12]
                abort_convert_error_code(rpdata.error_code), true);
    1b08:	ab0d      	add	r3, sp, #52	; 0x34
    1b0a:	8b58      	ldrh	r0, [r3, #26]
    1b0c:	4b1d      	ldr	r3, [pc, #116]	; (1b84 <handler_read_property+0x16c>)
    1b0e:	4798      	blx	r3
            apdu_len = abort_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1b10:	b2c2      	uxtb	r2, r0
    1b12:	2301      	movs	r3, #1
    1b14:	0031      	movs	r1, r6
    1b16:	0020      	movs	r0, r4
    1b18:	4c1b      	ldr	r4, [pc, #108]	; (1b88 <handler_read_property+0x170>)
    1b1a:	47a0      	blx	r4
    1b1c:	0004      	movs	r4, r0
    1b1e:	e7a6      	b.n	1a6e <handler_read_property+0x56>
            apdu_len = bacerror_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1b20:	480f      	ldr	r0, [pc, #60]	; (1b60 <handler_read_property+0x148>)
    1b22:	1828      	adds	r0, r5, r0
    1b24:	464b      	mov	r3, r9
    1b26:	7b19      	ldrb	r1, [r3, #12]
    1b28:	aa0d      	add	r2, sp, #52	; 0x34
    1b2a:	8b13      	ldrh	r3, [r2, #24]
    1b2c:	8b52      	ldrh	r2, [r2, #26]
    1b2e:	9200      	str	r2, [sp, #0]
    1b30:	220c      	movs	r2, #12
    1b32:	4c16      	ldr	r4, [pc, #88]	; (1b8c <handler_read_property+0x174>)
    1b34:	47a0      	blx	r4
    1b36:	0004      	movs	r4, r0
    1b38:	e799      	b.n	1a6e <handler_read_property+0x56>
            apdu_len = reject_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1b3a:	4c09      	ldr	r4, [pc, #36]	; (1b60 <handler_read_property+0x148>)
    1b3c:	192c      	adds	r4, r5, r4
    1b3e:	464b      	mov	r3, r9
    1b40:	7b1e      	ldrb	r6, [r3, #12]
                reject_convert_error_code(rpdata.error_code));
    1b42:	ab0d      	add	r3, sp, #52	; 0x34
    1b44:	8b58      	ldrh	r0, [r3, #26]
    1b46:	4b12      	ldr	r3, [pc, #72]	; (1b90 <handler_read_property+0x178>)
    1b48:	4798      	blx	r3
            apdu_len = reject_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1b4a:	b2c2      	uxtb	r2, r0
    1b4c:	0031      	movs	r1, r6
    1b4e:	0020      	movs	r0, r4
    1b50:	4b10      	ldr	r3, [pc, #64]	; (1b94 <handler_read_property+0x17c>)
    1b52:	4798      	blx	r3
    1b54:	0004      	movs	r4, r0
    1b56:	e78a      	b.n	1a6e <handler_read_property+0x56>
    1b58:	00006ce1 	.word	0x00006ce1
    1b5c:	0000a69d 	.word	0x0000a69d
    1b60:	200006c8 	.word	0x200006c8
    1b64:	0000a561 	.word	0x0000a561
    1b68:	00006a95 	.word	0x00006a95
    1b6c:	0000ab8d 	.word	0x0000ab8d
    1b70:	0000aca9 	.word	0x0000aca9
    1b74:	00005265 	.word	0x00005265
    1b78:	0000ad09 	.word	0x0000ad09
    1b7c:	003fffff 	.word	0x003fffff
    1b80:	000053a5 	.word	0x000053a5
    1b84:	000012cd 	.word	0x000012cd
    1b88:	00001309 	.word	0x00001309
    1b8c:	000038ad 	.word	0x000038ad
    1b90:	0000ab39 	.word	0x0000ab39
    1b94:	0000ab79 	.word	0x0000ab79

00001b98 <RPM_Object_Property>:

static BACNET_PROPERTY_ID RPM_Object_Property(
    struct special_property_list_t *pPropertyList,
    BACNET_PROPERTY_ID special_property,
    unsigned index)
{
    1b98:	b530      	push	{r4, r5, lr}
    int property = -1; /* return value */
    unsigned required, optional, proprietary;

    required = pPropertyList->Required.count;
    1b9a:	6844      	ldr	r4, [r0, #4]
    optional = pPropertyList->Optional.count;
    1b9c:	68c3      	ldr	r3, [r0, #12]
    proprietary = pPropertyList->Proprietary.count;
    1b9e:	6945      	ldr	r5, [r0, #20]
    if (special_property == PROP_ALL) {
    1ba0:	2908      	cmp	r1, #8
    1ba2:	d006      	beq.n	1bb2 <RPM_Object_Property+0x1a>
            property = pPropertyList->Optional.pList[index];
        } else if (index < (required + optional + proprietary)) {
            index -= (required + optional);
            property = pPropertyList->Proprietary.pList[index];
        }
    } else if (special_property == PROP_REQUIRED) {
    1ba4:	2969      	cmp	r1, #105	; 0x69
    1ba6:	d01a      	beq.n	1bde <RPM_Object_Property+0x46>
        if (index < required) {
            property = pPropertyList->Required.pList[index];
        }
    } else if (special_property == PROP_OPTIONAL) {
    1ba8:	2950      	cmp	r1, #80	; 0x50
    1baa:	d01e      	beq.n	1bea <RPM_Object_Property+0x52>
    int property = -1; /* return value */
    1bac:	2001      	movs	r0, #1
    1bae:	4240      	negs	r0, r0
            property = pPropertyList->Optional.pList[index];
        }
    }

    return (BACNET_PROPERTY_ID)property;
}
    1bb0:	bd30      	pop	{r4, r5, pc}
        if (index < required) {
    1bb2:	4294      	cmp	r4, r2
    1bb4:	d80a      	bhi.n	1bcc <RPM_Object_Property+0x34>
        } else if (index < (required + optional)) {
    1bb6:	18e3      	adds	r3, r4, r3
    1bb8:	429a      	cmp	r2, r3
    1bba:	d30b      	bcc.n	1bd4 <RPM_Object_Property+0x3c>
        } else if (index < (required + optional + proprietary)) {
    1bbc:	18ed      	adds	r5, r5, r3
    1bbe:	42aa      	cmp	r2, r5
    1bc0:	d219      	bcs.n	1bf6 <RPM_Object_Property+0x5e>
            index -= (required + optional);
    1bc2:	1ad2      	subs	r2, r2, r3
            property = pPropertyList->Proprietary.pList[index];
    1bc4:	6903      	ldr	r3, [r0, #16]
    1bc6:	0092      	lsls	r2, r2, #2
    1bc8:	5898      	ldr	r0, [r3, r2]
    1bca:	e7f1      	b.n	1bb0 <RPM_Object_Property+0x18>
            property = pPropertyList->Required.pList[index];
    1bcc:	6803      	ldr	r3, [r0, #0]
    1bce:	0092      	lsls	r2, r2, #2
    1bd0:	5898      	ldr	r0, [r3, r2]
    1bd2:	e7ed      	b.n	1bb0 <RPM_Object_Property+0x18>
            index -= required;
    1bd4:	1b12      	subs	r2, r2, r4
            property = pPropertyList->Optional.pList[index];
    1bd6:	6883      	ldr	r3, [r0, #8]
    1bd8:	0092      	lsls	r2, r2, #2
    1bda:	5898      	ldr	r0, [r3, r2]
    1bdc:	e7e8      	b.n	1bb0 <RPM_Object_Property+0x18>
        if (index < required) {
    1bde:	4294      	cmp	r4, r2
    1be0:	d90c      	bls.n	1bfc <RPM_Object_Property+0x64>
            property = pPropertyList->Required.pList[index];
    1be2:	6803      	ldr	r3, [r0, #0]
    1be4:	0092      	lsls	r2, r2, #2
    1be6:	5898      	ldr	r0, [r3, r2]
    1be8:	e7e2      	b.n	1bb0 <RPM_Object_Property+0x18>
        if (index < optional) {
    1bea:	4293      	cmp	r3, r2
    1bec:	d909      	bls.n	1c02 <RPM_Object_Property+0x6a>
            property = pPropertyList->Optional.pList[index];
    1bee:	6883      	ldr	r3, [r0, #8]
    1bf0:	0092      	lsls	r2, r2, #2
    1bf2:	5898      	ldr	r0, [r3, r2]
    1bf4:	e7dc      	b.n	1bb0 <RPM_Object_Property+0x18>
    int property = -1; /* return value */
    1bf6:	2001      	movs	r0, #1
    1bf8:	4240      	negs	r0, r0
    1bfa:	e7d9      	b.n	1bb0 <RPM_Object_Property+0x18>
    1bfc:	2001      	movs	r0, #1
    1bfe:	4240      	negs	r0, r0
    1c00:	e7d6      	b.n	1bb0 <RPM_Object_Property+0x18>
    1c02:	2001      	movs	r0, #1
    1c04:	4240      	negs	r0, r0
    1c06:	e7d3      	b.n	1bb0 <RPM_Object_Property+0x18>

00001c08 <RPM_Object_Property_Count>:
    struct special_property_list_t *pPropertyList,
    BACNET_PROPERTY_ID special_property)
{
    unsigned count = 0; /* return value */

    if (special_property == PROP_ALL) {
    1c08:	2908      	cmp	r1, #8
    1c0a:	d005      	beq.n	1c18 <RPM_Object_Property_Count+0x10>
        count = pPropertyList->Required.count + pPropertyList->Optional.count +
            pPropertyList->Proprietary.count;
    } else if (special_property == PROP_REQUIRED) {
    1c0c:	2969      	cmp	r1, #105	; 0x69
    1c0e:	d00a      	beq.n	1c26 <RPM_Object_Property_Count+0x1e>
        count = pPropertyList->Required.count;
    } else if (special_property == PROP_OPTIONAL) {
    1c10:	2950      	cmp	r1, #80	; 0x50
    1c12:	d00a      	beq.n	1c2a <RPM_Object_Property_Count+0x22>
    unsigned count = 0; /* return value */
    1c14:	2000      	movs	r0, #0
        count = pPropertyList->Optional.count;
    }

    return count;
}
    1c16:	4770      	bx	lr
        count = pPropertyList->Required.count + pPropertyList->Optional.count +
    1c18:	6843      	ldr	r3, [r0, #4]
    1c1a:	68c2      	ldr	r2, [r0, #12]
    1c1c:	4694      	mov	ip, r2
    1c1e:	4463      	add	r3, ip
            pPropertyList->Proprietary.count;
    1c20:	6940      	ldr	r0, [r0, #20]
        count = pPropertyList->Required.count + pPropertyList->Optional.count +
    1c22:	1818      	adds	r0, r3, r0
    1c24:	e7f7      	b.n	1c16 <RPM_Object_Property_Count+0xe>
        count = pPropertyList->Required.count;
    1c26:	6840      	ldr	r0, [r0, #4]
    1c28:	e7f5      	b.n	1c16 <RPM_Object_Property_Count+0xe>
        count = pPropertyList->Optional.count;
    1c2a:	68c0      	ldr	r0, [r0, #12]
    1c2c:	e7f3      	b.n	1c16 <RPM_Object_Property_Count+0xe>
	...

00001c30 <RPM_Encode_Property>:

/** Encode the RPM property returning the length of the encoding,
   or 0 if there is no room to fit the encoding.  */
static int RPM_Encode_Property(
    uint8_t *apdu, uint16_t offset, uint16_t max_apdu, BACNET_RPM_DATA *rpmdata)
{
    1c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c32:	46ce      	mov	lr, r9
    1c34:	b500      	push	{lr}
    1c36:	b08c      	sub	sp, #48	; 0x30
    1c38:	9003      	str	r0, [sp, #12]
    1c3a:	000d      	movs	r5, r1
    1c3c:	4691      	mov	r9, r2
    1c3e:	001c      	movs	r4, r3
    int len = 0;
    size_t copy_len = 0;
    int apdu_len = 0;
    BACNET_READ_PROPERTY_DATA rpdata;

    len = rpm_ack_encode_apdu_object_property(
    1c40:	4f2f      	ldr	r7, [pc, #188]	; (1d00 <RPM_Encode_Property+0xd0>)
    1c42:	68da      	ldr	r2, [r3, #12]
    1c44:	6899      	ldr	r1, [r3, #8]
    1c46:	0038      	movs	r0, r7
    1c48:	4b2e      	ldr	r3, [pc, #184]	; (1d04 <RPM_Encode_Property+0xd4>)
    1c4a:	4798      	blx	r3
    1c4c:	0006      	movs	r6, r0
        &Temp_Buf[0], rpmdata->object_property, rpmdata->array_index);
    copy_len = memcopy(&apdu[0], &Temp_Buf[0], offset, len, max_apdu);
    1c4e:	464b      	mov	r3, r9
    1c50:	9300      	str	r3, [sp, #0]
    1c52:	0003      	movs	r3, r0
    1c54:	002a      	movs	r2, r5
    1c56:	0039      	movs	r1, r7
    1c58:	9803      	ldr	r0, [sp, #12]
    1c5a:	4f2b      	ldr	r7, [pc, #172]	; (1d08 <RPM_Encode_Property+0xd8>)
    1c5c:	47b8      	blx	r7
    if (copy_len == 0) {
    1c5e:	2800      	cmp	r0, #0
    1c60:	d029      	beq.n	1cb6 <RPM_Encode_Property+0x86>
        rpmdata->error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
        return BACNET_STATUS_ABORT;
    }
    apdu_len += len;
    rpdata.error_class = ERROR_CLASS_OBJECT;
    1c62:	a805      	add	r0, sp, #20
    1c64:	2301      	movs	r3, #1
    1c66:	8303      	strh	r3, [r0, #24]
    rpdata.error_code = ERROR_CODE_UNKNOWN_OBJECT;
    1c68:	331e      	adds	r3, #30
    1c6a:	8343      	strh	r3, [r0, #26]
    rpdata.object_type = rpmdata->object_type;
    1c6c:	8823      	ldrh	r3, [r4, #0]
    1c6e:	8003      	strh	r3, [r0, #0]
    rpdata.object_instance = rpmdata->object_instance;
    1c70:	6863      	ldr	r3, [r4, #4]
    1c72:	6043      	str	r3, [r0, #4]
    rpdata.object_property = rpmdata->object_property;
    1c74:	68a3      	ldr	r3, [r4, #8]
    1c76:	6083      	str	r3, [r0, #8]
    rpdata.array_index = rpmdata->array_index;
    1c78:	68e3      	ldr	r3, [r4, #12]
    1c7a:	60c3      	str	r3, [r0, #12]
    rpdata.application_data = &Temp_Buf[0];
    1c7c:	4b20      	ldr	r3, [pc, #128]	; (1d00 <RPM_Encode_Property+0xd0>)
    1c7e:	6103      	str	r3, [r0, #16]
    rpdata.application_data_len = sizeof(Temp_Buf);
    1c80:	23f0      	movs	r3, #240	; 0xf0
    1c82:	005b      	lsls	r3, r3, #1
    1c84:	6143      	str	r3, [r0, #20]
    len = Device_Read_Property(&rpdata);
    1c86:	4b21      	ldr	r3, [pc, #132]	; (1d0c <RPM_Encode_Property+0xdc>)
    1c88:	4798      	blx	r3
    if (len < 0) {
    1c8a:	2800      	cmp	r0, #0
    1c8c:	db17      	blt.n	1cbe <RPM_Encode_Property+0x8e>

        if (copy_len == 0) {
            rpmdata->error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
            return BACNET_STATUS_ABORT;
        }
    } else if ((offset + apdu_len + 1 + len + 1) < max_apdu) {
    1c8e:	19ad      	adds	r5, r5, r6
    1c90:	1c6b      	adds	r3, r5, #1
    1c92:	18c3      	adds	r3, r0, r3
    1c94:	3301      	adds	r3, #1
    1c96:	454b      	cmp	r3, r9
    1c98:	da2d      	bge.n	1cf6 <RPM_Encode_Property+0xc6>
        /* enough room to fit the property value and tags */
        len = rpm_ack_encode_apdu_object_property_value(
    1c9a:	9b03      	ldr	r3, [sp, #12]
    1c9c:	469c      	mov	ip, r3
    1c9e:	4465      	add	r5, ip
    1ca0:	0002      	movs	r2, r0
    1ca2:	4917      	ldr	r1, [pc, #92]	; (1d00 <RPM_Encode_Property+0xd0>)
    1ca4:	0028      	movs	r0, r5
    1ca6:	4b1a      	ldr	r3, [pc, #104]	; (1d10 <RPM_Encode_Property+0xe0>)
    1ca8:	4798      	blx	r3
    1caa:	0007      	movs	r7, r0
    } else {
        /* not enough room - abort! */
        rpmdata->error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
        return BACNET_STATUS_ABORT;
    }
    apdu_len += len;
    1cac:	19b8      	adds	r0, r7, r6

    return apdu_len;
}
    1cae:	b00c      	add	sp, #48	; 0x30
    1cb0:	bc04      	pop	{r2}
    1cb2:	4691      	mov	r9, r2
    1cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rpmdata->error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
    1cb6:	2336      	movs	r3, #54	; 0x36
    1cb8:	8263      	strh	r3, [r4, #18]
        return BACNET_STATUS_ABORT;
    1cba:	3802      	subs	r0, #2
    1cbc:	e7f7      	b.n	1cae <RPM_Encode_Property+0x7e>
        if ((len == BACNET_STATUS_ABORT) || (len == BACNET_STATUS_REJECT)) {
    1cbe:	1cc3      	adds	r3, r0, #3
    1cc0:	2b01      	cmp	r3, #1
    1cc2:	d914      	bls.n	1cee <RPM_Encode_Property+0xbe>
        len = rpm_ack_encode_apdu_object_property_error(
    1cc4:	ab05      	add	r3, sp, #20
    1cc6:	8b19      	ldrh	r1, [r3, #24]
    1cc8:	8b5a      	ldrh	r2, [r3, #26]
    1cca:	480d      	ldr	r0, [pc, #52]	; (1d00 <RPM_Encode_Property+0xd0>)
    1ccc:	4b11      	ldr	r3, [pc, #68]	; (1d14 <RPM_Encode_Property+0xe4>)
    1cce:	4798      	blx	r3
    1cd0:	0007      	movs	r7, r0
            memcopy(&apdu[0], &Temp_Buf[0], offset + apdu_len, len, max_apdu);
    1cd2:	19aa      	adds	r2, r5, r6
        copy_len =
    1cd4:	464b      	mov	r3, r9
    1cd6:	9300      	str	r3, [sp, #0]
    1cd8:	0003      	movs	r3, r0
    1cda:	4909      	ldr	r1, [pc, #36]	; (1d00 <RPM_Encode_Property+0xd0>)
    1cdc:	9803      	ldr	r0, [sp, #12]
    1cde:	4d0a      	ldr	r5, [pc, #40]	; (1d08 <RPM_Encode_Property+0xd8>)
    1ce0:	47a8      	blx	r5
        if (copy_len == 0) {
    1ce2:	2800      	cmp	r0, #0
    1ce4:	d1e2      	bne.n	1cac <RPM_Encode_Property+0x7c>
            rpmdata->error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
    1ce6:	2336      	movs	r3, #54	; 0x36
    1ce8:	8263      	strh	r3, [r4, #18]
            return BACNET_STATUS_ABORT;
    1cea:	3802      	subs	r0, #2
    1cec:	e7df      	b.n	1cae <RPM_Encode_Property+0x7e>
            rpmdata->error_code = rpdata.error_code;
    1cee:	ab05      	add	r3, sp, #20
    1cf0:	8b5b      	ldrh	r3, [r3, #26]
    1cf2:	8263      	strh	r3, [r4, #18]
            return len; /* Ie, Abort */
    1cf4:	e7db      	b.n	1cae <RPM_Encode_Property+0x7e>
        rpmdata->error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
    1cf6:	2336      	movs	r3, #54	; 0x36
    1cf8:	8263      	strh	r3, [r4, #18]
        return BACNET_STATUS_ABORT;
    1cfa:	2002      	movs	r0, #2
    1cfc:	4240      	negs	r0, r0
    1cfe:	e7d6      	b.n	1cae <RPM_Encode_Property+0x7e>
    1d00:	200004e8 	.word	0x200004e8
    1d04:	0000aed9 	.word	0x0000aed9
    1d08:	000098fd 	.word	0x000098fd
    1d0c:	00005265 	.word	0x00005265
    1d10:	0000af11 	.word	0x0000af11
    1d14:	0000af59 	.word	0x0000af59

00001d18 <handler_read_property_multiple>:
 */
void handler_read_property_multiple(uint8_t *service_request,
    uint16_t service_len,
    BACNET_ADDRESS *src,
    BACNET_CONFIRMED_SERVICE_DATA *service_data)
{
    1d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d1a:	46de      	mov	lr, fp
    1d1c:	4657      	mov	r7, sl
    1d1e:	464e      	mov	r6, r9
    1d20:	4645      	mov	r5, r8
    1d22:	b5e0      	push	{r5, r6, r7, lr}
    1d24:	b09d      	sub	sp, #116	; 0x74
    1d26:	4680      	mov	r8, r0
    1d28:	9107      	str	r1, [sp, #28]
    1d2a:	0014      	movs	r4, r2
    1d2c:	9205      	str	r2, [sp, #20]
    1d2e:	001d      	movs	r5, r3
    1d30:	9306      	str	r3, [sp, #24]

    /* jps_debug - see if we are utilizing all the buffer */
    /* memset(&Handler_Transmit_Buffer[0], 0xff,
     * sizeof(Handler_Transmit_Buffer)); */
    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    1d32:	a814      	add	r0, sp, #80	; 0x50
    1d34:	4ba7      	ldr	r3, [pc, #668]	; (1fd4 <handler_read_property_multiple+0x2bc>)
    1d36:	4798      	blx	r3
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    1d38:	2200      	movs	r2, #0
    1d3a:	2100      	movs	r1, #0
    1d3c:	a819      	add	r0, sp, #100	; 0x64
    1d3e:	4ba6      	ldr	r3, [pc, #664]	; (1fd8 <handler_read_property_multiple+0x2c0>)
    1d40:	4798      	blx	r3
    npdu_len = npdu_encode_pdu(
    1d42:	ab19      	add	r3, sp, #100	; 0x64
    1d44:	aa14      	add	r2, sp, #80	; 0x50
    1d46:	0021      	movs	r1, r4
    1d48:	48a4      	ldr	r0, [pc, #656]	; (1fdc <handler_read_property_multiple+0x2c4>)
    1d4a:	4ca5      	ldr	r4, [pc, #660]	; (1fe0 <handler_read_property_multiple+0x2c8>)
    1d4c:	47a0      	blx	r4
    1d4e:	9004      	str	r0, [sp, #16]
        &Handler_Transmit_Buffer[0], src, &my_address, &npdu_data);
    if (service_data->segmented_message) {
    1d50:	782b      	ldrb	r3, [r5, #0]
    1d52:	2b00      	cmp	r3, #0
    1d54:	d01e      	beq.n	1d94 <handler_read_property_multiple+0x7c>
        rpmdata.error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
    1d56:	2236      	movs	r2, #54	; 0x36
    1d58:	ab0f      	add	r3, sp, #60	; 0x3c
    1d5a:	825a      	strh	r2, [r3, #18]
        error = BACNET_STATUS_ABORT;
    1d5c:	2002      	movs	r0, #2
    1d5e:	4240      	negs	r0, r0
    int apdu_len = 0;
    1d60:	2500      	movs	r5, #0
#endif
        goto RPM_FAILURE;
    }

RPM_FAILURE:
    if (error) {
    1d62:	2800      	cmp	r0, #0
    1d64:	d008      	beq.n	1d78 <handler_read_property_multiple+0x60>
        if (error == BACNET_STATUS_ABORT) {
    1d66:	1c83      	adds	r3, r0, #2
    1d68:	d100      	bne.n	1d6c <handler_read_property_multiple+0x54>
    1d6a:	e100      	b.n	1f6e <handler_read_property_multiple+0x256>
                service_data->invoke_id,
                abort_convert_error_code(rpmdata.error_code), true);
#if PRINT_ENABLED
            fprintf(stderr, "RPM: Sending Abort!\n");
#endif
        } else if (error == BACNET_STATUS_ERROR) {
    1d6c:	1c43      	adds	r3, r0, #1
    1d6e:	d100      	bne.n	1d72 <handler_read_property_multiple+0x5a>
    1d70:	e10f      	b.n	1f92 <handler_read_property_multiple+0x27a>
                service_data->invoke_id, SERVICE_CONFIRMED_READ_PROP_MULTIPLE,
                rpmdata.error_class, rpmdata.error_code);
#if PRINT_ENABLED
            fprintf(stderr, "RPM: Sending Error!\n");
#endif
        } else if (error == BACNET_STATUS_REJECT) {
    1d72:	1cc3      	adds	r3, r0, #3
    1d74:	d100      	bne.n	1d78 <handler_read_property_multiple+0x60>
    1d76:	e11b      	b.n	1fb0 <handler_read_property_multiple+0x298>
            fprintf(stderr, "RPM: Sending Reject!\n");
#endif
        }
    }

    pdu_len = apdu_len + npdu_len;
    1d78:	9b04      	ldr	r3, [sp, #16]
    1d7a:	18eb      	adds	r3, r5, r3
    bytes_sent = datalink_send_pdu(
    1d7c:	4a97      	ldr	r2, [pc, #604]	; (1fdc <handler_read_property_multiple+0x2c4>)
    1d7e:	a919      	add	r1, sp, #100	; 0x64
    1d80:	9805      	ldr	r0, [sp, #20]
    1d82:	4c98      	ldr	r4, [pc, #608]	; (1fe4 <handler_read_property_multiple+0x2cc>)
    1d84:	47a0      	blx	r4
    if (bytes_sent <= 0) {
#if PRINT_ENABLED
        fprintf(stderr, "RPM: Failed to send PDU (%s)!\n", strerror(errno));
#endif
    }
}
    1d86:	b01d      	add	sp, #116	; 0x74
    1d88:	bc3c      	pop	{r2, r3, r4, r5}
    1d8a:	4690      	mov	r8, r2
    1d8c:	4699      	mov	r9, r3
    1d8e:	46a2      	mov	sl, r4
    1d90:	46ab      	mov	fp, r5
    1d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    apdu_len = rpm_ack_encode_apdu_init(
    1d94:	4b91      	ldr	r3, [pc, #580]	; (1fdc <handler_read_property_multiple+0x2c4>)
    1d96:	9a04      	ldr	r2, [sp, #16]
    1d98:	4694      	mov	ip, r2
    1d9a:	4463      	add	r3, ip
    1d9c:	9302      	str	r3, [sp, #8]
    1d9e:	9a06      	ldr	r2, [sp, #24]
    1da0:	7b11      	ldrb	r1, [r2, #12]
    1da2:	0018      	movs	r0, r3
    1da4:	4b90      	ldr	r3, [pc, #576]	; (1fe8 <handler_read_property_multiple+0x2d0>)
    1da6:	4798      	blx	r3
    1da8:	0005      	movs	r5, r0
    uint16_t decode_len = 0;
    1daa:	2700      	movs	r7, #0
    1dac:	003c      	movs	r4, r7
        len = rpm_decode_object_id(
    1dae:	4643      	mov	r3, r8
    1db0:	1918      	adds	r0, r3, r4
            &service_request[decode_len], service_len - decode_len, &rpmdata);
    1db2:	9a07      	ldr	r2, [sp, #28]
    1db4:	4691      	mov	r9, r2
    1db6:	1b11      	subs	r1, r2, r4
        len = rpm_decode_object_id(
    1db8:	aa0f      	add	r2, sp, #60	; 0x3c
    1dba:	4b8c      	ldr	r3, [pc, #560]	; (1fec <handler_read_property_multiple+0x2d4>)
    1dbc:	4798      	blx	r3
        if (len >= 0) {
    1dbe:	2800      	cmp	r0, #0
    1dc0:	dbcf      	blt.n	1d62 <handler_read_property_multiple+0x4a>
            decode_len += len;
    1dc2:	1824      	adds	r4, r4, r0
    1dc4:	b2a4      	uxth	r4, r4
        if ((rpmdata.object_type == OBJECT_DEVICE) &&
    1dc6:	ab0f      	add	r3, sp, #60	; 0x3c
    1dc8:	881b      	ldrh	r3, [r3, #0]
    1dca:	2b08      	cmp	r3, #8
    1dcc:	d014      	beq.n	1df8 <handler_read_property_multiple+0xe0>
        len = rpm_ack_encode_apdu_object_begin(&Temp_Buf[0], &rpmdata);
    1dce:	4e88      	ldr	r6, [pc, #544]	; (1ff0 <handler_read_property_multiple+0x2d8>)
    1dd0:	a90f      	add	r1, sp, #60	; 0x3c
    1dd2:	0030      	movs	r0, r6
    1dd4:	4b87      	ldr	r3, [pc, #540]	; (1ff4 <handler_read_property_multiple+0x2dc>)
    1dd6:	4798      	blx	r3
    1dd8:	0003      	movs	r3, r0
        copy_len = memcopy(&Handler_Transmit_Buffer[npdu_len], &Temp_Buf[0],
    1dda:	22f0      	movs	r2, #240	; 0xf0
    1ddc:	0052      	lsls	r2, r2, #1
    1dde:	9200      	str	r2, [sp, #0]
    1de0:	002a      	movs	r2, r5
    1de2:	0031      	movs	r1, r6
    1de4:	9802      	ldr	r0, [sp, #8]
    1de6:	4e84      	ldr	r6, [pc, #528]	; (1ff8 <handler_read_property_multiple+0x2e0>)
    1de8:	47b0      	blx	r6
    1dea:	b283      	uxth	r3, r0
        if (copy_len == 0) {
    1dec:	2b00      	cmp	r3, #0
    1dee:	d00b      	beq.n	1e08 <handler_read_property_multiple+0xf0>
        apdu_len += copy_len;
    1df0:	0400      	lsls	r0, r0, #16
    1df2:	0c00      	lsrs	r0, r0, #16
    1df4:	182d      	adds	r5, r5, r0
    1df6:	e03e      	b.n	1e76 <handler_read_property_multiple+0x15e>
        if ((rpmdata.object_type == OBJECT_DEVICE) &&
    1df8:	4b80      	ldr	r3, [pc, #512]	; (1ffc <handler_read_property_multiple+0x2e4>)
    1dfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1dfc:	429a      	cmp	r2, r3
    1dfe:	d1e6      	bne.n	1dce <handler_read_property_multiple+0xb6>
            rpmdata.object_instance = Device_Object_Instance_Number();
    1e00:	4b7f      	ldr	r3, [pc, #508]	; (2000 <STACK_SIZE>)
    1e02:	4798      	blx	r3
    1e04:	9010      	str	r0, [sp, #64]	; 0x40
    1e06:	e7e2      	b.n	1dce <handler_read_property_multiple+0xb6>
            rpmdata.error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
    1e08:	2236      	movs	r2, #54	; 0x36
    1e0a:	ab0f      	add	r3, sp, #60	; 0x3c
    1e0c:	825a      	strh	r2, [r3, #18]
            error = BACNET_STATUS_ABORT;
    1e0e:	2002      	movs	r0, #2
    1e10:	4240      	negs	r0, r0
            goto RPM_FAILURE;
    1e12:	e7a6      	b.n	1d62 <handler_read_property_multiple+0x4a>
                if (rpmdata.array_index != BACNET_ARRAY_ALL) {
    1e14:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e16:	1c53      	adds	r3, r2, #1
    1e18:	d056      	beq.n	1ec8 <handler_read_property_multiple+0x1b0>
                    len = rpm_ack_encode_apdu_object_property(&Temp_Buf[0],
    1e1a:	4e75      	ldr	r6, [pc, #468]	; (1ff0 <handler_read_property_multiple+0x2d8>)
    1e1c:	0039      	movs	r1, r7
    1e1e:	0030      	movs	r0, r6
    1e20:	4b78      	ldr	r3, [pc, #480]	; (2004 <STACK_SIZE+0x4>)
    1e22:	4798      	blx	r3
    1e24:	0007      	movs	r7, r0
                    copy_len = memcopy(&Handler_Transmit_Buffer[npdu_len],
    1e26:	23f0      	movs	r3, #240	; 0xf0
    1e28:	005b      	lsls	r3, r3, #1
    1e2a:	9300      	str	r3, [sp, #0]
    1e2c:	0003      	movs	r3, r0
    1e2e:	002a      	movs	r2, r5
    1e30:	0031      	movs	r1, r6
    1e32:	9802      	ldr	r0, [sp, #8]
    1e34:	4e70      	ldr	r6, [pc, #448]	; (1ff8 <handler_read_property_multiple+0x2e0>)
    1e36:	47b0      	blx	r6
    1e38:	b280      	uxth	r0, r0
                    if (copy_len == 0) {
    1e3a:	2800      	cmp	r0, #0
    1e3c:	d03a      	beq.n	1eb4 <handler_read_property_multiple+0x19c>
                    apdu_len += len;
    1e3e:	19ed      	adds	r5, r5, r7
                    len = rpm_ack_encode_apdu_object_property_error(
    1e40:	4e6b      	ldr	r6, [pc, #428]	; (1ff0 <handler_read_property_multiple+0x2d8>)
    1e42:	2232      	movs	r2, #50	; 0x32
    1e44:	2102      	movs	r1, #2
    1e46:	0030      	movs	r0, r6
    1e48:	4b6f      	ldr	r3, [pc, #444]	; (2008 <STACK_SIZE+0x8>)
    1e4a:	4798      	blx	r3
    1e4c:	0007      	movs	r7, r0
                    copy_len = memcopy(&Handler_Transmit_Buffer[npdu_len],
    1e4e:	23f0      	movs	r3, #240	; 0xf0
    1e50:	005b      	lsls	r3, r3, #1
    1e52:	9300      	str	r3, [sp, #0]
    1e54:	0003      	movs	r3, r0
    1e56:	002a      	movs	r2, r5
    1e58:	0031      	movs	r1, r6
    1e5a:	9802      	ldr	r0, [sp, #8]
    1e5c:	4e66      	ldr	r6, [pc, #408]	; (1ff8 <handler_read_property_multiple+0x2e0>)
    1e5e:	47b0      	blx	r6
    1e60:	b280      	uxth	r0, r0
                    if (copy_len == 0) {
    1e62:	2800      	cmp	r0, #0
    1e64:	d02b      	beq.n	1ebe <handler_read_property_multiple+0x1a6>
                    apdu_len += len;
    1e66:	19ed      	adds	r5, r5, r7
            if (decode_is_closing_tag_number(&service_request[decode_len], 1)) {
    1e68:	4643      	mov	r3, r8
    1e6a:	1918      	adds	r0, r3, r4
    1e6c:	2101      	movs	r1, #1
    1e6e:	4b67      	ldr	r3, [pc, #412]	; (200c <STACK_SIZE+0xc>)
    1e70:	4798      	blx	r3
    1e72:	2800      	cmp	r0, #0
    1e74:	d14f      	bne.n	1f16 <handler_read_property_multiple+0x1fe>
            len = rpm_decode_object_property(&service_request[decode_len],
    1e76:	4643      	mov	r3, r8
    1e78:	1918      	adds	r0, r3, r4
                service_len - decode_len, &rpmdata);
    1e7a:	464b      	mov	r3, r9
    1e7c:	1b19      	subs	r1, r3, r4
            len = rpm_decode_object_property(&service_request[decode_len],
    1e7e:	aa0f      	add	r2, sp, #60	; 0x3c
    1e80:	4b63      	ldr	r3, [pc, #396]	; (2010 <STACK_SIZE+0x10>)
    1e82:	4798      	blx	r3
            if (len < 0) {
    1e84:	2800      	cmp	r0, #0
    1e86:	da00      	bge.n	1e8a <handler_read_property_multiple+0x172>
    1e88:	e76b      	b.n	1d62 <handler_read_property_multiple+0x4a>
            decode_len += len;
    1e8a:	1824      	adds	r4, r4, r0
    1e8c:	b2a4      	uxth	r4, r4
            if ((rpmdata.object_property == PROP_ALL) ||
    1e8e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    1e90:	2f08      	cmp	r7, #8
    1e92:	d0bf      	beq.n	1e14 <handler_read_property_multiple+0xfc>
    1e94:	2f69      	cmp	r7, #105	; 0x69
    1e96:	d0bd      	beq.n	1e14 <handler_read_property_multiple+0xfc>
                (rpmdata.object_property == PROP_REQUIRED) ||
    1e98:	2f50      	cmp	r7, #80	; 0x50
    1e9a:	d0bb      	beq.n	1e14 <handler_read_property_multiple+0xfc>
                len = RPM_Encode_Property(&Handler_Transmit_Buffer[npdu_len],
    1e9c:	b2a9      	uxth	r1, r5
    1e9e:	ab0f      	add	r3, sp, #60	; 0x3c
    1ea0:	22f0      	movs	r2, #240	; 0xf0
    1ea2:	0052      	lsls	r2, r2, #1
    1ea4:	9802      	ldr	r0, [sp, #8]
    1ea6:	4e5b      	ldr	r6, [pc, #364]	; (2014 <STACK_SIZE+0x14>)
    1ea8:	47b0      	blx	r6
                if (len > 0) {
    1eaa:	2800      	cmp	r0, #0
    1eac:	dc00      	bgt.n	1eb0 <handler_read_property_multiple+0x198>
    1eae:	e758      	b.n	1d62 <handler_read_property_multiple+0x4a>
                    apdu_len += len;
    1eb0:	182d      	adds	r5, r5, r0
    1eb2:	e7d9      	b.n	1e68 <handler_read_property_multiple+0x150>
                        rpmdata.error_code =
    1eb4:	2236      	movs	r2, #54	; 0x36
    1eb6:	ab0f      	add	r3, sp, #60	; 0x3c
    1eb8:	825a      	strh	r2, [r3, #18]
                        error = BACNET_STATUS_ABORT;
    1eba:	3802      	subs	r0, #2
                        goto RPM_FAILURE;
    1ebc:	e751      	b.n	1d62 <handler_read_property_multiple+0x4a>
                        rpmdata.error_code =
    1ebe:	2236      	movs	r2, #54	; 0x36
    1ec0:	ab0f      	add	r3, sp, #60	; 0x3c
    1ec2:	825a      	strh	r2, [r3, #18]
                        error = BACNET_STATUS_ABORT;
    1ec4:	3802      	subs	r0, #2
                        goto RPM_FAILURE;
    1ec6:	e74c      	b.n	1d62 <handler_read_property_multiple+0x4a>
                    Device_Objects_Property_List(rpmdata.object_type,
    1ec8:	ab0f      	add	r3, sp, #60	; 0x3c
    1eca:	9910      	ldr	r1, [sp, #64]	; 0x40
    1ecc:	8818      	ldrh	r0, [r3, #0]
    1ece:	aa09      	add	r2, sp, #36	; 0x24
    1ed0:	4b51      	ldr	r3, [pc, #324]	; (2018 <STACK_SIZE+0x18>)
    1ed2:	4798      	blx	r3
                    property_count = RPM_Object_Property_Count(
    1ed4:	0039      	movs	r1, r7
    1ed6:	a809      	add	r0, sp, #36	; 0x24
    1ed8:	4b50      	ldr	r3, [pc, #320]	; (201c <STACK_SIZE+0x1c>)
    1eda:	4798      	blx	r3
                    if (property_count == 0) {
    1edc:	2800      	cmp	r0, #0
    1ede:	d0c3      	beq.n	1e68 <handler_read_property_multiple+0x150>
    1ee0:	2600      	movs	r6, #0
    1ee2:	46a2      	mov	sl, r4
    1ee4:	9703      	str	r7, [sp, #12]
    1ee6:	0004      	movs	r4, r0
                        for (index = 0; index < property_count; index++) {
    1ee8:	42a6      	cmp	r6, r4
    1eea:	d212      	bcs.n	1f12 <handler_read_property_multiple+0x1fa>
                            rpmdata.object_property = RPM_Object_Property(
    1eec:	0032      	movs	r2, r6
    1eee:	9903      	ldr	r1, [sp, #12]
    1ef0:	a809      	add	r0, sp, #36	; 0x24
    1ef2:	4b4b      	ldr	r3, [pc, #300]	; (2020 <STACK_SIZE+0x20>)
    1ef4:	4798      	blx	r3
    1ef6:	9011      	str	r0, [sp, #68]	; 0x44
                            len = RPM_Encode_Property(
    1ef8:	b2a9      	uxth	r1, r5
    1efa:	ab0f      	add	r3, sp, #60	; 0x3c
    1efc:	22f0      	movs	r2, #240	; 0xf0
    1efe:	0052      	lsls	r2, r2, #1
    1f00:	9802      	ldr	r0, [sp, #8]
    1f02:	4f44      	ldr	r7, [pc, #272]	; (2014 <STACK_SIZE+0x14>)
    1f04:	47b8      	blx	r7
                            if (len > 0) {
    1f06:	2800      	cmp	r0, #0
    1f08:	dc00      	bgt.n	1f0c <handler_read_property_multiple+0x1f4>
    1f0a:	e72a      	b.n	1d62 <handler_read_property_multiple+0x4a>
                                apdu_len += len;
    1f0c:	182d      	adds	r5, r5, r0
                        for (index = 0; index < property_count; index++) {
    1f0e:	3601      	adds	r6, #1
    1f10:	e7ea      	b.n	1ee8 <handler_read_property_multiple+0x1d0>
    1f12:	4654      	mov	r4, sl
    1f14:	e7a8      	b.n	1e68 <handler_read_property_multiple+0x150>
                decode_len++;
    1f16:	3401      	adds	r4, #1
    1f18:	b2a4      	uxth	r4, r4
                len = rpm_ack_encode_apdu_object_end(&Temp_Buf[0]);
    1f1a:	4e35      	ldr	r6, [pc, #212]	; (1ff0 <handler_read_property_multiple+0x2d8>)
    1f1c:	0030      	movs	r0, r6
    1f1e:	4b41      	ldr	r3, [pc, #260]	; (2024 <STACK_SIZE+0x24>)
    1f20:	4798      	blx	r3
    1f22:	0003      	movs	r3, r0
                copy_len = memcopy(&Handler_Transmit_Buffer[npdu_len],
    1f24:	22f0      	movs	r2, #240	; 0xf0
    1f26:	0052      	lsls	r2, r2, #1
    1f28:	9200      	str	r2, [sp, #0]
    1f2a:	002a      	movs	r2, r5
    1f2c:	0031      	movs	r1, r6
    1f2e:	9802      	ldr	r0, [sp, #8]
    1f30:	4e31      	ldr	r6, [pc, #196]	; (1ff8 <handler_read_property_multiple+0x2e0>)
    1f32:	47b0      	blx	r6
    1f34:	b283      	uxth	r3, r0
                if (copy_len == 0) {
    1f36:	2b00      	cmp	r3, #0
    1f38:	d011      	beq.n	1f5e <handler_read_property_multiple+0x246>
                    apdu_len += copy_len;
    1f3a:	0400      	lsls	r0, r0, #16
    1f3c:	0c00      	lsrs	r0, r0, #16
    1f3e:	182d      	adds	r5, r5, r0
        if (decode_len >= service_len) {
    1f40:	9b07      	ldr	r3, [sp, #28]
    1f42:	42a3      	cmp	r3, r4
    1f44:	d900      	bls.n	1f48 <handler_read_property_multiple+0x230>
    1f46:	e732      	b.n	1dae <handler_read_property_multiple+0x96>
    if (apdu_len > service_data->max_resp) {
    1f48:	9b06      	ldr	r3, [sp, #24]
    1f4a:	689b      	ldr	r3, [r3, #8]
    1f4c:	9302      	str	r3, [sp, #8]
    1f4e:	429d      	cmp	r5, r3
    1f50:	dd0b      	ble.n	1f6a <handler_read_property_multiple+0x252>
        rpmdata.error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
    1f52:	2236      	movs	r2, #54	; 0x36
    1f54:	ab0f      	add	r3, sp, #60	; 0x3c
    1f56:	825a      	strh	r2, [r3, #18]
        error = BACNET_STATUS_ABORT;
    1f58:	2002      	movs	r0, #2
    1f5a:	4240      	negs	r0, r0
        goto RPM_FAILURE;
    1f5c:	e701      	b.n	1d62 <handler_read_property_multiple+0x4a>
                    rpmdata.error_code =
    1f5e:	2236      	movs	r2, #54	; 0x36
    1f60:	ab0f      	add	r3, sp, #60	; 0x3c
    1f62:	825a      	strh	r2, [r3, #18]
                    error = BACNET_STATUS_ABORT;
    1f64:	2002      	movs	r0, #2
    1f66:	4240      	negs	r0, r0
                    goto RPM_FAILURE;
    1f68:	e6fb      	b.n	1d62 <handler_read_property_multiple+0x4a>
    int error = 0;
    1f6a:	2000      	movs	r0, #0
    1f6c:	e6f9      	b.n	1d62 <handler_read_property_multiple+0x4a>
            apdu_len = abort_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1f6e:	4c1b      	ldr	r4, [pc, #108]	; (1fdc <handler_read_property_multiple+0x2c4>)
    1f70:	9b04      	ldr	r3, [sp, #16]
    1f72:	469c      	mov	ip, r3
    1f74:	4464      	add	r4, ip
    1f76:	9b06      	ldr	r3, [sp, #24]
    1f78:	7b1d      	ldrb	r5, [r3, #12]
                abort_convert_error_code(rpmdata.error_code), true);
    1f7a:	ab0f      	add	r3, sp, #60	; 0x3c
    1f7c:	8a58      	ldrh	r0, [r3, #18]
    1f7e:	4b2a      	ldr	r3, [pc, #168]	; (2028 <STACK_SIZE+0x28>)
    1f80:	4798      	blx	r3
            apdu_len = abort_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1f82:	b2c2      	uxtb	r2, r0
    1f84:	2301      	movs	r3, #1
    1f86:	0029      	movs	r1, r5
    1f88:	0020      	movs	r0, r4
    1f8a:	4c28      	ldr	r4, [pc, #160]	; (202c <STACK_SIZE+0x2c>)
    1f8c:	47a0      	blx	r4
    1f8e:	0005      	movs	r5, r0
    1f90:	e6f2      	b.n	1d78 <handler_read_property_multiple+0x60>
            apdu_len = bacerror_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1f92:	4812      	ldr	r0, [pc, #72]	; (1fdc <handler_read_property_multiple+0x2c4>)
    1f94:	9b04      	ldr	r3, [sp, #16]
    1f96:	469c      	mov	ip, r3
    1f98:	4460      	add	r0, ip
    1f9a:	9b06      	ldr	r3, [sp, #24]
    1f9c:	7b19      	ldrb	r1, [r3, #12]
    1f9e:	aa0f      	add	r2, sp, #60	; 0x3c
    1fa0:	8a13      	ldrh	r3, [r2, #16]
    1fa2:	8a52      	ldrh	r2, [r2, #18]
    1fa4:	9200      	str	r2, [sp, #0]
    1fa6:	220e      	movs	r2, #14
    1fa8:	4c21      	ldr	r4, [pc, #132]	; (2030 <STACK_SIZE+0x30>)
    1faa:	47a0      	blx	r4
    1fac:	0005      	movs	r5, r0
    1fae:	e6e3      	b.n	1d78 <handler_read_property_multiple+0x60>
            apdu_len = reject_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1fb0:	4c0a      	ldr	r4, [pc, #40]	; (1fdc <handler_read_property_multiple+0x2c4>)
    1fb2:	9b04      	ldr	r3, [sp, #16]
    1fb4:	469c      	mov	ip, r3
    1fb6:	4464      	add	r4, ip
    1fb8:	9b06      	ldr	r3, [sp, #24]
    1fba:	7b1d      	ldrb	r5, [r3, #12]
                reject_convert_error_code(rpmdata.error_code));
    1fbc:	ab0f      	add	r3, sp, #60	; 0x3c
    1fbe:	8a58      	ldrh	r0, [r3, #18]
    1fc0:	4b1c      	ldr	r3, [pc, #112]	; (2034 <STACK_SIZE+0x34>)
    1fc2:	4798      	blx	r3
            apdu_len = reject_encode_apdu(&Handler_Transmit_Buffer[npdu_len],
    1fc4:	b2c2      	uxtb	r2, r0
    1fc6:	0029      	movs	r1, r5
    1fc8:	0020      	movs	r0, r4
    1fca:	4b1b      	ldr	r3, [pc, #108]	; (2038 <STACK_SIZE+0x38>)
    1fcc:	4798      	blx	r3
    1fce:	0005      	movs	r5, r0
    1fd0:	e6d2      	b.n	1d78 <handler_read_property_multiple+0x60>
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	00006ce1 	.word	0x00006ce1
    1fd8:	0000a69d 	.word	0x0000a69d
    1fdc:	200006c8 	.word	0x200006c8
    1fe0:	0000a561 	.word	0x0000a561
    1fe4:	00006a95 	.word	0x00006a95
    1fe8:	0000ae95 	.word	0x0000ae95
    1fec:	0000ad21 	.word	0x0000ad21
    1ff0:	200004e8 	.word	0x200004e8
    1ff4:	0000aead 	.word	0x0000aead
    1ff8:	000098fd 	.word	0x000098fd
    1ffc:	003fffff 	.word	0x003fffff
    2000:	000053a5 	.word	0x000053a5
    2004:	0000aed9 	.word	0x0000aed9
    2008:	0000af59 	.word	0x0000af59
    200c:	00002f71 	.word	0x00002f71
    2010:	0000ada5 	.word	0x0000ada5
    2014:	00001c31 	.word	0x00001c31
    2018:	0000510d 	.word	0x0000510d
    201c:	00001c09 	.word	0x00001c09
    2020:	00001b99 	.word	0x00001b99
    2024:	0000af9d 	.word	0x0000af9d
    2028:	000012cd 	.word	0x000012cd
    202c:	00001309 	.word	0x00001309
    2030:	000038ad 	.word	0x000038ad
    2034:	0000ab39 	.word	0x0000ab39
    2038:	0000ab79 	.word	0x0000ab79

0000203c <match_name_or_object>:
/** Local function which responds with either the requested object name
 *  or object ID, if the Device has a match.
 *  @param data [in] The decoded who-has payload from the request.
 */
static void match_name_or_object(BACNET_WHO_HAS_DATA *data)
{
    203c:	b510      	push	{r4, lr}
    203e:	b0fa      	sub	sp, #488	; 0x1e8
    2040:	0004      	movs	r4, r0
    BACNET_OBJECT_TYPE object_type = OBJECT_NONE;
    2042:	2201      	movs	r2, #1
    2044:	4252      	negs	r2, r2
    2046:	23f3      	movs	r3, #243	; 0xf3
    2048:	005b      	lsls	r3, r3, #1
    204a:	446b      	add	r3, sp
    204c:	801a      	strh	r2, [r3, #0]
    uint32_t object_instance = 0;
    204e:	2300      	movs	r3, #0
    2050:	9378      	str	r3, [sp, #480]	; 0x1e0
    bool found = false;
    BACNET_CHARACTER_STRING object_name;

    /* do we have such an object?  If so, send an I-Have.
       note: we should have only 1 of such an object */
    if (data->is_object_name) {
    2052:	7a03      	ldrb	r3, [r0, #8]
    2054:	2b00      	cmp	r3, #0
    2056:	d016      	beq.n	2086 <match_name_or_object+0x4a>
        /* valid name in my device? */
        found = Device_Valid_Object_Name(
    2058:	340c      	adds	r4, #12
    205a:	aa78      	add	r2, sp, #480	; 0x1e0
    205c:	21f3      	movs	r1, #243	; 0xf3
    205e:	0049      	lsls	r1, r1, #1
    2060:	4469      	add	r1, sp
    2062:	0020      	movs	r0, r4
    2064:	4b0f      	ldr	r3, [pc, #60]	; (20a4 <match_name_or_object+0x68>)
    2066:	4798      	blx	r3
            &data->object.name, &object_type, &object_instance);
        if (found) {
    2068:	2800      	cmp	r0, #0
    206a:	d101      	bne.n	2070 <match_name_or_object+0x34>
            Send_I_Have(Device_Object_Instance_Number(),
                (BACNET_OBJECT_TYPE)data->object.identifier.type,
                data->object.identifier.instance, &object_name);
        }
    }
}
    206c:	b07a      	add	sp, #488	; 0x1e8
    206e:	bd10      	pop	{r4, pc}
            Send_I_Have(Device_Object_Instance_Number(),
    2070:	4b0d      	ldr	r3, [pc, #52]	; (20a8 <match_name_or_object+0x6c>)
    2072:	4798      	blx	r3
    2074:	23f3      	movs	r3, #243	; 0xf3
    2076:	005b      	lsls	r3, r3, #1
    2078:	446b      	add	r3, sp
    207a:	8819      	ldrh	r1, [r3, #0]
    207c:	0023      	movs	r3, r4
    207e:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    2080:	4c0a      	ldr	r4, [pc, #40]	; (20ac <match_name_or_object+0x70>)
    2082:	47a0      	blx	r4
    2084:	e7f2      	b.n	206c <match_name_or_object+0x30>
            (BACNET_OBJECT_TYPE)data->object.identifier.type,
    2086:	8980      	ldrh	r0, [r0, #12]
        found = Device_Object_Name_Copy(
    2088:	466a      	mov	r2, sp
    208a:	6921      	ldr	r1, [r4, #16]
    208c:	4b08      	ldr	r3, [pc, #32]	; (20b0 <match_name_or_object+0x74>)
    208e:	4798      	blx	r3
        if (found) {
    2090:	2800      	cmp	r0, #0
    2092:	d0eb      	beq.n	206c <match_name_or_object+0x30>
            Send_I_Have(Device_Object_Instance_Number(),
    2094:	4b04      	ldr	r3, [pc, #16]	; (20a8 <match_name_or_object+0x6c>)
    2096:	4798      	blx	r3
                (BACNET_OBJECT_TYPE)data->object.identifier.type,
    2098:	89a1      	ldrh	r1, [r4, #12]
            Send_I_Have(Device_Object_Instance_Number(),
    209a:	6922      	ldr	r2, [r4, #16]
    209c:	466b      	mov	r3, sp
    209e:	4c03      	ldr	r4, [pc, #12]	; (20ac <match_name_or_object+0x70>)
    20a0:	47a0      	blx	r4
}
    20a2:	e7e3      	b.n	206c <match_name_or_object+0x30>
    20a4:	000057d1 	.word	0x000057d1
    20a8:	000053a5 	.word	0x000053a5
    20ac:	00002341 	.word	0x00002341
    20b0:	00005a8d 	.word	0x00005a8d

000020b4 <handler_who_has>:
 * @param service_len [in] Length of the service_request message.
 * @param src [in] The BACNET_ADDRESS of the message's source.
 */
void handler_who_has(
    uint8_t *service_request, uint16_t service_len, BACNET_ADDRESS *src)
{
    20b4:	b500      	push	{lr}
    20b6:	b0fd      	sub	sp, #500	; 0x1f4
    int len = 0;
    BACNET_WHO_HAS_DATA data;
    bool directed_to_me = false;

    (void)src;
    len = whohas_decode_service_request(service_request, service_len, &data);
    20b8:	aa01      	add	r2, sp, #4
    20ba:	4b12      	ldr	r3, [pc, #72]	; (2104 <handler_who_has+0x50>)
    20bc:	4798      	blx	r3
    if (len > 0) {
    20be:	2800      	cmp	r0, #0
    20c0:	dd18      	ble.n	20f4 <handler_who_has+0x40>
        if ((data.low_limit == -1) || (data.high_limit == -1)) {
    20c2:	9b01      	ldr	r3, [sp, #4]
    20c4:	3301      	adds	r3, #1
    20c6:	d010      	beq.n	20ea <handler_who_has+0x36>
    20c8:	9b02      	ldr	r3, [sp, #8]
    20ca:	3301      	adds	r3, #1
    20cc:	d00f      	beq.n	20ee <handler_who_has+0x3a>
            directed_to_me = true;
        } else if ((Device_Object_Instance_Number() >=
    20ce:	4b0e      	ldr	r3, [pc, #56]	; (2108 <handler_who_has+0x54>)
    20d0:	4798      	blx	r3
    20d2:	9b01      	ldr	r3, [sp, #4]
    20d4:	4298      	cmp	r0, r3
    20d6:	d201      	bcs.n	20dc <handler_who_has+0x28>
    bool directed_to_me = false;
    20d8:	2300      	movs	r3, #0
    20da:	e009      	b.n	20f0 <handler_who_has+0x3c>
                       (uint32_t)data.low_limit) &&
            (Device_Object_Instance_Number() <= (uint32_t)data.high_limit)) {
    20dc:	4b0a      	ldr	r3, [pc, #40]	; (2108 <handler_who_has+0x54>)
    20de:	4798      	blx	r3
                       (uint32_t)data.low_limit) &&
    20e0:	9b02      	ldr	r3, [sp, #8]
    20e2:	4298      	cmp	r0, r3
    20e4:	d908      	bls.n	20f8 <handler_who_has+0x44>
    bool directed_to_me = false;
    20e6:	2300      	movs	r3, #0
    20e8:	e002      	b.n	20f0 <handler_who_has+0x3c>
            directed_to_me = true;
    20ea:	2301      	movs	r3, #1
    20ec:	e000      	b.n	20f0 <handler_who_has+0x3c>
    20ee:	2301      	movs	r3, #1
            directed_to_me = true;
        }
        if (directed_to_me) {
    20f0:	2b00      	cmp	r3, #0
    20f2:	d103      	bne.n	20fc <handler_who_has+0x48>
            match_name_or_object(&data);
        }
    }
}
    20f4:	b07d      	add	sp, #500	; 0x1f4
    20f6:	bd00      	pop	{pc}
            directed_to_me = true;
    20f8:	2301      	movs	r3, #1
    20fa:	e7f9      	b.n	20f0 <handler_who_has+0x3c>
            match_name_or_object(&data);
    20fc:	a801      	add	r0, sp, #4
    20fe:	4b03      	ldr	r3, [pc, #12]	; (210c <handler_who_has+0x58>)
    2100:	4798      	blx	r3
}
    2102:	e7f7      	b.n	20f4 <handler_who_has+0x40>
    2104:	0000b365 	.word	0x0000b365
    2108:	000053a5 	.word	0x000053a5
    210c:	0000203d 	.word	0x0000203d

00002110 <handler_who_is>:
 * @param service_len [in] Length of the service_request message.
 * @param src [in] The BACNET_ADDRESS of the message's source (ignored).
 */
void handler_who_is(
    uint8_t *service_request, uint16_t service_len, BACNET_ADDRESS *src)
{
    2110:	b510      	push	{r4, lr}
    2112:	b082      	sub	sp, #8
    int len = 0;
    int32_t low_limit = 0;
    2114:	2300      	movs	r3, #0
    2116:	9301      	str	r3, [sp, #4]
    int32_t high_limit = 0;
    2118:	9300      	str	r3, [sp, #0]

    (void)src;
    len = whois_decode_service_request(
    211a:	466b      	mov	r3, sp
    211c:	aa01      	add	r2, sp, #4
    211e:	4c0d      	ldr	r4, [pc, #52]	; (2154 <handler_who_is+0x44>)
    2120:	47a0      	blx	r4
        service_request, service_len, &low_limit, &high_limit);
    if (len == 0) {
    2122:	2800      	cmp	r0, #0
    2124:	d008      	beq.n	2138 <handler_who_is+0x28>
        Send_I_Am(&Handler_Transmit_Buffer[0]);
    } else if (len != BACNET_STATUS_ERROR) {
    2126:	1c43      	adds	r3, r0, #1
    2128:	d004      	beq.n	2134 <handler_who_is+0x24>
        /* is my device id within the limits? */
        if ((Device_Object_Instance_Number() >= (uint32_t)low_limit) &&
    212a:	4b0b      	ldr	r3, [pc, #44]	; (2158 <handler_who_is+0x48>)
    212c:	4798      	blx	r3
    212e:	9b01      	ldr	r3, [sp, #4]
    2130:	4298      	cmp	r0, r3
    2132:	d205      	bcs.n	2140 <handler_who_is+0x30>
            Send_I_Am(&Handler_Transmit_Buffer[0]);
        }
    }

    return;
}
    2134:	b002      	add	sp, #8
    2136:	bd10      	pop	{r4, pc}
        Send_I_Am(&Handler_Transmit_Buffer[0]);
    2138:	4808      	ldr	r0, [pc, #32]	; (215c <handler_who_is+0x4c>)
    213a:	4b09      	ldr	r3, [pc, #36]	; (2160 <handler_who_is+0x50>)
    213c:	4798      	blx	r3
    213e:	e7f9      	b.n	2134 <handler_who_is+0x24>
            (Device_Object_Instance_Number() <= (uint32_t)high_limit)) {
    2140:	4b05      	ldr	r3, [pc, #20]	; (2158 <handler_who_is+0x48>)
    2142:	4798      	blx	r3
        if ((Device_Object_Instance_Number() >= (uint32_t)low_limit) &&
    2144:	9b00      	ldr	r3, [sp, #0]
    2146:	4298      	cmp	r0, r3
    2148:	d8f4      	bhi.n	2134 <handler_who_is+0x24>
            Send_I_Am(&Handler_Transmit_Buffer[0]);
    214a:	4804      	ldr	r0, [pc, #16]	; (215c <handler_who_is+0x4c>)
    214c:	4b04      	ldr	r3, [pc, #16]	; (2160 <handler_who_is+0x50>)
    214e:	4798      	blx	r3
    return;
    2150:	e7f0      	b.n	2134 <handler_who_is+0x24>
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	0000b4a1 	.word	0x0000b4a1
    2158:	000053a5 	.word	0x000053a5
    215c:	200006c8 	.word	0x200006c8
    2160:	00002319 	.word	0x00002319

00002164 <handler_write_property>:
 */
void handler_write_property(uint8_t *service_request,
    uint16_t service_len,
    BACNET_ADDRESS *src,
    BACNET_CONFIRMED_SERVICE_DATA *service_data)
{
    2164:	b5f0      	push	{r4, r5, r6, r7, lr}
    2166:	4c29      	ldr	r4, [pc, #164]	; (220c <handler_write_property+0xa8>)
    2168:	44a5      	add	sp, r4
    216a:	9003      	str	r0, [sp, #12]
    216c:	000f      	movs	r7, r1
    216e:	0014      	movs	r4, r2
    2170:	001e      	movs	r6, r3
    BACNET_NPDU_DATA npdu_data;
    int bytes_sent = 0;
    BACNET_ADDRESS my_address;

    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    2172:	a805      	add	r0, sp, #20
    2174:	4b26      	ldr	r3, [pc, #152]	; (2210 <handler_write_property+0xac>)
    2176:	4798      	blx	r3
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    2178:	2200      	movs	r2, #0
    217a:	2100      	movs	r1, #0
    217c:	a80a      	add	r0, sp, #40	; 0x28
    217e:	4b25      	ldr	r3, [pc, #148]	; (2214 <handler_write_property+0xb0>)
    2180:	4798      	blx	r3
    pdu_len = npdu_encode_pdu(
    2182:	ab0a      	add	r3, sp, #40	; 0x28
    2184:	aa05      	add	r2, sp, #20
    2186:	0021      	movs	r1, r4
    2188:	4823      	ldr	r0, [pc, #140]	; (2218 <handler_write_property+0xb4>)
    218a:	4d24      	ldr	r5, [pc, #144]	; (221c <handler_write_property+0xb8>)
    218c:	47a8      	blx	r5
    218e:	0005      	movs	r5, r0
        &Handler_Transmit_Buffer[0], src, &my_address, &npdu_data);
#if PRINT_ENABLED
    fprintf(stderr, "WP: Received Request!\n");
#endif
    if (service_data->segmented_message) {
    2190:	7833      	ldrb	r3, [r6, #0]
    2192:	2b00      	cmp	r3, #0
    2194:	d11a      	bne.n	21cc <handler_write_property+0x68>
#if PRINT_ENABLED
        fprintf(stderr, "WP: Segmented message.  Sending Abort!\n");
#endif
        goto WP_ABORT;
    } /* decode the service request only */
    len = wp_decode_service_request(service_request, service_len, &wp_data);
    2196:	aa0d      	add	r2, sp, #52	; 0x34
    2198:	0039      	movs	r1, r7
    219a:	9803      	ldr	r0, [sp, #12]
    219c:	4b20      	ldr	r3, [pc, #128]	; (2220 <handler_write_property+0xbc>)
    219e:	4798      	blx	r3
            (unsigned long)wp_data.priority, (long)wp_data.array_index);
    else
        fprintf(stderr, "WP: Unable to decode Request!\n");
#endif
    /* bad decoding or something we didn't understand - send an abort */
    if (len <= 0) {
    21a0:	2800      	cmp	r0, #0
    21a2:	dd24      	ble.n	21ee <handler_write_property+0x8a>
#if PRINT_ENABLED
        fprintf(stderr, "WP: Bad Encoding. Sending Abort!\n");
#endif
        goto WP_ABORT;
    }
    if (Device_Write_Property(&wp_data)) {
    21a4:	a80d      	add	r0, sp, #52	; 0x34
    21a6:	4b1f      	ldr	r3, [pc, #124]	; (2224 <handler_write_property+0xc0>)
    21a8:	4798      	blx	r3
    21aa:	2800      	cmp	r0, #0
    21ac:	d127      	bne.n	21fe <handler_write_property+0x9a>
            service_data->invoke_id, SERVICE_CONFIRMED_WRITE_PROPERTY);
#if PRINT_ENABLED
        fprintf(stderr, "WP: Sending Simple Ack!\n");
#endif
    } else {
        len = bacerror_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    21ae:	481a      	ldr	r0, [pc, #104]	; (2218 <handler_write_property+0xb4>)
    21b0:	1828      	adds	r0, r5, r0
    21b2:	7b31      	ldrb	r1, [r6, #12]
    21b4:	aa0d      	add	r2, sp, #52	; 0x34
    21b6:	23fb      	movs	r3, #251	; 0xfb
    21b8:	005b      	lsls	r3, r3, #1
    21ba:	5ad3      	ldrh	r3, [r2, r3]
    21bc:	26fc      	movs	r6, #252	; 0xfc
    21be:	0076      	lsls	r6, r6, #1
    21c0:	5b92      	ldrh	r2, [r2, r6]
    21c2:	9200      	str	r2, [sp, #0]
    21c4:	220f      	movs	r2, #15
    21c6:	4e18      	ldr	r6, [pc, #96]	; (2228 <handler_write_property+0xc4>)
    21c8:	47b0      	blx	r6
    21ca:	e006      	b.n	21da <handler_write_property+0x76>
        len = abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    21cc:	4812      	ldr	r0, [pc, #72]	; (2218 <handler_write_property+0xb4>)
    21ce:	1828      	adds	r0, r5, r0
    21d0:	7b31      	ldrb	r1, [r6, #12]
    21d2:	2301      	movs	r3, #1
    21d4:	2204      	movs	r2, #4
    21d6:	4e15      	ldr	r6, [pc, #84]	; (222c <handler_write_property+0xc8>)
    21d8:	47b0      	blx	r6
#if PRINT_ENABLED
        fprintf(stderr, "WP: Sending Error!\n");
#endif
    }
WP_ABORT:
    pdu_len += len;
    21da:	1943      	adds	r3, r0, r5
    bytes_sent = datalink_send_pdu(
    21dc:	4a0e      	ldr	r2, [pc, #56]	; (2218 <handler_write_property+0xb4>)
    21de:	a90a      	add	r1, sp, #40	; 0x28
    21e0:	0020      	movs	r0, r4
    21e2:	4c13      	ldr	r4, [pc, #76]	; (2230 <handler_write_property+0xcc>)
    21e4:	47a0      	blx	r4
        fprintf(stderr, "WP: Failed to send PDU (%s)!\n", strerror(errno));
#endif
    }

    return;
}
    21e6:	238d      	movs	r3, #141	; 0x8d
    21e8:	009b      	lsls	r3, r3, #2
    21ea:	449d      	add	sp, r3
    21ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        len = abort_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    21ee:	480a      	ldr	r0, [pc, #40]	; (2218 <handler_write_property+0xb4>)
    21f0:	1828      	adds	r0, r5, r0
    21f2:	7b31      	ldrb	r1, [r6, #12]
    21f4:	2301      	movs	r3, #1
    21f6:	2200      	movs	r2, #0
    21f8:	4e0c      	ldr	r6, [pc, #48]	; (222c <handler_write_property+0xc8>)
    21fa:	47b0      	blx	r6
        goto WP_ABORT;
    21fc:	e7ed      	b.n	21da <handler_write_property+0x76>
        len = encode_simple_ack(&Handler_Transmit_Buffer[pdu_len],
    21fe:	4806      	ldr	r0, [pc, #24]	; (2218 <handler_write_property+0xb4>)
    2200:	1828      	adds	r0, r5, r0
    2202:	7b31      	ldrb	r1, [r6, #12]
    2204:	220f      	movs	r2, #15
    2206:	4b0b      	ldr	r3, [pc, #44]	; (2234 <handler_write_property+0xd0>)
    2208:	4798      	blx	r3
    220a:	e7e6      	b.n	21da <handler_write_property+0x76>
    220c:	fffffdcc 	.word	0xfffffdcc
    2210:	00006ce1 	.word	0x00006ce1
    2214:	0000a69d 	.word	0x0000a69d
    2218:	200006c8 	.word	0x200006c8
    221c:	0000a561 	.word	0x0000a561
    2220:	0000b59d 	.word	0x0000b59d
    2224:	000050a9 	.word	0x000050a9
    2228:	000038ad 	.word	0x000038ad
    222c:	00001309 	.word	0x00001309
    2230:	00006a95 	.word	0x00006a95
    2234:	000038a1 	.word	0x000038a1

00002238 <WPValidateArgType>:
    /*
     * start out assuming success and only set up error
     * response if validation fails.
     */
    bResult = true;
    if (pValue->tag != ucExpectedTag) {
    2238:	7880      	ldrb	r0, [r0, #2]
    223a:	4288      	cmp	r0, r1
    223c:	d005      	beq.n	224a <WPValidateArgType+0x12>
        bResult = false;
        *pErrorClass = ERROR_CLASS_PROPERTY;
    223e:	2102      	movs	r1, #2
    2240:	8011      	strh	r1, [r2, #0]
        *pErrorCode = ERROR_CODE_INVALID_DATA_TYPE;
    2242:	2209      	movs	r2, #9
    2244:	801a      	strh	r2, [r3, #0]
        bResult = false;
    2246:	2000      	movs	r0, #0
    }

    return (bResult);
}
    2248:	4770      	bx	lr
    bResult = true;
    224a:	2001      	movs	r0, #1
    224c:	e7fc      	b.n	2248 <WPValidateArgType+0x10>
	...

00002250 <handler_unrecognized_service>:
 */
void handler_unrecognized_service(uint8_t *service_request,
    uint16_t service_len,
    BACNET_ADDRESS *src,
    BACNET_CONFIRMED_SERVICE_DATA *service_data)
{
    2250:	b5f0      	push	{r4, r5, r6, r7, lr}
    2252:	b089      	sub	sp, #36	; 0x24
    2254:	0016      	movs	r6, r2
    2256:	001f      	movs	r7, r3

    (void)service_request;
    (void)service_len;

    /* encode the NPDU portion of the packet */
    datalink_get_my_address(&my_address);
    2258:	4668      	mov	r0, sp
    225a:	4b0e      	ldr	r3, [pc, #56]	; (2294 <handler_unrecognized_service+0x44>)
    225c:	4798      	blx	r3
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    225e:	2200      	movs	r2, #0
    2260:	2100      	movs	r1, #0
    2262:	a805      	add	r0, sp, #20
    2264:	4b0c      	ldr	r3, [pc, #48]	; (2298 <handler_unrecognized_service+0x48>)
    2266:	4798      	blx	r3
    pdu_len = npdu_encode_pdu(
    2268:	4d0c      	ldr	r5, [pc, #48]	; (229c <handler_unrecognized_service+0x4c>)
    226a:	ab05      	add	r3, sp, #20
    226c:	466a      	mov	r2, sp
    226e:	0031      	movs	r1, r6
    2270:	0028      	movs	r0, r5
    2272:	4c0b      	ldr	r4, [pc, #44]	; (22a0 <handler_unrecognized_service+0x50>)
    2274:	47a0      	blx	r4
    2276:	0004      	movs	r4, r0
        &Handler_Transmit_Buffer[0], src, &my_address, &npdu_data);
    /* encode the APDU portion of the packet */
    len = reject_encode_apdu(&Handler_Transmit_Buffer[pdu_len],
    2278:	1940      	adds	r0, r0, r5
    227a:	7b39      	ldrb	r1, [r7, #12]
    227c:	2209      	movs	r2, #9
    227e:	4b09      	ldr	r3, [pc, #36]	; (22a4 <handler_unrecognized_service+0x54>)
    2280:	4798      	blx	r3
        service_data->invoke_id, REJECT_REASON_UNRECOGNIZED_SERVICE);
    pdu_len += len;
    2282:	1823      	adds	r3, r4, r0
    /* send the data */
    bytes_sent = datalink_send_pdu(
    2284:	002a      	movs	r2, r5
    2286:	a905      	add	r1, sp, #20
    2288:	0030      	movs	r0, r6
    228a:	4c07      	ldr	r4, [pc, #28]	; (22a8 <handler_unrecognized_service+0x58>)
    228c:	47a0      	blx	r4
    } else {
#if PRINT_ENABLED
        fprintf(stderr, "Failed to Send Reject (%s)!\n", strerror(errno));
#endif
    }
}
    228e:	b009      	add	sp, #36	; 0x24
    2290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	00006ce1 	.word	0x00006ce1
    2298:	0000a69d 	.word	0x0000a69d
    229c:	200006c8 	.word	0x200006c8
    22a0:	0000a561 	.word	0x0000a561
    22a4:	0000ab79 	.word	0x0000ab79
    22a8:	00006a95 	.word	0x00006a95

000022ac <iam_encode_pdu>:
 * @param npdu_data [out] The NPDU structure describing the message.
 * @return The length of the message in buffer[].
 */
int iam_encode_pdu(
    uint8_t *buffer, BACNET_ADDRESS *dest, BACNET_NPDU_DATA *npdu_data)
{
    22ac:	b570      	push	{r4, r5, r6, lr}
    22ae:	b088      	sub	sp, #32
    22b0:	0005      	movs	r5, r0
    22b2:	000c      	movs	r4, r1
    22b4:	0016      	movs	r6, r2
    int len = 0;
    int pdu_len = 0;
    BACNET_ADDRESS my_address;
    datalink_get_my_address(&my_address);
    22b6:	a803      	add	r0, sp, #12
    22b8:	4b10      	ldr	r3, [pc, #64]	; (22fc <iam_encode_pdu+0x50>)
    22ba:	4798      	blx	r3

    datalink_get_broadcast_address(dest);
    22bc:	0020      	movs	r0, r4
    22be:	4b10      	ldr	r3, [pc, #64]	; (2300 <iam_encode_pdu+0x54>)
    22c0:	4798      	blx	r3
    /* encode the NPDU portion of the packet */
    npdu_encode_npdu_data(npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    22c2:	2200      	movs	r2, #0
    22c4:	2100      	movs	r1, #0
    22c6:	0030      	movs	r0, r6
    22c8:	4b0e      	ldr	r3, [pc, #56]	; (2304 <iam_encode_pdu+0x58>)
    22ca:	4798      	blx	r3
    pdu_len = npdu_encode_pdu(&buffer[0], dest, &my_address, npdu_data);
    22cc:	0033      	movs	r3, r6
    22ce:	aa03      	add	r2, sp, #12
    22d0:	0021      	movs	r1, r4
    22d2:	0028      	movs	r0, r5
    22d4:	4c0c      	ldr	r4, [pc, #48]	; (2308 <iam_encode_pdu+0x5c>)
    22d6:	47a0      	blx	r4
    22d8:	0004      	movs	r4, r0

    /* encode the APDU portion of the packet */
    len = iam_encode_apdu(&buffer[pdu_len], Device_Object_Instance_Number(),
    22da:	182d      	adds	r5, r5, r0
    22dc:	4b0b      	ldr	r3, [pc, #44]	; (230c <iam_encode_pdu+0x60>)
    22de:	4798      	blx	r3
    22e0:	0006      	movs	r6, r0
    22e2:	4b0b      	ldr	r3, [pc, #44]	; (2310 <iam_encode_pdu+0x64>)
    22e4:	4798      	blx	r3
    22e6:	9000      	str	r0, [sp, #0]
    22e8:	2303      	movs	r3, #3
    22ea:	22f0      	movs	r2, #240	; 0xf0
    22ec:	0052      	lsls	r2, r2, #1
    22ee:	0031      	movs	r1, r6
    22f0:	0028      	movs	r0, r5
    22f2:	4d08      	ldr	r5, [pc, #32]	; (2314 <iam_encode_pdu+0x68>)
    22f4:	47a8      	blx	r5
        MAX_APDU, SEGMENTATION_NONE, Device_Vendor_Identifier());
    pdu_len += len;
    22f6:	1820      	adds	r0, r4, r0

    return pdu_len;
}
    22f8:	b008      	add	sp, #32
    22fa:	bd70      	pop	{r4, r5, r6, pc}
    22fc:	00006ce1 	.word	0x00006ce1
    2300:	00006d09 	.word	0x00006d09
    2304:	0000a69d 	.word	0x0000a69d
    2308:	0000a561 	.word	0x0000a561
    230c:	000053a5 	.word	0x000053a5
    2310:	000053d9 	.word	0x000053d9
    2314:	00006d39 	.word	0x00006d39

00002318 <Send_I_Am>:
 * @ingroup DMDDB
 *
 * @param buffer [in] The buffer to use for building and sending the message.
 */
void Send_I_Am(uint8_t *buffer)
{
    2318:	b510      	push	{r4, lr}
    231a:	b088      	sub	sp, #32
    231c:	0004      	movs	r4, r0
    if (!dcc_communication_enabled())
        return 0;
#endif

    /* encode the data */
    pdu_len = iam_encode_pdu(buffer, &dest, &npdu_data);
    231e:	466a      	mov	r2, sp
    2320:	a903      	add	r1, sp, #12
    2322:	4b05      	ldr	r3, [pc, #20]	; (2338 <Send_I_Am+0x20>)
    2324:	4798      	blx	r3
    2326:	0003      	movs	r3, r0
    /* send data */
    bytes_sent = datalink_send_pdu(&dest, &npdu_data, &buffer[0], pdu_len);
    2328:	0022      	movs	r2, r4
    232a:	4669      	mov	r1, sp
    232c:	a803      	add	r0, sp, #12
    232e:	4c03      	ldr	r4, [pc, #12]	; (233c <Send_I_Am+0x24>)
    2330:	47a0      	blx	r4
    if (bytes_sent <= 0) {
#if PRINT_ENABLED
        fprintf(stderr, "Failed to Send I-Am Reply (%s)!\n", strerror(errno));
#endif
    }
}
    2332:	b008      	add	sp, #32
    2334:	bd10      	pop	{r4, pc}
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	000022ad 	.word	0x000022ad
    233c:	00006a95 	.word	0x00006a95

00002340 <Send_I_Have>:
 */
void Send_I_Have(uint32_t device_id,
    BACNET_OBJECT_TYPE object_type,
    uint32_t object_instance,
    BACNET_CHARACTER_STRING *object_name)
{
    2340:	b5f0      	push	{r4, r5, r6, r7, lr}
    2342:	46ce      	mov	lr, r9
    2344:	4647      	mov	r7, r8
    2346:	b580      	push	{r7, lr}
    2348:	4c1d      	ldr	r4, [pc, #116]	; (23c0 <Send_I_Have+0x80>)
    234a:	44a5      	add	sp, r4
    234c:	0007      	movs	r7, r0
    234e:	000e      	movs	r6, r1
    2350:	0015      	movs	r5, r2
    2352:	9301      	str	r3, [sp, #4]
    int bytes_sent = 0;
    BACNET_I_HAVE_DATA data;
    BACNET_NPDU_DATA npdu_data;
    BACNET_ADDRESS my_address;

    datalink_get_my_address(&my_address);
    2354:	a803      	add	r0, sp, #12
    2356:	4b1b      	ldr	r3, [pc, #108]	; (23c4 <Send_I_Have+0x84>)
    2358:	4798      	blx	r3
    /* if we are forbidden to send, don't send! */
    if (!dcc_communication_enabled()) {
    235a:	4b1b      	ldr	r3, [pc, #108]	; (23c8 <Send_I_Have+0x88>)
    235c:	4798      	blx	r3
    235e:	2800      	cmp	r0, #0
    2360:	d106      	bne.n	2370 <Send_I_Have+0x30>
    if (bytes_sent <= 0) {
#if PRINT_ENABLED
        fprintf(stderr, "Failed to Send I-Have Reply (%s)!\n", strerror(errno));
#endif
    }
}
    2362:	238d      	movs	r3, #141	; 0x8d
    2364:	009b      	lsls	r3, r3, #2
    2366:	449d      	add	sp, r3
    2368:	bc0c      	pop	{r2, r3}
    236a:	4690      	mov	r8, r2
    236c:	4699      	mov	r9, r3
    236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    datalink_get_broadcast_address(&dest);
    2370:	a887      	add	r0, sp, #540	; 0x21c
    2372:	4b16      	ldr	r3, [pc, #88]	; (23cc <Send_I_Have+0x8c>)
    2374:	4798      	blx	r3
    npdu_encode_npdu_data(&npdu_data, false, MESSAGE_PRIORITY_NORMAL);
    2376:	2200      	movs	r2, #0
    2378:	2100      	movs	r1, #0
    237a:	a808      	add	r0, sp, #32
    237c:	4b14      	ldr	r3, [pc, #80]	; (23d0 <Send_I_Have+0x90>)
    237e:	4798      	blx	r3
    pdu_len = npdu_encode_pdu(
    2380:	4b14      	ldr	r3, [pc, #80]	; (23d4 <Send_I_Have+0x94>)
    2382:	4699      	mov	r9, r3
    2384:	ab08      	add	r3, sp, #32
    2386:	aa03      	add	r2, sp, #12
    2388:	a987      	add	r1, sp, #540	; 0x21c
    238a:	4648      	mov	r0, r9
    238c:	4c12      	ldr	r4, [pc, #72]	; (23d8 <Send_I_Have+0x98>)
    238e:	47a0      	blx	r4
    2390:	4680      	mov	r8, r0
    data.device_id.type = OBJECT_DEVICE;
    2392:	2308      	movs	r3, #8
    2394:	aa02      	add	r2, sp, #8
    2396:	8493      	strh	r3, [r2, #36]	; 0x24
    data.device_id.instance = device_id;
    2398:	970c      	str	r7, [sp, #48]	; 0x30
    data.object_id.type = object_type;
    239a:	8596      	strh	r6, [r2, #44]	; 0x2c
    data.object_id.instance = object_instance;
    239c:	950e      	str	r5, [sp, #56]	; 0x38
    characterstring_copy(&data.object_name, object_name);
    239e:	9901      	ldr	r1, [sp, #4]
    23a0:	a80f      	add	r0, sp, #60	; 0x3c
    23a2:	4b0e      	ldr	r3, [pc, #56]	; (23dc <Send_I_Have+0x9c>)
    23a4:	4798      	blx	r3
    len = ihave_encode_apdu(&Handler_Transmit_Buffer[pdu_len], &data);
    23a6:	4640      	mov	r0, r8
    23a8:	4448      	add	r0, r9
    23aa:	a90b      	add	r1, sp, #44	; 0x2c
    23ac:	4b0c      	ldr	r3, [pc, #48]	; (23e0 <Send_I_Have+0xa0>)
    23ae:	4798      	blx	r3
    pdu_len += len;
    23b0:	0003      	movs	r3, r0
    23b2:	4443      	add	r3, r8
    bytes_sent = datalink_send_pdu(
    23b4:	464a      	mov	r2, r9
    23b6:	a908      	add	r1, sp, #32
    23b8:	a887      	add	r0, sp, #540	; 0x21c
    23ba:	4c0a      	ldr	r4, [pc, #40]	; (23e4 <Send_I_Have+0xa4>)
    23bc:	47a0      	blx	r4
    23be:	e7d0      	b.n	2362 <Send_I_Have+0x22>
    23c0:	fffffdcc 	.word	0xfffffdcc
    23c4:	00006ce1 	.word	0x00006ce1
    23c8:	00004155 	.word	0x00004155
    23cc:	00006d09 	.word	0x00006d09
    23d0:	0000a69d 	.word	0x0000a69d
    23d4:	200006c8 	.word	0x200006c8
    23d8:	0000a561 	.word	0x0000a561
    23dc:	000040a9 	.word	0x000040a9
    23e0:	00006d95 	.word	0x00006d95
    23e4:	00006a95 	.word	0x00006a95

000023e8 <isPowerOfTwo>:
 * @return  true if the parameter is a power of 2
 */
static bool isPowerOfTwo(unsigned int x)
{
    /* First x in the below expression is for the case when x is 0 */
    return x && (!(x & (x - 1)));
    23e8:	2800      	cmp	r0, #0
    23ea:	d004      	beq.n	23f6 <isPowerOfTwo+0xe>
    23ec:	1e43      	subs	r3, r0, #1
    23ee:	4203      	tst	r3, r0
    23f0:	d003      	beq.n	23fa <isPowerOfTwo+0x12>
    23f2:	2000      	movs	r0, #0
    23f4:	e000      	b.n	23f8 <isPowerOfTwo+0x10>
    23f6:	2000      	movs	r0, #0
}
    23f8:	4770      	bx	lr
    return x && (!(x & (x - 1)));
    23fa:	2001      	movs	r0, #1
    23fc:	e7fc      	b.n	23f8 <isPowerOfTwo+0x10>

000023fe <Ringbuf_Count>:
    if (b) {
    23fe:	2800      	cmp	r0, #0
    2400:	d003      	beq.n	240a <Ringbuf_Count+0xc>
        head = b->head;
    2402:	68c3      	ldr	r3, [r0, #12]
        tail = b->tail;
    2404:	6900      	ldr	r0, [r0, #16]
        return head - tail;
    2406:	1a18      	subs	r0, r3, r0
}
    2408:	4770      	bx	lr
    return 0;
    240a:	2000      	movs	r0, #0
    240c:	e7fc      	b.n	2408 <Ringbuf_Count+0xa>
	...

00002410 <Ringbuf_Depth_Update>:
{
    2410:	b510      	push	{r4, lr}
    2412:	1e04      	subs	r4, r0, #0
    if (b) {
    2414:	d005      	beq.n	2422 <Ringbuf_Depth_Update+0x12>
        count = Ringbuf_Count(b);
    2416:	4b03      	ldr	r3, [pc, #12]	; (2424 <Ringbuf_Depth_Update+0x14>)
    2418:	4798      	blx	r3
        if (count > b->depth) {
    241a:	6963      	ldr	r3, [r4, #20]
    241c:	4298      	cmp	r0, r3
    241e:	d900      	bls.n	2422 <Ringbuf_Depth_Update+0x12>
            b->depth = count;
    2420:	6160      	str	r0, [r4, #20]
}
    2422:	bd10      	pop	{r4, pc}
    2424:	000023ff 	.word	0x000023ff

00002428 <Ringbuf_Full>:
{
    2428:	b510      	push	{r4, lr}
    242a:	1e04      	subs	r4, r0, #0
    return (b ? (Ringbuf_Count(b) == b->element_count) : true);
    242c:	d006      	beq.n	243c <Ringbuf_Full+0x14>
    242e:	4b05      	ldr	r3, [pc, #20]	; (2444 <Ringbuf_Full+0x1c>)
    2430:	4798      	blx	r3
    2432:	68a3      	ldr	r3, [r4, #8]
    2434:	4298      	cmp	r0, r3
    2436:	d003      	beq.n	2440 <Ringbuf_Full+0x18>
    2438:	2000      	movs	r0, #0
}
    243a:	bd10      	pop	{r4, pc}
    return (b ? (Ringbuf_Count(b) == b->element_count) : true);
    243c:	2001      	movs	r0, #1
    243e:	e7fc      	b.n	243a <Ringbuf_Full+0x12>
    2440:	2001      	movs	r0, #1
    2442:	e7fa      	b.n	243a <Ringbuf_Full+0x12>
    2444:	000023ff 	.word	0x000023ff

00002448 <Ringbuf_Empty>:
{
    2448:	b510      	push	{r4, lr}
    return (b ? (Ringbuf_Count(b) == 0) : true);
    244a:	2800      	cmp	r0, #0
    244c:	d007      	beq.n	245e <Ringbuf_Empty+0x16>
    244e:	4b05      	ldr	r3, [pc, #20]	; (2464 <Ringbuf_Empty+0x1c>)
    2450:	4798      	blx	r3
    2452:	2800      	cmp	r0, #0
    2454:	d101      	bne.n	245a <Ringbuf_Empty+0x12>
    2456:	2001      	movs	r0, #1
}
    2458:	bd10      	pop	{r4, pc}
    return (b ? (Ringbuf_Count(b) == 0) : true);
    245a:	2000      	movs	r0, #0
    245c:	e7fc      	b.n	2458 <Ringbuf_Empty+0x10>
    245e:	2001      	movs	r0, #1
    2460:	e7fa      	b.n	2458 <Ringbuf_Empty+0x10>
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	000023ff 	.word	0x000023ff

00002468 <Ringbuf_Peek>:
{
    2468:	b570      	push	{r4, r5, r6, lr}
    246a:	0004      	movs	r4, r0
    if (!Ringbuf_Empty(b)) {
    246c:	4b07      	ldr	r3, [pc, #28]	; (248c <Ringbuf_Peek+0x24>)
    246e:	4798      	blx	r3
    2470:	2800      	cmp	r0, #0
    2472:	d108      	bne.n	2486 <Ringbuf_Peek+0x1e>
        data_element = b->buffer;
    2474:	6825      	ldr	r5, [r4, #0]
        data_element += ((b->tail % b->element_count) * b->element_size);
    2476:	6920      	ldr	r0, [r4, #16]
    2478:	68a1      	ldr	r1, [r4, #8]
    247a:	4b05      	ldr	r3, [pc, #20]	; (2490 <Ringbuf_Peek+0x28>)
    247c:	4798      	blx	r3
    247e:	6860      	ldr	r0, [r4, #4]
    2480:	4348      	muls	r0, r1
    2482:	1828      	adds	r0, r5, r0
}
    2484:	bd70      	pop	{r4, r5, r6, pc}
    volatile uint8_t *data_element = NULL; /* return value */
    2486:	2000      	movs	r0, #0
    2488:	e7fc      	b.n	2484 <Ringbuf_Peek+0x1c>
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	00002449 	.word	0x00002449
    2490:	0000ccbd 	.word	0x0000ccbd

00002494 <Ringbuf_Pop>:
{
    2494:	b570      	push	{r4, r5, r6, lr}
    2496:	0004      	movs	r4, r0
    2498:	000d      	movs	r5, r1
    if (!Ringbuf_Empty(b)) {
    249a:	4b0f      	ldr	r3, [pc, #60]	; (24d8 <Ringbuf_Pop+0x44>)
    249c:	4798      	blx	r3
    249e:	2800      	cmp	r0, #0
    24a0:	d117      	bne.n	24d2 <Ringbuf_Pop+0x3e>
        ring_data = b->buffer;
    24a2:	6826      	ldr	r6, [r4, #0]
        ring_data += ((b->tail % b->element_count) * b->element_size);
    24a4:	6920      	ldr	r0, [r4, #16]
    24a6:	68a1      	ldr	r1, [r4, #8]
    24a8:	4b0c      	ldr	r3, [pc, #48]	; (24dc <Ringbuf_Pop+0x48>)
    24aa:	4798      	blx	r3
    24ac:	6863      	ldr	r3, [r4, #4]
    24ae:	4359      	muls	r1, r3
        if (data_element) {
    24b0:	2d00      	cmp	r5, #0
    24b2:	d009      	beq.n	24c8 <Ringbuf_Pop+0x34>
    24b4:	2300      	movs	r3, #0
    24b6:	e004      	b.n	24c2 <Ringbuf_Pop+0x2e>
                data_element[i] = ring_data[i];
    24b8:	185a      	adds	r2, r3, r1
    24ba:	18b2      	adds	r2, r6, r2
    24bc:	7812      	ldrb	r2, [r2, #0]
    24be:	54ea      	strb	r2, [r5, r3]
            for (i = 0; i < b->element_size; i++) {
    24c0:	3301      	adds	r3, #1
    24c2:	6862      	ldr	r2, [r4, #4]
    24c4:	4293      	cmp	r3, r2
    24c6:	d3f7      	bcc.n	24b8 <Ringbuf_Pop+0x24>
        b->tail++;
    24c8:	6923      	ldr	r3, [r4, #16]
    24ca:	3301      	adds	r3, #1
    24cc:	6123      	str	r3, [r4, #16]
        status = true;
    24ce:	2001      	movs	r0, #1
}
    24d0:	bd70      	pop	{r4, r5, r6, pc}
    bool status = false; /* return value */
    24d2:	2000      	movs	r0, #0
    24d4:	e7fc      	b.n	24d0 <Ringbuf_Pop+0x3c>
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	00002449 	.word	0x00002449
    24dc:	0000ccbd 	.word	0x0000ccbd

000024e0 <Ringbuf_Data_Peek>:
{
    24e0:	b570      	push	{r4, r5, r6, lr}
    24e2:	1e04      	subs	r4, r0, #0
    if (b) {
    24e4:	d00c      	beq.n	2500 <Ringbuf_Data_Peek+0x20>
        if (!Ringbuf_Full(b)) {
    24e6:	4b08      	ldr	r3, [pc, #32]	; (2508 <Ringbuf_Data_Peek+0x28>)
    24e8:	4798      	blx	r3
    24ea:	2800      	cmp	r0, #0
    24ec:	d10a      	bne.n	2504 <Ringbuf_Data_Peek+0x24>
            ring_data = b->buffer;
    24ee:	6825      	ldr	r5, [r4, #0]
            ring_data += ((b->head % b->element_count) * b->element_size);
    24f0:	68e0      	ldr	r0, [r4, #12]
    24f2:	68a1      	ldr	r1, [r4, #8]
    24f4:	4b05      	ldr	r3, [pc, #20]	; (250c <Ringbuf_Data_Peek+0x2c>)
    24f6:	4798      	blx	r3
    24f8:	6860      	ldr	r0, [r4, #4]
    24fa:	4348      	muls	r0, r1
    24fc:	1828      	adds	r0, r5, r0
}
    24fe:	bd70      	pop	{r4, r5, r6, pc}
    volatile uint8_t *ring_data = NULL; /* used to help point ring data */
    2500:	2000      	movs	r0, #0
    2502:	e7fc      	b.n	24fe <Ringbuf_Data_Peek+0x1e>
    2504:	2000      	movs	r0, #0
    2506:	e7fa      	b.n	24fe <Ringbuf_Data_Peek+0x1e>
    2508:	00002429 	.word	0x00002429
    250c:	0000ccbd 	.word	0x0000ccbd

00002510 <Ringbuf_Data_Put>:
{
    2510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2512:	0004      	movs	r4, r0
    2514:	000f      	movs	r7, r1
    if (b) {
    2516:	2800      	cmp	r0, #0
    2518:	d017      	beq.n	254a <Ringbuf_Data_Put+0x3a>
        if (!Ringbuf_Full(b)) {
    251a:	4b0e      	ldr	r3, [pc, #56]	; (2554 <Ringbuf_Data_Put+0x44>)
    251c:	4798      	blx	r3
    251e:	1e05      	subs	r5, r0, #0
    2520:	d115      	bne.n	254e <Ringbuf_Data_Put+0x3e>
            ring_data = b->buffer;
    2522:	6826      	ldr	r6, [r4, #0]
            ring_data += ((b->head % b->element_count) * b->element_size);
    2524:	68e0      	ldr	r0, [r4, #12]
    2526:	68a1      	ldr	r1, [r4, #8]
    2528:	4b0b      	ldr	r3, [pc, #44]	; (2558 <Ringbuf_Data_Put+0x48>)
    252a:	4798      	blx	r3
    252c:	6863      	ldr	r3, [r4, #4]
    252e:	4359      	muls	r1, r3
    2530:	1876      	adds	r6, r6, r1
            if (ring_data == data_element) {
    2532:	42be      	cmp	r6, r7
    2534:	d001      	beq.n	253a <Ringbuf_Data_Put+0x2a>
}
    2536:	0028      	movs	r0, r5
    2538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                b->head++;
    253a:	68e3      	ldr	r3, [r4, #12]
    253c:	3301      	adds	r3, #1
    253e:	60e3      	str	r3, [r4, #12]
                Ringbuf_Depth_Update(b);
    2540:	0020      	movs	r0, r4
    2542:	4b06      	ldr	r3, [pc, #24]	; (255c <Ringbuf_Data_Put+0x4c>)
    2544:	4798      	blx	r3
                status = true;
    2546:	3501      	adds	r5, #1
    2548:	e7f5      	b.n	2536 <Ringbuf_Data_Put+0x26>
    bool status = false;
    254a:	2500      	movs	r5, #0
    254c:	e7f3      	b.n	2536 <Ringbuf_Data_Put+0x26>
    254e:	2500      	movs	r5, #0
    2550:	e7f1      	b.n	2536 <Ringbuf_Data_Put+0x26>
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	00002429 	.word	0x00002429
    2558:	0000ccbd 	.word	0x0000ccbd
    255c:	00002411 	.word	0x00002411

00002560 <Ringbuf_Init>:
 */
bool Ringbuf_Init(RING_BUFFER *b,
    volatile uint8_t *buffer,
    unsigned element_size,
    unsigned element_count)
{
    2560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2562:	0004      	movs	r4, r0
    2564:	000f      	movs	r7, r1
    2566:	0016      	movs	r6, r2
    2568:	001d      	movs	r5, r3
    bool status = false;

    if (b && isPowerOfTwo(element_count)) {
    256a:	2800      	cmp	r0, #0
    256c:	d00c      	beq.n	2588 <Ringbuf_Init+0x28>
    256e:	0018      	movs	r0, r3
    2570:	4b06      	ldr	r3, [pc, #24]	; (258c <Ringbuf_Init+0x2c>)
    2572:	4798      	blx	r3
    2574:	2800      	cmp	r0, #0
    2576:	d006      	beq.n	2586 <Ringbuf_Init+0x26>
        b->head = 0;
    2578:	2300      	movs	r3, #0
    257a:	60e3      	str	r3, [r4, #12]
        b->tail = 0;
    257c:	6123      	str	r3, [r4, #16]
        b->buffer = buffer;
    257e:	6027      	str	r7, [r4, #0]
        b->element_size = element_size;
    2580:	6066      	str	r6, [r4, #4]
        b->element_count = element_count;
    2582:	60a5      	str	r5, [r4, #8]
        /* tuning diagnostics */
        b->depth = 0;
    2584:	6163      	str	r3, [r4, #20]
        status = true;
    }

    return status;
}
    2586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool status = false;
    2588:	2000      	movs	r0, #0
    258a:	e7fc      	b.n	2586 <Ringbuf_Init+0x26>
    258c:	000023e9 	.word	0x000023e9

00002590 <FIFO_Count>:
 */
unsigned FIFO_Count(FIFO_BUFFER const *b)
{
    unsigned head, tail; /* used to avoid volatile decision */

    if (b) {
    2590:	2800      	cmp	r0, #0
    2592:	d003      	beq.n	259c <FIFO_Count+0xc>
        head = b->head;
    2594:	6803      	ldr	r3, [r0, #0]
        tail = b->tail;
    2596:	6840      	ldr	r0, [r0, #4]
        return head - tail;
    2598:	1a18      	subs	r0, r3, r0
    } else {
        return 0;
    }
}
    259a:	4770      	bx	lr
        return 0;
    259c:	2000      	movs	r0, #0
    259e:	e7fc      	b.n	259a <FIFO_Count+0xa>

000025a0 <FIFO_Full>:
 * @param b - pointer to FIFO_BUFFER structure
 *
 * @return true if the FIFO is full, false if it is not.
 */
bool FIFO_Full(FIFO_BUFFER const *b)
{
    25a0:	b510      	push	{r4, lr}
    25a2:	1e04      	subs	r4, r0, #0
    return (b ? (FIFO_Count(b) == b->buffer_len) : true);
    25a4:	d006      	beq.n	25b4 <FIFO_Full+0x14>
    25a6:	4b05      	ldr	r3, [pc, #20]	; (25bc <FIFO_Full+0x1c>)
    25a8:	4798      	blx	r3
    25aa:	68e3      	ldr	r3, [r4, #12]
    25ac:	4298      	cmp	r0, r3
    25ae:	d003      	beq.n	25b8 <FIFO_Full+0x18>
    25b0:	2000      	movs	r0, #0
}
    25b2:	bd10      	pop	{r4, pc}
    return (b ? (FIFO_Count(b) == b->buffer_len) : true);
    25b4:	2001      	movs	r0, #1
    25b6:	e7fc      	b.n	25b2 <FIFO_Full+0x12>
    25b8:	2001      	movs	r0, #1
    25ba:	e7fa      	b.n	25b2 <FIFO_Full+0x12>
    25bc:	00002591 	.word	0x00002591

000025c0 <FIFO_Empty>:
 *
 * @param b - pointer to FIFO_BUFFER structure
 * @return true if the FIFO is empty, false if it is not.
 */
bool FIFO_Empty(FIFO_BUFFER const *b)
{
    25c0:	b510      	push	{r4, lr}
    return (b ? (FIFO_Count(b) == 0) : true);
    25c2:	2800      	cmp	r0, #0
    25c4:	d007      	beq.n	25d6 <FIFO_Empty+0x16>
    25c6:	4b05      	ldr	r3, [pc, #20]	; (25dc <FIFO_Empty+0x1c>)
    25c8:	4798      	blx	r3
    25ca:	2800      	cmp	r0, #0
    25cc:	d101      	bne.n	25d2 <FIFO_Empty+0x12>
    25ce:	2001      	movs	r0, #1
}
    25d0:	bd10      	pop	{r4, pc}
    return (b ? (FIFO_Count(b) == 0) : true);
    25d2:	2000      	movs	r0, #0
    25d4:	e7fc      	b.n	25d0 <FIFO_Empty+0x10>
    25d6:	2001      	movs	r0, #1
    25d8:	e7fa      	b.n	25d0 <FIFO_Empty+0x10>
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	00002591 	.word	0x00002591

000025e0 <FIFO_Get>:
 * @param b - pointer to FIFO_BUFFER structure
 *
 * @return the data
 */
uint8_t FIFO_Get(FIFO_BUFFER *b)
{
    25e0:	b510      	push	{r4, lr}
    25e2:	0004      	movs	r4, r0
    uint8_t data_byte = 0;
    unsigned index;

    if (!FIFO_Empty(b)) {
    25e4:	4b09      	ldr	r3, [pc, #36]	; (260c <FIFO_Get+0x2c>)
    25e6:	4798      	blx	r3
    25e8:	2800      	cmp	r0, #0
    25ea:	d10c      	bne.n	2606 <FIFO_Get+0x26>
        index = b->tail % b->buffer_len;
    25ec:	6860      	ldr	r0, [r4, #4]
    25ee:	68e1      	ldr	r1, [r4, #12]
    25f0:	4b07      	ldr	r3, [pc, #28]	; (2610 <FIFO_Get+0x30>)
    25f2:	4798      	blx	r3
        data_byte = b->buffer[index];
    25f4:	68a3      	ldr	r3, [r4, #8]
    25f6:	469c      	mov	ip, r3
    25f8:	4461      	add	r1, ip
    25fa:	7808      	ldrb	r0, [r1, #0]
    25fc:	b2c0      	uxtb	r0, r0
        b->tail++;
    25fe:	6863      	ldr	r3, [r4, #4]
    2600:	3301      	adds	r3, #1
    2602:	6063      	str	r3, [r4, #4]
    }
    return data_byte;
}
    2604:	bd10      	pop	{r4, pc}
    uint8_t data_byte = 0;
    2606:	2000      	movs	r0, #0
    2608:	e7fc      	b.n	2604 <FIFO_Get+0x24>
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	000025c1 	.word	0x000025c1
    2610:	0000ccbd 	.word	0x0000ccbd

00002614 <FIFO_Put>:
 * @param  data_byte [in] - data to put into the FIFO
 *
 * @return true on successful add, false if not added
 */
bool FIFO_Put(FIFO_BUFFER *b, uint8_t data_byte)
{
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	0004      	movs	r4, r0
    2618:	000d      	movs	r5, r1
    bool status = false; /* return value */
    unsigned index;

    if (b) {
    261a:	2800      	cmp	r0, #0
    261c:	d010      	beq.n	2640 <FIFO_Put+0x2c>
        /* limit the buffer to prevent overwriting */
        if (!FIFO_Full(b)) {
    261e:	4b0a      	ldr	r3, [pc, #40]	; (2648 <FIFO_Put+0x34>)
    2620:	4798      	blx	r3
    2622:	2800      	cmp	r0, #0
    2624:	d10e      	bne.n	2644 <FIFO_Put+0x30>
            index = b->head % b->buffer_len;
    2626:	6820      	ldr	r0, [r4, #0]
    2628:	68e1      	ldr	r1, [r4, #12]
    262a:	4b08      	ldr	r3, [pc, #32]	; (264c <FIFO_Put+0x38>)
    262c:	4798      	blx	r3
            b->buffer[index] = data_byte;
    262e:	68a3      	ldr	r3, [r4, #8]
    2630:	469c      	mov	ip, r3
    2632:	4461      	add	r1, ip
    2634:	700d      	strb	r5, [r1, #0]
            b->head++;
    2636:	6823      	ldr	r3, [r4, #0]
    2638:	3301      	adds	r3, #1
    263a:	6023      	str	r3, [r4, #0]
            status = true;
    263c:	2001      	movs	r0, #1
        }
    }

    return status;
}
    263e:	bd70      	pop	{r4, r5, r6, pc}
    bool status = false; /* return value */
    2640:	2000      	movs	r0, #0
    2642:	e7fc      	b.n	263e <FIFO_Put+0x2a>
    2644:	2000      	movs	r0, #0
    2646:	e7fa      	b.n	263e <FIFO_Put+0x2a>
    2648:	000025a1 	.word	0x000025a1
    264c:	0000ccbd 	.word	0x0000ccbd

00002650 <FIFO_Init>:
 *
 * @return      none
 */
void FIFO_Init(FIFO_BUFFER *b, volatile uint8_t *buffer, unsigned buffer_len)
{
    if (b && buffer && buffer_len) {
    2650:	2800      	cmp	r0, #0
    2652:	d008      	beq.n	2666 <FIFO_Init+0x16>
    2654:	2900      	cmp	r1, #0
    2656:	d006      	beq.n	2666 <FIFO_Init+0x16>
    2658:	2a00      	cmp	r2, #0
    265a:	d004      	beq.n	2666 <FIFO_Init+0x16>
        b->head = 0;
    265c:	2300      	movs	r3, #0
    265e:	6003      	str	r3, [r0, #0]
        b->tail = 0;
    2660:	6043      	str	r3, [r0, #4]
        b->buffer = buffer;
    2662:	6081      	str	r1, [r0, #8]
        b->buffer_len = buffer_len;
    2664:	60c2      	str	r2, [r0, #12]
    }

    return;
}
    2666:	4770      	bx	lr

00002668 <mstimer_set>:
 *
 * @param t A pointer to the timer
 * @param interval The interval before the timer expires.
 */
void mstimer_set(struct mstimer *t, unsigned long interval)
{
    2668:	b510      	push	{r4, lr}
    266a:	0004      	movs	r4, r0
    t->interval = interval;
    266c:	6041      	str	r1, [r0, #4]
    t->start = mstimer_now();
    266e:	4b02      	ldr	r3, [pc, #8]	; (2678 <mstimer_set+0x10>)
    2670:	4798      	blx	r3
    2672:	6020      	str	r0, [r4, #0]
}
    2674:	bd10      	pop	{r4, pc}
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	00009941 	.word	0x00009941

0000267c <mstimer_reset>:
 * @param t A pointer to the timer.
 * @sa mstimer_restart()
 */
void mstimer_reset(struct mstimer *t)
{
    t->start += t->interval;
    267c:	6803      	ldr	r3, [r0, #0]
    267e:	6842      	ldr	r2, [r0, #4]
    2680:	4694      	mov	ip, r2
    2682:	4463      	add	r3, ip
    2684:	6003      	str	r3, [r0, #0]
}
    2686:	4770      	bx	lr

00002688 <mstimer_expired>:
 *
 * @param t A pointer to the timer
 * @return Non-zero if the timer has expired, zero otherwise.
 */
int mstimer_expired(struct mstimer *t)
{
    2688:	b510      	push	{r4, lr}
    268a:	0004      	movs	r4, r0
    if (t->interval) {
    268c:	6843      	ldr	r3, [r0, #4]
    268e:	2b00      	cmp	r3, #0
    2690:	d101      	bne.n	2696 <mstimer_expired+0xe>
        return ((unsigned long)((mstimer_now()) - (t->start + t->interval)) <
            ((unsigned long)(~((unsigned long)0)) >> 1));
    }

    return 0;
    2692:	2000      	movs	r0, #0
}
    2694:	bd10      	pop	{r4, pc}
        return ((unsigned long)((mstimer_now()) - (t->start + t->interval)) <
    2696:	4b05      	ldr	r3, [pc, #20]	; (26ac <mstimer_expired+0x24>)
    2698:	4798      	blx	r3
    269a:	6823      	ldr	r3, [r4, #0]
    269c:	6862      	ldr	r2, [r4, #4]
    269e:	189b      	adds	r3, r3, r2
    26a0:	1ac3      	subs	r3, r0, r3
    26a2:	2000      	movs	r0, #0
    26a4:	4a02      	ldr	r2, [pc, #8]	; (26b0 <mstimer_expired+0x28>)
    26a6:	429a      	cmp	r2, r3
    26a8:	4140      	adcs	r0, r0
    26aa:	e7f3      	b.n	2694 <mstimer_expired+0xc>
    26ac:	00009941 	.word	0x00009941
    26b0:	7ffffffe 	.word	0x7ffffffe

000026b4 <mstimer_elapsed>:
 *
 * @return The time elapsed since the last start of the timer
 *
 */
unsigned long mstimer_elapsed(struct mstimer *t)
{
    26b4:	b510      	push	{r4, lr}
    26b6:	0004      	movs	r4, r0
  return mstimer_now() - t->start;
    26b8:	4b02      	ldr	r3, [pc, #8]	; (26c4 <mstimer_elapsed+0x10>)
    26ba:	4798      	blx	r3
    26bc:	6823      	ldr	r3, [r4, #0]
    26be:	1ac0      	subs	r0, r0, r3
}
    26c0:	bd10      	pop	{r4, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	00009941 	.word	0x00009941

000026c8 <bacnet_address_same>:
        }
    }
}

bool bacnet_address_same(BACNET_ADDRESS *dest, BACNET_ADDRESS *src)
{
    26c8:	b570      	push	{r4, r5, r6, lr}
    uint8_t i = 0; /* loop counter */
    uint8_t max_len = 0; /* used for dynamic max */

    if (dest == src) { /* same ? */
    26ca:	4288      	cmp	r0, r1
    26cc:	d033      	beq.n	2736 <bacnet_address_same+0x6e>
        return true;
    }

    if (dest->net != src->net) {
    26ce:	8906      	ldrh	r6, [r0, #8]
    26d0:	890b      	ldrh	r3, [r1, #8]
    26d2:	429e      	cmp	r6, r3
    26d4:	d001      	beq.n	26da <bacnet_address_same+0x12>
        return false;
    26d6:	2000      	movs	r0, #0
                return false;
            }
        }
    }
    return true;
}
    26d8:	bd70      	pop	{r4, r5, r6, pc}
    if (dest->len != src->len) {
    26da:	7a85      	ldrb	r5, [r0, #10]
    26dc:	7a8b      	ldrb	r3, [r1, #10]
    26de:	429d      	cmp	r5, r3
    26e0:	d001      	beq.n	26e6 <bacnet_address_same+0x1e>
        return false;
    26e2:	2000      	movs	r0, #0
    26e4:	e7f8      	b.n	26d8 <bacnet_address_same+0x10>
    if (max_len > MAX_MAC_LEN) {
    26e6:	2d07      	cmp	r5, #7
    26e8:	d900      	bls.n	26ec <bacnet_address_same+0x24>
        max_len = MAX_MAC_LEN;
    26ea:	2507      	movs	r5, #7
    for (i = 0; i < max_len; i++) {
    26ec:	2300      	movs	r3, #0
    26ee:	42ab      	cmp	r3, r5
    26f0:	d208      	bcs.n	2704 <bacnet_address_same+0x3c>
        if (dest->adr[i] != src->adr[i]) {
    26f2:	18c2      	adds	r2, r0, r3
    26f4:	7ad4      	ldrb	r4, [r2, #11]
    26f6:	18ca      	adds	r2, r1, r3
    26f8:	7ad2      	ldrb	r2, [r2, #11]
    26fa:	4294      	cmp	r4, r2
    26fc:	d11d      	bne.n	273a <bacnet_address_same+0x72>
    for (i = 0; i < max_len; i++) {
    26fe:	3301      	adds	r3, #1
    2700:	b2db      	uxtb	r3, r3
    2702:	e7f4      	b.n	26ee <bacnet_address_same+0x26>
    if (dest->net == 0) {
    2704:	2e00      	cmp	r6, #0
    2706:	d11a      	bne.n	273e <bacnet_address_same+0x76>
        if (dest->mac_len != src->mac_len) {
    2708:	7805      	ldrb	r5, [r0, #0]
    270a:	780b      	ldrb	r3, [r1, #0]
    270c:	429d      	cmp	r5, r3
    270e:	d001      	beq.n	2714 <bacnet_address_same+0x4c>
            return false;
    2710:	2000      	movs	r0, #0
    2712:	e7e1      	b.n	26d8 <bacnet_address_same+0x10>
        if (max_len > MAX_MAC_LEN) {
    2714:	2d07      	cmp	r5, #7
    2716:	d900      	bls.n	271a <bacnet_address_same+0x52>
            max_len = MAX_MAC_LEN;
    2718:	2507      	movs	r5, #7
        for (i = 0; i < max_len; i++) {
    271a:	2300      	movs	r3, #0
    271c:	42ab      	cmp	r3, r5
    271e:	d208      	bcs.n	2732 <bacnet_address_same+0x6a>
            if (dest->mac[i] != src->mac[i]) {
    2720:	18c2      	adds	r2, r0, r3
    2722:	7854      	ldrb	r4, [r2, #1]
    2724:	18ca      	adds	r2, r1, r3
    2726:	7852      	ldrb	r2, [r2, #1]
    2728:	4294      	cmp	r4, r2
    272a:	d10a      	bne.n	2742 <bacnet_address_same+0x7a>
        for (i = 0; i < max_len; i++) {
    272c:	3301      	adds	r3, #1
    272e:	b2db      	uxtb	r3, r3
    2730:	e7f4      	b.n	271c <bacnet_address_same+0x54>
    return true;
    2732:	2001      	movs	r0, #1
    2734:	e7d0      	b.n	26d8 <bacnet_address_same+0x10>
        return true;
    2736:	2001      	movs	r0, #1
    2738:	e7ce      	b.n	26d8 <bacnet_address_same+0x10>
            return false;
    273a:	2000      	movs	r0, #0
    273c:	e7cc      	b.n	26d8 <bacnet_address_same+0x10>
    return true;
    273e:	2001      	movs	r0, #1
    2740:	e7ca      	b.n	26d8 <bacnet_address_same+0x10>
                return false;
    2742:	2000      	movs	r0, #0
    2744:	e7c8      	b.n	26d8 <bacnet_address_same+0x10>
	...

00002748 <bacapp_decode_data>:
   Return the number of octets consumed. */
int bacapp_decode_data(uint8_t *apdu,
    uint8_t tag_data_type,
    uint32_t len_value_type,
    BACNET_APPLICATION_DATA_VALUE *value)
{
    2748:	b5f0      	push	{r4, r5, r6, r7, lr}
    274a:	b083      	sub	sp, #12
    274c:	000c      	movs	r4, r1
    274e:	0011      	movs	r1, r2
    2750:	001d      	movs	r5, r3
    int len = 0;

    if (apdu && value) {
    2752:	2800      	cmp	r0, #0
    2754:	d054      	beq.n	2800 <bacapp_decode_data+0xb8>
    2756:	2b00      	cmp	r3, #0
    2758:	d061      	beq.n	281e <bacapp_decode_data+0xd6>
        switch (tag_data_type) {
    275a:	2c21      	cmp	r4, #33	; 0x21
    275c:	d861      	bhi.n	2822 <bacapp_decode_data+0xda>
    275e:	00a3      	lsls	r3, r4, #2
    2760:	4a31      	ldr	r2, [pc, #196]	; (2828 <bacapp_decode_data+0xe0>)
    2762:	58d3      	ldr	r3, [r2, r3]
    2764:	469f      	mov	pc, r3
                /* nothing else to do */
                break;
#endif
#if defined(BACAPP_BOOLEAN)
            case BACNET_APPLICATION_TAG_BOOLEAN:
                value->type.Boolean = decode_boolean(len_value_type);
    2766:	0008      	movs	r0, r1
    2768:	4b30      	ldr	r3, [pc, #192]	; (282c <bacapp_decode_data+0xe4>)
    276a:	4798      	blx	r3
    276c:	7228      	strb	r0, [r5, #8]
    int len = 0;
    276e:	2000      	movs	r0, #0
                break;
    2770:	e047      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_UNSIGNED)
            case BACNET_APPLICATION_TAG_UNSIGNED_INT:
                len = decode_unsigned(
    2772:	002a      	movs	r2, r5
    2774:	3208      	adds	r2, #8
    2776:	4b2e      	ldr	r3, [pc, #184]	; (2830 <bacapp_decode_data+0xe8>)
    2778:	4798      	blx	r3
                    &apdu[0], len_value_type, &value->type.Unsigned_Int);
                break;
    277a:	e042      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_SIGNED)
            case BACNET_APPLICATION_TAG_SIGNED_INT:
                len = decode_signed(
    277c:	002a      	movs	r2, r5
    277e:	3208      	adds	r2, #8
    2780:	4b2c      	ldr	r3, [pc, #176]	; (2834 <bacapp_decode_data+0xec>)
    2782:	4798      	blx	r3
                    &apdu[0], len_value_type, &value->type.Signed_Int);
                break;
    2784:	e03d      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_REAL)
            case BACNET_APPLICATION_TAG_REAL:
                len = decode_real_safe(
    2786:	002a      	movs	r2, r5
    2788:	3208      	adds	r2, #8
    278a:	4b2b      	ldr	r3, [pc, #172]	; (2838 <bacapp_decode_data+0xf0>)
    278c:	4798      	blx	r3
                    &apdu[0], len_value_type, &(value->type.Real));
                break;
    278e:	e038      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_DOUBLE)
            case BACNET_APPLICATION_TAG_DOUBLE:
                len = decode_double_safe(
    2790:	002a      	movs	r2, r5
    2792:	3208      	adds	r2, #8
    2794:	4b29      	ldr	r3, [pc, #164]	; (283c <bacapp_decode_data+0xf4>)
    2796:	4798      	blx	r3
                    &apdu[0], len_value_type, &(value->type.Double));
                break;
    2798:	e033      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_OCTET_STRING)
            case BACNET_APPLICATION_TAG_OCTET_STRING:
                len = decode_octet_string(
    279a:	002a      	movs	r2, r5
    279c:	3208      	adds	r2, #8
    279e:	4b28      	ldr	r3, [pc, #160]	; (2840 <bacapp_decode_data+0xf8>)
    27a0:	4798      	blx	r3
                    &apdu[0], len_value_type, &value->type.Octet_String);
                break;
    27a2:	e02e      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_CHARACTER_STRING)
            case BACNET_APPLICATION_TAG_CHARACTER_STRING:
                len = decode_character_string(
    27a4:	002a      	movs	r2, r5
    27a6:	3208      	adds	r2, #8
    27a8:	4b26      	ldr	r3, [pc, #152]	; (2844 <bacapp_decode_data+0xfc>)
    27aa:	4798      	blx	r3
                    &apdu[0], len_value_type, &value->type.Character_String);
                break;
    27ac:	e029      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_BIT_STRING)
            case BACNET_APPLICATION_TAG_BIT_STRING:
                len = decode_bitstring(
    27ae:	002a      	movs	r2, r5
    27b0:	3208      	adds	r2, #8
    27b2:	4b25      	ldr	r3, [pc, #148]	; (2848 <bacapp_decode_data+0x100>)
    27b4:	4798      	blx	r3
                    &apdu[0], len_value_type, &value->type.Bit_String);
                break;
    27b6:	e024      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_ENUMERATED)
            case BACNET_APPLICATION_TAG_ENUMERATED:
                len = decode_enumerated(
    27b8:	002a      	movs	r2, r5
    27ba:	3208      	adds	r2, #8
    27bc:	4b23      	ldr	r3, [pc, #140]	; (284c <bacapp_decode_data+0x104>)
    27be:	4798      	blx	r3
                    &apdu[0], len_value_type, &value->type.Enumerated);
                break;
    27c0:	e01f      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_DATE)
            case BACNET_APPLICATION_TAG_DATE:
                len = decode_date_safe(
    27c2:	002a      	movs	r2, r5
    27c4:	3208      	adds	r2, #8
    27c6:	4b22      	ldr	r3, [pc, #136]	; (2850 <bacapp_decode_data+0x108>)
    27c8:	4798      	blx	r3
                    &apdu[0], len_value_type, &value->type.Date);
                break;
    27ca:	e01a      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_TIME)
            case BACNET_APPLICATION_TAG_TIME:
                len = decode_bacnet_time_safe(
    27cc:	002a      	movs	r2, r5
    27ce:	3208      	adds	r2, #8
    27d0:	4b20      	ldr	r3, [pc, #128]	; (2854 <bacapp_decode_data+0x10c>)
    27d2:	4798      	blx	r3
                    &apdu[0], len_value_type, &value->type.Time);
                break;
    27d4:	e015      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_OBJECT_ID)
            case BACNET_APPLICATION_TAG_OBJECT_ID: {
                BACNET_OBJECT_TYPE object_type = OBJECT_NONE;
    27d6:	466b      	mov	r3, sp
    27d8:	1c9e      	adds	r6, r3, #2
    27da:	2301      	movs	r3, #1
    27dc:	425b      	negs	r3, r3
    27de:	8033      	strh	r3, [r6, #0]
                uint32_t instance = 0;
    27e0:	2300      	movs	r3, #0
    27e2:	9301      	str	r3, [sp, #4]
                len = bacnet_object_id_decode(
    27e4:	ab01      	add	r3, sp, #4
    27e6:	0032      	movs	r2, r6
    27e8:	4f1b      	ldr	r7, [pc, #108]	; (2858 <bacapp_decode_data+0x110>)
    27ea:	47b8      	blx	r7
                    &apdu[0], len_value_type, &object_type, &instance);
                value->type.Object_Id.type = object_type;
    27ec:	8833      	ldrh	r3, [r6, #0]
    27ee:	812b      	strh	r3, [r5, #8]
                value->type.Object_Id.instance = instance;
    27f0:	9b01      	ldr	r3, [sp, #4]
    27f2:	60eb      	str	r3, [r5, #12]
            } break;
    27f4:	e005      	b.n	2802 <bacapp_decode_data+0xba>
#endif
#if defined(BACAPP_LIGHTING_COMMAND)
            case BACNET_APPLICATION_TAG_LIGHTING_COMMAND:
                len = lighting_command_decode(
    27f6:	002a      	movs	r2, r5
    27f8:	3208      	adds	r2, #8
    27fa:	4b18      	ldr	r3, [pc, #96]	; (285c <bacapp_decode_data+0x114>)
    27fc:	4798      	blx	r3
                    &apdu[0], len_value_type, &value->type.Lighting_Command);
                break;
    27fe:	e000      	b.n	2802 <bacapp_decode_data+0xba>
    int len = 0;
    2800:	2000      	movs	r0, #0
            default:
                break;
        }
    }

    if ((len == 0) && (tag_data_type != BACNET_APPLICATION_TAG_NULL) &&
    2802:	2800      	cmp	r0, #0
    2804:	d109      	bne.n	281a <bacapp_decode_data+0xd2>
    2806:	2c00      	cmp	r4, #0
    2808:	d007      	beq.n	281a <bacapp_decode_data+0xd2>
    280a:	2c01      	cmp	r4, #1
    280c:	d005      	beq.n	281a <bacapp_decode_data+0xd2>
        (tag_data_type != BACNET_APPLICATION_TAG_BOOLEAN) &&
    280e:	2c06      	cmp	r4, #6
    2810:	d003      	beq.n	281a <bacapp_decode_data+0xd2>
        (tag_data_type != BACNET_APPLICATION_TAG_OCTET_STRING)) {
        /* indicate that we were not able to decode the value */
        if (value) {
    2812:	2d00      	cmp	r5, #0
    2814:	d001      	beq.n	281a <bacapp_decode_data+0xd2>
            value->tag = MAX_BACNET_APPLICATION_TAG;
    2816:	2310      	movs	r3, #16
    2818:	70ab      	strb	r3, [r5, #2]
        }
    }
    return len;
}
    281a:	b003      	add	sp, #12
    281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int len = 0;
    281e:	2000      	movs	r0, #0
    2820:	e7ef      	b.n	2802 <bacapp_decode_data+0xba>
    2822:	2000      	movs	r0, #0
    2824:	e7ed      	b.n	2802 <bacapp_decode_data+0xba>
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	0000e524 	.word	0x0000e524
    282c:	00002fc9 	.word	0x00002fc9
    2830:	000034ed 	.word	0x000034ed
    2834:	000037c5 	.word	0x000037c5
    2838:	00003dc9 	.word	0x00003dc9
    283c:	00003e51 	.word	0x00003e51
    2840:	00003259 	.word	0x00003259
    2844:	00003355 	.word	0x00003355
    2848:	00002fd1 	.word	0x00002fd1
    284c:	0000363d 	.word	0x0000363d
    2850:	00003881 	.word	0x00003881
    2854:	00003841 	.word	0x00003841
    2858:	00003115 	.word	0x00003115
    285c:	0000970d 	.word	0x0000970d

00002860 <bacapp_decode_data_len>:
    uint8_t *apdu, uint8_t tag_data_type, uint32_t len_value_type)
{
    int len = 0;

    (void)apdu;
    switch (tag_data_type) {
    2860:	3902      	subs	r1, #2
    2862:	b2c9      	uxtb	r1, r1
    2864:	290a      	cmp	r1, #10
    2866:	d801      	bhi.n	286c <bacapp_decode_data_len+0xc>
        case BACNET_APPLICATION_TAG_BIT_STRING:
        case BACNET_APPLICATION_TAG_ENUMERATED:
        case BACNET_APPLICATION_TAG_DATE:
        case BACNET_APPLICATION_TAG_TIME:
        case BACNET_APPLICATION_TAG_OBJECT_ID:
            len = (int)len_value_type;
    2868:	0010      	movs	r0, r2
        default:
            break;
    }

    return len;
}
    286a:	4770      	bx	lr
    int len = 0;
    286c:	2000      	movs	r0, #0
    return len;
    286e:	e7fc      	b.n	286a <bacapp_decode_data_len+0xa>

00002870 <bacapp_decode_application_data>:
{
    2870:	b5f0      	push	{r4, r5, r6, r7, lr}
    2872:	46ce      	mov	lr, r9
    2874:	4647      	mov	r7, r8
    2876:	b580      	push	{r7, lr}
    2878:	b083      	sub	sp, #12
    287a:	0004      	movs	r4, r0
    287c:	000e      	movs	r6, r1
    287e:	0017      	movs	r7, r2
    uint8_t tag_number = 0;
    2880:	2300      	movs	r3, #0
    2882:	466a      	mov	r2, sp
    2884:	71d3      	strb	r3, [r2, #7]
    uint32_t len_value_type = 0;
    2886:	9300      	str	r3, [sp, #0]
    if (apdu && value && !IS_CONTEXT_SPECIFIC(*apdu)) {
    2888:	2800      	cmp	r0, #0
    288a:	d03e      	beq.n	290a <bacapp_decode_application_data+0x9a>
    288c:	2f00      	cmp	r7, #0
    288e:	d03e      	beq.n	290e <bacapp_decode_application_data+0x9e>
    2890:	7803      	ldrb	r3, [r0, #0]
    2892:	071b      	lsls	r3, r3, #28
    2894:	d505      	bpl.n	28a2 <bacapp_decode_application_data+0x32>
    int len = 0;
    2896:	2000      	movs	r0, #0
}
    2898:	b003      	add	sp, #12
    289a:	bc0c      	pop	{r2, r3}
    289c:	4690      	mov	r8, r2
    289e:	4699      	mov	r9, r3
    28a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        value->context_specific = false;
    28a2:	2300      	movs	r3, #0
    28a4:	703b      	strb	r3, [r7, #0]
        tag_len = bacnet_tag_number_and_value_decode(
    28a6:	466b      	mov	r3, sp
    28a8:	466a      	mov	r2, sp
    28aa:	3207      	adds	r2, #7
    28ac:	4d19      	ldr	r5, [pc, #100]	; (2914 <bacapp_decode_application_data+0xa4>)
    28ae:	47a8      	blx	r5
    28b0:	1e05      	subs	r5, r0, #0
        if (tag_len > 0) {
    28b2:	dd1e      	ble.n	28f2 <bacapp_decode_application_data+0x82>
            value->tag = tag_number;
    28b4:	466b      	mov	r3, sp
    28b6:	3307      	adds	r3, #7
    28b8:	781b      	ldrb	r3, [r3, #0]
    28ba:	4698      	mov	r8, r3
    28bc:	70bb      	strb	r3, [r7, #2]
            if ((unsigned)len <= apdu_len_max) {
    28be:	4286      	cmp	r6, r0
    28c0:	d319      	bcc.n	28f6 <bacapp_decode_application_data+0x86>
                    bacapp_decode_data_len(NULL, tag_number, len_value_type);
    28c2:	9b00      	ldr	r3, [sp, #0]
    28c4:	4699      	mov	r9, r3
                decode_len =
    28c6:	001a      	movs	r2, r3
    28c8:	4641      	mov	r1, r8
    28ca:	2000      	movs	r0, #0
    28cc:	4b12      	ldr	r3, [pc, #72]	; (2918 <bacapp_decode_application_data+0xa8>)
    28ce:	4798      	blx	r3
                if ((unsigned)decode_len <= (apdu_len_max - len)) {
    28d0:	1b76      	subs	r6, r6, r5
    28d2:	4286      	cmp	r6, r0
    28d4:	d202      	bcs.n	28dc <bacapp_decode_application_data+0x6c>
                    len = BACNET_STATUS_ERROR;
    28d6:	2001      	movs	r0, #1
    28d8:	4240      	negs	r0, r0
    28da:	e00e      	b.n	28fa <bacapp_decode_application_data+0x8a>
                    decode_len = bacapp_decode_data(
    28dc:	1960      	adds	r0, r4, r5
    28de:	003b      	movs	r3, r7
    28e0:	464a      	mov	r2, r9
    28e2:	4641      	mov	r1, r8
    28e4:	4c0d      	ldr	r4, [pc, #52]	; (291c <bacapp_decode_application_data+0xac>)
    28e6:	47a0      	blx	r4
                    if (value->tag != MAX_BACNET_APPLICATION_TAG) {
    28e8:	78bb      	ldrb	r3, [r7, #2]
    28ea:	2b10      	cmp	r3, #16
    28ec:	d00a      	beq.n	2904 <bacapp_decode_application_data+0x94>
                        len += decode_len;
    28ee:	1828      	adds	r0, r5, r0
    28f0:	e003      	b.n	28fa <bacapp_decode_application_data+0x8a>
    int len = 0;
    28f2:	2000      	movs	r0, #0
    28f4:	e001      	b.n	28fa <bacapp_decode_application_data+0x8a>
                len = BACNET_STATUS_ERROR;
    28f6:	2001      	movs	r0, #1
    28f8:	4240      	negs	r0, r0
        value->next = NULL;
    28fa:	2200      	movs	r2, #0
    28fc:	23f4      	movs	r3, #244	; 0xf4
    28fe:	005b      	lsls	r3, r3, #1
    2900:	50fa      	str	r2, [r7, r3]
    2902:	e7c9      	b.n	2898 <bacapp_decode_application_data+0x28>
                        len = BACNET_STATUS_ERROR;
    2904:	2001      	movs	r0, #1
    2906:	4240      	negs	r0, r0
    2908:	e7f7      	b.n	28fa <bacapp_decode_application_data+0x8a>
    int len = 0;
    290a:	2000      	movs	r0, #0
    290c:	e7c4      	b.n	2898 <bacapp_decode_application_data+0x28>
    290e:	2000      	movs	r0, #0
    2910:	e7c2      	b.n	2898 <bacapp_decode_application_data+0x28>
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	00002e51 	.word	0x00002e51
    2918:	00002861 	.word	0x00002861
    291c:	00002749 	.word	0x00002749

00002920 <bacapp_decode_application_data_len>:
 * @param apdu_len_max - number of bytes in the buffer
 *
 * @return  number of bytes decoded, or zero if errors occur
 */
int bacapp_decode_application_data_len(uint8_t *apdu, unsigned apdu_len_max)
{
    2920:	b510      	push	{r4, lr}
    2922:	b082      	sub	sp, #8
    int len = 0;
    int tag_len = 0;
    int decode_len = 0;
    uint8_t tag_number = 0;
    2924:	2300      	movs	r3, #0
    2926:	466a      	mov	r2, sp
    2928:	71d3      	strb	r3, [r2, #7]
    uint32_t len_value_type = 0;
    292a:	9300      	str	r3, [sp, #0]

    if (apdu && !IS_CONTEXT_SPECIFIC(*apdu)) {
    292c:	2800      	cmp	r0, #0
    292e:	d014      	beq.n	295a <bacapp_decode_application_data_len+0x3a>
    2930:	7803      	ldrb	r3, [r0, #0]
    2932:	071b      	lsls	r3, r3, #28
    2934:	d502      	bpl.n	293c <bacapp_decode_application_data_len+0x1c>
    int len = 0;
    2936:	2000      	movs	r0, #0
            len += decode_len;
        }
    }

    return len;
}
    2938:	b002      	add	sp, #8
    293a:	bd10      	pop	{r4, pc}
        tag_len = bacnet_tag_number_and_value_decode(
    293c:	466b      	mov	r3, sp
    293e:	466a      	mov	r2, sp
    2940:	3207      	adds	r2, #7
    2942:	4c08      	ldr	r4, [pc, #32]	; (2964 <bacapp_decode_application_data_len+0x44>)
    2944:	47a0      	blx	r4
    2946:	1e04      	subs	r4, r0, #0
        if (tag_len > 0) {
    2948:	dd09      	ble.n	295e <bacapp_decode_application_data_len+0x3e>
                bacapp_decode_data_len(NULL, tag_number, len_value_type);
    294a:	466b      	mov	r3, sp
    294c:	79d9      	ldrb	r1, [r3, #7]
            decode_len =
    294e:	9a00      	ldr	r2, [sp, #0]
    2950:	2000      	movs	r0, #0
    2952:	4b05      	ldr	r3, [pc, #20]	; (2968 <bacapp_decode_application_data_len+0x48>)
    2954:	4798      	blx	r3
            len += decode_len;
    2956:	1820      	adds	r0, r4, r0
    2958:	e7ee      	b.n	2938 <bacapp_decode_application_data_len+0x18>
    int len = 0;
    295a:	2000      	movs	r0, #0
    295c:	e7ec      	b.n	2938 <bacapp_decode_application_data_len+0x18>
    295e:	2000      	movs	r0, #0
    return len;
    2960:	e7ea      	b.n	2938 <bacapp_decode_application_data_len+0x18>
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	00002e51 	.word	0x00002e51
    2968:	00002861 	.word	0x00002861

0000296c <bacapp_context_tag_type>:
BACNET_APPLICATION_TAG bacapp_context_tag_type(
    BACNET_PROPERTY_ID property, uint8_t tag_number)
{
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;

    switch (property) {
    296c:	2884      	cmp	r0, #132	; 0x84
    296e:	d03e      	beq.n	29ee <bacapp_context_tag_type+0x82>
    2970:	d812      	bhi.n	2998 <bacapp_context_tag_type+0x2c>
    2972:	2826      	cmp	r0, #38	; 0x26
    2974:	d033      	beq.n	29de <bacapp_context_tag_type+0x72>
    2976:	d907      	bls.n	2988 <bacapp_context_tag_type+0x1c>
    2978:	2835      	cmp	r0, #53	; 0x35
    297a:	d02c      	beq.n	29d6 <bacapp_context_tag_type+0x6a>
    297c:	2866      	cmp	r0, #102	; 0x66
    297e:	d150      	bne.n	2a22 <bacapp_context_tag_type+0xb6>
            }
            break;

        case PROP_RECIPIENT_LIST:
            /* List of BACnetDestination */
            switch (tag_number) {
    2980:	2900      	cmp	r1, #0
    2982:	d05c      	beq.n	2a3e <bacapp_context_tag_type+0xd2>
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;
    2984:	2010      	movs	r0, #16
    2986:	e04d      	b.n	2a24 <bacapp_context_tag_type+0xb8>
    switch (property) {
    2988:	2802      	cmp	r0, #2
    298a:	d14a      	bne.n	2a22 <bacapp_context_tag_type+0xb6>
            switch (tag_number) {
    298c:	2908      	cmp	r1, #8
    298e:	d81a      	bhi.n	29c6 <bacapp_context_tag_type+0x5a>
    2990:	0089      	lsls	r1, r1, #2
    2992:	4b2d      	ldr	r3, [pc, #180]	; (2a48 <bacapp_context_tag_type+0xdc>)
    2994:	585b      	ldr	r3, [r3, r1]
    2996:	469f      	mov	pc, r3
    switch (property) {
    2998:	28d4      	cmp	r0, #212	; 0xd4
    299a:	d00c      	beq.n	29b6 <bacapp_context_tag_type+0x4a>
    299c:	d807      	bhi.n	29ae <bacapp_context_tag_type+0x42>
    299e:	2898      	cmp	r0, #152	; 0x98
    29a0:	d033      	beq.n	2a0a <bacapp_context_tag_type+0x9e>
    29a2:	28d3      	cmp	r0, #211	; 0xd3
    29a4:	d13d      	bne.n	2a22 <bacapp_context_tag_type+0xb6>
            switch (tag_number) {
    29a6:	2901      	cmp	r1, #1
    29a8:	d947      	bls.n	2a3a <bacapp_context_tag_type+0xce>
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;
    29aa:	2010      	movs	r0, #16
    29ac:	e03a      	b.n	2a24 <bacapp_context_tag_type+0xb8>
    switch (property) {
    29ae:	28d6      	cmp	r0, #214	; 0xd6
    29b0:	d001      	beq.n	29b6 <bacapp_context_tag_type+0x4a>
    29b2:	28da      	cmp	r0, #218	; 0xda
    29b4:	d135      	bne.n	2a22 <bacapp_context_tag_type+0xb6>
            switch (tag_number) {
    29b6:	2901      	cmp	r1, #1
    29b8:	d935      	bls.n	2a26 <bacapp_context_tag_type+0xba>
    29ba:	2902      	cmp	r1, #2
    29bc:	d001      	beq.n	29c2 <bacapp_context_tag_type+0x56>
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;
    29be:	2010      	movs	r0, #16
    29c0:	e030      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_REAL;
    29c2:	2004      	movs	r0, #4
                    break;
    29c4:	e02e      	b.n	2a24 <bacapp_context_tag_type+0xb8>
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;
    29c6:	2010      	movs	r0, #16
    29c8:	e02c      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_ENUMERATED;
    29ca:	2009      	movs	r0, #9
                    break;
    29cc:	e02a      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
    29ce:	2002      	movs	r0, #2
                    break;
    29d0:	e028      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_BOOLEAN;
    29d2:	2001      	movs	r0, #1
                    break;
    29d4:	e026      	b.n	2a24 <bacapp_context_tag_type+0xb8>
            switch (tag_number) {
    29d6:	2900      	cmp	r1, #0
    29d8:	d029      	beq.n	2a2e <bacapp_context_tag_type+0xc2>
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;
    29da:	2010      	movs	r0, #16
    29dc:	e022      	b.n	2a24 <bacapp_context_tag_type+0xb8>
            switch (tag_number) {
    29de:	2901      	cmp	r1, #1
    29e0:	d027      	beq.n	2a32 <bacapp_context_tag_type+0xc6>
    29e2:	2903      	cmp	r1, #3
    29e4:	d001      	beq.n	29ea <bacapp_context_tag_type+0x7e>
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;
    29e6:	2010      	movs	r0, #16
    29e8:	e01c      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
    29ea:	2002      	movs	r0, #2
                    break;
    29ec:	e01a      	b.n	2a24 <bacapp_context_tag_type+0xb8>
            switch (tag_number) {
    29ee:	2901      	cmp	r1, #1
    29f0:	d007      	beq.n	2a02 <bacapp_context_tag_type+0x96>
    29f2:	2900      	cmp	r1, #0
    29f4:	d01f      	beq.n	2a36 <bacapp_context_tag_type+0xca>
    29f6:	2902      	cmp	r1, #2
    29f8:	d005      	beq.n	2a06 <bacapp_context_tag_type+0x9a>
    29fa:	2903      	cmp	r1, #3
    29fc:	d01b      	beq.n	2a36 <bacapp_context_tag_type+0xca>
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;
    29fe:	2010      	movs	r0, #16
    2a00:	e010      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_ENUMERATED;
    2a02:	2009      	movs	r0, #9
                    break;
    2a04:	e00e      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
    2a06:	2002      	movs	r0, #2
                    break;
    2a08:	e00c      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    break;
            }
            break;
        case PROP_ACTIVE_COV_SUBSCRIPTIONS:
            /* BACnetCOVSubscription */
            switch (tag_number) {
    2a0a:	2903      	cmp	r1, #3
    2a0c:	d005      	beq.n	2a1a <bacapp_context_tag_type+0xae>
    2a0e:	2904      	cmp	r1, #4
    2a10:	d005      	beq.n	2a1e <bacapp_context_tag_type+0xb2>
    2a12:	2902      	cmp	r1, #2
    2a14:	d015      	beq.n	2a42 <bacapp_context_tag_type+0xd6>
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;
    2a16:	2010      	movs	r0, #16
    2a18:	e004      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    break;
                case 2: /* issueConfirmedNotifications */
                    tag = BACNET_APPLICATION_TAG_BOOLEAN;
                    break;
                case 3: /* timeRemaining */
                    tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
    2a1a:	2002      	movs	r0, #2
                    break;
    2a1c:	e002      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                case 4: /* covIncrement */
                    tag = BACNET_APPLICATION_TAG_REAL;
    2a1e:	2004      	movs	r0, #4
                    break;
    2a20:	e000      	b.n	2a24 <bacapp_context_tag_type+0xb8>
    BACNET_APPLICATION_TAG tag = MAX_BACNET_APPLICATION_TAG;
    2a22:	2010      	movs	r0, #16
        default:
            break;
    }

    return tag;
}
    2a24:	4770      	bx	lr
                    tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
    2a26:	2002      	movs	r0, #2
    2a28:	e7fc      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_OBJECT_ID;
    2a2a:	200c      	movs	r0, #12
    2a2c:	e7fa      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_OBJECT_ID;
    2a2e:	200c      	movs	r0, #12
    2a30:	e7f8      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_OBJECT_ID;
    2a32:	200c      	movs	r0, #12
    2a34:	e7f6      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_OBJECT_ID;
    2a36:	200c      	movs	r0, #12
    2a38:	e7f4      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_OBJECT_ID;
    2a3a:	200c      	movs	r0, #12
    2a3c:	e7f2      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_OBJECT_ID;
    2a3e:	200c      	movs	r0, #12
    2a40:	e7f0      	b.n	2a24 <bacapp_context_tag_type+0xb8>
                    tag = BACNET_APPLICATION_TAG_BOOLEAN;
    2a42:	2001      	movs	r0, #1
    2a44:	e7ee      	b.n	2a24 <bacapp_context_tag_type+0xb8>
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	0000e5ac 	.word	0x0000e5ac

00002a4c <bacapp_decode_context_data_len>:
 *
 * @return  number of bytes decoded, or zero if errors occur
 */
int bacapp_decode_context_data_len(
    uint8_t *apdu, unsigned apdu_len_max, BACNET_PROPERTY_ID property)
{
    2a4c:	b530      	push	{r4, r5, lr}
    2a4e:	b083      	sub	sp, #12
    2a50:	0015      	movs	r5, r2
    int apdu_len = 0, len = 0;
    int tag_len = 0;
    uint8_t tag_number = 0;
    2a52:	2300      	movs	r3, #0
    2a54:	466a      	mov	r2, sp
    2a56:	71d3      	strb	r3, [r2, #7]
    uint32_t len_value_type = 0;
    2a58:	9300      	str	r3, [sp, #0]
    uint8_t tag = 0;

    if (apdu && IS_CONTEXT_SPECIFIC(*apdu)) {
    2a5a:	2800      	cmp	r0, #0
    2a5c:	d01f      	beq.n	2a9e <bacapp_decode_context_data_len+0x52>
    2a5e:	7803      	ldrb	r3, [r0, #0]
    2a60:	071b      	lsls	r3, r3, #28
    2a62:	d403      	bmi.n	2a6c <bacapp_decode_context_data_len+0x20>
    int apdu_len = 0, len = 0;
    2a64:	2400      	movs	r4, #0
            }
        }
    }

    return apdu_len;
}
    2a66:	0020      	movs	r0, r4
    2a68:	b003      	add	sp, #12
    2a6a:	bd30      	pop	{r4, r5, pc}
        tag_len = bacnet_tag_number_and_value_decode(
    2a6c:	466b      	mov	r3, sp
    2a6e:	466a      	mov	r2, sp
    2a70:	3207      	adds	r2, #7
    2a72:	4c0c      	ldr	r4, [pc, #48]	; (2aa4 <bacapp_decode_context_data_len+0x58>)
    2a74:	47a0      	blx	r4
    2a76:	1e04      	subs	r4, r0, #0
        if (tag_len) {
    2a78:	d0f5      	beq.n	2a66 <bacapp_decode_context_data_len+0x1a>
            tag = bacapp_context_tag_type(property, tag_number);
    2a7a:	466b      	mov	r3, sp
    2a7c:	79d9      	ldrb	r1, [r3, #7]
    2a7e:	0028      	movs	r0, r5
    2a80:	4b09      	ldr	r3, [pc, #36]	; (2aa8 <bacapp_decode_context_data_len+0x5c>)
    2a82:	4798      	blx	r3
            if (tag < MAX_BACNET_APPLICATION_TAG) {
    2a84:	280f      	cmp	r0, #15
    2a86:	d903      	bls.n	2a90 <bacapp_decode_context_data_len+0x44>
                apdu_len += len_value_type;
    2a88:	9b00      	ldr	r3, [sp, #0]
    2a8a:	469c      	mov	ip, r3
    2a8c:	4464      	add	r4, ip
    2a8e:	e7ea      	b.n	2a66 <bacapp_decode_context_data_len+0x1a>
                len = bacapp_decode_data_len(NULL, tag, len_value_type);
    2a90:	9a00      	ldr	r2, [sp, #0]
    2a92:	0001      	movs	r1, r0
    2a94:	2000      	movs	r0, #0
    2a96:	4b05      	ldr	r3, [pc, #20]	; (2aac <bacapp_decode_context_data_len+0x60>)
    2a98:	4798      	blx	r3
                apdu_len += len;
    2a9a:	1824      	adds	r4, r4, r0
    2a9c:	e7e3      	b.n	2a66 <bacapp_decode_context_data_len+0x1a>
    int apdu_len = 0, len = 0;
    2a9e:	2400      	movs	r4, #0
    2aa0:	e7e1      	b.n	2a66 <bacapp_decode_context_data_len+0x1a>
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	00002e51 	.word	0x00002e51
    2aa8:	0000296d 	.word	0x0000296d
    2aac:	00002861 	.word	0x00002861

00002ab0 <bacapp_data_len>:
   Expects that the first octet contain the opening tag.
   Include a value property identifier for context specific data
   such as the value received in a WriteProperty request */
int bacapp_data_len(
    uint8_t *apdu, unsigned apdu_len_max, BACNET_PROPERTY_ID property)
{
    2ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab2:	46de      	mov	lr, fp
    2ab4:	4657      	mov	r7, sl
    2ab6:	464e      	mov	r6, r9
    2ab8:	4645      	mov	r5, r8
    2aba:	b5e0      	push	{r5, r6, r7, lr}
    2abc:	b085      	sub	sp, #20
    2abe:	4680      	mov	r8, r0
    2ac0:	000d      	movs	r5, r1
    2ac2:	9201      	str	r2, [sp, #4]
    int len = 0;
    int total_len = 0;
    int apdu_len = 0;
    uint8_t tag_number = 0;
    2ac4:	2300      	movs	r3, #0
    2ac6:	aa02      	add	r2, sp, #8
    2ac8:	71d3      	strb	r3, [r2, #7]
    uint8_t opening_tag_number = 0;
    uint8_t opening_tag_number_counter = 0;
    uint32_t value = 0;
    2aca:	9302      	str	r3, [sp, #8]

    if (IS_OPENING_TAG(apdu[0])) {
    2acc:	7802      	ldrb	r2, [r0, #0]
    2ace:	2307      	movs	r3, #7
    2ad0:	4013      	ands	r3, r2
    2ad2:	2b06      	cmp	r3, #6
    2ad4:	d008      	beq.n	2ae8 <bacapp_data_len+0x38>
    int total_len = 0;
    2ad6:	2700      	movs	r7, #0
            }
        }
    }

    return total_len;
}
    2ad8:	0038      	movs	r0, r7
    2ada:	b005      	add	sp, #20
    2adc:	bc3c      	pop	{r2, r3, r4, r5}
    2ade:	4690      	mov	r8, r2
    2ae0:	4699      	mov	r9, r3
    2ae2:	46a2      	mov	sl, r4
    2ae4:	46ab      	mov	fp, r5
    2ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        len = bacnet_tag_number_and_value_decode(
    2ae8:	ab02      	add	r3, sp, #8
    2aea:	1dde      	adds	r6, r3, #7
    2aec:	0032      	movs	r2, r6
    2aee:	4c28      	ldr	r4, [pc, #160]	; (2b90 <bacapp_data_len+0xe0>)
    2af0:	47a0      	blx	r4
    2af2:	0004      	movs	r4, r0
        opening_tag_number = tag_number;
    2af4:	7833      	ldrb	r3, [r6, #0]
    2af6:	4699      	mov	r9, r3
        opening_tag_number_counter = 1;
    2af8:	2601      	movs	r6, #1
    int total_len = 0;
    2afa:	2700      	movs	r7, #0
    2afc:	4643      	mov	r3, r8
    2afe:	46b8      	mov	r8, r7
    2b00:	9300      	str	r3, [sp, #0]
        while (opening_tag_number_counter) {
    2b02:	e02b      	b.n	2b5c <bacapp_data_len+0xac>
                    apdu_len_max - apdu_len, &tag_number, &value);
    2b04:	1b29      	subs	r1, r5, r4
                len = bacnet_tag_number_and_value_decode(&apdu[apdu_len],
    2b06:	3301      	adds	r3, #1
    2b08:	aa02      	add	r2, sp, #8
    2b0a:	4694      	mov	ip, r2
    2b0c:	4463      	add	r3, ip
    2b0e:	469a      	mov	sl, r3
    2b10:	0013      	movs	r3, r2
    2b12:	4652      	mov	r2, sl
    2b14:	4f1e      	ldr	r7, [pc, #120]	; (2b90 <bacapp_data_len+0xe0>)
    2b16:	47b8      	blx	r7
                if (tag_number == opening_tag_number) {
    2b18:	4653      	mov	r3, sl
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	4599      	cmp	r9, r3
    2b1e:	d115      	bne.n	2b4c <bacapp_data_len+0x9c>
                    opening_tag_number_counter++;
    2b20:	3601      	adds	r6, #1
    2b22:	b2f6      	uxtb	r6, r6
    2b24:	e012      	b.n	2b4c <bacapp_data_len+0x9c>
                    apdu_len_max - apdu_len, &tag_number, &value);
    2b26:	1b29      	subs	r1, r5, r4
                len = bacnet_tag_number_and_value_decode(&apdu[apdu_len],
    2b28:	aa02      	add	r2, sp, #8
    2b2a:	4694      	mov	ip, r2
    2b2c:	4463      	add	r3, ip
    2b2e:	469a      	mov	sl, r3
    2b30:	0013      	movs	r3, r2
    2b32:	4652      	mov	r2, sl
    2b34:	4f16      	ldr	r7, [pc, #88]	; (2b90 <bacapp_data_len+0xe0>)
    2b36:	47b8      	blx	r7
                if (tag_number == opening_tag_number) {
    2b38:	4653      	mov	r3, sl
    2b3a:	781b      	ldrb	r3, [r3, #0]
    2b3c:	4599      	cmp	r9, r3
    2b3e:	d105      	bne.n	2b4c <bacapp_data_len+0x9c>
                    opening_tag_number_counter--;
    2b40:	3e01      	subs	r6, #1
    2b42:	b2f6      	uxtb	r6, r6
    2b44:	e002      	b.n	2b4c <bacapp_data_len+0x9c>
                len = bacapp_decode_application_data_len(
    2b46:	1b29      	subs	r1, r5, r4
    2b48:	4b12      	ldr	r3, [pc, #72]	; (2b94 <bacapp_data_len+0xe4>)
    2b4a:	4798      	blx	r3
            apdu_len += len;
    2b4c:	1824      	adds	r4, r4, r0
            if (opening_tag_number_counter) {
    2b4e:	2e00      	cmp	r6, #0
    2b50:	d002      	beq.n	2b58 <bacapp_data_len+0xa8>
                if (len > 0) {
    2b52:	2800      	cmp	r0, #0
    2b54:	dd16      	ble.n	2b84 <bacapp_data_len+0xd4>
                    total_len += len;
    2b56:	4480      	add	r8, r0
            if ((unsigned)apdu_len > apdu_len_max) {
    2b58:	42a5      	cmp	r5, r4
    2b5a:	d316      	bcc.n	2b8a <bacapp_data_len+0xda>
        while (opening_tag_number_counter) {
    2b5c:	2e00      	cmp	r6, #0
    2b5e:	d00f      	beq.n	2b80 <bacapp_data_len+0xd0>
            if (IS_OPENING_TAG(apdu[apdu_len])) {
    2b60:	9b00      	ldr	r3, [sp, #0]
    2b62:	1918      	adds	r0, r3, r4
    2b64:	7802      	ldrb	r2, [r0, #0]
    2b66:	2307      	movs	r3, #7
    2b68:	4013      	ands	r3, r2
    2b6a:	2b06      	cmp	r3, #6
    2b6c:	d0ca      	beq.n	2b04 <bacapp_data_len+0x54>
            } else if (IS_CLOSING_TAG(apdu[apdu_len])) {
    2b6e:	2b07      	cmp	r3, #7
    2b70:	d0d9      	beq.n	2b26 <bacapp_data_len+0x76>
            } else if (IS_CONTEXT_SPECIFIC(apdu[apdu_len])) {
    2b72:	0713      	lsls	r3, r2, #28
    2b74:	d5e7      	bpl.n	2b46 <bacapp_data_len+0x96>
                len = bacapp_decode_context_data_len(
    2b76:	1b29      	subs	r1, r5, r4
    2b78:	9a01      	ldr	r2, [sp, #4]
    2b7a:	4b07      	ldr	r3, [pc, #28]	; (2b98 <bacapp_data_len+0xe8>)
    2b7c:	4798      	blx	r3
    2b7e:	e7e5      	b.n	2b4c <bacapp_data_len+0x9c>
    2b80:	4647      	mov	r7, r8
    2b82:	e7a9      	b.n	2ad8 <bacapp_data_len+0x28>
                    total_len = BACNET_STATUS_ERROR;
    2b84:	2701      	movs	r7, #1
    2b86:	427f      	negs	r7, r7
    2b88:	e7a6      	b.n	2ad8 <bacapp_data_len+0x28>
                total_len = BACNET_STATUS_ERROR;
    2b8a:	2701      	movs	r7, #1
    2b8c:	427f      	negs	r7, r7
    return total_len;
    2b8e:	e7a3      	b.n	2ad8 <bacapp_data_len+0x28>
    2b90:	00002e51 	.word	0x00002e51
    2b94:	00002921 	.word	0x00002921
    2b98:	00002a4d 	.word	0x00002a4d

00002b9c <byte_reverse_bits>:

static uint8_t byte_reverse_bits(uint8_t in_byte)
{
    uint8_t out_byte = 0;

    if (in_byte & BIT(0)) {
    2b9c:	07c3      	lsls	r3, r0, #31
    2b9e:	d423      	bmi.n	2be8 <byte_reverse_bits+0x4c>
    uint8_t out_byte = 0;
    2ba0:	2300      	movs	r3, #0
        out_byte |= BIT(7);
    }
    if (in_byte & BIT(1)) {
    2ba2:	0782      	lsls	r2, r0, #30
    2ba4:	d502      	bpl.n	2bac <byte_reverse_bits+0x10>
        out_byte |= BIT(6);
    2ba6:	2240      	movs	r2, #64	; 0x40
    2ba8:	4313      	orrs	r3, r2
    2baa:	b2db      	uxtb	r3, r3
    }
    if (in_byte & BIT(2)) {
    2bac:	0742      	lsls	r2, r0, #29
    2bae:	d502      	bpl.n	2bb6 <byte_reverse_bits+0x1a>
        out_byte |= BIT(5);
    2bb0:	2220      	movs	r2, #32
    2bb2:	4313      	orrs	r3, r2
    2bb4:	b2db      	uxtb	r3, r3
    }
    if (in_byte & BIT(3)) {
    2bb6:	0702      	lsls	r2, r0, #28
    2bb8:	d502      	bpl.n	2bc0 <byte_reverse_bits+0x24>
        out_byte |= BIT(4);
    2bba:	2210      	movs	r2, #16
    2bbc:	4313      	orrs	r3, r2
    2bbe:	b2db      	uxtb	r3, r3
    }
    if (in_byte & BIT(4)) {
    2bc0:	06c2      	lsls	r2, r0, #27
    2bc2:	d502      	bpl.n	2bca <byte_reverse_bits+0x2e>
        out_byte |= BIT(3);
    2bc4:	2208      	movs	r2, #8
    2bc6:	4313      	orrs	r3, r2
    2bc8:	b2db      	uxtb	r3, r3
    }
    if (in_byte & BIT(5)) {
    2bca:	0682      	lsls	r2, r0, #26
    2bcc:	d502      	bpl.n	2bd4 <byte_reverse_bits+0x38>
        out_byte |= BIT(2);
    2bce:	2204      	movs	r2, #4
    2bd0:	4313      	orrs	r3, r2
    2bd2:	b2db      	uxtb	r3, r3
    }
    if (in_byte & BIT(6)) {
    2bd4:	0642      	lsls	r2, r0, #25
    2bd6:	d502      	bpl.n	2bde <byte_reverse_bits+0x42>
        out_byte |= BIT(1);
    2bd8:	2202      	movs	r2, #2
    2bda:	4313      	orrs	r3, r2
    2bdc:	b2db      	uxtb	r3, r3
    }
    if (in_byte & BIT(7)) {
    2bde:	b240      	sxtb	r0, r0
    2be0:	2800      	cmp	r0, #0
    2be2:	db03      	blt.n	2bec <byte_reverse_bits+0x50>
        out_byte |= BIT(0);
    }

    return out_byte;
}
    2be4:	0018      	movs	r0, r3
    2be6:	4770      	bx	lr
        out_byte |= BIT(7);
    2be8:	2380      	movs	r3, #128	; 0x80
    2bea:	e7da      	b.n	2ba2 <byte_reverse_bits+0x6>
        out_byte |= BIT(0);
    2bec:	2001      	movs	r0, #1
    2bee:	4303      	orrs	r3, r0
    2bf0:	b2db      	uxtb	r3, r3
    2bf2:	e7f7      	b.n	2be4 <byte_reverse_bits+0x48>

00002bf4 <decode_max_segs>:
    switch (octet & 0xF0) {
    2bf4:	230f      	movs	r3, #15
    2bf6:	4398      	bics	r0, r3
    2bf8:	2840      	cmp	r0, #64	; 0x40
    2bfa:	d016      	beq.n	2c2a <decode_max_segs+0x36>
    2bfc:	b2c3      	uxtb	r3, r0
    2bfe:	2b40      	cmp	r3, #64	; 0x40
    2c00:	d807      	bhi.n	2c12 <decode_max_segs+0x1e>
    2c02:	2820      	cmp	r0, #32
    2c04:	d00d      	beq.n	2c22 <decode_max_segs+0x2e>
    2c06:	2830      	cmp	r0, #48	; 0x30
    2c08:	d00d      	beq.n	2c26 <decode_max_segs+0x32>
    2c0a:	2810      	cmp	r0, #16
    2c0c:	d013      	beq.n	2c36 <decode_max_segs+0x42>
    int max_segs = 0;
    2c0e:	2000      	movs	r0, #0
}
    2c10:	4770      	bx	lr
    switch (octet & 0xF0) {
    2c12:	2860      	cmp	r0, #96	; 0x60
    2c14:	d00b      	beq.n	2c2e <decode_max_segs+0x3a>
    2c16:	2870      	cmp	r0, #112	; 0x70
    2c18:	d00b      	beq.n	2c32 <decode_max_segs+0x3e>
    2c1a:	2850      	cmp	r0, #80	; 0x50
    2c1c:	d1f7      	bne.n	2c0e <decode_max_segs+0x1a>
            max_segs = 32;
    2c1e:	2020      	movs	r0, #32
            break;
    2c20:	e7f6      	b.n	2c10 <decode_max_segs+0x1c>
            max_segs = 4;
    2c22:	2004      	movs	r0, #4
            break;
    2c24:	e7f4      	b.n	2c10 <decode_max_segs+0x1c>
            max_segs = 8;
    2c26:	2008      	movs	r0, #8
            break;
    2c28:	e7f2      	b.n	2c10 <decode_max_segs+0x1c>
            max_segs = 16;
    2c2a:	2010      	movs	r0, #16
            break;
    2c2c:	e7f0      	b.n	2c10 <decode_max_segs+0x1c>
            max_segs = 64;
    2c2e:	2040      	movs	r0, #64	; 0x40
            break;
    2c30:	e7ee      	b.n	2c10 <decode_max_segs+0x1c>
            max_segs = 65;
    2c32:	2041      	movs	r0, #65	; 0x41
            break;
    2c34:	e7ec      	b.n	2c10 <decode_max_segs+0x1c>
            max_segs = 2;
    2c36:	2002      	movs	r0, #2
    return max_segs;
    2c38:	e7ea      	b.n	2c10 <decode_max_segs+0x1c>
	...

00002c3c <decode_max_apdu>:
    switch (octet & 0x0F) {
    2c3c:	230f      	movs	r3, #15
    2c3e:	4018      	ands	r0, r3
    2c40:	b2c3      	uxtb	r3, r0
    2c42:	2b05      	cmp	r3, #5
    2c44:	d803      	bhi.n	2c4e <decode_max_apdu+0x12>
    2c46:	0080      	lsls	r0, r0, #2
    2c48:	4b09      	ldr	r3, [pc, #36]	; (2c70 <decode_max_apdu+0x34>)
    2c4a:	581b      	ldr	r3, [r3, r0]
    2c4c:	469f      	mov	pc, r3
    int max_apdu = 0;
    2c4e:	2000      	movs	r0, #0
    2c50:	e00c      	b.n	2c6c <decode_max_apdu+0x30>
            max_apdu = 128;
    2c52:	2080      	movs	r0, #128	; 0x80
            break;
    2c54:	e00a      	b.n	2c6c <decode_max_apdu+0x30>
            max_apdu = 206;
    2c56:	20ce      	movs	r0, #206	; 0xce
            break;
    2c58:	e008      	b.n	2c6c <decode_max_apdu+0x30>
            max_apdu = 480;
    2c5a:	20f0      	movs	r0, #240	; 0xf0
    2c5c:	0040      	lsls	r0, r0, #1
            break;
    2c5e:	e005      	b.n	2c6c <decode_max_apdu+0x30>
            max_apdu = 1024;
    2c60:	2080      	movs	r0, #128	; 0x80
    2c62:	00c0      	lsls	r0, r0, #3
            break;
    2c64:	e002      	b.n	2c6c <decode_max_apdu+0x30>
            max_apdu = 1476;
    2c66:	4803      	ldr	r0, [pc, #12]	; (2c74 <decode_max_apdu+0x38>)
            break;
    2c68:	e000      	b.n	2c6c <decode_max_apdu+0x30>
            max_apdu = 50;
    2c6a:	2032      	movs	r0, #50	; 0x32
}
    2c6c:	4770      	bx	lr
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	0000e5d0 	.word	0x0000e5d0
    2c74:	000005c4 	.word	0x000005c4

00002c78 <encode_tag>:
{
    2c78:	b510      	push	{r4, lr}
    apdu[0] = 0;
    2c7a:	2400      	movs	r4, #0
    2c7c:	7004      	strb	r4, [r0, #0]
    if (context_specific) {
    2c7e:	2a00      	cmp	r2, #0
    2c80:	d001      	beq.n	2c86 <encode_tag+0xe>
        apdu[0] = BIT(3);
    2c82:	2208      	movs	r2, #8
    2c84:	7002      	strb	r2, [r0, #0]
    if (tag_number <= 14) {
    2c86:	290e      	cmp	r1, #14
    2c88:	d818      	bhi.n	2cbc <encode_tag+0x44>
        apdu[0] |= (tag_number << 4);
    2c8a:	0109      	lsls	r1, r1, #4
    2c8c:	7802      	ldrb	r2, [r0, #0]
    2c8e:	4311      	orrs	r1, r2
    2c90:	7001      	strb	r1, [r0, #0]
    int len = 1; /* return value */
    2c92:	2201      	movs	r2, #1
    if (len_value_type <= 4) {
    2c94:	2b04      	cmp	r3, #4
    2c96:	d919      	bls.n	2ccc <encode_tag+0x54>
        apdu[0] |= 5;
    2c98:	7801      	ldrb	r1, [r0, #0]
    2c9a:	2405      	movs	r4, #5
    2c9c:	4321      	orrs	r1, r4
    2c9e:	7001      	strb	r1, [r0, #0]
        if (len_value_type <= 253) {
    2ca0:	2bfd      	cmp	r3, #253	; 0xfd
    2ca2:	d918      	bls.n	2cd6 <encode_tag+0x5e>
        } else if (len_value_type <= 65535) {
    2ca4:	4912      	ldr	r1, [pc, #72]	; (2cf0 <encode_tag+0x78>)
    2ca6:	428b      	cmp	r3, r1
    2ca8:	d918      	bls.n	2cdc <encode_tag+0x64>
            apdu[len++] = 255;
    2caa:	1c54      	adds	r4, r2, #1
    2cac:	21ff      	movs	r1, #255	; 0xff
    2cae:	5481      	strb	r1, [r0, r2]
            len += encode_unsigned32(&apdu[len], len_value_type);
    2cb0:	1900      	adds	r0, r0, r4
    2cb2:	0019      	movs	r1, r3
    2cb4:	4b0f      	ldr	r3, [pc, #60]	; (2cf4 <encode_tag+0x7c>)
    2cb6:	4798      	blx	r3
    2cb8:	1822      	adds	r2, r4, r0
    return len;
    2cba:	e00a      	b.n	2cd2 <encode_tag+0x5a>
        apdu[0] |= 0xF0;
    2cbc:	7804      	ldrb	r4, [r0, #0]
    2cbe:	2210      	movs	r2, #16
    2cc0:	4252      	negs	r2, r2
    2cc2:	4322      	orrs	r2, r4
    2cc4:	7002      	strb	r2, [r0, #0]
        apdu[1] = tag_number;
    2cc6:	7041      	strb	r1, [r0, #1]
        len++;
    2cc8:	2202      	movs	r2, #2
    2cca:	e7e3      	b.n	2c94 <encode_tag+0x1c>
        apdu[0] |= len_value_type;
    2ccc:	7801      	ldrb	r1, [r0, #0]
    2cce:	430b      	orrs	r3, r1
    2cd0:	7003      	strb	r3, [r0, #0]
}
    2cd2:	0010      	movs	r0, r2
    2cd4:	bd10      	pop	{r4, pc}
            apdu[len++] = (uint8_t)len_value_type;
    2cd6:	5483      	strb	r3, [r0, r2]
    2cd8:	3201      	adds	r2, #1
    2cda:	e7fa      	b.n	2cd2 <encode_tag+0x5a>
            apdu[len++] = 254;
    2cdc:	1c54      	adds	r4, r2, #1
    2cde:	21fe      	movs	r1, #254	; 0xfe
    2ce0:	5481      	strb	r1, [r0, r2]
            len += encode_unsigned16(&apdu[len], (uint16_t)len_value_type);
    2ce2:	b299      	uxth	r1, r3
    2ce4:	1900      	adds	r0, r0, r4
    2ce6:	4b04      	ldr	r3, [pc, #16]	; (2cf8 <encode_tag+0x80>)
    2ce8:	4798      	blx	r3
    2cea:	1822      	adds	r2, r4, r0
    2cec:	e7f1      	b.n	2cd2 <encode_tag+0x5a>
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	0000ffff 	.word	0x0000ffff
    2cf4:	00003925 	.word	0x00003925
    2cf8:	000038dd 	.word	0x000038dd

00002cfc <encode_opening_tag>:
    apdu[0] = BIT(3);
    2cfc:	2308      	movs	r3, #8
    2cfe:	7003      	strb	r3, [r0, #0]
    if (tag_number <= 14) {
    2d00:	290e      	cmp	r1, #14
    2d02:	d909      	bls.n	2d18 <encode_opening_tag+0x1c>
        apdu[0] |= 0xF0;
    2d04:	23f8      	movs	r3, #248	; 0xf8
    2d06:	7003      	strb	r3, [r0, #0]
        apdu[1] = tag_number;
    2d08:	7041      	strb	r1, [r0, #1]
        len++;
    2d0a:	2202      	movs	r2, #2
    apdu[0] |= 6;
    2d0c:	7803      	ldrb	r3, [r0, #0]
    2d0e:	2106      	movs	r1, #6
    2d10:	430b      	orrs	r3, r1
    2d12:	7003      	strb	r3, [r0, #0]
}
    2d14:	0010      	movs	r0, r2
    2d16:	4770      	bx	lr
        apdu[0] |= (tag_number << 4);
    2d18:	0109      	lsls	r1, r1, #4
    2d1a:	4319      	orrs	r1, r3
    2d1c:	7001      	strb	r1, [r0, #0]
    int len = 1;
    2d1e:	2201      	movs	r2, #1
    2d20:	e7f4      	b.n	2d0c <encode_opening_tag+0x10>

00002d22 <encode_closing_tag>:
    apdu[0] = BIT(3);
    2d22:	2308      	movs	r3, #8
    2d24:	7003      	strb	r3, [r0, #0]
    if (tag_number <= 14) {
    2d26:	290e      	cmp	r1, #14
    2d28:	d909      	bls.n	2d3e <encode_closing_tag+0x1c>
        apdu[0] |= 0xF0;
    2d2a:	23f8      	movs	r3, #248	; 0xf8
    2d2c:	7003      	strb	r3, [r0, #0]
        apdu[1] = tag_number;
    2d2e:	7041      	strb	r1, [r0, #1]
        len++;
    2d30:	2202      	movs	r2, #2
    apdu[0] |= 7;
    2d32:	7803      	ldrb	r3, [r0, #0]
    2d34:	2107      	movs	r1, #7
    2d36:	430b      	orrs	r3, r1
    2d38:	7003      	strb	r3, [r0, #0]
}
    2d3a:	0010      	movs	r0, r2
    2d3c:	4770      	bx	lr
        apdu[0] |= (tag_number << 4);
    2d3e:	0109      	lsls	r1, r1, #4
    2d40:	4319      	orrs	r1, r3
    2d42:	7001      	strb	r1, [r0, #0]
    int len = 1;
    2d44:	2201      	movs	r2, #1
    2d46:	e7f4      	b.n	2d32 <encode_closing_tag+0x10>

00002d48 <decode_tag_number>:
{
    2d48:	b510      	push	{r4, lr}
    if (IS_EXTENDED_TAG_NUMBER(apdu[0])) {
    2d4a:	7803      	ldrb	r3, [r0, #0]
    2d4c:	220f      	movs	r2, #15
    2d4e:	001c      	movs	r4, r3
    2d50:	4394      	bics	r4, r2
    2d52:	2cf0      	cmp	r4, #240	; 0xf0
    2d54:	d005      	beq.n	2d62 <decode_tag_number+0x1a>
        if (tag_number) {
    2d56:	2900      	cmp	r1, #0
    2d58:	d00b      	beq.n	2d72 <decode_tag_number+0x2a>
            *tag_number = (uint8_t)(apdu[0] >> 4);
    2d5a:	091b      	lsrs	r3, r3, #4
    2d5c:	700b      	strb	r3, [r1, #0]
    int len = 1; /* return value */
    2d5e:	2001      	movs	r0, #1
}
    2d60:	bd10      	pop	{r4, pc}
        if (tag_number) {
    2d62:	2900      	cmp	r1, #0
    2d64:	d003      	beq.n	2d6e <decode_tag_number+0x26>
            *tag_number = apdu[1];
    2d66:	7843      	ldrb	r3, [r0, #1]
    2d68:	700b      	strb	r3, [r1, #0]
        len++;
    2d6a:	2002      	movs	r0, #2
    2d6c:	e7f8      	b.n	2d60 <decode_tag_number+0x18>
    2d6e:	2002      	movs	r0, #2
    2d70:	e7f6      	b.n	2d60 <decode_tag_number+0x18>
    int len = 1; /* return value */
    2d72:	2001      	movs	r0, #1
    return len;
    2d74:	e7f4      	b.n	2d60 <decode_tag_number+0x18>

00002d76 <bacnet_tag_number_decode>:
{
    2d76:	b530      	push	{r4, r5, lr}
    if (apdu_len_max >= 1) {
    2d78:	2900      	cmp	r1, #0
    2d7a:	d013      	beq.n	2da4 <bacnet_tag_number_decode+0x2e>
        if (IS_EXTENDED_TAG_NUMBER(apdu[0]) && apdu_len_max >= 2) {
    2d7c:	7803      	ldrb	r3, [r0, #0]
    2d7e:	240f      	movs	r4, #15
    2d80:	001d      	movs	r5, r3
    2d82:	43a5      	bics	r5, r4
    2d84:	2df0      	cmp	r5, #240	; 0xf0
    2d86:	d005      	beq.n	2d94 <bacnet_tag_number_decode+0x1e>
            if (tag_number) {
    2d88:	2a00      	cmp	r2, #0
    2d8a:	d00f      	beq.n	2dac <bacnet_tag_number_decode+0x36>
                *tag_number = (uint8_t)(apdu[0] >> 4);
    2d8c:	091b      	lsrs	r3, r3, #4
    2d8e:	7013      	strb	r3, [r2, #0]
            len = 1;
    2d90:	2001      	movs	r0, #1
}
    2d92:	bd30      	pop	{r4, r5, pc}
        if (IS_EXTENDED_TAG_NUMBER(apdu[0]) && apdu_len_max >= 2) {
    2d94:	2901      	cmp	r1, #1
    2d96:	d9f7      	bls.n	2d88 <bacnet_tag_number_decode+0x12>
            if (tag_number) {
    2d98:	2a00      	cmp	r2, #0
    2d9a:	d005      	beq.n	2da8 <bacnet_tag_number_decode+0x32>
                *tag_number = apdu[1];
    2d9c:	7843      	ldrb	r3, [r0, #1]
    2d9e:	7013      	strb	r3, [r2, #0]
            len = 2;
    2da0:	2002      	movs	r0, #2
    2da2:	e7f6      	b.n	2d92 <bacnet_tag_number_decode+0x1c>
    int len = 0; /* return value */
    2da4:	2000      	movs	r0, #0
    2da6:	e7f4      	b.n	2d92 <bacnet_tag_number_decode+0x1c>
            len = 2;
    2da8:	2002      	movs	r0, #2
    2daa:	e7f2      	b.n	2d92 <bacnet_tag_number_decode+0x1c>
            len = 1;
    2dac:	2001      	movs	r0, #1
    return len;
    2dae:	e7f0      	b.n	2d92 <bacnet_tag_number_decode+0x1c>

00002db0 <decode_is_closing_tag>:
    return (bool)((apdu[0] & 0x07) == 7);
    2db0:	7803      	ldrb	r3, [r0, #0]
    2db2:	2007      	movs	r0, #7
    2db4:	4018      	ands	r0, r3
    2db6:	3807      	subs	r0, #7
    2db8:	4243      	negs	r3, r0
    2dba:	4158      	adcs	r0, r3
    2dbc:	b2c0      	uxtb	r0, r0
}
    2dbe:	4770      	bx	lr

00002dc0 <decode_tag_number_and_value>:
{
    2dc0:	b570      	push	{r4, r5, r6, lr}
    2dc2:	b082      	sub	sp, #8
    2dc4:	0004      	movs	r4, r0
    2dc6:	0015      	movs	r5, r2
    len = decode_tag_number(&apdu[0], tag_number);
    2dc8:	4b1e      	ldr	r3, [pc, #120]	; (2e44 <decode_tag_number_and_value+0x84>)
    2dca:	4798      	blx	r3
    if (IS_EXTENDED_VALUE(apdu[0])) {
    2dcc:	7822      	ldrb	r2, [r4, #0]
    2dce:	2307      	movs	r3, #7
    2dd0:	4013      	ands	r3, r2
    2dd2:	2b05      	cmp	r3, #5
    2dd4:	d008      	beq.n	2de8 <decode_tag_number_and_value+0x28>
    } else if (IS_OPENING_TAG(apdu[0]) && value) {
    2dd6:	2b06      	cmp	r3, #6
    2dd8:	d029      	beq.n	2e2e <decode_tag_number_and_value+0x6e>
    } else if (IS_CLOSING_TAG(apdu[0]) && value) {
    2dda:	2b07      	cmp	r3, #7
    2ddc:	d02c      	beq.n	2e38 <decode_tag_number_and_value+0x78>
    } else if (value) {
    2dde:	2d00      	cmp	r5, #0
    2de0:	d000      	beq.n	2de4 <decode_tag_number_and_value+0x24>
        *value = apdu[0] & 0x07;
    2de2:	602b      	str	r3, [r5, #0]
}
    2de4:	b002      	add	sp, #8
    2de6:	bd70      	pop	{r4, r5, r6, pc}
        if (apdu[len] == 255) {
    2de8:	5c23      	ldrb	r3, [r4, r0]
    2dea:	2bff      	cmp	r3, #255	; 0xff
    2dec:	d006      	beq.n	2dfc <decode_tag_number_and_value+0x3c>
        else if (apdu[len] == 254) {
    2dee:	2bfe      	cmp	r3, #254	; 0xfe
    2df0:	d00f      	beq.n	2e12 <decode_tag_number_and_value+0x52>
            if (value) {
    2df2:	2d00      	cmp	r5, #0
    2df4:	d000      	beq.n	2df8 <decode_tag_number_and_value+0x38>
                *value = apdu[len];
    2df6:	602b      	str	r3, [r5, #0]
            len++;
    2df8:	3001      	adds	r0, #1
    2dfa:	e7f3      	b.n	2de4 <decode_tag_number_and_value+0x24>
            len++;
    2dfc:	1c46      	adds	r6, r0, #1
            len += decode_unsigned32(&apdu[len], &value32);
    2dfe:	19a0      	adds	r0, r4, r6
    2e00:	4669      	mov	r1, sp
    2e02:	4b11      	ldr	r3, [pc, #68]	; (2e48 <decode_tag_number_and_value+0x88>)
    2e04:	4798      	blx	r3
    2e06:	1830      	adds	r0, r6, r0
            if (value) {
    2e08:	2d00      	cmp	r5, #0
    2e0a:	d0eb      	beq.n	2de4 <decode_tag_number_and_value+0x24>
                *value = value32;
    2e0c:	9b00      	ldr	r3, [sp, #0]
    2e0e:	602b      	str	r3, [r5, #0]
    2e10:	e7e8      	b.n	2de4 <decode_tag_number_and_value+0x24>
            len++;
    2e12:	1c46      	adds	r6, r0, #1
            len += decode_unsigned16(&apdu[len], &value16);
    2e14:	19a0      	adds	r0, r4, r6
    2e16:	466b      	mov	r3, sp
    2e18:	1d99      	adds	r1, r3, #6
    2e1a:	4b0c      	ldr	r3, [pc, #48]	; (2e4c <decode_tag_number_and_value+0x8c>)
    2e1c:	4798      	blx	r3
    2e1e:	1830      	adds	r0, r6, r0
            if (value) {
    2e20:	2d00      	cmp	r5, #0
    2e22:	d0df      	beq.n	2de4 <decode_tag_number_and_value+0x24>
                *value = value16;
    2e24:	466b      	mov	r3, sp
    2e26:	3306      	adds	r3, #6
    2e28:	881b      	ldrh	r3, [r3, #0]
    2e2a:	602b      	str	r3, [r5, #0]
    2e2c:	e7da      	b.n	2de4 <decode_tag_number_and_value+0x24>
    } else if (IS_OPENING_TAG(apdu[0]) && value) {
    2e2e:	2d00      	cmp	r5, #0
    2e30:	d0d3      	beq.n	2dda <decode_tag_number_and_value+0x1a>
        *value = 0;
    2e32:	2300      	movs	r3, #0
    2e34:	602b      	str	r3, [r5, #0]
    2e36:	e7d5      	b.n	2de4 <decode_tag_number_and_value+0x24>
    } else if (IS_CLOSING_TAG(apdu[0]) && value) {
    2e38:	2d00      	cmp	r5, #0
    2e3a:	d0d0      	beq.n	2dde <decode_tag_number_and_value+0x1e>
        *value = 0;
    2e3c:	2300      	movs	r3, #0
    2e3e:	602b      	str	r3, [r5, #0]
    2e40:	e7d0      	b.n	2de4 <decode_tag_number_and_value+0x24>
    2e42:	46c0      	nop			; (mov r8, r8)
    2e44:	00002d49 	.word	0x00002d49
    2e48:	00003937 	.word	0x00003937
    2e4c:	000038e7 	.word	0x000038e7

00002e50 <bacnet_tag_number_and_value_decode>:
{
    2e50:	b570      	push	{r4, r5, r6, lr}
    2e52:	b082      	sub	sp, #8
    2e54:	0004      	movs	r4, r0
    2e56:	000d      	movs	r5, r1
    2e58:	001e      	movs	r6, r3
    len = bacnet_tag_number_decode(&apdu[0], apdu_len_max, tag_number);
    2e5a:	4b25      	ldr	r3, [pc, #148]	; (2ef0 <bacnet_tag_number_and_value_decode+0xa0>)
    2e5c:	4798      	blx	r3
    if (len > 0) {
    2e5e:	2800      	cmp	r0, #0
    2e60:	dd0c      	ble.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
        apdu_len_max -= len;
    2e62:	1a2d      	subs	r5, r5, r0
        if (IS_EXTENDED_VALUE(apdu[0])) {
    2e64:	7822      	ldrb	r2, [r4, #0]
    2e66:	2307      	movs	r3, #7
    2e68:	4013      	ands	r3, r2
    2e6a:	2b05      	cmp	r3, #5
    2e6c:	d008      	beq.n	2e80 <bacnet_tag_number_and_value_decode+0x30>
        } else if (IS_OPENING_TAG(apdu[0]) && value) {
    2e6e:	2b06      	cmp	r3, #6
    2e70:	d02f      	beq.n	2ed2 <bacnet_tag_number_and_value_decode+0x82>
        } else if (IS_CLOSING_TAG(apdu[0]) && value) {
    2e72:	2b07      	cmp	r3, #7
    2e74:	d032      	beq.n	2edc <bacnet_tag_number_and_value_decode+0x8c>
        } else if (value) {
    2e76:	2e00      	cmp	r6, #0
    2e78:	d000      	beq.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
            *value = apdu[0] & 0x07;
    2e7a:	6033      	str	r3, [r6, #0]
}
    2e7c:	b002      	add	sp, #8
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
            if ((apdu[len] == 255) && (apdu_len_max >= 5)) {
    2e80:	5c23      	ldrb	r3, [r4, r0]
    2e82:	2bff      	cmp	r3, #255	; 0xff
    2e84:	d00a      	beq.n	2e9c <bacnet_tag_number_and_value_decode+0x4c>
            else if ((apdu[len] == 254) && (apdu_len_max >= 3)) {
    2e86:	2bfe      	cmp	r3, #254	; 0xfe
    2e88:	d015      	beq.n	2eb6 <bacnet_tag_number_and_value_decode+0x66>
            else if ((apdu[len] < 254) && (apdu_len_max >= 1)) {
    2e8a:	2bfd      	cmp	r3, #253	; 0xfd
    2e8c:	d82b      	bhi.n	2ee6 <bacnet_tag_number_and_value_decode+0x96>
    2e8e:	2d00      	cmp	r5, #0
    2e90:	d02b      	beq.n	2eea <bacnet_tag_number_and_value_decode+0x9a>
                if (value) {
    2e92:	2e00      	cmp	r6, #0
    2e94:	d000      	beq.n	2e98 <bacnet_tag_number_and_value_decode+0x48>
                    *value = apdu[len];
    2e96:	6033      	str	r3, [r6, #0]
                len++;
    2e98:	3001      	adds	r0, #1
    2e9a:	e7ef      	b.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
            if ((apdu[len] == 255) && (apdu_len_max >= 5)) {
    2e9c:	2d04      	cmp	r5, #4
    2e9e:	d9f2      	bls.n	2e86 <bacnet_tag_number_and_value_decode+0x36>
                len++;
    2ea0:	1c45      	adds	r5, r0, #1
                len += decode_unsigned32(&apdu[len], &value32);
    2ea2:	1960      	adds	r0, r4, r5
    2ea4:	a901      	add	r1, sp, #4
    2ea6:	4b13      	ldr	r3, [pc, #76]	; (2ef4 <bacnet_tag_number_and_value_decode+0xa4>)
    2ea8:	4798      	blx	r3
    2eaa:	1828      	adds	r0, r5, r0
                if (value) {
    2eac:	2e00      	cmp	r6, #0
    2eae:	d0e5      	beq.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
                    *value = value32;
    2eb0:	9b01      	ldr	r3, [sp, #4]
    2eb2:	6033      	str	r3, [r6, #0]
            if ((apdu[len] == 255) && (apdu_len_max >= 5)) {
    2eb4:	e7e2      	b.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
            else if ((apdu[len] == 254) && (apdu_len_max >= 3)) {
    2eb6:	2d02      	cmp	r5, #2
    2eb8:	d9e7      	bls.n	2e8a <bacnet_tag_number_and_value_decode+0x3a>
                len++;
    2eba:	1c45      	adds	r5, r0, #1
                len += decode_unsigned16(&apdu[len], &value16);
    2ebc:	1960      	adds	r0, r4, r5
    2ebe:	a901      	add	r1, sp, #4
    2ec0:	4b0d      	ldr	r3, [pc, #52]	; (2ef8 <bacnet_tag_number_and_value_decode+0xa8>)
    2ec2:	4798      	blx	r3
    2ec4:	1828      	adds	r0, r5, r0
                if (value) {
    2ec6:	2e00      	cmp	r6, #0
    2ec8:	d0d8      	beq.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
                    *value = value16;
    2eca:	ab01      	add	r3, sp, #4
    2ecc:	881b      	ldrh	r3, [r3, #0]
    2ece:	6033      	str	r3, [r6, #0]
            else if ((apdu[len] == 254) && (apdu_len_max >= 3)) {
    2ed0:	e7d4      	b.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
        } else if (IS_OPENING_TAG(apdu[0]) && value) {
    2ed2:	2e00      	cmp	r6, #0
    2ed4:	d0cd      	beq.n	2e72 <bacnet_tag_number_and_value_decode+0x22>
            *value = 0;
    2ed6:	2300      	movs	r3, #0
    2ed8:	6033      	str	r3, [r6, #0]
    2eda:	e7cf      	b.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
        } else if (IS_CLOSING_TAG(apdu[0]) && value) {
    2edc:	2e00      	cmp	r6, #0
    2ede:	d0ca      	beq.n	2e76 <bacnet_tag_number_and_value_decode+0x26>
            *value = 0;
    2ee0:	2300      	movs	r3, #0
    2ee2:	6033      	str	r3, [r6, #0]
    2ee4:	e7ca      	b.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
                len = 0;
    2ee6:	2000      	movs	r0, #0
    2ee8:	e7c8      	b.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
    2eea:	2000      	movs	r0, #0
    return len;
    2eec:	e7c6      	b.n	2e7c <bacnet_tag_number_and_value_decode+0x2c>
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	00002d77 	.word	0x00002d77
    2ef4:	00003937 	.word	0x00003937
    2ef8:	000038e7 	.word	0x000038e7

00002efc <decode_is_context_tag>:
{
    2efc:	b530      	push	{r4, r5, lr}
    2efe:	b083      	sub	sp, #12
    2f00:	0004      	movs	r4, r0
    2f02:	000d      	movs	r5, r1
    uint8_t my_tag_number = 0;
    2f04:	466b      	mov	r3, sp
    2f06:	1dd9      	adds	r1, r3, #7
    2f08:	2300      	movs	r3, #0
    2f0a:	700b      	strb	r3, [r1, #0]
    decode_tag_number(apdu, &my_tag_number);
    2f0c:	4b08      	ldr	r3, [pc, #32]	; (2f30 <decode_is_context_tag+0x34>)
    2f0e:	4798      	blx	r3
    return (bool)(IS_CONTEXT_SPECIFIC(*apdu) && (my_tag_number == tag_number));
    2f10:	7823      	ldrb	r3, [r4, #0]
    2f12:	071b      	lsls	r3, r3, #28
    2f14:	d506      	bpl.n	2f24 <decode_is_context_tag+0x28>
    2f16:	466b      	mov	r3, sp
    2f18:	3307      	adds	r3, #7
    2f1a:	781b      	ldrb	r3, [r3, #0]
    2f1c:	42ab      	cmp	r3, r5
    2f1e:	d004      	beq.n	2f2a <decode_is_context_tag+0x2e>
    2f20:	2000      	movs	r0, #0
    2f22:	e000      	b.n	2f26 <decode_is_context_tag+0x2a>
    2f24:	2000      	movs	r0, #0
}
    2f26:	b003      	add	sp, #12
    2f28:	bd30      	pop	{r4, r5, pc}
    return (bool)(IS_CONTEXT_SPECIFIC(*apdu) && (my_tag_number == tag_number));
    2f2a:	2001      	movs	r0, #1
    2f2c:	e7fb      	b.n	2f26 <decode_is_context_tag+0x2a>
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	00002d49 	.word	0x00002d49

00002f34 <decode_is_opening_tag_number>:
{
    2f34:	b530      	push	{r4, r5, lr}
    2f36:	b083      	sub	sp, #12
    2f38:	0004      	movs	r4, r0
    2f3a:	000d      	movs	r5, r1
    uint8_t my_tag_number = 0;
    2f3c:	466b      	mov	r3, sp
    2f3e:	1dd9      	adds	r1, r3, #7
    2f40:	2300      	movs	r3, #0
    2f42:	700b      	strb	r3, [r1, #0]
    decode_tag_number(apdu, &my_tag_number);
    2f44:	4b09      	ldr	r3, [pc, #36]	; (2f6c <decode_is_opening_tag_number+0x38>)
    2f46:	4798      	blx	r3
    return (bool)(IS_OPENING_TAG(apdu[0]) && (my_tag_number == tag_number));
    2f48:	7822      	ldrb	r2, [r4, #0]
    2f4a:	2307      	movs	r3, #7
    2f4c:	4013      	ands	r3, r2
    2f4e:	2b06      	cmp	r3, #6
    2f50:	d002      	beq.n	2f58 <decode_is_opening_tag_number+0x24>
    2f52:	2000      	movs	r0, #0
}
    2f54:	b003      	add	sp, #12
    2f56:	bd30      	pop	{r4, r5, pc}
    return (bool)(IS_OPENING_TAG(apdu[0]) && (my_tag_number == tag_number));
    2f58:	466b      	mov	r3, sp
    2f5a:	3307      	adds	r3, #7
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	42ab      	cmp	r3, r5
    2f60:	d001      	beq.n	2f66 <decode_is_opening_tag_number+0x32>
    2f62:	2000      	movs	r0, #0
    2f64:	e7f6      	b.n	2f54 <decode_is_opening_tag_number+0x20>
    2f66:	2001      	movs	r0, #1
    2f68:	e7f4      	b.n	2f54 <decode_is_opening_tag_number+0x20>
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	00002d49 	.word	0x00002d49

00002f70 <decode_is_closing_tag_number>:
{
    2f70:	b530      	push	{r4, r5, lr}
    2f72:	b083      	sub	sp, #12
    2f74:	0004      	movs	r4, r0
    2f76:	000d      	movs	r5, r1
    uint8_t my_tag_number = 0;
    2f78:	466b      	mov	r3, sp
    2f7a:	1dd9      	adds	r1, r3, #7
    2f7c:	2300      	movs	r3, #0
    2f7e:	700b      	strb	r3, [r1, #0]
    decode_tag_number(apdu, &my_tag_number);
    2f80:	4b09      	ldr	r3, [pc, #36]	; (2fa8 <decode_is_closing_tag_number+0x38>)
    2f82:	4798      	blx	r3
    return (bool)(IS_CLOSING_TAG(apdu[0]) && (my_tag_number == tag_number));
    2f84:	7822      	ldrb	r2, [r4, #0]
    2f86:	2307      	movs	r3, #7
    2f88:	4013      	ands	r3, r2
    2f8a:	2b07      	cmp	r3, #7
    2f8c:	d002      	beq.n	2f94 <decode_is_closing_tag_number+0x24>
    2f8e:	2000      	movs	r0, #0
}
    2f90:	b003      	add	sp, #12
    2f92:	bd30      	pop	{r4, r5, pc}
    return (bool)(IS_CLOSING_TAG(apdu[0]) && (my_tag_number == tag_number));
    2f94:	466b      	mov	r3, sp
    2f96:	3307      	adds	r3, #7
    2f98:	781b      	ldrb	r3, [r3, #0]
    2f9a:	42ab      	cmp	r3, r5
    2f9c:	d001      	beq.n	2fa2 <decode_is_closing_tag_number+0x32>
    2f9e:	2000      	movs	r0, #0
    2fa0:	e7f6      	b.n	2f90 <decode_is_closing_tag_number+0x20>
    2fa2:	2001      	movs	r0, #1
    2fa4:	e7f4      	b.n	2f90 <decode_is_closing_tag_number+0x20>
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	00002d49 	.word	0x00002d49

00002fac <encode_application_boolean>:
{
    2fac:	b510      	push	{r4, lr}
    if (boolean_value) {
    2fae:	2900      	cmp	r1, #0
    2fb0:	d005      	beq.n	2fbe <encode_application_boolean+0x12>
        len_value = 1;
    2fb2:	2301      	movs	r3, #1
    len =
    2fb4:	2200      	movs	r2, #0
    2fb6:	2101      	movs	r1, #1
    2fb8:	4c02      	ldr	r4, [pc, #8]	; (2fc4 <encode_application_boolean+0x18>)
    2fba:	47a0      	blx	r4
}
    2fbc:	bd10      	pop	{r4, pc}
    uint32_t len_value = 0;
    2fbe:	2300      	movs	r3, #0
    2fc0:	e7f8      	b.n	2fb4 <encode_application_boolean+0x8>
    2fc2:	46c0      	nop			; (mov r8, r8)
    2fc4:	00002c79 	.word	0x00002c79

00002fc8 <decode_boolean>:
    if (len_value) {
    2fc8:	2800      	cmp	r0, #0
    2fca:	d000      	beq.n	2fce <decode_boolean+0x6>
        boolean_value = true;
    2fcc:	2001      	movs	r0, #1
}
    2fce:	4770      	bx	lr

00002fd0 <decode_bitstring>:

/* from clause 20.2.10 Encoding of a Bit String Value */
/* returns the number of apdu bytes consumed */
int decode_bitstring(
    uint8_t *apdu, uint32_t len_value, BACNET_BIT_STRING *bit_string)
{
    2fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fd2:	46c6      	mov	lr, r8
    2fd4:	b500      	push	{lr}
    2fd6:	b082      	sub	sp, #8
    2fd8:	0007      	movs	r7, r0
    2fda:	000e      	movs	r6, r1
    2fdc:	9201      	str	r2, [sp, #4]
    int len = 0;
    uint8_t unused_bits = 0;
    uint32_t i = 0;
    uint32_t bytes_used = 0;

    bitstring_init(bit_string);
    2fde:	0010      	movs	r0, r2
    2fe0:	4b13      	ldr	r3, [pc, #76]	; (3030 <decode_bitstring+0x60>)
    2fe2:	4798      	blx	r3
    if (len_value) {
    2fe4:	2e00      	cmp	r6, #0
    2fe6:	d01d      	beq.n	3024 <decode_bitstring+0x54>
        /* the first octet contains the unused bits */
        bytes_used = len_value - 1;
    2fe8:	3e01      	subs	r6, #1
        if (bytes_used <= MAX_BITSTRING_BYTES) {
    2fea:	2e0f      	cmp	r6, #15
    2fec:	d802      	bhi.n	2ff4 <decode_bitstring+0x24>
    2fee:	2400      	movs	r4, #0
    2ff0:	2501      	movs	r5, #1
    2ff2:	e00d      	b.n	3010 <decode_bitstring+0x40>
    int len = 0;
    2ff4:	2500      	movs	r5, #0
    2ff6:	e016      	b.n	3026 <decode_bitstring+0x56>
            len = 1;
            for (i = 0; i < bytes_used; i++) {
                bitstring_set_octet(
                    bit_string, (uint8_t)i, byte_reverse_bits(apdu[len++]));
    2ff8:	1c6b      	adds	r3, r5, #1
    2ffa:	4698      	mov	r8, r3
                bitstring_set_octet(
    2ffc:	5d78      	ldrb	r0, [r7, r5]
    2ffe:	4b0d      	ldr	r3, [pc, #52]	; (3034 <decode_bitstring+0x64>)
    3000:	4798      	blx	r3
    3002:	0002      	movs	r2, r0
    3004:	b2e1      	uxtb	r1, r4
    3006:	9801      	ldr	r0, [sp, #4]
    3008:	4b0b      	ldr	r3, [pc, #44]	; (3038 <decode_bitstring+0x68>)
    300a:	4798      	blx	r3
            for (i = 0; i < bytes_used; i++) {
    300c:	3401      	adds	r4, #1
                    bit_string, (uint8_t)i, byte_reverse_bits(apdu[len++]));
    300e:	4645      	mov	r5, r8
            for (i = 0; i < bytes_used; i++) {
    3010:	42b4      	cmp	r4, r6
    3012:	d3f1      	bcc.n	2ff8 <decode_bitstring+0x28>
            }
            unused_bits = (uint8_t)(apdu[0] & 0x07);
    3014:	783b      	ldrb	r3, [r7, #0]
    3016:	2207      	movs	r2, #7
    3018:	401a      	ands	r2, r3
            bitstring_set_bits_used(
    301a:	b2f1      	uxtb	r1, r6
    301c:	9801      	ldr	r0, [sp, #4]
    301e:	4b07      	ldr	r3, [pc, #28]	; (303c <decode_bitstring+0x6c>)
    3020:	4798      	blx	r3
    3022:	e000      	b.n	3026 <decode_bitstring+0x56>
    int len = 0;
    3024:	2500      	movs	r5, #0
                bit_string, (uint8_t)bytes_used, unused_bits);
        }
    }

    return len;
}
    3026:	0028      	movs	r0, r5
    3028:	b002      	add	sp, #8
    302a:	bc04      	pop	{r2}
    302c:	4690      	mov	r8, r2
    302e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3030:	00003e71 	.word	0x00003e71
    3034:	00002b9d 	.word	0x00002b9d
    3038:	00003ee5 	.word	0x00003ee5
    303c:	00003efd 	.word	0x00003efd

00003040 <encode_bitstring>:
}

/* from clause 20.2.10 Encoding of a Bit String Value */
/* returns the number of apdu bytes consumed */
int encode_bitstring(uint8_t *apdu, BACNET_BIT_STRING *bit_string)
{
    3040:	b5f0      	push	{r4, r5, r6, r7, lr}
    3042:	46ce      	mov	lr, r9
    3044:	b500      	push	{lr}
    3046:	b082      	sub	sp, #8
    3048:	0006      	movs	r6, r0
    304a:	9101      	str	r1, [sp, #4]
    uint8_t remaining_used_bits = 0;
    uint8_t used_bytes = 0;
    uint8_t i = 0;

    /* if the bit string is empty, then the first octet shall be zero */
    if (bitstring_bits_used(bit_string) == 0) {
    304c:	0008      	movs	r0, r1
    304e:	4b16      	ldr	r3, [pc, #88]	; (30a8 <encode_bitstring+0x68>)
    3050:	4798      	blx	r3
    3052:	2800      	cmp	r0, #0
    3054:	d106      	bne.n	3064 <encode_bitstring+0x24>
        apdu[len++] = 0;
    3056:	2300      	movs	r3, #0
    3058:	7033      	strb	r3, [r6, #0]
    305a:	3001      	adds	r0, #1
            apdu[len++] = byte_reverse_bits(bitstring_octet(bit_string, i));
        }
    }

    return len;
}
    305c:	b002      	add	sp, #8
    305e:	bc04      	pop	{r2}
    3060:	4691      	mov	r9, r2
    3062:	bdf0      	pop	{r4, r5, r6, r7, pc}
        used_bytes = bitstring_bytes_used(bit_string);
    3064:	9801      	ldr	r0, [sp, #4]
    3066:	4b11      	ldr	r3, [pc, #68]	; (30ac <encode_bitstring+0x6c>)
    3068:	4798      	blx	r3
    306a:	0004      	movs	r4, r0
    306c:	4681      	mov	r9, r0
            (uint8_t)(bitstring_bits_used(bit_string) - ((used_bytes - 1) * 8));
    306e:	9801      	ldr	r0, [sp, #4]
    3070:	4b0d      	ldr	r3, [pc, #52]	; (30a8 <encode_bitstring+0x68>)
    3072:	4798      	blx	r3
    3074:	3c01      	subs	r4, #1
    3076:	00e4      	lsls	r4, r4, #3
    3078:	b2e4      	uxtb	r4, r4
        remaining_used_bits =
    307a:	1b04      	subs	r4, r0, r4
    307c:	b2e4      	uxtb	r4, r4
        apdu[len++] = (uint8_t)(8 - remaining_used_bits);
    307e:	2308      	movs	r3, #8
    3080:	1b1c      	subs	r4, r3, r4
    3082:	7034      	strb	r4, [r6, #0]
        for (i = 0; i < used_bytes; i++) {
    3084:	2400      	movs	r4, #0
        apdu[len++] = (uint8_t)(8 - remaining_used_bits);
    3086:	2001      	movs	r0, #1
        for (i = 0; i < used_bytes; i++) {
    3088:	e00b      	b.n	30a2 <encode_bitstring+0x62>
            apdu[len++] = byte_reverse_bits(bitstring_octet(bit_string, i));
    308a:	1c47      	adds	r7, r0, #1
    308c:	1835      	adds	r5, r6, r0
    308e:	0021      	movs	r1, r4
    3090:	9801      	ldr	r0, [sp, #4]
    3092:	4b07      	ldr	r3, [pc, #28]	; (30b0 <encode_bitstring+0x70>)
    3094:	4798      	blx	r3
    3096:	4b07      	ldr	r3, [pc, #28]	; (30b4 <encode_bitstring+0x74>)
    3098:	4798      	blx	r3
    309a:	7028      	strb	r0, [r5, #0]
        for (i = 0; i < used_bytes; i++) {
    309c:	3401      	adds	r4, #1
    309e:	b2e4      	uxtb	r4, r4
            apdu[len++] = byte_reverse_bits(bitstring_octet(bit_string, i));
    30a0:	0038      	movs	r0, r7
        for (i = 0; i < used_bytes; i++) {
    30a2:	454c      	cmp	r4, r9
    30a4:	d3f1      	bcc.n	308a <encode_bitstring+0x4a>
    30a6:	e7d9      	b.n	305c <encode_bitstring+0x1c>
    30a8:	00003ebb 	.word	0x00003ebb
    30ac:	00003ebf 	.word	0x00003ebf
    30b0:	00003ecf 	.word	0x00003ecf
    30b4:	00002b9d 	.word	0x00002b9d

000030b8 <encode_application_bitstring>:

int encode_application_bitstring(uint8_t *apdu, BACNET_BIT_STRING *bit_string)
{
    30b8:	b570      	push	{r4, r5, r6, lr}
    30ba:	0005      	movs	r5, r0
    30bc:	000e      	movs	r6, r1
    int len = 0;
    uint32_t bit_string_encoded_length = 1; /* 1 for the bits remaining octet */

    /* bit string may use more than 1 octet for the tag, so find out how many */
    bit_string_encoded_length += bitstring_bytes_used(bit_string);
    30be:	0008      	movs	r0, r1
    30c0:	4b07      	ldr	r3, [pc, #28]	; (30e0 <encode_application_bitstring+0x28>)
    30c2:	4798      	blx	r3
    30c4:	1c43      	adds	r3, r0, #1
    len = encode_tag(&apdu[0], BACNET_APPLICATION_TAG_BIT_STRING, false,
    30c6:	2200      	movs	r2, #0
    30c8:	2108      	movs	r1, #8
    30ca:	0028      	movs	r0, r5
    30cc:	4c05      	ldr	r4, [pc, #20]	; (30e4 <encode_application_bitstring+0x2c>)
    30ce:	47a0      	blx	r4
    30d0:	0004      	movs	r4, r0
        bit_string_encoded_length);
    len += encode_bitstring(&apdu[len], bit_string);
    30d2:	1828      	adds	r0, r5, r0
    30d4:	0031      	movs	r1, r6
    30d6:	4b04      	ldr	r3, [pc, #16]	; (30e8 <encode_application_bitstring+0x30>)
    30d8:	4798      	blx	r3
    30da:	1820      	adds	r0, r4, r0

    return len;
}
    30dc:	bd70      	pop	{r4, r5, r6, pc}
    30de:	46c0      	nop			; (mov r8, r8)
    30e0:	00003ebf 	.word	0x00003ebf
    30e4:	00002c79 	.word	0x00002c79
    30e8:	00003041 	.word	0x00003041

000030ec <decode_object_id>:

/* from clause 20.2.14 Encoding of an Object Identifier Value */
/* returns the number of apdu bytes consumed */
int decode_object_id(
    uint8_t *apdu, BACNET_OBJECT_TYPE *object_type,uint32_t *instance)
{
    30ec:	b530      	push	{r4, r5, lr}
    30ee:	b083      	sub	sp, #12
    30f0:	000d      	movs	r5, r1
    30f2:	0014      	movs	r4, r2
    uint32_t value = 0;
    30f4:	2300      	movs	r3, #0
    30f6:	9301      	str	r3, [sp, #4]
    int len = 0;

    len = decode_unsigned32(apdu, &value);
    30f8:	a901      	add	r1, sp, #4
    30fa:	4b05      	ldr	r3, [pc, #20]	; (3110 <decode_object_id+0x24>)
    30fc:	4798      	blx	r3
    *object_type = (BACNET_OBJECT_TYPE)
        (((value >> BACNET_INSTANCE_BITS) & BACNET_MAX_OBJECT));
    30fe:	9b01      	ldr	r3, [sp, #4]
    3100:	0d9a      	lsrs	r2, r3, #22
    *object_type = (BACNET_OBJECT_TYPE)
    3102:	802a      	strh	r2, [r5, #0]
    *instance = (value & BACNET_MAX_INSTANCE);
    3104:	029b      	lsls	r3, r3, #10
    3106:	0a9b      	lsrs	r3, r3, #10
    3108:	6023      	str	r3, [r4, #0]

    return len;
}
    310a:	b003      	add	sp, #12
    310c:	bd30      	pop	{r4, r5, pc}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	00003937 	.word	0x00003937

00003114 <bacnet_object_id_decode>:

int bacnet_object_id_decode(uint8_t *apdu,
    uint32_t len_value_type,
    BACNET_OBJECT_TYPE *object_type,
    uint32_t *instance)
{
    3114:	b510      	push	{r4, lr}
    3116:	0014      	movs	r4, r2
    if (len_value_type != 4) {
    3118:	2904      	cmp	r1, #4
    311a:	d001      	beq.n	3120 <bacnet_object_id_decode+0xc>
        return 0;
    311c:	2000      	movs	r0, #0
    } else {
        return decode_object_id(apdu, object_type, instance);
    }
}
    311e:	bd10      	pop	{r4, pc}
        return decode_object_id(apdu, object_type, instance);
    3120:	001a      	movs	r2, r3
    3122:	0021      	movs	r1, r4
    3124:	4b01      	ldr	r3, [pc, #4]	; (312c <bacnet_object_id_decode+0x18>)
    3126:	4798      	blx	r3
    3128:	e7f9      	b.n	311e <bacnet_object_id_decode+0xa>
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	000030ed 	.word	0x000030ed

00003130 <encode_bacnet_object_id>:

/* from clause 20.2.14 Encoding of an Object Identifier Value */
/* returns the number of apdu bytes consumed */
int encode_bacnet_object_id
    (uint8_t *apdu, BACNET_OBJECT_TYPE object_type, uint32_t instance)
{
    3130:	b510      	push	{r4, lr}
    uint32_t value = 0;
    int len = 0;

    value = (((uint32_t)object_type & BACNET_MAX_OBJECT)
        << BACNET_INSTANCE_BITS) | (instance & BACNET_MAX_INSTANCE);
    3132:	0589      	lsls	r1, r1, #22
    3134:	0292      	lsls	r2, r2, #10
    3136:	0a92      	lsrs	r2, r2, #10
    value = (((uint32_t)object_type & BACNET_MAX_OBJECT)
    3138:	4311      	orrs	r1, r2
    len = encode_unsigned32(apdu, value);
    313a:	4b01      	ldr	r3, [pc, #4]	; (3140 <encode_bacnet_object_id+0x10>)
    313c:	4798      	blx	r3

    return len;
}
    313e:	bd10      	pop	{r4, pc}
    3140:	00003925 	.word	0x00003925

00003144 <encode_context_object_id>:
/* returns the number of apdu bytes consumed */
int encode_context_object_id(uint8_t *apdu,
    uint8_t tag_number,
    BACNET_OBJECT_TYPE object_type,
    uint32_t instance)
{
    3144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3146:	0005      	movs	r5, r0
    3148:	0016      	movs	r6, r2
    314a:	001f      	movs	r7, r3
    int len = 0;

    /* length of object id is 4 octets, as per 20.2.14 */

    len = encode_tag(&apdu[0], tag_number, true, 4);
    314c:	2304      	movs	r3, #4
    314e:	2201      	movs	r2, #1
    3150:	4c04      	ldr	r4, [pc, #16]	; (3164 <encode_context_object_id+0x20>)
    3152:	47a0      	blx	r4
    3154:	0004      	movs	r4, r0
    len += encode_bacnet_object_id(&apdu[len], object_type, instance);
    3156:	1828      	adds	r0, r5, r0
    3158:	003a      	movs	r2, r7
    315a:	0031      	movs	r1, r6
    315c:	4b02      	ldr	r3, [pc, #8]	; (3168 <encode_context_object_id+0x24>)
    315e:	4798      	blx	r3
    3160:	1820      	adds	r0, r4, r0

    return len;
}
    3162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3164:	00002c79 	.word	0x00002c79
    3168:	00003131 	.word	0x00003131

0000316c <encode_application_object_id>:
/* from clause 20.2.14 Encoding of an Object Identifier Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_object_id(
    uint8_t *apdu, BACNET_OBJECT_TYPE object_type, uint32_t instance)
{
    316c:	b570      	push	{r4, r5, r6, lr}
    316e:	0005      	movs	r5, r0
    int len = 0;

    /* assumes that the tag only consumes 1 octet */
    len = encode_bacnet_object_id(&apdu[1], object_type, instance);
    3170:	3001      	adds	r0, #1
    3172:	4b05      	ldr	r3, [pc, #20]	; (3188 <encode_application_object_id+0x1c>)
    3174:	4798      	blx	r3
    3176:	0004      	movs	r4, r0
    len += encode_tag(
    3178:	0003      	movs	r3, r0
    317a:	2200      	movs	r2, #0
    317c:	210c      	movs	r1, #12
    317e:	0028      	movs	r0, r5
    3180:	4d02      	ldr	r5, [pc, #8]	; (318c <encode_application_object_id+0x20>)
    3182:	47a8      	blx	r5
    3184:	1820      	adds	r0, r4, r0
        &apdu[0], BACNET_APPLICATION_TAG_OBJECT_ID, false, (uint32_t)len);

    return len;
}
    3186:	bd70      	pop	{r4, r5, r6, pc}
    3188:	00003131 	.word	0x00003131
    318c:	00002c79 	.word	0x00002c79

00003190 <encode_octet_string>:
#if BACNET_USE_OCTETSTRING

/* from clause 20.2.8 Encoding of an Octet String Value */
/* returns the number of apdu bytes consumed */
int encode_octet_string(uint8_t *apdu, BACNET_OCTET_STRING *octet_string)
{
    3190:	b570      	push	{r4, r5, r6, lr}
    3192:	0005      	movs	r5, r0
    3194:	1e0e      	subs	r6, r1, #0
    int len = 0; /* return value */
    uint8_t *value;
    int i = 0; /* loop counter */

    if (octet_string) {
    3196:	d011      	beq.n	31bc <encode_octet_string+0x2c>
        /* FIXME: might need to pass in the length of the APDU
           to bounds check since it might not be the only data chunk */
        len = (int)octetstring_length(octet_string);
    3198:	0008      	movs	r0, r1
    319a:	4b09      	ldr	r3, [pc, #36]	; (31c0 <encode_octet_string+0x30>)
    319c:	4798      	blx	r3
    319e:	0004      	movs	r4, r0
        value = octetstring_value(octet_string);
    31a0:	0030      	movs	r0, r6
    31a2:	4b08      	ldr	r3, [pc, #32]	; (31c4 <encode_octet_string+0x34>)
    31a4:	4798      	blx	r3
        if (value) {
    31a6:	2800      	cmp	r0, #0
    31a8:	d006      	beq.n	31b8 <encode_octet_string+0x28>
    31aa:	2300      	movs	r3, #0
    31ac:	e002      	b.n	31b4 <encode_octet_string+0x24>
            for (i = 0; i < len; i++) {
                apdu[i] = value[i];
    31ae:	5cc2      	ldrb	r2, [r0, r3]
    31b0:	54ea      	strb	r2, [r5, r3]
            for (i = 0; i < len; i++) {
    31b2:	3301      	adds	r3, #1
    31b4:	42a3      	cmp	r3, r4
    31b6:	dbfa      	blt.n	31ae <encode_octet_string+0x1e>
            }
        }
    }

    return len;
}
    31b8:	0020      	movs	r0, r4
    31ba:	bd70      	pop	{r4, r5, r6, pc}
    int len = 0; /* return value */
    31bc:	2400      	movs	r4, #0
    return len;
    31be:	e7fb      	b.n	31b8 <encode_octet_string+0x28>
    31c0:	00004149 	.word	0x00004149
    31c4:	0000413d 	.word	0x0000413d

000031c8 <encode_application_octet_string>:
/* from clause 20.2.8 Encoding of an Octet String Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_octet_string(
    uint8_t *apdu, BACNET_OCTET_STRING *octet_string)
{
    31c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ca:	0006      	movs	r6, r0
    31cc:	1e0d      	subs	r5, r1, #0
    int apdu_len = 0;

    if (octet_string) {
    31ce:	d018      	beq.n	3202 <encode_application_octet_string+0x3a>
        apdu_len = encode_tag(&apdu[0], BACNET_APPLICATION_TAG_OCTET_STRING,
            false, octetstring_length(octet_string));
    31d0:	0008      	movs	r0, r1
    31d2:	4f0d      	ldr	r7, [pc, #52]	; (3208 <encode_application_octet_string+0x40>)
    31d4:	47b8      	blx	r7
    31d6:	0003      	movs	r3, r0
        apdu_len = encode_tag(&apdu[0], BACNET_APPLICATION_TAG_OCTET_STRING,
    31d8:	2200      	movs	r2, #0
    31da:	2106      	movs	r1, #6
    31dc:	0030      	movs	r0, r6
    31de:	4c0b      	ldr	r4, [pc, #44]	; (320c <encode_application_octet_string+0x44>)
    31e0:	47a0      	blx	r4
    31e2:	0004      	movs	r4, r0
        /* FIXME: probably need to pass in the length of the APDU
           to bounds check since it might not be the only data chunk */
        if ((apdu_len + octetstring_length(octet_string)) < MAX_APDU) {
    31e4:	0028      	movs	r0, r5
    31e6:	47b8      	blx	r7
    31e8:	1900      	adds	r0, r0, r4
    31ea:	23e0      	movs	r3, #224	; 0xe0
    31ec:	33ff      	adds	r3, #255	; 0xff
    31ee:	4298      	cmp	r0, r3
    31f0:	d901      	bls.n	31f6 <encode_application_octet_string+0x2e>
            apdu_len += encode_octet_string(&apdu[apdu_len], octet_string);
        } else {
            apdu_len = 0;
    31f2:	2000      	movs	r0, #0
        }
    }

    return apdu_len;
}
    31f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            apdu_len += encode_octet_string(&apdu[apdu_len], octet_string);
    31f6:	1930      	adds	r0, r6, r4
    31f8:	0029      	movs	r1, r5
    31fa:	4b05      	ldr	r3, [pc, #20]	; (3210 <encode_application_octet_string+0x48>)
    31fc:	4798      	blx	r3
    31fe:	1820      	adds	r0, r4, r0
    3200:	e7f8      	b.n	31f4 <encode_application_octet_string+0x2c>
    int apdu_len = 0;
    3202:	2000      	movs	r0, #0
    3204:	e7f6      	b.n	31f4 <encode_application_octet_string+0x2c>
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	00004149 	.word	0x00004149
    320c:	00002c79 	.word	0x00002c79
    3210:	00003191 	.word	0x00003191

00003214 <bacnet_octet_string_decode>:
 */
int bacnet_octet_string_decode(uint8_t *apdu,
    uint16_t apdu_len_max,
    uint32_t len_value,
    BACNET_OCTET_STRING *value)
{
    3214:	b510      	push	{r4, lr}
    3216:	0014      	movs	r4, r2
    int len = BACNET_STATUS_ERROR;
    bool status = false;

    if (value && (len_value <= apdu_len_max)) {
    3218:	2b00      	cmp	r3, #0
    321a:	d011      	beq.n	3240 <bacnet_octet_string_decode+0x2c>
    321c:	4291      	cmp	r1, r2
    321e:	d312      	bcc.n	3246 <bacnet_octet_string_decode+0x32>
        if (len_value > 0) {
    3220:	2a00      	cmp	r2, #0
    3222:	d007      	beq.n	3234 <bacnet_octet_string_decode+0x20>
            status = octetstring_init(value, &apdu[0], len_value);
    3224:	0001      	movs	r1, r0
    3226:	0018      	movs	r0, r3
    3228:	4b0a      	ldr	r3, [pc, #40]	; (3254 <bacnet_octet_string_decode+0x40>)
    322a:	4798      	blx	r3
        } else {
            status = octetstring_init(value, NULL, 0);
        }
        if (status) {
    322c:	2800      	cmp	r0, #0
    322e:	d00d      	beq.n	324c <bacnet_octet_string_decode+0x38>
            len = (int)len_value;
    3230:	0020      	movs	r0, r4
        }
    }

    return len;
}
    3232:	bd10      	pop	{r4, pc}
            status = octetstring_init(value, NULL, 0);
    3234:	2200      	movs	r2, #0
    3236:	2100      	movs	r1, #0
    3238:	0018      	movs	r0, r3
    323a:	4b06      	ldr	r3, [pc, #24]	; (3254 <bacnet_octet_string_decode+0x40>)
    323c:	4798      	blx	r3
    323e:	e7f5      	b.n	322c <bacnet_octet_string_decode+0x18>
    int len = BACNET_STATUS_ERROR;
    3240:	2001      	movs	r0, #1
    3242:	4240      	negs	r0, r0
    3244:	e7f5      	b.n	3232 <bacnet_octet_string_decode+0x1e>
    3246:	2001      	movs	r0, #1
    3248:	4240      	negs	r0, r0
    324a:	e7f2      	b.n	3232 <bacnet_octet_string_decode+0x1e>
    324c:	2001      	movs	r0, #1
    324e:	4240      	negs	r0, r0
    return len;
    3250:	e7ef      	b.n	3232 <bacnet_octet_string_decode+0x1e>
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	000040e5 	.word	0x000040e5

00003258 <decode_octet_string>:
/* from clause 20.2.8 Encoding of an Octet String Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed, or BACNET_STATUS_ERROR */
int decode_octet_string(
    uint8_t *apdu, uint32_t len_value, BACNET_OCTET_STRING *value)
{
    3258:	b510      	push	{r4, lr}
    325a:	0013      	movs	r3, r2
    const uint16_t apdu_len_max = MAX_APDU;

    return bacnet_octet_string_decode(apdu, apdu_len_max, len_value, value);
    325c:	000a      	movs	r2, r1
    325e:	21f0      	movs	r1, #240	; 0xf0
    3260:	0049      	lsls	r1, r1, #1
    3262:	4c01      	ldr	r4, [pc, #4]	; (3268 <decode_octet_string+0x10>)
    3264:	47a0      	blx	r4
}
    3266:	bd10      	pop	{r4, pc}
    3268:	00003215 	.word	0x00003215

0000326c <encode_bacnet_character_string_safe>:
uint32_t encode_bacnet_character_string_safe(uint8_t *apdu,
    uint32_t max_apdu,
    uint8_t encoding,
    char *pString,
    uint32_t length)
{
    326c:	b530      	push	{r4, r5, lr}
    326e:	9c03      	ldr	r4, [sp, #12]
    uint32_t apdu_len = 1 /*encoding */;
    uint32_t i;

    apdu_len += length;
    3270:	1c65      	adds	r5, r4, #1
    if (apdu && (apdu_len <= max_apdu)) {
    3272:	2800      	cmp	r0, #0
    3274:	d00c      	beq.n	3290 <encode_bacnet_character_string_safe+0x24>
    3276:	428d      	cmp	r5, r1
    3278:	d80c      	bhi.n	3294 <encode_bacnet_character_string_safe+0x28>
        apdu[0] = encoding;
    327a:	7002      	strb	r2, [r0, #0]
        for (i = 0; i < length; i++) {
    327c:	2200      	movs	r2, #0
    327e:	e003      	b.n	3288 <encode_bacnet_character_string_safe+0x1c>
            apdu[1 + i] = (uint8_t)pString[i];
    3280:	1c51      	adds	r1, r2, #1
    3282:	5c9a      	ldrb	r2, [r3, r2]
    3284:	5442      	strb	r2, [r0, r1]
        for (i = 0; i < length; i++) {
    3286:	000a      	movs	r2, r1
    3288:	42a2      	cmp	r2, r4
    328a:	d3f9      	bcc.n	3280 <encode_bacnet_character_string_safe+0x14>
    } else {
        apdu_len = 0;
    }

    return apdu_len;
}
    328c:	0028      	movs	r0, r5
    328e:	bd30      	pop	{r4, r5, pc}
        apdu_len = 0;
    3290:	2500      	movs	r5, #0
    3292:	e7fb      	b.n	328c <encode_bacnet_character_string_safe+0x20>
    3294:	2500      	movs	r5, #0
    return apdu_len;
    3296:	e7f9      	b.n	328c <encode_bacnet_character_string_safe+0x20>

00003298 <encode_bacnet_character_string>:

int encode_bacnet_character_string(
    uint8_t *apdu, BACNET_CHARACTER_STRING *char_string)
{
    3298:	b5f0      	push	{r4, r5, r6, r7, lr}
    329a:	b083      	sub	sp, #12
    329c:	0005      	movs	r5, r0
    329e:	000c      	movs	r4, r1
    return (int)encode_bacnet_character_string_safe(apdu, MAX_APDU,
    32a0:	0008      	movs	r0, r1
    32a2:	4b0a      	ldr	r3, [pc, #40]	; (32cc <encode_bacnet_character_string+0x34>)
    32a4:	4798      	blx	r3
    32a6:	0006      	movs	r6, r0
    32a8:	0020      	movs	r0, r4
    32aa:	4b09      	ldr	r3, [pc, #36]	; (32d0 <encode_bacnet_character_string+0x38>)
    32ac:	4798      	blx	r3
    32ae:	0007      	movs	r7, r0
        characterstring_encoding(char_string),
        characterstring_value(char_string),
        characterstring_length(char_string));
    32b0:	0020      	movs	r0, r4
    32b2:	4b08      	ldr	r3, [pc, #32]	; (32d4 <encode_bacnet_character_string+0x3c>)
    32b4:	4798      	blx	r3
    return (int)encode_bacnet_character_string_safe(apdu, MAX_APDU,
    32b6:	9000      	str	r0, [sp, #0]
    32b8:	003b      	movs	r3, r7
    32ba:	0032      	movs	r2, r6
    32bc:	21f0      	movs	r1, #240	; 0xf0
    32be:	0049      	lsls	r1, r1, #1
    32c0:	0028      	movs	r0, r5
    32c2:	4c05      	ldr	r4, [pc, #20]	; (32d8 <encode_bacnet_character_string+0x40>)
    32c4:	47a0      	blx	r4
}
    32c6:	b003      	add	sp, #12
    32c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	0000409b 	.word	0x0000409b
    32d0:	00004079 	.word	0x00004079
    32d4:	00004085 	.word	0x00004085
    32d8:	0000326d 	.word	0x0000326d

000032dc <encode_application_character_string>:
/* from clause 20.2.9 Encoding of a Character String Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_character_string(
    uint8_t *apdu, BACNET_CHARACTER_STRING *char_string)
{
    32dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32de:	0005      	movs	r5, r0
    32e0:	000e      	movs	r6, r1
    int len = 0;
    int string_len = 0;

    string_len =
        (int)characterstring_length(char_string) + 1 /* for encoding */;
    32e2:	0008      	movs	r0, r1
    32e4:	4b0b      	ldr	r3, [pc, #44]	; (3314 <encode_application_character_string+0x38>)
    32e6:	4798      	blx	r3
    string_len =
    32e8:	1c44      	adds	r4, r0, #1
    len = encode_tag(&apdu[0], BACNET_APPLICATION_TAG_CHARACTER_STRING, false,
    32ea:	0023      	movs	r3, r4
    32ec:	2200      	movs	r2, #0
    32ee:	2107      	movs	r1, #7
    32f0:	0028      	movs	r0, r5
    32f2:	4f09      	ldr	r7, [pc, #36]	; (3318 <encode_application_character_string+0x3c>)
    32f4:	47b8      	blx	r7
    32f6:	0007      	movs	r7, r0
        (uint32_t)string_len);
    if ((len + string_len) < MAX_APDU) {
    32f8:	1824      	adds	r4, r4, r0
    32fa:	23e0      	movs	r3, #224	; 0xe0
    32fc:	33ff      	adds	r3, #255	; 0xff
    32fe:	429c      	cmp	r4, r3
    3300:	dd01      	ble.n	3306 <encode_application_character_string+0x2a>
        len += encode_bacnet_character_string(&apdu[len], char_string);
    } else {
        len = 0;
    3302:	2000      	movs	r0, #0
    }

    return len;
}
    3304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len += encode_bacnet_character_string(&apdu[len], char_string);
    3306:	1828      	adds	r0, r5, r0
    3308:	0031      	movs	r1, r6
    330a:	4b04      	ldr	r3, [pc, #16]	; (331c <encode_application_character_string+0x40>)
    330c:	4798      	blx	r3
    330e:	1838      	adds	r0, r7, r0
    3310:	e7f8      	b.n	3304 <encode_application_character_string+0x28>
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	00004085 	.word	0x00004085
    3318:	00002c79 	.word	0x00002c79
    331c:	00003299 	.word	0x00003299

00003320 <bacnet_character_string_decode>:
 */
int bacnet_character_string_decode(uint8_t *apdu,
    uint16_t apdu_len_max,
    uint32_t len_value,
    BACNET_CHARACTER_STRING *char_string)
{
    3320:	b570      	push	{r4, r5, r6, lr}
    3322:	0014      	movs	r4, r2
    3324:	001d      	movs	r5, r3
    bool status = false;
    char *string_value = NULL;
    int len = 0;

    /* check to see if the APDU is long enough */
    if (len_value <= apdu_len_max) {
    3326:	4291      	cmp	r1, r2
    3328:	d30d      	bcc.n	3346 <bacnet_character_string_decode+0x26>
        if (len_value > 1) {
    332a:	2a01      	cmp	r2, #1
    332c:	d909      	bls.n	3342 <bacnet_character_string_decode+0x22>
            string_value = (char *)&apdu[1];
    332e:	1c42      	adds	r2, r0, #1
        }
        status = characterstring_init(
    3330:	7801      	ldrb	r1, [r0, #0]
            char_string, apdu[0], string_value, len_value - 1);
    3332:	1e63      	subs	r3, r4, #1
        status = characterstring_init(
    3334:	0028      	movs	r0, r5
    3336:	4d06      	ldr	r5, [pc, #24]	; (3350 <bacnet_character_string_decode+0x30>)
    3338:	47a8      	blx	r5
        if (status) {
    333a:	2800      	cmp	r0, #0
    333c:	d005      	beq.n	334a <bacnet_character_string_decode+0x2a>
            len = (int)len_value;
    333e:	0020      	movs	r0, r4
    3340:	e002      	b.n	3348 <bacnet_character_string_decode+0x28>
    char *string_value = NULL;
    3342:	2200      	movs	r2, #0
    3344:	e7f4      	b.n	3330 <bacnet_character_string_decode+0x10>
    int len = 0;
    3346:	2000      	movs	r0, #0
        }
    }

    return len;
}
    3348:	bd70      	pop	{r4, r5, r6, pc}
    int len = 0;
    334a:	2000      	movs	r0, #0
    return len;
    334c:	e7fc      	b.n	3348 <bacnet_character_string_decode+0x28>
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	00003f11 	.word	0x00003f11

00003354 <decode_character_string>:
 *
 * @return  number of bytes decoded, or zero if errors occur
 */
int decode_character_string(
    uint8_t *apdu, uint32_t len_value, BACNET_CHARACTER_STRING *value)
{
    3354:	b510      	push	{r4, lr}
    3356:	0013      	movs	r3, r2
    const uint16_t apdu_len_max = MAX_APDU;

    return bacnet_character_string_decode(apdu, apdu_len_max, len_value, value);
    3358:	000a      	movs	r2, r1
    335a:	21f0      	movs	r1, #240	; 0xf0
    335c:	0049      	lsls	r1, r1, #1
    335e:	4c01      	ldr	r4, [pc, #4]	; (3364 <decode_character_string+0x10>)
    3360:	47a0      	blx	r4
}
    3362:	bd10      	pop	{r4, pc}
    3364:	00003321 	.word	0x00003321

00003368 <bacnet_unsigned_decode>:
 *
 * @return  number of bytes decoded, or zero if errors occur
 */
int bacnet_unsigned_decode(
    uint8_t *apdu, uint16_t apdu_len_max, uint32_t len_value, BACNET_UNSIGNED_INTEGER *value)
{
    3368:	b570      	push	{r4, r5, r6, lr}
    336a:	b084      	sub	sp, #16
    336c:	0014      	movs	r4, r2
    336e:	001d      	movs	r5, r3
    int len = 0;
    uint16_t unsigned16_value = 0;
    3370:	2300      	movs	r3, #0
    3372:	220e      	movs	r2, #14
    3374:	446a      	add	r2, sp
    3376:	8013      	strh	r3, [r2, #0]
    uint32_t unsigned32_value = 0;
    3378:	9302      	str	r3, [sp, #8]
#ifdef UINT64_MAX
    uint64_t unsigned64_value = 0;
    337a:	2200      	movs	r2, #0
    337c:	2300      	movs	r3, #0
    337e:	9200      	str	r2, [sp, #0]
    3380:	9301      	str	r3, [sp, #4]
#endif

    if (value && (len_value <= apdu_len_max)) {
    3382:	2d00      	cmp	r5, #0
    3384:	d054      	beq.n	3430 <bacnet_unsigned_decode+0xc8>
    3386:	42a1      	cmp	r1, r4
    3388:	d354      	bcc.n	3434 <bacnet_unsigned_decode+0xcc>
        switch (len_value) {
    338a:	2c08      	cmp	r4, #8
    338c:	d84a      	bhi.n	3424 <bacnet_unsigned_decode+0xbc>
    338e:	00a3      	lsls	r3, r4, #2
    3390:	4a2a      	ldr	r2, [pc, #168]	; (343c <bacnet_unsigned_decode+0xd4>)
    3392:	58d3      	ldr	r3, [r2, r3]
    3394:	469f      	mov	pc, r3
            case 1:
                *value = apdu[0];
    3396:	7803      	ldrb	r3, [r0, #0]
    3398:	602b      	str	r3, [r5, #0]
    339a:	2300      	movs	r3, #0
    339c:	606b      	str	r3, [r5, #4]
                len = (int)len_value;
    339e:	0020      	movs	r0, r4
                break;
    33a0:	e049      	b.n	3436 <bacnet_unsigned_decode+0xce>
            case 2:
                decode_unsigned16(&apdu[0], &unsigned16_value);
    33a2:	260e      	movs	r6, #14
    33a4:	446e      	add	r6, sp
    33a6:	0031      	movs	r1, r6
    33a8:	4b25      	ldr	r3, [pc, #148]	; (3440 <bacnet_unsigned_decode+0xd8>)
    33aa:	4798      	blx	r3
                *value = unsigned16_value;
    33ac:	8833      	ldrh	r3, [r6, #0]
    33ae:	602b      	str	r3, [r5, #0]
    33b0:	2300      	movs	r3, #0
    33b2:	606b      	str	r3, [r5, #4]
                len = (int)len_value;
    33b4:	0020      	movs	r0, r4
                break;
    33b6:	e03e      	b.n	3436 <bacnet_unsigned_decode+0xce>
            case 3:
                decode_unsigned24(&apdu[0], &unsigned32_value);
    33b8:	a902      	add	r1, sp, #8
    33ba:	4b22      	ldr	r3, [pc, #136]	; (3444 <bacnet_unsigned_decode+0xdc>)
    33bc:	4798      	blx	r3
                *value = unsigned32_value;
    33be:	9b02      	ldr	r3, [sp, #8]
    33c0:	602b      	str	r3, [r5, #0]
    33c2:	2300      	movs	r3, #0
    33c4:	606b      	str	r3, [r5, #4]
                len = (int)len_value;
    33c6:	0020      	movs	r0, r4
                break;
    33c8:	e035      	b.n	3436 <bacnet_unsigned_decode+0xce>
            case 4:
                decode_unsigned32(&apdu[0], &unsigned32_value);
    33ca:	a902      	add	r1, sp, #8
    33cc:	4b1e      	ldr	r3, [pc, #120]	; (3448 <bacnet_unsigned_decode+0xe0>)
    33ce:	4798      	blx	r3
                *value = unsigned32_value;
    33d0:	9b02      	ldr	r3, [sp, #8]
    33d2:	602b      	str	r3, [r5, #0]
    33d4:	2300      	movs	r3, #0
    33d6:	606b      	str	r3, [r5, #4]
                len = (int)len_value;
    33d8:	0020      	movs	r0, r4
                break;
    33da:	e02c      	b.n	3436 <bacnet_unsigned_decode+0xce>
#ifdef UINT64_MAX
            case 5:
                decode_unsigned40(&apdu[0], &unsigned64_value);
    33dc:	4669      	mov	r1, sp
    33de:	4b1b      	ldr	r3, [pc, #108]	; (344c <bacnet_unsigned_decode+0xe4>)
    33e0:	4798      	blx	r3
                *value = unsigned64_value;
    33e2:	9a00      	ldr	r2, [sp, #0]
    33e4:	9b01      	ldr	r3, [sp, #4]
    33e6:	602a      	str	r2, [r5, #0]
    33e8:	606b      	str	r3, [r5, #4]
                len = (int)len_value;
    33ea:	0020      	movs	r0, r4
                break;
    33ec:	e023      	b.n	3436 <bacnet_unsigned_decode+0xce>
            case 6:
                decode_unsigned48(&apdu[0], &unsigned64_value);
    33ee:	4669      	mov	r1, sp
    33f0:	4b17      	ldr	r3, [pc, #92]	; (3450 <bacnet_unsigned_decode+0xe8>)
    33f2:	4798      	blx	r3
                *value = unsigned64_value;
    33f4:	9a00      	ldr	r2, [sp, #0]
    33f6:	9b01      	ldr	r3, [sp, #4]
    33f8:	602a      	str	r2, [r5, #0]
    33fa:	606b      	str	r3, [r5, #4]
                len = (int)len_value;
    33fc:	0020      	movs	r0, r4
                break;
    33fe:	e01a      	b.n	3436 <bacnet_unsigned_decode+0xce>
            case 7:
                decode_unsigned56(&apdu[0], &unsigned64_value);
    3400:	4669      	mov	r1, sp
    3402:	4b14      	ldr	r3, [pc, #80]	; (3454 <bacnet_unsigned_decode+0xec>)
    3404:	4798      	blx	r3
                *value = unsigned64_value;
    3406:	9a00      	ldr	r2, [sp, #0]
    3408:	9b01      	ldr	r3, [sp, #4]
    340a:	602a      	str	r2, [r5, #0]
    340c:	606b      	str	r3, [r5, #4]
                len = (int)len_value;
    340e:	0020      	movs	r0, r4
                break;
    3410:	e011      	b.n	3436 <bacnet_unsigned_decode+0xce>
            case 8:
                decode_unsigned64(&apdu[0], &unsigned64_value);
    3412:	4669      	mov	r1, sp
    3414:	4b10      	ldr	r3, [pc, #64]	; (3458 <bacnet_unsigned_decode+0xf0>)
    3416:	4798      	blx	r3
                *value = unsigned64_value;
    3418:	9a00      	ldr	r2, [sp, #0]
    341a:	9b01      	ldr	r3, [sp, #4]
    341c:	602a      	str	r2, [r5, #0]
    341e:	606b      	str	r3, [r5, #4]
                len = (int)len_value;
    3420:	0020      	movs	r0, r4
                break;
    3422:	e008      	b.n	3436 <bacnet_unsigned_decode+0xce>
#endif
            default:
                *value = 0;
    3424:	2200      	movs	r2, #0
    3426:	2300      	movs	r3, #0
    3428:	602a      	str	r2, [r5, #0]
    342a:	606b      	str	r3, [r5, #4]
    int len = 0;
    342c:	2000      	movs	r0, #0
                break;
    342e:	e002      	b.n	3436 <bacnet_unsigned_decode+0xce>
    int len = 0;
    3430:	2000      	movs	r0, #0
    3432:	e000      	b.n	3436 <bacnet_unsigned_decode+0xce>
    3434:	2000      	movs	r0, #0
        }
    }

    return len;
}
    3436:	b004      	add	sp, #16
    3438:	bd70      	pop	{r4, r5, r6, pc}
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	0000e5e8 	.word	0x0000e5e8
    3440:	000038e7 	.word	0x000038e7
    3444:	00003909 	.word	0x00003909
    3448:	00003937 	.word	0x00003937
    344c:	0000396f 	.word	0x0000396f
    3450:	000039b9 	.word	0x000039b9
    3454:	00003a0f 	.word	0x00003a0f
    3458:	00003a71 	.word	0x00003a71

0000345c <bacnet_unsigned_context_decode>:
 * @return  number of bytes decoded, zero if wrong tag number,
 * or error (-1) if malformed
 */
int bacnet_unsigned_context_decode(
    uint8_t *apdu, uint16_t apdu_len_max, uint8_t tag_value, BACNET_UNSIGNED_INTEGER *value)
{
    345c:	b5f0      	push	{r4, r5, r6, r7, lr}
    345e:	46c6      	mov	lr, r8
    3460:	b500      	push	{lr}
    3462:	b082      	sub	sp, #8
    3464:	0005      	movs	r5, r0
    3466:	000c      	movs	r4, r1
    3468:	001e      	movs	r6, r3
    int apdu_len = 0;
    unsigned len = 0;
    uint8_t tag_number = 0;
    346a:	2300      	movs	r3, #0
    346c:	4669      	mov	r1, sp
    346e:	71cb      	strb	r3, [r1, #7]
    uint32_t len_value_type = 0;
    3470:	9300      	str	r3, [sp, #0]

    if (apdu_len_max) {
    3472:	2c00      	cmp	r4, #0
    3474:	d104      	bne.n	3480 <bacnet_unsigned_context_decode+0x24>
    int apdu_len = 0;
    3476:	2000      	movs	r0, #0
            }
        }
    }

    return apdu_len;
}
    3478:	b002      	add	sp, #8
    347a:	bc04      	pop	{r2}
    347c:	4690      	mov	r8, r2
    347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (decode_is_context_tag(&apdu[apdu_len], tag_value) &&
    3480:	0011      	movs	r1, r2
    3482:	0028      	movs	r0, r5
    3484:	4b15      	ldr	r3, [pc, #84]	; (34dc <bacnet_unsigned_context_decode+0x80>)
    3486:	4798      	blx	r3
    3488:	2800      	cmp	r0, #0
    348a:	d01c      	beq.n	34c6 <bacnet_unsigned_context_decode+0x6a>
            !decode_is_closing_tag(&apdu[apdu_len])) {
    348c:	0028      	movs	r0, r5
    348e:	4b14      	ldr	r3, [pc, #80]	; (34e0 <bacnet_unsigned_context_decode+0x84>)
    3490:	4798      	blx	r3
        if (decode_is_context_tag(&apdu[apdu_len], tag_value) &&
    3492:	2800      	cmp	r0, #0
    3494:	d001      	beq.n	349a <bacnet_unsigned_context_decode+0x3e>
    int apdu_len = 0;
    3496:	2000      	movs	r0, #0
    3498:	e7ee      	b.n	3478 <bacnet_unsigned_context_decode+0x1c>
            len = bacnet_tag_number_and_value_decode(&apdu[apdu_len],
    349a:	466b      	mov	r3, sp
    349c:	466a      	mov	r2, sp
    349e:	3207      	adds	r2, #7
    34a0:	0021      	movs	r1, r4
    34a2:	0028      	movs	r0, r5
    34a4:	4f0f      	ldr	r7, [pc, #60]	; (34e4 <bacnet_unsigned_context_decode+0x88>)
    34a6:	47b8      	blx	r7
    34a8:	1e07      	subs	r7, r0, #0
            if (len > 0) {
    34aa:	d00e      	beq.n	34ca <bacnet_unsigned_context_decode+0x6e>
                if (apdu_len < apdu_len_max) {
    34ac:	4284      	cmp	r4, r0
    34ae:	dd0f      	ble.n	34d0 <bacnet_unsigned_context_decode+0x74>
                    len = bacnet_unsigned_decode(&apdu[apdu_len],
    34b0:	1a21      	subs	r1, r4, r0
    34b2:	b289      	uxth	r1, r1
    34b4:	1828      	adds	r0, r5, r0
    34b6:	0033      	movs	r3, r6
    34b8:	9a00      	ldr	r2, [sp, #0]
    34ba:	4c0b      	ldr	r4, [pc, #44]	; (34e8 <bacnet_unsigned_context_decode+0x8c>)
    34bc:	47a0      	blx	r4
                    if (len > 0) {
    34be:	2800      	cmp	r0, #0
    34c0:	d009      	beq.n	34d6 <bacnet_unsigned_context_decode+0x7a>
                        apdu_len += len;
    34c2:	1838      	adds	r0, r7, r0
    34c4:	e7d8      	b.n	3478 <bacnet_unsigned_context_decode+0x1c>
    int apdu_len = 0;
    34c6:	2000      	movs	r0, #0
    34c8:	e7d6      	b.n	3478 <bacnet_unsigned_context_decode+0x1c>
                return BACNET_STATUS_ERROR;
    34ca:	2001      	movs	r0, #1
    34cc:	4240      	negs	r0, r0
    34ce:	e7d3      	b.n	3478 <bacnet_unsigned_context_decode+0x1c>
                    return BACNET_STATUS_ERROR;
    34d0:	2001      	movs	r0, #1
    34d2:	4240      	negs	r0, r0
    34d4:	e7d0      	b.n	3478 <bacnet_unsigned_context_decode+0x1c>
                        return BACNET_STATUS_ERROR;
    34d6:	2001      	movs	r0, #1
    34d8:	4240      	negs	r0, r0
    34da:	e7cd      	b.n	3478 <bacnet_unsigned_context_decode+0x1c>
    34dc:	00002efd 	.word	0x00002efd
    34e0:	00002db1 	.word	0x00002db1
    34e4:	00002e51 	.word	0x00002e51
    34e8:	00003369 	.word	0x00003369

000034ec <decode_unsigned>:
 * @param value - the unsigned value decoded
 *
 * @return  number of bytes decoded, or zero if errors occur
 */
int decode_unsigned(uint8_t *apdu, uint32_t len_value, BACNET_UNSIGNED_INTEGER *value)
{
    34ec:	b510      	push	{r4, lr}
    34ee:	0013      	movs	r3, r2
    const uint16_t apdu_len_max = 8;
#else
    const uint16_t apdu_len_max = 4;
#endif

    return bacnet_unsigned_decode(apdu, apdu_len_max, len_value, value);
    34f0:	000a      	movs	r2, r1
    34f2:	2108      	movs	r1, #8
    34f4:	4c01      	ldr	r4, [pc, #4]	; (34fc <decode_unsigned+0x10>)
    34f6:	47a0      	blx	r4
}
    34f8:	bd10      	pop	{r4, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	00003369 	.word	0x00003369

00003500 <encode_bacnet_unsigned>:

/* from clause 20.2.4 Encoding of an Unsigned Integer Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_bacnet_unsigned(uint8_t *apdu, BACNET_UNSIGNED_INTEGER value)
{
    3500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3502:	0007      	movs	r7, r0
    3504:	0015      	movs	r5, r2
    3506:	001e      	movs	r6, r3
    int len = 0; /* return value */

    len = bacnet_unsigned_length(value);
    3508:	0010      	movs	r0, r2
    350a:	0019      	movs	r1, r3
    350c:	4b1d      	ldr	r3, [pc, #116]	; (3584 <encode_bacnet_unsigned+0x84>)
    350e:	4798      	blx	r3
    3510:	0004      	movs	r4, r0
    if (len == 1) {
    3512:	2801      	cmp	r0, #1
    3514:	d013      	beq.n	353e <encode_bacnet_unsigned+0x3e>
        apdu[0] = (uint8_t)value;
    } else if (len == 2) {
    3516:	2802      	cmp	r0, #2
    3518:	d013      	beq.n	3542 <encode_bacnet_unsigned+0x42>
        (void)encode_unsigned16(&apdu[0], (uint16_t)value);
    } else if (len == 3) {
    351a:	2803      	cmp	r0, #3
    351c:	d016      	beq.n	354c <encode_bacnet_unsigned+0x4c>
        (void)encode_unsigned24(&apdu[0], (uint32_t)value);
    } else {
#ifdef UINT64_MAX
        if (len == 4) {
    351e:	2804      	cmp	r0, #4
    3520:	d019      	beq.n	3556 <encode_bacnet_unsigned+0x56>
            (void)encode_unsigned32(&apdu[0], (uint32_t)value);
        } else if (len == 5) {
    3522:	2805      	cmp	r0, #5
    3524:	d01c      	beq.n	3560 <encode_bacnet_unsigned+0x60>
            (void)encode_unsigned40(&apdu[0], value);
        } else if (len == 6) {
    3526:	2806      	cmp	r0, #6
    3528:	d020      	beq.n	356c <encode_bacnet_unsigned+0x6c>
            (void)encode_unsigned48(&apdu[0], value);
        } else if (len == 7) {
    352a:	2807      	cmp	r0, #7
    352c:	d024      	beq.n	3578 <encode_bacnet_unsigned+0x78>
            (void)encode_unsigned56(&apdu[0], value);
        } else {
            len = encode_unsigned64(&apdu[0], value);
    352e:	002a      	movs	r2, r5
    3530:	0033      	movs	r3, r6
    3532:	0038      	movs	r0, r7
    3534:	4914      	ldr	r1, [pc, #80]	; (3588 <encode_bacnet_unsigned+0x88>)
    3536:	4788      	blx	r1
    3538:	0004      	movs	r4, r0
        len = encode_unsigned32(&apdu[0], value);
#endif
    }

    return len;
}
    353a:	0020      	movs	r0, r4
    353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        apdu[0] = (uint8_t)value;
    353e:	703d      	strb	r5, [r7, #0]
    3540:	e7fb      	b.n	353a <encode_bacnet_unsigned+0x3a>
        (void)encode_unsigned16(&apdu[0], (uint16_t)value);
    3542:	b2a9      	uxth	r1, r5
    3544:	0038      	movs	r0, r7
    3546:	4b11      	ldr	r3, [pc, #68]	; (358c <encode_bacnet_unsigned+0x8c>)
    3548:	4798      	blx	r3
    354a:	e7f6      	b.n	353a <encode_bacnet_unsigned+0x3a>
        (void)encode_unsigned24(&apdu[0], (uint32_t)value);
    354c:	0029      	movs	r1, r5
    354e:	0038      	movs	r0, r7
    3550:	4b0f      	ldr	r3, [pc, #60]	; (3590 <encode_bacnet_unsigned+0x90>)
    3552:	4798      	blx	r3
    3554:	e7f1      	b.n	353a <encode_bacnet_unsigned+0x3a>
            (void)encode_unsigned32(&apdu[0], (uint32_t)value);
    3556:	0029      	movs	r1, r5
    3558:	0038      	movs	r0, r7
    355a:	4b0e      	ldr	r3, [pc, #56]	; (3594 <encode_bacnet_unsigned+0x94>)
    355c:	4798      	blx	r3
    355e:	e7ec      	b.n	353a <encode_bacnet_unsigned+0x3a>
            (void)encode_unsigned40(&apdu[0], value);
    3560:	002a      	movs	r2, r5
    3562:	0033      	movs	r3, r6
    3564:	0038      	movs	r0, r7
    3566:	490c      	ldr	r1, [pc, #48]	; (3598 <encode_bacnet_unsigned+0x98>)
    3568:	4788      	blx	r1
    356a:	e7e6      	b.n	353a <encode_bacnet_unsigned+0x3a>
            (void)encode_unsigned48(&apdu[0], value);
    356c:	002a      	movs	r2, r5
    356e:	0033      	movs	r3, r6
    3570:	0038      	movs	r0, r7
    3572:	490a      	ldr	r1, [pc, #40]	; (359c <encode_bacnet_unsigned+0x9c>)
    3574:	4788      	blx	r1
    3576:	e7e0      	b.n	353a <encode_bacnet_unsigned+0x3a>
            (void)encode_unsigned56(&apdu[0], value);
    3578:	002a      	movs	r2, r5
    357a:	0033      	movs	r3, r6
    357c:	0038      	movs	r0, r7
    357e:	4908      	ldr	r1, [pc, #32]	; (35a0 <encode_bacnet_unsigned+0xa0>)
    3580:	4788      	blx	r1
    3582:	e7da      	b.n	353a <encode_bacnet_unsigned+0x3a>
    3584:	00003ab9 	.word	0x00003ab9
    3588:	00003a51 	.word	0x00003a51
    358c:	000038dd 	.word	0x000038dd
    3590:	000038fb 	.word	0x000038fb
    3594:	00003925 	.word	0x00003925
    3598:	0000395b 	.word	0x0000395b
    359c:	000039a1 	.word	0x000039a1
    35a0:	000039f3 	.word	0x000039f3

000035a4 <encode_context_unsigned>:

/* from clause 20.2.4 Encoding of an Unsigned Integer Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_context_unsigned(uint8_t *apdu, uint8_t tag_number, BACNET_UNSIGNED_INTEGER value)
{
    35a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35a6:	0005      	movs	r5, r0
    35a8:	000c      	movs	r4, r1
    35aa:	0016      	movs	r6, r2
    35ac:	001f      	movs	r7, r3
    int len = 0;

    /* length of unsigned is variable, as per 20.2.4 */
    len = bacnet_unsigned_length(value);
    35ae:	0010      	movs	r0, r2
    35b0:	0019      	movs	r1, r3
    35b2:	4b08      	ldr	r3, [pc, #32]	; (35d4 <encode_context_unsigned+0x30>)
    35b4:	4798      	blx	r3
    35b6:	0003      	movs	r3, r0
    len = encode_tag(&apdu[0], tag_number, true, (uint32_t)len);
    35b8:	2201      	movs	r2, #1
    35ba:	0021      	movs	r1, r4
    35bc:	0028      	movs	r0, r5
    35be:	4c06      	ldr	r4, [pc, #24]	; (35d8 <encode_context_unsigned+0x34>)
    35c0:	47a0      	blx	r4
    35c2:	0004      	movs	r4, r0
    len += encode_bacnet_unsigned(&apdu[len], value);
    35c4:	1828      	adds	r0, r5, r0
    35c6:	0032      	movs	r2, r6
    35c8:	003b      	movs	r3, r7
    35ca:	4904      	ldr	r1, [pc, #16]	; (35dc <encode_context_unsigned+0x38>)
    35cc:	4788      	blx	r1
    35ce:	1820      	adds	r0, r4, r0

    return len;
}
    35d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35d2:	46c0      	nop			; (mov r8, r8)
    35d4:	00003ab9 	.word	0x00003ab9
    35d8:	00002c79 	.word	0x00002c79
    35dc:	00003501 	.word	0x00003501

000035e0 <encode_application_unsigned>:

/* from clause 20.2.4 Encoding of an Unsigned Integer Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_unsigned(uint8_t *apdu, BACNET_UNSIGNED_INTEGER value)
{
    35e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35e2:	0005      	movs	r5, r0
    35e4:	0016      	movs	r6, r2
    35e6:	001f      	movs	r7, r3
    int len = 0;

    len = bacnet_unsigned_length(value);
    35e8:	0010      	movs	r0, r2
    35ea:	0019      	movs	r1, r3
    35ec:	4b07      	ldr	r3, [pc, #28]	; (360c <encode_application_unsigned+0x2c>)
    35ee:	4798      	blx	r3
    35f0:	0003      	movs	r3, r0
    len = encode_tag(
    35f2:	2200      	movs	r2, #0
    35f4:	2102      	movs	r1, #2
    35f6:	0028      	movs	r0, r5
    35f8:	4c05      	ldr	r4, [pc, #20]	; (3610 <encode_application_unsigned+0x30>)
    35fa:	47a0      	blx	r4
    35fc:	0004      	movs	r4, r0
        &apdu[0], BACNET_APPLICATION_TAG_UNSIGNED_INT, false, (uint32_t)len);
    len += encode_bacnet_unsigned(&apdu[len], value);
    35fe:	1828      	adds	r0, r5, r0
    3600:	0032      	movs	r2, r6
    3602:	003b      	movs	r3, r7
    3604:	4903      	ldr	r1, [pc, #12]	; (3614 <encode_application_unsigned+0x34>)
    3606:	4788      	blx	r1
    3608:	1820      	adds	r0, r4, r0

    return len;
}
    360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    360c:	00003ab9 	.word	0x00003ab9
    3610:	00002c79 	.word	0x00002c79
    3614:	00003501 	.word	0x00003501

00003618 <bacnet_enumerated_decode>:
 *
 * @return  number of bytes decoded, or zero if errors occur
 */
int bacnet_enumerated_decode(
    uint8_t *apdu, uint16_t apdu_len_max, uint32_t len_value, uint32_t *value)
{
    3618:	b570      	push	{r4, r5, r6, lr}
    361a:	b082      	sub	sp, #8
    361c:	001e      	movs	r6, r3
    BACNET_UNSIGNED_INTEGER unsigned_value = 0;
    361e:	2400      	movs	r4, #0
    3620:	2500      	movs	r5, #0
    3622:	9400      	str	r4, [sp, #0]
    3624:	9501      	str	r5, [sp, #4]
    int len;

    len = bacnet_unsigned_decode(apdu, apdu_len_max, len_value, &unsigned_value);
    3626:	466b      	mov	r3, sp
    3628:	4c03      	ldr	r4, [pc, #12]	; (3638 <bacnet_enumerated_decode+0x20>)
    362a:	47a0      	blx	r4
    if (len > 0) {
    362c:	2800      	cmp	r0, #0
    362e:	dd01      	ble.n	3634 <bacnet_enumerated_decode+0x1c>
        *value = unsigned_value;
    3630:	9b00      	ldr	r3, [sp, #0]
    3632:	6033      	str	r3, [r6, #0]
    }

    return len;
}
    3634:	b002      	add	sp, #8
    3636:	bd70      	pop	{r4, r5, r6, pc}
    3638:	00003369 	.word	0x00003369

0000363c <decode_enumerated>:
 * @param value - the enumerated value decoded
 *
 * @return  number of bytes decoded, or zero if errors occur
 */
int decode_enumerated(uint8_t *apdu, uint32_t len_value, uint32_t *value)
{
    363c:	b510      	push	{r4, lr}
    363e:	0013      	movs	r3, r2
    const uint16_t apdu_len_max = 4;

    return bacnet_enumerated_decode(apdu, apdu_len_max, len_value, value);
    3640:	000a      	movs	r2, r1
    3642:	2104      	movs	r1, #4
    3644:	4c01      	ldr	r4, [pc, #4]	; (364c <decode_enumerated+0x10>)
    3646:	47a0      	blx	r4
}
    3648:	bd10      	pop	{r4, pc}
    364a:	46c0      	nop			; (mov r8, r8)
    364c:	00003619 	.word	0x00003619

00003650 <bacnet_enumerated_context_decode>:
 * @return  number of bytes decoded, or zero if tag number mismatch, or
 * #BACNET_STATUS_ERROR (-1) if malformed
 */
int bacnet_enumerated_context_decode(
    uint8_t *apdu, uint16_t apdu_len_max, uint8_t tag_value, uint32_t *value)
{
    3650:	b5f0      	push	{r4, r5, r6, r7, lr}
    3652:	46c6      	mov	lr, r8
    3654:	b500      	push	{lr}
    3656:	b082      	sub	sp, #8
    3658:	0005      	movs	r5, r0
    365a:	000c      	movs	r4, r1
    365c:	001e      	movs	r6, r3
    int apdu_len = 0;
    unsigned len = 0;
    uint8_t tag_number = 0;
    365e:	2300      	movs	r3, #0
    3660:	4669      	mov	r1, sp
    3662:	71cb      	strb	r3, [r1, #7]
    uint32_t len_value_type = 0;
    3664:	9300      	str	r3, [sp, #0]

    if (apdu_len_max) {
    3666:	2c00      	cmp	r4, #0
    3668:	d104      	bne.n	3674 <bacnet_enumerated_context_decode+0x24>
    int apdu_len = 0;
    366a:	2000      	movs	r0, #0
            }
        }
    }

    return apdu_len;
}
    366c:	b002      	add	sp, #8
    366e:	bc04      	pop	{r2}
    3670:	4690      	mov	r8, r2
    3672:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (decode_is_context_tag(&apdu[apdu_len], tag_value) &&
    3674:	0011      	movs	r1, r2
    3676:	0028      	movs	r0, r5
    3678:	4b15      	ldr	r3, [pc, #84]	; (36d0 <bacnet_enumerated_context_decode+0x80>)
    367a:	4798      	blx	r3
    367c:	2800      	cmp	r0, #0
    367e:	d01c      	beq.n	36ba <bacnet_enumerated_context_decode+0x6a>
            !decode_is_closing_tag(&apdu[apdu_len])) {
    3680:	0028      	movs	r0, r5
    3682:	4b14      	ldr	r3, [pc, #80]	; (36d4 <bacnet_enumerated_context_decode+0x84>)
    3684:	4798      	blx	r3
        if (decode_is_context_tag(&apdu[apdu_len], tag_value) &&
    3686:	2800      	cmp	r0, #0
    3688:	d001      	beq.n	368e <bacnet_enumerated_context_decode+0x3e>
    int apdu_len = 0;
    368a:	2000      	movs	r0, #0
    368c:	e7ee      	b.n	366c <bacnet_enumerated_context_decode+0x1c>
            len = bacnet_tag_number_and_value_decode(&apdu[apdu_len],
    368e:	466b      	mov	r3, sp
    3690:	466a      	mov	r2, sp
    3692:	3207      	adds	r2, #7
    3694:	0021      	movs	r1, r4
    3696:	0028      	movs	r0, r5
    3698:	4f0f      	ldr	r7, [pc, #60]	; (36d8 <bacnet_enumerated_context_decode+0x88>)
    369a:	47b8      	blx	r7
    369c:	1e07      	subs	r7, r0, #0
            if (len > 0) {
    369e:	d00e      	beq.n	36be <bacnet_enumerated_context_decode+0x6e>
                if (apdu_len < apdu_len_max) {
    36a0:	4284      	cmp	r4, r0
    36a2:	dd0f      	ble.n	36c4 <bacnet_enumerated_context_decode+0x74>
                    len = bacnet_enumerated_decode(&apdu[apdu_len],
    36a4:	1a21      	subs	r1, r4, r0
    36a6:	b289      	uxth	r1, r1
    36a8:	1828      	adds	r0, r5, r0
    36aa:	0033      	movs	r3, r6
    36ac:	9a00      	ldr	r2, [sp, #0]
    36ae:	4c0b      	ldr	r4, [pc, #44]	; (36dc <bacnet_enumerated_context_decode+0x8c>)
    36b0:	47a0      	blx	r4
                    if (len > 0) {
    36b2:	2800      	cmp	r0, #0
    36b4:	d009      	beq.n	36ca <bacnet_enumerated_context_decode+0x7a>
                        apdu_len += len;
    36b6:	1838      	adds	r0, r7, r0
    36b8:	e7d8      	b.n	366c <bacnet_enumerated_context_decode+0x1c>
    int apdu_len = 0;
    36ba:	2000      	movs	r0, #0
    36bc:	e7d6      	b.n	366c <bacnet_enumerated_context_decode+0x1c>
                return BACNET_STATUS_ERROR;
    36be:	2001      	movs	r0, #1
    36c0:	4240      	negs	r0, r0
    36c2:	e7d3      	b.n	366c <bacnet_enumerated_context_decode+0x1c>
                    return BACNET_STATUS_ERROR;
    36c4:	2001      	movs	r0, #1
    36c6:	4240      	negs	r0, r0
    36c8:	e7d0      	b.n	366c <bacnet_enumerated_context_decode+0x1c>
                        return BACNET_STATUS_ERROR;
    36ca:	2001      	movs	r0, #1
    36cc:	4240      	negs	r0, r0
    36ce:	e7cd      	b.n	366c <bacnet_enumerated_context_decode+0x1c>
    36d0:	00002efd 	.word	0x00002efd
    36d4:	00002db1 	.word	0x00002db1
    36d8:	00002e51 	.word	0x00002e51
    36dc:	00003619 	.word	0x00003619

000036e0 <encode_bacnet_enumerated>:

/* from clause 20.2.11 Encoding of an Enumerated Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_bacnet_enumerated(uint8_t *apdu, uint32_t value)
{
    36e0:	b510      	push	{r4, lr}
    36e2:	000a      	movs	r2, r1
    return encode_bacnet_unsigned(apdu, value);
    36e4:	2300      	movs	r3, #0
    36e6:	4901      	ldr	r1, [pc, #4]	; (36ec <encode_bacnet_enumerated+0xc>)
    36e8:	4788      	blx	r1
}
    36ea:	bd10      	pop	{r4, pc}
    36ec:	00003501 	.word	0x00003501

000036f0 <encode_application_enumerated>:

/* from clause 20.2.11 Encoding of an Enumerated Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_enumerated(uint8_t *apdu, uint32_t value)
{
    36f0:	b570      	push	{r4, r5, r6, lr}
    36f2:	0005      	movs	r5, r0
    int len = 0; /* return value */

    /* assumes that the tag only consumes 1 octet */
    len = encode_bacnet_enumerated(&apdu[1], value);
    36f4:	3001      	adds	r0, #1
    36f6:	4b05      	ldr	r3, [pc, #20]	; (370c <encode_application_enumerated+0x1c>)
    36f8:	4798      	blx	r3
    36fa:	0004      	movs	r4, r0
    len += encode_tag(
    36fc:	0003      	movs	r3, r0
    36fe:	2200      	movs	r2, #0
    3700:	2109      	movs	r1, #9
    3702:	0028      	movs	r0, r5
    3704:	4d02      	ldr	r5, [pc, #8]	; (3710 <encode_application_enumerated+0x20>)
    3706:	47a8      	blx	r5
    3708:	1820      	adds	r0, r4, r0
        &apdu[0], BACNET_APPLICATION_TAG_ENUMERATED, false, (uint32_t)len);

    return len;
}
    370a:	bd70      	pop	{r4, r5, r6, pc}
    370c:	000036e1 	.word	0x000036e1
    3710:	00002c79 	.word	0x00002c79

00003714 <encode_context_enumerated>:

/* from clause 20.2.11 Encoding of an Enumerated Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_context_enumerated(uint8_t *apdu, uint8_t tag_number, uint32_t value)
{
    3714:	b570      	push	{r4, r5, r6, lr}
    3716:	0005      	movs	r5, r0
    3718:	0016      	movs	r6, r2
    int len = 0; /* return value */

    /* length of enumerated is variable, as per 20.2.11 */
    if (value < 0x100) {
    371a:	2aff      	cmp	r2, #255	; 0xff
    371c:	d909      	bls.n	3732 <encode_context_enumerated+0x1e>
        len = 1;
    } else if (value < 0x10000) {
    371e:	4b0c      	ldr	r3, [pc, #48]	; (3750 <encode_context_enumerated+0x3c>)
    3720:	429a      	cmp	r2, r3
    3722:	d912      	bls.n	374a <encode_context_enumerated+0x36>
        len = 2;
    } else if (value < 0x1000000) {
    3724:	4b0b      	ldr	r3, [pc, #44]	; (3754 <encode_context_enumerated+0x40>)
    3726:	429a      	cmp	r2, r3
    3728:	d901      	bls.n	372e <encode_context_enumerated+0x1a>
        len = 3;
    } else {
        len = 4;
    372a:	2304      	movs	r3, #4
    372c:	e002      	b.n	3734 <encode_context_enumerated+0x20>
        len = 3;
    372e:	2303      	movs	r3, #3
    3730:	e000      	b.n	3734 <encode_context_enumerated+0x20>
        len = 1;
    3732:	2301      	movs	r3, #1
    }

    len = encode_tag(&apdu[0], tag_number, true, (uint32_t)len);
    3734:	2201      	movs	r2, #1
    3736:	0028      	movs	r0, r5
    3738:	4c07      	ldr	r4, [pc, #28]	; (3758 <encode_context_enumerated+0x44>)
    373a:	47a0      	blx	r4
    373c:	0004      	movs	r4, r0
    len += encode_bacnet_enumerated(&apdu[len], value);
    373e:	1828      	adds	r0, r5, r0
    3740:	0031      	movs	r1, r6
    3742:	4b06      	ldr	r3, [pc, #24]	; (375c <encode_context_enumerated+0x48>)
    3744:	4798      	blx	r3
    3746:	1820      	adds	r0, r4, r0

    return len;
}
    3748:	bd70      	pop	{r4, r5, r6, pc}
        len = 2;
    374a:	2302      	movs	r3, #2
    374c:	e7f2      	b.n	3734 <encode_context_enumerated+0x20>
    374e:	46c0      	nop			; (mov r8, r8)
    3750:	0000ffff 	.word	0x0000ffff
    3754:	00ffffff 	.word	0x00ffffff
    3758:	00002c79 	.word	0x00002c79
    375c:	000036e1 	.word	0x000036e1

00003760 <bacnet_signed_decode>:
 *
 * @return  number of bytes decoded, or zero if errors occur
 */
int bacnet_signed_decode(
    uint8_t *apdu, uint16_t apdu_len_max, uint32_t len_value, int32_t *value)
{
    3760:	b510      	push	{r4, lr}
    int len = 0;

    if (apdu && value && (len_value <= apdu_len_max)) {
    3762:	2800      	cmp	r0, #0
    3764:	d020      	beq.n	37a8 <bacnet_signed_decode+0x48>
    3766:	2b00      	cmp	r3, #0
    3768:	d020      	beq.n	37ac <bacnet_signed_decode+0x4c>
    376a:	4291      	cmp	r1, r2
    376c:	d320      	bcc.n	37b0 <bacnet_signed_decode+0x50>
        switch (len_value) {
    376e:	2a02      	cmp	r2, #2
    3770:	d00e      	beq.n	3790 <bacnet_signed_decode+0x30>
    3772:	d907      	bls.n	3784 <bacnet_signed_decode+0x24>
    3774:	2a03      	cmp	r2, #3
    3776:	d00f      	beq.n	3798 <bacnet_signed_decode+0x38>
    3778:	2a04      	cmp	r2, #4
    377a:	d111      	bne.n	37a0 <bacnet_signed_decode+0x40>
                break;
            case 3:
                len = decode_signed24(&apdu[0], value);
                break;
            case 4:
                len = decode_signed32(&apdu[0], value);
    377c:	0019      	movs	r1, r3
    377e:	4b0d      	ldr	r3, [pc, #52]	; (37b4 <bacnet_signed_decode+0x54>)
    3780:	4798      	blx	r3
                break;
    3782:	e016      	b.n	37b2 <bacnet_signed_decode+0x52>
        switch (len_value) {
    3784:	2a01      	cmp	r2, #1
    3786:	d10b      	bne.n	37a0 <bacnet_signed_decode+0x40>
                len = decode_signed8(&apdu[0], value);
    3788:	0019      	movs	r1, r3
    378a:	4b0b      	ldr	r3, [pc, #44]	; (37b8 <bacnet_signed_decode+0x58>)
    378c:	4798      	blx	r3
                break;
    378e:	e010      	b.n	37b2 <bacnet_signed_decode+0x52>
                len = decode_signed16(&apdu[0], value);
    3790:	0019      	movs	r1, r3
    3792:	4b0a      	ldr	r3, [pc, #40]	; (37bc <bacnet_signed_decode+0x5c>)
    3794:	4798      	blx	r3
                break;
    3796:	e00c      	b.n	37b2 <bacnet_signed_decode+0x52>
                len = decode_signed24(&apdu[0], value);
    3798:	0019      	movs	r1, r3
    379a:	4b09      	ldr	r3, [pc, #36]	; (37c0 <bacnet_signed_decode+0x60>)
    379c:	4798      	blx	r3
                break;
    379e:	e008      	b.n	37b2 <bacnet_signed_decode+0x52>
            default:
                *value = 0;
    37a0:	2200      	movs	r2, #0
    37a2:	601a      	str	r2, [r3, #0]
    int len = 0;
    37a4:	2000      	movs	r0, #0
                break;
    37a6:	e004      	b.n	37b2 <bacnet_signed_decode+0x52>
    int len = 0;
    37a8:	2000      	movs	r0, #0
    37aa:	e002      	b.n	37b2 <bacnet_signed_decode+0x52>
    37ac:	2000      	movs	r0, #0
    37ae:	e000      	b.n	37b2 <bacnet_signed_decode+0x52>
    37b0:	2000      	movs	r0, #0
        }
    }

    return len;
}
    37b2:	bd10      	pop	{r4, pc}
    37b4:	00003ba5 	.word	0x00003ba5
    37b8:	00003b19 	.word	0x00003b19
    37bc:	00003b41 	.word	0x00003b41
    37c0:	00003b71 	.word	0x00003b71

000037c4 <decode_signed>:
 *
 * @return  number of bytes decoded, #BACNET_STATUS_ERROR (-1) if
 * wrong tag number, or error (-1) if malformed
 */
int decode_signed(uint8_t *apdu, uint32_t len_value, int32_t *value)
{
    37c4:	b510      	push	{r4, lr}
    37c6:	0013      	movs	r3, r2
    const unsigned apdu_len_max = 4;

    return bacnet_signed_decode(apdu, apdu_len_max, len_value, value);
    37c8:	000a      	movs	r2, r1
    37ca:	2104      	movs	r1, #4
    37cc:	4c01      	ldr	r4, [pc, #4]	; (37d4 <decode_signed+0x10>)
    37ce:	47a0      	blx	r4
}
    37d0:	bd10      	pop	{r4, pc}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	00003761 	.word	0x00003761

000037d8 <encode_application_real>:

/* from clause 20.2.6 Encoding of a Real Number Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int encode_application_real(uint8_t *apdu, float value)
{
    37d8:	b570      	push	{r4, r5, r6, lr}
    37da:	0005      	movs	r5, r0
    37dc:	1c08      	adds	r0, r1, #0
    int len = 0;

    /* assumes that the tag only consumes 1 octet */
    len = encode_bacnet_real(value, &apdu[1]);
    37de:	1c69      	adds	r1, r5, #1
    37e0:	4b05      	ldr	r3, [pc, #20]	; (37f8 <encode_application_real+0x20>)
    37e2:	4798      	blx	r3
    37e4:	0004      	movs	r4, r0
    len +=
        encode_tag(&apdu[0], BACNET_APPLICATION_TAG_REAL, false, (uint32_t)len);
    37e6:	0003      	movs	r3, r0
    37e8:	2200      	movs	r2, #0
    37ea:	2104      	movs	r1, #4
    37ec:	0028      	movs	r0, r5
    37ee:	4d03      	ldr	r5, [pc, #12]	; (37fc <encode_application_real+0x24>)
    37f0:	47a8      	blx	r5
    len +=
    37f2:	1820      	adds	r0, r4, r0

    return len;
}
    37f4:	bd70      	pop	{r4, r5, r6, pc}
    37f6:	46c0      	nop			; (mov r8, r8)
    37f8:	00003de5 	.word	0x00003de5
    37fc:	00002c79 	.word	0x00002c79

00003800 <bacnet_time_decode>:
    uint32_t len_value,
    BACNET_TIME *value)
{
    int len = 0;

    if (value && (len_value <= apdu_len_max) && (len_value == 4)) {
    3800:	2b00      	cmp	r3, #0
    3802:	d00f      	beq.n	3824 <bacnet_time_decode+0x24>
    3804:	4291      	cmp	r1, r2
    3806:	d30f      	bcc.n	3828 <bacnet_time_decode+0x28>
    3808:	2a04      	cmp	r2, #4
    380a:	d001      	beq.n	3810 <bacnet_time_decode+0x10>
    int len = 0;
    380c:	2000      	movs	r0, #0
        value->sec = apdu[2];
        value->hundredths = apdu[3];
        len = (int)len_value;
    }

    return len;
    380e:	e00c      	b.n	382a <bacnet_time_decode+0x2a>
        value->hour = apdu[0];
    3810:	7801      	ldrb	r1, [r0, #0]
    3812:	7019      	strb	r1, [r3, #0]
        value->min = apdu[1];
    3814:	7841      	ldrb	r1, [r0, #1]
    3816:	7059      	strb	r1, [r3, #1]
        value->sec = apdu[2];
    3818:	7881      	ldrb	r1, [r0, #2]
    381a:	7099      	strb	r1, [r3, #2]
        value->hundredths = apdu[3];
    381c:	78c1      	ldrb	r1, [r0, #3]
    381e:	70d9      	strb	r1, [r3, #3]
        len = (int)len_value;
    3820:	0010      	movs	r0, r2
    3822:	e002      	b.n	382a <bacnet_time_decode+0x2a>
    int len = 0;
    3824:	2000      	movs	r0, #0
    3826:	e000      	b.n	382a <bacnet_time_decode+0x2a>
    3828:	2000      	movs	r0, #0
}
    382a:	4770      	bx	lr

0000382c <decode_bacnet_time>:

/* from clause 20.2.13 Encoding of a Time Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int decode_bacnet_time(uint8_t *apdu, BACNET_TIME *value)
{
    382c:	b510      	push	{r4, lr}
    382e:	000b      	movs	r3, r1
    const uint16_t apdu_len_max = 4;
    const uint32_t len_value = 4;

    return bacnet_time_decode(apdu, apdu_len_max, len_value, value);
    3830:	2204      	movs	r2, #4
    3832:	2104      	movs	r1, #4
    3834:	4c01      	ldr	r4, [pc, #4]	; (383c <decode_bacnet_time+0x10>)
    3836:	47a0      	blx	r4
}
    3838:	bd10      	pop	{r4, pc}
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	00003801 	.word	0x00003801

00003840 <decode_bacnet_time_safe>:

int decode_bacnet_time_safe(
    uint8_t *apdu, uint32_t len_value, BACNET_TIME *btime)
{
    3840:	b510      	push	{r4, lr}
    if (len_value != 4) {
    3842:	2904      	cmp	r1, #4
    3844:	d006      	beq.n	3854 <decode_bacnet_time_safe+0x14>
        btime->hour = 0;
    3846:	2300      	movs	r3, #0
    3848:	7013      	strb	r3, [r2, #0]
        btime->hundredths = 0;
    384a:	70d3      	strb	r3, [r2, #3]
        btime->min = 0;
    384c:	7053      	strb	r3, [r2, #1]
        btime->sec = 0;
    384e:	7093      	strb	r3, [r2, #2]
        return (int)len_value;
    3850:	0008      	movs	r0, r1
    } else {
        return decode_bacnet_time(apdu, btime);
    }
}
    3852:	bd10      	pop	{r4, pc}
        return decode_bacnet_time(apdu, btime);
    3854:	0011      	movs	r1, r2
    3856:	4b01      	ldr	r3, [pc, #4]	; (385c <decode_bacnet_time_safe+0x1c>)
    3858:	4798      	blx	r3
    385a:	e7fa      	b.n	3852 <decode_bacnet_time_safe+0x12>
    385c:	0000382d 	.word	0x0000382d

00003860 <decode_date>:
/* from clause 20.2.12 Encoding of a Date Value */
/* and 20.2.1 General Rules for Encoding BACnet Tags */
/* returns the number of apdu bytes consumed */
int decode_date(uint8_t *apdu, BACNET_DATE *bdate)
{
    bdate->year = (uint16_t)apdu[0] + 1900;
    3860:	7803      	ldrb	r3, [r0, #0]
    3862:	4a06      	ldr	r2, [pc, #24]	; (387c <decode_date+0x1c>)
    3864:	4694      	mov	ip, r2
    3866:	4463      	add	r3, ip
    3868:	800b      	strh	r3, [r1, #0]
    bdate->month = apdu[1];
    386a:	7843      	ldrb	r3, [r0, #1]
    386c:	708b      	strb	r3, [r1, #2]
    bdate->day = apdu[2];
    386e:	7883      	ldrb	r3, [r0, #2]
    3870:	70cb      	strb	r3, [r1, #3]
    bdate->wday = apdu[3];
    3872:	78c3      	ldrb	r3, [r0, #3]
    3874:	710b      	strb	r3, [r1, #4]

    return 4;
}
    3876:	2004      	movs	r0, #4
    3878:	4770      	bx	lr
    387a:	46c0      	nop			; (mov r8, r8)
    387c:	0000076c 	.word	0x0000076c

00003880 <decode_date_safe>:

int decode_date_safe(uint8_t *apdu, uint32_t len_value, BACNET_DATE *bdate)
{
    3880:	b510      	push	{r4, lr}
    if (len_value != 4) {
    3882:	2904      	cmp	r1, #4
    3884:	d006      	beq.n	3894 <decode_date_safe+0x14>
        bdate->day = 0;
    3886:	2300      	movs	r3, #0
    3888:	70d3      	strb	r3, [r2, #3]
        bdate->month = 0;
    388a:	7093      	strb	r3, [r2, #2]
        bdate->wday = 0;
    388c:	7113      	strb	r3, [r2, #4]
        bdate->year = 0;
    388e:	8013      	strh	r3, [r2, #0]
        return (int)len_value;
    3890:	0008      	movs	r0, r1
    } else {
        return decode_date(apdu, bdate);
    }
}
    3892:	bd10      	pop	{r4, pc}
        return decode_date(apdu, bdate);
    3894:	0011      	movs	r1, r2
    3896:	4b01      	ldr	r3, [pc, #4]	; (389c <decode_date_safe+0x1c>)
    3898:	4798      	blx	r3
    389a:	e7fa      	b.n	3892 <decode_date_safe+0x12>
    389c:	00003861 	.word	0x00003861

000038a0 <encode_simple_ack>:
}

/* returns the number of apdu bytes consumed */
int encode_simple_ack(uint8_t *apdu, uint8_t invoke_id, uint8_t service_choice)
{
    apdu[0] = PDU_TYPE_SIMPLE_ACK;
    38a0:	2320      	movs	r3, #32
    38a2:	7003      	strb	r3, [r0, #0]
    apdu[1] = invoke_id;
    38a4:	7041      	strb	r1, [r0, #1]
    apdu[2] = service_choice;
    38a6:	7082      	strb	r2, [r0, #2]

    return 3;
}
    38a8:	2003      	movs	r0, #3
    38aa:	4770      	bx	lr

000038ac <bacerror_encode_apdu>:
int bacerror_encode_apdu(uint8_t *apdu,
    uint8_t invoke_id,
    BACNET_CONFIRMED_SERVICE service,
    BACNET_ERROR_CLASS error_class,
    BACNET_ERROR_CODE error_code)
{
    38ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ae:	0004      	movs	r4, r0
    38b0:	a806      	add	r0, sp, #24
    38b2:	8807      	ldrh	r7, [r0, #0]
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    38b4:	2c00      	cmp	r4, #0
    38b6:	d00d      	beq.n	38d4 <bacerror_encode_apdu+0x28>
        apdu[0] = PDU_TYPE_ERROR;
    38b8:	2050      	movs	r0, #80	; 0x50
    38ba:	7020      	strb	r0, [r4, #0]
        apdu[1] = invoke_id;
    38bc:	7061      	strb	r1, [r4, #1]
        apdu[2] = service;
    38be:	70a2      	strb	r2, [r4, #2]
        apdu_len = 3;
        /* service parameters */
        apdu_len += encode_application_enumerated(&apdu[apdu_len], error_class);
    38c0:	1ce0      	adds	r0, r4, #3
    38c2:	0019      	movs	r1, r3
    38c4:	4e04      	ldr	r6, [pc, #16]	; (38d8 <bacerror_encode_apdu+0x2c>)
    38c6:	47b0      	blx	r6
    38c8:	1cc5      	adds	r5, r0, #3
        apdu_len += encode_application_enumerated(&apdu[apdu_len], error_code);
    38ca:	1960      	adds	r0, r4, r5
    38cc:	0039      	movs	r1, r7
    38ce:	47b0      	blx	r6
    38d0:	1828      	adds	r0, r5, r0
    }

    return apdu_len;
}
    38d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    38d4:	2000      	movs	r0, #0
    return apdu_len;
    38d6:	e7fc      	b.n	38d2 <bacerror_encode_apdu+0x26>
    38d8:	000036f1 	.word	0x000036f1

000038dc <encode_unsigned16>:

/** @file bacint.c  Encode/Decode Integer Types */

int encode_unsigned16(uint8_t *apdu, uint16_t value)
{
    apdu[0] = (uint8_t)((value & 0xff00) >> 8);
    38dc:	0a0b      	lsrs	r3, r1, #8
    38de:	7003      	strb	r3, [r0, #0]
    apdu[1] = (uint8_t)(value & 0x00ff);
    38e0:	7041      	strb	r1, [r0, #1]

    return 2;
}
    38e2:	2002      	movs	r0, #2
    38e4:	4770      	bx	lr

000038e6 <decode_unsigned16>:

int decode_unsigned16(uint8_t *apdu, uint16_t *value)
{
    if (value) {
    38e6:	2900      	cmp	r1, #0
    38e8:	d005      	beq.n	38f6 <decode_unsigned16+0x10>
        *value = (uint16_t)((((uint16_t)apdu[0]) << 8) & 0xff00);
    38ea:	7803      	ldrb	r3, [r0, #0]
    38ec:	021b      	lsls	r3, r3, #8
    38ee:	800b      	strh	r3, [r1, #0]
        *value |= ((uint16_t)(((uint16_t)apdu[1]) & 0x00ff));
    38f0:	7842      	ldrb	r2, [r0, #1]
    38f2:	4313      	orrs	r3, r2
    38f4:	800b      	strh	r3, [r1, #0]
    }

    return 2;
}
    38f6:	2002      	movs	r0, #2
    38f8:	4770      	bx	lr

000038fa <encode_unsigned24>:

int encode_unsigned24(uint8_t *apdu, uint32_t value)
{
    apdu[0] = (uint8_t)((value & 0xff0000) >> 16);
    38fa:	0c0b      	lsrs	r3, r1, #16
    38fc:	7003      	strb	r3, [r0, #0]
    apdu[1] = (uint8_t)((value & 0x00ff00) >> 8);
    38fe:	0a0b      	lsrs	r3, r1, #8
    3900:	7043      	strb	r3, [r0, #1]
    apdu[2] = (uint8_t)(value & 0x0000ff);
    3902:	7081      	strb	r1, [r0, #2]

    return 3;
}
    3904:	2003      	movs	r0, #3
    3906:	4770      	bx	lr

00003908 <decode_unsigned24>:

int decode_unsigned24(uint8_t *apdu, uint32_t *value)
{
    if (value) {
    3908:	2900      	cmp	r1, #0
    390a:	d009      	beq.n	3920 <decode_unsigned24+0x18>
        *value = ((uint32_t)((((uint32_t)apdu[0]) << 16) & 0x00ff0000));
    390c:	7803      	ldrb	r3, [r0, #0]
    390e:	041b      	lsls	r3, r3, #16
    3910:	600b      	str	r3, [r1, #0]
        *value |= (uint32_t)((((uint32_t)apdu[1]) << 8) & 0x0000ff00);
    3912:	7842      	ldrb	r2, [r0, #1]
    3914:	0212      	lsls	r2, r2, #8
    3916:	4313      	orrs	r3, r2
    3918:	600b      	str	r3, [r1, #0]
        *value |= ((uint32_t)(((uint32_t)apdu[2]) & 0x000000ff));
    391a:	7882      	ldrb	r2, [r0, #2]
    391c:	4313      	orrs	r3, r2
    391e:	600b      	str	r3, [r1, #0]
    }

    return 3;
}
    3920:	2003      	movs	r0, #3
    3922:	4770      	bx	lr

00003924 <encode_unsigned32>:

int encode_unsigned32(uint8_t *apdu, uint32_t value)
{
    apdu[0] = (uint8_t)((value & 0xff000000) >> 24);
    3924:	0e0b      	lsrs	r3, r1, #24
    3926:	7003      	strb	r3, [r0, #0]
    apdu[1] = (uint8_t)((value & 0x00ff0000) >> 16);
    3928:	0c0b      	lsrs	r3, r1, #16
    392a:	7043      	strb	r3, [r0, #1]
    apdu[2] = (uint8_t)((value & 0x0000ff00) >> 8);
    392c:	0a0b      	lsrs	r3, r1, #8
    392e:	7083      	strb	r3, [r0, #2]
    apdu[3] = (uint8_t)(value & 0x000000ff);
    3930:	70c1      	strb	r1, [r0, #3]

    return 4;
}
    3932:	2004      	movs	r0, #4
    3934:	4770      	bx	lr

00003936 <decode_unsigned32>:

int decode_unsigned32(uint8_t *apdu, uint32_t *value)
{
    if (value) {
    3936:	2900      	cmp	r1, #0
    3938:	d00d      	beq.n	3956 <decode_unsigned32+0x20>
        *value = ((uint32_t)((((uint32_t)apdu[0]) << 24) & 0xff000000));
    393a:	7803      	ldrb	r3, [r0, #0]
    393c:	061b      	lsls	r3, r3, #24
    393e:	600b      	str	r3, [r1, #0]
        *value |= ((uint32_t)((((uint32_t)apdu[1]) << 16) & 0x00ff0000));
    3940:	7842      	ldrb	r2, [r0, #1]
    3942:	0412      	lsls	r2, r2, #16
    3944:	4313      	orrs	r3, r2
    3946:	600b      	str	r3, [r1, #0]
        *value |= ((uint32_t)((((uint32_t)apdu[2]) << 8) & 0x0000ff00));
    3948:	7882      	ldrb	r2, [r0, #2]
    394a:	0212      	lsls	r2, r2, #8
    394c:	4313      	orrs	r3, r2
    394e:	600b      	str	r3, [r1, #0]
        *value |= ((uint32_t)(((uint32_t)apdu[3]) & 0x000000ff));
    3950:	78c2      	ldrb	r2, [r0, #3]
    3952:	4313      	orrs	r3, r2
    3954:	600b      	str	r3, [r1, #0]
    }

    return 4;
}
    3956:	2004      	movs	r0, #4
    3958:	4770      	bx	lr

0000395a <encode_unsigned40>:
 * @param       value - 40-bit value to encode
 * @return      Returns the number of bytes encoded
 */
int encode_unsigned40(uint8_t *buffer, uint64_t value)
{
    buffer[0] = (uint8_t)((value & 0x000000ff00000000) >> 32);
    395a:	7003      	strb	r3, [r0, #0]
    buffer[1] = (uint8_t)((value & 0x00000000ff000000) >> 24);
    395c:	0e13      	lsrs	r3, r2, #24
    395e:	7043      	strb	r3, [r0, #1]
    buffer[2] = (uint8_t)((value & 0x0000000000ff0000) >> 16);
    3960:	0c13      	lsrs	r3, r2, #16
    3962:	7083      	strb	r3, [r0, #2]
    buffer[3] = (uint8_t)((value & 0x000000000000ff00) >> 8);
    3964:	0a13      	lsrs	r3, r2, #8
    3966:	70c3      	strb	r3, [r0, #3]
    buffer[4] = (uint8_t)(value & 0x00000000000000ff);
    3968:	7102      	strb	r2, [r0, #4]

    return 5;
}
    396a:	2005      	movs	r0, #5
    396c:	4770      	bx	lr

0000396e <decode_unsigned40>:
 * @param       buffer - pointer to bytes for used for decoding
 * @param       value - pointer to 64-bit value to store the decoded value
 * @return      Returns the number of bytes decoded
 */
int decode_unsigned40(uint8_t *buffer, uint64_t *value)
{
    396e:	b510      	push	{r4, lr}
    if (value) {
    3970:	2900      	cmp	r1, #0
    3972:	d013      	beq.n	399c <decode_unsigned40+0x2e>
        *value |=
            ((uint64_t)((((uint64_t)buffer[0]) << 32) & 0x000000ff00000000));
    3974:	7802      	ldrb	r2, [r0, #0]
        *value |=
    3976:	680b      	ldr	r3, [r1, #0]
    3978:	684c      	ldr	r4, [r1, #4]
    397a:	4322      	orrs	r2, r4
    397c:	604a      	str	r2, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[1]) << 24) & 0x00000000ff000000));
    397e:	7844      	ldrb	r4, [r0, #1]
    3980:	0624      	lsls	r4, r4, #24
        *value |=
    3982:	4323      	orrs	r3, r4
    3984:	600b      	str	r3, [r1, #0]
        *value |=
            ((uint64_t)((((uint64_t)buffer[2]) << 16) & 0x0000000000ff0000));
    3986:	7884      	ldrb	r4, [r0, #2]
    3988:	0424      	lsls	r4, r4, #16
        *value |=
    398a:	4323      	orrs	r3, r4
    398c:	600b      	str	r3, [r1, #0]
        *value |=
            ((uint64_t)((((uint64_t)buffer[3]) << 8) & 0x000000000000ff00));
    398e:	78c4      	ldrb	r4, [r0, #3]
    3990:	0224      	lsls	r4, r4, #8
        *value |=
    3992:	4323      	orrs	r3, r4
    3994:	600b      	str	r3, [r1, #0]
        *value |= ((uint64_t)(((uint64_t)buffer[4]) & 0x00000000000000ff));
    3996:	7900      	ldrb	r0, [r0, #4]
    3998:	4303      	orrs	r3, r0
    399a:	600b      	str	r3, [r1, #0]
    }

    return 5;
}
    399c:	2005      	movs	r0, #5
    399e:	bd10      	pop	{r4, pc}

000039a0 <encode_unsigned48>:
 * @param       value - 48-bit value to encode
 * @return      Returns the number of bytes encoded
 */
int encode_unsigned48(uint8_t *buffer, uint64_t value)
{
    buffer[0] = (uint8_t)((value & 0x0000ff0000000000) >> 40);
    39a0:	0a19      	lsrs	r1, r3, #8
    39a2:	7001      	strb	r1, [r0, #0]
    buffer[1] = (uint8_t)((value & 0x000000ff00000000) >> 32);
    39a4:	7043      	strb	r3, [r0, #1]
    buffer[2] = (uint8_t)((value & 0x00000000ff000000) >> 24);
    39a6:	0e13      	lsrs	r3, r2, #24
    39a8:	7083      	strb	r3, [r0, #2]
    buffer[3] = (uint8_t)((value & 0x0000000000ff0000) >> 16);
    39aa:	0c13      	lsrs	r3, r2, #16
    39ac:	70c3      	strb	r3, [r0, #3]
    buffer[4] = (uint8_t)((value & 0x000000000000ff00) >> 8);
    39ae:	0a13      	lsrs	r3, r2, #8
    39b0:	7103      	strb	r3, [r0, #4]
    buffer[5] = (uint8_t)(value & 0x00000000000000ff);
    39b2:	7142      	strb	r2, [r0, #5]

    return 6;
}
    39b4:	2006      	movs	r0, #6
    39b6:	4770      	bx	lr

000039b8 <decode_unsigned48>:
 * @param       buffer - pointer to bytes for used for decoding
 * @param       value - pointer to 64-bit value to store the decoded value
 * @return      Returns the number of bytes decoded
 */
int decode_unsigned48(uint8_t *buffer, uint64_t *value)
{
    39b8:	b510      	push	{r4, lr}
    if (value) {
    39ba:	2900      	cmp	r1, #0
    39bc:	d017      	beq.n	39ee <decode_unsigned48+0x36>
        *value |=
            ((uint64_t)((((uint64_t)buffer[0]) << 40) & 0x0000ff0000000000));
    39be:	7802      	ldrb	r2, [r0, #0]
    39c0:	0212      	lsls	r2, r2, #8
        *value |=
    39c2:	680b      	ldr	r3, [r1, #0]
    39c4:	684c      	ldr	r4, [r1, #4]
    39c6:	4322      	orrs	r2, r4
    39c8:	604a      	str	r2, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[1]) << 32) & 0x000000ff00000000));
    39ca:	7844      	ldrb	r4, [r0, #1]
        *value |=
    39cc:	4322      	orrs	r2, r4
    39ce:	604a      	str	r2, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[2]) << 24) & 0x00000000ff000000));
    39d0:	7884      	ldrb	r4, [r0, #2]
    39d2:	0624      	lsls	r4, r4, #24
        *value |=
    39d4:	4323      	orrs	r3, r4
    39d6:	600b      	str	r3, [r1, #0]
        *value |=
            ((uint64_t)((((uint64_t)buffer[3]) << 16) & 0x0000000000ff0000));
    39d8:	78c4      	ldrb	r4, [r0, #3]
    39da:	0424      	lsls	r4, r4, #16
        *value |=
    39dc:	4323      	orrs	r3, r4
    39de:	600b      	str	r3, [r1, #0]
        *value |=
            ((uint64_t)((((uint64_t)buffer[4]) << 8) & 0x000000000000ff00));
    39e0:	7904      	ldrb	r4, [r0, #4]
    39e2:	0224      	lsls	r4, r4, #8
        *value |=
    39e4:	4323      	orrs	r3, r4
    39e6:	600b      	str	r3, [r1, #0]
        *value |= ((uint64_t)(((uint64_t)buffer[5]) & 0x00000000000000ff));
    39e8:	7940      	ldrb	r0, [r0, #5]
    39ea:	4303      	orrs	r3, r0
    39ec:	600b      	str	r3, [r1, #0]
    }

    return 6;
}
    39ee:	2006      	movs	r0, #6
    39f0:	bd10      	pop	{r4, pc}

000039f2 <encode_unsigned56>:
 * @param       value - 56-bit value to encode
 * @return      Returns the number of bytes encoded
 */
int encode_unsigned56(uint8_t *buffer, uint64_t value)
{
    buffer[0] = (uint8_t)((value & 0x00ff000000000000) >> 48);
    39f2:	0c19      	lsrs	r1, r3, #16
    39f4:	7001      	strb	r1, [r0, #0]
    buffer[1] = (uint8_t)((value & 0x0000ff0000000000) >> 40);
    39f6:	0a19      	lsrs	r1, r3, #8
    39f8:	7041      	strb	r1, [r0, #1]
    buffer[2] = (uint8_t)((value & 0x000000ff00000000) >> 32);
    39fa:	7083      	strb	r3, [r0, #2]
    buffer[3] = (uint8_t)((value & 0x00000000ff000000) >> 24);
    39fc:	0e13      	lsrs	r3, r2, #24
    39fe:	70c3      	strb	r3, [r0, #3]
    buffer[4] = (uint8_t)((value & 0x0000000000ff0000) >> 16);
    3a00:	0c13      	lsrs	r3, r2, #16
    3a02:	7103      	strb	r3, [r0, #4]
    buffer[5] = (uint8_t)((value & 0x000000000000ff00) >> 8);
    3a04:	0a13      	lsrs	r3, r2, #8
    3a06:	7143      	strb	r3, [r0, #5]
    buffer[6] = (uint8_t)(value & 0x00000000000000ff);
    3a08:	7182      	strb	r2, [r0, #6]

    return 7;
}
    3a0a:	2007      	movs	r0, #7
    3a0c:	4770      	bx	lr

00003a0e <decode_unsigned56>:
 * @param       buffer - pointer to bytes for used for decoding
 * @param       value - pointer to 64-bit value to store the decoded value
 * @return      Returns the number of bytes decoded
 */
int decode_unsigned56(uint8_t *buffer, uint64_t *value)
{
    3a0e:	b510      	push	{r4, lr}
    if (value) {
    3a10:	2900      	cmp	r1, #0
    3a12:	d01b      	beq.n	3a4c <decode_unsigned56+0x3e>
        *value |=
            ((uint64_t)((((uint64_t)buffer[0]) << 48) & 0x00ff000000000000));
    3a14:	7803      	ldrb	r3, [r0, #0]
    3a16:	041b      	lsls	r3, r3, #16
        *value |=
    3a18:	680a      	ldr	r2, [r1, #0]
    3a1a:	684c      	ldr	r4, [r1, #4]
    3a1c:	4323      	orrs	r3, r4
    3a1e:	604b      	str	r3, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[1]) << 40) & 0x0000ff0000000000));
    3a20:	7844      	ldrb	r4, [r0, #1]
    3a22:	0224      	lsls	r4, r4, #8
        *value |=
    3a24:	4323      	orrs	r3, r4
    3a26:	604b      	str	r3, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[2]) << 32) & 0x000000ff00000000));
    3a28:	7884      	ldrb	r4, [r0, #2]
        *value |=
    3a2a:	4323      	orrs	r3, r4
    3a2c:	604b      	str	r3, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[3]) << 24) & 0x00000000ff000000));
    3a2e:	78c4      	ldrb	r4, [r0, #3]
    3a30:	0624      	lsls	r4, r4, #24
        *value |=
    3a32:	4322      	orrs	r2, r4
    3a34:	600a      	str	r2, [r1, #0]
        *value |=
            ((uint64_t)((((uint64_t)buffer[4]) << 16) & 0x0000000000ff0000));
    3a36:	7904      	ldrb	r4, [r0, #4]
    3a38:	0424      	lsls	r4, r4, #16
        *value |=
    3a3a:	4322      	orrs	r2, r4
    3a3c:	600a      	str	r2, [r1, #0]
        *value |=
            ((uint64_t)((((uint64_t)buffer[5]) << 8) & 0x000000000000ff00));
    3a3e:	7944      	ldrb	r4, [r0, #5]
    3a40:	0224      	lsls	r4, r4, #8
        *value |=
    3a42:	4322      	orrs	r2, r4
    3a44:	600a      	str	r2, [r1, #0]
        *value |= ((uint64_t)(((uint64_t)buffer[6]) & 0x00000000000000ff));
    3a46:	7980      	ldrb	r0, [r0, #6]
    3a48:	4302      	orrs	r2, r0
    3a4a:	600a      	str	r2, [r1, #0]
    }

    return 7;
}
    3a4c:	2007      	movs	r0, #7
    3a4e:	bd10      	pop	{r4, pc}

00003a50 <encode_unsigned64>:
 * @param       value - 16-bit value to encode
 * @return      Returns the number of bytes encoded
 */
int encode_unsigned64(uint8_t *buffer, uint64_t value)
{
    buffer[0] = (uint8_t)((value & 0xff00000000000000) >> 56);
    3a50:	0e19      	lsrs	r1, r3, #24
    3a52:	7001      	strb	r1, [r0, #0]
    buffer[1] = (uint8_t)((value & 0x00ff000000000000) >> 48);
    3a54:	0c19      	lsrs	r1, r3, #16
    3a56:	7041      	strb	r1, [r0, #1]
    buffer[2] = (uint8_t)((value & 0x0000ff0000000000) >> 40);
    3a58:	0a19      	lsrs	r1, r3, #8
    3a5a:	7081      	strb	r1, [r0, #2]
    buffer[3] = (uint8_t)((value & 0x000000ff00000000) >> 32);
    3a5c:	70c3      	strb	r3, [r0, #3]
    buffer[4] = (uint8_t)((value & 0x00000000ff000000) >> 24);
    3a5e:	0e13      	lsrs	r3, r2, #24
    3a60:	7103      	strb	r3, [r0, #4]
    buffer[5] = (uint8_t)((value & 0x0000000000ff0000) >> 16);
    3a62:	0c13      	lsrs	r3, r2, #16
    3a64:	7143      	strb	r3, [r0, #5]
    buffer[6] = (uint8_t)((value & 0x000000000000ff00) >> 8);
    3a66:	0a13      	lsrs	r3, r2, #8
    3a68:	7183      	strb	r3, [r0, #6]
    buffer[7] = (uint8_t)(value & 0x00000000000000ff);
    3a6a:	71c2      	strb	r2, [r0, #7]

    return 8;
}
    3a6c:	2008      	movs	r0, #8
    3a6e:	4770      	bx	lr

00003a70 <decode_unsigned64>:
 * @param       buffer - pointer to bytes for used for decoding
 * @param       value - pointer to 64-bit value to store the decoded value
 * @return      Returns the number of bytes decoded
 */
int decode_unsigned64(uint8_t *buffer, uint64_t *value)
{
    3a70:	b510      	push	{r4, lr}
    if (value) {
    3a72:	2900      	cmp	r1, #0
    3a74:	d01d      	beq.n	3ab2 <decode_unsigned64+0x42>
        *value =
            ((uint64_t)((((uint64_t)buffer[0]) << 56) & 0xff00000000000000));
    3a76:	7804      	ldrb	r4, [r0, #0]
    3a78:	0624      	lsls	r4, r4, #24
    3a7a:	2200      	movs	r2, #0
        *value =
    3a7c:	600a      	str	r2, [r1, #0]
    3a7e:	604c      	str	r4, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[1]) << 48) & 0x00ff000000000000));
    3a80:	7843      	ldrb	r3, [r0, #1]
    3a82:	041b      	lsls	r3, r3, #16
        *value |=
    3a84:	4323      	orrs	r3, r4
    3a86:	604b      	str	r3, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[2]) << 40) & 0x0000ff0000000000));
    3a88:	7884      	ldrb	r4, [r0, #2]
    3a8a:	0224      	lsls	r4, r4, #8
        *value |=
    3a8c:	4323      	orrs	r3, r4
    3a8e:	604b      	str	r3, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[3]) << 32) & 0x000000ff00000000));
    3a90:	78c4      	ldrb	r4, [r0, #3]
        *value |=
    3a92:	4323      	orrs	r3, r4
    3a94:	604b      	str	r3, [r1, #4]
        *value |=
            ((uint64_t)((((uint64_t)buffer[4]) << 24) & 0x00000000ff000000));
    3a96:	7902      	ldrb	r2, [r0, #4]
    3a98:	0612      	lsls	r2, r2, #24
        *value |=
    3a9a:	600a      	str	r2, [r1, #0]
        *value |=
            ((uint64_t)((((uint64_t)buffer[5]) << 16) & 0x0000000000ff0000));
    3a9c:	7944      	ldrb	r4, [r0, #5]
    3a9e:	0424      	lsls	r4, r4, #16
        *value |=
    3aa0:	4322      	orrs	r2, r4
    3aa2:	600a      	str	r2, [r1, #0]
        *value |=
            ((uint64_t)((((uint64_t)buffer[6]) << 8) & 0x000000000000ff00));
    3aa4:	7984      	ldrb	r4, [r0, #6]
    3aa6:	0224      	lsls	r4, r4, #8
        *value |=
    3aa8:	4322      	orrs	r2, r4
    3aaa:	600a      	str	r2, [r1, #0]
        *value |= ((uint64_t)(((uint64_t)buffer[7]) & 0x00000000000000ff));
    3aac:	79c0      	ldrb	r0, [r0, #7]
    3aae:	4302      	orrs	r2, r0
    3ab0:	600a      	str	r2, [r1, #0]
    }

    return 8;
}
    3ab2:	2008      	movs	r0, #8
    3ab4:	bd10      	pop	{r4, pc}
	...

00003ab8 <bacnet_unsigned_length>:
 */
int bacnet_unsigned_length(BACNET_UNSIGNED_INTEGER value)
{
    int len = 0; /* return value */

    if (value <= 0xFF) {
    3ab8:	2900      	cmp	r1, #0
    3aba:	d004      	beq.n	3ac6 <bacnet_unsigned_length+0xe>
        len = 1;
    } else if (value <= 0xFFFF) {
    3abc:	2900      	cmp	r1, #0
    3abe:	d10b      	bne.n	3ad8 <bacnet_unsigned_length+0x20>
    3ac0:	d007      	beq.n	3ad2 <bacnet_unsigned_length+0x1a>
        len = 2;
    3ac2:	2002      	movs	r0, #2
        len = 4;
#endif
    }

    return len;
}
    3ac4:	4770      	bx	lr
    if (value <= 0xFF) {
    3ac6:	2900      	cmp	r1, #0
    3ac8:	d101      	bne.n	3ace <bacnet_unsigned_length+0x16>
    3aca:	28ff      	cmp	r0, #255	; 0xff
    3acc:	d8f6      	bhi.n	3abc <bacnet_unsigned_length+0x4>
        len = 1;
    3ace:	2001      	movs	r0, #1
    3ad0:	e7f8      	b.n	3ac4 <bacnet_unsigned_length+0xc>
    } else if (value <= 0xFFFF) {
    3ad2:	4b0f      	ldr	r3, [pc, #60]	; (3b10 <bacnet_unsigned_length+0x58>)
    3ad4:	4298      	cmp	r0, r3
    3ad6:	d9f4      	bls.n	3ac2 <bacnet_unsigned_length+0xa>
    } else if (value <= 0xFFFFFF) {
    3ad8:	2900      	cmp	r1, #0
    3ada:	d105      	bne.n	3ae8 <bacnet_unsigned_length+0x30>
    3adc:	d001      	beq.n	3ae2 <bacnet_unsigned_length+0x2a>
        len = 3;
    3ade:	2003      	movs	r0, #3
    3ae0:	e7f0      	b.n	3ac4 <bacnet_unsigned_length+0xc>
    } else if (value <= 0xFFFFFF) {
    3ae2:	4b0c      	ldr	r3, [pc, #48]	; (3b14 <bacnet_unsigned_length+0x5c>)
    3ae4:	4298      	cmp	r0, r3
    3ae6:	d9fa      	bls.n	3ade <bacnet_unsigned_length+0x26>
        if (value <= 0xFFFFFFFF) {
    3ae8:	2900      	cmp	r1, #0
    3aea:	d101      	bne.n	3af0 <bacnet_unsigned_length+0x38>
            len = 4;
    3aec:	2004      	movs	r0, #4
    3aee:	e7e9      	b.n	3ac4 <bacnet_unsigned_length+0xc>
        } else if (value <= 0xFFFFFFFFFF) {
    3af0:	29ff      	cmp	r1, #255	; 0xff
    3af2:	d801      	bhi.n	3af8 <bacnet_unsigned_length+0x40>
            len = 5;
    3af4:	2005      	movs	r0, #5
    3af6:	e7e5      	b.n	3ac4 <bacnet_unsigned_length+0xc>
        } else if (value <= 0xFFFFFFFFFFFF) {
    3af8:	4b05      	ldr	r3, [pc, #20]	; (3b10 <bacnet_unsigned_length+0x58>)
    3afa:	4299      	cmp	r1, r3
    3afc:	d801      	bhi.n	3b02 <bacnet_unsigned_length+0x4a>
            len = 6;
    3afe:	2006      	movs	r0, #6
    3b00:	e7e0      	b.n	3ac4 <bacnet_unsigned_length+0xc>
        } else if (value <= 0xFFFFFFFFFFFFFF) {
    3b02:	4b04      	ldr	r3, [pc, #16]	; (3b14 <bacnet_unsigned_length+0x5c>)
    3b04:	4299      	cmp	r1, r3
    3b06:	d801      	bhi.n	3b0c <bacnet_unsigned_length+0x54>
            len = 7;
    3b08:	2007      	movs	r0, #7
    3b0a:	e7db      	b.n	3ac4 <bacnet_unsigned_length+0xc>
            len = 8;
    3b0c:	2008      	movs	r0, #8
    return len;
    3b0e:	e7d9      	b.n	3ac4 <bacnet_unsigned_length+0xc>
    3b10:	0000ffff 	.word	0x0000ffff
    3b14:	00ffffff 	.word	0x00ffffff

00003b18 <decode_signed8>:
    return 1;
}

int decode_signed8(uint8_t *apdu, int32_t *value)
{
    if (value) {
    3b18:	2900      	cmp	r1, #0
    3b1a:	d009      	beq.n	3b30 <decode_signed8+0x18>
        /* negative - bit 7 is set */
        if (apdu[0] & 0x80) {
    3b1c:	2300      	movs	r3, #0
    3b1e:	56c3      	ldrsb	r3, [r0, r3]
    3b20:	2b00      	cmp	r3, #0
    3b22:	db07      	blt.n	3b34 <decode_signed8+0x1c>
            *value = 0xFFFFFF00;
        } else {
            *value = 0;
    3b24:	2300      	movs	r3, #0
    3b26:	600b      	str	r3, [r1, #0]
        }
        *value |= ((int32_t)(((int32_t)apdu[0]) & 0x000000ff));
    3b28:	7803      	ldrb	r3, [r0, #0]
    3b2a:	680a      	ldr	r2, [r1, #0]
    3b2c:	4313      	orrs	r3, r2
    3b2e:	600b      	str	r3, [r1, #0]
    }

    return 1;
}
    3b30:	2001      	movs	r0, #1
    3b32:	4770      	bx	lr
            *value = 0xFFFFFF00;
    3b34:	4b01      	ldr	r3, [pc, #4]	; (3b3c <decode_signed8+0x24>)
    3b36:	600b      	str	r3, [r1, #0]
    3b38:	e7f6      	b.n	3b28 <decode_signed8+0x10>
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	ffffff00 	.word	0xffffff00

00003b40 <decode_signed16>:
    return 2;
}

int decode_signed16(uint8_t *apdu, int32_t *value)
{
    if (value) {
    3b40:	2900      	cmp	r1, #0
    3b42:	d00d      	beq.n	3b60 <decode_signed16+0x20>
        /* negative - bit 7 is set */
        if (apdu[0] & 0x80) {
    3b44:	2300      	movs	r3, #0
    3b46:	56c3      	ldrsb	r3, [r0, r3]
    3b48:	2b00      	cmp	r3, #0
    3b4a:	db0b      	blt.n	3b64 <decode_signed16+0x24>
            *value = 0xFFFF0000;
        } else {
            *value = 0;
    3b4c:	2300      	movs	r3, #0
    3b4e:	600b      	str	r3, [r1, #0]
        }
        *value |= ((int32_t)((((int32_t)apdu[0]) << 8) & 0x0000ff00));
    3b50:	7803      	ldrb	r3, [r0, #0]
    3b52:	021b      	lsls	r3, r3, #8
    3b54:	680a      	ldr	r2, [r1, #0]
    3b56:	4313      	orrs	r3, r2
    3b58:	600b      	str	r3, [r1, #0]
        *value |= ((int32_t)(((int32_t)apdu[1]) & 0x000000ff));
    3b5a:	7842      	ldrb	r2, [r0, #1]
    3b5c:	4313      	orrs	r3, r2
    3b5e:	600b      	str	r3, [r1, #0]
    }

    return 2;
}
    3b60:	2002      	movs	r0, #2
    3b62:	4770      	bx	lr
            *value = 0xFFFF0000;
    3b64:	4b01      	ldr	r3, [pc, #4]	; (3b6c <decode_signed16+0x2c>)
    3b66:	600b      	str	r3, [r1, #0]
    3b68:	e7f2      	b.n	3b50 <decode_signed16+0x10>
    3b6a:	46c0      	nop			; (mov r8, r8)
    3b6c:	ffff0000 	.word	0xffff0000

00003b70 <decode_signed24>:
    return 3;
}

int decode_signed24(uint8_t *apdu, int32_t *value)
{
    if (value) {
    3b70:	2900      	cmp	r1, #0
    3b72:	d011      	beq.n	3b98 <decode_signed24+0x28>
        /* negative - bit 7 is set */
        if (apdu[0] & 0x80) {
    3b74:	2300      	movs	r3, #0
    3b76:	56c3      	ldrsb	r3, [r0, r3]
    3b78:	2b00      	cmp	r3, #0
    3b7a:	db0f      	blt.n	3b9c <decode_signed24+0x2c>
            *value = 0xFF000000;
        } else {
            *value = 0;
    3b7c:	2300      	movs	r3, #0
    3b7e:	600b      	str	r3, [r1, #0]
        }
        *value |= ((int32_t)((((int32_t)apdu[0]) << 16) & 0x00ff0000));
    3b80:	7803      	ldrb	r3, [r0, #0]
    3b82:	041b      	lsls	r3, r3, #16
    3b84:	680a      	ldr	r2, [r1, #0]
    3b86:	4313      	orrs	r3, r2
    3b88:	600b      	str	r3, [r1, #0]
        *value |= ((int32_t)((((int32_t)apdu[1]) << 8) & 0x0000ff00));
    3b8a:	7842      	ldrb	r2, [r0, #1]
    3b8c:	0212      	lsls	r2, r2, #8
    3b8e:	4313      	orrs	r3, r2
    3b90:	600b      	str	r3, [r1, #0]
        *value |= ((int32_t)(((int32_t)apdu[2]) & 0x000000ff));
    3b92:	7882      	ldrb	r2, [r0, #2]
    3b94:	4313      	orrs	r3, r2
    3b96:	600b      	str	r3, [r1, #0]
    }

    return 3;
}
    3b98:	2003      	movs	r0, #3
    3b9a:	4770      	bx	lr
            *value = 0xFF000000;
    3b9c:	23ff      	movs	r3, #255	; 0xff
    3b9e:	061b      	lsls	r3, r3, #24
    3ba0:	600b      	str	r3, [r1, #0]
    3ba2:	e7ed      	b.n	3b80 <decode_signed24+0x10>

00003ba4 <decode_signed32>:
    return 4;
}

int decode_signed32(uint8_t *apdu, int32_t *value)
{
    if (value) {
    3ba4:	2900      	cmp	r1, #0
    3ba6:	d00d      	beq.n	3bc4 <decode_signed32+0x20>
        *value = ((int32_t)((((int32_t)apdu[0]) << 24) & 0xff000000));
    3ba8:	7803      	ldrb	r3, [r0, #0]
    3baa:	061b      	lsls	r3, r3, #24
    3bac:	600b      	str	r3, [r1, #0]
        *value |= ((int32_t)((((int32_t)apdu[1]) << 16) & 0x00ff0000));
    3bae:	7842      	ldrb	r2, [r0, #1]
    3bb0:	0412      	lsls	r2, r2, #16
    3bb2:	4313      	orrs	r3, r2
    3bb4:	600b      	str	r3, [r1, #0]
        *value |= ((int32_t)((((int32_t)apdu[2]) << 8) & 0x0000ff00));
    3bb6:	7882      	ldrb	r2, [r0, #2]
    3bb8:	0212      	lsls	r2, r2, #8
    3bba:	4313      	orrs	r3, r2
    3bbc:	600b      	str	r3, [r1, #0]
        *value |= ((int32_t)(((int32_t)apdu[3]) & 0x000000ff));
    3bbe:	78c2      	ldrb	r2, [r0, #3]
    3bc0:	4313      	orrs	r3, r2
    3bc2:	600b      	str	r3, [r1, #0]
    }

    return 4;
}
    3bc4:	2004      	movs	r0, #4
    3bc6:	4770      	bx	lr

00003bc8 <bacnet_application_task>:
    Send_I_Am(&Handler_Transmit_Buffer[0]);
  }
}

static void bacnet_application_task(void)
{
    3bc8:	b570      	push	{r4, r5, r6, lr}
    static float attenuation_db = 0.0;
    static float attenuation_adder = 0.1;
    static float temperature_celsius = 20.0;
    
    if (mstimer_expired(&Simulation_Task_Timer)) {
    3bca:	4820      	ldr	r0, [pc, #128]	; (3c4c <bacnet_application_task+0x84>)
    3bcc:	4b20      	ldr	r3, [pc, #128]	; (3c50 <bacnet_application_task+0x88>)
    3bce:	4798      	blx	r3
    3bd0:	2800      	cmp	r0, #0
    3bd2:	d100      	bne.n	3bd6 <bacnet_application_task+0xe>
        if (attenuation_db < 0.0) {
            attenuation_adder = 0.1;
        }
        Analog_Input_Present_Value_Set(5, temperature_celsius);
    }        
}
    3bd4:	bd70      	pop	{r4, r5, r6, pc}
        mstimer_reset(&Simulation_Task_Timer);
    3bd6:	481d      	ldr	r0, [pc, #116]	; (3c4c <bacnet_application_task+0x84>)
    3bd8:	4b1e      	ldr	r3, [pc, #120]	; (3c54 <bacnet_application_task+0x8c>)
    3bda:	4798      	blx	r3
        Analog_Input_Present_Value_Set(1, attenuation_db);
    3bdc:	4c1e      	ldr	r4, [pc, #120]	; (3c58 <bacnet_application_task+0x90>)
    3bde:	6821      	ldr	r1, [r4, #0]
    3be0:	2001      	movs	r0, #1
    3be2:	4e1e      	ldr	r6, [pc, #120]	; (3c5c <bacnet_application_task+0x94>)
    3be4:	47b0      	blx	r6
        Analog_Input_Present_Value_Set(2, attenuation_db+1.0);
    3be6:	4d1e      	ldr	r5, [pc, #120]	; (3c60 <bacnet_application_task+0x98>)
    3be8:	21fe      	movs	r1, #254	; 0xfe
    3bea:	0589      	lsls	r1, r1, #22
    3bec:	6820      	ldr	r0, [r4, #0]
    3bee:	47a8      	blx	r5
    3bf0:	1c01      	adds	r1, r0, #0
    3bf2:	2002      	movs	r0, #2
    3bf4:	47b0      	blx	r6
        Analog_Input_Present_Value_Set(3, attenuation_db+2.0);
    3bf6:	2180      	movs	r1, #128	; 0x80
    3bf8:	05c9      	lsls	r1, r1, #23
    3bfa:	6820      	ldr	r0, [r4, #0]
    3bfc:	47a8      	blx	r5
    3bfe:	1c01      	adds	r1, r0, #0
    3c00:	2003      	movs	r0, #3
    3c02:	47b0      	blx	r6
        Analog_Input_Present_Value_Set(4, attenuation_db+3.0);
    3c04:	4917      	ldr	r1, [pc, #92]	; (3c64 <bacnet_application_task+0x9c>)
    3c06:	6820      	ldr	r0, [r4, #0]
    3c08:	47a8      	blx	r5
    3c0a:	1c01      	adds	r1, r0, #0
    3c0c:	2004      	movs	r0, #4
    3c0e:	47b0      	blx	r6
        attenuation_db += attenuation_adder;
    3c10:	4b15      	ldr	r3, [pc, #84]	; (3c68 <bacnet_application_task+0xa0>)
    3c12:	6819      	ldr	r1, [r3, #0]
    3c14:	6820      	ldr	r0, [r4, #0]
    3c16:	47a8      	blx	r5
    3c18:	1c05      	adds	r5, r0, #0
    3c1a:	6020      	str	r0, [r4, #0]
        if (attenuation_db > 100.0) {
    3c1c:	4913      	ldr	r1, [pc, #76]	; (3c6c <bacnet_application_task+0xa4>)
    3c1e:	4b14      	ldr	r3, [pc, #80]	; (3c70 <bacnet_application_task+0xa8>)
    3c20:	4798      	blx	r3
    3c22:	2800      	cmp	r0, #0
    3c24:	d002      	beq.n	3c2c <bacnet_application_task+0x64>
            attenuation_adder = -0.1;
    3c26:	4a13      	ldr	r2, [pc, #76]	; (3c74 <bacnet_application_task+0xac>)
    3c28:	4b0f      	ldr	r3, [pc, #60]	; (3c68 <bacnet_application_task+0xa0>)
    3c2a:	601a      	str	r2, [r3, #0]
        if (attenuation_db < 0.0) {
    3c2c:	2100      	movs	r1, #0
    3c2e:	1c28      	adds	r0, r5, #0
    3c30:	4b11      	ldr	r3, [pc, #68]	; (3c78 <bacnet_application_task+0xb0>)
    3c32:	4798      	blx	r3
    3c34:	2800      	cmp	r0, #0
    3c36:	d104      	bne.n	3c42 <bacnet_application_task+0x7a>
        Analog_Input_Present_Value_Set(5, temperature_celsius);
    3c38:	4910      	ldr	r1, [pc, #64]	; (3c7c <bacnet_application_task+0xb4>)
    3c3a:	2005      	movs	r0, #5
    3c3c:	4b07      	ldr	r3, [pc, #28]	; (3c5c <bacnet_application_task+0x94>)
    3c3e:	4798      	blx	r3
}
    3c40:	e7c8      	b.n	3bd4 <bacnet_application_task+0xc>
            attenuation_adder = 0.1;
    3c42:	4a0f      	ldr	r2, [pc, #60]	; (3c80 <bacnet_application_task+0xb8>)
    3c44:	4b08      	ldr	r3, [pc, #32]	; (3c68 <bacnet_application_task+0xa0>)
    3c46:	601a      	str	r2, [r3, #0]
    3c48:	e7f6      	b.n	3c38 <bacnet_application_task+0x70>
    3c4a:	46c0      	nop			; (mov r8, r8)
    3c4c:	20000ad0 	.word	0x20000ad0
    3c50:	00002689 	.word	0x00002689
    3c54:	0000267d 	.word	0x0000267d
    3c58:	20000ad8 	.word	0x20000ad8
    3c5c:	00004479 	.word	0x00004479
    3c60:	0000d011 	.word	0x0000d011
    3c64:	40400000 	.word	0x40400000
    3c68:	2000002c 	.word	0x2000002c
    3c6c:	42c80000 	.word	0x42c80000
    3c70:	0000cf65 	.word	0x0000cf65
    3c74:	bdcccccd 	.word	0xbdcccccd
    3c78:	0000cf3d 	.word	0x0000cf3d
    3c7c:	41a00000 	.word	0x41a00000
    3c80:	3dcccccd 	.word	0x3dcccccd

00003c84 <bacnet_init>:
{
    3c84:	b510      	push	{r4, lr}
    dlmstp_set_mac_address(2);
    3c86:	2002      	movs	r0, #2
    3c88:	4b18      	ldr	r3, [pc, #96]	; (3cec <bacnet_init+0x68>)
    3c8a:	4798      	blx	r3
    dlmstp_set_max_master(127);
    3c8c:	207f      	movs	r0, #127	; 0x7f
    3c8e:	4b18      	ldr	r3, [pc, #96]	; (3cf0 <bacnet_init+0x6c>)
    3c90:	4798      	blx	r3
    dlmstp_init(NULL);
    3c92:	2000      	movs	r0, #0
    3c94:	4b17      	ldr	r3, [pc, #92]	; (3cf4 <bacnet_init+0x70>)
    3c96:	4798      	blx	r3
    Device_Init(NULL);
    3c98:	2000      	movs	r0, #0
    3c9a:	4b17      	ldr	r3, [pc, #92]	; (3cf8 <bacnet_init+0x74>)
    3c9c:	4798      	blx	r3
    apdu_set_unrecognized_service_handler_handler(handler_unrecognized_service);
    3c9e:	4817      	ldr	r0, [pc, #92]	; (3cfc <bacnet_init+0x78>)
    3ca0:	4b17      	ldr	r3, [pc, #92]	; (3d00 <bacnet_init+0x7c>)
    3ca2:	4798      	blx	r3
    apdu_set_unconfirmed_handler(SERVICE_UNCONFIRMED_WHO_IS, handler_who_is);
    3ca4:	4917      	ldr	r1, [pc, #92]	; (3d04 <bacnet_init+0x80>)
    3ca6:	2008      	movs	r0, #8
    3ca8:	4c17      	ldr	r4, [pc, #92]	; (3d08 <bacnet_init+0x84>)
    3caa:	47a0      	blx	r4
    apdu_set_unconfirmed_handler(SERVICE_UNCONFIRMED_WHO_HAS, handler_who_has);
    3cac:	4917      	ldr	r1, [pc, #92]	; (3d0c <bacnet_init+0x88>)
    3cae:	2007      	movs	r0, #7
    3cb0:	47a0      	blx	r4
    apdu_set_confirmed_handler(
    3cb2:	4917      	ldr	r1, [pc, #92]	; (3d10 <bacnet_init+0x8c>)
    3cb4:	200c      	movs	r0, #12
    3cb6:	4c17      	ldr	r4, [pc, #92]	; (3d14 <bacnet_init+0x90>)
    3cb8:	47a0      	blx	r4
    apdu_set_confirmed_handler(
    3cba:	4917      	ldr	r1, [pc, #92]	; (3d18 <bacnet_init+0x94>)
    3cbc:	200e      	movs	r0, #14
    3cbe:	47a0      	blx	r4
    apdu_set_confirmed_handler(
    3cc0:	4916      	ldr	r1, [pc, #88]	; (3d1c <bacnet_init+0x98>)
    3cc2:	2014      	movs	r0, #20
    3cc4:	47a0      	blx	r4
    apdu_set_confirmed_handler(
    3cc6:	4916      	ldr	r1, [pc, #88]	; (3d20 <bacnet_init+0x9c>)
    3cc8:	200f      	movs	r0, #15
    3cca:	47a0      	blx	r4
    apdu_set_confirmed_handler(SERVICE_CONFIRMED_DEVICE_COMMUNICATION_CONTROL,
    3ccc:	4915      	ldr	r1, [pc, #84]	; (3d24 <bacnet_init+0xa0>)
    3cce:	2011      	movs	r0, #17
    3cd0:	47a0      	blx	r4
    mstimer_set(&DCC_Timer, DCC_CYCLE_SECONDS * 1000);
    3cd2:	21fa      	movs	r1, #250	; 0xfa
    3cd4:	0089      	lsls	r1, r1, #2
    3cd6:	4814      	ldr	r0, [pc, #80]	; (3d28 <bacnet_init+0xa4>)
    3cd8:	4c14      	ldr	r4, [pc, #80]	; (3d2c <bacnet_init+0xa8>)
    3cda:	47a0      	blx	r4
    mstimer_set(&Simulation_Task_Timer, 500);
    3cdc:	21fa      	movs	r1, #250	; 0xfa
    3cde:	0049      	lsls	r1, r1, #1
    3ce0:	4813      	ldr	r0, [pc, #76]	; (3d30 <bacnet_init+0xac>)
    3ce2:	47a0      	blx	r4
    Send_I_Am(&Handler_Transmit_Buffer[0]);
    3ce4:	4813      	ldr	r0, [pc, #76]	; (3d34 <bacnet_init+0xb0>)
    3ce6:	4b14      	ldr	r3, [pc, #80]	; (3d38 <bacnet_init+0xb4>)
    3ce8:	4798      	blx	r3
    3cea:	e7fb      	b.n	3ce4 <bacnet_init+0x60>
    3cec:	00006c89 	.word	0x00006c89
    3cf0:	00006cc5 	.word	0x00006cc5
    3cf4:	00006a75 	.word	0x00006a75
    3cf8:	0000533d 	.word	0x0000533d
    3cfc:	00002251 	.word	0x00002251
    3d00:	00001409 	.word	0x00001409
    3d04:	00002111 	.word	0x00002111
    3d08:	00001415 	.word	0x00001415
    3d0c:	000020b5 	.word	0x000020b5
    3d10:	00001a19 	.word	0x00001a19
    3d14:	000013f9 	.word	0x000013f9
    3d18:	00001d19 	.word	0x00001d19
    3d1c:	00001929 	.word	0x00001929
    3d20:	00002165 	.word	0x00002165
    3d24:	000017ed 	.word	0x000017ed
    3d28:	200008c4 	.word	0x200008c4
    3d2c:	00002669 	.word	0x00002669
    3d30:	20000ad0 	.word	0x20000ad0
    3d34:	200006c8 	.word	0x200006c8
    3d38:	00002319 	.word	0x00002319

00003d3c <bacnet_task>:

static uint8_t PDUBuffer[MAX_MPDU];
void bacnet_task(void)
{
    3d3c:	b510      	push	{r4, lr}
    3d3e:	b086      	sub	sp, #24
    uint16_t pdu_len;
    BACNET_ADDRESS src; /* source address */

    /* handle the communication timer */
    if (mstimer_expired(&DCC_Timer)) {
    3d40:	480f      	ldr	r0, [pc, #60]	; (3d80 <bacnet_task+0x44>)
    3d42:	4b10      	ldr	r3, [pc, #64]	; (3d84 <bacnet_task+0x48>)
    3d44:	4798      	blx	r3
    3d46:	2800      	cmp	r0, #0
    3d48:	d10c      	bne.n	3d64 <bacnet_task+0x28>
        mstimer_reset(&DCC_Timer);
        dcc_timer_seconds(DCC_CYCLE_SECONDS);
    }
    /* handle the messaging */
    pdu_len = dlmstp_receive(&src, &PDUBuffer[0], sizeof(PDUBuffer), 0);
    3d4a:	2300      	movs	r3, #0
    3d4c:	2281      	movs	r2, #129	; 0x81
    3d4e:	0092      	lsls	r2, r2, #2
    3d50:	490d      	ldr	r1, [pc, #52]	; (3d88 <bacnet_task+0x4c>)
    3d52:	a801      	add	r0, sp, #4
    3d54:	4c0d      	ldr	r4, [pc, #52]	; (3d8c <bacnet_task+0x50>)
    3d56:	47a0      	blx	r4
    if (pdu_len) {
    3d58:	2800      	cmp	r0, #0
    3d5a:	d10a      	bne.n	3d72 <bacnet_task+0x36>
        npdu_handler(&src, &PDUBuffer[0], pdu_len);
    }
    bacnet_application_task();
    3d5c:	4b0c      	ldr	r3, [pc, #48]	; (3d90 <bacnet_task+0x54>)
    3d5e:	4798      	blx	r3
}
    3d60:	b006      	add	sp, #24
    3d62:	bd10      	pop	{r4, pc}
        mstimer_reset(&DCC_Timer);
    3d64:	4806      	ldr	r0, [pc, #24]	; (3d80 <bacnet_task+0x44>)
    3d66:	4b0b      	ldr	r3, [pc, #44]	; (3d94 <bacnet_task+0x58>)
    3d68:	4798      	blx	r3
        dcc_timer_seconds(DCC_CYCLE_SECONDS);
    3d6a:	2001      	movs	r0, #1
    3d6c:	4b0a      	ldr	r3, [pc, #40]	; (3d98 <bacnet_task+0x5c>)
    3d6e:	4798      	blx	r3
    3d70:	e7eb      	b.n	3d4a <bacnet_task+0xe>
        npdu_handler(&src, &PDUBuffer[0], pdu_len);
    3d72:	0002      	movs	r2, r0
    3d74:	4904      	ldr	r1, [pc, #16]	; (3d88 <bacnet_task+0x4c>)
    3d76:	a801      	add	r0, sp, #4
    3d78:	4b08      	ldr	r3, [pc, #32]	; (3d9c <bacnet_task+0x60>)
    3d7a:	4798      	blx	r3
    3d7c:	e7ee      	b.n	3d5c <bacnet_task+0x20>
    3d7e:	46c0      	nop			; (mov r8, r8)
    3d80:	200008c4 	.word	0x200008c4
    3d84:	00002689 	.word	0x00002689
    3d88:	200008cc 	.word	0x200008cc
    3d8c:	00006b15 	.word	0x00006b15
    3d90:	00003bc9 	.word	0x00003bc9
    3d94:	0000267d 	.word	0x0000267d
    3d98:	0000418d 	.word	0x0000418d
    3d9c:	00001329 	.word	0x00001329

00003da0 <decode_real>:
#endif

/* from clause 20.2.6 Encoding of a Real Number Value */
/* returns the number of apdu bytes consumed */
int decode_real(uint8_t *apdu, float *real_value)
{
    3da0:	b510      	push	{r4, lr}
    my_data.byte[1] = apdu[1];
    my_data.byte[2] = apdu[2];
    my_data.byte[3] = apdu[3];
#else
    my_data.byte[0] = apdu[3];
    my_data.byte[1] = apdu[2];
    3da2:	7882      	ldrb	r2, [r0, #2]
    3da4:	0212      	lsls	r2, r2, #8
    3da6:	78c3      	ldrb	r3, [r0, #3]
    3da8:	4313      	orrs	r3, r2
    my_data.byte[2] = apdu[1];
    3daa:	7842      	ldrb	r2, [r0, #1]
    3dac:	0412      	lsls	r2, r2, #16
    3dae:	4c05      	ldr	r4, [pc, #20]	; (3dc4 <decode_real+0x24>)
    3db0:	4023      	ands	r3, r4
    3db2:	4313      	orrs	r3, r2
    my_data.byte[3] = apdu[0];
    3db4:	7802      	ldrb	r2, [r0, #0]
    3db6:	0612      	lsls	r2, r2, #24
    3db8:	021b      	lsls	r3, r3, #8
    3dba:	0a1b      	lsrs	r3, r3, #8
#endif

    *real_value = my_data.real_value;
    3dbc:	4313      	orrs	r3, r2
    3dbe:	600b      	str	r3, [r1, #0]

    return 4;
}
    3dc0:	2004      	movs	r0, #4
    3dc2:	bd10      	pop	{r4, pc}
    3dc4:	ff00ffff 	.word	0xff00ffff

00003dc8 <decode_real_safe>:

int decode_real_safe(uint8_t *apdu, uint32_t len_value, float *real_value)
{
    3dc8:	b510      	push	{r4, lr}
    if (len_value != 4) {
    3dca:	2904      	cmp	r1, #4
    3dcc:	d003      	beq.n	3dd6 <decode_real_safe+0xe>
        *real_value = 0.0f;
    3dce:	2300      	movs	r3, #0
    3dd0:	6013      	str	r3, [r2, #0]
        return (int)len_value;
    3dd2:	0008      	movs	r0, r1
    } else {
        return decode_real(apdu, real_value);
    }
}
    3dd4:	bd10      	pop	{r4, pc}
        return decode_real(apdu, real_value);
    3dd6:	0011      	movs	r1, r2
    3dd8:	4b01      	ldr	r3, [pc, #4]	; (3de0 <decode_real_safe+0x18>)
    3dda:	4798      	blx	r3
    3ddc:	e7fa      	b.n	3dd4 <decode_real_safe+0xc>
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	00003da1 	.word	0x00003da1

00003de4 <encode_bacnet_real>:
        uint8_t byte[4];
        float real_value;
    } my_data;

    /* NOTE: assumes the compiler stores float as IEEE-754 float */
    my_data.real_value = value;
    3de4:	0002      	movs	r2, r0
    apdu[0] = my_data.byte[0];
    apdu[1] = my_data.byte[1];
    apdu[2] = my_data.byte[2];
    apdu[3] = my_data.byte[3];
#else
    apdu[0] = my_data.byte[3];
    3de6:	0e03      	lsrs	r3, r0, #24
    3de8:	700b      	strb	r3, [r1, #0]
    apdu[1] = my_data.byte[2];
    3dea:	0203      	lsls	r3, r0, #8
    3dec:	0e1b      	lsrs	r3, r3, #24
    3dee:	704b      	strb	r3, [r1, #1]
    apdu[2] = my_data.byte[1];
    3df0:	0400      	lsls	r0, r0, #16
    3df2:	0e00      	lsrs	r0, r0, #24
    3df4:	7088      	strb	r0, [r1, #2]
    apdu[3] = my_data.byte[0];
    3df6:	70ca      	strb	r2, [r1, #3]
#endif

    return 4;
}
    3df8:	2004      	movs	r0, #4
    3dfa:	4770      	bx	lr

00003dfc <decode_double>:
#if BACNET_USE_DOUBLE

/* from clause 20.2.7 Encoding of a Double Precision Real Number Value */
/* returns the number of apdu bytes consumed */
int decode_double(uint8_t *apdu, double *double_value)
{
    3dfc:	b5d0      	push	{r4, r6, r7, lr}
    my_data.byte[4] = apdu[4];
    my_data.byte[5] = apdu[5];
    my_data.byte[6] = apdu[6];
    my_data.byte[7] = apdu[7];
#else
    my_data.byte[0] = apdu[7];
    3dfe:	2700      	movs	r7, #0
    3e00:	79c3      	ldrb	r3, [r0, #7]
    my_data.byte[1] = apdu[6];
    3e02:	7982      	ldrb	r2, [r0, #6]
    3e04:	0212      	lsls	r2, r2, #8
    3e06:	4313      	orrs	r3, r2
    my_data.byte[2] = apdu[5];
    3e08:	7942      	ldrb	r2, [r0, #5]
    3e0a:	0412      	lsls	r2, r2, #16
    3e0c:	4313      	orrs	r3, r2
    my_data.byte[3] = apdu[4];
    3e0e:	7902      	ldrb	r2, [r0, #4]
    3e10:	0612      	lsls	r2, r2, #24
    3e12:	4313      	orrs	r3, r2
    3e14:	001e      	movs	r6, r3
    my_data.byte[4] = apdu[3];
    3e16:	78c2      	ldrb	r2, [r0, #3]
    3e18:	23ff      	movs	r3, #255	; 0xff
    3e1a:	003c      	movs	r4, r7
    3e1c:	439c      	bics	r4, r3
    3e1e:	4314      	orrs	r4, r2
    my_data.byte[5] = apdu[2];
    3e20:	7882      	ldrb	r2, [r0, #2]
    3e22:	0212      	lsls	r2, r2, #8
    3e24:	4b08      	ldr	r3, [pc, #32]	; (3e48 <decode_double+0x4c>)
    3e26:	401c      	ands	r4, r3
    3e28:	4322      	orrs	r2, r4
    my_data.byte[6] = apdu[1];
    3e2a:	7843      	ldrb	r3, [r0, #1]
    3e2c:	041b      	lsls	r3, r3, #16
    3e2e:	4c07      	ldr	r4, [pc, #28]	; (3e4c <decode_double+0x50>)
    3e30:	4022      	ands	r2, r4
    3e32:	4313      	orrs	r3, r2
    my_data.byte[7] = apdu[0];
    3e34:	7802      	ldrb	r2, [r0, #0]
    3e36:	0612      	lsls	r2, r2, #24
    3e38:	021b      	lsls	r3, r3, #8
    3e3a:	0a1b      	lsrs	r3, r3, #8
    3e3c:	4313      	orrs	r3, r2
    3e3e:	001f      	movs	r7, r3
#endif

    *double_value = my_data.double_value;
    3e40:	600e      	str	r6, [r1, #0]
    3e42:	604f      	str	r7, [r1, #4]

    return 8;
}
    3e44:	2008      	movs	r0, #8
    3e46:	bdd0      	pop	{r4, r6, r7, pc}
    3e48:	ffff00ff 	.word	0xffff00ff
    3e4c:	ff00ffff 	.word	0xff00ffff

00003e50 <decode_double_safe>:

int decode_double_safe(uint8_t *apdu, uint32_t len_value, double *double_value)
{
    3e50:	b570      	push	{r4, r5, r6, lr}
    if (len_value != 8) {
    3e52:	2908      	cmp	r1, #8
    3e54:	d005      	beq.n	3e62 <decode_double_safe+0x12>
        *double_value = 0.0;
    3e56:	2400      	movs	r4, #0
    3e58:	2500      	movs	r5, #0
    3e5a:	6014      	str	r4, [r2, #0]
    3e5c:	6055      	str	r5, [r2, #4]
        return (int)len_value;
    3e5e:	0008      	movs	r0, r1
    } else {
        return decode_double(apdu, double_value);
    }
}
    3e60:	bd70      	pop	{r4, r5, r6, pc}
        return decode_double(apdu, double_value);
    3e62:	0011      	movs	r1, r2
    3e64:	4b01      	ldr	r3, [pc, #4]	; (3e6c <decode_double_safe+0x1c>)
    3e66:	4798      	blx	r3
    3e68:	e7fa      	b.n	3e60 <decode_double_safe+0x10>
    3e6a:	46c0      	nop			; (mov r8, r8)
    3e6c:	00003dfd 	.word	0x00003dfd

00003e70 <bitstring_init>:

void bitstring_init(BACNET_BIT_STRING *bit_string)
{
    int i;

    bit_string->bits_used = 0;
    3e70:	2300      	movs	r3, #0
    3e72:	7003      	strb	r3, [r0, #0]
    for (i = 0; i < MAX_BITSTRING_BYTES; i++) {
    3e74:	e003      	b.n	3e7e <bitstring_init+0xe>
        bit_string->value[i] = 0;
    3e76:	18c2      	adds	r2, r0, r3
    3e78:	2100      	movs	r1, #0
    3e7a:	7051      	strb	r1, [r2, #1]
    for (i = 0; i < MAX_BITSTRING_BYTES; i++) {
    3e7c:	3301      	adds	r3, #1
    3e7e:	2b0e      	cmp	r3, #14
    3e80:	ddf9      	ble.n	3e76 <bitstring_init+0x6>
    }
}
    3e82:	4770      	bx	lr

00003e84 <bitstring_set_bit>:

void bitstring_set_bit(
    BACNET_BIT_STRING *bit_string, uint8_t bit_number, bool value)
{
    3e84:	b530      	push	{r4, r5, lr}
    uint8_t byte_number = bit_number / 8;
    3e86:	08cb      	lsrs	r3, r1, #3
    uint8_t bit_mask = 1;

    if (byte_number < MAX_BITSTRING_BYTES) {
    3e88:	2b0e      	cmp	r3, #14
    3e8a:	d810      	bhi.n	3eae <bitstring_set_bit+0x2a>
        /* set max bits used */
        if (bit_string->bits_used < (bit_number + 1)) {
    3e8c:	7805      	ldrb	r5, [r0, #0]
    3e8e:	1c4c      	adds	r4, r1, #1
    3e90:	42a5      	cmp	r5, r4
    3e92:	da00      	bge.n	3e96 <bitstring_set_bit+0x12>
            bit_string->bits_used = bit_number + 1;
    3e94:	7004      	strb	r4, [r0, #0]
        }
        bit_mask = bit_mask << (bit_number - (byte_number * 8));
    3e96:	00dc      	lsls	r4, r3, #3
    3e98:	1b09      	subs	r1, r1, r4
    3e9a:	2401      	movs	r4, #1
    3e9c:	408c      	lsls	r4, r1
    3e9e:	0021      	movs	r1, r4
    3ea0:	b2e4      	uxtb	r4, r4
        if (value) {
    3ea2:	2a00      	cmp	r2, #0
    3ea4:	d104      	bne.n	3eb0 <bitstring_set_bit+0x2c>
            bit_string->value[byte_number] |= bit_mask;
        } else {
            bit_string->value[byte_number] &= (~(bit_mask));
    3ea6:	18c3      	adds	r3, r0, r3
    3ea8:	785a      	ldrb	r2, [r3, #1]
    3eaa:	438a      	bics	r2, r1
    3eac:	705a      	strb	r2, [r3, #1]
        }
    }
}
    3eae:	bd30      	pop	{r4, r5, pc}
            bit_string->value[byte_number] |= bit_mask;
    3eb0:	18c3      	adds	r3, r0, r3
    3eb2:	785a      	ldrb	r2, [r3, #1]
    3eb4:	4314      	orrs	r4, r2
    3eb6:	705c      	strb	r4, [r3, #1]
    3eb8:	e7f9      	b.n	3eae <bitstring_set_bit+0x2a>

00003eba <bitstring_bits_used>:
    return value;
}

uint8_t bitstring_bits_used(BACNET_BIT_STRING *bit_string)
{
    return bit_string->bits_used;
    3eba:	7800      	ldrb	r0, [r0, #0]
}
    3ebc:	4770      	bx	lr

00003ebe <bitstring_bytes_used>:
{
    uint8_t len = 0; /* return value */
    uint8_t used_bytes = 0;
    uint8_t last_bit = 0;

    if (bit_string->bits_used) {
    3ebe:	7800      	ldrb	r0, [r0, #0]
    3ec0:	2800      	cmp	r0, #0
    3ec2:	d003      	beq.n	3ecc <bitstring_bytes_used+0xe>
        last_bit = bit_string->bits_used - 1;
    3ec4:	3801      	subs	r0, #1
    3ec6:	b2c0      	uxtb	r0, r0
        used_bytes = last_bit / 8;
    3ec8:	08c0      	lsrs	r0, r0, #3
        /* add one for the first byte */
        used_bytes++;
    3eca:	3001      	adds	r0, #1
        len = used_bytes;
    }

    return len;
}
    3ecc:	4770      	bx	lr

00003ece <bitstring_octet>:

uint8_t bitstring_octet(BACNET_BIT_STRING *bit_string, uint8_t octet_index)
{
    uint8_t octet = 0;

    if (bit_string) {
    3ece:	2800      	cmp	r0, #0
    3ed0:	d004      	beq.n	3edc <bitstring_octet+0xe>
        if (octet_index < MAX_BITSTRING_BYTES) {
    3ed2:	290e      	cmp	r1, #14
    3ed4:	d804      	bhi.n	3ee0 <bitstring_octet+0x12>
            octet = bit_string->value[octet_index];
    3ed6:	1840      	adds	r0, r0, r1
    3ed8:	7840      	ldrb	r0, [r0, #1]
        }
    }

    return octet;
}
    3eda:	4770      	bx	lr
    uint8_t octet = 0;
    3edc:	2000      	movs	r0, #0
    3ede:	e7fc      	b.n	3eda <bitstring_octet+0xc>
    3ee0:	2000      	movs	r0, #0
    3ee2:	e7fa      	b.n	3eda <bitstring_octet+0xc>

00003ee4 <bitstring_set_octet>:
bool bitstring_set_octet(
    BACNET_BIT_STRING *bit_string, uint8_t index, uint8_t octet)
{
    bool status = false;

    if (bit_string) {
    3ee4:	2800      	cmp	r0, #0
    3ee6:	d005      	beq.n	3ef4 <bitstring_set_octet+0x10>
        if (index < MAX_BITSTRING_BYTES) {
    3ee8:	290e      	cmp	r1, #14
    3eea:	d805      	bhi.n	3ef8 <bitstring_set_octet+0x14>
            bit_string->value[index] = octet;
    3eec:	1840      	adds	r0, r0, r1
    3eee:	7042      	strb	r2, [r0, #1]
            status = true;
    3ef0:	2001      	movs	r0, #1
        }
    }

    return status;
}
    3ef2:	4770      	bx	lr
    bool status = false;
    3ef4:	2000      	movs	r0, #0
    3ef6:	e7fc      	b.n	3ef2 <bitstring_set_octet+0xe>
    3ef8:	2000      	movs	r0, #0
    3efa:	e7fa      	b.n	3ef2 <bitstring_set_octet+0xe>

00003efc <bitstring_set_bits_used>:
bool bitstring_set_bits_used(
    BACNET_BIT_STRING *bit_string, uint8_t bytes_used, uint8_t unused_bits)
{
    bool status = false;

    if (bit_string) {
    3efc:	2800      	cmp	r0, #0
    3efe:	d005      	beq.n	3f0c <bitstring_set_bits_used+0x10>
        /* FIXME: check that bytes_used is at least one? */
        bit_string->bits_used = bytes_used * 8;
    3f00:	00c9      	lsls	r1, r1, #3
    3f02:	b2c9      	uxtb	r1, r1
        bit_string->bits_used -= unused_bits;
    3f04:	1a8a      	subs	r2, r1, r2
    3f06:	7002      	strb	r2, [r0, #0]
        status = true;
    3f08:	2001      	movs	r0, #1
    }

    return status;
}
    3f0a:	4770      	bx	lr
    bool status = false;
    3f0c:	2000      	movs	r0, #0
    3f0e:	e7fc      	b.n	3f0a <bitstring_set_bits_used+0xe>

00003f10 <characterstring_init>:
   initialize by using value=NULL */
bool characterstring_init(BACNET_CHARACTER_STRING *char_string,
    uint8_t encoding,
    const char *value,
    size_t length)
{
    3f10:	b570      	push	{r4, r5, r6, lr}
    bool status = false; /* return value */
    size_t i; /* counter */

    if (char_string) {
    3f12:	2800      	cmp	r0, #0
    3f14:	d029      	beq.n	3f6a <characterstring_init+0x5a>
        char_string->length = 0;
    3f16:	2400      	movs	r4, #0
    3f18:	6004      	str	r4, [r0, #0]
        char_string->encoding = encoding;
    3f1a:	7101      	strb	r1, [r0, #4]
        /* save a byte at the end for NULL -
           note: assumes printable characters */
        if (length <= CHARACTER_STRING_CAPACITY) {
    3f1c:	21da      	movs	r1, #218	; 0xda
    3f1e:	31ff      	adds	r1, #255	; 0xff
    3f20:	428b      	cmp	r3, r1
    3f22:	d824      	bhi.n	3f6e <characterstring_init+0x5e>
            if (value) {
    3f24:	2a00      	cmp	r2, #0
    3f26:	d001      	beq.n	3f2c <characterstring_init+0x1c>
    3f28:	2100      	movs	r1, #0
    3f2a:	e005      	b.n	3f38 <characterstring_init+0x28>
    3f2c:	2300      	movs	r3, #0
    3f2e:	e016      	b.n	3f5e <characterstring_init+0x4e>
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
                    if (i < length) {
                        char_string->value[char_string->length] = value[i];
                        char_string->length++;
                    } else {
                        char_string->value[i] = 0;
    3f30:	1844      	adds	r4, r0, r1
    3f32:	2500      	movs	r5, #0
    3f34:	7165      	strb	r5, [r4, #5]
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
    3f36:	3101      	adds	r1, #1
    3f38:	24da      	movs	r4, #218	; 0xda
    3f3a:	34ff      	adds	r4, #255	; 0xff
    3f3c:	42a1      	cmp	r1, r4
    3f3e:	d808      	bhi.n	3f52 <characterstring_init+0x42>
                    if (i < length) {
    3f40:	4299      	cmp	r1, r3
    3f42:	d2f5      	bcs.n	3f30 <characterstring_init+0x20>
                        char_string->value[char_string->length] = value[i];
    3f44:	6804      	ldr	r4, [r0, #0]
    3f46:	5c56      	ldrb	r6, [r2, r1]
    3f48:	1905      	adds	r5, r0, r4
    3f4a:	716e      	strb	r6, [r5, #5]
                        char_string->length++;
    3f4c:	3401      	adds	r4, #1
    3f4e:	6004      	str	r4, [r0, #0]
    3f50:	e7f1      	b.n	3f36 <characterstring_init+0x26>
            } else {
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
                    char_string->value[i] = 0;
                }
            }
            status = true;
    3f52:	2001      	movs	r0, #1
        }
    }

    return status;
}
    3f54:	bd70      	pop	{r4, r5, r6, pc}
                    char_string->value[i] = 0;
    3f56:	18c2      	adds	r2, r0, r3
    3f58:	2100      	movs	r1, #0
    3f5a:	7151      	strb	r1, [r2, #5]
                for (i = 0; i < MAX_CHARACTER_STRING_BYTES; i++) {
    3f5c:	3301      	adds	r3, #1
    3f5e:	22da      	movs	r2, #218	; 0xda
    3f60:	32ff      	adds	r2, #255	; 0xff
    3f62:	4293      	cmp	r3, r2
    3f64:	d9f7      	bls.n	3f56 <characterstring_init+0x46>
            status = true;
    3f66:	2001      	movs	r0, #1
    3f68:	e7f4      	b.n	3f54 <characterstring_init+0x44>
    bool status = false; /* return value */
    3f6a:	2000      	movs	r0, #0
    3f6c:	e7f2      	b.n	3f54 <characterstring_init+0x44>
    3f6e:	2000      	movs	r0, #0
    3f70:	e7f0      	b.n	3f54 <characterstring_init+0x44>
	...

00003f74 <characterstring_init_ansi>:

bool characterstring_init_ansi(
    BACNET_CHARACTER_STRING *char_string, const char *value)
{
    3f74:	b570      	push	{r4, r5, r6, lr}
    3f76:	0005      	movs	r5, r0
    3f78:	1e0c      	subs	r4, r1, #0
    return characterstring_init(
    3f7a:	d009      	beq.n	3f90 <characterstring_init_ansi+0x1c>
    3f7c:	0008      	movs	r0, r1
    3f7e:	4b05      	ldr	r3, [pc, #20]	; (3f94 <characterstring_init_ansi+0x20>)
    3f80:	4798      	blx	r3
    3f82:	0003      	movs	r3, r0
    3f84:	0022      	movs	r2, r4
    3f86:	2100      	movs	r1, #0
    3f88:	0028      	movs	r0, r5
    3f8a:	4c03      	ldr	r4, [pc, #12]	; (3f98 <characterstring_init_ansi+0x24>)
    3f8c:	47a0      	blx	r4
        char_string, CHARACTER_ANSI_X34, value, value ? strlen(value) : 0);
}
    3f8e:	bd70      	pop	{r4, r5, r6, pc}
    return characterstring_init(
    3f90:	2300      	movs	r3, #0
    3f92:	e7f7      	b.n	3f84 <characterstring_init_ansi+0x10>
    3f94:	0000dbf1 	.word	0x0000dbf1
    3f98:	00003f11 	.word	0x00003f11

00003f9c <characterstring_same>:
}

/* returns true if the character encoding and string contents are the same */
bool characterstring_same(
    BACNET_CHARACTER_STRING *dest, BACNET_CHARACTER_STRING *src)
{
    3f9c:	b570      	push	{r4, r5, r6, lr}
    3f9e:	0002      	movs	r2, r0
    size_t i; /* counter */
    bool same_status = false;

    if (src && dest) {
    3fa0:	2900      	cmp	r1, #0
    3fa2:	d01d      	beq.n	3fe0 <characterstring_same+0x44>
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d01b      	beq.n	3fe0 <characterstring_same+0x44>
        if ((src->length == dest->length) &&
    3fa8:	680c      	ldr	r4, [r1, #0]
    3faa:	6803      	ldr	r3, [r0, #0]
    3fac:	429c      	cmp	r4, r3
    3fae:	d001      	beq.n	3fb4 <characterstring_same+0x18>
    bool same_status = false;
    3fb0:	2000      	movs	r0, #0
            same_status = true;
        }
    }

    return same_status;
}
    3fb2:	bd70      	pop	{r4, r5, r6, pc}
            (src->encoding == dest->encoding)) {
    3fb4:	7908      	ldrb	r0, [r1, #4]
    3fb6:	7913      	ldrb	r3, [r2, #4]
        if ((src->length == dest->length) &&
    3fb8:	4298      	cmp	r0, r3
    3fba:	d00e      	beq.n	3fda <characterstring_same+0x3e>
    bool same_status = false;
    3fbc:	2000      	movs	r0, #0
    3fbe:	e7f8      	b.n	3fb2 <characterstring_same+0x16>
            for (i = 0; (i < src->length) && same_status; i++) {
    3fc0:	3301      	adds	r3, #1
    3fc2:	42a3      	cmp	r3, r4
    3fc4:	d2f5      	bcs.n	3fb2 <characterstring_same+0x16>
    3fc6:	2800      	cmp	r0, #0
    3fc8:	d0f3      	beq.n	3fb2 <characterstring_same+0x16>
                if (src->value[i] != dest->value[i]) {
    3fca:	18cd      	adds	r5, r1, r3
    3fcc:	796e      	ldrb	r6, [r5, #5]
    3fce:	18d5      	adds	r5, r2, r3
    3fd0:	796d      	ldrb	r5, [r5, #5]
    3fd2:	42ae      	cmp	r6, r5
    3fd4:	d0f4      	beq.n	3fc0 <characterstring_same+0x24>
                    same_status = false;
    3fd6:	2000      	movs	r0, #0
    3fd8:	e7f2      	b.n	3fc0 <characterstring_same+0x24>
    3fda:	2001      	movs	r0, #1
    3fdc:	2300      	movs	r3, #0
    3fde:	e7f0      	b.n	3fc2 <characterstring_same+0x26>
    } else if (src) {
    3fe0:	2900      	cmp	r1, #0
    3fe2:	d004      	beq.n	3fee <characterstring_same+0x52>
        if (src->length == 0) {
    3fe4:	680b      	ldr	r3, [r1, #0]
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d00a      	beq.n	4000 <characterstring_same+0x64>
    bool same_status = false;
    3fea:	2000      	movs	r0, #0
    3fec:	e7e1      	b.n	3fb2 <characterstring_same+0x16>
    } else if (dest) {
    3fee:	2a00      	cmp	r2, #0
    3ff0:	d008      	beq.n	4004 <characterstring_same+0x68>
        if (dest->length == 0) {
    3ff2:	6813      	ldr	r3, [r2, #0]
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d101      	bne.n	3ffc <characterstring_same+0x60>
            same_status = true;
    3ff8:	2001      	movs	r0, #1
    3ffa:	e7da      	b.n	3fb2 <characterstring_same+0x16>
    bool same_status = false;
    3ffc:	2000      	movs	r0, #0
    3ffe:	e7d8      	b.n	3fb2 <characterstring_same+0x16>
            same_status = true;
    4000:	2001      	movs	r0, #1
    4002:	e7d6      	b.n	3fb2 <characterstring_same+0x16>
    bool same_status = false;
    4004:	2000      	movs	r0, #0
    4006:	e7d4      	b.n	3fb2 <characterstring_same+0x16>

00004008 <characterstring_ansi_same>:

bool characterstring_ansi_same(BACNET_CHARACTER_STRING *dest, const char *src)
{
    4008:	b570      	push	{r4, r5, r6, lr}
    400a:	0005      	movs	r5, r0
    400c:	1e0c      	subs	r4, r1, #0
    size_t i; /* counter */
    bool same_status = false;

    if (src && dest) {
    400e:	d01d      	beq.n	404c <characterstring_ansi_same+0x44>
    4010:	2800      	cmp	r0, #0
    4012:	d01b      	beq.n	404c <characterstring_ansi_same+0x44>
        if ((dest->length == strlen(src)) &&
    4014:	6806      	ldr	r6, [r0, #0]
    4016:	0008      	movs	r0, r1
    4018:	4b16      	ldr	r3, [pc, #88]	; (4074 <characterstring_ansi_same+0x6c>)
    401a:	4798      	blx	r3
    401c:	4286      	cmp	r6, r0
    401e:	d001      	beq.n	4024 <characterstring_ansi_same+0x1c>
    bool same_status = false;
    4020:	2000      	movs	r0, #0
            same_status = true;
        }
    }

    return same_status;
}
    4022:	bd70      	pop	{r4, r5, r6, pc}
            (dest->encoding == CHARACTER_ANSI_X34)) {
    4024:	792b      	ldrb	r3, [r5, #4]
        if ((dest->length == strlen(src)) &&
    4026:	2b00      	cmp	r3, #0
    4028:	d102      	bne.n	4030 <characterstring_ansi_same+0x28>
    402a:	2001      	movs	r0, #1
    402c:	2300      	movs	r3, #0
    402e:	e002      	b.n	4036 <characterstring_ansi_same+0x2e>
    bool same_status = false;
    4030:	2000      	movs	r0, #0
    4032:	e7f6      	b.n	4022 <characterstring_ansi_same+0x1a>
            for (i = 0; (i < dest->length) && same_status; i++) {
    4034:	3301      	adds	r3, #1
    4036:	42b3      	cmp	r3, r6
    4038:	d2f3      	bcs.n	4022 <characterstring_ansi_same+0x1a>
    403a:	2800      	cmp	r0, #0
    403c:	d0f1      	beq.n	4022 <characterstring_ansi_same+0x1a>
                if (src[i] != dest->value[i]) {
    403e:	5ce1      	ldrb	r1, [r4, r3]
    4040:	18ea      	adds	r2, r5, r3
    4042:	7952      	ldrb	r2, [r2, #5]
    4044:	4291      	cmp	r1, r2
    4046:	d0f5      	beq.n	4034 <characterstring_ansi_same+0x2c>
                    same_status = false;
    4048:	2000      	movs	r0, #0
    404a:	e7f3      	b.n	4034 <characterstring_ansi_same+0x2c>
    else if (src) {
    404c:	2c00      	cmp	r4, #0
    404e:	d004      	beq.n	405a <characterstring_ansi_same+0x52>
        if (strlen(src) == 0) {
    4050:	7823      	ldrb	r3, [r4, #0]
    4052:	2b00      	cmp	r3, #0
    4054:	d00a      	beq.n	406c <characterstring_ansi_same+0x64>
    bool same_status = false;
    4056:	2000      	movs	r0, #0
    4058:	e7e3      	b.n	4022 <characterstring_ansi_same+0x1a>
    } else if (dest) {
    405a:	2d00      	cmp	r5, #0
    405c:	d008      	beq.n	4070 <characterstring_ansi_same+0x68>
        if (dest->length == 0) {
    405e:	682b      	ldr	r3, [r5, #0]
    4060:	2b00      	cmp	r3, #0
    4062:	d101      	bne.n	4068 <characterstring_ansi_same+0x60>
            same_status = true;
    4064:	2001      	movs	r0, #1
    4066:	e7dc      	b.n	4022 <characterstring_ansi_same+0x1a>
    bool same_status = false;
    4068:	2000      	movs	r0, #0
    406a:	e7da      	b.n	4022 <characterstring_ansi_same+0x1a>
            same_status = true;
    406c:	2001      	movs	r0, #1
    406e:	e7d8      	b.n	4022 <characterstring_ansi_same+0x1a>
    bool same_status = false;
    4070:	2000      	movs	r0, #0
    4072:	e7d6      	b.n	4022 <characterstring_ansi_same+0x1a>
    4074:	0000dbf1 	.word	0x0000dbf1

00004078 <characterstring_value>:
/* Returns the value. */
char *characterstring_value(BACNET_CHARACTER_STRING *char_string)
{
    char *value = NULL;

    if (char_string) {
    4078:	2800      	cmp	r0, #0
    407a:	d001      	beq.n	4080 <characterstring_value+0x8>
        value = char_string->value;
    407c:	3005      	adds	r0, #5
    }

    return value;
}
    407e:	4770      	bx	lr
    char *value = NULL;
    4080:	2000      	movs	r0, #0
    return value;
    4082:	e7fc      	b.n	407e <characterstring_value+0x6>

00004084 <characterstring_length>:
/* returns the length. */
size_t characterstring_length(BACNET_CHARACTER_STRING *char_string)
{
    size_t length = 0;

    if (char_string) {
    4084:	2800      	cmp	r0, #0
    4086:	d001      	beq.n	408c <characterstring_length+0x8>
        /* FIXME: validate length is within bounds? */
        length = char_string->length;
    4088:	6800      	ldr	r0, [r0, #0]
    }

    return length;
}
    408a:	4770      	bx	lr
    size_t length = 0;
    408c:	2000      	movs	r0, #0
    return length;
    408e:	e7fc      	b.n	408a <characterstring_length+0x6>

00004090 <characterstring_capacity>:

size_t characterstring_capacity(BACNET_CHARACTER_STRING *char_string)
{
    size_t length = 0;

    if (char_string) {
    4090:	2800      	cmp	r0, #0
    4092:	d001      	beq.n	4098 <characterstring_capacity+0x8>
        length = CHARACTER_STRING_CAPACITY;
    4094:	20da      	movs	r0, #218	; 0xda
    4096:	30ff      	adds	r0, #255	; 0xff
    }

    return length;
}
    4098:	4770      	bx	lr

0000409a <characterstring_encoding>:
/* returns the encoding. */
uint8_t characterstring_encoding(BACNET_CHARACTER_STRING *char_string)
{
    uint8_t encoding = 0;

    if (char_string) {
    409a:	2800      	cmp	r0, #0
    409c:	d001      	beq.n	40a2 <characterstring_encoding+0x8>
        encoding = char_string->encoding;
    409e:	7900      	ldrb	r0, [r0, #4]
    }

    return encoding;
}
    40a0:	4770      	bx	lr
    uint8_t encoding = 0;
    40a2:	2000      	movs	r0, #0
    40a4:	e7fc      	b.n	40a0 <characterstring_encoding+0x6>
	...

000040a8 <characterstring_copy>:
{
    40a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40aa:	0005      	movs	r5, r0
    40ac:	000c      	movs	r4, r1
    return characterstring_init(dest, characterstring_encoding(src),
    40ae:	0008      	movs	r0, r1
    40b0:	4b08      	ldr	r3, [pc, #32]	; (40d4 <characterstring_copy+0x2c>)
    40b2:	4798      	blx	r3
    40b4:	0006      	movs	r6, r0
        characterstring_value(src), characterstring_length(src));
    40b6:	0020      	movs	r0, r4
    40b8:	4b07      	ldr	r3, [pc, #28]	; (40d8 <characterstring_copy+0x30>)
    40ba:	4798      	blx	r3
    40bc:	0007      	movs	r7, r0
    return characterstring_init(dest, characterstring_encoding(src),
    40be:	0020      	movs	r0, r4
    40c0:	4b06      	ldr	r3, [pc, #24]	; (40dc <characterstring_copy+0x34>)
    40c2:	4798      	blx	r3
    40c4:	0003      	movs	r3, r0
    40c6:	003a      	movs	r2, r7
    40c8:	0031      	movs	r1, r6
    40ca:	0028      	movs	r0, r5
    40cc:	4c04      	ldr	r4, [pc, #16]	; (40e0 <characterstring_copy+0x38>)
    40ce:	47a0      	blx	r4
}
    40d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40d2:	46c0      	nop			; (mov r8, r8)
    40d4:	0000409b 	.word	0x0000409b
    40d8:	00004079 	.word	0x00004079
    40dc:	00004085 	.word	0x00004085
    40e0:	00003f11 	.word	0x00003f11

000040e4 <octetstring_init>:
#if BACNET_USE_OCTETSTRING
/* returns false if the string exceeds capacity
   initialize by using value=NULL */
bool octetstring_init(
    BACNET_OCTET_STRING *octet_string, uint8_t *value, size_t length)
{
    40e4:	b530      	push	{r4, r5, lr}
    bool status = false; /* return value */
    size_t i; /* counter */

    if (octet_string && (length <= MAX_OCTET_STRING_BYTES)) {
    40e6:	2800      	cmp	r0, #0
    40e8:	d024      	beq.n	4134 <octetstring_init+0x50>
    40ea:	23ed      	movs	r3, #237	; 0xed
    40ec:	005b      	lsls	r3, r3, #1
    40ee:	429a      	cmp	r2, r3
    40f0:	d822      	bhi.n	4138 <octetstring_init+0x54>
        octet_string->length = 0;
    40f2:	2300      	movs	r3, #0
    40f4:	6003      	str	r3, [r0, #0]
        if (value) {
    40f6:	2900      	cmp	r1, #0
    40f8:	d016      	beq.n	4128 <octetstring_init+0x44>
    40fa:	2300      	movs	r3, #0
    40fc:	e003      	b.n	4106 <octetstring_init+0x22>
            for (i = 0; i < MAX_OCTET_STRING_BYTES; i++) {
                if (i < length) {
                    octet_string->value[i] = value[i];
                } else {
                    octet_string->value[i] = 0;
    40fe:	18c4      	adds	r4, r0, r3
    4100:	2500      	movs	r5, #0
    4102:	7125      	strb	r5, [r4, #4]
            for (i = 0; i < MAX_OCTET_STRING_BYTES; i++) {
    4104:	3301      	adds	r3, #1
    4106:	24da      	movs	r4, #218	; 0xda
    4108:	34ff      	adds	r4, #255	; 0xff
    410a:	42a3      	cmp	r3, r4
    410c:	d805      	bhi.n	411a <octetstring_init+0x36>
                if (i < length) {
    410e:	4293      	cmp	r3, r2
    4110:	d2f5      	bcs.n	40fe <octetstring_init+0x1a>
                    octet_string->value[i] = value[i];
    4112:	5ccd      	ldrb	r5, [r1, r3]
    4114:	18c4      	adds	r4, r0, r3
    4116:	7125      	strb	r5, [r4, #4]
    4118:	e7f4      	b.n	4104 <octetstring_init+0x20>
                }
            }
            octet_string->length = length;
    411a:	6002      	str	r2, [r0, #0]
        } else {
            for (i = 0; i < MAX_OCTET_STRING_BYTES; i++) {
                octet_string->value[i] = 0;
            }
        }
        status = true;
    411c:	2001      	movs	r0, #1
    }

    return status;
}
    411e:	bd30      	pop	{r4, r5, pc}
                octet_string->value[i] = 0;
    4120:	18c2      	adds	r2, r0, r3
    4122:	2100      	movs	r1, #0
    4124:	7111      	strb	r1, [r2, #4]
            for (i = 0; i < MAX_OCTET_STRING_BYTES; i++) {
    4126:	3301      	adds	r3, #1
    4128:	22da      	movs	r2, #218	; 0xda
    412a:	32ff      	adds	r2, #255	; 0xff
    412c:	4293      	cmp	r3, r2
    412e:	d9f7      	bls.n	4120 <octetstring_init+0x3c>
        status = true;
    4130:	2001      	movs	r0, #1
    4132:	e7f4      	b.n	411e <octetstring_init+0x3a>
    bool status = false; /* return value */
    4134:	2000      	movs	r0, #0
    4136:	e7f2      	b.n	411e <octetstring_init+0x3a>
    4138:	2000      	movs	r0, #0
    413a:	e7f0      	b.n	411e <octetstring_init+0x3a>

0000413c <octetstring_value>:
/* returns a pointer to the value. */
uint8_t *octetstring_value(BACNET_OCTET_STRING *octet_string)
{
    uint8_t *value = NULL;

    if (octet_string) {
    413c:	2800      	cmp	r0, #0
    413e:	d001      	beq.n	4144 <octetstring_value+0x8>
        value = octet_string->value;
    4140:	3004      	adds	r0, #4
    }

    return value;
}
    4142:	4770      	bx	lr
    uint8_t *value = NULL;
    4144:	2000      	movs	r0, #0
    return value;
    4146:	e7fc      	b.n	4142 <octetstring_value+0x6>

00004148 <octetstring_length>:
/* returns the length. */
size_t octetstring_length(BACNET_OCTET_STRING *octet_string)
{
    size_t length = 0;

    if (octet_string) {
    4148:	2800      	cmp	r0, #0
    414a:	d001      	beq.n	4150 <octetstring_length+0x8>
        /* FIXME: validate length is within bounds? */
        length = octet_string->length;
    414c:	6800      	ldr	r0, [r0, #0]
    }

    return length;
}
    414e:	4770      	bx	lr
    size_t length = 0;
    4150:	2000      	movs	r0, #0
    return length;
    4152:	e7fc      	b.n	414e <octetstring_length+0x6>

00004154 <dcc_communication_enabled>:
    return DCC_Enable_Disable;
}

bool dcc_communication_enabled(void)
{
    return (DCC_Enable_Disable == COMMUNICATION_ENABLE);
    4154:	4b02      	ldr	r3, [pc, #8]	; (4160 <dcc_communication_enabled+0xc>)
    4156:	7818      	ldrb	r0, [r3, #0]
    4158:	4243      	negs	r3, r0
    415a:	4158      	adcs	r0, r3
    415c:	b2c0      	uxtb	r0, r0
}
    415e:	4770      	bx	lr
    4160:	20000adc 	.word	0x20000adc

00004164 <dcc_communication_disabled>:
/* When network communications are completely disabled,
   only DeviceCommunicationControl and ReinitializeDevice APDUs
   shall be processed and no messages shall be initiated.*/
bool dcc_communication_disabled(void)
{
    return (DCC_Enable_Disable == COMMUNICATION_DISABLE);
    4164:	4b03      	ldr	r3, [pc, #12]	; (4174 <dcc_communication_disabled+0x10>)
    4166:	7818      	ldrb	r0, [r3, #0]
    4168:	3801      	subs	r0, #1
    416a:	4243      	negs	r3, r0
    416c:	4158      	adcs	r0, r3
    416e:	b2c0      	uxtb	r0, r0
}
    4170:	4770      	bx	lr
    4172:	46c0      	nop			; (mov r8, r8)
    4174:	20000adc 	.word	0x20000adc

00004178 <dcc_communication_initiation_disabled>:
   for any Who-Is request that is received if and only if
   the Who-Is request does not contain an address range or
   the device is included in the address range. */
bool dcc_communication_initiation_disabled(void)
{
    return (DCC_Enable_Disable == COMMUNICATION_DISABLE_INITIATION);
    4178:	4b03      	ldr	r3, [pc, #12]	; (4188 <dcc_communication_initiation_disabled+0x10>)
    417a:	7818      	ldrb	r0, [r3, #0]
    417c:	3802      	subs	r0, #2
    417e:	4243      	negs	r3, r0
    4180:	4158      	adcs	r0, r3
    4182:	b2c0      	uxtb	r0, r0
}
    4184:	4770      	bx	lr
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	20000adc 	.word	0x20000adc

0000418c <dcc_timer_seconds>:

/* called every second or so.  If more than one second,
  then seconds should be the number of seconds to tick away */
void dcc_timer_seconds(uint32_t seconds)
{
    if (DCC_Time_Duration_Seconds) {
    418c:	4a09      	ldr	r2, [pc, #36]	; (41b4 <dcc_timer_seconds+0x28>)
    418e:	6813      	ldr	r3, [r2, #0]
    4190:	2b00      	cmp	r3, #0
    4192:	d00a      	beq.n	41aa <dcc_timer_seconds+0x1e>
        if (DCC_Time_Duration_Seconds > seconds) {
    4194:	4283      	cmp	r3, r0
    4196:	d909      	bls.n	41ac <dcc_timer_seconds+0x20>
            DCC_Time_Duration_Seconds -= seconds;
    4198:	1a1b      	subs	r3, r3, r0
    419a:	6013      	str	r3, [r2, #0]
        } else {
            DCC_Time_Duration_Seconds = 0;
        }
        /* just expired - do something */
        if (DCC_Time_Duration_Seconds == 0) {
    419c:	4b05      	ldr	r3, [pc, #20]	; (41b4 <dcc_timer_seconds+0x28>)
    419e:	681b      	ldr	r3, [r3, #0]
    41a0:	2b00      	cmp	r3, #0
    41a2:	d102      	bne.n	41aa <dcc_timer_seconds+0x1e>
            DCC_Enable_Disable = COMMUNICATION_ENABLE;
    41a4:	2200      	movs	r2, #0
    41a6:	4b04      	ldr	r3, [pc, #16]	; (41b8 <dcc_timer_seconds+0x2c>)
    41a8:	701a      	strb	r2, [r3, #0]
        }
    }
}
    41aa:	4770      	bx	lr
            DCC_Time_Duration_Seconds = 0;
    41ac:	2200      	movs	r2, #0
    41ae:	4b01      	ldr	r3, [pc, #4]	; (41b4 <dcc_timer_seconds+0x28>)
    41b0:	601a      	str	r2, [r3, #0]
    41b2:	e7f3      	b.n	419c <dcc_timer_seconds+0x10>
    41b4:	20000ae0 	.word	0x20000ae0
    41b8:	20000adc 	.word	0x20000adc

000041bc <dcc_set_status_duration>:
    BACNET_COMMUNICATION_ENABLE_DISABLE status, uint16_t minutes)
{
    bool valid = false;

    /* valid? */
    if (status < MAX_BACNET_COMMUNICATION_ENABLE_DISABLE) {
    41bc:	2802      	cmp	r0, #2
    41be:	d80f      	bhi.n	41e0 <dcc_set_status_duration+0x24>
        DCC_Enable_Disable = status;
    41c0:	4b08      	ldr	r3, [pc, #32]	; (41e4 <dcc_set_status_duration+0x28>)
    41c2:	7018      	strb	r0, [r3, #0]
        if (status == COMMUNICATION_ENABLE) {
    41c4:	2800      	cmp	r0, #0
    41c6:	d006      	beq.n	41d6 <dcc_set_status_duration+0x1a>
            DCC_Time_Duration_Seconds = 0;
        } else {
            DCC_Time_Duration_Seconds = minutes * 60;
    41c8:	010b      	lsls	r3, r1, #4
    41ca:	1a59      	subs	r1, r3, r1
    41cc:	008b      	lsls	r3, r1, #2
    41ce:	4a06      	ldr	r2, [pc, #24]	; (41e8 <dcc_set_status_duration+0x2c>)
    41d0:	6013      	str	r3, [r2, #0]
        }
        valid = true;
    41d2:	2001      	movs	r0, #1
    41d4:	e005      	b.n	41e2 <dcc_set_status_duration+0x26>
            DCC_Time_Duration_Seconds = 0;
    41d6:	2200      	movs	r2, #0
    41d8:	4b03      	ldr	r3, [pc, #12]	; (41e8 <dcc_set_status_duration+0x2c>)
    41da:	601a      	str	r2, [r3, #0]
        valid = true;
    41dc:	3001      	adds	r0, #1
    41de:	e000      	b.n	41e2 <dcc_set_status_duration+0x26>
    bool valid = false;
    41e0:	2000      	movs	r0, #0
    }

    return valid;
}
    41e2:	4770      	bx	lr
    41e4:	20000adc 	.word	0x20000adc
    41e8:	20000ae0 	.word	0x20000ae0

000041ec <dcc_decode_service_request>:
int dcc_decode_service_request(uint8_t *apdu,
    unsigned apdu_len_max,
    uint16_t *timeDuration,
    BACNET_COMMUNICATION_ENABLE_DISABLE *enable_disable,
    BACNET_CHARACTER_STRING *password)
{
    41ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ee:	b089      	sub	sp, #36	; 0x24
    41f0:	9000      	str	r0, [sp, #0]
    41f2:	000d      	movs	r5, r1
    41f4:	0016      	movs	r6, r2
    41f6:	9301      	str	r3, [sp, #4]
    int apdu_len = 0;
    int len = 0;
    uint8_t tag_number = 0;
    41f8:	2300      	movs	r3, #0
    41fa:	2217      	movs	r2, #23
    41fc:	a902      	add	r1, sp, #8
    41fe:	468c      	mov	ip, r1
    4200:	4462      	add	r2, ip
    4202:	7013      	strb	r3, [r2, #0]
    uint32_t len_value_type = 0;
    4204:	9306      	str	r3, [sp, #24]
    BACNET_UNSIGNED_INTEGER decoded_unsigned = 0;
    4206:	2000      	movs	r0, #0
    4208:	2100      	movs	r1, #0
    420a:	9004      	str	r0, [sp, #16]
    420c:	9105      	str	r1, [sp, #20]
    uint32_t decoded_enum = 0;
    420e:	9303      	str	r3, [sp, #12]

    if (apdu_len_max) {
    4210:	2d00      	cmp	r5, #0
    4212:	d103      	bne.n	421c <dcc_decode_service_request+0x30>
    int apdu_len = 0;
    4214:	2400      	movs	r4, #0
            characterstring_init_ansi(password, NULL);
        }
    }

    return apdu_len;
}
    4216:	0020      	movs	r0, r4
    4218:	b009      	add	sp, #36	; 0x24
    421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        len = bacnet_unsigned_context_decode(
    421c:	b2af      	uxth	r7, r5
    421e:	ab04      	add	r3, sp, #16
    4220:	2200      	movs	r2, #0
    4222:	0039      	movs	r1, r7
    4224:	9800      	ldr	r0, [sp, #0]
    4226:	4c38      	ldr	r4, [pc, #224]	; (4308 <dcc_decode_service_request+0x11c>)
    4228:	47a0      	blx	r4
    422a:	1e04      	subs	r4, r0, #0
        if (len > 0) {
    422c:	dd19      	ble.n	4262 <dcc_decode_service_request+0x76>
            if (decoded_unsigned <= UINT16_MAX) {
    422e:	9a04      	ldr	r2, [sp, #16]
    4230:	9b05      	ldr	r3, [sp, #20]
    4232:	2b00      	cmp	r3, #0
    4234:	d112      	bne.n	425c <dcc_decode_service_request+0x70>
    4236:	d00e      	beq.n	4256 <dcc_decode_service_request+0x6a>
                if (timeDuration) {
    4238:	2e00      	cmp	r6, #0
    423a:	d000      	beq.n	423e <dcc_decode_service_request+0x52>
                    *timeDuration = (uint16_t)decoded_unsigned;
    423c:	8032      	strh	r2, [r6, #0]
        if ((unsigned)apdu_len < apdu_len_max) {
    423e:	42a5      	cmp	r5, r4
    4240:	d819      	bhi.n	4276 <dcc_decode_service_request+0x8a>
        if ((unsigned)apdu_len < apdu_len_max) {
    4242:	42a5      	cmp	r5, r4
    4244:	d829      	bhi.n	429a <dcc_decode_service_request+0xae>
        } else if (password) {
    4246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4248:	2b00      	cmp	r3, #0
    424a:	d0e4      	beq.n	4216 <dcc_decode_service_request+0x2a>
            characterstring_init_ansi(password, NULL);
    424c:	2100      	movs	r1, #0
    424e:	0018      	movs	r0, r3
    4250:	4b2e      	ldr	r3, [pc, #184]	; (430c <dcc_decode_service_request+0x120>)
    4252:	4798      	blx	r3
    4254:	e7df      	b.n	4216 <dcc_decode_service_request+0x2a>
            if (decoded_unsigned <= UINT16_MAX) {
    4256:	4b2e      	ldr	r3, [pc, #184]	; (4310 <dcc_decode_service_request+0x124>)
    4258:	429a      	cmp	r2, r3
    425a:	d9ed      	bls.n	4238 <dcc_decode_service_request+0x4c>
                return BACNET_STATUS_ERROR;
    425c:	2401      	movs	r4, #1
    425e:	4264      	negs	r4, r4
    4260:	e7d9      	b.n	4216 <dcc_decode_service_request+0x2a>
        } else if (len < 0) {
    4262:	2800      	cmp	r0, #0
    4264:	db3e      	blt.n	42e4 <dcc_decode_service_request+0xf8>
        } else if (timeDuration) {
    4266:	2e00      	cmp	r6, #0
    4268:	d003      	beq.n	4272 <dcc_decode_service_request+0x86>
            *timeDuration = 0;
    426a:	2300      	movs	r3, #0
    426c:	8033      	strh	r3, [r6, #0]
    int apdu_len = 0;
    426e:	2400      	movs	r4, #0
    4270:	e7e5      	b.n	423e <dcc_decode_service_request+0x52>
    4272:	2400      	movs	r4, #0
    4274:	e7e3      	b.n	423e <dcc_decode_service_request+0x52>
            len = bacnet_enumerated_context_decode(
    4276:	9b00      	ldr	r3, [sp, #0]
    4278:	1918      	adds	r0, r3, r4
    427a:	1b39      	subs	r1, r7, r4
    427c:	b289      	uxth	r1, r1
    427e:	ab03      	add	r3, sp, #12
    4280:	2201      	movs	r2, #1
    4282:	4e24      	ldr	r6, [pc, #144]	; (4314 <dcc_decode_service_request+0x128>)
    4284:	47b0      	blx	r6
            if (len > 0) {
    4286:	2800      	cmp	r0, #0
    4288:	dd2f      	ble.n	42ea <dcc_decode_service_request+0xfe>
                apdu_len += len;
    428a:	1824      	adds	r4, r4, r0
                if (enable_disable) {
    428c:	9b01      	ldr	r3, [sp, #4]
    428e:	2b00      	cmp	r3, #0
    4290:	d0d7      	beq.n	4242 <dcc_decode_service_request+0x56>
                    *enable_disable =
    4292:	aa02      	add	r2, sp, #8
    4294:	7912      	ldrb	r2, [r2, #4]
    4296:	701a      	strb	r2, [r3, #0]
    4298:	e7d3      	b.n	4242 <dcc_decode_service_request+0x56>
            if (!decode_is_context_tag(&apdu[apdu_len], 2)) {
    429a:	9b00      	ldr	r3, [sp, #0]
    429c:	469c      	mov	ip, r3
    429e:	44a4      	add	ip, r4
    42a0:	4663      	mov	r3, ip
    42a2:	2102      	movs	r1, #2
    42a4:	9301      	str	r3, [sp, #4]
    42a6:	4660      	mov	r0, ip
    42a8:	4b1b      	ldr	r3, [pc, #108]	; (4318 <dcc_decode_service_request+0x12c>)
    42aa:	4798      	blx	r3
    42ac:	2800      	cmp	r0, #0
    42ae:	d01f      	beq.n	42f0 <dcc_decode_service_request+0x104>
                apdu_len_max - apdu_len, &tag_number, &len_value_type);
    42b0:	1b29      	subs	r1, r5, r4
            len = bacnet_tag_number_and_value_decode(&apdu[apdu_len],
    42b2:	ab06      	add	r3, sp, #24
    42b4:	2217      	movs	r2, #23
    42b6:	a802      	add	r0, sp, #8
    42b8:	4684      	mov	ip, r0
    42ba:	4462      	add	r2, ip
    42bc:	9801      	ldr	r0, [sp, #4]
    42be:	4e17      	ldr	r6, [pc, #92]	; (431c <dcc_decode_service_request+0x130>)
    42c0:	47b0      	blx	r6
            if (len > 0) {
    42c2:	2800      	cmp	r0, #0
    42c4:	dd17      	ble.n	42f6 <dcc_decode_service_request+0x10a>
                apdu_len += len;
    42c6:	1824      	adds	r4, r4, r0
                if ((unsigned)apdu_len < apdu_len_max) {
    42c8:	42a5      	cmp	r5, r4
    42ca:	d917      	bls.n	42fc <dcc_decode_service_request+0x110>
                    len = bacnet_character_string_decode(&apdu[apdu_len],
    42cc:	9b00      	ldr	r3, [sp, #0]
    42ce:	1918      	adds	r0, r3, r4
    42d0:	1b39      	subs	r1, r7, r4
    42d2:	b289      	uxth	r1, r1
    42d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    42d6:	9a06      	ldr	r2, [sp, #24]
    42d8:	4d11      	ldr	r5, [pc, #68]	; (4320 <dcc_decode_service_request+0x134>)
    42da:	47a8      	blx	r5
                    if (len > 0) {
    42dc:	2800      	cmp	r0, #0
    42de:	dd10      	ble.n	4302 <dcc_decode_service_request+0x116>
                        apdu_len += len;
    42e0:	1824      	adds	r4, r4, r0
    42e2:	e798      	b.n	4216 <dcc_decode_service_request+0x2a>
            return BACNET_STATUS_ERROR;
    42e4:	2401      	movs	r4, #1
    42e6:	4264      	negs	r4, r4
    42e8:	e795      	b.n	4216 <dcc_decode_service_request+0x2a>
                return BACNET_STATUS_ERROR;
    42ea:	2401      	movs	r4, #1
    42ec:	4264      	negs	r4, r4
    42ee:	e792      	b.n	4216 <dcc_decode_service_request+0x2a>
                return BACNET_STATUS_ERROR;
    42f0:	2401      	movs	r4, #1
    42f2:	4264      	negs	r4, r4
    42f4:	e78f      	b.n	4216 <dcc_decode_service_request+0x2a>
                return BACNET_STATUS_ERROR;
    42f6:	2401      	movs	r4, #1
    42f8:	4264      	negs	r4, r4
    42fa:	e78c      	b.n	4216 <dcc_decode_service_request+0x2a>
                    return BACNET_STATUS_ERROR;
    42fc:	2401      	movs	r4, #1
    42fe:	4264      	negs	r4, r4
    4300:	e789      	b.n	4216 <dcc_decode_service_request+0x2a>
                        return BACNET_STATUS_ERROR;
    4302:	2401      	movs	r4, #1
    4304:	4264      	negs	r4, r4
    4306:	e786      	b.n	4216 <dcc_decode_service_request+0x2a>
    4308:	0000345d 	.word	0x0000345d
    430c:	00003f75 	.word	0x00003f75
    4310:	0000ffff 	.word	0x0000ffff
    4314:	00003651 	.word	0x00003651
    4318:	00002efd 	.word	0x00002efd
    431c:	00002e51 	.word	0x00002e51
    4320:	00003321 	.word	0x00003321

00004324 <CRC_Calc_Header>:
/* Note: This function is copied directly from the BACnet standard. */
uint8_t CRC_Calc_Header(uint8_t dataValue, uint8_t crcValue)
{
    uint16_t crc;

    crc = crcValue ^ dataValue; /* XOR C7..C0 with D7..D0 */
    4324:	4048      	eors	r0, r1

    /* Exclusive OR the terms in the table (top down) */
    crc = crc ^ (crc << 1) ^ (crc << 2) ^ (crc << 3) ^ (crc << 4) ^ (crc << 5) ^
    4326:	0041      	lsls	r1, r0, #1
    4328:	4041      	eors	r1, r0
    432a:	0083      	lsls	r3, r0, #2
    432c:	4059      	eors	r1, r3
    432e:	00c3      	lsls	r3, r0, #3
    4330:	4059      	eors	r1, r3
    4332:	0103      	lsls	r3, r0, #4
    4334:	4059      	eors	r1, r3
    4336:	0143      	lsls	r3, r0, #5
    4338:	4059      	eors	r1, r3
        (crc << 6) ^ (crc << 7);
    433a:	0183      	lsls	r3, r0, #6
    crc = crc ^ (crc << 1) ^ (crc << 2) ^ (crc << 3) ^ (crc << 4) ^ (crc << 5) ^
    433c:	4059      	eors	r1, r3
        (crc << 6) ^ (crc << 7);
    433e:	01c0      	lsls	r0, r0, #7
    4340:	4041      	eors	r1, r0

    /* Combine bits shifted out left hand end */
    return (crc & 0xfe) ^ ((crc >> 8) & 1);
    4342:	2301      	movs	r3, #1
    4344:	0008      	movs	r0, r1
    4346:	4398      	bics	r0, r3
    4348:	b240      	sxtb	r0, r0
    434a:	0a09      	lsrs	r1, r1, #8
    434c:	4019      	ands	r1, r3
    434e:	4308      	orrs	r0, r1
    4350:	b2c0      	uxtb	r0, r0
}
    4352:	4770      	bx	lr

00004354 <CRC_Calc_Data>:
/* Note: This function is copied directly from the BACnet standard. */
uint16_t CRC_Calc_Data(uint8_t dataValue, uint16_t crcValue)
{
    uint16_t crcLow;

    crcLow = (crcValue & 0xff) ^ dataValue; /* XOR C7..C0 with D7..D0 */
    4354:	22ff      	movs	r2, #255	; 0xff
    4356:	400a      	ands	r2, r1
    4358:	4042      	eors	r2, r0
    435a:	b293      	uxth	r3, r2

    /* Exclusive OR the terms in the table (top down) */
    return (crcValue >> 8) ^ (crcLow << 8) ^ (crcLow << 3) ^ (crcLow << 12) ^
    435c:	0218      	lsls	r0, r3, #8
    435e:	0a09      	lsrs	r1, r1, #8
    4360:	4041      	eors	r1, r0
    4362:	b209      	sxth	r1, r1
    4364:	00d8      	lsls	r0, r3, #3
    4366:	4041      	eors	r1, r0
    4368:	0318      	lsls	r0, r3, #12
    436a:	4048      	eors	r0, r1
    436c:	b200      	sxth	r0, r0
    436e:	0919      	lsrs	r1, r3, #4
    4370:	4048      	eors	r0, r1
        (crcLow >> 4) ^ (crcLow & 0x0f) ^ ((crcLow & 0x0f) << 7);
    4372:	210f      	movs	r1, #15
    4374:	400a      	ands	r2, r1
    4376:	4050      	eors	r0, r2
    4378:	b200      	sxth	r0, r0
    437a:	01db      	lsls	r3, r3, #7
    437c:	22f0      	movs	r2, #240	; 0xf0
    437e:	00d2      	lsls	r2, r2, #3
    4380:	4013      	ands	r3, r2
    4382:	4058      	eors	r0, r3
    4384:	b280      	uxth	r0, r0
}
    4386:	4770      	bx	lr

00004388 <Analog_Input_Property_Lists>:
static const int Analog_Input_Properties_Proprietary[] = { -1 };

void Analog_Input_Property_Lists(
    const int **pRequired, const int **pOptional, const int **pProprietary)
{
    if (pRequired)
    4388:	2800      	cmp	r0, #0
    438a:	d001      	beq.n	4390 <Analog_Input_Property_Lists+0x8>
        *pRequired = Analog_Input_Properties_Required;
    438c:	4b05      	ldr	r3, [pc, #20]	; (43a4 <Analog_Input_Property_Lists+0x1c>)
    438e:	6003      	str	r3, [r0, #0]
    if (pOptional)
    4390:	2900      	cmp	r1, #0
    4392:	d001      	beq.n	4398 <Analog_Input_Property_Lists+0x10>
        *pOptional = Analog_Input_Properties_Optional;
    4394:	4b04      	ldr	r3, [pc, #16]	; (43a8 <Analog_Input_Property_Lists+0x20>)
    4396:	600b      	str	r3, [r1, #0]
    if (pProprietary)
    4398:	2a00      	cmp	r2, #0
    439a:	d001      	beq.n	43a0 <Analog_Input_Property_Lists+0x18>
        *pProprietary = Analog_Input_Properties_Proprietary;
    439c:	4b03      	ldr	r3, [pc, #12]	; (43ac <Analog_Input_Property_Lists+0x24>)
    439e:	6013      	str	r3, [r2, #0]

    return;
}
    43a0:	4770      	bx	lr
    43a2:	46c0      	nop			; (mov r8, r8)
    43a4:	0000e8cc 	.word	0x0000e8cc
    43a8:	0000e8bc 	.word	0x0000e8bc
    43ac:	0000e8c8 	.word	0x0000e8c8

000043b0 <Analog_Input_Count>:
 *
 * @return  Number of Analog Input objects
 */
unsigned Analog_Input_Count(void)
{
    return Analog_Input_Objects_Max;
    43b0:	4b01      	ldr	r3, [pc, #4]	; (43b8 <Analog_Input_Count+0x8>)
    43b2:	6818      	ldr	r0, [r3, #0]
}
    43b4:	4770      	bx	lr
    43b6:	46c0      	nop			; (mov r8, r8)
    43b8:	20000ae4 	.word	0x20000ae4

000043bc <Analog_Input_Index_To_Instance>:
 */
uint32_t Analog_Input_Index_To_Instance(unsigned index)
{
    uint32_t object_instance = UINT32_MAX;

    if (index < Analog_Input_Objects_Max) {
    43bc:	4b06      	ldr	r3, [pc, #24]	; (43d8 <Analog_Input_Index_To_Instance+0x1c>)
    43be:	681b      	ldr	r3, [r3, #0]
    43c0:	4283      	cmp	r3, r0
    43c2:	d802      	bhi.n	43ca <Analog_Input_Index_To_Instance+0xe>
    uint32_t object_instance = UINT32_MAX;
    43c4:	2001      	movs	r0, #1
    43c6:	4240      	negs	r0, r0
        object_instance = Object_List[index].object_id;
    }

    return object_instance;
}
    43c8:	4770      	bx	lr
        object_instance = Object_List[index].object_id;
    43ca:	00c3      	lsls	r3, r0, #3
    43cc:	1a18      	subs	r0, r3, r0
    43ce:	0083      	lsls	r3, r0, #2
    43d0:	4a02      	ldr	r2, [pc, #8]	; (43dc <Analog_Input_Index_To_Instance+0x20>)
    43d2:	5898      	ldr	r0, [r3, r2]
    43d4:	e7f8      	b.n	43c8 <Analog_Input_Index_To_Instance+0xc>
    43d6:	46c0      	nop			; (mov r8, r8)
    43d8:	20000ae4 	.word	0x20000ae4
    43dc:	20000030 	.word	0x20000030

000043e0 <Analog_Input_Init>:
/**
 * Initializes the Analog Input object data
 */
void Analog_Input_Init(void)
{
    unsigned index = 0;
    43e0:	2200      	movs	r2, #0

    while (Object_List[index].object_name) {
    43e2:	e000      	b.n	43e6 <Analog_Input_Init+0x6>
        index++;
    43e4:	3201      	adds	r2, #1
    while (Object_List[index].object_name) {
    43e6:	00d3      	lsls	r3, r2, #3
    43e8:	1a9b      	subs	r3, r3, r2
    43ea:	0099      	lsls	r1, r3, #2
    43ec:	4b03      	ldr	r3, [pc, #12]	; (43fc <Analog_Input_Init+0x1c>)
    43ee:	185b      	adds	r3, r3, r1
    43f0:	685b      	ldr	r3, [r3, #4]
    43f2:	2b00      	cmp	r3, #0
    43f4:	d1f6      	bne.n	43e4 <Analog_Input_Init+0x4>
    }
    Analog_Input_Objects_Max = index;
    43f6:	4b02      	ldr	r3, [pc, #8]	; (4400 <Analog_Input_Init+0x20>)
    43f8:	601a      	str	r2, [r3, #0]
}
    43fa:	4770      	bx	lr
    43fc:	20000030 	.word	0x20000030
    4400:	20000ae4 	.word	0x20000ae4

00004404 <Object_List_Element>:
{
    4404:	b510      	push	{r4, lr}
    4406:	0004      	movs	r4, r0
    while (Analog_Input_Objects_Max == 0) {
    4408:	e001      	b.n	440e <Object_List_Element+0xa>
        Analog_Input_Init();
    440a:	4b0c      	ldr	r3, [pc, #48]	; (443c <Object_List_Element+0x38>)
    440c:	4798      	blx	r3
    while (Analog_Input_Objects_Max == 0) {
    440e:	4b0c      	ldr	r3, [pc, #48]	; (4440 <Object_List_Element+0x3c>)
    4410:	6819      	ldr	r1, [r3, #0]
    4412:	2900      	cmp	r1, #0
    4414:	d0f9      	beq.n	440a <Object_List_Element+0x6>
    4416:	2300      	movs	r3, #0
    for (index = 0; index < Analog_Input_Objects_Max; index++) {
    4418:	428b      	cmp	r3, r1
    441a:	d20c      	bcs.n	4436 <Object_List_Element+0x32>
        if (Object_List[index].object_id == object_instance) {
    441c:	00da      	lsls	r2, r3, #3
    441e:	1ad2      	subs	r2, r2, r3
    4420:	0090      	lsls	r0, r2, #2
    4422:	4a08      	ldr	r2, [pc, #32]	; (4444 <Object_List_Element+0x40>)
    4424:	5882      	ldr	r2, [r0, r2]
    4426:	42a2      	cmp	r2, r4
    4428:	d001      	beq.n	442e <Object_List_Element+0x2a>
    for (index = 0; index < Analog_Input_Objects_Max; index++) {
    442a:	3301      	adds	r3, #1
    442c:	e7f4      	b.n	4418 <Object_List_Element+0x14>
            return &Object_List[index];
    442e:	0002      	movs	r2, r0
    4430:	4804      	ldr	r0, [pc, #16]	; (4444 <Object_List_Element+0x40>)
    4432:	1880      	adds	r0, r0, r2
    4434:	e000      	b.n	4438 <Object_List_Element+0x34>
    return NULL;
    4436:	2000      	movs	r0, #0
}
    4438:	bd10      	pop	{r4, pc}
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	000043e1 	.word	0x000043e1
    4440:	20000ae4 	.word	0x20000ae4
    4444:	20000030 	.word	0x20000030

00004448 <Analog_Input_Valid_Instance>:
{
    4448:	b510      	push	{r4, lr}
    if (Object_List_Element(object_instance)) {
    444a:	4b04      	ldr	r3, [pc, #16]	; (445c <Analog_Input_Valid_Instance+0x14>)
    444c:	4798      	blx	r3
    444e:	2800      	cmp	r0, #0
    4450:	d001      	beq.n	4456 <Analog_Input_Valid_Instance+0xe>
        return true;
    4452:	2001      	movs	r0, #1
}
    4454:	bd10      	pop	{r4, pc}
    return false;
    4456:	2000      	movs	r0, #0
    4458:	e7fc      	b.n	4454 <Analog_Input_Valid_Instance+0xc>
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	00004405 	.word	0x00004405

00004460 <Analog_Input_Present_Value>:
{
    4460:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    4462:	4b04      	ldr	r3, [pc, #16]	; (4474 <Analog_Input_Present_Value+0x14>)
    4464:	4798      	blx	r3
    if (pObject) {
    4466:	2800      	cmp	r0, #0
    4468:	d001      	beq.n	446e <Analog_Input_Present_Value+0xe>
        value = pObject->value;
    446a:	6980      	ldr	r0, [r0, #24]
}
    446c:	bd10      	pop	{r4, pc}
    float value = 0;
    446e:	2000      	movs	r0, #0
    return value;
    4470:	e7fc      	b.n	446c <Analog_Input_Present_Value+0xc>
    4472:	46c0      	nop			; (mov r8, r8)
    4474:	00004405 	.word	0x00004405

00004478 <Analog_Input_Present_Value_Set>:
{
    4478:	b510      	push	{r4, lr}
    447a:	1c0c      	adds	r4, r1, #0
    pObject = Object_List_Element(object_instance);
    447c:	4b04      	ldr	r3, [pc, #16]	; (4490 <Analog_Input_Present_Value_Set+0x18>)
    447e:	4798      	blx	r3
    if (pObject) {
    4480:	2800      	cmp	r0, #0
    4482:	d003      	beq.n	448c <Analog_Input_Present_Value_Set+0x14>
        if (!pObject->out_of_service) {
    4484:	7d03      	ldrb	r3, [r0, #20]
    4486:	07db      	lsls	r3, r3, #31
    4488:	d400      	bmi.n	448c <Analog_Input_Present_Value_Set+0x14>
            pObject->value = value;
    448a:	6184      	str	r4, [r0, #24]
}
    448c:	bd10      	pop	{r4, pc}
    448e:	46c0      	nop			; (mov r8, r8)
    4490:	00004405 	.word	0x00004405

00004494 <Analog_Input_Object_Name>:
{
    4494:	b510      	push	{r4, lr}
    4496:	000c      	movs	r4, r1
    pObject = Object_List_Element(object_instance);
    4498:	4b05      	ldr	r3, [pc, #20]	; (44b0 <Analog_Input_Object_Name+0x1c>)
    449a:	4798      	blx	r3
    if (pObject) {
    449c:	2800      	cmp	r0, #0
    449e:	d004      	beq.n	44aa <Analog_Input_Object_Name+0x16>
        status = characterstring_init_ansi(object_name, pObject->object_name);
    44a0:	6841      	ldr	r1, [r0, #4]
    44a2:	0020      	movs	r0, r4
    44a4:	4b03      	ldr	r3, [pc, #12]	; (44b4 <Analog_Input_Object_Name+0x20>)
    44a6:	4798      	blx	r3
}
    44a8:	bd10      	pop	{r4, pc}
    bool status = false;
    44aa:	2000      	movs	r0, #0
    44ac:	e7fc      	b.n	44a8 <Analog_Input_Object_Name+0x14>
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	00004405 	.word	0x00004405
    44b4:	00003f75 	.word	0x00003f75

000044b8 <Analog_Input_Units>:
{
    44b8:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    44ba:	4b04      	ldr	r3, [pc, #16]	; (44cc <Analog_Input_Units+0x14>)
    44bc:	4798      	blx	r3
    if (pObject) {
    44be:	2800      	cmp	r0, #0
    44c0:	d001      	beq.n	44c6 <Analog_Input_Units+0xe>
        units = pObject->units;
    44c2:	8900      	ldrh	r0, [r0, #8]
}
    44c4:	bd10      	pop	{r4, pc}
    uint16_t units = UNITS_NO_UNITS;
    44c6:	205f      	movs	r0, #95	; 0x5f
    44c8:	e7fc      	b.n	44c4 <Analog_Input_Units+0xc>
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	00004405 	.word	0x00004405

000044d0 <Analog_Input_Out_Of_Service>:
{
    44d0:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    44d2:	4b05      	ldr	r3, [pc, #20]	; (44e8 <Analog_Input_Out_Of_Service+0x18>)
    44d4:	4798      	blx	r3
    if (pObject) {
    44d6:	2800      	cmp	r0, #0
    44d8:	d003      	beq.n	44e2 <Analog_Input_Out_Of_Service+0x12>
        value = pObject->out_of_service;
    44da:	7d00      	ldrb	r0, [r0, #20]
    44dc:	07c0      	lsls	r0, r0, #31
    44de:	0fc0      	lsrs	r0, r0, #31
}
    44e0:	bd10      	pop	{r4, pc}
    bool value = false;
    44e2:	2000      	movs	r0, #0
    44e4:	e7fc      	b.n	44e0 <Analog_Input_Out_Of_Service+0x10>
    44e6:	46c0      	nop			; (mov r8, r8)
    44e8:	00004405 	.word	0x00004405

000044ec <Analog_Input_Out_Of_Service_Set>:
{
    44ec:	b510      	push	{r4, lr}
    44ee:	000c      	movs	r4, r1
    pObject = Object_List_Element(object_instance);
    44f0:	4b05      	ldr	r3, [pc, #20]	; (4508 <Analog_Input_Out_Of_Service_Set+0x1c>)
    44f2:	4798      	blx	r3
    if (pObject) {
    44f4:	2800      	cmp	r0, #0
    44f6:	d006      	beq.n	4506 <Analog_Input_Out_Of_Service_Set+0x1a>
        pObject->out_of_service = value;
    44f8:	2101      	movs	r1, #1
    44fa:	400c      	ands	r4, r1
    44fc:	7d01      	ldrb	r1, [r0, #20]
    44fe:	2201      	movs	r2, #1
    4500:	4391      	bics	r1, r2
    4502:	4321      	orrs	r1, r4
    4504:	7501      	strb	r1, [r0, #20]
}
    4506:	bd10      	pop	{r4, pc}
    4508:	00004405 	.word	0x00004405

0000450c <Analog_Input_Min_Pres_Value>:
{
    450c:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    450e:	4b04      	ldr	r3, [pc, #16]	; (4520 <Analog_Input_Min_Pres_Value+0x14>)
    4510:	4798      	blx	r3
    if (pObject) {
    4512:	2800      	cmp	r0, #0
    4514:	d001      	beq.n	451a <Analog_Input_Min_Pres_Value+0xe>
        value = pObject->min_value;
    4516:	68c0      	ldr	r0, [r0, #12]
}
    4518:	bd10      	pop	{r4, pc}
    float value = 0.0;
    451a:	2000      	movs	r0, #0
    return value;
    451c:	e7fc      	b.n	4518 <Analog_Input_Min_Pres_Value+0xc>
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	00004405 	.word	0x00004405

00004524 <Analog_Input_Max_Pres_Value>:
{
    4524:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    4526:	4b04      	ldr	r3, [pc, #16]	; (4538 <Analog_Input_Max_Pres_Value+0x14>)
    4528:	4798      	blx	r3
    if (pObject) {
    452a:	2800      	cmp	r0, #0
    452c:	d001      	beq.n	4532 <Analog_Input_Max_Pres_Value+0xe>
        value = pObject->max_value;
    452e:	6900      	ldr	r0, [r0, #16]
}
    4530:	bd10      	pop	{r4, pc}
    float value = 0.0;
    4532:	2000      	movs	r0, #0
    return value;
    4534:	e7fc      	b.n	4530 <Analog_Input_Max_Pres_Value+0xc>
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	00004405 	.word	0x00004405

0000453c <Analog_Input_Read_Property>:
{
    453c:	b570      	push	{r4, r5, r6, lr}
    453e:	b0fc      	sub	sp, #496	; 0x1f0
    4540:	0004      	movs	r4, r0
    BACNET_CHARACTER_STRING char_string = { 0 };
    4542:	22f0      	movs	r2, #240	; 0xf0
    4544:	0052      	lsls	r2, r2, #1
    4546:	2100      	movs	r1, #0
    4548:	4668      	mov	r0, sp
    454a:	4b42      	ldr	r3, [pc, #264]	; (4654 <Analog_Input_Read_Property+0x118>)
    454c:	4798      	blx	r3
    if ((rpdata->application_data == NULL)
    454e:	6925      	ldr	r5, [r4, #16]
    4550:	2d00      	cmp	r5, #0
    4552:	d100      	bne.n	4556 <Analog_Input_Read_Property+0x1a>
    4554:	e07b      	b.n	464e <Analog_Input_Read_Property+0x112>
        || (rpdata->application_data_len == 0)) {
    4556:	6960      	ldr	r0, [r4, #20]
    4558:	2800      	cmp	r0, #0
    455a:	d011      	beq.n	4580 <Analog_Input_Read_Property+0x44>
    switch (rpdata->object_property) {
    455c:	68a3      	ldr	r3, [r4, #8]
    455e:	3b24      	subs	r3, #36	; 0x24
    4560:	2b51      	cmp	r3, #81	; 0x51
    4562:	d866      	bhi.n	4632 <Analog_Input_Read_Property+0xf6>
    4564:	009b      	lsls	r3, r3, #2
    4566:	4a3c      	ldr	r2, [pc, #240]	; (4658 <Analog_Input_Read_Property+0x11c>)
    4568:	58d3      	ldr	r3, [r2, r3]
    456a:	469f      	mov	pc, r3
            apdu_len = encode_application_object_id(
    456c:	8821      	ldrh	r1, [r4, #0]
    456e:	6862      	ldr	r2, [r4, #4]
    4570:	0028      	movs	r0, r5
    4572:	4b3a      	ldr	r3, [pc, #232]	; (465c <Analog_Input_Read_Property+0x120>)
    4574:	4798      	blx	r3
    if ((apdu_len >= 0) && (rpdata->array_index != BACNET_ARRAY_ALL)) {
    4576:	2800      	cmp	r0, #0
    4578:	db02      	blt.n	4580 <Analog_Input_Read_Property+0x44>
    457a:	68e3      	ldr	r3, [r4, #12]
    457c:	3301      	adds	r3, #1
    457e:	d15f      	bne.n	4640 <Analog_Input_Read_Property+0x104>
}
    4580:	b07c      	add	sp, #496	; 0x1f0
    4582:	bd70      	pop	{r4, r5, r6, pc}
            Analog_Input_Object_Name(rpdata->object_instance, &char_string);
    4584:	4669      	mov	r1, sp
    4586:	6860      	ldr	r0, [r4, #4]
    4588:	4b35      	ldr	r3, [pc, #212]	; (4660 <Analog_Input_Read_Property+0x124>)
    458a:	4798      	blx	r3
                = encode_application_character_string(&apdu[0], &char_string);
    458c:	4669      	mov	r1, sp
    458e:	0028      	movs	r0, r5
    4590:	4b34      	ldr	r3, [pc, #208]	; (4664 <Analog_Input_Read_Property+0x128>)
    4592:	4798      	blx	r3
            break;
    4594:	e7ef      	b.n	4576 <Analog_Input_Read_Property+0x3a>
                = encode_application_enumerated(&apdu[0], rpdata->object_type);
    4596:	8821      	ldrh	r1, [r4, #0]
    4598:	0028      	movs	r0, r5
    459a:	4b33      	ldr	r3, [pc, #204]	; (4668 <Analog_Input_Read_Property+0x12c>)
    459c:	4798      	blx	r3
            break;
    459e:	e7ea      	b.n	4576 <Analog_Input_Read_Property+0x3a>
            real_value = Analog_Input_Present_Value(rpdata->object_instance);
    45a0:	6860      	ldr	r0, [r4, #4]
    45a2:	4b32      	ldr	r3, [pc, #200]	; (466c <Analog_Input_Read_Property+0x130>)
    45a4:	4798      	blx	r3
    45a6:	1c01      	adds	r1, r0, #0
            apdu_len = encode_application_real(&apdu[0], real_value);
    45a8:	0028      	movs	r0, r5
    45aa:	4b31      	ldr	r3, [pc, #196]	; (4670 <Analog_Input_Read_Property+0x134>)
    45ac:	4798      	blx	r3
            break;
    45ae:	e7e2      	b.n	4576 <Analog_Input_Read_Property+0x3a>
            apdu_len = encode_application_real(
    45b0:	6860      	ldr	r0, [r4, #4]
    45b2:	4b30      	ldr	r3, [pc, #192]	; (4674 <Analog_Input_Read_Property+0x138>)
    45b4:	4798      	blx	r3
    45b6:	1c01      	adds	r1, r0, #0
    45b8:	0028      	movs	r0, r5
    45ba:	4b2d      	ldr	r3, [pc, #180]	; (4670 <Analog_Input_Read_Property+0x134>)
    45bc:	4798      	blx	r3
            break;
    45be:	e7da      	b.n	4576 <Analog_Input_Read_Property+0x3a>
            apdu_len = encode_application_real(
    45c0:	6860      	ldr	r0, [r4, #4]
    45c2:	4b2d      	ldr	r3, [pc, #180]	; (4678 <Analog_Input_Read_Property+0x13c>)
    45c4:	4798      	blx	r3
    45c6:	1c01      	adds	r1, r0, #0
    45c8:	0028      	movs	r0, r5
    45ca:	4b29      	ldr	r3, [pc, #164]	; (4670 <Analog_Input_Read_Property+0x134>)
    45cc:	4798      	blx	r3
            break;
    45ce:	e7d2      	b.n	4576 <Analog_Input_Read_Property+0x3a>
            bitstring_init(&bit_string);
    45d0:	a878      	add	r0, sp, #480	; 0x1e0
    45d2:	4b2a      	ldr	r3, [pc, #168]	; (467c <Analog_Input_Read_Property+0x140>)
    45d4:	4798      	blx	r3
            bitstring_set_bit(&bit_string, STATUS_FLAG_IN_ALARM, false);
    45d6:	2200      	movs	r2, #0
    45d8:	2100      	movs	r1, #0
    45da:	a878      	add	r0, sp, #480	; 0x1e0
    45dc:	4e28      	ldr	r6, [pc, #160]	; (4680 <Analog_Input_Read_Property+0x144>)
    45de:	47b0      	blx	r6
            bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, false);
    45e0:	2200      	movs	r2, #0
    45e2:	2101      	movs	r1, #1
    45e4:	a878      	add	r0, sp, #480	; 0x1e0
    45e6:	47b0      	blx	r6
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
    45e8:	2200      	movs	r2, #0
    45ea:	2102      	movs	r1, #2
    45ec:	a878      	add	r0, sp, #480	; 0x1e0
    45ee:	47b0      	blx	r6
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE,
    45f0:	6860      	ldr	r0, [r4, #4]
    45f2:	4b24      	ldr	r3, [pc, #144]	; (4684 <Analog_Input_Read_Property+0x148>)
    45f4:	4798      	blx	r3
    45f6:	0002      	movs	r2, r0
    45f8:	2103      	movs	r1, #3
    45fa:	a878      	add	r0, sp, #480	; 0x1e0
    45fc:	47b0      	blx	r6
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    45fe:	a978      	add	r1, sp, #480	; 0x1e0
    4600:	0028      	movs	r0, r5
    4602:	4b21      	ldr	r3, [pc, #132]	; (4688 <Analog_Input_Read_Property+0x14c>)
    4604:	4798      	blx	r3
            break;
    4606:	e7b6      	b.n	4576 <Analog_Input_Read_Property+0x3a>
                = encode_application_enumerated(&apdu[0], EVENT_STATE_NORMAL);
    4608:	2100      	movs	r1, #0
    460a:	0028      	movs	r0, r5
    460c:	4b16      	ldr	r3, [pc, #88]	; (4668 <Analog_Input_Read_Property+0x12c>)
    460e:	4798      	blx	r3
            break;
    4610:	e7b1      	b.n	4576 <Analog_Input_Read_Property+0x3a>
            apdu_len = encode_application_boolean(&apdu[0],
    4612:	6860      	ldr	r0, [r4, #4]
    4614:	4b1b      	ldr	r3, [pc, #108]	; (4684 <Analog_Input_Read_Property+0x148>)
    4616:	4798      	blx	r3
    4618:	0001      	movs	r1, r0
    461a:	0028      	movs	r0, r5
    461c:	4b1b      	ldr	r3, [pc, #108]	; (468c <Analog_Input_Read_Property+0x150>)
    461e:	4798      	blx	r3
            break;
    4620:	e7a9      	b.n	4576 <Analog_Input_Read_Property+0x3a>
            units = Analog_Input_Units(rpdata->object_instance);
    4622:	6860      	ldr	r0, [r4, #4]
    4624:	4b1a      	ldr	r3, [pc, #104]	; (4690 <Analog_Input_Read_Property+0x154>)
    4626:	4798      	blx	r3
    4628:	0001      	movs	r1, r0
            apdu_len = encode_application_enumerated(&apdu[0], units);
    462a:	0028      	movs	r0, r5
    462c:	4b0e      	ldr	r3, [pc, #56]	; (4668 <Analog_Input_Read_Property+0x12c>)
    462e:	4798      	blx	r3
            break;
    4630:	e7a1      	b.n	4576 <Analog_Input_Read_Property+0x3a>
            rpdata->error_class = ERROR_CLASS_PROPERTY;
    4632:	2302      	movs	r3, #2
    4634:	8323      	strh	r3, [r4, #24]
            rpdata->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    4636:	331e      	adds	r3, #30
    4638:	8363      	strh	r3, [r4, #26]
            apdu_len = BACNET_STATUS_ERROR;
    463a:	2001      	movs	r0, #1
    463c:	4240      	negs	r0, r0
            break;
    463e:	e79a      	b.n	4576 <Analog_Input_Read_Property+0x3a>
        rpdata->error_class = ERROR_CLASS_PROPERTY;
    4640:	2302      	movs	r3, #2
    4642:	8323      	strh	r3, [r4, #24]
        rpdata->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    4644:	3330      	adds	r3, #48	; 0x30
    4646:	8363      	strh	r3, [r4, #26]
        apdu_len = BACNET_STATUS_ERROR;
    4648:	2001      	movs	r0, #1
    464a:	4240      	negs	r0, r0
    464c:	e798      	b.n	4580 <Analog_Input_Read_Property+0x44>
        return 0;
    464e:	2000      	movs	r0, #0
    4650:	e796      	b.n	4580 <Analog_Input_Read_Property+0x44>
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	0000db1f 	.word	0x0000db1f
    4658:	0000e60c 	.word	0x0000e60c
    465c:	0000316d 	.word	0x0000316d
    4660:	00004495 	.word	0x00004495
    4664:	000032dd 	.word	0x000032dd
    4668:	000036f1 	.word	0x000036f1
    466c:	00004461 	.word	0x00004461
    4670:	000037d9 	.word	0x000037d9
    4674:	0000450d 	.word	0x0000450d
    4678:	00004525 	.word	0x00004525
    467c:	00003e71 	.word	0x00003e71
    4680:	00003e85 	.word	0x00003e85
    4684:	000044d1 	.word	0x000044d1
    4688:	000030b9 	.word	0x000030b9
    468c:	00002fad 	.word	0x00002fad
    4690:	000044b9 	.word	0x000044b9

00004694 <Analog_Input_Present_Value_Write>:
{
    4694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4696:	1c0d      	adds	r5, r1, #0
    4698:	0017      	movs	r7, r2
    469a:	001e      	movs	r6, r3
    pObject = Object_List_Element(object_instance);
    469c:	4b11      	ldr	r3, [pc, #68]	; (46e4 <Analog_Input_Present_Value_Write+0x50>)
    469e:	4798      	blx	r3
    46a0:	1e04      	subs	r4, r0, #0
    if (pObject) {
    46a2:	d01d      	beq.n	46e0 <Analog_Input_Present_Value_Write+0x4c>
        if (pObject->out_of_service) {
    46a4:	7d03      	ldrb	r3, [r0, #20]
    46a6:	07db      	lsls	r3, r3, #31
    46a8:	d514      	bpl.n	46d4 <Analog_Input_Present_Value_Write+0x40>
            if ((value >= pObject->min_value)
    46aa:	1c29      	adds	r1, r5, #0
    46ac:	68c0      	ldr	r0, [r0, #12]
    46ae:	4b0e      	ldr	r3, [pc, #56]	; (46e8 <Analog_Input_Present_Value_Write+0x54>)
    46b0:	4798      	blx	r3
    46b2:	2800      	cmp	r0, #0
    46b4:	d008      	beq.n	46c8 <Analog_Input_Present_Value_Write+0x34>
                && (value <= pObject->max_value)) {
    46b6:	6921      	ldr	r1, [r4, #16]
    46b8:	1c28      	adds	r0, r5, #0
    46ba:	4b0b      	ldr	r3, [pc, #44]	; (46e8 <Analog_Input_Present_Value_Write+0x54>)
    46bc:	4798      	blx	r3
    46be:	2800      	cmp	r0, #0
    46c0:	d002      	beq.n	46c8 <Analog_Input_Present_Value_Write+0x34>
                pObject->value = value;
    46c2:	61a5      	str	r5, [r4, #24]
                status = true;
    46c4:	2001      	movs	r0, #1
    46c6:	e00a      	b.n	46de <Analog_Input_Present_Value_Write+0x4a>
                *error_class = ERROR_CLASS_PROPERTY;
    46c8:	2302      	movs	r3, #2
    46ca:	803b      	strh	r3, [r7, #0]
                *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    46cc:	3323      	adds	r3, #35	; 0x23
    46ce:	8033      	strh	r3, [r6, #0]
    bool status = false;
    46d0:	2000      	movs	r0, #0
    46d2:	e004      	b.n	46de <Analog_Input_Present_Value_Write+0x4a>
            *error_class = ERROR_CLASS_PROPERTY;
    46d4:	2302      	movs	r3, #2
    46d6:	803b      	strh	r3, [r7, #0]
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    46d8:	3326      	adds	r3, #38	; 0x26
    46da:	8033      	strh	r3, [r6, #0]
    bool status = false;
    46dc:	2000      	movs	r0, #0
}
    46de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool status = false;
    46e0:	2000      	movs	r0, #0
    46e2:	e7fc      	b.n	46de <Analog_Input_Present_Value_Write+0x4a>
    46e4:	00004405 	.word	0x00004405
    46e8:	0000cf51 	.word	0x0000cf51

000046ec <Analog_Input_Write_Property>:
{
    46ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ee:	b0fd      	sub	sp, #500	; 0x1f4
    46f0:	0004      	movs	r4, r0
        wp_data->application_data, wp_data->application_data_len, &value);
    46f2:	3010      	adds	r0, #16
    46f4:	23f8      	movs	r3, #248	; 0xf8
    46f6:	005b      	lsls	r3, r3, #1
    46f8:	58e1      	ldr	r1, [r4, r3]
    len = bacapp_decode_application_data(
    46fa:	466a      	mov	r2, sp
    46fc:	4b27      	ldr	r3, [pc, #156]	; (479c <Analog_Input_Write_Property+0xb0>)
    46fe:	4798      	blx	r3
    if (len < 0) {
    4700:	2800      	cmp	r0, #0
    4702:	db07      	blt.n	4714 <Analog_Input_Write_Property+0x28>
    switch (wp_data->object_property) {
    4704:	68a3      	ldr	r3, [r4, #8]
    4706:	3b1c      	subs	r3, #28
    4708:	2b59      	cmp	r3, #89	; 0x59
    470a:	d83e      	bhi.n	478a <Analog_Input_Write_Property+0x9e>
    470c:	009b      	lsls	r3, r3, #2
    470e:	4a24      	ldr	r2, [pc, #144]	; (47a0 <Analog_Input_Write_Property+0xb4>)
    4710:	58d3      	ldr	r3, [r2, r3]
    4712:	469f      	mov	pc, r3
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    4714:	2202      	movs	r2, #2
    4716:	23fb      	movs	r3, #251	; 0xfb
    4718:	005b      	lsls	r3, r3, #1
    471a:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    471c:	3223      	adds	r2, #35	; 0x23
    471e:	3302      	adds	r3, #2
    4720:	52e2      	strh	r2, [r4, r3]
        return false;
    4722:	2500      	movs	r5, #0
    4724:	e02e      	b.n	4784 <Analog_Input_Write_Property+0x98>
            status = WPValidateArgType(&value, BACNET_APPLICATION_TAG_REAL,
    4726:	0026      	movs	r6, r4
    4728:	36f7      	adds	r6, #247	; 0xf7
    472a:	36ff      	adds	r6, #255	; 0xff
    472c:	0027      	movs	r7, r4
    472e:	37f9      	adds	r7, #249	; 0xf9
    4730:	37ff      	adds	r7, #255	; 0xff
    4732:	003b      	movs	r3, r7
    4734:	0032      	movs	r2, r6
    4736:	2104      	movs	r1, #4
    4738:	4668      	mov	r0, sp
    473a:	4d1a      	ldr	r5, [pc, #104]	; (47a4 <Analog_Input_Write_Property+0xb8>)
    473c:	47a8      	blx	r5
    473e:	1e05      	subs	r5, r0, #0
            if (status) {
    4740:	d020      	beq.n	4784 <Analog_Input_Write_Property+0x98>
                Analog_Input_Present_Value_Write(
    4742:	6820      	ldr	r0, [r4, #0]
    4744:	003b      	movs	r3, r7
    4746:	0032      	movs	r2, r6
    4748:	9902      	ldr	r1, [sp, #8]
    474a:	4c17      	ldr	r4, [pc, #92]	; (47a8 <Analog_Input_Write_Property+0xbc>)
    474c:	47a0      	blx	r4
    474e:	e019      	b.n	4784 <Analog_Input_Write_Property+0x98>
            status = WPValidateArgType(&value, BACNET_APPLICATION_TAG_BOOLEAN,
    4750:	0023      	movs	r3, r4
    4752:	33f9      	adds	r3, #249	; 0xf9
    4754:	33ff      	adds	r3, #255	; 0xff
    4756:	0022      	movs	r2, r4
    4758:	32f7      	adds	r2, #247	; 0xf7
    475a:	32ff      	adds	r2, #255	; 0xff
    475c:	2101      	movs	r1, #1
    475e:	4668      	mov	r0, sp
    4760:	4d10      	ldr	r5, [pc, #64]	; (47a4 <Analog_Input_Write_Property+0xb8>)
    4762:	47a8      	blx	r5
    4764:	1e05      	subs	r5, r0, #0
            if (status) {
    4766:	d00d      	beq.n	4784 <Analog_Input_Write_Property+0x98>
                Analog_Input_Out_Of_Service_Set(
    4768:	466b      	mov	r3, sp
    476a:	7a19      	ldrb	r1, [r3, #8]
    476c:	6820      	ldr	r0, [r4, #0]
    476e:	4b0f      	ldr	r3, [pc, #60]	; (47ac <Analog_Input_Write_Property+0xc0>)
    4770:	4798      	blx	r3
    4772:	e007      	b.n	4784 <Analog_Input_Write_Property+0x98>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    4774:	2202      	movs	r2, #2
    4776:	23fb      	movs	r3, #251	; 0xfb
    4778:	005b      	lsls	r3, r3, #1
    477a:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    477c:	3226      	adds	r2, #38	; 0x26
    477e:	3302      	adds	r3, #2
    4780:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value */
    4782:	2500      	movs	r5, #0
}
    4784:	0028      	movs	r0, r5
    4786:	b07d      	add	sp, #500	; 0x1f4
    4788:	bdf0      	pop	{r4, r5, r6, r7, pc}
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    478a:	2202      	movs	r2, #2
    478c:	23fb      	movs	r3, #251	; 0xfb
    478e:	005b      	lsls	r3, r3, #1
    4790:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    4792:	321e      	adds	r2, #30
    4794:	3302      	adds	r3, #2
    4796:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value */
    4798:	2500      	movs	r5, #0
            break;
    479a:	e7f3      	b.n	4784 <Analog_Input_Write_Property+0x98>
    479c:	00002871 	.word	0x00002871
    47a0:	0000e754 	.word	0x0000e754
    47a4:	00002239 	.word	0x00002239
    47a8:	00004695 	.word	0x00004695
    47ac:	000044ed 	.word	0x000044ed

000047b0 <Analog_Value_Property_Lists>:
static const int Analog_Value_Properties_Proprietary[] = { -1 };

void Analog_Value_Property_Lists(
    const int **pRequired, const int **pOptional, const int **pProprietary)
{
    if (pRequired)
    47b0:	2800      	cmp	r0, #0
    47b2:	d001      	beq.n	47b8 <Analog_Value_Property_Lists+0x8>
        *pRequired = Analog_Value_Properties_Required;
    47b4:	4b05      	ldr	r3, [pc, #20]	; (47cc <Analog_Value_Property_Lists+0x1c>)
    47b6:	6003      	str	r3, [r0, #0]
    if (pOptional)
    47b8:	2900      	cmp	r1, #0
    47ba:	d001      	beq.n	47c0 <Analog_Value_Property_Lists+0x10>
        *pOptional = Analog_Value_Properties_Optional;
    47bc:	4b04      	ldr	r3, [pc, #16]	; (47d0 <Analog_Value_Property_Lists+0x20>)
    47be:	600b      	str	r3, [r1, #0]
    if (pProprietary)
    47c0:	2a00      	cmp	r2, #0
    47c2:	d001      	beq.n	47c8 <Analog_Value_Property_Lists+0x18>
        *pProprietary = Analog_Value_Properties_Proprietary;
    47c4:	4b03      	ldr	r3, [pc, #12]	; (47d4 <Analog_Value_Property_Lists+0x24>)
    47c6:	6013      	str	r3, [r2, #0]

    return;
}
    47c8:	4770      	bx	lr
    47ca:	46c0      	nop			; (mov r8, r8)
    47cc:	0000ec00 	.word	0x0000ec00
    47d0:	0000ebf0 	.word	0x0000ebf0
    47d4:	0000ebfc 	.word	0x0000ebfc

000047d8 <Analog_Value_Count>:
 *
 * @return  Number of Analog Value objects
 */
unsigned Analog_Value_Count(void)
{
    return Analog_Value_Objects_Max;
    47d8:	4b01      	ldr	r3, [pc, #4]	; (47e0 <Analog_Value_Count+0x8>)
    47da:	6818      	ldr	r0, [r3, #0]
}
    47dc:	4770      	bx	lr
    47de:	46c0      	nop			; (mov r8, r8)
    47e0:	20000ae8 	.word	0x20000ae8

000047e4 <Analog_Value_Index_To_Instance>:
 */
uint32_t Analog_Value_Index_To_Instance(unsigned index)
{
    uint32_t object_instance = UINT32_MAX;

    if (index < Analog_Value_Objects_Max) {
    47e4:	4b06      	ldr	r3, [pc, #24]	; (4800 <Analog_Value_Index_To_Instance+0x1c>)
    47e6:	681b      	ldr	r3, [r3, #0]
    47e8:	4283      	cmp	r3, r0
    47ea:	d802      	bhi.n	47f2 <Analog_Value_Index_To_Instance+0xe>
    uint32_t object_instance = UINT32_MAX;
    47ec:	2001      	movs	r0, #1
    47ee:	4240      	negs	r0, r0
        object_instance = Object_List[index].object_id;
    }

    return object_instance;
}
    47f0:	4770      	bx	lr
        object_instance = Object_List[index].object_id;
    47f2:	00c3      	lsls	r3, r0, #3
    47f4:	1a18      	subs	r0, r3, r0
    47f6:	0083      	lsls	r3, r0, #2
    47f8:	4a02      	ldr	r2, [pc, #8]	; (4804 <Analog_Value_Index_To_Instance+0x20>)
    47fa:	5898      	ldr	r0, [r3, r2]
    47fc:	e7f8      	b.n	47f0 <Analog_Value_Index_To_Instance+0xc>
    47fe:	46c0      	nop			; (mov r8, r8)
    4800:	20000ae8 	.word	0x20000ae8
    4804:	200000bc 	.word	0x200000bc

00004808 <Analog_Value_Init>:
/**
 * Initializes the Analog Value object data
 */
void Analog_Value_Init(void)
{
    unsigned index = 0;
    4808:	2200      	movs	r2, #0

    while (Object_List[index].object_name) {
    480a:	e000      	b.n	480e <Analog_Value_Init+0x6>
        index++;
    480c:	3201      	adds	r2, #1
    while (Object_List[index].object_name) {
    480e:	00d3      	lsls	r3, r2, #3
    4810:	1a9b      	subs	r3, r3, r2
    4812:	0099      	lsls	r1, r3, #2
    4814:	4b03      	ldr	r3, [pc, #12]	; (4824 <Analog_Value_Init+0x1c>)
    4816:	185b      	adds	r3, r3, r1
    4818:	685b      	ldr	r3, [r3, #4]
    481a:	2b00      	cmp	r3, #0
    481c:	d1f6      	bne.n	480c <Analog_Value_Init+0x4>
    }
    Analog_Value_Objects_Max = index;
    481e:	4b02      	ldr	r3, [pc, #8]	; (4828 <Analog_Value_Init+0x20>)
    4820:	601a      	str	r2, [r3, #0]
}
    4822:	4770      	bx	lr
    4824:	200000bc 	.word	0x200000bc
    4828:	20000ae8 	.word	0x20000ae8

0000482c <Object_List_Element>:
{
    482c:	b510      	push	{r4, lr}
    482e:	0004      	movs	r4, r0
    while (Analog_Value_Objects_Max == 0) {
    4830:	e001      	b.n	4836 <Object_List_Element+0xa>
        Analog_Value_Init();
    4832:	4b0c      	ldr	r3, [pc, #48]	; (4864 <Object_List_Element+0x38>)
    4834:	4798      	blx	r3
    while (Analog_Value_Objects_Max == 0) {
    4836:	4b0c      	ldr	r3, [pc, #48]	; (4868 <Object_List_Element+0x3c>)
    4838:	6819      	ldr	r1, [r3, #0]
    483a:	2900      	cmp	r1, #0
    483c:	d0f9      	beq.n	4832 <Object_List_Element+0x6>
    483e:	2300      	movs	r3, #0
    for (index = 0; index < Analog_Value_Objects_Max; index++) {
    4840:	428b      	cmp	r3, r1
    4842:	d20c      	bcs.n	485e <Object_List_Element+0x32>
        if (Object_List[index].object_id == object_instance) {
    4844:	00da      	lsls	r2, r3, #3
    4846:	1ad2      	subs	r2, r2, r3
    4848:	0090      	lsls	r0, r2, #2
    484a:	4a08      	ldr	r2, [pc, #32]	; (486c <Object_List_Element+0x40>)
    484c:	5882      	ldr	r2, [r0, r2]
    484e:	42a2      	cmp	r2, r4
    4850:	d001      	beq.n	4856 <Object_List_Element+0x2a>
    for (index = 0; index < Analog_Value_Objects_Max; index++) {
    4852:	3301      	adds	r3, #1
    4854:	e7f4      	b.n	4840 <Object_List_Element+0x14>
            return &Object_List[index];
    4856:	0002      	movs	r2, r0
    4858:	4804      	ldr	r0, [pc, #16]	; (486c <Object_List_Element+0x40>)
    485a:	1880      	adds	r0, r0, r2
    485c:	e000      	b.n	4860 <Object_List_Element+0x34>
    return NULL;
    485e:	2000      	movs	r0, #0
}
    4860:	bd10      	pop	{r4, pc}
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	00004809 	.word	0x00004809
    4868:	20000ae8 	.word	0x20000ae8
    486c:	200000bc 	.word	0x200000bc

00004870 <Analog_Value_Valid_Instance>:
{
    4870:	b510      	push	{r4, lr}
    if (Object_List_Element(object_instance)) {
    4872:	4b04      	ldr	r3, [pc, #16]	; (4884 <Analog_Value_Valid_Instance+0x14>)
    4874:	4798      	blx	r3
    4876:	2800      	cmp	r0, #0
    4878:	d001      	beq.n	487e <Analog_Value_Valid_Instance+0xe>
        return true;
    487a:	2001      	movs	r0, #1
}
    487c:	bd10      	pop	{r4, pc}
    return false;
    487e:	2000      	movs	r0, #0
    4880:	e7fc      	b.n	487c <Analog_Value_Valid_Instance+0xc>
    4882:	46c0      	nop			; (mov r8, r8)
    4884:	0000482d 	.word	0x0000482d

00004888 <Analog_Value_Present_Value>:
{
    4888:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    488a:	4b04      	ldr	r3, [pc, #16]	; (489c <Analog_Value_Present_Value+0x14>)
    488c:	4798      	blx	r3
    if (pObject) {
    488e:	2800      	cmp	r0, #0
    4890:	d001      	beq.n	4896 <Analog_Value_Present_Value+0xe>
        value = pObject->value;
    4892:	6980      	ldr	r0, [r0, #24]
}
    4894:	bd10      	pop	{r4, pc}
    float value = 0;
    4896:	2000      	movs	r0, #0
    return value;
    4898:	e7fc      	b.n	4894 <Analog_Value_Present_Value+0xc>
    489a:	46c0      	nop			; (mov r8, r8)
    489c:	0000482d 	.word	0x0000482d

000048a0 <Analog_Value_Object_Name>:
{
    48a0:	b510      	push	{r4, lr}
    48a2:	000c      	movs	r4, r1
    pObject = Object_List_Element(object_instance);
    48a4:	4b05      	ldr	r3, [pc, #20]	; (48bc <Analog_Value_Object_Name+0x1c>)
    48a6:	4798      	blx	r3
    if (pObject) {
    48a8:	2800      	cmp	r0, #0
    48aa:	d004      	beq.n	48b6 <Analog_Value_Object_Name+0x16>
        status = characterstring_init_ansi(object_name, pObject->object_name);
    48ac:	6841      	ldr	r1, [r0, #4]
    48ae:	0020      	movs	r0, r4
    48b0:	4b03      	ldr	r3, [pc, #12]	; (48c0 <Analog_Value_Object_Name+0x20>)
    48b2:	4798      	blx	r3
}
    48b4:	bd10      	pop	{r4, pc}
    bool status = false;
    48b6:	2000      	movs	r0, #0
    48b8:	e7fc      	b.n	48b4 <Analog_Value_Object_Name+0x14>
    48ba:	46c0      	nop			; (mov r8, r8)
    48bc:	0000482d 	.word	0x0000482d
    48c0:	00003f75 	.word	0x00003f75

000048c4 <Analog_Value_Units>:
{
    48c4:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    48c6:	4b04      	ldr	r3, [pc, #16]	; (48d8 <Analog_Value_Units+0x14>)
    48c8:	4798      	blx	r3
    if (pObject) {
    48ca:	2800      	cmp	r0, #0
    48cc:	d001      	beq.n	48d2 <Analog_Value_Units+0xe>
        units = pObject->units;
    48ce:	8900      	ldrh	r0, [r0, #8]
}
    48d0:	bd10      	pop	{r4, pc}
    uint16_t units = UNITS_NO_UNITS;
    48d2:	205f      	movs	r0, #95	; 0x5f
    48d4:	e7fc      	b.n	48d0 <Analog_Value_Units+0xc>
    48d6:	46c0      	nop			; (mov r8, r8)
    48d8:	0000482d 	.word	0x0000482d

000048dc <Analog_Value_Out_Of_Service>:
{
    48dc:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    48de:	4b05      	ldr	r3, [pc, #20]	; (48f4 <Analog_Value_Out_Of_Service+0x18>)
    48e0:	4798      	blx	r3
    if (pObject) {
    48e2:	2800      	cmp	r0, #0
    48e4:	d003      	beq.n	48ee <Analog_Value_Out_Of_Service+0x12>
        value = pObject->out_of_service;
    48e6:	7d00      	ldrb	r0, [r0, #20]
    48e8:	0780      	lsls	r0, r0, #30
    48ea:	0fc0      	lsrs	r0, r0, #31
}
    48ec:	bd10      	pop	{r4, pc}
    bool value = false;
    48ee:	2000      	movs	r0, #0
    48f0:	e7fc      	b.n	48ec <Analog_Value_Out_Of_Service+0x10>
    48f2:	46c0      	nop			; (mov r8, r8)
    48f4:	0000482d 	.word	0x0000482d

000048f8 <Analog_Value_Out_Of_Service_Set>:
{
    48f8:	b510      	push	{r4, lr}
    48fa:	000c      	movs	r4, r1
    pObject = Object_List_Element(object_instance);
    48fc:	4b06      	ldr	r3, [pc, #24]	; (4918 <Analog_Value_Out_Of_Service_Set+0x20>)
    48fe:	4798      	blx	r3
    if (pObject) {
    4900:	2800      	cmp	r0, #0
    4902:	d007      	beq.n	4914 <Analog_Value_Out_Of_Service_Set+0x1c>
        pObject->out_of_service = value;
    4904:	2101      	movs	r1, #1
    4906:	4021      	ands	r1, r4
    4908:	004b      	lsls	r3, r1, #1
    490a:	7d01      	ldrb	r1, [r0, #20]
    490c:	2202      	movs	r2, #2
    490e:	4391      	bics	r1, r2
    4910:	4319      	orrs	r1, r3
    4912:	7501      	strb	r1, [r0, #20]
}
    4914:	bd10      	pop	{r4, pc}
    4916:	46c0      	nop			; (mov r8, r8)
    4918:	0000482d 	.word	0x0000482d

0000491c <Analog_Value_Min_Pres_Value>:
{
    491c:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    491e:	4b04      	ldr	r3, [pc, #16]	; (4930 <Analog_Value_Min_Pres_Value+0x14>)
    4920:	4798      	blx	r3
    if (pObject) {
    4922:	2800      	cmp	r0, #0
    4924:	d001      	beq.n	492a <Analog_Value_Min_Pres_Value+0xe>
        value = pObject->min_value;
    4926:	68c0      	ldr	r0, [r0, #12]
}
    4928:	bd10      	pop	{r4, pc}
    float value = 0.0;
    492a:	2000      	movs	r0, #0
    return value;
    492c:	e7fc      	b.n	4928 <Analog_Value_Min_Pres_Value+0xc>
    492e:	46c0      	nop			; (mov r8, r8)
    4930:	0000482d 	.word	0x0000482d

00004934 <Analog_Value_Max_Pres_Value>:
{
    4934:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    4936:	4b04      	ldr	r3, [pc, #16]	; (4948 <Analog_Value_Max_Pres_Value+0x14>)
    4938:	4798      	blx	r3
    if (pObject) {
    493a:	2800      	cmp	r0, #0
    493c:	d001      	beq.n	4942 <Analog_Value_Max_Pres_Value+0xe>
        value = pObject->max_value;
    493e:	6900      	ldr	r0, [r0, #16]
}
    4940:	bd10      	pop	{r4, pc}
    float value = 0.0;
    4942:	2000      	movs	r0, #0
    return value;
    4944:	e7fc      	b.n	4940 <Analog_Value_Max_Pres_Value+0xc>
    4946:	46c0      	nop			; (mov r8, r8)
    4948:	0000482d 	.word	0x0000482d

0000494c <Analog_Value_Read_Property>:
{
    494c:	b570      	push	{r4, r5, r6, lr}
    494e:	b0fc      	sub	sp, #496	; 0x1f0
    4950:	0004      	movs	r4, r0
    BACNET_CHARACTER_STRING char_string = { 0 };
    4952:	22f0      	movs	r2, #240	; 0xf0
    4954:	0052      	lsls	r2, r2, #1
    4956:	2100      	movs	r1, #0
    4958:	4668      	mov	r0, sp
    495a:	4b42      	ldr	r3, [pc, #264]	; (4a64 <Analog_Value_Read_Property+0x118>)
    495c:	4798      	blx	r3
    if ((rpdata->application_data == NULL)
    495e:	6925      	ldr	r5, [r4, #16]
    4960:	2d00      	cmp	r5, #0
    4962:	d100      	bne.n	4966 <Analog_Value_Read_Property+0x1a>
    4964:	e07b      	b.n	4a5e <Analog_Value_Read_Property+0x112>
        || (rpdata->application_data_len == 0)) {
    4966:	6960      	ldr	r0, [r4, #20]
    4968:	2800      	cmp	r0, #0
    496a:	d011      	beq.n	4990 <Analog_Value_Read_Property+0x44>
    switch (rpdata->object_property) {
    496c:	68a3      	ldr	r3, [r4, #8]
    496e:	3b24      	subs	r3, #36	; 0x24
    4970:	2b51      	cmp	r3, #81	; 0x51
    4972:	d866      	bhi.n	4a42 <Analog_Value_Read_Property+0xf6>
    4974:	009b      	lsls	r3, r3, #2
    4976:	4a3c      	ldr	r2, [pc, #240]	; (4a68 <Analog_Value_Read_Property+0x11c>)
    4978:	58d3      	ldr	r3, [r2, r3]
    497a:	469f      	mov	pc, r3
            apdu_len = encode_application_object_id(
    497c:	8821      	ldrh	r1, [r4, #0]
    497e:	6862      	ldr	r2, [r4, #4]
    4980:	0028      	movs	r0, r5
    4982:	4b3a      	ldr	r3, [pc, #232]	; (4a6c <Analog_Value_Read_Property+0x120>)
    4984:	4798      	blx	r3
    if ((apdu_len >= 0) && (rpdata->array_index != BACNET_ARRAY_ALL)) {
    4986:	2800      	cmp	r0, #0
    4988:	db02      	blt.n	4990 <Analog_Value_Read_Property+0x44>
    498a:	68e3      	ldr	r3, [r4, #12]
    498c:	3301      	adds	r3, #1
    498e:	d15f      	bne.n	4a50 <Analog_Value_Read_Property+0x104>
}
    4990:	b07c      	add	sp, #496	; 0x1f0
    4992:	bd70      	pop	{r4, r5, r6, pc}
            Analog_Value_Object_Name(rpdata->object_instance, &char_string);
    4994:	4669      	mov	r1, sp
    4996:	6860      	ldr	r0, [r4, #4]
    4998:	4b35      	ldr	r3, [pc, #212]	; (4a70 <Analog_Value_Read_Property+0x124>)
    499a:	4798      	blx	r3
                = encode_application_character_string(&apdu[0], &char_string);
    499c:	4669      	mov	r1, sp
    499e:	0028      	movs	r0, r5
    49a0:	4b34      	ldr	r3, [pc, #208]	; (4a74 <Analog_Value_Read_Property+0x128>)
    49a2:	4798      	blx	r3
            break;
    49a4:	e7ef      	b.n	4986 <Analog_Value_Read_Property+0x3a>
                = encode_application_enumerated(&apdu[0], rpdata->object_type);
    49a6:	8821      	ldrh	r1, [r4, #0]
    49a8:	0028      	movs	r0, r5
    49aa:	4b33      	ldr	r3, [pc, #204]	; (4a78 <Analog_Value_Read_Property+0x12c>)
    49ac:	4798      	blx	r3
            break;
    49ae:	e7ea      	b.n	4986 <Analog_Value_Read_Property+0x3a>
            real_value = Analog_Value_Present_Value(rpdata->object_instance);
    49b0:	6860      	ldr	r0, [r4, #4]
    49b2:	4b32      	ldr	r3, [pc, #200]	; (4a7c <Analog_Value_Read_Property+0x130>)
    49b4:	4798      	blx	r3
    49b6:	1c01      	adds	r1, r0, #0
            apdu_len = encode_application_real(&apdu[0], real_value);
    49b8:	0028      	movs	r0, r5
    49ba:	4b31      	ldr	r3, [pc, #196]	; (4a80 <Analog_Value_Read_Property+0x134>)
    49bc:	4798      	blx	r3
            break;
    49be:	e7e2      	b.n	4986 <Analog_Value_Read_Property+0x3a>
            apdu_len = encode_application_real(
    49c0:	6860      	ldr	r0, [r4, #4]
    49c2:	4b30      	ldr	r3, [pc, #192]	; (4a84 <Analog_Value_Read_Property+0x138>)
    49c4:	4798      	blx	r3
    49c6:	1c01      	adds	r1, r0, #0
    49c8:	0028      	movs	r0, r5
    49ca:	4b2d      	ldr	r3, [pc, #180]	; (4a80 <Analog_Value_Read_Property+0x134>)
    49cc:	4798      	blx	r3
            break;
    49ce:	e7da      	b.n	4986 <Analog_Value_Read_Property+0x3a>
            apdu_len = encode_application_real(
    49d0:	6860      	ldr	r0, [r4, #4]
    49d2:	4b2d      	ldr	r3, [pc, #180]	; (4a88 <Analog_Value_Read_Property+0x13c>)
    49d4:	4798      	blx	r3
    49d6:	1c01      	adds	r1, r0, #0
    49d8:	0028      	movs	r0, r5
    49da:	4b29      	ldr	r3, [pc, #164]	; (4a80 <Analog_Value_Read_Property+0x134>)
    49dc:	4798      	blx	r3
            break;
    49de:	e7d2      	b.n	4986 <Analog_Value_Read_Property+0x3a>
            bitstring_init(&bit_string);
    49e0:	a878      	add	r0, sp, #480	; 0x1e0
    49e2:	4b2a      	ldr	r3, [pc, #168]	; (4a8c <Analog_Value_Read_Property+0x140>)
    49e4:	4798      	blx	r3
            bitstring_set_bit(&bit_string, STATUS_FLAG_IN_ALARM, false);
    49e6:	2200      	movs	r2, #0
    49e8:	2100      	movs	r1, #0
    49ea:	a878      	add	r0, sp, #480	; 0x1e0
    49ec:	4e28      	ldr	r6, [pc, #160]	; (4a90 <Analog_Value_Read_Property+0x144>)
    49ee:	47b0      	blx	r6
            bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, false);
    49f0:	2200      	movs	r2, #0
    49f2:	2101      	movs	r1, #1
    49f4:	a878      	add	r0, sp, #480	; 0x1e0
    49f6:	47b0      	blx	r6
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
    49f8:	2200      	movs	r2, #0
    49fa:	2102      	movs	r1, #2
    49fc:	a878      	add	r0, sp, #480	; 0x1e0
    49fe:	47b0      	blx	r6
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE,
    4a00:	6860      	ldr	r0, [r4, #4]
    4a02:	4b24      	ldr	r3, [pc, #144]	; (4a94 <Analog_Value_Read_Property+0x148>)
    4a04:	4798      	blx	r3
    4a06:	0002      	movs	r2, r0
    4a08:	2103      	movs	r1, #3
    4a0a:	a878      	add	r0, sp, #480	; 0x1e0
    4a0c:	47b0      	blx	r6
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    4a0e:	a978      	add	r1, sp, #480	; 0x1e0
    4a10:	0028      	movs	r0, r5
    4a12:	4b21      	ldr	r3, [pc, #132]	; (4a98 <Analog_Value_Read_Property+0x14c>)
    4a14:	4798      	blx	r3
            break;
    4a16:	e7b6      	b.n	4986 <Analog_Value_Read_Property+0x3a>
                = encode_application_enumerated(&apdu[0], EVENT_STATE_NORMAL);
    4a18:	2100      	movs	r1, #0
    4a1a:	0028      	movs	r0, r5
    4a1c:	4b16      	ldr	r3, [pc, #88]	; (4a78 <Analog_Value_Read_Property+0x12c>)
    4a1e:	4798      	blx	r3
            break;
    4a20:	e7b1      	b.n	4986 <Analog_Value_Read_Property+0x3a>
            apdu_len = encode_application_boolean(&apdu[0],
    4a22:	6860      	ldr	r0, [r4, #4]
    4a24:	4b1b      	ldr	r3, [pc, #108]	; (4a94 <Analog_Value_Read_Property+0x148>)
    4a26:	4798      	blx	r3
    4a28:	0001      	movs	r1, r0
    4a2a:	0028      	movs	r0, r5
    4a2c:	4b1b      	ldr	r3, [pc, #108]	; (4a9c <Analog_Value_Read_Property+0x150>)
    4a2e:	4798      	blx	r3
            break;
    4a30:	e7a9      	b.n	4986 <Analog_Value_Read_Property+0x3a>
            units = Analog_Value_Units(rpdata->object_instance);
    4a32:	6860      	ldr	r0, [r4, #4]
    4a34:	4b1a      	ldr	r3, [pc, #104]	; (4aa0 <Analog_Value_Read_Property+0x154>)
    4a36:	4798      	blx	r3
    4a38:	0001      	movs	r1, r0
            apdu_len = encode_application_enumerated(&apdu[0], units);
    4a3a:	0028      	movs	r0, r5
    4a3c:	4b0e      	ldr	r3, [pc, #56]	; (4a78 <Analog_Value_Read_Property+0x12c>)
    4a3e:	4798      	blx	r3
            break;
    4a40:	e7a1      	b.n	4986 <Analog_Value_Read_Property+0x3a>
            rpdata->error_class = ERROR_CLASS_PROPERTY;
    4a42:	2302      	movs	r3, #2
    4a44:	8323      	strh	r3, [r4, #24]
            rpdata->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    4a46:	331e      	adds	r3, #30
    4a48:	8363      	strh	r3, [r4, #26]
            apdu_len = BACNET_STATUS_ERROR;
    4a4a:	2001      	movs	r0, #1
    4a4c:	4240      	negs	r0, r0
            break;
    4a4e:	e79a      	b.n	4986 <Analog_Value_Read_Property+0x3a>
        rpdata->error_class = ERROR_CLASS_PROPERTY;
    4a50:	2302      	movs	r3, #2
    4a52:	8323      	strh	r3, [r4, #24]
        rpdata->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    4a54:	3330      	adds	r3, #48	; 0x30
    4a56:	8363      	strh	r3, [r4, #26]
        apdu_len = BACNET_STATUS_ERROR;
    4a58:	2001      	movs	r0, #1
    4a5a:	4240      	negs	r0, r0
    4a5c:	e798      	b.n	4990 <Analog_Value_Read_Property+0x44>
        return 0;
    4a5e:	2000      	movs	r0, #0
    4a60:	e796      	b.n	4990 <Analog_Value_Read_Property+0x44>
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	0000db1f 	.word	0x0000db1f
    4a68:	0000e940 	.word	0x0000e940
    4a6c:	0000316d 	.word	0x0000316d
    4a70:	000048a1 	.word	0x000048a1
    4a74:	000032dd 	.word	0x000032dd
    4a78:	000036f1 	.word	0x000036f1
    4a7c:	00004889 	.word	0x00004889
    4a80:	000037d9 	.word	0x000037d9
    4a84:	0000491d 	.word	0x0000491d
    4a88:	00004935 	.word	0x00004935
    4a8c:	00003e71 	.word	0x00003e71
    4a90:	00003e85 	.word	0x00003e85
    4a94:	000048dd 	.word	0x000048dd
    4a98:	000030b9 	.word	0x000030b9
    4a9c:	00002fad 	.word	0x00002fad
    4aa0:	000048c5 	.word	0x000048c5

00004aa4 <Analog_Value_Present_Value_Write>:
{
    4aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aa6:	1c0d      	adds	r5, r1, #0
    4aa8:	0017      	movs	r7, r2
    4aaa:	001e      	movs	r6, r3
    pObject = Object_List_Element(object_instance);
    4aac:	4b11      	ldr	r3, [pc, #68]	; (4af4 <Analog_Value_Present_Value_Write+0x50>)
    4aae:	4798      	blx	r3
    4ab0:	1e04      	subs	r4, r0, #0
    if (pObject) {
    4ab2:	d01d      	beq.n	4af0 <Analog_Value_Present_Value_Write+0x4c>
        if (pObject->writable || pObject->out_of_service) {
    4ab4:	7d03      	ldrb	r3, [r0, #20]
    4ab6:	079b      	lsls	r3, r3, #30
    4ab8:	d014      	beq.n	4ae4 <Analog_Value_Present_Value_Write+0x40>
            if ((value >= pObject->min_value)
    4aba:	1c29      	adds	r1, r5, #0
    4abc:	68c0      	ldr	r0, [r0, #12]
    4abe:	4b0e      	ldr	r3, [pc, #56]	; (4af8 <Analog_Value_Present_Value_Write+0x54>)
    4ac0:	4798      	blx	r3
    4ac2:	2800      	cmp	r0, #0
    4ac4:	d008      	beq.n	4ad8 <Analog_Value_Present_Value_Write+0x34>
                && (value <= pObject->max_value)) {
    4ac6:	6921      	ldr	r1, [r4, #16]
    4ac8:	1c28      	adds	r0, r5, #0
    4aca:	4b0b      	ldr	r3, [pc, #44]	; (4af8 <Analog_Value_Present_Value_Write+0x54>)
    4acc:	4798      	blx	r3
    4ace:	2800      	cmp	r0, #0
    4ad0:	d002      	beq.n	4ad8 <Analog_Value_Present_Value_Write+0x34>
                pObject->value = value;
    4ad2:	61a5      	str	r5, [r4, #24]
                status = true;
    4ad4:	2001      	movs	r0, #1
    4ad6:	e00a      	b.n	4aee <Analog_Value_Present_Value_Write+0x4a>
                *error_class = ERROR_CLASS_PROPERTY;
    4ad8:	2302      	movs	r3, #2
    4ada:	803b      	strh	r3, [r7, #0]
                *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    4adc:	3323      	adds	r3, #35	; 0x23
    4ade:	8033      	strh	r3, [r6, #0]
    bool status = false;
    4ae0:	2000      	movs	r0, #0
    4ae2:	e004      	b.n	4aee <Analog_Value_Present_Value_Write+0x4a>
            *error_class = ERROR_CLASS_PROPERTY;
    4ae4:	2302      	movs	r3, #2
    4ae6:	803b      	strh	r3, [r7, #0]
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    4ae8:	3326      	adds	r3, #38	; 0x26
    4aea:	8033      	strh	r3, [r6, #0]
    bool status = false;
    4aec:	2000      	movs	r0, #0
}
    4aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool status = false;
    4af0:	2000      	movs	r0, #0
    4af2:	e7fc      	b.n	4aee <Analog_Value_Present_Value_Write+0x4a>
    4af4:	0000482d 	.word	0x0000482d
    4af8:	0000cf51 	.word	0x0000cf51

00004afc <Analog_Value_Write_Property>:
{
    4afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4afe:	b0fd      	sub	sp, #500	; 0x1f4
    4b00:	0004      	movs	r4, r0
        wp_data->application_data, wp_data->application_data_len, &value);
    4b02:	3010      	adds	r0, #16
    4b04:	23f8      	movs	r3, #248	; 0xf8
    4b06:	005b      	lsls	r3, r3, #1
    4b08:	58e1      	ldr	r1, [r4, r3]
    len = bacapp_decode_application_data(
    4b0a:	466a      	mov	r2, sp
    4b0c:	4b2f      	ldr	r3, [pc, #188]	; (4bcc <Analog_Value_Write_Property+0xd0>)
    4b0e:	4798      	blx	r3
    if (len < 0) {
    4b10:	2800      	cmp	r0, #0
    4b12:	db10      	blt.n	4b36 <Analog_Value_Write_Property+0x3a>
    if ((wp_data->object_property != PROP_PRIORITY_ARRAY)
    4b14:	68a3      	ldr	r3, [r4, #8]
    4b16:	2b57      	cmp	r3, #87	; 0x57
    4b18:	d016      	beq.n	4b48 <Analog_Value_Write_Property+0x4c>
        && (wp_data->array_index != BACNET_ARRAY_ALL)) {
    4b1a:	68e2      	ldr	r2, [r4, #12]
    4b1c:	3201      	adds	r2, #1
    4b1e:	d013      	beq.n	4b48 <Analog_Value_Write_Property+0x4c>
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    4b20:	2202      	movs	r2, #2
    4b22:	23fb      	movs	r3, #251	; 0xfb
    4b24:	005b      	lsls	r3, r3, #1
    4b26:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    4b28:	3230      	adds	r2, #48	; 0x30
    4b2a:	3302      	adds	r3, #2
    4b2c:	52e2      	strh	r2, [r4, r3]
        return false;
    4b2e:	2500      	movs	r5, #0
}
    4b30:	0028      	movs	r0, r5
    4b32:	b07d      	add	sp, #500	; 0x1f4
    4b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    4b36:	2202      	movs	r2, #2
    4b38:	23fb      	movs	r3, #251	; 0xfb
    4b3a:	005b      	lsls	r3, r3, #1
    4b3c:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    4b3e:	3223      	adds	r2, #35	; 0x23
    4b40:	3302      	adds	r3, #2
    4b42:	52e2      	strh	r2, [r4, r3]
        return false;
    4b44:	2500      	movs	r5, #0
    4b46:	e7f3      	b.n	4b30 <Analog_Value_Write_Property+0x34>
    switch (wp_data->object_property) {
    4b48:	3b1c      	subs	r3, #28
    4b4a:	2b59      	cmp	r3, #89	; 0x59
    4b4c:	d834      	bhi.n	4bb8 <Analog_Value_Write_Property+0xbc>
    4b4e:	009b      	lsls	r3, r3, #2
    4b50:	4a1f      	ldr	r2, [pc, #124]	; (4bd0 <Analog_Value_Write_Property+0xd4>)
    4b52:	58d3      	ldr	r3, [r2, r3]
    4b54:	469f      	mov	pc, r3
            status = WPValidateArgType(&value, BACNET_APPLICATION_TAG_REAL,
    4b56:	0026      	movs	r6, r4
    4b58:	36f7      	adds	r6, #247	; 0xf7
    4b5a:	36ff      	adds	r6, #255	; 0xff
    4b5c:	0027      	movs	r7, r4
    4b5e:	37f9      	adds	r7, #249	; 0xf9
    4b60:	37ff      	adds	r7, #255	; 0xff
    4b62:	003b      	movs	r3, r7
    4b64:	0032      	movs	r2, r6
    4b66:	2104      	movs	r1, #4
    4b68:	4668      	mov	r0, sp
    4b6a:	4d1a      	ldr	r5, [pc, #104]	; (4bd4 <Analog_Value_Write_Property+0xd8>)
    4b6c:	47a8      	blx	r5
    4b6e:	1e05      	subs	r5, r0, #0
            if (status) {
    4b70:	d0de      	beq.n	4b30 <Analog_Value_Write_Property+0x34>
                status = Analog_Value_Present_Value_Write(
    4b72:	6820      	ldr	r0, [r4, #0]
    4b74:	003b      	movs	r3, r7
    4b76:	0032      	movs	r2, r6
    4b78:	9902      	ldr	r1, [sp, #8]
    4b7a:	4c17      	ldr	r4, [pc, #92]	; (4bd8 <Analog_Value_Write_Property+0xdc>)
    4b7c:	47a0      	blx	r4
    4b7e:	0005      	movs	r5, r0
    4b80:	e7d6      	b.n	4b30 <Analog_Value_Write_Property+0x34>
            status = WPValidateArgType(&value, BACNET_APPLICATION_TAG_BOOLEAN,
    4b82:	0023      	movs	r3, r4
    4b84:	33f9      	adds	r3, #249	; 0xf9
    4b86:	33ff      	adds	r3, #255	; 0xff
    4b88:	0022      	movs	r2, r4
    4b8a:	32f7      	adds	r2, #247	; 0xf7
    4b8c:	32ff      	adds	r2, #255	; 0xff
    4b8e:	2101      	movs	r1, #1
    4b90:	4668      	mov	r0, sp
    4b92:	4d10      	ldr	r5, [pc, #64]	; (4bd4 <Analog_Value_Write_Property+0xd8>)
    4b94:	47a8      	blx	r5
    4b96:	1e05      	subs	r5, r0, #0
            if (status) {
    4b98:	d0ca      	beq.n	4b30 <Analog_Value_Write_Property+0x34>
                Analog_Value_Out_Of_Service_Set(
    4b9a:	466b      	mov	r3, sp
    4b9c:	7a19      	ldrb	r1, [r3, #8]
    4b9e:	6820      	ldr	r0, [r4, #0]
    4ba0:	4b0e      	ldr	r3, [pc, #56]	; (4bdc <Analog_Value_Write_Property+0xe0>)
    4ba2:	4798      	blx	r3
    4ba4:	e7c4      	b.n	4b30 <Analog_Value_Write_Property+0x34>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    4ba6:	2202      	movs	r2, #2
    4ba8:	23fb      	movs	r3, #251	; 0xfb
    4baa:	005b      	lsls	r3, r3, #1
    4bac:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    4bae:	3226      	adds	r2, #38	; 0x26
    4bb0:	3302      	adds	r3, #2
    4bb2:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value */
    4bb4:	2500      	movs	r5, #0
            break;
    4bb6:	e7bb      	b.n	4b30 <Analog_Value_Write_Property+0x34>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    4bb8:	2202      	movs	r2, #2
    4bba:	23fb      	movs	r3, #251	; 0xfb
    4bbc:	005b      	lsls	r3, r3, #1
    4bbe:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    4bc0:	321e      	adds	r2, #30
    4bc2:	3302      	adds	r3, #2
    4bc4:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value */
    4bc6:	2500      	movs	r5, #0
            break;
    4bc8:	e7b2      	b.n	4b30 <Analog_Value_Write_Property+0x34>
    4bca:	46c0      	nop			; (mov r8, r8)
    4bcc:	00002871 	.word	0x00002871
    4bd0:	0000ea88 	.word	0x0000ea88
    4bd4:	00002239 	.word	0x00002239
    4bd8:	00004aa5 	.word	0x00004aa5
    4bdc:	000048f9 	.word	0x000048f9

00004be0 <Binary_Value_Property_Lists>:
 * BACnet proprietary properties for this object.
 */
void Binary_Value_Property_Lists(
    const int **pRequired, const int **pOptional, const int **pProprietary)
{
    if (pRequired)
    4be0:	2800      	cmp	r0, #0
    4be2:	d001      	beq.n	4be8 <Binary_Value_Property_Lists+0x8>
        *pRequired = Properties_Required;
    4be4:	4b05      	ldr	r3, [pc, #20]	; (4bfc <Binary_Value_Property_Lists+0x1c>)
    4be6:	6003      	str	r3, [r0, #0]
    if (pOptional)
    4be8:	2900      	cmp	r1, #0
    4bea:	d001      	beq.n	4bf0 <Binary_Value_Property_Lists+0x10>
        *pOptional = Properties_Optional;
    4bec:	4b04      	ldr	r3, [pc, #16]	; (4c00 <Binary_Value_Property_Lists+0x20>)
    4bee:	600b      	str	r3, [r1, #0]
    if (pProprietary)
    4bf0:	2a00      	cmp	r2, #0
    4bf2:	d001      	beq.n	4bf8 <Binary_Value_Property_Lists+0x18>
        *pProprietary = Properties_Proprietary;
    4bf4:	4b03      	ldr	r3, [pc, #12]	; (4c04 <Binary_Value_Property_Lists+0x24>)
    4bf6:	6013      	str	r3, [r2, #0]

    return;
}
    4bf8:	4770      	bx	lr
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	0000ed94 	.word	0x0000ed94
    4c00:	0000ed84 	.word	0x0000ed84
    4c04:	0000ed90 	.word	0x0000ed90

00004c08 <Binary_Value_Count>:
 *
 * @return  Number of Multistate Input objects
 */
unsigned Binary_Value_Count(void)
{
    return Binary_Value_Objects_Max;
    4c08:	4b01      	ldr	r3, [pc, #4]	; (4c10 <Binary_Value_Count+0x8>)
    4c0a:	6818      	ldr	r0, [r3, #0]
}
    4c0c:	4770      	bx	lr
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	20000aec 	.word	0x20000aec

00004c14 <Binary_Value_Index_To_Instance>:
 */
uint32_t Binary_Value_Index_To_Instance(unsigned index)
{
    uint32_t object_instance = UINT32_MAX;

    if (index < Binary_Value_Objects_Max) {
    4c14:	4b06      	ldr	r3, [pc, #24]	; (4c30 <Binary_Value_Index_To_Instance+0x1c>)
    4c16:	681b      	ldr	r3, [r3, #0]
    4c18:	4283      	cmp	r3, r0
    4c1a:	d802      	bhi.n	4c22 <Binary_Value_Index_To_Instance+0xe>
    uint32_t object_instance = UINT32_MAX;
    4c1c:	2001      	movs	r0, #1
    4c1e:	4240      	negs	r0, r0
        object_instance = Object_List[index].object_id;
    }

    return object_instance;
}
    4c20:	4770      	bx	lr
        object_instance = Object_List[index].object_id;
    4c22:	0083      	lsls	r3, r0, #2
    4c24:	1818      	adds	r0, r3, r0
    4c26:	0083      	lsls	r3, r0, #2
    4c28:	4a02      	ldr	r2, [pc, #8]	; (4c34 <Binary_Value_Index_To_Instance+0x20>)
    4c2a:	5898      	ldr	r0, [r3, r2]
    4c2c:	e7f8      	b.n	4c20 <Binary_Value_Index_To_Instance+0xc>
    4c2e:	46c0      	nop			; (mov r8, r8)
    4c30:	20000aec 	.word	0x20000aec
    4c34:	20000110 	.word	0x20000110

00004c38 <Binary_Value_Init>:
/**
 * Initializes the object list
 */
void Binary_Value_Init(void)
{
    unsigned index = 0;
    4c38:	2200      	movs	r2, #0

    while (Object_List[index].object_name) {
    4c3a:	e000      	b.n	4c3e <Binary_Value_Init+0x6>
        index++;
    4c3c:	3201      	adds	r2, #1
    while (Object_List[index].object_name) {
    4c3e:	0093      	lsls	r3, r2, #2
    4c40:	189b      	adds	r3, r3, r2
    4c42:	0099      	lsls	r1, r3, #2
    4c44:	4b03      	ldr	r3, [pc, #12]	; (4c54 <Binary_Value_Init+0x1c>)
    4c46:	185b      	adds	r3, r3, r1
    4c48:	685b      	ldr	r3, [r3, #4]
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d1f6      	bne.n	4c3c <Binary_Value_Init+0x4>
    }
    Binary_Value_Objects_Max = index;
    4c4e:	4b02      	ldr	r3, [pc, #8]	; (4c58 <Binary_Value_Init+0x20>)
    4c50:	601a      	str	r2, [r3, #0]
}
    4c52:	4770      	bx	lr
    4c54:	20000110 	.word	0x20000110
    4c58:	20000aec 	.word	0x20000aec

00004c5c <Object_List_Element>:
{
    4c5c:	b510      	push	{r4, lr}
    4c5e:	0004      	movs	r4, r0
    while (Binary_Value_Objects_Max == 0) {
    4c60:	e001      	b.n	4c66 <Object_List_Element+0xa>
        Binary_Value_Init();
    4c62:	4b0c      	ldr	r3, [pc, #48]	; (4c94 <Object_List_Element+0x38>)
    4c64:	4798      	blx	r3
    while (Binary_Value_Objects_Max == 0) {
    4c66:	4b0c      	ldr	r3, [pc, #48]	; (4c98 <Object_List_Element+0x3c>)
    4c68:	6819      	ldr	r1, [r3, #0]
    4c6a:	2900      	cmp	r1, #0
    4c6c:	d0f9      	beq.n	4c62 <Object_List_Element+0x6>
    4c6e:	2300      	movs	r3, #0
    for (index = 0; index < Binary_Value_Objects_Max; index++) {
    4c70:	428b      	cmp	r3, r1
    4c72:	d20c      	bcs.n	4c8e <Object_List_Element+0x32>
        if (Object_List[index].object_id == object_instance) {
    4c74:	009a      	lsls	r2, r3, #2
    4c76:	18d2      	adds	r2, r2, r3
    4c78:	0090      	lsls	r0, r2, #2
    4c7a:	4a08      	ldr	r2, [pc, #32]	; (4c9c <Object_List_Element+0x40>)
    4c7c:	5882      	ldr	r2, [r0, r2]
    4c7e:	42a2      	cmp	r2, r4
    4c80:	d001      	beq.n	4c86 <Object_List_Element+0x2a>
    for (index = 0; index < Binary_Value_Objects_Max; index++) {
    4c82:	3301      	adds	r3, #1
    4c84:	e7f4      	b.n	4c70 <Object_List_Element+0x14>
            return &Object_List[index];
    4c86:	0002      	movs	r2, r0
    4c88:	4804      	ldr	r0, [pc, #16]	; (4c9c <Object_List_Element+0x40>)
    4c8a:	1880      	adds	r0, r0, r2
    4c8c:	e000      	b.n	4c90 <Object_List_Element+0x34>
    return NULL;
    4c8e:	2000      	movs	r0, #0
}
    4c90:	bd10      	pop	{r4, pc}
    4c92:	46c0      	nop			; (mov r8, r8)
    4c94:	00004c39 	.word	0x00004c39
    4c98:	20000aec 	.word	0x20000aec
    4c9c:	20000110 	.word	0x20000110

00004ca0 <Binary_Value_Valid_Instance>:
{
    4ca0:	b510      	push	{r4, lr}
    if (Object_List_Element(object_instance)) {
    4ca2:	4b04      	ldr	r3, [pc, #16]	; (4cb4 <Binary_Value_Valid_Instance+0x14>)
    4ca4:	4798      	blx	r3
    4ca6:	2800      	cmp	r0, #0
    4ca8:	d001      	beq.n	4cae <Binary_Value_Valid_Instance+0xe>
        return true;
    4caa:	2001      	movs	r0, #1
}
    4cac:	bd10      	pop	{r4, pc}
    return false;
    4cae:	2000      	movs	r0, #0
    4cb0:	e7fc      	b.n	4cac <Binary_Value_Valid_Instance+0xc>
    4cb2:	46c0      	nop			; (mov r8, r8)
    4cb4:	00004c5d 	.word	0x00004c5d

00004cb8 <Binary_Value_Present_Value>:
{
    4cb8:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    4cba:	4b06      	ldr	r3, [pc, #24]	; (4cd4 <Binary_Value_Present_Value+0x1c>)
    4cbc:	4798      	blx	r3
    if (pObject) {
    4cbe:	2800      	cmp	r0, #0
    4cc0:	d006      	beq.n	4cd0 <Binary_Value_Present_Value+0x18>
        if (pObject->value) {
    4cc2:	7c43      	ldrb	r3, [r0, #17]
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d001      	beq.n	4ccc <Binary_Value_Present_Value+0x14>
            value = BINARY_ACTIVE;
    4cc8:	2001      	movs	r0, #1
}
    4cca:	bd10      	pop	{r4, pc}
    BACNET_BINARY_PV value = BINARY_INACTIVE;
    4ccc:	2000      	movs	r0, #0
    4cce:	e7fc      	b.n	4cca <Binary_Value_Present_Value+0x12>
    4cd0:	2000      	movs	r0, #0
    4cd2:	e7fa      	b.n	4cca <Binary_Value_Present_Value+0x12>
    4cd4:	00004c5d 	.word	0x00004c5d

00004cd8 <Binary_Value_Object_Name>:
{
    4cd8:	b510      	push	{r4, lr}
    4cda:	000c      	movs	r4, r1
    pObject = Object_List_Element(object_instance);
    4cdc:	4b05      	ldr	r3, [pc, #20]	; (4cf4 <Binary_Value_Object_Name+0x1c>)
    4cde:	4798      	blx	r3
    if (pObject) {
    4ce0:	2800      	cmp	r0, #0
    4ce2:	d004      	beq.n	4cee <Binary_Value_Object_Name+0x16>
        status = characterstring_init_ansi(object_name, pObject->object_name);
    4ce4:	6841      	ldr	r1, [r0, #4]
    4ce6:	0020      	movs	r0, r4
    4ce8:	4b03      	ldr	r3, [pc, #12]	; (4cf8 <Binary_Value_Object_Name+0x20>)
    4cea:	4798      	blx	r3
}
    4cec:	bd10      	pop	{r4, pc}
    bool status = false;
    4cee:	2000      	movs	r0, #0
    4cf0:	e7fc      	b.n	4cec <Binary_Value_Object_Name+0x14>
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	00004c5d 	.word	0x00004c5d
    4cf8:	00003f75 	.word	0x00003f75

00004cfc <Binary_Value_Active_Text>:
{
    4cfc:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    4cfe:	4b04      	ldr	r3, [pc, #16]	; (4d10 <Binary_Value_Active_Text+0x14>)
    4d00:	4798      	blx	r3
    if (pObject) {
    4d02:	2800      	cmp	r0, #0
    4d04:	d001      	beq.n	4d0a <Binary_Value_Active_Text+0xe>
        name = (char *)pObject->active_text;
    4d06:	68c0      	ldr	r0, [r0, #12]
}
    4d08:	bd10      	pop	{r4, pc}
    char *name = NULL;
    4d0a:	2000      	movs	r0, #0
    return name;
    4d0c:	e7fc      	b.n	4d08 <Binary_Value_Active_Text+0xc>
    4d0e:	46c0      	nop			; (mov r8, r8)
    4d10:	00004c5d 	.word	0x00004c5d

00004d14 <Binary_Value_Inactive_Text>:
{
    4d14:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    4d16:	4b04      	ldr	r3, [pc, #16]	; (4d28 <Binary_Value_Inactive_Text+0x14>)
    4d18:	4798      	blx	r3
    if (pObject) {
    4d1a:	2800      	cmp	r0, #0
    4d1c:	d001      	beq.n	4d22 <Binary_Value_Inactive_Text+0xe>
        name = (char *)pObject->inactive_text;
    4d1e:	6880      	ldr	r0, [r0, #8]
}
    4d20:	bd10      	pop	{r4, pc}
    char *name = NULL;
    4d22:	2000      	movs	r0, #0
    return name;
    4d24:	e7fc      	b.n	4d20 <Binary_Value_Inactive_Text+0xc>
    4d26:	46c0      	nop			; (mov r8, r8)
    4d28:	00004c5d 	.word	0x00004c5d

00004d2c <Binary_Value_Out_Of_Service>:
{
    4d2c:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    4d2e:	4b05      	ldr	r3, [pc, #20]	; (4d44 <Binary_Value_Out_Of_Service+0x18>)
    4d30:	4798      	blx	r3
    if (pObject) {
    4d32:	2800      	cmp	r0, #0
    4d34:	d003      	beq.n	4d3e <Binary_Value_Out_Of_Service+0x12>
        value = pObject->out_of_service;
    4d36:	7c00      	ldrb	r0, [r0, #16]
    4d38:	0780      	lsls	r0, r0, #30
    4d3a:	0fc0      	lsrs	r0, r0, #31
}
    4d3c:	bd10      	pop	{r4, pc}
    bool value = false;
    4d3e:	2000      	movs	r0, #0
    4d40:	e7fc      	b.n	4d3c <Binary_Value_Out_Of_Service+0x10>
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	00004c5d 	.word	0x00004c5d

00004d48 <Binary_Value_Read_Property>:
{
    4d48:	b570      	push	{r4, r5, r6, lr}
    4d4a:	b0fc      	sub	sp, #496	; 0x1f0
    4d4c:	1e04      	subs	r4, r0, #0
    if ((rpdata == NULL) || (rpdata->application_data == NULL)
    4d4e:	d100      	bne.n	4d52 <Binary_Value_Read_Property+0xa>
    4d50:	e092      	b.n	4e78 <Binary_Value_Read_Property+0x130>
    4d52:	6905      	ldr	r5, [r0, #16]
    4d54:	2d00      	cmp	r5, #0
    4d56:	d100      	bne.n	4d5a <Binary_Value_Read_Property+0x12>
    4d58:	e090      	b.n	4e7c <Binary_Value_Read_Property+0x134>
        || (rpdata->application_data_len == 0)) {
    4d5a:	6940      	ldr	r0, [r0, #20]
    4d5c:	2800      	cmp	r0, #0
    4d5e:	d019      	beq.n	4d94 <Binary_Value_Read_Property+0x4c>
    switch (rpdata->object_property) {
    4d60:	68a3      	ldr	r3, [r4, #8]
    4d62:	2b4d      	cmp	r3, #77	; 0x4d
    4d64:	d050      	beq.n	4e08 <Binary_Value_Read_Property+0xc0>
    4d66:	d825      	bhi.n	4db4 <Binary_Value_Read_Property+0x6c>
    4d68:	2b24      	cmp	r3, #36	; 0x24
    4d6a:	d05e      	beq.n	4e2a <Binary_Value_Read_Property+0xe2>
    4d6c:	d914      	bls.n	4d98 <Binary_Value_Read_Property+0x50>
    4d6e:	2b2e      	cmp	r3, #46	; 0x2e
    4d70:	d068      	beq.n	4e44 <Binary_Value_Read_Property+0xfc>
    4d72:	2b4b      	cmp	r3, #75	; 0x4b
    4d74:	d000      	beq.n	4d78 <Binary_Value_Read_Property+0x30>
    4d76:	e071      	b.n	4e5c <Binary_Value_Read_Property+0x114>
            apdu_len = encode_application_object_id(
    4d78:	6862      	ldr	r2, [r4, #4]
    4d7a:	2105      	movs	r1, #5
    4d7c:	0028      	movs	r0, r5
    4d7e:	4b40      	ldr	r3, [pc, #256]	; (4e80 <Binary_Value_Read_Property+0x138>)
    4d80:	4798      	blx	r3
    if ((apdu_len >= 0) && (rpdata->object_property != PROP_STATE_TEXT)
    4d82:	2800      	cmp	r0, #0
    4d84:	db06      	blt.n	4d94 <Binary_Value_Read_Property+0x4c>
    4d86:	68a3      	ldr	r3, [r4, #8]
    4d88:	2b6e      	cmp	r3, #110	; 0x6e
    4d8a:	d003      	beq.n	4d94 <Binary_Value_Read_Property+0x4c>
        && (rpdata->array_index != BACNET_ARRAY_ALL)) {
    4d8c:	68e3      	ldr	r3, [r4, #12]
    4d8e:	3301      	adds	r3, #1
    4d90:	d000      	beq.n	4d94 <Binary_Value_Read_Property+0x4c>
    4d92:	e06a      	b.n	4e6a <Binary_Value_Read_Property+0x122>
}
    4d94:	b07c      	add	sp, #496	; 0x1f0
    4d96:	bd70      	pop	{r4, r5, r6, pc}
    switch (rpdata->object_property) {
    4d98:	2b04      	cmp	r3, #4
    4d9a:	d15f      	bne.n	4e5c <Binary_Value_Read_Property+0x114>
                Binary_Value_Active_Text(rpdata->object_instance));
    4d9c:	6860      	ldr	r0, [r4, #4]
    4d9e:	4b39      	ldr	r3, [pc, #228]	; (4e84 <Binary_Value_Read_Property+0x13c>)
    4da0:	4798      	blx	r3
    4da2:	0001      	movs	r1, r0
            characterstring_init_ansi(&char_string,
    4da4:	4668      	mov	r0, sp
    4da6:	4b38      	ldr	r3, [pc, #224]	; (4e88 <Binary_Value_Read_Property+0x140>)
    4da8:	4798      	blx	r3
                = encode_application_character_string(&apdu[0], &char_string);
    4daa:	4669      	mov	r1, sp
    4dac:	0028      	movs	r0, r5
    4dae:	4b37      	ldr	r3, [pc, #220]	; (4e8c <Binary_Value_Read_Property+0x144>)
    4db0:	4798      	blx	r3
            break;
    4db2:	e7e6      	b.n	4d82 <Binary_Value_Read_Property+0x3a>
    switch (rpdata->object_property) {
    4db4:	2b51      	cmp	r3, #81	; 0x51
    4db6:	d03d      	beq.n	4e34 <Binary_Value_Read_Property+0xec>
    4db8:	d91f      	bls.n	4dfa <Binary_Value_Read_Property+0xb2>
    4dba:	2b55      	cmp	r3, #85	; 0x55
    4dbc:	d02d      	beq.n	4e1a <Binary_Value_Read_Property+0xd2>
    4dbe:	2b6f      	cmp	r3, #111	; 0x6f
    4dc0:	d14c      	bne.n	4e5c <Binary_Value_Read_Property+0x114>
            bitstring_init(&bit_string);
    4dc2:	a878      	add	r0, sp, #480	; 0x1e0
    4dc4:	4b32      	ldr	r3, [pc, #200]	; (4e90 <Binary_Value_Read_Property+0x148>)
    4dc6:	4798      	blx	r3
            bitstring_set_bit(&bit_string, STATUS_FLAG_IN_ALARM, false);
    4dc8:	2200      	movs	r2, #0
    4dca:	2100      	movs	r1, #0
    4dcc:	a878      	add	r0, sp, #480	; 0x1e0
    4dce:	4e31      	ldr	r6, [pc, #196]	; (4e94 <Binary_Value_Read_Property+0x14c>)
    4dd0:	47b0      	blx	r6
            bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, false);
    4dd2:	2200      	movs	r2, #0
    4dd4:	2101      	movs	r1, #1
    4dd6:	a878      	add	r0, sp, #480	; 0x1e0
    4dd8:	47b0      	blx	r6
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
    4dda:	2200      	movs	r2, #0
    4ddc:	2102      	movs	r1, #2
    4dde:	a878      	add	r0, sp, #480	; 0x1e0
    4de0:	47b0      	blx	r6
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE,
    4de2:	6860      	ldr	r0, [r4, #4]
    4de4:	4b2c      	ldr	r3, [pc, #176]	; (4e98 <Binary_Value_Read_Property+0x150>)
    4de6:	4798      	blx	r3
    4de8:	0002      	movs	r2, r0
    4dea:	2103      	movs	r1, #3
    4dec:	a878      	add	r0, sp, #480	; 0x1e0
    4dee:	47b0      	blx	r6
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    4df0:	a978      	add	r1, sp, #480	; 0x1e0
    4df2:	0028      	movs	r0, r5
    4df4:	4b29      	ldr	r3, [pc, #164]	; (4e9c <Binary_Value_Read_Property+0x154>)
    4df6:	4798      	blx	r3
            break;
    4df8:	e7c3      	b.n	4d82 <Binary_Value_Read_Property+0x3a>
    switch (rpdata->object_property) {
    4dfa:	2b4f      	cmp	r3, #79	; 0x4f
    4dfc:	d12e      	bne.n	4e5c <Binary_Value_Read_Property+0x114>
                = encode_application_enumerated(&apdu[0], OBJECT_BINARY_VALUE);
    4dfe:	2105      	movs	r1, #5
    4e00:	0028      	movs	r0, r5
    4e02:	4b27      	ldr	r3, [pc, #156]	; (4ea0 <Binary_Value_Read_Property+0x158>)
    4e04:	4798      	blx	r3
            break;
    4e06:	e7bc      	b.n	4d82 <Binary_Value_Read_Property+0x3a>
            Binary_Value_Object_Name(rpdata->object_instance, &char_string);
    4e08:	4669      	mov	r1, sp
    4e0a:	6860      	ldr	r0, [r4, #4]
    4e0c:	4b25      	ldr	r3, [pc, #148]	; (4ea4 <Binary_Value_Read_Property+0x15c>)
    4e0e:	4798      	blx	r3
                = encode_application_character_string(&apdu[0], &char_string);
    4e10:	4669      	mov	r1, sp
    4e12:	0028      	movs	r0, r5
    4e14:	4b1d      	ldr	r3, [pc, #116]	; (4e8c <Binary_Value_Read_Property+0x144>)
    4e16:	4798      	blx	r3
            break;
    4e18:	e7b3      	b.n	4d82 <Binary_Value_Read_Property+0x3a>
            present_value = Binary_Value_Present_Value(rpdata->object_instance);
    4e1a:	6860      	ldr	r0, [r4, #4]
    4e1c:	4b22      	ldr	r3, [pc, #136]	; (4ea8 <Binary_Value_Read_Property+0x160>)
    4e1e:	4798      	blx	r3
    4e20:	0001      	movs	r1, r0
            apdu_len = encode_application_enumerated(&apdu[0], present_value);
    4e22:	0028      	movs	r0, r5
    4e24:	4b1e      	ldr	r3, [pc, #120]	; (4ea0 <Binary_Value_Read_Property+0x158>)
    4e26:	4798      	blx	r3
            break;
    4e28:	e7ab      	b.n	4d82 <Binary_Value_Read_Property+0x3a>
                = encode_application_enumerated(&apdu[0], EVENT_STATE_NORMAL);
    4e2a:	2100      	movs	r1, #0
    4e2c:	0028      	movs	r0, r5
    4e2e:	4b1c      	ldr	r3, [pc, #112]	; (4ea0 <Binary_Value_Read_Property+0x158>)
    4e30:	4798      	blx	r3
            break;
    4e32:	e7a6      	b.n	4d82 <Binary_Value_Read_Property+0x3a>
            apdu_len = encode_application_boolean(&apdu[0],
    4e34:	6860      	ldr	r0, [r4, #4]
    4e36:	4b18      	ldr	r3, [pc, #96]	; (4e98 <Binary_Value_Read_Property+0x150>)
    4e38:	4798      	blx	r3
    4e3a:	0001      	movs	r1, r0
    4e3c:	0028      	movs	r0, r5
    4e3e:	4b1b      	ldr	r3, [pc, #108]	; (4eac <Binary_Value_Read_Property+0x164>)
    4e40:	4798      	blx	r3
            break;
    4e42:	e79e      	b.n	4d82 <Binary_Value_Read_Property+0x3a>
                Binary_Value_Inactive_Text(rpdata->object_instance));
    4e44:	6860      	ldr	r0, [r4, #4]
    4e46:	4b1a      	ldr	r3, [pc, #104]	; (4eb0 <Binary_Value_Read_Property+0x168>)
    4e48:	4798      	blx	r3
    4e4a:	0001      	movs	r1, r0
            characterstring_init_ansi(&char_string,
    4e4c:	4668      	mov	r0, sp
    4e4e:	4b0e      	ldr	r3, [pc, #56]	; (4e88 <Binary_Value_Read_Property+0x140>)
    4e50:	4798      	blx	r3
                = encode_application_character_string(&apdu[0], &char_string);
    4e52:	4669      	mov	r1, sp
    4e54:	0028      	movs	r0, r5
    4e56:	4b0d      	ldr	r3, [pc, #52]	; (4e8c <Binary_Value_Read_Property+0x144>)
    4e58:	4798      	blx	r3
            break;
    4e5a:	e792      	b.n	4d82 <Binary_Value_Read_Property+0x3a>
            rpdata->error_class = ERROR_CLASS_PROPERTY;
    4e5c:	2302      	movs	r3, #2
    4e5e:	8323      	strh	r3, [r4, #24]
            rpdata->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    4e60:	331e      	adds	r3, #30
    4e62:	8363      	strh	r3, [r4, #26]
            apdu_len = BACNET_STATUS_ERROR;
    4e64:	2001      	movs	r0, #1
    4e66:	4240      	negs	r0, r0
            break;
    4e68:	e78b      	b.n	4d82 <Binary_Value_Read_Property+0x3a>
        rpdata->error_class = ERROR_CLASS_PROPERTY;
    4e6a:	2302      	movs	r3, #2
    4e6c:	8323      	strh	r3, [r4, #24]
        rpdata->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    4e6e:	3330      	adds	r3, #48	; 0x30
    4e70:	8363      	strh	r3, [r4, #26]
        apdu_len = BACNET_STATUS_ERROR;
    4e72:	2001      	movs	r0, #1
    4e74:	4240      	negs	r0, r0
    4e76:	e78d      	b.n	4d94 <Binary_Value_Read_Property+0x4c>
        return 0;
    4e78:	2000      	movs	r0, #0
    4e7a:	e78b      	b.n	4d94 <Binary_Value_Read_Property+0x4c>
    4e7c:	2000      	movs	r0, #0
    4e7e:	e789      	b.n	4d94 <Binary_Value_Read_Property+0x4c>
    4e80:	0000316d 	.word	0x0000316d
    4e84:	00004cfd 	.word	0x00004cfd
    4e88:	00003f75 	.word	0x00003f75
    4e8c:	000032dd 	.word	0x000032dd
    4e90:	00003e71 	.word	0x00003e71
    4e94:	00003e85 	.word	0x00003e85
    4e98:	00004d2d 	.word	0x00004d2d
    4e9c:	000030b9 	.word	0x000030b9
    4ea0:	000036f1 	.word	0x000036f1
    4ea4:	00004cd9 	.word	0x00004cd9
    4ea8:	00004cb9 	.word	0x00004cb9
    4eac:	00002fad 	.word	0x00002fad
    4eb0:	00004d15 	.word	0x00004d15

00004eb4 <Binary_Value_Out_Of_Service_Set>:
{
    4eb4:	b510      	push	{r4, lr}
    4eb6:	000c      	movs	r4, r1
    pObject = Object_List_Element(object_instance);
    4eb8:	4b06      	ldr	r3, [pc, #24]	; (4ed4 <Binary_Value_Out_Of_Service_Set+0x20>)
    4eba:	4798      	blx	r3
    if (pObject) {
    4ebc:	2800      	cmp	r0, #0
    4ebe:	d007      	beq.n	4ed0 <Binary_Value_Out_Of_Service_Set+0x1c>
        pObject->out_of_service = value;
    4ec0:	2101      	movs	r1, #1
    4ec2:	4021      	ands	r1, r4
    4ec4:	004b      	lsls	r3, r1, #1
    4ec6:	7c01      	ldrb	r1, [r0, #16]
    4ec8:	2202      	movs	r2, #2
    4eca:	4391      	bics	r1, r2
    4ecc:	4319      	orrs	r1, r3
    4ece:	7401      	strb	r1, [r0, #16]
}
    4ed0:	bd10      	pop	{r4, pc}
    4ed2:	46c0      	nop			; (mov r8, r8)
    4ed4:	00004c5d 	.word	0x00004c5d

00004ed8 <Binary_Value_Present_Value_Write>:
{
    4ed8:	b570      	push	{r4, r5, r6, lr}
    4eda:	000c      	movs	r4, r1
    4edc:	0016      	movs	r6, r2
    4ede:	001d      	movs	r5, r3
    pObject = Object_List_Element(object_instance);
    4ee0:	4b12      	ldr	r3, [pc, #72]	; (4f2c <Binary_Value_Present_Value_Write+0x54>)
    4ee2:	4798      	blx	r3
    if (pObject) {
    4ee4:	2800      	cmp	r0, #0
    4ee6:	d01c      	beq.n	4f22 <Binary_Value_Present_Value_Write+0x4a>
        if (pObject->writable || pObject->out_of_service) {
    4ee8:	7c03      	ldrb	r3, [r0, #16]
    4eea:	079b      	lsls	r3, r3, #30
    4eec:	d013      	beq.n	4f16 <Binary_Value_Present_Value_Write+0x3e>
            if (value <= MAX_BINARY_PV) {
    4eee:	2c01      	cmp	r4, #1
    4ef0:	d905      	bls.n	4efe <Binary_Value_Present_Value_Write+0x26>
                *error_class = ERROR_CLASS_PROPERTY;
    4ef2:	2302      	movs	r3, #2
    4ef4:	8033      	strh	r3, [r6, #0]
                *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    4ef6:	3323      	adds	r3, #35	; 0x23
    4ef8:	802b      	strh	r3, [r5, #0]
    bool status = false;
    4efa:	2000      	movs	r0, #0
    4efc:	e010      	b.n	4f20 <Binary_Value_Present_Value_Write+0x48>
                if (value == BINARY_ACTIVE) {
    4efe:	2c01      	cmp	r4, #1
    4f00:	d005      	beq.n	4f0e <Binary_Value_Present_Value_Write+0x36>
                } else if (value == BINARY_INACTIVE) {
    4f02:	2c00      	cmp	r4, #0
    4f04:	d10f      	bne.n	4f26 <Binary_Value_Present_Value_Write+0x4e>
                    pObject->value = false;
    4f06:	2300      	movs	r3, #0
    4f08:	7443      	strb	r3, [r0, #17]
                status = true;
    4f0a:	2001      	movs	r0, #1
    4f0c:	e008      	b.n	4f20 <Binary_Value_Present_Value_Write+0x48>
                    pObject->value = true;
    4f0e:	2301      	movs	r3, #1
    4f10:	7443      	strb	r3, [r0, #17]
                status = true;
    4f12:	2001      	movs	r0, #1
    4f14:	e004      	b.n	4f20 <Binary_Value_Present_Value_Write+0x48>
            *error_class = ERROR_CLASS_PROPERTY;
    4f16:	2302      	movs	r3, #2
    4f18:	8033      	strh	r3, [r6, #0]
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    4f1a:	3326      	adds	r3, #38	; 0x26
    4f1c:	802b      	strh	r3, [r5, #0]
    bool status = false;
    4f1e:	2000      	movs	r0, #0
}
    4f20:	bd70      	pop	{r4, r5, r6, pc}
    bool status = false;
    4f22:	2000      	movs	r0, #0
    4f24:	e7fc      	b.n	4f20 <Binary_Value_Present_Value_Write+0x48>
                status = true;
    4f26:	2001      	movs	r0, #1
    4f28:	e7fa      	b.n	4f20 <Binary_Value_Present_Value_Write+0x48>
    4f2a:	46c0      	nop			; (mov r8, r8)
    4f2c:	00004c5d 	.word	0x00004c5d

00004f30 <Binary_Value_Write_Property>:
{
    4f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f32:	b0fd      	sub	sp, #500	; 0x1f4
    4f34:	0004      	movs	r4, r0
        wp_data->application_data, wp_data->application_data_len, &value);
    4f36:	3010      	adds	r0, #16
    4f38:	23f8      	movs	r3, #248	; 0xf8
    4f3a:	005b      	lsls	r3, r3, #1
    4f3c:	58e1      	ldr	r1, [r4, r3]
    len = bacapp_decode_application_data(
    4f3e:	466a      	mov	r2, sp
    4f40:	4b2f      	ldr	r3, [pc, #188]	; (5000 <Binary_Value_Write_Property+0xd0>)
    4f42:	4798      	blx	r3
    if (len < 0) {
    4f44:	2800      	cmp	r0, #0
    4f46:	db10      	blt.n	4f6a <Binary_Value_Write_Property+0x3a>
    if ((wp_data->object_property != PROP_STATE_TEXT)
    4f48:	68a3      	ldr	r3, [r4, #8]
    4f4a:	2b6e      	cmp	r3, #110	; 0x6e
    4f4c:	d016      	beq.n	4f7c <Binary_Value_Write_Property+0x4c>
        && (wp_data->array_index != BACNET_ARRAY_ALL)) {
    4f4e:	68e2      	ldr	r2, [r4, #12]
    4f50:	3201      	adds	r2, #1
    4f52:	d013      	beq.n	4f7c <Binary_Value_Write_Property+0x4c>
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    4f54:	2202      	movs	r2, #2
    4f56:	23fb      	movs	r3, #251	; 0xfb
    4f58:	005b      	lsls	r3, r3, #1
    4f5a:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    4f5c:	3230      	adds	r2, #48	; 0x30
    4f5e:	3302      	adds	r3, #2
    4f60:	52e2      	strh	r2, [r4, r3]
        return false;
    4f62:	2500      	movs	r5, #0
}
    4f64:	0028      	movs	r0, r5
    4f66:	b07d      	add	sp, #500	; 0x1f4
    4f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    4f6a:	2202      	movs	r2, #2
    4f6c:	23fb      	movs	r3, #251	; 0xfb
    4f6e:	005b      	lsls	r3, r3, #1
    4f70:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    4f72:	3223      	adds	r2, #35	; 0x23
    4f74:	3302      	adds	r3, #2
    4f76:	52e2      	strh	r2, [r4, r3]
        return false;
    4f78:	2500      	movs	r5, #0
    4f7a:	e7f3      	b.n	4f64 <Binary_Value_Write_Property+0x34>
    switch (wp_data->object_property) {
    4f7c:	3b24      	subs	r3, #36	; 0x24
    4f7e:	2b4b      	cmp	r3, #75	; 0x4b
    4f80:	d834      	bhi.n	4fec <Binary_Value_Write_Property+0xbc>
    4f82:	009b      	lsls	r3, r3, #2
    4f84:	4a1f      	ldr	r2, [pc, #124]	; (5004 <Binary_Value_Write_Property+0xd4>)
    4f86:	58d3      	ldr	r3, [r2, r3]
    4f88:	469f      	mov	pc, r3
                = WPValidateArgType(&value, BACNET_APPLICATION_TAG_ENUMERATED,
    4f8a:	0026      	movs	r6, r4
    4f8c:	36f7      	adds	r6, #247	; 0xf7
    4f8e:	36ff      	adds	r6, #255	; 0xff
    4f90:	0027      	movs	r7, r4
    4f92:	37f9      	adds	r7, #249	; 0xf9
    4f94:	37ff      	adds	r7, #255	; 0xff
    4f96:	003b      	movs	r3, r7
    4f98:	0032      	movs	r2, r6
    4f9a:	2109      	movs	r1, #9
    4f9c:	4668      	mov	r0, sp
    4f9e:	4d1a      	ldr	r5, [pc, #104]	; (5008 <Binary_Value_Write_Property+0xd8>)
    4fa0:	47a8      	blx	r5
    4fa2:	1e05      	subs	r5, r0, #0
            if (status) {
    4fa4:	d0de      	beq.n	4f64 <Binary_Value_Write_Property+0x34>
                status = Binary_Value_Present_Value_Write(
    4fa6:	6820      	ldr	r0, [r4, #0]
    4fa8:	003b      	movs	r3, r7
    4faa:	0032      	movs	r2, r6
    4fac:	9902      	ldr	r1, [sp, #8]
    4fae:	4c17      	ldr	r4, [pc, #92]	; (500c <Binary_Value_Write_Property+0xdc>)
    4fb0:	47a0      	blx	r4
    4fb2:	0005      	movs	r5, r0
    4fb4:	e7d6      	b.n	4f64 <Binary_Value_Write_Property+0x34>
            status = WPValidateArgType(&value, BACNET_APPLICATION_TAG_BOOLEAN,
    4fb6:	0023      	movs	r3, r4
    4fb8:	33f9      	adds	r3, #249	; 0xf9
    4fba:	33ff      	adds	r3, #255	; 0xff
    4fbc:	0022      	movs	r2, r4
    4fbe:	32f7      	adds	r2, #247	; 0xf7
    4fc0:	32ff      	adds	r2, #255	; 0xff
    4fc2:	2101      	movs	r1, #1
    4fc4:	4668      	mov	r0, sp
    4fc6:	4d10      	ldr	r5, [pc, #64]	; (5008 <Binary_Value_Write_Property+0xd8>)
    4fc8:	47a8      	blx	r5
    4fca:	1e05      	subs	r5, r0, #0
            if (status) {
    4fcc:	d0ca      	beq.n	4f64 <Binary_Value_Write_Property+0x34>
                Binary_Value_Out_Of_Service_Set(
    4fce:	466b      	mov	r3, sp
    4fd0:	7a19      	ldrb	r1, [r3, #8]
    4fd2:	6820      	ldr	r0, [r4, #0]
    4fd4:	4b0e      	ldr	r3, [pc, #56]	; (5010 <Binary_Value_Write_Property+0xe0>)
    4fd6:	4798      	blx	r3
    4fd8:	e7c4      	b.n	4f64 <Binary_Value_Write_Property+0x34>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    4fda:	2202      	movs	r2, #2
    4fdc:	23fb      	movs	r3, #251	; 0xfb
    4fde:	005b      	lsls	r3, r3, #1
    4fe0:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    4fe2:	3226      	adds	r2, #38	; 0x26
    4fe4:	3302      	adds	r3, #2
    4fe6:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value */
    4fe8:	2500      	movs	r5, #0
            break;
    4fea:	e7bb      	b.n	4f64 <Binary_Value_Write_Property+0x34>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    4fec:	2202      	movs	r2, #2
    4fee:	23fb      	movs	r3, #251	; 0xfb
    4ff0:	005b      	lsls	r3, r3, #1
    4ff2:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    4ff4:	321e      	adds	r2, #30
    4ff6:	3302      	adds	r3, #2
    4ff8:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value */
    4ffa:	2500      	movs	r5, #0
            break;
    4ffc:	e7b2      	b.n	4f64 <Binary_Value_Write_Property+0x34>
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	00002871 	.word	0x00002871
    5004:	0000ec54 	.word	0x0000ec54
    5008:	00002239 	.word	0x00002239
    500c:	00004ed9 	.word	0x00004ed9
    5010:	00004eb5 	.word	0x00004eb5

00005014 <Device_Objects_Find_Functions>:
static struct my_object_functions *Device_Objects_Find_Functions(
    BACNET_OBJECT_TYPE Object_Type)
{
    struct my_object_functions *pObject = NULL;

    pObject = &Object_Table[0];
    5014:	4b05      	ldr	r3, [pc, #20]	; (502c <Device_Objects_Find_Functions+0x18>)
    while (pObject->Object_Type < MAX_BACNET_OBJECT_TYPE) {
    5016:	881a      	ldrh	r2, [r3, #0]
    5018:	4905      	ldr	r1, [pc, #20]	; (5030 <Device_Objects_Find_Functions+0x1c>)
    501a:	428a      	cmp	r2, r1
    501c:	d803      	bhi.n	5026 <Device_Objects_Find_Functions+0x12>
        /* handle each object type */
        if (pObject->Object_Type == Object_Type) {
    501e:	4282      	cmp	r2, r0
    5020:	d002      	beq.n	5028 <Device_Objects_Find_Functions+0x14>
            return (pObject);
        }

        pObject++;
    5022:	3324      	adds	r3, #36	; 0x24
    5024:	e7f7      	b.n	5016 <Device_Objects_Find_Functions+0x2>
    }

    return (NULL);
    5026:	2300      	movs	r3, #0
}
    5028:	0018      	movs	r0, r3
    502a:	4770      	bx	lr
    502c:	20000150 	.word	0x20000150
    5030:	000003ff 	.word	0x000003ff

00005034 <Device_Property_Lists>:
}

void Device_Property_Lists(
    const int **pRequired, const int **pOptional, const int **pProprietary)
{
    if (pRequired)
    5034:	2800      	cmp	r0, #0
    5036:	d001      	beq.n	503c <Device_Property_Lists+0x8>
        *pRequired = Device_Properties_Required;
    5038:	4b05      	ldr	r3, [pc, #20]	; (5050 <Device_Property_Lists+0x1c>)
    503a:	6003      	str	r3, [r0, #0]
    if (pOptional)
    503c:	2900      	cmp	r1, #0
    503e:	d001      	beq.n	5044 <Device_Property_Lists+0x10>
        *pOptional = Device_Properties_Optional;
    5040:	4b04      	ldr	r3, [pc, #16]	; (5054 <Device_Property_Lists+0x20>)
    5042:	600b      	str	r3, [r1, #0]
    if (pProprietary)
    5044:	2a00      	cmp	r2, #0
    5046:	d001      	beq.n	504c <Device_Property_Lists+0x18>
        *pProprietary = Device_Properties_Proprietary;
    5048:	4b03      	ldr	r3, [pc, #12]	; (5058 <Device_Property_Lists+0x24>)
    504a:	6013      	str	r3, [r2, #0]

    return;
}
    504c:	4770      	bx	lr
    504e:	46c0      	nop			; (mov r8, r8)
    5050:	0000f290 	.word	0x0000f290
    5054:	0000f278 	.word	0x0000f278
    5058:	0000f28c 	.word	0x0000f28c

0000505c <Device_Count>:

unsigned Device_Count(void)
{
    return 1;
}
    505c:	2001      	movs	r0, #1
    505e:	4770      	bx	lr

00005060 <Device_Index_To_Instance>:

uint32_t Device_Index_To_Instance(unsigned index)
{
    (void)index;
    return Object_Instance_Number;
    5060:	4b01      	ldr	r3, [pc, #4]	; (5068 <Device_Index_To_Instance+0x8>)
    5062:	6818      	ldr	r0, [r3, #0]
}
    5064:	4770      	bx	lr
    5066:	46c0      	nop			; (mov r8, r8)
    5068:	2000014c 	.word	0x2000014c

0000506c <Device_Valid_Object_Instance_Number>:
    return status;
}

bool Device_Valid_Object_Instance_Number(uint32_t object_id)
{
    return (Object_Instance_Number == object_id);
    506c:	4b03      	ldr	r3, [pc, #12]	; (507c <Device_Valid_Object_Instance_Number+0x10>)
    506e:	681b      	ldr	r3, [r3, #0]
    5070:	1a18      	subs	r0, r3, r0
    5072:	4243      	negs	r3, r0
    5074:	4158      	adcs	r0, r3
    5076:	b2c0      	uxtb	r0, r0
}
    5078:	4770      	bx	lr
    507a:	46c0      	nop			; (mov r8, r8)
    507c:	2000014c 	.word	0x2000014c

00005080 <Device_Object_Name>:
{
    5080:	b510      	push	{r4, lr}
    5082:	000a      	movs	r2, r1
    if (object_instance == Object_Instance_Number) {
    5084:	4b05      	ldr	r3, [pc, #20]	; (509c <Device_Object_Name+0x1c>)
    5086:	681b      	ldr	r3, [r3, #0]
    5088:	4283      	cmp	r3, r0
    508a:	d001      	beq.n	5090 <Device_Object_Name+0x10>
    bool status = false;
    508c:	2000      	movs	r0, #0
}
    508e:	bd10      	pop	{r4, pc}
        status = characterstring_copy(object_name, &My_Object_Name);
    5090:	4903      	ldr	r1, [pc, #12]	; (50a0 <Device_Object_Name+0x20>)
    5092:	0010      	movs	r0, r2
    5094:	4b03      	ldr	r3, [pc, #12]	; (50a4 <Device_Object_Name+0x24>)
    5096:	4798      	blx	r3
    5098:	e7f9      	b.n	508e <Device_Object_Name+0xe>
    509a:	46c0      	nop			; (mov r8, r8)
    509c:	2000014c 	.word	0x2000014c
    50a0:	20000af4 	.word	0x20000af4
    50a4:	000040a9 	.word	0x000040a9

000050a8 <Device_Write_Property>:
{
    50a8:	b570      	push	{r4, r5, r6, lr}
    50aa:	0004      	movs	r4, r0
    pObject = Device_Objects_Find_Functions(wp_data->object_type);
    50ac:	8880      	ldrh	r0, [r0, #4]
    50ae:	4b16      	ldr	r3, [pc, #88]	; (5108 <Device_Write_Property+0x60>)
    50b0:	4798      	blx	r3
    50b2:	1e05      	subs	r5, r0, #0
    if (pObject) {
    50b4:	d01e      	beq.n	50f4 <Device_Write_Property+0x4c>
        if (pObject->Object_Valid_Instance &&
    50b6:	6903      	ldr	r3, [r0, #16]
    50b8:	2b00      	cmp	r3, #0
    50ba:	d012      	beq.n	50e2 <Device_Write_Property+0x3a>
            pObject->Object_Valid_Instance(wp_data->object_instance)) {
    50bc:	6820      	ldr	r0, [r4, #0]
    50be:	4798      	blx	r3
        if (pObject->Object_Valid_Instance &&
    50c0:	2800      	cmp	r0, #0
    50c2:	d00e      	beq.n	50e2 <Device_Write_Property+0x3a>
            if (pObject->Object_Write_Property) {
    50c4:	69eb      	ldr	r3, [r5, #28]
    50c6:	2b00      	cmp	r3, #0
    50c8:	d002      	beq.n	50d0 <Device_Write_Property+0x28>
                status = pObject->Object_Write_Property(wp_data);
    50ca:	0020      	movs	r0, r4
    50cc:	4798      	blx	r3
    50ce:	e010      	b.n	50f2 <Device_Write_Property+0x4a>
                wp_data->error_class = ERROR_CLASS_PROPERTY;
    50d0:	2202      	movs	r2, #2
    50d2:	23fb      	movs	r3, #251	; 0xfb
    50d4:	005b      	lsls	r3, r3, #1
    50d6:	52e2      	strh	r2, [r4, r3]
                wp_data->error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    50d8:	3226      	adds	r2, #38	; 0x26
    50da:	3302      	adds	r3, #2
    50dc:	52e2      	strh	r2, [r4, r3]
    bool status = false;
    50de:	2000      	movs	r0, #0
    50e0:	e007      	b.n	50f2 <Device_Write_Property+0x4a>
            wp_data->error_class = ERROR_CLASS_OBJECT;
    50e2:	2201      	movs	r2, #1
    50e4:	23fb      	movs	r3, #251	; 0xfb
    50e6:	005b      	lsls	r3, r3, #1
    50e8:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_UNKNOWN_OBJECT;
    50ea:	321e      	adds	r2, #30
    50ec:	3302      	adds	r3, #2
    50ee:	52e2      	strh	r2, [r4, r3]
    bool status = false;
    50f0:	2000      	movs	r0, #0
}
    50f2:	bd70      	pop	{r4, r5, r6, pc}
        wp_data->error_class = ERROR_CLASS_OBJECT;
    50f4:	2201      	movs	r2, #1
    50f6:	23fb      	movs	r3, #251	; 0xfb
    50f8:	005b      	lsls	r3, r3, #1
    50fa:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_UNKNOWN_OBJECT;
    50fc:	321e      	adds	r2, #30
    50fe:	3302      	adds	r3, #2
    5100:	52e2      	strh	r2, [r4, r3]
    bool status = false;
    5102:	2000      	movs	r0, #0
    5104:	e7f5      	b.n	50f2 <Device_Write_Property+0x4a>
    5106:	46c0      	nop			; (mov r8, r8)
    5108:	00005015 	.word	0x00005015

0000510c <Device_Objects_Property_List>:
{
    510c:	b510      	push	{r4, lr}
    510e:	0014      	movs	r4, r2
    pPropertyList->Required.pList = NULL;
    5110:	2300      	movs	r3, #0
    5112:	6013      	str	r3, [r2, #0]
    pPropertyList->Optional.pList = NULL;
    5114:	6093      	str	r3, [r2, #8]
    pPropertyList->Proprietary.pList = NULL;
    5116:	6113      	str	r3, [r2, #16]
    pObject = Device_Objects_Find_Functions(object_type);
    5118:	4b12      	ldr	r3, [pc, #72]	; (5164 <Device_Objects_Property_List+0x58>)
    511a:	4798      	blx	r3
    if ((pObject != NULL) && (pObject->Object_RPM_List != NULL)) {
    511c:	2800      	cmp	r0, #0
    511e:	d008      	beq.n	5132 <Device_Objects_Property_List+0x26>
    5120:	6a03      	ldr	r3, [r0, #32]
    5122:	2b00      	cmp	r3, #0
    5124:	d005      	beq.n	5132 <Device_Objects_Property_List+0x26>
        pObject->Object_RPM_List(&pPropertyList->Required.pList,
    5126:	0022      	movs	r2, r4
    5128:	3210      	adds	r2, #16
    512a:	0021      	movs	r1, r4
    512c:	3108      	adds	r1, #8
    512e:	0020      	movs	r0, r4
    5130:	4798      	blx	r3
    pPropertyList->Required.count = pPropertyList->Required.pList == NULL
    5132:	6820      	ldr	r0, [r4, #0]
        : property_list_count(pPropertyList->Required.pList);
    5134:	2800      	cmp	r0, #0
    5136:	d00f      	beq.n	5158 <Device_Objects_Property_List+0x4c>
    5138:	4b0b      	ldr	r3, [pc, #44]	; (5168 <Device_Objects_Property_List+0x5c>)
    513a:	4798      	blx	r3
    pPropertyList->Required.count = pPropertyList->Required.pList == NULL
    513c:	6060      	str	r0, [r4, #4]
    pPropertyList->Optional.count = pPropertyList->Optional.pList == NULL
    513e:	68a0      	ldr	r0, [r4, #8]
        : property_list_count(pPropertyList->Optional.pList);
    5140:	2800      	cmp	r0, #0
    5142:	d00b      	beq.n	515c <Device_Objects_Property_List+0x50>
    5144:	4b08      	ldr	r3, [pc, #32]	; (5168 <Device_Objects_Property_List+0x5c>)
    5146:	4798      	blx	r3
    pPropertyList->Optional.count = pPropertyList->Optional.pList == NULL
    5148:	60e0      	str	r0, [r4, #12]
    pPropertyList->Proprietary.count = pPropertyList->Proprietary.pList == NULL
    514a:	6920      	ldr	r0, [r4, #16]
        : property_list_count(pPropertyList->Proprietary.pList);
    514c:	2800      	cmp	r0, #0
    514e:	d007      	beq.n	5160 <Device_Objects_Property_List+0x54>
    5150:	4b05      	ldr	r3, [pc, #20]	; (5168 <Device_Objects_Property_List+0x5c>)
    5152:	4798      	blx	r3
    pPropertyList->Proprietary.count = pPropertyList->Proprietary.pList == NULL
    5154:	6160      	str	r0, [r4, #20]
}
    5156:	bd10      	pop	{r4, pc}
        : property_list_count(pPropertyList->Required.pList);
    5158:	2000      	movs	r0, #0
    515a:	e7ef      	b.n	513c <Device_Objects_Property_List+0x30>
        : property_list_count(pPropertyList->Optional.pList);
    515c:	2000      	movs	r0, #0
    515e:	e7f3      	b.n	5148 <Device_Objects_Property_List+0x3c>
        : property_list_count(pPropertyList->Proprietary.pList);
    5160:	2000      	movs	r0, #0
    5162:	e7f7      	b.n	5154 <Device_Objects_Property_List+0x48>
    5164:	00005015 	.word	0x00005015
    5168:	0000a83d 	.word	0x0000a83d

0000516c <Read_Property_Common>:
{
    516c:	b570      	push	{r4, r5, r6, lr}
    516e:	b0fe      	sub	sp, #504	; 0x1f8
    5170:	0006      	movs	r6, r0
    5172:	000c      	movs	r4, r1
    if ((rpdata->application_data == NULL) ||
    5174:	690d      	ldr	r5, [r1, #16]
    5176:	2d00      	cmp	r5, #0
    5178:	d05f      	beq.n	523a <Read_Property_Common+0xce>
        (rpdata->application_data_len == 0)) {
    517a:	6948      	ldr	r0, [r1, #20]
    if ((rpdata->application_data == NULL) ||
    517c:	2800      	cmp	r0, #0
    517e:	d014      	beq.n	51aa <Read_Property_Common+0x3e>
    switch (rpdata->object_property) {
    5180:	688b      	ldr	r3, [r1, #8]
    5182:	2b4d      	cmp	r3, #77	; 0x4d
    5184:	d02b      	beq.n	51de <Read_Property_Common+0x72>
    5186:	d912      	bls.n	51ae <Read_Property_Common+0x42>
    5188:	2b4f      	cmp	r3, #79	; 0x4f
    518a:	d041      	beq.n	5210 <Read_Property_Common+0xa4>
    518c:	2274      	movs	r2, #116	; 0x74
    518e:	32ff      	adds	r2, #255	; 0xff
    5190:	4293      	cmp	r3, r2
    5192:	d14c      	bne.n	522e <Read_Property_Common+0xc2>
            Device_Objects_Property_List(
    5194:	8808      	ldrh	r0, [r1, #0]
    5196:	466a      	mov	r2, sp
    5198:	6849      	ldr	r1, [r1, #4]
    519a:	4b2a      	ldr	r3, [pc, #168]	; (5244 <Read_Property_Common+0xd8>)
    519c:	4798      	blx	r3
            apdu_len = property_list_encode(rpdata,
    519e:	9a02      	ldr	r2, [sp, #8]
    51a0:	9b04      	ldr	r3, [sp, #16]
    51a2:	9900      	ldr	r1, [sp, #0]
    51a4:	0020      	movs	r0, r4
    51a6:	4c28      	ldr	r4, [pc, #160]	; (5248 <Read_Property_Common+0xdc>)
    51a8:	47a0      	blx	r4
}
    51aa:	b07e      	add	sp, #504	; 0x1f8
    51ac:	bd70      	pop	{r4, r5, r6, pc}
    switch (rpdata->object_property) {
    51ae:	2b4b      	cmp	r3, #75	; 0x4b
    51b0:	d13d      	bne.n	522e <Read_Property_Common+0xc2>
            if (rpdata->array_index != BACNET_ARRAY_ALL) {
    51b2:	68cb      	ldr	r3, [r1, #12]
    51b4:	3301      	adds	r3, #1
    51b6:	d107      	bne.n	51c8 <Read_Property_Common+0x5c>
                if (rpdata->object_type == OBJECT_DEVICE) {
    51b8:	8809      	ldrh	r1, [r1, #0]
    51ba:	2908      	cmp	r1, #8
    51bc:	d00b      	beq.n	51d6 <Read_Property_Common+0x6a>
                apdu_len = encode_application_object_id(
    51be:	6862      	ldr	r2, [r4, #4]
    51c0:	0028      	movs	r0, r5
    51c2:	4b22      	ldr	r3, [pc, #136]	; (524c <Read_Property_Common+0xe0>)
    51c4:	4798      	blx	r3
    51c6:	e7f0      	b.n	51aa <Read_Property_Common+0x3e>
                rpdata->error_class = ERROR_CLASS_PROPERTY;
    51c8:	2302      	movs	r3, #2
    51ca:	830b      	strh	r3, [r1, #24]
                rpdata->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    51cc:	3330      	adds	r3, #48	; 0x30
    51ce:	834b      	strh	r3, [r1, #26]
                apdu_len = BACNET_STATUS_ERROR;
    51d0:	2001      	movs	r0, #1
    51d2:	4240      	negs	r0, r0
    51d4:	e7e9      	b.n	51aa <Read_Property_Common+0x3e>
                    rpdata->object_instance = Object_Instance_Number;
    51d6:	4b1e      	ldr	r3, [pc, #120]	; (5250 <Read_Property_Common+0xe4>)
    51d8:	681b      	ldr	r3, [r3, #0]
    51da:	6063      	str	r3, [r4, #4]
    51dc:	e7ef      	b.n	51be <Read_Property_Common+0x52>
            if (rpdata->array_index != BACNET_ARRAY_ALL) {
    51de:	68cb      	ldr	r3, [r1, #12]
    51e0:	3301      	adds	r3, #1
    51e2:	d10e      	bne.n	5202 <Read_Property_Common+0x96>
                characterstring_init_ansi(&char_string, "");
    51e4:	491b      	ldr	r1, [pc, #108]	; (5254 <Read_Property_Common+0xe8>)
    51e6:	a806      	add	r0, sp, #24
    51e8:	4b1b      	ldr	r3, [pc, #108]	; (5258 <Read_Property_Common+0xec>)
    51ea:	4798      	blx	r3
                if (pObject->Object_Name) {
    51ec:	6973      	ldr	r3, [r6, #20]
    51ee:	2b00      	cmp	r3, #0
    51f0:	d002      	beq.n	51f8 <Read_Property_Common+0x8c>
                    (void)pObject->Object_Name(
    51f2:	6860      	ldr	r0, [r4, #4]
    51f4:	a906      	add	r1, sp, #24
    51f6:	4798      	blx	r3
                apdu_len =
    51f8:	a906      	add	r1, sp, #24
    51fa:	0028      	movs	r0, r5
    51fc:	4b17      	ldr	r3, [pc, #92]	; (525c <Read_Property_Common+0xf0>)
    51fe:	4798      	blx	r3
    5200:	e7d3      	b.n	51aa <Read_Property_Common+0x3e>
                rpdata->error_class = ERROR_CLASS_PROPERTY;
    5202:	2302      	movs	r3, #2
    5204:	830b      	strh	r3, [r1, #24]
                rpdata->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    5206:	3330      	adds	r3, #48	; 0x30
    5208:	834b      	strh	r3, [r1, #26]
                apdu_len = BACNET_STATUS_ERROR;
    520a:	2001      	movs	r0, #1
    520c:	4240      	negs	r0, r0
    520e:	e7cc      	b.n	51aa <Read_Property_Common+0x3e>
            if (rpdata->array_index != BACNET_ARRAY_ALL) {
    5210:	68cb      	ldr	r3, [r1, #12]
    5212:	3301      	adds	r3, #1
    5214:	d104      	bne.n	5220 <Read_Property_Common+0xb4>
                    &apdu[0], rpdata->object_type);
    5216:	8809      	ldrh	r1, [r1, #0]
                apdu_len = encode_application_enumerated(
    5218:	0028      	movs	r0, r5
    521a:	4b11      	ldr	r3, [pc, #68]	; (5260 <Read_Property_Common+0xf4>)
    521c:	4798      	blx	r3
    521e:	e7c4      	b.n	51aa <Read_Property_Common+0x3e>
                rpdata->error_class = ERROR_CLASS_PROPERTY;
    5220:	2302      	movs	r3, #2
    5222:	830b      	strh	r3, [r1, #24]
                rpdata->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    5224:	3330      	adds	r3, #48	; 0x30
    5226:	834b      	strh	r3, [r1, #26]
                apdu_len = BACNET_STATUS_ERROR;
    5228:	2001      	movs	r0, #1
    522a:	4240      	negs	r0, r0
    522c:	e7bd      	b.n	51aa <Read_Property_Common+0x3e>
            if (pObject->Object_Read_Property) {
    522e:	69b3      	ldr	r3, [r6, #24]
    5230:	2b00      	cmp	r3, #0
    5232:	d004      	beq.n	523e <Read_Property_Common+0xd2>
                apdu_len = pObject->Object_Read_Property(rpdata);
    5234:	0020      	movs	r0, r4
    5236:	4798      	blx	r3
    5238:	e7b7      	b.n	51aa <Read_Property_Common+0x3e>
        return 0;
    523a:	2000      	movs	r0, #0
    523c:	e7b5      	b.n	51aa <Read_Property_Common+0x3e>
    int apdu_len = BACNET_STATUS_ERROR;
    523e:	2001      	movs	r0, #1
    5240:	4240      	negs	r0, r0
    5242:	e7b2      	b.n	51aa <Read_Property_Common+0x3e>
    5244:	0000510d 	.word	0x0000510d
    5248:	0000a855 	.word	0x0000a855
    524c:	0000316d 	.word	0x0000316d
    5250:	2000014c 	.word	0x2000014c
    5254:	0000f9a8 	.word	0x0000f9a8
    5258:	00003f75 	.word	0x00003f75
    525c:	000032dd 	.word	0x000032dd
    5260:	000036f1 	.word	0x000036f1

00005264 <Device_Read_Property>:
{
    5264:	b570      	push	{r4, r5, r6, lr}
    5266:	0004      	movs	r4, r0
    pObject = Device_Objects_Find_Functions(rpdata->object_type);
    5268:	8800      	ldrh	r0, [r0, #0]
    526a:	4b0f      	ldr	r3, [pc, #60]	; (52a8 <Device_Read_Property+0x44>)
    526c:	4798      	blx	r3
    526e:	1e05      	subs	r5, r0, #0
    if (pObject) {
    5270:	d012      	beq.n	5298 <Device_Read_Property+0x34>
        if (pObject->Object_Valid_Instance &&
    5272:	6903      	ldr	r3, [r0, #16]
    5274:	2b00      	cmp	r3, #0
    5276:	d008      	beq.n	528a <Device_Read_Property+0x26>
            pObject->Object_Valid_Instance(rpdata->object_instance)) {
    5278:	6860      	ldr	r0, [r4, #4]
    527a:	4798      	blx	r3
        if (pObject->Object_Valid_Instance &&
    527c:	2800      	cmp	r0, #0
    527e:	d004      	beq.n	528a <Device_Read_Property+0x26>
            apdu_len = Read_Property_Common(pObject, rpdata);
    5280:	0021      	movs	r1, r4
    5282:	0028      	movs	r0, r5
    5284:	4b09      	ldr	r3, [pc, #36]	; (52ac <Device_Read_Property+0x48>)
    5286:	4798      	blx	r3
}
    5288:	bd70      	pop	{r4, r5, r6, pc}
            rpdata->error_class = ERROR_CLASS_OBJECT;
    528a:	2301      	movs	r3, #1
    528c:	8323      	strh	r3, [r4, #24]
            rpdata->error_code = ERROR_CODE_UNKNOWN_OBJECT;
    528e:	331e      	adds	r3, #30
    5290:	8363      	strh	r3, [r4, #26]
    int apdu_len = BACNET_STATUS_ERROR;
    5292:	2001      	movs	r0, #1
    5294:	4240      	negs	r0, r0
    5296:	e7f7      	b.n	5288 <Device_Read_Property+0x24>
        rpdata->error_class = ERROR_CLASS_OBJECT;
    5298:	2301      	movs	r3, #1
    529a:	8323      	strh	r3, [r4, #24]
        rpdata->error_code = ERROR_CODE_UNKNOWN_OBJECT;
    529c:	331e      	adds	r3, #30
    529e:	8363      	strh	r3, [r4, #26]
    int apdu_len = BACNET_STATUS_ERROR;
    52a0:	2001      	movs	r0, #1
    52a2:	4240      	negs	r0, r0
    return apdu_len;
    52a4:	e7f0      	b.n	5288 <Device_Read_Property+0x24>
    52a6:	46c0      	nop			; (mov r8, r8)
    52a8:	00005015 	.word	0x00005015
    52ac:	0000516d 	.word	0x0000516d

000052b0 <Device_Reinitialize>:
{
    52b0:	b570      	push	{r4, r5, r6, lr}
    52b2:	0005      	movs	r5, r0
    if (characterstring_ansi_same(&rd_data->password, Reinit_Password)) {
    52b4:	3004      	adds	r0, #4
    52b6:	491c      	ldr	r1, [pc, #112]	; (5328 <Device_Reinitialize+0x78>)
    52b8:	4b1c      	ldr	r3, [pc, #112]	; (532c <Device_Reinitialize+0x7c>)
    52ba:	4798      	blx	r3
    52bc:	1e04      	subs	r4, r0, #0
    52be:	d02a      	beq.n	5316 <Device_Reinitialize+0x66>
        switch (rd_data->state) {
    52c0:	782b      	ldrb	r3, [r5, #0]
    52c2:	2b01      	cmp	r3, #1
    52c4:	d90e      	bls.n	52e4 <Device_Reinitialize+0x34>
    52c6:	2b06      	cmp	r3, #6
    52c8:	d81c      	bhi.n	5304 <Device_Reinitialize+0x54>
                if (dcc_communication_disabled()) {
    52ca:	4b19      	ldr	r3, [pc, #100]	; (5330 <Device_Reinitialize+0x80>)
    52cc:	4798      	blx	r3
    52ce:	1e04      	subs	r4, r0, #0
    52d0:	d010      	beq.n	52f4 <Device_Reinitialize+0x44>
                    rd_data->error_class = ERROR_CLASS_SERVICES;
    52d2:	2205      	movs	r2, #5
    52d4:	23f2      	movs	r3, #242	; 0xf2
    52d6:	005b      	lsls	r3, r3, #1
    52d8:	52ea      	strh	r2, [r5, r3]
                    rd_data->error_code = ERROR_CODE_COMMUNICATION_DISABLED;
    52da:	324e      	adds	r2, #78	; 0x4e
    52dc:	3302      	adds	r3, #2
    52de:	52ea      	strh	r2, [r5, r3]
    bool status = false;
    52e0:	2400      	movs	r4, #0
    52e2:	e01f      	b.n	5324 <Device_Reinitialize+0x74>
                dcc_set_status_duration(COMMUNICATION_ENABLE, 0);
    52e4:	2100      	movs	r1, #0
    52e6:	2000      	movs	r0, #0
    52e8:	4b12      	ldr	r3, [pc, #72]	; (5334 <Device_Reinitialize+0x84>)
    52ea:	4798      	blx	r3
                Reinitialize_State = rd_data->state;
    52ec:	782a      	ldrb	r2, [r5, #0]
    52ee:	4b12      	ldr	r3, [pc, #72]	; (5338 <Device_Reinitialize+0x88>)
    52f0:	701a      	strb	r2, [r3, #0]
                break;
    52f2:	e017      	b.n	5324 <Device_Reinitialize+0x74>
                    rd_data->error_class = ERROR_CLASS_SERVICES;
    52f4:	2205      	movs	r2, #5
    52f6:	23f2      	movs	r3, #242	; 0xf2
    52f8:	005b      	lsls	r3, r3, #1
    52fa:	52ea      	strh	r2, [r5, r3]
                    rd_data->error_code =
    52fc:	3228      	adds	r2, #40	; 0x28
    52fe:	3302      	adds	r3, #2
    5300:	52ea      	strh	r2, [r5, r3]
    5302:	e00f      	b.n	5324 <Device_Reinitialize+0x74>
                rd_data->error_class = ERROR_CLASS_SERVICES;
    5304:	2205      	movs	r2, #5
    5306:	23f2      	movs	r3, #242	; 0xf2
    5308:	005b      	lsls	r3, r3, #1
    530a:	52ea      	strh	r2, [r5, r3]
                rd_data->error_code = ERROR_CODE_PARAMETER_OUT_OF_RANGE;
    530c:	324b      	adds	r2, #75	; 0x4b
    530e:	3302      	adds	r3, #2
    5310:	52ea      	strh	r2, [r5, r3]
    bool status = false;
    5312:	2400      	movs	r4, #0
                break;
    5314:	e006      	b.n	5324 <Device_Reinitialize+0x74>
        rd_data->error_class = ERROR_CLASS_SECURITY;
    5316:	2204      	movs	r2, #4
    5318:	23f2      	movs	r3, #242	; 0xf2
    531a:	005b      	lsls	r3, r3, #1
    531c:	52ea      	strh	r2, [r5, r3]
        rd_data->error_code = ERROR_CODE_PASSWORD_FAILURE;
    531e:	3216      	adds	r2, #22
    5320:	3302      	adds	r3, #2
    5322:	52ea      	strh	r2, [r5, r3]
}
    5324:	0020      	movs	r0, r4
    5326:	bd70      	pop	{r4, r5, r6, pc}
    5328:	0000f358 	.word	0x0000f358
    532c:	00004009 	.word	0x00004009
    5330:	00004165 	.word	0x00004165
    5334:	000041bd 	.word	0x000041bd
    5338:	2000024c 	.word	0x2000024c

0000533c <Device_Init>:
{
    533c:	b510      	push	{r4, lr}
    pObject = &Object_Table[0];
    533e:	4c10      	ldr	r4, [pc, #64]	; (5380 <Device_Init+0x44>)
    while (pObject->Object_Type < MAX_BACNET_OBJECT_TYPE) {
    5340:	e000      	b.n	5344 <Device_Init+0x8>
        pObject++;
    5342:	3424      	adds	r4, #36	; 0x24
    while (pObject->Object_Type < MAX_BACNET_OBJECT_TYPE) {
    5344:	8822      	ldrh	r2, [r4, #0]
    5346:	4b0f      	ldr	r3, [pc, #60]	; (5384 <Device_Init+0x48>)
    5348:	429a      	cmp	r2, r3
    534a:	d804      	bhi.n	5356 <Device_Init+0x1a>
        if (pObject->Object_Init) {
    534c:	6863      	ldr	r3, [r4, #4]
    534e:	2b00      	cmp	r3, #0
    5350:	d0f7      	beq.n	5342 <Device_Init+0x6>
            pObject->Object_Init();
    5352:	4798      	blx	r3
    5354:	e7f5      	b.n	5342 <Device_Init+0x6>
    dcc_set_status_duration(COMMUNICATION_ENABLE, 0);
    5356:	2100      	movs	r1, #0
    5358:	2000      	movs	r0, #0
    535a:	4b0b      	ldr	r3, [pc, #44]	; (5388 <Device_Init+0x4c>)
    535c:	4798      	blx	r3
    if (Object_Instance_Number >= BACNET_MAX_INSTANCE) {
    535e:	4b0b      	ldr	r3, [pc, #44]	; (538c <Device_Init+0x50>)
    5360:	681a      	ldr	r2, [r3, #0]
    5362:	4b0b      	ldr	r3, [pc, #44]	; (5390 <Device_Init+0x54>)
    5364:	429a      	cmp	r2, r3
    5366:	d804      	bhi.n	5372 <Device_Init+0x36>
    characterstring_init_ansi(&My_Object_Name, Device_Name_Default);
    5368:	490a      	ldr	r1, [pc, #40]	; (5394 <Device_Init+0x58>)
    536a:	480b      	ldr	r0, [pc, #44]	; (5398 <Device_Init+0x5c>)
    536c:	4b0b      	ldr	r3, [pc, #44]	; (539c <Device_Init+0x60>)
    536e:	4798      	blx	r3
}
    5370:	bd10      	pop	{r4, pc}
        Object_Instance_Number = 103;
    5372:	2267      	movs	r2, #103	; 0x67
    5374:	4b05      	ldr	r3, [pc, #20]	; (538c <Device_Init+0x50>)
    5376:	601a      	str	r2, [r3, #0]
        srand(Object_Instance_Number);
    5378:	2067      	movs	r0, #103	; 0x67
    537a:	4b09      	ldr	r3, [pc, #36]	; (53a0 <Device_Init+0x64>)
    537c:	4798      	blx	r3
    537e:	e7f3      	b.n	5368 <Device_Init+0x2c>
    5380:	20000150 	.word	0x20000150
    5384:	000003ff 	.word	0x000003ff
    5388:	000041bd 	.word	0x000041bd
    538c:	2000014c 	.word	0x2000014c
    5390:	003ffffe 	.word	0x003ffffe
    5394:	0000f26c 	.word	0x0000f26c
    5398:	20000af4 	.word	0x20000af4
    539c:	00003f75 	.word	0x00003f75
    53a0:	0000db31 	.word	0x0000db31

000053a4 <Device_Object_Instance_Number>:
    return Object_Instance_Number;
    53a4:	4b01      	ldr	r3, [pc, #4]	; (53ac <Device_Object_Instance_Number+0x8>)
    53a6:	6818      	ldr	r0, [r3, #0]
}
    53a8:	4770      	bx	lr
    53aa:	46c0      	nop			; (mov r8, r8)
    53ac:	2000014c 	.word	0x2000014c

000053b0 <Device_Set_Object_Instance_Number>:
    if (object_id <= BACNET_MAX_INSTANCE) {
    53b0:	4b04      	ldr	r3, [pc, #16]	; (53c4 <Device_Set_Object_Instance_Number+0x14>)
    53b2:	4298      	cmp	r0, r3
    53b4:	d803      	bhi.n	53be <Device_Set_Object_Instance_Number+0xe>
        Object_Instance_Number = object_id;
    53b6:	4b04      	ldr	r3, [pc, #16]	; (53c8 <Device_Set_Object_Instance_Number+0x18>)
    53b8:	6018      	str	r0, [r3, #0]
    bool status = true; /* return value */
    53ba:	2001      	movs	r0, #1
}
    53bc:	4770      	bx	lr
        status = false;
    53be:	2000      	movs	r0, #0
    53c0:	e7fc      	b.n	53bc <Device_Set_Object_Instance_Number+0xc>
    53c2:	46c0      	nop			; (mov r8, r8)
    53c4:	003fffff 	.word	0x003fffff
    53c8:	2000014c 	.word	0x2000014c

000053cc <Device_System_Status>:

BACNET_DEVICE_STATUS Device_System_Status(void)
{
    return System_Status;
    53cc:	4b01      	ldr	r3, [pc, #4]	; (53d4 <Device_System_Status+0x8>)
    53ce:	7818      	ldrb	r0, [r3, #0]
}
    53d0:	4770      	bx	lr
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	20000cd4 	.word	0x20000cd4

000053d8 <Device_Vendor_Identifier>:
}

uint16_t Device_Vendor_Identifier(void)
{
    return BACNET_VENDOR_ID;
}
    53d8:	20ff      	movs	r0, #255	; 0xff
    53da:	0040      	lsls	r0, r0, #1
    53dc:	4770      	bx	lr

000053de <Device_Segmentation_Supported>:

BACNET_SEGMENTATION Device_Segmentation_Supported(void)
{
    return SEGMENTATION_NONE;
}
    53de:	2003      	movs	r0, #3
    53e0:	4770      	bx	lr
	...

000053e4 <Device_Database_Revision>:

uint32_t Device_Database_Revision(void)
{
    return Database_Revision;
    53e4:	4b01      	ldr	r3, [pc, #4]	; (53ec <Device_Database_Revision+0x8>)
    53e6:	6818      	ldr	r0, [r3, #0]
}
    53e8:	4770      	bx	lr
    53ea:	46c0      	nop			; (mov r8, r8)
    53ec:	20000af0 	.word	0x20000af0

000053f0 <Device_Inc_Database_Revision>:

void Device_Inc_Database_Revision(void)
{
    Database_Revision++;
    53f0:	4a02      	ldr	r2, [pc, #8]	; (53fc <Device_Inc_Database_Revision+0xc>)
    53f2:	6813      	ldr	r3, [r2, #0]
    53f4:	3301      	adds	r3, #1
    53f6:	6013      	str	r3, [r2, #0]
}
    53f8:	4770      	bx	lr
    53fa:	46c0      	nop			; (mov r8, r8)
    53fc:	20000af0 	.word	0x20000af0

00005400 <Device_Set_Object_Name>:
{
    5400:	b510      	push	{r4, lr}
    5402:	0004      	movs	r4, r0
    if (!characterstring_same(&My_Object_Name, object_name)) {
    5404:	0001      	movs	r1, r0
    5406:	4808      	ldr	r0, [pc, #32]	; (5428 <Device_Set_Object_Name+0x28>)
    5408:	4b08      	ldr	r3, [pc, #32]	; (542c <Device_Set_Object_Name+0x2c>)
    540a:	4798      	blx	r3
    540c:	2800      	cmp	r0, #0
    540e:	d002      	beq.n	5416 <Device_Set_Object_Name+0x16>
    bool status = false; /*return value */
    5410:	2400      	movs	r4, #0
}
    5412:	0020      	movs	r0, r4
    5414:	bd10      	pop	{r4, pc}
        status = characterstring_copy(&My_Object_Name, object_name);
    5416:	0021      	movs	r1, r4
    5418:	4803      	ldr	r0, [pc, #12]	; (5428 <Device_Set_Object_Name+0x28>)
    541a:	4b05      	ldr	r3, [pc, #20]	; (5430 <Device_Set_Object_Name+0x30>)
    541c:	4798      	blx	r3
    541e:	0004      	movs	r4, r0
        Device_Inc_Database_Revision();
    5420:	4b04      	ldr	r3, [pc, #16]	; (5434 <Device_Set_Object_Name+0x34>)
    5422:	4798      	blx	r3
    5424:	e7f5      	b.n	5412 <Device_Set_Object_Name+0x12>
    5426:	46c0      	nop			; (mov r8, r8)
    5428:	20000af4 	.word	0x20000af4
    542c:	00003f9d 	.word	0x00003f9d
    5430:	000040a9 	.word	0x000040a9
    5434:	000053f1 	.word	0x000053f1

00005438 <Device_Object_List_Count>:

/* Since many network clients depend on the object list */
/* for discovery, it must be consistent! */
unsigned Device_Object_List_Count(void)
{
    5438:	b570      	push	{r4, r5, r6, lr}
    unsigned count = 0; /* number of objects */
    struct my_object_functions *pObject = NULL;

    /* initialize the default return values */
    pObject = &Object_Table[0];
    543a:	4c08      	ldr	r4, [pc, #32]	; (545c <Device_Object_List_Count+0x24>)
    unsigned count = 0; /* number of objects */
    543c:	2500      	movs	r5, #0
    while (pObject->Object_Type < MAX_BACNET_OBJECT_TYPE) {
    543e:	e000      	b.n	5442 <Device_Object_List_Count+0xa>
        if (pObject->Object_Count) {
            count += pObject->Object_Count();
        }
        pObject++;
    5440:	3424      	adds	r4, #36	; 0x24
    while (pObject->Object_Type < MAX_BACNET_OBJECT_TYPE) {
    5442:	8822      	ldrh	r2, [r4, #0]
    5444:	4b06      	ldr	r3, [pc, #24]	; (5460 <Device_Object_List_Count+0x28>)
    5446:	429a      	cmp	r2, r3
    5448:	d805      	bhi.n	5456 <Device_Object_List_Count+0x1e>
        if (pObject->Object_Count) {
    544a:	68a3      	ldr	r3, [r4, #8]
    544c:	2b00      	cmp	r3, #0
    544e:	d0f7      	beq.n	5440 <Device_Object_List_Count+0x8>
            count += pObject->Object_Count();
    5450:	4798      	blx	r3
    5452:	182d      	adds	r5, r5, r0
    5454:	e7f4      	b.n	5440 <Device_Object_List_Count+0x8>
    }

    return count;
}
    5456:	0028      	movs	r0, r5
    5458:	bd70      	pop	{r4, r5, r6, pc}
    545a:	46c0      	nop			; (mov r8, r8)
    545c:	20000150 	.word	0x20000150
    5460:	000003ff 	.word	0x000003ff

00005464 <Device_Object_List_Identifier>:

bool Device_Object_List_Identifier(
    uint32_t array_index, BACNET_OBJECT_TYPE *object_type, uint32_t *instance)
{
    5464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5466:	000e      	movs	r6, r1
    5468:	0015      	movs	r5, r2
    uint32_t count = 0;
    uint32_t object_index = 0;
    struct my_object_functions *pObject = NULL;

    /* array index zero is length - so invalid */
    if (array_index == 0) {
    546a:	2800      	cmp	r0, #0
    546c:	d01c      	beq.n	54a8 <Device_Object_List_Identifier+0x44>
        return status;
    }
    object_index = array_index - 1;
    546e:	1e47      	subs	r7, r0, #1
    /* initialize the default return values */
    pObject = &Object_Table[0];
    5470:	4c0e      	ldr	r4, [pc, #56]	; (54ac <Device_Object_List_Identifier+0x48>)
    uint32_t count = 0;
    5472:	2000      	movs	r0, #0
    while (pObject->Object_Type < MAX_BACNET_OBJECT_TYPE) {
    5474:	e000      	b.n	5478 <Device_Object_List_Identifier+0x14>
                *instance = pObject->Object_Index_To_Instance(object_index);
                status = true;
                break;
            }
        }
        pObject++;
    5476:	3424      	adds	r4, #36	; 0x24
    while (pObject->Object_Type < MAX_BACNET_OBJECT_TYPE) {
    5478:	8822      	ldrh	r2, [r4, #0]
    547a:	4b0d      	ldr	r3, [pc, #52]	; (54b0 <Device_Object_List_Identifier+0x4c>)
    547c:	429a      	cmp	r2, r3
    547e:	d811      	bhi.n	54a4 <Device_Object_List_Identifier+0x40>
        if (pObject->Object_Count && pObject->Object_Index_To_Instance) {
    5480:	68a3      	ldr	r3, [r4, #8]
    5482:	2b00      	cmp	r3, #0
    5484:	d0f7      	beq.n	5476 <Device_Object_List_Identifier+0x12>
    5486:	68e2      	ldr	r2, [r4, #12]
    5488:	2a00      	cmp	r2, #0
    548a:	d0f4      	beq.n	5476 <Device_Object_List_Identifier+0x12>
            object_index -= count;
    548c:	1a3f      	subs	r7, r7, r0
            count = pObject->Object_Count();
    548e:	4798      	blx	r3
            if (object_index < count) {
    5490:	4287      	cmp	r7, r0
    5492:	d2f0      	bcs.n	5476 <Device_Object_List_Identifier+0x12>
                *object_type = pObject->Object_Type;
    5494:	8823      	ldrh	r3, [r4, #0]
    5496:	8033      	strh	r3, [r6, #0]
                *instance = pObject->Object_Index_To_Instance(object_index);
    5498:	68e3      	ldr	r3, [r4, #12]
    549a:	0038      	movs	r0, r7
    549c:	4798      	blx	r3
    549e:	6028      	str	r0, [r5, #0]
                status = true;
    54a0:	2001      	movs	r0, #1
                break;
    54a2:	e002      	b.n	54aa <Device_Object_List_Identifier+0x46>
    bool status = false;
    54a4:	2000      	movs	r0, #0
    54a6:	e000      	b.n	54aa <Device_Object_List_Identifier+0x46>
        return status;
    54a8:	2000      	movs	r0, #0
    }

    return status;
}
    54aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54ac:	20000150 	.word	0x20000150
    54b0:	000003ff 	.word	0x000003ff

000054b4 <Device_Read_Property_Local>:
    return found;
}

/* return the length of the apdu encoded or BACNET_STATUS_ERROR for error */
int Device_Read_Property_Local(BACNET_READ_PROPERTY_DATA *rpdata)
{
    54b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54b6:	46c6      	mov	lr, r8
    54b8:	b500      	push	{lr}
    54ba:	b0fe      	sub	sp, #504	; 0x1f8
    54bc:	0005      	movs	r5, r0
    int apdu_len = 0; /* return value */
    int len = 0; /* apdu len intermediate value */
    BACNET_BIT_STRING bit_string;
    BACNET_CHARACTER_STRING char_string;
    uint32_t i = 0;
    BACNET_OBJECT_TYPE object_type = OBJECT_NONE;
    54be:	2201      	movs	r2, #1
    54c0:	4252      	negs	r2, r2
    54c2:	466b      	mov	r3, sp
    54c4:	80da      	strh	r2, [r3, #6]
    uint32_t instance = 0;
    54c6:	2300      	movs	r3, #0
    54c8:	9300      	str	r3, [sp, #0]
    uint32_t count = 0;
    uint8_t *apdu = NULL;
    struct my_object_functions *pObject = NULL;

    if ((rpdata->application_data == NULL) ||
    54ca:	6907      	ldr	r7, [r0, #16]
    54cc:	2f00      	cmp	r7, #0
    54ce:	d100      	bne.n	54d2 <Device_Read_Property_Local+0x1e>
    54d0:	e146      	b.n	5760 <Device_Read_Property_Local+0x2ac>
        (rpdata->application_data_len == 0)) {
    54d2:	6944      	ldr	r4, [r0, #20]
    if ((rpdata->application_data == NULL) ||
    54d4:	2c00      	cmp	r4, #0
    54d6:	d100      	bne.n	54da <Device_Read_Property_Local+0x26>
    54d8:	e136      	b.n	5748 <Device_Read_Property_Local+0x294>
        return 0;
    }
    apdu = rpdata->application_data;
    switch ((int)rpdata->object_property) {
    54da:	6883      	ldr	r3, [r0, #8]
    54dc:	3b0b      	subs	r3, #11
    54de:	2b90      	cmp	r3, #144	; 0x90
    54e0:	d900      	bls.n	54e4 <Device_Read_Property_Local+0x30>
    54e2:	e121      	b.n	5728 <Device_Read_Property_Local+0x274>
    54e4:	009b      	lsls	r3, r3, #2
    54e6:	4a9f      	ldr	r2, [pc, #636]	; (5764 <Device_Read_Property_Local+0x2b0>)
    54e8:	58d3      	ldr	r3, [r2, r3]
    54ea:	469f      	mov	pc, r3
        case PROP_DESCRIPTION:
            characterstring_init_ansi(&char_string, My_Description);
    54ec:	499e      	ldr	r1, [pc, #632]	; (5768 <Device_Read_Property_Local+0x2b4>)
    54ee:	a802      	add	r0, sp, #8
    54f0:	4b9e      	ldr	r3, [pc, #632]	; (576c <Device_Read_Property_Local+0x2b8>)
    54f2:	4798      	blx	r3
            apdu_len =
    54f4:	a902      	add	r1, sp, #8
    54f6:	0038      	movs	r0, r7
    54f8:	4b9d      	ldr	r3, [pc, #628]	; (5770 <Device_Read_Property_Local+0x2bc>)
    54fa:	4798      	blx	r3
    54fc:	0004      	movs	r4, r0
                encode_application_character_string(&apdu[0], &char_string);
            break;
    54fe:	e11b      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_LOCATION:
            characterstring_init_ansi(&char_string, My_Location);
    5500:	499c      	ldr	r1, [pc, #624]	; (5774 <Device_Read_Property_Local+0x2c0>)
    5502:	a802      	add	r0, sp, #8
    5504:	4b99      	ldr	r3, [pc, #612]	; (576c <Device_Read_Property_Local+0x2b8>)
    5506:	4798      	blx	r3
            apdu_len =
    5508:	a902      	add	r1, sp, #8
    550a:	0038      	movs	r0, r7
    550c:	4b98      	ldr	r3, [pc, #608]	; (5770 <Device_Read_Property_Local+0x2bc>)
    550e:	4798      	blx	r3
    5510:	0004      	movs	r4, r0
                encode_application_character_string(&apdu[0], &char_string);
            break;
    5512:	e111      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_SYSTEM_STATUS:
            apdu_len =
                encode_application_enumerated(&apdu[0], Device_System_Status());
    5514:	4b98      	ldr	r3, [pc, #608]	; (5778 <Device_Read_Property_Local+0x2c4>)
    5516:	4798      	blx	r3
    5518:	0001      	movs	r1, r0
            apdu_len =
    551a:	0038      	movs	r0, r7
    551c:	4b97      	ldr	r3, [pc, #604]	; (577c <Device_Read_Property_Local+0x2c8>)
    551e:	4798      	blx	r3
    5520:	0004      	movs	r4, r0
            break;
    5522:	e109      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_VENDOR_NAME:
            characterstring_init_ansi(&char_string, BACNET_VENDOR_NAME);
    5524:	4996      	ldr	r1, [pc, #600]	; (5780 <Device_Read_Property_Local+0x2cc>)
    5526:	a802      	add	r0, sp, #8
    5528:	4b90      	ldr	r3, [pc, #576]	; (576c <Device_Read_Property_Local+0x2b8>)
    552a:	4798      	blx	r3
            apdu_len =
    552c:	a902      	add	r1, sp, #8
    552e:	0038      	movs	r0, r7
    5530:	4b8f      	ldr	r3, [pc, #572]	; (5770 <Device_Read_Property_Local+0x2bc>)
    5532:	4798      	blx	r3
    5534:	0004      	movs	r4, r0
                encode_application_character_string(&apdu[0], &char_string);
            break;
    5536:	e0ff      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_VENDOR_IDENTIFIER:
            apdu_len = encode_application_unsigned(&apdu[0], BACNET_VENDOR_ID);
    5538:	22ff      	movs	r2, #255	; 0xff
    553a:	0052      	lsls	r2, r2, #1
    553c:	2300      	movs	r3, #0
    553e:	0038      	movs	r0, r7
    5540:	4990      	ldr	r1, [pc, #576]	; (5784 <Device_Read_Property_Local+0x2d0>)
    5542:	4788      	blx	r1
    5544:	0004      	movs	r4, r0
            break;
    5546:	e0f7      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_MODEL_NAME:
            characterstring_init_ansi(&char_string, My_Model_Name);
    5548:	498f      	ldr	r1, [pc, #572]	; (5788 <Device_Read_Property_Local+0x2d4>)
    554a:	a802      	add	r0, sp, #8
    554c:	4b87      	ldr	r3, [pc, #540]	; (576c <Device_Read_Property_Local+0x2b8>)
    554e:	4798      	blx	r3
            apdu_len =
    5550:	a902      	add	r1, sp, #8
    5552:	0038      	movs	r0, r7
    5554:	4b86      	ldr	r3, [pc, #536]	; (5770 <Device_Read_Property_Local+0x2bc>)
    5556:	4798      	blx	r3
    5558:	0004      	movs	r4, r0
                encode_application_character_string(&apdu[0], &char_string);
            break;
    555a:	e0ed      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_FIRMWARE_REVISION:
            characterstring_init_ansi(&char_string, BACnet_Version);
    555c:	498b      	ldr	r1, [pc, #556]	; (578c <Device_Read_Property_Local+0x2d8>)
    555e:	a802      	add	r0, sp, #8
    5560:	4b82      	ldr	r3, [pc, #520]	; (576c <Device_Read_Property_Local+0x2b8>)
    5562:	4798      	blx	r3
            apdu_len =
    5564:	a902      	add	r1, sp, #8
    5566:	0038      	movs	r0, r7
    5568:	4b81      	ldr	r3, [pc, #516]	; (5770 <Device_Read_Property_Local+0x2bc>)
    556a:	4798      	blx	r3
    556c:	0004      	movs	r4, r0
                encode_application_character_string(&apdu[0], &char_string);
            break;
    556e:	e0e3      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_APPLICATION_SOFTWARE_VERSION:
            characterstring_init_ansi(&char_string, Application_Software_Version);
    5570:	4987      	ldr	r1, [pc, #540]	; (5790 <Device_Read_Property_Local+0x2dc>)
    5572:	a802      	add	r0, sp, #8
    5574:	4b7d      	ldr	r3, [pc, #500]	; (576c <Device_Read_Property_Local+0x2b8>)
    5576:	4798      	blx	r3
            apdu_len =
    5578:	a902      	add	r1, sp, #8
    557a:	0038      	movs	r0, r7
    557c:	4b7c      	ldr	r3, [pc, #496]	; (5770 <Device_Read_Property_Local+0x2bc>)
    557e:	4798      	blx	r3
    5580:	0004      	movs	r4, r0
                encode_application_character_string(&apdu[0], &char_string);
            break;
    5582:	e0d9      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_PROTOCOL_VERSION:
            apdu_len =
    5584:	2201      	movs	r2, #1
    5586:	2300      	movs	r3, #0
    5588:	0038      	movs	r0, r7
    558a:	497e      	ldr	r1, [pc, #504]	; (5784 <Device_Read_Property_Local+0x2d0>)
    558c:	4788      	blx	r1
    558e:	0004      	movs	r4, r0
                encode_application_unsigned(&apdu[0], BACNET_PROTOCOL_VERSION);
            break;
    5590:	e0d2      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_PROTOCOL_REVISION:
            apdu_len =
    5592:	2213      	movs	r2, #19
    5594:	2300      	movs	r3, #0
    5596:	0038      	movs	r0, r7
    5598:	497a      	ldr	r1, [pc, #488]	; (5784 <Device_Read_Property_Local+0x2d0>)
    559a:	4788      	blx	r1
    559c:	0004      	movs	r4, r0
                encode_application_unsigned(&apdu[0], BACNET_PROTOCOL_REVISION);
            break;
    559e:	e0cb      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_PROTOCOL_SERVICES_SUPPORTED:
            /* Note: list of services that are executed, not initiated. */
            bitstring_init(&bit_string);
    55a0:	a87a      	add	r0, sp, #488	; 0x1e8
    55a2:	4b7c      	ldr	r3, [pc, #496]	; (5794 <Device_Read_Property_Local+0x2e0>)
    55a4:	4798      	blx	r3
            for (i = 0; i < MAX_BACNET_SERVICES_SUPPORTED; i++) {
    55a6:	2400      	movs	r4, #0
    55a8:	e009      	b.n	55be <Device_Read_Property_Local+0x10a>
                /* automatic lookup based on handlers set */
                bitstring_set_bit(&bit_string, (uint8_t)i,
    55aa:	b2e6      	uxtb	r6, r4
    55ac:	0030      	movs	r0, r6
    55ae:	4b7a      	ldr	r3, [pc, #488]	; (5798 <Device_Read_Property_Local+0x2e4>)
    55b0:	4798      	blx	r3
    55b2:	0002      	movs	r2, r0
    55b4:	0031      	movs	r1, r6
    55b6:	a87a      	add	r0, sp, #488	; 0x1e8
    55b8:	4b78      	ldr	r3, [pc, #480]	; (579c <Device_Read_Property_Local+0x2e8>)
    55ba:	4798      	blx	r3
            for (i = 0; i < MAX_BACNET_SERVICES_SUPPORTED; i++) {
    55bc:	3401      	adds	r4, #1
    55be:	2c2b      	cmp	r4, #43	; 0x2b
    55c0:	d9f3      	bls.n	55aa <Device_Read_Property_Local+0xf6>
                    apdu_service_supported((BACNET_SERVICES_SUPPORTED)i));
            }
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    55c2:	a97a      	add	r1, sp, #488	; 0x1e8
    55c4:	0038      	movs	r0, r7
    55c6:	4b76      	ldr	r3, [pc, #472]	; (57a0 <Device_Read_Property_Local+0x2ec>)
    55c8:	4798      	blx	r3
    55ca:	0004      	movs	r4, r0
            break;
    55cc:	e0b4      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_PROTOCOL_OBJECT_TYPES_SUPPORTED:
            /* Note: this is the list of objects that can be in this device,
               not a list of objects that this device can access */
            bitstring_init(&bit_string);
    55ce:	a87a      	add	r0, sp, #488	; 0x1e8
    55d0:	4b70      	ldr	r3, [pc, #448]	; (5794 <Device_Read_Property_Local+0x2e0>)
    55d2:	4798      	blx	r3
            for (i = 0; i < MAX_ASHRAE_OBJECT_TYPE; i++) {
    55d4:	2400      	movs	r4, #0
    55d6:	e005      	b.n	55e4 <Device_Read_Property_Local+0x130>
                /* initialize all the object types to not-supported */
                bitstring_set_bit(&bit_string, (uint8_t)i, false);
    55d8:	b2e1      	uxtb	r1, r4
    55da:	2200      	movs	r2, #0
    55dc:	a87a      	add	r0, sp, #488	; 0x1e8
    55de:	4b6f      	ldr	r3, [pc, #444]	; (579c <Device_Read_Property_Local+0x2e8>)
    55e0:	4798      	blx	r3
            for (i = 0; i < MAX_ASHRAE_OBJECT_TYPE; i++) {
    55e2:	3401      	adds	r4, #1
    55e4:	2c3b      	cmp	r4, #59	; 0x3b
    55e6:	d9f7      	bls.n	55d8 <Device_Read_Property_Local+0x124>
    55e8:	4c6e      	ldr	r4, [pc, #440]	; (57a4 <Device_Read_Property_Local+0x2f0>)
    55ea:	e000      	b.n	55ee <Device_Read_Property_Local+0x13a>
            pObject = &Object_Table[i];
            while (pObject->Object_Type < MAX_BACNET_OBJECT_TYPE) {
                if ((pObject->Object_Count) && (pObject->Object_Count() > 0)) {
                    bitstring_set_bit(&bit_string, pObject->Object_Type, true);
                }
                pObject++;
    55ec:	3424      	adds	r4, #36	; 0x24
            while (pObject->Object_Type < MAX_BACNET_OBJECT_TYPE) {
    55ee:	8822      	ldrh	r2, [r4, #0]
    55f0:	4b6d      	ldr	r3, [pc, #436]	; (57a8 <Device_Read_Property_Local+0x2f4>)
    55f2:	429a      	cmp	r2, r3
    55f4:	d80b      	bhi.n	560e <Device_Read_Property_Local+0x15a>
                if ((pObject->Object_Count) && (pObject->Object_Count() > 0)) {
    55f6:	68a3      	ldr	r3, [r4, #8]
    55f8:	2b00      	cmp	r3, #0
    55fa:	d0f7      	beq.n	55ec <Device_Read_Property_Local+0x138>
    55fc:	4798      	blx	r3
    55fe:	2800      	cmp	r0, #0
    5600:	d0f4      	beq.n	55ec <Device_Read_Property_Local+0x138>
                    bitstring_set_bit(&bit_string, pObject->Object_Type, true);
    5602:	7821      	ldrb	r1, [r4, #0]
    5604:	2201      	movs	r2, #1
    5606:	a87a      	add	r0, sp, #488	; 0x1e8
    5608:	4b64      	ldr	r3, [pc, #400]	; (579c <Device_Read_Property_Local+0x2e8>)
    560a:	4798      	blx	r3
    560c:	e7ee      	b.n	55ec <Device_Read_Property_Local+0x138>
            }
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    560e:	a97a      	add	r1, sp, #488	; 0x1e8
    5610:	0038      	movs	r0, r7
    5612:	4b63      	ldr	r3, [pc, #396]	; (57a0 <Device_Read_Property_Local+0x2ec>)
    5614:	4798      	blx	r3
    5616:	0004      	movs	r4, r0
            break;
    5618:	e08e      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_OBJECT_LIST:
            count = Device_Object_List_Count();
    561a:	4b64      	ldr	r3, [pc, #400]	; (57ac <Device_Read_Property_Local+0x2f8>)
    561c:	4798      	blx	r3
    561e:	4680      	mov	r8, r0
            /* Array element zero is the number of objects in the list */
            if (rpdata->array_index == 0)
    5620:	68e8      	ldr	r0, [r5, #12]
    5622:	2800      	cmp	r0, #0
    5624:	d00e      	beq.n	5644 <Device_Read_Property_Local+0x190>
                apdu_len = encode_application_unsigned(&apdu[0], count);
            /* if no index was specified, then try to encode the entire list */
            /* into one packet.  Note that more than likely you will have */
            /* to return an error if the number of encoded objects exceeds */
            /* your maximum APDU size. */
            else if (rpdata->array_index == BACNET_ARRAY_ALL) {
    5626:	1c43      	adds	r3, r0, #1
    5628:	d020      	beq.n	566c <Device_Read_Property_Local+0x1b8>
                        apdu_len = BACNET_STATUS_ERROR;
                        break;
                    }
                }
            } else {
                if (Device_Object_List_Identifier(
    562a:	466a      	mov	r2, sp
    562c:	1d91      	adds	r1, r2, #6
    562e:	4b60      	ldr	r3, [pc, #384]	; (57b0 <Device_Read_Property_Local+0x2fc>)
    5630:	4798      	blx	r3
    5632:	2800      	cmp	r0, #0
    5634:	d133      	bne.n	569e <Device_Read_Property_Local+0x1ea>
                        rpdata->array_index, &object_type, &instance))
                    apdu_len = encode_application_object_id(
                        &apdu[0], object_type, instance);
                else {
                    rpdata->error_class = ERROR_CLASS_PROPERTY;
    5636:	2302      	movs	r3, #2
    5638:	832b      	strh	r3, [r5, #24]
                    rpdata->error_code = ERROR_CODE_INVALID_ARRAY_INDEX;
    563a:	3328      	adds	r3, #40	; 0x28
    563c:	836b      	strh	r3, [r5, #26]
                    apdu_len = BACNET_STATUS_ERROR;
    563e:	2401      	movs	r4, #1
    5640:	4264      	negs	r4, r4
    5642:	e079      	b.n	5738 <Device_Read_Property_Local+0x284>
                apdu_len = encode_application_unsigned(&apdu[0], count);
    5644:	4642      	mov	r2, r8
    5646:	2300      	movs	r3, #0
    5648:	0038      	movs	r0, r7
    564a:	494e      	ldr	r1, [pc, #312]	; (5784 <Device_Read_Property_Local+0x2d0>)
    564c:	4788      	blx	r1
    564e:	0004      	movs	r4, r0
    5650:	e072      	b.n	5738 <Device_Read_Property_Local+0x284>
                            rpdata->error_code =
    5652:	3baa      	subs	r3, #170	; 0xaa
    5654:	3bff      	subs	r3, #255	; 0xff
    5656:	836b      	strh	r3, [r5, #26]
                            apdu_len = BACNET_STATUS_ABORT;
    5658:	2402      	movs	r4, #2
    565a:	4264      	negs	r4, r4
                            break;
    565c:	e06c      	b.n	5738 <Device_Read_Property_Local+0x284>
                        rpdata->error_class = ERROR_CLASS_SERVICES;
    565e:	2305      	movs	r3, #5
    5660:	832b      	strh	r3, [r5, #24]
                        rpdata->error_code = ERROR_CODE_OTHER;
    5662:	2300      	movs	r3, #0
    5664:	836b      	strh	r3, [r5, #26]
                        apdu_len = BACNET_STATUS_ERROR;
    5666:	2401      	movs	r4, #1
    5668:	4264      	negs	r4, r4
                        break;
    566a:	e065      	b.n	5738 <Device_Read_Property_Local+0x284>
    566c:	2601      	movs	r6, #1
    566e:	2400      	movs	r4, #0
                for (i = 1; i <= count; i++) {
    5670:	4546      	cmp	r6, r8
    5672:	d861      	bhi.n	5738 <Device_Read_Property_Local+0x284>
                    if (Device_Object_List_Identifier(
    5674:	466a      	mov	r2, sp
    5676:	1d91      	adds	r1, r2, #6
    5678:	0030      	movs	r0, r6
    567a:	4b4d      	ldr	r3, [pc, #308]	; (57b0 <Device_Read_Property_Local+0x2fc>)
    567c:	4798      	blx	r3
    567e:	2800      	cmp	r0, #0
    5680:	d0ed      	beq.n	565e <Device_Read_Property_Local+0x1aa>
                        len = encode_application_object_id(
    5682:	1938      	adds	r0, r7, r4
    5684:	466b      	mov	r3, sp
    5686:	88d9      	ldrh	r1, [r3, #6]
    5688:	9a00      	ldr	r2, [sp, #0]
    568a:	4b4a      	ldr	r3, [pc, #296]	; (57b4 <Device_Read_Property_Local+0x300>)
    568c:	4798      	blx	r3
                        apdu_len += len;
    568e:	1824      	adds	r4, r4, r0
                        if ((apdu_len + len) >= MAX_APDU) {
    5690:	1900      	adds	r0, r0, r4
    5692:	23e0      	movs	r3, #224	; 0xe0
    5694:	33ff      	adds	r3, #255	; 0xff
    5696:	4298      	cmp	r0, r3
    5698:	dcdb      	bgt.n	5652 <Device_Read_Property_Local+0x19e>
                for (i = 1; i <= count; i++) {
    569a:	3601      	adds	r6, #1
    569c:	e7e8      	b.n	5670 <Device_Read_Property_Local+0x1bc>
                    apdu_len = encode_application_object_id(
    569e:	466b      	mov	r3, sp
    56a0:	88d9      	ldrh	r1, [r3, #6]
    56a2:	9a00      	ldr	r2, [sp, #0]
    56a4:	0038      	movs	r0, r7
    56a6:	4b43      	ldr	r3, [pc, #268]	; (57b4 <Device_Read_Property_Local+0x300>)
    56a8:	4798      	blx	r3
    56aa:	0004      	movs	r4, r0
    56ac:	e044      	b.n	5738 <Device_Read_Property_Local+0x284>
                }
            }
            break;
        case PROP_MAX_APDU_LENGTH_ACCEPTED:
            apdu_len = encode_application_unsigned(&apdu[0], MAX_APDU);
    56ae:	22f0      	movs	r2, #240	; 0xf0
    56b0:	0052      	lsls	r2, r2, #1
    56b2:	2300      	movs	r3, #0
    56b4:	0038      	movs	r0, r7
    56b6:	4933      	ldr	r1, [pc, #204]	; (5784 <Device_Read_Property_Local+0x2d0>)
    56b8:	4788      	blx	r1
    56ba:	0004      	movs	r4, r0
            break;
    56bc:	e03c      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_SEGMENTATION_SUPPORTED:
            apdu_len = encode_application_enumerated(
                &apdu[0], Device_Segmentation_Supported());
    56be:	4b3e      	ldr	r3, [pc, #248]	; (57b8 <Device_Read_Property_Local+0x304>)
    56c0:	4798      	blx	r3
    56c2:	0001      	movs	r1, r0
            apdu_len = encode_application_enumerated(
    56c4:	0038      	movs	r0, r7
    56c6:	4b2d      	ldr	r3, [pc, #180]	; (577c <Device_Read_Property_Local+0x2c8>)
    56c8:	4798      	blx	r3
    56ca:	0004      	movs	r4, r0
            break;
    56cc:	e034      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_APDU_TIMEOUT:
            apdu_len = encode_application_unsigned(&apdu[0], apdu_timeout());
    56ce:	4b3b      	ldr	r3, [pc, #236]	; (57bc <Device_Read_Property_Local+0x308>)
    56d0:	4798      	blx	r3
    56d2:	0002      	movs	r2, r0
    56d4:	2300      	movs	r3, #0
    56d6:	0038      	movs	r0, r7
    56d8:	492a      	ldr	r1, [pc, #168]	; (5784 <Device_Read_Property_Local+0x2d0>)
    56da:	4788      	blx	r1
    56dc:	0004      	movs	r4, r0
            break;
    56de:	e02b      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_NUMBER_OF_APDU_RETRIES:
            apdu_len = encode_application_unsigned(&apdu[0], apdu_retries());
    56e0:	4b37      	ldr	r3, [pc, #220]	; (57c0 <Device_Read_Property_Local+0x30c>)
    56e2:	4798      	blx	r3
    56e4:	0002      	movs	r2, r0
    56e6:	2300      	movs	r3, #0
    56e8:	0038      	movs	r0, r7
    56ea:	4926      	ldr	r1, [pc, #152]	; (5784 <Device_Read_Property_Local+0x2d0>)
    56ec:	4788      	blx	r1
    56ee:	0004      	movs	r4, r0
            break;
    56f0:	e022      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_DEVICE_ADDRESS_BINDING:
            /* FIXME: encode the list here, if it exists */
            break;
        case PROP_DATABASE_REVISION:
            apdu_len = encode_application_unsigned(
                &apdu[0], Device_Database_Revision());
    56f2:	4b34      	ldr	r3, [pc, #208]	; (57c4 <Device_Read_Property_Local+0x310>)
    56f4:	4798      	blx	r3
    56f6:	0002      	movs	r2, r0
            apdu_len = encode_application_unsigned(
    56f8:	2300      	movs	r3, #0
    56fa:	0038      	movs	r0, r7
    56fc:	4921      	ldr	r1, [pc, #132]	; (5784 <Device_Read_Property_Local+0x2d0>)
    56fe:	4788      	blx	r1
    5700:	0004      	movs	r4, r0
            break;
    5702:	e019      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_MAX_INFO_FRAMES:
            apdu_len =
                encode_application_unsigned(&apdu[0], dlmstp_max_info_frames());
    5704:	4b30      	ldr	r3, [pc, #192]	; (57c8 <Device_Read_Property_Local+0x314>)
    5706:	4798      	blx	r3
    5708:	0002      	movs	r2, r0
            apdu_len =
    570a:	2300      	movs	r3, #0
    570c:	0038      	movs	r0, r7
    570e:	491d      	ldr	r1, [pc, #116]	; (5784 <Device_Read_Property_Local+0x2d0>)
    5710:	4788      	blx	r1
    5712:	0004      	movs	r4, r0
            break;
    5714:	e010      	b.n	5738 <Device_Read_Property_Local+0x284>
        case PROP_MAX_MASTER:
            apdu_len =
                encode_application_unsigned(&apdu[0], dlmstp_max_master());
    5716:	4b2d      	ldr	r3, [pc, #180]	; (57cc <Device_Read_Property_Local+0x318>)
    5718:	4798      	blx	r3
    571a:	0002      	movs	r2, r0
            apdu_len =
    571c:	2300      	movs	r3, #0
    571e:	0038      	movs	r0, r7
    5720:	4918      	ldr	r1, [pc, #96]	; (5784 <Device_Read_Property_Local+0x2d0>)
    5722:	4788      	blx	r1
    5724:	0004      	movs	r4, r0
            break;
    5726:	e007      	b.n	5738 <Device_Read_Property_Local+0x284>
        default:
            rpdata->error_class = ERROR_CLASS_PROPERTY;
    5728:	2302      	movs	r3, #2
    572a:	832b      	strh	r3, [r5, #24]
            rpdata->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    572c:	331e      	adds	r3, #30
    572e:	836b      	strh	r3, [r5, #26]
            apdu_len = BACNET_STATUS_ERROR;
    5730:	2401      	movs	r4, #1
    5732:	4264      	negs	r4, r4
            break;
    5734:	e000      	b.n	5738 <Device_Read_Property_Local+0x284>
    int apdu_len = 0; /* return value */
    5736:	2400      	movs	r4, #0
    }
    /*  only array properties can have array options */
    if ((apdu_len >= 0) && (rpdata->object_property != PROP_OBJECT_LIST) &&
    5738:	2c00      	cmp	r4, #0
    573a:	db05      	blt.n	5748 <Device_Read_Property_Local+0x294>
    573c:	68ab      	ldr	r3, [r5, #8]
    573e:	2b4c      	cmp	r3, #76	; 0x4c
    5740:	d002      	beq.n	5748 <Device_Read_Property_Local+0x294>
    5742:	68eb      	ldr	r3, [r5, #12]
    5744:	3301      	adds	r3, #1
    5746:	d104      	bne.n	5752 <Device_Read_Property_Local+0x29e>
        rpdata->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
        apdu_len = BACNET_STATUS_ERROR;
    }

    return apdu_len;
}
    5748:	0020      	movs	r0, r4
    574a:	b07e      	add	sp, #504	; 0x1f8
    574c:	bc04      	pop	{r2}
    574e:	4690      	mov	r8, r2
    5750:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rpdata->error_class = ERROR_CLASS_PROPERTY;
    5752:	2302      	movs	r3, #2
    5754:	832b      	strh	r3, [r5, #24]
        rpdata->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    5756:	3330      	adds	r3, #48	; 0x30
    5758:	836b      	strh	r3, [r5, #26]
        apdu_len = BACNET_STATUS_ERROR;
    575a:	2401      	movs	r4, #1
    575c:	4264      	negs	r4, r4
    575e:	e7f3      	b.n	5748 <Device_Read_Property_Local+0x294>
        return 0;
    5760:	2400      	movs	r4, #0
    5762:	e7f1      	b.n	5748 <Device_Read_Property_Local+0x294>
    5764:	0000ede8 	.word	0x0000ede8
    5768:	0000f2e4 	.word	0x0000f2e4
    576c:	00003f75 	.word	0x00003f75
    5770:	000032dd 	.word	0x000032dd
    5774:	0000f2fc 	.word	0x0000f2fc
    5778:	000053cd 	.word	0x000053cd
    577c:	000036f1 	.word	0x000036f1
    5780:	0000f318 	.word	0x0000f318
    5784:	000035e1 	.word	0x000035e1
    5788:	0000f338 	.word	0x0000f338
    578c:	0000f348 	.word	0x0000f348
    5790:	0000f350 	.word	0x0000f350
    5794:	00003e71 	.word	0x00003e71
    5798:	00001425 	.word	0x00001425
    579c:	00003e85 	.word	0x00003e85
    57a0:	000030b9 	.word	0x000030b9
    57a4:	20000150 	.word	0x20000150
    57a8:	000003ff 	.word	0x000003ff
    57ac:	00005439 	.word	0x00005439
    57b0:	00005465 	.word	0x00005465
    57b4:	0000316d 	.word	0x0000316d
    57b8:	000053df 	.word	0x000053df
    57bc:	00001511 	.word	0x00001511
    57c0:	0000151d 	.word	0x0000151d
    57c4:	000053e5 	.word	0x000053e5
    57c8:	00006cb9 	.word	0x00006cb9
    57cc:	00006cd5 	.word	0x00006cd5

000057d0 <Device_Valid_Object_Name>:
{
    57d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57d2:	b0fd      	sub	sp, #500	; 0x1f4
    57d4:	0005      	movs	r5, r0
    57d6:	9101      	str	r1, [sp, #4]
    57d8:	0016      	movs	r6, r2
    BACNET_OBJECT_TYPE type = OBJECT_NONE;
    57da:	2201      	movs	r2, #1
    57dc:	4252      	negs	r2, r2
    57de:	23f3      	movs	r3, #243	; 0xf3
    57e0:	005b      	lsls	r3, r3, #1
    57e2:	a902      	add	r1, sp, #8
    57e4:	468c      	mov	ip, r1
    57e6:	4463      	add	r3, ip
    57e8:	801a      	strh	r2, [r3, #0]
    max_objects = Device_Object_List_Count();
    57ea:	4b1e      	ldr	r3, [pc, #120]	; (5864 <Device_Valid_Object_Name+0x94>)
    57ec:	4798      	blx	r3
    57ee:	0007      	movs	r7, r0
    for (i = 1; i <= max_objects; i++) {
    57f0:	2401      	movs	r4, #1
    57f2:	e000      	b.n	57f6 <Device_Valid_Object_Name+0x26>
    57f4:	3401      	adds	r4, #1
    57f6:	42bc      	cmp	r4, r7
    57f8:	d831      	bhi.n	585e <Device_Valid_Object_Name+0x8e>
        check_id = Device_Object_List_Identifier(i, &type, &instance);
    57fa:	aa7a      	add	r2, sp, #488	; 0x1e8
    57fc:	21f3      	movs	r1, #243	; 0xf3
    57fe:	0049      	lsls	r1, r1, #1
    5800:	ab02      	add	r3, sp, #8
    5802:	469c      	mov	ip, r3
    5804:	4461      	add	r1, ip
    5806:	0020      	movs	r0, r4
    5808:	4b17      	ldr	r3, [pc, #92]	; (5868 <Device_Valid_Object_Name+0x98>)
    580a:	4798      	blx	r3
        if (check_id) {
    580c:	2800      	cmp	r0, #0
    580e:	d0f1      	beq.n	57f4 <Device_Valid_Object_Name+0x24>
            pObject = Device_Objects_Find_Functions((BACNET_OBJECT_TYPE)type);
    5810:	23f3      	movs	r3, #243	; 0xf3
    5812:	005b      	lsls	r3, r3, #1
    5814:	aa02      	add	r2, sp, #8
    5816:	4694      	mov	ip, r2
    5818:	4463      	add	r3, ip
    581a:	8818      	ldrh	r0, [r3, #0]
    581c:	4b13      	ldr	r3, [pc, #76]	; (586c <Device_Valid_Object_Name+0x9c>)
    581e:	4798      	blx	r3
            if ((pObject != NULL) && (pObject->Object_Name != NULL) &&
    5820:	2800      	cmp	r0, #0
    5822:	d0e7      	beq.n	57f4 <Device_Valid_Object_Name+0x24>
    5824:	6943      	ldr	r3, [r0, #20]
    5826:	2b00      	cmp	r3, #0
    5828:	d0e4      	beq.n	57f4 <Device_Valid_Object_Name+0x24>
                (pObject->Object_Name(instance, &object_name2) &&
    582a:	a902      	add	r1, sp, #8
    582c:	987a      	ldr	r0, [sp, #488]	; 0x1e8
    582e:	4798      	blx	r3
            if ((pObject != NULL) && (pObject->Object_Name != NULL) &&
    5830:	2800      	cmp	r0, #0
    5832:	d0df      	beq.n	57f4 <Device_Valid_Object_Name+0x24>
                    characterstring_same(object_name1, &object_name2))) {
    5834:	a902      	add	r1, sp, #8
    5836:	0028      	movs	r0, r5
    5838:	4b0d      	ldr	r3, [pc, #52]	; (5870 <Device_Valid_Object_Name+0xa0>)
    583a:	4798      	blx	r3
                (pObject->Object_Name(instance, &object_name2) &&
    583c:	2800      	cmp	r0, #0
    583e:	d0d9      	beq.n	57f4 <Device_Valid_Object_Name+0x24>
                if (object_type) {
    5840:	9a01      	ldr	r2, [sp, #4]
    5842:	2a00      	cmp	r2, #0
    5844:	d006      	beq.n	5854 <Device_Valid_Object_Name+0x84>
                    *object_type = type;
    5846:	23f3      	movs	r3, #243	; 0xf3
    5848:	005b      	lsls	r3, r3, #1
    584a:	a902      	add	r1, sp, #8
    584c:	468c      	mov	ip, r1
    584e:	4463      	add	r3, ip
    5850:	881b      	ldrh	r3, [r3, #0]
    5852:	8013      	strh	r3, [r2, #0]
                if (object_instance) {
    5854:	2e00      	cmp	r6, #0
    5856:	d003      	beq.n	5860 <Device_Valid_Object_Name+0x90>
                    *object_instance = instance;
    5858:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
    585a:	6033      	str	r3, [r6, #0]
    585c:	e000      	b.n	5860 <Device_Valid_Object_Name+0x90>
    bool found = false;
    585e:	2000      	movs	r0, #0
}
    5860:	b07d      	add	sp, #500	; 0x1f4
    5862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5864:	00005439 	.word	0x00005439
    5868:	00005465 	.word	0x00005465
    586c:	00005015 	.word	0x00005015
    5870:	00003f9d 	.word	0x00003f9d

00005874 <Device_Write_Property_Local>:

bool Device_Write_Property_Local(BACNET_WRITE_PROPERTY_DATA *wp_data)
{
    5874:	b530      	push	{r4, r5, lr}
    5876:	b0fd      	sub	sp, #500	; 0x1f4
    5878:	0004      	movs	r4, r0
    size_t length = 0;
    BACNET_APPLICATION_DATA_VALUE value;

    /* decode the some of the request */
    len = bacapp_decode_application_data(
        wp_data->application_data, wp_data->application_data_len, &value);
    587a:	3010      	adds	r0, #16
    587c:	23f8      	movs	r3, #248	; 0xf8
    587e:	005b      	lsls	r3, r3, #1
    5880:	58e1      	ldr	r1, [r4, r3]
    len = bacapp_decode_application_data(
    5882:	466a      	mov	r2, sp
    5884:	4b76      	ldr	r3, [pc, #472]	; (5a60 <Device_Write_Property_Local+0x1ec>)
    5886:	4798      	blx	r3
    /* FIXME: len < application_data_len: more data? */
    if (len < 0) {
    5888:	2800      	cmp	r0, #0
    588a:	db0f      	blt.n	58ac <Device_Write_Property_Local+0x38>
        /* error while decoding - a value larger than we can handle */
        wp_data->error_class = ERROR_CLASS_PROPERTY;
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
        return false;
    }
    if ((wp_data->object_property != PROP_OBJECT_LIST) &&
    588c:	68a3      	ldr	r3, [r4, #8]
    588e:	2b4c      	cmp	r3, #76	; 0x4c
    5890:	d015      	beq.n	58be <Device_Write_Property_Local+0x4a>
    5892:	68e2      	ldr	r2, [r4, #12]
    5894:	3201      	adds	r2, #1
    5896:	d012      	beq.n	58be <Device_Write_Property_Local+0x4a>
        (wp_data->array_index != BACNET_ARRAY_ALL)) {
        /*  only array properties can have array options */
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    5898:	2202      	movs	r2, #2
    589a:	23fb      	movs	r3, #251	; 0xfb
    589c:	005b      	lsls	r3, r3, #1
    589e:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    58a0:	3230      	adds	r2, #48	; 0x30
    58a2:	3302      	adds	r3, #2
    58a4:	52e2      	strh	r2, [r4, r3]
        return false;
    58a6:	2000      	movs	r0, #0
    }
    /* not using len at this time */
    (void)len;

    return status;
}
    58a8:	b07d      	add	sp, #500	; 0x1f4
    58aa:	bd30      	pop	{r4, r5, pc}
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    58ac:	2202      	movs	r2, #2
    58ae:	23fb      	movs	r3, #251	; 0xfb
    58b0:	005b      	lsls	r3, r3, #1
    58b2:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    58b4:	3223      	adds	r2, #35	; 0x23
    58b6:	3302      	adds	r3, #2
    58b8:	52e2      	strh	r2, [r4, r3]
        return false;
    58ba:	2000      	movs	r0, #0
    58bc:	e7f4      	b.n	58a8 <Device_Write_Property_Local+0x34>
    switch ((int)wp_data->object_property) {
    58be:	3b0c      	subs	r3, #12
    58c0:	2b8f      	cmp	r3, #143	; 0x8f
    58c2:	d900      	bls.n	58c6 <Device_Write_Property_Local+0x52>
    58c4:	e0c3      	b.n	5a4e <Device_Write_Property_Local+0x1da>
    58c6:	009b      	lsls	r3, r3, #2
    58c8:	4a66      	ldr	r2, [pc, #408]	; (5a64 <Device_Write_Property_Local+0x1f0>)
    58ca:	58d3      	ldr	r3, [r2, r3]
    58cc:	469f      	mov	pc, r3
            if (value.tag == BACNET_APPLICATION_TAG_OBJECT_ID) {
    58ce:	466b      	mov	r3, sp
    58d0:	789b      	ldrb	r3, [r3, #2]
    58d2:	2b0c      	cmp	r3, #12
    58d4:	d008      	beq.n	58e8 <Device_Write_Property_Local+0x74>
                wp_data->error_class = ERROR_CLASS_PROPERTY;
    58d6:	2202      	movs	r2, #2
    58d8:	23fb      	movs	r3, #251	; 0xfb
    58da:	005b      	lsls	r3, r3, #1
    58dc:	52e2      	strh	r2, [r4, r3]
                wp_data->error_code = ERROR_CODE_INVALID_DATA_TYPE;
    58de:	3207      	adds	r2, #7
    58e0:	3302      	adds	r3, #2
    58e2:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    58e4:	2000      	movs	r0, #0
    58e6:	e7df      	b.n	58a8 <Device_Write_Property_Local+0x34>
                if ((value.type.Object_Id.type == OBJECT_DEVICE) &&
    58e8:	466b      	mov	r3, sp
    58ea:	891b      	ldrh	r3, [r3, #8]
    58ec:	2b08      	cmp	r3, #8
    58ee:	d008      	beq.n	5902 <Device_Write_Property_Local+0x8e>
                    wp_data->error_class = ERROR_CLASS_PROPERTY;
    58f0:	2202      	movs	r2, #2
    58f2:	23fb      	movs	r3, #251	; 0xfb
    58f4:	005b      	lsls	r3, r3, #1
    58f6:	52e2      	strh	r2, [r4, r3]
                    wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    58f8:	3223      	adds	r2, #35	; 0x23
    58fa:	3302      	adds	r3, #2
    58fc:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    58fe:	2000      	movs	r0, #0
    5900:	e7d2      	b.n	58a8 <Device_Write_Property_Local+0x34>
                    (Device_Set_Object_Instance_Number(
    5902:	9803      	ldr	r0, [sp, #12]
    5904:	4b58      	ldr	r3, [pc, #352]	; (5a68 <Device_Write_Property_Local+0x1f4>)
    5906:	4798      	blx	r3
                if ((value.type.Object_Id.type == OBJECT_DEVICE) &&
    5908:	2800      	cmp	r0, #0
    590a:	d1cd      	bne.n	58a8 <Device_Write_Property_Local+0x34>
    590c:	e7f0      	b.n	58f0 <Device_Write_Property_Local+0x7c>
            if (value.tag == BACNET_APPLICATION_TAG_UNSIGNED_INT) {
    590e:	466b      	mov	r3, sp
    5910:	789b      	ldrb	r3, [r3, #2]
    5912:	2b02      	cmp	r3, #2
    5914:	d008      	beq.n	5928 <Device_Write_Property_Local+0xb4>
                wp_data->error_class = ERROR_CLASS_PROPERTY;
    5916:	2202      	movs	r2, #2
    5918:	23fb      	movs	r3, #251	; 0xfb
    591a:	005b      	lsls	r3, r3, #1
    591c:	52e2      	strh	r2, [r4, r3]
                wp_data->error_code = ERROR_CODE_INVALID_DATA_TYPE;
    591e:	3207      	adds	r2, #7
    5920:	3302      	adds	r3, #2
    5922:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    5924:	2000      	movs	r0, #0
    5926:	e7bf      	b.n	58a8 <Device_Write_Property_Local+0x34>
                if (value.type.Unsigned_Int <= 255) {
    5928:	9802      	ldr	r0, [sp, #8]
    592a:	9b03      	ldr	r3, [sp, #12]
    592c:	2b00      	cmp	r3, #0
    592e:	d008      	beq.n	5942 <Device_Write_Property_Local+0xce>
                    wp_data->error_class = ERROR_CLASS_PROPERTY;
    5930:	2202      	movs	r2, #2
    5932:	23fb      	movs	r3, #251	; 0xfb
    5934:	005b      	lsls	r3, r3, #1
    5936:	52e2      	strh	r2, [r4, r3]
                    wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    5938:	3223      	adds	r2, #35	; 0x23
    593a:	3302      	adds	r3, #2
    593c:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    593e:	2000      	movs	r0, #0
    5940:	e7b2      	b.n	58a8 <Device_Write_Property_Local+0x34>
                if (value.type.Unsigned_Int <= 255) {
    5942:	2b00      	cmp	r3, #0
    5944:	d101      	bne.n	594a <Device_Write_Property_Local+0xd6>
    5946:	28ff      	cmp	r0, #255	; 0xff
    5948:	d8f2      	bhi.n	5930 <Device_Write_Property_Local+0xbc>
                    dlmstp_set_max_info_frames(value.type.Unsigned_Int);
    594a:	b2c0      	uxtb	r0, r0
    594c:	4b47      	ldr	r3, [pc, #284]	; (5a6c <Device_Write_Property_Local+0x1f8>)
    594e:	4798      	blx	r3
                    status = true;
    5950:	2001      	movs	r0, #1
    5952:	e7a9      	b.n	58a8 <Device_Write_Property_Local+0x34>
            if (value.tag == BACNET_APPLICATION_TAG_UNSIGNED_INT) {
    5954:	466b      	mov	r3, sp
    5956:	789b      	ldrb	r3, [r3, #2]
    5958:	2b02      	cmp	r3, #2
    595a:	d008      	beq.n	596e <Device_Write_Property_Local+0xfa>
                wp_data->error_class = ERROR_CLASS_PROPERTY;
    595c:	2202      	movs	r2, #2
    595e:	23fb      	movs	r3, #251	; 0xfb
    5960:	005b      	lsls	r3, r3, #1
    5962:	52e2      	strh	r2, [r4, r3]
                wp_data->error_code = ERROR_CODE_INVALID_DATA_TYPE;
    5964:	3207      	adds	r2, #7
    5966:	3302      	adds	r3, #2
    5968:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    596a:	2000      	movs	r0, #0
    596c:	e79c      	b.n	58a8 <Device_Write_Property_Local+0x34>
                if ((value.type.Unsigned_Int > 0) &&
    596e:	9802      	ldr	r0, [sp, #8]
    5970:	9903      	ldr	r1, [sp, #12]
    5972:	2201      	movs	r2, #1
    5974:	4252      	negs	r2, r2
    5976:	17d3      	asrs	r3, r2, #31
    5978:	1812      	adds	r2, r2, r0
    597a:	414b      	adcs	r3, r1
    597c:	2b00      	cmp	r3, #0
    597e:	d008      	beq.n	5992 <Device_Write_Property_Local+0x11e>
                    wp_data->error_class = ERROR_CLASS_PROPERTY;
    5980:	2202      	movs	r2, #2
    5982:	23fb      	movs	r3, #251	; 0xfb
    5984:	005b      	lsls	r3, r3, #1
    5986:	52e2      	strh	r2, [r4, r3]
                    wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    5988:	3223      	adds	r2, #35	; 0x23
    598a:	3302      	adds	r3, #2
    598c:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    598e:	2000      	movs	r0, #0
    5990:	e78a      	b.n	58a8 <Device_Write_Property_Local+0x34>
                if ((value.type.Unsigned_Int > 0) &&
    5992:	2b00      	cmp	r3, #0
    5994:	d101      	bne.n	599a <Device_Write_Property_Local+0x126>
    5996:	2a7e      	cmp	r2, #126	; 0x7e
    5998:	d8f2      	bhi.n	5980 <Device_Write_Property_Local+0x10c>
                    dlmstp_set_max_master(value.type.Unsigned_Int);
    599a:	b2c0      	uxtb	r0, r0
    599c:	4b34      	ldr	r3, [pc, #208]	; (5a70 <Device_Write_Property_Local+0x1fc>)
    599e:	4798      	blx	r3
                    status = true;
    59a0:	2001      	movs	r0, #1
    59a2:	e781      	b.n	58a8 <Device_Write_Property_Local+0x34>
            if (value.tag == BACNET_APPLICATION_TAG_CHARACTER_STRING) {
    59a4:	466b      	mov	r3, sp
    59a6:	789b      	ldrb	r3, [r3, #2]
    59a8:	2b07      	cmp	r3, #7
    59aa:	d008      	beq.n	59be <Device_Write_Property_Local+0x14a>
                wp_data->error_class = ERROR_CLASS_PROPERTY;
    59ac:	2202      	movs	r2, #2
    59ae:	23fb      	movs	r3, #251	; 0xfb
    59b0:	005b      	lsls	r3, r3, #1
    59b2:	52e2      	strh	r2, [r4, r3]
                wp_data->error_code = ERROR_CODE_INVALID_DATA_TYPE;
    59b4:	3207      	adds	r2, #7
    59b6:	3302      	adds	r3, #2
    59b8:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    59ba:	2000      	movs	r0, #0
    59bc:	e774      	b.n	58a8 <Device_Write_Property_Local+0x34>
                length = characterstring_length(&value.type.Character_String);
    59be:	a802      	add	r0, sp, #8
    59c0:	4b2c      	ldr	r3, [pc, #176]	; (5a74 <Device_Write_Property_Local+0x200>)
    59c2:	4798      	blx	r3
    59c4:	1e05      	subs	r5, r0, #0
                if (length < 1) {
    59c6:	d108      	bne.n	59da <Device_Write_Property_Local+0x166>
                    wp_data->error_class = ERROR_CLASS_PROPERTY;
    59c8:	2202      	movs	r2, #2
    59ca:	23fb      	movs	r3, #251	; 0xfb
    59cc:	005b      	lsls	r3, r3, #1
    59ce:	52e2      	strh	r2, [r4, r3]
                    wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    59d0:	3223      	adds	r2, #35	; 0x23
    59d2:	3302      	adds	r3, #2
    59d4:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    59d6:	2000      	movs	r0, #0
    59d8:	e766      	b.n	58a8 <Device_Write_Property_Local+0x34>
                } else if (length < characterstring_capacity(&My_Object_Name)) {
    59da:	4827      	ldr	r0, [pc, #156]	; (5a78 <Device_Write_Property_Local+0x204>)
    59dc:	4b27      	ldr	r3, [pc, #156]	; (5a7c <Device_Write_Property_Local+0x208>)
    59de:	4798      	blx	r3
    59e0:	4285      	cmp	r5, r0
    59e2:	d308      	bcc.n	59f6 <Device_Write_Property_Local+0x182>
                    wp_data->error_class = ERROR_CLASS_PROPERTY;
    59e4:	2202      	movs	r2, #2
    59e6:	23fb      	movs	r3, #251	; 0xfb
    59e8:	005b      	lsls	r3, r3, #1
    59ea:	52e2      	strh	r2, [r4, r3]
                    wp_data->error_code = ERROR_CODE_NO_SPACE_TO_WRITE_PROPERTY;
    59ec:	3212      	adds	r2, #18
    59ee:	3302      	adds	r3, #2
    59f0:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    59f2:	2000      	movs	r0, #0
    59f4:	e758      	b.n	58a8 <Device_Write_Property_Local+0x34>
                    encoding =
    59f6:	a802      	add	r0, sp, #8
    59f8:	4b21      	ldr	r3, [pc, #132]	; (5a80 <Device_Write_Property_Local+0x20c>)
    59fa:	4798      	blx	r3
                    if (encoding < MAX_CHARACTER_STRING_ENCODING) {
    59fc:	2805      	cmp	r0, #5
    59fe:	d908      	bls.n	5a12 <Device_Write_Property_Local+0x19e>
                        wp_data->error_class = ERROR_CLASS_PROPERTY;
    5a00:	2202      	movs	r2, #2
    5a02:	23fb      	movs	r3, #251	; 0xfb
    5a04:	005b      	lsls	r3, r3, #1
    5a06:	52e2      	strh	r2, [r4, r3]
                        wp_data->error_code =
    5a08:	3227      	adds	r2, #39	; 0x27
    5a0a:	3302      	adds	r3, #2
    5a0c:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    5a0e:	2000      	movs	r0, #0
    5a10:	e74a      	b.n	58a8 <Device_Write_Property_Local+0x34>
                        if (Device_Valid_Object_Name(
    5a12:	2200      	movs	r2, #0
    5a14:	2100      	movs	r1, #0
    5a16:	a802      	add	r0, sp, #8
    5a18:	4b1a      	ldr	r3, [pc, #104]	; (5a84 <Device_Write_Property_Local+0x210>)
    5a1a:	4798      	blx	r3
    5a1c:	2800      	cmp	r0, #0
    5a1e:	d008      	beq.n	5a32 <Device_Write_Property_Local+0x1be>
                            wp_data->error_class = ERROR_CLASS_PROPERTY;
    5a20:	2202      	movs	r2, #2
    5a22:	23fb      	movs	r3, #251	; 0xfb
    5a24:	005b      	lsls	r3, r3, #1
    5a26:	52e2      	strh	r2, [r4, r3]
                            wp_data->error_code = ERROR_CODE_DUPLICATE_NAME;
    5a28:	322e      	adds	r2, #46	; 0x2e
    5a2a:	3302      	adds	r3, #2
    5a2c:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    5a2e:	2000      	movs	r0, #0
    5a30:	e73a      	b.n	58a8 <Device_Write_Property_Local+0x34>
                            Device_Set_Object_Name(
    5a32:	a802      	add	r0, sp, #8
    5a34:	4b14      	ldr	r3, [pc, #80]	; (5a88 <Device_Write_Property_Local+0x214>)
    5a36:	4798      	blx	r3
                            status = true;
    5a38:	2001      	movs	r0, #1
    5a3a:	e735      	b.n	58a8 <Device_Write_Property_Local+0x34>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    5a3c:	2202      	movs	r2, #2
    5a3e:	23fb      	movs	r3, #251	; 0xfb
    5a40:	005b      	lsls	r3, r3, #1
    5a42:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    5a44:	3226      	adds	r2, #38	; 0x26
    5a46:	3302      	adds	r3, #2
    5a48:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    5a4a:	2000      	movs	r0, #0
            break;
    5a4c:	e72c      	b.n	58a8 <Device_Write_Property_Local+0x34>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    5a4e:	2202      	movs	r2, #2
    5a50:	23fb      	movs	r3, #251	; 0xfb
    5a52:	005b      	lsls	r3, r3, #1
    5a54:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    5a56:	321e      	adds	r2, #30
    5a58:	3302      	adds	r3, #2
    5a5a:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value - false=error */
    5a5c:	2000      	movs	r0, #0
            break;
    5a5e:	e723      	b.n	58a8 <Device_Write_Property_Local+0x34>
    5a60:	00002871 	.word	0x00002871
    5a64:	0000f02c 	.word	0x0000f02c
    5a68:	000053b1 	.word	0x000053b1
    5a6c:	00006ca5 	.word	0x00006ca5
    5a70:	00006cc5 	.word	0x00006cc5
    5a74:	00004085 	.word	0x00004085
    5a78:	20000af4 	.word	0x20000af4
    5a7c:	00004091 	.word	0x00004091
    5a80:	0000409b 	.word	0x0000409b
    5a84:	000057d1 	.word	0x000057d1
    5a88:	00005401 	.word	0x00005401

00005a8c <Device_Object_Name_Copy>:
{
    5a8c:	b570      	push	{r4, r5, r6, lr}
    5a8e:	000c      	movs	r4, r1
    5a90:	0015      	movs	r5, r2
    pObject = Device_Objects_Find_Functions(object_type);
    5a92:	4b07      	ldr	r3, [pc, #28]	; (5ab0 <Device_Object_Name_Copy+0x24>)
    5a94:	4798      	blx	r3
    if ((pObject != NULL) && (pObject->Object_Name != NULL)) {
    5a96:	2800      	cmp	r0, #0
    5a98:	d006      	beq.n	5aa8 <Device_Object_Name_Copy+0x1c>
    5a9a:	6943      	ldr	r3, [r0, #20]
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d005      	beq.n	5aac <Device_Object_Name_Copy+0x20>
        found = pObject->Object_Name(object_instance, object_name);
    5aa0:	0029      	movs	r1, r5
    5aa2:	0020      	movs	r0, r4
    5aa4:	4798      	blx	r3
}
    5aa6:	bd70      	pop	{r4, r5, r6, pc}
    bool found = false;
    5aa8:	2000      	movs	r0, #0
    5aaa:	e7fc      	b.n	5aa6 <Device_Object_Name_Copy+0x1a>
    5aac:	2000      	movs	r0, #0
    5aae:	e7fa      	b.n	5aa6 <Device_Object_Name_Copy+0x1a>
    5ab0:	00005015 	.word	0x00005015

00005ab4 <MSTP_Receive_Frame_FSM>:
    TransmitFrameCount++;

}

static void MSTP_Receive_Frame_FSM(void)
{
    5ab4:	b530      	push	{r4, r5, lr}
    5ab6:	b083      	sub	sp, #12
    /* stores the latest received data octet */
    uint8_t DataRegister = 0;
    5ab8:	2200      	movs	r2, #0
    5aba:	466b      	mov	r3, sp
    5abc:	71da      	strb	r2, [r3, #7]
    static uint8_t HeaderCRC = 0;
    /* Used as an index by the Receive State Machine,
       up to a maximum value of the MPDU */
    static uint16_t Index = 0;

    switch (Receive_State) {
    5abe:	4bcb      	ldr	r3, [pc, #812]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5ac0:	781b      	ldrb	r3, [r3, #0]
    5ac2:	b2db      	uxtb	r3, r3
    5ac4:	2b04      	cmp	r3, #4
    5ac6:	d900      	bls.n	5aca <MSTP_Receive_Frame_FSM+0x16>
    5ac8:	e225      	b.n	5f16 <MSTP_Receive_Frame_FSM+0x462>
    5aca:	009b      	lsls	r3, r3, #2
    5acc:	4ac8      	ldr	r2, [pc, #800]	; (5df0 <MSTP_Receive_Frame_FSM+0x33c>)
    5ace:	58d3      	ldr	r3, [r2, r3]
    5ad0:	469f      	mov	pc, r3
        case MSTP_RECEIVE_STATE_IDLE:
            /* In the IDLE state, the node waits
               for the beginning of a frame. */
            if (rs485_receive_error()) {
    5ad2:	4bc8      	ldr	r3, [pc, #800]	; (5df4 <MSTP_Receive_Frame_FSM+0x340>)
    5ad4:	4798      	blx	r3
    5ad6:	2800      	cmp	r0, #0
    5ad8:	d00d      	beq.n	5af6 <MSTP_Receive_Frame_FSM+0x42>
                /* EatAnError */
                rs485_silence_reset();
    5ada:	4bc7      	ldr	r3, [pc, #796]	; (5df8 <MSTP_Receive_Frame_FSM+0x344>)
    5adc:	4798      	blx	r3
                INCREMENT_AND_LIMIT_UINT8(EventCount);
    5ade:	4bc7      	ldr	r3, [pc, #796]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5ae0:	781b      	ldrb	r3, [r3, #0]
    5ae2:	b2db      	uxtb	r3, r3
    5ae4:	2bff      	cmp	r3, #255	; 0xff
    5ae6:	d100      	bne.n	5aea <MSTP_Receive_Frame_FSM+0x36>
    5ae8:	e218      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
    5aea:	4ac4      	ldr	r2, [pc, #784]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5aec:	7813      	ldrb	r3, [r2, #0]
    5aee:	3301      	adds	r3, #1
    5af0:	b2db      	uxtb	r3, r3
    5af2:	7013      	strb	r3, [r2, #0]
    5af4:	e212      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
            } else if (rs485_byte_available(&DataRegister)) {
    5af6:	466b      	mov	r3, sp
    5af8:	1dd8      	adds	r0, r3, #7
    5afa:	4bc1      	ldr	r3, [pc, #772]	; (5e00 <MSTP_Receive_Frame_FSM+0x34c>)
    5afc:	4798      	blx	r3
    5afe:	2800      	cmp	r0, #0
    5b00:	d100      	bne.n	5b04 <MSTP_Receive_Frame_FSM+0x50>
    5b02:	e20b      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                rs485_silence_reset();
    5b04:	4bbc      	ldr	r3, [pc, #752]	; (5df8 <MSTP_Receive_Frame_FSM+0x344>)
    5b06:	4798      	blx	r3
                INCREMENT_AND_LIMIT_UINT8(EventCount);
    5b08:	4bbc      	ldr	r3, [pc, #752]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5b0a:	781b      	ldrb	r3, [r3, #0]
    5b0c:	b2db      	uxtb	r3, r3
    5b0e:	2bff      	cmp	r3, #255	; 0xff
    5b10:	d004      	beq.n	5b1c <MSTP_Receive_Frame_FSM+0x68>
    5b12:	4aba      	ldr	r2, [pc, #744]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5b14:	7813      	ldrb	r3, [r2, #0]
    5b16:	3301      	adds	r3, #1
    5b18:	b2db      	uxtb	r3, r3
    5b1a:	7013      	strb	r3, [r2, #0]
                if (DataRegister == 0x55) {
    5b1c:	466b      	mov	r3, sp
    5b1e:	3307      	adds	r3, #7
    5b20:	781b      	ldrb	r3, [r3, #0]
    5b22:	2b55      	cmp	r3, #85	; 0x55
    5b24:	d000      	beq.n	5b28 <MSTP_Receive_Frame_FSM+0x74>
    5b26:	e1f9      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    /* Preamble1 */
                    /* receive the remainder of the frame. */
                    Receive_State = MSTP_RECEIVE_STATE_PREAMBLE;
    5b28:	2201      	movs	r2, #1
    5b2a:	4bb0      	ldr	r3, [pc, #704]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5b2c:	701a      	strb	r2, [r3, #0]
    5b2e:	e1f5      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
            }
            break;
        case MSTP_RECEIVE_STATE_PREAMBLE:
            /* In the PREAMBLE state, the node waits for the
               second octet of the preamble. */
            if (rs485_silence_elapsed(Tframe_abort)) {
    5b30:	201e      	movs	r0, #30
    5b32:	4bb4      	ldr	r3, [pc, #720]	; (5e04 <MSTP_Receive_Frame_FSM+0x350>)
    5b34:	4798      	blx	r3
    5b36:	2800      	cmp	r0, #0
    5b38:	d003      	beq.n	5b42 <MSTP_Receive_Frame_FSM+0x8e>
                /* Timeout */
                /* a correct preamble has not been received */
                /* wait for the start of a frame. */
                Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5b3a:	2200      	movs	r2, #0
    5b3c:	4bab      	ldr	r3, [pc, #684]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5b3e:	701a      	strb	r2, [r3, #0]
    5b40:	e1ec      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
            } else if (rs485_receive_error()) {
    5b42:	4bac      	ldr	r3, [pc, #688]	; (5df4 <MSTP_Receive_Frame_FSM+0x340>)
    5b44:	4798      	blx	r3
    5b46:	2800      	cmp	r0, #0
    5b48:	d00f      	beq.n	5b6a <MSTP_Receive_Frame_FSM+0xb6>
                /* Error */
                rs485_silence_reset();
    5b4a:	4bab      	ldr	r3, [pc, #684]	; (5df8 <MSTP_Receive_Frame_FSM+0x344>)
    5b4c:	4798      	blx	r3
                INCREMENT_AND_LIMIT_UINT8(EventCount);
    5b4e:	4bab      	ldr	r3, [pc, #684]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5b50:	781b      	ldrb	r3, [r3, #0]
    5b52:	b2db      	uxtb	r3, r3
    5b54:	2bff      	cmp	r3, #255	; 0xff
    5b56:	d004      	beq.n	5b62 <MSTP_Receive_Frame_FSM+0xae>
    5b58:	4aa8      	ldr	r2, [pc, #672]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5b5a:	7813      	ldrb	r3, [r2, #0]
    5b5c:	3301      	adds	r3, #1
    5b5e:	b2db      	uxtb	r3, r3
    5b60:	7013      	strb	r3, [r2, #0]
                /* wait for the start of a frame. */
                Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5b62:	2200      	movs	r2, #0
    5b64:	4ba1      	ldr	r3, [pc, #644]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5b66:	701a      	strb	r2, [r3, #0]
    5b68:	e1d8      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
            } else if (rs485_byte_available(&DataRegister)) {
    5b6a:	466b      	mov	r3, sp
    5b6c:	1dd8      	adds	r0, r3, #7
    5b6e:	4ba4      	ldr	r3, [pc, #656]	; (5e00 <MSTP_Receive_Frame_FSM+0x34c>)
    5b70:	4798      	blx	r3
    5b72:	2800      	cmp	r0, #0
    5b74:	d100      	bne.n	5b78 <MSTP_Receive_Frame_FSM+0xc4>
    5b76:	e1d1      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                rs485_silence_reset();
    5b78:	4b9f      	ldr	r3, [pc, #636]	; (5df8 <MSTP_Receive_Frame_FSM+0x344>)
    5b7a:	4798      	blx	r3
                INCREMENT_AND_LIMIT_UINT8(EventCount);
    5b7c:	4b9f      	ldr	r3, [pc, #636]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5b7e:	781b      	ldrb	r3, [r3, #0]
    5b80:	b2db      	uxtb	r3, r3
    5b82:	2bff      	cmp	r3, #255	; 0xff
    5b84:	d004      	beq.n	5b90 <MSTP_Receive_Frame_FSM+0xdc>
    5b86:	4a9d      	ldr	r2, [pc, #628]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5b88:	7813      	ldrb	r3, [r2, #0]
    5b8a:	3301      	adds	r3, #1
    5b8c:	b2db      	uxtb	r3, r3
    5b8e:	7013      	strb	r3, [r2, #0]
                if (DataRegister == 0xFF) {
    5b90:	466b      	mov	r3, sp
    5b92:	3307      	adds	r3, #7
    5b94:	781b      	ldrb	r3, [r3, #0]
    5b96:	2bff      	cmp	r3, #255	; 0xff
    5b98:	d005      	beq.n	5ba6 <MSTP_Receive_Frame_FSM+0xf2>
                    /* Preamble2 */
                    Index = 0;
                    HeaderCRC = 0xFF;
                    /* receive the remainder of the frame. */
                    Receive_State = MSTP_RECEIVE_STATE_HEADER;
                } else if (DataRegister == 0x55) {
    5b9a:	2b55      	cmp	r3, #85	; 0x55
    5b9c:	d00d      	beq.n	5bba <MSTP_Receive_Frame_FSM+0x106>
                    /* wait for the second preamble octet. */
                    Receive_State = MSTP_RECEIVE_STATE_PREAMBLE;
                } else {
                    /* NotPreamble */
                    /* wait for the start of a frame. */
                    Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5b9e:	2200      	movs	r2, #0
    5ba0:	4b92      	ldr	r3, [pc, #584]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5ba2:	701a      	strb	r2, [r3, #0]
    5ba4:	e1ba      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    Index = 0;
    5ba6:	2200      	movs	r2, #0
    5ba8:	4b97      	ldr	r3, [pc, #604]	; (5e08 <MSTP_Receive_Frame_FSM+0x354>)
    5baa:	801a      	strh	r2, [r3, #0]
                    HeaderCRC = 0xFF;
    5bac:	32ff      	adds	r2, #255	; 0xff
    5bae:	4b97      	ldr	r3, [pc, #604]	; (5e0c <MSTP_Receive_Frame_FSM+0x358>)
    5bb0:	701a      	strb	r2, [r3, #0]
                    Receive_State = MSTP_RECEIVE_STATE_HEADER;
    5bb2:	3afd      	subs	r2, #253	; 0xfd
    5bb4:	4b8d      	ldr	r3, [pc, #564]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5bb6:	701a      	strb	r2, [r3, #0]
    5bb8:	e1b0      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    Receive_State = MSTP_RECEIVE_STATE_PREAMBLE;
    5bba:	2201      	movs	r2, #1
    5bbc:	4b8b      	ldr	r3, [pc, #556]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5bbe:	701a      	strb	r2, [r3, #0]
    5bc0:	e1ac      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
            }
            break;
        case MSTP_RECEIVE_STATE_HEADER:
            /* In the HEADER state, the node waits
               for the fixed message header. */
            if (rs485_silence_elapsed(Tframe_abort)) {
    5bc2:	201e      	movs	r0, #30
    5bc4:	4b8f      	ldr	r3, [pc, #572]	; (5e04 <MSTP_Receive_Frame_FSM+0x350>)
    5bc6:	4798      	blx	r3
    5bc8:	2800      	cmp	r0, #0
    5bca:	d008      	beq.n	5bde <MSTP_Receive_Frame_FSM+0x12a>
                /* Timeout */
                /* indicate that an error has occurred
                   during the reception of a frame */
                MSTP_Flag.ReceivedInvalidFrame = true;
    5bcc:	4a90      	ldr	r2, [pc, #576]	; (5e10 <MSTP_Receive_Frame_FSM+0x35c>)
    5bce:	7813      	ldrb	r3, [r2, #0]
    5bd0:	2101      	movs	r1, #1
    5bd2:	430b      	orrs	r3, r1
    5bd4:	7013      	strb	r3, [r2, #0]
                /* wait for the start of a frame. */
                Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5bd6:	2200      	movs	r2, #0
    5bd8:	4b84      	ldr	r3, [pc, #528]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5bda:	701a      	strb	r2, [r3, #0]
    5bdc:	e19e      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
            } else if (rs485_receive_error()) {
    5bde:	4b85      	ldr	r3, [pc, #532]	; (5df4 <MSTP_Receive_Frame_FSM+0x340>)
    5be0:	4798      	blx	r3
    5be2:	2800      	cmp	r0, #0
    5be4:	d014      	beq.n	5c10 <MSTP_Receive_Frame_FSM+0x15c>
                /* Error */
                rs485_silence_reset();
    5be6:	4b84      	ldr	r3, [pc, #528]	; (5df8 <MSTP_Receive_Frame_FSM+0x344>)
    5be8:	4798      	blx	r3
                INCREMENT_AND_LIMIT_UINT8(EventCount);
    5bea:	4b84      	ldr	r3, [pc, #528]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5bec:	781b      	ldrb	r3, [r3, #0]
    5bee:	b2db      	uxtb	r3, r3
    5bf0:	2bff      	cmp	r3, #255	; 0xff
    5bf2:	d004      	beq.n	5bfe <MSTP_Receive_Frame_FSM+0x14a>
    5bf4:	4a81      	ldr	r2, [pc, #516]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5bf6:	7813      	ldrb	r3, [r2, #0]
    5bf8:	3301      	adds	r3, #1
    5bfa:	b2db      	uxtb	r3, r3
    5bfc:	7013      	strb	r3, [r2, #0]
                /* indicate that an error has occurred
                   during the reception of a frame */
                MSTP_Flag.ReceivedInvalidFrame = true;
    5bfe:	4a84      	ldr	r2, [pc, #528]	; (5e10 <MSTP_Receive_Frame_FSM+0x35c>)
    5c00:	7813      	ldrb	r3, [r2, #0]
    5c02:	2101      	movs	r1, #1
    5c04:	430b      	orrs	r3, r1
    5c06:	7013      	strb	r3, [r2, #0]
                /* wait for the start of a frame. */
                Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5c08:	2200      	movs	r2, #0
    5c0a:	4b78      	ldr	r3, [pc, #480]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5c0c:	701a      	strb	r2, [r3, #0]
    5c0e:	e185      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
            } else if (rs485_byte_available(&DataRegister)) {
    5c10:	466b      	mov	r3, sp
    5c12:	1dd8      	adds	r0, r3, #7
    5c14:	4b7a      	ldr	r3, [pc, #488]	; (5e00 <MSTP_Receive_Frame_FSM+0x34c>)
    5c16:	4798      	blx	r3
    5c18:	2800      	cmp	r0, #0
    5c1a:	d100      	bne.n	5c1e <MSTP_Receive_Frame_FSM+0x16a>
    5c1c:	e17e      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                rs485_silence_reset();
    5c1e:	4b76      	ldr	r3, [pc, #472]	; (5df8 <MSTP_Receive_Frame_FSM+0x344>)
    5c20:	4798      	blx	r3
                INCREMENT_AND_LIMIT_UINT8(EventCount);
    5c22:	4b76      	ldr	r3, [pc, #472]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5c24:	781b      	ldrb	r3, [r3, #0]
    5c26:	b2db      	uxtb	r3, r3
    5c28:	2bff      	cmp	r3, #255	; 0xff
    5c2a:	d004      	beq.n	5c36 <MSTP_Receive_Frame_FSM+0x182>
    5c2c:	4a73      	ldr	r2, [pc, #460]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5c2e:	7813      	ldrb	r3, [r2, #0]
    5c30:	3301      	adds	r3, #1
    5c32:	b2db      	uxtb	r3, r3
    5c34:	7013      	strb	r3, [r2, #0]
                if (Index == 0) {
    5c36:	4b74      	ldr	r3, [pc, #464]	; (5e08 <MSTP_Receive_Frame_FSM+0x354>)
    5c38:	881b      	ldrh	r3, [r3, #0]
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d012      	beq.n	5c64 <MSTP_Receive_Frame_FSM+0x1b0>
                    /* FrameType */
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
                    FrameType = DataRegister;
                    Index = 1;
                } else if (Index == 1) {
    5c3e:	2b01      	cmp	r3, #1
    5c40:	d01f      	beq.n	5c82 <MSTP_Receive_Frame_FSM+0x1ce>
                    /* Destination */
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
                    DestinationAddress = DataRegister;
                    Index = 2;
                } else if (Index == 2) {
    5c42:	2b02      	cmp	r3, #2
    5c44:	d02c      	beq.n	5ca0 <MSTP_Receive_Frame_FSM+0x1ec>
                    /* Source */
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
                    SourceAddress = DataRegister;
                    Index = 3;
                } else if (Index == 3) {
    5c46:	2b03      	cmp	r3, #3
    5c48:	d039      	beq.n	5cbe <MSTP_Receive_Frame_FSM+0x20a>
                    /* Length1 */
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
                    DataLength = DataRegister * 256;
                    Index = 4;
                } else if (Index == 4) {
    5c4a:	2b04      	cmp	r3, #4
    5c4c:	d047      	beq.n	5cde <MSTP_Receive_Frame_FSM+0x22a>
                    /* Length2 */
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
                    DataLength += DataRegister;
                    Index = 5;
                } else if (Index == 5) {
    5c4e:	2b05      	cmp	r3, #5
    5c50:	d056      	beq.n	5d00 <MSTP_Receive_Frame_FSM+0x24c>
                        }
                    }
                } else {
                    /* indicate that an error has occurred during  */
                    /* the reception of a frame */
                    MSTP_Flag.ReceivedInvalidFrame = true;
    5c52:	4a6f      	ldr	r2, [pc, #444]	; (5e10 <MSTP_Receive_Frame_FSM+0x35c>)
    5c54:	7813      	ldrb	r3, [r2, #0]
    5c56:	2101      	movs	r1, #1
    5c58:	430b      	orrs	r3, r1
    5c5a:	7013      	strb	r3, [r2, #0]
                    /* wait for the start of a frame. */
                    Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5c5c:	2200      	movs	r2, #0
    5c5e:	4b63      	ldr	r3, [pc, #396]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5c60:	701a      	strb	r2, [r3, #0]
    5c62:	e15b      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
    5c64:	4d69      	ldr	r5, [pc, #420]	; (5e0c <MSTP_Receive_Frame_FSM+0x358>)
    5c66:	7829      	ldrb	r1, [r5, #0]
    5c68:	466b      	mov	r3, sp
    5c6a:	1ddc      	adds	r4, r3, #7
    5c6c:	79d8      	ldrb	r0, [r3, #7]
    5c6e:	4b69      	ldr	r3, [pc, #420]	; (5e14 <MSTP_Receive_Frame_FSM+0x360>)
    5c70:	4798      	blx	r3
    5c72:	7028      	strb	r0, [r5, #0]
                    FrameType = DataRegister;
    5c74:	7822      	ldrb	r2, [r4, #0]
    5c76:	4b68      	ldr	r3, [pc, #416]	; (5e18 <MSTP_Receive_Frame_FSM+0x364>)
    5c78:	701a      	strb	r2, [r3, #0]
                    Index = 1;
    5c7a:	2201      	movs	r2, #1
    5c7c:	4b62      	ldr	r3, [pc, #392]	; (5e08 <MSTP_Receive_Frame_FSM+0x354>)
    5c7e:	801a      	strh	r2, [r3, #0]
    5c80:	e14c      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
    5c82:	4d62      	ldr	r5, [pc, #392]	; (5e0c <MSTP_Receive_Frame_FSM+0x358>)
    5c84:	7829      	ldrb	r1, [r5, #0]
    5c86:	466b      	mov	r3, sp
    5c88:	1ddc      	adds	r4, r3, #7
    5c8a:	79d8      	ldrb	r0, [r3, #7]
    5c8c:	4b61      	ldr	r3, [pc, #388]	; (5e14 <MSTP_Receive_Frame_FSM+0x360>)
    5c8e:	4798      	blx	r3
    5c90:	7028      	strb	r0, [r5, #0]
                    DestinationAddress = DataRegister;
    5c92:	7822      	ldrb	r2, [r4, #0]
    5c94:	4b61      	ldr	r3, [pc, #388]	; (5e1c <MSTP_Receive_Frame_FSM+0x368>)
    5c96:	701a      	strb	r2, [r3, #0]
                    Index = 2;
    5c98:	2202      	movs	r2, #2
    5c9a:	4b5b      	ldr	r3, [pc, #364]	; (5e08 <MSTP_Receive_Frame_FSM+0x354>)
    5c9c:	801a      	strh	r2, [r3, #0]
    5c9e:	e13d      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
    5ca0:	4d5a      	ldr	r5, [pc, #360]	; (5e0c <MSTP_Receive_Frame_FSM+0x358>)
    5ca2:	7829      	ldrb	r1, [r5, #0]
    5ca4:	466b      	mov	r3, sp
    5ca6:	1ddc      	adds	r4, r3, #7
    5ca8:	79d8      	ldrb	r0, [r3, #7]
    5caa:	4b5a      	ldr	r3, [pc, #360]	; (5e14 <MSTP_Receive_Frame_FSM+0x360>)
    5cac:	4798      	blx	r3
    5cae:	7028      	strb	r0, [r5, #0]
                    SourceAddress = DataRegister;
    5cb0:	7822      	ldrb	r2, [r4, #0]
    5cb2:	4b5b      	ldr	r3, [pc, #364]	; (5e20 <MSTP_Receive_Frame_FSM+0x36c>)
    5cb4:	701a      	strb	r2, [r3, #0]
                    Index = 3;
    5cb6:	2203      	movs	r2, #3
    5cb8:	4b53      	ldr	r3, [pc, #332]	; (5e08 <MSTP_Receive_Frame_FSM+0x354>)
    5cba:	801a      	strh	r2, [r3, #0]
    5cbc:	e12e      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
    5cbe:	4d53      	ldr	r5, [pc, #332]	; (5e0c <MSTP_Receive_Frame_FSM+0x358>)
    5cc0:	7829      	ldrb	r1, [r5, #0]
    5cc2:	466b      	mov	r3, sp
    5cc4:	1ddc      	adds	r4, r3, #7
    5cc6:	79d8      	ldrb	r0, [r3, #7]
    5cc8:	4b52      	ldr	r3, [pc, #328]	; (5e14 <MSTP_Receive_Frame_FSM+0x360>)
    5cca:	4798      	blx	r3
    5ccc:	7028      	strb	r0, [r5, #0]
                    DataLength = DataRegister * 256;
    5cce:	7823      	ldrb	r3, [r4, #0]
    5cd0:	021b      	lsls	r3, r3, #8
    5cd2:	4a54      	ldr	r2, [pc, #336]	; (5e24 <MSTP_Receive_Frame_FSM+0x370>)
    5cd4:	6013      	str	r3, [r2, #0]
                    Index = 4;
    5cd6:	2204      	movs	r2, #4
    5cd8:	4b4b      	ldr	r3, [pc, #300]	; (5e08 <MSTP_Receive_Frame_FSM+0x354>)
    5cda:	801a      	strh	r2, [r3, #0]
    5cdc:	e11e      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
    5cde:	4d4b      	ldr	r5, [pc, #300]	; (5e0c <MSTP_Receive_Frame_FSM+0x358>)
    5ce0:	7829      	ldrb	r1, [r5, #0]
    5ce2:	466b      	mov	r3, sp
    5ce4:	1ddc      	adds	r4, r3, #7
    5ce6:	79d8      	ldrb	r0, [r3, #7]
    5ce8:	4b4a      	ldr	r3, [pc, #296]	; (5e14 <MSTP_Receive_Frame_FSM+0x360>)
    5cea:	4798      	blx	r3
    5cec:	7028      	strb	r0, [r5, #0]
                    DataLength += DataRegister;
    5cee:	4a4d      	ldr	r2, [pc, #308]	; (5e24 <MSTP_Receive_Frame_FSM+0x370>)
    5cf0:	6811      	ldr	r1, [r2, #0]
    5cf2:	7823      	ldrb	r3, [r4, #0]
    5cf4:	185b      	adds	r3, r3, r1
    5cf6:	6013      	str	r3, [r2, #0]
                    Index = 5;
    5cf8:	2205      	movs	r2, #5
    5cfa:	4b43      	ldr	r3, [pc, #268]	; (5e08 <MSTP_Receive_Frame_FSM+0x354>)
    5cfc:	801a      	strh	r2, [r3, #0]
    5cfe:	e10d      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    HeaderCRC = CRC_Calc_Header(DataRegister, HeaderCRC);
    5d00:	4c42      	ldr	r4, [pc, #264]	; (5e0c <MSTP_Receive_Frame_FSM+0x358>)
    5d02:	7821      	ldrb	r1, [r4, #0]
    5d04:	466b      	mov	r3, sp
    5d06:	79d8      	ldrb	r0, [r3, #7]
    5d08:	4b42      	ldr	r3, [pc, #264]	; (5e14 <MSTP_Receive_Frame_FSM+0x360>)
    5d0a:	4798      	blx	r3
    5d0c:	7020      	strb	r0, [r4, #0]
                    if (HeaderCRC != 0x55) {
    5d0e:	2855      	cmp	r0, #85	; 0x55
    5d10:	d008      	beq.n	5d24 <MSTP_Receive_Frame_FSM+0x270>
                        MSTP_Flag.ReceivedInvalidFrame = true;
    5d12:	4a3f      	ldr	r2, [pc, #252]	; (5e10 <MSTP_Receive_Frame_FSM+0x35c>)
    5d14:	7813      	ldrb	r3, [r2, #0]
    5d16:	2101      	movs	r1, #1
    5d18:	430b      	orrs	r3, r1
    5d1a:	7013      	strb	r3, [r2, #0]
                        Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5d1c:	2200      	movs	r2, #0
    5d1e:	4b33      	ldr	r3, [pc, #204]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5d20:	701a      	strb	r2, [r3, #0]
    5d22:	e0fb      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                        Address = DestinationAddress;
    5d24:	4b3d      	ldr	r3, [pc, #244]	; (5e1c <MSTP_Receive_Frame_FSM+0x368>)
    5d26:	781b      	ldrb	r3, [r3, #0]
    5d28:	b2db      	uxtb	r3, r3
                        if (DataLength == 0) {
    5d2a:	4a3e      	ldr	r2, [pc, #248]	; (5e24 <MSTP_Receive_Frame_FSM+0x370>)
    5d2c:	6812      	ldr	r2, [r2, #0]
    5d2e:	2a00      	cmp	r2, #0
    5d30:	d115      	bne.n	5d5e <MSTP_Receive_Frame_FSM+0x2aa>
                            if ((Address == This_Station) ||
    5d32:	4a3d      	ldr	r2, [pc, #244]	; (5e28 <MSTP_Receive_Frame_FSM+0x374>)
    5d34:	7812      	ldrb	r2, [r2, #0]
    5d36:	b2d2      	uxtb	r2, r2
    5d38:	4293      	cmp	r3, r2
    5d3a:	d001      	beq.n	5d40 <MSTP_Receive_Frame_FSM+0x28c>
    5d3c:	2bff      	cmp	r3, #255	; 0xff
    5d3e:	d105      	bne.n	5d4c <MSTP_Receive_Frame_FSM+0x298>
                                MSTP_Flag.ReceivedValidFrame = true;
    5d40:	4a33      	ldr	r2, [pc, #204]	; (5e10 <MSTP_Receive_Frame_FSM+0x35c>)
    5d42:	7811      	ldrb	r1, [r2, #0]
    5d44:	2302      	movs	r3, #2
    5d46:	430b      	orrs	r3, r1
    5d48:	7013      	strb	r3, [r2, #0]
    5d4a:	e004      	b.n	5d56 <MSTP_Receive_Frame_FSM+0x2a2>
                                MSTP_Flag.ReceivedValidFrameNotForUs = true;
    5d4c:	4a30      	ldr	r2, [pc, #192]	; (5e10 <MSTP_Receive_Frame_FSM+0x35c>)
    5d4e:	7811      	ldrb	r1, [r2, #0]
    5d50:	2304      	movs	r3, #4
    5d52:	430b      	orrs	r3, r1
    5d54:	7013      	strb	r3, [r2, #0]
                            Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5d56:	2200      	movs	r2, #0
    5d58:	4b24      	ldr	r3, [pc, #144]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5d5a:	701a      	strb	r2, [r3, #0]
    5d5c:	e0de      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                            if ((Address == This_Station) ||
    5d5e:	4a32      	ldr	r2, [pc, #200]	; (5e28 <MSTP_Receive_Frame_FSM+0x374>)
    5d60:	7812      	ldrb	r2, [r2, #0]
    5d62:	b2d2      	uxtb	r2, r2
    5d64:	4293      	cmp	r3, r2
    5d66:	d001      	beq.n	5d6c <MSTP_Receive_Frame_FSM+0x2b8>
    5d68:	2bff      	cmp	r3, #255	; 0xff
    5d6a:	d10e      	bne.n	5d8a <MSTP_Receive_Frame_FSM+0x2d6>
                                if (DataLength <= InputBufferSize) {
    5d6c:	4b2f      	ldr	r3, [pc, #188]	; (5e2c <MSTP_Receive_Frame_FSM+0x378>)
    5d6e:	881b      	ldrh	r3, [r3, #0]
    5d70:	b29b      	uxth	r3, r3
    5d72:	4a2c      	ldr	r2, [pc, #176]	; (5e24 <MSTP_Receive_Frame_FSM+0x370>)
    5d74:	6812      	ldr	r2, [r2, #0]
    5d76:	4293      	cmp	r3, r2
    5d78:	d303      	bcc.n	5d82 <MSTP_Receive_Frame_FSM+0x2ce>
                                    Receive_State = MSTP_RECEIVE_STATE_DATA;
    5d7a:	2203      	movs	r2, #3
    5d7c:	4b1b      	ldr	r3, [pc, #108]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5d7e:	701a      	strb	r2, [r3, #0]
    5d80:	e006      	b.n	5d90 <MSTP_Receive_Frame_FSM+0x2dc>
                                    Receive_State =
    5d82:	2204      	movs	r2, #4
    5d84:	4b19      	ldr	r3, [pc, #100]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5d86:	701a      	strb	r2, [r3, #0]
    5d88:	e002      	b.n	5d90 <MSTP_Receive_Frame_FSM+0x2dc>
                                Receive_State = MSTP_RECEIVE_STATE_SKIP_DATA;
    5d8a:	2204      	movs	r2, #4
    5d8c:	4b17      	ldr	r3, [pc, #92]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5d8e:	701a      	strb	r2, [r3, #0]
                            Index = 0;
    5d90:	2200      	movs	r2, #0
    5d92:	4b1d      	ldr	r3, [pc, #116]	; (5e08 <MSTP_Receive_Frame_FSM+0x354>)
    5d94:	801a      	strh	r2, [r3, #0]
                            DataCRC = 0xFFFF;
    5d96:	3a01      	subs	r2, #1
    5d98:	4b25      	ldr	r3, [pc, #148]	; (5e30 <MSTP_Receive_Frame_FSM+0x37c>)
    5d9a:	801a      	strh	r2, [r3, #0]
    5d9c:	e0be      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
            break;
        case MSTP_RECEIVE_STATE_DATA:
        case MSTP_RECEIVE_STATE_SKIP_DATA:
            /* In the DATA state, the node waits
               for the data portion of a frame. */
            if (rs485_silence_elapsed(Tframe_abort)) {
    5d9e:	201e      	movs	r0, #30
    5da0:	4b18      	ldr	r3, [pc, #96]	; (5e04 <MSTP_Receive_Frame_FSM+0x350>)
    5da2:	4798      	blx	r3
    5da4:	2800      	cmp	r0, #0
    5da6:	d008      	beq.n	5dba <MSTP_Receive_Frame_FSM+0x306>
                /* Timeout */
                /* indicate that an error has occurred
                   during the reception of a frame */
                MSTP_Flag.ReceivedInvalidFrame = true;
    5da8:	4a19      	ldr	r2, [pc, #100]	; (5e10 <MSTP_Receive_Frame_FSM+0x35c>)
    5daa:	7813      	ldrb	r3, [r2, #0]
    5dac:	2101      	movs	r1, #1
    5dae:	430b      	orrs	r3, r1
    5db0:	7013      	strb	r3, [r2, #0]
                /* wait for the start of the next frame. */
                Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5db2:	2200      	movs	r2, #0
    5db4:	4b0d      	ldr	r3, [pc, #52]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5db6:	701a      	strb	r2, [r3, #0]
    5db8:	e0b0      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
            } else if (rs485_receive_error()) {
    5dba:	4b0e      	ldr	r3, [pc, #56]	; (5df4 <MSTP_Receive_Frame_FSM+0x340>)
    5dbc:	4798      	blx	r3
    5dbe:	2800      	cmp	r0, #0
    5dc0:	d038      	beq.n	5e34 <MSTP_Receive_Frame_FSM+0x380>
                /* Error */
                rs485_silence_reset();
    5dc2:	4b0d      	ldr	r3, [pc, #52]	; (5df8 <MSTP_Receive_Frame_FSM+0x344>)
    5dc4:	4798      	blx	r3
                INCREMENT_AND_LIMIT_UINT8(EventCount);
    5dc6:	4b0d      	ldr	r3, [pc, #52]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5dc8:	781b      	ldrb	r3, [r3, #0]
    5dca:	b2db      	uxtb	r3, r3
    5dcc:	2bff      	cmp	r3, #255	; 0xff
    5dce:	d004      	beq.n	5dda <MSTP_Receive_Frame_FSM+0x326>
    5dd0:	4a0a      	ldr	r2, [pc, #40]	; (5dfc <MSTP_Receive_Frame_FSM+0x348>)
    5dd2:	7813      	ldrb	r3, [r2, #0]
    5dd4:	3301      	adds	r3, #1
    5dd6:	b2db      	uxtb	r3, r3
    5dd8:	7013      	strb	r3, [r2, #0]
                /* indicate that an error has occurred during
                   the reception of a frame */
                MSTP_Flag.ReceivedInvalidFrame = true;
    5dda:	4a0d      	ldr	r2, [pc, #52]	; (5e10 <MSTP_Receive_Frame_FSM+0x35c>)
    5ddc:	7813      	ldrb	r3, [r2, #0]
    5dde:	2101      	movs	r1, #1
    5de0:	430b      	orrs	r3, r1
    5de2:	7013      	strb	r3, [r2, #0]
                /* wait for the start of the next frame. */
                Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5de4:	2200      	movs	r2, #0
    5de6:	4b01      	ldr	r3, [pc, #4]	; (5dec <MSTP_Receive_Frame_FSM+0x338>)
    5de8:	701a      	strb	r2, [r3, #0]
    5dea:	e097      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
    5dec:	20001354 	.word	0x20001354
    5df0:	0000f364 	.word	0x0000f364
    5df4:	0000b295 	.word	0x0000b295
    5df8:	0000b1a5 	.word	0x0000b1a5
    5dfc:	20000cdd 	.word	0x20000cdd
    5e00:	0000b261 	.word	0x0000b261
    5e04:	0000b1b9 	.word	0x0000b1b9
    5e08:	20000ce2 	.word	0x20000ce2
    5e0c:	20000ce0 	.word	0x20000ce0
    5e10:	20000cec 	.word	0x20000cec
    5e14:	00004325 	.word	0x00004325
    5e18:	20000cdf 	.word	0x20000cdf
    5e1c:	20000cdc 	.word	0x20000cdc
    5e20:	2000135c 	.word	0x2000135c
    5e24:	20000cd8 	.word	0x20000cd8
    5e28:	2000135d 	.word	0x2000135d
    5e2c:	20000ce8 	.word	0x20000ce8
    5e30:	20000cd6 	.word	0x20000cd6
            } else if (rs485_byte_available(&DataRegister)) {
    5e34:	466b      	mov	r3, sp
    5e36:	1dd8      	adds	r0, r3, #7
    5e38:	4b39      	ldr	r3, [pc, #228]	; (5f20 <MSTP_Receive_Frame_FSM+0x46c>)
    5e3a:	4798      	blx	r3
    5e3c:	2800      	cmp	r0, #0
    5e3e:	d06d      	beq.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                rs485_silence_reset();
    5e40:	4b38      	ldr	r3, [pc, #224]	; (5f24 <MSTP_Receive_Frame_FSM+0x470>)
    5e42:	4798      	blx	r3
                INCREMENT_AND_LIMIT_UINT8(EventCount);
    5e44:	4b38      	ldr	r3, [pc, #224]	; (5f28 <MSTP_Receive_Frame_FSM+0x474>)
    5e46:	781b      	ldrb	r3, [r3, #0]
    5e48:	b2db      	uxtb	r3, r3
    5e4a:	2bff      	cmp	r3, #255	; 0xff
    5e4c:	d004      	beq.n	5e58 <MSTP_Receive_Frame_FSM+0x3a4>
    5e4e:	4a36      	ldr	r2, [pc, #216]	; (5f28 <MSTP_Receive_Frame_FSM+0x474>)
    5e50:	7813      	ldrb	r3, [r2, #0]
    5e52:	3301      	adds	r3, #1
    5e54:	b2db      	uxtb	r3, r3
    5e56:	7013      	strb	r3, [r2, #0]
                if (Index < DataLength) {
    5e58:	4b34      	ldr	r3, [pc, #208]	; (5f2c <MSTP_Receive_Frame_FSM+0x478>)
    5e5a:	881b      	ldrh	r3, [r3, #0]
    5e5c:	4a34      	ldr	r2, [pc, #208]	; (5f30 <MSTP_Receive_Frame_FSM+0x47c>)
    5e5e:	6812      	ldr	r2, [r2, #0]
    5e60:	4293      	cmp	r3, r2
    5e62:	d311      	bcc.n	5e88 <MSTP_Receive_Frame_FSM+0x3d4>
                    DataCRC = CRC_Calc_Data(DataRegister, DataCRC);
                    if (Index < InputBufferSize) {
                        InputBuffer[Index] = DataRegister;
                    }
                    Index++;
                } else if (Index == DataLength) {
    5e64:	4a32      	ldr	r2, [pc, #200]	; (5f30 <MSTP_Receive_Frame_FSM+0x47c>)
    5e66:	6812      	ldr	r2, [r2, #0]
    5e68:	4293      	cmp	r3, r2
    5e6a:	d025      	beq.n	5eb8 <MSTP_Receive_Frame_FSM+0x404>
                    /* CRC1 */
                    DataCRC = CRC_Calc_Data(DataRegister, DataCRC);
                    Index++;
                } else if (Index == (DataLength + 1)) {
    5e6c:	4a30      	ldr	r2, [pc, #192]	; (5f30 <MSTP_Receive_Frame_FSM+0x47c>)
    5e6e:	6812      	ldr	r2, [r2, #0]
    5e70:	3201      	adds	r2, #1
    5e72:	4293      	cmp	r3, r2
    5e74:	d02c      	beq.n	5ed0 <MSTP_Receive_Frame_FSM+0x41c>
                    } else {
                        MSTP_Flag.ReceivedInvalidFrame = true;
                    }
                    Receive_State = MSTP_RECEIVE_STATE_IDLE;
                } else {
                    MSTP_Flag.ReceivedInvalidFrame = true;
    5e76:	4a2f      	ldr	r2, [pc, #188]	; (5f34 <MSTP_Receive_Frame_FSM+0x480>)
    5e78:	7813      	ldrb	r3, [r2, #0]
    5e7a:	2101      	movs	r1, #1
    5e7c:	430b      	orrs	r3, r1
    5e7e:	7013      	strb	r3, [r2, #0]
                    Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5e80:	2200      	movs	r2, #0
    5e82:	4b2d      	ldr	r3, [pc, #180]	; (5f38 <MSTP_Receive_Frame_FSM+0x484>)
    5e84:	701a      	strb	r2, [r3, #0]
    5e86:	e049      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    DataCRC = CRC_Calc_Data(DataRegister, DataCRC);
    5e88:	4c2c      	ldr	r4, [pc, #176]	; (5f3c <MSTP_Receive_Frame_FSM+0x488>)
    5e8a:	8821      	ldrh	r1, [r4, #0]
    5e8c:	466b      	mov	r3, sp
    5e8e:	79d8      	ldrb	r0, [r3, #7]
    5e90:	4b2b      	ldr	r3, [pc, #172]	; (5f40 <MSTP_Receive_Frame_FSM+0x48c>)
    5e92:	4798      	blx	r3
    5e94:	8020      	strh	r0, [r4, #0]
                    if (Index < InputBufferSize) {
    5e96:	4b25      	ldr	r3, [pc, #148]	; (5f2c <MSTP_Receive_Frame_FSM+0x478>)
    5e98:	881b      	ldrh	r3, [r3, #0]
    5e9a:	4a2a      	ldr	r2, [pc, #168]	; (5f44 <MSTP_Receive_Frame_FSM+0x490>)
    5e9c:	8812      	ldrh	r2, [r2, #0]
    5e9e:	b292      	uxth	r2, r2
    5ea0:	4293      	cmp	r3, r2
    5ea2:	d205      	bcs.n	5eb0 <MSTP_Receive_Frame_FSM+0x3fc>
                        InputBuffer[Index] = DataRegister;
    5ea4:	4a28      	ldr	r2, [pc, #160]	; (5f48 <MSTP_Receive_Frame_FSM+0x494>)
    5ea6:	6812      	ldr	r2, [r2, #0]
    5ea8:	4669      	mov	r1, sp
    5eaa:	3107      	adds	r1, #7
    5eac:	7809      	ldrb	r1, [r1, #0]
    5eae:	54d1      	strb	r1, [r2, r3]
                    Index++;
    5eb0:	3301      	adds	r3, #1
    5eb2:	4a1e      	ldr	r2, [pc, #120]	; (5f2c <MSTP_Receive_Frame_FSM+0x478>)
    5eb4:	8013      	strh	r3, [r2, #0]
    5eb6:	e031      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    DataCRC = CRC_Calc_Data(DataRegister, DataCRC);
    5eb8:	4c20      	ldr	r4, [pc, #128]	; (5f3c <MSTP_Receive_Frame_FSM+0x488>)
    5eba:	8821      	ldrh	r1, [r4, #0]
    5ebc:	466b      	mov	r3, sp
    5ebe:	79d8      	ldrb	r0, [r3, #7]
    5ec0:	4b1f      	ldr	r3, [pc, #124]	; (5f40 <MSTP_Receive_Frame_FSM+0x48c>)
    5ec2:	4798      	blx	r3
    5ec4:	8020      	strh	r0, [r4, #0]
                    Index++;
    5ec6:	4a19      	ldr	r2, [pc, #100]	; (5f2c <MSTP_Receive_Frame_FSM+0x478>)
    5ec8:	8813      	ldrh	r3, [r2, #0]
    5eca:	3301      	adds	r3, #1
    5ecc:	8013      	strh	r3, [r2, #0]
    5ece:	e025      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                    DataCRC = CRC_Calc_Data(DataRegister, DataCRC);
    5ed0:	4c1a      	ldr	r4, [pc, #104]	; (5f3c <MSTP_Receive_Frame_FSM+0x488>)
    5ed2:	8821      	ldrh	r1, [r4, #0]
    5ed4:	466b      	mov	r3, sp
    5ed6:	79d8      	ldrb	r0, [r3, #7]
    5ed8:	4b19      	ldr	r3, [pc, #100]	; (5f40 <MSTP_Receive_Frame_FSM+0x48c>)
    5eda:	4798      	blx	r3
    5edc:	8020      	strh	r0, [r4, #0]
                    if (DataCRC == 0xF0B8) {
    5ede:	4b1b      	ldr	r3, [pc, #108]	; (5f4c <MSTP_Receive_Frame_FSM+0x498>)
    5ee0:	4298      	cmp	r0, r3
    5ee2:	d008      	beq.n	5ef6 <MSTP_Receive_Frame_FSM+0x442>
                        MSTP_Flag.ReceivedInvalidFrame = true;
    5ee4:	4a13      	ldr	r2, [pc, #76]	; (5f34 <MSTP_Receive_Frame_FSM+0x480>)
    5ee6:	7813      	ldrb	r3, [r2, #0]
    5ee8:	2101      	movs	r1, #1
    5eea:	430b      	orrs	r3, r1
    5eec:	7013      	strb	r3, [r2, #0]
                    Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5eee:	2200      	movs	r2, #0
    5ef0:	4b11      	ldr	r3, [pc, #68]	; (5f38 <MSTP_Receive_Frame_FSM+0x484>)
    5ef2:	701a      	strb	r2, [r3, #0]
    5ef4:	e012      	b.n	5f1c <MSTP_Receive_Frame_FSM+0x468>
                        if (Receive_State == MSTP_RECEIVE_STATE_DATA) {
    5ef6:	4b10      	ldr	r3, [pc, #64]	; (5f38 <MSTP_Receive_Frame_FSM+0x484>)
    5ef8:	781b      	ldrb	r3, [r3, #0]
    5efa:	2b03      	cmp	r3, #3
    5efc:	d005      	beq.n	5f0a <MSTP_Receive_Frame_FSM+0x456>
                            MSTP_Flag.ReceivedValidFrameNotForUs = true;
    5efe:	4a0d      	ldr	r2, [pc, #52]	; (5f34 <MSTP_Receive_Frame_FSM+0x480>)
    5f00:	7811      	ldrb	r1, [r2, #0]
    5f02:	2304      	movs	r3, #4
    5f04:	430b      	orrs	r3, r1
    5f06:	7013      	strb	r3, [r2, #0]
    5f08:	e7f1      	b.n	5eee <MSTP_Receive_Frame_FSM+0x43a>
                            MSTP_Flag.ReceivedValidFrame = true;
    5f0a:	4a0a      	ldr	r2, [pc, #40]	; (5f34 <MSTP_Receive_Frame_FSM+0x480>)
    5f0c:	7811      	ldrb	r1, [r2, #0]
    5f0e:	3b01      	subs	r3, #1
    5f10:	430b      	orrs	r3, r1
    5f12:	7013      	strb	r3, [r2, #0]
    5f14:	e7eb      	b.n	5eee <MSTP_Receive_Frame_FSM+0x43a>
                }
            }
            break;
        default:
            /* shouldn't get here - but if we do... */
            Receive_State = MSTP_RECEIVE_STATE_IDLE;
    5f16:	2200      	movs	r2, #0
    5f18:	4b07      	ldr	r3, [pc, #28]	; (5f38 <MSTP_Receive_Frame_FSM+0x484>)
    5f1a:	701a      	strb	r2, [r3, #0]
            break;
    }

    return;
}
    5f1c:	b003      	add	sp, #12
    5f1e:	bd30      	pop	{r4, r5, pc}
    5f20:	0000b261 	.word	0x0000b261
    5f24:	0000b1a5 	.word	0x0000b1a5
    5f28:	20000cdd 	.word	0x20000cdd
    5f2c:	20000ce2 	.word	0x20000ce2
    5f30:	20000cd8 	.word	0x20000cd8
    5f34:	20000cec 	.word	0x20000cec
    5f38:	20001354 	.word	0x20001354
    5f3c:	20000cd6 	.word	0x20000cd6
    5f40:	00004355 	.word	0x00004355
    5f44:	20000ce8 	.word	0x20000ce8
    5f48:	20000ce4 	.word	0x20000ce4
    5f4c:	0000f0b8 	.word	0x0000f0b8

00005f50 <MSTP_Create_Frame>:
{
    5f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f52:	46d6      	mov	lr, sl
    5f54:	4647      	mov	r7, r8
    5f56:	b580      	push	{r7, lr}
    5f58:	b083      	sub	sp, #12
    5f5a:	0006      	movs	r6, r0
    5f5c:	4688      	mov	r8, r1
    5f5e:	9301      	str	r3, [sp, #4]
    5f60:	ab0a      	add	r3, sp, #40	; 0x28
    5f62:	781b      	ldrb	r3, [r3, #0]
    5f64:	469a      	mov	sl, r3
    5f66:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5f68:	ab0c      	add	r3, sp, #48	; 0x30
    5f6a:	881d      	ldrh	r5, [r3, #0]
    if (buffer_size < 8)
    5f6c:	2907      	cmp	r1, #7
    5f6e:	d806      	bhi.n	5f7e <MSTP_Create_Frame+0x2e>
        return 0;
    5f70:	2400      	movs	r4, #0
}
    5f72:	0020      	movs	r0, r4
    5f74:	b003      	add	sp, #12
    5f76:	bc0c      	pop	{r2, r3}
    5f78:	4690      	mov	r8, r2
    5f7a:	469a      	mov	sl, r3
    5f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buffer[0] = 0x55;
    5f7e:	2355      	movs	r3, #85	; 0x55
    5f80:	7003      	strb	r3, [r0, #0]
    buffer[1] = 0xFF;
    5f82:	33aa      	adds	r3, #170	; 0xaa
    5f84:	7043      	strb	r3, [r0, #1]
    buffer[2] = frame_type;
    5f86:	7082      	strb	r2, [r0, #2]
    crc8 = CRC_Calc_Header(buffer[2], crc8);
    5f88:	21ff      	movs	r1, #255	; 0xff
    5f8a:	0010      	movs	r0, r2
    5f8c:	4c1c      	ldr	r4, [pc, #112]	; (6000 <MSTP_Create_Frame+0xb0>)
    5f8e:	47a0      	blx	r4
    5f90:	0001      	movs	r1, r0
    buffer[3] = destination;
    5f92:	9801      	ldr	r0, [sp, #4]
    5f94:	70f0      	strb	r0, [r6, #3]
    crc8 = CRC_Calc_Header(buffer[3], crc8);
    5f96:	47a0      	blx	r4
    5f98:	0001      	movs	r1, r0
    buffer[4] = source;
    5f9a:	4653      	mov	r3, sl
    5f9c:	7133      	strb	r3, [r6, #4]
    crc8 = CRC_Calc_Header(buffer[4], crc8);
    5f9e:	4650      	mov	r0, sl
    5fa0:	47a0      	blx	r4
    5fa2:	0001      	movs	r1, r0
    buffer[5] = data_len >> 8; /* MSB first */
    5fa4:	0a28      	lsrs	r0, r5, #8
    5fa6:	7170      	strb	r0, [r6, #5]
    crc8 = CRC_Calc_Header(buffer[5], crc8);
    5fa8:	47a0      	blx	r4
    5faa:	0001      	movs	r1, r0
    buffer[6] = data_len & 0xFF;
    5fac:	b2e8      	uxtb	r0, r5
    5fae:	71b0      	strb	r0, [r6, #6]
    crc8 = CRC_Calc_Header(buffer[6], crc8);
    5fb0:	47a0      	blx	r4
    buffer[7] = ~crc8;
    5fb2:	43c0      	mvns	r0, r0
    5fb4:	71f0      	strb	r0, [r6, #7]
    index = 8;
    5fb6:	2408      	movs	r4, #8
    uint16_t crc16 = 0xFFFF;
    5fb8:	4912      	ldr	r1, [pc, #72]	; (6004 <MSTP_Create_Frame+0xb4>)
    while (data_len && data && (index < buffer_size)) {
    5fba:	e009      	b.n	5fd0 <MSTP_Create_Frame+0x80>
        buffer[index] = *data;
    5fbc:	7838      	ldrb	r0, [r7, #0]
    5fbe:	5530      	strb	r0, [r6, r4]
        crc16 = CRC_Calc_Data(buffer[index], crc16);
    5fc0:	4b11      	ldr	r3, [pc, #68]	; (6008 <MSTP_Create_Frame+0xb8>)
    5fc2:	4798      	blx	r3
    5fc4:	0001      	movs	r1, r0
        data++;
    5fc6:	3701      	adds	r7, #1
        index++;
    5fc8:	3401      	adds	r4, #1
    5fca:	b2a4      	uxth	r4, r4
        data_len--;
    5fcc:	3d01      	subs	r5, #1
    5fce:	b2ad      	uxth	r5, r5
    while (data_len && data && (index < buffer_size)) {
    5fd0:	2d00      	cmp	r5, #0
    5fd2:	d003      	beq.n	5fdc <MSTP_Create_Frame+0x8c>
    5fd4:	2f00      	cmp	r7, #0
    5fd6:	d001      	beq.n	5fdc <MSTP_Create_Frame+0x8c>
    5fd8:	4544      	cmp	r4, r8
    5fda:	d3ef      	bcc.n	5fbc <MSTP_Create_Frame+0x6c>
    if (index > 8) {
    5fdc:	2c08      	cmp	r4, #8
    5fde:	d9c8      	bls.n	5f72 <MSTP_Create_Frame+0x22>
        if ((index + 2) <= buffer_size) {
    5fe0:	1ca3      	adds	r3, r4, #2
    5fe2:	4543      	cmp	r3, r8
    5fe4:	dc09      	bgt.n	5ffa <MSTP_Create_Frame+0xaa>
            crc16 = ~crc16;
    5fe6:	43c9      	mvns	r1, r1
    5fe8:	b289      	uxth	r1, r1
            buffer[index] = crc16 & 0xFF; /* LSB first */
    5fea:	5531      	strb	r1, [r6, r4]
            index++;
    5fec:	1c63      	adds	r3, r4, #1
    5fee:	b29b      	uxth	r3, r3
            buffer[index] = crc16 >> 8;
    5ff0:	0a09      	lsrs	r1, r1, #8
    5ff2:	54f1      	strb	r1, [r6, r3]
            index++;
    5ff4:	3402      	adds	r4, #2
    5ff6:	b2a4      	uxth	r4, r4
    5ff8:	e7bb      	b.n	5f72 <MSTP_Create_Frame+0x22>
            return 0;
    5ffa:	2400      	movs	r4, #0
    5ffc:	e7b9      	b.n	5f72 <MSTP_Create_Frame+0x22>
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	00004325 	.word	0x00004325
    6004:	0000ffff 	.word	0x0000ffff
    6008:	00004355 	.word	0x00004355

0000600c <MSTP_Send_Frame>:
{
    600c:	b530      	push	{r4, r5, lr}
    600e:	b085      	sub	sp, #20
    6010:	ac08      	add	r4, sp, #32
    6012:	8825      	ldrh	r5, [r4, #0]
    OutputBufferLength = MSTP_Create_Frame(OutputBuffer, sizeof(OutputBuffer),
    6014:	4c0c      	ldr	r4, [pc, #48]	; (6048 <MSTP_Send_Frame+0x3c>)
    6016:	9502      	str	r5, [sp, #8]
    6018:	9301      	str	r3, [sp, #4]
    601a:	9200      	str	r2, [sp, #0]
    601c:	000b      	movs	r3, r1
    601e:	0002      	movs	r2, r0
    6020:	2181      	movs	r1, #129	; 0x81
    6022:	0089      	lsls	r1, r1, #2
    6024:	0020      	movs	r0, r4
    6026:	4d09      	ldr	r5, [pc, #36]	; (604c <MSTP_Send_Frame+0x40>)
    6028:	47a8      	blx	r5
    602a:	0001      	movs	r1, r0
    602c:	4b08      	ldr	r3, [pc, #32]	; (6050 <MSTP_Send_Frame+0x44>)
    602e:	8018      	strh	r0, [r3, #0]
    rs485_bytes_send(OutputBuffer, OutputBufferLength);
    6030:	0020      	movs	r0, r4
    6032:	4b08      	ldr	r3, [pc, #32]	; (6054 <MSTP_Send_Frame+0x48>)
    6034:	4798      	blx	r3
    rs485_silence_reset();
    6036:	4b08      	ldr	r3, [pc, #32]	; (6058 <MSTP_Send_Frame+0x4c>)
    6038:	4798      	blx	r3
    TransmitFrameCount++;
    603a:	4a08      	ldr	r2, [pc, #32]	; (605c <MSTP_Send_Frame+0x50>)
    603c:	6813      	ldr	r3, [r2, #0]
    603e:	3301      	adds	r3, #1
    6040:	6013      	str	r3, [r2, #0]
}
    6042:	b005      	add	sp, #20
    6044:	bd30      	pop	{r4, r5, pc}
    6046:	46c0      	nop			; (mov r8, r8)
    6048:	20000cf4 	.word	0x20000cf4
    604c:	00005f51 	.word	0x00005f51
    6050:	2000193e 	.word	0x2000193e
    6054:	0000b299 	.word	0x0000b299
    6058:	0000b1a5 	.word	0x0000b1a5
    605c:	20001364 	.word	0x20001364

00006060 <MSTP_Slave_Node_FSM>:
#else
#define log_master_state(n) (void)n;
#endif

static void MSTP_Slave_Node_FSM(void)
{
    6060:	b510      	push	{r4, lr}
    6062:	b082      	sub	sp, #8
    /* amount of data to be sent - may be 0 */
    uint16_t data_len;
    /* packet from the PDU Queue */
    struct dlmstp_packet *pkt;

    if (MSTP_Flag.ReceivedInvalidFrame) {
    6064:	4b34      	ldr	r3, [pc, #208]	; (6138 <MSTP_Slave_Node_FSM+0xd8>)
    6066:	681b      	ldr	r3, [r3, #0]
    6068:	07db      	lsls	r3, r3, #31
    606a:	d431      	bmi.n	60d0 <MSTP_Slave_Node_FSM+0x70>
        /* ReceivedInvalidFrame */
        /* invalid frame was received */
        MSTP_Flag.ReceivedInvalidFrame = false;
    } else if (MSTP_Flag.ReceivedValidFrame) {
    606c:	4b32      	ldr	r3, [pc, #200]	; (6138 <MSTP_Slave_Node_FSM+0xd8>)
    606e:	681b      	ldr	r3, [r3, #0]
    6070:	079b      	lsls	r3, r3, #30
    6072:	d532      	bpl.n	60da <MSTP_Slave_Node_FSM+0x7a>
        switch (FrameType) {
    6074:	4b31      	ldr	r3, [pc, #196]	; (613c <MSTP_Slave_Node_FSM+0xdc>)
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	b2db      	uxtb	r3, r3
    607a:	2b03      	cmp	r3, #3
    607c:	d040      	beq.n	6100 <MSTP_Slave_Node_FSM+0xa0>
    607e:	2b05      	cmp	r3, #5
    6080:	d153      	bne.n	612a <MSTP_Slave_Node_FSM+0xca>
            case FRAME_TYPE_BACNET_DATA_EXPECTING_REPLY:
                if (DestinationAddress != MSTP_BROADCAST_ADDRESS) {
    6082:	4b2f      	ldr	r3, [pc, #188]	; (6140 <MSTP_Slave_Node_FSM+0xe0>)
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	b2db      	uxtb	r3, r3
    6088:	2bff      	cmp	r3, #255	; 0xff
    608a:	d033      	beq.n	60f4 <MSTP_Slave_Node_FSM+0x94>
                    /* The ANSWER_DATA_REQUEST state is entered when a  */
                    /* BACnet Data Expecting Reply, a Test_Request, or  */
                    /* a proprietary frame that expects a reply is received. */
                    pkt = (struct dlmstp_packet *)Ringbuf_Peek(&PDU_Queue);
    608c:	482d      	ldr	r0, [pc, #180]	; (6144 <MSTP_Slave_Node_FSM+0xe4>)
    608e:	4b2e      	ldr	r3, [pc, #184]	; (6148 <MSTP_Slave_Node_FSM+0xe8>)
    6090:	4798      	blx	r3
                    if (pkt != NULL) {
    6092:	2800      	cmp	r0, #0
    6094:	d023      	beq.n	60de <MSTP_Slave_Node_FSM+0x7e>
                        TransmitPDUCount++;
    6096:	4a2d      	ldr	r2, [pc, #180]	; (614c <MSTP_Slave_Node_FSM+0xec>)
    6098:	6813      	ldr	r3, [r2, #0]
    609a:	3301      	adds	r3, #1
    609c:	6013      	str	r3, [r2, #0]
                        MSTP_Send_Frame(pkt->frame_type, pkt->address.mac[0],
    609e:	4b2c      	ldr	r3, [pc, #176]	; (6150 <MSTP_Slave_Node_FSM+0xf0>)
    60a0:	781a      	ldrb	r2, [r3, #0]
    60a2:	b2d2      	uxtb	r2, r2
    60a4:	0003      	movs	r3, r0
    60a6:	3318      	adds	r3, #24
    60a8:	78c1      	ldrb	r1, [r0, #3]
    60aa:	7d04      	ldrb	r4, [r0, #20]
    60ac:	8ac0      	ldrh	r0, [r0, #22]
    60ae:	9000      	str	r0, [sp, #0]
    60b0:	0020      	movs	r0, r4
    60b2:	4c28      	ldr	r4, [pc, #160]	; (6154 <MSTP_Slave_Node_FSM+0xf4>)
    60b4:	47a0      	blx	r4
                            This_Station, (uint8_t *)&pkt->pdu[0],
                            pkt->pdu_len);
                        Master_State = MSTP_MASTER_STATE_IDLE;
    60b6:	2201      	movs	r2, #1
    60b8:	4b27      	ldr	r3, [pc, #156]	; (6158 <MSTP_Slave_Node_FSM+0xf8>)
    60ba:	701a      	strb	r2, [r3, #0]
                        /* clear our flag we were holding for comparison */
                        MSTP_Flag.ReceivedValidFrame = false;
    60bc:	4a1e      	ldr	r2, [pc, #120]	; (6138 <MSTP_Slave_Node_FSM+0xd8>)
    60be:	7813      	ldrb	r3, [r2, #0]
    60c0:	2102      	movs	r1, #2
    60c2:	438b      	bics	r3, r1
    60c4:	7013      	strb	r3, [r2, #0]
                        /* clear the queue */
                        (void)Ringbuf_Pop(&PDU_Queue, NULL);
    60c6:	2100      	movs	r1, #0
    60c8:	481e      	ldr	r0, [pc, #120]	; (6144 <MSTP_Slave_Node_FSM+0xe4>)
    60ca:	4b24      	ldr	r3, [pc, #144]	; (615c <MSTP_Slave_Node_FSM+0xfc>)
    60cc:	4798      	blx	r3
    60ce:	e004      	b.n	60da <MSTP_Slave_Node_FSM+0x7a>
        MSTP_Flag.ReceivedInvalidFrame = false;
    60d0:	4a19      	ldr	r2, [pc, #100]	; (6138 <MSTP_Slave_Node_FSM+0xd8>)
    60d2:	7813      	ldrb	r3, [r2, #0]
    60d4:	2101      	movs	r1, #1
    60d6:	438b      	bics	r3, r1
    60d8:	7013      	strb	r3, [r2, #0]
            default:
                MSTP_Flag.ReceivedValidFrame = false;
                break;
        }
    }
}
    60da:	b002      	add	sp, #8
    60dc:	bd10      	pop	{r4, pc}
                    } else if (rs485_silence_elapsed(Treply_delay)) {
    60de:	20c8      	movs	r0, #200	; 0xc8
    60e0:	4b1f      	ldr	r3, [pc, #124]	; (6160 <MSTP_Slave_Node_FSM+0x100>)
    60e2:	4798      	blx	r3
    60e4:	2800      	cmp	r0, #0
    60e6:	d0f8      	beq.n	60da <MSTP_Slave_Node_FSM+0x7a>
                        MSTP_Flag.ReceivedValidFrame = false;
    60e8:	4a13      	ldr	r2, [pc, #76]	; (6138 <MSTP_Slave_Node_FSM+0xd8>)
    60ea:	7813      	ldrb	r3, [r2, #0]
    60ec:	2102      	movs	r1, #2
    60ee:	438b      	bics	r3, r1
    60f0:	7013      	strb	r3, [r2, #0]
    60f2:	e7f2      	b.n	60da <MSTP_Slave_Node_FSM+0x7a>
                    MSTP_Flag.ReceivedValidFrame = false;
    60f4:	4a10      	ldr	r2, [pc, #64]	; (6138 <MSTP_Slave_Node_FSM+0xd8>)
    60f6:	7813      	ldrb	r3, [r2, #0]
    60f8:	2102      	movs	r1, #2
    60fa:	438b      	bics	r3, r1
    60fc:	7013      	strb	r3, [r2, #0]
    60fe:	e7ec      	b.n	60da <MSTP_Slave_Node_FSM+0x7a>
                MSTP_Flag.ReceivedValidFrame = false;
    6100:	4a0d      	ldr	r2, [pc, #52]	; (6138 <MSTP_Slave_Node_FSM+0xd8>)
    6102:	7813      	ldrb	r3, [r2, #0]
    6104:	2102      	movs	r1, #2
    6106:	438b      	bics	r3, r1
    6108:	7013      	strb	r3, [r2, #0]
                destination = SourceAddress;
    610a:	4b16      	ldr	r3, [pc, #88]	; (6164 <MSTP_Slave_Node_FSM+0x104>)
    610c:	7819      	ldrb	r1, [r3, #0]
    610e:	b2c9      	uxtb	r1, r1
                source = This_Station;
    6110:	4b0f      	ldr	r3, [pc, #60]	; (6150 <MSTP_Slave_Node_FSM+0xf0>)
    6112:	781a      	ldrb	r2, [r3, #0]
    6114:	b2d2      	uxtb	r2, r2
                data = &InputBuffer[0];
    6116:	4b14      	ldr	r3, [pc, #80]	; (6168 <MSTP_Slave_Node_FSM+0x108>)
    6118:	681b      	ldr	r3, [r3, #0]
                data_len = DataLength;
    611a:	4814      	ldr	r0, [pc, #80]	; (616c <MSTP_Slave_Node_FSM+0x10c>)
    611c:	6800      	ldr	r0, [r0, #0]
    611e:	b280      	uxth	r0, r0
                MSTP_Send_Frame(FRAME_TYPE_TEST_RESPONSE, destination, source,
    6120:	9000      	str	r0, [sp, #0]
    6122:	2004      	movs	r0, #4
    6124:	4c0b      	ldr	r4, [pc, #44]	; (6154 <MSTP_Slave_Node_FSM+0xf4>)
    6126:	47a0      	blx	r4
                break;
    6128:	e7d7      	b.n	60da <MSTP_Slave_Node_FSM+0x7a>
                MSTP_Flag.ReceivedValidFrame = false;
    612a:	4a03      	ldr	r2, [pc, #12]	; (6138 <MSTP_Slave_Node_FSM+0xd8>)
    612c:	7813      	ldrb	r3, [r2, #0]
    612e:	2102      	movs	r1, #2
    6130:	438b      	bics	r3, r1
    6132:	7013      	strb	r3, [r2, #0]
}
    6134:	e7d1      	b.n	60da <MSTP_Slave_Node_FSM+0x7a>
    6136:	46c0      	nop			; (mov r8, r8)
    6138:	20000cec 	.word	0x20000cec
    613c:	20000cdf 	.word	0x20000cdf
    6140:	20000cdc 	.word	0x20000cdc
    6144:	20001330 	.word	0x20001330
    6148:	00002469 	.word	0x00002469
    614c:	20001368 	.word	0x20001368
    6150:	2000135d 	.word	0x2000135d
    6154:	0000600d 	.word	0x0000600d
    6158:	20000cf0 	.word	0x20000cf0
    615c:	00002495 	.word	0x00002495
    6160:	0000b1b9 	.word	0x0000b1b9
    6164:	2000135c 	.word	0x2000135c
    6168:	20000ce4 	.word	0x20000ce4
    616c:	20000cd8 	.word	0x20000cd8

00006170 <dlmstp_compare_data_expecting_reply>:
{
    6170:	b5f0      	push	{r4, r5, r6, r7, lr}
    6172:	b093      	sub	sp, #76	; 0x4c
    6174:	0005      	movs	r5, r0
    6176:	9301      	str	r3, [sp, #4]
    6178:	ab19      	add	r3, sp, #100	; 0x64
    617a:	781f      	ldrb	r7, [r3, #0]
    request.address.mac[0] = src_address;
    617c:	ac0a      	add	r4, sp, #40	; 0x28
    617e:	72e2      	strb	r2, [r4, #11]
    request.address.mac_len = 1;
    6180:	2301      	movs	r3, #1
    6182:	72a3      	strb	r3, [r4, #10]
    offset = npdu_decode(
    6184:	0023      	movs	r3, r4
    6186:	222a      	movs	r2, #42	; 0x2a
    6188:	a902      	add	r1, sp, #8
    618a:	468c      	mov	ip, r1
    618c:	4462      	add	r2, ip
    618e:	2100      	movs	r1, #0
    6190:	4e4c      	ldr	r6, [pc, #304]	; (62c4 <dlmstp_compare_data_expecting_reply+0x154>)
    6192:	47b0      	blx	r6
    if (request.npdu_data.network_layer_message) {
    6194:	78a4      	ldrb	r4, [r4, #2]
    6196:	2c00      	cmp	r4, #0
    6198:	d000      	beq.n	619c <dlmstp_compare_data_expecting_reply+0x2c>
    619a:	e08e      	b.n	62ba <dlmstp_compare_data_expecting_reply+0x14a>
    request.pdu_type = request_pdu[offset] & 0xF0;
    619c:	0400      	lsls	r0, r0, #16
    619e:	0c00      	lsrs	r0, r0, #16
    61a0:	182a      	adds	r2, r5, r0
    61a2:	7813      	ldrb	r3, [r2, #0]
    61a4:	210f      	movs	r1, #15
    61a6:	438b      	bics	r3, r1
    61a8:	a90a      	add	r1, sp, #40	; 0x28
    61aa:	770b      	strb	r3, [r1, #28]
    if (request.pdu_type != PDU_TYPE_CONFIRMED_SERVICE_REQUEST) {
    61ac:	2b00      	cmp	r3, #0
    61ae:	d000      	beq.n	61b2 <dlmstp_compare_data_expecting_reply+0x42>
    61b0:	e084      	b.n	62bc <dlmstp_compare_data_expecting_reply+0x14c>
    request.invoke_id = request_pdu[offset + 2];
    61b2:	7891      	ldrb	r1, [r2, #2]
    61b4:	ab0a      	add	r3, sp, #40	; 0x28
    61b6:	7759      	strb	r1, [r3, #29]
    if (request_pdu[offset] & BIT(3))
    61b8:	7813      	ldrb	r3, [r2, #0]
    61ba:	071b      	lsls	r3, r3, #28
    61bc:	d52f      	bpl.n	621e <dlmstp_compare_data_expecting_reply+0xae>
        request.service_choice = request_pdu[offset + 5];
    61be:	7952      	ldrb	r2, [r2, #5]
    61c0:	ab0a      	add	r3, sp, #40	; 0x28
    61c2:	779a      	strb	r2, [r3, #30]
    reply.address.mac[0] = dest_address;
    61c4:	ab02      	add	r3, sp, #8
    61c6:	72df      	strb	r7, [r3, #11]
    reply.address.mac_len = 1;
    61c8:	2301      	movs	r3, #1
    61ca:	aa02      	add	r2, sp, #8
    61cc:	7293      	strb	r3, [r2, #10]
    offset = npdu_decode(&reply_pdu[0], &reply.address, NULL, &reply.npdu_data);
    61ce:	0013      	movs	r3, r2
    61d0:	2200      	movs	r2, #0
    61d2:	210a      	movs	r1, #10
    61d4:	469c      	mov	ip, r3
    61d6:	4461      	add	r1, ip
    61d8:	9e01      	ldr	r6, [sp, #4]
    61da:	0030      	movs	r0, r6
    61dc:	4d39      	ldr	r5, [pc, #228]	; (62c4 <dlmstp_compare_data_expecting_reply+0x154>)
    61de:	47a8      	blx	r5
    if (reply.npdu_data.network_layer_message) {
    61e0:	ab02      	add	r3, sp, #8
    61e2:	789a      	ldrb	r2, [r3, #2]
    61e4:	2a00      	cmp	r2, #0
    61e6:	d169      	bne.n	62bc <dlmstp_compare_data_expecting_reply+0x14c>
    reply.pdu_type = reply_pdu[offset] & 0xF0;
    61e8:	0400      	lsls	r0, r0, #16
    61ea:	0c00      	lsrs	r0, r0, #16
    61ec:	1831      	adds	r1, r6, r0
    61ee:	780b      	ldrb	r3, [r1, #0]
    61f0:	240f      	movs	r4, #15
    61f2:	43a3      	bics	r3, r4
    61f4:	ac02      	add	r4, sp, #8
    61f6:	7723      	strb	r3, [r4, #28]
    switch (reply.pdu_type) {
    61f8:	2b50      	cmp	r3, #80	; 0x50
    61fa:	d030      	beq.n	625e <dlmstp_compare_data_expecting_reply+0xee>
    61fc:	d814      	bhi.n	6228 <dlmstp_compare_data_expecting_reply+0xb8>
    61fe:	2b20      	cmp	r3, #32
    6200:	d018      	beq.n	6234 <dlmstp_compare_data_expecting_reply+0xc4>
    6202:	2b30      	cmp	r3, #48	; 0x30
    6204:	d114      	bne.n	6230 <dlmstp_compare_data_expecting_reply+0xc0>
            reply.invoke_id = reply_pdu[offset + 1];
    6206:	9c01      	ldr	r4, [sp, #4]
    6208:	1823      	adds	r3, r4, r0
    620a:	785b      	ldrb	r3, [r3, #1]
    620c:	ad02      	add	r5, sp, #8
    620e:	776b      	strb	r3, [r5, #29]
            if (reply_pdu[offset] & BIT(3))
    6210:	780b      	ldrb	r3, [r1, #0]
    6212:	071b      	lsls	r3, r3, #28
    6214:	d51d      	bpl.n	6252 <dlmstp_compare_data_expecting_reply+0xe2>
                reply.service_choice = reply_pdu[offset + 4];
    6216:	1826      	adds	r6, r4, r0
    6218:	7933      	ldrb	r3, [r6, #4]
    621a:	77ab      	strb	r3, [r5, #30]
    621c:	e011      	b.n	6242 <dlmstp_compare_data_expecting_reply+0xd2>
        request.service_choice = request_pdu[offset + 3];
    621e:	1828      	adds	r0, r5, r0
    6220:	78c2      	ldrb	r2, [r0, #3]
    6222:	ab0a      	add	r3, sp, #40	; 0x28
    6224:	779a      	strb	r2, [r3, #30]
    6226:	e7cd      	b.n	61c4 <dlmstp_compare_data_expecting_reply+0x54>
    switch (reply.pdu_type) {
    6228:	2b60      	cmp	r3, #96	; 0x60
    622a:	d020      	beq.n	626e <dlmstp_compare_data_expecting_reply+0xfe>
    622c:	2b70      	cmp	r3, #112	; 0x70
    622e:	d01e      	beq.n	626e <dlmstp_compare_data_expecting_reply+0xfe>
            return false;
    6230:	0014      	movs	r4, r2
    6232:	e043      	b.n	62bc <dlmstp_compare_data_expecting_reply+0x14c>
            reply.invoke_id = reply_pdu[offset + 1];
    6234:	9b01      	ldr	r3, [sp, #4]
    6236:	181e      	adds	r6, r3, r0
    6238:	7873      	ldrb	r3, [r6, #1]
    623a:	a902      	add	r1, sp, #8
    623c:	774b      	strb	r3, [r1, #29]
            reply.service_choice = reply_pdu[offset + 2];
    623e:	78b3      	ldrb	r3, [r6, #2]
    6240:	778b      	strb	r3, [r1, #30]
    if (request.invoke_id != reply.invoke_id) {
    6242:	ab0a      	add	r3, sp, #40	; 0x28
    6244:	7f59      	ldrb	r1, [r3, #29]
    6246:	ab02      	add	r3, sp, #8
    6248:	7f5b      	ldrb	r3, [r3, #29]
    624a:	4299      	cmp	r1, r3
    624c:	d015      	beq.n	627a <dlmstp_compare_data_expecting_reply+0x10a>
        return false;
    624e:	0014      	movs	r4, r2
    6250:	e034      	b.n	62bc <dlmstp_compare_data_expecting_reply+0x14c>
                reply.service_choice = reply_pdu[offset + 2];
    6252:	9b01      	ldr	r3, [sp, #4]
    6254:	181e      	adds	r6, r3, r0
    6256:	78b3      	ldrb	r3, [r6, #2]
    6258:	a902      	add	r1, sp, #8
    625a:	778b      	strb	r3, [r1, #30]
    625c:	e7f1      	b.n	6242 <dlmstp_compare_data_expecting_reply+0xd2>
            reply.invoke_id = reply_pdu[offset + 1];
    625e:	9b01      	ldr	r3, [sp, #4]
    6260:	181e      	adds	r6, r3, r0
    6262:	7873      	ldrb	r3, [r6, #1]
    6264:	a902      	add	r1, sp, #8
    6266:	774b      	strb	r3, [r1, #29]
            reply.service_choice = reply_pdu[offset + 2];
    6268:	78b3      	ldrb	r3, [r6, #2]
    626a:	778b      	strb	r3, [r1, #30]
            break;
    626c:	e7e9      	b.n	6242 <dlmstp_compare_data_expecting_reply+0xd2>
            reply.invoke_id = reply_pdu[offset + 1];
    626e:	9b01      	ldr	r3, [sp, #4]
    6270:	181e      	adds	r6, r3, r0
    6272:	7873      	ldrb	r3, [r6, #1]
    6274:	a902      	add	r1, sp, #8
    6276:	774b      	strb	r3, [r1, #29]
            break;
    6278:	e7e3      	b.n	6242 <dlmstp_compare_data_expecting_reply+0xd2>
    if ((reply.pdu_type != PDU_TYPE_REJECT) &&
    627a:	ab02      	add	r3, sp, #8
    627c:	7f1b      	ldrb	r3, [r3, #28]
    627e:	2b60      	cmp	r3, #96	; 0x60
    6280:	d009      	beq.n	6296 <dlmstp_compare_data_expecting_reply+0x126>
    6282:	2b70      	cmp	r3, #112	; 0x70
    6284:	d007      	beq.n	6296 <dlmstp_compare_data_expecting_reply+0x126>
        if (request.service_choice != reply.service_choice) {
    6286:	ab0a      	add	r3, sp, #40	; 0x28
    6288:	7f99      	ldrb	r1, [r3, #30]
    628a:	ab02      	add	r3, sp, #8
    628c:	7f9b      	ldrb	r3, [r3, #30]
    628e:	4299      	cmp	r1, r3
    6290:	d001      	beq.n	6296 <dlmstp_compare_data_expecting_reply+0x126>
            return false;
    6292:	0014      	movs	r4, r2
    6294:	e012      	b.n	62bc <dlmstp_compare_data_expecting_reply+0x14c>
    if (request.npdu_data.protocol_version !=
    6296:	ab0a      	add	r3, sp, #40	; 0x28
    6298:	7819      	ldrb	r1, [r3, #0]
        reply.npdu_data.protocol_version) {
    629a:	ab02      	add	r3, sp, #8
    629c:	781b      	ldrb	r3, [r3, #0]
    if (request.npdu_data.protocol_version !=
    629e:	4299      	cmp	r1, r3
    62a0:	d001      	beq.n	62a6 <dlmstp_compare_data_expecting_reply+0x136>
        return false;
    62a2:	0014      	movs	r4, r2
    62a4:	e00a      	b.n	62bc <dlmstp_compare_data_expecting_reply+0x14c>
    if (!bacnet_address_same(&request.address, &reply.address)) {
    62a6:	210a      	movs	r1, #10
    62a8:	ab02      	add	r3, sp, #8
    62aa:	469c      	mov	ip, r3
    62ac:	4461      	add	r1, ip
    62ae:	202a      	movs	r0, #42	; 0x2a
    62b0:	4460      	add	r0, ip
    62b2:	4b05      	ldr	r3, [pc, #20]	; (62c8 <dlmstp_compare_data_expecting_reply+0x158>)
    62b4:	4798      	blx	r3
    62b6:	0004      	movs	r4, r0
    62b8:	e000      	b.n	62bc <dlmstp_compare_data_expecting_reply+0x14c>
        return false;
    62ba:	2400      	movs	r4, #0
}
    62bc:	0020      	movs	r0, r4
    62be:	b013      	add	sp, #76	; 0x4c
    62c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62c2:	46c0      	nop			; (mov r8, r8)
    62c4:	0000a6bd 	.word	0x0000a6bd
    62c8:	000026c9 	.word	0x000026c9

000062cc <MSTP_Master_Node_FSM>:

/* returns true if we need to transition immediately */
static bool MSTP_Master_Node_FSM(void)
{
    62cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ce:	46d6      	mov	lr, sl
    62d0:	464f      	mov	r7, r9
    62d2:	4646      	mov	r6, r8
    62d4:	b5c0      	push	{r6, r7, lr}
    62d6:	b084      	sub	sp, #16
    bool transition_now = false;
    /* packet from the PDU Queue */
    struct dlmstp_packet *pkt = NULL;

    /* some calculations that several states need */
    next_poll_station = (Poll_Station + 1) % (Nmax_master + 1);
    62d8:	4bc8      	ldr	r3, [pc, #800]	; (65fc <MSTP_Master_Node_FSM+0x330>)
    62da:	7818      	ldrb	r0, [r3, #0]
    62dc:	3001      	adds	r0, #1
    62de:	4ec8      	ldr	r6, [pc, #800]	; (6600 <MSTP_Master_Node_FSM+0x334>)
    62e0:	7831      	ldrb	r1, [r6, #0]
    62e2:	3101      	adds	r1, #1
    62e4:	4cc7      	ldr	r4, [pc, #796]	; (6604 <MSTP_Master_Node_FSM+0x338>)
    62e6:	47a0      	blx	r4
    62e8:	b2cd      	uxtb	r5, r1
    /* jump hoops for volatile */
    source = This_Station;
    62ea:	4bc7      	ldr	r3, [pc, #796]	; (6608 <MSTP_Master_Node_FSM+0x33c>)
    62ec:	7818      	ldrb	r0, [r3, #0]
    next_this_station = (source + 1) % (Nmax_master + 1);
    62ee:	3001      	adds	r0, #1
    62f0:	7831      	ldrb	r1, [r6, #0]
    62f2:	3101      	adds	r1, #1
    62f4:	47a0      	blx	r4
    62f6:	b2cb      	uxtb	r3, r1
    62f8:	4699      	mov	r9, r3
    next_next_station = (Next_Station + 1) % (Nmax_master + 1);
    62fa:	4bc4      	ldr	r3, [pc, #784]	; (660c <MSTP_Master_Node_FSM+0x340>)
    62fc:	781f      	ldrb	r7, [r3, #0]
    62fe:	1c78      	adds	r0, r7, #1
    6300:	7831      	ldrb	r1, [r6, #0]
    6302:	3101      	adds	r1, #1
    6304:	47a0      	blx	r4
    6306:	b2cb      	uxtb	r3, r1
    6308:	4698      	mov	r8, r3
    log_master_state(Master_State);
    630a:	4bc1      	ldr	r3, [pc, #772]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    630c:	781a      	ldrb	r2, [r3, #0]
    switch (Master_State) {
    630e:	781b      	ldrb	r3, [r3, #0]
    6310:	b2db      	uxtb	r3, r3
    6312:	2b08      	cmp	r3, #8
    6314:	d900      	bls.n	6318 <MSTP_Master_Node_FSM+0x4c>
    6316:	e39a      	b.n	6a4e <MSTP_Master_Node_FSM+0x782>
    6318:	009b      	lsls	r3, r3, #2
    631a:	4abe      	ldr	r2, [pc, #760]	; (6614 <MSTP_Master_Node_FSM+0x348>)
    631c:	58d3      	ldr	r3, [r2, r3]
    631e:	469f      	mov	pc, r3
        case MSTP_MASTER_STATE_INITIALIZE:
            /* DoneInitializing */
            /* indicate that the next station is unknown */
            Next_Station = This_Station;
    6320:	4bb9      	ldr	r3, [pc, #740]	; (6608 <MSTP_Master_Node_FSM+0x33c>)
    6322:	7819      	ldrb	r1, [r3, #0]
    6324:	4ab9      	ldr	r2, [pc, #740]	; (660c <MSTP_Master_Node_FSM+0x340>)
    6326:	7011      	strb	r1, [r2, #0]
            Poll_Station = This_Station;
    6328:	781a      	ldrb	r2, [r3, #0]
    632a:	4bb4      	ldr	r3, [pc, #720]	; (65fc <MSTP_Master_Node_FSM+0x330>)
    632c:	701a      	strb	r2, [r3, #0]
            /* cause a Poll For Master to be sent when this node first */
            /* receives the token */
            TokenCount = Npoll;
    632e:	2232      	movs	r2, #50	; 0x32
    6330:	4bb9      	ldr	r3, [pc, #740]	; (6618 <MSTP_Master_Node_FSM+0x34c>)
    6332:	601a      	str	r2, [r3, #0]
            MSTP_Flag.SoleMaster = false;
    6334:	4ab9      	ldr	r2, [pc, #740]	; (661c <MSTP_Master_Node_FSM+0x350>)
    6336:	7813      	ldrb	r3, [r2, #0]
    6338:	2108      	movs	r1, #8
    633a:	438b      	bics	r3, r1
    633c:	7013      	strb	r3, [r2, #0]
            Master_State = MSTP_MASTER_STATE_IDLE;
    633e:	2201      	movs	r2, #1
    6340:	4bb3      	ldr	r3, [pc, #716]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    6342:	701a      	strb	r2, [r3, #0]
            transition_now = true;
    6344:	2401      	movs	r4, #1
            Master_State = MSTP_MASTER_STATE_IDLE;
            break;
    }

    return transition_now;
}
    6346:	0020      	movs	r0, r4
    6348:	b004      	add	sp, #16
    634a:	bc1c      	pop	{r2, r3, r4}
    634c:	4690      	mov	r8, r2
    634e:	4699      	mov	r9, r3
    6350:	46a2      	mov	sl, r4
    6352:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (rs485_silence_elapsed(Tno_token)) {
    6354:	20fa      	movs	r0, #250	; 0xfa
    6356:	0040      	lsls	r0, r0, #1
    6358:	4bb1      	ldr	r3, [pc, #708]	; (6620 <MSTP_Master_Node_FSM+0x354>)
    635a:	4798      	blx	r3
    635c:	1e04      	subs	r4, r0, #0
    635e:	d110      	bne.n	6382 <MSTP_Master_Node_FSM+0xb6>
            } else if (MSTP_Flag.ReceivedInvalidFrame == true) {
    6360:	4bae      	ldr	r3, [pc, #696]	; (661c <MSTP_Master_Node_FSM+0x350>)
    6362:	681b      	ldr	r3, [r3, #0]
    6364:	07db      	lsls	r3, r3, #31
    6366:	d420      	bmi.n	63aa <MSTP_Master_Node_FSM+0xde>
            } else if (MSTP_Flag.ReceivedValidFrame == true) {
    6368:	4bac      	ldr	r3, [pc, #688]	; (661c <MSTP_Master_Node_FSM+0x350>)
    636a:	681b      	ldr	r3, [r3, #0]
    636c:	079b      	lsls	r3, r3, #30
    636e:	d5ea      	bpl.n	6346 <MSTP_Master_Node_FSM+0x7a>
                switch (FrameType) {
    6370:	4bac      	ldr	r3, [pc, #688]	; (6624 <MSTP_Master_Node_FSM+0x358>)
    6372:	781b      	ldrb	r3, [r3, #0]
    6374:	b2db      	uxtb	r3, r3
    6376:	2b06      	cmp	r3, #6
    6378:	d84a      	bhi.n	6410 <MSTP_Master_Node_FSM+0x144>
    637a:	009b      	lsls	r3, r3, #2
    637c:	4aaa      	ldr	r2, [pc, #680]	; (6628 <MSTP_Master_Node_FSM+0x35c>)
    637e:	58d3      	ldr	r3, [r2, r3]
    6380:	469f      	mov	pc, r3
                EventCount = 0; /* Addendum 135-2004d-8 */
    6382:	2200      	movs	r2, #0
    6384:	4ba9      	ldr	r3, [pc, #676]	; (662c <MSTP_Master_Node_FSM+0x360>)
    6386:	701a      	strb	r2, [r3, #0]
                MSTP_Flag.ReceivedValidFrame = false;
    6388:	4ba4      	ldr	r3, [pc, #656]	; (661c <MSTP_Master_Node_FSM+0x350>)
    638a:	781a      	ldrb	r2, [r3, #0]
    638c:	2102      	movs	r1, #2
    638e:	438a      	bics	r2, r1
    6390:	701a      	strb	r2, [r3, #0]
                MSTP_Flag.ReceivedInvalidFrame = false;
    6392:	781a      	ldrb	r2, [r3, #0]
    6394:	3901      	subs	r1, #1
    6396:	438a      	bics	r2, r1
    6398:	701a      	strb	r2, [r3, #0]
                MSTP_Flag.ReceivedValidFrameNotForUs = false;
    639a:	781a      	ldrb	r2, [r3, #0]
    639c:	3103      	adds	r1, #3
    639e:	438a      	bics	r2, r1
    63a0:	701a      	strb	r2, [r3, #0]
                Master_State = MSTP_MASTER_STATE_NO_TOKEN;
    63a2:	2206      	movs	r2, #6
    63a4:	4b9a      	ldr	r3, [pc, #616]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    63a6:	701a      	strb	r2, [r3, #0]
    63a8:	e7cd      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                MSTP_Flag.ReceivedInvalidFrame = false;
    63aa:	4a9c      	ldr	r2, [pc, #624]	; (661c <MSTP_Master_Node_FSM+0x350>)
    63ac:	7813      	ldrb	r3, [r2, #0]
    63ae:	2101      	movs	r1, #1
    63b0:	438b      	bics	r3, r1
    63b2:	7013      	strb	r3, [r2, #0]
    63b4:	e7c7      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                        if (DestinationAddress == MSTP_BROADCAST_ADDRESS)
    63b6:	4b9e      	ldr	r3, [pc, #632]	; (6630 <MSTP_Master_Node_FSM+0x364>)
    63b8:	781b      	ldrb	r3, [r3, #0]
    63ba:	b2db      	uxtb	r3, r3
    63bc:	2bff      	cmp	r3, #255	; 0xff
    63be:	d027      	beq.n	6410 <MSTP_Master_Node_FSM+0x144>
                        MSTP_Flag.ReceivedValidFrame = false;
    63c0:	4b96      	ldr	r3, [pc, #600]	; (661c <MSTP_Master_Node_FSM+0x350>)
    63c2:	781a      	ldrb	r2, [r3, #0]
    63c4:	2102      	movs	r1, #2
    63c6:	438a      	bics	r2, r1
    63c8:	701a      	strb	r2, [r3, #0]
                        FrameCount = 0;
    63ca:	2000      	movs	r0, #0
    63cc:	4a99      	ldr	r2, [pc, #612]	; (6634 <MSTP_Master_Node_FSM+0x368>)
    63ce:	7010      	strb	r0, [r2, #0]
                        MSTP_Flag.SoleMaster = false;
    63d0:	781a      	ldrb	r2, [r3, #0]
    63d2:	3008      	adds	r0, #8
    63d4:	4382      	bics	r2, r0
    63d6:	701a      	strb	r2, [r3, #0]
                        Master_State = MSTP_MASTER_STATE_USE_TOKEN;
    63d8:	4b8d      	ldr	r3, [pc, #564]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    63da:	7019      	strb	r1, [r3, #0]
                        transition_now = true;
    63dc:	2401      	movs	r4, #1
                        break;
    63de:	e017      	b.n	6410 <MSTP_Master_Node_FSM+0x144>
                        destination = SourceAddress;
    63e0:	4b95      	ldr	r3, [pc, #596]	; (6638 <MSTP_Master_Node_FSM+0x36c>)
    63e2:	7819      	ldrb	r1, [r3, #0]
    63e4:	b2c9      	uxtb	r1, r1
                        source = This_Station;
    63e6:	4b88      	ldr	r3, [pc, #544]	; (6608 <MSTP_Master_Node_FSM+0x33c>)
    63e8:	781a      	ldrb	r2, [r3, #0]
    63ea:	b2d2      	uxtb	r2, r2
                        if (DestinationAddress == This_Station) {
    63ec:	4890      	ldr	r0, [pc, #576]	; (6630 <MSTP_Master_Node_FSM+0x364>)
    63ee:	7800      	ldrb	r0, [r0, #0]
    63f0:	b2c0      	uxtb	r0, r0
    63f2:	781b      	ldrb	r3, [r3, #0]
    63f4:	b2db      	uxtb	r3, r3
    63f6:	4298      	cmp	r0, r3
    63f8:	d10a      	bne.n	6410 <MSTP_Master_Node_FSM+0x144>
                            MSTP_Send_Frame(FRAME_TYPE_REPLY_TO_POLL_FOR_MASTER,
    63fa:	2300      	movs	r3, #0
    63fc:	9300      	str	r3, [sp, #0]
    63fe:	2002      	movs	r0, #2
    6400:	4d8e      	ldr	r5, [pc, #568]	; (663c <MSTP_Master_Node_FSM+0x370>)
    6402:	47a8      	blx	r5
    6404:	e004      	b.n	6410 <MSTP_Master_Node_FSM+0x144>
                        MSTP_Flag.ReceivePacketPending = true;
    6406:	4a85      	ldr	r2, [pc, #532]	; (661c <MSTP_Master_Node_FSM+0x350>)
    6408:	7813      	ldrb	r3, [r2, #0]
    640a:	2110      	movs	r1, #16
    640c:	430b      	orrs	r3, r1
    640e:	7013      	strb	r3, [r2, #0]
                if (Master_State != MSTP_MASTER_STATE_ANSWER_DATA_REQUEST) {
    6410:	4b7f      	ldr	r3, [pc, #508]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    6412:	781b      	ldrb	r3, [r3, #0]
    6414:	2b08      	cmp	r3, #8
    6416:	d096      	beq.n	6346 <MSTP_Master_Node_FSM+0x7a>
                    MSTP_Flag.ReceivedValidFrame = false;
    6418:	4a80      	ldr	r2, [pc, #512]	; (661c <MSTP_Master_Node_FSM+0x350>)
    641a:	7813      	ldrb	r3, [r2, #0]
    641c:	2102      	movs	r1, #2
    641e:	438b      	bics	r3, r1
    6420:	7013      	strb	r3, [r2, #0]
    6422:	e790      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                        MSTP_Flag.ReceivePacketPending = true;
    6424:	4a7d      	ldr	r2, [pc, #500]	; (661c <MSTP_Master_Node_FSM+0x350>)
    6426:	7813      	ldrb	r3, [r2, #0]
    6428:	2110      	movs	r1, #16
    642a:	430b      	orrs	r3, r1
    642c:	7013      	strb	r3, [r2, #0]
                        if (DestinationAddress != MSTP_BROADCAST_ADDRESS) {
    642e:	4b80      	ldr	r3, [pc, #512]	; (6630 <MSTP_Master_Node_FSM+0x364>)
    6430:	781b      	ldrb	r3, [r3, #0]
    6432:	b2db      	uxtb	r3, r3
    6434:	2bff      	cmp	r3, #255	; 0xff
    6436:	d0eb      	beq.n	6410 <MSTP_Master_Node_FSM+0x144>
                            Master_State =
    6438:	2208      	movs	r2, #8
    643a:	4b75      	ldr	r3, [pc, #468]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    643c:	701a      	strb	r2, [r3, #0]
    643e:	e7e7      	b.n	6410 <MSTP_Master_Node_FSM+0x144>
                        destination = SourceAddress;
    6440:	4b7d      	ldr	r3, [pc, #500]	; (6638 <MSTP_Master_Node_FSM+0x36c>)
    6442:	7819      	ldrb	r1, [r3, #0]
    6444:	b2c9      	uxtb	r1, r1
                        source = This_Station;
    6446:	4b70      	ldr	r3, [pc, #448]	; (6608 <MSTP_Master_Node_FSM+0x33c>)
    6448:	781a      	ldrb	r2, [r3, #0]
    644a:	b2d2      	uxtb	r2, r2
                        data = &InputBuffer[0];
    644c:	4b7c      	ldr	r3, [pc, #496]	; (6640 <MSTP_Master_Node_FSM+0x374>)
    644e:	681b      	ldr	r3, [r3, #0]
                        data_len = DataLength;
    6450:	487c      	ldr	r0, [pc, #496]	; (6644 <MSTP_Master_Node_FSM+0x378>)
    6452:	6800      	ldr	r0, [r0, #0]
    6454:	b280      	uxth	r0, r0
                        MSTP_Send_Frame(FRAME_TYPE_TEST_RESPONSE, destination,
    6456:	9000      	str	r0, [sp, #0]
    6458:	2004      	movs	r0, #4
    645a:	4d78      	ldr	r5, [pc, #480]	; (663c <MSTP_Master_Node_FSM+0x370>)
    645c:	47a8      	blx	r5
                        break;
    645e:	e7d7      	b.n	6410 <MSTP_Master_Node_FSM+0x144>
            if (Ringbuf_Empty(&PDU_Queue)) {
    6460:	4879      	ldr	r0, [pc, #484]	; (6648 <MSTP_Master_Node_FSM+0x37c>)
    6462:	4b7a      	ldr	r3, [pc, #488]	; (664c <MSTP_Master_Node_FSM+0x380>)
    6464:	4798      	blx	r3
    6466:	1e04      	subs	r4, r0, #0
    6468:	d007      	beq.n	647a <MSTP_Master_Node_FSM+0x1ae>
                FrameCount = Nmax_info_frames;
    646a:	4b79      	ldr	r3, [pc, #484]	; (6650 <MSTP_Master_Node_FSM+0x384>)
    646c:	781a      	ldrb	r2, [r3, #0]
    646e:	4b71      	ldr	r3, [pc, #452]	; (6634 <MSTP_Master_Node_FSM+0x368>)
    6470:	701a      	strb	r2, [r3, #0]
                Master_State = MSTP_MASTER_STATE_DONE_WITH_TOKEN;
    6472:	2204      	movs	r2, #4
    6474:	4b66      	ldr	r3, [pc, #408]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    6476:	701a      	strb	r2, [r3, #0]
    6478:	e765      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                pkt = (struct dlmstp_packet *)Ringbuf_Peek(&PDU_Queue);
    647a:	4873      	ldr	r0, [pc, #460]	; (6648 <MSTP_Master_Node_FSM+0x37c>)
    647c:	4b75      	ldr	r3, [pc, #468]	; (6654 <MSTP_Master_Node_FSM+0x388>)
    647e:	4798      	blx	r3
    6480:	0005      	movs	r5, r0
                MSTP_Send_Frame(pkt->frame_type, pkt->address.mac[0],
    6482:	4b61      	ldr	r3, [pc, #388]	; (6608 <MSTP_Master_Node_FSM+0x33c>)
    6484:	781a      	ldrb	r2, [r3, #0]
    6486:	b2d2      	uxtb	r2, r2
    6488:	0003      	movs	r3, r0
    648a:	3318      	adds	r3, #24
    648c:	78c1      	ldrb	r1, [r0, #3]
    648e:	7d00      	ldrb	r0, [r0, #20]
    6490:	8aee      	ldrh	r6, [r5, #22]
    6492:	9600      	str	r6, [sp, #0]
    6494:	4e69      	ldr	r6, [pc, #420]	; (663c <MSTP_Master_Node_FSM+0x370>)
    6496:	47b0      	blx	r6
                FrameCount++;
    6498:	4a66      	ldr	r2, [pc, #408]	; (6634 <MSTP_Master_Node_FSM+0x368>)
    649a:	7813      	ldrb	r3, [r2, #0]
    649c:	3301      	adds	r3, #1
    649e:	7013      	strb	r3, [r2, #0]
                TransmitPDUCount++;
    64a0:	4a6d      	ldr	r2, [pc, #436]	; (6658 <MSTP_Master_Node_FSM+0x38c>)
    64a2:	6813      	ldr	r3, [r2, #0]
    64a4:	3301      	adds	r3, #1
    64a6:	6013      	str	r3, [r2, #0]
                switch (pkt->frame_type) {
    64a8:	7d2b      	ldrb	r3, [r5, #20]
    64aa:	2b03      	cmp	r3, #3
    64ac:	d00c      	beq.n	64c8 <MSTP_Master_Node_FSM+0x1fc>
    64ae:	2b05      	cmp	r3, #5
    64b0:	d112      	bne.n	64d8 <MSTP_Master_Node_FSM+0x20c>
                        if (pkt->address.mac[0] == MSTP_BROADCAST_ADDRESS)
    64b2:	78eb      	ldrb	r3, [r5, #3]
    64b4:	2bff      	cmp	r3, #255	; 0xff
    64b6:	d003      	beq.n	64c0 <MSTP_Master_Node_FSM+0x1f4>
                            Master_State = MSTP_MASTER_STATE_WAIT_FOR_REPLY;
    64b8:	2203      	movs	r2, #3
    64ba:	4b55      	ldr	r3, [pc, #340]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    64bc:	701a      	strb	r2, [r3, #0]
    64be:	e006      	b.n	64ce <MSTP_Master_Node_FSM+0x202>
                            Master_State = MSTP_MASTER_STATE_DONE_WITH_TOKEN;
    64c0:	2204      	movs	r2, #4
    64c2:	4b53      	ldr	r3, [pc, #332]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    64c4:	701a      	strb	r2, [r3, #0]
    64c6:	e002      	b.n	64ce <MSTP_Master_Node_FSM+0x202>
                        Master_State = MSTP_MASTER_STATE_WAIT_FOR_REPLY;
    64c8:	2203      	movs	r2, #3
    64ca:	4b51      	ldr	r3, [pc, #324]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    64cc:	701a      	strb	r2, [r3, #0]
                (void)Ringbuf_Pop(&PDU_Queue, NULL);
    64ce:	2100      	movs	r1, #0
    64d0:	485d      	ldr	r0, [pc, #372]	; (6648 <MSTP_Master_Node_FSM+0x37c>)
    64d2:	4b62      	ldr	r3, [pc, #392]	; (665c <MSTP_Master_Node_FSM+0x390>)
    64d4:	4798      	blx	r3
    64d6:	e736      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                        Master_State = MSTP_MASTER_STATE_DONE_WITH_TOKEN;
    64d8:	2204      	movs	r2, #4
    64da:	4b4d      	ldr	r3, [pc, #308]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    64dc:	701a      	strb	r2, [r3, #0]
                        break;
    64de:	e7f6      	b.n	64ce <MSTP_Master_Node_FSM+0x202>
            if (rs485_silence_elapsed(Treply_timeout)) {
    64e0:	2082      	movs	r0, #130	; 0x82
    64e2:	0040      	lsls	r0, r0, #1
    64e4:	4b4e      	ldr	r3, [pc, #312]	; (6620 <MSTP_Master_Node_FSM+0x354>)
    64e6:	4798      	blx	r3
    64e8:	1e04      	subs	r4, r0, #0
    64ea:	d11a      	bne.n	6522 <MSTP_Master_Node_FSM+0x256>
                if (MSTP_Flag.ReceivedInvalidFrame == true) {
    64ec:	4b4b      	ldr	r3, [pc, #300]	; (661c <MSTP_Master_Node_FSM+0x350>)
    64ee:	681b      	ldr	r3, [r3, #0]
    64f0:	07db      	lsls	r3, r3, #31
    64f2:	d41e      	bmi.n	6532 <MSTP_Master_Node_FSM+0x266>
                } else if (MSTP_Flag.ReceivedValidFrame == true) {
    64f4:	4b49      	ldr	r3, [pc, #292]	; (661c <MSTP_Master_Node_FSM+0x350>)
    64f6:	681b      	ldr	r3, [r3, #0]
    64f8:	079b      	lsls	r3, r3, #30
    64fa:	d400      	bmi.n	64fe <MSTP_Master_Node_FSM+0x232>
    64fc:	e723      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                    destination = DestinationAddress;
    64fe:	4b4c      	ldr	r3, [pc, #304]	; (6630 <MSTP_Master_Node_FSM+0x364>)
    6500:	781a      	ldrb	r2, [r3, #0]
    6502:	b2d2      	uxtb	r2, r2
                    if (destination == This_Station) {
    6504:	4b40      	ldr	r3, [pc, #256]	; (6608 <MSTP_Master_Node_FSM+0x33c>)
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	b2db      	uxtb	r3, r3
    650a:	429a      	cmp	r2, r3
    650c:	d01b      	beq.n	6546 <MSTP_Master_Node_FSM+0x27a>
                        Master_State = MSTP_MASTER_STATE_IDLE;
    650e:	2201      	movs	r2, #1
    6510:	4b3f      	ldr	r3, [pc, #252]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    6512:	701a      	strb	r2, [r3, #0]
                    MSTP_Flag.ReceivedValidFrame = false;
    6514:	4a41      	ldr	r2, [pc, #260]	; (661c <MSTP_Master_Node_FSM+0x350>)
    6516:	7813      	ldrb	r3, [r2, #0]
    6518:	2102      	movs	r1, #2
    651a:	438b      	bics	r3, r1
    651c:	7013      	strb	r3, [r2, #0]
                    transition_now = true;
    651e:	2401      	movs	r4, #1
    6520:	e711      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                FrameCount = Nmax_info_frames;
    6522:	4b4b      	ldr	r3, [pc, #300]	; (6650 <MSTP_Master_Node_FSM+0x384>)
    6524:	781a      	ldrb	r2, [r3, #0]
    6526:	4b43      	ldr	r3, [pc, #268]	; (6634 <MSTP_Master_Node_FSM+0x368>)
    6528:	701a      	strb	r2, [r3, #0]
                Master_State = MSTP_MASTER_STATE_DONE_WITH_TOKEN;
    652a:	2204      	movs	r2, #4
    652c:	4b38      	ldr	r3, [pc, #224]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    652e:	701a      	strb	r2, [r3, #0]
    6530:	e709      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                    MSTP_Flag.ReceivedInvalidFrame = false;
    6532:	4a3a      	ldr	r2, [pc, #232]	; (661c <MSTP_Master_Node_FSM+0x350>)
    6534:	7813      	ldrb	r3, [r2, #0]
    6536:	2101      	movs	r1, #1
    6538:	438b      	bics	r3, r1
    653a:	7013      	strb	r3, [r2, #0]
                    Master_State = MSTP_MASTER_STATE_DONE_WITH_TOKEN;
    653c:	2204      	movs	r2, #4
    653e:	4b34      	ldr	r3, [pc, #208]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    6540:	701a      	strb	r2, [r3, #0]
                    transition_now = true;
    6542:	2401      	movs	r4, #1
    6544:	e6ff      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                        switch (FrameType) {
    6546:	4b37      	ldr	r3, [pc, #220]	; (6624 <MSTP_Master_Node_FSM+0x358>)
    6548:	781b      	ldrb	r3, [r3, #0]
    654a:	b2db      	uxtb	r3, r3
    654c:	2b06      	cmp	r3, #6
    654e:	d00f      	beq.n	6570 <MSTP_Master_Node_FSM+0x2a4>
    6550:	2b07      	cmp	r3, #7
    6552:	d005      	beq.n	6560 <MSTP_Master_Node_FSM+0x294>
    6554:	2b04      	cmp	r3, #4
    6556:	d007      	beq.n	6568 <MSTP_Master_Node_FSM+0x29c>
                                Master_State = MSTP_MASTER_STATE_IDLE;
    6558:	2201      	movs	r2, #1
    655a:	4b2d      	ldr	r3, [pc, #180]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    655c:	701a      	strb	r2, [r3, #0]
                                break;
    655e:	e7d9      	b.n	6514 <MSTP_Master_Node_FSM+0x248>
                                Master_State =
    6560:	2204      	movs	r2, #4
    6562:	4b2b      	ldr	r3, [pc, #172]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    6564:	701a      	strb	r2, [r3, #0]
                                break;
    6566:	e7d5      	b.n	6514 <MSTP_Master_Node_FSM+0x248>
                                Master_State =
    6568:	2204      	movs	r2, #4
    656a:	4b29      	ldr	r3, [pc, #164]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    656c:	701a      	strb	r2, [r3, #0]
                                break;
    656e:	e7d1      	b.n	6514 <MSTP_Master_Node_FSM+0x248>
                                MSTP_Flag.ReceivePacketPending = true;
    6570:	4a2a      	ldr	r2, [pc, #168]	; (661c <MSTP_Master_Node_FSM+0x350>)
    6572:	7813      	ldrb	r3, [r2, #0]
    6574:	2110      	movs	r1, #16
    6576:	430b      	orrs	r3, r1
    6578:	7013      	strb	r3, [r2, #0]
                                Master_State =
    657a:	2204      	movs	r2, #4
    657c:	4b24      	ldr	r3, [pc, #144]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    657e:	701a      	strb	r2, [r3, #0]
                                break;
    6580:	e7c8      	b.n	6514 <MSTP_Master_Node_FSM+0x248>
            if (FrameCount < Nmax_info_frames) {
    6582:	4b2c      	ldr	r3, [pc, #176]	; (6634 <MSTP_Master_Node_FSM+0x368>)
    6584:	781a      	ldrb	r2, [r3, #0]
    6586:	4b32      	ldr	r3, [pc, #200]	; (6650 <MSTP_Master_Node_FSM+0x384>)
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	b2db      	uxtb	r3, r3
    658c:	429a      	cmp	r2, r3
    658e:	d31d      	bcc.n	65cc <MSTP_Master_Node_FSM+0x300>
            } else if ((MSTP_Flag.SoleMaster == false) &&
    6590:	4b22      	ldr	r3, [pc, #136]	; (661c <MSTP_Master_Node_FSM+0x350>)
    6592:	681b      	ldr	r3, [r3, #0]
    6594:	071b      	lsls	r3, r3, #28
    6596:	d404      	bmi.n	65a2 <MSTP_Master_Node_FSM+0x2d6>
                (Next_Station == This_Station)) {
    6598:	4b1b      	ldr	r3, [pc, #108]	; (6608 <MSTP_Master_Node_FSM+0x33c>)
    659a:	781b      	ldrb	r3, [r3, #0]
    659c:	b2db      	uxtb	r3, r3
            } else if ((MSTP_Flag.SoleMaster == false) &&
    659e:	429f      	cmp	r7, r3
    65a0:	d019      	beq.n	65d6 <MSTP_Master_Node_FSM+0x30a>
            else if (TokenCount < (Npoll - 1)) {
    65a2:	4b1d      	ldr	r3, [pc, #116]	; (6618 <MSTP_Master_Node_FSM+0x34c>)
    65a4:	681b      	ldr	r3, [r3, #0]
    65a6:	2b30      	cmp	r3, #48	; 0x30
    65a8:	d871      	bhi.n	668e <MSTP_Master_Node_FSM+0x3c2>
                if ((MSTP_Flag.SoleMaster == true) &&
    65aa:	4a1c      	ldr	r2, [pc, #112]	; (661c <MSTP_Master_Node_FSM+0x350>)
    65ac:	6812      	ldr	r2, [r2, #0]
    65ae:	0712      	lsls	r2, r2, #28
    65b0:	d558      	bpl.n	6664 <MSTP_Master_Node_FSM+0x398>
    65b2:	45b9      	cmp	r9, r7
    65b4:	d056      	beq.n	6664 <MSTP_Master_Node_FSM+0x398>
                    FrameCount = 0;
    65b6:	2100      	movs	r1, #0
    65b8:	4a1e      	ldr	r2, [pc, #120]	; (6634 <MSTP_Master_Node_FSM+0x368>)
    65ba:	7011      	strb	r1, [r2, #0]
                    TokenCount++;
    65bc:	3301      	adds	r3, #1
    65be:	4a16      	ldr	r2, [pc, #88]	; (6618 <MSTP_Master_Node_FSM+0x34c>)
    65c0:	6013      	str	r3, [r2, #0]
                    Master_State = MSTP_MASTER_STATE_USE_TOKEN;
    65c2:	2202      	movs	r2, #2
    65c4:	4b12      	ldr	r3, [pc, #72]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    65c6:	701a      	strb	r2, [r3, #0]
                    transition_now = true;
    65c8:	2401      	movs	r4, #1
    65ca:	e6bc      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                Master_State = MSTP_MASTER_STATE_USE_TOKEN;
    65cc:	2202      	movs	r2, #2
    65ce:	4b10      	ldr	r3, [pc, #64]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    65d0:	701a      	strb	r2, [r3, #0]
                transition_now = true;
    65d2:	2401      	movs	r4, #1
    65d4:	e6b7      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                Poll_Station = next_this_station;
    65d6:	4b09      	ldr	r3, [pc, #36]	; (65fc <MSTP_Master_Node_FSM+0x330>)
    65d8:	464a      	mov	r2, r9
    65da:	701a      	strb	r2, [r3, #0]
                MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
    65dc:	4b0a      	ldr	r3, [pc, #40]	; (6608 <MSTP_Master_Node_FSM+0x33c>)
    65de:	781a      	ldrb	r2, [r3, #0]
    65e0:	b2d2      	uxtb	r2, r2
    65e2:	2400      	movs	r4, #0
    65e4:	9400      	str	r4, [sp, #0]
    65e6:	2300      	movs	r3, #0
    65e8:	4649      	mov	r1, r9
    65ea:	2001      	movs	r0, #1
    65ec:	4d13      	ldr	r5, [pc, #76]	; (663c <MSTP_Master_Node_FSM+0x370>)
    65ee:	47a8      	blx	r5
                RetryCount = 0;
    65f0:	4b1b      	ldr	r3, [pc, #108]	; (6660 <MSTP_Master_Node_FSM+0x394>)
    65f2:	601c      	str	r4, [r3, #0]
                Master_State = MSTP_MASTER_STATE_POLL_FOR_MASTER;
    65f4:	2207      	movs	r2, #7
    65f6:	4b06      	ldr	r3, [pc, #24]	; (6610 <MSTP_Master_Node_FSM+0x344>)
    65f8:	701a      	strb	r2, [r3, #0]
    65fa:	e6a4      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
    65fc:	20001348 	.word	0x20001348
    6600:	2000024e 	.word	0x2000024e
    6604:	0000ce91 	.word	0x0000ce91
    6608:	2000135d 	.word	0x2000135d
    660c:	20000cf1 	.word	0x20000cf1
    6610:	20000cf0 	.word	0x20000cf0
    6614:	0000f378 	.word	0x0000f378
    6618:	20001360 	.word	0x20001360
    661c:	20000cec 	.word	0x20000cec
    6620:	0000b1b9 	.word	0x0000b1b9
    6624:	20000cdf 	.word	0x20000cdf
    6628:	0000f39c 	.word	0x0000f39c
    662c:	20000cdd 	.word	0x20000cdd
    6630:	20000cdc 	.word	0x20000cdc
    6634:	20000cde 	.word	0x20000cde
    6638:	2000135c 	.word	0x2000135c
    663c:	0000600d 	.word	0x0000600d
    6640:	20000ce4 	.word	0x20000ce4
    6644:	20000cd8 	.word	0x20000cd8
    6648:	20001330 	.word	0x20001330
    664c:	00002449 	.word	0x00002449
    6650:	2000024d 	.word	0x2000024d
    6654:	00002469 	.word	0x00002469
    6658:	20001368 	.word	0x20001368
    665c:	00002495 	.word	0x00002495
    6660:	20001358 	.word	0x20001358
                    TokenCount++;
    6664:	3301      	adds	r3, #1
    6666:	4ad5      	ldr	r2, [pc, #852]	; (69bc <MSTP_Master_Node_FSM+0x6f0>)
    6668:	6013      	str	r3, [r2, #0]
                    MSTP_Send_Frame(
    666a:	4bd5      	ldr	r3, [pc, #852]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    666c:	781a      	ldrb	r2, [r3, #0]
    666e:	b2d2      	uxtb	r2, r2
    6670:	2400      	movs	r4, #0
    6672:	9400      	str	r4, [sp, #0]
    6674:	2300      	movs	r3, #0
    6676:	0039      	movs	r1, r7
    6678:	2000      	movs	r0, #0
    667a:	4dd2      	ldr	r5, [pc, #840]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    667c:	47a8      	blx	r5
                    RetryCount = 0;
    667e:	4bd2      	ldr	r3, [pc, #840]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    6680:	601c      	str	r4, [r3, #0]
                    EventCount = 0;
    6682:	4bd2      	ldr	r3, [pc, #840]	; (69cc <MSTP_Master_Node_FSM+0x700>)
    6684:	701c      	strb	r4, [r3, #0]
                    Master_State = MSTP_MASTER_STATE_PASS_TOKEN;
    6686:	2205      	movs	r2, #5
    6688:	4bd1      	ldr	r3, [pc, #836]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    668a:	701a      	strb	r2, [r3, #0]
    668c:	e65b      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
            } else if (next_poll_station == Next_Station) {
    668e:	42bd      	cmp	r5, r7
    6690:	d134      	bne.n	66fc <MSTP_Master_Node_FSM+0x430>
                if (MSTP_Flag.SoleMaster == true) {
    6692:	4bd0      	ldr	r3, [pc, #832]	; (69d4 <MSTP_Master_Node_FSM+0x708>)
    6694:	681b      	ldr	r3, [r3, #0]
    6696:	071b      	lsls	r3, r3, #28
    6698:	d417      	bmi.n	66ca <MSTP_Master_Node_FSM+0x3fe>
                    Poll_Station = This_Station;
    669a:	4bc9      	ldr	r3, [pc, #804]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    669c:	7819      	ldrb	r1, [r3, #0]
    669e:	4ace      	ldr	r2, [pc, #824]	; (69d8 <MSTP_Master_Node_FSM+0x70c>)
    66a0:	7011      	strb	r1, [r2, #0]
                    MSTP_Send_Frame(
    66a2:	781a      	ldrb	r2, [r3, #0]
    66a4:	b2d2      	uxtb	r2, r2
    66a6:	2400      	movs	r4, #0
    66a8:	9400      	str	r4, [sp, #0]
    66aa:	2300      	movs	r3, #0
    66ac:	0039      	movs	r1, r7
    66ae:	2000      	movs	r0, #0
    66b0:	4dc4      	ldr	r5, [pc, #784]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    66b2:	47a8      	blx	r5
                    RetryCount = 0;
    66b4:	4bc4      	ldr	r3, [pc, #784]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    66b6:	601c      	str	r4, [r3, #0]
                    TokenCount = 1; /* changed in Errata SSPC-135-2004 */
    66b8:	2201      	movs	r2, #1
    66ba:	4bc0      	ldr	r3, [pc, #768]	; (69bc <MSTP_Master_Node_FSM+0x6f0>)
    66bc:	601a      	str	r2, [r3, #0]
                    EventCount = 0;
    66be:	4bc3      	ldr	r3, [pc, #780]	; (69cc <MSTP_Master_Node_FSM+0x700>)
    66c0:	701c      	strb	r4, [r3, #0]
                    Master_State = MSTP_MASTER_STATE_PASS_TOKEN;
    66c2:	3204      	adds	r2, #4
    66c4:	4bc2      	ldr	r3, [pc, #776]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    66c6:	701a      	strb	r2, [r3, #0]
    66c8:	e63d      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                    Poll_Station = next_next_station;
    66ca:	4bc3      	ldr	r3, [pc, #780]	; (69d8 <MSTP_Master_Node_FSM+0x70c>)
    66cc:	4642      	mov	r2, r8
    66ce:	701a      	strb	r2, [r3, #0]
                    MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
    66d0:	4dbb      	ldr	r5, [pc, #748]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    66d2:	782a      	ldrb	r2, [r5, #0]
    66d4:	b2d2      	uxtb	r2, r2
    66d6:	2400      	movs	r4, #0
    66d8:	9400      	str	r4, [sp, #0]
    66da:	2300      	movs	r3, #0
    66dc:	4641      	mov	r1, r8
    66de:	2001      	movs	r0, #1
    66e0:	4eb8      	ldr	r6, [pc, #736]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    66e2:	47b0      	blx	r6
                    Next_Station = This_Station;
    66e4:	782a      	ldrb	r2, [r5, #0]
    66e6:	4bbd      	ldr	r3, [pc, #756]	; (69dc <MSTP_Master_Node_FSM+0x710>)
    66e8:	701a      	strb	r2, [r3, #0]
                    RetryCount = 0;
    66ea:	4bb7      	ldr	r3, [pc, #732]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    66ec:	601c      	str	r4, [r3, #0]
                    TokenCount = 1; /* changed in Errata SSPC-135-2004 */
    66ee:	2201      	movs	r2, #1
    66f0:	4bb2      	ldr	r3, [pc, #712]	; (69bc <MSTP_Master_Node_FSM+0x6f0>)
    66f2:	601a      	str	r2, [r3, #0]
                    Master_State = MSTP_MASTER_STATE_POLL_FOR_MASTER;
    66f4:	3206      	adds	r2, #6
    66f6:	4bb6      	ldr	r3, [pc, #728]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    66f8:	701a      	strb	r2, [r3, #0]
    66fa:	e624      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                Poll_Station = next_poll_station;
    66fc:	4bb6      	ldr	r3, [pc, #728]	; (69d8 <MSTP_Master_Node_FSM+0x70c>)
    66fe:	701d      	strb	r5, [r3, #0]
                MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
    6700:	4baf      	ldr	r3, [pc, #700]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    6702:	781a      	ldrb	r2, [r3, #0]
    6704:	b2d2      	uxtb	r2, r2
    6706:	2400      	movs	r4, #0
    6708:	9400      	str	r4, [sp, #0]
    670a:	2300      	movs	r3, #0
    670c:	0029      	movs	r1, r5
    670e:	2001      	movs	r0, #1
    6710:	4dac      	ldr	r5, [pc, #688]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    6712:	47a8      	blx	r5
                RetryCount = 0;
    6714:	4bac      	ldr	r3, [pc, #688]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    6716:	601c      	str	r4, [r3, #0]
                Master_State = MSTP_MASTER_STATE_POLL_FOR_MASTER;
    6718:	2207      	movs	r2, #7
    671a:	4bad      	ldr	r3, [pc, #692]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    671c:	701a      	strb	r2, [r3, #0]
    671e:	e612      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
            if (rs485_silence_elapsed(Tusage_timeout)) {
    6720:	201e      	movs	r0, #30
    6722:	4baf      	ldr	r3, [pc, #700]	; (69e0 <MSTP_Master_Node_FSM+0x714>)
    6724:	4798      	blx	r3
    6726:	1e04      	subs	r4, r0, #0
    6728:	d02c      	beq.n	6784 <MSTP_Master_Node_FSM+0x4b8>
                if (RetryCount < Nretry_token) {
    672a:	4ba7      	ldr	r3, [pc, #668]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    672c:	681b      	ldr	r3, [r3, #0]
    672e:	2b00      	cmp	r3, #0
    6730:	d110      	bne.n	6754 <MSTP_Master_Node_FSM+0x488>
                    RetryCount++;
    6732:	3301      	adds	r3, #1
    6734:	4aa4      	ldr	r2, [pc, #656]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    6736:	6013      	str	r3, [r2, #0]
                    MSTP_Send_Frame(
    6738:	4ba1      	ldr	r3, [pc, #644]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    673a:	781a      	ldrb	r2, [r3, #0]
    673c:	b2d2      	uxtb	r2, r2
    673e:	4ba7      	ldr	r3, [pc, #668]	; (69dc <MSTP_Master_Node_FSM+0x710>)
    6740:	7819      	ldrb	r1, [r3, #0]
    6742:	2400      	movs	r4, #0
    6744:	9400      	str	r4, [sp, #0]
    6746:	2300      	movs	r3, #0
    6748:	2000      	movs	r0, #0
    674a:	4d9e      	ldr	r5, [pc, #632]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    674c:	47a8      	blx	r5
                    EventCount = 0;
    674e:	4b9f      	ldr	r3, [pc, #636]	; (69cc <MSTP_Master_Node_FSM+0x700>)
    6750:	701c      	strb	r4, [r3, #0]
    6752:	e5f8      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                    Poll_Station = next_next_station;
    6754:	4ba0      	ldr	r3, [pc, #640]	; (69d8 <MSTP_Master_Node_FSM+0x70c>)
    6756:	4642      	mov	r2, r8
    6758:	701a      	strb	r2, [r3, #0]
                    MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
    675a:	4d99      	ldr	r5, [pc, #612]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    675c:	782a      	ldrb	r2, [r5, #0]
    675e:	b2d2      	uxtb	r2, r2
    6760:	2400      	movs	r4, #0
    6762:	9400      	str	r4, [sp, #0]
    6764:	2300      	movs	r3, #0
    6766:	4641      	mov	r1, r8
    6768:	2001      	movs	r0, #1
    676a:	4e96      	ldr	r6, [pc, #600]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    676c:	47b0      	blx	r6
                    Next_Station = This_Station;
    676e:	782a      	ldrb	r2, [r5, #0]
    6770:	4b9a      	ldr	r3, [pc, #616]	; (69dc <MSTP_Master_Node_FSM+0x710>)
    6772:	701a      	strb	r2, [r3, #0]
                    RetryCount = 0;
    6774:	4b94      	ldr	r3, [pc, #592]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    6776:	601c      	str	r4, [r3, #0]
                    TokenCount = 0;
    6778:	4b90      	ldr	r3, [pc, #576]	; (69bc <MSTP_Master_Node_FSM+0x6f0>)
    677a:	601c      	str	r4, [r3, #0]
                    Master_State = MSTP_MASTER_STATE_POLL_FOR_MASTER;
    677c:	2207      	movs	r2, #7
    677e:	4b94      	ldr	r3, [pc, #592]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    6780:	701a      	strb	r2, [r3, #0]
    6782:	e5e0      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                if (EventCount > Nmin_octets) {
    6784:	4b91      	ldr	r3, [pc, #580]	; (69cc <MSTP_Master_Node_FSM+0x700>)
    6786:	781b      	ldrb	r3, [r3, #0]
    6788:	b2db      	uxtb	r3, r3
    678a:	2b04      	cmp	r3, #4
    678c:	d800      	bhi.n	6790 <MSTP_Master_Node_FSM+0x4c4>
    678e:	e5da      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                    Master_State = MSTP_MASTER_STATE_IDLE;
    6790:	2201      	movs	r2, #1
    6792:	4b8f      	ldr	r3, [pc, #572]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    6794:	701a      	strb	r2, [r3, #0]
                    transition_now = true;
    6796:	2401      	movs	r4, #1
    6798:	e5d5      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
            my_timeout = Tno_token + (Tslot * This_Station);
    679a:	4b89      	ldr	r3, [pc, #548]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    679c:	781a      	ldrb	r2, [r3, #0]
    679e:	b2d2      	uxtb	r2, r2
    67a0:	0093      	lsls	r3, r2, #2
    67a2:	18d2      	adds	r2, r2, r3
    67a4:	0053      	lsls	r3, r2, #1
    67a6:	b298      	uxth	r0, r3
    67a8:	30f5      	adds	r0, #245	; 0xf5
    67aa:	30ff      	adds	r0, #255	; 0xff
    67ac:	b280      	uxth	r0, r0
            if (rs485_silence_elapsed(my_timeout)) {
    67ae:	4b8c      	ldr	r3, [pc, #560]	; (69e0 <MSTP_Master_Node_FSM+0x714>)
    67b0:	4798      	blx	r3
    67b2:	1e04      	subs	r4, r0, #0
    67b4:	d10a      	bne.n	67cc <MSTP_Master_Node_FSM+0x500>
                if (EventCount > Nmin_octets) {
    67b6:	4b85      	ldr	r3, [pc, #532]	; (69cc <MSTP_Master_Node_FSM+0x700>)
    67b8:	781b      	ldrb	r3, [r3, #0]
    67ba:	b2db      	uxtb	r3, r3
    67bc:	2b04      	cmp	r3, #4
    67be:	d800      	bhi.n	67c2 <MSTP_Master_Node_FSM+0x4f6>
    67c0:	e5c1      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                    Master_State = MSTP_MASTER_STATE_IDLE;
    67c2:	2201      	movs	r2, #1
    67c4:	4b82      	ldr	r3, [pc, #520]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    67c6:	701a      	strb	r2, [r3, #0]
                    transition_now = true;
    67c8:	2401      	movs	r4, #1
    67ca:	e5bc      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                ns_timeout = Tno_token + (Tslot * (This_Station + 1));
    67cc:	4b7c      	ldr	r3, [pc, #496]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    67ce:	781a      	ldrb	r2, [r3, #0]
    67d0:	3201      	adds	r2, #1
    67d2:	0093      	lsls	r3, r2, #2
    67d4:	18d2      	adds	r2, r2, r3
    67d6:	0053      	lsls	r3, r2, #1
    67d8:	b298      	uxth	r0, r3
    67da:	30f5      	adds	r0, #245	; 0xf5
    67dc:	30ff      	adds	r0, #255	; 0xff
    67de:	b280      	uxth	r0, r0
                if (rs485_silence_elapsed(ns_timeout)) {
    67e0:	4b7f      	ldr	r3, [pc, #508]	; (69e0 <MSTP_Master_Node_FSM+0x714>)
    67e2:	4798      	blx	r3
    67e4:	1e04      	subs	r4, r0, #0
    67e6:	d006      	beq.n	67f6 <MSTP_Master_Node_FSM+0x52a>
                    rs485_silence_reset();
    67e8:	4b7e      	ldr	r3, [pc, #504]	; (69e4 <MSTP_Master_Node_FSM+0x718>)
    67ea:	4798      	blx	r3
                    Master_State = MSTP_MASTER_STATE_IDLE;
    67ec:	2201      	movs	r2, #1
    67ee:	4b78      	ldr	r3, [pc, #480]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    67f0:	701a      	strb	r2, [r3, #0]
    bool transition_now = false;
    67f2:	2400      	movs	r4, #0
    67f4:	e5a7      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                    Poll_Station = next_this_station;
    67f6:	4b78      	ldr	r3, [pc, #480]	; (69d8 <MSTP_Master_Node_FSM+0x70c>)
    67f8:	464a      	mov	r2, r9
    67fa:	701a      	strb	r2, [r3, #0]
                    MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER, Poll_Station,
    67fc:	4f70      	ldr	r7, [pc, #448]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    67fe:	783a      	ldrb	r2, [r7, #0]
    6800:	b2d2      	uxtb	r2, r2
    6802:	2500      	movs	r5, #0
    6804:	9500      	str	r5, [sp, #0]
    6806:	2300      	movs	r3, #0
    6808:	4649      	mov	r1, r9
    680a:	2001      	movs	r0, #1
    680c:	4e6d      	ldr	r6, [pc, #436]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    680e:	47b0      	blx	r6
                    Next_Station = This_Station;
    6810:	783a      	ldrb	r2, [r7, #0]
    6812:	4b72      	ldr	r3, [pc, #456]	; (69dc <MSTP_Master_Node_FSM+0x710>)
    6814:	701a      	strb	r2, [r3, #0]
                    RetryCount = 0;
    6816:	4b6c      	ldr	r3, [pc, #432]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    6818:	601d      	str	r5, [r3, #0]
                    TokenCount = 0;
    681a:	4b68      	ldr	r3, [pc, #416]	; (69bc <MSTP_Master_Node_FSM+0x6f0>)
    681c:	601d      	str	r5, [r3, #0]
                    Master_State = MSTP_MASTER_STATE_POLL_FOR_MASTER;
    681e:	2207      	movs	r2, #7
    6820:	4b6b      	ldr	r3, [pc, #428]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    6822:	701a      	strb	r2, [r3, #0]
    6824:	e58f      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
            if (MSTP_Flag.ReceivedValidFrame == true) {
    6826:	4b6b      	ldr	r3, [pc, #428]	; (69d4 <MSTP_Master_Node_FSM+0x708>)
    6828:	681b      	ldr	r3, [r3, #0]
    682a:	079b      	lsls	r3, r3, #30
    682c:	d42a      	bmi.n	6884 <MSTP_Master_Node_FSM+0x5b8>
            } else if ((rs485_silence_elapsed(Tusage_timeout)) ||
    682e:	201e      	movs	r0, #30
    6830:	4b6b      	ldr	r3, [pc, #428]	; (69e0 <MSTP_Master_Node_FSM+0x714>)
    6832:	4798      	blx	r3
    6834:	1e04      	subs	r4, r0, #0
    6836:	d104      	bne.n	6842 <MSTP_Master_Node_FSM+0x576>
                (MSTP_Flag.ReceivedInvalidFrame == true)) {
    6838:	4b66      	ldr	r3, [pc, #408]	; (69d4 <MSTP_Master_Node_FSM+0x708>)
    683a:	681b      	ldr	r3, [r3, #0]
            } else if ((rs485_silence_elapsed(Tusage_timeout)) ||
    683c:	07db      	lsls	r3, r3, #31
    683e:	d400      	bmi.n	6842 <MSTP_Master_Node_FSM+0x576>
    6840:	e581      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                if (MSTP_Flag.SoleMaster == true) {
    6842:	4b64      	ldr	r3, [pc, #400]	; (69d4 <MSTP_Master_Node_FSM+0x708>)
    6844:	681b      	ldr	r3, [r3, #0]
    6846:	071b      	lsls	r3, r3, #28
    6848:	d452      	bmi.n	68f0 <MSTP_Master_Node_FSM+0x624>
                    if (Next_Station != This_Station) {
    684a:	4b64      	ldr	r3, [pc, #400]	; (69dc <MSTP_Master_Node_FSM+0x710>)
    684c:	7819      	ldrb	r1, [r3, #0]
    684e:	4b5c      	ldr	r3, [pc, #368]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    6850:	781b      	ldrb	r3, [r3, #0]
    6852:	b2db      	uxtb	r3, r3
    6854:	4299      	cmp	r1, r3
    6856:	d053      	beq.n	6900 <MSTP_Master_Node_FSM+0x634>
                        EventCount = 0;
    6858:	2400      	movs	r4, #0
    685a:	4b5c      	ldr	r3, [pc, #368]	; (69cc <MSTP_Master_Node_FSM+0x700>)
    685c:	701c      	strb	r4, [r3, #0]
                        MSTP_Send_Frame(FRAME_TYPE_TOKEN, Next_Station,
    685e:	4b58      	ldr	r3, [pc, #352]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    6860:	781a      	ldrb	r2, [r3, #0]
    6862:	b2d2      	uxtb	r2, r2
    6864:	9400      	str	r4, [sp, #0]
    6866:	2300      	movs	r3, #0
    6868:	2000      	movs	r0, #0
    686a:	4d56      	ldr	r5, [pc, #344]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    686c:	47a8      	blx	r5
                        RetryCount = 0;
    686e:	4b56      	ldr	r3, [pc, #344]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    6870:	601c      	str	r4, [r3, #0]
                        Master_State = MSTP_MASTER_STATE_PASS_TOKEN;
    6872:	2205      	movs	r2, #5
    6874:	4b56      	ldr	r3, [pc, #344]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    6876:	701a      	strb	r2, [r3, #0]
                MSTP_Flag.ReceivedInvalidFrame = false;
    6878:	4a56      	ldr	r2, [pc, #344]	; (69d4 <MSTP_Master_Node_FSM+0x708>)
    687a:	7813      	ldrb	r3, [r2, #0]
    687c:	2101      	movs	r1, #1
    687e:	438b      	bics	r3, r1
    6880:	7013      	strb	r3, [r2, #0]
    6882:	e560      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                destination = DestinationAddress;
    6884:	4b58      	ldr	r3, [pc, #352]	; (69e8 <MSTP_Master_Node_FSM+0x71c>)
    6886:	781a      	ldrb	r2, [r3, #0]
    6888:	b2d2      	uxtb	r2, r2
                if ((destination == This_Station) &&
    688a:	4b4d      	ldr	r3, [pc, #308]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    688c:	781b      	ldrb	r3, [r3, #0]
    688e:	b2db      	uxtb	r3, r3
    6890:	429a      	cmp	r2, r3
    6892:	d009      	beq.n	68a8 <MSTP_Master_Node_FSM+0x5dc>
                    Master_State = MSTP_MASTER_STATE_IDLE;
    6894:	2201      	movs	r2, #1
    6896:	4b4e      	ldr	r3, [pc, #312]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    6898:	701a      	strb	r2, [r3, #0]
                    transition_now = true;
    689a:	2401      	movs	r4, #1
                MSTP_Flag.ReceivedValidFrame = false;
    689c:	4a4d      	ldr	r2, [pc, #308]	; (69d4 <MSTP_Master_Node_FSM+0x708>)
    689e:	7813      	ldrb	r3, [r2, #0]
    68a0:	2102      	movs	r1, #2
    68a2:	438b      	bics	r3, r1
    68a4:	7013      	strb	r3, [r2, #0]
    68a6:	e54e      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                    (FrameType == FRAME_TYPE_REPLY_TO_POLL_FOR_MASTER)) {
    68a8:	4b50      	ldr	r3, [pc, #320]	; (69ec <MSTP_Master_Node_FSM+0x720>)
    68aa:	781b      	ldrb	r3, [r3, #0]
                if ((destination == This_Station) &&
    68ac:	2b02      	cmp	r3, #2
    68ae:	d1f1      	bne.n	6894 <MSTP_Master_Node_FSM+0x5c8>
                    MSTP_Flag.SoleMaster = false;
    68b0:	4a48      	ldr	r2, [pc, #288]	; (69d4 <MSTP_Master_Node_FSM+0x708>)
    68b2:	7813      	ldrb	r3, [r2, #0]
    68b4:	2108      	movs	r1, #8
    68b6:	438b      	bics	r3, r1
    68b8:	7013      	strb	r3, [r2, #0]
                    Next_Station = SourceAddress;
    68ba:	4b4d      	ldr	r3, [pc, #308]	; (69f0 <MSTP_Master_Node_FSM+0x724>)
    68bc:	7819      	ldrb	r1, [r3, #0]
    68be:	b2c9      	uxtb	r1, r1
    68c0:	4b46      	ldr	r3, [pc, #280]	; (69dc <MSTP_Master_Node_FSM+0x710>)
    68c2:	7019      	strb	r1, [r3, #0]
                    EventCount = 0;
    68c4:	2400      	movs	r4, #0
    68c6:	4b41      	ldr	r3, [pc, #260]	; (69cc <MSTP_Master_Node_FSM+0x700>)
    68c8:	701c      	strb	r4, [r3, #0]
                    MSTP_Send_Frame(
    68ca:	4d3d      	ldr	r5, [pc, #244]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    68cc:	782a      	ldrb	r2, [r5, #0]
    68ce:	b2d2      	uxtb	r2, r2
    68d0:	9400      	str	r4, [sp, #0]
    68d2:	2300      	movs	r3, #0
    68d4:	2000      	movs	r0, #0
    68d6:	4e3b      	ldr	r6, [pc, #236]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    68d8:	47b0      	blx	r6
                    Poll_Station = This_Station;
    68da:	782a      	ldrb	r2, [r5, #0]
    68dc:	4b3e      	ldr	r3, [pc, #248]	; (69d8 <MSTP_Master_Node_FSM+0x70c>)
    68de:	701a      	strb	r2, [r3, #0]
                    TokenCount = 0;
    68e0:	4b36      	ldr	r3, [pc, #216]	; (69bc <MSTP_Master_Node_FSM+0x6f0>)
    68e2:	601c      	str	r4, [r3, #0]
                    RetryCount = 0;
    68e4:	4b38      	ldr	r3, [pc, #224]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    68e6:	601c      	str	r4, [r3, #0]
                    Master_State = MSTP_MASTER_STATE_PASS_TOKEN;
    68e8:	2205      	movs	r2, #5
    68ea:	4b39      	ldr	r3, [pc, #228]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    68ec:	701a      	strb	r2, [r3, #0]
    68ee:	e7d5      	b.n	689c <MSTP_Master_Node_FSM+0x5d0>
                    FrameCount = 0;
    68f0:	2200      	movs	r2, #0
    68f2:	4b40      	ldr	r3, [pc, #256]	; (69f4 <MSTP_Master_Node_FSM+0x728>)
    68f4:	701a      	strb	r2, [r3, #0]
                    Master_State = MSTP_MASTER_STATE_USE_TOKEN;
    68f6:	3202      	adds	r2, #2
    68f8:	4b35      	ldr	r3, [pc, #212]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    68fa:	701a      	strb	r2, [r3, #0]
                    transition_now = true;
    68fc:	2401      	movs	r4, #1
    68fe:	e7bb      	b.n	6878 <MSTP_Master_Node_FSM+0x5ac>
                        if (next_poll_station != This_Station) {
    6900:	4b2f      	ldr	r3, [pc, #188]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	b2db      	uxtb	r3, r3
    6906:	429d      	cmp	r5, r3
    6908:	d00e      	beq.n	6928 <MSTP_Master_Node_FSM+0x65c>
                            Poll_Station = next_poll_station;
    690a:	4b33      	ldr	r3, [pc, #204]	; (69d8 <MSTP_Master_Node_FSM+0x70c>)
    690c:	701d      	strb	r5, [r3, #0]
                            MSTP_Send_Frame(FRAME_TYPE_POLL_FOR_MASTER,
    690e:	4b2c      	ldr	r3, [pc, #176]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    6910:	781a      	ldrb	r2, [r3, #0]
    6912:	b2d2      	uxtb	r2, r2
    6914:	2400      	movs	r4, #0
    6916:	9400      	str	r4, [sp, #0]
    6918:	2300      	movs	r3, #0
    691a:	0029      	movs	r1, r5
    691c:	2001      	movs	r0, #1
    691e:	4d29      	ldr	r5, [pc, #164]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    6920:	47a8      	blx	r5
                            RetryCount = 0;
    6922:	4b29      	ldr	r3, [pc, #164]	; (69c8 <MSTP_Master_Node_FSM+0x6fc>)
    6924:	601c      	str	r4, [r3, #0]
    6926:	e7a7      	b.n	6878 <MSTP_Master_Node_FSM+0x5ac>
                            MSTP_Flag.SoleMaster = true;
    6928:	4a2a      	ldr	r2, [pc, #168]	; (69d4 <MSTP_Master_Node_FSM+0x708>)
    692a:	7813      	ldrb	r3, [r2, #0]
    692c:	2108      	movs	r1, #8
    692e:	430b      	orrs	r3, r1
    6930:	7013      	strb	r3, [r2, #0]
                            FrameCount = 0;
    6932:	2200      	movs	r2, #0
    6934:	4b2f      	ldr	r3, [pc, #188]	; (69f4 <MSTP_Master_Node_FSM+0x728>)
    6936:	701a      	strb	r2, [r3, #0]
                            Master_State = MSTP_MASTER_STATE_USE_TOKEN;
    6938:	3202      	adds	r2, #2
    693a:	4b25      	ldr	r3, [pc, #148]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    693c:	701a      	strb	r2, [r3, #0]
                            transition_now = true;
    693e:	2401      	movs	r4, #1
    6940:	e79a      	b.n	6878 <MSTP_Master_Node_FSM+0x5ac>
            destination = SourceAddress;
    6942:	4b2b      	ldr	r3, [pc, #172]	; (69f0 <MSTP_Master_Node_FSM+0x724>)
    6944:	781d      	ldrb	r5, [r3, #0]
    6946:	b2ed      	uxtb	r5, r5
            source = This_Station;
    6948:	4b1d      	ldr	r3, [pc, #116]	; (69c0 <MSTP_Master_Node_FSM+0x6f4>)
    694a:	781e      	ldrb	r6, [r3, #0]
    694c:	b2f3      	uxtb	r3, r6
    694e:	4698      	mov	r8, r3
            data = &InputBuffer[0];
    6950:	4b29      	ldr	r3, [pc, #164]	; (69f8 <MSTP_Master_Node_FSM+0x72c>)
    6952:	681c      	ldr	r4, [r3, #0]
            data_len = DataLength;
    6954:	4b29      	ldr	r3, [pc, #164]	; (69fc <MSTP_Master_Node_FSM+0x730>)
    6956:	6819      	ldr	r1, [r3, #0]
    6958:	b28b      	uxth	r3, r1
    695a:	469a      	mov	sl, r3
            timeout = rs485_silence_elapsed(Treply_delay);
    695c:	20c8      	movs	r0, #200	; 0xc8
    695e:	4b20      	ldr	r3, [pc, #128]	; (69e0 <MSTP_Master_Node_FSM+0x714>)
    6960:	4798      	blx	r3
    6962:	9003      	str	r0, [sp, #12]
    6964:	1e07      	subs	r7, r0, #0
            if (!timeout) {
    6966:	d015      	beq.n	6994 <MSTP_Master_Node_FSM+0x6c8>
    struct dlmstp_packet *pkt = NULL;
    6968:	2600      	movs	r6, #0
    bool matched = false;
    696a:	2400      	movs	r4, #0
            if (matched) {
    696c:	2c00      	cmp	r4, #0
    696e:	d14d      	bne.n	6a0c <MSTP_Master_Node_FSM+0x740>
            } else if ((pkt != NULL) || timeout) {
    6970:	2e00      	cmp	r6, #0
    6972:	d068      	beq.n	6a46 <MSTP_Master_Node_FSM+0x77a>
                MSTP_Send_Frame(
    6974:	2300      	movs	r3, #0
    6976:	9300      	str	r3, [sp, #0]
    6978:	4642      	mov	r2, r8
    697a:	0029      	movs	r1, r5
    697c:	2007      	movs	r0, #7
    697e:	4d11      	ldr	r5, [pc, #68]	; (69c4 <MSTP_Master_Node_FSM+0x6f8>)
    6980:	47a8      	blx	r5
                Master_State = MSTP_MASTER_STATE_IDLE;
    6982:	2201      	movs	r2, #1
    6984:	4b12      	ldr	r3, [pc, #72]	; (69d0 <MSTP_Master_Node_FSM+0x704>)
    6986:	701a      	strb	r2, [r3, #0]
                MSTP_Flag.ReceivedValidFrame = false;
    6988:	4a12      	ldr	r2, [pc, #72]	; (69d4 <MSTP_Master_Node_FSM+0x708>)
    698a:	7813      	ldrb	r3, [r2, #0]
    698c:	2102      	movs	r1, #2
    698e:	438b      	bics	r3, r1
    6990:	7013      	strb	r3, [r2, #0]
    6992:	e4d8      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
                pkt = (struct dlmstp_packet *)Ringbuf_Peek(&PDU_Queue);
    6994:	481a      	ldr	r0, [pc, #104]	; (6a00 <MSTP_Master_Node_FSM+0x734>)
    6996:	4b1b      	ldr	r3, [pc, #108]	; (6a04 <MSTP_Master_Node_FSM+0x738>)
    6998:	4798      	blx	r3
    699a:	1e06      	subs	r6, r0, #0
                if (pkt != NULL) {
    699c:	d00c      	beq.n	69b8 <MSTP_Master_Node_FSM+0x6ec>
                    matched = dlmstp_compare_data_expecting_reply(data,
    699e:	0003      	movs	r3, r0
    69a0:	3318      	adds	r3, #24
    69a2:	8ac2      	ldrh	r2, [r0, #22]
    69a4:	78c1      	ldrb	r1, [r0, #3]
    69a6:	9101      	str	r1, [sp, #4]
    69a8:	9200      	str	r2, [sp, #0]
    69aa:	002a      	movs	r2, r5
    69ac:	4651      	mov	r1, sl
    69ae:	0020      	movs	r0, r4
    69b0:	4c15      	ldr	r4, [pc, #84]	; (6a08 <MSTP_Master_Node_FSM+0x73c>)
    69b2:	47a0      	blx	r4
    69b4:	0004      	movs	r4, r0
    69b6:	e7d9      	b.n	696c <MSTP_Master_Node_FSM+0x6a0>
                    matched = false;
    69b8:	9c03      	ldr	r4, [sp, #12]
    69ba:	e7d7      	b.n	696c <MSTP_Master_Node_FSM+0x6a0>
    69bc:	20001360 	.word	0x20001360
    69c0:	2000135d 	.word	0x2000135d
    69c4:	0000600d 	.word	0x0000600d
    69c8:	20001358 	.word	0x20001358
    69cc:	20000cdd 	.word	0x20000cdd
    69d0:	20000cf0 	.word	0x20000cf0
    69d4:	20000cec 	.word	0x20000cec
    69d8:	20001348 	.word	0x20001348
    69dc:	20000cf1 	.word	0x20000cf1
    69e0:	0000b1b9 	.word	0x0000b1b9
    69e4:	0000b1a5 	.word	0x0000b1a5
    69e8:	20000cdc 	.word	0x20000cdc
    69ec:	20000cdf 	.word	0x20000cdf
    69f0:	2000135c 	.word	0x2000135c
    69f4:	20000cde 	.word	0x20000cde
    69f8:	20000ce4 	.word	0x20000ce4
    69fc:	20000cd8 	.word	0x20000cd8
    6a00:	20001330 	.word	0x20001330
    6a04:	00002469 	.word	0x00002469
    6a08:	00006171 	.word	0x00006171
                MSTP_Send_Frame(pkt->frame_type, pkt->address.mac[0],
    6a0c:	4b12      	ldr	r3, [pc, #72]	; (6a58 <MSTP_Master_Node_FSM+0x78c>)
    6a0e:	781a      	ldrb	r2, [r3, #0]
    6a10:	b2d2      	uxtb	r2, r2
    6a12:	0033      	movs	r3, r6
    6a14:	3318      	adds	r3, #24
    6a16:	78f1      	ldrb	r1, [r6, #3]
    6a18:	7d30      	ldrb	r0, [r6, #20]
    6a1a:	8af4      	ldrh	r4, [r6, #22]
    6a1c:	9400      	str	r4, [sp, #0]
    6a1e:	4c0f      	ldr	r4, [pc, #60]	; (6a5c <MSTP_Master_Node_FSM+0x790>)
    6a20:	47a0      	blx	r4
                Master_State = MSTP_MASTER_STATE_IDLE;
    6a22:	2201      	movs	r2, #1
    6a24:	4b0e      	ldr	r3, [pc, #56]	; (6a60 <MSTP_Master_Node_FSM+0x794>)
    6a26:	701a      	strb	r2, [r3, #0]
                MSTP_Flag.ReceivedValidFrame = false;
    6a28:	4a0e      	ldr	r2, [pc, #56]	; (6a64 <MSTP_Master_Node_FSM+0x798>)
    6a2a:	7813      	ldrb	r3, [r2, #0]
    6a2c:	2102      	movs	r1, #2
    6a2e:	438b      	bics	r3, r1
    6a30:	7013      	strb	r3, [r2, #0]
                (void)Ringbuf_Pop(&PDU_Queue, NULL);
    6a32:	2100      	movs	r1, #0
    6a34:	480c      	ldr	r0, [pc, #48]	; (6a68 <MSTP_Master_Node_FSM+0x79c>)
    6a36:	4b0d      	ldr	r3, [pc, #52]	; (6a6c <MSTP_Master_Node_FSM+0x7a0>)
    6a38:	4798      	blx	r3
                TransmitPDUCount++;
    6a3a:	4a0d      	ldr	r2, [pc, #52]	; (6a70 <MSTP_Master_Node_FSM+0x7a4>)
    6a3c:	6813      	ldr	r3, [r2, #0]
    6a3e:	3301      	adds	r3, #1
    6a40:	6013      	str	r3, [r2, #0]
    bool transition_now = false;
    6a42:	2400      	movs	r4, #0
    6a44:	e47f      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
            } else if ((pkt != NULL) || timeout) {
    6a46:	2f00      	cmp	r7, #0
    6a48:	d194      	bne.n	6974 <MSTP_Master_Node_FSM+0x6a8>
    bool transition_now = false;
    6a4a:	9c03      	ldr	r4, [sp, #12]
    6a4c:	e47b      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
            Master_State = MSTP_MASTER_STATE_IDLE;
    6a4e:	2201      	movs	r2, #1
    6a50:	4b03      	ldr	r3, [pc, #12]	; (6a60 <MSTP_Master_Node_FSM+0x794>)
    6a52:	701a      	strb	r2, [r3, #0]
    bool transition_now = false;
    6a54:	2400      	movs	r4, #0
            break;
    6a56:	e476      	b.n	6346 <MSTP_Master_Node_FSM+0x7a>
    6a58:	2000135d 	.word	0x2000135d
    6a5c:	0000600d 	.word	0x0000600d
    6a60:	20000cf0 	.word	0x20000cf0
    6a64:	20000cec 	.word	0x20000cec
    6a68:	20001330 	.word	0x20001330
    6a6c:	00002495 	.word	0x00002495
    6a70:	20001368 	.word	0x20001368

00006a74 <dlmstp_init>:
{
    6a74:	b510      	push	{r4, lr}
    Ringbuf_Init(&PDU_Queue, (uint8_t *)&PDU_Buffer,
    6a76:	2302      	movs	r3, #2
    6a78:	2287      	movs	r2, #135	; 0x87
    6a7a:	0092      	lsls	r2, r2, #2
    6a7c:	4902      	ldr	r1, [pc, #8]	; (6a88 <dlmstp_init+0x14>)
    6a7e:	4803      	ldr	r0, [pc, #12]	; (6a8c <dlmstp_init+0x18>)
    6a80:	4c03      	ldr	r4, [pc, #12]	; (6a90 <dlmstp_init+0x1c>)
    6a82:	47a0      	blx	r4
}
    6a84:	2001      	movs	r0, #1
    6a86:	bd10      	pop	{r4, pc}
    6a88:	20000ef8 	.word	0x20000ef8
    6a8c:	20001330 	.word	0x20001330
    6a90:	00002561 	.word	0x00002561

00006a94 <dlmstp_send_pdu>:
    BACNET_NPDU_DATA *npdu_data, /* network information */

    uint8_t *pdu, /* any data to be sent - may be null */

    unsigned pdu_len)
{ /* number of bytes of data */
    6a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a96:	0007      	movs	r7, r0
    6a98:	000c      	movs	r4, r1
    6a9a:	0016      	movs	r6, r2
    6a9c:	001d      	movs	r5, r3
    int bytes_sent = 0;
    struct dlmstp_packet *pkt;
    uint16_t i = 0;

    pkt = (struct dlmstp_packet *)Ringbuf_Data_Peek(&PDU_Queue);
    6a9e:	481a      	ldr	r0, [pc, #104]	; (6b08 <dlmstp_send_pdu+0x74>)
    6aa0:	4b1a      	ldr	r3, [pc, #104]	; (6b0c <dlmstp_send_pdu+0x78>)
    6aa2:	4798      	blx	r3
    if (pkt) {
    6aa4:	2800      	cmp	r0, #0
    6aa6:	d02b      	beq.n	6b00 <dlmstp_send_pdu+0x6c>
        if (npdu_data->data_expecting_reply) {
    6aa8:	7863      	ldrb	r3, [r4, #1]
    6aaa:	2b00      	cmp	r3, #0
    6aac:	d003      	beq.n	6ab6 <dlmstp_send_pdu+0x22>
            pkt->frame_type = FRAME_TYPE_BACNET_DATA_EXPECTING_REPLY;
    6aae:	2305      	movs	r3, #5
    6ab0:	7503      	strb	r3, [r0, #20]
{ /* number of bytes of data */
    6ab2:	2300      	movs	r3, #0
    6ab4:	e007      	b.n	6ac6 <dlmstp_send_pdu+0x32>
        } else {
            pkt->frame_type = FRAME_TYPE_BACNET_DATA_NOT_EXPECTING_REPLY;
    6ab6:	2306      	movs	r3, #6
    6ab8:	7503      	strb	r3, [r0, #20]
    6aba:	e7fa      	b.n	6ab2 <dlmstp_send_pdu+0x1e>
        }
        for (i = 0; i < pdu_len; i++) {
            pkt->pdu[i] = pdu[i];
    6abc:	5cf4      	ldrb	r4, [r6, r3]
    6abe:	18c2      	adds	r2, r0, r3
    6ac0:	7614      	strb	r4, [r2, #24]
        for (i = 0; i < pdu_len; i++) {
    6ac2:	3301      	adds	r3, #1
    6ac4:	b29b      	uxth	r3, r3
    6ac6:	42ab      	cmp	r3, r5
    6ac8:	d3f8      	bcc.n	6abc <dlmstp_send_pdu+0x28>
        }
        pkt->pdu_len = pdu_len;
    6aca:	82c5      	strh	r5, [r0, #22]
        if (dest && dest->mac_len) {
    6acc:	2f00      	cmp	r7, #0
    6ace:	d009      	beq.n	6ae4 <dlmstp_send_pdu+0x50>
    6ad0:	783b      	ldrb	r3, [r7, #0]
    6ad2:	2b00      	cmp	r3, #0
    6ad4:	d006      	beq.n	6ae4 <dlmstp_send_pdu+0x50>
            pkt->address.mac_len = 1;
    6ad6:	2301      	movs	r3, #1
    6ad8:	7083      	strb	r3, [r0, #2]
            pkt->address.mac[0] = dest->mac[0];
    6ada:	787b      	ldrb	r3, [r7, #1]
    6adc:	70c3      	strb	r3, [r0, #3]
            pkt->address.len = 0;
    6ade:	2300      	movs	r3, #0
    6ae0:	7303      	strb	r3, [r0, #12]
    6ae2:	e005      	b.n	6af0 <dlmstp_send_pdu+0x5c>
        } else {
            pkt->address.mac_len = 1;
    6ae4:	2301      	movs	r3, #1
    6ae6:	7083      	strb	r3, [r0, #2]
            pkt->address.mac[0] = MSTP_BROADCAST_ADDRESS;
    6ae8:	33fe      	adds	r3, #254	; 0xfe
    6aea:	70c3      	strb	r3, [r0, #3]
            pkt->address.len = 0;
    6aec:	2300      	movs	r3, #0
    6aee:	7303      	strb	r3, [r0, #12]
        }
        if (Ringbuf_Data_Put(&PDU_Queue, (volatile uint8_t *)pkt)) {
    6af0:	0001      	movs	r1, r0
    6af2:	4805      	ldr	r0, [pc, #20]	; (6b08 <dlmstp_send_pdu+0x74>)
    6af4:	4b06      	ldr	r3, [pc, #24]	; (6b10 <dlmstp_send_pdu+0x7c>)
    6af6:	4798      	blx	r3
    6af8:	2800      	cmp	r0, #0
    6afa:	d003      	beq.n	6b04 <dlmstp_send_pdu+0x70>
            bytes_sent = pdu_len;
    6afc:	0028      	movs	r0, r5
        }
    }

    return bytes_sent;
}
    6afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int bytes_sent = 0;
    6b00:	2000      	movs	r0, #0
    6b02:	e7fc      	b.n	6afe <dlmstp_send_pdu+0x6a>
    6b04:	2000      	movs	r0, #0
    return bytes_sent;
    6b06:	e7fa      	b.n	6afe <dlmstp_send_pdu+0x6a>
    6b08:	20001330 	.word	0x20001330
    6b0c:	000024e1 	.word	0x000024e1
    6b10:	00002511 	.word	0x00002511

00006b14 <dlmstp_receive>:
 *
 * @return Return the length of the packet
 */
uint16_t dlmstp_receive(
    BACNET_ADDRESS *src, uint8_t *pdu, uint16_t max_pdu, unsigned timeout)
{
    6b14:	b570      	push	{r4, r5, r6, lr}
    6b16:	0005      	movs	r5, r0
    uint16_t pdu_len = 0; /* return value */
    bool transmitting = false;

    (void)timeout;
    /* set the input buffer to the same data storage for zero copy */
    if (!InputBuffer) {
    6b18:	4b4c      	ldr	r3, [pc, #304]	; (6c4c <dlmstp_receive+0x138>)
    6b1a:	681b      	ldr	r3, [r3, #0]
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d058      	beq.n	6bd2 <dlmstp_receive+0xbe>
        InputBuffer = pdu;
        InputBufferSize = max_pdu;
    }
    transmitting = rs485_rts_enabled();
    6b20:	4b4b      	ldr	r3, [pc, #300]	; (6c50 <dlmstp_receive+0x13c>)
    6b22:	4798      	blx	r3
    6b24:	1e04      	subs	r4, r0, #0
    if (!transmitting) {
    6b26:	d112      	bne.n	6b4e <dlmstp_receive+0x3a>
        while ((MSTP_Flag.ReceivedValidFrame == false) &&
    6b28:	4b4a      	ldr	r3, [pc, #296]	; (6c54 <dlmstp_receive+0x140>)
    6b2a:	681b      	ldr	r3, [r3, #0]
    6b2c:	079b      	lsls	r3, r3, #30
    6b2e:	d40e      	bmi.n	6b4e <dlmstp_receive+0x3a>
            (MSTP_Flag.ReceivedValidFrameNotForUs == false) &&
    6b30:	4b48      	ldr	r3, [pc, #288]	; (6c54 <dlmstp_receive+0x140>)
    6b32:	681b      	ldr	r3, [r3, #0]
        while ((MSTP_Flag.ReceivedValidFrame == false) &&
    6b34:	075b      	lsls	r3, r3, #29
    6b36:	d40a      	bmi.n	6b4e <dlmstp_receive+0x3a>
            (MSTP_Flag.ReceivedInvalidFrame == false)) {
    6b38:	4b46      	ldr	r3, [pc, #280]	; (6c54 <dlmstp_receive+0x140>)
    6b3a:	681b      	ldr	r3, [r3, #0]
            (MSTP_Flag.ReceivedValidFrameNotForUs == false) &&
    6b3c:	07db      	lsls	r3, r3, #31
    6b3e:	d406      	bmi.n	6b4e <dlmstp_receive+0x3a>
            /* only do receive state machine while we don't have a frame */
            MSTP_Receive_Frame_FSM();
    6b40:	4b45      	ldr	r3, [pc, #276]	; (6c58 <dlmstp_receive+0x144>)
    6b42:	4798      	blx	r3
            /* process another byte, if available, since this handler
               may not get called often enough to process fast baud long
               messages. */
            if (!rs485_byte_available(NULL)) {
    6b44:	2000      	movs	r0, #0
    6b46:	4b45      	ldr	r3, [pc, #276]	; (6c5c <dlmstp_receive+0x148>)
    6b48:	4798      	blx	r3
    6b4a:	2800      	cmp	r0, #0
    6b4c:	d1ec      	bne.n	6b28 <dlmstp_receive+0x14>
                break;
            }
        }
    }
    if (MSTP_Flag.ReceivedValidFrameNotForUs) {
    6b4e:	4b41      	ldr	r3, [pc, #260]	; (6c54 <dlmstp_receive+0x140>)
    6b50:	681b      	ldr	r3, [r3, #0]
    6b52:	075b      	lsls	r3, r3, #29
    6b54:	d508      	bpl.n	6b68 <dlmstp_receive+0x54>
        MSTP_Flag.ReceivedValidFrameNotForUs = false;
    6b56:	4a3f      	ldr	r2, [pc, #252]	; (6c54 <dlmstp_receive+0x140>)
    6b58:	7813      	ldrb	r3, [r2, #0]
    6b5a:	2104      	movs	r1, #4
    6b5c:	438b      	bics	r3, r1
    6b5e:	7013      	strb	r3, [r2, #0]
        ReceiveFrameCount++;
    6b60:	4a3f      	ldr	r2, [pc, #252]	; (6c60 <dlmstp_receive+0x14c>)
    6b62:	6813      	ldr	r3, [r2, #0]
    6b64:	3301      	adds	r3, #1
    6b66:	6013      	str	r3, [r2, #0]
    }
    if (MSTP_Flag.ReceivedValidFrame) {
    6b68:	4b3a      	ldr	r3, [pc, #232]	; (6c54 <dlmstp_receive+0x140>)
    6b6a:	681b      	ldr	r3, [r3, #0]
    6b6c:	079b      	lsls	r3, r3, #30
    6b6e:	d503      	bpl.n	6b78 <dlmstp_receive+0x64>
        ReceiveFrameCount++;
    6b70:	4a3b      	ldr	r2, [pc, #236]	; (6c60 <dlmstp_receive+0x14c>)
    6b72:	6813      	ldr	r3, [r2, #0]
    6b74:	3301      	adds	r3, #1
    6b76:	6013      	str	r3, [r2, #0]
    }
    if (MSTP_Flag.ReceivedInvalidFrame) {
    6b78:	4b36      	ldr	r3, [pc, #216]	; (6c54 <dlmstp_receive+0x140>)
    6b7a:	681b      	ldr	r3, [r3, #0]
    6b7c:	07db      	lsls	r3, r3, #31
    6b7e:	d503      	bpl.n	6b88 <dlmstp_receive+0x74>
        ReceiveFrameCount++;
    6b80:	4a37      	ldr	r2, [pc, #220]	; (6c60 <dlmstp_receive+0x14c>)
    6b82:	6813      	ldr	r3, [r2, #0]
    6b84:	3301      	adds	r3, #1
    6b86:	6013      	str	r3, [r2, #0]
    }
    /* only do master state machine while rx is idle */
    if ((Receive_State == MSTP_RECEIVE_STATE_IDLE) && (transmitting == false)) {
    6b88:	4b36      	ldr	r3, [pc, #216]	; (6c64 <dlmstp_receive+0x150>)
    6b8a:	781b      	ldrb	r3, [r3, #0]
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	d10a      	bne.n	6ba6 <dlmstp_receive+0x92>
    6b90:	2c00      	cmp	r4, #0
    6b92:	d108      	bne.n	6ba6 <dlmstp_receive+0x92>
        if (MSTP_Flag.ReceivedValidFrameNotForUs) {
    6b94:	4b2f      	ldr	r3, [pc, #188]	; (6c54 <dlmstp_receive+0x140>)
    6b96:	681b      	ldr	r3, [r3, #0]
    6b98:	075b      	lsls	r3, r3, #29
    6b9a:	d51f      	bpl.n	6bdc <dlmstp_receive+0xc8>
            MSTP_Flag.ReceivedValidFrameNotForUs = false;
    6b9c:	4a2d      	ldr	r2, [pc, #180]	; (6c54 <dlmstp_receive+0x140>)
    6b9e:	7813      	ldrb	r3, [r2, #0]
    6ba0:	2104      	movs	r1, #4
    6ba2:	438b      	bics	r3, r1
    6ba4:	7013      	strb	r3, [r2, #0]
                };
            }
        }
    }
    /* if there is a packet that needs processed, do it now. */
    if (MSTP_Flag.ReceivePacketPending) {
    6ba6:	4b2b      	ldr	r3, [pc, #172]	; (6c54 <dlmstp_receive+0x140>)
    6ba8:	681b      	ldr	r3, [r3, #0]
    6baa:	06db      	lsls	r3, r3, #27
    6bac:	d54c      	bpl.n	6c48 <dlmstp_receive+0x134>
        MSTP_Flag.ReceivePacketPending = false;
    6bae:	4a29      	ldr	r2, [pc, #164]	; (6c54 <dlmstp_receive+0x140>)
    6bb0:	7813      	ldrb	r3, [r2, #0]
    6bb2:	2110      	movs	r1, #16
    6bb4:	438b      	bics	r3, r1
    6bb6:	7013      	strb	r3, [r2, #0]
        ReceivePDUCount++;
    6bb8:	4a2b      	ldr	r2, [pc, #172]	; (6c68 <dlmstp_receive+0x154>)
    6bba:	6813      	ldr	r3, [r2, #0]
    6bbc:	3301      	adds	r3, #1
    6bbe:	6013      	str	r3, [r2, #0]
        pdu_len = DataLength;
    6bc0:	4b2a      	ldr	r3, [pc, #168]	; (6c6c <dlmstp_receive+0x158>)
    6bc2:	6818      	ldr	r0, [r3, #0]
    6bc4:	b280      	uxth	r0, r0
        src->mac_len = 1;
    6bc6:	2301      	movs	r3, #1
    6bc8:	702b      	strb	r3, [r5, #0]
        src->mac[0] = SourceAddress;
    6bca:	4b29      	ldr	r3, [pc, #164]	; (6c70 <dlmstp_receive+0x15c>)
    6bcc:	781b      	ldrb	r3, [r3, #0]
    6bce:	706b      	strb	r3, [r5, #1]
        /* data is already in the pdu pointer */
    }

    return pdu_len;
}
    6bd0:	bd70      	pop	{r4, r5, r6, pc}
        InputBuffer = pdu;
    6bd2:	4b1e      	ldr	r3, [pc, #120]	; (6c4c <dlmstp_receive+0x138>)
    6bd4:	6019      	str	r1, [r3, #0]
        InputBufferSize = max_pdu;
    6bd6:	4b27      	ldr	r3, [pc, #156]	; (6c74 <dlmstp_receive+0x160>)
    6bd8:	801a      	strh	r2, [r3, #0]
    6bda:	e7a1      	b.n	6b20 <dlmstp_receive+0xc>
        } else if (MSTP_Flag.ReceivedValidFrame) {
    6bdc:	4b1d      	ldr	r3, [pc, #116]	; (6c54 <dlmstp_receive+0x140>)
    6bde:	681b      	ldr	r3, [r3, #0]
    6be0:	079b      	lsls	r3, r3, #30
    6be2:	d40e      	bmi.n	6c02 <dlmstp_receive+0xee>
            if ((This_Station > 127) && (This_Station < 255)) {
    6be4:	4b24      	ldr	r3, [pc, #144]	; (6c78 <dlmstp_receive+0x164>)
    6be6:	781b      	ldrb	r3, [r3, #0]
    6be8:	b25b      	sxtb	r3, r3
    6bea:	2b00      	cmp	r3, #0
    6bec:	db24      	blt.n	6c38 <dlmstp_receive+0x124>
            } else if (This_Station <= 127) {
    6bee:	4b22      	ldr	r3, [pc, #136]	; (6c78 <dlmstp_receive+0x164>)
    6bf0:	781b      	ldrb	r3, [r3, #0]
    6bf2:	b25b      	sxtb	r3, r3
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	dbd6      	blt.n	6ba6 <dlmstp_receive+0x92>
                while (MSTP_Master_Node_FSM()) {
    6bf8:	4b20      	ldr	r3, [pc, #128]	; (6c7c <dlmstp_receive+0x168>)
    6bfa:	4798      	blx	r3
    6bfc:	2800      	cmp	r0, #0
    6bfe:	d1fb      	bne.n	6bf8 <dlmstp_receive+0xe4>
    6c00:	e7d1      	b.n	6ba6 <dlmstp_receive+0x92>
            if (rs485_turnaround_elapsed()) {
    6c02:	4b1f      	ldr	r3, [pc, #124]	; (6c80 <dlmstp_receive+0x16c>)
    6c04:	4798      	blx	r3
    6c06:	2800      	cmp	r0, #0
    6c08:	d0cd      	beq.n	6ba6 <dlmstp_receive+0x92>
                if ((This_Station > 127) && (This_Station < 255)) {
    6c0a:	4b1b      	ldr	r3, [pc, #108]	; (6c78 <dlmstp_receive+0x164>)
    6c0c:	781b      	ldrb	r3, [r3, #0]
    6c0e:	b25b      	sxtb	r3, r3
    6c10:	2b00      	cmp	r3, #0
    6c12:	db09      	blt.n	6c28 <dlmstp_receive+0x114>
                } else if (This_Station <= 127) {
    6c14:	4b18      	ldr	r3, [pc, #96]	; (6c78 <dlmstp_receive+0x164>)
    6c16:	781b      	ldrb	r3, [r3, #0]
    6c18:	b25b      	sxtb	r3, r3
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	dbc3      	blt.n	6ba6 <dlmstp_receive+0x92>
                    while (MSTP_Master_Node_FSM()) {
    6c1e:	4b17      	ldr	r3, [pc, #92]	; (6c7c <dlmstp_receive+0x168>)
    6c20:	4798      	blx	r3
    6c22:	2800      	cmp	r0, #0
    6c24:	d1fb      	bne.n	6c1e <dlmstp_receive+0x10a>
    6c26:	e7be      	b.n	6ba6 <dlmstp_receive+0x92>
                if ((This_Station > 127) && (This_Station < 255)) {
    6c28:	4b13      	ldr	r3, [pc, #76]	; (6c78 <dlmstp_receive+0x164>)
    6c2a:	781b      	ldrb	r3, [r3, #0]
    6c2c:	b2db      	uxtb	r3, r3
    6c2e:	2bff      	cmp	r3, #255	; 0xff
    6c30:	d0f0      	beq.n	6c14 <dlmstp_receive+0x100>
                    MSTP_Slave_Node_FSM();
    6c32:	4b14      	ldr	r3, [pc, #80]	; (6c84 <dlmstp_receive+0x170>)
    6c34:	4798      	blx	r3
    6c36:	e7b6      	b.n	6ba6 <dlmstp_receive+0x92>
            if ((This_Station > 127) && (This_Station < 255)) {
    6c38:	4b0f      	ldr	r3, [pc, #60]	; (6c78 <dlmstp_receive+0x164>)
    6c3a:	781b      	ldrb	r3, [r3, #0]
    6c3c:	b2db      	uxtb	r3, r3
    6c3e:	2bff      	cmp	r3, #255	; 0xff
    6c40:	d0d5      	beq.n	6bee <dlmstp_receive+0xda>
                MSTP_Slave_Node_FSM();
    6c42:	4b10      	ldr	r3, [pc, #64]	; (6c84 <dlmstp_receive+0x170>)
    6c44:	4798      	blx	r3
    6c46:	e7ae      	b.n	6ba6 <dlmstp_receive+0x92>
    uint16_t pdu_len = 0; /* return value */
    6c48:	2000      	movs	r0, #0
    6c4a:	e7c1      	b.n	6bd0 <dlmstp_receive+0xbc>
    6c4c:	20000ce4 	.word	0x20000ce4
    6c50:	0000b255 	.word	0x0000b255
    6c54:	20000cec 	.word	0x20000cec
    6c58:	00005ab5 	.word	0x00005ab5
    6c5c:	0000b261 	.word	0x0000b261
    6c60:	2000134c 	.word	0x2000134c
    6c64:	20001354 	.word	0x20001354
    6c68:	20001350 	.word	0x20001350
    6c6c:	20000cd8 	.word	0x20000cd8
    6c70:	2000135c 	.word	0x2000135c
    6c74:	20000ce8 	.word	0x20000ce8
    6c78:	2000135d 	.word	0x2000135d
    6c7c:	000062cd 	.word	0x000062cd
    6c80:	0000b1d5 	.word	0x0000b1d5
    6c84:	00006061 	.word	0x00006061

00006c88 <dlmstp_set_mac_address>:

void dlmstp_set_mac_address(uint8_t mac_address)
{
    /* Master Nodes can only have address 0-127 */
    /* Slave Nodes can only have address 0-254 */
    if (mac_address < 255) {
    6c88:	28ff      	cmp	r0, #255	; 0xff
    6c8a:	d001      	beq.n	6c90 <dlmstp_set_mac_address+0x8>
        This_Station = mac_address;
    6c8c:	4b01      	ldr	r3, [pc, #4]	; (6c94 <dlmstp_set_mac_address+0xc>)
    6c8e:	7018      	strb	r0, [r3, #0]
    }

    return;
}
    6c90:	4770      	bx	lr
    6c92:	46c0      	nop			; (mov r8, r8)
    6c94:	2000135d 	.word	0x2000135d

00006c98 <dlmstp_mac_address>:

uint8_t dlmstp_mac_address(void)
{
    return This_Station;
    6c98:	4b01      	ldr	r3, [pc, #4]	; (6ca0 <dlmstp_mac_address+0x8>)
    6c9a:	7818      	ldrb	r0, [r3, #0]
    6c9c:	b2c0      	uxtb	r0, r0
}
    6c9e:	4770      	bx	lr
    6ca0:	2000135d 	.word	0x2000135d

00006ca4 <dlmstp_set_max_info_frames>:
/* nodes. This may be used to allocate more or less of the available link */
/* bandwidth to particular nodes. If Max_Info_Frames is not writable in a */
/* node, its value shall be 1. */
void dlmstp_set_max_info_frames(uint8_t max_info_frames)
{
    if ((max_info_frames >= 1) && (max_info_frames <= MSTP_PDU_PACKET_COUNT)) {
    6ca4:	1e43      	subs	r3, r0, #1
    6ca6:	b2db      	uxtb	r3, r3
    6ca8:	2b01      	cmp	r3, #1
    6caa:	d900      	bls.n	6cae <dlmstp_set_max_info_frames+0xa>
        Nmax_info_frames = max_info_frames;
    }

    return;
}
    6cac:	4770      	bx	lr
        Nmax_info_frames = max_info_frames;
    6cae:	4b01      	ldr	r3, [pc, #4]	; (6cb4 <dlmstp_set_max_info_frames+0x10>)
    6cb0:	7018      	strb	r0, [r3, #0]
    return;
    6cb2:	e7fb      	b.n	6cac <dlmstp_set_max_info_frames+0x8>
    6cb4:	2000024d 	.word	0x2000024d

00006cb8 <dlmstp_max_info_frames>:

uint8_t dlmstp_max_info_frames(void)
{
    return Nmax_info_frames;
    6cb8:	4b01      	ldr	r3, [pc, #4]	; (6cc0 <dlmstp_max_info_frames+0x8>)
    6cba:	7818      	ldrb	r0, [r3, #0]
    6cbc:	b2c0      	uxtb	r0, r0
}
    6cbe:	4770      	bx	lr
    6cc0:	2000024d 	.word	0x2000024d

00006cc4 <dlmstp_set_max_master>:
/* allowable address for master nodes. The value of Max_Master shall be */
/* less than or equal to 127. If Max_Master is not writable in a node, */
/* its value shall be 127. */
void dlmstp_set_max_master(uint8_t max_master)
{
    if (max_master <= 127) {
    6cc4:	b243      	sxtb	r3, r0
    6cc6:	2b00      	cmp	r3, #0
    6cc8:	db01      	blt.n	6cce <dlmstp_set_max_master+0xa>
        Nmax_master = max_master;
    6cca:	4b01      	ldr	r3, [pc, #4]	; (6cd0 <dlmstp_set_max_master+0xc>)
    6ccc:	7018      	strb	r0, [r3, #0]
    }

    return;
}
    6cce:	4770      	bx	lr
    6cd0:	2000024e 	.word	0x2000024e

00006cd4 <dlmstp_max_master>:

uint8_t dlmstp_max_master(void)
{
    return Nmax_master;
    6cd4:	4b01      	ldr	r3, [pc, #4]	; (6cdc <dlmstp_max_master+0x8>)
    6cd6:	7818      	ldrb	r0, [r3, #0]
    6cd8:	b2c0      	uxtb	r0, r0
}
    6cda:	4770      	bx	lr
    6cdc:	2000024e 	.word	0x2000024e

00006ce0 <dlmstp_get_my_address>:

void dlmstp_get_my_address(BACNET_ADDRESS *my_address)
{
    int i = 0; /* counter */

    my_address->mac_len = 1;
    6ce0:	2301      	movs	r3, #1
    6ce2:	7003      	strb	r3, [r0, #0]
    my_address->mac[0] = This_Station;
    6ce4:	4b07      	ldr	r3, [pc, #28]	; (6d04 <dlmstp_get_my_address+0x24>)
    6ce6:	781b      	ldrb	r3, [r3, #0]
    6ce8:	7043      	strb	r3, [r0, #1]
    my_address->net = 0; /* local only, no routing */
    6cea:	2300      	movs	r3, #0
    6cec:	8103      	strh	r3, [r0, #8]
    my_address->len = 0;
    6cee:	7283      	strb	r3, [r0, #10]
    for (i = 0; i < MAX_MAC_LEN; i++) {
    6cf0:	2300      	movs	r3, #0
    6cf2:	e003      	b.n	6cfc <dlmstp_get_my_address+0x1c>
        my_address->adr[i] = 0;
    6cf4:	18c2      	adds	r2, r0, r3
    6cf6:	2100      	movs	r1, #0
    6cf8:	72d1      	strb	r1, [r2, #11]
    for (i = 0; i < MAX_MAC_LEN; i++) {
    6cfa:	3301      	adds	r3, #1
    6cfc:	2b06      	cmp	r3, #6
    6cfe:	ddf9      	ble.n	6cf4 <dlmstp_get_my_address+0x14>
    }

    return;
}
    6d00:	4770      	bx	lr
    6d02:	46c0      	nop			; (mov r8, r8)
    6d04:	2000135d 	.word	0x2000135d

00006d08 <dlmstp_get_broadcast_address>:

void dlmstp_get_broadcast_address(BACNET_ADDRESS *dest)
{ /* destination address */
    int i = 0; /* counter */

    if (dest) {
    6d08:	2800      	cmp	r0, #0
    6d0a:	d00f      	beq.n	6d2c <dlmstp_get_broadcast_address+0x24>
        dest->mac_len = 1;
    6d0c:	2301      	movs	r3, #1
    6d0e:	7003      	strb	r3, [r0, #0]
        dest->mac[0] = MSTP_BROADCAST_ADDRESS;
    6d10:	33fe      	adds	r3, #254	; 0xfe
    6d12:	7043      	strb	r3, [r0, #1]
        dest->net = BACNET_BROADCAST_NETWORK;
    6d14:	3b01      	subs	r3, #1
    6d16:	3bff      	subs	r3, #255	; 0xff
    6d18:	8103      	strh	r3, [r0, #8]
        dest->len = 0; /* always zero when DNET is broadcast */
    6d1a:	2300      	movs	r3, #0
    6d1c:	7283      	strb	r3, [r0, #10]
        for (i = 0; i < MAX_MAC_LEN; i++) {
    6d1e:	e003      	b.n	6d28 <dlmstp_get_broadcast_address+0x20>
            dest->adr[i] = 0;
    6d20:	18c2      	adds	r2, r0, r3
    6d22:	2100      	movs	r1, #0
    6d24:	72d1      	strb	r1, [r2, #11]
        for (i = 0; i < MAX_MAC_LEN; i++) {
    6d26:	3301      	adds	r3, #1
    6d28:	2b06      	cmp	r3, #6
    6d2a:	ddf9      	ble.n	6d20 <dlmstp_get_broadcast_address+0x18>
        }
    }

    return;
}
    6d2c:	4770      	bx	lr

00006d2e <dlmstp_max_info_frames_limit>:
}

uint8_t dlmstp_max_info_frames_limit(void)
{
    return MSTP_PDU_PACKET_COUNT;
}
    6d2e:	2002      	movs	r0, #2
    6d30:	4770      	bx	lr

00006d32 <dlmstp_max_master_limit>:

uint8_t dlmstp_max_master_limit(void)
{
    return 127;
}
    6d32:	207f      	movs	r0, #127	; 0x7f
    6d34:	4770      	bx	lr
	...

00006d38 <iam_encode_apdu>:
int iam_encode_apdu(uint8_t *apdu,
    uint32_t device_id,
    unsigned max_apdu,
    int segmentation,
    uint16_t vendor_id)
{
    6d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d3a:	b083      	sub	sp, #12
    6d3c:	0007      	movs	r7, r0
    6d3e:	0016      	movs	r6, r2
    6d40:	9301      	str	r3, [sp, #4]
    6d42:	ab08      	add	r3, sp, #32
    6d44:	881d      	ldrh	r5, [r3, #0]
    int len = 0; /* length of each encoding */
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    6d46:	2800      	cmp	r0, #0
    6d48:	d01b      	beq.n	6d82 <iam_encode_apdu+0x4a>
        apdu[0] = PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST;
    6d4a:	2310      	movs	r3, #16
    6d4c:	7003      	strb	r3, [r0, #0]
        apdu[1] = SERVICE_UNCONFIRMED_I_AM; /* service choice */
    6d4e:	2300      	movs	r3, #0
    6d50:	7043      	strb	r3, [r0, #1]
        apdu_len = 2;
        len = encode_application_object_id(
    6d52:	3002      	adds	r0, #2
    6d54:	000a      	movs	r2, r1
    6d56:	2108      	movs	r1, #8
    6d58:	4b0b      	ldr	r3, [pc, #44]	; (6d88 <iam_encode_apdu+0x50>)
    6d5a:	4798      	blx	r3
            &apdu[apdu_len], OBJECT_DEVICE, device_id);
        apdu_len += len;
    6d5c:	1c84      	adds	r4, r0, #2
        len = encode_application_unsigned(&apdu[apdu_len], max_apdu);
    6d5e:	1938      	adds	r0, r7, r4
    6d60:	0032      	movs	r2, r6
    6d62:	2300      	movs	r3, #0
    6d64:	4e09      	ldr	r6, [pc, #36]	; (6d8c <iam_encode_apdu+0x54>)
    6d66:	47b0      	blx	r6
        apdu_len += len;
    6d68:	1824      	adds	r4, r4, r0
        len = encode_application_enumerated(
    6d6a:	1938      	adds	r0, r7, r4
    6d6c:	9901      	ldr	r1, [sp, #4]
    6d6e:	4b08      	ldr	r3, [pc, #32]	; (6d90 <iam_encode_apdu+0x58>)
    6d70:	4798      	blx	r3
            &apdu[apdu_len], (uint32_t)segmentation);
        apdu_len += len;
    6d72:	1824      	adds	r4, r4, r0
        len = encode_application_unsigned(&apdu[apdu_len], vendor_id);
    6d74:	1938      	adds	r0, r7, r4
    6d76:	002a      	movs	r2, r5
    6d78:	2300      	movs	r3, #0
    6d7a:	47b0      	blx	r6
        apdu_len += len;
    6d7c:	1820      	adds	r0, r4, r0
    }

    return apdu_len;
}
    6d7e:	b003      	add	sp, #12
    6d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    6d82:	2000      	movs	r0, #0
    return apdu_len;
    6d84:	e7fb      	b.n	6d7e <iam_encode_apdu+0x46>
    6d86:	46c0      	nop			; (mov r8, r8)
    6d88:	0000316d 	.word	0x0000316d
    6d8c:	000035e1 	.word	0x000035e1
    6d90:	000036f1 	.word	0x000036f1

00006d94 <ihave_encode_apdu>:
#include "bacnet/ihave.h"

/** @file ihave.c  Encode/Decode I-Have service */

int ihave_encode_apdu(uint8_t *apdu, BACNET_I_HAVE_DATA *data)
{
    6d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d96:	0005      	movs	r5, r0
    6d98:	000e      	movs	r6, r1
    int len = 0; /* length of each encoding */
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu && data) {
    6d9a:	2800      	cmp	r0, #0
    6d9c:	d017      	beq.n	6dce <ihave_encode_apdu+0x3a>
    6d9e:	2900      	cmp	r1, #0
    6da0:	d017      	beq.n	6dd2 <ihave_encode_apdu+0x3e>
        apdu[0] = PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST;
    6da2:	2310      	movs	r3, #16
    6da4:	7003      	strb	r3, [r0, #0]
        apdu[1] = SERVICE_UNCONFIRMED_I_HAVE;
    6da6:	3b0f      	subs	r3, #15
    6da8:	7043      	strb	r3, [r0, #1]
        apdu_len = 2;
        /* deviceIdentifier */
        len = encode_application_object_id(&apdu[apdu_len],
    6daa:	3002      	adds	r0, #2
    6dac:	8809      	ldrh	r1, [r1, #0]
    6dae:	6872      	ldr	r2, [r6, #4]
    6db0:	4f09      	ldr	r7, [pc, #36]	; (6dd8 <ihave_encode_apdu+0x44>)
    6db2:	47b8      	blx	r7
            data->device_id.type, data->device_id.instance);
        apdu_len += len;
    6db4:	1c84      	adds	r4, r0, #2
        /* objectIdentifier */
        len = encode_application_object_id(&apdu[apdu_len],
    6db6:	1928      	adds	r0, r5, r4
    6db8:	8931      	ldrh	r1, [r6, #8]
    6dba:	68f2      	ldr	r2, [r6, #12]
    6dbc:	47b8      	blx	r7
            data->object_id.type, data->object_id.instance);
        apdu_len += len;
    6dbe:	1824      	adds	r4, r4, r0
        /* objectName */
        len = encode_application_character_string(
    6dc0:	1928      	adds	r0, r5, r4
    6dc2:	0031      	movs	r1, r6
    6dc4:	3110      	adds	r1, #16
    6dc6:	4b05      	ldr	r3, [pc, #20]	; (6ddc <ihave_encode_apdu+0x48>)
    6dc8:	4798      	blx	r3
            &apdu[apdu_len], &data->object_name);
        apdu_len += len;
    6dca:	1820      	adds	r0, r4, r0
    }

    return apdu_len;
}
    6dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    6dce:	2000      	movs	r0, #0
    6dd0:	e7fc      	b.n	6dcc <ihave_encode_apdu+0x38>
    6dd2:	2000      	movs	r0, #0
    return apdu_len;
    6dd4:	e7fa      	b.n	6dcc <ihave_encode_apdu+0x38>
    6dd6:	46c0      	nop			; (mov r8, r8)
    6dd8:	0000316d 	.word	0x0000316d
    6ddc:	000032dd 	.word	0x000032dd

00006de0 <uartfiber_init>:
/************************************************************************/
static struct usart_module uartfiber_inst;


void uartfiber_init(void)
{
    6de0:	b510      	push	{r4, lr}
    6de2:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6de4:	2380      	movs	r3, #128	; 0x80
    6de6:	05db      	lsls	r3, r3, #23
    6de8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6dea:	2300      	movs	r3, #0
    6dec:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    6dee:	22ff      	movs	r2, #255	; 0xff
    6df0:	4669      	mov	r1, sp
    6df2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    6df4:	2200      	movs	r2, #0
    6df6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6df8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    6dfa:	2196      	movs	r1, #150	; 0x96
    6dfc:	0189      	lsls	r1, r1, #6
    6dfe:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    6e00:	2101      	movs	r1, #1
    6e02:	2024      	movs	r0, #36	; 0x24
    6e04:	466c      	mov	r4, sp
    6e06:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    6e08:	3001      	adds	r0, #1
    6e0a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    6e0c:	3125      	adds	r1, #37	; 0x25
    6e0e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    6e10:	3101      	adds	r1, #1
    6e12:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    6e14:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6e16:	3105      	adds	r1, #5
    6e18:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    6e1a:	3101      	adds	r1, #1
    6e1c:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6e1e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6e20:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6e22:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6e24:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6e26:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6e28:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    6e2a:	2313      	movs	r3, #19
    6e2c:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6e2e:	7762      	strb	r2, [r4, #29]
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    
    config_usart.baudrate    = UART_FIBER_BAUD;
    config_usart.mux_setting = UART_FIBER_PINMUX;
    6e30:	2390      	movs	r3, #144	; 0x90
    6e32:	035b      	lsls	r3, r3, #13
    6e34:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX_FIBER;
    6e36:	4b12      	ldr	r3, [pc, #72]	; (6e80 <uartfiber_init+0xa0>)
    6e38:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX_FIBER;
    6e3a:	4b12      	ldr	r3, [pc, #72]	; (6e84 <uartfiber_init+0xa4>)
    6e3c:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    6e3e:	2301      	movs	r3, #1
    6e40:	425b      	negs	r3, r3
    6e42:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    6e44:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.generator_source = UART_FIBER_CLK;
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    
    while (usart_init(&uartfiber_inst, UART_FIBER, &config_usart) != STATUS_OK);
    6e46:	466a      	mov	r2, sp
    6e48:	490f      	ldr	r1, [pc, #60]	; (6e88 <uartfiber_init+0xa8>)
    6e4a:	4810      	ldr	r0, [pc, #64]	; (6e8c <uartfiber_init+0xac>)
    6e4c:	4b10      	ldr	r3, [pc, #64]	; (6e90 <uartfiber_init+0xb0>)
    6e4e:	4798      	blx	r3
    6e50:	2800      	cmp	r0, #0
    6e52:	d1f8      	bne.n	6e46 <uartfiber_init+0x66>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6e54:	4b0d      	ldr	r3, [pc, #52]	; (6e8c <uartfiber_init+0xac>)
    6e56:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6e58:	0020      	movs	r0, r4
    6e5a:	4b0e      	ldr	r3, [pc, #56]	; (6e94 <uartfiber_init+0xb4>)
    6e5c:	4798      	blx	r3
    6e5e:	231f      	movs	r3, #31
    6e60:	4018      	ands	r0, r3
    6e62:	3b1e      	subs	r3, #30
    6e64:	4083      	lsls	r3, r0
    6e66:	4a0c      	ldr	r2, [pc, #48]	; (6e98 <uartfiber_init+0xb8>)
    6e68:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6e6a:	4b08      	ldr	r3, [pc, #32]	; (6e8c <uartfiber_init+0xac>)
    6e6c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    6e6e:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    6e70:	2b00      	cmp	r3, #0
    6e72:	d1fa      	bne.n	6e6a <uartfiber_init+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6e74:	6823      	ldr	r3, [r4, #0]
    6e76:	2202      	movs	r2, #2
    6e78:	4313      	orrs	r3, r2
    6e7a:	6023      	str	r3, [r4, #0]
    
    // enable the uart
    usart_enable(&uartfiber_inst);
}
    6e7c:	b010      	add	sp, #64	; 0x40
    6e7e:	bd10      	pop	{r4, pc}
    6e80:	00040003 	.word	0x00040003
    6e84:	00050003 	.word	0x00050003
    6e88:	42000800 	.word	0x42000800
    6e8c:	2000136c 	.word	0x2000136c
    6e90:	0000b9e5 	.word	0x0000b9e5
    6e94:	0000bf05 	.word	0x0000bf05
    6e98:	e000e100 	.word	0xe000e100

00006e9c <uartfiber_get_169_rssi>:
{
    usart_disable(&uartfiber_inst);
}

status_code_genare_t uartfiber_get_169_rssi(rssi_t* new_rssi)
{
    6e9c:	b570      	push	{r4, r5, r6, lr}
    6e9e:	b082      	sub	sp, #8
    6ea0:	0006      	movs	r6, r0
        uint8_t f_bytes[RSSI_SIZE];
    }float_bytes;
    
    status_code_genare_t ret_val = 0;
    
    usart_write_wait(&uartfiber_inst, 'A');
    6ea2:	4d08      	ldr	r5, [pc, #32]	; (6ec4 <uartfiber_get_169_rssi+0x28>)
    6ea4:	2141      	movs	r1, #65	; 0x41
    6ea6:	0028      	movs	r0, r5
    6ea8:	4b07      	ldr	r3, [pc, #28]	; (6ec8 <uartfiber_get_169_rssi+0x2c>)
    6eaa:	4798      	blx	r3
    ret_val = usart_read_buffer_wait(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE);
    6eac:	ac01      	add	r4, sp, #4
    6eae:	2202      	movs	r2, #2
    6eb0:	0021      	movs	r1, r4
    6eb2:	0028      	movs	r0, r5
    6eb4:	4b05      	ldr	r3, [pc, #20]	; (6ecc <uartfiber_get_169_rssi+0x30>)
    6eb6:	4798      	blx	r3
    
    *new_rssi = float_bytes.f_val;
    6eb8:	8823      	ldrh	r3, [r4, #0]
    6eba:	b21b      	sxth	r3, r3
    6ebc:	8033      	strh	r3, [r6, #0]
    
    return ret_val;
}
    6ebe:	b002      	add	sp, #8
    6ec0:	bd70      	pop	{r4, r5, r6, pc}
    6ec2:	46c0      	nop			; (mov r8, r8)
    6ec4:	2000136c 	.word	0x2000136c
    6ec8:	0000bb29 	.word	0x0000bb29
    6ecc:	0000bbbd 	.word	0x0000bbbd

00006ed0 <uartfiber_get_915_rssi>:

status_code_genare_t uartfiber_get_915_rssi(rssi_t* new_rssi)
{
    6ed0:	b570      	push	{r4, r5, r6, lr}
    6ed2:	b082      	sub	sp, #8
    6ed4:	0006      	movs	r6, r0
        uint8_t f_bytes[RSSI_SIZE];
    }float_bytes;
     
    status_code_genare_t ret_val = 0;
    
    usart_write_wait(&uartfiber_inst, 'M');
    6ed6:	4d08      	ldr	r5, [pc, #32]	; (6ef8 <uartfiber_get_915_rssi+0x28>)
    6ed8:	214d      	movs	r1, #77	; 0x4d
    6eda:	0028      	movs	r0, r5
    6edc:	4b07      	ldr	r3, [pc, #28]	; (6efc <uartfiber_get_915_rssi+0x2c>)
    6ede:	4798      	blx	r3
    ret_val = usart_read_buffer_wait(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE);
    6ee0:	ac01      	add	r4, sp, #4
    6ee2:	2202      	movs	r2, #2
    6ee4:	0021      	movs	r1, r4
    6ee6:	0028      	movs	r0, r5
    6ee8:	4b05      	ldr	r3, [pc, #20]	; (6f00 <uartfiber_get_915_rssi+0x30>)
    6eea:	4798      	blx	r3
    
    *new_rssi = float_bytes.f_val;
    6eec:	8823      	ldrh	r3, [r4, #0]
    6eee:	b21b      	sxth	r3, r3
    6ef0:	8033      	strh	r3, [r6, #0]
    
    return ret_val;
}
    6ef2:	b002      	add	sp, #8
    6ef4:	bd70      	pop	{r4, r5, r6, pc}
    6ef6:	46c0      	nop			; (mov r8, r8)
    6ef8:	2000136c 	.word	0x2000136c
    6efc:	0000bb29 	.word	0x0000bb29
    6f00:	0000bbbd 	.word	0x0000bbbd

00006f04 <uartfiber_get_245_rssi>:

status_code_genare_t uartfiber_get_245_rssi(rssi_t* new_rssi)
{
    6f04:	b570      	push	{r4, r5, r6, lr}
    6f06:	b082      	sub	sp, #8
    6f08:	0006      	movs	r6, r0
        uint8_t f_bytes[RSSI_SIZE];
    }float_bytes;
     
    status_code_genare_t ret_val = 0;
    
    usart_write_wait(&uartfiber_inst, 'R');
    6f0a:	4d08      	ldr	r5, [pc, #32]	; (6f2c <uartfiber_get_245_rssi+0x28>)
    6f0c:	2152      	movs	r1, #82	; 0x52
    6f0e:	0028      	movs	r0, r5
    6f10:	4b07      	ldr	r3, [pc, #28]	; (6f30 <uartfiber_get_245_rssi+0x2c>)
    6f12:	4798      	blx	r3
    ret_val = usart_read_buffer_wait(&uartfiber_inst, float_bytes.f_bytes, RSSI_SIZE);
    6f14:	ac01      	add	r4, sp, #4
    6f16:	2202      	movs	r2, #2
    6f18:	0021      	movs	r1, r4
    6f1a:	0028      	movs	r0, r5
    6f1c:	4b05      	ldr	r3, [pc, #20]	; (6f34 <uartfiber_get_245_rssi+0x30>)
    6f1e:	4798      	blx	r3
    
    *new_rssi = float_bytes.f_val;
    6f20:	8823      	ldrh	r3, [r4, #0]
    6f22:	b21b      	sxth	r3, r3
    6f24:	8033      	strh	r3, [r6, #0]
    
    return ret_val;
}
    6f26:	b002      	add	sp, #8
    6f28:	bd70      	pop	{r4, r5, r6, pc}
    6f2a:	46c0      	nop			; (mov r8, r8)
    6f2c:	2000136c 	.word	0x2000136c
    6f30:	0000bb29 	.word	0x0000bb29
    6f34:	0000bbbd 	.word	0x0000bbbd

00006f38 <uartib_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes the UART SERCOM for inter-board communication
 */
void uartib_init(void)
{
    6f38:	b510      	push	{r4, lr}
    6f3a:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    6f3c:	2380      	movs	r3, #128	; 0x80
    6f3e:	05db      	lsls	r3, r3, #23
    6f40:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6f42:	2300      	movs	r3, #0
    6f44:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    6f46:	22ff      	movs	r2, #255	; 0xff
    6f48:	4669      	mov	r1, sp
    6f4a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    6f4c:	2200      	movs	r2, #0
    6f4e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6f50:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    6f52:	2196      	movs	r1, #150	; 0x96
    6f54:	0189      	lsls	r1, r1, #6
    6f56:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    6f58:	2101      	movs	r1, #1
    6f5a:	2024      	movs	r0, #36	; 0x24
    6f5c:	466c      	mov	r4, sp
    6f5e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    6f60:	3001      	adds	r0, #1
    6f62:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    6f64:	3125      	adds	r1, #37	; 0x25
    6f66:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    6f68:	3101      	adds	r1, #1
    6f6a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    6f6c:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    6f6e:	3105      	adds	r1, #5
    6f70:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    6f72:	3101      	adds	r1, #1
    6f74:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6f76:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6f78:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    6f7a:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    6f7c:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    6f7e:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    6f80:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    6f82:	2313      	movs	r3, #19
    6f84:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    6f86:	7762      	strb	r2, [r4, #29]
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    
    config_usart.baudrate    = UART_IB_BAUD;
    config_usart.mux_setting = UART_IB_PINMUX;
    6f88:	2390      	movs	r3, #144	; 0x90
    6f8a:	035b      	lsls	r3, r3, #13
    6f8c:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX_IB;
    6f8e:	4b12      	ldr	r3, [pc, #72]	; (6fd8 <uartib_init+0xa0>)
    6f90:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX_IB;
    6f92:	4b12      	ldr	r3, [pc, #72]	; (6fdc <uartib_init+0xa4>)
    6f94:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    6f96:	2301      	movs	r3, #1
    6f98:	425b      	negs	r3, r3
    6f9a:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    6f9c:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.generator_source = UART_IB_CLK;
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    
    while (usart_init(&uartib_inst, UART_IB, &config_usart) != STATUS_OK);
    6f9e:	466a      	mov	r2, sp
    6fa0:	490f      	ldr	r1, [pc, #60]	; (6fe0 <uartib_init+0xa8>)
    6fa2:	4810      	ldr	r0, [pc, #64]	; (6fe4 <uartib_init+0xac>)
    6fa4:	4b10      	ldr	r3, [pc, #64]	; (6fe8 <uartib_init+0xb0>)
    6fa6:	4798      	blx	r3
    6fa8:	2800      	cmp	r0, #0
    6faa:	d1f8      	bne.n	6f9e <uartib_init+0x66>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6fac:	4b0d      	ldr	r3, [pc, #52]	; (6fe4 <uartib_init+0xac>)
    6fae:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6fb0:	0020      	movs	r0, r4
    6fb2:	4b0e      	ldr	r3, [pc, #56]	; (6fec <uartib_init+0xb4>)
    6fb4:	4798      	blx	r3
    6fb6:	231f      	movs	r3, #31
    6fb8:	4018      	ands	r0, r3
    6fba:	3b1e      	subs	r3, #30
    6fbc:	4083      	lsls	r3, r0
    6fbe:	4a0c      	ldr	r2, [pc, #48]	; (6ff0 <uartib_init+0xb8>)
    6fc0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6fc2:	4b08      	ldr	r3, [pc, #32]	; (6fe4 <uartib_init+0xac>)
    6fc4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    6fc6:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    6fc8:	2b00      	cmp	r3, #0
    6fca:	d1fa      	bne.n	6fc2 <uartib_init+0x8a>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6fcc:	6823      	ldr	r3, [r4, #0]
    6fce:	2202      	movs	r2, #2
    6fd0:	4313      	orrs	r3, r2
    6fd2:	6023      	str	r3, [r4, #0]
    
    // enable the uart
    usart_enable(&uartib_inst);
}
    6fd4:	b010      	add	sp, #64	; 0x40
    6fd6:	bd10      	pop	{r4, pc}
    6fd8:	00080003 	.word	0x00080003
    6fdc:	00090003 	.word	0x00090003
    6fe0:	42001000 	.word	0x42001000
    6fe4:	200013a0 	.word	0x200013a0
    6fe8:	0000b9e5 	.word	0x0000b9e5
    6fec:	0000bf05 	.word	0x0000bf05
    6ff0:	e000e100 	.word	0xe000e100

00006ff4 <uartib_get_169_rssi>:
 * Return Values(s) : int16_t
 * Description      : Polls the receiver that is in the same box as the display
 *  controller. Gets the 169 MHz RSSI and returns it as a 2 byte int.
 */
status_code_genare_t uartib_get_169_rssi(rssi_t* new_rssi)
{
    6ff4:	b570      	push	{r4, r5, r6, lr}
    6ff6:	b082      	sub	sp, #8
    6ff8:	0006      	movs	r6, r0
        uint8_t f_bytes[RSSI_SIZE];
    }float_bytes;
    
    status_code_genare_t ret_val = 0;
    
    usart_write_wait(&uartib_inst, 'A');
    6ffa:	4d08      	ldr	r5, [pc, #32]	; (701c <uartib_get_169_rssi+0x28>)
    6ffc:	2141      	movs	r1, #65	; 0x41
    6ffe:	0028      	movs	r0, r5
    7000:	4b07      	ldr	r3, [pc, #28]	; (7020 <uartib_get_169_rssi+0x2c>)
    7002:	4798      	blx	r3
    ret_val = usart_read_buffer_wait(&uartib_inst, float_bytes.f_bytes, RSSI_SIZE);
    7004:	ac01      	add	r4, sp, #4
    7006:	2202      	movs	r2, #2
    7008:	0021      	movs	r1, r4
    700a:	0028      	movs	r0, r5
    700c:	4b05      	ldr	r3, [pc, #20]	; (7024 <uartib_get_169_rssi+0x30>)
    700e:	4798      	blx	r3
    
    *new_rssi = float_bytes.f_val;
    7010:	8823      	ldrh	r3, [r4, #0]
    7012:	b21b      	sxth	r3, r3
    7014:	8033      	strh	r3, [r6, #0]
    
    return ret_val;
}
    7016:	b002      	add	sp, #8
    7018:	bd70      	pop	{r4, r5, r6, pc}
    701a:	46c0      	nop			; (mov r8, r8)
    701c:	200013a0 	.word	0x200013a0
    7020:	0000bb29 	.word	0x0000bb29
    7024:	0000bbbd 	.word	0x0000bbbd

00007028 <uartib_get_915_rssi>:
 * Return Values(s) : int16_t
 * Description      : Polls the receiver that is in the same box as the display
 *  controller. Gets the 915 MHz RSSI and returns it as a 2 byte int.
 */
status_code_genare_t uartib_get_915_rssi(rssi_t* new_rssi)
{
    7028:	b570      	push	{r4, r5, r6, lr}
    702a:	b082      	sub	sp, #8
    702c:	0006      	movs	r6, r0
        uint8_t f_bytes[RSSI_SIZE];
    }float_bytes;
    
    status_code_genare_t ret_val = 0;
    
    usart_write_wait(&uartib_inst, 'M');
    702e:	4d08      	ldr	r5, [pc, #32]	; (7050 <uartib_get_915_rssi+0x28>)
    7030:	214d      	movs	r1, #77	; 0x4d
    7032:	0028      	movs	r0, r5
    7034:	4b07      	ldr	r3, [pc, #28]	; (7054 <uartib_get_915_rssi+0x2c>)
    7036:	4798      	blx	r3
    ret_val = usart_read_buffer_wait(&uartib_inst, float_bytes.f_bytes, RSSI_SIZE);
    7038:	ac01      	add	r4, sp, #4
    703a:	2202      	movs	r2, #2
    703c:	0021      	movs	r1, r4
    703e:	0028      	movs	r0, r5
    7040:	4b05      	ldr	r3, [pc, #20]	; (7058 <uartib_get_915_rssi+0x30>)
    7042:	4798      	blx	r3
    
    *new_rssi = float_bytes.f_val;
    7044:	8823      	ldrh	r3, [r4, #0]
    7046:	b21b      	sxth	r3, r3
    7048:	8033      	strh	r3, [r6, #0]
    
    return ret_val;
}
    704a:	b002      	add	sp, #8
    704c:	bd70      	pop	{r4, r5, r6, pc}
    704e:	46c0      	nop			; (mov r8, r8)
    7050:	200013a0 	.word	0x200013a0
    7054:	0000bb29 	.word	0x0000bb29
    7058:	0000bbbd 	.word	0x0000bbbd

0000705c <uartib_get_245_rssi>:
 * Return Values(s) : int16_t
 * Description      : Polls the receiver that is in the same box as the display
 *  controller. Gets the 2.45 GHz RSSI and returns it as a 2 byte int.
 */
status_code_genare_t uartib_get_245_rssi(rssi_t* new_rssi)
{
    705c:	b570      	push	{r4, r5, r6, lr}
    705e:	b082      	sub	sp, #8
    7060:	0006      	movs	r6, r0
        uint8_t f_bytes[RSSI_SIZE];
    }float_bytes;
    
    status_code_genare_t ret_val = 0;
    
    usart_write_wait(&uartib_inst, 'R');
    7062:	4d08      	ldr	r5, [pc, #32]	; (7084 <uartib_get_245_rssi+0x28>)
    7064:	2152      	movs	r1, #82	; 0x52
    7066:	0028      	movs	r0, r5
    7068:	4b07      	ldr	r3, [pc, #28]	; (7088 <uartib_get_245_rssi+0x2c>)
    706a:	4798      	blx	r3
    ret_val = usart_read_buffer_wait(&uartib_inst, float_bytes.f_bytes, RSSI_SIZE);
    706c:	ac01      	add	r4, sp, #4
    706e:	2202      	movs	r2, #2
    7070:	0021      	movs	r1, r4
    7072:	0028      	movs	r0, r5
    7074:	4b05      	ldr	r3, [pc, #20]	; (708c <uartib_get_245_rssi+0x30>)
    7076:	4798      	blx	r3
    
    *new_rssi = float_bytes.f_val;
    7078:	8823      	ldrh	r3, [r4, #0]
    707a:	b21b      	sxth	r3, r3
    707c:	8033      	strh	r3, [r6, #0]
    
    return ret_val;
}
    707e:	b002      	add	sp, #8
    7080:	bd70      	pop	{r4, r5, r6, pc}
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	200013a0 	.word	0x200013a0
    7088:	0000bb29 	.word	0x0000bb29
    708c:	0000bbbd 	.word	0x0000bbbd

00007090 <Ft_Gpu_Copro_SendCmd>:
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4));             
}


ft_void_t Ft_Gpu_Copro_SendCmd(Ft_Gpu_Hal_Context_t *phost,ft_uint32_t cmd)
{ 
    7090:	b510      	push	{r4, lr}
   Ft_Gpu_Hal_Transfer32(phost,cmd);
    7092:	4b01      	ldr	r3, [pc, #4]	; (7098 <Ft_Gpu_Copro_SendCmd+0x8>)
    7094:	4798      	blx	r3
}
    7096:	bd10      	pop	{r4, pc}
    7098:	00007571 	.word	0x00007571

0000709c <Ft_Gpu_CoCmd_SendStr>:


ft_void_t Ft_Gpu_CoCmd_SendStr(Ft_Gpu_Hal_Context_t *phost,const ft_char8_t *s)
{
    709c:	b510      	push	{r4, lr}
    Ft_Gpu_Hal_TransferString(phost,s);
    709e:	4b01      	ldr	r3, [pc, #4]	; (70a4 <Ft_Gpu_CoCmd_SendStr+0x8>)
    70a0:	4798      	blx	r3
}
    70a2:	bd10      	pop	{r4, pc}
    70a4:	00007501 	.word	0x00007501

000070a8 <Ft_Gpu_CoCmd_StartFunc>:


ft_void_t Ft_Gpu_CoCmd_StartFunc(Ft_Gpu_Hal_Context_t *phost,ft_uint16_t count)
{
    70a8:	b570      	push	{r4, r5, r6, lr}
    70aa:	0004      	movs	r4, r0
    70ac:	000d      	movs	r5, r1
    // wait until the copro circular buffer has enough space for this command
  	Ft_Gpu_Hal_CheckCmdBuffer(phost,count);
    70ae:	4b04      	ldr	r3, [pc, #16]	; (70c0 <Ft_Gpu_CoCmd_StartFunc+0x18>)
    70b0:	4798      	blx	r3
    // start the transfer if it does
    Ft_Gpu_Hal_StartCmdTransfer(phost,FT_GPU_WRITE,count);
    70b2:	002a      	movs	r2, r5
    70b4:	2101      	movs	r1, #1
    70b6:	0020      	movs	r0, r4
    70b8:	4b02      	ldr	r3, [pc, #8]	; (70c4 <Ft_Gpu_CoCmd_StartFunc+0x1c>)
    70ba:	4798      	blx	r3
}
    70bc:	bd70      	pop	{r4, r5, r6, pc}
    70be:	46c0      	nop			; (mov r8, r8)
    70c0:	000076e1 	.word	0x000076e1
    70c4:	000074a9 	.word	0x000074a9

000070c8 <Ft_Gpu_CoCmd_EndFunc>:


ft_void_t Ft_Gpu_CoCmd_EndFunc(Ft_Gpu_Hal_Context_t *phost,ft_uint16_t count)
{
    70c8:	b570      	push	{r4, r5, r6, lr}
    70ca:	0004      	movs	r4, r0
    70cc:	000d      	movs	r5, r1

    Ft_Gpu_Hal_EndTransfer(phost);
    70ce:	4b03      	ldr	r3, [pc, #12]	; (70dc <Ft_Gpu_CoCmd_EndFunc+0x14>)
    70d0:	4798      	blx	r3
    Ft_Gpu_Hal_Updatecmdfifo(phost,count);
    70d2:	0029      	movs	r1, r5
    70d4:	0020      	movs	r0, r4
    70d6:	4b02      	ldr	r3, [pc, #8]	; (70e0 <Ft_Gpu_CoCmd_EndFunc+0x18>)
    70d8:	4798      	blx	r3

}
    70da:	bd70      	pop	{r4, r5, r6, pc}
    70dc:	000075a5 	.word	0x000075a5
    70e0:	00007695 	.word	0x00007695

000070e4 <Ft_Gpu_CoCmd_Text>:
{
    70e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    70e6:	46d6      	mov	lr, sl
    70e8:	464f      	mov	r7, r9
    70ea:	b580      	push	{r7, lr}
    70ec:	b083      	sub	sp, #12
    70ee:	0005      	movs	r5, r0
    70f0:	468a      	mov	sl, r1
    70f2:	4691      	mov	r9, r2
    70f4:	001f      	movs	r7, r3
    70f6:	ab0a      	add	r3, sp, #40	; 0x28
    70f8:	881e      	ldrh	r6, [r3, #0]
  ft_uint16_t len = strlen((const char*)s);
    70fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    70fc:	4b15      	ldr	r3, [pc, #84]	; (7154 <Ft_Gpu_CoCmd_Text+0x70>)
    70fe:	4798      	blx	r3
    7100:	b280      	uxth	r0, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*3 + len + 1);
    7102:	300d      	adds	r0, #13
    7104:	b284      	uxth	r4, r0
    7106:	0021      	movs	r1, r4
    7108:	0028      	movs	r0, r5
    710a:	4b13      	ldr	r3, [pc, #76]	; (7158 <Ft_Gpu_CoCmd_Text+0x74>)
    710c:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_TEXT);
    710e:	21f4      	movs	r1, #244	; 0xf4
    7110:	4249      	negs	r1, r1
    7112:	9501      	str	r5, [sp, #4]
    7114:	0028      	movs	r0, r5
    7116:	4d11      	ldr	r5, [pc, #68]	; (715c <Ft_Gpu_CoCmd_Text+0x78>)
    7118:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    711a:	464b      	mov	r3, r9
    711c:	0419      	lsls	r1, r3, #16
    711e:	4653      	mov	r3, sl
    7120:	041b      	lsls	r3, r3, #16
    7122:	0c1b      	lsrs	r3, r3, #16
    7124:	4319      	orrs	r1, r3
    7126:	9801      	ldr	r0, [sp, #4]
    7128:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    712a:	0436      	lsls	r6, r6, #16
    712c:	0439      	lsls	r1, r7, #16
    712e:	0c09      	lsrs	r1, r1, #16
    7130:	4331      	orrs	r1, r6
    7132:	9e01      	ldr	r6, [sp, #4]
    7134:	0030      	movs	r0, r6
    7136:	47a8      	blx	r5
  Ft_Gpu_CoCmd_SendStr(phost, s);
    7138:	990b      	ldr	r1, [sp, #44]	; 0x2c
    713a:	0030      	movs	r0, r6
    713c:	4b08      	ldr	r3, [pc, #32]	; (7160 <Ft_Gpu_CoCmd_Text+0x7c>)
    713e:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*3 + len + 1));
    7140:	0021      	movs	r1, r4
    7142:	0030      	movs	r0, r6
    7144:	4b07      	ldr	r3, [pc, #28]	; (7164 <Ft_Gpu_CoCmd_Text+0x80>)
    7146:	4798      	blx	r3
}
    7148:	b003      	add	sp, #12
    714a:	bc0c      	pop	{r2, r3}
    714c:	4691      	mov	r9, r2
    714e:	469a      	mov	sl, r3
    7150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7152:	46c0      	nop			; (mov r8, r8)
    7154:	0000dbf1 	.word	0x0000dbf1
    7158:	000070a9 	.word	0x000070a9
    715c:	00007091 	.word	0x00007091
    7160:	0000709d 	.word	0x0000709d
    7164:	000070c9 	.word	0x000070c9

00007168 <Ft_Gpu_CoCmd_Number>:
{
    7168:	b5f0      	push	{r4, r5, r6, r7, lr}
    716a:	46c6      	mov	lr, r8
    716c:	b500      	push	{lr}
    716e:	b082      	sub	sp, #8
    7170:	0007      	movs	r7, r0
    7172:	000c      	movs	r4, r1
    7174:	4690      	mov	r8, r2
    7176:	001e      	movs	r6, r3
    7178:	ab08      	add	r3, sp, #32
    717a:	881d      	ldrh	r5, [r3, #0]
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*4);  
    717c:	2110      	movs	r1, #16
    717e:	4b10      	ldr	r3, [pc, #64]	; (71c0 <Ft_Gpu_CoCmd_Number+0x58>)
    7180:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_NUMBER);
    7182:	21d2      	movs	r1, #210	; 0xd2
    7184:	4249      	negs	r1, r1
    7186:	9701      	str	r7, [sp, #4]
    7188:	0038      	movs	r0, r7
    718a:	4f0e      	ldr	r7, [pc, #56]	; (71c4 <Ft_Gpu_CoCmd_Number+0x5c>)
    718c:	47b8      	blx	r7
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    718e:	4643      	mov	r3, r8
    7190:	0419      	lsls	r1, r3, #16
    7192:	0423      	lsls	r3, r4, #16
    7194:	0c1b      	lsrs	r3, r3, #16
    7196:	4319      	orrs	r1, r3
    7198:	9c01      	ldr	r4, [sp, #4]
    719a:	0020      	movs	r0, r4
    719c:	47b8      	blx	r7
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    719e:	042d      	lsls	r5, r5, #16
    71a0:	0431      	lsls	r1, r6, #16
    71a2:	0c09      	lsrs	r1, r1, #16
    71a4:	4329      	orrs	r1, r5
    71a6:	0020      	movs	r0, r4
    71a8:	47b8      	blx	r7
  Ft_Gpu_Copro_SendCmd(phost, n);
    71aa:	9909      	ldr	r1, [sp, #36]	; 0x24
    71ac:	0020      	movs	r0, r4
    71ae:	47b8      	blx	r7
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4));  
    71b0:	2110      	movs	r1, #16
    71b2:	0020      	movs	r0, r4
    71b4:	4b04      	ldr	r3, [pc, #16]	; (71c8 <Ft_Gpu_CoCmd_Number+0x60>)
    71b6:	4798      	blx	r3
}
    71b8:	b002      	add	sp, #8
    71ba:	bc04      	pop	{r2}
    71bc:	4690      	mov	r8, r2
    71be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71c0:	000070a9 	.word	0x000070a9
    71c4:	00007091 	.word	0x00007091
    71c8:	000070c9 	.word	0x000070c9

000071cc <Ft_Gpu_CoCmd_Swap>:
{
    71cc:	b510      	push	{r4, lr}
    71ce:	0004      	movs	r4, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*1);         
    71d0:	2104      	movs	r1, #4
    71d2:	4b06      	ldr	r3, [pc, #24]	; (71ec <Ft_Gpu_CoCmd_Swap+0x20>)
    71d4:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_SWAP);
    71d6:	21ff      	movs	r1, #255	; 0xff
    71d8:	4249      	negs	r1, r1
    71da:	0020      	movs	r0, r4
    71dc:	4b04      	ldr	r3, [pc, #16]	; (71f0 <Ft_Gpu_CoCmd_Swap+0x24>)
    71de:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*1));         
    71e0:	2104      	movs	r1, #4
    71e2:	0020      	movs	r0, r4
    71e4:	4b03      	ldr	r3, [pc, #12]	; (71f4 <Ft_Gpu_CoCmd_Swap+0x28>)
    71e6:	4798      	blx	r3
}
    71e8:	bd10      	pop	{r4, pc}
    71ea:	46c0      	nop			; (mov r8, r8)
    71ec:	000070a9 	.word	0x000070a9
    71f0:	00007091 	.word	0x00007091
    71f4:	000070c9 	.word	0x000070c9

000071f8 <Ft_Gpu_CoCmd_Button>:
{
    71f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71fa:	46de      	mov	lr, fp
    71fc:	4657      	mov	r7, sl
    71fe:	464e      	mov	r6, r9
    7200:	4645      	mov	r5, r8
    7202:	b5e0      	push	{r5, r6, r7, lr}
    7204:	b083      	sub	sp, #12
    7206:	0005      	movs	r5, r0
    7208:	468a      	mov	sl, r1
    720a:	4691      	mov	r9, r2
    720c:	469b      	mov	fp, r3
    720e:	ab0c      	add	r3, sp, #48	; 0x30
    7210:	2200      	movs	r2, #0
    7212:	5e9b      	ldrsh	r3, [r3, r2]
    7214:	4698      	mov	r8, r3
    7216:	ab0d      	add	r3, sp, #52	; 0x34
    7218:	2700      	movs	r7, #0
    721a:	5fdf      	ldrsh	r7, [r3, r7]
    721c:	ab0e      	add	r3, sp, #56	; 0x38
    721e:	881e      	ldrh	r6, [r3, #0]
  ft_uint16_t len = strlen((const char*)s);
    7220:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7222:	4b1a      	ldr	r3, [pc, #104]	; (728c <Ft_Gpu_CoCmd_Button+0x94>)
    7224:	4798      	blx	r3
    7226:	b280      	uxth	r0, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*4 + len + 1);            
    7228:	3011      	adds	r0, #17
    722a:	b284      	uxth	r4, r0
    722c:	0021      	movs	r1, r4
    722e:	0028      	movs	r0, r5
    7230:	4b17      	ldr	r3, [pc, #92]	; (7290 <Ft_Gpu_CoCmd_Button+0x98>)
    7232:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_BUTTON);
    7234:	21f3      	movs	r1, #243	; 0xf3
    7236:	4249      	negs	r1, r1
    7238:	9501      	str	r5, [sp, #4]
    723a:	0028      	movs	r0, r5
    723c:	4d15      	ldr	r5, [pc, #84]	; (7294 <Ft_Gpu_CoCmd_Button+0x9c>)
    723e:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    7240:	464b      	mov	r3, r9
    7242:	0419      	lsls	r1, r3, #16
    7244:	4653      	mov	r3, sl
    7246:	041b      	lsls	r3, r3, #16
    7248:	0c1b      	lsrs	r3, r3, #16
    724a:	4319      	orrs	r1, r3
    724c:	9801      	ldr	r0, [sp, #4]
    724e:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)h<<16)|(w&0xffff)));
    7250:	4643      	mov	r3, r8
    7252:	0419      	lsls	r1, r3, #16
    7254:	465b      	mov	r3, fp
    7256:	041b      	lsls	r3, r3, #16
    7258:	0c1b      	lsrs	r3, r3, #16
    725a:	4319      	orrs	r1, r3
    725c:	9801      	ldr	r0, [sp, #4]
    725e:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    7260:	0436      	lsls	r6, r6, #16
    7262:	0439      	lsls	r1, r7, #16
    7264:	0c09      	lsrs	r1, r1, #16
    7266:	4331      	orrs	r1, r6
    7268:	9e01      	ldr	r6, [sp, #4]
    726a:	0030      	movs	r0, r6
    726c:	47a8      	blx	r5
  Ft_Gpu_CoCmd_SendStr(phost, s);
    726e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7270:	0030      	movs	r0, r6
    7272:	4b09      	ldr	r3, [pc, #36]	; (7298 <Ft_Gpu_CoCmd_Button+0xa0>)
    7274:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4 + len + 1));              
    7276:	0021      	movs	r1, r4
    7278:	0030      	movs	r0, r6
    727a:	4b08      	ldr	r3, [pc, #32]	; (729c <Ft_Gpu_CoCmd_Button+0xa4>)
    727c:	4798      	blx	r3
}
    727e:	b003      	add	sp, #12
    7280:	bc3c      	pop	{r2, r3, r4, r5}
    7282:	4690      	mov	r8, r2
    7284:	4699      	mov	r9, r3
    7286:	46a2      	mov	sl, r4
    7288:	46ab      	mov	fp, r5
    728a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    728c:	0000dbf1 	.word	0x0000dbf1
    7290:	000070a9 	.word	0x000070a9
    7294:	00007091 	.word	0x00007091
    7298:	0000709d 	.word	0x0000709d
    729c:	000070c9 	.word	0x000070c9

000072a0 <Ft_Gpu_CoCmd_Calibrate>:
{
    72a0:	b570      	push	{r4, r5, r6, lr}
    72a2:	0004      	movs	r4, r0
    72a4:	000e      	movs	r6, r1
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*2);     
    72a6:	2108      	movs	r1, #8
    72a8:	4b08      	ldr	r3, [pc, #32]	; (72cc <Ft_Gpu_CoCmd_Calibrate+0x2c>)
    72aa:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_CALIBRATE);
    72ac:	21eb      	movs	r1, #235	; 0xeb
    72ae:	4249      	negs	r1, r1
    72b0:	0020      	movs	r0, r4
    72b2:	4d07      	ldr	r5, [pc, #28]	; (72d0 <Ft_Gpu_CoCmd_Calibrate+0x30>)
    72b4:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, result);
    72b6:	0031      	movs	r1, r6
    72b8:	0020      	movs	r0, r4
    72ba:	47a8      	blx	r5
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*2));   
    72bc:	2108      	movs	r1, #8
    72be:	0020      	movs	r0, r4
    72c0:	4b04      	ldr	r3, [pc, #16]	; (72d4 <Ft_Gpu_CoCmd_Calibrate+0x34>)
    72c2:	4798      	blx	r3
  Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    72c4:	0020      	movs	r0, r4
    72c6:	4b04      	ldr	r3, [pc, #16]	; (72d8 <Ft_Gpu_CoCmd_Calibrate+0x38>)
    72c8:	4798      	blx	r3
}
    72ca:	bd70      	pop	{r4, r5, r6, pc}
    72cc:	000070a9 	.word	0x000070a9
    72d0:	00007091 	.word	0x00007091
    72d4:	000070c9 	.word	0x000070c9
    72d8:	000076f9 	.word	0x000076f9

000072dc <Ft_Gpu_CoCmd_Append>:
{
    72dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72de:	0004      	movs	r4, r0
    72e0:	000f      	movs	r7, r1
    72e2:	0016      	movs	r6, r2
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*3);       
    72e4:	210c      	movs	r1, #12
    72e6:	4b09      	ldr	r3, [pc, #36]	; (730c <Ft_Gpu_CoCmd_Append+0x30>)
    72e8:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_APPEND);
    72ea:	21e2      	movs	r1, #226	; 0xe2
    72ec:	4249      	negs	r1, r1
    72ee:	0020      	movs	r0, r4
    72f0:	4d07      	ldr	r5, [pc, #28]	; (7310 <Ft_Gpu_CoCmd_Append+0x34>)
    72f2:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, ptr);
    72f4:	0039      	movs	r1, r7
    72f6:	0020      	movs	r0, r4
    72f8:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, num);
    72fa:	0031      	movs	r1, r6
    72fc:	0020      	movs	r0, r4
    72fe:	47a8      	blx	r5
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*3));       
    7300:	210c      	movs	r1, #12
    7302:	0020      	movs	r0, r4
    7304:	4b03      	ldr	r3, [pc, #12]	; (7314 <Ft_Gpu_CoCmd_Append+0x38>)
    7306:	4798      	blx	r3
}
    7308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    730a:	46c0      	nop			; (mov r8, r8)
    730c:	000070a9 	.word	0x000070a9
    7310:	00007091 	.word	0x00007091
    7314:	000070c9 	.word	0x000070c9

00007318 <Ft_Gpu_CoCmd_Gradient>:
{
    7318:	b5f0      	push	{r4, r5, r6, r7, lr}
    731a:	46d6      	mov	lr, sl
    731c:	464f      	mov	r7, r9
    731e:	b580      	push	{r7, lr}
    7320:	b083      	sub	sp, #12
    7322:	0004      	movs	r4, r0
    7324:	468a      	mov	sl, r1
    7326:	4691      	mov	r9, r2
    7328:	9301      	str	r3, [sp, #4]
    732a:	ab0a      	add	r3, sp, #40	; 0x28
    732c:	2200      	movs	r2, #0
    732e:	5e9f      	ldrsh	r7, [r3, r2]
    7330:	ab0b      	add	r3, sp, #44	; 0x2c
    7332:	2200      	movs	r2, #0
    7334:	5e9e      	ldrsh	r6, [r3, r2]
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*5);         
    7336:	2114      	movs	r1, #20
    7338:	4b11      	ldr	r3, [pc, #68]	; (7380 <Ft_Gpu_CoCmd_Gradient+0x68>)
    733a:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_GRADIENT);
    733c:	21f5      	movs	r1, #245	; 0xf5
    733e:	4249      	negs	r1, r1
    7340:	0020      	movs	r0, r4
    7342:	4d10      	ldr	r5, [pc, #64]	; (7384 <Ft_Gpu_CoCmd_Gradient+0x6c>)
    7344:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y0<<16)|(x0 & 0xffff)));
    7346:	464a      	mov	r2, r9
    7348:	0411      	lsls	r1, r2, #16
    734a:	4652      	mov	r2, sl
    734c:	0413      	lsls	r3, r2, #16
    734e:	0c1b      	lsrs	r3, r3, #16
    7350:	4319      	orrs	r1, r3
    7352:	0020      	movs	r0, r4
    7354:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, rgb0);
    7356:	9901      	ldr	r1, [sp, #4]
    7358:	0020      	movs	r0, r4
    735a:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y1<<16)|(x1 & 0xffff)));
    735c:	0436      	lsls	r6, r6, #16
    735e:	0439      	lsls	r1, r7, #16
    7360:	0c09      	lsrs	r1, r1, #16
    7362:	4331      	orrs	r1, r6
    7364:	0020      	movs	r0, r4
    7366:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, rgb1);
    7368:	990c      	ldr	r1, [sp, #48]	; 0x30
    736a:	0020      	movs	r0, r4
    736c:	47a8      	blx	r5
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*5));         
    736e:	2114      	movs	r1, #20
    7370:	0020      	movs	r0, r4
    7372:	4b05      	ldr	r3, [pc, #20]	; (7388 <Ft_Gpu_CoCmd_Gradient+0x70>)
    7374:	4798      	blx	r3
}
    7376:	b003      	add	sp, #12
    7378:	bc0c      	pop	{r2, r3}
    737a:	4691      	mov	r9, r2
    737c:	469a      	mov	sl, r3
    737e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7380:	000070a9 	.word	0x000070a9
    7384:	00007091 	.word	0x00007091
    7388:	000070c9 	.word	0x000070c9

0000738c <Ft_Gpu_CoCmd_Keys>:
{
    738c:	b5f0      	push	{r4, r5, r6, r7, lr}
    738e:	46de      	mov	lr, fp
    7390:	4657      	mov	r7, sl
    7392:	464e      	mov	r6, r9
    7394:	4645      	mov	r5, r8
    7396:	b5e0      	push	{r5, r6, r7, lr}
    7398:	b083      	sub	sp, #12
    739a:	0005      	movs	r5, r0
    739c:	468a      	mov	sl, r1
    739e:	4691      	mov	r9, r2
    73a0:	469b      	mov	fp, r3
    73a2:	ab0c      	add	r3, sp, #48	; 0x30
    73a4:	2200      	movs	r2, #0
    73a6:	5e9b      	ldrsh	r3, [r3, r2]
    73a8:	4698      	mov	r8, r3
    73aa:	ab0d      	add	r3, sp, #52	; 0x34
    73ac:	2700      	movs	r7, #0
    73ae:	5fdf      	ldrsh	r7, [r3, r7]
    73b0:	ab0e      	add	r3, sp, #56	; 0x38
    73b2:	881e      	ldrh	r6, [r3, #0]
  ft_uint16_t len = strlen((const char*)s);
    73b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    73b6:	4b1a      	ldr	r3, [pc, #104]	; (7420 <Ft_Gpu_CoCmd_Keys+0x94>)
    73b8:	4798      	blx	r3
    73ba:	b280      	uxth	r0, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*4 + len + 1);         
    73bc:	3011      	adds	r0, #17
    73be:	b284      	uxth	r4, r0
    73c0:	0021      	movs	r1, r4
    73c2:	0028      	movs	r0, r5
    73c4:	4b17      	ldr	r3, [pc, #92]	; (7424 <Ft_Gpu_CoCmd_Keys+0x98>)
    73c6:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_KEYS);
    73c8:	21f2      	movs	r1, #242	; 0xf2
    73ca:	4249      	negs	r1, r1
    73cc:	9501      	str	r5, [sp, #4]
    73ce:	0028      	movs	r0, r5
    73d0:	4d15      	ldr	r5, [pc, #84]	; (7428 <Ft_Gpu_CoCmd_Keys+0x9c>)
    73d2:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)y<<16)|(x & 0xffff)));
    73d4:	464b      	mov	r3, r9
    73d6:	0419      	lsls	r1, r3, #16
    73d8:	4653      	mov	r3, sl
    73da:	041b      	lsls	r3, r3, #16
    73dc:	0c1b      	lsrs	r3, r3, #16
    73de:	4319      	orrs	r1, r3
    73e0:	9801      	ldr	r0, [sp, #4]
    73e2:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)h<<16)|(w&0xffff)));
    73e4:	4643      	mov	r3, r8
    73e6:	0419      	lsls	r1, r3, #16
    73e8:	465b      	mov	r3, fp
    73ea:	041b      	lsls	r3, r3, #16
    73ec:	0c1b      	lsrs	r3, r3, #16
    73ee:	4319      	orrs	r1, r3
    73f0:	9801      	ldr	r0, [sp, #4]
    73f2:	47a8      	blx	r5
  Ft_Gpu_Copro_SendCmd(phost, (((ft_uint32_t)options<<16)|(font&0xffff)));
    73f4:	0436      	lsls	r6, r6, #16
    73f6:	0439      	lsls	r1, r7, #16
    73f8:	0c09      	lsrs	r1, r1, #16
    73fa:	4331      	orrs	r1, r6
    73fc:	9e01      	ldr	r6, [sp, #4]
    73fe:	0030      	movs	r0, r6
    7400:	47a8      	blx	r5
  Ft_Gpu_CoCmd_SendStr(phost, s);
    7402:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7404:	0030      	movs	r0, r6
    7406:	4b09      	ldr	r3, [pc, #36]	; (742c <Ft_Gpu_CoCmd_Keys+0xa0>)
    7408:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*4 + len + 1));
    740a:	0021      	movs	r1, r4
    740c:	0030      	movs	r0, r6
    740e:	4b08      	ldr	r3, [pc, #32]	; (7430 <Ft_Gpu_CoCmd_Keys+0xa4>)
    7410:	4798      	blx	r3
}
    7412:	b003      	add	sp, #12
    7414:	bc3c      	pop	{r2, r3, r4, r5}
    7416:	4690      	mov	r8, r2
    7418:	4699      	mov	r9, r3
    741a:	46a2      	mov	sl, r4
    741c:	46ab      	mov	fp, r5
    741e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7420:	0000dbf1 	.word	0x0000dbf1
    7424:	000070a9 	.word	0x000070a9
    7428:	00007091 	.word	0x00007091
    742c:	0000709d 	.word	0x0000709d
    7430:	000070c9 	.word	0x000070c9

00007434 <Ft_Gpu_CoCmd_Dlstart>:
{
    7434:	b510      	push	{r4, lr}
    7436:	0004      	movs	r4, r0
  Ft_Gpu_CoCmd_StartFunc(phost,FT_CMD_SIZE*1);           
    7438:	2104      	movs	r1, #4
    743a:	4b05      	ldr	r3, [pc, #20]	; (7450 <Ft_Gpu_CoCmd_Dlstart+0x1c>)
    743c:	4798      	blx	r3
  Ft_Gpu_Copro_SendCmd(phost, CMD_DLSTART);
    743e:	4905      	ldr	r1, [pc, #20]	; (7454 <Ft_Gpu_CoCmd_Dlstart+0x20>)
    7440:	0020      	movs	r0, r4
    7442:	4b05      	ldr	r3, [pc, #20]	; (7458 <Ft_Gpu_CoCmd_Dlstart+0x24>)
    7444:	4798      	blx	r3
  Ft_Gpu_CoCmd_EndFunc(phost,(FT_CMD_SIZE*1));             
    7446:	2104      	movs	r1, #4
    7448:	0020      	movs	r0, r4
    744a:	4b04      	ldr	r3, [pc, #16]	; (745c <Ft_Gpu_CoCmd_Dlstart+0x28>)
    744c:	4798      	blx	r3
}
    744e:	bd10      	pop	{r4, pc}
    7450:	000070a9 	.word	0x000070a9
    7454:	ffffff00 	.word	0xffffff00
    7458:	00007091 	.word	0x00007091
    745c:	000070c9 	.word	0x000070c9

00007460 <Ft_Gpu_Hal_Open>:
	return true;
}


ft_bool_t Ft_Gpu_Hal_Open(Ft_Gpu_Hal_Context_t *host)
{
    7460:	b510      	push	{r4, lr}
     * the pinmux settings and the SPI init, so it's all done
     * in Ft_Gpu_Hal_Init().
     */
    
    // init current write buffer to zero, since we're just starting up
	host->ft_cmd_fifo_wp = host->ft_dl_buff_wp = 0;
    7462:	2200      	movs	r2, #0
    7464:	2300      	movs	r3, #0
    7466:	8142      	strh	r2, [r0, #10]
    7468:	8102      	strh	r2, [r0, #8]
    // by default ft800/801/810/811 goes with single dummy byte for read
	host->spinumdummy = 1;
    746a:	3201      	adds	r2, #1
    746c:	7542      	strb	r2, [r0, #21]
    // technically one channel, but zero for how the FT library does things
	host->spichannel = 0;
    746e:	7503      	strb	r3, [r0, #20]
    // indicate it's ready to go
	host->status = FT_GPU_HAL_OPENED;
    7470:	7303      	strb	r3, [r0, #12]

    lcd_set_ft_host_ptr(host);
    7472:	4b02      	ldr	r3, [pc, #8]	; (747c <Ft_Gpu_Hal_Open+0x1c>)
    7474:	4798      	blx	r3

	return true;
}
    7476:	2001      	movs	r0, #1
    7478:	bd10      	pop	{r4, pc}
    747a:	46c0      	nop			; (mov r8, r8)
    747c:	000096c5 	.word	0x000096c5

00007480 <Ft_Gpu_Hal_StartTransfer>:
}


/*The APIs for reading/writing transfer continuously only with small buffer system*/
ft_void_t  Ft_Gpu_Hal_StartTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint32_t addr)
{
    7480:	b510      	push	{r4, lr}
    7482:	0004      	movs	r4, r0
    /* determine if it's a read or write. This affects the preamble send to the
     * LCD (preamble = direction bits and address). */
	if (FT_GPU_READ == rw)
    7484:	2900      	cmp	r1, #0
    7486:	d006      	beq.n	7496 <Ft_Gpu_Hal_StartTransfer+0x16>
		host->status = FT_GPU_HAL_READING;
	}
    else
    {
        // begin a write transfer
	    lcd_start_xfer(addr, WRT);
    7488:	2101      	movs	r1, #1
    748a:	0010      	movs	r0, r2
    748c:	4b05      	ldr	r3, [pc, #20]	; (74a4 <Ft_Gpu_Hal_StartTransfer+0x24>)
    748e:	4798      	blx	r3
    
		host->status = FT_GPU_HAL_WRITING;
    7490:	2302      	movs	r3, #2
    7492:	7323      	strb	r3, [r4, #12]
	}
}
    7494:	bd10      	pop	{r4, pc}
        lcd_start_xfer(addr, READ);
    7496:	0010      	movs	r0, r2
    7498:	4b02      	ldr	r3, [pc, #8]	; (74a4 <Ft_Gpu_Hal_StartTransfer+0x24>)
    749a:	4798      	blx	r3
		host->status = FT_GPU_HAL_READING;
    749c:	2301      	movs	r3, #1
    749e:	7323      	strb	r3, [r4, #12]
    74a0:	e7f8      	b.n	7494 <Ft_Gpu_Hal_StartTransfer+0x14>
    74a2:	46c0      	nop			; (mov r8, r8)
    74a4:	00009341 	.word	0x00009341

000074a8 <Ft_Gpu_Hal_StartCmdTransfer>:


/*The APIs for writing transfer continuously only*/
ft_void_t  Ft_Gpu_Hal_StartCmdTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint16_t count)
{
    74a8:	b510      	push	{r4, lr}
    // RAM_CMD = 0x308000
    // starting a transfer = sending preamble (read/write bits and address)
	Ft_Gpu_Hal_StartTransfer(host,rw,host->ft_cmd_fifo_wp + RAM_CMD);
    74aa:	8902      	ldrh	r2, [r0, #8]
    74ac:	23c2      	movs	r3, #194	; 0xc2
    74ae:	039b      	lsls	r3, r3, #14
    74b0:	469c      	mov	ip, r3
    74b2:	4462      	add	r2, ip
    74b4:	4b01      	ldr	r3, [pc, #4]	; (74bc <Ft_Gpu_Hal_StartCmdTransfer+0x14>)
    74b6:	4798      	blx	r3
}
    74b8:	bd10      	pop	{r4, pc}
    74ba:	46c0      	nop			; (mov r8, r8)
    74bc:	00007481 	.word	0x00007481

000074c0 <Ft_Gpu_Hal_Transfer8>:
    Ft_Gpu_Hal_Transfer8(host,0);
}


ft_uint8_t Ft_Gpu_Hal_Transfer8(Ft_Gpu_Hal_Context_t *host, ft_uint8_t value)
{
    74c0:	b500      	push	{lr}
    74c2:	b085      	sub	sp, #20
    74c4:	466b      	mov	r3, sp
    74c6:	71d9      	strb	r1, [r3, #7]
    ft_uint8_t read_byte = 0;
    74c8:	2200      	movs	r2, #0
    74ca:	230f      	movs	r3, #15
    74cc:	446b      	add	r3, sp
    74ce:	701a      	strb	r2, [r3, #0]
    
    // transmit or receive a byte
    if(host->status == FT_GPU_HAL_WRITING)
    74d0:	7b03      	ldrb	r3, [r0, #12]
    74d2:	2b02      	cmp	r3, #2
    74d4:	d009      	beq.n	74ea <Ft_Gpu_Hal_Transfer8+0x2a>
        lcd_host_write(&value, 1);
    else
        lcd_host_read(&read_byte, 1);
    74d6:	2101      	movs	r1, #1
    74d8:	200f      	movs	r0, #15
    74da:	4468      	add	r0, sp
    74dc:	4b06      	ldr	r3, [pc, #24]	; (74f8 <Ft_Gpu_Hal_Transfer8+0x38>)
    74de:	4798      	blx	r3
    
    return read_byte;
    74e0:	230f      	movs	r3, #15
    74e2:	446b      	add	r3, sp
    74e4:	7818      	ldrb	r0, [r3, #0]
}
    74e6:	b005      	add	sp, #20
    74e8:	bd00      	pop	{pc}
        lcd_host_write(&value, 1);
    74ea:	2101      	movs	r1, #1
    74ec:	466b      	mov	r3, sp
    74ee:	1dd8      	adds	r0, r3, #7
    74f0:	4b02      	ldr	r3, [pc, #8]	; (74fc <Ft_Gpu_Hal_Transfer8+0x3c>)
    74f2:	4798      	blx	r3
    74f4:	e7f4      	b.n	74e0 <Ft_Gpu_Hal_Transfer8+0x20>
    74f6:	46c0      	nop			; (mov r8, r8)
    74f8:	000093e5 	.word	0x000093e5
    74fc:	0000945d 	.word	0x0000945d

00007500 <Ft_Gpu_Hal_TransferString>:
{
    7500:	b570      	push	{r4, r5, r6, lr}
    7502:	0005      	movs	r5, r0
    7504:	000e      	movs	r6, r1
    ft_uint16_t length = strlen((const char*) string);
    7506:	0008      	movs	r0, r1
    7508:	4b09      	ldr	r3, [pc, #36]	; (7530 <Ft_Gpu_Hal_TransferString+0x30>)
    750a:	4798      	blx	r3
    750c:	b280      	uxth	r0, r0
    while(length--)
    750e:	e005      	b.n	751c <Ft_Gpu_Hal_TransferString+0x1c>
       Ft_Gpu_Hal_Transfer8(host, *string);
    7510:	7831      	ldrb	r1, [r6, #0]
    7512:	0028      	movs	r0, r5
    7514:	4b07      	ldr	r3, [pc, #28]	; (7534 <Ft_Gpu_Hal_TransferString+0x34>)
    7516:	4798      	blx	r3
       string ++;
    7518:	3601      	adds	r6, #1
    while(length--)
    751a:	0020      	movs	r0, r4
    751c:	1e44      	subs	r4, r0, #1
    751e:	b2a4      	uxth	r4, r4
    7520:	2800      	cmp	r0, #0
    7522:	d1f5      	bne.n	7510 <Ft_Gpu_Hal_TransferString+0x10>
    Ft_Gpu_Hal_Transfer8(host,0);
    7524:	2100      	movs	r1, #0
    7526:	0028      	movs	r0, r5
    7528:	4b02      	ldr	r3, [pc, #8]	; (7534 <Ft_Gpu_Hal_TransferString+0x34>)
    752a:	4798      	blx	r3
}
    752c:	bd70      	pop	{r4, r5, r6, pc}
    752e:	46c0      	nop			; (mov r8, r8)
    7530:	0000dbf1 	.word	0x0000dbf1
    7534:	000074c1 	.word	0x000074c1

00007538 <Ft_Gpu_Hal_Transfer16>:


ft_uint16_t Ft_Gpu_Hal_Transfer16(Ft_Gpu_Hal_Context_t *host, ft_uint16_t value)
{
    7538:	b570      	push	{r4, r5, r6, lr}
    753a:	0004      	movs	r4, r0
    753c:	000d      	movs	r5, r1
	ft_uint16_t retVal = 0;

    // transmit or receive two bytes
    if (host->status == FT_GPU_HAL_WRITING)
    753e:	7b03      	ldrb	r3, [r0, #12]
    7540:	2b02      	cmp	r3, #2
    7542:	d00a      	beq.n	755a <Ft_Gpu_Hal_Transfer16+0x22>
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer8(host,0);
    7544:	2100      	movs	r1, #0
    7546:	4d09      	ldr	r5, [pc, #36]	; (756c <Ft_Gpu_Hal_Transfer16+0x34>)
    7548:	47a8      	blx	r5
    754a:	0006      	movs	r6, r0
		retVal |= (ft_uint16_t)Ft_Gpu_Hal_Transfer8(host,0) << 8;
    754c:	2100      	movs	r1, #0
    754e:	0020      	movs	r0, r4
    7550:	47a8      	blx	r5
    7552:	0200      	lsls	r0, r0, #8
    7554:	4330      	orrs	r0, r6
    7556:	b280      	uxth	r0, r0
	}

	return retVal;
}
    7558:	bd70      	pop	{r4, r5, r6, pc}
	    Ft_Gpu_Hal_Transfer8(host,value & 0xFF);//LSB first
    755a:	b2c9      	uxtb	r1, r1
    755c:	4e03      	ldr	r6, [pc, #12]	; (756c <Ft_Gpu_Hal_Transfer16+0x34>)
    755e:	47b0      	blx	r6
	    Ft_Gpu_Hal_Transfer8(host,(value >> 8) & 0xFF);
    7560:	0a29      	lsrs	r1, r5, #8
    7562:	0020      	movs	r0, r4
    7564:	47b0      	blx	r6
	ft_uint16_t retVal = 0;
    7566:	2000      	movs	r0, #0
    7568:	e7f6      	b.n	7558 <Ft_Gpu_Hal_Transfer16+0x20>
    756a:	46c0      	nop			; (mov r8, r8)
    756c:	000074c1 	.word	0x000074c1

00007570 <Ft_Gpu_Hal_Transfer32>:


ft_uint32_t Ft_Gpu_Hal_Transfer32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t value)
{
    7570:	b570      	push	{r4, r5, r6, lr}
    7572:	0004      	movs	r4, r0
    7574:	000d      	movs	r5, r1
	ft_uint32_t retVal = 0;
    
    // transmit or receive four bytes
	if (host->status == FT_GPU_HAL_WRITING)
    7576:	7b03      	ldrb	r3, [r0, #12]
    7578:	2b02      	cmp	r3, #2
    757a:	d009      	beq.n	7590 <Ft_Gpu_Hal_Transfer32+0x20>
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
	}
    else
    {
		retVal = Ft_Gpu_Hal_Transfer16(host,0);
    757c:	2100      	movs	r1, #0
    757e:	4e08      	ldr	r6, [pc, #32]	; (75a0 <Ft_Gpu_Hal_Transfer32+0x30>)
    7580:	47b0      	blx	r6
    7582:	0005      	movs	r5, r0
		retVal |= (ft_uint32_t)Ft_Gpu_Hal_Transfer16(host,0) << 16;
    7584:	2100      	movs	r1, #0
    7586:	0020      	movs	r0, r4
    7588:	47b0      	blx	r6
    758a:	0400      	lsls	r0, r0, #16
    758c:	4328      	orrs	r0, r5
	}
    
	return retVal;
}
    758e:	bd70      	pop	{r4, r5, r6, pc}
		Ft_Gpu_Hal_Transfer16(host,value & 0xFFFF);//LSB first
    7590:	b289      	uxth	r1, r1
    7592:	4e03      	ldr	r6, [pc, #12]	; (75a0 <Ft_Gpu_Hal_Transfer32+0x30>)
    7594:	47b0      	blx	r6
		Ft_Gpu_Hal_Transfer16(host,(value >> 16) & 0xFFFF);
    7596:	0c29      	lsrs	r1, r5, #16
    7598:	0020      	movs	r0, r4
    759a:	47b0      	blx	r6
	ft_uint32_t retVal = 0;
    759c:	2000      	movs	r0, #0
    759e:	e7f6      	b.n	758e <Ft_Gpu_Hal_Transfer32+0x1e>
    75a0:	00007539 	.word	0x00007539

000075a4 <Ft_Gpu_Hal_EndTransfer>:


ft_void_t Ft_Gpu_Hal_EndTransfer(Ft_Gpu_Hal_Context_t *host)
{
    75a4:	b510      	push	{r4, lr}
    75a6:	0004      	movs	r4, r0
    // deselect the slave (let slave CS float high for SIM System)
    lcd_stop_xfer();
    75a8:	4b02      	ldr	r3, [pc, #8]	; (75b4 <Ft_Gpu_Hal_EndTransfer+0x10>)
    75aa:	4798      	blx	r3
    
	host->status = FT_GPU_HAL_OPENED;
    75ac:	2300      	movs	r3, #0
    75ae:	7323      	strb	r3, [r4, #12]
}
    75b0:	bd10      	pop	{r4, pc}
    75b2:	46c0      	nop			; (mov r8, r8)
    75b4:	000093c9 	.word	0x000093c9

000075b8 <Ft_Gpu_Hal_Rd8>:


ft_uint8_t Ft_Gpu_Hal_Rd8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    75b8:	b570      	push	{r4, r5, r6, lr}
    75ba:	0004      	movs	r4, r0
    75bc:	000a      	movs	r2, r1
	ft_uint8_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    75be:	2100      	movs	r1, #0
    75c0:	4b05      	ldr	r3, [pc, #20]	; (75d8 <Ft_Gpu_Hal_Rd8+0x20>)
    75c2:	4798      	blx	r3
    
    // read a byte
	value = Ft_Gpu_Hal_Transfer8(host,0);
    75c4:	2100      	movs	r1, #0
    75c6:	0020      	movs	r0, r4
    75c8:	4b04      	ldr	r3, [pc, #16]	; (75dc <Ft_Gpu_Hal_Rd8+0x24>)
    75ca:	4798      	blx	r3
    75cc:	0005      	movs	r5, r0

    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    75ce:	0020      	movs	r0, r4
    75d0:	4b03      	ldr	r3, [pc, #12]	; (75e0 <Ft_Gpu_Hal_Rd8+0x28>)
    75d2:	4798      	blx	r3
    
	return value;
}
    75d4:	0028      	movs	r0, r5
    75d6:	bd70      	pop	{r4, r5, r6, pc}
    75d8:	00007481 	.word	0x00007481
    75dc:	000074c1 	.word	0x000074c1
    75e0:	000075a5 	.word	0x000075a5

000075e4 <Ft_Gpu_Hal_Rd16>:


ft_uint16_t Ft_Gpu_Hal_Rd16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr)
{
    75e4:	b570      	push	{r4, r5, r6, lr}
    75e6:	0004      	movs	r4, r0
    75e8:	000a      	movs	r2, r1
	ft_uint16_t value;

    // start a read transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_READ,addr);
    75ea:	2100      	movs	r1, #0
    75ec:	4b05      	ldr	r3, [pc, #20]	; (7604 <Ft_Gpu_Hal_Rd16+0x20>)
    75ee:	4798      	blx	r3
    
    // read 2 bytes
	value = Ft_Gpu_Hal_Transfer16(host,0);
    75f0:	2100      	movs	r1, #0
    75f2:	0020      	movs	r0, r4
    75f4:	4b04      	ldr	r3, [pc, #16]	; (7608 <Ft_Gpu_Hal_Rd16+0x24>)
    75f6:	4798      	blx	r3
    75f8:	0005      	movs	r5, r0
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    75fa:	0020      	movs	r0, r4
    75fc:	4b03      	ldr	r3, [pc, #12]	; (760c <Ft_Gpu_Hal_Rd16+0x28>)
    75fe:	4798      	blx	r3
    
	return value;
}
    7600:	0028      	movs	r0, r5
    7602:	bd70      	pop	{r4, r5, r6, pc}
    7604:	00007481 	.word	0x00007481
    7608:	00007539 	.word	0x00007539
    760c:	000075a5 	.word	0x000075a5

00007610 <Ft_Gpu_Hal_Wr8>:
	return value;
}


ft_void_t Ft_Gpu_Hal_Wr8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint8_t v)
{	
    7610:	b570      	push	{r4, r5, r6, lr}
    7612:	0004      	movs	r4, r0
    7614:	0015      	movs	r5, r2
    
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    7616:	000a      	movs	r2, r1
    7618:	2101      	movs	r1, #1
    761a:	4b05      	ldr	r3, [pc, #20]	; (7630 <Ft_Gpu_Hal_Wr8+0x20>)
    761c:	4798      	blx	r3
    
    // read a byte
	Ft_Gpu_Hal_Transfer8(host,v);
    761e:	0029      	movs	r1, r5
    7620:	0020      	movs	r0, r4
    7622:	4b04      	ldr	r3, [pc, #16]	; (7634 <Ft_Gpu_Hal_Wr8+0x24>)
    7624:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    7626:	0020      	movs	r0, r4
    7628:	4b03      	ldr	r3, [pc, #12]	; (7638 <Ft_Gpu_Hal_Wr8+0x28>)
    762a:	4798      	blx	r3
}
    762c:	bd70      	pop	{r4, r5, r6, pc}
    762e:	46c0      	nop			; (mov r8, r8)
    7630:	00007481 	.word	0x00007481
    7634:	000074c1 	.word	0x000074c1
    7638:	000075a5 	.word	0x000075a5

0000763c <Ft_Gpu_Hal_Wr16>:


ft_void_t Ft_Gpu_Hal_Wr16(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint16_t v)
{
    763c:	b570      	push	{r4, r5, r6, lr}
    763e:	0004      	movs	r4, r0
    7640:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    7642:	000a      	movs	r2, r1
    7644:	2101      	movs	r1, #1
    7646:	4b05      	ldr	r3, [pc, #20]	; (765c <Ft_Gpu_Hal_Wr16+0x20>)
    7648:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer16(host,v);
    764a:	0029      	movs	r1, r5
    764c:	0020      	movs	r0, r4
    764e:	4b04      	ldr	r3, [pc, #16]	; (7660 <Ft_Gpu_Hal_Wr16+0x24>)
    7650:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    7652:	0020      	movs	r0, r4
    7654:	4b03      	ldr	r3, [pc, #12]	; (7664 <Ft_Gpu_Hal_Wr16+0x28>)
    7656:	4798      	blx	r3
}
    7658:	bd70      	pop	{r4, r5, r6, pc}
    765a:	46c0      	nop			; (mov r8, r8)
    765c:	00007481 	.word	0x00007481
    7660:	00007539 	.word	0x00007539
    7664:	000075a5 	.word	0x000075a5

00007668 <Ft_Gpu_Hal_Wr32>:


ft_void_t Ft_Gpu_Hal_Wr32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint32_t v)
{
    7668:	b570      	push	{r4, r5, r6, lr}
    766a:	0004      	movs	r4, r0
    766c:	0015      	movs	r5, r2
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    766e:	000a      	movs	r2, r1
    7670:	2101      	movs	r1, #1
    7672:	4b05      	ldr	r3, [pc, #20]	; (7688 <Ft_Gpu_Hal_Wr32+0x20>)
    7674:	4798      	blx	r3
    
    // read 2 bytes
	Ft_Gpu_Hal_Transfer32(host,v);
    7676:	0029      	movs	r1, r5
    7678:	0020      	movs	r0, r4
    767a:	4b04      	ldr	r3, [pc, #16]	; (768c <Ft_Gpu_Hal_Wr32+0x24>)
    767c:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    767e:	0020      	movs	r0, r4
    7680:	4b03      	ldr	r3, [pc, #12]	; (7690 <Ft_Gpu_Hal_Wr32+0x28>)
    7682:	4798      	blx	r3
}
    7684:	bd70      	pop	{r4, r5, r6, pc}
    7686:	46c0      	nop			; (mov r8, r8)
    7688:	00007481 	.word	0x00007481
    768c:	00007571 	.word	0x00007571
    7690:	000075a5 	.word	0x000075a5

00007694 <Ft_Gpu_Hal_Updatecmdfifo>:
	lcd_host_cmd((cmd & 0xFF), ((cmd >> 8) & 0xFF));
}


ft_void_t Ft_Gpu_Hal_Updatecmdfifo(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    7694:	b510      	push	{r4, lr}
	host->ft_cmd_fifo_wp  = (host->ft_cmd_fifo_wp + count) & 4095;
    7696:	8902      	ldrh	r2, [r0, #8]
    7698:	1852      	adds	r2, r2, r1
    769a:	0512      	lsls	r2, r2, #20
    769c:	0d12      	lsrs	r2, r2, #20

	//4 byte alignment
	host->ft_cmd_fifo_wp = (host->ft_cmd_fifo_wp + 3) & 0xffc;
    769e:	3203      	adds	r2, #3
    76a0:	4903      	ldr	r1, [pc, #12]	; (76b0 <Ft_Gpu_Hal_Updatecmdfifo+0x1c>)
    76a2:	400a      	ands	r2, r1
    76a4:	8102      	strh	r2, [r0, #8]
    
	Ft_Gpu_Hal_Wr16(host,REG_CMD_WRITE,host->ft_cmd_fifo_wp);
    76a6:	4903      	ldr	r1, [pc, #12]	; (76b4 <Ft_Gpu_Hal_Updatecmdfifo+0x20>)
    76a8:	4b03      	ldr	r3, [pc, #12]	; (76b8 <Ft_Gpu_Hal_Updatecmdfifo+0x24>)
    76aa:	4798      	blx	r3
}
    76ac:	bd10      	pop	{r4, pc}
    76ae:	46c0      	nop			; (mov r8, r8)
    76b0:	00000ffc 	.word	0x00000ffc
    76b4:	003020fc 	.word	0x003020fc
    76b8:	0000763d 	.word	0x0000763d

000076bc <Ft_Gpu_Cmdfifo_Freespace>:


ft_uint16_t Ft_Gpu_Cmdfifo_Freespace(Ft_Gpu_Hal_Context_t *host)
{
    76bc:	b510      	push	{r4, lr}
    /* calculate the free space for the coprocessor FIFO. Refer to pg 150 in
     * the FT81X_Series_Programmers_Guide datasheet */
	ft_uint16_t fullness,retval;

    // REG_CMD_READ = 0x3020F8
	fullness = (host->ft_cmd_fifo_wp - Ft_Gpu_Hal_Rd16(host,REG_CMD_READ)) & 4095;
    76be:	8904      	ldrh	r4, [r0, #8]
    76c0:	4904      	ldr	r1, [pc, #16]	; (76d4 <Ft_Gpu_Cmdfifo_Freespace+0x18>)
    76c2:	4b05      	ldr	r3, [pc, #20]	; (76d8 <Ft_Gpu_Cmdfifo_Freespace+0x1c>)
    76c4:	4798      	blx	r3
    76c6:	1a24      	subs	r4, r4, r0
    76c8:	0524      	lsls	r4, r4, #20
    76ca:	0d24      	lsrs	r4, r4, #20
    
	retval = (FT_CMD_FIFO_SIZE - 4) - fullness;
    76cc:	4803      	ldr	r0, [pc, #12]	; (76dc <Ft_Gpu_Cmdfifo_Freespace+0x20>)
    76ce:	1b00      	subs	r0, r0, r4
    76d0:	b280      	uxth	r0, r0
    
	return (retval);
}
    76d2:	bd10      	pop	{r4, pc}
    76d4:	003020f8 	.word	0x003020f8
    76d8:	000075e5 	.word	0x000075e5
    76dc:	00000ffc 	.word	0x00000ffc

000076e0 <Ft_Gpu_Hal_CheckCmdBuffer>:
}
#endif


ft_void_t Ft_Gpu_Hal_CheckCmdBuffer(Ft_Gpu_Hal_Context_t *host, ft_uint32_t count)
{
    76e0:	b570      	push	{r4, r5, r6, lr}
    76e2:	0005      	movs	r5, r0
    76e4:	000c      	movs	r4, r1
   ft_uint16_t getfreespace;
   do{
       // This "fixme" was here in the original code.
	   // FIXME: This can get stuck, non-even is returned in case of coprocessor issue
        getfreespace = Ft_Gpu_Cmdfifo_Freespace(host);
    76e6:	0028      	movs	r0, r5
    76e8:	4b02      	ldr	r3, [pc, #8]	; (76f4 <Ft_Gpu_Hal_CheckCmdBuffer+0x14>)
    76ea:	4798      	blx	r3
        
   // loop until there is free space, else break if there is enough free space
   }while(getfreespace < count);
    76ec:	42a0      	cmp	r0, r4
    76ee:	d3fa      	bcc.n	76e6 <Ft_Gpu_Hal_CheckCmdBuffer+0x6>
}
    76f0:	bd70      	pop	{r4, r5, r6, pc}
    76f2:	46c0      	nop			; (mov r8, r8)
    76f4:	000076bd 	.word	0x000076bd

000076f8 <Ft_Gpu_Hal_WaitCmdfifo_empty>:


ft_void_t Ft_Gpu_Hal_WaitCmdfifo_empty(Ft_Gpu_Hal_Context_t *host)
{
    76f8:	b570      	push	{r4, r5, r6, lr}
    76fa:	0005      	movs	r5, r0
   /* wait for the FIFO read and write pointers to equal each other.
    * This is the naive way to do it, refer to pg 154 in 
    * the FT81X_Series_Programmers_Guide datasheet */
   while(Ft_Gpu_Hal_Rd16(host,REG_CMD_READ) != Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE));
    76fc:	4907      	ldr	r1, [pc, #28]	; (771c <Ft_Gpu_Hal_WaitCmdfifo_empty+0x24>)
    76fe:	0028      	movs	r0, r5
    7700:	4c07      	ldr	r4, [pc, #28]	; (7720 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    7702:	47a0      	blx	r4
    7704:	0006      	movs	r6, r0
    7706:	4907      	ldr	r1, [pc, #28]	; (7724 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    7708:	0028      	movs	r0, r5
    770a:	47a0      	blx	r4
    770c:	4286      	cmp	r6, r0
    770e:	d1f5      	bne.n	76fc <Ft_Gpu_Hal_WaitCmdfifo_empty+0x4>
   
   host->ft_cmd_fifo_wp = Ft_Gpu_Hal_Rd16(host,REG_CMD_WRITE);
    7710:	4904      	ldr	r1, [pc, #16]	; (7724 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x2c>)
    7712:	0028      	movs	r0, r5
    7714:	4b02      	ldr	r3, [pc, #8]	; (7720 <Ft_Gpu_Hal_WaitCmdfifo_empty+0x28>)
    7716:	4798      	blx	r3
    7718:	8128      	strh	r0, [r5, #8]
}
    771a:	bd70      	pop	{r4, r5, r6, pc}
    771c:	003020f8 	.word	0x003020f8
    7720:	000075e5 	.word	0x000075e5
    7724:	003020fc 	.word	0x003020fc

00007728 <Ft_Gpu_Hal_WrCmd32>:
    host->ft_cmd_fifo_wp = 0;
}


ft_void_t Ft_Gpu_Hal_WrCmd32(Ft_Gpu_Hal_Context_t *host, ft_uint32_t cmd)
{
    7728:	b570      	push	{r4, r5, r6, lr}
    772a:	0004      	movs	r4, r0
    772c:	000d      	movs	r5, r1
    Ft_Gpu_Hal_CheckCmdBuffer(host, sizeof(cmd));
    772e:	2104      	movs	r1, #4
    7730:	4b07      	ldr	r3, [pc, #28]	; (7750 <Ft_Gpu_Hal_WrCmd32+0x28>)
    7732:	4798      	blx	r3
    
    Ft_Gpu_Hal_Wr32(host, RAM_CMD + host->ft_cmd_fifo_wp, cmd);
    7734:	8921      	ldrh	r1, [r4, #8]
    7736:	23c2      	movs	r3, #194	; 0xc2
    7738:	039b      	lsls	r3, r3, #14
    773a:	469c      	mov	ip, r3
    773c:	4461      	add	r1, ip
    773e:	002a      	movs	r2, r5
    7740:	0020      	movs	r0, r4
    7742:	4b04      	ldr	r3, [pc, #16]	; (7754 <Ft_Gpu_Hal_WrCmd32+0x2c>)
    7744:	4798      	blx	r3
    
    Ft_Gpu_Hal_Updatecmdfifo(host, sizeof(cmd));
    7746:	2104      	movs	r1, #4
    7748:	0020      	movs	r0, r4
    774a:	4b03      	ldr	r3, [pc, #12]	; (7758 <Ft_Gpu_Hal_WrCmd32+0x30>)
    774c:	4798      	blx	r3
}
    774e:	bd70      	pop	{r4, r5, r6, pc}
    7750:	000076e1 	.word	0x000076e1
    7754:	00007669 	.word	0x00007669
    7758:	00007695 	.word	0x00007695

0000775c <month31>:
 * Return Values(s) : int
 * Description      : Check if the month has 31 days. Return 1 if yes, else
 *  0 if no
 */
int month31(char month){
	if(month==1 || month==3 || month==5 || month==7 || month==8 || \
    775c:	2801      	cmp	r0, #1
    775e:	d00f      	beq.n	7780 <month31+0x24>
    7760:	2803      	cmp	r0, #3
    7762:	d00f      	beq.n	7784 <month31+0x28>
    7764:	2805      	cmp	r0, #5
    7766:	d00f      	beq.n	7788 <month31+0x2c>
    7768:	2807      	cmp	r0, #7
    776a:	d00f      	beq.n	778c <month31+0x30>
    776c:	2808      	cmp	r0, #8
    776e:	d00f      	beq.n	7790 <month31+0x34>
    7770:	280a      	cmp	r0, #10
    7772:	d00f      	beq.n	7794 <month31+0x38>
        month==10 || month==12)
    7774:	280c      	cmp	r0, #12
    7776:	d001      	beq.n	777c <month31+0x20>
		return 1;
	else
		return 0;
    7778:	2000      	movs	r0, #0
}//end month31
    777a:	4770      	bx	lr
		return 1;
    777c:	380b      	subs	r0, #11
    777e:	e7fc      	b.n	777a <month31+0x1e>
    7780:	2001      	movs	r0, #1
    7782:	e7fa      	b.n	777a <month31+0x1e>
    7784:	2001      	movs	r0, #1
    7786:	e7f8      	b.n	777a <month31+0x1e>
    7788:	2001      	movs	r0, #1
    778a:	e7f6      	b.n	777a <month31+0x1e>
    778c:	2001      	movs	r0, #1
    778e:	e7f4      	b.n	777a <month31+0x1e>
    7790:	2001      	movs	r0, #1
    7792:	e7f2      	b.n	777a <month31+0x1e>
    7794:	2001      	movs	r0, #1
    7796:	e7f0      	b.n	777a <month31+0x1e>

00007798 <printTime>:
/* Function Name    : printTime
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Get the current time and date, display it on the screen
 */
void printTime(){
    7798:	b5f0      	push	{r4, r5, r6, r7, lr}
    779a:	46d6      	mov	lr, sl
    779c:	464f      	mov	r7, r9
    779e:	4646      	mov	r6, r8
    77a0:	b5c0      	push	{r6, r7, lr}
    77a2:	b08a      	sub	sp, #40	; 0x28
	int fstYloc = disHei - 60, sndYloc = disHei - 30;
	char buff[32];
	//get current time and date
	rtc_calendar_get_time(&rtc_instance, &time);
    77a4:	4c1b      	ldr	r4, [pc, #108]	; (7814 <printTime+0x7c>)
    77a6:	0021      	movs	r1, r4
    77a8:	481b      	ldr	r0, [pc, #108]	; (7818 <printTime+0x80>)
    77aa:	4b1c      	ldr	r3, [pc, #112]	; (781c <printTime+0x84>)
    77ac:	4798      	blx	r3
	//put together a string for time and send to display
	snprintf(buff, 32, "%02d:%02d:%02d", time.hour, time.minute, time.second);
    77ae:	78a3      	ldrb	r3, [r4, #2]
    77b0:	7862      	ldrb	r2, [r4, #1]
    77b2:	7821      	ldrb	r1, [r4, #0]
    77b4:	ad02      	add	r5, sp, #8
    77b6:	9101      	str	r1, [sp, #4]
    77b8:	9200      	str	r2, [sp, #0]
    77ba:	4a19      	ldr	r2, [pc, #100]	; (7820 <printTime+0x88>)
    77bc:	2120      	movs	r1, #32
    77be:	0028      	movs	r0, r5
    77c0:	4e18      	ldr	r6, [pc, #96]	; (7824 <printTime+0x8c>)
    77c2:	46b2      	mov	sl, r6
    77c4:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Text(phost, 10, fstYloc, font, 0, buff);
    77c6:	4b18      	ldr	r3, [pc, #96]	; (7828 <printTime+0x90>)
    77c8:	4699      	mov	r9, r3
    77ca:	781b      	ldrb	r3, [r3, #0]
    77cc:	4a17      	ldr	r2, [pc, #92]	; (782c <printTime+0x94>)
    77ce:	4690      	mov	r8, r2
    77d0:	6810      	ldr	r0, [r2, #0]
    77d2:	9501      	str	r5, [sp, #4]
    77d4:	2700      	movs	r7, #0
    77d6:	9700      	str	r7, [sp, #0]
    77d8:	22d2      	movs	r2, #210	; 0xd2
    77da:	0052      	lsls	r2, r2, #1
    77dc:	210a      	movs	r1, #10
    77de:	4e14      	ldr	r6, [pc, #80]	; (7830 <printTime+0x98>)
    77e0:	47b0      	blx	r6
	
	//put together a string for date and send to display
	snprintf(buff, 32, "%02d/%02d/%04d", time.month, time.day, time.year);
    77e2:	7963      	ldrb	r3, [r4, #5]
    77e4:	7922      	ldrb	r2, [r4, #4]
    77e6:	88e1      	ldrh	r1, [r4, #6]
    77e8:	9101      	str	r1, [sp, #4]
    77ea:	9200      	str	r2, [sp, #0]
    77ec:	4a11      	ldr	r2, [pc, #68]	; (7834 <printTime+0x9c>)
    77ee:	2120      	movs	r1, #32
    77f0:	0028      	movs	r0, r5
    77f2:	47d0      	blx	sl
	Ft_Gpu_CoCmd_Text(phost, 10, sndYloc, font, 0, buff);
    77f4:	464b      	mov	r3, r9
    77f6:	781b      	ldrb	r3, [r3, #0]
    77f8:	4642      	mov	r2, r8
    77fa:	6810      	ldr	r0, [r2, #0]
    77fc:	9501      	str	r5, [sp, #4]
    77fe:	9700      	str	r7, [sp, #0]
    7800:	22e1      	movs	r2, #225	; 0xe1
    7802:	0052      	lsls	r2, r2, #1
    7804:	210a      	movs	r1, #10
    7806:	47b0      	blx	r6
}//end printTime
    7808:	b00a      	add	sp, #40	; 0x28
    780a:	bc1c      	pop	{r2, r3, r4}
    780c:	4690      	mov	r8, r2
    780e:	4699      	mov	r9, r3
    7810:	46a2      	mov	sl, r4
    7812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7814:	20001c58 	.word	0x20001c58
    7818:	20001940 	.word	0x20001940
    781c:	00000555 	.word	0x00000555
    7820:	0000f500 	.word	0x0000f500
    7824:	0000db8d 	.word	0x0000db8d
    7828:	20000250 	.word	0x20000250
    782c:	20001c60 	.word	0x20001c60
    7830:	000070e5 	.word	0x000070e5
    7834:	0000f510 	.word	0x0000f510

00007838 <play>:
/* Function Name    : play
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Play 3 consecutive beep at 660Hz when called
 */
void play(){
    7838:	b510      	push	{r4, lr}
	//set full volume
	Ft_Gpu_Hal_Wr8(phost,REG_VOL_SOUND,0x255);
    783a:	4c0d      	ldr	r4, [pc, #52]	; (7870 <play+0x38>)
    783c:	2255      	movs	r2, #85	; 0x55
    783e:	490d      	ldr	r1, [pc, #52]	; (7874 <play+0x3c>)
    7840:	6820      	ldr	r0, [r4, #0]
    7842:	4b0d      	ldr	r3, [pc, #52]	; (7878 <play+0x40>)
    7844:	4798      	blx	r3
	//set one single beet at 660Hz
	Ft_Gpu_Hal_Wr16(phost, REG_SOUND,  (73<< 8) | 0x10);
    7846:	6820      	ldr	r0, [r4, #0]
    7848:	4a0c      	ldr	r2, [pc, #48]	; (787c <play+0x44>)
    784a:	490d      	ldr	r1, [pc, #52]	; (7880 <play+0x48>)
    784c:	4b0d      	ldr	r3, [pc, #52]	; (7884 <play+0x4c>)
    784e:	4798      	blx	r3

	//play it 3 times delay 100ms inbetween
	int i;
	for (i=0; i < 3; i++){
    7850:	2400      	movs	r4, #0
    7852:	e009      	b.n	7868 <play+0x30>
		Ft_Gpu_Hal_Wr8(phost, REG_PLAY, 1);
    7854:	4b06      	ldr	r3, [pc, #24]	; (7870 <play+0x38>)
    7856:	6818      	ldr	r0, [r3, #0]
    7858:	2201      	movs	r2, #1
    785a:	490b      	ldr	r1, [pc, #44]	; (7888 <play+0x50>)
    785c:	4b06      	ldr	r3, [pc, #24]	; (7878 <play+0x40>)
    785e:	4798      	blx	r3
		delay_ms(100);
    7860:	2064      	movs	r0, #100	; 0x64
    7862:	4b0a      	ldr	r3, [pc, #40]	; (788c <play+0x54>)
    7864:	4798      	blx	r3
	for (i=0; i < 3; i++){
    7866:	3401      	adds	r4, #1
    7868:	2c02      	cmp	r4, #2
    786a:	ddf3      	ble.n	7854 <play+0x1c>
	}
}//end play
    786c:	bd10      	pop	{r4, pc}
    786e:	46c0      	nop			; (mov r8, r8)
    7870:	20001c60 	.word	0x20001c60
    7874:	00302084 	.word	0x00302084
    7878:	00007611 	.word	0x00007611
    787c:	00004910 	.word	0x00004910
    7880:	00302088 	.word	0x00302088
    7884:	0000763d 	.word	0x0000763d
    7888:	0030208c 	.word	0x0030208c
    788c:	00000151 	.word	0x00000151

00007890 <shiftHist>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Shift the history in the array down once, so newest 
 *  history is at the beginning of array
 */
void shiftHist(){
    7890:	b530      	push	{r4, r5, lr}
	int i, j;
	for(i = 9; i > 0; i--)
    7892:	2009      	movs	r0, #9
    7894:	e011      	b.n	78ba <shiftHist+0x2a>
		for (j = 0; j < 9; j++)
			history[i][j] = history[i-1][j];
    7896:	1e43      	subs	r3, r0, #1
    7898:	4c0a      	ldr	r4, [pc, #40]	; (78c4 <shiftHist+0x34>)
    789a:	0099      	lsls	r1, r3, #2
    789c:	18c9      	adds	r1, r1, r3
    789e:	004b      	lsls	r3, r1, #1
    78a0:	189b      	adds	r3, r3, r2
    78a2:	005b      	lsls	r3, r3, #1
    78a4:	5f1d      	ldrsh	r5, [r3, r4]
    78a6:	0081      	lsls	r1, r0, #2
    78a8:	1809      	adds	r1, r1, r0
    78aa:	004b      	lsls	r3, r1, #1
    78ac:	189b      	adds	r3, r3, r2
    78ae:	005b      	lsls	r3, r3, #1
    78b0:	531d      	strh	r5, [r3, r4]
		for (j = 0; j < 9; j++)
    78b2:	3201      	adds	r2, #1
    78b4:	2a08      	cmp	r2, #8
    78b6:	ddee      	ble.n	7896 <shiftHist+0x6>
	for(i = 9; i > 0; i--)
    78b8:	3801      	subs	r0, #1
    78ba:	2800      	cmp	r0, #0
    78bc:	dd01      	ble.n	78c2 <shiftHist+0x32>
    78be:	2200      	movs	r2, #0
    78c0:	e7f8      	b.n	78b4 <shiftHist+0x24>
}//end shiftHist
    78c2:	bd30      	pop	{r4, r5, pc}
    78c4:	20001b90 	.word	0x20001b90

000078c8 <saveHist>:
 * Parameters       : int16_t rssi169, int16_t rssi915, int16_t rssi245
 * Return Values(s) : void
 * Description      : Save the history to the array. Save the history 
 *  to SD Card if one is inserted
 */
void saveHist(int16_t rssi169, int16_t rssi915, int16_t rssi245){
    78c8:	b570      	push	{r4, r5, r6, lr}
    78ca:	0006      	movs	r6, r0
    78cc:	000d      	movs	r5, r1
    78ce:	0014      	movs	r4, r2
	UINT bw;
	char buff[128];
	//shift history down once
	shiftHist();
    78d0:	4b0a      	ldr	r3, [pc, #40]	; (78fc <saveHist+0x34>)
    78d2:	4798      	blx	r3
	// put the time into the fist array
	history[0][0] = time.hour;
    78d4:	4a0a      	ldr	r2, [pc, #40]	; (7900 <saveHist+0x38>)
    78d6:	7891      	ldrb	r1, [r2, #2]
    78d8:	4b0a      	ldr	r3, [pc, #40]	; (7904 <saveHist+0x3c>)
    78da:	8019      	strh	r1, [r3, #0]
	history[0][1] = time.minute;
    78dc:	7851      	ldrb	r1, [r2, #1]
    78de:	8059      	strh	r1, [r3, #2]
	history[0][2] = time.second;
    78e0:	7811      	ldrb	r1, [r2, #0]
    78e2:	8099      	strh	r1, [r3, #4]
	history[0][3] = time.month;
    78e4:	7951      	ldrb	r1, [r2, #5]
    78e6:	80d9      	strh	r1, [r3, #6]
	history[0][4] = time.day;
    78e8:	7911      	ldrb	r1, [r2, #4]
    78ea:	8119      	strh	r1, [r3, #8]
	history[0][5] = time.year;
    78ec:	2106      	movs	r1, #6
    78ee:	5e52      	ldrsh	r2, [r2, r1]
    78f0:	815a      	strh	r2, [r3, #10]
	history[0][6] = rssi169;
    78f2:	819e      	strh	r6, [r3, #12]
	history[0][7] = rssi915;
    78f4:	81dd      	strh	r5, [r3, #14]
	history[0][8] = rssi245;
    78f6:	821c      	strh	r4, [r3, #16]
	

}//end saveHist
    78f8:	bd70      	pop	{r4, r5, r6, pc}
    78fa:	46c0      	nop			; (mov r8, r8)
    78fc:	00007891 	.word	0x00007891
    7900:	20001c58 	.word	0x20001c58
    7904:	20001b90 	.word	0x20001b90

00007908 <drawRect>:
/* Function Name    : drawRect
 * Parameters       : int x, int y, double freq
 * Return Values(s) : void
 * Description      : Draw the background for attenuation screen
 */
void drawRect(int x, int y, double freq){
    7908:	b5f0      	push	{r4, r5, r6, r7, lr}
    790a:	46de      	mov	lr, fp
    790c:	4657      	mov	r7, sl
    790e:	464e      	mov	r6, r9
    7910:	4645      	mov	r5, r8
    7912:	b5e0      	push	{r5, r6, r7, lr}
    7914:	b085      	sub	sp, #20
    7916:	4680      	mov	r8, r0
    7918:	000e      	movs	r6, r1
    791a:	9202      	str	r2, [sp, #8]
    791c:	9303      	str	r3, [sp, #12]
	// draw rounded rectangles
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    791e:	4d66      	ldr	r5, [pc, #408]	; (7ab8 <drawRect+0x1b0>)
    7920:	4966      	ldr	r1, [pc, #408]	; (7abc <drawRect+0x1b4>)
    7922:	6828      	ldr	r0, [r5, #0]
    7924:	4c66      	ldr	r4, [pc, #408]	; (7ac0 <drawRect+0x1b8>)
    7926:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 16));
    7928:	4966      	ldr	r1, [pc, #408]	; (7ac4 <drawRect+0x1bc>)
    792a:	6828      	ldr	r0, [r5, #0]
    792c:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(50));		// transparency apparently
    792e:	4966      	ldr	r1, [pc, #408]	; (7ac8 <drawRect+0x1c0>)
    7930:	6828      	ldr	r0, [r5, #0]
    7932:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    7934:	4965      	ldr	r1, [pc, #404]	; (7acc <drawRect+0x1c4>)
    7936:	6828      	ldr	r0, [r5, #0]
    7938:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(x * 16, y * 16) );
    793a:	4643      	mov	r3, r8
    793c:	04d9      	lsls	r1, r3, #19
    793e:	4b64      	ldr	r3, [pc, #400]	; (7ad0 <drawRect+0x1c8>)
    7940:	4699      	mov	r9, r3
    7942:	4019      	ands	r1, r3
    7944:	0133      	lsls	r3, r6, #4
    7946:	4f63      	ldr	r7, [pc, #396]	; (7ad4 <drawRect+0x1cc>)
    7948:	46bb      	mov	fp, r7
    794a:	403b      	ands	r3, r7
    794c:	4319      	orrs	r1, r3
    794e:	2780      	movs	r7, #128	; 0x80
    7950:	05ff      	lsls	r7, r7, #23
    7952:	4339      	orrs	r1, r7
    7954:	6828      	ldr	r0, [r5, #0]
    7956:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + boxWid) * 16, (y + boxHei) * 16));
    7958:	4641      	mov	r1, r8
    795a:	312d      	adds	r1, #45	; 0x2d
    795c:	31ff      	adds	r1, #255	; 0xff
    795e:	04c9      	lsls	r1, r1, #19
    7960:	464b      	mov	r3, r9
    7962:	4019      	ands	r1, r3
    7964:	0033      	movs	r3, r6
    7966:	3364      	adds	r3, #100	; 0x64
    7968:	011b      	lsls	r3, r3, #4
    796a:	465a      	mov	r2, fp
    796c:	4013      	ands	r3, r2
    796e:	4319      	orrs	r1, r3
    7970:	4339      	orrs	r1, r7
    7972:	6828      	ldr	r0, [r5, #0]
    7974:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, END());
    7976:	2184      	movs	r1, #132	; 0x84
    7978:	0589      	lsls	r1, r1, #22
    797a:	6828      	ldr	r0, [r5, #0]
    797c:	47a0      	blx	r4
	//draw lines
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(LINES));
    797e:	4956      	ldr	r1, [pc, #344]	; (7ad8 <drawRect+0x1d0>)
    7980:	6828      	ldr	r0, [r5, #0]
    7982:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(2 * 16));
    7984:	4955      	ldr	r1, [pc, #340]	; (7adc <drawRect+0x1d4>)
    7986:	6828      	ldr	r0, [r5, #0]
    7988:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(100));
    798a:	4955      	ldr	r1, [pc, #340]	; (7ae0 <drawRect+0x1d8>)
    798c:	6828      	ldr	r0, [r5, #0]
    798e:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + boxWid/4) * 16, (y + 10) * 16) );
    7990:	4641      	mov	r1, r8
    7992:	314b      	adds	r1, #75	; 0x4b
    7994:	04c9      	lsls	r1, r1, #19
    7996:	464b      	mov	r3, r9
    7998:	400b      	ands	r3, r1
    799a:	4699      	mov	r9, r3
    799c:	0031      	movs	r1, r6
    799e:	310a      	adds	r1, #10
    79a0:	0109      	lsls	r1, r1, #4
    79a2:	465b      	mov	r3, fp
    79a4:	4019      	ands	r1, r3
    79a6:	464b      	mov	r3, r9
    79a8:	4319      	orrs	r1, r3
    79aa:	4339      	orrs	r1, r7
    79ac:	6828      	ldr	r0, [r5, #0]
    79ae:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + boxWid/4) * 16, (y+boxHei - 10) * 16) );
    79b0:	0031      	movs	r1, r6
    79b2:	315a      	adds	r1, #90	; 0x5a
    79b4:	0109      	lsls	r1, r1, #4
    79b6:	465b      	mov	r3, fp
    79b8:	4019      	ands	r1, r3
    79ba:	464b      	mov	r3, r9
    79bc:	4319      	orrs	r1, r3
    79be:	4339      	orrs	r1, r7
    79c0:	6828      	ldr	r0, [r5, #0]
    79c2:	47a0      	blx	r4
	Ft_Gpu_Hal_WrCmd32(phost, END());
    79c4:	2184      	movs	r1, #132	; 0x84
    79c6:	0589      	lsls	r1, r1, #22
    79c8:	6828      	ldr	r0, [r5, #0]
    79ca:	47a0      	blx	r4
	// put the labels on
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    79cc:	6828      	ldr	r0, [r5, #0]
    79ce:	4945      	ldr	r1, [pc, #276]	; (7ae4 <drawRect+0x1dc>)
    79d0:	47a0      	blx	r4
	if (freq == 2.45){
    79d2:	4a45      	ldr	r2, [pc, #276]	; (7ae8 <drawRect+0x1e0>)
    79d4:	4b45      	ldr	r3, [pc, #276]	; (7aec <drawRect+0x1e4>)
    79d6:	9802      	ldr	r0, [sp, #8]
    79d8:	9903      	ldr	r1, [sp, #12]
    79da:	4c45      	ldr	r4, [pc, #276]	; (7af0 <drawRect+0x1e8>)
    79dc:	47a0      	blx	r4
    79de:	2800      	cmp	r0, #0
    79e0:	d127      	bne.n	7a32 <drawRect+0x12a>
		Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-30,28,OPT_CENTERX|OPT_CENTERY,"GHz");
		Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-75,30,OPT_CENTERX|OPT_CENTERY,"2.45");
	}else {
		Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-30,28,OPT_CENTERX|OPT_CENTERY,"MHz");
    79e2:	4644      	mov	r4, r8
    79e4:	3424      	adds	r4, #36	; 0x24
    79e6:	b224      	sxth	r4, r4
    79e8:	b2b5      	uxth	r5, r6
    79ea:	002a      	movs	r2, r5
    79ec:	3246      	adds	r2, #70	; 0x46
    79ee:	b212      	sxth	r2, r2
    79f0:	4b31      	ldr	r3, [pc, #196]	; (7ab8 <drawRect+0x1b0>)
    79f2:	6818      	ldr	r0, [r3, #0]
    79f4:	4b3f      	ldr	r3, [pc, #252]	; (7af4 <drawRect+0x1ec>)
    79f6:	9301      	str	r3, [sp, #4]
    79f8:	23c0      	movs	r3, #192	; 0xc0
    79fa:	00db      	lsls	r3, r3, #3
    79fc:	9300      	str	r3, [sp, #0]
    79fe:	231c      	movs	r3, #28
    7a00:	0021      	movs	r1, r4
    7a02:	4f3d      	ldr	r7, [pc, #244]	; (7af8 <drawRect+0x1f0>)
    7a04:	47b8      	blx	r7
		if (freq == 915)
    7a06:	2200      	movs	r2, #0
    7a08:	4b3c      	ldr	r3, [pc, #240]	; (7afc <drawRect+0x1f4>)
    7a0a:	9802      	ldr	r0, [sp, #8]
    7a0c:	9903      	ldr	r1, [sp, #12]
    7a0e:	4f38      	ldr	r7, [pc, #224]	; (7af0 <drawRect+0x1e8>)
    7a10:	47b8      	blx	r7
    7a12:	2800      	cmp	r0, #0
    7a14:	d141      	bne.n	7a9a <drawRect+0x192>
			Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-75,30,OPT_CENTERX|OPT_CENTERY,"915");
		else	Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-75,30,OPT_CENTERX|OPT_CENTERY,"169");
    7a16:	3519      	adds	r5, #25
    7a18:	b22a      	sxth	r2, r5
    7a1a:	4b27      	ldr	r3, [pc, #156]	; (7ab8 <drawRect+0x1b0>)
    7a1c:	6818      	ldr	r0, [r3, #0]
    7a1e:	4b38      	ldr	r3, [pc, #224]	; (7b00 <drawRect+0x1f8>)
    7a20:	9301      	str	r3, [sp, #4]
    7a22:	23c0      	movs	r3, #192	; 0xc0
    7a24:	00db      	lsls	r3, r3, #3
    7a26:	9300      	str	r3, [sp, #0]
    7a28:	231e      	movs	r3, #30
    7a2a:	0021      	movs	r1, r4
    7a2c:	4c32      	ldr	r4, [pc, #200]	; (7af8 <drawRect+0x1f0>)
    7a2e:	47a0      	blx	r4
    7a30:	e01d      	b.n	7a6e <drawRect+0x166>
		Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-30,28,OPT_CENTERX|OPT_CENTERY,"GHz");
    7a32:	4645      	mov	r5, r8
    7a34:	3524      	adds	r5, #36	; 0x24
    7a36:	b22b      	sxth	r3, r5
    7a38:	0019      	movs	r1, r3
    7a3a:	b2b4      	uxth	r4, r6
    7a3c:	0022      	movs	r2, r4
    7a3e:	3246      	adds	r2, #70	; 0x46
    7a40:	b212      	sxth	r2, r2
    7a42:	4b1d      	ldr	r3, [pc, #116]	; (7ab8 <drawRect+0x1b0>)
    7a44:	469a      	mov	sl, r3
    7a46:	6818      	ldr	r0, [r3, #0]
    7a48:	4b2e      	ldr	r3, [pc, #184]	; (7b04 <drawRect+0x1fc>)
    7a4a:	9301      	str	r3, [sp, #4]
    7a4c:	25c0      	movs	r5, #192	; 0xc0
    7a4e:	00ed      	lsls	r5, r5, #3
    7a50:	9500      	str	r5, [sp, #0]
    7a52:	231c      	movs	r3, #28
    7a54:	9102      	str	r1, [sp, #8]
    7a56:	4f28      	ldr	r7, [pc, #160]	; (7af8 <drawRect+0x1f0>)
    7a58:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-75,30,OPT_CENTERX|OPT_CENTERY,"2.45");
    7a5a:	3419      	adds	r4, #25
    7a5c:	b222      	sxth	r2, r4
    7a5e:	4650      	mov	r0, sl
    7a60:	6800      	ldr	r0, [r0, #0]
    7a62:	4b29      	ldr	r3, [pc, #164]	; (7b08 <drawRect+0x200>)
    7a64:	9301      	str	r3, [sp, #4]
    7a66:	9500      	str	r5, [sp, #0]
    7a68:	231e      	movs	r3, #30
    7a6a:	9902      	ldr	r1, [sp, #8]
    7a6c:	47b8      	blx	r7
	}
	Ft_Gpu_CoCmd_Text(phost,x+boxWid-60,y+boxHei/2,31,OPT_CENTERX|OPT_CENTERY," dB ");
    7a6e:	4641      	mov	r1, r8
    7a70:	31f0      	adds	r1, #240	; 0xf0
    7a72:	3632      	adds	r6, #50	; 0x32
    7a74:	b232      	sxth	r2, r6
    7a76:	b209      	sxth	r1, r1
    7a78:	4b0f      	ldr	r3, [pc, #60]	; (7ab8 <drawRect+0x1b0>)
    7a7a:	6818      	ldr	r0, [r3, #0]
    7a7c:	4b23      	ldr	r3, [pc, #140]	; (7b0c <drawRect+0x204>)
    7a7e:	9301      	str	r3, [sp, #4]
    7a80:	23c0      	movs	r3, #192	; 0xc0
    7a82:	00db      	lsls	r3, r3, #3
    7a84:	9300      	str	r3, [sp, #0]
    7a86:	231f      	movs	r3, #31
    7a88:	4c1b      	ldr	r4, [pc, #108]	; (7af8 <drawRect+0x1f0>)
    7a8a:	47a0      	blx	r4
}//end drawRect
    7a8c:	b005      	add	sp, #20
    7a8e:	bc3c      	pop	{r2, r3, r4, r5}
    7a90:	4690      	mov	r8, r2
    7a92:	4699      	mov	r9, r3
    7a94:	46a2      	mov	sl, r4
    7a96:	46ab      	mov	fp, r5
    7a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Ft_Gpu_CoCmd_Text(phost,x+boxWid/8-1,y+boxHei-75,30,OPT_CENTERX|OPT_CENTERY,"915");
    7a9a:	3519      	adds	r5, #25
    7a9c:	b22a      	sxth	r2, r5
    7a9e:	4b06      	ldr	r3, [pc, #24]	; (7ab8 <drawRect+0x1b0>)
    7aa0:	6818      	ldr	r0, [r3, #0]
    7aa2:	4b1b      	ldr	r3, [pc, #108]	; (7b10 <drawRect+0x208>)
    7aa4:	9301      	str	r3, [sp, #4]
    7aa6:	23c0      	movs	r3, #192	; 0xc0
    7aa8:	00db      	lsls	r3, r3, #3
    7aaa:	9300      	str	r3, [sp, #0]
    7aac:	231e      	movs	r3, #30
    7aae:	0021      	movs	r1, r4
    7ab0:	4c11      	ldr	r4, [pc, #68]	; (7af8 <drawRect+0x1f0>)
    7ab2:	47a0      	blx	r4
    7ab4:	e7db      	b.n	7a6e <drawRect+0x166>
    7ab6:	46c0      	nop			; (mov r8, r8)
    7ab8:	20001c60 	.word	0x20001c60
    7abc:	1f000009 	.word	0x1f000009
    7ac0:	00007729 	.word	0x00007729
    7ac4:	0e0000a0 	.word	0x0e0000a0
    7ac8:	10000032 	.word	0x10000032
    7acc:	04ffffff 	.word	0x04ffffff
    7ad0:	3ff80000 	.word	0x3ff80000
    7ad4:	00007ff0 	.word	0x00007ff0
    7ad8:	1f000003 	.word	0x1f000003
    7adc:	0e000020 	.word	0x0e000020
    7ae0:	10000064 	.word	0x10000064
    7ae4:	100000ff 	.word	0x100000ff
    7ae8:	9999999a 	.word	0x9999999a
    7aec:	40039999 	.word	0x40039999
    7af0:	0000cebd 	.word	0x0000cebd
    7af4:	0000f464 	.word	0x0000f464
    7af8:	000070e5 	.word	0x000070e5
    7afc:	408c9800 	.word	0x408c9800
    7b00:	0000f444 	.word	0x0000f444
    7b04:	0000f434 	.word	0x0000f434
    7b08:	0000f438 	.word	0x0000f438
    7b0c:	0000f448 	.word	0x0000f448
    7b10:	0000f440 	.word	0x0000f440

00007b14 <appAttn>:
void appAttn(void){
    7b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ft_Gpu_CoCmd_Dlstart(phost);
    7b16:	4c1d      	ldr	r4, [pc, #116]	; (7b8c <appAttn+0x78>)
    7b18:	6820      	ldr	r0, [r4, #0]
    7b1a:	4b1d      	ldr	r3, [pc, #116]	; (7b90 <appAttn+0x7c>)
    7b1c:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));	
    7b1e:	2180      	movs	r1, #128	; 0x80
    7b20:	0489      	lsls	r1, r1, #18
    7b22:	6820      	ldr	r0, [r4, #0]
    7b24:	4d1b      	ldr	r5, [pc, #108]	; (7b94 <appAttn+0x80>)
    7b26:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,0,0));
    7b28:	2198      	movs	r1, #152	; 0x98
    7b2a:	0589      	lsls	r1, r1, #22
    7b2c:	6820      	ldr	r0, [r4, #0]
    7b2e:	47a8      	blx	r5
	drawRect(400, 100, 40.68);
    7b30:	27c8      	movs	r7, #200	; 0xc8
    7b32:	007f      	lsls	r7, r7, #1
    7b34:	4a18      	ldr	r2, [pc, #96]	; (7b98 <appAttn+0x84>)
    7b36:	4b19      	ldr	r3, [pc, #100]	; (7b9c <appAttn+0x88>)
    7b38:	2164      	movs	r1, #100	; 0x64
    7b3a:	0038      	movs	r0, r7
    7b3c:	4e18      	ldr	r6, [pc, #96]	; (7ba0 <appAttn+0x8c>)
    7b3e:	47b0      	blx	r6
	drawRect(400, 230, 915);
    7b40:	2200      	movs	r2, #0
    7b42:	4b18      	ldr	r3, [pc, #96]	; (7ba4 <appAttn+0x90>)
    7b44:	21e6      	movs	r1, #230	; 0xe6
    7b46:	0038      	movs	r0, r7
    7b48:	47b0      	blx	r6
	drawRect(400, 360, 2.45);
    7b4a:	4a17      	ldr	r2, [pc, #92]	; (7ba8 <appAttn+0x94>)
    7b4c:	4b17      	ldr	r3, [pc, #92]	; (7bac <appAttn+0x98>)
    7b4e:	21b4      	movs	r1, #180	; 0xb4
    7b50:	0049      	lsls	r1, r1, #1
    7b52:	0038      	movs	r0, r7
    7b54:	47b0      	blx	r6
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    7b56:	6820      	ldr	r0, [r4, #0]
    7b58:	4b15      	ldr	r3, [pc, #84]	; (7bb0 <appAttn+0x9c>)
    7b5a:	4798      	blx	r3
	attnEnd = Ft_Gpu_Hal_Rd16(phost,REG_CMD_DL) - 3*4;
    7b5c:	4915      	ldr	r1, [pc, #84]	; (7bb4 <appAttn+0xa0>)
    7b5e:	6820      	ldr	r0, [r4, #0]
    7b60:	4b15      	ldr	r3, [pc, #84]	; (7bb8 <appAttn+0xa4>)
    7b62:	4798      	blx	r3
    7b64:	380c      	subs	r0, #12
    7b66:	4e15      	ldr	r6, [pc, #84]	; (7bbc <appAttn+0xa8>)
    7b68:	6030      	str	r0, [r6, #0]
	Ft_Gpu_Hal_WrCmd32(phost,CMD_MEMCPY);
    7b6a:	21e3      	movs	r1, #227	; 0xe3
    7b6c:	4249      	negs	r1, r1
    7b6e:	6820      	ldr	r0, [r4, #0]
    7b70:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost,attnStart);
    7b72:	4b13      	ldr	r3, [pc, #76]	; (7bc0 <appAttn+0xac>)
    7b74:	6819      	ldr	r1, [r3, #0]
    7b76:	6820      	ldr	r0, [r4, #0]
    7b78:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost,RAM_DL);
    7b7a:	21c0      	movs	r1, #192	; 0xc0
    7b7c:	0389      	lsls	r1, r1, #14
    7b7e:	6820      	ldr	r0, [r4, #0]
    7b80:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost,attnEnd);
    7b82:	6831      	ldr	r1, [r6, #0]
    7b84:	6820      	ldr	r0, [r4, #0]
    7b86:	47a8      	blx	r5
}//end appAttn
    7b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b8a:	46c0      	nop			; (mov r8, r8)
    7b8c:	20001c60 	.word	0x20001c60
    7b90:	00007435 	.word	0x00007435
    7b94:	00007729 	.word	0x00007729
    7b98:	3d70a3d7 	.word	0x3d70a3d7
    7b9c:	4044570a 	.word	0x4044570a
    7ba0:	00007909 	.word	0x00007909
    7ba4:	408c9800 	.word	0x408c9800
    7ba8:	9999999a 	.word	0x9999999a
    7bac:	40039999 	.word	0x40039999
    7bb0:	000076f9 	.word	0x000076f9
    7bb4:	00302100 	.word	0x00302100
    7bb8:	000075e5 	.word	0x000075e5
    7bbc:	200013dc 	.word	0x200013dc
    7bc0:	200013e0 	.word	0x200013e0

00007bc4 <drawTitle>:
/* Function Name    : drawTitle
 * Parameters       : char *title 
 * Return Values(s) : void
 * Description      : Draw the title to each screen based on title received
 */
void drawTitle(char *title){
    7bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bc6:	46ce      	mov	lr, r9
    7bc8:	4647      	mov	r7, r8
    7bca:	b580      	push	{r7, lr}
    7bcc:	b085      	sub	sp, #20
    7bce:	4681      	mov	r9, r0
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_XY(disWid/3,0));
    7bd0:	4c13      	ldr	r4, [pc, #76]	; (7c20 <drawTitle+0x5c>)
    7bd2:	4914      	ldr	r1, [pc, #80]	; (7c24 <drawTitle+0x60>)
    7bd4:	6820      	ldr	r0, [r4, #0]
    7bd6:	4d14      	ldr	r5, [pc, #80]	; (7c28 <drawTitle+0x64>)
    7bd8:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_SIZE((disWid*3/2), 50));
    7bda:	4914      	ldr	r1, [pc, #80]	; (7c2c <drawTitle+0x68>)
    7bdc:	6820      	ldr	r0, [r4, #0]
    7bde:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Gradient(phost, disWid/3*2,0, 0x8B90FF, disWid/3*2, 50,0x2933FF);
    7be0:	2685      	movs	r6, #133	; 0x85
    7be2:	00b6      	lsls	r6, r6, #2
    7be4:	6820      	ldr	r0, [r4, #0]
    7be6:	4b12      	ldr	r3, [pc, #72]	; (7c30 <drawTitle+0x6c>)
    7be8:	9302      	str	r3, [sp, #8]
    7bea:	2332      	movs	r3, #50	; 0x32
    7bec:	9301      	str	r3, [sp, #4]
    7bee:	9600      	str	r6, [sp, #0]
    7bf0:	4b10      	ldr	r3, [pc, #64]	; (7c34 <drawTitle+0x70>)
    7bf2:	2200      	movs	r2, #0
    7bf4:	0031      	movs	r1, r6
    7bf6:	4f10      	ldr	r7, [pc, #64]	; (7c38 <drawTitle+0x74>)
    7bf8:	47b8      	blx	r7
//	Ft_Gpu_CoCmd_Gradient(phost, disWid/3,0, 0x2933FF, disWid, 50,0x8B90FF);
	Ft_Gpu_CoCmd_Text(phost, (disWid/3*2), 30, 30, OPT_CENTER, title);
    7bfa:	6820      	ldr	r0, [r4, #0]
    7bfc:	464b      	mov	r3, r9
    7bfe:	9301      	str	r3, [sp, #4]
    7c00:	23c0      	movs	r3, #192	; 0xc0
    7c02:	00db      	lsls	r3, r3, #3
    7c04:	9300      	str	r3, [sp, #0]
    7c06:	231e      	movs	r3, #30
    7c08:	221e      	movs	r2, #30
    7c0a:	0031      	movs	r1, r6
    7c0c:	4e0b      	ldr	r6, [pc, #44]	; (7c3c <drawTitle+0x78>)
    7c0e:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,1,1));
    7c10:	6820      	ldr	r0, [r4, #0]
    7c12:	490b      	ldr	r1, [pc, #44]	; (7c40 <drawTitle+0x7c>)
    7c14:	47a8      	blx	r5
}//end drawTitle
    7c16:	b005      	add	sp, #20
    7c18:	bc0c      	pop	{r2, r3}
    7c1a:	4690      	mov	r8, r2
    7c1c:	4699      	mov	r9, r3
    7c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c20:	20001c60 	.word	0x20001c60
    7c24:	1b085000 	.word	0x1b085000
    7c28:	00007729 	.word	0x00007729
    7c2c:	1c4b0032 	.word	0x1c4b0032
    7c30:	002933ff 	.word	0x002933ff
    7c34:	008b90ff 	.word	0x008b90ff
    7c38:	00007319 	.word	0x00007319
    7c3c:	000070e5 	.word	0x000070e5
    7c40:	26000003 	.word	0x26000003

00007c44 <drawBack>:
/* Function Name    : drawBack
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Draw back button when called
 */
void drawBack(){
    7c44:	b510      	push	{r4, lr}
    7c46:	b084      	sub	sp, #16
	//assign tag value and draw button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(back));
    7c48:	4c0e      	ldr	r4, [pc, #56]	; (7c84 <drawBack+0x40>)
    7c4a:	490f      	ldr	r1, [pc, #60]	; (7c88 <drawBack+0x44>)
    7c4c:	6820      	ldr	r0, [r4, #0]
    7c4e:	4b0f      	ldr	r3, [pc, #60]	; (7c8c <drawBack+0x48>)
    7c50:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    7c52:	6820      	ldr	r0, [r4, #0]
    7c54:	4b0e      	ldr	r3, [pc, #56]	; (7c90 <drawBack+0x4c>)
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	4a0e      	ldr	r2, [pc, #56]	; (7c94 <drawBack+0x50>)
    7c5a:	7812      	ldrb	r2, [r2, #0]
    7c5c:	2a06      	cmp	r2, #6
    7c5e:	d00d      	beq.n	7c7c <drawBack+0x38>
    7c60:	2100      	movs	r1, #0
    7c62:	4a0d      	ldr	r2, [pc, #52]	; (7c98 <drawBack+0x54>)
    7c64:	9203      	str	r2, [sp, #12]
    7c66:	9102      	str	r1, [sp, #8]
    7c68:	9301      	str	r3, [sp, #4]
    7c6a:	2335      	movs	r3, #53	; 0x35
    7c6c:	9300      	str	r3, [sp, #0]
    7c6e:	332f      	adds	r3, #47	; 0x2f
    7c70:	2200      	movs	r2, #0
    7c72:	2100      	movs	r1, #0
    7c74:	4c09      	ldr	r4, [pc, #36]	; (7c9c <drawBack+0x58>)
    7c76:	47a0      	blx	r4
}//end drawBack
    7c78:	b004      	add	sp, #16
    7c7a:	bd10      	pop	{r4, pc}
	Ft_Gpu_CoCmd_Button(phost,0, 0,(disWid*0.125),(disHei*0.112),font, (tag==back)? OPT_FLAT:0,"  Back  ");
    7c7c:	2180      	movs	r1, #128	; 0x80
    7c7e:	0049      	lsls	r1, r1, #1
    7c80:	e7ef      	b.n	7c62 <drawBack+0x1e>
    7c82:	46c0      	nop			; (mov r8, r8)
    7c84:	20001c60 	.word	0x20001c60
    7c88:	03000006 	.word	0x03000006
    7c8c:	00007729 	.word	0x00007729
    7c90:	20000250 	.word	0x20000250
    7c94:	200013f5 	.word	0x200013f5
    7c98:	0000f3dc 	.word	0x0000f3dc
    7c9c:	000071f9 	.word	0x000071f9

00007ca0 <drawKeypad>:
/* Function Name    : drawKeypad
 * Parameters       : char pressed
 * Return Values(s) : void
 * Description      : Draw keypad and put effect on a key (if pressed)
 */
void drawKeypad(char pressed){
    7ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ca2:	46c6      	mov	lr, r8
    7ca4:	b500      	push	{lr}
    7ca6:	b084      	sub	sp, #16
	//draw number from 1 to 9 
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.4, disWid*.3, 60, 29, pressed+48, "123");
    7ca8:	3030      	adds	r0, #48	; 0x30
    7caa:	0005      	movs	r5, r0
    7cac:	4c4a      	ldr	r4, [pc, #296]	; (7dd8 <drawKeypad+0x138>)
    7cae:	6820      	ldr	r0, [r4, #0]
    7cb0:	4b4a      	ldr	r3, [pc, #296]	; (7ddc <drawKeypad+0x13c>)
    7cb2:	9303      	str	r3, [sp, #12]
    7cb4:	9502      	str	r5, [sp, #8]
    7cb6:	231d      	movs	r3, #29
    7cb8:	4698      	mov	r8, r3
    7cba:	9301      	str	r3, [sp, #4]
    7cbc:	273c      	movs	r7, #60	; 0x3c
    7cbe:	9700      	str	r7, [sp, #0]
    7cc0:	33d3      	adds	r3, #211	; 0xd3
    7cc2:	22c0      	movs	r2, #192	; 0xc0
    7cc4:	21f0      	movs	r1, #240	; 0xf0
    7cc6:	4e46      	ldr	r6, [pc, #280]	; (7de0 <drawKeypad+0x140>)
    7cc8:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.54, disWid*.3, 60, 29, pressed+48, "456");
    7cca:	6820      	ldr	r0, [r4, #0]
    7ccc:	4b45      	ldr	r3, [pc, #276]	; (7de4 <drawKeypad+0x144>)
    7cce:	9303      	str	r3, [sp, #12]
    7cd0:	9502      	str	r5, [sp, #8]
    7cd2:	4643      	mov	r3, r8
    7cd4:	9301      	str	r3, [sp, #4]
    7cd6:	9700      	str	r7, [sp, #0]
    7cd8:	33d3      	adds	r3, #211	; 0xd3
    7cda:	2204      	movs	r2, #4
    7cdc:	32ff      	adds	r2, #255	; 0xff
    7cde:	21f0      	movs	r1, #240	; 0xf0
    7ce0:	47b0      	blx	r6
	Ft_Gpu_CoCmd_Keys(phost, disWid/2 - disWid*.2, disHei*.68, disWid*.3, 60, 29, pressed+48, "789");
    7ce2:	6820      	ldr	r0, [r4, #0]
    7ce4:	4b40      	ldr	r3, [pc, #256]	; (7de8 <drawKeypad+0x148>)
    7ce6:	9303      	str	r3, [sp, #12]
    7ce8:	9502      	str	r5, [sp, #8]
    7cea:	4643      	mov	r3, r8
    7cec:	9301      	str	r3, [sp, #4]
    7cee:	9700      	str	r7, [sp, #0]
    7cf0:	33d3      	adds	r3, #211	; 0xd3
    7cf2:	22a3      	movs	r2, #163	; 0xa3
    7cf4:	0052      	lsls	r2, r2, #1
    7cf6:	21f0      	movs	r1, #240	; 0xf0
    7cf8:	47b0      	blx	r6
	
	//draw '0' button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(zero));
    7cfa:	493c      	ldr	r1, [pc, #240]	; (7dec <drawKeypad+0x14c>)
    7cfc:	6820      	ldr	r0, [r4, #0]
    7cfe:	4b3c      	ldr	r3, [pc, #240]	; (7df0 <drawKeypad+0x150>)
    7d00:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    7d02:	6820      	ldr	r0, [r4, #0]
    7d04:	4b3b      	ldr	r3, [pc, #236]	; (7df4 <drawKeypad+0x154>)
    7d06:	781b      	ldrb	r3, [r3, #0]
    7d08:	2b30      	cmp	r3, #48	; 0x30
    7d0a:	d05b      	beq.n	7dc4 <drawKeypad+0x124>
    7d0c:	2300      	movs	r3, #0
    7d0e:	4a3a      	ldr	r2, [pc, #232]	; (7df8 <drawKeypad+0x158>)
    7d10:	9203      	str	r2, [sp, #12]
    7d12:	9302      	str	r3, [sp, #8]
    7d14:	231d      	movs	r3, #29
    7d16:	9301      	str	r3, [sp, #4]
    7d18:	331f      	adds	r3, #31
    7d1a:	9300      	str	r3, [sp, #0]
    7d1c:	3338      	adds	r3, #56	; 0x38
    7d1e:	228a      	movs	r2, #138	; 0x8a
    7d20:	32ff      	adds	r2, #255	; 0xff
    7d22:	21f0      	movs	r1, #240	; 0xf0
    7d24:	4c35      	ldr	r4, [pc, #212]	; (7dfc <drawKeypad+0x15c>)
    7d26:	47a0      	blx	r4
	//draw delete button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(del));
    7d28:	4c2b      	ldr	r4, [pc, #172]	; (7dd8 <drawKeypad+0x138>)
    7d2a:	4935      	ldr	r1, [pc, #212]	; (7e00 <drawKeypad+0x160>)
    7d2c:	6820      	ldr	r0, [r4, #0]
    7d2e:	4b30      	ldr	r3, [pc, #192]	; (7df0 <drawKeypad+0x150>)
    7d30:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    7d32:	6820      	ldr	r0, [r4, #0]
    7d34:	4b2f      	ldr	r3, [pc, #188]	; (7df4 <drawKeypad+0x154>)
    7d36:	781b      	ldrb	r3, [r3, #0]
    7d38:	2b09      	cmp	r3, #9
    7d3a:	d045      	beq.n	7dc8 <drawKeypad+0x128>
    7d3c:	2300      	movs	r3, #0
    7d3e:	4a31      	ldr	r2, [pc, #196]	; (7e04 <drawKeypad+0x164>)
    7d40:	9203      	str	r2, [sp, #12]
    7d42:	9302      	str	r3, [sp, #8]
    7d44:	231d      	movs	r3, #29
    7d46:	9301      	str	r3, [sp, #4]
    7d48:	331f      	adds	r3, #31
    7d4a:	9300      	str	r3, [sp, #0]
    7d4c:	3338      	adds	r3, #56	; 0x38
    7d4e:	228a      	movs	r2, #138	; 0x8a
    7d50:	32ff      	adds	r2, #255	; 0xff
    7d52:	21b6      	movs	r1, #182	; 0xb6
    7d54:	0049      	lsls	r1, r1, #1
    7d56:	4c29      	ldr	r4, [pc, #164]	; (7dfc <drawKeypad+0x15c>)
    7d58:	47a0      	blx	r4
	//draw clear button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(clr));
    7d5a:	4c1f      	ldr	r4, [pc, #124]	; (7dd8 <drawKeypad+0x138>)
    7d5c:	492a      	ldr	r1, [pc, #168]	; (7e08 <drawKeypad+0x168>)
    7d5e:	6820      	ldr	r0, [r4, #0]
    7d60:	4b23      	ldr	r3, [pc, #140]	; (7df0 <drawKeypad+0x150>)
    7d62:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    7d64:	6820      	ldr	r0, [r4, #0]
    7d66:	4b23      	ldr	r3, [pc, #140]	; (7df4 <drawKeypad+0x154>)
    7d68:	781b      	ldrb	r3, [r3, #0]
    7d6a:	2b0a      	cmp	r3, #10
    7d6c:	d02e      	beq.n	7dcc <drawKeypad+0x12c>
    7d6e:	2300      	movs	r3, #0
    7d70:	4a26      	ldr	r2, [pc, #152]	; (7e0c <drawKeypad+0x16c>)
    7d72:	9203      	str	r2, [sp, #12]
    7d74:	9302      	str	r3, [sp, #8]
    7d76:	231d      	movs	r3, #29
    7d78:	9301      	str	r3, [sp, #4]
    7d7a:	3362      	adds	r3, #98	; 0x62
    7d7c:	9300      	str	r3, [sp, #0]
    7d7e:	3b2f      	subs	r3, #47	; 0x2f
    7d80:	22c0      	movs	r2, #192	; 0xc0
    7d82:	21f2      	movs	r1, #242	; 0xf2
    7d84:	0049      	lsls	r1, r1, #1
    7d86:	4c1d      	ldr	r4, [pc, #116]	; (7dfc <drawKeypad+0x15c>)
    7d88:	47a0      	blx	r4
	//draw ok button
	Ft_Gpu_Hal_WrCmd32(phost,TAG(ok));
    7d8a:	4c13      	ldr	r4, [pc, #76]	; (7dd8 <drawKeypad+0x138>)
    7d8c:	4920      	ldr	r1, [pc, #128]	; (7e10 <drawKeypad+0x170>)
    7d8e:	6820      	ldr	r0, [r4, #0]
    7d90:	4b17      	ldr	r3, [pc, #92]	; (7df0 <drawKeypad+0x150>)
    7d92:	4798      	blx	r3
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    7d94:	6820      	ldr	r0, [r4, #0]
    7d96:	4b17      	ldr	r3, [pc, #92]	; (7df4 <drawKeypad+0x154>)
    7d98:	781b      	ldrb	r3, [r3, #0]
    7d9a:	2b0b      	cmp	r3, #11
    7d9c:	d018      	beq.n	7dd0 <drawKeypad+0x130>
    7d9e:	2200      	movs	r2, #0
    7da0:	4b1c      	ldr	r3, [pc, #112]	; (7e14 <drawKeypad+0x174>)
    7da2:	9303      	str	r3, [sp, #12]
    7da4:	9202      	str	r2, [sp, #8]
    7da6:	231d      	movs	r3, #29
    7da8:	9301      	str	r3, [sp, #4]
    7daa:	3362      	adds	r3, #98	; 0x62
    7dac:	9300      	str	r3, [sp, #0]
    7dae:	3b2f      	subs	r3, #47	; 0x2f
    7db0:	22a3      	movs	r2, #163	; 0xa3
    7db2:	0052      	lsls	r2, r2, #1
    7db4:	21f2      	movs	r1, #242	; 0xf2
    7db6:	0049      	lsls	r1, r1, #1
    7db8:	4c10      	ldr	r4, [pc, #64]	; (7dfc <drawKeypad+0x15c>)
    7dba:	47a0      	blx	r4
}//end drawKeypad
    7dbc:	b004      	add	sp, #16
    7dbe:	bc04      	pop	{r2}
    7dc0:	4690      	mov	r8, r2
    7dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.2, disHei*.82, disWid*.1455, 60, 29, (tag == zero)?  OPT_FLAT:0, "0");
    7dc4:	33d0      	adds	r3, #208	; 0xd0
    7dc6:	e7a2      	b.n	7d0e <drawKeypad+0x6e>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 - disWid*.045, disHei*.82, disWid*.1455, 60, 29, (tag == del)?  OPT_FLAT:0, "<-");
    7dc8:	33f7      	adds	r3, #247	; 0xf7
    7dca:	e7b8      	b.n	7d3e <drawKeypad+0x9e>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.4, disWid*.1, disHei*.265, 29, (tag == clr)?  OPT_FLAT:0, "CLR");
    7dcc:	33f6      	adds	r3, #246	; 0xf6
    7dce:	e7cf      	b.n	7d70 <drawKeypad+0xd0>
	Ft_Gpu_CoCmd_Button(phost, disWid/2 + disWid*.105, disHei*.68, disWid*.1, disHei*.265, 29, (tag == ok)?  OPT_FLAT:0, "OK");
    7dd0:	2280      	movs	r2, #128	; 0x80
    7dd2:	0052      	lsls	r2, r2, #1
    7dd4:	e7e4      	b.n	7da0 <drawKeypad+0x100>
    7dd6:	46c0      	nop			; (mov r8, r8)
    7dd8:	20001c60 	.word	0x20001c60
    7ddc:	0000f41c 	.word	0x0000f41c
    7de0:	0000738d 	.word	0x0000738d
    7de4:	0000f420 	.word	0x0000f420
    7de8:	0000f424 	.word	0x0000f424
    7dec:	03000030 	.word	0x03000030
    7df0:	00007729 	.word	0x00007729
    7df4:	200013f5 	.word	0x200013f5
    7df8:	0000f894 	.word	0x0000f894
    7dfc:	000071f9 	.word	0x000071f9
    7e00:	03000009 	.word	0x03000009
    7e04:	0000f428 	.word	0x0000f428
    7e08:	0300000a 	.word	0x0300000a
    7e0c:	0000f42c 	.word	0x0000f42c
    7e10:	0300000b 	.word	0x0300000b
    7e14:	0000f430 	.word	0x0000f430

00007e18 <drawAlert>:
/* Function Name       : drawAlert
	* Parameters       : int x, int y, char stat
	* Return Values(s) : void
	* Description      : Draw alert, green if good attenuation, red otherwise
	*/
void drawAlert(int x, int y, char stat){
    7e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e1a:	46d6      	mov	lr, sl
    7e1c:	464f      	mov	r7, r9
    7e1e:	4646      	mov	r6, r8
    7e20:	b5c0      	push	{r6, r7, lr}
    7e22:	4680      	mov	r8, r0
    7e24:	000d      	movs	r5, r1
    7e26:	0014      	movs	r4, r2
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    7e28:	4f1f      	ldr	r7, [pc, #124]	; (7ea8 <drawAlert+0x90>)
    7e2a:	4920      	ldr	r1, [pc, #128]	; (7eac <drawAlert+0x94>)
    7e2c:	6838      	ldr	r0, [r7, #0]
    7e2e:	4e20      	ldr	r6, [pc, #128]	; (7eb0 <drawAlert+0x98>)
    7e30:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(7 * 16));
    7e32:	4920      	ldr	r1, [pc, #128]	; (7eb4 <drawAlert+0x9c>)
    7e34:	6838      	ldr	r0, [r7, #0]
    7e36:	47b0      	blx	r6
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    7e38:	6838      	ldr	r0, [r7, #0]
    7e3a:	491f      	ldr	r1, [pc, #124]	; (7eb8 <drawAlert+0xa0>)
    7e3c:	47b0      	blx	r6
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    7e3e:	2c00      	cmp	r4, #0
    7e40:	d02b      	beq.n	7e9a <drawAlert+0x82>
	else					Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(204, 51, 0));
    7e42:	4b19      	ldr	r3, [pc, #100]	; (7ea8 <drawAlert+0x90>)
    7e44:	6818      	ldr	r0, [r3, #0]
    7e46:	491d      	ldr	r1, [pc, #116]	; (7ebc <drawAlert+0xa4>)
    7e48:	4b19      	ldr	r3, [pc, #100]	; (7eb0 <drawAlert+0x98>)
    7e4a:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(x * 16, y * 16) );
    7e4c:	4643      	mov	r3, r8
    7e4e:	04d9      	lsls	r1, r3, #19
    7e50:	4b1b      	ldr	r3, [pc, #108]	; (7ec0 <drawAlert+0xa8>)
    7e52:	469a      	mov	sl, r3
    7e54:	4019      	ands	r1, r3
    7e56:	012b      	lsls	r3, r5, #4
    7e58:	4a1a      	ldr	r2, [pc, #104]	; (7ec4 <drawAlert+0xac>)
    7e5a:	4691      	mov	r9, r2
    7e5c:	4013      	ands	r3, r2
    7e5e:	4319      	orrs	r1, r3
    7e60:	2680      	movs	r6, #128	; 0x80
    7e62:	05f6      	lsls	r6, r6, #23
    7e64:	4331      	orrs	r1, r6
    7e66:	4c10      	ldr	r4, [pc, #64]	; (7ea8 <drawAlert+0x90>)
    7e68:	6820      	ldr	r0, [r4, #0]
    7e6a:	4f11      	ldr	r7, [pc, #68]	; (7eb0 <drawAlert+0x98>)
    7e6c:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((x + 25) * 16, (y + 20) * 16));
    7e6e:	4641      	mov	r1, r8
    7e70:	3119      	adds	r1, #25
    7e72:	04c9      	lsls	r1, r1, #19
    7e74:	4653      	mov	r3, sl
    7e76:	4019      	ands	r1, r3
    7e78:	3514      	adds	r5, #20
    7e7a:	012d      	lsls	r5, r5, #4
    7e7c:	464b      	mov	r3, r9
    7e7e:	401d      	ands	r5, r3
    7e80:	4329      	orrs	r1, r5
    7e82:	4331      	orrs	r1, r6
    7e84:	6820      	ldr	r0, [r4, #0]
    7e86:	47b8      	blx	r7
	Ft_Gpu_Hal_WrCmd32(phost, END());
    7e88:	6820      	ldr	r0, [r4, #0]
    7e8a:	2184      	movs	r1, #132	; 0x84
    7e8c:	0589      	lsls	r1, r1, #22
    7e8e:	47b8      	blx	r7
}//end drawAlert
    7e90:	bc1c      	pop	{r2, r3, r4}
    7e92:	4690      	mov	r8, r2
    7e94:	4699      	mov	r9, r3
    7e96:	46a2      	mov	sl, r4
    7e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (stat == 0)			Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(0, 255, 85));
    7e9a:	4b03      	ldr	r3, [pc, #12]	; (7ea8 <drawAlert+0x90>)
    7e9c:	6818      	ldr	r0, [r3, #0]
    7e9e:	490a      	ldr	r1, [pc, #40]	; (7ec8 <drawAlert+0xb0>)
    7ea0:	4b03      	ldr	r3, [pc, #12]	; (7eb0 <drawAlert+0x98>)
    7ea2:	4798      	blx	r3
    7ea4:	e7d2      	b.n	7e4c <drawAlert+0x34>
    7ea6:	46c0      	nop			; (mov r8, r8)
    7ea8:	20001c60 	.word	0x20001c60
    7eac:	1f000009 	.word	0x1f000009
    7eb0:	00007729 	.word	0x00007729
    7eb4:	0e000070 	.word	0x0e000070
    7eb8:	100000ff 	.word	0x100000ff
    7ebc:	04cc3300 	.word	0x04cc3300
    7ec0:	3ff80000 	.word	0x3ff80000
    7ec4:	00007ff0 	.word	0x00007ff0
    7ec8:	0400ff55 	.word	0x0400ff55

00007ecc <drawRssi>:
/* Function Name    : drawRssi
 * Parameters       : void
 * Return Values(s) : void
 * Description      : draw rssi background
 */
void drawRssi(){
    7ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ece:	b083      	sub	sp, #12
	//draw lines in table style
	Ft_Gpu_Hal_WrCmd32(phost, BEGIN(LINES));
    7ed0:	4c33      	ldr	r4, [pc, #204]	; (7fa0 <drawRssi+0xd4>)
    7ed2:	4934      	ldr	r1, [pc, #208]	; (7fa4 <drawRssi+0xd8>)
    7ed4:	6820      	ldr	r0, [r4, #0]
    7ed6:	4d34      	ldr	r5, [pc, #208]	; (7fa8 <drawRssi+0xdc>)
    7ed8:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(2 * 16));
    7eda:	4934      	ldr	r1, [pc, #208]	; (7fac <drawRssi+0xe0>)
    7edc:	6820      	ldr	r0, [r4, #0]
    7ede:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(150));
    7ee0:	4933      	ldr	r1, [pc, #204]	; (7fb0 <drawRssi+0xe4>)
    7ee2:	6820      	ldr	r0, [r4, #0]
    7ee4:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(50 * 16, 150 * 16) );
    7ee6:	4933      	ldr	r1, [pc, #204]	; (7fb4 <drawRssi+0xe8>)
    7ee8:	6820      	ldr	r0, [r4, #0]
    7eea:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(750 * 16, 150 * 16) );
    7eec:	4932      	ldr	r1, [pc, #200]	; (7fb8 <drawRssi+0xec>)
    7eee:	6820      	ldr	r0, [r4, #0]
    7ef0:	47a8      	blx	r5
		
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(50 * 16, 250 * 16) );
    7ef2:	4932      	ldr	r1, [pc, #200]	; (7fbc <drawRssi+0xf0>)
    7ef4:	6820      	ldr	r0, [r4, #0]
    7ef6:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(750 * 16, 250 * 16) );
    7ef8:	4931      	ldr	r1, [pc, #196]	; (7fc0 <drawRssi+0xf4>)
    7efa:	6820      	ldr	r0, [r4, #0]
    7efc:	47a8      	blx	r5
		
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(50 * 16, 350 * 16) );
    7efe:	4931      	ldr	r1, [pc, #196]	; (7fc4 <drawRssi+0xf8>)
    7f00:	6820      	ldr	r0, [r4, #0]
    7f02:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(750 * 16, 350 * 16) );
    7f04:	4930      	ldr	r1, [pc, #192]	; (7fc8 <drawRssi+0xfc>)
    7f06:	6820      	ldr	r0, [r4, #0]
    7f08:	47a8      	blx	r5
		
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(525 * 16, 75 * 16) );
    7f0a:	4930      	ldr	r1, [pc, #192]	; (7fcc <drawRssi+0x100>)
    7f0c:	6820      	ldr	r0, [r4, #0]
    7f0e:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(525 * 16, 425 * 16) );
    7f10:	492f      	ldr	r1, [pc, #188]	; (7fd0 <drawRssi+0x104>)
    7f12:	6820      	ldr	r0, [r4, #0]
    7f14:	47a8      	blx	r5
		
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(275 * 16, 75 * 16) );
    7f16:	492f      	ldr	r1, [pc, #188]	; (7fd4 <drawRssi+0x108>)
    7f18:	6820      	ldr	r0, [r4, #0]
    7f1a:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(275 * 16, 425 * 16) );
    7f1c:	492e      	ldr	r1, [pc, #184]	; (7fd8 <drawRssi+0x10c>)
    7f1e:	6820      	ldr	r0, [r4, #0]
    7f20:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, END());
    7f22:	2184      	movs	r1, #132	; 0x84
    7f24:	0589      	lsls	r1, r1, #22
    7f26:	6820      	ldr	r0, [r4, #0]
    7f28:	47a8      	blx	r5
	
	//put label into the "table"
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    7f2a:	492c      	ldr	r1, [pc, #176]	; (7fdc <drawRssi+0x110>)
    7f2c:	6820      	ldr	r0, [r4, #0]
    7f2e:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Text(phost, 150, 100, 30, OPT_CENTER,"Unit");
    7f30:	6820      	ldr	r0, [r4, #0]
    7f32:	4b2b      	ldr	r3, [pc, #172]	; (7fe0 <drawRssi+0x114>)
    7f34:	9301      	str	r3, [sp, #4]
    7f36:	26c0      	movs	r6, #192	; 0xc0
    7f38:	00f6      	lsls	r6, r6, #3
    7f3a:	9600      	str	r6, [sp, #0]
    7f3c:	231e      	movs	r3, #30
    7f3e:	2264      	movs	r2, #100	; 0x64
    7f40:	2196      	movs	r1, #150	; 0x96
    7f42:	4d28      	ldr	r5, [pc, #160]	; (7fe4 <drawRssi+0x118>)
    7f44:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Text(phost, 150, 200, 30, OPT_CENTER,"169 MHz");
    7f46:	6820      	ldr	r0, [r4, #0]
    7f48:	4b27      	ldr	r3, [pc, #156]	; (7fe8 <drawRssi+0x11c>)
    7f4a:	9301      	str	r3, [sp, #4]
    7f4c:	9600      	str	r6, [sp, #0]
    7f4e:	231e      	movs	r3, #30
    7f50:	22c8      	movs	r2, #200	; 0xc8
    7f52:	2196      	movs	r1, #150	; 0x96
    7f54:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Text(phost, 150, 300, 30, OPT_CENTER,"915 MHz");
    7f56:	6820      	ldr	r0, [r4, #0]
    7f58:	4b24      	ldr	r3, [pc, #144]	; (7fec <drawRssi+0x120>)
    7f5a:	9301      	str	r3, [sp, #4]
    7f5c:	9600      	str	r6, [sp, #0]
    7f5e:	231e      	movs	r3, #30
    7f60:	2296      	movs	r2, #150	; 0x96
    7f62:	0052      	lsls	r2, r2, #1
    7f64:	2196      	movs	r1, #150	; 0x96
    7f66:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Text(phost, 150, 400, 30, OPT_CENTER,"2.45 GHz");
    7f68:	27c8      	movs	r7, #200	; 0xc8
    7f6a:	007f      	lsls	r7, r7, #1
    7f6c:	6820      	ldr	r0, [r4, #0]
    7f6e:	4b20      	ldr	r3, [pc, #128]	; (7ff0 <drawRssi+0x124>)
    7f70:	9301      	str	r3, [sp, #4]
    7f72:	9600      	str	r6, [sp, #0]
    7f74:	231e      	movs	r3, #30
    7f76:	003a      	movs	r2, r7
    7f78:	2196      	movs	r1, #150	; 0x96
    7f7a:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Text(phost, 400, 100, 30, OPT_CENTER,"Display");
    7f7c:	6820      	ldr	r0, [r4, #0]
    7f7e:	4b1d      	ldr	r3, [pc, #116]	; (7ff4 <drawRssi+0x128>)
    7f80:	9301      	str	r3, [sp, #4]
    7f82:	9600      	str	r6, [sp, #0]
    7f84:	231e      	movs	r3, #30
    7f86:	2264      	movs	r2, #100	; 0x64
    7f88:	0039      	movs	r1, r7
    7f8a:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Text(phost, 650, 100, 30, OPT_CENTER," Receiver ");
    7f8c:	6820      	ldr	r0, [r4, #0]
    7f8e:	4b1a      	ldr	r3, [pc, #104]	; (7ff8 <drawRssi+0x12c>)
    7f90:	9301      	str	r3, [sp, #4]
    7f92:	9600      	str	r6, [sp, #0]
    7f94:	231e      	movs	r3, #30
    7f96:	2264      	movs	r2, #100	; 0x64
    7f98:	4918      	ldr	r1, [pc, #96]	; (7ffc <drawRssi+0x130>)
    7f9a:	47a8      	blx	r5
}//end drawRssi
    7f9c:	b003      	add	sp, #12
    7f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fa0:	20001c60 	.word	0x20001c60
    7fa4:	1f000003 	.word	0x1f000003
    7fa8:	00007729 	.word	0x00007729
    7fac:	0e000020 	.word	0x0e000020
    7fb0:	10000096 	.word	0x10000096
    7fb4:	41900960 	.word	0x41900960
    7fb8:	57700960 	.word	0x57700960
    7fbc:	41900fa0 	.word	0x41900fa0
    7fc0:	57700fa0 	.word	0x57700fa0
    7fc4:	419015e0 	.word	0x419015e0
    7fc8:	577015e0 	.word	0x577015e0
    7fcc:	506804b0 	.word	0x506804b0
    7fd0:	50681a90 	.word	0x50681a90
    7fd4:	489804b0 	.word	0x489804b0
    7fd8:	48981a90 	.word	0x48981a90
    7fdc:	100000ff 	.word	0x100000ff
    7fe0:	0000f450 	.word	0x0000f450
    7fe4:	000070e5 	.word	0x000070e5
    7fe8:	0000f458 	.word	0x0000f458
    7fec:	0000f460 	.word	0x0000f460
    7ff0:	0000f468 	.word	0x0000f468
    7ff4:	0000f474 	.word	0x0000f474
    7ff8:	0000f47c 	.word	0x0000f47c
    7ffc:	0000028a 	.word	0x0000028a

00008000 <appRssi>:
void appRssi(){
    8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rssiStart = attnStart + attnEnd + 4;
    8002:	4b18      	ldr	r3, [pc, #96]	; (8064 <appRssi+0x64>)
    8004:	681b      	ldr	r3, [r3, #0]
    8006:	4a18      	ldr	r2, [pc, #96]	; (8068 <appRssi+0x68>)
    8008:	6812      	ldr	r2, [r2, #0]
    800a:	189b      	adds	r3, r3, r2
    800c:	3304      	adds	r3, #4
    800e:	4f17      	ldr	r7, [pc, #92]	; (806c <appRssi+0x6c>)
    8010:	603b      	str	r3, [r7, #0]
	Ft_Gpu_CoCmd_Dlstart(phost);
    8012:	4c17      	ldr	r4, [pc, #92]	; (8070 <appRssi+0x70>)
    8014:	6820      	ldr	r0, [r4, #0]
    8016:	4b17      	ldr	r3, [pc, #92]	; (8074 <appRssi+0x74>)
    8018:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    801a:	2180      	movs	r1, #128	; 0x80
    801c:	0489      	lsls	r1, r1, #18
    801e:	6820      	ldr	r0, [r4, #0]
    8020:	4d15      	ldr	r5, [pc, #84]	; (8078 <appRssi+0x78>)
    8022:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,0,0));
    8024:	2198      	movs	r1, #152	; 0x98
    8026:	0589      	lsls	r1, r1, #22
    8028:	6820      	ldr	r0, [r4, #0]
    802a:	47a8      	blx	r5
	drawRssi();
    802c:	4b13      	ldr	r3, [pc, #76]	; (807c <appRssi+0x7c>)
    802e:	4798      	blx	r3
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    8030:	6820      	ldr	r0, [r4, #0]
    8032:	4b13      	ldr	r3, [pc, #76]	; (8080 <appRssi+0x80>)
    8034:	4798      	blx	r3
	rssiEnd = Ft_Gpu_Hal_Rd16(phost,REG_CMD_DL) - 3*4;
    8036:	4913      	ldr	r1, [pc, #76]	; (8084 <appRssi+0x84>)
    8038:	6820      	ldr	r0, [r4, #0]
    803a:	4b13      	ldr	r3, [pc, #76]	; (8088 <appRssi+0x88>)
    803c:	4798      	blx	r3
    803e:	380c      	subs	r0, #12
    8040:	4e12      	ldr	r6, [pc, #72]	; (808c <appRssi+0x8c>)
    8042:	6030      	str	r0, [r6, #0]
	Ft_Gpu_Hal_WrCmd32(phost,CMD_MEMCPY);
    8044:	21e3      	movs	r1, #227	; 0xe3
    8046:	4249      	negs	r1, r1
    8048:	6820      	ldr	r0, [r4, #0]
    804a:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost,rssiStart);
    804c:	6839      	ldr	r1, [r7, #0]
    804e:	6820      	ldr	r0, [r4, #0]
    8050:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost,RAM_DL);
    8052:	21c0      	movs	r1, #192	; 0xc0
    8054:	0389      	lsls	r1, r1, #14
    8056:	6820      	ldr	r0, [r4, #0]
    8058:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost,rssiEnd);
    805a:	6831      	ldr	r1, [r6, #0]
    805c:	6820      	ldr	r0, [r4, #0]
    805e:	47a8      	blx	r5
}//end appRssi
    8060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8062:	46c0      	nop			; (mov r8, r8)
    8064:	200013e0 	.word	0x200013e0
    8068:	200013dc 	.word	0x200013dc
    806c:	200013f0 	.word	0x200013f0
    8070:	20001c60 	.word	0x20001c60
    8074:	00007435 	.word	0x00007435
    8078:	00007729 	.word	0x00007729
    807c:	00007ecd 	.word	0x00007ecd
    8080:	000076f9 	.word	0x000076f9
    8084:	00302100 	.word	0x00302100
    8088:	000075e5 	.word	0x000075e5
    808c:	200013ec 	.word	0x200013ec

00008090 <drawHist>:
/* Function Name       : drawHist
 * Parameters       : void
 * Return Values(s) : void
 * Description      : draw history background
 */
void drawHist(){
    8090:	b570      	push	{r4, r5, r6, lr}
    8092:	b082      	sub	sp, #8
	//put label to the background
	Ft_Gpu_Hal_WrCmd32(phost, COLOR_A(255));
    8094:	4c15      	ldr	r4, [pc, #84]	; (80ec <drawHist+0x5c>)
    8096:	4916      	ldr	r1, [pc, #88]	; (80f0 <drawHist+0x60>)
    8098:	6820      	ldr	r0, [r4, #0]
    809a:	4b16      	ldr	r3, [pc, #88]	; (80f4 <drawHist+0x64>)
    809c:	4798      	blx	r3
	Ft_Gpu_CoCmd_Text(phost, 100, 110, 28, OPT_CENTER," Date and Time ");
    809e:	6820      	ldr	r0, [r4, #0]
    80a0:	4b15      	ldr	r3, [pc, #84]	; (80f8 <drawHist+0x68>)
    80a2:	9301      	str	r3, [sp, #4]
    80a4:	26c0      	movs	r6, #192	; 0xc0
    80a6:	00f6      	lsls	r6, r6, #3
    80a8:	9600      	str	r6, [sp, #0]
    80aa:	231c      	movs	r3, #28
    80ac:	226e      	movs	r2, #110	; 0x6e
    80ae:	2164      	movs	r1, #100	; 0x64
    80b0:	4d12      	ldr	r5, [pc, #72]	; (80fc <drawHist+0x6c>)
    80b2:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Text(phost, 100, 400, 28, OPT_CENTER," 169 MHz ");
    80b4:	6820      	ldr	r0, [r4, #0]
    80b6:	4b12      	ldr	r3, [pc, #72]	; (8100 <drawHist+0x70>)
    80b8:	9301      	str	r3, [sp, #4]
    80ba:	9600      	str	r6, [sp, #0]
    80bc:	231c      	movs	r3, #28
    80be:	22c8      	movs	r2, #200	; 0xc8
    80c0:	0052      	lsls	r2, r2, #1
    80c2:	2164      	movs	r1, #100	; 0x64
    80c4:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Text(phost, 100, 550, 28, OPT_CENTER," 915 MHz ");
    80c6:	6820      	ldr	r0, [r4, #0]
    80c8:	4b0e      	ldr	r3, [pc, #56]	; (8104 <drawHist+0x74>)
    80ca:	9301      	str	r3, [sp, #4]
    80cc:	9600      	str	r6, [sp, #0]
    80ce:	231c      	movs	r3, #28
    80d0:	4a0d      	ldr	r2, [pc, #52]	; (8108 <drawHist+0x78>)
    80d2:	2164      	movs	r1, #100	; 0x64
    80d4:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Text(phost, 100, 700, 28, OPT_CENTER," 2.45 GHz ");
    80d6:	6820      	ldr	r0, [r4, #0]
    80d8:	4b0c      	ldr	r3, [pc, #48]	; (810c <drawHist+0x7c>)
    80da:	9301      	str	r3, [sp, #4]
    80dc:	9600      	str	r6, [sp, #0]
    80de:	231c      	movs	r3, #28
    80e0:	22af      	movs	r2, #175	; 0xaf
    80e2:	0092      	lsls	r2, r2, #2
    80e4:	2164      	movs	r1, #100	; 0x64
    80e6:	47a8      	blx	r5
}//end drawHist
    80e8:	b002      	add	sp, #8
    80ea:	bd70      	pop	{r4, r5, r6, pc}
    80ec:	20001c60 	.word	0x20001c60
    80f0:	100000ff 	.word	0x100000ff
    80f4:	00007729 	.word	0x00007729
    80f8:	0000f3e8 	.word	0x0000f3e8
    80fc:	000070e5 	.word	0x000070e5
    8100:	0000f3f8 	.word	0x0000f3f8
    8104:	0000f404 	.word	0x0000f404
    8108:	00000226 	.word	0x00000226
    810c:	0000f410 	.word	0x0000f410

00008110 <appHist>:
void appHist(){
    8110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	histStart = rssiEnd + rssiStart + 4;Ft_Gpu_CoCmd_Dlstart(phost);
    8112:	4b18      	ldr	r3, [pc, #96]	; (8174 <appHist+0x64>)
    8114:	681b      	ldr	r3, [r3, #0]
    8116:	4a18      	ldr	r2, [pc, #96]	; (8178 <appHist+0x68>)
    8118:	6812      	ldr	r2, [r2, #0]
    811a:	189b      	adds	r3, r3, r2
    811c:	3304      	adds	r3, #4
    811e:	4f17      	ldr	r7, [pc, #92]	; (817c <appHist+0x6c>)
    8120:	603b      	str	r3, [r7, #0]
    8122:	4c17      	ldr	r4, [pc, #92]	; (8180 <appHist+0x70>)
    8124:	6820      	ldr	r0, [r4, #0]
    8126:	4b17      	ldr	r3, [pc, #92]	; (8184 <appHist+0x74>)
    8128:	4798      	blx	r3
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    812a:	2180      	movs	r1, #128	; 0x80
    812c:	0489      	lsls	r1, r1, #18
    812e:	6820      	ldr	r0, [r4, #0]
    8130:	4d15      	ldr	r5, [pc, #84]	; (8188 <appHist+0x78>)
    8132:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(0,0,0));
    8134:	2198      	movs	r1, #152	; 0x98
    8136:	0589      	lsls	r1, r1, #22
    8138:	6820      	ldr	r0, [r4, #0]
    813a:	47a8      	blx	r5
	drawHist();
    813c:	4b13      	ldr	r3, [pc, #76]	; (818c <appHist+0x7c>)
    813e:	4798      	blx	r3
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    8140:	6820      	ldr	r0, [r4, #0]
    8142:	4b13      	ldr	r3, [pc, #76]	; (8190 <appHist+0x80>)
    8144:	4798      	blx	r3
	histEnd = Ft_Gpu_Hal_Rd16(phost,REG_CMD_DL) - 3*4;
    8146:	4913      	ldr	r1, [pc, #76]	; (8194 <appHist+0x84>)
    8148:	6820      	ldr	r0, [r4, #0]
    814a:	4b13      	ldr	r3, [pc, #76]	; (8198 <appHist+0x88>)
    814c:	4798      	blx	r3
    814e:	380c      	subs	r0, #12
    8150:	4e12      	ldr	r6, [pc, #72]	; (819c <appHist+0x8c>)
    8152:	6030      	str	r0, [r6, #0]
	Ft_Gpu_Hal_WrCmd32(phost,CMD_MEMCPY);
    8154:	21e3      	movs	r1, #227	; 0xe3
    8156:	4249      	negs	r1, r1
    8158:	6820      	ldr	r0, [r4, #0]
    815a:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost,histStart);
    815c:	6839      	ldr	r1, [r7, #0]
    815e:	6820      	ldr	r0, [r4, #0]
    8160:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost,RAM_DL);
    8162:	21c0      	movs	r1, #192	; 0xc0
    8164:	0389      	lsls	r1, r1, #14
    8166:	6820      	ldr	r0, [r4, #0]
    8168:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost,histEnd);
    816a:	6831      	ldr	r1, [r6, #0]
    816c:	6820      	ldr	r0, [r4, #0]
    816e:	47a8      	blx	r5
}//end appHist
    8170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8172:	46c0      	nop			; (mov r8, r8)
    8174:	200013ec 	.word	0x200013ec
    8178:	200013f0 	.word	0x200013f0
    817c:	200013e8 	.word	0x200013e8
    8180:	20001c60 	.word	0x20001c60
    8184:	00007435 	.word	0x00007435
    8188:	00007729 	.word	0x00007729
    818c:	00008091 	.word	0x00008091
    8190:	000076f9 	.word	0x000076f9
    8194:	00302100 	.word	0x00302100
    8198:	000075e5 	.word	0x000075e5
    819c:	200013e4 	.word	0x200013e4

000081a0 <disStart>:
/* Function Name    : disStart
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display start sequence
 */
void disStart(){
    81a0:	b570      	push	{r4, r5, r6, lr}
	Ft_Gpu_CoCmd_Dlstart(phost);
    81a2:	4c06      	ldr	r4, [pc, #24]	; (81bc <disStart+0x1c>)
    81a4:	6820      	ldr	r0, [r4, #0]
    81a6:	4b06      	ldr	r3, [pc, #24]	; (81c0 <disStart+0x20>)
    81a8:	4798      	blx	r3
    //change this for initial bg
	Ft_Gpu_Hal_WrCmd32(phost,CLEAR_COLOR_RGB(0,0,0));
    81aa:	2180      	movs	r1, #128	; 0x80
    81ac:	0489      	lsls	r1, r1, #18
    81ae:	6820      	ldr	r0, [r4, #0]
    81b0:	4d04      	ldr	r5, [pc, #16]	; (81c4 <disStart+0x24>)
    81b2:	47a8      	blx	r5
	Ft_Gpu_Hal_WrCmd32(phost, CLEAR(1,1,1));
    81b4:	6820      	ldr	r0, [r4, #0]
    81b6:	4904      	ldr	r1, [pc, #16]	; (81c8 <disStart+0x28>)
    81b8:	47a8      	blx	r5
}//end disStart
    81ba:	bd70      	pop	{r4, r5, r6, pc}
    81bc:	20001c60 	.word	0x20001c60
    81c0:	00007435 	.word	0x00007435
    81c4:	00007729 	.word	0x00007729
    81c8:	26000007 	.word	0x26000007

000081cc <disEnd>:
/* Function Name    : disEnd
 * Parameters       : void
 * Return Values(s) : void
 * Description      : display end sequence
 */
void disEnd(){
    81cc:	b510      	push	{r4, lr}
	Ft_Gpu_Hal_WrCmd32(phost,DISPLAY());
    81ce:	4c06      	ldr	r4, [pc, #24]	; (81e8 <disEnd+0x1c>)
    81d0:	2100      	movs	r1, #0
    81d2:	6820      	ldr	r0, [r4, #0]
    81d4:	4b05      	ldr	r3, [pc, #20]	; (81ec <disEnd+0x20>)
    81d6:	4798      	blx	r3
	Ft_Gpu_CoCmd_Swap(phost);
    81d8:	6820      	ldr	r0, [r4, #0]
    81da:	4b05      	ldr	r3, [pc, #20]	; (81f0 <disEnd+0x24>)
    81dc:	4798      	blx	r3
	Ft_Gpu_Hal_WaitCmdfifo_empty(phost);
    81de:	6820      	ldr	r0, [r4, #0]
    81e0:	4b04      	ldr	r3, [pc, #16]	; (81f4 <disEnd+0x28>)
    81e2:	4798      	blx	r3
}//end disEnd
    81e4:	bd10      	pop	{r4, pc}
    81e6:	46c0      	nop			; (mov r8, r8)
    81e8:	20001c60 	.word	0x20001c60
    81ec:	00007729 	.word	0x00007729
    81f0:	000071cd 	.word	0x000071cd
    81f4:	000076f9 	.word	0x000076f9

000081f8 <attnOp>:
void attnOp(rssi_vals* attn_vals){
    81f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    81fa:	46de      	mov	lr, fp
    81fc:	4657      	mov	r7, sl
    81fe:	464e      	mov	r6, r9
    8200:	4645      	mov	r5, r8
    8202:	b5e0      	push	{r5, r6, r7, lr}
    8204:	b085      	sub	sp, #20
    char lastSec, lastMin=1, lastGood = time.second, trigger=0;
    8206:	4b95      	ldr	r3, [pc, #596]	; (845c <attnOp+0x264>)
    8208:	781b      	ldrb	r3, [r3, #0]
    820a:	9303      	str	r3, [sp, #12]
    820c:	2500      	movs	r5, #0
    820e:	2301      	movs	r3, #1
    8210:	4699      	mov	r9, r3
    8212:	e064      	b.n	82de <attnOp+0xe6>
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    8214:	2300      	movs	r3, #0
    8216:	e09f      	b.n	8358 <attnOp+0x160>
		Ft_Gpu_CoCmd_Number(phost, 500, 255, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    8218:	2300      	movs	r3, #0
    821a:	e0b2      	b.n	8382 <attnOp+0x18a>
		Ft_Gpu_CoCmd_Number(phost, 500, 385, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    821c:	2300      	movs	r3, #0
    821e:	e0c5      	b.n	83ac <attnOp+0x1b4>
			drawAlert(40, 27, (attenuation.rssi169<80)? 1:0);
    8220:	4b8f      	ldr	r3, [pc, #572]	; (8460 <attnOp+0x268>)
    8222:	469b      	mov	fp, r3
    8224:	881b      	ldrh	r3, [r3, #0]
    8226:	b21b      	sxth	r3, r3
    8228:	274f      	movs	r7, #79	; 0x4f
    822a:	0fda      	lsrs	r2, r3, #31
    822c:	2100      	movs	r1, #0
    822e:	468a      	mov	sl, r1
    8230:	429f      	cmp	r7, r3
    8232:	414a      	adcs	r2, r1
    8234:	b2d2      	uxtb	r2, r2
    8236:	311b      	adds	r1, #27
    8238:	2028      	movs	r0, #40	; 0x28
    823a:	4c8a      	ldr	r4, [pc, #552]	; (8464 <attnOp+0x26c>)
    823c:	47a0      	blx	r4
			drawAlert(40, 60, (attenuation.rssi915<80)? 1:0);
    823e:	465b      	mov	r3, fp
    8240:	885b      	ldrh	r3, [r3, #2]
    8242:	b21b      	sxth	r3, r3
    8244:	0fda      	lsrs	r2, r3, #31
    8246:	4651      	mov	r1, sl
    8248:	429f      	cmp	r7, r3
    824a:	414a      	adcs	r2, r1
    824c:	b2d2      	uxtb	r2, r2
    824e:	313c      	adds	r1, #60	; 0x3c
    8250:	2028      	movs	r0, #40	; 0x28
    8252:	47a0      	blx	r4
			drawAlert(40, 93, (attenuation.rssi245<80)? 1:0);
    8254:	465b      	mov	r3, fp
    8256:	889b      	ldrh	r3, [r3, #4]
    8258:	b21b      	sxth	r3, r3
    825a:	0fda      	lsrs	r2, r3, #31
    825c:	4651      	mov	r1, sl
    825e:	429f      	cmp	r7, r3
    8260:	414a      	adcs	r2, r1
    8262:	b2d2      	uxtb	r2, r2
    8264:	315d      	adds	r1, #93	; 0x5d
    8266:	2028      	movs	r0, #40	; 0x28
    8268:	47a0      	blx	r4
    826a:	e0af      	b.n	83cc <attnOp+0x1d4>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    826c:	4b7b      	ldr	r3, [pc, #492]	; (845c <attnOp+0x264>)
    826e:	781b      	ldrb	r3, [r3, #0]
    8270:	9a03      	ldr	r2, [sp, #12]
    8272:	1a9b      	subs	r3, r3, r2
    8274:	2b0a      	cmp	r3, #10
    8276:	d100      	bne.n	827a <attnOp+0x82>
    8278:	e0bf      	b.n	83fa <attnOp+0x202>
    827a:	3332      	adds	r3, #50	; 0x32
    827c:	d100      	bne.n	8280 <attnOp+0x88>
    827e:	e0bc      	b.n	83fa <attnOp+0x202>
		if (trigger == 1){
    8280:	2d01      	cmp	r5, #1
    8282:	d100      	bne.n	8286 <attnOp+0x8e>
    8284:	e0be      	b.n	8404 <attnOp+0x20c>
		if (time.minute%30 == 0 && time.minute != lastMin){
    8286:	4b75      	ldr	r3, [pc, #468]	; (845c <attnOp+0x264>)
    8288:	785c      	ldrb	r4, [r3, #1]
    828a:	211e      	movs	r1, #30
    828c:	0020      	movs	r0, r4
    828e:	4b76      	ldr	r3, [pc, #472]	; (8468 <attnOp+0x270>)
    8290:	4798      	blx	r3
    8292:	b2c9      	uxtb	r1, r1
    8294:	2900      	cmp	r1, #0
    8296:	d111      	bne.n	82bc <attnOp+0xc4>
    8298:	45a1      	cmp	r9, r4
    829a:	d00f      	beq.n	82bc <attnOp+0xc4>
			saveHist(uartib_get_169_rssi(), uartib_get_915_rssi(), uartib_get_245_rssi());
    829c:	4b73      	ldr	r3, [pc, #460]	; (846c <attnOp+0x274>)
    829e:	4798      	blx	r3
    82a0:	0004      	movs	r4, r0
    82a2:	4b73      	ldr	r3, [pc, #460]	; (8470 <attnOp+0x278>)
    82a4:	4798      	blx	r3
    82a6:	0007      	movs	r7, r0
    82a8:	4b72      	ldr	r3, [pc, #456]	; (8474 <attnOp+0x27c>)
    82aa:	4798      	blx	r3
    82ac:	b202      	sxth	r2, r0
    82ae:	b239      	sxth	r1, r7
    82b0:	b220      	sxth	r0, r4
    82b2:	4b71      	ldr	r3, [pc, #452]	; (8478 <attnOp+0x280>)
    82b4:	4798      	blx	r3
			lastMin = time.minute;
    82b6:	4b69      	ldr	r3, [pc, #420]	; (845c <attnOp+0x264>)
    82b8:	785b      	ldrb	r3, [r3, #1]
    82ba:	4699      	mov	r9, r3
        Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    82bc:	4b6f      	ldr	r3, [pc, #444]	; (847c <attnOp+0x284>)
    82be:	6818      	ldr	r0, [r3, #0]
    82c0:	496f      	ldr	r1, [pc, #444]	; (8480 <attnOp+0x288>)
    82c2:	4b70      	ldr	r3, [pc, #448]	; (8484 <attnOp+0x28c>)
    82c4:	4798      	blx	r3
        drawBack();
    82c6:	4b70      	ldr	r3, [pc, #448]	; (8488 <attnOp+0x290>)
    82c8:	4798      	blx	r3
		drawTitle("Attenuation");
    82ca:	4870      	ldr	r0, [pc, #448]	; (848c <attnOp+0x294>)
    82cc:	4b70      	ldr	r3, [pc, #448]	; (8490 <attnOp+0x298>)
    82ce:	4798      	blx	r3
		disEnd();
    82d0:	4b70      	ldr	r3, [pc, #448]	; (8494 <attnOp+0x29c>)
    82d2:	4798      	blx	r3
	} while (tag != back);
    82d4:	4b70      	ldr	r3, [pc, #448]	; (8498 <attnOp+0x2a0>)
    82d6:	781b      	ldrb	r3, [r3, #0]
    82d8:	2b06      	cmp	r3, #6
    82da:	d100      	bne.n	82de <attnOp+0xe6>
    82dc:	e0b7      	b.n	844e <attnOp+0x256>
		tag = 0;
    82de:	4f6e      	ldr	r7, [pc, #440]	; (8498 <attnOp+0x2a0>)
    82e0:	2300      	movs	r3, #0
    82e2:	703b      	strb	r3, [r7, #0]
		rtc_calendar_get_time(&rtc_instance, &time);
    82e4:	495d      	ldr	r1, [pc, #372]	; (845c <attnOp+0x264>)
    82e6:	486d      	ldr	r0, [pc, #436]	; (849c <attnOp+0x2a4>)
    82e8:	4b6d      	ldr	r3, [pc, #436]	; (84a0 <attnOp+0x2a8>)
    82ea:	4798      	blx	r3
		attenuation.rssi169 = uartib_get_169_rssi() - uartfiber_get_169_rssi() + 10;	//10 offset added based on testing 
    82ec:	4b5f      	ldr	r3, [pc, #380]	; (846c <attnOp+0x274>)
    82ee:	4798      	blx	r3
    82f0:	b284      	uxth	r4, r0
    82f2:	4b6c      	ldr	r3, [pc, #432]	; (84a4 <attnOp+0x2ac>)
    82f4:	4798      	blx	r3
    82f6:	b280      	uxth	r0, r0
    82f8:	1a24      	subs	r4, r4, r0
    82fa:	b2a4      	uxth	r4, r4
    82fc:	340a      	adds	r4, #10
    82fe:	b224      	sxth	r4, r4
    8300:	4e57      	ldr	r6, [pc, #348]	; (8460 <attnOp+0x268>)
    8302:	8034      	strh	r4, [r6, #0]
		attenuation.rssi915 = uartib_get_915_rssi() - uartfiber_get_915_rssi();				// approved by Dr. Nguyen
    8304:	4b5a      	ldr	r3, [pc, #360]	; (8470 <attnOp+0x278>)
    8306:	4798      	blx	r3
    8308:	b284      	uxth	r4, r0
    830a:	4b67      	ldr	r3, [pc, #412]	; (84a8 <attnOp+0x2b0>)
    830c:	4798      	blx	r3
    830e:	b280      	uxth	r0, r0
    8310:	1a24      	subs	r4, r4, r0
    8312:	b224      	sxth	r4, r4
    8314:	8074      	strh	r4, [r6, #2]
		attenuation.rssi245 = uartib_get_245_rssi() - uartfiber_get_245_rssi();
    8316:	4b57      	ldr	r3, [pc, #348]	; (8474 <attnOp+0x27c>)
    8318:	4798      	blx	r3
    831a:	b284      	uxth	r4, r0
    831c:	4b63      	ldr	r3, [pc, #396]	; (84ac <attnOp+0x2b4>)
    831e:	4798      	blx	r3
    8320:	b280      	uxth	r0, r0
    8322:	1a24      	subs	r4, r4, r0
    8324:	b224      	sxth	r4, r4
    8326:	80b4      	strh	r4, [r6, #4]
		disStart();
    8328:	4b61      	ldr	r3, [pc, #388]	; (84b0 <attnOp+0x2b8>)
    832a:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    832c:	4c53      	ldr	r4, [pc, #332]	; (847c <attnOp+0x284>)
    832e:	4961      	ldr	r1, [pc, #388]	; (84b4 <attnOp+0x2bc>)
    8330:	6820      	ldr	r0, [r4, #0]
    8332:	4b61      	ldr	r3, [pc, #388]	; (84b8 <attnOp+0x2c0>)
    8334:	4798      	blx	r3
    8336:	7038      	strb	r0, [r7, #0]
		Ft_Gpu_CoCmd_Append(phost, attnStart, attnEnd);
    8338:	4b60      	ldr	r3, [pc, #384]	; (84bc <attnOp+0x2c4>)
    833a:	681a      	ldr	r2, [r3, #0]
    833c:	4b60      	ldr	r3, [pc, #384]	; (84c0 <attnOp+0x2c8>)
    833e:	6819      	ldr	r1, [r3, #0]
    8340:	6820      	ldr	r0, [r4, #0]
    8342:	4b60      	ldr	r3, [pc, #384]	; (84c4 <attnOp+0x2cc>)
    8344:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 500, 125, 31, OPT_SIGNED|3, ((attenuation.rssi169<0)? 0:attenuation.rssi169));
    8346:	6820      	ldr	r0, [r4, #0]
    8348:	8833      	ldrh	r3, [r6, #0]
    834a:	b21b      	sxth	r3, r3
    834c:	2b00      	cmp	r3, #0
    834e:	da00      	bge.n	8352 <attnOp+0x15a>
    8350:	e760      	b.n	8214 <attnOp+0x1c>
    8352:	4b43      	ldr	r3, [pc, #268]	; (8460 <attnOp+0x268>)
    8354:	881b      	ldrh	r3, [r3, #0]
    8356:	b21b      	sxth	r3, r3
    8358:	9301      	str	r3, [sp, #4]
    835a:	2304      	movs	r3, #4
    835c:	33ff      	adds	r3, #255	; 0xff
    835e:	9300      	str	r3, [sp, #0]
    8360:	3be4      	subs	r3, #228	; 0xe4
    8362:	227d      	movs	r2, #125	; 0x7d
    8364:	21fa      	movs	r1, #250	; 0xfa
    8366:	0049      	lsls	r1, r1, #1
    8368:	4c57      	ldr	r4, [pc, #348]	; (84c8 <attnOp+0x2d0>)
    836a:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 255, 31, OPT_SIGNED|3, ((attenuation.rssi915<0)? 0:attenuation.rssi915));
    836c:	4b43      	ldr	r3, [pc, #268]	; (847c <attnOp+0x284>)
    836e:	6818      	ldr	r0, [r3, #0]
    8370:	4b3b      	ldr	r3, [pc, #236]	; (8460 <attnOp+0x268>)
    8372:	885b      	ldrh	r3, [r3, #2]
    8374:	b21b      	sxth	r3, r3
    8376:	2b00      	cmp	r3, #0
    8378:	da00      	bge.n	837c <attnOp+0x184>
    837a:	e74d      	b.n	8218 <attnOp+0x20>
    837c:	4b38      	ldr	r3, [pc, #224]	; (8460 <attnOp+0x268>)
    837e:	885b      	ldrh	r3, [r3, #2]
    8380:	b21b      	sxth	r3, r3
    8382:	9301      	str	r3, [sp, #4]
    8384:	2304      	movs	r3, #4
    8386:	33ff      	adds	r3, #255	; 0xff
    8388:	9300      	str	r3, [sp, #0]
    838a:	3be4      	subs	r3, #228	; 0xe4
    838c:	22ff      	movs	r2, #255	; 0xff
    838e:	21fa      	movs	r1, #250	; 0xfa
    8390:	0049      	lsls	r1, r1, #1
    8392:	4c4d      	ldr	r4, [pc, #308]	; (84c8 <attnOp+0x2d0>)
    8394:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Number(phost, 500, 385, 31, OPT_SIGNED|3, ((attenuation.rssi245<0)? 0:attenuation.rssi245));
    8396:	4b39      	ldr	r3, [pc, #228]	; (847c <attnOp+0x284>)
    8398:	6818      	ldr	r0, [r3, #0]
    839a:	4b31      	ldr	r3, [pc, #196]	; (8460 <attnOp+0x268>)
    839c:	889b      	ldrh	r3, [r3, #4]
    839e:	b21b      	sxth	r3, r3
    83a0:	2b00      	cmp	r3, #0
    83a2:	da00      	bge.n	83a6 <attnOp+0x1ae>
    83a4:	e73a      	b.n	821c <attnOp+0x24>
    83a6:	4b2e      	ldr	r3, [pc, #184]	; (8460 <attnOp+0x268>)
    83a8:	889b      	ldrh	r3, [r3, #4]
    83aa:	b21b      	sxth	r3, r3
    83ac:	9301      	str	r3, [sp, #4]
    83ae:	2304      	movs	r3, #4
    83b0:	33ff      	adds	r3, #255	; 0xff
    83b2:	9300      	str	r3, [sp, #0]
    83b4:	3be4      	subs	r3, #228	; 0xe4
    83b6:	2282      	movs	r2, #130	; 0x82
    83b8:	32ff      	adds	r2, #255	; 0xff
    83ba:	21fa      	movs	r1, #250	; 0xfa
    83bc:	0049      	lsls	r1, r1, #1
    83be:	4c42      	ldr	r4, [pc, #264]	; (84c8 <attnOp+0x2d0>)
    83c0:	47a0      	blx	r4
		if (alert == 1){
    83c2:	4b42      	ldr	r3, [pc, #264]	; (84cc <attnOp+0x2d4>)
    83c4:	781b      	ldrb	r3, [r3, #0]
    83c6:	2b01      	cmp	r3, #1
    83c8:	d100      	bne.n	83cc <attnOp+0x1d4>
    83ca:	e729      	b.n	8220 <attnOp+0x28>
		if (attenuation.rssi169>80 && attenuation.rssi915>80 && attenuation.rssi245>80){
    83cc:	4b24      	ldr	r3, [pc, #144]	; (8460 <attnOp+0x268>)
    83ce:	881b      	ldrh	r3, [r3, #0]
    83d0:	b21b      	sxth	r3, r3
    83d2:	2b50      	cmp	r3, #80	; 0x50
    83d4:	dc00      	bgt.n	83d8 <attnOp+0x1e0>
    83d6:	e749      	b.n	826c <attnOp+0x74>
    83d8:	4b21      	ldr	r3, [pc, #132]	; (8460 <attnOp+0x268>)
    83da:	885b      	ldrh	r3, [r3, #2]
    83dc:	b21b      	sxth	r3, r3
    83de:	2b50      	cmp	r3, #80	; 0x50
    83e0:	dc00      	bgt.n	83e4 <attnOp+0x1ec>
    83e2:	e743      	b.n	826c <attnOp+0x74>
    83e4:	4b1e      	ldr	r3, [pc, #120]	; (8460 <attnOp+0x268>)
    83e6:	889b      	ldrh	r3, [r3, #4]
    83e8:	b21b      	sxth	r3, r3
    83ea:	2b50      	cmp	r3, #80	; 0x50
    83ec:	dc00      	bgt.n	83f0 <attnOp+0x1f8>
    83ee:	e73d      	b.n	826c <attnOp+0x74>
			lastGood = time.second;
    83f0:	4b1a      	ldr	r3, [pc, #104]	; (845c <attnOp+0x264>)
    83f2:	781b      	ldrb	r3, [r3, #0]
    83f4:	9303      	str	r3, [sp, #12]
			trigger = 0;
    83f6:	2500      	movs	r5, #0
    83f8:	e742      	b.n	8280 <attnOp+0x88>
		}else if ((time.second-lastGood == 10 ||time.second - lastGood == -50) && trigger == 0)
    83fa:	2d00      	cmp	r5, #0
    83fc:	d000      	beq.n	8400 <attnOp+0x208>
    83fe:	e73f      	b.n	8280 <attnOp+0x88>
				trigger = 1;
    8400:	3501      	adds	r5, #1
    8402:	e73d      	b.n	8280 <attnOp+0x88>
			saveHist(uartib_get_169_rssi(), uartib_get_915_rssi(), uartib_get_245_rssi());
    8404:	4b19      	ldr	r3, [pc, #100]	; (846c <attnOp+0x274>)
    8406:	4798      	blx	r3
    8408:	0004      	movs	r4, r0
    840a:	4b19      	ldr	r3, [pc, #100]	; (8470 <attnOp+0x278>)
    840c:	4798      	blx	r3
    840e:	0007      	movs	r7, r0
    8410:	4b18      	ldr	r3, [pc, #96]	; (8474 <attnOp+0x27c>)
    8412:	4798      	blx	r3
    8414:	b202      	sxth	r2, r0
    8416:	b239      	sxth	r1, r7
    8418:	b220      	sxth	r0, r4
    841a:	4b17      	ldr	r3, [pc, #92]	; (8478 <attnOp+0x280>)
    841c:	4798      	blx	r3
			if (time.second%5 == 0 && time.second != lastSec && sound==1){
    841e:	4b0f      	ldr	r3, [pc, #60]	; (845c <attnOp+0x264>)
    8420:	781c      	ldrb	r4, [r3, #0]
    8422:	2105      	movs	r1, #5
    8424:	0020      	movs	r0, r4
    8426:	4b10      	ldr	r3, [pc, #64]	; (8468 <attnOp+0x270>)
    8428:	4798      	blx	r3
    842a:	b2c9      	uxtb	r1, r1
    842c:	2900      	cmp	r1, #0
    842e:	d000      	beq.n	8432 <attnOp+0x23a>
    8430:	e729      	b.n	8286 <attnOp+0x8e>
    8432:	45a0      	cmp	r8, r4
    8434:	d100      	bne.n	8438 <attnOp+0x240>
    8436:	e726      	b.n	8286 <attnOp+0x8e>
    8438:	4b25      	ldr	r3, [pc, #148]	; (84d0 <attnOp+0x2d8>)
    843a:	781b      	ldrb	r3, [r3, #0]
    843c:	2b01      	cmp	r3, #1
    843e:	d000      	beq.n	8442 <attnOp+0x24a>
    8440:	e721      	b.n	8286 <attnOp+0x8e>
				play();
    8442:	4b24      	ldr	r3, [pc, #144]	; (84d4 <attnOp+0x2dc>)
    8444:	4798      	blx	r3
				lastSec = time.second;
    8446:	4b05      	ldr	r3, [pc, #20]	; (845c <attnOp+0x264>)
    8448:	781b      	ldrb	r3, [r3, #0]
    844a:	4698      	mov	r8, r3
    844c:	e71b      	b.n	8286 <attnOp+0x8e>
}// end attnOp
    844e:	b005      	add	sp, #20
    8450:	bc3c      	pop	{r2, r3, r4, r5}
    8452:	4690      	mov	r8, r2
    8454:	4699      	mov	r9, r3
    8456:	46a2      	mov	sl, r4
    8458:	46ab      	mov	fp, r5
    845a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    845c:	20001c58 	.word	0x20001c58
    8460:	200013d4 	.word	0x200013d4
    8464:	00007e19 	.word	0x00007e19
    8468:	0000ccbd 	.word	0x0000ccbd
    846c:	00006ff5 	.word	0x00006ff5
    8470:	00007029 	.word	0x00007029
    8474:	0000705d 	.word	0x0000705d
    8478:	000078c9 	.word	0x000078c9
    847c:	20001c60 	.word	0x20001c60
    8480:	04ffffff 	.word	0x04ffffff
    8484:	00007729 	.word	0x00007729
    8488:	00007c45 	.word	0x00007c45
    848c:	0000f3b8 	.word	0x0000f3b8
    8490:	00007bc5 	.word	0x00007bc5
    8494:	000081cd 	.word	0x000081cd
    8498:	200013f5 	.word	0x200013f5
    849c:	20001940 	.word	0x20001940
    84a0:	00000555 	.word	0x00000555
    84a4:	00006e9d 	.word	0x00006e9d
    84a8:	00006ed1 	.word	0x00006ed1
    84ac:	00006f05 	.word	0x00006f05
    84b0:	000081a1 	.word	0x000081a1
    84b4:	0030212c 	.word	0x0030212c
    84b8:	000075b9 	.word	0x000075b9
    84bc:	200013dc 	.word	0x200013dc
    84c0:	200013e0 	.word	0x200013e0
    84c4:	000072dd 	.word	0x000072dd
    84c8:	00007169 	.word	0x00007169
    84cc:	2000024f 	.word	0x2000024f
    84d0:	200013f4 	.word	0x200013f4
    84d4:	00007839 	.word	0x00007839

000084d8 <historyOp>:
void historyOp(){
    84d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    84da:	46de      	mov	lr, fp
    84dc:	4657      	mov	r7, sl
    84de:	464e      	mov	r6, r9
    84e0:	4645      	mov	r5, r8
    84e2:	b5e0      	push	{r5, r6, r7, lr}
    84e4:	b0af      	sub	sp, #188	; 0xbc
    84e6:	e05a      	b.n	859e <historyOp+0xc6>
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    84e8:	1c5a      	adds	r2, r3, #1
    84ea:	920b      	str	r2, [sp, #44]	; 0x2c
					i+1, history[i][0], history[i][1], history[i][2], history[i][3], history[i][4], \
    84ec:	4e3a      	ldr	r6, [pc, #232]	; (85d8 <historyOp+0x100>)
    84ee:	009a      	lsls	r2, r3, #2
    84f0:	18d0      	adds	r0, r2, r3
    84f2:	0081      	lsls	r1, r0, #2
    84f4:	5f8d      	ldrsh	r5, [r1, r6]
    84f6:	0081      	lsls	r1, r0, #2
    84f8:	1871      	adds	r1, r6, r1
    84fa:	2702      	movs	r7, #2
    84fc:	5fc8      	ldrsh	r0, [r1, r7]
    84fe:	900c      	str	r0, [sp, #48]	; 0x30
    8500:	2704      	movs	r7, #4
    8502:	5fc8      	ldrsh	r0, [r1, r7]
    8504:	2706      	movs	r7, #6
    8506:	5fcc      	ldrsh	r4, [r1, r7]
    8508:	940d      	str	r4, [sp, #52]	; 0x34
    850a:	2408      	movs	r4, #8
    850c:	5f0f      	ldrsh	r7, [r1, r4]
    850e:	46bc      	mov	ip, r7
					history[i][5], history[i][6], history[i][7], history[i][8], history[i][9]);
    8510:	240a      	movs	r4, #10
    8512:	5f0f      	ldrsh	r7, [r1, r4]
    8514:	46b8      	mov	r8, r7
    8516:	240c      	movs	r4, #12
    8518:	5f0f      	ldrsh	r7, [r1, r4]
    851a:	46b9      	mov	r9, r7
    851c:	240e      	movs	r4, #14
    851e:	5f0f      	ldrsh	r7, [r1, r4]
    8520:	2410      	movs	r4, #16
    8522:	5f09      	ldrsh	r1, [r1, r4]
    8524:	468b      	mov	fp, r1
    8526:	18d3      	adds	r3, r2, r3
    8528:	009a      	lsls	r2, r3, #2
    852a:	18b6      	adds	r6, r6, r2
    852c:	2112      	movs	r1, #18
    852e:	5e73      	ldrsh	r3, [r6, r1]
			snprintf(buff, 128, "%02d. %02d:%02d:%02d   %02d/%02d/%04d                 %03d                       %03d                      %03d", \
    8530:	ae0e      	add	r6, sp, #56	; 0x38
    8532:	9309      	str	r3, [sp, #36]	; 0x24
    8534:	465b      	mov	r3, fp
    8536:	9308      	str	r3, [sp, #32]
    8538:	9707      	str	r7, [sp, #28]
    853a:	464b      	mov	r3, r9
    853c:	9306      	str	r3, [sp, #24]
    853e:	4643      	mov	r3, r8
    8540:	9305      	str	r3, [sp, #20]
    8542:	4663      	mov	r3, ip
    8544:	9304      	str	r3, [sp, #16]
    8546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8548:	9303      	str	r3, [sp, #12]
    854a:	9002      	str	r0, [sp, #8]
    854c:	980c      	ldr	r0, [sp, #48]	; 0x30
    854e:	9001      	str	r0, [sp, #4]
    8550:	9500      	str	r5, [sp, #0]
    8552:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8554:	002b      	movs	r3, r5
    8556:	4a21      	ldr	r2, [pc, #132]	; (85dc <historyOp+0x104>)
    8558:	2180      	movs	r1, #128	; 0x80
    855a:	0030      	movs	r0, r6
    855c:	4f20      	ldr	r7, [pc, #128]	; (85e0 <historyOp+0x108>)
    855e:	47b8      	blx	r7
			Ft_Gpu_CoCmd_Text(phost, 50, y, 28, 0,buff);
    8560:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8562:	b222      	sxth	r2, r4
    8564:	4b1f      	ldr	r3, [pc, #124]	; (85e4 <historyOp+0x10c>)
    8566:	6818      	ldr	r0, [r3, #0]
    8568:	9601      	str	r6, [sp, #4]
    856a:	2300      	movs	r3, #0
    856c:	9300      	str	r3, [sp, #0]
    856e:	331c      	adds	r3, #28
    8570:	2132      	movs	r1, #50	; 0x32
    8572:	4e1d      	ldr	r6, [pc, #116]	; (85e8 <historyOp+0x110>)
    8574:	47b0      	blx	r6
			y = y + 30;
    8576:	0023      	movs	r3, r4
    8578:	331e      	adds	r3, #30
    857a:	930a      	str	r3, [sp, #40]	; 0x28
		for(i = 0; i < 10; i++){
    857c:	002b      	movs	r3, r5
    857e:	2b09      	cmp	r3, #9
    8580:	ddb2      	ble.n	84e8 <historyOp+0x10>
		drawBack();
    8582:	4b1a      	ldr	r3, [pc, #104]	; (85ec <historyOp+0x114>)
    8584:	4798      	blx	r3
		drawTitle("History");
    8586:	481a      	ldr	r0, [pc, #104]	; (85f0 <historyOp+0x118>)
    8588:	4b1a      	ldr	r3, [pc, #104]	; (85f4 <historyOp+0x11c>)
    858a:	4798      	blx	r3
		disEnd();
    858c:	4b1a      	ldr	r3, [pc, #104]	; (85f8 <historyOp+0x120>)
    858e:	4798      	blx	r3
		delay_ms(50);
    8590:	2032      	movs	r0, #50	; 0x32
    8592:	4b1a      	ldr	r3, [pc, #104]	; (85fc <historyOp+0x124>)
    8594:	4798      	blx	r3
	} while (tag != back);
    8596:	4b1a      	ldr	r3, [pc, #104]	; (8600 <historyOp+0x128>)
    8598:	781b      	ldrb	r3, [r3, #0]
    859a:	2b06      	cmp	r3, #6
    859c:	d015      	beq.n	85ca <historyOp+0xf2>
		tag = 0;
    859e:	4d18      	ldr	r5, [pc, #96]	; (8600 <historyOp+0x128>)
    85a0:	2300      	movs	r3, #0
    85a2:	702b      	strb	r3, [r5, #0]
		disStart();
    85a4:	4b17      	ldr	r3, [pc, #92]	; (8604 <historyOp+0x12c>)
    85a6:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    85a8:	4c0e      	ldr	r4, [pc, #56]	; (85e4 <historyOp+0x10c>)
    85aa:	4917      	ldr	r1, [pc, #92]	; (8608 <historyOp+0x130>)
    85ac:	6820      	ldr	r0, [r4, #0]
    85ae:	4b17      	ldr	r3, [pc, #92]	; (860c <historyOp+0x134>)
    85b0:	4798      	blx	r3
    85b2:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Append(phost, histStart, histEnd);
    85b4:	4b16      	ldr	r3, [pc, #88]	; (8610 <historyOp+0x138>)
    85b6:	681a      	ldr	r2, [r3, #0]
    85b8:	4b16      	ldr	r3, [pc, #88]	; (8614 <historyOp+0x13c>)
    85ba:	6819      	ldr	r1, [r3, #0]
    85bc:	6820      	ldr	r0, [r4, #0]
    85be:	4b16      	ldr	r3, [pc, #88]	; (8618 <historyOp+0x140>)
    85c0:	4798      	blx	r3
		y = 125;
    85c2:	247d      	movs	r4, #125	; 0x7d
		for(i = 0; i < 10; i++){
    85c4:	2300      	movs	r3, #0
    85c6:	940a      	str	r4, [sp, #40]	; 0x28
    85c8:	e7d9      	b.n	857e <historyOp+0xa6>
}//end histOp
    85ca:	b02f      	add	sp, #188	; 0xbc
    85cc:	bc3c      	pop	{r2, r3, r4, r5}
    85ce:	4690      	mov	r8, r2
    85d0:	4699      	mov	r9, r3
    85d2:	46a2      	mov	sl, r4
    85d4:	46ab      	mov	fp, r5
    85d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85d8:	20001b90 	.word	0x20001b90
    85dc:	0000f488 	.word	0x0000f488
    85e0:	0000db8d 	.word	0x0000db8d
    85e4:	20001c60 	.word	0x20001c60
    85e8:	000070e5 	.word	0x000070e5
    85ec:	00007c45 	.word	0x00007c45
    85f0:	0000f4f8 	.word	0x0000f4f8
    85f4:	00007bc5 	.word	0x00007bc5
    85f8:	000081cd 	.word	0x000081cd
    85fc:	00000151 	.word	0x00000151
    8600:	200013f5 	.word	0x200013f5
    8604:	000081a1 	.word	0x000081a1
    8608:	0030212c 	.word	0x0030212c
    860c:	000075b9 	.word	0x000075b9
    8610:	200013e4 	.word	0x200013e4
    8614:	200013e8 	.word	0x200013e8
    8618:	000072dd 	.word	0x000072dd

0000861c <rssiOp>:
void rssiOp(){
    861c:	b5f0      	push	{r4, r5, r6, r7, lr}
    861e:	46de      	mov	lr, fp
    8620:	464f      	mov	r7, r9
    8622:	b580      	push	{r7, lr}
    8624:	b083      	sub	sp, #12
	tag = 0;
    8626:	4f37      	ldr	r7, [pc, #220]	; (8704 <rssiOp+0xe8>)
    8628:	2300      	movs	r3, #0
    862a:	703b      	strb	r3, [r7, #0]
		disStart();
    862c:	4b36      	ldr	r3, [pc, #216]	; (8708 <rssiOp+0xec>)
    862e:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    8630:	4c36      	ldr	r4, [pc, #216]	; (870c <rssiOp+0xf0>)
    8632:	4937      	ldr	r1, [pc, #220]	; (8710 <rssiOp+0xf4>)
    8634:	6820      	ldr	r0, [r4, #0]
    8636:	4b37      	ldr	r3, [pc, #220]	; (8714 <rssiOp+0xf8>)
    8638:	4798      	blx	r3
    863a:	7038      	strb	r0, [r7, #0]
		Ft_Gpu_CoCmd_Append(phost, rssiStart, rssiEnd);
    863c:	4b36      	ldr	r3, [pc, #216]	; (8718 <rssiOp+0xfc>)
    863e:	681a      	ldr	r2, [r3, #0]
    8640:	4b36      	ldr	r3, [pc, #216]	; (871c <rssiOp+0x100>)
    8642:	6819      	ldr	r1, [r3, #0]
    8644:	6820      	ldr	r0, [r4, #0]
    8646:	4b36      	ldr	r3, [pc, #216]	; (8720 <rssiOp+0x104>)
    8648:	4798      	blx	r3
		Ft_Gpu_CoCmd_Number(phost, 400, 200, 31, OPT_SIGNED|OPT_CENTER|3, uartib_get_169_rssi());
    864a:	6826      	ldr	r6, [r4, #0]
    864c:	4b35      	ldr	r3, [pc, #212]	; (8724 <rssiOp+0x108>)
    864e:	4798      	blx	r3
    8650:	9001      	str	r0, [sp, #4]
    8652:	4b35      	ldr	r3, [pc, #212]	; (8728 <rssiOp+0x10c>)
    8654:	4699      	mov	r9, r3
    8656:	9300      	str	r3, [sp, #0]
    8658:	231f      	movs	r3, #31
    865a:	22c8      	movs	r2, #200	; 0xc8
    865c:	21c8      	movs	r1, #200	; 0xc8
    865e:	0049      	lsls	r1, r1, #1
    8660:	0030      	movs	r0, r6
    8662:	4d32      	ldr	r5, [pc, #200]	; (872c <rssiOp+0x110>)
    8664:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Number(phost, 400, 300, 31, OPT_SIGNED|OPT_CENTER|3, uartib_get_915_rssi());
    8666:	6826      	ldr	r6, [r4, #0]
    8668:	4b31      	ldr	r3, [pc, #196]	; (8730 <rssiOp+0x114>)
    866a:	4798      	blx	r3
    866c:	9001      	str	r0, [sp, #4]
    866e:	464b      	mov	r3, r9
    8670:	9300      	str	r3, [sp, #0]
    8672:	231f      	movs	r3, #31
    8674:	2296      	movs	r2, #150	; 0x96
    8676:	0052      	lsls	r2, r2, #1
    8678:	21c8      	movs	r1, #200	; 0xc8
    867a:	0049      	lsls	r1, r1, #1
    867c:	0030      	movs	r0, r6
    867e:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Number(phost, 400, 400, 31, OPT_SIGNED|OPT_CENTER|3, uartib_get_245_rssi());
    8680:	6826      	ldr	r6, [r4, #0]
    8682:	4b2c      	ldr	r3, [pc, #176]	; (8734 <rssiOp+0x118>)
    8684:	4798      	blx	r3
    8686:	9001      	str	r0, [sp, #4]
    8688:	464b      	mov	r3, r9
    868a:	9300      	str	r3, [sp, #0]
    868c:	231f      	movs	r3, #31
    868e:	22c8      	movs	r2, #200	; 0xc8
    8690:	0052      	lsls	r2, r2, #1
    8692:	0011      	movs	r1, r2
    8694:	0030      	movs	r0, r6
    8696:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Number(phost, 650, 200, 31, OPT_SIGNED|OPT_CENTER|3, uartfiber_get_169_rssi());
    8698:	6823      	ldr	r3, [r4, #0]
    869a:	469b      	mov	fp, r3
    869c:	4b26      	ldr	r3, [pc, #152]	; (8738 <rssiOp+0x11c>)
    869e:	4798      	blx	r3
    86a0:	4e26      	ldr	r6, [pc, #152]	; (873c <rssiOp+0x120>)
    86a2:	9001      	str	r0, [sp, #4]
    86a4:	464b      	mov	r3, r9
    86a6:	9300      	str	r3, [sp, #0]
    86a8:	231f      	movs	r3, #31
    86aa:	22c8      	movs	r2, #200	; 0xc8
    86ac:	0031      	movs	r1, r6
    86ae:	4658      	mov	r0, fp
    86b0:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Number(phost, 650, 300, 31, OPT_SIGNED|OPT_CENTER|3, uartfiber_get_915_rssi());
    86b2:	6823      	ldr	r3, [r4, #0]
    86b4:	469b      	mov	fp, r3
    86b6:	4b22      	ldr	r3, [pc, #136]	; (8740 <rssiOp+0x124>)
    86b8:	4798      	blx	r3
    86ba:	9001      	str	r0, [sp, #4]
    86bc:	464b      	mov	r3, r9
    86be:	9300      	str	r3, [sp, #0]
    86c0:	231f      	movs	r3, #31
    86c2:	2296      	movs	r2, #150	; 0x96
    86c4:	0052      	lsls	r2, r2, #1
    86c6:	0031      	movs	r1, r6
    86c8:	4658      	mov	r0, fp
    86ca:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Number(phost, 650, 400, 31, OPT_SIGNED|OPT_CENTER|3, uartfiber_get_245_rssi());
    86cc:	6824      	ldr	r4, [r4, #0]
    86ce:	4b1d      	ldr	r3, [pc, #116]	; (8744 <rssiOp+0x128>)
    86d0:	4798      	blx	r3
    86d2:	9001      	str	r0, [sp, #4]
    86d4:	464b      	mov	r3, r9
    86d6:	9300      	str	r3, [sp, #0]
    86d8:	231f      	movs	r3, #31
    86da:	22c8      	movs	r2, #200	; 0xc8
    86dc:	0052      	lsls	r2, r2, #1
    86de:	0031      	movs	r1, r6
    86e0:	0020      	movs	r0, r4
    86e2:	47a8      	blx	r5
		drawBack();
    86e4:	4b18      	ldr	r3, [pc, #96]	; (8748 <rssiOp+0x12c>)
    86e6:	4798      	blx	r3
		drawTitle("RSSI");
    86e8:	4818      	ldr	r0, [pc, #96]	; (874c <rssiOp+0x130>)
    86ea:	4b19      	ldr	r3, [pc, #100]	; (8750 <rssiOp+0x134>)
    86ec:	4798      	blx	r3
		disEnd();
    86ee:	4b19      	ldr	r3, [pc, #100]	; (8754 <rssiOp+0x138>)
    86f0:	4798      	blx	r3
	} while (tag != back);
    86f2:	783b      	ldrb	r3, [r7, #0]
    86f4:	2b06      	cmp	r3, #6
    86f6:	d196      	bne.n	8626 <rssiOp+0xa>
}//end rssiOp
    86f8:	b003      	add	sp, #12
    86fa:	bc0c      	pop	{r2, r3}
    86fc:	4691      	mov	r9, r2
    86fe:	469b      	mov	fp, r3
    8700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8702:	46c0      	nop			; (mov r8, r8)
    8704:	200013f5 	.word	0x200013f5
    8708:	000081a1 	.word	0x000081a1
    870c:	20001c60 	.word	0x20001c60
    8710:	0030212c 	.word	0x0030212c
    8714:	000075b9 	.word	0x000075b9
    8718:	200013ec 	.word	0x200013ec
    871c:	200013f0 	.word	0x200013f0
    8720:	000072dd 	.word	0x000072dd
    8724:	00006ff5 	.word	0x00006ff5
    8728:	00000703 	.word	0x00000703
    872c:	00007169 	.word	0x00007169
    8730:	00007029 	.word	0x00007029
    8734:	0000705d 	.word	0x0000705d
    8738:	00006e9d 	.word	0x00006e9d
    873c:	0000028a 	.word	0x0000028a
    8740:	00006ed1 	.word	0x00006ed1
    8744:	00006f05 	.word	0x00006f05
    8748:	00007c45 	.word	0x00007c45
    874c:	0000f520 	.word	0x0000f520
    8750:	00007bc5 	.word	0x00007bc5
    8754:	000081cd 	.word	0x000081cd

00008758 <calScreen>:
void calScreen(){
    8758:	b530      	push	{r4, r5, lr}
    875a:	b083      	sub	sp, #12
	disStart();
    875c:	4b0c      	ldr	r3, [pc, #48]	; (8790 <calScreen+0x38>)
    875e:	4798      	blx	r3
	Ft_Gpu_CoCmd_Text(phost,disWid/2,disHei/2,30,OPT_CENTER,"Please tap on the dot");
    8760:	4c0c      	ldr	r4, [pc, #48]	; (8794 <calScreen+0x3c>)
    8762:	6820      	ldr	r0, [r4, #0]
    8764:	4b0c      	ldr	r3, [pc, #48]	; (8798 <calScreen+0x40>)
    8766:	9301      	str	r3, [sp, #4]
    8768:	23c0      	movs	r3, #192	; 0xc0
    876a:	00db      	lsls	r3, r3, #3
    876c:	9300      	str	r3, [sp, #0]
    876e:	231e      	movs	r3, #30
    8770:	22f0      	movs	r2, #240	; 0xf0
    8772:	21c8      	movs	r1, #200	; 0xc8
    8774:	0049      	lsls	r1, r1, #1
    8776:	4d09      	ldr	r5, [pc, #36]	; (879c <calScreen+0x44>)
    8778:	47a8      	blx	r5
	Ft_Gpu_CoCmd_Calibrate(phost,0);
    877a:	6820      	ldr	r0, [r4, #0]
    877c:	2100      	movs	r1, #0
    877e:	4b08      	ldr	r3, [pc, #32]	; (87a0 <calScreen+0x48>)
    8780:	4798      	blx	r3
	disEnd();
    8782:	4b08      	ldr	r3, [pc, #32]	; (87a4 <calScreen+0x4c>)
    8784:	4798      	blx	r3
	delay_ms(100);
    8786:	2064      	movs	r0, #100	; 0x64
    8788:	4b07      	ldr	r3, [pc, #28]	; (87a8 <calScreen+0x50>)
    878a:	4798      	blx	r3
}//end calScreen
    878c:	b003      	add	sp, #12
    878e:	bd30      	pop	{r4, r5, pc}
    8790:	000081a1 	.word	0x000081a1
    8794:	20001c60 	.word	0x20001c60
    8798:	0000f3c4 	.word	0x0000f3c4
    879c:	000070e5 	.word	0x000070e5
    87a0:	000072a1 	.word	0x000072a1
    87a4:	000081cd 	.word	0x000081cd
    87a8:	00000151 	.word	0x00000151

000087ac <setTime>:
void setTime(){
    87ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    87ae:	46de      	mov	lr, fp
    87b0:	4657      	mov	r7, sl
    87b2:	464e      	mov	r6, r9
    87b4:	4645      	mov	r5, r8
    87b6:	b5e0      	push	{r5, r6, r7, lr}
    87b8:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, timeIn[10] = "0", i = 0, pressed = 0;
    87ba:	2330      	movs	r3, #48	; 0x30
    87bc:	9305      	str	r3, [sp, #20]
    87be:	2206      	movs	r2, #6
    87c0:	2100      	movs	r1, #0
    87c2:	a806      	add	r0, sp, #24
    87c4:	4b88      	ldr	r3, [pc, #544]	; (89e8 <setTime+0x23c>)
    87c6:	4798      	blx	r3
    87c8:	2300      	movs	r3, #0
    87ca:	9303      	str	r3, [sp, #12]
    87cc:	2600      	movs	r6, #0
    87ce:	469b      	mov	fp, r3
    87d0:	e022      	b.n	8818 <setTime+0x6c>
		else							timeIn[i] = '_';
    87d2:	225f      	movs	r2, #95	; 0x5f
    87d4:	ab05      	add	r3, sp, #20
    87d6:	559a      	strb	r2, [r3, r6]
    87d8:	e029      	b.n	882e <setTime+0x82>
		if (tag>47 && tag<58)	pressed = tag - 48;
    87da:	9203      	str	r2, [sp, #12]
    87dc:	e081      	b.n	88e2 <setTime+0x136>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    87de:	2e01      	cmp	r6, #1
    87e0:	d100      	bne.n	87e4 <setTime+0x38>
    87e2:	e090      	b.n	8906 <setTime+0x15a>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    87e4:	2e03      	cmp	r6, #3
    87e6:	d100      	bne.n	87ea <setTime+0x3e>
    87e8:	e096      	b.n	8918 <setTime+0x16c>
    87ea:	2e06      	cmp	r6, #6
    87ec:	d100      	bne.n	87f0 <setTime+0x44>
    87ee:	e093      	b.n	8918 <setTime+0x16c>
					timeIn[i] = tag;
    87f0:	aa05      	add	r2, sp, #20
    87f2:	5593      	strb	r3, [r2, r6]
					i++;
    87f4:	3601      	adds	r6, #1
    87f6:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==9){		//if ok is pressed
    87f8:	2b0b      	cmp	r3, #11
    87fa:	d100      	bne.n	87fe <setTime+0x52>
    87fc:	e0b0      	b.n	8960 <setTime+0x1b4>
    87fe:	2e09      	cmp	r6, #9
    8800:	d100      	bne.n	8804 <setTime+0x58>
    8802:	e0ad      	b.n	8960 <setTime+0x1b4>
			tempTag = tag;
    8804:	469b      	mov	fp, r3
		if(i==2 || i==5){
    8806:	2e02      	cmp	r6, #2
    8808:	d100      	bne.n	880c <setTime+0x60>
    880a:	e0e6      	b.n	89da <setTime+0x22e>
    880c:	2e05      	cmp	r6, #5
    880e:	d100      	bne.n	8812 <setTime+0x66>
    8810:	e0e3      	b.n	89da <setTime+0x22e>
	}while(tag != back);
    8812:	2b06      	cmp	r3, #6
    8814:	d100      	bne.n	8818 <setTime+0x6c>
    8816:	e0d6      	b.n	89c6 <setTime+0x21a>
		rtc_calendar_get_time(&rtc_instance, &time);
    8818:	4c74      	ldr	r4, [pc, #464]	; (89ec <setTime+0x240>)
    881a:	0021      	movs	r1, r4
    881c:	4874      	ldr	r0, [pc, #464]	; (89f0 <setTime+0x244>)
    881e:	4b75      	ldr	r3, [pc, #468]	; (89f4 <setTime+0x248>)
    8820:	4798      	blx	r3
		if (time.second%2 == 1)			timeIn[i] = ' ';
    8822:	7823      	ldrb	r3, [r4, #0]
    8824:	07db      	lsls	r3, r3, #31
    8826:	d5d4      	bpl.n	87d2 <setTime+0x26>
    8828:	2220      	movs	r2, #32
    882a:	ab05      	add	r3, sp, #20
    882c:	559a      	strb	r2, [r3, r6]
		tag = 0;
    882e:	4b72      	ldr	r3, [pc, #456]	; (89f8 <setTime+0x24c>)
    8830:	4699      	mov	r9, r3
    8832:	2300      	movs	r3, #0
    8834:	4698      	mov	r8, r3
    8836:	464a      	mov	r2, r9
    8838:	7013      	strb	r3, [r2, #0]
		disStart();
    883a:	4b70      	ldr	r3, [pc, #448]	; (89fc <setTime+0x250>)
    883c:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    883e:	4c70      	ldr	r4, [pc, #448]	; (8a00 <setTime+0x254>)
    8840:	4970      	ldr	r1, [pc, #448]	; (8a04 <setTime+0x258>)
    8842:	6820      	ldr	r0, [r4, #0]
    8844:	4d70      	ldr	r5, [pc, #448]	; (8a08 <setTime+0x25c>)
    8846:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    8848:	4970      	ldr	r1, [pc, #448]	; (8a0c <setTime+0x260>)
    884a:	6820      	ldr	r0, [r4, #0]
    884c:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    884e:	4970      	ldr	r1, [pc, #448]	; (8a10 <setTime+0x264>)
    8850:	6820      	ldr	r0, [r4, #0]
    8852:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    8854:	496f      	ldr	r1, [pc, #444]	; (8a14 <setTime+0x268>)
    8856:	6820      	ldr	r0, [r4, #0]
    8858:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    885a:	496f      	ldr	r1, [pc, #444]	; (8a18 <setTime+0x26c>)
    885c:	6820      	ldr	r0, [r4, #0]
    885e:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    8860:	2184      	movs	r1, #132	; 0x84
    8862:	0589      	lsls	r1, r1, #22
    8864:	6820      	ldr	r0, [r4, #0]
    8866:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    8868:	4969      	ldr	r1, [pc, #420]	; (8a10 <setTime+0x264>)
    886a:	6820      	ldr	r0, [r4, #0]
    886c:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Time");
    886e:	6820      	ldr	r0, [r4, #0]
    8870:	4b6a      	ldr	r3, [pc, #424]	; (8a1c <setTime+0x270>)
    8872:	9301      	str	r3, [sp, #4]
    8874:	4643      	mov	r3, r8
    8876:	9300      	str	r3, [sp, #0]
    8878:	331c      	adds	r3, #28
    887a:	2230      	movs	r2, #48	; 0x30
    887c:	21f0      	movs	r1, #240	; 0xf0
    887e:	4f68      	ldr	r7, [pc, #416]	; (8a20 <setTime+0x274>)
    8880:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "hh:mm:ss    (24h format)");
    8882:	6820      	ldr	r0, [r4, #0]
    8884:	4b67      	ldr	r3, [pc, #412]	; (8a24 <setTime+0x278>)
    8886:	9301      	str	r3, [sp, #4]
    8888:	4643      	mov	r3, r8
    888a:	9300      	str	r3, [sp, #0]
    888c:	331c      	adds	r3, #28
    888e:	2248      	movs	r2, #72	; 0x48
    8890:	21f0      	movs	r1, #240	; 0xf0
    8892:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    8894:	2180      	movs	r1, #128	; 0x80
    8896:	04c9      	lsls	r1, r1, #19
    8898:	6820      	ldr	r0, [r4, #0]
    889a:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, timeIn);
    889c:	6820      	ldr	r0, [r4, #0]
    889e:	ab05      	add	r3, sp, #20
    88a0:	9301      	str	r3, [sp, #4]
    88a2:	4643      	mov	r3, r8
    88a4:	9300      	str	r3, [sp, #0]
    88a6:	331e      	adds	r3, #30
    88a8:	2278      	movs	r2, #120	; 0x78
    88aa:	21f5      	movs	r1, #245	; 0xf5
    88ac:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    88ae:	4958      	ldr	r1, [pc, #352]	; (8a10 <setTime+0x264>)
    88b0:	6820      	ldr	r0, [r4, #0]
    88b2:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    88b4:	6820      	ldr	r0, [r4, #0]
    88b6:	495c      	ldr	r1, [pc, #368]	; (8a28 <setTime+0x27c>)
    88b8:	4b5c      	ldr	r3, [pc, #368]	; (8a2c <setTime+0x280>)
    88ba:	4798      	blx	r3
    88bc:	464b      	mov	r3, r9
    88be:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    88c0:	9803      	ldr	r0, [sp, #12]
    88c2:	4b5b      	ldr	r3, [pc, #364]	; (8a30 <setTime+0x284>)
    88c4:	4798      	blx	r3
		drawBack();
    88c6:	4b5b      	ldr	r3, [pc, #364]	; (8a34 <setTime+0x288>)
    88c8:	4798      	blx	r3
		disEnd();
    88ca:	4b5b      	ldr	r3, [pc, #364]	; (8a38 <setTime+0x28c>)
    88cc:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    88ce:	464b      	mov	r3, r9
    88d0:	781b      	ldrb	r3, [r3, #0]
    88d2:	001a      	movs	r2, r3
    88d4:	3a30      	subs	r2, #48	; 0x30
    88d6:	b2d2      	uxtb	r2, r2
    88d8:	2a09      	cmp	r2, #9
    88da:	d800      	bhi.n	88de <setTime+0x132>
    88dc:	e77d      	b.n	87da <setTime+0x2e>
		else					pressed = 0;
    88de:	2100      	movs	r1, #0
    88e0:	9103      	str	r1, [sp, #12]
		if(tag==0)		tempTag = tag;
    88e2:	2b00      	cmp	r3, #0
    88e4:	d100      	bne.n	88e8 <setTime+0x13c>
    88e6:	469b      	mov	fp, r3
		if (tempTag != tag && tag != 0 && tag!=back){
    88e8:	459b      	cmp	fp, r3
    88ea:	d08c      	beq.n	8806 <setTime+0x5a>
    88ec:	2b00      	cmp	r3, #0
    88ee:	d08a      	beq.n	8806 <setTime+0x5a>
    88f0:	2b06      	cmp	r3, #6
    88f2:	d088      	beq.n	8806 <setTime+0x5a>
			if(tag> 47 && tag<58){
    88f4:	2a09      	cmp	r2, #9
    88f6:	d813      	bhi.n	8920 <setTime+0x174>
				if(i==0 && tag>50);								//1st digit in hour
    88f8:	2e00      	cmp	r6, #0
    88fa:	d000      	beq.n	88fe <setTime+0x152>
    88fc:	e76f      	b.n	87de <setTime+0x32>
    88fe:	2b32      	cmp	r3, #50	; 0x32
    8900:	d900      	bls.n	8904 <setTime+0x158>
    8902:	e779      	b.n	87f8 <setTime+0x4c>
    8904:	e76b      	b.n	87de <setTime+0x32>
				else if(i==1 && timeIn[0]==50 && tag>51);		//2nd digit in hour
    8906:	aa05      	add	r2, sp, #20
    8908:	7812      	ldrb	r2, [r2, #0]
    890a:	2a32      	cmp	r2, #50	; 0x32
    890c:	d000      	beq.n	8910 <setTime+0x164>
    890e:	e769      	b.n	87e4 <setTime+0x38>
    8910:	2b33      	cmp	r3, #51	; 0x33
    8912:	d900      	bls.n	8916 <setTime+0x16a>
    8914:	e770      	b.n	87f8 <setTime+0x4c>
    8916:	e765      	b.n	87e4 <setTime+0x38>
				else if((i==3 || i==6) && tag>53);				//1st digit in minute and second
    8918:	2b35      	cmp	r3, #53	; 0x35
    891a:	d900      	bls.n	891e <setTime+0x172>
    891c:	e76c      	b.n	87f8 <setTime+0x4c>
    891e:	e767      	b.n	87f0 <setTime+0x44>
			} else if(tag == clr){		//if clr is pressed
    8920:	2b0a      	cmp	r3, #10
    8922:	d00f      	beq.n	8944 <setTime+0x198>
			} else if(tag==del && i>0){		//if del is pressed
    8924:	2b09      	cmp	r3, #9
    8926:	d000      	beq.n	892a <setTime+0x17e>
    8928:	e766      	b.n	87f8 <setTime+0x4c>
    892a:	2e00      	cmp	r6, #0
    892c:	d100      	bne.n	8930 <setTime+0x184>
    892e:	e763      	b.n	87f8 <setTime+0x4c>
				if(i==3 || i==6){			//clear last user input
    8930:	2e03      	cmp	r6, #3
    8932:	d00f      	beq.n	8954 <setTime+0x1a8>
    8934:	2e06      	cmp	r6, #6
    8936:	d00d      	beq.n	8954 <setTime+0x1a8>
				timeIn[i] = 0;
    8938:	2100      	movs	r1, #0
    893a:	aa05      	add	r2, sp, #20
    893c:	5591      	strb	r1, [r2, r6]
				i--;
    893e:	3e01      	subs	r6, #1
    8940:	b2f6      	uxtb	r6, r6
    8942:	e759      	b.n	87f8 <setTime+0x4c>
					timeIn[i] = 0;
    8944:	2100      	movs	r1, #0
    8946:	aa05      	add	r2, sp, #20
    8948:	5591      	strb	r1, [r2, r6]
					i--;
    894a:	3e01      	subs	r6, #1
    894c:	b2f6      	uxtb	r6, r6
				}while(i>0);
    894e:	2e00      	cmp	r6, #0
    8950:	d1f8      	bne.n	8944 <setTime+0x198>
    8952:	e751      	b.n	87f8 <setTime+0x4c>
					timeIn[i] = 0;
    8954:	2100      	movs	r1, #0
    8956:	aa05      	add	r2, sp, #20
    8958:	5591      	strb	r1, [r2, r6]
					i--;
    895a:	3e01      	subs	r6, #1
    895c:	b2f6      	uxtb	r6, r6
    895e:	e7eb      	b.n	8938 <setTime+0x18c>
				timeIn[i] = 0;			// compute time and update to the system
    8960:	ac05      	add	r4, sp, #20
    8962:	2300      	movs	r3, #0
    8964:	55a3      	strb	r3, [r4, r6]
				rtc_calendar_disable(&rtc_instance);
    8966:	4822      	ldr	r0, [pc, #136]	; (89f0 <setTime+0x244>)
    8968:	4b34      	ldr	r3, [pc, #208]	; (8a3c <setTime+0x290>)
    896a:	4798      	blx	r3
				time.hour = (timeIn[0]%48)*10+(timeIn[1]%48);
    896c:	7820      	ldrb	r0, [r4, #0]
    896e:	4f34      	ldr	r7, [pc, #208]	; (8a40 <setTime+0x294>)
    8970:	2130      	movs	r1, #48	; 0x30
    8972:	47b8      	blx	r7
    8974:	008b      	lsls	r3, r1, #2
    8976:	18c9      	adds	r1, r1, r3
    8978:	004b      	lsls	r3, r1, #1
    897a:	b2dd      	uxtb	r5, r3
    897c:	7860      	ldrb	r0, [r4, #1]
    897e:	2130      	movs	r1, #48	; 0x30
    8980:	47b8      	blx	r7
    8982:	1869      	adds	r1, r5, r1
    8984:	4e19      	ldr	r6, [pc, #100]	; (89ec <setTime+0x240>)
    8986:	70b1      	strb	r1, [r6, #2]
				time.minute = (timeIn[3]%48)*10+(timeIn[4]%48);
    8988:	78e0      	ldrb	r0, [r4, #3]
    898a:	2130      	movs	r1, #48	; 0x30
    898c:	47b8      	blx	r7
    898e:	008b      	lsls	r3, r1, #2
    8990:	18c9      	adds	r1, r1, r3
    8992:	004b      	lsls	r3, r1, #1
    8994:	b2dd      	uxtb	r5, r3
    8996:	7920      	ldrb	r0, [r4, #4]
    8998:	2130      	movs	r1, #48	; 0x30
    899a:	47b8      	blx	r7
    899c:	1869      	adds	r1, r5, r1
    899e:	7071      	strb	r1, [r6, #1]
				time.second = (timeIn[06]%48)*10+(timeIn[7]%48);
    89a0:	79a0      	ldrb	r0, [r4, #6]
    89a2:	2130      	movs	r1, #48	; 0x30
    89a4:	47b8      	blx	r7
    89a6:	008b      	lsls	r3, r1, #2
    89a8:	18c9      	adds	r1, r1, r3
    89aa:	004b      	lsls	r3, r1, #1
    89ac:	b2dd      	uxtb	r5, r3
    89ae:	79e0      	ldrb	r0, [r4, #7]
    89b0:	2130      	movs	r1, #48	; 0x30
    89b2:	47b8      	blx	r7
    89b4:	1869      	adds	r1, r5, r1
    89b6:	7031      	strb	r1, [r6, #0]
				rtc_calendar_set_time(&rtc_instance, &time);
    89b8:	0031      	movs	r1, r6
    89ba:	480d      	ldr	r0, [pc, #52]	; (89f0 <setTime+0x244>)
    89bc:	4b21      	ldr	r3, [pc, #132]	; (8a44 <setTime+0x298>)
    89be:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    89c0:	480b      	ldr	r0, [pc, #44]	; (89f0 <setTime+0x244>)
    89c2:	4b21      	ldr	r3, [pc, #132]	; (8a48 <setTime+0x29c>)
    89c4:	4798      	blx	r3
	tag = 0;
    89c6:	2200      	movs	r2, #0
    89c8:	4b0b      	ldr	r3, [pc, #44]	; (89f8 <setTime+0x24c>)
    89ca:	701a      	strb	r2, [r3, #0]
}//end setTime
    89cc:	b009      	add	sp, #36	; 0x24
    89ce:	bc3c      	pop	{r2, r3, r4, r5}
    89d0:	4690      	mov	r8, r2
    89d2:	4699      	mov	r9, r3
    89d4:	46a2      	mov	sl, r4
    89d6:	46ab      	mov	fp, r5
    89d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			timeIn[i] = ':';
    89da:	213a      	movs	r1, #58	; 0x3a
    89dc:	aa05      	add	r2, sp, #20
    89de:	5591      	strb	r1, [r2, r6]
			i++;
    89e0:	3601      	adds	r6, #1
    89e2:	b2f6      	uxtb	r6, r6
    89e4:	e715      	b.n	8812 <setTime+0x66>
    89e6:	46c0      	nop			; (mov r8, r8)
    89e8:	0000db1f 	.word	0x0000db1f
    89ec:	20001c58 	.word	0x20001c58
    89f0:	20001940 	.word	0x20001940
    89f4:	00000555 	.word	0x00000555
    89f8:	200013f5 	.word	0x200013f5
    89fc:	000081a1 	.word	0x000081a1
    8a00:	20001c60 	.word	0x20001c60
    8a04:	1f000009 	.word	0x1f000009
    8a08:	00007729 	.word	0x00007729
    8a0c:	0e00003c 	.word	0x0e00003c
    8a10:	04ffffff 	.word	0x04ffffff
    8a14:	478006e0 	.word	0x478006e0
    8a18:	51800a00 	.word	0x51800a00
    8a1c:	0000f540 	.word	0x0000f540
    8a20:	000070e5 	.word	0x000070e5
    8a24:	0000f54c 	.word	0x0000f54c
    8a28:	0030212c 	.word	0x0030212c
    8a2c:	000075b9 	.word	0x000075b9
    8a30:	00007ca1 	.word	0x00007ca1
    8a34:	00007c45 	.word	0x00007c45
    8a38:	000081cd 	.word	0x000081cd
    8a3c:	00000459 	.word	0x00000459
    8a40:	0000ccbd 	.word	0x0000ccbd
    8a44:	00000531 	.word	0x00000531
    8a48:	00000439 	.word	0x00000439

00008a4c <setDate>:
void setDate(){
    8a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a4e:	46de      	mov	lr, fp
    8a50:	4657      	mov	r7, sl
    8a52:	464e      	mov	r6, r9
    8a54:	4645      	mov	r5, r8
    8a56:	b5e0      	push	{r5, r6, r7, lr}
    8a58:	b089      	sub	sp, #36	; 0x24
	char tempTag = 0, pressed = 0, i = 0, month = 0, dateIn[12] = "0";
    8a5a:	2330      	movs	r3, #48	; 0x30
    8a5c:	9305      	str	r3, [sp, #20]
    8a5e:	2208      	movs	r2, #8
    8a60:	2100      	movs	r1, #0
    8a62:	a806      	add	r0, sp, #24
    8a64:	4bc6      	ldr	r3, [pc, #792]	; (8d80 <setDate+0x334>)
    8a66:	4798      	blx	r3
    8a68:	2600      	movs	r6, #0
    8a6a:	2300      	movs	r3, #0
    8a6c:	9303      	str	r3, [sp, #12]
    8a6e:	469b      	mov	fp, r3
    8a70:	e028      	b.n	8ac4 <setDate+0x78>
		else							dateIn[i] = '_';
    8a72:	225f      	movs	r2, #95	; 0x5f
    8a74:	ab05      	add	r3, sp, #20
    8a76:	559a      	strb	r2, [r3, r6]
    8a78:	e02f      	b.n	8ada <setDate+0x8e>
		if (tag>47 && tag<58)	pressed = tag - 48;
    8a7a:	9303      	str	r3, [sp, #12]
    8a7c:	e087      	b.n	8b8e <setDate+0x142>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    8a7e:	2e01      	cmp	r6, #1
    8a80:	d100      	bne.n	8a84 <setDate+0x38>
    8a82:	e096      	b.n	8bb2 <setDate+0x166>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    8a84:	2e03      	cmp	r6, #3
    8a86:	d100      	bne.n	8a8a <setDate+0x3e>
    8a88:	e09c      	b.n	8bc4 <setDate+0x178>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    8a8a:	2e03      	cmp	r6, #3
    8a8c:	d100      	bne.n	8a90 <setDate+0x44>
    8a8e:	e0af      	b.n	8bf0 <setDate+0x1a4>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    8a90:	2e04      	cmp	r6, #4
    8a92:	d100      	bne.n	8a96 <setDate+0x4a>
    8a94:	e0c2      	b.n	8c1c <setDate+0x1d0>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    8a96:	2e04      	cmp	r6, #4
    8a98:	d100      	bne.n	8a9c <setDate+0x50>
    8a9a:	e0dc      	b.n	8c56 <setDate+0x20a>
					dateIn[i] = tag;
    8a9c:	ab05      	add	r3, sp, #20
    8a9e:	559c      	strb	r4, [r3, r6]
					i++;
    8aa0:	3601      	adds	r6, #1
    8aa2:	b2f6      	uxtb	r6, r6
			if(tag==ok || i==11){			//if ok is pressed
    8aa4:	2c0b      	cmp	r4, #11
    8aa6:	d100      	bne.n	8aaa <setDate+0x5e>
    8aa8:	e112      	b.n	8cd0 <setDate+0x284>
    8aaa:	2e0b      	cmp	r6, #11
    8aac:	d100      	bne.n	8ab0 <setDate+0x64>
    8aae:	e10f      	b.n	8cd0 <setDate+0x284>
			tempTag = tag;
    8ab0:	46a3      	mov	fp, r4
		if(i==2 || i==5){
    8ab2:	2e02      	cmp	r6, #2
    8ab4:	d100      	bne.n	8ab8 <setDate+0x6c>
    8ab6:	e15d      	b.n	8d74 <setDate+0x328>
    8ab8:	2e05      	cmp	r6, #5
    8aba:	d100      	bne.n	8abe <setDate+0x72>
    8abc:	e15a      	b.n	8d74 <setDate+0x328>
	}while(tag != back);
    8abe:	2c06      	cmp	r4, #6
    8ac0:	d100      	bne.n	8ac4 <setDate+0x78>
    8ac2:	e14d      	b.n	8d60 <setDate+0x314>
		rtc_calendar_get_time(&rtc_instance, &time);
    8ac4:	4caf      	ldr	r4, [pc, #700]	; (8d84 <setDate+0x338>)
    8ac6:	0021      	movs	r1, r4
    8ac8:	48af      	ldr	r0, [pc, #700]	; (8d88 <setDate+0x33c>)
    8aca:	4bb0      	ldr	r3, [pc, #704]	; (8d8c <setDate+0x340>)
    8acc:	4798      	blx	r3
		if (time.second%2 == 1)			dateIn[i] = ' ';
    8ace:	7823      	ldrb	r3, [r4, #0]
    8ad0:	07db      	lsls	r3, r3, #31
    8ad2:	d5ce      	bpl.n	8a72 <setDate+0x26>
    8ad4:	2220      	movs	r2, #32
    8ad6:	ab05      	add	r3, sp, #20
    8ad8:	559a      	strb	r2, [r3, r6]
		tag = 0;
    8ada:	4bad      	ldr	r3, [pc, #692]	; (8d90 <setDate+0x344>)
    8adc:	4699      	mov	r9, r3
    8ade:	2300      	movs	r3, #0
    8ae0:	4698      	mov	r8, r3
    8ae2:	464a      	mov	r2, r9
    8ae4:	7013      	strb	r3, [r2, #0]
		disStart();
    8ae6:	4bab      	ldr	r3, [pc, #684]	; (8d94 <setDate+0x348>)
    8ae8:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost, BEGIN(RECTS));
    8aea:	4cab      	ldr	r4, [pc, #684]	; (8d98 <setDate+0x34c>)
    8aec:	49ab      	ldr	r1, [pc, #684]	; (8d9c <setDate+0x350>)
    8aee:	6820      	ldr	r0, [r4, #0]
    8af0:	4dab      	ldr	r5, [pc, #684]	; (8da0 <setDate+0x354>)
    8af2:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, LINE_WIDTH(10 * 6));
    8af4:	49ab      	ldr	r1, [pc, #684]	; (8da4 <setDate+0x358>)
    8af6:	6820      	ldr	r0, [r4, #0]
    8af8:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    8afa:	49ab      	ldr	r1, [pc, #684]	; (8da8 <setDate+0x35c>)
    8afc:	6820      	ldr	r0, [r4, #0]
    8afe:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F((disWid/2-textBoxWid/2) * 16, textBoxHei * 16) );
    8b00:	49aa      	ldr	r1, [pc, #680]	; (8dac <setDate+0x360>)
    8b02:	6820      	ldr	r0, [r4, #0]
    8b04:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, VERTEX2F(((disWid/2-textBoxWid/2) + textBoxWid) * 16, (textBoxHei + 50) * 16));
    8b06:	49aa      	ldr	r1, [pc, #680]	; (8db0 <setDate+0x364>)
    8b08:	6820      	ldr	r0, [r4, #0]
    8b0a:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, END());
    8b0c:	2184      	movs	r1, #132	; 0x84
    8b0e:	0589      	lsls	r1, r1, #22
    8b10:	6820      	ldr	r0, [r4, #0]
    8b12:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost, COLOR_RGB(255,255,255));
    8b14:	49a4      	ldr	r1, [pc, #656]	; (8da8 <setDate+0x35c>)
    8b16:	6820      	ldr	r0, [r4, #0]
    8b18:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.1, 28, 0, "Enter Date");
    8b1a:	6820      	ldr	r0, [r4, #0]
    8b1c:	4ba5      	ldr	r3, [pc, #660]	; (8db4 <setDate+0x368>)
    8b1e:	9301      	str	r3, [sp, #4]
    8b20:	4643      	mov	r3, r8
    8b22:	9300      	str	r3, [sp, #0]
    8b24:	331c      	adds	r3, #28
    8b26:	2230      	movs	r2, #48	; 0x30
    8b28:	21f0      	movs	r1, #240	; 0xf0
    8b2a:	4fa3      	ldr	r7, [pc, #652]	; (8db8 <setDate+0x36c>)
    8b2c:	47b8      	blx	r7
		Ft_Gpu_CoCmd_Text(phost, disWid/2 - disWid*.2, disHei*.15, 28, 0, "mm/dd/yyyy");
    8b2e:	6820      	ldr	r0, [r4, #0]
    8b30:	4ba2      	ldr	r3, [pc, #648]	; (8dbc <setDate+0x370>)
    8b32:	9301      	str	r3, [sp, #4]
    8b34:	4643      	mov	r3, r8
    8b36:	9300      	str	r3, [sp, #0]
    8b38:	331c      	adds	r3, #28
    8b3a:	2248      	movs	r2, #72	; 0x48
    8b3c:	21f0      	movs	r1, #240	; 0xf0
    8b3e:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    8b40:	2180      	movs	r1, #128	; 0x80
    8b42:	04c9      	lsls	r1, r1, #19
    8b44:	6820      	ldr	r0, [r4, #0]
    8b46:	47a8      	blx	r5
		Ft_Gpu_CoCmd_Text(phost, (disWid/2-textBoxWid/2 + 5), disWid*.15, 30, 0, dateIn);
    8b48:	6820      	ldr	r0, [r4, #0]
    8b4a:	ab05      	add	r3, sp, #20
    8b4c:	9301      	str	r3, [sp, #4]
    8b4e:	4643      	mov	r3, r8
    8b50:	9300      	str	r3, [sp, #0]
    8b52:	331e      	adds	r3, #30
    8b54:	2278      	movs	r2, #120	; 0x78
    8b56:	21f5      	movs	r1, #245	; 0xf5
    8b58:	47b8      	blx	r7
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    8b5a:	4993      	ldr	r1, [pc, #588]	; (8da8 <setDate+0x35c>)
    8b5c:	6820      	ldr	r0, [r4, #0]
    8b5e:	47a8      	blx	r5
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    8b60:	6820      	ldr	r0, [r4, #0]
    8b62:	4997      	ldr	r1, [pc, #604]	; (8dc0 <setDate+0x374>)
    8b64:	4b97      	ldr	r3, [pc, #604]	; (8dc4 <setDate+0x378>)
    8b66:	4798      	blx	r3
    8b68:	464b      	mov	r3, r9
    8b6a:	7018      	strb	r0, [r3, #0]
		drawKeypad(pressed);
    8b6c:	9803      	ldr	r0, [sp, #12]
    8b6e:	4b96      	ldr	r3, [pc, #600]	; (8dc8 <setDate+0x37c>)
    8b70:	4798      	blx	r3
		drawBack();
    8b72:	4b96      	ldr	r3, [pc, #600]	; (8dcc <setDate+0x380>)
    8b74:	4798      	blx	r3
		disEnd();
    8b76:	4b96      	ldr	r3, [pc, #600]	; (8dd0 <setDate+0x384>)
    8b78:	4798      	blx	r3
		if (tag>47 && tag<58)	pressed = tag - 48;
    8b7a:	464b      	mov	r3, r9
    8b7c:	781c      	ldrb	r4, [r3, #0]
    8b7e:	0023      	movs	r3, r4
    8b80:	3b30      	subs	r3, #48	; 0x30
    8b82:	b2db      	uxtb	r3, r3
    8b84:	2b09      	cmp	r3, #9
    8b86:	d800      	bhi.n	8b8a <setDate+0x13e>
    8b88:	e777      	b.n	8a7a <setDate+0x2e>
		else					pressed = 0;
    8b8a:	2200      	movs	r2, #0
    8b8c:	9203      	str	r2, [sp, #12]
		if(tag==0)		tempTag = tag;
    8b8e:	2c00      	cmp	r4, #0
    8b90:	d100      	bne.n	8b94 <setDate+0x148>
    8b92:	46a3      	mov	fp, r4
		if (tempTag != tag && tag != 0 && tag!=back){
    8b94:	45a3      	cmp	fp, r4
    8b96:	d08c      	beq.n	8ab2 <setDate+0x66>
    8b98:	2c00      	cmp	r4, #0
    8b9a:	d08a      	beq.n	8ab2 <setDate+0x66>
    8b9c:	2c06      	cmp	r4, #6
    8b9e:	d088      	beq.n	8ab2 <setDate+0x66>
			if(tag> 47 && tag<58){
    8ba0:	2b09      	cmp	r3, #9
    8ba2:	d875      	bhi.n	8c90 <setDate+0x244>
				if(i==0 && tag>49);					//1st in month
    8ba4:	2e00      	cmp	r6, #0
    8ba6:	d000      	beq.n	8baa <setDate+0x15e>
    8ba8:	e769      	b.n	8a7e <setDate+0x32>
    8baa:	2c31      	cmp	r4, #49	; 0x31
    8bac:	d900      	bls.n	8bb0 <setDate+0x164>
    8bae:	e779      	b.n	8aa4 <setDate+0x58>
    8bb0:	e765      	b.n	8a7e <setDate+0x32>
				else if(i==1 && dateIn[0]==49 && tag>50);	//2nd digit in month
    8bb2:	ab05      	add	r3, sp, #20
    8bb4:	781b      	ldrb	r3, [r3, #0]
    8bb6:	2b31      	cmp	r3, #49	; 0x31
    8bb8:	d000      	beq.n	8bbc <setDate+0x170>
    8bba:	e763      	b.n	8a84 <setDate+0x38>
    8bbc:	2c32      	cmp	r4, #50	; 0x32
    8bbe:	d900      	bls.n	8bc2 <setDate+0x176>
    8bc0:	e770      	b.n	8aa4 <setDate+0x58>
    8bc2:	e75f      	b.n	8a84 <setDate+0x38>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)==2 && tag>50);		//1st in day
    8bc4:	ad05      	add	r5, sp, #20
    8bc6:	7828      	ldrb	r0, [r5, #0]
    8bc8:	4b82      	ldr	r3, [pc, #520]	; (8dd4 <setDate+0x388>)
    8bca:	4698      	mov	r8, r3
    8bcc:	2130      	movs	r1, #48	; 0x30
    8bce:	4798      	blx	r3
    8bd0:	b2cb      	uxtb	r3, r1
    8bd2:	0099      	lsls	r1, r3, #2
    8bd4:	18c9      	adds	r1, r1, r3
    8bd6:	004f      	lsls	r7, r1, #1
    8bd8:	7868      	ldrb	r0, [r5, #1]
    8bda:	2130      	movs	r1, #48	; 0x30
    8bdc:	47c0      	blx	r8
    8bde:	b2c9      	uxtb	r1, r1
    8be0:	187f      	adds	r7, r7, r1
    8be2:	2f02      	cmp	r7, #2
    8be4:	d000      	beq.n	8be8 <setDate+0x19c>
    8be6:	e750      	b.n	8a8a <setDate+0x3e>
    8be8:	2c32      	cmp	r4, #50	; 0x32
    8bea:	d900      	bls.n	8bee <setDate+0x1a2>
    8bec:	e75a      	b.n	8aa4 <setDate+0x58>
    8bee:	e74c      	b.n	8a8a <setDate+0x3e>
				else if(i==3 && (dateIn[0]%48*10 + dateIn[1]%48)!=2 && tag>51);		//1st in day
    8bf0:	ad05      	add	r5, sp, #20
    8bf2:	7828      	ldrb	r0, [r5, #0]
    8bf4:	4b77      	ldr	r3, [pc, #476]	; (8dd4 <setDate+0x388>)
    8bf6:	4698      	mov	r8, r3
    8bf8:	2130      	movs	r1, #48	; 0x30
    8bfa:	4798      	blx	r3
    8bfc:	b2cb      	uxtb	r3, r1
    8bfe:	0099      	lsls	r1, r3, #2
    8c00:	18c9      	adds	r1, r1, r3
    8c02:	004f      	lsls	r7, r1, #1
    8c04:	7868      	ldrb	r0, [r5, #1]
    8c06:	2130      	movs	r1, #48	; 0x30
    8c08:	47c0      	blx	r8
    8c0a:	b2c9      	uxtb	r1, r1
    8c0c:	187f      	adds	r7, r7, r1
    8c0e:	2f02      	cmp	r7, #2
    8c10:	d100      	bne.n	8c14 <setDate+0x1c8>
    8c12:	e73d      	b.n	8a90 <setDate+0x44>
    8c14:	2c33      	cmp	r4, #51	; 0x33
    8c16:	d900      	bls.n	8c1a <setDate+0x1ce>
    8c18:	e744      	b.n	8aa4 <setDate+0x58>
    8c1a:	e739      	b.n	8a90 <setDate+0x44>
				else if(i==4 && !month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>48);		//2nd in day
    8c1c:	ad05      	add	r5, sp, #20
    8c1e:	7828      	ldrb	r0, [r5, #0]
    8c20:	4b6c      	ldr	r3, [pc, #432]	; (8dd4 <setDate+0x388>)
    8c22:	4698      	mov	r8, r3
    8c24:	2130      	movs	r1, #48	; 0x30
    8c26:	4798      	blx	r3
    8c28:	008b      	lsls	r3, r1, #2
    8c2a:	18c9      	adds	r1, r1, r3
    8c2c:	004b      	lsls	r3, r1, #1
    8c2e:	b2df      	uxtb	r7, r3
    8c30:	7868      	ldrb	r0, [r5, #1]
    8c32:	2130      	movs	r1, #48	; 0x30
    8c34:	47c0      	blx	r8
    8c36:	1879      	adds	r1, r7, r1
    8c38:	b2c8      	uxtb	r0, r1
    8c3a:	4b67      	ldr	r3, [pc, #412]	; (8dd8 <setDate+0x38c>)
    8c3c:	4798      	blx	r3
    8c3e:	2800      	cmp	r0, #0
    8c40:	d000      	beq.n	8c44 <setDate+0x1f8>
    8c42:	e728      	b.n	8a96 <setDate+0x4a>
    8c44:	ab05      	add	r3, sp, #20
    8c46:	78db      	ldrb	r3, [r3, #3]
    8c48:	2b33      	cmp	r3, #51	; 0x33
    8c4a:	d000      	beq.n	8c4e <setDate+0x202>
    8c4c:	e723      	b.n	8a96 <setDate+0x4a>
    8c4e:	2c30      	cmp	r4, #48	; 0x30
    8c50:	d900      	bls.n	8c54 <setDate+0x208>
    8c52:	e727      	b.n	8aa4 <setDate+0x58>
    8c54:	e71f      	b.n	8a96 <setDate+0x4a>
				else if(i==4 && month31((dateIn[0]%48*10 + dateIn[1]%48)) && dateIn[3]==51 && tag>49);		//2nd in day
    8c56:	ad05      	add	r5, sp, #20
    8c58:	7828      	ldrb	r0, [r5, #0]
    8c5a:	4b5e      	ldr	r3, [pc, #376]	; (8dd4 <setDate+0x388>)
    8c5c:	4698      	mov	r8, r3
    8c5e:	2130      	movs	r1, #48	; 0x30
    8c60:	4798      	blx	r3
    8c62:	008b      	lsls	r3, r1, #2
    8c64:	18c9      	adds	r1, r1, r3
    8c66:	004b      	lsls	r3, r1, #1
    8c68:	b2df      	uxtb	r7, r3
    8c6a:	7868      	ldrb	r0, [r5, #1]
    8c6c:	2130      	movs	r1, #48	; 0x30
    8c6e:	47c0      	blx	r8
    8c70:	1879      	adds	r1, r7, r1
    8c72:	b2c8      	uxtb	r0, r1
    8c74:	4b58      	ldr	r3, [pc, #352]	; (8dd8 <setDate+0x38c>)
    8c76:	4798      	blx	r3
    8c78:	2800      	cmp	r0, #0
    8c7a:	d100      	bne.n	8c7e <setDate+0x232>
    8c7c:	e70e      	b.n	8a9c <setDate+0x50>
    8c7e:	ab05      	add	r3, sp, #20
    8c80:	78db      	ldrb	r3, [r3, #3]
    8c82:	2b33      	cmp	r3, #51	; 0x33
    8c84:	d000      	beq.n	8c88 <setDate+0x23c>
    8c86:	e709      	b.n	8a9c <setDate+0x50>
    8c88:	2c31      	cmp	r4, #49	; 0x31
    8c8a:	d900      	bls.n	8c8e <setDate+0x242>
    8c8c:	e70a      	b.n	8aa4 <setDate+0x58>
    8c8e:	e705      	b.n	8a9c <setDate+0x50>
			}else if(tag == clr){			//if clr is pressed
    8c90:	2c0a      	cmp	r4, #10
    8c92:	d00f      	beq.n	8cb4 <setDate+0x268>
			}else if(tag==del && i>0){		//if del is pressed
    8c94:	2c09      	cmp	r4, #9
    8c96:	d000      	beq.n	8c9a <setDate+0x24e>
    8c98:	e704      	b.n	8aa4 <setDate+0x58>
    8c9a:	2e00      	cmp	r6, #0
    8c9c:	d100      	bne.n	8ca0 <setDate+0x254>
    8c9e:	e701      	b.n	8aa4 <setDate+0x58>
				if(i==3 || i==6){			//clear last user input
    8ca0:	2e03      	cmp	r6, #3
    8ca2:	d00f      	beq.n	8cc4 <setDate+0x278>
    8ca4:	2e06      	cmp	r6, #6
    8ca6:	d00d      	beq.n	8cc4 <setDate+0x278>
				dateIn[i] = 0;
    8ca8:	2200      	movs	r2, #0
    8caa:	ab05      	add	r3, sp, #20
    8cac:	559a      	strb	r2, [r3, r6]
				i--;
    8cae:	3e01      	subs	r6, #1
    8cb0:	b2f6      	uxtb	r6, r6
    8cb2:	e6f7      	b.n	8aa4 <setDate+0x58>
					dateIn[i] = 0;
    8cb4:	2200      	movs	r2, #0
    8cb6:	ab05      	add	r3, sp, #20
    8cb8:	559a      	strb	r2, [r3, r6]
					i--;
    8cba:	3e01      	subs	r6, #1
    8cbc:	b2f6      	uxtb	r6, r6
				}while(i>0);
    8cbe:	2e00      	cmp	r6, #0
    8cc0:	d1f8      	bne.n	8cb4 <setDate+0x268>
    8cc2:	e6ef      	b.n	8aa4 <setDate+0x58>
					dateIn[i] = 0;
    8cc4:	2200      	movs	r2, #0
    8cc6:	ab05      	add	r3, sp, #20
    8cc8:	559a      	strb	r2, [r3, r6]
					i--;
    8cca:	3e01      	subs	r6, #1
    8ccc:	b2f6      	uxtb	r6, r6
    8cce:	e7eb      	b.n	8ca8 <setDate+0x25c>
				dateIn[i] = 0;				//compute date and update to system
    8cd0:	ad05      	add	r5, sp, #20
    8cd2:	2300      	movs	r3, #0
    8cd4:	55ab      	strb	r3, [r5, r6]
				rtc_calendar_disable(&rtc_instance);
    8cd6:	482c      	ldr	r0, [pc, #176]	; (8d88 <setDate+0x33c>)
    8cd8:	4b40      	ldr	r3, [pc, #256]	; (8ddc <setDate+0x390>)
    8cda:	4798      	blx	r3
				time.month = (dateIn[0]%48)*10+(dateIn[1]%48);
    8cdc:	7828      	ldrb	r0, [r5, #0]
    8cde:	4e3d      	ldr	r6, [pc, #244]	; (8dd4 <setDate+0x388>)
    8ce0:	2130      	movs	r1, #48	; 0x30
    8ce2:	47b0      	blx	r6
    8ce4:	008b      	lsls	r3, r1, #2
    8ce6:	18c9      	adds	r1, r1, r3
    8ce8:	004b      	lsls	r3, r1, #1
    8cea:	b2dc      	uxtb	r4, r3
    8cec:	7868      	ldrb	r0, [r5, #1]
    8cee:	2130      	movs	r1, #48	; 0x30
    8cf0:	47b0      	blx	r6
    8cf2:	1861      	adds	r1, r4, r1
    8cf4:	4f23      	ldr	r7, [pc, #140]	; (8d84 <setDate+0x338>)
    8cf6:	7179      	strb	r1, [r7, #5]
				time.day = (dateIn[3]%48)*10+(dateIn[4]%48);
    8cf8:	78e8      	ldrb	r0, [r5, #3]
    8cfa:	2130      	movs	r1, #48	; 0x30
    8cfc:	47b0      	blx	r6
    8cfe:	008b      	lsls	r3, r1, #2
    8d00:	18c9      	adds	r1, r1, r3
    8d02:	004b      	lsls	r3, r1, #1
    8d04:	b2dc      	uxtb	r4, r3
    8d06:	7928      	ldrb	r0, [r5, #4]
    8d08:	2130      	movs	r1, #48	; 0x30
    8d0a:	47b0      	blx	r6
    8d0c:	1861      	adds	r1, r4, r1
    8d0e:	7139      	strb	r1, [r7, #4]
				time.year = (dateIn[6]%48)*1000+(dateIn[7]%48)*100+dateIn[8]%48*10+dateIn[9]%48;
    8d10:	79a8      	ldrb	r0, [r5, #6]
    8d12:	2130      	movs	r1, #48	; 0x30
    8d14:	47b0      	blx	r6
    8d16:	b2c9      	uxtb	r1, r1
    8d18:	24fa      	movs	r4, #250	; 0xfa
    8d1a:	00a4      	lsls	r4, r4, #2
    8d1c:	434c      	muls	r4, r1
    8d1e:	b2a4      	uxth	r4, r4
    8d20:	79e8      	ldrb	r0, [r5, #7]
    8d22:	2130      	movs	r1, #48	; 0x30
    8d24:	47b0      	blx	r6
    8d26:	b2c9      	uxtb	r1, r1
    8d28:	2364      	movs	r3, #100	; 0x64
    8d2a:	4359      	muls	r1, r3
    8d2c:	b289      	uxth	r1, r1
    8d2e:	1864      	adds	r4, r4, r1
    8d30:	b2a4      	uxth	r4, r4
    8d32:	7a28      	ldrb	r0, [r5, #8]
    8d34:	2130      	movs	r1, #48	; 0x30
    8d36:	47b0      	blx	r6
    8d38:	b2c9      	uxtb	r1, r1
    8d3a:	008b      	lsls	r3, r1, #2
    8d3c:	18c9      	adds	r1, r1, r3
    8d3e:	004b      	lsls	r3, r1, #1
    8d40:	b29b      	uxth	r3, r3
    8d42:	18e4      	adds	r4, r4, r3
    8d44:	b2a4      	uxth	r4, r4
    8d46:	7a68      	ldrb	r0, [r5, #9]
    8d48:	2130      	movs	r1, #48	; 0x30
    8d4a:	47b0      	blx	r6
    8d4c:	b2c9      	uxtb	r1, r1
    8d4e:	1864      	adds	r4, r4, r1
    8d50:	80fc      	strh	r4, [r7, #6]
				rtc_calendar_set_time(&rtc_instance, &time);
    8d52:	0039      	movs	r1, r7
    8d54:	480c      	ldr	r0, [pc, #48]	; (8d88 <setDate+0x33c>)
    8d56:	4b22      	ldr	r3, [pc, #136]	; (8de0 <setDate+0x394>)
    8d58:	4798      	blx	r3
				rtc_calendar_enable(&rtc_instance);
    8d5a:	480b      	ldr	r0, [pc, #44]	; (8d88 <setDate+0x33c>)
    8d5c:	4b21      	ldr	r3, [pc, #132]	; (8de4 <setDate+0x398>)
    8d5e:	4798      	blx	r3
	tag = 0;
    8d60:	2200      	movs	r2, #0
    8d62:	4b0b      	ldr	r3, [pc, #44]	; (8d90 <setDate+0x344>)
    8d64:	701a      	strb	r2, [r3, #0]
}//end setDate
    8d66:	b009      	add	sp, #36	; 0x24
    8d68:	bc3c      	pop	{r2, r3, r4, r5}
    8d6a:	4690      	mov	r8, r2
    8d6c:	4699      	mov	r9, r3
    8d6e:	46a2      	mov	sl, r4
    8d70:	46ab      	mov	fp, r5
    8d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dateIn[i] = '/';
    8d74:	222f      	movs	r2, #47	; 0x2f
    8d76:	ab05      	add	r3, sp, #20
    8d78:	559a      	strb	r2, [r3, r6]
			i++;
    8d7a:	3601      	adds	r6, #1
    8d7c:	b2f6      	uxtb	r6, r6
    8d7e:	e69e      	b.n	8abe <setDate+0x72>
    8d80:	0000db1f 	.word	0x0000db1f
    8d84:	20001c58 	.word	0x20001c58
    8d88:	20001940 	.word	0x20001940
    8d8c:	00000555 	.word	0x00000555
    8d90:	200013f5 	.word	0x200013f5
    8d94:	000081a1 	.word	0x000081a1
    8d98:	20001c60 	.word	0x20001c60
    8d9c:	1f000009 	.word	0x1f000009
    8da0:	00007729 	.word	0x00007729
    8da4:	0e00003c 	.word	0x0e00003c
    8da8:	04ffffff 	.word	0x04ffffff
    8dac:	478006e0 	.word	0x478006e0
    8db0:	51800a00 	.word	0x51800a00
    8db4:	0000f528 	.word	0x0000f528
    8db8:	000070e5 	.word	0x000070e5
    8dbc:	0000f534 	.word	0x0000f534
    8dc0:	0030212c 	.word	0x0030212c
    8dc4:	000075b9 	.word	0x000075b9
    8dc8:	00007ca1 	.word	0x00007ca1
    8dcc:	00007c45 	.word	0x00007c45
    8dd0:	000081cd 	.word	0x000081cd
    8dd4:	0000ccbd 	.word	0x0000ccbd
    8dd8:	0000775d 	.word	0x0000775d
    8ddc:	00000459 	.word	0x00000459
    8de0:	00000531 	.word	0x00000531
    8de4:	00000439 	.word	0x00000439

00008de8 <settingOp>:
void settingOp(){
    8de8:	b530      	push	{r4, r5, lr}
    8dea:	b085      	sub	sp, #20
    8dec:	e08a      	b.n	8f04 <settingOp+0x11c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    8dee:	32ff      	adds	r2, #255	; 0xff
    8df0:	e0ab      	b.n	8f4a <settingOp+0x162>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    8df2:	2200      	movs	r2, #0
    8df4:	e0c4      	b.n	8f80 <settingOp+0x198>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    8df6:	32ff      	adds	r2, #255	; 0xff
    8df8:	e0e7      	b.n	8fca <settingOp+0x1e2>
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    8dfa:	2200      	movs	r2, #0
    8dfc:	4991      	ldr	r1, [pc, #580]	; (9044 <settingOp+0x25c>)
    8dfe:	9103      	str	r1, [sp, #12]
    8e00:	9202      	str	r2, [sp, #8]
    8e02:	9301      	str	r3, [sp, #4]
    8e04:	2335      	movs	r3, #53	; 0x35
    8e06:	9300      	str	r3, [sp, #0]
    8e08:	332b      	adds	r3, #43	; 0x2b
    8e0a:	22b1      	movs	r2, #177	; 0xb1
    8e0c:	21c8      	movs	r1, #200	; 0xc8
    8e0e:	0049      	lsls	r1, r1, #1
    8e10:	4c8d      	ldr	r4, [pc, #564]	; (9048 <settingOp+0x260>)
    8e12:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(cal));
    8e14:	4c8d      	ldr	r4, [pc, #564]	; (904c <settingOp+0x264>)
    8e16:	498e      	ldr	r1, [pc, #568]	; (9050 <settingOp+0x268>)
    8e18:	6820      	ldr	r0, [r4, #0]
    8e1a:	4b8e      	ldr	r3, [pc, #568]	; (9054 <settingOp+0x26c>)
    8e1c:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    8e1e:	6820      	ldr	r0, [r4, #0]
    8e20:	4b8d      	ldr	r3, [pc, #564]	; (9058 <settingOp+0x270>)
    8e22:	781b      	ldrb	r3, [r3, #0]
    8e24:	4a8d      	ldr	r2, [pc, #564]	; (905c <settingOp+0x274>)
    8e26:	7812      	ldrb	r2, [r2, #0]
    8e28:	2a07      	cmp	r2, #7
    8e2a:	d100      	bne.n	8e2e <settingOp+0x46>
    8e2c:	e0e9      	b.n	9002 <settingOp+0x21a>
    8e2e:	2200      	movs	r2, #0
    8e30:	498b      	ldr	r1, [pc, #556]	; (9060 <settingOp+0x278>)
    8e32:	9103      	str	r1, [sp, #12]
    8e34:	9202      	str	r2, [sp, #8]
    8e36:	9301      	str	r3, [sp, #4]
    8e38:	2335      	movs	r3, #53	; 0x35
    8e3a:	9300      	str	r3, [sp, #0]
    8e3c:	3393      	adds	r3, #147	; 0x93
    8e3e:	22f0      	movs	r2, #240	; 0xf0
    8e40:	2196      	movs	r1, #150	; 0x96
    8e42:	0049      	lsls	r1, r1, #1
    8e44:	4c80      	ldr	r4, [pc, #512]	; (9048 <settingOp+0x260>)
    8e46:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sDate));
    8e48:	4c80      	ldr	r4, [pc, #512]	; (904c <settingOp+0x264>)
    8e4a:	4986      	ldr	r1, [pc, #536]	; (9064 <settingOp+0x27c>)
    8e4c:	6820      	ldr	r0, [r4, #0]
    8e4e:	4b81      	ldr	r3, [pc, #516]	; (9054 <settingOp+0x26c>)
    8e50:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    8e52:	6820      	ldr	r0, [r4, #0]
    8e54:	4b80      	ldr	r3, [pc, #512]	; (9058 <settingOp+0x270>)
    8e56:	781b      	ldrb	r3, [r3, #0]
    8e58:	4a80      	ldr	r2, [pc, #512]	; (905c <settingOp+0x274>)
    8e5a:	7812      	ldrb	r2, [r2, #0]
    8e5c:	2a08      	cmp	r2, #8
    8e5e:	d100      	bne.n	8e62 <settingOp+0x7a>
    8e60:	e0d1      	b.n	9006 <settingOp+0x21e>
    8e62:	2200      	movs	r2, #0
    8e64:	4980      	ldr	r1, [pc, #512]	; (9068 <settingOp+0x280>)
    8e66:	9103      	str	r1, [sp, #12]
    8e68:	9202      	str	r2, [sp, #8]
    8e6a:	9301      	str	r3, [sp, #4]
    8e6c:	2335      	movs	r3, #53	; 0x35
    8e6e:	9300      	str	r3, [sp, #0]
    8e70:	3393      	adds	r3, #147	; 0x93
    8e72:	2297      	movs	r2, #151	; 0x97
    8e74:	0052      	lsls	r2, r2, #1
    8e76:	2196      	movs	r1, #150	; 0x96
    8e78:	0049      	lsls	r1, r1, #1
    8e7a:	4c73      	ldr	r4, [pc, #460]	; (9048 <settingOp+0x260>)
    8e7c:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sTime));
    8e7e:	4c73      	ldr	r4, [pc, #460]	; (904c <settingOp+0x264>)
    8e80:	497a      	ldr	r1, [pc, #488]	; (906c <settingOp+0x284>)
    8e82:	6820      	ldr	r0, [r4, #0]
    8e84:	4b73      	ldr	r3, [pc, #460]	; (9054 <settingOp+0x26c>)
    8e86:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    8e88:	6820      	ldr	r0, [r4, #0]
    8e8a:	4b73      	ldr	r3, [pc, #460]	; (9058 <settingOp+0x270>)
    8e8c:	781b      	ldrb	r3, [r3, #0]
    8e8e:	4a73      	ldr	r2, [pc, #460]	; (905c <settingOp+0x274>)
    8e90:	7812      	ldrb	r2, [r2, #0]
    8e92:	2a05      	cmp	r2, #5
    8e94:	d100      	bne.n	8e98 <settingOp+0xb0>
    8e96:	e0b8      	b.n	900a <settingOp+0x222>
    8e98:	2200      	movs	r2, #0
    8e9a:	4975      	ldr	r1, [pc, #468]	; (9070 <settingOp+0x288>)
    8e9c:	9103      	str	r1, [sp, #12]
    8e9e:	9202      	str	r2, [sp, #8]
    8ea0:	9301      	str	r3, [sp, #4]
    8ea2:	2335      	movs	r3, #53	; 0x35
    8ea4:	9300      	str	r3, [sp, #0]
    8ea6:	3393      	adds	r3, #147	; 0x93
    8ea8:	22b6      	movs	r2, #182	; 0xb6
    8eaa:	0052      	lsls	r2, r2, #1
    8eac:	2196      	movs	r1, #150	; 0x96
    8eae:	0049      	lsls	r1, r1, #1
    8eb0:	4c65      	ldr	r4, [pc, #404]	; (9048 <settingOp+0x260>)
    8eb2:	47a0      	blx	r4
		drawBack();
    8eb4:	4b6f      	ldr	r3, [pc, #444]	; (9074 <settingOp+0x28c>)
    8eb6:	4798      	blx	r3
		drawTitle("Settings");
    8eb8:	486f      	ldr	r0, [pc, #444]	; (9078 <settingOp+0x290>)
    8eba:	4b70      	ldr	r3, [pc, #448]	; (907c <settingOp+0x294>)
    8ebc:	4798      	blx	r3
		disEnd();
    8ebe:	4b70      	ldr	r3, [pc, #448]	; (9080 <settingOp+0x298>)
    8ec0:	4798      	blx	r3
		if (tag == cal)			calScreen();	//go to calibrate the screen
    8ec2:	4b66      	ldr	r3, [pc, #408]	; (905c <settingOp+0x274>)
    8ec4:	781b      	ldrb	r3, [r3, #0]
    8ec6:	2b07      	cmp	r3, #7
    8ec8:	d100      	bne.n	8ecc <settingOp+0xe4>
    8eca:	e0a0      	b.n	900e <settingOp+0x226>
		else if (tag == sTime)	setTime();		//set time screen
    8ecc:	2b05      	cmp	r3, #5
    8ece:	d100      	bne.n	8ed2 <settingOp+0xea>
    8ed0:	e0a0      	b.n	9014 <settingOp+0x22c>
		else if (tag == sDate)	setDate();		//set date screen
    8ed2:	2b08      	cmp	r3, #8
    8ed4:	d100      	bne.n	8ed8 <settingOp+0xf0>
    8ed6:	e0a0      	b.n	901a <settingOp+0x232>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    8ed8:	4b60      	ldr	r3, [pc, #384]	; (905c <settingOp+0x274>)
    8eda:	781b      	ldrb	r3, [r3, #0]
    8edc:	2b0c      	cmp	r3, #12
    8ede:	d100      	bne.n	8ee2 <settingOp+0xfa>
    8ee0:	e09e      	b.n	9020 <settingOp+0x238>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    8ee2:	2b0d      	cmp	r3, #13
    8ee4:	d100      	bne.n	8ee8 <settingOp+0x100>
    8ee6:	e09f      	b.n	9028 <settingOp+0x240>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    8ee8:	2b0f      	cmp	r3, #15
    8eea:	d100      	bne.n	8eee <settingOp+0x106>
    8eec:	e0a0      	b.n	9030 <settingOp+0x248>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    8eee:	2b0e      	cmp	r3, #14
    8ef0:	d100      	bne.n	8ef4 <settingOp+0x10c>
    8ef2:	e0a1      	b.n	9038 <settingOp+0x250>
		delay_ms(50);
    8ef4:	2032      	movs	r0, #50	; 0x32
    8ef6:	4b63      	ldr	r3, [pc, #396]	; (9084 <settingOp+0x29c>)
    8ef8:	4798      	blx	r3
	} while (tag != back);
    8efa:	4b58      	ldr	r3, [pc, #352]	; (905c <settingOp+0x274>)
    8efc:	781b      	ldrb	r3, [r3, #0]
    8efe:	2b06      	cmp	r3, #6
    8f00:	d100      	bne.n	8f04 <settingOp+0x11c>
    8f02:	e09d      	b.n	9040 <settingOp+0x258>
		tag = 0;
    8f04:	4d55      	ldr	r5, [pc, #340]	; (905c <settingOp+0x274>)
    8f06:	2300      	movs	r3, #0
    8f08:	702b      	strb	r3, [r5, #0]
		disStart();
    8f0a:	4b5f      	ldr	r3, [pc, #380]	; (9088 <settingOp+0x2a0>)
    8f0c:	4798      	blx	r3
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    8f0e:	4c4f      	ldr	r4, [pc, #316]	; (904c <settingOp+0x264>)
    8f10:	495e      	ldr	r1, [pc, #376]	; (908c <settingOp+0x2a4>)
    8f12:	6820      	ldr	r0, [r4, #0]
    8f14:	4b5e      	ldr	r3, [pc, #376]	; (9090 <settingOp+0x2a8>)
    8f16:	4798      	blx	r3
    8f18:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3-20, 30, OPT_CENTER, "Visual:");
    8f1a:	6820      	ldr	r0, [r4, #0]
    8f1c:	4b5d      	ldr	r3, [pc, #372]	; (9094 <settingOp+0x2ac>)
    8f1e:	9301      	str	r3, [sp, #4]
    8f20:	23c0      	movs	r3, #192	; 0xc0
    8f22:	00db      	lsls	r3, r3, #3
    8f24:	9300      	str	r3, [sp, #0]
    8f26:	231e      	movs	r3, #30
    8f28:	228c      	movs	r2, #140	; 0x8c
    8f2a:	21c8      	movs	r1, #200	; 0xc8
    8f2c:	4d5a      	ldr	r5, [pc, #360]	; (9098 <settingOp+0x2b0>)
    8f2e:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOn));
    8f30:	495a      	ldr	r1, [pc, #360]	; (909c <settingOp+0x2b4>)
    8f32:	6820      	ldr	r0, [r4, #0]
    8f34:	4b47      	ldr	r3, [pc, #284]	; (9054 <settingOp+0x26c>)
    8f36:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==1)? OPT_FLAT:0,"Yes");
    8f38:	6820      	ldr	r0, [r4, #0]
    8f3a:	4b47      	ldr	r3, [pc, #284]	; (9058 <settingOp+0x270>)
    8f3c:	781b      	ldrb	r3, [r3, #0]
    8f3e:	4a58      	ldr	r2, [pc, #352]	; (90a0 <settingOp+0x2b8>)
    8f40:	7812      	ldrb	r2, [r2, #0]
    8f42:	2a01      	cmp	r2, #1
    8f44:	d100      	bne.n	8f48 <settingOp+0x160>
    8f46:	e752      	b.n	8dee <settingOp+0x6>
    8f48:	2200      	movs	r2, #0
    8f4a:	4956      	ldr	r1, [pc, #344]	; (90a4 <settingOp+0x2bc>)
    8f4c:	9103      	str	r1, [sp, #12]
    8f4e:	9202      	str	r2, [sp, #8]
    8f50:	9301      	str	r3, [sp, #4]
    8f52:	2335      	movs	r3, #53	; 0x35
    8f54:	9300      	str	r3, [sp, #0]
    8f56:	332b      	adds	r3, #43	; 0x2b
    8f58:	2273      	movs	r2, #115	; 0x73
    8f5a:	2196      	movs	r1, #150	; 0x96
    8f5c:	0049      	lsls	r1, r1, #1
    8f5e:	4c3a      	ldr	r4, [pc, #232]	; (9048 <settingOp+0x260>)
    8f60:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(alertOff));
    8f62:	4c3a      	ldr	r4, [pc, #232]	; (904c <settingOp+0x264>)
    8f64:	4950      	ldr	r1, [pc, #320]	; (90a8 <settingOp+0x2c0>)
    8f66:	6820      	ldr	r0, [r4, #0]
    8f68:	4b3a      	ldr	r3, [pc, #232]	; (9054 <settingOp+0x26c>)
    8f6a:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.24),(disWid*0.12),(disHei*0.112),font, (alert==0)? OPT_FLAT:0,"No");
    8f6c:	6820      	ldr	r0, [r4, #0]
    8f6e:	4b3a      	ldr	r3, [pc, #232]	; (9058 <settingOp+0x270>)
    8f70:	781b      	ldrb	r3, [r3, #0]
    8f72:	4a4b      	ldr	r2, [pc, #300]	; (90a0 <settingOp+0x2b8>)
    8f74:	7812      	ldrb	r2, [r2, #0]
    8f76:	2a00      	cmp	r2, #0
    8f78:	d000      	beq.n	8f7c <settingOp+0x194>
    8f7a:	e73a      	b.n	8df2 <settingOp+0xa>
    8f7c:	3201      	adds	r2, #1
    8f7e:	32ff      	adds	r2, #255	; 0xff
    8f80:	4930      	ldr	r1, [pc, #192]	; (9044 <settingOp+0x25c>)
    8f82:	9103      	str	r1, [sp, #12]
    8f84:	9202      	str	r2, [sp, #8]
    8f86:	9301      	str	r3, [sp, #4]
    8f88:	2335      	movs	r3, #53	; 0x35
    8f8a:	9300      	str	r3, [sp, #0]
    8f8c:	332b      	adds	r3, #43	; 0x2b
    8f8e:	2273      	movs	r2, #115	; 0x73
    8f90:	21c8      	movs	r1, #200	; 0xc8
    8f92:	0049      	lsls	r1, r1, #1
    8f94:	4c2c      	ldr	r4, [pc, #176]	; (9048 <settingOp+0x260>)
    8f96:	47a0      	blx	r4
		Ft_Gpu_CoCmd_Text(phost, (disWid/4), disHei/3+30, 30, OPT_CENTER, "Sound: ");
    8f98:	4c2c      	ldr	r4, [pc, #176]	; (904c <settingOp+0x264>)
    8f9a:	6820      	ldr	r0, [r4, #0]
    8f9c:	4b43      	ldr	r3, [pc, #268]	; (90ac <settingOp+0x2c4>)
    8f9e:	9301      	str	r3, [sp, #4]
    8fa0:	23c0      	movs	r3, #192	; 0xc0
    8fa2:	00db      	lsls	r3, r3, #3
    8fa4:	9300      	str	r3, [sp, #0]
    8fa6:	231e      	movs	r3, #30
    8fa8:	22be      	movs	r2, #190	; 0xbe
    8faa:	21c8      	movs	r1, #200	; 0xc8
    8fac:	4d3a      	ldr	r5, [pc, #232]	; (9098 <settingOp+0x2b0>)
    8fae:	47a8      	blx	r5
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOn));
    8fb0:	493f      	ldr	r1, [pc, #252]	; (90b0 <settingOp+0x2c8>)
    8fb2:	6820      	ldr	r0, [r4, #0]
    8fb4:	4b27      	ldr	r3, [pc, #156]	; (9054 <settingOp+0x26c>)
    8fb6:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==1)? OPT_FLAT:0,"Yes");
    8fb8:	6820      	ldr	r0, [r4, #0]
    8fba:	4b27      	ldr	r3, [pc, #156]	; (9058 <settingOp+0x270>)
    8fbc:	781b      	ldrb	r3, [r3, #0]
    8fbe:	4a3d      	ldr	r2, [pc, #244]	; (90b4 <settingOp+0x2cc>)
    8fc0:	7812      	ldrb	r2, [r2, #0]
    8fc2:	2a01      	cmp	r2, #1
    8fc4:	d100      	bne.n	8fc8 <settingOp+0x1e0>
    8fc6:	e716      	b.n	8df6 <settingOp+0xe>
    8fc8:	2200      	movs	r2, #0
    8fca:	4936      	ldr	r1, [pc, #216]	; (90a4 <settingOp+0x2bc>)
    8fcc:	9103      	str	r1, [sp, #12]
    8fce:	9202      	str	r2, [sp, #8]
    8fd0:	9301      	str	r3, [sp, #4]
    8fd2:	2335      	movs	r3, #53	; 0x35
    8fd4:	9300      	str	r3, [sp, #0]
    8fd6:	332b      	adds	r3, #43	; 0x2b
    8fd8:	22b1      	movs	r2, #177	; 0xb1
    8fda:	2196      	movs	r1, #150	; 0x96
    8fdc:	0049      	lsls	r1, r1, #1
    8fde:	4c1a      	ldr	r4, [pc, #104]	; (9048 <settingOp+0x260>)
    8fe0:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(soundOff));
    8fe2:	4c1a      	ldr	r4, [pc, #104]	; (904c <settingOp+0x264>)
    8fe4:	4934      	ldr	r1, [pc, #208]	; (90b8 <settingOp+0x2d0>)
    8fe6:	6820      	ldr	r0, [r4, #0]
    8fe8:	4b1a      	ldr	r3, [pc, #104]	; (9054 <settingOp+0x26c>)
    8fea:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost,disWid/2,(disHei*0.37),(disWid*0.12),(disHei*0.112),font, (sound==0)? OPT_FLAT:0,"No");
    8fec:	6820      	ldr	r0, [r4, #0]
    8fee:	4b1a      	ldr	r3, [pc, #104]	; (9058 <settingOp+0x270>)
    8ff0:	781b      	ldrb	r3, [r3, #0]
    8ff2:	4a30      	ldr	r2, [pc, #192]	; (90b4 <settingOp+0x2cc>)
    8ff4:	7812      	ldrb	r2, [r2, #0]
    8ff6:	2a00      	cmp	r2, #0
    8ff8:	d000      	beq.n	8ffc <settingOp+0x214>
    8ffa:	e6fe      	b.n	8dfa <settingOp+0x12>
    8ffc:	3201      	adds	r2, #1
    8ffe:	32ff      	adds	r2, #255	; 0xff
    9000:	e6fc      	b.n	8dfc <settingOp+0x14>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.5),(disWid*0.25),(disHei*0.112),font, (tag==cal)? OPT_FLAT:0,"  Calibrate Screen  ");
    9002:	32f9      	adds	r2, #249	; 0xf9
    9004:	e714      	b.n	8e30 <settingOp+0x48>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.63),(disWid*0.25),(disHei*0.112),font, (tag==sDate)? OPT_FLAT:0,"  Set Date  ");
    9006:	32f8      	adds	r2, #248	; 0xf8
    9008:	e72c      	b.n	8e64 <settingOp+0x7c>
		Ft_Gpu_CoCmd_Button(phost,disWid/2 - disWid*0.25/2,(disHei*0.76),(disWid*0.25),(disHei*0.112),font, (tag==sTime)? OPT_FLAT:0,"  Set Time  ");
    900a:	32fb      	adds	r2, #251	; 0xfb
    900c:	e745      	b.n	8e9a <settingOp+0xb2>
		if (tag == cal)			calScreen();	//go to calibrate the screen
    900e:	4b2b      	ldr	r3, [pc, #172]	; (90bc <settingOp+0x2d4>)
    9010:	4798      	blx	r3
    9012:	e761      	b.n	8ed8 <settingOp+0xf0>
		else if (tag == sTime)	setTime();		//set time screen
    9014:	4b2a      	ldr	r3, [pc, #168]	; (90c0 <settingOp+0x2d8>)
    9016:	4798      	blx	r3
    9018:	e75e      	b.n	8ed8 <settingOp+0xf0>
		else if (tag == sDate)	setDate();		//set date screen
    901a:	4b2a      	ldr	r3, [pc, #168]	; (90c4 <settingOp+0x2dc>)
    901c:	4798      	blx	r3
    901e:	e75b      	b.n	8ed8 <settingOp+0xf0>
		if (tag == alertOn)		alert = 1;		//set visual alert on
    9020:	2101      	movs	r1, #1
    9022:	4a1f      	ldr	r2, [pc, #124]	; (90a0 <settingOp+0x2b8>)
    9024:	7011      	strb	r1, [r2, #0]
    9026:	e75c      	b.n	8ee2 <settingOp+0xfa>
		if (tag == alertOff)	alert = 0;		//set visual alert off
    9028:	2100      	movs	r1, #0
    902a:	4a1d      	ldr	r2, [pc, #116]	; (90a0 <settingOp+0x2b8>)
    902c:	7011      	strb	r1, [r2, #0]
    902e:	e75b      	b.n	8ee8 <settingOp+0x100>
		if (tag == soundOff)	sound = 0;		//set sound alert off
    9030:	2100      	movs	r1, #0
    9032:	4a20      	ldr	r2, [pc, #128]	; (90b4 <settingOp+0x2cc>)
    9034:	7011      	strb	r1, [r2, #0]
    9036:	e75a      	b.n	8eee <settingOp+0x106>
		if (tag == soundOn)		sound = 1;		//set sound alert on
    9038:	2201      	movs	r2, #1
    903a:	4b1e      	ldr	r3, [pc, #120]	; (90b4 <settingOp+0x2cc>)
    903c:	701a      	strb	r2, [r3, #0]
    903e:	e759      	b.n	8ef4 <settingOp+0x10c>
}//end settOp
    9040:	b005      	add	sp, #20
    9042:	bd30      	pop	{r4, r5, pc}
    9044:	0000f574 	.word	0x0000f574
    9048:	000071f9 	.word	0x000071f9
    904c:	20001c60 	.word	0x20001c60
    9050:	03000007 	.word	0x03000007
    9054:	00007729 	.word	0x00007729
    9058:	20000250 	.word	0x20000250
    905c:	200013f5 	.word	0x200013f5
    9060:	0000f580 	.word	0x0000f580
    9064:	03000008 	.word	0x03000008
    9068:	0000f598 	.word	0x0000f598
    906c:	03000005 	.word	0x03000005
    9070:	0000f5a8 	.word	0x0000f5a8
    9074:	00007c45 	.word	0x00007c45
    9078:	0000f5b8 	.word	0x0000f5b8
    907c:	00007bc5 	.word	0x00007bc5
    9080:	000081cd 	.word	0x000081cd
    9084:	00000151 	.word	0x00000151
    9088:	000081a1 	.word	0x000081a1
    908c:	0030212c 	.word	0x0030212c
    9090:	000075b9 	.word	0x000075b9
    9094:	0000f568 	.word	0x0000f568
    9098:	000070e5 	.word	0x000070e5
    909c:	0300000c 	.word	0x0300000c
    90a0:	2000024f 	.word	0x2000024f
    90a4:	0000f570 	.word	0x0000f570
    90a8:	0300000d 	.word	0x0300000d
    90ac:	0000f578 	.word	0x0000f578
    90b0:	0300000e 	.word	0x0300000e
    90b4:	200013f4 	.word	0x200013f4
    90b8:	0300000f 	.word	0x0300000f
    90bc:	00008759 	.word	0x00008759
    90c0:	000087ad 	.word	0x000087ad
    90c4:	00008a4d 	.word	0x00008a4d

000090c8 <configure_ext_ints>:
/* Function Name    : configure_ext_ints
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt
	*/
void configure_ext_ints(void){
    90c8:	b500      	push	{lr}
    90ca:	b085      	sub	sp, #20
	// struct for external interrupt config
	struct extint_chan_conf ext_int_config;
	    
	// configure the external interrupt
	ext_int_config.gpio_pin            = LCD_INT;
    90cc:	a901      	add	r1, sp, #4
    90ce:	2309      	movs	r3, #9
    90d0:	9301      	str	r3, [sp, #4]
	ext_int_config.gpio_pin_mux        = LCD_INT_PINMUX;
    90d2:	604b      	str	r3, [r1, #4]
	ext_int_config.gpio_pin_pull       = LCD_INT_PULL;
    90d4:	2300      	movs	r3, #0
    90d6:	720b      	strb	r3, [r1, #8]
	ext_int_config.wake_if_sleeping    = true;
    90d8:	2201      	movs	r2, #1
    90da:	724a      	strb	r2, [r1, #9]
	ext_int_config.filter_input_signal = false;
    90dc:	728b      	strb	r3, [r1, #10]
	ext_int_config.detection_criteria  = LCD_INT_DETECT;
    90de:	3305      	adds	r3, #5
    90e0:	72cb      	strb	r3, [r1, #11]

	extint_chan_set_config(LCD_INT_LINE, &ext_int_config);
    90e2:	2009      	movs	r0, #9
    90e4:	4b01      	ldr	r3, [pc, #4]	; (90ec <configure_ext_ints+0x24>)
    90e6:	4798      	blx	r3
}//end configure_ext_ints
    90e8:	b005      	add	sp, #20
    90ea:	bd00      	pop	{pc}
    90ec:	000003bd 	.word	0x000003bd

000090f0 <configure_ext_int_callback>:
/* Function Name    : configure_ext_int_callback
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt callback
	*/
void configure_ext_int_callback(void){
    90f0:	b510      	push	{r4, lr}
	// register callback for the LCD's interrupt
	extint_register_callback(lcd_interrupt_callback, LCD_INT_LINE, \
    90f2:	2205      	movs	r2, #5
    90f4:	2109      	movs	r1, #9
    90f6:	4802      	ldr	r0, [pc, #8]	; (9100 <configure_ext_int_callback+0x10>)
    90f8:	4b02      	ldr	r3, [pc, #8]	; (9104 <configure_ext_int_callback+0x14>)
    90fa:	4798      	blx	r3
	    LCD_INT_DETECT);
}//end configure_ext_int_callback
    90fc:	bd10      	pop	{r4, pc}
    90fe:	46c0      	nop			; (mov r8, r8)
    9100:	000096d1 	.word	0x000096d1
    9104:	00000275 	.word	0x00000275

00009108 <configure_rtc_calendar>:
/* Function Name    : configure_rtc_calendar
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config the rtc and set time to 00:00:00 01/01/2000
	*/
void configure_rtc_calendar(void){
    9108:	b530      	push	{r4, r5, lr}
    910a:	b089      	sub	sp, #36	; 0x24
	//initial time
	time.year   = 2017;
    910c:	4b26      	ldr	r3, [pc, #152]	; (91a8 <configure_rtc_calendar+0xa0>)
    910e:	4a27      	ldr	r2, [pc, #156]	; (91ac <configure_rtc_calendar+0xa4>)
    9110:	80da      	strh	r2, [r3, #6]
	time.month  = 12;
    9112:	220c      	movs	r2, #12
    9114:	715a      	strb	r2, [r3, #5]
	time.day    = 31;
    9116:	3213      	adds	r2, #19
    9118:	711a      	strb	r2, [r3, #4]
	time.hour   = 23;
    911a:	3a08      	subs	r2, #8
    911c:	709a      	strb	r2, [r3, #2]
	time.minute = 59;
    911e:	3224      	adds	r2, #36	; 0x24
    9120:	705a      	strb	r2, [r3, #1]
	time.second = 55;
    9122:	3a04      	subs	r2, #4
    9124:	701a      	strb	r2, [r3, #0]
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    9126:	aa01      	add	r2, sp, #4
    9128:	2300      	movs	r3, #0
    912a:	7013      	strb	r3, [r2, #0]
	time->minute = 0;
    912c:	7053      	strb	r3, [r2, #1]
	time->hour   = 0;
    912e:	7093      	strb	r3, [r2, #2]
	time->pm     = 0;
    9130:	70d3      	strb	r3, [r2, #3]
	time->day    = 1;
    9132:	2101      	movs	r1, #1
    9134:	7111      	strb	r1, [r2, #4]
	time->month  = 1;
    9136:	7151      	strb	r1, [r2, #5]
	time->year   = 2000;
    9138:	21fa      	movs	r1, #250	; 0xfa
    913a:	00c9      	lsls	r1, r1, #3
    913c:	80d1      	strh	r1, [r2, #6]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    913e:	aa03      	add	r2, sp, #12
    9140:	20a0      	movs	r0, #160	; 0xa0
    9142:	0100      	lsls	r0, r0, #4
    9144:	8010      	strh	r0, [r2, #0]
	config->clear_on_match      = false;
    9146:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    9148:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
    914a:	7113      	strb	r3, [r2, #4]
	config->year_init_value     = 2000;
    914c:	80d1      	strh	r1, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    914e:	2400      	movs	r4, #0
    9150:	2c00      	cmp	r4, #0
    9152:	d014      	beq.n	917e <configure_rtc_calendar+0x76>
		
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	config_rtc_calendar.clock_24h     = true;
    9154:	aa03      	add	r2, sp, #12
    9156:	2301      	movs	r3, #1
    9158:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    915a:	4c15      	ldr	r4, [pc, #84]	; (91b0 <configure_rtc_calendar+0xa8>)
    915c:	4915      	ldr	r1, [pc, #84]	; (91b4 <configure_rtc_calendar+0xac>)
    915e:	0020      	movs	r0, r4
    9160:	4b15      	ldr	r3, [pc, #84]	; (91b8 <configure_rtc_calendar+0xb0>)
    9162:	4798      	blx	r3
		
	rtc_calendar_set_time(&rtc_instance, &time);
    9164:	4910      	ldr	r1, [pc, #64]	; (91a8 <configure_rtc_calendar+0xa0>)
    9166:	0020      	movs	r0, r4
    9168:	4b14      	ldr	r3, [pc, #80]	; (91bc <configure_rtc_calendar+0xb4>)
    916a:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    916c:	0020      	movs	r0, r4
    916e:	4b14      	ldr	r3, [pc, #80]	; (91c0 <configure_rtc_calendar+0xb8>)
    9170:	4798      	blx	r3
	// adjust the frequency (the clock is slow atm)
	rtc_calendar_frequency_correction(&rtc_instance, 127);
    9172:	217f      	movs	r1, #127	; 0x7f
    9174:	0020      	movs	r0, r4
    9176:	4b13      	ldr	r3, [pc, #76]	; (91c4 <configure_rtc_calendar+0xbc>)
    9178:	4798      	blx	r3
}//end configure_rtc_calendar
    917a:	b009      	add	sp, #36	; 0x24
    917c:	bd30      	pop	{r4, r5, pc}
		config->alarm[i].time = time;
    917e:	00a5      	lsls	r5, r4, #2
    9180:	192b      	adds	r3, r5, r4
    9182:	0058      	lsls	r0, r3, #1
    9184:	ab03      	add	r3, sp, #12
    9186:	469c      	mov	ip, r3
    9188:	4460      	add	r0, ip
    918a:	3008      	adds	r0, #8
    918c:	2208      	movs	r2, #8
    918e:	a901      	add	r1, sp, #4
    9190:	4b0d      	ldr	r3, [pc, #52]	; (91c8 <configure_rtc_calendar+0xc0>)
    9192:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    9194:	192d      	adds	r5, r5, r4
    9196:	006b      	lsls	r3, r5, #1
    9198:	aa03      	add	r2, sp, #12
    919a:	4694      	mov	ip, r2
    919c:	4463      	add	r3, ip
    919e:	2206      	movs	r2, #6
    91a0:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    91a2:	3401      	adds	r4, #1
    91a4:	b2e4      	uxtb	r4, r4
    91a6:	e7d3      	b.n	9150 <configure_rtc_calendar+0x48>
    91a8:	20001c58 	.word	0x20001c58
    91ac:	000007e1 	.word	0x000007e1
    91b0:	20001940 	.word	0x20001940
    91b4:	40001400 	.word	0x40001400
    91b8:	00000651 	.word	0x00000651
    91bc:	00000531 	.word	0x00000531
    91c0:	00000439 	.word	0x00000439
    91c4:	000006b1 	.word	0x000006b1
    91c8:	0000db0d 	.word	0x0000db0d

000091cc <clock_osc32k_init>:
/* Function Name    : clock_osc32k_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config internal oscillator 32 kHz
	*/
void clock_osc32k_init(void){
    91cc:	b500      	push	{lr}
    91ce:	b083      	sub	sp, #12
	config->enable_1khz_output  = true;
    91d0:	2301      	movs	r3, #1
    91d2:	466a      	mov	r2, sp
    91d4:	7053      	strb	r3, [r2, #1]
	config->enable_32khz_output = true;
    91d6:	7093      	strb	r3, [r2, #2]
	config->run_in_standby      = false;
    91d8:	2200      	movs	r2, #0
    91da:	4669      	mov	r1, sp
    91dc:	70ca      	strb	r2, [r1, #3]
	config->on_demand           = true;
    91de:	710b      	strb	r3, [r1, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    91e0:	3306      	adds	r3, #6
    91e2:	700b      	strb	r3, [r1, #0]
	config->write_once          = false;
    91e4:	714a      	strb	r2, [r1, #5]
	osc32_config.on_demand				= true;
	osc32_config.run_in_standby			= false;
	osc32_config.startup_time			= SYSTEM_OSC32K_STARTUP_130;
	osc32_config.write_once				= false;
	
	system_clock_source_osc32k_set_config(&osc32_config);
    91e6:	4668      	mov	r0, sp
    91e8:	4b01      	ldr	r3, [pc, #4]	; (91f0 <clock_osc32k_init+0x24>)
    91ea:	4798      	blx	r3
}//end clock_osc32k_init
    91ec:	b003      	add	sp, #12
    91ee:	bd00      	pop	{pc}
    91f0:	0000c115 	.word	0x0000c115

000091f4 <clock_gclk2_init>:
/* Function Name    : clock_gclk2_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : turn on glck using internal 32 kHz oscillator
	*/
void clock_gclk2_init(void){
    91f4:	b500      	push	{lr}
    91f6:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk2_config;
		
	system_gclk_init();
    91f8:	4b09      	ldr	r3, [pc, #36]	; (9220 <clock_gclk2_init+0x2c>)
    91fa:	4798      	blx	r3
		
	gclk2_config.source_clock			= SYSTEM_CLOCK_SOURCE_OSC32K;
    91fc:	a901      	add	r1, sp, #4
    91fe:	2304      	movs	r3, #4
    9200:	700b      	strb	r3, [r1, #0]
	gclk2_config.output_enable			= false;
    9202:	2300      	movs	r3, #0
    9204:	724b      	strb	r3, [r1, #9]
	gclk2_config.high_when_disabled		= false;
    9206:	704b      	strb	r3, [r1, #1]
	gclk2_config.division_factor		= 32;
    9208:	2220      	movs	r2, #32
    920a:	604a      	str	r2, [r1, #4]
	gclk2_config.run_in_standby			= false;
    920c:	720b      	strb	r3, [r1, #8]
		
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclk2_config);
    920e:	2002      	movs	r0, #2
    9210:	4b04      	ldr	r3, [pc, #16]	; (9224 <clock_gclk2_init+0x30>)
    9212:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    9214:	2002      	movs	r0, #2
    9216:	4b04      	ldr	r3, [pc, #16]	; (9228 <clock_gclk2_init+0x34>)
    9218:	4798      	blx	r3
}//end clock_gclk2_init
    921a:	b005      	add	sp, #20
    921c:	bd00      	pop	{pc}
    921e:	46c0      	nop			; (mov r8, r8)
    9220:	0000c301 	.word	0x0000c301
    9224:	0000c325 	.word	0x0000c325
    9228:	0000c3f5 	.word	0x0000c3f5

0000922c <lcd_spi_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for communicating with the LCD
 */
void lcd_spi_init(void)
{
    922c:	b5f0      	push	{r4, r5, r6, r7, lr}
    922e:	46c6      	mov	lr, r8
    9230:	b500      	push	{lr}
    9232:	b090      	sub	sp, #64	; 0x40
    if(lcd_init_complete == true)
    9234:	4b34      	ldr	r3, [pc, #208]	; (9308 <lcd_spi_init+0xdc>)
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	2b00      	cmp	r3, #0
    923a:	d003      	beq.n	9244 <lcd_spi_init+0x18>
    spi_enable(&lcd_master);
	

    
    lcd_init_complete = true;
}
    923c:	b010      	add	sp, #64	; 0x40
    923e:	bc04      	pop	{r2}
    9240:	4690      	mov	r8, r2
    9242:	bdf0      	pop	{r4, r5, r6, r7, pc}
	config->address_enabled = false;
    9244:	aa01      	add	r2, sp, #4
    9246:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    9248:	7093      	strb	r3, [r2, #2]
    lcd_init_slave_config.ss_pin = LCD_CS;
    924a:	212d      	movs	r1, #45	; 0x2d
    924c:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    924e:	4c2f      	ldr	r4, [pc, #188]	; (930c <lcd_spi_init+0xe0>)
    9250:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    9252:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    9254:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    9256:	2201      	movs	r2, #1
    9258:	4669      	mov	r1, sp
    925a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    925c:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    925e:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    9260:	202d      	movs	r0, #45	; 0x2d
    9262:	4b2b      	ldr	r3, [pc, #172]	; (9310 <lcd_spi_init+0xe4>)
    9264:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    9266:	7823      	ldrb	r3, [r4, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9268:	09d9      	lsrs	r1, r3, #7
	uint8_t group_index = (gpio_pin / 32);
    926a:	095a      	lsrs	r2, r3, #5
	if (port_index < PORT_INST_NUM) {
    926c:	2900      	cmp	r1, #0
    926e:	d149      	bne.n	9304 <lcd_spi_init+0xd8>
		return &(ports[port_index]->Group[group_index]);
    9270:	01d2      	lsls	r2, r2, #7
    9272:	4928      	ldr	r1, [pc, #160]	; (9314 <lcd_spi_init+0xe8>)
    9274:	468c      	mov	ip, r1
    9276:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9278:	271f      	movs	r7, #31
    927a:	403b      	ands	r3, r7
    927c:	2501      	movs	r5, #1
    927e:	0029      	movs	r1, r5
    9280:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    9282:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    9284:	ac02      	add	r4, sp, #8
    9286:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    9288:	2600      	movs	r6, #0
    928a:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    928c:	60a6      	str	r6, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    928e:	23c0      	movs	r3, #192	; 0xc0
    9290:	039b      	lsls	r3, r3, #14
    9292:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    9294:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
    9296:	7466      	strb	r6, [r4, #17]
	config->receiver_enable  = true;
    9298:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    929a:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    929c:	7526      	strb	r6, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    929e:	2324      	movs	r3, #36	; 0x24
    92a0:	4698      	mov	r8, r3
    92a2:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    92a4:	220c      	movs	r2, #12
    92a6:	2100      	movs	r1, #0
    92a8:	a808      	add	r0, sp, #32
    92aa:	4b1b      	ldr	r3, [pc, #108]	; (9318 <lcd_spi_init+0xec>)
    92ac:	4798      	blx	r3
    lcd_init_master_config.mux_setting = LCD_PINMUX_SETTING;
    92ae:	2380      	movs	r3, #128	; 0x80
    92b0:	025b      	lsls	r3, r3, #9
    92b2:	60e3      	str	r3, [r4, #12]
    lcd_init_master_config.pinmux_pad0 = LCD_MISO_PAD;
    92b4:	4b19      	ldr	r3, [pc, #100]	; (931c <lcd_spi_init+0xf0>)
    92b6:	62a3      	str	r3, [r4, #40]	; 0x28
    lcd_init_master_config.pinmux_pad1 = LCD_UNUSED; 
    92b8:	2301      	movs	r3, #1
    92ba:	425b      	negs	r3, r3
    92bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    lcd_init_master_config.pinmux_pad2 = LCD_MOSI_PAD;
    92be:	4b18      	ldr	r3, [pc, #96]	; (9320 <lcd_spi_init+0xf4>)
    92c0:	6323      	str	r3, [r4, #48]	; 0x30
    lcd_init_master_config.pinmux_pad3 = LCD_SCK_PAD;
    92c2:	4b18      	ldr	r3, [pc, #96]	; (9324 <lcd_spi_init+0xf8>)
    92c4:	6363      	str	r3, [r4, #52]	; 0x34
	lcd_init_master_config.generator_source = LCD_SPI_SOURCE_CLOCK;
    92c6:	4643      	mov	r3, r8
    92c8:	54e6      	strb	r6, [r4, r3]
	lcd_init_master_config.mode_specific.master.baudrate = LCD_SPI_MAX_CLOCK;
    92ca:	4b17      	ldr	r3, [pc, #92]	; (9328 <lcd_spi_init+0xfc>)
    92cc:	61a3      	str	r3, [r4, #24]
    spi_init(&lcd_master, LCD_SPI, &lcd_init_master_config);
    92ce:	4e17      	ldr	r6, [pc, #92]	; (932c <lcd_spi_init+0x100>)
    92d0:	0022      	movs	r2, r4
    92d2:	4917      	ldr	r1, [pc, #92]	; (9330 <lcd_spi_init+0x104>)
    92d4:	0030      	movs	r0, r6
    92d6:	4b17      	ldr	r3, [pc, #92]	; (9334 <lcd_spi_init+0x108>)
    92d8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    92da:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    92dc:	0020      	movs	r0, r4
    92de:	4b16      	ldr	r3, [pc, #88]	; (9338 <lcd_spi_init+0x10c>)
    92e0:	4798      	blx	r3
    92e2:	4038      	ands	r0, r7
    92e4:	4085      	lsls	r5, r0
    92e6:	4b15      	ldr	r3, [pc, #84]	; (933c <lcd_spi_init+0x110>)
    92e8:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    92ea:	4b10      	ldr	r3, [pc, #64]	; (932c <lcd_spi_init+0x100>)
    92ec:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    92ee:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    92f0:	2b00      	cmp	r3, #0
    92f2:	d1fa      	bne.n	92ea <lcd_spi_init+0xbe>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    92f4:	6823      	ldr	r3, [r4, #0]
    92f6:	2202      	movs	r2, #2
    92f8:	4313      	orrs	r3, r2
    92fa:	6023      	str	r3, [r4, #0]
    lcd_init_complete = true;
    92fc:	3a01      	subs	r2, #1
    92fe:	4b02      	ldr	r3, [pc, #8]	; (9308 <lcd_spi_init+0xdc>)
    9300:	701a      	strb	r2, [r3, #0]
    9302:	e79b      	b.n	923c <lcd_spi_init+0x10>
		return NULL;
    9304:	2200      	movs	r2, #0
    9306:	e7b7      	b.n	9278 <lcd_spi_init+0x4c>
    9308:	200013f7 	.word	0x200013f7
    930c:	20001e8c 	.word	0x20001e8c
    9310:	0000bf89 	.word	0x0000bf89
    9314:	41004400 	.word	0x41004400
    9318:	0000db1f 	.word	0x0000db1f
    931c:	002c0002 	.word	0x002c0002
    9320:	002e0002 	.word	0x002e0002
    9324:	002f0002 	.word	0x002f0002
    9328:	000f4240 	.word	0x000f4240
    932c:	20001e90 	.word	0x20001e90
    9330:	42001800 	.word	0x42001800
    9334:	00000ba9 	.word	0x00000ba9
    9338:	0000bf05 	.word	0x0000bf05
    933c:	e000e100 	.word	0xe000e100

00009340 <lcd_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Starts the SPI transfer by selecting the slave (pulling 
 *  CS low) and sending LCD address. For use in the FT library.
 */
status_code_genare_t lcd_start_xfer(LCD_ADDRESS param_addr, LCD_XFER_DIR dir)
{
    9340:	b510      	push	{r4, lr}
    9342:	b082      	sub	sp, #8
    9344:	1e0c      	subs	r4, r1, #0
        uint8_t preamble[4];
    } lcd_xfer_preamble;
    
    status_code_genare_t read_status;
    
    if(dir == READ)
    9346:	d11f      	bne.n	9388 <lcd_start_xfer+0x48>
        // LCD read address should only be 22 bits
        lcd_xfer_preamble.addr = (0x3FFFFF & param_addr) << 8;
    9348:	0200      	lsls	r0, r0, #8
    934a:	4b1a      	ldr	r3, [pc, #104]	; (93b4 <lcd_start_xfer+0x74>)
    934c:	4018      	ands	r0, r3
    934e:	9001      	str	r0, [sp, #4]
        /* LCD read address should only be 22 bits. Also OR 0x800000 because the
         * host must send a 1-bit and then a 0-bit to indicate a write */
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    
    // preamble bytes need to be swapped so MSB is transmitted first
    XORSWAP(lcd_xfer_preamble.preamble[0], lcd_xfer_preamble.preamble[3]);
    9350:	ab01      	add	r3, sp, #4
    9352:	78d9      	ldrb	r1, [r3, #3]
    9354:	781a      	ldrb	r2, [r3, #0]
    9356:	404a      	eors	r2, r1
    9358:	4051      	eors	r1, r2
    935a:	70d9      	strb	r1, [r3, #3]
    935c:	404a      	eors	r2, r1
    935e:	701a      	strb	r2, [r3, #0]
    XORSWAP(lcd_xfer_preamble.preamble[1], lcd_xfer_preamble.preamble[2]);
    9360:	7899      	ldrb	r1, [r3, #2]
    9362:	785a      	ldrb	r2, [r3, #1]
    9364:	404a      	eors	r2, r1
    9366:	4051      	eors	r1, r2
    9368:	7099      	strb	r1, [r3, #2]
    936a:	404a      	eors	r2, r1
    936c:	705a      	strb	r2, [r3, #1]
    
    do{
        // select the slave
        read_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    936e:	2201      	movs	r2, #1
    9370:	4911      	ldr	r1, [pc, #68]	; (93b8 <lcd_start_xfer+0x78>)
    9372:	4812      	ldr	r0, [pc, #72]	; (93bc <lcd_start_xfer+0x7c>)
    9374:	4b12      	ldr	r3, [pc, #72]	; (93c0 <lcd_start_xfer+0x80>)
    9376:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
    9378:	2805      	cmp	r0, #5
    937a:	d0f8      	beq.n	936e <lcd_start_xfer+0x2e>
    
    if(dir == READ)
    937c:	2c00      	cmp	r4, #0
    937e:	d00d      	beq.n	939c <lcd_start_xfer+0x5c>
        // send preamble = two read bits, 22 bit address, and dummy byte
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    else if(dir == WRT)
    9380:	2c01      	cmp	r4, #1
    9382:	d011      	beq.n	93a8 <lcd_start_xfer+0x68>
        // send preamble = two wrt bits and 22 bit address
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    
    return read_status;
}
    9384:	b002      	add	sp, #8
    9386:	bd10      	pop	{r4, pc}
    else if(dir == WRT)
    9388:	2901      	cmp	r1, #1
    938a:	d1e1      	bne.n	9350 <lcd_start_xfer+0x10>
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    938c:	0200      	lsls	r0, r0, #8
    938e:	4b09      	ldr	r3, [pc, #36]	; (93b4 <lcd_start_xfer+0x74>)
    9390:	4018      	ands	r0, r3
    9392:	2380      	movs	r3, #128	; 0x80
    9394:	061b      	lsls	r3, r3, #24
    9396:	4318      	orrs	r0, r3
    9398:	9001      	str	r0, [sp, #4]
    939a:	e7d9      	b.n	9350 <lcd_start_xfer+0x10>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    939c:	2204      	movs	r2, #4
    939e:	a901      	add	r1, sp, #4
    93a0:	4806      	ldr	r0, [pc, #24]	; (93bc <lcd_start_xfer+0x7c>)
    93a2:	4b08      	ldr	r3, [pc, #32]	; (93c4 <lcd_start_xfer+0x84>)
    93a4:	4798      	blx	r3
    93a6:	e7ed      	b.n	9384 <lcd_start_xfer+0x44>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    93a8:	2203      	movs	r2, #3
    93aa:	a901      	add	r1, sp, #4
    93ac:	4803      	ldr	r0, [pc, #12]	; (93bc <lcd_start_xfer+0x7c>)
    93ae:	4b05      	ldr	r3, [pc, #20]	; (93c4 <lcd_start_xfer+0x84>)
    93b0:	4798      	blx	r3
    93b2:	e7e7      	b.n	9384 <lcd_start_xfer+0x44>
    93b4:	3fffff00 	.word	0x3fffff00
    93b8:	20001e8c 	.word	0x20001e8c
    93bc:	20001e90 	.word	0x20001e90
    93c0:	00000d91 	.word	0x00000d91
    93c4:	00000e8d 	.word	0x00000e8d

000093c8 <lcd_stop_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Stops the SPI transfer by deselecting the slave (letting 
 *  CS float high). For use in the FT library.
 */
status_code_genare_t lcd_stop_xfer(void)
{
    93c8:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&lcd_master, &lcd_slave, false);
    93ca:	2200      	movs	r2, #0
    93cc:	4902      	ldr	r1, [pc, #8]	; (93d8 <lcd_stop_xfer+0x10>)
    93ce:	4803      	ldr	r0, [pc, #12]	; (93dc <lcd_stop_xfer+0x14>)
    93d0:	4b03      	ldr	r3, [pc, #12]	; (93e0 <lcd_stop_xfer+0x18>)
    93d2:	4798      	blx	r3
}
    93d4:	bd10      	pop	{r4, pc}
    93d6:	46c0      	nop			; (mov r8, r8)
    93d8:	20001e8c 	.word	0x20001e8c
    93dc:	20001e90 	.word	0x20001e90
    93e0:	00000d91 	.word	0x00000d91

000093e4 <lcd_host_read>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 15.
 */
status_code_genare_t lcd_host_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
    93e4:	b510      	push	{r4, lr}
    93e6:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&lcd_master, \
    93e8:	2300      	movs	r3, #0
    93ea:	0001      	movs	r1, r0
    93ec:	4801      	ldr	r0, [pc, #4]	; (93f4 <lcd_host_read+0x10>)
    93ee:	4c02      	ldr	r4, [pc, #8]	; (93f8 <lcd_host_read+0x14>)
    93f0:	47a0      	blx	r4
                        read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
    93f2:	bd10      	pop	{r4, pc}
    93f4:	20001e90 	.word	0x20001e90
    93f8:	00000c95 	.word	0x00000c95

000093fc <lcd_rd8>:
 * Return Values(s) : uint8_t
 * Description      : Reads a 8-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint8_t lcd_rd8(LCD_ADDRESS read_addr)
{
    93fc:	b510      	push	{r4, lr}
    93fe:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
    9400:	466b      	mov	r3, sp
    9402:	1ddc      	adds	r4, r3, #7
    9404:	2300      	movs	r3, #0
    9406:	7023      	strb	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    9408:	2100      	movs	r1, #0
    940a:	4b05      	ldr	r3, [pc, #20]	; (9420 <lcd_rd8+0x24>)
    940c:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    lcd_host_read(&read_byte, 1);
    940e:	2101      	movs	r1, #1
    9410:	0020      	movs	r0, r4
    9412:	4b04      	ldr	r3, [pc, #16]	; (9424 <lcd_rd8+0x28>)
    9414:	4798      	blx	r3
    
    lcd_stop_xfer();
    9416:	4b04      	ldr	r3, [pc, #16]	; (9428 <lcd_rd8+0x2c>)
    9418:	4798      	blx	r3
    
    return read_byte; 
    941a:	7820      	ldrb	r0, [r4, #0]
}
    941c:	b002      	add	sp, #8
    941e:	bd10      	pop	{r4, pc}
    9420:	00009341 	.word	0x00009341
    9424:	000093e5 	.word	0x000093e5
    9428:	000093c9 	.word	0x000093c9

0000942c <lcd_rd16>:
 * Return Values(s) : uint16_t
 * Description      : Reads a 16-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint16_t lcd_rd16(LCD_ADDRESS read_addr)
{
    942c:	b510      	push	{r4, lr}
    942e:	b082      	sub	sp, #8
    uint16_t read_word = 0;
    9430:	466b      	mov	r3, sp
    9432:	1d9c      	adds	r4, r3, #6
    9434:	2300      	movs	r3, #0
    9436:	8023      	strh	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    9438:	2100      	movs	r1, #0
    943a:	4b05      	ldr	r3, [pc, #20]	; (9450 <lcd_rd16+0x24>)
    943c:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    lcd_host_read((uint8_t*) &read_word, 2);
    943e:	2102      	movs	r1, #2
    9440:	0020      	movs	r0, r4
    9442:	4b04      	ldr	r3, [pc, #16]	; (9454 <lcd_rd16+0x28>)
    9444:	4798      	blx	r3
    
    lcd_stop_xfer();
    9446:	4b04      	ldr	r3, [pc, #16]	; (9458 <lcd_rd16+0x2c>)
    9448:	4798      	blx	r3
    
    return read_word;
    944a:	8820      	ldrh	r0, [r4, #0]
}    
    944c:	b002      	add	sp, #8
    944e:	bd10      	pop	{r4, pc}
    9450:	00009341 	.word	0x00009341
    9454:	000093e5 	.word	0x000093e5
    9458:	000093c9 	.word	0x000093c9

0000945c <lcd_host_write>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 16.
 */
status_code_genare_t lcd_host_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
    945c:	b510      	push	{r4, lr}
    945e:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&lcd_master, \
    9460:	0001      	movs	r1, r0
    9462:	4802      	ldr	r0, [pc, #8]	; (946c <lcd_host_write+0x10>)
    9464:	4b02      	ldr	r3, [pc, #8]	; (9470 <lcd_host_write+0x14>)
    9466:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
    
}
    9468:	bd10      	pop	{r4, pc}
    946a:	46c0      	nop			; (mov r8, r8)
    946c:	20001e90 	.word	0x20001e90
    9470:	00000e8d 	.word	0x00000e8d

00009474 <lcd_wr8>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 8-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr8(LCD_ADDRESS wrt_addr, uint8_t wrt_byte)
{
    9474:	b510      	push	{r4, lr}
    9476:	b082      	sub	sp, #8
    9478:	466b      	mov	r3, sp
    947a:	1ddc      	adds	r4, r3, #7
    947c:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);    
    947e:	2101      	movs	r1, #1
    9480:	4b05      	ldr	r3, [pc, #20]	; (9498 <lcd_wr8+0x24>)
    9482:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = lcd_host_write(&wrt_byte, 1);
    9484:	2101      	movs	r1, #1
    9486:	0020      	movs	r0, r4
    9488:	4b04      	ldr	r3, [pc, #16]	; (949c <lcd_wr8+0x28>)
    948a:	4798      	blx	r3
    948c:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    948e:	4b04      	ldr	r3, [pc, #16]	; (94a0 <lcd_wr8+0x2c>)
    9490:	4798      	blx	r3
    
    return status_result;
}
    9492:	0020      	movs	r0, r4
    9494:	b002      	add	sp, #8
    9496:	bd10      	pop	{r4, pc}
    9498:	00009341 	.word	0x00009341
    949c:	0000945d 	.word	0x0000945d
    94a0:	000093c9 	.word	0x000093c9

000094a4 <lcd_wr16>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 16-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr16(LCD_ADDRESS wrt_addr, uint16_t wrt_word)
{
    94a4:	b510      	push	{r4, lr}
    94a6:	b082      	sub	sp, #8
    94a8:	466b      	mov	r3, sp
    94aa:	1d9c      	adds	r4, r3, #6
    94ac:	80d9      	strh	r1, [r3, #6]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    94ae:	2101      	movs	r1, #1
    94b0:	4b05      	ldr	r3, [pc, #20]	; (94c8 <lcd_wr16+0x24>)
    94b2:	4798      	blx	r3
    
    // cast the word pointer to an 8-bit pointer and use a 2 byte length
    status_result = lcd_host_write((uint8_t*) &wrt_word, 2);
    94b4:	2102      	movs	r1, #2
    94b6:	0020      	movs	r0, r4
    94b8:	4b04      	ldr	r3, [pc, #16]	; (94cc <lcd_wr16+0x28>)
    94ba:	4798      	blx	r3
    94bc:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    94be:	4b04      	ldr	r3, [pc, #16]	; (94d0 <lcd_wr16+0x2c>)
    94c0:	4798      	blx	r3
    
    return status_result;
}
    94c2:	0020      	movs	r0, r4
    94c4:	b002      	add	sp, #8
    94c6:	bd10      	pop	{r4, pc}
    94c8:	00009341 	.word	0x00009341
    94cc:	0000945d 	.word	0x0000945d
    94d0:	000093c9 	.word	0x000093c9

000094d4 <lcd_wr32>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a 32-bit value to the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
status_code_genare_t lcd_wr32(LCD_ADDRESS wrt_addr, uint32_t wrt_dword)
{
    94d4:	b510      	push	{r4, lr}
    94d6:	b082      	sub	sp, #8
    94d8:	9101      	str	r1, [sp, #4]
    status_code_genare_t status_result;
    
    lcd_start_xfer(wrt_addr, WRT);
    94da:	2101      	movs	r1, #1
    94dc:	4b05      	ldr	r3, [pc, #20]	; (94f4 <lcd_wr32+0x20>)
    94de:	4798      	blx	r3
    
    // cast the dword pointer to an 8-bit pointer and use a 4 byte length
    status_result = lcd_host_write((uint8_t *) &wrt_dword, 4);
    94e0:	2104      	movs	r1, #4
    94e2:	a801      	add	r0, sp, #4
    94e4:	4b04      	ldr	r3, [pc, #16]	; (94f8 <lcd_wr32+0x24>)
    94e6:	4798      	blx	r3
    94e8:	0004      	movs	r4, r0
    
    lcd_stop_xfer();
    94ea:	4b04      	ldr	r3, [pc, #16]	; (94fc <lcd_wr32+0x28>)
    94ec:	4798      	blx	r3
    
    return status_result;
}
    94ee:	0020      	movs	r0, r4
    94f0:	b002      	add	sp, #8
    94f2:	bd10      	pop	{r4, pc}
    94f4:	00009341 	.word	0x00009341
    94f8:	0000945d 	.word	0x0000945d
    94fc:	000093c9 	.word	0x000093c9

00009500 <lcd_host_cmd>:
 * Description      : Sends a host command to the LCD. Host commands are
 *  for basic hardware configurations (like power mode, clock stuff, etc.).
 *  Refer to DS-FT81x datasheet pg 16 if the command has a parameter byte.
 */
status_code_genare_t lcd_host_cmd(uint8_t cmd, uint8_t param_byte)
{
    9500:	b510      	push	{r4, lr}
    9502:	b082      	sub	sp, #8
    // variable for holding ASF status code
    status_code_genare_t wrt_status;
    
    // 3 byte array for sending host command to the LCD
    uint8_t cmd_packet[3] = {cmd, param_byte, 0x00};
    9504:	ab01      	add	r3, sp, #4
    9506:	7018      	strb	r0, [r3, #0]
    9508:	7059      	strb	r1, [r3, #1]
    950a:	2200      	movs	r2, #0
    950c:	709a      	strb	r2, [r3, #2]
   
    // select the slave
    do{
        // select the slave
        wrt_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    950e:	2201      	movs	r2, #1
    9510:	490a      	ldr	r1, [pc, #40]	; (953c <lcd_host_cmd+0x3c>)
    9512:	480b      	ldr	r0, [pc, #44]	; (9540 <lcd_host_cmd+0x40>)
    9514:	4b0b      	ldr	r3, [pc, #44]	; (9544 <lcd_host_cmd+0x44>)
    9516:	4798      	blx	r3
		//port_pin_set_output_level(PIN_PA10, true);
    }while(wrt_status == STATUS_BUSY);
    9518:	2805      	cmp	r0, #5
    951a:	d0f8      	beq.n	950e <lcd_host_cmd+0xe>
    
    // send host command
    wrt_status = spi_write_buffer_wait(&lcd_master, cmd_packet, 3);
    951c:	2203      	movs	r2, #3
    951e:	a901      	add	r1, sp, #4
    9520:	4807      	ldr	r0, [pc, #28]	; (9540 <lcd_host_cmd+0x40>)
    9522:	4b09      	ldr	r3, [pc, #36]	; (9548 <lcd_host_cmd+0x48>)
    9524:	4798      	blx	r3
    9526:	1e04      	subs	r4, r0, #0

    // status check
    if(wrt_status != STATUS_OK)
    9528:	d105      	bne.n	9536 <lcd_host_cmd+0x36>
        // return an error
        return wrt_status;
    }
    else
        // deselect slave
        wrt_status = lcd_stop_xfer();
    952a:	4b08      	ldr	r3, [pc, #32]	; (954c <lcd_host_cmd+0x4c>)
    952c:	4798      	blx	r3
    952e:	0004      	movs	r4, r0
    
    return wrt_status;
}
    9530:	0020      	movs	r0, r4
    9532:	b002      	add	sp, #8
    9534:	bd10      	pop	{r4, pc}
        lcd_stop_xfer();
    9536:	4b05      	ldr	r3, [pc, #20]	; (954c <lcd_host_cmd+0x4c>)
    9538:	4798      	blx	r3
        return wrt_status;
    953a:	e7f9      	b.n	9530 <lcd_host_cmd+0x30>
    953c:	20001e8c 	.word	0x20001e8c
    9540:	20001e90 	.word	0x20001e90
    9544:	00000d91 	.word	0x00000d91
    9548:	00000e8d 	.word	0x00000e8d
    954c:	000093c9 	.word	0x000093c9

00009550 <lcd_powerdown>:
		port_base->OUTCLR.reg = pin_mask;
    9550:	2280      	movs	r2, #128	; 0x80
    9552:	0052      	lsls	r2, r2, #1
    9554:	4b01      	ldr	r3, [pc, #4]	; (955c <lcd_powerdown+0xc>)
    9556:	615a      	str	r2, [r3, #20]
 * Description      : Pull down the LCD_PD pin to force power down the LCD
 */
void lcd_powerdown(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_EN);
}
    9558:	4770      	bx	lr
    955a:	46c0      	nop			; (mov r8, r8)
    955c:	41004400 	.word	0x41004400

00009560 <lcd_powerup>:
		port_base->OUTSET.reg = pin_mask;
    9560:	2280      	movs	r2, #128	; 0x80
    9562:	0052      	lsls	r2, r2, #1
    9564:	4b01      	ldr	r3, [pc, #4]	; (956c <lcd_powerup+0xc>)
    9566:	619a      	str	r2, [r3, #24]
 * Description      : Pull up the LCD_PD pin to force power up the LCD
 */
void lcd_powerup(void)
{
    port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
}
    9568:	4770      	bx	lr
    956a:	46c0      	nop			; (mov r8, r8)
    956c:	41004400 	.word	0x41004400

00009570 <lcd_init_seq>:
 * Return Values(s) : ASF general status code
 * Description      : Initialization sequence as described by the 
 *  FT81X_Series_Programmer_Guide datasheet pg 11.
 */
void lcd_init_seq(void)
{
    9570:	b570      	push	{r4, r5, r6, lr}
    /* medium rare power cycle to get the LCD into a known state.
     * Medium rare because it resets a lot of things, but sometimes display
     * list behavior is funky even after this power cycle. It is recommended
     * that the user performs a hard power reset when testing display 
     * list stuff. */
    lcd_powerdown();
    9572:	4b31      	ldr	r3, [pc, #196]	; (9638 <lcd_init_seq+0xc8>)
    9574:	4798      	blx	r3
    delay_ms(20);
    9576:	2014      	movs	r0, #20
    9578:	4c30      	ldr	r4, [pc, #192]	; (963c <lcd_init_seq+0xcc>)
    957a:	47a0      	blx	r4
    lcd_powerup();
    957c:	4b30      	ldr	r3, [pc, #192]	; (9640 <lcd_init_seq+0xd0>)
    957e:	4798      	blx	r3
    delay_ms(20);
    9580:	2014      	movs	r0, #20
    9582:	47a0      	blx	r4
    
    // indicate that an external clock is being used
    lcd_host_cmd(CLKEXT, NO_PARAM);
    9584:	2100      	movs	r1, #0
    9586:	2044      	movs	r0, #68	; 0x44
    9588:	4d2e      	ldr	r5, [pc, #184]	; (9644 <lcd_init_seq+0xd4>)
    958a:	47a8      	blx	r5
    
    // wait a little bit, because CLKEXT triggers a software reset
    delay_ms(50);
    958c:	2032      	movs	r0, #50	; 0x32
    958e:	47a0      	blx	r4
    // wake up the LCD
    lcd_host_cmd(ACTIVE, NO_PARAM);
    9590:	2100      	movs	r1, #0
    9592:	2000      	movs	r0, #0
    9594:	47a8      	blx	r5
    
    // wait until the LCD is active
	do{
	    result = lcd_rd16(REG_ID);
    9596:	482c      	ldr	r0, [pc, #176]	; (9648 <lcd_init_seq+0xd8>)
    9598:	4b2c      	ldr	r3, [pc, #176]	; (964c <lcd_init_seq+0xdc>)
    959a:	4798      	blx	r3
    959c:	b2c0      	uxtb	r0, r0
	} while(result != 0x7c);  
    959e:	287c      	cmp	r0, #124	; 0x7c
    95a0:	d1f9      	bne.n	9596 <lcd_init_seq+0x26>
    
    // Register settings, refer to NHD-5.0-800480FT-CTXL-CTP datasheet:
    // horizontal configuration registers
    lcd_wr16(REG_HSIZE, 800);
    95a2:	21c8      	movs	r1, #200	; 0xc8
    95a4:	0089      	lsls	r1, r1, #2
    95a6:	482a      	ldr	r0, [pc, #168]	; (9650 <lcd_init_seq+0xe0>)
    95a8:	4c2a      	ldr	r4, [pc, #168]	; (9654 <lcd_init_seq+0xe4>)
    95aa:	47a0      	blx	r4
    lcd_wr16(REG_HCYCLE, 928);
    95ac:	21e8      	movs	r1, #232	; 0xe8
    95ae:	0089      	lsls	r1, r1, #2
    95b0:	4829      	ldr	r0, [pc, #164]	; (9658 <lcd_init_seq+0xe8>)
    95b2:	47a0      	blx	r4
    lcd_wr16(REG_HOFFSET, 88);
    95b4:	2158      	movs	r1, #88	; 0x58
    95b6:	4829      	ldr	r0, [pc, #164]	; (965c <lcd_init_seq+0xec>)
    95b8:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC0, 0);
    95ba:	2100      	movs	r1, #0
    95bc:	4828      	ldr	r0, [pc, #160]	; (9660 <lcd_init_seq+0xf0>)
    95be:	47a0      	blx	r4
    lcd_wr16(REG_HSYNC1, 48);
    95c0:	2130      	movs	r1, #48	; 0x30
    95c2:	4828      	ldr	r0, [pc, #160]	; (9664 <lcd_init_seq+0xf4>)
    95c4:	47a0      	blx	r4
    
    // vertical configuration registers
    lcd_wr16(REG_VSIZE, 480);
    95c6:	21f0      	movs	r1, #240	; 0xf0
    95c8:	0049      	lsls	r1, r1, #1
    95ca:	4827      	ldr	r0, [pc, #156]	; (9668 <lcd_init_seq+0xf8>)
    95cc:	47a0      	blx	r4
    lcd_wr16(REG_VCYCLE, 525);
    95ce:	4927      	ldr	r1, [pc, #156]	; (966c <lcd_init_seq+0xfc>)
    95d0:	4827      	ldr	r0, [pc, #156]	; (9670 <lcd_init_seq+0x100>)
    95d2:	47a0      	blx	r4
    lcd_wr16(REG_VOFFSET, 32);
    95d4:	2120      	movs	r1, #32
    95d6:	4827      	ldr	r0, [pc, #156]	; (9674 <lcd_init_seq+0x104>)
    95d8:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC0, 0);
    95da:	2100      	movs	r1, #0
    95dc:	4826      	ldr	r0, [pc, #152]	; (9678 <lcd_init_seq+0x108>)
    95de:	47a0      	blx	r4
    lcd_wr16(REG_VSYNC1, 3);
    95e0:	2103      	movs	r1, #3
    95e2:	4826      	ldr	r0, [pc, #152]	; (967c <lcd_init_seq+0x10c>)
    95e4:	47a0      	blx	r4

    // misc. screen configuration registers
	lcd_wr8(REG_SWIZZLE, 0);
    95e6:	2100      	movs	r1, #0
    95e8:	4825      	ldr	r0, [pc, #148]	; (9680 <lcd_init_seq+0x110>)
    95ea:	4d26      	ldr	r5, [pc, #152]	; (9684 <lcd_init_seq+0x114>)
    95ec:	47a8      	blx	r5
	lcd_wr8(REG_PCLK_POL, 0);
    95ee:	2100      	movs	r1, #0
    95f0:	4825      	ldr	r0, [pc, #148]	; (9688 <lcd_init_seq+0x118>)
    95f2:	47a8      	blx	r5
	lcd_wr8(REG_CSPREAD, 1);
    95f4:	2101      	movs	r1, #1
    95f6:	4825      	ldr	r0, [pc, #148]	; (968c <lcd_init_seq+0x11c>)
    95f8:	47a8      	blx	r5
	lcd_wr8(REG_DITHER, 1);
    95fa:	2101      	movs	r1, #1
    95fc:	4824      	ldr	r0, [pc, #144]	; (9690 <lcd_init_seq+0x120>)
    95fe:	47a8      	blx	r5

    // clear the display
    lcd_wr32(RAM_DL+0, CLEAR_COLOR_RGB(1, 1, 1));
    9600:	4924      	ldr	r1, [pc, #144]	; (9694 <lcd_init_seq+0x124>)
    9602:	20c0      	movs	r0, #192	; 0xc0
    9604:	0380      	lsls	r0, r0, #14
    9606:	4e24      	ldr	r6, [pc, #144]	; (9698 <lcd_init_seq+0x128>)
    9608:	47b0      	blx	r6
    lcd_wr32(RAM_DL+4, COLOR_RGB(255,255,255));
    960a:	4924      	ldr	r1, [pc, #144]	; (969c <lcd_init_seq+0x12c>)
    960c:	4824      	ldr	r0, [pc, #144]	; (96a0 <lcd_init_seq+0x130>)
    960e:	47b0      	blx	r6
    lcd_wr32(RAM_DL+8, CLEAR(1,1,1));
    9610:	4924      	ldr	r1, [pc, #144]	; (96a4 <lcd_init_seq+0x134>)
    9612:	4825      	ldr	r0, [pc, #148]	; (96a8 <lcd_init_seq+0x138>)
    9614:	47b0      	blx	r6
    lcd_wr32(RAM_DL+12, DISPLAY());
    9616:	2100      	movs	r1, #0
    9618:	4824      	ldr	r0, [pc, #144]	; (96ac <lcd_init_seq+0x13c>)
    961a:	47b0      	blx	r6

    // display list swap
    lcd_wr8(REG_DLSWAP,DLSWAP_FRAME);
    961c:	2102      	movs	r1, #2
    961e:	4824      	ldr	r0, [pc, #144]	; (96b0 <lcd_init_seq+0x140>)
    9620:	47a8      	blx	r5

    // set the pin drive strength
    lcd_wr16(REG_GPIOX_DIR, 0xffff);
    9622:	4e24      	ldr	r6, [pc, #144]	; (96b4 <lcd_init_seq+0x144>)
    9624:	0031      	movs	r1, r6
    9626:	4824      	ldr	r0, [pc, #144]	; (96b8 <lcd_init_seq+0x148>)
    9628:	47a0      	blx	r4
    lcd_wr16(REG_GPIOX, 0xffff);
    962a:	0031      	movs	r1, r6
    962c:	4823      	ldr	r0, [pc, #140]	; (96bc <lcd_init_seq+0x14c>)
    962e:	47a0      	blx	r4

    // enable the clock
    lcd_wr8(REG_PCLK,2);
    9630:	2102      	movs	r1, #2
    9632:	4823      	ldr	r0, [pc, #140]	; (96c0 <lcd_init_seq+0x150>)
    9634:	47a8      	blx	r5
}
    9636:	bd70      	pop	{r4, r5, r6, pc}
    9638:	00009551 	.word	0x00009551
    963c:	00000151 	.word	0x00000151
    9640:	00009561 	.word	0x00009561
    9644:	00009501 	.word	0x00009501
    9648:	00302000 	.word	0x00302000
    964c:	0000942d 	.word	0x0000942d
    9650:	00302034 	.word	0x00302034
    9654:	000094a5 	.word	0x000094a5
    9658:	0030202c 	.word	0x0030202c
    965c:	00302030 	.word	0x00302030
    9660:	00302038 	.word	0x00302038
    9664:	0030203c 	.word	0x0030203c
    9668:	00302048 	.word	0x00302048
    966c:	0000020d 	.word	0x0000020d
    9670:	00302040 	.word	0x00302040
    9674:	00302044 	.word	0x00302044
    9678:	0030204c 	.word	0x0030204c
    967c:	00302050 	.word	0x00302050
    9680:	00302064 	.word	0x00302064
    9684:	00009475 	.word	0x00009475
    9688:	0030206c 	.word	0x0030206c
    968c:	00302068 	.word	0x00302068
    9690:	00302060 	.word	0x00302060
    9694:	02010101 	.word	0x02010101
    9698:	000094d5 	.word	0x000094d5
    969c:	04ffffff 	.word	0x04ffffff
    96a0:	00300004 	.word	0x00300004
    96a4:	26000007 	.word	0x26000007
    96a8:	00300008 	.word	0x00300008
    96ac:	0030000c 	.word	0x0030000c
    96b0:	00302054 	.word	0x00302054
    96b4:	0000ffff 	.word	0x0000ffff
    96b8:	00302098 	.word	0x00302098
    96bc:	0030209c 	.word	0x0030209c
    96c0:	00302070 	.word	0x00302070

000096c4 <lcd_set_ft_host_ptr>:
 * Description      : Sets the sim_system_glcd_software global pointer for the
 *  FTDI context struct.
 */
void lcd_set_ft_host_ptr(Ft_Gpu_Hal_Context_t* phost)
{
    lcd_firmware_phost = phost;
    96c4:	4b01      	ldr	r3, [pc, #4]	; (96cc <lcd_set_ft_host_ptr+0x8>)
    96c6:	6018      	str	r0, [r3, #0]
}
    96c8:	4770      	bx	lr
    96ca:	46c0      	nop			; (mov r8, r8)
    96cc:	200013f8 	.word	0x200013f8

000096d0 <lcd_interrupt_callback>:
 * Return Values(s) : void
 * Description      : Callback for the LCD interrupt. Reads the LCD's flag
 *  register.
 */
void lcd_interrupt_callback(void)
{
    96d0:	b510      	push	{r4, lr}
    lcd_int_flags = lcd_rd8(REG_INT_FLAGS);
    96d2:	4803      	ldr	r0, [pc, #12]	; (96e0 <lcd_interrupt_callback+0x10>)
    96d4:	4b03      	ldr	r3, [pc, #12]	; (96e4 <lcd_interrupt_callback+0x14>)
    96d6:	4798      	blx	r3
    96d8:	4b03      	ldr	r3, [pc, #12]	; (96e8 <lcd_interrupt_callback+0x18>)
    96da:	7018      	strb	r0, [r3, #0]
}
    96dc:	bd10      	pop	{r4, pc}
    96de:	46c0      	nop			; (mov r8, r8)
    96e0:	003020a8 	.word	0x003020a8
    96e4:	000093fd 	.word	0x000093fd
    96e8:	20000251 	.word	0x20000251

000096ec <led_tx_on>:
		port_base->OUTCLR.reg = pin_mask;
    96ec:	2280      	movs	r2, #128	; 0x80
    96ee:	0512      	lsls	r2, r2, #20
    96f0:	4b01      	ldr	r3, [pc, #4]	; (96f8 <led_tx_on+0xc>)
    96f2:	615a      	str	r2, [r3, #20]
 * @brief Turn on Transmit LED
 */
void led_tx_on(void)
{
    port_pin_set_output_level(PIN_PA27, false);
}
    96f4:	4770      	bx	lr
    96f6:	46c0      	nop			; (mov r8, r8)
    96f8:	41004400 	.word	0x41004400

000096fc <led_tx_off>:
		port_base->OUTSET.reg = pin_mask;
    96fc:	2280      	movs	r2, #128	; 0x80
    96fe:	0512      	lsls	r2, r2, #20
    9700:	4b01      	ldr	r3, [pc, #4]	; (9708 <led_tx_off+0xc>)
    9702:	619a      	str	r2, [r3, #24]
 * @brief Turn off Transmit LED
 */
void led_tx_off(void)
{
    port_pin_set_output_level(PIN_PA27, true);
}
    9704:	4770      	bx	lr
    9706:	46c0      	nop			; (mov r8, r8)
    9708:	41004400 	.word	0x41004400

0000970c <lighting_command_decode>:
 *
 * @return  number of bytes encoded
 */
int lighting_command_decode(
    uint8_t *apdu, unsigned apdu_max_len, BACNET_LIGHTING_COMMAND *data)
{
    970c:	b5f0      	push	{r4, r5, r6, r7, lr}
    970e:	46c6      	mov	lr, r8
    9710:	b500      	push	{lr}
    9712:	b088      	sub	sp, #32
    9714:	0006      	movs	r6, r0
    9716:	0014      	movs	r4, r2
    int len = 0;
    int apdu_len = 0;
    uint8_t tag_number = 0;
    9718:	2300      	movs	r3, #0
    971a:	221f      	movs	r2, #31
    971c:	446a      	add	r2, sp
    971e:	7013      	strb	r3, [r2, #0]
    uint32_t len_value_type = 0;
    9720:	9306      	str	r3, [sp, #24]
    uint32_t enum_value = 0;
    9722:	9305      	str	r3, [sp, #20]
    BACNET_UNSIGNED_INTEGER unsigned_value = 0;
    9724:	2200      	movs	r2, #0
    9726:	2300      	movs	r3, #0
    9728:	9202      	str	r2, [sp, #8]
    972a:	9303      	str	r3, [sp, #12]
    float real_value = 0.0;
    972c:	2300      	movs	r3, #0
    972e:	9301      	str	r3, [sp, #4]

    (void)apdu_max_len;
    /* check for value pointers */
    if (apdu_max_len && data) {
    9730:	2900      	cmp	r1, #0
    9732:	d100      	bne.n	9736 <lighting_command_decode+0x2a>
    9734:	e0c5      	b.n	98c2 <lighting_command_decode+0x1b6>
    9736:	2c00      	cmp	r4, #0
    9738:	d100      	bne.n	973c <lighting_command_decode+0x30>
    973a:	e0c8      	b.n	98ce <lighting_command_decode+0x1c2>
        /* Tag 0: operation */
        if (!decode_is_context_tag(&apdu[apdu_len], 0)) {
    973c:	2100      	movs	r1, #0
    973e:	4b66      	ldr	r3, [pc, #408]	; (98d8 <lighting_command_decode+0x1cc>)
    9740:	4798      	blx	r3
    9742:	2800      	cmp	r0, #0
    9744:	d100      	bne.n	9748 <lighting_command_decode+0x3c>
    9746:	e0c4      	b.n	98d2 <lighting_command_decode+0x1c6>
            return BACNET_STATUS_ERROR;
        }
        len = decode_tag_number_and_value(
    9748:	aa06      	add	r2, sp, #24
    974a:	211f      	movs	r1, #31
    974c:	4469      	add	r1, sp
    974e:	0030      	movs	r0, r6
    9750:	4b62      	ldr	r3, [pc, #392]	; (98dc <lighting_command_decode+0x1d0>)
    9752:	4798      	blx	r3
    9754:	0005      	movs	r5, r0
            &apdu[apdu_len], &tag_number, &len_value_type);
        apdu_len += len;
        len = decode_enumerated(&apdu[apdu_len], len_value_type, &enum_value);
    9756:	1830      	adds	r0, r6, r0
    9758:	aa05      	add	r2, sp, #20
    975a:	9906      	ldr	r1, [sp, #24]
    975c:	4b60      	ldr	r3, [pc, #384]	; (98e0 <lighting_command_decode+0x1d4>)
    975e:	4798      	blx	r3
    9760:	1e07      	subs	r7, r0, #0
        if (len > 0) {
    9762:	dd07      	ble.n	9774 <lighting_command_decode+0x68>
            if (unsigned_value <= BACNET_LIGHTS_PROPRIETARY_LAST) {
    9764:	9a02      	ldr	r2, [sp, #8]
    9766:	9b03      	ldr	r3, [sp, #12]
    9768:	2b00      	cmp	r3, #0
    976a:	d144      	bne.n	97f6 <lighting_command_decode+0xea>
    976c:	d040      	beq.n	97f0 <lighting_command_decode+0xe4>
                data->operation = (BACNET_LIGHTING_OPERATION)enum_value;
    976e:	466b      	mov	r3, sp
    9770:	8a9b      	ldrh	r3, [r3, #20]
    9772:	8023      	strh	r3, [r4, #0]
            } else {
                return BACNET_STATUS_ERROR;
            }
        }
        apdu_len += len;
    9774:	19ed      	adds	r5, r5, r7
        /* Tag 1: target-level - OPTIONAL */
        if (decode_is_context_tag(&apdu[apdu_len], 1)) {
    9776:	1973      	adds	r3, r6, r5
    9778:	4698      	mov	r8, r3
    977a:	2101      	movs	r1, #1
    977c:	0018      	movs	r0, r3
    977e:	4b56      	ldr	r3, [pc, #344]	; (98d8 <lighting_command_decode+0x1cc>)
    9780:	4798      	blx	r3
    9782:	2800      	cmp	r0, #0
    9784:	d13a      	bne.n	97fc <lighting_command_decode+0xf0>
            len = decode_real(&apdu[apdu_len], &real_value);
            data->target_level = real_value;
            apdu_len += len;
            data->use_target_level = true;
        } else {
            data->use_target_level = false;
    9786:	78a3      	ldrb	r3, [r4, #2]
    9788:	2201      	movs	r2, #1
    978a:	4393      	bics	r3, r2
    978c:	70a3      	strb	r3, [r4, #2]
        }
        /* Tag 2: ramp-rate - OPTIONAL */
        if (decode_is_context_tag(&apdu[apdu_len], 2)) {
    978e:	1973      	adds	r3, r6, r5
    9790:	4698      	mov	r8, r3
    9792:	2102      	movs	r1, #2
    9794:	0018      	movs	r0, r3
    9796:	4b50      	ldr	r3, [pc, #320]	; (98d8 <lighting_command_decode+0x1cc>)
    9798:	4798      	blx	r3
    979a:	2800      	cmp	r0, #0
    979c:	d142      	bne.n	9824 <lighting_command_decode+0x118>
            apdu_len += len;
            len = decode_real(&apdu[apdu_len], &real_value);
            data->ramp_rate = real_value;
            data->use_ramp_rate = true;
        } else {
            data->use_ramp_rate = false;
    979e:	78a3      	ldrb	r3, [r4, #2]
    97a0:	2202      	movs	r2, #2
    97a2:	4393      	bics	r3, r2
    97a4:	70a3      	strb	r3, [r4, #2]
        }
        /* Tag 3: step-increment - OPTIONAL */
        if (decode_is_context_tag(&apdu[apdu_len], 3)) {
    97a6:	1973      	adds	r3, r6, r5
    97a8:	4698      	mov	r8, r3
    97aa:	2103      	movs	r1, #3
    97ac:	0018      	movs	r0, r3
    97ae:	4b4a      	ldr	r3, [pc, #296]	; (98d8 <lighting_command_decode+0x1cc>)
    97b0:	4798      	blx	r3
    97b2:	2800      	cmp	r0, #0
    97b4:	d149      	bne.n	984a <lighting_command_decode+0x13e>
            apdu_len += len;
            len = decode_real(&apdu[apdu_len], &real_value);
            data->step_increment = real_value;
            data->use_step_increment = true;
        } else {
            data->use_step_increment = false;
    97b6:	78a3      	ldrb	r3, [r4, #2]
    97b8:	2204      	movs	r2, #4
    97ba:	4393      	bics	r3, r2
    97bc:	70a3      	strb	r3, [r4, #2]
        }
        /* Tag 4: fade-time - OPTIONAL */
        if (decode_is_context_tag(&apdu[apdu_len], 4)) {
    97be:	1973      	adds	r3, r6, r5
    97c0:	4698      	mov	r8, r3
    97c2:	2104      	movs	r1, #4
    97c4:	0018      	movs	r0, r3
    97c6:	4b44      	ldr	r3, [pc, #272]	; (98d8 <lighting_command_decode+0x1cc>)
    97c8:	4798      	blx	r3
    97ca:	2800      	cmp	r0, #0
    97cc:	d150      	bne.n	9870 <lighting_command_decode+0x164>
            len = decode_unsigned(
                &apdu[apdu_len], len_value_type, &unsigned_value);
            data->fade_time = (uint32_t)unsigned_value;
            data->use_fade_time = true;
        } else {
            data->use_fade_time = false;
    97ce:	78a3      	ldrb	r3, [r4, #2]
    97d0:	2208      	movs	r2, #8
    97d2:	4393      	bics	r3, r2
    97d4:	70a3      	strb	r3, [r4, #2]
        }
        /* Tag 5: priority - OPTIONAL */
        if (decode_is_context_tag(&apdu[apdu_len], 4)) {
    97d6:	1973      	adds	r3, r6, r5
    97d8:	4698      	mov	r8, r3
    97da:	2104      	movs	r1, #4
    97dc:	0018      	movs	r0, r3
    97de:	4b3e      	ldr	r3, [pc, #248]	; (98d8 <lighting_command_decode+0x1cc>)
    97e0:	4798      	blx	r3
    97e2:	2800      	cmp	r0, #0
    97e4:	d158      	bne.n	9898 <lighting_command_decode+0x18c>
            len = decode_unsigned(
                &apdu[apdu_len], len_value_type, &unsigned_value);
            data->priority = (uint8_t)unsigned_value;
            data->use_priority = true;
        } else {
            data->use_priority = false;
    97e6:	78a3      	ldrb	r3, [r4, #2]
    97e8:	2210      	movs	r2, #16
    97ea:	4393      	bics	r3, r2
    97ec:	70a3      	strb	r3, [r4, #2]
    97ee:	e069      	b.n	98c4 <lighting_command_decode+0x1b8>
            if (unsigned_value <= BACNET_LIGHTS_PROPRIETARY_LAST) {
    97f0:	4b3c      	ldr	r3, [pc, #240]	; (98e4 <lighting_command_decode+0x1d8>)
    97f2:	429a      	cmp	r2, r3
    97f4:	d9bb      	bls.n	976e <lighting_command_decode+0x62>
                return BACNET_STATUS_ERROR;
    97f6:	2701      	movs	r7, #1
    97f8:	427f      	negs	r7, r7
    97fa:	e063      	b.n	98c4 <lighting_command_decode+0x1b8>
            len = decode_tag_number_and_value(
    97fc:	aa06      	add	r2, sp, #24
    97fe:	211f      	movs	r1, #31
    9800:	4469      	add	r1, sp
    9802:	4640      	mov	r0, r8
    9804:	4b35      	ldr	r3, [pc, #212]	; (98dc <lighting_command_decode+0x1d0>)
    9806:	4798      	blx	r3
            apdu_len += len;
    9808:	182d      	adds	r5, r5, r0
            len = decode_real(&apdu[apdu_len], &real_value);
    980a:	1970      	adds	r0, r6, r5
    980c:	a901      	add	r1, sp, #4
    980e:	4b36      	ldr	r3, [pc, #216]	; (98e8 <lighting_command_decode+0x1dc>)
    9810:	4798      	blx	r3
    9812:	0007      	movs	r7, r0
            data->target_level = real_value;
    9814:	9b01      	ldr	r3, [sp, #4]
    9816:	6063      	str	r3, [r4, #4]
            apdu_len += len;
    9818:	182d      	adds	r5, r5, r0
            data->use_target_level = true;
    981a:	78a3      	ldrb	r3, [r4, #2]
    981c:	2201      	movs	r2, #1
    981e:	4313      	orrs	r3, r2
    9820:	70a3      	strb	r3, [r4, #2]
    9822:	e7b4      	b.n	978e <lighting_command_decode+0x82>
            len = decode_tag_number_and_value(
    9824:	aa06      	add	r2, sp, #24
    9826:	211f      	movs	r1, #31
    9828:	4469      	add	r1, sp
    982a:	4640      	mov	r0, r8
    982c:	4b2b      	ldr	r3, [pc, #172]	; (98dc <lighting_command_decode+0x1d0>)
    982e:	4798      	blx	r3
            apdu_len += len;
    9830:	182d      	adds	r5, r5, r0
            len = decode_real(&apdu[apdu_len], &real_value);
    9832:	1970      	adds	r0, r6, r5
    9834:	a901      	add	r1, sp, #4
    9836:	4b2c      	ldr	r3, [pc, #176]	; (98e8 <lighting_command_decode+0x1dc>)
    9838:	4798      	blx	r3
    983a:	0007      	movs	r7, r0
            data->ramp_rate = real_value;
    983c:	9b01      	ldr	r3, [sp, #4]
    983e:	60a3      	str	r3, [r4, #8]
            data->use_ramp_rate = true;
    9840:	78a3      	ldrb	r3, [r4, #2]
    9842:	2202      	movs	r2, #2
    9844:	4313      	orrs	r3, r2
    9846:	70a3      	strb	r3, [r4, #2]
    9848:	e7ad      	b.n	97a6 <lighting_command_decode+0x9a>
            len = decode_tag_number_and_value(
    984a:	aa06      	add	r2, sp, #24
    984c:	211f      	movs	r1, #31
    984e:	4469      	add	r1, sp
    9850:	4640      	mov	r0, r8
    9852:	4b22      	ldr	r3, [pc, #136]	; (98dc <lighting_command_decode+0x1d0>)
    9854:	4798      	blx	r3
            apdu_len += len;
    9856:	182d      	adds	r5, r5, r0
            len = decode_real(&apdu[apdu_len], &real_value);
    9858:	1970      	adds	r0, r6, r5
    985a:	a901      	add	r1, sp, #4
    985c:	4b22      	ldr	r3, [pc, #136]	; (98e8 <lighting_command_decode+0x1dc>)
    985e:	4798      	blx	r3
    9860:	0007      	movs	r7, r0
            data->step_increment = real_value;
    9862:	9b01      	ldr	r3, [sp, #4]
    9864:	60e3      	str	r3, [r4, #12]
            data->use_step_increment = true;
    9866:	78a3      	ldrb	r3, [r4, #2]
    9868:	2204      	movs	r2, #4
    986a:	4313      	orrs	r3, r2
    986c:	70a3      	strb	r3, [r4, #2]
    986e:	e7a6      	b.n	97be <lighting_command_decode+0xb2>
            len = decode_tag_number_and_value(
    9870:	aa06      	add	r2, sp, #24
    9872:	211f      	movs	r1, #31
    9874:	4469      	add	r1, sp
    9876:	4640      	mov	r0, r8
    9878:	4b18      	ldr	r3, [pc, #96]	; (98dc <lighting_command_decode+0x1d0>)
    987a:	4798      	blx	r3
            apdu_len += len;
    987c:	182d      	adds	r5, r5, r0
            len = decode_unsigned(
    987e:	1970      	adds	r0, r6, r5
    9880:	aa02      	add	r2, sp, #8
    9882:	9906      	ldr	r1, [sp, #24]
    9884:	4b19      	ldr	r3, [pc, #100]	; (98ec <lighting_command_decode+0x1e0>)
    9886:	4798      	blx	r3
    9888:	0007      	movs	r7, r0
            data->fade_time = (uint32_t)unsigned_value;
    988a:	9b02      	ldr	r3, [sp, #8]
    988c:	6123      	str	r3, [r4, #16]
            data->use_fade_time = true;
    988e:	78a3      	ldrb	r3, [r4, #2]
    9890:	2208      	movs	r2, #8
    9892:	4313      	orrs	r3, r2
    9894:	70a3      	strb	r3, [r4, #2]
    9896:	e79e      	b.n	97d6 <lighting_command_decode+0xca>
            len = decode_tag_number_and_value(
    9898:	aa06      	add	r2, sp, #24
    989a:	211f      	movs	r1, #31
    989c:	4469      	add	r1, sp
    989e:	4640      	mov	r0, r8
    98a0:	4b0e      	ldr	r3, [pc, #56]	; (98dc <lighting_command_decode+0x1d0>)
    98a2:	4798      	blx	r3
            apdu_len += len;
    98a4:	1828      	adds	r0, r5, r0
            len = decode_unsigned(
    98a6:	1830      	adds	r0, r6, r0
    98a8:	aa02      	add	r2, sp, #8
    98aa:	9906      	ldr	r1, [sp, #24]
    98ac:	4b0f      	ldr	r3, [pc, #60]	; (98ec <lighting_command_decode+0x1e0>)
    98ae:	4798      	blx	r3
    98b0:	0007      	movs	r7, r0
            data->priority = (uint8_t)unsigned_value;
    98b2:	466b      	mov	r3, sp
    98b4:	7a1b      	ldrb	r3, [r3, #8]
    98b6:	7523      	strb	r3, [r4, #20]
            data->use_priority = true;
    98b8:	78a3      	ldrb	r3, [r4, #2]
    98ba:	2210      	movs	r2, #16
    98bc:	4313      	orrs	r3, r2
    98be:	70a3      	strb	r3, [r4, #2]
    98c0:	e000      	b.n	98c4 <lighting_command_decode+0x1b8>
    int len = 0;
    98c2:	2700      	movs	r7, #0
        }
    }

    return len;
}
    98c4:	0038      	movs	r0, r7
    98c6:	b008      	add	sp, #32
    98c8:	bc04      	pop	{r2}
    98ca:	4690      	mov	r8, r2
    98cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int len = 0;
    98ce:	2700      	movs	r7, #0
    98d0:	e7f8      	b.n	98c4 <lighting_command_decode+0x1b8>
            return BACNET_STATUS_ERROR;
    98d2:	2701      	movs	r7, #1
    98d4:	427f      	negs	r7, r7
    98d6:	e7f5      	b.n	98c4 <lighting_command_decode+0x1b8>
    98d8:	00002efd 	.word	0x00002efd
    98dc:	00002dc1 	.word	0x00002dc1
    98e0:	0000363d 	.word	0x0000363d
    98e4:	0000ffff 	.word	0x0000ffff
    98e8:	00003da1 	.word	0x00003da1
    98ec:	000034ed 	.word	0x000034ed

000098f0 <memcopylen>:
 *
 * @return True if there is enough space to copy len bytes.
 */
bool memcopylen(size_t offset, size_t max, size_t len)
{
    return ((offset + len) <= max);
    98f0:	1880      	adds	r0, r0, r2
    98f2:	2300      	movs	r3, #0
    98f4:	4281      	cmp	r1, r0
    98f6:	415b      	adcs	r3, r3
    98f8:	b2d8      	uxtb	r0, r3
}
    98fa:	4770      	bx	lr

000098fc <memcopy>:
size_t memcopy(void *dest,
    void *src,
    size_t offset, /* where in dest to put the data */
    size_t len, /* amount of data to copy */
    size_t max)
{ /* total size of destination */
    98fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98fe:	0006      	movs	r6, r0
    9900:	000f      	movs	r7, r1
    9902:	0015      	movs	r5, r2
    9904:	001c      	movs	r4, r3
    if (memcopylen(offset, max, len)) {
    9906:	001a      	movs	r2, r3
    9908:	9906      	ldr	r1, [sp, #24]
    990a:	0028      	movs	r0, r5
    990c:	4b06      	ldr	r3, [pc, #24]	; (9928 <memcopy+0x2c>)
    990e:	4798      	blx	r3
    9910:	2800      	cmp	r0, #0
    9912:	d101      	bne.n	9918 <memcopy+0x1c>
        memcpy(&((char *)dest)[offset], src, len);
        return (len);
    }

    return 0;
    9914:	2000      	movs	r0, #0
}
    9916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(&((char *)dest)[offset], src, len);
    9918:	1970      	adds	r0, r6, r5
    991a:	0022      	movs	r2, r4
    991c:	0039      	movs	r1, r7
    991e:	4b03      	ldr	r3, [pc, #12]	; (992c <memcopy+0x30>)
    9920:	4798      	blx	r3
        return (len);
    9922:	0020      	movs	r0, r4
    9924:	e7f7      	b.n	9916 <memcopy+0x1a>
    9926:	46c0      	nop			; (mov r8, r8)
    9928:	000098f1 	.word	0x000098f1
    992c:	0000db0d 	.word	0x0000db0d

00009930 <SysTick_Handler>:
 * Handles the interrupt from the timer
 */
void SysTick_Handler(void)
{
    /* increment the tick count */
    Millisecond_Counter++;
    9930:	4a02      	ldr	r2, [pc, #8]	; (993c <SysTick_Handler+0xc>)
    9932:	6813      	ldr	r3, [r2, #0]
    9934:	3301      	adds	r3, #1
    9936:	6013      	str	r3, [r2, #0]
}
    9938:	4770      	bx	lr
    993a:	46c0      	nop			; (mov r8, r8)
    993c:	200013fc 	.word	0x200013fc

00009940 <mstimer_now>:
 * The system time is the time elapsed since OS was started.
 * @return milliseconds since OS was started
 */
unsigned long mstimer_now(void)
{
    return Millisecond_Counter;
    9940:	4b01      	ldr	r3, [pc, #4]	; (9948 <mstimer_now+0x8>)
    9942:	6818      	ldr	r0, [r3, #0]
}
    9944:	4770      	bx	lr
    9946:	46c0      	nop			; (mov r8, r8)
    9948:	200013fc 	.word	0x200013fc

0000994c <mstimer_init>:

/**
 * @brief Initialization for timer
 */
void mstimer_init(void)
{
    994c:	b510      	push	{r4, lr}
    /* Setup SysTick Timer for 1ms interrupts  */
    if (SysTick_Config(SystemCoreClock / 1000)) {
    994e:	4b0f      	ldr	r3, [pc, #60]	; (998c <mstimer_init+0x40>)
    9950:	6818      	ldr	r0, [r3, #0]
    9952:	21fa      	movs	r1, #250	; 0xfa
    9954:	0089      	lsls	r1, r1, #2
    9956:	4b0e      	ldr	r3, [pc, #56]	; (9990 <mstimer_init+0x44>)
    9958:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    995a:	3801      	subs	r0, #1
    995c:	4b0d      	ldr	r3, [pc, #52]	; (9994 <mstimer_init+0x48>)
    995e:	4298      	cmp	r0, r3
    9960:	d811      	bhi.n	9986 <mstimer_init+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9962:	4a0d      	ldr	r2, [pc, #52]	; (9998 <mstimer_init+0x4c>)
    9964:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    9966:	480d      	ldr	r0, [pc, #52]	; (999c <mstimer_init+0x50>)
    9968:	6a03      	ldr	r3, [r0, #32]
    996a:	021b      	lsls	r3, r3, #8
    996c:	0a1b      	lsrs	r3, r3, #8
    996e:	21c0      	movs	r1, #192	; 0xc0
    9970:	0609      	lsls	r1, r1, #24
    9972:	430b      	orrs	r3, r1
    9974:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9976:	2300      	movs	r3, #0
    9978:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    997a:	3307      	adds	r3, #7
    997c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    997e:	2300      	movs	r3, #0
    9980:	2b00      	cmp	r3, #0
    9982:	d002      	beq.n	998a <mstimer_init+0x3e>
    9984:	e7fe      	b.n	9984 <mstimer_init+0x38>
    return (1UL);                                                   /* Reload value impossible */
    9986:	2301      	movs	r3, #1
    9988:	e7fa      	b.n	9980 <mstimer_init+0x34>
        /* Capture error */
        while (1)
            ;
    }
    NVIC_EnableIRQ(SysTick_IRQn);
}
    998a:	bd10      	pop	{r4, pc}
    998c:	200002c0 	.word	0x200002c0
    9990:	0000cbb1 	.word	0x0000cbb1
    9994:	00ffffff 	.word	0x00ffffff
    9998:	e000e010 	.word	0xe000e010
    999c:	e000ed00 	.word	0xe000ed00

000099a0 <Multistate_Value_Property_Lists>:
 * BACnet proprietary properties for this object.
 */
void Multistate_Value_Property_Lists(
    const int **pRequired, const int **pOptional, const int **pProprietary)
{
    if (pRequired)
    99a0:	2800      	cmp	r0, #0
    99a2:	d001      	beq.n	99a8 <Multistate_Value_Property_Lists+0x8>
        *pRequired = Properties_Required;
    99a4:	4b05      	ldr	r3, [pc, #20]	; (99bc <Multistate_Value_Property_Lists+0x1c>)
    99a6:	6003      	str	r3, [r0, #0]
    if (pOptional)
    99a8:	2900      	cmp	r1, #0
    99aa:	d001      	beq.n	99b0 <Multistate_Value_Property_Lists+0x10>
        *pOptional = Properties_Optional;
    99ac:	4b04      	ldr	r3, [pc, #16]	; (99c0 <Multistate_Value_Property_Lists+0x20>)
    99ae:	600b      	str	r3, [r1, #0]
    if (pProprietary)
    99b0:	2a00      	cmp	r2, #0
    99b2:	d001      	beq.n	99b8 <Multistate_Value_Property_Lists+0x18>
        *pProprietary = Properties_Proprietary;
    99b4:	4b03      	ldr	r3, [pc, #12]	; (99c4 <Multistate_Value_Property_Lists+0x24>)
    99b6:	6013      	str	r3, [r2, #0]

    return;
}
    99b8:	4770      	bx	lr
    99ba:	46c0      	nop			; (mov r8, r8)
    99bc:	0000f830 	.word	0x0000f830
    99c0:	0000f824 	.word	0x0000f824
    99c4:	0000f82c 	.word	0x0000f82c

000099c8 <Multistate_Value_Count>:
 *
 * @return  Number of Multistate Input objects
 */
unsigned Multistate_Value_Count(void)
{
    return Multistate_Value_Objects_Max;
    99c8:	4b01      	ldr	r3, [pc, #4]	; (99d0 <Multistate_Value_Count+0x8>)
    99ca:	6818      	ldr	r0, [r3, #0]
}
    99cc:	4770      	bx	lr
    99ce:	46c0      	nop			; (mov r8, r8)
    99d0:	20001400 	.word	0x20001400

000099d4 <Multistate_Value_Index_To_Instance>:
 */
uint32_t Multistate_Value_Index_To_Instance(unsigned index)
{
    uint32_t object_instance = UINT32_MAX;

    if (index < Multistate_Value_Objects_Max) {
    99d4:	4b06      	ldr	r3, [pc, #24]	; (99f0 <Multistate_Value_Index_To_Instance+0x1c>)
    99d6:	681b      	ldr	r3, [r3, #0]
    99d8:	4283      	cmp	r3, r0
    99da:	d802      	bhi.n	99e2 <Multistate_Value_Index_To_Instance+0xe>
    uint32_t object_instance = UINT32_MAX;
    99dc:	2001      	movs	r0, #1
    99de:	4240      	negs	r0, r0
        object_instance = Object_List[index].object_id;
    }

    return object_instance;
}
    99e0:	4770      	bx	lr
        object_instance = Object_List[index].object_id;
    99e2:	0043      	lsls	r3, r0, #1
    99e4:	1818      	adds	r0, r3, r0
    99e6:	00c3      	lsls	r3, r0, #3
    99e8:	4a02      	ldr	r2, [pc, #8]	; (99f4 <Multistate_Value_Index_To_Instance+0x20>)
    99ea:	5898      	ldr	r0, [r3, r2]
    99ec:	e7f8      	b.n	99e0 <Multistate_Value_Index_To_Instance+0xc>
    99ee:	46c0      	nop			; (mov r8, r8)
    99f0:	20001400 	.word	0x20001400
    99f4:	2000026c 	.word	0x2000026c

000099f8 <Multistate_Value_Init>:
/**
 * Initializes the object list
 */
void Multistate_Value_Init(void)
{
    unsigned index = 0;
    99f8:	2200      	movs	r2, #0

    while (Object_List[index].object_name) {
    99fa:	e000      	b.n	99fe <Multistate_Value_Init+0x6>
        index++;
    99fc:	3201      	adds	r2, #1
    while (Object_List[index].object_name) {
    99fe:	0053      	lsls	r3, r2, #1
    9a00:	189b      	adds	r3, r3, r2
    9a02:	00d9      	lsls	r1, r3, #3
    9a04:	4b03      	ldr	r3, [pc, #12]	; (9a14 <Multistate_Value_Init+0x1c>)
    9a06:	185b      	adds	r3, r3, r1
    9a08:	685b      	ldr	r3, [r3, #4]
    9a0a:	2b00      	cmp	r3, #0
    9a0c:	d1f6      	bne.n	99fc <Multistate_Value_Init+0x4>
    }
    Multistate_Value_Objects_Max = index;
    9a0e:	4b02      	ldr	r3, [pc, #8]	; (9a18 <Multistate_Value_Init+0x20>)
    9a10:	601a      	str	r2, [r3, #0]
}
    9a12:	4770      	bx	lr
    9a14:	2000026c 	.word	0x2000026c
    9a18:	20001400 	.word	0x20001400

00009a1c <Object_List_Element>:
{
    9a1c:	b510      	push	{r4, lr}
    9a1e:	0004      	movs	r4, r0
    while (Multistate_Value_Objects_Max == 0) {
    9a20:	e001      	b.n	9a26 <Object_List_Element+0xa>
        Multistate_Value_Init();
    9a22:	4b0c      	ldr	r3, [pc, #48]	; (9a54 <Object_List_Element+0x38>)
    9a24:	4798      	blx	r3
    while (Multistate_Value_Objects_Max == 0) {
    9a26:	4b0c      	ldr	r3, [pc, #48]	; (9a58 <Object_List_Element+0x3c>)
    9a28:	6819      	ldr	r1, [r3, #0]
    9a2a:	2900      	cmp	r1, #0
    9a2c:	d0f9      	beq.n	9a22 <Object_List_Element+0x6>
    9a2e:	2300      	movs	r3, #0
    for (index = 0; index < Multistate_Value_Objects_Max; index++) {
    9a30:	428b      	cmp	r3, r1
    9a32:	d20c      	bcs.n	9a4e <Object_List_Element+0x32>
        if (Object_List[index].object_id == object_instance) {
    9a34:	005a      	lsls	r2, r3, #1
    9a36:	18d2      	adds	r2, r2, r3
    9a38:	00d0      	lsls	r0, r2, #3
    9a3a:	4a08      	ldr	r2, [pc, #32]	; (9a5c <Object_List_Element+0x40>)
    9a3c:	5882      	ldr	r2, [r0, r2]
    9a3e:	42a2      	cmp	r2, r4
    9a40:	d001      	beq.n	9a46 <Object_List_Element+0x2a>
    for (index = 0; index < Multistate_Value_Objects_Max; index++) {
    9a42:	3301      	adds	r3, #1
    9a44:	e7f4      	b.n	9a30 <Object_List_Element+0x14>
            return &Object_List[index];
    9a46:	0002      	movs	r2, r0
    9a48:	4804      	ldr	r0, [pc, #16]	; (9a5c <Object_List_Element+0x40>)
    9a4a:	1880      	adds	r0, r0, r2
    9a4c:	e000      	b.n	9a50 <Object_List_Element+0x34>
    return NULL;
    9a4e:	2000      	movs	r0, #0
}
    9a50:	bd10      	pop	{r4, pc}
    9a52:	46c0      	nop			; (mov r8, r8)
    9a54:	000099f9 	.word	0x000099f9
    9a58:	20001400 	.word	0x20001400
    9a5c:	2000026c 	.word	0x2000026c

00009a60 <Multistate_Value_Valid_Instance>:
{
    9a60:	b510      	push	{r4, lr}
    if (Object_List_Element(object_instance)) {
    9a62:	4b04      	ldr	r3, [pc, #16]	; (9a74 <Multistate_Value_Valid_Instance+0x14>)
    9a64:	4798      	blx	r3
    9a66:	2800      	cmp	r0, #0
    9a68:	d001      	beq.n	9a6e <Multistate_Value_Valid_Instance+0xe>
        return true;
    9a6a:	2001      	movs	r0, #1
}
    9a6c:	bd10      	pop	{r4, pc}
    return false;
    9a6e:	2000      	movs	r0, #0
    9a70:	e7fc      	b.n	9a6c <Multistate_Value_Valid_Instance+0xc>
    9a72:	46c0      	nop			; (mov r8, r8)
    9a74:	00009a1d 	.word	0x00009a1d

00009a78 <Multistate_Value_Present_Value>:
{
    9a78:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    9a7a:	4b04      	ldr	r3, [pc, #16]	; (9a8c <Multistate_Value_Present_Value+0x14>)
    9a7c:	4798      	blx	r3
    if (pObject) {
    9a7e:	2800      	cmp	r0, #0
    9a80:	d001      	beq.n	9a86 <Multistate_Value_Present_Value+0xe>
        value = pObject->value;
    9a82:	6940      	ldr	r0, [r0, #20]
}
    9a84:	bd10      	pop	{r4, pc}
    uint32_t value = 1;
    9a86:	2001      	movs	r0, #1
    return value;
    9a88:	e7fc      	b.n	9a84 <Multistate_Value_Present_Value+0xc>
    9a8a:	46c0      	nop			; (mov r8, r8)
    9a8c:	00009a1d 	.word	0x00009a1d

00009a90 <Multistate_Value_Object_Name>:
{
    9a90:	b510      	push	{r4, lr}
    9a92:	000c      	movs	r4, r1
    pObject = Object_List_Element(object_instance);
    9a94:	4b05      	ldr	r3, [pc, #20]	; (9aac <Multistate_Value_Object_Name+0x1c>)
    9a96:	4798      	blx	r3
    if (pObject) {
    9a98:	2800      	cmp	r0, #0
    9a9a:	d004      	beq.n	9aa6 <Multistate_Value_Object_Name+0x16>
        status = characterstring_init_ansi(object_name, pObject->object_name);
    9a9c:	6841      	ldr	r1, [r0, #4]
    9a9e:	0020      	movs	r0, r4
    9aa0:	4b03      	ldr	r3, [pc, #12]	; (9ab0 <Multistate_Value_Object_Name+0x20>)
    9aa2:	4798      	blx	r3
}
    9aa4:	bd10      	pop	{r4, pc}
    bool status = false;
    9aa6:	2000      	movs	r0, #0
    9aa8:	e7fc      	b.n	9aa4 <Multistate_Value_Object_Name+0x14>
    9aaa:	46c0      	nop			; (mov r8, r8)
    9aac:	00009a1d 	.word	0x00009a1d
    9ab0:	00003f75 	.word	0x00003f75

00009ab4 <Multistate_Value_State_Text>:
{
    9ab4:	b510      	push	{r4, lr}
    9ab6:	000c      	movs	r4, r1
    pObject = Object_List_Element(object_instance);
    9ab8:	4b09      	ldr	r3, [pc, #36]	; (9ae0 <Multistate_Value_State_Text+0x2c>)
    9aba:	4798      	blx	r3
    if (pObject) {
    9abc:	2800      	cmp	r0, #0
    9abe:	d009      	beq.n	9ad4 <Multistate_Value_State_Text+0x20>
        if ((state_index > 0) && (state_index <= pObject->max_states)) {
    9ac0:	2c00      	cmp	r4, #0
    9ac2:	d009      	beq.n	9ad8 <Multistate_Value_State_Text+0x24>
    9ac4:	68c3      	ldr	r3, [r0, #12]
    9ac6:	429c      	cmp	r4, r3
    9ac8:	d808      	bhi.n	9adc <Multistate_Value_State_Text+0x28>
            state_index--;
    9aca:	3c01      	subs	r4, #1
            pName = (char *)pObject->state_text_list[state_index];
    9acc:	6883      	ldr	r3, [r0, #8]
    9ace:	00a4      	lsls	r4, r4, #2
    9ad0:	5918      	ldr	r0, [r3, r4]
}
    9ad2:	bd10      	pop	{r4, pc}
    char *pName = NULL; /* return value */
    9ad4:	2000      	movs	r0, #0
    9ad6:	e7fc      	b.n	9ad2 <Multistate_Value_State_Text+0x1e>
    9ad8:	2000      	movs	r0, #0
    9ada:	e7fa      	b.n	9ad2 <Multistate_Value_State_Text+0x1e>
    9adc:	2000      	movs	r0, #0
    return pName;
    9ade:	e7f8      	b.n	9ad2 <Multistate_Value_State_Text+0x1e>
    9ae0:	00009a1d 	.word	0x00009a1d

00009ae4 <Multistate_Value_Out_Of_Service>:
{
    9ae4:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    9ae6:	4b05      	ldr	r3, [pc, #20]	; (9afc <Multistate_Value_Out_Of_Service+0x18>)
    9ae8:	4798      	blx	r3
    if (pObject) {
    9aea:	2800      	cmp	r0, #0
    9aec:	d003      	beq.n	9af6 <Multistate_Value_Out_Of_Service+0x12>
        value = pObject->out_of_service;
    9aee:	7c00      	ldrb	r0, [r0, #16]
    9af0:	0780      	lsls	r0, r0, #30
    9af2:	0fc0      	lsrs	r0, r0, #31
}
    9af4:	bd10      	pop	{r4, pc}
    bool value = false;
    9af6:	2000      	movs	r0, #0
    9af8:	e7fc      	b.n	9af4 <Multistate_Value_Out_Of_Service+0x10>
    9afa:	46c0      	nop			; (mov r8, r8)
    9afc:	00009a1d 	.word	0x00009a1d

00009b00 <Multistate_Value_Out_Of_Service_Set>:
{
    9b00:	b510      	push	{r4, lr}
    9b02:	000c      	movs	r4, r1
    pObject = Object_List_Element(object_instance);
    9b04:	4b06      	ldr	r3, [pc, #24]	; (9b20 <Multistate_Value_Out_Of_Service_Set+0x20>)
    9b06:	4798      	blx	r3
    if (pObject) {
    9b08:	2800      	cmp	r0, #0
    9b0a:	d007      	beq.n	9b1c <Multistate_Value_Out_Of_Service_Set+0x1c>
        pObject->out_of_service = value;
    9b0c:	2101      	movs	r1, #1
    9b0e:	4021      	ands	r1, r4
    9b10:	004b      	lsls	r3, r1, #1
    9b12:	7c01      	ldrb	r1, [r0, #16]
    9b14:	2202      	movs	r2, #2
    9b16:	4391      	bics	r1, r2
    9b18:	4319      	orrs	r1, r3
    9b1a:	7401      	strb	r1, [r0, #16]
}
    9b1c:	bd10      	pop	{r4, pc}
    9b1e:	46c0      	nop			; (mov r8, r8)
    9b20:	00009a1d 	.word	0x00009a1d

00009b24 <Multistate_Value_Max_States>:
{
    9b24:	b510      	push	{r4, lr}
    pObject = Object_List_Element(object_instance);
    9b26:	4b04      	ldr	r3, [pc, #16]	; (9b38 <Multistate_Value_Max_States+0x14>)
    9b28:	4798      	blx	r3
    if (pObject) {
    9b2a:	2800      	cmp	r0, #0
    9b2c:	d001      	beq.n	9b32 <Multistate_Value_Max_States+0xe>
        max_states = pObject->max_states;
    9b2e:	68c0      	ldr	r0, [r0, #12]
}
    9b30:	bd10      	pop	{r4, pc}
    uint32_t max_states = 0;
    9b32:	2000      	movs	r0, #0
    return max_states;
    9b34:	e7fc      	b.n	9b30 <Multistate_Value_Max_States+0xc>
    9b36:	46c0      	nop			; (mov r8, r8)
    9b38:	00009a1d 	.word	0x00009a1d

00009b3c <Multistate_Value_Read_Property>:
{
    9b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b3e:	46c6      	mov	lr, r8
    9b40:	b500      	push	{lr}
    9b42:	b0fc      	sub	sp, #496	; 0x1f0
    9b44:	1e04      	subs	r4, r0, #0
    if ((rpdata == NULL) || (rpdata->application_data == NULL)
    9b46:	d100      	bne.n	9b4a <Multistate_Value_Read_Property+0xe>
    9b48:	e0cd      	b.n	9ce6 <Multistate_Value_Read_Property+0x1aa>
    9b4a:	6906      	ldr	r6, [r0, #16]
    9b4c:	2e00      	cmp	r6, #0
    9b4e:	d100      	bne.n	9b52 <Multistate_Value_Read_Property+0x16>
    9b50:	e0cb      	b.n	9cea <Multistate_Value_Read_Property+0x1ae>
        || (rpdata->application_data_len == 0)) {
    9b52:	6945      	ldr	r5, [r0, #20]
    9b54:	2d00      	cmp	r5, #0
    9b56:	d017      	beq.n	9b88 <Multistate_Value_Read_Property+0x4c>
    switch (rpdata->object_property) {
    9b58:	6883      	ldr	r3, [r0, #8]
    9b5a:	3b24      	subs	r3, #36	; 0x24
    9b5c:	2b4b      	cmp	r3, #75	; 0x4b
    9b5e:	d900      	bls.n	9b62 <Multistate_Value_Read_Property+0x26>
    9b60:	e0b3      	b.n	9cca <Multistate_Value_Read_Property+0x18e>
    9b62:	009b      	lsls	r3, r3, #2
    9b64:	4a62      	ldr	r2, [pc, #392]	; (9cf0 <Multistate_Value_Read_Property+0x1b4>)
    9b66:	58d3      	ldr	r3, [r2, r3]
    9b68:	469f      	mov	pc, r3
            apdu_len = encode_application_object_id(
    9b6a:	6842      	ldr	r2, [r0, #4]
    9b6c:	2113      	movs	r1, #19
    9b6e:	0030      	movs	r0, r6
    9b70:	4b60      	ldr	r3, [pc, #384]	; (9cf4 <Multistate_Value_Read_Property+0x1b8>)
    9b72:	4798      	blx	r3
    9b74:	0005      	movs	r5, r0
    if ((apdu_len >= 0) && (rpdata->object_property != PROP_STATE_TEXT)
    9b76:	2d00      	cmp	r5, #0
    9b78:	db06      	blt.n	9b88 <Multistate_Value_Read_Property+0x4c>
    9b7a:	68a3      	ldr	r3, [r4, #8]
    9b7c:	2b6e      	cmp	r3, #110	; 0x6e
    9b7e:	d003      	beq.n	9b88 <Multistate_Value_Read_Property+0x4c>
        && (rpdata->array_index != BACNET_ARRAY_ALL)) {
    9b80:	68e3      	ldr	r3, [r4, #12]
    9b82:	3301      	adds	r3, #1
    9b84:	d000      	beq.n	9b88 <Multistate_Value_Read_Property+0x4c>
    9b86:	e0a7      	b.n	9cd8 <Multistate_Value_Read_Property+0x19c>
}
    9b88:	0028      	movs	r0, r5
    9b8a:	b07c      	add	sp, #496	; 0x1f0
    9b8c:	bc04      	pop	{r2}
    9b8e:	4690      	mov	r8, r2
    9b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Multistate_Value_Object_Name(rpdata->object_instance, &char_string);
    9b92:	4669      	mov	r1, sp
    9b94:	6840      	ldr	r0, [r0, #4]
    9b96:	4b58      	ldr	r3, [pc, #352]	; (9cf8 <Multistate_Value_Read_Property+0x1bc>)
    9b98:	4798      	blx	r3
                = encode_application_character_string(&apdu[0], &char_string);
    9b9a:	4669      	mov	r1, sp
    9b9c:	0030      	movs	r0, r6
    9b9e:	4b57      	ldr	r3, [pc, #348]	; (9cfc <Multistate_Value_Read_Property+0x1c0>)
    9ba0:	4798      	blx	r3
    9ba2:	0005      	movs	r5, r0
            break;
    9ba4:	e7e7      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
            apdu_len = encode_application_enumerated(
    9ba6:	2113      	movs	r1, #19
    9ba8:	0030      	movs	r0, r6
    9baa:	4b55      	ldr	r3, [pc, #340]	; (9d00 <Multistate_Value_Read_Property+0x1c4>)
    9bac:	4798      	blx	r3
    9bae:	0005      	movs	r5, r0
            break;
    9bb0:	e7e1      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
                = Multistate_Value_Present_Value(rpdata->object_instance);
    9bb2:	6840      	ldr	r0, [r0, #4]
    9bb4:	4b53      	ldr	r3, [pc, #332]	; (9d04 <Multistate_Value_Read_Property+0x1c8>)
    9bb6:	4798      	blx	r3
    9bb8:	0002      	movs	r2, r0
            apdu_len = encode_application_unsigned(&apdu[0], present_value);
    9bba:	2300      	movs	r3, #0
    9bbc:	0030      	movs	r0, r6
    9bbe:	4952      	ldr	r1, [pc, #328]	; (9d08 <Multistate_Value_Read_Property+0x1cc>)
    9bc0:	4788      	blx	r1
    9bc2:	0005      	movs	r5, r0
            break;
    9bc4:	e7d7      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
            bitstring_init(&bit_string);
    9bc6:	a878      	add	r0, sp, #480	; 0x1e0
    9bc8:	4b50      	ldr	r3, [pc, #320]	; (9d0c <Multistate_Value_Read_Property+0x1d0>)
    9bca:	4798      	blx	r3
            bitstring_set_bit(&bit_string, STATUS_FLAG_IN_ALARM, false);
    9bcc:	2200      	movs	r2, #0
    9bce:	2100      	movs	r1, #0
    9bd0:	a878      	add	r0, sp, #480	; 0x1e0
    9bd2:	4d4f      	ldr	r5, [pc, #316]	; (9d10 <Multistate_Value_Read_Property+0x1d4>)
    9bd4:	47a8      	blx	r5
            bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, false);
    9bd6:	2200      	movs	r2, #0
    9bd8:	2101      	movs	r1, #1
    9bda:	a878      	add	r0, sp, #480	; 0x1e0
    9bdc:	47a8      	blx	r5
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
    9bde:	2200      	movs	r2, #0
    9be0:	2102      	movs	r1, #2
    9be2:	a878      	add	r0, sp, #480	; 0x1e0
    9be4:	47a8      	blx	r5
            bitstring_set_bit(&bit_string, STATUS_FLAG_OUT_OF_SERVICE,
    9be6:	6860      	ldr	r0, [r4, #4]
    9be8:	4b4a      	ldr	r3, [pc, #296]	; (9d14 <Multistate_Value_Read_Property+0x1d8>)
    9bea:	4798      	blx	r3
    9bec:	0002      	movs	r2, r0
    9bee:	2103      	movs	r1, #3
    9bf0:	a878      	add	r0, sp, #480	; 0x1e0
    9bf2:	47a8      	blx	r5
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    9bf4:	a978      	add	r1, sp, #480	; 0x1e0
    9bf6:	0030      	movs	r0, r6
    9bf8:	4b47      	ldr	r3, [pc, #284]	; (9d18 <Multistate_Value_Read_Property+0x1dc>)
    9bfa:	4798      	blx	r3
    9bfc:	0005      	movs	r5, r0
            break;
    9bfe:	e7ba      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
                = encode_application_enumerated(&apdu[0], EVENT_STATE_NORMAL);
    9c00:	2100      	movs	r1, #0
    9c02:	0030      	movs	r0, r6
    9c04:	4b3e      	ldr	r3, [pc, #248]	; (9d00 <Multistate_Value_Read_Property+0x1c4>)
    9c06:	4798      	blx	r3
    9c08:	0005      	movs	r5, r0
            break;
    9c0a:	e7b4      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
            apdu_len = encode_application_boolean(&apdu[0],
    9c0c:	6840      	ldr	r0, [r0, #4]
    9c0e:	4b41      	ldr	r3, [pc, #260]	; (9d14 <Multistate_Value_Read_Property+0x1d8>)
    9c10:	4798      	blx	r3
    9c12:	0001      	movs	r1, r0
    9c14:	0030      	movs	r0, r6
    9c16:	4b41      	ldr	r3, [pc, #260]	; (9d1c <Multistate_Value_Read_Property+0x1e0>)
    9c18:	4798      	blx	r3
    9c1a:	0005      	movs	r5, r0
            break;
    9c1c:	e7ab      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
                Multistate_Value_Max_States(rpdata->object_instance));
    9c1e:	6840      	ldr	r0, [r0, #4]
    9c20:	4b3f      	ldr	r3, [pc, #252]	; (9d20 <Multistate_Value_Read_Property+0x1e4>)
    9c22:	4798      	blx	r3
    9c24:	0002      	movs	r2, r0
            apdu_len = encode_application_unsigned(&apdu[apdu_len],
    9c26:	2300      	movs	r3, #0
    9c28:	0030      	movs	r0, r6
    9c2a:	4937      	ldr	r1, [pc, #220]	; (9d08 <Multistate_Value_Read_Property+0x1cc>)
    9c2c:	4788      	blx	r1
    9c2e:	0005      	movs	r5, r0
            break;
    9c30:	e7a1      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
            if (rpdata->array_index == 0) {
    9c32:	68c3      	ldr	r3, [r0, #12]
    9c34:	2b00      	cmp	r3, #0
    9c36:	d00e      	beq.n	9c56 <Multistate_Value_Read_Property+0x11a>
            } else if (rpdata->array_index == BACNET_ARRAY_ALL) {
    9c38:	3301      	adds	r3, #1
    9c3a:	d016      	beq.n	9c6a <Multistate_Value_Read_Property+0x12e>
                    = Multistate_Value_Max_States(rpdata->object_instance);
    9c3c:	6840      	ldr	r0, [r0, #4]
    9c3e:	4b38      	ldr	r3, [pc, #224]	; (9d20 <Multistate_Value_Read_Property+0x1e4>)
    9c40:	4798      	blx	r3
                if (rpdata->array_index <= max_states) {
    9c42:	68e1      	ldr	r1, [r4, #12]
    9c44:	4288      	cmp	r0, r1
    9c46:	d233      	bcs.n	9cb0 <Multistate_Value_Read_Property+0x174>
                    rpdata->error_class = ERROR_CLASS_PROPERTY;
    9c48:	2302      	movs	r3, #2
    9c4a:	8323      	strh	r3, [r4, #24]
                    rpdata->error_code = ERROR_CODE_INVALID_ARRAY_INDEX;
    9c4c:	3328      	adds	r3, #40	; 0x28
    9c4e:	8363      	strh	r3, [r4, #26]
                    apdu_len = BACNET_STATUS_ERROR;
    9c50:	2501      	movs	r5, #1
    9c52:	426d      	negs	r5, r5
    9c54:	e78f      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
                    Multistate_Value_Max_States(rpdata->object_instance));
    9c56:	6840      	ldr	r0, [r0, #4]
    9c58:	4b31      	ldr	r3, [pc, #196]	; (9d20 <Multistate_Value_Read_Property+0x1e4>)
    9c5a:	4798      	blx	r3
    9c5c:	0002      	movs	r2, r0
                apdu_len = encode_application_unsigned(&apdu[0],
    9c5e:	2300      	movs	r3, #0
    9c60:	0030      	movs	r0, r6
    9c62:	4929      	ldr	r1, [pc, #164]	; (9d08 <Multistate_Value_Read_Property+0x1cc>)
    9c64:	4788      	blx	r1
    9c66:	0005      	movs	r5, r0
    9c68:	e785      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
                    = Multistate_Value_Max_States(rpdata->object_instance);
    9c6a:	6840      	ldr	r0, [r0, #4]
    9c6c:	4b2c      	ldr	r3, [pc, #176]	; (9d20 <Multistate_Value_Read_Property+0x1e4>)
    9c6e:	4798      	blx	r3
    9c70:	4680      	mov	r8, r0
                for (i = 1; i <= max_states; i++) {
    9c72:	2701      	movs	r7, #1
    int apdu_len = 0; /* return value */
    9c74:	2500      	movs	r5, #0
                for (i = 1; i <= max_states; i++) {
    9c76:	4547      	cmp	r7, r8
    9c78:	d900      	bls.n	9c7c <Multistate_Value_Read_Property+0x140>
    9c7a:	e77c      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
                        Multistate_Value_State_Text(
    9c7c:	0039      	movs	r1, r7
    9c7e:	6860      	ldr	r0, [r4, #4]
    9c80:	4b28      	ldr	r3, [pc, #160]	; (9d24 <Multistate_Value_Read_Property+0x1e8>)
    9c82:	4798      	blx	r3
    9c84:	0001      	movs	r1, r0
                    characterstring_init_ansi(&char_string,
    9c86:	4668      	mov	r0, sp
    9c88:	4b27      	ldr	r3, [pc, #156]	; (9d28 <Multistate_Value_Read_Property+0x1ec>)
    9c8a:	4798      	blx	r3
                    len = encode_application_character_string(
    9c8c:	1970      	adds	r0, r6, r5
    9c8e:	4669      	mov	r1, sp
    9c90:	4b1a      	ldr	r3, [pc, #104]	; (9cfc <Multistate_Value_Read_Property+0x1c0>)
    9c92:	4798      	blx	r3
                    if ((apdu_len + len) < MAX_APDU) {
    9c94:	182d      	adds	r5, r5, r0
    9c96:	23e0      	movs	r3, #224	; 0xe0
    9c98:	33ff      	adds	r3, #255	; 0xff
    9c9a:	429d      	cmp	r5, r3
    9c9c:	dc01      	bgt.n	9ca2 <Multistate_Value_Read_Property+0x166>
                for (i = 1; i <= max_states; i++) {
    9c9e:	3701      	adds	r7, #1
    9ca0:	e7e9      	b.n	9c76 <Multistate_Value_Read_Property+0x13a>
                        rpdata->error_class = ERROR_CLASS_SERVICES;
    9ca2:	2305      	movs	r3, #5
    9ca4:	8323      	strh	r3, [r4, #24]
                        rpdata->error_code = ERROR_CODE_NO_SPACE_FOR_OBJECT;
    9ca6:	330d      	adds	r3, #13
    9ca8:	8363      	strh	r3, [r4, #26]
                        apdu_len = BACNET_STATUS_ERROR;
    9caa:	2501      	movs	r5, #1
    9cac:	426d      	negs	r5, r5
                        break;
    9cae:	e762      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
                        Multistate_Value_State_Text(
    9cb0:	6860      	ldr	r0, [r4, #4]
    9cb2:	4b1c      	ldr	r3, [pc, #112]	; (9d24 <Multistate_Value_Read_Property+0x1e8>)
    9cb4:	4798      	blx	r3
    9cb6:	0001      	movs	r1, r0
                    characterstring_init_ansi(&char_string,
    9cb8:	4668      	mov	r0, sp
    9cba:	4b1b      	ldr	r3, [pc, #108]	; (9d28 <Multistate_Value_Read_Property+0x1ec>)
    9cbc:	4798      	blx	r3
                    apdu_len = encode_application_character_string(
    9cbe:	4669      	mov	r1, sp
    9cc0:	0030      	movs	r0, r6
    9cc2:	4b0e      	ldr	r3, [pc, #56]	; (9cfc <Multistate_Value_Read_Property+0x1c0>)
    9cc4:	4798      	blx	r3
    9cc6:	0005      	movs	r5, r0
    9cc8:	e755      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
            rpdata->error_class = ERROR_CLASS_PROPERTY;
    9cca:	2302      	movs	r3, #2
    9ccc:	8323      	strh	r3, [r4, #24]
            rpdata->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    9cce:	331e      	adds	r3, #30
    9cd0:	8363      	strh	r3, [r4, #26]
            apdu_len = BACNET_STATUS_ERROR;
    9cd2:	2501      	movs	r5, #1
    9cd4:	426d      	negs	r5, r5
            break;
    9cd6:	e74e      	b.n	9b76 <Multistate_Value_Read_Property+0x3a>
        rpdata->error_class = ERROR_CLASS_PROPERTY;
    9cd8:	2302      	movs	r3, #2
    9cda:	8323      	strh	r3, [r4, #24]
        rpdata->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    9cdc:	3330      	adds	r3, #48	; 0x30
    9cde:	8363      	strh	r3, [r4, #26]
        apdu_len = BACNET_STATUS_ERROR;
    9ce0:	2501      	movs	r5, #1
    9ce2:	426d      	negs	r5, r5
    9ce4:	e750      	b.n	9b88 <Multistate_Value_Read_Property+0x4c>
        return 0;
    9ce6:	2500      	movs	r5, #0
    9ce8:	e74e      	b.n	9b88 <Multistate_Value_Read_Property+0x4c>
    9cea:	2500      	movs	r5, #0
    9cec:	e74c      	b.n	9b88 <Multistate_Value_Read_Property+0x4c>
    9cee:	46c0      	nop			; (mov r8, r8)
    9cf0:	0000f5c4 	.word	0x0000f5c4
    9cf4:	0000316d 	.word	0x0000316d
    9cf8:	00009a91 	.word	0x00009a91
    9cfc:	000032dd 	.word	0x000032dd
    9d00:	000036f1 	.word	0x000036f1
    9d04:	00009a79 	.word	0x00009a79
    9d08:	000035e1 	.word	0x000035e1
    9d0c:	00003e71 	.word	0x00003e71
    9d10:	00003e85 	.word	0x00003e85
    9d14:	00009ae5 	.word	0x00009ae5
    9d18:	000030b9 	.word	0x000030b9
    9d1c:	00002fad 	.word	0x00002fad
    9d20:	00009b25 	.word	0x00009b25
    9d24:	00009ab5 	.word	0x00009ab5
    9d28:	00003f75 	.word	0x00003f75

00009d2c <Multistate_Value_Present_Value_Write>:
{
    9d2c:	b570      	push	{r4, r5, r6, lr}
    9d2e:	000c      	movs	r4, r1
    9d30:	0016      	movs	r6, r2
    9d32:	001d      	movs	r5, r3
    pObject = Object_List_Element(object_instance);
    9d34:	4b0e      	ldr	r3, [pc, #56]	; (9d70 <Multistate_Value_Present_Value_Write+0x44>)
    9d36:	4798      	blx	r3
    if (pObject) {
    9d38:	2800      	cmp	r0, #0
    9d3a:	d016      	beq.n	9d6a <Multistate_Value_Present_Value_Write+0x3e>
        if (pObject->writable) {
    9d3c:	7c03      	ldrb	r3, [r0, #16]
    9d3e:	07db      	lsls	r3, r3, #31
    9d40:	d50d      	bpl.n	9d5e <Multistate_Value_Present_Value_Write+0x32>
            if ((value >= 1) && (value <= pObject->max_states)) {
    9d42:	2c00      	cmp	r4, #0
    9d44:	d005      	beq.n	9d52 <Multistate_Value_Present_Value_Write+0x26>
    9d46:	68c3      	ldr	r3, [r0, #12]
    9d48:	429c      	cmp	r4, r3
    9d4a:	d802      	bhi.n	9d52 <Multistate_Value_Present_Value_Write+0x26>
                pObject->value = value;
    9d4c:	6144      	str	r4, [r0, #20]
                status = true;
    9d4e:	2001      	movs	r0, #1
    9d50:	e00a      	b.n	9d68 <Multistate_Value_Present_Value_Write+0x3c>
                *error_class = ERROR_CLASS_PROPERTY;
    9d52:	2302      	movs	r3, #2
    9d54:	8033      	strh	r3, [r6, #0]
                *error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    9d56:	3323      	adds	r3, #35	; 0x23
    9d58:	802b      	strh	r3, [r5, #0]
    bool status = false;
    9d5a:	2000      	movs	r0, #0
    9d5c:	e004      	b.n	9d68 <Multistate_Value_Present_Value_Write+0x3c>
            *error_class = ERROR_CLASS_PROPERTY;
    9d5e:	2302      	movs	r3, #2
    9d60:	8033      	strh	r3, [r6, #0]
            *error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    9d62:	3326      	adds	r3, #38	; 0x26
    9d64:	802b      	strh	r3, [r5, #0]
    bool status = false;
    9d66:	2000      	movs	r0, #0
}
    9d68:	bd70      	pop	{r4, r5, r6, pc}
    bool status = false;
    9d6a:	2000      	movs	r0, #0
    9d6c:	e7fc      	b.n	9d68 <Multistate_Value_Present_Value_Write+0x3c>
    9d6e:	46c0      	nop			; (mov r8, r8)
    9d70:	00009a1d 	.word	0x00009a1d

00009d74 <Multistate_Value_Write_Property>:
{
    9d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d76:	b0fd      	sub	sp, #500	; 0x1f4
    9d78:	0004      	movs	r4, r0
        wp_data->application_data, wp_data->application_data_len, &value);
    9d7a:	3010      	adds	r0, #16
    9d7c:	23f8      	movs	r3, #248	; 0xf8
    9d7e:	005b      	lsls	r3, r3, #1
    9d80:	58e1      	ldr	r1, [r4, r3]
    len = bacapp_decode_application_data(
    9d82:	466a      	mov	r2, sp
    9d84:	4b2f      	ldr	r3, [pc, #188]	; (9e44 <Multistate_Value_Write_Property+0xd0>)
    9d86:	4798      	blx	r3
    if (len < 0) {
    9d88:	2800      	cmp	r0, #0
    9d8a:	db10      	blt.n	9dae <Multistate_Value_Write_Property+0x3a>
    if ((wp_data->object_property != PROP_STATE_TEXT)
    9d8c:	68a3      	ldr	r3, [r4, #8]
    9d8e:	2b6e      	cmp	r3, #110	; 0x6e
    9d90:	d016      	beq.n	9dc0 <Multistate_Value_Write_Property+0x4c>
        && (wp_data->array_index != BACNET_ARRAY_ALL)) {
    9d92:	68e2      	ldr	r2, [r4, #12]
    9d94:	3201      	adds	r2, #1
    9d96:	d013      	beq.n	9dc0 <Multistate_Value_Write_Property+0x4c>
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    9d98:	2202      	movs	r2, #2
    9d9a:	23fb      	movs	r3, #251	; 0xfb
    9d9c:	005b      	lsls	r3, r3, #1
    9d9e:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    9da0:	3230      	adds	r2, #48	; 0x30
    9da2:	3302      	adds	r3, #2
    9da4:	52e2      	strh	r2, [r4, r3]
        return false;
    9da6:	2500      	movs	r5, #0
}
    9da8:	0028      	movs	r0, r5
    9daa:	b07d      	add	sp, #500	; 0x1f4
    9dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    9dae:	2202      	movs	r2, #2
    9db0:	23fb      	movs	r3, #251	; 0xfb
    9db2:	005b      	lsls	r3, r3, #1
    9db4:	52e2      	strh	r2, [r4, r3]
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    9db6:	3223      	adds	r2, #35	; 0x23
    9db8:	3302      	adds	r3, #2
    9dba:	52e2      	strh	r2, [r4, r3]
        return false;
    9dbc:	2500      	movs	r5, #0
    9dbe:	e7f3      	b.n	9da8 <Multistate_Value_Write_Property+0x34>
    switch (wp_data->object_property) {
    9dc0:	3b24      	subs	r3, #36	; 0x24
    9dc2:	2b4b      	cmp	r3, #75	; 0x4b
    9dc4:	d834      	bhi.n	9e30 <Multistate_Value_Write_Property+0xbc>
    9dc6:	009b      	lsls	r3, r3, #2
    9dc8:	4a1f      	ldr	r2, [pc, #124]	; (9e48 <Multistate_Value_Write_Property+0xd4>)
    9dca:	58d3      	ldr	r3, [r2, r3]
    9dcc:	469f      	mov	pc, r3
                = WPValidateArgType(&value, BACNET_APPLICATION_TAG_UNSIGNED_INT,
    9dce:	0026      	movs	r6, r4
    9dd0:	36f7      	adds	r6, #247	; 0xf7
    9dd2:	36ff      	adds	r6, #255	; 0xff
    9dd4:	0027      	movs	r7, r4
    9dd6:	37f9      	adds	r7, #249	; 0xf9
    9dd8:	37ff      	adds	r7, #255	; 0xff
    9dda:	003b      	movs	r3, r7
    9ddc:	0032      	movs	r2, r6
    9dde:	2102      	movs	r1, #2
    9de0:	4668      	mov	r0, sp
    9de2:	4d1a      	ldr	r5, [pc, #104]	; (9e4c <Multistate_Value_Write_Property+0xd8>)
    9de4:	47a8      	blx	r5
    9de6:	1e05      	subs	r5, r0, #0
            if (status) {
    9de8:	d0de      	beq.n	9da8 <Multistate_Value_Write_Property+0x34>
                status = Multistate_Value_Present_Value_Write(
    9dea:	6820      	ldr	r0, [r4, #0]
    9dec:	003b      	movs	r3, r7
    9dee:	0032      	movs	r2, r6
    9df0:	9902      	ldr	r1, [sp, #8]
    9df2:	4c17      	ldr	r4, [pc, #92]	; (9e50 <Multistate_Value_Write_Property+0xdc>)
    9df4:	47a0      	blx	r4
    9df6:	0005      	movs	r5, r0
    9df8:	e7d6      	b.n	9da8 <Multistate_Value_Write_Property+0x34>
            status = WPValidateArgType(&value, BACNET_APPLICATION_TAG_BOOLEAN,
    9dfa:	0023      	movs	r3, r4
    9dfc:	33f9      	adds	r3, #249	; 0xf9
    9dfe:	33ff      	adds	r3, #255	; 0xff
    9e00:	0022      	movs	r2, r4
    9e02:	32f7      	adds	r2, #247	; 0xf7
    9e04:	32ff      	adds	r2, #255	; 0xff
    9e06:	2101      	movs	r1, #1
    9e08:	4668      	mov	r0, sp
    9e0a:	4d10      	ldr	r5, [pc, #64]	; (9e4c <Multistate_Value_Write_Property+0xd8>)
    9e0c:	47a8      	blx	r5
    9e0e:	1e05      	subs	r5, r0, #0
            if (status) {
    9e10:	d0ca      	beq.n	9da8 <Multistate_Value_Write_Property+0x34>
                Multistate_Value_Out_Of_Service_Set(
    9e12:	466b      	mov	r3, sp
    9e14:	7a19      	ldrb	r1, [r3, #8]
    9e16:	6820      	ldr	r0, [r4, #0]
    9e18:	4b0e      	ldr	r3, [pc, #56]	; (9e54 <Multistate_Value_Write_Property+0xe0>)
    9e1a:	4798      	blx	r3
    9e1c:	e7c4      	b.n	9da8 <Multistate_Value_Write_Property+0x34>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    9e1e:	2202      	movs	r2, #2
    9e20:	23fb      	movs	r3, #251	; 0xfb
    9e22:	005b      	lsls	r3, r3, #1
    9e24:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    9e26:	3226      	adds	r2, #38	; 0x26
    9e28:	3302      	adds	r3, #2
    9e2a:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value */
    9e2c:	2500      	movs	r5, #0
            break;
    9e2e:	e7bb      	b.n	9da8 <Multistate_Value_Write_Property+0x34>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    9e30:	2202      	movs	r2, #2
    9e32:	23fb      	movs	r3, #251	; 0xfb
    9e34:	005b      	lsls	r3, r3, #1
    9e36:	52e2      	strh	r2, [r4, r3]
            wp_data->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    9e38:	321e      	adds	r2, #30
    9e3a:	3302      	adds	r3, #2
    9e3c:	52e2      	strh	r2, [r4, r3]
    bool status = false; /* return value */
    9e3e:	2500      	movs	r5, #0
            break;
    9e40:	e7b2      	b.n	9da8 <Multistate_Value_Write_Property+0x34>
    9e42:	46c0      	nop			; (mov r8, r8)
    9e44:	00002871 	.word	0x00002871
    9e48:	0000f6f4 	.word	0x0000f6f4
    9e4c:	00002239 	.word	0x00002239
    9e50:	00009d2d 	.word	0x00009d2d
    9e54:	00009b01 	.word	0x00009b01

00009e58 <Network_Port_Property_List>:
    const int **pRequired,
    const int **pOptional,
    const int **pProprietary)
{
    (void)object_instance;
    if (pRequired) {
    9e58:	2900      	cmp	r1, #0
    9e5a:	d001      	beq.n	9e60 <Network_Port_Property_List+0x8>
        *pRequired = Network_Port_Properties_Required;
    9e5c:	4805      	ldr	r0, [pc, #20]	; (9e74 <Network_Port_Property_List+0x1c>)
    9e5e:	6008      	str	r0, [r1, #0]
    }
    if (pOptional) {
    9e60:	2a00      	cmp	r2, #0
    9e62:	d001      	beq.n	9e68 <Network_Port_Property_List+0x10>
        *pOptional = Network_Port_Properties_Optional;
    9e64:	4904      	ldr	r1, [pc, #16]	; (9e78 <Network_Port_Property_List+0x20>)
    9e66:	6011      	str	r1, [r2, #0]
    }
    if (pProprietary) {
    9e68:	2b00      	cmp	r3, #0
    9e6a:	d001      	beq.n	9e70 <Network_Port_Property_List+0x18>
        *pProprietary = Network_Port_Properties_Proprietary;
    9e6c:	4a03      	ldr	r2, [pc, #12]	; (9e7c <Network_Port_Property_List+0x24>)
    9e6e:	601a      	str	r2, [r3, #0]
    }

    return;
}
    9e70:	4770      	bx	lr
    9e72:	46c0      	nop			; (mov r8, r8)
    9e74:	0000f8d4 	.word	0x0000f8d4
    9e78:	0000f8c0 	.word	0x0000f8c0
    9e7c:	0000f8d0 	.word	0x0000f8d0

00009e80 <Network_Port_Property_Lists>:
 * @param pProprietary - pointer to list of int terminated by -1, of
 * BACnet proprietary properties for this object.
 */
void Network_Port_Property_Lists(
    const int **pRequired, const int **pOptional, const int **pProprietary)
{
    9e80:	b510      	push	{r4, lr}
    9e82:	0013      	movs	r3, r2
    Network_Port_Property_List(
    9e84:	000a      	movs	r2, r1
    9e86:	0001      	movs	r1, r0
    9e88:	2001      	movs	r0, #1
    9e8a:	4c01      	ldr	r4, [pc, #4]	; (9e90 <Network_Port_Property_Lists+0x10>)
    9e8c:	47a0      	blx	r4
        BACNET_NETWORK_PORT_INSTANCE, pRequired, pOptional, pProprietary);
}
    9e8e:	bd10      	pop	{r4, pc}
    9e90:	00009e59 	.word	0x00009e59

00009e94 <Network_Port_Object_Name>:
 *
 * @return  true if object-name was retrieved
 */
bool Network_Port_Object_Name(
    uint32_t object_instance, BACNET_CHARACTER_STRING *object_name)
{
    9e94:	b510      	push	{r4, lr}
    9e96:	000b      	movs	r3, r1
    bool status = false;

    if (object_instance == BACNET_NETWORK_PORT_INSTANCE) {
    9e98:	2801      	cmp	r0, #1
    9e9a:	d001      	beq.n	9ea0 <Network_Port_Object_Name+0xc>
    bool status = false;
    9e9c:	2000      	movs	r0, #0
        status = characterstring_init_ansi(object_name, "NP-1");
    }

    return status;
}
    9e9e:	bd10      	pop	{r4, pc}
        status = characterstring_init_ansi(object_name, "NP-1");
    9ea0:	4902      	ldr	r1, [pc, #8]	; (9eac <Network_Port_Object_Name+0x18>)
    9ea2:	0018      	movs	r0, r3
    9ea4:	4b02      	ldr	r3, [pc, #8]	; (9eb0 <Network_Port_Object_Name+0x1c>)
    9ea6:	4798      	blx	r3
    9ea8:	e7f9      	b.n	9e9e <Network_Port_Object_Name+0xa>
    9eaa:	46c0      	nop			; (mov r8, r8)
    9eac:	0000f8b8 	.word	0x0000f8b8
    9eb0:	00003f75 	.word	0x00003f75

00009eb4 <Network_Port_Valid_Instance>:
 *
 * @return  true if the instance is valid, and false if not
 */
bool Network_Port_Valid_Instance(uint32_t object_instance)
{
    if (object_instance == BACNET_NETWORK_PORT_INSTANCE) {
    9eb4:	2801      	cmp	r0, #1
    9eb6:	d000      	beq.n	9eba <Network_Port_Valid_Instance+0x6>
        return true;
    }

    return false;
    9eb8:	2000      	movs	r0, #0
}
    9eba:	4770      	bx	lr

00009ebc <Network_Port_Count>:
 * @return  Number of Network Port objects
 */
unsigned Network_Port_Count(void)
{
    return BACNET_NETWORK_PORTS_MAX;
}
    9ebc:	2001      	movs	r0, #1
    9ebe:	4770      	bx	lr

00009ec0 <Network_Port_Index_To_Instance>:
 * @return object instance-number for the given index, or BACNET_MAX_INSTANCE
 * for an invalid index.
 */
uint32_t Network_Port_Index_To_Instance(unsigned index)
{
    if (index < BACNET_NETWORK_PORTS_MAX) {
    9ec0:	2800      	cmp	r0, #0
    9ec2:	d001      	beq.n	9ec8 <Network_Port_Index_To_Instance+0x8>
        return BACNET_NETWORK_PORT_INSTANCE;
    }

    return BACNET_MAX_INSTANCE;
    9ec4:	4801      	ldr	r0, [pc, #4]	; (9ecc <Network_Port_Index_To_Instance+0xc>)
}
    9ec6:	4770      	bx	lr
        return BACNET_NETWORK_PORT_INSTANCE;
    9ec8:	3001      	adds	r0, #1
    9eca:	e7fc      	b.n	9ec6 <Network_Port_Index_To_Instance+0x6>
    9ecc:	003fffff 	.word	0x003fffff

00009ed0 <Network_Port_Instance_To_Index>:
 * @return  index for the given instance-number, or BACNET_NETWORK_PORTS_MAX
 * if not valid.
 */
unsigned Network_Port_Instance_To_Index(uint32_t object_instance)
{
    if (object_instance == BACNET_NETWORK_PORT_INSTANCE) {
    9ed0:	2801      	cmp	r0, #1
    9ed2:	d001      	beq.n	9ed8 <Network_Port_Instance_To_Index+0x8>
        return 0;
    }

    return BACNET_NETWORK_PORTS_MAX;
    9ed4:	2001      	movs	r0, #1
}
    9ed6:	4770      	bx	lr
        return 0;
    9ed8:	2000      	movs	r0, #0
    9eda:	e7fc      	b.n	9ed6 <Network_Port_Instance_To_Index+0x6>

00009edc <Network_Port_Out_Of_Service>:
 */
bool Network_Port_Out_Of_Service(uint32_t object_instance)
{
    (void)object_instance;
    return false;
}
    9edc:	2000      	movs	r0, #0
    9ede:	4770      	bx	lr

00009ee0 <Network_Port_Reliability>:
 */
BACNET_RELIABILITY Network_Port_Reliability(uint32_t object_instance)
{
    (void)object_instance;
    return RELIABILITY_NO_FAULT_DETECTED;
}
    9ee0:	2000      	movs	r0, #0
    9ee2:	4770      	bx	lr

00009ee4 <Network_Port_Type>:
 */
uint8_t Network_Port_Type(uint32_t object_instance)
{
    (void)object_instance;
    return PORT_TYPE_MSTP;
}
    9ee4:	2002      	movs	r0, #2
    9ee6:	4770      	bx	lr

00009ee8 <Network_Port_Network_Number>:
{
    (void)object_instance;
    /* A Network_Number of 0 indicates that the Network_Number
       is not known or cannot be determined. */
    return 0;
}
    9ee8:	2000      	movs	r0, #0
    9eea:	4770      	bx	lr

00009eec <Network_Port_Quality>:
 */
BACNET_PORT_QUALITY Network_Port_Quality(uint32_t object_instance)
{
    (void)object_instance;
    return PORT_QUALITY_CONFIGURED;
}
    9eec:	2003      	movs	r0, #3
    9eee:	4770      	bx	lr

00009ef0 <Network_Port_MAC_Address>:
 *
 * @return  true if mac-address was retrieved
 */
bool Network_Port_MAC_Address(
    uint32_t object_instance, BACNET_OCTET_STRING *mac_address)
{
    9ef0:	b510      	push	{r4, lr}
    9ef2:	000c      	movs	r4, r1
    (void)object_instance;
    Object_List[0].MAC_Address[0] = dlmstp_mac_address();
    9ef4:	4b04      	ldr	r3, [pc, #16]	; (9f08 <Network_Port_MAC_Address+0x18>)
    9ef6:	4798      	blx	r3
    9ef8:	4904      	ldr	r1, [pc, #16]	; (9f0c <Network_Port_MAC_Address+0x1c>)
    9efa:	7048      	strb	r0, [r1, #1]

    return octetstring_init(mac_address, Object_List[0].MAC_Address, 1);
    9efc:	3101      	adds	r1, #1
    9efe:	2201      	movs	r2, #1
    9f00:	0020      	movs	r0, r4
    9f02:	4b03      	ldr	r3, [pc, #12]	; (9f10 <Network_Port_MAC_Address+0x20>)
    9f04:	4798      	blx	r3
}
    9f06:	bd10      	pop	{r4, pc}
    9f08:	00006c99 	.word	0x00006c99
    9f0c:	20001ecc 	.word	0x20001ecc
    9f10:	000040e5 	.word	0x000040e5

00009f14 <Network_Port_MAC_Address_Set>:
 * @return  true if object-name was set
 */
bool Network_Port_MAC_Address_Set(
    uint32_t object_instance, uint8_t *mac_src, uint8_t mac_len)
{
    if (mac_len == 1) {
    9f14:	2a01      	cmp	r2, #1
    9f16:	d001      	beq.n	9f1c <Network_Port_MAC_Address_Set+0x8>
        Object_List[0].MAC_Address[0] = mac_src[0];
        Object_List[0].Changes_Pending = true;
        return true;
    }

    return false;
    9f18:	2000      	movs	r0, #0
}
    9f1a:	4770      	bx	lr
        Object_List[0].MAC_Address[0] = mac_src[0];
    9f1c:	780a      	ldrb	r2, [r1, #0]
    9f1e:	4b04      	ldr	r3, [pc, #16]	; (9f30 <Network_Port_MAC_Address_Set+0x1c>)
    9f20:	705a      	strb	r2, [r3, #1]
        Object_List[0].Changes_Pending = true;
    9f22:	781a      	ldrb	r2, [r3, #0]
    9f24:	2101      	movs	r1, #1
    9f26:	430a      	orrs	r2, r1
    9f28:	701a      	strb	r2, [r3, #0]
        return true;
    9f2a:	2001      	movs	r0, #1
    9f2c:	e7f5      	b.n	9f1a <Network_Port_MAC_Address_Set+0x6>
    9f2e:	46c0      	nop			; (mov r8, r8)
    9f30:	20001ecc 	.word	0x20001ecc

00009f34 <Network_Port_APDU_Length>:
 */
uint16_t Network_Port_APDU_Length(uint32_t object_instance)
{
    (void)object_instance;
    return MAX_APDU;
}
    9f34:	20f0      	movs	r0, #240	; 0xf0
    9f36:	0040      	lsls	r0, r0, #1
    9f38:	4770      	bx	lr
	...

00009f3c <Network_Port_Link_Speed>:
 * @param  object_instance - object-instance number of the object
 *
 * @return Link_Speed for this network port, or 0 if unknown
 */
float Network_Port_Link_Speed(uint32_t object_instance)
{
    9f3c:	b510      	push	{r4, lr}
    (void)object_instance;
    Object_List[0].Link_Speed = rs485_baud_rate();
    9f3e:	4b03      	ldr	r3, [pc, #12]	; (9f4c <Network_Port_Link_Speed+0x10>)
    9f40:	4798      	blx	r3
    9f42:	4b03      	ldr	r3, [pc, #12]	; (9f50 <Network_Port_Link_Speed+0x14>)
    9f44:	4798      	blx	r3
    9f46:	4b03      	ldr	r3, [pc, #12]	; (9f54 <Network_Port_Link_Speed+0x18>)
    9f48:	6058      	str	r0, [r3, #4]

    return Object_List[0].Link_Speed;
}
    9f4a:	bd10      	pop	{r4, pc}
    9f4c:	0000b30d 	.word	0x0000b30d
    9f50:	0000d7fd 	.word	0x0000d7fd
    9f54:	20001ecc 	.word	0x20001ecc

00009f58 <Network_Port_Link_Speed_Set>:
 * @param object_instance	The object instance number of the object
 * @param value				The new link speed value
 * @return  true if value was set
 */
bool Network_Port_Link_Speed_Set(uint32_t object_instance, float value)
{
    9f58:	b510      	push	{r4, lr}
    9f5a:	1c0c      	adds	r4, r1, #0
    bool status = false;
    uint32_t baud = (uint32_t)value;
    9f5c:	1c08      	adds	r0, r1, #0
    9f5e:	4b12      	ldr	r3, [pc, #72]	; (9fa8 <Network_Port_Link_Speed_Set+0x50>)
    9f60:	4798      	blx	r3

    switch (baud) {
    9f62:	2396      	movs	r3, #150	; 0x96
    9f64:	021b      	lsls	r3, r3, #8
    9f66:	4298      	cmp	r0, r3
    9f68:	d016      	beq.n	9f98 <Network_Port_Link_Speed_Set+0x40>
    9f6a:	d90d      	bls.n	9f88 <Network_Port_Link_Speed_Set+0x30>
    9f6c:	2396      	movs	r3, #150	; 0x96
    9f6e:	025b      	lsls	r3, r3, #9
    9f70:	4298      	cmp	r0, r3
    9f72:	d011      	beq.n	9f98 <Network_Port_Link_Speed_Set+0x40>
    9f74:	23e1      	movs	r3, #225	; 0xe1
    9f76:	025b      	lsls	r3, r3, #9
    9f78:	4298      	cmp	r0, r3
    9f7a:	d00d      	beq.n	9f98 <Network_Port_Link_Speed_Set+0x40>
    9f7c:	23e1      	movs	r3, #225	; 0xe1
    9f7e:	021b      	lsls	r3, r3, #8
    9f80:	4298      	cmp	r0, r3
    9f82:	d009      	beq.n	9f98 <Network_Port_Link_Speed_Set+0x40>
    bool status = false;
    9f84:	2000      	movs	r0, #0
    9f86:	e00e      	b.n	9fa6 <Network_Port_Link_Speed_Set+0x4e>
    switch (baud) {
    9f88:	2396      	movs	r3, #150	; 0x96
    9f8a:	019b      	lsls	r3, r3, #6
    9f8c:	4298      	cmp	r0, r3
    9f8e:	d003      	beq.n	9f98 <Network_Port_Link_Speed_Set+0x40>
    9f90:	2396      	movs	r3, #150	; 0x96
    9f92:	01db      	lsls	r3, r3, #7
    9f94:	4298      	cmp	r0, r3
    9f96:	d1f5      	bne.n	9f84 <Network_Port_Link_Speed_Set+0x2c>
        case 19200:
        case 38400:
        case 57600:
        case 76800:
        case 115200:
            Object_List[0].Link_Speed = value;
    9f98:	4b04      	ldr	r3, [pc, #16]	; (9fac <Network_Port_Link_Speed_Set+0x54>)
    9f9a:	605c      	str	r4, [r3, #4]
            Object_List[0].Changes_Pending = true;
    9f9c:	781a      	ldrb	r2, [r3, #0]
    9f9e:	2101      	movs	r1, #1
    9fa0:	430a      	orrs	r2, r1
    9fa2:	701a      	strb	r2, [r3, #0]
            status = true;
    9fa4:	2001      	movs	r0, #1
            break;
    }

    return status;
}
    9fa6:	bd10      	pop	{r4, pc}
    9fa8:	0000cfe1 	.word	0x0000cfe1
    9fac:	20001ecc 	.word	0x20001ecc

00009fb0 <Network_Port_Changes_Pending>:
 * @brief For a given object instance-number, returns the changes-pending flag
 * @param  object_instance - object-instance number of the object
 * @return  changes-pending property value
 */
bool Network_Port_Changes_Pending(uint32_t object_instance)
{
    9fb0:	b510      	push	{r4, lr}
    bool flag = false;
    unsigned index = 0;

    index = Network_Port_Instance_To_Index(object_instance);
    9fb2:	4b06      	ldr	r3, [pc, #24]	; (9fcc <Network_Port_Changes_Pending+0x1c>)
    9fb4:	4798      	blx	r3
    if (index < BACNET_NETWORK_PORTS_MAX) {
    9fb6:	2800      	cmp	r0, #0
    9fb8:	d105      	bne.n	9fc6 <Network_Port_Changes_Pending+0x16>
        flag = Object_List[index].Changes_Pending;
    9fba:	00c0      	lsls	r0, r0, #3
    9fbc:	4b04      	ldr	r3, [pc, #16]	; (9fd0 <Network_Port_Changes_Pending+0x20>)
    9fbe:	5cc0      	ldrb	r0, [r0, r3]
    9fc0:	07c0      	lsls	r0, r0, #31
    9fc2:	0fc0      	lsrs	r0, r0, #31
    }

    return flag;
}
    9fc4:	bd10      	pop	{r4, pc}
    bool flag = false;
    9fc6:	2000      	movs	r0, #0
    9fc8:	e7fc      	b.n	9fc4 <Network_Port_Changes_Pending+0x14>
    9fca:	46c0      	nop			; (mov r8, r8)
    9fcc:	00009ed1 	.word	0x00009ed1
    9fd0:	20001ecc 	.word	0x20001ecc

00009fd4 <Network_Port_MSTP_Max_Master>:
 * @brief For a given object instance-number, gets the MS/TP Max_Master value
 * @param  object_instance - object-instance number of the object
 * @return MS/TP Max_Master value
 */
uint8_t Network_Port_MSTP_Max_Master(uint32_t object_instance)
{
    9fd4:	b510      	push	{r4, lr}
    (void)object_instance;
    Object_List[0].Max_Master = dlmstp_max_master();
    9fd6:	4b02      	ldr	r3, [pc, #8]	; (9fe0 <Network_Port_MSTP_Max_Master+0xc>)
    9fd8:	4798      	blx	r3
    9fda:	4b02      	ldr	r3, [pc, #8]	; (9fe4 <Network_Port_MSTP_Max_Master+0x10>)
    9fdc:	7098      	strb	r0, [r3, #2]

    return Object_List[0].Max_Master;
}
    9fde:	bd10      	pop	{r4, pc}
    9fe0:	00006cd5 	.word	0x00006cd5
    9fe4:	20001ecc 	.word	0x20001ecc

00009fe8 <Network_Port_MSTP_Max_Master_Set>:
 * @param  value - MS/TP Max_Master value 0..127
 *
 * @return  true if values are within range and property is set.
 */
bool Network_Port_MSTP_Max_Master_Set(uint32_t object_instance, uint8_t value)
{
    9fe8:	b510      	push	{r4, lr}
    9fea:	000c      	movs	r4, r1
    bool status = false;

    (void)object_instance;
    if (value <= dlmstp_max_master_limit()) {
    9fec:	4b06      	ldr	r3, [pc, #24]	; (a008 <Network_Port_MSTP_Max_Master_Set+0x20>)
    9fee:	4798      	blx	r3
    9ff0:	42a0      	cmp	r0, r4
    9ff2:	d307      	bcc.n	a004 <Network_Port_MSTP_Max_Master_Set+0x1c>
        Object_List[0].Max_Master = value;
    9ff4:	4b05      	ldr	r3, [pc, #20]	; (a00c <Network_Port_MSTP_Max_Master_Set+0x24>)
    9ff6:	709c      	strb	r4, [r3, #2]
        Object_List[0].Changes_Pending = true;
    9ff8:	781a      	ldrb	r2, [r3, #0]
    9ffa:	2101      	movs	r1, #1
    9ffc:	430a      	orrs	r2, r1
    9ffe:	701a      	strb	r2, [r3, #0]
        status = true;
    a000:	2001      	movs	r0, #1
    }

    return status;
}
    a002:	bd10      	pop	{r4, pc}
    bool status = false;
    a004:	2000      	movs	r0, #0
    a006:	e7fc      	b.n	a002 <Network_Port_MSTP_Max_Master_Set+0x1a>
    a008:	00006d33 	.word	0x00006d33
    a00c:	20001ecc 	.word	0x20001ecc

0000a010 <Network_Port_MSTP_Max_Info_Frames>:
 * @param  object_instance - object-instance number of the object
 *
 * @return MS/TP Max_Info_Frames value
 */
uint8_t Network_Port_MSTP_Max_Info_Frames(uint32_t object_instance)
{
    a010:	b510      	push	{r4, lr}
    (void)object_instance;
    Object_List[0].Max_Info_Frames = dlmstp_max_info_frames();
    a012:	4b02      	ldr	r3, [pc, #8]	; (a01c <Network_Port_MSTP_Max_Info_Frames+0xc>)
    a014:	4798      	blx	r3
    a016:	4b02      	ldr	r3, [pc, #8]	; (a020 <Network_Port_MSTP_Max_Info_Frames+0x10>)
    a018:	70d8      	strb	r0, [r3, #3]

    return Object_List[0].Max_Info_Frames;
}
    a01a:	bd10      	pop	{r4, pc}
    a01c:	00006cb9 	.word	0x00006cb9
    a020:	20001ecc 	.word	0x20001ecc

0000a024 <Network_Port_MSTP_Max_Info_Frames_Set>:
 *
 * @return  true if values are within range and property is set.
 */
bool Network_Port_MSTP_Max_Info_Frames_Set(
    uint32_t object_instance, uint8_t value)
{
    a024:	b510      	push	{r4, lr}
    a026:	000c      	movs	r4, r1
    bool status = false;

    (void)object_instance;
    if (value <= dlmstp_max_info_frames_limit()) {
    a028:	4b06      	ldr	r3, [pc, #24]	; (a044 <Network_Port_MSTP_Max_Info_Frames_Set+0x20>)
    a02a:	4798      	blx	r3
    a02c:	42a0      	cmp	r0, r4
    a02e:	d307      	bcc.n	a040 <Network_Port_MSTP_Max_Info_Frames_Set+0x1c>
        Object_List[0].Max_Info_Frames = value;
    a030:	4b05      	ldr	r3, [pc, #20]	; (a048 <Network_Port_MSTP_Max_Info_Frames_Set+0x24>)
    a032:	70dc      	strb	r4, [r3, #3]
        Object_List[0].Changes_Pending = true;
    a034:	781a      	ldrb	r2, [r3, #0]
    a036:	2101      	movs	r1, #1
    a038:	430a      	orrs	r2, r1
    a03a:	701a      	strb	r2, [r3, #0]
        status = true;
    a03c:	2001      	movs	r0, #1
    }

    return status;
}
    a03e:	bd10      	pop	{r4, pc}
    bool status = false;
    a040:	2000      	movs	r0, #0
    a042:	e7fc      	b.n	a03e <Network_Port_MSTP_Max_Info_Frames_Set+0x1a>
    a044:	00006d2f 	.word	0x00006d2f
    a048:	20001ecc 	.word	0x20001ecc

0000a04c <Network_Port_Read_Property>:
 *
 * @return number of APDU bytes in the response, or
 * BACNET_STATUS_ERROR on error.
 */
int Network_Port_Read_Property(BACNET_READ_PROPERTY_DATA *rpdata)
{
    a04c:	b530      	push	{r4, r5, lr}
    a04e:	4c84      	ldr	r4, [pc, #528]	; (a260 <Network_Port_Read_Property+0x214>)
    a050:	44a5      	add	sp, r4
    a052:	1e04      	subs	r4, r0, #0
    BACNET_BIT_STRING bit_string;
    BACNET_OCTET_STRING octet_string;
    BACNET_CHARACTER_STRING char_string;
    uint8_t *apdu = NULL;

    if ((rpdata == NULL) || (rpdata->application_data == NULL) ||
    a054:	d100      	bne.n	a058 <Network_Port_Read_Property+0xc>
    a056:	e0fb      	b.n	a250 <Network_Port_Read_Property+0x204>
    a058:	6905      	ldr	r5, [r0, #16]
    a05a:	2d00      	cmp	r5, #0
    a05c:	d100      	bne.n	a060 <Network_Port_Read_Property+0x14>
    a05e:	e0fc      	b.n	a25a <Network_Port_Read_Property+0x20e>
        (rpdata->application_data_len == 0)) {
    a060:	6940      	ldr	r0, [r0, #20]
    if ((rpdata == NULL) || (rpdata->application_data == NULL) ||
    a062:	2800      	cmp	r0, #0
    a064:	d100      	bne.n	a068 <Network_Port_Read_Property+0x1c>
    a066:	e0f4      	b.n	a252 <Network_Port_Read_Property+0x206>
        return 0;
    }
    apdu = rpdata->application_data;
    switch (rpdata->object_property) {
    a068:	68a3      	ldr	r3, [r4, #8]
    a06a:	2b6f      	cmp	r3, #111	; 0x6f
    a06c:	d072      	beq.n	a154 <Network_Port_Read_Property+0x108>
    a06e:	d82d      	bhi.n	a0cc <Network_Port_Read_Property+0x80>
    a070:	2b4b      	cmp	r3, #75	; 0x4b
    a072:	d064      	beq.n	a13e <Network_Port_Read_Property+0xf2>
    a074:	d90f      	bls.n	a096 <Network_Port_Read_Property+0x4a>
    a076:	2b4f      	cmp	r3, #79	; 0x4f
    a078:	d067      	beq.n	a14a <Network_Port_Read_Property+0xfe>
    a07a:	d91c      	bls.n	a0b6 <Network_Port_Read_Property+0x6a>
    a07c:	2b51      	cmp	r3, #81	; 0x51
    a07e:	d100      	bne.n	a082 <Network_Port_Read_Property+0x36>
    a080:	e09a      	b.n	a1b8 <Network_Port_Read_Property+0x16c>
    a082:	2b67      	cmp	r3, #103	; 0x67
    a084:	d110      	bne.n	a0a8 <Network_Port_Read_Property+0x5c>
            }
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
            break;
        case PROP_RELIABILITY:
            apdu_len = encode_application_enumerated(
                &apdu[0], Network_Port_Reliability(rpdata->object_instance));
    a086:	6860      	ldr	r0, [r4, #4]
    a088:	4b76      	ldr	r3, [pc, #472]	; (a264 <Network_Port_Read_Property+0x218>)
    a08a:	4798      	blx	r3
    a08c:	0001      	movs	r1, r0
            apdu_len = encode_application_enumerated(
    a08e:	0028      	movs	r0, r5
    a090:	4b75      	ldr	r3, [pc, #468]	; (a268 <Network_Port_Read_Property+0x21c>)
    a092:	4798      	blx	r3
            break;
    a094:	e0dd      	b.n	a252 <Network_Port_Read_Property+0x206>
    switch (rpdata->object_property) {
    a096:	2b3f      	cmp	r3, #63	; 0x3f
    a098:	d100      	bne.n	a09c <Network_Port_Read_Property+0x50>
    a09a:	e0d0      	b.n	a23e <Network_Port_Read_Property+0x1f2>
    a09c:	2b40      	cmp	r3, #64	; 0x40
    a09e:	d100      	bne.n	a0a2 <Network_Port_Read_Property+0x56>
    a0a0:	e0c4      	b.n	a22c <Network_Port_Read_Property+0x1e0>
    a0a2:	2b3e      	cmp	r3, #62	; 0x3e
    a0a4:	d100      	bne.n	a0a8 <Network_Port_Read_Property+0x5c>
    a0a6:	e0a8      	b.n	a1fa <Network_Port_Read_Property+0x1ae>
        case PROP_MAX_INFO_FRAMES:
            apdu_len = encode_application_unsigned(&apdu[0],
                Network_Port_MSTP_Max_Info_Frames(rpdata->object_instance));
            break;
        default:
            rpdata->error_class = ERROR_CLASS_PROPERTY;
    a0a8:	2302      	movs	r3, #2
    a0aa:	8323      	strh	r3, [r4, #24]
            rpdata->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    a0ac:	331e      	adds	r3, #30
    a0ae:	8363      	strh	r3, [r4, #26]
            apdu_len = BACNET_STATUS_ERROR;
    a0b0:	2001      	movs	r0, #1
    a0b2:	4240      	negs	r0, r0
            break;
    a0b4:	e0cd      	b.n	a252 <Network_Port_Read_Property+0x206>
    switch (rpdata->object_property) {
    a0b6:	2b4d      	cmp	r3, #77	; 0x4d
    a0b8:	d1f6      	bne.n	a0a8 <Network_Port_Read_Property+0x5c>
            Network_Port_Object_Name(rpdata->object_instance, &char_string);
    a0ba:	6860      	ldr	r0, [r4, #4]
    a0bc:	4669      	mov	r1, sp
    a0be:	4b6b      	ldr	r3, [pc, #428]	; (a26c <Network_Port_Read_Property+0x220>)
    a0c0:	4798      	blx	r3
            apdu_len =
    a0c2:	4669      	mov	r1, sp
    a0c4:	0028      	movs	r0, r5
    a0c6:	4b6a      	ldr	r3, [pc, #424]	; (a270 <Network_Port_Read_Property+0x224>)
    a0c8:	4798      	blx	r3
            break;
    a0ca:	e0c2      	b.n	a252 <Network_Port_Read_Property+0x206>
    switch (rpdata->object_property) {
    a0cc:	22a8      	movs	r2, #168	; 0xa8
    a0ce:	32ff      	adds	r2, #255	; 0xff
    a0d0:	4293      	cmp	r3, r2
    a0d2:	d100      	bne.n	a0d6 <Network_Port_Read_Property+0x8a>
    a0d4:	e088      	b.n	a1e8 <Network_Port_Read_Property+0x19c>
    a0d6:	d910      	bls.n	a0fa <Network_Port_Read_Property+0xae>
    a0d8:	22d5      	movs	r2, #213	; 0xd5
    a0da:	0052      	lsls	r2, r2, #1
    a0dc:	4293      	cmp	r3, r2
    a0de:	d07b      	beq.n	a1d8 <Network_Port_Read_Property+0x18c>
    a0e0:	d920      	bls.n	a124 <Network_Port_Read_Property+0xd8>
    a0e2:	22ac      	movs	r2, #172	; 0xac
    a0e4:	32ff      	adds	r2, #255	; 0xff
    a0e6:	4293      	cmp	r3, r2
    a0e8:	d06e      	beq.n	a1c8 <Network_Port_Read_Property+0x17c>
    a0ea:	3237      	adds	r2, #55	; 0x37
    a0ec:	4293      	cmp	r3, r2
    a0ee:	d1db      	bne.n	a0a8 <Network_Port_Read_Property+0x5c>
            apdu_len = encode_application_enumerated(
    a0f0:	2100      	movs	r1, #0
    a0f2:	0028      	movs	r0, r5
    a0f4:	4b5c      	ldr	r3, [pc, #368]	; (a268 <Network_Port_Read_Property+0x21c>)
    a0f6:	4798      	blx	r3
            break;
    a0f8:	e0ab      	b.n	a252 <Network_Port_Read_Property+0x206>
    switch (rpdata->object_property) {
    a0fa:	3a07      	subs	r2, #7
    a0fc:	4293      	cmp	r3, r2
    a0fe:	d100      	bne.n	a102 <Network_Port_Read_Property+0xb6>
    a100:	e08c      	b.n	a21c <Network_Port_Read_Property+0x1d0>
    a102:	3204      	adds	r2, #4
    a104:	4293      	cmp	r3, r2
    a106:	d100      	bne.n	a10a <Network_Port_Read_Property+0xbe>
    a108:	e080      	b.n	a20c <Network_Port_Read_Property+0x1c0>
    a10a:	2290      	movs	r2, #144	; 0x90
    a10c:	32ff      	adds	r2, #255	; 0xff
    a10e:	4293      	cmp	r3, r2
    a110:	d1ca      	bne.n	a0a8 <Network_Port_Read_Property+0x5c>
                &apdu[0], Network_Port_APDU_Length(rpdata->object_instance));
    a112:	6860      	ldr	r0, [r4, #4]
    a114:	4b57      	ldr	r3, [pc, #348]	; (a274 <Network_Port_Read_Property+0x228>)
    a116:	4798      	blx	r3
    a118:	0002      	movs	r2, r0
            apdu_len = encode_application_unsigned(
    a11a:	2300      	movs	r3, #0
    a11c:	0028      	movs	r0, r5
    a11e:	4956      	ldr	r1, [pc, #344]	; (a278 <Network_Port_Read_Property+0x22c>)
    a120:	4788      	blx	r1
            break;
    a122:	e096      	b.n	a252 <Network_Port_Read_Property+0x206>
    switch (rpdata->object_property) {
    a124:	22aa      	movs	r2, #170	; 0xaa
    a126:	32ff      	adds	r2, #255	; 0xff
    a128:	4293      	cmp	r3, r2
    a12a:	d1bd      	bne.n	a0a8 <Network_Port_Read_Property+0x5c>
                &apdu[0], Network_Port_Network_Number(rpdata->object_instance));
    a12c:	6860      	ldr	r0, [r4, #4]
    a12e:	4b53      	ldr	r3, [pc, #332]	; (a27c <Network_Port_Read_Property+0x230>)
    a130:	4798      	blx	r3
    a132:	0002      	movs	r2, r0
            apdu_len = encode_application_unsigned(
    a134:	2300      	movs	r3, #0
    a136:	0028      	movs	r0, r5
    a138:	494f      	ldr	r1, [pc, #316]	; (a278 <Network_Port_Read_Property+0x22c>)
    a13a:	4788      	blx	r1
            break;
    a13c:	e089      	b.n	a252 <Network_Port_Read_Property+0x206>
            apdu_len = encode_application_object_id(
    a13e:	6862      	ldr	r2, [r4, #4]
    a140:	2138      	movs	r1, #56	; 0x38
    a142:	0028      	movs	r0, r5
    a144:	4b4e      	ldr	r3, [pc, #312]	; (a280 <Network_Port_Read_Property+0x234>)
    a146:	4798      	blx	r3
            break;
    a148:	e083      	b.n	a252 <Network_Port_Read_Property+0x206>
            apdu_len =
    a14a:	2138      	movs	r1, #56	; 0x38
    a14c:	0028      	movs	r0, r5
    a14e:	4b46      	ldr	r3, [pc, #280]	; (a268 <Network_Port_Read_Property+0x21c>)
    a150:	4798      	blx	r3
            break;
    a152:	e07e      	b.n	a252 <Network_Port_Read_Property+0x206>
            bitstring_init(&bit_string);
    a154:	a8f0      	add	r0, sp, #960	; 0x3c0
    a156:	4b4b      	ldr	r3, [pc, #300]	; (a284 <Network_Port_Read_Property+0x238>)
    a158:	4798      	blx	r3
            bitstring_set_bit(&bit_string, STATUS_FLAG_IN_ALARM, false);
    a15a:	2200      	movs	r2, #0
    a15c:	2100      	movs	r1, #0
    a15e:	a8f0      	add	r0, sp, #960	; 0x3c0
    a160:	4b49      	ldr	r3, [pc, #292]	; (a288 <Network_Port_Read_Property+0x23c>)
    a162:	4798      	blx	r3
            if (Network_Port_Reliability(rpdata->object_instance) ==
    a164:	6860      	ldr	r0, [r4, #4]
    a166:	4b3f      	ldr	r3, [pc, #252]	; (a264 <Network_Port_Read_Property+0x218>)
    a168:	4798      	blx	r3
    a16a:	2800      	cmp	r0, #0
    a16c:	d118      	bne.n	a1a0 <Network_Port_Read_Property+0x154>
                bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, false);
    a16e:	2200      	movs	r2, #0
    a170:	2101      	movs	r1, #1
    a172:	a8f0      	add	r0, sp, #960	; 0x3c0
    a174:	4b44      	ldr	r3, [pc, #272]	; (a288 <Network_Port_Read_Property+0x23c>)
    a176:	4798      	blx	r3
            bitstring_set_bit(&bit_string, STATUS_FLAG_OVERRIDDEN, false);
    a178:	2200      	movs	r2, #0
    a17a:	2102      	movs	r1, #2
    a17c:	a8f0      	add	r0, sp, #960	; 0x3c0
    a17e:	4b42      	ldr	r3, [pc, #264]	; (a288 <Network_Port_Read_Property+0x23c>)
    a180:	4798      	blx	r3
            if (Network_Port_Out_Of_Service(rpdata->object_instance)) {
    a182:	6860      	ldr	r0, [r4, #4]
    a184:	4b41      	ldr	r3, [pc, #260]	; (a28c <Network_Port_Read_Property+0x240>)
    a186:	4798      	blx	r3
    a188:	2800      	cmp	r0, #0
    a18a:	d00f      	beq.n	a1ac <Network_Port_Read_Property+0x160>
                bitstring_set_bit(
    a18c:	2201      	movs	r2, #1
    a18e:	2103      	movs	r1, #3
    a190:	a8f0      	add	r0, sp, #960	; 0x3c0
    a192:	4b3d      	ldr	r3, [pc, #244]	; (a288 <Network_Port_Read_Property+0x23c>)
    a194:	4798      	blx	r3
            apdu_len = encode_application_bitstring(&apdu[0], &bit_string);
    a196:	a9f0      	add	r1, sp, #960	; 0x3c0
    a198:	0028      	movs	r0, r5
    a19a:	4b3d      	ldr	r3, [pc, #244]	; (a290 <Network_Port_Read_Property+0x244>)
    a19c:	4798      	blx	r3
            break;
    a19e:	e058      	b.n	a252 <Network_Port_Read_Property+0x206>
                bitstring_set_bit(&bit_string, STATUS_FLAG_FAULT, true);
    a1a0:	2201      	movs	r2, #1
    a1a2:	2101      	movs	r1, #1
    a1a4:	a8f0      	add	r0, sp, #960	; 0x3c0
    a1a6:	4b38      	ldr	r3, [pc, #224]	; (a288 <Network_Port_Read_Property+0x23c>)
    a1a8:	4798      	blx	r3
    a1aa:	e7e5      	b.n	a178 <Network_Port_Read_Property+0x12c>
                bitstring_set_bit(
    a1ac:	2200      	movs	r2, #0
    a1ae:	2103      	movs	r1, #3
    a1b0:	a8f0      	add	r0, sp, #960	; 0x3c0
    a1b2:	4b35      	ldr	r3, [pc, #212]	; (a288 <Network_Port_Read_Property+0x23c>)
    a1b4:	4798      	blx	r3
    a1b6:	e7ee      	b.n	a196 <Network_Port_Read_Property+0x14a>
            apdu_len = encode_application_boolean(
    a1b8:	6860      	ldr	r0, [r4, #4]
    a1ba:	4b34      	ldr	r3, [pc, #208]	; (a28c <Network_Port_Read_Property+0x240>)
    a1bc:	4798      	blx	r3
    a1be:	0001      	movs	r1, r0
    a1c0:	0028      	movs	r0, r5
    a1c2:	4b34      	ldr	r3, [pc, #208]	; (a294 <Network_Port_Read_Property+0x248>)
    a1c4:	4798      	blx	r3
            break;
    a1c6:	e044      	b.n	a252 <Network_Port_Read_Property+0x206>
                &apdu[0], Network_Port_Type(rpdata->object_instance));
    a1c8:	6860      	ldr	r0, [r4, #4]
    a1ca:	4b33      	ldr	r3, [pc, #204]	; (a298 <Network_Port_Read_Property+0x24c>)
    a1cc:	4798      	blx	r3
    a1ce:	0001      	movs	r1, r0
            apdu_len = encode_application_enumerated(
    a1d0:	0028      	movs	r0, r5
    a1d2:	4b25      	ldr	r3, [pc, #148]	; (a268 <Network_Port_Read_Property+0x21c>)
    a1d4:	4798      	blx	r3
            break;
    a1d6:	e03c      	b.n	a252 <Network_Port_Read_Property+0x206>
                &apdu[0], Network_Port_Quality(rpdata->object_instance));
    a1d8:	6860      	ldr	r0, [r4, #4]
    a1da:	4b30      	ldr	r3, [pc, #192]	; (a29c <Network_Port_Read_Property+0x250>)
    a1dc:	4798      	blx	r3
    a1de:	0001      	movs	r1, r0
            apdu_len = encode_application_enumerated(
    a1e0:	0028      	movs	r0, r5
    a1e2:	4b21      	ldr	r3, [pc, #132]	; (a268 <Network_Port_Read_Property+0x21c>)
    a1e4:	4798      	blx	r3
            break;
    a1e6:	e034      	b.n	a252 <Network_Port_Read_Property+0x206>
            Network_Port_MAC_Address(rpdata->object_instance, &octet_string);
    a1e8:	6860      	ldr	r0, [r4, #4]
    a1ea:	a978      	add	r1, sp, #480	; 0x1e0
    a1ec:	4b2c      	ldr	r3, [pc, #176]	; (a2a0 <Network_Port_Read_Property+0x254>)
    a1ee:	4798      	blx	r3
            apdu_len = encode_application_octet_string(&apdu[0], &octet_string);
    a1f0:	a978      	add	r1, sp, #480	; 0x1e0
    a1f2:	0028      	movs	r0, r5
    a1f4:	4b2b      	ldr	r3, [pc, #172]	; (a2a4 <Network_Port_Read_Property+0x258>)
    a1f6:	4798      	blx	r3
            break;
    a1f8:	e02b      	b.n	a252 <Network_Port_Read_Property+0x206>
                &apdu[0], Network_Port_APDU_Length(rpdata->object_instance));
    a1fa:	6860      	ldr	r0, [r4, #4]
    a1fc:	4b1d      	ldr	r3, [pc, #116]	; (a274 <Network_Port_Read_Property+0x228>)
    a1fe:	4798      	blx	r3
    a200:	0002      	movs	r2, r0
            apdu_len = encode_application_unsigned(
    a202:	2300      	movs	r3, #0
    a204:	0028      	movs	r0, r5
    a206:	491c      	ldr	r1, [pc, #112]	; (a278 <Network_Port_Read_Property+0x22c>)
    a208:	4788      	blx	r1
            break;
    a20a:	e022      	b.n	a252 <Network_Port_Read_Property+0x206>
            apdu_len = encode_application_real(
    a20c:	6860      	ldr	r0, [r4, #4]
    a20e:	4b26      	ldr	r3, [pc, #152]	; (a2a8 <Network_Port_Read_Property+0x25c>)
    a210:	4798      	blx	r3
    a212:	1c01      	adds	r1, r0, #0
    a214:	0028      	movs	r0, r5
    a216:	4b25      	ldr	r3, [pc, #148]	; (a2ac <Network_Port_Read_Property+0x260>)
    a218:	4798      	blx	r3
            break;
    a21a:	e01a      	b.n	a252 <Network_Port_Read_Property+0x206>
            apdu_len = encode_application_boolean(&apdu[0],
    a21c:	6860      	ldr	r0, [r4, #4]
    a21e:	4b24      	ldr	r3, [pc, #144]	; (a2b0 <Network_Port_Read_Property+0x264>)
    a220:	4798      	blx	r3
    a222:	0001      	movs	r1, r0
    a224:	0028      	movs	r0, r5
    a226:	4b1b      	ldr	r3, [pc, #108]	; (a294 <Network_Port_Read_Property+0x248>)
    a228:	4798      	blx	r3
            break;
    a22a:	e012      	b.n	a252 <Network_Port_Read_Property+0x206>
                Network_Port_MSTP_Max_Master(rpdata->object_instance));
    a22c:	6860      	ldr	r0, [r4, #4]
    a22e:	4b21      	ldr	r3, [pc, #132]	; (a2b4 <Network_Port_Read_Property+0x268>)
    a230:	4798      	blx	r3
    a232:	0002      	movs	r2, r0
            apdu_len = encode_application_unsigned(&apdu[0],
    a234:	2300      	movs	r3, #0
    a236:	0028      	movs	r0, r5
    a238:	490f      	ldr	r1, [pc, #60]	; (a278 <Network_Port_Read_Property+0x22c>)
    a23a:	4788      	blx	r1
            break;
    a23c:	e009      	b.n	a252 <Network_Port_Read_Property+0x206>
                Network_Port_MSTP_Max_Info_Frames(rpdata->object_instance));
    a23e:	6860      	ldr	r0, [r4, #4]
    a240:	4b1d      	ldr	r3, [pc, #116]	; (a2b8 <Network_Port_Read_Property+0x26c>)
    a242:	4798      	blx	r3
    a244:	0002      	movs	r2, r0
            apdu_len = encode_application_unsigned(&apdu[0],
    a246:	2300      	movs	r3, #0
    a248:	0028      	movs	r0, r5
    a24a:	490b      	ldr	r1, [pc, #44]	; (a278 <Network_Port_Read_Property+0x22c>)
    a24c:	4788      	blx	r1
            break;
    a24e:	e000      	b.n	a252 <Network_Port_Read_Property+0x206>
        return 0;
    a250:	2000      	movs	r0, #0
    }

    return apdu_len;
}
    a252:	23f5      	movs	r3, #245	; 0xf5
    a254:	009b      	lsls	r3, r3, #2
    a256:	449d      	add	sp, r3
    a258:	bd30      	pop	{r4, r5, pc}
        return 0;
    a25a:	2000      	movs	r0, #0
    a25c:	e7f9      	b.n	a252 <Network_Port_Read_Property+0x206>
    a25e:	46c0      	nop			; (mov r8, r8)
    a260:	fffffc2c 	.word	0xfffffc2c
    a264:	00009ee1 	.word	0x00009ee1
    a268:	000036f1 	.word	0x000036f1
    a26c:	00009e95 	.word	0x00009e95
    a270:	000032dd 	.word	0x000032dd
    a274:	00009f35 	.word	0x00009f35
    a278:	000035e1 	.word	0x000035e1
    a27c:	00009ee9 	.word	0x00009ee9
    a280:	0000316d 	.word	0x0000316d
    a284:	00003e71 	.word	0x00003e71
    a288:	00003e85 	.word	0x00003e85
    a28c:	00009edd 	.word	0x00009edd
    a290:	000030b9 	.word	0x000030b9
    a294:	00002fad 	.word	0x00002fad
    a298:	00009ee5 	.word	0x00009ee5
    a29c:	00009eed 	.word	0x00009eed
    a2a0:	00009ef1 	.word	0x00009ef1
    a2a4:	000031c9 	.word	0x000031c9
    a2a8:	00009f3d 	.word	0x00009f3d
    a2ac:	000037d9 	.word	0x000037d9
    a2b0:	00009fb1 	.word	0x00009fb1
    a2b4:	00009fd5 	.word	0x00009fd5
    a2b8:	0000a011 	.word	0x0000a011

0000a2bc <Network_Port_Write_Property>:
 * requested data and space for the reply, or error response.
 *
 * @return false if an error is loaded, true if no errors
 */
bool Network_Port_Write_Property(BACNET_WRITE_PROPERTY_DATA *wp_data)
{
    a2bc:	b530      	push	{r4, r5, lr}
    a2be:	b0fd      	sub	sp, #500	; 0x1f4
    a2c0:	0005      	movs	r5, r0
    bool status = false; /* return value */
    int len = 0;
    BACNET_APPLICATION_DATA_VALUE value;

    if (!Network_Port_Valid_Instance(wp_data->object_instance)) {
    a2c2:	6800      	ldr	r0, [r0, #0]
    a2c4:	4b8f      	ldr	r3, [pc, #572]	; (a504 <Network_Port_Write_Property+0x248>)
    a2c6:	4798      	blx	r3
    a2c8:	1e04      	subs	r4, r0, #0
    a2ca:	d109      	bne.n	a2e0 <Network_Port_Write_Property+0x24>
        wp_data->error_class = ERROR_CLASS_OBJECT;
    a2cc:	2201      	movs	r2, #1
    a2ce:	23fb      	movs	r3, #251	; 0xfb
    a2d0:	005b      	lsls	r3, r3, #1
    a2d2:	52ea      	strh	r2, [r5, r3]
        wp_data->error_code = ERROR_CODE_UNKNOWN_OBJECT;
    a2d4:	321e      	adds	r2, #30
    a2d6:	3302      	adds	r3, #2
    a2d8:	52ea      	strh	r2, [r5, r3]
            wp_data->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
            break;
    }

    return status;
}
    a2da:	0020      	movs	r0, r4
    a2dc:	b07d      	add	sp, #500	; 0x1f4
    a2de:	bd30      	pop	{r4, r5, pc}
        wp_data->application_data, wp_data->application_data_len, &value);
    a2e0:	0028      	movs	r0, r5
    a2e2:	3010      	adds	r0, #16
    a2e4:	23f8      	movs	r3, #248	; 0xf8
    a2e6:	005b      	lsls	r3, r3, #1
    a2e8:	58e9      	ldr	r1, [r5, r3]
    len = bacapp_decode_application_data(
    a2ea:	466a      	mov	r2, sp
    a2ec:	4b86      	ldr	r3, [pc, #536]	; (a508 <Network_Port_Write_Property+0x24c>)
    a2ee:	4798      	blx	r3
    if (len < 0) {
    a2f0:	2800      	cmp	r0, #0
    a2f2:	db21      	blt.n	a338 <Network_Port_Write_Property+0x7c>
    if ((wp_data->object_property != PROP_LINK_SPEEDS) &&
    a2f4:	68ab      	ldr	r3, [r5, #8]
    a2f6:	22a6      	movs	r2, #166	; 0xa6
    a2f8:	32ff      	adds	r2, #255	; 0xff
    a2fa:	4293      	cmp	r3, r2
    a2fc:	d025      	beq.n	a34a <Network_Port_Write_Property+0x8e>
    a2fe:	3a0f      	subs	r2, #15
    a300:	4293      	cmp	r3, r2
    a302:	d022      	beq.n	a34a <Network_Port_Write_Property+0x8e>
        (wp_data->object_property != PROP_IP_DNS_SERVER) &&
    a304:	22ba      	movs	r2, #186	; 0xba
    a306:	32ff      	adds	r2, #255	; 0xff
    a308:	4293      	cmp	r3, r2
    a30a:	d01e      	beq.n	a34a <Network_Port_Write_Property+0x8e>
        (wp_data->object_property != PROP_IPV6_DNS_SERVER) &&
    a30c:	2260      	movs	r2, #96	; 0x60
    a30e:	32ff      	adds	r2, #255	; 0xff
    a310:	4293      	cmp	r3, r2
    a312:	d01a      	beq.n	a34a <Network_Port_Write_Property+0x8e>
        (wp_data->object_property != PROP_EVENT_MESSAGE_TEXTS) &&
    a314:	3201      	adds	r2, #1
    a316:	4293      	cmp	r3, r2
    a318:	d017      	beq.n	a34a <Network_Port_Write_Property+0x8e>
        (wp_data->object_property != PROP_EVENT_MESSAGE_TEXTS_CONFIG) &&
    a31a:	3286      	adds	r2, #134	; 0x86
    a31c:	4293      	cmp	r3, r2
    a31e:	d014      	beq.n	a34a <Network_Port_Write_Property+0x8e>
        (wp_data->object_property != PROP_TAGS) &&
    a320:	68ea      	ldr	r2, [r5, #12]
    a322:	3201      	adds	r2, #1
    a324:	d011      	beq.n	a34a <Network_Port_Write_Property+0x8e>
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    a326:	2202      	movs	r2, #2
    a328:	23fb      	movs	r3, #251	; 0xfb
    a32a:	005b      	lsls	r3, r3, #1
    a32c:	52ea      	strh	r2, [r5, r3]
        wp_data->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
    a32e:	3230      	adds	r2, #48	; 0x30
    a330:	3302      	adds	r3, #2
    a332:	52ea      	strh	r2, [r5, r3]
        return false;
    a334:	2400      	movs	r4, #0
    a336:	e7d0      	b.n	a2da <Network_Port_Write_Property+0x1e>
        wp_data->error_class = ERROR_CLASS_PROPERTY;
    a338:	2202      	movs	r2, #2
    a33a:	23fb      	movs	r3, #251	; 0xfb
    a33c:	005b      	lsls	r3, r3, #1
    a33e:	52ea      	strh	r2, [r5, r3]
        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    a340:	3223      	adds	r2, #35	; 0x23
    a342:	3302      	adds	r3, #2
    a344:	52ea      	strh	r2, [r5, r3]
        return false;
    a346:	2400      	movs	r4, #0
    a348:	e7c7      	b.n	a2da <Network_Port_Write_Property+0x1e>
    switch (wp_data->object_property) {
    a34a:	2b67      	cmp	r3, #103	; 0x67
    a34c:	d053      	beq.n	a3f6 <Network_Port_Write_Property+0x13a>
    a34e:	d825      	bhi.n	a39c <Network_Port_Write_Property+0xe0>
    a350:	2b4b      	cmp	r3, #75	; 0x4b
    a352:	d050      	beq.n	a3f6 <Network_Port_Write_Property+0x13a>
    a354:	d81b      	bhi.n	a38e <Network_Port_Write_Property+0xd2>
    a356:	2b3f      	cmp	r3, #63	; 0x3f
    a358:	d076      	beq.n	a448 <Network_Port_Write_Property+0x18c>
    a35a:	2b40      	cmp	r3, #64	; 0x40
    a35c:	d10c      	bne.n	a378 <Network_Port_Write_Property+0xbc>
            if (value.tag == BACNET_APPLICATION_TAG_UNSIGNED_INT) {
    a35e:	466b      	mov	r3, sp
    a360:	789b      	ldrb	r3, [r3, #2]
    a362:	2b02      	cmp	r3, #2
    a364:	d050      	beq.n	a408 <Network_Port_Write_Property+0x14c>
                wp_data->error_class = ERROR_CLASS_PROPERTY;
    a366:	2202      	movs	r2, #2
    a368:	23fb      	movs	r3, #251	; 0xfb
    a36a:	005b      	lsls	r3, r3, #1
    a36c:	52ea      	strh	r2, [r5, r3]
                wp_data->error_code = ERROR_CODE_INVALID_DATA_TYPE;
    a36e:	3207      	adds	r2, #7
    a370:	3302      	adds	r3, #2
    a372:	52ea      	strh	r2, [r5, r3]
    bool status = false; /* return value */
    a374:	2400      	movs	r4, #0
    a376:	e7b0      	b.n	a2da <Network_Port_Write_Property+0x1e>
    switch (wp_data->object_property) {
    a378:	2b3e      	cmp	r3, #62	; 0x3e
    a37a:	d03c      	beq.n	a3f6 <Network_Port_Write_Property+0x13a>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    a37c:	2202      	movs	r2, #2
    a37e:	23fb      	movs	r3, #251	; 0xfb
    a380:	005b      	lsls	r3, r3, #1
    a382:	52ea      	strh	r2, [r5, r3]
            wp_data->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    a384:	321e      	adds	r2, #30
    a386:	3302      	adds	r3, #2
    a388:	52ea      	strh	r2, [r5, r3]
    bool status = false; /* return value */
    a38a:	2400      	movs	r4, #0
            break;
    a38c:	e7a5      	b.n	a2da <Network_Port_Write_Property+0x1e>
    switch (wp_data->object_property) {
    a38e:	2b4f      	cmp	r3, #79	; 0x4f
    a390:	d031      	beq.n	a3f6 <Network_Port_Write_Property+0x13a>
    a392:	2b51      	cmp	r3, #81	; 0x51
    a394:	d02f      	beq.n	a3f6 <Network_Port_Write_Property+0x13a>
    a396:	2b4d      	cmp	r3, #77	; 0x4d
    a398:	d1f0      	bne.n	a37c <Network_Port_Write_Property+0xc0>
    a39a:	e02c      	b.n	a3f6 <Network_Port_Write_Property+0x13a>
    a39c:	22d2      	movs	r2, #210	; 0xd2
    a39e:	0052      	lsls	r2, r2, #1
    a3a0:	4293      	cmp	r3, r2
    a3a2:	d07d      	beq.n	a4a0 <Network_Port_Write_Property+0x1e4>
    a3a4:	d919      	bls.n	a3da <Network_Port_Write_Property+0x11e>
    a3a6:	22ac      	movs	r2, #172	; 0xac
    a3a8:	32ff      	adds	r2, #255	; 0xff
    a3aa:	4293      	cmp	r3, r2
    a3ac:	d81f      	bhi.n	a3ee <Network_Port_Write_Property+0x132>
    a3ae:	22aa      	movs	r2, #170	; 0xaa
    a3b0:	32ff      	adds	r2, #255	; 0xff
    a3b2:	4293      	cmp	r3, r2
    a3b4:	d21f      	bcs.n	a3f6 <Network_Port_Write_Property+0x13a>
    a3b6:	22a8      	movs	r2, #168	; 0xa8
    a3b8:	32ff      	adds	r2, #255	; 0xff
    a3ba:	4293      	cmp	r3, r2
    a3bc:	d1de      	bne.n	a37c <Network_Port_Write_Property+0xc0>
            if (value.tag == BACNET_APPLICATION_TAG_OCTET_STRING) {
    a3be:	466b      	mov	r3, sp
    a3c0:	789b      	ldrb	r3, [r3, #2]
    a3c2:	2b06      	cmp	r3, #6
    a3c4:	d100      	bne.n	a3c8 <Network_Port_Write_Property+0x10c>
    a3c6:	e086      	b.n	a4d6 <Network_Port_Write_Property+0x21a>
                wp_data->error_class = ERROR_CLASS_PROPERTY;
    a3c8:	2202      	movs	r2, #2
    a3ca:	23fb      	movs	r3, #251	; 0xfb
    a3cc:	005b      	lsls	r3, r3, #1
    a3ce:	52ea      	strh	r2, [r5, r3]
                wp_data->error_code = ERROR_CODE_INVALID_DATA_TYPE;
    a3d0:	3207      	adds	r2, #7
    a3d2:	3302      	adds	r3, #2
    a3d4:	52ea      	strh	r2, [r5, r3]
    bool status = false; /* return value */
    a3d6:	2400      	movs	r4, #0
    a3d8:	e77f      	b.n	a2da <Network_Port_Write_Property+0x1e>
    switch (wp_data->object_property) {
    a3da:	2290      	movs	r2, #144	; 0x90
    a3dc:	32ff      	adds	r2, #255	; 0xff
    a3de:	4293      	cmp	r3, r2
    a3e0:	d009      	beq.n	a3f6 <Network_Port_Write_Property+0x13a>
    a3e2:	3211      	adds	r2, #17
    a3e4:	4293      	cmp	r3, r2
    a3e6:	d006      	beq.n	a3f6 <Network_Port_Write_Property+0x13a>
    a3e8:	2b6f      	cmp	r3, #111	; 0x6f
    a3ea:	d1c7      	bne.n	a37c <Network_Port_Write_Property+0xc0>
    a3ec:	e003      	b.n	a3f6 <Network_Port_Write_Property+0x13a>
    a3ee:	22f1      	movs	r2, #241	; 0xf1
    a3f0:	0052      	lsls	r2, r2, #1
    a3f2:	4293      	cmp	r3, r2
    a3f4:	d1c2      	bne.n	a37c <Network_Port_Write_Property+0xc0>
            wp_data->error_class = ERROR_CLASS_PROPERTY;
    a3f6:	2202      	movs	r2, #2
    a3f8:	23fb      	movs	r3, #251	; 0xfb
    a3fa:	005b      	lsls	r3, r3, #1
    a3fc:	52ea      	strh	r2, [r5, r3]
            wp_data->error_code = ERROR_CODE_WRITE_ACCESS_DENIED;
    a3fe:	3226      	adds	r2, #38	; 0x26
    a400:	3302      	adds	r3, #2
    a402:	52ea      	strh	r2, [r5, r3]
    bool status = false; /* return value */
    a404:	2400      	movs	r4, #0
            break;
    a406:	e768      	b.n	a2da <Network_Port_Write_Property+0x1e>
                if (value.type.Unsigned_Int <= 255) {
    a408:	9902      	ldr	r1, [sp, #8]
    a40a:	9b03      	ldr	r3, [sp, #12]
    a40c:	2b00      	cmp	r3, #0
    a40e:	d008      	beq.n	a422 <Network_Port_Write_Property+0x166>
                    wp_data->error_class = ERROR_CLASS_PROPERTY;
    a410:	2202      	movs	r2, #2
    a412:	23fb      	movs	r3, #251	; 0xfb
    a414:	005b      	lsls	r3, r3, #1
    a416:	52ea      	strh	r2, [r5, r3]
                    wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    a418:	3223      	adds	r2, #35	; 0x23
    a41a:	3302      	adds	r3, #2
    a41c:	52ea      	strh	r2, [r5, r3]
    bool status = false; /* return value */
    a41e:	2400      	movs	r4, #0
    a420:	e75b      	b.n	a2da <Network_Port_Write_Property+0x1e>
                if (value.type.Unsigned_Int <= 255) {
    a422:	2b00      	cmp	r3, #0
    a424:	d101      	bne.n	a42a <Network_Port_Write_Property+0x16e>
    a426:	29ff      	cmp	r1, #255	; 0xff
    a428:	d8f2      	bhi.n	a410 <Network_Port_Write_Property+0x154>
                    status = Network_Port_MSTP_Max_Master_Set(
    a42a:	b2c9      	uxtb	r1, r1
    a42c:	6828      	ldr	r0, [r5, #0]
    a42e:	4b37      	ldr	r3, [pc, #220]	; (a50c <Network_Port_Write_Property+0x250>)
    a430:	4798      	blx	r3
    a432:	1e04      	subs	r4, r0, #0
                    if (!status) {
    a434:	d000      	beq.n	a438 <Network_Port_Write_Property+0x17c>
    a436:	e750      	b.n	a2da <Network_Port_Write_Property+0x1e>
                        wp_data->error_class = ERROR_CLASS_PROPERTY;
    a438:	2202      	movs	r2, #2
    a43a:	23fb      	movs	r3, #251	; 0xfb
    a43c:	005b      	lsls	r3, r3, #1
    a43e:	52ea      	strh	r2, [r5, r3]
                        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    a440:	3223      	adds	r2, #35	; 0x23
    a442:	3302      	adds	r3, #2
    a444:	52ea      	strh	r2, [r5, r3]
    a446:	e748      	b.n	a2da <Network_Port_Write_Property+0x1e>
            if (value.tag == BACNET_APPLICATION_TAG_UNSIGNED_INT) {
    a448:	466b      	mov	r3, sp
    a44a:	789b      	ldrb	r3, [r3, #2]
    a44c:	2b02      	cmp	r3, #2
    a44e:	d008      	beq.n	a462 <Network_Port_Write_Property+0x1a6>
                wp_data->error_class = ERROR_CLASS_PROPERTY;
    a450:	2202      	movs	r2, #2
    a452:	23fb      	movs	r3, #251	; 0xfb
    a454:	005b      	lsls	r3, r3, #1
    a456:	52ea      	strh	r2, [r5, r3]
                wp_data->error_code = ERROR_CODE_INVALID_DATA_TYPE;
    a458:	3207      	adds	r2, #7
    a45a:	3302      	adds	r3, #2
    a45c:	52ea      	strh	r2, [r5, r3]
    bool status = false; /* return value */
    a45e:	2400      	movs	r4, #0
    a460:	e73b      	b.n	a2da <Network_Port_Write_Property+0x1e>
                if (value.type.Unsigned_Int <= 255) {
    a462:	9902      	ldr	r1, [sp, #8]
    a464:	9b03      	ldr	r3, [sp, #12]
    a466:	2b00      	cmp	r3, #0
    a468:	d008      	beq.n	a47c <Network_Port_Write_Property+0x1c0>
                    wp_data->error_class = ERROR_CLASS_PROPERTY;
    a46a:	2202      	movs	r2, #2
    a46c:	23fb      	movs	r3, #251	; 0xfb
    a46e:	005b      	lsls	r3, r3, #1
    a470:	52ea      	strh	r2, [r5, r3]
                    wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    a472:	3223      	adds	r2, #35	; 0x23
    a474:	3302      	adds	r3, #2
    a476:	52ea      	strh	r2, [r5, r3]
    bool status = false; /* return value */
    a478:	2400      	movs	r4, #0
    a47a:	e72e      	b.n	a2da <Network_Port_Write_Property+0x1e>
                if (value.type.Unsigned_Int <= 255) {
    a47c:	2b00      	cmp	r3, #0
    a47e:	d101      	bne.n	a484 <Network_Port_Write_Property+0x1c8>
    a480:	29ff      	cmp	r1, #255	; 0xff
    a482:	d8f2      	bhi.n	a46a <Network_Port_Write_Property+0x1ae>
                    status = Network_Port_MSTP_Max_Info_Frames_Set(
    a484:	b2c9      	uxtb	r1, r1
    a486:	6828      	ldr	r0, [r5, #0]
    a488:	4b21      	ldr	r3, [pc, #132]	; (a510 <Network_Port_Write_Property+0x254>)
    a48a:	4798      	blx	r3
                    if (!status) {
    a48c:	2800      	cmp	r0, #0
    a48e:	d132      	bne.n	a4f6 <Network_Port_Write_Property+0x23a>
                        wp_data->error_class = ERROR_CLASS_PROPERTY;
    a490:	2202      	movs	r2, #2
    a492:	23fb      	movs	r3, #251	; 0xfb
    a494:	005b      	lsls	r3, r3, #1
    a496:	52ea      	strh	r2, [r5, r3]
                        wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    a498:	3223      	adds	r2, #35	; 0x23
    a49a:	3302      	adds	r3, #2
    a49c:	52ea      	strh	r2, [r5, r3]
    a49e:	e71c      	b.n	a2da <Network_Port_Write_Property+0x1e>
            if (value.tag == BACNET_APPLICATION_TAG_REAL) {
    a4a0:	466b      	mov	r3, sp
    a4a2:	789b      	ldrb	r3, [r3, #2]
    a4a4:	2b04      	cmp	r3, #4
    a4a6:	d008      	beq.n	a4ba <Network_Port_Write_Property+0x1fe>
                wp_data->error_class = ERROR_CLASS_PROPERTY;
    a4a8:	2202      	movs	r2, #2
    a4aa:	23fb      	movs	r3, #251	; 0xfb
    a4ac:	005b      	lsls	r3, r3, #1
    a4ae:	52ea      	strh	r2, [r5, r3]
                wp_data->error_code = ERROR_CODE_INVALID_DATA_TYPE;
    a4b0:	3207      	adds	r2, #7
    a4b2:	3302      	adds	r3, #2
    a4b4:	52ea      	strh	r2, [r5, r3]
    bool status = false; /* return value */
    a4b6:	2400      	movs	r4, #0
    a4b8:	e70f      	b.n	a2da <Network_Port_Write_Property+0x1e>
                if (!Network_Port_Link_Speed_Set(
    a4ba:	9902      	ldr	r1, [sp, #8]
    a4bc:	6828      	ldr	r0, [r5, #0]
    a4be:	4b15      	ldr	r3, [pc, #84]	; (a514 <Network_Port_Write_Property+0x258>)
    a4c0:	4798      	blx	r3
    a4c2:	2800      	cmp	r0, #0
    a4c4:	d119      	bne.n	a4fa <Network_Port_Write_Property+0x23e>
                    wp_data->error_class = ERROR_CLASS_PROPERTY;
    a4c6:	2202      	movs	r2, #2
    a4c8:	23fb      	movs	r3, #251	; 0xfb
    a4ca:	005b      	lsls	r3, r3, #1
    a4cc:	52ea      	strh	r2, [r5, r3]
                    wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    a4ce:	3223      	adds	r2, #35	; 0x23
    a4d0:	3302      	adds	r3, #2
    a4d2:	52ea      	strh	r2, [r5, r3]
    a4d4:	e701      	b.n	a2da <Network_Port_Write_Property+0x1e>
                if (!Network_Port_MAC_Address_Set(wp_data->object_instance,
    a4d6:	466b      	mov	r3, sp
    a4d8:	7a1a      	ldrb	r2, [r3, #8]
    a4da:	a903      	add	r1, sp, #12
    a4dc:	6828      	ldr	r0, [r5, #0]
    a4de:	4b0e      	ldr	r3, [pc, #56]	; (a518 <Network_Port_Write_Property+0x25c>)
    a4e0:	4798      	blx	r3
    a4e2:	2800      	cmp	r0, #0
    a4e4:	d10b      	bne.n	a4fe <Network_Port_Write_Property+0x242>
                    wp_data->error_class = ERROR_CLASS_PROPERTY;
    a4e6:	2202      	movs	r2, #2
    a4e8:	23fb      	movs	r3, #251	; 0xfb
    a4ea:	005b      	lsls	r3, r3, #1
    a4ec:	52ea      	strh	r2, [r5, r3]
                    wp_data->error_code = ERROR_CODE_VALUE_OUT_OF_RANGE;
    a4ee:	3223      	adds	r2, #35	; 0x23
    a4f0:	3302      	adds	r3, #2
    a4f2:	52ea      	strh	r2, [r5, r3]
    a4f4:	e6f1      	b.n	a2da <Network_Port_Write_Property+0x1e>
                    status = true;
    a4f6:	0004      	movs	r4, r0
    a4f8:	e6ef      	b.n	a2da <Network_Port_Write_Property+0x1e>
                status = true;
    a4fa:	0004      	movs	r4, r0
    a4fc:	e6ed      	b.n	a2da <Network_Port_Write_Property+0x1e>
                status = true;
    a4fe:	0004      	movs	r4, r0
    a500:	e6eb      	b.n	a2da <Network_Port_Write_Property+0x1e>
    a502:	46c0      	nop			; (mov r8, r8)
    a504:	00009eb5 	.word	0x00009eb5
    a508:	00002871 	.word	0x00002871
    a50c:	00009fe9 	.word	0x00009fe9
    a510:	0000a025 	.word	0x0000a025
    a514:	00009f59 	.word	0x00009f59
    a518:	00009f15 	.word	0x00009f15

0000a51c <Network_Port_Init>:

/**
 * Initializes the Network Port object data
 */
void Network_Port_Init(void)
{
    a51c:	b510      	push	{r4, lr}
    Object_List[0].Changes_Pending = false;
    a51e:	4c0a      	ldr	r4, [pc, #40]	; (a548 <Network_Port_Init+0x2c>)
    a520:	7823      	ldrb	r3, [r4, #0]
    a522:	2201      	movs	r2, #1
    a524:	4393      	bics	r3, r2
    a526:	7023      	strb	r3, [r4, #0]
    Object_List[0].MAC_Address[0] = dlmstp_mac_address();
    a528:	4b08      	ldr	r3, [pc, #32]	; (a54c <Network_Port_Init+0x30>)
    a52a:	4798      	blx	r3
    a52c:	7060      	strb	r0, [r4, #1]
    Object_List[0].Max_Master = dlmstp_max_master();
    a52e:	4b08      	ldr	r3, [pc, #32]	; (a550 <Network_Port_Init+0x34>)
    a530:	4798      	blx	r3
    a532:	70a0      	strb	r0, [r4, #2]
    Object_List[0].Max_Info_Frames = dlmstp_max_info_frames();
    a534:	4b07      	ldr	r3, [pc, #28]	; (a554 <Network_Port_Init+0x38>)
    a536:	4798      	blx	r3
    a538:	70e0      	strb	r0, [r4, #3]
    Object_List[0].Link_Speed = rs485_baud_rate();
    a53a:	4b07      	ldr	r3, [pc, #28]	; (a558 <Network_Port_Init+0x3c>)
    a53c:	4798      	blx	r3
    a53e:	4b07      	ldr	r3, [pc, #28]	; (a55c <Network_Port_Init+0x40>)
    a540:	4798      	blx	r3
    a542:	6060      	str	r0, [r4, #4]
}
    a544:	bd10      	pop	{r4, pc}
    a546:	46c0      	nop			; (mov r8, r8)
    a548:	20001ecc 	.word	0x20001ecc
    a54c:	00006c99 	.word	0x00006c99
    a550:	00006cd5 	.word	0x00006cd5
    a554:	00006cb9 	.word	0x00006cb9
    a558:	0000b30d 	.word	0x0000b30d
    a55c:	0000d7fd 	.word	0x0000d7fd

0000a560 <npdu_encode_pdu>:
 */
int npdu_encode_pdu(uint8_t *npdu,
    BACNET_ADDRESS *dest,
    BACNET_ADDRESS *src,
    BACNET_NPDU_DATA *npdu_data)
{
    a560:	b5f0      	push	{r4, r5, r6, r7, lr}
    a562:	46c6      	mov	lr, r8
    a564:	b500      	push	{lr}
    a566:	0004      	movs	r4, r0
    a568:	000e      	movs	r6, r1
    a56a:	4690      	mov	r8, r2
    a56c:	001f      	movs	r7, r3
    int len = 0; /* return value - number of octets loaded in this function */
    uint8_t i = 0; /* counter  */

    if (npdu && npdu_data) {
    a56e:	2800      	cmp	r0, #0
    a570:	d100      	bne.n	a574 <npdu_encode_pdu+0x14>
    a572:	e08c      	b.n	a68e <npdu_encode_pdu+0x12e>
    a574:	2b00      	cmp	r3, #0
    a576:	d100      	bne.n	a57a <npdu_encode_pdu+0x1a>
    a578:	e08b      	b.n	a692 <npdu_encode_pdu+0x132>
        /* protocol version */
        npdu[0] = npdu_data->protocol_version;
    a57a:	781b      	ldrb	r3, [r3, #0]
    a57c:	7003      	strb	r3, [r0, #0]
        /* initialize the control octet */
        npdu[1] = 0;
    a57e:	2300      	movs	r3, #0
    a580:	7043      	strb	r3, [r0, #1]
        /* Bit 7: 1 indicates that the NSDU conveys a network layer message. */
        /*          Message Type field is present. */
        /*        0 indicates that the NSDU contains a BACnet APDU. */
        /*          Message Type field is absent. */
        if (npdu_data->network_layer_message) {
    a582:	78bb      	ldrb	r3, [r7, #2]
    a584:	2b00      	cmp	r3, #0
    a586:	d001      	beq.n	a58c <npdu_encode_pdu+0x2c>
            npdu[1] |= BIT(7);
    a588:	2380      	movs	r3, #128	; 0x80
    a58a:	7043      	strb	r3, [r0, #1]
        /*Bit 5: Destination specifier where: */
        /* 0 = DNET, DLEN, DADR, and Hop Count absent */
        /* 1 = DNET, DLEN, and Hop Count present */
        /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
        /* DLEN > 0 specifies length of DADR field */
        if (dest && dest->net) {
    a58c:	2e00      	cmp	r6, #0
    a58e:	d006      	beq.n	a59e <npdu_encode_pdu+0x3e>
    a590:	8933      	ldrh	r3, [r6, #8]
    a592:	2b00      	cmp	r3, #0
    a594:	d003      	beq.n	a59e <npdu_encode_pdu+0x3e>
            npdu[1] |= BIT(5);
    a596:	7863      	ldrb	r3, [r4, #1]
    a598:	2220      	movs	r2, #32
    a59a:	4313      	orrs	r3, r2
    a59c:	7063      	strb	r3, [r4, #1]
        /* Bit 3: Source specifier where: */
        /* 0 =  SNET, SLEN, and SADR absent */
        /* 1 =  SNET, SLEN, and SADR present */
        /* SLEN = 0 Invalid */
        /* SLEN > 0 specifies length of SADR field */
        if (src && src->net && src->len) {
    a59e:	4643      	mov	r3, r8
    a5a0:	2b00      	cmp	r3, #0
    a5a2:	d00a      	beq.n	a5ba <npdu_encode_pdu+0x5a>
    a5a4:	891b      	ldrh	r3, [r3, #8]
    a5a6:	2b00      	cmp	r3, #0
    a5a8:	d007      	beq.n	a5ba <npdu_encode_pdu+0x5a>
    a5aa:	4643      	mov	r3, r8
    a5ac:	7a9b      	ldrb	r3, [r3, #10]
    a5ae:	2b00      	cmp	r3, #0
    a5b0:	d003      	beq.n	a5ba <npdu_encode_pdu+0x5a>
            npdu[1] |= BIT(3);
    a5b2:	7863      	ldrb	r3, [r4, #1]
    a5b4:	2208      	movs	r2, #8
    a5b6:	4313      	orrs	r3, r2
    a5b8:	7063      	strb	r3, [r4, #1]
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        /* 0 indicates that other than a BACnet-Confirmed-Request-PDU, */
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        if (npdu_data->data_expecting_reply) {
    a5ba:	787b      	ldrb	r3, [r7, #1]
    a5bc:	2b00      	cmp	r3, #0
    a5be:	d003      	beq.n	a5c8 <npdu_encode_pdu+0x68>
            npdu[1] |= BIT(2);
    a5c0:	7863      	ldrb	r3, [r4, #1]
    a5c2:	2204      	movs	r2, #4
    a5c4:	4313      	orrs	r3, r2
    a5c6:	7063      	strb	r3, [r4, #1]
        /* Bits 1,0: Network priority where: */
        /* B'11' = Life Safety message */
        /* B'10' = Critical Equipment message */
        /* B'01' = Urgent message */
        /* B'00' = Normal message */
        npdu[1] |= (npdu_data->priority & 0x03);
    a5c8:	2203      	movs	r2, #3
    a5ca:	56ba      	ldrsb	r2, [r7, r2]
    a5cc:	2303      	movs	r3, #3
    a5ce:	4013      	ands	r3, r2
    a5d0:	7862      	ldrb	r2, [r4, #1]
    a5d2:	4313      	orrs	r3, r2
    a5d4:	7063      	strb	r3, [r4, #1]
        len = 2;
        if (dest && dest->net) {
    a5d6:	2e00      	cmp	r6, #0
    a5d8:	d037      	beq.n	a64a <npdu_encode_pdu+0xea>
    a5da:	8931      	ldrh	r1, [r6, #8]
    a5dc:	2900      	cmp	r1, #0
    a5de:	d11e      	bne.n	a61e <npdu_encode_pdu+0xbe>
        len = 2;
    a5e0:	2502      	movs	r5, #2
                for (i = 0; i < dest->len; i++) {
                    npdu[len++] = dest->adr[i];
                }
            }
        }
        if (src && src->net && src->len) { /* Only insert if valid */
    a5e2:	4643      	mov	r3, r8
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d005      	beq.n	a5f4 <npdu_encode_pdu+0x94>
    a5e8:	8919      	ldrh	r1, [r3, #8]
    a5ea:	2900      	cmp	r1, #0
    a5ec:	d002      	beq.n	a5f4 <npdu_encode_pdu+0x94>
    a5ee:	7a9b      	ldrb	r3, [r3, #10]
    a5f0:	2b00      	cmp	r3, #0
    a5f2:	d12c      	bne.n	a64e <npdu_encode_pdu+0xee>
            }
        }
        /* The Hop Count field shall be present only if the message is */
        /* destined for a remote network, i.e., if DNET is present. */
        /* This is a one-octet field that is initialized to a value of 0xff. */
        if (dest && dest->net) {
    a5f4:	2e00      	cmp	r6, #0
    a5f6:	d005      	beq.n	a604 <npdu_encode_pdu+0xa4>
    a5f8:	8933      	ldrh	r3, [r6, #8]
    a5fa:	2b00      	cmp	r3, #0
    a5fc:	d002      	beq.n	a604 <npdu_encode_pdu+0xa4>
            npdu[len] = npdu_data->hop_count;
    a5fe:	7a3b      	ldrb	r3, [r7, #8]
    a600:	5563      	strb	r3, [r4, r5]
            len++;
    a602:	3501      	adds	r5, #1
        }
        if (npdu_data->network_layer_message) {
    a604:	78bb      	ldrb	r3, [r7, #2]
    a606:	2b00      	cmp	r3, #0
    a608:	d005      	beq.n	a616 <npdu_encode_pdu+0xb6>
            npdu[len] = npdu_data->network_message_type;
    a60a:	88bb      	ldrh	r3, [r7, #4]
    a60c:	5563      	strb	r3, [r4, r5]
            len++;
    a60e:	3501      	adds	r5, #1
            /* Message Type field contains a value in the range 0x80 - 0xFF, */
            /* then a Vendor ID field shall be present */
            if (npdu_data->network_message_type >= 0x80) {
    a610:	88bb      	ldrh	r3, [r7, #4]
    a612:	2b7f      	cmp	r3, #127	; 0x7f
    a614:	d835      	bhi.n	a682 <npdu_encode_pdu+0x122>
            }
        }
    }

    return len;
}
    a616:	0028      	movs	r0, r5
    a618:	bc04      	pop	{r2}
    a61a:	4690      	mov	r8, r2
    a61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            len += encode_unsigned16(&npdu[len], dest->net);
    a61e:	1ca0      	adds	r0, r4, #2
    a620:	4b1d      	ldr	r3, [pc, #116]	; (a698 <npdu_encode_pdu+0x138>)
    a622:	4798      	blx	r3
    a624:	1c83      	adds	r3, r0, #2
            npdu[len++] = dest->len;
    a626:	1cc5      	adds	r5, r0, #3
    a628:	7ab2      	ldrb	r2, [r6, #10]
    a62a:	54e2      	strb	r2, [r4, r3]
            if (dest->len) {
    a62c:	7ab3      	ldrb	r3, [r6, #10]
    a62e:	2b00      	cmp	r3, #0
    a630:	d0d7      	beq.n	a5e2 <npdu_encode_pdu+0x82>
    a632:	2300      	movs	r3, #0
    a634:	e005      	b.n	a642 <npdu_encode_pdu+0xe2>
                    npdu[len++] = dest->adr[i];
    a636:	18f2      	adds	r2, r6, r3
    a638:	7ad2      	ldrb	r2, [r2, #11]
    a63a:	5562      	strb	r2, [r4, r5]
                for (i = 0; i < dest->len; i++) {
    a63c:	3301      	adds	r3, #1
    a63e:	b2db      	uxtb	r3, r3
                    npdu[len++] = dest->adr[i];
    a640:	3501      	adds	r5, #1
                for (i = 0; i < dest->len; i++) {
    a642:	7ab2      	ldrb	r2, [r6, #10]
    a644:	4293      	cmp	r3, r2
    a646:	d3f6      	bcc.n	a636 <npdu_encode_pdu+0xd6>
    a648:	e7cb      	b.n	a5e2 <npdu_encode_pdu+0x82>
        len = 2;
    a64a:	2502      	movs	r5, #2
    a64c:	e7c9      	b.n	a5e2 <npdu_encode_pdu+0x82>
            len += encode_unsigned16(&npdu[len], src->net);
    a64e:	1960      	adds	r0, r4, r5
    a650:	4b11      	ldr	r3, [pc, #68]	; (a698 <npdu_encode_pdu+0x138>)
    a652:	4798      	blx	r3
    a654:	1828      	adds	r0, r5, r0
            npdu[len++] = src->len;
    a656:	1c45      	adds	r5, r0, #1
    a658:	4643      	mov	r3, r8
    a65a:	7a9b      	ldrb	r3, [r3, #10]
    a65c:	5423      	strb	r3, [r4, r0]
            if (src->len) {
    a65e:	4643      	mov	r3, r8
    a660:	7a9b      	ldrb	r3, [r3, #10]
    a662:	2b00      	cmp	r3, #0
    a664:	d0c6      	beq.n	a5f4 <npdu_encode_pdu+0x94>
    a666:	2300      	movs	r3, #0
    a668:	e006      	b.n	a678 <npdu_encode_pdu+0x118>
                    npdu[len++] = src->adr[i];
    a66a:	4642      	mov	r2, r8
    a66c:	18d2      	adds	r2, r2, r3
    a66e:	7ad2      	ldrb	r2, [r2, #11]
    a670:	5562      	strb	r2, [r4, r5]
                for (i = 0; i < src->len; i++) {
    a672:	3301      	adds	r3, #1
    a674:	b2db      	uxtb	r3, r3
                    npdu[len++] = src->adr[i];
    a676:	3501      	adds	r5, #1
                for (i = 0; i < src->len; i++) {
    a678:	4642      	mov	r2, r8
    a67a:	7a92      	ldrb	r2, [r2, #10]
    a67c:	4293      	cmp	r3, r2
    a67e:	d3f4      	bcc.n	a66a <npdu_encode_pdu+0x10a>
    a680:	e7b8      	b.n	a5f4 <npdu_encode_pdu+0x94>
                len += encode_unsigned16(&npdu[len], npdu_data->vendor_id);
    a682:	88f9      	ldrh	r1, [r7, #6]
    a684:	1960      	adds	r0, r4, r5
    a686:	4b04      	ldr	r3, [pc, #16]	; (a698 <npdu_encode_pdu+0x138>)
    a688:	4798      	blx	r3
    a68a:	182d      	adds	r5, r5, r0
    a68c:	e7c3      	b.n	a616 <npdu_encode_pdu+0xb6>
    int len = 0; /* return value - number of octets loaded in this function */
    a68e:	2500      	movs	r5, #0
    a690:	e7c1      	b.n	a616 <npdu_encode_pdu+0xb6>
    a692:	2500      	movs	r5, #0
    return len;
    a694:	e7bf      	b.n	a616 <npdu_encode_pdu+0xb6>
    a696:	46c0      	nop			; (mov r8, r8)
    a698:	000038dd 	.word	0x000038dd

0000a69c <npdu_encode_npdu_data>:
 */
void npdu_encode_npdu_data(BACNET_NPDU_DATA *npdu_data,
    bool data_expecting_reply,
    BACNET_MESSAGE_PRIORITY priority)
{
    if (npdu_data) {
    a69c:	2800      	cmp	r0, #0
    a69e:	d00b      	beq.n	a6b8 <npdu_encode_npdu_data+0x1c>
        npdu_data->data_expecting_reply = data_expecting_reply;
    a6a0:	7041      	strb	r1, [r0, #1]
        npdu_data->protocol_version = BACNET_PROTOCOL_VERSION;
    a6a2:	2301      	movs	r3, #1
    a6a4:	7003      	strb	r3, [r0, #0]
        npdu_data->network_layer_message = false; /* false if APDU */
    a6a6:	2300      	movs	r3, #0
    a6a8:	7083      	strb	r3, [r0, #2]
        npdu_data->network_message_type =
    a6aa:	2180      	movs	r1, #128	; 0x80
    a6ac:	0049      	lsls	r1, r1, #1
    a6ae:	8081      	strh	r1, [r0, #4]
            NETWORK_MESSAGE_INVALID; /* optional */
        npdu_data->vendor_id = 0; /* optional, if net message type is > 0x80 */
    a6b0:	80c3      	strh	r3, [r0, #6]
        npdu_data->priority = priority;
    a6b2:	70c2      	strb	r2, [r0, #3]
        npdu_data->hop_count = HOP_COUNT_DEFAULT;
    a6b4:	33ff      	adds	r3, #255	; 0xff
    a6b6:	7203      	strb	r3, [r0, #8]
    }
}
    a6b8:	4770      	bx	lr
	...

0000a6bc <npdu_decode>:
 */
int npdu_decode(uint8_t *npdu,
    BACNET_ADDRESS *dest,
    BACNET_ADDRESS *src,
    BACNET_NPDU_DATA *npdu_data)
{
    a6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6be:	46c6      	mov	lr, r8
    a6c0:	b500      	push	{lr}
    a6c2:	b082      	sub	sp, #8
    a6c4:	0004      	movs	r4, r0
    a6c6:	4688      	mov	r8, r1
    a6c8:	0016      	movs	r6, r2
    a6ca:	001f      	movs	r7, r3
    int len = 0; /* return value - number of octets loaded in this function */
    uint8_t i = 0; /* counter */
    uint16_t src_net = 0;
    a6cc:	2300      	movs	r3, #0
    a6ce:	466a      	mov	r2, sp
    a6d0:	80d3      	strh	r3, [r2, #6]
    uint16_t dest_net = 0;
    a6d2:	aa01      	add	r2, sp, #4
    a6d4:	8013      	strh	r3, [r2, #0]
    uint8_t slen = 0;
    uint8_t dlen = 0;
    uint8_t mac_octet = 0;

    if (npdu && npdu_data) {
    a6d6:	2800      	cmp	r0, #0
    a6d8:	d100      	bne.n	a6dc <npdu_decode+0x20>
    a6da:	e0a0      	b.n	a81e <npdu_decode+0x162>
    a6dc:	2f00      	cmp	r7, #0
    a6de:	d100      	bne.n	a6e2 <npdu_decode+0x26>
    a6e0:	e09f      	b.n	a822 <npdu_decode+0x166>
        /* Protocol Version */
        npdu_data->protocol_version = npdu[0];
    a6e2:	7803      	ldrb	r3, [r0, #0]
    a6e4:	703b      	strb	r3, [r7, #0]
        /* control octet */
        /* Bit 7: 1 indicates that the NSDU conveys a network layer message. */
        /*          Message Type field is present. */
        /*        0 indicates that the NSDU contains a BACnet APDU. */
        /*          Message Type field is absent. */
        npdu_data->network_layer_message = (npdu[1] & BIT(7)) ? true : false;
    a6e6:	7843      	ldrb	r3, [r0, #1]
    a6e8:	09db      	lsrs	r3, r3, #7
    a6ea:	70bb      	strb	r3, [r7, #2]
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        /* 0 indicates that other than a BACnet-Confirmed-Request-PDU, */
        /* a segment of a BACnet-ComplexACK-PDU, */
        /* or a network layer message expecting a reply is present. */
        npdu_data->data_expecting_reply = (npdu[1] & BIT(2)) ? true : false;
    a6ec:	7842      	ldrb	r2, [r0, #1]
    a6ee:	0892      	lsrs	r2, r2, #2
    a6f0:	2301      	movs	r3, #1
    a6f2:	4013      	ands	r3, r2
    a6f4:	707b      	strb	r3, [r7, #1]
        /* Bits 1,0: Network priority where: */
        /* B'11' = Life Safety message */
        /* B'10' = Critical Equipment message */
        /* B'01' = Urgent message */
        /* B'00' = Normal message */
        npdu_data->priority = (BACNET_MESSAGE_PRIORITY)(npdu[1] & 0x03);
    a6f6:	7842      	ldrb	r2, [r0, #1]
    a6f8:	2303      	movs	r3, #3
    a6fa:	4013      	ands	r3, r2
    a6fc:	70fb      	strb	r3, [r7, #3]
        /*Bit 5: Destination specifier where: */
        /* 0 = DNET, DLEN, DADR, and Hop Count absent */
        /* 1 = DNET, DLEN, and Hop Count present */
        /* DLEN = 0 denotes broadcast MAC DADR and DADR field is absent */
        /* DLEN > 0 specifies length of DADR field */
        if (npdu[1] & BIT(5)) {
    a6fe:	7843      	ldrb	r3, [r0, #1]
    a700:	069b      	lsls	r3, r3, #26
    a702:	d406      	bmi.n	a712 <npdu_decode+0x56>
                    }
                }
            }
        }
        /* zero out the destination address */
        else if (dest) {
    a704:	2900      	cmp	r1, #0
    a706:	d03e      	beq.n	a786 <npdu_decode+0xca>
            dest->net = 0;
    a708:	2300      	movs	r3, #0
    a70a:	810b      	strh	r3, [r1, #8]
            dest->len = 0;
    a70c:	728b      	strb	r3, [r1, #10]
            for (i = 0; i < MAX_MAC_LEN; i++) {
    a70e:	2300      	movs	r3, #0
    a710:	e028      	b.n	a764 <npdu_decode+0xa8>
            len += decode_unsigned16(&npdu[len], &dest_net);
    a712:	3002      	adds	r0, #2
    a714:	a901      	add	r1, sp, #4
    a716:	4b47      	ldr	r3, [pc, #284]	; (a834 <npdu_decode+0x178>)
    a718:	4798      	blx	r3
    a71a:	1c83      	adds	r3, r0, #2
            dlen = npdu[len++];
    a71c:	1cc5      	adds	r5, r0, #3
    a71e:	5ce0      	ldrb	r0, [r4, r3]
            if (dest) {
    a720:	4643      	mov	r3, r8
    a722:	2b00      	cmp	r3, #0
    a724:	d004      	beq.n	a730 <npdu_decode+0x74>
                dest->net = dest_net;
    a726:	ab01      	add	r3, sp, #4
    a728:	881b      	ldrh	r3, [r3, #0]
    a72a:	4642      	mov	r2, r8
    a72c:	8113      	strh	r3, [r2, #8]
                dest->len = dlen;
    a72e:	7290      	strb	r0, [r2, #10]
            if (dlen) {
    a730:	2800      	cmp	r0, #0
    a732:	d01a      	beq.n	a76a <npdu_decode+0xae>
                if (dlen > MAX_MAC_LEN) {
    a734:	2807      	cmp	r0, #7
    a736:	d900      	bls.n	a73a <npdu_decode+0x7e>
    a738:	e075      	b.n	a826 <npdu_decode+0x16a>
    a73a:	2300      	movs	r3, #0
    a73c:	e002      	b.n	a744 <npdu_decode+0x88>
                for (i = 0; i < dlen; i++) {
    a73e:	3301      	adds	r3, #1
    a740:	b2db      	uxtb	r3, r3
                    mac_octet = npdu[len++];
    a742:	0015      	movs	r5, r2
                for (i = 0; i < dlen; i++) {
    a744:	4283      	cmp	r3, r0
    a746:	d210      	bcs.n	a76a <npdu_decode+0xae>
                    mac_octet = npdu[len++];
    a748:	1c6a      	adds	r2, r5, #1
    a74a:	5d61      	ldrb	r1, [r4, r5]
                    if (dest) {
    a74c:	4645      	mov	r5, r8
    a74e:	2d00      	cmp	r5, #0
    a750:	d0f5      	beq.n	a73e <npdu_decode+0x82>
                        dest->adr[i] = mac_octet;
    a752:	18ed      	adds	r5, r5, r3
    a754:	72e9      	strb	r1, [r5, #11]
    a756:	e7f2      	b.n	a73e <npdu_decode+0x82>
                dest->adr[i] = 0;
    a758:	4642      	mov	r2, r8
    a75a:	18d2      	adds	r2, r2, r3
    a75c:	2100      	movs	r1, #0
    a75e:	72d1      	strb	r1, [r2, #11]
            for (i = 0; i < MAX_MAC_LEN; i++) {
    a760:	3301      	adds	r3, #1
    a762:	b2db      	uxtb	r3, r3
    a764:	2b06      	cmp	r3, #6
    a766:	d9f7      	bls.n	a758 <npdu_decode+0x9c>
        len = 2;
    a768:	2502      	movs	r5, #2
            }
        }
        /* Bit 3: Source specifier where: */
        /* 0 =  SNET, SLEN, and SADR absent */
        /* 1 =  SNET, SLEN, and SADR present */
        if (npdu[1] & BIT(3)) {
    a76a:	7863      	ldrb	r3, [r4, #1]
    a76c:	071b      	lsls	r3, r3, #28
    a76e:	d40c      	bmi.n	a78a <npdu_decode+0xce>
                    if (src) {
                        src->adr[i] = mac_octet;
                    }
                }
            }
        } else if (src) {
    a770:	2e00      	cmp	r6, #0
    a772:	d032      	beq.n	a7da <npdu_decode+0x11e>
            /* Clear the net number, with one exception: if the receive()
             * function set it to BACNET_BROADCAST_NETWORK, (eg, for
             * BVLC_ORIGINAL_BROADCAST_NPDU) then don't stomp on that.
             */
            if (src->net != BACNET_BROADCAST_NETWORK) {
    a774:	8932      	ldrh	r2, [r6, #8]
    a776:	4b30      	ldr	r3, [pc, #192]	; (a838 <npdu_decode+0x17c>)
    a778:	429a      	cmp	r2, r3
    a77a:	d001      	beq.n	a780 <npdu_decode+0xc4>
                src->net = 0;
    a77c:	2300      	movs	r3, #0
    a77e:	8133      	strh	r3, [r6, #8]
            }
            src->len = 0;
    a780:	2300      	movs	r3, #0
    a782:	72b3      	strb	r3, [r6, #10]
            for (i = 0; i < MAX_MAC_LEN; i++) {
    a784:	e027      	b.n	a7d6 <npdu_decode+0x11a>
        len = 2;
    a786:	2502      	movs	r5, #2
    a788:	e7ef      	b.n	a76a <npdu_decode+0xae>
            len += decode_unsigned16(&npdu[len], &src_net);
    a78a:	1960      	adds	r0, r4, r5
    a78c:	466b      	mov	r3, sp
    a78e:	1d99      	adds	r1, r3, #6
    a790:	4b28      	ldr	r3, [pc, #160]	; (a834 <npdu_decode+0x178>)
    a792:	4798      	blx	r3
    a794:	1828      	adds	r0, r5, r0
            slen = npdu[len++];
    a796:	1c45      	adds	r5, r0, #1
    a798:	5c20      	ldrb	r0, [r4, r0]
            if (src) {
    a79a:	2e00      	cmp	r6, #0
    a79c:	d004      	beq.n	a7a8 <npdu_decode+0xec>
                src->net = src_net;
    a79e:	466b      	mov	r3, sp
    a7a0:	3306      	adds	r3, #6
    a7a2:	881b      	ldrh	r3, [r3, #0]
    a7a4:	8133      	strh	r3, [r6, #8]
                src->len = slen;
    a7a6:	72b0      	strb	r0, [r6, #10]
            if (slen) {
    a7a8:	2800      	cmp	r0, #0
    a7aa:	d016      	beq.n	a7da <npdu_decode+0x11e>
                if (slen > MAX_MAC_LEN) {
    a7ac:	2807      	cmp	r0, #7
    a7ae:	d83d      	bhi.n	a82c <npdu_decode+0x170>
    a7b0:	2300      	movs	r3, #0
    a7b2:	e004      	b.n	a7be <npdu_decode+0x102>
                        src->adr[i] = mac_octet;
    a7b4:	18f5      	adds	r5, r6, r3
    a7b6:	72e9      	strb	r1, [r5, #11]
                for (i = 0; i < slen; i++) {
    a7b8:	3301      	adds	r3, #1
    a7ba:	b2db      	uxtb	r3, r3
                    mac_octet = npdu[len++];
    a7bc:	0015      	movs	r5, r2
                for (i = 0; i < slen; i++) {
    a7be:	4283      	cmp	r3, r0
    a7c0:	d20b      	bcs.n	a7da <npdu_decode+0x11e>
                    mac_octet = npdu[len++];
    a7c2:	1c6a      	adds	r2, r5, #1
    a7c4:	5d61      	ldrb	r1, [r4, r5]
                    if (src) {
    a7c6:	2e00      	cmp	r6, #0
    a7c8:	d1f4      	bne.n	a7b4 <npdu_decode+0xf8>
    a7ca:	e7f5      	b.n	a7b8 <npdu_decode+0xfc>
                src->adr[i] = 0;
    a7cc:	18f2      	adds	r2, r6, r3
    a7ce:	2100      	movs	r1, #0
    a7d0:	72d1      	strb	r1, [r2, #11]
            for (i = 0; i < MAX_MAC_LEN; i++) {
    a7d2:	3301      	adds	r3, #1
    a7d4:	b2db      	uxtb	r3, r3
    a7d6:	2b06      	cmp	r3, #6
    a7d8:	d9f8      	bls.n	a7cc <npdu_decode+0x110>
            }
        }
        /* The Hop Count field shall be present only if the message is */
        /* destined for a remote network, i.e., if DNET is present. */
        /* This is a one-octet field that is initialized to a value of 0xff. */
        if (dest_net) {
    a7da:	ab01      	add	r3, sp, #4
    a7dc:	881b      	ldrh	r3, [r3, #0]
    a7de:	2b00      	cmp	r3, #0
    a7e0:	d010      	beq.n	a804 <npdu_decode+0x148>
            npdu_data->hop_count = npdu[len++];
    a7e2:	1c6b      	adds	r3, r5, #1
    a7e4:	5d62      	ldrb	r2, [r4, r5]
    a7e6:	723a      	strb	r2, [r7, #8]
        } else {
            npdu_data->hop_count = 0;
        }
        /* Indicates that the NSDU conveys a network layer message. */
        /* Message Type field is present. */
        if (npdu_data->network_layer_message) {
    a7e8:	78ba      	ldrb	r2, [r7, #2]
    a7ea:	2a00      	cmp	r2, #0
    a7ec:	d00e      	beq.n	a80c <npdu_decode+0x150>
            npdu_data->network_message_type =
                (BACNET_NETWORK_MESSAGE_TYPE)npdu[len++];
    a7ee:	1c5d      	adds	r5, r3, #1
    a7f0:	5ce3      	ldrb	r3, [r4, r3]
            npdu_data->network_message_type =
    a7f2:	80bb      	strh	r3, [r7, #4]
            /* Message Type field contains a value in the range 0x80 - 0xFF, */
            /* then a Vendor ID field shall be present */
            if (npdu_data->network_message_type >= 0x80) {
    a7f4:	2b7f      	cmp	r3, #127	; 0x7f
    a7f6:	d90d      	bls.n	a814 <npdu_decode+0x158>
                len += decode_unsigned16(&npdu[len], &npdu_data->vendor_id);
    a7f8:	1db9      	adds	r1, r7, #6
    a7fa:	1960      	adds	r0, r4, r5
    a7fc:	4b0d      	ldr	r3, [pc, #52]	; (a834 <npdu_decode+0x178>)
    a7fe:	4798      	blx	r3
    a800:	182d      	adds	r5, r5, r0
    a802:	e007      	b.n	a814 <npdu_decode+0x158>
            npdu_data->hop_count = 0;
    a804:	2300      	movs	r3, #0
    a806:	723b      	strb	r3, [r7, #8]
    a808:	002b      	movs	r3, r5
    a80a:	e7ed      	b.n	a7e8 <npdu_decode+0x12c>
            }
        } else {
            /* Since npdu_data->network_layer_message is false,
             * it doesn't much matter what we set here; this is safe: */
            npdu_data->network_message_type = NETWORK_MESSAGE_INVALID;
    a80c:	2280      	movs	r2, #128	; 0x80
    a80e:	0052      	lsls	r2, r2, #1
    a810:	80ba      	strh	r2, [r7, #4]
    a812:	001d      	movs	r5, r3
        }
    }

    return len;
}
    a814:	0028      	movs	r0, r5
    a816:	b002      	add	sp, #8
    a818:	bc04      	pop	{r2}
    a81a:	4690      	mov	r8, r2
    a81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int len = 0; /* return value - number of octets loaded in this function */
    a81e:	2500      	movs	r5, #0
    a820:	e7f8      	b.n	a814 <npdu_decode+0x158>
    a822:	2500      	movs	r5, #0
    a824:	e7f6      	b.n	a814 <npdu_decode+0x158>
                    return -1;
    a826:	2501      	movs	r5, #1
    a828:	426d      	negs	r5, r5
    a82a:	e7f3      	b.n	a814 <npdu_decode+0x158>
                    return -1;
    a82c:	2501      	movs	r5, #1
    a82e:	426d      	negs	r5, r5
    a830:	e7f0      	b.n	a814 <npdu_decode+0x158>
    a832:	46c0      	nop			; (mov r8, r8)
    a834:	000038e7 	.word	0x000038e7
    a838:	0000ffff 	.word	0x0000ffff

0000a83c <property_list_count>:
 *
 * @param pList - array of type 'int' that is a list of BACnet object
 * properties, terminated by a '-1' value.
 */
unsigned property_list_count(const int *pList)
{
    a83c:	1e03      	subs	r3, r0, #0
    unsigned property_count = 0;

    if (pList) {
    a83e:	d001      	beq.n	a844 <property_list_count+0x8>
    a840:	2000      	movs	r0, #0
    a842:	e003      	b.n	a84c <property_list_count+0x10>
    unsigned property_count = 0;
    a844:	2000      	movs	r0, #0
    a846:	e004      	b.n	a852 <property_list_count+0x16>
        while (*pList != -1) {
            property_count++;
    a848:	3001      	adds	r0, #1
            pList++;
    a84a:	3304      	adds	r3, #4
        while (*pList != -1) {
    a84c:	681a      	ldr	r2, [r3, #0]
    a84e:	3201      	adds	r2, #1
    a850:	d1fa      	bne.n	a848 <property_list_count+0xc>
        }
    }

    return property_count;
}
    a852:	4770      	bx	lr

0000a854 <property_list_encode>:
 */
int property_list_encode(BACNET_READ_PROPERTY_DATA *rpdata,
    const int *pListRequired,
    const int *pListOptional,
    const int *pListProprietary)
{
    a854:	b5f0      	push	{r4, r5, r6, r7, lr}
    a856:	46de      	mov	lr, fp
    a858:	4657      	mov	r7, sl
    a85a:	464e      	mov	r6, r9
    a85c:	4645      	mov	r5, r8
    a85e:	b5e0      	push	{r5, r6, r7, lr}
    a860:	b085      	sub	sp, #20
    a862:	0004      	movs	r4, r0
    a864:	9101      	str	r1, [sp, #4]
    a866:	9200      	str	r2, [sp, #0]
    a868:	001f      	movs	r7, r3
    a86a:	9302      	str	r3, [sp, #8]
    unsigned optional_count = 0;
    unsigned proprietary_count = 0;
    int len = 0;
    unsigned i = 0; /* loop index */

    required_count = property_list_count(pListRequired);
    a86c:	0008      	movs	r0, r1
    a86e:	4e84      	ldr	r6, [pc, #528]	; (aa80 <property_list_encode+0x22c>)
    a870:	47b0      	blx	r6
    a872:	0005      	movs	r5, r0
    optional_count = property_list_count(pListOptional);
    a874:	9800      	ldr	r0, [sp, #0]
    a876:	47b0      	blx	r6
    a878:	4682      	mov	sl, r0
    proprietary_count = property_list_count(pListProprietary);
    a87a:	0038      	movs	r0, r7
    a87c:	47b0      	blx	r6
    a87e:	4680      	mov	r8, r0
    /* total of all counts */
    count = required_count + optional_count + proprietary_count;
    a880:	4653      	mov	r3, sl
    a882:	18ea      	adds	r2, r5, r3
    a884:	4442      	add	r2, r8
    if (required_count >= 3) {
    a886:	2d02      	cmp	r5, #2
    a888:	d900      	bls.n	a88c <property_list_encode+0x38>
        /* less the 3 always required properties */
        count -= 3;
    a88a:	3a03      	subs	r2, #3
    }
    if ((rpdata == NULL) || (rpdata->application_data == NULL) ||
    a88c:	2c00      	cmp	r4, #0
    a88e:	d100      	bne.n	a892 <property_list_encode+0x3e>
    a890:	e0eb      	b.n	aa6a <property_list_encode+0x216>
    a892:	6923      	ldr	r3, [r4, #16]
    a894:	469b      	mov	fp, r3
    a896:	2b00      	cmp	r3, #0
    a898:	d100      	bne.n	a89c <property_list_encode+0x48>
    a89a:	e0ef      	b.n	aa7c <property_list_encode+0x228>
        (rpdata->application_data_len == 0)) {
    a89c:	6967      	ldr	r7, [r4, #20]
    if ((rpdata == NULL) || (rpdata->application_data == NULL) ||
    a89e:	2f00      	cmp	r7, #0
    a8a0:	d100      	bne.n	a8a4 <property_list_encode+0x50>
    a8a2:	e0e3      	b.n	aa6c <property_list_encode+0x218>
        return 0;
    }
    apdu = rpdata->application_data;
    max_apdu_len = rpdata->application_data_len;
    switch (rpdata->object_property) {
    a8a4:	2374      	movs	r3, #116	; 0x74
    a8a6:	33ff      	adds	r3, #255	; 0xff
    a8a8:	68a1      	ldr	r1, [r4, #8]
    a8aa:	4299      	cmp	r1, r3
    a8ac:	d000      	beq.n	a8b0 <property_list_encode+0x5c>
    a8ae:	e0d5      	b.n	aa5c <property_list_encode+0x208>
        case PROP_PROPERTY_LIST:
            if (rpdata->array_index == 0) {
    a8b0:	68e0      	ldr	r0, [r4, #12]
    a8b2:	2800      	cmp	r0, #0
    a8b4:	d022      	beq.n	a8fc <property_list_encode+0xa8>
                /* Array element zero is the number of elements in the array */
                apdu_len = encode_application_unsigned(&apdu[0], count);
            } else if (rpdata->array_index == BACNET_ARRAY_ALL) {
    a8b6:	1c43      	adds	r3, r0, #1
    a8b8:	d026      	beq.n	a908 <property_list_encode+0xb4>
                            break;
                        }
                    }
                }
            } else {
                if (rpdata->array_index <= count) {
    a8ba:	4282      	cmp	r2, r0
    a8bc:	d200      	bcs.n	a8c0 <property_list_encode+0x6c>
    a8be:	e0c6      	b.n	aa4e <property_list_encode+0x1fa>
                    count = 0;
                    if (required_count > 3) {
    a8c0:	2d03      	cmp	r5, #3
    a8c2:	d900      	bls.n	a8c6 <property_list_encode+0x72>
    a8c4:	e0a0      	b.n	aa08 <property_list_encode+0x1b4>
                    count = 0;
    a8c6:	2600      	movs	r6, #0
    int apdu_len = 0; /* return value */
    a8c8:	2700      	movs	r7, #0
                                    (uint32_t)pListRequired[i]);
                                break;
                            }
                        }
                    }
                    if ((apdu_len == 0) && (optional_count > 0)) {
    a8ca:	2f00      	cmp	r7, #0
    a8cc:	d103      	bne.n	a8d6 <property_list_encode+0x82>
    a8ce:	4653      	mov	r3, sl
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d000      	beq.n	a8d6 <property_list_encode+0x82>
    a8d4:	e0a7      	b.n	aa26 <property_list_encode+0x1d2>
                                    (uint32_t)pListOptional[i]);
                                break;
                            }
                        }
                    }
                    if ((apdu_len == 0) && (proprietary_count > 0)) {
    a8d6:	2f00      	cmp	r7, #0
    a8d8:	d000      	beq.n	a8dc <property_list_encode+0x88>
    a8da:	e0c7      	b.n	aa6c <property_list_encode+0x218>
    a8dc:	4643      	mov	r3, r8
    a8de:	2b00      	cmp	r3, #0
    a8e0:	d100      	bne.n	a8e4 <property_list_encode+0x90>
    a8e2:	e0c3      	b.n	aa6c <property_list_encode+0x218>
    a8e4:	2300      	movs	r3, #0
    a8e6:	4642      	mov	r2, r8
                        for (i = 0; i < proprietary_count; i++) {
    a8e8:	4293      	cmp	r3, r2
    a8ea:	d300      	bcc.n	a8ee <property_list_encode+0x9a>
    a8ec:	e0be      	b.n	aa6c <property_list_encode+0x218>
                            count++;
    a8ee:	3601      	adds	r6, #1
                            if (count == rpdata->array_index) {
    a8f0:	68e1      	ldr	r1, [r4, #12]
    a8f2:	428e      	cmp	r6, r1
    a8f4:	d100      	bne.n	a8f8 <property_list_encode+0xa4>
    a8f6:	e0a1      	b.n	aa3c <property_list_encode+0x1e8>
                        for (i = 0; i < proprietary_count; i++) {
    a8f8:	3301      	adds	r3, #1
    a8fa:	e7f5      	b.n	a8e8 <property_list_encode+0x94>
                apdu_len = encode_application_unsigned(&apdu[0], count);
    a8fc:	2300      	movs	r3, #0
    a8fe:	4658      	mov	r0, fp
    a900:	4960      	ldr	r1, [pc, #384]	; (aa84 <property_list_encode+0x230>)
    a902:	4788      	blx	r1
    a904:	0007      	movs	r7, r0
    a906:	e0b1      	b.n	aa6c <property_list_encode+0x218>
                if (required_count > 3) {
    a908:	2d03      	cmp	r5, #3
    a90a:	d833      	bhi.n	a974 <property_list_encode+0x120>
    int apdu_len = 0; /* return value */
    a90c:	2600      	movs	r6, #0
                if (optional_count) {
    a90e:	4653      	mov	r3, sl
    a910:	2b00      	cmp	r3, #0
    a912:	d146      	bne.n	a9a2 <property_list_encode+0x14e>
                if (proprietary_count) {
    a914:	4643      	mov	r3, r8
    a916:	2b00      	cmp	r3, #0
    a918:	d059      	beq.n	a9ce <property_list_encode+0x17a>
    a91a:	2500      	movs	r5, #0
    a91c:	46a1      	mov	r9, r4
    a91e:	4644      	mov	r4, r8
    a920:	46b8      	mov	r8, r7
    a922:	9f02      	ldr	r7, [sp, #8]
                    for (i = 0; i < proprietary_count; i++) {
    a924:	42a5      	cmp	r5, r4
    a926:	d25a      	bcs.n	a9de <property_list_encode+0x18a>
                        len = encode_application_enumerated(
    a928:	465b      	mov	r3, fp
    a92a:	1998      	adds	r0, r3, r6
                            &apdu[apdu_len], (uint32_t)pListProprietary[i]);
    a92c:	00ab      	lsls	r3, r5, #2
    a92e:	59d9      	ldr	r1, [r3, r7]
                        len = encode_application_enumerated(
    a930:	4b55      	ldr	r3, [pc, #340]	; (aa88 <property_list_encode+0x234>)
    a932:	4798      	blx	r3
                        if ((apdu_len + len) < max_apdu_len) {
    a934:	1836      	adds	r6, r6, r0
    a936:	45b0      	cmp	r8, r6
    a938:	dd4b      	ble.n	a9d2 <property_list_encode+0x17e>
                    for (i = 0; i < proprietary_count; i++) {
    a93a:	3501      	adds	r5, #1
    a93c:	e7f2      	b.n	a924 <property_list_encode+0xd0>
                    for (i = 0; i < required_count; i++) {
    a93e:	3501      	adds	r5, #1
    a940:	42a5      	cmp	r5, r4
    a942:	d222      	bcs.n	a98a <property_list_encode+0x136>
                        if ((pListRequired[i] == PROP_OBJECT_TYPE) ||
    a944:	00ab      	lsls	r3, r5, #2
    a946:	59d9      	ldr	r1, [r3, r7]
    a948:	294f      	cmp	r1, #79	; 0x4f
    a94a:	d0f8      	beq.n	a93e <property_list_encode+0xea>
    a94c:	294b      	cmp	r1, #75	; 0x4b
    a94e:	d0f6      	beq.n	a93e <property_list_encode+0xea>
                            (pListRequired[i] == PROP_OBJECT_IDENTIFIER) ||
    a950:	294d      	cmp	r1, #77	; 0x4d
    a952:	d0f4      	beq.n	a93e <property_list_encode+0xea>
                            len = encode_application_enumerated(
    a954:	465b      	mov	r3, fp
    a956:	1998      	adds	r0, r3, r6
    a958:	4b4b      	ldr	r3, [pc, #300]	; (aa88 <property_list_encode+0x234>)
    a95a:	4798      	blx	r3
                        if ((apdu_len + len) < max_apdu_len) {
    a95c:	1836      	adds	r6, r6, r0
    a95e:	45b1      	cmp	r9, r6
    a960:	dced      	bgt.n	a93e <property_list_encode+0xea>
    a962:	464f      	mov	r7, r9
    a964:	4654      	mov	r4, sl
    a966:	9b03      	ldr	r3, [sp, #12]
    a968:	469a      	mov	sl, r3
                            rpdata->error_code =
    a96a:	2336      	movs	r3, #54	; 0x36
    a96c:	8363      	strh	r3, [r4, #26]
                            apdu_len = BACNET_STATUS_ABORT;
    a96e:	2602      	movs	r6, #2
    a970:	4276      	negs	r6, r6
                            break;
    a972:	e7cc      	b.n	a90e <property_list_encode+0xba>
    a974:	2300      	movs	r3, #0
    a976:	4699      	mov	r9, r3
    a978:	2600      	movs	r6, #0
    a97a:	4653      	mov	r3, sl
    a97c:	9303      	str	r3, [sp, #12]
    a97e:	46a2      	mov	sl, r4
    a980:	002c      	movs	r4, r5
    a982:	464d      	mov	r5, r9
    a984:	46b9      	mov	r9, r7
    a986:	9f01      	ldr	r7, [sp, #4]
    a988:	e7da      	b.n	a940 <property_list_encode+0xec>
    a98a:	464f      	mov	r7, r9
    a98c:	4654      	mov	r4, sl
    a98e:	9b03      	ldr	r3, [sp, #12]
    a990:	469a      	mov	sl, r3
    a992:	e7bc      	b.n	a90e <property_list_encode+0xba>
    a994:	464f      	mov	r7, r9
    a996:	4654      	mov	r4, sl
                            rpdata->error_code =
    a998:	2336      	movs	r3, #54	; 0x36
    a99a:	8363      	strh	r3, [r4, #26]
                            apdu_len = BACNET_STATUS_ABORT;
    a99c:	2602      	movs	r6, #2
    a99e:	4276      	negs	r6, r6
                            break;
    a9a0:	e7b8      	b.n	a914 <property_list_encode+0xc0>
    a9a2:	2500      	movs	r5, #0
    a9a4:	46b9      	mov	r9, r7
    a9a6:	0023      	movs	r3, r4
    a9a8:	4654      	mov	r4, sl
    a9aa:	9f00      	ldr	r7, [sp, #0]
    a9ac:	469a      	mov	sl, r3
                    for (i = 0; i < optional_count; i++) {
    a9ae:	42a5      	cmp	r5, r4
    a9b0:	d20a      	bcs.n	a9c8 <property_list_encode+0x174>
                        len = encode_application_enumerated(
    a9b2:	465b      	mov	r3, fp
    a9b4:	1998      	adds	r0, r3, r6
                            &apdu[apdu_len], (uint32_t)pListOptional[i]);
    a9b6:	00ab      	lsls	r3, r5, #2
    a9b8:	59d9      	ldr	r1, [r3, r7]
                        len = encode_application_enumerated(
    a9ba:	4b33      	ldr	r3, [pc, #204]	; (aa88 <property_list_encode+0x234>)
    a9bc:	4798      	blx	r3
                        if ((apdu_len + len) < max_apdu_len) {
    a9be:	1836      	adds	r6, r6, r0
    a9c0:	45b1      	cmp	r9, r6
    a9c2:	dde7      	ble.n	a994 <property_list_encode+0x140>
                    for (i = 0; i < optional_count; i++) {
    a9c4:	3501      	adds	r5, #1
    a9c6:	e7f2      	b.n	a9ae <property_list_encode+0x15a>
    a9c8:	464f      	mov	r7, r9
    a9ca:	4654      	mov	r4, sl
    a9cc:	e7a2      	b.n	a914 <property_list_encode+0xc0>
    a9ce:	0037      	movs	r7, r6
    a9d0:	e04c      	b.n	aa6c <property_list_encode+0x218>
    a9d2:	464c      	mov	r4, r9
                            rpdata->error_code =
    a9d4:	2336      	movs	r3, #54	; 0x36
    a9d6:	8363      	strh	r3, [r4, #26]
                            apdu_len = BACNET_STATUS_ABORT;
    a9d8:	2702      	movs	r7, #2
    a9da:	427f      	negs	r7, r7
                            break;
    a9dc:	e046      	b.n	aa6c <property_list_encode+0x218>
    a9de:	0037      	movs	r7, r6
    a9e0:	e044      	b.n	aa6c <property_list_encode+0x218>
                        for (i = 0; i < required_count; i++) {
    a9e2:	3301      	adds	r3, #1
    a9e4:	42ab      	cmp	r3, r5
    a9e6:	d213      	bcs.n	aa10 <property_list_encode+0x1bc>
                            if ((pListRequired[i] == PROP_OBJECT_TYPE) ||
    a9e8:	009a      	lsls	r2, r3, #2
    a9ea:	59d1      	ldr	r1, [r2, r7]
    a9ec:	294f      	cmp	r1, #79	; 0x4f
    a9ee:	d0f8      	beq.n	a9e2 <property_list_encode+0x18e>
    a9f0:	294b      	cmp	r1, #75	; 0x4b
    a9f2:	d0f6      	beq.n	a9e2 <property_list_encode+0x18e>
                                (pListRequired[i] == PROP_OBJECT_IDENTIFIER) ||
    a9f4:	294d      	cmp	r1, #77	; 0x4d
    a9f6:	d0f4      	beq.n	a9e2 <property_list_encode+0x18e>
                                count++;
    a9f8:	3601      	adds	r6, #1
                            if (count == rpdata->array_index) {
    a9fa:	42b0      	cmp	r0, r6
    a9fc:	d1f1      	bne.n	a9e2 <property_list_encode+0x18e>
                                apdu_len = encode_application_enumerated(
    a9fe:	4658      	mov	r0, fp
    aa00:	4b21      	ldr	r3, [pc, #132]	; (aa88 <property_list_encode+0x234>)
    aa02:	4798      	blx	r3
    aa04:	0007      	movs	r7, r0
                                break;
    aa06:	e760      	b.n	a8ca <property_list_encode+0x76>
    aa08:	2300      	movs	r3, #0
    aa0a:	2600      	movs	r6, #0
    aa0c:	9f01      	ldr	r7, [sp, #4]
    aa0e:	e7e9      	b.n	a9e4 <property_list_encode+0x190>
    int apdu_len = 0; /* return value */
    aa10:	2700      	movs	r7, #0
    aa12:	e75a      	b.n	a8ca <property_list_encode+0x76>
                                apdu_len = encode_application_enumerated(
    aa14:	0038      	movs	r0, r7
    aa16:	4458      	add	r0, fp
                                    (uint32_t)pListOptional[i]);
    aa18:	009b      	lsls	r3, r3, #2
    aa1a:	9a00      	ldr	r2, [sp, #0]
    aa1c:	5899      	ldr	r1, [r3, r2]
                                apdu_len = encode_application_enumerated(
    aa1e:	4b1a      	ldr	r3, [pc, #104]	; (aa88 <property_list_encode+0x234>)
    aa20:	4798      	blx	r3
    aa22:	0007      	movs	r7, r0
                                break;
    aa24:	e757      	b.n	a8d6 <property_list_encode+0x82>
    aa26:	2300      	movs	r3, #0
    aa28:	4652      	mov	r2, sl
                        for (i = 0; i < optional_count; i++) {
    aa2a:	4293      	cmp	r3, r2
    aa2c:	d300      	bcc.n	aa30 <property_list_encode+0x1dc>
    aa2e:	e752      	b.n	a8d6 <property_list_encode+0x82>
                            count++;
    aa30:	3601      	adds	r6, #1
                            if (count == rpdata->array_index) {
    aa32:	68e1      	ldr	r1, [r4, #12]
    aa34:	428e      	cmp	r6, r1
    aa36:	d0ed      	beq.n	aa14 <property_list_encode+0x1c0>
                        for (i = 0; i < optional_count; i++) {
    aa38:	3301      	adds	r3, #1
    aa3a:	e7f6      	b.n	aa2a <property_list_encode+0x1d6>
                                apdu_len = encode_application_enumerated(
    aa3c:	0038      	movs	r0, r7
    aa3e:	4458      	add	r0, fp
                                    &apdu[apdu_len],
                                    (uint32_t)pListProprietary[i]);
    aa40:	009b      	lsls	r3, r3, #2
    aa42:	9a02      	ldr	r2, [sp, #8]
    aa44:	5899      	ldr	r1, [r3, r2]
                                apdu_len = encode_application_enumerated(
    aa46:	4b10      	ldr	r3, [pc, #64]	; (aa88 <property_list_encode+0x234>)
    aa48:	4798      	blx	r3
    aa4a:	0007      	movs	r7, r0
                                break;
    aa4c:	e00e      	b.n	aa6c <property_list_encode+0x218>
                            }
                        }
                    }
                } else {
                    rpdata->error_class = ERROR_CLASS_PROPERTY;
    aa4e:	2302      	movs	r3, #2
    aa50:	8323      	strh	r3, [r4, #24]
                    rpdata->error_code = ERROR_CODE_INVALID_ARRAY_INDEX;
    aa52:	3328      	adds	r3, #40	; 0x28
    aa54:	8363      	strh	r3, [r4, #26]
                    apdu_len = BACNET_STATUS_ERROR;
    aa56:	2701      	movs	r7, #1
    aa58:	427f      	negs	r7, r7
    aa5a:	e007      	b.n	aa6c <property_list_encode+0x218>
                }
            }
            break;
        default:
            rpdata->error_class = ERROR_CLASS_PROPERTY;
    aa5c:	2302      	movs	r3, #2
    aa5e:	8323      	strh	r3, [r4, #24]
            rpdata->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
    aa60:	331e      	adds	r3, #30
    aa62:	8363      	strh	r3, [r4, #26]
            apdu_len = BACNET_STATUS_ERROR;
    aa64:	2701      	movs	r7, #1
    aa66:	427f      	negs	r7, r7
            break;
    aa68:	e000      	b.n	aa6c <property_list_encode+0x218>
        return 0;
    aa6a:	2700      	movs	r7, #0
    }

    return apdu_len;
}
    aa6c:	0038      	movs	r0, r7
    aa6e:	b005      	add	sp, #20
    aa70:	bc3c      	pop	{r2, r3, r4, r5}
    aa72:	4690      	mov	r8, r2
    aa74:	4699      	mov	r9, r3
    aa76:	46a2      	mov	sl, r4
    aa78:	46ab      	mov	fp, r5
    aa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0;
    aa7c:	2700      	movs	r7, #0
    aa7e:	e7f5      	b.n	aa6c <property_list_encode+0x218>
    aa80:	0000a83d 	.word	0x0000a83d
    aa84:	000035e1 	.word	0x000035e1
    aa88:	000036f1 	.word	0x000036f1

0000aa8c <rd_decode_service_request>:
/* decode the service request only */
int rd_decode_service_request(uint8_t *apdu,
    unsigned apdu_len,
    BACNET_REINITIALIZED_STATE *state,
    BACNET_CHARACTER_STRING *password)
{
    aa8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa8e:	b087      	sub	sp, #28
    aa90:	0005      	movs	r5, r0
    aa92:	000c      	movs	r4, r1
    aa94:	0016      	movs	r6, r2
    aa96:	9301      	str	r3, [sp, #4]
    unsigned len = 0;
    uint8_t tag_number = 0;
    aa98:	2300      	movs	r3, #0
    aa9a:	220f      	movs	r2, #15
    aa9c:	a902      	add	r1, sp, #8
    aa9e:	468c      	mov	ip, r1
    aaa0:	4462      	add	r2, ip
    aaa2:	7013      	strb	r3, [r2, #0]
    uint32_t len_value_type = 0;
    aaa4:	9304      	str	r3, [sp, #16]
    uint32_t value = 0;
    aaa6:	9303      	str	r3, [sp, #12]

    /* check for value pointers */
    if (apdu_len) {
    aaa8:	2c00      	cmp	r4, #0
    aaaa:	d102      	bne.n	aab2 <rd_decode_service_request+0x26>
            len +=
                decode_character_string(&apdu[len], len_value_type, password);
        }
    }

    return (int)len;
    aaac:	0020      	movs	r0, r4
}
    aaae:	b007      	add	sp, #28
    aab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!decode_is_context_tag(&apdu[len], 0)) {
    aab2:	2100      	movs	r1, #0
    aab4:	4b1c      	ldr	r3, [pc, #112]	; (ab28 <rd_decode_service_request+0x9c>)
    aab6:	4798      	blx	r3
    aab8:	2800      	cmp	r0, #0
    aaba:	d02e      	beq.n	ab1a <rd_decode_service_request+0x8e>
        len += decode_tag_number_and_value(
    aabc:	aa04      	add	r2, sp, #16
    aabe:	210f      	movs	r1, #15
    aac0:	ab02      	add	r3, sp, #8
    aac2:	469c      	mov	ip, r3
    aac4:	4461      	add	r1, ip
    aac6:	0028      	movs	r0, r5
    aac8:	4b18      	ldr	r3, [pc, #96]	; (ab2c <rd_decode_service_request+0xa0>)
    aaca:	4798      	blx	r3
    aacc:	0007      	movs	r7, r0
        len += decode_enumerated(&apdu[len], len_value_type, &value);
    aace:	1828      	adds	r0, r5, r0
    aad0:	aa03      	add	r2, sp, #12
    aad2:	9904      	ldr	r1, [sp, #16]
    aad4:	4b16      	ldr	r3, [pc, #88]	; (ab30 <rd_decode_service_request+0xa4>)
    aad6:	4798      	blx	r3
    aad8:	183f      	adds	r7, r7, r0
        if (state) {
    aada:	2e00      	cmp	r6, #0
    aadc:	d002      	beq.n	aae4 <rd_decode_service_request+0x58>
            *state = (BACNET_REINITIALIZED_STATE)value;
    aade:	ab02      	add	r3, sp, #8
    aae0:	791b      	ldrb	r3, [r3, #4]
    aae2:	7033      	strb	r3, [r6, #0]
        if (len < apdu_len) {
    aae4:	42bc      	cmp	r4, r7
    aae6:	d801      	bhi.n	aaec <rd_decode_service_request+0x60>
        len += decode_enumerated(&apdu[len], len_value_type, &value);
    aae8:	003c      	movs	r4, r7
    aaea:	e7df      	b.n	aaac <rd_decode_service_request+0x20>
            if (!decode_is_context_tag(&apdu[len], 1)) {
    aaec:	19ec      	adds	r4, r5, r7
    aaee:	2101      	movs	r1, #1
    aaf0:	0020      	movs	r0, r4
    aaf2:	4b0d      	ldr	r3, [pc, #52]	; (ab28 <rd_decode_service_request+0x9c>)
    aaf4:	4798      	blx	r3
    aaf6:	2800      	cmp	r0, #0
    aaf8:	d012      	beq.n	ab20 <rd_decode_service_request+0x94>
            len += decode_tag_number_and_value(
    aafa:	aa04      	add	r2, sp, #16
    aafc:	210f      	movs	r1, #15
    aafe:	ab02      	add	r3, sp, #8
    ab00:	469c      	mov	ip, r3
    ab02:	4461      	add	r1, ip
    ab04:	0020      	movs	r0, r4
    ab06:	4b09      	ldr	r3, [pc, #36]	; (ab2c <rd_decode_service_request+0xa0>)
    ab08:	4798      	blx	r3
    ab0a:	183c      	adds	r4, r7, r0
                decode_character_string(&apdu[len], len_value_type, password);
    ab0c:	1928      	adds	r0, r5, r4
    ab0e:	9a01      	ldr	r2, [sp, #4]
    ab10:	9904      	ldr	r1, [sp, #16]
    ab12:	4b08      	ldr	r3, [pc, #32]	; (ab34 <rd_decode_service_request+0xa8>)
    ab14:	4798      	blx	r3
            len +=
    ab16:	1824      	adds	r4, r4, r0
    ab18:	e7c8      	b.n	aaac <rd_decode_service_request+0x20>
            return -1;
    ab1a:	2001      	movs	r0, #1
    ab1c:	4240      	negs	r0, r0
    ab1e:	e7c6      	b.n	aaae <rd_decode_service_request+0x22>
                return -1;
    ab20:	2001      	movs	r0, #1
    ab22:	4240      	negs	r0, r0
    ab24:	e7c3      	b.n	aaae <rd_decode_service_request+0x22>
    ab26:	46c0      	nop			; (mov r8, r8)
    ab28:	00002efd 	.word	0x00002efd
    ab2c:	00002dc1 	.word	0x00002dc1
    ab30:	0000363d 	.word	0x0000363d
    ab34:	00003355 	.word	0x00003355

0000ab38 <reject_convert_error_code>:
 */
BACNET_REJECT_REASON reject_convert_error_code(BACNET_ERROR_CODE error_code)
{
    BACNET_REJECT_REASON reject_code = REJECT_REASON_OTHER;

    switch (error_code) {
    ab38:	383b      	subs	r0, #59	; 0x3b
    ab3a:	b283      	uxth	r3, r0
    ab3c:	2b09      	cmp	r3, #9
    ab3e:	d815      	bhi.n	ab6c <reject_convert_error_code+0x34>
    ab40:	0098      	lsls	r0, r3, #2
    ab42:	4b0c      	ldr	r3, [pc, #48]	; (ab74 <reject_convert_error_code+0x3c>)
    ab44:	581b      	ldr	r3, [r3, r0]
    ab46:	469f      	mov	pc, r3
        case ERROR_CODE_REJECT_BUFFER_OVERFLOW:
            reject_code = REJECT_REASON_BUFFER_OVERFLOW;
    ab48:	2001      	movs	r0, #1
    ab4a:	e012      	b.n	ab72 <reject_convert_error_code+0x3a>
            break;
        case ERROR_CODE_REJECT_INCONSISTENT_PARAMETERS:
            reject_code = REJECT_REASON_INCONSISTENT_PARAMETERS;
            break;
        case ERROR_CODE_REJECT_INVALID_PARAMETER_DATA_TYPE:
            reject_code = REJECT_REASON_INVALID_PARAMETER_DATA_TYPE;
    ab4c:	2003      	movs	r0, #3
            break;
    ab4e:	e010      	b.n	ab72 <reject_convert_error_code+0x3a>
        case ERROR_CODE_REJECT_INVALID_TAG:
            reject_code = REJECT_REASON_INVALID_TAG;
    ab50:	2004      	movs	r0, #4
            break;
    ab52:	e00e      	b.n	ab72 <reject_convert_error_code+0x3a>
        case ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER:
            reject_code = REJECT_REASON_MISSING_REQUIRED_PARAMETER;
    ab54:	2005      	movs	r0, #5
            break;
    ab56:	e00c      	b.n	ab72 <reject_convert_error_code+0x3a>
        case ERROR_CODE_REJECT_PARAMETER_OUT_OF_RANGE:
            reject_code = REJECT_REASON_PARAMETER_OUT_OF_RANGE;
    ab58:	2006      	movs	r0, #6
            break;
    ab5a:	e00a      	b.n	ab72 <reject_convert_error_code+0x3a>
        case ERROR_CODE_REJECT_TOO_MANY_ARGUMENTS:
            reject_code = REJECT_REASON_TOO_MANY_ARGUMENTS;
    ab5c:	2007      	movs	r0, #7
            break;
    ab5e:	e008      	b.n	ab72 <reject_convert_error_code+0x3a>
        case ERROR_CODE_REJECT_UNDEFINED_ENUMERATION:
            reject_code = REJECT_REASON_UNDEFINED_ENUMERATION;
    ab60:	2008      	movs	r0, #8
            break;
    ab62:	e006      	b.n	ab72 <reject_convert_error_code+0x3a>
        case ERROR_CODE_REJECT_UNRECOGNIZED_SERVICE:
            reject_code = REJECT_REASON_UNRECOGNIZED_SERVICE;
    ab64:	2009      	movs	r0, #9
            break;
    ab66:	e004      	b.n	ab72 <reject_convert_error_code+0x3a>
        case ERROR_CODE_REJECT_PROPRIETARY:
            reject_code = REJECT_REASON_PROPRIETARY_FIRST;
    ab68:	2040      	movs	r0, #64	; 0x40
            break;
    ab6a:	e002      	b.n	ab72 <reject_convert_error_code+0x3a>
        case ERROR_CODE_REJECT_OTHER:
        default:
            reject_code = REJECT_REASON_OTHER;
    ab6c:	2000      	movs	r0, #0
            break;
    ab6e:	e000      	b.n	ab72 <reject_convert_error_code+0x3a>
            reject_code = REJECT_REASON_INCONSISTENT_PARAMETERS;
    ab70:	2002      	movs	r0, #2
    }

    return (reject_code);
}
    ab72:	4770      	bx	lr
    ab74:	0000f90c 	.word	0x0000f90c

0000ab78 <reject_encode_apdu>:
/* encode service */
int reject_encode_apdu(uint8_t *apdu, uint8_t invoke_id, uint8_t reject_reason)
{
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    ab78:	2800      	cmp	r0, #0
    ab7a:	d005      	beq.n	ab88 <reject_encode_apdu+0x10>
        apdu[0] = PDU_TYPE_REJECT;
    ab7c:	2360      	movs	r3, #96	; 0x60
    ab7e:	7003      	strb	r3, [r0, #0]
        apdu[1] = invoke_id;
    ab80:	7041      	strb	r1, [r0, #1]
        apdu[2] = reject_reason;
    ab82:	7082      	strb	r2, [r0, #2]
        apdu_len = 3;
    ab84:	2003      	movs	r0, #3
    }

    return apdu_len;
}
    ab86:	4770      	bx	lr
    int apdu_len = 0; /* total length of the apdu, return value */
    ab88:	2000      	movs	r0, #0
    return apdu_len;
    ab8a:	e7fc      	b.n	ab86 <reject_encode_apdu+0xe>

0000ab8c <rp_decode_service_request>:
#endif

/* decode the service request only */
int rp_decode_service_request(
    uint8_t *apdu, unsigned apdu_len, BACNET_READ_PROPERTY_DATA *rpdata)
{
    ab8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab8e:	46c6      	mov	lr, r8
    ab90:	b500      	push	{lr}
    ab92:	b086      	sub	sp, #24
    ab94:	0006      	movs	r6, r0
    ab96:	000f      	movs	r7, r1
    ab98:	0015      	movs	r5, r2
    unsigned len = 0;
    uint8_t tag_number = 0;
    ab9a:	2300      	movs	r3, #0
    ab9c:	2217      	movs	r2, #23
    ab9e:	446a      	add	r2, sp
    aba0:	7013      	strb	r3, [r2, #0]
    uint32_t len_value_type = 0;
    aba2:	9304      	str	r3, [sp, #16]
    BACNET_OBJECT_TYPE type = OBJECT_NONE; /* for decoding */
    aba4:	2101      	movs	r1, #1
    aba6:	4249      	negs	r1, r1
    aba8:	220e      	movs	r2, #14
    abaa:	446a      	add	r2, sp
    abac:	8011      	strh	r1, [r2, #0]
    uint32_t property = 0; /* for decoding */
    abae:	9302      	str	r3, [sp, #8]
    BACNET_UNSIGNED_INTEGER unsigned_value = 0; /* for decoding */
    abb0:	2200      	movs	r2, #0
    abb2:	2300      	movs	r3, #0
    abb4:	9200      	str	r2, [sp, #0]
    abb6:	9301      	str	r3, [sp, #4]

    /* check for value pointers */
    if (rpdata) {
    abb8:	2d00      	cmp	r5, #0
    abba:	d060      	beq.n	ac7e <rp_decode_service_request+0xf2>
        /* Must have at least 2 tags, an object id and a property identifier
         * of at least 1 byte in length to have any chance of parsing */
        if (apdu_len < 7) {
    abbc:	2f06      	cmp	r7, #6
    abbe:	d933      	bls.n	ac28 <rp_decode_service_request+0x9c>
            rpdata->error_code = ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER;
            return BACNET_STATUS_REJECT;
        }

        /* Tag 0: Object ID          */
        if (!decode_is_context_tag(&apdu[len++], 0)) {
    abc0:	2100      	movs	r1, #0
    abc2:	4b34      	ldr	r3, [pc, #208]	; (ac94 <rp_decode_service_request+0x108>)
    abc4:	4798      	blx	r3
    abc6:	2800      	cmp	r0, #0
    abc8:	d033      	beq.n	ac32 <rp_decode_service_request+0xa6>
            rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }
        len += decode_object_id(&apdu[len], &type, &rpdata->object_instance);
    abca:	1d2a      	adds	r2, r5, #4
    abcc:	230e      	movs	r3, #14
    abce:	446b      	add	r3, sp
    abd0:	4698      	mov	r8, r3
    abd2:	1c70      	adds	r0, r6, #1
    abd4:	0019      	movs	r1, r3
    abd6:	4b30      	ldr	r3, [pc, #192]	; (ac98 <rp_decode_service_request+0x10c>)
    abd8:	4798      	blx	r3
    abda:	1c44      	adds	r4, r0, #1
        rpdata->object_type = type;
    abdc:	4643      	mov	r3, r8
    abde:	881b      	ldrh	r3, [r3, #0]
    abe0:	802b      	strh	r3, [r5, #0]
        /* Tag 1: Property ID */
        len += decode_tag_number_and_value(
    abe2:	2317      	movs	r3, #23
    abe4:	446b      	add	r3, sp
    abe6:	4698      	mov	r8, r3
    abe8:	1930      	adds	r0, r6, r4
    abea:	aa04      	add	r2, sp, #16
    abec:	0019      	movs	r1, r3
    abee:	4b2b      	ldr	r3, [pc, #172]	; (ac9c <rp_decode_service_request+0x110>)
    abf0:	4798      	blx	r3
    abf2:	1824      	adds	r4, r4, r0
            &apdu[len], &tag_number, &len_value_type);
        if (tag_number != 1) {
    abf4:	4643      	mov	r3, r8
    abf6:	781b      	ldrb	r3, [r3, #0]
    abf8:	2b01      	cmp	r3, #1
    abfa:	d11e      	bne.n	ac3a <rp_decode_service_request+0xae>
            rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }
        len += decode_enumerated(&apdu[len], len_value_type, &property);
    abfc:	1930      	adds	r0, r6, r4
    abfe:	aa02      	add	r2, sp, #8
    ac00:	9904      	ldr	r1, [sp, #16]
    ac02:	4b27      	ldr	r3, [pc, #156]	; (aca0 <rp_decode_service_request+0x114>)
    ac04:	4798      	blx	r3
    ac06:	1824      	adds	r4, r4, r0
        rpdata->object_property = (BACNET_PROPERTY_ID)property;
    ac08:	9b02      	ldr	r3, [sp, #8]
    ac0a:	60ab      	str	r3, [r5, #8]
        /* Tag 2: Optional Array Index */
        if (len < apdu_len) {
    ac0c:	42a7      	cmp	r7, r4
    ac0e:	d819      	bhi.n	ac44 <rp_decode_service_request+0xb8>
            } else {
                rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
                return BACNET_STATUS_REJECT;
            }
        } else {
            rpdata->array_index = BACNET_ARRAY_ALL;
    ac10:	2301      	movs	r3, #1
    ac12:	425b      	negs	r3, r3
    ac14:	60eb      	str	r3, [r5, #12]
        }
    }

    if (len < apdu_len) {
    ac16:	42bc      	cmp	r4, r7
    ac18:	d233      	bcs.n	ac82 <rp_decode_service_request+0xf6>
        /* If something left over now, we have an invalid request */
        if (rpdata) {
    ac1a:	2d00      	cmp	r5, #0
    ac1c:	d036      	beq.n	ac8c <rp_decode_service_request+0x100>
            rpdata->error_code = ERROR_CODE_REJECT_TOO_MANY_ARGUMENTS;
    ac1e:	2341      	movs	r3, #65	; 0x41
    ac20:	836b      	strh	r3, [r5, #26]
        }
        return BACNET_STATUS_REJECT;
    ac22:	2003      	movs	r0, #3
    ac24:	4240      	negs	r0, r0
    ac26:	e02d      	b.n	ac84 <rp_decode_service_request+0xf8>
            rpdata->error_code = ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER;
    ac28:	233f      	movs	r3, #63	; 0x3f
    ac2a:	836b      	strh	r3, [r5, #26]
            return BACNET_STATUS_REJECT;
    ac2c:	2003      	movs	r0, #3
    ac2e:	4240      	negs	r0, r0
    ac30:	e028      	b.n	ac84 <rp_decode_service_request+0xf8>
            rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
    ac32:	233e      	movs	r3, #62	; 0x3e
    ac34:	836b      	strh	r3, [r5, #26]
            return BACNET_STATUS_REJECT;
    ac36:	3803      	subs	r0, #3
    ac38:	e024      	b.n	ac84 <rp_decode_service_request+0xf8>
            rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
    ac3a:	233e      	movs	r3, #62	; 0x3e
    ac3c:	836b      	strh	r3, [r5, #26]
            return BACNET_STATUS_REJECT;
    ac3e:	2003      	movs	r0, #3
    ac40:	4240      	negs	r0, r0
    ac42:	e01f      	b.n	ac84 <rp_decode_service_request+0xf8>
            len += decode_tag_number_and_value(
    ac44:	2317      	movs	r3, #23
    ac46:	446b      	add	r3, sp
    ac48:	4698      	mov	r8, r3
    ac4a:	1930      	adds	r0, r6, r4
    ac4c:	aa04      	add	r2, sp, #16
    ac4e:	0019      	movs	r1, r3
    ac50:	4b12      	ldr	r3, [pc, #72]	; (ac9c <rp_decode_service_request+0x110>)
    ac52:	4798      	blx	r3
    ac54:	1824      	adds	r4, r4, r0
            if ((tag_number == 2) && (len < apdu_len)) {
    ac56:	4643      	mov	r3, r8
    ac58:	781b      	ldrb	r3, [r3, #0]
    ac5a:	2b02      	cmp	r3, #2
    ac5c:	d10a      	bne.n	ac74 <rp_decode_service_request+0xe8>
    ac5e:	42a7      	cmp	r7, r4
    ac60:	d908      	bls.n	ac74 <rp_decode_service_request+0xe8>
                    decode_unsigned(&apdu[len], len_value_type, &unsigned_value);
    ac62:	1930      	adds	r0, r6, r4
    ac64:	466a      	mov	r2, sp
    ac66:	9904      	ldr	r1, [sp, #16]
    ac68:	4b0e      	ldr	r3, [pc, #56]	; (aca4 <rp_decode_service_request+0x118>)
    ac6a:	4798      	blx	r3
                len +=
    ac6c:	1824      	adds	r4, r4, r0
                rpdata->array_index = (BACNET_ARRAY_INDEX)unsigned_value;
    ac6e:	9b00      	ldr	r3, [sp, #0]
    ac70:	60eb      	str	r3, [r5, #12]
    ac72:	e7d0      	b.n	ac16 <rp_decode_service_request+0x8a>
                rpdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
    ac74:	233e      	movs	r3, #62	; 0x3e
    ac76:	836b      	strh	r3, [r5, #26]
                return BACNET_STATUS_REJECT;
    ac78:	2003      	movs	r0, #3
    ac7a:	4240      	negs	r0, r0
    ac7c:	e002      	b.n	ac84 <rp_decode_service_request+0xf8>
    unsigned len = 0;
    ac7e:	2400      	movs	r4, #0
    ac80:	e7c9      	b.n	ac16 <rp_decode_service_request+0x8a>
    }

    return (int)len;
    ac82:	0020      	movs	r0, r4
}
    ac84:	b006      	add	sp, #24
    ac86:	bc04      	pop	{r2}
    ac88:	4690      	mov	r8, r2
    ac8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BACNET_STATUS_REJECT;
    ac8c:	2003      	movs	r0, #3
    ac8e:	4240      	negs	r0, r0
    ac90:	e7f8      	b.n	ac84 <rp_decode_service_request+0xf8>
    ac92:	46c0      	nop			; (mov r8, r8)
    ac94:	00002efd 	.word	0x00002efd
    ac98:	000030ed 	.word	0x000030ed
    ac9c:	00002dc1 	.word	0x00002dc1
    aca0:	0000363d 	.word	0x0000363d
    aca4:	000034ed 	.word	0x000034ed

0000aca8 <rp_ack_encode_apdu_init>:

/* alternate method to encode the ack without extra buffer */
int rp_ack_encode_apdu_init(
    uint8_t *apdu, uint8_t invoke_id, BACNET_READ_PROPERTY_DATA *rpdata)
{
    aca8:	b570      	push	{r4, r5, r6, lr}
    acaa:	0005      	movs	r5, r0
    acac:	0016      	movs	r6, r2
    int len = 0; /* length of each encoding */
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    acae:	2800      	cmp	r0, #0
    acb0:	d020      	beq.n	acf4 <rp_ack_encode_apdu_init+0x4c>
        apdu[0] = PDU_TYPE_COMPLEX_ACK; /* complex ACK service */
    acb2:	2330      	movs	r3, #48	; 0x30
    acb4:	7003      	strb	r3, [r0, #0]
        apdu[1] = invoke_id; /* original invoke id from request */
    acb6:	7041      	strb	r1, [r0, #1]
        apdu[2] = SERVICE_CONFIRMED_READ_PROPERTY; /* service choice */
    acb8:	3b24      	subs	r3, #36	; 0x24
    acba:	7083      	strb	r3, [r0, #2]
        apdu_len = 3;

        /* service ack follows */
        len = encode_context_object_id(
    acbc:	3003      	adds	r0, #3
    acbe:	8812      	ldrh	r2, [r2, #0]
    acc0:	6873      	ldr	r3, [r6, #4]
    acc2:	2100      	movs	r1, #0
    acc4:	4c0c      	ldr	r4, [pc, #48]	; (acf8 <rp_ack_encode_apdu_init+0x50>)
    acc6:	47a0      	blx	r4
            &apdu[apdu_len], 0, rpdata->object_type, rpdata->object_instance);
        apdu_len += len;
    acc8:	1cc4      	adds	r4, r0, #3
        len = encode_context_enumerated(
    acca:	1928      	adds	r0, r5, r4
    accc:	68b2      	ldr	r2, [r6, #8]
    acce:	2101      	movs	r1, #1
    acd0:	4b0a      	ldr	r3, [pc, #40]	; (acfc <rp_ack_encode_apdu_init+0x54>)
    acd2:	4798      	blx	r3
            &apdu[apdu_len], 1, rpdata->object_property);
        apdu_len += len;
    acd4:	1824      	adds	r4, r4, r0
        /* context 2 array index is optional */
        if (rpdata->array_index != BACNET_ARRAY_ALL) {
    acd6:	68f2      	ldr	r2, [r6, #12]
    acd8:	1c53      	adds	r3, r2, #1
    acda:	d005      	beq.n	ace8 <rp_ack_encode_apdu_init+0x40>
            len = encode_context_unsigned(
    acdc:	1928      	adds	r0, r5, r4
    acde:	2300      	movs	r3, #0
    ace0:	2102      	movs	r1, #2
    ace2:	4e07      	ldr	r6, [pc, #28]	; (ad00 <rp_ack_encode_apdu_init+0x58>)
    ace4:	47b0      	blx	r6
                &apdu[apdu_len], 2, rpdata->array_index);
            apdu_len += len;
    ace6:	1824      	adds	r4, r4, r0
        }
        len = encode_opening_tag(&apdu[apdu_len], 3);
    ace8:	1928      	adds	r0, r5, r4
    acea:	2103      	movs	r1, #3
    acec:	4b05      	ldr	r3, [pc, #20]	; (ad04 <rp_ack_encode_apdu_init+0x5c>)
    acee:	4798      	blx	r3
        apdu_len += len;
    acf0:	1820      	adds	r0, r4, r0
    }

    return apdu_len;
}
    acf2:	bd70      	pop	{r4, r5, r6, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    acf4:	2000      	movs	r0, #0
    return apdu_len;
    acf6:	e7fc      	b.n	acf2 <rp_ack_encode_apdu_init+0x4a>
    acf8:	00003145 	.word	0x00003145
    acfc:	00003715 	.word	0x00003715
    ad00:	000035a5 	.word	0x000035a5
    ad04:	00002cfd 	.word	0x00002cfd

0000ad08 <rp_ack_encode_apdu_object_property_end>:

/* note: encode the application tagged data yourself */
int rp_ack_encode_apdu_object_property_end(uint8_t *apdu)
{
    ad08:	b510      	push	{r4, lr}
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    ad0a:	2800      	cmp	r0, #0
    ad0c:	d003      	beq.n	ad16 <rp_ack_encode_apdu_object_property_end+0xe>
        apdu_len = encode_closing_tag(&apdu[0], 3);
    ad0e:	2103      	movs	r1, #3
    ad10:	4b02      	ldr	r3, [pc, #8]	; (ad1c <rp_ack_encode_apdu_object_property_end+0x14>)
    ad12:	4798      	blx	r3
    }

    return apdu_len;
}
    ad14:	bd10      	pop	{r4, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    ad16:	2000      	movs	r0, #0
    return apdu_len;
    ad18:	e7fc      	b.n	ad14 <rp_ack_encode_apdu_object_property_end+0xc>
    ad1a:	46c0      	nop			; (mov r8, r8)
    ad1c:	00002d23 	.word	0x00002d23

0000ad20 <rpm_decode_object_id>:
/* decode the object portion of the service request only. Bails out if
 * tags are wrong or missing/incomplete
 */
int rpm_decode_object_id(
    uint8_t *apdu, unsigned apdu_len, BACNET_RPM_DATA *rpmdata)
{
    ad20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad22:	b083      	sub	sp, #12
    ad24:	0004      	movs	r4, r0
    ad26:	0016      	movs	r6, r2
    int len = 0;
    BACNET_OBJECT_TYPE type = OBJECT_NONE; /* for decoding */
    ad28:	2201      	movs	r2, #1
    ad2a:	4252      	negs	r2, r2
    ad2c:	466b      	mov	r3, sp
    ad2e:	80da      	strh	r2, [r3, #6]

    /* check for value pointers */
    if (apdu && apdu_len && rpmdata) {
    ad30:	2800      	cmp	r0, #0
    ad32:	d02b      	beq.n	ad8c <rpm_decode_object_id+0x6c>
    ad34:	2900      	cmp	r1, #0
    ad36:	d02b      	beq.n	ad90 <rpm_decode_object_id+0x70>
    ad38:	2e00      	cmp	r6, #0
    ad3a:	d02b      	beq.n	ad94 <rpm_decode_object_id+0x74>
        if (apdu_len < 5) { /* Must be at least 2 tags and an object id */
    ad3c:	2904      	cmp	r1, #4
    ad3e:	d918      	bls.n	ad72 <rpm_decode_object_id+0x52>
            rpmdata->error_code = ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER;
            return BACNET_STATUS_REJECT;
        }
        /* Tag 0: Object ID */
        if (!decode_is_context_tag(&apdu[len++], 0)) {
    ad40:	2100      	movs	r1, #0
    ad42:	4b15      	ldr	r3, [pc, #84]	; (ad98 <rpm_decode_object_id+0x78>)
    ad44:	4798      	blx	r3
    ad46:	2800      	cmp	r0, #0
    ad48:	d018      	beq.n	ad7c <rpm_decode_object_id+0x5c>
            rpmdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }
        len += decode_object_id(&apdu[len], &type, &rpmdata->object_instance);
    ad4a:	1d32      	adds	r2, r6, #4
    ad4c:	466b      	mov	r3, sp
    ad4e:	1d9f      	adds	r7, r3, #6
    ad50:	1c60      	adds	r0, r4, #1
    ad52:	0039      	movs	r1, r7
    ad54:	4b11      	ldr	r3, [pc, #68]	; (ad9c <rpm_decode_object_id+0x7c>)
    ad56:	4798      	blx	r3
    ad58:	0005      	movs	r5, r0
    ad5a:	3001      	adds	r0, #1
        rpmdata->object_type = type;
    ad5c:	883b      	ldrh	r3, [r7, #0]
    ad5e:	8033      	strh	r3, [r6, #0]
        /* Tag 1: sequence of ReadAccessSpecification */
        if (!decode_is_opening_tag_number(&apdu[len], 1)) {
    ad60:	1820      	adds	r0, r4, r0
    ad62:	2101      	movs	r1, #1
    ad64:	4b0e      	ldr	r3, [pc, #56]	; (ada0 <rpm_decode_object_id+0x80>)
    ad66:	4798      	blx	r3
    ad68:	2800      	cmp	r0, #0
    ad6a:	d00b      	beq.n	ad84 <rpm_decode_object_id+0x64>
            rpmdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }
        len++; /* opening tag is only one octet */
    ad6c:	1ca8      	adds	r0, r5, #2
    }

    return len;
}
    ad6e:	b003      	add	sp, #12
    ad70:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rpmdata->error_code = ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER;
    ad72:	233f      	movs	r3, #63	; 0x3f
    ad74:	8273      	strh	r3, [r6, #18]
            return BACNET_STATUS_REJECT;
    ad76:	2003      	movs	r0, #3
    ad78:	4240      	negs	r0, r0
    ad7a:	e7f8      	b.n	ad6e <rpm_decode_object_id+0x4e>
            rpmdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
    ad7c:	233e      	movs	r3, #62	; 0x3e
    ad7e:	8273      	strh	r3, [r6, #18]
            return BACNET_STATUS_REJECT;
    ad80:	3803      	subs	r0, #3
    ad82:	e7f4      	b.n	ad6e <rpm_decode_object_id+0x4e>
            rpmdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
    ad84:	233e      	movs	r3, #62	; 0x3e
    ad86:	8273      	strh	r3, [r6, #18]
            return BACNET_STATUS_REJECT;
    ad88:	3803      	subs	r0, #3
    ad8a:	e7f0      	b.n	ad6e <rpm_decode_object_id+0x4e>
    int len = 0;
    ad8c:	2000      	movs	r0, #0
    ad8e:	e7ee      	b.n	ad6e <rpm_decode_object_id+0x4e>
    ad90:	2000      	movs	r0, #0
    ad92:	e7ec      	b.n	ad6e <rpm_decode_object_id+0x4e>
    ad94:	2000      	movs	r0, #0
    ad96:	e7ea      	b.n	ad6e <rpm_decode_object_id+0x4e>
    ad98:	00002efd 	.word	0x00002efd
    ad9c:	000030ed 	.word	0x000030ed
    ada0:	00002f35 	.word	0x00002f35

0000ada4 <rpm_decode_object_property>:
        -- if omitted with an array the entire array is referenced
    }
*/
int rpm_decode_object_property(
    uint8_t *apdu, unsigned apdu_len, BACNET_RPM_DATA *rpmdata)
{
    ada4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ada6:	46c6      	mov	lr, r8
    ada8:	b500      	push	{lr}
    adaa:	b086      	sub	sp, #24
    adac:	0005      	movs	r5, r0
    adae:	000f      	movs	r7, r1
    adb0:	0016      	movs	r6, r2
    int len = 0;
    int option_len = 0;
    uint8_t tag_number = 0;
    adb2:	2300      	movs	r3, #0
    adb4:	2217      	movs	r2, #23
    adb6:	446a      	add	r2, sp
    adb8:	7013      	strb	r3, [r2, #0]
    uint32_t len_value_type = 0;
    adba:	9304      	str	r3, [sp, #16]
    uint32_t property = 0; /* for decoding */
    adbc:	9303      	str	r3, [sp, #12]
    BACNET_UNSIGNED_INTEGER unsigned_value = 0; /* for decoding */
    adbe:	2200      	movs	r2, #0
    adc0:	2300      	movs	r3, #0
    adc2:	9200      	str	r2, [sp, #0]
    adc4:	9301      	str	r3, [sp, #4]

    /* check for valid pointers */
    if (apdu && apdu_len && rpmdata) {
    adc6:	2800      	cmp	r0, #0
    adc8:	d054      	beq.n	ae74 <rpm_decode_object_property+0xd0>
    adca:	2900      	cmp	r1, #0
    adcc:	d054      	beq.n	ae78 <rpm_decode_object_property+0xd4>
    adce:	2e00      	cmp	r6, #0
    add0:	d058      	beq.n	ae84 <rpm_decode_object_property+0xe0>
        /* Tag 0: propertyIdentifier */
        if (!IS_CONTEXT_SPECIFIC(apdu[len])) {
    add2:	7803      	ldrb	r3, [r0, #0]
    add4:	071b      	lsls	r3, r3, #28
    add6:	d539      	bpl.n	ae4c <rpm_decode_object_property+0xa8>
            rpmdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }

        len += decode_tag_number_and_value(
    add8:	2317      	movs	r3, #23
    adda:	446b      	add	r3, sp
    addc:	4698      	mov	r8, r3
    adde:	aa04      	add	r2, sp, #16
    ade0:	0019      	movs	r1, r3
    ade2:	4b29      	ldr	r3, [pc, #164]	; (ae88 <rpm_decode_object_property+0xe4>)
    ade4:	4798      	blx	r3
    ade6:	0004      	movs	r4, r0
            &apdu[len], &tag_number, &len_value_type);
        if (tag_number != 0) {
    ade8:	4643      	mov	r3, r8
    adea:	781b      	ldrb	r3, [r3, #0]
    adec:	2b00      	cmp	r3, #0
    adee:	d132      	bne.n	ae56 <rpm_decode_object_property+0xb2>
            rpmdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
            return BACNET_STATUS_REJECT;
        }
        /* Should be at least the unsigned value + 1 tag left */
        if ((len + len_value_type) >= apdu_len) {
    adf0:	9904      	ldr	r1, [sp, #16]
    adf2:	1843      	adds	r3, r0, r1
    adf4:	429f      	cmp	r7, r3
    adf6:	d933      	bls.n	ae60 <rpm_decode_object_property+0xbc>
            rpmdata->error_code = ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER;
            return BACNET_STATUS_REJECT;
        }
        len += decode_enumerated(&apdu[len], len_value_type, &property);
    adf8:	1828      	adds	r0, r5, r0
    adfa:	aa03      	add	r2, sp, #12
    adfc:	4b23      	ldr	r3, [pc, #140]	; (ae8c <rpm_decode_object_property+0xe8>)
    adfe:	4798      	blx	r3
    ae00:	1824      	adds	r4, r4, r0
        rpmdata->object_property = (BACNET_PROPERTY_ID)property;
    ae02:	9b03      	ldr	r3, [sp, #12]
    ae04:	60b3      	str	r3, [r6, #8]
        /* Assume most probable outcome */
        rpmdata->array_index = BACNET_ARRAY_ALL;
    ae06:	2301      	movs	r3, #1
    ae08:	425b      	negs	r3, r3
    ae0a:	60f3      	str	r3, [r6, #12]
        /* Tag 1: Optional propertyArrayIndex */
        if (IS_CONTEXT_SPECIFIC(apdu[len]) && !IS_CLOSING_TAG(apdu[len])) {
    ae0c:	1928      	adds	r0, r5, r4
    ae0e:	7803      	ldrb	r3, [r0, #0]
    ae10:	071a      	lsls	r2, r3, #28
    ae12:	d532      	bpl.n	ae7a <rpm_decode_object_property+0xd6>
    ae14:	2207      	movs	r2, #7
    ae16:	4013      	ands	r3, r2
    ae18:	2b07      	cmp	r3, #7
    ae1a:	d02e      	beq.n	ae7a <rpm_decode_object_property+0xd6>
            option_len = decode_tag_number_and_value(
    ae1c:	2317      	movs	r3, #23
    ae1e:	446b      	add	r3, sp
    ae20:	4698      	mov	r8, r3
    ae22:	aa04      	add	r2, sp, #16
    ae24:	0019      	movs	r1, r3
    ae26:	4b18      	ldr	r3, [pc, #96]	; (ae88 <rpm_decode_object_property+0xe4>)
    ae28:	4798      	blx	r3
                &apdu[len], &tag_number, &len_value_type);
            if (tag_number == 1) {
    ae2a:	4643      	mov	r3, r8
    ae2c:	781b      	ldrb	r3, [r3, #0]
    ae2e:	2b01      	cmp	r3, #1
    ae30:	d123      	bne.n	ae7a <rpm_decode_object_property+0xd6>
                len += option_len;
    ae32:	1824      	adds	r4, r4, r0
                /* Should be at least the unsigned array index + 1 tag left */
                if ((len + len_value_type) >= apdu_len) {
    ae34:	9904      	ldr	r1, [sp, #16]
    ae36:	1863      	adds	r3, r4, r1
    ae38:	429f      	cmp	r7, r3
    ae3a:	d916      	bls.n	ae6a <rpm_decode_object_property+0xc6>
                    rpmdata->error_code =
                        ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER;
                    return BACNET_STATUS_REJECT;
                }
                len +=
                    decode_unsigned(&apdu[len], len_value_type, &unsigned_value);
    ae3c:	1928      	adds	r0, r5, r4
    ae3e:	466a      	mov	r2, sp
    ae40:	4b13      	ldr	r3, [pc, #76]	; (ae90 <rpm_decode_object_property+0xec>)
    ae42:	4798      	blx	r3
                len +=
    ae44:	1824      	adds	r4, r4, r0
                rpmdata->array_index = unsigned_value;
    ae46:	9b00      	ldr	r3, [sp, #0]
    ae48:	60f3      	str	r3, [r6, #12]
    ae4a:	e016      	b.n	ae7a <rpm_decode_object_property+0xd6>
            rpmdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
    ae4c:	233e      	movs	r3, #62	; 0x3e
    ae4e:	8273      	strh	r3, [r6, #18]
            return BACNET_STATUS_REJECT;
    ae50:	2403      	movs	r4, #3
    ae52:	4264      	negs	r4, r4
    ae54:	e011      	b.n	ae7a <rpm_decode_object_property+0xd6>
            rpmdata->error_code = ERROR_CODE_REJECT_INVALID_TAG;
    ae56:	233e      	movs	r3, #62	; 0x3e
    ae58:	8273      	strh	r3, [r6, #18]
            return BACNET_STATUS_REJECT;
    ae5a:	2403      	movs	r4, #3
    ae5c:	4264      	negs	r4, r4
    ae5e:	e00c      	b.n	ae7a <rpm_decode_object_property+0xd6>
            rpmdata->error_code = ERROR_CODE_REJECT_MISSING_REQUIRED_PARAMETER;
    ae60:	233f      	movs	r3, #63	; 0x3f
    ae62:	8273      	strh	r3, [r6, #18]
            return BACNET_STATUS_REJECT;
    ae64:	2403      	movs	r4, #3
    ae66:	4264      	negs	r4, r4
    ae68:	e007      	b.n	ae7a <rpm_decode_object_property+0xd6>
                    rpmdata->error_code =
    ae6a:	233f      	movs	r3, #63	; 0x3f
    ae6c:	8273      	strh	r3, [r6, #18]
                    return BACNET_STATUS_REJECT;
    ae6e:	2403      	movs	r4, #3
    ae70:	4264      	negs	r4, r4
    ae72:	e002      	b.n	ae7a <rpm_decode_object_property+0xd6>
    int len = 0;
    ae74:	2400      	movs	r4, #0
    ae76:	e000      	b.n	ae7a <rpm_decode_object_property+0xd6>
    ae78:	2400      	movs	r4, #0
            }
        }
    }

    return len;
}
    ae7a:	0020      	movs	r0, r4
    ae7c:	b006      	add	sp, #24
    ae7e:	bc04      	pop	{r2}
    ae80:	4690      	mov	r8, r2
    ae82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int len = 0;
    ae84:	2400      	movs	r4, #0
    ae86:	e7f8      	b.n	ae7a <rpm_decode_object_property+0xd6>
    ae88:	00002dc1 	.word	0x00002dc1
    ae8c:	0000363d 	.word	0x0000363d
    ae90:	000034ed 	.word	0x000034ed

0000ae94 <rpm_ack_encode_apdu_init>:

int rpm_ack_encode_apdu_init(uint8_t *apdu, uint8_t invoke_id)
{
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    ae94:	2800      	cmp	r0, #0
    ae96:	d006      	beq.n	aea6 <rpm_ack_encode_apdu_init+0x12>
        apdu[0] = PDU_TYPE_COMPLEX_ACK; /* complex ACK service */
    ae98:	2330      	movs	r3, #48	; 0x30
    ae9a:	7003      	strb	r3, [r0, #0]
        apdu[1] = invoke_id; /* original invoke id from request */
    ae9c:	7041      	strb	r1, [r0, #1]
        apdu[2] = SERVICE_CONFIRMED_READ_PROP_MULTIPLE; /* service choice */
    ae9e:	3b22      	subs	r3, #34	; 0x22
    aea0:	7083      	strb	r3, [r0, #2]
        apdu_len = 3;
    aea2:	2003      	movs	r0, #3
    }

    return apdu_len;
}
    aea4:	4770      	bx	lr
    int apdu_len = 0; /* total length of the apdu, return value */
    aea6:	2000      	movs	r0, #0
    return apdu_len;
    aea8:	e7fc      	b.n	aea4 <rpm_ack_encode_apdu_init+0x10>
	...

0000aeac <rpm_ack_encode_apdu_object_begin>:

int rpm_ack_encode_apdu_object_begin(uint8_t *apdu, BACNET_RPM_DATA *rpmdata)
{
    aeac:	b570      	push	{r4, r5, r6, lr}
    aeae:	1e04      	subs	r4, r0, #0
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    aeb0:	d00b      	beq.n	aeca <rpm_ack_encode_apdu_object_begin+0x1e>
        /* Tag 0: objectIdentifier */
        apdu_len = encode_context_object_id(
    aeb2:	880a      	ldrh	r2, [r1, #0]
    aeb4:	684b      	ldr	r3, [r1, #4]
    aeb6:	2100      	movs	r1, #0
    aeb8:	4d05      	ldr	r5, [pc, #20]	; (aed0 <rpm_ack_encode_apdu_object_begin+0x24>)
    aeba:	47a8      	blx	r5
    aebc:	0005      	movs	r5, r0
            &apdu[0], 0, rpmdata->object_type, rpmdata->object_instance);
        /* Tag 1: listOfResults */
        apdu_len += encode_opening_tag(&apdu[apdu_len], 1);
    aebe:	1820      	adds	r0, r4, r0
    aec0:	2101      	movs	r1, #1
    aec2:	4b04      	ldr	r3, [pc, #16]	; (aed4 <rpm_ack_encode_apdu_object_begin+0x28>)
    aec4:	4798      	blx	r3
    aec6:	1828      	adds	r0, r5, r0
    }

    return apdu_len;
}
    aec8:	bd70      	pop	{r4, r5, r6, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    aeca:	2000      	movs	r0, #0
    return apdu_len;
    aecc:	e7fc      	b.n	aec8 <rpm_ack_encode_apdu_object_begin+0x1c>
    aece:	46c0      	nop			; (mov r8, r8)
    aed0:	00003145 	.word	0x00003145
    aed4:	00002cfd 	.word	0x00002cfd

0000aed8 <rpm_ack_encode_apdu_object_property>:

int rpm_ack_encode_apdu_object_property(
    uint8_t *apdu, BACNET_PROPERTY_ID object_property, BACNET_ARRAY_INDEX array_index)
{
    aed8:	b570      	push	{r4, r5, r6, lr}
    aeda:	0004      	movs	r4, r0
    aedc:	0016      	movs	r6, r2
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    aede:	2800      	cmp	r0, #0
    aee0:	d00f      	beq.n	af02 <rpm_ack_encode_apdu_object_property+0x2a>
        /* Tag 2: propertyIdentifier */
        apdu_len = encode_context_enumerated(&apdu[0], 2, object_property);
    aee2:	000a      	movs	r2, r1
    aee4:	2102      	movs	r1, #2
    aee6:	4b08      	ldr	r3, [pc, #32]	; (af08 <rpm_ack_encode_apdu_object_property+0x30>)
    aee8:	4798      	blx	r3
    aeea:	0005      	movs	r5, r0
        /* Tag 3: optional propertyArrayIndex */
        if (array_index != BACNET_ARRAY_ALL) {
    aeec:	1c73      	adds	r3, r6, #1
    aeee:	d006      	beq.n	aefe <rpm_ack_encode_apdu_object_property+0x26>
            apdu_len +=
                encode_context_unsigned(&apdu[apdu_len], 3, array_index);
    aef0:	1820      	adds	r0, r4, r0
    aef2:	0032      	movs	r2, r6
    aef4:	2300      	movs	r3, #0
    aef6:	2103      	movs	r1, #3
    aef8:	4c04      	ldr	r4, [pc, #16]	; (af0c <rpm_ack_encode_apdu_object_property+0x34>)
    aefa:	47a0      	blx	r4
            apdu_len +=
    aefc:	182d      	adds	r5, r5, r0
        }
    }

    return apdu_len;
}
    aefe:	0028      	movs	r0, r5
    af00:	bd70      	pop	{r4, r5, r6, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    af02:	2500      	movs	r5, #0
    return apdu_len;
    af04:	e7fb      	b.n	aefe <rpm_ack_encode_apdu_object_property+0x26>
    af06:	46c0      	nop			; (mov r8, r8)
    af08:	00003715 	.word	0x00003715
    af0c:	000035a5 	.word	0x000035a5

0000af10 <rpm_ack_encode_apdu_object_property_value>:

int rpm_ack_encode_apdu_object_property_value(
    uint8_t *apdu, uint8_t *application_data, unsigned application_data_len)
{
    af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af12:	0005      	movs	r5, r0
    af14:	000e      	movs	r6, r1
    af16:	0017      	movs	r7, r2
    int apdu_len = 0; /* total length of the apdu, return value */
    unsigned len = 0;

    if (apdu) {
    af18:	2800      	cmp	r0, #0
    af1a:	d016      	beq.n	af4a <rpm_ack_encode_apdu_object_property_value+0x3a>
        /* Tag 4: propertyValue */
        apdu_len += encode_opening_tag(&apdu[apdu_len], 4);
    af1c:	2104      	movs	r1, #4
    af1e:	4b0c      	ldr	r3, [pc, #48]	; (af50 <rpm_ack_encode_apdu_object_property_value+0x40>)
    af20:	4798      	blx	r3
    af22:	0004      	movs	r4, r0
        if (application_data ==
            &apdu[apdu_len]) { /* Is Data already in place? */
    af24:	182b      	adds	r3, r5, r0
        if (application_data ==
    af26:	42b3      	cmp	r3, r6
    af28:	d001      	beq.n	af2e <rpm_ack_encode_apdu_object_property_value+0x1e>
    af2a:	2300      	movs	r3, #0
    af2c:	e005      	b.n	af3a <rpm_ack_encode_apdu_object_property_value+0x2a>
            apdu_len += application_data_len; /* Yes, step over data */
    af2e:	19c4      	adds	r4, r0, r7
    af30:	e005      	b.n	af3e <rpm_ack_encode_apdu_object_property_value+0x2e>
        } else { /* No, copy data in */
            for (len = 0; len < application_data_len; len++) {
                apdu[apdu_len++] = application_data[len];
    af32:	5cf2      	ldrb	r2, [r6, r3]
    af34:	552a      	strb	r2, [r5, r4]
            for (len = 0; len < application_data_len; len++) {
    af36:	3301      	adds	r3, #1
                apdu[apdu_len++] = application_data[len];
    af38:	3401      	adds	r4, #1
            for (len = 0; len < application_data_len; len++) {
    af3a:	42bb      	cmp	r3, r7
    af3c:	d3f9      	bcc.n	af32 <rpm_ack_encode_apdu_object_property_value+0x22>
            }
        }
        apdu_len += encode_closing_tag(&apdu[apdu_len], 4);
    af3e:	1928      	adds	r0, r5, r4
    af40:	2104      	movs	r1, #4
    af42:	4b04      	ldr	r3, [pc, #16]	; (af54 <rpm_ack_encode_apdu_object_property_value+0x44>)
    af44:	4798      	blx	r3
    af46:	1820      	adds	r0, r4, r0
    }

    return apdu_len;
}
    af48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    af4a:	2000      	movs	r0, #0
    return apdu_len;
    af4c:	e7fc      	b.n	af48 <rpm_ack_encode_apdu_object_property_value+0x38>
    af4e:	46c0      	nop			; (mov r8, r8)
    af50:	00002cfd 	.word	0x00002cfd
    af54:	00002d23 	.word	0x00002d23

0000af58 <rpm_ack_encode_apdu_object_property_error>:

int rpm_ack_encode_apdu_object_property_error(
    uint8_t *apdu, BACNET_ERROR_CLASS error_class, BACNET_ERROR_CODE error_code)
{
    af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af5a:	0005      	movs	r5, r0
    af5c:	000f      	movs	r7, r1
    af5e:	0016      	movs	r6, r2
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    af60:	2800      	cmp	r0, #0
    af62:	d012      	beq.n	af8a <rpm_ack_encode_apdu_object_property_error+0x32>
        /* Tag 5: propertyAccessError */
        apdu_len += encode_opening_tag(&apdu[apdu_len], 5);
    af64:	2105      	movs	r1, #5
    af66:	4b0a      	ldr	r3, [pc, #40]	; (af90 <rpm_ack_encode_apdu_object_property_error+0x38>)
    af68:	4798      	blx	r3
    af6a:	0004      	movs	r4, r0
        apdu_len += encode_application_enumerated(&apdu[apdu_len], error_class);
    af6c:	1828      	adds	r0, r5, r0
    af6e:	0039      	movs	r1, r7
    af70:	4f08      	ldr	r7, [pc, #32]	; (af94 <rpm_ack_encode_apdu_object_property_error+0x3c>)
    af72:	47b8      	blx	r7
    af74:	1824      	adds	r4, r4, r0
        apdu_len += encode_application_enumerated(&apdu[apdu_len], error_code);
    af76:	1928      	adds	r0, r5, r4
    af78:	0031      	movs	r1, r6
    af7a:	47b8      	blx	r7
    af7c:	1824      	adds	r4, r4, r0
        apdu_len += encode_closing_tag(&apdu[apdu_len], 5);
    af7e:	1928      	adds	r0, r5, r4
    af80:	2105      	movs	r1, #5
    af82:	4b05      	ldr	r3, [pc, #20]	; (af98 <rpm_ack_encode_apdu_object_property_error+0x40>)
    af84:	4798      	blx	r3
    af86:	1820      	adds	r0, r4, r0
    }

    return apdu_len;
}
    af88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    af8a:	2000      	movs	r0, #0
    return apdu_len;
    af8c:	e7fc      	b.n	af88 <rpm_ack_encode_apdu_object_property_error+0x30>
    af8e:	46c0      	nop			; (mov r8, r8)
    af90:	00002cfd 	.word	0x00002cfd
    af94:	000036f1 	.word	0x000036f1
    af98:	00002d23 	.word	0x00002d23

0000af9c <rpm_ack_encode_apdu_object_end>:

int rpm_ack_encode_apdu_object_end(uint8_t *apdu)
{
    af9c:	b510      	push	{r4, lr}
    int apdu_len = 0; /* total length of the apdu, return value */

    if (apdu) {
    af9e:	2800      	cmp	r0, #0
    afa0:	d003      	beq.n	afaa <rpm_ack_encode_apdu_object_end+0xe>
        apdu_len = encode_closing_tag(&apdu[0], 1);
    afa2:	2101      	movs	r1, #1
    afa4:	4b02      	ldr	r3, [pc, #8]	; (afb0 <rpm_ack_encode_apdu_object_end+0x14>)
    afa6:	4798      	blx	r3
    }

    return apdu_len;
}
    afa8:	bd10      	pop	{r4, pc}
    int apdu_len = 0; /* total length of the apdu, return value */
    afaa:	2000      	movs	r0, #0
    return apdu_len;
    afac:	e7fc      	b.n	afa8 <rpm_ack_encode_apdu_object_end+0xc>
    afae:	46c0      	nop			; (mov r8, r8)
    afb0:	00002d23 	.word	0x00002d23

0000afb4 <rs485_turnaround_time>:
/**
 * @brief Determine the turnaround time
 * @return amount of milliseconds
 */
static uint16_t rs485_turnaround_time(void)
{
    afb4:	b510      	push	{r4, lr}
    /* delay after reception before transmitting - per MS/TP spec */
    /* wait a minimum  40 bit times since reception */
    /* at least 2 ms for errors: rounding, clock tick */
    if (Baud_Rate) {
    afb6:	4b06      	ldr	r3, [pc, #24]	; (afd0 <rs485_turnaround_time+0x1c>)
    afb8:	6819      	ldr	r1, [r3, #0]
    afba:	2900      	cmp	r1, #0
    afbc:	d101      	bne.n	afc2 <rs485_turnaround_time+0xe>
        return (2 + ((Tturnaround * 1000UL) / Baud_Rate));
    } else {
        return 2;
    afbe:	2002      	movs	r0, #2
    }
}
    afc0:	bd10      	pop	{r4, pc}
        return (2 + ((Tturnaround * 1000UL) / Baud_Rate));
    afc2:	4804      	ldr	r0, [pc, #16]	; (afd4 <rs485_turnaround_time+0x20>)
    afc4:	4b04      	ldr	r3, [pc, #16]	; (afd8 <rs485_turnaround_time+0x24>)
    afc6:	4798      	blx	r3
    afc8:	3002      	adds	r0, #2
    afca:	b280      	uxth	r0, r0
    afcc:	e7f8      	b.n	afc0 <rs485_turnaround_time+0xc>
    afce:	46c0      	nop			; (mov r8, r8)
    afd0:	20001404 	.word	0x20001404
    afd4:	00009c40 	.word	0x00009c40
    afd8:	0000cbb1 	.word	0x0000cbb1

0000afdc <rs485_clock_init>:

/**
 * Initialize the USART SERCOM module clock
 */
static void rs485_clock_init(void)
{
    afdc:	b500      	push	{lr}
    afde:	b083      	sub	sp, #12
			PM->APBCMASK.reg |= mask;
    afe0:	4a07      	ldr	r2, [pc, #28]	; (b000 <rs485_clock_init+0x24>)
    afe2:	6a13      	ldr	r3, [r2, #32]
    afe4:	2120      	movs	r1, #32
    afe6:	430b      	orrs	r3, r1
    afe8:	6213      	str	r3, [r2, #32]
    afea:	a901      	add	r1, sp, #4
    afec:	2300      	movs	r3, #0
    afee:	700b      	strb	r3, [r1, #0]
    system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_SERCOM3);
    /* Turn on Generic clock for USART */
    system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    /*Default is generator 0. Other wise need to configure like below */
    /* gclk_chan_conf.source_generator = GCLK_GENERATOR_1; */
    system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    aff0:	2017      	movs	r0, #23
    aff2:	4b04      	ldr	r3, [pc, #16]	; (b004 <rs485_clock_init+0x28>)
    aff4:	4798      	blx	r3
    system_gclk_chan_enable(gclk_index);
    aff6:	2017      	movs	r0, #23
    aff8:	4b03      	ldr	r3, [pc, #12]	; (b008 <rs485_clock_init+0x2c>)
    affa:	4798      	blx	r3
}
    affc:	b003      	add	sp, #12
    affe:	bd00      	pop	{pc}
    b000:	40000400 	.word	0x40000400
    b004:	0000c581 	.word	0x0000c581
    b008:	0000c4f9 	.word	0x0000c4f9

0000b00c <rs485_pin_init>:

/**
 * Initialize the RTS pin
 */
static void rs485_pin_init(void)
{
    b00c:	b570      	push	{r4, r5, r6, lr}
	config->powersave  = false;
    b00e:	4c0b      	ldr	r4, [pc, #44]	; (b03c <rs485_pin_init+0x30>)
    b010:	2300      	movs	r3, #0
    b012:	70a3      	strb	r3, [r4, #2]
	//Configure PIN_A24 as DE and PIN_A25 as /RE
    port_get_config_defaults(&RS485_Port_Config);
    RS485_Port_Config.direction = PORT_PIN_DIR_OUTPUT;
    b014:	2601      	movs	r6, #1
    b016:	7026      	strb	r6, [r4, #0]
	
    RS485_Port_Config.input_pull = PORT_PIN_PULL_DOWN;
    b018:	3302      	adds	r3, #2
    b01a:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(RS485_DE, &RS485_Port_Config);
    b01c:	0021      	movs	r1, r4
    b01e:	2018      	movs	r0, #24
    b020:	4d07      	ldr	r5, [pc, #28]	; (b040 <rs485_pin_init+0x34>)
    b022:	47a8      	blx	r5
	
	RS485_Port_Config.input_pull = PORT_PIN_PULL_UP;
    b024:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(RS485_RE, &RS485_Port_Config);
    b026:	0021      	movs	r1, r4
    b028:	2019      	movs	r0, #25
    b02a:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    b02c:	4b05      	ldr	r3, [pc, #20]	; (b044 <rs485_pin_init+0x38>)
    b02e:	2280      	movs	r2, #128	; 0x80
    b030:	0492      	lsls	r2, r2, #18
    b032:	615a      	str	r2, [r3, #20]
    b034:	2280      	movs	r2, #128	; 0x80
    b036:	0452      	lsls	r2, r2, #17
    b038:	615a      	str	r2, [r3, #20]

	
	
    port_pin_set_output_level(RS485_RE, false);
	port_pin_set_output_level(RS485_DE, false);
}
    b03a:	bd70      	pop	{r4, r5, r6, pc}
    b03c:	20001408 	.word	0x20001408
    b040:	0000bf89 	.word	0x0000bf89
    b044:	41004400 	.word	0x41004400

0000b048 <usart_read_callback>:
{
    b048:	b510      	push	{r4, lr}
    if (!Transmitting) {
    b04a:	4b0a      	ldr	r3, [pc, #40]	; (b074 <usart_read_callback+0x2c>)
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	2b00      	cmp	r3, #0
    b050:	d004      	beq.n	b05c <usart_read_callback+0x14>
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    b052:	4909      	ldr	r1, [pc, #36]	; (b078 <usart_read_callback+0x30>)
    b054:	4809      	ldr	r0, [pc, #36]	; (b07c <usart_read_callback+0x34>)
    b056:	4b0a      	ldr	r3, [pc, #40]	; (b080 <usart_read_callback+0x38>)
    b058:	4798      	blx	r3
}
    b05a:	bd10      	pop	{r4, pc}
        FIFO_Put(&Receive_Queue, rx_buffer[0]);
    b05c:	4b06      	ldr	r3, [pc, #24]	; (b078 <usart_read_callback+0x30>)
    b05e:	8819      	ldrh	r1, [r3, #0]
    b060:	b2c9      	uxtb	r1, r1
    b062:	4808      	ldr	r0, [pc, #32]	; (b084 <usart_read_callback+0x3c>)
    b064:	4b08      	ldr	r3, [pc, #32]	; (b088 <usart_read_callback+0x40>)
    b066:	4798      	blx	r3
        RS485_Receive_Bytes++;
    b068:	4a08      	ldr	r2, [pc, #32]	; (b08c <usart_read_callback+0x44>)
    b06a:	6813      	ldr	r3, [r2, #0]
    b06c:	3301      	adds	r3, #1
    b06e:	6013      	str	r3, [r2, #0]
    b070:	e7ef      	b.n	b052 <usart_read_callback+0xa>
    b072:	46c0      	nop			; (mov r8, r8)
    b074:	200018a0 	.word	0x200018a0
    b078:	20001ed4 	.word	0x20001ed4
    b07c:	20001654 	.word	0x20001654
    b080:	0000bcf1 	.word	0x0000bcf1
    b084:	20001688 	.word	0x20001688
    b088:	00002615 	.word	0x00002615
    b08c:	2000140c 	.word	0x2000140c

0000b090 <rs485_usart_init>:

/**
 * Initialize the USART SERCOM module for RS485
 */
static void rs485_usart_init(void)
{
    b090:	b570      	push	{r4, r5, r6, lr}
    enum status_code status;

    /* Disable this module since ASF expects it to be disabled. */
    RS485_USART->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    b092:	4935      	ldr	r1, [pc, #212]	; (b168 <rs485_usart_init+0xd8>)
    b094:	680b      	ldr	r3, [r1, #0]
    b096:	2202      	movs	r2, #2
    b098:	4393      	bics	r3, r2
    b09a:	600b      	str	r3, [r1, #0]
	config->data_order       = USART_DATAORDER_LSB;
    b09c:	4a33      	ldr	r2, [pc, #204]	; (b16c <rs485_usart_init+0xdc>)
    b09e:	2380      	movs	r3, #128	; 0x80
    b0a0:	05db      	lsls	r3, r3, #23
    b0a2:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b0a4:	2300      	movs	r3, #0
    b0a6:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    b0a8:	20ff      	movs	r0, #255	; 0xff
    b0aa:	8110      	strh	r0, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    b0ac:	2000      	movs	r0, #0
    b0ae:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b0b0:	72d3      	strb	r3, [r2, #11]
	config->receiver_enable  = true;
    b0b2:	2401      	movs	r4, #1
    b0b4:	2524      	movs	r5, #36	; 0x24
    b0b6:	5554      	strb	r4, [r2, r5]
	config->transmitter_enable = true;
    b0b8:	3501      	adds	r5, #1
    b0ba:	5554      	strb	r4, [r2, r5]
	config->clock_polarity_inverted = false;
    b0bc:	3425      	adds	r4, #37	; 0x25
    b0be:	5513      	strb	r3, [r2, r4]
	config->use_external_clock = false;
    b0c0:	3401      	adds	r4, #1
    b0c2:	5513      	strb	r3, [r2, r4]
	config->ext_clock_freq   = 0;
    b0c4:	6293      	str	r3, [r2, #40]	; 0x28
	config->run_in_standby   = false;
    b0c6:	3405      	adds	r4, #5
    b0c8:	5513      	strb	r3, [r2, r4]
	config->generator_source = GCLK_GENERATOR_0;
    b0ca:	3401      	adds	r4, #1
    b0cc:	5513      	strb	r3, [r2, r4]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b0ce:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b0d0:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
    b0d2:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
    b0d4:	7610      	strb	r0, [r2, #24]
	config->start_frame_detection_enable            = false;
    b0d6:	7710      	strb	r0, [r2, #28]
	config->encoding_format_enable                  = false;
    b0d8:	7650      	strb	r0, [r2, #25]
	config->receive_pulse_length                    = 19;
    b0da:	2313      	movs	r3, #19
    b0dc:	7693      	strb	r3, [r2, #26]
	config->collision_detection_enable              = false;
    b0de:	7750      	strb	r0, [r2, #29]
    // Get default settings
    usart_get_config_defaults(&RS485_USART_Config);
    RS485_USART_Config.baudrate = Baud_Rate;
    b0e0:	4b23      	ldr	r3, [pc, #140]	; (b170 <rs485_usart_init+0xe0>)
    b0e2:	681b      	ldr	r3, [r3, #0]
    b0e4:	6213      	str	r3, [r2, #32]
    RS485_USART_Config.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
    b0e6:	2390      	movs	r3, #144	; 0x90
    b0e8:	035b      	lsls	r3, r3, #13
    b0ea:	60d3      	str	r3, [r2, #12]
    RS485_USART_Config.pinmux_pad0 = RS485_TX;
    b0ec:	4b21      	ldr	r3, [pc, #132]	; (b174 <rs485_usart_init+0xe4>)
    b0ee:	6313      	str	r3, [r2, #48]	; 0x30
    RS485_USART_Config.pinmux_pad1 = RS485_RX;
    b0f0:	4b21      	ldr	r3, [pc, #132]	; (b178 <rs485_usart_init+0xe8>)
    b0f2:	6353      	str	r3, [r2, #52]	; 0x34
    RS485_USART_Config.pinmux_pad2 = PINMUX_UNUSED;
    b0f4:	2301      	movs	r3, #1
    b0f6:	425b      	negs	r3, r3
    b0f8:	6393      	str	r3, [r2, #56]	; 0x38
    RS485_USART_Config.pinmux_pad3 = PINMUX_UNUSED;
    b0fa:	63d3      	str	r3, [r2, #60]	; 0x3c
    status = usart_init(&RS485_USART_Module, RS485_USART, &RS485_USART_Config);
    b0fc:	481f      	ldr	r0, [pc, #124]	; (b17c <rs485_usart_init+0xec>)
    b0fe:	4b20      	ldr	r3, [pc, #128]	; (b180 <rs485_usart_init+0xf0>)
    b100:	4798      	blx	r3
    while (status != STATUS_OK) {
    b102:	2800      	cmp	r0, #0
    b104:	d1fd      	bne.n	b102 <rs485_usart_init+0x72>
	SercomUsart *const usart_hw = &(module->hw->USART);
    b106:	4b1d      	ldr	r3, [pc, #116]	; (b17c <rs485_usart_init+0xec>)
    b108:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b10a:	0020      	movs	r0, r4
    b10c:	4b1d      	ldr	r3, [pc, #116]	; (b184 <rs485_usart_init+0xf4>)
    b10e:	4798      	blx	r3
    b110:	231f      	movs	r3, #31
    b112:	4018      	ands	r0, r3
    b114:	3b1e      	subs	r3, #30
    b116:	4083      	lsls	r3, r0
    b118:	4a1b      	ldr	r2, [pc, #108]	; (b188 <rs485_usart_init+0xf8>)
    b11a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b11c:	4b17      	ldr	r3, [pc, #92]	; (b17c <rs485_usart_init+0xec>)
    b11e:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    b120:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    b122:	2b00      	cmp	r3, #0
    b124:	d1fa      	bne.n	b11c <rs485_usart_init+0x8c>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b126:	6823      	ldr	r3, [r4, #0]
    b128:	2202      	movs	r2, #2
    b12a:	4313      	orrs	r3, r2
    b12c:	6023      	str	r3, [r4, #0]
        /* hardware not initialized correctly - figure out why! */
    }
    usart_enable(&RS485_USART_Module);
#ifdef USART_CALLBACK_MODE
    usart_register_callback(&RS485_USART_Module, usart_read_callback,
    b12e:	4c13      	ldr	r4, [pc, #76]	; (b17c <rs485_usart_init+0xec>)
    b130:	3a01      	subs	r2, #1
    b132:	4916      	ldr	r1, [pc, #88]	; (b18c <rs485_usart_init+0xfc>)
    b134:	0020      	movs	r0, r4
    b136:	4e16      	ldr	r6, [pc, #88]	; (b190 <rs485_usart_init+0x100>)
    b138:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    b13a:	2531      	movs	r5, #49	; 0x31
    b13c:	5d63      	ldrb	r3, [r4, r5]
    b13e:	2202      	movs	r2, #2
    b140:	4313      	orrs	r3, r2
    b142:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_RECEIVED);
    usart_enable_callback(&RS485_USART_Module, USART_CALLBACK_BUFFER_RECEIVED);
    usart_register_callback(&RS485_USART_Module, usart_write_callback,
    b144:	2200      	movs	r2, #0
    b146:	4913      	ldr	r1, [pc, #76]	; (b194 <rs485_usart_init+0x104>)
    b148:	0020      	movs	r0, r4
    b14a:	47b0      	blx	r6
    b14c:	5d63      	ldrb	r3, [r4, r5]
    b14e:	2201      	movs	r2, #1
    b150:	4313      	orrs	r3, r2
    b152:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(
        &RS485_USART_Module, USART_CALLBACK_BUFFER_TRANSMITTED);
    system_interrupt_set_priority(
    b154:	2100      	movs	r1, #0
    b156:	200c      	movs	r0, #12
    b158:	4b0f      	ldr	r3, [pc, #60]	; (b198 <rs485_usart_init+0x108>)
    b15a:	4798      	blx	r3
        SYSTEM_INTERRUPT_MODULE_SERCOM3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    /* initial callback call to prepare to begin receiving data */
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    b15c:	490f      	ldr	r1, [pc, #60]	; (b19c <rs485_usart_init+0x10c>)
    b15e:	0020      	movs	r0, r4
    b160:	4b0f      	ldr	r3, [pc, #60]	; (b1a0 <rs485_usart_init+0x110>)
    b162:	4798      	blx	r3
#endif    
}
    b164:	bd70      	pop	{r4, r5, r6, pc}
    b166:	46c0      	nop			; (mov r8, r8)
    b168:	42001400 	.word	0x42001400
    b16c:	20001614 	.word	0x20001614
    b170:	20001404 	.word	0x20001404
    b174:	00160002 	.word	0x00160002
    b178:	00170002 	.word	0x00170002
    b17c:	20001654 	.word	0x20001654
    b180:	0000b9e5 	.word	0x0000b9e5
    b184:	0000bf05 	.word	0x0000bf05
    b188:	e000e100 	.word	0xe000e100
    b18c:	0000b049 	.word	0x0000b049
    b190:	0000bcd9 	.word	0x0000bcd9
    b194:	0000b245 	.word	0x0000b245
    b198:	0000c5d1 	.word	0x0000c5d1
    b19c:	20001ed4 	.word	0x20001ed4
    b1a0:	0000bcf1 	.word	0x0000bcf1

0000b1a4 <rs485_silence_reset>:
{
    b1a4:	b510      	push	{r4, lr}
    mstimer_set(&Silence_Timer, 0);
    b1a6:	2100      	movs	r1, #0
    b1a8:	4801      	ldr	r0, [pc, #4]	; (b1b0 <rs485_silence_reset+0xc>)
    b1aa:	4b02      	ldr	r3, [pc, #8]	; (b1b4 <rs485_silence_reset+0x10>)
    b1ac:	4798      	blx	r3
}
    b1ae:	bd10      	pop	{r4, pc}
    b1b0:	20001898 	.word	0x20001898
    b1b4:	00002669 	.word	0x00002669

0000b1b8 <rs485_silence_elapsed>:
{
    b1b8:	b510      	push	{r4, lr}
    b1ba:	0004      	movs	r4, r0
    return (mstimer_elapsed(&Silence_Timer) > interval);
    b1bc:	4803      	ldr	r0, [pc, #12]	; (b1cc <rs485_silence_elapsed+0x14>)
    b1be:	4b04      	ldr	r3, [pc, #16]	; (b1d0 <rs485_silence_elapsed+0x18>)
    b1c0:	4798      	blx	r3
    b1c2:	4284      	cmp	r4, r0
    b1c4:	4180      	sbcs	r0, r0
    b1c6:	4240      	negs	r0, r0
}
    b1c8:	bd10      	pop	{r4, pc}
    b1ca:	46c0      	nop			; (mov r8, r8)
    b1cc:	20001898 	.word	0x20001898
    b1d0:	000026b5 	.word	0x000026b5

0000b1d4 <rs485_turnaround_elapsed>:
{
    b1d4:	b510      	push	{r4, lr}
    return (mstimer_elapsed(&Silence_Timer) > rs485_turnaround_time());
    b1d6:	4805      	ldr	r0, [pc, #20]	; (b1ec <rs485_turnaround_elapsed+0x18>)
    b1d8:	4b05      	ldr	r3, [pc, #20]	; (b1f0 <rs485_turnaround_elapsed+0x1c>)
    b1da:	4798      	blx	r3
    b1dc:	0004      	movs	r4, r0
    b1de:	4b05      	ldr	r3, [pc, #20]	; (b1f4 <rs485_turnaround_elapsed+0x20>)
    b1e0:	4798      	blx	r3
    b1e2:	42a0      	cmp	r0, r4
    b1e4:	4180      	sbcs	r0, r0
    b1e6:	4240      	negs	r0, r0
}
    b1e8:	bd10      	pop	{r4, pc}
    b1ea:	46c0      	nop			; (mov r8, r8)
    b1ec:	20001898 	.word	0x20001898
    b1f0:	000026b5 	.word	0x000026b5
    b1f4:	0000afb5 	.word	0x0000afb5

0000b1f8 <rs485_rts_enable>:
{
    b1f8:	b510      	push	{r4, lr}
    if (enable) {
    b1fa:	2800      	cmp	r0, #0
    b1fc:	d10c      	bne.n	b218 <rs485_rts_enable+0x20>
    b1fe:	4b0d      	ldr	r3, [pc, #52]	; (b234 <rs485_rts_enable+0x3c>)
    b200:	2280      	movs	r2, #128	; 0x80
    b202:	0492      	lsls	r2, r2, #18
    b204:	615a      	str	r2, [r3, #20]
    b206:	2280      	movs	r2, #128	; 0x80
    b208:	0452      	lsls	r2, r2, #17
    b20a:	615a      	str	r2, [r3, #20]
        led_tx_off();
    b20c:	4b0a      	ldr	r3, [pc, #40]	; (b238 <rs485_rts_enable+0x40>)
    b20e:	4798      	blx	r3
        Transmitting = false;
    b210:	2200      	movs	r2, #0
    b212:	4b0a      	ldr	r3, [pc, #40]	; (b23c <rs485_rts_enable+0x44>)
    b214:	701a      	strb	r2, [r3, #0]
}
    b216:	bd10      	pop	{r4, pc}
        Transmitting = true;
    b218:	2201      	movs	r2, #1
    b21a:	4b08      	ldr	r3, [pc, #32]	; (b23c <rs485_rts_enable+0x44>)
    b21c:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    b21e:	4b05      	ldr	r3, [pc, #20]	; (b234 <rs485_rts_enable+0x3c>)
    b220:	2280      	movs	r2, #128	; 0x80
    b222:	0492      	lsls	r2, r2, #18
    b224:	619a      	str	r2, [r3, #24]
    b226:	2280      	movs	r2, #128	; 0x80
    b228:	0452      	lsls	r2, r2, #17
    b22a:	619a      	str	r2, [r3, #24]
        led_tx_on();
    b22c:	4b04      	ldr	r3, [pc, #16]	; (b240 <rs485_rts_enable+0x48>)
    b22e:	4798      	blx	r3
    b230:	e7f1      	b.n	b216 <rs485_rts_enable+0x1e>
    b232:	46c0      	nop			; (mov r8, r8)
    b234:	41004400 	.word	0x41004400
    b238:	000096fd 	.word	0x000096fd
    b23c:	200018a0 	.word	0x200018a0
    b240:	000096ed 	.word	0x000096ed

0000b244 <usart_write_callback>:
{
    b244:	b510      	push	{r4, lr}
    rs485_rts_enable(false);
    b246:	2000      	movs	r0, #0
    b248:	4b01      	ldr	r3, [pc, #4]	; (b250 <usart_write_callback+0xc>)
    b24a:	4798      	blx	r3
}
    b24c:	bd10      	pop	{r4, pc}
    b24e:	46c0      	nop			; (mov r8, r8)
    b250:	0000b1f9 	.word	0x0000b1f9

0000b254 <rs485_rts_enabled>:
    return Transmitting;
    b254:	4b01      	ldr	r3, [pc, #4]	; (b25c <rs485_rts_enabled+0x8>)
    b256:	7818      	ldrb	r0, [r3, #0]
    b258:	b2c0      	uxtb	r0, r0
}
    b25a:	4770      	bx	lr
    b25c:	200018a0 	.word	0x200018a0

0000b260 <rs485_byte_available>:
{
    b260:	b510      	push	{r4, lr}
    b262:	0004      	movs	r4, r0
    if (!FIFO_Empty(&Receive_Queue)) {
    b264:	4808      	ldr	r0, [pc, #32]	; (b288 <rs485_byte_available+0x28>)
    b266:	4b09      	ldr	r3, [pc, #36]	; (b28c <rs485_byte_available+0x2c>)
    b268:	4798      	blx	r3
    b26a:	2800      	cmp	r0, #0
    b26c:	d107      	bne.n	b27e <rs485_byte_available+0x1e>
        if (data_register) {
    b26e:	2c00      	cmp	r4, #0
    b270:	d007      	beq.n	b282 <rs485_byte_available+0x22>
            *data_register = FIFO_Get(&Receive_Queue);
    b272:	4805      	ldr	r0, [pc, #20]	; (b288 <rs485_byte_available+0x28>)
    b274:	4b06      	ldr	r3, [pc, #24]	; (b290 <rs485_byte_available+0x30>)
    b276:	4798      	blx	r3
    b278:	7020      	strb	r0, [r4, #0]
        data_available = true;
    b27a:	2001      	movs	r0, #1
}
    b27c:	bd10      	pop	{r4, pc}
    bool data_available = false; /* return value */
    b27e:	2000      	movs	r0, #0
    b280:	e7fc      	b.n	b27c <rs485_byte_available+0x1c>
        data_available = true;
    b282:	2001      	movs	r0, #1
    b284:	e7fa      	b.n	b27c <rs485_byte_available+0x1c>
    b286:	46c0      	nop			; (mov r8, r8)
    b288:	20001688 	.word	0x20001688
    b28c:	000025c1 	.word	0x000025c1
    b290:	000025e1 	.word	0x000025e1

0000b294 <rs485_receive_error>:
}
    b294:	2000      	movs	r0, #0
    b296:	4770      	bx	lr

0000b298 <rs485_bytes_send>:
{
    b298:	b570      	push	{r4, r5, r6, lr}
    b29a:	000d      	movs	r5, r1
    if (buffer && (nbytes > 0) && (nbytes < sizeof(RS485_Transmit_Buffer))) {
    b29c:	2800      	cmp	r0, #0
    b29e:	d01f      	beq.n	b2e0 <rs485_bytes_send+0x48>
    b2a0:	2900      	cmp	r1, #0
    b2a2:	d01f      	beq.n	b2e4 <rs485_bytes_send+0x4c>
    b2a4:	4b12      	ldr	r3, [pc, #72]	; (b2f0 <rs485_bytes_send+0x58>)
    b2a6:	4299      	cmp	r1, r3
    b2a8:	d901      	bls.n	b2ae <rs485_bytes_send+0x16>
    enum status_code status = STATUS_OK;
    b2aa:	2400      	movs	r4, #0
    b2ac:	e01b      	b.n	b2e6 <rs485_bytes_send+0x4e>
        memcpy(RS485_Transmit_Buffer, buffer, nbytes);
    b2ae:	4c11      	ldr	r4, [pc, #68]	; (b2f4 <rs485_bytes_send+0x5c>)
    b2b0:	000a      	movs	r2, r1
    b2b2:	0001      	movs	r1, r0
    b2b4:	0020      	movs	r0, r4
    b2b6:	4b10      	ldr	r3, [pc, #64]	; (b2f8 <rs485_bytes_send+0x60>)
    b2b8:	4798      	blx	r3
        rs485_rts_enable(true);
    b2ba:	2001      	movs	r0, #1
    b2bc:	4b0f      	ldr	r3, [pc, #60]	; (b2fc <rs485_bytes_send+0x64>)
    b2be:	4798      	blx	r3
        status = usart_write_buffer_job(
    b2c0:	002a      	movs	r2, r5
    b2c2:	0021      	movs	r1, r4
    b2c4:	480e      	ldr	r0, [pc, #56]	; (b300 <rs485_bytes_send+0x68>)
    b2c6:	4b0f      	ldr	r3, [pc, #60]	; (b304 <rs485_bytes_send+0x6c>)
    b2c8:	4798      	blx	r3
    b2ca:	1e04      	subs	r4, r0, #0
        if (status == STATUS_OK) {
    b2cc:	d104      	bne.n	b2d8 <rs485_bytes_send+0x40>
            RS485_Transmit_Bytes += nbytes;
    b2ce:	4b0e      	ldr	r3, [pc, #56]	; (b308 <rs485_bytes_send+0x70>)
    b2d0:	681a      	ldr	r2, [r3, #0]
    b2d2:	18ad      	adds	r5, r5, r2
    b2d4:	601d      	str	r5, [r3, #0]
    b2d6:	e006      	b.n	b2e6 <rs485_bytes_send+0x4e>
            rs485_rts_enable(false);
    b2d8:	2000      	movs	r0, #0
    b2da:	4b08      	ldr	r3, [pc, #32]	; (b2fc <rs485_bytes_send+0x64>)
    b2dc:	4798      	blx	r3
    b2de:	e002      	b.n	b2e6 <rs485_bytes_send+0x4e>
    enum status_code status = STATUS_OK;
    b2e0:	2400      	movs	r4, #0
    b2e2:	e000      	b.n	b2e6 <rs485_bytes_send+0x4e>
    b2e4:	2400      	movs	r4, #0
    return (status == STATUS_OK);
    b2e6:	4260      	negs	r0, r4
    b2e8:	4160      	adcs	r0, r4
    b2ea:	b2c0      	uxtb	r0, r0
}
    b2ec:	bd70      	pop	{r4, r5, r6, pc}
    b2ee:	46c0      	nop			; (mov r8, r8)
    b2f0:	000001ff 	.word	0x000001ff
    b2f4:	20001410 	.word	0x20001410
    b2f8:	0000db0d 	.word	0x0000db0d
    b2fc:	0000b1f9 	.word	0x0000b1f9
    b300:	20001654 	.word	0x20001654
    b304:	0000bd01 	.word	0x0000bd01
    b308:	20001610 	.word	0x20001610

0000b30c <rs485_baud_rate>:
    return Baud_Rate;
    b30c:	4b01      	ldr	r3, [pc, #4]	; (b314 <rs485_baud_rate+0x8>)
    b30e:	6818      	ldr	r0, [r3, #0]
}
    b310:	4770      	bx	lr
    b312:	46c0      	nop			; (mov r8, r8)
    b314:	20001404 	.word	0x20001404

0000b318 <rs485_baud_rate_set>:
    switch (baudrate) {
    b318:	2396      	movs	r3, #150	; 0x96
    b31a:	021b      	lsls	r3, r3, #8
    b31c:	4298      	cmp	r0, r3
    b31e:	d103      	bne.n	b328 <rs485_baud_rate_set+0x10>
            Baud_Rate = baudrate;
    b320:	4b02      	ldr	r3, [pc, #8]	; (b32c <rs485_baud_rate_set+0x14>)
    b322:	6018      	str	r0, [r3, #0]
    bool valid = true;
    b324:	2001      	movs	r0, #1
}
    b326:	4770      	bx	lr
            valid = false;
    b328:	2000      	movs	r0, #0
    b32a:	e7fc      	b.n	b326 <rs485_baud_rate_set+0xe>
    b32c:	20001404 	.word	0x20001404

0000b330 <rs485_init>:

/* SERCOM3 UART initialization */
void rs485_init(void)
{
    b330:	b510      	push	{r4, lr}
    /* initialize the Rx and Tx byte queues */
    FIFO_Init(&Receive_Queue, &Receive_Queue_Data[0],
    b332:	2280      	movs	r2, #128	; 0x80
    b334:	0092      	lsls	r2, r2, #2
    b336:	4905      	ldr	r1, [pc, #20]	; (b34c <rs485_init+0x1c>)
    b338:	4805      	ldr	r0, [pc, #20]	; (b350 <rs485_init+0x20>)
    b33a:	4b06      	ldr	r3, [pc, #24]	; (b354 <rs485_init+0x24>)
    b33c:	4798      	blx	r3
        (unsigned)sizeof(Receive_Queue_Data));
    rs485_clock_init();
    b33e:	4b06      	ldr	r3, [pc, #24]	; (b358 <rs485_init+0x28>)
    b340:	4798      	blx	r3
    rs485_pin_init();
    b342:	4b06      	ldr	r3, [pc, #24]	; (b35c <rs485_init+0x2c>)
    b344:	4798      	blx	r3
    rs485_usart_init();
    b346:	4b06      	ldr	r3, [pc, #24]	; (b360 <rs485_init+0x30>)
    b348:	4798      	blx	r3
}
    b34a:	bd10      	pop	{r4, pc}
    b34c:	20001698 	.word	0x20001698
    b350:	20001688 	.word	0x20001688
    b354:	00002651 	.word	0x00002651
    b358:	0000afdd 	.word	0x0000afdd
    b35c:	0000b00d 	.word	0x0000b00d
    b360:	0000b091 	.word	0x0000b091

0000b364 <whohas_decode_service_request>:
}

/* decode the service request only */
int whohas_decode_service_request(
    uint8_t *apdu, unsigned apdu_len, BACNET_WHO_HAS_DATA *data)
{
    b364:	b5f0      	push	{r4, r5, r6, r7, lr}
    b366:	b087      	sub	sp, #28
    b368:	0006      	movs	r6, r0
    b36a:	0015      	movs	r5, r2
    int len = 0;
    uint8_t tag_number = 0;
    b36c:	2300      	movs	r3, #0
    b36e:	2217      	movs	r2, #23
    b370:	446a      	add	r2, sp
    b372:	7013      	strb	r3, [r2, #0]
    uint32_t len_value = 0;
    b374:	9304      	str	r3, [sp, #16]
    BACNET_UNSIGNED_INTEGER unsigned_value = 0;
    b376:	2200      	movs	r2, #0
    b378:	2300      	movs	r3, #0
    b37a:	9202      	str	r2, [sp, #8]
    b37c:	9303      	str	r3, [sp, #12]
    BACNET_OBJECT_TYPE decoded_type = OBJECT_NONE;
    b37e:	3a01      	subs	r2, #1
    b380:	466b      	mov	r3, sp
    b382:	80da      	strh	r2, [r3, #6]

    if (apdu_len && data) {
    b384:	2900      	cmp	r1, #0
    b386:	d073      	beq.n	b470 <whohas_decode_service_request+0x10c>
    b388:	2d00      	cmp	r5, #0
    b38a:	d100      	bne.n	b38e <whohas_decode_service_request+0x2a>
    b38c:	e073      	b.n	b476 <whohas_decode_service_request+0x112>
        /* optional limits - must be used as a pair */
        if (decode_is_context_tag(&apdu[len], 0)) {
    b38e:	2100      	movs	r1, #0
    b390:	4b3d      	ldr	r3, [pc, #244]	; (b488 <whohas_decode_service_request+0x124>)
    b392:	4798      	blx	r3
    b394:	2800      	cmp	r0, #0
    b396:	d122      	bne.n	b3de <whohas_decode_service_request+0x7a>
            len += decode_unsigned(&apdu[len], len_value, &unsigned_value);
            if (unsigned_value <= BACNET_MAX_INSTANCE) {
                data->high_limit = unsigned_value;
            }
        } else {
            data->low_limit = -1;
    b398:	2301      	movs	r3, #1
    b39a:	425b      	negs	r3, r3
    b39c:	602b      	str	r3, [r5, #0]
            data->high_limit = -1;
    b39e:	606b      	str	r3, [r5, #4]
    int len = 0;
    b3a0:	2400      	movs	r4, #0
        }
        /* object id */
        if (decode_is_context_tag(&apdu[len], 2)) {
    b3a2:	1937      	adds	r7, r6, r4
    b3a4:	2102      	movs	r1, #2
    b3a6:	0038      	movs	r0, r7
    b3a8:	4b37      	ldr	r3, [pc, #220]	; (b488 <whohas_decode_service_request+0x124>)
    b3aa:	4798      	blx	r3
    b3ac:	2800      	cmp	r0, #0
    b3ae:	d14a      	bne.n	b446 <whohas_decode_service_request+0xe2>
            len += decode_object_id(
                &apdu[len], &decoded_type, &data->object.identifier.instance);
            data->object.identifier.type = decoded_type;
        }
        /* object name */
        else if (decode_is_context_tag(&apdu[len], 3)) {
    b3b0:	2103      	movs	r1, #3
    b3b2:	0038      	movs	r0, r7
    b3b4:	4b34      	ldr	r3, [pc, #208]	; (b488 <whohas_decode_service_request+0x124>)
    b3b6:	4798      	blx	r3
    b3b8:	2800      	cmp	r0, #0
    b3ba:	d061      	beq.n	b480 <whohas_decode_service_request+0x11c>
            data->is_object_name = true;
    b3bc:	2301      	movs	r3, #1
    b3be:	722b      	strb	r3, [r5, #8]
            len += decode_tag_number_and_value(
    b3c0:	aa04      	add	r2, sp, #16
    b3c2:	2117      	movs	r1, #23
    b3c4:	4469      	add	r1, sp
    b3c6:	0038      	movs	r0, r7
    b3c8:	4b30      	ldr	r3, [pc, #192]	; (b48c <whohas_decode_service_request+0x128>)
    b3ca:	4798      	blx	r3
    b3cc:	1824      	adds	r4, r4, r0
                &apdu[len], &tag_number, &len_value);
            len += decode_character_string(
    b3ce:	002a      	movs	r2, r5
    b3d0:	320c      	adds	r2, #12
    b3d2:	1930      	adds	r0, r6, r4
    b3d4:	9904      	ldr	r1, [sp, #16]
    b3d6:	4b2e      	ldr	r3, [pc, #184]	; (b490 <whohas_decode_service_request+0x12c>)
    b3d8:	4798      	blx	r3
    b3da:	1820      	adds	r0, r4, r0
    b3dc:	e049      	b.n	b472 <whohas_decode_service_request+0x10e>
            len += decode_tag_number_and_value(
    b3de:	aa04      	add	r2, sp, #16
    b3e0:	2117      	movs	r1, #23
    b3e2:	4469      	add	r1, sp
    b3e4:	0030      	movs	r0, r6
    b3e6:	4b29      	ldr	r3, [pc, #164]	; (b48c <whohas_decode_service_request+0x128>)
    b3e8:	4798      	blx	r3
    b3ea:	0004      	movs	r4, r0
            len += decode_unsigned(&apdu[len], len_value, &unsigned_value);
    b3ec:	1830      	adds	r0, r6, r0
    b3ee:	aa02      	add	r2, sp, #8
    b3f0:	9904      	ldr	r1, [sp, #16]
    b3f2:	4b28      	ldr	r3, [pc, #160]	; (b494 <whohas_decode_service_request+0x130>)
    b3f4:	4798      	blx	r3
    b3f6:	1824      	adds	r4, r4, r0
            if (unsigned_value <= BACNET_MAX_INSTANCE) {
    b3f8:	9a02      	ldr	r2, [sp, #8]
    b3fa:	9b03      	ldr	r3, [sp, #12]
    b3fc:	2b00      	cmp	r3, #0
    b3fe:	d104      	bne.n	b40a <whohas_decode_service_request+0xa6>
    b400:	d102      	bne.n	b408 <whohas_decode_service_request+0xa4>
    b402:	4b25      	ldr	r3, [pc, #148]	; (b498 <whohas_decode_service_request+0x134>)
    b404:	429a      	cmp	r2, r3
    b406:	d800      	bhi.n	b40a <whohas_decode_service_request+0xa6>
                data->low_limit = unsigned_value;
    b408:	602a      	str	r2, [r5, #0]
            if (!decode_is_context_tag(&apdu[len], 1)) {
    b40a:	1937      	adds	r7, r6, r4
    b40c:	2101      	movs	r1, #1
    b40e:	0038      	movs	r0, r7
    b410:	4b1d      	ldr	r3, [pc, #116]	; (b488 <whohas_decode_service_request+0x124>)
    b412:	4798      	blx	r3
    b414:	2800      	cmp	r0, #0
    b416:	d030      	beq.n	b47a <whohas_decode_service_request+0x116>
            len += decode_tag_number_and_value(
    b418:	aa04      	add	r2, sp, #16
    b41a:	2117      	movs	r1, #23
    b41c:	4469      	add	r1, sp
    b41e:	0038      	movs	r0, r7
    b420:	4b1a      	ldr	r3, [pc, #104]	; (b48c <whohas_decode_service_request+0x128>)
    b422:	4798      	blx	r3
    b424:	1824      	adds	r4, r4, r0
            len += decode_unsigned(&apdu[len], len_value, &unsigned_value);
    b426:	1930      	adds	r0, r6, r4
    b428:	aa02      	add	r2, sp, #8
    b42a:	9904      	ldr	r1, [sp, #16]
    b42c:	4b19      	ldr	r3, [pc, #100]	; (b494 <whohas_decode_service_request+0x130>)
    b42e:	4798      	blx	r3
    b430:	1824      	adds	r4, r4, r0
            if (unsigned_value <= BACNET_MAX_INSTANCE) {
    b432:	9a02      	ldr	r2, [sp, #8]
    b434:	9b03      	ldr	r3, [sp, #12]
    b436:	2b00      	cmp	r3, #0
    b438:	d1b3      	bne.n	b3a2 <whohas_decode_service_request+0x3e>
    b43a:	d102      	bne.n	b442 <whohas_decode_service_request+0xde>
    b43c:	4b16      	ldr	r3, [pc, #88]	; (b498 <whohas_decode_service_request+0x134>)
    b43e:	429a      	cmp	r2, r3
    b440:	d8af      	bhi.n	b3a2 <whohas_decode_service_request+0x3e>
                data->high_limit = unsigned_value;
    b442:	606a      	str	r2, [r5, #4]
    b444:	e7ad      	b.n	b3a2 <whohas_decode_service_request+0x3e>
            data->is_object_name = false;
    b446:	2300      	movs	r3, #0
    b448:	722b      	strb	r3, [r5, #8]
            len += decode_tag_number_and_value(
    b44a:	aa04      	add	r2, sp, #16
    b44c:	2117      	movs	r1, #23
    b44e:	4469      	add	r1, sp
    b450:	0038      	movs	r0, r7
    b452:	4b0e      	ldr	r3, [pc, #56]	; (b48c <whohas_decode_service_request+0x128>)
    b454:	4798      	blx	r3
    b456:	1824      	adds	r4, r4, r0
            len += decode_object_id(
    b458:	002a      	movs	r2, r5
    b45a:	3210      	adds	r2, #16
    b45c:	466b      	mov	r3, sp
    b45e:	1d9f      	adds	r7, r3, #6
    b460:	1930      	adds	r0, r6, r4
    b462:	0039      	movs	r1, r7
    b464:	4b0d      	ldr	r3, [pc, #52]	; (b49c <whohas_decode_service_request+0x138>)
    b466:	4798      	blx	r3
    b468:	1820      	adds	r0, r4, r0
            data->object.identifier.type = decoded_type;
    b46a:	883b      	ldrh	r3, [r7, #0]
    b46c:	81ab      	strh	r3, [r5, #12]
    b46e:	e000      	b.n	b472 <whohas_decode_service_request+0x10e>
    int len = 0;
    b470:	2000      	movs	r0, #0
            return -1;
        }
    }

    return len;
}
    b472:	b007      	add	sp, #28
    b474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int len = 0;
    b476:	2000      	movs	r0, #0
    b478:	e7fb      	b.n	b472 <whohas_decode_service_request+0x10e>
                return -1;
    b47a:	2001      	movs	r0, #1
    b47c:	4240      	negs	r0, r0
    b47e:	e7f8      	b.n	b472 <whohas_decode_service_request+0x10e>
            return -1;
    b480:	2001      	movs	r0, #1
    b482:	4240      	negs	r0, r0
    b484:	e7f5      	b.n	b472 <whohas_decode_service_request+0x10e>
    b486:	46c0      	nop			; (mov r8, r8)
    b488:	00002efd 	.word	0x00002efd
    b48c:	00002dc1 	.word	0x00002dc1
    b490:	00003355 	.word	0x00003355
    b494:	000034ed 	.word	0x000034ed
    b498:	003fffff 	.word	0x003fffff
    b49c:	000030ed 	.word	0x000030ed

0000b4a0 <whois_decode_service_request>:
}

/* decode the service request only */
int whois_decode_service_request(
    uint8_t *apdu, unsigned apdu_len, int32_t *pLow_limit, int32_t *pHigh_limit)
{
    b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4a2:	46ce      	mov	lr, r9
    b4a4:	4647      	mov	r7, r8
    b4a6:	b580      	push	{r7, lr}
    b4a8:	b085      	sub	sp, #20
    b4aa:	0006      	movs	r6, r0
    b4ac:	000c      	movs	r4, r1
    b4ae:	0015      	movs	r5, r2
    b4b0:	001f      	movs	r7, r3
    unsigned int len = 0;
    uint8_t tag_number = 0;
    b4b2:	2300      	movs	r3, #0
    b4b4:	220f      	movs	r2, #15
    b4b6:	446a      	add	r2, sp
    b4b8:	7013      	strb	r3, [r2, #0]
    uint32_t len_value = 0;
    b4ba:	9302      	str	r3, [sp, #8]
    BACNET_UNSIGNED_INTEGER unsigned_value = 0;
    b4bc:	2200      	movs	r2, #0
    b4be:	2300      	movs	r3, #0
    b4c0:	9200      	str	r2, [sp, #0]
    b4c2:	9301      	str	r3, [sp, #4]

    /* optional limits - must be used as a pair */
    if (apdu_len) {
    b4c4:	2900      	cmp	r1, #0
    b4c6:	d10f      	bne.n	b4e8 <whois_decode_service_request+0x48>
            }
        } else {
            return BACNET_STATUS_ERROR;
        }
    } else {
        if (pLow_limit) {
    b4c8:	2d00      	cmp	r5, #0
    b4ca:	d002      	beq.n	b4d2 <whois_decode_service_request+0x32>
            *pLow_limit = -1;
    b4cc:	2301      	movs	r3, #1
    b4ce:	425b      	negs	r3, r3
    b4d0:	602b      	str	r3, [r5, #0]
        }
        if (pHigh_limit) {
    b4d2:	2f00      	cmp	r7, #0
    b4d4:	d002      	beq.n	b4dc <whois_decode_service_request+0x3c>
            *pHigh_limit = -1;
    b4d6:	2301      	movs	r3, #1
    b4d8:	425b      	negs	r3, r3
    b4da:	603b      	str	r3, [r7, #0]
        }
        len = 0;
    }

    return (int)len;
    b4dc:	0020      	movs	r0, r4
}
    b4de:	b005      	add	sp, #20
    b4e0:	bc0c      	pop	{r2, r3}
    b4e2:	4690      	mov	r8, r2
    b4e4:	4699      	mov	r9, r3
    b4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        len += decode_tag_number_and_value(&apdu[len], &tag_number, &len_value);
    b4e8:	230f      	movs	r3, #15
    b4ea:	446b      	add	r3, sp
    b4ec:	4699      	mov	r9, r3
    b4ee:	aa02      	add	r2, sp, #8
    b4f0:	0019      	movs	r1, r3
    b4f2:	4b27      	ldr	r3, [pc, #156]	; (b590 <whois_decode_service_request+0xf0>)
    b4f4:	4798      	blx	r3
    b4f6:	4680      	mov	r8, r0
        if (tag_number != 0) {
    b4f8:	464b      	mov	r3, r9
    b4fa:	781b      	ldrb	r3, [r3, #0]
    b4fc:	2b00      	cmp	r3, #0
    b4fe:	d137      	bne.n	b570 <whois_decode_service_request+0xd0>
        if (apdu_len > (unsigned)len) {
    b500:	4284      	cmp	r4, r0
    b502:	d938      	bls.n	b576 <whois_decode_service_request+0xd6>
            len += decode_unsigned(&apdu[len], len_value, &unsigned_value);
    b504:	1830      	adds	r0, r6, r0
    b506:	466a      	mov	r2, sp
    b508:	9902      	ldr	r1, [sp, #8]
    b50a:	4b22      	ldr	r3, [pc, #136]	; (b594 <whois_decode_service_request+0xf4>)
    b50c:	4798      	blx	r3
    b50e:	4480      	add	r8, r0
            if (unsigned_value <= BACNET_MAX_INSTANCE) {
    b510:	9a00      	ldr	r2, [sp, #0]
    b512:	9b01      	ldr	r3, [sp, #4]
    b514:	2b00      	cmp	r3, #0
    b516:	d106      	bne.n	b526 <whois_decode_service_request+0x86>
    b518:	d102      	bne.n	b520 <whois_decode_service_request+0x80>
    b51a:	4b1f      	ldr	r3, [pc, #124]	; (b598 <whois_decode_service_request+0xf8>)
    b51c:	429a      	cmp	r2, r3
    b51e:	d802      	bhi.n	b526 <whois_decode_service_request+0x86>
                if (pLow_limit) {
    b520:	2d00      	cmp	r5, #0
    b522:	d000      	beq.n	b526 <whois_decode_service_request+0x86>
                    *pLow_limit = (int32_t)unsigned_value;
    b524:	602a      	str	r2, [r5, #0]
            if (apdu_len > (unsigned)len) {
    b526:	4544      	cmp	r4, r8
    b528:	d928      	bls.n	b57c <whois_decode_service_request+0xdc>
                len += decode_tag_number_and_value(
    b52a:	230f      	movs	r3, #15
    b52c:	446b      	add	r3, sp
    b52e:	4699      	mov	r9, r3
    b530:	4643      	mov	r3, r8
    b532:	18f0      	adds	r0, r6, r3
    b534:	aa02      	add	r2, sp, #8
    b536:	4649      	mov	r1, r9
    b538:	4b15      	ldr	r3, [pc, #84]	; (b590 <whois_decode_service_request+0xf0>)
    b53a:	4798      	blx	r3
    b53c:	4440      	add	r0, r8
    b53e:	0005      	movs	r5, r0
                if (tag_number != 1) {
    b540:	464b      	mov	r3, r9
    b542:	781b      	ldrb	r3, [r3, #0]
    b544:	2b01      	cmp	r3, #1
    b546:	d11c      	bne.n	b582 <whois_decode_service_request+0xe2>
                if (apdu_len > (unsigned)len) {
    b548:	4284      	cmp	r4, r0
    b54a:	d91d      	bls.n	b588 <whois_decode_service_request+0xe8>
                        decode_unsigned(&apdu[len], len_value, &unsigned_value);
    b54c:	1830      	adds	r0, r6, r0
    b54e:	466a      	mov	r2, sp
    b550:	9902      	ldr	r1, [sp, #8]
    b552:	4b10      	ldr	r3, [pc, #64]	; (b594 <whois_decode_service_request+0xf4>)
    b554:	4798      	blx	r3
                    len +=
    b556:	182c      	adds	r4, r5, r0
                    if (unsigned_value <= BACNET_MAX_INSTANCE) {
    b558:	9a00      	ldr	r2, [sp, #0]
    b55a:	9b01      	ldr	r3, [sp, #4]
    b55c:	2b00      	cmp	r3, #0
    b55e:	d1bd      	bne.n	b4dc <whois_decode_service_request+0x3c>
    b560:	d102      	bne.n	b568 <whois_decode_service_request+0xc8>
    b562:	4b0d      	ldr	r3, [pc, #52]	; (b598 <whois_decode_service_request+0xf8>)
    b564:	429a      	cmp	r2, r3
    b566:	d8b9      	bhi.n	b4dc <whois_decode_service_request+0x3c>
                        if (pHigh_limit) {
    b568:	2f00      	cmp	r7, #0
    b56a:	d0b7      	beq.n	b4dc <whois_decode_service_request+0x3c>
                            *pHigh_limit = (int32_t)unsigned_value;;
    b56c:	603a      	str	r2, [r7, #0]
    b56e:	e7b5      	b.n	b4dc <whois_decode_service_request+0x3c>
            return BACNET_STATUS_ERROR;
    b570:	2001      	movs	r0, #1
    b572:	4240      	negs	r0, r0
    b574:	e7b3      	b.n	b4de <whois_decode_service_request+0x3e>
            return BACNET_STATUS_ERROR;
    b576:	2001      	movs	r0, #1
    b578:	4240      	negs	r0, r0
    b57a:	e7b0      	b.n	b4de <whois_decode_service_request+0x3e>
                return BACNET_STATUS_ERROR;
    b57c:	2001      	movs	r0, #1
    b57e:	4240      	negs	r0, r0
    b580:	e7ad      	b.n	b4de <whois_decode_service_request+0x3e>
                    return BACNET_STATUS_ERROR;
    b582:	2001      	movs	r0, #1
    b584:	4240      	negs	r0, r0
    b586:	e7aa      	b.n	b4de <whois_decode_service_request+0x3e>
                    return BACNET_STATUS_ERROR;
    b588:	2001      	movs	r0, #1
    b58a:	4240      	negs	r0, r0
    b58c:	e7a7      	b.n	b4de <whois_decode_service_request+0x3e>
    b58e:	46c0      	nop			; (mov r8, r8)
    b590:	00002dc1 	.word	0x00002dc1
    b594:	000034ed 	.word	0x000034ed
    b598:	003fffff 	.word	0x003fffff

0000b59c <wp_decode_service_request>:
/* decode the service request only */
/* FIXME: there could be various error messages returned
   using unique values less than zero */
int wp_decode_service_request(
    uint8_t *apdu, unsigned apdu_len, BACNET_WRITE_PROPERTY_DATA *wpdata)
{
    b59c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b59e:	46ce      	mov	lr, r9
    b5a0:	4647      	mov	r7, r8
    b5a2:	b580      	push	{r7, lr}
    b5a4:	b087      	sub	sp, #28
    b5a6:	0006      	movs	r6, r0
    b5a8:	000f      	movs	r7, r1
    b5aa:	0014      	movs	r4, r2
    int len = 0;
    int tag_len = 0;
    uint8_t tag_number = 0;
    b5ac:	2300      	movs	r3, #0
    b5ae:	2217      	movs	r2, #23
    b5b0:	446a      	add	r2, sp
    b5b2:	7013      	strb	r3, [r2, #0]
    uint32_t len_value_type = 0;
    b5b4:	9304      	str	r3, [sp, #16]
    BACNET_OBJECT_TYPE type = OBJECT_NONE; /* for decoding */
    b5b6:	2101      	movs	r1, #1
    b5b8:	4249      	negs	r1, r1
    b5ba:	220e      	movs	r2, #14
    b5bc:	446a      	add	r2, sp
    b5be:	8011      	strh	r1, [r2, #0]
    uint32_t property = 0; /* for decoding */
    b5c0:	9302      	str	r3, [sp, #8]
    BACNET_UNSIGNED_INTEGER unsigned_value = 0;
    b5c2:	2200      	movs	r2, #0
    b5c4:	2300      	movs	r3, #0
    b5c6:	9200      	str	r2, [sp, #0]
    b5c8:	9301      	str	r3, [sp, #4]
    int i = 0; /* loop counter */

    /* check for value pointers */
    if (apdu_len && wpdata) {
    b5ca:	2f00      	cmp	r7, #0
    b5cc:	d100      	bne.n	b5d0 <wp_decode_service_request+0x34>
    b5ce:	e093      	b.n	b6f8 <wp_decode_service_request+0x15c>
    b5d0:	2c00      	cmp	r4, #0
    b5d2:	d100      	bne.n	b5d6 <wp_decode_service_request+0x3a>
    b5d4:	e097      	b.n	b706 <wp_decode_service_request+0x16a>
        /* Tag 0: Object ID          */
        if (!decode_is_context_tag(&apdu[len++], 0)) {
    b5d6:	2100      	movs	r1, #0
    b5d8:	4b52      	ldr	r3, [pc, #328]	; (b724 <wp_decode_service_request+0x188>)
    b5da:	4798      	blx	r3
    b5dc:	2800      	cmp	r0, #0
    b5de:	d100      	bne.n	b5e2 <wp_decode_service_request+0x46>
    b5e0:	e093      	b.n	b70a <wp_decode_service_request+0x16e>
            return -1;
        }
        len += decode_object_id(&apdu[len], &type, &wpdata->object_instance);
    b5e2:	230e      	movs	r3, #14
    b5e4:	446b      	add	r3, sp
    b5e6:	4699      	mov	r9, r3
    b5e8:	1c70      	adds	r0, r6, #1
    b5ea:	0022      	movs	r2, r4
    b5ec:	0019      	movs	r1, r3
    b5ee:	4b4e      	ldr	r3, [pc, #312]	; (b728 <wp_decode_service_request+0x18c>)
    b5f0:	4798      	blx	r3
    b5f2:	1c45      	adds	r5, r0, #1
        wpdata->object_type = type;
    b5f4:	464b      	mov	r3, r9
    b5f6:	881b      	ldrh	r3, [r3, #0]
    b5f8:	80a3      	strh	r3, [r4, #4]
        /* Tag 1: Property ID */
        len += decode_tag_number_and_value(
    b5fa:	2317      	movs	r3, #23
    b5fc:	446b      	add	r3, sp
    b5fe:	4698      	mov	r8, r3
    b600:	1970      	adds	r0, r6, r5
    b602:	aa04      	add	r2, sp, #16
    b604:	0019      	movs	r1, r3
    b606:	4b49      	ldr	r3, [pc, #292]	; (b72c <wp_decode_service_request+0x190>)
    b608:	4798      	blx	r3
    b60a:	182d      	adds	r5, r5, r0
            &apdu[len], &tag_number, &len_value_type);
        if (tag_number != 1) {
    b60c:	4643      	mov	r3, r8
    b60e:	781b      	ldrb	r3, [r3, #0]
    b610:	2b01      	cmp	r3, #1
    b612:	d000      	beq.n	b616 <wp_decode_service_request+0x7a>
    b614:	e07c      	b.n	b710 <wp_decode_service_request+0x174>
            return -1;
        }
        len += decode_enumerated(&apdu[len], len_value_type, &property);
    b616:	1970      	adds	r0, r6, r5
    b618:	aa02      	add	r2, sp, #8
    b61a:	9904      	ldr	r1, [sp, #16]
    b61c:	4b44      	ldr	r3, [pc, #272]	; (b730 <wp_decode_service_request+0x194>)
    b61e:	4798      	blx	r3
    b620:	46a8      	mov	r8, r5
    b622:	4480      	add	r8, r0
        wpdata->object_property = (BACNET_PROPERTY_ID)property;
    b624:	9b02      	ldr	r3, [sp, #8]
    b626:	60a3      	str	r3, [r4, #8]
        /* Tag 2: Optional Array Index */
        /* note: decode without incrementing len so we can check for opening tag
         */
        tag_len = decode_tag_number_and_value(
    b628:	4643      	mov	r3, r8
    b62a:	18f0      	adds	r0, r6, r3
    b62c:	2517      	movs	r5, #23
    b62e:	446d      	add	r5, sp
    b630:	aa04      	add	r2, sp, #16
    b632:	0029      	movs	r1, r5
    b634:	4b3d      	ldr	r3, [pc, #244]	; (b72c <wp_decode_service_request+0x190>)
    b636:	4798      	blx	r3
            &apdu[len], &tag_number, &len_value_type);
        if (tag_number == 2) {
    b638:	782b      	ldrb	r3, [r5, #0]
    b63a:	2b02      	cmp	r3, #2
    b63c:	d017      	beq.n	b66e <wp_decode_service_request+0xd2>
            len += tag_len;
            len += decode_unsigned(&apdu[len], len_value_type, &unsigned_value);
            wpdata->array_index = unsigned_value;
        } else {
            wpdata->array_index = BACNET_ARRAY_ALL;
    b63e:	2301      	movs	r3, #1
    b640:	425b      	negs	r3, r3
    b642:	60e3      	str	r3, [r4, #12]
        }
        /* Tag 3: opening context tag */
        if (!decode_is_opening_tag_number(&apdu[len], 3)) {
    b644:	4643      	mov	r3, r8
    b646:	18f5      	adds	r5, r6, r3
    b648:	2103      	movs	r1, #3
    b64a:	0028      	movs	r0, r5
    b64c:	4b39      	ldr	r3, [pc, #228]	; (b734 <wp_decode_service_request+0x198>)
    b64e:	4798      	blx	r3
    b650:	2800      	cmp	r0, #0
    b652:	d060      	beq.n	b716 <wp_decode_service_request+0x17a>
            return -1;
        }
        /* determine the length of the data blob */
        wpdata->application_data_len = bacapp_data_len(
    b654:	4643      	mov	r3, r8
    b656:	1af9      	subs	r1, r7, r3
    b658:	9a02      	ldr	r2, [sp, #8]
    b65a:	0028      	movs	r0, r5
    b65c:	4b36      	ldr	r3, [pc, #216]	; (b738 <wp_decode_service_request+0x19c>)
    b65e:	4798      	blx	r3
    b660:	23f8      	movs	r3, #248	; 0xf8
    b662:	005b      	lsls	r3, r3, #1
    b664:	50e0      	str	r0, [r4, r3]
            &apdu[len], apdu_len - len, (BACNET_PROPERTY_ID)property);
        /* a tag number of 3 is not extended so only one octet */
        len++;
    b666:	4643      	mov	r3, r8
    b668:	1c5d      	adds	r5, r3, #1
        /* copy the data from the APDU */
        for (i = 0; i < wpdata->application_data_len; i++) {
    b66a:	2300      	movs	r3, #0
    b66c:	e010      	b.n	b690 <wp_decode_service_request+0xf4>
            len += tag_len;
    b66e:	4440      	add	r0, r8
    b670:	0005      	movs	r5, r0
            len += decode_unsigned(&apdu[len], len_value_type, &unsigned_value);
    b672:	1830      	adds	r0, r6, r0
    b674:	466a      	mov	r2, sp
    b676:	9904      	ldr	r1, [sp, #16]
    b678:	4b30      	ldr	r3, [pc, #192]	; (b73c <wp_decode_service_request+0x1a0>)
    b67a:	4798      	blx	r3
    b67c:	46a8      	mov	r8, r5
    b67e:	4480      	add	r8, r0
            wpdata->array_index = unsigned_value;
    b680:	9b00      	ldr	r3, [sp, #0]
    b682:	60e3      	str	r3, [r4, #12]
    b684:	e7de      	b.n	b644 <wp_decode_service_request+0xa8>
            wpdata->application_data[i] = apdu[len + i];
    b686:	195a      	adds	r2, r3, r5
    b688:	5cb1      	ldrb	r1, [r6, r2]
    b68a:	18e2      	adds	r2, r4, r3
    b68c:	7411      	strb	r1, [r2, #16]
        for (i = 0; i < wpdata->application_data_len; i++) {
    b68e:	3301      	adds	r3, #1
    b690:	4283      	cmp	r3, r0
    b692:	dbf8      	blt.n	b686 <wp_decode_service_request+0xea>
        }
        /* add on the data length */
        len += wpdata->application_data_len;
    b694:	1945      	adds	r5, r0, r5
        if (!decode_is_closing_tag_number(&apdu[len], 3)) {
    b696:	1970      	adds	r0, r6, r5
    b698:	2103      	movs	r1, #3
    b69a:	4b29      	ldr	r3, [pc, #164]	; (b740 <wp_decode_service_request+0x1a4>)
    b69c:	4798      	blx	r3
    b69e:	2800      	cmp	r0, #0
    b6a0:	d03c      	beq.n	b71c <wp_decode_service_request+0x180>
            return -2;
        }
        /* a tag number of 3 is not extended so only one octet */
        len++;
    b6a2:	3501      	adds	r5, #1
        /* Tag 4: optional Priority - assumed MAX if not explicitly set */
        wpdata->priority = BACNET_MAX_PRIORITY;
    b6a4:	2210      	movs	r2, #16
    b6a6:	23fa      	movs	r3, #250	; 0xfa
    b6a8:	005b      	lsls	r3, r3, #1
    b6aa:	54e2      	strb	r2, [r4, r3]
        if ((unsigned)len < apdu_len) {
    b6ac:	42af      	cmp	r7, r5
    b6ae:	d924      	bls.n	b6fa <wp_decode_service_request+0x15e>
            tag_len = decode_tag_number_and_value(
    b6b0:	1970      	adds	r0, r6, r5
    b6b2:	2717      	movs	r7, #23
    b6b4:	446f      	add	r7, sp
    b6b6:	aa04      	add	r2, sp, #16
    b6b8:	0039      	movs	r1, r7
    b6ba:	4b1c      	ldr	r3, [pc, #112]	; (b72c <wp_decode_service_request+0x190>)
    b6bc:	4798      	blx	r3
                &apdu[len], &tag_number, &len_value_type);
            if (tag_number == 4) {
    b6be:	783b      	ldrb	r3, [r7, #0]
    b6c0:	2b04      	cmp	r3, #4
    b6c2:	d11a      	bne.n	b6fa <wp_decode_service_request+0x15e>
                len += tag_len;
    b6c4:	1828      	adds	r0, r5, r0
                len = decode_unsigned(
    b6c6:	1830      	adds	r0, r6, r0
    b6c8:	466a      	mov	r2, sp
    b6ca:	9904      	ldr	r1, [sp, #16]
    b6cc:	4b1b      	ldr	r3, [pc, #108]	; (b73c <wp_decode_service_request+0x1a0>)
    b6ce:	4798      	blx	r3
    b6d0:	0005      	movs	r5, r0
                    &apdu[len], len_value_type, &unsigned_value);
                if ((unsigned_value >= BACNET_MIN_PRIORITY) &&
    b6d2:	9800      	ldr	r0, [sp, #0]
    b6d4:	9901      	ldr	r1, [sp, #4]
    b6d6:	2201      	movs	r2, #1
    b6d8:	4252      	negs	r2, r2
    b6da:	17d3      	asrs	r3, r2, #31
    b6dc:	1812      	adds	r2, r2, r0
    b6de:	414b      	adcs	r3, r1
    b6e0:	2b00      	cmp	r3, #0
    b6e2:	d106      	bne.n	b6f2 <wp_decode_service_request+0x156>
    b6e4:	d003      	beq.n	b6ee <wp_decode_service_request+0x152>
                    (unsigned_value <= BACNET_MAX_PRIORITY)) {
                    wpdata->priority = (uint8_t)unsigned_value;
    b6e6:	23fa      	movs	r3, #250	; 0xfa
    b6e8:	005b      	lsls	r3, r3, #1
    b6ea:	54e0      	strb	r0, [r4, r3]
    b6ec:	e005      	b.n	b6fa <wp_decode_service_request+0x15e>
                if ((unsigned_value >= BACNET_MIN_PRIORITY) &&
    b6ee:	2a0f      	cmp	r2, #15
    b6f0:	d9f9      	bls.n	b6e6 <wp_decode_service_request+0x14a>
                } else {
                    return -5;
    b6f2:	2505      	movs	r5, #5
    b6f4:	426d      	negs	r5, r5
    b6f6:	e000      	b.n	b6fa <wp_decode_service_request+0x15e>
    int len = 0;
    b6f8:	2500      	movs	r5, #0
            }
        }
    }

    return len;
}
    b6fa:	0028      	movs	r0, r5
    b6fc:	b007      	add	sp, #28
    b6fe:	bc0c      	pop	{r2, r3}
    b700:	4690      	mov	r8, r2
    b702:	4699      	mov	r9, r3
    b704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int len = 0;
    b706:	2500      	movs	r5, #0
    b708:	e7f7      	b.n	b6fa <wp_decode_service_request+0x15e>
            return -1;
    b70a:	2501      	movs	r5, #1
    b70c:	426d      	negs	r5, r5
    b70e:	e7f4      	b.n	b6fa <wp_decode_service_request+0x15e>
            return -1;
    b710:	2501      	movs	r5, #1
    b712:	426d      	negs	r5, r5
    b714:	e7f1      	b.n	b6fa <wp_decode_service_request+0x15e>
            return -1;
    b716:	2501      	movs	r5, #1
    b718:	426d      	negs	r5, r5
    b71a:	e7ee      	b.n	b6fa <wp_decode_service_request+0x15e>
            return -2;
    b71c:	2502      	movs	r5, #2
    b71e:	426d      	negs	r5, r5
    b720:	e7eb      	b.n	b6fa <wp_decode_service_request+0x15e>
    b722:	46c0      	nop			; (mov r8, r8)
    b724:	00002efd 	.word	0x00002efd
    b728:	000030ed 	.word	0x000030ed
    b72c:	00002dc1 	.word	0x00002dc1
    b730:	0000363d 	.word	0x0000363d
    b734:	00002f35 	.word	0x00002f35
    b738:	00002ab1 	.word	0x00002ab1
    b73c:	000034ed 	.word	0x000034ed
    b740:	00002f71 	.word	0x00002f71

0000b744 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    b744:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    b746:	2201      	movs	r2, #1
    b748:	4b03      	ldr	r3, [pc, #12]	; (b758 <WDT_Handler+0x14>)
    b74a:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    b74c:	4b03      	ldr	r3, [pc, #12]	; (b75c <WDT_Handler+0x18>)
    b74e:	681b      	ldr	r3, [r3, #0]
    b750:	2b00      	cmp	r3, #0
    b752:	d000      	beq.n	b756 <WDT_Handler+0x12>
		wdt_early_warning_callback();
    b754:	4798      	blx	r3
	}
}
    b756:	bd10      	pop	{r4, pc}
    b758:	40001000 	.word	0x40001000
    b75c:	20001edc 	.word	0x20001edc

0000b760 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    b760:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    b762:	0080      	lsls	r0, r0, #2
    b764:	4b16      	ldr	r3, [pc, #88]	; (b7c0 <_tc_interrupt_handler+0x60>)
    b766:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    b768:	682b      	ldr	r3, [r5, #0]
    b76a:	7b9c      	ldrb	r4, [r3, #14]
			module->register_callback_mask &
    b76c:	7e2a      	ldrb	r2, [r5, #24]
			module->enable_callback_mask;
    b76e:	7e6b      	ldrb	r3, [r5, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    b770:	4014      	ands	r4, r2
    b772:	401c      	ands	r4, r3

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    b774:	07e3      	lsls	r3, r4, #31
    b776:	d406      	bmi.n	b786 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    b778:	07a3      	lsls	r3, r4, #30
    b77a:	d40b      	bmi.n	b794 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    b77c:	06e3      	lsls	r3, r4, #27
    b77e:	d410      	bmi.n	b7a2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    b780:	06a3      	lsls	r3, r4, #26
    b782:	d415      	bmi.n	b7b0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    b784:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    b786:	0028      	movs	r0, r5
    b788:	68ab      	ldr	r3, [r5, #8]
    b78a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    b78c:	2301      	movs	r3, #1
    b78e:	682a      	ldr	r2, [r5, #0]
    b790:	7393      	strb	r3, [r2, #14]
    b792:	e7f1      	b.n	b778 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    b794:	0028      	movs	r0, r5
    b796:	68eb      	ldr	r3, [r5, #12]
    b798:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    b79a:	2302      	movs	r3, #2
    b79c:	682a      	ldr	r2, [r5, #0]
    b79e:	7393      	strb	r3, [r2, #14]
    b7a0:	e7ec      	b.n	b77c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    b7a2:	0028      	movs	r0, r5
    b7a4:	692b      	ldr	r3, [r5, #16]
    b7a6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    b7a8:	2310      	movs	r3, #16
    b7aa:	682a      	ldr	r2, [r5, #0]
    b7ac:	7393      	strb	r3, [r2, #14]
    b7ae:	e7e7      	b.n	b780 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    b7b0:	0028      	movs	r0, r5
    b7b2:	696b      	ldr	r3, [r5, #20]
    b7b4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    b7b6:	682b      	ldr	r3, [r5, #0]
    b7b8:	2220      	movs	r2, #32
    b7ba:	739a      	strb	r2, [r3, #14]
}
    b7bc:	e7e2      	b.n	b784 <_tc_interrupt_handler+0x24>
    b7be:	46c0      	nop			; (mov r8, r8)
    b7c0:	20001ee0 	.word	0x20001ee0

0000b7c4 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    b7c4:	b510      	push	{r4, lr}
    b7c6:	2000      	movs	r0, #0
    b7c8:	4b01      	ldr	r3, [pc, #4]	; (b7d0 <TC3_Handler+0xc>)
    b7ca:	4798      	blx	r3
    b7cc:	bd10      	pop	{r4, pc}
    b7ce:	46c0      	nop			; (mov r8, r8)
    b7d0:	0000b761 	.word	0x0000b761

0000b7d4 <TC4_Handler>:
    b7d4:	b510      	push	{r4, lr}
    b7d6:	2001      	movs	r0, #1
    b7d8:	4b01      	ldr	r3, [pc, #4]	; (b7e0 <TC4_Handler+0xc>)
    b7da:	4798      	blx	r3
    b7dc:	bd10      	pop	{r4, pc}
    b7de:	46c0      	nop			; (mov r8, r8)
    b7e0:	0000b761 	.word	0x0000b761

0000b7e4 <TC5_Handler>:
    b7e4:	b510      	push	{r4, lr}
    b7e6:	2002      	movs	r0, #2
    b7e8:	4b01      	ldr	r3, [pc, #4]	; (b7f0 <TC5_Handler+0xc>)
    b7ea:	4798      	blx	r3
    b7ec:	bd10      	pop	{r4, pc}
    b7ee:	46c0      	nop			; (mov r8, r8)
    b7f0:	0000b761 	.word	0x0000b761

0000b7f4 <TC6_Handler>:
    b7f4:	b510      	push	{r4, lr}
    b7f6:	2003      	movs	r0, #3
    b7f8:	4b01      	ldr	r3, [pc, #4]	; (b800 <TC6_Handler+0xc>)
    b7fa:	4798      	blx	r3
    b7fc:	bd10      	pop	{r4, pc}
    b7fe:	46c0      	nop			; (mov r8, r8)
    b800:	0000b761 	.word	0x0000b761

0000b804 <TC7_Handler>:
    b804:	b510      	push	{r4, lr}
    b806:	2004      	movs	r0, #4
    b808:	4b01      	ldr	r3, [pc, #4]	; (b810 <TC7_Handler+0xc>)
    b80a:	4798      	blx	r3
    b80c:	bd10      	pop	{r4, pc}
    b80e:	46c0      	nop			; (mov r8, r8)
    b810:	0000b761 	.word	0x0000b761

0000b814 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    b814:	b5f0      	push	{r4, r5, r6, r7, lr}
    b816:	46de      	mov	lr, fp
    b818:	4657      	mov	r7, sl
    b81a:	464e      	mov	r6, r9
    b81c:	4645      	mov	r5, r8
    b81e:	b5e0      	push	{r5, r6, r7, lr}
    b820:	b087      	sub	sp, #28
    b822:	0005      	movs	r5, r0
    b824:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b826:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    b828:	0030      	movs	r0, r6
    b82a:	4b69      	ldr	r3, [pc, #420]	; (b9d0 <_usart_set_config+0x1bc>)
    b82c:	4798      	blx	r3
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    b82e:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    b830:	2200      	movs	r2, #0
    b832:	230e      	movs	r3, #14
    b834:	a902      	add	r1, sp, #8
    b836:	468c      	mov	ip, r1
    b838:	4463      	add	r3, ip
    b83a:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    b83c:	8a22      	ldrh	r2, [r4, #16]
    b83e:	2380      	movs	r3, #128	; 0x80
    b840:	01db      	lsls	r3, r3, #7
    b842:	429a      	cmp	r2, r3
    b844:	d03b      	beq.n	b8be <_usart_set_config+0xaa>
    b846:	d90c      	bls.n	b862 <_usart_set_config+0x4e>
    b848:	23c0      	movs	r3, #192	; 0xc0
    b84a:	01db      	lsls	r3, r3, #7
    b84c:	429a      	cmp	r2, r3
    b84e:	d031      	beq.n	b8b4 <_usart_set_config+0xa0>
    b850:	2380      	movs	r3, #128	; 0x80
    b852:	021b      	lsls	r3, r3, #8
    b854:	429a      	cmp	r2, r3
    b856:	d10d      	bne.n	b874 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    b858:	2303      	movs	r3, #3
    b85a:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b85c:	2300      	movs	r3, #0
    b85e:	469a      	mov	sl, r3
			break;
    b860:	e00c      	b.n	b87c <_usart_set_config+0x68>
	switch (config->sample_rate) {
    b862:	2380      	movs	r3, #128	; 0x80
    b864:	019b      	lsls	r3, r3, #6
    b866:	429a      	cmp	r2, r3
    b868:	d104      	bne.n	b874 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    b86a:	2310      	movs	r3, #16
    b86c:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    b86e:	3b0f      	subs	r3, #15
    b870:	469a      	mov	sl, r3
			break;
    b872:	e003      	b.n	b87c <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    b874:	2310      	movs	r3, #16
    b876:	4698      	mov	r8, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b878:	2300      	movs	r3, #0
    b87a:	469a      	mov	sl, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    b87c:	6823      	ldr	r3, [r4, #0]
    b87e:	68e1      	ldr	r1, [r4, #12]
    b880:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
    b882:	6961      	ldr	r1, [r4, #20]
    b884:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    b886:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    b888:	7e22      	ldrb	r2, [r4, #24]
    b88a:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    b88c:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    b88e:	2226      	movs	r2, #38	; 0x26
    b890:	5ca2      	ldrb	r2, [r4, r2]
    b892:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    b894:	4313      	orrs	r3, r2
    b896:	4699      	mov	r9, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    b898:	6862      	ldr	r2, [r4, #4]
    b89a:	9203      	str	r2, [sp, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    b89c:	2a00      	cmp	r2, #0
    b89e:	d021      	beq.n	b8e4 <_usart_set_config+0xd0>
    b8a0:	2380      	movs	r3, #128	; 0x80
    b8a2:	055b      	lsls	r3, r3, #21
    b8a4:	429a      	cmp	r2, r3
    b8a6:	d13e      	bne.n	b926 <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    b8a8:	2327      	movs	r3, #39	; 0x27
    b8aa:	5ce3      	ldrb	r3, [r4, r3]
    b8ac:	2b00      	cmp	r3, #0
    b8ae:	d00b      	beq.n	b8c8 <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
    b8b0:	2000      	movs	r0, #0
    b8b2:	e039      	b.n	b928 <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    b8b4:	2308      	movs	r3, #8
    b8b6:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    b8b8:	3b07      	subs	r3, #7
    b8ba:	469a      	mov	sl, r3
			break;
    b8bc:	e7de      	b.n	b87c <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    b8be:	2308      	movs	r3, #8
    b8c0:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b8c2:	2300      	movs	r3, #0
    b8c4:	469a      	mov	sl, r3
    b8c6:	e7d9      	b.n	b87c <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    b8c8:	6a23      	ldr	r3, [r4, #32]
    b8ca:	4698      	mov	r8, r3
    b8cc:	b2c0      	uxtb	r0, r0
    b8ce:	4b41      	ldr	r3, [pc, #260]	; (b9d4 <_usart_set_config+0x1c0>)
    b8d0:	4798      	blx	r3
    b8d2:	0001      	movs	r1, r0
    b8d4:	220e      	movs	r2, #14
    b8d6:	ab02      	add	r3, sp, #8
    b8d8:	469c      	mov	ip, r3
    b8da:	4462      	add	r2, ip
    b8dc:	4640      	mov	r0, r8
    b8de:	4b3e      	ldr	r3, [pc, #248]	; (b9d8 <_usart_set_config+0x1c4>)
    b8e0:	4798      	blx	r3
    b8e2:	e021      	b.n	b928 <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    b8e4:	2327      	movs	r3, #39	; 0x27
    b8e6:	5ce3      	ldrb	r3, [r4, r3]
    b8e8:	2b00      	cmp	r3, #0
    b8ea:	d00b      	beq.n	b904 <_usart_set_config+0xf0>
				status_code =
    b8ec:	4643      	mov	r3, r8
    b8ee:	9300      	str	r3, [sp, #0]
    b8f0:	4653      	mov	r3, sl
    b8f2:	220e      	movs	r2, #14
    b8f4:	a902      	add	r1, sp, #8
    b8f6:	468c      	mov	ip, r1
    b8f8:	4462      	add	r2, ip
    b8fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    b8fc:	6a20      	ldr	r0, [r4, #32]
    b8fe:	4f37      	ldr	r7, [pc, #220]	; (b9dc <_usart_set_config+0x1c8>)
    b900:	47b8      	blx	r7
    b902:	e011      	b.n	b928 <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    b904:	6a23      	ldr	r3, [r4, #32]
    b906:	469b      	mov	fp, r3
    b908:	b2c0      	uxtb	r0, r0
    b90a:	4b32      	ldr	r3, [pc, #200]	; (b9d4 <_usart_set_config+0x1c0>)
    b90c:	4798      	blx	r3
    b90e:	0001      	movs	r1, r0
				status_code =
    b910:	4643      	mov	r3, r8
    b912:	9300      	str	r3, [sp, #0]
    b914:	4653      	mov	r3, sl
    b916:	220e      	movs	r2, #14
    b918:	a802      	add	r0, sp, #8
    b91a:	4684      	mov	ip, r0
    b91c:	4462      	add	r2, ip
    b91e:	4658      	mov	r0, fp
    b920:	4f2e      	ldr	r7, [pc, #184]	; (b9dc <_usart_set_config+0x1c8>)
    b922:	47b8      	blx	r7
    b924:	e000      	b.n	b928 <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
    b926:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    b928:	2800      	cmp	r0, #0
    b92a:	d142      	bne.n	b9b2 <_usart_set_config+0x19e>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    b92c:	7e63      	ldrb	r3, [r4, #25]
    b92e:	2b00      	cmp	r3, #0
    b930:	d001      	beq.n	b936 <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    b932:	7ea3      	ldrb	r3, [r4, #26]
    b934:	73b3      	strb	r3, [r6, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    b936:	230e      	movs	r3, #14
    b938:	aa02      	add	r2, sp, #8
    b93a:	4694      	mov	ip, r2
    b93c:	4463      	add	r3, ip
    b93e:	881b      	ldrh	r3, [r3, #0]
    b940:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    b942:	464b      	mov	r3, r9
    b944:	9a03      	ldr	r2, [sp, #12]
    b946:	4313      	orrs	r3, r2

	if (config->use_external_clock == false) {
    b948:	2227      	movs	r2, #39	; 0x27
    b94a:	5ca2      	ldrb	r2, [r4, r2]
    b94c:	2a00      	cmp	r2, #0
    b94e:	d101      	bne.n	b954 <_usart_set_config+0x140>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    b950:	3204      	adds	r2, #4
    b952:	4313      	orrs	r3, r2
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    b954:	7e61      	ldrb	r1, [r4, #25]
    b956:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    b958:	7f22      	ldrb	r2, [r4, #28]
    b95a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    b95c:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    b95e:	7f62      	ldrb	r2, [r4, #29]
    b960:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    b962:	4311      	orrs	r1, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    b964:	2224      	movs	r2, #36	; 0x24
    b966:	5ca2      	ldrb	r2, [r4, r2]
    b968:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    b96a:	4311      	orrs	r1, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    b96c:	2225      	movs	r2, #37	; 0x25
    b96e:	5ca2      	ldrb	r2, [r4, r2]
    b970:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    b972:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    b974:	7aa2      	ldrb	r2, [r4, #10]
    b976:	4311      	orrs	r1, r2
	ctrlb |= (uint32_t)config->character_size;
    b978:	7ae2      	ldrb	r2, [r4, #11]
    b97a:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    b97c:	8922      	ldrh	r2, [r4, #8]
    b97e:	2aff      	cmp	r2, #255	; 0xff
    b980:	d01e      	beq.n	b9c0 <_usart_set_config+0x1ac>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    b982:	2780      	movs	r7, #128	; 0x80
    b984:	047f      	lsls	r7, r7, #17
    b986:	433b      	orrs	r3, r7
		ctrlb |= config->parity;
    b988:	4311      	orrs	r1, r2
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    b98a:	222c      	movs	r2, #44	; 0x2c
    b98c:	5ca2      	ldrb	r2, [r4, r2]
    b98e:	2a00      	cmp	r2, #0
    b990:	d103      	bne.n	b99a <_usart_set_config+0x186>
    b992:	4a13      	ldr	r2, [pc, #76]	; (b9e0 <_usart_set_config+0x1cc>)
    b994:	7892      	ldrb	r2, [r2, #2]
    b996:	0792      	lsls	r2, r2, #30
    b998:	d501      	bpl.n	b99e <_usart_set_config+0x18a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    b99a:	2280      	movs	r2, #128	; 0x80
    b99c:	4313      	orrs	r3, r2
	SercomUsart *const usart_hw = &(module->hw->USART);
    b99e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    b9a0:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    b9a2:	2a00      	cmp	r2, #0
    b9a4:	d1fb      	bne.n	b99e <_usart_set_config+0x18a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    b9a6:	6071      	str	r1, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b9a8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    b9aa:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    b9ac:	2a00      	cmp	r2, #0
    b9ae:	d1fb      	bne.n	b9a8 <_usart_set_config+0x194>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    b9b0:	6033      	str	r3, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
    b9b2:	b007      	add	sp, #28
    b9b4:	bc3c      	pop	{r2, r3, r4, r5}
    b9b6:	4690      	mov	r8, r2
    b9b8:	4699      	mov	r9, r3
    b9ba:	46a2      	mov	sl, r4
    b9bc:	46ab      	mov	fp, r5
    b9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
    b9c0:	7ee2      	ldrb	r2, [r4, #27]
    b9c2:	2a00      	cmp	r2, #0
    b9c4:	d0e1      	beq.n	b98a <_usart_set_config+0x176>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    b9c6:	2280      	movs	r2, #128	; 0x80
    b9c8:	04d2      	lsls	r2, r2, #19
    b9ca:	4313      	orrs	r3, r2
    b9cc:	e7dd      	b.n	b98a <_usart_set_config+0x176>
    b9ce:	46c0      	nop			; (mov r8, r8)
    b9d0:	00000a21 	.word	0x00000a21
    b9d4:	0000c59d 	.word	0x0000c59d
    b9d8:	00000795 	.word	0x00000795
    b9dc:	000007c1 	.word	0x000007c1
    b9e0:	41002000 	.word	0x41002000

0000b9e4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    b9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9e6:	b089      	sub	sp, #36	; 0x24
    b9e8:	0006      	movs	r6, r0
    b9ea:	000c      	movs	r4, r1
    b9ec:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    b9ee:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    b9f0:	0008      	movs	r0, r1
    b9f2:	4b42      	ldr	r3, [pc, #264]	; (bafc <usart_init+0x118>)
    b9f4:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    b9f6:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    b9f8:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    b9fa:	6823      	ldr	r3, [r4, #0]
    b9fc:	07db      	lsls	r3, r3, #31
    b9fe:	d503      	bpl.n	ba08 <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    ba00:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    ba02:	0028      	movs	r0, r5
    ba04:	b009      	add	sp, #36	; 0x24
    ba06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    ba08:	6823      	ldr	r3, [r4, #0]
    ba0a:	079b      	lsls	r3, r3, #30
    ba0c:	d501      	bpl.n	ba12 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
    ba0e:	251c      	movs	r5, #28
    ba10:	e7f7      	b.n	ba02 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    ba12:	2301      	movs	r3, #1
    ba14:	4093      	lsls	r3, r2
    ba16:	4a3a      	ldr	r2, [pc, #232]	; (bb00 <usart_init+0x11c>)
    ba18:	6a11      	ldr	r1, [r2, #32]
    ba1a:	430b      	orrs	r3, r1
    ba1c:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    ba1e:	252d      	movs	r5, #45	; 0x2d
    ba20:	5d7b      	ldrb	r3, [r7, r5]
    ba22:	a907      	add	r1, sp, #28
    ba24:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    ba26:	b2c3      	uxtb	r3, r0
    ba28:	9301      	str	r3, [sp, #4]
    ba2a:	0018      	movs	r0, r3
    ba2c:	4b35      	ldr	r3, [pc, #212]	; (bb04 <usart_init+0x120>)
    ba2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    ba30:	9801      	ldr	r0, [sp, #4]
    ba32:	4b35      	ldr	r3, [pc, #212]	; (bb08 <usart_init+0x124>)
    ba34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    ba36:	5d78      	ldrb	r0, [r7, r5]
    ba38:	2100      	movs	r1, #0
    ba3a:	4b34      	ldr	r3, [pc, #208]	; (bb0c <usart_init+0x128>)
    ba3c:	4798      	blx	r3
	module->character_size = config->character_size;
    ba3e:	7afb      	ldrb	r3, [r7, #11]
    ba40:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    ba42:	2324      	movs	r3, #36	; 0x24
    ba44:	5cfb      	ldrb	r3, [r7, r3]
    ba46:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    ba48:	2325      	movs	r3, #37	; 0x25
    ba4a:	5cfb      	ldrb	r3, [r7, r3]
    ba4c:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    ba4e:	7efb      	ldrb	r3, [r7, #27]
    ba50:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    ba52:	7f3b      	ldrb	r3, [r7, #28]
    ba54:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    ba56:	0039      	movs	r1, r7
    ba58:	0030      	movs	r0, r6
    ba5a:	4b2d      	ldr	r3, [pc, #180]	; (bb10 <usart_init+0x12c>)
    ba5c:	4798      	blx	r3
    ba5e:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    ba60:	d1cf      	bne.n	ba02 <usart_init+0x1e>
	config->mux_position = SYSTEM_PINMUX_GPIO;
    ba62:	ab06      	add	r3, sp, #24
    ba64:	2280      	movs	r2, #128	; 0x80
    ba66:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ba68:	2200      	movs	r2, #0
    ba6a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    ba6c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    ba6e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ba72:	9302      	str	r3, [sp, #8]
    ba74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ba76:	9303      	str	r3, [sp, #12]
    ba78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ba7a:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    ba7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba7e:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    ba80:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    ba82:	2700      	movs	r7, #0
    ba84:	e006      	b.n	ba94 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    ba86:	0039      	movs	r1, r7
    ba88:	0020      	movs	r0, r4
    ba8a:	4b22      	ldr	r3, [pc, #136]	; (bb14 <usart_init+0x130>)
    ba8c:	4798      	blx	r3
    ba8e:	e008      	b.n	baa2 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    ba90:	3701      	adds	r7, #1
    ba92:	b2ff      	uxtb	r7, r7
    ba94:	2f03      	cmp	r7, #3
    ba96:	d80d      	bhi.n	bab4 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    ba98:	00bb      	lsls	r3, r7, #2
    ba9a:	aa02      	add	r2, sp, #8
    ba9c:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    ba9e:	2800      	cmp	r0, #0
    baa0:	d0f1      	beq.n	ba86 <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    baa2:	1c43      	adds	r3, r0, #1
    baa4:	d0f4      	beq.n	ba90 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    baa6:	a906      	add	r1, sp, #24
    baa8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    baaa:	0c00      	lsrs	r0, r0, #16
    baac:	b2c0      	uxtb	r0, r0
    baae:	4b1a      	ldr	r3, [pc, #104]	; (bb18 <usart_init+0x134>)
    bab0:	4798      	blx	r3
    bab2:	e7ed      	b.n	ba90 <usart_init+0xac>
    bab4:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    bab6:	2a05      	cmp	r2, #5
    bab8:	d806      	bhi.n	bac8 <usart_init+0xe4>
		module->callback[i]            = NULL;
    baba:	1c93      	adds	r3, r2, #2
    babc:	009b      	lsls	r3, r3, #2
    babe:	18f3      	adds	r3, r6, r3
    bac0:	2100      	movs	r1, #0
    bac2:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    bac4:	3201      	adds	r2, #1
    bac6:	e7f6      	b.n	bab6 <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    bac8:	2200      	movs	r2, #0
    baca:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    bacc:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    bace:	2300      	movs	r3, #0
    bad0:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    bad2:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    bad4:	3230      	adds	r2, #48	; 0x30
    bad6:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    bad8:	3201      	adds	r2, #1
    bada:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    badc:	3201      	adds	r2, #1
    bade:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    bae0:	3201      	adds	r2, #1
    bae2:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    bae4:	6830      	ldr	r0, [r6, #0]
    bae6:	4b05      	ldr	r3, [pc, #20]	; (bafc <usart_init+0x118>)
    bae8:	4798      	blx	r3
    baea:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    baec:	490b      	ldr	r1, [pc, #44]	; (bb1c <usart_init+0x138>)
    baee:	4b0c      	ldr	r3, [pc, #48]	; (bb20 <usart_init+0x13c>)
    baf0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    baf2:	00a4      	lsls	r4, r4, #2
    baf4:	4b0b      	ldr	r3, [pc, #44]	; (bb24 <usart_init+0x140>)
    baf6:	50e6      	str	r6, [r4, r3]
	return status_code;
    baf8:	e783      	b.n	ba02 <usart_init+0x1e>
    bafa:	46c0      	nop			; (mov r8, r8)
    bafc:	00000a21 	.word	0x00000a21
    bb00:	40000400 	.word	0x40000400
    bb04:	0000c581 	.word	0x0000c581
    bb08:	0000c4f9 	.word	0x0000c4f9
    bb0c:	0000085d 	.word	0x0000085d
    bb10:	0000b815 	.word	0x0000b815
    bb14:	000008a9 	.word	0x000008a9
    bb18:	0000c6b9 	.word	0x0000c6b9
    bb1c:	0000bd21 	.word	0x0000bd21
    bb20:	0000bec5 	.word	0x0000bec5
    bb24:	20001ef4 	.word	0x20001ef4

0000bb28 <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bb28:	6802      	ldr	r2, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    bb2a:	79c3      	ldrb	r3, [r0, #7]
    bb2c:	2b00      	cmp	r3, #0
    bb2e:	d101      	bne.n	bb34 <usart_write_wait+0xc>
		return STATUS_ERR_DENIED;
    bb30:	201c      	movs	r0, #28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    bb32:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    bb34:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    bb36:	b29b      	uxth	r3, r3
    bb38:	2b00      	cmp	r3, #0
    bb3a:	d001      	beq.n	bb40 <usart_write_wait+0x18>
		return STATUS_BUSY;
    bb3c:	2005      	movs	r0, #5
    bb3e:	e7f8      	b.n	bb32 <usart_write_wait+0xa>
	usart_hw->DATA.reg = tx_data;
    bb40:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    bb42:	7e13      	ldrb	r3, [r2, #24]
    bb44:	079b      	lsls	r3, r3, #30
    bb46:	d5fc      	bpl.n	bb42 <usart_write_wait+0x1a>
	return STATUS_OK;
    bb48:	2000      	movs	r0, #0
    bb4a:	e7f2      	b.n	bb32 <usart_write_wait+0xa>

0000bb4c <usart_read_wait>:

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bb4c:	6802      	ldr	r2, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    bb4e:	7983      	ldrb	r3, [r0, #6]
    bb50:	2b00      	cmp	r3, #0
    bb52:	d101      	bne.n	bb58 <usart_read_wait+0xc>
		return STATUS_ERR_DENIED;
    bb54:	201c      	movs	r0, #28

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    bb56:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    bb58:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    bb5a:	b29b      	uxth	r3, r3
    bb5c:	2b00      	cmp	r3, #0
    bb5e:	d001      	beq.n	bb64 <usart_read_wait+0x18>
		return STATUS_BUSY;
    bb60:	2005      	movs	r0, #5
    bb62:	e7f8      	b.n	bb56 <usart_read_wait+0xa>
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    bb64:	7e13      	ldrb	r3, [r2, #24]
    bb66:	075b      	lsls	r3, r3, #29
    bb68:	d401      	bmi.n	bb6e <usart_read_wait+0x22>
		return STATUS_BUSY;
    bb6a:	2005      	movs	r0, #5
    bb6c:	e7f3      	b.n	bb56 <usart_read_wait+0xa>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    bb6e:	8b53      	ldrh	r3, [r2, #26]
    bb70:	b2db      	uxtb	r3, r3
	if (error_code) {
    bb72:	0698      	lsls	r0, r3, #26
    bb74:	d01d      	beq.n	bbb2 <usart_read_wait+0x66>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    bb76:	0798      	lsls	r0, r3, #30
    bb78:	d503      	bpl.n	bb82 <usart_read_wait+0x36>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    bb7a:	2302      	movs	r3, #2
    bb7c:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    bb7e:	201a      	movs	r0, #26
    bb80:	e7e9      	b.n	bb56 <usart_read_wait+0xa>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    bb82:	0758      	lsls	r0, r3, #29
    bb84:	d503      	bpl.n	bb8e <usart_read_wait+0x42>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    bb86:	2304      	movs	r3, #4
    bb88:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    bb8a:	201e      	movs	r0, #30
    bb8c:	e7e3      	b.n	bb56 <usart_read_wait+0xa>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    bb8e:	07d8      	lsls	r0, r3, #31
    bb90:	d503      	bpl.n	bb9a <usart_read_wait+0x4e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    bb92:	2301      	movs	r3, #1
    bb94:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    bb96:	2013      	movs	r0, #19
    bb98:	e7dd      	b.n	bb56 <usart_read_wait+0xa>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    bb9a:	06d8      	lsls	r0, r3, #27
    bb9c:	d503      	bpl.n	bba6 <usart_read_wait+0x5a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    bb9e:	2310      	movs	r3, #16
    bba0:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    bba2:	2042      	movs	r0, #66	; 0x42
    bba4:	e7d7      	b.n	bb56 <usart_read_wait+0xa>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    bba6:	069b      	lsls	r3, r3, #26
    bba8:	d503      	bpl.n	bbb2 <usart_read_wait+0x66>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    bbaa:	2320      	movs	r3, #32
    bbac:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    bbae:	2041      	movs	r0, #65	; 0x41
    bbb0:	e7d1      	b.n	bb56 <usart_read_wait+0xa>
	*rx_data = usart_hw->DATA.reg;
    bbb2:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    bbb4:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    bbb6:	2000      	movs	r0, #0
    bbb8:	e7cd      	b.n	bb56 <usart_read_wait+0xa>
	...

0000bbbc <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    bbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbbe:	b085      	sub	sp, #20
    bbc0:	0004      	movs	r4, r0
    bbc2:	9101      	str	r1, [sp, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    bbc4:	2a00      	cmp	r2, #0
    bbc6:	d102      	bne.n	bbce <usart_read_buffer_wait+0x12>
		return STATUS_ERR_INVALID_ARG;
    bbc8:	2017      	movs	r0, #23
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    bbca:	b005      	add	sp, #20
    bbcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    bbce:	7983      	ldrb	r3, [r0, #6]
    bbd0:	2b00      	cmp	r3, #0
    bbd2:	d101      	bne.n	bbd8 <usart_read_buffer_wait+0x1c>
		return STATUS_ERR_DENIED;
    bbd4:	201c      	movs	r0, #28
    bbd6:	e7f8      	b.n	bbca <usart_read_buffer_wait+0xe>
	SercomUsart *const usart_hw = &(module->hw->USART);
    bbd8:	6806      	ldr	r6, [r0, #0]
	uint16_t rx_pos = 0;
    bbda:	2500      	movs	r5, #0
	while (length--) {
    bbdc:	e014      	b.n	bc08 <usart_read_buffer_wait+0x4c>
		uint16_t received_data = 0;
    bbde:	ab02      	add	r3, sp, #8
    bbe0:	1d99      	adds	r1, r3, #6
    bbe2:	2300      	movs	r3, #0
    bbe4:	800b      	strh	r3, [r1, #0]
		retval = usart_read_wait(module, &received_data);
    bbe6:	0020      	movs	r0, r4
    bbe8:	4b15      	ldr	r3, [pc, #84]	; (bc40 <usart_read_buffer_wait+0x84>)
    bbea:	4798      	blx	r3
		if (retval != STATUS_OK) {
    bbec:	2800      	cmp	r0, #0
    bbee:	d1ec      	bne.n	bbca <usart_read_buffer_wait+0xe>
		rx_data[rx_pos++] = received_data;
    bbf0:	1c6b      	adds	r3, r5, #1
    bbf2:	b29b      	uxth	r3, r3
    bbf4:	aa02      	add	r2, sp, #8
    bbf6:	3206      	adds	r2, #6
    bbf8:	8812      	ldrh	r2, [r2, #0]
    bbfa:	9901      	ldr	r1, [sp, #4]
    bbfc:	554a      	strb	r2, [r1, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    bbfe:	7962      	ldrb	r2, [r4, #5]
    bc00:	2a01      	cmp	r2, #1
    bc02:	d011      	beq.n	bc28 <usart_read_buffer_wait+0x6c>
    bc04:	001d      	movs	r5, r3
	while (length--) {
    bc06:	003a      	movs	r2, r7
    bc08:	1e57      	subs	r7, r2, #1
    bc0a:	b2bf      	uxth	r7, r7
    bc0c:	2a00      	cmp	r2, #0
    bc0e:	d015      	beq.n	bc3c <usart_read_buffer_wait+0x80>
    bc10:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    bc12:	4a0c      	ldr	r2, [pc, #48]	; (bc44 <usart_read_buffer_wait+0x88>)
    bc14:	4293      	cmp	r3, r2
    bc16:	d8e2      	bhi.n	bbde <usart_read_buffer_wait+0x22>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    bc18:	7e32      	ldrb	r2, [r6, #24]
    bc1a:	0752      	lsls	r2, r2, #29
    bc1c:	d4df      	bmi.n	bbde <usart_read_buffer_wait+0x22>
			} else if (i == USART_TIMEOUT) {
    bc1e:	4a09      	ldr	r2, [pc, #36]	; (bc44 <usart_read_buffer_wait+0x88>)
    bc20:	4293      	cmp	r3, r2
    bc22:	d009      	beq.n	bc38 <usart_read_buffer_wait+0x7c>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    bc24:	3301      	adds	r3, #1
    bc26:	e7f4      	b.n	bc12 <usart_read_buffer_wait+0x56>
			rx_data[rx_pos++] = (received_data >> 8);
    bc28:	3502      	adds	r5, #2
    bc2a:	aa02      	add	r2, sp, #8
    bc2c:	3206      	adds	r2, #6
    bc2e:	8812      	ldrh	r2, [r2, #0]
    bc30:	0a12      	lsrs	r2, r2, #8
    bc32:	54ca      	strb	r2, [r1, r3]
    bc34:	b2ab      	uxth	r3, r5
    bc36:	e7e5      	b.n	bc04 <usart_read_buffer_wait+0x48>
				return STATUS_ERR_TIMEOUT;
    bc38:	2012      	movs	r0, #18
    bc3a:	e7c6      	b.n	bbca <usart_read_buffer_wait+0xe>
	return STATUS_OK;
    bc3c:	2000      	movs	r0, #0
    bc3e:	e7c4      	b.n	bbca <usart_read_buffer_wait+0xe>
    bc40:	0000bb4d 	.word	0x0000bb4d
    bc44:	0000ffff 	.word	0x0000ffff

0000bc48 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc4a:	0006      	movs	r6, r0
    bc4c:	000c      	movs	r4, r1
    bc4e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bc50:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    bc52:	4b0a      	ldr	r3, [pc, #40]	; (bc7c <_usart_write_buffer+0x34>)
    bc54:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    bc56:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    bc58:	b29b      	uxth	r3, r3
    bc5a:	2b00      	cmp	r3, #0
    bc5c:	d003      	beq.n	bc66 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    bc5e:	4b08      	ldr	r3, [pc, #32]	; (bc80 <_usart_write_buffer+0x38>)
    bc60:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    bc62:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    bc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    bc66:	85f5      	strh	r5, [r6, #46]	; 0x2e
    bc68:	4b05      	ldr	r3, [pc, #20]	; (bc80 <_usart_write_buffer+0x38>)
    bc6a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    bc6c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    bc6e:	2205      	movs	r2, #5
    bc70:	2333      	movs	r3, #51	; 0x33
    bc72:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    bc74:	3b32      	subs	r3, #50	; 0x32
    bc76:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    bc78:	2000      	movs	r0, #0
    bc7a:	e7f3      	b.n	bc64 <_usart_write_buffer+0x1c>
    bc7c:	0000bfb1 	.word	0x0000bfb1
    bc80:	0000bff1 	.word	0x0000bff1

0000bc84 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc86:	0004      	movs	r4, r0
    bc88:	000d      	movs	r5, r1
    bc8a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    bc8c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    bc8e:	4b10      	ldr	r3, [pc, #64]	; (bcd0 <_usart_read_buffer+0x4c>)
    bc90:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    bc92:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    bc94:	b29b      	uxth	r3, r3
    bc96:	2b00      	cmp	r3, #0
    bc98:	d003      	beq.n	bca2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    bc9a:	4b0e      	ldr	r3, [pc, #56]	; (bcd4 <_usart_read_buffer+0x50>)
    bc9c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    bc9e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    bca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    bca2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    bca4:	4b0b      	ldr	r3, [pc, #44]	; (bcd4 <_usart_read_buffer+0x50>)
    bca6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    bca8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    bcaa:	2205      	movs	r2, #5
    bcac:	2332      	movs	r3, #50	; 0x32
    bcae:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    bcb0:	3b2e      	subs	r3, #46	; 0x2e
    bcb2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    bcb4:	7a23      	ldrb	r3, [r4, #8]
    bcb6:	2b00      	cmp	r3, #0
    bcb8:	d001      	beq.n	bcbe <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    bcba:	2320      	movs	r3, #32
    bcbc:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    bcbe:	7a63      	ldrb	r3, [r4, #9]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	d003      	beq.n	bccc <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    bcc4:	2308      	movs	r3, #8
    bcc6:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    bcc8:	2000      	movs	r0, #0
    bcca:	e7e9      	b.n	bca0 <_usart_read_buffer+0x1c>
    bccc:	2000      	movs	r0, #0
    bcce:	e7e7      	b.n	bca0 <_usart_read_buffer+0x1c>
    bcd0:	0000bfb1 	.word	0x0000bfb1
    bcd4:	0000bff1 	.word	0x0000bff1

0000bcd8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    bcd8:	1c93      	adds	r3, r2, #2
    bcda:	009b      	lsls	r3, r3, #2
    bcdc:	18c3      	adds	r3, r0, r3
    bcde:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    bce0:	2301      	movs	r3, #1
    bce2:	4093      	lsls	r3, r2
    bce4:	001a      	movs	r2, r3
    bce6:	2130      	movs	r1, #48	; 0x30
    bce8:	5c43      	ldrb	r3, [r0, r1]
    bcea:	4313      	orrs	r3, r2
    bcec:	5443      	strb	r3, [r0, r1]
}
    bcee:	4770      	bx	lr

0000bcf0 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    bcf0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    bcf2:	2201      	movs	r2, #1
    bcf4:	4b01      	ldr	r3, [pc, #4]	; (bcfc <usart_read_job+0xc>)
    bcf6:	4798      	blx	r3
}
    bcf8:	bd10      	pop	{r4, pc}
    bcfa:	46c0      	nop			; (mov r8, r8)
    bcfc:	0000bc85 	.word	0x0000bc85

0000bd00 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    bd00:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    bd02:	2a00      	cmp	r2, #0
    bd04:	d101      	bne.n	bd0a <usart_write_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    bd06:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    bd08:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    bd0a:	79c3      	ldrb	r3, [r0, #7]
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	d101      	bne.n	bd14 <usart_write_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    bd10:	201c      	movs	r0, #28
    bd12:	e7f9      	b.n	bd08 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    bd14:	4b01      	ldr	r3, [pc, #4]	; (bd1c <usart_write_buffer_job+0x1c>)
    bd16:	4798      	blx	r3
    bd18:	e7f6      	b.n	bd08 <usart_write_buffer_job+0x8>
    bd1a:	46c0      	nop			; (mov r8, r8)
    bd1c:	0000bc49 	.word	0x0000bc49

0000bd20 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    bd20:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd22:	46c6      	mov	lr, r8
    bd24:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    bd26:	0080      	lsls	r0, r0, #2
    bd28:	4b64      	ldr	r3, [pc, #400]	; (bebc <_usart_interrupt_handler+0x19c>)
    bd2a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    bd2c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    bd2e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    bd30:	2b00      	cmp	r3, #0
    bd32:	d1fc      	bne.n	bd2e <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    bd34:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    bd36:	7da6      	ldrb	r6, [r4, #22]
    bd38:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    bd3a:	2330      	movs	r3, #48	; 0x30
    bd3c:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    bd3e:	2231      	movs	r2, #49	; 0x31
    bd40:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    bd42:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    bd44:	07f3      	lsls	r3, r6, #31
    bd46:	d525      	bpl.n	bd94 <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    bd48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    bd4a:	b29b      	uxth	r3, r3
    bd4c:	2b00      	cmp	r3, #0
    bd4e:	d01f      	beq.n	bd90 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    bd50:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    bd52:	780a      	ldrb	r2, [r1, #0]
    bd54:	b2d2      	uxtb	r2, r2
    bd56:	b293      	uxth	r3, r2
    bd58:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    bd5a:	1c48      	adds	r0, r1, #1
    bd5c:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    bd5e:	796b      	ldrb	r3, [r5, #5]
    bd60:	2b01      	cmp	r3, #1
    bd62:	d00e      	beq.n	bd82 <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    bd64:	4643      	mov	r3, r8
    bd66:	05db      	lsls	r3, r3, #23
    bd68:	0ddb      	lsrs	r3, r3, #23
    bd6a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    bd6c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    bd6e:	3b01      	subs	r3, #1
    bd70:	b29b      	uxth	r3, r3
    bd72:	85eb      	strh	r3, [r5, #46]	; 0x2e
    bd74:	2b00      	cmp	r3, #0
    bd76:	d10d      	bne.n	bd94 <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    bd78:	3301      	adds	r3, #1
    bd7a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    bd7c:	3301      	adds	r3, #1
    bd7e:	75a3      	strb	r3, [r4, #22]
    bd80:	e008      	b.n	bd94 <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    bd82:	784b      	ldrb	r3, [r1, #1]
    bd84:	021b      	lsls	r3, r3, #8
    bd86:	4313      	orrs	r3, r2
    bd88:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    bd8a:	1c88      	adds	r0, r1, #2
    bd8c:	62a8      	str	r0, [r5, #40]	; 0x28
    bd8e:	e7e9      	b.n	bd64 <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    bd90:	2301      	movs	r3, #1
    bd92:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    bd94:	07b3      	lsls	r3, r6, #30
    bd96:	d506      	bpl.n	bda6 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    bd98:	2302      	movs	r3, #2
    bd9a:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    bd9c:	2200      	movs	r2, #0
    bd9e:	3331      	adds	r3, #49	; 0x31
    bda0:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    bda2:	07fb      	lsls	r3, r7, #31
    bda4:	d41c      	bmi.n	bde0 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    bda6:	0773      	lsls	r3, r6, #29
    bda8:	d564      	bpl.n	be74 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    bdaa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    bdac:	b29b      	uxth	r3, r3
    bdae:	2b00      	cmp	r3, #0
    bdb0:	d05e      	beq.n	be70 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    bdb2:	8b62      	ldrh	r2, [r4, #26]
    bdb4:	b2d2      	uxtb	r2, r2
    bdb6:	233f      	movs	r3, #63	; 0x3f
    bdb8:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    bdba:	0711      	lsls	r1, r2, #28
    bdbc:	d501      	bpl.n	bdc2 <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    bdbe:	2337      	movs	r3, #55	; 0x37
    bdc0:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    bdc2:	2b00      	cmp	r3, #0
    bdc4:	d031      	beq.n	be2a <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    bdc6:	079a      	lsls	r2, r3, #30
    bdc8:	d50e      	bpl.n	bde8 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    bdca:	221a      	movs	r2, #26
    bdcc:	2332      	movs	r3, #50	; 0x32
    bdce:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    bdd0:	3b30      	subs	r3, #48	; 0x30
    bdd2:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    bdd4:	077b      	lsls	r3, r7, #29
    bdd6:	d54d      	bpl.n	be74 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    bdd8:	0028      	movs	r0, r5
    bdda:	696b      	ldr	r3, [r5, #20]
    bddc:	4798      	blx	r3
    bdde:	e049      	b.n	be74 <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    bde0:	0028      	movs	r0, r5
    bde2:	68eb      	ldr	r3, [r5, #12]
    bde4:	4798      	blx	r3
    bde6:	e7de      	b.n	bda6 <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    bde8:	075a      	lsls	r2, r3, #29
    bdea:	d505      	bpl.n	bdf8 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    bdec:	221e      	movs	r2, #30
    bdee:	2332      	movs	r3, #50	; 0x32
    bdf0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    bdf2:	3b2e      	subs	r3, #46	; 0x2e
    bdf4:	8363      	strh	r3, [r4, #26]
    bdf6:	e7ed      	b.n	bdd4 <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    bdf8:	07da      	lsls	r2, r3, #31
    bdfa:	d505      	bpl.n	be08 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    bdfc:	2213      	movs	r2, #19
    bdfe:	2332      	movs	r3, #50	; 0x32
    be00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    be02:	3b31      	subs	r3, #49	; 0x31
    be04:	8363      	strh	r3, [r4, #26]
    be06:	e7e5      	b.n	bdd4 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    be08:	06da      	lsls	r2, r3, #27
    be0a:	d505      	bpl.n	be18 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    be0c:	2242      	movs	r2, #66	; 0x42
    be0e:	2332      	movs	r3, #50	; 0x32
    be10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    be12:	3b22      	subs	r3, #34	; 0x22
    be14:	8363      	strh	r3, [r4, #26]
    be16:	e7dd      	b.n	bdd4 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    be18:	2220      	movs	r2, #32
    be1a:	421a      	tst	r2, r3
    be1c:	d0da      	beq.n	bdd4 <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    be1e:	3221      	adds	r2, #33	; 0x21
    be20:	2332      	movs	r3, #50	; 0x32
    be22:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    be24:	3b12      	subs	r3, #18
    be26:	8363      	strh	r3, [r4, #26]
    be28:	e7d4      	b.n	bdd4 <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    be2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    be2c:	05db      	lsls	r3, r3, #23
    be2e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    be30:	b2da      	uxtb	r2, r3
    be32:	6a69      	ldr	r1, [r5, #36]	; 0x24
    be34:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    be36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    be38:	1c51      	adds	r1, r2, #1
    be3a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    be3c:	7969      	ldrb	r1, [r5, #5]
    be3e:	2901      	cmp	r1, #1
    be40:	d010      	beq.n	be64 <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    be42:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    be44:	3b01      	subs	r3, #1
    be46:	b29b      	uxth	r3, r3
    be48:	85ab      	strh	r3, [r5, #44]	; 0x2c
    be4a:	2b00      	cmp	r3, #0
    be4c:	d112      	bne.n	be74 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    be4e:	3304      	adds	r3, #4
    be50:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    be52:	2200      	movs	r2, #0
    be54:	332e      	adds	r3, #46	; 0x2e
    be56:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    be58:	07bb      	lsls	r3, r7, #30
    be5a:	d50b      	bpl.n	be74 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    be5c:	0028      	movs	r0, r5
    be5e:	692b      	ldr	r3, [r5, #16]
    be60:	4798      	blx	r3
    be62:	e007      	b.n	be74 <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    be64:	0a1b      	lsrs	r3, r3, #8
    be66:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    be68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    be6a:	3301      	adds	r3, #1
    be6c:	626b      	str	r3, [r5, #36]	; 0x24
    be6e:	e7e8      	b.n	be42 <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    be70:	2304      	movs	r3, #4
    be72:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    be74:	06f3      	lsls	r3, r6, #27
    be76:	d504      	bpl.n	be82 <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    be78:	2310      	movs	r3, #16
    be7a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    be7c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    be7e:	06fb      	lsls	r3, r7, #27
    be80:	d410      	bmi.n	bea4 <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    be82:	06b3      	lsls	r3, r6, #26
    be84:	d504      	bpl.n	be90 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    be86:	2320      	movs	r3, #32
    be88:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    be8a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    be8c:	073b      	lsls	r3, r7, #28
    be8e:	d40d      	bmi.n	beac <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    be90:	0733      	lsls	r3, r6, #28
    be92:	d504      	bpl.n	be9e <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    be94:	2308      	movs	r3, #8
    be96:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    be98:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    be9a:	06bb      	lsls	r3, r7, #26
    be9c:	d40a      	bmi.n	beb4 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    be9e:	bc04      	pop	{r2}
    bea0:	4690      	mov	r8, r2
    bea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    bea4:	0028      	movs	r0, r5
    bea6:	69eb      	ldr	r3, [r5, #28]
    bea8:	4798      	blx	r3
    beaa:	e7ea      	b.n	be82 <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    beac:	0028      	movs	r0, r5
    beae:	69ab      	ldr	r3, [r5, #24]
    beb0:	4798      	blx	r3
    beb2:	e7ed      	b.n	be90 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    beb4:	6a2b      	ldr	r3, [r5, #32]
    beb6:	0028      	movs	r0, r5
    beb8:	4798      	blx	r3
}
    beba:	e7f0      	b.n	be9e <_usart_interrupt_handler+0x17e>
    bebc:	20001ef4 	.word	0x20001ef4

0000bec0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    bec0:	4770      	bx	lr
	...

0000bec4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    bec4:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    bec6:	4b0b      	ldr	r3, [pc, #44]	; (bef4 <_sercom_set_handler+0x30>)
    bec8:	781b      	ldrb	r3, [r3, #0]
    beca:	2b00      	cmp	r3, #0
    becc:	d008      	beq.n	bee0 <_sercom_set_handler+0x1c>
    bece:	e00c      	b.n	beea <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    bed0:	009a      	lsls	r2, r3, #2
    bed2:	4d09      	ldr	r5, [pc, #36]	; (bef8 <_sercom_set_handler+0x34>)
    bed4:	4c09      	ldr	r4, [pc, #36]	; (befc <_sercom_set_handler+0x38>)
    bed6:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    bed8:	2500      	movs	r5, #0
    beda:	4c09      	ldr	r4, [pc, #36]	; (bf00 <_sercom_set_handler+0x3c>)
    bedc:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    bede:	3301      	adds	r3, #1
    bee0:	2b05      	cmp	r3, #5
    bee2:	d9f5      	bls.n	bed0 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    bee4:	2201      	movs	r2, #1
    bee6:	4b03      	ldr	r3, [pc, #12]	; (bef4 <_sercom_set_handler+0x30>)
    bee8:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    beea:	0080      	lsls	r0, r0, #2
    beec:	4b03      	ldr	r3, [pc, #12]	; (befc <_sercom_set_handler+0x38>)
    beee:	50c1      	str	r1, [r0, r3]
}
    bef0:	bd30      	pop	{r4, r5, pc}
    bef2:	46c0      	nop			; (mov r8, r8)
    bef4:	200018a1 	.word	0x200018a1
    bef8:	0000bec1 	.word	0x0000bec1
    befc:	200018a4 	.word	0x200018a4
    bf00:	20001ef4 	.word	0x20001ef4

0000bf04 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    bf04:	b500      	push	{lr}
    bf06:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    bf08:	4b05      	ldr	r3, [pc, #20]	; (bf20 <_sercom_get_interrupt_vector+0x1c>)
    bf0a:	681a      	ldr	r2, [r3, #0]
    bf0c:	9200      	str	r2, [sp, #0]
    bf0e:	889b      	ldrh	r3, [r3, #4]
    bf10:	466a      	mov	r2, sp
    bf12:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    bf14:	4b03      	ldr	r3, [pc, #12]	; (bf24 <_sercom_get_interrupt_vector+0x20>)
    bf16:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    bf18:	466b      	mov	r3, sp
    bf1a:	5618      	ldrsb	r0, [r3, r0]
}
    bf1c:	b003      	add	sp, #12
    bf1e:	bd00      	pop	{pc}
    bf20:	0000f934 	.word	0x0000f934
    bf24:	00000a21 	.word	0x00000a21

0000bf28 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    bf28:	b510      	push	{r4, lr}
    bf2a:	4b02      	ldr	r3, [pc, #8]	; (bf34 <SERCOM0_Handler+0xc>)
    bf2c:	681b      	ldr	r3, [r3, #0]
    bf2e:	2000      	movs	r0, #0
    bf30:	4798      	blx	r3
    bf32:	bd10      	pop	{r4, pc}
    bf34:	200018a4 	.word	0x200018a4

0000bf38 <SERCOM1_Handler>:
    bf38:	b510      	push	{r4, lr}
    bf3a:	4b02      	ldr	r3, [pc, #8]	; (bf44 <SERCOM1_Handler+0xc>)
    bf3c:	685b      	ldr	r3, [r3, #4]
    bf3e:	2001      	movs	r0, #1
    bf40:	4798      	blx	r3
    bf42:	bd10      	pop	{r4, pc}
    bf44:	200018a4 	.word	0x200018a4

0000bf48 <SERCOM2_Handler>:
    bf48:	b510      	push	{r4, lr}
    bf4a:	4b02      	ldr	r3, [pc, #8]	; (bf54 <SERCOM2_Handler+0xc>)
    bf4c:	689b      	ldr	r3, [r3, #8]
    bf4e:	2002      	movs	r0, #2
    bf50:	4798      	blx	r3
    bf52:	bd10      	pop	{r4, pc}
    bf54:	200018a4 	.word	0x200018a4

0000bf58 <SERCOM3_Handler>:
    bf58:	b510      	push	{r4, lr}
    bf5a:	4b02      	ldr	r3, [pc, #8]	; (bf64 <SERCOM3_Handler+0xc>)
    bf5c:	68db      	ldr	r3, [r3, #12]
    bf5e:	2003      	movs	r0, #3
    bf60:	4798      	blx	r3
    bf62:	bd10      	pop	{r4, pc}
    bf64:	200018a4 	.word	0x200018a4

0000bf68 <SERCOM4_Handler>:
    bf68:	b510      	push	{r4, lr}
    bf6a:	4b02      	ldr	r3, [pc, #8]	; (bf74 <SERCOM4_Handler+0xc>)
    bf6c:	691b      	ldr	r3, [r3, #16]
    bf6e:	2004      	movs	r0, #4
    bf70:	4798      	blx	r3
    bf72:	bd10      	pop	{r4, pc}
    bf74:	200018a4 	.word	0x200018a4

0000bf78 <SERCOM5_Handler>:
    bf78:	b510      	push	{r4, lr}
    bf7a:	4b02      	ldr	r3, [pc, #8]	; (bf84 <SERCOM5_Handler+0xc>)
    bf7c:	695b      	ldr	r3, [r3, #20]
    bf7e:	2005      	movs	r0, #5
    bf80:	4798      	blx	r3
    bf82:	bd10      	pop	{r4, pc}
    bf84:	200018a4 	.word	0x200018a4

0000bf88 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    bf88:	b500      	push	{lr}
    bf8a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    bf8c:	ab01      	add	r3, sp, #4
    bf8e:	2280      	movs	r2, #128	; 0x80
    bf90:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    bf92:	780a      	ldrb	r2, [r1, #0]
    bf94:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    bf96:	784a      	ldrb	r2, [r1, #1]
    bf98:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    bf9a:	788a      	ldrb	r2, [r1, #2]
    bf9c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    bf9e:	0019      	movs	r1, r3
    bfa0:	4b01      	ldr	r3, [pc, #4]	; (bfa8 <port_pin_set_config+0x20>)
    bfa2:	4798      	blx	r3
}
    bfa4:	b003      	add	sp, #12
    bfa6:	bd00      	pop	{pc}
    bfa8:	0000c6b9 	.word	0x0000c6b9

0000bfac <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    bfac:	4770      	bx	lr
	...

0000bfb0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    bfb0:	4b0c      	ldr	r3, [pc, #48]	; (bfe4 <cpu_irq_enter_critical+0x34>)
    bfb2:	681b      	ldr	r3, [r3, #0]
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d106      	bne.n	bfc6 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bfb8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    bfbc:	2b00      	cmp	r3, #0
    bfbe:	d007      	beq.n	bfd0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    bfc0:	2200      	movs	r2, #0
    bfc2:	4b09      	ldr	r3, [pc, #36]	; (bfe8 <cpu_irq_enter_critical+0x38>)
    bfc4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    bfc6:	4a07      	ldr	r2, [pc, #28]	; (bfe4 <cpu_irq_enter_critical+0x34>)
    bfc8:	6813      	ldr	r3, [r2, #0]
    bfca:	3301      	adds	r3, #1
    bfcc:	6013      	str	r3, [r2, #0]
}
    bfce:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    bfd0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bfd2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    bfd6:	2200      	movs	r2, #0
    bfd8:	4b04      	ldr	r3, [pc, #16]	; (bfec <cpu_irq_enter_critical+0x3c>)
    bfda:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    bfdc:	3201      	adds	r2, #1
    bfde:	4b02      	ldr	r3, [pc, #8]	; (bfe8 <cpu_irq_enter_critical+0x38>)
    bfe0:	701a      	strb	r2, [r3, #0]
    bfe2:	e7f0      	b.n	bfc6 <cpu_irq_enter_critical+0x16>
    bfe4:	200018bc 	.word	0x200018bc
    bfe8:	200018c0 	.word	0x200018c0
    bfec:	200002bc 	.word	0x200002bc

0000bff0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    bff0:	4b08      	ldr	r3, [pc, #32]	; (c014 <cpu_irq_leave_critical+0x24>)
    bff2:	681a      	ldr	r2, [r3, #0]
    bff4:	3a01      	subs	r2, #1
    bff6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    bff8:	681b      	ldr	r3, [r3, #0]
    bffa:	2b00      	cmp	r3, #0
    bffc:	d109      	bne.n	c012 <cpu_irq_leave_critical+0x22>
    bffe:	4b06      	ldr	r3, [pc, #24]	; (c018 <cpu_irq_leave_critical+0x28>)
    c000:	781b      	ldrb	r3, [r3, #0]
    c002:	2b00      	cmp	r3, #0
    c004:	d005      	beq.n	c012 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    c006:	2201      	movs	r2, #1
    c008:	4b04      	ldr	r3, [pc, #16]	; (c01c <cpu_irq_leave_critical+0x2c>)
    c00a:	701a      	strb	r2, [r3, #0]
    c00c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c010:	b662      	cpsie	i
	}
}
    c012:	4770      	bx	lr
    c014:	200018bc 	.word	0x200018bc
    c018:	200018c0 	.word	0x200018c0
    c01c:	200002bc 	.word	0x200002bc

0000c020 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    c020:	b510      	push	{r4, lr}
    c022:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    c024:	2201      	movs	r2, #1
    c026:	ab01      	add	r3, sp, #4
    c028:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    c02a:	2400      	movs	r4, #0
    c02c:	e004      	b.n	c038 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    c02e:	b2e0      	uxtb	r0, r4
    c030:	a901      	add	r1, sp, #4
    c032:	4b03      	ldr	r3, [pc, #12]	; (c040 <_switch_peripheral_gclk+0x20>)
    c034:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    c036:	3401      	adds	r4, #1
    c038:	2c24      	cmp	r4, #36	; 0x24
    c03a:	d9f8      	bls.n	c02e <_switch_peripheral_gclk+0xe>
	}
}
    c03c:	b002      	add	sp, #8
    c03e:	bd10      	pop	{r4, pc}
    c040:	0000c581 	.word	0x0000c581

0000c044 <system_clock_source_get_hz>:
{
    c044:	b510      	push	{r4, lr}
	switch (clock_source) {
    c046:	2808      	cmp	r0, #8
    c048:	d834      	bhi.n	c0b4 <system_clock_source_get_hz+0x70>
    c04a:	0080      	lsls	r0, r0, #2
    c04c:	4b1c      	ldr	r3, [pc, #112]	; (c0c0 <system_clock_source_get_hz+0x7c>)
    c04e:	581b      	ldr	r3, [r3, r0]
    c050:	469f      	mov	pc, r3
		return 32768UL;
    c052:	2080      	movs	r0, #128	; 0x80
    c054:	0200      	lsls	r0, r0, #8
}
    c056:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    c058:	4b1a      	ldr	r3, [pc, #104]	; (c0c4 <system_clock_source_get_hz+0x80>)
    c05a:	6918      	ldr	r0, [r3, #16]
    c05c:	e7fb      	b.n	c056 <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    c05e:	4b1a      	ldr	r3, [pc, #104]	; (c0c8 <system_clock_source_get_hz+0x84>)
    c060:	6a1b      	ldr	r3, [r3, #32]
    c062:	059b      	lsls	r3, r3, #22
    c064:	0f9b      	lsrs	r3, r3, #30
    c066:	4819      	ldr	r0, [pc, #100]	; (c0cc <system_clock_source_get_hz+0x88>)
    c068:	40d8      	lsrs	r0, r3
    c06a:	e7f4      	b.n	c056 <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    c06c:	4b15      	ldr	r3, [pc, #84]	; (c0c4 <system_clock_source_get_hz+0x80>)
    c06e:	6958      	ldr	r0, [r3, #20]
    c070:	e7f1      	b.n	c056 <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    c072:	4b14      	ldr	r3, [pc, #80]	; (c0c4 <system_clock_source_get_hz+0x80>)
    c074:	681b      	ldr	r3, [r3, #0]
    c076:	079b      	lsls	r3, r3, #30
    c078:	d51e      	bpl.n	c0b8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    c07a:	4b13      	ldr	r3, [pc, #76]	; (c0c8 <system_clock_source_get_hz+0x84>)
    c07c:	68db      	ldr	r3, [r3, #12]
    c07e:	06db      	lsls	r3, r3, #27
    c080:	d5fb      	bpl.n	c07a <system_clock_source_get_hz+0x36>
		switch(_system_clock_inst.dfll.control &
    c082:	4b10      	ldr	r3, [pc, #64]	; (c0c4 <system_clock_source_get_hz+0x80>)
    c084:	681a      	ldr	r2, [r3, #0]
    c086:	2324      	movs	r3, #36	; 0x24
    c088:	4013      	ands	r3, r2
    c08a:	2b04      	cmp	r3, #4
    c08c:	d001      	beq.n	c092 <system_clock_source_get_hz+0x4e>
			return 48000000UL;
    c08e:	4810      	ldr	r0, [pc, #64]	; (c0d0 <system_clock_source_get_hz+0x8c>)
    c090:	e7e1      	b.n	c056 <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    c092:	2000      	movs	r0, #0
    c094:	4b0f      	ldr	r3, [pc, #60]	; (c0d4 <system_clock_source_get_hz+0x90>)
    c096:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    c098:	4b0a      	ldr	r3, [pc, #40]	; (c0c4 <system_clock_source_get_hz+0x80>)
    c09a:	689b      	ldr	r3, [r3, #8]
    c09c:	041b      	lsls	r3, r3, #16
    c09e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    c0a0:	4358      	muls	r0, r3
    c0a2:	e7d8      	b.n	c056 <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    c0a4:	2350      	movs	r3, #80	; 0x50
    c0a6:	4a08      	ldr	r2, [pc, #32]	; (c0c8 <system_clock_source_get_hz+0x84>)
    c0a8:	5cd3      	ldrb	r3, [r2, r3]
    c0aa:	075b      	lsls	r3, r3, #29
    c0ac:	d506      	bpl.n	c0bc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    c0ae:	4b05      	ldr	r3, [pc, #20]	; (c0c4 <system_clock_source_get_hz+0x80>)
    c0b0:	68d8      	ldr	r0, [r3, #12]
    c0b2:	e7d0      	b.n	c056 <system_clock_source_get_hz+0x12>
		return 0;
    c0b4:	2000      	movs	r0, #0
    c0b6:	e7ce      	b.n	c056 <system_clock_source_get_hz+0x12>
			return 0;
    c0b8:	2000      	movs	r0, #0
    c0ba:	e7cc      	b.n	c056 <system_clock_source_get_hz+0x12>
			return 0;
    c0bc:	2000      	movs	r0, #0
    c0be:	e7ca      	b.n	c056 <system_clock_source_get_hz+0x12>
    c0c0:	0000f93c 	.word	0x0000f93c
    c0c4:	200018c4 	.word	0x200018c4
    c0c8:	40000800 	.word	0x40000800
    c0cc:	007a1200 	.word	0x007a1200
    c0d0:	02dc6c00 	.word	0x02dc6c00
    c0d4:	0000c59d 	.word	0x0000c59d

0000c0d8 <system_clock_source_osc8m_set_config>:
{
    c0d8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    c0da:	4d0c      	ldr	r5, [pc, #48]	; (c10c <system_clock_source_osc8m_set_config+0x34>)
    c0dc:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    c0de:	7802      	ldrb	r2, [r0, #0]
    c0e0:	2103      	movs	r1, #3
    c0e2:	400a      	ands	r2, r1
    c0e4:	0212      	lsls	r2, r2, #8
    c0e6:	490a      	ldr	r1, [pc, #40]	; (c110 <system_clock_source_osc8m_set_config+0x38>)
    c0e8:	4031      	ands	r1, r6
    c0ea:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    c0ec:	7882      	ldrb	r2, [r0, #2]
    c0ee:	2401      	movs	r4, #1
    c0f0:	4022      	ands	r2, r4
    c0f2:	01d2      	lsls	r2, r2, #7
    c0f4:	2380      	movs	r3, #128	; 0x80
    c0f6:	4399      	bics	r1, r3
    c0f8:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    c0fa:	7843      	ldrb	r3, [r0, #1]
    c0fc:	4023      	ands	r3, r4
    c0fe:	019b      	lsls	r3, r3, #6
    c100:	2140      	movs	r1, #64	; 0x40
    c102:	438a      	bics	r2, r1
    c104:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    c106:	622b      	str	r3, [r5, #32]
}
    c108:	bd70      	pop	{r4, r5, r6, pc}
    c10a:	46c0      	nop			; (mov r8, r8)
    c10c:	40000800 	.word	0x40000800
    c110:	fffffcff 	.word	0xfffffcff

0000c114 <system_clock_source_osc32k_set_config>:
{
    c114:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    c116:	4f15      	ldr	r7, [pc, #84]	; (c16c <system_clock_source_osc32k_set_config+0x58>)
    c118:	69be      	ldr	r6, [r7, #24]
	temp.bit.EN1K     = config->enable_1khz_output;
    c11a:	7842      	ldrb	r2, [r0, #1]
    c11c:	2301      	movs	r3, #1
    c11e:	401a      	ands	r2, r3
    c120:	00d2      	lsls	r2, r2, #3
    c122:	2108      	movs	r1, #8
    c124:	438e      	bics	r6, r1
    c126:	4332      	orrs	r2, r6
	temp.bit.EN32K    = config->enable_32khz_output;
    c128:	7885      	ldrb	r5, [r0, #2]
    c12a:	401d      	ands	r5, r3
    c12c:	00ad      	lsls	r5, r5, #2
    c12e:	3904      	subs	r1, #4
    c130:	438a      	bics	r2, r1
    c132:	4315      	orrs	r5, r2
	temp.bit.STARTUP  = config->startup_time;
    c134:	7801      	ldrb	r1, [r0, #0]
    c136:	2407      	movs	r4, #7
    c138:	400c      	ands	r4, r1
    c13a:	0224      	lsls	r4, r4, #8
    c13c:	490c      	ldr	r1, [pc, #48]	; (c170 <system_clock_source_osc32k_set_config+0x5c>)
    c13e:	400d      	ands	r5, r1
    c140:	432c      	orrs	r4, r5
	temp.bit.ONDEMAND = config->on_demand;
    c142:	7901      	ldrb	r1, [r0, #4]
    c144:	4019      	ands	r1, r3
    c146:	01c9      	lsls	r1, r1, #7
    c148:	2280      	movs	r2, #128	; 0x80
    c14a:	4394      	bics	r4, r2
    c14c:	4321      	orrs	r1, r4
	temp.bit.RUNSTDBY = config->run_in_standby;
    c14e:	78c2      	ldrb	r2, [r0, #3]
    c150:	401a      	ands	r2, r3
    c152:	0192      	lsls	r2, r2, #6
    c154:	2440      	movs	r4, #64	; 0x40
    c156:	43a1      	bics	r1, r4
    c158:	430a      	orrs	r2, r1
	temp.bit.WRTLOCK  = config->write_once;
    c15a:	7941      	ldrb	r1, [r0, #5]
    c15c:	400b      	ands	r3, r1
    c15e:	031b      	lsls	r3, r3, #12
    c160:	4904      	ldr	r1, [pc, #16]	; (c174 <system_clock_source_osc32k_set_config+0x60>)
    c162:	400a      	ands	r2, r1
    c164:	4313      	orrs	r3, r2
	SYSCTRL->OSC32K  = temp;
    c166:	61bb      	str	r3, [r7, #24]
}
    c168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c16a:	46c0      	nop			; (mov r8, r8)
    c16c:	40000800 	.word	0x40000800
    c170:	fffff8ff 	.word	0xfffff8ff
    c174:	ffffefff 	.word	0xffffefff

0000c178 <system_clock_source_enable>:
	switch (clock_source) {
    c178:	2808      	cmp	r0, #8
    c17a:	d84a      	bhi.n	c212 <system_clock_source_enable+0x9a>
    c17c:	0080      	lsls	r0, r0, #2
    c17e:	4b26      	ldr	r3, [pc, #152]	; (c218 <system_clock_source_enable+0xa0>)
    c180:	581b      	ldr	r3, [r3, r0]
    c182:	469f      	mov	pc, r3
		return STATUS_OK;
    c184:	2000      	movs	r0, #0
}
    c186:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    c188:	4a24      	ldr	r2, [pc, #144]	; (c21c <system_clock_source_enable+0xa4>)
    c18a:	6a13      	ldr	r3, [r2, #32]
    c18c:	2102      	movs	r1, #2
    c18e:	430b      	orrs	r3, r1
    c190:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    c192:	2000      	movs	r0, #0
    c194:	e7f7      	b.n	c186 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    c196:	4a21      	ldr	r2, [pc, #132]	; (c21c <system_clock_source_enable+0xa4>)
    c198:	6993      	ldr	r3, [r2, #24]
    c19a:	2102      	movs	r1, #2
    c19c:	430b      	orrs	r3, r1
    c19e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    c1a0:	2000      	movs	r0, #0
		break;
    c1a2:	e7f0      	b.n	c186 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    c1a4:	4a1d      	ldr	r2, [pc, #116]	; (c21c <system_clock_source_enable+0xa4>)
    c1a6:	8a13      	ldrh	r3, [r2, #16]
    c1a8:	2102      	movs	r1, #2
    c1aa:	430b      	orrs	r3, r1
    c1ac:	b29b      	uxth	r3, r3
    c1ae:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    c1b0:	2000      	movs	r0, #0
		break;
    c1b2:	e7e8      	b.n	c186 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    c1b4:	4a19      	ldr	r2, [pc, #100]	; (c21c <system_clock_source_enable+0xa4>)
    c1b6:	8a93      	ldrh	r3, [r2, #20]
    c1b8:	2102      	movs	r1, #2
    c1ba:	430b      	orrs	r3, r1
    c1bc:	b29b      	uxth	r3, r3
    c1be:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    c1c0:	2000      	movs	r0, #0
		break;
    c1c2:	e7e0      	b.n	c186 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    c1c4:	4916      	ldr	r1, [pc, #88]	; (c220 <system_clock_source_enable+0xa8>)
    c1c6:	680b      	ldr	r3, [r1, #0]
    c1c8:	2202      	movs	r2, #2
    c1ca:	4313      	orrs	r3, r2
    c1cc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    c1ce:	4b13      	ldr	r3, [pc, #76]	; (c21c <system_clock_source_enable+0xa4>)
    c1d0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    c1d2:	4b12      	ldr	r3, [pc, #72]	; (c21c <system_clock_source_enable+0xa4>)
    c1d4:	68db      	ldr	r3, [r3, #12]
    c1d6:	06db      	lsls	r3, r3, #27
    c1d8:	d5fb      	bpl.n	c1d2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    c1da:	4a11      	ldr	r2, [pc, #68]	; (c220 <system_clock_source_enable+0xa8>)
    c1dc:	6891      	ldr	r1, [r2, #8]
    c1de:	4b0f      	ldr	r3, [pc, #60]	; (c21c <system_clock_source_enable+0xa4>)
    c1e0:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    c1e2:	6852      	ldr	r2, [r2, #4]
    c1e4:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    c1e6:	2200      	movs	r2, #0
    c1e8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    c1ea:	4b0c      	ldr	r3, [pc, #48]	; (c21c <system_clock_source_enable+0xa4>)
    c1ec:	68db      	ldr	r3, [r3, #12]
    c1ee:	06db      	lsls	r3, r3, #27
    c1f0:	d5fb      	bpl.n	c1ea <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    c1f2:	4b0b      	ldr	r3, [pc, #44]	; (c220 <system_clock_source_enable+0xa8>)
    c1f4:	681b      	ldr	r3, [r3, #0]
    c1f6:	b29b      	uxth	r3, r3
    c1f8:	4a08      	ldr	r2, [pc, #32]	; (c21c <system_clock_source_enable+0xa4>)
    c1fa:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    c1fc:	2000      	movs	r0, #0
    c1fe:	e7c2      	b.n	c186 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    c200:	4906      	ldr	r1, [pc, #24]	; (c21c <system_clock_source_enable+0xa4>)
    c202:	2244      	movs	r2, #68	; 0x44
    c204:	5c8b      	ldrb	r3, [r1, r2]
    c206:	2002      	movs	r0, #2
    c208:	4303      	orrs	r3, r0
    c20a:	b2db      	uxtb	r3, r3
    c20c:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    c20e:	2000      	movs	r0, #0
		break;
    c210:	e7b9      	b.n	c186 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    c212:	2017      	movs	r0, #23
    c214:	e7b7      	b.n	c186 <system_clock_source_enable+0xe>
    c216:	46c0      	nop			; (mov r8, r8)
    c218:	0000f960 	.word	0x0000f960
    c21c:	40000800 	.word	0x40000800
    c220:	200018c4 	.word	0x200018c4

0000c224 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    c224:	b5f0      	push	{r4, r5, r6, r7, lr}
    c226:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    c228:	4c29      	ldr	r4, [pc, #164]	; (c2d0 <system_clock_init+0xac>)
    c22a:	23c2      	movs	r3, #194	; 0xc2
    c22c:	00db      	lsls	r3, r3, #3
    c22e:	60a3      	str	r3, [r4, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    c230:	4b28      	ldr	r3, [pc, #160]	; (c2d4 <system_clock_init+0xb0>)
    c232:	6859      	ldr	r1, [r3, #4]
    c234:	221e      	movs	r2, #30
    c236:	4391      	bics	r1, r2
    c238:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    c23a:	4b27      	ldr	r3, [pc, #156]	; (c2d8 <system_clock_init+0xb4>)
    c23c:	4798      	blx	r3


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    c23e:	4b27      	ldr	r3, [pc, #156]	; (c2dc <system_clock_init+0xb8>)
    c240:	6819      	ldr	r1, [r3, #0]
    c242:	0989      	lsrs	r1, r1, #6
	SYSCTRL->OSC32K.bit.CALIB =
    c244:	69a2      	ldr	r2, [r4, #24]
    c246:	237f      	movs	r3, #127	; 0x7f
    c248:	400b      	ands	r3, r1
    c24a:	041b      	lsls	r3, r3, #16
    c24c:	4924      	ldr	r1, [pc, #144]	; (c2e0 <system_clock_init+0xbc>)
    c24e:	400a      	ands	r2, r1
    c250:	4313      	orrs	r3, r2
    c252:	61a3      	str	r3, [r4, #24]
	config->enable_1khz_output  = true;
    c254:	a804      	add	r0, sp, #16
    c256:	2501      	movs	r5, #1
    c258:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    c25a:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    c25c:	2400      	movs	r4, #0
    c25e:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    c260:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    c262:	2307      	movs	r3, #7
    c264:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    c266:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    c268:	4b1e      	ldr	r3, [pc, #120]	; (c2e4 <system_clock_init+0xc0>)
    c26a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    c26c:	2004      	movs	r0, #4
    c26e:	4e1e      	ldr	r6, [pc, #120]	; (c2e8 <system_clock_init+0xc4>)
    c270:	47b0      	blx	r6
	config->run_in_standby  = false;
    c272:	a803      	add	r0, sp, #12
    c274:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    c276:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    c278:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    c27a:	4b1c      	ldr	r3, [pc, #112]	; (c2ec <system_clock_init+0xc8>)
    c27c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    c27e:	2006      	movs	r0, #6
    c280:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    c282:	4b1b      	ldr	r3, [pc, #108]	; (c2f0 <system_clock_init+0xcc>)
    c284:	4798      	blx	r3
	config->high_when_disabled = false;
    c286:	466b      	mov	r3, sp
    c288:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    c28a:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    c28c:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    c28e:	2304      	movs	r3, #4
    c290:	466a      	mov	r2, sp
    c292:	7013      	strb	r3, [r2, #0]
    c294:	331c      	adds	r3, #28
    c296:	9301      	str	r3, [sp, #4]
    c298:	4669      	mov	r1, sp
    c29a:	2002      	movs	r0, #2
    c29c:	4f15      	ldr	r7, [pc, #84]	; (c2f4 <system_clock_init+0xd0>)
    c29e:	47b8      	blx	r7
    c2a0:	2002      	movs	r0, #2
    c2a2:	4e15      	ldr	r6, [pc, #84]	; (c2f8 <system_clock_init+0xd4>)
    c2a4:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    c2a6:	4b15      	ldr	r3, [pc, #84]	; (c2fc <system_clock_init+0xd8>)
    c2a8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    c2aa:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    c2ac:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    c2ae:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    c2b0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    c2b2:	466b      	mov	r3, sp
    c2b4:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    c2b6:	2306      	movs	r3, #6
    c2b8:	466a      	mov	r2, sp
    c2ba:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    c2bc:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    c2be:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    c2c0:	4669      	mov	r1, sp
    c2c2:	2000      	movs	r0, #0
    c2c4:	47b8      	blx	r7
    c2c6:	2000      	movs	r0, #0
    c2c8:	47b0      	blx	r6
#endif
}
    c2ca:	b007      	add	sp, #28
    c2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2ce:	46c0      	nop			; (mov r8, r8)
    c2d0:	40000800 	.word	0x40000800
    c2d4:	41004000 	.word	0x41004000
    c2d8:	0000c021 	.word	0x0000c021
    c2dc:	00806024 	.word	0x00806024
    c2e0:	ff80ffff 	.word	0xff80ffff
    c2e4:	0000c115 	.word	0x0000c115
    c2e8:	0000c179 	.word	0x0000c179
    c2ec:	0000c0d9 	.word	0x0000c0d9
    c2f0:	0000c301 	.word	0x0000c301
    c2f4:	0000c325 	.word	0x0000c325
    c2f8:	0000c3f5 	.word	0x0000c3f5
    c2fc:	40000400 	.word	0x40000400

0000c300 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    c300:	4a06      	ldr	r2, [pc, #24]	; (c31c <system_gclk_init+0x1c>)
    c302:	6993      	ldr	r3, [r2, #24]
    c304:	2108      	movs	r1, #8
    c306:	430b      	orrs	r3, r1
    c308:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    c30a:	2201      	movs	r2, #1
    c30c:	4b04      	ldr	r3, [pc, #16]	; (c320 <system_gclk_init+0x20>)
    c30e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    c310:	4b03      	ldr	r3, [pc, #12]	; (c320 <system_gclk_init+0x20>)
    c312:	781b      	ldrb	r3, [r3, #0]
    c314:	07db      	lsls	r3, r3, #31
    c316:	d4fb      	bmi.n	c310 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    c318:	4770      	bx	lr
    c31a:	46c0      	nop			; (mov r8, r8)
    c31c:	40000400 	.word	0x40000400
    c320:	40000c00 	.word	0x40000c00

0000c324 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c326:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    c328:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    c32a:	780c      	ldrb	r4, [r1, #0]
    c32c:	0224      	lsls	r4, r4, #8
    c32e:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    c330:	784b      	ldrb	r3, [r1, #1]
    c332:	2b00      	cmp	r3, #0
    c334:	d002      	beq.n	c33c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    c336:	2380      	movs	r3, #128	; 0x80
    c338:	02db      	lsls	r3, r3, #11
    c33a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    c33c:	7a4b      	ldrb	r3, [r1, #9]
    c33e:	2b00      	cmp	r3, #0
    c340:	d002      	beq.n	c348 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    c342:	2380      	movs	r3, #128	; 0x80
    c344:	031b      	lsls	r3, r3, #12
    c346:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    c348:	6848      	ldr	r0, [r1, #4]
    c34a:	2801      	cmp	r0, #1
    c34c:	d912      	bls.n	c374 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    c34e:	1e43      	subs	r3, r0, #1
    c350:	4203      	tst	r3, r0
    c352:	d03d      	beq.n	c3d0 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    c354:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    c356:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    c358:	2380      	movs	r3, #128	; 0x80
    c35a:	029b      	lsls	r3, r3, #10
    c35c:	431c      	orrs	r4, r3
    c35e:	e009      	b.n	c374 <system_gclk_gen_set_config+0x50>
				div2_count++;
    c360:	3201      	adds	r2, #1
						mask <<= 1) {
    c362:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    c364:	4283      	cmp	r3, r0
    c366:	d3fb      	bcc.n	c360 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    c368:	0212      	lsls	r2, r2, #8
    c36a:	4332      	orrs	r2, r6
    c36c:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    c36e:	2380      	movs	r3, #128	; 0x80
    c370:	035b      	lsls	r3, r3, #13
    c372:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    c374:	7a0b      	ldrb	r3, [r1, #8]
    c376:	2b00      	cmp	r3, #0
    c378:	d002      	beq.n	c380 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    c37a:	2380      	movs	r3, #128	; 0x80
    c37c:	039b      	lsls	r3, r3, #14
    c37e:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c380:	4b18      	ldr	r3, [pc, #96]	; (c3e4 <system_gclk_gen_set_config+0xc0>)
    c382:	785b      	ldrb	r3, [r3, #1]
    c384:	b25b      	sxtb	r3, r3
    c386:	2b00      	cmp	r3, #0
    c388:	db25      	blt.n	c3d6 <system_gclk_gen_set_config+0xb2>
	return false;
    c38a:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    c38c:	2f00      	cmp	r7, #0
    c38e:	d1f7      	bne.n	c380 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    c390:	4b15      	ldr	r3, [pc, #84]	; (c3e8 <system_gclk_gen_set_config+0xc4>)
    c392:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c394:	4b15      	ldr	r3, [pc, #84]	; (c3ec <system_gclk_gen_set_config+0xc8>)
    c396:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c398:	4b12      	ldr	r3, [pc, #72]	; (c3e4 <system_gclk_gen_set_config+0xc0>)
    c39a:	785b      	ldrb	r3, [r3, #1]
    c39c:	b25b      	sxtb	r3, r3
    c39e:	2b00      	cmp	r3, #0
    c3a0:	db1b      	blt.n	c3da <system_gclk_gen_set_config+0xb6>
	return false;
    c3a2:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    c3a4:	2a00      	cmp	r2, #0
    c3a6:	d1f7      	bne.n	c398 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    c3a8:	4b0e      	ldr	r3, [pc, #56]	; (c3e4 <system_gclk_gen_set_config+0xc0>)
    c3aa:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c3ac:	4b0d      	ldr	r3, [pc, #52]	; (c3e4 <system_gclk_gen_set_config+0xc0>)
    c3ae:	785b      	ldrb	r3, [r3, #1]
    c3b0:	b25b      	sxtb	r3, r3
    c3b2:	2b00      	cmp	r3, #0
    c3b4:	db13      	blt.n	c3de <system_gclk_gen_set_config+0xba>
	return false;
    c3b6:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    c3b8:	2b00      	cmp	r3, #0
    c3ba:	d1f7      	bne.n	c3ac <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    c3bc:	4a09      	ldr	r2, [pc, #36]	; (c3e4 <system_gclk_gen_set_config+0xc0>)
    c3be:	6853      	ldr	r3, [r2, #4]
    c3c0:	2180      	movs	r1, #128	; 0x80
    c3c2:	0249      	lsls	r1, r1, #9
    c3c4:	400b      	ands	r3, r1
    c3c6:	431c      	orrs	r4, r3
    c3c8:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    c3ca:	4b09      	ldr	r3, [pc, #36]	; (c3f0 <system_gclk_gen_set_config+0xcc>)
    c3cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    c3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3d0:	2302      	movs	r3, #2
    c3d2:	2200      	movs	r2, #0
    c3d4:	e7c6      	b.n	c364 <system_gclk_gen_set_config+0x40>
		return true;
    c3d6:	2701      	movs	r7, #1
    c3d8:	e7d8      	b.n	c38c <system_gclk_gen_set_config+0x68>
    c3da:	2201      	movs	r2, #1
    c3dc:	e7e2      	b.n	c3a4 <system_gclk_gen_set_config+0x80>
    c3de:	2301      	movs	r3, #1
    c3e0:	e7ea      	b.n	c3b8 <system_gclk_gen_set_config+0x94>
    c3e2:	46c0      	nop			; (mov r8, r8)
    c3e4:	40000c00 	.word	0x40000c00
    c3e8:	0000bfb1 	.word	0x0000bfb1
    c3ec:	40000c08 	.word	0x40000c08
    c3f0:	0000bff1 	.word	0x0000bff1

0000c3f4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    c3f4:	b570      	push	{r4, r5, r6, lr}
    c3f6:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c3f8:	4b10      	ldr	r3, [pc, #64]	; (c43c <system_gclk_gen_enable+0x48>)
    c3fa:	785b      	ldrb	r3, [r3, #1]
    c3fc:	b25b      	sxtb	r3, r3
    c3fe:	2b00      	cmp	r3, #0
    c400:	db17      	blt.n	c432 <system_gclk_gen_enable+0x3e>
	return false;
    c402:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    c404:	2c00      	cmp	r4, #0
    c406:	d1f7      	bne.n	c3f8 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    c408:	4b0d      	ldr	r3, [pc, #52]	; (c440 <system_gclk_gen_enable+0x4c>)
    c40a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c40c:	4b0d      	ldr	r3, [pc, #52]	; (c444 <system_gclk_gen_enable+0x50>)
    c40e:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c410:	4b0a      	ldr	r3, [pc, #40]	; (c43c <system_gclk_gen_enable+0x48>)
    c412:	785b      	ldrb	r3, [r3, #1]
    c414:	b25b      	sxtb	r3, r3
    c416:	2b00      	cmp	r3, #0
    c418:	db0d      	blt.n	c436 <system_gclk_gen_enable+0x42>
	return false;
    c41a:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    c41c:	2b00      	cmp	r3, #0
    c41e:	d1f7      	bne.n	c410 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    c420:	4a06      	ldr	r2, [pc, #24]	; (c43c <system_gclk_gen_enable+0x48>)
    c422:	6851      	ldr	r1, [r2, #4]
    c424:	2380      	movs	r3, #128	; 0x80
    c426:	025b      	lsls	r3, r3, #9
    c428:	430b      	orrs	r3, r1
    c42a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    c42c:	4b06      	ldr	r3, [pc, #24]	; (c448 <system_gclk_gen_enable+0x54>)
    c42e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    c430:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    c432:	2401      	movs	r4, #1
    c434:	e7e6      	b.n	c404 <system_gclk_gen_enable+0x10>
    c436:	2301      	movs	r3, #1
    c438:	e7f0      	b.n	c41c <system_gclk_gen_enable+0x28>
    c43a:	46c0      	nop			; (mov r8, r8)
    c43c:	40000c00 	.word	0x40000c00
    c440:	0000bfb1 	.word	0x0000bfb1
    c444:	40000c04 	.word	0x40000c04
    c448:	0000bff1 	.word	0x0000bff1

0000c44c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c44e:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c450:	4b22      	ldr	r3, [pc, #136]	; (c4dc <system_gclk_gen_get_hz+0x90>)
    c452:	785b      	ldrb	r3, [r3, #1]
    c454:	b25b      	sxtb	r3, r3
    c456:	2b00      	cmp	r3, #0
    c458:	db34      	blt.n	c4c4 <system_gclk_gen_get_hz+0x78>
	return false;
    c45a:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    c45c:	2d00      	cmp	r5, #0
    c45e:	d1f7      	bne.n	c450 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    c460:	4b1f      	ldr	r3, [pc, #124]	; (c4e0 <system_gclk_gen_get_hz+0x94>)
    c462:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c464:	4b1f      	ldr	r3, [pc, #124]	; (c4e4 <system_gclk_gen_get_hz+0x98>)
    c466:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c468:	4b1c      	ldr	r3, [pc, #112]	; (c4dc <system_gclk_gen_get_hz+0x90>)
    c46a:	785b      	ldrb	r3, [r3, #1]
    c46c:	b25b      	sxtb	r3, r3
    c46e:	2b00      	cmp	r3, #0
    c470:	db2a      	blt.n	c4c8 <system_gclk_gen_get_hz+0x7c>
	return false;
    c472:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    c474:	2c00      	cmp	r4, #0
    c476:	d1f7      	bne.n	c468 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    c478:	4e18      	ldr	r6, [pc, #96]	; (c4dc <system_gclk_gen_get_hz+0x90>)
    c47a:	6870      	ldr	r0, [r6, #4]
    c47c:	04c0      	lsls	r0, r0, #19
    c47e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    c480:	4b19      	ldr	r3, [pc, #100]	; (c4e8 <system_gclk_gen_get_hz+0x9c>)
    c482:	4798      	blx	r3
    c484:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c486:	4b17      	ldr	r3, [pc, #92]	; (c4e4 <system_gclk_gen_get_hz+0x98>)
    c488:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    c48a:	6876      	ldr	r6, [r6, #4]
    c48c:	02f6      	lsls	r6, r6, #11
    c48e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c490:	4b16      	ldr	r3, [pc, #88]	; (c4ec <system_gclk_gen_get_hz+0xa0>)
    c492:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c494:	4b11      	ldr	r3, [pc, #68]	; (c4dc <system_gclk_gen_get_hz+0x90>)
    c496:	785b      	ldrb	r3, [r3, #1]
    c498:	b25b      	sxtb	r3, r3
    c49a:	2b00      	cmp	r3, #0
    c49c:	db16      	blt.n	c4cc <system_gclk_gen_get_hz+0x80>
	return false;
    c49e:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    c4a0:	2b00      	cmp	r3, #0
    c4a2:	d1f7      	bne.n	c494 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    c4a4:	4b0d      	ldr	r3, [pc, #52]	; (c4dc <system_gclk_gen_get_hz+0x90>)
    c4a6:	689c      	ldr	r4, [r3, #8]
    c4a8:	0224      	lsls	r4, r4, #8
    c4aa:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    c4ac:	4b10      	ldr	r3, [pc, #64]	; (c4f0 <system_gclk_gen_get_hz+0xa4>)
    c4ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    c4b0:	2e00      	cmp	r6, #0
    c4b2:	d10d      	bne.n	c4d0 <system_gclk_gen_get_hz+0x84>
    c4b4:	2c01      	cmp	r4, #1
    c4b6:	d90b      	bls.n	c4d0 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    c4b8:	0021      	movs	r1, r4
    c4ba:	0028      	movs	r0, r5
    c4bc:	4b0d      	ldr	r3, [pc, #52]	; (c4f4 <system_gclk_gen_get_hz+0xa8>)
    c4be:	4798      	blx	r3
    c4c0:	0005      	movs	r5, r0
    c4c2:	e009      	b.n	c4d8 <system_gclk_gen_get_hz+0x8c>
		return true;
    c4c4:	2501      	movs	r5, #1
    c4c6:	e7c9      	b.n	c45c <system_gclk_gen_get_hz+0x10>
    c4c8:	2401      	movs	r4, #1
    c4ca:	e7d3      	b.n	c474 <system_gclk_gen_get_hz+0x28>
    c4cc:	2301      	movs	r3, #1
    c4ce:	e7e7      	b.n	c4a0 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    c4d0:	2e00      	cmp	r6, #0
    c4d2:	d001      	beq.n	c4d8 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    c4d4:	3401      	adds	r4, #1
    c4d6:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    c4d8:	0028      	movs	r0, r5
    c4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4dc:	40000c00 	.word	0x40000c00
    c4e0:	0000bfb1 	.word	0x0000bfb1
    c4e4:	40000c04 	.word	0x40000c04
    c4e8:	0000c045 	.word	0x0000c045
    c4ec:	40000c08 	.word	0x40000c08
    c4f0:	0000bff1 	.word	0x0000bff1
    c4f4:	0000cbb1 	.word	0x0000cbb1

0000c4f8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    c4f8:	b510      	push	{r4, lr}
    c4fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    c4fc:	4b06      	ldr	r3, [pc, #24]	; (c518 <system_gclk_chan_enable+0x20>)
    c4fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c500:	4b06      	ldr	r3, [pc, #24]	; (c51c <system_gclk_chan_enable+0x24>)
    c502:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    c504:	4a06      	ldr	r2, [pc, #24]	; (c520 <system_gclk_chan_enable+0x28>)
    c506:	8853      	ldrh	r3, [r2, #2]
    c508:	2180      	movs	r1, #128	; 0x80
    c50a:	01c9      	lsls	r1, r1, #7
    c50c:	430b      	orrs	r3, r1
    c50e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    c510:	4b04      	ldr	r3, [pc, #16]	; (c524 <system_gclk_chan_enable+0x2c>)
    c512:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    c514:	bd10      	pop	{r4, pc}
    c516:	46c0      	nop			; (mov r8, r8)
    c518:	0000bfb1 	.word	0x0000bfb1
    c51c:	40000c02 	.word	0x40000c02
    c520:	40000c00 	.word	0x40000c00
    c524:	0000bff1 	.word	0x0000bff1

0000c528 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    c528:	b510      	push	{r4, lr}
    c52a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    c52c:	4b0e      	ldr	r3, [pc, #56]	; (c568 <system_gclk_chan_disable+0x40>)
    c52e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c530:	4b0e      	ldr	r3, [pc, #56]	; (c56c <system_gclk_chan_disable+0x44>)
    c532:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    c534:	490e      	ldr	r1, [pc, #56]	; (c570 <system_gclk_chan_disable+0x48>)
    c536:	884b      	ldrh	r3, [r1, #2]
    c538:	051b      	lsls	r3, r3, #20
    c53a:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    c53c:	884b      	ldrh	r3, [r1, #2]
    c53e:	480d      	ldr	r0, [pc, #52]	; (c574 <system_gclk_chan_disable+0x4c>)
    c540:	4003      	ands	r3, r0
    c542:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    c544:	884b      	ldrh	r3, [r1, #2]
    c546:	480c      	ldr	r0, [pc, #48]	; (c578 <system_gclk_chan_disable+0x50>)
    c548:	4003      	ands	r3, r0
    c54a:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    c54c:	4b08      	ldr	r3, [pc, #32]	; (c570 <system_gclk_chan_disable+0x48>)
    c54e:	885b      	ldrh	r3, [r3, #2]
    c550:	045b      	lsls	r3, r3, #17
    c552:	d4fb      	bmi.n	c54c <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    c554:	4806      	ldr	r0, [pc, #24]	; (c570 <system_gclk_chan_disable+0x48>)
    c556:	8841      	ldrh	r1, [r0, #2]
    c558:	0213      	lsls	r3, r2, #8
    c55a:	4a06      	ldr	r2, [pc, #24]	; (c574 <system_gclk_chan_disable+0x4c>)
    c55c:	400a      	ands	r2, r1
    c55e:	4313      	orrs	r3, r2
    c560:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    c562:	4b06      	ldr	r3, [pc, #24]	; (c57c <system_gclk_chan_disable+0x54>)
    c564:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    c566:	bd10      	pop	{r4, pc}
    c568:	0000bfb1 	.word	0x0000bfb1
    c56c:	40000c02 	.word	0x40000c02
    c570:	40000c00 	.word	0x40000c00
    c574:	fffff0ff 	.word	0xfffff0ff
    c578:	ffffbfff 	.word	0xffffbfff
    c57c:	0000bff1 	.word	0x0000bff1

0000c580 <system_gclk_chan_set_config>:
{
    c580:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    c582:	780c      	ldrb	r4, [r1, #0]
    c584:	0224      	lsls	r4, r4, #8
    c586:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    c588:	4b02      	ldr	r3, [pc, #8]	; (c594 <system_gclk_chan_set_config+0x14>)
    c58a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    c58c:	b2a4      	uxth	r4, r4
    c58e:	4b02      	ldr	r3, [pc, #8]	; (c598 <system_gclk_chan_set_config+0x18>)
    c590:	805c      	strh	r4, [r3, #2]
}
    c592:	bd10      	pop	{r4, pc}
    c594:	0000c529 	.word	0x0000c529
    c598:	40000c00 	.word	0x40000c00

0000c59c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    c59c:	b510      	push	{r4, lr}
    c59e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    c5a0:	4b06      	ldr	r3, [pc, #24]	; (c5bc <system_gclk_chan_get_hz+0x20>)
    c5a2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c5a4:	4b06      	ldr	r3, [pc, #24]	; (c5c0 <system_gclk_chan_get_hz+0x24>)
    c5a6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    c5a8:	4b06      	ldr	r3, [pc, #24]	; (c5c4 <system_gclk_chan_get_hz+0x28>)
    c5aa:	885c      	ldrh	r4, [r3, #2]
    c5ac:	0524      	lsls	r4, r4, #20
    c5ae:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    c5b0:	4b05      	ldr	r3, [pc, #20]	; (c5c8 <system_gclk_chan_get_hz+0x2c>)
    c5b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    c5b4:	0020      	movs	r0, r4
    c5b6:	4b05      	ldr	r3, [pc, #20]	; (c5cc <system_gclk_chan_get_hz+0x30>)
    c5b8:	4798      	blx	r3
}
    c5ba:	bd10      	pop	{r4, pc}
    c5bc:	0000bfb1 	.word	0x0000bfb1
    c5c0:	40000c02 	.word	0x40000c02
    c5c4:	40000c00 	.word	0x40000c00
    c5c8:	0000bff1 	.word	0x0000bff1
    c5cc:	0000c44d 	.word	0x0000c44d

0000c5d0 <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    c5d0:	b530      	push	{r4, r5, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    c5d2:	2800      	cmp	r0, #0
    c5d4:	db19      	blt.n	c60a <system_interrupt_set_priority+0x3a>
		uint8_t register_num = vector / 4;
    c5d6:	17c3      	asrs	r3, r0, #31
    c5d8:	2403      	movs	r4, #3
    c5da:	0022      	movs	r2, r4
    c5dc:	401a      	ands	r2, r3
    c5de:	1812      	adds	r2, r2, r0
    c5e0:	1092      	asrs	r2, r2, #2
    c5e2:	b2d2      	uxtb	r2, r2
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    c5e4:	0f9b      	lsrs	r3, r3, #30
    c5e6:	18c0      	adds	r0, r0, r3
    c5e8:	4020      	ands	r0, r4
    c5ea:	1ac3      	subs	r3, r0, r3
    c5ec:	00db      	lsls	r3, r3, #3
    c5ee:	b2db      	uxtb	r3, r3
    c5f0:	3306      	adds	r3, #6
    c5f2:	b2db      	uxtb	r3, r3

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    c5f4:	4d09      	ldr	r5, [pc, #36]	; (c61c <system_interrupt_set_priority+0x4c>)
    c5f6:	32c0      	adds	r2, #192	; 0xc0
    c5f8:	0092      	lsls	r2, r2, #2
    c5fa:	5950      	ldr	r0, [r2, r5]
    c5fc:	409c      	lsls	r4, r3
    c5fe:	43a0      	bics	r0, r4
				(priority_level << priority_pos);
    c600:	4099      	lsls	r1, r3
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    c602:	4301      	orrs	r1, r0
		NVIC->IP[register_num] =
    c604:	5151      	str	r1, [r2, r5]
	enum status_code status = STATUS_OK;
    c606:	2000      	movs	r0, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    c608:	bd30      	pop	{r4, r5, pc}
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    c60a:	1c43      	adds	r3, r0, #1
    c60c:	d001      	beq.n	c612 <system_interrupt_set_priority+0x42>
		status = STATUS_ERR_INVALID_ARG;
    c60e:	2017      	movs	r0, #23
    c610:	e7fa      	b.n	c608 <system_interrupt_set_priority+0x38>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    c612:	0789      	lsls	r1, r1, #30
    c614:	4b02      	ldr	r3, [pc, #8]	; (c620 <system_interrupt_set_priority+0x50>)
    c616:	6219      	str	r1, [r3, #32]
	enum status_code status = STATUS_OK;
    c618:	2000      	movs	r0, #0
    c61a:	e7f5      	b.n	c608 <system_interrupt_set_priority+0x38>
    c61c:	e000e100 	.word	0xe000e100
    c620:	e000ed00 	.word	0xe000ed00

0000c624 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    c624:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    c626:	78d3      	ldrb	r3, [r2, #3]
    c628:	2b00      	cmp	r3, #0
    c62a:	d120      	bne.n	c66e <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    c62c:	7815      	ldrb	r5, [r2, #0]
    c62e:	2d80      	cmp	r5, #128	; 0x80
    c630:	d01b      	beq.n	c66a <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    c632:	062d      	lsls	r5, r5, #24
    c634:	2380      	movs	r3, #128	; 0x80
    c636:	025b      	lsls	r3, r3, #9
    c638:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    c63a:	7853      	ldrb	r3, [r2, #1]
    c63c:	2b00      	cmp	r3, #0
    c63e:	d001      	beq.n	c644 <_system_pinmux_config+0x20>
    c640:	2b02      	cmp	r3, #2
    c642:	d10a      	bne.n	c65a <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    c644:	2380      	movs	r3, #128	; 0x80
    c646:	029b      	lsls	r3, r3, #10
    c648:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    c64a:	7894      	ldrb	r4, [r2, #2]
    c64c:	2c00      	cmp	r4, #0
    c64e:	d002      	beq.n	c656 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    c650:	23c0      	movs	r3, #192	; 0xc0
    c652:	02db      	lsls	r3, r3, #11
    c654:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    c656:	6041      	str	r1, [r0, #4]
    c658:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c65a:	7853      	ldrb	r3, [r2, #1]
    c65c:	3b01      	subs	r3, #1
    c65e:	b2db      	uxtb	r3, r3
    c660:	2b01      	cmp	r3, #1
    c662:	d806      	bhi.n	c672 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    c664:	4b13      	ldr	r3, [pc, #76]	; (c6b4 <_system_pinmux_config+0x90>)
    c666:	401d      	ands	r5, r3
    c668:	e003      	b.n	c672 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    c66a:	2500      	movs	r5, #0
    c66c:	e7e5      	b.n	c63a <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    c66e:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    c670:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    c672:	040c      	lsls	r4, r1, #16
    c674:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    c676:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c678:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    c67a:	26a0      	movs	r6, #160	; 0xa0
    c67c:	05f6      	lsls	r6, r6, #23
    c67e:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c680:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c682:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    c684:	24d0      	movs	r4, #208	; 0xd0
    c686:	0624      	lsls	r4, r4, #24
    c688:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    c68a:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    c68c:	78d3      	ldrb	r3, [r2, #3]
    c68e:	2b00      	cmp	r3, #0
    c690:	d10a      	bne.n	c6a8 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    c692:	036b      	lsls	r3, r5, #13
    c694:	d503      	bpl.n	c69e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    c696:	7893      	ldrb	r3, [r2, #2]
    c698:	2b01      	cmp	r3, #1
    c69a:	d006      	beq.n	c6aa <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    c69c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    c69e:	7853      	ldrb	r3, [r2, #1]
    c6a0:	3b01      	subs	r3, #1
    c6a2:	b2db      	uxtb	r3, r3
    c6a4:	2b01      	cmp	r3, #1
    c6a6:	d902      	bls.n	c6ae <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    c6a8:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    c6aa:	6181      	str	r1, [r0, #24]
    c6ac:	e7f7      	b.n	c69e <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    c6ae:	6081      	str	r1, [r0, #8]
}
    c6b0:	e7fa      	b.n	c6a8 <_system_pinmux_config+0x84>
    c6b2:	46c0      	nop			; (mov r8, r8)
    c6b4:	fffbffff 	.word	0xfffbffff

0000c6b8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    c6b8:	b510      	push	{r4, lr}
    c6ba:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    c6bc:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    c6be:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    c6c0:	2900      	cmp	r1, #0
    c6c2:	d10b      	bne.n	c6dc <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    c6c4:	01db      	lsls	r3, r3, #7
    c6c6:	4906      	ldr	r1, [pc, #24]	; (c6e0 <system_pinmux_pin_set_config+0x28>)
    c6c8:	468c      	mov	ip, r1
    c6ca:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    c6cc:	241f      	movs	r4, #31
    c6ce:	4020      	ands	r0, r4
    c6d0:	2101      	movs	r1, #1
    c6d2:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    c6d4:	0018      	movs	r0, r3
    c6d6:	4b03      	ldr	r3, [pc, #12]	; (c6e4 <system_pinmux_pin_set_config+0x2c>)
    c6d8:	4798      	blx	r3
}
    c6da:	bd10      	pop	{r4, pc}
		return NULL;
    c6dc:	2300      	movs	r3, #0
    c6de:	e7f5      	b.n	c6cc <system_pinmux_pin_set_config+0x14>
    c6e0:	41004400 	.word	0x41004400
    c6e4:	0000c625 	.word	0x0000c625

0000c6e8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    c6e8:	4770      	bx	lr
	...

0000c6ec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    c6ec:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    c6ee:	4b05      	ldr	r3, [pc, #20]	; (c704 <system_init+0x18>)
    c6f0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    c6f2:	4b05      	ldr	r3, [pc, #20]	; (c708 <system_init+0x1c>)
    c6f4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    c6f6:	4b05      	ldr	r3, [pc, #20]	; (c70c <system_init+0x20>)
    c6f8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    c6fa:	4b05      	ldr	r3, [pc, #20]	; (c710 <system_init+0x24>)
    c6fc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    c6fe:	4b05      	ldr	r3, [pc, #20]	; (c714 <system_init+0x28>)
    c700:	4798      	blx	r3
}
    c702:	bd10      	pop	{r4, pc}
    c704:	0000c225 	.word	0x0000c225
    c708:	0000bfad 	.word	0x0000bfad
    c70c:	0000c6e9 	.word	0x0000c6e9
    c710:	0000032d 	.word	0x0000032d
    c714:	0000c6e9 	.word	0x0000c6e9

0000c718 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    c718:	e7fe      	b.n	c718 <Dummy_Handler>
	...

0000c71c <Reset_Handler>:
{
    c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    c71e:	4a23      	ldr	r2, [pc, #140]	; (c7ac <Reset_Handler+0x90>)
    c720:	4b23      	ldr	r3, [pc, #140]	; (c7b0 <Reset_Handler+0x94>)
    c722:	429a      	cmp	r2, r3
    c724:	d009      	beq.n	c73a <Reset_Handler+0x1e>
    c726:	4b22      	ldr	r3, [pc, #136]	; (c7b0 <Reset_Handler+0x94>)
    c728:	4a20      	ldr	r2, [pc, #128]	; (c7ac <Reset_Handler+0x90>)
    c72a:	e003      	b.n	c734 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    c72c:	6811      	ldr	r1, [r2, #0]
    c72e:	6019      	str	r1, [r3, #0]
    c730:	3304      	adds	r3, #4
    c732:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    c734:	491f      	ldr	r1, [pc, #124]	; (c7b4 <Reset_Handler+0x98>)
    c736:	428b      	cmp	r3, r1
    c738:	d3f8      	bcc.n	c72c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    c73a:	4b1f      	ldr	r3, [pc, #124]	; (c7b8 <Reset_Handler+0x9c>)
    c73c:	e002      	b.n	c744 <Reset_Handler+0x28>
                *pDest++ = 0;
    c73e:	2200      	movs	r2, #0
    c740:	601a      	str	r2, [r3, #0]
    c742:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    c744:	4a1d      	ldr	r2, [pc, #116]	; (c7bc <Reset_Handler+0xa0>)
    c746:	4293      	cmp	r3, r2
    c748:	d3f9      	bcc.n	c73e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    c74a:	4a1d      	ldr	r2, [pc, #116]	; (c7c0 <Reset_Handler+0xa4>)
    c74c:	21ff      	movs	r1, #255	; 0xff
    c74e:	4b1d      	ldr	r3, [pc, #116]	; (c7c4 <Reset_Handler+0xa8>)
    c750:	438b      	bics	r3, r1
    c752:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    c754:	39fd      	subs	r1, #253	; 0xfd
    c756:	2390      	movs	r3, #144	; 0x90
    c758:	005b      	lsls	r3, r3, #1
    c75a:	4a1b      	ldr	r2, [pc, #108]	; (c7c8 <Reset_Handler+0xac>)
    c75c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    c75e:	4a1b      	ldr	r2, [pc, #108]	; (c7cc <Reset_Handler+0xb0>)
    c760:	78d3      	ldrb	r3, [r2, #3]
    c762:	2503      	movs	r5, #3
    c764:	43ab      	bics	r3, r5
    c766:	2402      	movs	r4, #2
    c768:	4323      	orrs	r3, r4
    c76a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    c76c:	78d3      	ldrb	r3, [r2, #3]
    c76e:	270c      	movs	r7, #12
    c770:	43bb      	bics	r3, r7
    c772:	2608      	movs	r6, #8
    c774:	4333      	orrs	r3, r6
    c776:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    c778:	4b15      	ldr	r3, [pc, #84]	; (c7d0 <Reset_Handler+0xb4>)
    c77a:	7b98      	ldrb	r0, [r3, #14]
    c77c:	2230      	movs	r2, #48	; 0x30
    c77e:	4390      	bics	r0, r2
    c780:	2220      	movs	r2, #32
    c782:	4310      	orrs	r0, r2
    c784:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    c786:	7b99      	ldrb	r1, [r3, #14]
    c788:	43b9      	bics	r1, r7
    c78a:	4331      	orrs	r1, r6
    c78c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    c78e:	7b9a      	ldrb	r2, [r3, #14]
    c790:	43aa      	bics	r2, r5
    c792:	4322      	orrs	r2, r4
    c794:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    c796:	4a0f      	ldr	r2, [pc, #60]	; (c7d4 <Reset_Handler+0xb8>)
    c798:	6851      	ldr	r1, [r2, #4]
    c79a:	2380      	movs	r3, #128	; 0x80
    c79c:	430b      	orrs	r3, r1
    c79e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    c7a0:	4b0d      	ldr	r3, [pc, #52]	; (c7d8 <Reset_Handler+0xbc>)
    c7a2:	4798      	blx	r3
        main();
    c7a4:	4b0d      	ldr	r3, [pc, #52]	; (c7dc <Reset_Handler+0xc0>)
    c7a6:	4798      	blx	r3
    c7a8:	e7fe      	b.n	c7a8 <Reset_Handler+0x8c>
    c7aa:	46c0      	nop			; (mov r8, r8)
    c7ac:	0000fa10 	.word	0x0000fa10
    c7b0:	20000000 	.word	0x20000000
    c7b4:	20000328 	.word	0x20000328
    c7b8:	20000328 	.word	0x20000328
    c7bc:	20001f10 	.word	0x20001f10
    c7c0:	e000ed00 	.word	0xe000ed00
    c7c4:	00000000 	.word	0x00000000
    c7c8:	41007000 	.word	0x41007000
    c7cc:	41005000 	.word	0x41005000
    c7d0:	41004800 	.word	0x41004800
    c7d4:	41004000 	.word	0x41004000
    c7d8:	0000dac5 	.word	0x0000dac5
    c7dc:	0000c921 	.word	0x0000c921

0000c7e0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    c7e0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    c7e2:	4a06      	ldr	r2, [pc, #24]	; (c7fc <_sbrk+0x1c>)
    c7e4:	6812      	ldr	r2, [r2, #0]
    c7e6:	2a00      	cmp	r2, #0
    c7e8:	d004      	beq.n	c7f4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    c7ea:	4a04      	ldr	r2, [pc, #16]	; (c7fc <_sbrk+0x1c>)
    c7ec:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    c7ee:	18c3      	adds	r3, r0, r3
    c7f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    c7f2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    c7f4:	4902      	ldr	r1, [pc, #8]	; (c800 <_sbrk+0x20>)
    c7f6:	4a01      	ldr	r2, [pc, #4]	; (c7fc <_sbrk+0x1c>)
    c7f8:	6011      	str	r1, [r2, #0]
    c7fa:	e7f6      	b.n	c7ea <_sbrk+0xa>
    c7fc:	200018dc 	.word	0x200018dc
    c800:	20003f10 	.word	0x20003f10

0000c804 <clock_osc8m_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes the 8 MHz oscillator to be used as the
	*  system clock source.
	*/
void clock_osc8m_init(void){
    c804:	b500      	push	{lr}
    c806:	b083      	sub	sp, #12
	//create system clock config struct
	struct system_clock_source_osc8m_config osc8_config;

	//config the 8 MHz oscillator
	//divide by 1 = 8 MHz clock
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    c808:	a801      	add	r0, sp, #4
    c80a:	2300      	movs	r3, #0
    c80c:	7003      	strb	r3, [r0, #0]
	//run on demand
	osc8_config.on_demand = true;
    c80e:	2201      	movs	r2, #1
    c810:	7082      	strb	r2, [r0, #2]
	//don't run in standby
	osc8_config.run_in_standby = false;
    c812:	7043      	strb	r3, [r0, #1]
	    
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    c814:	4b01      	ldr	r3, [pc, #4]	; (c81c <clock_osc8m_init+0x18>)
    c816:	4798      	blx	r3
}//end clock_osc8m_init
    c818:	b003      	add	sp, #12
    c81a:	bd00      	pop	{pc}
    c81c:	0000c0d9 	.word	0x0000c0d9

0000c820 <clock_gclk0_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes GCLK0, so it can be used by 
	*  peripherals. Uses the 8 MHz oscillator as its source.
	*/
void clock_gclk0_init(void){
    c820:	b500      	push	{lr}
    c822:	b085      	sub	sp, #20
	//create GLCK0 config struct (for driving peripherals)
	struct system_gclk_gen_config gclk0_config;

	//init MCLK
	system_gclk_init();
    c824:	4b0a      	ldr	r3, [pc, #40]	; (c850 <clock_gclk0_init+0x30>)
    c826:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    c828:	2300      	movs	r3, #0
    c82a:	4a0a      	ldr	r2, [pc, #40]	; (c854 <clock_gclk0_init+0x34>)
    c82c:	7213      	strb	r3, [r2, #8]
	    
	//set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	    
	//use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    c82e:	a901      	add	r1, sp, #4
    c830:	2206      	movs	r2, #6
    c832:	700a      	strb	r2, [r1, #0]
	//don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    c834:	724b      	strb	r3, [r1, #9]
	//We're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    c836:	704b      	strb	r3, [r1, #1]
	//division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    c838:	3a05      	subs	r2, #5
    c83a:	604a      	str	r2, [r1, #4]
	//don't run in standby
	gclk0_config.run_in_standby = false;
    c83c:	720b      	strb	r3, [r1, #8]
	//set GCLK0's config
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    c83e:	2000      	movs	r0, #0
    c840:	4b05      	ldr	r3, [pc, #20]	; (c858 <clock_gclk0_init+0x38>)
    c842:	4798      	blx	r3
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    c844:	2000      	movs	r0, #0
    c846:	4b05      	ldr	r3, [pc, #20]	; (c85c <clock_gclk0_init+0x3c>)
    c848:	4798      	blx	r3
}//end clock_gclk0_init
    c84a:	b005      	add	sp, #20
    c84c:	bd00      	pop	{pc}
    c84e:	46c0      	nop			; (mov r8, r8)
    c850:	0000c301 	.word	0x0000c301
    c854:	40000400 	.word	0x40000400
    c858:	0000c325 	.word	0x0000c325
    c85c:	0000c3f5 	.word	0x0000c3f5

0000c860 <sys_clock_init>:
void sys_clock_init(void){
    c860:	b510      	push	{r4, lr}
	clock_osc8m_init();
    c862:	4b05      	ldr	r3, [pc, #20]	; (c878 <sys_clock_init+0x18>)
    c864:	4798      	blx	r3
	clock_gclk0_init();
    c866:	4b05      	ldr	r3, [pc, #20]	; (c87c <sys_clock_init+0x1c>)
    c868:	4798      	blx	r3
	clock_osc32k_init();
    c86a:	4b05      	ldr	r3, [pc, #20]	; (c880 <sys_clock_init+0x20>)
    c86c:	4798      	blx	r3
	clock_gclk2_init();
    c86e:	4b05      	ldr	r3, [pc, #20]	; (c884 <sys_clock_init+0x24>)
    c870:	4798      	blx	r3
	delay_init();
    c872:	4b05      	ldr	r3, [pc, #20]	; (c888 <sys_clock_init+0x28>)
    c874:	4798      	blx	r3
}//end sys_clock_init
    c876:	bd10      	pop	{r4, pc}
    c878:	0000c805 	.word	0x0000c805
    c87c:	0000c821 	.word	0x0000c821
    c880:	000091cd 	.word	0x000091cd
    c884:	000091f5 	.word	0x000091f5
    c888:	00000115 	.word	0x00000115

0000c88c <configure_port_pins>:
/* Function Name    : configure_port_pins
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config select pins for lcd 
	*/
void configure_port_pins(void){
    c88c:	b500      	push	{lr}
    c88e:	b083      	sub	sp, #12
	config->powersave  = false;
    c890:	a901      	add	r1, sp, #4
    c892:	2300      	movs	r3, #0
    c894:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);


	// configure outputs
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    c896:	2201      	movs	r2, #1
    c898:	700a      	strb	r2, [r1, #0]
	config_port_pin.input_pull = LCD_PD_PULL;
    c89a:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(LCD_PD, &config_port_pin);
    c89c:	2008      	movs	r0, #8
    c89e:	4b04      	ldr	r3, [pc, #16]	; (c8b0 <configure_port_pins+0x24>)
    c8a0:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    c8a2:	2280      	movs	r2, #128	; 0x80
    c8a4:	0052      	lsls	r2, r2, #1
    c8a6:	4b03      	ldr	r3, [pc, #12]	; (c8b4 <configure_port_pins+0x28>)
    c8a8:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB15, true);	
	
*/


}//end configure_port_pins
    c8aa:	b003      	add	sp, #12
    c8ac:	bd00      	pop	{pc}
    c8ae:	46c0      	nop			; (mov r8, r8)
    c8b0:	0000bf89 	.word	0x0000bf89
    c8b4:	41004400 	.word	0x41004400

0000c8b8 <sim_system_init>:
void sim_system_init(void){
    c8b8:	b510      	push	{r4, lr}
	system_init();
    c8ba:	4b0d      	ldr	r3, [pc, #52]	; (c8f0 <sim_system_init+0x38>)
    c8bc:	4798      	blx	r3
	sys_clock_init();
    c8be:	4b0d      	ldr	r3, [pc, #52]	; (c8f4 <sim_system_init+0x3c>)
    c8c0:	4798      	blx	r3
	configure_port_pins();
    c8c2:	4b0d      	ldr	r3, [pc, #52]	; (c8f8 <sim_system_init+0x40>)
    c8c4:	4798      	blx	r3
	lcd_spi_init();
    c8c6:	4b0d      	ldr	r3, [pc, #52]	; (c8fc <sim_system_init+0x44>)
    c8c8:	4798      	blx	r3
	configure_ext_ints();
    c8ca:	4b0d      	ldr	r3, [pc, #52]	; (c900 <sim_system_init+0x48>)
    c8cc:	4798      	blx	r3
	configure_ext_int_callback();
    c8ce:	4b0d      	ldr	r3, [pc, #52]	; (c904 <sim_system_init+0x4c>)
    c8d0:	4798      	blx	r3
	lcd_init_seq(); 
    c8d2:	4b0d      	ldr	r3, [pc, #52]	; (c908 <sim_system_init+0x50>)
    c8d4:	4798      	blx	r3
	lcd_int_mask(LCD_DEFAULT_MASK);
    c8d6:	2104      	movs	r1, #4
    c8d8:	480c      	ldr	r0, [pc, #48]	; (c90c <sim_system_init+0x54>)
    c8da:	4c0d      	ldr	r4, [pc, #52]	; (c910 <sim_system_init+0x58>)
    c8dc:	47a0      	blx	r4
	lcd_int_enable();
    c8de:	2101      	movs	r1, #1
    c8e0:	480c      	ldr	r0, [pc, #48]	; (c914 <sim_system_init+0x5c>)
    c8e2:	47a0      	blx	r4
    uartfiber_init();
    c8e4:	4b0c      	ldr	r3, [pc, #48]	; (c918 <sim_system_init+0x60>)
    c8e6:	4798      	blx	r3
    uartib_init();
    c8e8:	4b0c      	ldr	r3, [pc, #48]	; (c91c <sim_system_init+0x64>)
    c8ea:	4798      	blx	r3
}//end sim_system_init
    c8ec:	bd10      	pop	{r4, pc}
    c8ee:	46c0      	nop			; (mov r8, r8)
    c8f0:	0000c6ed 	.word	0x0000c6ed
    c8f4:	0000c861 	.word	0x0000c861
    c8f8:	0000c88d 	.word	0x0000c88d
    c8fc:	0000922d 	.word	0x0000922d
    c900:	000090c9 	.word	0x000090c9
    c904:	000090f1 	.word	0x000090f1
    c908:	00009571 	.word	0x00009571
    c90c:	003020b0 	.word	0x003020b0
    c910:	00009475 	.word	0x00009475
    c914:	003020ac 	.word	0x003020ac
    c918:	00006de1 	.word	0x00006de1
    c91c:	00006f39 	.word	0x00006f39

0000c920 <main>:
int main(void){
    c920:	b5f0      	push	{r4, r5, r6, r7, lr}
    c922:	b085      	sub	sp, #20
	sim_system_init();
    c924:	4b75      	ldr	r3, [pc, #468]	; (cafc <main+0x1dc>)
    c926:	4798      	blx	r3
	cpu_irq_enable();
    c928:	4d75      	ldr	r5, [pc, #468]	; (cb00 <main+0x1e0>)
    c92a:	2601      	movs	r6, #1
    c92c:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    c92e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c932:	b662      	cpsie	i
	configure_rtc_calendar();
    c934:	4b73      	ldr	r3, [pc, #460]	; (cb04 <main+0x1e4>)
    c936:	4798      	blx	r3
	phost = &host;
    c938:	4c73      	ldr	r4, [pc, #460]	; (cb08 <main+0x1e8>)
    c93a:	4874      	ldr	r0, [pc, #464]	; (cb0c <main+0x1ec>)
    c93c:	6020      	str	r0, [r4, #0]
	Ft_Gpu_Hal_Open(phost);
    c93e:	4b74      	ldr	r3, [pc, #464]	; (cb10 <main+0x1f0>)
    c940:	4798      	blx	r3
	Ft_Gpu_Hal_Wr8(phost, REG_INT_EN, 1);
    c942:	2201      	movs	r2, #1
    c944:	4973      	ldr	r1, [pc, #460]	; (cb14 <main+0x1f4>)
    c946:	6820      	ldr	r0, [r4, #0]
    c948:	4f73      	ldr	r7, [pc, #460]	; (cb18 <main+0x1f8>)
    c94a:	47b8      	blx	r7
	Ft_Gpu_Hal_Wr8(phost, REG_INT_MASK, 6);
    c94c:	6820      	ldr	r0, [r4, #0]
    c94e:	2206      	movs	r2, #6
    c950:	4972      	ldr	r1, [pc, #456]	; (cb1c <main+0x1fc>)
    c952:	47b8      	blx	r7
	delay_ms(2000);
    c954:	20fa      	movs	r0, #250	; 0xfa
    c956:	00c0      	lsls	r0, r0, #3
    c958:	4b71      	ldr	r3, [pc, #452]	; (cb20 <main+0x200>)
    c95a:	4798      	blx	r3
	appAttn();
    c95c:	4b71      	ldr	r3, [pc, #452]	; (cb24 <main+0x204>)
    c95e:	4798      	blx	r3
	appRssi();
    c960:	4b71      	ldr	r3, [pc, #452]	; (cb28 <main+0x208>)
    c962:	4798      	blx	r3
	appHist();
    c964:	4b71      	ldr	r3, [pc, #452]	; (cb2c <main+0x20c>)
    c966:	4798      	blx	r3
	cpu_irq_enable();
    c968:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    c96a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c96e:	b662      	cpsie	i
	mstimer_init();
    c970:	4b6f      	ldr	r3, [pc, #444]	; (cb30 <main+0x210>)
    c972:	4798      	blx	r3
	rs485_baud_rate_set(38400);
    c974:	2096      	movs	r0, #150	; 0x96
    c976:	0200      	lsls	r0, r0, #8
    c978:	4b6e      	ldr	r3, [pc, #440]	; (cb34 <main+0x214>)
    c97a:	4798      	blx	r3
	rs485_init();
    c97c:	4b6e      	ldr	r3, [pc, #440]	; (cb38 <main+0x218>)
    c97e:	4798      	blx	r3
	bacnet_init();
    c980:	4b6e      	ldr	r3, [pc, #440]	; (cb3c <main+0x21c>)
    c982:	4798      	blx	r3
	mstimer_set(&Blink_Timer, 125);
    c984:	217d      	movs	r1, #125	; 0x7d
    c986:	486e      	ldr	r0, [pc, #440]	; (cb40 <main+0x220>)
    c988:	4b6e      	ldr	r3, [pc, #440]	; (cb44 <main+0x224>)
    c98a:	4798      	blx	r3
    c98c:	e010      	b.n	c9b0 <main+0x90>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    c98e:	33ff      	adds	r3, #255	; 0xff
    c990:	e03b      	b.n	ca0a <main+0xea>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    c992:	33fe      	adds	r3, #254	; 0xfe
    c994:	e050      	b.n	ca38 <main+0x118>
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    c996:	33fd      	adds	r3, #253	; 0xfd
    c998:	e066      	b.n	ca68 <main+0x148>
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    c99a:	33fc      	adds	r3, #252	; 0xfc
    c99c:	e07b      	b.n	ca96 <main+0x176>
			if(tempTag == attn)				attnOp(NULL);
    c99e:	2000      	movs	r0, #0
    c9a0:	4b69      	ldr	r3, [pc, #420]	; (cb48 <main+0x228>)
    c9a2:	4798      	blx	r3
			tempTag = 0;
    c9a4:	2200      	movs	r2, #0
    c9a6:	4b69      	ldr	r3, [pc, #420]	; (cb4c <main+0x22c>)
    c9a8:	701a      	strb	r2, [r3, #0]
			delay_ms(50);
    c9aa:	2032      	movs	r0, #50	; 0x32
    c9ac:	4b5c      	ldr	r3, [pc, #368]	; (cb20 <main+0x200>)
    c9ae:	4798      	blx	r3
	bacnet_task();
    c9b0:	4b67      	ldr	r3, [pc, #412]	; (cb50 <main+0x230>)
    c9b2:	4798      	blx	r3
	tag = 0;
    c9b4:	4d67      	ldr	r5, [pc, #412]	; (cb54 <main+0x234>)
    c9b6:	2300      	movs	r3, #0
    c9b8:	702b      	strb	r3, [r5, #0]
		disStart();
    c9ba:	4b67      	ldr	r3, [pc, #412]	; (cb58 <main+0x238>)
    c9bc:	4798      	blx	r3
		Ft_Gpu_CoCmd_Gradient(phost, 0, 0x060A39, 0, disWid, disHei, 0x0A4F7A);
    c9be:	4c52      	ldr	r4, [pc, #328]	; (cb08 <main+0x1e8>)
    c9c0:	6820      	ldr	r0, [r4, #0]
    c9c2:	4b66      	ldr	r3, [pc, #408]	; (cb5c <main+0x23c>)
    c9c4:	9302      	str	r3, [sp, #8]
    c9c6:	23f0      	movs	r3, #240	; 0xf0
    c9c8:	005b      	lsls	r3, r3, #1
    c9ca:	9301      	str	r3, [sp, #4]
    c9cc:	3341      	adds	r3, #65	; 0x41
    c9ce:	33ff      	adds	r3, #255	; 0xff
    c9d0:	9300      	str	r3, [sp, #0]
    c9d2:	2300      	movs	r3, #0
    c9d4:	4a62      	ldr	r2, [pc, #392]	; (cb60 <main+0x240>)
    c9d6:	2100      	movs	r1, #0
    c9d8:	4e62      	ldr	r6, [pc, #392]	; (cb64 <main+0x244>)
    c9da:	47b0      	blx	r6
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(0,0,0));
    c9dc:	2180      	movs	r1, #128	; 0x80
    c9de:	04c9      	lsls	r1, r1, #19
    c9e0:	6820      	ldr	r0, [r4, #0]
    c9e2:	4e61      	ldr	r6, [pc, #388]	; (cb68 <main+0x248>)
    c9e4:	47b0      	blx	r6
		printTime();
    c9e6:	4b61      	ldr	r3, [pc, #388]	; (cb6c <main+0x24c>)
    c9e8:	4798      	blx	r3
		Ft_Gpu_Hal_WrCmd32(phost,COLOR_RGB(255,255,255));
    c9ea:	4961      	ldr	r1, [pc, #388]	; (cb70 <main+0x250>)
    c9ec:	6820      	ldr	r0, [r4, #0]
    c9ee:	47b0      	blx	r6
		tag = Ft_Gpu_Hal_Rd8(phost,REG_TOUCH_TAG);
    c9f0:	4960      	ldr	r1, [pc, #384]	; (cb74 <main+0x254>)
    c9f2:	6820      	ldr	r0, [r4, #0]
    c9f4:	4b60      	ldr	r3, [pc, #384]	; (cb78 <main+0x258>)
    c9f6:	4798      	blx	r3
    c9f8:	7028      	strb	r0, [r5, #0]
		Ft_Gpu_Hal_WrCmd32(phost,TAG(attn));
    c9fa:	4960      	ldr	r1, [pc, #384]	; (cb7c <main+0x25c>)
    c9fc:	6820      	ldr	r0, [r4, #0]
    c9fe:	47b0      	blx	r6
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == attn)? OPT_FLAT:0,"  Attenuation  ");
    ca00:	6820      	ldr	r0, [r4, #0]
    ca02:	782b      	ldrb	r3, [r5, #0]
    ca04:	2b01      	cmp	r3, #1
    ca06:	d0c2      	beq.n	c98e <main+0x6e>
    ca08:	2300      	movs	r3, #0
    ca0a:	4a5d      	ldr	r2, [pc, #372]	; (cb80 <main+0x260>)
    ca0c:	9203      	str	r2, [sp, #12]
    ca0e:	9302      	str	r3, [sp, #8]
    ca10:	231e      	movs	r3, #30
    ca12:	9301      	str	r3, [sp, #4]
    ca14:	335a      	adds	r3, #90	; 0x5a
    ca16:	9300      	str	r3, [sp, #0]
    ca18:	3350      	adds	r3, #80	; 0x50
    ca1a:	226e      	movs	r2, #110	; 0x6e
    ca1c:	21b8      	movs	r1, #184	; 0xb8
    ca1e:	4c59      	ldr	r4, [pc, #356]	; (cb84 <main+0x264>)
    ca20:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(hist));
    ca22:	4c39      	ldr	r4, [pc, #228]	; (cb08 <main+0x1e8>)
    ca24:	4958      	ldr	r1, [pc, #352]	; (cb88 <main+0x268>)
    ca26:	6820      	ldr	r0, [r4, #0]
    ca28:	4b4f      	ldr	r3, [pc, #316]	; (cb68 <main+0x248>)
    ca2a:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,disHei*0.23,(disWid*0.25),(disHei*0.25),30, (tag == hist)? OPT_FLAT:0,"  History  ");
    ca2c:	6820      	ldr	r0, [r4, #0]
    ca2e:	4b49      	ldr	r3, [pc, #292]	; (cb54 <main+0x234>)
    ca30:	781b      	ldrb	r3, [r3, #0]
    ca32:	2b02      	cmp	r3, #2
    ca34:	d0ad      	beq.n	c992 <main+0x72>
    ca36:	2300      	movs	r3, #0
    ca38:	4a54      	ldr	r2, [pc, #336]	; (cb8c <main+0x26c>)
    ca3a:	9203      	str	r2, [sp, #12]
    ca3c:	9302      	str	r3, [sp, #8]
    ca3e:	231e      	movs	r3, #30
    ca40:	9301      	str	r3, [sp, #4]
    ca42:	335a      	adds	r3, #90	; 0x5a
    ca44:	9300      	str	r3, [sp, #0]
    ca46:	3350      	adds	r3, #80	; 0x50
    ca48:	226e      	movs	r2, #110	; 0x6e
    ca4a:	21d0      	movs	r1, #208	; 0xd0
    ca4c:	0049      	lsls	r1, r1, #1
    ca4e:	4c4d      	ldr	r4, [pc, #308]	; (cb84 <main+0x264>)
    ca50:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(rssi));
    ca52:	4c2d      	ldr	r4, [pc, #180]	; (cb08 <main+0x1e8>)
    ca54:	494e      	ldr	r1, [pc, #312]	; (cb90 <main+0x270>)
    ca56:	6820      	ldr	r0, [r4, #0]
    ca58:	4b43      	ldr	r3, [pc, #268]	; (cb68 <main+0x248>)
    ca5a:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.23,disHei*0.52, disWid*0.25,disHei*0.25,30, (tag == rssi)? OPT_FLAT:0,"  RSSI  ");
    ca5c:	6820      	ldr	r0, [r4, #0]
    ca5e:	4b3d      	ldr	r3, [pc, #244]	; (cb54 <main+0x234>)
    ca60:	781b      	ldrb	r3, [r3, #0]
    ca62:	2b03      	cmp	r3, #3
    ca64:	d097      	beq.n	c996 <main+0x76>
    ca66:	2300      	movs	r3, #0
    ca68:	4a4a      	ldr	r2, [pc, #296]	; (cb94 <main+0x274>)
    ca6a:	9203      	str	r2, [sp, #12]
    ca6c:	9302      	str	r3, [sp, #8]
    ca6e:	231e      	movs	r3, #30
    ca70:	9301      	str	r3, [sp, #4]
    ca72:	335a      	adds	r3, #90	; 0x5a
    ca74:	9300      	str	r3, [sp, #0]
    ca76:	3350      	adds	r3, #80	; 0x50
    ca78:	22f9      	movs	r2, #249	; 0xf9
    ca7a:	21b8      	movs	r1, #184	; 0xb8
    ca7c:	4c41      	ldr	r4, [pc, #260]	; (cb84 <main+0x264>)
    ca7e:	47a0      	blx	r4
		Ft_Gpu_Hal_WrCmd32(phost,TAG(sett));
    ca80:	4c21      	ldr	r4, [pc, #132]	; (cb08 <main+0x1e8>)
    ca82:	4945      	ldr	r1, [pc, #276]	; (cb98 <main+0x278>)
    ca84:	6820      	ldr	r0, [r4, #0]
    ca86:	4b38      	ldr	r3, [pc, #224]	; (cb68 <main+0x248>)
    ca88:	4798      	blx	r3
		Ft_Gpu_CoCmd_Button(phost, disWid*.52,(disHei*0.52),(disWid*0.25),(disHei*0.25),30, (tag == sett)? OPT_FLAT:0,"  Settings  ");
    ca8a:	6820      	ldr	r0, [r4, #0]
    ca8c:	4b31      	ldr	r3, [pc, #196]	; (cb54 <main+0x234>)
    ca8e:	781b      	ldrb	r3, [r3, #0]
    ca90:	2b04      	cmp	r3, #4
    ca92:	d082      	beq.n	c99a <main+0x7a>
    ca94:	2300      	movs	r3, #0
    ca96:	4a41      	ldr	r2, [pc, #260]	; (cb9c <main+0x27c>)
    ca98:	9203      	str	r2, [sp, #12]
    ca9a:	9302      	str	r3, [sp, #8]
    ca9c:	231e      	movs	r3, #30
    ca9e:	9301      	str	r3, [sp, #4]
    caa0:	335a      	adds	r3, #90	; 0x5a
    caa2:	9300      	str	r3, [sp, #0]
    caa4:	3350      	adds	r3, #80	; 0x50
    caa6:	22f9      	movs	r2, #249	; 0xf9
    caa8:	21d0      	movs	r1, #208	; 0xd0
    caaa:	0049      	lsls	r1, r1, #1
    caac:	4c35      	ldr	r4, [pc, #212]	; (cb84 <main+0x264>)
    caae:	47a0      	blx	r4
		disEnd();
    cab0:	4b3b      	ldr	r3, [pc, #236]	; (cba0 <main+0x280>)
    cab2:	4798      	blx	r3
		if(tag!=0)		tempTag = tag;
    cab4:	4b27      	ldr	r3, [pc, #156]	; (cb54 <main+0x234>)
    cab6:	781b      	ldrb	r3, [r3, #0]
    cab8:	2b00      	cmp	r3, #0
    caba:	d001      	beq.n	cac0 <main+0x1a0>
    cabc:	4a23      	ldr	r2, [pc, #140]	; (cb4c <main+0x22c>)
    cabe:	7013      	strb	r3, [r2, #0]
		if (tempTag != tag && tag == 0 && tag!=back){
    cac0:	4a22      	ldr	r2, [pc, #136]	; (cb4c <main+0x22c>)
    cac2:	7812      	ldrb	r2, [r2, #0]
    cac4:	4293      	cmp	r3, r2
    cac6:	d100      	bne.n	caca <main+0x1aa>
    cac8:	e772      	b.n	c9b0 <main+0x90>
    caca:	2b00      	cmp	r3, #0
    cacc:	d000      	beq.n	cad0 <main+0x1b0>
    cace:	e76f      	b.n	c9b0 <main+0x90>
    cad0:	2b06      	cmp	r3, #6
    cad2:	d100      	bne.n	cad6 <main+0x1b6>
    cad4:	e76c      	b.n	c9b0 <main+0x90>
			if(tempTag == attn)				attnOp(NULL);
    cad6:	2a01      	cmp	r2, #1
    cad8:	d100      	bne.n	cadc <main+0x1bc>
    cada:	e760      	b.n	c99e <main+0x7e>
			else if(tempTag == hist)		historyOp();
    cadc:	2a02      	cmp	r2, #2
    cade:	d007      	beq.n	caf0 <main+0x1d0>
			else if(tempTag == sett)		settingOp();
    cae0:	2a04      	cmp	r2, #4
    cae2:	d008      	beq.n	caf6 <main+0x1d6>
			else if(tempTag == rssi)		rssiOp();
    cae4:	2a03      	cmp	r2, #3
    cae6:	d000      	beq.n	caea <main+0x1ca>
    cae8:	e75c      	b.n	c9a4 <main+0x84>
    caea:	4b2e      	ldr	r3, [pc, #184]	; (cba4 <main+0x284>)
    caec:	4798      	blx	r3
    caee:	e759      	b.n	c9a4 <main+0x84>
			else if(tempTag == hist)		historyOp();
    caf0:	4b2d      	ldr	r3, [pc, #180]	; (cba8 <main+0x288>)
    caf2:	4798      	blx	r3
    caf4:	e756      	b.n	c9a4 <main+0x84>
			else if(tempTag == sett)		settingOp();
    caf6:	4b2d      	ldr	r3, [pc, #180]	; (cbac <main+0x28c>)
    caf8:	4798      	blx	r3
    cafa:	e753      	b.n	c9a4 <main+0x84>
    cafc:	0000c8b9 	.word	0x0000c8b9
    cb00:	200002bc 	.word	0x200002bc
    cb04:	00009109 	.word	0x00009109
    cb08:	20001c60 	.word	0x20001c60
    cb0c:	20001948 	.word	0x20001948
    cb10:	00007461 	.word	0x00007461
    cb14:	003020ac 	.word	0x003020ac
    cb18:	00007611 	.word	0x00007611
    cb1c:	003020b0 	.word	0x003020b0
    cb20:	00000151 	.word	0x00000151
    cb24:	00007b15 	.word	0x00007b15
    cb28:	00008001 	.word	0x00008001
    cb2c:	00008111 	.word	0x00008111
    cb30:	0000994d 	.word	0x0000994d
    cb34:	0000b319 	.word	0x0000b319
    cb38:	0000b331 	.word	0x0000b331
    cb3c:	00003c85 	.word	0x00003c85
    cb40:	200018e0 	.word	0x200018e0
    cb44:	00002669 	.word	0x00002669
    cb48:	000081f9 	.word	0x000081f9
    cb4c:	200013f6 	.word	0x200013f6
    cb50:	00003d3d 	.word	0x00003d3d
    cb54:	200013f5 	.word	0x200013f5
    cb58:	000081a1 	.word	0x000081a1
    cb5c:	000a4f7a 	.word	0x000a4f7a
    cb60:	00000a39 	.word	0x00000a39
    cb64:	00007319 	.word	0x00007319
    cb68:	00007729 	.word	0x00007729
    cb6c:	00007799 	.word	0x00007799
    cb70:	04ffffff 	.word	0x04ffffff
    cb74:	0030212c 	.word	0x0030212c
    cb78:	000075b9 	.word	0x000075b9
    cb7c:	03000001 	.word	0x03000001
    cb80:	0000f984 	.word	0x0000f984
    cb84:	000071f9 	.word	0x000071f9
    cb88:	03000002 	.word	0x03000002
    cb8c:	0000f994 	.word	0x0000f994
    cb90:	03000003 	.word	0x03000003
    cb94:	0000f9a0 	.word	0x0000f9a0
    cb98:	03000004 	.word	0x03000004
    cb9c:	0000f9ac 	.word	0x0000f9ac
    cba0:	000081cd 	.word	0x000081cd
    cba4:	0000861d 	.word	0x0000861d
    cba8:	000084d9 	.word	0x000084d9
    cbac:	00008de9 	.word	0x00008de9

0000cbb0 <__udivsi3>:
    cbb0:	2200      	movs	r2, #0
    cbb2:	0843      	lsrs	r3, r0, #1
    cbb4:	428b      	cmp	r3, r1
    cbb6:	d374      	bcc.n	cca2 <__udivsi3+0xf2>
    cbb8:	0903      	lsrs	r3, r0, #4
    cbba:	428b      	cmp	r3, r1
    cbbc:	d35f      	bcc.n	cc7e <__udivsi3+0xce>
    cbbe:	0a03      	lsrs	r3, r0, #8
    cbc0:	428b      	cmp	r3, r1
    cbc2:	d344      	bcc.n	cc4e <__udivsi3+0x9e>
    cbc4:	0b03      	lsrs	r3, r0, #12
    cbc6:	428b      	cmp	r3, r1
    cbc8:	d328      	bcc.n	cc1c <__udivsi3+0x6c>
    cbca:	0c03      	lsrs	r3, r0, #16
    cbcc:	428b      	cmp	r3, r1
    cbce:	d30d      	bcc.n	cbec <__udivsi3+0x3c>
    cbd0:	22ff      	movs	r2, #255	; 0xff
    cbd2:	0209      	lsls	r1, r1, #8
    cbd4:	ba12      	rev	r2, r2
    cbd6:	0c03      	lsrs	r3, r0, #16
    cbd8:	428b      	cmp	r3, r1
    cbda:	d302      	bcc.n	cbe2 <__udivsi3+0x32>
    cbdc:	1212      	asrs	r2, r2, #8
    cbde:	0209      	lsls	r1, r1, #8
    cbe0:	d065      	beq.n	ccae <__udivsi3+0xfe>
    cbe2:	0b03      	lsrs	r3, r0, #12
    cbe4:	428b      	cmp	r3, r1
    cbe6:	d319      	bcc.n	cc1c <__udivsi3+0x6c>
    cbe8:	e000      	b.n	cbec <__udivsi3+0x3c>
    cbea:	0a09      	lsrs	r1, r1, #8
    cbec:	0bc3      	lsrs	r3, r0, #15
    cbee:	428b      	cmp	r3, r1
    cbf0:	d301      	bcc.n	cbf6 <__udivsi3+0x46>
    cbf2:	03cb      	lsls	r3, r1, #15
    cbf4:	1ac0      	subs	r0, r0, r3
    cbf6:	4152      	adcs	r2, r2
    cbf8:	0b83      	lsrs	r3, r0, #14
    cbfa:	428b      	cmp	r3, r1
    cbfc:	d301      	bcc.n	cc02 <__udivsi3+0x52>
    cbfe:	038b      	lsls	r3, r1, #14
    cc00:	1ac0      	subs	r0, r0, r3
    cc02:	4152      	adcs	r2, r2
    cc04:	0b43      	lsrs	r3, r0, #13
    cc06:	428b      	cmp	r3, r1
    cc08:	d301      	bcc.n	cc0e <__udivsi3+0x5e>
    cc0a:	034b      	lsls	r3, r1, #13
    cc0c:	1ac0      	subs	r0, r0, r3
    cc0e:	4152      	adcs	r2, r2
    cc10:	0b03      	lsrs	r3, r0, #12
    cc12:	428b      	cmp	r3, r1
    cc14:	d301      	bcc.n	cc1a <__udivsi3+0x6a>
    cc16:	030b      	lsls	r3, r1, #12
    cc18:	1ac0      	subs	r0, r0, r3
    cc1a:	4152      	adcs	r2, r2
    cc1c:	0ac3      	lsrs	r3, r0, #11
    cc1e:	428b      	cmp	r3, r1
    cc20:	d301      	bcc.n	cc26 <__udivsi3+0x76>
    cc22:	02cb      	lsls	r3, r1, #11
    cc24:	1ac0      	subs	r0, r0, r3
    cc26:	4152      	adcs	r2, r2
    cc28:	0a83      	lsrs	r3, r0, #10
    cc2a:	428b      	cmp	r3, r1
    cc2c:	d301      	bcc.n	cc32 <__udivsi3+0x82>
    cc2e:	028b      	lsls	r3, r1, #10
    cc30:	1ac0      	subs	r0, r0, r3
    cc32:	4152      	adcs	r2, r2
    cc34:	0a43      	lsrs	r3, r0, #9
    cc36:	428b      	cmp	r3, r1
    cc38:	d301      	bcc.n	cc3e <__udivsi3+0x8e>
    cc3a:	024b      	lsls	r3, r1, #9
    cc3c:	1ac0      	subs	r0, r0, r3
    cc3e:	4152      	adcs	r2, r2
    cc40:	0a03      	lsrs	r3, r0, #8
    cc42:	428b      	cmp	r3, r1
    cc44:	d301      	bcc.n	cc4a <__udivsi3+0x9a>
    cc46:	020b      	lsls	r3, r1, #8
    cc48:	1ac0      	subs	r0, r0, r3
    cc4a:	4152      	adcs	r2, r2
    cc4c:	d2cd      	bcs.n	cbea <__udivsi3+0x3a>
    cc4e:	09c3      	lsrs	r3, r0, #7
    cc50:	428b      	cmp	r3, r1
    cc52:	d301      	bcc.n	cc58 <__udivsi3+0xa8>
    cc54:	01cb      	lsls	r3, r1, #7
    cc56:	1ac0      	subs	r0, r0, r3
    cc58:	4152      	adcs	r2, r2
    cc5a:	0983      	lsrs	r3, r0, #6
    cc5c:	428b      	cmp	r3, r1
    cc5e:	d301      	bcc.n	cc64 <__udivsi3+0xb4>
    cc60:	018b      	lsls	r3, r1, #6
    cc62:	1ac0      	subs	r0, r0, r3
    cc64:	4152      	adcs	r2, r2
    cc66:	0943      	lsrs	r3, r0, #5
    cc68:	428b      	cmp	r3, r1
    cc6a:	d301      	bcc.n	cc70 <__udivsi3+0xc0>
    cc6c:	014b      	lsls	r3, r1, #5
    cc6e:	1ac0      	subs	r0, r0, r3
    cc70:	4152      	adcs	r2, r2
    cc72:	0903      	lsrs	r3, r0, #4
    cc74:	428b      	cmp	r3, r1
    cc76:	d301      	bcc.n	cc7c <__udivsi3+0xcc>
    cc78:	010b      	lsls	r3, r1, #4
    cc7a:	1ac0      	subs	r0, r0, r3
    cc7c:	4152      	adcs	r2, r2
    cc7e:	08c3      	lsrs	r3, r0, #3
    cc80:	428b      	cmp	r3, r1
    cc82:	d301      	bcc.n	cc88 <__udivsi3+0xd8>
    cc84:	00cb      	lsls	r3, r1, #3
    cc86:	1ac0      	subs	r0, r0, r3
    cc88:	4152      	adcs	r2, r2
    cc8a:	0883      	lsrs	r3, r0, #2
    cc8c:	428b      	cmp	r3, r1
    cc8e:	d301      	bcc.n	cc94 <__udivsi3+0xe4>
    cc90:	008b      	lsls	r3, r1, #2
    cc92:	1ac0      	subs	r0, r0, r3
    cc94:	4152      	adcs	r2, r2
    cc96:	0843      	lsrs	r3, r0, #1
    cc98:	428b      	cmp	r3, r1
    cc9a:	d301      	bcc.n	cca0 <__udivsi3+0xf0>
    cc9c:	004b      	lsls	r3, r1, #1
    cc9e:	1ac0      	subs	r0, r0, r3
    cca0:	4152      	adcs	r2, r2
    cca2:	1a41      	subs	r1, r0, r1
    cca4:	d200      	bcs.n	cca8 <__udivsi3+0xf8>
    cca6:	4601      	mov	r1, r0
    cca8:	4152      	adcs	r2, r2
    ccaa:	4610      	mov	r0, r2
    ccac:	4770      	bx	lr
    ccae:	e7ff      	b.n	ccb0 <__udivsi3+0x100>
    ccb0:	b501      	push	{r0, lr}
    ccb2:	2000      	movs	r0, #0
    ccb4:	f000 f8f0 	bl	ce98 <__aeabi_idiv0>
    ccb8:	bd02      	pop	{r1, pc}
    ccba:	46c0      	nop			; (mov r8, r8)

0000ccbc <__aeabi_uidivmod>:
    ccbc:	2900      	cmp	r1, #0
    ccbe:	d0f7      	beq.n	ccb0 <__udivsi3+0x100>
    ccc0:	e776      	b.n	cbb0 <__udivsi3>
    ccc2:	4770      	bx	lr

0000ccc4 <__divsi3>:
    ccc4:	4603      	mov	r3, r0
    ccc6:	430b      	orrs	r3, r1
    ccc8:	d47f      	bmi.n	cdca <__divsi3+0x106>
    ccca:	2200      	movs	r2, #0
    cccc:	0843      	lsrs	r3, r0, #1
    ccce:	428b      	cmp	r3, r1
    ccd0:	d374      	bcc.n	cdbc <__divsi3+0xf8>
    ccd2:	0903      	lsrs	r3, r0, #4
    ccd4:	428b      	cmp	r3, r1
    ccd6:	d35f      	bcc.n	cd98 <__divsi3+0xd4>
    ccd8:	0a03      	lsrs	r3, r0, #8
    ccda:	428b      	cmp	r3, r1
    ccdc:	d344      	bcc.n	cd68 <__divsi3+0xa4>
    ccde:	0b03      	lsrs	r3, r0, #12
    cce0:	428b      	cmp	r3, r1
    cce2:	d328      	bcc.n	cd36 <__divsi3+0x72>
    cce4:	0c03      	lsrs	r3, r0, #16
    cce6:	428b      	cmp	r3, r1
    cce8:	d30d      	bcc.n	cd06 <__divsi3+0x42>
    ccea:	22ff      	movs	r2, #255	; 0xff
    ccec:	0209      	lsls	r1, r1, #8
    ccee:	ba12      	rev	r2, r2
    ccf0:	0c03      	lsrs	r3, r0, #16
    ccf2:	428b      	cmp	r3, r1
    ccf4:	d302      	bcc.n	ccfc <__divsi3+0x38>
    ccf6:	1212      	asrs	r2, r2, #8
    ccf8:	0209      	lsls	r1, r1, #8
    ccfa:	d065      	beq.n	cdc8 <__divsi3+0x104>
    ccfc:	0b03      	lsrs	r3, r0, #12
    ccfe:	428b      	cmp	r3, r1
    cd00:	d319      	bcc.n	cd36 <__divsi3+0x72>
    cd02:	e000      	b.n	cd06 <__divsi3+0x42>
    cd04:	0a09      	lsrs	r1, r1, #8
    cd06:	0bc3      	lsrs	r3, r0, #15
    cd08:	428b      	cmp	r3, r1
    cd0a:	d301      	bcc.n	cd10 <__divsi3+0x4c>
    cd0c:	03cb      	lsls	r3, r1, #15
    cd0e:	1ac0      	subs	r0, r0, r3
    cd10:	4152      	adcs	r2, r2
    cd12:	0b83      	lsrs	r3, r0, #14
    cd14:	428b      	cmp	r3, r1
    cd16:	d301      	bcc.n	cd1c <__divsi3+0x58>
    cd18:	038b      	lsls	r3, r1, #14
    cd1a:	1ac0      	subs	r0, r0, r3
    cd1c:	4152      	adcs	r2, r2
    cd1e:	0b43      	lsrs	r3, r0, #13
    cd20:	428b      	cmp	r3, r1
    cd22:	d301      	bcc.n	cd28 <__divsi3+0x64>
    cd24:	034b      	lsls	r3, r1, #13
    cd26:	1ac0      	subs	r0, r0, r3
    cd28:	4152      	adcs	r2, r2
    cd2a:	0b03      	lsrs	r3, r0, #12
    cd2c:	428b      	cmp	r3, r1
    cd2e:	d301      	bcc.n	cd34 <__divsi3+0x70>
    cd30:	030b      	lsls	r3, r1, #12
    cd32:	1ac0      	subs	r0, r0, r3
    cd34:	4152      	adcs	r2, r2
    cd36:	0ac3      	lsrs	r3, r0, #11
    cd38:	428b      	cmp	r3, r1
    cd3a:	d301      	bcc.n	cd40 <__divsi3+0x7c>
    cd3c:	02cb      	lsls	r3, r1, #11
    cd3e:	1ac0      	subs	r0, r0, r3
    cd40:	4152      	adcs	r2, r2
    cd42:	0a83      	lsrs	r3, r0, #10
    cd44:	428b      	cmp	r3, r1
    cd46:	d301      	bcc.n	cd4c <__divsi3+0x88>
    cd48:	028b      	lsls	r3, r1, #10
    cd4a:	1ac0      	subs	r0, r0, r3
    cd4c:	4152      	adcs	r2, r2
    cd4e:	0a43      	lsrs	r3, r0, #9
    cd50:	428b      	cmp	r3, r1
    cd52:	d301      	bcc.n	cd58 <__divsi3+0x94>
    cd54:	024b      	lsls	r3, r1, #9
    cd56:	1ac0      	subs	r0, r0, r3
    cd58:	4152      	adcs	r2, r2
    cd5a:	0a03      	lsrs	r3, r0, #8
    cd5c:	428b      	cmp	r3, r1
    cd5e:	d301      	bcc.n	cd64 <__divsi3+0xa0>
    cd60:	020b      	lsls	r3, r1, #8
    cd62:	1ac0      	subs	r0, r0, r3
    cd64:	4152      	adcs	r2, r2
    cd66:	d2cd      	bcs.n	cd04 <__divsi3+0x40>
    cd68:	09c3      	lsrs	r3, r0, #7
    cd6a:	428b      	cmp	r3, r1
    cd6c:	d301      	bcc.n	cd72 <__divsi3+0xae>
    cd6e:	01cb      	lsls	r3, r1, #7
    cd70:	1ac0      	subs	r0, r0, r3
    cd72:	4152      	adcs	r2, r2
    cd74:	0983      	lsrs	r3, r0, #6
    cd76:	428b      	cmp	r3, r1
    cd78:	d301      	bcc.n	cd7e <__divsi3+0xba>
    cd7a:	018b      	lsls	r3, r1, #6
    cd7c:	1ac0      	subs	r0, r0, r3
    cd7e:	4152      	adcs	r2, r2
    cd80:	0943      	lsrs	r3, r0, #5
    cd82:	428b      	cmp	r3, r1
    cd84:	d301      	bcc.n	cd8a <__divsi3+0xc6>
    cd86:	014b      	lsls	r3, r1, #5
    cd88:	1ac0      	subs	r0, r0, r3
    cd8a:	4152      	adcs	r2, r2
    cd8c:	0903      	lsrs	r3, r0, #4
    cd8e:	428b      	cmp	r3, r1
    cd90:	d301      	bcc.n	cd96 <__divsi3+0xd2>
    cd92:	010b      	lsls	r3, r1, #4
    cd94:	1ac0      	subs	r0, r0, r3
    cd96:	4152      	adcs	r2, r2
    cd98:	08c3      	lsrs	r3, r0, #3
    cd9a:	428b      	cmp	r3, r1
    cd9c:	d301      	bcc.n	cda2 <__divsi3+0xde>
    cd9e:	00cb      	lsls	r3, r1, #3
    cda0:	1ac0      	subs	r0, r0, r3
    cda2:	4152      	adcs	r2, r2
    cda4:	0883      	lsrs	r3, r0, #2
    cda6:	428b      	cmp	r3, r1
    cda8:	d301      	bcc.n	cdae <__divsi3+0xea>
    cdaa:	008b      	lsls	r3, r1, #2
    cdac:	1ac0      	subs	r0, r0, r3
    cdae:	4152      	adcs	r2, r2
    cdb0:	0843      	lsrs	r3, r0, #1
    cdb2:	428b      	cmp	r3, r1
    cdb4:	d301      	bcc.n	cdba <__divsi3+0xf6>
    cdb6:	004b      	lsls	r3, r1, #1
    cdb8:	1ac0      	subs	r0, r0, r3
    cdba:	4152      	adcs	r2, r2
    cdbc:	1a41      	subs	r1, r0, r1
    cdbe:	d200      	bcs.n	cdc2 <__divsi3+0xfe>
    cdc0:	4601      	mov	r1, r0
    cdc2:	4152      	adcs	r2, r2
    cdc4:	4610      	mov	r0, r2
    cdc6:	4770      	bx	lr
    cdc8:	e05d      	b.n	ce86 <__divsi3+0x1c2>
    cdca:	0fca      	lsrs	r2, r1, #31
    cdcc:	d000      	beq.n	cdd0 <__divsi3+0x10c>
    cdce:	4249      	negs	r1, r1
    cdd0:	1003      	asrs	r3, r0, #32
    cdd2:	d300      	bcc.n	cdd6 <__divsi3+0x112>
    cdd4:	4240      	negs	r0, r0
    cdd6:	4053      	eors	r3, r2
    cdd8:	2200      	movs	r2, #0
    cdda:	469c      	mov	ip, r3
    cddc:	0903      	lsrs	r3, r0, #4
    cdde:	428b      	cmp	r3, r1
    cde0:	d32d      	bcc.n	ce3e <__divsi3+0x17a>
    cde2:	0a03      	lsrs	r3, r0, #8
    cde4:	428b      	cmp	r3, r1
    cde6:	d312      	bcc.n	ce0e <__divsi3+0x14a>
    cde8:	22fc      	movs	r2, #252	; 0xfc
    cdea:	0189      	lsls	r1, r1, #6
    cdec:	ba12      	rev	r2, r2
    cdee:	0a03      	lsrs	r3, r0, #8
    cdf0:	428b      	cmp	r3, r1
    cdf2:	d30c      	bcc.n	ce0e <__divsi3+0x14a>
    cdf4:	0189      	lsls	r1, r1, #6
    cdf6:	1192      	asrs	r2, r2, #6
    cdf8:	428b      	cmp	r3, r1
    cdfa:	d308      	bcc.n	ce0e <__divsi3+0x14a>
    cdfc:	0189      	lsls	r1, r1, #6
    cdfe:	1192      	asrs	r2, r2, #6
    ce00:	428b      	cmp	r3, r1
    ce02:	d304      	bcc.n	ce0e <__divsi3+0x14a>
    ce04:	0189      	lsls	r1, r1, #6
    ce06:	d03a      	beq.n	ce7e <__divsi3+0x1ba>
    ce08:	1192      	asrs	r2, r2, #6
    ce0a:	e000      	b.n	ce0e <__divsi3+0x14a>
    ce0c:	0989      	lsrs	r1, r1, #6
    ce0e:	09c3      	lsrs	r3, r0, #7
    ce10:	428b      	cmp	r3, r1
    ce12:	d301      	bcc.n	ce18 <__divsi3+0x154>
    ce14:	01cb      	lsls	r3, r1, #7
    ce16:	1ac0      	subs	r0, r0, r3
    ce18:	4152      	adcs	r2, r2
    ce1a:	0983      	lsrs	r3, r0, #6
    ce1c:	428b      	cmp	r3, r1
    ce1e:	d301      	bcc.n	ce24 <__divsi3+0x160>
    ce20:	018b      	lsls	r3, r1, #6
    ce22:	1ac0      	subs	r0, r0, r3
    ce24:	4152      	adcs	r2, r2
    ce26:	0943      	lsrs	r3, r0, #5
    ce28:	428b      	cmp	r3, r1
    ce2a:	d301      	bcc.n	ce30 <__divsi3+0x16c>
    ce2c:	014b      	lsls	r3, r1, #5
    ce2e:	1ac0      	subs	r0, r0, r3
    ce30:	4152      	adcs	r2, r2
    ce32:	0903      	lsrs	r3, r0, #4
    ce34:	428b      	cmp	r3, r1
    ce36:	d301      	bcc.n	ce3c <__divsi3+0x178>
    ce38:	010b      	lsls	r3, r1, #4
    ce3a:	1ac0      	subs	r0, r0, r3
    ce3c:	4152      	adcs	r2, r2
    ce3e:	08c3      	lsrs	r3, r0, #3
    ce40:	428b      	cmp	r3, r1
    ce42:	d301      	bcc.n	ce48 <__divsi3+0x184>
    ce44:	00cb      	lsls	r3, r1, #3
    ce46:	1ac0      	subs	r0, r0, r3
    ce48:	4152      	adcs	r2, r2
    ce4a:	0883      	lsrs	r3, r0, #2
    ce4c:	428b      	cmp	r3, r1
    ce4e:	d301      	bcc.n	ce54 <__divsi3+0x190>
    ce50:	008b      	lsls	r3, r1, #2
    ce52:	1ac0      	subs	r0, r0, r3
    ce54:	4152      	adcs	r2, r2
    ce56:	d2d9      	bcs.n	ce0c <__divsi3+0x148>
    ce58:	0843      	lsrs	r3, r0, #1
    ce5a:	428b      	cmp	r3, r1
    ce5c:	d301      	bcc.n	ce62 <__divsi3+0x19e>
    ce5e:	004b      	lsls	r3, r1, #1
    ce60:	1ac0      	subs	r0, r0, r3
    ce62:	4152      	adcs	r2, r2
    ce64:	1a41      	subs	r1, r0, r1
    ce66:	d200      	bcs.n	ce6a <__divsi3+0x1a6>
    ce68:	4601      	mov	r1, r0
    ce6a:	4663      	mov	r3, ip
    ce6c:	4152      	adcs	r2, r2
    ce6e:	105b      	asrs	r3, r3, #1
    ce70:	4610      	mov	r0, r2
    ce72:	d301      	bcc.n	ce78 <__divsi3+0x1b4>
    ce74:	4240      	negs	r0, r0
    ce76:	2b00      	cmp	r3, #0
    ce78:	d500      	bpl.n	ce7c <__divsi3+0x1b8>
    ce7a:	4249      	negs	r1, r1
    ce7c:	4770      	bx	lr
    ce7e:	4663      	mov	r3, ip
    ce80:	105b      	asrs	r3, r3, #1
    ce82:	d300      	bcc.n	ce86 <__divsi3+0x1c2>
    ce84:	4240      	negs	r0, r0
    ce86:	b501      	push	{r0, lr}
    ce88:	2000      	movs	r0, #0
    ce8a:	f000 f805 	bl	ce98 <__aeabi_idiv0>
    ce8e:	bd02      	pop	{r1, pc}

0000ce90 <__aeabi_idivmod>:
    ce90:	2900      	cmp	r1, #0
    ce92:	d0f8      	beq.n	ce86 <__divsi3+0x1c2>
    ce94:	e716      	b.n	ccc4 <__divsi3>
    ce96:	4770      	bx	lr

0000ce98 <__aeabi_idiv0>:
    ce98:	4770      	bx	lr
    ce9a:	46c0      	nop			; (mov r8, r8)

0000ce9c <__aeabi_cdrcmple>:
    ce9c:	4684      	mov	ip, r0
    ce9e:	1c10      	adds	r0, r2, #0
    cea0:	4662      	mov	r2, ip
    cea2:	468c      	mov	ip, r1
    cea4:	1c19      	adds	r1, r3, #0
    cea6:	4663      	mov	r3, ip
    cea8:	e000      	b.n	ceac <__aeabi_cdcmpeq>
    ceaa:	46c0      	nop			; (mov r8, r8)

0000ceac <__aeabi_cdcmpeq>:
    ceac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ceae:	f000 fd89 	bl	d9c4 <__ledf2>
    ceb2:	2800      	cmp	r0, #0
    ceb4:	d401      	bmi.n	ceba <__aeabi_cdcmpeq+0xe>
    ceb6:	2100      	movs	r1, #0
    ceb8:	42c8      	cmn	r0, r1
    ceba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000cebc <__aeabi_dcmpeq>:
    cebc:	b510      	push	{r4, lr}
    cebe:	f000 fce3 	bl	d888 <__eqdf2>
    cec2:	4240      	negs	r0, r0
    cec4:	3001      	adds	r0, #1
    cec6:	bd10      	pop	{r4, pc}

0000cec8 <__aeabi_dcmplt>:
    cec8:	b510      	push	{r4, lr}
    ceca:	f000 fd7b 	bl	d9c4 <__ledf2>
    cece:	2800      	cmp	r0, #0
    ced0:	db01      	blt.n	ced6 <__aeabi_dcmplt+0xe>
    ced2:	2000      	movs	r0, #0
    ced4:	bd10      	pop	{r4, pc}
    ced6:	2001      	movs	r0, #1
    ced8:	bd10      	pop	{r4, pc}
    ceda:	46c0      	nop			; (mov r8, r8)

0000cedc <__aeabi_dcmple>:
    cedc:	b510      	push	{r4, lr}
    cede:	f000 fd71 	bl	d9c4 <__ledf2>
    cee2:	2800      	cmp	r0, #0
    cee4:	dd01      	ble.n	ceea <__aeabi_dcmple+0xe>
    cee6:	2000      	movs	r0, #0
    cee8:	bd10      	pop	{r4, pc}
    ceea:	2001      	movs	r0, #1
    ceec:	bd10      	pop	{r4, pc}
    ceee:	46c0      	nop			; (mov r8, r8)

0000cef0 <__aeabi_dcmpgt>:
    cef0:	b510      	push	{r4, lr}
    cef2:	f000 fd03 	bl	d8fc <__gedf2>
    cef6:	2800      	cmp	r0, #0
    cef8:	dc01      	bgt.n	cefe <__aeabi_dcmpgt+0xe>
    cefa:	2000      	movs	r0, #0
    cefc:	bd10      	pop	{r4, pc}
    cefe:	2001      	movs	r0, #1
    cf00:	bd10      	pop	{r4, pc}
    cf02:	46c0      	nop			; (mov r8, r8)

0000cf04 <__aeabi_dcmpge>:
    cf04:	b510      	push	{r4, lr}
    cf06:	f000 fcf9 	bl	d8fc <__gedf2>
    cf0a:	2800      	cmp	r0, #0
    cf0c:	da01      	bge.n	cf12 <__aeabi_dcmpge+0xe>
    cf0e:	2000      	movs	r0, #0
    cf10:	bd10      	pop	{r4, pc}
    cf12:	2001      	movs	r0, #1
    cf14:	bd10      	pop	{r4, pc}
    cf16:	46c0      	nop			; (mov r8, r8)

0000cf18 <__aeabi_cfrcmple>:
    cf18:	4684      	mov	ip, r0
    cf1a:	1c08      	adds	r0, r1, #0
    cf1c:	4661      	mov	r1, ip
    cf1e:	e7ff      	b.n	cf20 <__aeabi_cfcmpeq>

0000cf20 <__aeabi_cfcmpeq>:
    cf20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cf22:	f000 fa6d 	bl	d400 <__lesf2>
    cf26:	2800      	cmp	r0, #0
    cf28:	d401      	bmi.n	cf2e <__aeabi_cfcmpeq+0xe>
    cf2a:	2100      	movs	r1, #0
    cf2c:	42c8      	cmn	r0, r1
    cf2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000cf30 <__aeabi_fcmpeq>:
    cf30:	b510      	push	{r4, lr}
    cf32:	f000 f9ff 	bl	d334 <__eqsf2>
    cf36:	4240      	negs	r0, r0
    cf38:	3001      	adds	r0, #1
    cf3a:	bd10      	pop	{r4, pc}

0000cf3c <__aeabi_fcmplt>:
    cf3c:	b510      	push	{r4, lr}
    cf3e:	f000 fa5f 	bl	d400 <__lesf2>
    cf42:	2800      	cmp	r0, #0
    cf44:	db01      	blt.n	cf4a <__aeabi_fcmplt+0xe>
    cf46:	2000      	movs	r0, #0
    cf48:	bd10      	pop	{r4, pc}
    cf4a:	2001      	movs	r0, #1
    cf4c:	bd10      	pop	{r4, pc}
    cf4e:	46c0      	nop			; (mov r8, r8)

0000cf50 <__aeabi_fcmple>:
    cf50:	b510      	push	{r4, lr}
    cf52:	f000 fa55 	bl	d400 <__lesf2>
    cf56:	2800      	cmp	r0, #0
    cf58:	dd01      	ble.n	cf5e <__aeabi_fcmple+0xe>
    cf5a:	2000      	movs	r0, #0
    cf5c:	bd10      	pop	{r4, pc}
    cf5e:	2001      	movs	r0, #1
    cf60:	bd10      	pop	{r4, pc}
    cf62:	46c0      	nop			; (mov r8, r8)

0000cf64 <__aeabi_fcmpgt>:
    cf64:	b510      	push	{r4, lr}
    cf66:	f000 fa0b 	bl	d380 <__gesf2>
    cf6a:	2800      	cmp	r0, #0
    cf6c:	dc01      	bgt.n	cf72 <__aeabi_fcmpgt+0xe>
    cf6e:	2000      	movs	r0, #0
    cf70:	bd10      	pop	{r4, pc}
    cf72:	2001      	movs	r0, #1
    cf74:	bd10      	pop	{r4, pc}
    cf76:	46c0      	nop			; (mov r8, r8)

0000cf78 <__aeabi_fcmpge>:
    cf78:	b510      	push	{r4, lr}
    cf7a:	f000 fa01 	bl	d380 <__gesf2>
    cf7e:	2800      	cmp	r0, #0
    cf80:	da01      	bge.n	cf86 <__aeabi_fcmpge+0xe>
    cf82:	2000      	movs	r0, #0
    cf84:	bd10      	pop	{r4, pc}
    cf86:	2001      	movs	r0, #1
    cf88:	bd10      	pop	{r4, pc}
    cf8a:	46c0      	nop			; (mov r8, r8)

0000cf8c <__aeabi_lmul>:
    cf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf8e:	46ce      	mov	lr, r9
    cf90:	4647      	mov	r7, r8
    cf92:	0415      	lsls	r5, r2, #16
    cf94:	0c2d      	lsrs	r5, r5, #16
    cf96:	002e      	movs	r6, r5
    cf98:	b580      	push	{r7, lr}
    cf9a:	0407      	lsls	r7, r0, #16
    cf9c:	0c14      	lsrs	r4, r2, #16
    cf9e:	0c3f      	lsrs	r7, r7, #16
    cfa0:	4699      	mov	r9, r3
    cfa2:	0c03      	lsrs	r3, r0, #16
    cfa4:	437e      	muls	r6, r7
    cfa6:	435d      	muls	r5, r3
    cfa8:	4367      	muls	r7, r4
    cfaa:	4363      	muls	r3, r4
    cfac:	197f      	adds	r7, r7, r5
    cfae:	0c34      	lsrs	r4, r6, #16
    cfb0:	19e4      	adds	r4, r4, r7
    cfb2:	469c      	mov	ip, r3
    cfb4:	42a5      	cmp	r5, r4
    cfb6:	d903      	bls.n	cfc0 <__aeabi_lmul+0x34>
    cfb8:	2380      	movs	r3, #128	; 0x80
    cfba:	025b      	lsls	r3, r3, #9
    cfbc:	4698      	mov	r8, r3
    cfbe:	44c4      	add	ip, r8
    cfc0:	464b      	mov	r3, r9
    cfc2:	4351      	muls	r1, r2
    cfc4:	4343      	muls	r3, r0
    cfc6:	0436      	lsls	r6, r6, #16
    cfc8:	0c36      	lsrs	r6, r6, #16
    cfca:	0c25      	lsrs	r5, r4, #16
    cfcc:	0424      	lsls	r4, r4, #16
    cfce:	4465      	add	r5, ip
    cfd0:	19a4      	adds	r4, r4, r6
    cfd2:	1859      	adds	r1, r3, r1
    cfd4:	1949      	adds	r1, r1, r5
    cfd6:	0020      	movs	r0, r4
    cfd8:	bc0c      	pop	{r2, r3}
    cfda:	4690      	mov	r8, r2
    cfdc:	4699      	mov	r9, r3
    cfde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cfe0 <__aeabi_f2uiz>:
    cfe0:	219e      	movs	r1, #158	; 0x9e
    cfe2:	b510      	push	{r4, lr}
    cfe4:	05c9      	lsls	r1, r1, #23
    cfe6:	1c04      	adds	r4, r0, #0
    cfe8:	f7ff ffc6 	bl	cf78 <__aeabi_fcmpge>
    cfec:	2800      	cmp	r0, #0
    cfee:	d103      	bne.n	cff8 <__aeabi_f2uiz+0x18>
    cff0:	1c20      	adds	r0, r4, #0
    cff2:	f000 fbe3 	bl	d7bc <__aeabi_f2iz>
    cff6:	bd10      	pop	{r4, pc}
    cff8:	219e      	movs	r1, #158	; 0x9e
    cffa:	1c20      	adds	r0, r4, #0
    cffc:	05c9      	lsls	r1, r1, #23
    cffe:	f000 fa41 	bl	d484 <__aeabi_fsub>
    d002:	f000 fbdb 	bl	d7bc <__aeabi_f2iz>
    d006:	2380      	movs	r3, #128	; 0x80
    d008:	061b      	lsls	r3, r3, #24
    d00a:	469c      	mov	ip, r3
    d00c:	4460      	add	r0, ip
    d00e:	e7f2      	b.n	cff6 <__aeabi_f2uiz+0x16>

0000d010 <__aeabi_fadd>:
    d010:	b5f0      	push	{r4, r5, r6, r7, lr}
    d012:	46c6      	mov	lr, r8
    d014:	024e      	lsls	r6, r1, #9
    d016:	0247      	lsls	r7, r0, #9
    d018:	0a76      	lsrs	r6, r6, #9
    d01a:	0a7b      	lsrs	r3, r7, #9
    d01c:	0044      	lsls	r4, r0, #1
    d01e:	0fc5      	lsrs	r5, r0, #31
    d020:	00f7      	lsls	r7, r6, #3
    d022:	0048      	lsls	r0, r1, #1
    d024:	4698      	mov	r8, r3
    d026:	b500      	push	{lr}
    d028:	0e24      	lsrs	r4, r4, #24
    d02a:	002a      	movs	r2, r5
    d02c:	00db      	lsls	r3, r3, #3
    d02e:	0e00      	lsrs	r0, r0, #24
    d030:	0fc9      	lsrs	r1, r1, #31
    d032:	46bc      	mov	ip, r7
    d034:	428d      	cmp	r5, r1
    d036:	d067      	beq.n	d108 <__aeabi_fadd+0xf8>
    d038:	1a22      	subs	r2, r4, r0
    d03a:	2a00      	cmp	r2, #0
    d03c:	dc00      	bgt.n	d040 <__aeabi_fadd+0x30>
    d03e:	e0a5      	b.n	d18c <__aeabi_fadd+0x17c>
    d040:	2800      	cmp	r0, #0
    d042:	d13a      	bne.n	d0ba <__aeabi_fadd+0xaa>
    d044:	2f00      	cmp	r7, #0
    d046:	d100      	bne.n	d04a <__aeabi_fadd+0x3a>
    d048:	e093      	b.n	d172 <__aeabi_fadd+0x162>
    d04a:	1e51      	subs	r1, r2, #1
    d04c:	2900      	cmp	r1, #0
    d04e:	d000      	beq.n	d052 <__aeabi_fadd+0x42>
    d050:	e0bc      	b.n	d1cc <__aeabi_fadd+0x1bc>
    d052:	2401      	movs	r4, #1
    d054:	1bdb      	subs	r3, r3, r7
    d056:	015a      	lsls	r2, r3, #5
    d058:	d546      	bpl.n	d0e8 <__aeabi_fadd+0xd8>
    d05a:	019b      	lsls	r3, r3, #6
    d05c:	099e      	lsrs	r6, r3, #6
    d05e:	0030      	movs	r0, r6
    d060:	f000 fd12 	bl	da88 <__clzsi2>
    d064:	3805      	subs	r0, #5
    d066:	4086      	lsls	r6, r0
    d068:	4284      	cmp	r4, r0
    d06a:	dd00      	ble.n	d06e <__aeabi_fadd+0x5e>
    d06c:	e09d      	b.n	d1aa <__aeabi_fadd+0x19a>
    d06e:	1b04      	subs	r4, r0, r4
    d070:	0032      	movs	r2, r6
    d072:	2020      	movs	r0, #32
    d074:	3401      	adds	r4, #1
    d076:	40e2      	lsrs	r2, r4
    d078:	1b04      	subs	r4, r0, r4
    d07a:	40a6      	lsls	r6, r4
    d07c:	0033      	movs	r3, r6
    d07e:	1e5e      	subs	r6, r3, #1
    d080:	41b3      	sbcs	r3, r6
    d082:	2400      	movs	r4, #0
    d084:	4313      	orrs	r3, r2
    d086:	075a      	lsls	r2, r3, #29
    d088:	d004      	beq.n	d094 <__aeabi_fadd+0x84>
    d08a:	220f      	movs	r2, #15
    d08c:	401a      	ands	r2, r3
    d08e:	2a04      	cmp	r2, #4
    d090:	d000      	beq.n	d094 <__aeabi_fadd+0x84>
    d092:	3304      	adds	r3, #4
    d094:	015a      	lsls	r2, r3, #5
    d096:	d529      	bpl.n	d0ec <__aeabi_fadd+0xdc>
    d098:	3401      	adds	r4, #1
    d09a:	2cff      	cmp	r4, #255	; 0xff
    d09c:	d100      	bne.n	d0a0 <__aeabi_fadd+0x90>
    d09e:	e081      	b.n	d1a4 <__aeabi_fadd+0x194>
    d0a0:	002a      	movs	r2, r5
    d0a2:	019b      	lsls	r3, r3, #6
    d0a4:	0a5b      	lsrs	r3, r3, #9
    d0a6:	b2e4      	uxtb	r4, r4
    d0a8:	025b      	lsls	r3, r3, #9
    d0aa:	05e4      	lsls	r4, r4, #23
    d0ac:	0a58      	lsrs	r0, r3, #9
    d0ae:	07d2      	lsls	r2, r2, #31
    d0b0:	4320      	orrs	r0, r4
    d0b2:	4310      	orrs	r0, r2
    d0b4:	bc04      	pop	{r2}
    d0b6:	4690      	mov	r8, r2
    d0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0ba:	2cff      	cmp	r4, #255	; 0xff
    d0bc:	d0e3      	beq.n	d086 <__aeabi_fadd+0x76>
    d0be:	2180      	movs	r1, #128	; 0x80
    d0c0:	0038      	movs	r0, r7
    d0c2:	04c9      	lsls	r1, r1, #19
    d0c4:	4308      	orrs	r0, r1
    d0c6:	4684      	mov	ip, r0
    d0c8:	2a1b      	cmp	r2, #27
    d0ca:	dd00      	ble.n	d0ce <__aeabi_fadd+0xbe>
    d0cc:	e082      	b.n	d1d4 <__aeabi_fadd+0x1c4>
    d0ce:	2020      	movs	r0, #32
    d0d0:	4661      	mov	r1, ip
    d0d2:	40d1      	lsrs	r1, r2
    d0d4:	1a82      	subs	r2, r0, r2
    d0d6:	4660      	mov	r0, ip
    d0d8:	4090      	lsls	r0, r2
    d0da:	0002      	movs	r2, r0
    d0dc:	1e50      	subs	r0, r2, #1
    d0de:	4182      	sbcs	r2, r0
    d0e0:	430a      	orrs	r2, r1
    d0e2:	1a9b      	subs	r3, r3, r2
    d0e4:	015a      	lsls	r2, r3, #5
    d0e6:	d4b8      	bmi.n	d05a <__aeabi_fadd+0x4a>
    d0e8:	075a      	lsls	r2, r3, #29
    d0ea:	d1ce      	bne.n	d08a <__aeabi_fadd+0x7a>
    d0ec:	08de      	lsrs	r6, r3, #3
    d0ee:	002a      	movs	r2, r5
    d0f0:	2cff      	cmp	r4, #255	; 0xff
    d0f2:	d13a      	bne.n	d16a <__aeabi_fadd+0x15a>
    d0f4:	2e00      	cmp	r6, #0
    d0f6:	d100      	bne.n	d0fa <__aeabi_fadd+0xea>
    d0f8:	e0ae      	b.n	d258 <__aeabi_fadd+0x248>
    d0fa:	2380      	movs	r3, #128	; 0x80
    d0fc:	03db      	lsls	r3, r3, #15
    d0fe:	4333      	orrs	r3, r6
    d100:	025b      	lsls	r3, r3, #9
    d102:	0a5b      	lsrs	r3, r3, #9
    d104:	24ff      	movs	r4, #255	; 0xff
    d106:	e7cf      	b.n	d0a8 <__aeabi_fadd+0x98>
    d108:	1a21      	subs	r1, r4, r0
    d10a:	2900      	cmp	r1, #0
    d10c:	dd52      	ble.n	d1b4 <__aeabi_fadd+0x1a4>
    d10e:	2800      	cmp	r0, #0
    d110:	d031      	beq.n	d176 <__aeabi_fadd+0x166>
    d112:	2cff      	cmp	r4, #255	; 0xff
    d114:	d0b7      	beq.n	d086 <__aeabi_fadd+0x76>
    d116:	2080      	movs	r0, #128	; 0x80
    d118:	003e      	movs	r6, r7
    d11a:	04c0      	lsls	r0, r0, #19
    d11c:	4306      	orrs	r6, r0
    d11e:	46b4      	mov	ip, r6
    d120:	291b      	cmp	r1, #27
    d122:	dd00      	ble.n	d126 <__aeabi_fadd+0x116>
    d124:	e0aa      	b.n	d27c <__aeabi_fadd+0x26c>
    d126:	2620      	movs	r6, #32
    d128:	4660      	mov	r0, ip
    d12a:	40c8      	lsrs	r0, r1
    d12c:	1a71      	subs	r1, r6, r1
    d12e:	4666      	mov	r6, ip
    d130:	408e      	lsls	r6, r1
    d132:	0031      	movs	r1, r6
    d134:	1e4e      	subs	r6, r1, #1
    d136:	41b1      	sbcs	r1, r6
    d138:	4301      	orrs	r1, r0
    d13a:	185b      	adds	r3, r3, r1
    d13c:	0159      	lsls	r1, r3, #5
    d13e:	d5d3      	bpl.n	d0e8 <__aeabi_fadd+0xd8>
    d140:	3401      	adds	r4, #1
    d142:	2cff      	cmp	r4, #255	; 0xff
    d144:	d100      	bne.n	d148 <__aeabi_fadd+0x138>
    d146:	e087      	b.n	d258 <__aeabi_fadd+0x248>
    d148:	2201      	movs	r2, #1
    d14a:	4978      	ldr	r1, [pc, #480]	; (d32c <__aeabi_fadd+0x31c>)
    d14c:	401a      	ands	r2, r3
    d14e:	085b      	lsrs	r3, r3, #1
    d150:	400b      	ands	r3, r1
    d152:	4313      	orrs	r3, r2
    d154:	e797      	b.n	d086 <__aeabi_fadd+0x76>
    d156:	2c00      	cmp	r4, #0
    d158:	d000      	beq.n	d15c <__aeabi_fadd+0x14c>
    d15a:	e0a7      	b.n	d2ac <__aeabi_fadd+0x29c>
    d15c:	2b00      	cmp	r3, #0
    d15e:	d000      	beq.n	d162 <__aeabi_fadd+0x152>
    d160:	e0b6      	b.n	d2d0 <__aeabi_fadd+0x2c0>
    d162:	1e3b      	subs	r3, r7, #0
    d164:	d162      	bne.n	d22c <__aeabi_fadd+0x21c>
    d166:	2600      	movs	r6, #0
    d168:	2200      	movs	r2, #0
    d16a:	0273      	lsls	r3, r6, #9
    d16c:	0a5b      	lsrs	r3, r3, #9
    d16e:	b2e4      	uxtb	r4, r4
    d170:	e79a      	b.n	d0a8 <__aeabi_fadd+0x98>
    d172:	0014      	movs	r4, r2
    d174:	e787      	b.n	d086 <__aeabi_fadd+0x76>
    d176:	2f00      	cmp	r7, #0
    d178:	d04d      	beq.n	d216 <__aeabi_fadd+0x206>
    d17a:	1e48      	subs	r0, r1, #1
    d17c:	2800      	cmp	r0, #0
    d17e:	d157      	bne.n	d230 <__aeabi_fadd+0x220>
    d180:	4463      	add	r3, ip
    d182:	2401      	movs	r4, #1
    d184:	015a      	lsls	r2, r3, #5
    d186:	d5af      	bpl.n	d0e8 <__aeabi_fadd+0xd8>
    d188:	2402      	movs	r4, #2
    d18a:	e7dd      	b.n	d148 <__aeabi_fadd+0x138>
    d18c:	2a00      	cmp	r2, #0
    d18e:	d124      	bne.n	d1da <__aeabi_fadd+0x1ca>
    d190:	1c62      	adds	r2, r4, #1
    d192:	b2d2      	uxtb	r2, r2
    d194:	2a01      	cmp	r2, #1
    d196:	ddde      	ble.n	d156 <__aeabi_fadd+0x146>
    d198:	1bde      	subs	r6, r3, r7
    d19a:	0172      	lsls	r2, r6, #5
    d19c:	d535      	bpl.n	d20a <__aeabi_fadd+0x1fa>
    d19e:	1afe      	subs	r6, r7, r3
    d1a0:	000d      	movs	r5, r1
    d1a2:	e75c      	b.n	d05e <__aeabi_fadd+0x4e>
    d1a4:	002a      	movs	r2, r5
    d1a6:	2300      	movs	r3, #0
    d1a8:	e77e      	b.n	d0a8 <__aeabi_fadd+0x98>
    d1aa:	0033      	movs	r3, r6
    d1ac:	4a60      	ldr	r2, [pc, #384]	; (d330 <__aeabi_fadd+0x320>)
    d1ae:	1a24      	subs	r4, r4, r0
    d1b0:	4013      	ands	r3, r2
    d1b2:	e768      	b.n	d086 <__aeabi_fadd+0x76>
    d1b4:	2900      	cmp	r1, #0
    d1b6:	d163      	bne.n	d280 <__aeabi_fadd+0x270>
    d1b8:	1c61      	adds	r1, r4, #1
    d1ba:	b2c8      	uxtb	r0, r1
    d1bc:	2801      	cmp	r0, #1
    d1be:	dd4e      	ble.n	d25e <__aeabi_fadd+0x24e>
    d1c0:	29ff      	cmp	r1, #255	; 0xff
    d1c2:	d049      	beq.n	d258 <__aeabi_fadd+0x248>
    d1c4:	4463      	add	r3, ip
    d1c6:	085b      	lsrs	r3, r3, #1
    d1c8:	000c      	movs	r4, r1
    d1ca:	e75c      	b.n	d086 <__aeabi_fadd+0x76>
    d1cc:	2aff      	cmp	r2, #255	; 0xff
    d1ce:	d041      	beq.n	d254 <__aeabi_fadd+0x244>
    d1d0:	000a      	movs	r2, r1
    d1d2:	e779      	b.n	d0c8 <__aeabi_fadd+0xb8>
    d1d4:	2201      	movs	r2, #1
    d1d6:	1a9b      	subs	r3, r3, r2
    d1d8:	e784      	b.n	d0e4 <__aeabi_fadd+0xd4>
    d1da:	2c00      	cmp	r4, #0
    d1dc:	d01d      	beq.n	d21a <__aeabi_fadd+0x20a>
    d1de:	28ff      	cmp	r0, #255	; 0xff
    d1e0:	d022      	beq.n	d228 <__aeabi_fadd+0x218>
    d1e2:	2480      	movs	r4, #128	; 0x80
    d1e4:	04e4      	lsls	r4, r4, #19
    d1e6:	4252      	negs	r2, r2
    d1e8:	4323      	orrs	r3, r4
    d1ea:	2a1b      	cmp	r2, #27
    d1ec:	dd00      	ble.n	d1f0 <__aeabi_fadd+0x1e0>
    d1ee:	e08a      	b.n	d306 <__aeabi_fadd+0x2f6>
    d1f0:	001c      	movs	r4, r3
    d1f2:	2520      	movs	r5, #32
    d1f4:	40d4      	lsrs	r4, r2
    d1f6:	1aaa      	subs	r2, r5, r2
    d1f8:	4093      	lsls	r3, r2
    d1fa:	1e5a      	subs	r2, r3, #1
    d1fc:	4193      	sbcs	r3, r2
    d1fe:	4323      	orrs	r3, r4
    d200:	4662      	mov	r2, ip
    d202:	0004      	movs	r4, r0
    d204:	1ad3      	subs	r3, r2, r3
    d206:	000d      	movs	r5, r1
    d208:	e725      	b.n	d056 <__aeabi_fadd+0x46>
    d20a:	2e00      	cmp	r6, #0
    d20c:	d000      	beq.n	d210 <__aeabi_fadd+0x200>
    d20e:	e726      	b.n	d05e <__aeabi_fadd+0x4e>
    d210:	2200      	movs	r2, #0
    d212:	2400      	movs	r4, #0
    d214:	e7a9      	b.n	d16a <__aeabi_fadd+0x15a>
    d216:	000c      	movs	r4, r1
    d218:	e735      	b.n	d086 <__aeabi_fadd+0x76>
    d21a:	2b00      	cmp	r3, #0
    d21c:	d04d      	beq.n	d2ba <__aeabi_fadd+0x2aa>
    d21e:	43d2      	mvns	r2, r2
    d220:	2a00      	cmp	r2, #0
    d222:	d0ed      	beq.n	d200 <__aeabi_fadd+0x1f0>
    d224:	28ff      	cmp	r0, #255	; 0xff
    d226:	d1e0      	bne.n	d1ea <__aeabi_fadd+0x1da>
    d228:	4663      	mov	r3, ip
    d22a:	24ff      	movs	r4, #255	; 0xff
    d22c:	000d      	movs	r5, r1
    d22e:	e72a      	b.n	d086 <__aeabi_fadd+0x76>
    d230:	29ff      	cmp	r1, #255	; 0xff
    d232:	d00f      	beq.n	d254 <__aeabi_fadd+0x244>
    d234:	0001      	movs	r1, r0
    d236:	e773      	b.n	d120 <__aeabi_fadd+0x110>
    d238:	2b00      	cmp	r3, #0
    d23a:	d061      	beq.n	d300 <__aeabi_fadd+0x2f0>
    d23c:	24ff      	movs	r4, #255	; 0xff
    d23e:	2f00      	cmp	r7, #0
    d240:	d100      	bne.n	d244 <__aeabi_fadd+0x234>
    d242:	e720      	b.n	d086 <__aeabi_fadd+0x76>
    d244:	2280      	movs	r2, #128	; 0x80
    d246:	4641      	mov	r1, r8
    d248:	03d2      	lsls	r2, r2, #15
    d24a:	4211      	tst	r1, r2
    d24c:	d002      	beq.n	d254 <__aeabi_fadd+0x244>
    d24e:	4216      	tst	r6, r2
    d250:	d100      	bne.n	d254 <__aeabi_fadd+0x244>
    d252:	003b      	movs	r3, r7
    d254:	24ff      	movs	r4, #255	; 0xff
    d256:	e716      	b.n	d086 <__aeabi_fadd+0x76>
    d258:	24ff      	movs	r4, #255	; 0xff
    d25a:	2300      	movs	r3, #0
    d25c:	e724      	b.n	d0a8 <__aeabi_fadd+0x98>
    d25e:	2c00      	cmp	r4, #0
    d260:	d1ea      	bne.n	d238 <__aeabi_fadd+0x228>
    d262:	2b00      	cmp	r3, #0
    d264:	d058      	beq.n	d318 <__aeabi_fadd+0x308>
    d266:	2f00      	cmp	r7, #0
    d268:	d100      	bne.n	d26c <__aeabi_fadd+0x25c>
    d26a:	e70c      	b.n	d086 <__aeabi_fadd+0x76>
    d26c:	4463      	add	r3, ip
    d26e:	015a      	lsls	r2, r3, #5
    d270:	d400      	bmi.n	d274 <__aeabi_fadd+0x264>
    d272:	e739      	b.n	d0e8 <__aeabi_fadd+0xd8>
    d274:	4a2e      	ldr	r2, [pc, #184]	; (d330 <__aeabi_fadd+0x320>)
    d276:	000c      	movs	r4, r1
    d278:	4013      	ands	r3, r2
    d27a:	e704      	b.n	d086 <__aeabi_fadd+0x76>
    d27c:	2101      	movs	r1, #1
    d27e:	e75c      	b.n	d13a <__aeabi_fadd+0x12a>
    d280:	2c00      	cmp	r4, #0
    d282:	d11e      	bne.n	d2c2 <__aeabi_fadd+0x2b2>
    d284:	2b00      	cmp	r3, #0
    d286:	d040      	beq.n	d30a <__aeabi_fadd+0x2fa>
    d288:	43c9      	mvns	r1, r1
    d28a:	2900      	cmp	r1, #0
    d28c:	d00b      	beq.n	d2a6 <__aeabi_fadd+0x296>
    d28e:	28ff      	cmp	r0, #255	; 0xff
    d290:	d036      	beq.n	d300 <__aeabi_fadd+0x2f0>
    d292:	291b      	cmp	r1, #27
    d294:	dc47      	bgt.n	d326 <__aeabi_fadd+0x316>
    d296:	001c      	movs	r4, r3
    d298:	2620      	movs	r6, #32
    d29a:	40cc      	lsrs	r4, r1
    d29c:	1a71      	subs	r1, r6, r1
    d29e:	408b      	lsls	r3, r1
    d2a0:	1e59      	subs	r1, r3, #1
    d2a2:	418b      	sbcs	r3, r1
    d2a4:	4323      	orrs	r3, r4
    d2a6:	4463      	add	r3, ip
    d2a8:	0004      	movs	r4, r0
    d2aa:	e747      	b.n	d13c <__aeabi_fadd+0x12c>
    d2ac:	2b00      	cmp	r3, #0
    d2ae:	d118      	bne.n	d2e2 <__aeabi_fadd+0x2d2>
    d2b0:	1e3b      	subs	r3, r7, #0
    d2b2:	d02d      	beq.n	d310 <__aeabi_fadd+0x300>
    d2b4:	000d      	movs	r5, r1
    d2b6:	24ff      	movs	r4, #255	; 0xff
    d2b8:	e6e5      	b.n	d086 <__aeabi_fadd+0x76>
    d2ba:	003b      	movs	r3, r7
    d2bc:	0004      	movs	r4, r0
    d2be:	000d      	movs	r5, r1
    d2c0:	e6e1      	b.n	d086 <__aeabi_fadd+0x76>
    d2c2:	28ff      	cmp	r0, #255	; 0xff
    d2c4:	d01c      	beq.n	d300 <__aeabi_fadd+0x2f0>
    d2c6:	2480      	movs	r4, #128	; 0x80
    d2c8:	04e4      	lsls	r4, r4, #19
    d2ca:	4249      	negs	r1, r1
    d2cc:	4323      	orrs	r3, r4
    d2ce:	e7e0      	b.n	d292 <__aeabi_fadd+0x282>
    d2d0:	2f00      	cmp	r7, #0
    d2d2:	d100      	bne.n	d2d6 <__aeabi_fadd+0x2c6>
    d2d4:	e6d7      	b.n	d086 <__aeabi_fadd+0x76>
    d2d6:	1bde      	subs	r6, r3, r7
    d2d8:	0172      	lsls	r2, r6, #5
    d2da:	d51f      	bpl.n	d31c <__aeabi_fadd+0x30c>
    d2dc:	1afb      	subs	r3, r7, r3
    d2de:	000d      	movs	r5, r1
    d2e0:	e6d1      	b.n	d086 <__aeabi_fadd+0x76>
    d2e2:	24ff      	movs	r4, #255	; 0xff
    d2e4:	2f00      	cmp	r7, #0
    d2e6:	d100      	bne.n	d2ea <__aeabi_fadd+0x2da>
    d2e8:	e6cd      	b.n	d086 <__aeabi_fadd+0x76>
    d2ea:	2280      	movs	r2, #128	; 0x80
    d2ec:	4640      	mov	r0, r8
    d2ee:	03d2      	lsls	r2, r2, #15
    d2f0:	4210      	tst	r0, r2
    d2f2:	d0af      	beq.n	d254 <__aeabi_fadd+0x244>
    d2f4:	4216      	tst	r6, r2
    d2f6:	d1ad      	bne.n	d254 <__aeabi_fadd+0x244>
    d2f8:	003b      	movs	r3, r7
    d2fa:	000d      	movs	r5, r1
    d2fc:	24ff      	movs	r4, #255	; 0xff
    d2fe:	e6c2      	b.n	d086 <__aeabi_fadd+0x76>
    d300:	4663      	mov	r3, ip
    d302:	24ff      	movs	r4, #255	; 0xff
    d304:	e6bf      	b.n	d086 <__aeabi_fadd+0x76>
    d306:	2301      	movs	r3, #1
    d308:	e77a      	b.n	d200 <__aeabi_fadd+0x1f0>
    d30a:	003b      	movs	r3, r7
    d30c:	0004      	movs	r4, r0
    d30e:	e6ba      	b.n	d086 <__aeabi_fadd+0x76>
    d310:	2680      	movs	r6, #128	; 0x80
    d312:	2200      	movs	r2, #0
    d314:	03f6      	lsls	r6, r6, #15
    d316:	e6f0      	b.n	d0fa <__aeabi_fadd+0xea>
    d318:	003b      	movs	r3, r7
    d31a:	e6b4      	b.n	d086 <__aeabi_fadd+0x76>
    d31c:	1e33      	subs	r3, r6, #0
    d31e:	d000      	beq.n	d322 <__aeabi_fadd+0x312>
    d320:	e6e2      	b.n	d0e8 <__aeabi_fadd+0xd8>
    d322:	2200      	movs	r2, #0
    d324:	e721      	b.n	d16a <__aeabi_fadd+0x15a>
    d326:	2301      	movs	r3, #1
    d328:	e7bd      	b.n	d2a6 <__aeabi_fadd+0x296>
    d32a:	46c0      	nop			; (mov r8, r8)
    d32c:	7dffffff 	.word	0x7dffffff
    d330:	fbffffff 	.word	0xfbffffff

0000d334 <__eqsf2>:
    d334:	b570      	push	{r4, r5, r6, lr}
    d336:	0042      	lsls	r2, r0, #1
    d338:	0245      	lsls	r5, r0, #9
    d33a:	024e      	lsls	r6, r1, #9
    d33c:	004c      	lsls	r4, r1, #1
    d33e:	0fc3      	lsrs	r3, r0, #31
    d340:	0a6d      	lsrs	r5, r5, #9
    d342:	0e12      	lsrs	r2, r2, #24
    d344:	0a76      	lsrs	r6, r6, #9
    d346:	0e24      	lsrs	r4, r4, #24
    d348:	0fc9      	lsrs	r1, r1, #31
    d34a:	2001      	movs	r0, #1
    d34c:	2aff      	cmp	r2, #255	; 0xff
    d34e:	d006      	beq.n	d35e <__eqsf2+0x2a>
    d350:	2cff      	cmp	r4, #255	; 0xff
    d352:	d003      	beq.n	d35c <__eqsf2+0x28>
    d354:	42a2      	cmp	r2, r4
    d356:	d101      	bne.n	d35c <__eqsf2+0x28>
    d358:	42b5      	cmp	r5, r6
    d35a:	d006      	beq.n	d36a <__eqsf2+0x36>
    d35c:	bd70      	pop	{r4, r5, r6, pc}
    d35e:	2d00      	cmp	r5, #0
    d360:	d1fc      	bne.n	d35c <__eqsf2+0x28>
    d362:	2cff      	cmp	r4, #255	; 0xff
    d364:	d1fa      	bne.n	d35c <__eqsf2+0x28>
    d366:	2e00      	cmp	r6, #0
    d368:	d1f8      	bne.n	d35c <__eqsf2+0x28>
    d36a:	428b      	cmp	r3, r1
    d36c:	d006      	beq.n	d37c <__eqsf2+0x48>
    d36e:	2001      	movs	r0, #1
    d370:	2a00      	cmp	r2, #0
    d372:	d1f3      	bne.n	d35c <__eqsf2+0x28>
    d374:	0028      	movs	r0, r5
    d376:	1e45      	subs	r5, r0, #1
    d378:	41a8      	sbcs	r0, r5
    d37a:	e7ef      	b.n	d35c <__eqsf2+0x28>
    d37c:	2000      	movs	r0, #0
    d37e:	e7ed      	b.n	d35c <__eqsf2+0x28>

0000d380 <__gesf2>:
    d380:	b5f0      	push	{r4, r5, r6, r7, lr}
    d382:	0042      	lsls	r2, r0, #1
    d384:	0245      	lsls	r5, r0, #9
    d386:	024c      	lsls	r4, r1, #9
    d388:	0fc3      	lsrs	r3, r0, #31
    d38a:	0048      	lsls	r0, r1, #1
    d38c:	0a6d      	lsrs	r5, r5, #9
    d38e:	0e12      	lsrs	r2, r2, #24
    d390:	0a64      	lsrs	r4, r4, #9
    d392:	0e00      	lsrs	r0, r0, #24
    d394:	0fc9      	lsrs	r1, r1, #31
    d396:	2aff      	cmp	r2, #255	; 0xff
    d398:	d01e      	beq.n	d3d8 <__gesf2+0x58>
    d39a:	28ff      	cmp	r0, #255	; 0xff
    d39c:	d021      	beq.n	d3e2 <__gesf2+0x62>
    d39e:	2a00      	cmp	r2, #0
    d3a0:	d10a      	bne.n	d3b8 <__gesf2+0x38>
    d3a2:	426e      	negs	r6, r5
    d3a4:	416e      	adcs	r6, r5
    d3a6:	b2f6      	uxtb	r6, r6
    d3a8:	2800      	cmp	r0, #0
    d3aa:	d10f      	bne.n	d3cc <__gesf2+0x4c>
    d3ac:	2c00      	cmp	r4, #0
    d3ae:	d10d      	bne.n	d3cc <__gesf2+0x4c>
    d3b0:	2000      	movs	r0, #0
    d3b2:	2d00      	cmp	r5, #0
    d3b4:	d009      	beq.n	d3ca <__gesf2+0x4a>
    d3b6:	e005      	b.n	d3c4 <__gesf2+0x44>
    d3b8:	2800      	cmp	r0, #0
    d3ba:	d101      	bne.n	d3c0 <__gesf2+0x40>
    d3bc:	2c00      	cmp	r4, #0
    d3be:	d001      	beq.n	d3c4 <__gesf2+0x44>
    d3c0:	428b      	cmp	r3, r1
    d3c2:	d011      	beq.n	d3e8 <__gesf2+0x68>
    d3c4:	2101      	movs	r1, #1
    d3c6:	4258      	negs	r0, r3
    d3c8:	4308      	orrs	r0, r1
    d3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3cc:	2e00      	cmp	r6, #0
    d3ce:	d0f7      	beq.n	d3c0 <__gesf2+0x40>
    d3d0:	2001      	movs	r0, #1
    d3d2:	3901      	subs	r1, #1
    d3d4:	4308      	orrs	r0, r1
    d3d6:	e7f8      	b.n	d3ca <__gesf2+0x4a>
    d3d8:	2d00      	cmp	r5, #0
    d3da:	d0de      	beq.n	d39a <__gesf2+0x1a>
    d3dc:	2002      	movs	r0, #2
    d3de:	4240      	negs	r0, r0
    d3e0:	e7f3      	b.n	d3ca <__gesf2+0x4a>
    d3e2:	2c00      	cmp	r4, #0
    d3e4:	d0db      	beq.n	d39e <__gesf2+0x1e>
    d3e6:	e7f9      	b.n	d3dc <__gesf2+0x5c>
    d3e8:	4282      	cmp	r2, r0
    d3ea:	dceb      	bgt.n	d3c4 <__gesf2+0x44>
    d3ec:	db04      	blt.n	d3f8 <__gesf2+0x78>
    d3ee:	42a5      	cmp	r5, r4
    d3f0:	d8e8      	bhi.n	d3c4 <__gesf2+0x44>
    d3f2:	2000      	movs	r0, #0
    d3f4:	42a5      	cmp	r5, r4
    d3f6:	d2e8      	bcs.n	d3ca <__gesf2+0x4a>
    d3f8:	2101      	movs	r1, #1
    d3fa:	1e58      	subs	r0, r3, #1
    d3fc:	4308      	orrs	r0, r1
    d3fe:	e7e4      	b.n	d3ca <__gesf2+0x4a>

0000d400 <__lesf2>:
    d400:	b5f0      	push	{r4, r5, r6, r7, lr}
    d402:	0042      	lsls	r2, r0, #1
    d404:	024d      	lsls	r5, r1, #9
    d406:	004c      	lsls	r4, r1, #1
    d408:	0246      	lsls	r6, r0, #9
    d40a:	0a76      	lsrs	r6, r6, #9
    d40c:	0e12      	lsrs	r2, r2, #24
    d40e:	0fc3      	lsrs	r3, r0, #31
    d410:	0a6d      	lsrs	r5, r5, #9
    d412:	0e24      	lsrs	r4, r4, #24
    d414:	0fc9      	lsrs	r1, r1, #31
    d416:	2aff      	cmp	r2, #255	; 0xff
    d418:	d016      	beq.n	d448 <__lesf2+0x48>
    d41a:	2cff      	cmp	r4, #255	; 0xff
    d41c:	d018      	beq.n	d450 <__lesf2+0x50>
    d41e:	2a00      	cmp	r2, #0
    d420:	d10a      	bne.n	d438 <__lesf2+0x38>
    d422:	4270      	negs	r0, r6
    d424:	4170      	adcs	r0, r6
    d426:	b2c0      	uxtb	r0, r0
    d428:	2c00      	cmp	r4, #0
    d42a:	d015      	beq.n	d458 <__lesf2+0x58>
    d42c:	2800      	cmp	r0, #0
    d42e:	d005      	beq.n	d43c <__lesf2+0x3c>
    d430:	2001      	movs	r0, #1
    d432:	3901      	subs	r1, #1
    d434:	4308      	orrs	r0, r1
    d436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d438:	2c00      	cmp	r4, #0
    d43a:	d013      	beq.n	d464 <__lesf2+0x64>
    d43c:	4299      	cmp	r1, r3
    d43e:	d014      	beq.n	d46a <__lesf2+0x6a>
    d440:	2001      	movs	r0, #1
    d442:	425b      	negs	r3, r3
    d444:	4318      	orrs	r0, r3
    d446:	e7f6      	b.n	d436 <__lesf2+0x36>
    d448:	2002      	movs	r0, #2
    d44a:	2e00      	cmp	r6, #0
    d44c:	d1f3      	bne.n	d436 <__lesf2+0x36>
    d44e:	e7e4      	b.n	d41a <__lesf2+0x1a>
    d450:	2002      	movs	r0, #2
    d452:	2d00      	cmp	r5, #0
    d454:	d1ef      	bne.n	d436 <__lesf2+0x36>
    d456:	e7e2      	b.n	d41e <__lesf2+0x1e>
    d458:	2d00      	cmp	r5, #0
    d45a:	d1e7      	bne.n	d42c <__lesf2+0x2c>
    d45c:	2000      	movs	r0, #0
    d45e:	2e00      	cmp	r6, #0
    d460:	d0e9      	beq.n	d436 <__lesf2+0x36>
    d462:	e7ed      	b.n	d440 <__lesf2+0x40>
    d464:	2d00      	cmp	r5, #0
    d466:	d1e9      	bne.n	d43c <__lesf2+0x3c>
    d468:	e7ea      	b.n	d440 <__lesf2+0x40>
    d46a:	42a2      	cmp	r2, r4
    d46c:	dc06      	bgt.n	d47c <__lesf2+0x7c>
    d46e:	dbdf      	blt.n	d430 <__lesf2+0x30>
    d470:	42ae      	cmp	r6, r5
    d472:	d803      	bhi.n	d47c <__lesf2+0x7c>
    d474:	2000      	movs	r0, #0
    d476:	42ae      	cmp	r6, r5
    d478:	d3da      	bcc.n	d430 <__lesf2+0x30>
    d47a:	e7dc      	b.n	d436 <__lesf2+0x36>
    d47c:	2001      	movs	r0, #1
    d47e:	4249      	negs	r1, r1
    d480:	4308      	orrs	r0, r1
    d482:	e7d8      	b.n	d436 <__lesf2+0x36>

0000d484 <__aeabi_fsub>:
    d484:	b5f0      	push	{r4, r5, r6, r7, lr}
    d486:	464f      	mov	r7, r9
    d488:	46d6      	mov	lr, sl
    d48a:	4646      	mov	r6, r8
    d48c:	0044      	lsls	r4, r0, #1
    d48e:	b5c0      	push	{r6, r7, lr}
    d490:	0fc2      	lsrs	r2, r0, #31
    d492:	0247      	lsls	r7, r0, #9
    d494:	0248      	lsls	r0, r1, #9
    d496:	0a40      	lsrs	r0, r0, #9
    d498:	4684      	mov	ip, r0
    d49a:	4666      	mov	r6, ip
    d49c:	0a7b      	lsrs	r3, r7, #9
    d49e:	0048      	lsls	r0, r1, #1
    d4a0:	0fc9      	lsrs	r1, r1, #31
    d4a2:	469a      	mov	sl, r3
    d4a4:	0e24      	lsrs	r4, r4, #24
    d4a6:	0015      	movs	r5, r2
    d4a8:	00db      	lsls	r3, r3, #3
    d4aa:	0e00      	lsrs	r0, r0, #24
    d4ac:	4689      	mov	r9, r1
    d4ae:	00f6      	lsls	r6, r6, #3
    d4b0:	28ff      	cmp	r0, #255	; 0xff
    d4b2:	d100      	bne.n	d4b6 <__aeabi_fsub+0x32>
    d4b4:	e08f      	b.n	d5d6 <__aeabi_fsub+0x152>
    d4b6:	2101      	movs	r1, #1
    d4b8:	464f      	mov	r7, r9
    d4ba:	404f      	eors	r7, r1
    d4bc:	0039      	movs	r1, r7
    d4be:	4291      	cmp	r1, r2
    d4c0:	d066      	beq.n	d590 <__aeabi_fsub+0x10c>
    d4c2:	1a22      	subs	r2, r4, r0
    d4c4:	2a00      	cmp	r2, #0
    d4c6:	dc00      	bgt.n	d4ca <__aeabi_fsub+0x46>
    d4c8:	e09d      	b.n	d606 <__aeabi_fsub+0x182>
    d4ca:	2800      	cmp	r0, #0
    d4cc:	d13d      	bne.n	d54a <__aeabi_fsub+0xc6>
    d4ce:	2e00      	cmp	r6, #0
    d4d0:	d100      	bne.n	d4d4 <__aeabi_fsub+0x50>
    d4d2:	e08b      	b.n	d5ec <__aeabi_fsub+0x168>
    d4d4:	1e51      	subs	r1, r2, #1
    d4d6:	2900      	cmp	r1, #0
    d4d8:	d000      	beq.n	d4dc <__aeabi_fsub+0x58>
    d4da:	e0b5      	b.n	d648 <__aeabi_fsub+0x1c4>
    d4dc:	2401      	movs	r4, #1
    d4de:	1b9b      	subs	r3, r3, r6
    d4e0:	015a      	lsls	r2, r3, #5
    d4e2:	d544      	bpl.n	d56e <__aeabi_fsub+0xea>
    d4e4:	019b      	lsls	r3, r3, #6
    d4e6:	099f      	lsrs	r7, r3, #6
    d4e8:	0038      	movs	r0, r7
    d4ea:	f000 facd 	bl	da88 <__clzsi2>
    d4ee:	3805      	subs	r0, #5
    d4f0:	4087      	lsls	r7, r0
    d4f2:	4284      	cmp	r4, r0
    d4f4:	dd00      	ble.n	d4f8 <__aeabi_fsub+0x74>
    d4f6:	e096      	b.n	d626 <__aeabi_fsub+0x1a2>
    d4f8:	1b04      	subs	r4, r0, r4
    d4fa:	003a      	movs	r2, r7
    d4fc:	2020      	movs	r0, #32
    d4fe:	3401      	adds	r4, #1
    d500:	40e2      	lsrs	r2, r4
    d502:	1b04      	subs	r4, r0, r4
    d504:	40a7      	lsls	r7, r4
    d506:	003b      	movs	r3, r7
    d508:	1e5f      	subs	r7, r3, #1
    d50a:	41bb      	sbcs	r3, r7
    d50c:	2400      	movs	r4, #0
    d50e:	4313      	orrs	r3, r2
    d510:	075a      	lsls	r2, r3, #29
    d512:	d004      	beq.n	d51e <__aeabi_fsub+0x9a>
    d514:	220f      	movs	r2, #15
    d516:	401a      	ands	r2, r3
    d518:	2a04      	cmp	r2, #4
    d51a:	d000      	beq.n	d51e <__aeabi_fsub+0x9a>
    d51c:	3304      	adds	r3, #4
    d51e:	015a      	lsls	r2, r3, #5
    d520:	d527      	bpl.n	d572 <__aeabi_fsub+0xee>
    d522:	3401      	adds	r4, #1
    d524:	2cff      	cmp	r4, #255	; 0xff
    d526:	d100      	bne.n	d52a <__aeabi_fsub+0xa6>
    d528:	e079      	b.n	d61e <__aeabi_fsub+0x19a>
    d52a:	2201      	movs	r2, #1
    d52c:	019b      	lsls	r3, r3, #6
    d52e:	0a5b      	lsrs	r3, r3, #9
    d530:	b2e4      	uxtb	r4, r4
    d532:	402a      	ands	r2, r5
    d534:	025b      	lsls	r3, r3, #9
    d536:	05e4      	lsls	r4, r4, #23
    d538:	0a58      	lsrs	r0, r3, #9
    d53a:	07d2      	lsls	r2, r2, #31
    d53c:	4320      	orrs	r0, r4
    d53e:	4310      	orrs	r0, r2
    d540:	bc1c      	pop	{r2, r3, r4}
    d542:	4690      	mov	r8, r2
    d544:	4699      	mov	r9, r3
    d546:	46a2      	mov	sl, r4
    d548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d54a:	2cff      	cmp	r4, #255	; 0xff
    d54c:	d0e0      	beq.n	d510 <__aeabi_fsub+0x8c>
    d54e:	2180      	movs	r1, #128	; 0x80
    d550:	04c9      	lsls	r1, r1, #19
    d552:	430e      	orrs	r6, r1
    d554:	2a1b      	cmp	r2, #27
    d556:	dc7b      	bgt.n	d650 <__aeabi_fsub+0x1cc>
    d558:	0031      	movs	r1, r6
    d55a:	2020      	movs	r0, #32
    d55c:	40d1      	lsrs	r1, r2
    d55e:	1a82      	subs	r2, r0, r2
    d560:	4096      	lsls	r6, r2
    d562:	1e72      	subs	r2, r6, #1
    d564:	4196      	sbcs	r6, r2
    d566:	430e      	orrs	r6, r1
    d568:	1b9b      	subs	r3, r3, r6
    d56a:	015a      	lsls	r2, r3, #5
    d56c:	d4ba      	bmi.n	d4e4 <__aeabi_fsub+0x60>
    d56e:	075a      	lsls	r2, r3, #29
    d570:	d1d0      	bne.n	d514 <__aeabi_fsub+0x90>
    d572:	2201      	movs	r2, #1
    d574:	08df      	lsrs	r7, r3, #3
    d576:	402a      	ands	r2, r5
    d578:	2cff      	cmp	r4, #255	; 0xff
    d57a:	d133      	bne.n	d5e4 <__aeabi_fsub+0x160>
    d57c:	2f00      	cmp	r7, #0
    d57e:	d100      	bne.n	d582 <__aeabi_fsub+0xfe>
    d580:	e0a8      	b.n	d6d4 <__aeabi_fsub+0x250>
    d582:	2380      	movs	r3, #128	; 0x80
    d584:	03db      	lsls	r3, r3, #15
    d586:	433b      	orrs	r3, r7
    d588:	025b      	lsls	r3, r3, #9
    d58a:	0a5b      	lsrs	r3, r3, #9
    d58c:	24ff      	movs	r4, #255	; 0xff
    d58e:	e7d1      	b.n	d534 <__aeabi_fsub+0xb0>
    d590:	1a21      	subs	r1, r4, r0
    d592:	2900      	cmp	r1, #0
    d594:	dd4c      	ble.n	d630 <__aeabi_fsub+0x1ac>
    d596:	2800      	cmp	r0, #0
    d598:	d02a      	beq.n	d5f0 <__aeabi_fsub+0x16c>
    d59a:	2cff      	cmp	r4, #255	; 0xff
    d59c:	d0b8      	beq.n	d510 <__aeabi_fsub+0x8c>
    d59e:	2080      	movs	r0, #128	; 0x80
    d5a0:	04c0      	lsls	r0, r0, #19
    d5a2:	4306      	orrs	r6, r0
    d5a4:	291b      	cmp	r1, #27
    d5a6:	dd00      	ble.n	d5aa <__aeabi_fsub+0x126>
    d5a8:	e0af      	b.n	d70a <__aeabi_fsub+0x286>
    d5aa:	0030      	movs	r0, r6
    d5ac:	2720      	movs	r7, #32
    d5ae:	40c8      	lsrs	r0, r1
    d5b0:	1a79      	subs	r1, r7, r1
    d5b2:	408e      	lsls	r6, r1
    d5b4:	1e71      	subs	r1, r6, #1
    d5b6:	418e      	sbcs	r6, r1
    d5b8:	4306      	orrs	r6, r0
    d5ba:	199b      	adds	r3, r3, r6
    d5bc:	0159      	lsls	r1, r3, #5
    d5be:	d5d6      	bpl.n	d56e <__aeabi_fsub+0xea>
    d5c0:	3401      	adds	r4, #1
    d5c2:	2cff      	cmp	r4, #255	; 0xff
    d5c4:	d100      	bne.n	d5c8 <__aeabi_fsub+0x144>
    d5c6:	e085      	b.n	d6d4 <__aeabi_fsub+0x250>
    d5c8:	2201      	movs	r2, #1
    d5ca:	497a      	ldr	r1, [pc, #488]	; (d7b4 <__aeabi_fsub+0x330>)
    d5cc:	401a      	ands	r2, r3
    d5ce:	085b      	lsrs	r3, r3, #1
    d5d0:	400b      	ands	r3, r1
    d5d2:	4313      	orrs	r3, r2
    d5d4:	e79c      	b.n	d510 <__aeabi_fsub+0x8c>
    d5d6:	2e00      	cmp	r6, #0
    d5d8:	d000      	beq.n	d5dc <__aeabi_fsub+0x158>
    d5da:	e770      	b.n	d4be <__aeabi_fsub+0x3a>
    d5dc:	e76b      	b.n	d4b6 <__aeabi_fsub+0x32>
    d5de:	1e3b      	subs	r3, r7, #0
    d5e0:	d1c5      	bne.n	d56e <__aeabi_fsub+0xea>
    d5e2:	2200      	movs	r2, #0
    d5e4:	027b      	lsls	r3, r7, #9
    d5e6:	0a5b      	lsrs	r3, r3, #9
    d5e8:	b2e4      	uxtb	r4, r4
    d5ea:	e7a3      	b.n	d534 <__aeabi_fsub+0xb0>
    d5ec:	0014      	movs	r4, r2
    d5ee:	e78f      	b.n	d510 <__aeabi_fsub+0x8c>
    d5f0:	2e00      	cmp	r6, #0
    d5f2:	d04d      	beq.n	d690 <__aeabi_fsub+0x20c>
    d5f4:	1e48      	subs	r0, r1, #1
    d5f6:	2800      	cmp	r0, #0
    d5f8:	d157      	bne.n	d6aa <__aeabi_fsub+0x226>
    d5fa:	199b      	adds	r3, r3, r6
    d5fc:	2401      	movs	r4, #1
    d5fe:	015a      	lsls	r2, r3, #5
    d600:	d5b5      	bpl.n	d56e <__aeabi_fsub+0xea>
    d602:	2402      	movs	r4, #2
    d604:	e7e0      	b.n	d5c8 <__aeabi_fsub+0x144>
    d606:	2a00      	cmp	r2, #0
    d608:	d125      	bne.n	d656 <__aeabi_fsub+0x1d2>
    d60a:	1c62      	adds	r2, r4, #1
    d60c:	b2d2      	uxtb	r2, r2
    d60e:	2a01      	cmp	r2, #1
    d610:	dd72      	ble.n	d6f8 <__aeabi_fsub+0x274>
    d612:	1b9f      	subs	r7, r3, r6
    d614:	017a      	lsls	r2, r7, #5
    d616:	d535      	bpl.n	d684 <__aeabi_fsub+0x200>
    d618:	1af7      	subs	r7, r6, r3
    d61a:	000d      	movs	r5, r1
    d61c:	e764      	b.n	d4e8 <__aeabi_fsub+0x64>
    d61e:	2201      	movs	r2, #1
    d620:	2300      	movs	r3, #0
    d622:	402a      	ands	r2, r5
    d624:	e786      	b.n	d534 <__aeabi_fsub+0xb0>
    d626:	003b      	movs	r3, r7
    d628:	4a63      	ldr	r2, [pc, #396]	; (d7b8 <__aeabi_fsub+0x334>)
    d62a:	1a24      	subs	r4, r4, r0
    d62c:	4013      	ands	r3, r2
    d62e:	e76f      	b.n	d510 <__aeabi_fsub+0x8c>
    d630:	2900      	cmp	r1, #0
    d632:	d16c      	bne.n	d70e <__aeabi_fsub+0x28a>
    d634:	1c61      	adds	r1, r4, #1
    d636:	b2c8      	uxtb	r0, r1
    d638:	2801      	cmp	r0, #1
    d63a:	dd4e      	ble.n	d6da <__aeabi_fsub+0x256>
    d63c:	29ff      	cmp	r1, #255	; 0xff
    d63e:	d049      	beq.n	d6d4 <__aeabi_fsub+0x250>
    d640:	199b      	adds	r3, r3, r6
    d642:	085b      	lsrs	r3, r3, #1
    d644:	000c      	movs	r4, r1
    d646:	e763      	b.n	d510 <__aeabi_fsub+0x8c>
    d648:	2aff      	cmp	r2, #255	; 0xff
    d64a:	d041      	beq.n	d6d0 <__aeabi_fsub+0x24c>
    d64c:	000a      	movs	r2, r1
    d64e:	e781      	b.n	d554 <__aeabi_fsub+0xd0>
    d650:	2601      	movs	r6, #1
    d652:	1b9b      	subs	r3, r3, r6
    d654:	e789      	b.n	d56a <__aeabi_fsub+0xe6>
    d656:	2c00      	cmp	r4, #0
    d658:	d01c      	beq.n	d694 <__aeabi_fsub+0x210>
    d65a:	28ff      	cmp	r0, #255	; 0xff
    d65c:	d021      	beq.n	d6a2 <__aeabi_fsub+0x21e>
    d65e:	2480      	movs	r4, #128	; 0x80
    d660:	04e4      	lsls	r4, r4, #19
    d662:	4252      	negs	r2, r2
    d664:	4323      	orrs	r3, r4
    d666:	2a1b      	cmp	r2, #27
    d668:	dd00      	ble.n	d66c <__aeabi_fsub+0x1e8>
    d66a:	e096      	b.n	d79a <__aeabi_fsub+0x316>
    d66c:	001c      	movs	r4, r3
    d66e:	2520      	movs	r5, #32
    d670:	40d4      	lsrs	r4, r2
    d672:	1aaa      	subs	r2, r5, r2
    d674:	4093      	lsls	r3, r2
    d676:	1e5a      	subs	r2, r3, #1
    d678:	4193      	sbcs	r3, r2
    d67a:	4323      	orrs	r3, r4
    d67c:	1af3      	subs	r3, r6, r3
    d67e:	0004      	movs	r4, r0
    d680:	000d      	movs	r5, r1
    d682:	e72d      	b.n	d4e0 <__aeabi_fsub+0x5c>
    d684:	2f00      	cmp	r7, #0
    d686:	d000      	beq.n	d68a <__aeabi_fsub+0x206>
    d688:	e72e      	b.n	d4e8 <__aeabi_fsub+0x64>
    d68a:	2200      	movs	r2, #0
    d68c:	2400      	movs	r4, #0
    d68e:	e7a9      	b.n	d5e4 <__aeabi_fsub+0x160>
    d690:	000c      	movs	r4, r1
    d692:	e73d      	b.n	d510 <__aeabi_fsub+0x8c>
    d694:	2b00      	cmp	r3, #0
    d696:	d058      	beq.n	d74a <__aeabi_fsub+0x2c6>
    d698:	43d2      	mvns	r2, r2
    d69a:	2a00      	cmp	r2, #0
    d69c:	d0ee      	beq.n	d67c <__aeabi_fsub+0x1f8>
    d69e:	28ff      	cmp	r0, #255	; 0xff
    d6a0:	d1e1      	bne.n	d666 <__aeabi_fsub+0x1e2>
    d6a2:	0033      	movs	r3, r6
    d6a4:	24ff      	movs	r4, #255	; 0xff
    d6a6:	000d      	movs	r5, r1
    d6a8:	e732      	b.n	d510 <__aeabi_fsub+0x8c>
    d6aa:	29ff      	cmp	r1, #255	; 0xff
    d6ac:	d010      	beq.n	d6d0 <__aeabi_fsub+0x24c>
    d6ae:	0001      	movs	r1, r0
    d6b0:	e778      	b.n	d5a4 <__aeabi_fsub+0x120>
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d06e      	beq.n	d794 <__aeabi_fsub+0x310>
    d6b6:	24ff      	movs	r4, #255	; 0xff
    d6b8:	2e00      	cmp	r6, #0
    d6ba:	d100      	bne.n	d6be <__aeabi_fsub+0x23a>
    d6bc:	e728      	b.n	d510 <__aeabi_fsub+0x8c>
    d6be:	2280      	movs	r2, #128	; 0x80
    d6c0:	4651      	mov	r1, sl
    d6c2:	03d2      	lsls	r2, r2, #15
    d6c4:	4211      	tst	r1, r2
    d6c6:	d003      	beq.n	d6d0 <__aeabi_fsub+0x24c>
    d6c8:	4661      	mov	r1, ip
    d6ca:	4211      	tst	r1, r2
    d6cc:	d100      	bne.n	d6d0 <__aeabi_fsub+0x24c>
    d6ce:	0033      	movs	r3, r6
    d6d0:	24ff      	movs	r4, #255	; 0xff
    d6d2:	e71d      	b.n	d510 <__aeabi_fsub+0x8c>
    d6d4:	24ff      	movs	r4, #255	; 0xff
    d6d6:	2300      	movs	r3, #0
    d6d8:	e72c      	b.n	d534 <__aeabi_fsub+0xb0>
    d6da:	2c00      	cmp	r4, #0
    d6dc:	d1e9      	bne.n	d6b2 <__aeabi_fsub+0x22e>
    d6de:	2b00      	cmp	r3, #0
    d6e0:	d063      	beq.n	d7aa <__aeabi_fsub+0x326>
    d6e2:	2e00      	cmp	r6, #0
    d6e4:	d100      	bne.n	d6e8 <__aeabi_fsub+0x264>
    d6e6:	e713      	b.n	d510 <__aeabi_fsub+0x8c>
    d6e8:	199b      	adds	r3, r3, r6
    d6ea:	015a      	lsls	r2, r3, #5
    d6ec:	d400      	bmi.n	d6f0 <__aeabi_fsub+0x26c>
    d6ee:	e73e      	b.n	d56e <__aeabi_fsub+0xea>
    d6f0:	4a31      	ldr	r2, [pc, #196]	; (d7b8 <__aeabi_fsub+0x334>)
    d6f2:	000c      	movs	r4, r1
    d6f4:	4013      	ands	r3, r2
    d6f6:	e70b      	b.n	d510 <__aeabi_fsub+0x8c>
    d6f8:	2c00      	cmp	r4, #0
    d6fa:	d11e      	bne.n	d73a <__aeabi_fsub+0x2b6>
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d12f      	bne.n	d760 <__aeabi_fsub+0x2dc>
    d700:	2e00      	cmp	r6, #0
    d702:	d04f      	beq.n	d7a4 <__aeabi_fsub+0x320>
    d704:	0033      	movs	r3, r6
    d706:	000d      	movs	r5, r1
    d708:	e702      	b.n	d510 <__aeabi_fsub+0x8c>
    d70a:	2601      	movs	r6, #1
    d70c:	e755      	b.n	d5ba <__aeabi_fsub+0x136>
    d70e:	2c00      	cmp	r4, #0
    d710:	d11f      	bne.n	d752 <__aeabi_fsub+0x2ce>
    d712:	2b00      	cmp	r3, #0
    d714:	d043      	beq.n	d79e <__aeabi_fsub+0x31a>
    d716:	43c9      	mvns	r1, r1
    d718:	2900      	cmp	r1, #0
    d71a:	d00b      	beq.n	d734 <__aeabi_fsub+0x2b0>
    d71c:	28ff      	cmp	r0, #255	; 0xff
    d71e:	d039      	beq.n	d794 <__aeabi_fsub+0x310>
    d720:	291b      	cmp	r1, #27
    d722:	dc44      	bgt.n	d7ae <__aeabi_fsub+0x32a>
    d724:	001c      	movs	r4, r3
    d726:	2720      	movs	r7, #32
    d728:	40cc      	lsrs	r4, r1
    d72a:	1a79      	subs	r1, r7, r1
    d72c:	408b      	lsls	r3, r1
    d72e:	1e59      	subs	r1, r3, #1
    d730:	418b      	sbcs	r3, r1
    d732:	4323      	orrs	r3, r4
    d734:	199b      	adds	r3, r3, r6
    d736:	0004      	movs	r4, r0
    d738:	e740      	b.n	d5bc <__aeabi_fsub+0x138>
    d73a:	2b00      	cmp	r3, #0
    d73c:	d11a      	bne.n	d774 <__aeabi_fsub+0x2f0>
    d73e:	2e00      	cmp	r6, #0
    d740:	d124      	bne.n	d78c <__aeabi_fsub+0x308>
    d742:	2780      	movs	r7, #128	; 0x80
    d744:	2200      	movs	r2, #0
    d746:	03ff      	lsls	r7, r7, #15
    d748:	e71b      	b.n	d582 <__aeabi_fsub+0xfe>
    d74a:	0033      	movs	r3, r6
    d74c:	0004      	movs	r4, r0
    d74e:	000d      	movs	r5, r1
    d750:	e6de      	b.n	d510 <__aeabi_fsub+0x8c>
    d752:	28ff      	cmp	r0, #255	; 0xff
    d754:	d01e      	beq.n	d794 <__aeabi_fsub+0x310>
    d756:	2480      	movs	r4, #128	; 0x80
    d758:	04e4      	lsls	r4, r4, #19
    d75a:	4249      	negs	r1, r1
    d75c:	4323      	orrs	r3, r4
    d75e:	e7df      	b.n	d720 <__aeabi_fsub+0x29c>
    d760:	2e00      	cmp	r6, #0
    d762:	d100      	bne.n	d766 <__aeabi_fsub+0x2e2>
    d764:	e6d4      	b.n	d510 <__aeabi_fsub+0x8c>
    d766:	1b9f      	subs	r7, r3, r6
    d768:	017a      	lsls	r2, r7, #5
    d76a:	d400      	bmi.n	d76e <__aeabi_fsub+0x2ea>
    d76c:	e737      	b.n	d5de <__aeabi_fsub+0x15a>
    d76e:	1af3      	subs	r3, r6, r3
    d770:	000d      	movs	r5, r1
    d772:	e6cd      	b.n	d510 <__aeabi_fsub+0x8c>
    d774:	24ff      	movs	r4, #255	; 0xff
    d776:	2e00      	cmp	r6, #0
    d778:	d100      	bne.n	d77c <__aeabi_fsub+0x2f8>
    d77a:	e6c9      	b.n	d510 <__aeabi_fsub+0x8c>
    d77c:	2280      	movs	r2, #128	; 0x80
    d77e:	4650      	mov	r0, sl
    d780:	03d2      	lsls	r2, r2, #15
    d782:	4210      	tst	r0, r2
    d784:	d0a4      	beq.n	d6d0 <__aeabi_fsub+0x24c>
    d786:	4660      	mov	r0, ip
    d788:	4210      	tst	r0, r2
    d78a:	d1a1      	bne.n	d6d0 <__aeabi_fsub+0x24c>
    d78c:	0033      	movs	r3, r6
    d78e:	000d      	movs	r5, r1
    d790:	24ff      	movs	r4, #255	; 0xff
    d792:	e6bd      	b.n	d510 <__aeabi_fsub+0x8c>
    d794:	0033      	movs	r3, r6
    d796:	24ff      	movs	r4, #255	; 0xff
    d798:	e6ba      	b.n	d510 <__aeabi_fsub+0x8c>
    d79a:	2301      	movs	r3, #1
    d79c:	e76e      	b.n	d67c <__aeabi_fsub+0x1f8>
    d79e:	0033      	movs	r3, r6
    d7a0:	0004      	movs	r4, r0
    d7a2:	e6b5      	b.n	d510 <__aeabi_fsub+0x8c>
    d7a4:	2700      	movs	r7, #0
    d7a6:	2200      	movs	r2, #0
    d7a8:	e71c      	b.n	d5e4 <__aeabi_fsub+0x160>
    d7aa:	0033      	movs	r3, r6
    d7ac:	e6b0      	b.n	d510 <__aeabi_fsub+0x8c>
    d7ae:	2301      	movs	r3, #1
    d7b0:	e7c0      	b.n	d734 <__aeabi_fsub+0x2b0>
    d7b2:	46c0      	nop			; (mov r8, r8)
    d7b4:	7dffffff 	.word	0x7dffffff
    d7b8:	fbffffff 	.word	0xfbffffff

0000d7bc <__aeabi_f2iz>:
    d7bc:	0241      	lsls	r1, r0, #9
    d7be:	0043      	lsls	r3, r0, #1
    d7c0:	0fc2      	lsrs	r2, r0, #31
    d7c2:	0a49      	lsrs	r1, r1, #9
    d7c4:	0e1b      	lsrs	r3, r3, #24
    d7c6:	2000      	movs	r0, #0
    d7c8:	2b7e      	cmp	r3, #126	; 0x7e
    d7ca:	dd0d      	ble.n	d7e8 <__aeabi_f2iz+0x2c>
    d7cc:	2b9d      	cmp	r3, #157	; 0x9d
    d7ce:	dc0c      	bgt.n	d7ea <__aeabi_f2iz+0x2e>
    d7d0:	2080      	movs	r0, #128	; 0x80
    d7d2:	0400      	lsls	r0, r0, #16
    d7d4:	4301      	orrs	r1, r0
    d7d6:	2b95      	cmp	r3, #149	; 0x95
    d7d8:	dc0a      	bgt.n	d7f0 <__aeabi_f2iz+0x34>
    d7da:	2096      	movs	r0, #150	; 0x96
    d7dc:	1ac3      	subs	r3, r0, r3
    d7de:	40d9      	lsrs	r1, r3
    d7e0:	4248      	negs	r0, r1
    d7e2:	2a00      	cmp	r2, #0
    d7e4:	d100      	bne.n	d7e8 <__aeabi_f2iz+0x2c>
    d7e6:	0008      	movs	r0, r1
    d7e8:	4770      	bx	lr
    d7ea:	4b03      	ldr	r3, [pc, #12]	; (d7f8 <__aeabi_f2iz+0x3c>)
    d7ec:	18d0      	adds	r0, r2, r3
    d7ee:	e7fb      	b.n	d7e8 <__aeabi_f2iz+0x2c>
    d7f0:	3b96      	subs	r3, #150	; 0x96
    d7f2:	4099      	lsls	r1, r3
    d7f4:	e7f4      	b.n	d7e0 <__aeabi_f2iz+0x24>
    d7f6:	46c0      	nop			; (mov r8, r8)
    d7f8:	7fffffff 	.word	0x7fffffff

0000d7fc <__aeabi_ui2f>:
    d7fc:	b510      	push	{r4, lr}
    d7fe:	1e04      	subs	r4, r0, #0
    d800:	d027      	beq.n	d852 <__aeabi_ui2f+0x56>
    d802:	f000 f941 	bl	da88 <__clzsi2>
    d806:	239e      	movs	r3, #158	; 0x9e
    d808:	1a1b      	subs	r3, r3, r0
    d80a:	2b96      	cmp	r3, #150	; 0x96
    d80c:	dc0a      	bgt.n	d824 <__aeabi_ui2f+0x28>
    d80e:	2296      	movs	r2, #150	; 0x96
    d810:	1ad2      	subs	r2, r2, r3
    d812:	4094      	lsls	r4, r2
    d814:	0264      	lsls	r4, r4, #9
    d816:	0a64      	lsrs	r4, r4, #9
    d818:	b2db      	uxtb	r3, r3
    d81a:	0264      	lsls	r4, r4, #9
    d81c:	05db      	lsls	r3, r3, #23
    d81e:	0a60      	lsrs	r0, r4, #9
    d820:	4318      	orrs	r0, r3
    d822:	bd10      	pop	{r4, pc}
    d824:	2b99      	cmp	r3, #153	; 0x99
    d826:	dc17      	bgt.n	d858 <__aeabi_ui2f+0x5c>
    d828:	2299      	movs	r2, #153	; 0x99
    d82a:	1ad2      	subs	r2, r2, r3
    d82c:	2a00      	cmp	r2, #0
    d82e:	dd27      	ble.n	d880 <__aeabi_ui2f+0x84>
    d830:	4094      	lsls	r4, r2
    d832:	0022      	movs	r2, r4
    d834:	4c13      	ldr	r4, [pc, #76]	; (d884 <__aeabi_ui2f+0x88>)
    d836:	4014      	ands	r4, r2
    d838:	0751      	lsls	r1, r2, #29
    d83a:	d004      	beq.n	d846 <__aeabi_ui2f+0x4a>
    d83c:	210f      	movs	r1, #15
    d83e:	400a      	ands	r2, r1
    d840:	2a04      	cmp	r2, #4
    d842:	d000      	beq.n	d846 <__aeabi_ui2f+0x4a>
    d844:	3404      	adds	r4, #4
    d846:	0162      	lsls	r2, r4, #5
    d848:	d412      	bmi.n	d870 <__aeabi_ui2f+0x74>
    d84a:	01a4      	lsls	r4, r4, #6
    d84c:	0a64      	lsrs	r4, r4, #9
    d84e:	b2db      	uxtb	r3, r3
    d850:	e7e3      	b.n	d81a <__aeabi_ui2f+0x1e>
    d852:	2300      	movs	r3, #0
    d854:	2400      	movs	r4, #0
    d856:	e7e0      	b.n	d81a <__aeabi_ui2f+0x1e>
    d858:	22b9      	movs	r2, #185	; 0xb9
    d85a:	0021      	movs	r1, r4
    d85c:	1ad2      	subs	r2, r2, r3
    d85e:	4091      	lsls	r1, r2
    d860:	000a      	movs	r2, r1
    d862:	1e51      	subs	r1, r2, #1
    d864:	418a      	sbcs	r2, r1
    d866:	2105      	movs	r1, #5
    d868:	1a09      	subs	r1, r1, r0
    d86a:	40cc      	lsrs	r4, r1
    d86c:	4314      	orrs	r4, r2
    d86e:	e7db      	b.n	d828 <__aeabi_ui2f+0x2c>
    d870:	4b04      	ldr	r3, [pc, #16]	; (d884 <__aeabi_ui2f+0x88>)
    d872:	401c      	ands	r4, r3
    d874:	239f      	movs	r3, #159	; 0x9f
    d876:	01a4      	lsls	r4, r4, #6
    d878:	1a1b      	subs	r3, r3, r0
    d87a:	0a64      	lsrs	r4, r4, #9
    d87c:	b2db      	uxtb	r3, r3
    d87e:	e7cc      	b.n	d81a <__aeabi_ui2f+0x1e>
    d880:	0022      	movs	r2, r4
    d882:	e7d7      	b.n	d834 <__aeabi_ui2f+0x38>
    d884:	fbffffff 	.word	0xfbffffff

0000d888 <__eqdf2>:
    d888:	b5f0      	push	{r4, r5, r6, r7, lr}
    d88a:	464f      	mov	r7, r9
    d88c:	4646      	mov	r6, r8
    d88e:	46d6      	mov	lr, sl
    d890:	005c      	lsls	r4, r3, #1
    d892:	b5c0      	push	{r6, r7, lr}
    d894:	031f      	lsls	r7, r3, #12
    d896:	0fdb      	lsrs	r3, r3, #31
    d898:	469a      	mov	sl, r3
    d89a:	4b17      	ldr	r3, [pc, #92]	; (d8f8 <__eqdf2+0x70>)
    d89c:	030e      	lsls	r6, r1, #12
    d89e:	004d      	lsls	r5, r1, #1
    d8a0:	4684      	mov	ip, r0
    d8a2:	4680      	mov	r8, r0
    d8a4:	0b36      	lsrs	r6, r6, #12
    d8a6:	0d6d      	lsrs	r5, r5, #21
    d8a8:	0fc9      	lsrs	r1, r1, #31
    d8aa:	4691      	mov	r9, r2
    d8ac:	0b3f      	lsrs	r7, r7, #12
    d8ae:	0d64      	lsrs	r4, r4, #21
    d8b0:	2001      	movs	r0, #1
    d8b2:	429d      	cmp	r5, r3
    d8b4:	d008      	beq.n	d8c8 <__eqdf2+0x40>
    d8b6:	429c      	cmp	r4, r3
    d8b8:	d001      	beq.n	d8be <__eqdf2+0x36>
    d8ba:	42a5      	cmp	r5, r4
    d8bc:	d00b      	beq.n	d8d6 <__eqdf2+0x4e>
    d8be:	bc1c      	pop	{r2, r3, r4}
    d8c0:	4690      	mov	r8, r2
    d8c2:	4699      	mov	r9, r3
    d8c4:	46a2      	mov	sl, r4
    d8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8c8:	4663      	mov	r3, ip
    d8ca:	4333      	orrs	r3, r6
    d8cc:	d1f7      	bne.n	d8be <__eqdf2+0x36>
    d8ce:	42ac      	cmp	r4, r5
    d8d0:	d1f5      	bne.n	d8be <__eqdf2+0x36>
    d8d2:	433a      	orrs	r2, r7
    d8d4:	d1f3      	bne.n	d8be <__eqdf2+0x36>
    d8d6:	2001      	movs	r0, #1
    d8d8:	42be      	cmp	r6, r7
    d8da:	d1f0      	bne.n	d8be <__eqdf2+0x36>
    d8dc:	45c8      	cmp	r8, r9
    d8de:	d1ee      	bne.n	d8be <__eqdf2+0x36>
    d8e0:	4551      	cmp	r1, sl
    d8e2:	d007      	beq.n	d8f4 <__eqdf2+0x6c>
    d8e4:	2d00      	cmp	r5, #0
    d8e6:	d1ea      	bne.n	d8be <__eqdf2+0x36>
    d8e8:	4663      	mov	r3, ip
    d8ea:	431e      	orrs	r6, r3
    d8ec:	0030      	movs	r0, r6
    d8ee:	1e46      	subs	r6, r0, #1
    d8f0:	41b0      	sbcs	r0, r6
    d8f2:	e7e4      	b.n	d8be <__eqdf2+0x36>
    d8f4:	2000      	movs	r0, #0
    d8f6:	e7e2      	b.n	d8be <__eqdf2+0x36>
    d8f8:	000007ff 	.word	0x000007ff

0000d8fc <__gedf2>:
    d8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8fe:	4645      	mov	r5, r8
    d900:	46de      	mov	lr, fp
    d902:	4657      	mov	r7, sl
    d904:	464e      	mov	r6, r9
    d906:	b5e0      	push	{r5, r6, r7, lr}
    d908:	031f      	lsls	r7, r3, #12
    d90a:	0b3d      	lsrs	r5, r7, #12
    d90c:	4f2c      	ldr	r7, [pc, #176]	; (d9c0 <__gedf2+0xc4>)
    d90e:	030e      	lsls	r6, r1, #12
    d910:	004c      	lsls	r4, r1, #1
    d912:	46ab      	mov	fp, r5
    d914:	005d      	lsls	r5, r3, #1
    d916:	4684      	mov	ip, r0
    d918:	0b36      	lsrs	r6, r6, #12
    d91a:	0d64      	lsrs	r4, r4, #21
    d91c:	0fc9      	lsrs	r1, r1, #31
    d91e:	4690      	mov	r8, r2
    d920:	0d6d      	lsrs	r5, r5, #21
    d922:	0fdb      	lsrs	r3, r3, #31
    d924:	42bc      	cmp	r4, r7
    d926:	d02a      	beq.n	d97e <__gedf2+0x82>
    d928:	4f25      	ldr	r7, [pc, #148]	; (d9c0 <__gedf2+0xc4>)
    d92a:	42bd      	cmp	r5, r7
    d92c:	d02d      	beq.n	d98a <__gedf2+0x8e>
    d92e:	2c00      	cmp	r4, #0
    d930:	d10f      	bne.n	d952 <__gedf2+0x56>
    d932:	4330      	orrs	r0, r6
    d934:	0007      	movs	r7, r0
    d936:	4681      	mov	r9, r0
    d938:	4278      	negs	r0, r7
    d93a:	4178      	adcs	r0, r7
    d93c:	b2c0      	uxtb	r0, r0
    d93e:	2d00      	cmp	r5, #0
    d940:	d117      	bne.n	d972 <__gedf2+0x76>
    d942:	465f      	mov	r7, fp
    d944:	433a      	orrs	r2, r7
    d946:	d114      	bne.n	d972 <__gedf2+0x76>
    d948:	464b      	mov	r3, r9
    d94a:	2000      	movs	r0, #0
    d94c:	2b00      	cmp	r3, #0
    d94e:	d00a      	beq.n	d966 <__gedf2+0x6a>
    d950:	e006      	b.n	d960 <__gedf2+0x64>
    d952:	2d00      	cmp	r5, #0
    d954:	d102      	bne.n	d95c <__gedf2+0x60>
    d956:	4658      	mov	r0, fp
    d958:	4302      	orrs	r2, r0
    d95a:	d001      	beq.n	d960 <__gedf2+0x64>
    d95c:	4299      	cmp	r1, r3
    d95e:	d018      	beq.n	d992 <__gedf2+0x96>
    d960:	4248      	negs	r0, r1
    d962:	2101      	movs	r1, #1
    d964:	4308      	orrs	r0, r1
    d966:	bc3c      	pop	{r2, r3, r4, r5}
    d968:	4690      	mov	r8, r2
    d96a:	4699      	mov	r9, r3
    d96c:	46a2      	mov	sl, r4
    d96e:	46ab      	mov	fp, r5
    d970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d972:	2800      	cmp	r0, #0
    d974:	d0f2      	beq.n	d95c <__gedf2+0x60>
    d976:	2001      	movs	r0, #1
    d978:	3b01      	subs	r3, #1
    d97a:	4318      	orrs	r0, r3
    d97c:	e7f3      	b.n	d966 <__gedf2+0x6a>
    d97e:	0037      	movs	r7, r6
    d980:	4307      	orrs	r7, r0
    d982:	d0d1      	beq.n	d928 <__gedf2+0x2c>
    d984:	2002      	movs	r0, #2
    d986:	4240      	negs	r0, r0
    d988:	e7ed      	b.n	d966 <__gedf2+0x6a>
    d98a:	465f      	mov	r7, fp
    d98c:	4317      	orrs	r7, r2
    d98e:	d0ce      	beq.n	d92e <__gedf2+0x32>
    d990:	e7f8      	b.n	d984 <__gedf2+0x88>
    d992:	42ac      	cmp	r4, r5
    d994:	dce4      	bgt.n	d960 <__gedf2+0x64>
    d996:	da03      	bge.n	d9a0 <__gedf2+0xa4>
    d998:	1e48      	subs	r0, r1, #1
    d99a:	2101      	movs	r1, #1
    d99c:	4308      	orrs	r0, r1
    d99e:	e7e2      	b.n	d966 <__gedf2+0x6a>
    d9a0:	455e      	cmp	r6, fp
    d9a2:	d8dd      	bhi.n	d960 <__gedf2+0x64>
    d9a4:	d006      	beq.n	d9b4 <__gedf2+0xb8>
    d9a6:	2000      	movs	r0, #0
    d9a8:	455e      	cmp	r6, fp
    d9aa:	d2dc      	bcs.n	d966 <__gedf2+0x6a>
    d9ac:	2301      	movs	r3, #1
    d9ae:	1e48      	subs	r0, r1, #1
    d9b0:	4318      	orrs	r0, r3
    d9b2:	e7d8      	b.n	d966 <__gedf2+0x6a>
    d9b4:	45c4      	cmp	ip, r8
    d9b6:	d8d3      	bhi.n	d960 <__gedf2+0x64>
    d9b8:	2000      	movs	r0, #0
    d9ba:	45c4      	cmp	ip, r8
    d9bc:	d3f6      	bcc.n	d9ac <__gedf2+0xb0>
    d9be:	e7d2      	b.n	d966 <__gedf2+0x6a>
    d9c0:	000007ff 	.word	0x000007ff

0000d9c4 <__ledf2>:
    d9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9c6:	464e      	mov	r6, r9
    d9c8:	4645      	mov	r5, r8
    d9ca:	46de      	mov	lr, fp
    d9cc:	4657      	mov	r7, sl
    d9ce:	005c      	lsls	r4, r3, #1
    d9d0:	b5e0      	push	{r5, r6, r7, lr}
    d9d2:	031f      	lsls	r7, r3, #12
    d9d4:	0fdb      	lsrs	r3, r3, #31
    d9d6:	4699      	mov	r9, r3
    d9d8:	4b2a      	ldr	r3, [pc, #168]	; (da84 <__ledf2+0xc0>)
    d9da:	030e      	lsls	r6, r1, #12
    d9dc:	004d      	lsls	r5, r1, #1
    d9de:	0fc9      	lsrs	r1, r1, #31
    d9e0:	4684      	mov	ip, r0
    d9e2:	0b36      	lsrs	r6, r6, #12
    d9e4:	0d6d      	lsrs	r5, r5, #21
    d9e6:	468b      	mov	fp, r1
    d9e8:	4690      	mov	r8, r2
    d9ea:	0b3f      	lsrs	r7, r7, #12
    d9ec:	0d64      	lsrs	r4, r4, #21
    d9ee:	429d      	cmp	r5, r3
    d9f0:	d020      	beq.n	da34 <__ledf2+0x70>
    d9f2:	4b24      	ldr	r3, [pc, #144]	; (da84 <__ledf2+0xc0>)
    d9f4:	429c      	cmp	r4, r3
    d9f6:	d022      	beq.n	da3e <__ledf2+0x7a>
    d9f8:	2d00      	cmp	r5, #0
    d9fa:	d112      	bne.n	da22 <__ledf2+0x5e>
    d9fc:	4330      	orrs	r0, r6
    d9fe:	4243      	negs	r3, r0
    da00:	4143      	adcs	r3, r0
    da02:	b2db      	uxtb	r3, r3
    da04:	2c00      	cmp	r4, #0
    da06:	d01f      	beq.n	da48 <__ledf2+0x84>
    da08:	2b00      	cmp	r3, #0
    da0a:	d00c      	beq.n	da26 <__ledf2+0x62>
    da0c:	464b      	mov	r3, r9
    da0e:	2001      	movs	r0, #1
    da10:	3b01      	subs	r3, #1
    da12:	4303      	orrs	r3, r0
    da14:	0018      	movs	r0, r3
    da16:	bc3c      	pop	{r2, r3, r4, r5}
    da18:	4690      	mov	r8, r2
    da1a:	4699      	mov	r9, r3
    da1c:	46a2      	mov	sl, r4
    da1e:	46ab      	mov	fp, r5
    da20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da22:	2c00      	cmp	r4, #0
    da24:	d016      	beq.n	da54 <__ledf2+0x90>
    da26:	45cb      	cmp	fp, r9
    da28:	d017      	beq.n	da5a <__ledf2+0x96>
    da2a:	465b      	mov	r3, fp
    da2c:	4259      	negs	r1, r3
    da2e:	2301      	movs	r3, #1
    da30:	430b      	orrs	r3, r1
    da32:	e7ef      	b.n	da14 <__ledf2+0x50>
    da34:	0031      	movs	r1, r6
    da36:	2302      	movs	r3, #2
    da38:	4301      	orrs	r1, r0
    da3a:	d1eb      	bne.n	da14 <__ledf2+0x50>
    da3c:	e7d9      	b.n	d9f2 <__ledf2+0x2e>
    da3e:	0039      	movs	r1, r7
    da40:	2302      	movs	r3, #2
    da42:	4311      	orrs	r1, r2
    da44:	d1e6      	bne.n	da14 <__ledf2+0x50>
    da46:	e7d7      	b.n	d9f8 <__ledf2+0x34>
    da48:	433a      	orrs	r2, r7
    da4a:	d1dd      	bne.n	da08 <__ledf2+0x44>
    da4c:	2300      	movs	r3, #0
    da4e:	2800      	cmp	r0, #0
    da50:	d0e0      	beq.n	da14 <__ledf2+0x50>
    da52:	e7ea      	b.n	da2a <__ledf2+0x66>
    da54:	433a      	orrs	r2, r7
    da56:	d1e6      	bne.n	da26 <__ledf2+0x62>
    da58:	e7e7      	b.n	da2a <__ledf2+0x66>
    da5a:	42a5      	cmp	r5, r4
    da5c:	dce5      	bgt.n	da2a <__ledf2+0x66>
    da5e:	db05      	blt.n	da6c <__ledf2+0xa8>
    da60:	42be      	cmp	r6, r7
    da62:	d8e2      	bhi.n	da2a <__ledf2+0x66>
    da64:	d007      	beq.n	da76 <__ledf2+0xb2>
    da66:	2300      	movs	r3, #0
    da68:	42be      	cmp	r6, r7
    da6a:	d2d3      	bcs.n	da14 <__ledf2+0x50>
    da6c:	4659      	mov	r1, fp
    da6e:	2301      	movs	r3, #1
    da70:	3901      	subs	r1, #1
    da72:	430b      	orrs	r3, r1
    da74:	e7ce      	b.n	da14 <__ledf2+0x50>
    da76:	45c4      	cmp	ip, r8
    da78:	d8d7      	bhi.n	da2a <__ledf2+0x66>
    da7a:	2300      	movs	r3, #0
    da7c:	45c4      	cmp	ip, r8
    da7e:	d3f5      	bcc.n	da6c <__ledf2+0xa8>
    da80:	e7c8      	b.n	da14 <__ledf2+0x50>
    da82:	46c0      	nop			; (mov r8, r8)
    da84:	000007ff 	.word	0x000007ff

0000da88 <__clzsi2>:
    da88:	211c      	movs	r1, #28
    da8a:	2301      	movs	r3, #1
    da8c:	041b      	lsls	r3, r3, #16
    da8e:	4298      	cmp	r0, r3
    da90:	d301      	bcc.n	da96 <__clzsi2+0xe>
    da92:	0c00      	lsrs	r0, r0, #16
    da94:	3910      	subs	r1, #16
    da96:	0a1b      	lsrs	r3, r3, #8
    da98:	4298      	cmp	r0, r3
    da9a:	d301      	bcc.n	daa0 <__clzsi2+0x18>
    da9c:	0a00      	lsrs	r0, r0, #8
    da9e:	3908      	subs	r1, #8
    daa0:	091b      	lsrs	r3, r3, #4
    daa2:	4298      	cmp	r0, r3
    daa4:	d301      	bcc.n	daaa <__clzsi2+0x22>
    daa6:	0900      	lsrs	r0, r0, #4
    daa8:	3904      	subs	r1, #4
    daaa:	a202      	add	r2, pc, #8	; (adr r2, dab4 <__clzsi2+0x2c>)
    daac:	5c10      	ldrb	r0, [r2, r0]
    daae:	1840      	adds	r0, r0, r1
    dab0:	4770      	bx	lr
    dab2:	46c0      	nop			; (mov r8, r8)
    dab4:	02020304 	.word	0x02020304
    dab8:	01010101 	.word	0x01010101
	...

0000dac4 <__libc_init_array>:
    dac4:	b570      	push	{r4, r5, r6, lr}
    dac6:	2600      	movs	r6, #0
    dac8:	4d0c      	ldr	r5, [pc, #48]	; (dafc <__libc_init_array+0x38>)
    daca:	4c0d      	ldr	r4, [pc, #52]	; (db00 <__libc_init_array+0x3c>)
    dacc:	1b64      	subs	r4, r4, r5
    dace:	10a4      	asrs	r4, r4, #2
    dad0:	42a6      	cmp	r6, r4
    dad2:	d109      	bne.n	dae8 <__libc_init_array+0x24>
    dad4:	2600      	movs	r6, #0
    dad6:	f001 ff8b 	bl	f9f0 <_init>
    dada:	4d0a      	ldr	r5, [pc, #40]	; (db04 <__libc_init_array+0x40>)
    dadc:	4c0a      	ldr	r4, [pc, #40]	; (db08 <__libc_init_array+0x44>)
    dade:	1b64      	subs	r4, r4, r5
    dae0:	10a4      	asrs	r4, r4, #2
    dae2:	42a6      	cmp	r6, r4
    dae4:	d105      	bne.n	daf2 <__libc_init_array+0x2e>
    dae6:	bd70      	pop	{r4, r5, r6, pc}
    dae8:	00b3      	lsls	r3, r6, #2
    daea:	58eb      	ldr	r3, [r5, r3]
    daec:	4798      	blx	r3
    daee:	3601      	adds	r6, #1
    daf0:	e7ee      	b.n	dad0 <__libc_init_array+0xc>
    daf2:	00b3      	lsls	r3, r6, #2
    daf4:	58eb      	ldr	r3, [r5, r3]
    daf6:	4798      	blx	r3
    daf8:	3601      	adds	r6, #1
    dafa:	e7f2      	b.n	dae2 <__libc_init_array+0x1e>
    dafc:	0000f9fc 	.word	0x0000f9fc
    db00:	0000f9fc 	.word	0x0000f9fc
    db04:	0000f9fc 	.word	0x0000f9fc
    db08:	0000fa00 	.word	0x0000fa00

0000db0c <memcpy>:
    db0c:	2300      	movs	r3, #0
    db0e:	b510      	push	{r4, lr}
    db10:	429a      	cmp	r2, r3
    db12:	d100      	bne.n	db16 <memcpy+0xa>
    db14:	bd10      	pop	{r4, pc}
    db16:	5ccc      	ldrb	r4, [r1, r3]
    db18:	54c4      	strb	r4, [r0, r3]
    db1a:	3301      	adds	r3, #1
    db1c:	e7f8      	b.n	db10 <memcpy+0x4>

0000db1e <memset>:
    db1e:	0003      	movs	r3, r0
    db20:	1882      	adds	r2, r0, r2
    db22:	4293      	cmp	r3, r2
    db24:	d100      	bne.n	db28 <memset+0xa>
    db26:	4770      	bx	lr
    db28:	7019      	strb	r1, [r3, #0]
    db2a:	3301      	adds	r3, #1
    db2c:	e7f9      	b.n	db22 <memset+0x4>
	...

0000db30 <srand>:
    db30:	4b10      	ldr	r3, [pc, #64]	; (db74 <srand+0x44>)
    db32:	b570      	push	{r4, r5, r6, lr}
    db34:	681c      	ldr	r4, [r3, #0]
    db36:	0005      	movs	r5, r0
    db38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    db3a:	2b00      	cmp	r3, #0
    db3c:	d115      	bne.n	db6a <srand+0x3a>
    db3e:	2018      	movs	r0, #24
    db40:	f000 f85e 	bl	dc00 <malloc>
    db44:	4b0c      	ldr	r3, [pc, #48]	; (db78 <srand+0x48>)
    db46:	63a0      	str	r0, [r4, #56]	; 0x38
    db48:	8003      	strh	r3, [r0, #0]
    db4a:	4b0c      	ldr	r3, [pc, #48]	; (db7c <srand+0x4c>)
    db4c:	2201      	movs	r2, #1
    db4e:	8043      	strh	r3, [r0, #2]
    db50:	4b0b      	ldr	r3, [pc, #44]	; (db80 <srand+0x50>)
    db52:	8083      	strh	r3, [r0, #4]
    db54:	4b0b      	ldr	r3, [pc, #44]	; (db84 <srand+0x54>)
    db56:	80c3      	strh	r3, [r0, #6]
    db58:	4b0b      	ldr	r3, [pc, #44]	; (db88 <srand+0x58>)
    db5a:	8103      	strh	r3, [r0, #8]
    db5c:	2305      	movs	r3, #5
    db5e:	8143      	strh	r3, [r0, #10]
    db60:	3306      	adds	r3, #6
    db62:	8183      	strh	r3, [r0, #12]
    db64:	2300      	movs	r3, #0
    db66:	6102      	str	r2, [r0, #16]
    db68:	6143      	str	r3, [r0, #20]
    db6a:	2200      	movs	r2, #0
    db6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    db6e:	611d      	str	r5, [r3, #16]
    db70:	615a      	str	r2, [r3, #20]
    db72:	bd70      	pop	{r4, r5, r6, pc}
    db74:	200002c4 	.word	0x200002c4
    db78:	0000330e 	.word	0x0000330e
    db7c:	ffffabcd 	.word	0xffffabcd
    db80:	00001234 	.word	0x00001234
    db84:	ffffe66d 	.word	0xffffe66d
    db88:	ffffdeec 	.word	0xffffdeec

0000db8c <sniprintf>:
    db8c:	b40c      	push	{r2, r3}
    db8e:	b530      	push	{r4, r5, lr}
    db90:	4b16      	ldr	r3, [pc, #88]	; (dbec <sniprintf+0x60>)
    db92:	b09d      	sub	sp, #116	; 0x74
    db94:	1e0c      	subs	r4, r1, #0
    db96:	681d      	ldr	r5, [r3, #0]
    db98:	da08      	bge.n	dbac <sniprintf+0x20>
    db9a:	238b      	movs	r3, #139	; 0x8b
    db9c:	2001      	movs	r0, #1
    db9e:	602b      	str	r3, [r5, #0]
    dba0:	4240      	negs	r0, r0
    dba2:	b01d      	add	sp, #116	; 0x74
    dba4:	bc30      	pop	{r4, r5}
    dba6:	bc08      	pop	{r3}
    dba8:	b002      	add	sp, #8
    dbaa:	4718      	bx	r3
    dbac:	2382      	movs	r3, #130	; 0x82
    dbae:	a902      	add	r1, sp, #8
    dbb0:	009b      	lsls	r3, r3, #2
    dbb2:	818b      	strh	r3, [r1, #12]
    dbb4:	2300      	movs	r3, #0
    dbb6:	9002      	str	r0, [sp, #8]
    dbb8:	6108      	str	r0, [r1, #16]
    dbba:	429c      	cmp	r4, r3
    dbbc:	d000      	beq.n	dbc0 <sniprintf+0x34>
    dbbe:	1e63      	subs	r3, r4, #1
    dbc0:	608b      	str	r3, [r1, #8]
    dbc2:	614b      	str	r3, [r1, #20]
    dbc4:	2301      	movs	r3, #1
    dbc6:	425b      	negs	r3, r3
    dbc8:	81cb      	strh	r3, [r1, #14]
    dbca:	9a20      	ldr	r2, [sp, #128]	; 0x80
    dbcc:	ab21      	add	r3, sp, #132	; 0x84
    dbce:	0028      	movs	r0, r5
    dbd0:	9301      	str	r3, [sp, #4]
    dbd2:	f000 f929 	bl	de28 <_svfiprintf_r>
    dbd6:	1c43      	adds	r3, r0, #1
    dbd8:	da01      	bge.n	dbde <sniprintf+0x52>
    dbda:	238b      	movs	r3, #139	; 0x8b
    dbdc:	602b      	str	r3, [r5, #0]
    dbde:	2c00      	cmp	r4, #0
    dbe0:	d0df      	beq.n	dba2 <sniprintf+0x16>
    dbe2:	2300      	movs	r3, #0
    dbe4:	9a02      	ldr	r2, [sp, #8]
    dbe6:	7013      	strb	r3, [r2, #0]
    dbe8:	e7db      	b.n	dba2 <sniprintf+0x16>
    dbea:	46c0      	nop			; (mov r8, r8)
    dbec:	200002c4 	.word	0x200002c4

0000dbf0 <strlen>:
    dbf0:	2300      	movs	r3, #0
    dbf2:	5cc2      	ldrb	r2, [r0, r3]
    dbf4:	3301      	adds	r3, #1
    dbf6:	2a00      	cmp	r2, #0
    dbf8:	d1fb      	bne.n	dbf2 <strlen+0x2>
    dbfa:	1e58      	subs	r0, r3, #1
    dbfc:	4770      	bx	lr
	...

0000dc00 <malloc>:
    dc00:	b510      	push	{r4, lr}
    dc02:	4b03      	ldr	r3, [pc, #12]	; (dc10 <malloc+0x10>)
    dc04:	0001      	movs	r1, r0
    dc06:	6818      	ldr	r0, [r3, #0]
    dc08:	f000 f84e 	bl	dca8 <_malloc_r>
    dc0c:	bd10      	pop	{r4, pc}
    dc0e:	46c0      	nop			; (mov r8, r8)
    dc10:	200002c4 	.word	0x200002c4

0000dc14 <_free_r>:
    dc14:	b570      	push	{r4, r5, r6, lr}
    dc16:	0005      	movs	r5, r0
    dc18:	2900      	cmp	r1, #0
    dc1a:	d010      	beq.n	dc3e <_free_r+0x2a>
    dc1c:	1f0c      	subs	r4, r1, #4
    dc1e:	6823      	ldr	r3, [r4, #0]
    dc20:	2b00      	cmp	r3, #0
    dc22:	da00      	bge.n	dc26 <_free_r+0x12>
    dc24:	18e4      	adds	r4, r4, r3
    dc26:	0028      	movs	r0, r5
    dc28:	f000 fbb9 	bl	e39e <__malloc_lock>
    dc2c:	4a1d      	ldr	r2, [pc, #116]	; (dca4 <_free_r+0x90>)
    dc2e:	6813      	ldr	r3, [r2, #0]
    dc30:	2b00      	cmp	r3, #0
    dc32:	d105      	bne.n	dc40 <_free_r+0x2c>
    dc34:	6063      	str	r3, [r4, #4]
    dc36:	6014      	str	r4, [r2, #0]
    dc38:	0028      	movs	r0, r5
    dc3a:	f000 fbb1 	bl	e3a0 <__malloc_unlock>
    dc3e:	bd70      	pop	{r4, r5, r6, pc}
    dc40:	42a3      	cmp	r3, r4
    dc42:	d909      	bls.n	dc58 <_free_r+0x44>
    dc44:	6821      	ldr	r1, [r4, #0]
    dc46:	1860      	adds	r0, r4, r1
    dc48:	4283      	cmp	r3, r0
    dc4a:	d1f3      	bne.n	dc34 <_free_r+0x20>
    dc4c:	6818      	ldr	r0, [r3, #0]
    dc4e:	685b      	ldr	r3, [r3, #4]
    dc50:	1841      	adds	r1, r0, r1
    dc52:	6021      	str	r1, [r4, #0]
    dc54:	e7ee      	b.n	dc34 <_free_r+0x20>
    dc56:	0013      	movs	r3, r2
    dc58:	685a      	ldr	r2, [r3, #4]
    dc5a:	2a00      	cmp	r2, #0
    dc5c:	d001      	beq.n	dc62 <_free_r+0x4e>
    dc5e:	42a2      	cmp	r2, r4
    dc60:	d9f9      	bls.n	dc56 <_free_r+0x42>
    dc62:	6819      	ldr	r1, [r3, #0]
    dc64:	1858      	adds	r0, r3, r1
    dc66:	42a0      	cmp	r0, r4
    dc68:	d10b      	bne.n	dc82 <_free_r+0x6e>
    dc6a:	6820      	ldr	r0, [r4, #0]
    dc6c:	1809      	adds	r1, r1, r0
    dc6e:	1858      	adds	r0, r3, r1
    dc70:	6019      	str	r1, [r3, #0]
    dc72:	4282      	cmp	r2, r0
    dc74:	d1e0      	bne.n	dc38 <_free_r+0x24>
    dc76:	6810      	ldr	r0, [r2, #0]
    dc78:	6852      	ldr	r2, [r2, #4]
    dc7a:	1841      	adds	r1, r0, r1
    dc7c:	6019      	str	r1, [r3, #0]
    dc7e:	605a      	str	r2, [r3, #4]
    dc80:	e7da      	b.n	dc38 <_free_r+0x24>
    dc82:	42a0      	cmp	r0, r4
    dc84:	d902      	bls.n	dc8c <_free_r+0x78>
    dc86:	230c      	movs	r3, #12
    dc88:	602b      	str	r3, [r5, #0]
    dc8a:	e7d5      	b.n	dc38 <_free_r+0x24>
    dc8c:	6821      	ldr	r1, [r4, #0]
    dc8e:	1860      	adds	r0, r4, r1
    dc90:	4282      	cmp	r2, r0
    dc92:	d103      	bne.n	dc9c <_free_r+0x88>
    dc94:	6810      	ldr	r0, [r2, #0]
    dc96:	6852      	ldr	r2, [r2, #4]
    dc98:	1841      	adds	r1, r0, r1
    dc9a:	6021      	str	r1, [r4, #0]
    dc9c:	6062      	str	r2, [r4, #4]
    dc9e:	605c      	str	r4, [r3, #4]
    dca0:	e7ca      	b.n	dc38 <_free_r+0x24>
    dca2:	46c0      	nop			; (mov r8, r8)
    dca4:	200018e8 	.word	0x200018e8

0000dca8 <_malloc_r>:
    dca8:	2303      	movs	r3, #3
    dcaa:	b570      	push	{r4, r5, r6, lr}
    dcac:	1ccd      	adds	r5, r1, #3
    dcae:	439d      	bics	r5, r3
    dcb0:	3508      	adds	r5, #8
    dcb2:	0006      	movs	r6, r0
    dcb4:	2d0c      	cmp	r5, #12
    dcb6:	d21e      	bcs.n	dcf6 <_malloc_r+0x4e>
    dcb8:	250c      	movs	r5, #12
    dcba:	42a9      	cmp	r1, r5
    dcbc:	d81d      	bhi.n	dcfa <_malloc_r+0x52>
    dcbe:	0030      	movs	r0, r6
    dcc0:	f000 fb6d 	bl	e39e <__malloc_lock>
    dcc4:	4a25      	ldr	r2, [pc, #148]	; (dd5c <_malloc_r+0xb4>)
    dcc6:	6814      	ldr	r4, [r2, #0]
    dcc8:	0021      	movs	r1, r4
    dcca:	2900      	cmp	r1, #0
    dccc:	d119      	bne.n	dd02 <_malloc_r+0x5a>
    dcce:	4c24      	ldr	r4, [pc, #144]	; (dd60 <_malloc_r+0xb8>)
    dcd0:	6823      	ldr	r3, [r4, #0]
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	d103      	bne.n	dcde <_malloc_r+0x36>
    dcd6:	0030      	movs	r0, r6
    dcd8:	f000 fb32 	bl	e340 <_sbrk_r>
    dcdc:	6020      	str	r0, [r4, #0]
    dcde:	0029      	movs	r1, r5
    dce0:	0030      	movs	r0, r6
    dce2:	f000 fb2d 	bl	e340 <_sbrk_r>
    dce6:	1c43      	adds	r3, r0, #1
    dce8:	d12c      	bne.n	dd44 <_malloc_r+0x9c>
    dcea:	230c      	movs	r3, #12
    dcec:	0030      	movs	r0, r6
    dcee:	6033      	str	r3, [r6, #0]
    dcf0:	f000 fb56 	bl	e3a0 <__malloc_unlock>
    dcf4:	e003      	b.n	dcfe <_malloc_r+0x56>
    dcf6:	2d00      	cmp	r5, #0
    dcf8:	dadf      	bge.n	dcba <_malloc_r+0x12>
    dcfa:	230c      	movs	r3, #12
    dcfc:	6033      	str	r3, [r6, #0]
    dcfe:	2000      	movs	r0, #0
    dd00:	bd70      	pop	{r4, r5, r6, pc}
    dd02:	680b      	ldr	r3, [r1, #0]
    dd04:	1b5b      	subs	r3, r3, r5
    dd06:	d41a      	bmi.n	dd3e <_malloc_r+0x96>
    dd08:	2b0b      	cmp	r3, #11
    dd0a:	d903      	bls.n	dd14 <_malloc_r+0x6c>
    dd0c:	600b      	str	r3, [r1, #0]
    dd0e:	18cc      	adds	r4, r1, r3
    dd10:	6025      	str	r5, [r4, #0]
    dd12:	e003      	b.n	dd1c <_malloc_r+0x74>
    dd14:	428c      	cmp	r4, r1
    dd16:	d10e      	bne.n	dd36 <_malloc_r+0x8e>
    dd18:	6863      	ldr	r3, [r4, #4]
    dd1a:	6013      	str	r3, [r2, #0]
    dd1c:	0030      	movs	r0, r6
    dd1e:	f000 fb3f 	bl	e3a0 <__malloc_unlock>
    dd22:	0020      	movs	r0, r4
    dd24:	2207      	movs	r2, #7
    dd26:	300b      	adds	r0, #11
    dd28:	1d23      	adds	r3, r4, #4
    dd2a:	4390      	bics	r0, r2
    dd2c:	1ac3      	subs	r3, r0, r3
    dd2e:	d0e7      	beq.n	dd00 <_malloc_r+0x58>
    dd30:	425a      	negs	r2, r3
    dd32:	50e2      	str	r2, [r4, r3]
    dd34:	e7e4      	b.n	dd00 <_malloc_r+0x58>
    dd36:	684b      	ldr	r3, [r1, #4]
    dd38:	6063      	str	r3, [r4, #4]
    dd3a:	000c      	movs	r4, r1
    dd3c:	e7ee      	b.n	dd1c <_malloc_r+0x74>
    dd3e:	000c      	movs	r4, r1
    dd40:	6849      	ldr	r1, [r1, #4]
    dd42:	e7c2      	b.n	dcca <_malloc_r+0x22>
    dd44:	2303      	movs	r3, #3
    dd46:	1cc4      	adds	r4, r0, #3
    dd48:	439c      	bics	r4, r3
    dd4a:	42a0      	cmp	r0, r4
    dd4c:	d0e0      	beq.n	dd10 <_malloc_r+0x68>
    dd4e:	1a21      	subs	r1, r4, r0
    dd50:	0030      	movs	r0, r6
    dd52:	f000 faf5 	bl	e340 <_sbrk_r>
    dd56:	1c43      	adds	r3, r0, #1
    dd58:	d1da      	bne.n	dd10 <_malloc_r+0x68>
    dd5a:	e7c6      	b.n	dcea <_malloc_r+0x42>
    dd5c:	200018e8 	.word	0x200018e8
    dd60:	200018ec 	.word	0x200018ec

0000dd64 <__ssputs_r>:
    dd64:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd66:	688e      	ldr	r6, [r1, #8]
    dd68:	b085      	sub	sp, #20
    dd6a:	0007      	movs	r7, r0
    dd6c:	000c      	movs	r4, r1
    dd6e:	9203      	str	r2, [sp, #12]
    dd70:	9301      	str	r3, [sp, #4]
    dd72:	429e      	cmp	r6, r3
    dd74:	d839      	bhi.n	ddea <__ssputs_r+0x86>
    dd76:	2390      	movs	r3, #144	; 0x90
    dd78:	898a      	ldrh	r2, [r1, #12]
    dd7a:	00db      	lsls	r3, r3, #3
    dd7c:	421a      	tst	r2, r3
    dd7e:	d034      	beq.n	ddea <__ssputs_r+0x86>
    dd80:	2503      	movs	r5, #3
    dd82:	6909      	ldr	r1, [r1, #16]
    dd84:	6823      	ldr	r3, [r4, #0]
    dd86:	1a5b      	subs	r3, r3, r1
    dd88:	9302      	str	r3, [sp, #8]
    dd8a:	6963      	ldr	r3, [r4, #20]
    dd8c:	9802      	ldr	r0, [sp, #8]
    dd8e:	435d      	muls	r5, r3
    dd90:	0feb      	lsrs	r3, r5, #31
    dd92:	195d      	adds	r5, r3, r5
    dd94:	9b01      	ldr	r3, [sp, #4]
    dd96:	106d      	asrs	r5, r5, #1
    dd98:	3301      	adds	r3, #1
    dd9a:	181b      	adds	r3, r3, r0
    dd9c:	42ab      	cmp	r3, r5
    dd9e:	d900      	bls.n	dda2 <__ssputs_r+0x3e>
    dda0:	001d      	movs	r5, r3
    dda2:	0553      	lsls	r3, r2, #21
    dda4:	d532      	bpl.n	de0c <__ssputs_r+0xa8>
    dda6:	0029      	movs	r1, r5
    dda8:	0038      	movs	r0, r7
    ddaa:	f7ff ff7d 	bl	dca8 <_malloc_r>
    ddae:	1e06      	subs	r6, r0, #0
    ddb0:	d109      	bne.n	ddc6 <__ssputs_r+0x62>
    ddb2:	230c      	movs	r3, #12
    ddb4:	603b      	str	r3, [r7, #0]
    ddb6:	2340      	movs	r3, #64	; 0x40
    ddb8:	2001      	movs	r0, #1
    ddba:	89a2      	ldrh	r2, [r4, #12]
    ddbc:	4240      	negs	r0, r0
    ddbe:	4313      	orrs	r3, r2
    ddc0:	81a3      	strh	r3, [r4, #12]
    ddc2:	b005      	add	sp, #20
    ddc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ddc6:	9a02      	ldr	r2, [sp, #8]
    ddc8:	6921      	ldr	r1, [r4, #16]
    ddca:	f7ff fe9f 	bl	db0c <memcpy>
    ddce:	89a3      	ldrh	r3, [r4, #12]
    ddd0:	4a14      	ldr	r2, [pc, #80]	; (de24 <__ssputs_r+0xc0>)
    ddd2:	401a      	ands	r2, r3
    ddd4:	2380      	movs	r3, #128	; 0x80
    ddd6:	4313      	orrs	r3, r2
    ddd8:	81a3      	strh	r3, [r4, #12]
    ddda:	9b02      	ldr	r3, [sp, #8]
    dddc:	6126      	str	r6, [r4, #16]
    ddde:	18f6      	adds	r6, r6, r3
    dde0:	6026      	str	r6, [r4, #0]
    dde2:	6165      	str	r5, [r4, #20]
    dde4:	9e01      	ldr	r6, [sp, #4]
    dde6:	1aed      	subs	r5, r5, r3
    dde8:	60a5      	str	r5, [r4, #8]
    ddea:	9b01      	ldr	r3, [sp, #4]
    ddec:	42b3      	cmp	r3, r6
    ddee:	d200      	bcs.n	ddf2 <__ssputs_r+0x8e>
    ddf0:	001e      	movs	r6, r3
    ddf2:	0032      	movs	r2, r6
    ddf4:	9903      	ldr	r1, [sp, #12]
    ddf6:	6820      	ldr	r0, [r4, #0]
    ddf8:	f000 fabf 	bl	e37a <memmove>
    ddfc:	68a3      	ldr	r3, [r4, #8]
    ddfe:	2000      	movs	r0, #0
    de00:	1b9b      	subs	r3, r3, r6
    de02:	60a3      	str	r3, [r4, #8]
    de04:	6823      	ldr	r3, [r4, #0]
    de06:	199e      	adds	r6, r3, r6
    de08:	6026      	str	r6, [r4, #0]
    de0a:	e7da      	b.n	ddc2 <__ssputs_r+0x5e>
    de0c:	002a      	movs	r2, r5
    de0e:	0038      	movs	r0, r7
    de10:	f000 fac7 	bl	e3a2 <_realloc_r>
    de14:	1e06      	subs	r6, r0, #0
    de16:	d1e0      	bne.n	ddda <__ssputs_r+0x76>
    de18:	6921      	ldr	r1, [r4, #16]
    de1a:	0038      	movs	r0, r7
    de1c:	f7ff fefa 	bl	dc14 <_free_r>
    de20:	e7c7      	b.n	ddb2 <__ssputs_r+0x4e>
    de22:	46c0      	nop			; (mov r8, r8)
    de24:	fffffb7f 	.word	0xfffffb7f

0000de28 <_svfiprintf_r>:
    de28:	b5f0      	push	{r4, r5, r6, r7, lr}
    de2a:	b09f      	sub	sp, #124	; 0x7c
    de2c:	9002      	str	r0, [sp, #8]
    de2e:	9305      	str	r3, [sp, #20]
    de30:	898b      	ldrh	r3, [r1, #12]
    de32:	000f      	movs	r7, r1
    de34:	0016      	movs	r6, r2
    de36:	061b      	lsls	r3, r3, #24
    de38:	d511      	bpl.n	de5e <_svfiprintf_r+0x36>
    de3a:	690b      	ldr	r3, [r1, #16]
    de3c:	2b00      	cmp	r3, #0
    de3e:	d10e      	bne.n	de5e <_svfiprintf_r+0x36>
    de40:	2140      	movs	r1, #64	; 0x40
    de42:	f7ff ff31 	bl	dca8 <_malloc_r>
    de46:	6038      	str	r0, [r7, #0]
    de48:	6138      	str	r0, [r7, #16]
    de4a:	2800      	cmp	r0, #0
    de4c:	d105      	bne.n	de5a <_svfiprintf_r+0x32>
    de4e:	230c      	movs	r3, #12
    de50:	9a02      	ldr	r2, [sp, #8]
    de52:	3801      	subs	r0, #1
    de54:	6013      	str	r3, [r2, #0]
    de56:	b01f      	add	sp, #124	; 0x7c
    de58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de5a:	2340      	movs	r3, #64	; 0x40
    de5c:	617b      	str	r3, [r7, #20]
    de5e:	2300      	movs	r3, #0
    de60:	ad06      	add	r5, sp, #24
    de62:	616b      	str	r3, [r5, #20]
    de64:	3320      	adds	r3, #32
    de66:	766b      	strb	r3, [r5, #25]
    de68:	3310      	adds	r3, #16
    de6a:	76ab      	strb	r3, [r5, #26]
    de6c:	0034      	movs	r4, r6
    de6e:	7823      	ldrb	r3, [r4, #0]
    de70:	2b00      	cmp	r3, #0
    de72:	d147      	bne.n	df04 <_svfiprintf_r+0xdc>
    de74:	1ba3      	subs	r3, r4, r6
    de76:	9304      	str	r3, [sp, #16]
    de78:	d00d      	beq.n	de96 <_svfiprintf_r+0x6e>
    de7a:	1ba3      	subs	r3, r4, r6
    de7c:	0032      	movs	r2, r6
    de7e:	0039      	movs	r1, r7
    de80:	9802      	ldr	r0, [sp, #8]
    de82:	f7ff ff6f 	bl	dd64 <__ssputs_r>
    de86:	1c43      	adds	r3, r0, #1
    de88:	d100      	bne.n	de8c <_svfiprintf_r+0x64>
    de8a:	e0b5      	b.n	dff8 <_svfiprintf_r+0x1d0>
    de8c:	696a      	ldr	r2, [r5, #20]
    de8e:	9b04      	ldr	r3, [sp, #16]
    de90:	4694      	mov	ip, r2
    de92:	4463      	add	r3, ip
    de94:	616b      	str	r3, [r5, #20]
    de96:	7823      	ldrb	r3, [r4, #0]
    de98:	2b00      	cmp	r3, #0
    de9a:	d100      	bne.n	de9e <_svfiprintf_r+0x76>
    de9c:	e0ac      	b.n	dff8 <_svfiprintf_r+0x1d0>
    de9e:	2201      	movs	r2, #1
    dea0:	2300      	movs	r3, #0
    dea2:	4252      	negs	r2, r2
    dea4:	606a      	str	r2, [r5, #4]
    dea6:	a902      	add	r1, sp, #8
    dea8:	3254      	adds	r2, #84	; 0x54
    deaa:	1852      	adds	r2, r2, r1
    deac:	3401      	adds	r4, #1
    deae:	602b      	str	r3, [r5, #0]
    deb0:	60eb      	str	r3, [r5, #12]
    deb2:	60ab      	str	r3, [r5, #8]
    deb4:	7013      	strb	r3, [r2, #0]
    deb6:	65ab      	str	r3, [r5, #88]	; 0x58
    deb8:	4e58      	ldr	r6, [pc, #352]	; (e01c <_svfiprintf_r+0x1f4>)
    deba:	2205      	movs	r2, #5
    debc:	7821      	ldrb	r1, [r4, #0]
    debe:	0030      	movs	r0, r6
    dec0:	f000 fa50 	bl	e364 <memchr>
    dec4:	1c62      	adds	r2, r4, #1
    dec6:	2800      	cmp	r0, #0
    dec8:	d120      	bne.n	df0c <_svfiprintf_r+0xe4>
    deca:	6829      	ldr	r1, [r5, #0]
    decc:	06cb      	lsls	r3, r1, #27
    dece:	d504      	bpl.n	deda <_svfiprintf_r+0xb2>
    ded0:	2353      	movs	r3, #83	; 0x53
    ded2:	ae02      	add	r6, sp, #8
    ded4:	3020      	adds	r0, #32
    ded6:	199b      	adds	r3, r3, r6
    ded8:	7018      	strb	r0, [r3, #0]
    deda:	070b      	lsls	r3, r1, #28
    dedc:	d504      	bpl.n	dee8 <_svfiprintf_r+0xc0>
    dede:	2353      	movs	r3, #83	; 0x53
    dee0:	202b      	movs	r0, #43	; 0x2b
    dee2:	ae02      	add	r6, sp, #8
    dee4:	199b      	adds	r3, r3, r6
    dee6:	7018      	strb	r0, [r3, #0]
    dee8:	7823      	ldrb	r3, [r4, #0]
    deea:	2b2a      	cmp	r3, #42	; 0x2a
    deec:	d016      	beq.n	df1c <_svfiprintf_r+0xf4>
    deee:	2000      	movs	r0, #0
    def0:	210a      	movs	r1, #10
    def2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    def4:	7822      	ldrb	r2, [r4, #0]
    def6:	3a30      	subs	r2, #48	; 0x30
    def8:	2a09      	cmp	r2, #9
    defa:	d955      	bls.n	dfa8 <_svfiprintf_r+0x180>
    defc:	2800      	cmp	r0, #0
    defe:	d015      	beq.n	df2c <_svfiprintf_r+0x104>
    df00:	9309      	str	r3, [sp, #36]	; 0x24
    df02:	e013      	b.n	df2c <_svfiprintf_r+0x104>
    df04:	2b25      	cmp	r3, #37	; 0x25
    df06:	d0b5      	beq.n	de74 <_svfiprintf_r+0x4c>
    df08:	3401      	adds	r4, #1
    df0a:	e7b0      	b.n	de6e <_svfiprintf_r+0x46>
    df0c:	2301      	movs	r3, #1
    df0e:	1b80      	subs	r0, r0, r6
    df10:	4083      	lsls	r3, r0
    df12:	6829      	ldr	r1, [r5, #0]
    df14:	0014      	movs	r4, r2
    df16:	430b      	orrs	r3, r1
    df18:	602b      	str	r3, [r5, #0]
    df1a:	e7cd      	b.n	deb8 <_svfiprintf_r+0x90>
    df1c:	9b05      	ldr	r3, [sp, #20]
    df1e:	1d18      	adds	r0, r3, #4
    df20:	681b      	ldr	r3, [r3, #0]
    df22:	9005      	str	r0, [sp, #20]
    df24:	2b00      	cmp	r3, #0
    df26:	db39      	blt.n	df9c <_svfiprintf_r+0x174>
    df28:	9309      	str	r3, [sp, #36]	; 0x24
    df2a:	0014      	movs	r4, r2
    df2c:	7823      	ldrb	r3, [r4, #0]
    df2e:	2b2e      	cmp	r3, #46	; 0x2e
    df30:	d10b      	bne.n	df4a <_svfiprintf_r+0x122>
    df32:	7863      	ldrb	r3, [r4, #1]
    df34:	1c62      	adds	r2, r4, #1
    df36:	2b2a      	cmp	r3, #42	; 0x2a
    df38:	d13e      	bne.n	dfb8 <_svfiprintf_r+0x190>
    df3a:	9b05      	ldr	r3, [sp, #20]
    df3c:	3402      	adds	r4, #2
    df3e:	1d1a      	adds	r2, r3, #4
    df40:	681b      	ldr	r3, [r3, #0]
    df42:	9205      	str	r2, [sp, #20]
    df44:	2b00      	cmp	r3, #0
    df46:	db34      	blt.n	dfb2 <_svfiprintf_r+0x18a>
    df48:	9307      	str	r3, [sp, #28]
    df4a:	4e35      	ldr	r6, [pc, #212]	; (e020 <_svfiprintf_r+0x1f8>)
    df4c:	7821      	ldrb	r1, [r4, #0]
    df4e:	2203      	movs	r2, #3
    df50:	0030      	movs	r0, r6
    df52:	f000 fa07 	bl	e364 <memchr>
    df56:	2800      	cmp	r0, #0
    df58:	d006      	beq.n	df68 <_svfiprintf_r+0x140>
    df5a:	2340      	movs	r3, #64	; 0x40
    df5c:	1b80      	subs	r0, r0, r6
    df5e:	4083      	lsls	r3, r0
    df60:	682a      	ldr	r2, [r5, #0]
    df62:	3401      	adds	r4, #1
    df64:	4313      	orrs	r3, r2
    df66:	602b      	str	r3, [r5, #0]
    df68:	7821      	ldrb	r1, [r4, #0]
    df6a:	2206      	movs	r2, #6
    df6c:	482d      	ldr	r0, [pc, #180]	; (e024 <_svfiprintf_r+0x1fc>)
    df6e:	1c66      	adds	r6, r4, #1
    df70:	7629      	strb	r1, [r5, #24]
    df72:	f000 f9f7 	bl	e364 <memchr>
    df76:	2800      	cmp	r0, #0
    df78:	d046      	beq.n	e008 <_svfiprintf_r+0x1e0>
    df7a:	4b2b      	ldr	r3, [pc, #172]	; (e028 <_svfiprintf_r+0x200>)
    df7c:	2b00      	cmp	r3, #0
    df7e:	d12f      	bne.n	dfe0 <_svfiprintf_r+0x1b8>
    df80:	6829      	ldr	r1, [r5, #0]
    df82:	9b05      	ldr	r3, [sp, #20]
    df84:	2207      	movs	r2, #7
    df86:	05c9      	lsls	r1, r1, #23
    df88:	d528      	bpl.n	dfdc <_svfiprintf_r+0x1b4>
    df8a:	189b      	adds	r3, r3, r2
    df8c:	4393      	bics	r3, r2
    df8e:	3308      	adds	r3, #8
    df90:	9305      	str	r3, [sp, #20]
    df92:	696b      	ldr	r3, [r5, #20]
    df94:	9a03      	ldr	r2, [sp, #12]
    df96:	189b      	adds	r3, r3, r2
    df98:	616b      	str	r3, [r5, #20]
    df9a:	e767      	b.n	de6c <_svfiprintf_r+0x44>
    df9c:	425b      	negs	r3, r3
    df9e:	60eb      	str	r3, [r5, #12]
    dfa0:	2302      	movs	r3, #2
    dfa2:	430b      	orrs	r3, r1
    dfa4:	602b      	str	r3, [r5, #0]
    dfa6:	e7c0      	b.n	df2a <_svfiprintf_r+0x102>
    dfa8:	434b      	muls	r3, r1
    dfaa:	3401      	adds	r4, #1
    dfac:	189b      	adds	r3, r3, r2
    dfae:	2001      	movs	r0, #1
    dfb0:	e7a0      	b.n	def4 <_svfiprintf_r+0xcc>
    dfb2:	2301      	movs	r3, #1
    dfb4:	425b      	negs	r3, r3
    dfb6:	e7c7      	b.n	df48 <_svfiprintf_r+0x120>
    dfb8:	2300      	movs	r3, #0
    dfba:	0014      	movs	r4, r2
    dfbc:	200a      	movs	r0, #10
    dfbe:	001a      	movs	r2, r3
    dfc0:	606b      	str	r3, [r5, #4]
    dfc2:	7821      	ldrb	r1, [r4, #0]
    dfc4:	3930      	subs	r1, #48	; 0x30
    dfc6:	2909      	cmp	r1, #9
    dfc8:	d903      	bls.n	dfd2 <_svfiprintf_r+0x1aa>
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d0bd      	beq.n	df4a <_svfiprintf_r+0x122>
    dfce:	9207      	str	r2, [sp, #28]
    dfd0:	e7bb      	b.n	df4a <_svfiprintf_r+0x122>
    dfd2:	4342      	muls	r2, r0
    dfd4:	3401      	adds	r4, #1
    dfd6:	1852      	adds	r2, r2, r1
    dfd8:	2301      	movs	r3, #1
    dfda:	e7f2      	b.n	dfc2 <_svfiprintf_r+0x19a>
    dfdc:	3307      	adds	r3, #7
    dfde:	e7d5      	b.n	df8c <_svfiprintf_r+0x164>
    dfe0:	ab05      	add	r3, sp, #20
    dfe2:	9300      	str	r3, [sp, #0]
    dfe4:	003a      	movs	r2, r7
    dfe6:	4b11      	ldr	r3, [pc, #68]	; (e02c <_svfiprintf_r+0x204>)
    dfe8:	0029      	movs	r1, r5
    dfea:	9802      	ldr	r0, [sp, #8]
    dfec:	e000      	b.n	dff0 <_svfiprintf_r+0x1c8>
    dfee:	bf00      	nop
    dff0:	9003      	str	r0, [sp, #12]
    dff2:	9b03      	ldr	r3, [sp, #12]
    dff4:	3301      	adds	r3, #1
    dff6:	d1cc      	bne.n	df92 <_svfiprintf_r+0x16a>
    dff8:	89bb      	ldrh	r3, [r7, #12]
    dffa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dffc:	065b      	lsls	r3, r3, #25
    dffe:	d400      	bmi.n	e002 <_svfiprintf_r+0x1da>
    e000:	e729      	b.n	de56 <_svfiprintf_r+0x2e>
    e002:	2001      	movs	r0, #1
    e004:	4240      	negs	r0, r0
    e006:	e726      	b.n	de56 <_svfiprintf_r+0x2e>
    e008:	ab05      	add	r3, sp, #20
    e00a:	9300      	str	r3, [sp, #0]
    e00c:	003a      	movs	r2, r7
    e00e:	4b07      	ldr	r3, [pc, #28]	; (e02c <_svfiprintf_r+0x204>)
    e010:	0029      	movs	r1, r5
    e012:	9802      	ldr	r0, [sp, #8]
    e014:	f000 f87a 	bl	e10c <_printf_i>
    e018:	e7ea      	b.n	dff0 <_svfiprintf_r+0x1c8>
    e01a:	46c0      	nop			; (mov r8, r8)
    e01c:	0000f9bc 	.word	0x0000f9bc
    e020:	0000f9c2 	.word	0x0000f9c2
    e024:	0000f9c6 	.word	0x0000f9c6
    e028:	00000000 	.word	0x00000000
    e02c:	0000dd65 	.word	0x0000dd65

0000e030 <_printf_common>:
    e030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e032:	0015      	movs	r5, r2
    e034:	9301      	str	r3, [sp, #4]
    e036:	688a      	ldr	r2, [r1, #8]
    e038:	690b      	ldr	r3, [r1, #16]
    e03a:	9000      	str	r0, [sp, #0]
    e03c:	000c      	movs	r4, r1
    e03e:	4293      	cmp	r3, r2
    e040:	da00      	bge.n	e044 <_printf_common+0x14>
    e042:	0013      	movs	r3, r2
    e044:	0022      	movs	r2, r4
    e046:	602b      	str	r3, [r5, #0]
    e048:	3243      	adds	r2, #67	; 0x43
    e04a:	7812      	ldrb	r2, [r2, #0]
    e04c:	2a00      	cmp	r2, #0
    e04e:	d001      	beq.n	e054 <_printf_common+0x24>
    e050:	3301      	adds	r3, #1
    e052:	602b      	str	r3, [r5, #0]
    e054:	6823      	ldr	r3, [r4, #0]
    e056:	069b      	lsls	r3, r3, #26
    e058:	d502      	bpl.n	e060 <_printf_common+0x30>
    e05a:	682b      	ldr	r3, [r5, #0]
    e05c:	3302      	adds	r3, #2
    e05e:	602b      	str	r3, [r5, #0]
    e060:	2706      	movs	r7, #6
    e062:	6823      	ldr	r3, [r4, #0]
    e064:	401f      	ands	r7, r3
    e066:	d027      	beq.n	e0b8 <_printf_common+0x88>
    e068:	0023      	movs	r3, r4
    e06a:	3343      	adds	r3, #67	; 0x43
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	1e5a      	subs	r2, r3, #1
    e070:	4193      	sbcs	r3, r2
    e072:	6822      	ldr	r2, [r4, #0]
    e074:	0692      	lsls	r2, r2, #26
    e076:	d430      	bmi.n	e0da <_printf_common+0xaa>
    e078:	0022      	movs	r2, r4
    e07a:	9901      	ldr	r1, [sp, #4]
    e07c:	3243      	adds	r2, #67	; 0x43
    e07e:	9800      	ldr	r0, [sp, #0]
    e080:	9e08      	ldr	r6, [sp, #32]
    e082:	47b0      	blx	r6
    e084:	1c43      	adds	r3, r0, #1
    e086:	d025      	beq.n	e0d4 <_printf_common+0xa4>
    e088:	2306      	movs	r3, #6
    e08a:	6820      	ldr	r0, [r4, #0]
    e08c:	682a      	ldr	r2, [r5, #0]
    e08e:	68e1      	ldr	r1, [r4, #12]
    e090:	4003      	ands	r3, r0
    e092:	2500      	movs	r5, #0
    e094:	2b04      	cmp	r3, #4
    e096:	d103      	bne.n	e0a0 <_printf_common+0x70>
    e098:	1a8d      	subs	r5, r1, r2
    e09a:	43eb      	mvns	r3, r5
    e09c:	17db      	asrs	r3, r3, #31
    e09e:	401d      	ands	r5, r3
    e0a0:	68a3      	ldr	r3, [r4, #8]
    e0a2:	6922      	ldr	r2, [r4, #16]
    e0a4:	4293      	cmp	r3, r2
    e0a6:	dd01      	ble.n	e0ac <_printf_common+0x7c>
    e0a8:	1a9b      	subs	r3, r3, r2
    e0aa:	18ed      	adds	r5, r5, r3
    e0ac:	2700      	movs	r7, #0
    e0ae:	42bd      	cmp	r5, r7
    e0b0:	d120      	bne.n	e0f4 <_printf_common+0xc4>
    e0b2:	2000      	movs	r0, #0
    e0b4:	e010      	b.n	e0d8 <_printf_common+0xa8>
    e0b6:	3701      	adds	r7, #1
    e0b8:	68e3      	ldr	r3, [r4, #12]
    e0ba:	682a      	ldr	r2, [r5, #0]
    e0bc:	1a9b      	subs	r3, r3, r2
    e0be:	429f      	cmp	r7, r3
    e0c0:	dad2      	bge.n	e068 <_printf_common+0x38>
    e0c2:	0022      	movs	r2, r4
    e0c4:	2301      	movs	r3, #1
    e0c6:	3219      	adds	r2, #25
    e0c8:	9901      	ldr	r1, [sp, #4]
    e0ca:	9800      	ldr	r0, [sp, #0]
    e0cc:	9e08      	ldr	r6, [sp, #32]
    e0ce:	47b0      	blx	r6
    e0d0:	1c43      	adds	r3, r0, #1
    e0d2:	d1f0      	bne.n	e0b6 <_printf_common+0x86>
    e0d4:	2001      	movs	r0, #1
    e0d6:	4240      	negs	r0, r0
    e0d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e0da:	2030      	movs	r0, #48	; 0x30
    e0dc:	18e1      	adds	r1, r4, r3
    e0de:	3143      	adds	r1, #67	; 0x43
    e0e0:	7008      	strb	r0, [r1, #0]
    e0e2:	0021      	movs	r1, r4
    e0e4:	1c5a      	adds	r2, r3, #1
    e0e6:	3145      	adds	r1, #69	; 0x45
    e0e8:	7809      	ldrb	r1, [r1, #0]
    e0ea:	18a2      	adds	r2, r4, r2
    e0ec:	3243      	adds	r2, #67	; 0x43
    e0ee:	3302      	adds	r3, #2
    e0f0:	7011      	strb	r1, [r2, #0]
    e0f2:	e7c1      	b.n	e078 <_printf_common+0x48>
    e0f4:	0022      	movs	r2, r4
    e0f6:	2301      	movs	r3, #1
    e0f8:	321a      	adds	r2, #26
    e0fa:	9901      	ldr	r1, [sp, #4]
    e0fc:	9800      	ldr	r0, [sp, #0]
    e0fe:	9e08      	ldr	r6, [sp, #32]
    e100:	47b0      	blx	r6
    e102:	1c43      	adds	r3, r0, #1
    e104:	d0e6      	beq.n	e0d4 <_printf_common+0xa4>
    e106:	3701      	adds	r7, #1
    e108:	e7d1      	b.n	e0ae <_printf_common+0x7e>
	...

0000e10c <_printf_i>:
    e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e10e:	b08b      	sub	sp, #44	; 0x2c
    e110:	9206      	str	r2, [sp, #24]
    e112:	000a      	movs	r2, r1
    e114:	3243      	adds	r2, #67	; 0x43
    e116:	9307      	str	r3, [sp, #28]
    e118:	9005      	str	r0, [sp, #20]
    e11a:	9204      	str	r2, [sp, #16]
    e11c:	7e0a      	ldrb	r2, [r1, #24]
    e11e:	000c      	movs	r4, r1
    e120:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e122:	2a6e      	cmp	r2, #110	; 0x6e
    e124:	d100      	bne.n	e128 <_printf_i+0x1c>
    e126:	e08f      	b.n	e248 <_printf_i+0x13c>
    e128:	d817      	bhi.n	e15a <_printf_i+0x4e>
    e12a:	2a63      	cmp	r2, #99	; 0x63
    e12c:	d02c      	beq.n	e188 <_printf_i+0x7c>
    e12e:	d808      	bhi.n	e142 <_printf_i+0x36>
    e130:	2a00      	cmp	r2, #0
    e132:	d100      	bne.n	e136 <_printf_i+0x2a>
    e134:	e099      	b.n	e26a <_printf_i+0x15e>
    e136:	2a58      	cmp	r2, #88	; 0x58
    e138:	d054      	beq.n	e1e4 <_printf_i+0xd8>
    e13a:	0026      	movs	r6, r4
    e13c:	3642      	adds	r6, #66	; 0x42
    e13e:	7032      	strb	r2, [r6, #0]
    e140:	e029      	b.n	e196 <_printf_i+0x8a>
    e142:	2a64      	cmp	r2, #100	; 0x64
    e144:	d001      	beq.n	e14a <_printf_i+0x3e>
    e146:	2a69      	cmp	r2, #105	; 0x69
    e148:	d1f7      	bne.n	e13a <_printf_i+0x2e>
    e14a:	6821      	ldr	r1, [r4, #0]
    e14c:	681a      	ldr	r2, [r3, #0]
    e14e:	0608      	lsls	r0, r1, #24
    e150:	d523      	bpl.n	e19a <_printf_i+0x8e>
    e152:	1d11      	adds	r1, r2, #4
    e154:	6019      	str	r1, [r3, #0]
    e156:	6815      	ldr	r5, [r2, #0]
    e158:	e025      	b.n	e1a6 <_printf_i+0x9a>
    e15a:	2a73      	cmp	r2, #115	; 0x73
    e15c:	d100      	bne.n	e160 <_printf_i+0x54>
    e15e:	e088      	b.n	e272 <_printf_i+0x166>
    e160:	d808      	bhi.n	e174 <_printf_i+0x68>
    e162:	2a6f      	cmp	r2, #111	; 0x6f
    e164:	d029      	beq.n	e1ba <_printf_i+0xae>
    e166:	2a70      	cmp	r2, #112	; 0x70
    e168:	d1e7      	bne.n	e13a <_printf_i+0x2e>
    e16a:	2220      	movs	r2, #32
    e16c:	6809      	ldr	r1, [r1, #0]
    e16e:	430a      	orrs	r2, r1
    e170:	6022      	str	r2, [r4, #0]
    e172:	e003      	b.n	e17c <_printf_i+0x70>
    e174:	2a75      	cmp	r2, #117	; 0x75
    e176:	d020      	beq.n	e1ba <_printf_i+0xae>
    e178:	2a78      	cmp	r2, #120	; 0x78
    e17a:	d1de      	bne.n	e13a <_printf_i+0x2e>
    e17c:	0022      	movs	r2, r4
    e17e:	2178      	movs	r1, #120	; 0x78
    e180:	3245      	adds	r2, #69	; 0x45
    e182:	7011      	strb	r1, [r2, #0]
    e184:	4a6c      	ldr	r2, [pc, #432]	; (e338 <_printf_i+0x22c>)
    e186:	e030      	b.n	e1ea <_printf_i+0xde>
    e188:	000e      	movs	r6, r1
    e18a:	681a      	ldr	r2, [r3, #0]
    e18c:	3642      	adds	r6, #66	; 0x42
    e18e:	1d11      	adds	r1, r2, #4
    e190:	6019      	str	r1, [r3, #0]
    e192:	6813      	ldr	r3, [r2, #0]
    e194:	7033      	strb	r3, [r6, #0]
    e196:	2301      	movs	r3, #1
    e198:	e079      	b.n	e28e <_printf_i+0x182>
    e19a:	0649      	lsls	r1, r1, #25
    e19c:	d5d9      	bpl.n	e152 <_printf_i+0x46>
    e19e:	1d11      	adds	r1, r2, #4
    e1a0:	6019      	str	r1, [r3, #0]
    e1a2:	2300      	movs	r3, #0
    e1a4:	5ed5      	ldrsh	r5, [r2, r3]
    e1a6:	2d00      	cmp	r5, #0
    e1a8:	da03      	bge.n	e1b2 <_printf_i+0xa6>
    e1aa:	232d      	movs	r3, #45	; 0x2d
    e1ac:	9a04      	ldr	r2, [sp, #16]
    e1ae:	426d      	negs	r5, r5
    e1b0:	7013      	strb	r3, [r2, #0]
    e1b2:	4b62      	ldr	r3, [pc, #392]	; (e33c <_printf_i+0x230>)
    e1b4:	270a      	movs	r7, #10
    e1b6:	9303      	str	r3, [sp, #12]
    e1b8:	e02f      	b.n	e21a <_printf_i+0x10e>
    e1ba:	6820      	ldr	r0, [r4, #0]
    e1bc:	6819      	ldr	r1, [r3, #0]
    e1be:	0605      	lsls	r5, r0, #24
    e1c0:	d503      	bpl.n	e1ca <_printf_i+0xbe>
    e1c2:	1d08      	adds	r0, r1, #4
    e1c4:	6018      	str	r0, [r3, #0]
    e1c6:	680d      	ldr	r5, [r1, #0]
    e1c8:	e005      	b.n	e1d6 <_printf_i+0xca>
    e1ca:	0640      	lsls	r0, r0, #25
    e1cc:	d5f9      	bpl.n	e1c2 <_printf_i+0xb6>
    e1ce:	680d      	ldr	r5, [r1, #0]
    e1d0:	1d08      	adds	r0, r1, #4
    e1d2:	6018      	str	r0, [r3, #0]
    e1d4:	b2ad      	uxth	r5, r5
    e1d6:	4b59      	ldr	r3, [pc, #356]	; (e33c <_printf_i+0x230>)
    e1d8:	2708      	movs	r7, #8
    e1da:	9303      	str	r3, [sp, #12]
    e1dc:	2a6f      	cmp	r2, #111	; 0x6f
    e1de:	d018      	beq.n	e212 <_printf_i+0x106>
    e1e0:	270a      	movs	r7, #10
    e1e2:	e016      	b.n	e212 <_printf_i+0x106>
    e1e4:	3145      	adds	r1, #69	; 0x45
    e1e6:	700a      	strb	r2, [r1, #0]
    e1e8:	4a54      	ldr	r2, [pc, #336]	; (e33c <_printf_i+0x230>)
    e1ea:	9203      	str	r2, [sp, #12]
    e1ec:	681a      	ldr	r2, [r3, #0]
    e1ee:	6821      	ldr	r1, [r4, #0]
    e1f0:	1d10      	adds	r0, r2, #4
    e1f2:	6018      	str	r0, [r3, #0]
    e1f4:	6815      	ldr	r5, [r2, #0]
    e1f6:	0608      	lsls	r0, r1, #24
    e1f8:	d522      	bpl.n	e240 <_printf_i+0x134>
    e1fa:	07cb      	lsls	r3, r1, #31
    e1fc:	d502      	bpl.n	e204 <_printf_i+0xf8>
    e1fe:	2320      	movs	r3, #32
    e200:	4319      	orrs	r1, r3
    e202:	6021      	str	r1, [r4, #0]
    e204:	2710      	movs	r7, #16
    e206:	2d00      	cmp	r5, #0
    e208:	d103      	bne.n	e212 <_printf_i+0x106>
    e20a:	2320      	movs	r3, #32
    e20c:	6822      	ldr	r2, [r4, #0]
    e20e:	439a      	bics	r2, r3
    e210:	6022      	str	r2, [r4, #0]
    e212:	0023      	movs	r3, r4
    e214:	2200      	movs	r2, #0
    e216:	3343      	adds	r3, #67	; 0x43
    e218:	701a      	strb	r2, [r3, #0]
    e21a:	6863      	ldr	r3, [r4, #4]
    e21c:	60a3      	str	r3, [r4, #8]
    e21e:	2b00      	cmp	r3, #0
    e220:	db5c      	blt.n	e2dc <_printf_i+0x1d0>
    e222:	2204      	movs	r2, #4
    e224:	6821      	ldr	r1, [r4, #0]
    e226:	4391      	bics	r1, r2
    e228:	6021      	str	r1, [r4, #0]
    e22a:	2d00      	cmp	r5, #0
    e22c:	d158      	bne.n	e2e0 <_printf_i+0x1d4>
    e22e:	9e04      	ldr	r6, [sp, #16]
    e230:	2b00      	cmp	r3, #0
    e232:	d064      	beq.n	e2fe <_printf_i+0x1f2>
    e234:	0026      	movs	r6, r4
    e236:	9b03      	ldr	r3, [sp, #12]
    e238:	3642      	adds	r6, #66	; 0x42
    e23a:	781b      	ldrb	r3, [r3, #0]
    e23c:	7033      	strb	r3, [r6, #0]
    e23e:	e05e      	b.n	e2fe <_printf_i+0x1f2>
    e240:	0648      	lsls	r0, r1, #25
    e242:	d5da      	bpl.n	e1fa <_printf_i+0xee>
    e244:	b2ad      	uxth	r5, r5
    e246:	e7d8      	b.n	e1fa <_printf_i+0xee>
    e248:	6809      	ldr	r1, [r1, #0]
    e24a:	681a      	ldr	r2, [r3, #0]
    e24c:	0608      	lsls	r0, r1, #24
    e24e:	d505      	bpl.n	e25c <_printf_i+0x150>
    e250:	1d11      	adds	r1, r2, #4
    e252:	6019      	str	r1, [r3, #0]
    e254:	6813      	ldr	r3, [r2, #0]
    e256:	6962      	ldr	r2, [r4, #20]
    e258:	601a      	str	r2, [r3, #0]
    e25a:	e006      	b.n	e26a <_printf_i+0x15e>
    e25c:	0649      	lsls	r1, r1, #25
    e25e:	d5f7      	bpl.n	e250 <_printf_i+0x144>
    e260:	1d11      	adds	r1, r2, #4
    e262:	6019      	str	r1, [r3, #0]
    e264:	6813      	ldr	r3, [r2, #0]
    e266:	8aa2      	ldrh	r2, [r4, #20]
    e268:	801a      	strh	r2, [r3, #0]
    e26a:	2300      	movs	r3, #0
    e26c:	9e04      	ldr	r6, [sp, #16]
    e26e:	6123      	str	r3, [r4, #16]
    e270:	e054      	b.n	e31c <_printf_i+0x210>
    e272:	681a      	ldr	r2, [r3, #0]
    e274:	1d11      	adds	r1, r2, #4
    e276:	6019      	str	r1, [r3, #0]
    e278:	6816      	ldr	r6, [r2, #0]
    e27a:	2100      	movs	r1, #0
    e27c:	6862      	ldr	r2, [r4, #4]
    e27e:	0030      	movs	r0, r6
    e280:	f000 f870 	bl	e364 <memchr>
    e284:	2800      	cmp	r0, #0
    e286:	d001      	beq.n	e28c <_printf_i+0x180>
    e288:	1b80      	subs	r0, r0, r6
    e28a:	6060      	str	r0, [r4, #4]
    e28c:	6863      	ldr	r3, [r4, #4]
    e28e:	6123      	str	r3, [r4, #16]
    e290:	2300      	movs	r3, #0
    e292:	9a04      	ldr	r2, [sp, #16]
    e294:	7013      	strb	r3, [r2, #0]
    e296:	e041      	b.n	e31c <_printf_i+0x210>
    e298:	6923      	ldr	r3, [r4, #16]
    e29a:	0032      	movs	r2, r6
    e29c:	9906      	ldr	r1, [sp, #24]
    e29e:	9805      	ldr	r0, [sp, #20]
    e2a0:	9d07      	ldr	r5, [sp, #28]
    e2a2:	47a8      	blx	r5
    e2a4:	1c43      	adds	r3, r0, #1
    e2a6:	d043      	beq.n	e330 <_printf_i+0x224>
    e2a8:	6823      	ldr	r3, [r4, #0]
    e2aa:	2500      	movs	r5, #0
    e2ac:	079b      	lsls	r3, r3, #30
    e2ae:	d40f      	bmi.n	e2d0 <_printf_i+0x1c4>
    e2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e2b2:	68e0      	ldr	r0, [r4, #12]
    e2b4:	4298      	cmp	r0, r3
    e2b6:	da3d      	bge.n	e334 <_printf_i+0x228>
    e2b8:	0018      	movs	r0, r3
    e2ba:	e03b      	b.n	e334 <_printf_i+0x228>
    e2bc:	0022      	movs	r2, r4
    e2be:	2301      	movs	r3, #1
    e2c0:	3219      	adds	r2, #25
    e2c2:	9906      	ldr	r1, [sp, #24]
    e2c4:	9805      	ldr	r0, [sp, #20]
    e2c6:	9e07      	ldr	r6, [sp, #28]
    e2c8:	47b0      	blx	r6
    e2ca:	1c43      	adds	r3, r0, #1
    e2cc:	d030      	beq.n	e330 <_printf_i+0x224>
    e2ce:	3501      	adds	r5, #1
    e2d0:	68e3      	ldr	r3, [r4, #12]
    e2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e2d4:	1a9b      	subs	r3, r3, r2
    e2d6:	429d      	cmp	r5, r3
    e2d8:	dbf0      	blt.n	e2bc <_printf_i+0x1b0>
    e2da:	e7e9      	b.n	e2b0 <_printf_i+0x1a4>
    e2dc:	2d00      	cmp	r5, #0
    e2de:	d0a9      	beq.n	e234 <_printf_i+0x128>
    e2e0:	9e04      	ldr	r6, [sp, #16]
    e2e2:	0028      	movs	r0, r5
    e2e4:	0039      	movs	r1, r7
    e2e6:	f7fe fce9 	bl	ccbc <__aeabi_uidivmod>
    e2ea:	9b03      	ldr	r3, [sp, #12]
    e2ec:	3e01      	subs	r6, #1
    e2ee:	5c5b      	ldrb	r3, [r3, r1]
    e2f0:	0028      	movs	r0, r5
    e2f2:	7033      	strb	r3, [r6, #0]
    e2f4:	0039      	movs	r1, r7
    e2f6:	f7fe fc5b 	bl	cbb0 <__udivsi3>
    e2fa:	1e05      	subs	r5, r0, #0
    e2fc:	d1f1      	bne.n	e2e2 <_printf_i+0x1d6>
    e2fe:	2f08      	cmp	r7, #8
    e300:	d109      	bne.n	e316 <_printf_i+0x20a>
    e302:	6823      	ldr	r3, [r4, #0]
    e304:	07db      	lsls	r3, r3, #31
    e306:	d506      	bpl.n	e316 <_printf_i+0x20a>
    e308:	6863      	ldr	r3, [r4, #4]
    e30a:	6922      	ldr	r2, [r4, #16]
    e30c:	4293      	cmp	r3, r2
    e30e:	dc02      	bgt.n	e316 <_printf_i+0x20a>
    e310:	2330      	movs	r3, #48	; 0x30
    e312:	3e01      	subs	r6, #1
    e314:	7033      	strb	r3, [r6, #0]
    e316:	9b04      	ldr	r3, [sp, #16]
    e318:	1b9b      	subs	r3, r3, r6
    e31a:	6123      	str	r3, [r4, #16]
    e31c:	9b07      	ldr	r3, [sp, #28]
    e31e:	aa09      	add	r2, sp, #36	; 0x24
    e320:	9300      	str	r3, [sp, #0]
    e322:	0021      	movs	r1, r4
    e324:	9b06      	ldr	r3, [sp, #24]
    e326:	9805      	ldr	r0, [sp, #20]
    e328:	f7ff fe82 	bl	e030 <_printf_common>
    e32c:	1c43      	adds	r3, r0, #1
    e32e:	d1b3      	bne.n	e298 <_printf_i+0x18c>
    e330:	2001      	movs	r0, #1
    e332:	4240      	negs	r0, r0
    e334:	b00b      	add	sp, #44	; 0x2c
    e336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e338:	0000f9de 	.word	0x0000f9de
    e33c:	0000f9cd 	.word	0x0000f9cd

0000e340 <_sbrk_r>:
    e340:	2300      	movs	r3, #0
    e342:	b570      	push	{r4, r5, r6, lr}
    e344:	4c06      	ldr	r4, [pc, #24]	; (e360 <_sbrk_r+0x20>)
    e346:	0005      	movs	r5, r0
    e348:	0008      	movs	r0, r1
    e34a:	6023      	str	r3, [r4, #0]
    e34c:	f7fe fa48 	bl	c7e0 <_sbrk>
    e350:	1c43      	adds	r3, r0, #1
    e352:	d103      	bne.n	e35c <_sbrk_r+0x1c>
    e354:	6823      	ldr	r3, [r4, #0]
    e356:	2b00      	cmp	r3, #0
    e358:	d000      	beq.n	e35c <_sbrk_r+0x1c>
    e35a:	602b      	str	r3, [r5, #0]
    e35c:	bd70      	pop	{r4, r5, r6, pc}
    e35e:	46c0      	nop			; (mov r8, r8)
    e360:	20001f0c 	.word	0x20001f0c

0000e364 <memchr>:
    e364:	b2c9      	uxtb	r1, r1
    e366:	1882      	adds	r2, r0, r2
    e368:	4290      	cmp	r0, r2
    e36a:	d101      	bne.n	e370 <memchr+0xc>
    e36c:	2000      	movs	r0, #0
    e36e:	4770      	bx	lr
    e370:	7803      	ldrb	r3, [r0, #0]
    e372:	428b      	cmp	r3, r1
    e374:	d0fb      	beq.n	e36e <memchr+0xa>
    e376:	3001      	adds	r0, #1
    e378:	e7f6      	b.n	e368 <memchr+0x4>

0000e37a <memmove>:
    e37a:	b510      	push	{r4, lr}
    e37c:	4288      	cmp	r0, r1
    e37e:	d902      	bls.n	e386 <memmove+0xc>
    e380:	188b      	adds	r3, r1, r2
    e382:	4298      	cmp	r0, r3
    e384:	d308      	bcc.n	e398 <memmove+0x1e>
    e386:	2300      	movs	r3, #0
    e388:	429a      	cmp	r2, r3
    e38a:	d007      	beq.n	e39c <memmove+0x22>
    e38c:	5ccc      	ldrb	r4, [r1, r3]
    e38e:	54c4      	strb	r4, [r0, r3]
    e390:	3301      	adds	r3, #1
    e392:	e7f9      	b.n	e388 <memmove+0xe>
    e394:	5c8b      	ldrb	r3, [r1, r2]
    e396:	5483      	strb	r3, [r0, r2]
    e398:	3a01      	subs	r2, #1
    e39a:	d2fb      	bcs.n	e394 <memmove+0x1a>
    e39c:	bd10      	pop	{r4, pc}

0000e39e <__malloc_lock>:
    e39e:	4770      	bx	lr

0000e3a0 <__malloc_unlock>:
    e3a0:	4770      	bx	lr

0000e3a2 <_realloc_r>:
    e3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3a4:	0007      	movs	r7, r0
    e3a6:	000d      	movs	r5, r1
    e3a8:	0016      	movs	r6, r2
    e3aa:	2900      	cmp	r1, #0
    e3ac:	d105      	bne.n	e3ba <_realloc_r+0x18>
    e3ae:	0011      	movs	r1, r2
    e3b0:	f7ff fc7a 	bl	dca8 <_malloc_r>
    e3b4:	0004      	movs	r4, r0
    e3b6:	0020      	movs	r0, r4
    e3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3ba:	2a00      	cmp	r2, #0
    e3bc:	d103      	bne.n	e3c6 <_realloc_r+0x24>
    e3be:	f7ff fc29 	bl	dc14 <_free_r>
    e3c2:	0034      	movs	r4, r6
    e3c4:	e7f7      	b.n	e3b6 <_realloc_r+0x14>
    e3c6:	f000 f812 	bl	e3ee <_malloc_usable_size_r>
    e3ca:	002c      	movs	r4, r5
    e3cc:	4286      	cmp	r6, r0
    e3ce:	d9f2      	bls.n	e3b6 <_realloc_r+0x14>
    e3d0:	0031      	movs	r1, r6
    e3d2:	0038      	movs	r0, r7
    e3d4:	f7ff fc68 	bl	dca8 <_malloc_r>
    e3d8:	1e04      	subs	r4, r0, #0
    e3da:	d0ec      	beq.n	e3b6 <_realloc_r+0x14>
    e3dc:	0029      	movs	r1, r5
    e3de:	0032      	movs	r2, r6
    e3e0:	f7ff fb94 	bl	db0c <memcpy>
    e3e4:	0029      	movs	r1, r5
    e3e6:	0038      	movs	r0, r7
    e3e8:	f7ff fc14 	bl	dc14 <_free_r>
    e3ec:	e7e3      	b.n	e3b6 <_realloc_r+0x14>

0000e3ee <_malloc_usable_size_r>:
    e3ee:	1f0b      	subs	r3, r1, #4
    e3f0:	681b      	ldr	r3, [r3, #0]
    e3f2:	1f18      	subs	r0, r3, #4
    e3f4:	2b00      	cmp	r3, #0
    e3f6:	da01      	bge.n	e3fc <_malloc_usable_size_r+0xe>
    e3f8:	580b      	ldr	r3, [r1, r0]
    e3fa:	18c0      	adds	r0, r0, r3
    e3fc:	4770      	bx	lr
    e3fe:	0000      	movs	r0, r0
    e400:	42000800 	.word	0x42000800
    e404:	42000c00 	.word	0x42000c00
    e408:	42001000 	.word	0x42001000
    e40c:	42001400 	.word	0x42001400
    e410:	42001800 	.word	0x42001800
    e414:	42001c00 	.word	0x42001c00
    e418:	000016e4 	.word	0x000016e4
    e41c:	000016e4 	.word	0x000016e4
    e420:	000016e4 	.word	0x000016e4
    e424:	00001592 	.word	0x00001592
    e428:	00001592 	.word	0x00001592
    e42c:	000016e4 	.word	0x000016e4
    e430:	00001592 	.word	0x00001592
    e434:	00001592 	.word	0x00001592
    e438:	000016e4 	.word	0x000016e4
    e43c:	000016e4 	.word	0x000016e4
    e440:	00001592 	.word	0x00001592
    e444:	000016e4 	.word	0x000016e4
    e448:	00001592 	.word	0x00001592
    e44c:	00001592 	.word	0x00001592
    e450:	00001592 	.word	0x00001592
    e454:	000016e4 	.word	0x000016e4
    e458:	000016e4 	.word	0x000016e4
    e45c:	000016e4 	.word	0x000016e4
    e460:	00001592 	.word	0x00001592
    e464:	000016e4 	.word	0x000016e4
    e468:	000016e4 	.word	0x000016e4
    e46c:	00001592 	.word	0x00001592
    e470:	000016e4 	.word	0x000016e4
    e474:	00001592 	.word	0x00001592
    e478:	00001592 	.word	0x00001592
    e47c:	000016e4 	.word	0x000016e4
    e480:	00001592 	.word	0x00001592
    e484:	000016e4 	.word	0x000016e4
    e488:	000016e4 	.word	0x000016e4
    e48c:	0000174a 	.word	0x0000174a
    e490:	0000174a 	.word	0x0000174a
    e494:	00001592 	.word	0x00001592
    e498:	0000174a 	.word	0x0000174a
    e49c:	0000174a 	.word	0x0000174a
    e4a0:	00001592 	.word	0x00001592
    e4a4:	00001592 	.word	0x00001592
    e4a8:	0000174a 	.word	0x0000174a
    e4ac:	00001592 	.word	0x00001592
    e4b0:	0000174a 	.word	0x0000174a
    e4b4:	0000174a 	.word	0x0000174a
    e4b8:	0000174a 	.word	0x0000174a
    e4bc:	00001592 	.word	0x00001592
    e4c0:	00001592 	.word	0x00001592
    e4c4:	00001592 	.word	0x00001592
    e4c8:	0000174a 	.word	0x0000174a
    e4cc:	00001592 	.word	0x00001592
    e4d0:	00001592 	.word	0x00001592
    e4d4:	0000174a 	.word	0x0000174a
    e4d8:	00001592 	.word	0x00001592
    e4dc:	0000174a 	.word	0x0000174a
    e4e0:	0000174a 	.word	0x0000174a
    e4e4:	00001592 	.word	0x00001592
    e4e8:	0000174a 	.word	0x0000174a
    e4ec:	00001592 	.word	0x00001592
    e4f0:	00001592 	.word	0x00001592
    e4f4:	0000174a 	.word	0x0000174a

0000e4f8 <confirmed_service_supported>:
    e4f8:	03020100 07060504 0b0a0908 0f0e0d0c     ................
    e508:	13121110 17161514 25231918 00002726     ..........#%&'..

0000e518 <unconfirmed_service_supported>:
    e518:	1d1c1b1a 21201f1e 00002422 00002822     ...... !"$.."(..
    e528:	00002766 00002772 0000277c 00002786     f'..r'..|'...'..
    e538:	00002790 0000279a 000027a4 000027ae     .'...'...'...'..
    e548:	000027b8 000027c2 000027cc 000027d6     .'...'...'...'..
    e558:	00002822 00002822 00002822 00002822     "(.."(.."(.."(..
    e568:	00002822 00002822 00002822 00002822     "(.."(.."(.."(..
    e578:	00002822 00002822 00002822 00002822     "(.."(.."(.."(..
    e588:	00002822 00002822 00002822 00002822     "(.."(.."(.."(..
    e598:	00002822 00002822 00002822 00002822     "(.."(.."(.."(..
    e5a8:	000027f6 00002a2a 00002a2a 000029ca     .'..**..**...)..
    e5b8:	000029ce 000029c6 000029ce 000029ce     .)...)...)...)..
    e5c8:	000029d2 000029d2 00002c6a 00002c52     .)...)..j,..R,..
    e5d8:	00002c56 00002c5a 00002c60 00002c66     V,..Z,..`,..f,..
    e5e8:	00003424 00003396 000033a2 000033b8     $4...3...3...3..
    e5f8:	000033ca 000033dc 000033ee 00003400     .3...3...3...4..
    e608:	00003412 00004608 00004632 00004632     .4...F..2F..2F..
    e618:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e628:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e638:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e648:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e658:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e668:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e678:	00004632 00004632 000045c0 00004632     2F..2F...E..2F..
    e688:	00004632 00004632 000045b0 00004632     2F..2F...E..2F..
    e698:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e6a8:	0000456c 00004632 00004584 00004632     lE..2F...E..2F..
    e6b8:	00004596 00004632 00004612 00004632     .E..2F...F..2F..
    e6c8:	00004632 00004632 000045a0 00004632     2F..2F...E..2F..
    e6d8:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e6e8:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e6f8:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e708:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e718:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e728:	00004632 00004632 00004632 00004632     2F..2F..2F..2F..
    e738:	000045d0 00004632 00004632 00004632     .E..2F..2F..2F..
    e748:	00004632 00004632 00004622 00004774     2F..2F.."F..tG..
    e758:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e768:	0000478a 0000478a 0000478a 00004774     .G...G...G..tG..
    e778:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e788:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e798:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e7a8:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e7b8:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e7c8:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e7d8:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e7e8:	00004774 0000478a 0000478a 0000478a     tG...G...G...G..
    e7f8:	00004774 0000478a 0000478a 0000478a     tG...G...G...G..
    e808:	0000478a 0000478a 00004774 0000478a     .G...G..tG...G..
    e818:	00004774 0000478a 00004774 0000478a     tG...G..tG...G..
    e828:	00004750 0000478a 0000478a 0000478a     PG...G...G...G..
    e838:	00004726 0000478a 0000478a 0000478a     &G...G...G...G..
    e848:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e858:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e868:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e878:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e888:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e898:	0000478a 0000478a 00004774 0000478a     .G...G..tG...G..
    e8a8:	0000478a 0000478a 0000478a 0000478a     .G...G...G...G..
    e8b8:	00004774                                tG..

0000e8bc <Analog_Input_Properties_Optional>:
    e8bc:	00000045 00000041 ffffffff              E...A.......

0000e8c8 <Analog_Input_Properties_Proprietary>:
    e8c8:	ffffffff                                ....

0000e8cc <Analog_Input_Properties_Required>:
    e8cc:	0000004b 0000004d 0000004f 00000055     K...M...O...U...
    e8dc:	0000006f 00000024 00000051 00000075     o...$...Q...u...
    e8ec:	ffffffff 41204652 6e657474 69746175     ....RF Attenuati
    e8fc:	31206e6f 00000000 41204652 6e657474     on 1....RF Atten
    e90c:	69746175 32206e6f 00000000 41204652     uation 2....RF A
    e91c:	6e657474 69746175 33206e6f 00000000     ttenuation 3....
    e92c:	41204652 6e657474 69746175 34206e6f     RF Attenuation 4
    e93c:	00000000 00004a18 00004a42 00004a42     .....J..BJ..BJ..
    e94c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    e95c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    e96c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    e97c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    e98c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    e99c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    e9ac:	00004a42 00004a42 000049d0 00004a42     BJ..BJ...I..BJ..
    e9bc:	00004a42 00004a42 000049c0 00004a42     BJ..BJ...I..BJ..
    e9cc:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    e9dc:	0000497c 00004a42 00004994 00004a42     |I..BJ...I..BJ..
    e9ec:	000049a6 00004a42 00004a22 00004a42     .I..BJ.."J..BJ..
    e9fc:	00004a42 00004a42 000049b0 00004a42     BJ..BJ...I..BJ..
    ea0c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    ea1c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    ea2c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    ea3c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    ea4c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    ea5c:	00004a42 00004a42 00004a42 00004a42     BJ..BJ..BJ..BJ..
    ea6c:	000049e0 00004a42 00004a42 00004a42     .I..BJ..BJ..BJ..
    ea7c:	00004a42 00004a42 00004a32 00004ba6     BJ..BJ..2J...K..
    ea8c:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    ea9c:	00004bb8 00004bb8 00004bb8 00004ba6     .K...K...K...K..
    eaac:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eabc:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eacc:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eadc:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eaec:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eafc:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eb0c:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eb1c:	00004ba6 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eb2c:	00004ba6 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eb3c:	00004bb8 00004bb8 00004ba6 00004bb8     .K...K...K...K..
    eb4c:	00004ba6 00004bb8 00004ba6 00004bb8     .K...K...K...K..
    eb5c:	00004b82 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eb6c:	00004b56 00004bb8 00004bb8 00004bb8     VK...K...K...K..
    eb7c:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eb8c:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    eb9c:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    ebac:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    ebbc:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    ebcc:	00004bb8 00004bb8 00004ba6 00004bb8     .K...K...K...K..
    ebdc:	00004bb8 00004bb8 00004bb8 00004bb8     .K...K...K...K..
    ebec:	00004ba6                                .K..

0000ebf0 <Analog_Value_Properties_Optional>:
    ebf0:	00000045 00000041 ffffffff              E...A.......

0000ebfc <Analog_Value_Properties_Proprietary>:
    ebfc:	ffffffff                                ....

0000ec00 <Analog_Value_Properties_Required>:
    ec00:	0000004b 0000004d 0000004f 00000055     K...M...O...U...
    ec10:	0000006f 00000024 00000051 00000075     o...$...Q...u...
    ec20:	ffffffff 746e6f43 206c6f72 6e676953     ....Control Sign
    ec30:	4d206c61 6d696e69 00006d75 746e6f43     al Minimum..Cont
    ec40:	206c6f72 6e676953 4d206c61 6d697861     rol Signal Maxim
    ec50:	00006d75 00004fda 00004fec 00004fec     um...O...O...O..
    ec60:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ec70:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ec80:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ec90:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    eca0:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ecb0:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ecc0:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ecd0:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ece0:	00004fec 00004fec 00004fec 00004fda     .O...O...O...O..
    ecf0:	00004fda 00004fec 00004fda 00004fec     .O...O...O...O..
    ed00:	00004fda 00004fec 00004fb6 00004fec     .O...O...O...O..
    ed10:	00004fec 00004fec 00004f8a 00004fec     .O...O...O...O..
    ed20:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ed30:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ed40:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ed50:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ed60:	00004fec 00004fec 00004fec 00004fec     .O...O...O...O..
    ed70:	00004fec 00004fec 00004fec 00004fda     .O...O...O...O..
    ed80:	00004fda                                .O..

0000ed84 <Properties_Optional>:
    ed84:	00000004 0000002e ffffffff              ............

0000ed90 <Properties_Proprietary>:
    ed90:	ffffffff                                ....

0000ed94 <Properties_Required>:
    ed94:	0000004b 0000004d 0000004f 00000055     K...M...O...U...
    eda4:	0000006f 00000024 00000051 ffffffff     o...$...Q.......
    edb4:	4f204652 75707475 6e452074 656c6261     RF Output Enable
    edc4:	00000000 0066664f 00006e4f 746e6f43     ....Off.On..Cont
    edd4:	206c6f72 746c6f56 20656761 62616e45     rol Voltage Enab
    ede4:	0000656c 000056ce 00005570 00005728     le...V..pU..(W..
    edf4:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ee04:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ee14:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ee24:	00005728 00005728 000054ec 00005728     (W..(W...T..(W..
    ee34:	00005736 00005728 00005728 00005728     6W..(W..(W..(W..
    ee44:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ee54:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ee64:	00005728 00005728 0000555c 00005728     (W..(W..\U..(W..
    ee74:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ee84:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ee94:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    eea4:	00005500 00005728 00005728 00005728     .U..(W..(W..(W..
    eeb4:	000056ae 00005704 00005716 00005728     .V...W...W..(W..
    eec4:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    eed4:	00005548 00005728 00005728 000056e0     HU..(W..(W...V..
    eee4:	00005728 00005728 0000561a 00005728     (W..(W...V..(W..
    eef4:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ef04:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ef14:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ef24:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ef34:	00005728 00005728 000055ce 000055a0     (W..(W...U...U..
    ef44:	00005584 00005728 00005728 00005728     .U..(W..(W..(W..
    ef54:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ef64:	00005728 000056be 00005728 00005728     (W...V..(W..(W..
    ef74:	00005728 00005728 00005514 00005728     (W..(W...U..(W..
    ef84:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    ef94:	00005728 00005728 00005538 00005524     (W..(W..8U..$U..
    efa4:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    efb4:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    efc4:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    efd4:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    efe4:	00005728 00005592 00005728 00005728     (W...U..(W..(W..
    eff4:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    f004:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    f014:	00005728 00005728 00005728 00005728     (W..(W..(W..(W..
    f024:	00005728 000056f2 00005a3c 00005a4e     (W...V..<Z..NZ..
    f034:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f044:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f054:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f064:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f074:	00005a3c 00005a4e 00005a4e 00005a4e     <Z..NZ..NZ..NZ..
    f084:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f094:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f0a4:	00005a4e 00005a4e 00005a3c 00005a4e     NZ..NZ..<Z..NZ..
    f0b4:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f0c4:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f0d4:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f0e4:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f0f4:	00005a3c 0000590e 00005954 00005a4e     <Z...Y..TY..NZ..
    f104:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f114:	00005a3c 00005a4e 00005a4e 00005a4e     <Z..NZ..NZ..NZ..
    f124:	00005a4e 000058ce 00005a3c 000059a4     NZ...X..<Z...Y..
    f134:	00005a4e 00005a3c 00005a4e 00005a4e     NZ..<Z..NZ..NZ..
    f144:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f154:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f164:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f174:	00005a4e 00005a4e 00005a3c 00005a3c     NZ..NZ..<Z..<Z..
    f184:	00005a3c 00005a4e 00005a4e 00005a4e     <Z..NZ..NZ..NZ..
    f194:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f1a4:	00005a4e 00005a3c 00005a4e 00005a4e     NZ..<Z..NZ..NZ..
    f1b4:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f1c4:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f1d4:	00005a4e 00005a4e 00005a3c 00005a3c     NZ..NZ..<Z..<Z..
    f1e4:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f1f4:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f204:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f214:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f224:	00005a4e 00005a3c 00005a4e 00005a4e     NZ..<Z..NZ..NZ..
    f234:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f244:	00005a4e 00005a4e 00005a4e 00005a4e     NZ..NZ..NZ..NZ..
    f254:	00005a4e 00005a4e 00005a3c 00005a4e     NZ..NZ..<Z..NZ..
    f264:	00005a4e 00005a3c 444d4153 4d203132     NZ..<Z..SAMD21 M
    f274:	00505453                                STP.

0000f278 <Device_Properties_Optional>:
    f278:	0000001c 0000003a 00000040 0000003f     ....:...@...?...
    f288:	ffffffff                                ....

0000f28c <Device_Properties_Proprietary>:
    f28c:	ffffffff                                ....

0000f290 <Device_Properties_Required>:
    f290:	0000004b 0000004d 0000004f 00000070     K...M...O...p...
    f2a0:	00000079 00000078 00000046 0000002c     y...x...F...,...
    f2b0:	0000000c 00000062 0000008b 00000061     ....b.......a...
    f2c0:	00000060 0000004c 0000003e 0000006b     `...L...>...k...
    f2d0:	0000000b 00000049 0000001e 0000009b     ....I...........
    f2e0:	ffffffff 6e434142 4d207465 50542f53     ....BACnet MS/TP
    f2f0:	206e6f20 444d4153 00003132 6d726942      on SAMD21..Birm
    f300:	68676e69 202c6d61 62616c41 2c616d61     ingham, Alabama,
    f310:	41535520 00000000 76696e55 69737265      USA....Universi
    f320:	6f207974 654e2066 73617262 4c2d616b     ty of Nebraska-L
    f330:	6f636e69 00006e6c 6f626f52 6e794474     incoln..RobotDyn
    f340:	4d415320 00313244 39392e30 0000312e      SAMD21.0.99.1..
    f350:	2e302e31 00000031 696c6966 72657473     1.0.1...filister
    f360:	00000000 00005ad2 00005b30 00005bc2     .....Z..0[...[..
    f370:	00005d9e 00005d9e 00006320 00006354     .]...].. c..Tc..
    f380:	00006460 000064e0 00006582 00006720     `d...d...e.. g..
    f390:	0000679a 00006826 00006942 000063b6     .g..&h..Bi...c..
    f3a0:	000063e0 00006410 00006440 00006410     .c...d..@d...d..
    f3b0:	00006424 00006406 65747441 7461756e     $d...d..Attenuat
    f3c0:	006e6f69 61656c50 74206573 6f207061     ion.Please tap o
    f3d0:	6874206e 6f642065 00000074 61422020     n the dot...  Ba
    f3e0:	20206b63 00000000 74614420 6e612065     ck  .... Date an
    f3f0:	69542064 0020656d 39363120 7a484d20     d Time . 169 MHz
    f400:	00000020 35313920 7a484d20 00000020      ... 915 MHz ...
    f410:	342e3220 48472035 0000207a 00333231      2.45 GHz ..123.
    f420:	00363534 00393837 00002d3c 00524c43     456.789.<-..CLR.
    f430:	00004b4f 007a4847 35342e32 00000000     OK..GHz.2.45....
    f440:	00353139 00393631 20426420 00000000     915.169. dB ....
    f450:	74696e55 00000000 20393631 007a484d     Unit....169 MHz.
    f460:	20353139 007a484d 35342e32 7a484720     915 MHz.2.45 GHz
    f470:	00000000 70736944 0079616c 63655220     ....Display. Rec
    f480:	65766965 00002072 64323025 3025202e     eiver ..%02d. %0
    f490:	253a6432 3a643230 64323025 25202020     2d:%02d:%02d   %
    f4a0:	2f643230 64323025 3430252f 20202064     02d/%02d/%04d   
    f4b0:	20202020 20202020 20202020 30252020                   %0
    f4c0:	20206433 20202020 20202020 20202020     3d              
    f4d0:	20202020 20202020 33302520 20202064              %03d   
    f4e0:	20202020 20202020 20202020 20202020                     
    f4f0:	25202020 00643330 74736948 0079726f        %03d.History.
    f500:	64323025 3230253a 30253a64 00006432     %02d:%02d:%02d..
    f510:	64323025 3230252f 30252f64 00006434     %02d/%02d/%04d..
    f520:	49535352 00000000 65746e45 61442072     RSSI....Enter Da
    f530:	00006574 642f6d6d 79792f64 00007979     te..mm/dd/yyyy..
    f540:	65746e45 69542072 0000656d 6d3a6868     Enter Time..hh:m
    f550:	73733a6d 20202020 68343228 726f6620     m:ss    (24h for
    f560:	2974616d 00000000 75736956 003a6c61     mat)....Visual:.
    f570:	00736559 00006f4e 6e756f53 00203a64     Yes.No..Sound: .
    f580:	61432020 7262696c 20657461 65726353       Calibrate Scre
    f590:	20206e65 00000000 65532020 61442074     en  ....  Set Da
    f5a0:	20206574 00000000 65532020 69542074     te  ....  Set Ti
    f5b0:	2020656d 00000000 74746553 73676e69     me  ....Settings
    f5c0:	00000000 00009c00 00009cca 00009cca     ................
    f5d0:	00009cca 00009cca 00009cca 00009cca     ................
    f5e0:	00009cca 00009cca 00009cca 00009cca     ................
    f5f0:	00009cca 00009cca 00009cca 00009cca     ................
    f600:	00009cca 00009cca 00009cca 00009cca     ................
    f610:	00009cca 00009cca 00009cca 00009cca     ................
    f620:	00009cca 00009cca 00009cca 00009cca     ................
    f630:	00009cca 00009cca 00009cca 00009cca     ................
    f640:	00009cca 00009cca 00009cca 00009cca     ................
    f650:	00009cca 00009cca 00009cca 00009c1e     ................
    f660:	00009b6a 00009cca 00009b92 00009cca     j...............
    f670:	00009ba6 00009cca 00009c0c 00009cca     ................
    f680:	00009cca 00009cca 00009bb2 00009cca     ................
    f690:	00009cca 00009cca 00009cca 00009cca     ................
    f6a0:	00009cca 00009cca 00009cca 00009cca     ................
    f6b0:	00009cca 00009cca 00009cca 00009cca     ................
    f6c0:	00009cca 00009cca 00009cca 00009cca     ................
    f6d0:	00009cca 00009cca 00009cca 00009cca     ................
    f6e0:	00009cca 00009cca 00009cca 00009c32     ............2...
    f6f0:	00009bc6 00009e1e 00009e30 00009e30     ........0...0...
    f700:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f710:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f720:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f730:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f740:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f750:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f760:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f770:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f780:	00009e30 00009e30 00009e30 00009e1e     0...0...0.......
    f790:	00009e1e 00009e30 00009e1e 00009e30     ....0.......0...
    f7a0:	00009e1e 00009e30 00009dfa 00009e30     ....0.......0...
    f7b0:	00009e30 00009e30 00009dce 00009e30     0...0.......0...
    f7c0:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f7d0:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f7e0:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f7f0:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f800:	00009e30 00009e30 00009e30 00009e30     0...0...0...0...
    f810:	00009e30 00009e30 00009e30 00009e1e     0...0...0.......
    f820:	00009e1e                                ....

0000f824 <Properties_Optional>:
    f824:	0000006e ffffffff                       n.......

0000f82c <Properties_Proprietary>:
    f82c:	ffffffff                                ....

0000f830 <Properties_Required>:
    f830:	0000004b 0000004d 0000004f 00000055     K...M...O...U...
    f840:	0000006f 00000024 00000051 0000004a     o...$...Q...J...
    f850:	ffffffff 64756142 74615220 00000065     ....Baud Rate...
    f860:	706d6554 74617265 20657275 74696e55     Temperature Unit
    f870:	00000073 736c6543 00737569 72686146     s...Celsius.Fahr
    f880:	65686e65 00007469 30303639 00000000     enheit..9600....
    f890:	30323931 00000030 30343833 00000030     19200...38400...
    f8a0:	30363735 00000030 30383637 00000030     57600...76800...
    f8b0:	32353131 00003030 312d504e 00000000     115200..NP-1....

0000f8c0 <Network_Port_Properties_Optional>:
    f8c0:	000001a7 00000040 0000003f ffffffff     ....@...?.......

0000f8d0 <Network_Port_Properties_Proprietary>:
    f8d0:	ffffffff                                ....

0000f8d4 <Network_Port_Properties_Required>:
    f8d4:	0000004b 0000004d 0000004f 0000006f     K...M...O...o...
    f8e4:	00000067 00000051 000001ab 000001e2     g...Q...........
    f8f4:	000001a9 000001aa 000001a0 0000018f     ................
    f904:	000001a4 ffffffff 0000ab48 0000ab70     ........H...p...
    f914:	0000ab4c 0000ab50 0000ab54 0000ab58     L...P...T...X...
    f924:	0000ab5c 0000ab60 0000ab64 0000ab68     \...`...d...h...
    f934:	0c0b0a09 00000e0d 0000c058 0000c0b4     ........X.......
    f944:	0000c0b4 0000c052 0000c052 0000c06c     ....R...R...l...
    f954:	0000c05e 0000c072 0000c0a4 0000c1a4     ^...r...........
    f964:	0000c212 0000c212 0000c184 0000c196     ................
    f974:	0000c1b4 0000c188 0000c1c4 0000c200     ................
    f984:	74412020 756e6574 6f697461 0020206e       Attenuation  .
    f994:	69482020 726f7473 00202079 53522020       History  .  RS
    f9a4:	20204953 00000000 65532020 6e697474     SI  ....  Settin
    f9b4:	20207367 00000000 2b302d23 6c680020     gs  ....#-0+ .hl
    f9c4:	6665004c 47464567 32313000 36353433     L.efgEFG.0123456
    f9d4:	41393837 45444342 31300046 35343332     789ABCDEF.012345
    f9e4:	39383736 64636261 00006665              6789abcdef..

0000f9f0 <_init>:
    f9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9f2:	46c0      	nop			; (mov r8, r8)
    f9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f9f6:	bc08      	pop	{r3}
    f9f8:	469e      	mov	lr, r3
    f9fa:	4770      	bx	lr

0000f9fc <__init_array_start>:
    f9fc:	000000dd 	.word	0x000000dd

0000fa00 <_fini>:
    fa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa02:	46c0      	nop			; (mov r8, r8)
    fa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fa06:	bc08      	pop	{r3}
    fa08:	469e      	mov	lr, r3
    fa0a:	4770      	bx	lr

0000fa0c <__fini_array_start>:
    fa0c:	000000b5 	.word	0x000000b5
