
BACnet_MSTP_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036e8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  000036e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009e8  20000010  000036f8  00020010  2**2
                  ALLOC
  3 .stack        00002000  200009f8  000040e0  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005c94c  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000077eb  00000000  00000000  0007c9dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d016  00000000  00000000  000841c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000da0  00000000  00000000  000911de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013c8  00000000  00000000  00091f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b30  00000000  00000000  00093346  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001d000  00000000  00000000  000b4e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094af1  00000000  00000000  000d1e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000022f4  00000000  00000000  00166968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 29 00 20 d1 30 00 00 cd 30 00 00 cd 30 00 00     .). .0...0...0..
	...
      2c:	cd 30 00 00 00 00 00 00 00 00 00 00 cd 30 00 00     .0...........0..
      3c:	75 1f 00 00 cd 30 00 00 cd 30 00 00 55 22 00 00     u....0...0..U"..
      4c:	cd 30 00 00 a1 02 00 00 cd 30 00 00 cd 30 00 00     .0.......0...0..
      5c:	cd 30 00 00 cd 30 00 00 dd 28 00 00 ed 28 00 00     .0...0...(...(..
      6c:	fd 28 00 00 0d 29 00 00 1d 29 00 00 2d 29 00 00     .(...)...)..-)..
      7c:	cd 30 00 00 cd 30 00 00 cd 30 00 00 d5 22 00 00     .0...0...0..."..
      8c:	e5 22 00 00 f5 22 00 00 05 23 00 00 15 23 00 00     ."..."...#...#..
      9c:	65 02 00 00 cd 30 00 00 cd 30 00 00 cd 30 00 00     e....0...0...0..
      ac:	cd 30 00 00 00 00 00 00                             .0......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	000036e8 	.word	0x000036e8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	000036e8 	.word	0x000036e8
     10c:	000036e8 	.word	0x000036e8
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
     114:	b510      	push	{r4, lr}
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00002e01 	.word	0x00002e01
     140:	00003489 	.word	0x00003489
     144:	20000000 	.word	0x20000000
     148:	20000004 	.word	0x20000004
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
     150:	e000      	b.n	154 <delay_cycles_ms+0x4>
     152:	0010      	movs	r0, r2
     154:	1e42      	subs	r2, r0, #1
     156:	2800      	cmp	r0, #0
     158:	d00c      	beq.n	174 <delay_cycles_ms+0x24>
     15a:	4b07      	ldr	r3, [pc, #28]	; (178 <delay_cycles_ms+0x28>)
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d0f7      	beq.n	152 <delay_cycles_ms+0x2>
     162:	4906      	ldr	r1, [pc, #24]	; (17c <delay_cycles_ms+0x2c>)
     164:	604b      	str	r3, [r1, #4]
     166:	2300      	movs	r3, #0
     168:	608b      	str	r3, [r1, #8]
     16a:	4b04      	ldr	r3, [pc, #16]	; (17c <delay_cycles_ms+0x2c>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	03db      	lsls	r3, r3, #15
     170:	d5fb      	bpl.n	16a <delay_cycles_ms+0x1a>
     172:	e7ee      	b.n	152 <delay_cycles_ms+0x2>
     174:	4770      	bx	lr
     176:	46c0      	nop			; (mov r8, r8)
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <_adc_interrupt_handler>:
     180:	b570      	push	{r4, r5, r6, lr}
     182:	0080      	lsls	r0, r0, #2
     184:	4b36      	ldr	r3, [pc, #216]	; (260 <_adc_interrupt_handler+0xe0>)
     186:	58c5      	ldr	r5, [r0, r3]
     188:	682b      	ldr	r3, [r5, #0]
     18a:	7e1a      	ldrb	r2, [r3, #24]
     18c:	7ddc      	ldrb	r4, [r3, #23]
     18e:	4014      	ands	r4, r2
     190:	07e2      	lsls	r2, r4, #31
     192:	d416      	bmi.n	1c2 <_adc_interrupt_handler+0x42>
     194:	0763      	lsls	r3, r4, #29
     196:	d508      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
     198:	2304      	movs	r3, #4
     19a:	682a      	ldr	r2, [r5, #0]
     19c:	7613      	strb	r3, [r2, #24]
     19e:	7eeb      	ldrb	r3, [r5, #27]
     1a0:	079b      	lsls	r3, r3, #30
     1a2:	d502      	bpl.n	1aa <_adc_interrupt_handler+0x2a>
     1a4:	7eab      	ldrb	r3, [r5, #26]
     1a6:	079b      	lsls	r3, r3, #30
     1a8:	d452      	bmi.n	250 <_adc_interrupt_handler+0xd0>
     1aa:	07a3      	lsls	r3, r4, #30
     1ac:	d508      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
     1ae:	2302      	movs	r3, #2
     1b0:	682a      	ldr	r2, [r5, #0]
     1b2:	7613      	strb	r3, [r2, #24]
     1b4:	7eeb      	ldrb	r3, [r5, #27]
     1b6:	075b      	lsls	r3, r3, #29
     1b8:	d502      	bpl.n	1c0 <_adc_interrupt_handler+0x40>
     1ba:	7eab      	ldrb	r3, [r5, #26]
     1bc:	075b      	lsls	r3, r3, #29
     1be:	d44b      	bmi.n	258 <_adc_interrupt_handler+0xd8>
     1c0:	bd70      	pop	{r4, r5, r6, pc}
     1c2:	2201      	movs	r2, #1
     1c4:	761a      	strb	r2, [r3, #24]
     1c6:	682a      	ldr	r2, [r5, #0]
     1c8:	7e53      	ldrb	r3, [r2, #25]
     1ca:	b25b      	sxtb	r3, r3
     1cc:	2b00      	cmp	r3, #0
     1ce:	db27      	blt.n	220 <_adc_interrupt_handler+0xa0>
     1d0:	2100      	movs	r1, #0
     1d2:	2900      	cmp	r1, #0
     1d4:	d1f7      	bne.n	1c6 <_adc_interrupt_handler+0x46>
     1d6:	6968      	ldr	r0, [r5, #20]
     1d8:	1c83      	adds	r3, r0, #2
     1da:	616b      	str	r3, [r5, #20]
     1dc:	8b53      	ldrh	r3, [r2, #26]
     1de:	b29b      	uxth	r3, r3
     1e0:	8003      	strh	r3, [r0, #0]
     1e2:	8b2b      	ldrh	r3, [r5, #24]
     1e4:	3b01      	subs	r3, #1
     1e6:	b29b      	uxth	r3, r3
     1e8:	832b      	strh	r3, [r5, #24]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d01e      	beq.n	22c <_adc_interrupt_handler+0xac>
     1ee:	7f6b      	ldrb	r3, [r5, #29]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d0cf      	beq.n	194 <_adc_interrupt_handler+0x14>
     1f4:	682e      	ldr	r6, [r5, #0]
     1f6:	7e72      	ldrb	r2, [r6, #25]
     1f8:	b252      	sxtb	r2, r2
     1fa:	2a00      	cmp	r2, #0
     1fc:	db12      	blt.n	224 <_adc_interrupt_handler+0xa4>
     1fe:	0008      	movs	r0, r1
     200:	2800      	cmp	r0, #0
     202:	d1f8      	bne.n	1f6 <_adc_interrupt_handler+0x76>
     204:	7b32      	ldrb	r2, [r6, #12]
     206:	2102      	movs	r1, #2
     208:	430a      	orrs	r2, r1
     20a:	b2d2      	uxtb	r2, r2
     20c:	7332      	strb	r2, [r6, #12]
     20e:	682a      	ldr	r2, [r5, #0]
     210:	7e52      	ldrb	r2, [r2, #25]
     212:	b252      	sxtb	r2, r2
     214:	2a00      	cmp	r2, #0
     216:	db07      	blt.n	228 <_adc_interrupt_handler+0xa8>
     218:	0002      	movs	r2, r0
     21a:	2a00      	cmp	r2, #0
     21c:	d1f7      	bne.n	20e <_adc_interrupt_handler+0x8e>
     21e:	e7b9      	b.n	194 <_adc_interrupt_handler+0x14>
     220:	2101      	movs	r1, #1
     222:	e7d6      	b.n	1d2 <_adc_interrupt_handler+0x52>
     224:	0018      	movs	r0, r3
     226:	e7eb      	b.n	200 <_adc_interrupt_handler+0x80>
     228:	001a      	movs	r2, r3
     22a:	e7f6      	b.n	21a <_adc_interrupt_handler+0x9a>
     22c:	2301      	movs	r3, #1
     22e:	682a      	ldr	r2, [r5, #0]
     230:	7593      	strb	r3, [r2, #22]
     232:	7f2b      	ldrb	r3, [r5, #28]
     234:	2b05      	cmp	r3, #5
     236:	d1ad      	bne.n	194 <_adc_interrupt_handler+0x14>
     238:	2300      	movs	r3, #0
     23a:	772b      	strb	r3, [r5, #28]
     23c:	7eeb      	ldrb	r3, [r5, #27]
     23e:	07db      	lsls	r3, r3, #31
     240:	d5a8      	bpl.n	194 <_adc_interrupt_handler+0x14>
     242:	7eab      	ldrb	r3, [r5, #26]
     244:	07db      	lsls	r3, r3, #31
     246:	d5a5      	bpl.n	194 <_adc_interrupt_handler+0x14>
     248:	0028      	movs	r0, r5
     24a:	68ab      	ldr	r3, [r5, #8]
     24c:	4798      	blx	r3
     24e:	e7a1      	b.n	194 <_adc_interrupt_handler+0x14>
     250:	0028      	movs	r0, r5
     252:	68eb      	ldr	r3, [r5, #12]
     254:	4798      	blx	r3
     256:	e7a8      	b.n	1aa <_adc_interrupt_handler+0x2a>
     258:	692b      	ldr	r3, [r5, #16]
     25a:	0028      	movs	r0, r5
     25c:	4798      	blx	r3
     25e:	e7af      	b.n	1c0 <_adc_interrupt_handler+0x40>
     260:	200003b4 	.word	0x200003b4

00000264 <ADC_Handler>:
     264:	b510      	push	{r4, lr}
     266:	2000      	movs	r0, #0
     268:	4b01      	ldr	r3, [pc, #4]	; (270 <ADC_Handler+0xc>)
     26a:	4798      	blx	r3
     26c:	bd10      	pop	{r4, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00000181 	.word	0x00000181

00000274 <extint_register_callback>:
     274:	2a00      	cmp	r2, #0
     276:	d001      	beq.n	27c <extint_register_callback+0x8>
     278:	2017      	movs	r0, #23
     27a:	4770      	bx	lr
     27c:	008b      	lsls	r3, r1, #2
     27e:	4a07      	ldr	r2, [pc, #28]	; (29c <extint_register_callback+0x28>)
     280:	589b      	ldr	r3, [r3, r2]
     282:	2b00      	cmp	r3, #0
     284:	d003      	beq.n	28e <extint_register_callback+0x1a>
     286:	4283      	cmp	r3, r0
     288:	d005      	beq.n	296 <extint_register_callback+0x22>
     28a:	201d      	movs	r0, #29
     28c:	e7f5      	b.n	27a <extint_register_callback+0x6>
     28e:	0089      	lsls	r1, r1, #2
     290:	5088      	str	r0, [r1, r2]
     292:	2000      	movs	r0, #0
     294:	e7f1      	b.n	27a <extint_register_callback+0x6>
     296:	2000      	movs	r0, #0
     298:	e7ef      	b.n	27a <extint_register_callback+0x6>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	200003bc 	.word	0x200003bc

000002a0 <EIC_Handler>:
     2a0:	b510      	push	{r4, lr}
     2a2:	2200      	movs	r2, #0
     2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <EIC_Handler+0x44>)
     2a6:	701a      	strb	r2, [r3, #0]
     2a8:	e005      	b.n	2b6 <EIC_Handler+0x16>
     2aa:	480f      	ldr	r0, [pc, #60]	; (2e8 <EIC_Handler+0x48>)
     2ac:	e00a      	b.n	2c4 <EIC_Handler+0x24>
     2ae:	4a0d      	ldr	r2, [pc, #52]	; (2e4 <EIC_Handler+0x44>)
     2b0:	7813      	ldrb	r3, [r2, #0]
     2b2:	3301      	adds	r3, #1
     2b4:	7013      	strb	r3, [r2, #0]
     2b6:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <EIC_Handler+0x44>)
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b0f      	cmp	r3, #15
     2bc:	d811      	bhi.n	2e2 <EIC_Handler+0x42>
     2be:	2b1f      	cmp	r3, #31
     2c0:	d9f3      	bls.n	2aa <EIC_Handler+0xa>
     2c2:	2000      	movs	r0, #0
     2c4:	211f      	movs	r1, #31
     2c6:	4019      	ands	r1, r3
     2c8:	2201      	movs	r2, #1
     2ca:	408a      	lsls	r2, r1
     2cc:	6901      	ldr	r1, [r0, #16]
     2ce:	4211      	tst	r1, r2
     2d0:	d0ed      	beq.n	2ae <EIC_Handler+0xe>
     2d2:	6102      	str	r2, [r0, #16]
     2d4:	009b      	lsls	r3, r3, #2
     2d6:	4a05      	ldr	r2, [pc, #20]	; (2ec <EIC_Handler+0x4c>)
     2d8:	589b      	ldr	r3, [r3, r2]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e7      	beq.n	2ae <EIC_Handler+0xe>
     2de:	4798      	blx	r3
     2e0:	e7e5      	b.n	2ae <EIC_Handler+0xe>
     2e2:	bd10      	pop	{r4, pc}
     2e4:	200003b8 	.word	0x200003b8
     2e8:	40001800 	.word	0x40001800
     2ec:	200003bc 	.word	0x200003bc

000002f0 <_extint_enable>:
     2f0:	2200      	movs	r2, #0
     2f2:	2a00      	cmp	r2, #0
     2f4:	d006      	beq.n	304 <_extint_enable+0x14>
     2f6:	2300      	movs	r3, #0
     2f8:	2b00      	cmp	r3, #0
     2fa:	d00b      	beq.n	314 <_extint_enable+0x24>
     2fc:	2300      	movs	r3, #0
     2fe:	2b00      	cmp	r3, #0
     300:	d1f9      	bne.n	2f6 <_extint_enable+0x6>
     302:	4770      	bx	lr
     304:	4908      	ldr	r1, [pc, #32]	; (328 <_extint_enable+0x38>)
     306:	780b      	ldrb	r3, [r1, #0]
     308:	2002      	movs	r0, #2
     30a:	4303      	orrs	r3, r0
     30c:	b2db      	uxtb	r3, r3
     30e:	700b      	strb	r3, [r1, #0]
     310:	3201      	adds	r2, #1
     312:	e7ee      	b.n	2f2 <_extint_enable+0x2>
     314:	4a04      	ldr	r2, [pc, #16]	; (328 <_extint_enable+0x38>)
     316:	7852      	ldrb	r2, [r2, #1]
     318:	b252      	sxtb	r2, r2
     31a:	2a00      	cmp	r2, #0
     31c:	db01      	blt.n	322 <_extint_enable+0x32>
     31e:	3301      	adds	r3, #1
     320:	e7ea      	b.n	2f8 <_extint_enable+0x8>
     322:	2301      	movs	r3, #1
     324:	e7eb      	b.n	2fe <_extint_enable+0xe>
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <_system_extint_init>:
     32c:	b500      	push	{lr}
     32e:	b083      	sub	sp, #12
     330:	4a1b      	ldr	r2, [pc, #108]	; (3a0 <_system_extint_init+0x74>)
     332:	6993      	ldr	r3, [r2, #24]
     334:	2140      	movs	r1, #64	; 0x40
     336:	430b      	orrs	r3, r1
     338:	6193      	str	r3, [r2, #24]
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	700b      	strb	r3, [r1, #0]
     340:	2005      	movs	r0, #5
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <_system_extint_init+0x78>)
     344:	4798      	blx	r3
     346:	2005      	movs	r0, #5
     348:	4b17      	ldr	r3, [pc, #92]	; (3a8 <_system_extint_init+0x7c>)
     34a:	4798      	blx	r3
     34c:	2200      	movs	r2, #0
     34e:	2a00      	cmp	r2, #0
     350:	d006      	beq.n	360 <_system_extint_init+0x34>
     352:	2300      	movs	r3, #0
     354:	2b00      	cmp	r3, #0
     356:	d00b      	beq.n	370 <_system_extint_init+0x44>
     358:	2300      	movs	r3, #0
     35a:	2b00      	cmp	r3, #0
     35c:	d1f9      	bne.n	352 <_system_extint_init+0x26>
     35e:	e016      	b.n	38e <_system_extint_init+0x62>
     360:	4912      	ldr	r1, [pc, #72]	; (3ac <_system_extint_init+0x80>)
     362:	780b      	ldrb	r3, [r1, #0]
     364:	2001      	movs	r0, #1
     366:	4303      	orrs	r3, r0
     368:	b2db      	uxtb	r3, r3
     36a:	700b      	strb	r3, [r1, #0]
     36c:	3201      	adds	r2, #1
     36e:	e7ee      	b.n	34e <_system_extint_init+0x22>
     370:	4a0e      	ldr	r2, [pc, #56]	; (3ac <_system_extint_init+0x80>)
     372:	7852      	ldrb	r2, [r2, #1]
     374:	b252      	sxtb	r2, r2
     376:	2a00      	cmp	r2, #0
     378:	db01      	blt.n	37e <_system_extint_init+0x52>
     37a:	3301      	adds	r3, #1
     37c:	e7ea      	b.n	354 <_system_extint_init+0x28>
     37e:	2301      	movs	r3, #1
     380:	e7eb      	b.n	35a <_system_extint_init+0x2e>
     382:	0099      	lsls	r1, r3, #2
     384:	2000      	movs	r0, #0
     386:	4a0a      	ldr	r2, [pc, #40]	; (3b0 <_system_extint_init+0x84>)
     388:	5088      	str	r0, [r1, r2]
     38a:	3301      	adds	r3, #1
     38c:	b2db      	uxtb	r3, r3
     38e:	2b0f      	cmp	r3, #15
     390:	d9f7      	bls.n	382 <_system_extint_init+0x56>
     392:	2210      	movs	r2, #16
     394:	4b07      	ldr	r3, [pc, #28]	; (3b4 <_system_extint_init+0x88>)
     396:	601a      	str	r2, [r3, #0]
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_system_extint_init+0x8c>)
     39a:	4798      	blx	r3
     39c:	b003      	add	sp, #12
     39e:	bd00      	pop	{pc}
     3a0:	40000400 	.word	0x40000400
     3a4:	00002f35 	.word	0x00002f35
     3a8:	00002ead 	.word	0x00002ead
     3ac:	40001800 	.word	0x40001800
     3b0:	200003bc 	.word	0x200003bc
     3b4:	e000e100 	.word	0xe000e100
     3b8:	000002f1 	.word	0x000002f1

000003bc <extint_chan_set_config>:
     3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3be:	b083      	sub	sp, #12
     3c0:	0005      	movs	r5, r0
     3c2:	000c      	movs	r4, r1
     3c4:	a901      	add	r1, sp, #4
     3c6:	2300      	movs	r3, #0
     3c8:	704b      	strb	r3, [r1, #1]
     3ca:	70cb      	strb	r3, [r1, #3]
     3cc:	7923      	ldrb	r3, [r4, #4]
     3ce:	700b      	strb	r3, [r1, #0]
     3d0:	7a23      	ldrb	r3, [r4, #8]
     3d2:	708b      	strb	r3, [r1, #2]
     3d4:	7820      	ldrb	r0, [r4, #0]
     3d6:	4b16      	ldr	r3, [pc, #88]	; (430 <extint_chan_set_config+0x74>)
     3d8:	4798      	blx	r3
     3da:	2d1f      	cmp	r5, #31
     3dc:	d920      	bls.n	420 <extint_chan_set_config+0x64>
     3de:	2000      	movs	r0, #0
     3e0:	2207      	movs	r2, #7
     3e2:	402a      	ands	r2, r5
     3e4:	0092      	lsls	r2, r2, #2
     3e6:	7ae3      	ldrb	r3, [r4, #11]
     3e8:	001e      	movs	r6, r3
     3ea:	7aa1      	ldrb	r1, [r4, #10]
     3ec:	2900      	cmp	r1, #0
     3ee:	d002      	beq.n	3f6 <extint_chan_set_config+0x3a>
     3f0:	2608      	movs	r6, #8
     3f2:	431e      	orrs	r6, r3
     3f4:	b2f6      	uxtb	r6, r6
     3f6:	08eb      	lsrs	r3, r5, #3
     3f8:	3306      	adds	r3, #6
     3fa:	009b      	lsls	r3, r3, #2
     3fc:	5819      	ldr	r1, [r3, r0]
     3fe:	270f      	movs	r7, #15
     400:	4097      	lsls	r7, r2
     402:	43b9      	bics	r1, r7
     404:	4096      	lsls	r6, r2
     406:	0032      	movs	r2, r6
     408:	430a      	orrs	r2, r1
     40a:	501a      	str	r2, [r3, r0]
     40c:	7a63      	ldrb	r3, [r4, #9]
     40e:	2b00      	cmp	r3, #0
     410:	d108      	bne.n	424 <extint_chan_set_config+0x68>
     412:	6943      	ldr	r3, [r0, #20]
     414:	2201      	movs	r2, #1
     416:	40aa      	lsls	r2, r5
     418:	4393      	bics	r3, r2
     41a:	6143      	str	r3, [r0, #20]
     41c:	b003      	add	sp, #12
     41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     420:	4804      	ldr	r0, [pc, #16]	; (434 <extint_chan_set_config+0x78>)
     422:	e7dd      	b.n	3e0 <extint_chan_set_config+0x24>
     424:	6943      	ldr	r3, [r0, #20]
     426:	2201      	movs	r2, #1
     428:	40aa      	lsls	r2, r5
     42a:	4313      	orrs	r3, r2
     42c:	6143      	str	r3, [r0, #20]
     42e:	e7f5      	b.n	41c <extint_chan_set_config+0x60>
     430:	0000306d 	.word	0x0000306d
     434:	40001800 	.word	0x40001800

00000438 <rtc_calendar_enable>:
     438:	6802      	ldr	r2, [r0, #0]
     43a:	7a93      	ldrb	r3, [r2, #10]
     43c:	b25b      	sxtb	r3, r3
     43e:	2b00      	cmp	r3, #0
     440:	db08      	blt.n	454 <rtc_calendar_enable+0x1c>
     442:	2300      	movs	r3, #0
     444:	2b00      	cmp	r3, #0
     446:	d1f8      	bne.n	43a <rtc_calendar_enable+0x2>
     448:	8813      	ldrh	r3, [r2, #0]
     44a:	2102      	movs	r1, #2
     44c:	430b      	orrs	r3, r1
     44e:	b29b      	uxth	r3, r3
     450:	8013      	strh	r3, [r2, #0]
     452:	4770      	bx	lr
     454:	2301      	movs	r3, #1
     456:	e7f5      	b.n	444 <rtc_calendar_enable+0xc>

00000458 <rtc_calendar_disable>:
     458:	6802      	ldr	r2, [r0, #0]
     45a:	7a93      	ldrb	r3, [r2, #10]
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	db0a      	blt.n	478 <rtc_calendar_disable+0x20>
     462:	2300      	movs	r3, #0
     464:	2b00      	cmp	r3, #0
     466:	d1f8      	bne.n	45a <rtc_calendar_disable+0x2>
     468:	33c1      	adds	r3, #193	; 0xc1
     46a:	7193      	strb	r3, [r2, #6]
     46c:	7213      	strb	r3, [r2, #8]
     46e:	8813      	ldrh	r3, [r2, #0]
     470:	2102      	movs	r1, #2
     472:	438b      	bics	r3, r1
     474:	8013      	strh	r3, [r2, #0]
     476:	4770      	bx	lr
     478:	2301      	movs	r3, #1
     47a:	e7f3      	b.n	464 <rtc_calendar_disable+0xc>

0000047c <rtc_calendar_reset>:
     47c:	b570      	push	{r4, r5, r6, lr}
     47e:	0004      	movs	r4, r0
     480:	6805      	ldr	r5, [r0, #0]
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <rtc_calendar_reset+0x2c>)
     484:	4798      	blx	r3
     486:	6823      	ldr	r3, [r4, #0]
     488:	7a9b      	ldrb	r3, [r3, #10]
     48a:	b25b      	sxtb	r3, r3
     48c:	2b00      	cmp	r3, #0
     48e:	db08      	blt.n	4a2 <rtc_calendar_reset+0x26>
     490:	2300      	movs	r3, #0
     492:	2b00      	cmp	r3, #0
     494:	d1f7      	bne.n	486 <rtc_calendar_reset+0xa>
     496:	882b      	ldrh	r3, [r5, #0]
     498:	2201      	movs	r2, #1
     49a:	4313      	orrs	r3, r2
     49c:	b29b      	uxth	r3, r3
     49e:	802b      	strh	r3, [r5, #0]
     4a0:	bd70      	pop	{r4, r5, r6, pc}
     4a2:	2301      	movs	r3, #1
     4a4:	e7f5      	b.n	492 <rtc_calendar_reset+0x16>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000459 	.word	0x00000459

000004ac <rtc_calendar_time_to_register_value>:
     4ac:	88cb      	ldrh	r3, [r1, #6]
     4ae:	88c2      	ldrh	r2, [r0, #6]
     4b0:	1a9b      	subs	r3, r3, r2
     4b2:	069b      	lsls	r3, r3, #26
     4b4:	794a      	ldrb	r2, [r1, #5]
     4b6:	0592      	lsls	r2, r2, #22
     4b8:	4313      	orrs	r3, r2
     4ba:	790a      	ldrb	r2, [r1, #4]
     4bc:	0452      	lsls	r2, r2, #17
     4be:	4313      	orrs	r3, r2
     4c0:	788a      	ldrb	r2, [r1, #2]
     4c2:	0312      	lsls	r2, r2, #12
     4c4:	4313      	orrs	r3, r2
     4c6:	7902      	ldrb	r2, [r0, #4]
     4c8:	2a00      	cmp	r2, #0
     4ca:	d105      	bne.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4cc:	78ca      	ldrb	r2, [r1, #3]
     4ce:	2a00      	cmp	r2, #0
     4d0:	d002      	beq.n	4d8 <rtc_calendar_time_to_register_value+0x2c>
     4d2:	2280      	movs	r2, #128	; 0x80
     4d4:	0252      	lsls	r2, r2, #9
     4d6:	4313      	orrs	r3, r2
     4d8:	7848      	ldrb	r0, [r1, #1]
     4da:	0180      	lsls	r0, r0, #6
     4dc:	4303      	orrs	r3, r0
     4de:	7808      	ldrb	r0, [r1, #0]
     4e0:	4318      	orrs	r0, r3
     4e2:	4770      	bx	lr

000004e4 <rtc_calendar_set_time>:
     4e4:	b510      	push	{r4, lr}
     4e6:	6804      	ldr	r4, [r0, #0]
     4e8:	4b06      	ldr	r3, [pc, #24]	; (504 <rtc_calendar_set_time+0x20>)
     4ea:	4798      	blx	r3
     4ec:	7aa3      	ldrb	r3, [r4, #10]
     4ee:	b25b      	sxtb	r3, r3
     4f0:	2b00      	cmp	r3, #0
     4f2:	db04      	blt.n	4fe <rtc_calendar_set_time+0x1a>
     4f4:	2300      	movs	r3, #0
     4f6:	2b00      	cmp	r3, #0
     4f8:	d1f8      	bne.n	4ec <rtc_calendar_set_time+0x8>
     4fa:	6120      	str	r0, [r4, #16]
     4fc:	bd10      	pop	{r4, pc}
     4fe:	2301      	movs	r3, #1
     500:	e7f9      	b.n	4f6 <rtc_calendar_set_time+0x12>
     502:	46c0      	nop			; (mov r8, r8)
     504:	000004ad 	.word	0x000004ad

00000508 <rtc_calendar_set_alarm>:
     508:	b570      	push	{r4, r5, r6, lr}
     50a:	000d      	movs	r5, r1
     50c:	0014      	movs	r4, r2
     50e:	6806      	ldr	r6, [r0, #0]
     510:	2a01      	cmp	r2, #1
     512:	d901      	bls.n	518 <rtc_calendar_set_alarm+0x10>
     514:	2017      	movs	r0, #23
     516:	bd70      	pop	{r4, r5, r6, pc}
     518:	4b09      	ldr	r3, [pc, #36]	; (540 <rtc_calendar_set_alarm+0x38>)
     51a:	4798      	blx	r3
     51c:	7ab3      	ldrb	r3, [r6, #10]
     51e:	b25b      	sxtb	r3, r3
     520:	2b00      	cmp	r3, #0
     522:	db0a      	blt.n	53a <rtc_calendar_set_alarm+0x32>
     524:	2300      	movs	r3, #0
     526:	2b00      	cmp	r3, #0
     528:	d1f8      	bne.n	51c <rtc_calendar_set_alarm+0x14>
     52a:	3403      	adds	r4, #3
     52c:	00e4      	lsls	r4, r4, #3
     52e:	51a0      	str	r0, [r4, r6]
     530:	7a2b      	ldrb	r3, [r5, #8]
     532:	1934      	adds	r4, r6, r4
     534:	7123      	strb	r3, [r4, #4]
     536:	2000      	movs	r0, #0
     538:	e7ed      	b.n	516 <rtc_calendar_set_alarm+0xe>
     53a:	2301      	movs	r3, #1
     53c:	e7f3      	b.n	526 <rtc_calendar_set_alarm+0x1e>
     53e:	46c0      	nop			; (mov r8, r8)
     540:	000004ad 	.word	0x000004ad

00000544 <_rtc_calendar_set_config>:
     544:	b570      	push	{r4, r5, r6, lr}
     546:	0005      	movs	r5, r0
     548:	000e      	movs	r6, r1
     54a:	6801      	ldr	r1, [r0, #0]
     54c:	8832      	ldrh	r2, [r6, #0]
     54e:	2308      	movs	r3, #8
     550:	4313      	orrs	r3, r2
     552:	b29b      	uxth	r3, r3
     554:	7930      	ldrb	r0, [r6, #4]
     556:	2800      	cmp	r0, #0
     558:	d102      	bne.n	560 <_rtc_calendar_set_config+0x1c>
     55a:	2348      	movs	r3, #72	; 0x48
     55c:	4313      	orrs	r3, r2
     55e:	b29b      	uxth	r3, r3
     560:	78b2      	ldrb	r2, [r6, #2]
     562:	2a00      	cmp	r2, #0
     564:	d002      	beq.n	56c <_rtc_calendar_set_config+0x28>
     566:	2280      	movs	r2, #128	; 0x80
     568:	4313      	orrs	r3, r2
     56a:	b29b      	uxth	r3, r3
     56c:	800b      	strh	r3, [r1, #0]
     56e:	78f3      	ldrb	r3, [r6, #3]
     570:	2b00      	cmp	r3, #0
     572:	d004      	beq.n	57e <_rtc_calendar_set_config+0x3a>
     574:	884b      	ldrh	r3, [r1, #2]
     576:	2280      	movs	r2, #128	; 0x80
     578:	01d2      	lsls	r2, r2, #7
     57a:	4313      	orrs	r3, r2
     57c:	804b      	strh	r3, [r1, #2]
     57e:	2400      	movs	r4, #0
     580:	e00a      	b.n	598 <_rtc_calendar_set_config+0x54>
     582:	00a3      	lsls	r3, r4, #2
     584:	191b      	adds	r3, r3, r4
     586:	0059      	lsls	r1, r3, #1
     588:	3108      	adds	r1, #8
     58a:	1871      	adds	r1, r6, r1
     58c:	0022      	movs	r2, r4
     58e:	0028      	movs	r0, r5
     590:	4b03      	ldr	r3, [pc, #12]	; (5a0 <_rtc_calendar_set_config+0x5c>)
     592:	4798      	blx	r3
     594:	3401      	adds	r4, #1
     596:	b2e4      	uxtb	r4, r4
     598:	2c00      	cmp	r4, #0
     59a:	d0f2      	beq.n	582 <_rtc_calendar_set_config+0x3e>
     59c:	bd70      	pop	{r4, r5, r6, pc}
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	00000509 	.word	0x00000509

000005a4 <rtc_calendar_init>:
     5a4:	b530      	push	{r4, r5, lr}
     5a6:	b083      	sub	sp, #12
     5a8:	0004      	movs	r4, r0
     5aa:	0015      	movs	r5, r2
     5ac:	6001      	str	r1, [r0, #0]
     5ae:	4a0f      	ldr	r2, [pc, #60]	; (5ec <rtc_calendar_init+0x48>)
     5b0:	6993      	ldr	r3, [r2, #24]
     5b2:	2120      	movs	r1, #32
     5b4:	430b      	orrs	r3, r1
     5b6:	6193      	str	r3, [r2, #24]
     5b8:	a901      	add	r1, sp, #4
     5ba:	2302      	movs	r3, #2
     5bc:	700b      	strb	r3, [r1, #0]
     5be:	2004      	movs	r0, #4
     5c0:	4b0b      	ldr	r3, [pc, #44]	; (5f0 <rtc_calendar_init+0x4c>)
     5c2:	4798      	blx	r3
     5c4:	2004      	movs	r0, #4
     5c6:	4b0b      	ldr	r3, [pc, #44]	; (5f4 <rtc_calendar_init+0x50>)
     5c8:	4798      	blx	r3
     5ca:	0020      	movs	r0, r4
     5cc:	4b0a      	ldr	r3, [pc, #40]	; (5f8 <rtc_calendar_init+0x54>)
     5ce:	4798      	blx	r3
     5d0:	792b      	ldrb	r3, [r5, #4]
     5d2:	7123      	strb	r3, [r4, #4]
     5d4:	78eb      	ldrb	r3, [r5, #3]
     5d6:	7163      	strb	r3, [r4, #5]
     5d8:	88eb      	ldrh	r3, [r5, #6]
     5da:	80e3      	strh	r3, [r4, #6]
     5dc:	4b07      	ldr	r3, [pc, #28]	; (5fc <rtc_calendar_init+0x58>)
     5de:	601c      	str	r4, [r3, #0]
     5e0:	0029      	movs	r1, r5
     5e2:	0020      	movs	r0, r4
     5e4:	4b06      	ldr	r3, [pc, #24]	; (600 <rtc_calendar_init+0x5c>)
     5e6:	4798      	blx	r3
     5e8:	b003      	add	sp, #12
     5ea:	bd30      	pop	{r4, r5, pc}
     5ec:	40000400 	.word	0x40000400
     5f0:	00002f35 	.word	0x00002f35
     5f4:	00002ead 	.word	0x00002ead
     5f8:	0000047d 	.word	0x0000047d
     5fc:	200003fc 	.word	0x200003fc
     600:	00000545 	.word	0x00000545

00000604 <rtc_calendar_frequency_correction>:
     604:	6802      	ldr	r2, [r0, #0]
     606:	17c8      	asrs	r0, r1, #31
     608:	180b      	adds	r3, r1, r0
     60a:	4043      	eors	r3, r0
     60c:	2b7f      	cmp	r3, #127	; 0x7f
     60e:	dd01      	ble.n	614 <rtc_calendar_frequency_correction+0x10>
     610:	2017      	movs	r0, #23
     612:	4770      	bx	lr
     614:	0018      	movs	r0, r3
     616:	2900      	cmp	r1, #0
     618:	db0a      	blt.n	630 <rtc_calendar_frequency_correction+0x2c>
     61a:	7a93      	ldrb	r3, [r2, #10]
     61c:	b25b      	sxtb	r3, r3
     61e:	2b00      	cmp	r3, #0
     620:	db09      	blt.n	636 <rtc_calendar_frequency_correction+0x32>
     622:	2300      	movs	r3, #0
     624:	2b00      	cmp	r3, #0
     626:	d1f8      	bne.n	61a <rtc_calendar_frequency_correction+0x16>
     628:	b2c0      	uxtb	r0, r0
     62a:	7310      	strb	r0, [r2, #12]
     62c:	2000      	movs	r0, #0
     62e:	e7f0      	b.n	612 <rtc_calendar_frequency_correction+0xe>
     630:	2080      	movs	r0, #128	; 0x80
     632:	4318      	orrs	r0, r3
     634:	e7f1      	b.n	61a <rtc_calendar_frequency_correction+0x16>
     636:	2301      	movs	r3, #1
     638:	e7f4      	b.n	624 <rtc_calendar_frequency_correction+0x20>

0000063a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     63a:	b5f0      	push	{r4, r5, r6, r7, lr}
     63c:	46de      	mov	lr, fp
     63e:	4657      	mov	r7, sl
     640:	464e      	mov	r6, r9
     642:	4645      	mov	r5, r8
     644:	b5e0      	push	{r5, r6, r7, lr}
     646:	b085      	sub	sp, #20
     648:	4689      	mov	r9, r1
     64a:	0016      	movs	r6, r2
     64c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     64e:	2200      	movs	r2, #0
     650:	2300      	movs	r3, #0
     652:	2100      	movs	r1, #0
     654:	468b      	mov	fp, r1
     656:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     658:	253f      	movs	r5, #63	; 0x3f
     65a:	9600      	str	r6, [sp, #0]
     65c:	9701      	str	r7, [sp, #4]
     65e:	9002      	str	r0, [sp, #8]
     660:	4649      	mov	r1, r9
     662:	9103      	str	r1, [sp, #12]
     664:	e011      	b.n	68a <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
     666:	2120      	movs	r1, #32
     668:	1b49      	subs	r1, r1, r5
     66a:	2400      	movs	r4, #0
     66c:	3401      	adds	r4, #1
     66e:	40cc      	lsrs	r4, r1
     670:	e013      	b.n	69a <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     672:	9800      	ldr	r0, [sp, #0]
     674:	9901      	ldr	r1, [sp, #4]
     676:	1a12      	subs	r2, r2, r0
     678:	418b      	sbcs	r3, r1
			q |= bit_shift;
     67a:	4659      	mov	r1, fp
     67c:	4660      	mov	r0, ip
     67e:	4301      	orrs	r1, r0
     680:	468b      	mov	fp, r1
     682:	4651      	mov	r1, sl
     684:	4321      	orrs	r1, r4
     686:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
     688:	3d01      	subs	r5, #1
     68a:	2d00      	cmp	r5, #0
     68c:	db23      	blt.n	6d6 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
     68e:	2120      	movs	r1, #32
     690:	4249      	negs	r1, r1
     692:	1869      	adds	r1, r5, r1
     694:	d4e7      	bmi.n	666 <long_division+0x2c>
     696:	2401      	movs	r4, #1
     698:	408c      	lsls	r4, r1
     69a:	2101      	movs	r1, #1
     69c:	40a9      	lsls	r1, r5
     69e:	468c      	mov	ip, r1
		r = r << 1;
     6a0:	1892      	adds	r2, r2, r2
     6a2:	415b      	adcs	r3, r3
     6a4:	0010      	movs	r0, r2
     6a6:	0019      	movs	r1, r3
		if (n & bit_shift) {
     6a8:	9e02      	ldr	r6, [sp, #8]
     6aa:	4667      	mov	r7, ip
     6ac:	403e      	ands	r6, r7
     6ae:	46b1      	mov	r9, r6
     6b0:	9e03      	ldr	r6, [sp, #12]
     6b2:	4026      	ands	r6, r4
     6b4:	46b0      	mov	r8, r6
     6b6:	464e      	mov	r6, r9
     6b8:	4647      	mov	r7, r8
     6ba:	433e      	orrs	r6, r7
     6bc:	d003      	beq.n	6c6 <long_division+0x8c>
			r |= 0x01;
     6be:	2601      	movs	r6, #1
     6c0:	4306      	orrs	r6, r0
     6c2:	0032      	movs	r2, r6
     6c4:	000b      	movs	r3, r1
		if (r >= d) {
     6c6:	9800      	ldr	r0, [sp, #0]
     6c8:	9901      	ldr	r1, [sp, #4]
     6ca:	4299      	cmp	r1, r3
     6cc:	d8dc      	bhi.n	688 <long_division+0x4e>
     6ce:	d1d0      	bne.n	672 <long_division+0x38>
     6d0:	4290      	cmp	r0, r2
     6d2:	d8d9      	bhi.n	688 <long_division+0x4e>
     6d4:	e7cd      	b.n	672 <long_division+0x38>
		}
	}

	return q;
}
     6d6:	4658      	mov	r0, fp
     6d8:	4651      	mov	r1, sl
     6da:	b005      	add	sp, #20
     6dc:	bc3c      	pop	{r2, r3, r4, r5}
     6de:	4690      	mov	r8, r2
     6e0:	4699      	mov	r9, r3
     6e2:	46a2      	mov	sl, r4
     6e4:	46ab      	mov	fp, r5
     6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000006e8 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     6e8:	0849      	lsrs	r1, r1, #1
     6ea:	4281      	cmp	r1, r0
     6ec:	d201      	bcs.n	6f2 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6ee:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     6f0:	4770      	bx	lr
     6f2:	2300      	movs	r3, #0
     6f4:	e002      	b.n	6fc <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     6f6:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     6f8:	3301      	adds	r3, #1
     6fa:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     6fc:	4281      	cmp	r1, r0
     6fe:	d2fa      	bcs.n	6f6 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     700:	3b01      	subs	r3, #1
     702:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     704:	2bff      	cmp	r3, #255	; 0xff
     706:	d901      	bls.n	70c <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     708:	2040      	movs	r0, #64	; 0x40
     70a:	e7f1      	b.n	6f0 <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     70c:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     70e:	2000      	movs	r0, #0
     710:	e7ee      	b.n	6f0 <_sercom_get_sync_baud_val+0x8>
	...

00000714 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     714:	b570      	push	{r4, r5, r6, lr}
     716:	b082      	sub	sp, #8
     718:	000c      	movs	r4, r1
     71a:	0015      	movs	r5, r2
     71c:	aa06      	add	r2, sp, #24
     71e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     720:	0002      	movs	r2, r0
     722:	434a      	muls	r2, r1
     724:	42a2      	cmp	r2, r4
     726:	d902      	bls.n	72e <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     728:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     72a:	b002      	add	sp, #8
     72c:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     72e:	2b00      	cmp	r3, #0
     730:	d114      	bne.n	75c <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     732:	0002      	movs	r2, r0
     734:	0008      	movs	r0, r1
     736:	2100      	movs	r1, #0
     738:	4e1b      	ldr	r6, [pc, #108]	; (7a8 <_sercom_get_async_baud_val+0x94>)
     73a:	47b0      	blx	r6
     73c:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     73e:	0022      	movs	r2, r4
     740:	2300      	movs	r3, #0
     742:	2000      	movs	r0, #0
     744:	4c19      	ldr	r4, [pc, #100]	; (7ac <_sercom_get_async_baud_val+0x98>)
     746:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     748:	2200      	movs	r2, #0
     74a:	2301      	movs	r3, #1
     74c:	1a12      	subs	r2, r2, r0
     74e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     750:	0c10      	lsrs	r0, r2, #16
     752:	041b      	lsls	r3, r3, #16
     754:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
     756:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
     758:	2000      	movs	r0, #0
     75a:	e7e6      	b.n	72a <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     75c:	2b01      	cmp	r3, #1
     75e:	d001      	beq.n	764 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
     760:	2000      	movs	r0, #0
     762:	e7f8      	b.n	756 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     764:	000a      	movs	r2, r1
     766:	2300      	movs	r3, #0
     768:	2100      	movs	r1, #0
     76a:	4e0f      	ldr	r6, [pc, #60]	; (7a8 <_sercom_get_async_baud_val+0x94>)
     76c:	47b0      	blx	r6
     76e:	0002      	movs	r2, r0
     770:	000b      	movs	r3, r1
     772:	9200      	str	r2, [sp, #0]
     774:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     776:	0020      	movs	r0, r4
     778:	2100      	movs	r1, #0
     77a:	4e0c      	ldr	r6, [pc, #48]	; (7ac <_sercom_get_async_baud_val+0x98>)
     77c:	47b0      	blx	r6
     77e:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     780:	2380      	movs	r3, #128	; 0x80
     782:	019b      	lsls	r3, r3, #6
     784:	4298      	cmp	r0, r3
     786:	d901      	bls.n	78c <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     788:	2040      	movs	r0, #64	; 0x40
     78a:	e7ce      	b.n	72a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     78c:	0f61      	lsrs	r1, r4, #29
     78e:	00e0      	lsls	r0, r4, #3
     790:	9a00      	ldr	r2, [sp, #0]
     792:	9b01      	ldr	r3, [sp, #4]
     794:	4c05      	ldr	r4, [pc, #20]	; (7ac <_sercom_get_async_baud_val+0x98>)
     796:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     798:	b2c0      	uxtb	r0, r0
     79a:	00f3      	lsls	r3, r6, #3
     79c:	b2db      	uxtb	r3, r3
     79e:	1ac0      	subs	r0, r0, r3
     7a0:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
     7a2:	0340      	lsls	r0, r0, #13
     7a4:	4330      	orrs	r0, r6
     7a6:	e7d6      	b.n	756 <_sercom_get_async_baud_val+0x42>
     7a8:	000035a1 	.word	0x000035a1
     7ac:	0000063b 	.word	0x0000063b

000007b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7b0:	b510      	push	{r4, lr}
     7b2:	b082      	sub	sp, #8
     7b4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7b6:	4b0e      	ldr	r3, [pc, #56]	; (7f0 <sercom_set_gclk_generator+0x40>)
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	2b00      	cmp	r3, #0
     7bc:	d007      	beq.n	7ce <sercom_set_gclk_generator+0x1e>
     7be:	2900      	cmp	r1, #0
     7c0:	d105      	bne.n	7ce <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     7c2:	4b0b      	ldr	r3, [pc, #44]	; (7f0 <sercom_set_gclk_generator+0x40>)
     7c4:	785b      	ldrb	r3, [r3, #1]
     7c6:	4283      	cmp	r3, r0
     7c8:	d010      	beq.n	7ec <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7ca:	201d      	movs	r0, #29
     7cc:	e00c      	b.n	7e8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     7ce:	a901      	add	r1, sp, #4
     7d0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7d2:	2013      	movs	r0, #19
     7d4:	4b07      	ldr	r3, [pc, #28]	; (7f4 <sercom_set_gclk_generator+0x44>)
     7d6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7d8:	2013      	movs	r0, #19
     7da:	4b07      	ldr	r3, [pc, #28]	; (7f8 <sercom_set_gclk_generator+0x48>)
     7dc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     7de:	4b04      	ldr	r3, [pc, #16]	; (7f0 <sercom_set_gclk_generator+0x40>)
     7e0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     7e2:	2201      	movs	r2, #1
     7e4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     7e6:	2000      	movs	r0, #0
}
     7e8:	b002      	add	sp, #8
     7ea:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     7ec:	2000      	movs	r0, #0
     7ee:	e7fb      	b.n	7e8 <sercom_set_gclk_generator+0x38>
     7f0:	2000002c 	.word	0x2000002c
     7f4:	00002f35 	.word	0x00002f35
     7f8:	00002ead 	.word	0x00002ead

000007fc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7fc:	4b40      	ldr	r3, [pc, #256]	; (900 <_sercom_get_default_pad+0x104>)
     7fe:	4298      	cmp	r0, r3
     800:	d031      	beq.n	866 <_sercom_get_default_pad+0x6a>
     802:	d90a      	bls.n	81a <_sercom_get_default_pad+0x1e>
     804:	4b3f      	ldr	r3, [pc, #252]	; (904 <_sercom_get_default_pad+0x108>)
     806:	4298      	cmp	r0, r3
     808:	d04d      	beq.n	8a6 <_sercom_get_default_pad+0xaa>
     80a:	4b3f      	ldr	r3, [pc, #252]	; (908 <_sercom_get_default_pad+0x10c>)
     80c:	4298      	cmp	r0, r3
     80e:	d05a      	beq.n	8c6 <_sercom_get_default_pad+0xca>
     810:	4b3e      	ldr	r3, [pc, #248]	; (90c <_sercom_get_default_pad+0x110>)
     812:	4298      	cmp	r0, r3
     814:	d037      	beq.n	886 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     816:	2000      	movs	r0, #0
}
     818:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     81a:	4b3d      	ldr	r3, [pc, #244]	; (910 <_sercom_get_default_pad+0x114>)
     81c:	4298      	cmp	r0, r3
     81e:	d00c      	beq.n	83a <_sercom_get_default_pad+0x3e>
     820:	4b3c      	ldr	r3, [pc, #240]	; (914 <_sercom_get_default_pad+0x118>)
     822:	4298      	cmp	r0, r3
     824:	d1f7      	bne.n	816 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     826:	2901      	cmp	r1, #1
     828:	d05f      	beq.n	8ea <_sercom_get_default_pad+0xee>
     82a:	2900      	cmp	r1, #0
     82c:	d015      	beq.n	85a <_sercom_get_default_pad+0x5e>
     82e:	2902      	cmp	r1, #2
     830:	d015      	beq.n	85e <_sercom_get_default_pad+0x62>
     832:	2903      	cmp	r1, #3
     834:	d015      	beq.n	862 <_sercom_get_default_pad+0x66>
	return 0;
     836:	2000      	movs	r0, #0
     838:	e7ee      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     83a:	2901      	cmp	r1, #1
     83c:	d053      	beq.n	8e6 <_sercom_get_default_pad+0xea>
     83e:	2900      	cmp	r1, #0
     840:	d005      	beq.n	84e <_sercom_get_default_pad+0x52>
     842:	2902      	cmp	r1, #2
     844:	d005      	beq.n	852 <_sercom_get_default_pad+0x56>
     846:	2903      	cmp	r1, #3
     848:	d005      	beq.n	856 <_sercom_get_default_pad+0x5a>
	return 0;
     84a:	2000      	movs	r0, #0
     84c:	e7e4      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     84e:	4832      	ldr	r0, [pc, #200]	; (918 <_sercom_get_default_pad+0x11c>)
     850:	e7e2      	b.n	818 <_sercom_get_default_pad+0x1c>
     852:	4832      	ldr	r0, [pc, #200]	; (91c <_sercom_get_default_pad+0x120>)
     854:	e7e0      	b.n	818 <_sercom_get_default_pad+0x1c>
     856:	4832      	ldr	r0, [pc, #200]	; (920 <_sercom_get_default_pad+0x124>)
     858:	e7de      	b.n	818 <_sercom_get_default_pad+0x1c>
     85a:	2003      	movs	r0, #3
     85c:	e7dc      	b.n	818 <_sercom_get_default_pad+0x1c>
     85e:	4831      	ldr	r0, [pc, #196]	; (924 <_sercom_get_default_pad+0x128>)
     860:	e7da      	b.n	818 <_sercom_get_default_pad+0x1c>
     862:	4831      	ldr	r0, [pc, #196]	; (928 <_sercom_get_default_pad+0x12c>)
     864:	e7d8      	b.n	818 <_sercom_get_default_pad+0x1c>
     866:	2901      	cmp	r1, #1
     868:	d041      	beq.n	8ee <_sercom_get_default_pad+0xf2>
     86a:	2900      	cmp	r1, #0
     86c:	d005      	beq.n	87a <_sercom_get_default_pad+0x7e>
     86e:	2902      	cmp	r1, #2
     870:	d005      	beq.n	87e <_sercom_get_default_pad+0x82>
     872:	2903      	cmp	r1, #3
     874:	d005      	beq.n	882 <_sercom_get_default_pad+0x86>
	return 0;
     876:	2000      	movs	r0, #0
     878:	e7ce      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     87a:	482c      	ldr	r0, [pc, #176]	; (92c <_sercom_get_default_pad+0x130>)
     87c:	e7cc      	b.n	818 <_sercom_get_default_pad+0x1c>
     87e:	482c      	ldr	r0, [pc, #176]	; (930 <_sercom_get_default_pad+0x134>)
     880:	e7ca      	b.n	818 <_sercom_get_default_pad+0x1c>
     882:	482c      	ldr	r0, [pc, #176]	; (934 <_sercom_get_default_pad+0x138>)
     884:	e7c8      	b.n	818 <_sercom_get_default_pad+0x1c>
     886:	2901      	cmp	r1, #1
     888:	d033      	beq.n	8f2 <_sercom_get_default_pad+0xf6>
     88a:	2900      	cmp	r1, #0
     88c:	d005      	beq.n	89a <_sercom_get_default_pad+0x9e>
     88e:	2902      	cmp	r1, #2
     890:	d005      	beq.n	89e <_sercom_get_default_pad+0xa2>
     892:	2903      	cmp	r1, #3
     894:	d005      	beq.n	8a2 <_sercom_get_default_pad+0xa6>
	return 0;
     896:	2000      	movs	r0, #0
     898:	e7be      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     89a:	4827      	ldr	r0, [pc, #156]	; (938 <_sercom_get_default_pad+0x13c>)
     89c:	e7bc      	b.n	818 <_sercom_get_default_pad+0x1c>
     89e:	4827      	ldr	r0, [pc, #156]	; (93c <_sercom_get_default_pad+0x140>)
     8a0:	e7ba      	b.n	818 <_sercom_get_default_pad+0x1c>
     8a2:	4827      	ldr	r0, [pc, #156]	; (940 <_sercom_get_default_pad+0x144>)
     8a4:	e7b8      	b.n	818 <_sercom_get_default_pad+0x1c>
     8a6:	2901      	cmp	r1, #1
     8a8:	d025      	beq.n	8f6 <_sercom_get_default_pad+0xfa>
     8aa:	2900      	cmp	r1, #0
     8ac:	d005      	beq.n	8ba <_sercom_get_default_pad+0xbe>
     8ae:	2902      	cmp	r1, #2
     8b0:	d005      	beq.n	8be <_sercom_get_default_pad+0xc2>
     8b2:	2903      	cmp	r1, #3
     8b4:	d005      	beq.n	8c2 <_sercom_get_default_pad+0xc6>
	return 0;
     8b6:	2000      	movs	r0, #0
     8b8:	e7ae      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8ba:	4822      	ldr	r0, [pc, #136]	; (944 <_sercom_get_default_pad+0x148>)
     8bc:	e7ac      	b.n	818 <_sercom_get_default_pad+0x1c>
     8be:	4822      	ldr	r0, [pc, #136]	; (948 <_sercom_get_default_pad+0x14c>)
     8c0:	e7aa      	b.n	818 <_sercom_get_default_pad+0x1c>
     8c2:	4822      	ldr	r0, [pc, #136]	; (94c <_sercom_get_default_pad+0x150>)
     8c4:	e7a8      	b.n	818 <_sercom_get_default_pad+0x1c>
     8c6:	2901      	cmp	r1, #1
     8c8:	d017      	beq.n	8fa <_sercom_get_default_pad+0xfe>
     8ca:	2900      	cmp	r1, #0
     8cc:	d005      	beq.n	8da <_sercom_get_default_pad+0xde>
     8ce:	2902      	cmp	r1, #2
     8d0:	d005      	beq.n	8de <_sercom_get_default_pad+0xe2>
     8d2:	2903      	cmp	r1, #3
     8d4:	d005      	beq.n	8e2 <_sercom_get_default_pad+0xe6>
	return 0;
     8d6:	2000      	movs	r0, #0
     8d8:	e79e      	b.n	818 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8da:	481d      	ldr	r0, [pc, #116]	; (950 <_sercom_get_default_pad+0x154>)
     8dc:	e79c      	b.n	818 <_sercom_get_default_pad+0x1c>
     8de:	481d      	ldr	r0, [pc, #116]	; (954 <_sercom_get_default_pad+0x158>)
     8e0:	e79a      	b.n	818 <_sercom_get_default_pad+0x1c>
     8e2:	481d      	ldr	r0, [pc, #116]	; (958 <_sercom_get_default_pad+0x15c>)
     8e4:	e798      	b.n	818 <_sercom_get_default_pad+0x1c>
     8e6:	481d      	ldr	r0, [pc, #116]	; (95c <_sercom_get_default_pad+0x160>)
     8e8:	e796      	b.n	818 <_sercom_get_default_pad+0x1c>
     8ea:	481d      	ldr	r0, [pc, #116]	; (960 <_sercom_get_default_pad+0x164>)
     8ec:	e794      	b.n	818 <_sercom_get_default_pad+0x1c>
     8ee:	481d      	ldr	r0, [pc, #116]	; (964 <_sercom_get_default_pad+0x168>)
     8f0:	e792      	b.n	818 <_sercom_get_default_pad+0x1c>
     8f2:	481d      	ldr	r0, [pc, #116]	; (968 <_sercom_get_default_pad+0x16c>)
     8f4:	e790      	b.n	818 <_sercom_get_default_pad+0x1c>
     8f6:	481d      	ldr	r0, [pc, #116]	; (96c <_sercom_get_default_pad+0x170>)
     8f8:	e78e      	b.n	818 <_sercom_get_default_pad+0x1c>
     8fa:	481d      	ldr	r0, [pc, #116]	; (970 <_sercom_get_default_pad+0x174>)
     8fc:	e78c      	b.n	818 <_sercom_get_default_pad+0x1c>
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	42001000 	.word	0x42001000
     904:	42001800 	.word	0x42001800
     908:	42001c00 	.word	0x42001c00
     90c:	42001400 	.word	0x42001400
     910:	42000800 	.word	0x42000800
     914:	42000c00 	.word	0x42000c00
     918:	00040003 	.word	0x00040003
     91c:	00060003 	.word	0x00060003
     920:	00070003 	.word	0x00070003
     924:	001e0003 	.word	0x001e0003
     928:	001f0003 	.word	0x001f0003
     92c:	00080003 	.word	0x00080003
     930:	000a0003 	.word	0x000a0003
     934:	000b0003 	.word	0x000b0003
     938:	00100003 	.word	0x00100003
     93c:	00120003 	.word	0x00120003
     940:	00130003 	.word	0x00130003
     944:	000c0003 	.word	0x000c0003
     948:	000e0003 	.word	0x000e0003
     94c:	000f0003 	.word	0x000f0003
     950:	00160003 	.word	0x00160003
     954:	00180003 	.word	0x00180003
     958:	00190003 	.word	0x00190003
     95c:	00050003 	.word	0x00050003
     960:	00010003 	.word	0x00010003
     964:	00090003 	.word	0x00090003
     968:	00110003 	.word	0x00110003
     96c:	000d0003 	.word	0x000d0003
     970:	00170003 	.word	0x00170003

00000974 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     974:	b530      	push	{r4, r5, lr}
     976:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     978:	4c0a      	ldr	r4, [pc, #40]	; (9a4 <_sercom_get_sercom_inst_index+0x30>)
     97a:	466b      	mov	r3, sp
     97c:	0022      	movs	r2, r4
     97e:	ca32      	ldmia	r2!, {r1, r4, r5}
     980:	c332      	stmia	r3!, {r1, r4, r5}
     982:	ca32      	ldmia	r2!, {r1, r4, r5}
     984:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     986:	2300      	movs	r3, #0
     988:	2b05      	cmp	r3, #5
     98a:	d808      	bhi.n	99e <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     98c:	009a      	lsls	r2, r3, #2
     98e:	4669      	mov	r1, sp
     990:	5852      	ldr	r2, [r2, r1]
     992:	4282      	cmp	r2, r0
     994:	d001      	beq.n	99a <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     996:	3301      	adds	r3, #1
     998:	e7f6      	b.n	988 <_sercom_get_sercom_inst_index+0x14>
			return i;
     99a:	b2d8      	uxtb	r0, r3
     99c:	e000      	b.n	9a0 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     99e:	2000      	movs	r0, #0
}
     9a0:	b007      	add	sp, #28
     9a2:	bd30      	pop	{r4, r5, pc}
     9a4:	00003660 	.word	0x00003660

000009a8 <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9a8:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     9aa:	2202      	movs	r2, #2
     9ac:	761a      	strb	r2, [r3, #24]
}
     9ae:	4770      	bx	lr

000009b0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b2:	b087      	sub	sp, #28
     9b4:	0007      	movs	r7, r0
     9b6:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9b8:	6806      	ldr	r6, [r0, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9ba:	ab05      	add	r3, sp, #20
     9bc:	2280      	movs	r2, #128	; 0x80
     9be:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9c0:	2200      	movs	r2, #0
     9c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9c4:	2101      	movs	r1, #1
     9c6:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     9c8:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     9ca:	782b      	ldrb	r3, [r5, #0]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d101      	bne.n	9d4 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9d0:	ab05      	add	r3, sp, #20
     9d2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     9d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
     9d6:	9301      	str	r3, [sp, #4]
     9d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     9da:	9302      	str	r3, [sp, #8]
     9dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     9de:	9303      	str	r3, [sp, #12]
     9e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     9e2:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     9e4:	2400      	movs	r4, #0
     9e6:	e006      	b.n	9f6 <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9e8:	0021      	movs	r1, r4
     9ea:	0030      	movs	r0, r6
     9ec:	4b3d      	ldr	r3, [pc, #244]	; (ae4 <_spi_set_config+0x134>)
     9ee:	4798      	blx	r3
     9f0:	e008      	b.n	a04 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     9f2:	3401      	adds	r4, #1
     9f4:	b2e4      	uxtb	r4, r4
     9f6:	2c03      	cmp	r4, #3
     9f8:	d80d      	bhi.n	a16 <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9fa:	00a3      	lsls	r3, r4, #2
     9fc:	aa01      	add	r2, sp, #4
     9fe:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     a00:	2800      	cmp	r0, #0
     a02:	d0f1      	beq.n	9e8 <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     a04:	1c43      	adds	r3, r0, #1
     a06:	d0f4      	beq.n	9f2 <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a08:	a905      	add	r1, sp, #20
     a0a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a0c:	0c00      	lsrs	r0, r0, #16
     a0e:	b2c0      	uxtb	r0, r0
     a10:	4b35      	ldr	r3, [pc, #212]	; (ae8 <_spi_set_config+0x138>)
     a12:	4798      	blx	r3
     a14:	e7ed      	b.n	9f2 <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     a16:	782b      	ldrb	r3, [r5, #0]
     a18:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     a1a:	7c2b      	ldrb	r3, [r5, #16]
     a1c:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     a1e:	7cab      	ldrb	r3, [r5, #18]
     a20:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     a22:	7d2b      	ldrb	r3, [r5, #20]
     a24:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     a26:	2200      	movs	r2, #0
     a28:	466b      	mov	r3, sp
     a2a:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     a2c:	782b      	ldrb	r3, [r5, #0]
     a2e:	2b01      	cmp	r3, #1
     a30:	d014      	beq.n	a5c <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     a32:	782b      	ldrb	r3, [r5, #0]
     a34:	2b00      	cmp	r3, #0
     a36:	d127      	bne.n	a88 <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     a38:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     a3a:	8baa      	ldrh	r2, [r5, #28]
     a3c:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     a3e:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     a40:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     a42:	7fef      	ldrb	r7, [r5, #31]
     a44:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     a46:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     a48:	4320      	orrs	r0, r4
     a4a:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     a4c:	2020      	movs	r0, #32
     a4e:	5c28      	ldrb	r0, [r5, r0]
     a50:	2800      	cmp	r0, #0
     a52:	d01b      	beq.n	a8c <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     a54:	2140      	movs	r1, #64	; 0x40
     a56:	4311      	orrs	r1, r2
     a58:	b289      	uxth	r1, r1
     a5a:	e017      	b.n	a8c <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a5c:	6838      	ldr	r0, [r7, #0]
     a5e:	4b23      	ldr	r3, [pc, #140]	; (aec <_spi_set_config+0x13c>)
     a60:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a62:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     a64:	b2c0      	uxtb	r0, r0
     a66:	4b22      	ldr	r3, [pc, #136]	; (af0 <_spi_set_config+0x140>)
     a68:	4798      	blx	r3
     a6a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     a6c:	466b      	mov	r3, sp
     a6e:	1c9a      	adds	r2, r3, #2
     a70:	69a8      	ldr	r0, [r5, #24]
     a72:	4b20      	ldr	r3, [pc, #128]	; (af4 <_spi_set_config+0x144>)
     a74:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     a76:	2800      	cmp	r0, #0
     a78:	d001      	beq.n	a7e <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     a7a:	2017      	movs	r0, #23
     a7c:	e030      	b.n	ae0 <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     a7e:	466b      	mov	r3, sp
     a80:	3302      	adds	r3, #2
     a82:	781b      	ldrb	r3, [r3, #0]
     a84:	7333      	strb	r3, [r6, #12]
     a86:	e7d4      	b.n	a32 <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     a88:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     a8a:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     a8c:	686a      	ldr	r2, [r5, #4]
     a8e:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     a90:	68aa      	ldr	r2, [r5, #8]
     a92:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a94:	68ea      	ldr	r2, [r5, #12]
     a96:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a98:	7c2a      	ldrb	r2, [r5, #16]
     a9a:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a9c:	7c69      	ldrb	r1, [r5, #17]
     a9e:	2900      	cmp	r1, #0
     aa0:	d103      	bne.n	aaa <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     aa2:	4915      	ldr	r1, [pc, #84]	; (af8 <_spi_set_config+0x148>)
     aa4:	7889      	ldrb	r1, [r1, #2]
     aa6:	0789      	lsls	r1, r1, #30
     aa8:	d501      	bpl.n	aae <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     aaa:	2180      	movs	r1, #128	; 0x80
     aac:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     aae:	7ca9      	ldrb	r1, [r5, #18]
     ab0:	2900      	cmp	r1, #0
     ab2:	d002      	beq.n	aba <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ab4:	2180      	movs	r1, #128	; 0x80
     ab6:	0289      	lsls	r1, r1, #10
     ab8:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     aba:	7ce9      	ldrb	r1, [r5, #19]
     abc:	2900      	cmp	r1, #0
     abe:	d002      	beq.n	ac6 <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ac0:	2180      	movs	r1, #128	; 0x80
     ac2:	0089      	lsls	r1, r1, #2
     ac4:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     ac6:	7d29      	ldrb	r1, [r5, #20]
     ac8:	2900      	cmp	r1, #0
     aca:	d002      	beq.n	ad2 <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     acc:	2180      	movs	r1, #128	; 0x80
     ace:	0189      	lsls	r1, r1, #6
     ad0:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     ad2:	6831      	ldr	r1, [r6, #0]
     ad4:	430b      	orrs	r3, r1
     ad6:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     ad8:	6873      	ldr	r3, [r6, #4]
     ada:	431a      	orrs	r2, r3
     adc:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     ade:	2000      	movs	r0, #0
}
     ae0:	b007      	add	sp, #28
     ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae4:	000007fd 	.word	0x000007fd
     ae8:	0000306d 	.word	0x0000306d
     aec:	00000975 	.word	0x00000975
     af0:	00002f51 	.word	0x00002f51
     af4:	000006e9 	.word	0x000006e9
     af8:	41002000 	.word	0x41002000

00000afc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     afc:	b5f0      	push	{r4, r5, r6, r7, lr}
     afe:	b085      	sub	sp, #20
     b00:	0005      	movs	r5, r0
     b02:	000c      	movs	r4, r1
     b04:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     b06:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     b08:	680b      	ldr	r3, [r1, #0]
     b0a:	079b      	lsls	r3, r3, #30
     b0c:	d502      	bpl.n	b14 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     b0e:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     b10:	b005      	add	sp, #20
     b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b14:	680b      	ldr	r3, [r1, #0]
     b16:	07db      	lsls	r3, r3, #31
     b18:	d501      	bpl.n	b1e <spi_init+0x22>
		return STATUS_BUSY;
     b1a:	2005      	movs	r0, #5
     b1c:	e7f8      	b.n	b10 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b1e:	0008      	movs	r0, r1
     b20:	4b28      	ldr	r3, [pc, #160]	; (bc4 <spi_init+0xc8>)
     b22:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b24:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b26:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b28:	2301      	movs	r3, #1
     b2a:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b2c:	4a26      	ldr	r2, [pc, #152]	; (bc8 <spi_init+0xcc>)
     b2e:	6a11      	ldr	r1, [r2, #32]
     b30:	430b      	orrs	r3, r1
     b32:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     b34:	2724      	movs	r7, #36	; 0x24
     b36:	5df3      	ldrb	r3, [r6, r7]
     b38:	a903      	add	r1, sp, #12
     b3a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b3c:	b2c3      	uxtb	r3, r0
     b3e:	9301      	str	r3, [sp, #4]
     b40:	0018      	movs	r0, r3
     b42:	4b22      	ldr	r3, [pc, #136]	; (bcc <spi_init+0xd0>)
     b44:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b46:	9801      	ldr	r0, [sp, #4]
     b48:	4b21      	ldr	r3, [pc, #132]	; (bd0 <spi_init+0xd4>)
     b4a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b4c:	5df0      	ldrb	r0, [r6, r7]
     b4e:	2100      	movs	r1, #0
     b50:	4b20      	ldr	r3, [pc, #128]	; (bd4 <spi_init+0xd8>)
     b52:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     b54:	7833      	ldrb	r3, [r6, #0]
     b56:	2b01      	cmp	r3, #1
     b58:	d008      	beq.n	b6c <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     b5a:	7833      	ldrb	r3, [r6, #0]
     b5c:	2b00      	cmp	r3, #0
     b5e:	d103      	bne.n	b68 <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     b60:	6823      	ldr	r3, [r4, #0]
     b62:	2208      	movs	r2, #8
     b64:	4313      	orrs	r3, r2
     b66:	6023      	str	r3, [r4, #0]
{
     b68:	2300      	movs	r3, #0
     b6a:	e00b      	b.n	b84 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b6c:	6823      	ldr	r3, [r4, #0]
     b6e:	220c      	movs	r2, #12
     b70:	4313      	orrs	r3, r2
     b72:	6023      	str	r3, [r4, #0]
     b74:	e7f1      	b.n	b5a <spi_init+0x5e>
		module->callback[i]        = NULL;
     b76:	1c9a      	adds	r2, r3, #2
     b78:	0092      	lsls	r2, r2, #2
     b7a:	18aa      	adds	r2, r5, r2
     b7c:	2100      	movs	r1, #0
     b7e:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     b80:	3301      	adds	r3, #1
     b82:	b2db      	uxtb	r3, r3
     b84:	2b06      	cmp	r3, #6
     b86:	d9f6      	bls.n	b76 <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     b88:	2200      	movs	r2, #0
     b8a:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     b8c:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     b8e:	2300      	movs	r3, #0
     b90:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     b92:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     b94:	3236      	adds	r2, #54	; 0x36
     b96:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     b98:	3201      	adds	r2, #1
     b9a:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     b9c:	3201      	adds	r2, #1
     b9e:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     ba0:	3a35      	subs	r2, #53	; 0x35
     ba2:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     ba4:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     ba6:	6828      	ldr	r0, [r5, #0]
     ba8:	4b06      	ldr	r3, [pc, #24]	; (bc4 <spi_init+0xc8>)
     baa:	4798      	blx	r3
     bac:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     bae:	490a      	ldr	r1, [pc, #40]	; (bd8 <spi_init+0xdc>)
     bb0:	4b0a      	ldr	r3, [pc, #40]	; (bdc <spi_init+0xe0>)
     bb2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     bb4:	00a4      	lsls	r4, r4, #2
     bb6:	4b0a      	ldr	r3, [pc, #40]	; (be0 <spi_init+0xe4>)
     bb8:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     bba:	0031      	movs	r1, r6
     bbc:	0028      	movs	r0, r5
     bbe:	4b09      	ldr	r3, [pc, #36]	; (be4 <spi_init+0xe8>)
     bc0:	4798      	blx	r3
     bc2:	e7a5      	b.n	b10 <spi_init+0x14>
     bc4:	00000975 	.word	0x00000975
     bc8:	40000400 	.word	0x40000400
     bcc:	00002f35 	.word	0x00002f35
     bd0:	00002ead 	.word	0x00002ead
     bd4:	000007b1 	.word	0x000007b1
     bd8:	000012bd 	.word	0x000012bd
     bdc:	00002879 	.word	0x00002879
     be0:	200009c8 	.word	0x200009c8
     be4:	000009b1 	.word	0x000009b1

00000be8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bea:	0004      	movs	r4, r0
     bec:	000e      	movs	r6, r1
     bee:	0017      	movs	r7, r2
     bf0:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     bf2:	2338      	movs	r3, #56	; 0x38
     bf4:	5cc3      	ldrb	r3, [r0, r3]
     bf6:	2b05      	cmp	r3, #5
     bf8:	d06d      	beq.n	cd6 <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     bfa:	2a00      	cmp	r2, #0
     bfc:	d101      	bne.n	c02 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     bfe:	2217      	movs	r2, #23
     c00:	e06a      	b.n	cd8 <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     c02:	79c3      	ldrb	r3, [r0, #7]
     c04:	2b00      	cmp	r3, #0
     c06:	d101      	bne.n	c0c <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     c08:	221c      	movs	r2, #28
     c0a:	e065      	b.n	cd8 <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     c0c:	7943      	ldrb	r3, [r0, #5]
     c0e:	2b00      	cmp	r3, #0
     c10:	d103      	bne.n	c1a <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     c12:	6803      	ldr	r3, [r0, #0]
     c14:	7e1b      	ldrb	r3, [r3, #24]
     c16:	079b      	lsls	r3, r3, #30
     c18:	d401      	bmi.n	c1e <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     c1a:	2000      	movs	r0, #0
     c1c:	e037      	b.n	c8e <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     c1e:	4b2f      	ldr	r3, [pc, #188]	; (cdc <spi_read_buffer_wait+0xf4>)
     c20:	4798      	blx	r3
     c22:	e7fa      	b.n	c1a <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c24:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c26:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     c28:	07d2      	lsls	r2, r2, #31
     c2a:	d5fb      	bpl.n	c24 <spi_read_buffer_wait+0x3c>
     c2c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     c2e:	07d2      	lsls	r2, r2, #31
     c30:	d534      	bpl.n	c9c <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     c32:	05ea      	lsls	r2, r5, #23
     c34:	0dd2      	lsrs	r2, r2, #23
     c36:	629a      	str	r2, [r3, #40]	; 0x28
     c38:	e030      	b.n	c9c <spi_read_buffer_wait+0xb4>
     c3a:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     c3c:	4a28      	ldr	r2, [pc, #160]	; (ce0 <spi_read_buffer_wait+0xf8>)
     c3e:	4293      	cmp	r3, r2
     c40:	d805      	bhi.n	c4e <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     c42:	6822      	ldr	r2, [r4, #0]
     c44:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     c46:	0752      	lsls	r2, r2, #29
     c48:	d401      	bmi.n	c4e <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     c4a:	3301      	adds	r3, #1
     c4c:	e7f6      	b.n	c3c <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     c4e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     c50:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     c52:	0792      	lsls	r2, r2, #30
     c54:	d404      	bmi.n	c60 <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     c56:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     c58:	075b      	lsls	r3, r3, #29
     c5a:	d422      	bmi.n	ca2 <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     c5c:	2212      	movs	r2, #18
     c5e:	e03b      	b.n	cd8 <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     c60:	0020      	movs	r0, r4
     c62:	4b1e      	ldr	r3, [pc, #120]	; (cdc <spi_read_buffer_wait+0xf4>)
     c64:	4798      	blx	r3
				return STATUS_ABORTED;
     c66:	2204      	movs	r2, #4
     c68:	e036      	b.n	cd8 <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     c6a:	2200      	movs	r2, #0
     c6c:	e026      	b.n	cbc <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     c6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     c70:	05ff      	lsls	r7, r7, #23
     c72:	0dff      	lsrs	r7, r7, #23
     c74:	e001      	b.n	c7a <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     c76:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     c78:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     c7a:	2a00      	cmp	r2, #0
     c7c:	d12c      	bne.n	cd8 <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     c7e:	1c43      	adds	r3, r0, #1
     c80:	b29b      	uxth	r3, r3
     c82:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c84:	79a2      	ldrb	r2, [r4, #6]
     c86:	2a01      	cmp	r2, #1
     c88:	d01e      	beq.n	cc8 <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     c8a:	0018      	movs	r0, r3
     c8c:	000f      	movs	r7, r1
	while (length--) {
     c8e:	1e79      	subs	r1, r7, #1
     c90:	b289      	uxth	r1, r1
     c92:	2f00      	cmp	r7, #0
     c94:	d01d      	beq.n	cd2 <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     c96:	7963      	ldrb	r3, [r4, #5]
     c98:	2b01      	cmp	r3, #1
     c9a:	d0c3      	beq.n	c24 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     c9c:	7963      	ldrb	r3, [r4, #5]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d0cb      	beq.n	c3a <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ca2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ca4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     ca6:	0752      	lsls	r2, r2, #29
     ca8:	d5fb      	bpl.n	ca2 <spi_read_buffer_wait+0xba>
     caa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     cac:	0752      	lsls	r2, r2, #29
     cae:	d5e2      	bpl.n	c76 <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     cb0:	8b5a      	ldrh	r2, [r3, #26]
     cb2:	0752      	lsls	r2, r2, #29
     cb4:	d5d9      	bpl.n	c6a <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     cb6:	2204      	movs	r2, #4
     cb8:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     cba:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cbc:	79a7      	ldrb	r7, [r4, #6]
     cbe:	2f01      	cmp	r7, #1
     cc0:	d0d5      	beq.n	c6e <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     cc2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     cc4:	b2ff      	uxtb	r7, r7
     cc6:	e7d8      	b.n	c7a <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     cc8:	3002      	adds	r0, #2
     cca:	0a3f      	lsrs	r7, r7, #8
     ccc:	54f7      	strb	r7, [r6, r3]
     cce:	b283      	uxth	r3, r0
     cd0:	e7db      	b.n	c8a <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     cd2:	2200      	movs	r2, #0
     cd4:	e000      	b.n	cd8 <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     cd6:	2205      	movs	r2, #5
}
     cd8:	0010      	movs	r0, r2
     cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cdc:	000009a9 	.word	0x000009a9
     ce0:	00002710 	.word	0x00002710

00000ce4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     ce4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     ce6:	7943      	ldrb	r3, [r0, #5]
     ce8:	2b01      	cmp	r3, #1
     cea:	d001      	beq.n	cf0 <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     cec:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     cee:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     cf0:	7a03      	ldrb	r3, [r0, #8]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d16c      	bne.n	dd0 <spi_select_slave+0xec>
		if (select) {
     cf6:	2a00      	cmp	r2, #0
     cf8:	d058      	beq.n	dac <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     cfa:	784b      	ldrb	r3, [r1, #1]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d043      	beq.n	d88 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d00:	6803      	ldr	r3, [r0, #0]
     d02:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     d04:	07db      	lsls	r3, r3, #31
     d06:	d411      	bmi.n	d2c <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     d08:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     d0a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     d0c:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d0e:	2900      	cmp	r1, #0
     d10:	d10a      	bne.n	d28 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     d12:	01db      	lsls	r3, r3, #7
     d14:	4931      	ldr	r1, [pc, #196]	; (ddc <spi_select_slave+0xf8>)
     d16:	468c      	mov	ip, r1
     d18:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d1a:	211f      	movs	r1, #31
     d1c:	4011      	ands	r1, r2
     d1e:	2201      	movs	r2, #1
     d20:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d22:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     d24:	2005      	movs	r0, #5
     d26:	e7e2      	b.n	cee <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
     d28:	2300      	movs	r3, #0
     d2a:	e7f6      	b.n	d1a <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     d2c:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     d2e:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     d30:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     d32:	2c00      	cmp	r4, #0
     d34:	d104      	bne.n	d40 <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     d36:	01db      	lsls	r3, r3, #7
     d38:	4c28      	ldr	r4, [pc, #160]	; (ddc <spi_select_slave+0xf8>)
     d3a:	46a4      	mov	ip, r4
     d3c:	4463      	add	r3, ip
     d3e:	e000      	b.n	d42 <spi_select_slave+0x5e>
		return NULL;
     d40:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d42:	241f      	movs	r4, #31
     d44:	4014      	ands	r4, r2
     d46:	2201      	movs	r2, #1
     d48:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d4a:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     d4c:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     d4e:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d50:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     d52:	07c9      	lsls	r1, r1, #31
     d54:	d500      	bpl.n	d58 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d56:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     d58:	79c3      	ldrb	r3, [r0, #7]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d13a      	bne.n	dd4 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d5e:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d60:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     d62:	0752      	lsls	r2, r2, #29
     d64:	d5fb      	bpl.n	d5e <spi_select_slave+0x7a>
     d66:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     d68:	0752      	lsls	r2, r2, #29
     d6a:	d535      	bpl.n	dd8 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d6c:	8b5a      	ldrh	r2, [r3, #26]
     d6e:	0752      	lsls	r2, r2, #29
     d70:	d501      	bpl.n	d76 <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d72:	2204      	movs	r2, #4
     d74:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d76:	7982      	ldrb	r2, [r0, #6]
     d78:	2a01      	cmp	r2, #1
     d7a:	d002      	beq.n	d82 <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     d7e:	2000      	movs	r0, #0
     d80:	e7b5      	b.n	cee <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     d84:	2000      	movs	r0, #0
     d86:	e7b2      	b.n	cee <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     d88:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     d8a:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     d8c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     d8e:	2900      	cmp	r1, #0
     d90:	d10a      	bne.n	da8 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     d92:	01db      	lsls	r3, r3, #7
     d94:	4911      	ldr	r1, [pc, #68]	; (ddc <spi_select_slave+0xf8>)
     d96:	468c      	mov	ip, r1
     d98:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d9a:	211f      	movs	r1, #31
     d9c:	4011      	ands	r1, r2
     d9e:	2201      	movs	r2, #1
     da0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     da2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     da4:	2000      	movs	r0, #0
     da6:	e7a2      	b.n	cee <spi_select_slave+0xa>
		return NULL;
     da8:	2300      	movs	r3, #0
     daa:	e7f6      	b.n	d9a <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     dac:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     dae:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     db0:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     db2:	2900      	cmp	r1, #0
     db4:	d10a      	bne.n	dcc <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     db6:	01db      	lsls	r3, r3, #7
     db8:	4908      	ldr	r1, [pc, #32]	; (ddc <spi_select_slave+0xf8>)
     dba:	468c      	mov	ip, r1
     dbc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dbe:	211f      	movs	r1, #31
     dc0:	4011      	ands	r1, r2
     dc2:	2201      	movs	r2, #1
     dc4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     dc6:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     dc8:	2000      	movs	r0, #0
     dca:	e790      	b.n	cee <spi_select_slave+0xa>
		return NULL;
     dcc:	2300      	movs	r3, #0
     dce:	e7f6      	b.n	dbe <spi_select_slave+0xda>
     dd0:	2000      	movs	r0, #0
     dd2:	e78c      	b.n	cee <spi_select_slave+0xa>
     dd4:	2000      	movs	r0, #0
     dd6:	e78a      	b.n	cee <spi_select_slave+0xa>
     dd8:	2000      	movs	r0, #0
     dda:	e788      	b.n	cee <spi_select_slave+0xa>
     ddc:	41004400 	.word	0x41004400

00000de0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     de0:	b5f0      	push	{r4, r5, r6, r7, lr}
     de2:	46d6      	mov	lr, sl
     de4:	464f      	mov	r7, r9
     de6:	4646      	mov	r6, r8
     de8:	b5c0      	push	{r6, r7, lr}
     dea:	b082      	sub	sp, #8
     dec:	0004      	movs	r4, r0
     dee:	468a      	mov	sl, r1
     df0:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     df2:	2338      	movs	r3, #56	; 0x38
     df4:	5cc3      	ldrb	r3, [r0, r3]
     df6:	2b05      	cmp	r3, #5
     df8:	d100      	bne.n	dfc <spi_write_buffer_wait+0x1c>
     dfa:	e0d8      	b.n	fae <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     dfc:	2a00      	cmp	r2, #0
     dfe:	d101      	bne.n	e04 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     e00:	2017      	movs	r0, #23
     e02:	e0d5      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     e04:	7943      	ldrb	r3, [r0, #5]
     e06:	2b00      	cmp	r3, #0
     e08:	d103      	bne.n	e12 <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e0a:	6803      	ldr	r3, [r0, #0]
     e0c:	7e1b      	ldrb	r3, [r3, #24]
     e0e:	079b      	lsls	r3, r3, #30
     e10:	d402      	bmi.n	e18 <spi_write_buffer_wait+0x38>
     e12:	46bc      	mov	ip, r7
     e14:	2600      	movs	r6, #0
     e16:	e025      	b.n	e64 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     e18:	4b6a      	ldr	r3, [pc, #424]	; (fc4 <spi_write_buffer_wait+0x1e4>)
     e1a:	4798      	blx	r3
     e1c:	e7f9      	b.n	e12 <spi_write_buffer_wait+0x32>
     e1e:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e20:	4a69      	ldr	r2, [pc, #420]	; (fc8 <spi_write_buffer_wait+0x1e8>)
     e22:	4293      	cmp	r3, r2
     e24:	d805      	bhi.n	e32 <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e26:	6822      	ldr	r2, [r4, #0]
     e28:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     e2a:	07d2      	lsls	r2, r2, #31
     e2c:	d401      	bmi.n	e32 <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e2e:	3301      	adds	r3, #1
     e30:	e7f6      	b.n	e20 <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e32:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e34:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     e36:	0792      	lsls	r2, r2, #30
     e38:	d404      	bmi.n	e44 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e3a:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     e3c:	07db      	lsls	r3, r3, #31
     e3e:	d418      	bmi.n	e72 <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     e40:	2012      	movs	r0, #18
     e42:	e0b5      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     e44:	0020      	movs	r0, r4
     e46:	4b5f      	ldr	r3, [pc, #380]	; (fc4 <spi_write_buffer_wait+0x1e4>)
     e48:	4798      	blx	r3
				return STATUS_ABORTED;
     e4a:	2004      	movs	r0, #4
     e4c:	e0b0      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     e4e:	3602      	adds	r6, #2
     e50:	b2b6      	uxth	r6, r6
     e52:	4652      	mov	r2, sl
     e54:	5dd2      	ldrb	r2, [r2, r7]
     e56:	0212      	lsls	r2, r2, #8
     e58:	4302      	orrs	r2, r0
     e5a:	e017      	b.n	e8c <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     e5c:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     e5e:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     e60:	2b00      	cmp	r3, #0
     e62:	d11a      	bne.n	e9a <spi_write_buffer_wait+0xba>
	while (length--) {
     e64:	1e79      	subs	r1, r7, #1
     e66:	b289      	uxth	r1, r1
     e68:	2f00      	cmp	r7, #0
     e6a:	d06c      	beq.n	f46 <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     e6c:	7963      	ldrb	r3, [r4, #5]
     e6e:	2b00      	cmp	r3, #0
     e70:	d0d5      	beq.n	e1e <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e72:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e74:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     e76:	07d2      	lsls	r2, r2, #31
     e78:	d5fb      	bpl.n	e72 <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     e7a:	1c77      	adds	r7, r6, #1
     e7c:	b2bf      	uxth	r7, r7
     e7e:	4652      	mov	r2, sl
     e80:	5d90      	ldrb	r0, [r2, r6]
     e82:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e84:	79a5      	ldrb	r5, [r4, #6]
     e86:	2d01      	cmp	r5, #1
     e88:	d0e1      	beq.n	e4e <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     e8a:	003e      	movs	r6, r7
     e8c:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     e8e:	07f8      	lsls	r0, r7, #31
     e90:	d5e4      	bpl.n	e5c <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e92:	05d2      	lsls	r2, r2, #23
     e94:	0dd2      	lsrs	r2, r2, #23
     e96:	629a      	str	r2, [r3, #40]	; 0x28
     e98:	e7e0      	b.n	e5c <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     e9a:	7963      	ldrb	r3, [r4, #5]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d040      	beq.n	f22 <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ea0:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ea2:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     ea4:	0752      	lsls	r2, r2, #29
     ea6:	d5fb      	bpl.n	ea0 <spi_write_buffer_wait+0xc0>
     ea8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     eaa:	0752      	lsls	r2, r2, #29
     eac:	d508      	bpl.n	ec0 <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     eae:	8b5a      	ldrh	r2, [r3, #26]
     eb0:	0752      	lsls	r2, r2, #29
     eb2:	d501      	bpl.n	eb8 <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     eb4:	2204      	movs	r2, #4
     eb6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eb8:	79a2      	ldrb	r2, [r4, #6]
     eba:	2a01      	cmp	r2, #1
     ebc:	d041      	beq.n	f42 <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     ec0:	4660      	mov	r0, ip
     ec2:	3801      	subs	r0, #1
     ec4:	b283      	uxth	r3, r0
     ec6:	469c      	mov	ip, r3
     ec8:	000f      	movs	r7, r1
     eca:	e7cb      	b.n	e64 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
     ecc:	3602      	adds	r6, #2
     ece:	4655      	mov	r5, sl
     ed0:	5c2f      	ldrb	r7, [r5, r0]
     ed2:	023f      	lsls	r7, r7, #8
     ed4:	4640      	mov	r0, r8
     ed6:	4307      	orrs	r7, r0
     ed8:	b2b0      	uxth	r0, r6
     eda:	e01b      	b.n	f14 <spi_write_buffer_wait+0x134>
						length--;
     edc:	3901      	subs	r1, #1
     ede:	b289      	uxth	r1, r1
     ee0:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ee2:	6822      	ldr	r2, [r4, #0]
     ee4:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     ee6:	0752      	lsls	r2, r2, #29
     ee8:	d41d      	bmi.n	f26 <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     eea:	3301      	adds	r3, #1
     eec:	4a36      	ldr	r2, [pc, #216]	; (fc8 <spi_write_buffer_wait+0x1e8>)
     eee:	4293      	cmp	r3, r2
     ef0:	d819      	bhi.n	f26 <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
     ef2:	2900      	cmp	r1, #0
     ef4:	d0f5      	beq.n	ee2 <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ef6:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ef8:	7e17      	ldrb	r7, [r2, #24]
     efa:	07f8      	lsls	r0, r7, #31
     efc:	d5f1      	bpl.n	ee2 <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
     efe:	1c70      	adds	r0, r6, #1
     f00:	b280      	uxth	r0, r0
     f02:	4655      	mov	r5, sl
     f04:	5dad      	ldrb	r5, [r5, r6]
     f06:	46a8      	mov	r8, r5
     f08:	466f      	mov	r7, sp
     f0a:	80fd      	strh	r5, [r7, #6]
     f0c:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f0e:	79a5      	ldrb	r5, [r4, #6]
     f10:	2d01      	cmp	r5, #1
     f12:	d0db      	beq.n	ecc <spi_write_buffer_wait+0xec>
     f14:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     f16:	07f5      	lsls	r5, r6, #31
     f18:	d5e0      	bpl.n	edc <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f1a:	05ff      	lsls	r7, r7, #23
     f1c:	0dff      	lsrs	r7, r7, #23
     f1e:	6297      	str	r7, [r2, #40]	; 0x28
     f20:	e7dc      	b.n	edc <spi_write_buffer_wait+0xfc>
     f22:	2300      	movs	r3, #0
     f24:	e7e2      	b.n	eec <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f26:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f28:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
     f2a:	0792      	lsls	r2, r2, #30
     f2c:	d404      	bmi.n	f38 <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f2e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     f30:	075b      	lsls	r3, r3, #29
     f32:	d4b5      	bmi.n	ea0 <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
     f34:	2012      	movs	r0, #18
     f36:	e03b      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
     f38:	0020      	movs	r0, r4
     f3a:	4b22      	ldr	r3, [pc, #136]	; (fc4 <spi_write_buffer_wait+0x1e4>)
     f3c:	4798      	blx	r3
					return STATUS_ABORTED;
     f3e:	2004      	movs	r0, #4
     f40:	e036      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f44:	e7bc      	b.n	ec0 <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     f46:	7962      	ldrb	r2, [r4, #5]
     f48:	2a01      	cmp	r2, #1
     f4a:	d006      	beq.n	f5a <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     f4c:	2a00      	cmp	r2, #0
     f4e:	d135      	bne.n	fbc <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
     f50:	79e3      	ldrb	r3, [r4, #7]
     f52:	2b00      	cmp	r3, #0
     f54:	d11a      	bne.n	f8c <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     f56:	2000      	movs	r0, #0
     f58:	e02a      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f5a:	6823      	ldr	r3, [r4, #0]
     f5c:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
     f5e:	079b      	lsls	r3, r3, #30
     f60:	d5fb      	bpl.n	f5a <spi_write_buffer_wait+0x17a>
     f62:	e7f3      	b.n	f4c <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f64:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f66:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     f68:	0752      	lsls	r2, r2, #29
     f6a:	d529      	bpl.n	fc0 <spi_write_buffer_wait+0x1e0>
     f6c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f6e:	0752      	lsls	r2, r2, #29
     f70:	d508      	bpl.n	f84 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f72:	8b5a      	ldrh	r2, [r3, #26]
     f74:	0752      	lsls	r2, r2, #29
     f76:	d501      	bpl.n	f7c <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f78:	2204      	movs	r2, #4
     f7a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f7c:	79a2      	ldrb	r2, [r4, #6]
     f7e:	2a01      	cmp	r2, #1
     f80:	d011      	beq.n	fa6 <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
     f84:	4660      	mov	r0, ip
     f86:	3801      	subs	r0, #1
     f88:	b283      	uxth	r3, r0
     f8a:	469c      	mov	ip, r3
			while (flush_length) {
     f8c:	4663      	mov	r3, ip
     f8e:	2b00      	cmp	r3, #0
     f90:	d00b      	beq.n	faa <spi_write_buffer_wait+0x1ca>
     f92:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f94:	4a0c      	ldr	r2, [pc, #48]	; (fc8 <spi_write_buffer_wait+0x1e8>)
     f96:	4293      	cmp	r3, r2
     f98:	d8e4      	bhi.n	f64 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f9a:	6822      	ldr	r2, [r4, #0]
     f9c:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     f9e:	0752      	lsls	r2, r2, #29
     fa0:	d4e0      	bmi.n	f64 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     fa2:	3301      	adds	r3, #1
     fa4:	e7f6      	b.n	f94 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fa8:	e7ec      	b.n	f84 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
     faa:	2000      	movs	r0, #0
     fac:	e000      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
     fae:	2005      	movs	r0, #5
}
     fb0:	b002      	add	sp, #8
     fb2:	bc1c      	pop	{r2, r3, r4}
     fb4:	4690      	mov	r8, r2
     fb6:	4699      	mov	r9, r3
     fb8:	46a2      	mov	sl, r4
     fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
     fbc:	2000      	movs	r0, #0
     fbe:	e7f7      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
     fc0:	2012      	movs	r0, #18
     fc2:	e7f5      	b.n	fb0 <spi_write_buffer_wait+0x1d0>
     fc4:	000009a9 	.word	0x000009a9
     fc8:	00002710 	.word	0x00002710

00000fcc <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     fce:	46de      	mov	lr, fp
     fd0:	4657      	mov	r7, sl
     fd2:	464e      	mov	r6, r9
     fd4:	4645      	mov	r5, r8
     fd6:	b5e0      	push	{r5, r6, r7, lr}
     fd8:	b085      	sub	sp, #20
     fda:	0004      	movs	r4, r0
     fdc:	9101      	str	r1, [sp, #4]
     fde:	9203      	str	r2, [sp, #12]
     fe0:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     fe2:	2338      	movs	r3, #56	; 0x38
     fe4:	5cc3      	ldrb	r3, [r0, r3]
     fe6:	2b05      	cmp	r3, #5
     fe8:	d100      	bne.n	fec <spi_transceive_buffer_wait+0x20>
     fea:	e112      	b.n	1212 <spi_transceive_buffer_wait+0x246>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     fec:	2e00      	cmp	r6, #0
     fee:	d101      	bne.n	ff4 <spi_transceive_buffer_wait+0x28>
		return STATUS_ERR_INVALID_ARG;
     ff0:	2217      	movs	r2, #23
     ff2:	e10f      	b.n	1214 <spi_transceive_buffer_wait+0x248>
	}

	if (!(module->receiver_enabled)) {
     ff4:	79c3      	ldrb	r3, [r0, #7]
     ff6:	2b00      	cmp	r3, #0
     ff8:	d101      	bne.n	ffe <spi_transceive_buffer_wait+0x32>
		return STATUS_ERR_DENIED;
     ffa:	221c      	movs	r2, #28
     ffc:	e10a      	b.n	1214 <spi_transceive_buffer_wait+0x248>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     ffe:	7943      	ldrb	r3, [r0, #5]
    1000:	2b00      	cmp	r3, #0
    1002:	d103      	bne.n	100c <spi_transceive_buffer_wait+0x40>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1004:	6803      	ldr	r3, [r0, #0]
    1006:	7e1b      	ldrb	r3, [r3, #24]
    1008:	079b      	lsls	r3, r3, #30
    100a:	d404      	bmi.n	1016 <spi_transceive_buffer_wait+0x4a>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    100c:	46b4      	mov	ip, r6
    100e:	2300      	movs	r3, #0
    1010:	4698      	mov	r8, r3
    1012:	2100      	movs	r1, #0
    1014:	e075      	b.n	1102 <spi_transceive_buffer_wait+0x136>
		_spi_clear_tx_complete_flag(module);
    1016:	4b84      	ldr	r3, [pc, #528]	; (1228 <spi_transceive_buffer_wait+0x25c>)
    1018:	4798      	blx	r3
    101a:	e7f7      	b.n	100c <spi_transceive_buffer_wait+0x40>
    101c:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    101e:	4a83      	ldr	r2, [pc, #524]	; (122c <spi_transceive_buffer_wait+0x260>)
    1020:	4293      	cmp	r3, r2
    1022:	d805      	bhi.n	1030 <spi_transceive_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1024:	6822      	ldr	r2, [r4, #0]
    1026:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1028:	07d2      	lsls	r2, r2, #31
    102a:	d401      	bmi.n	1030 <spi_transceive_buffer_wait+0x64>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    102c:	3301      	adds	r3, #1
    102e:	e7f6      	b.n	101e <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1030:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1032:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1034:	0792      	lsls	r2, r2, #30
    1036:	d404      	bmi.n	1042 <spi_transceive_buffer_wait+0x76>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1038:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    103a:	07db      	lsls	r3, r3, #31
    103c:	d468      	bmi.n	1110 <spi_transceive_buffer_wait+0x144>
				return STATUS_ERR_TIMEOUT;
    103e:	2212      	movs	r2, #18
    1040:	e0e8      	b.n	1214 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    1042:	0020      	movs	r0, r4
    1044:	4b78      	ldr	r3, [pc, #480]	; (1228 <spi_transceive_buffer_wait+0x25c>)
    1046:	4798      	blx	r3
				return STATUS_ABORTED;
    1048:	2204      	movs	r2, #4
    104a:	e0e3      	b.n	1214 <spi_transceive_buffer_wait+0x248>
			data_to_send |= (tx_data[tx_pos++] << 8);
    104c:	3102      	adds	r1, #2
    104e:	9a01      	ldr	r2, [sp, #4]
    1050:	5d92      	ldrb	r2, [r2, r6]
    1052:	0212      	lsls	r2, r2, #8
    1054:	4650      	mov	r0, sl
    1056:	4302      	orrs	r2, r0
    1058:	b28e      	uxth	r6, r1
    105a:	e068      	b.n	112e <spi_transceive_buffer_wait+0x162>
						data_to_send |= (tx_data[tx_pos++] << 8);
    105c:	3602      	adds	r6, #2
    105e:	9901      	ldr	r1, [sp, #4]
    1060:	5c09      	ldrb	r1, [r1, r0]
    1062:	0209      	lsls	r1, r1, #8
    1064:	4650      	mov	r0, sl
    1066:	4301      	orrs	r1, r0
    1068:	4689      	mov	r9, r1
    106a:	b2b0      	uxth	r0, r6
    106c:	e01a      	b.n	10a4 <spi_transceive_buffer_wait+0xd8>
					length--;
    106e:	3f01      	subs	r7, #1
    1070:	b2bf      	uxth	r7, r7
    1072:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1074:	6822      	ldr	r2, [r4, #0]
    1076:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1078:	0752      	lsls	r2, r2, #29
    107a:	d41d      	bmi.n	10b8 <spi_transceive_buffer_wait+0xec>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    107c:	3301      	adds	r3, #1
    107e:	4a6b      	ldr	r2, [pc, #428]	; (122c <spi_transceive_buffer_wait+0x260>)
    1080:	4293      	cmp	r3, r2
    1082:	d819      	bhi.n	10b8 <spi_transceive_buffer_wait+0xec>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1084:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1086:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    1088:	07c9      	lsls	r1, r1, #31
    108a:	d5f3      	bpl.n	1074 <spi_transceive_buffer_wait+0xa8>
					data_to_send = tx_data[tx_pos++];
    108c:	1c70      	adds	r0, r6, #1
    108e:	b280      	uxth	r0, r0
    1090:	9901      	ldr	r1, [sp, #4]
    1092:	5d89      	ldrb	r1, [r1, r6]
    1094:	468a      	mov	sl, r1
    1096:	ad02      	add	r5, sp, #8
    1098:	8069      	strh	r1, [r5, #2]
    109a:	8869      	ldrh	r1, [r5, #2]
    109c:	4689      	mov	r9, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    109e:	79a1      	ldrb	r1, [r4, #6]
    10a0:	2901      	cmp	r1, #1
    10a2:	d0db      	beq.n	105c <spi_transceive_buffer_wait+0x90>
    10a4:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    10a6:	07f1      	lsls	r1, r6, #31
    10a8:	d5e1      	bpl.n	106e <spi_transceive_buffer_wait+0xa2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    10aa:	4649      	mov	r1, r9
    10ac:	05c9      	lsls	r1, r1, #23
    10ae:	0dc9      	lsrs	r1, r1, #23
    10b0:	6291      	str	r1, [r2, #40]	; 0x28
    10b2:	e7dc      	b.n	106e <spi_transceive_buffer_wait+0xa2>
    10b4:	2300      	movs	r3, #0
    10b6:	e7e2      	b.n	107e <spi_transceive_buffer_wait+0xb2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10b8:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    10ba:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    10bc:	0792      	lsls	r2, r2, #30
    10be:	d404      	bmi.n	10ca <spi_transceive_buffer_wait+0xfe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    10c0:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    10c2:	075b      	lsls	r3, r3, #29
    10c4:	d43c      	bmi.n	1140 <spi_transceive_buffer_wait+0x174>
				return STATUS_ERR_TIMEOUT;
    10c6:	2212      	movs	r2, #18
    10c8:	e0a4      	b.n	1214 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    10ca:	0020      	movs	r0, r4
    10cc:	4b56      	ldr	r3, [pc, #344]	; (1228 <spi_transceive_buffer_wait+0x25c>)
    10ce:	4798      	blx	r3
				return STATUS_ABORTED;
    10d0:	2204      	movs	r2, #4
    10d2:	e09f      	b.n	1214 <spi_transceive_buffer_wait+0x248>
	enum status_code retval = STATUS_OK;
    10d4:	2200      	movs	r2, #0
    10d6:	e044      	b.n	1162 <spi_transceive_buffer_wait+0x196>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    10d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    10da:	05c9      	lsls	r1, r1, #23
    10dc:	0dc9      	lsrs	r1, r1, #23
    10de:	e001      	b.n	10e4 <spi_transceive_buffer_wait+0x118>
		uint16_t received_data = 0;
    10e0:	2100      	movs	r1, #0
		return STATUS_ERR_IO;
    10e2:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
    10e4:	2a00      	cmp	r2, #0
    10e6:	d000      	beq.n	10ea <spi_transceive_buffer_wait+0x11e>
    10e8:	e094      	b.n	1214 <spi_transceive_buffer_wait+0x248>
		rx_data[rx_pos++] = received_data;
    10ea:	4643      	mov	r3, r8
    10ec:	3301      	adds	r3, #1
    10ee:	b29b      	uxth	r3, r3
    10f0:	9a03      	ldr	r2, [sp, #12]
    10f2:	4640      	mov	r0, r8
    10f4:	5411      	strb	r1, [r2, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10f6:	79a2      	ldrb	r2, [r4, #6]
    10f8:	2a01      	cmp	r2, #1
    10fa:	d038      	beq.n	116e <spi_transceive_buffer_wait+0x1a2>
			rx_data[rx_pos++] = (received_data >> 8);
    10fc:	4698      	mov	r8, r3
    10fe:	0031      	movs	r1, r6
    1100:	003e      	movs	r6, r7
	while (length--) {
    1102:	1e77      	subs	r7, r6, #1
    1104:	b2bf      	uxth	r7, r7
    1106:	2e00      	cmp	r6, #0
    1108:	d037      	beq.n	117a <spi_transceive_buffer_wait+0x1ae>
		if (module->mode == SPI_MODE_SLAVE) {
    110a:	7963      	ldrb	r3, [r4, #5]
    110c:	2b00      	cmp	r3, #0
    110e:	d085      	beq.n	101c <spi_transceive_buffer_wait+0x50>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1110:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1112:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    1114:	07d2      	lsls	r2, r2, #31
    1116:	d5fb      	bpl.n	1110 <spi_transceive_buffer_wait+0x144>
		uint16_t data_to_send = tx_data[tx_pos++];
    1118:	1c4e      	adds	r6, r1, #1
    111a:	b2b6      	uxth	r6, r6
    111c:	9a01      	ldr	r2, [sp, #4]
    111e:	5c52      	ldrb	r2, [r2, r1]
    1120:	4692      	mov	sl, r2
    1122:	a802      	add	r0, sp, #8
    1124:	8042      	strh	r2, [r0, #2]
    1126:	8842      	ldrh	r2, [r0, #2]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1128:	79a0      	ldrb	r0, [r4, #6]
    112a:	2801      	cmp	r0, #1
    112c:	d08e      	beq.n	104c <spi_transceive_buffer_wait+0x80>
    112e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1130:	07c9      	lsls	r1, r1, #31
    1132:	d502      	bpl.n	113a <spi_transceive_buffer_wait+0x16e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1134:	05d2      	lsls	r2, r2, #23
    1136:	0dd2      	lsrs	r2, r2, #23
    1138:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    113a:	7963      	ldrb	r3, [r4, #5]
    113c:	2b00      	cmp	r3, #0
    113e:	d0b9      	beq.n	10b4 <spi_transceive_buffer_wait+0xe8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1140:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1142:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    1144:	0752      	lsls	r2, r2, #29
    1146:	d5fb      	bpl.n	1140 <spi_transceive_buffer_wait+0x174>
		rx_length--;
    1148:	4662      	mov	r2, ip
    114a:	3a01      	subs	r2, #1
    114c:	b292      	uxth	r2, r2
    114e:	4694      	mov	ip, r2
    1150:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1152:	0752      	lsls	r2, r2, #29
    1154:	d5c4      	bpl.n	10e0 <spi_transceive_buffer_wait+0x114>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1156:	8b5a      	ldrh	r2, [r3, #26]
    1158:	0752      	lsls	r2, r2, #29
    115a:	d5bb      	bpl.n	10d4 <spi_transceive_buffer_wait+0x108>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    115c:	2204      	movs	r2, #4
    115e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1160:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1162:	79a1      	ldrb	r1, [r4, #6]
    1164:	2901      	cmp	r1, #1
    1166:	d0b7      	beq.n	10d8 <spi_transceive_buffer_wait+0x10c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1168:	6a99      	ldr	r1, [r3, #40]	; 0x28
    116a:	b2c9      	uxtb	r1, r1
    116c:	e7ba      	b.n	10e4 <spi_transceive_buffer_wait+0x118>
			rx_data[rx_pos++] = (received_data >> 8);
    116e:	3002      	adds	r0, #2
    1170:	0a09      	lsrs	r1, r1, #8
    1172:	9a03      	ldr	r2, [sp, #12]
    1174:	54d1      	strb	r1, [r2, r3]
    1176:	b283      	uxth	r3, r0
    1178:	e7c0      	b.n	10fc <spi_transceive_buffer_wait+0x130>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    117a:	7962      	ldrb	r2, [r4, #5]
    117c:	2a01      	cmp	r2, #1
    117e:	d003      	beq.n	1188 <spi_transceive_buffer_wait+0x1bc>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1180:	2a00      	cmp	r2, #0
    1182:	d039      	beq.n	11f8 <spi_transceive_buffer_wait+0x22c>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1184:	2200      	movs	r2, #0
    1186:	e045      	b.n	1214 <spi_transceive_buffer_wait+0x248>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1188:	6823      	ldr	r3, [r4, #0]
    118a:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    118c:	079b      	lsls	r3, r3, #30
    118e:	d5fb      	bpl.n	1188 <spi_transceive_buffer_wait+0x1bc>
    1190:	e7f6      	b.n	1180 <spi_transceive_buffer_wait+0x1b4>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1192:	3301      	adds	r3, #1
    1194:	4a25      	ldr	r2, [pc, #148]	; (122c <spi_transceive_buffer_wait+0x260>)
    1196:	4293      	cmp	r3, r2
    1198:	d803      	bhi.n	11a2 <spi_transceive_buffer_wait+0x1d6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    119a:	6822      	ldr	r2, [r4, #0]
    119c:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    119e:	0752      	lsls	r2, r2, #29
    11a0:	d5f7      	bpl.n	1192 <spi_transceive_buffer_wait+0x1c6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11a2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11a4:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    11a6:	0752      	lsls	r2, r2, #29
    11a8:	d53c      	bpl.n	1224 <spi_transceive_buffer_wait+0x258>
			rx_length--;
    11aa:	4662      	mov	r2, ip
    11ac:	3a01      	subs	r2, #1
    11ae:	b292      	uxth	r2, r2
    11b0:	4694      	mov	ip, r2
    11b2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    11b4:	0752      	lsls	r2, r2, #29
    11b6:	d511      	bpl.n	11dc <spi_transceive_buffer_wait+0x210>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    11b8:	8b5a      	ldrh	r2, [r3, #26]
    11ba:	0752      	lsls	r2, r2, #29
    11bc:	d508      	bpl.n	11d0 <spi_transceive_buffer_wait+0x204>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    11be:	2204      	movs	r2, #4
    11c0:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    11c2:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11c4:	79a1      	ldrb	r1, [r4, #6]
    11c6:	2901      	cmp	r1, #1
    11c8:	d004      	beq.n	11d4 <spi_transceive_buffer_wait+0x208>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    11ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
    11cc:	b2c9      	uxtb	r1, r1
    11ce:	e007      	b.n	11e0 <spi_transceive_buffer_wait+0x214>
	enum status_code retval = STATUS_OK;
    11d0:	2200      	movs	r2, #0
    11d2:	e7f7      	b.n	11c4 <spi_transceive_buffer_wait+0x1f8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    11d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    11d6:	05c9      	lsls	r1, r1, #23
    11d8:	0dc9      	lsrs	r1, r1, #23
    11da:	e001      	b.n	11e0 <spi_transceive_buffer_wait+0x214>
			uint16_t received_data = 0;
    11dc:	0031      	movs	r1, r6
		return STATUS_ERR_IO;
    11de:	2210      	movs	r2, #16
			if (retval != STATUS_OK) {
    11e0:	2a00      	cmp	r2, #0
    11e2:	d117      	bne.n	1214 <spi_transceive_buffer_wait+0x248>
			rx_data[rx_pos++] = received_data;
    11e4:	4643      	mov	r3, r8
    11e6:	3301      	adds	r3, #1
    11e8:	b29b      	uxth	r3, r3
    11ea:	9a03      	ldr	r2, [sp, #12]
    11ec:	4640      	mov	r0, r8
    11ee:	5411      	strb	r1, [r2, r0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11f0:	79a2      	ldrb	r2, [r4, #6]
    11f2:	2a01      	cmp	r2, #1
    11f4:	d005      	beq.n	1202 <spi_transceive_buffer_wait+0x236>
				rx_data[rx_pos++] = (received_data >> 8);
    11f6:	4698      	mov	r8, r3
		while (rx_length) {
    11f8:	4663      	mov	r3, ip
    11fa:	2b00      	cmp	r3, #0
    11fc:	d007      	beq.n	120e <spi_transceive_buffer_wait+0x242>
    11fe:	2300      	movs	r3, #0
    1200:	e7c8      	b.n	1194 <spi_transceive_buffer_wait+0x1c8>
				rx_data[rx_pos++] = (received_data >> 8);
    1202:	3002      	adds	r0, #2
    1204:	0a09      	lsrs	r1, r1, #8
    1206:	9a03      	ldr	r2, [sp, #12]
    1208:	54d1      	strb	r1, [r2, r3]
    120a:	b283      	uxth	r3, r0
    120c:	e7f3      	b.n	11f6 <spi_transceive_buffer_wait+0x22a>
	return STATUS_OK;
    120e:	2200      	movs	r2, #0
    1210:	e000      	b.n	1214 <spi_transceive_buffer_wait+0x248>
		return STATUS_BUSY;
    1212:	2205      	movs	r2, #5
}
    1214:	0010      	movs	r0, r2
    1216:	b005      	add	sp, #20
    1218:	bc3c      	pop	{r2, r3, r4, r5}
    121a:	4690      	mov	r8, r2
    121c:	4699      	mov	r9, r3
    121e:	46a2      	mov	sl, r4
    1220:	46ab      	mov	fp, r5
    1222:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    1224:	2212      	movs	r2, #18
    1226:	e7f5      	b.n	1214 <spi_transceive_buffer_wait+0x248>
    1228:	000009a9 	.word	0x000009a9
    122c:	00002710 	.word	0x00002710

00001230 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1230:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1232:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1234:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    1236:	780a      	ldrb	r2, [r1, #0]
    1238:	b2d2      	uxtb	r2, r2
    123a:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    123c:	1c4c      	adds	r4, r1, #1
    123e:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1240:	7986      	ldrb	r6, [r0, #6]
    1242:	2e01      	cmp	r6, #1
    1244:	d007      	beq.n	1256 <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1246:	05db      	lsls	r3, r3, #23
    1248:	0ddb      	lsrs	r3, r3, #23
    124a:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    124c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    124e:	3b01      	subs	r3, #1
    1250:	b29b      	uxth	r3, r3
    1252:	8683      	strh	r3, [r0, #52]	; 0x34
}
    1254:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1256:	784b      	ldrb	r3, [r1, #1]
    1258:	021b      	lsls	r3, r3, #8
    125a:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    125c:	1c8c      	adds	r4, r1, #2
    125e:	62c4      	str	r4, [r0, #44]	; 0x2c
    1260:	e7f1      	b.n	1246 <_spi_write+0x16>
	...

00001264 <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1264:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1266:	4a04      	ldr	r2, [pc, #16]	; (1278 <_spi_write_dummy+0x14>)
    1268:	8812      	ldrh	r2, [r2, #0]
    126a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    126c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    126e:	3b01      	subs	r3, #1
    1270:	b29b      	uxth	r3, r3
    1272:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1274:	4770      	bx	lr
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	20000400 	.word	0x20000400

0000127c <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    127c:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1280:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1282:	3b01      	subs	r3, #1
    1284:	b29b      	uxth	r3, r3
    1286:	8643      	strh	r3, [r0, #50]	; 0x32
}
    1288:	4770      	bx	lr

0000128a <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    128a:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    128e:	05db      	lsls	r3, r3, #23
    1290:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1292:	b2da      	uxtb	r2, r3
    1294:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1296:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1298:	6a82      	ldr	r2, [r0, #40]	; 0x28
    129a:	1c51      	adds	r1, r2, #1
    129c:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    129e:	7981      	ldrb	r1, [r0, #6]
    12a0:	2901      	cmp	r1, #1
    12a2:	d004      	beq.n	12ae <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    12a4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    12a6:	3b01      	subs	r3, #1
    12a8:	b29b      	uxth	r3, r3
    12aa:	8603      	strh	r3, [r0, #48]	; 0x30
}
    12ac:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    12ae:	0a1b      	lsrs	r3, r3, #8
    12b0:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    12b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    12b4:	3301      	adds	r3, #1
    12b6:	6283      	str	r3, [r0, #40]	; 0x28
    12b8:	e7f4      	b.n	12a4 <_spi_read+0x1a>
	...

000012bc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    12bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    12be:	0080      	lsls	r0, r0, #2
    12c0:	4b6b      	ldr	r3, [pc, #428]	; (1470 <_spi_interrupt_handler+0x1b4>)
    12c2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12c4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    12c6:	2337      	movs	r3, #55	; 0x37
    12c8:	5ce3      	ldrb	r3, [r4, r3]
    12ca:	2236      	movs	r2, #54	; 0x36
    12cc:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    12ce:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    12d0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    12d2:	7db5      	ldrb	r5, [r6, #22]
    12d4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    12d6:	07eb      	lsls	r3, r5, #31
    12d8:	d516      	bpl.n	1308 <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    12da:	7963      	ldrb	r3, [r4, #5]
    12dc:	2b01      	cmp	r3, #1
    12de:	d04d      	beq.n	137c <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    12e0:	7963      	ldrb	r3, [r4, #5]
		if (0
    12e2:	2b01      	cmp	r3, #1
    12e4:	d057      	beq.n	1396 <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    12e6:	2b00      	cmp	r3, #0
    12e8:	d10e      	bne.n	1308 <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    12ea:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    12ec:	2b00      	cmp	r3, #0
    12ee:	d00b      	beq.n	1308 <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    12f0:	0020      	movs	r0, r4
    12f2:	4b60      	ldr	r3, [pc, #384]	; (1474 <_spi_interrupt_handler+0x1b8>)
    12f4:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    12f6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    12f8:	b29b      	uxth	r3, r3
    12fa:	2b00      	cmp	r3, #0
    12fc:	d104      	bne.n	1308 <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    12fe:	3301      	adds	r3, #1
    1300:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1302:	7a63      	ldrb	r3, [r4, #9]
    1304:	2b01      	cmp	r3, #1
    1306:	d04a      	beq.n	139e <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1308:	076b      	lsls	r3, r5, #29
    130a:	d511      	bpl.n	1330 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    130c:	8b73      	ldrh	r3, [r6, #26]
    130e:	075b      	lsls	r3, r3, #29
    1310:	d54f      	bpl.n	13b2 <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1312:	7a63      	ldrb	r3, [r4, #9]
    1314:	2b01      	cmp	r3, #1
    1316:	d008      	beq.n	132a <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1318:	221e      	movs	r2, #30
    131a:	2338      	movs	r3, #56	; 0x38
    131c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    131e:	3b35      	subs	r3, #53	; 0x35
    1320:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1322:	3302      	adds	r3, #2
    1324:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1326:	073b      	lsls	r3, r7, #28
    1328:	d43f      	bmi.n	13aa <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    132a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    132c:	2304      	movs	r3, #4
    132e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1330:	07ab      	lsls	r3, r5, #30
    1332:	d513      	bpl.n	135c <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1334:	7963      	ldrb	r3, [r4, #5]
    1336:	2b00      	cmp	r3, #0
    1338:	d10d      	bne.n	1356 <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    133a:	3307      	adds	r3, #7
    133c:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    133e:	3b05      	subs	r3, #5
    1340:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1342:	3301      	adds	r3, #1
    1344:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    1346:	2300      	movs	r3, #0
    1348:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    134a:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    134c:	3338      	adds	r3, #56	; 0x38
    134e:	2200      	movs	r2, #0
    1350:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1352:	06fb      	lsls	r3, r7, #27
    1354:	d464      	bmi.n	1420 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1356:	7963      	ldrb	r3, [r4, #5]
    1358:	2b01      	cmp	r3, #1
    135a:	d065      	beq.n	1428 <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    135c:	072b      	lsls	r3, r5, #28
    135e:	d508      	bpl.n	1372 <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    1360:	7963      	ldrb	r3, [r4, #5]
    1362:	2b00      	cmp	r3, #0
    1364:	d105      	bne.n	1372 <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1366:	3308      	adds	r3, #8
    1368:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    136a:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    136c:	06bb      	lsls	r3, r7, #26
    136e:	d500      	bpl.n	1372 <_spi_interrupt_handler+0xb6>
    1370:	e070      	b.n	1454 <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1372:	b26d      	sxtb	r5, r5
    1374:	2d00      	cmp	r5, #0
    1376:	da00      	bge.n	137a <_spi_interrupt_handler+0xbe>
    1378:	e070      	b.n	145c <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    137c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    137e:	2b00      	cmp	r3, #0
    1380:	d1ae      	bne.n	12e0 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    1382:	0020      	movs	r0, r4
    1384:	4b3c      	ldr	r3, [pc, #240]	; (1478 <_spi_interrupt_handler+0x1bc>)
    1386:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1388:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    138a:	b29b      	uxth	r3, r3
    138c:	2b00      	cmp	r3, #0
    138e:	d1a7      	bne.n	12e0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1390:	3301      	adds	r3, #1
    1392:	7533      	strb	r3, [r6, #20]
    1394:	e7a4      	b.n	12e0 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    1396:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1398:	2a00      	cmp	r2, #0
    139a:	d1a9      	bne.n	12f0 <_spi_interrupt_handler+0x34>
    139c:	e7a3      	b.n	12e6 <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    139e:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    13a0:	2b00      	cmp	r3, #0
    13a2:	d1b1      	bne.n	1308 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    13a4:	3302      	adds	r3, #2
    13a6:	75b3      	strb	r3, [r6, #22]
    13a8:	e7ae      	b.n	1308 <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    13aa:	0020      	movs	r0, r4
    13ac:	69a3      	ldr	r3, [r4, #24]
    13ae:	4798      	blx	r3
    13b0:	e7bb      	b.n	132a <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    13b2:	7a63      	ldrb	r3, [r4, #9]
    13b4:	2b01      	cmp	r3, #1
    13b6:	d017      	beq.n	13e8 <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    13b8:	0020      	movs	r0, r4
    13ba:	4b30      	ldr	r3, [pc, #192]	; (147c <_spi_interrupt_handler+0x1c0>)
    13bc:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    13be:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13c0:	b29b      	uxth	r3, r3
    13c2:	2b00      	cmp	r3, #0
    13c4:	d1b4      	bne.n	1330 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    13c6:	2200      	movs	r2, #0
    13c8:	3338      	adds	r3, #56	; 0x38
    13ca:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13cc:	3b34      	subs	r3, #52	; 0x34
    13ce:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    13d0:	7a63      	ldrb	r3, [r4, #9]
    13d2:	2b02      	cmp	r3, #2
    13d4:	d01d      	beq.n	1412 <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    13d6:	7a63      	ldrb	r3, [r4, #9]
    13d8:	2b00      	cmp	r3, #0
    13da:	d1a9      	bne.n	1330 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    13dc:	07bb      	lsls	r3, r7, #30
    13de:	d5a7      	bpl.n	1330 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    13e0:	0020      	movs	r0, r4
    13e2:	6923      	ldr	r3, [r4, #16]
    13e4:	4798      	blx	r3
    13e6:	e7a3      	b.n	1330 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    13e8:	0020      	movs	r0, r4
    13ea:	4b25      	ldr	r3, [pc, #148]	; (1480 <_spi_interrupt_handler+0x1c4>)
    13ec:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    13ee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    13f0:	b29b      	uxth	r3, r3
    13f2:	2b00      	cmp	r3, #0
    13f4:	d19c      	bne.n	1330 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13f6:	3304      	adds	r3, #4
    13f8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    13fa:	2200      	movs	r2, #0
    13fc:	3334      	adds	r3, #52	; 0x34
    13fe:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1400:	3b35      	subs	r3, #53	; 0x35
    1402:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1404:	07fb      	lsls	r3, r7, #31
    1406:	d400      	bmi.n	140a <_spi_interrupt_handler+0x14e>
    1408:	e792      	b.n	1330 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    140a:	0020      	movs	r0, r4
    140c:	68e3      	ldr	r3, [r4, #12]
    140e:	4798      	blx	r3
    1410:	e78e      	b.n	1330 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1412:	077b      	lsls	r3, r7, #29
    1414:	d400      	bmi.n	1418 <_spi_interrupt_handler+0x15c>
    1416:	e78b      	b.n	1330 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1418:	0020      	movs	r0, r4
    141a:	6963      	ldr	r3, [r4, #20]
    141c:	4798      	blx	r3
    141e:	e787      	b.n	1330 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1420:	0020      	movs	r0, r4
    1422:	69e3      	ldr	r3, [r4, #28]
    1424:	4798      	blx	r3
    1426:	e796      	b.n	1356 <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1428:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    142a:	2b01      	cmp	r3, #1
    142c:	d000      	beq.n	1430 <_spi_interrupt_handler+0x174>
    142e:	e795      	b.n	135c <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1430:	79e3      	ldrb	r3, [r4, #7]
    1432:	2b00      	cmp	r3, #0
    1434:	d000      	beq.n	1438 <_spi_interrupt_handler+0x17c>
    1436:	e791      	b.n	135c <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1438:	3302      	adds	r3, #2
    143a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    143c:	3301      	adds	r3, #1
    143e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1440:	2200      	movs	r2, #0
    1442:	3335      	adds	r3, #53	; 0x35
    1444:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1446:	07fb      	lsls	r3, r7, #31
    1448:	d400      	bmi.n	144c <_spi_interrupt_handler+0x190>
    144a:	e787      	b.n	135c <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    144c:	0020      	movs	r0, r4
    144e:	68e3      	ldr	r3, [r4, #12]
    1450:	4798      	blx	r3
    1452:	e783      	b.n	135c <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1454:	0020      	movs	r0, r4
    1456:	6a23      	ldr	r3, [r4, #32]
    1458:	4798      	blx	r3
    145a:	e78a      	b.n	1372 <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    145c:	2380      	movs	r3, #128	; 0x80
    145e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1460:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1462:	067b      	lsls	r3, r7, #25
    1464:	d400      	bmi.n	1468 <_spi_interrupt_handler+0x1ac>
    1466:	e788      	b.n	137a <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1468:	6a63      	ldr	r3, [r4, #36]	; 0x24
    146a:	0020      	movs	r0, r4
    146c:	4798      	blx	r3
}
    146e:	e784      	b.n	137a <_spi_interrupt_handler+0xbe>
    1470:	200009c8 	.word	0x200009c8
    1474:	00001231 	.word	0x00001231
    1478:	00001265 	.word	0x00001265
    147c:	0000128b 	.word	0x0000128b
    1480:	0000127d 	.word	0x0000127d

00001484 <FIFO_Count>:
    1484:	2800      	cmp	r0, #0
    1486:	d003      	beq.n	1490 <FIFO_Count+0xc>
    1488:	6803      	ldr	r3, [r0, #0]
    148a:	6840      	ldr	r0, [r0, #4]
    148c:	1a18      	subs	r0, r3, r0
    148e:	4770      	bx	lr
    1490:	2000      	movs	r0, #0
    1492:	e7fc      	b.n	148e <FIFO_Count+0xa>

00001494 <FIFO_Full>:
    1494:	b510      	push	{r4, lr}
    1496:	1e04      	subs	r4, r0, #0
    1498:	d006      	beq.n	14a8 <FIFO_Full+0x14>
    149a:	4b05      	ldr	r3, [pc, #20]	; (14b0 <FIFO_Full+0x1c>)
    149c:	4798      	blx	r3
    149e:	68e3      	ldr	r3, [r4, #12]
    14a0:	4298      	cmp	r0, r3
    14a2:	d003      	beq.n	14ac <FIFO_Full+0x18>
    14a4:	2000      	movs	r0, #0
    14a6:	bd10      	pop	{r4, pc}
    14a8:	2001      	movs	r0, #1
    14aa:	e7fc      	b.n	14a6 <FIFO_Full+0x12>
    14ac:	2001      	movs	r0, #1
    14ae:	e7fa      	b.n	14a6 <FIFO_Full+0x12>
    14b0:	00001485 	.word	0x00001485

000014b4 <FIFO_Put>:
    14b4:	b570      	push	{r4, r5, r6, lr}
    14b6:	0004      	movs	r4, r0
    14b8:	000d      	movs	r5, r1
    14ba:	2800      	cmp	r0, #0
    14bc:	d010      	beq.n	14e0 <FIFO_Put+0x2c>
    14be:	4b0a      	ldr	r3, [pc, #40]	; (14e8 <FIFO_Put+0x34>)
    14c0:	4798      	blx	r3
    14c2:	2800      	cmp	r0, #0
    14c4:	d10e      	bne.n	14e4 <FIFO_Put+0x30>
    14c6:	6820      	ldr	r0, [r4, #0]
    14c8:	68e1      	ldr	r1, [r4, #12]
    14ca:	4b08      	ldr	r3, [pc, #32]	; (14ec <FIFO_Put+0x38>)
    14cc:	4798      	blx	r3
    14ce:	68a3      	ldr	r3, [r4, #8]
    14d0:	469c      	mov	ip, r3
    14d2:	4461      	add	r1, ip
    14d4:	700d      	strb	r5, [r1, #0]
    14d6:	6823      	ldr	r3, [r4, #0]
    14d8:	3301      	adds	r3, #1
    14da:	6023      	str	r3, [r4, #0]
    14dc:	2001      	movs	r0, #1
    14de:	bd70      	pop	{r4, r5, r6, pc}
    14e0:	2000      	movs	r0, #0
    14e2:	e7fc      	b.n	14de <FIFO_Put+0x2a>
    14e4:	2000      	movs	r0, #0
    14e6:	e7fa      	b.n	14de <FIFO_Put+0x2a>
    14e8:	00001495 	.word	0x00001495
    14ec:	00003595 	.word	0x00003595

000014f0 <FIFO_Init>:
    14f0:	2800      	cmp	r0, #0
    14f2:	d008      	beq.n	1506 <FIFO_Init+0x16>
    14f4:	2900      	cmp	r1, #0
    14f6:	d006      	beq.n	1506 <FIFO_Init+0x16>
    14f8:	2a00      	cmp	r2, #0
    14fa:	d004      	beq.n	1506 <FIFO_Init+0x16>
    14fc:	2300      	movs	r3, #0
    14fe:	6003      	str	r3, [r0, #0]
    1500:	6043      	str	r3, [r0, #4]
    1502:	6081      	str	r1, [r0, #8]
    1504:	60c2      	str	r2, [r0, #12]
    1506:	4770      	bx	lr

00001508 <mstimer_set>:
    1508:	b510      	push	{r4, lr}
    150a:	0004      	movs	r4, r0
    150c:	6041      	str	r1, [r0, #4]
    150e:	4b02      	ldr	r3, [pc, #8]	; (1518 <mstimer_set+0x10>)
    1510:	4798      	blx	r3
    1512:	6020      	str	r0, [r4, #0]
    1514:	bd10      	pop	{r4, pc}
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	00001f85 	.word	0x00001f85

0000151c <spieeprom_init>:

// ASF instance of SPI SERCOM module
static struct spi_module spieeprom_inst;

void spieeprom_init()
{
    151c:	b5f0      	push	{r4, r5, r6, r7, lr}
    151e:	b091      	sub	sp, #68	; 0x44
	config->mode             = SPI_MODE_MASTER;
    1520:	ac02      	add	r4, sp, #8
    1522:	2601      	movs	r6, #1
    1524:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1526:	2500      	movs	r5, #0
    1528:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    152a:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    152c:	23c0      	movs	r3, #192	; 0xc0
    152e:	039b      	lsls	r3, r3, #14
    1530:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1532:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    1534:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    1536:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1538:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    153a:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    153c:	2724      	movs	r7, #36	; 0x24
    153e:	55e5      	strb	r5, [r4, r7]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1540:	220c      	movs	r2, #12
    1542:	2100      	movs	r1, #0
    1544:	a808      	add	r0, sp, #32
    1546:	4b24      	ldr	r3, [pc, #144]	; (15d8 <spieeprom_init+0xbc>)
    1548:	4798      	blx	r3
	struct spi_config config_spi;
	spi_get_config_defaults(&config_spi);
	config_spi.mux_setting = EEPROM_PINMUX;
    154a:	2380      	movs	r3, #128	; 0x80
    154c:	025b      	lsls	r3, r3, #9
    154e:	60e3      	str	r3, [r4, #12]
	config_spi.pinmux_pad0 = EEPROM_MISO;
    1550:	4b22      	ldr	r3, [pc, #136]	; (15dc <spieeprom_init+0xc0>)
    1552:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi.pinmux_pad1 = PINMUX_UNUSED;
    1554:	2301      	movs	r3, #1
    1556:	425b      	negs	r3, r3
    1558:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi.pinmux_pad2 = EEPROM_MOSI;
    155a:	4b21      	ldr	r3, [pc, #132]	; (15e0 <spieeprom_init+0xc4>)
    155c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi.pinmux_pad3 = EEPROM_SCK;
    155e:	4b21      	ldr	r3, [pc, #132]	; (15e4 <spieeprom_init+0xc8>)
    1560:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi.generator_source = SPI_EEPROM_CLOCK_SOURCE;
    1562:	55e5      	strb	r5, [r4, r7]
	config_spi.mode_specific.master.baudrate = SPI_EEPROM_MAX_CLOCK;
    1564:	4b20      	ldr	r3, [pc, #128]	; (15e8 <spieeprom_init+0xcc>)
    1566:	61a3      	str	r3, [r4, #24]
	
	spi_init(&spieeprom_inst, SPI_EEPROM, &config_spi);
    1568:	4d20      	ldr	r5, [pc, #128]	; (15ec <spieeprom_init+0xd0>)
    156a:	0022      	movs	r2, r4
    156c:	4920      	ldr	r1, [pc, #128]	; (15f0 <spieeprom_init+0xd4>)
    156e:	0028      	movs	r0, r5
    1570:	4b20      	ldr	r3, [pc, #128]	; (15f4 <spieeprom_init+0xd8>)
    1572:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1574:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1576:	0020      	movs	r0, r4
    1578:	4b1f      	ldr	r3, [pc, #124]	; (15f8 <spieeprom_init+0xdc>)
    157a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    157c:	231f      	movs	r3, #31
    157e:	4018      	ands	r0, r3
    1580:	4086      	lsls	r6, r0
    1582:	4b1e      	ldr	r3, [pc, #120]	; (15fc <spieeprom_init+0xe0>)
    1584:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1586:	4b19      	ldr	r3, [pc, #100]	; (15ec <spieeprom_init+0xd0>)
    1588:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    158a:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    158c:	2b00      	cmp	r3, #0
    158e:	d1fa      	bne.n	1586 <spieeprom_init+0x6a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1590:	6823      	ldr	r3, [r4, #0]
    1592:	2202      	movs	r2, #2
    1594:	4313      	orrs	r3, r2
    1596:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1598:	ac01      	add	r4, sp, #4
    159a:	2301      	movs	r3, #1
    159c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    159e:	2200      	movs	r2, #0
    15a0:	70a2      	strb	r2, [r4, #2]
	spi_enable(&spieeprom_inst);
	
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    15a2:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(EEPROM_CS, &config_port_pin);
    15a4:	0021      	movs	r1, r4
    15a6:	200d      	movs	r0, #13
    15a8:	4d15      	ldr	r5, [pc, #84]	; (1600 <spieeprom_init+0xe4>)
    15aa:	47a8      	blx	r5
	port_pin_set_config(EEPROM_WP, &config_port_pin);
    15ac:	0021      	movs	r1, r4
    15ae:	2010      	movs	r0, #16
    15b0:	47a8      	blx	r5
	port_pin_set_config(EEPROM_HOLD, &config_port_pin);
    15b2:	0021      	movs	r1, r4
    15b4:	2011      	movs	r0, #17
    15b6:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    15b8:	4b12      	ldr	r3, [pc, #72]	; (1604 <spieeprom_init+0xe8>)
    15ba:	2280      	movs	r2, #128	; 0x80
    15bc:	0192      	lsls	r2, r2, #6
    15be:	619a      	str	r2, [r3, #24]
    15c0:	2280      	movs	r2, #128	; 0x80
    15c2:	0252      	lsls	r2, r2, #9
    15c4:	619a      	str	r2, [r3, #24]
    15c6:	2280      	movs	r2, #128	; 0x80
    15c8:	0292      	lsls	r2, r2, #10
    15ca:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(EEPROM_CS, 1);
	port_pin_set_output_level(EEPROM_WP, 1);
	port_pin_set_output_level(EEPROM_HOLD, 1);
	
	eeprom_data_pointer = 0x20EC23F5;
    15cc:	4a0e      	ldr	r2, [pc, #56]	; (1608 <spieeprom_init+0xec>)
    15ce:	4b0f      	ldr	r3, [pc, #60]	; (160c <spieeprom_init+0xf0>)
    15d0:	601a      	str	r2, [r3, #0]
	//update pointer with most recent data address
	eeprom_data_pointer = eeprom_find_latest_data() + sizeof(struct shield_data);
	if(eeprom_data_pointer > (EEPROM_BYTE_TOTAL - sizeof(struct shield_data)))
		eeprom_data_pointer = 0;
	*/
}
    15d2:	b011      	add	sp, #68	; 0x44
    15d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	0000364f 	.word	0x0000364f
    15dc:	000c0002 	.word	0x000c0002
    15e0:	000e0002 	.word	0x000e0002
    15e4:	000f0002 	.word	0x000f0002
    15e8:	000f4240 	.word	0x000f4240
    15ec:	20000030 	.word	0x20000030
    15f0:	42001000 	.word	0x42001000
    15f4:	00000afd 	.word	0x00000afd
    15f8:	000028b9 	.word	0x000028b9
    15fc:	e000e100 	.word	0xe000e100
    1600:	0000293d 	.word	0x0000293d
    1604:	41004400 	.word	0x41004400
    1608:	20ec23f5 	.word	0x20ec23f5
    160c:	20000404 	.word	0x20000404

00001610 <spi_eeprom_wait>:
	
	spi_eeprom_wait();
}

void spi_eeprom_wait()
{
    1610:	b5f0      	push	{r4, r5, r6, r7, lr}
    1612:	b083      	sub	sp, #12
	{
		uint8_t command;
		uint8_t data;
	};
	struct command_frame command_data;
	command_data.command = EEPROM_LPWP;
    1614:	2208      	movs	r2, #8
    1616:	ab01      	add	r3, sp, #4
    1618:	701a      	strb	r2, [r3, #0]
		port_base->OUTCLR.reg = pin_mask;
    161a:	4d08      	ldr	r5, [pc, #32]	; (163c <spi_eeprom_wait+0x2c>)
    161c:	2680      	movs	r6, #128	; 0x80
    161e:	01b6      	lsls	r6, r6, #6
    1620:	616e      	str	r6, [r5, #20]
	do
	{
		port_pin_set_output_level(EEPROM_CS, 0);
		spi_transceive_buffer_wait(&spieeprom_inst, &command_data, &command_data, sizeof(struct command_frame));
    1622:	ac01      	add	r4, sp, #4
    1624:	2302      	movs	r3, #2
    1626:	0022      	movs	r2, r4
    1628:	0021      	movs	r1, r4
    162a:	4805      	ldr	r0, [pc, #20]	; (1640 <spi_eeprom_wait+0x30>)
    162c:	4f05      	ldr	r7, [pc, #20]	; (1644 <spi_eeprom_wait+0x34>)
    162e:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    1630:	61ae      	str	r6, [r5, #24]
		port_pin_set_output_level(EEPROM_CS, 1);
	} while(command_data.data != 0);
    1632:	7863      	ldrb	r3, [r4, #1]
    1634:	2b00      	cmp	r3, #0
    1636:	d1f0      	bne.n	161a <spi_eeprom_wait+0xa>
}
    1638:	b003      	add	sp, #12
    163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    163c:	41004400 	.word	0x41004400
    1640:	20000030 	.word	0x20000030
    1644:	00000fcd 	.word	0x00000fcd

00001648 <spi_eeprom_enable_write>:
{
    1648:	b5f0      	push	{r4, r5, r6, r7, lr}
    164a:	b085      	sub	sp, #20
    164c:	9000      	str	r0, [sp, #0]
    164e:	9101      	str	r1, [sp, #4]
	uint8_t command = EEPROM_WREN;
    1650:	ab02      	add	r3, sp, #8
    1652:	1dd9      	adds	r1, r3, #7
    1654:	2306      	movs	r3, #6
    1656:	700b      	strb	r3, [r1, #0]
		port_base->OUTCLR.reg = pin_mask;
    1658:	4c0a      	ldr	r4, [pc, #40]	; (1684 <spi_eeprom_enable_write+0x3c>)
    165a:	2580      	movs	r5, #128	; 0x80
    165c:	01ad      	lsls	r5, r5, #6
    165e:	6165      	str	r5, [r4, #20]
	spi_write_buffer_wait(&spieeprom_inst, &command, 1);
    1660:	4e09      	ldr	r6, [pc, #36]	; (1688 <spi_eeprom_enable_write+0x40>)
    1662:	2201      	movs	r2, #1
    1664:	0030      	movs	r0, r6
    1666:	4f09      	ldr	r7, [pc, #36]	; (168c <spi_eeprom_enable_write+0x44>)
    1668:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    166a:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    166c:	6165      	str	r5, [r4, #20]
	spi_write_buffer_wait(&spieeprom_inst, data, size);
    166e:	466b      	mov	r3, sp
    1670:	889a      	ldrh	r2, [r3, #4]
    1672:	9900      	ldr	r1, [sp, #0]
    1674:	0030      	movs	r0, r6
    1676:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    1678:	61a5      	str	r5, [r4, #24]
	spi_eeprom_wait();
    167a:	4b05      	ldr	r3, [pc, #20]	; (1690 <spi_eeprom_enable_write+0x48>)
    167c:	4798      	blx	r3
}
    167e:	b005      	add	sp, #20
    1680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	41004400 	.word	0x41004400
    1688:	20000030 	.word	0x20000030
    168c:	00000de1 	.word	0x00000de1
    1690:	00001611 	.word	0x00001611

00001694 <spi_eeprom_write_address>:

void spi_eeprom_write_address(struct shield_data *address, struct shield_data *data)
{
    1694:	b500      	push	{lr}
    1696:	b085      	sub	sp, #20
	write_frame_union curr_frame;
	curr_frame.frame.cmd = EEPROM_WRITE;
    1698:	2302      	movs	r3, #2
    169a:	466a      	mov	r2, sp
    169c:	7013      	strb	r3, [r2, #0]
	curr_frame.frame.addr_high = (((uint32_t) address) >> 16) & 0x3;
    169e:	0c02      	lsrs	r2, r0, #16
    16a0:	3301      	adds	r3, #1
    16a2:	4013      	ands	r3, r2
    16a4:	466a      	mov	r2, sp
    16a6:	7053      	strb	r3, [r2, #1]
	curr_frame.frame.addr_mid = (((uint32_t) address) >> 8) & 0xFF;
    16a8:	0a03      	lsrs	r3, r0, #8
    16aa:	7093      	strb	r3, [r2, #2]
	curr_frame.frame.addr_low = ((uint32_t) address) & 0xFF;
    16ac:	70d0      	strb	r0, [r2, #3]
	memcpy(&curr_frame.frame.data, data, sizeof(struct shield_data));
    16ae:	220c      	movs	r2, #12
    16b0:	a801      	add	r0, sp, #4
    16b2:	4b04      	ldr	r3, [pc, #16]	; (16c4 <spi_eeprom_write_address+0x30>)
    16b4:	4798      	blx	r3
	spi_eeprom_enable_write(&curr_frame.databytes, sizeof(write_frame_union));
    16b6:	2110      	movs	r1, #16
    16b8:	4668      	mov	r0, sp
    16ba:	4b03      	ldr	r3, [pc, #12]	; (16c8 <spi_eeprom_write_address+0x34>)
    16bc:	4798      	blx	r3
}
    16be:	b005      	add	sp, #20
    16c0:	bd00      	pop	{pc}
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	0000363d 	.word	0x0000363d
    16c8:	00001649 	.word	0x00001649

000016cc <spi_eeprom_read_address>:

struct shield_data spi_eeprom_read_address(struct shield_data *address)
{
    16cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ce:	b085      	sub	sp, #20
    16d0:	0004      	movs	r4, r0
	struct shield_data ret_data;
	write_frame_union curr_frame;
	curr_frame.frame.cmd = EEPROM_READ;
    16d2:	2303      	movs	r3, #3
    16d4:	466a      	mov	r2, sp
    16d6:	7013      	strb	r3, [r2, #0]
	curr_frame.frame.addr_high = (((uint32_t) address) >> 16) & 0x3;
    16d8:	0c0a      	lsrs	r2, r1, #16
    16da:	4013      	ands	r3, r2
    16dc:	466a      	mov	r2, sp
    16de:	7053      	strb	r3, [r2, #1]
	curr_frame.frame.addr_mid = (((uint32_t) address) >> 8) & 0xFF;
    16e0:	0a0b      	lsrs	r3, r1, #8
    16e2:	7093      	strb	r3, [r2, #2]
	curr_frame.frame.addr_low = ((uint32_t) address) & 0xFF;
    16e4:	70d1      	strb	r1, [r2, #3]
		port_base->OUTCLR.reg = pin_mask;
    16e6:	4d09      	ldr	r5, [pc, #36]	; (170c <spi_eeprom_read_address+0x40>)
    16e8:	2680      	movs	r6, #128	; 0x80
    16ea:	01b6      	lsls	r6, r6, #6
    16ec:	616e      	str	r6, [r5, #20]
	port_pin_set_output_level(EEPROM_CS, 0);
	spi_transceive_buffer_wait(&spieeprom_inst, &curr_frame.databytes, &curr_frame.databytes, sizeof(write_frame_union));
    16ee:	2310      	movs	r3, #16
    16f0:	4669      	mov	r1, sp
    16f2:	4807      	ldr	r0, [pc, #28]	; (1710 <spi_eeprom_read_address+0x44>)
    16f4:	4f07      	ldr	r7, [pc, #28]	; (1714 <spi_eeprom_read_address+0x48>)
    16f6:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    16f8:	61ae      	str	r6, [r5, #24]
	port_pin_set_output_level(EEPROM_CS, 1);
	return curr_frame.frame.data;
    16fa:	220c      	movs	r2, #12
    16fc:	a901      	add	r1, sp, #4
    16fe:	0020      	movs	r0, r4
    1700:	4b05      	ldr	r3, [pc, #20]	; (1718 <spi_eeprom_read_address+0x4c>)
    1702:	4798      	blx	r3
}
    1704:	0020      	movs	r0, r4
    1706:	b005      	add	sp, #20
    1708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	41004400 	.word	0x41004400
    1710:	20000030 	.word	0x20000030
    1714:	00000fcd 	.word	0x00000fcd
    1718:	0000363d 	.word	0x0000363d

0000171c <is_timestamp_later>:

//returns true if time1 is later than time2
bool is_timestamp_later(struct rtc_calendar_time *time1, struct rtc_calendar_time *time2)
{
    171c:	b510      	push	{r4, lr}
	if(time1->year > time2->year)
    171e:	88c2      	ldrh	r2, [r0, #6]
    1720:	88cb      	ldrh	r3, [r1, #6]
    1722:	429a      	cmp	r2, r3
    1724:	d825      	bhi.n	1772 <is_timestamp_later+0x56>
		return true;
	else if(time1->year == time2->year)
    1726:	d001      	beq.n	172c <is_timestamp_later+0x10>
					if(time1->minute > time2->minute)
						return true;
					else if(time1->minute == time2->hour)
						if(time1->second > time2->second)
							return true;
	return false;
    1728:	2000      	movs	r0, #0
}
    172a:	bd10      	pop	{r4, pc}
		if(time1->month > time2->month)
    172c:	7942      	ldrb	r2, [r0, #5]
    172e:	794b      	ldrb	r3, [r1, #5]
    1730:	429a      	cmp	r2, r3
    1732:	d820      	bhi.n	1776 <is_timestamp_later+0x5a>
		else if(time1->month == time2->month)
    1734:	d001      	beq.n	173a <is_timestamp_later+0x1e>
	return false;
    1736:	2000      	movs	r0, #0
    1738:	e7f7      	b.n	172a <is_timestamp_later+0xe>
			if(time1->day > time2->day)
    173a:	7902      	ldrb	r2, [r0, #4]
    173c:	790b      	ldrb	r3, [r1, #4]
    173e:	429a      	cmp	r2, r3
    1740:	d81b      	bhi.n	177a <is_timestamp_later+0x5e>
			else if(time1->day == time2->day)
    1742:	d001      	beq.n	1748 <is_timestamp_later+0x2c>
	return false;
    1744:	2000      	movs	r0, #0
    1746:	e7f0      	b.n	172a <is_timestamp_later+0xe>
				if(time1->hour > time2->hour)
    1748:	7882      	ldrb	r2, [r0, #2]
    174a:	788b      	ldrb	r3, [r1, #2]
    174c:	429a      	cmp	r2, r3
    174e:	d816      	bhi.n	177e <is_timestamp_later+0x62>
				else if(time1->hour == time2->hour)
    1750:	d001      	beq.n	1756 <is_timestamp_later+0x3a>
	return false;
    1752:	2000      	movs	r0, #0
    1754:	e7e9      	b.n	172a <is_timestamp_later+0xe>
					if(time1->minute > time2->minute)
    1756:	7842      	ldrb	r2, [r0, #1]
    1758:	784c      	ldrb	r4, [r1, #1]
    175a:	42a2      	cmp	r2, r4
    175c:	d811      	bhi.n	1782 <is_timestamp_later+0x66>
					else if(time1->minute == time2->hour)
    175e:	4293      	cmp	r3, r2
    1760:	d001      	beq.n	1766 <is_timestamp_later+0x4a>
	return false;
    1762:	2000      	movs	r0, #0
    1764:	e7e1      	b.n	172a <is_timestamp_later+0xe>
						if(time1->second > time2->second)
    1766:	7802      	ldrb	r2, [r0, #0]
    1768:	780b      	ldrb	r3, [r1, #0]
    176a:	429a      	cmp	r2, r3
    176c:	d80b      	bhi.n	1786 <is_timestamp_later+0x6a>
	return false;
    176e:	2000      	movs	r0, #0
    1770:	e7db      	b.n	172a <is_timestamp_later+0xe>
		return true;
    1772:	2001      	movs	r0, #1
    1774:	e7d9      	b.n	172a <is_timestamp_later+0xe>
			return true;
    1776:	2001      	movs	r0, #1
    1778:	e7d7      	b.n	172a <is_timestamp_later+0xe>
				return true;
    177a:	2001      	movs	r0, #1
    177c:	e7d5      	b.n	172a <is_timestamp_later+0xe>
					return true;
    177e:	2001      	movs	r0, #1
    1780:	e7d3      	b.n	172a <is_timestamp_later+0xe>
						return true;
    1782:	2001      	movs	r0, #1
    1784:	e7d1      	b.n	172a <is_timestamp_later+0xe>
							return true;
    1786:	2001      	movs	r0, #1
    1788:	e7cf      	b.n	172a <is_timestamp_later+0xe>
	...

0000178c <eeprom_write_data>:
			eeprom_data_pointer = latest_data;
	}
}

void eeprom_write_data(struct shield_data *data)
{
    178c:	b510      	push	{r4, lr}
    178e:	0001      	movs	r1, r0
	//uint8_t pointerval = ((uint32_t) eeprom_data_pointer) & 0xFF;
	uint16_t temp = 5;
	if(((((uint32_t) eeprom_data_pointer) & 0xFF) + sizeof(shield_data)) <= 0x100)
    1790:	4b0d      	ldr	r3, [pc, #52]	; (17c8 <eeprom_write_data+0x3c>)
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	22ff      	movs	r2, #255	; 0xff
    1796:	401a      	ands	r2, r3
    1798:	320c      	adds	r2, #12
    179a:	2080      	movs	r0, #128	; 0x80
    179c:	0040      	lsls	r0, r0, #1
    179e:	4282      	cmp	r2, r0
    17a0:	d90a      	bls.n	17b8 <eeprom_write_data+0x2c>
		spi_eeprom_write_address(eeprom_data_pointer++, data);
	}
	else
	{
		temp = 1;
		eeprom_data_pointer = (((uint32_t) eeprom_data_pointer) & 0xFFFFFF00) + 0x100;
    17a2:	22ff      	movs	r2, #255	; 0xff
    17a4:	4393      	bics	r3, r2
    17a6:	1c58      	adds	r0, r3, #1
    17a8:	30ff      	adds	r0, #255	; 0xff
		spi_eeprom_write_address(eeprom_data_pointer++, data);
    17aa:	330d      	adds	r3, #13
    17ac:	33ff      	adds	r3, #255	; 0xff
    17ae:	4a06      	ldr	r2, [pc, #24]	; (17c8 <eeprom_write_data+0x3c>)
    17b0:	6013      	str	r3, [r2, #0]
    17b2:	4b06      	ldr	r3, [pc, #24]	; (17cc <eeprom_write_data+0x40>)
    17b4:	4798      	blx	r3
	}
    17b6:	bd10      	pop	{r4, pc}
		spi_eeprom_write_address(eeprom_data_pointer++, data);
    17b8:	0018      	movs	r0, r3
    17ba:	300c      	adds	r0, #12
    17bc:	4a02      	ldr	r2, [pc, #8]	; (17c8 <eeprom_write_data+0x3c>)
    17be:	6010      	str	r0, [r2, #0]
    17c0:	0018      	movs	r0, r3
    17c2:	4b02      	ldr	r3, [pc, #8]	; (17cc <eeprom_write_data+0x40>)
    17c4:	4798      	blx	r3
    17c6:	e7f6      	b.n	17b6 <eeprom_write_data+0x2a>
    17c8:	20000404 	.word	0x20000404
    17cc:	00001695 	.word	0x00001695

000017d0 <fiber1_callback>:
    usart_disable(&uartfiber_inst1);
	usart_disable(&uartfiber_inst2);
}

void fiber1_callback()
{
    17d0:	b510      	push	{r4, lr}
	uint8_t tempdata = fiber1_buffer;
    17d2:	4b14      	ldr	r3, [pc, #80]	; (1824 <fiber1_callback+0x54>)
    17d4:	781b      	ldrb	r3, [r3, #0]
    17d6:	b2db      	uxtb	r3, r3
	
	if(fiber1_data_status != data_ready)
    17d8:	4a13      	ldr	r2, [pc, #76]	; (1828 <fiber1_callback+0x58>)
    17da:	7812      	ldrb	r2, [r2, #0]
    17dc:	2a01      	cmp	r2, #1
    17de:	d00b      	beq.n	17f8 <fiber1_callback+0x28>
	{
		if (tempdata == '$')
    17e0:	2b24      	cmp	r3, #36	; 0x24
    17e2:	d00f      	beq.n	1804 <fiber1_callback+0x34>
		{
			fiber1_pointer = 0;
			fiber1_data_status = data_being_processed;
		}
		else if(tempdata == '%' && fiber1_data_status == data_being_processed)
    17e4:	2b25      	cmp	r3, #37	; 0x25
    17e6:	d014      	beq.n	1812 <fiber1_callback+0x42>
		{
			fiber1_data_status = data_ready;
		}
		else
		{
			fiber1_data.bytes[fiber1_pointer++] = tempdata;
    17e8:	4810      	ldr	r0, [pc, #64]	; (182c <fiber1_callback+0x5c>)
    17ea:	7802      	ldrb	r2, [r0, #0]
    17ec:	b2d2      	uxtb	r2, r2
    17ee:	1c51      	adds	r1, r2, #1
    17f0:	b2c9      	uxtb	r1, r1
    17f2:	7001      	strb	r1, [r0, #0]
    17f4:	490e      	ldr	r1, [pc, #56]	; (1830 <fiber1_callback+0x60>)
    17f6:	548b      	strb	r3, [r1, r2]
		}
	}
	usart_read_buffer_job(&uartfiber_inst1, &fiber1_buffer, 1);
    17f8:	2201      	movs	r2, #1
    17fa:	490a      	ldr	r1, [pc, #40]	; (1824 <fiber1_callback+0x54>)
    17fc:	480d      	ldr	r0, [pc, #52]	; (1834 <fiber1_callback+0x64>)
    17fe:	4b0e      	ldr	r3, [pc, #56]	; (1838 <fiber1_callback+0x68>)
    1800:	4798      	blx	r3
}
    1802:	bd10      	pop	{r4, pc}
			fiber1_pointer = 0;
    1804:	2200      	movs	r2, #0
    1806:	4b09      	ldr	r3, [pc, #36]	; (182c <fiber1_callback+0x5c>)
    1808:	701a      	strb	r2, [r3, #0]
			fiber1_data_status = data_being_processed;
    180a:	3202      	adds	r2, #2
    180c:	4b06      	ldr	r3, [pc, #24]	; (1828 <fiber1_callback+0x58>)
    180e:	701a      	strb	r2, [r3, #0]
    1810:	e7f2      	b.n	17f8 <fiber1_callback+0x28>
		else if(tempdata == '%' && fiber1_data_status == data_being_processed)
    1812:	4a05      	ldr	r2, [pc, #20]	; (1828 <fiber1_callback+0x58>)
    1814:	7812      	ldrb	r2, [r2, #0]
    1816:	2a02      	cmp	r2, #2
    1818:	d1e6      	bne.n	17e8 <fiber1_callback+0x18>
			fiber1_data_status = data_ready;
    181a:	3a01      	subs	r2, #1
    181c:	4b02      	ldr	r3, [pc, #8]	; (1828 <fiber1_callback+0x58>)
    181e:	701a      	strb	r2, [r3, #0]
    1820:	e7ea      	b.n	17f8 <fiber1_callback+0x28>
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	20000414 	.word	0x20000414
    1828:	2000040c 	.word	0x2000040c
    182c:	20000415 	.word	0x20000415
    1830:	20000410 	.word	0x20000410
    1834:	2000006c 	.word	0x2000006c
    1838:	000026b5 	.word	0x000026b5

0000183c <fiber2_callback>:
void fiber2_callback()
{
    183c:	b510      	push	{r4, lr}
	uint8_t tempdata = fiber2_buffer;
    183e:	4b14      	ldr	r3, [pc, #80]	; (1890 <fiber2_callback+0x54>)
    1840:	781b      	ldrb	r3, [r3, #0]
    1842:	b2db      	uxtb	r3, r3
	
	if(fiber2_data_status != data_ready)
    1844:	4a13      	ldr	r2, [pc, #76]	; (1894 <fiber2_callback+0x58>)
    1846:	7812      	ldrb	r2, [r2, #0]
    1848:	2a01      	cmp	r2, #1
    184a:	d00b      	beq.n	1864 <fiber2_callback+0x28>
	{
		if (tempdata == '$')
    184c:	2b24      	cmp	r3, #36	; 0x24
    184e:	d00f      	beq.n	1870 <fiber2_callback+0x34>
		{
			fiber2_pointer = 0;
			fiber2_data_status = data_being_processed;
		}
		else if(tempdata == '%' && fiber2_data_status == data_being_processed)
    1850:	2b25      	cmp	r3, #37	; 0x25
    1852:	d014      	beq.n	187e <fiber2_callback+0x42>
		{
			fiber2_data_status = data_ready;
		}
		else
		{
			fiber2_data.bytes[fiber2_pointer++] = tempdata;
    1854:	4810      	ldr	r0, [pc, #64]	; (1898 <fiber2_callback+0x5c>)
    1856:	7802      	ldrb	r2, [r0, #0]
    1858:	b2d2      	uxtb	r2, r2
    185a:	1c51      	adds	r1, r2, #1
    185c:	b2c9      	uxtb	r1, r1
    185e:	7001      	strb	r1, [r0, #0]
    1860:	490e      	ldr	r1, [pc, #56]	; (189c <fiber2_callback+0x60>)
    1862:	548b      	strb	r3, [r1, r2]
		}
	}
	usart_read_buffer_job(&uartfiber_inst2, &fiber2_buffer, 1);
    1864:	2201      	movs	r2, #1
    1866:	490a      	ldr	r1, [pc, #40]	; (1890 <fiber2_callback+0x54>)
    1868:	480d      	ldr	r0, [pc, #52]	; (18a0 <fiber2_callback+0x64>)
    186a:	4b0e      	ldr	r3, [pc, #56]	; (18a4 <fiber2_callback+0x68>)
    186c:	4798      	blx	r3
}
    186e:	bd10      	pop	{r4, pc}
			fiber2_pointer = 0;
    1870:	2200      	movs	r2, #0
    1872:	4b09      	ldr	r3, [pc, #36]	; (1898 <fiber2_callback+0x5c>)
    1874:	701a      	strb	r2, [r3, #0]
			fiber2_data_status = data_being_processed;
    1876:	3202      	adds	r2, #2
    1878:	4b06      	ldr	r3, [pc, #24]	; (1894 <fiber2_callback+0x58>)
    187a:	701a      	strb	r2, [r3, #0]
    187c:	e7f2      	b.n	1864 <fiber2_callback+0x28>
		else if(tempdata == '%' && fiber2_data_status == data_being_processed)
    187e:	4a05      	ldr	r2, [pc, #20]	; (1894 <fiber2_callback+0x58>)
    1880:	7812      	ldrb	r2, [r2, #0]
    1882:	2a02      	cmp	r2, #2
    1884:	d1e6      	bne.n	1854 <fiber2_callback+0x18>
			fiber2_data_status = data_ready;
    1886:	3a01      	subs	r2, #1
    1888:	4b02      	ldr	r3, [pc, #8]	; (1894 <fiber2_callback+0x58>)
    188a:	701a      	strb	r2, [r3, #0]
    188c:	e7ea      	b.n	1864 <fiber2_callback+0x28>
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	2000040f 	.word	0x2000040f
    1894:	2000040d 	.word	0x2000040d
    1898:	2000040e 	.word	0x2000040e
    189c:	20000418 	.word	0x20000418
    18a0:	200000a0 	.word	0x200000a0
    18a4:	000026b5 	.word	0x000026b5

000018a8 <uartfiber_init>:
{
    18a8:	b570      	push	{r4, r5, r6, lr}
    18aa:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    18ac:	2380      	movs	r3, #128	; 0x80
    18ae:	05db      	lsls	r3, r3, #23
    18b0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    18b2:	2300      	movs	r3, #0
    18b4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    18b6:	22ff      	movs	r2, #255	; 0xff
    18b8:	4669      	mov	r1, sp
    18ba:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    18bc:	2200      	movs	r2, #0
    18be:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    18c0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    18c2:	2101      	movs	r1, #1
    18c4:	2024      	movs	r0, #36	; 0x24
    18c6:	466c      	mov	r4, sp
    18c8:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    18ca:	3001      	adds	r0, #1
    18cc:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    18ce:	3125      	adds	r1, #37	; 0x25
    18d0:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    18d2:	3101      	adds	r1, #1
    18d4:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    18d6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    18d8:	3105      	adds	r1, #5
    18da:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    18dc:	3101      	adds	r1, #1
    18de:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    18e0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    18e2:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    18e4:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    18e6:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    18e8:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    18ea:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    18ec:	2313      	movs	r3, #19
    18ee:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    18f0:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    18f2:	23e1      	movs	r3, #225	; 0xe1
    18f4:	019b      	lsls	r3, r3, #6
    18f6:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX1;
    18f8:	23c0      	movs	r3, #192	; 0xc0
    18fa:	039b      	lsls	r3, r3, #14
    18fc:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_UNUSED;
    18fe:	2301      	movs	r3, #1
    1900:	425b      	negs	r3, r3
    1902:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1904:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    1906:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = URX_FIBER1;
    1908:	4b42      	ldr	r3, [pc, #264]	; (1a14 <uartfiber_init+0x16c>)
    190a:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst1, UART_FIBER1, &config_usart) != STATUS_OK);
    190c:	466a      	mov	r2, sp
    190e:	4942      	ldr	r1, [pc, #264]	; (1a18 <uartfiber_init+0x170>)
    1910:	4842      	ldr	r0, [pc, #264]	; (1a1c <uartfiber_init+0x174>)
    1912:	4b43      	ldr	r3, [pc, #268]	; (1a20 <uartfiber_init+0x178>)
    1914:	4798      	blx	r3
    1916:	2800      	cmp	r0, #0
    1918:	d1f8      	bne.n	190c <uartfiber_init+0x64>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    191a:	4b40      	ldr	r3, [pc, #256]	; (1a1c <uartfiber_init+0x174>)
    191c:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    191e:	0020      	movs	r0, r4
    1920:	4b40      	ldr	r3, [pc, #256]	; (1a24 <uartfiber_init+0x17c>)
    1922:	4798      	blx	r3
    1924:	231f      	movs	r3, #31
    1926:	4018      	ands	r0, r3
    1928:	3b1e      	subs	r3, #30
    192a:	4083      	lsls	r3, r0
    192c:	4a3e      	ldr	r2, [pc, #248]	; (1a28 <uartfiber_init+0x180>)
    192e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1930:	4b3a      	ldr	r3, [pc, #232]	; (1a1c <uartfiber_init+0x174>)
    1932:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1934:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1936:	2b00      	cmp	r3, #0
    1938:	d1fa      	bne.n	1930 <uartfiber_init+0x88>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    193a:	6823      	ldr	r3, [r4, #0]
    193c:	2202      	movs	r2, #2
    193e:	4313      	orrs	r3, r2
    1940:	6023      	str	r3, [r4, #0]
	config->data_order       = USART_DATAORDER_LSB;
    1942:	2380      	movs	r3, #128	; 0x80
    1944:	05db      	lsls	r3, r3, #23
    1946:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1948:	2300      	movs	r3, #0
    194a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    194c:	32fd      	adds	r2, #253	; 0xfd
    194e:	4669      	mov	r1, sp
    1950:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1952:	2200      	movs	r2, #0
    1954:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1956:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    1958:	2101      	movs	r1, #1
    195a:	2024      	movs	r0, #36	; 0x24
    195c:	466c      	mov	r4, sp
    195e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1960:	3001      	adds	r0, #1
    1962:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1964:	3125      	adds	r1, #37	; 0x25
    1966:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1968:	3101      	adds	r1, #1
    196a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    196c:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    196e:	3105      	adds	r1, #5
    1970:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1972:	3101      	adds	r1, #1
    1974:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1976:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1978:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    197a:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    197c:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    197e:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    1980:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1982:	2313      	movs	r3, #19
    1984:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    1986:	7762      	strb	r2, [r4, #29]
    config_usart.baudrate    = UART_FIBER_BAUD;
    1988:	23e1      	movs	r3, #225	; 0xe1
    198a:	019b      	lsls	r3, r3, #6
    198c:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART_FIBER_PINMUX2;
    198e:	2380      	movs	r3, #128	; 0x80
    1990:	025b      	lsls	r3, r3, #9
    1992:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = URX_FIBER2;
    1994:	4b25      	ldr	r3, [pc, #148]	; (1a2c <uartfiber_init+0x184>)
    1996:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1998:	2301      	movs	r3, #1
    199a:	425b      	negs	r3, r3
    199c:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    199e:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    19a0:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uartfiber_inst2, UART_FIBER2, &config_usart) != STATUS_OK);
    19a2:	466a      	mov	r2, sp
    19a4:	4922      	ldr	r1, [pc, #136]	; (1a30 <uartfiber_init+0x188>)
    19a6:	4823      	ldr	r0, [pc, #140]	; (1a34 <uartfiber_init+0x18c>)
    19a8:	4b1d      	ldr	r3, [pc, #116]	; (1a20 <uartfiber_init+0x178>)
    19aa:	4798      	blx	r3
    19ac:	2800      	cmp	r0, #0
    19ae:	d1f8      	bne.n	19a2 <uartfiber_init+0xfa>
	SercomUsart *const usart_hw = &(module->hw->USART);
    19b0:	4b20      	ldr	r3, [pc, #128]	; (1a34 <uartfiber_init+0x18c>)
    19b2:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    19b4:	0020      	movs	r0, r4
    19b6:	4b1b      	ldr	r3, [pc, #108]	; (1a24 <uartfiber_init+0x17c>)
    19b8:	4798      	blx	r3
    19ba:	231f      	movs	r3, #31
    19bc:	4018      	ands	r0, r3
    19be:	3b1e      	subs	r3, #30
    19c0:	4083      	lsls	r3, r0
    19c2:	4a19      	ldr	r2, [pc, #100]	; (1a28 <uartfiber_init+0x180>)
    19c4:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    19c6:	4b1b      	ldr	r3, [pc, #108]	; (1a34 <uartfiber_init+0x18c>)
    19c8:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    19ca:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    19cc:	2b00      	cmp	r3, #0
    19ce:	d1fa      	bne.n	19c6 <uartfiber_init+0x11e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    19d0:	6823      	ldr	r3, [r4, #0]
    19d2:	2202      	movs	r2, #2
    19d4:	4313      	orrs	r3, r2
    19d6:	6023      	str	r3, [r4, #0]
	usart_register_callback(&uartfiber_inst1, fiber1_callback, USART_CALLBACK_BUFFER_RECEIVED);
    19d8:	4d10      	ldr	r5, [pc, #64]	; (1a1c <uartfiber_init+0x174>)
    19da:	3a01      	subs	r2, #1
    19dc:	4916      	ldr	r1, [pc, #88]	; (1a38 <uartfiber_init+0x190>)
    19de:	0028      	movs	r0, r5
    19e0:	4e16      	ldr	r6, [pc, #88]	; (1a3c <uartfiber_init+0x194>)
    19e2:	47b0      	blx	r6
	usart_register_callback(&uartfiber_inst2, fiber2_callback, USART_CALLBACK_BUFFER_RECEIVED);
    19e4:	4c13      	ldr	r4, [pc, #76]	; (1a34 <uartfiber_init+0x18c>)
    19e6:	2201      	movs	r2, #1
    19e8:	4915      	ldr	r1, [pc, #84]	; (1a40 <uartfiber_init+0x198>)
    19ea:	0020      	movs	r0, r4
    19ec:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    19ee:	2331      	movs	r3, #49	; 0x31
    19f0:	2002      	movs	r0, #2
    19f2:	5ce9      	ldrb	r1, [r5, r3]
    19f4:	4301      	orrs	r1, r0
    19f6:	54e9      	strb	r1, [r5, r3]
    19f8:	5ce2      	ldrb	r2, [r4, r3]
    19fa:	4302      	orrs	r2, r0
    19fc:	54e2      	strb	r2, [r4, r3]
	usart_read_buffer_job(&uartfiber_inst1, &fiber1_buffer, 1);
    19fe:	2201      	movs	r2, #1
    1a00:	4910      	ldr	r1, [pc, #64]	; (1a44 <uartfiber_init+0x19c>)
    1a02:	0028      	movs	r0, r5
    1a04:	4d10      	ldr	r5, [pc, #64]	; (1a48 <uartfiber_init+0x1a0>)
    1a06:	47a8      	blx	r5
	usart_read_buffer_job(&uartfiber_inst2, &fiber2_buffer, 1);
    1a08:	2201      	movs	r2, #1
    1a0a:	4910      	ldr	r1, [pc, #64]	; (1a4c <uartfiber_init+0x1a4>)
    1a0c:	0020      	movs	r0, r4
    1a0e:	47a8      	blx	r5
}
    1a10:	b010      	add	sp, #64	; 0x40
    1a12:	bd70      	pop	{r4, r5, r6, pc}
    1a14:	00130002 	.word	0x00130002
    1a18:	42000c00 	.word	0x42000c00
    1a1c:	2000006c 	.word	0x2000006c
    1a20:	000024f5 	.word	0x000024f5
    1a24:	000028b9 	.word	0x000028b9
    1a28:	e000e100 	.word	0xe000e100
    1a2c:	00300002 	.word	0x00300002
    1a30:	42001c00 	.word	0x42001c00
    1a34:	200000a0 	.word	0x200000a0
    1a38:	000017d1 	.word	0x000017d1
    1a3c:	0000268d 	.word	0x0000268d
    1a40:	0000183d 	.word	0x0000183d
    1a44:	20000414 	.word	0x20000414
    1a48:	000026b5 	.word	0x000026b5
    1a4c:	2000040f 	.word	0x2000040f

00001a50 <get_fiber1_data>:

struct measurement get_fiber1_data()
{
    1a50:	b510      	push	{r4, lr}
    1a52:	b082      	sub	sp, #8
	return fiber1_data.data;
    1a54:	ac01      	add	r4, sp, #4
    1a56:	2204      	movs	r2, #4
    1a58:	4908      	ldr	r1, [pc, #32]	; (1a7c <get_fiber1_data+0x2c>)
    1a5a:	0020      	movs	r0, r4
    1a5c:	4b08      	ldr	r3, [pc, #32]	; (1a80 <get_fiber1_data+0x30>)
    1a5e:	4798      	blx	r3
    1a60:	7822      	ldrb	r2, [r4, #0]
    1a62:	7863      	ldrb	r3, [r4, #1]
    1a64:	021b      	lsls	r3, r3, #8
    1a66:	20ff      	movs	r0, #255	; 0xff
    1a68:	4010      	ands	r0, r2
    1a6a:	78a2      	ldrb	r2, [r4, #2]
    1a6c:	0412      	lsls	r2, r2, #16
    1a6e:	4318      	orrs	r0, r3
    1a70:	78e3      	ldrb	r3, [r4, #3]
    1a72:	061b      	lsls	r3, r3, #24
    1a74:	4310      	orrs	r0, r2
    1a76:	4318      	orrs	r0, r3
}
    1a78:	b002      	add	sp, #8
    1a7a:	bd10      	pop	{r4, pc}
    1a7c:	20000410 	.word	0x20000410
    1a80:	0000363d 	.word	0x0000363d

00001a84 <get_fiber2_data>:
struct measurement get_fiber2_data()
{
    1a84:	b510      	push	{r4, lr}
    1a86:	b082      	sub	sp, #8
	return fiber2_data.data;
    1a88:	ac01      	add	r4, sp, #4
    1a8a:	2204      	movs	r2, #4
    1a8c:	4908      	ldr	r1, [pc, #32]	; (1ab0 <get_fiber2_data+0x2c>)
    1a8e:	0020      	movs	r0, r4
    1a90:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <get_fiber2_data+0x30>)
    1a92:	4798      	blx	r3
    1a94:	7822      	ldrb	r2, [r4, #0]
    1a96:	7863      	ldrb	r3, [r4, #1]
    1a98:	021b      	lsls	r3, r3, #8
    1a9a:	20ff      	movs	r0, #255	; 0xff
    1a9c:	4010      	ands	r0, r2
    1a9e:	78a2      	ldrb	r2, [r4, #2]
    1aa0:	0412      	lsls	r2, r2, #16
    1aa2:	4318      	orrs	r0, r3
    1aa4:	78e3      	ldrb	r3, [r4, #3]
    1aa6:	061b      	lsls	r3, r3, #24
    1aa8:	4310      	orrs	r0, r2
    1aaa:	4318      	orrs	r0, r3
}
    1aac:	b002      	add	sp, #8
    1aae:	bd10      	pop	{r4, pc}
    1ab0:	20000418 	.word	0x20000418
    1ab4:	0000363d 	.word	0x0000363d

00001ab8 <get_fiber1_status>:

enum fiber_data_status get_fiber1_status()
{
	return fiber1_data_status;
    1ab8:	4b01      	ldr	r3, [pc, #4]	; (1ac0 <get_fiber1_status+0x8>)
    1aba:	7818      	ldrb	r0, [r3, #0]
    1abc:	b2c0      	uxtb	r0, r0
}
    1abe:	4770      	bx	lr
    1ac0:	2000040c 	.word	0x2000040c

00001ac4 <get_fiber2_status>:
enum fiber_data_status get_fiber2_status()
{
	return fiber2_data_status;
    1ac4:	4b01      	ldr	r3, [pc, #4]	; (1acc <get_fiber2_status+0x8>)
    1ac6:	7818      	ldrb	r0, [r3, #0]
    1ac8:	b2c0      	uxtb	r0, r0
}
    1aca:	4770      	bx	lr
    1acc:	2000040d 	.word	0x2000040d

00001ad0 <reset_fiber1_status>:

void reset_fiber1_status()
{
	fiber1_data_status = data_not_ready;
    1ad0:	2200      	movs	r2, #0
    1ad2:	4b01      	ldr	r3, [pc, #4]	; (1ad8 <reset_fiber1_status+0x8>)
    1ad4:	701a      	strb	r2, [r3, #0]
}
    1ad6:	4770      	bx	lr
    1ad8:	2000040c 	.word	0x2000040c

00001adc <reset_fiber2_status>:
void reset_fiber2_status()
{
	fiber2_data_status = data_not_ready;
    1adc:	2200      	movs	r2, #0
    1ade:	4b01      	ldr	r3, [pc, #4]	; (1ae4 <reset_fiber2_status+0x8>)
    1ae0:	701a      	strb	r2, [r3, #0]
}
    1ae2:	4770      	bx	lr
    1ae4:	2000040d 	.word	0x2000040d

00001ae8 <Ft_Gpu_Hal_Open>:
	return true;
}


ft_bool_t Ft_Gpu_Hal_Open(Ft_Gpu_Hal_Context_t *host)
{
    1ae8:	b510      	push	{r4, lr}
     * the pinmux settings and the SPI init, so it's all done
     * in Ft_Gpu_Hal_Init().
     */
    
    // init current write buffer to zero, since we're just starting up
	host->ft_cmd_fifo_wp = host->ft_dl_buff_wp = 0;
    1aea:	2200      	movs	r2, #0
    1aec:	2300      	movs	r3, #0
    1aee:	8142      	strh	r2, [r0, #10]
    1af0:	8102      	strh	r2, [r0, #8]
    // by default ft800/801/810/811 goes with single dummy byte for read
	host->spinumdummy = 1;
    1af2:	3201      	adds	r2, #1
    1af4:	7542      	strb	r2, [r0, #21]
    // technically one channel, but zero for how the FT library does things
	host->spichannel = 0;
    1af6:	7503      	strb	r3, [r0, #20]
    // indicate it's ready to go
	host->status = FT_GPU_HAL_OPENED;
    1af8:	7303      	strb	r3, [r0, #12]

    lcd_set_ft_host_ptr(host);
    1afa:	4b02      	ldr	r3, [pc, #8]	; (1b04 <Ft_Gpu_Hal_Open+0x1c>)
    1afc:	4798      	blx	r3

	return true;
}
    1afe:	2001      	movs	r0, #1
    1b00:	bd10      	pop	{r4, pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	00001f2d 	.word	0x00001f2d

00001b08 <Ft_Gpu_Hal_StartTransfer>:
}


/*The APIs for reading/writing transfer continuously only with small buffer system*/
ft_void_t  Ft_Gpu_Hal_StartTransfer(Ft_Gpu_Hal_Context_t *host, FT_GPU_TRANSFERDIR_T rw, ft_uint32_t addr)
{
    1b08:	b510      	push	{r4, lr}
    1b0a:	0004      	movs	r4, r0
    /* determine if it's a read or write. This affects the preamble send to the
     * LCD (preamble = direction bits and address). */
	if (FT_GPU_READ == rw)
    1b0c:	2900      	cmp	r1, #0
    1b0e:	d006      	beq.n	1b1e <Ft_Gpu_Hal_StartTransfer+0x16>
		host->status = FT_GPU_HAL_READING;
	}
    else
    {
        // begin a write transfer
	    lcd_start_xfer(addr, WRT);
    1b10:	2101      	movs	r1, #1
    1b12:	0010      	movs	r0, r2
    1b14:	4b05      	ldr	r3, [pc, #20]	; (1b2c <Ft_Gpu_Hal_StartTransfer+0x24>)
    1b16:	4798      	blx	r3
    
		host->status = FT_GPU_HAL_WRITING;
    1b18:	2302      	movs	r3, #2
    1b1a:	7323      	strb	r3, [r4, #12]
	}
}
    1b1c:	bd10      	pop	{r4, pc}
        lcd_start_xfer(addr, READ);
    1b1e:	0010      	movs	r0, r2
    1b20:	4b02      	ldr	r3, [pc, #8]	; (1b2c <Ft_Gpu_Hal_StartTransfer+0x24>)
    1b22:	4798      	blx	r3
		host->status = FT_GPU_HAL_READING;
    1b24:	2301      	movs	r3, #1
    1b26:	7323      	strb	r3, [r4, #12]
    1b28:	e7f8      	b.n	1b1c <Ft_Gpu_Hal_StartTransfer+0x14>
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	00001e29 	.word	0x00001e29

00001b30 <Ft_Gpu_Hal_Transfer8>:
    Ft_Gpu_Hal_Transfer8(host,0);
}


ft_uint8_t Ft_Gpu_Hal_Transfer8(Ft_Gpu_Hal_Context_t *host, ft_uint8_t value)
{
    1b30:	b500      	push	{lr}
    1b32:	b085      	sub	sp, #20
    1b34:	466b      	mov	r3, sp
    1b36:	71d9      	strb	r1, [r3, #7]
    ft_uint8_t read_byte = 0;
    1b38:	2200      	movs	r2, #0
    1b3a:	230f      	movs	r3, #15
    1b3c:	446b      	add	r3, sp
    1b3e:	701a      	strb	r2, [r3, #0]
    
    // transmit or receive a byte
    if(host->status == FT_GPU_HAL_WRITING)
    1b40:	7b03      	ldrb	r3, [r0, #12]
    1b42:	2b02      	cmp	r3, #2
    1b44:	d009      	beq.n	1b5a <Ft_Gpu_Hal_Transfer8+0x2a>
        lcd_host_write(&value, 1);
    else
        lcd_host_read(&read_byte, 1);
    1b46:	2101      	movs	r1, #1
    1b48:	200f      	movs	r0, #15
    1b4a:	4468      	add	r0, sp
    1b4c:	4b06      	ldr	r3, [pc, #24]	; (1b68 <Ft_Gpu_Hal_Transfer8+0x38>)
    1b4e:	4798      	blx	r3
    
    return read_byte;
    1b50:	230f      	movs	r3, #15
    1b52:	446b      	add	r3, sp
    1b54:	7818      	ldrb	r0, [r3, #0]
}
    1b56:	b005      	add	sp, #20
    1b58:	bd00      	pop	{pc}
        lcd_host_write(&value, 1);
    1b5a:	2101      	movs	r1, #1
    1b5c:	466b      	mov	r3, sp
    1b5e:	1dd8      	adds	r0, r3, #7
    1b60:	4b02      	ldr	r3, [pc, #8]	; (1b6c <Ft_Gpu_Hal_Transfer8+0x3c>)
    1b62:	4798      	blx	r3
    1b64:	e7f4      	b.n	1b50 <Ft_Gpu_Hal_Transfer8+0x20>
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	00001ecd 	.word	0x00001ecd
    1b6c:	00001f15 	.word	0x00001f15

00001b70 <Ft_Gpu_Hal_EndTransfer>:
	return retVal;
}


ft_void_t Ft_Gpu_Hal_EndTransfer(Ft_Gpu_Hal_Context_t *host)
{
    1b70:	b510      	push	{r4, lr}
    1b72:	0004      	movs	r4, r0
    // deselect the slave (let slave CS float high for SIM System)
    lcd_stop_xfer();
    1b74:	4b02      	ldr	r3, [pc, #8]	; (1b80 <Ft_Gpu_Hal_EndTransfer+0x10>)
    1b76:	4798      	blx	r3
    
	host->status = FT_GPU_HAL_OPENED;
    1b78:	2300      	movs	r3, #0
    1b7a:	7323      	strb	r3, [r4, #12]
}
    1b7c:	bd10      	pop	{r4, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	00001eb1 	.word	0x00001eb1

00001b84 <Ft_Gpu_Hal_Wr8>:
	return value;
}


ft_void_t Ft_Gpu_Hal_Wr8(Ft_Gpu_Hal_Context_t *host, ft_uint32_t addr, ft_uint8_t v)
{	
    1b84:	b570      	push	{r4, r5, r6, lr}
    1b86:	0004      	movs	r4, r0
    1b88:	0015      	movs	r5, r2
    
    // start a write transfer
	Ft_Gpu_Hal_StartTransfer(host,FT_GPU_WRITE,addr);
    1b8a:	000a      	movs	r2, r1
    1b8c:	2101      	movs	r1, #1
    1b8e:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <Ft_Gpu_Hal_Wr8+0x20>)
    1b90:	4798      	blx	r3
    
    // read a byte
	Ft_Gpu_Hal_Transfer8(host,v);
    1b92:	0029      	movs	r1, r5
    1b94:	0020      	movs	r0, r4
    1b96:	4b04      	ldr	r3, [pc, #16]	; (1ba8 <Ft_Gpu_Hal_Wr8+0x24>)
    1b98:	4798      	blx	r3
    
    // end the transfer
	Ft_Gpu_Hal_EndTransfer(host);
    1b9a:	0020      	movs	r0, r4
    1b9c:	4b03      	ldr	r3, [pc, #12]	; (1bac <Ft_Gpu_Hal_Wr8+0x28>)
    1b9e:	4798      	blx	r3
}
    1ba0:	bd70      	pop	{r4, r5, r6, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	00001b09 	.word	0x00001b09
    1ba8:	00001b31 	.word	0x00001b31
    1bac:	00001b71 	.word	0x00001b71

00001bb0 <configure_ext_ints>:
/* Function Name    : configure_ext_ints
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt
	*/
void configure_ext_ints(void){
    1bb0:	b500      	push	{lr}
    1bb2:	b085      	sub	sp, #20
	// struct for external interrupt config
	struct extint_chan_conf ext_int_config;
	    
	// configure the external interrupt
	ext_int_config.gpio_pin            = LCD_INT;
    1bb4:	a901      	add	r1, sp, #4
    1bb6:	2309      	movs	r3, #9
    1bb8:	9301      	str	r3, [sp, #4]
	ext_int_config.gpio_pin_mux        = LCD_INT_PINMUX;
    1bba:	604b      	str	r3, [r1, #4]
	ext_int_config.gpio_pin_pull       = LCD_INT_PULL;
    1bbc:	2300      	movs	r3, #0
    1bbe:	720b      	strb	r3, [r1, #8]
	ext_int_config.wake_if_sleeping    = true;
    1bc0:	2201      	movs	r2, #1
    1bc2:	724a      	strb	r2, [r1, #9]
	ext_int_config.filter_input_signal = false;
    1bc4:	728b      	strb	r3, [r1, #10]
	ext_int_config.detection_criteria  = LCD_INT_DETECT;
    1bc6:	3305      	adds	r3, #5
    1bc8:	72cb      	strb	r3, [r1, #11]

	extint_chan_set_config(LCD_INT_LINE, &ext_int_config);
    1bca:	2009      	movs	r0, #9
    1bcc:	4b01      	ldr	r3, [pc, #4]	; (1bd4 <configure_ext_ints+0x24>)
    1bce:	4798      	blx	r3
}//end configure_ext_ints
    1bd0:	b005      	add	sp, #20
    1bd2:	bd00      	pop	{pc}
    1bd4:	000003bd 	.word	0x000003bd

00001bd8 <configure_ext_int_callback>:
/* Function Name    : configure_ext_int_callback
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config external interrupt callback
	*/
void configure_ext_int_callback(void){
    1bd8:	b510      	push	{r4, lr}
	// register callback for the LCD's interrupt
	extint_register_callback(lcd_interrupt_callback, LCD_INT_LINE, \
    1bda:	2205      	movs	r2, #5
    1bdc:	2109      	movs	r1, #9
    1bde:	4802      	ldr	r0, [pc, #8]	; (1be8 <configure_ext_int_callback+0x10>)
    1be0:	4b02      	ldr	r3, [pc, #8]	; (1bec <configure_ext_int_callback+0x14>)
    1be2:	4798      	blx	r3
	    LCD_INT_DETECT);
}//end configure_ext_int_callback
    1be4:	bd10      	pop	{r4, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	00001f39 	.word	0x00001f39
    1bec:	00000275 	.word	0x00000275

00001bf0 <configure_rtc_calendar>:
/* Function Name    : configure_rtc_calendar
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config the rtc and set time to 00:00:00 01/01/2000
	*/
void configure_rtc_calendar(void){
    1bf0:	b530      	push	{r4, r5, lr}
    1bf2:	b089      	sub	sp, #36	; 0x24
	//initial time
	time.year   = 2017;
    1bf4:	4b26      	ldr	r3, [pc, #152]	; (1c90 <configure_rtc_calendar+0xa0>)
    1bf6:	4a27      	ldr	r2, [pc, #156]	; (1c94 <configure_rtc_calendar+0xa4>)
    1bf8:	80da      	strh	r2, [r3, #6]
	time.month  = 12;
    1bfa:	220c      	movs	r2, #12
    1bfc:	715a      	strb	r2, [r3, #5]
	time.day    = 31;
    1bfe:	3213      	adds	r2, #19
    1c00:	711a      	strb	r2, [r3, #4]
	time.hour   = 23;
    1c02:	3a08      	subs	r2, #8
    1c04:	709a      	strb	r2, [r3, #2]
	time.minute = 59;
    1c06:	3224      	adds	r2, #36	; 0x24
    1c08:	705a      	strb	r2, [r3, #1]
	time.second = 55;
    1c0a:	3a04      	subs	r2, #4
    1c0c:	701a      	strb	r2, [r3, #0]
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    1c0e:	aa01      	add	r2, sp, #4
    1c10:	2300      	movs	r3, #0
    1c12:	7013      	strb	r3, [r2, #0]
	time->minute = 0;
    1c14:	7053      	strb	r3, [r2, #1]
	time->hour   = 0;
    1c16:	7093      	strb	r3, [r2, #2]
	time->pm     = 0;
    1c18:	70d3      	strb	r3, [r2, #3]
	time->day    = 1;
    1c1a:	2101      	movs	r1, #1
    1c1c:	7111      	strb	r1, [r2, #4]
	time->month  = 1;
    1c1e:	7151      	strb	r1, [r2, #5]
	time->year   = 2000;
    1c20:	21fa      	movs	r1, #250	; 0xfa
    1c22:	00c9      	lsls	r1, r1, #3
    1c24:	80d1      	strh	r1, [r2, #6]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1c26:	aa03      	add	r2, sp, #12
    1c28:	20a0      	movs	r0, #160	; 0xa0
    1c2a:	0100      	lsls	r0, r0, #4
    1c2c:	8010      	strh	r0, [r2, #0]
	config->clear_on_match      = false;
    1c2e:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    1c30:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
    1c32:	7113      	strb	r3, [r2, #4]
	config->year_init_value     = 2000;
    1c34:	80d1      	strh	r1, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1c36:	2400      	movs	r4, #0
    1c38:	2c00      	cmp	r4, #0
    1c3a:	d014      	beq.n	1c66 <configure_rtc_calendar+0x76>
		
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	config_rtc_calendar.clock_24h     = true;
    1c3c:	aa03      	add	r2, sp, #12
    1c3e:	2301      	movs	r3, #1
    1c40:	7113      	strb	r3, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    1c42:	4c15      	ldr	r4, [pc, #84]	; (1c98 <configure_rtc_calendar+0xa8>)
    1c44:	4915      	ldr	r1, [pc, #84]	; (1c9c <configure_rtc_calendar+0xac>)
    1c46:	0020      	movs	r0, r4
    1c48:	4b15      	ldr	r3, [pc, #84]	; (1ca0 <configure_rtc_calendar+0xb0>)
    1c4a:	4798      	blx	r3
		
	rtc_calendar_set_time(&rtc_instance, &time);
    1c4c:	4910      	ldr	r1, [pc, #64]	; (1c90 <configure_rtc_calendar+0xa0>)
    1c4e:	0020      	movs	r0, r4
    1c50:	4b14      	ldr	r3, [pc, #80]	; (1ca4 <configure_rtc_calendar+0xb4>)
    1c52:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    1c54:	0020      	movs	r0, r4
    1c56:	4b14      	ldr	r3, [pc, #80]	; (1ca8 <configure_rtc_calendar+0xb8>)
    1c58:	4798      	blx	r3
	// adjust the frequency (the clock is slow atm)
	rtc_calendar_frequency_correction(&rtc_instance, 127);
    1c5a:	217f      	movs	r1, #127	; 0x7f
    1c5c:	0020      	movs	r0, r4
    1c5e:	4b13      	ldr	r3, [pc, #76]	; (1cac <configure_rtc_calendar+0xbc>)
    1c60:	4798      	blx	r3
}//end configure_rtc_calendar
    1c62:	b009      	add	sp, #36	; 0x24
    1c64:	bd30      	pop	{r4, r5, pc}
		config->alarm[i].time = time;
    1c66:	00a5      	lsls	r5, r4, #2
    1c68:	192b      	adds	r3, r5, r4
    1c6a:	0058      	lsls	r0, r3, #1
    1c6c:	ab03      	add	r3, sp, #12
    1c6e:	469c      	mov	ip, r3
    1c70:	4460      	add	r0, ip
    1c72:	3008      	adds	r0, #8
    1c74:	2208      	movs	r2, #8
    1c76:	a901      	add	r1, sp, #4
    1c78:	4b0d      	ldr	r3, [pc, #52]	; (1cb0 <configure_rtc_calendar+0xc0>)
    1c7a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    1c7c:	192d      	adds	r5, r5, r4
    1c7e:	006b      	lsls	r3, r5, #1
    1c80:	aa03      	add	r2, sp, #12
    1c82:	4694      	mov	ip, r2
    1c84:	4463      	add	r3, ip
    1c86:	2206      	movs	r2, #6
    1c88:	741a      	strb	r2, [r3, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1c8a:	3401      	adds	r4, #1
    1c8c:	b2e4      	uxtb	r4, r4
    1c8e:	e7d3      	b.n	1c38 <configure_rtc_calendar+0x48>
    1c90:	20000734 	.word	0x20000734
    1c94:	000007e1 	.word	0x000007e1
    1c98:	2000041c 	.word	0x2000041c
    1c9c:	40001400 	.word	0x40001400
    1ca0:	000005a5 	.word	0x000005a5
    1ca4:	000004e5 	.word	0x000004e5
    1ca8:	00000439 	.word	0x00000439
    1cac:	00000605 	.word	0x00000605
    1cb0:	0000363d 	.word	0x0000363d

00001cb4 <clock_osc32k_init>:
/* Function Name    : clock_osc32k_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config internal oscillator 32 kHz
	*/
void clock_osc32k_init(void){
    1cb4:	b500      	push	{lr}
    1cb6:	b083      	sub	sp, #12
	config->enable_1khz_output  = true;
    1cb8:	2301      	movs	r3, #1
    1cba:	466a      	mov	r2, sp
    1cbc:	7053      	strb	r3, [r2, #1]
	config->enable_32khz_output = true;
    1cbe:	7093      	strb	r3, [r2, #2]
	config->run_in_standby      = false;
    1cc0:	2200      	movs	r2, #0
    1cc2:	4669      	mov	r1, sp
    1cc4:	70ca      	strb	r2, [r1, #3]
	config->on_demand           = true;
    1cc6:	710b      	strb	r3, [r1, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1cc8:	3306      	adds	r3, #6
    1cca:	700b      	strb	r3, [r1, #0]
	config->write_once          = false;
    1ccc:	714a      	strb	r2, [r1, #5]
	osc32_config.on_demand				= true;
	osc32_config.run_in_standby			= false;
	osc32_config.startup_time			= SYSTEM_OSC32K_STARTUP_130;
	osc32_config.write_once				= false;
	
	system_clock_source_osc32k_set_config(&osc32_config);
    1cce:	4668      	mov	r0, sp
    1cd0:	4b01      	ldr	r3, [pc, #4]	; (1cd8 <clock_osc32k_init+0x24>)
    1cd2:	4798      	blx	r3
}//end clock_osc32k_init
    1cd4:	b003      	add	sp, #12
    1cd6:	bd00      	pop	{pc}
    1cd8:	00002ac9 	.word	0x00002ac9

00001cdc <clock_gclk2_init>:
/* Function Name    : clock_gclk2_init
	* Parameters       : void
	* Return Values(s) : void
	* Description      : turn on glck using internal 32 kHz oscillator
	*/
void clock_gclk2_init(void){
    1cdc:	b500      	push	{lr}
    1cde:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk2_config;
		
	system_gclk_init();
    1ce0:	4b09      	ldr	r3, [pc, #36]	; (1d08 <clock_gclk2_init+0x2c>)
    1ce2:	4798      	blx	r3
		
	gclk2_config.source_clock			= SYSTEM_CLOCK_SOURCE_OSC32K;
    1ce4:	a901      	add	r1, sp, #4
    1ce6:	2304      	movs	r3, #4
    1ce8:	700b      	strb	r3, [r1, #0]
	gclk2_config.output_enable			= false;
    1cea:	2300      	movs	r3, #0
    1cec:	724b      	strb	r3, [r1, #9]
	gclk2_config.high_when_disabled		= false;
    1cee:	704b      	strb	r3, [r1, #1]
	gclk2_config.division_factor		= 32;
    1cf0:	2220      	movs	r2, #32
    1cf2:	604a      	str	r2, [r1, #4]
	gclk2_config.run_in_standby			= false;
    1cf4:	720b      	strb	r3, [r1, #8]
		
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclk2_config);
    1cf6:	2002      	movs	r0, #2
    1cf8:	4b04      	ldr	r3, [pc, #16]	; (1d0c <clock_gclk2_init+0x30>)
    1cfa:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    1cfc:	2002      	movs	r0, #2
    1cfe:	4b04      	ldr	r3, [pc, #16]	; (1d10 <clock_gclk2_init+0x34>)
    1d00:	4798      	blx	r3
}//end clock_gclk2_init
    1d02:	b005      	add	sp, #20
    1d04:	bd00      	pop	{pc}
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	00002cb5 	.word	0x00002cb5
    1d0c:	00002cd9 	.word	0x00002cd9
    1d10:	00002da9 	.word	0x00002da9

00001d14 <lcd_spi_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for communicating with the LCD
 */
void lcd_spi_init(void)
{
    1d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d16:	46c6      	mov	lr, r8
    1d18:	b500      	push	{lr}
    1d1a:	b090      	sub	sp, #64	; 0x40
    if(lcd_init_complete == true)
    1d1c:	4b34      	ldr	r3, [pc, #208]	; (1df0 <lcd_spi_init+0xdc>)
    1d1e:	781b      	ldrb	r3, [r3, #0]
    1d20:	2b00      	cmp	r3, #0
    1d22:	d003      	beq.n	1d2c <lcd_spi_init+0x18>
    spi_enable(&lcd_master);
	

    
    lcd_init_complete = true;
}
    1d24:	b010      	add	sp, #64	; 0x40
    1d26:	bc04      	pop	{r2}
    1d28:	4690      	mov	r8, r2
    1d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	config->address_enabled = false;
    1d2c:	aa01      	add	r2, sp, #4
    1d2e:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    1d30:	7093      	strb	r3, [r2, #2]
    lcd_init_slave_config.ss_pin = LCD_CS;
    1d32:	212d      	movs	r1, #45	; 0x2d
    1d34:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    1d36:	4c2f      	ldr	r4, [pc, #188]	; (1df4 <lcd_spi_init+0xe0>)
    1d38:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1d3a:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1d3c:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1d3e:	2201      	movs	r2, #1
    1d40:	4669      	mov	r1, sp
    1d42:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1d44:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1d46:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1d48:	202d      	movs	r0, #45	; 0x2d
    1d4a:	4b2b      	ldr	r3, [pc, #172]	; (1df8 <lcd_spi_init+0xe4>)
    1d4c:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1d4e:	7823      	ldrb	r3, [r4, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d50:	09d9      	lsrs	r1, r3, #7
	uint8_t group_index = (gpio_pin / 32);
    1d52:	095a      	lsrs	r2, r3, #5
	if (port_index < PORT_INST_NUM) {
    1d54:	2900      	cmp	r1, #0
    1d56:	d149      	bne.n	1dec <lcd_spi_init+0xd8>
		return &(ports[port_index]->Group[group_index]);
    1d58:	01d2      	lsls	r2, r2, #7
    1d5a:	4928      	ldr	r1, [pc, #160]	; (1dfc <lcd_spi_init+0xe8>)
    1d5c:	468c      	mov	ip, r1
    1d5e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d60:	271f      	movs	r7, #31
    1d62:	403b      	ands	r3, r7
    1d64:	2501      	movs	r5, #1
    1d66:	0029      	movs	r1, r5
    1d68:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    1d6a:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    1d6c:	ac02      	add	r4, sp, #8
    1d6e:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1d70:	2600      	movs	r6, #0
    1d72:	6066      	str	r6, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1d74:	60a6      	str	r6, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1d76:	23c0      	movs	r3, #192	; 0xc0
    1d78:	039b      	lsls	r3, r3, #14
    1d7a:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1d7c:	7426      	strb	r6, [r4, #16]
	config->run_in_standby   = false;
    1d7e:	7466      	strb	r6, [r4, #17]
	config->receiver_enable  = true;
    1d80:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1d82:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    1d84:	7526      	strb	r6, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    1d86:	2324      	movs	r3, #36	; 0x24
    1d88:	4698      	mov	r8, r3
    1d8a:	54e6      	strb	r6, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1d8c:	220c      	movs	r2, #12
    1d8e:	2100      	movs	r1, #0
    1d90:	a808      	add	r0, sp, #32
    1d92:	4b1b      	ldr	r3, [pc, #108]	; (1e00 <lcd_spi_init+0xec>)
    1d94:	4798      	blx	r3
    lcd_init_master_config.mux_setting = LCD_PINMUX_SETTING;
    1d96:	2380      	movs	r3, #128	; 0x80
    1d98:	025b      	lsls	r3, r3, #9
    1d9a:	60e3      	str	r3, [r4, #12]
    lcd_init_master_config.pinmux_pad0 = LCD_MISO_PAD;
    1d9c:	4b19      	ldr	r3, [pc, #100]	; (1e04 <lcd_spi_init+0xf0>)
    1d9e:	62a3      	str	r3, [r4, #40]	; 0x28
    lcd_init_master_config.pinmux_pad1 = LCD_UNUSED; 
    1da0:	2301      	movs	r3, #1
    1da2:	425b      	negs	r3, r3
    1da4:	62e3      	str	r3, [r4, #44]	; 0x2c
    lcd_init_master_config.pinmux_pad2 = LCD_MOSI_PAD;
    1da6:	4b18      	ldr	r3, [pc, #96]	; (1e08 <lcd_spi_init+0xf4>)
    1da8:	6323      	str	r3, [r4, #48]	; 0x30
    lcd_init_master_config.pinmux_pad3 = LCD_SCK_PAD;
    1daa:	4b18      	ldr	r3, [pc, #96]	; (1e0c <lcd_spi_init+0xf8>)
    1dac:	6363      	str	r3, [r4, #52]	; 0x34
	lcd_init_master_config.generator_source = LCD_SPI_SOURCE_CLOCK;
    1dae:	4643      	mov	r3, r8
    1db0:	54e6      	strb	r6, [r4, r3]
	lcd_init_master_config.mode_specific.master.baudrate = LCD_SPI_MAX_CLOCK;
    1db2:	4b17      	ldr	r3, [pc, #92]	; (1e10 <lcd_spi_init+0xfc>)
    1db4:	61a3      	str	r3, [r4, #24]
    spi_init(&lcd_master, LCD_SPI, &lcd_init_master_config);
    1db6:	4e17      	ldr	r6, [pc, #92]	; (1e14 <lcd_spi_init+0x100>)
    1db8:	0022      	movs	r2, r4
    1dba:	4917      	ldr	r1, [pc, #92]	; (1e18 <lcd_spi_init+0x104>)
    1dbc:	0030      	movs	r0, r6
    1dbe:	4b17      	ldr	r3, [pc, #92]	; (1e1c <lcd_spi_init+0x108>)
    1dc0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1dc2:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1dc4:	0020      	movs	r0, r4
    1dc6:	4b16      	ldr	r3, [pc, #88]	; (1e20 <lcd_spi_init+0x10c>)
    1dc8:	4798      	blx	r3
    1dca:	4038      	ands	r0, r7
    1dcc:	4085      	lsls	r5, r0
    1dce:	4b15      	ldr	r3, [pc, #84]	; (1e24 <lcd_spi_init+0x110>)
    1dd0:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1dd2:	4b10      	ldr	r3, [pc, #64]	; (1e14 <lcd_spi_init+0x100>)
    1dd4:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    1dd6:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d1fa      	bne.n	1dd2 <lcd_spi_init+0xbe>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1ddc:	6823      	ldr	r3, [r4, #0]
    1dde:	2202      	movs	r2, #2
    1de0:	4313      	orrs	r3, r2
    1de2:	6023      	str	r3, [r4, #0]
    lcd_init_complete = true;
    1de4:	3a01      	subs	r2, #1
    1de6:	4b02      	ldr	r3, [pc, #8]	; (1df0 <lcd_spi_init+0xdc>)
    1de8:	701a      	strb	r2, [r3, #0]
    1dea:	e79b      	b.n	1d24 <lcd_spi_init+0x10>
		return NULL;
    1dec:	2200      	movs	r2, #0
    1dee:	e7b7      	b.n	1d60 <lcd_spi_init+0x4c>
    1df0:	200000d4 	.word	0x200000d4
    1df4:	20000968 	.word	0x20000968
    1df8:	0000293d 	.word	0x0000293d
    1dfc:	41004400 	.word	0x41004400
    1e00:	0000364f 	.word	0x0000364f
    1e04:	002c0002 	.word	0x002c0002
    1e08:	002e0002 	.word	0x002e0002
    1e0c:	002f0002 	.word	0x002f0002
    1e10:	000f4240 	.word	0x000f4240
    1e14:	2000096c 	.word	0x2000096c
    1e18:	42001800 	.word	0x42001800
    1e1c:	00000afd 	.word	0x00000afd
    1e20:	000028b9 	.word	0x000028b9
    1e24:	e000e100 	.word	0xe000e100

00001e28 <lcd_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Starts the SPI transfer by selecting the slave (pulling 
 *  CS low) and sending LCD address. For use in the FT library.
 */
status_code_genare_t lcd_start_xfer(LCD_ADDRESS param_addr, LCD_XFER_DIR dir)
{
    1e28:	b510      	push	{r4, lr}
    1e2a:	b082      	sub	sp, #8
    1e2c:	1e0c      	subs	r4, r1, #0
        uint8_t preamble[4];
    } lcd_xfer_preamble;
    
    status_code_genare_t read_status;
    
    if(dir == READ)
    1e2e:	d11f      	bne.n	1e70 <lcd_start_xfer+0x48>
        // LCD read address should only be 22 bits
        lcd_xfer_preamble.addr = (0x3FFFFF & param_addr) << 8;
    1e30:	0200      	lsls	r0, r0, #8
    1e32:	4b1a      	ldr	r3, [pc, #104]	; (1e9c <lcd_start_xfer+0x74>)
    1e34:	4018      	ands	r0, r3
    1e36:	9001      	str	r0, [sp, #4]
        /* LCD read address should only be 22 bits. Also OR 0x800000 because the
         * host must send a 1-bit and then a 0-bit to indicate a write */
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    
    // preamble bytes need to be swapped so MSB is transmitted first
    XORSWAP(lcd_xfer_preamble.preamble[0], lcd_xfer_preamble.preamble[3]);
    1e38:	ab01      	add	r3, sp, #4
    1e3a:	78d9      	ldrb	r1, [r3, #3]
    1e3c:	781a      	ldrb	r2, [r3, #0]
    1e3e:	404a      	eors	r2, r1
    1e40:	4051      	eors	r1, r2
    1e42:	70d9      	strb	r1, [r3, #3]
    1e44:	404a      	eors	r2, r1
    1e46:	701a      	strb	r2, [r3, #0]
    XORSWAP(lcd_xfer_preamble.preamble[1], lcd_xfer_preamble.preamble[2]);
    1e48:	7899      	ldrb	r1, [r3, #2]
    1e4a:	785a      	ldrb	r2, [r3, #1]
    1e4c:	404a      	eors	r2, r1
    1e4e:	4051      	eors	r1, r2
    1e50:	7099      	strb	r1, [r3, #2]
    1e52:	404a      	eors	r2, r1
    1e54:	705a      	strb	r2, [r3, #1]
    
    do{
        // select the slave
        read_status = spi_select_slave(&lcd_master, &lcd_slave, true);
    1e56:	2201      	movs	r2, #1
    1e58:	4911      	ldr	r1, [pc, #68]	; (1ea0 <lcd_start_xfer+0x78>)
    1e5a:	4812      	ldr	r0, [pc, #72]	; (1ea4 <lcd_start_xfer+0x7c>)
    1e5c:	4b12      	ldr	r3, [pc, #72]	; (1ea8 <lcd_start_xfer+0x80>)
    1e5e:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
    1e60:	2805      	cmp	r0, #5
    1e62:	d0f8      	beq.n	1e56 <lcd_start_xfer+0x2e>
    
    if(dir == READ)
    1e64:	2c00      	cmp	r4, #0
    1e66:	d00d      	beq.n	1e84 <lcd_start_xfer+0x5c>
        // send preamble = two read bits, 22 bit address, and dummy byte
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    else if(dir == WRT)
    1e68:	2c01      	cmp	r4, #1
    1e6a:	d011      	beq.n	1e90 <lcd_start_xfer+0x68>
        // send preamble = two wrt bits and 22 bit address
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    
    return read_status;
}
    1e6c:	b002      	add	sp, #8
    1e6e:	bd10      	pop	{r4, pc}
    else if(dir == WRT)
    1e70:	2901      	cmp	r1, #1
    1e72:	d1e1      	bne.n	1e38 <lcd_start_xfer+0x10>
         lcd_xfer_preamble.addr = ((0x3FFFFF & param_addr) | 0x800000) << 8;
    1e74:	0200      	lsls	r0, r0, #8
    1e76:	4b09      	ldr	r3, [pc, #36]	; (1e9c <lcd_start_xfer+0x74>)
    1e78:	4018      	ands	r0, r3
    1e7a:	2380      	movs	r3, #128	; 0x80
    1e7c:	061b      	lsls	r3, r3, #24
    1e7e:	4318      	orrs	r0, r3
    1e80:	9001      	str	r0, [sp, #4]
    1e82:	e7d9      	b.n	1e38 <lcd_start_xfer+0x10>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 4);
    1e84:	2204      	movs	r2, #4
    1e86:	a901      	add	r1, sp, #4
    1e88:	4806      	ldr	r0, [pc, #24]	; (1ea4 <lcd_start_xfer+0x7c>)
    1e8a:	4b08      	ldr	r3, [pc, #32]	; (1eac <lcd_start_xfer+0x84>)
    1e8c:	4798      	blx	r3
    1e8e:	e7ed      	b.n	1e6c <lcd_start_xfer+0x44>
        read_status = spi_write_buffer_wait(&lcd_master, lcd_xfer_preamble.preamble, 3);
    1e90:	2203      	movs	r2, #3
    1e92:	a901      	add	r1, sp, #4
    1e94:	4803      	ldr	r0, [pc, #12]	; (1ea4 <lcd_start_xfer+0x7c>)
    1e96:	4b05      	ldr	r3, [pc, #20]	; (1eac <lcd_start_xfer+0x84>)
    1e98:	4798      	blx	r3
    1e9a:	e7e7      	b.n	1e6c <lcd_start_xfer+0x44>
    1e9c:	3fffff00 	.word	0x3fffff00
    1ea0:	20000968 	.word	0x20000968
    1ea4:	2000096c 	.word	0x2000096c
    1ea8:	00000ce5 	.word	0x00000ce5
    1eac:	00000de1 	.word	0x00000de1

00001eb0 <lcd_stop_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Stops the SPI transfer by deselecting the slave (letting 
 *  CS float high). For use in the FT library.
 */
status_code_genare_t lcd_stop_xfer(void)
{
    1eb0:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&lcd_master, &lcd_slave, false);
    1eb2:	2200      	movs	r2, #0
    1eb4:	4902      	ldr	r1, [pc, #8]	; (1ec0 <lcd_stop_xfer+0x10>)
    1eb6:	4803      	ldr	r0, [pc, #12]	; (1ec4 <lcd_stop_xfer+0x14>)
    1eb8:	4b03      	ldr	r3, [pc, #12]	; (1ec8 <lcd_stop_xfer+0x18>)
    1eba:	4798      	blx	r3
}
    1ebc:	bd10      	pop	{r4, pc}
    1ebe:	46c0      	nop			; (mov r8, r8)
    1ec0:	20000968 	.word	0x20000968
    1ec4:	2000096c 	.word	0x2000096c
    1ec8:	00000ce5 	.word	0x00000ce5

00001ecc <lcd_host_read>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 15.
 */
status_code_genare_t lcd_host_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
    1ecc:	b510      	push	{r4, lr}
    1ece:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&lcd_master, \
    1ed0:	2300      	movs	r3, #0
    1ed2:	0001      	movs	r1, r0
    1ed4:	4801      	ldr	r0, [pc, #4]	; (1edc <lcd_host_read+0x10>)
    1ed6:	4c02      	ldr	r4, [pc, #8]	; (1ee0 <lcd_host_read+0x14>)
    1ed8:	47a0      	blx	r4
                        read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
    1eda:	bd10      	pop	{r4, pc}
    1edc:	2000096c 	.word	0x2000096c
    1ee0:	00000be9 	.word	0x00000be9

00001ee4 <lcd_rd8>:
 * Return Values(s) : uint8_t
 * Description      : Reads a 8-bit value from the LCD at the given address.
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 */
uint8_t lcd_rd8(LCD_ADDRESS read_addr)
{
    1ee4:	b510      	push	{r4, lr}
    1ee6:	b082      	sub	sp, #8
    uint8_t read_byte = 0;
    1ee8:	466b      	mov	r3, sp
    1eea:	1ddc      	adds	r4, r3, #7
    1eec:	2300      	movs	r3, #0
    1eee:	7023      	strb	r3, [r4, #0]
    
    lcd_start_xfer(read_addr, READ);
    1ef0:	2100      	movs	r1, #0
    1ef2:	4b05      	ldr	r3, [pc, #20]	; (1f08 <lcd_rd8+0x24>)
    1ef4:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    lcd_host_read(&read_byte, 1);
    1ef6:	2101      	movs	r1, #1
    1ef8:	0020      	movs	r0, r4
    1efa:	4b04      	ldr	r3, [pc, #16]	; (1f0c <lcd_rd8+0x28>)
    1efc:	4798      	blx	r3
    
    lcd_stop_xfer();
    1efe:	4b04      	ldr	r3, [pc, #16]	; (1f10 <lcd_rd8+0x2c>)
    1f00:	4798      	blx	r3
    
    return read_byte; 
    1f02:	7820      	ldrb	r0, [r4, #0]
}
    1f04:	b002      	add	sp, #8
    1f06:	bd10      	pop	{r4, pc}
    1f08:	00001e29 	.word	0x00001e29
    1f0c:	00001ecd 	.word	0x00001ecd
    1f10:	00001eb1 	.word	0x00001eb1

00001f14 <lcd_host_write>:
 *  Used in combination with lcd_start_xfer() and lcd_stop_xfer().
 *  Refer to DS_FT81x datasheet pg 16.
 */
status_code_genare_t lcd_host_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
    1f14:	b510      	push	{r4, lr}
    1f16:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&lcd_master, \
    1f18:	0001      	movs	r1, r0
    1f1a:	4802      	ldr	r0, [pc, #8]	; (1f24 <lcd_host_write+0x10>)
    1f1c:	4b02      	ldr	r3, [pc, #8]	; (1f28 <lcd_host_write+0x14>)
    1f1e:	4798      	blx	r3
                        wrt_buff, amount_bytes);
    
    return wrt_status;
    
}
    1f20:	bd10      	pop	{r4, pc}
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	2000096c 	.word	0x2000096c
    1f28:	00000de1 	.word	0x00000de1

00001f2c <lcd_set_ft_host_ptr>:
 * Description      : Sets the sim_system_glcd_software global pointer for the
 *  FTDI context struct.
 */
void lcd_set_ft_host_ptr(Ft_Gpu_Hal_Context_t* phost)
{
    lcd_firmware_phost = phost;
    1f2c:	4b01      	ldr	r3, [pc, #4]	; (1f34 <lcd_set_ft_host_ptr+0x8>)
    1f2e:	6018      	str	r0, [r3, #0]
}
    1f30:	4770      	bx	lr
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	200000d8 	.word	0x200000d8

00001f38 <lcd_interrupt_callback>:
 * Return Values(s) : void
 * Description      : Callback for the LCD interrupt. Reads the LCD's flag
 *  register.
 */
void lcd_interrupt_callback(void)
{
    1f38:	b510      	push	{r4, lr}
    lcd_int_flags = lcd_rd8(REG_INT_FLAGS);
    1f3a:	4803      	ldr	r0, [pc, #12]	; (1f48 <lcd_interrupt_callback+0x10>)
    1f3c:	4b03      	ldr	r3, [pc, #12]	; (1f4c <lcd_interrupt_callback+0x14>)
    1f3e:	4798      	blx	r3
    1f40:	4b03      	ldr	r3, [pc, #12]	; (1f50 <lcd_interrupt_callback+0x18>)
    1f42:	7018      	strb	r0, [r3, #0]
}
    1f44:	bd10      	pop	{r4, pc}
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	003020a8 	.word	0x003020a8
    1f4c:	00001ee5 	.word	0x00001ee5
    1f50:	20000008 	.word	0x20000008

00001f54 <led_tx_on>:
		port_base->OUTCLR.reg = pin_mask;
    1f54:	2280      	movs	r2, #128	; 0x80
    1f56:	0512      	lsls	r2, r2, #20
    1f58:	4b01      	ldr	r3, [pc, #4]	; (1f60 <led_tx_on+0xc>)
    1f5a:	615a      	str	r2, [r3, #20]
 * @brief Turn on Transmit LED
 */
void led_tx_on(void)
{
    port_pin_set_output_level(PIN_PA27, false);
}
    1f5c:	4770      	bx	lr
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	41004400 	.word	0x41004400

00001f64 <led_tx_off>:
		port_base->OUTSET.reg = pin_mask;
    1f64:	2280      	movs	r2, #128	; 0x80
    1f66:	0512      	lsls	r2, r2, #20
    1f68:	4b01      	ldr	r3, [pc, #4]	; (1f70 <led_tx_off+0xc>)
    1f6a:	619a      	str	r2, [r3, #24]
 * @brief Turn off Transmit LED
 */
void led_tx_off(void)
{
    port_pin_set_output_level(PIN_PA27, true);
}
    1f6c:	4770      	bx	lr
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	41004400 	.word	0x41004400

00001f74 <SysTick_Handler>:
 * Handles the interrupt from the timer
 */
void SysTick_Handler(void)
{
    /* increment the tick count */
    Millisecond_Counter++;
    1f74:	4a02      	ldr	r2, [pc, #8]	; (1f80 <SysTick_Handler+0xc>)
    1f76:	6813      	ldr	r3, [r2, #0]
    1f78:	3301      	adds	r3, #1
    1f7a:	6013      	str	r3, [r2, #0]
}
    1f7c:	4770      	bx	lr
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	200000dc 	.word	0x200000dc

00001f84 <mstimer_now>:
 * The system time is the time elapsed since OS was started.
 * @return milliseconds since OS was started
 */
unsigned long mstimer_now(void)
{
    return Millisecond_Counter;
    1f84:	4b01      	ldr	r3, [pc, #4]	; (1f8c <mstimer_now+0x8>)
    1f86:	6818      	ldr	r0, [r3, #0]
}
    1f88:	4770      	bx	lr
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	200000dc 	.word	0x200000dc

00001f90 <mstimer_init>:

/**
 * @brief Initialization for timer
 */
void mstimer_init(void)
{
    1f90:	b510      	push	{r4, lr}
    /* Setup SysTick Timer for 1ms interrupts  */
    if (SysTick_Config(SystemCoreClock / 1000)) {
    1f92:	4b0f      	ldr	r3, [pc, #60]	; (1fd0 <mstimer_init+0x40>)
    1f94:	6818      	ldr	r0, [r3, #0]
    1f96:	21fa      	movs	r1, #250	; 0xfa
    1f98:	0089      	lsls	r1, r1, #2
    1f9a:	4b0e      	ldr	r3, [pc, #56]	; (1fd4 <mstimer_init+0x44>)
    1f9c:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1f9e:	3801      	subs	r0, #1
    1fa0:	4b0d      	ldr	r3, [pc, #52]	; (1fd8 <mstimer_init+0x48>)
    1fa2:	4298      	cmp	r0, r3
    1fa4:	d811      	bhi.n	1fca <mstimer_init+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1fa6:	4a0d      	ldr	r2, [pc, #52]	; (1fdc <mstimer_init+0x4c>)
    1fa8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1faa:	480d      	ldr	r0, [pc, #52]	; (1fe0 <mstimer_init+0x50>)
    1fac:	6a03      	ldr	r3, [r0, #32]
    1fae:	021b      	lsls	r3, r3, #8
    1fb0:	0a1b      	lsrs	r3, r3, #8
    1fb2:	21c0      	movs	r1, #192	; 0xc0
    1fb4:	0609      	lsls	r1, r1, #24
    1fb6:	430b      	orrs	r3, r1
    1fb8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1fba:	2300      	movs	r3, #0
    1fbc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1fbe:	3307      	adds	r3, #7
    1fc0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    1fc2:	2300      	movs	r3, #0
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d002      	beq.n	1fce <mstimer_init+0x3e>
    1fc8:	e7fe      	b.n	1fc8 <mstimer_init+0x38>
    return (1UL);                                                   /* Reload value impossible */
    1fca:	2301      	movs	r3, #1
    1fcc:	e7fa      	b.n	1fc4 <mstimer_init+0x34>
        /* Capture error */
        while (1)
            ;
    }
    NVIC_EnableIRQ(SysTick_IRQn);
}
    1fce:	bd10      	pop	{r4, pc}
    1fd0:	2000000c 	.word	0x2000000c
    1fd4:	00003489 	.word	0x00003489
    1fd8:	00ffffff 	.word	0x00ffffff
    1fdc:	e000e010 	.word	0xe000e010
    1fe0:	e000ed00 	.word	0xe000ed00

00001fe4 <rs485_clock_init>:

/**
 * Initialize the USART SERCOM module clock
 */
static void rs485_clock_init(void)
{
    1fe4:	b500      	push	{lr}
    1fe6:	b083      	sub	sp, #12
			PM->APBCMASK.reg |= mask;
    1fe8:	4a07      	ldr	r2, [pc, #28]	; (2008 <STACK_SIZE+0x8>)
    1fea:	6a13      	ldr	r3, [r2, #32]
    1fec:	2120      	movs	r1, #32
    1fee:	430b      	orrs	r3, r1
    1ff0:	6213      	str	r3, [r2, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1ff2:	a901      	add	r1, sp, #4
    1ff4:	2300      	movs	r3, #0
    1ff6:	700b      	strb	r3, [r1, #0]
    system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_SERCOM3);
    /* Turn on Generic clock for USART */
    system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    /*Default is generator 0. Other wise need to configure like below */
    /* gclk_chan_conf.source_generator = GCLK_GENERATOR_1; */
    system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1ff8:	2017      	movs	r0, #23
    1ffa:	4b04      	ldr	r3, [pc, #16]	; (200c <STACK_SIZE+0xc>)
    1ffc:	4798      	blx	r3
    system_gclk_chan_enable(gclk_index);
    1ffe:	2017      	movs	r0, #23
    2000:	4b03      	ldr	r3, [pc, #12]	; (2010 <STACK_SIZE+0x10>)
    2002:	4798      	blx	r3
}
    2004:	b003      	add	sp, #12
    2006:	bd00      	pop	{pc}
    2008:	40000400 	.word	0x40000400
    200c:	00002f35 	.word	0x00002f35
    2010:	00002ead 	.word	0x00002ead

00002014 <rs485_pin_init>:

/**
 * Initialize the RTS pin
 */
static void rs485_pin_init(void)
{
    2014:	b570      	push	{r4, r5, r6, lr}
	config->powersave  = false;
    2016:	4c0b      	ldr	r4, [pc, #44]	; (2044 <rs485_pin_init+0x30>)
    2018:	2300      	movs	r3, #0
    201a:	70a3      	strb	r3, [r4, #2]
	//Configure PIN_A24 as DE and PIN_A25 as /RE
    port_get_config_defaults(&RS485_Port_Config);
    RS485_Port_Config.direction = PORT_PIN_DIR_OUTPUT;
    201c:	2601      	movs	r6, #1
    201e:	7026      	strb	r6, [r4, #0]
	
    RS485_Port_Config.input_pull = PORT_PIN_PULL_DOWN;
    2020:	3302      	adds	r3, #2
    2022:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(RS485_DE, &RS485_Port_Config);
    2024:	0021      	movs	r1, r4
    2026:	2018      	movs	r0, #24
    2028:	4d07      	ldr	r5, [pc, #28]	; (2048 <rs485_pin_init+0x34>)
    202a:	47a8      	blx	r5
	
	RS485_Port_Config.input_pull = PORT_PIN_PULL_UP;
    202c:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(RS485_RE, &RS485_Port_Config);
    202e:	0021      	movs	r1, r4
    2030:	2019      	movs	r0, #25
    2032:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    2034:	4b05      	ldr	r3, [pc, #20]	; (204c <rs485_pin_init+0x38>)
    2036:	2280      	movs	r2, #128	; 0x80
    2038:	0492      	lsls	r2, r2, #18
    203a:	615a      	str	r2, [r3, #20]
    203c:	2280      	movs	r2, #128	; 0x80
    203e:	0452      	lsls	r2, r2, #17
    2040:	615a      	str	r2, [r3, #20]

	
	
    port_pin_set_output_level(RS485_RE, false);
	port_pin_set_output_level(RS485_DE, false);
}
    2042:	bd70      	pop	{r4, r5, r6, pc}
    2044:	200000e4 	.word	0x200000e4
    2048:	0000293d 	.word	0x0000293d
    204c:	41004400 	.word	0x41004400

00002050 <usart_read_callback>:
{
    2050:	b510      	push	{r4, lr}
    if (!Transmitting) {
    2052:	4b0a      	ldr	r3, [pc, #40]	; (207c <usart_read_callback+0x2c>)
    2054:	781b      	ldrb	r3, [r3, #0]
    2056:	2b00      	cmp	r3, #0
    2058:	d004      	beq.n	2064 <usart_read_callback+0x14>
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    205a:	4909      	ldr	r1, [pc, #36]	; (2080 <usart_read_callback+0x30>)
    205c:	4809      	ldr	r0, [pc, #36]	; (2084 <usart_read_callback+0x34>)
    205e:	4b0a      	ldr	r3, [pc, #40]	; (2088 <usart_read_callback+0x38>)
    2060:	4798      	blx	r3
}
    2062:	bd10      	pop	{r4, pc}
        FIFO_Put(&Receive_Queue, rx_buffer[0]);
    2064:	4b06      	ldr	r3, [pc, #24]	; (2080 <usart_read_callback+0x30>)
    2066:	8819      	ldrh	r1, [r3, #0]
    2068:	b2c9      	uxtb	r1, r1
    206a:	4808      	ldr	r0, [pc, #32]	; (208c <usart_read_callback+0x3c>)
    206c:	4b08      	ldr	r3, [pc, #32]	; (2090 <usart_read_callback+0x40>)
    206e:	4798      	blx	r3
        RS485_Receive_Bytes++;
    2070:	4a08      	ldr	r2, [pc, #32]	; (2094 <usart_read_callback+0x44>)
    2072:	6813      	ldr	r3, [r2, #0]
    2074:	3301      	adds	r3, #1
    2076:	6013      	str	r3, [r2, #0]
    2078:	e7ef      	b.n	205a <usart_read_callback+0xa>
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	20000370 	.word	0x20000370
    2080:	200009a8 	.word	0x200009a8
    2084:	2000012c 	.word	0x2000012c
    2088:	000026a5 	.word	0x000026a5
    208c:	20000160 	.word	0x20000160
    2090:	000014b5 	.word	0x000014b5
    2094:	200000e8 	.word	0x200000e8

00002098 <rs485_usart_init>:

/**
 * Initialize the USART SERCOM module for RS485
 */
static void rs485_usart_init(void)
{
    2098:	b570      	push	{r4, r5, r6, lr}
    enum status_code status;

    /* Disable this module since ASF expects it to be disabled. */
    RS485_USART->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    209a:	4935      	ldr	r1, [pc, #212]	; (2170 <rs485_usart_init+0xd8>)
    209c:	680b      	ldr	r3, [r1, #0]
    209e:	2202      	movs	r2, #2
    20a0:	4393      	bics	r3, r2
    20a2:	600b      	str	r3, [r1, #0]
	config->data_order       = USART_DATAORDER_LSB;
    20a4:	4a33      	ldr	r2, [pc, #204]	; (2174 <rs485_usart_init+0xdc>)
    20a6:	2380      	movs	r3, #128	; 0x80
    20a8:	05db      	lsls	r3, r3, #23
    20aa:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    20ac:	2300      	movs	r3, #0
    20ae:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    20b0:	20ff      	movs	r0, #255	; 0xff
    20b2:	8110      	strh	r0, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    20b4:	2000      	movs	r0, #0
    20b6:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    20b8:	72d3      	strb	r3, [r2, #11]
	config->receiver_enable  = true;
    20ba:	2401      	movs	r4, #1
    20bc:	2524      	movs	r5, #36	; 0x24
    20be:	5554      	strb	r4, [r2, r5]
	config->transmitter_enable = true;
    20c0:	3501      	adds	r5, #1
    20c2:	5554      	strb	r4, [r2, r5]
	config->clock_polarity_inverted = false;
    20c4:	3425      	adds	r4, #37	; 0x25
    20c6:	5513      	strb	r3, [r2, r4]
	config->use_external_clock = false;
    20c8:	3401      	adds	r4, #1
    20ca:	5513      	strb	r3, [r2, r4]
	config->ext_clock_freq   = 0;
    20cc:	6293      	str	r3, [r2, #40]	; 0x28
	config->run_in_standby   = false;
    20ce:	3405      	adds	r4, #5
    20d0:	5513      	strb	r3, [r2, r4]
	config->generator_source = GCLK_GENERATOR_0;
    20d2:	3401      	adds	r4, #1
    20d4:	5513      	strb	r3, [r2, r4]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    20d6:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    20d8:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
    20da:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
    20dc:	7610      	strb	r0, [r2, #24]
	config->start_frame_detection_enable            = false;
    20de:	7710      	strb	r0, [r2, #28]
	config->encoding_format_enable                  = false;
    20e0:	7650      	strb	r0, [r2, #25]
	config->receive_pulse_length                    = 19;
    20e2:	2313      	movs	r3, #19
    20e4:	7693      	strb	r3, [r2, #26]
	config->collision_detection_enable              = false;
    20e6:	7750      	strb	r0, [r2, #29]
    // Get default settings
    usart_get_config_defaults(&RS485_USART_Config);
    RS485_USART_Config.baudrate = Baud_Rate;
    20e8:	4b23      	ldr	r3, [pc, #140]	; (2178 <rs485_usart_init+0xe0>)
    20ea:	681b      	ldr	r3, [r3, #0]
    20ec:	6213      	str	r3, [r2, #32]
    RS485_USART_Config.mux_setting = USART_RX_1_TX_0_RTS_2_CTS_3;
    20ee:	2390      	movs	r3, #144	; 0x90
    20f0:	035b      	lsls	r3, r3, #13
    20f2:	60d3      	str	r3, [r2, #12]
    RS485_USART_Config.pinmux_pad0 = RS485_TX;
    20f4:	4b21      	ldr	r3, [pc, #132]	; (217c <rs485_usart_init+0xe4>)
    20f6:	6313      	str	r3, [r2, #48]	; 0x30
    RS485_USART_Config.pinmux_pad1 = RS485_RX;
    20f8:	4b21      	ldr	r3, [pc, #132]	; (2180 <rs485_usart_init+0xe8>)
    20fa:	6353      	str	r3, [r2, #52]	; 0x34
    RS485_USART_Config.pinmux_pad2 = PINMUX_UNUSED;
    20fc:	2301      	movs	r3, #1
    20fe:	425b      	negs	r3, r3
    2100:	6393      	str	r3, [r2, #56]	; 0x38
    RS485_USART_Config.pinmux_pad3 = PINMUX_UNUSED;
    2102:	63d3      	str	r3, [r2, #60]	; 0x3c
    status = usart_init(&RS485_USART_Module, RS485_USART, &RS485_USART_Config);
    2104:	481f      	ldr	r0, [pc, #124]	; (2184 <rs485_usart_init+0xec>)
    2106:	4b20      	ldr	r3, [pc, #128]	; (2188 <rs485_usart_init+0xf0>)
    2108:	4798      	blx	r3
    while (status != STATUS_OK) {
    210a:	2800      	cmp	r0, #0
    210c:	d1fd      	bne.n	210a <rs485_usart_init+0x72>
	SercomUsart *const usart_hw = &(module->hw->USART);
    210e:	4b1d      	ldr	r3, [pc, #116]	; (2184 <rs485_usart_init+0xec>)
    2110:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2112:	0020      	movs	r0, r4
    2114:	4b1d      	ldr	r3, [pc, #116]	; (218c <rs485_usart_init+0xf4>)
    2116:	4798      	blx	r3
    2118:	231f      	movs	r3, #31
    211a:	4018      	ands	r0, r3
    211c:	3b1e      	subs	r3, #30
    211e:	4083      	lsls	r3, r0
    2120:	4a1b      	ldr	r2, [pc, #108]	; (2190 <rs485_usart_init+0xf8>)
    2122:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2124:	4b17      	ldr	r3, [pc, #92]	; (2184 <rs485_usart_init+0xec>)
    2126:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2128:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    212a:	2b00      	cmp	r3, #0
    212c:	d1fa      	bne.n	2124 <rs485_usart_init+0x8c>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    212e:	6823      	ldr	r3, [r4, #0]
    2130:	2202      	movs	r2, #2
    2132:	4313      	orrs	r3, r2
    2134:	6023      	str	r3, [r4, #0]
        /* hardware not initialized correctly - figure out why! */
    }
    usart_enable(&RS485_USART_Module);
#ifdef USART_CALLBACK_MODE
    usart_register_callback(&RS485_USART_Module, usart_read_callback,
    2136:	4c13      	ldr	r4, [pc, #76]	; (2184 <rs485_usart_init+0xec>)
    2138:	3a01      	subs	r2, #1
    213a:	4916      	ldr	r1, [pc, #88]	; (2194 <rs485_usart_init+0xfc>)
    213c:	0020      	movs	r0, r4
    213e:	4e16      	ldr	r6, [pc, #88]	; (2198 <rs485_usart_init+0x100>)
    2140:	47b0      	blx	r6
    2142:	2531      	movs	r5, #49	; 0x31
    2144:	5d63      	ldrb	r3, [r4, r5]
    2146:	2202      	movs	r2, #2
    2148:	4313      	orrs	r3, r2
    214a:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_RECEIVED);
    usart_enable_callback(&RS485_USART_Module, USART_CALLBACK_BUFFER_RECEIVED);
    usart_register_callback(&RS485_USART_Module, usart_write_callback,
    214c:	2200      	movs	r2, #0
    214e:	4913      	ldr	r1, [pc, #76]	; (219c <rs485_usart_init+0x104>)
    2150:	0020      	movs	r0, r4
    2152:	47b0      	blx	r6
    2154:	5d63      	ldrb	r3, [r4, r5]
    2156:	2201      	movs	r2, #1
    2158:	4313      	orrs	r3, r2
    215a:	5563      	strb	r3, [r4, r5]
        USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_enable_callback(
        &RS485_USART_Module, USART_CALLBACK_BUFFER_TRANSMITTED);
    system_interrupt_set_priority(
    215c:	2100      	movs	r1, #0
    215e:	200c      	movs	r0, #12
    2160:	4b0f      	ldr	r3, [pc, #60]	; (21a0 <rs485_usart_init+0x108>)
    2162:	4798      	blx	r3
        SYSTEM_INTERRUPT_MODULE_SERCOM3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    /* initial callback call to prepare to begin receiving data */
    usart_read_job(&RS485_USART_Module, (uint16_t *)rx_buffer);
    2164:	490f      	ldr	r1, [pc, #60]	; (21a4 <rs485_usart_init+0x10c>)
    2166:	0020      	movs	r0, r4
    2168:	4b0f      	ldr	r3, [pc, #60]	; (21a8 <rs485_usart_init+0x110>)
    216a:	4798      	blx	r3
#endif    
}
    216c:	bd70      	pop	{r4, r5, r6, pc}
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	42001400 	.word	0x42001400
    2174:	200000ec 	.word	0x200000ec
    2178:	200000e0 	.word	0x200000e0
    217c:	00160002 	.word	0x00160002
    2180:	00170002 	.word	0x00170002
    2184:	2000012c 	.word	0x2000012c
    2188:	000024f5 	.word	0x000024f5
    218c:	000028b9 	.word	0x000028b9
    2190:	e000e100 	.word	0xe000e100
    2194:	00002051 	.word	0x00002051
    2198:	0000268d 	.word	0x0000268d
    219c:	000021f9 	.word	0x000021f9
    21a0:	00002f85 	.word	0x00002f85
    21a4:	200009a8 	.word	0x200009a8
    21a8:	000026a5 	.word	0x000026a5

000021ac <rs485_rts_enable>:
{
    21ac:	b510      	push	{r4, lr}
    if (enable) {
    21ae:	2800      	cmp	r0, #0
    21b0:	d10c      	bne.n	21cc <rs485_rts_enable+0x20>
    21b2:	4b0d      	ldr	r3, [pc, #52]	; (21e8 <rs485_rts_enable+0x3c>)
    21b4:	2280      	movs	r2, #128	; 0x80
    21b6:	0492      	lsls	r2, r2, #18
    21b8:	615a      	str	r2, [r3, #20]
    21ba:	2280      	movs	r2, #128	; 0x80
    21bc:	0452      	lsls	r2, r2, #17
    21be:	615a      	str	r2, [r3, #20]
        led_tx_off();
    21c0:	4b0a      	ldr	r3, [pc, #40]	; (21ec <rs485_rts_enable+0x40>)
    21c2:	4798      	blx	r3
        Transmitting = false;
    21c4:	2200      	movs	r2, #0
    21c6:	4b0a      	ldr	r3, [pc, #40]	; (21f0 <rs485_rts_enable+0x44>)
    21c8:	701a      	strb	r2, [r3, #0]
}
    21ca:	bd10      	pop	{r4, pc}
        Transmitting = true;
    21cc:	2201      	movs	r2, #1
    21ce:	4b08      	ldr	r3, [pc, #32]	; (21f0 <rs485_rts_enable+0x44>)
    21d0:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    21d2:	4b05      	ldr	r3, [pc, #20]	; (21e8 <rs485_rts_enable+0x3c>)
    21d4:	2280      	movs	r2, #128	; 0x80
    21d6:	0492      	lsls	r2, r2, #18
    21d8:	619a      	str	r2, [r3, #24]
    21da:	2280      	movs	r2, #128	; 0x80
    21dc:	0452      	lsls	r2, r2, #17
    21de:	619a      	str	r2, [r3, #24]
        led_tx_on();
    21e0:	4b04      	ldr	r3, [pc, #16]	; (21f4 <rs485_rts_enable+0x48>)
    21e2:	4798      	blx	r3
    21e4:	e7f1      	b.n	21ca <rs485_rts_enable+0x1e>
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	41004400 	.word	0x41004400
    21ec:	00001f65 	.word	0x00001f65
    21f0:	20000370 	.word	0x20000370
    21f4:	00001f55 	.word	0x00001f55

000021f8 <usart_write_callback>:
{
    21f8:	b510      	push	{r4, lr}
    rs485_rts_enable(false);
    21fa:	2000      	movs	r0, #0
    21fc:	4b01      	ldr	r3, [pc, #4]	; (2204 <usart_write_callback+0xc>)
    21fe:	4798      	blx	r3
}
    2200:	bd10      	pop	{r4, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	000021ad 	.word	0x000021ad

00002208 <rs485_baud_rate_set>:
    switch (baudrate) {
    2208:	2396      	movs	r3, #150	; 0x96
    220a:	021b      	lsls	r3, r3, #8
    220c:	4298      	cmp	r0, r3
    220e:	d103      	bne.n	2218 <rs485_baud_rate_set+0x10>
            Baud_Rate = baudrate;
    2210:	4b02      	ldr	r3, [pc, #8]	; (221c <rs485_baud_rate_set+0x14>)
    2212:	6018      	str	r0, [r3, #0]
    bool valid = true;
    2214:	2001      	movs	r0, #1
}
    2216:	4770      	bx	lr
            valid = false;
    2218:	2000      	movs	r0, #0
    221a:	e7fc      	b.n	2216 <rs485_baud_rate_set+0xe>
    221c:	200000e0 	.word	0x200000e0

00002220 <rs485_init>:

/* SERCOM3 UART initialization */
void rs485_init(void)
{
    2220:	b510      	push	{r4, lr}
    /* initialize the Rx and Tx byte queues */
    FIFO_Init(&Receive_Queue, &Receive_Queue_Data[0],
    2222:	2280      	movs	r2, #128	; 0x80
    2224:	0092      	lsls	r2, r2, #2
    2226:	4905      	ldr	r1, [pc, #20]	; (223c <rs485_init+0x1c>)
    2228:	4805      	ldr	r0, [pc, #20]	; (2240 <rs485_init+0x20>)
    222a:	4b06      	ldr	r3, [pc, #24]	; (2244 <rs485_init+0x24>)
    222c:	4798      	blx	r3
        (unsigned)sizeof(Receive_Queue_Data));
    rs485_clock_init();
    222e:	4b06      	ldr	r3, [pc, #24]	; (2248 <rs485_init+0x28>)
    2230:	4798      	blx	r3
    rs485_pin_init();
    2232:	4b06      	ldr	r3, [pc, #24]	; (224c <rs485_init+0x2c>)
    2234:	4798      	blx	r3
    rs485_usart_init();
    2236:	4b06      	ldr	r3, [pc, #24]	; (2250 <rs485_init+0x30>)
    2238:	4798      	blx	r3
}
    223a:	bd10      	pop	{r4, pc}
    223c:	20000170 	.word	0x20000170
    2240:	20000160 	.word	0x20000160
    2244:	000014f1 	.word	0x000014f1
    2248:	00001fe5 	.word	0x00001fe5
    224c:	00002015 	.word	0x00002015
    2250:	00002099 	.word	0x00002099

00002254 <WDT_Handler>:
    2254:	b510      	push	{r4, lr}
    2256:	2201      	movs	r2, #1
    2258:	4b03      	ldr	r3, [pc, #12]	; (2268 <WDT_Handler+0x14>)
    225a:	719a      	strb	r2, [r3, #6]
    225c:	4b03      	ldr	r3, [pc, #12]	; (226c <WDT_Handler+0x18>)
    225e:	681b      	ldr	r3, [r3, #0]
    2260:	2b00      	cmp	r3, #0
    2262:	d000      	beq.n	2266 <WDT_Handler+0x12>
    2264:	4798      	blx	r3
    2266:	bd10      	pop	{r4, pc}
    2268:	40001000 	.word	0x40001000
    226c:	200009b0 	.word	0x200009b0

00002270 <_tc_interrupt_handler>:
    2270:	b570      	push	{r4, r5, r6, lr}
    2272:	0080      	lsls	r0, r0, #2
    2274:	4b16      	ldr	r3, [pc, #88]	; (22d0 <_tc_interrupt_handler+0x60>)
    2276:	58c5      	ldr	r5, [r0, r3]
    2278:	682b      	ldr	r3, [r5, #0]
    227a:	7b9c      	ldrb	r4, [r3, #14]
    227c:	7e2a      	ldrb	r2, [r5, #24]
    227e:	7e6b      	ldrb	r3, [r5, #25]
    2280:	4014      	ands	r4, r2
    2282:	401c      	ands	r4, r3
    2284:	07e3      	lsls	r3, r4, #31
    2286:	d406      	bmi.n	2296 <_tc_interrupt_handler+0x26>
    2288:	07a3      	lsls	r3, r4, #30
    228a:	d40b      	bmi.n	22a4 <_tc_interrupt_handler+0x34>
    228c:	06e3      	lsls	r3, r4, #27
    228e:	d410      	bmi.n	22b2 <_tc_interrupt_handler+0x42>
    2290:	06a3      	lsls	r3, r4, #26
    2292:	d415      	bmi.n	22c0 <_tc_interrupt_handler+0x50>
    2294:	bd70      	pop	{r4, r5, r6, pc}
    2296:	0028      	movs	r0, r5
    2298:	68ab      	ldr	r3, [r5, #8]
    229a:	4798      	blx	r3
    229c:	2301      	movs	r3, #1
    229e:	682a      	ldr	r2, [r5, #0]
    22a0:	7393      	strb	r3, [r2, #14]
    22a2:	e7f1      	b.n	2288 <_tc_interrupt_handler+0x18>
    22a4:	0028      	movs	r0, r5
    22a6:	68eb      	ldr	r3, [r5, #12]
    22a8:	4798      	blx	r3
    22aa:	2302      	movs	r3, #2
    22ac:	682a      	ldr	r2, [r5, #0]
    22ae:	7393      	strb	r3, [r2, #14]
    22b0:	e7ec      	b.n	228c <_tc_interrupt_handler+0x1c>
    22b2:	0028      	movs	r0, r5
    22b4:	692b      	ldr	r3, [r5, #16]
    22b6:	4798      	blx	r3
    22b8:	2310      	movs	r3, #16
    22ba:	682a      	ldr	r2, [r5, #0]
    22bc:	7393      	strb	r3, [r2, #14]
    22be:	e7e7      	b.n	2290 <_tc_interrupt_handler+0x20>
    22c0:	0028      	movs	r0, r5
    22c2:	696b      	ldr	r3, [r5, #20]
    22c4:	4798      	blx	r3
    22c6:	682b      	ldr	r3, [r5, #0]
    22c8:	2220      	movs	r2, #32
    22ca:	739a      	strb	r2, [r3, #14]
    22cc:	e7e2      	b.n	2294 <_tc_interrupt_handler+0x24>
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	200009b4 	.word	0x200009b4

000022d4 <TC3_Handler>:
    22d4:	b510      	push	{r4, lr}
    22d6:	2000      	movs	r0, #0
    22d8:	4b01      	ldr	r3, [pc, #4]	; (22e0 <TC3_Handler+0xc>)
    22da:	4798      	blx	r3
    22dc:	bd10      	pop	{r4, pc}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	00002271 	.word	0x00002271

000022e4 <TC4_Handler>:
    22e4:	b510      	push	{r4, lr}
    22e6:	2001      	movs	r0, #1
    22e8:	4b01      	ldr	r3, [pc, #4]	; (22f0 <TC4_Handler+0xc>)
    22ea:	4798      	blx	r3
    22ec:	bd10      	pop	{r4, pc}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	00002271 	.word	0x00002271

000022f4 <TC5_Handler>:
    22f4:	b510      	push	{r4, lr}
    22f6:	2002      	movs	r0, #2
    22f8:	4b01      	ldr	r3, [pc, #4]	; (2300 <TC5_Handler+0xc>)
    22fa:	4798      	blx	r3
    22fc:	bd10      	pop	{r4, pc}
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	00002271 	.word	0x00002271

00002304 <TC6_Handler>:
    2304:	b510      	push	{r4, lr}
    2306:	2003      	movs	r0, #3
    2308:	4b01      	ldr	r3, [pc, #4]	; (2310 <TC6_Handler+0xc>)
    230a:	4798      	blx	r3
    230c:	bd10      	pop	{r4, pc}
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	00002271 	.word	0x00002271

00002314 <TC7_Handler>:
    2314:	b510      	push	{r4, lr}
    2316:	2004      	movs	r0, #4
    2318:	4b01      	ldr	r3, [pc, #4]	; (2320 <TC7_Handler+0xc>)
    231a:	4798      	blx	r3
    231c:	bd10      	pop	{r4, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	00002271 	.word	0x00002271

00002324 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    2324:	b5f0      	push	{r4, r5, r6, r7, lr}
    2326:	46de      	mov	lr, fp
    2328:	4657      	mov	r7, sl
    232a:	464e      	mov	r6, r9
    232c:	4645      	mov	r5, r8
    232e:	b5e0      	push	{r5, r6, r7, lr}
    2330:	b087      	sub	sp, #28
    2332:	0005      	movs	r5, r0
    2334:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2336:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2338:	0030      	movs	r0, r6
    233a:	4b69      	ldr	r3, [pc, #420]	; (24e0 <_usart_set_config+0x1bc>)
    233c:	4798      	blx	r3
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    233e:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2340:	2200      	movs	r2, #0
    2342:	230e      	movs	r3, #14
    2344:	a902      	add	r1, sp, #8
    2346:	468c      	mov	ip, r1
    2348:	4463      	add	r3, ip
    234a:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    234c:	8a22      	ldrh	r2, [r4, #16]
    234e:	2380      	movs	r3, #128	; 0x80
    2350:	01db      	lsls	r3, r3, #7
    2352:	429a      	cmp	r2, r3
    2354:	d03b      	beq.n	23ce <_usart_set_config+0xaa>
    2356:	d90c      	bls.n	2372 <_usart_set_config+0x4e>
    2358:	23c0      	movs	r3, #192	; 0xc0
    235a:	01db      	lsls	r3, r3, #7
    235c:	429a      	cmp	r2, r3
    235e:	d031      	beq.n	23c4 <_usart_set_config+0xa0>
    2360:	2380      	movs	r3, #128	; 0x80
    2362:	021b      	lsls	r3, r3, #8
    2364:	429a      	cmp	r2, r3
    2366:	d10d      	bne.n	2384 <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2368:	2303      	movs	r3, #3
    236a:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    236c:	2300      	movs	r3, #0
    236e:	469a      	mov	sl, r3
			break;
    2370:	e00c      	b.n	238c <_usart_set_config+0x68>
	switch (config->sample_rate) {
    2372:	2380      	movs	r3, #128	; 0x80
    2374:	019b      	lsls	r3, r3, #6
    2376:	429a      	cmp	r2, r3
    2378:	d104      	bne.n	2384 <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    237a:	2310      	movs	r3, #16
    237c:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    237e:	3b0f      	subs	r3, #15
    2380:	469a      	mov	sl, r3
			break;
    2382:	e003      	b.n	238c <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2384:	2310      	movs	r3, #16
    2386:	4698      	mov	r8, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2388:	2300      	movs	r3, #0
    238a:	469a      	mov	sl, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    238c:	6823      	ldr	r3, [r4, #0]
    238e:	68e1      	ldr	r1, [r4, #12]
    2390:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
    2392:	6961      	ldr	r1, [r4, #20]
    2394:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2396:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2398:	7e22      	ldrb	r2, [r4, #24]
    239a:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    239c:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    239e:	2226      	movs	r2, #38	; 0x26
    23a0:	5ca2      	ldrb	r2, [r4, r2]
    23a2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    23a4:	4313      	orrs	r3, r2
    23a6:	4699      	mov	r9, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    23a8:	6862      	ldr	r2, [r4, #4]
    23aa:	9203      	str	r2, [sp, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    23ac:	2a00      	cmp	r2, #0
    23ae:	d021      	beq.n	23f4 <_usart_set_config+0xd0>
    23b0:	2380      	movs	r3, #128	; 0x80
    23b2:	055b      	lsls	r3, r3, #21
    23b4:	429a      	cmp	r2, r3
    23b6:	d13e      	bne.n	2436 <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    23b8:	2327      	movs	r3, #39	; 0x27
    23ba:	5ce3      	ldrb	r3, [r4, r3]
    23bc:	2b00      	cmp	r3, #0
    23be:	d00b      	beq.n	23d8 <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
    23c0:	2000      	movs	r0, #0
    23c2:	e039      	b.n	2438 <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    23c4:	2308      	movs	r3, #8
    23c6:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    23c8:	3b07      	subs	r3, #7
    23ca:	469a      	mov	sl, r3
			break;
    23cc:	e7de      	b.n	238c <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    23ce:	2308      	movs	r3, #8
    23d0:	4698      	mov	r8, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    23d2:	2300      	movs	r3, #0
    23d4:	469a      	mov	sl, r3
    23d6:	e7d9      	b.n	238c <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    23d8:	6a23      	ldr	r3, [r4, #32]
    23da:	4698      	mov	r8, r3
    23dc:	b2c0      	uxtb	r0, r0
    23de:	4b41      	ldr	r3, [pc, #260]	; (24e4 <_usart_set_config+0x1c0>)
    23e0:	4798      	blx	r3
    23e2:	0001      	movs	r1, r0
    23e4:	220e      	movs	r2, #14
    23e6:	ab02      	add	r3, sp, #8
    23e8:	469c      	mov	ip, r3
    23ea:	4462      	add	r2, ip
    23ec:	4640      	mov	r0, r8
    23ee:	4b3e      	ldr	r3, [pc, #248]	; (24e8 <_usart_set_config+0x1c4>)
    23f0:	4798      	blx	r3
    23f2:	e021      	b.n	2438 <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    23f4:	2327      	movs	r3, #39	; 0x27
    23f6:	5ce3      	ldrb	r3, [r4, r3]
    23f8:	2b00      	cmp	r3, #0
    23fa:	d00b      	beq.n	2414 <_usart_set_config+0xf0>
				status_code =
    23fc:	4643      	mov	r3, r8
    23fe:	9300      	str	r3, [sp, #0]
    2400:	4653      	mov	r3, sl
    2402:	220e      	movs	r2, #14
    2404:	a902      	add	r1, sp, #8
    2406:	468c      	mov	ip, r1
    2408:	4462      	add	r2, ip
    240a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    240c:	6a20      	ldr	r0, [r4, #32]
    240e:	4f37      	ldr	r7, [pc, #220]	; (24ec <_usart_set_config+0x1c8>)
    2410:	47b8      	blx	r7
    2412:	e011      	b.n	2438 <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2414:	6a23      	ldr	r3, [r4, #32]
    2416:	469b      	mov	fp, r3
    2418:	b2c0      	uxtb	r0, r0
    241a:	4b32      	ldr	r3, [pc, #200]	; (24e4 <_usart_set_config+0x1c0>)
    241c:	4798      	blx	r3
    241e:	0001      	movs	r1, r0
				status_code =
    2420:	4643      	mov	r3, r8
    2422:	9300      	str	r3, [sp, #0]
    2424:	4653      	mov	r3, sl
    2426:	220e      	movs	r2, #14
    2428:	a802      	add	r0, sp, #8
    242a:	4684      	mov	ip, r0
    242c:	4462      	add	r2, ip
    242e:	4658      	mov	r0, fp
    2430:	4f2e      	ldr	r7, [pc, #184]	; (24ec <_usart_set_config+0x1c8>)
    2432:	47b8      	blx	r7
    2434:	e000      	b.n	2438 <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
    2436:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2438:	2800      	cmp	r0, #0
    243a:	d142      	bne.n	24c2 <_usart_set_config+0x19e>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    243c:	7e63      	ldrb	r3, [r4, #25]
    243e:	2b00      	cmp	r3, #0
    2440:	d001      	beq.n	2446 <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2442:	7ea3      	ldrb	r3, [r4, #26]
    2444:	73b3      	strb	r3, [r6, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2446:	230e      	movs	r3, #14
    2448:	aa02      	add	r2, sp, #8
    244a:	4694      	mov	ip, r2
    244c:	4463      	add	r3, ip
    244e:	881b      	ldrh	r3, [r3, #0]
    2450:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    2452:	464b      	mov	r3, r9
    2454:	9a03      	ldr	r2, [sp, #12]
    2456:	4313      	orrs	r3, r2

	if (config->use_external_clock == false) {
    2458:	2227      	movs	r2, #39	; 0x27
    245a:	5ca2      	ldrb	r2, [r4, r2]
    245c:	2a00      	cmp	r2, #0
    245e:	d101      	bne.n	2464 <_usart_set_config+0x140>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2460:	3204      	adds	r2, #4
    2462:	4313      	orrs	r3, r2
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2464:	7e61      	ldrb	r1, [r4, #25]
    2466:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2468:	7f22      	ldrb	r2, [r4, #28]
    246a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    246c:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    246e:	7f62      	ldrb	r2, [r4, #29]
    2470:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2472:	4311      	orrs	r1, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2474:	2224      	movs	r2, #36	; 0x24
    2476:	5ca2      	ldrb	r2, [r4, r2]
    2478:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    247a:	4311      	orrs	r1, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    247c:	2225      	movs	r2, #37	; 0x25
    247e:	5ca2      	ldrb	r2, [r4, r2]
    2480:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2482:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    2484:	7aa2      	ldrb	r2, [r4, #10]
    2486:	4311      	orrs	r1, r2
	ctrlb |= (uint32_t)config->character_size;
    2488:	7ae2      	ldrb	r2, [r4, #11]
    248a:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    248c:	8922      	ldrh	r2, [r4, #8]
    248e:	2aff      	cmp	r2, #255	; 0xff
    2490:	d01e      	beq.n	24d0 <_usart_set_config+0x1ac>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2492:	2780      	movs	r7, #128	; 0x80
    2494:	047f      	lsls	r7, r7, #17
    2496:	433b      	orrs	r3, r7
		ctrlb |= config->parity;
    2498:	4311      	orrs	r1, r2
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    249a:	222c      	movs	r2, #44	; 0x2c
    249c:	5ca2      	ldrb	r2, [r4, r2]
    249e:	2a00      	cmp	r2, #0
    24a0:	d103      	bne.n	24aa <_usart_set_config+0x186>
    24a2:	4a13      	ldr	r2, [pc, #76]	; (24f0 <_usart_set_config+0x1cc>)
    24a4:	7892      	ldrb	r2, [r2, #2]
    24a6:	0792      	lsls	r2, r2, #30
    24a8:	d501      	bpl.n	24ae <_usart_set_config+0x18a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    24aa:	2280      	movs	r2, #128	; 0x80
    24ac:	4313      	orrs	r3, r2
	SercomUsart *const usart_hw = &(module->hw->USART);
    24ae:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    24b0:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    24b2:	2a00      	cmp	r2, #0
    24b4:	d1fb      	bne.n	24ae <_usart_set_config+0x18a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    24b6:	6071      	str	r1, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    24b8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    24ba:	69d2      	ldr	r2, [r2, #28]
	while (usart_is_syncing(module)) {
    24bc:	2a00      	cmp	r2, #0
    24be:	d1fb      	bne.n	24b8 <_usart_set_config+0x194>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    24c0:	6033      	str	r3, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
    24c2:	b007      	add	sp, #28
    24c4:	bc3c      	pop	{r2, r3, r4, r5}
    24c6:	4690      	mov	r8, r2
    24c8:	4699      	mov	r9, r3
    24ca:	46a2      	mov	sl, r4
    24cc:	46ab      	mov	fp, r5
    24ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
    24d0:	7ee2      	ldrb	r2, [r4, #27]
    24d2:	2a00      	cmp	r2, #0
    24d4:	d0e1      	beq.n	249a <_usart_set_config+0x176>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    24d6:	2280      	movs	r2, #128	; 0x80
    24d8:	04d2      	lsls	r2, r2, #19
    24da:	4313      	orrs	r3, r2
    24dc:	e7dd      	b.n	249a <_usart_set_config+0x176>
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	00000975 	.word	0x00000975
    24e4:	00002f51 	.word	0x00002f51
    24e8:	000006e9 	.word	0x000006e9
    24ec:	00000715 	.word	0x00000715
    24f0:	41002000 	.word	0x41002000

000024f4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    24f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24f6:	b089      	sub	sp, #36	; 0x24
    24f8:	0006      	movs	r6, r0
    24fa:	000c      	movs	r4, r1
    24fc:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    24fe:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2500:	0008      	movs	r0, r1
    2502:	4b42      	ldr	r3, [pc, #264]	; (260c <usart_init+0x118>)
    2504:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2506:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2508:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    250a:	6823      	ldr	r3, [r4, #0]
    250c:	07db      	lsls	r3, r3, #31
    250e:	d503      	bpl.n	2518 <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2510:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2512:	0028      	movs	r0, r5
    2514:	b009      	add	sp, #36	; 0x24
    2516:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2518:	6823      	ldr	r3, [r4, #0]
    251a:	079b      	lsls	r3, r3, #30
    251c:	d501      	bpl.n	2522 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
    251e:	251c      	movs	r5, #28
    2520:	e7f7      	b.n	2512 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2522:	2301      	movs	r3, #1
    2524:	4093      	lsls	r3, r2
    2526:	4a3a      	ldr	r2, [pc, #232]	; (2610 <usart_init+0x11c>)
    2528:	6a11      	ldr	r1, [r2, #32]
    252a:	430b      	orrs	r3, r1
    252c:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    252e:	252d      	movs	r5, #45	; 0x2d
    2530:	5d7b      	ldrb	r3, [r7, r5]
    2532:	a907      	add	r1, sp, #28
    2534:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2536:	b2c3      	uxtb	r3, r0
    2538:	9301      	str	r3, [sp, #4]
    253a:	0018      	movs	r0, r3
    253c:	4b35      	ldr	r3, [pc, #212]	; (2614 <usart_init+0x120>)
    253e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2540:	9801      	ldr	r0, [sp, #4]
    2542:	4b35      	ldr	r3, [pc, #212]	; (2618 <usart_init+0x124>)
    2544:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2546:	5d78      	ldrb	r0, [r7, r5]
    2548:	2100      	movs	r1, #0
    254a:	4b34      	ldr	r3, [pc, #208]	; (261c <usart_init+0x128>)
    254c:	4798      	blx	r3
	module->character_size = config->character_size;
    254e:	7afb      	ldrb	r3, [r7, #11]
    2550:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    2552:	2324      	movs	r3, #36	; 0x24
    2554:	5cfb      	ldrb	r3, [r7, r3]
    2556:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2558:	2325      	movs	r3, #37	; 0x25
    255a:	5cfb      	ldrb	r3, [r7, r3]
    255c:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    255e:	7efb      	ldrb	r3, [r7, #27]
    2560:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2562:	7f3b      	ldrb	r3, [r7, #28]
    2564:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    2566:	0039      	movs	r1, r7
    2568:	0030      	movs	r0, r6
    256a:	4b2d      	ldr	r3, [pc, #180]	; (2620 <usart_init+0x12c>)
    256c:	4798      	blx	r3
    256e:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    2570:	d1cf      	bne.n	2512 <usart_init+0x1e>
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2572:	ab06      	add	r3, sp, #24
    2574:	2280      	movs	r2, #128	; 0x80
    2576:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2578:	2200      	movs	r2, #0
    257a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    257c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    257e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2582:	9302      	str	r3, [sp, #8]
    2584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2586:	9303      	str	r3, [sp, #12]
    2588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    258a:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    258c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    258e:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    2590:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    2592:	2700      	movs	r7, #0
    2594:	e006      	b.n	25a4 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2596:	0039      	movs	r1, r7
    2598:	0020      	movs	r0, r4
    259a:	4b22      	ldr	r3, [pc, #136]	; (2624 <usart_init+0x130>)
    259c:	4798      	blx	r3
    259e:	e008      	b.n	25b2 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    25a0:	3701      	adds	r7, #1
    25a2:	b2ff      	uxtb	r7, r7
    25a4:	2f03      	cmp	r7, #3
    25a6:	d80d      	bhi.n	25c4 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    25a8:	00bb      	lsls	r3, r7, #2
    25aa:	aa02      	add	r2, sp, #8
    25ac:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    25ae:	2800      	cmp	r0, #0
    25b0:	d0f1      	beq.n	2596 <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    25b2:	1c43      	adds	r3, r0, #1
    25b4:	d0f4      	beq.n	25a0 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    25b6:	a906      	add	r1, sp, #24
    25b8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    25ba:	0c00      	lsrs	r0, r0, #16
    25bc:	b2c0      	uxtb	r0, r0
    25be:	4b1a      	ldr	r3, [pc, #104]	; (2628 <usart_init+0x134>)
    25c0:	4798      	blx	r3
    25c2:	e7ed      	b.n	25a0 <usart_init+0xac>
    25c4:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    25c6:	2a05      	cmp	r2, #5
    25c8:	d806      	bhi.n	25d8 <usart_init+0xe4>
		module->callback[i]            = NULL;
    25ca:	1c93      	adds	r3, r2, #2
    25cc:	009b      	lsls	r3, r3, #2
    25ce:	18f3      	adds	r3, r6, r3
    25d0:	2100      	movs	r1, #0
    25d2:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    25d4:	3201      	adds	r2, #1
    25d6:	e7f6      	b.n	25c6 <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    25d8:	2200      	movs	r2, #0
    25da:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    25dc:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    25de:	2300      	movs	r3, #0
    25e0:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    25e2:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    25e4:	3230      	adds	r2, #48	; 0x30
    25e6:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    25e8:	3201      	adds	r2, #1
    25ea:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    25ec:	3201      	adds	r2, #1
    25ee:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    25f0:	3201      	adds	r2, #1
    25f2:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    25f4:	6830      	ldr	r0, [r6, #0]
    25f6:	4b05      	ldr	r3, [pc, #20]	; (260c <usart_init+0x118>)
    25f8:	4798      	blx	r3
    25fa:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    25fc:	490b      	ldr	r1, [pc, #44]	; (262c <usart_init+0x138>)
    25fe:	4b0c      	ldr	r3, [pc, #48]	; (2630 <usart_init+0x13c>)
    2600:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2602:	00a4      	lsls	r4, r4, #2
    2604:	4b0b      	ldr	r3, [pc, #44]	; (2634 <usart_init+0x140>)
    2606:	50e6      	str	r6, [r4, r3]
	return status_code;
    2608:	e783      	b.n	2512 <usart_init+0x1e>
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	00000975 	.word	0x00000975
    2610:	40000400 	.word	0x40000400
    2614:	00002f35 	.word	0x00002f35
    2618:	00002ead 	.word	0x00002ead
    261c:	000007b1 	.word	0x000007b1
    2620:	00002325 	.word	0x00002325
    2624:	000007fd 	.word	0x000007fd
    2628:	0000306d 	.word	0x0000306d
    262c:	000026d5 	.word	0x000026d5
    2630:	00002879 	.word	0x00002879
    2634:	200009c8 	.word	0x200009c8

00002638 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    263a:	0004      	movs	r4, r0
    263c:	000d      	movs	r5, r1
    263e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2640:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2642:	4b10      	ldr	r3, [pc, #64]	; (2684 <_usart_read_buffer+0x4c>)
    2644:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2646:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2648:	b29b      	uxth	r3, r3
    264a:	2b00      	cmp	r3, #0
    264c:	d003      	beq.n	2656 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    264e:	4b0e      	ldr	r3, [pc, #56]	; (2688 <_usart_read_buffer+0x50>)
    2650:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2652:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2656:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2658:	4b0b      	ldr	r3, [pc, #44]	; (2688 <_usart_read_buffer+0x50>)
    265a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    265c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    265e:	2205      	movs	r2, #5
    2660:	2332      	movs	r3, #50	; 0x32
    2662:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2664:	3b2e      	subs	r3, #46	; 0x2e
    2666:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2668:	7a23      	ldrb	r3, [r4, #8]
    266a:	2b00      	cmp	r3, #0
    266c:	d001      	beq.n	2672 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    266e:	2320      	movs	r3, #32
    2670:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2672:	7a63      	ldrb	r3, [r4, #9]
    2674:	2b00      	cmp	r3, #0
    2676:	d003      	beq.n	2680 <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2678:	2308      	movs	r3, #8
    267a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    267c:	2000      	movs	r0, #0
    267e:	e7e9      	b.n	2654 <_usart_read_buffer+0x1c>
    2680:	2000      	movs	r0, #0
    2682:	e7e7      	b.n	2654 <_usart_read_buffer+0x1c>
    2684:	00002965 	.word	0x00002965
    2688:	000029a5 	.word	0x000029a5

0000268c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    268c:	1c93      	adds	r3, r2, #2
    268e:	009b      	lsls	r3, r3, #2
    2690:	18c3      	adds	r3, r0, r3
    2692:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2694:	2301      	movs	r3, #1
    2696:	4093      	lsls	r3, r2
    2698:	001a      	movs	r2, r3
    269a:	2130      	movs	r1, #48	; 0x30
    269c:	5c43      	ldrb	r3, [r0, r1]
    269e:	4313      	orrs	r3, r2
    26a0:	5443      	strb	r3, [r0, r1]
}
    26a2:	4770      	bx	lr

000026a4 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    26a4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    26a6:	2201      	movs	r2, #1
    26a8:	4b01      	ldr	r3, [pc, #4]	; (26b0 <usart_read_job+0xc>)
    26aa:	4798      	blx	r3
}
    26ac:	bd10      	pop	{r4, pc}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	00002639 	.word	0x00002639

000026b4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    26b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    26b6:	2a00      	cmp	r2, #0
    26b8:	d101      	bne.n	26be <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    26ba:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    26bc:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    26be:	7983      	ldrb	r3, [r0, #6]
    26c0:	2b00      	cmp	r3, #0
    26c2:	d101      	bne.n	26c8 <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    26c4:	201c      	movs	r0, #28
    26c6:	e7f9      	b.n	26bc <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    26c8:	4b01      	ldr	r3, [pc, #4]	; (26d0 <usart_read_buffer_job+0x1c>)
    26ca:	4798      	blx	r3
    26cc:	e7f6      	b.n	26bc <usart_read_buffer_job+0x8>
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	00002639 	.word	0x00002639

000026d4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    26d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d6:	46c6      	mov	lr, r8
    26d8:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    26da:	0080      	lsls	r0, r0, #2
    26dc:	4b64      	ldr	r3, [pc, #400]	; (2870 <_usart_interrupt_handler+0x19c>)
    26de:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    26e0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    26e2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    26e4:	2b00      	cmp	r3, #0
    26e6:	d1fc      	bne.n	26e2 <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    26e8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    26ea:	7da6      	ldrb	r6, [r4, #22]
    26ec:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    26ee:	2330      	movs	r3, #48	; 0x30
    26f0:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    26f2:	2231      	movs	r2, #49	; 0x31
    26f4:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    26f6:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    26f8:	07f3      	lsls	r3, r6, #31
    26fa:	d525      	bpl.n	2748 <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    26fc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    26fe:	b29b      	uxth	r3, r3
    2700:	2b00      	cmp	r3, #0
    2702:	d01f      	beq.n	2744 <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2704:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    2706:	780a      	ldrb	r2, [r1, #0]
    2708:	b2d2      	uxtb	r2, r2
    270a:	b293      	uxth	r3, r2
    270c:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    270e:	1c48      	adds	r0, r1, #1
    2710:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2712:	796b      	ldrb	r3, [r5, #5]
    2714:	2b01      	cmp	r3, #1
    2716:	d00e      	beq.n	2736 <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2718:	4643      	mov	r3, r8
    271a:	05db      	lsls	r3, r3, #23
    271c:	0ddb      	lsrs	r3, r3, #23
    271e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2720:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2722:	3b01      	subs	r3, #1
    2724:	b29b      	uxth	r3, r3
    2726:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2728:	2b00      	cmp	r3, #0
    272a:	d10d      	bne.n	2748 <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    272c:	3301      	adds	r3, #1
    272e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2730:	3301      	adds	r3, #1
    2732:	75a3      	strb	r3, [r4, #22]
    2734:	e008      	b.n	2748 <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2736:	784b      	ldrb	r3, [r1, #1]
    2738:	021b      	lsls	r3, r3, #8
    273a:	4313      	orrs	r3, r2
    273c:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    273e:	1c88      	adds	r0, r1, #2
    2740:	62a8      	str	r0, [r5, #40]	; 0x28
    2742:	e7e9      	b.n	2718 <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2744:	2301      	movs	r3, #1
    2746:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2748:	07b3      	lsls	r3, r6, #30
    274a:	d506      	bpl.n	275a <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    274c:	2302      	movs	r3, #2
    274e:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2750:	2200      	movs	r2, #0
    2752:	3331      	adds	r3, #49	; 0x31
    2754:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2756:	07fb      	lsls	r3, r7, #31
    2758:	d41c      	bmi.n	2794 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    275a:	0773      	lsls	r3, r6, #29
    275c:	d564      	bpl.n	2828 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    275e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2760:	b29b      	uxth	r3, r3
    2762:	2b00      	cmp	r3, #0
    2764:	d05e      	beq.n	2824 <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2766:	8b62      	ldrh	r2, [r4, #26]
    2768:	b2d2      	uxtb	r2, r2
    276a:	233f      	movs	r3, #63	; 0x3f
    276c:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    276e:	0711      	lsls	r1, r2, #28
    2770:	d501      	bpl.n	2776 <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2772:	2337      	movs	r3, #55	; 0x37
    2774:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2776:	2b00      	cmp	r3, #0
    2778:	d031      	beq.n	27de <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    277a:	079a      	lsls	r2, r3, #30
    277c:	d50e      	bpl.n	279c <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    277e:	221a      	movs	r2, #26
    2780:	2332      	movs	r3, #50	; 0x32
    2782:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2784:	3b30      	subs	r3, #48	; 0x30
    2786:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2788:	077b      	lsls	r3, r7, #29
    278a:	d54d      	bpl.n	2828 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    278c:	0028      	movs	r0, r5
    278e:	696b      	ldr	r3, [r5, #20]
    2790:	4798      	blx	r3
    2792:	e049      	b.n	2828 <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2794:	0028      	movs	r0, r5
    2796:	68eb      	ldr	r3, [r5, #12]
    2798:	4798      	blx	r3
    279a:	e7de      	b.n	275a <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    279c:	075a      	lsls	r2, r3, #29
    279e:	d505      	bpl.n	27ac <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    27a0:	221e      	movs	r2, #30
    27a2:	2332      	movs	r3, #50	; 0x32
    27a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    27a6:	3b2e      	subs	r3, #46	; 0x2e
    27a8:	8363      	strh	r3, [r4, #26]
    27aa:	e7ed      	b.n	2788 <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    27ac:	07da      	lsls	r2, r3, #31
    27ae:	d505      	bpl.n	27bc <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    27b0:	2213      	movs	r2, #19
    27b2:	2332      	movs	r3, #50	; 0x32
    27b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    27b6:	3b31      	subs	r3, #49	; 0x31
    27b8:	8363      	strh	r3, [r4, #26]
    27ba:	e7e5      	b.n	2788 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    27bc:	06da      	lsls	r2, r3, #27
    27be:	d505      	bpl.n	27cc <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    27c0:	2242      	movs	r2, #66	; 0x42
    27c2:	2332      	movs	r3, #50	; 0x32
    27c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    27c6:	3b22      	subs	r3, #34	; 0x22
    27c8:	8363      	strh	r3, [r4, #26]
    27ca:	e7dd      	b.n	2788 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    27cc:	2220      	movs	r2, #32
    27ce:	421a      	tst	r2, r3
    27d0:	d0da      	beq.n	2788 <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    27d2:	3221      	adds	r2, #33	; 0x21
    27d4:	2332      	movs	r3, #50	; 0x32
    27d6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    27d8:	3b12      	subs	r3, #18
    27da:	8363      	strh	r3, [r4, #26]
    27dc:	e7d4      	b.n	2788 <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    27de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    27e0:	05db      	lsls	r3, r3, #23
    27e2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    27e4:	b2da      	uxtb	r2, r3
    27e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    27e8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    27ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    27ec:	1c51      	adds	r1, r2, #1
    27ee:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    27f0:	7969      	ldrb	r1, [r5, #5]
    27f2:	2901      	cmp	r1, #1
    27f4:	d010      	beq.n	2818 <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    27f6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    27f8:	3b01      	subs	r3, #1
    27fa:	b29b      	uxth	r3, r3
    27fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    27fe:	2b00      	cmp	r3, #0
    2800:	d112      	bne.n	2828 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2802:	3304      	adds	r3, #4
    2804:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2806:	2200      	movs	r2, #0
    2808:	332e      	adds	r3, #46	; 0x2e
    280a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    280c:	07bb      	lsls	r3, r7, #30
    280e:	d50b      	bpl.n	2828 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2810:	0028      	movs	r0, r5
    2812:	692b      	ldr	r3, [r5, #16]
    2814:	4798      	blx	r3
    2816:	e007      	b.n	2828 <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2818:	0a1b      	lsrs	r3, r3, #8
    281a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    281c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    281e:	3301      	adds	r3, #1
    2820:	626b      	str	r3, [r5, #36]	; 0x24
    2822:	e7e8      	b.n	27f6 <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2824:	2304      	movs	r3, #4
    2826:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2828:	06f3      	lsls	r3, r6, #27
    282a:	d504      	bpl.n	2836 <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    282c:	2310      	movs	r3, #16
    282e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2830:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2832:	06fb      	lsls	r3, r7, #27
    2834:	d410      	bmi.n	2858 <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2836:	06b3      	lsls	r3, r6, #26
    2838:	d504      	bpl.n	2844 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    283a:	2320      	movs	r3, #32
    283c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    283e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2840:	073b      	lsls	r3, r7, #28
    2842:	d40d      	bmi.n	2860 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2844:	0733      	lsls	r3, r6, #28
    2846:	d504      	bpl.n	2852 <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2848:	2308      	movs	r3, #8
    284a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    284c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    284e:	06bb      	lsls	r3, r7, #26
    2850:	d40a      	bmi.n	2868 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2852:	bc04      	pop	{r2}
    2854:	4690      	mov	r8, r2
    2856:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2858:	0028      	movs	r0, r5
    285a:	69eb      	ldr	r3, [r5, #28]
    285c:	4798      	blx	r3
    285e:	e7ea      	b.n	2836 <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2860:	0028      	movs	r0, r5
    2862:	69ab      	ldr	r3, [r5, #24]
    2864:	4798      	blx	r3
    2866:	e7ed      	b.n	2844 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2868:	6a2b      	ldr	r3, [r5, #32]
    286a:	0028      	movs	r0, r5
    286c:	4798      	blx	r3
}
    286e:	e7f0      	b.n	2852 <_usart_interrupt_handler+0x17e>
    2870:	200009c8 	.word	0x200009c8

00002874 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2874:	4770      	bx	lr
	...

00002878 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2878:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    287a:	4b0b      	ldr	r3, [pc, #44]	; (28a8 <_sercom_set_handler+0x30>)
    287c:	781b      	ldrb	r3, [r3, #0]
    287e:	2b00      	cmp	r3, #0
    2880:	d008      	beq.n	2894 <_sercom_set_handler+0x1c>
    2882:	e00c      	b.n	289e <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2884:	009a      	lsls	r2, r3, #2
    2886:	4d09      	ldr	r5, [pc, #36]	; (28ac <_sercom_set_handler+0x34>)
    2888:	4c09      	ldr	r4, [pc, #36]	; (28b0 <_sercom_set_handler+0x38>)
    288a:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    288c:	2500      	movs	r5, #0
    288e:	4c09      	ldr	r4, [pc, #36]	; (28b4 <_sercom_set_handler+0x3c>)
    2890:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2892:	3301      	adds	r3, #1
    2894:	2b05      	cmp	r3, #5
    2896:	d9f5      	bls.n	2884 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    2898:	2201      	movs	r2, #1
    289a:	4b03      	ldr	r3, [pc, #12]	; (28a8 <_sercom_set_handler+0x30>)
    289c:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    289e:	0080      	lsls	r0, r0, #2
    28a0:	4b03      	ldr	r3, [pc, #12]	; (28b0 <_sercom_set_handler+0x38>)
    28a2:	50c1      	str	r1, [r0, r3]
}
    28a4:	bd30      	pop	{r4, r5, pc}
    28a6:	46c0      	nop			; (mov r8, r8)
    28a8:	20000371 	.word	0x20000371
    28ac:	00002875 	.word	0x00002875
    28b0:	20000374 	.word	0x20000374
    28b4:	200009c8 	.word	0x200009c8

000028b8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    28b8:	b500      	push	{lr}
    28ba:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    28bc:	4b05      	ldr	r3, [pc, #20]	; (28d4 <_sercom_get_interrupt_vector+0x1c>)
    28be:	681a      	ldr	r2, [r3, #0]
    28c0:	9200      	str	r2, [sp, #0]
    28c2:	889b      	ldrh	r3, [r3, #4]
    28c4:	466a      	mov	r2, sp
    28c6:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    28c8:	4b03      	ldr	r3, [pc, #12]	; (28d8 <_sercom_get_interrupt_vector+0x20>)
    28ca:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    28cc:	466b      	mov	r3, sp
    28ce:	5618      	ldrsb	r0, [r3, r0]
}
    28d0:	b003      	add	sp, #12
    28d2:	bd00      	pop	{pc}
    28d4:	00003678 	.word	0x00003678
    28d8:	00000975 	.word	0x00000975

000028dc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    28dc:	b510      	push	{r4, lr}
    28de:	4b02      	ldr	r3, [pc, #8]	; (28e8 <SERCOM0_Handler+0xc>)
    28e0:	681b      	ldr	r3, [r3, #0]
    28e2:	2000      	movs	r0, #0
    28e4:	4798      	blx	r3
    28e6:	bd10      	pop	{r4, pc}
    28e8:	20000374 	.word	0x20000374

000028ec <SERCOM1_Handler>:
    28ec:	b510      	push	{r4, lr}
    28ee:	4b02      	ldr	r3, [pc, #8]	; (28f8 <SERCOM1_Handler+0xc>)
    28f0:	685b      	ldr	r3, [r3, #4]
    28f2:	2001      	movs	r0, #1
    28f4:	4798      	blx	r3
    28f6:	bd10      	pop	{r4, pc}
    28f8:	20000374 	.word	0x20000374

000028fc <SERCOM2_Handler>:
    28fc:	b510      	push	{r4, lr}
    28fe:	4b02      	ldr	r3, [pc, #8]	; (2908 <SERCOM2_Handler+0xc>)
    2900:	689b      	ldr	r3, [r3, #8]
    2902:	2002      	movs	r0, #2
    2904:	4798      	blx	r3
    2906:	bd10      	pop	{r4, pc}
    2908:	20000374 	.word	0x20000374

0000290c <SERCOM3_Handler>:
    290c:	b510      	push	{r4, lr}
    290e:	4b02      	ldr	r3, [pc, #8]	; (2918 <SERCOM3_Handler+0xc>)
    2910:	68db      	ldr	r3, [r3, #12]
    2912:	2003      	movs	r0, #3
    2914:	4798      	blx	r3
    2916:	bd10      	pop	{r4, pc}
    2918:	20000374 	.word	0x20000374

0000291c <SERCOM4_Handler>:
    291c:	b510      	push	{r4, lr}
    291e:	4b02      	ldr	r3, [pc, #8]	; (2928 <SERCOM4_Handler+0xc>)
    2920:	691b      	ldr	r3, [r3, #16]
    2922:	2004      	movs	r0, #4
    2924:	4798      	blx	r3
    2926:	bd10      	pop	{r4, pc}
    2928:	20000374 	.word	0x20000374

0000292c <SERCOM5_Handler>:
    292c:	b510      	push	{r4, lr}
    292e:	4b02      	ldr	r3, [pc, #8]	; (2938 <SERCOM5_Handler+0xc>)
    2930:	695b      	ldr	r3, [r3, #20]
    2932:	2005      	movs	r0, #5
    2934:	4798      	blx	r3
    2936:	bd10      	pop	{r4, pc}
    2938:	20000374 	.word	0x20000374

0000293c <port_pin_set_config>:
    293c:	b500      	push	{lr}
    293e:	b083      	sub	sp, #12
    2940:	ab01      	add	r3, sp, #4
    2942:	2280      	movs	r2, #128	; 0x80
    2944:	701a      	strb	r2, [r3, #0]
    2946:	780a      	ldrb	r2, [r1, #0]
    2948:	705a      	strb	r2, [r3, #1]
    294a:	784a      	ldrb	r2, [r1, #1]
    294c:	709a      	strb	r2, [r3, #2]
    294e:	788a      	ldrb	r2, [r1, #2]
    2950:	70da      	strb	r2, [r3, #3]
    2952:	0019      	movs	r1, r3
    2954:	4b01      	ldr	r3, [pc, #4]	; (295c <port_pin_set_config+0x20>)
    2956:	4798      	blx	r3
    2958:	b003      	add	sp, #12
    295a:	bd00      	pop	{pc}
    295c:	0000306d 	.word	0x0000306d

00002960 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2960:	4770      	bx	lr
	...

00002964 <cpu_irq_enter_critical>:
    2964:	4b0c      	ldr	r3, [pc, #48]	; (2998 <cpu_irq_enter_critical+0x34>)
    2966:	681b      	ldr	r3, [r3, #0]
    2968:	2b00      	cmp	r3, #0
    296a:	d106      	bne.n	297a <cpu_irq_enter_critical+0x16>
    296c:	f3ef 8310 	mrs	r3, PRIMASK
    2970:	2b00      	cmp	r3, #0
    2972:	d007      	beq.n	2984 <cpu_irq_enter_critical+0x20>
    2974:	2200      	movs	r2, #0
    2976:	4b09      	ldr	r3, [pc, #36]	; (299c <cpu_irq_enter_critical+0x38>)
    2978:	701a      	strb	r2, [r3, #0]
    297a:	4a07      	ldr	r2, [pc, #28]	; (2998 <cpu_irq_enter_critical+0x34>)
    297c:	6813      	ldr	r3, [r2, #0]
    297e:	3301      	adds	r3, #1
    2980:	6013      	str	r3, [r2, #0]
    2982:	4770      	bx	lr
    2984:	b672      	cpsid	i
    2986:	f3bf 8f5f 	dmb	sy
    298a:	2200      	movs	r2, #0
    298c:	4b04      	ldr	r3, [pc, #16]	; (29a0 <cpu_irq_enter_critical+0x3c>)
    298e:	701a      	strb	r2, [r3, #0]
    2990:	3201      	adds	r2, #1
    2992:	4b02      	ldr	r3, [pc, #8]	; (299c <cpu_irq_enter_critical+0x38>)
    2994:	701a      	strb	r2, [r3, #0]
    2996:	e7f0      	b.n	297a <cpu_irq_enter_critical+0x16>
    2998:	2000038c 	.word	0x2000038c
    299c:	20000390 	.word	0x20000390
    29a0:	20000009 	.word	0x20000009

000029a4 <cpu_irq_leave_critical>:
    29a4:	4b08      	ldr	r3, [pc, #32]	; (29c8 <cpu_irq_leave_critical+0x24>)
    29a6:	681a      	ldr	r2, [r3, #0]
    29a8:	3a01      	subs	r2, #1
    29aa:	601a      	str	r2, [r3, #0]
    29ac:	681b      	ldr	r3, [r3, #0]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d109      	bne.n	29c6 <cpu_irq_leave_critical+0x22>
    29b2:	4b06      	ldr	r3, [pc, #24]	; (29cc <cpu_irq_leave_critical+0x28>)
    29b4:	781b      	ldrb	r3, [r3, #0]
    29b6:	2b00      	cmp	r3, #0
    29b8:	d005      	beq.n	29c6 <cpu_irq_leave_critical+0x22>
    29ba:	2201      	movs	r2, #1
    29bc:	4b04      	ldr	r3, [pc, #16]	; (29d0 <cpu_irq_leave_critical+0x2c>)
    29be:	701a      	strb	r2, [r3, #0]
    29c0:	f3bf 8f5f 	dmb	sy
    29c4:	b662      	cpsie	i
    29c6:	4770      	bx	lr
    29c8:	2000038c 	.word	0x2000038c
    29cc:	20000390 	.word	0x20000390
    29d0:	20000009 	.word	0x20000009

000029d4 <_switch_peripheral_gclk>:
    29d4:	b510      	push	{r4, lr}
    29d6:	b082      	sub	sp, #8
    29d8:	2201      	movs	r2, #1
    29da:	ab01      	add	r3, sp, #4
    29dc:	701a      	strb	r2, [r3, #0]
    29de:	2400      	movs	r4, #0
    29e0:	e004      	b.n	29ec <_switch_peripheral_gclk+0x18>
    29e2:	b2e0      	uxtb	r0, r4
    29e4:	a901      	add	r1, sp, #4
    29e6:	4b03      	ldr	r3, [pc, #12]	; (29f4 <_switch_peripheral_gclk+0x20>)
    29e8:	4798      	blx	r3
    29ea:	3401      	adds	r4, #1
    29ec:	2c24      	cmp	r4, #36	; 0x24
    29ee:	d9f8      	bls.n	29e2 <_switch_peripheral_gclk+0xe>
    29f0:	b002      	add	sp, #8
    29f2:	bd10      	pop	{r4, pc}
    29f4:	00002f35 	.word	0x00002f35

000029f8 <system_clock_source_get_hz>:
    29f8:	b510      	push	{r4, lr}
    29fa:	2808      	cmp	r0, #8
    29fc:	d834      	bhi.n	2a68 <system_clock_source_get_hz+0x70>
    29fe:	0080      	lsls	r0, r0, #2
    2a00:	4b1c      	ldr	r3, [pc, #112]	; (2a74 <system_clock_source_get_hz+0x7c>)
    2a02:	581b      	ldr	r3, [r3, r0]
    2a04:	469f      	mov	pc, r3
    2a06:	2080      	movs	r0, #128	; 0x80
    2a08:	0200      	lsls	r0, r0, #8
    2a0a:	bd10      	pop	{r4, pc}
    2a0c:	4b1a      	ldr	r3, [pc, #104]	; (2a78 <system_clock_source_get_hz+0x80>)
    2a0e:	6918      	ldr	r0, [r3, #16]
    2a10:	e7fb      	b.n	2a0a <system_clock_source_get_hz+0x12>
    2a12:	4b1a      	ldr	r3, [pc, #104]	; (2a7c <system_clock_source_get_hz+0x84>)
    2a14:	6a1b      	ldr	r3, [r3, #32]
    2a16:	059b      	lsls	r3, r3, #22
    2a18:	0f9b      	lsrs	r3, r3, #30
    2a1a:	4819      	ldr	r0, [pc, #100]	; (2a80 <system_clock_source_get_hz+0x88>)
    2a1c:	40d8      	lsrs	r0, r3
    2a1e:	e7f4      	b.n	2a0a <system_clock_source_get_hz+0x12>
    2a20:	4b15      	ldr	r3, [pc, #84]	; (2a78 <system_clock_source_get_hz+0x80>)
    2a22:	6958      	ldr	r0, [r3, #20]
    2a24:	e7f1      	b.n	2a0a <system_clock_source_get_hz+0x12>
    2a26:	4b14      	ldr	r3, [pc, #80]	; (2a78 <system_clock_source_get_hz+0x80>)
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	079b      	lsls	r3, r3, #30
    2a2c:	d51e      	bpl.n	2a6c <system_clock_source_get_hz+0x74>
    2a2e:	4b13      	ldr	r3, [pc, #76]	; (2a7c <system_clock_source_get_hz+0x84>)
    2a30:	68db      	ldr	r3, [r3, #12]
    2a32:	06db      	lsls	r3, r3, #27
    2a34:	d5fb      	bpl.n	2a2e <system_clock_source_get_hz+0x36>
    2a36:	4b10      	ldr	r3, [pc, #64]	; (2a78 <system_clock_source_get_hz+0x80>)
    2a38:	681a      	ldr	r2, [r3, #0]
    2a3a:	2324      	movs	r3, #36	; 0x24
    2a3c:	4013      	ands	r3, r2
    2a3e:	2b04      	cmp	r3, #4
    2a40:	d001      	beq.n	2a46 <system_clock_source_get_hz+0x4e>
    2a42:	4810      	ldr	r0, [pc, #64]	; (2a84 <system_clock_source_get_hz+0x8c>)
    2a44:	e7e1      	b.n	2a0a <system_clock_source_get_hz+0x12>
    2a46:	2000      	movs	r0, #0
    2a48:	4b0f      	ldr	r3, [pc, #60]	; (2a88 <system_clock_source_get_hz+0x90>)
    2a4a:	4798      	blx	r3
    2a4c:	4b0a      	ldr	r3, [pc, #40]	; (2a78 <system_clock_source_get_hz+0x80>)
    2a4e:	689b      	ldr	r3, [r3, #8]
    2a50:	041b      	lsls	r3, r3, #16
    2a52:	0c1b      	lsrs	r3, r3, #16
    2a54:	4358      	muls	r0, r3
    2a56:	e7d8      	b.n	2a0a <system_clock_source_get_hz+0x12>
    2a58:	2350      	movs	r3, #80	; 0x50
    2a5a:	4a08      	ldr	r2, [pc, #32]	; (2a7c <system_clock_source_get_hz+0x84>)
    2a5c:	5cd3      	ldrb	r3, [r2, r3]
    2a5e:	075b      	lsls	r3, r3, #29
    2a60:	d506      	bpl.n	2a70 <system_clock_source_get_hz+0x78>
    2a62:	4b05      	ldr	r3, [pc, #20]	; (2a78 <system_clock_source_get_hz+0x80>)
    2a64:	68d8      	ldr	r0, [r3, #12]
    2a66:	e7d0      	b.n	2a0a <system_clock_source_get_hz+0x12>
    2a68:	2000      	movs	r0, #0
    2a6a:	e7ce      	b.n	2a0a <system_clock_source_get_hz+0x12>
    2a6c:	2000      	movs	r0, #0
    2a6e:	e7cc      	b.n	2a0a <system_clock_source_get_hz+0x12>
    2a70:	2000      	movs	r0, #0
    2a72:	e7ca      	b.n	2a0a <system_clock_source_get_hz+0x12>
    2a74:	00003680 	.word	0x00003680
    2a78:	20000394 	.word	0x20000394
    2a7c:	40000800 	.word	0x40000800
    2a80:	007a1200 	.word	0x007a1200
    2a84:	02dc6c00 	.word	0x02dc6c00
    2a88:	00002f51 	.word	0x00002f51

00002a8c <system_clock_source_osc8m_set_config>:
    2a8c:	b570      	push	{r4, r5, r6, lr}
    2a8e:	4d0c      	ldr	r5, [pc, #48]	; (2ac0 <system_clock_source_osc8m_set_config+0x34>)
    2a90:	6a2e      	ldr	r6, [r5, #32]
    2a92:	7802      	ldrb	r2, [r0, #0]
    2a94:	2103      	movs	r1, #3
    2a96:	400a      	ands	r2, r1
    2a98:	0212      	lsls	r2, r2, #8
    2a9a:	490a      	ldr	r1, [pc, #40]	; (2ac4 <system_clock_source_osc8m_set_config+0x38>)
    2a9c:	4031      	ands	r1, r6
    2a9e:	4311      	orrs	r1, r2
    2aa0:	7882      	ldrb	r2, [r0, #2]
    2aa2:	2401      	movs	r4, #1
    2aa4:	4022      	ands	r2, r4
    2aa6:	01d2      	lsls	r2, r2, #7
    2aa8:	2380      	movs	r3, #128	; 0x80
    2aaa:	4399      	bics	r1, r3
    2aac:	430a      	orrs	r2, r1
    2aae:	7843      	ldrb	r3, [r0, #1]
    2ab0:	4023      	ands	r3, r4
    2ab2:	019b      	lsls	r3, r3, #6
    2ab4:	2140      	movs	r1, #64	; 0x40
    2ab6:	438a      	bics	r2, r1
    2ab8:	4313      	orrs	r3, r2
    2aba:	622b      	str	r3, [r5, #32]
    2abc:	bd70      	pop	{r4, r5, r6, pc}
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	40000800 	.word	0x40000800
    2ac4:	fffffcff 	.word	0xfffffcff

00002ac8 <system_clock_source_osc32k_set_config>:
    2ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aca:	4f15      	ldr	r7, [pc, #84]	; (2b20 <system_clock_source_osc32k_set_config+0x58>)
    2acc:	69be      	ldr	r6, [r7, #24]
    2ace:	7842      	ldrb	r2, [r0, #1]
    2ad0:	2301      	movs	r3, #1
    2ad2:	401a      	ands	r2, r3
    2ad4:	00d2      	lsls	r2, r2, #3
    2ad6:	2108      	movs	r1, #8
    2ad8:	438e      	bics	r6, r1
    2ada:	4332      	orrs	r2, r6
    2adc:	7885      	ldrb	r5, [r0, #2]
    2ade:	401d      	ands	r5, r3
    2ae0:	00ad      	lsls	r5, r5, #2
    2ae2:	3904      	subs	r1, #4
    2ae4:	438a      	bics	r2, r1
    2ae6:	4315      	orrs	r5, r2
    2ae8:	7801      	ldrb	r1, [r0, #0]
    2aea:	2407      	movs	r4, #7
    2aec:	400c      	ands	r4, r1
    2aee:	0224      	lsls	r4, r4, #8
    2af0:	490c      	ldr	r1, [pc, #48]	; (2b24 <system_clock_source_osc32k_set_config+0x5c>)
    2af2:	400d      	ands	r5, r1
    2af4:	432c      	orrs	r4, r5
    2af6:	7901      	ldrb	r1, [r0, #4]
    2af8:	4019      	ands	r1, r3
    2afa:	01c9      	lsls	r1, r1, #7
    2afc:	2280      	movs	r2, #128	; 0x80
    2afe:	4394      	bics	r4, r2
    2b00:	4321      	orrs	r1, r4
    2b02:	78c2      	ldrb	r2, [r0, #3]
    2b04:	401a      	ands	r2, r3
    2b06:	0192      	lsls	r2, r2, #6
    2b08:	2440      	movs	r4, #64	; 0x40
    2b0a:	43a1      	bics	r1, r4
    2b0c:	430a      	orrs	r2, r1
    2b0e:	7941      	ldrb	r1, [r0, #5]
    2b10:	400b      	ands	r3, r1
    2b12:	031b      	lsls	r3, r3, #12
    2b14:	4904      	ldr	r1, [pc, #16]	; (2b28 <system_clock_source_osc32k_set_config+0x60>)
    2b16:	400a      	ands	r2, r1
    2b18:	4313      	orrs	r3, r2
    2b1a:	61bb      	str	r3, [r7, #24]
    2b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	40000800 	.word	0x40000800
    2b24:	fffff8ff 	.word	0xfffff8ff
    2b28:	ffffefff 	.word	0xffffefff

00002b2c <system_clock_source_enable>:
    2b2c:	2808      	cmp	r0, #8
    2b2e:	d84a      	bhi.n	2bc6 <system_clock_source_enable+0x9a>
    2b30:	0080      	lsls	r0, r0, #2
    2b32:	4b26      	ldr	r3, [pc, #152]	; (2bcc <system_clock_source_enable+0xa0>)
    2b34:	581b      	ldr	r3, [r3, r0]
    2b36:	469f      	mov	pc, r3
    2b38:	2000      	movs	r0, #0
    2b3a:	4770      	bx	lr
    2b3c:	4a24      	ldr	r2, [pc, #144]	; (2bd0 <system_clock_source_enable+0xa4>)
    2b3e:	6a13      	ldr	r3, [r2, #32]
    2b40:	2102      	movs	r1, #2
    2b42:	430b      	orrs	r3, r1
    2b44:	6213      	str	r3, [r2, #32]
    2b46:	2000      	movs	r0, #0
    2b48:	e7f7      	b.n	2b3a <system_clock_source_enable+0xe>
    2b4a:	4a21      	ldr	r2, [pc, #132]	; (2bd0 <system_clock_source_enable+0xa4>)
    2b4c:	6993      	ldr	r3, [r2, #24]
    2b4e:	2102      	movs	r1, #2
    2b50:	430b      	orrs	r3, r1
    2b52:	6193      	str	r3, [r2, #24]
    2b54:	2000      	movs	r0, #0
    2b56:	e7f0      	b.n	2b3a <system_clock_source_enable+0xe>
    2b58:	4a1d      	ldr	r2, [pc, #116]	; (2bd0 <system_clock_source_enable+0xa4>)
    2b5a:	8a13      	ldrh	r3, [r2, #16]
    2b5c:	2102      	movs	r1, #2
    2b5e:	430b      	orrs	r3, r1
    2b60:	b29b      	uxth	r3, r3
    2b62:	8213      	strh	r3, [r2, #16]
    2b64:	2000      	movs	r0, #0
    2b66:	e7e8      	b.n	2b3a <system_clock_source_enable+0xe>
    2b68:	4a19      	ldr	r2, [pc, #100]	; (2bd0 <system_clock_source_enable+0xa4>)
    2b6a:	8a93      	ldrh	r3, [r2, #20]
    2b6c:	2102      	movs	r1, #2
    2b6e:	430b      	orrs	r3, r1
    2b70:	b29b      	uxth	r3, r3
    2b72:	8293      	strh	r3, [r2, #20]
    2b74:	2000      	movs	r0, #0
    2b76:	e7e0      	b.n	2b3a <system_clock_source_enable+0xe>
    2b78:	4916      	ldr	r1, [pc, #88]	; (2bd4 <system_clock_source_enable+0xa8>)
    2b7a:	680b      	ldr	r3, [r1, #0]
    2b7c:	2202      	movs	r2, #2
    2b7e:	4313      	orrs	r3, r2
    2b80:	600b      	str	r3, [r1, #0]
    2b82:	4b13      	ldr	r3, [pc, #76]	; (2bd0 <system_clock_source_enable+0xa4>)
    2b84:	849a      	strh	r2, [r3, #36]	; 0x24
    2b86:	4b12      	ldr	r3, [pc, #72]	; (2bd0 <system_clock_source_enable+0xa4>)
    2b88:	68db      	ldr	r3, [r3, #12]
    2b8a:	06db      	lsls	r3, r3, #27
    2b8c:	d5fb      	bpl.n	2b86 <system_clock_source_enable+0x5a>
    2b8e:	4a11      	ldr	r2, [pc, #68]	; (2bd4 <system_clock_source_enable+0xa8>)
    2b90:	6891      	ldr	r1, [r2, #8]
    2b92:	4b0f      	ldr	r3, [pc, #60]	; (2bd0 <system_clock_source_enable+0xa4>)
    2b94:	62d9      	str	r1, [r3, #44]	; 0x2c
    2b96:	6852      	ldr	r2, [r2, #4]
    2b98:	629a      	str	r2, [r3, #40]	; 0x28
    2b9a:	2200      	movs	r2, #0
    2b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    2b9e:	4b0c      	ldr	r3, [pc, #48]	; (2bd0 <system_clock_source_enable+0xa4>)
    2ba0:	68db      	ldr	r3, [r3, #12]
    2ba2:	06db      	lsls	r3, r3, #27
    2ba4:	d5fb      	bpl.n	2b9e <system_clock_source_enable+0x72>
    2ba6:	4b0b      	ldr	r3, [pc, #44]	; (2bd4 <system_clock_source_enable+0xa8>)
    2ba8:	681b      	ldr	r3, [r3, #0]
    2baa:	b29b      	uxth	r3, r3
    2bac:	4a08      	ldr	r2, [pc, #32]	; (2bd0 <system_clock_source_enable+0xa4>)
    2bae:	8493      	strh	r3, [r2, #36]	; 0x24
    2bb0:	2000      	movs	r0, #0
    2bb2:	e7c2      	b.n	2b3a <system_clock_source_enable+0xe>
    2bb4:	4906      	ldr	r1, [pc, #24]	; (2bd0 <system_clock_source_enable+0xa4>)
    2bb6:	2244      	movs	r2, #68	; 0x44
    2bb8:	5c8b      	ldrb	r3, [r1, r2]
    2bba:	2002      	movs	r0, #2
    2bbc:	4303      	orrs	r3, r0
    2bbe:	b2db      	uxtb	r3, r3
    2bc0:	548b      	strb	r3, [r1, r2]
    2bc2:	2000      	movs	r0, #0
    2bc4:	e7b9      	b.n	2b3a <system_clock_source_enable+0xe>
    2bc6:	2017      	movs	r0, #23
    2bc8:	e7b7      	b.n	2b3a <system_clock_source_enable+0xe>
    2bca:	46c0      	nop			; (mov r8, r8)
    2bcc:	000036a4 	.word	0x000036a4
    2bd0:	40000800 	.word	0x40000800
    2bd4:	20000394 	.word	0x20000394

00002bd8 <system_clock_init>:
    2bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bda:	b087      	sub	sp, #28
    2bdc:	4c29      	ldr	r4, [pc, #164]	; (2c84 <system_clock_init+0xac>)
    2bde:	23c2      	movs	r3, #194	; 0xc2
    2be0:	00db      	lsls	r3, r3, #3
    2be2:	60a3      	str	r3, [r4, #8]
    2be4:	4b28      	ldr	r3, [pc, #160]	; (2c88 <system_clock_init+0xb0>)
    2be6:	6859      	ldr	r1, [r3, #4]
    2be8:	221e      	movs	r2, #30
    2bea:	4391      	bics	r1, r2
    2bec:	6059      	str	r1, [r3, #4]
    2bee:	4b27      	ldr	r3, [pc, #156]	; (2c8c <system_clock_init+0xb4>)
    2bf0:	4798      	blx	r3
    2bf2:	4b27      	ldr	r3, [pc, #156]	; (2c90 <system_clock_init+0xb8>)
    2bf4:	6819      	ldr	r1, [r3, #0]
    2bf6:	0989      	lsrs	r1, r1, #6
    2bf8:	69a2      	ldr	r2, [r4, #24]
    2bfa:	237f      	movs	r3, #127	; 0x7f
    2bfc:	400b      	ands	r3, r1
    2bfe:	041b      	lsls	r3, r3, #16
    2c00:	4924      	ldr	r1, [pc, #144]	; (2c94 <system_clock_init+0xbc>)
    2c02:	400a      	ands	r2, r1
    2c04:	4313      	orrs	r3, r2
    2c06:	61a3      	str	r3, [r4, #24]
    2c08:	a804      	add	r0, sp, #16
    2c0a:	2501      	movs	r5, #1
    2c0c:	7045      	strb	r5, [r0, #1]
    2c0e:	7085      	strb	r5, [r0, #2]
    2c10:	2400      	movs	r4, #0
    2c12:	70c4      	strb	r4, [r0, #3]
    2c14:	7105      	strb	r5, [r0, #4]
    2c16:	2307      	movs	r3, #7
    2c18:	7003      	strb	r3, [r0, #0]
    2c1a:	7144      	strb	r4, [r0, #5]
    2c1c:	4b1e      	ldr	r3, [pc, #120]	; (2c98 <system_clock_init+0xc0>)
    2c1e:	4798      	blx	r3
    2c20:	2004      	movs	r0, #4
    2c22:	4e1e      	ldr	r6, [pc, #120]	; (2c9c <system_clock_init+0xc4>)
    2c24:	47b0      	blx	r6
    2c26:	a803      	add	r0, sp, #12
    2c28:	7044      	strb	r4, [r0, #1]
    2c2a:	7085      	strb	r5, [r0, #2]
    2c2c:	7004      	strb	r4, [r0, #0]
    2c2e:	4b1c      	ldr	r3, [pc, #112]	; (2ca0 <system_clock_init+0xc8>)
    2c30:	4798      	blx	r3
    2c32:	2006      	movs	r0, #6
    2c34:	47b0      	blx	r6
    2c36:	4b1b      	ldr	r3, [pc, #108]	; (2ca4 <system_clock_init+0xcc>)
    2c38:	4798      	blx	r3
    2c3a:	466b      	mov	r3, sp
    2c3c:	705c      	strb	r4, [r3, #1]
    2c3e:	721c      	strb	r4, [r3, #8]
    2c40:	725c      	strb	r4, [r3, #9]
    2c42:	2304      	movs	r3, #4
    2c44:	466a      	mov	r2, sp
    2c46:	7013      	strb	r3, [r2, #0]
    2c48:	331c      	adds	r3, #28
    2c4a:	9301      	str	r3, [sp, #4]
    2c4c:	4669      	mov	r1, sp
    2c4e:	2002      	movs	r0, #2
    2c50:	4f15      	ldr	r7, [pc, #84]	; (2ca8 <system_clock_init+0xd0>)
    2c52:	47b8      	blx	r7
    2c54:	2002      	movs	r0, #2
    2c56:	4e15      	ldr	r6, [pc, #84]	; (2cac <system_clock_init+0xd4>)
    2c58:	47b0      	blx	r6
    2c5a:	4b15      	ldr	r3, [pc, #84]	; (2cb0 <system_clock_init+0xd8>)
    2c5c:	721c      	strb	r4, [r3, #8]
    2c5e:	725c      	strb	r4, [r3, #9]
    2c60:	729c      	strb	r4, [r3, #10]
    2c62:	72dc      	strb	r4, [r3, #11]
    2c64:	9501      	str	r5, [sp, #4]
    2c66:	466b      	mov	r3, sp
    2c68:	705c      	strb	r4, [r3, #1]
    2c6a:	2306      	movs	r3, #6
    2c6c:	466a      	mov	r2, sp
    2c6e:	7013      	strb	r3, [r2, #0]
    2c70:	7214      	strb	r4, [r2, #8]
    2c72:	7254      	strb	r4, [r2, #9]
    2c74:	4669      	mov	r1, sp
    2c76:	2000      	movs	r0, #0
    2c78:	47b8      	blx	r7
    2c7a:	2000      	movs	r0, #0
    2c7c:	47b0      	blx	r6
    2c7e:	b007      	add	sp, #28
    2c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	40000800 	.word	0x40000800
    2c88:	41004000 	.word	0x41004000
    2c8c:	000029d5 	.word	0x000029d5
    2c90:	00806024 	.word	0x00806024
    2c94:	ff80ffff 	.word	0xff80ffff
    2c98:	00002ac9 	.word	0x00002ac9
    2c9c:	00002b2d 	.word	0x00002b2d
    2ca0:	00002a8d 	.word	0x00002a8d
    2ca4:	00002cb5 	.word	0x00002cb5
    2ca8:	00002cd9 	.word	0x00002cd9
    2cac:	00002da9 	.word	0x00002da9
    2cb0:	40000400 	.word	0x40000400

00002cb4 <system_gclk_init>:
    2cb4:	4a06      	ldr	r2, [pc, #24]	; (2cd0 <system_gclk_init+0x1c>)
    2cb6:	6993      	ldr	r3, [r2, #24]
    2cb8:	2108      	movs	r1, #8
    2cba:	430b      	orrs	r3, r1
    2cbc:	6193      	str	r3, [r2, #24]
    2cbe:	2201      	movs	r2, #1
    2cc0:	4b04      	ldr	r3, [pc, #16]	; (2cd4 <system_gclk_init+0x20>)
    2cc2:	701a      	strb	r2, [r3, #0]
    2cc4:	4b03      	ldr	r3, [pc, #12]	; (2cd4 <system_gclk_init+0x20>)
    2cc6:	781b      	ldrb	r3, [r3, #0]
    2cc8:	07db      	lsls	r3, r3, #31
    2cca:	d4fb      	bmi.n	2cc4 <system_gclk_init+0x10>
    2ccc:	4770      	bx	lr
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	40000400 	.word	0x40000400
    2cd4:	40000c00 	.word	0x40000c00

00002cd8 <system_gclk_gen_set_config>:
    2cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cda:	0006      	movs	r6, r0
    2cdc:	0005      	movs	r5, r0
    2cde:	780c      	ldrb	r4, [r1, #0]
    2ce0:	0224      	lsls	r4, r4, #8
    2ce2:	4304      	orrs	r4, r0
    2ce4:	784b      	ldrb	r3, [r1, #1]
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d002      	beq.n	2cf0 <system_gclk_gen_set_config+0x18>
    2cea:	2380      	movs	r3, #128	; 0x80
    2cec:	02db      	lsls	r3, r3, #11
    2cee:	431c      	orrs	r4, r3
    2cf0:	7a4b      	ldrb	r3, [r1, #9]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d002      	beq.n	2cfc <system_gclk_gen_set_config+0x24>
    2cf6:	2380      	movs	r3, #128	; 0x80
    2cf8:	031b      	lsls	r3, r3, #12
    2cfa:	431c      	orrs	r4, r3
    2cfc:	6848      	ldr	r0, [r1, #4]
    2cfe:	2801      	cmp	r0, #1
    2d00:	d912      	bls.n	2d28 <system_gclk_gen_set_config+0x50>
    2d02:	1e43      	subs	r3, r0, #1
    2d04:	4203      	tst	r3, r0
    2d06:	d03d      	beq.n	2d84 <system_gclk_gen_set_config+0xac>
    2d08:	0205      	lsls	r5, r0, #8
    2d0a:	4335      	orrs	r5, r6
    2d0c:	2380      	movs	r3, #128	; 0x80
    2d0e:	029b      	lsls	r3, r3, #10
    2d10:	431c      	orrs	r4, r3
    2d12:	e009      	b.n	2d28 <system_gclk_gen_set_config+0x50>
    2d14:	3201      	adds	r2, #1
    2d16:	005b      	lsls	r3, r3, #1
    2d18:	4283      	cmp	r3, r0
    2d1a:	d3fb      	bcc.n	2d14 <system_gclk_gen_set_config+0x3c>
    2d1c:	0212      	lsls	r2, r2, #8
    2d1e:	4332      	orrs	r2, r6
    2d20:	0015      	movs	r5, r2
    2d22:	2380      	movs	r3, #128	; 0x80
    2d24:	035b      	lsls	r3, r3, #13
    2d26:	431c      	orrs	r4, r3
    2d28:	7a0b      	ldrb	r3, [r1, #8]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d002      	beq.n	2d34 <system_gclk_gen_set_config+0x5c>
    2d2e:	2380      	movs	r3, #128	; 0x80
    2d30:	039b      	lsls	r3, r3, #14
    2d32:	431c      	orrs	r4, r3
    2d34:	4b18      	ldr	r3, [pc, #96]	; (2d98 <system_gclk_gen_set_config+0xc0>)
    2d36:	785b      	ldrb	r3, [r3, #1]
    2d38:	b25b      	sxtb	r3, r3
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	db25      	blt.n	2d8a <system_gclk_gen_set_config+0xb2>
    2d3e:	2700      	movs	r7, #0
    2d40:	2f00      	cmp	r7, #0
    2d42:	d1f7      	bne.n	2d34 <system_gclk_gen_set_config+0x5c>
    2d44:	4b15      	ldr	r3, [pc, #84]	; (2d9c <system_gclk_gen_set_config+0xc4>)
    2d46:	4798      	blx	r3
    2d48:	4b15      	ldr	r3, [pc, #84]	; (2da0 <system_gclk_gen_set_config+0xc8>)
    2d4a:	701e      	strb	r6, [r3, #0]
    2d4c:	4b12      	ldr	r3, [pc, #72]	; (2d98 <system_gclk_gen_set_config+0xc0>)
    2d4e:	785b      	ldrb	r3, [r3, #1]
    2d50:	b25b      	sxtb	r3, r3
    2d52:	2b00      	cmp	r3, #0
    2d54:	db1b      	blt.n	2d8e <system_gclk_gen_set_config+0xb6>
    2d56:	003a      	movs	r2, r7
    2d58:	2a00      	cmp	r2, #0
    2d5a:	d1f7      	bne.n	2d4c <system_gclk_gen_set_config+0x74>
    2d5c:	4b0e      	ldr	r3, [pc, #56]	; (2d98 <system_gclk_gen_set_config+0xc0>)
    2d5e:	609d      	str	r5, [r3, #8]
    2d60:	4b0d      	ldr	r3, [pc, #52]	; (2d98 <system_gclk_gen_set_config+0xc0>)
    2d62:	785b      	ldrb	r3, [r3, #1]
    2d64:	b25b      	sxtb	r3, r3
    2d66:	2b00      	cmp	r3, #0
    2d68:	db13      	blt.n	2d92 <system_gclk_gen_set_config+0xba>
    2d6a:	0013      	movs	r3, r2
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d1f7      	bne.n	2d60 <system_gclk_gen_set_config+0x88>
    2d70:	4a09      	ldr	r2, [pc, #36]	; (2d98 <system_gclk_gen_set_config+0xc0>)
    2d72:	6853      	ldr	r3, [r2, #4]
    2d74:	2180      	movs	r1, #128	; 0x80
    2d76:	0249      	lsls	r1, r1, #9
    2d78:	400b      	ands	r3, r1
    2d7a:	431c      	orrs	r4, r3
    2d7c:	6054      	str	r4, [r2, #4]
    2d7e:	4b09      	ldr	r3, [pc, #36]	; (2da4 <system_gclk_gen_set_config+0xcc>)
    2d80:	4798      	blx	r3
    2d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d84:	2302      	movs	r3, #2
    2d86:	2200      	movs	r2, #0
    2d88:	e7c6      	b.n	2d18 <system_gclk_gen_set_config+0x40>
    2d8a:	2701      	movs	r7, #1
    2d8c:	e7d8      	b.n	2d40 <system_gclk_gen_set_config+0x68>
    2d8e:	2201      	movs	r2, #1
    2d90:	e7e2      	b.n	2d58 <system_gclk_gen_set_config+0x80>
    2d92:	2301      	movs	r3, #1
    2d94:	e7ea      	b.n	2d6c <system_gclk_gen_set_config+0x94>
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	40000c00 	.word	0x40000c00
    2d9c:	00002965 	.word	0x00002965
    2da0:	40000c08 	.word	0x40000c08
    2da4:	000029a5 	.word	0x000029a5

00002da8 <system_gclk_gen_enable>:
    2da8:	b570      	push	{r4, r5, r6, lr}
    2daa:	0005      	movs	r5, r0
    2dac:	4b10      	ldr	r3, [pc, #64]	; (2df0 <system_gclk_gen_enable+0x48>)
    2dae:	785b      	ldrb	r3, [r3, #1]
    2db0:	b25b      	sxtb	r3, r3
    2db2:	2b00      	cmp	r3, #0
    2db4:	db17      	blt.n	2de6 <system_gclk_gen_enable+0x3e>
    2db6:	2400      	movs	r4, #0
    2db8:	2c00      	cmp	r4, #0
    2dba:	d1f7      	bne.n	2dac <system_gclk_gen_enable+0x4>
    2dbc:	4b0d      	ldr	r3, [pc, #52]	; (2df4 <system_gclk_gen_enable+0x4c>)
    2dbe:	4798      	blx	r3
    2dc0:	4b0d      	ldr	r3, [pc, #52]	; (2df8 <system_gclk_gen_enable+0x50>)
    2dc2:	701d      	strb	r5, [r3, #0]
    2dc4:	4b0a      	ldr	r3, [pc, #40]	; (2df0 <system_gclk_gen_enable+0x48>)
    2dc6:	785b      	ldrb	r3, [r3, #1]
    2dc8:	b25b      	sxtb	r3, r3
    2dca:	2b00      	cmp	r3, #0
    2dcc:	db0d      	blt.n	2dea <system_gclk_gen_enable+0x42>
    2dce:	0023      	movs	r3, r4
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	d1f7      	bne.n	2dc4 <system_gclk_gen_enable+0x1c>
    2dd4:	4a06      	ldr	r2, [pc, #24]	; (2df0 <system_gclk_gen_enable+0x48>)
    2dd6:	6851      	ldr	r1, [r2, #4]
    2dd8:	2380      	movs	r3, #128	; 0x80
    2dda:	025b      	lsls	r3, r3, #9
    2ddc:	430b      	orrs	r3, r1
    2dde:	6053      	str	r3, [r2, #4]
    2de0:	4b06      	ldr	r3, [pc, #24]	; (2dfc <system_gclk_gen_enable+0x54>)
    2de2:	4798      	blx	r3
    2de4:	bd70      	pop	{r4, r5, r6, pc}
    2de6:	2401      	movs	r4, #1
    2de8:	e7e6      	b.n	2db8 <system_gclk_gen_enable+0x10>
    2dea:	2301      	movs	r3, #1
    2dec:	e7f0      	b.n	2dd0 <system_gclk_gen_enable+0x28>
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	40000c00 	.word	0x40000c00
    2df4:	00002965 	.word	0x00002965
    2df8:	40000c04 	.word	0x40000c04
    2dfc:	000029a5 	.word	0x000029a5

00002e00 <system_gclk_gen_get_hz>:
    2e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e02:	0007      	movs	r7, r0
    2e04:	4b22      	ldr	r3, [pc, #136]	; (2e90 <system_gclk_gen_get_hz+0x90>)
    2e06:	785b      	ldrb	r3, [r3, #1]
    2e08:	b25b      	sxtb	r3, r3
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	db34      	blt.n	2e78 <system_gclk_gen_get_hz+0x78>
    2e0e:	2500      	movs	r5, #0
    2e10:	2d00      	cmp	r5, #0
    2e12:	d1f7      	bne.n	2e04 <system_gclk_gen_get_hz+0x4>
    2e14:	4b1f      	ldr	r3, [pc, #124]	; (2e94 <system_gclk_gen_get_hz+0x94>)
    2e16:	4798      	blx	r3
    2e18:	4b1f      	ldr	r3, [pc, #124]	; (2e98 <system_gclk_gen_get_hz+0x98>)
    2e1a:	701f      	strb	r7, [r3, #0]
    2e1c:	4b1c      	ldr	r3, [pc, #112]	; (2e90 <system_gclk_gen_get_hz+0x90>)
    2e1e:	785b      	ldrb	r3, [r3, #1]
    2e20:	b25b      	sxtb	r3, r3
    2e22:	2b00      	cmp	r3, #0
    2e24:	db2a      	blt.n	2e7c <system_gclk_gen_get_hz+0x7c>
    2e26:	002c      	movs	r4, r5
    2e28:	2c00      	cmp	r4, #0
    2e2a:	d1f7      	bne.n	2e1c <system_gclk_gen_get_hz+0x1c>
    2e2c:	4e18      	ldr	r6, [pc, #96]	; (2e90 <system_gclk_gen_get_hz+0x90>)
    2e2e:	6870      	ldr	r0, [r6, #4]
    2e30:	04c0      	lsls	r0, r0, #19
    2e32:	0ec0      	lsrs	r0, r0, #27
    2e34:	4b19      	ldr	r3, [pc, #100]	; (2e9c <system_gclk_gen_get_hz+0x9c>)
    2e36:	4798      	blx	r3
    2e38:	0005      	movs	r5, r0
    2e3a:	4b17      	ldr	r3, [pc, #92]	; (2e98 <system_gclk_gen_get_hz+0x98>)
    2e3c:	701f      	strb	r7, [r3, #0]
    2e3e:	6876      	ldr	r6, [r6, #4]
    2e40:	02f6      	lsls	r6, r6, #11
    2e42:	0ff6      	lsrs	r6, r6, #31
    2e44:	4b16      	ldr	r3, [pc, #88]	; (2ea0 <system_gclk_gen_get_hz+0xa0>)
    2e46:	701f      	strb	r7, [r3, #0]
    2e48:	4b11      	ldr	r3, [pc, #68]	; (2e90 <system_gclk_gen_get_hz+0x90>)
    2e4a:	785b      	ldrb	r3, [r3, #1]
    2e4c:	b25b      	sxtb	r3, r3
    2e4e:	2b00      	cmp	r3, #0
    2e50:	db16      	blt.n	2e80 <system_gclk_gen_get_hz+0x80>
    2e52:	0023      	movs	r3, r4
    2e54:	2b00      	cmp	r3, #0
    2e56:	d1f7      	bne.n	2e48 <system_gclk_gen_get_hz+0x48>
    2e58:	4b0d      	ldr	r3, [pc, #52]	; (2e90 <system_gclk_gen_get_hz+0x90>)
    2e5a:	689c      	ldr	r4, [r3, #8]
    2e5c:	0224      	lsls	r4, r4, #8
    2e5e:	0c24      	lsrs	r4, r4, #16
    2e60:	4b10      	ldr	r3, [pc, #64]	; (2ea4 <system_gclk_gen_get_hz+0xa4>)
    2e62:	4798      	blx	r3
    2e64:	2e00      	cmp	r6, #0
    2e66:	d10d      	bne.n	2e84 <system_gclk_gen_get_hz+0x84>
    2e68:	2c01      	cmp	r4, #1
    2e6a:	d90b      	bls.n	2e84 <system_gclk_gen_get_hz+0x84>
    2e6c:	0021      	movs	r1, r4
    2e6e:	0028      	movs	r0, r5
    2e70:	4b0d      	ldr	r3, [pc, #52]	; (2ea8 <system_gclk_gen_get_hz+0xa8>)
    2e72:	4798      	blx	r3
    2e74:	0005      	movs	r5, r0
    2e76:	e009      	b.n	2e8c <system_gclk_gen_get_hz+0x8c>
    2e78:	2501      	movs	r5, #1
    2e7a:	e7c9      	b.n	2e10 <system_gclk_gen_get_hz+0x10>
    2e7c:	2401      	movs	r4, #1
    2e7e:	e7d3      	b.n	2e28 <system_gclk_gen_get_hz+0x28>
    2e80:	2301      	movs	r3, #1
    2e82:	e7e7      	b.n	2e54 <system_gclk_gen_get_hz+0x54>
    2e84:	2e00      	cmp	r6, #0
    2e86:	d001      	beq.n	2e8c <system_gclk_gen_get_hz+0x8c>
    2e88:	3401      	adds	r4, #1
    2e8a:	40e5      	lsrs	r5, r4
    2e8c:	0028      	movs	r0, r5
    2e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e90:	40000c00 	.word	0x40000c00
    2e94:	00002965 	.word	0x00002965
    2e98:	40000c04 	.word	0x40000c04
    2e9c:	000029f9 	.word	0x000029f9
    2ea0:	40000c08 	.word	0x40000c08
    2ea4:	000029a5 	.word	0x000029a5
    2ea8:	00003489 	.word	0x00003489

00002eac <system_gclk_chan_enable>:
    2eac:	b510      	push	{r4, lr}
    2eae:	0004      	movs	r4, r0
    2eb0:	4b06      	ldr	r3, [pc, #24]	; (2ecc <system_gclk_chan_enable+0x20>)
    2eb2:	4798      	blx	r3
    2eb4:	4b06      	ldr	r3, [pc, #24]	; (2ed0 <system_gclk_chan_enable+0x24>)
    2eb6:	701c      	strb	r4, [r3, #0]
    2eb8:	4a06      	ldr	r2, [pc, #24]	; (2ed4 <system_gclk_chan_enable+0x28>)
    2eba:	8853      	ldrh	r3, [r2, #2]
    2ebc:	2180      	movs	r1, #128	; 0x80
    2ebe:	01c9      	lsls	r1, r1, #7
    2ec0:	430b      	orrs	r3, r1
    2ec2:	8053      	strh	r3, [r2, #2]
    2ec4:	4b04      	ldr	r3, [pc, #16]	; (2ed8 <system_gclk_chan_enable+0x2c>)
    2ec6:	4798      	blx	r3
    2ec8:	bd10      	pop	{r4, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	00002965 	.word	0x00002965
    2ed0:	40000c02 	.word	0x40000c02
    2ed4:	40000c00 	.word	0x40000c00
    2ed8:	000029a5 	.word	0x000029a5

00002edc <system_gclk_chan_disable>:
    2edc:	b510      	push	{r4, lr}
    2ede:	0004      	movs	r4, r0
    2ee0:	4b0e      	ldr	r3, [pc, #56]	; (2f1c <system_gclk_chan_disable+0x40>)
    2ee2:	4798      	blx	r3
    2ee4:	4b0e      	ldr	r3, [pc, #56]	; (2f20 <system_gclk_chan_disable+0x44>)
    2ee6:	701c      	strb	r4, [r3, #0]
    2ee8:	490e      	ldr	r1, [pc, #56]	; (2f24 <system_gclk_chan_disable+0x48>)
    2eea:	884b      	ldrh	r3, [r1, #2]
    2eec:	051b      	lsls	r3, r3, #20
    2eee:	0f1a      	lsrs	r2, r3, #28
    2ef0:	884b      	ldrh	r3, [r1, #2]
    2ef2:	480d      	ldr	r0, [pc, #52]	; (2f28 <system_gclk_chan_disable+0x4c>)
    2ef4:	4003      	ands	r3, r0
    2ef6:	804b      	strh	r3, [r1, #2]
    2ef8:	884b      	ldrh	r3, [r1, #2]
    2efa:	480c      	ldr	r0, [pc, #48]	; (2f2c <system_gclk_chan_disable+0x50>)
    2efc:	4003      	ands	r3, r0
    2efe:	804b      	strh	r3, [r1, #2]
    2f00:	4b08      	ldr	r3, [pc, #32]	; (2f24 <system_gclk_chan_disable+0x48>)
    2f02:	885b      	ldrh	r3, [r3, #2]
    2f04:	045b      	lsls	r3, r3, #17
    2f06:	d4fb      	bmi.n	2f00 <system_gclk_chan_disable+0x24>
    2f08:	4806      	ldr	r0, [pc, #24]	; (2f24 <system_gclk_chan_disable+0x48>)
    2f0a:	8841      	ldrh	r1, [r0, #2]
    2f0c:	0213      	lsls	r3, r2, #8
    2f0e:	4a06      	ldr	r2, [pc, #24]	; (2f28 <system_gclk_chan_disable+0x4c>)
    2f10:	400a      	ands	r2, r1
    2f12:	4313      	orrs	r3, r2
    2f14:	8043      	strh	r3, [r0, #2]
    2f16:	4b06      	ldr	r3, [pc, #24]	; (2f30 <system_gclk_chan_disable+0x54>)
    2f18:	4798      	blx	r3
    2f1a:	bd10      	pop	{r4, pc}
    2f1c:	00002965 	.word	0x00002965
    2f20:	40000c02 	.word	0x40000c02
    2f24:	40000c00 	.word	0x40000c00
    2f28:	fffff0ff 	.word	0xfffff0ff
    2f2c:	ffffbfff 	.word	0xffffbfff
    2f30:	000029a5 	.word	0x000029a5

00002f34 <system_gclk_chan_set_config>:
    2f34:	b510      	push	{r4, lr}
    2f36:	780c      	ldrb	r4, [r1, #0]
    2f38:	0224      	lsls	r4, r4, #8
    2f3a:	4304      	orrs	r4, r0
    2f3c:	4b02      	ldr	r3, [pc, #8]	; (2f48 <system_gclk_chan_set_config+0x14>)
    2f3e:	4798      	blx	r3
    2f40:	b2a4      	uxth	r4, r4
    2f42:	4b02      	ldr	r3, [pc, #8]	; (2f4c <system_gclk_chan_set_config+0x18>)
    2f44:	805c      	strh	r4, [r3, #2]
    2f46:	bd10      	pop	{r4, pc}
    2f48:	00002edd 	.word	0x00002edd
    2f4c:	40000c00 	.word	0x40000c00

00002f50 <system_gclk_chan_get_hz>:
    2f50:	b510      	push	{r4, lr}
    2f52:	0004      	movs	r4, r0
    2f54:	4b06      	ldr	r3, [pc, #24]	; (2f70 <system_gclk_chan_get_hz+0x20>)
    2f56:	4798      	blx	r3
    2f58:	4b06      	ldr	r3, [pc, #24]	; (2f74 <system_gclk_chan_get_hz+0x24>)
    2f5a:	701c      	strb	r4, [r3, #0]
    2f5c:	4b06      	ldr	r3, [pc, #24]	; (2f78 <system_gclk_chan_get_hz+0x28>)
    2f5e:	885c      	ldrh	r4, [r3, #2]
    2f60:	0524      	lsls	r4, r4, #20
    2f62:	0f24      	lsrs	r4, r4, #28
    2f64:	4b05      	ldr	r3, [pc, #20]	; (2f7c <system_gclk_chan_get_hz+0x2c>)
    2f66:	4798      	blx	r3
    2f68:	0020      	movs	r0, r4
    2f6a:	4b05      	ldr	r3, [pc, #20]	; (2f80 <system_gclk_chan_get_hz+0x30>)
    2f6c:	4798      	blx	r3
    2f6e:	bd10      	pop	{r4, pc}
    2f70:	00002965 	.word	0x00002965
    2f74:	40000c02 	.word	0x40000c02
    2f78:	40000c00 	.word	0x40000c00
    2f7c:	000029a5 	.word	0x000029a5
    2f80:	00002e01 	.word	0x00002e01

00002f84 <system_interrupt_set_priority>:
    2f84:	b530      	push	{r4, r5, lr}
    2f86:	2800      	cmp	r0, #0
    2f88:	db19      	blt.n	2fbe <system_interrupt_set_priority+0x3a>
    2f8a:	17c3      	asrs	r3, r0, #31
    2f8c:	2403      	movs	r4, #3
    2f8e:	0022      	movs	r2, r4
    2f90:	401a      	ands	r2, r3
    2f92:	1812      	adds	r2, r2, r0
    2f94:	1092      	asrs	r2, r2, #2
    2f96:	b2d2      	uxtb	r2, r2
    2f98:	0f9b      	lsrs	r3, r3, #30
    2f9a:	18c0      	adds	r0, r0, r3
    2f9c:	4020      	ands	r0, r4
    2f9e:	1ac3      	subs	r3, r0, r3
    2fa0:	00db      	lsls	r3, r3, #3
    2fa2:	b2db      	uxtb	r3, r3
    2fa4:	3306      	adds	r3, #6
    2fa6:	b2db      	uxtb	r3, r3
    2fa8:	4d09      	ldr	r5, [pc, #36]	; (2fd0 <system_interrupt_set_priority+0x4c>)
    2faa:	32c0      	adds	r2, #192	; 0xc0
    2fac:	0092      	lsls	r2, r2, #2
    2fae:	5950      	ldr	r0, [r2, r5]
    2fb0:	409c      	lsls	r4, r3
    2fb2:	43a0      	bics	r0, r4
    2fb4:	4099      	lsls	r1, r3
    2fb6:	4301      	orrs	r1, r0
    2fb8:	5151      	str	r1, [r2, r5]
    2fba:	2000      	movs	r0, #0
    2fbc:	bd30      	pop	{r4, r5, pc}
    2fbe:	1c43      	adds	r3, r0, #1
    2fc0:	d001      	beq.n	2fc6 <system_interrupt_set_priority+0x42>
    2fc2:	2017      	movs	r0, #23
    2fc4:	e7fa      	b.n	2fbc <system_interrupt_set_priority+0x38>
    2fc6:	0789      	lsls	r1, r1, #30
    2fc8:	4b02      	ldr	r3, [pc, #8]	; (2fd4 <system_interrupt_set_priority+0x50>)
    2fca:	6219      	str	r1, [r3, #32]
    2fcc:	2000      	movs	r0, #0
    2fce:	e7f5      	b.n	2fbc <system_interrupt_set_priority+0x38>
    2fd0:	e000e100 	.word	0xe000e100
    2fd4:	e000ed00 	.word	0xe000ed00

00002fd8 <_system_pinmux_config>:
    2fd8:	b570      	push	{r4, r5, r6, lr}
    2fda:	78d3      	ldrb	r3, [r2, #3]
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d120      	bne.n	3022 <_system_pinmux_config+0x4a>
    2fe0:	7815      	ldrb	r5, [r2, #0]
    2fe2:	2d80      	cmp	r5, #128	; 0x80
    2fe4:	d01b      	beq.n	301e <_system_pinmux_config+0x46>
    2fe6:	062d      	lsls	r5, r5, #24
    2fe8:	2380      	movs	r3, #128	; 0x80
    2fea:	025b      	lsls	r3, r3, #9
    2fec:	431d      	orrs	r5, r3
    2fee:	7853      	ldrb	r3, [r2, #1]
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d001      	beq.n	2ff8 <_system_pinmux_config+0x20>
    2ff4:	2b02      	cmp	r3, #2
    2ff6:	d10a      	bne.n	300e <_system_pinmux_config+0x36>
    2ff8:	2380      	movs	r3, #128	; 0x80
    2ffa:	029b      	lsls	r3, r3, #10
    2ffc:	432b      	orrs	r3, r5
    2ffe:	7894      	ldrb	r4, [r2, #2]
    3000:	2c00      	cmp	r4, #0
    3002:	d002      	beq.n	300a <_system_pinmux_config+0x32>
    3004:	23c0      	movs	r3, #192	; 0xc0
    3006:	02db      	lsls	r3, r3, #11
    3008:	432b      	orrs	r3, r5
    300a:	6041      	str	r1, [r0, #4]
    300c:	001d      	movs	r5, r3
    300e:	7853      	ldrb	r3, [r2, #1]
    3010:	3b01      	subs	r3, #1
    3012:	b2db      	uxtb	r3, r3
    3014:	2b01      	cmp	r3, #1
    3016:	d806      	bhi.n	3026 <_system_pinmux_config+0x4e>
    3018:	4b13      	ldr	r3, [pc, #76]	; (3068 <_system_pinmux_config+0x90>)
    301a:	401d      	ands	r5, r3
    301c:	e003      	b.n	3026 <_system_pinmux_config+0x4e>
    301e:	2500      	movs	r5, #0
    3020:	e7e5      	b.n	2fee <_system_pinmux_config+0x16>
    3022:	6041      	str	r1, [r0, #4]
    3024:	2500      	movs	r5, #0
    3026:	040c      	lsls	r4, r1, #16
    3028:	0c24      	lsrs	r4, r4, #16
    302a:	0c0b      	lsrs	r3, r1, #16
    302c:	432c      	orrs	r4, r5
    302e:	26a0      	movs	r6, #160	; 0xa0
    3030:	05f6      	lsls	r6, r6, #23
    3032:	4334      	orrs	r4, r6
    3034:	6284      	str	r4, [r0, #40]	; 0x28
    3036:	432b      	orrs	r3, r5
    3038:	24d0      	movs	r4, #208	; 0xd0
    303a:	0624      	lsls	r4, r4, #24
    303c:	4323      	orrs	r3, r4
    303e:	6283      	str	r3, [r0, #40]	; 0x28
    3040:	78d3      	ldrb	r3, [r2, #3]
    3042:	2b00      	cmp	r3, #0
    3044:	d10a      	bne.n	305c <_system_pinmux_config+0x84>
    3046:	036b      	lsls	r3, r5, #13
    3048:	d503      	bpl.n	3052 <_system_pinmux_config+0x7a>
    304a:	7893      	ldrb	r3, [r2, #2]
    304c:	2b01      	cmp	r3, #1
    304e:	d006      	beq.n	305e <_system_pinmux_config+0x86>
    3050:	6141      	str	r1, [r0, #20]
    3052:	7853      	ldrb	r3, [r2, #1]
    3054:	3b01      	subs	r3, #1
    3056:	b2db      	uxtb	r3, r3
    3058:	2b01      	cmp	r3, #1
    305a:	d902      	bls.n	3062 <_system_pinmux_config+0x8a>
    305c:	bd70      	pop	{r4, r5, r6, pc}
    305e:	6181      	str	r1, [r0, #24]
    3060:	e7f7      	b.n	3052 <_system_pinmux_config+0x7a>
    3062:	6081      	str	r1, [r0, #8]
    3064:	e7fa      	b.n	305c <_system_pinmux_config+0x84>
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	fffbffff 	.word	0xfffbffff

0000306c <system_pinmux_pin_set_config>:
    306c:	b510      	push	{r4, lr}
    306e:	000a      	movs	r2, r1
    3070:	09c1      	lsrs	r1, r0, #7
    3072:	0943      	lsrs	r3, r0, #5
    3074:	2900      	cmp	r1, #0
    3076:	d10b      	bne.n	3090 <system_pinmux_pin_set_config+0x24>
    3078:	01db      	lsls	r3, r3, #7
    307a:	4906      	ldr	r1, [pc, #24]	; (3094 <system_pinmux_pin_set_config+0x28>)
    307c:	468c      	mov	ip, r1
    307e:	4463      	add	r3, ip
    3080:	241f      	movs	r4, #31
    3082:	4020      	ands	r0, r4
    3084:	2101      	movs	r1, #1
    3086:	4081      	lsls	r1, r0
    3088:	0018      	movs	r0, r3
    308a:	4b03      	ldr	r3, [pc, #12]	; (3098 <system_pinmux_pin_set_config+0x2c>)
    308c:	4798      	blx	r3
    308e:	bd10      	pop	{r4, pc}
    3090:	2300      	movs	r3, #0
    3092:	e7f5      	b.n	3080 <system_pinmux_pin_set_config+0x14>
    3094:	41004400 	.word	0x41004400
    3098:	00002fd9 	.word	0x00002fd9

0000309c <_system_dummy_init>:
    309c:	4770      	bx	lr
	...

000030a0 <system_init>:
    30a0:	b510      	push	{r4, lr}
    30a2:	4b05      	ldr	r3, [pc, #20]	; (30b8 <system_init+0x18>)
    30a4:	4798      	blx	r3
    30a6:	4b05      	ldr	r3, [pc, #20]	; (30bc <system_init+0x1c>)
    30a8:	4798      	blx	r3
    30aa:	4b05      	ldr	r3, [pc, #20]	; (30c0 <system_init+0x20>)
    30ac:	4798      	blx	r3
    30ae:	4b05      	ldr	r3, [pc, #20]	; (30c4 <system_init+0x24>)
    30b0:	4798      	blx	r3
    30b2:	4b05      	ldr	r3, [pc, #20]	; (30c8 <system_init+0x28>)
    30b4:	4798      	blx	r3
    30b6:	bd10      	pop	{r4, pc}
    30b8:	00002bd9 	.word	0x00002bd9
    30bc:	00002961 	.word	0x00002961
    30c0:	0000309d 	.word	0x0000309d
    30c4:	0000032d 	.word	0x0000032d
    30c8:	0000309d 	.word	0x0000309d

000030cc <Dummy_Handler>:
    30cc:	e7fe      	b.n	30cc <Dummy_Handler>
	...

000030d0 <Reset_Handler>:
    30d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30d2:	4a23      	ldr	r2, [pc, #140]	; (3160 <Reset_Handler+0x90>)
    30d4:	4b23      	ldr	r3, [pc, #140]	; (3164 <Reset_Handler+0x94>)
    30d6:	429a      	cmp	r2, r3
    30d8:	d009      	beq.n	30ee <Reset_Handler+0x1e>
    30da:	4b22      	ldr	r3, [pc, #136]	; (3164 <Reset_Handler+0x94>)
    30dc:	4a20      	ldr	r2, [pc, #128]	; (3160 <Reset_Handler+0x90>)
    30de:	e003      	b.n	30e8 <Reset_Handler+0x18>
    30e0:	6811      	ldr	r1, [r2, #0]
    30e2:	6019      	str	r1, [r3, #0]
    30e4:	3304      	adds	r3, #4
    30e6:	3204      	adds	r2, #4
    30e8:	491f      	ldr	r1, [pc, #124]	; (3168 <Reset_Handler+0x98>)
    30ea:	428b      	cmp	r3, r1
    30ec:	d3f8      	bcc.n	30e0 <Reset_Handler+0x10>
    30ee:	4b1f      	ldr	r3, [pc, #124]	; (316c <Reset_Handler+0x9c>)
    30f0:	e002      	b.n	30f8 <Reset_Handler+0x28>
    30f2:	2200      	movs	r2, #0
    30f4:	601a      	str	r2, [r3, #0]
    30f6:	3304      	adds	r3, #4
    30f8:	4a1d      	ldr	r2, [pc, #116]	; (3170 <Reset_Handler+0xa0>)
    30fa:	4293      	cmp	r3, r2
    30fc:	d3f9      	bcc.n	30f2 <Reset_Handler+0x22>
    30fe:	4a1d      	ldr	r2, [pc, #116]	; (3174 <Reset_Handler+0xa4>)
    3100:	21ff      	movs	r1, #255	; 0xff
    3102:	4b1d      	ldr	r3, [pc, #116]	; (3178 <Reset_Handler+0xa8>)
    3104:	438b      	bics	r3, r1
    3106:	6093      	str	r3, [r2, #8]
    3108:	39fd      	subs	r1, #253	; 0xfd
    310a:	2390      	movs	r3, #144	; 0x90
    310c:	005b      	lsls	r3, r3, #1
    310e:	4a1b      	ldr	r2, [pc, #108]	; (317c <Reset_Handler+0xac>)
    3110:	50d1      	str	r1, [r2, r3]
    3112:	4a1b      	ldr	r2, [pc, #108]	; (3180 <Reset_Handler+0xb0>)
    3114:	78d3      	ldrb	r3, [r2, #3]
    3116:	2503      	movs	r5, #3
    3118:	43ab      	bics	r3, r5
    311a:	2402      	movs	r4, #2
    311c:	4323      	orrs	r3, r4
    311e:	70d3      	strb	r3, [r2, #3]
    3120:	78d3      	ldrb	r3, [r2, #3]
    3122:	270c      	movs	r7, #12
    3124:	43bb      	bics	r3, r7
    3126:	2608      	movs	r6, #8
    3128:	4333      	orrs	r3, r6
    312a:	70d3      	strb	r3, [r2, #3]
    312c:	4b15      	ldr	r3, [pc, #84]	; (3184 <Reset_Handler+0xb4>)
    312e:	7b98      	ldrb	r0, [r3, #14]
    3130:	2230      	movs	r2, #48	; 0x30
    3132:	4390      	bics	r0, r2
    3134:	2220      	movs	r2, #32
    3136:	4310      	orrs	r0, r2
    3138:	7398      	strb	r0, [r3, #14]
    313a:	7b99      	ldrb	r1, [r3, #14]
    313c:	43b9      	bics	r1, r7
    313e:	4331      	orrs	r1, r6
    3140:	7399      	strb	r1, [r3, #14]
    3142:	7b9a      	ldrb	r2, [r3, #14]
    3144:	43aa      	bics	r2, r5
    3146:	4322      	orrs	r2, r4
    3148:	739a      	strb	r2, [r3, #14]
    314a:	4a0f      	ldr	r2, [pc, #60]	; (3188 <Reset_Handler+0xb8>)
    314c:	6851      	ldr	r1, [r2, #4]
    314e:	2380      	movs	r3, #128	; 0x80
    3150:	430b      	orrs	r3, r1
    3152:	6053      	str	r3, [r2, #4]
    3154:	4b0d      	ldr	r3, [pc, #52]	; (318c <Reset_Handler+0xbc>)
    3156:	4798      	blx	r3
    3158:	4b0d      	ldr	r3, [pc, #52]	; (3190 <Reset_Handler+0xc0>)
    315a:	4798      	blx	r3
    315c:	e7fe      	b.n	315c <Reset_Handler+0x8c>
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	000036e8 	.word	0x000036e8
    3164:	20000000 	.word	0x20000000
    3168:	20000010 	.word	0x20000010
    316c:	20000010 	.word	0x20000010
    3170:	200009f8 	.word	0x200009f8
    3174:	e000ed00 	.word	0xe000ed00
    3178:	00000000 	.word	0x00000000
    317c:	41007000 	.word	0x41007000
    3180:	41005000 	.word	0x41005000
    3184:	41004800 	.word	0x41004800
    3188:	41004000 	.word	0x41004000
    318c:	000035f5 	.word	0x000035f5
    3190:	000032c5 	.word	0x000032c5

00003194 <clock_osc8m_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes the 8 MHz oscillator to be used as the
	*  system clock source.
	*/
void clock_osc8m_init(void){
    3194:	b500      	push	{lr}
    3196:	b083      	sub	sp, #12
	//create system clock config struct
	struct system_clock_source_osc8m_config osc8_config;

	//config the 8 MHz oscillator
	//divide by 1 = 8 MHz clock
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    3198:	a801      	add	r0, sp, #4
    319a:	2300      	movs	r3, #0
    319c:	7003      	strb	r3, [r0, #0]
	//run on demand
	osc8_config.on_demand = true;
    319e:	2201      	movs	r2, #1
    31a0:	7082      	strb	r2, [r0, #2]
	//don't run in standby
	osc8_config.run_in_standby = false;
    31a2:	7043      	strb	r3, [r0, #1]
	    
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    31a4:	4b01      	ldr	r3, [pc, #4]	; (31ac <clock_osc8m_init+0x18>)
    31a6:	4798      	blx	r3
}//end clock_osc8m_init
    31a8:	b003      	add	sp, #12
    31aa:	bd00      	pop	{pc}
    31ac:	00002a8d 	.word	0x00002a8d

000031b0 <clock_gclk0_init>:
	* Parameters       : void
	* Return Values(s) : void
	* Description      : Initializes GCLK0, so it can be used by 
	*  peripherals. Uses the 8 MHz oscillator as its source.
	*/
void clock_gclk0_init(void){
    31b0:	b500      	push	{lr}
    31b2:	b085      	sub	sp, #20
	//create GLCK0 config struct (for driving peripherals)
	struct system_gclk_gen_config gclk0_config;

	//init MCLK
	system_gclk_init();
    31b4:	4b0a      	ldr	r3, [pc, #40]	; (31e0 <clock_gclk0_init+0x30>)
    31b6:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    31b8:	2300      	movs	r3, #0
    31ba:	4a0a      	ldr	r2, [pc, #40]	; (31e4 <clock_gclk0_init+0x34>)
    31bc:	7213      	strb	r3, [r2, #8]
	    
	//set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	    
	//use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    31be:	a901      	add	r1, sp, #4
    31c0:	2206      	movs	r2, #6
    31c2:	700a      	strb	r2, [r1, #0]
	//don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    31c4:	724b      	strb	r3, [r1, #9]
	//We're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    31c6:	704b      	strb	r3, [r1, #1]
	//division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    31c8:	3a05      	subs	r2, #5
    31ca:	604a      	str	r2, [r1, #4]
	//don't run in standby
	gclk0_config.run_in_standby = false;
    31cc:	720b      	strb	r3, [r1, #8]
	//set GCLK0's config
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    31ce:	2000      	movs	r0, #0
    31d0:	4b05      	ldr	r3, [pc, #20]	; (31e8 <clock_gclk0_init+0x38>)
    31d2:	4798      	blx	r3
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    31d4:	2000      	movs	r0, #0
    31d6:	4b05      	ldr	r3, [pc, #20]	; (31ec <clock_gclk0_init+0x3c>)
    31d8:	4798      	blx	r3
}//end clock_gclk0_init
    31da:	b005      	add	sp, #20
    31dc:	bd00      	pop	{pc}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	00002cb5 	.word	0x00002cb5
    31e4:	40000400 	.word	0x40000400
    31e8:	00002cd9 	.word	0x00002cd9
    31ec:	00002da9 	.word	0x00002da9

000031f0 <sys_clock_init>:
void sys_clock_init(void){
    31f0:	b510      	push	{r4, lr}
	clock_osc8m_init();
    31f2:	4b05      	ldr	r3, [pc, #20]	; (3208 <sys_clock_init+0x18>)
    31f4:	4798      	blx	r3
	clock_gclk0_init();
    31f6:	4b05      	ldr	r3, [pc, #20]	; (320c <sys_clock_init+0x1c>)
    31f8:	4798      	blx	r3
	clock_osc32k_init();
    31fa:	4b05      	ldr	r3, [pc, #20]	; (3210 <sys_clock_init+0x20>)
    31fc:	4798      	blx	r3
	clock_gclk2_init();
    31fe:	4b05      	ldr	r3, [pc, #20]	; (3214 <sys_clock_init+0x24>)
    3200:	4798      	blx	r3
	delay_init();
    3202:	4b05      	ldr	r3, [pc, #20]	; (3218 <sys_clock_init+0x28>)
    3204:	4798      	blx	r3
}//end sys_clock_init
    3206:	bd10      	pop	{r4, pc}
    3208:	00003195 	.word	0x00003195
    320c:	000031b1 	.word	0x000031b1
    3210:	00001cb5 	.word	0x00001cb5
    3214:	00001cdd 	.word	0x00001cdd
    3218:	00000115 	.word	0x00000115

0000321c <configure_port_pins>:
/* Function Name    : configure_port_pins
	* Parameters       : void
	* Return Values(s) : void
	* Description      : config select pins for lcd 
	*/
void configure_port_pins(void){
    321c:	b5f0      	push	{r4, r5, r6, r7, lr}
    321e:	46c6      	mov	lr, r8
    3220:	b500      	push	{lr}
    3222:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    3224:	ac01      	add	r4, sp, #4
    3226:	2501      	movs	r5, #1
    3228:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    322a:	2300      	movs	r3, #0
    322c:	4698      	mov	r8, r3
    322e:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);

	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3230:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PB16, &config_port_pin);
    3232:	0021      	movs	r1, r4
    3234:	2030      	movs	r0, #48	; 0x30
    3236:	4e0f      	ldr	r6, [pc, #60]	; (3274 <configure_port_pins+0x58>)
    3238:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    323a:	4f0f      	ldr	r7, [pc, #60]	; (3278 <configure_port_pins+0x5c>)
    323c:	2280      	movs	r2, #128	; 0x80
    323e:	0252      	lsls	r2, r2, #9
    3240:	4b0e      	ldr	r3, [pc, #56]	; (327c <configure_port_pins+0x60>)
    3242:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB16, 1);

	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3244:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PA19, &config_port_pin);
    3246:	0021      	movs	r1, r4
    3248:	2013      	movs	r0, #19
    324a:	47b0      	blx	r6
    324c:	2380      	movs	r3, #128	; 0x80
    324e:	031b      	lsls	r3, r3, #12
    3250:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(PIN_PA19, 1);

	// configure outputs
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3252:	7025      	strb	r5, [r4, #0]
	config_port_pin.input_pull = LCD_PD_PULL;
    3254:	4643      	mov	r3, r8
    3256:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(LCD_PD, &config_port_pin);
    3258:	0021      	movs	r1, r4
    325a:	2008      	movs	r0, #8
    325c:	47b0      	blx	r6
    325e:	2380      	movs	r3, #128	; 0x80
    3260:	005b      	lsls	r3, r3, #1
    3262:	61bb      	str	r3, [r7, #24]
	
	port_pin_set_output_level(LCD_PD, LCD_PD_DIS);
	
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3264:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(EEPROM_CS,&config_port_pin);
    3266:	0021      	movs	r1, r4
    3268:	200d      	movs	r0, #13
    326a:	47b0      	blx	r6
	port_pin_set_output_level(PIN_PB15, true);	
	
*/


}//end configure_port_pins
    326c:	b002      	add	sp, #8
    326e:	bc04      	pop	{r2}
    3270:	4690      	mov	r8, r2
    3272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3274:	0000293d 	.word	0x0000293d
    3278:	41004400 	.word	0x41004400
    327c:	41004480 	.word	0x41004480

00003280 <sim_system_init>:
void sim_system_init(void){
    3280:	b510      	push	{r4, lr}
	system_init();
    3282:	4b08      	ldr	r3, [pc, #32]	; (32a4 <sim_system_init+0x24>)
    3284:	4798      	blx	r3
	sys_clock_init();
    3286:	4b08      	ldr	r3, [pc, #32]	; (32a8 <sim_system_init+0x28>)
    3288:	4798      	blx	r3
	configure_port_pins();
    328a:	4b08      	ldr	r3, [pc, #32]	; (32ac <sim_system_init+0x2c>)
    328c:	4798      	blx	r3
	lcd_spi_init();
    328e:	4b08      	ldr	r3, [pc, #32]	; (32b0 <sim_system_init+0x30>)
    3290:	4798      	blx	r3
	configure_ext_ints();
    3292:	4b08      	ldr	r3, [pc, #32]	; (32b4 <sim_system_init+0x34>)
    3294:	4798      	blx	r3
	configure_ext_int_callback();
    3296:	4b08      	ldr	r3, [pc, #32]	; (32b8 <sim_system_init+0x38>)
    3298:	4798      	blx	r3
	spieeprom_init();
    329a:	4b08      	ldr	r3, [pc, #32]	; (32bc <sim_system_init+0x3c>)
    329c:	4798      	blx	r3
    uartfiber_init();
    329e:	4b08      	ldr	r3, [pc, #32]	; (32c0 <sim_system_init+0x40>)
    32a0:	4798      	blx	r3
}//end sim_system_init
    32a2:	bd10      	pop	{r4, pc}
    32a4:	000030a1 	.word	0x000030a1
    32a8:	000031f1 	.word	0x000031f1
    32ac:	0000321d 	.word	0x0000321d
    32b0:	00001d15 	.word	0x00001d15
    32b4:	00001bb1 	.word	0x00001bb1
    32b8:	00001bd9 	.word	0x00001bd9
    32bc:	0000151d 	.word	0x0000151d
    32c0:	000018a9 	.word	0x000018a9

000032c4 <main>:
int main(void){
    32c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32c6:	46c6      	mov	lr, r8
    32c8:	b500      	push	{lr}
    32ca:	b08a      	sub	sp, #40	; 0x28
	sim_system_init();
    32cc:	4b51      	ldr	r3, [pc, #324]	; (3414 <main+0x150>)
    32ce:	4798      	blx	r3
	cpu_irq_enable();
    32d0:	4d51      	ldr	r5, [pc, #324]	; (3418 <main+0x154>)
    32d2:	2601      	movs	r6, #1
    32d4:	702e      	strb	r6, [r5, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    32d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    32da:	b662      	cpsie	i
	configure_rtc_calendar();
    32dc:	4b4f      	ldr	r3, [pc, #316]	; (341c <main+0x158>)
    32de:	4798      	blx	r3
	phost = &host;
    32e0:	4c4f      	ldr	r4, [pc, #316]	; (3420 <main+0x15c>)
    32e2:	4850      	ldr	r0, [pc, #320]	; (3424 <main+0x160>)
    32e4:	6020      	str	r0, [r4, #0]
	Ft_Gpu_Hal_Open(phost);
    32e6:	4b50      	ldr	r3, [pc, #320]	; (3428 <main+0x164>)
    32e8:	4798      	blx	r3
	Ft_Gpu_Hal_Wr8(phost, REG_INT_EN, 1);
    32ea:	2201      	movs	r2, #1
    32ec:	494f      	ldr	r1, [pc, #316]	; (342c <main+0x168>)
    32ee:	6820      	ldr	r0, [r4, #0]
    32f0:	4f4f      	ldr	r7, [pc, #316]	; (3430 <main+0x16c>)
    32f2:	47b8      	blx	r7
	Ft_Gpu_Hal_Wr8(phost, REG_INT_MASK, 6);
    32f4:	6820      	ldr	r0, [r4, #0]
    32f6:	2206      	movs	r2, #6
    32f8:	494e      	ldr	r1, [pc, #312]	; (3434 <main+0x170>)
    32fa:	47b8      	blx	r7
	delay_ms(2000);
    32fc:	20fa      	movs	r0, #250	; 0xfa
    32fe:	00c0      	lsls	r0, r0, #3
    3300:	4b4d      	ldr	r3, [pc, #308]	; (3438 <main+0x174>)
    3302:	4798      	blx	r3
	cpu_irq_enable();
    3304:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3306:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    330a:	b662      	cpsie	i
	mstimer_init();
    330c:	4b4b      	ldr	r3, [pc, #300]	; (343c <main+0x178>)
    330e:	4798      	blx	r3
	rs485_baud_rate_set(38400);
    3310:	2096      	movs	r0, #150	; 0x96
    3312:	0200      	lsls	r0, r0, #8
    3314:	4b4a      	ldr	r3, [pc, #296]	; (3440 <main+0x17c>)
    3316:	4798      	blx	r3
	rs485_init();
    3318:	4b4a      	ldr	r3, [pc, #296]	; (3444 <main+0x180>)
    331a:	4798      	blx	r3
	mstimer_set(&Blink_Timer, 125);
    331c:	217d      	movs	r1, #125	; 0x7d
    331e:	484a      	ldr	r0, [pc, #296]	; (3448 <main+0x184>)
    3320:	4b4a      	ldr	r3, [pc, #296]	; (344c <main+0x188>)
    3322:	4798      	blx	r3
	current_fiber1_data.rssi_values.GHz24RSSI = 0x77;
    3324:	4b4a      	ldr	r3, [pc, #296]	; (3450 <main+0x18c>)
    3326:	2277      	movs	r2, #119	; 0x77
    3328:	72da      	strb	r2, [r3, #11]
	current_fiber1_data.rssi_values.MHz169RSSI = 0x42;
    332a:	3a35      	subs	r2, #53	; 0x35
    332c:	725a      	strb	r2, [r3, #9]
	current_fiber1_data.rssi_values.MHz27RSSI = 0x02;
    332e:	3a40      	subs	r2, #64	; 0x40
    3330:	721a      	strb	r2, [r3, #8]
	current_fiber1_data.rssi_values.MHz915RSSI = 0xFA;
    3332:	32f8      	adds	r2, #248	; 0xf8
    3334:	729a      	strb	r2, [r3, #10]
	oldTime.year = 1969;
    3336:	a908      	add	r1, sp, #32
    3338:	4b46      	ldr	r3, [pc, #280]	; (3454 <main+0x190>)
    333a:	80cb      	strh	r3, [r1, #6]
	midTime.year = 1969;
    333c:	a806      	add	r0, sp, #24
    333e:	80c3      	strh	r3, [r0, #6]
	midTime.month = 8;
    3340:	2308      	movs	r3, #8
    3342:	7143      	strb	r3, [r0, #5]
	futureTime.year = 2008;
    3344:	22fb      	movs	r2, #251	; 0xfb
    3346:	00d2      	lsls	r2, r2, #3
    3348:	ab04      	add	r3, sp, #16
    334a:	80da      	strh	r2, [r3, #6]
	if(is_timestamp_later(&midTime, &oldTime))
    334c:	4b42      	ldr	r3, [pc, #264]	; (3458 <main+0x194>)
    334e:	4798      	blx	r3
    3350:	2800      	cmp	r0, #0
    3352:	d135      	bne.n	33c0 <main+0xfc>
	if(is_timestamp_later(&futureTime, &midTime))
    3354:	a906      	add	r1, sp, #24
    3356:	a804      	add	r0, sp, #16
    3358:	4b3f      	ldr	r3, [pc, #252]	; (3458 <main+0x194>)
    335a:	4798      	blx	r3
    335c:	2800      	cmp	r0, #0
    335e:	d133      	bne.n	33c8 <main+0x104>
	if(is_timestamp_later(&oldTime, &futureTime))
    3360:	a904      	add	r1, sp, #16
    3362:	a808      	add	r0, sp, #32
    3364:	4b3c      	ldr	r3, [pc, #240]	; (3458 <main+0x194>)
    3366:	4798      	blx	r3
    3368:	2800      	cmp	r0, #0
    336a:	d131      	bne.n	33d0 <main+0x10c>
	eeprom_write_data(&current_fiber1_data);
    336c:	4838      	ldr	r0, [pc, #224]	; (3450 <main+0x18c>)
    336e:	4b3b      	ldr	r3, [pc, #236]	; (345c <main+0x198>)
    3370:	4798      	blx	r3
		if(get_fiber1_status() == data_ready)
    3372:	4b3b      	ldr	r3, [pc, #236]	; (3460 <main+0x19c>)
    3374:	4798      	blx	r3
    3376:	2801      	cmp	r0, #1
    3378:	d02e      	beq.n	33d8 <main+0x114>
		if(get_fiber2_status() == data_ready)
    337a:	4b3a      	ldr	r3, [pc, #232]	; (3464 <main+0x1a0>)
    337c:	4798      	blx	r3
    337e:	2801      	cmp	r0, #1
    3380:	d039      	beq.n	33f6 <main+0x132>
		struct shield_data newData = spi_eeprom_read_address(0xF0);
    3382:	ad01      	add	r5, sp, #4
    3384:	21f0      	movs	r1, #240	; 0xf0
    3386:	0028      	movs	r0, r5
    3388:	4b37      	ldr	r3, [pc, #220]	; (3468 <main+0x1a4>)
    338a:	4798      	blx	r3
    338c:	4e37      	ldr	r6, [pc, #220]	; (346c <main+0x1a8>)
    338e:	4f38      	ldr	r7, [pc, #224]	; (3470 <main+0x1ac>)
    3390:	2380      	movs	r3, #128	; 0x80
    3392:	025b      	lsls	r3, r3, #9
    3394:	4698      	mov	r8, r3
    3396:	61bb      	str	r3, [r7, #24]
		delay_ms(1);
    3398:	2001      	movs	r0, #1
    339a:	4c27      	ldr	r4, [pc, #156]	; (3438 <main+0x174>)
    339c:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    339e:	4643      	mov	r3, r8
    33a0:	617b      	str	r3, [r7, #20]
		delay_ms(1);
    33a2:	2001      	movs	r0, #1
    33a4:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    33a6:	2780      	movs	r7, #128	; 0x80
    33a8:	033f      	lsls	r7, r7, #12
    33aa:	61b7      	str	r7, [r6, #24]
		delay_ms(1);
    33ac:	2001      	movs	r0, #1
    33ae:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    33b0:	6177      	str	r7, [r6, #20]
		if(newData.rssi_values.GHz24RSSI == 0)
    33b2:	7aeb      	ldrb	r3, [r5, #11]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d1dc      	bne.n	3372 <main+0xae>
			delay_ms(1);
    33b8:	2001      	movs	r0, #1
    33ba:	4b1f      	ldr	r3, [pc, #124]	; (3438 <main+0x174>)
    33bc:	4798      	blx	r3
	while(1){
    33be:	e7d8      	b.n	3372 <main+0xae>
		delay_ms(1);
    33c0:	2001      	movs	r0, #1
    33c2:	4b1d      	ldr	r3, [pc, #116]	; (3438 <main+0x174>)
    33c4:	4798      	blx	r3
    33c6:	e7c5      	b.n	3354 <main+0x90>
		delay_ms(1);
    33c8:	2001      	movs	r0, #1
    33ca:	4b1b      	ldr	r3, [pc, #108]	; (3438 <main+0x174>)
    33cc:	4798      	blx	r3
    33ce:	e7c7      	b.n	3360 <main+0x9c>
		delay_ms(1);
    33d0:	2001      	movs	r0, #1
    33d2:	4b19      	ldr	r3, [pc, #100]	; (3438 <main+0x174>)
    33d4:	4798      	blx	r3
    33d6:	e7c9      	b.n	336c <main+0xa8>
			current_fiber1_data.rssi_values = get_fiber1_data();
    33d8:	4c1d      	ldr	r4, [pc, #116]	; (3450 <main+0x18c>)
    33da:	4b26      	ldr	r3, [pc, #152]	; (3474 <main+0x1b0>)
    33dc:	4798      	blx	r3
    33de:	7220      	strb	r0, [r4, #8]
    33e0:	0403      	lsls	r3, r0, #16
    33e2:	0e1b      	lsrs	r3, r3, #24
    33e4:	7263      	strb	r3, [r4, #9]
    33e6:	0203      	lsls	r3, r0, #8
    33e8:	0e1b      	lsrs	r3, r3, #24
    33ea:	72a3      	strb	r3, [r4, #10]
    33ec:	0e00      	lsrs	r0, r0, #24
    33ee:	72e0      	strb	r0, [r4, #11]
			reset_fiber1_status();
    33f0:	4b21      	ldr	r3, [pc, #132]	; (3478 <main+0x1b4>)
    33f2:	4798      	blx	r3
    33f4:	e7c1      	b.n	337a <main+0xb6>
			current_fiber2_data.rssi_values = get_fiber2_data();
    33f6:	4c21      	ldr	r4, [pc, #132]	; (347c <main+0x1b8>)
    33f8:	4b21      	ldr	r3, [pc, #132]	; (3480 <main+0x1bc>)
    33fa:	4798      	blx	r3
    33fc:	7220      	strb	r0, [r4, #8]
    33fe:	0403      	lsls	r3, r0, #16
    3400:	0e1b      	lsrs	r3, r3, #24
    3402:	7263      	strb	r3, [r4, #9]
    3404:	0203      	lsls	r3, r0, #8
    3406:	0e1b      	lsrs	r3, r3, #24
    3408:	72a3      	strb	r3, [r4, #10]
    340a:	0e00      	lsrs	r0, r0, #24
    340c:	72e0      	strb	r0, [r4, #11]
			reset_fiber2_status();
    340e:	4b1d      	ldr	r3, [pc, #116]	; (3484 <main+0x1c0>)
    3410:	4798      	blx	r3
    3412:	e7b6      	b.n	3382 <main+0xbe>
    3414:	00003281 	.word	0x00003281
    3418:	20000009 	.word	0x20000009
    341c:	00001bf1 	.word	0x00001bf1
    3420:	2000073c 	.word	0x2000073c
    3424:	20000424 	.word	0x20000424
    3428:	00001ae9 	.word	0x00001ae9
    342c:	003020ac 	.word	0x003020ac
    3430:	00001b85 	.word	0x00001b85
    3434:	003020b0 	.word	0x003020b0
    3438:	00000151 	.word	0x00000151
    343c:	00001f91 	.word	0x00001f91
    3440:	00002209 	.word	0x00002209
    3444:	00002221 	.word	0x00002221
    3448:	200003ac 	.word	0x200003ac
    344c:	00001509 	.word	0x00001509
    3450:	200009ec 	.word	0x200009ec
    3454:	000007b1 	.word	0x000007b1
    3458:	0000171d 	.word	0x0000171d
    345c:	0000178d 	.word	0x0000178d
    3460:	00001ab9 	.word	0x00001ab9
    3464:	00001ac5 	.word	0x00001ac5
    3468:	000016cd 	.word	0x000016cd
    346c:	41004400 	.word	0x41004400
    3470:	41004480 	.word	0x41004480
    3474:	00001a51 	.word	0x00001a51
    3478:	00001ad1 	.word	0x00001ad1
    347c:	200009e0 	.word	0x200009e0
    3480:	00001a85 	.word	0x00001a85
    3484:	00001add 	.word	0x00001add

00003488 <__udivsi3>:
    3488:	2200      	movs	r2, #0
    348a:	0843      	lsrs	r3, r0, #1
    348c:	428b      	cmp	r3, r1
    348e:	d374      	bcc.n	357a <__udivsi3+0xf2>
    3490:	0903      	lsrs	r3, r0, #4
    3492:	428b      	cmp	r3, r1
    3494:	d35f      	bcc.n	3556 <__udivsi3+0xce>
    3496:	0a03      	lsrs	r3, r0, #8
    3498:	428b      	cmp	r3, r1
    349a:	d344      	bcc.n	3526 <__udivsi3+0x9e>
    349c:	0b03      	lsrs	r3, r0, #12
    349e:	428b      	cmp	r3, r1
    34a0:	d328      	bcc.n	34f4 <__udivsi3+0x6c>
    34a2:	0c03      	lsrs	r3, r0, #16
    34a4:	428b      	cmp	r3, r1
    34a6:	d30d      	bcc.n	34c4 <__udivsi3+0x3c>
    34a8:	22ff      	movs	r2, #255	; 0xff
    34aa:	0209      	lsls	r1, r1, #8
    34ac:	ba12      	rev	r2, r2
    34ae:	0c03      	lsrs	r3, r0, #16
    34b0:	428b      	cmp	r3, r1
    34b2:	d302      	bcc.n	34ba <__udivsi3+0x32>
    34b4:	1212      	asrs	r2, r2, #8
    34b6:	0209      	lsls	r1, r1, #8
    34b8:	d065      	beq.n	3586 <__udivsi3+0xfe>
    34ba:	0b03      	lsrs	r3, r0, #12
    34bc:	428b      	cmp	r3, r1
    34be:	d319      	bcc.n	34f4 <__udivsi3+0x6c>
    34c0:	e000      	b.n	34c4 <__udivsi3+0x3c>
    34c2:	0a09      	lsrs	r1, r1, #8
    34c4:	0bc3      	lsrs	r3, r0, #15
    34c6:	428b      	cmp	r3, r1
    34c8:	d301      	bcc.n	34ce <__udivsi3+0x46>
    34ca:	03cb      	lsls	r3, r1, #15
    34cc:	1ac0      	subs	r0, r0, r3
    34ce:	4152      	adcs	r2, r2
    34d0:	0b83      	lsrs	r3, r0, #14
    34d2:	428b      	cmp	r3, r1
    34d4:	d301      	bcc.n	34da <__udivsi3+0x52>
    34d6:	038b      	lsls	r3, r1, #14
    34d8:	1ac0      	subs	r0, r0, r3
    34da:	4152      	adcs	r2, r2
    34dc:	0b43      	lsrs	r3, r0, #13
    34de:	428b      	cmp	r3, r1
    34e0:	d301      	bcc.n	34e6 <__udivsi3+0x5e>
    34e2:	034b      	lsls	r3, r1, #13
    34e4:	1ac0      	subs	r0, r0, r3
    34e6:	4152      	adcs	r2, r2
    34e8:	0b03      	lsrs	r3, r0, #12
    34ea:	428b      	cmp	r3, r1
    34ec:	d301      	bcc.n	34f2 <__udivsi3+0x6a>
    34ee:	030b      	lsls	r3, r1, #12
    34f0:	1ac0      	subs	r0, r0, r3
    34f2:	4152      	adcs	r2, r2
    34f4:	0ac3      	lsrs	r3, r0, #11
    34f6:	428b      	cmp	r3, r1
    34f8:	d301      	bcc.n	34fe <__udivsi3+0x76>
    34fa:	02cb      	lsls	r3, r1, #11
    34fc:	1ac0      	subs	r0, r0, r3
    34fe:	4152      	adcs	r2, r2
    3500:	0a83      	lsrs	r3, r0, #10
    3502:	428b      	cmp	r3, r1
    3504:	d301      	bcc.n	350a <__udivsi3+0x82>
    3506:	028b      	lsls	r3, r1, #10
    3508:	1ac0      	subs	r0, r0, r3
    350a:	4152      	adcs	r2, r2
    350c:	0a43      	lsrs	r3, r0, #9
    350e:	428b      	cmp	r3, r1
    3510:	d301      	bcc.n	3516 <__udivsi3+0x8e>
    3512:	024b      	lsls	r3, r1, #9
    3514:	1ac0      	subs	r0, r0, r3
    3516:	4152      	adcs	r2, r2
    3518:	0a03      	lsrs	r3, r0, #8
    351a:	428b      	cmp	r3, r1
    351c:	d301      	bcc.n	3522 <__udivsi3+0x9a>
    351e:	020b      	lsls	r3, r1, #8
    3520:	1ac0      	subs	r0, r0, r3
    3522:	4152      	adcs	r2, r2
    3524:	d2cd      	bcs.n	34c2 <__udivsi3+0x3a>
    3526:	09c3      	lsrs	r3, r0, #7
    3528:	428b      	cmp	r3, r1
    352a:	d301      	bcc.n	3530 <__udivsi3+0xa8>
    352c:	01cb      	lsls	r3, r1, #7
    352e:	1ac0      	subs	r0, r0, r3
    3530:	4152      	adcs	r2, r2
    3532:	0983      	lsrs	r3, r0, #6
    3534:	428b      	cmp	r3, r1
    3536:	d301      	bcc.n	353c <__udivsi3+0xb4>
    3538:	018b      	lsls	r3, r1, #6
    353a:	1ac0      	subs	r0, r0, r3
    353c:	4152      	adcs	r2, r2
    353e:	0943      	lsrs	r3, r0, #5
    3540:	428b      	cmp	r3, r1
    3542:	d301      	bcc.n	3548 <__udivsi3+0xc0>
    3544:	014b      	lsls	r3, r1, #5
    3546:	1ac0      	subs	r0, r0, r3
    3548:	4152      	adcs	r2, r2
    354a:	0903      	lsrs	r3, r0, #4
    354c:	428b      	cmp	r3, r1
    354e:	d301      	bcc.n	3554 <__udivsi3+0xcc>
    3550:	010b      	lsls	r3, r1, #4
    3552:	1ac0      	subs	r0, r0, r3
    3554:	4152      	adcs	r2, r2
    3556:	08c3      	lsrs	r3, r0, #3
    3558:	428b      	cmp	r3, r1
    355a:	d301      	bcc.n	3560 <__udivsi3+0xd8>
    355c:	00cb      	lsls	r3, r1, #3
    355e:	1ac0      	subs	r0, r0, r3
    3560:	4152      	adcs	r2, r2
    3562:	0883      	lsrs	r3, r0, #2
    3564:	428b      	cmp	r3, r1
    3566:	d301      	bcc.n	356c <__udivsi3+0xe4>
    3568:	008b      	lsls	r3, r1, #2
    356a:	1ac0      	subs	r0, r0, r3
    356c:	4152      	adcs	r2, r2
    356e:	0843      	lsrs	r3, r0, #1
    3570:	428b      	cmp	r3, r1
    3572:	d301      	bcc.n	3578 <__udivsi3+0xf0>
    3574:	004b      	lsls	r3, r1, #1
    3576:	1ac0      	subs	r0, r0, r3
    3578:	4152      	adcs	r2, r2
    357a:	1a41      	subs	r1, r0, r1
    357c:	d200      	bcs.n	3580 <__udivsi3+0xf8>
    357e:	4601      	mov	r1, r0
    3580:	4152      	adcs	r2, r2
    3582:	4610      	mov	r0, r2
    3584:	4770      	bx	lr
    3586:	e7ff      	b.n	3588 <__udivsi3+0x100>
    3588:	b501      	push	{r0, lr}
    358a:	2000      	movs	r0, #0
    358c:	f000 f806 	bl	359c <__aeabi_idiv0>
    3590:	bd02      	pop	{r1, pc}
    3592:	46c0      	nop			; (mov r8, r8)

00003594 <__aeabi_uidivmod>:
    3594:	2900      	cmp	r1, #0
    3596:	d0f7      	beq.n	3588 <__udivsi3+0x100>
    3598:	e776      	b.n	3488 <__udivsi3>
    359a:	4770      	bx	lr

0000359c <__aeabi_idiv0>:
    359c:	4770      	bx	lr
    359e:	46c0      	nop			; (mov r8, r8)

000035a0 <__aeabi_lmul>:
    35a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35a2:	46ce      	mov	lr, r9
    35a4:	4647      	mov	r7, r8
    35a6:	0415      	lsls	r5, r2, #16
    35a8:	0c2d      	lsrs	r5, r5, #16
    35aa:	002e      	movs	r6, r5
    35ac:	b580      	push	{r7, lr}
    35ae:	0407      	lsls	r7, r0, #16
    35b0:	0c14      	lsrs	r4, r2, #16
    35b2:	0c3f      	lsrs	r7, r7, #16
    35b4:	4699      	mov	r9, r3
    35b6:	0c03      	lsrs	r3, r0, #16
    35b8:	437e      	muls	r6, r7
    35ba:	435d      	muls	r5, r3
    35bc:	4367      	muls	r7, r4
    35be:	4363      	muls	r3, r4
    35c0:	197f      	adds	r7, r7, r5
    35c2:	0c34      	lsrs	r4, r6, #16
    35c4:	19e4      	adds	r4, r4, r7
    35c6:	469c      	mov	ip, r3
    35c8:	42a5      	cmp	r5, r4
    35ca:	d903      	bls.n	35d4 <__aeabi_lmul+0x34>
    35cc:	2380      	movs	r3, #128	; 0x80
    35ce:	025b      	lsls	r3, r3, #9
    35d0:	4698      	mov	r8, r3
    35d2:	44c4      	add	ip, r8
    35d4:	464b      	mov	r3, r9
    35d6:	4351      	muls	r1, r2
    35d8:	4343      	muls	r3, r0
    35da:	0436      	lsls	r6, r6, #16
    35dc:	0c36      	lsrs	r6, r6, #16
    35de:	0c25      	lsrs	r5, r4, #16
    35e0:	0424      	lsls	r4, r4, #16
    35e2:	4465      	add	r5, ip
    35e4:	19a4      	adds	r4, r4, r6
    35e6:	1859      	adds	r1, r3, r1
    35e8:	1949      	adds	r1, r1, r5
    35ea:	0020      	movs	r0, r4
    35ec:	bc0c      	pop	{r2, r3}
    35ee:	4690      	mov	r8, r2
    35f0:	4699      	mov	r9, r3
    35f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000035f4 <__libc_init_array>:
    35f4:	b570      	push	{r4, r5, r6, lr}
    35f6:	2600      	movs	r6, #0
    35f8:	4d0c      	ldr	r5, [pc, #48]	; (362c <__libc_init_array+0x38>)
    35fa:	4c0d      	ldr	r4, [pc, #52]	; (3630 <__libc_init_array+0x3c>)
    35fc:	1b64      	subs	r4, r4, r5
    35fe:	10a4      	asrs	r4, r4, #2
    3600:	42a6      	cmp	r6, r4
    3602:	d109      	bne.n	3618 <__libc_init_array+0x24>
    3604:	2600      	movs	r6, #0
    3606:	f000 f85f 	bl	36c8 <_init>
    360a:	4d0a      	ldr	r5, [pc, #40]	; (3634 <__libc_init_array+0x40>)
    360c:	4c0a      	ldr	r4, [pc, #40]	; (3638 <__libc_init_array+0x44>)
    360e:	1b64      	subs	r4, r4, r5
    3610:	10a4      	asrs	r4, r4, #2
    3612:	42a6      	cmp	r6, r4
    3614:	d105      	bne.n	3622 <__libc_init_array+0x2e>
    3616:	bd70      	pop	{r4, r5, r6, pc}
    3618:	00b3      	lsls	r3, r6, #2
    361a:	58eb      	ldr	r3, [r5, r3]
    361c:	4798      	blx	r3
    361e:	3601      	adds	r6, #1
    3620:	e7ee      	b.n	3600 <__libc_init_array+0xc>
    3622:	00b3      	lsls	r3, r6, #2
    3624:	58eb      	ldr	r3, [r5, r3]
    3626:	4798      	blx	r3
    3628:	3601      	adds	r6, #1
    362a:	e7f2      	b.n	3612 <__libc_init_array+0x1e>
    362c:	000036d4 	.word	0x000036d4
    3630:	000036d4 	.word	0x000036d4
    3634:	000036d4 	.word	0x000036d4
    3638:	000036d8 	.word	0x000036d8

0000363c <memcpy>:
    363c:	2300      	movs	r3, #0
    363e:	b510      	push	{r4, lr}
    3640:	429a      	cmp	r2, r3
    3642:	d100      	bne.n	3646 <memcpy+0xa>
    3644:	bd10      	pop	{r4, pc}
    3646:	5ccc      	ldrb	r4, [r1, r3]
    3648:	54c4      	strb	r4, [r0, r3]
    364a:	3301      	adds	r3, #1
    364c:	e7f8      	b.n	3640 <memcpy+0x4>

0000364e <memset>:
    364e:	0003      	movs	r3, r0
    3650:	1882      	adds	r2, r0, r2
    3652:	4293      	cmp	r3, r2
    3654:	d100      	bne.n	3658 <memset+0xa>
    3656:	4770      	bx	lr
    3658:	7019      	strb	r1, [r3, #0]
    365a:	3301      	adds	r3, #1
    365c:	e7f9      	b.n	3652 <memset+0x4>
    365e:	0000      	movs	r0, r0
    3660:	42000800 	.word	0x42000800
    3664:	42000c00 	.word	0x42000c00
    3668:	42001000 	.word	0x42001000
    366c:	42001400 	.word	0x42001400
    3670:	42001800 	.word	0x42001800
    3674:	42001c00 	.word	0x42001c00
    3678:	0c0b0a09 	.word	0x0c0b0a09
    367c:	00000e0d 	.word	0x00000e0d
    3680:	00002a0c 	.word	0x00002a0c
    3684:	00002a68 	.word	0x00002a68
    3688:	00002a68 	.word	0x00002a68
    368c:	00002a06 	.word	0x00002a06
    3690:	00002a06 	.word	0x00002a06
    3694:	00002a20 	.word	0x00002a20
    3698:	00002a12 	.word	0x00002a12
    369c:	00002a26 	.word	0x00002a26
    36a0:	00002a58 	.word	0x00002a58
    36a4:	00002b58 	.word	0x00002b58
    36a8:	00002bc6 	.word	0x00002bc6
    36ac:	00002bc6 	.word	0x00002bc6
    36b0:	00002b38 	.word	0x00002b38
    36b4:	00002b4a 	.word	0x00002b4a
    36b8:	00002b68 	.word	0x00002b68
    36bc:	00002b3c 	.word	0x00002b3c
    36c0:	00002b78 	.word	0x00002b78
    36c4:	00002bb4 	.word	0x00002bb4

000036c8 <_init>:
    36c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ca:	46c0      	nop			; (mov r8, r8)
    36cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    36ce:	bc08      	pop	{r3}
    36d0:	469e      	mov	lr, r3
    36d2:	4770      	bx	lr

000036d4 <__init_array_start>:
    36d4:	000000dd 	.word	0x000000dd

000036d8 <_fini>:
    36d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36da:	46c0      	nop			; (mov r8, r8)
    36dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    36de:	bc08      	pop	{r3}
    36e0:	469e      	mov	lr, r3
    36e2:	4770      	bx	lr

000036e4 <__fini_array_start>:
    36e4:	000000b5 	.word	0x000000b5
