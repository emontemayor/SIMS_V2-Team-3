
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000020f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a8  2000000c  000020fc  0002000c  2**2
                  ALLOC
  3 .stack        00002004  200000b4  000021a4  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025652  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f6b  00000000  00000000  000456df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000543d  00000000  00000000  0004864a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000488  00000000  00000000  0004da87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000738  00000000  00000000  0004df0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005b68  00000000  00000000  0004e647  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ad70  00000000  00000000  000541af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000858a1  00000000  00000000  0005ef1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b00  00000000  00000000  000e47c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 20 00 20 e9 1b 00 00 e5 1b 00 00 e5 1b 00 00     . . ............
	...
      2c:	e5 1b 00 00 00 00 00 00 00 00 00 00 e5 1b 00 00     ................
      3c:	e5 1b 00 00 e5 1b 00 00 e5 1b 00 00 e5 1b 00 00     ................
      4c:	e5 1b 00 00 e5 1b 00 00 e5 1b 00 00 e5 1b 00 00     ................
      5c:	e5 1b 00 00 e5 1b 00 00 4d 15 00 00 5d 15 00 00     ........M...]...
      6c:	6d 15 00 00 7d 15 00 00 00 00 00 00 00 00 00 00     m...}...........
      7c:	e5 1b 00 00 e5 1b 00 00 e5 1b 00 00 e5 1b 00 00     ................
      8c:	e5 1b 00 00 e5 1b 00 00 00 00 00 00 00 00 00 00     ................
      9c:	e5 1b 00 00 e5 1b 00 00 e5 1b 00 00 e5 1b 00 00     ................
      ac:	e5 1b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	000020f0 	.word	0x000020f0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	000020f0 	.word	0x000020f0
     10c:	000020f0 	.word	0x000020f0
     110:	00000000 	.word	0x00000000

00000114 <spi40_init>:
    spi40_wr8(AX5043_PHASEGAIN0,  0xC3);
    spi40_wr8(AX5043_FREQGAINA0,  0x0F);
    spi40_wr8(AX5043_FREQGAINB0,  0x1F);
    spi40_wr8(AX5043_FREQGAINC0,  0x0D);
    spi40_wr8(AX5043_FREQGAIND0,  0x0D);
    spi40_wr8(AX5043_AMPLGAIN0,  0x06);
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46c6      	mov	lr, r8
     118:	b500      	push	{lr}
    spi40_wr8(AX5043_FREQDEV10,  0x00);
     11a:	b090      	sub	sp, #64	; 0x40
     11c:	4b32      	ldr	r3, [pc, #200]	; (1e8 <spi40_init+0xd4>)
     11e:	781b      	ldrb	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
    spi40_wr8(AX5043_FREQDEV00,  0x00);
     122:	d003      	beq.n	12c <spi40_init+0x18>
     124:	b010      	add	sp, #64	; 0x40
     126:	bc04      	pop	{r2}
     128:	4690      	mov	r8, r2
    spi40_wr8(AX5043_BBOFFSRES0,  0x00);
     12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     12c:	ac02      	add	r4, sp, #8
     12e:	2601      	movs	r6, #1
     130:	7026      	strb	r6, [r4, #0]
    spi40_wr8(AX5043_AGCGAIN1,  0xEB);
     132:	2500      	movs	r5, #0
     134:	6065      	str	r5, [r4, #4]
     136:	60a5      	str	r5, [r4, #8]
     138:	23c0      	movs	r3, #192	; 0xc0
    spi40_wr8(AX5043_AGCTARGET1,  0x84);
     13a:	039b      	lsls	r3, r3, #14
     13c:	4698      	mov	r8, r3
     13e:	60e3      	str	r3, [r4, #12]
     140:	7425      	strb	r5, [r4, #16]
    spi40_wr8(AX5043_AGCAHYST1,  0x00);
     142:	7465      	strb	r5, [r4, #17]
     144:	74a6      	strb	r6, [r4, #18]
     146:	74e6      	strb	r6, [r4, #19]
     148:	7525      	strb	r5, [r4, #20]
    spi40_wr8(AX5043_AGCMINMAX1,  0x00);
     14a:	2724      	movs	r7, #36	; 0x24
     14c:	55e5      	strb	r5, [r4, r7]
     14e:	220c      	movs	r2, #12
     150:	2100      	movs	r1, #0
    spi40_wr8(AX5043_TIMEGAIN1,  0x8D);
     152:	a808      	add	r0, sp, #32
     154:	4b25      	ldr	r3, [pc, #148]	; (1ec <spi40_init+0xd8>)
     156:	4798      	blx	r3
     158:	4643      	mov	r3, r8
    spi40_wr8(AX5043_DRGAIN1,  0x88);
     15a:	60e3      	str	r3, [r4, #12]
     15c:	4b24      	ldr	r3, [pc, #144]	; (1f0 <spi40_init+0xdc>)
     15e:	62a3      	str	r3, [r4, #40]	; 0x28
     160:	4b24      	ldr	r3, [pc, #144]	; (1f4 <spi40_init+0xe0>)
    spi40_wr8(AX5043_PHASEGAIN1,  0xC3);
     162:	62e3      	str	r3, [r4, #44]	; 0x2c
     164:	2301      	movs	r3, #1
     166:	425b      	negs	r3, r3
     168:	6323      	str	r3, [r4, #48]	; 0x30
    spi40_wr8(AX5043_FREQGAINA1,  0x0F);
     16a:	4b23      	ldr	r3, [pc, #140]	; (1f8 <spi40_init+0xe4>)
     16c:	6363      	str	r3, [r4, #52]	; 0x34
     16e:	55e5      	strb	r5, [r4, r7]
     170:	4b22      	ldr	r3, [pc, #136]	; (1fc <spi40_init+0xe8>)
    spi40_wr8(AX5043_FREQGAINB1,  0x1F);
     172:	61a3      	str	r3, [r4, #24]
     174:	4d22      	ldr	r5, [pc, #136]	; (200 <spi40_init+0xec>)
     176:	0022      	movs	r2, r4
     178:	4922      	ldr	r1, [pc, #136]	; (204 <spi40_init+0xf0>)
    spi40_wr8(AX5043_FREQGAINC1,  0x0D);
     17a:	0028      	movs	r0, r5
     17c:	4b22      	ldr	r3, [pc, #136]	; (208 <spi40_init+0xf4>)
     17e:	4798      	blx	r3
     180:	682c      	ldr	r4, [r5, #0]
    spi40_wr8(AX5043_FREQGAIND1,  0x0D);
     182:	0020      	movs	r0, r4
     184:	4b21      	ldr	r3, [pc, #132]	; (20c <spi40_init+0xf8>)
     186:	4798      	blx	r3
     188:	231f      	movs	r3, #31
    spi40_wr8(AX5043_AMPLGAIN1,  0x06);
     18a:	4018      	ands	r0, r3
     18c:	4086      	lsls	r6, r0
     18e:	4b20      	ldr	r3, [pc, #128]	; (210 <spi40_init+0xfc>)
     190:	601e      	str	r6, [r3, #0]
    spi40_wr8(AX5043_FREQDEV11,  0x00);
     192:	4b1b      	ldr	r3, [pc, #108]	; (200 <spi40_init+0xec>)
     194:	681b      	ldr	r3, [r3, #0]
     196:	69db      	ldr	r3, [r3, #28]
     198:	2b00      	cmp	r3, #0
    spi40_wr8(AX5043_FREQDEV01,  0x3B);
     19a:	d1fa      	bne.n	192 <spi40_init+0x7e>
     19c:	6823      	ldr	r3, [r4, #0]
     19e:	2202      	movs	r2, #2
     1a0:	4313      	orrs	r3, r2
    spi40_wr8(AX5043_FOURFSK1,  0x16);
     1a2:	6023      	str	r3, [r4, #0]
     1a4:	2300      	movs	r3, #0
     1a6:	4c1b      	ldr	r4, [pc, #108]	; (214 <spi40_init+0x100>)
     1a8:	3216      	adds	r2, #22
    spi40_wr8(AX5043_BBOFFSRES1,  0x00);
     1aa:	7022      	strb	r2, [r4, #0]
     1ac:	7063      	strb	r3, [r4, #1]
     1ae:	70a3      	strb	r3, [r4, #2]
     1b0:	3a17      	subs	r2, #23
    spi40_wr8(AX5043_AGCGAIN3,  0xFF);
     1b2:	4669      	mov	r1, sp
     1b4:	704a      	strb	r2, [r1, #1]
     1b6:	708b      	strb	r3, [r1, #2]
     1b8:	700a      	strb	r2, [r1, #0]
    spi40_wr8(AX5043_AGCTARGET3,  0x84);
     1ba:	2018      	movs	r0, #24
     1bc:	4b16      	ldr	r3, [pc, #88]	; (218 <spi40_init+0x104>)
     1be:	4798      	blx	r3
     1c0:	7821      	ldrb	r1, [r4, #0]
    spi40_wr8(AX5043_AGCAHYST3,  0x00);
     1c2:	09ca      	lsrs	r2, r1, #7
     1c4:	094b      	lsrs	r3, r1, #5
     1c6:	2a00      	cmp	r2, #0
     1c8:	d10c      	bne.n	1e4 <spi40_init+0xd0>
    spi40_wr8(AX5043_AGCMINMAX3,  0x00);
     1ca:	01db      	lsls	r3, r3, #7
     1cc:	4a13      	ldr	r2, [pc, #76]	; (21c <spi40_init+0x108>)
     1ce:	4694      	mov	ip, r2
     1d0:	4463      	add	r3, ip
    spi40_wr8(AX5043_TIMEGAIN3,  0x8C);
     1d2:	221f      	movs	r2, #31
     1d4:	400a      	ands	r2, r1
     1d6:	2101      	movs	r1, #1
     1d8:	0008      	movs	r0, r1
    spi40_wr8(AX5043_DRGAIN3,  0x87);
     1da:	4090      	lsls	r0, r2
     1dc:	6198      	str	r0, [r3, #24]
     1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <spi40_init+0xd4>)
     1e0:	7019      	strb	r1, [r3, #0]
    spi40_wr8(AX5043_PHASEGAIN3,  0xC3);
     1e2:	e79f      	b.n	124 <spi40_init+0x10>
     1e4:	2300      	movs	r3, #0
     1e6:	e7f4      	b.n	1d2 <spi40_init+0xbe>
     1e8:	20000028 	.word	0x20000028
    spi40_wr8(AX5043_FREQGAINA3,  0x0F);
     1ec:	00002051 	.word	0x00002051
     1f0:	00160002 	.word	0x00160002
    spi40_wr8(AX5043_FREQGAINB3,  0x1F);
     1f4:	00170002 	.word	0x00170002
     1f8:	00190002 	.word	0x00190002
    spi40_wr8(AX5043_FREQGAINC3,  0x0D);
     1fc:	000f4240 	.word	0x000f4240
     200:	20000060 	.word	0x20000060
    spi40_wr8(AX5043_FREQGAIND3,  0x0D);
     204:	42001400 	.word	0x42001400
     208:	00000b61 	.word	0x00000b61
    spi40_wr8(AX5043_AMPLGAIN3,  0x06);
     20c:	0000152d 	.word	0x0000152d
     210:	e000e100 	.word	0xe000e100
    spi40_wr8(AX5043_FREQDEV13,  0x00);
     214:	2000009c 	.word	0x2000009c
     218:	00000841 	.word	0x00000841
    spi40_wr8(AX5043_FREQDEV03,  0x3B);
     21c:	41004400 	.word	0x41004400

00000220 <spi40_start_xfer>:
     220:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_FOURFSK3,  0x16);
     222:	b082      	sub	sp, #8
     224:	4b10      	ldr	r3, [pc, #64]	; (268 <spi40_start_xfer+0x48>)
     226:	4318      	orrs	r0, r3
     228:	b280      	uxth	r0, r0
    spi40_wr8(AX5043_BBOFFSRES3,  0x00);
     22a:	466b      	mov	r3, sp
     22c:	80d8      	strh	r0, [r3, #6]
     22e:	2900      	cmp	r1, #0
     230:	d103      	bne.n	23a <spi40_start_xfer+0x1a>
    spi40_wr8(AX5043_MODCFGF,  0x00);
     232:	0440      	lsls	r0, r0, #17
     234:	0c40      	lsrs	r0, r0, #17
     236:	466b      	mov	r3, sp
     238:	80d8      	strh	r0, [r3, #6]
    spi40_wr8(AX5043_FSKDEV2,  0x00);
     23a:	466b      	mov	r3, sp
     23c:	1d9a      	adds	r2, r3, #6
     23e:	88db      	ldrh	r3, [r3, #6]
     240:	0219      	lsls	r1, r3, #8
    spi40_wr8(AX5043_FSKDEV1,  0x00);
     242:	0a1b      	lsrs	r3, r3, #8
     244:	430b      	orrs	r3, r1
     246:	8013      	strh	r3, [r2, #0]
     248:	2201      	movs	r2, #1
    spi40_wr8(AX5043_FSKDEV0,  0x23);
     24a:	4908      	ldr	r1, [pc, #32]	; (26c <spi40_start_xfer+0x4c>)
     24c:	4808      	ldr	r0, [pc, #32]	; (270 <spi40_start_xfer+0x50>)
     24e:	4b09      	ldr	r3, [pc, #36]	; (274 <spi40_start_xfer+0x54>)
     250:	4798      	blx	r3
    spi40_wr8(AX5043_MODCFGA,  0x05);
     252:	2805      	cmp	r0, #5
     254:	d0f8      	beq.n	248 <spi40_start_xfer+0x28>
     256:	2302      	movs	r3, #2
     258:	4a07      	ldr	r2, [pc, #28]	; (278 <spi40_start_xfer+0x58>)
    spi40_wr8(AX5043_TXRATE2,  0x00);
     25a:	4669      	mov	r1, sp
     25c:	3106      	adds	r1, #6
     25e:	4804      	ldr	r0, [pc, #16]	; (270 <spi40_start_xfer+0x50>)
     260:	4c06      	ldr	r4, [pc, #24]	; (27c <spi40_start_xfer+0x5c>)
    spi40_wr8(AX5043_TXRATE1,  0x00);
     262:	47a0      	blx	r4
     264:	b002      	add	sp, #8
     266:	bd10      	pop	{r4, pc}
     268:	fffff000 	.word	0xfffff000
    spi40_wr8(AX5043_TXRATE0,  0x69);
     26c:	2000009c 	.word	0x2000009c
     270:	20000060 	.word	0x20000060
    spi40_wr8(AX5043_TXPWRCOEFFB1,  0x0F);
     274:	00000d49 	.word	0x00000d49
     278:	2000002a 	.word	0x2000002a
    spi40_wr8(AX5043_TXPWRCOEFFB0,  0xFF);
     27c:	00001031 	.word	0x00001031

00000280 <spi40_stop_xfer>:
     280:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_PLLVCOI,  0x8A);
     282:	2200      	movs	r2, #0
     284:	4902      	ldr	r1, [pc, #8]	; (290 <spi40_stop_xfer+0x10>)
     286:	4803      	ldr	r0, [pc, #12]	; (294 <spi40_stop_xfer+0x14>)
     288:	4b03      	ldr	r3, [pc, #12]	; (298 <spi40_stop_xfer+0x18>)
    spi40_wr8(AX5043_PLLRNGCLK,  0x03);
     28a:	4798      	blx	r3
     28c:	bd10      	pop	{r4, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	2000009c 	.word	0x2000009c
    spi40_wr8(AX5043_BBTUNE,  0x0F);
     294:	20000060 	.word	0x20000060
     298:	00000d49 	.word	0x00000d49

0000029c <spi40_read>:
    spi40_wr8(AX5043_BBOFFSCAP,  0x77);
     29c:	b510      	push	{r4, lr}
     29e:	000a      	movs	r2, r1
     2a0:	2300      	movs	r3, #0
    spi40_wr8(AX5043_PKTADDRCFG,  0x00);
     2a2:	0001      	movs	r1, r0
     2a4:	4801      	ldr	r0, [pc, #4]	; (2ac <spi40_read+0x10>)
     2a6:	4c02      	ldr	r4, [pc, #8]	; (2b0 <spi40_read+0x14>)
     2a8:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENCFG,  0x00);
     2aa:	bd10      	pop	{r4, pc}
     2ac:	20000060 	.word	0x20000060
    spi40_wr8(AX5043_PKTLENOFFSET,  0x04);
     2b0:	00000c4d 	.word	0x00000c4d

000002b4 <spi40_rd8>:
     2b4:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_PKTMAXLEN,  0xC8);
     2b6:	b082      	sub	sp, #8
     2b8:	466b      	mov	r3, sp
     2ba:	1ddc      	adds	r4, r3, #7
    spi40_wr8(AX5043_MATCH0PAT3,  0xAA);
     2bc:	2300      	movs	r3, #0
     2be:	7023      	strb	r3, [r4, #0]
     2c0:	2100      	movs	r1, #0
     2c2:	4b05      	ldr	r3, [pc, #20]	; (2d8 <spi40_rd8+0x24>)
    spi40_wr8(AX5043_MATCH0PAT2,  0xCC);
     2c4:	4798      	blx	r3
     2c6:	2101      	movs	r1, #1
     2c8:	0020      	movs	r0, r4
    spi40_wr8(AX5043_MATCH0PAT1,  0xAA);
     2ca:	4b04      	ldr	r3, [pc, #16]	; (2dc <spi40_rd8+0x28>)
     2cc:	4798      	blx	r3
     2ce:	4b04      	ldr	r3, [pc, #16]	; (2e0 <spi40_rd8+0x2c>)
    spi40_wr8(AX5043_MATCH0PAT0,  0xCC);
     2d0:	4798      	blx	r3
     2d2:	7820      	ldrb	r0, [r4, #0]
     2d4:	b002      	add	sp, #8
    spi40_wr8(AX5043_MATCH0LEN,  0x1F);
     2d6:	bd10      	pop	{r4, pc}
     2d8:	00000221 	.word	0x00000221
     2dc:	0000029d 	.word	0x0000029d
    spi40_wr8(AX5043_MATCH0MAX,  0x1F);
     2e0:	00000281 	.word	0x00000281

000002e4 <spi40_write>:
    spi40_wr8(AX5043_MATCH1PAT1,  0x55);
     2e4:	b510      	push	{r4, lr}
     2e6:	000a      	movs	r2, r1
     2e8:	0001      	movs	r1, r0
     2ea:	4802      	ldr	r0, [pc, #8]	; (2f4 <spi40_write+0x10>)
    spi40_wr8(AX5043_MATCH1PAT0,  0x55);
     2ec:	4b02      	ldr	r3, [pc, #8]	; (2f8 <spi40_write+0x14>)
     2ee:	4798      	blx	r3
     2f0:	bd10      	pop	{r4, pc}
    spi40_wr8(AX5043_MATCH1LEN,  0x0A);
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	20000060 	.word	0x20000060
     2f8:	00000e45 	.word	0x00000e45

000002fc <spi40_wr8>:
    spi40_wr8(AX5043_MATCH1MAX,  0x0A);
     2fc:	b510      	push	{r4, lr}
     2fe:	b082      	sub	sp, #8
    spi40_wr8(AX5043_TMGTXBOOST,  0x32);
     300:	466b      	mov	r3, sp
     302:	1ddc      	adds	r4, r3, #7
     304:	71d9      	strb	r1, [r3, #7]
     306:	2101      	movs	r1, #1
    spi40_wr8(AX5043_TMGTXSETTLE,  0x14);
     308:	4b05      	ldr	r3, [pc, #20]	; (320 <spi40_wr8+0x24>)
     30a:	4798      	blx	r3
     30c:	2101      	movs	r1, #1
    spi40_wr8(AX5043_TMGRXBOOST,  0x32);
     30e:	0020      	movs	r0, r4
     310:	4b04      	ldr	r3, [pc, #16]	; (324 <spi40_wr8+0x28>)
     312:	4798      	blx	r3
    spi40_wr8(AX5043_TMGRXSETTLE,  0x14);
     314:	0004      	movs	r4, r0
     316:	4b04      	ldr	r3, [pc, #16]	; (328 <spi40_wr8+0x2c>)
     318:	4798      	blx	r3
     31a:	0020      	movs	r0, r4
    spi40_wr8(AX5043_TMGRXOFFSACQ,  0x00);
     31c:	b002      	add	sp, #8
     31e:	bd10      	pop	{r4, pc}
     320:	00000221 	.word	0x00000221
    spi40_wr8(AX5043_TMGRXCOARSEAGC,  0x73);
     324:	000002e5 	.word	0x000002e5
    spi40_wr8(AX5043_TMGRXRSSI,  0x03);
     328:	00000281 	.word	0x00000281

0000032c <spi40_tx_init>:
     32c:	b570      	push	{r4, r5, r6, lr}
     32e:	2108      	movs	r1, #8
    spi40_wr8(AX5043_TMGRXPREAMBLE2,  0x35);
     330:	2010      	movs	r0, #16
     332:	4cfe      	ldr	r4, [pc, #1016]	; (72c <spi40_tx_init+0x400>)
     334:	47a0      	blx	r4
    spi40_wr8(AX5043_RSSIABSTHR,  0xE3);
     336:	2100      	movs	r1, #0
     338:	2011      	movs	r0, #17
     33a:	47a0      	blx	r4
    spi40_wr8(AX5043_BGNDRSSITHR,  0x00);
     33c:	2126      	movs	r1, #38	; 0x26
     33e:	2012      	movs	r0, #18
     340:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTCHUNKSIZE,  0x0D);
     342:	2102      	movs	r1, #2
     344:	2021      	movs	r0, #33	; 0x21
     346:	47a0      	blx	r4
     348:	2102      	movs	r1, #2
    spi40_wr8(AX5043_PKTACCEPTFLAGS,  0x20);
     34a:	2022      	movs	r0, #34	; 0x22
     34c:	47a0      	blx	r4
     34e:	2102      	movs	r1, #2
    spi40_wr8(AX5043_DACVALUE1,  0x00);
     350:	2023      	movs	r0, #35	; 0x23
     352:	47a0      	blx	r4
     354:	2102      	movs	r1, #2
     356:	2025      	movs	r0, #37	; 0x25
    spi40_wr8(AX5043_DACVALUE0,  0x00);
     358:	47a0      	blx	r4
     35a:	2102      	movs	r1, #2
     35c:	2026      	movs	r0, #38	; 0x26
    spi40_wr8(AX5043_DACCONFIG,  0x00);
     35e:	47a0      	blx	r4
     360:	2101      	movs	r1, #1
     362:	206e      	movs	r0, #110	; 0x6e
    spi40_wr8(AX5043_REF ,  0x03);
     364:	47a0      	blx	r4
     366:	2103      	movs	r1, #3
     368:	2080      	movs	r0, #128	; 0x80
    spi40_wr8(AX5043_XTALOSC,  0x03);
     36a:	0040      	lsls	r0, r0, #1
     36c:	47a0      	blx	r4
     36e:	2133      	movs	r1, #51	; 0x33
     370:	2002      	movs	r0, #2
    spi40_wr8(AX5043_XTALAMPL,  0x07);
     372:	30ff      	adds	r0, #255	; 0xff
     374:	47a0      	blx	r4
     376:	210b      	movs	r1, #11
    spi40_wr8(AX5043_0xF1C,  0x07);
     378:	2081      	movs	r0, #129	; 0x81
     37a:	0040      	lsls	r0, r0, #1
     37c:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF21,  0x68);
     37e:	210f      	movs	r1, #15
     380:	2004      	movs	r0, #4
     382:	30ff      	adds	r0, #255	; 0xff
    spi40_wr8(AX5043_0xF22,  0xFF);
     384:	47a0      	blx	r4
     386:	21ff      	movs	r1, #255	; 0xff
     388:	2082      	movs	r0, #130	; 0x82
    spi40_wr8(AX5043_0xF23,  0x84);
     38a:	0040      	lsls	r0, r0, #1
     38c:	47a0      	blx	r4
     38e:	21ff      	movs	r1, #255	; 0xff
    spi40_wr8(AX5043_0xF26,  0x98);
     390:	2006      	movs	r0, #6
     392:	30ff      	adds	r0, #255	; 0xff
     394:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF34,  0x08);
     396:	2100      	movs	r1, #0
     398:	2083      	movs	r0, #131	; 0x83
     39a:	0040      	lsls	r0, r0, #1
    spi40_wr8(AX5043_0xF35,  0x10);
     39c:	47a0      	blx	r4
     39e:	2100      	movs	r1, #0
     3a0:	2008      	movs	r0, #8
    spi40_wr8(AX5043_0xF44,  0x25);
     3a2:	30ff      	adds	r0, #255	; 0xff
     3a4:	47a0      	blx	r4
     3a6:	2100      	movs	r1, #0
    
    spi40_wr8(AX5043_PLLLOOP, 0x09);
     3a8:	2084      	movs	r0, #132	; 0x84
     3aa:	0040      	lsls	r0, r0, #1
     3ac:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLCPI, 0x02);
     3ae:	2180      	movs	r1, #128	; 0x80
     3b0:	200a      	movs	r0, #10
     3b2:	30ff      	adds	r0, #255	; 0xff
    spi40_wr8(AX5043_PLLVCODIV, 0x30);
     3b4:	47a0      	blx	r4
     3b6:	210d      	movs	r1, #13
     3b8:	2085      	movs	r0, #133	; 0x85
    spi40_wr8(AX5043_XTALCAP, 0x13);
     3ba:	0040      	lsls	r0, r0, #1
     3bc:	47a0      	blx	r4
     3be:	21d8      	movs	r1, #216	; 0xd8
     3c0:	200c      	movs	r0, #12
    spi40_wr8(AX5043_0xF00, 0x0F);
     3c2:	30ff      	adds	r0, #255	; 0xff
     3c4:	47a0      	blx	r4
     3c6:	21c5      	movs	r1, #197	; 0xc5
     3c8:	2086      	movs	r0, #134	; 0x86
    spi40_wr8(AX5043_0xF18, 0x06);
     3ca:	0040      	lsls	r0, r0, #1
     3cc:	47a0      	blx	r4
     3ce:	2100      	movs	r1, #0
}    
     3d0:	200e      	movs	r0, #14
     3d2:	30ff      	adds	r0, #255	; 0xff
     3d4:	47a0      	blx	r4
     3d6:	21c5      	movs	r1, #197	; 0xc5
     3d8:	2087      	movs	r0, #135	; 0x87
     3da:	0040      	lsls	r0, r0, #1
     3dc:	47a0      	blx	r4
     3de:	2100      	movs	r1, #0
     3e0:	2010      	movs	r0, #16
     3e2:	30ff      	adds	r0, #255	; 0xff
     3e4:	47a0      	blx	r4
     3e6:	2100      	movs	r1, #0
     3e8:	2016      	movs	r0, #22
     3ea:	30ff      	adds	r0, #255	; 0xff
     3ec:	47a0      	blx	r4
     3ee:	21f4      	movs	r1, #244	; 0xf4
     3f0:	2018      	movs	r0, #24
     3f2:	30ff      	adds	r0, #255	; 0xff
     3f4:	47a0      	blx	r4
     3f6:	21eb      	movs	r1, #235	; 0xeb
     3f8:	2090      	movs	r0, #144	; 0x90
     3fa:	0040      	lsls	r0, r0, #1
     3fc:	47a0      	blx	r4
     3fe:	2184      	movs	r1, #132	; 0x84
     400:	2022      	movs	r0, #34	; 0x22
     402:	30ff      	adds	r0, #255	; 0xff
     404:	47a0      	blx	r4
     406:	218f      	movs	r1, #143	; 0x8f
     408:	2092      	movs	r0, #146	; 0x92
     40a:	0040      	lsls	r0, r0, #1
     40c:	47a0      	blx	r4
     40e:	2189      	movs	r1, #137	; 0x89
     410:	2026      	movs	r0, #38	; 0x26
     412:	30ff      	adds	r0, #255	; 0xff
     414:	47a0      	blx	r4
     416:	21c3      	movs	r1, #195	; 0xc3
     418:	2093      	movs	r0, #147	; 0x93
     41a:	0040      	lsls	r0, r0, #1
     41c:	47a0      	blx	r4
     41e:	210f      	movs	r1, #15
     420:	2028      	movs	r0, #40	; 0x28
     422:	30ff      	adds	r0, #255	; 0xff
     424:	47a0      	blx	r4
     426:	211f      	movs	r1, #31
     428:	2094      	movs	r0, #148	; 0x94
     42a:	0040      	lsls	r0, r0, #1
     42c:	47a0      	blx	r4
     42e:	210d      	movs	r1, #13
     430:	202a      	movs	r0, #42	; 0x2a
     432:	30ff      	adds	r0, #255	; 0xff
     434:	47a0      	blx	r4
     436:	210d      	movs	r1, #13
     438:	2095      	movs	r0, #149	; 0x95
     43a:	0040      	lsls	r0, r0, #1
     43c:	47a0      	blx	r4
     43e:	2106      	movs	r1, #6
     440:	202c      	movs	r0, #44	; 0x2c
     442:	30ff      	adds	r0, #255	; 0xff
     444:	47a0      	blx	r4
     446:	2100      	movs	r1, #0
     448:	2096      	movs	r0, #150	; 0x96
     44a:	0040      	lsls	r0, r0, #1
     44c:	47a0      	blx	r4
     44e:	2100      	movs	r1, #0
    spi40_wr8(AX5043_FREQDEV00, 0x00);
     450:	202e      	movs	r0, #46	; 0x2e
     452:	30ff      	adds	r0, #255	; 0xff
     454:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES0, 0x00);
     456:	2100      	movs	r1, #0
     458:	2030      	movs	r0, #48	; 0x30
     45a:	30ff      	adds	r0, #255	; 0xff
     45c:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN1, 0xEB);
     45e:	21eb      	movs	r1, #235	; 0xeb
     460:	2098      	movs	r0, #152	; 0x98
     462:	0040      	lsls	r0, r0, #1
     464:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET1, 0x84);
     466:	2184      	movs	r1, #132	; 0x84
     468:	2032      	movs	r0, #50	; 0x32
     46a:	30ff      	adds	r0, #255	; 0xff
     46c:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST1, 0x00);
     46e:	2100      	movs	r1, #0
     470:	2099      	movs	r0, #153	; 0x99
     472:	0040      	lsls	r0, r0, #1
     474:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX1, 0x00);
     476:	2100      	movs	r1, #0
     478:	2034      	movs	r0, #52	; 0x34
     47a:	30ff      	adds	r0, #255	; 0xff
     47c:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN1, 0x8D);
     47e:	218d      	movs	r1, #141	; 0x8d
     480:	209a      	movs	r0, #154	; 0x9a
     482:	0040      	lsls	r0, r0, #1
     484:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN1, 0x88);
     486:	2188      	movs	r1, #136	; 0x88
     488:	2036      	movs	r0, #54	; 0x36
     48a:	30ff      	adds	r0, #255	; 0xff
     48c:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN1, 0xC3);
     48e:	21c3      	movs	r1, #195	; 0xc3
     490:	209b      	movs	r0, #155	; 0x9b
     492:	0040      	lsls	r0, r0, #1
     494:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA1, 0x0F);
     496:	210f      	movs	r1, #15
     498:	2038      	movs	r0, #56	; 0x38
     49a:	30ff      	adds	r0, #255	; 0xff
     49c:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB1, 0x1F);
     49e:	211f      	movs	r1, #31
     4a0:	209c      	movs	r0, #156	; 0x9c
     4a2:	0040      	lsls	r0, r0, #1
     4a4:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC1, 0x0D);
     4a6:	210d      	movs	r1, #13
     4a8:	203a      	movs	r0, #58	; 0x3a
     4aa:	30ff      	adds	r0, #255	; 0xff
     4ac:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND1, 0x0D);
     4ae:	210d      	movs	r1, #13
     4b0:	209d      	movs	r0, #157	; 0x9d
     4b2:	0040      	lsls	r0, r0, #1
     4b4:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN1, 0x06);
     4b6:	2106      	movs	r1, #6
     4b8:	203c      	movs	r0, #60	; 0x3c
     4ba:	30ff      	adds	r0, #255	; 0xff
     4bc:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV11, 0x00);
     4be:	2100      	movs	r1, #0
     4c0:	209e      	movs	r0, #158	; 0x9e
     4c2:	0040      	lsls	r0, r0, #1
     4c4:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV01, 0x3B);
     4c6:	213b      	movs	r1, #59	; 0x3b
     4c8:	203e      	movs	r0, #62	; 0x3e
     4ca:	30ff      	adds	r0, #255	; 0xff
     4cc:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK1, 0x16);
     4ce:	2116      	movs	r1, #22
     4d0:	209f      	movs	r0, #159	; 0x9f
     4d2:	0040      	lsls	r0, r0, #1
     4d4:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES1, 0x00);
     4d6:	2100      	movs	r1, #0
     4d8:	2040      	movs	r0, #64	; 0x40
     4da:	30ff      	adds	r0, #255	; 0xff
     4dc:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCGAIN3, 0xFF);
     4de:	21ff      	movs	r1, #255	; 0xff
     4e0:	20a8      	movs	r0, #168	; 0xa8
     4e2:	0040      	lsls	r0, r0, #1
     4e4:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCTARGET3, 0x84);
     4e6:	2184      	movs	r1, #132	; 0x84
     4e8:	2052      	movs	r0, #82	; 0x52
     4ea:	30ff      	adds	r0, #255	; 0xff
     4ec:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCAHYST3, 0x00);
     4ee:	2100      	movs	r1, #0
     4f0:	20a9      	movs	r0, #169	; 0xa9
     4f2:	0040      	lsls	r0, r0, #1
     4f4:	47a0      	blx	r4
    spi40_wr8(AX5043_AGCMINMAX3, 0x00);
     4f6:	2100      	movs	r1, #0
     4f8:	2054      	movs	r0, #84	; 0x54
     4fa:	30ff      	adds	r0, #255	; 0xff
     4fc:	47a0      	blx	r4
    spi40_wr8(AX5043_TIMEGAIN3, 0x8C);
     4fe:	218c      	movs	r1, #140	; 0x8c
     500:	20aa      	movs	r0, #170	; 0xaa
     502:	0040      	lsls	r0, r0, #1
     504:	47a0      	blx	r4
    spi40_wr8(AX5043_DRGAIN3, 0x87);
     506:	2187      	movs	r1, #135	; 0x87
     508:	2056      	movs	r0, #86	; 0x56
     50a:	30ff      	adds	r0, #255	; 0xff
     50c:	47a0      	blx	r4
    spi40_wr8(AX5043_PHASEGAIN3, 0xC3);
     50e:	21c3      	movs	r1, #195	; 0xc3
     510:	20ab      	movs	r0, #171	; 0xab
     512:	0040      	lsls	r0, r0, #1
     514:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINA3, 0x0F);
     516:	210f      	movs	r1, #15
     518:	2058      	movs	r0, #88	; 0x58
     51a:	30ff      	adds	r0, #255	; 0xff
     51c:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINB3, 0x1F);
     51e:	211f      	movs	r1, #31
     520:	20ac      	movs	r0, #172	; 0xac
     522:	0040      	lsls	r0, r0, #1
     524:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAINC3, 0x0D);
     526:	210d      	movs	r1, #13
     528:	205a      	movs	r0, #90	; 0x5a
     52a:	30ff      	adds	r0, #255	; 0xff
     52c:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQGAIND3, 0x0D);
     52e:	210d      	movs	r1, #13
     530:	20ad      	movs	r0, #173	; 0xad
     532:	0040      	lsls	r0, r0, #1
     534:	47a0      	blx	r4
    spi40_wr8(AX5043_AMPLGAIN3, 0x06);
     536:	2106      	movs	r1, #6
     538:	205c      	movs	r0, #92	; 0x5c
     53a:	30ff      	adds	r0, #255	; 0xff
     53c:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV13, 0x00);
     53e:	2100      	movs	r1, #0
     540:	20ae      	movs	r0, #174	; 0xae
     542:	0040      	lsls	r0, r0, #1
     544:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQDEV03, 0x3B);
     546:	213b      	movs	r1, #59	; 0x3b
     548:	205e      	movs	r0, #94	; 0x5e
     54a:	30ff      	adds	r0, #255	; 0xff
     54c:	47a0      	blx	r4
    spi40_wr8(AX5043_FOURFSK3, 0x16);
     54e:	2116      	movs	r1, #22
     550:	20af      	movs	r0, #175	; 0xaf
     552:	0040      	lsls	r0, r0, #1
     554:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSRES3, 0x00);
     556:	2100      	movs	r1, #0
     558:	2060      	movs	r0, #96	; 0x60
     55a:	30ff      	adds	r0, #255	; 0xff
     55c:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGF, 0x00);
     55e:	2100      	movs	r1, #0
     560:	20b0      	movs	r0, #176	; 0xb0
     562:	0040      	lsls	r0, r0, #1
     564:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV2, 0x00);
     566:	2100      	movs	r1, #0
     568:	2062      	movs	r0, #98	; 0x62
     56a:	30ff      	adds	r0, #255	; 0xff
     56c:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV1, 0x00);
     56e:	2100      	movs	r1, #0
     570:	20b1      	movs	r0, #177	; 0xb1
     572:	0040      	lsls	r0, r0, #1
     574:	47a0      	blx	r4
    spi40_wr8(AX5043_FSKDEV0, 0x23);
     576:	2123      	movs	r1, #35	; 0x23
     578:	2064      	movs	r0, #100	; 0x64
     57a:	30ff      	adds	r0, #255	; 0xff
     57c:	47a0      	blx	r4
    spi40_wr8(AX5043_MODCFGA, 0x05);
     57e:	2105      	movs	r1, #5
     580:	20b2      	movs	r0, #178	; 0xb2
     582:	0040      	lsls	r0, r0, #1
     584:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE2, 0x00);
     586:	2100      	movs	r1, #0
     588:	2066      	movs	r0, #102	; 0x66
     58a:	30ff      	adds	r0, #255	; 0xff
     58c:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE1, 0x00);
     58e:	2100      	movs	r1, #0
     590:	20b3      	movs	r0, #179	; 0xb3
     592:	0040      	lsls	r0, r0, #1
     594:	47a0      	blx	r4
    spi40_wr8(AX5043_TXRATE0, 0x69);
     596:	2169      	movs	r1, #105	; 0x69
     598:	2068      	movs	r0, #104	; 0x68
     59a:	30ff      	adds	r0, #255	; 0xff
     59c:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB1, 0x0F);
     59e:	210f      	movs	r1, #15
     5a0:	20b5      	movs	r0, #181	; 0xb5
     5a2:	0040      	lsls	r0, r0, #1
     5a4:	47a0      	blx	r4
    spi40_wr8(AX5043_TXPWRCOEFFB0, 0xFF);
     5a6:	21ff      	movs	r1, #255	; 0xff
     5a8:	206c      	movs	r0, #108	; 0x6c
     5aa:	30ff      	adds	r0, #255	; 0xff
     5ac:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCOI, 0x8A);
     5ae:	218a      	movs	r1, #138	; 0x8a
     5b0:	20c0      	movs	r0, #192	; 0xc0
     5b2:	0040      	lsls	r0, r0, #1
     5b4:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLRNGCLK, 0x03);
     5b6:	2103      	movs	r1, #3
     5b8:	2084      	movs	r0, #132	; 0x84
     5ba:	30ff      	adds	r0, #255	; 0xff
     5bc:	47a0      	blx	r4
    spi40_wr8(AX5043_BBTUNE, 0x0F);
     5be:	210f      	movs	r1, #15
     5c0:	20c4      	movs	r0, #196	; 0xc4
     5c2:	0040      	lsls	r0, r0, #1
     5c4:	47a0      	blx	r4
    spi40_wr8(AX5043_BBOFFSCAP, 0x77);
     5c6:	2177      	movs	r1, #119	; 0x77
     5c8:	208a      	movs	r0, #138	; 0x8a
     5ca:	30ff      	adds	r0, #255	; 0xff
     5cc:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTADDRCFG, 0x00);
     5ce:	2100      	movs	r1, #0
     5d0:	2080      	movs	r0, #128	; 0x80
     5d2:	0080      	lsls	r0, r0, #2
     5d4:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENCFG, 0xF0);  // set to 0xF0 for arbitrary length packet
     5d6:	21f0      	movs	r1, #240	; 0xf0
     5d8:	4855      	ldr	r0, [pc, #340]	; (730 <spi40_tx_init+0x404>)
     5da:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTLENOFFSET, 0x00);
     5dc:	2100      	movs	r1, #0
     5de:	4855      	ldr	r0, [pc, #340]	; (734 <spi40_tx_init+0x408>)
     5e0:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTMAXLEN, 0xFF);  // set to 0xFF for abritraty length packet
     5e2:	21ff      	movs	r1, #255	; 0xff
     5e4:	4854      	ldr	r0, [pc, #336]	; (738 <spi40_tx_init+0x40c>)
     5e6:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT3, 0xAA);
     5e8:	21aa      	movs	r1, #170	; 0xaa
     5ea:	2084      	movs	r0, #132	; 0x84
     5ec:	0080      	lsls	r0, r0, #2
     5ee:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT2, 0xCC);
     5f0:	21cc      	movs	r1, #204	; 0xcc
     5f2:	4852      	ldr	r0, [pc, #328]	; (73c <spi40_tx_init+0x410>)
     5f4:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT1, 0xAA);
     5f6:	21aa      	movs	r1, #170	; 0xaa
     5f8:	4851      	ldr	r0, [pc, #324]	; (740 <spi40_tx_init+0x414>)
     5fa:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0PAT0, 0xCC);
     5fc:	21cc      	movs	r1, #204	; 0xcc
     5fe:	4851      	ldr	r0, [pc, #324]	; (744 <spi40_tx_init+0x418>)
     600:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0LEN, 0x1F);
     602:	211f      	movs	r1, #31
     604:	2085      	movs	r0, #133	; 0x85
     606:	0080      	lsls	r0, r0, #2
     608:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0MIN, 0x00);  //
     60a:	2100      	movs	r1, #0
     60c:	484e      	ldr	r0, [pc, #312]	; (748 <spi40_tx_init+0x41c>)
     60e:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH0MAX, 0x1F);
     610:	211f      	movs	r1, #31
     612:	484e      	ldr	r0, [pc, #312]	; (74c <spi40_tx_init+0x420>)
     614:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT1, 0x55);
     616:	2155      	movs	r1, #85	; 0x55
     618:	2086      	movs	r0, #134	; 0x86
     61a:	0080      	lsls	r0, r0, #2
     61c:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1PAT0, 0x55);
     61e:	2155      	movs	r1, #85	; 0x55
     620:	484b      	ldr	r0, [pc, #300]	; (750 <spi40_tx_init+0x424>)
     622:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1LEN, 0x0A);  //
     624:	210a      	movs	r1, #10
     626:	2087      	movs	r0, #135	; 0x87
     628:	0080      	lsls	r0, r0, #2
     62a:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1MIN, 0x00);  //
     62c:	2100      	movs	r1, #0
     62e:	4849      	ldr	r0, [pc, #292]	; (754 <spi40_tx_init+0x428>)
     630:	47a0      	blx	r4
    spi40_wr8(AX5043_MATCH1MAX, 0x0A);  //
     632:	210a      	movs	r1, #10
     634:	4848      	ldr	r0, [pc, #288]	; (758 <spi40_tx_init+0x42c>)
     636:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXBOOST, 0x32);
     638:	2132      	movs	r1, #50	; 0x32
     63a:	2088      	movs	r0, #136	; 0x88
     63c:	0080      	lsls	r0, r0, #2
     63e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGTXSETTLE, 0x14);
     640:	2114      	movs	r1, #20
     642:	4846      	ldr	r0, [pc, #280]	; (75c <spi40_tx_init+0x430>)
     644:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXBOOST, 0x32);
     646:	2132      	movs	r1, #50	; 0x32
     648:	4845      	ldr	r0, [pc, #276]	; (760 <spi40_tx_init+0x434>)
     64a:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXSETTLE, 0x14);
     64c:	2114      	movs	r1, #20
     64e:	2089      	movs	r0, #137	; 0x89
     650:	0080      	lsls	r0, r0, #2
     652:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXOFFSACQ, 0x00);
     654:	2100      	movs	r1, #0
     656:	4843      	ldr	r0, [pc, #268]	; (764 <spi40_tx_init+0x438>)
     658:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXCOARSEAGC, 0x73);
     65a:	2173      	movs	r1, #115	; 0x73
     65c:	4842      	ldr	r0, [pc, #264]	; (768 <spi40_tx_init+0x43c>)
     65e:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXRSSI, 0x03);
     660:	2103      	movs	r1, #3
     662:	208a      	movs	r0, #138	; 0x8a
     664:	0080      	lsls	r0, r0, #2
     666:	47a0      	blx	r4
    spi40_wr8(AX5043_TMGRXPREAMBLE2, 0x35);
     668:	2135      	movs	r1, #53	; 0x35
     66a:	4840      	ldr	r0, [pc, #256]	; (76c <spi40_tx_init+0x440>)
     66c:	47a0      	blx	r4
    spi40_wr8(AX5043_RSSIABSTHR, 0xE8);
     66e:	21e8      	movs	r1, #232	; 0xe8
     670:	483f      	ldr	r0, [pc, #252]	; (770 <spi40_tx_init+0x444>)
     672:	47a0      	blx	r4
    spi40_wr8(AX5043_BGNDRSSITHR, 0x00);
     674:	2100      	movs	r1, #0
     676:	483f      	ldr	r0, [pc, #252]	; (774 <spi40_tx_init+0x448>)
     678:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTCHUNKSIZE, 0x0D);
     67a:	210d      	movs	r1, #13
     67c:	208c      	movs	r0, #140	; 0x8c
     67e:	0080      	lsls	r0, r0, #2
     680:	47a0      	blx	r4
    spi40_wr8(AX5043_PKTACCEPTFLAGS, 0x20);
     682:	2120      	movs	r1, #32
     684:	483c      	ldr	r0, [pc, #240]	; (778 <spi40_tx_init+0x44c>)
     686:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE1, 0x00);
     688:	2100      	movs	r1, #0
     68a:	20cc      	movs	r0, #204	; 0xcc
     68c:	0080      	lsls	r0, r0, #2
     68e:	47a0      	blx	r4
    spi40_wr8(AX5043_DACVALUE0, 0x00);
     690:	2100      	movs	r1, #0
     692:	483a      	ldr	r0, [pc, #232]	; (77c <spi40_tx_init+0x450>)
     694:	47a0      	blx	r4
    spi40_wr8(AX5043_DACCONFIG, 0x00);
     696:	2100      	movs	r1, #0
     698:	4839      	ldr	r0, [pc, #228]	; (780 <spi40_tx_init+0x454>)
     69a:	47a0      	blx	r4
    spi40_wr8(AX5043_REF, 0x03);
     69c:	2103      	movs	r1, #3
     69e:	4839      	ldr	r0, [pc, #228]	; (784 <spi40_tx_init+0x458>)
     6a0:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALOSC, 0x03);
     6a2:	2103      	movs	r1, #3
     6a4:	20f1      	movs	r0, #241	; 0xf1
     6a6:	0100      	lsls	r0, r0, #4
     6a8:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALAMPL, 0x07);
     6aa:	4d37      	ldr	r5, [pc, #220]	; (788 <spi40_tx_init+0x45c>)
     6ac:	2107      	movs	r1, #7
     6ae:	0028      	movs	r0, r5
     6b0:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF1C, 0x07);
     6b2:	2107      	movs	r1, #7
     6b4:	4835      	ldr	r0, [pc, #212]	; (78c <spi40_tx_init+0x460>)
     6b6:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF21, 0x68);
     6b8:	2168      	movs	r1, #104	; 0x68
     6ba:	4835      	ldr	r0, [pc, #212]	; (790 <spi40_tx_init+0x464>)
     6bc:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF22, 0xFF);
     6be:	21ff      	movs	r1, #255	; 0xff
     6c0:	4834      	ldr	r0, [pc, #208]	; (794 <spi40_tx_init+0x468>)
     6c2:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF23, 0x84);
     6c4:	2184      	movs	r1, #132	; 0x84
     6c6:	4834      	ldr	r0, [pc, #208]	; (798 <spi40_tx_init+0x46c>)
     6c8:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF26, 0x98);
     6ca:	2198      	movs	r1, #152	; 0x98
     6cc:	4833      	ldr	r0, [pc, #204]	; (79c <spi40_tx_init+0x470>)
     6ce:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF34, 0x08);
     6d0:	2108      	movs	r1, #8
     6d2:	4833      	ldr	r0, [pc, #204]	; (7a0 <spi40_tx_init+0x474>)
     6d4:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF35, 0x10);
     6d6:	2110      	movs	r1, #16
     6d8:	4832      	ldr	r0, [pc, #200]	; (7a4 <spi40_tx_init+0x478>)
     6da:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF44, 0x25);
     6dc:	2125      	movs	r1, #37	; 0x25
     6de:	4832      	ldr	r0, [pc, #200]	; (7a8 <spi40_tx_init+0x47c>)
     6e0:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLLOOP, 0x09);
     6e2:	2109      	movs	r1, #9
     6e4:	2030      	movs	r0, #48	; 0x30
     6e6:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLCPI, 0x02);
     6e8:	2102      	movs	r1, #2
     6ea:	2031      	movs	r0, #49	; 0x31
     6ec:	47a0      	blx	r4
    spi40_wr8(AX5043_PLLVCODIV, 0x30);
     6ee:	2130      	movs	r1, #48	; 0x30
     6f0:	2032      	movs	r0, #50	; 0x32
     6f2:	47a0      	blx	r4
    spi40_wr8(AX5043_XTALCAP, 0x13);
     6f4:	2113      	movs	r1, #19
     6f6:	20c2      	movs	r0, #194	; 0xc2
     6f8:	0040      	lsls	r0, r0, #1
     6fa:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF00, 0x0F);
     6fc:	210f      	movs	r1, #15
     6fe:	20f0      	movs	r0, #240	; 0xf0
     700:	0100      	lsls	r0, r0, #4
     702:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF18, 0x06);
     704:	2106      	movs	r1, #6
     706:	4829      	ldr	r0, [pc, #164]	; (7ac <spi40_tx_init+0x480>)
     708:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA0, 0x01);
     70a:	2101      	movs	r1, #1
     70c:	2037      	movs	r0, #55	; 0x37
     70e:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA1, 0x00);
     710:	2100      	movs	r1, #0
     712:	2036      	movs	r0, #54	; 0x36
     714:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA2, 0x90);
     716:	2190      	movs	r1, #144	; 0x90
     718:	2035      	movs	r0, #53	; 0x35
     71a:	47a0      	blx	r4
    spi40_wr8(AX5043_FREQA3, 0x0A);
     71c:	210a      	movs	r1, #10
     71e:	2034      	movs	r0, #52	; 0x34
     720:	47a0      	blx	r4
    spi40_wr8(AX5043_0xF11, 0x07);
     722:	2107      	movs	r1, #7
     724:	0028      	movs	r0, r5
     726:	47a0      	blx	r4
}
     728:	e042      	b.n	7b0 <spi40_tx_init+0x484>
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	000002fd 	.word	0x000002fd
     730:	00000201 	.word	0x00000201
     734:	00000202 	.word	0x00000202
     738:	00000203 	.word	0x00000203
     73c:	00000211 	.word	0x00000211
     740:	00000212 	.word	0x00000212
     744:	00000213 	.word	0x00000213
     748:	00000215 	.word	0x00000215
     74c:	00000216 	.word	0x00000216
     750:	00000219 	.word	0x00000219
     754:	0000021d 	.word	0x0000021d
     758:	0000021e 	.word	0x0000021e
     75c:	00000221 	.word	0x00000221
     760:	00000223 	.word	0x00000223
     764:	00000225 	.word	0x00000225
     768:	00000226 	.word	0x00000226
     76c:	0000022a 	.word	0x0000022a
     770:	0000022d 	.word	0x0000022d
     774:	0000022f 	.word	0x0000022f
     778:	00000233 	.word	0x00000233
     77c:	00000331 	.word	0x00000331
     780:	00000332 	.word	0x00000332
     784:	00000f0d 	.word	0x00000f0d
     788:	00000f11 	.word	0x00000f11
     78c:	00000f1c 	.word	0x00000f1c
     790:	00000f21 	.word	0x00000f21
     794:	00000f22 	.word	0x00000f22
     798:	00000f23 	.word	0x00000f23
     79c:	00000f26 	.word	0x00000f26
     7a0:	00000f34 	.word	0x00000f34
     7a4:	00000f35 	.word	0x00000f35
     7a8:	00000f44 	.word	0x00000f44
     7ac:	00000f18 	.word	0x00000f18
     7b0:	bd70      	pop	{r4, r5, r6, pc}
     7b2:	46c0      	nop			; (mov r8, r8)

000007b4 <spi40_autorange>:
{
     7b4:	b510      	push	{r4, lr}
    spi40_wr8(AX5043_PLLRANGINGA, 0xFF);
     7b6:	21ff      	movs	r1, #255	; 0xff
     7b8:	2033      	movs	r0, #51	; 0x33
     7ba:	4b04      	ldr	r3, [pc, #16]	; (7cc <spi40_autorange+0x18>)
     7bc:	4798      	blx	r3
    while(spi40_rd8(AX5043_PLLRANGINGA) & 0x10);   
     7be:	2033      	movs	r0, #51	; 0x33
     7c0:	4b03      	ldr	r3, [pc, #12]	; (7d0 <spi40_autorange+0x1c>)
     7c2:	4798      	blx	r3
     7c4:	06c3      	lsls	r3, r0, #27
     7c6:	d4fa      	bmi.n	7be <spi40_autorange+0xa>
}
     7c8:	bd10      	pop	{r4, pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	000002fd 	.word	0x000002fd
     7d0:	000002b5 	.word	0x000002b5

000007d4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     7d4:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     7d6:	2000      	movs	r0, #0
     7d8:	4b08      	ldr	r3, [pc, #32]	; (7fc <delay_init+0x28>)
     7da:	4798      	blx	r3
	cycles_per_ms /= 1000;
     7dc:	4c08      	ldr	r4, [pc, #32]	; (800 <delay_init+0x2c>)
     7de:	21fa      	movs	r1, #250	; 0xfa
     7e0:	0089      	lsls	r1, r1, #2
     7e2:	47a0      	blx	r4
     7e4:	4b07      	ldr	r3, [pc, #28]	; (804 <delay_init+0x30>)
     7e6:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     7e8:	21fa      	movs	r1, #250	; 0xfa
     7ea:	0089      	lsls	r1, r1, #2
     7ec:	47a0      	blx	r4
     7ee:	4b06      	ldr	r3, [pc, #24]	; (808 <delay_init+0x34>)
     7f0:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     7f2:	2205      	movs	r2, #5
     7f4:	4b05      	ldr	r3, [pc, #20]	; (80c <delay_init+0x38>)
     7f6:	601a      	str	r2, [r3, #0]
}
     7f8:	bd10      	pop	{r4, pc}
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	0000196d 	.word	0x0000196d
     800:	00001ef1 	.word	0x00001ef1
     804:	20000000 	.word	0x20000000
     808:	20000004 	.word	0x20000004
     80c:	e000e010 	.word	0xe000e010

00000810 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     810:	e000      	b.n	814 <delay_cycles_ms+0x4>
{
     812:	0010      	movs	r0, r2
	while (n--) {
     814:	1e42      	subs	r2, r0, #1
     816:	2800      	cmp	r0, #0
     818:	d00c      	beq.n	834 <delay_cycles_ms+0x24>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     81a:	4b07      	ldr	r3, [pc, #28]	; (838 <delay_cycles_ms+0x28>)
     81c:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     81e:	2b00      	cmp	r3, #0
     820:	d0f7      	beq.n	812 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
     822:	4906      	ldr	r1, [pc, #24]	; (83c <delay_cycles_ms+0x2c>)
     824:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
     826:	2300      	movs	r3, #0
     828:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     82a:	4b04      	ldr	r3, [pc, #16]	; (83c <delay_cycles_ms+0x2c>)
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	03db      	lsls	r3, r3, #15
     830:	d5fb      	bpl.n	82a <delay_cycles_ms+0x1a>
     832:	e7ee      	b.n	812 <delay_cycles_ms+0x2>
	}
}
     834:	4770      	bx	lr
     836:	46c0      	nop			; (mov r8, r8)
     838:	20000000 	.word	0x20000000
     83c:	e000e010 	.word	0xe000e010

00000840 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     840:	b500      	push	{lr}
     842:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     844:	ab01      	add	r3, sp, #4
     846:	2280      	movs	r2, #128	; 0x80
     848:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     84a:	780a      	ldrb	r2, [r1, #0]
     84c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     84e:	784a      	ldrb	r2, [r1, #1]
     850:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     852:	788a      	ldrb	r2, [r1, #2]
     854:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     856:	0019      	movs	r1, r3
     858:	4b01      	ldr	r3, [pc, #4]	; (860 <port_pin_set_config+0x20>)
     85a:	4798      	blx	r3
}
     85c:	b003      	add	sp, #12
     85e:	bd00      	pop	{pc}
     860:	00001b85 	.word	0x00001b85

00000864 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     864:	0849      	lsrs	r1, r1, #1
     866:	4281      	cmp	r1, r0
     868:	d201      	bcs.n	86e <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     86a:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     86c:	4770      	bx	lr
     86e:	2300      	movs	r3, #0
     870:	e002      	b.n	878 <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
     872:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     874:	3301      	adds	r3, #1
     876:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     878:	4281      	cmp	r1, r0
     87a:	d2fa      	bcs.n	872 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
     87c:	3b01      	subs	r3, #1
     87e:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
     880:	2bff      	cmp	r3, #255	; 0xff
     882:	d901      	bls.n	888 <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     884:	2040      	movs	r0, #64	; 0x40
     886:	e7f1      	b.n	86c <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
     888:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     88a:	2000      	movs	r0, #0
     88c:	e7ee      	b.n	86c <_sercom_get_sync_baud_val+0x8>
	...

00000890 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     890:	b510      	push	{r4, lr}
     892:	b082      	sub	sp, #8
     894:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     896:	4b0e      	ldr	r3, [pc, #56]	; (8d0 <sercom_set_gclk_generator+0x40>)
     898:	781b      	ldrb	r3, [r3, #0]
     89a:	2b00      	cmp	r3, #0
     89c:	d007      	beq.n	8ae <sercom_set_gclk_generator+0x1e>
     89e:	2900      	cmp	r1, #0
     8a0:	d105      	bne.n	8ae <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     8a2:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <sercom_set_gclk_generator+0x40>)
     8a4:	785b      	ldrb	r3, [r3, #1]
     8a6:	4283      	cmp	r3, r0
     8a8:	d010      	beq.n	8cc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     8aa:	201d      	movs	r0, #29
     8ac:	e00c      	b.n	8c8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     8ae:	a901      	add	r1, sp, #4
     8b0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8b2:	2013      	movs	r0, #19
     8b4:	4b07      	ldr	r3, [pc, #28]	; (8d4 <sercom_set_gclk_generator+0x44>)
     8b6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     8b8:	2013      	movs	r0, #19
     8ba:	4b07      	ldr	r3, [pc, #28]	; (8d8 <sercom_set_gclk_generator+0x48>)
     8bc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     8be:	4b04      	ldr	r3, [pc, #16]	; (8d0 <sercom_set_gclk_generator+0x40>)
     8c0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     8c2:	2201      	movs	r2, #1
     8c4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     8c6:	2000      	movs	r0, #0
}
     8c8:	b002      	add	sp, #8
     8ca:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     8cc:	2000      	movs	r0, #0
     8ce:	e7fb      	b.n	8c8 <sercom_set_gclk_generator+0x38>
     8d0:	2000002c 	.word	0x2000002c
     8d4:	00001aa1 	.word	0x00001aa1
     8d8:	00001a19 	.word	0x00001a19

000008dc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8dc:	4b2b      	ldr	r3, [pc, #172]	; (98c <_sercom_get_default_pad+0xb0>)
     8de:	4298      	cmp	r0, r3
     8e0:	d023      	beq.n	92a <_sercom_get_default_pad+0x4e>
     8e2:	d90f      	bls.n	904 <_sercom_get_default_pad+0x28>
     8e4:	4b2a      	ldr	r3, [pc, #168]	; (990 <_sercom_get_default_pad+0xb4>)
     8e6:	4298      	cmp	r0, r3
     8e8:	d02f      	beq.n	94a <_sercom_get_default_pad+0x6e>
     8ea:	4b2a      	ldr	r3, [pc, #168]	; (994 <_sercom_get_default_pad+0xb8>)
     8ec:	4298      	cmp	r0, r3
     8ee:	d142      	bne.n	976 <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8f0:	2901      	cmp	r1, #1
     8f2:	d048      	beq.n	986 <_sercom_get_default_pad+0xaa>
     8f4:	2900      	cmp	r1, #0
     8f6:	d038      	beq.n	96a <_sercom_get_default_pad+0x8e>
     8f8:	2902      	cmp	r1, #2
     8fa:	d038      	beq.n	96e <_sercom_get_default_pad+0x92>
     8fc:	2903      	cmp	r1, #3
     8fe:	d038      	beq.n	972 <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
     900:	2000      	movs	r0, #0
     902:	e039      	b.n	978 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
     904:	4b24      	ldr	r3, [pc, #144]	; (998 <_sercom_get_default_pad+0xbc>)
     906:	4298      	cmp	r0, r3
     908:	d135      	bne.n	976 <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     90a:	2901      	cmp	r1, #1
     90c:	d035      	beq.n	97a <_sercom_get_default_pad+0x9e>
     90e:	2900      	cmp	r1, #0
     910:	d005      	beq.n	91e <_sercom_get_default_pad+0x42>
     912:	2902      	cmp	r1, #2
     914:	d005      	beq.n	922 <_sercom_get_default_pad+0x46>
     916:	2903      	cmp	r1, #3
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0x4a>
	return 0;
     91a:	2000      	movs	r0, #0
     91c:	e02c      	b.n	978 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     91e:	481f      	ldr	r0, [pc, #124]	; (99c <_sercom_get_default_pad+0xc0>)
     920:	e02a      	b.n	978 <_sercom_get_default_pad+0x9c>
     922:	481f      	ldr	r0, [pc, #124]	; (9a0 <_sercom_get_default_pad+0xc4>)
     924:	e028      	b.n	978 <_sercom_get_default_pad+0x9c>
     926:	481f      	ldr	r0, [pc, #124]	; (9a4 <_sercom_get_default_pad+0xc8>)
     928:	e026      	b.n	978 <_sercom_get_default_pad+0x9c>
     92a:	2901      	cmp	r1, #1
     92c:	d027      	beq.n	97e <_sercom_get_default_pad+0xa2>
     92e:	2900      	cmp	r1, #0
     930:	d005      	beq.n	93e <_sercom_get_default_pad+0x62>
     932:	2902      	cmp	r1, #2
     934:	d005      	beq.n	942 <_sercom_get_default_pad+0x66>
     936:	2903      	cmp	r1, #3
     938:	d005      	beq.n	946 <_sercom_get_default_pad+0x6a>
	return 0;
     93a:	2000      	movs	r0, #0
     93c:	e01c      	b.n	978 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     93e:	2003      	movs	r0, #3
     940:	e01a      	b.n	978 <_sercom_get_default_pad+0x9c>
     942:	4819      	ldr	r0, [pc, #100]	; (9a8 <_sercom_get_default_pad+0xcc>)
     944:	e018      	b.n	978 <_sercom_get_default_pad+0x9c>
     946:	4819      	ldr	r0, [pc, #100]	; (9ac <_sercom_get_default_pad+0xd0>)
     948:	e016      	b.n	978 <_sercom_get_default_pad+0x9c>
     94a:	2901      	cmp	r1, #1
     94c:	d019      	beq.n	982 <_sercom_get_default_pad+0xa6>
     94e:	2900      	cmp	r1, #0
     950:	d005      	beq.n	95e <_sercom_get_default_pad+0x82>
     952:	2902      	cmp	r1, #2
     954:	d005      	beq.n	962 <_sercom_get_default_pad+0x86>
     956:	2903      	cmp	r1, #3
     958:	d005      	beq.n	966 <_sercom_get_default_pad+0x8a>
	return 0;
     95a:	2000      	movs	r0, #0
     95c:	e00c      	b.n	978 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     95e:	4814      	ldr	r0, [pc, #80]	; (9b0 <_sercom_get_default_pad+0xd4>)
     960:	e00a      	b.n	978 <_sercom_get_default_pad+0x9c>
     962:	4814      	ldr	r0, [pc, #80]	; (9b4 <_sercom_get_default_pad+0xd8>)
     964:	e008      	b.n	978 <_sercom_get_default_pad+0x9c>
     966:	4814      	ldr	r0, [pc, #80]	; (9b8 <_sercom_get_default_pad+0xdc>)
     968:	e006      	b.n	978 <_sercom_get_default_pad+0x9c>
     96a:	4814      	ldr	r0, [pc, #80]	; (9bc <_sercom_get_default_pad+0xe0>)
     96c:	e004      	b.n	978 <_sercom_get_default_pad+0x9c>
     96e:	4814      	ldr	r0, [pc, #80]	; (9c0 <_sercom_get_default_pad+0xe4>)
     970:	e002      	b.n	978 <_sercom_get_default_pad+0x9c>
     972:	4814      	ldr	r0, [pc, #80]	; (9c4 <_sercom_get_default_pad+0xe8>)
     974:	e000      	b.n	978 <_sercom_get_default_pad+0x9c>
	return 0;
     976:	2000      	movs	r0, #0
}
     978:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     97a:	4813      	ldr	r0, [pc, #76]	; (9c8 <_sercom_get_default_pad+0xec>)
     97c:	e7fc      	b.n	978 <_sercom_get_default_pad+0x9c>
     97e:	4813      	ldr	r0, [pc, #76]	; (9cc <_sercom_get_default_pad+0xf0>)
     980:	e7fa      	b.n	978 <_sercom_get_default_pad+0x9c>
     982:	4813      	ldr	r0, [pc, #76]	; (9d0 <_sercom_get_default_pad+0xf4>)
     984:	e7f8      	b.n	978 <_sercom_get_default_pad+0x9c>
     986:	4813      	ldr	r0, [pc, #76]	; (9d4 <_sercom_get_default_pad+0xf8>)
     988:	e7f6      	b.n	978 <_sercom_get_default_pad+0x9c>
     98a:	46c0      	nop			; (mov r8, r8)
     98c:	42000c00 	.word	0x42000c00
     990:	42001000 	.word	0x42001000
     994:	42001400 	.word	0x42001400
     998:	42000800 	.word	0x42000800
     99c:	00040003 	.word	0x00040003
     9a0:	00060003 	.word	0x00060003
     9a4:	00070003 	.word	0x00070003
     9a8:	001e0003 	.word	0x001e0003
     9ac:	001f0003 	.word	0x001f0003
     9b0:	00080003 	.word	0x00080003
     9b4:	000a0003 	.word	0x000a0003
     9b8:	000b0003 	.word	0x000b0003
     9bc:	00100003 	.word	0x00100003
     9c0:	00120003 	.word	0x00120003
     9c4:	00130003 	.word	0x00130003
     9c8:	00050003 	.word	0x00050003
     9cc:	00010003 	.word	0x00010003
     9d0:	00090003 	.word	0x00090003
     9d4:	00110003 	.word	0x00110003

000009d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     9d8:	b530      	push	{r4, r5, lr}
     9da:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     9dc:	466b      	mov	r3, sp
     9de:	4a0a      	ldr	r2, [pc, #40]	; (a08 <_sercom_get_sercom_inst_index+0x30>)
     9e0:	ca32      	ldmia	r2!, {r1, r4, r5}
     9e2:	c332      	stmia	r3!, {r1, r4, r5}
     9e4:	0019      	movs	r1, r3
     9e6:	6813      	ldr	r3, [r2, #0]
     9e8:	600b      	str	r3, [r1, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9ea:	2300      	movs	r3, #0
     9ec:	2b03      	cmp	r3, #3
     9ee:	d808      	bhi.n	a02 <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9f0:	009a      	lsls	r2, r3, #2
     9f2:	4669      	mov	r1, sp
     9f4:	5852      	ldr	r2, [r2, r1]
     9f6:	4282      	cmp	r2, r0
     9f8:	d001      	beq.n	9fe <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9fa:	3301      	adds	r3, #1
     9fc:	e7f6      	b.n	9ec <_sercom_get_sercom_inst_index+0x14>
			return i;
     9fe:	b2d8      	uxtb	r0, r3
     a00:	e000      	b.n	a04 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a02:	2000      	movs	r0, #0
}
     a04:	b005      	add	sp, #20
     a06:	bd30      	pop	{r4, r5, pc}
     a08:	00002060 	.word	0x00002060

00000a0c <_spi_clear_tx_complete_flag>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a0c:	6803      	ldr	r3, [r0, #0]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a0e:	2202      	movs	r2, #2
     a10:	761a      	strb	r2, [r3, #24]
}
     a12:	4770      	bx	lr

00000a14 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     a14:	b5f0      	push	{r4, r5, r6, r7, lr}
     a16:	b087      	sub	sp, #28
     a18:	0007      	movs	r7, r0
     a1a:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a1c:	6806      	ldr	r6, [r0, #0]
     a1e:	ab05      	add	r3, sp, #20
     a20:	2280      	movs	r2, #128	; 0x80
     a22:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a24:	2200      	movs	r2, #0
     a26:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a28:	2101      	movs	r1, #1
     a2a:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     a2c:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     a2e:	782b      	ldrb	r3, [r5, #0]
     a30:	2b00      	cmp	r3, #0
     a32:	d101      	bne.n	a38 <_spi_set_config+0x24>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a34:	ab05      	add	r3, sp, #20
     a36:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     a38:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a3a:	9301      	str	r3, [sp, #4]
     a3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     a3e:	9302      	str	r3, [sp, #8]
     a40:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     a42:	9303      	str	r3, [sp, #12]
     a44:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     a46:	9304      	str	r3, [sp, #16]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a48:	2400      	movs	r4, #0
     a4a:	e006      	b.n	a5a <_spi_set_config+0x46>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a4c:	0021      	movs	r1, r4
     a4e:	0030      	movs	r0, r6
     a50:	4b3d      	ldr	r3, [pc, #244]	; (b48 <_spi_set_config+0x134>)
     a52:	4798      	blx	r3
     a54:	e008      	b.n	a68 <_spi_set_config+0x54>
	for (uint8_t pad = 0; pad < 4; pad++) {
     a56:	3401      	adds	r4, #1
     a58:	b2e4      	uxtb	r4, r4
     a5a:	2c03      	cmp	r4, #3
     a5c:	d80d      	bhi.n	a7a <_spi_set_config+0x66>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a5e:	00a3      	lsls	r3, r4, #2
     a60:	aa01      	add	r2, sp, #4
     a62:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     a64:	2800      	cmp	r0, #0
     a66:	d0f1      	beq.n	a4c <_spi_set_config+0x38>
		}

		if (current_pinmux != PINMUX_UNUSED) {
     a68:	1c43      	adds	r3, r0, #1
     a6a:	d0f4      	beq.n	a56 <_spi_set_config+0x42>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a6c:	a905      	add	r1, sp, #20
     a6e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a70:	0c00      	lsrs	r0, r0, #16
     a72:	b2c0      	uxtb	r0, r0
     a74:	4b35      	ldr	r3, [pc, #212]	; (b4c <_spi_set_config+0x138>)
     a76:	4798      	blx	r3
     a78:	e7ed      	b.n	a56 <_spi_set_config+0x42>
		}
	}

	module->mode             = config->mode;
     a7a:	782b      	ldrb	r3, [r5, #0]
     a7c:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     a7e:	7c2b      	ldrb	r3, [r5, #16]
     a80:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     a82:	7cab      	ldrb	r3, [r5, #18]
     a84:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     a86:	7d2b      	ldrb	r3, [r5, #20]
     a88:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     a8a:	2200      	movs	r2, #0
     a8c:	466b      	mov	r3, sp
     a8e:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     a90:	782b      	ldrb	r3, [r5, #0]
     a92:	2b01      	cmp	r3, #1
     a94:	d014      	beq.n	ac0 <_spi_set_config+0xac>

		spi_module->BAUD.reg = (uint8_t)baud;
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     a96:	782b      	ldrb	r3, [r5, #0]
     a98:	2b00      	cmp	r3, #0
     a9a:	d127      	bne.n	aec <_spi_set_config+0xd8>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     a9c:	69ab      	ldr	r3, [r5, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     a9e:	8baa      	ldrh	r2, [r5, #28]
     aa0:	0011      	movs	r1, r2

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     aa2:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     aa4:	7fac      	ldrb	r4, [r5, #30]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     aa6:	7fef      	ldrb	r7, [r5, #31]
     aa8:	043f      	lsls	r7, r7, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     aaa:	433c      	orrs	r4, r7
		spi_module->ADDR.reg |=
     aac:	4320      	orrs	r0, r4
     aae:	6270      	str	r0, [r6, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     ab0:	2020      	movs	r0, #32
     ab2:	5c28      	ldrb	r0, [r5, r0]
     ab4:	2800      	cmp	r0, #0
     ab6:	d01b      	beq.n	af0 <_spi_set_config+0xdc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     ab8:	2140      	movs	r1, #64	; 0x40
     aba:	4311      	orrs	r1, r2
     abc:	b289      	uxth	r1, r1
     abe:	e017      	b.n	af0 <_spi_set_config+0xdc>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ac0:	6838      	ldr	r0, [r7, #0]
     ac2:	4b23      	ldr	r3, [pc, #140]	; (b50 <_spi_set_config+0x13c>)
     ac4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ac6:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     ac8:	b2c0      	uxtb	r0, r0
     aca:	4b22      	ldr	r3, [pc, #136]	; (b54 <_spi_set_config+0x140>)
     acc:	4798      	blx	r3
     ace:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     ad0:	466b      	mov	r3, sp
     ad2:	1c9a      	adds	r2, r3, #2
     ad4:	69a8      	ldr	r0, [r5, #24]
     ad6:	4b20      	ldr	r3, [pc, #128]	; (b58 <_spi_set_config+0x144>)
     ad8:	4798      	blx	r3
		if (error_code != STATUS_OK) {
     ada:	2800      	cmp	r0, #0
     adc:	d001      	beq.n	ae2 <_spi_set_config+0xce>
			return STATUS_ERR_INVALID_ARG;
     ade:	2017      	movs	r0, #23
     ae0:	e030      	b.n	b44 <_spi_set_config+0x130>
		spi_module->BAUD.reg = (uint8_t)baud;
     ae2:	466b      	mov	r3, sp
     ae4:	3302      	adds	r3, #2
     ae6:	781b      	ldrb	r3, [r3, #0]
     ae8:	7333      	strb	r3, [r6, #12]
     aea:	e7d4      	b.n	a96 <_spi_set_config+0x82>
	uint32_t ctrlb = 0;
     aec:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     aee:	2300      	movs	r3, #0
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     af0:	686a      	ldr	r2, [r5, #4]
     af2:	4313      	orrs	r3, r2

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     af4:	68aa      	ldr	r2, [r5, #8]
     af6:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     af8:	68ea      	ldr	r2, [r5, #12]
     afa:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
     afc:	7c2a      	ldrb	r2, [r5, #16]
     afe:	430a      	orrs	r2, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b00:	7c69      	ldrb	r1, [r5, #17]
     b02:	2900      	cmp	r1, #0
     b04:	d103      	bne.n	b0e <_spi_set_config+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b06:	4915      	ldr	r1, [pc, #84]	; (b5c <_spi_set_config+0x148>)
     b08:	7889      	ldrb	r1, [r1, #2]
     b0a:	0789      	lsls	r1, r1, #30
     b0c:	d501      	bpl.n	b12 <_spi_set_config+0xfe>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b0e:	2180      	movs	r1, #128	; 0x80
     b10:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
     b12:	7ca9      	ldrb	r1, [r5, #18]
     b14:	2900      	cmp	r1, #0
     b16:	d002      	beq.n	b1e <_spi_set_config+0x10a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b18:	2180      	movs	r1, #128	; 0x80
     b1a:	0289      	lsls	r1, r1, #10
     b1c:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     b1e:	7ce9      	ldrb	r1, [r5, #19]
     b20:	2900      	cmp	r1, #0
     b22:	d002      	beq.n	b2a <_spi_set_config+0x116>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     b24:	2180      	movs	r1, #128	; 0x80
     b26:	0089      	lsls	r1, r1, #2
     b28:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     b2a:	7d29      	ldrb	r1, [r5, #20]
     b2c:	2900      	cmp	r1, #0
     b2e:	d002      	beq.n	b36 <_spi_set_config+0x122>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b30:	2180      	movs	r1, #128	; 0x80
     b32:	0189      	lsls	r1, r1, #6
     b34:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     b36:	6831      	ldr	r1, [r6, #0]
     b38:	430b      	orrs	r3, r1
     b3a:	6033      	str	r3, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     b3c:	6873      	ldr	r3, [r6, #4]
     b3e:	431a      	orrs	r2, r3
     b40:	6072      	str	r2, [r6, #4]

	return STATUS_OK;
     b42:	2000      	movs	r0, #0
}
     b44:	b007      	add	sp, #28
     b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b48:	000008dd 	.word	0x000008dd
     b4c:	00001b85 	.word	0x00001b85
     b50:	000009d9 	.word	0x000009d9
     b54:	00001abd 	.word	0x00001abd
     b58:	00000865 	.word	0x00000865
     b5c:	41002000 	.word	0x41002000

00000b60 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     b60:	b5f0      	push	{r4, r5, r6, r7, lr}
     b62:	b085      	sub	sp, #20
     b64:	0005      	movs	r5, r0
     b66:	000c      	movs	r4, r1
     b68:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     b6a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     b6c:	680b      	ldr	r3, [r1, #0]
     b6e:	079b      	lsls	r3, r3, #30
     b70:	d502      	bpl.n	b78 <spi_init+0x18>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     b72:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     b74:	b005      	add	sp, #20
     b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b78:	680b      	ldr	r3, [r1, #0]
     b7a:	07db      	lsls	r3, r3, #31
     b7c:	d501      	bpl.n	b82 <spi_init+0x22>
		return STATUS_BUSY;
     b7e:	2005      	movs	r0, #5
     b80:	e7f8      	b.n	b74 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b82:	0008      	movs	r0, r1
     b84:	4b28      	ldr	r3, [pc, #160]	; (c28 <spi_init+0xc8>)
     b86:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b88:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b8a:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b8c:	2301      	movs	r3, #1
     b8e:	4093      	lsls	r3, r2
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b90:	4a26      	ldr	r2, [pc, #152]	; (c2c <spi_init+0xcc>)
     b92:	6a11      	ldr	r1, [r2, #32]
     b94:	430b      	orrs	r3, r1
     b96:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     b98:	2724      	movs	r7, #36	; 0x24
     b9a:	5df3      	ldrb	r3, [r6, r7]
     b9c:	a903      	add	r1, sp, #12
     b9e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ba0:	b2c3      	uxtb	r3, r0
     ba2:	9301      	str	r3, [sp, #4]
     ba4:	0018      	movs	r0, r3
     ba6:	4b22      	ldr	r3, [pc, #136]	; (c30 <spi_init+0xd0>)
     ba8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     baa:	9801      	ldr	r0, [sp, #4]
     bac:	4b21      	ldr	r3, [pc, #132]	; (c34 <spi_init+0xd4>)
     bae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bb0:	5df0      	ldrb	r0, [r6, r7]
     bb2:	2100      	movs	r1, #0
     bb4:	4b20      	ldr	r3, [pc, #128]	; (c38 <spi_init+0xd8>)
     bb6:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     bb8:	7833      	ldrb	r3, [r6, #0]
     bba:	2b01      	cmp	r3, #1
     bbc:	d008      	beq.n	bd0 <spi_init+0x70>
	if (config->mode == SPI_MODE_SLAVE) {
     bbe:	7833      	ldrb	r3, [r6, #0]
     bc0:	2b00      	cmp	r3, #0
     bc2:	d103      	bne.n	bcc <spi_init+0x6c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     bc4:	6823      	ldr	r3, [r4, #0]
     bc6:	2208      	movs	r2, #8
     bc8:	4313      	orrs	r3, r2
     bca:	6023      	str	r3, [r4, #0]
{
     bcc:	2300      	movs	r3, #0
     bce:	e00b      	b.n	be8 <spi_init+0x88>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     bd0:	6823      	ldr	r3, [r4, #0]
     bd2:	220c      	movs	r2, #12
     bd4:	4313      	orrs	r3, r2
     bd6:	6023      	str	r3, [r4, #0]
     bd8:	e7f1      	b.n	bbe <spi_init+0x5e>
		module->callback[i]        = NULL;
     bda:	1c9a      	adds	r2, r3, #2
     bdc:	0092      	lsls	r2, r2, #2
     bde:	18aa      	adds	r2, r5, r2
     be0:	2100      	movs	r1, #0
     be2:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     be4:	3301      	adds	r3, #1
     be6:	b2db      	uxtb	r3, r3
     be8:	2b06      	cmp	r3, #6
     bea:	d9f6      	bls.n	bda <spi_init+0x7a>
	module->tx_buffer_ptr              = NULL;
     bec:	2200      	movs	r2, #0
     bee:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     bf0:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     bf2:	2300      	movs	r3, #0
     bf4:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     bf6:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     bf8:	3236      	adds	r2, #54	; 0x36
     bfa:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
     bfc:	3201      	adds	r2, #1
     bfe:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
     c00:	3201      	adds	r2, #1
     c02:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     c04:	3a35      	subs	r2, #53	; 0x35
     c06:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
     c08:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     c0a:	6828      	ldr	r0, [r5, #0]
     c0c:	4b06      	ldr	r3, [pc, #24]	; (c28 <spi_init+0xc8>)
     c0e:	4798      	blx	r3
     c10:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     c12:	490a      	ldr	r1, [pc, #40]	; (c3c <spi_init+0xdc>)
     c14:	4b0a      	ldr	r3, [pc, #40]	; (c40 <spi_init+0xe0>)
     c16:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c18:	00a4      	lsls	r4, r4, #2
     c1a:	4b0a      	ldr	r3, [pc, #40]	; (c44 <spi_init+0xe4>)
     c1c:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
     c1e:	0031      	movs	r1, r6
     c20:	0028      	movs	r0, r5
     c22:	4b09      	ldr	r3, [pc, #36]	; (c48 <spi_init+0xe8>)
     c24:	4798      	blx	r3
     c26:	e7a5      	b.n	b74 <spi_init+0x14>
     c28:	000009d9 	.word	0x000009d9
     c2c:	40000400 	.word	0x40000400
     c30:	00001aa1 	.word	0x00001aa1
     c34:	00001a19 	.word	0x00001a19
     c38:	00000891 	.word	0x00000891
     c3c:	00001321 	.word	0x00001321
     c40:	000014ed 	.word	0x000014ed
     c44:	200000a4 	.word	0x200000a4
     c48:	00000a15 	.word	0x00000a15

00000c4c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c4e:	0004      	movs	r4, r0
     c50:	000e      	movs	r6, r1
     c52:	0017      	movs	r7, r2
     c54:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     c56:	2338      	movs	r3, #56	; 0x38
     c58:	5cc3      	ldrb	r3, [r0, r3]
     c5a:	2b05      	cmp	r3, #5
     c5c:	d06d      	beq.n	d3a <spi_read_buffer_wait+0xee>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     c5e:	2a00      	cmp	r2, #0
     c60:	d101      	bne.n	c66 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     c62:	2217      	movs	r2, #23
     c64:	e06a      	b.n	d3c <spi_read_buffer_wait+0xf0>
	}

	if (!(module->receiver_enabled)) {
     c66:	79c3      	ldrb	r3, [r0, #7]
     c68:	2b00      	cmp	r3, #0
     c6a:	d101      	bne.n	c70 <spi_read_buffer_wait+0x24>
		return STATUS_ERR_DENIED;
     c6c:	221c      	movs	r2, #28
     c6e:	e065      	b.n	d3c <spi_read_buffer_wait+0xf0>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     c70:	7943      	ldrb	r3, [r0, #5]
     c72:	2b00      	cmp	r3, #0
     c74:	d103      	bne.n	c7e <spi_read_buffer_wait+0x32>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     c76:	6803      	ldr	r3, [r0, #0]
     c78:	7e1b      	ldrb	r3, [r3, #24]
     c7a:	079b      	lsls	r3, r3, #30
     c7c:	d401      	bmi.n	c82 <spi_read_buffer_wait+0x36>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
     c7e:	2000      	movs	r0, #0
     c80:	e037      	b.n	cf2 <spi_read_buffer_wait+0xa6>
		_spi_clear_tx_complete_flag(module);
     c82:	4b2f      	ldr	r3, [pc, #188]	; (d40 <spi_read_buffer_wait+0xf4>)
     c84:	4798      	blx	r3
     c86:	e7fa      	b.n	c7e <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c88:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c8a:	7e1a      	ldrb	r2, [r3, #24]
			while (!spi_is_ready_to_write(module)) {
     c8c:	07d2      	lsls	r2, r2, #31
     c8e:	d5fb      	bpl.n	c88 <spi_read_buffer_wait+0x3c>
     c90:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     c92:	07d2      	lsls	r2, r2, #31
     c94:	d534      	bpl.n	d00 <spi_read_buffer_wait+0xb4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     c96:	05ea      	lsls	r2, r5, #23
     c98:	0dd2      	lsrs	r2, r2, #23
     c9a:	629a      	str	r2, [r3, #40]	; 0x28
     c9c:	e030      	b.n	d00 <spi_read_buffer_wait+0xb4>
     c9e:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ca0:	4a28      	ldr	r2, [pc, #160]	; (d44 <spi_read_buffer_wait+0xf8>)
     ca2:	4293      	cmp	r3, r2
     ca4:	d805      	bhi.n	cb2 <spi_read_buffer_wait+0x66>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ca6:	6822      	ldr	r2, [r4, #0]
     ca8:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
     caa:	0752      	lsls	r2, r2, #29
     cac:	d401      	bmi.n	cb2 <spi_read_buffer_wait+0x66>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     cae:	3301      	adds	r3, #1
     cb0:	e7f6      	b.n	ca0 <spi_read_buffer_wait+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     cb2:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     cb4:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
     cb6:	0792      	lsls	r2, r2, #30
     cb8:	d404      	bmi.n	cc4 <spi_read_buffer_wait+0x78>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cba:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
     cbc:	075b      	lsls	r3, r3, #29
     cbe:	d422      	bmi.n	d06 <spi_read_buffer_wait+0xba>
				return STATUS_ERR_TIMEOUT;
     cc0:	2212      	movs	r2, #18
     cc2:	e03b      	b.n	d3c <spi_read_buffer_wait+0xf0>
				_spi_clear_tx_complete_flag(module);
     cc4:	0020      	movs	r0, r4
     cc6:	4b1e      	ldr	r3, [pc, #120]	; (d40 <spi_read_buffer_wait+0xf4>)
     cc8:	4798      	blx	r3
				return STATUS_ABORTED;
     cca:	2204      	movs	r2, #4
     ccc:	e036      	b.n	d3c <spi_read_buffer_wait+0xf0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     cce:	2200      	movs	r2, #0
     cd0:	e026      	b.n	d20 <spi_read_buffer_wait+0xd4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     cd2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     cd4:	05ff      	lsls	r7, r7, #23
     cd6:	0dff      	lsrs	r7, r7, #23
     cd8:	e001      	b.n	cde <spi_read_buffer_wait+0x92>
		uint16_t received_data = 0;
     cda:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
     cdc:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
     cde:	2a00      	cmp	r2, #0
     ce0:	d12c      	bne.n	d3c <spi_read_buffer_wait+0xf0>
		rx_data[rx_pos++] = received_data;
     ce2:	1c43      	adds	r3, r0, #1
     ce4:	b29b      	uxth	r3, r3
     ce6:	5437      	strb	r7, [r6, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ce8:	79a2      	ldrb	r2, [r4, #6]
     cea:	2a01      	cmp	r2, #1
     cec:	d01e      	beq.n	d2c <spi_read_buffer_wait+0xe0>
			rx_data[rx_pos++] = (received_data >> 8);
     cee:	0018      	movs	r0, r3
     cf0:	000f      	movs	r7, r1
	while (length--) {
     cf2:	1e79      	subs	r1, r7, #1
     cf4:	b289      	uxth	r1, r1
     cf6:	2f00      	cmp	r7, #0
     cf8:	d01d      	beq.n	d36 <spi_read_buffer_wait+0xea>
		if (module->mode == SPI_MODE_MASTER) {
     cfa:	7963      	ldrb	r3, [r4, #5]
     cfc:	2b01      	cmp	r3, #1
     cfe:	d0c3      	beq.n	c88 <spi_read_buffer_wait+0x3c>
		if (module->mode == SPI_MODE_SLAVE) {
     d00:	7963      	ldrb	r3, [r4, #5]
     d02:	2b00      	cmp	r3, #0
     d04:	d0cb      	beq.n	c9e <spi_read_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d06:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d08:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
     d0a:	0752      	lsls	r2, r2, #29
     d0c:	d5fb      	bpl.n	d06 <spi_read_buffer_wait+0xba>
     d0e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     d10:	0752      	lsls	r2, r2, #29
     d12:	d5e2      	bpl.n	cda <spi_read_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d14:	8b5a      	ldrh	r2, [r3, #26]
     d16:	0752      	lsls	r2, r2, #29
     d18:	d5d9      	bpl.n	cce <spi_read_buffer_wait+0x82>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d1a:	2204      	movs	r2, #4
     d1c:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     d1e:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d20:	79a7      	ldrb	r7, [r4, #6]
     d22:	2f01      	cmp	r7, #1
     d24:	d0d5      	beq.n	cd2 <spi_read_buffer_wait+0x86>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d26:	6a9f      	ldr	r7, [r3, #40]	; 0x28
     d28:	b2ff      	uxtb	r7, r7
     d2a:	e7d8      	b.n	cde <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
     d2c:	3002      	adds	r0, #2
     d2e:	0a3f      	lsrs	r7, r7, #8
     d30:	54f7      	strb	r7, [r6, r3]
     d32:	b283      	uxth	r3, r0
     d34:	e7db      	b.n	cee <spi_read_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     d36:	2200      	movs	r2, #0
     d38:	e000      	b.n	d3c <spi_read_buffer_wait+0xf0>
		return STATUS_BUSY;
     d3a:	2205      	movs	r2, #5
}
     d3c:	0010      	movs	r0, r2
     d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d40:	00000a0d 	.word	0x00000a0d
     d44:	00002710 	.word	0x00002710

00000d48 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     d48:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d4a:	7943      	ldrb	r3, [r0, #5]
     d4c:	2b01      	cmp	r3, #1
     d4e:	d001      	beq.n	d54 <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
     d50:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     d52:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     d54:	7a03      	ldrb	r3, [r0, #8]
     d56:	2b00      	cmp	r3, #0
     d58:	d16c      	bne.n	e34 <spi_select_slave+0xec>
		if (select) {
     d5a:	2a00      	cmp	r2, #0
     d5c:	d058      	beq.n	e10 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
     d5e:	784b      	ldrb	r3, [r1, #1]
     d60:	2b00      	cmp	r3, #0
     d62:	d043      	beq.n	dec <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d64:	6803      	ldr	r3, [r0, #0]
     d66:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     d68:	07db      	lsls	r3, r3, #31
     d6a:	d411      	bmi.n	d90 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
     d6c:	780a      	ldrb	r2, [r1, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     d6e:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     d70:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d72:	2900      	cmp	r1, #0
     d74:	d10a      	bne.n	d8c <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
     d76:	01db      	lsls	r3, r3, #7
     d78:	4931      	ldr	r1, [pc, #196]	; (e40 <spi_select_slave+0xf8>)
     d7a:	468c      	mov	ip, r1
     d7c:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d7e:	211f      	movs	r1, #31
     d80:	4011      	ands	r1, r2
     d82:	2201      	movs	r2, #1
     d84:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d86:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     d88:	2005      	movs	r0, #5
     d8a:	e7e2      	b.n	d52 <spi_select_slave+0xa>
	} else {
		Assert(false);
		return NULL;
     d8c:	2300      	movs	r3, #0
     d8e:	e7f6      	b.n	d7e <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
     d90:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     d92:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     d94:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     d96:	2c00      	cmp	r4, #0
     d98:	d104      	bne.n	da4 <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
     d9a:	01db      	lsls	r3, r3, #7
     d9c:	4c28      	ldr	r4, [pc, #160]	; (e40 <spi_select_slave+0xf8>)
     d9e:	46a4      	mov	ip, r4
     da0:	4463      	add	r3, ip
     da2:	e000      	b.n	da6 <spi_select_slave+0x5e>
		return NULL;
     da4:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     da6:	241f      	movs	r4, #31
     da8:	4014      	ands	r4, r2
     daa:	2201      	movs	r2, #1
     dac:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     dae:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
     db0:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     db2:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     db4:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     db6:	07c9      	lsls	r1, r1, #31
     db8:	d500      	bpl.n	dbc <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     dba:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     dbc:	79c3      	ldrb	r3, [r0, #7]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d13a      	bne.n	e38 <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
     dc2:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     dc4:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
     dc6:	0752      	lsls	r2, r2, #29
     dc8:	d5fb      	bpl.n	dc2 <spi_select_slave+0x7a>
     dca:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     dcc:	0752      	lsls	r2, r2, #29
     dce:	d535      	bpl.n	e3c <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     dd0:	8b5a      	ldrh	r2, [r3, #26]
     dd2:	0752      	lsls	r2, r2, #29
     dd4:	d501      	bpl.n	dda <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     dd6:	2204      	movs	r2, #4
     dd8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     dda:	7982      	ldrb	r2, [r0, #6]
     ddc:	2a01      	cmp	r2, #1
     dde:	d002      	beq.n	de6 <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
     de2:	2000      	movs	r0, #0
     de4:	e7b5      	b.n	d52 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     de8:	2000      	movs	r0, #0
     dea:	e7b2      	b.n	d52 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     dec:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     dee:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     df0:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     df2:	2900      	cmp	r1, #0
     df4:	d10a      	bne.n	e0c <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
     df6:	01db      	lsls	r3, r3, #7
     df8:	4911      	ldr	r1, [pc, #68]	; (e40 <spi_select_slave+0xf8>)
     dfa:	468c      	mov	ip, r1
     dfc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dfe:	211f      	movs	r1, #31
     e00:	4011      	ands	r1, r2
     e02:	2201      	movs	r2, #1
     e04:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     e06:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     e08:	2000      	movs	r0, #0
     e0a:	e7a2      	b.n	d52 <spi_select_slave+0xa>
		return NULL;
     e0c:	2300      	movs	r3, #0
     e0e:	e7f6      	b.n	dfe <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
     e10:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e12:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
     e14:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
     e16:	2900      	cmp	r1, #0
     e18:	d10a      	bne.n	e30 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
     e1a:	01db      	lsls	r3, r3, #7
     e1c:	4908      	ldr	r1, [pc, #32]	; (e40 <spi_select_slave+0xf8>)
     e1e:	468c      	mov	ip, r1
     e20:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e22:	211f      	movs	r1, #31
     e24:	4011      	ands	r1, r2
     e26:	2201      	movs	r2, #1
     e28:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     e2a:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     e2c:	2000      	movs	r0, #0
     e2e:	e790      	b.n	d52 <spi_select_slave+0xa>
		return NULL;
     e30:	2300      	movs	r3, #0
     e32:	e7f6      	b.n	e22 <spi_select_slave+0xda>
     e34:	2000      	movs	r0, #0
     e36:	e78c      	b.n	d52 <spi_select_slave+0xa>
     e38:	2000      	movs	r0, #0
     e3a:	e78a      	b.n	d52 <spi_select_slave+0xa>
     e3c:	2000      	movs	r0, #0
     e3e:	e788      	b.n	d52 <spi_select_slave+0xa>
     e40:	41004400 	.word	0x41004400

00000e44 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e44:	b5f0      	push	{r4, r5, r6, r7, lr}
     e46:	46d6      	mov	lr, sl
     e48:	464f      	mov	r7, r9
     e4a:	4646      	mov	r6, r8
     e4c:	b5c0      	push	{r6, r7, lr}
     e4e:	b082      	sub	sp, #8
     e50:	0004      	movs	r4, r0
     e52:	468a      	mov	sl, r1
     e54:	0017      	movs	r7, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e56:	2338      	movs	r3, #56	; 0x38
     e58:	5cc3      	ldrb	r3, [r0, r3]
     e5a:	2b05      	cmp	r3, #5
     e5c:	d100      	bne.n	e60 <spi_write_buffer_wait+0x1c>
     e5e:	e0d8      	b.n	1012 <spi_write_buffer_wait+0x1ce>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     e60:	2a00      	cmp	r2, #0
     e62:	d101      	bne.n	e68 <spi_write_buffer_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
     e64:	2017      	movs	r0, #23
     e66:	e0d5      	b.n	1014 <spi_write_buffer_wait+0x1d0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     e68:	7943      	ldrb	r3, [r0, #5]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d103      	bne.n	e76 <spi_write_buffer_wait+0x32>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e6e:	6803      	ldr	r3, [r0, #0]
     e70:	7e1b      	ldrb	r3, [r3, #24]
     e72:	079b      	lsls	r3, r3, #30
     e74:	d402      	bmi.n	e7c <spi_write_buffer_wait+0x38>
     e76:	46bc      	mov	ip, r7
     e78:	2600      	movs	r6, #0
     e7a:	e025      	b.n	ec8 <spi_write_buffer_wait+0x84>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     e7c:	4b6a      	ldr	r3, [pc, #424]	; (1028 <spi_write_buffer_wait+0x1e4>)
     e7e:	4798      	blx	r3
     e80:	e7f9      	b.n	e76 <spi_write_buffer_wait+0x32>
     e82:	2300      	movs	r3, #0
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e84:	4a69      	ldr	r2, [pc, #420]	; (102c <spi_write_buffer_wait+0x1e8>)
     e86:	4293      	cmp	r3, r2
     e88:	d805      	bhi.n	e96 <spi_write_buffer_wait+0x52>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e8a:	6822      	ldr	r2, [r4, #0]
     e8c:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
     e8e:	07d2      	lsls	r2, r2, #31
     e90:	d401      	bmi.n	e96 <spi_write_buffer_wait+0x52>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e92:	3301      	adds	r3, #1
     e94:	e7f6      	b.n	e84 <spi_write_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
     e96:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e98:	7e1a      	ldrb	r2, [r3, #24]
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     e9a:	0792      	lsls	r2, r2, #30
     e9c:	d404      	bmi.n	ea8 <spi_write_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e9e:	7e1b      	ldrb	r3, [r3, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
     ea0:	07db      	lsls	r3, r3, #31
     ea2:	d418      	bmi.n	ed6 <spi_write_buffer_wait+0x92>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     ea4:	2012      	movs	r0, #18
     ea6:	e0b5      	b.n	1014 <spi_write_buffer_wait+0x1d0>
				_spi_clear_tx_complete_flag(module);
     ea8:	0020      	movs	r0, r4
     eaa:	4b5f      	ldr	r3, [pc, #380]	; (1028 <spi_write_buffer_wait+0x1e4>)
     eac:	4798      	blx	r3
				return STATUS_ABORTED;
     eae:	2004      	movs	r0, #4
     eb0:	e0b0      	b.n	1014 <spi_write_buffer_wait+0x1d0>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     eb2:	3602      	adds	r6, #2
     eb4:	b2b6      	uxth	r6, r6
     eb6:	4652      	mov	r2, sl
     eb8:	5dd2      	ldrb	r2, [r2, r7]
     eba:	0212      	lsls	r2, r2, #8
     ebc:	4302      	orrs	r2, r0
     ebe:	e017      	b.n	ef0 <spi_write_buffer_wait+0xac>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     ec0:	79e3      	ldrb	r3, [r4, #7]
	while (length--) {
     ec2:	000f      	movs	r7, r1
		if (module->receiver_enabled) {
     ec4:	2b00      	cmp	r3, #0
     ec6:	d11a      	bne.n	efe <spi_write_buffer_wait+0xba>
	while (length--) {
     ec8:	1e79      	subs	r1, r7, #1
     eca:	b289      	uxth	r1, r1
     ecc:	2f00      	cmp	r7, #0
     ece:	d06c      	beq.n	faa <spi_write_buffer_wait+0x166>
		if (module->mode == SPI_MODE_SLAVE) {
     ed0:	7963      	ldrb	r3, [r4, #5]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d0d5      	beq.n	e82 <spi_write_buffer_wait+0x3e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ed6:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ed8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
     eda:	07d2      	lsls	r2, r2, #31
     edc:	d5fb      	bpl.n	ed6 <spi_write_buffer_wait+0x92>
		uint16_t data_to_send = tx_data[tx_pos++];
     ede:	1c77      	adds	r7, r6, #1
     ee0:	b2bf      	uxth	r7, r7
     ee2:	4652      	mov	r2, sl
     ee4:	5d90      	ldrb	r0, [r2, r6]
     ee6:	b282      	uxth	r2, r0
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ee8:	79a5      	ldrb	r5, [r4, #6]
     eea:	2d01      	cmp	r5, #1
     eec:	d0e1      	beq.n	eb2 <spi_write_buffer_wait+0x6e>
		uint16_t data_to_send = tx_data[tx_pos++];
     eee:	003e      	movs	r6, r7
     ef0:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     ef2:	07f8      	lsls	r0, r7, #31
     ef4:	d5e4      	bpl.n	ec0 <spi_write_buffer_wait+0x7c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ef6:	05d2      	lsls	r2, r2, #23
     ef8:	0dd2      	lsrs	r2, r2, #23
     efa:	629a      	str	r2, [r3, #40]	; 0x28
     efc:	e7e0      	b.n	ec0 <spi_write_buffer_wait+0x7c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     efe:	7963      	ldrb	r3, [r4, #5]
     f00:	2b00      	cmp	r3, #0
     f02:	d040      	beq.n	f86 <spi_write_buffer_wait+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f04:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f06:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     f08:	0752      	lsls	r2, r2, #29
     f0a:	d5fb      	bpl.n	f04 <spi_write_buffer_wait+0xc0>
     f0c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f0e:	0752      	lsls	r2, r2, #29
     f10:	d508      	bpl.n	f24 <spi_write_buffer_wait+0xe0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f12:	8b5a      	ldrh	r2, [r3, #26]
     f14:	0752      	lsls	r2, r2, #29
     f16:	d501      	bpl.n	f1c <spi_write_buffer_wait+0xd8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f18:	2204      	movs	r2, #4
     f1a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f1c:	79a2      	ldrb	r2, [r4, #6]
     f1e:	2a01      	cmp	r2, #1
     f20:	d041      	beq.n	fa6 <spi_write_buffer_wait+0x162>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     f24:	4660      	mov	r0, ip
     f26:	3801      	subs	r0, #1
     f28:	b283      	uxth	r3, r0
     f2a:	469c      	mov	ip, r3
     f2c:	000f      	movs	r7, r1
     f2e:	e7cb      	b.n	ec8 <spi_write_buffer_wait+0x84>
							data_to_send |= (tx_data[tx_pos++] << 8);
     f30:	3602      	adds	r6, #2
     f32:	4655      	mov	r5, sl
     f34:	5c2f      	ldrb	r7, [r5, r0]
     f36:	023f      	lsls	r7, r7, #8
     f38:	4640      	mov	r0, r8
     f3a:	4307      	orrs	r7, r0
     f3c:	b2b0      	uxth	r0, r6
     f3e:	e01b      	b.n	f78 <spi_write_buffer_wait+0x134>
						length--;
     f40:	3901      	subs	r1, #1
     f42:	b289      	uxth	r1, r1
     f44:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f46:	6822      	ldr	r2, [r4, #0]
     f48:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
     f4a:	0752      	lsls	r2, r2, #29
     f4c:	d41d      	bmi.n	f8a <spi_write_buffer_wait+0x146>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f4e:	3301      	adds	r3, #1
     f50:	4a36      	ldr	r2, [pc, #216]	; (102c <spi_write_buffer_wait+0x1e8>)
     f52:	4293      	cmp	r3, r2
     f54:	d819      	bhi.n	f8a <spi_write_buffer_wait+0x146>
					if (length && spi_is_ready_to_write(module)) {
     f56:	2900      	cmp	r1, #0
     f58:	d0f5      	beq.n	f46 <spi_write_buffer_wait+0x102>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f5a:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f5c:	7e17      	ldrb	r7, [r2, #24]
     f5e:	07f8      	lsls	r0, r7, #31
     f60:	d5f1      	bpl.n	f46 <spi_write_buffer_wait+0x102>
						data_to_send = tx_data[tx_pos++];
     f62:	1c70      	adds	r0, r6, #1
     f64:	b280      	uxth	r0, r0
     f66:	4655      	mov	r5, sl
     f68:	5dad      	ldrb	r5, [r5, r6]
     f6a:	46a8      	mov	r8, r5
     f6c:	466f      	mov	r7, sp
     f6e:	80fd      	strh	r5, [r7, #6]
     f70:	88ff      	ldrh	r7, [r7, #6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f72:	79a5      	ldrb	r5, [r4, #6]
     f74:	2d01      	cmp	r5, #1
     f76:	d0db      	beq.n	f30 <spi_write_buffer_wait+0xec>
     f78:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     f7a:	07f5      	lsls	r5, r6, #31
     f7c:	d5e0      	bpl.n	f40 <spi_write_buffer_wait+0xfc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f7e:	05ff      	lsls	r7, r7, #23
     f80:	0dff      	lsrs	r7, r7, #23
     f82:	6297      	str	r7, [r2, #40]	; 0x28
     f84:	e7dc      	b.n	f40 <spi_write_buffer_wait+0xfc>
     f86:	2300      	movs	r3, #0
     f88:	e7e2      	b.n	f50 <spi_write_buffer_wait+0x10c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f8a:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f8c:	7e1a      	ldrb	r2, [r3, #24]
				if (spi_is_write_complete(module)) {
     f8e:	0792      	lsls	r2, r2, #30
     f90:	d404      	bmi.n	f9c <spi_write_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f92:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     f94:	075b      	lsls	r3, r3, #29
     f96:	d4b5      	bmi.n	f04 <spi_write_buffer_wait+0xc0>
					return STATUS_ERR_TIMEOUT;
     f98:	2012      	movs	r0, #18
     f9a:	e03b      	b.n	1014 <spi_write_buffer_wait+0x1d0>
					_spi_clear_tx_complete_flag(module);
     f9c:	0020      	movs	r0, r4
     f9e:	4b22      	ldr	r3, [pc, #136]	; (1028 <spi_write_buffer_wait+0x1e4>)
     fa0:	4798      	blx	r3
					return STATUS_ABORTED;
     fa2:	2004      	movs	r0, #4
     fa4:	e036      	b.n	1014 <spi_write_buffer_wait+0x1d0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     fa8:	e7bc      	b.n	f24 <spi_write_buffer_wait+0xe0>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     faa:	7962      	ldrb	r2, [r4, #5]
     fac:	2a01      	cmp	r2, #1
     fae:	d006      	beq.n	fbe <spi_write_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     fb0:	2a00      	cmp	r2, #0
     fb2:	d135      	bne.n	1020 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
     fb4:	79e3      	ldrb	r3, [r4, #7]
     fb6:	2b00      	cmp	r3, #0
     fb8:	d11a      	bne.n	ff0 <spi_write_buffer_wait+0x1ac>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     fba:	2000      	movs	r0, #0
     fbc:	e02a      	b.n	1014 <spi_write_buffer_wait+0x1d0>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     fbe:	6823      	ldr	r3, [r4, #0]
     fc0:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
     fc2:	079b      	lsls	r3, r3, #30
     fc4:	d5fb      	bpl.n	fbe <spi_write_buffer_wait+0x17a>
     fc6:	e7f3      	b.n	fb0 <spi_write_buffer_wait+0x16c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fc8:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fca:	7e1a      	ldrb	r2, [r3, #24]
				if (!spi_is_ready_to_read(module)) {
     fcc:	0752      	lsls	r2, r2, #29
     fce:	d529      	bpl.n	1024 <spi_write_buffer_wait+0x1e0>
     fd0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     fd2:	0752      	lsls	r2, r2, #29
     fd4:	d508      	bpl.n	fe8 <spi_write_buffer_wait+0x1a4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fd6:	8b5a      	ldrh	r2, [r3, #26]
     fd8:	0752      	lsls	r2, r2, #29
     fda:	d501      	bpl.n	fe0 <spi_write_buffer_wait+0x19c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     fdc:	2204      	movs	r2, #4
     fde:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fe0:	79a2      	ldrb	r2, [r4, #6]
     fe2:	2a01      	cmp	r2, #1
     fe4:	d011      	beq.n	100a <spi_write_buffer_wait+0x1c6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				flush_length--;
     fe8:	4660      	mov	r0, ip
     fea:	3801      	subs	r0, #1
     fec:	b283      	uxth	r3, r0
     fee:	469c      	mov	ip, r3
			while (flush_length) {
     ff0:	4663      	mov	r3, ip
     ff2:	2b00      	cmp	r3, #0
     ff4:	d00b      	beq.n	100e <spi_write_buffer_wait+0x1ca>
     ff6:	2300      	movs	r3, #0
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ff8:	4a0c      	ldr	r2, [pc, #48]	; (102c <spi_write_buffer_wait+0x1e8>)
     ffa:	4293      	cmp	r3, r2
     ffc:	d8e4      	bhi.n	fc8 <spi_write_buffer_wait+0x184>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ffe:	6822      	ldr	r2, [r4, #0]
    1000:	7e12      	ldrb	r2, [r2, #24]
					if (spi_is_ready_to_read(module)) {
    1002:	0752      	lsls	r2, r2, #29
    1004:	d4e0      	bmi.n	fc8 <spi_write_buffer_wait+0x184>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1006:	3301      	adds	r3, #1
    1008:	e7f6      	b.n	ff8 <spi_write_buffer_wait+0x1b4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    100c:	e7ec      	b.n	fe8 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    100e:	2000      	movs	r0, #0
    1010:	e000      	b.n	1014 <spi_write_buffer_wait+0x1d0>
		return STATUS_BUSY;
    1012:	2005      	movs	r0, #5
}
    1014:	b002      	add	sp, #8
    1016:	bc1c      	pop	{r2, r3, r4}
    1018:	4690      	mov	r8, r2
    101a:	4699      	mov	r9, r3
    101c:	46a2      	mov	sl, r4
    101e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    1020:	2000      	movs	r0, #0
    1022:	e7f7      	b.n	1014 <spi_write_buffer_wait+0x1d0>
					return STATUS_ERR_TIMEOUT;
    1024:	2012      	movs	r0, #18
    1026:	e7f5      	b.n	1014 <spi_write_buffer_wait+0x1d0>
    1028:	00000a0d 	.word	0x00000a0d
    102c:	00002710 	.word	0x00002710

00001030 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1030:	b5f0      	push	{r4, r5, r6, r7, lr}
    1032:	46de      	mov	lr, fp
    1034:	4657      	mov	r7, sl
    1036:	464e      	mov	r6, r9
    1038:	4645      	mov	r5, r8
    103a:	b5e0      	push	{r5, r6, r7, lr}
    103c:	b085      	sub	sp, #20
    103e:	0004      	movs	r4, r0
    1040:	9101      	str	r1, [sp, #4]
    1042:	9203      	str	r2, [sp, #12]
    1044:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1046:	2338      	movs	r3, #56	; 0x38
    1048:	5cc3      	ldrb	r3, [r0, r3]
    104a:	2b05      	cmp	r3, #5
    104c:	d100      	bne.n	1050 <spi_transceive_buffer_wait+0x20>
    104e:	e112      	b.n	1276 <spi_transceive_buffer_wait+0x246>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1050:	2e00      	cmp	r6, #0
    1052:	d101      	bne.n	1058 <spi_transceive_buffer_wait+0x28>
		return STATUS_ERR_INVALID_ARG;
    1054:	2217      	movs	r2, #23
    1056:	e10f      	b.n	1278 <spi_transceive_buffer_wait+0x248>
	}

	if (!(module->receiver_enabled)) {
    1058:	79c3      	ldrb	r3, [r0, #7]
    105a:	2b00      	cmp	r3, #0
    105c:	d101      	bne.n	1062 <spi_transceive_buffer_wait+0x32>
		return STATUS_ERR_DENIED;
    105e:	221c      	movs	r2, #28
    1060:	e10a      	b.n	1278 <spi_transceive_buffer_wait+0x248>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1062:	7943      	ldrb	r3, [r0, #5]
    1064:	2b00      	cmp	r3, #0
    1066:	d103      	bne.n	1070 <spi_transceive_buffer_wait+0x40>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1068:	6803      	ldr	r3, [r0, #0]
    106a:	7e1b      	ldrb	r3, [r3, #24]
    106c:	079b      	lsls	r3, r3, #30
    106e:	d404      	bmi.n	107a <spi_transceive_buffer_wait+0x4a>
		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
    1070:	46b4      	mov	ip, r6
    1072:	2300      	movs	r3, #0
    1074:	4698      	mov	r8, r3
    1076:	2100      	movs	r1, #0
    1078:	e075      	b.n	1166 <spi_transceive_buffer_wait+0x136>
		_spi_clear_tx_complete_flag(module);
    107a:	4b84      	ldr	r3, [pc, #528]	; (128c <spi_transceive_buffer_wait+0x25c>)
    107c:	4798      	blx	r3
    107e:	e7f7      	b.n	1070 <spi_transceive_buffer_wait+0x40>
    1080:	2300      	movs	r3, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1082:	4a83      	ldr	r2, [pc, #524]	; (1290 <spi_transceive_buffer_wait+0x260>)
    1084:	4293      	cmp	r3, r2
    1086:	d805      	bhi.n	1094 <spi_transceive_buffer_wait+0x64>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1088:	6822      	ldr	r2, [r4, #0]
    108a:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    108c:	07d2      	lsls	r2, r2, #31
    108e:	d401      	bmi.n	1094 <spi_transceive_buffer_wait+0x64>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1090:	3301      	adds	r3, #1
    1092:	e7f6      	b.n	1082 <spi_transceive_buffer_wait+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1094:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1096:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1098:	0792      	lsls	r2, r2, #30
    109a:	d404      	bmi.n	10a6 <spi_transceive_buffer_wait+0x76>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    109c:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_write(module)) {
    109e:	07db      	lsls	r3, r3, #31
    10a0:	d468      	bmi.n	1174 <spi_transceive_buffer_wait+0x144>
				return STATUS_ERR_TIMEOUT;
    10a2:	2212      	movs	r2, #18
    10a4:	e0e8      	b.n	1278 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    10a6:	0020      	movs	r0, r4
    10a8:	4b78      	ldr	r3, [pc, #480]	; (128c <spi_transceive_buffer_wait+0x25c>)
    10aa:	4798      	blx	r3
				return STATUS_ABORTED;
    10ac:	2204      	movs	r2, #4
    10ae:	e0e3      	b.n	1278 <spi_transceive_buffer_wait+0x248>
			data_to_send |= (tx_data[tx_pos++] << 8);
    10b0:	3102      	adds	r1, #2
    10b2:	9a01      	ldr	r2, [sp, #4]
    10b4:	5d92      	ldrb	r2, [r2, r6]
    10b6:	0212      	lsls	r2, r2, #8
    10b8:	4650      	mov	r0, sl
    10ba:	4302      	orrs	r2, r0
    10bc:	b28e      	uxth	r6, r1
    10be:	e068      	b.n	1192 <spi_transceive_buffer_wait+0x162>
						data_to_send |= (tx_data[tx_pos++] << 8);
    10c0:	3602      	adds	r6, #2
    10c2:	9901      	ldr	r1, [sp, #4]
    10c4:	5c09      	ldrb	r1, [r1, r0]
    10c6:	0209      	lsls	r1, r1, #8
    10c8:	4650      	mov	r0, sl
    10ca:	4301      	orrs	r1, r0
    10cc:	4689      	mov	r9, r1
    10ce:	b2b0      	uxth	r0, r6
    10d0:	e01a      	b.n	1108 <spi_transceive_buffer_wait+0xd8>
					length--;
    10d2:	3f01      	subs	r7, #1
    10d4:	b2bf      	uxth	r7, r7
    10d6:	0006      	movs	r6, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    10d8:	6822      	ldr	r2, [r4, #0]
    10da:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    10dc:	0752      	lsls	r2, r2, #29
    10de:	d41d      	bmi.n	111c <spi_transceive_buffer_wait+0xec>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10e0:	3301      	adds	r3, #1
    10e2:	4a6b      	ldr	r2, [pc, #428]	; (1290 <spi_transceive_buffer_wait+0x260>)
    10e4:	4293      	cmp	r3, r2
    10e6:	d819      	bhi.n	111c <spi_transceive_buffer_wait+0xec>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10e8:	6822      	ldr	r2, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10ea:	7e11      	ldrb	r1, [r2, #24]
				if (spi_is_ready_to_write(module)) {
    10ec:	07c9      	lsls	r1, r1, #31
    10ee:	d5f3      	bpl.n	10d8 <spi_transceive_buffer_wait+0xa8>
					data_to_send = tx_data[tx_pos++];
    10f0:	1c70      	adds	r0, r6, #1
    10f2:	b280      	uxth	r0, r0
    10f4:	9901      	ldr	r1, [sp, #4]
    10f6:	5d89      	ldrb	r1, [r1, r6]
    10f8:	468a      	mov	sl, r1
    10fa:	ad02      	add	r5, sp, #8
    10fc:	8069      	strh	r1, [r5, #2]
    10fe:	8869      	ldrh	r1, [r5, #2]
    1100:	4689      	mov	r9, r1
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1102:	79a1      	ldrb	r1, [r4, #6]
    1104:	2901      	cmp	r1, #1
    1106:	d0db      	beq.n	10c0 <spi_transceive_buffer_wait+0x90>
    1108:	7e16      	ldrb	r6, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    110a:	07f1      	lsls	r1, r6, #31
    110c:	d5e1      	bpl.n	10d2 <spi_transceive_buffer_wait+0xa2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    110e:	4649      	mov	r1, r9
    1110:	05c9      	lsls	r1, r1, #23
    1112:	0dc9      	lsrs	r1, r1, #23
    1114:	6291      	str	r1, [r2, #40]	; 0x28
    1116:	e7dc      	b.n	10d2 <spi_transceive_buffer_wait+0xa2>
    1118:	2300      	movs	r3, #0
    111a:	e7e2      	b.n	10e2 <spi_transceive_buffer_wait+0xb2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    111c:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    111e:	7e1a      	ldrb	r2, [r3, #24]
			if (spi_is_write_complete(module)) {
    1120:	0792      	lsls	r2, r2, #30
    1122:	d404      	bmi.n	112e <spi_transceive_buffer_wait+0xfe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1124:	7e1b      	ldrb	r3, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    1126:	075b      	lsls	r3, r3, #29
    1128:	d43c      	bmi.n	11a4 <spi_transceive_buffer_wait+0x174>
				return STATUS_ERR_TIMEOUT;
    112a:	2212      	movs	r2, #18
    112c:	e0a4      	b.n	1278 <spi_transceive_buffer_wait+0x248>
				_spi_clear_tx_complete_flag(module);
    112e:	0020      	movs	r0, r4
    1130:	4b56      	ldr	r3, [pc, #344]	; (128c <spi_transceive_buffer_wait+0x25c>)
    1132:	4798      	blx	r3
				return STATUS_ABORTED;
    1134:	2204      	movs	r2, #4
    1136:	e09f      	b.n	1278 <spi_transceive_buffer_wait+0x248>
	enum status_code retval = STATUS_OK;
    1138:	2200      	movs	r2, #0
    113a:	e044      	b.n	11c6 <spi_transceive_buffer_wait+0x196>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    113c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    113e:	05c9      	lsls	r1, r1, #23
    1140:	0dc9      	lsrs	r1, r1, #23
    1142:	e001      	b.n	1148 <spi_transceive_buffer_wait+0x118>
		uint16_t received_data = 0;
    1144:	2100      	movs	r1, #0
		return STATUS_ERR_IO;
    1146:	2210      	movs	r2, #16
		if (retval != STATUS_OK) {
    1148:	2a00      	cmp	r2, #0
    114a:	d000      	beq.n	114e <spi_transceive_buffer_wait+0x11e>
    114c:	e094      	b.n	1278 <spi_transceive_buffer_wait+0x248>
		rx_data[rx_pos++] = received_data;
    114e:	4643      	mov	r3, r8
    1150:	3301      	adds	r3, #1
    1152:	b29b      	uxth	r3, r3
    1154:	9a03      	ldr	r2, [sp, #12]
    1156:	4640      	mov	r0, r8
    1158:	5411      	strb	r1, [r2, r0]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    115a:	79a2      	ldrb	r2, [r4, #6]
    115c:	2a01      	cmp	r2, #1
    115e:	d038      	beq.n	11d2 <spi_transceive_buffer_wait+0x1a2>
			rx_data[rx_pos++] = (received_data >> 8);
    1160:	4698      	mov	r8, r3
    1162:	0031      	movs	r1, r6
    1164:	003e      	movs	r6, r7
	while (length--) {
    1166:	1e77      	subs	r7, r6, #1
    1168:	b2bf      	uxth	r7, r7
    116a:	2e00      	cmp	r6, #0
    116c:	d037      	beq.n	11de <spi_transceive_buffer_wait+0x1ae>
		if (module->mode == SPI_MODE_SLAVE) {
    116e:	7963      	ldrb	r3, [r4, #5]
    1170:	2b00      	cmp	r3, #0
    1172:	d085      	beq.n	1080 <spi_transceive_buffer_wait+0x50>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1174:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1176:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    1178:	07d2      	lsls	r2, r2, #31
    117a:	d5fb      	bpl.n	1174 <spi_transceive_buffer_wait+0x144>
		uint16_t data_to_send = tx_data[tx_pos++];
    117c:	1c4e      	adds	r6, r1, #1
    117e:	b2b6      	uxth	r6, r6
    1180:	9a01      	ldr	r2, [sp, #4]
    1182:	5c52      	ldrb	r2, [r2, r1]
    1184:	4692      	mov	sl, r2
    1186:	a802      	add	r0, sp, #8
    1188:	8042      	strh	r2, [r0, #2]
    118a:	8842      	ldrh	r2, [r0, #2]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    118c:	79a0      	ldrb	r0, [r4, #6]
    118e:	2801      	cmp	r0, #1
    1190:	d08e      	beq.n	10b0 <spi_transceive_buffer_wait+0x80>
    1192:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1194:	07c9      	lsls	r1, r1, #31
    1196:	d502      	bpl.n	119e <spi_transceive_buffer_wait+0x16e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1198:	05d2      	lsls	r2, r2, #23
    119a:	0dd2      	lsrs	r2, r2, #23
    119c:	629a      	str	r2, [r3, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    119e:	7963      	ldrb	r3, [r4, #5]
    11a0:	2b00      	cmp	r3, #0
    11a2:	d0b9      	beq.n	1118 <spi_transceive_buffer_wait+0xe8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11a4:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11a6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(module)) {
    11a8:	0752      	lsls	r2, r2, #29
    11aa:	d5fb      	bpl.n	11a4 <spi_transceive_buffer_wait+0x174>
		rx_length--;
    11ac:	4662      	mov	r2, ip
    11ae:	3a01      	subs	r2, #1
    11b0:	b292      	uxth	r2, r2
    11b2:	4694      	mov	ip, r2
    11b4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    11b6:	0752      	lsls	r2, r2, #29
    11b8:	d5c4      	bpl.n	1144 <spi_transceive_buffer_wait+0x114>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    11ba:	8b5a      	ldrh	r2, [r3, #26]
    11bc:	0752      	lsls	r2, r2, #29
    11be:	d5bb      	bpl.n	1138 <spi_transceive_buffer_wait+0x108>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    11c0:	2204      	movs	r2, #4
    11c2:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    11c4:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11c6:	79a1      	ldrb	r1, [r4, #6]
    11c8:	2901      	cmp	r1, #1
    11ca:	d0b7      	beq.n	113c <spi_transceive_buffer_wait+0x10c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    11cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    11ce:	b2c9      	uxtb	r1, r1
    11d0:	e7ba      	b.n	1148 <spi_transceive_buffer_wait+0x118>
			rx_data[rx_pos++] = (received_data >> 8);
    11d2:	3002      	adds	r0, #2
    11d4:	0a09      	lsrs	r1, r1, #8
    11d6:	9a03      	ldr	r2, [sp, #12]
    11d8:	54d1      	strb	r1, [r2, r3]
    11da:	b283      	uxth	r3, r0
    11dc:	e7c0      	b.n	1160 <spi_transceive_buffer_wait+0x130>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    11de:	7962      	ldrb	r2, [r4, #5]
    11e0:	2a01      	cmp	r2, #1
    11e2:	d003      	beq.n	11ec <spi_transceive_buffer_wait+0x1bc>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    11e4:	2a00      	cmp	r2, #0
    11e6:	d039      	beq.n	125c <spi_transceive_buffer_wait+0x22c>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    11e8:	2200      	movs	r2, #0
    11ea:	e045      	b.n	1278 <spi_transceive_buffer_wait+0x248>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    11ec:	6823      	ldr	r3, [r4, #0]
    11ee:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    11f0:	079b      	lsls	r3, r3, #30
    11f2:	d5fb      	bpl.n	11ec <spi_transceive_buffer_wait+0x1bc>
    11f4:	e7f6      	b.n	11e4 <spi_transceive_buffer_wait+0x1b4>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11f6:	3301      	adds	r3, #1
    11f8:	4a25      	ldr	r2, [pc, #148]	; (1290 <spi_transceive_buffer_wait+0x260>)
    11fa:	4293      	cmp	r3, r2
    11fc:	d803      	bhi.n	1206 <spi_transceive_buffer_wait+0x1d6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11fe:	6822      	ldr	r2, [r4, #0]
    1200:	7e12      	ldrb	r2, [r2, #24]
				if (spi_is_ready_to_read(module)) {
    1202:	0752      	lsls	r2, r2, #29
    1204:	d5f7      	bpl.n	11f6 <spi_transceive_buffer_wait+0x1c6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1206:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1208:	7e1a      	ldrb	r2, [r3, #24]
			if (!spi_is_ready_to_read(module)) {
    120a:	0752      	lsls	r2, r2, #29
    120c:	d53c      	bpl.n	1288 <spi_transceive_buffer_wait+0x258>
			rx_length--;
    120e:	4662      	mov	r2, ip
    1210:	3a01      	subs	r2, #1
    1212:	b292      	uxth	r2, r2
    1214:	4694      	mov	ip, r2
    1216:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1218:	0752      	lsls	r2, r2, #29
    121a:	d511      	bpl.n	1240 <spi_transceive_buffer_wait+0x210>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    121c:	8b5a      	ldrh	r2, [r3, #26]
    121e:	0752      	lsls	r2, r2, #29
    1220:	d508      	bpl.n	1234 <spi_transceive_buffer_wait+0x204>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1222:	2204      	movs	r2, #4
    1224:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1226:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1228:	79a1      	ldrb	r1, [r4, #6]
    122a:	2901      	cmp	r1, #1
    122c:	d004      	beq.n	1238 <spi_transceive_buffer_wait+0x208>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    122e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1230:	b2c9      	uxtb	r1, r1
    1232:	e007      	b.n	1244 <spi_transceive_buffer_wait+0x214>
	enum status_code retval = STATUS_OK;
    1234:	2200      	movs	r2, #0
    1236:	e7f7      	b.n	1228 <spi_transceive_buffer_wait+0x1f8>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1238:	6a99      	ldr	r1, [r3, #40]	; 0x28
    123a:	05c9      	lsls	r1, r1, #23
    123c:	0dc9      	lsrs	r1, r1, #23
    123e:	e001      	b.n	1244 <spi_transceive_buffer_wait+0x214>
			uint16_t received_data = 0;
    1240:	0031      	movs	r1, r6
		return STATUS_ERR_IO;
    1242:	2210      	movs	r2, #16
			if (retval != STATUS_OK) {
    1244:	2a00      	cmp	r2, #0
    1246:	d117      	bne.n	1278 <spi_transceive_buffer_wait+0x248>
			rx_data[rx_pos++] = received_data;
    1248:	4643      	mov	r3, r8
    124a:	3301      	adds	r3, #1
    124c:	b29b      	uxth	r3, r3
    124e:	9a03      	ldr	r2, [sp, #12]
    1250:	4640      	mov	r0, r8
    1252:	5411      	strb	r1, [r2, r0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1254:	79a2      	ldrb	r2, [r4, #6]
    1256:	2a01      	cmp	r2, #1
    1258:	d005      	beq.n	1266 <spi_transceive_buffer_wait+0x236>
				rx_data[rx_pos++] = (received_data >> 8);
    125a:	4698      	mov	r8, r3
		while (rx_length) {
    125c:	4663      	mov	r3, ip
    125e:	2b00      	cmp	r3, #0
    1260:	d007      	beq.n	1272 <spi_transceive_buffer_wait+0x242>
    1262:	2300      	movs	r3, #0
    1264:	e7c8      	b.n	11f8 <spi_transceive_buffer_wait+0x1c8>
				rx_data[rx_pos++] = (received_data >> 8);
    1266:	3002      	adds	r0, #2
    1268:	0a09      	lsrs	r1, r1, #8
    126a:	9a03      	ldr	r2, [sp, #12]
    126c:	54d1      	strb	r1, [r2, r3]
    126e:	b283      	uxth	r3, r0
    1270:	e7f3      	b.n	125a <spi_transceive_buffer_wait+0x22a>
	return STATUS_OK;
    1272:	2200      	movs	r2, #0
    1274:	e000      	b.n	1278 <spi_transceive_buffer_wait+0x248>
		return STATUS_BUSY;
    1276:	2205      	movs	r2, #5
}
    1278:	0010      	movs	r0, r2
    127a:	b005      	add	sp, #20
    127c:	bc3c      	pop	{r2, r3, r4, r5}
    127e:	4690      	mov	r8, r2
    1280:	4699      	mov	r9, r3
    1282:	46a2      	mov	sl, r4
    1284:	46ab      	mov	fp, r5
    1286:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return STATUS_ERR_TIMEOUT;
    1288:	2212      	movs	r2, #18
    128a:	e7f5      	b.n	1278 <spi_transceive_buffer_wait+0x248>
    128c:	00000a0d 	.word	0x00000a0d
    1290:	00002710 	.word	0x00002710

00001294 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1294:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1296:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1298:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    129a:	780a      	ldrb	r2, [r1, #0]
    129c:	b2d2      	uxtb	r2, r2
    129e:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    12a0:	1c4c      	adds	r4, r1, #1
    12a2:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12a4:	7986      	ldrb	r6, [r0, #6]
    12a6:	2e01      	cmp	r6, #1
    12a8:	d007      	beq.n	12ba <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    12aa:	05db      	lsls	r3, r3, #23
    12ac:	0ddb      	lsrs	r3, r3, #23
    12ae:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    12b0:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    12b2:	3b01      	subs	r3, #1
    12b4:	b29b      	uxth	r3, r3
    12b6:	8683      	strh	r3, [r0, #52]	; 0x34
}
    12b8:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    12ba:	784b      	ldrb	r3, [r1, #1]
    12bc:	021b      	lsls	r3, r3, #8
    12be:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    12c0:	1c8c      	adds	r4, r1, #2
    12c2:	62c4      	str	r4, [r0, #44]	; 0x2c
    12c4:	e7f1      	b.n	12aa <_spi_write+0x16>
	...

000012c8 <_spi_write_dummy>:
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12c8:	6803      	ldr	r3, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    12ca:	4a04      	ldr	r2, [pc, #16]	; (12dc <_spi_write_dummy+0x14>)
    12cc:	8812      	ldrh	r2, [r2, #0]
    12ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    12d0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    12d2:	3b01      	subs	r3, #1
    12d4:	b29b      	uxth	r3, r3
    12d6:	8643      	strh	r3, [r0, #50]	; 0x32
}
    12d8:	4770      	bx	lr
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	200000a0 	.word	0x200000a0

000012e0 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12e0:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    12e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    12e4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    12e6:	3b01      	subs	r3, #1
    12e8:	b29b      	uxth	r3, r3
    12ea:	8643      	strh	r3, [r0, #50]	; 0x32
}
    12ec:	4770      	bx	lr

000012ee <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12ee:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    12f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    12f2:	05db      	lsls	r3, r3, #23
    12f4:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    12f6:	b2da      	uxtb	r2, r3
    12f8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    12fa:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    12fc:	6a82      	ldr	r2, [r0, #40]	; 0x28
    12fe:	1c51      	adds	r1, r2, #1
    1300:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1302:	7981      	ldrb	r1, [r0, #6]
    1304:	2901      	cmp	r1, #1
    1306:	d004      	beq.n	1312 <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1308:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    130a:	3b01      	subs	r3, #1
    130c:	b29b      	uxth	r3, r3
    130e:	8603      	strh	r3, [r0, #48]	; 0x30
}
    1310:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1312:	0a1b      	lsrs	r3, r3, #8
    1314:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1316:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1318:	3301      	adds	r3, #1
    131a:	6283      	str	r3, [r0, #40]	; 0x28
    131c:	e7f4      	b.n	1308 <_spi_read+0x1a>
	...

00001320 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1322:	0080      	lsls	r0, r0, #2
    1324:	4b6b      	ldr	r3, [pc, #428]	; (14d4 <_spi_interrupt_handler+0x1b4>)
    1326:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1328:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    132a:	2337      	movs	r3, #55	; 0x37
    132c:	5ce3      	ldrb	r3, [r4, r3]
    132e:	2236      	movs	r2, #54	; 0x36
    1330:	5ca7      	ldrb	r7, [r4, r2]
	uint8_t callback_mask =
    1332:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1334:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1336:	7db5      	ldrb	r5, [r6, #22]
    1338:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    133a:	07eb      	lsls	r3, r5, #31
    133c:	d516      	bpl.n	136c <_spi_interrupt_handler+0x4c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    133e:	7963      	ldrb	r3, [r4, #5]
    1340:	2b01      	cmp	r3, #1
    1342:	d04d      	beq.n	13e0 <_spi_interrupt_handler+0xc0>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1344:	7963      	ldrb	r3, [r4, #5]
		if (0
    1346:	2b01      	cmp	r3, #1
    1348:	d057      	beq.n	13fa <_spi_interrupt_handler+0xda>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    134a:	2b00      	cmp	r3, #0
    134c:	d10e      	bne.n	136c <_spi_interrupt_handler+0x4c>
			(module->dir != SPI_DIRECTION_READ))
    134e:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1350:	2b00      	cmp	r3, #0
    1352:	d00b      	beq.n	136c <_spi_interrupt_handler+0x4c>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1354:	0020      	movs	r0, r4
    1356:	4b60      	ldr	r3, [pc, #384]	; (14d8 <_spi_interrupt_handler+0x1b8>)
    1358:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    135a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    135c:	b29b      	uxth	r3, r3
    135e:	2b00      	cmp	r3, #0
    1360:	d104      	bne.n	136c <_spi_interrupt_handler+0x4c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1362:	3301      	adds	r3, #1
    1364:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1366:	7a63      	ldrb	r3, [r4, #9]
    1368:	2b01      	cmp	r3, #1
    136a:	d04a      	beq.n	1402 <_spi_interrupt_handler+0xe2>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    136c:	076b      	lsls	r3, r5, #29
    136e:	d511      	bpl.n	1394 <_spi_interrupt_handler+0x74>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1370:	8b73      	ldrh	r3, [r6, #26]
    1372:	075b      	lsls	r3, r3, #29
    1374:	d54f      	bpl.n	1416 <_spi_interrupt_handler+0xf6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1376:	7a63      	ldrb	r3, [r4, #9]
    1378:	2b01      	cmp	r3, #1
    137a:	d008      	beq.n	138e <_spi_interrupt_handler+0x6e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    137c:	221e      	movs	r2, #30
    137e:	2338      	movs	r3, #56	; 0x38
    1380:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1382:	3b35      	subs	r3, #53	; 0x35
    1384:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1386:	3302      	adds	r3, #2
    1388:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    138a:	073b      	lsls	r3, r7, #28
    138c:	d43f      	bmi.n	140e <_spi_interrupt_handler+0xee>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    138e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1390:	2304      	movs	r3, #4
    1392:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1394:	07ab      	lsls	r3, r5, #30
    1396:	d513      	bpl.n	13c0 <_spi_interrupt_handler+0xa0>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1398:	7963      	ldrb	r3, [r4, #5]
    139a:	2b00      	cmp	r3, #0
    139c:	d10d      	bne.n	13ba <_spi_interrupt_handler+0x9a>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    139e:	3307      	adds	r3, #7
    13a0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    13a2:	3b05      	subs	r3, #5
    13a4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    13a6:	3301      	adds	r3, #1
    13a8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    13aa:	2300      	movs	r3, #0
    13ac:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    13ae:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    13b0:	3338      	adds	r3, #56	; 0x38
    13b2:	2200      	movs	r2, #0
    13b4:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    13b6:	06fb      	lsls	r3, r7, #27
    13b8:	d464      	bmi.n	1484 <_spi_interrupt_handler+0x164>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    13ba:	7963      	ldrb	r3, [r4, #5]
    13bc:	2b01      	cmp	r3, #1
    13be:	d065      	beq.n	148c <_spi_interrupt_handler+0x16c>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    13c0:	072b      	lsls	r3, r5, #28
    13c2:	d508      	bpl.n	13d6 <_spi_interrupt_handler+0xb6>
			if (module->mode == SPI_MODE_SLAVE) {
    13c4:	7963      	ldrb	r3, [r4, #5]
    13c6:	2b00      	cmp	r3, #0
    13c8:	d105      	bne.n	13d6 <_spi_interrupt_handler+0xb6>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    13ca:	3308      	adds	r3, #8
    13cc:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    13ce:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    13d0:	06bb      	lsls	r3, r7, #26
    13d2:	d500      	bpl.n	13d6 <_spi_interrupt_handler+0xb6>
    13d4:	e070      	b.n	14b8 <_spi_interrupt_handler+0x198>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    13d6:	b26d      	sxtb	r5, r5
    13d8:	2d00      	cmp	r5, #0
    13da:	da00      	bge.n	13de <_spi_interrupt_handler+0xbe>
    13dc:	e070      	b.n	14c0 <_spi_interrupt_handler+0x1a0>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    13de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    13e0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    13e2:	2b00      	cmp	r3, #0
    13e4:	d1ae      	bne.n	1344 <_spi_interrupt_handler+0x24>
			_spi_write_dummy(module);
    13e6:	0020      	movs	r0, r4
    13e8:	4b3c      	ldr	r3, [pc, #240]	; (14dc <_spi_interrupt_handler+0x1bc>)
    13ea:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    13ec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    13ee:	b29b      	uxth	r3, r3
    13f0:	2b00      	cmp	r3, #0
    13f2:	d1a7      	bne.n	1344 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    13f4:	3301      	adds	r3, #1
    13f6:	7533      	strb	r3, [r6, #20]
    13f8:	e7a4      	b.n	1344 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    13fa:	7a62      	ldrb	r2, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    13fc:	2a00      	cmp	r2, #0
    13fe:	d1a9      	bne.n	1354 <_spi_interrupt_handler+0x34>
    1400:	e7a3      	b.n	134a <_spi_interrupt_handler+0x2a>
						!(module->receiver_enabled)) {
    1402:	79e3      	ldrb	r3, [r4, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1404:	2b00      	cmp	r3, #0
    1406:	d1b1      	bne.n	136c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1408:	3302      	adds	r3, #2
    140a:	75b3      	strb	r3, [r6, #22]
    140c:	e7ae      	b.n	136c <_spi_interrupt_handler+0x4c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    140e:	0020      	movs	r0, r4
    1410:	69a3      	ldr	r3, [r4, #24]
    1412:	4798      	blx	r3
    1414:	e7bb      	b.n	138e <_spi_interrupt_handler+0x6e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1416:	7a63      	ldrb	r3, [r4, #9]
    1418:	2b01      	cmp	r3, #1
    141a:	d017      	beq.n	144c <_spi_interrupt_handler+0x12c>
				_spi_read(module);
    141c:	0020      	movs	r0, r4
    141e:	4b30      	ldr	r3, [pc, #192]	; (14e0 <_spi_interrupt_handler+0x1c0>)
    1420:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    1422:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1424:	b29b      	uxth	r3, r3
    1426:	2b00      	cmp	r3, #0
    1428:	d1b4      	bne.n	1394 <_spi_interrupt_handler+0x74>
					module->status = STATUS_OK;
    142a:	2200      	movs	r2, #0
    142c:	3338      	adds	r3, #56	; 0x38
    142e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1430:	3b34      	subs	r3, #52	; 0x34
    1432:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1434:	7a63      	ldrb	r3, [r4, #9]
    1436:	2b02      	cmp	r3, #2
    1438:	d01d      	beq.n	1476 <_spi_interrupt_handler+0x156>
					} else if (module->dir == SPI_DIRECTION_READ) {
    143a:	7a63      	ldrb	r3, [r4, #9]
    143c:	2b00      	cmp	r3, #0
    143e:	d1a9      	bne.n	1394 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1440:	07bb      	lsls	r3, r7, #30
    1442:	d5a7      	bpl.n	1394 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1444:	0020      	movs	r0, r4
    1446:	6923      	ldr	r3, [r4, #16]
    1448:	4798      	blx	r3
    144a:	e7a3      	b.n	1394 <_spi_interrupt_handler+0x74>
				_spi_read_dummy(module);
    144c:	0020      	movs	r0, r4
    144e:	4b25      	ldr	r3, [pc, #148]	; (14e4 <_spi_interrupt_handler+0x1c4>)
    1450:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1452:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1454:	b29b      	uxth	r3, r3
    1456:	2b00      	cmp	r3, #0
    1458:	d19c      	bne.n	1394 <_spi_interrupt_handler+0x74>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    145a:	3304      	adds	r3, #4
    145c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    145e:	2200      	movs	r2, #0
    1460:	3334      	adds	r3, #52	; 0x34
    1462:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1464:	3b35      	subs	r3, #53	; 0x35
    1466:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1468:	07fb      	lsls	r3, r7, #31
    146a:	d400      	bmi.n	146e <_spi_interrupt_handler+0x14e>
    146c:	e792      	b.n	1394 <_spi_interrupt_handler+0x74>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    146e:	0020      	movs	r0, r4
    1470:	68e3      	ldr	r3, [r4, #12]
    1472:	4798      	blx	r3
    1474:	e78e      	b.n	1394 <_spi_interrupt_handler+0x74>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1476:	077b      	lsls	r3, r7, #29
    1478:	d400      	bmi.n	147c <_spi_interrupt_handler+0x15c>
    147a:	e78b      	b.n	1394 <_spi_interrupt_handler+0x74>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    147c:	0020      	movs	r0, r4
    147e:	6963      	ldr	r3, [r4, #20]
    1480:	4798      	blx	r3
    1482:	e787      	b.n	1394 <_spi_interrupt_handler+0x74>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1484:	0020      	movs	r0, r4
    1486:	69e3      	ldr	r3, [r4, #28]
    1488:	4798      	blx	r3
    148a:	e796      	b.n	13ba <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    148c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    148e:	2b01      	cmp	r3, #1
    1490:	d000      	beq.n	1494 <_spi_interrupt_handler+0x174>
    1492:	e795      	b.n	13c0 <_spi_interrupt_handler+0xa0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1494:	79e3      	ldrb	r3, [r4, #7]
    1496:	2b00      	cmp	r3, #0
    1498:	d000      	beq.n	149c <_spi_interrupt_handler+0x17c>
    149a:	e791      	b.n	13c0 <_spi_interrupt_handler+0xa0>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    149c:	3302      	adds	r3, #2
    149e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    14a0:	3301      	adds	r3, #1
    14a2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    14a4:	2200      	movs	r2, #0
    14a6:	3335      	adds	r3, #53	; 0x35
    14a8:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    14aa:	07fb      	lsls	r3, r7, #31
    14ac:	d400      	bmi.n	14b0 <_spi_interrupt_handler+0x190>
    14ae:	e787      	b.n	13c0 <_spi_interrupt_handler+0xa0>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    14b0:	0020      	movs	r0, r4
    14b2:	68e3      	ldr	r3, [r4, #12]
    14b4:	4798      	blx	r3
    14b6:	e783      	b.n	13c0 <_spi_interrupt_handler+0xa0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    14b8:	0020      	movs	r0, r4
    14ba:	6a23      	ldr	r3, [r4, #32]
    14bc:	4798      	blx	r3
    14be:	e78a      	b.n	13d6 <_spi_interrupt_handler+0xb6>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    14c0:	2380      	movs	r3, #128	; 0x80
    14c2:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    14c4:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    14c6:	067b      	lsls	r3, r7, #25
    14c8:	d400      	bmi.n	14cc <_spi_interrupt_handler+0x1ac>
    14ca:	e788      	b.n	13de <_spi_interrupt_handler+0xbe>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    14cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    14ce:	0020      	movs	r0, r4
    14d0:	4798      	blx	r3
}
    14d2:	e784      	b.n	13de <_spi_interrupt_handler+0xbe>
    14d4:	200000a4 	.word	0x200000a4
    14d8:	00001295 	.word	0x00001295
    14dc:	000012c9 	.word	0x000012c9
    14e0:	000012ef 	.word	0x000012ef
    14e4:	000012e1 	.word	0x000012e1

000014e8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    14e8:	4770      	bx	lr
	...

000014ec <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    14ec:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    14ee:	4b0b      	ldr	r3, [pc, #44]	; (151c <_sercom_set_handler+0x30>)
    14f0:	781b      	ldrb	r3, [r3, #0]
    14f2:	2b00      	cmp	r3, #0
    14f4:	d008      	beq.n	1508 <_sercom_set_handler+0x1c>
    14f6:	e00c      	b.n	1512 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14f8:	009a      	lsls	r2, r3, #2
    14fa:	4d09      	ldr	r5, [pc, #36]	; (1520 <_sercom_set_handler+0x34>)
    14fc:	4c09      	ldr	r4, [pc, #36]	; (1524 <_sercom_set_handler+0x38>)
    14fe:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    1500:	2500      	movs	r5, #0
    1502:	4c09      	ldr	r4, [pc, #36]	; (1528 <_sercom_set_handler+0x3c>)
    1504:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1506:	3301      	adds	r3, #1
    1508:	2b03      	cmp	r3, #3
    150a:	d9f5      	bls.n	14f8 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    150c:	2201      	movs	r2, #1
    150e:	4b03      	ldr	r3, [pc, #12]	; (151c <_sercom_set_handler+0x30>)
    1510:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1512:	0080      	lsls	r0, r0, #2
    1514:	4b03      	ldr	r3, [pc, #12]	; (1524 <_sercom_set_handler+0x38>)
    1516:	50c1      	str	r1, [r0, r3]
}
    1518:	bd30      	pop	{r4, r5, pc}
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	2000002e 	.word	0x2000002e
    1520:	000014e9 	.word	0x000014e9
    1524:	20000030 	.word	0x20000030
    1528:	200000a4 	.word	0x200000a4

0000152c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    152c:	b500      	push	{lr}
    152e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1530:	4b04      	ldr	r3, [pc, #16]	; (1544 <_sercom_get_interrupt_vector+0x18>)
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	9301      	str	r3, [sp, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1536:	4b04      	ldr	r3, [pc, #16]	; (1548 <_sercom_get_interrupt_vector+0x1c>)
    1538:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    153a:	ab01      	add	r3, sp, #4
    153c:	5618      	ldrsb	r0, [r3, r0]
}
    153e:	b003      	add	sp, #12
    1540:	bd00      	pop	{pc}
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	00002070 	.word	0x00002070
    1548:	000009d9 	.word	0x000009d9

0000154c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    154c:	b510      	push	{r4, lr}
    154e:	4b02      	ldr	r3, [pc, #8]	; (1558 <SERCOM0_Handler+0xc>)
    1550:	681b      	ldr	r3, [r3, #0]
    1552:	2000      	movs	r0, #0
    1554:	4798      	blx	r3
    1556:	bd10      	pop	{r4, pc}
    1558:	20000030 	.word	0x20000030

0000155c <SERCOM1_Handler>:
    155c:	b510      	push	{r4, lr}
    155e:	4b02      	ldr	r3, [pc, #8]	; (1568 <SERCOM1_Handler+0xc>)
    1560:	685b      	ldr	r3, [r3, #4]
    1562:	2001      	movs	r0, #1
    1564:	4798      	blx	r3
    1566:	bd10      	pop	{r4, pc}
    1568:	20000030 	.word	0x20000030

0000156c <SERCOM2_Handler>:
    156c:	b510      	push	{r4, lr}
    156e:	4b02      	ldr	r3, [pc, #8]	; (1578 <SERCOM2_Handler+0xc>)
    1570:	689b      	ldr	r3, [r3, #8]
    1572:	2002      	movs	r0, #2
    1574:	4798      	blx	r3
    1576:	bd10      	pop	{r4, pc}
    1578:	20000030 	.word	0x20000030

0000157c <SERCOM3_Handler>:
    157c:	b510      	push	{r4, lr}
    157e:	4b02      	ldr	r3, [pc, #8]	; (1588 <SERCOM3_Handler+0xc>)
    1580:	68db      	ldr	r3, [r3, #12]
    1582:	2003      	movs	r0, #3
    1584:	4798      	blx	r3
    1586:	bd10      	pop	{r4, pc}
    1588:	20000030 	.word	0x20000030

0000158c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    158c:	4770      	bx	lr
	...

00001590 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1590:	4b0c      	ldr	r3, [pc, #48]	; (15c4 <cpu_irq_enter_critical+0x34>)
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	2b00      	cmp	r3, #0
    1596:	d106      	bne.n	15a6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1598:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    159c:	2b00      	cmp	r3, #0
    159e:	d007      	beq.n	15b0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    15a0:	2200      	movs	r2, #0
    15a2:	4b09      	ldr	r3, [pc, #36]	; (15c8 <cpu_irq_enter_critical+0x38>)
    15a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    15a6:	4a07      	ldr	r2, [pc, #28]	; (15c4 <cpu_irq_enter_critical+0x34>)
    15a8:	6813      	ldr	r3, [r2, #0]
    15aa:	3301      	adds	r3, #1
    15ac:	6013      	str	r3, [r2, #0]
}
    15ae:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    15b0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    15b2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    15b6:	2200      	movs	r2, #0
    15b8:	4b04      	ldr	r3, [pc, #16]	; (15cc <cpu_irq_enter_critical+0x3c>)
    15ba:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    15bc:	3201      	adds	r2, #1
    15be:	4b02      	ldr	r3, [pc, #8]	; (15c8 <cpu_irq_enter_critical+0x38>)
    15c0:	701a      	strb	r2, [r3, #0]
    15c2:	e7f0      	b.n	15a6 <cpu_irq_enter_critical+0x16>
    15c4:	20000040 	.word	0x20000040
    15c8:	20000044 	.word	0x20000044
    15cc:	20000008 	.word	0x20000008

000015d0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    15d0:	4b08      	ldr	r3, [pc, #32]	; (15f4 <cpu_irq_leave_critical+0x24>)
    15d2:	681a      	ldr	r2, [r3, #0]
    15d4:	3a01      	subs	r2, #1
    15d6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    15d8:	681b      	ldr	r3, [r3, #0]
    15da:	2b00      	cmp	r3, #0
    15dc:	d109      	bne.n	15f2 <cpu_irq_leave_critical+0x22>
    15de:	4b06      	ldr	r3, [pc, #24]	; (15f8 <cpu_irq_leave_critical+0x28>)
    15e0:	781b      	ldrb	r3, [r3, #0]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d005      	beq.n	15f2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    15e6:	2201      	movs	r2, #1
    15e8:	4b04      	ldr	r3, [pc, #16]	; (15fc <cpu_irq_leave_critical+0x2c>)
    15ea:	701a      	strb	r2, [r3, #0]
    15ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    15f0:	b662      	cpsie	i
	}
}
    15f2:	4770      	bx	lr
    15f4:	20000040 	.word	0x20000040
    15f8:	20000044 	.word	0x20000044
    15fc:	20000008 	.word	0x20000008

00001600 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1600:	b510      	push	{r4, lr}
    1602:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1604:	2201      	movs	r2, #1
    1606:	ab01      	add	r3, sp, #4
    1608:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    160a:	2400      	movs	r4, #0
    160c:	e004      	b.n	1618 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    160e:	b2e0      	uxtb	r0, r4
    1610:	a901      	add	r1, sp, #4
    1612:	4b03      	ldr	r3, [pc, #12]	; (1620 <_switch_peripheral_gclk+0x20>)
    1614:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1616:	3401      	adds	r4, #1
    1618:	2c24      	cmp	r4, #36	; 0x24
    161a:	d9f8      	bls.n	160e <_switch_peripheral_gclk+0xe>
	}
}
    161c:	b002      	add	sp, #8
    161e:	bd10      	pop	{r4, pc}
    1620:	00001aa1 	.word	0x00001aa1

00001624 <system_clock_source_get_hz>:
{
    1624:	b510      	push	{r4, lr}
	switch (clock_source) {
    1626:	2808      	cmp	r0, #8
    1628:	d832      	bhi.n	1690 <system_clock_source_get_hz+0x6c>
    162a:	0080      	lsls	r0, r0, #2
    162c:	4b1b      	ldr	r3, [pc, #108]	; (169c <system_clock_source_get_hz+0x78>)
    162e:	581b      	ldr	r3, [r3, r0]
    1630:	469f      	mov	pc, r3
		return 32768UL;
    1632:	2080      	movs	r0, #128	; 0x80
    1634:	0200      	lsls	r0, r0, #8
}
    1636:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    1638:	4b19      	ldr	r3, [pc, #100]	; (16a0 <system_clock_source_get_hz+0x7c>)
    163a:	6918      	ldr	r0, [r3, #16]
    163c:	e7fb      	b.n	1636 <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    163e:	4b19      	ldr	r3, [pc, #100]	; (16a4 <system_clock_source_get_hz+0x80>)
    1640:	6a1b      	ldr	r3, [r3, #32]
    1642:	059b      	lsls	r3, r3, #22
    1644:	0f9b      	lsrs	r3, r3, #30
    1646:	4818      	ldr	r0, [pc, #96]	; (16a8 <system_clock_source_get_hz+0x84>)
    1648:	40d8      	lsrs	r0, r3
    164a:	e7f4      	b.n	1636 <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    164c:	4b14      	ldr	r3, [pc, #80]	; (16a0 <system_clock_source_get_hz+0x7c>)
    164e:	6958      	ldr	r0, [r3, #20]
    1650:	e7f1      	b.n	1636 <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1652:	4b13      	ldr	r3, [pc, #76]	; (16a0 <system_clock_source_get_hz+0x7c>)
    1654:	681b      	ldr	r3, [r3, #0]
    1656:	079b      	lsls	r3, r3, #30
    1658:	d51c      	bpl.n	1694 <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    165a:	4b12      	ldr	r3, [pc, #72]	; (16a4 <system_clock_source_get_hz+0x80>)
    165c:	68db      	ldr	r3, [r3, #12]
    165e:	06db      	lsls	r3, r3, #27
    1660:	d5fb      	bpl.n	165a <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1662:	4b0f      	ldr	r3, [pc, #60]	; (16a0 <system_clock_source_get_hz+0x7c>)
    1664:	681b      	ldr	r3, [r3, #0]
    1666:	075b      	lsls	r3, r3, #29
    1668:	d401      	bmi.n	166e <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    166a:	4810      	ldr	r0, [pc, #64]	; (16ac <system_clock_source_get_hz+0x88>)
    166c:	e7e3      	b.n	1636 <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    166e:	2000      	movs	r0, #0
    1670:	4b0f      	ldr	r3, [pc, #60]	; (16b0 <system_clock_source_get_hz+0x8c>)
    1672:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1674:	4b0a      	ldr	r3, [pc, #40]	; (16a0 <system_clock_source_get_hz+0x7c>)
    1676:	689b      	ldr	r3, [r3, #8]
    1678:	041b      	lsls	r3, r3, #16
    167a:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    167c:	4358      	muls	r0, r3
    167e:	e7da      	b.n	1636 <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1680:	2350      	movs	r3, #80	; 0x50
    1682:	4a08      	ldr	r2, [pc, #32]	; (16a4 <system_clock_source_get_hz+0x80>)
    1684:	5cd3      	ldrb	r3, [r2, r3]
    1686:	075b      	lsls	r3, r3, #29
    1688:	d506      	bpl.n	1698 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    168a:	4b05      	ldr	r3, [pc, #20]	; (16a0 <system_clock_source_get_hz+0x7c>)
    168c:	68d8      	ldr	r0, [r3, #12]
    168e:	e7d2      	b.n	1636 <system_clock_source_get_hz+0x12>
		return 0;
    1690:	2000      	movs	r0, #0
    1692:	e7d0      	b.n	1636 <system_clock_source_get_hz+0x12>
			return 0;
    1694:	2000      	movs	r0, #0
    1696:	e7ce      	b.n	1636 <system_clock_source_get_hz+0x12>
			return 0;
    1698:	2000      	movs	r0, #0
    169a:	e7cc      	b.n	1636 <system_clock_source_get_hz+0x12>
    169c:	00002074 	.word	0x00002074
    16a0:	20000048 	.word	0x20000048
    16a4:	40000800 	.word	0x40000800
    16a8:	007a1200 	.word	0x007a1200
    16ac:	02dc6c00 	.word	0x02dc6c00
    16b0:	00001abd 	.word	0x00001abd

000016b4 <system_clock_source_osc8m_set_config>:
{
    16b4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    16b6:	4d0c      	ldr	r5, [pc, #48]	; (16e8 <system_clock_source_osc8m_set_config+0x34>)
    16b8:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    16ba:	7802      	ldrb	r2, [r0, #0]
    16bc:	2103      	movs	r1, #3
    16be:	400a      	ands	r2, r1
    16c0:	0212      	lsls	r2, r2, #8
    16c2:	490a      	ldr	r1, [pc, #40]	; (16ec <system_clock_source_osc8m_set_config+0x38>)
    16c4:	4031      	ands	r1, r6
    16c6:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    16c8:	7882      	ldrb	r2, [r0, #2]
    16ca:	2401      	movs	r4, #1
    16cc:	4022      	ands	r2, r4
    16ce:	01d2      	lsls	r2, r2, #7
    16d0:	2380      	movs	r3, #128	; 0x80
    16d2:	4399      	bics	r1, r3
    16d4:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    16d6:	7843      	ldrb	r3, [r0, #1]
    16d8:	4023      	ands	r3, r4
    16da:	019b      	lsls	r3, r3, #6
    16dc:	2140      	movs	r1, #64	; 0x40
    16de:	438a      	bics	r2, r1
    16e0:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    16e2:	622b      	str	r3, [r5, #32]
}
    16e4:	bd70      	pop	{r4, r5, r6, pc}
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	40000800 	.word	0x40000800
    16ec:	fffffcff 	.word	0xfffffcff

000016f0 <system_clock_source_enable>:
	switch (clock_source) {
    16f0:	2808      	cmp	r0, #8
    16f2:	d84a      	bhi.n	178a <system_clock_source_enable+0x9a>
    16f4:	0080      	lsls	r0, r0, #2
    16f6:	4b26      	ldr	r3, [pc, #152]	; (1790 <system_clock_source_enable+0xa0>)
    16f8:	581b      	ldr	r3, [r3, r0]
    16fa:	469f      	mov	pc, r3
		return STATUS_OK;
    16fc:	2000      	movs	r0, #0
}
    16fe:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1700:	4a24      	ldr	r2, [pc, #144]	; (1794 <system_clock_source_enable+0xa4>)
    1702:	6a13      	ldr	r3, [r2, #32]
    1704:	2102      	movs	r1, #2
    1706:	430b      	orrs	r3, r1
    1708:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    170a:	2000      	movs	r0, #0
    170c:	e7f7      	b.n	16fe <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    170e:	4a21      	ldr	r2, [pc, #132]	; (1794 <system_clock_source_enable+0xa4>)
    1710:	6993      	ldr	r3, [r2, #24]
    1712:	2102      	movs	r1, #2
    1714:	430b      	orrs	r3, r1
    1716:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1718:	2000      	movs	r0, #0
		break;
    171a:	e7f0      	b.n	16fe <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    171c:	4a1d      	ldr	r2, [pc, #116]	; (1794 <system_clock_source_enable+0xa4>)
    171e:	8a13      	ldrh	r3, [r2, #16]
    1720:	2102      	movs	r1, #2
    1722:	430b      	orrs	r3, r1
    1724:	b29b      	uxth	r3, r3
    1726:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1728:	2000      	movs	r0, #0
		break;
    172a:	e7e8      	b.n	16fe <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    172c:	4a19      	ldr	r2, [pc, #100]	; (1794 <system_clock_source_enable+0xa4>)
    172e:	8a93      	ldrh	r3, [r2, #20]
    1730:	2102      	movs	r1, #2
    1732:	430b      	orrs	r3, r1
    1734:	b29b      	uxth	r3, r3
    1736:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1738:	2000      	movs	r0, #0
		break;
    173a:	e7e0      	b.n	16fe <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    173c:	4916      	ldr	r1, [pc, #88]	; (1798 <system_clock_source_enable+0xa8>)
    173e:	680b      	ldr	r3, [r1, #0]
    1740:	2202      	movs	r2, #2
    1742:	4313      	orrs	r3, r2
    1744:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1746:	4b13      	ldr	r3, [pc, #76]	; (1794 <system_clock_source_enable+0xa4>)
    1748:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    174a:	4b12      	ldr	r3, [pc, #72]	; (1794 <system_clock_source_enable+0xa4>)
    174c:	68db      	ldr	r3, [r3, #12]
    174e:	06db      	lsls	r3, r3, #27
    1750:	d5fb      	bpl.n	174a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1752:	4a11      	ldr	r2, [pc, #68]	; (1798 <system_clock_source_enable+0xa8>)
    1754:	6891      	ldr	r1, [r2, #8]
    1756:	4b0f      	ldr	r3, [pc, #60]	; (1794 <system_clock_source_enable+0xa4>)
    1758:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    175a:	6852      	ldr	r2, [r2, #4]
    175c:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    175e:	2200      	movs	r2, #0
    1760:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1762:	4b0c      	ldr	r3, [pc, #48]	; (1794 <system_clock_source_enable+0xa4>)
    1764:	68db      	ldr	r3, [r3, #12]
    1766:	06db      	lsls	r3, r3, #27
    1768:	d5fb      	bpl.n	1762 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    176a:	4b0b      	ldr	r3, [pc, #44]	; (1798 <system_clock_source_enable+0xa8>)
    176c:	681b      	ldr	r3, [r3, #0]
    176e:	b29b      	uxth	r3, r3
    1770:	4a08      	ldr	r2, [pc, #32]	; (1794 <system_clock_source_enable+0xa4>)
    1772:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1774:	2000      	movs	r0, #0
    1776:	e7c2      	b.n	16fe <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1778:	4906      	ldr	r1, [pc, #24]	; (1794 <system_clock_source_enable+0xa4>)
    177a:	2244      	movs	r2, #68	; 0x44
    177c:	5c8b      	ldrb	r3, [r1, r2]
    177e:	2002      	movs	r0, #2
    1780:	4303      	orrs	r3, r0
    1782:	b2db      	uxtb	r3, r3
    1784:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1786:	2000      	movs	r0, #0
		break;
    1788:	e7b9      	b.n	16fe <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    178a:	2017      	movs	r0, #23
    178c:	e7b7      	b.n	16fe <system_clock_source_enable+0xe>
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	00002098 	.word	0x00002098
    1794:	40000800 	.word	0x40000800
    1798:	20000048 	.word	0x20000048

0000179c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    179c:	b530      	push	{r4, r5, lr}
    179e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    17a0:	22c2      	movs	r2, #194	; 0xc2
    17a2:	00d2      	lsls	r2, r2, #3
    17a4:	4b15      	ldr	r3, [pc, #84]	; (17fc <system_clock_init+0x60>)
    17a6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    17a8:	4b15      	ldr	r3, [pc, #84]	; (1800 <system_clock_init+0x64>)
    17aa:	6859      	ldr	r1, [r3, #4]
    17ac:	221e      	movs	r2, #30
    17ae:	4391      	bics	r1, r2
    17b0:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    17b2:	4b14      	ldr	r3, [pc, #80]	; (1804 <system_clock_init+0x68>)
    17b4:	4798      	blx	r3
	config->run_in_standby  = false;
    17b6:	a803      	add	r0, sp, #12
    17b8:	2400      	movs	r4, #0
    17ba:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    17bc:	2501      	movs	r5, #1
    17be:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    17c0:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    17c2:	4b11      	ldr	r3, [pc, #68]	; (1808 <system_clock_init+0x6c>)
    17c4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    17c6:	2006      	movs	r0, #6
    17c8:	4b10      	ldr	r3, [pc, #64]	; (180c <system_clock_init+0x70>)
    17ca:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    17cc:	4b10      	ldr	r3, [pc, #64]	; (1810 <system_clock_init+0x74>)
    17ce:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    17d0:	4b10      	ldr	r3, [pc, #64]	; (1814 <system_clock_init+0x78>)
    17d2:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    17d4:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    17d6:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    17d8:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    17da:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    17dc:	466b      	mov	r3, sp
    17de:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    17e0:	2306      	movs	r3, #6
    17e2:	466a      	mov	r2, sp
    17e4:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    17e6:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    17e8:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    17ea:	4669      	mov	r1, sp
    17ec:	2000      	movs	r0, #0
    17ee:	4b0a      	ldr	r3, [pc, #40]	; (1818 <system_clock_init+0x7c>)
    17f0:	4798      	blx	r3
    17f2:	2000      	movs	r0, #0
    17f4:	4b09      	ldr	r3, [pc, #36]	; (181c <system_clock_init+0x80>)
    17f6:	4798      	blx	r3
#endif
}
    17f8:	b005      	add	sp, #20
    17fa:	bd30      	pop	{r4, r5, pc}
    17fc:	40000800 	.word	0x40000800
    1800:	41004000 	.word	0x41004000
    1804:	00001601 	.word	0x00001601
    1808:	000016b5 	.word	0x000016b5
    180c:	000016f1 	.word	0x000016f1
    1810:	00001821 	.word	0x00001821
    1814:	40000400 	.word	0x40000400
    1818:	00001845 	.word	0x00001845
    181c:	00001915 	.word	0x00001915

00001820 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1820:	4a06      	ldr	r2, [pc, #24]	; (183c <system_gclk_init+0x1c>)
    1822:	6993      	ldr	r3, [r2, #24]
    1824:	2108      	movs	r1, #8
    1826:	430b      	orrs	r3, r1
    1828:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    182a:	2201      	movs	r2, #1
    182c:	4b04      	ldr	r3, [pc, #16]	; (1840 <system_gclk_init+0x20>)
    182e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1830:	4b03      	ldr	r3, [pc, #12]	; (1840 <system_gclk_init+0x20>)
    1832:	781b      	ldrb	r3, [r3, #0]
    1834:	07db      	lsls	r3, r3, #31
    1836:	d4fb      	bmi.n	1830 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1838:	4770      	bx	lr
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	40000400 	.word	0x40000400
    1840:	40000c00 	.word	0x40000c00

00001844 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1846:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1848:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    184a:	780c      	ldrb	r4, [r1, #0]
    184c:	0224      	lsls	r4, r4, #8
    184e:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1850:	784b      	ldrb	r3, [r1, #1]
    1852:	2b00      	cmp	r3, #0
    1854:	d002      	beq.n	185c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1856:	2380      	movs	r3, #128	; 0x80
    1858:	02db      	lsls	r3, r3, #11
    185a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    185c:	7a4b      	ldrb	r3, [r1, #9]
    185e:	2b00      	cmp	r3, #0
    1860:	d002      	beq.n	1868 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1862:	2380      	movs	r3, #128	; 0x80
    1864:	031b      	lsls	r3, r3, #12
    1866:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1868:	6848      	ldr	r0, [r1, #4]
    186a:	2801      	cmp	r0, #1
    186c:	d912      	bls.n	1894 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    186e:	1e43      	subs	r3, r0, #1
    1870:	4203      	tst	r3, r0
    1872:	d03d      	beq.n	18f0 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1874:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    1876:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1878:	2380      	movs	r3, #128	; 0x80
    187a:	029b      	lsls	r3, r3, #10
    187c:	431c      	orrs	r4, r3
    187e:	e009      	b.n	1894 <system_gclk_gen_set_config+0x50>
				div2_count++;
    1880:	3201      	adds	r2, #1
						mask <<= 1) {
    1882:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1884:	4283      	cmp	r3, r0
    1886:	d3fb      	bcc.n	1880 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1888:	0212      	lsls	r2, r2, #8
    188a:	4332      	orrs	r2, r6
    188c:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    188e:	2380      	movs	r3, #128	; 0x80
    1890:	035b      	lsls	r3, r3, #13
    1892:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1894:	7a0b      	ldrb	r3, [r1, #8]
    1896:	2b00      	cmp	r3, #0
    1898:	d002      	beq.n	18a0 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    189a:	2380      	movs	r3, #128	; 0x80
    189c:	039b      	lsls	r3, r3, #14
    189e:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18a0:	4b18      	ldr	r3, [pc, #96]	; (1904 <system_gclk_gen_set_config+0xc0>)
    18a2:	785b      	ldrb	r3, [r3, #1]
    18a4:	b25b      	sxtb	r3, r3
    18a6:	2b00      	cmp	r3, #0
    18a8:	db25      	blt.n	18f6 <system_gclk_gen_set_config+0xb2>
	return false;
    18aa:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    18ac:	2f00      	cmp	r7, #0
    18ae:	d1f7      	bne.n	18a0 <system_gclk_gen_set_config+0x5c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    18b0:	4b15      	ldr	r3, [pc, #84]	; (1908 <system_gclk_gen_set_config+0xc4>)
    18b2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18b4:	4b15      	ldr	r3, [pc, #84]	; (190c <system_gclk_gen_set_config+0xc8>)
    18b6:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18b8:	4b12      	ldr	r3, [pc, #72]	; (1904 <system_gclk_gen_set_config+0xc0>)
    18ba:	785b      	ldrb	r3, [r3, #1]
    18bc:	b25b      	sxtb	r3, r3
    18be:	2b00      	cmp	r3, #0
    18c0:	db1b      	blt.n	18fa <system_gclk_gen_set_config+0xb6>
	return false;
    18c2:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    18c4:	2a00      	cmp	r2, #0
    18c6:	d1f7      	bne.n	18b8 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    18c8:	4b0e      	ldr	r3, [pc, #56]	; (1904 <system_gclk_gen_set_config+0xc0>)
    18ca:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18cc:	4b0d      	ldr	r3, [pc, #52]	; (1904 <system_gclk_gen_set_config+0xc0>)
    18ce:	785b      	ldrb	r3, [r3, #1]
    18d0:	b25b      	sxtb	r3, r3
    18d2:	2b00      	cmp	r3, #0
    18d4:	db13      	blt.n	18fe <system_gclk_gen_set_config+0xba>
	return false;
    18d6:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    18d8:	2b00      	cmp	r3, #0
    18da:	d1f7      	bne.n	18cc <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    18dc:	4a09      	ldr	r2, [pc, #36]	; (1904 <system_gclk_gen_set_config+0xc0>)
    18de:	6853      	ldr	r3, [r2, #4]
    18e0:	2180      	movs	r1, #128	; 0x80
    18e2:	0249      	lsls	r1, r1, #9
    18e4:	400b      	ands	r3, r1
    18e6:	431c      	orrs	r4, r3
    18e8:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    18ea:	4b09      	ldr	r3, [pc, #36]	; (1910 <system_gclk_gen_set_config+0xcc>)
    18ec:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18f0:	2302      	movs	r3, #2
    18f2:	2200      	movs	r2, #0
    18f4:	e7c6      	b.n	1884 <system_gclk_gen_set_config+0x40>
		return true;
    18f6:	2701      	movs	r7, #1
    18f8:	e7d8      	b.n	18ac <system_gclk_gen_set_config+0x68>
    18fa:	2201      	movs	r2, #1
    18fc:	e7e2      	b.n	18c4 <system_gclk_gen_set_config+0x80>
    18fe:	2301      	movs	r3, #1
    1900:	e7ea      	b.n	18d8 <system_gclk_gen_set_config+0x94>
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	40000c00 	.word	0x40000c00
    1908:	00001591 	.word	0x00001591
    190c:	40000c08 	.word	0x40000c08
    1910:	000015d1 	.word	0x000015d1

00001914 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1914:	b570      	push	{r4, r5, r6, lr}
    1916:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1918:	4b10      	ldr	r3, [pc, #64]	; (195c <system_gclk_gen_enable+0x48>)
    191a:	785b      	ldrb	r3, [r3, #1]
    191c:	b25b      	sxtb	r3, r3
    191e:	2b00      	cmp	r3, #0
    1920:	db17      	blt.n	1952 <system_gclk_gen_enable+0x3e>
	return false;
    1922:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    1924:	2c00      	cmp	r4, #0
    1926:	d1f7      	bne.n	1918 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1928:	4b0d      	ldr	r3, [pc, #52]	; (1960 <system_gclk_gen_enable+0x4c>)
    192a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    192c:	4b0d      	ldr	r3, [pc, #52]	; (1964 <system_gclk_gen_enable+0x50>)
    192e:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1930:	4b0a      	ldr	r3, [pc, #40]	; (195c <system_gclk_gen_enable+0x48>)
    1932:	785b      	ldrb	r3, [r3, #1]
    1934:	b25b      	sxtb	r3, r3
    1936:	2b00      	cmp	r3, #0
    1938:	db0d      	blt.n	1956 <system_gclk_gen_enable+0x42>
	return false;
    193a:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    193c:	2b00      	cmp	r3, #0
    193e:	d1f7      	bne.n	1930 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1940:	4a06      	ldr	r2, [pc, #24]	; (195c <system_gclk_gen_enable+0x48>)
    1942:	6851      	ldr	r1, [r2, #4]
    1944:	2380      	movs	r3, #128	; 0x80
    1946:	025b      	lsls	r3, r3, #9
    1948:	430b      	orrs	r3, r1
    194a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    194c:	4b06      	ldr	r3, [pc, #24]	; (1968 <system_gclk_gen_enable+0x54>)
    194e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1950:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    1952:	2401      	movs	r4, #1
    1954:	e7e6      	b.n	1924 <system_gclk_gen_enable+0x10>
    1956:	2301      	movs	r3, #1
    1958:	e7f0      	b.n	193c <system_gclk_gen_enable+0x28>
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	40000c00 	.word	0x40000c00
    1960:	00001591 	.word	0x00001591
    1964:	40000c04 	.word	0x40000c04
    1968:	000015d1 	.word	0x000015d1

0000196c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    196e:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1970:	4b22      	ldr	r3, [pc, #136]	; (19fc <system_gclk_gen_get_hz+0x90>)
    1972:	785b      	ldrb	r3, [r3, #1]
    1974:	b25b      	sxtb	r3, r3
    1976:	2b00      	cmp	r3, #0
    1978:	db34      	blt.n	19e4 <system_gclk_gen_get_hz+0x78>
	return false;
    197a:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    197c:	2d00      	cmp	r5, #0
    197e:	d1f7      	bne.n	1970 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1980:	4b1f      	ldr	r3, [pc, #124]	; (1a00 <system_gclk_gen_get_hz+0x94>)
    1982:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1984:	4b1f      	ldr	r3, [pc, #124]	; (1a04 <system_gclk_gen_get_hz+0x98>)
    1986:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1988:	4b1c      	ldr	r3, [pc, #112]	; (19fc <system_gclk_gen_get_hz+0x90>)
    198a:	785b      	ldrb	r3, [r3, #1]
    198c:	b25b      	sxtb	r3, r3
    198e:	2b00      	cmp	r3, #0
    1990:	db2a      	blt.n	19e8 <system_gclk_gen_get_hz+0x7c>
	return false;
    1992:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1994:	2c00      	cmp	r4, #0
    1996:	d1f7      	bne.n	1988 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1998:	4e18      	ldr	r6, [pc, #96]	; (19fc <system_gclk_gen_get_hz+0x90>)
    199a:	6870      	ldr	r0, [r6, #4]
    199c:	04c0      	lsls	r0, r0, #19
    199e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    19a0:	4b19      	ldr	r3, [pc, #100]	; (1a08 <system_gclk_gen_get_hz+0x9c>)
    19a2:	4798      	blx	r3
    19a4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19a6:	4b17      	ldr	r3, [pc, #92]	; (1a04 <system_gclk_gen_get_hz+0x98>)
    19a8:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    19aa:	6876      	ldr	r6, [r6, #4]
    19ac:	02f6      	lsls	r6, r6, #11
    19ae:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19b0:	4b16      	ldr	r3, [pc, #88]	; (1a0c <system_gclk_gen_get_hz+0xa0>)
    19b2:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19b4:	4b11      	ldr	r3, [pc, #68]	; (19fc <system_gclk_gen_get_hz+0x90>)
    19b6:	785b      	ldrb	r3, [r3, #1]
    19b8:	b25b      	sxtb	r3, r3
    19ba:	2b00      	cmp	r3, #0
    19bc:	db16      	blt.n	19ec <system_gclk_gen_get_hz+0x80>
	return false;
    19be:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    19c0:	2b00      	cmp	r3, #0
    19c2:	d1f7      	bne.n	19b4 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    19c4:	4b0d      	ldr	r3, [pc, #52]	; (19fc <system_gclk_gen_get_hz+0x90>)
    19c6:	689c      	ldr	r4, [r3, #8]
    19c8:	0224      	lsls	r4, r4, #8
    19ca:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    19cc:	4b10      	ldr	r3, [pc, #64]	; (1a10 <system_gclk_gen_get_hz+0xa4>)
    19ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    19d0:	2e00      	cmp	r6, #0
    19d2:	d10d      	bne.n	19f0 <system_gclk_gen_get_hz+0x84>
    19d4:	2c01      	cmp	r4, #1
    19d6:	d90b      	bls.n	19f0 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    19d8:	0021      	movs	r1, r4
    19da:	0028      	movs	r0, r5
    19dc:	4b0d      	ldr	r3, [pc, #52]	; (1a14 <system_gclk_gen_get_hz+0xa8>)
    19de:	4798      	blx	r3
    19e0:	0005      	movs	r5, r0
    19e2:	e009      	b.n	19f8 <system_gclk_gen_get_hz+0x8c>
		return true;
    19e4:	2501      	movs	r5, #1
    19e6:	e7c9      	b.n	197c <system_gclk_gen_get_hz+0x10>
    19e8:	2401      	movs	r4, #1
    19ea:	e7d3      	b.n	1994 <system_gclk_gen_get_hz+0x28>
    19ec:	2301      	movs	r3, #1
    19ee:	e7e7      	b.n	19c0 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    19f0:	2e00      	cmp	r6, #0
    19f2:	d001      	beq.n	19f8 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    19f4:	3401      	adds	r4, #1
    19f6:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    19f8:	0028      	movs	r0, r5
    19fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19fc:	40000c00 	.word	0x40000c00
    1a00:	00001591 	.word	0x00001591
    1a04:	40000c04 	.word	0x40000c04
    1a08:	00001625 	.word	0x00001625
    1a0c:	40000c08 	.word	0x40000c08
    1a10:	000015d1 	.word	0x000015d1
    1a14:	00001ef1 	.word	0x00001ef1

00001a18 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a18:	b510      	push	{r4, lr}
    1a1a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a1c:	4b06      	ldr	r3, [pc, #24]	; (1a38 <system_gclk_chan_enable+0x20>)
    1a1e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a20:	4b06      	ldr	r3, [pc, #24]	; (1a3c <system_gclk_chan_enable+0x24>)
    1a22:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a24:	4a06      	ldr	r2, [pc, #24]	; (1a40 <system_gclk_chan_enable+0x28>)
    1a26:	8853      	ldrh	r3, [r2, #2]
    1a28:	2180      	movs	r1, #128	; 0x80
    1a2a:	01c9      	lsls	r1, r1, #7
    1a2c:	430b      	orrs	r3, r1
    1a2e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a30:	4b04      	ldr	r3, [pc, #16]	; (1a44 <system_gclk_chan_enable+0x2c>)
    1a32:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a34:	bd10      	pop	{r4, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	00001591 	.word	0x00001591
    1a3c:	40000c02 	.word	0x40000c02
    1a40:	40000c00 	.word	0x40000c00
    1a44:	000015d1 	.word	0x000015d1

00001a48 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a48:	b510      	push	{r4, lr}
    1a4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a4c:	4b0e      	ldr	r3, [pc, #56]	; (1a88 <system_gclk_chan_disable+0x40>)
    1a4e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a50:	4b0e      	ldr	r3, [pc, #56]	; (1a8c <system_gclk_chan_disable+0x44>)
    1a52:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a54:	490e      	ldr	r1, [pc, #56]	; (1a90 <system_gclk_chan_disable+0x48>)
    1a56:	884b      	ldrh	r3, [r1, #2]
    1a58:	051b      	lsls	r3, r3, #20
    1a5a:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1a5c:	884b      	ldrh	r3, [r1, #2]
    1a5e:	480d      	ldr	r0, [pc, #52]	; (1a94 <system_gclk_chan_disable+0x4c>)
    1a60:	4003      	ands	r3, r0
    1a62:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a64:	884b      	ldrh	r3, [r1, #2]
    1a66:	480c      	ldr	r0, [pc, #48]	; (1a98 <system_gclk_chan_disable+0x50>)
    1a68:	4003      	ands	r3, r0
    1a6a:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1a6c:	4b08      	ldr	r3, [pc, #32]	; (1a90 <system_gclk_chan_disable+0x48>)
    1a6e:	885b      	ldrh	r3, [r3, #2]
    1a70:	045b      	lsls	r3, r3, #17
    1a72:	d4fb      	bmi.n	1a6c <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1a74:	4806      	ldr	r0, [pc, #24]	; (1a90 <system_gclk_chan_disable+0x48>)
    1a76:	8841      	ldrh	r1, [r0, #2]
    1a78:	0213      	lsls	r3, r2, #8
    1a7a:	4a06      	ldr	r2, [pc, #24]	; (1a94 <system_gclk_chan_disable+0x4c>)
    1a7c:	400a      	ands	r2, r1
    1a7e:	4313      	orrs	r3, r2
    1a80:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    1a82:	4b06      	ldr	r3, [pc, #24]	; (1a9c <system_gclk_chan_disable+0x54>)
    1a84:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a86:	bd10      	pop	{r4, pc}
    1a88:	00001591 	.word	0x00001591
    1a8c:	40000c02 	.word	0x40000c02
    1a90:	40000c00 	.word	0x40000c00
    1a94:	fffff0ff 	.word	0xfffff0ff
    1a98:	ffffbfff 	.word	0xffffbfff
    1a9c:	000015d1 	.word	0x000015d1

00001aa0 <system_gclk_chan_set_config>:
{
    1aa0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1aa2:	780c      	ldrb	r4, [r1, #0]
    1aa4:	0224      	lsls	r4, r4, #8
    1aa6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1aa8:	4b02      	ldr	r3, [pc, #8]	; (1ab4 <system_gclk_chan_set_config+0x14>)
    1aaa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1aac:	b2a4      	uxth	r4, r4
    1aae:	4b02      	ldr	r3, [pc, #8]	; (1ab8 <system_gclk_chan_set_config+0x18>)
    1ab0:	805c      	strh	r4, [r3, #2]
}
    1ab2:	bd10      	pop	{r4, pc}
    1ab4:	00001a49 	.word	0x00001a49
    1ab8:	40000c00 	.word	0x40000c00

00001abc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1abc:	b510      	push	{r4, lr}
    1abe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ac0:	4b06      	ldr	r3, [pc, #24]	; (1adc <system_gclk_chan_get_hz+0x20>)
    1ac2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ac4:	4b06      	ldr	r3, [pc, #24]	; (1ae0 <system_gclk_chan_get_hz+0x24>)
    1ac6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1ac8:	4b06      	ldr	r3, [pc, #24]	; (1ae4 <system_gclk_chan_get_hz+0x28>)
    1aca:	885c      	ldrh	r4, [r3, #2]
    1acc:	0524      	lsls	r4, r4, #20
    1ace:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1ad0:	4b05      	ldr	r3, [pc, #20]	; (1ae8 <system_gclk_chan_get_hz+0x2c>)
    1ad2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1ad4:	0020      	movs	r0, r4
    1ad6:	4b05      	ldr	r3, [pc, #20]	; (1aec <system_gclk_chan_get_hz+0x30>)
    1ad8:	4798      	blx	r3
}
    1ada:	bd10      	pop	{r4, pc}
    1adc:	00001591 	.word	0x00001591
    1ae0:	40000c02 	.word	0x40000c02
    1ae4:	40000c00 	.word	0x40000c00
    1ae8:	000015d1 	.word	0x000015d1
    1aec:	0000196d 	.word	0x0000196d

00001af0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1af0:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1af2:	78d3      	ldrb	r3, [r2, #3]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d120      	bne.n	1b3a <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1af8:	7815      	ldrb	r5, [r2, #0]
    1afa:	2d80      	cmp	r5, #128	; 0x80
    1afc:	d01b      	beq.n	1b36 <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1afe:	062d      	lsls	r5, r5, #24
    1b00:	2380      	movs	r3, #128	; 0x80
    1b02:	025b      	lsls	r3, r3, #9
    1b04:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b06:	7853      	ldrb	r3, [r2, #1]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d001      	beq.n	1b10 <_system_pinmux_config+0x20>
    1b0c:	2b02      	cmp	r3, #2
    1b0e:	d10a      	bne.n	1b26 <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b10:	2380      	movs	r3, #128	; 0x80
    1b12:	029b      	lsls	r3, r3, #10
    1b14:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b16:	7894      	ldrb	r4, [r2, #2]
    1b18:	2c00      	cmp	r4, #0
    1b1a:	d002      	beq.n	1b22 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b1c:	23c0      	movs	r3, #192	; 0xc0
    1b1e:	02db      	lsls	r3, r3, #11
    1b20:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b22:	6041      	str	r1, [r0, #4]
    1b24:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b26:	7853      	ldrb	r3, [r2, #1]
    1b28:	3b01      	subs	r3, #1
    1b2a:	b2db      	uxtb	r3, r3
    1b2c:	2b01      	cmp	r3, #1
    1b2e:	d806      	bhi.n	1b3e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b30:	4b13      	ldr	r3, [pc, #76]	; (1b80 <_system_pinmux_config+0x90>)
    1b32:	401d      	ands	r5, r3
    1b34:	e003      	b.n	1b3e <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    1b36:	2500      	movs	r5, #0
    1b38:	e7e5      	b.n	1b06 <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1b3a:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1b3c:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b3e:	040c      	lsls	r4, r1, #16
    1b40:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b42:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b44:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b46:	26a0      	movs	r6, #160	; 0xa0
    1b48:	05f6      	lsls	r6, r6, #23
    1b4a:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b4c:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b4e:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b50:	24d0      	movs	r4, #208	; 0xd0
    1b52:	0624      	lsls	r4, r4, #24
    1b54:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b56:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b58:	78d3      	ldrb	r3, [r2, #3]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d10a      	bne.n	1b74 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b5e:	036b      	lsls	r3, r5, #13
    1b60:	d503      	bpl.n	1b6a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b62:	7893      	ldrb	r3, [r2, #2]
    1b64:	2b01      	cmp	r3, #1
    1b66:	d006      	beq.n	1b76 <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1b68:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b6a:	7853      	ldrb	r3, [r2, #1]
    1b6c:	3b01      	subs	r3, #1
    1b6e:	b2db      	uxtb	r3, r3
    1b70:	2b01      	cmp	r3, #1
    1b72:	d902      	bls.n	1b7a <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1b74:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    1b76:	6181      	str	r1, [r0, #24]
    1b78:	e7f7      	b.n	1b6a <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    1b7a:	6081      	str	r1, [r0, #8]
}
    1b7c:	e7fa      	b.n	1b74 <_system_pinmux_config+0x84>
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	fffbffff 	.word	0xfffbffff

00001b84 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b84:	b510      	push	{r4, lr}
    1b86:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    1b88:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    1b8a:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    1b8c:	2900      	cmp	r1, #0
    1b8e:	d10b      	bne.n	1ba8 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    1b90:	01db      	lsls	r3, r3, #7
    1b92:	4906      	ldr	r1, [pc, #24]	; (1bac <system_pinmux_pin_set_config+0x28>)
    1b94:	468c      	mov	ip, r1
    1b96:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b98:	241f      	movs	r4, #31
    1b9a:	4020      	ands	r0, r4
    1b9c:	2101      	movs	r1, #1
    1b9e:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1ba0:	0018      	movs	r0, r3
    1ba2:	4b03      	ldr	r3, [pc, #12]	; (1bb0 <system_pinmux_pin_set_config+0x2c>)
    1ba4:	4798      	blx	r3
}
    1ba6:	bd10      	pop	{r4, pc}
		return NULL;
    1ba8:	2300      	movs	r3, #0
    1baa:	e7f5      	b.n	1b98 <system_pinmux_pin_set_config+0x14>
    1bac:	41004400 	.word	0x41004400
    1bb0:	00001af1 	.word	0x00001af1

00001bb4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1bb4:	4770      	bx	lr
	...

00001bb8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1bb8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1bba:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <system_init+0x18>)
    1bbc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1bbe:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <system_init+0x1c>)
    1bc0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1bc2:	4b05      	ldr	r3, [pc, #20]	; (1bd8 <system_init+0x20>)
    1bc4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1bc6:	4b05      	ldr	r3, [pc, #20]	; (1bdc <system_init+0x24>)
    1bc8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1bca:	4b05      	ldr	r3, [pc, #20]	; (1be0 <system_init+0x28>)
    1bcc:	4798      	blx	r3
}
    1bce:	bd10      	pop	{r4, pc}
    1bd0:	0000179d 	.word	0x0000179d
    1bd4:	0000158d 	.word	0x0000158d
    1bd8:	00001bb5 	.word	0x00001bb5
    1bdc:	00001bb5 	.word	0x00001bb5
    1be0:	00001bb5 	.word	0x00001bb5

00001be4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1be4:	e7fe      	b.n	1be4 <Dummy_Handler>
	...

00001be8 <Reset_Handler>:
{
    1be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1bea:	4a23      	ldr	r2, [pc, #140]	; (1c78 <Reset_Handler+0x90>)
    1bec:	4b23      	ldr	r3, [pc, #140]	; (1c7c <Reset_Handler+0x94>)
    1bee:	429a      	cmp	r2, r3
    1bf0:	d009      	beq.n	1c06 <Reset_Handler+0x1e>
    1bf2:	4b22      	ldr	r3, [pc, #136]	; (1c7c <Reset_Handler+0x94>)
    1bf4:	4a20      	ldr	r2, [pc, #128]	; (1c78 <Reset_Handler+0x90>)
    1bf6:	e003      	b.n	1c00 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    1bf8:	6811      	ldr	r1, [r2, #0]
    1bfa:	6019      	str	r1, [r3, #0]
    1bfc:	3304      	adds	r3, #4
    1bfe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1c00:	491f      	ldr	r1, [pc, #124]	; (1c80 <Reset_Handler+0x98>)
    1c02:	428b      	cmp	r3, r1
    1c04:	d3f8      	bcc.n	1bf8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    1c06:	4b1f      	ldr	r3, [pc, #124]	; (1c84 <Reset_Handler+0x9c>)
    1c08:	e002      	b.n	1c10 <Reset_Handler+0x28>
                *pDest++ = 0;
    1c0a:	2200      	movs	r2, #0
    1c0c:	601a      	str	r2, [r3, #0]
    1c0e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1c10:	4a1d      	ldr	r2, [pc, #116]	; (1c88 <Reset_Handler+0xa0>)
    1c12:	4293      	cmp	r3, r2
    1c14:	d3f9      	bcc.n	1c0a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c16:	4a1d      	ldr	r2, [pc, #116]	; (1c8c <Reset_Handler+0xa4>)
    1c18:	21ff      	movs	r1, #255	; 0xff
    1c1a:	4b1d      	ldr	r3, [pc, #116]	; (1c90 <Reset_Handler+0xa8>)
    1c1c:	438b      	bics	r3, r1
    1c1e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c20:	39fd      	subs	r1, #253	; 0xfd
    1c22:	2390      	movs	r3, #144	; 0x90
    1c24:	005b      	lsls	r3, r3, #1
    1c26:	4a1b      	ldr	r2, [pc, #108]	; (1c94 <Reset_Handler+0xac>)
    1c28:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c2a:	4a1b      	ldr	r2, [pc, #108]	; (1c98 <Reset_Handler+0xb0>)
    1c2c:	78d3      	ldrb	r3, [r2, #3]
    1c2e:	2503      	movs	r5, #3
    1c30:	43ab      	bics	r3, r5
    1c32:	2402      	movs	r4, #2
    1c34:	4323      	orrs	r3, r4
    1c36:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c38:	78d3      	ldrb	r3, [r2, #3]
    1c3a:	270c      	movs	r7, #12
    1c3c:	43bb      	bics	r3, r7
    1c3e:	2608      	movs	r6, #8
    1c40:	4333      	orrs	r3, r6
    1c42:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1c44:	4b15      	ldr	r3, [pc, #84]	; (1c9c <Reset_Handler+0xb4>)
    1c46:	7b98      	ldrb	r0, [r3, #14]
    1c48:	2230      	movs	r2, #48	; 0x30
    1c4a:	4390      	bics	r0, r2
    1c4c:	2220      	movs	r2, #32
    1c4e:	4310      	orrs	r0, r2
    1c50:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1c52:	7b99      	ldrb	r1, [r3, #14]
    1c54:	43b9      	bics	r1, r7
    1c56:	4331      	orrs	r1, r6
    1c58:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1c5a:	7b9a      	ldrb	r2, [r3, #14]
    1c5c:	43aa      	bics	r2, r5
    1c5e:	4322      	orrs	r2, r4
    1c60:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c62:	4a0f      	ldr	r2, [pc, #60]	; (1ca0 <Reset_Handler+0xb8>)
    1c64:	6851      	ldr	r1, [r2, #4]
    1c66:	2380      	movs	r3, #128	; 0x80
    1c68:	430b      	orrs	r3, r1
    1c6a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c6c:	4b0d      	ldr	r3, [pc, #52]	; (1ca4 <Reset_Handler+0xbc>)
    1c6e:	4798      	blx	r3
        main();
    1c70:	4b0d      	ldr	r3, [pc, #52]	; (1ca8 <Reset_Handler+0xc0>)
    1c72:	4798      	blx	r3
    1c74:	e7fe      	b.n	1c74 <Reset_Handler+0x8c>
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	000020f0 	.word	0x000020f0
    1c7c:	20000000 	.word	0x20000000
    1c80:	2000000c 	.word	0x2000000c
    1c84:	2000000c 	.word	0x2000000c
    1c88:	200000b4 	.word	0x200000b4
    1c8c:	e000ed00 	.word	0xe000ed00
    1c90:	00000000 	.word	0x00000000
    1c94:	41007000 	.word	0x41007000
    1c98:	41005000 	.word	0x41005000
    1c9c:	41004800 	.word	0x41004800
    1ca0:	41004000 	.word	0x41004000
    1ca4:	00002009 	.word	0x00002009
    1ca8:	00001e01 	.word	0x00001e01

00001cac <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cae:	46ce      	mov	lr, r9
    1cb0:	4647      	mov	r7, r8
    1cb2:	b580      	push	{r7, lr}
    1cb4:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1cb6:	ac01      	add	r4, sp, #4
    1cb8:	2300      	movs	r3, #0
    1cba:	4698      	mov	r8, r3
    1cbc:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1cbe:	2601      	movs	r6, #1
    1cc0:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1cc2:	70a3      	strb	r3, [r4, #2]
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1cc4:	0021      	movs	r1, r4
    1cc6:	2007      	movs	r0, #7
    1cc8:	4d24      	ldr	r5, [pc, #144]	; (1d5c <conf_port_pin+0xb0>)
    1cca:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1ccc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    1cce:	0021      	movs	r1, r4
    1cd0:	2006      	movs	r0, #6
    1cd2:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1cd4:	4f22      	ldr	r7, [pc, #136]	; (1d60 <conf_port_pin+0xb4>)
    1cd6:	2340      	movs	r3, #64	; 0x40
    1cd8:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    1cda:	0021      	movs	r1, r4
    1cdc:	2001      	movs	r0, #1
    1cde:	47a8      	blx	r5
    1ce0:	2302      	movs	r3, #2
    1ce2:	4699      	mov	r9, r3
    1ce4:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    1ce6:	0021      	movs	r1, r4
    1ce8:	2002      	movs	r0, #2
    1cea:	47a8      	blx	r5
    1cec:	2304      	movs	r3, #4
    1cee:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    1cf0:	0021      	movs	r1, r4
    1cf2:	2003      	movs	r0, #3
    1cf4:	47a8      	blx	r5
    1cf6:	2308      	movs	r3, #8
    1cf8:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1cfa:	4643      	mov	r3, r8
    1cfc:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1cfe:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    1d00:	0021      	movs	r1, r4
    1d02:	200b      	movs	r0, #11
    1d04:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1d06:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    1d08:	0021      	movs	r1, r4
    1d0a:	200a      	movs	r0, #10
    1d0c:	47a8      	blx	r5
    1d0e:	2380      	movs	r3, #128	; 0x80
    1d10:	00db      	lsls	r3, r3, #3
    1d12:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1d14:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1d16:	464b      	mov	r3, r9
    1d18:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1d1a:	0021      	movs	r1, r4
    1d1c:	200e      	movs	r0, #14
    1d1e:	47a8      	blx	r5
    1d20:	2380      	movs	r3, #128	; 0x80
    1d22:	01db      	lsls	r3, r3, #7
    1d24:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(WAKE915, true);

    // REMOVE THIS AFTER TESTing
    config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1d26:	4643      	mov	r3, r8
    1d28:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1d2a:	7066      	strb	r6, [r4, #1]
    port_pin_set_config(PIN_PA08, &config_port_pin);
    1d2c:	0021      	movs	r1, r4
    1d2e:	2008      	movs	r0, #8
    1d30:	47a8      	blx	r5
    port_pin_set_config(PIN_PA09, &config_port_pin);
    1d32:	0021      	movs	r1, r4
    1d34:	2009      	movs	r0, #9
    1d36:	47a8      	blx	r5
    //port_pin_set_output_level(PIN_PA08, true);
	
    
	/**************config pin for 40*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1d38:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1d3a:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS40, &config_port_pin);
    1d3c:	0021      	movs	r1, r4
    1d3e:	2018      	movs	r0, #24
    1d40:	47a8      	blx	r5
    1d42:	2380      	movs	r3, #128	; 0x80
    1d44:	045b      	lsls	r3, r3, #17
    1d46:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS40, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1d48:	4643      	mov	r3, r8
    1d4a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ40, &config_port_pin);
    1d4c:	0021      	movs	r1, r4
    1d4e:	201b      	movs	r0, #27
    1d50:	47a8      	blx	r5
} // end conf_port_pin(void)
    1d52:	b003      	add	sp, #12
    1d54:	bc0c      	pop	{r2, r3}
    1d56:	4690      	mov	r8, r2
    1d58:	4699      	mov	r9, r3
    1d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d5c:	00000841 	.word	0x00000841
    1d60:	41004400 	.word	0x41004400

00001d64 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    1d64:	b500      	push	{lr}
    1d66:	b083      	sub	sp, #12

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1d68:	a801      	add	r0, sp, #4
    1d6a:	2300      	movs	r3, #0
    1d6c:	7003      	strb	r3, [r0, #0]
	osc8_config.on_demand = true;
    1d6e:	2201      	movs	r2, #1
    1d70:	7082      	strb	r2, [r0, #2]
	osc8_config.run_in_standby = false;
    1d72:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1d74:	4b01      	ldr	r3, [pc, #4]	; (1d7c <clk_osc8m_init+0x18>)
    1d76:	4798      	blx	r3
}
    1d78:	b003      	add	sp, #12
    1d7a:	bd00      	pop	{pc}
    1d7c:	000016b5 	.word	0x000016b5

00001d80 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1d80:	b500      	push	{lr}
    1d82:	b085      	sub	sp, #20
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1d84:	4b0a      	ldr	r3, [pc, #40]	; (1db0 <clk_gclk0_init+0x30>)
    1d86:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1d88:	2300      	movs	r3, #0
    1d8a:	4a0a      	ldr	r2, [pc, #40]	; (1db4 <clk_gclk0_init+0x34>)
    1d8c:	7213      	strb	r3, [r2, #8]
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    1d8e:	a901      	add	r1, sp, #4
    1d90:	2206      	movs	r2, #6
    1d92:	700a      	strb	r2, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    1d94:	724b      	strb	r3, [r1, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    1d96:	704b      	strb	r3, [r1, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1d98:	3a05      	subs	r2, #5
    1d9a:	604a      	str	r2, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    1d9c:	720b      	strb	r3, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1d9e:	2000      	movs	r0, #0
    1da0:	4b05      	ldr	r3, [pc, #20]	; (1db8 <clk_gclk0_init+0x38>)
    1da2:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1da4:	2000      	movs	r0, #0
    1da6:	4b05      	ldr	r3, [pc, #20]	; (1dbc <clk_gclk0_init+0x3c>)
    1da8:	4798      	blx	r3
}
    1daa:	b005      	add	sp, #20
    1dac:	bd00      	pop	{pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	00001821 	.word	0x00001821
    1db4:	40000400 	.word	0x40000400
    1db8:	00001845 	.word	0x00001845
    1dbc:	00001915 	.word	0x00001915

00001dc0 <sys_clk_init>:
{
    1dc0:	b510      	push	{r4, lr}
	clk_osc8m_init();
    1dc2:	4b03      	ldr	r3, [pc, #12]	; (1dd0 <sys_clk_init+0x10>)
    1dc4:	4798      	blx	r3
	clk_gclk0_init();
    1dc6:	4b03      	ldr	r3, [pc, #12]	; (1dd4 <sys_clk_init+0x14>)
    1dc8:	4798      	blx	r3
    delay_init();
    1dca:	4b03      	ldr	r3, [pc, #12]	; (1dd8 <sys_clk_init+0x18>)
    1dcc:	4798      	blx	r3
}
    1dce:	bd10      	pop	{r4, pc}
    1dd0:	00001d65 	.word	0x00001d65
    1dd4:	00001d81 	.word	0x00001d81
    1dd8:	000007d5 	.word	0x000007d5

00001ddc <simSysInit>:
{
    1ddc:	b510      	push	{r4, lr}
	system_init();
    1dde:	4b04      	ldr	r3, [pc, #16]	; (1df0 <simSysInit+0x14>)
    1de0:	4798      	blx	r3
	sys_clk_init();
    1de2:	4b04      	ldr	r3, [pc, #16]	; (1df4 <simSysInit+0x18>)
    1de4:	4798      	blx	r3
	conf_port_pin();
    1de6:	4b04      	ldr	r3, [pc, #16]	; (1df8 <simSysInit+0x1c>)
    1de8:	4798      	blx	r3
    spi40_init();
    1dea:	4b04      	ldr	r3, [pc, #16]	; (1dfc <simSysInit+0x20>)
    1dec:	4798      	blx	r3
}
    1dee:	bd10      	pop	{r4, pc}
    1df0:	00001bb9 	.word	0x00001bb9
    1df4:	00001dc1 	.word	0x00001dc1
    1df8:	00001cad 	.word	0x00001cad
    1dfc:	00000115 	.word	0x00000115

00001e00 <main>:
{
    1e00:	b530      	push	{r4, r5, lr}
    1e02:	b087      	sub	sp, #28
    uint8_t tx_preamble[4] = {FIFO_REPEATDATA, 0x18, 16, 0x55};
    1e04:	4b30      	ldr	r3, [pc, #192]	; (1ec8 <main+0xc8>)
    1e06:	001a      	movs	r2, r3
    1e08:	ca02      	ldmia	r2!, {r1}
    1e0a:	9105      	str	r1, [sp, #20]
    uint8_t tx_sync[7] = {FIFO_DATA, 5, 0x18, 0xCC, 0xAA, 0xCC, 0xAA};
    1e0c:	a903      	add	r1, sp, #12
    1e0e:	6858      	ldr	r0, [r3, #4]
    1e10:	9003      	str	r0, [sp, #12]
    1e12:	8890      	ldrh	r0, [r2, #4]
    1e14:	8088      	strh	r0, [r1, #4]
    1e16:	7992      	ldrb	r2, [r2, #6]
    1e18:	718a      	strb	r2, [r1, #6]
    uint8_t tx_data[7] = {FIFO_DATA, 5, 0x18, 't', 'e', 's', 't'};
    1e1a:	aa01      	add	r2, sp, #4
    1e1c:	0019      	movs	r1, r3
    1e1e:	68db      	ldr	r3, [r3, #12]
    1e20:	9301      	str	r3, [sp, #4]
    1e22:	8a0b      	ldrh	r3, [r1, #16]
    1e24:	8093      	strh	r3, [r2, #4]
    1e26:	7c8b      	ldrb	r3, [r1, #18]
    1e28:	7193      	strb	r3, [r2, #6]
    simSysInit();
    1e2a:	4b28      	ldr	r3, [pc, #160]	; (1ecc <main+0xcc>)
    1e2c:	4798      	blx	r3
    spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
    1e2e:	2165      	movs	r1, #101	; 0x65
    1e30:	2002      	movs	r0, #2
    1e32:	4b27      	ldr	r3, [pc, #156]	; (1ed0 <main+0xd0>)
    1e34:	4798      	blx	r3
    delay_ms(100);
    1e36:	2064      	movs	r0, #100	; 0x64
    1e38:	4b26      	ldr	r3, [pc, #152]	; (1ed4 <main+0xd4>)
    1e3a:	4798      	blx	r3
    spi40_tx_init();
    1e3c:	4b26      	ldr	r3, [pc, #152]	; (1ed8 <main+0xd8>)
    1e3e:	4798      	blx	r3
    while((spi40_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
    1e40:	201d      	movs	r0, #29
    1e42:	4b26      	ldr	r3, [pc, #152]	; (1edc <main+0xdc>)
    1e44:	4798      	blx	r3
    1e46:	07c3      	lsls	r3, r0, #31
    1e48:	d5fa      	bpl.n	1e40 <main+0x40>
    spi40_autorange();
    1e4a:	4b25      	ldr	r3, [pc, #148]	; (1ee0 <main+0xe0>)
    1e4c:	4798      	blx	r3
        spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
    1e4e:	2165      	movs	r1, #101	; 0x65
    1e50:	2002      	movs	r0, #2
    1e52:	4c1f      	ldr	r4, [pc, #124]	; (1ed0 <main+0xd0>)
    1e54:	47a0      	blx	r4
        delay_ms(100);
    1e56:	2064      	movs	r0, #100	; 0x64
    1e58:	4d1e      	ldr	r5, [pc, #120]	; (1ed4 <main+0xd4>)
    1e5a:	47a8      	blx	r5
        spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_FULLTX);
    1e5c:	216d      	movs	r1, #109	; 0x6d
    1e5e:	2002      	movs	r0, #2
    1e60:	47a0      	blx	r4
        delay_ms(100);
    1e62:	2064      	movs	r0, #100	; 0x64
    1e64:	47a8      	blx	r5
        spi40_wr8(AX5043_FIFOSTAT, FIFOCMD_CLRFIFO);
    1e66:	2103      	movs	r1, #3
    1e68:	2028      	movs	r0, #40	; 0x28
    1e6a:	47a0      	blx	r4
        spi40_rd8(AX5043_POWSTAT);
    1e6c:	2003      	movs	r0, #3
    1e6e:	4b1b      	ldr	r3, [pc, #108]	; (1edc <main+0xdc>)
    1e70:	4798      	blx	r3
        while((spi40_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
    1e72:	201d      	movs	r0, #29
    1e74:	4b19      	ldr	r3, [pc, #100]	; (1edc <main+0xdc>)
    1e76:	4798      	blx	r3
    1e78:	07c3      	lsls	r3, r0, #31
    1e7a:	d5fa      	bpl.n	1e72 <main+0x72>
        spi40_start_xfer(AX5043_FIFODATA, WRT);
    1e7c:	2101      	movs	r1, #1
    1e7e:	2029      	movs	r0, #41	; 0x29
    1e80:	4b18      	ldr	r3, [pc, #96]	; (1ee4 <main+0xe4>)
    1e82:	4798      	blx	r3
        spi40_write(tx_preamble, 4);
    1e84:	2104      	movs	r1, #4
    1e86:	a805      	add	r0, sp, #20
    1e88:	4c17      	ldr	r4, [pc, #92]	; (1ee8 <main+0xe8>)
    1e8a:	47a0      	blx	r4
        spi40_write(tx_sync, 7);
    1e8c:	2107      	movs	r1, #7
    1e8e:	a803      	add	r0, sp, #12
    1e90:	47a0      	blx	r4
        spi40_write(tx_data, 7);
    1e92:	2107      	movs	r1, #7
    1e94:	a801      	add	r0, sp, #4
    1e96:	47a0      	blx	r4
        spi40_stop_xfer();
    1e98:	4b14      	ldr	r3, [pc, #80]	; (1eec <main+0xec>)
    1e9a:	4798      	blx	r3
        while((spi40_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
    1e9c:	201d      	movs	r0, #29
    1e9e:	4b0f      	ldr	r3, [pc, #60]	; (1edc <main+0xdc>)
    1ea0:	4798      	blx	r3
    1ea2:	07c3      	lsls	r3, r0, #31
    1ea4:	d5fa      	bpl.n	1e9c <main+0x9c>
        spi40_wr8(AX5043_FIFOSTAT, FIFOCMD_COMMIT);
    1ea6:	2104      	movs	r1, #4
    1ea8:	2028      	movs	r0, #40	; 0x28
    1eaa:	4b09      	ldr	r3, [pc, #36]	; (1ed0 <main+0xd0>)
    1eac:	4798      	blx	r3
        while(spi40_rd8(AX5043_RADIOSTATE) != 0);
    1eae:	201c      	movs	r0, #28
    1eb0:	4b0a      	ldr	r3, [pc, #40]	; (1edc <main+0xdc>)
    1eb2:	4798      	blx	r3
    1eb4:	2800      	cmp	r0, #0
    1eb6:	d1fa      	bne.n	1eae <main+0xae>
        spi40_wr8(AX5043_PWRMODE, /*0x60 | */AX5043_POWERDOWN);
    1eb8:	2100      	movs	r1, #0
    1eba:	3002      	adds	r0, #2
    1ebc:	4b04      	ldr	r3, [pc, #16]	; (1ed0 <main+0xd0>)
    1ebe:	4798      	blx	r3
        delay_ms(100);
    1ec0:	2064      	movs	r0, #100	; 0x64
    1ec2:	4b04      	ldr	r3, [pc, #16]	; (1ed4 <main+0xd4>)
    1ec4:	4798      	blx	r3
        spi40_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
    1ec6:	e7c2      	b.n	1e4e <main+0x4e>
    1ec8:	000020bc 	.word	0x000020bc
    1ecc:	00001ddd 	.word	0x00001ddd
    1ed0:	000002fd 	.word	0x000002fd
    1ed4:	00000811 	.word	0x00000811
    1ed8:	0000032d 	.word	0x0000032d
    1edc:	000002b5 	.word	0x000002b5
    1ee0:	000007b5 	.word	0x000007b5
    1ee4:	00000221 	.word	0x00000221
    1ee8:	000002e5 	.word	0x000002e5
    1eec:	00000281 	.word	0x00000281

00001ef0 <__udivsi3>:
    1ef0:	2200      	movs	r2, #0
    1ef2:	0843      	lsrs	r3, r0, #1
    1ef4:	428b      	cmp	r3, r1
    1ef6:	d374      	bcc.n	1fe2 <__udivsi3+0xf2>
    1ef8:	0903      	lsrs	r3, r0, #4
    1efa:	428b      	cmp	r3, r1
    1efc:	d35f      	bcc.n	1fbe <__udivsi3+0xce>
    1efe:	0a03      	lsrs	r3, r0, #8
    1f00:	428b      	cmp	r3, r1
    1f02:	d344      	bcc.n	1f8e <__udivsi3+0x9e>
    1f04:	0b03      	lsrs	r3, r0, #12
    1f06:	428b      	cmp	r3, r1
    1f08:	d328      	bcc.n	1f5c <__udivsi3+0x6c>
    1f0a:	0c03      	lsrs	r3, r0, #16
    1f0c:	428b      	cmp	r3, r1
    1f0e:	d30d      	bcc.n	1f2c <__udivsi3+0x3c>
    1f10:	22ff      	movs	r2, #255	; 0xff
    1f12:	0209      	lsls	r1, r1, #8
    1f14:	ba12      	rev	r2, r2
    1f16:	0c03      	lsrs	r3, r0, #16
    1f18:	428b      	cmp	r3, r1
    1f1a:	d302      	bcc.n	1f22 <__udivsi3+0x32>
    1f1c:	1212      	asrs	r2, r2, #8
    1f1e:	0209      	lsls	r1, r1, #8
    1f20:	d065      	beq.n	1fee <__udivsi3+0xfe>
    1f22:	0b03      	lsrs	r3, r0, #12
    1f24:	428b      	cmp	r3, r1
    1f26:	d319      	bcc.n	1f5c <__udivsi3+0x6c>
    1f28:	e000      	b.n	1f2c <__udivsi3+0x3c>
    1f2a:	0a09      	lsrs	r1, r1, #8
    1f2c:	0bc3      	lsrs	r3, r0, #15
    1f2e:	428b      	cmp	r3, r1
    1f30:	d301      	bcc.n	1f36 <__udivsi3+0x46>
    1f32:	03cb      	lsls	r3, r1, #15
    1f34:	1ac0      	subs	r0, r0, r3
    1f36:	4152      	adcs	r2, r2
    1f38:	0b83      	lsrs	r3, r0, #14
    1f3a:	428b      	cmp	r3, r1
    1f3c:	d301      	bcc.n	1f42 <__udivsi3+0x52>
    1f3e:	038b      	lsls	r3, r1, #14
    1f40:	1ac0      	subs	r0, r0, r3
    1f42:	4152      	adcs	r2, r2
    1f44:	0b43      	lsrs	r3, r0, #13
    1f46:	428b      	cmp	r3, r1
    1f48:	d301      	bcc.n	1f4e <__udivsi3+0x5e>
    1f4a:	034b      	lsls	r3, r1, #13
    1f4c:	1ac0      	subs	r0, r0, r3
    1f4e:	4152      	adcs	r2, r2
    1f50:	0b03      	lsrs	r3, r0, #12
    1f52:	428b      	cmp	r3, r1
    1f54:	d301      	bcc.n	1f5a <__udivsi3+0x6a>
    1f56:	030b      	lsls	r3, r1, #12
    1f58:	1ac0      	subs	r0, r0, r3
    1f5a:	4152      	adcs	r2, r2
    1f5c:	0ac3      	lsrs	r3, r0, #11
    1f5e:	428b      	cmp	r3, r1
    1f60:	d301      	bcc.n	1f66 <__udivsi3+0x76>
    1f62:	02cb      	lsls	r3, r1, #11
    1f64:	1ac0      	subs	r0, r0, r3
    1f66:	4152      	adcs	r2, r2
    1f68:	0a83      	lsrs	r3, r0, #10
    1f6a:	428b      	cmp	r3, r1
    1f6c:	d301      	bcc.n	1f72 <__udivsi3+0x82>
    1f6e:	028b      	lsls	r3, r1, #10
    1f70:	1ac0      	subs	r0, r0, r3
    1f72:	4152      	adcs	r2, r2
    1f74:	0a43      	lsrs	r3, r0, #9
    1f76:	428b      	cmp	r3, r1
    1f78:	d301      	bcc.n	1f7e <__udivsi3+0x8e>
    1f7a:	024b      	lsls	r3, r1, #9
    1f7c:	1ac0      	subs	r0, r0, r3
    1f7e:	4152      	adcs	r2, r2
    1f80:	0a03      	lsrs	r3, r0, #8
    1f82:	428b      	cmp	r3, r1
    1f84:	d301      	bcc.n	1f8a <__udivsi3+0x9a>
    1f86:	020b      	lsls	r3, r1, #8
    1f88:	1ac0      	subs	r0, r0, r3
    1f8a:	4152      	adcs	r2, r2
    1f8c:	d2cd      	bcs.n	1f2a <__udivsi3+0x3a>
    1f8e:	09c3      	lsrs	r3, r0, #7
    1f90:	428b      	cmp	r3, r1
    1f92:	d301      	bcc.n	1f98 <__udivsi3+0xa8>
    1f94:	01cb      	lsls	r3, r1, #7
    1f96:	1ac0      	subs	r0, r0, r3
    1f98:	4152      	adcs	r2, r2
    1f9a:	0983      	lsrs	r3, r0, #6
    1f9c:	428b      	cmp	r3, r1
    1f9e:	d301      	bcc.n	1fa4 <__udivsi3+0xb4>
    1fa0:	018b      	lsls	r3, r1, #6
    1fa2:	1ac0      	subs	r0, r0, r3
    1fa4:	4152      	adcs	r2, r2
    1fa6:	0943      	lsrs	r3, r0, #5
    1fa8:	428b      	cmp	r3, r1
    1faa:	d301      	bcc.n	1fb0 <__udivsi3+0xc0>
    1fac:	014b      	lsls	r3, r1, #5
    1fae:	1ac0      	subs	r0, r0, r3
    1fb0:	4152      	adcs	r2, r2
    1fb2:	0903      	lsrs	r3, r0, #4
    1fb4:	428b      	cmp	r3, r1
    1fb6:	d301      	bcc.n	1fbc <__udivsi3+0xcc>
    1fb8:	010b      	lsls	r3, r1, #4
    1fba:	1ac0      	subs	r0, r0, r3
    1fbc:	4152      	adcs	r2, r2
    1fbe:	08c3      	lsrs	r3, r0, #3
    1fc0:	428b      	cmp	r3, r1
    1fc2:	d301      	bcc.n	1fc8 <__udivsi3+0xd8>
    1fc4:	00cb      	lsls	r3, r1, #3
    1fc6:	1ac0      	subs	r0, r0, r3
    1fc8:	4152      	adcs	r2, r2
    1fca:	0883      	lsrs	r3, r0, #2
    1fcc:	428b      	cmp	r3, r1
    1fce:	d301      	bcc.n	1fd4 <__udivsi3+0xe4>
    1fd0:	008b      	lsls	r3, r1, #2
    1fd2:	1ac0      	subs	r0, r0, r3
    1fd4:	4152      	adcs	r2, r2
    1fd6:	0843      	lsrs	r3, r0, #1
    1fd8:	428b      	cmp	r3, r1
    1fda:	d301      	bcc.n	1fe0 <__udivsi3+0xf0>
    1fdc:	004b      	lsls	r3, r1, #1
    1fde:	1ac0      	subs	r0, r0, r3
    1fe0:	4152      	adcs	r2, r2
    1fe2:	1a41      	subs	r1, r0, r1
    1fe4:	d200      	bcs.n	1fe8 <__udivsi3+0xf8>
    1fe6:	4601      	mov	r1, r0
    1fe8:	4152      	adcs	r2, r2
    1fea:	4610      	mov	r0, r2
    1fec:	4770      	bx	lr
    1fee:	e7ff      	b.n	1ff0 <__udivsi3+0x100>
    1ff0:	b501      	push	{r0, lr}
    1ff2:	2000      	movs	r0, #0
    1ff4:	f000 f806 	bl	2004 <__aeabi_idiv0>
    1ff8:	bd02      	pop	{r1, pc}
    1ffa:	46c0      	nop			; (mov r8, r8)

00001ffc <__aeabi_uidivmod>:
    1ffc:	2900      	cmp	r1, #0
    1ffe:	d0f7      	beq.n	1ff0 <__udivsi3+0x100>
    2000:	e776      	b.n	1ef0 <__udivsi3>
    2002:	4770      	bx	lr

00002004 <__aeabi_idiv0>:
    2004:	4770      	bx	lr
    2006:	46c0      	nop			; (mov r8, r8)

00002008 <__libc_init_array>:
    2008:	b570      	push	{r4, r5, r6, lr}
    200a:	2600      	movs	r6, #0
    200c:	4d0c      	ldr	r5, [pc, #48]	; (2040 <__libc_init_array+0x38>)
    200e:	4c0d      	ldr	r4, [pc, #52]	; (2044 <__libc_init_array+0x3c>)
    2010:	1b64      	subs	r4, r4, r5
    2012:	10a4      	asrs	r4, r4, #2
    2014:	42a6      	cmp	r6, r4
    2016:	d109      	bne.n	202c <__libc_init_array+0x24>
    2018:	2600      	movs	r6, #0
    201a:	f000 f859 	bl	20d0 <_init>
    201e:	4d0a      	ldr	r5, [pc, #40]	; (2048 <__libc_init_array+0x40>)
    2020:	4c0a      	ldr	r4, [pc, #40]	; (204c <__libc_init_array+0x44>)
    2022:	1b64      	subs	r4, r4, r5
    2024:	10a4      	asrs	r4, r4, #2
    2026:	42a6      	cmp	r6, r4
    2028:	d105      	bne.n	2036 <__libc_init_array+0x2e>
    202a:	bd70      	pop	{r4, r5, r6, pc}
    202c:	00b3      	lsls	r3, r6, #2
    202e:	58eb      	ldr	r3, [r5, r3]
    2030:	4798      	blx	r3
    2032:	3601      	adds	r6, #1
    2034:	e7ee      	b.n	2014 <__libc_init_array+0xc>
    2036:	00b3      	lsls	r3, r6, #2
    2038:	58eb      	ldr	r3, [r5, r3]
    203a:	4798      	blx	r3
    203c:	3601      	adds	r6, #1
    203e:	e7f2      	b.n	2026 <__libc_init_array+0x1e>
    2040:	000020dc 	.word	0x000020dc
    2044:	000020dc 	.word	0x000020dc
    2048:	000020dc 	.word	0x000020dc
    204c:	000020e0 	.word	0x000020e0

00002050 <memset>:
    2050:	0003      	movs	r3, r0
    2052:	1882      	adds	r2, r0, r2
    2054:	4293      	cmp	r3, r2
    2056:	d100      	bne.n	205a <memset+0xa>
    2058:	4770      	bx	lr
    205a:	7019      	strb	r1, [r3, #0]
    205c:	3301      	adds	r3, #1
    205e:	e7f9      	b.n	2054 <memset+0x4>
    2060:	42000800 	.word	0x42000800
    2064:	42000c00 	.word	0x42000c00
    2068:	42001000 	.word	0x42001000
    206c:	42001400 	.word	0x42001400
    2070:	0c0b0a09 	.word	0x0c0b0a09
    2074:	00001638 	.word	0x00001638
    2078:	00001690 	.word	0x00001690
    207c:	00001690 	.word	0x00001690
    2080:	00001632 	.word	0x00001632
    2084:	00001632 	.word	0x00001632
    2088:	0000164c 	.word	0x0000164c
    208c:	0000163e 	.word	0x0000163e
    2090:	00001652 	.word	0x00001652
    2094:	00001680 	.word	0x00001680
    2098:	0000171c 	.word	0x0000171c
    209c:	0000178a 	.word	0x0000178a
    20a0:	0000178a 	.word	0x0000178a
    20a4:	000016fc 	.word	0x000016fc
    20a8:	0000170e 	.word	0x0000170e
    20ac:	0000172c 	.word	0x0000172c
    20b0:	00001700 	.word	0x00001700
    20b4:	0000173c 	.word	0x0000173c
    20b8:	00001778 	.word	0x00001778
    20bc:	55101862 	.word	0x55101862
    20c0:	cc1805e1 	.word	0xcc1805e1
    20c4:	00aaccaa 	.word	0x00aaccaa
    20c8:	741805e1 	.word	0x741805e1
    20cc:	00747365 	.word	0x00747365

000020d0 <_init>:
    20d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    20d6:	bc08      	pop	{r3}
    20d8:	469e      	mov	lr, r3
    20da:	4770      	bx	lr

000020dc <__init_array_start>:
    20dc:	000000dd 	.word	0x000000dd

000020e0 <_fini>:
    20e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    20e6:	bc08      	pop	{r3}
    20e8:	469e      	mov	lr, r3
    20ea:	4770      	bx	lr

000020ec <__fini_array_start>:
    20ec:	000000b5 	.word	0x000000b5
