
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  000022f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a4  2000001c  00002310  0002001c  2**2
                  ALLOC
  3 .stack        00002000  200001c0  000024b4  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   00033086  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004305  00000000  00000000  00053123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005fa6  00000000  00000000  00057428  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000610  00000000  00000000  0005d3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cc8  00000000  00000000  0005d9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006b9b  00000000  00000000  0005e6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00006710  00000000  00000000  00065241  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000fb8  00000000  00000000  0006b954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 21 00 20 05 1e 00 00 01 1e 00 00 01 1e 00 00     .!. ............
	...
      2c:	01 1e 00 00 00 00 00 00 00 00 00 00 01 1e 00 00     ................
      3c:	01 1e 00 00 01 1e 00 00 01 1e 00 00 01 1e 00 00     ................
      4c:	01 1e 00 00 01 1e 00 00 01 1e 00 00 01 1e 00 00     ................
      5c:	01 1e 00 00 01 1e 00 00 f1 17 00 00 01 18 00 00     ................
      6c:	11 18 00 00 21 18 00 00 31 18 00 00 41 18 00 00     ....!...1...A...
      7c:	01 1e 00 00 01 1e 00 00 01 1e 00 00 01 1e 00 00     ................
      8c:	01 1e 00 00 01 1e 00 00 01 1e 00 00 01 1e 00 00     ................
      9c:	01 1e 00 00 01 1e 00 00 01 1e 00 00 01 1e 00 00     ................
      ac:	01 1e 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	000022f4 	.word	0x000022f4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	000022f4 	.word	0x000022f4
     10c:	000022f4 	.word	0x000022f4
     110:	00000000 	.word	0x00000000

00000114 <spi27_read_byte_from_reg>:
		
		//Set the transmission mode to streaming (pg. 30)
		spi27_write_byte_to_reg(0xBA,0x00);
}

uint8_t spi27_read_byte_from_reg (uint8_t reg){
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b085      	sub	sp, #20
     118:	466b      	mov	r3, sp
	uint8_t arr = 0;
     11a:	240f      	movs	r4, #15
uint8_t spi27_read_byte_from_reg (uint8_t reg){
     11c:	1dd9      	adds	r1, r3, #7
	uint8_t arr = 0;
     11e:	2300      	movs	r3, #0
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     120:	2680      	movs	r6, #128	; 0x80
     122:	446c      	add	r4, sp
     124:	7023      	strb	r3, [r4, #0]
     126:	4d07      	ldr	r5, [pc, #28]	; (144 <spi27_read_byte_from_reg+0x30>)
	int value;
	
	status_code_genare_t read_status;
	int8_t *val;
	//Add 1 leading 0s to put module in READ mode
	reg = reg | 0b01000000;
     128:	3340      	adds	r3, #64	; 0x40
     12a:	4318      	orrs	r0, r3
     12c:	0436      	lsls	r6, r6, #16
     12e:	7008      	strb	r0, [r1, #0]
	
	//read byte from address
	port_pin_set_output_level(SS27, true);
	//Note: added a line to ASF module to assign recieved value to buffer. 
	//ASF implementation was not working.
	read_status = spi_transceive_buffer_wait(&spi27Master, val, read_byte, 2);
     130:	3b3e      	subs	r3, #62	; 0x3e
     132:	61ae      	str	r6, [r5, #24]
     134:	0022      	movs	r2, r4
     136:	4f04      	ldr	r7, [pc, #16]	; (148 <spi27_read_byte_from_reg+0x34>)
     138:	4804      	ldr	r0, [pc, #16]	; (14c <spi27_read_byte_from_reg+0x38>)
     13a:	47b8      	blx	r7
	} else {
		port_base->OUTCLR.reg = pin_mask;
     13c:	616e      	str	r6, [r5, #20]
	port_pin_set_output_level(SS27, false);
	return arr;
     13e:	7820      	ldrb	r0, [r4, #0]
	//set sen = 0;
	//set sen = 1; 
}
     140:	b005      	add	sp, #20
     142:	bdf0      	pop	{r4, r5, r6, r7, pc}
     144:	41004400 	.word	0x41004400
     148:	0000138d 	.word	0x0000138d
     14c:	20000164 	.word	0x20000164

00000150 <spi27_write_cmd>:

void spi27_write_cmd (char cmd){
     150:	b537      	push	{r0, r1, r2, r4, r5, lr}
     152:	466b      	mov	r3, sp
     154:	1dd9      	adds	r1, r3, #7
	status_code_genare_t write_status;
	int8_t *val;
	//Add 1s to put module in COMMAND mode
	cmd = cmd | 0b11000000;
     156:	2340      	movs	r3, #64	; 0x40
		port_base->OUTSET.reg = pin_mask;
     158:	2580      	movs	r5, #128	; 0x80
     15a:	4c06      	ldr	r4, [pc, #24]	; (174 <spi27_write_cmd+0x24>)
     15c:	425b      	negs	r3, r3
     15e:	042d      	lsls	r5, r5, #16
     160:	4318      	orrs	r0, r3
     162:	7008      	strb	r0, [r1, #0]
	val = &cmd;
	//read byte from address
	port_pin_set_output_level(SS27, true);	
	write_status = spi_write_buffer_wait(&spi27Master,val,1);
     164:	2201      	movs	r2, #1
     166:	61a5      	str	r5, [r4, #24]
     168:	4b03      	ldr	r3, [pc, #12]	; (178 <spi27_write_cmd+0x28>)
     16a:	4804      	ldr	r0, [pc, #16]	; (17c <spi27_write_cmd+0x2c>)
     16c:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     16e:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(SS27, false);	
	//set sen = 0;
	//set sen = 1;
}
     170:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	41004400 	.word	0x41004400
     178:	000011cd 	.word	0x000011cd
     17c:	20000164 	.word	0x20000164

00000180 <spi27_write_byte_to_reg>:
	rssi = spi27_read_byte_from_reg(0x23);
	rssi = rssi & 0x0F;
	return rssi;
}

void spi27_write_byte_to_reg (char byte, uint8_t reg){
     180:	b573      	push	{r0, r1, r4, r5, r6, lr}
	 uint16_t val; 
	 val = 0;
	
	//Add 2 leading 0s to put module in WRITE mode
	reg &= 0x3F;
	val = (byte<<8) | reg;
     182:	466b      	mov	r3, sp
     184:	1d9e      	adds	r6, r3, #6
     186:	0203      	lsls	r3, r0, #8
     188:	203f      	movs	r0, #63	; 0x3f
		port_base->OUTSET.reg = pin_mask;
     18a:	2580      	movs	r5, #128	; 0x80
     18c:	4c06      	ldr	r4, [pc, #24]	; (1a8 <spi27_write_byte_to_reg+0x28>)
     18e:	4008      	ands	r0, r1
     190:	042d      	lsls	r5, r5, #16
     192:	4318      	orrs	r0, r3
     194:	8030      	strh	r0, [r6, #0]
	//val = 0x5ABF;
	//prepare buffer with address and data
	buf = &val;
	//write byte to address
	port_pin_set_output_level(SS27, true);	
		spi_write_buffer_wait(&spi27Master, buf, 2);
     196:	0031      	movs	r1, r6
     198:	61a5      	str	r5, [r4, #24]
     19a:	2202      	movs	r2, #2
     19c:	4b03      	ldr	r3, [pc, #12]	; (1ac <spi27_write_byte_to_reg+0x2c>)
     19e:	4804      	ldr	r0, [pc, #16]	; (1b0 <spi27_write_byte_to_reg+0x30>)
     1a0:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     1a2:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(SS27, false);	
		//set sen = 0;
		//set sen = 1;
	
}
     1a4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	41004400 	.word	0x41004400
     1ac:	000011cd 	.word	0x000011cd
     1b0:	20000164 	.word	0x20000164

000001b4 <spi27_connect>:
void spi27_connect(){
     1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	spi27_write_cmd(CHIP_RESET); //Reset the chip
     1b6:	2000      	movs	r0, #0
     1b8:	4e1d      	ldr	r6, [pc, #116]	; (230 <spi27_connect+0x7c>)
     1ba:	47b0      	blx	r6
	spi27_write_byte_to_reg(0x00, 0x00); //set transmitter unit as client
     1bc:	2100      	movs	r1, #0
     1be:	4c1d      	ldr	r4, [pc, #116]	; (234 <spi27_connect+0x80>)
     1c0:	0008      	movs	r0, r1
     1c2:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x10, 0x04); //set wakecyc bits (wake cycle every 1 second) (pg. 25)
     1c4:	2104      	movs	r1, #4
     1c6:	2010      	movs	r0, #16
     1c8:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x81, 0x0C); //set cyctim0 bits ( cycle every 1 second) (pg. 25) and mdpt0 random pointer 
     1ca:	210c      	movs	r1, #12
     1cc:	2081      	movs	r0, #129	; 0x81
     1ce:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x00, 0x01); //DISABLE all timers
     1d0:	2101      	movs	r1, #1
     1d2:	2000      	movs	r0, #0
     1d4:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x02, 0x06); //set bitrate to 53 kbit per sec
     1d6:	2106      	movs	r1, #6
     1d8:	2002      	movs	r0, #2
     1da:	47a0      	blx	r4
	spi27_write_byte_to_reg(0, 0x08);
     1dc:	2108      	movs	r1, #8
     1de:	2000      	movs	r0, #0
     1e0:	47a0      	blx	r4
	spi27_write_byte_to_reg(0, 0x09);
     1e2:	2109      	movs	r1, #9
     1e4:	2000      	movs	r0, #0
     1e6:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x02, 0x0A);
     1e8:	210a      	movs	r1, #10
     1ea:	2002      	movs	r0, #2
     1ec:	47a0      	blx	r4
	test = spi27_read_byte_from_reg(0x04);
     1ee:	4d12      	ldr	r5, [pc, #72]	; (238 <spi27_connect+0x84>)
     1f0:	2004      	movs	r0, #4
     1f2:	47a8      	blx	r5
	test = spi27_read_byte_from_reg(0x06);
     1f4:	2006      	movs	r0, #6
     1f6:	47a8      	blx	r5
	spi27_write_cmd(WAKE_RX_ON); //begin wakeup call
     1f8:	2015      	movs	r0, #21
     1fa:	47b0      	blx	r6
	delay_s(1); //delay for 1 sec, listen for client
     1fc:	20fa      	movs	r0, #250	; 0xfa
     1fe:	4b0f      	ldr	r3, [pc, #60]	; (23c <spi27_connect+0x88>)
     200:	0080      	lsls	r0, r0, #2
     202:	4798      	blx	r3
			if (x & 0b01000000){
     204:	2740      	movs	r7, #64	; 0x40
		uint8_t x = spi27_read_byte_from_reg(0x2A);
     206:	202a      	movs	r0, #42	; 0x2a
     208:	47a8      	blx	r5
			if (x & 0b01000000){
     20a:	4238      	tst	r0, r7
     20c:	d0fb      	beq.n	206 <spi27_connect+0x52>
	spi27_write_byte_to_reg (0xFF,0x38); 	
     20e:	2138      	movs	r1, #56	; 0x38
     210:	20ff      	movs	r0, #255	; 0xff
     212:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x01,0x37); //set datalen to 1 in dlen
     214:	2137      	movs	r1, #55	; 0x37
     216:	2001      	movs	r0, #1
     218:	47a0      	blx	r4
	spi27_write_cmd(TRANSMIT);
     21a:	2005      	movs	r0, #5
     21c:	47b0      	blx	r6
		if (y & 0b00000001){
     21e:	2601      	movs	r6, #1
		uint8_t y = spi27_read_byte_from_reg(0x2B);
     220:	202b      	movs	r0, #43	; 0x2b
     222:	47a8      	blx	r5
		if (y & 0b00000001){
     224:	4230      	tst	r0, r6
     226:	d0fb      	beq.n	220 <spi27_connect+0x6c>
		spi27_write_byte_to_reg(0xBA,0x00);
     228:	2100      	movs	r1, #0
     22a:	20ba      	movs	r0, #186	; 0xba
     22c:	47a0      	blx	r4
}
     22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     230:	00000151 	.word	0x00000151
     234:	00000181 	.word	0x00000181
     238:	00000115 	.word	0x00000115
     23c:	00000689 	.word	0x00000689

00000240 <spi27_init>:
{
     240:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (spi27InitComp == true)
     242:	4e2e      	ldr	r6, [pc, #184]	; (2fc <spi27_init+0xbc>)
{
     244:	b091      	sub	sp, #68	; 0x44
	if (spi27InitComp == true)
     246:	7831      	ldrb	r1, [r6, #0]
     248:	2900      	cmp	r1, #0
     24a:	d153      	bne.n	2f4 <spi27_init+0xb4>
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     24c:	230d      	movs	r3, #13
	config->mode             = SPI_MODE_MASTER;
     24e:	2501      	movs	r5, #1
	config->generator_source = GCLK_GENERATOR_0;
     250:	446b      	add	r3, sp
	config->mode             = SPI_MODE_MASTER;
     252:	ac02      	add	r4, sp, #8
	config->generator_source = GCLK_GENERATOR_0;
     254:	77d9      	strb	r1, [r3, #31]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     256:	220c      	movs	r2, #12
     258:	4b29      	ldr	r3, [pc, #164]	; (300 <spi27_init+0xc0>)
     25a:	a808      	add	r0, sp, #32
	config->mode             = SPI_MODE_MASTER;
     25c:	7025      	strb	r5, [r4, #0]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     25e:	7421      	strb	r1, [r4, #16]
	config->run_in_standby   = false;
     260:	7461      	strb	r1, [r4, #17]
	config->receiver_enable  = true;
     262:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
     264:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
     266:	7521      	strb	r1, [r4, #20]
	config->data_order       = SPI_DATA_ORDER_MSB;
     268:	9103      	str	r1, [sp, #12]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     26a:	4798      	blx	r3
    spi27MasterConf.mux_setting = SPI27_PINXMUX;
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	025b      	lsls	r3, r3, #9
     270:	60e3      	str	r3, [r4, #12]
    spi27MasterConf.pinmux_pad0 = MOSI27;
     272:	4b24      	ldr	r3, [pc, #144]	; (304 <spi27_init+0xc4>)
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     274:	4f24      	ldr	r7, [pc, #144]	; (308 <spi27_init+0xc8>)
    spi27MasterConf.pinmux_pad0 = MOSI27;
     276:	62a3      	str	r3, [r4, #40]	; 0x28
    spi27MasterConf.pinmux_pad1 = SCK27;
     278:	4b24      	ldr	r3, [pc, #144]	; (30c <spi27_init+0xcc>)
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     27a:	0022      	movs	r2, r4
    spi27MasterConf.pinmux_pad1 = SCK27;
     27c:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi27MasterConf.pinmux_pad2 = PINMUX_UNUSED;
     27e:	2301      	movs	r3, #1
     280:	425b      	negs	r3, r3
     282:	6323      	str	r3, [r4, #48]	; 0x30
    spi27MasterConf.pinmux_pad3 = MISO27;
     284:	4b22      	ldr	r3, [pc, #136]	; (310 <spi27_init+0xd0>)
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     286:	4923      	ldr	r1, [pc, #140]	; (314 <spi27_init+0xd4>)
    spi27MasterConf.pinmux_pad3 = MISO27;
     288:	6363      	str	r3, [r4, #52]	; 0x34
	spi27MasterConf.transfer_mode = SPI_TRANSFER_MODE_1;
     28a:	2380      	movs	r3, #128	; 0x80
     28c:	055b      	lsls	r3, r3, #21
     28e:	60a3      	str	r3, [r4, #8]
	spi27MasterConf.mode_specific.master.baudrate = SPI27MAXCLK;
     290:	4b21      	ldr	r3, [pc, #132]	; (318 <spi27_init+0xd8>)
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     292:	0038      	movs	r0, r7
	spi27MasterConf.mode_specific.master.baudrate = SPI27MAXCLK;
     294:	61a3      	str	r3, [r4, #24]
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     296:	4b21      	ldr	r3, [pc, #132]	; (31c <spi27_init+0xdc>)
     298:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     29a:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     29c:	4b20      	ldr	r3, [pc, #128]	; (320 <spi27_init+0xe0>)
     29e:	0020      	movs	r0, r4
     2a0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2a2:	231f      	movs	r3, #31
     2a4:	4018      	ands	r0, r3
     2a6:	4085      	lsls	r5, r0
     2a8:	4b1e      	ldr	r3, [pc, #120]	; (324 <spi27_init+0xe4>)
     2aa:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     2ac:	683b      	ldr	r3, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
     2ae:	69dd      	ldr	r5, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     2b0:	2d00      	cmp	r5, #0
     2b2:	d1fc      	bne.n	2ae <spi27_init+0x6e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2b4:	2302      	movs	r3, #2
     2b6:	6822      	ldr	r2, [r4, #0]
	slave->ss_pin          = config->ss_pin;
     2b8:	2017      	movs	r0, #23
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2ba:	4313      	orrs	r3, r2
     2bc:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2be:	2401      	movs	r4, #1
	slave->ss_pin          = config->ss_pin;
     2c0:	4f19      	ldr	r7, [pc, #100]	; (328 <spi27_init+0xe8>)
     2c2:	a901      	add	r1, sp, #4
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2c4:	4b19      	ldr	r3, [pc, #100]	; (32c <spi27_init+0xec>)
     2c6:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
     2c8:	708d      	strb	r5, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2ca:	700c      	strb	r4, [r1, #0]
	slave->ss_pin          = config->ss_pin;
     2cc:	7038      	strb	r0, [r7, #0]
	slave->address_enabled = config->address_enabled;
     2ce:	707d      	strb	r5, [r7, #1]
	slave->address         = config->address;
     2d0:	70bd      	strb	r5, [r7, #2]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2d2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2d4:	783a      	ldrb	r2, [r7, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
     2d6:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2d8:	09d1      	lsrs	r1, r2, #7
     2da:	d10d      	bne.n	2f8 <spi27_init+0xb8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2dc:	311f      	adds	r1, #31
     2de:	400a      	ands	r2, r1
     2e0:	0021      	movs	r1, r4
     2e2:	4091      	lsls	r1, r2
     2e4:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2e6:	4912      	ldr	r1, [pc, #72]	; (330 <spi27_init+0xf0>)
     2e8:	01db      	lsls	r3, r3, #7
     2ea:	185b      	adds	r3, r3, r1
     2ec:	619a      	str	r2, [r3, #24]
	spi27_connect();
     2ee:	4b11      	ldr	r3, [pc, #68]	; (334 <spi27_init+0xf4>)
    spi27InitComp = true;
     2f0:	7034      	strb	r4, [r6, #0]
	spi27_connect();
     2f2:	4798      	blx	r3
}
     2f4:	b011      	add	sp, #68	; 0x44
     2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f8:	61ad      	str	r5, [r5, #24]
     2fa:	deff      	udf	#255	; 0xff
     2fc:	20000038 	.word	0x20000038
     300:	000021e9 	.word	0x000021e9
     304:	00180002 	.word	0x00180002
     308:	20000164 	.word	0x20000164
     30c:	00190002 	.word	0x00190002
     310:	00160002 	.word	0x00160002
     314:	42001400 	.word	0x42001400
     318:	000f4240 	.word	0x000f4240
     31c:	00000fc5 	.word	0x00000fc5
     320:	000017c5 	.word	0x000017c5
     324:	e000e100 	.word	0xe000e100
     328:	200001a0 	.word	0x200001a0
     32c:	000006b5 	.word	0x000006b5
     330:	41004400 	.word	0x41004400
     334:	000001b5 	.word	0x000001b5

00000338 <ringbuff_clear>:
 * Description      : Clears the ring buffer. Returns 0 if operation was
 *  successful, else returns -1.
 */
int8_t ringbuff_clear(ringbuff_t* pringbuff)
{
    uint8_t ret_val = -1;
     338:	23ff      	movs	r3, #255	; 0xff
    
    // NULL pointer check
    if(pringbuff)
     33a:	2800      	cmp	r0, #0
     33c:	d002      	beq.n	344 <ringbuff_clear+0xc>
    {
        // clear the read/write values
        pringbuff->write = 0;
     33e:	2300      	movs	r3, #0
     340:	6043      	str	r3, [r0, #4]
        pringbuff->read = 0;
     342:	6083      	str	r3, [r0, #8]
        ret_val = 0;
    }
    
    return ret_val;
     344:	b258      	sxtb	r0, r3
}
     346:	4770      	bx	lr

00000348 <ringbuff_put>:
 * Return Values(s) : int8_t
 * Description      : Puts a byte into the ring buffer. Returns 0 if the 
 *  operation was successful, else it returns -1.
 */
int8_t ringbuff_put(ringbuff_t* pringbuff, uint8_t put_data)
{
     348:	b570      	push	{r4, r5, r6, lr}
     34a:	0004      	movs	r4, r0
     34c:	000d      	movs	r5, r1
    uint8_t ret_val = -1;
     34e:	20ff      	movs	r0, #255	; 0xff
    
    // NULL pointer check
    if(pringbuff)
     350:	2c00      	cmp	r4, #0
     352:	d00d      	beq.n	370 <ringbuff_put+0x28>
	cpu_irq_enter_critical();
     354:	4b07      	ldr	r3, [pc, #28]	; (374 <ringbuff_put+0x2c>)
     356:	4798      	blx	r3
    {
        // keep ring buffer operations atomic relative to interrupts   
        system_interrupt_enter_critical_section();
        
        // write data to the ring buffer
        pringbuff->buff[pringbuff->write] = put_data;
     358:	6862      	ldr	r2, [r4, #4]
     35a:	6823      	ldr	r3, [r4, #0]
     35c:	549d      	strb	r5, [r3, r2]

        /* increment the head. This means old data will be overwritten if the
         * user does not check if the buffer is full */
        pringbuff->write = (pringbuff->write + 1) % pringbuff->size;
     35e:	6863      	ldr	r3, [r4, #4]
     360:	68e1      	ldr	r1, [r4, #12]
     362:	1c58      	adds	r0, r3, #1
     364:	4b04      	ldr	r3, [pc, #16]	; (378 <ringbuff_put+0x30>)
     366:	4798      	blx	r3
	cpu_irq_leave_critical();
     368:	4b04      	ldr	r3, [pc, #16]	; (37c <ringbuff_put+0x34>)
     36a:	6061      	str	r1, [r4, #4]
     36c:	4798      	blx	r3
        
        system_interrupt_leave_critical_section();

        ret_val = 0;
     36e:	2000      	movs	r0, #0
    }
    
    return ret_val;
     370:	b240      	sxtb	r0, r0
}
     372:	bd70      	pop	{r4, r5, r6, pc}
     374:	00001855 	.word	0x00001855
     378:	00002129 	.word	0x00002129
     37c:	00001889 	.word	0x00001889

00000380 <uart245_init>:
 * Return Values(s) : void
 * Description      : Initializes the UART SERCOM for communicating with the
 *  RC2500HP.
 */
void uart245_init(void)
{
     380:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     382:	2380      	movs	r3, #128	; 0x80
     384:	b091      	sub	sp, #68	; 0x44
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
     386:	4669      	mov	r1, sp
     388:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
     38a:	05db      	lsls	r3, r3, #23
     38c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     38e:	2300      	movs	r3, #0
	config->parity           = USART_PARITY_NONE;
     390:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     392:	2201      	movs	r2, #1
	config->stopbits         = USART_STOPBITS_1;
     394:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     396:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
     398:	3105      	adds	r1, #5
     39a:	77ca      	strb	r2, [r1, #31]
	config->transmitter_enable = true;
     39c:	4669      	mov	r1, sp
     39e:	3106      	adds	r1, #6
     3a0:	77ca      	strb	r2, [r1, #31]
	config->clock_polarity_inverted = false;
     3a2:	466a      	mov	r2, sp
     3a4:	3207      	adds	r2, #7
     3a6:	77d3      	strb	r3, [r2, #31]
	config->use_external_clock = false;
     3a8:	aa02      	add	r2, sp, #8
     3aa:	77d3      	strb	r3, [r2, #31]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     3ac:	aa0b      	add	r2, sp, #44	; 0x2c
     3ae:	7013      	strb	r3, [r2, #0]
	config->generator_source = GCLK_GENERATOR_0;
     3b0:	222d      	movs	r2, #45	; 0x2d
     3b2:	446a      	add	r2, sp
     3b4:	7013      	strb	r3, [r2, #0]
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     3b6:	4669      	mov	r1, sp
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     3b8:	466a      	mov	r2, sp
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     3ba:	9301      	str	r3, [sp, #4]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     3bc:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
     3be:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
     3c0:	7613      	strb	r3, [r2, #24]
	config->start_frame_detection_enable            = false;
     3c2:	7713      	strb	r3, [r2, #28]
	config->encoding_format_enable                  = false;
     3c4:	7653      	strb	r3, [r2, #25]
	config->ext_clock_freq   = 0;
     3c6:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     3c8:	9305      	str	r3, [sp, #20]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     3ca:	774b      	strb	r3, [r1, #29]
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    
    config_usart.baudrate    = UART245_BAUD;
     3cc:	2396      	movs	r3, #150	; 0x96
     3ce:	01db      	lsls	r3, r3, #7
     3d0:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART245_PINMUX;
     3d2:	2390      	movs	r3, #144	; 0x90
     3d4:	035b      	lsls	r3, r3, #13
     3d6:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX245;
     3d8:	4b12      	ldr	r3, [pc, #72]	; (424 <uart245_init+0xa4>)
	config->receive_pulse_length                    = 19;
     3da:	2213      	movs	r2, #19
     3dc:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX245;
     3de:	4b12      	ldr	r3, [pc, #72]	; (428 <uart245_init+0xa8>)
     3e0:	768a      	strb	r2, [r1, #26]
     3e2:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     3e4:	2301      	movs	r3, #1
     3e6:	425b      	negs	r3, r3
     3e8:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     3ea:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.generator_source = UART245_CLK;
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    
    while (usart_init(&uart245_inst, UART245, &config_usart) != STATUS_OK);
     3ec:	4d0f      	ldr	r5, [pc, #60]	; (42c <uart245_init+0xac>)
     3ee:	466a      	mov	r2, sp
     3f0:	490f      	ldr	r1, [pc, #60]	; (430 <uart245_init+0xb0>)
     3f2:	0028      	movs	r0, r5
     3f4:	4b0f      	ldr	r3, [pc, #60]	; (434 <uart245_init+0xb4>)
     3f6:	4798      	blx	r3
     3f8:	2800      	cmp	r0, #0
     3fa:	d1f7      	bne.n	3ec <uart245_init+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     3fc:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     3fe:	4b0e      	ldr	r3, [pc, #56]	; (438 <uart245_init+0xb8>)
     400:	0020      	movs	r0, r4
     402:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     404:	231f      	movs	r3, #31
     406:	4018      	ands	r0, r3
     408:	3b1e      	subs	r3, #30
     40a:	4083      	lsls	r3, r0
     40c:	4a0b      	ldr	r2, [pc, #44]	; (43c <uart245_init+0xbc>)
     40e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     410:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     412:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     414:	2b00      	cmp	r3, #0
     416:	d1fc      	bne.n	412 <uart245_init+0x92>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     418:	6822      	ldr	r2, [r4, #0]
     41a:	3302      	adds	r3, #2
     41c:	4313      	orrs	r3, r2
     41e:	6023      	str	r3, [r4, #0]
    
    usart_enable(&uart245_inst);
}
     420:	b011      	add	sp, #68	; 0x44
     422:	bd30      	pop	{r4, r5, pc}
     424:	00080002 	.word	0x00080002
     428:	00090002 	.word	0x00090002
     42c:	2000003c 	.word	0x2000003c
     430:	42000800 	.word	0x42000800
     434:	000009dd 	.word	0x000009dd
     438:	000017c5 	.word	0x000017c5
     43c:	e000e100 	.word	0xe000e100

00000440 <uart915_read_callback>:
 *  character into a ring buffer and parses the character to find out if the 
 *  character is a part of a "OK\r\n" response from the MTXDOT module. Starts
 *  another UART buffer job (setting up an asynchronous read). 
 */
static void uart915_read_callback(struct usart_module *const usart_module)
{
     440:	b570      	push	{r4, r5, r6, lr}
    // put the received byte into the ring buffer
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     442:	4c16      	ldr	r4, [pc, #88]	; (49c <uart915_read_callback+0x5c>)
     444:	4b16      	ldr	r3, [pc, #88]	; (4a0 <uart915_read_callback+0x60>)
     446:	7821      	ldrb	r1, [r4, #0]
{
     448:	0005      	movs	r5, r0
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     44a:	4816      	ldr	r0, [pc, #88]	; (4a4 <uart915_read_callback+0x64>)
     44c:	4798      	blx	r3
 *  Anything else resets the state machine back to its starting state.
 *  Returns true if an "OK\r\n" sequence was found, else false.
 */
static bool uart915_parse_response(uint8_t next_char)
{
    switch(rx_state)
     44e:	4a16      	ldr	r2, [pc, #88]	; (4a8 <uart915_read_callback+0x68>)
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     450:	7821      	ldrb	r1, [r4, #0]
    switch(rx_state)
     452:	7810      	ldrb	r0, [r2, #0]
                break; //end of default case
        }
        break; //end of CR_RX case
        
        default:
            rx_state = START;
     454:	2300      	movs	r3, #0
    switch(rx_state)
     456:	b2c0      	uxtb	r0, r0
     458:	2803      	cmp	r0, #3
     45a:	d81d      	bhi.n	498 <uart915_read_callback+0x58>
     45c:	f001 fdd4 	bl	2008 <__gnu_thumb1_case_uqi>
     460:	100c0802 	.word	0x100c0802
            switch(next_char)
     464:	294f      	cmp	r1, #79	; 0x4f
     466:	d100      	bne.n	46a <uart915_read_callback+0x2a>
                   rx_state = O_RX;
     468:	2301      	movs	r3, #1
                    rx_state = K_RX;
     46a:	7013      	strb	r3, [r2, #0]
            break;
    }
    
    return false;
     46c:	2300      	movs	r3, #0
     46e:	e00b      	b.n	488 <uart915_read_callback+0x48>
            switch(next_char)
     470:	294b      	cmp	r1, #75	; 0x4b
     472:	d1fa      	bne.n	46a <uart915_read_callback+0x2a>
                    rx_state = K_RX;
     474:	2302      	movs	r3, #2
     476:	e7f8      	b.n	46a <uart915_read_callback+0x2a>
            switch(next_char)
     478:	290d      	cmp	r1, #13
     47a:	d1f6      	bne.n	46a <uart915_read_callback+0x2a>
                    rx_state = CR_RX;
     47c:	2303      	movs	r3, #3
     47e:	e7f4      	b.n	46a <uart915_read_callback+0x2a>
                rx_state = START;
     480:	7013      	strb	r3, [r2, #0]
                return true;
     482:	2301      	movs	r3, #1
        switch(next_char)
     484:	290a      	cmp	r1, #10
     486:	d1f1      	bne.n	46c <uart915_read_callback+0x2c>
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     488:	4a08      	ldr	r2, [pc, #32]	; (4ac <uart915_read_callback+0x6c>)
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     48a:	0028      	movs	r0, r5
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     48c:	7013      	strb	r3, [r2, #0]
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     48e:	0021      	movs	r1, r4
     490:	2201      	movs	r2, #1
     492:	4b07      	ldr	r3, [pc, #28]	; (4b0 <uart915_read_callback+0x70>)
     494:	4798      	blx	r3
}
     496:	bd70      	pop	{r4, r5, r6, pc}
            rx_state = START;
     498:	7013      	strb	r3, [r2, #0]
     49a:	e7f5      	b.n	488 <uart915_read_callback+0x48>
     49c:	20000128 	.word	0x20000128
     4a0:	00000349 	.word	0x00000349
     4a4:	20000000 	.word	0x20000000
     4a8:	20000071 	.word	0x20000071
     4ac:	20000070 	.word	0x20000070
     4b0:	00000dc1 	.word	0x00000dc1

000004b4 <configure_uart915_callbacks>:
{
     4b4:	b510      	push	{r4, lr}
    usart_register_callback(&uart915_inst, uart915_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     4b6:	4c09      	ldr	r4, [pc, #36]	; (4dc <configure_uart915_callbacks+0x28>)
     4b8:	2201      	movs	r2, #1
     4ba:	0020      	movs	r0, r4
     4bc:	4908      	ldr	r1, [pc, #32]	; (4e0 <configure_uart915_callbacks+0x2c>)
     4be:	4b09      	ldr	r3, [pc, #36]	; (4e4 <configure_uart915_callbacks+0x30>)
     4c0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     4c2:	0022      	movs	r2, r4
     4c4:	2302      	movs	r3, #2
     4c6:	3231      	adds	r2, #49	; 0x31
     4c8:	7811      	ldrb	r1, [r2, #0]
    usart_read_buffer_job(&uart915_inst, &uart915_rx_read, 1);
     4ca:	0020      	movs	r0, r4
     4cc:	430b      	orrs	r3, r1
     4ce:	7013      	strb	r3, [r2, #0]
     4d0:	4905      	ldr	r1, [pc, #20]	; (4e8 <configure_uart915_callbacks+0x34>)
     4d2:	2201      	movs	r2, #1
     4d4:	4b05      	ldr	r3, [pc, #20]	; (4ec <configure_uart915_callbacks+0x38>)
     4d6:	4798      	blx	r3
}
     4d8:	bd10      	pop	{r4, pc}
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	20000074 	.word	0x20000074
     4e0:	00000441 	.word	0x00000441
     4e4:	00000da9 	.word	0x00000da9
     4e8:	20000128 	.word	0x20000128
     4ec:	00000dc1 	.word	0x00000dc1

000004f0 <uart915_write_cmd>:
 * Return Values(s) : void
 * Description      : Sends a string to the MTXDOT and waits for an 
 *  "OK\r\n" response.
 */
void uart915_write_cmd(const char* cmd_str)
{
     4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // clear the flag
    flag_ok_received = false;
     4f2:	2300      	movs	r3, #0
{
     4f4:	0004      	movs	r4, r0
    flag_ok_received = false;
     4f6:	4a0f      	ldr	r2, [pc, #60]	; (534 <uart915_write_cmd+0x44>)
    
    // reset state machine for determining okay_received
    rx_state = START;
    
    // clear the ring buffer
    ringbuff_clear(&uart915_ringbuff);
     4f8:	480f      	ldr	r0, [pc, #60]	; (538 <uart915_write_cmd+0x48>)
    flag_ok_received = false;
     4fa:	7013      	strb	r3, [r2, #0]
    rx_state = START;
     4fc:	4a0f      	ldr	r2, [pc, #60]	; (53c <uart915_write_cmd+0x4c>)
     4fe:	7013      	strb	r3, [r2, #0]
    ringbuff_clear(&uart915_ringbuff);
     500:	4b0f      	ldr	r3, [pc, #60]	; (540 <uart915_write_cmd+0x50>)
     502:	4798      	blx	r3
    
    // write the AT command
    usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     504:	0020      	movs	r0, r4
     506:	4d0f      	ldr	r5, [pc, #60]	; (544 <uart915_write_cmd+0x54>)
     508:	47a8      	blx	r5
     50a:	4e0f      	ldr	r6, [pc, #60]	; (548 <uart915_write_cmd+0x58>)
     50c:	b282      	uxth	r2, r0
     50e:	0021      	movs	r1, r4
     510:	0030      	movs	r0, r6
     512:	4f0e      	ldr	r7, [pc, #56]	; (54c <uart915_write_cmd+0x5c>)
     514:	47b8      	blx	r7
    
    while(!flag_ok_received){
     516:	4b07      	ldr	r3, [pc, #28]	; (534 <uart915_write_cmd+0x44>)
     518:	781b      	ldrb	r3, [r3, #0]
     51a:	2b00      	cmp	r3, #0
     51c:	d000      	beq.n	520 <uart915_write_cmd+0x30>
		usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
		delay_ms(10);
		};
}
     51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     520:	0020      	movs	r0, r4
     522:	47a8      	blx	r5
     524:	0021      	movs	r1, r4
     526:	b282      	uxth	r2, r0
     528:	0030      	movs	r0, r6
     52a:	47b8      	blx	r7
		delay_ms(10);
     52c:	200a      	movs	r0, #10
     52e:	4b08      	ldr	r3, [pc, #32]	; (550 <uart915_write_cmd+0x60>)
     530:	4798      	blx	r3
     532:	e7f0      	b.n	516 <uart915_write_cmd+0x26>
     534:	20000070 	.word	0x20000070
     538:	20000000 	.word	0x20000000
     53c:	20000071 	.word	0x20000071
     540:	00000339 	.word	0x00000339
     544:	000021f9 	.word	0x000021f9
     548:	20000074 	.word	0x20000074
     54c:	00000cd1 	.word	0x00000cd1
     550:	00000689 	.word	0x00000689

00000554 <uart915_preconnect>:
    
    // convert the number at the current spot in the string to an int
    return atoi((char*) &rspns_buff[i]);
}

uart915_preconnect(void){
     554:	b570      	push	{r4, r5, r6, lr}
     556:	240a      	movs	r4, #10
    
    /* send 10 "AT" and "AT+SEND" commands to validate conenction
     * between the receiver and transmitter */
    for(; i < 10; i++)
    {
        uart915_write_cmd("AT\r\n");
     558:	4804      	ldr	r0, [pc, #16]	; (56c <uart915_preconnect+0x18>)
     55a:	4d05      	ldr	r5, [pc, #20]	; (570 <uart915_preconnect+0x1c>)
     55c:	47a8      	blx	r5
     55e:	3c01      	subs	r4, #1
        uart915_write_cmd("AT+SEND\r\n");  
     560:	4804      	ldr	r0, [pc, #16]	; (574 <uart915_preconnect+0x20>)
     562:	47a8      	blx	r5
    for(; i < 10; i++)
     564:	2c00      	cmp	r4, #0
     566:	d1f7      	bne.n	558 <uart915_preconnect+0x4>
    }
     568:	bd70      	pop	{r4, r5, r6, pc}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	00002206 	.word	0x00002206
     570:	000004f1 	.word	0x000004f1
     574:	000022b1 	.word	0x000022b1

00000578 <uart915_init>:
{
     578:	b530      	push	{r4, r5, lr}
	config->data_order       = USART_DATAORDER_LSB;
     57a:	2380      	movs	r3, #128	; 0x80
     57c:	b091      	sub	sp, #68	; 0x44
	config->parity           = USART_PARITY_NONE;
     57e:	4669      	mov	r1, sp
     580:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
     582:	05db      	lsls	r3, r3, #23
     584:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     586:	2300      	movs	r3, #0
	config->parity           = USART_PARITY_NONE;
     588:	810a      	strh	r2, [r1, #8]
	config->receiver_enable  = true;
     58a:	2201      	movs	r2, #1
	config->stopbits         = USART_STOPBITS_1;
     58c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     58e:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
     590:	3105      	adds	r1, #5
     592:	77ca      	strb	r2, [r1, #31]
	config->transmitter_enable = true;
     594:	4669      	mov	r1, sp
     596:	3106      	adds	r1, #6
     598:	77ca      	strb	r2, [r1, #31]
	config->clock_polarity_inverted = false;
     59a:	466a      	mov	r2, sp
     59c:	3207      	adds	r2, #7
     59e:	77d3      	strb	r3, [r2, #31]
	config->use_external_clock = false;
     5a0:	aa02      	add	r2, sp, #8
     5a2:	77d3      	strb	r3, [r2, #31]
	config->run_in_standby   = false;
     5a4:	aa0b      	add	r2, sp, #44	; 0x2c
     5a6:	7013      	strb	r3, [r2, #0]
	config->generator_source = GCLK_GENERATOR_0;
     5a8:	222d      	movs	r2, #45	; 0x2d
     5aa:	446a      	add	r2, sp
     5ac:	7013      	strb	r3, [r2, #0]
	config->receive_pulse_length                    = 19;
     5ae:	4669      	mov	r1, sp
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     5b0:	466a      	mov	r2, sp
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     5b2:	9301      	str	r3, [sp, #4]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     5b4:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
     5b6:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
     5b8:	7613      	strb	r3, [r2, #24]
	config->start_frame_detection_enable            = false;
     5ba:	7713      	strb	r3, [r2, #28]
	config->encoding_format_enable                  = false;
     5bc:	7653      	strb	r3, [r2, #25]
	config->ext_clock_freq   = 0;
     5be:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     5c0:	9305      	str	r3, [sp, #20]
	config->collision_detection_enable              = false;
     5c2:	774b      	strb	r3, [r1, #29]
    config_usart.baudrate    = UART915_BAUD;
     5c4:	23e1      	movs	r3, #225	; 0xe1
     5c6:	025b      	lsls	r3, r3, #9
     5c8:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART915_PINMUX;
     5ca:	2390      	movs	r3, #144	; 0x90
     5cc:	035b      	lsls	r3, r3, #13
     5ce:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX915;
     5d0:	4b14      	ldr	r3, [pc, #80]	; (624 <uart915_init+0xac>)
	config->receive_pulse_length                    = 19;
     5d2:	2213      	movs	r2, #19
     5d4:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX915;
     5d6:	4b14      	ldr	r3, [pc, #80]	; (628 <uart915_init+0xb0>)
     5d8:	768a      	strb	r2, [r1, #26]
     5da:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     5dc:	2301      	movs	r3, #1
     5de:	425b      	negs	r3, r3
     5e0:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     5e2:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uart915_inst, UART915, &config_usart) != STATUS_OK);
     5e4:	4d11      	ldr	r5, [pc, #68]	; (62c <uart915_init+0xb4>)
     5e6:	466a      	mov	r2, sp
     5e8:	4911      	ldr	r1, [pc, #68]	; (630 <uart915_init+0xb8>)
     5ea:	0028      	movs	r0, r5
     5ec:	4b11      	ldr	r3, [pc, #68]	; (634 <uart915_init+0xbc>)
     5ee:	4798      	blx	r3
     5f0:	2800      	cmp	r0, #0
     5f2:	d1f7      	bne.n	5e4 <uart915_init+0x6c>
	SercomUsart *const usart_hw = &(module->hw->USART);
     5f4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     5f6:	4b10      	ldr	r3, [pc, #64]	; (638 <uart915_init+0xc0>)
     5f8:	0020      	movs	r0, r4
     5fa:	4798      	blx	r3
     5fc:	231f      	movs	r3, #31
     5fe:	4018      	ands	r0, r3
     600:	3b1e      	subs	r3, #30
     602:	4083      	lsls	r3, r0
     604:	4a0d      	ldr	r2, [pc, #52]	; (63c <uart915_init+0xc4>)
     606:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     608:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     60a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     60c:	2b00      	cmp	r3, #0
     60e:	d1fc      	bne.n	60a <uart915_init+0x92>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     610:	6822      	ldr	r2, [r4, #0]
     612:	3302      	adds	r3, #2
     614:	4313      	orrs	r3, r2
     616:	6023      	str	r3, [r4, #0]
    configure_uart915_callbacks();
     618:	4b09      	ldr	r3, [pc, #36]	; (640 <uart915_init+0xc8>)
     61a:	4798      	blx	r3
	uart915_preconnect();
     61c:	4b09      	ldr	r3, [pc, #36]	; (644 <uart915_init+0xcc>)
     61e:	4798      	blx	r3
}
     620:	b011      	add	sp, #68	; 0x44
     622:	bd30      	pop	{r4, r5, pc}
     624:	000c0002 	.word	0x000c0002
     628:	000d0002 	.word	0x000d0002
     62c:	20000074 	.word	0x20000074
     630:	42001000 	.word	0x42001000
     634:	000009dd 	.word	0x000009dd
     638:	000017c5 	.word	0x000017c5
     63c:	e000e100 	.word	0xe000e100
     640:	000004b5 	.word	0x000004b5
     644:	00000555 	.word	0x00000555

00000648 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     648:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     64a:	4b09      	ldr	r3, [pc, #36]	; (670 <delay_init+0x28>)
     64c:	2000      	movs	r0, #0
     64e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     650:	21fa      	movs	r1, #250	; 0xfa
     652:	4c08      	ldr	r4, [pc, #32]	; (674 <delay_init+0x2c>)
     654:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
     656:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     658:	47a0      	blx	r4
     65a:	4b07      	ldr	r3, [pc, #28]	; (678 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
     65c:	4907      	ldr	r1, [pc, #28]	; (67c <delay_init+0x34>)
	cycles_per_ms /= 1000;
     65e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     660:	0028      	movs	r0, r5
     662:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     664:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
     666:	4b06      	ldr	r3, [pc, #24]	; (680 <delay_init+0x38>)
     668:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     66a:	4b06      	ldr	r3, [pc, #24]	; (684 <delay_init+0x3c>)
     66c:	601a      	str	r2, [r3, #0]
}
     66e:	bd70      	pop	{r4, r5, r6, pc}
     670:	00001bc1 	.word	0x00001bc1
     674:	0000201d 	.word	0x0000201d
     678:	20000010 	.word	0x20000010
     67c:	000f4240 	.word	0x000f4240
     680:	20000014 	.word	0x20000014
     684:	e000e010 	.word	0xe000e010

00000688 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     688:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     68a:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
     68c:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     68e:	4b07      	ldr	r3, [pc, #28]	; (6ac <delay_cycles_ms+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     690:	0264      	lsls	r4, r4, #9
     692:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
     694:	4b06      	ldr	r3, [pc, #24]	; (6b0 <delay_cycles_ms+0x28>)
	while (n--) {
     696:	3801      	subs	r0, #1
     698:	d200      	bcs.n	69c <delay_cycles_ms+0x14>
	}
}
     69a:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
     69c:	2a00      	cmp	r2, #0
     69e:	d0fa      	beq.n	696 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     6a0:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     6a2:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     6a4:	681d      	ldr	r5, [r3, #0]
     6a6:	4225      	tst	r5, r4
     6a8:	d0fc      	beq.n	6a4 <delay_cycles_ms+0x1c>
     6aa:	e7f4      	b.n	696 <delay_cycles_ms+0xe>
     6ac:	20000010 	.word	0x20000010
     6b0:	e000e010 	.word	0xe000e010

000006b4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     6b4:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6b6:	2280      	movs	r2, #128	; 0x80
     6b8:	ab01      	add	r3, sp, #4
     6ba:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     6bc:	780a      	ldrb	r2, [r1, #0]
     6be:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     6c0:	784a      	ldrb	r2, [r1, #1]
     6c2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     6c4:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     6c6:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     6c8:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     6ca:	4b01      	ldr	r3, [pc, #4]	; (6d0 <port_pin_set_config+0x1c>)
     6cc:	4798      	blx	r3
}
     6ce:	bd07      	pop	{r0, r1, r2, pc}
     6d0:	00001da5 	.word	0x00001da5

000006d4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6d6:	2400      	movs	r4, #0
{
     6d8:	b089      	sub	sp, #36	; 0x24
     6da:	9200      	str	r2, [sp, #0]
     6dc:	9301      	str	r3, [sp, #4]
	for (i = 63; i >= 0; i--) {
     6de:	233f      	movs	r3, #63	; 0x3f
	uint64_t q = 0, r = 0, bit_shift;
     6e0:	2600      	movs	r6, #0
     6e2:	2700      	movs	r7, #0
     6e4:	0025      	movs	r5, r4
{
     6e6:	9006      	str	r0, [sp, #24]
     6e8:	9107      	str	r1, [sp, #28]
	for (i = 63; i >= 0; i--) {
     6ea:	9303      	str	r3, [sp, #12]
		bit_shift = (uint64_t)1 << i;
     6ec:	9a03      	ldr	r2, [sp, #12]
     6ee:	4b13      	ldr	r3, [pc, #76]	; (73c <long_division+0x68>)
     6f0:	2001      	movs	r0, #1
     6f2:	2100      	movs	r1, #0
     6f4:	4798      	blx	r3

		r = r << 1;
     6f6:	19b6      	adds	r6, r6, r6
     6f8:	417f      	adcs	r7, r7

		if (n & bit_shift) {
     6fa:	9b06      	ldr	r3, [sp, #24]
     6fc:	9a07      	ldr	r2, [sp, #28]
     6fe:	4003      	ands	r3, r0
     700:	400a      	ands	r2, r1
		r = r << 1;
     702:	9604      	str	r6, [sp, #16]
     704:	9705      	str	r7, [sp, #20]
		if (n & bit_shift) {
     706:	4313      	orrs	r3, r2
     708:	d003      	beq.n	712 <long_division+0x3e>
			r |= 0x01;
     70a:	2301      	movs	r3, #1
     70c:	4333      	orrs	r3, r6
     70e:	001e      	movs	r6, r3
     710:	9f05      	ldr	r7, [sp, #20]
		}

		if (r >= d) {
     712:	9b01      	ldr	r3, [sp, #4]
     714:	42bb      	cmp	r3, r7
     716:	d809      	bhi.n	72c <long_division+0x58>
     718:	d102      	bne.n	720 <long_division+0x4c>
     71a:	9b00      	ldr	r3, [sp, #0]
     71c:	42b3      	cmp	r3, r6
     71e:	d805      	bhi.n	72c <long_division+0x58>
			r = r - d;
     720:	9a00      	ldr	r2, [sp, #0]
     722:	9b01      	ldr	r3, [sp, #4]
     724:	1ab6      	subs	r6, r6, r2
     726:	419f      	sbcs	r7, r3
			q |= bit_shift;
     728:	4304      	orrs	r4, r0
     72a:	430d      	orrs	r5, r1
	for (i = 63; i >= 0; i--) {
     72c:	9b03      	ldr	r3, [sp, #12]
     72e:	1e5a      	subs	r2, r3, #1
     730:	9203      	str	r2, [sp, #12]
     732:	d2db      	bcs.n	6ec <long_division+0x18>
		}
	}

	return q;
}
     734:	0020      	movs	r0, r4
     736:	0029      	movs	r1, r5
     738:	b009      	add	sp, #36	; 0x24
     73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73c:	00002135 	.word	0x00002135

00000740 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     740:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     742:	0849      	lsrs	r1, r1, #1
{
     744:	0004      	movs	r4, r0
     746:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     748:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
     74a:	42a1      	cmp	r1, r4
     74c:	d201      	bcs.n	752 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     74e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     750:	0003      	movs	r3, r0
     752:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
     754:	1b09      	subs	r1, r1, r4
		baud_calculated++;
     756:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
     758:	428c      	cmp	r4, r1
     75a:	d9f9      	bls.n	750 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     75c:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
     75e:	2bff      	cmp	r3, #255	; 0xff
     760:	d8f5      	bhi.n	74e <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
     762:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     764:	2000      	movs	r0, #0
     766:	e7f2      	b.n	74e <_sercom_get_sync_baud_val+0xe>

00000768 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     768:	b5f0      	push	{r4, r5, r6, r7, lr}
     76a:	b085      	sub	sp, #20
     76c:	001e      	movs	r6, r3
     76e:	ab0a      	add	r3, sp, #40	; 0x28
     770:	000d      	movs	r5, r1
     772:	7819      	ldrb	r1, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     774:	0003      	movs	r3, r0
     776:	434b      	muls	r3, r1
{
     778:	9203      	str	r2, [sp, #12]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     77a:	2740      	movs	r7, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     77c:	42ab      	cmp	r3, r5
     77e:	d817      	bhi.n	7b0 <_sercom_get_async_baud_val+0x48>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     780:	2e00      	cmp	r6, #0
     782:	d118      	bne.n	7b6 <_sercom_get_async_baud_val+0x4e>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     784:	0002      	movs	r2, r0
     786:	0033      	movs	r3, r6
     788:	0008      	movs	r0, r1
     78a:	4c1b      	ldr	r4, [pc, #108]	; (7f8 <_sercom_get_async_baud_val+0x90>)
     78c:	0031      	movs	r1, r6
     78e:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
     790:	002a      	movs	r2, r5
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     792:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     794:	0033      	movs	r3, r6
     796:	4c19      	ldr	r4, [pc, #100]	; (7fc <_sercom_get_async_baud_val+0x94>)
     798:	0030      	movs	r0, r6
     79a:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     79c:	2200      	movs	r2, #0
     79e:	2301      	movs	r3, #1
     7a0:	1a12      	subs	r2, r2, r0
     7a2:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7a4:	0c14      	lsrs	r4, r2, #16
     7a6:	0418      	lsls	r0, r3, #16
     7a8:	4304      	orrs	r4, r0
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
     7aa:	2700      	movs	r7, #0
	*baudval = baud_calculated;
     7ac:	9b03      	ldr	r3, [sp, #12]
     7ae:	801c      	strh	r4, [r3, #0]
}
     7b0:	0038      	movs	r0, r7
     7b2:	b005      	add	sp, #20
     7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint64_t baud_calculated = 0;
     7b6:	2400      	movs	r4, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     7b8:	2e01      	cmp	r6, #1
     7ba:	d1f6      	bne.n	7aa <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     7bc:	000a      	movs	r2, r1
     7be:	0023      	movs	r3, r4
     7c0:	0021      	movs	r1, r4
     7c2:	4e0d      	ldr	r6, [pc, #52]	; (7f8 <_sercom_get_async_baud_val+0x90>)
     7c4:	47b0      	blx	r6
     7c6:	9000      	str	r0, [sp, #0]
     7c8:	9101      	str	r1, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     7ca:	000b      	movs	r3, r1
     7cc:	0002      	movs	r2, r0
     7ce:	0021      	movs	r1, r4
     7d0:	0028      	movs	r0, r5
     7d2:	4c0a      	ldr	r4, [pc, #40]	; (7fc <_sercom_get_async_baud_val+0x94>)
     7d4:	47a0      	blx	r4
		if(baud_int > BAUD_INT_MAX) {
     7d6:	2380      	movs	r3, #128	; 0x80
		baud_int = long_division( peripheral_clock, temp1);
     7d8:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     7da:	019b      	lsls	r3, r3, #6
     7dc:	4298      	cmp	r0, r3
     7de:	d8e7      	bhi.n	7b0 <_sercom_get_async_baud_val+0x48>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     7e0:	9a00      	ldr	r2, [sp, #0]
     7e2:	9b01      	ldr	r3, [sp, #4]
     7e4:	0f69      	lsrs	r1, r5, #29
     7e6:	00e8      	lsls	r0, r5, #3
     7e8:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     7ea:	00f4      	lsls	r4, r6, #3
     7ec:	1b04      	subs	r4, r0, r4
		baud_calculated = baud_int | (baud_fp << 13);
     7ee:	b2e4      	uxtb	r4, r4
     7f0:	0364      	lsls	r4, r4, #13
     7f2:	4334      	orrs	r4, r6
     7f4:	e7d9      	b.n	7aa <_sercom_get_async_baud_val+0x42>
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	0000214d 	.word	0x0000214d
     7fc:	000006d5 	.word	0x000006d5

00000800 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     800:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     802:	4c0d      	ldr	r4, [pc, #52]	; (838 <sercom_set_gclk_generator+0x38>)
{
     804:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     806:	7823      	ldrb	r3, [r4, #0]
     808:	2b00      	cmp	r3, #0
     80a:	d001      	beq.n	810 <sercom_set_gclk_generator+0x10>
     80c:	2900      	cmp	r1, #0
     80e:	d00c      	beq.n	82a <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     810:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     812:	2013      	movs	r0, #19
     814:	4b09      	ldr	r3, [pc, #36]	; (83c <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     816:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     818:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     81a:	2013      	movs	r0, #19
     81c:	4b08      	ldr	r3, [pc, #32]	; (840 <sercom_set_gclk_generator+0x40>)
     81e:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     820:	2301      	movs	r3, #1

		return STATUS_OK;
     822:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     824:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     826:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     828:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     82a:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     82c:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     82e:	42ab      	cmp	r3, r5
     830:	d0fa      	beq.n	828 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     832:	201d      	movs	r0, #29
     834:	e7f8      	b.n	828 <sercom_set_gclk_generator+0x28>
     836:	46c0      	nop			; (mov r8, r8)
     838:	20000129 	.word	0x20000129
     83c:	00001cd1 	.word	0x00001cd1
     840:	00001c49 	.word	0x00001c49

00000844 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     844:	4a39      	ldr	r2, [pc, #228]	; (92c <_sercom_get_default_pad+0xe8>)
{
     846:	0003      	movs	r3, r0
     848:	b500      	push	{lr}
     84a:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     84c:	4293      	cmp	r3, r2
     84e:	d033      	beq.n	8b8 <_sercom_get_default_pad+0x74>
     850:	d807      	bhi.n	862 <_sercom_get_default_pad+0x1e>
     852:	4a37      	ldr	r2, [pc, #220]	; (930 <_sercom_get_default_pad+0xec>)
     854:	4293      	cmp	r3, r2
     856:	d014      	beq.n	882 <_sercom_get_default_pad+0x3e>
     858:	4a36      	ldr	r2, [pc, #216]	; (934 <_sercom_get_default_pad+0xf0>)
     85a:	4293      	cmp	r3, r2
     85c:	d01f      	beq.n	89e <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     85e:	2300      	movs	r3, #0
     860:	e017      	b.n	892 <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
     862:	4a35      	ldr	r2, [pc, #212]	; (938 <_sercom_get_default_pad+0xf4>)
     864:	4293      	cmp	r3, r2
     866:	d03a      	beq.n	8de <_sercom_get_default_pad+0x9a>
     868:	4a34      	ldr	r2, [pc, #208]	; (93c <_sercom_get_default_pad+0xf8>)
     86a:	4293      	cmp	r3, r2
     86c:	d044      	beq.n	8f8 <_sercom_get_default_pad+0xb4>
     86e:	4a34      	ldr	r2, [pc, #208]	; (940 <_sercom_get_default_pad+0xfc>)
     870:	4293      	cmp	r3, r2
     872:	d1f4      	bne.n	85e <_sercom_get_default_pad+0x1a>
	return 0;
     874:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     876:	2903      	cmp	r1, #3
     878:	d80b      	bhi.n	892 <_sercom_get_default_pad+0x4e>
     87a:	f001 fbc5 	bl	2008 <__gnu_thumb1_case_uqi>
     87e:	2a50      	.short	0x2a50
     880:	2e2c      	.short	0x2e2c
	return 0;
     882:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     884:	2903      	cmp	r1, #3
     886:	d804      	bhi.n	892 <_sercom_get_default_pad+0x4e>
     888:	f001 fbbe 	bl	2008 <__gnu_thumb1_case_uqi>
     88c:	07050243 	.word	0x07050243
     890:	4b2c      	ldr	r3, [pc, #176]	; (944 <_sercom_get_default_pad+0x100>)
}
     892:	0018      	movs	r0, r3
     894:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     896:	4b2c      	ldr	r3, [pc, #176]	; (948 <_sercom_get_default_pad+0x104>)
     898:	e7fb      	b.n	892 <_sercom_get_default_pad+0x4e>
     89a:	4b2c      	ldr	r3, [pc, #176]	; (94c <_sercom_get_default_pad+0x108>)
     89c:	e7f9      	b.n	892 <_sercom_get_default_pad+0x4e>
	return 0;
     89e:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8a0:	2903      	cmp	r1, #3
     8a2:	d8f6      	bhi.n	892 <_sercom_get_default_pad+0x4e>
     8a4:	f001 fbb0 	bl	2008 <__gnu_thumb1_case_uqi>
     8a8:	06040237 	.word	0x06040237
     8ac:	4b28      	ldr	r3, [pc, #160]	; (950 <_sercom_get_default_pad+0x10c>)
     8ae:	e7f0      	b.n	892 <_sercom_get_default_pad+0x4e>
     8b0:	4b28      	ldr	r3, [pc, #160]	; (954 <_sercom_get_default_pad+0x110>)
     8b2:	e7ee      	b.n	892 <_sercom_get_default_pad+0x4e>
     8b4:	4b28      	ldr	r3, [pc, #160]	; (958 <_sercom_get_default_pad+0x114>)
     8b6:	e7ec      	b.n	892 <_sercom_get_default_pad+0x4e>
	return 0;
     8b8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8ba:	2903      	cmp	r1, #3
     8bc:	d8e9      	bhi.n	892 <_sercom_get_default_pad+0x4e>
     8be:	f001 fba3 	bl	2008 <__gnu_thumb1_case_uqi>
     8c2:	022c      	.short	0x022c
     8c4:	0604      	.short	0x0604
     8c6:	4b25      	ldr	r3, [pc, #148]	; (95c <_sercom_get_default_pad+0x118>)
     8c8:	e7e3      	b.n	892 <_sercom_get_default_pad+0x4e>
     8ca:	4b25      	ldr	r3, [pc, #148]	; (960 <_sercom_get_default_pad+0x11c>)
     8cc:	e7e1      	b.n	892 <_sercom_get_default_pad+0x4e>
     8ce:	4b25      	ldr	r3, [pc, #148]	; (964 <_sercom_get_default_pad+0x120>)
     8d0:	e7df      	b.n	892 <_sercom_get_default_pad+0x4e>
     8d2:	4b25      	ldr	r3, [pc, #148]	; (968 <_sercom_get_default_pad+0x124>)
     8d4:	e7dd      	b.n	892 <_sercom_get_default_pad+0x4e>
     8d6:	4b25      	ldr	r3, [pc, #148]	; (96c <_sercom_get_default_pad+0x128>)
     8d8:	e7db      	b.n	892 <_sercom_get_default_pad+0x4e>
     8da:	4b25      	ldr	r3, [pc, #148]	; (970 <_sercom_get_default_pad+0x12c>)
     8dc:	e7d9      	b.n	892 <_sercom_get_default_pad+0x4e>
	return 0;
     8de:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e0:	2903      	cmp	r1, #3
     8e2:	d8d6      	bhi.n	892 <_sercom_get_default_pad+0x4e>
     8e4:	f001 fb90 	bl	2008 <__gnu_thumb1_case_uqi>
     8e8:	0604021d 	.word	0x0604021d
     8ec:	4b21      	ldr	r3, [pc, #132]	; (974 <_sercom_get_default_pad+0x130>)
     8ee:	e7d0      	b.n	892 <_sercom_get_default_pad+0x4e>
     8f0:	4b21      	ldr	r3, [pc, #132]	; (978 <_sercom_get_default_pad+0x134>)
     8f2:	e7ce      	b.n	892 <_sercom_get_default_pad+0x4e>
     8f4:	4b21      	ldr	r3, [pc, #132]	; (97c <_sercom_get_default_pad+0x138>)
     8f6:	e7cc      	b.n	892 <_sercom_get_default_pad+0x4e>
	return 0;
     8f8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fa:	2903      	cmp	r1, #3
     8fc:	d8c9      	bhi.n	892 <_sercom_get_default_pad+0x4e>
     8fe:	f001 fb83 	bl	2008 <__gnu_thumb1_case_uqi>
     902:	0212      	.short	0x0212
     904:	0604      	.short	0x0604
     906:	4b1e      	ldr	r3, [pc, #120]	; (980 <_sercom_get_default_pad+0x13c>)
     908:	e7c3      	b.n	892 <_sercom_get_default_pad+0x4e>
     90a:	4b1e      	ldr	r3, [pc, #120]	; (984 <_sercom_get_default_pad+0x140>)
     90c:	e7c1      	b.n	892 <_sercom_get_default_pad+0x4e>
     90e:	4b1e      	ldr	r3, [pc, #120]	; (988 <_sercom_get_default_pad+0x144>)
     910:	e7bf      	b.n	892 <_sercom_get_default_pad+0x4e>
     912:	4b1e      	ldr	r3, [pc, #120]	; (98c <_sercom_get_default_pad+0x148>)
     914:	e7bd      	b.n	892 <_sercom_get_default_pad+0x4e>
     916:	2303      	movs	r3, #3
     918:	e7bb      	b.n	892 <_sercom_get_default_pad+0x4e>
     91a:	4b1d      	ldr	r3, [pc, #116]	; (990 <_sercom_get_default_pad+0x14c>)
     91c:	e7b9      	b.n	892 <_sercom_get_default_pad+0x4e>
     91e:	4b1d      	ldr	r3, [pc, #116]	; (994 <_sercom_get_default_pad+0x150>)
     920:	e7b7      	b.n	892 <_sercom_get_default_pad+0x4e>
     922:	4b1d      	ldr	r3, [pc, #116]	; (998 <_sercom_get_default_pad+0x154>)
     924:	e7b5      	b.n	892 <_sercom_get_default_pad+0x4e>
     926:	4b1d      	ldr	r3, [pc, #116]	; (99c <_sercom_get_default_pad+0x158>)
     928:	e7b3      	b.n	892 <_sercom_get_default_pad+0x4e>
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	42001000 	.word	0x42001000
     930:	42000800 	.word	0x42000800
     934:	42000c00 	.word	0x42000c00
     938:	42001800 	.word	0x42001800
     93c:	42001c00 	.word	0x42001c00
     940:	42001400 	.word	0x42001400
     944:	00050003 	.word	0x00050003
     948:	00060003 	.word	0x00060003
     94c:	00070003 	.word	0x00070003
     950:	00010003 	.word	0x00010003
     954:	001e0003 	.word	0x001e0003
     958:	001f0003 	.word	0x001f0003
     95c:	00090003 	.word	0x00090003
     960:	000a0003 	.word	0x000a0003
     964:	000b0003 	.word	0x000b0003
     968:	00110003 	.word	0x00110003
     96c:	00120003 	.word	0x00120003
     970:	00130003 	.word	0x00130003
     974:	000d0003 	.word	0x000d0003
     978:	000e0003 	.word	0x000e0003
     97c:	000f0003 	.word	0x000f0003
     980:	00170003 	.word	0x00170003
     984:	00180003 	.word	0x00180003
     988:	00190003 	.word	0x00190003
     98c:	00040003 	.word	0x00040003
     990:	00080003 	.word	0x00080003
     994:	00100003 	.word	0x00100003
     998:	000c0003 	.word	0x000c0003
     99c:	00160003 	.word	0x00160003

000009a0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     9a0:	b570      	push	{r4, r5, r6, lr}
     9a2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     9a4:	4669      	mov	r1, sp
     9a6:	4b09      	ldr	r3, [pc, #36]	; (9cc <_sercom_get_sercom_inst_index+0x2c>)
     9a8:	466a      	mov	r2, sp
     9aa:	cb70      	ldmia	r3!, {r4, r5, r6}
     9ac:	c170      	stmia	r1!, {r4, r5, r6}
     9ae:	cb70      	ldmia	r3!, {r4, r5, r6}
     9b0:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9b2:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9b4:	0099      	lsls	r1, r3, #2
     9b6:	5851      	ldr	r1, [r2, r1]
     9b8:	4281      	cmp	r1, r0
     9ba:	d102      	bne.n	9c2 <_sercom_get_sercom_inst_index+0x22>
			return i;
     9bc:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     9be:	b006      	add	sp, #24
     9c0:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9c2:	3301      	adds	r3, #1
     9c4:	2b06      	cmp	r3, #6
     9c6:	d1f5      	bne.n	9b4 <_sercom_get_sercom_inst_index+0x14>
	return 0;
     9c8:	2000      	movs	r0, #0
     9ca:	e7f8      	b.n	9be <_sercom_get_sercom_inst_index+0x1e>
     9cc:	000022bc 	.word	0x000022bc

000009d0 <_usart_wait_for_sync>:
	SercomUsart *const usart_hw = &(module->hw->USART);
     9d0:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     9d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9d4:	2b00      	cmp	r3, #0
     9d6:	d1fc      	bne.n	9d2 <_usart_wait_for_sync+0x2>
}
     9d8:	4770      	bx	lr
	...

000009dc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9de:	0007      	movs	r7, r0
     9e0:	b093      	sub	sp, #76	; 0x4c
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9e2:	4ba0      	ldr	r3, [pc, #640]	; (c64 <usart_init+0x288>)
	module->hw = hw;
     9e4:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9e6:	0008      	movs	r0, r1
{
     9e8:	0016      	movs	r6, r2
     9ea:	9104      	str	r1, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9ec:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     9ee:	2201      	movs	r2, #1
     9f0:	9b04      	ldr	r3, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9f2:	0005      	movs	r5, r0
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     9f4:	681b      	ldr	r3, [r3, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     9f6:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     9f8:	4213      	tst	r3, r2
     9fa:	d000      	beq.n	9fe <usart_init+0x22>
     9fc:	e10f      	b.n	c1e <usart_init+0x242>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     9fe:	9b04      	ldr	r3, [sp, #16]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     a00:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a02:	681c      	ldr	r4, [r3, #0]
     a04:	2302      	movs	r3, #2
     a06:	401c      	ands	r4, r3
     a08:	d000      	beq.n	a0c <usart_init+0x30>
     a0a:	e108      	b.n	c1e <usart_init+0x242>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a0c:	18eb      	adds	r3, r5, r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a0e:	381b      	subs	r0, #27
     a10:	4098      	lsls	r0, r3
     a12:	0003      	movs	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a14:	4a94      	ldr	r2, [pc, #592]	; (c68 <usart_init+0x28c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a16:	3514      	adds	r5, #20
     a18:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a1a:	b2ed      	uxtb	r5, r5
     a1c:	430b      	orrs	r3, r1
     a1e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     a20:	0033      	movs	r3, r6
     a22:	332d      	adds	r3, #45	; 0x2d
     a24:	9302      	str	r3, [sp, #8]
     a26:	781b      	ldrb	r3, [r3, #0]
     a28:	a90c      	add	r1, sp, #48	; 0x30
     a2a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a2c:	0028      	movs	r0, r5
     a2e:	4b8f      	ldr	r3, [pc, #572]	; (c6c <usart_init+0x290>)
     a30:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a32:	0028      	movs	r0, r5
     a34:	4b8e      	ldr	r3, [pc, #568]	; (c70 <usart_init+0x294>)
     a36:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     a38:	9b02      	ldr	r3, [sp, #8]
     a3a:	0021      	movs	r1, r4
     a3c:	7818      	ldrb	r0, [r3, #0]
     a3e:	4b8d      	ldr	r3, [pc, #564]	; (c74 <usart_init+0x298>)
     a40:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     a42:	7af3      	ldrb	r3, [r6, #11]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a44:	2508      	movs	r5, #8
	module->character_size = config->character_size;
     a46:	717b      	strb	r3, [r7, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     a48:	1d73      	adds	r3, r6, #5
     a4a:	7fdb      	ldrb	r3, [r3, #31]
     a4c:	71bb      	strb	r3, [r7, #6]
	module->transmitter_enabled = config->transmitter_enable;
     a4e:	1db3      	adds	r3, r6, #6
     a50:	7fdb      	ldrb	r3, [r3, #31]
     a52:	71fb      	strb	r3, [r7, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     a54:	7ef3      	ldrb	r3, [r6, #27]
     a56:	723b      	strb	r3, [r7, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     a58:	7f33      	ldrb	r3, [r6, #28]
     a5a:	727b      	strb	r3, [r7, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a5c:	683b      	ldr	r3, [r7, #0]
     a5e:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a60:	0018      	movs	r0, r3
     a62:	4b80      	ldr	r3, [pc, #512]	; (c64 <usart_init+0x288>)
     a64:	4798      	blx	r3
	uint16_t baud  = 0;
     a66:	ab0e      	add	r3, sp, #56	; 0x38
     a68:	801c      	strh	r4, [r3, #0]
	switch (config->sample_rate) {
     a6a:	8a33      	ldrh	r3, [r6, #16]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a6c:	3014      	adds	r0, #20
	switch (config->sample_rate) {
     a6e:	9302      	str	r3, [sp, #8]
     a70:	2380      	movs	r3, #128	; 0x80
     a72:	9a02      	ldr	r2, [sp, #8]
     a74:	01db      	lsls	r3, r3, #7
     a76:	429a      	cmp	r2, r3
     a78:	d014      	beq.n	aa4 <usart_init+0xc8>
     a7a:	d808      	bhi.n	a8e <usart_init+0xb2>
     a7c:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a7e:	2510      	movs	r5, #16
	switch (config->sample_rate) {
     a80:	019b      	lsls	r3, r3, #6
     a82:	429a      	cmp	r2, r3
     a84:	d100      	bne.n	a88 <usart_init+0xac>
     a86:	e0cd      	b.n	c24 <usart_init+0x248>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a88:	2510      	movs	r5, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a8a:	2400      	movs	r4, #0
     a8c:	e00a      	b.n	aa4 <usart_init+0xc8>
	switch (config->sample_rate) {
     a8e:	23c0      	movs	r3, #192	; 0xc0
     a90:	9a02      	ldr	r2, [sp, #8]
     a92:	01db      	lsls	r3, r3, #7
     a94:	429a      	cmp	r2, r3
     a96:	d100      	bne.n	a9a <usart_init+0xbe>
     a98:	e0c3      	b.n	c22 <usart_init+0x246>
     a9a:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     a9c:	2503      	movs	r5, #3
	switch (config->sample_rate) {
     a9e:	021b      	lsls	r3, r3, #8
     aa0:	429a      	cmp	r2, r3
     aa2:	d1f1      	bne.n	a88 <usart_init+0xac>
	ctrla = (uint32_t)config->data_order |
     aa4:	6833      	ldr	r3, [r6, #0]
     aa6:	9306      	str	r3, [sp, #24]
		(uint32_t)config->mux_setting |
     aa8:	68f3      	ldr	r3, [r6, #12]
     aaa:	9307      	str	r3, [sp, #28]
		config->sample_adjustment |
     aac:	6973      	ldr	r3, [r6, #20]
     aae:	9308      	str	r3, [sp, #32]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ab0:	7e33      	ldrb	r3, [r6, #24]
     ab2:	9309      	str	r3, [sp, #36]	; 0x24
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ab4:	1df3      	adds	r3, r6, #7
     ab6:	7fdb      	ldrb	r3, [r3, #31]
     ab8:	930a      	str	r3, [sp, #40]	; 0x28
	transfer_mode = (uint32_t)config->transfer_mode;
     aba:	6873      	ldr	r3, [r6, #4]
     abc:	9305      	str	r3, [sp, #20]
     abe:	0033      	movs	r3, r6
	switch (transfer_mode)
     ac0:	9a05      	ldr	r2, [sp, #20]
     ac2:	3308      	adds	r3, #8
     ac4:	2a00      	cmp	r2, #0
     ac6:	d100      	bne.n	aca <usart_init+0xee>
     ac8:	e0ae      	b.n	c28 <usart_init+0x24c>
     aca:	2280      	movs	r2, #128	; 0x80
     acc:	9905      	ldr	r1, [sp, #20]
     ace:	0552      	lsls	r2, r2, #21
     ad0:	4291      	cmp	r1, r2
     ad2:	d10e      	bne.n	af2 <usart_init+0x116>
			if (!config->use_external_clock) {
     ad4:	7fdb      	ldrb	r3, [r3, #31]
     ad6:	2b00      	cmp	r3, #0
     ad8:	d10b      	bne.n	af2 <usart_init+0x116>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     ada:	4b67      	ldr	r3, [pc, #412]	; (c78 <usart_init+0x29c>)
     adc:	b2c0      	uxtb	r0, r0
     ade:	6a34      	ldr	r4, [r6, #32]
     ae0:	4798      	blx	r3
     ae2:	aa0e      	add	r2, sp, #56	; 0x38
     ae4:	0001      	movs	r1, r0
     ae6:	4b65      	ldr	r3, [pc, #404]	; (c7c <usart_init+0x2a0>)
     ae8:	0020      	movs	r0, r4
     aea:	4798      	blx	r3
	if (status_code != STATUS_OK) {
     aec:	2800      	cmp	r0, #0
     aee:	d000      	beq.n	af2 <usart_init+0x116>
     af0:	e095      	b.n	c1e <usart_init+0x242>
	if(config->encoding_format_enable) {
     af2:	7e73      	ldrb	r3, [r6, #25]
     af4:	2b00      	cmp	r3, #0
     af6:	d002      	beq.n	afe <usart_init+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     af8:	7eb3      	ldrb	r3, [r6, #26]
     afa:	9a03      	ldr	r2, [sp, #12]
     afc:	7393      	strb	r3, [r2, #14]
	_usart_wait_for_sync(module);
     afe:	4b60      	ldr	r3, [pc, #384]	; (c80 <usart_init+0x2a4>)
     b00:	0038      	movs	r0, r7
     b02:	4798      	blx	r3
	usart_hw->BAUD.reg = baud;
     b04:	ab0a      	add	r3, sp, #40	; 0x28
     b06:	8a1b      	ldrh	r3, [r3, #16]
     b08:	9a03      	ldr	r2, [sp, #12]
	ctrla |= transfer_mode;
     b0a:	9c06      	ldr	r4, [sp, #24]
	usart_hw->BAUD.reg = baud;
     b0c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     b0e:	9b07      	ldr	r3, [sp, #28]
     b10:	431c      	orrs	r4, r3
     b12:	9b08      	ldr	r3, [sp, #32]
     b14:	431c      	orrs	r4, r3
     b16:	9b05      	ldr	r3, [sp, #20]
     b18:	431c      	orrs	r4, r3
     b1a:	9b02      	ldr	r3, [sp, #8]
     b1c:	431c      	orrs	r4, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b20:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     b22:	431c      	orrs	r4, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b26:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     b28:	431c      	orrs	r4, r3
	if (config->use_external_clock == false) {
     b2a:	0033      	movs	r3, r6
     b2c:	3308      	adds	r3, #8
     b2e:	7fdb      	ldrb	r3, [r3, #31]
     b30:	2b00      	cmp	r3, #0
     b32:	d101      	bne.n	b38 <usart_init+0x15c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     b34:	3304      	adds	r3, #4
     b36:	431c      	orrs	r4, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b38:	7e75      	ldrb	r5, [r6, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b3a:	7f33      	ldrb	r3, [r6, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b3c:	02ad      	lsls	r5, r5, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b3e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b40:	431d      	orrs	r5, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b42:	7f73      	ldrb	r3, [r6, #29]
	ctrlb |= (uint32_t)config->character_size;
     b44:	7af2      	ldrb	r2, [r6, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b46:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b48:	431d      	orrs	r5, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b4a:	1d73      	adds	r3, r6, #5
     b4c:	7fdb      	ldrb	r3, [r3, #31]
     b4e:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b50:	431d      	orrs	r5, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     b52:	1db3      	adds	r3, r6, #6
     b54:	7fdb      	ldrb	r3, [r3, #31]
     b56:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b58:	432b      	orrs	r3, r5
	ctrlb |= (uint32_t)config->character_size;
     b5a:	7ab5      	ldrb	r5, [r6, #10]
     b5c:	4315      	orrs	r5, r2
     b5e:	431d      	orrs	r5, r3
	if (config->parity != USART_PARITY_NONE) {
     b60:	8933      	ldrh	r3, [r6, #8]
     b62:	2bff      	cmp	r3, #255	; 0xff
     b64:	d100      	bne.n	b68 <usart_init+0x18c>
     b66:	e075      	b.n	c54 <usart_init+0x278>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     b68:	2280      	movs	r2, #128	; 0x80
     b6a:	0452      	lsls	r2, r2, #17
     b6c:	4314      	orrs	r4, r2
		ctrlb |= config->parity;
     b6e:	431d      	orrs	r5, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     b70:	0033      	movs	r3, r6
     b72:	332c      	adds	r3, #44	; 0x2c
     b74:	781b      	ldrb	r3, [r3, #0]
     b76:	2b00      	cmp	r3, #0
     b78:	d103      	bne.n	b82 <usart_init+0x1a6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b7a:	4b42      	ldr	r3, [pc, #264]	; (c84 <usart_init+0x2a8>)
     b7c:	789b      	ldrb	r3, [r3, #2]
     b7e:	079b      	lsls	r3, r3, #30
     b80:	d501      	bpl.n	b86 <usart_init+0x1aa>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     b82:	2380      	movs	r3, #128	; 0x80
     b84:	431c      	orrs	r4, r3
	_usart_wait_for_sync(module);
     b86:	0038      	movs	r0, r7
     b88:	4b3d      	ldr	r3, [pc, #244]	; (c80 <usart_init+0x2a4>)
     b8a:	4798      	blx	r3
	usart_hw->CTRLB.reg = ctrlb;
     b8c:	9b03      	ldr	r3, [sp, #12]
	_usart_wait_for_sync(module);
     b8e:	0038      	movs	r0, r7
	usart_hw->CTRLB.reg = ctrlb;
     b90:	605d      	str	r5, [r3, #4]
	_usart_wait_for_sync(module);
     b92:	4b3b      	ldr	r3, [pc, #236]	; (c80 <usart_init+0x2a4>)
     b94:	4798      	blx	r3
	usart_hw->CTRLA.reg = ctrla;
     b96:	9b03      	ldr	r3, [sp, #12]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b98:	2500      	movs	r5, #0
     b9a:	601c      	str	r4, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b9c:	2380      	movs	r3, #128	; 0x80
     b9e:	ac0d      	add	r4, sp, #52	; 0x34
     ba0:	7023      	strb	r3, [r4, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     ba2:	6b33      	ldr	r3, [r6, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ba4:	7065      	strb	r5, [r4, #1]
     ba6:	930e      	str	r3, [sp, #56]	; 0x38
     ba8:	6b73      	ldr	r3, [r6, #52]	; 0x34
	config->powersave    = false;
     baa:	70e5      	strb	r5, [r4, #3]
     bac:	930f      	str	r3, [sp, #60]	; 0x3c
     bae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     bb0:	70a5      	strb	r5, [r4, #2]
	uint32_t pad_pinmuxes[] = {
     bb2:	9310      	str	r3, [sp, #64]	; 0x40
     bb4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     bb6:	9302      	str	r3, [sp, #8]
     bb8:	9311      	str	r3, [sp, #68]	; 0x44
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     bba:	2010      	movs	r0, #16
     bbc:	aa0a      	add	r2, sp, #40	; 0x28
     bbe:	00ab      	lsls	r3, r5, #2
     bc0:	1812      	adds	r2, r2, r0
     bc2:	58d0      	ldr	r0, [r2, r3]
     bc4:	b2e9      	uxtb	r1, r5

		if (current_pinmux == PINMUX_DEFAULT) {
     bc6:	2800      	cmp	r0, #0
     bc8:	d102      	bne.n	bd0 <usart_init+0x1f4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     bca:	9804      	ldr	r0, [sp, #16]
     bcc:	4b2e      	ldr	r3, [pc, #184]	; (c88 <usart_init+0x2ac>)
     bce:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     bd0:	1c43      	adds	r3, r0, #1
     bd2:	d005      	beq.n	be0 <usart_init+0x204>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     bd4:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     bd6:	0c00      	lsrs	r0, r0, #16
     bd8:	b2c0      	uxtb	r0, r0
     bda:	0021      	movs	r1, r4
     bdc:	4b2b      	ldr	r3, [pc, #172]	; (c8c <usart_init+0x2b0>)
     bde:	4798      	blx	r3
     be0:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     be2:	2d04      	cmp	r5, #4
     be4:	d1e9      	bne.n	bba <usart_init+0x1de>

	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->callback_reg_mask          = 0x00;
     be6:	003b      	movs	r3, r7
		module->callback[i]            = NULL;
     be8:	2400      	movs	r4, #0
	module->callback_reg_mask          = 0x00;
     bea:	3330      	adds	r3, #48	; 0x30
	module->remaining_tx_buffer_length = 0x0000;
     bec:	85fc      	strh	r4, [r7, #46]	; 0x2e
		module->callback[i]            = NULL;
     bee:	60fc      	str	r4, [r7, #12]
     bf0:	613c      	str	r4, [r7, #16]
     bf2:	617c      	str	r4, [r7, #20]
     bf4:	61bc      	str	r4, [r7, #24]
     bf6:	61fc      	str	r4, [r7, #28]
     bf8:	623c      	str	r4, [r7, #32]
	module->tx_buffer_ptr              = NULL;
     bfa:	62bc      	str	r4, [r7, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     bfc:	627c      	str	r4, [r7, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
     bfe:	85bc      	strh	r4, [r7, #44]	; 0x2c
	module->callback_enable_mask       = 0x00;
	module->rx_status                  = STATUS_OK;
     c00:	709c      	strb	r4, [r3, #2]
	module->callback_reg_mask          = 0x00;
     c02:	701c      	strb	r4, [r3, #0]
	module->callback_enable_mask       = 0x00;
     c04:	705c      	strb	r4, [r3, #1]
	module->tx_status                  = STATUS_OK;
     c06:	70dc      	strb	r4, [r3, #3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     c08:	6838      	ldr	r0, [r7, #0]
     c0a:	4b16      	ldr	r3, [pc, #88]	; (c64 <usart_init+0x288>)
     c0c:	4798      	blx	r3
     c0e:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     c10:	4b1f      	ldr	r3, [pc, #124]	; (c90 <usart_init+0x2b4>)
     c12:	4920      	ldr	r1, [pc, #128]	; (c94 <usart_init+0x2b8>)
     c14:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
     c16:	0020      	movs	r0, r4
	_sercom_instances[instance_index] = module;
     c18:	4b1f      	ldr	r3, [pc, #124]	; (c98 <usart_init+0x2bc>)
     c1a:	00ad      	lsls	r5, r5, #2
     c1c:	50ef      	str	r7, [r5, r3]
}
     c1e:	b013      	add	sp, #76	; 0x4c
     c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c22:	2508      	movs	r5, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c24:	2401      	movs	r4, #1
     c26:	e73d      	b.n	aa4 <usart_init+0xc8>
			if (config->use_external_clock) {
     c28:	7fdb      	ldrb	r3, [r3, #31]
     c2a:	2b00      	cmp	r3, #0
     c2c:	d007      	beq.n	c3e <usart_init+0x262>
				status_code =
     c2e:	0023      	movs	r3, r4
     c30:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     c32:	6a30      	ldr	r0, [r6, #32]
     c34:	9500      	str	r5, [sp, #0]
     c36:	aa0e      	add	r2, sp, #56	; 0x38
				status_code =
     c38:	4c18      	ldr	r4, [pc, #96]	; (c9c <usart_init+0x2c0>)
     c3a:	47a0      	blx	r4
     c3c:	e756      	b.n	aec <usart_init+0x110>
						_sercom_get_async_baud_val(config->baudrate,
     c3e:	6a33      	ldr	r3, [r6, #32]
     c40:	b2c0      	uxtb	r0, r0
     c42:	930b      	str	r3, [sp, #44]	; 0x2c
     c44:	4b0c      	ldr	r3, [pc, #48]	; (c78 <usart_init+0x29c>)
     c46:	4798      	blx	r3
				status_code =
     c48:	9500      	str	r5, [sp, #0]
						_sercom_get_async_baud_val(config->baudrate,
     c4a:	0001      	movs	r1, r0
				status_code =
     c4c:	0023      	movs	r3, r4
     c4e:	aa0e      	add	r2, sp, #56	; 0x38
     c50:	980b      	ldr	r0, [sp, #44]	; 0x2c
     c52:	e7f1      	b.n	c38 <usart_init+0x25c>
		if(config->lin_slave_enable) {
     c54:	7ef3      	ldrb	r3, [r6, #27]
     c56:	2b00      	cmp	r3, #0
     c58:	d100      	bne.n	c5c <usart_init+0x280>
     c5a:	e789      	b.n	b70 <usart_init+0x194>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     c5c:	2380      	movs	r3, #128	; 0x80
     c5e:	04db      	lsls	r3, r3, #19
     c60:	431c      	orrs	r4, r3
     c62:	e785      	b.n	b70 <usart_init+0x194>
     c64:	000009a1 	.word	0x000009a1
     c68:	40000400 	.word	0x40000400
     c6c:	00001cd1 	.word	0x00001cd1
     c70:	00001c49 	.word	0x00001c49
     c74:	00000801 	.word	0x00000801
     c78:	00001ced 	.word	0x00001ced
     c7c:	00000741 	.word	0x00000741
     c80:	000009d1 	.word	0x000009d1
     c84:	41002000 	.word	0x41002000
     c88:	00000845 	.word	0x00000845
     c8c:	00001da5 	.word	0x00001da5
     c90:	0000178d 	.word	0x0000178d
     c94:	00000de1 	.word	0x00000de1
     c98:	200001a8 	.word	0x200001a8
     c9c:	00000769 	.word	0x00000769

00000ca0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     ca0:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     ca2:	79c2      	ldrb	r2, [r0, #7]
{
     ca4:	000d      	movs	r5, r1
		return STATUS_ERR_DENIED;
     ca6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     ca8:	2a00      	cmp	r2, #0
     caa:	d00c      	beq.n	cc6 <usart_write_wait+0x26>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     cac:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
		return STATUS_BUSY;
     cae:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     cb0:	2a00      	cmp	r2, #0
     cb2:	d108      	bne.n	cc6 <usart_write_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     cb4:	4b05      	ldr	r3, [pc, #20]	; (ccc <usart_write_wait+0x2c>)
	SercomUsart *const usart_hw = &(module->hw->USART);
     cb6:	6804      	ldr	r4, [r0, #0]
	_usart_wait_for_sync(module);
     cb8:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     cba:	2302      	movs	r3, #2
	usart_hw->DATA.reg = tx_data;
     cbc:	8525      	strh	r5, [r4, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     cbe:	7e22      	ldrb	r2, [r4, #24]
     cc0:	421a      	tst	r2, r3
     cc2:	d0fc      	beq.n	cbe <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     cc4:	2300      	movs	r3, #0
}
     cc6:	0018      	movs	r0, r3
     cc8:	bd70      	pop	{r4, r5, r6, pc}
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	000009d1 	.word	0x000009d1

00000cd0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     cd2:	0006      	movs	r6, r0
     cd4:	000f      	movs	r7, r1
     cd6:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     cd8:	2017      	movs	r0, #23
	if (length == 0) {
     cda:	2a00      	cmp	r2, #0
     cdc:	d027      	beq.n	d2e <usart_write_buffer_wait+0x5e>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     cde:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
     ce0:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     ce2:	2b00      	cmp	r3, #0
     ce4:	d023      	beq.n	d2e <usart_write_buffer_wait+0x5e>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ce6:	6833      	ldr	r3, [r6, #0]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     ce8:	0030      	movs	r0, r6
	SercomUsart *const usart_hw = &(module->hw->USART);
     cea:	9301      	str	r3, [sp, #4]
	_usart_wait_for_sync(module);
     cec:	4b18      	ldr	r3, [pc, #96]	; (d50 <usart_write_buffer_wait+0x80>)
     cee:	4798      	blx	r3

	uint16_t tx_pos = 0;
     cf0:	2400      	movs	r4, #0
     cf2:	2380      	movs	r3, #128	; 0x80
     cf4:	025b      	lsls	r3, r3, #9
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     cf6:	2101      	movs	r1, #1
     cf8:	9a01      	ldr	r2, [sp, #4]
     cfa:	7e12      	ldrb	r2, [r2, #24]
     cfc:	420a      	tst	r2, r1
     cfe:	d017      	beq.n	d30 <usart_write_buffer_wait+0x60>

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d00:	7972      	ldrb	r2, [r6, #5]
		uint16_t data_to_send = tx_data[tx_pos++];
     d02:	1863      	adds	r3, r4, r1
     d04:	b29b      	uxth	r3, r3
     d06:	5d39      	ldrb	r1, [r7, r4]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d08:	2a01      	cmp	r2, #1
     d0a:	d016      	beq.n	d3a <usart_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
     d0c:	001c      	movs	r4, r3
     d0e:	b289      	uxth	r1, r1
     d10:	3d01      	subs	r5, #1
			data_to_send |= (tx_data[tx_pos++] << 8);
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     d12:	0030      	movs	r0, r6
     d14:	4b0f      	ldr	r3, [pc, #60]	; (d54 <usart_write_buffer_wait+0x84>)
     d16:	b2ad      	uxth	r5, r5
     d18:	4798      	blx	r3
	while (length--) {
     d1a:	2d00      	cmp	r5, #0
     d1c:	d1e9      	bne.n	cf2 <usart_write_buffer_wait+0x22>
     d1e:	2380      	movs	r3, #128	; 0x80
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     d20:	2202      	movs	r2, #2
     d22:	025b      	lsls	r3, r3, #9
     d24:	9901      	ldr	r1, [sp, #4]
     d26:	7e09      	ldrb	r1, [r1, #24]
     d28:	4211      	tst	r1, r2
     d2a:	d00c      	beq.n	d46 <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     d2c:	2000      	movs	r0, #0
}
     d2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     d30:	3b01      	subs	r3, #1
			} else if (i == USART_TIMEOUT) {
     d32:	2b00      	cmp	r3, #0
     d34:	d1df      	bne.n	cf6 <usart_write_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
     d36:	2012      	movs	r0, #18
     d38:	e7f9      	b.n	d2e <usart_write_buffer_wait+0x5e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     d3a:	5cfb      	ldrb	r3, [r7, r3]
     d3c:	3402      	adds	r4, #2
     d3e:	021b      	lsls	r3, r3, #8
     d40:	b2a4      	uxth	r4, r4
     d42:	4319      	orrs	r1, r3
     d44:	e7e4      	b.n	d10 <usart_write_buffer_wait+0x40>
     d46:	3b01      	subs	r3, #1
		} else if (i == USART_TIMEOUT) {
     d48:	2b00      	cmp	r3, #0
     d4a:	d1eb      	bne.n	d24 <usart_write_buffer_wait+0x54>
     d4c:	e7f3      	b.n	d36 <usart_write_buffer_wait+0x66>
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	000009d1 	.word	0x000009d1
     d54:	00000ca1 	.word	0x00000ca1

00000d58 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     d5c:	4b10      	ldr	r3, [pc, #64]	; (da0 <_usart_read_buffer+0x48>)
     d5e:	0017      	movs	r7, r2
     d60:	000e      	movs	r6, r1
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d62:	6805      	ldr	r5, [r0, #0]
     d64:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     d66:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
     d68:	4b0e      	ldr	r3, [pc, #56]	; (da4 <_usart_read_buffer+0x4c>)
     d6a:	2a00      	cmp	r2, #0
     d6c:	d002      	beq.n	d74 <_usart_read_buffer+0x1c>
	cpu_irq_leave_critical();
     d6e:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     d70:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     d74:	85a7      	strh	r7, [r4, #44]	; 0x2c
     d76:	4798      	blx	r3
	module->rx_status                  = STATUS_BUSY;
     d78:	0023      	movs	r3, r4
     d7a:	2205      	movs	r2, #5
     d7c:	3332      	adds	r3, #50	; 0x32
	module->rx_buffer_ptr              = rx_data;
     d7e:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     d80:	701a      	strb	r2, [r3, #0]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     d82:	2304      	movs	r3, #4
     d84:	75ab      	strb	r3, [r5, #22]
	if(module->lin_slave_enabled) {
     d86:	7a23      	ldrb	r3, [r4, #8]
     d88:	2b00      	cmp	r3, #0
     d8a:	d001      	beq.n	d90 <_usart_read_buffer+0x38>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     d8c:	2320      	movs	r3, #32
     d8e:	75ab      	strb	r3, [r5, #22]
	return STATUS_OK;
     d90:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     d92:	7a63      	ldrb	r3, [r4, #9]
     d94:	4283      	cmp	r3, r0
     d96:	d0ec      	beq.n	d72 <_usart_read_buffer+0x1a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     d98:	2308      	movs	r3, #8
     d9a:	75ab      	strb	r3, [r5, #22]
     d9c:	e7e9      	b.n	d72 <_usart_read_buffer+0x1a>
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	00001855 	.word	0x00001855
     da4:	00001889 	.word	0x00001889

00000da8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     da8:	1c93      	adds	r3, r2, #2
     daa:	009b      	lsls	r3, r3, #2
     dac:	18c3      	adds	r3, r0, r3
     dae:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     db0:	2301      	movs	r3, #1
     db2:	4093      	lsls	r3, r2
     db4:	001a      	movs	r2, r3
     db6:	3030      	adds	r0, #48	; 0x30
     db8:	7803      	ldrb	r3, [r0, #0]
     dba:	4313      	orrs	r3, r2
     dbc:	7003      	strb	r3, [r0, #0]
}
     dbe:	4770      	bx	lr

00000dc0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     dc0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     dc2:	2317      	movs	r3, #23
	if (length == 0) {
     dc4:	2a00      	cmp	r2, #0
     dc6:	d006      	beq.n	dd6 <usart_read_buffer_job+0x16>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     dc8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     dca:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     dcc:	2c00      	cmp	r4, #0
     dce:	d002      	beq.n	dd6 <usart_read_buffer_job+0x16>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
     dd0:	4b02      	ldr	r3, [pc, #8]	; (ddc <usart_read_buffer_job+0x1c>)
     dd2:	4798      	blx	r3
     dd4:	0003      	movs	r3, r0
}
     dd6:	0018      	movs	r0, r3
     dd8:	bd10      	pop	{r4, pc}
     dda:	46c0      	nop			; (mov r8, r8)
     ddc:	00000d59 	.word	0x00000d59

00000de0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     de2:	4b58      	ldr	r3, [pc, #352]	; (f44 <_usart_interrupt_handler+0x164>)
     de4:	0080      	lsls	r0, r0, #2
     de6:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     de8:	6825      	ldr	r5, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     dea:	69eb      	ldr	r3, [r5, #28]
	while (usart_is_syncing(module)) {
     dec:	2b00      	cmp	r3, #0
     dee:	d1fc      	bne.n	dea <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     df0:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     df2:	7daf      	ldrb	r7, [r5, #22]
     df4:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
     df6:	0023      	movs	r3, r4
     df8:	3330      	adds	r3, #48	; 0x30
     dfa:	781a      	ldrb	r2, [r3, #0]
     dfc:	785e      	ldrb	r6, [r3, #1]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     dfe:	2301      	movs	r3, #1
	callback_status = module->callback_reg_mask &
     e00:	4016      	ands	r6, r2
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     e02:	421f      	tst	r7, r3
     e04:	d019      	beq.n	e3a <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
     e06:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     e08:	2a00      	cmp	r2, #0
     e0a:	d100      	bne.n	e0e <_usart_interrupt_handler+0x2e>
     e0c:	e072      	b.n	ef4 <_usart_interrupt_handler+0x114>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     e10:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e12:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
     e14:	62a1      	str	r1, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e16:	7961      	ldrb	r1, [r4, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e18:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e1a:	2901      	cmp	r1, #1
     e1c:	d064      	beq.n	ee8 <_usart_interrupt_handler+0x108>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e1e:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     e20:	05db      	lsls	r3, r3, #23
     e22:	0ddb      	lsrs	r3, r3, #23
     e24:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     e26:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     e28:	3b01      	subs	r3, #1
     e2a:	b29b      	uxth	r3, r3
     e2c:	85e3      	strh	r3, [r4, #46]	; 0x2e
     e2e:	2b00      	cmp	r3, #0
     e30:	d103      	bne.n	e3a <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e32:	3301      	adds	r3, #1
     e34:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     e36:	3301      	adds	r3, #1
     e38:	75ab      	strb	r3, [r5, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     e3a:	2302      	movs	r3, #2
     e3c:	421f      	tst	r7, r3
     e3e:	d009      	beq.n	e54 <_usart_interrupt_handler+0x74>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     e40:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
     e42:	0023      	movs	r3, r4
     e44:	2200      	movs	r2, #0
     e46:	3333      	adds	r3, #51	; 0x33
     e48:	701a      	strb	r2, [r3, #0]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     e4a:	07f3      	lsls	r3, r6, #31
     e4c:	d502      	bpl.n	e54 <_usart_interrupt_handler+0x74>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     e4e:	0020      	movs	r0, r4
     e50:	68e3      	ldr	r3, [r4, #12]
     e52:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     e54:	2304      	movs	r3, #4
     e56:	421f      	tst	r7, r3
     e58:	d027      	beq.n	eaa <_usart_interrupt_handler+0xca>

		if (module->remaining_rx_buffer_length) {
     e5a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
     e5c:	2a00      	cmp	r2, #0
     e5e:	d100      	bne.n	e62 <_usart_interrupt_handler+0x82>
     e60:	e06d      	b.n	f3e <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e62:	8b6b      	ldrh	r3, [r5, #26]
     e64:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     e66:	071a      	lsls	r2, r3, #28
     e68:	d446      	bmi.n	ef8 <_usart_interrupt_handler+0x118>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e6a:	223f      	movs	r2, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
     e6c:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     e6e:	d045      	beq.n	efc <_usart_interrupt_handler+0x11c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     e70:	2202      	movs	r2, #2
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     e72:	211a      	movs	r1, #26
				if (error_code & SERCOM_USART_STATUS_FERR) {
     e74:	4213      	tst	r3, r2
     e76:	d10f      	bne.n	e98 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     e78:	2204      	movs	r2, #4
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     e7a:	211e      	movs	r1, #30
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     e7c:	4213      	tst	r3, r2
     e7e:	d10b      	bne.n	e98 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     e80:	2201      	movs	r2, #1
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     e82:	2113      	movs	r1, #19
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     e84:	4213      	tst	r3, r2
     e86:	d107      	bne.n	e98 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     e88:	2210      	movs	r2, #16
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     e8a:	2142      	movs	r1, #66	; 0x42
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     e8c:	4213      	tst	r3, r2
     e8e:	d103      	bne.n	e98 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     e90:	2220      	movs	r2, #32
     e92:	4213      	tst	r3, r2
     e94:	d004      	beq.n	ea0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     e96:	2141      	movs	r1, #65	; 0x41
     e98:	0023      	movs	r3, r4
     e9a:	3332      	adds	r3, #50	; 0x32
     e9c:	7019      	strb	r1, [r3, #0]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     e9e:	836a      	strh	r2, [r5, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     ea0:	0773      	lsls	r3, r6, #29
     ea2:	d502      	bpl.n	eaa <_usart_interrupt_handler+0xca>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     ea4:	0020      	movs	r0, r4
     ea6:	6963      	ldr	r3, [r4, #20]
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ea8:	4798      	blx	r3
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     eaa:	2310      	movs	r3, #16
     eac:	421f      	tst	r7, r3
     eae:	d006      	beq.n	ebe <_usart_interrupt_handler+0xde>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     eb0:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     eb2:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     eb4:	421e      	tst	r6, r3
     eb6:	d002      	beq.n	ebe <_usart_interrupt_handler+0xde>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     eb8:	0020      	movs	r0, r4
     eba:	69e3      	ldr	r3, [r4, #28]
     ebc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     ebe:	2320      	movs	r3, #32
     ec0:	421f      	tst	r7, r3
     ec2:	d006      	beq.n	ed2 <_usart_interrupt_handler+0xf2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ec4:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ec6:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     ec8:	0733      	lsls	r3, r6, #28
     eca:	d502      	bpl.n	ed2 <_usart_interrupt_handler+0xf2>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     ecc:	0020      	movs	r0, r4
     ece:	69a3      	ldr	r3, [r4, #24]
     ed0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     ed2:	2308      	movs	r3, #8
     ed4:	421f      	tst	r7, r3
     ed6:	d006      	beq.n	ee6 <_usart_interrupt_handler+0x106>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     ed8:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     eda:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     edc:	06b3      	lsls	r3, r6, #26
     ede:	d502      	bpl.n	ee6 <_usart_interrupt_handler+0x106>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     ee0:	6a23      	ldr	r3, [r4, #32]
     ee2:	0020      	movs	r0, r4
     ee4:	4798      	blx	r3
		}
	}
#endif
}
     ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ee8:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
     eea:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     eec:	0209      	lsls	r1, r1, #8
     eee:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     ef0:	62a2      	str	r2, [r4, #40]	; 0x28
     ef2:	e795      	b.n	e20 <_usart_interrupt_handler+0x40>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ef4:	752b      	strb	r3, [r5, #20]
     ef6:	e7a0      	b.n	e3a <_usart_interrupt_handler+0x5a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     ef8:	2237      	movs	r2, #55	; 0x37
     efa:	e7b7      	b.n	e6c <_usart_interrupt_handler+0x8c>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     efc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
     efe:	6a61      	ldr	r1, [r4, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     f00:	05db      	lsls	r3, r3, #23
     f02:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
     f04:	b2da      	uxtb	r2, r3
     f06:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
     f08:	6a62      	ldr	r2, [r4, #36]	; 0x24
     f0a:	1c51      	adds	r1, r2, #1
     f0c:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f0e:	7961      	ldrb	r1, [r4, #5]
     f10:	2901      	cmp	r1, #1
     f12:	d104      	bne.n	f1e <_usart_interrupt_handler+0x13e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     f14:	0a1b      	lsrs	r3, r3, #8
     f16:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
     f1a:	3301      	adds	r3, #1
     f1c:	6263      	str	r3, [r4, #36]	; 0x24
				if(--(module->remaining_rx_buffer_length) == 0) {
     f1e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     f20:	3b01      	subs	r3, #1
     f22:	b29b      	uxth	r3, r3
     f24:	85a3      	strh	r3, [r4, #44]	; 0x2c
     f26:	2b00      	cmp	r3, #0
     f28:	d1bf      	bne.n	eaa <_usart_interrupt_handler+0xca>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f2a:	2204      	movs	r2, #4
     f2c:	752a      	strb	r2, [r5, #20]
					module->rx_status = STATUS_OK;
     f2e:	0022      	movs	r2, r4
     f30:	3232      	adds	r2, #50	; 0x32
     f32:	7013      	strb	r3, [r2, #0]
					if (callback_status
     f34:	07b3      	lsls	r3, r6, #30
     f36:	d5b8      	bpl.n	eaa <_usart_interrupt_handler+0xca>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     f38:	0020      	movs	r0, r4
     f3a:	6923      	ldr	r3, [r4, #16]
     f3c:	e7b4      	b.n	ea8 <_usart_interrupt_handler+0xc8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f3e:	752b      	strb	r3, [r5, #20]
     f40:	e7b3      	b.n	eaa <_usart_interrupt_handler+0xca>
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	200001a8 	.word	0x200001a8

00000f48 <spi_is_write_complete>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f48:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f4a:	7e18      	ldrb	r0, [r3, #24]
     f4c:	0780      	lsls	r0, r0, #30
     f4e:	0fc0      	lsrs	r0, r0, #31
}
     f50:	4770      	bx	lr

00000f52 <spi_is_ready_to_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f52:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f54:	7e18      	ldrb	r0, [r3, #24]
     f56:	2301      	movs	r3, #1
     f58:	4018      	ands	r0, r3
}
     f5a:	4770      	bx	lr

00000f5c <spi_is_ready_to_read>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f5c:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f5e:	7e18      	ldrb	r0, [r3, #24]
     f60:	0740      	lsls	r0, r0, #29
     f62:	0fc0      	lsrs	r0, r0, #31
}
     f64:	4770      	bx	lr
	...

00000f68 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     f68:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     f6a:	4b06      	ldr	r3, [pc, #24]	; (f84 <spi_write+0x1c>)
{
     f6c:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
     f6e:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_write(module)) {
     f70:	4798      	blx	r3
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     f72:	2305      	movs	r3, #5
	if (!spi_is_ready_to_write(module)) {
     f74:	2800      	cmp	r0, #0
     f76:	d003      	beq.n	f80 <spi_write+0x18>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;

	return STATUS_OK;
     f78:	2300      	movs	r3, #0
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f7a:	05e4      	lsls	r4, r4, #23
     f7c:	0de4      	lsrs	r4, r4, #23
     f7e:	62ac      	str	r4, [r5, #40]	; 0x28
}
     f80:	0018      	movs	r0, r3
     f82:	bd70      	pop	{r4, r5, r6, pc}
     f84:	00000f53 	.word	0x00000f53

00000f88 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     f88:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     f8a:	4b0d      	ldr	r3, [pc, #52]	; (fc0 <spi_read+0x38>)
{
     f8c:	0006      	movs	r6, r0
     f8e:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
     f90:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_read(module)) {
     f92:	4798      	blx	r3
		/* No data has been received, return */
		return STATUS_ERR_IO;
     f94:	2210      	movs	r2, #16
	if (!spi_is_ready_to_read(module)) {
     f96:	2800      	cmp	r0, #0
     f98:	d00d      	beq.n	fb6 <spi_read+0x2e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f9a:	2304      	movs	r3, #4
     f9c:	8b69      	ldrh	r1, [r5, #26]
	enum status_code retval = STATUS_OK;
     f9e:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fa0:	4219      	tst	r1, r3
     fa2:	d001      	beq.n	fa8 <spi_read+0x20>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     fa4:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
     fa6:	321e      	adds	r2, #30
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fa8:	79b3      	ldrb	r3, [r6, #6]
     faa:	2b01      	cmp	r3, #1
     fac:	d105      	bne.n	fba <spi_read+0x32>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fae:	6aab      	ldr	r3, [r5, #40]	; 0x28
     fb0:	05db      	lsls	r3, r3, #23
     fb2:	0ddb      	lsrs	r3, r3, #23
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     fb4:	8023      	strh	r3, [r4, #0]
	}

	return retval;
}
     fb6:	0010      	movs	r0, r2
     fb8:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (uint8_t)spi_module->DATA.reg;
     fba:	6aab      	ldr	r3, [r5, #40]	; 0x28
     fbc:	b2db      	uxtb	r3, r3
     fbe:	e7f9      	b.n	fb4 <spi_read+0x2c>
     fc0:	00000f5d 	.word	0x00000f5d

00000fc4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fc6:	0005      	movs	r5, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     fc8:	6029      	str	r1, [r5, #0]
{
     fca:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     fcc:	680a      	ldr	r2, [r1, #0]
{
     fce:	b089      	sub	sp, #36	; 0x24
     fd0:	000e      	movs	r6, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     fd2:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     fd4:	0792      	lsls	r2, r2, #30
     fd6:	d500      	bpl.n	fda <spi_init+0x16>
     fd8:	e0d4      	b.n	1184 <spi_init+0x1c0>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     fda:	2701      	movs	r7, #1
     fdc:	680b      	ldr	r3, [r1, #0]
     fde:	403b      	ands	r3, r7
     fe0:	9301      	str	r3, [sp, #4]
     fe2:	9a01      	ldr	r2, [sp, #4]
		return STATUS_BUSY;
     fe4:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     fe6:	2a00      	cmp	r2, #0
     fe8:	d000      	beq.n	fec <spi_init+0x28>
     fea:	e0cb      	b.n	1184 <spi_init+0x1c0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fec:	0008      	movs	r0, r1
     fee:	4b6a      	ldr	r3, [pc, #424]	; (1198 <spi_init+0x1d4>)
     ff0:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ff2:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ff4:	408f      	lsls	r7, r1
     ff6:	4b69      	ldr	r3, [pc, #420]	; (119c <spi_init+0x1d8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ff8:	3014      	adds	r0, #20
     ffa:	6a1a      	ldr	r2, [r3, #32]
     ffc:	4317      	orrs	r7, r2
     ffe:	621f      	str	r7, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1000:	1d63      	adds	r3, r4, #5
    1002:	7fdb      	ldrb	r3, [r3, #31]
    1004:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1006:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
    1008:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    100a:	0011      	movs	r1, r2
    100c:	0038      	movs	r0, r7
    100e:	4b64      	ldr	r3, [pc, #400]	; (11a0 <spi_init+0x1dc>)
    1010:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1012:	0038      	movs	r0, r7
    1014:	4b63      	ldr	r3, [pc, #396]	; (11a4 <spi_init+0x1e0>)
    1016:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1018:	1d63      	adds	r3, r4, #5
    101a:	7fd8      	ldrb	r0, [r3, #31]
    101c:	9901      	ldr	r1, [sp, #4]
    101e:	4b62      	ldr	r3, [pc, #392]	; (11a8 <spi_init+0x1e4>)
    1020:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1022:	7823      	ldrb	r3, [r4, #0]
    1024:	2b01      	cmp	r3, #1
    1026:	d103      	bne.n	1030 <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1028:	6832      	ldr	r2, [r6, #0]
    102a:	330b      	adds	r3, #11
    102c:	4313      	orrs	r3, r2
    102e:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1030:	7823      	ldrb	r3, [r4, #0]
    1032:	2b00      	cmp	r3, #0
    1034:	d103      	bne.n	103e <spi_init+0x7a>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1036:	6832      	ldr	r2, [r6, #0]
    1038:	3308      	adds	r3, #8
    103a:	4313      	orrs	r3, r2
    103c:	6033      	str	r3, [r6, #0]
    103e:	002b      	movs	r3, r5
    1040:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    1042:	2600      	movs	r6, #0
    1044:	330c      	adds	r3, #12
    1046:	3228      	adds	r2, #40	; 0x28
    1048:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    104a:	429a      	cmp	r2, r3
    104c:	d1fc      	bne.n	1048 <spi_init+0x84>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
    104e:	002b      	movs	r3, r5
    1050:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
    1052:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
    1054:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    1056:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
    1058:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
    105a:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
    105c:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
    105e:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
    1060:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1062:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
    1064:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1066:	4b4c      	ldr	r3, [pc, #304]	; (1198 <spi_init+0x1d4>)
	module->locked                     = false;
    1068:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    106a:	4798      	blx	r3
    106c:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    106e:	4b4f      	ldr	r3, [pc, #316]	; (11ac <spi_init+0x1e8>)
    1070:	494f      	ldr	r1, [pc, #316]	; (11b0 <spi_init+0x1ec>)
    1072:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1074:	4b4f      	ldr	r3, [pc, #316]	; (11b4 <spi_init+0x1f0>)
    1076:	00bf      	lsls	r7, r7, #2
    1078:	50fd      	str	r5, [r7, r3]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    107a:	2380      	movs	r3, #128	; 0x80
    107c:	aa02      	add	r2, sp, #8
    107e:	7113      	strb	r3, [r2, #4]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1080:	2301      	movs	r3, #1
    1082:	7193      	strb	r3, [r2, #6]
	if(config->mode == SPI_MODE_SLAVE) {
    1084:	7823      	ldrb	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1086:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1088:	7156      	strb	r6, [r2, #5]
	config->powersave    = false;
    108a:	71d6      	strb	r6, [r2, #7]
	if(config->mode == SPI_MODE_SLAVE) {
    108c:	2b00      	cmp	r3, #0
    108e:	d100      	bne.n	1092 <spi_init+0xce>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1090:	7196      	strb	r6, [r2, #6]
	uint32_t pad_pinmuxes[] = {
    1092:	2600      	movs	r6, #0
    1094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1096:	9304      	str	r3, [sp, #16]
    1098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    109a:	9305      	str	r3, [sp, #20]
    109c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    109e:	9306      	str	r3, [sp, #24]
    10a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    10a2:	9307      	str	r3, [sp, #28]
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10a4:	00b3      	lsls	r3, r6, #2
    10a6:	aa04      	add	r2, sp, #16
    10a8:	5898      	ldr	r0, [r3, r2]
    10aa:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
    10ac:	2800      	cmp	r0, #0
    10ae:	d102      	bne.n	10b6 <spi_init+0xf2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10b0:	0038      	movs	r0, r7
    10b2:	4b41      	ldr	r3, [pc, #260]	; (11b8 <spi_init+0x1f4>)
    10b4:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
    10b6:	1c43      	adds	r3, r0, #1
    10b8:	d006      	beq.n	10c8 <spi_init+0x104>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10ba:	ab02      	add	r3, sp, #8
    10bc:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    10be:	0c00      	lsrs	r0, r0, #16
    10c0:	b2c0      	uxtb	r0, r0
    10c2:	a903      	add	r1, sp, #12
    10c4:	4b3d      	ldr	r3, [pc, #244]	; (11bc <spi_init+0x1f8>)
    10c6:	4798      	blx	r3
    10c8:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    10ca:	2e04      	cmp	r6, #4
    10cc:	d1ea      	bne.n	10a4 <spi_init+0xe0>
	module->mode             = config->mode;
    10ce:	7823      	ldrb	r3, [r4, #0]
    10d0:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    10d2:	7c23      	ldrb	r3, [r4, #16]
    10d4:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    10d6:	7ca3      	ldrb	r3, [r4, #18]
    10d8:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    10da:	7d23      	ldrb	r3, [r4, #20]
    10dc:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    10de:	ab02      	add	r3, sp, #8
    10e0:	1c9e      	adds	r6, r3, #2
    10e2:	2300      	movs	r3, #0
    10e4:	8033      	strh	r3, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
    10e6:	7823      	ldrb	r3, [r4, #0]
    10e8:	2b01      	cmp	r3, #1
    10ea:	d110      	bne.n	110e <spi_init+0x14a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10ec:	4b2a      	ldr	r3, [pc, #168]	; (1198 <spi_init+0x1d4>)
    10ee:	6828      	ldr	r0, [r5, #0]
    10f0:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10f2:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    10f4:	4b32      	ldr	r3, [pc, #200]	; (11c0 <spi_init+0x1fc>)
    10f6:	b2c0      	uxtb	r0, r0
    10f8:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
    10fa:	4b32      	ldr	r3, [pc, #200]	; (11c4 <spi_init+0x200>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    10fc:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    10fe:	0032      	movs	r2, r6
    1100:	69a0      	ldr	r0, [r4, #24]
    1102:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
    1104:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
    1106:	2800      	cmp	r0, #0
    1108:	d13c      	bne.n	1184 <spi_init+0x1c0>
		spi_module->BAUD.reg = (uint8_t)baud;
    110a:	7833      	ldrb	r3, [r6, #0]
    110c:	733b      	strb	r3, [r7, #12]
	if (config->mode == SPI_MODE_SLAVE) {
    110e:	7823      	ldrb	r3, [r4, #0]
    1110:	2b00      	cmp	r3, #0
    1112:	d13d      	bne.n	1190 <spi_init+0x1cc>
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1114:	7fe1      	ldrb	r1, [r4, #31]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1116:	7fa5      	ldrb	r5, [r4, #30]
		spi_module->ADDR.reg |=
    1118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    111a:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    111c:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    111e:	4319      	orrs	r1, r3
		ctrla = config->mode_specific.slave.frame_format;
    1120:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    1122:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    1124:	1c63      	adds	r3, r4, #1
		spi_module->ADDR.reg |=
    1126:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    1128:	7fdb      	ldrb	r3, [r3, #31]
    112a:	2b00      	cmp	r3, #0
    112c:	d12d      	bne.n	118a <spi_init+0x1c6>
		ctrlb = config->mode_specific.slave.address_mode;
    112e:	0013      	movs	r3, r2
	ctrla |= config->mux_setting;
    1130:	68a1      	ldr	r1, [r4, #8]
    1132:	6862      	ldr	r2, [r4, #4]
    1134:	430a      	orrs	r2, r1
    1136:	68e1      	ldr	r1, [r4, #12]
    1138:	430a      	orrs	r2, r1
	ctrlb |= config->character_size;
    113a:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->mux_setting;
    113c:	4302      	orrs	r2, r0
	ctrlb |= config->character_size;
    113e:	430b      	orrs	r3, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1140:	7c61      	ldrb	r1, [r4, #17]
    1142:	2900      	cmp	r1, #0
    1144:	d103      	bne.n	114e <spi_init+0x18a>
    1146:	4920      	ldr	r1, [pc, #128]	; (11c8 <spi_init+0x204>)
    1148:	7889      	ldrb	r1, [r1, #2]
    114a:	0789      	lsls	r1, r1, #30
    114c:	d501      	bpl.n	1152 <spi_init+0x18e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    114e:	2180      	movs	r1, #128	; 0x80
    1150:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
    1152:	7ca1      	ldrb	r1, [r4, #18]
    1154:	2900      	cmp	r1, #0
    1156:	d002      	beq.n	115e <spi_init+0x19a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1158:	2180      	movs	r1, #128	; 0x80
    115a:	0289      	lsls	r1, r1, #10
    115c:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
    115e:	7ce1      	ldrb	r1, [r4, #19]
    1160:	2900      	cmp	r1, #0
    1162:	d002      	beq.n	116a <spi_init+0x1a6>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1164:	2180      	movs	r1, #128	; 0x80
    1166:	0089      	lsls	r1, r1, #2
    1168:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
    116a:	7d21      	ldrb	r1, [r4, #20]
    116c:	2900      	cmp	r1, #0
    116e:	d002      	beq.n	1176 <spi_init+0x1b2>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1170:	2180      	movs	r1, #128	; 0x80
    1172:	0189      	lsls	r1, r1, #6
    1174:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
    1176:	6839      	ldr	r1, [r7, #0]
    1178:	430a      	orrs	r2, r1
    117a:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    117c:	687a      	ldr	r2, [r7, #4]
    117e:	4313      	orrs	r3, r2
    1180:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    1182:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1184:	0018      	movs	r0, r3
    1186:	b009      	add	sp, #36	; 0x24
    1188:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    118a:	2340      	movs	r3, #64	; 0x40
    118c:	4313      	orrs	r3, r2
    118e:	e7cf      	b.n	1130 <spi_init+0x16c>
	uint32_t ctrlb = 0;
    1190:	2300      	movs	r3, #0
	uint32_t ctrla = 0;
    1192:	0018      	movs	r0, r3
    1194:	e7cc      	b.n	1130 <spi_init+0x16c>
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	000009a1 	.word	0x000009a1
    119c:	40000400 	.word	0x40000400
    11a0:	00001cd1 	.word	0x00001cd1
    11a4:	00001c49 	.word	0x00001c49
    11a8:	00000801 	.word	0x00000801
    11ac:	0000178d 	.word	0x0000178d
    11b0:	0000158d 	.word	0x0000158d
    11b4:	200001a8 	.word	0x200001a8
    11b8:	00000845 	.word	0x00000845
    11bc:	00001da5 	.word	0x00001da5
    11c0:	00001ced 	.word	0x00001ced
    11c4:	00000741 	.word	0x00000741
    11c8:	41002000 	.word	0x41002000

000011cc <spi_write_buffer_wait>:
{
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    11cc:	0003      	movs	r3, r0
{
    11ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    11d0:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    11d2:	2005      	movs	r0, #5
{
    11d4:	b087      	sub	sp, #28
    11d6:	9102      	str	r1, [sp, #8]
	if (module->status == STATUS_BUSY) {
    11d8:	3338      	adds	r3, #56	; 0x38
    11da:	781b      	ldrb	r3, [r3, #0]
{
    11dc:	0015      	movs	r5, r2
	if (module->status == STATUS_BUSY) {
    11de:	4283      	cmp	r3, r0
    11e0:	d032      	beq.n	1248 <spi_write_buffer_wait+0x7c>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    11e2:	3012      	adds	r0, #18
	if (length == 0) {
    11e4:	2a00      	cmp	r2, #0
    11e6:	d02f      	beq.n	1248 <spi_write_buffer_wait+0x7c>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    11e8:	7963      	ldrb	r3, [r4, #5]
    11ea:	2b00      	cmp	r3, #0
    11ec:	d107      	bne.n	11fe <spi_write_buffer_wait+0x32>
    11ee:	0020      	movs	r0, r4
    11f0:	4b5f      	ldr	r3, [pc, #380]	; (1370 <spi_write_buffer_wait+0x1a4>)
    11f2:	4798      	blx	r3
    11f4:	2800      	cmp	r0, #0
    11f6:	d002      	beq.n	11fe <spi_write_buffer_wait+0x32>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    11f8:	2302      	movs	r3, #2
    11fa:	6822      	ldr	r2, [r4, #0]
    11fc:	7613      	strb	r3, [r2, #24]
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    11fe:	2600      	movs	r6, #0
    1200:	9501      	str	r5, [sp, #4]
    1202:	3d01      	subs	r5, #1
    1204:	b2ad      	uxth	r5, r5
	while (length--) {
    1206:	4a5b      	ldr	r2, [pc, #364]	; (1374 <spi_write_buffer_wait+0x1a8>)
    1208:	7963      	ldrb	r3, [r4, #5]
    120a:	4295      	cmp	r5, r2
    120c:	d108      	bne.n	1220 <spi_write_buffer_wait+0x54>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    120e:	2b01      	cmp	r3, #1
    1210:	d100      	bne.n	1214 <spi_write_buffer_wait+0x48>
    1212:	e087      	b.n	1324 <spi_write_buffer_wait+0x158>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1214:	7963      	ldrb	r3, [r4, #5]
    1216:	2b00      	cmp	r3, #0
    1218:	d100      	bne.n	121c <spi_write_buffer_wait+0x50>
    121a:	e089      	b.n	1330 <spi_write_buffer_wait+0x164>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    121c:	2000      	movs	r0, #0
    121e:	e013      	b.n	1248 <spi_write_buffer_wait+0x7c>
		if (module->mode == SPI_MODE_SLAVE) {
    1220:	2b00      	cmp	r3, #0
    1222:	d11a      	bne.n	125a <spi_write_buffer_wait+0x8e>
    1224:	4f54      	ldr	r7, [pc, #336]	; (1378 <spi_write_buffer_wait+0x1ac>)
				if (spi_is_ready_to_write(module)) {
    1226:	0020      	movs	r0, r4
    1228:	4b54      	ldr	r3, [pc, #336]	; (137c <spi_write_buffer_wait+0x1b0>)
    122a:	4798      	blx	r3
    122c:	2800      	cmp	r0, #0
    122e:	d102      	bne.n	1236 <spi_write_buffer_wait+0x6a>
    1230:	3f01      	subs	r7, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1232:	2f00      	cmp	r7, #0
    1234:	d1f7      	bne.n	1226 <spi_write_buffer_wait+0x5a>
			if (spi_is_write_complete(module)) {
    1236:	0020      	movs	r0, r4
    1238:	4b4d      	ldr	r3, [pc, #308]	; (1370 <spi_write_buffer_wait+0x1a4>)
    123a:	4798      	blx	r3
    123c:	2800      	cmp	r0, #0
    123e:	d005      	beq.n	124c <spi_write_buffer_wait+0x80>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1240:	2202      	movs	r2, #2
					return STATUS_ABORTED;
    1242:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    1244:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1246:	761a      	strb	r2, [r3, #24]
}
    1248:	b007      	add	sp, #28
    124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_write(module)) {
    124c:	0020      	movs	r0, r4
    124e:	4b4b      	ldr	r3, [pc, #300]	; (137c <spi_write_buffer_wait+0x1b0>)
    1250:	4798      	blx	r3
    1252:	2800      	cmp	r0, #0
    1254:	d101      	bne.n	125a <spi_write_buffer_wait+0x8e>
					return STATUS_ERR_TIMEOUT;
    1256:	3012      	adds	r0, #18
    1258:	e7f6      	b.n	1248 <spi_write_buffer_wait+0x7c>
		while (!spi_is_ready_to_write(module)) {
    125a:	0020      	movs	r0, r4
    125c:	4b47      	ldr	r3, [pc, #284]	; (137c <spi_write_buffer_wait+0x1b0>)
    125e:	4798      	blx	r3
    1260:	2800      	cmp	r0, #0
    1262:	d0fa      	beq.n	125a <spi_write_buffer_wait+0x8e>
		uint16_t data_to_send = tx_data[tx_pos++];
    1264:	9a02      	ldr	r2, [sp, #8]
    1266:	1c73      	adds	r3, r6, #1
    1268:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    126a:	79a2      	ldrb	r2, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
    126c:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    126e:	2a01      	cmp	r2, #1
    1270:	d040      	beq.n	12f4 <spi_write_buffer_wait+0x128>
		uint16_t data_to_send = tx_data[tx_pos++];
    1272:	001e      	movs	r6, r3
    1274:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
    1276:	4b42      	ldr	r3, [pc, #264]	; (1380 <spi_write_buffer_wait+0x1b4>)
    1278:	0020      	movs	r0, r4
    127a:	4798      	blx	r3
		if (module->receiver_enabled) {
    127c:	79e2      	ldrb	r2, [r4, #7]
    127e:	1e6b      	subs	r3, r5, #1
    1280:	b29b      	uxth	r3, r3
    1282:	2a00      	cmp	r2, #0
    1284:	d04c      	beq.n	1320 <spi_write_buffer_wait+0x154>
			if (module->mode == SPI_MODE_SLAVE) {
    1286:	7963      	ldrb	r3, [r4, #5]
    1288:	2b00      	cmp	r3, #0
    128a:	d124      	bne.n	12d6 <spi_write_buffer_wait+0x10a>
    128c:	4b3a      	ldr	r3, [pc, #232]	; (1378 <spi_write_buffer_wait+0x1ac>)
    128e:	9303      	str	r3, [sp, #12]
					if (length && spi_is_ready_to_write(module)) {
    1290:	2d00      	cmp	r5, #0
    1292:	d012      	beq.n	12ba <spi_write_buffer_wait+0xee>
    1294:	0020      	movs	r0, r4
    1296:	4b39      	ldr	r3, [pc, #228]	; (137c <spi_write_buffer_wait+0x1b0>)
    1298:	4798      	blx	r3
    129a:	2800      	cmp	r0, #0
    129c:	d00d      	beq.n	12ba <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    129e:	9b02      	ldr	r3, [sp, #8]
    12a0:	1c77      	adds	r7, r6, #1
    12a2:	5d99      	ldrb	r1, [r3, r6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12a4:	79a3      	ldrb	r3, [r4, #6]
						data_to_send = tx_data[tx_pos++];
    12a6:	b2bf      	uxth	r7, r7
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12a8:	2b01      	cmp	r3, #1
    12aa:	d02a      	beq.n	1302 <spi_write_buffer_wait+0x136>
						data_to_send = tx_data[tx_pos++];
    12ac:	b289      	uxth	r1, r1
						spi_write(module, data_to_send);
    12ae:	0020      	movs	r0, r4
    12b0:	4b33      	ldr	r3, [pc, #204]	; (1380 <spi_write_buffer_wait+0x1b4>)
    12b2:	4798      	blx	r3
						length--;
    12b4:	003e      	movs	r6, r7
    12b6:	3d01      	subs	r5, #1
    12b8:	b2ad      	uxth	r5, r5
					if (spi_is_ready_to_read(module)) {
    12ba:	0020      	movs	r0, r4
    12bc:	4f31      	ldr	r7, [pc, #196]	; (1384 <spi_write_buffer_wait+0x1b8>)
    12be:	47b8      	blx	r7
    12c0:	2800      	cmp	r0, #0
    12c2:	d025      	beq.n	1310 <spi_write_buffer_wait+0x144>
				if (spi_is_write_complete(module)) {
    12c4:	0020      	movs	r0, r4
    12c6:	4b2a      	ldr	r3, [pc, #168]	; (1370 <spi_write_buffer_wait+0x1a4>)
    12c8:	4798      	blx	r3
    12ca:	2800      	cmp	r0, #0
    12cc:	d1b8      	bne.n	1240 <spi_write_buffer_wait+0x74>
				if (!spi_is_ready_to_read(module)) {
    12ce:	0020      	movs	r0, r4
    12d0:	47b8      	blx	r7
    12d2:	2800      	cmp	r0, #0
    12d4:	d022      	beq.n	131c <spi_write_buffer_wait+0x150>
			while (!spi_is_ready_to_read(module)) {
    12d6:	0020      	movs	r0, r4
    12d8:	4b2a      	ldr	r3, [pc, #168]	; (1384 <spi_write_buffer_wait+0x1b8>)
    12da:	4798      	blx	r3
    12dc:	2800      	cmp	r0, #0
    12de:	d0fa      	beq.n	12d6 <spi_write_buffer_wait+0x10a>
			spi_read(module, &flush);
    12e0:	ab04      	add	r3, sp, #16
    12e2:	1d99      	adds	r1, r3, #6
    12e4:	0020      	movs	r0, r4
    12e6:	4b28      	ldr	r3, [pc, #160]	; (1388 <spi_write_buffer_wait+0x1bc>)
    12e8:	4798      	blx	r3
			flush_length--;
    12ea:	9b01      	ldr	r3, [sp, #4]
    12ec:	3b01      	subs	r3, #1
    12ee:	b29b      	uxth	r3, r3
    12f0:	9301      	str	r3, [sp, #4]
    12f2:	e786      	b.n	1202 <spi_write_buffer_wait+0x36>
			data_to_send |= (tx_data[tx_pos++] << 8);
    12f4:	9a02      	ldr	r2, [sp, #8]
    12f6:	3602      	adds	r6, #2
    12f8:	5cd3      	ldrb	r3, [r2, r3]
    12fa:	b2b6      	uxth	r6, r6
    12fc:	021b      	lsls	r3, r3, #8
    12fe:	4319      	orrs	r1, r3
    1300:	e7b9      	b.n	1276 <spi_write_buffer_wait+0xaa>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1302:	9b02      	ldr	r3, [sp, #8]
    1304:	3602      	adds	r6, #2
    1306:	5ddb      	ldrb	r3, [r3, r7]
    1308:	b2b7      	uxth	r7, r6
    130a:	021b      	lsls	r3, r3, #8
    130c:	4319      	orrs	r1, r3
    130e:	e7ce      	b.n	12ae <spi_write_buffer_wait+0xe2>
    1310:	9b03      	ldr	r3, [sp, #12]
    1312:	3b01      	subs	r3, #1
    1314:	9303      	str	r3, [sp, #12]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1316:	2b00      	cmp	r3, #0
    1318:	d1ba      	bne.n	1290 <spi_write_buffer_wait+0xc4>
    131a:	e7d3      	b.n	12c4 <spi_write_buffer_wait+0xf8>
					return STATUS_ERR_TIMEOUT;
    131c:	2012      	movs	r0, #18
    131e:	e793      	b.n	1248 <spi_write_buffer_wait+0x7c>
		if (module->receiver_enabled) {
    1320:	001d      	movs	r5, r3
    1322:	e770      	b.n	1206 <spi_write_buffer_wait+0x3a>
		while (!spi_is_write_complete(module)) {
    1324:	0020      	movs	r0, r4
    1326:	4b12      	ldr	r3, [pc, #72]	; (1370 <spi_write_buffer_wait+0x1a4>)
    1328:	4798      	blx	r3
    132a:	2800      	cmp	r0, #0
    132c:	d0fa      	beq.n	1324 <spi_write_buffer_wait+0x158>
    132e:	e771      	b.n	1214 <spi_write_buffer_wait+0x48>
		if (module->receiver_enabled) {
    1330:	79e3      	ldrb	r3, [r4, #7]
    1332:	2b00      	cmp	r3, #0
    1334:	d100      	bne.n	1338 <spi_write_buffer_wait+0x16c>
    1336:	e771      	b.n	121c <spi_write_buffer_wait+0x50>
			while (flush_length) {
    1338:	9b01      	ldr	r3, [sp, #4]
    133a:	2b00      	cmp	r3, #0
    133c:	d100      	bne.n	1340 <spi_write_buffer_wait+0x174>
    133e:	e76d      	b.n	121c <spi_write_buffer_wait+0x50>
    1340:	4d0d      	ldr	r5, [pc, #52]	; (1378 <spi_write_buffer_wait+0x1ac>)
					if (spi_is_ready_to_read(module)) {
    1342:	0020      	movs	r0, r4
    1344:	4e0f      	ldr	r6, [pc, #60]	; (1384 <spi_write_buffer_wait+0x1b8>)
    1346:	47b0      	blx	r6
    1348:	2800      	cmp	r0, #0
    134a:	d102      	bne.n	1352 <spi_write_buffer_wait+0x186>
    134c:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    134e:	2d00      	cmp	r5, #0
    1350:	d1f7      	bne.n	1342 <spi_write_buffer_wait+0x176>
				if (!spi_is_ready_to_read(module)) {
    1352:	0020      	movs	r0, r4
    1354:	47b0      	blx	r6
    1356:	2800      	cmp	r0, #0
    1358:	d100      	bne.n	135c <spi_write_buffer_wait+0x190>
    135a:	e77c      	b.n	1256 <spi_write_buffer_wait+0x8a>
				spi_read(module, &flush);
    135c:	ab04      	add	r3, sp, #16
    135e:	1d99      	adds	r1, r3, #6
    1360:	0020      	movs	r0, r4
    1362:	4b09      	ldr	r3, [pc, #36]	; (1388 <spi_write_buffer_wait+0x1bc>)
    1364:	4798      	blx	r3
				flush_length--;
    1366:	9b01      	ldr	r3, [sp, #4]
    1368:	3b01      	subs	r3, #1
    136a:	b29b      	uxth	r3, r3
    136c:	9301      	str	r3, [sp, #4]
    136e:	e7e3      	b.n	1338 <spi_write_buffer_wait+0x16c>
    1370:	00000f49 	.word	0x00000f49
    1374:	0000ffff 	.word	0x0000ffff
    1378:	00002711 	.word	0x00002711
    137c:	00000f53 	.word	0x00000f53
    1380:	00000f69 	.word	0x00000f69
    1384:	00000f5d 	.word	0x00000f5d
    1388:	00000f89 	.word	0x00000f89

0000138c <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    138c:	b5f0      	push	{r4, r5, r6, r7, lr}
    138e:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1390:	0003      	movs	r3, r0
{
    1392:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1394:	2005      	movs	r0, #5
{
    1396:	b089      	sub	sp, #36	; 0x24
    1398:	9102      	str	r1, [sp, #8]
    139a:	9203      	str	r2, [sp, #12]
	if (module->status == STATUS_BUSY) {
    139c:	3338      	adds	r3, #56	; 0x38
    139e:	781b      	ldrb	r3, [r3, #0]
    13a0:	4283      	cmp	r3, r0
    13a2:	d037      	beq.n	1414 <spi_transceive_buffer_wait+0x88>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    13a4:	3012      	adds	r0, #18
	if (length == 0) {
    13a6:	2e00      	cmp	r6, #0
    13a8:	d034      	beq.n	1414 <spi_transceive_buffer_wait+0x88>
	}

	if (!(module->receiver_enabled)) {
    13aa:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    13ac:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    13ae:	2b00      	cmp	r3, #0
    13b0:	d030      	beq.n	1414 <spi_transceive_buffer_wait+0x88>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    13b2:	7963      	ldrb	r3, [r4, #5]
    13b4:	2b00      	cmp	r3, #0
    13b6:	d107      	bne.n	13c8 <spi_transceive_buffer_wait+0x3c>
    13b8:	0020      	movs	r0, r4
    13ba:	4b6e      	ldr	r3, [pc, #440]	; (1574 <spi_transceive_buffer_wait+0x1e8>)
    13bc:	4798      	blx	r3
    13be:	2800      	cmp	r0, #0
    13c0:	d002      	beq.n	13c8 <spi_transceive_buffer_wait+0x3c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    13c2:	2302      	movs	r3, #2
    13c4:	6822      	ldr	r2, [r4, #0]
    13c6:	7613      	strb	r3, [r2, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
    13c8:	2500      	movs	r5, #0
    13ca:	002f      	movs	r7, r5
    13cc:	9601      	str	r6, [sp, #4]
	while (length--) {
    13ce:	1e73      	subs	r3, r6, #1
    13d0:	b29b      	uxth	r3, r3
    13d2:	9304      	str	r3, [sp, #16]
    13d4:	7963      	ldrb	r3, [r4, #5]
    13d6:	2e00      	cmp	r6, #0
    13d8:	d108      	bne.n	13ec <spi_transceive_buffer_wait+0x60>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    13da:	2b01      	cmp	r3, #1
    13dc:	d100      	bne.n	13e0 <spi_transceive_buffer_wait+0x54>
    13de:	e092      	b.n	1506 <spi_transceive_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    13e0:	7963      	ldrb	r3, [r4, #5]
    13e2:	2b00      	cmp	r3, #0
    13e4:	d100      	bne.n	13e8 <spi_transceive_buffer_wait+0x5c>
    13e6:	e0be      	b.n	1566 <spi_transceive_buffer_wait+0x1da>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    13e8:	2000      	movs	r0, #0
    13ea:	e013      	b.n	1414 <spi_transceive_buffer_wait+0x88>
		if (module->mode == SPI_MODE_SLAVE) {
    13ec:	2b00      	cmp	r3, #0
    13ee:	d119      	bne.n	1424 <spi_transceive_buffer_wait+0x98>
    13f0:	4e61      	ldr	r6, [pc, #388]	; (1578 <spi_transceive_buffer_wait+0x1ec>)
				if (spi_is_ready_to_write(module)) {
    13f2:	0020      	movs	r0, r4
    13f4:	4b61      	ldr	r3, [pc, #388]	; (157c <spi_transceive_buffer_wait+0x1f0>)
    13f6:	4798      	blx	r3
    13f8:	2800      	cmp	r0, #0
    13fa:	d102      	bne.n	1402 <spi_transceive_buffer_wait+0x76>
    13fc:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    13fe:	2e00      	cmp	r6, #0
    1400:	d1f7      	bne.n	13f2 <spi_transceive_buffer_wait+0x66>
			if (spi_is_write_complete(module)) {
    1402:	0020      	movs	r0, r4
    1404:	4b5b      	ldr	r3, [pc, #364]	; (1574 <spi_transceive_buffer_wait+0x1e8>)
    1406:	4798      	blx	r3
    1408:	2800      	cmp	r0, #0
    140a:	d005      	beq.n	1418 <spi_transceive_buffer_wait+0x8c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    140c:	2202      	movs	r2, #2
				return STATUS_ABORTED;
    140e:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    1410:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1412:	761a      	strb	r2, [r3, #24]
}
    1414:	b009      	add	sp, #36	; 0x24
    1416:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_write(module)) {
    1418:	0020      	movs	r0, r4
    141a:	4b58      	ldr	r3, [pc, #352]	; (157c <spi_transceive_buffer_wait+0x1f0>)
    141c:	4798      	blx	r3
    141e:	2800      	cmp	r0, #0
    1420:	d100      	bne.n	1424 <spi_transceive_buffer_wait+0x98>
    1422:	e0a4      	b.n	156e <spi_transceive_buffer_wait+0x1e2>
		while (!spi_is_ready_to_write(module)) {
    1424:	0020      	movs	r0, r4
    1426:	4b55      	ldr	r3, [pc, #340]	; (157c <spi_transceive_buffer_wait+0x1f0>)
    1428:	4798      	blx	r3
    142a:	2800      	cmp	r0, #0
    142c:	d0fa      	beq.n	1424 <spi_transceive_buffer_wait+0x98>
		uint16_t data_to_send = tx_data[tx_pos++];
    142e:	9b02      	ldr	r3, [sp, #8]
    1430:	1c7e      	adds	r6, r7, #1
    1432:	5dd9      	ldrb	r1, [r3, r7]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1434:	79a3      	ldrb	r3, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
    1436:	b2b6      	uxth	r6, r6
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1438:	2b01      	cmp	r3, #1
    143a:	d050      	beq.n	14de <spi_transceive_buffer_wait+0x152>
		uint16_t data_to_send = tx_data[tx_pos++];
    143c:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
    143e:	4b50      	ldr	r3, [pc, #320]	; (1580 <spi_transceive_buffer_wait+0x1f4>)
    1440:	0020      	movs	r0, r4
    1442:	4798      	blx	r3
		if (module->mode == SPI_MODE_SLAVE) {
    1444:	7963      	ldrb	r3, [r4, #5]
    1446:	2b00      	cmp	r3, #0
    1448:	d125      	bne.n	1496 <spi_transceive_buffer_wait+0x10a>
    144a:	4b4b      	ldr	r3, [pc, #300]	; (1578 <spi_transceive_buffer_wait+0x1ec>)
    144c:	9305      	str	r3, [sp, #20]
				if (spi_is_ready_to_write(module)) {
    144e:	0020      	movs	r0, r4
    1450:	4b4a      	ldr	r3, [pc, #296]	; (157c <spi_transceive_buffer_wait+0x1f0>)
    1452:	4798      	blx	r3
    1454:	2800      	cmp	r0, #0
    1456:	d00f      	beq.n	1478 <spi_transceive_buffer_wait+0xec>
					data_to_send = tx_data[tx_pos++];
    1458:	9b02      	ldr	r3, [sp, #8]
    145a:	1c77      	adds	r7, r6, #1
    145c:	5d99      	ldrb	r1, [r3, r6]
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    145e:	79a3      	ldrb	r3, [r4, #6]
					data_to_send = tx_data[tx_pos++];
    1460:	b2bf      	uxth	r7, r7
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1462:	2b01      	cmp	r3, #1
    1464:	d042      	beq.n	14ec <spi_transceive_buffer_wait+0x160>
					data_to_send = tx_data[tx_pos++];
    1466:	b289      	uxth	r1, r1
					length--;
    1468:	003e      	movs	r6, r7
					spi_write(module, data_to_send);
    146a:	4b45      	ldr	r3, [pc, #276]	; (1580 <spi_transceive_buffer_wait+0x1f4>)
    146c:	0020      	movs	r0, r4
    146e:	4798      	blx	r3
					length--;
    1470:	9b04      	ldr	r3, [sp, #16]
    1472:	3b01      	subs	r3, #1
    1474:	b29b      	uxth	r3, r3
    1476:	9304      	str	r3, [sp, #16]
				if (spi_is_ready_to_read(module)) {
    1478:	0020      	movs	r0, r4
    147a:	4b42      	ldr	r3, [pc, #264]	; (1584 <spi_transceive_buffer_wait+0x1f8>)
    147c:	4798      	blx	r3
    147e:	2800      	cmp	r0, #0
    1480:	d03b      	beq.n	14fa <spi_transceive_buffer_wait+0x16e>
			if (spi_is_write_complete(module)) {
    1482:	0020      	movs	r0, r4
    1484:	4b3b      	ldr	r3, [pc, #236]	; (1574 <spi_transceive_buffer_wait+0x1e8>)
    1486:	4798      	blx	r3
    1488:	2800      	cmp	r0, #0
    148a:	d1bf      	bne.n	140c <spi_transceive_buffer_wait+0x80>
			if (!spi_is_ready_to_read(module)) {
    148c:	0020      	movs	r0, r4
    148e:	4b3d      	ldr	r3, [pc, #244]	; (1584 <spi_transceive_buffer_wait+0x1f8>)
    1490:	4798      	blx	r3
    1492:	2800      	cmp	r0, #0
    1494:	d06b      	beq.n	156e <spi_transceive_buffer_wait+0x1e2>
		while (!spi_is_ready_to_read(module)) {
    1496:	0020      	movs	r0, r4
    1498:	4b3a      	ldr	r3, [pc, #232]	; (1584 <spi_transceive_buffer_wait+0x1f8>)
    149a:	4798      	blx	r3
    149c:	2800      	cmp	r0, #0
    149e:	d0fa      	beq.n	1496 <spi_transceive_buffer_wait+0x10a>
		uint16_t received_data = 0;
    14a0:	ab06      	add	r3, sp, #24
    14a2:	1d9f      	adds	r7, r3, #6
    14a4:	2300      	movs	r3, #0
    14a6:	803b      	strh	r3, [r7, #0]
		rx_length--;
    14a8:	9b01      	ldr	r3, [sp, #4]
		retval = spi_read(module, &received_data);
    14aa:	0039      	movs	r1, r7
		rx_length--;
    14ac:	3b01      	subs	r3, #1
    14ae:	b29b      	uxth	r3, r3
    14b0:	9301      	str	r3, [sp, #4]
		retval = spi_read(module, &received_data);
    14b2:	0020      	movs	r0, r4
    14b4:	4b34      	ldr	r3, [pc, #208]	; (1588 <spi_transceive_buffer_wait+0x1fc>)
    14b6:	4798      	blx	r3
		if (retval != STATUS_OK) {
    14b8:	2800      	cmp	r0, #0
    14ba:	d1ab      	bne.n	1414 <spi_transceive_buffer_wait+0x88>
		rx_data[rx_pos++] = received_data;
    14bc:	9903      	ldr	r1, [sp, #12]
    14be:	883a      	ldrh	r2, [r7, #0]
    14c0:	1c6b      	adds	r3, r5, #1
    14c2:	554a      	strb	r2, [r1, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14c4:	79a1      	ldrb	r1, [r4, #6]
		rx_data[rx_pos++] = received_data;
    14c6:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14c8:	2901      	cmp	r1, #1
    14ca:	d104      	bne.n	14d6 <spi_transceive_buffer_wait+0x14a>
			rx_data[rx_pos++] = (received_data >> 8);
    14cc:	9903      	ldr	r1, [sp, #12]
    14ce:	3502      	adds	r5, #2
    14d0:	0a12      	lsrs	r2, r2, #8
    14d2:	54ca      	strb	r2, [r1, r3]
    14d4:	b2ab      	uxth	r3, r5
    14d6:	0037      	movs	r7, r6
    14d8:	001d      	movs	r5, r3
    14da:	9e04      	ldr	r6, [sp, #16]
    14dc:	e777      	b.n	13ce <spi_transceive_buffer_wait+0x42>
			data_to_send |= (tx_data[tx_pos++] << 8);
    14de:	9b02      	ldr	r3, [sp, #8]
    14e0:	3702      	adds	r7, #2
    14e2:	5d9b      	ldrb	r3, [r3, r6]
    14e4:	b2be      	uxth	r6, r7
    14e6:	021b      	lsls	r3, r3, #8
    14e8:	4319      	orrs	r1, r3
    14ea:	e7a8      	b.n	143e <spi_transceive_buffer_wait+0xb2>
						data_to_send |= (tx_data[tx_pos++] << 8);
    14ec:	9b02      	ldr	r3, [sp, #8]
    14ee:	3602      	adds	r6, #2
    14f0:	5ddb      	ldrb	r3, [r3, r7]
    14f2:	b2b7      	uxth	r7, r6
    14f4:	021b      	lsls	r3, r3, #8
    14f6:	4319      	orrs	r1, r3
    14f8:	e7b6      	b.n	1468 <spi_transceive_buffer_wait+0xdc>
    14fa:	9b05      	ldr	r3, [sp, #20]
    14fc:	3b01      	subs	r3, #1
    14fe:	9305      	str	r3, [sp, #20]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1500:	2b00      	cmp	r3, #0
    1502:	d1a4      	bne.n	144e <spi_transceive_buffer_wait+0xc2>
    1504:	e7bd      	b.n	1482 <spi_transceive_buffer_wait+0xf6>
		while (!spi_is_write_complete(module)) {
    1506:	0020      	movs	r0, r4
    1508:	4b1a      	ldr	r3, [pc, #104]	; (1574 <spi_transceive_buffer_wait+0x1e8>)
    150a:	4798      	blx	r3
    150c:	2800      	cmp	r0, #0
    150e:	d0fa      	beq.n	1506 <spi_transceive_buffer_wait+0x17a>
    1510:	e766      	b.n	13e0 <spi_transceive_buffer_wait+0x54>
    1512:	4e19      	ldr	r6, [pc, #100]	; (1578 <spi_transceive_buffer_wait+0x1ec>)
				if (spi_is_ready_to_read(module)) {
    1514:	0020      	movs	r0, r4
    1516:	4f1b      	ldr	r7, [pc, #108]	; (1584 <spi_transceive_buffer_wait+0x1f8>)
    1518:	47b8      	blx	r7
    151a:	2800      	cmp	r0, #0
    151c:	d102      	bne.n	1524 <spi_transceive_buffer_wait+0x198>
    151e:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1520:	2e00      	cmp	r6, #0
    1522:	d1f7      	bne.n	1514 <spi_transceive_buffer_wait+0x188>
			if (!spi_is_ready_to_read(module)) {
    1524:	0020      	movs	r0, r4
    1526:	47b8      	blx	r7
    1528:	2800      	cmp	r0, #0
    152a:	d020      	beq.n	156e <spi_transceive_buffer_wait+0x1e2>
			uint16_t received_data = 0;
    152c:	ab06      	add	r3, sp, #24
    152e:	1d9e      	adds	r6, r3, #6
    1530:	2300      	movs	r3, #0
    1532:	8033      	strh	r3, [r6, #0]
			rx_length--;
    1534:	9b01      	ldr	r3, [sp, #4]
			retval = spi_read(module, &received_data);
    1536:	0031      	movs	r1, r6
			rx_length--;
    1538:	3b01      	subs	r3, #1
    153a:	b29b      	uxth	r3, r3
    153c:	9301      	str	r3, [sp, #4]
			retval = spi_read(module, &received_data);
    153e:	0020      	movs	r0, r4
    1540:	4b11      	ldr	r3, [pc, #68]	; (1588 <spi_transceive_buffer_wait+0x1fc>)
    1542:	4798      	blx	r3
			if (retval != STATUS_OK) {
    1544:	2800      	cmp	r0, #0
    1546:	d000      	beq.n	154a <spi_transceive_buffer_wait+0x1be>
    1548:	e764      	b.n	1414 <spi_transceive_buffer_wait+0x88>
			rx_data[rx_pos++] = received_data;
    154a:	9903      	ldr	r1, [sp, #12]
    154c:	8832      	ldrh	r2, [r6, #0]
    154e:	1c6b      	adds	r3, r5, #1
    1550:	554a      	strb	r2, [r1, r5]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1552:	79a1      	ldrb	r1, [r4, #6]
			rx_data[rx_pos++] = received_data;
    1554:	b29b      	uxth	r3, r3
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1556:	2901      	cmp	r1, #1
    1558:	d104      	bne.n	1564 <spi_transceive_buffer_wait+0x1d8>
				rx_data[rx_pos++] = (received_data >> 8);
    155a:	9903      	ldr	r1, [sp, #12]
    155c:	3502      	adds	r5, #2
    155e:	0a12      	lsrs	r2, r2, #8
    1560:	54ca      	strb	r2, [r1, r3]
    1562:	b2ab      	uxth	r3, r5
    1564:	001d      	movs	r5, r3
		while (rx_length) {
    1566:	9b01      	ldr	r3, [sp, #4]
    1568:	2b00      	cmp	r3, #0
    156a:	d1d2      	bne.n	1512 <spi_transceive_buffer_wait+0x186>
    156c:	e73c      	b.n	13e8 <spi_transceive_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
    156e:	2012      	movs	r0, #18
    1570:	e750      	b.n	1414 <spi_transceive_buffer_wait+0x88>
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	00000f49 	.word	0x00000f49
    1578:	00002711 	.word	0x00002711
    157c:	00000f53 	.word	0x00000f53
    1580:	00000f69 	.word	0x00000f69
    1584:	00000f5d 	.word	0x00000f5d
    1588:	00000f89 	.word	0x00000f89

0000158c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    158e:	4b7c      	ldr	r3, [pc, #496]	; (1780 <_spi_interrupt_handler+0x1f4>)
    1590:	0080      	lsls	r0, r0, #2
    1592:	58c4      	ldr	r4, [r0, r3]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1594:	0023      	movs	r3, r4
    1596:	0022      	movs	r2, r4
    1598:	3337      	adds	r3, #55	; 0x37
    159a:	3236      	adds	r2, #54	; 0x36
	SercomSpi *const spi_hw = &(module->hw->SPI);
    159c:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
    159e:	781b      	ldrb	r3, [r3, #0]
    15a0:	7816      	ldrb	r6, [r2, #0]
    15a2:	401e      	ands	r6, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    15a4:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    15a6:	7daf      	ldrb	r7, [r5, #22]
    15a8:	401f      	ands	r7, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    15aa:	07fb      	lsls	r3, r7, #31
    15ac:	d539      	bpl.n	1622 <_spi_interrupt_handler+0x96>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    15ae:	7962      	ldrb	r2, [r4, #5]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    15b0:	0013      	movs	r3, r2
		if ((module->mode == SPI_MODE_MASTER) &&
    15b2:	2a01      	cmp	r2, #1
    15b4:	d133      	bne.n	161e <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
    15b6:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    15b8:	2b00      	cmp	r3, #0
    15ba:	d10d      	bne.n	15d8 <_spi_interrupt_handler+0x4c>
	spi_hw->DATA.reg = dummy_write;
    15bc:	4b71      	ldr	r3, [pc, #452]	; (1784 <_spi_interrupt_handler+0x1f8>)
    15be:	881b      	ldrh	r3, [r3, #0]
    15c0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    15c2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    15c4:	3b01      	subs	r3, #1
    15c6:	b29b      	uxth	r3, r3
    15c8:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    15ca:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    15cc:	2b00      	cmp	r3, #0
    15ce:	d100      	bne.n	15d2 <_spi_interrupt_handler+0x46>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    15d0:	752a      	strb	r2, [r5, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    15d2:	7963      	ldrb	r3, [r4, #5]
		if (0
    15d4:	2b01      	cmp	r3, #1
    15d6:	d122      	bne.n	161e <_spi_interrupt_handler+0x92>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
    15d8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    15da:	2b00      	cmp	r3, #0
    15dc:	d021      	beq.n	1622 <_spi_interrupt_handler+0x96>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    15de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
    15e0:	6822      	ldr	r2, [r4, #0]
	(module->tx_buffer_ptr)++;
    15e2:	1c48      	adds	r0, r1, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    15e4:	780b      	ldrb	r3, [r1, #0]
	(module->tx_buffer_ptr)++;
    15e6:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15e8:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    15ea:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15ec:	2801      	cmp	r0, #1
    15ee:	d100      	bne.n	15f2 <_spi_interrupt_handler+0x66>
    15f0:	e074      	b.n	16dc <_spi_interrupt_handler+0x150>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    15f2:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    15f4:	05db      	lsls	r3, r3, #23
    15f6:	0ddb      	lsrs	r3, r3, #23
    15f8:	6293      	str	r3, [r2, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    15fa:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    15fc:	3b01      	subs	r3, #1
    15fe:	b29b      	uxth	r3, r3
    1600:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1602:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1604:	2b00      	cmp	r3, #0
    1606:	d10c      	bne.n	1622 <_spi_interrupt_handler+0x96>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1608:	3301      	adds	r3, #1
    160a:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    160c:	7a63      	ldrb	r3, [r4, #9]
    160e:	2b01      	cmp	r3, #1
    1610:	d107      	bne.n	1622 <_spi_interrupt_handler+0x96>
    1612:	79e3      	ldrb	r3, [r4, #7]
    1614:	2b00      	cmp	r3, #0
    1616:	d104      	bne.n	1622 <_spi_interrupt_handler+0x96>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1618:	3302      	adds	r3, #2
    161a:	75ab      	strb	r3, [r5, #22]
    161c:	e001      	b.n	1622 <_spi_interrupt_handler+0x96>
		|| ((module->mode == SPI_MODE_SLAVE) &&
    161e:	2b00      	cmp	r3, #0
    1620:	d0da      	beq.n	15d8 <_spi_interrupt_handler+0x4c>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1622:	2104      	movs	r1, #4
    1624:	420f      	tst	r7, r1
    1626:	d015      	beq.n	1654 <_spi_interrupt_handler+0xc8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1628:	8b6b      	ldrh	r3, [r5, #26]
    162a:	420b      	tst	r3, r1
    162c:	d05c      	beq.n	16e8 <_spi_interrupt_handler+0x15c>
			if (module->dir != SPI_DIRECTION_WRITE) {
    162e:	7a63      	ldrb	r3, [r4, #9]
    1630:	2b01      	cmp	r3, #1
    1632:	d00c      	beq.n	164e <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1634:	0023      	movs	r3, r4
    1636:	221e      	movs	r2, #30
    1638:	3338      	adds	r3, #56	; 0x38
    163a:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    163c:	2303      	movs	r3, #3
    163e:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1640:	3302      	adds	r3, #2
    1642:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1644:	0733      	lsls	r3, r6, #28
    1646:	d502      	bpl.n	164e <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1648:	0020      	movs	r0, r4
    164a:	69a3      	ldr	r3, [r4, #24]
    164c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    164e:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1650:	2304      	movs	r3, #4
    1652:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1654:	2202      	movs	r2, #2
    1656:	4217      	tst	r7, r2
    1658:	d027      	beq.n	16aa <_spi_interrupt_handler+0x11e>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    165a:	7963      	ldrb	r3, [r4, #5]
    165c:	2b00      	cmp	r3, #0
    165e:	d10e      	bne.n	167e <_spi_interrupt_handler+0xf2>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1660:	2107      	movs	r1, #7
    1662:	7529      	strb	r1, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1664:	762a      	strb	r2, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1666:	3201      	adds	r2, #1
    1668:	7262      	strb	r2, [r4, #9]
			module->remaining_tx_buffer_length = 0;
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;
    166a:	0022      	movs	r2, r4
    166c:	3238      	adds	r2, #56	; 0x38
			module->remaining_tx_buffer_length = 0;
    166e:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1670:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1672:	7013      	strb	r3, [r2, #0]

			if (callback_mask &
    1674:	06f3      	lsls	r3, r6, #27
    1676:	d502      	bpl.n	167e <_spi_interrupt_handler+0xf2>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1678:	0020      	movs	r0, r4
    167a:	69e3      	ldr	r3, [r4, #28]
    167c:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    167e:	7963      	ldrb	r3, [r4, #5]
    1680:	2b01      	cmp	r3, #1
    1682:	d112      	bne.n	16aa <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1684:	7a63      	ldrb	r3, [r4, #9]
    1686:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    1688:	2b01      	cmp	r3, #1
    168a:	d10e      	bne.n	16aa <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    168c:	79e2      	ldrb	r2, [r4, #7]
    168e:	2a00      	cmp	r2, #0
    1690:	d10b      	bne.n	16aa <_spi_interrupt_handler+0x11e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1692:	2102      	movs	r1, #2
    1694:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1696:	3101      	adds	r1, #1
    1698:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
    169a:	0021      	movs	r1, r4
    169c:	3138      	adds	r1, #56	; 0x38
    169e:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    16a0:	421e      	tst	r6, r3
    16a2:	d002      	beq.n	16aa <_spi_interrupt_handler+0x11e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    16a4:	0020      	movs	r0, r4
    16a6:	68e3      	ldr	r3, [r4, #12]
    16a8:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    16aa:	2308      	movs	r3, #8
    16ac:	421f      	tst	r7, r3
    16ae:	d009      	beq.n	16c4 <_spi_interrupt_handler+0x138>
			if (module->mode == SPI_MODE_SLAVE) {
    16b0:	7962      	ldrb	r2, [r4, #5]
    16b2:	2a00      	cmp	r2, #0
    16b4:	d106      	bne.n	16c4 <_spi_interrupt_handler+0x138>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    16b6:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    16b8:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    16ba:	06b3      	lsls	r3, r6, #26
    16bc:	d502      	bpl.n	16c4 <_spi_interrupt_handler+0x138>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    16be:	0020      	movs	r0, r4
    16c0:	6a23      	ldr	r3, [r4, #32]
    16c2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    16c4:	b27f      	sxtb	r7, r7
    16c6:	2f00      	cmp	r7, #0
    16c8:	da07      	bge.n	16da <_spi_interrupt_handler+0x14e>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    16ca:	2380      	movs	r3, #128	; 0x80
    16cc:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    16ce:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    16d0:	0673      	lsls	r3, r6, #25
    16d2:	d502      	bpl.n	16da <_spi_interrupt_handler+0x14e>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    16d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    16d6:	0020      	movs	r0, r4
    16d8:	4798      	blx	r3
		}
	}
#  endif
}
    16da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    16dc:	7848      	ldrb	r0, [r1, #1]
		(module->tx_buffer_ptr)++;
    16de:	3102      	adds	r1, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    16e0:	0200      	lsls	r0, r0, #8
    16e2:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    16e4:	62e1      	str	r1, [r4, #44]	; 0x2c
    16e6:	e785      	b.n	15f4 <_spi_interrupt_handler+0x68>
			if (module->dir == SPI_DIRECTION_WRITE) {
    16e8:	7a62      	ldrb	r2, [r4, #9]
    16ea:	6823      	ldr	r3, [r4, #0]
    16ec:	b2d2      	uxtb	r2, r2
	flush = spi_hw->DATA.reg;
    16ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
    16f0:	2a01      	cmp	r2, #1
    16f2:	d113      	bne.n	171c <_spi_interrupt_handler+0x190>
	module->remaining_dummy_buffer_length--;
    16f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    16f6:	3b01      	subs	r3, #1
    16f8:	b29b      	uxth	r3, r3
    16fa:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    16fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    16fe:	b29b      	uxth	r3, r3
    1700:	2b00      	cmp	r3, #0
    1702:	d1a7      	bne.n	1654 <_spi_interrupt_handler+0xc8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1704:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
    1706:	0021      	movs	r1, r4
    1708:	3138      	adds	r1, #56	; 0x38
    170a:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
    170c:	3303      	adds	r3, #3
    170e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1710:	4216      	tst	r6, r2
    1712:	d09f      	beq.n	1654 <_spi_interrupt_handler+0xc8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1714:	0020      	movs	r0, r4
    1716:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1718:	4798      	blx	r3
    171a:	e79b      	b.n	1654 <_spi_interrupt_handler+0xc8>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    171c:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    171e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1720:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1722:	b2da      	uxtb	r2, r3
    1724:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1726:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1728:	1c51      	adds	r1, r2, #1
    172a:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    172c:	79a1      	ldrb	r1, [r4, #6]
    172e:	2901      	cmp	r1, #1
    1730:	d104      	bne.n	173c <_spi_interrupt_handler+0x1b0>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1732:	0a1b      	lsrs	r3, r3, #8
    1734:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1738:	3301      	adds	r3, #1
    173a:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
    173c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    173e:	3b01      	subs	r3, #1
    1740:	b29b      	uxth	r3, r3
    1742:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1744:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1746:	b29b      	uxth	r3, r3
    1748:	2b00      	cmp	r3, #0
    174a:	d000      	beq.n	174e <_spi_interrupt_handler+0x1c2>
    174c:	e782      	b.n	1654 <_spi_interrupt_handler+0xc8>
					module->status = STATUS_OK;
    174e:	0022      	movs	r2, r4
    1750:	3238      	adds	r2, #56	; 0x38
    1752:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1754:	3304      	adds	r3, #4
    1756:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1758:	7a62      	ldrb	r2, [r4, #9]
    175a:	2a02      	cmp	r2, #2
    175c:	d105      	bne.n	176a <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    175e:	421e      	tst	r6, r3
    1760:	d100      	bne.n	1764 <_spi_interrupt_handler+0x1d8>
    1762:	e777      	b.n	1654 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1764:	0020      	movs	r0, r4
    1766:	6963      	ldr	r3, [r4, #20]
    1768:	e7d6      	b.n	1718 <_spi_interrupt_handler+0x18c>
					} else if (module->dir == SPI_DIRECTION_READ) {
    176a:	7a63      	ldrb	r3, [r4, #9]
    176c:	2b00      	cmp	r3, #0
    176e:	d000      	beq.n	1772 <_spi_interrupt_handler+0x1e6>
    1770:	e770      	b.n	1654 <_spi_interrupt_handler+0xc8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1772:	07b3      	lsls	r3, r6, #30
    1774:	d400      	bmi.n	1778 <_spi_interrupt_handler+0x1ec>
    1776:	e76d      	b.n	1654 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1778:	0020      	movs	r0, r4
    177a:	6923      	ldr	r3, [r4, #16]
    177c:	e7cc      	b.n	1718 <_spi_interrupt_handler+0x18c>
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	200001a8 	.word	0x200001a8
    1784:	200001a4 	.word	0x200001a4

00001788 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1788:	4770      	bx	lr
	...

0000178c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    178c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    178e:	4c09      	ldr	r4, [pc, #36]	; (17b4 <_sercom_set_handler+0x28>)
    1790:	4a09      	ldr	r2, [pc, #36]	; (17b8 <_sercom_set_handler+0x2c>)
    1792:	7823      	ldrb	r3, [r4, #0]
    1794:	2b00      	cmp	r3, #0
    1796:	d109      	bne.n	17ac <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    1798:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    179a:	4f08      	ldr	r7, [pc, #32]	; (17bc <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    179c:	4d08      	ldr	r5, [pc, #32]	; (17c0 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    179e:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    17a0:	50ee      	str	r6, [r5, r3]
    17a2:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17a4:	2b18      	cmp	r3, #24
    17a6:	d1fa      	bne.n	179e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    17a8:	3b17      	subs	r3, #23
    17aa:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    17ac:	0080      	lsls	r0, r0, #2
    17ae:	5011      	str	r1, [r2, r0]
}
    17b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	2000012b 	.word	0x2000012b
    17b8:	2000012c 	.word	0x2000012c
    17bc:	00001789 	.word	0x00001789
    17c0:	200001a8 	.word	0x200001a8

000017c4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    17c4:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    17c6:	2309      	movs	r3, #9
    17c8:	466a      	mov	r2, sp
    17ca:	7013      	strb	r3, [r2, #0]
    17cc:	3301      	adds	r3, #1
    17ce:	7053      	strb	r3, [r2, #1]
    17d0:	3301      	adds	r3, #1
    17d2:	7093      	strb	r3, [r2, #2]
    17d4:	3301      	adds	r3, #1
    17d6:	70d3      	strb	r3, [r2, #3]
    17d8:	3301      	adds	r3, #1
    17da:	7113      	strb	r3, [r2, #4]
    17dc:	3301      	adds	r3, #1
    17de:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    17e0:	4b02      	ldr	r3, [pc, #8]	; (17ec <_sercom_get_interrupt_vector+0x28>)
    17e2:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    17e4:	466b      	mov	r3, sp
    17e6:	5618      	ldrsb	r0, [r3, r0]
}
    17e8:	bd0e      	pop	{r1, r2, r3, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	000009a1 	.word	0x000009a1

000017f0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    17f0:	b510      	push	{r4, lr}
    17f2:	4b02      	ldr	r3, [pc, #8]	; (17fc <SERCOM0_Handler+0xc>)
    17f4:	2000      	movs	r0, #0
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	4798      	blx	r3
    17fa:	bd10      	pop	{r4, pc}
    17fc:	2000012c 	.word	0x2000012c

00001800 <SERCOM1_Handler>:
    1800:	b510      	push	{r4, lr}
    1802:	4b02      	ldr	r3, [pc, #8]	; (180c <SERCOM1_Handler+0xc>)
    1804:	2001      	movs	r0, #1
    1806:	685b      	ldr	r3, [r3, #4]
    1808:	4798      	blx	r3
    180a:	bd10      	pop	{r4, pc}
    180c:	2000012c 	.word	0x2000012c

00001810 <SERCOM2_Handler>:
    1810:	b510      	push	{r4, lr}
    1812:	4b02      	ldr	r3, [pc, #8]	; (181c <SERCOM2_Handler+0xc>)
    1814:	2002      	movs	r0, #2
    1816:	689b      	ldr	r3, [r3, #8]
    1818:	4798      	blx	r3
    181a:	bd10      	pop	{r4, pc}
    181c:	2000012c 	.word	0x2000012c

00001820 <SERCOM3_Handler>:
    1820:	b510      	push	{r4, lr}
    1822:	4b02      	ldr	r3, [pc, #8]	; (182c <SERCOM3_Handler+0xc>)
    1824:	2003      	movs	r0, #3
    1826:	68db      	ldr	r3, [r3, #12]
    1828:	4798      	blx	r3
    182a:	bd10      	pop	{r4, pc}
    182c:	2000012c 	.word	0x2000012c

00001830 <SERCOM4_Handler>:
    1830:	b510      	push	{r4, lr}
    1832:	4b02      	ldr	r3, [pc, #8]	; (183c <SERCOM4_Handler+0xc>)
    1834:	2004      	movs	r0, #4
    1836:	691b      	ldr	r3, [r3, #16]
    1838:	4798      	blx	r3
    183a:	bd10      	pop	{r4, pc}
    183c:	2000012c 	.word	0x2000012c

00001840 <SERCOM5_Handler>:
    1840:	b510      	push	{r4, lr}
    1842:	4b02      	ldr	r3, [pc, #8]	; (184c <SERCOM5_Handler+0xc>)
    1844:	2005      	movs	r0, #5
    1846:	695b      	ldr	r3, [r3, #20]
    1848:	4798      	blx	r3
    184a:	bd10      	pop	{r4, pc}
    184c:	2000012c 	.word	0x2000012c

00001850 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1850:	4770      	bx	lr
	...

00001854 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1854:	4b09      	ldr	r3, [pc, #36]	; (187c <cpu_irq_enter_critical+0x28>)
    1856:	6819      	ldr	r1, [r3, #0]
    1858:	2900      	cmp	r1, #0
    185a:	d10b      	bne.n	1874 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    185c:	f3ef 8010 	mrs	r0, PRIMASK
    1860:	4a07      	ldr	r2, [pc, #28]	; (1880 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
    1862:	2800      	cmp	r0, #0
    1864:	d105      	bne.n	1872 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
    1866:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1868:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    186c:	4905      	ldr	r1, [pc, #20]	; (1884 <cpu_irq_enter_critical+0x30>)
    186e:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
    1870:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1872:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1874:	681a      	ldr	r2, [r3, #0]
    1876:	3201      	adds	r2, #1
    1878:	601a      	str	r2, [r3, #0]
}
    187a:	4770      	bx	lr
    187c:	20000144 	.word	0x20000144
    1880:	20000148 	.word	0x20000148
    1884:	20000018 	.word	0x20000018

00001888 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1888:	4b08      	ldr	r3, [pc, #32]	; (18ac <cpu_irq_leave_critical+0x24>)
    188a:	681a      	ldr	r2, [r3, #0]
    188c:	3a01      	subs	r2, #1
    188e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1890:	681b      	ldr	r3, [r3, #0]
    1892:	2b00      	cmp	r3, #0
    1894:	d109      	bne.n	18aa <cpu_irq_leave_critical+0x22>
    1896:	4b06      	ldr	r3, [pc, #24]	; (18b0 <cpu_irq_leave_critical+0x28>)
    1898:	781b      	ldrb	r3, [r3, #0]
    189a:	2b00      	cmp	r3, #0
    189c:	d005      	beq.n	18aa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    189e:	2201      	movs	r2, #1
    18a0:	4b04      	ldr	r3, [pc, #16]	; (18b4 <cpu_irq_leave_critical+0x2c>)
    18a2:	701a      	strb	r2, [r3, #0]
    18a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    18a8:	b662      	cpsie	i
	}
}
    18aa:	4770      	bx	lr
    18ac:	20000144 	.word	0x20000144
    18b0:	20000148 	.word	0x20000148
    18b4:	20000018 	.word	0x20000018

000018b8 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    18b8:	2310      	movs	r3, #16
    18ba:	4902      	ldr	r1, [pc, #8]	; (18c4 <_system_dfll_wait_for_sync+0xc>)
    18bc:	68ca      	ldr	r2, [r1, #12]
    18be:	421a      	tst	r2, r3
    18c0:	d0fc      	beq.n	18bc <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    18c2:	4770      	bx	lr
    18c4:	40000800 	.word	0x40000800

000018c8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    18c8:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    18ca:	2808      	cmp	r0, #8
    18cc:	d806      	bhi.n	18dc <system_clock_source_get_hz+0x14>
    18ce:	f000 fb9b 	bl	2008 <__gnu_thumb1_case_uqi>
    18d2:	0508      	.short	0x0508
    18d4:	122e2e05 	.word	0x122e2e05
    18d8:	150b      	.short	0x150b
    18da:	26          	.byte	0x26
    18db:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    18dc:	2400      	movs	r4, #0
	}
}
    18de:	0020      	movs	r0, r4
    18e0:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    18e2:	4b15      	ldr	r3, [pc, #84]	; (1938 <system_clock_source_get_hz+0x70>)
    18e4:	691c      	ldr	r4, [r3, #16]
    18e6:	e7fa      	b.n	18de <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    18e8:	4b14      	ldr	r3, [pc, #80]	; (193c <system_clock_source_get_hz+0x74>)
    18ea:	4c15      	ldr	r4, [pc, #84]	; (1940 <system_clock_source_get_hz+0x78>)
    18ec:	6a1b      	ldr	r3, [r3, #32]
    18ee:	059b      	lsls	r3, r3, #22
    18f0:	0f9b      	lsrs	r3, r3, #30
    18f2:	40dc      	lsrs	r4, r3
    18f4:	e7f3      	b.n	18de <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    18f6:	4b10      	ldr	r3, [pc, #64]	; (1938 <system_clock_source_get_hz+0x70>)
    18f8:	695c      	ldr	r4, [r3, #20]
    18fa:	e7f0      	b.n	18de <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    18fc:	4d0e      	ldr	r5, [pc, #56]	; (1938 <system_clock_source_get_hz+0x70>)
			return 0;
    18fe:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1900:	682b      	ldr	r3, [r5, #0]
    1902:	079b      	lsls	r3, r3, #30
    1904:	d5eb      	bpl.n	18de <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    1906:	4b0f      	ldr	r3, [pc, #60]	; (1944 <system_clock_source_get_hz+0x7c>)
    1908:	4798      	blx	r3
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    190a:	682b      	ldr	r3, [r5, #0]
    190c:	075b      	lsls	r3, r3, #29
    190e:	d511      	bpl.n	1934 <system_clock_source_get_hz+0x6c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1910:	0020      	movs	r0, r4
    1912:	4b0d      	ldr	r3, [pc, #52]	; (1948 <system_clock_source_get_hz+0x80>)
    1914:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1916:	68ac      	ldr	r4, [r5, #8]
    1918:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    191a:	4344      	muls	r4, r0
    191c:	e7df      	b.n	18de <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    191e:	4b0b      	ldr	r3, [pc, #44]	; (194c <system_clock_source_get_hz+0x84>)
			return 0;
    1920:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1922:	781b      	ldrb	r3, [r3, #0]
    1924:	075b      	lsls	r3, r3, #29
    1926:	d5da      	bpl.n	18de <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    1928:	4b03      	ldr	r3, [pc, #12]	; (1938 <system_clock_source_get_hz+0x70>)
    192a:	68dc      	ldr	r4, [r3, #12]
    192c:	e7d7      	b.n	18de <system_clock_source_get_hz+0x16>
		return 32768UL;
    192e:	2480      	movs	r4, #128	; 0x80
    1930:	0224      	lsls	r4, r4, #8
    1932:	e7d4      	b.n	18de <system_clock_source_get_hz+0x16>
		return 48000000UL;
    1934:	4c06      	ldr	r4, [pc, #24]	; (1950 <system_clock_source_get_hz+0x88>)
    1936:	e7d2      	b.n	18de <system_clock_source_get_hz+0x16>
    1938:	2000014c 	.word	0x2000014c
    193c:	40000800 	.word	0x40000800
    1940:	007a1200 	.word	0x007a1200
    1944:	000018b9 	.word	0x000018b9
    1948:	00001ced 	.word	0x00001ced
    194c:	40000850 	.word	0x40000850
    1950:	02dc6c00 	.word	0x02dc6c00

00001954 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1954:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
    1956:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    1958:	7802      	ldrb	r2, [r0, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    195a:	7845      	ldrb	r5, [r0, #1]
    195c:	2001      	movs	r0, #1
    195e:	2640      	movs	r6, #64	; 0x40
    1960:	4005      	ands	r5, r0
    1962:	4020      	ands	r0, r4
    1964:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1966:	4908      	ldr	r1, [pc, #32]	; (1988 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    1968:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    196a:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    196c:	01c0      	lsls	r0, r0, #7
    196e:	43b3      	bics	r3, r6
    1970:	432b      	orrs	r3, r5
    1972:	43a3      	bics	r3, r4
    1974:	4303      	orrs	r3, r0
    1976:	2003      	movs	r0, #3
    1978:	4002      	ands	r2, r0
    197a:	4804      	ldr	r0, [pc, #16]	; (198c <system_clock_source_osc8m_set_config+0x38>)
    197c:	0212      	lsls	r2, r2, #8
    197e:	4003      	ands	r3, r0
    1980:	4313      	orrs	r3, r2
    1982:	620b      	str	r3, [r1, #32]
}
    1984:	bd70      	pop	{r4, r5, r6, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	40000800 	.word	0x40000800
    198c:	fffffcff 	.word	0xfffffcff

00001990 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (clock_source) {
    1992:	2808      	cmp	r0, #8
    1994:	d806      	bhi.n	19a4 <system_clock_source_enable+0x14>
    1996:	f000 fb37 	bl	2008 <__gnu_thumb1_case_uqi>
    199a:	0514      	.short	0x0514
    199c:	1a0e0c05 	.word	0x1a0e0c05
    19a0:	2007      	.short	0x2007
    19a2:	34          	.byte	0x34
    19a3:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    19a4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    19a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    19a8:	2302      	movs	r3, #2
    19aa:	4a19      	ldr	r2, [pc, #100]	; (1a10 <system_clock_source_enable+0x80>)
    19ac:	6a11      	ldr	r1, [r2, #32]
    19ae:	430b      	orrs	r3, r1
    19b0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    19b2:	2000      	movs	r0, #0
    19b4:	e7f7      	b.n	19a6 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    19b6:	2302      	movs	r3, #2
    19b8:	4a15      	ldr	r2, [pc, #84]	; (1a10 <system_clock_source_enable+0x80>)
    19ba:	6991      	ldr	r1, [r2, #24]
    19bc:	430b      	orrs	r3, r1
    19be:	6193      	str	r3, [r2, #24]
    19c0:	e7f7      	b.n	19b2 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    19c2:	2302      	movs	r3, #2
    19c4:	4a12      	ldr	r2, [pc, #72]	; (1a10 <system_clock_source_enable+0x80>)
    19c6:	8a11      	ldrh	r1, [r2, #16]
    19c8:	430b      	orrs	r3, r1
    19ca:	8213      	strh	r3, [r2, #16]
    19cc:	e7f1      	b.n	19b2 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    19ce:	2302      	movs	r3, #2
    19d0:	4a0f      	ldr	r2, [pc, #60]	; (1a10 <system_clock_source_enable+0x80>)
    19d2:	8a91      	ldrh	r1, [r2, #20]
    19d4:	430b      	orrs	r3, r1
    19d6:	8293      	strh	r3, [r2, #20]
    19d8:	e7eb      	b.n	19b2 <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    19da:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
    19dc:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    19de:	4e0d      	ldr	r6, [pc, #52]	; (1a14 <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    19e0:	4d0b      	ldr	r5, [pc, #44]	; (1a10 <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    19e2:	6833      	ldr	r3, [r6, #0]
	_system_dfll_wait_for_sync();
    19e4:	4f0c      	ldr	r7, [pc, #48]	; (1a18 <system_clock_source_enable+0x88>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    19e6:	4313      	orrs	r3, r2
    19e8:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    19ea:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    19ec:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    19ee:	68b3      	ldr	r3, [r6, #8]
    19f0:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    19f2:	6873      	ldr	r3, [r6, #4]
    19f4:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    19f6:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    19f8:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    19fa:	6833      	ldr	r3, [r6, #0]
    19fc:	b29b      	uxth	r3, r3
    19fe:	84ab      	strh	r3, [r5, #36]	; 0x24
    1a00:	e7d7      	b.n	19b2 <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1a02:	2302      	movs	r3, #2
    1a04:	4a05      	ldr	r2, [pc, #20]	; (1a1c <system_clock_source_enable+0x8c>)
    1a06:	7811      	ldrb	r1, [r2, #0]
    1a08:	430b      	orrs	r3, r1
    1a0a:	7013      	strb	r3, [r2, #0]
    1a0c:	e7d1      	b.n	19b2 <system_clock_source_enable+0x22>
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	40000800 	.word	0x40000800
    1a14:	2000014c 	.word	0x2000014c
    1a18:	000018b9 	.word	0x000018b9
    1a1c:	40000844 	.word	0x40000844

00001a20 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1a20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1a22:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1a24:	211e      	movs	r1, #30
    1a26:	4b19      	ldr	r3, [pc, #100]	; (1a8c <system_clock_init+0x6c>)
    1a28:	00d2      	lsls	r2, r2, #3
    1a2a:	609a      	str	r2, [r3, #8]
    1a2c:	4a18      	ldr	r2, [pc, #96]	; (1a90 <system_clock_init+0x70>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a2e:	2400      	movs	r4, #0
    1a30:	6853      	ldr	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1a32:	ad01      	add	r5, sp, #4
    1a34:	438b      	bics	r3, r1
    1a36:	6053      	str	r3, [r2, #4]
    1a38:	2301      	movs	r3, #1
    1a3a:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a3c:	b2e0      	uxtb	r0, r4
    1a3e:	0029      	movs	r1, r5
    1a40:	4b14      	ldr	r3, [pc, #80]	; (1a94 <system_clock_init+0x74>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a42:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a44:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a46:	2c25      	cmp	r4, #37	; 0x25
    1a48:	d1f8      	bne.n	1a3c <system_clock_init+0x1c>
	config->run_in_standby  = false;
    1a4a:	2400      	movs	r4, #0
    1a4c:	466b      	mov	r3, sp
	config->on_demand       = true;
    1a4e:	2601      	movs	r6, #1
	config->run_in_standby  = false;
    1a50:	705c      	strb	r4, [r3, #1]
	config->on_demand       = true;
    1a52:	709e      	strb	r6, [r3, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1a54:	701c      	strb	r4, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1a56:	4668      	mov	r0, sp
    1a58:	4b0f      	ldr	r3, [pc, #60]	; (1a98 <system_clock_init+0x78>)
    1a5a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1a5c:	4b0f      	ldr	r3, [pc, #60]	; (1a9c <system_clock_init+0x7c>)
    1a5e:	2006      	movs	r0, #6
    1a60:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1a62:	4b0f      	ldr	r3, [pc, #60]	; (1aa0 <system_clock_init+0x80>)
    1a64:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1a66:	4b0f      	ldr	r3, [pc, #60]	; (1aa4 <system_clock_init+0x84>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a68:	0029      	movs	r1, r5
    1a6a:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1a6c:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1a6e:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1a70:	72dc      	strb	r4, [r3, #11]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1a72:	2306      	movs	r3, #6
    1a74:	0020      	movs	r0, r4
    1a76:	702b      	strb	r3, [r5, #0]
    1a78:	4b0b      	ldr	r3, [pc, #44]	; (1aa8 <system_clock_init+0x88>)
	config->division_factor    = 1;
    1a7a:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    1a7c:	706c      	strb	r4, [r5, #1]
#endif
	config->run_in_standby     = false;
    1a7e:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    1a80:	726c      	strb	r4, [r5, #9]
    1a82:	4798      	blx	r3
    1a84:	0020      	movs	r0, r4
    1a86:	4b09      	ldr	r3, [pc, #36]	; (1aac <system_clock_init+0x8c>)
    1a88:	4798      	blx	r3
#endif
}
    1a8a:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    1a8c:	40000800 	.word	0x40000800
    1a90:	41004000 	.word	0x41004000
    1a94:	00001cd1 	.word	0x00001cd1
    1a98:	00001955 	.word	0x00001955
    1a9c:	00001991 	.word	0x00001991
    1aa0:	00001abd 	.word	0x00001abd
    1aa4:	40000400 	.word	0x40000400
    1aa8:	00001add 	.word	0x00001add
    1aac:	00001b81 	.word	0x00001b81

00001ab0 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ab0:	4b01      	ldr	r3, [pc, #4]	; (1ab8 <system_gclk_is_syncing+0x8>)
    1ab2:	7858      	ldrb	r0, [r3, #1]
    1ab4:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    1ab6:	4770      	bx	lr
    1ab8:	40000c00 	.word	0x40000c00

00001abc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1abc:	2308      	movs	r3, #8
    1abe:	4a05      	ldr	r2, [pc, #20]	; (1ad4 <system_gclk_init+0x18>)
    1ac0:	6991      	ldr	r1, [r2, #24]
    1ac2:	430b      	orrs	r3, r1
    1ac4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ac6:	2301      	movs	r3, #1
    1ac8:	4a03      	ldr	r2, [pc, #12]	; (1ad8 <system_gclk_init+0x1c>)
    1aca:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1acc:	7811      	ldrb	r1, [r2, #0]
    1ace:	4219      	tst	r1, r3
    1ad0:	d1fc      	bne.n	1acc <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1ad2:	4770      	bx	lr
    1ad4:	40000400 	.word	0x40000400
    1ad8:	40000c00 	.word	0x40000c00

00001adc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ade:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1ae0:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ae2:	0224      	lsls	r4, r4, #8
{
    1ae4:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1ae6:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ae8:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    1aea:	2b00      	cmp	r3, #0
    1aec:	d002      	beq.n	1af4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1aee:	2380      	movs	r3, #128	; 0x80
    1af0:	02db      	lsls	r3, r3, #11
    1af2:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1af4:	7a4b      	ldrb	r3, [r1, #9]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d002      	beq.n	1b00 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1afa:	2380      	movs	r3, #128	; 0x80
    1afc:	031b      	lsls	r3, r3, #12
    1afe:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1b00:	684b      	ldr	r3, [r1, #4]
    1b02:	2b01      	cmp	r3, #1
    1b04:	d912      	bls.n	1b2c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1b06:	1e5d      	subs	r5, r3, #1
    1b08:	401d      	ands	r5, r3
    1b0a:	2202      	movs	r2, #2
    1b0c:	2d00      	cmp	r5, #0
    1b0e:	d006      	beq.n	1b1e <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1b10:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b12:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    1b14:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b16:	029b      	lsls	r3, r3, #10
    1b18:	e007      	b.n	1b2a <system_gclk_gen_set_config+0x4e>
				div2_count++;
    1b1a:	3501      	adds	r5, #1
						mask <<= 1) {
    1b1c:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1b1e:	429a      	cmp	r2, r3
    1b20:	d3fb      	bcc.n	1b1a <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1b22:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1b24:	022d      	lsls	r5, r5, #8
    1b26:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1b28:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b2a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1b2c:	7a0b      	ldrb	r3, [r1, #8]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d002      	beq.n	1b38 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1b32:	2380      	movs	r3, #128	; 0x80
    1b34:	039b      	lsls	r3, r3, #14
    1b36:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    1b38:	4f0c      	ldr	r7, [pc, #48]	; (1b6c <system_gclk_gen_set_config+0x90>)
    1b3a:	47b8      	blx	r7
    1b3c:	2800      	cmp	r0, #0
    1b3e:	d1fb      	bne.n	1b38 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1b40:	4b0b      	ldr	r3, [pc, #44]	; (1b70 <system_gclk_gen_set_config+0x94>)
    1b42:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b44:	4b0b      	ldr	r3, [pc, #44]	; (1b74 <system_gclk_gen_set_config+0x98>)
    1b46:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1b48:	47b8      	blx	r7
    1b4a:	2800      	cmp	r0, #0
    1b4c:	d1fc      	bne.n	1b48 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1b4e:	4b0a      	ldr	r3, [pc, #40]	; (1b78 <system_gclk_gen_set_config+0x9c>)
    1b50:	609d      	str	r5, [r3, #8]
    1b52:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    1b54:	47b8      	blx	r7
    1b56:	2800      	cmp	r0, #0
    1b58:	d1fc      	bne.n	1b54 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1b5a:	2280      	movs	r2, #128	; 0x80
    1b5c:	686b      	ldr	r3, [r5, #4]
    1b5e:	0252      	lsls	r2, r2, #9
    1b60:	4013      	ands	r3, r2
    1b62:	431c      	orrs	r4, r3
    1b64:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    1b66:	4b05      	ldr	r3, [pc, #20]	; (1b7c <system_gclk_gen_set_config+0xa0>)
    1b68:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b6c:	00001ab1 	.word	0x00001ab1
    1b70:	00001855 	.word	0x00001855
    1b74:	40000c08 	.word	0x40000c08
    1b78:	40000c00 	.word	0x40000c00
    1b7c:	00001889 	.word	0x00001889

00001b80 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b80:	b570      	push	{r4, r5, r6, lr}
    1b82:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    1b84:	4c09      	ldr	r4, [pc, #36]	; (1bac <system_gclk_gen_enable+0x2c>)
    1b86:	47a0      	blx	r4
    1b88:	2800      	cmp	r0, #0
    1b8a:	d1fb      	bne.n	1b84 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1b8c:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <system_gclk_gen_enable+0x30>)
    1b8e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b90:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <system_gclk_gen_enable+0x34>)
    1b92:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    1b94:	47a0      	blx	r4
    1b96:	2800      	cmp	r0, #0
    1b98:	d1fc      	bne.n	1b94 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b9a:	2380      	movs	r3, #128	; 0x80
    1b9c:	4a06      	ldr	r2, [pc, #24]	; (1bb8 <system_gclk_gen_enable+0x38>)
    1b9e:	025b      	lsls	r3, r3, #9
    1ba0:	6851      	ldr	r1, [r2, #4]
    1ba2:	430b      	orrs	r3, r1
    1ba4:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <system_gclk_gen_enable+0x3c>)
    1ba8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1baa:	bd70      	pop	{r4, r5, r6, pc}
    1bac:	00001ab1 	.word	0x00001ab1
    1bb0:	00001855 	.word	0x00001855
    1bb4:	40000c04 	.word	0x40000c04
    1bb8:	40000c00 	.word	0x40000c00
    1bbc:	00001889 	.word	0x00001889

00001bc0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1bc2:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    1bc4:	4e18      	ldr	r6, [pc, #96]	; (1c28 <system_gclk_gen_get_hz+0x68>)
    1bc6:	47b0      	blx	r6
    1bc8:	2800      	cmp	r0, #0
    1bca:	d1fb      	bne.n	1bc4 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1bcc:	4b17      	ldr	r3, [pc, #92]	; (1c2c <system_gclk_gen_get_hz+0x6c>)
    1bce:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1bd0:	4b17      	ldr	r3, [pc, #92]	; (1c30 <system_gclk_gen_get_hz+0x70>)
    1bd2:	701f      	strb	r7, [r3, #0]
    1bd4:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    1bd6:	47b0      	blx	r6
    1bd8:	2800      	cmp	r0, #0
    1bda:	d1fc      	bne.n	1bd6 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1bdc:	4d15      	ldr	r5, [pc, #84]	; (1c34 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1bde:	4b16      	ldr	r3, [pc, #88]	; (1c38 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1be0:	6868      	ldr	r0, [r5, #4]
    1be2:	04c0      	lsls	r0, r0, #19
    1be4:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1be6:	4798      	blx	r3
    1be8:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1bea:	9b01      	ldr	r3, [sp, #4]
    1bec:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1bee:	686b      	ldr	r3, [r5, #4]
    1bf0:	02db      	lsls	r3, r3, #11
    1bf2:	0fdb      	lsrs	r3, r3, #31
    1bf4:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1bf6:	4b11      	ldr	r3, [pc, #68]	; (1c3c <system_gclk_gen_get_hz+0x7c>)
    1bf8:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    1bfa:	47b0      	blx	r6
    1bfc:	2800      	cmp	r0, #0
    1bfe:	d1fc      	bne.n	1bfa <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1c00:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    1c02:	4b0f      	ldr	r3, [pc, #60]	; (1c40 <system_gclk_gen_get_hz+0x80>)
    1c04:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1c06:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1c08:	022d      	lsls	r5, r5, #8
    1c0a:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d108      	bne.n	1c22 <system_gclk_gen_get_hz+0x62>
    1c10:	2d01      	cmp	r5, #1
    1c12:	d904      	bls.n	1c1e <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    1c14:	0020      	movs	r0, r4
    1c16:	0029      	movs	r1, r5
    1c18:	4b0a      	ldr	r3, [pc, #40]	; (1c44 <system_gclk_gen_get_hz+0x84>)
    1c1a:	4798      	blx	r3
    1c1c:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    1c1e:	0020      	movs	r0, r4
    1c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    1c22:	3501      	adds	r5, #1
    1c24:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    1c26:	e7fa      	b.n	1c1e <system_gclk_gen_get_hz+0x5e>
    1c28:	00001ab1 	.word	0x00001ab1
    1c2c:	00001855 	.word	0x00001855
    1c30:	40000c04 	.word	0x40000c04
    1c34:	40000c00 	.word	0x40000c00
    1c38:	000018c9 	.word	0x000018c9
    1c3c:	40000c08 	.word	0x40000c08
    1c40:	00001889 	.word	0x00001889
    1c44:	0000201d 	.word	0x0000201d

00001c48 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1c48:	b510      	push	{r4, lr}
    1c4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c4c:	4b06      	ldr	r3, [pc, #24]	; (1c68 <system_gclk_chan_enable+0x20>)
    1c4e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c50:	4b06      	ldr	r3, [pc, #24]	; (1c6c <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c52:	4a07      	ldr	r2, [pc, #28]	; (1c70 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c54:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c56:	2380      	movs	r3, #128	; 0x80
    1c58:	8851      	ldrh	r1, [r2, #2]
    1c5a:	01db      	lsls	r3, r3, #7
    1c5c:	430b      	orrs	r3, r1
    1c5e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1c60:	4b04      	ldr	r3, [pc, #16]	; (1c74 <system_gclk_chan_enable+0x2c>)
    1c62:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c64:	bd10      	pop	{r4, pc}
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	00001855 	.word	0x00001855
    1c6c:	40000c02 	.word	0x40000c02
    1c70:	40000c00 	.word	0x40000c00
    1c74:	00001889 	.word	0x00001889

00001c78 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c78:	b510      	push	{r4, lr}
    1c7a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c7c:	4b0e      	ldr	r3, [pc, #56]	; (1cb8 <system_gclk_chan_disable+0x40>)
    1c7e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c80:	4b0e      	ldr	r3, [pc, #56]	; (1cbc <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    1c82:	4a0f      	ldr	r2, [pc, #60]	; (1cc0 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c84:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c86:	4b0f      	ldr	r3, [pc, #60]	; (1cc4 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c88:	4c0f      	ldr	r4, [pc, #60]	; (1cc8 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c8a:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1c8c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c8e:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1c90:	4011      	ands	r1, r2
    1c92:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c94:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c96:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c98:	4021      	ands	r1, r4
    1c9a:	8059      	strh	r1, [r3, #2]
    1c9c:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c9e:	2280      	movs	r2, #128	; 0x80
    1ca0:	01d2      	lsls	r2, r2, #7
    1ca2:	885c      	ldrh	r4, [r3, #2]
    1ca4:	4214      	tst	r4, r2
    1ca6:	d1fc      	bne.n	1ca2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ca8:	885a      	ldrh	r2, [r3, #2]
    1caa:	0200      	lsls	r0, r0, #8
    1cac:	400a      	ands	r2, r1
    1cae:	4302      	orrs	r2, r0
    1cb0:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1cb2:	4b06      	ldr	r3, [pc, #24]	; (1ccc <system_gclk_chan_disable+0x54>)
    1cb4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cb6:	bd10      	pop	{r4, pc}
    1cb8:	00001855 	.word	0x00001855
    1cbc:	40000c02 	.word	0x40000c02
    1cc0:	fffff0ff 	.word	0xfffff0ff
    1cc4:	40000c00 	.word	0x40000c00
    1cc8:	ffffbfff 	.word	0xffffbfff
    1ccc:	00001889 	.word	0x00001889

00001cd0 <system_gclk_chan_set_config>:
{
    1cd0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1cd2:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    1cd4:	4b03      	ldr	r3, [pc, #12]	; (1ce4 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1cd6:	0224      	lsls	r4, r4, #8
    1cd8:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1cda:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1cdc:	4b02      	ldr	r3, [pc, #8]	; (1ce8 <system_gclk_chan_set_config+0x18>)
    1cde:	b2a4      	uxth	r4, r4
    1ce0:	805c      	strh	r4, [r3, #2]
}
    1ce2:	bd10      	pop	{r4, pc}
    1ce4:	00001c79 	.word	0x00001c79
    1ce8:	40000c00 	.word	0x40000c00

00001cec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1cec:	b510      	push	{r4, lr}
    1cee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1cf0:	4b06      	ldr	r3, [pc, #24]	; (1d0c <system_gclk_chan_get_hz+0x20>)
    1cf2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1cf4:	4b06      	ldr	r3, [pc, #24]	; (1d10 <system_gclk_chan_get_hz+0x24>)
    1cf6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1cf8:	4b06      	ldr	r3, [pc, #24]	; (1d14 <system_gclk_chan_get_hz+0x28>)
    1cfa:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1cfc:	4b06      	ldr	r3, [pc, #24]	; (1d18 <system_gclk_chan_get_hz+0x2c>)
    1cfe:	0524      	lsls	r4, r4, #20
    1d00:	0f24      	lsrs	r4, r4, #28
    1d02:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d04:	0020      	movs	r0, r4
    1d06:	4b05      	ldr	r3, [pc, #20]	; (1d1c <system_gclk_chan_get_hz+0x30>)
    1d08:	4798      	blx	r3
}
    1d0a:	bd10      	pop	{r4, pc}
    1d0c:	00001855 	.word	0x00001855
    1d10:	40000c02 	.word	0x40000c02
    1d14:	40000c00 	.word	0x40000c00
    1d18:	00001889 	.word	0x00001889
    1d1c:	00001bc1 	.word	0x00001bc1

00001d20 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d20:	78d3      	ldrb	r3, [r2, #3]
{
    1d22:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    1d24:	2b00      	cmp	r3, #0
    1d26:	d135      	bne.n	1d94 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d28:	7814      	ldrb	r4, [r2, #0]
    1d2a:	2c80      	cmp	r4, #128	; 0x80
    1d2c:	d003      	beq.n	1d36 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d2e:	2380      	movs	r3, #128	; 0x80
    1d30:	0624      	lsls	r4, r4, #24
    1d32:	025b      	lsls	r3, r3, #9
    1d34:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d36:	2502      	movs	r5, #2
    1d38:	7854      	ldrb	r4, [r2, #1]
    1d3a:	43ac      	bics	r4, r5
    1d3c:	d106      	bne.n	1d4c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d3e:	7894      	ldrb	r4, [r2, #2]
    1d40:	2c00      	cmp	r4, #0
    1d42:	d124      	bne.n	1d8e <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d44:	2480      	movs	r4, #128	; 0x80
    1d46:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d48:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d4a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d4c:	7854      	ldrb	r4, [r2, #1]
    1d4e:	3c01      	subs	r4, #1
    1d50:	2c01      	cmp	r4, #1
    1d52:	d801      	bhi.n	1d58 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d54:	4c12      	ldr	r4, [pc, #72]	; (1da0 <_system_pinmux_config+0x80>)
    1d56:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d58:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d5a:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d5c:	05e4      	lsls	r4, r4, #23
    1d5e:	432c      	orrs	r4, r5
    1d60:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d62:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d64:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d66:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d68:	0624      	lsls	r4, r4, #24
    1d6a:	432c      	orrs	r4, r5
    1d6c:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d6e:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d70:	78d4      	ldrb	r4, [r2, #3]
    1d72:	2c00      	cmp	r4, #0
    1d74:	d10a      	bne.n	1d8c <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d76:	035b      	lsls	r3, r3, #13
    1d78:	d503      	bpl.n	1d82 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d7a:	7893      	ldrb	r3, [r2, #2]
    1d7c:	2b01      	cmp	r3, #1
    1d7e:	d10c      	bne.n	1d9a <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1d80:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d82:	7853      	ldrb	r3, [r2, #1]
    1d84:	3b01      	subs	r3, #1
    1d86:	2b01      	cmp	r3, #1
    1d88:	d800      	bhi.n	1d8c <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1d8a:	6081      	str	r1, [r0, #8]
		}
	}
}
    1d8c:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d8e:	24c0      	movs	r4, #192	; 0xc0
    1d90:	02e4      	lsls	r4, r4, #11
    1d92:	e7d9      	b.n	1d48 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1d94:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1d96:	2300      	movs	r3, #0
    1d98:	e7de      	b.n	1d58 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    1d9a:	6141      	str	r1, [r0, #20]
    1d9c:	e7f1      	b.n	1d82 <_system_pinmux_config+0x62>
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	fffbffff 	.word	0xfffbffff

00001da4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1da4:	b510      	push	{r4, lr}
    1da6:	0003      	movs	r3, r0
    1da8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);
    1daa:	0944      	lsrs	r4, r0, #5
	if (port_index < PORT_INST_NUM) {
    1dac:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1dae:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1db0:	4281      	cmp	r1, r0
    1db2:	d102      	bne.n	1dba <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1db4:	4904      	ldr	r1, [pc, #16]	; (1dc8 <system_pinmux_pin_set_config+0x24>)
    1db6:	01e0      	lsls	r0, r4, #7
    1db8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1dba:	211f      	movs	r1, #31
    1dbc:	400b      	ands	r3, r1
    1dbe:	391e      	subs	r1, #30
    1dc0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1dc2:	4b02      	ldr	r3, [pc, #8]	; (1dcc <system_pinmux_pin_set_config+0x28>)
    1dc4:	4798      	blx	r3
}
    1dc6:	bd10      	pop	{r4, pc}
    1dc8:	41004400 	.word	0x41004400
    1dcc:	00001d21 	.word	0x00001d21

00001dd0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1dd0:	4770      	bx	lr
	...

00001dd4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1dd4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1dd6:	4b05      	ldr	r3, [pc, #20]	; (1dec <system_init+0x18>)
    1dd8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1dda:	4b05      	ldr	r3, [pc, #20]	; (1df0 <system_init+0x1c>)
    1ddc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1dde:	4b05      	ldr	r3, [pc, #20]	; (1df4 <system_init+0x20>)
    1de0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1de2:	4b05      	ldr	r3, [pc, #20]	; (1df8 <system_init+0x24>)
    1de4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1de6:	4b05      	ldr	r3, [pc, #20]	; (1dfc <system_init+0x28>)
    1de8:	4798      	blx	r3
}
    1dea:	bd10      	pop	{r4, pc}
    1dec:	00001a21 	.word	0x00001a21
    1df0:	00001851 	.word	0x00001851
    1df4:	00001dd1 	.word	0x00001dd1
    1df8:	00001dd1 	.word	0x00001dd1
    1dfc:	00001dd1 	.word	0x00001dd1

00001e00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1e00:	e7fe      	b.n	1e00 <Dummy_Handler>
	...

00001e04 <Reset_Handler>:
        if (pSrc != pDest) {
    1e04:	4821      	ldr	r0, [pc, #132]	; (1e8c <Reset_Handler+0x88>)
    1e06:	4922      	ldr	r1, [pc, #136]	; (1e90 <Reset_Handler+0x8c>)
{
    1e08:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1e0a:	4288      	cmp	r0, r1
    1e0c:	d004      	beq.n	1e18 <Reset_Handler+0x14>
    1e0e:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1e10:	4c20      	ldr	r4, [pc, #128]	; (1e94 <Reset_Handler+0x90>)
    1e12:	18ca      	adds	r2, r1, r3
    1e14:	42a2      	cmp	r2, r4
    1e16:	d332      	bcc.n	1e7e <Reset_Handler+0x7a>
                *pDest++ = 0;
    1e18:	2100      	movs	r1, #0
    1e1a:	4b1f      	ldr	r3, [pc, #124]	; (1e98 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1e1c:	4a1f      	ldr	r2, [pc, #124]	; (1e9c <Reset_Handler+0x98>)
    1e1e:	4293      	cmp	r3, r2
    1e20:	d331      	bcc.n	1e86 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1e22:	21ff      	movs	r1, #255	; 0xff
    1e24:	4b1e      	ldr	r3, [pc, #120]	; (1ea0 <Reset_Handler+0x9c>)
    1e26:	4a1f      	ldr	r2, [pc, #124]	; (1ea4 <Reset_Handler+0xa0>)
    1e28:	438b      	bics	r3, r1
    1e2a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e2c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e2e:	250c      	movs	r5, #12
    1e30:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e32:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e34:	4b1c      	ldr	r3, [pc, #112]	; (1ea8 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1e36:	481d      	ldr	r0, [pc, #116]	; (1eac <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e38:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1e3a:	78c3      	ldrb	r3, [r0, #3]
    1e3c:	39fc      	subs	r1, #252	; 0xfc
    1e3e:	438b      	bics	r3, r1
    1e40:	4313      	orrs	r3, r2
    1e42:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e44:	78c3      	ldrb	r3, [r0, #3]
    1e46:	43ab      	bics	r3, r5
    1e48:	4323      	orrs	r3, r4
    1e4a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e4c:	4b18      	ldr	r3, [pc, #96]	; (1eb0 <Reset_Handler+0xac>)
    1e4e:	7b98      	ldrb	r0, [r3, #14]
    1e50:	43b0      	bics	r0, r6
    1e52:	0006      	movs	r6, r0
    1e54:	2020      	movs	r0, #32
    1e56:	4330      	orrs	r0, r6
    1e58:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e5a:	7b98      	ldrb	r0, [r3, #14]
    1e5c:	43a8      	bics	r0, r5
    1e5e:	4304      	orrs	r4, r0
    1e60:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e62:	7b98      	ldrb	r0, [r3, #14]
    1e64:	4388      	bics	r0, r1
    1e66:	4302      	orrs	r2, r0
    1e68:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e6a:	2380      	movs	r3, #128	; 0x80
    1e6c:	4a11      	ldr	r2, [pc, #68]	; (1eb4 <Reset_Handler+0xb0>)
    1e6e:	6851      	ldr	r1, [r2, #4]
    1e70:	430b      	orrs	r3, r1
    1e72:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e74:	4b10      	ldr	r3, [pc, #64]	; (1eb8 <Reset_Handler+0xb4>)
    1e76:	4798      	blx	r3
        main();
    1e78:	4b10      	ldr	r3, [pc, #64]	; (1ebc <Reset_Handler+0xb8>)
    1e7a:	4798      	blx	r3
    1e7c:	e7fe      	b.n	1e7c <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1e7e:	58c5      	ldr	r5, [r0, r3]
    1e80:	3304      	adds	r3, #4
    1e82:	6015      	str	r5, [r2, #0]
    1e84:	e7c5      	b.n	1e12 <Reset_Handler+0xe>
                *pDest++ = 0;
    1e86:	c302      	stmia	r3!, {r1}
    1e88:	e7c9      	b.n	1e1e <Reset_Handler+0x1a>
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	000022f4 	.word	0x000022f4
    1e90:	20000000 	.word	0x20000000
    1e94:	2000001c 	.word	0x2000001c
    1e98:	2000001c 	.word	0x2000001c
    1e9c:	200001c0 	.word	0x200001c0
    1ea0:	00000000 	.word	0x00000000
    1ea4:	e000ed00 	.word	0xe000ed00
    1ea8:	410070fc 	.word	0x410070fc
    1eac:	41005000 	.word	0x41005000
    1eb0:	41004800 	.word	0x41004800
    1eb4:	41004000 	.word	0x41004000
    1eb8:	000021a1 	.word	0x000021a1
    1ebc:	00001ffd 	.word	0x00001ffd

00001ec0 <conf_port_pin>:
	config->direction  = PORT_PIN_DIR_INPUT;
    1ec0:	2300      	movs	r3, #0
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ec4:	ac01      	add	r4, sp, #4
	config->input_pull = PORT_PIN_PULL_UP;
    1ec6:	2701      	movs	r7, #1
	config->direction  = PORT_PIN_DIR_INPUT;
    1ec8:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    1eca:	2300      	movs	r3, #0
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1ecc:	4d20      	ldr	r5, [pc, #128]	; (1f50 <conf_port_pin+0x90>)
    1ece:	0021      	movs	r1, r4
    1ed0:	200b      	movs	r0, #11
    1ed2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1ed4:	7067      	strb	r7, [r4, #1]
    1ed6:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS245, &config_port_pin);
    1ed8:	0021      	movs	r1, r4
    1eda:	200a      	movs	r0, #10
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1edc:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    1ede:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1ee0:	2380      	movs	r3, #128	; 0x80
    1ee2:	4e1c      	ldr	r6, [pc, #112]	; (1f54 <conf_port_pin+0x94>)
    1ee4:	00db      	lsls	r3, r3, #3
    1ee6:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    1ee8:	0021      	movs	r1, r4
    1eea:	2005      	movs	r0, #5
    1eec:	47a8      	blx	r5
    1eee:	2320      	movs	r3, #32
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    1ef0:	0021      	movs	r1, r4
    1ef2:	61b3      	str	r3, [r6, #24]
    1ef4:	2006      	movs	r0, #6
    1ef6:	47a8      	blx	r5
    1ef8:	2340      	movs	r3, #64	; 0x40
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    1efa:	0021      	movs	r1, r4
    1efc:	61b3      	str	r3, [r6, #24]
    1efe:	2007      	movs	r0, #7
    1f00:	47a8      	blx	r5
    1f02:	2380      	movs	r3, #128	; 0x80
    1f04:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1f06:	2300      	movs	r3, #0
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS915, &config_port_pin);
    1f08:	0021      	movs	r1, r4
    1f0a:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1f0c:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1f0e:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    1f10:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS915, &config_port_pin);
    1f12:	0021      	movs	r1, r4
    1f14:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1f16:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    1f18:	47a8      	blx	r5
    1f1a:	2304      	movs	r3, #4
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
	port_pin_set_config(WAKE915, &config_port_pin);
    1f1c:	0021      	movs	r1, r4
    1f1e:	61b3      	str	r3, [r6, #24]
    1f20:	202f      	movs	r0, #47	; 0x2f
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1f22:	3b02      	subs	r3, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1f24:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1f26:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1f28:	47a8      	blx	r5
    1f2a:	0033      	movs	r3, r6
    1f2c:	2280      	movs	r2, #128	; 0x80
    1f2e:	3398      	adds	r3, #152	; 0x98
    1f30:	0212      	lsls	r2, r2, #8
    1f32:	601a      	str	r2, [r3, #0]
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS169, &config_port_pin);
    1f34:	0021      	movs	r1, r4
    1f36:	2011      	movs	r0, #17
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1f38:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1f3a:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(SS169, &config_port_pin);
    1f3c:	47a8      	blx	r5
    1f3e:	2380      	movs	r3, #128	; 0x80
    1f40:	029b      	lsls	r3, r3, #10
    1f42:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(SS169, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1f44:	2300      	movs	r3, #0
	port_pin_set_config(IRQ169, &config_port_pin);
    1f46:	0021      	movs	r1, r4
    1f48:	2030      	movs	r0, #48	; 0x30
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1f4a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ169, &config_port_pin);
    1f4c:	47a8      	blx	r5
} // end conf_port_pin(void)
    1f4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f50:	000006b5 	.word	0x000006b5
    1f54:	41004400 	.word	0x41004400

00001f58 <clk_osc8m_init>:

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1f58:	2300      	movs	r3, #0
{
    1f5a:	b507      	push	{r0, r1, r2, lr}
	osc8_config.on_demand = true;
    1f5c:	2201      	movs	r2, #1
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1f5e:	a801      	add	r0, sp, #4
    1f60:	7003      	strb	r3, [r0, #0]
	osc8_config.run_in_standby = false;
    1f62:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1f64:	4b01      	ldr	r3, [pc, #4]	; (1f6c <clk_osc8m_init+0x14>)
	osc8_config.on_demand = true;
    1f66:	7082      	strb	r2, [r0, #2]
	system_clock_source_osc8m_set_config(&osc8_config);
    1f68:	4798      	blx	r3
}
    1f6a:	bd07      	pop	{r0, r1, r2, pc}
    1f6c:	00001955 	.word	0x00001955

00001f70 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	PM->CPUSEL.reg = (uint32_t)divider;
    1f72:	2400      	movs	r4, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1f74:	4b09      	ldr	r3, [pc, #36]	; (1f9c <clk_gclk0_init+0x2c>)
    1f76:	4798      	blx	r3
    1f78:	4b09      	ldr	r3, [pc, #36]	; (1fa0 <clk_gclk0_init+0x30>)
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    1f7a:	a901      	add	r1, sp, #4
    1f7c:	721c      	strb	r4, [r3, #8]
    1f7e:	2306      	movs	r3, #6
    1f80:	700b      	strb	r3, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1f82:	3b05      	subs	r3, #5
    1f84:	604b      	str	r3, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1f86:	0020      	movs	r0, r4
    1f88:	4b06      	ldr	r3, [pc, #24]	; (1fa4 <clk_gclk0_init+0x34>)
	gclk0_config.output_enable = false;
    1f8a:	724c      	strb	r4, [r1, #9]
	gclk0_config.high_when_disabled = false;
    1f8c:	704c      	strb	r4, [r1, #1]
	gclk0_config.run_in_standby = false;
    1f8e:	720c      	strb	r4, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1f90:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1f92:	0020      	movs	r0, r4
    1f94:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <clk_gclk0_init+0x38>)
    1f96:	4798      	blx	r3
}
    1f98:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	00001abd 	.word	0x00001abd
    1fa0:	40000400 	.word	0x40000400
    1fa4:	00001add 	.word	0x00001add
    1fa8:	00001b81 	.word	0x00001b81

00001fac <sys_clk_init>:
{
    1fac:	b510      	push	{r4, lr}
	clk_osc8m_init();
    1fae:	4b03      	ldr	r3, [pc, #12]	; (1fbc <sys_clk_init+0x10>)
    1fb0:	4798      	blx	r3
	clk_gclk0_init();
    1fb2:	4b03      	ldr	r3, [pc, #12]	; (1fc0 <sys_clk_init+0x14>)
    1fb4:	4798      	blx	r3
    delay_init();
    1fb6:	4b03      	ldr	r3, [pc, #12]	; (1fc4 <sys_clk_init+0x18>)
    1fb8:	4798      	blx	r3
}
    1fba:	bd10      	pop	{r4, pc}
    1fbc:	00001f59 	.word	0x00001f59
    1fc0:	00001f71 	.word	0x00001f71
    1fc4:	00000649 	.word	0x00000649

00001fc8 <simSysInit>:
{
    1fc8:	b510      	push	{r4, lr}
	system_init();
    1fca:	4b06      	ldr	r3, [pc, #24]	; (1fe4 <simSysInit+0x1c>)
    1fcc:	4798      	blx	r3
	sys_clk_init();
    1fce:	4b06      	ldr	r3, [pc, #24]	; (1fe8 <simSysInit+0x20>)
    1fd0:	4798      	blx	r3
	conf_port_pin();
    1fd2:	4b06      	ldr	r3, [pc, #24]	; (1fec <simSysInit+0x24>)
    1fd4:	4798      	blx	r3
	spi27_init();
    1fd6:	4b06      	ldr	r3, [pc, #24]	; (1ff0 <simSysInit+0x28>)
    1fd8:	4798      	blx	r3
    uart245_init();
    1fda:	4b06      	ldr	r3, [pc, #24]	; (1ff4 <simSysInit+0x2c>)
    1fdc:	4798      	blx	r3
    uart915_init();
    1fde:	4b06      	ldr	r3, [pc, #24]	; (1ff8 <simSysInit+0x30>)
    1fe0:	4798      	blx	r3
}
    1fe2:	bd10      	pop	{r4, pc}
    1fe4:	00001dd5 	.word	0x00001dd5
    1fe8:	00001fad 	.word	0x00001fad
    1fec:	00001ec1 	.word	0x00001ec1
    1ff0:	00000241 	.word	0x00000241
    1ff4:	00000381 	.word	0x00000381
    1ff8:	00000579 	.word	0x00000579

00001ffc <main>:
{
    1ffc:	b510      	push	{r4, lr}
    simSysInit();
    1ffe:	4b01      	ldr	r3, [pc, #4]	; (2004 <STACK_SIZE+0x4>)
    2000:	4798      	blx	r3
    2002:	e7fe      	b.n	2002 <STACK_SIZE+0x2>
    2004:	00001fc9 	.word	0x00001fc9

00002008 <__gnu_thumb1_case_uqi>:
    2008:	b402      	push	{r1}
    200a:	4671      	mov	r1, lr
    200c:	0849      	lsrs	r1, r1, #1
    200e:	0049      	lsls	r1, r1, #1
    2010:	5c09      	ldrb	r1, [r1, r0]
    2012:	0049      	lsls	r1, r1, #1
    2014:	448e      	add	lr, r1
    2016:	bc02      	pop	{r1}
    2018:	4770      	bx	lr
    201a:	46c0      	nop			; (mov r8, r8)

0000201c <__udivsi3>:
    201c:	2200      	movs	r2, #0
    201e:	0843      	lsrs	r3, r0, #1
    2020:	428b      	cmp	r3, r1
    2022:	d374      	bcc.n	210e <__udivsi3+0xf2>
    2024:	0903      	lsrs	r3, r0, #4
    2026:	428b      	cmp	r3, r1
    2028:	d35f      	bcc.n	20ea <__udivsi3+0xce>
    202a:	0a03      	lsrs	r3, r0, #8
    202c:	428b      	cmp	r3, r1
    202e:	d344      	bcc.n	20ba <__udivsi3+0x9e>
    2030:	0b03      	lsrs	r3, r0, #12
    2032:	428b      	cmp	r3, r1
    2034:	d328      	bcc.n	2088 <__udivsi3+0x6c>
    2036:	0c03      	lsrs	r3, r0, #16
    2038:	428b      	cmp	r3, r1
    203a:	d30d      	bcc.n	2058 <__udivsi3+0x3c>
    203c:	22ff      	movs	r2, #255	; 0xff
    203e:	0209      	lsls	r1, r1, #8
    2040:	ba12      	rev	r2, r2
    2042:	0c03      	lsrs	r3, r0, #16
    2044:	428b      	cmp	r3, r1
    2046:	d302      	bcc.n	204e <__udivsi3+0x32>
    2048:	1212      	asrs	r2, r2, #8
    204a:	0209      	lsls	r1, r1, #8
    204c:	d065      	beq.n	211a <__udivsi3+0xfe>
    204e:	0b03      	lsrs	r3, r0, #12
    2050:	428b      	cmp	r3, r1
    2052:	d319      	bcc.n	2088 <__udivsi3+0x6c>
    2054:	e000      	b.n	2058 <__udivsi3+0x3c>
    2056:	0a09      	lsrs	r1, r1, #8
    2058:	0bc3      	lsrs	r3, r0, #15
    205a:	428b      	cmp	r3, r1
    205c:	d301      	bcc.n	2062 <__udivsi3+0x46>
    205e:	03cb      	lsls	r3, r1, #15
    2060:	1ac0      	subs	r0, r0, r3
    2062:	4152      	adcs	r2, r2
    2064:	0b83      	lsrs	r3, r0, #14
    2066:	428b      	cmp	r3, r1
    2068:	d301      	bcc.n	206e <__udivsi3+0x52>
    206a:	038b      	lsls	r3, r1, #14
    206c:	1ac0      	subs	r0, r0, r3
    206e:	4152      	adcs	r2, r2
    2070:	0b43      	lsrs	r3, r0, #13
    2072:	428b      	cmp	r3, r1
    2074:	d301      	bcc.n	207a <__udivsi3+0x5e>
    2076:	034b      	lsls	r3, r1, #13
    2078:	1ac0      	subs	r0, r0, r3
    207a:	4152      	adcs	r2, r2
    207c:	0b03      	lsrs	r3, r0, #12
    207e:	428b      	cmp	r3, r1
    2080:	d301      	bcc.n	2086 <__udivsi3+0x6a>
    2082:	030b      	lsls	r3, r1, #12
    2084:	1ac0      	subs	r0, r0, r3
    2086:	4152      	adcs	r2, r2
    2088:	0ac3      	lsrs	r3, r0, #11
    208a:	428b      	cmp	r3, r1
    208c:	d301      	bcc.n	2092 <__udivsi3+0x76>
    208e:	02cb      	lsls	r3, r1, #11
    2090:	1ac0      	subs	r0, r0, r3
    2092:	4152      	adcs	r2, r2
    2094:	0a83      	lsrs	r3, r0, #10
    2096:	428b      	cmp	r3, r1
    2098:	d301      	bcc.n	209e <__udivsi3+0x82>
    209a:	028b      	lsls	r3, r1, #10
    209c:	1ac0      	subs	r0, r0, r3
    209e:	4152      	adcs	r2, r2
    20a0:	0a43      	lsrs	r3, r0, #9
    20a2:	428b      	cmp	r3, r1
    20a4:	d301      	bcc.n	20aa <__udivsi3+0x8e>
    20a6:	024b      	lsls	r3, r1, #9
    20a8:	1ac0      	subs	r0, r0, r3
    20aa:	4152      	adcs	r2, r2
    20ac:	0a03      	lsrs	r3, r0, #8
    20ae:	428b      	cmp	r3, r1
    20b0:	d301      	bcc.n	20b6 <__udivsi3+0x9a>
    20b2:	020b      	lsls	r3, r1, #8
    20b4:	1ac0      	subs	r0, r0, r3
    20b6:	4152      	adcs	r2, r2
    20b8:	d2cd      	bcs.n	2056 <__udivsi3+0x3a>
    20ba:	09c3      	lsrs	r3, r0, #7
    20bc:	428b      	cmp	r3, r1
    20be:	d301      	bcc.n	20c4 <__udivsi3+0xa8>
    20c0:	01cb      	lsls	r3, r1, #7
    20c2:	1ac0      	subs	r0, r0, r3
    20c4:	4152      	adcs	r2, r2
    20c6:	0983      	lsrs	r3, r0, #6
    20c8:	428b      	cmp	r3, r1
    20ca:	d301      	bcc.n	20d0 <__udivsi3+0xb4>
    20cc:	018b      	lsls	r3, r1, #6
    20ce:	1ac0      	subs	r0, r0, r3
    20d0:	4152      	adcs	r2, r2
    20d2:	0943      	lsrs	r3, r0, #5
    20d4:	428b      	cmp	r3, r1
    20d6:	d301      	bcc.n	20dc <__udivsi3+0xc0>
    20d8:	014b      	lsls	r3, r1, #5
    20da:	1ac0      	subs	r0, r0, r3
    20dc:	4152      	adcs	r2, r2
    20de:	0903      	lsrs	r3, r0, #4
    20e0:	428b      	cmp	r3, r1
    20e2:	d301      	bcc.n	20e8 <__udivsi3+0xcc>
    20e4:	010b      	lsls	r3, r1, #4
    20e6:	1ac0      	subs	r0, r0, r3
    20e8:	4152      	adcs	r2, r2
    20ea:	08c3      	lsrs	r3, r0, #3
    20ec:	428b      	cmp	r3, r1
    20ee:	d301      	bcc.n	20f4 <__udivsi3+0xd8>
    20f0:	00cb      	lsls	r3, r1, #3
    20f2:	1ac0      	subs	r0, r0, r3
    20f4:	4152      	adcs	r2, r2
    20f6:	0883      	lsrs	r3, r0, #2
    20f8:	428b      	cmp	r3, r1
    20fa:	d301      	bcc.n	2100 <__udivsi3+0xe4>
    20fc:	008b      	lsls	r3, r1, #2
    20fe:	1ac0      	subs	r0, r0, r3
    2100:	4152      	adcs	r2, r2
    2102:	0843      	lsrs	r3, r0, #1
    2104:	428b      	cmp	r3, r1
    2106:	d301      	bcc.n	210c <__udivsi3+0xf0>
    2108:	004b      	lsls	r3, r1, #1
    210a:	1ac0      	subs	r0, r0, r3
    210c:	4152      	adcs	r2, r2
    210e:	1a41      	subs	r1, r0, r1
    2110:	d200      	bcs.n	2114 <__udivsi3+0xf8>
    2112:	4601      	mov	r1, r0
    2114:	4152      	adcs	r2, r2
    2116:	4610      	mov	r0, r2
    2118:	4770      	bx	lr
    211a:	e7ff      	b.n	211c <__udivsi3+0x100>
    211c:	b501      	push	{r0, lr}
    211e:	2000      	movs	r0, #0
    2120:	f000 f806 	bl	2130 <__aeabi_idiv0>
    2124:	bd02      	pop	{r1, pc}
    2126:	46c0      	nop			; (mov r8, r8)

00002128 <__aeabi_uidivmod>:
    2128:	2900      	cmp	r1, #0
    212a:	d0f7      	beq.n	211c <__udivsi3+0x100>
    212c:	e776      	b.n	201c <__udivsi3>
    212e:	4770      	bx	lr

00002130 <__aeabi_idiv0>:
    2130:	4770      	bx	lr
    2132:	46c0      	nop			; (mov r8, r8)

00002134 <__aeabi_llsl>:
    2134:	4091      	lsls	r1, r2
    2136:	1c03      	adds	r3, r0, #0
    2138:	4090      	lsls	r0, r2
    213a:	469c      	mov	ip, r3
    213c:	3a20      	subs	r2, #32
    213e:	4093      	lsls	r3, r2
    2140:	4319      	orrs	r1, r3
    2142:	4252      	negs	r2, r2
    2144:	4663      	mov	r3, ip
    2146:	40d3      	lsrs	r3, r2
    2148:	4319      	orrs	r1, r3
    214a:	4770      	bx	lr

0000214c <__aeabi_lmul>:
    214c:	b5f0      	push	{r4, r5, r6, r7, lr}
    214e:	46ce      	mov	lr, r9
    2150:	4647      	mov	r7, r8
    2152:	0415      	lsls	r5, r2, #16
    2154:	0c2d      	lsrs	r5, r5, #16
    2156:	002e      	movs	r6, r5
    2158:	b580      	push	{r7, lr}
    215a:	0407      	lsls	r7, r0, #16
    215c:	0c14      	lsrs	r4, r2, #16
    215e:	0c3f      	lsrs	r7, r7, #16
    2160:	4699      	mov	r9, r3
    2162:	0c03      	lsrs	r3, r0, #16
    2164:	437e      	muls	r6, r7
    2166:	435d      	muls	r5, r3
    2168:	4367      	muls	r7, r4
    216a:	4363      	muls	r3, r4
    216c:	197f      	adds	r7, r7, r5
    216e:	0c34      	lsrs	r4, r6, #16
    2170:	19e4      	adds	r4, r4, r7
    2172:	469c      	mov	ip, r3
    2174:	42a5      	cmp	r5, r4
    2176:	d903      	bls.n	2180 <__aeabi_lmul+0x34>
    2178:	2380      	movs	r3, #128	; 0x80
    217a:	025b      	lsls	r3, r3, #9
    217c:	4698      	mov	r8, r3
    217e:	44c4      	add	ip, r8
    2180:	464b      	mov	r3, r9
    2182:	4351      	muls	r1, r2
    2184:	4343      	muls	r3, r0
    2186:	0436      	lsls	r6, r6, #16
    2188:	0c36      	lsrs	r6, r6, #16
    218a:	0c25      	lsrs	r5, r4, #16
    218c:	0424      	lsls	r4, r4, #16
    218e:	4465      	add	r5, ip
    2190:	19a4      	adds	r4, r4, r6
    2192:	1859      	adds	r1, r3, r1
    2194:	1949      	adds	r1, r1, r5
    2196:	0020      	movs	r0, r4
    2198:	bc0c      	pop	{r2, r3}
    219a:	4690      	mov	r8, r2
    219c:	4699      	mov	r9, r3
    219e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000021a0 <__libc_init_array>:
    21a0:	b570      	push	{r4, r5, r6, lr}
    21a2:	2600      	movs	r6, #0
    21a4:	4d0c      	ldr	r5, [pc, #48]	; (21d8 <__libc_init_array+0x38>)
    21a6:	4c0d      	ldr	r4, [pc, #52]	; (21dc <__libc_init_array+0x3c>)
    21a8:	1b64      	subs	r4, r4, r5
    21aa:	10a4      	asrs	r4, r4, #2
    21ac:	42a6      	cmp	r6, r4
    21ae:	d109      	bne.n	21c4 <__libc_init_array+0x24>
    21b0:	2600      	movs	r6, #0
    21b2:	f000 f88f 	bl	22d4 <_init>
    21b6:	4d0a      	ldr	r5, [pc, #40]	; (21e0 <__libc_init_array+0x40>)
    21b8:	4c0a      	ldr	r4, [pc, #40]	; (21e4 <__libc_init_array+0x44>)
    21ba:	1b64      	subs	r4, r4, r5
    21bc:	10a4      	asrs	r4, r4, #2
    21be:	42a6      	cmp	r6, r4
    21c0:	d105      	bne.n	21ce <__libc_init_array+0x2e>
    21c2:	bd70      	pop	{r4, r5, r6, pc}
    21c4:	00b3      	lsls	r3, r6, #2
    21c6:	58eb      	ldr	r3, [r5, r3]
    21c8:	4798      	blx	r3
    21ca:	3601      	adds	r6, #1
    21cc:	e7ee      	b.n	21ac <__libc_init_array+0xc>
    21ce:	00b3      	lsls	r3, r6, #2
    21d0:	58eb      	ldr	r3, [r5, r3]
    21d2:	4798      	blx	r3
    21d4:	3601      	adds	r6, #1
    21d6:	e7f2      	b.n	21be <__libc_init_array+0x1e>
    21d8:	000022e0 	.word	0x000022e0
    21dc:	000022e0 	.word	0x000022e0
    21e0:	000022e0 	.word	0x000022e0
    21e4:	000022e4 	.word	0x000022e4

000021e8 <memset>:
    21e8:	0003      	movs	r3, r0
    21ea:	1882      	adds	r2, r0, r2
    21ec:	4293      	cmp	r3, r2
    21ee:	d100      	bne.n	21f2 <memset+0xa>
    21f0:	4770      	bx	lr
    21f2:	7019      	strb	r1, [r3, #0]
    21f4:	3301      	adds	r3, #1
    21f6:	e7f9      	b.n	21ec <memset+0x4>

000021f8 <strlen>:
    21f8:	2300      	movs	r3, #0
    21fa:	5cc2      	ldrb	r2, [r0, r3]
    21fc:	3301      	adds	r3, #1
    21fe:	2a00      	cmp	r2, #0
    2200:	d1fb      	bne.n	21fa <strlen+0x2>
    2202:	1e58      	subs	r0, r3, #1
    2204:	4770      	bx	lr
    2206:	5441      	.short	0x5441
    2208:	41000a0d 	.word	0x41000a0d
    220c:	4a4e2b54 	.word	0x4a4e2b54
    2210:	0d333d4d 	.word	0x0d333d4d
    2214:	5441000a 	.word	0x5441000a
    2218:	3d414e2b 	.word	0x3d414e2b
    221c:	31313030 	.word	0x31313030
    2220:	33333232 	.word	0x33333232
    2224:	41000a0d 	.word	0x41000a0d
    2228:	534e2b54 	.word	0x534e2b54
    222c:	30303d4b 	.word	0x30303d4b
    2230:	32323131 	.word	0x32323131
    2234:	30303333 	.word	0x30303333
    2238:	32323131 	.word	0x32323131
    223c:	30303333 	.word	0x30303333
    2240:	32323131 	.word	0x32323131
    2244:	30303333 	.word	0x30303333
    2248:	32323131 	.word	0x32323131
    224c:	0a0d3333 	.word	0x0a0d3333
    2250:	2b544100 	.word	0x2b544100
    2254:	3d4b5344 	.word	0x3d4b5344
    2258:	32323333 	.word	0x32323333
    225c:	30303131 	.word	0x30303131
    2260:	32323333 	.word	0x32323333
    2264:	30303131 	.word	0x30303131
    2268:	32323333 	.word	0x32323333
    226c:	30303131 	.word	0x30303131
    2270:	32323333 	.word	0x32323333
    2274:	30303131 	.word	0x30303131
    2278:	41000a0d 	.word	0x41000a0d
    227c:	58542b54 	.word	0x58542b54
    2280:	443d5244 	.word	0x443d5244
    2284:	0a0d3852 	.word	0x0a0d3852
    2288:	2b544100 	.word	0x2b544100
    228c:	3d465854 	.word	0x3d465854
    2290:	35353139 	.word	0x35353139
    2294:	30303030 	.word	0x30303030
    2298:	000a0d30 	.word	0x000a0d30
    229c:	57265441 	.word	0x57265441
    22a0:	41000a0d 	.word	0x41000a0d
    22a4:	0a0d5a54 	.word	0x0a0d5a54
    22a8:	2b544100 	.word	0x2b544100
    22ac:	0a0d4453 	.word	0x0a0d4453
    22b0:	00          	.byte	0x00
    22b1:	41          	.byte	0x41
    22b2:	2b54      	.short	0x2b54
    22b4:	444e4553 	.word	0x444e4553
    22b8:	00000a0d 	.word	0x00000a0d
    22bc:	42000800 	.word	0x42000800
    22c0:	42000c00 	.word	0x42000c00
    22c4:	42001000 	.word	0x42001000
    22c8:	42001400 	.word	0x42001400
    22cc:	42001800 	.word	0x42001800
    22d0:	42001c00 	.word	0x42001c00

000022d4 <_init>:
    22d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22da:	bc08      	pop	{r3}
    22dc:	469e      	mov	lr, r3
    22de:	4770      	bx	lr

000022e0 <__init_array_start>:
    22e0:	000000dd 	.word	0x000000dd

000022e4 <_fini>:
    22e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22ea:	bc08      	pop	{r3}
    22ec:	469e      	mov	lr, r3
    22ee:	4770      	bx	lr

000022f0 <__fini_array_start>:
    22f0:	000000b5 	.word	0x000000b5
