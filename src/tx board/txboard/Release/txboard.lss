
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004690  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00004690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000174  2000001c  000046ac  0002001c  2**2
                  ALLOC
  3 .stack        00002000  20000190  00004820  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002e361  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003650  00000000  00000000  0004e3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002a9f  00000000  00000000  00051a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000818  00000000  00000000  000544ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006e8  00000000  00000000  00054d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005ecb  00000000  00000000  000553ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00006661  00000000  00000000  0005b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001a98  00000000  00000000  0006191c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 21 00 20 21 3f 00 00 19 40 00 00 19 40 00 00     .!. !?...@...@..
	...
      2c:	19 40 00 00 00 00 00 00 00 00 00 00 19 40 00 00     .@...........@..
      3c:	19 40 00 00 19 40 00 00 19 40 00 00 19 40 00 00     .@...@...@...@..
      4c:	19 40 00 00 19 40 00 00 19 40 00 00 19 40 00 00     .@...@...@...@..
      5c:	19 40 00 00 19 40 00 00 0d 33 00 00 25 33 00 00     .@...@...3..%3..
      6c:	3d 33 00 00 55 33 00 00 6d 33 00 00 85 33 00 00     =3..U3..m3...3..
      7c:	19 40 00 00 19 40 00 00 19 40 00 00 19 40 00 00     .@...@...@...@..
      8c:	19 40 00 00 19 40 00 00 19 40 00 00 19 40 00 00     .@...@...@...@..
      9c:	19 40 00 00 19 40 00 00 19 40 00 00 19 40 00 00     .@...@...@...@..
      ac:	19 40 00 00 00 00 00 00                             .@......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	00004690 	.word	0x00004690

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	00004690 	.word	0x00004690
     10c:	00004690 	.word	0x00004690
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <system_interrupt_enter_critical_section+0x10>)
     11a:	4798      	blx	r3
}
     11c:	46c0      	nop			; (mov r8, r8)
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	000033a9 	.word	0x000033a9

00000128 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     128:	b580      	push	{r7, lr}
     12a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     12c:	4b02      	ldr	r3, [pc, #8]	; (138 <system_interrupt_leave_critical_section+0x10>)
     12e:	4798      	blx	r3
}
     130:	46c0      	nop			; (mov r8, r8)
     132:	46bd      	mov	sp, r7
     134:	bd80      	pop	{r7, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	000033fd 	.word	0x000033fd

0000013c <ringbuff_clear>:
 * Return Values(s) : int8_t
 * Description      : Clears the ring buffer. Returns 0 if operation was
 *  successful, else returns -1.
 */
int8_t ringbuff_clear(ringbuff_t* pringbuff)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
    uint8_t ret_val = -1;
     144:	230f      	movs	r3, #15
     146:	18fb      	adds	r3, r7, r3
     148:	22ff      	movs	r2, #255	; 0xff
     14a:	701a      	strb	r2, [r3, #0]
    
    // NULL pointer check
    if(pringbuff)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	2b00      	cmp	r3, #0
     150:	d009      	beq.n	166 <ringbuff_clear+0x2a>
    {
        // clear the read/write values
        pringbuff->write = 0;
     152:	687b      	ldr	r3, [r7, #4]
     154:	2200      	movs	r2, #0
     156:	605a      	str	r2, [r3, #4]
        pringbuff->read = 0;
     158:	687b      	ldr	r3, [r7, #4]
     15a:	2200      	movs	r2, #0
     15c:	609a      	str	r2, [r3, #8]
        ret_val = 0;
     15e:	230f      	movs	r3, #15
     160:	18fb      	adds	r3, r7, r3
     162:	2200      	movs	r2, #0
     164:	701a      	strb	r2, [r3, #0]
    }
    
    return ret_val;
     166:	230f      	movs	r3, #15
     168:	18fb      	adds	r3, r7, r3
     16a:	781b      	ldrb	r3, [r3, #0]
     16c:	b25b      	sxtb	r3, r3
}
     16e:	0018      	movs	r0, r3
     170:	46bd      	mov	sp, r7
     172:	b004      	add	sp, #16
     174:	bd80      	pop	{r7, pc}
	...

00000178 <ringbuff_put>:
 * Return Values(s) : int8_t
 * Description      : Puts a byte into the ring buffer. Returns 0 if the 
 *  operation was successful, else it returns -1.
 */
int8_t ringbuff_put(ringbuff_t* pringbuff, uint8_t put_data)
{
     178:	b580      	push	{r7, lr}
     17a:	b084      	sub	sp, #16
     17c:	af00      	add	r7, sp, #0
     17e:	6078      	str	r0, [r7, #4]
     180:	000a      	movs	r2, r1
     182:	1cfb      	adds	r3, r7, #3
     184:	701a      	strb	r2, [r3, #0]
    uint8_t ret_val = -1;
     186:	230f      	movs	r3, #15
     188:	18fb      	adds	r3, r7, r3
     18a:	22ff      	movs	r2, #255	; 0xff
     18c:	701a      	strb	r2, [r3, #0]
    
    // NULL pointer check
    if(pringbuff)
     18e:	687b      	ldr	r3, [r7, #4]
     190:	2b00      	cmp	r3, #0
     192:	d01b      	beq.n	1cc <ringbuff_put+0x54>
    {
        // keep ring buffer operations atomic relative to interrupts   
        system_interrupt_enter_critical_section();
     194:	4b11      	ldr	r3, [pc, #68]	; (1dc <ringbuff_put+0x64>)
     196:	4798      	blx	r3
        
        // write data to the ring buffer
        pringbuff->buff[pringbuff->write] = put_data;
     198:	687b      	ldr	r3, [r7, #4]
     19a:	681a      	ldr	r2, [r3, #0]
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	685b      	ldr	r3, [r3, #4]
     1a0:	18d3      	adds	r3, r2, r3
     1a2:	1cfa      	adds	r2, r7, #3
     1a4:	7812      	ldrb	r2, [r2, #0]
     1a6:	701a      	strb	r2, [r3, #0]

        /* increment the head. This means old data will be overwritten if the
         * user does not check if the buffer is full */
        pringbuff->write = (pringbuff->write + 1) % pringbuff->size;
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	685b      	ldr	r3, [r3, #4]
     1ac:	1c5a      	adds	r2, r3, #1
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	68d9      	ldr	r1, [r3, #12]
     1b2:	4b0b      	ldr	r3, [pc, #44]	; (1e0 <ringbuff_put+0x68>)
     1b4:	0010      	movs	r0, r2
     1b6:	4798      	blx	r3
     1b8:	000b      	movs	r3, r1
     1ba:	001a      	movs	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	605a      	str	r2, [r3, #4]
        
        system_interrupt_leave_critical_section();
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <ringbuff_put+0x6c>)
     1c2:	4798      	blx	r3

        ret_val = 0;
     1c4:	230f      	movs	r3, #15
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	2200      	movs	r2, #0
     1ca:	701a      	strb	r2, [r3, #0]
    }
    
    return ret_val;
     1cc:	230f      	movs	r3, #15
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	b25b      	sxtb	r3, r3
}
     1d4:	0018      	movs	r0, r3
     1d6:	46bd      	mov	sp, r7
     1d8:	b004      	add	sp, #16
     1da:	bd80      	pop	{r7, pc}
     1dc:	00000115 	.word	0x00000115
     1e0:	00004465 	.word	0x00004465
     1e4:	00000129 	.word	0x00000129

000001e8 <system_pinmux_get_group_from_gpio_pin>:
    spi169_wr8(AX5043_FREQDEV10, 0x00);
    spi169_wr8(AX5043_FREQDEV00, 0x00);
    spi169_wr8(AX5043_BBOFFSRES0, 0x00);
    spi169_wr8(AX5043_AGCGAIN1, 0xE8);
    spi169_wr8(AX5043_AGCTARGET1, 0x84);
    spi169_wr8(AX5043_AGCAHYST1, 0x00);
     1e8:	b580      	push	{r7, lr}
     1ea:	b084      	sub	sp, #16
     1ec:	af00      	add	r7, sp, #0
     1ee:	0002      	movs	r2, r0
     1f0:	1dfb      	adds	r3, r7, #7
    spi169_wr8(AX5043_AGCMINMAX1, 0x00);
     1f2:	701a      	strb	r2, [r3, #0]
     1f4:	230f      	movs	r3, #15
     1f6:	18fb      	adds	r3, r7, r3
     1f8:	1dfa      	adds	r2, r7, #7
     1fa:	7812      	ldrb	r2, [r2, #0]
     1fc:	09d2      	lsrs	r2, r2, #7
    spi169_wr8(AX5043_TIMEGAIN1, 0xAB);
     1fe:	701a      	strb	r2, [r3, #0]
     200:	230e      	movs	r3, #14
     202:	18fb      	adds	r3, r7, r3
     204:	1dfa      	adds	r2, r7, #7
     206:	7812      	ldrb	r2, [r2, #0]
     208:	0952      	lsrs	r2, r2, #5
    spi169_wr8(AX5043_DRGAIN1, 0xA6);
     20a:	701a      	strb	r2, [r3, #0]
     20c:	4b0d      	ldr	r3, [pc, #52]	; (244 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     20e:	60bb      	str	r3, [r7, #8]
     210:	230f      	movs	r3, #15
     212:	18fb      	adds	r3, r7, r3
     214:	781b      	ldrb	r3, [r3, #0]
    spi169_wr8(AX5043_PHASEGAIN1, 0xC3);
     216:	2b00      	cmp	r3, #0
     218:	d10f      	bne.n	23a <system_pinmux_get_group_from_gpio_pin+0x52>
     21a:	230f      	movs	r3, #15
     21c:	18fb      	adds	r3, r7, r3
     21e:	781b      	ldrb	r3, [r3, #0]
     220:	009b      	lsls	r3, r3, #2
    spi169_wr8(AX5043_FREQGAINA1, 0x0F);
     222:	2210      	movs	r2, #16
     224:	4694      	mov	ip, r2
     226:	44bc      	add	ip, r7
     228:	4463      	add	r3, ip
     22a:	3b08      	subs	r3, #8
     22c:	681a      	ldr	r2, [r3, #0]
    spi169_wr8(AX5043_FREQGAINB1, 0x1F);
     22e:	230e      	movs	r3, #14
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	01db      	lsls	r3, r3, #7
     236:	18d3      	adds	r3, r2, r3
     238:	e000      	b.n	23c <system_pinmux_get_group_from_gpio_pin+0x54>
    spi169_wr8(AX5043_FREQGAINC1, 0x0A);
     23a:	2300      	movs	r3, #0
     23c:	0018      	movs	r0, r3
     23e:	46bd      	mov	sp, r7
     240:	b004      	add	sp, #16
     242:	bd80      	pop	{r7, pc}
     244:	41004400 	.word	0x41004400

00000248 <port_get_group_from_gpio_pin>:
    spi169_wr8(AX5043_FREQGAIND1, 0x0A);
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
     24e:	0002      	movs	r2, r0
     250:	1dfb      	adds	r3, r7, #7
    spi169_wr8(AX5043_AMPLGAIN1, 0x06);
     252:	701a      	strb	r2, [r3, #0]
     254:	1dfb      	adds	r3, r7, #7
     256:	781b      	ldrb	r3, [r3, #0]
     258:	0018      	movs	r0, r3
     25a:	4b03      	ldr	r3, [pc, #12]	; (268 <port_get_group_from_gpio_pin+0x20>)
     25c:	4798      	blx	r3
    spi169_wr8(AX5043_FREQDEV11, 0x00);
     25e:	0003      	movs	r3, r0
     260:	0018      	movs	r0, r3
     262:	46bd      	mov	sp, r7
     264:	b002      	add	sp, #8
     266:	bd80      	pop	{r7, pc}
     268:	000001e9 	.word	0x000001e9

0000026c <port_get_config_defaults>:
    spi169_wr8(AX5043_FREQDEV01, 0x4B);
     26c:	b580      	push	{r7, lr}
     26e:	b082      	sub	sp, #8
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
     274:	687b      	ldr	r3, [r7, #4]
    spi169_wr8(AX5043_FOURFSK1, 0x16);
     276:	2200      	movs	r2, #0
     278:	701a      	strb	r2, [r3, #0]
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	2201      	movs	r2, #1
     27e:	705a      	strb	r2, [r3, #1]
     280:	687b      	ldr	r3, [r7, #4]
    spi169_wr8(AX5043_BBOFFSRES1, 0x00);
     282:	2200      	movs	r2, #0
     284:	709a      	strb	r2, [r3, #2]
     286:	46c0      	nop			; (mov r8, r8)
     288:	46bd      	mov	sp, r7
     28a:	b002      	add	sp, #8
     28c:	bd80      	pop	{r7, pc}
	...

00000290 <port_pin_set_output_level>:
    spi169_wr8(AX5043_AGCGAIN3, 0xFF);
     290:	b580      	push	{r7, lr}
     292:	b084      	sub	sp, #16
     294:	af00      	add	r7, sp, #0
     296:	0002      	movs	r2, r0
     298:	1dfb      	adds	r3, r7, #7
    spi169_wr8(AX5043_AGCTARGET3, 0x84);
     29a:	701a      	strb	r2, [r3, #0]
     29c:	1dbb      	adds	r3, r7, #6
     29e:	1c0a      	adds	r2, r1, #0
     2a0:	701a      	strb	r2, [r3, #0]
     2a2:	1dfb      	adds	r3, r7, #7
     2a4:	781b      	ldrb	r3, [r3, #0]
    spi169_wr8(AX5043_AGCAHYST3, 0x00);
     2a6:	0018      	movs	r0, r3
     2a8:	4b0d      	ldr	r3, [pc, #52]	; (2e0 <port_pin_set_output_level+0x50>)
     2aa:	4798      	blx	r3
     2ac:	0003      	movs	r3, r0
     2ae:	60fb      	str	r3, [r7, #12]
     2b0:	1dfb      	adds	r3, r7, #7
    spi169_wr8(AX5043_AGCMINMAX3, 0x00);
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	221f      	movs	r2, #31
     2b6:	4013      	ands	r3, r2
     2b8:	2201      	movs	r2, #1
     2ba:	409a      	lsls	r2, r3
     2bc:	0013      	movs	r3, r2
    spi169_wr8(AX5043_TIMEGAIN3, 0xAA);
     2be:	60bb      	str	r3, [r7, #8]
     2c0:	1dbb      	adds	r3, r7, #6
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	2b00      	cmp	r3, #0
     2c6:	d003      	beq.n	2d0 <port_pin_set_output_level+0x40>
     2c8:	68fb      	ldr	r3, [r7, #12]
    spi169_wr8(AX5043_DRGAIN3, 0xA5);
     2ca:	68ba      	ldr	r2, [r7, #8]
     2cc:	619a      	str	r2, [r3, #24]
     2ce:	e002      	b.n	2d6 <port_pin_set_output_level+0x46>
     2d0:	68fb      	ldr	r3, [r7, #12]
     2d2:	68ba      	ldr	r2, [r7, #8]
     2d4:	615a      	str	r2, [r3, #20]
    spi169_wr8(AX5043_PHASEGAIN3, 0xC3);
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	46bd      	mov	sp, r7
     2da:	b004      	add	sp, #16
     2dc:	bd80      	pop	{r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	00000249 	.word	0x00000249

000002e4 <system_interrupt_enable>:
    spi169_wr8(AX5043_FREQGAINA3, 0x0F);
     2e4:	b580      	push	{r7, lr}
     2e6:	b082      	sub	sp, #8
     2e8:	af00      	add	r7, sp, #0
     2ea:	0002      	movs	r2, r0
     2ec:	1dfb      	adds	r3, r7, #7
    spi169_wr8(AX5043_FREQGAINB3, 0x1F);
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	4b06      	ldr	r3, [pc, #24]	; (30c <system_interrupt_enable+0x28>)
     2f2:	1dfa      	adds	r2, r7, #7
     2f4:	7812      	ldrb	r2, [r2, #0]
     2f6:	0011      	movs	r1, r2
     2f8:	221f      	movs	r2, #31
    spi169_wr8(AX5043_FREQGAINC3, 0x0D);
     2fa:	400a      	ands	r2, r1
     2fc:	2101      	movs	r1, #1
     2fe:	4091      	lsls	r1, r2
     300:	000a      	movs	r2, r1
     302:	601a      	str	r2, [r3, #0]
     304:	46c0      	nop			; (mov r8, r8)
    spi169_wr8(AX5043_FREQGAIND3, 0x0D);
     306:	46bd      	mov	sp, r7
     308:	b002      	add	sp, #8
     30a:	bd80      	pop	{r7, pc}
     30c:	e000e100 	.word	0xe000e100

00000310 <spi_is_syncing>:
     310:	b580      	push	{r7, lr}
    spi169_wr8(AX5043_AMPLGAIN3, 0x06);
     312:	b084      	sub	sp, #16
     314:	af00      	add	r7, sp, #0
     316:	6078      	str	r0, [r7, #4]
     318:	687b      	ldr	r3, [r7, #4]
     31a:	681b      	ldr	r3, [r3, #0]
     31c:	60fb      	str	r3, [r7, #12]
    spi169_wr8(AX5043_FREQDEV13, 0x00);
     31e:	68fb      	ldr	r3, [r7, #12]
     320:	69db      	ldr	r3, [r3, #28]
     322:	1e5a      	subs	r2, r3, #1
     324:	4193      	sbcs	r3, r2
     326:	b2db      	uxtb	r3, r3
     328:	0018      	movs	r0, r3
    spi169_wr8(AX5043_FREQDEV03, 0x4B);
     32a:	46bd      	mov	sp, r7
     32c:	b004      	add	sp, #16
     32e:	bd80      	pop	{r7, pc}

00000330 <spi_get_config_defaults>:
     330:	b580      	push	{r7, lr}
     332:	b082      	sub	sp, #8
     334:	af00      	add	r7, sp, #0
    spi169_wr8(AX5043_FOURFSK3, 0x16);
     336:	6078      	str	r0, [r7, #4]
     338:	687b      	ldr	r3, [r7, #4]
     33a:	2201      	movs	r2, #1
     33c:	701a      	strb	r2, [r3, #0]
     33e:	687b      	ldr	r3, [r7, #4]
     340:	2200      	movs	r2, #0
    spi169_wr8(AX5043_BBOFFSRES3, 0x00);
     342:	605a      	str	r2, [r3, #4]
     344:	687b      	ldr	r3, [r7, #4]
     346:	2200      	movs	r2, #0
     348:	609a      	str	r2, [r3, #8]
     34a:	687b      	ldr	r3, [r7, #4]
     34c:	22c0      	movs	r2, #192	; 0xc0
    spi169_wr8(AX5043_MODCFGF, 0x00);
     34e:	0392      	lsls	r2, r2, #14
     350:	60da      	str	r2, [r3, #12]
     352:	687b      	ldr	r3, [r7, #4]
     354:	2200      	movs	r2, #0
     356:	741a      	strb	r2, [r3, #16]
     358:	687b      	ldr	r3, [r7, #4]
    spi169_wr8(AX5043_FSKDEV2, 0x00);
     35a:	2200      	movs	r2, #0
     35c:	745a      	strb	r2, [r3, #17]
     35e:	687b      	ldr	r3, [r7, #4]
     360:	2201      	movs	r2, #1
     362:	749a      	strb	r2, [r3, #18]
     364:	687b      	ldr	r3, [r7, #4]
    spi169_wr8(AX5043_FSKDEV1, 0x02);
     366:	2201      	movs	r2, #1
     368:	74da      	strb	r2, [r3, #19]
     36a:	687b      	ldr	r3, [r7, #4]
     36c:	2200      	movs	r2, #0
     36e:	751a      	strb	r2, [r3, #20]
     370:	687b      	ldr	r3, [r7, #4]
    spi169_wr8(AX5043_FSKDEV0, 0x0C);
     372:	2224      	movs	r2, #36	; 0x24
     374:	2100      	movs	r1, #0
     376:	5499      	strb	r1, [r3, r2]
     378:	687b      	ldr	r3, [r7, #4]
     37a:	3318      	adds	r3, #24
     37c:	220c      	movs	r2, #12
    spi169_wr8(AX5043_MODCFGA, 0x01);
     37e:	2100      	movs	r1, #0
     380:	0018      	movs	r0, r3
     382:	4b0a      	ldr	r3, [pc, #40]	; (3ac <spi_get_config_defaults+0x7c>)
     384:	4798      	blx	r3
     386:	687b      	ldr	r3, [r7, #4]
     388:	4a09      	ldr	r2, [pc, #36]	; (3b0 <spi_get_config_defaults+0x80>)
    spi169_wr8(AX5043_TXRATE2, 0x00);
     38a:	619a      	str	r2, [r3, #24]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	2200      	movs	r2, #0
     390:	629a      	str	r2, [r3, #40]	; 0x28
     392:	687b      	ldr	r3, [r7, #4]
     394:	2200      	movs	r2, #0
    spi169_wr8(AX5043_TXRATE1, 0x04);
     396:	62da      	str	r2, [r3, #44]	; 0x2c
     398:	687b      	ldr	r3, [r7, #4]
     39a:	2200      	movs	r2, #0
     39c:	631a      	str	r2, [r3, #48]	; 0x30
     39e:	687b      	ldr	r3, [r7, #4]
     3a0:	2200      	movs	r2, #0
    spi169_wr8(AX5043_TXRATE0, 0xEA);
     3a2:	635a      	str	r2, [r3, #52]	; 0x34
     3a4:	46c0      	nop			; (mov r8, r8)
     3a6:	46bd      	mov	sp, r7
     3a8:	b002      	add	sp, #8
     3aa:	bd80      	pop	{r7, pc}
     3ac:	0000450d 	.word	0x0000450d
    spi169_wr8(AX5043_TXPWRCOEFFA1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     3b0:	000186a0 	.word	0x000186a0

000003b4 <spi_slave_inst_get_config_defaults>:
     3b4:	b580      	push	{r7, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	af00      	add	r7, sp, #0
    spi169_wr8(AX5043_TXPWRCOEFFA0, TXPWR0);
     3ba:	6078      	str	r0, [r7, #4]
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	220a      	movs	r2, #10
     3c0:	701a      	strb	r2, [r3, #0]
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	2200      	movs	r2, #0
    spi169_wr8(AX5043_TXPWRCOEFFB1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     3c6:	705a      	strb	r2, [r3, #1]
     3c8:	687b      	ldr	r3, [r7, #4]
     3ca:	2200      	movs	r2, #0
     3cc:	709a      	strb	r2, [r3, #2]
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	46bd      	mov	sp, r7
    spi169_wr8(AX5043_TXPWRCOEFFB0, TXPWR0);
     3d2:	b002      	add	sp, #8
     3d4:	bd80      	pop	{r7, pc}
	...

000003d8 <spi_attach_slave>:
     3d8:	b580      	push	{r7, lr}
     3da:	b084      	sub	sp, #16
     3dc:	af00      	add	r7, sp, #0
    spi169_wr8(AX5043_TXPWRCOEFFC1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     3de:	6078      	str	r0, [r7, #4]
     3e0:	6039      	str	r1, [r7, #0]
     3e2:	683b      	ldr	r3, [r7, #0]
     3e4:	781a      	ldrb	r2, [r3, #0]
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	701a      	strb	r2, [r3, #0]
    spi169_wr8(AX5043_TXPWRCOEFFC0, TXPWR0);
     3ea:	683b      	ldr	r3, [r7, #0]
     3ec:	785a      	ldrb	r2, [r3, #1]
     3ee:	687b      	ldr	r3, [r7, #4]
     3f0:	705a      	strb	r2, [r3, #1]
     3f2:	683b      	ldr	r3, [r7, #0]
     3f4:	789a      	ldrb	r2, [r3, #2]
    spi169_wr8(AX5043_TXPWRCOEFFD1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     3f6:	687b      	ldr	r3, [r7, #4]
     3f8:	709a      	strb	r2, [r3, #2]
     3fa:	230c      	movs	r3, #12
     3fc:	18fb      	adds	r3, r7, r3
     3fe:	0018      	movs	r0, r3
     400:	4b0b      	ldr	r3, [pc, #44]	; (430 <spi_attach_slave+0x58>)
     402:	4798      	blx	r3
     404:	230c      	movs	r3, #12
     406:	18fb      	adds	r3, r7, r3
     408:	2201      	movs	r2, #1
     40a:	701a      	strb	r2, [r3, #0]
    spi169_wr8(AX5043_TXPWRCOEFFD0, TXPWR0);
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	781b      	ldrb	r3, [r3, #0]
     410:	220c      	movs	r2, #12
     412:	18ba      	adds	r2, r7, r2
     414:	0011      	movs	r1, r2
     416:	0018      	movs	r0, r3
    spi169_wr8(AX5043_PLLVCOI, 0x8A);
     418:	4b06      	ldr	r3, [pc, #24]	; (434 <spi_attach_slave+0x5c>)
     41a:	4798      	blx	r3
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	2101      	movs	r1, #1
     422:	0018      	movs	r0, r3
    spi169_wr8(AX5043_PLLRNGCLK, 0x03);
     424:	4b04      	ldr	r3, [pc, #16]	; (438 <spi_attach_slave+0x60>)
     426:	4798      	blx	r3
     428:	46c0      	nop			; (mov r8, r8)
     42a:	46bd      	mov	sp, r7
     42c:	b004      	add	sp, #16
     42e:	bd80      	pop	{r7, pc}
    spi169_wr8(AX5043_BBTUNE, 0x0F);
     430:	0000026d 	.word	0x0000026d
     434:	00000c31 	.word	0x00000c31
     438:	00000291 	.word	0x00000291

0000043c <spi_enable>:
    spi169_wr8(AX5043_BBOFFSCAP, 0x77);
     43c:	b580      	push	{r7, lr}
     43e:	b084      	sub	sp, #16
     440:	af00      	add	r7, sp, #0
     442:	6078      	str	r0, [r7, #4]
     444:	687b      	ldr	r3, [r7, #4]
     446:	681b      	ldr	r3, [r3, #0]
    spi169_wr8(AX5043_PKTADDRCFG, 0x80);
     448:	60fb      	str	r3, [r7, #12]
     44a:	687b      	ldr	r3, [r7, #4]
     44c:	681b      	ldr	r3, [r3, #0]
     44e:	0018      	movs	r0, r3
     450:	4b0b      	ldr	r3, [pc, #44]	; (480 <spi_enable+0x44>)
     452:	4798      	blx	r3
    spi169_wr8(AX5043_PKTLENCFG, 0x00);
     454:	0003      	movs	r3, r0
     456:	0018      	movs	r0, r3
     458:	4b0a      	ldr	r3, [pc, #40]	; (484 <spi_enable+0x48>)
     45a:	4798      	blx	r3
     45c:	46c0      	nop			; (mov r8, r8)
    spi169_wr8(AX5043_PKTLENOFFSET, 0x04);
     45e:	687b      	ldr	r3, [r7, #4]
     460:	0018      	movs	r0, r3
     462:	4b09      	ldr	r3, [pc, #36]	; (488 <spi_enable+0x4c>)
     464:	4798      	blx	r3
     466:	1e03      	subs	r3, r0, #0
    spi169_wr8(AX5043_PKTMAXLEN, 0xC8);
     468:	d1f9      	bne.n	45e <spi_enable+0x22>
     46a:	68fb      	ldr	r3, [r7, #12]
     46c:	681b      	ldr	r3, [r3, #0]
     46e:	2202      	movs	r2, #2
     470:	431a      	orrs	r2, r3
    spi169_wr8(AX5043_MATCH0PAT3, 0xAA);
     472:	68fb      	ldr	r3, [r7, #12]
     474:	601a      	str	r2, [r3, #0]
     476:	46c0      	nop			; (mov r8, r8)
     478:	46bd      	mov	sp, r7
     47a:	b004      	add	sp, #16
     47c:	bd80      	pop	{r7, pc}
    spi169_wr8(AX5043_MATCH0PAT2, 0xCC);
     47e:	46c0      	nop			; (mov r8, r8)
     480:	000032c9 	.word	0x000032c9
     484:	000002e5 	.word	0x000002e5
    spi169_wr8(AX5043_MATCH0PAT1, 0xAA);
     488:	00000311 	.word	0x00000311

0000048c <spi169_init>:
     48c:	b580      	push	{r7, lr}
     48e:	b090      	sub	sp, #64	; 0x40
     490:	af00      	add	r7, sp, #0
    spi169_wr8(AX5043_MATCH0PAT0, 0xCC);
     492:	4b24      	ldr	r3, [pc, #144]	; (524 <spi169_init+0x98>)
     494:	781b      	ldrb	r3, [r3, #0]
     496:	2b00      	cmp	r3, #0
     498:	d13f      	bne.n	51a <spi169_init+0x8e>
     49a:	1d3b      	adds	r3, r7, #4
    spi169_wr8(AX5043_MATCH0LEN, 0x9F);
     49c:	0018      	movs	r0, r3
     49e:	4b22      	ldr	r3, [pc, #136]	; (528 <spi169_init+0x9c>)
     4a0:	4798      	blx	r3
     4a2:	1d3b      	adds	r3, r7, #4
     4a4:	2211      	movs	r2, #17
     4a6:	701a      	strb	r2, [r3, #0]
    spi169_wr8(AX5043_MATCH0MAX, 0x1F);
     4a8:	1d3a      	adds	r2, r7, #4
     4aa:	4b20      	ldr	r3, [pc, #128]	; (52c <spi169_init+0xa0>)
     4ac:	0011      	movs	r1, r2
     4ae:	0018      	movs	r0, r3
     4b0:	4b1f      	ldr	r3, [pc, #124]	; (530 <spi169_init+0xa4>)
    spi169_wr8(AX5043_MATCH1PAT1, 0x55);
     4b2:	4798      	blx	r3
     4b4:	2308      	movs	r3, #8
     4b6:	18fb      	adds	r3, r7, r3
     4b8:	0018      	movs	r0, r3
     4ba:	4b1e      	ldr	r3, [pc, #120]	; (534 <spi169_init+0xa8>)
     4bc:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH1PAT0, 0x55);
     4be:	2308      	movs	r3, #8
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	228c      	movs	r2, #140	; 0x8c
     4c4:	0392      	lsls	r2, r2, #14
     4c6:	60da      	str	r2, [r3, #12]
    spi169_wr8(AX5043_MATCH1LEN, 0x8A);
     4c8:	2308      	movs	r3, #8
     4ca:	18fb      	adds	r3, r7, r3
     4cc:	4a1a      	ldr	r2, [pc, #104]	; (538 <spi169_init+0xac>)
     4ce:	629a      	str	r2, [r3, #40]	; 0x28
     4d0:	2308      	movs	r3, #8
     4d2:	18fb      	adds	r3, r7, r3
    spi169_wr8(AX5043_MATCH1MAX, 0x0A);
     4d4:	2201      	movs	r2, #1
     4d6:	4252      	negs	r2, r2
     4d8:	62da      	str	r2, [r3, #44]	; 0x2c
     4da:	2308      	movs	r3, #8
     4dc:	18fb      	adds	r3, r7, r3
    spi169_wr8(AX5043_TMGTXBOOST, 0x32);
     4de:	4a17      	ldr	r2, [pc, #92]	; (53c <spi169_init+0xb0>)
     4e0:	631a      	str	r2, [r3, #48]	; 0x30
     4e2:	2308      	movs	r3, #8
     4e4:	18fb      	adds	r3, r7, r3
     4e6:	4a16      	ldr	r2, [pc, #88]	; (540 <spi169_init+0xb4>)
     4e8:	635a      	str	r2, [r3, #52]	; 0x34
    spi169_wr8(AX5043_TMGTXSETTLE, 0x14);
     4ea:	2308      	movs	r3, #8
     4ec:	18fb      	adds	r3, r7, r3
     4ee:	2224      	movs	r2, #36	; 0x24
     4f0:	2100      	movs	r1, #0
     4f2:	5499      	strb	r1, [r3, r2]
    spi169_wr8(AX5043_TMGRXBOOST, 0x32);
     4f4:	2308      	movs	r3, #8
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	4a12      	ldr	r2, [pc, #72]	; (544 <spi169_init+0xb8>)
     4fa:	619a      	str	r2, [r3, #24]
     4fc:	2308      	movs	r3, #8
    spi169_wr8(AX5043_TMGRXSETTLE, 0x14);
     4fe:	18fa      	adds	r2, r7, r3
     500:	4911      	ldr	r1, [pc, #68]	; (548 <spi169_init+0xbc>)
     502:	4b12      	ldr	r3, [pc, #72]	; (54c <spi169_init+0xc0>)
     504:	0018      	movs	r0, r3
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <spi169_init+0xc4>)
     508:	4798      	blx	r3
    spi169_wr8(AX5043_TMGRXOFFSACQ, 0x00);
     50a:	4b10      	ldr	r3, [pc, #64]	; (54c <spi169_init+0xc0>)
     50c:	0018      	movs	r0, r3
     50e:	4b11      	ldr	r3, [pc, #68]	; (554 <spi169_init+0xc8>)
     510:	4798      	blx	r3
     512:	4b04      	ldr	r3, [pc, #16]	; (524 <spi169_init+0x98>)
    spi169_wr8(AX5043_TMGRXCOARSEAGC, 0x73);
     514:	2201      	movs	r2, #1
     516:	701a      	strb	r2, [r3, #0]
     518:	e000      	b.n	51c <spi169_init+0x90>
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	46bd      	mov	sp, r7
    spi169_wr8(AX5043_TMGRXRSSI, 0x03);
     51e:	b010      	add	sp, #64	; 0x40
     520:	bd80      	pop	{r7, pc}
     522:	46c0      	nop			; (mov r8, r8)
     524:	20000038 	.word	0x20000038
     528:	000003b5 	.word	0x000003b5
    spi169_wr8(AX5043_TMGRXPREAMBLE2, 0x35);
     52c:	20000170 	.word	0x20000170
     530:	000003d9 	.word	0x000003d9
    spi169_wr8(AX5043_RSSIABSTHR, 0xE6);
     534:	00000331 	.word	0x00000331
     538:	00100002 	.word	0x00100002
     53c:	00120002 	.word	0x00120002
    spi169_wr8(AX5043_BGNDRSSITHR, 0x00);
     540:	00130002 	.word	0x00130002
     544:	000f4240 	.word	0x000f4240
    spi169_wr8(AX5043_PKTCHUNKSIZE, 0x0D);
     548:	42000c00 	.word	0x42000c00
     54c:	20000134 	.word	0x20000134
     550:	00002439 	.word	0x00002439
    spi169_wr8(AX5043_PKTACCEPTFLAGS, 0x20);
     554:	0000043d 	.word	0x0000043d

00000558 <spi169_start_xfer>:
     558:	b5b0      	push	{r4, r5, r7, lr}
     55a:	b084      	sub	sp, #16
     55c:	af00      	add	r7, sp, #0
    spi169_wr8(AX5043_DACVALUE1, 0x00);
     55e:	0002      	movs	r2, r0
     560:	1dbb      	adds	r3, r7, #6
     562:	801a      	strh	r2, [r3, #0]
     564:	1d7b      	adds	r3, r7, #5
     566:	1c0a      	adds	r2, r1, #0
     568:	701a      	strb	r2, [r3, #0]
    spi169_wr8(AX5043_DACVALUE0, 0x00);
     56a:	1dbb      	adds	r3, r7, #6
     56c:	881b      	ldrh	r3, [r3, #0]
     56e:	4a1f      	ldr	r2, [pc, #124]	; (5ec <spi169_start_xfer+0x94>)
     570:	4313      	orrs	r3, r2
     572:	b29a      	uxth	r2, r3
    spi169_wr8(AX5043_DACCONFIG, 0x00);
     574:	1dbb      	adds	r3, r7, #6
     576:	801a      	strh	r2, [r3, #0]
     578:	1d7b      	adds	r3, r7, #5
     57a:	781b      	ldrb	r3, [r3, #0]
     57c:	2b00      	cmp	r3, #0
    spi169_wr8(AX5043_REF, 0x03);
     57e:	d106      	bne.n	58e <spi169_start_xfer+0x36>
     580:	1dbb      	adds	r3, r7, #6
     582:	881b      	ldrh	r3, [r3, #0]
     584:	045b      	lsls	r3, r3, #17
     586:	0c5b      	lsrs	r3, r3, #17
    spi169_wr8(AX5043_XTALOSC, 0x03);
     588:	b29a      	uxth	r2, r3
     58a:	1dbb      	adds	r3, r7, #6
     58c:	801a      	strh	r2, [r3, #0]
     58e:	1dbb      	adds	r3, r7, #6
     590:	881b      	ldrh	r3, [r3, #0]
     592:	0a1b      	lsrs	r3, r3, #8
    spi169_wr8(AX5043_XTALAMPL, 0x07);
     594:	b29b      	uxth	r3, r3
     596:	b21a      	sxth	r2, r3
     598:	1dbb      	adds	r3, r7, #6
     59a:	881b      	ldrh	r3, [r3, #0]
     59c:	021b      	lsls	r3, r3, #8
    spi169_wr8(AX5043_0xF1C, 0x07);
     59e:	b21b      	sxth	r3, r3
     5a0:	4313      	orrs	r3, r2
     5a2:	b21b      	sxth	r3, r3
     5a4:	b29a      	uxth	r2, r3
     5a6:	1dbb      	adds	r3, r7, #6
    spi169_wr8(AX5043_0xF21, 0x68);
     5a8:	801a      	strh	r2, [r3, #0]
     5aa:	230f      	movs	r3, #15
     5ac:	18fc      	adds	r4, r7, r3
     5ae:	4910      	ldr	r1, [pc, #64]	; (5f0 <spi169_start_xfer+0x98>)
     5b0:	4b10      	ldr	r3, [pc, #64]	; (5f4 <spi169_start_xfer+0x9c>)
    spi169_wr8(AX5043_0xF22, 0xFF);
     5b2:	2201      	movs	r2, #1
     5b4:	0018      	movs	r0, r3
     5b6:	4b10      	ldr	r3, [pc, #64]	; (5f8 <spi169_start_xfer+0xa0>)
     5b8:	4798      	blx	r3
     5ba:	0003      	movs	r3, r0
    spi169_wr8(AX5043_0xF23, 0x84);
     5bc:	7023      	strb	r3, [r4, #0]
     5be:	230f      	movs	r3, #15
     5c0:	18fb      	adds	r3, r7, r3
     5c2:	781b      	ldrb	r3, [r3, #0]
     5c4:	2b05      	cmp	r3, #5
    spi169_wr8(AX5043_0xF26, 0x98);
     5c6:	d0f0      	beq.n	5aa <spi169_start_xfer+0x52>
     5c8:	230f      	movs	r3, #15
     5ca:	18fc      	adds	r4, r7, r3
     5cc:	4a0b      	ldr	r2, [pc, #44]	; (5fc <spi169_start_xfer+0xa4>)
     5ce:	1db9      	adds	r1, r7, #6
    spi169_wr8(AX5043_0xF34, 0x08);
     5d0:	4808      	ldr	r0, [pc, #32]	; (5f4 <spi169_start_xfer+0x9c>)
     5d2:	2302      	movs	r3, #2
     5d4:	4d0a      	ldr	r5, [pc, #40]	; (600 <spi169_start_xfer+0xa8>)
     5d6:	47a8      	blx	r5
     5d8:	0003      	movs	r3, r0
    spi169_wr8(AX5043_0xF35, 0x10);
     5da:	7023      	strb	r3, [r4, #0]
     5dc:	230f      	movs	r3, #15
     5de:	18fb      	adds	r3, r7, r3
     5e0:	781b      	ldrb	r3, [r3, #0]
     5e2:	0018      	movs	r0, r3
    spi169_wr8(AX5043_0xF44, 0x25);
     5e4:	46bd      	mov	sp, r7
     5e6:	b004      	add	sp, #16
     5e8:	bdb0      	pop	{r4, r5, r7, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	fffff000 	.word	0xfffff000
    
    spi169_wr8(AX5043_PLLLOOP, 0x09);
     5f0:	20000170 	.word	0x20000170
     5f4:	20000134 	.word	0x20000134
    spi169_wr8(AX5043_PLLCPI, 0x02);
     5f8:	000025dd 	.word	0x000025dd
     5fc:	2000003a 	.word	0x2000003a
    spi169_wr8(AX5043_PLLVCODIV, 0x30);
     600:	000029f1 	.word	0x000029f1

00000604 <spi169_stop_xfer>:
     604:	b580      	push	{r7, lr}
    spi169_wr8(AX5043_XTALCAP, 0x13);
     606:	af00      	add	r7, sp, #0
     608:	4904      	ldr	r1, [pc, #16]	; (61c <spi169_stop_xfer+0x18>)
     60a:	4b05      	ldr	r3, [pc, #20]	; (620 <spi169_stop_xfer+0x1c>)
     60c:	2200      	movs	r2, #0
     60e:	0018      	movs	r0, r3
     610:	4b04      	ldr	r3, [pc, #16]	; (624 <spi169_stop_xfer+0x20>)
    spi169_wr8(AX5043_0xF00, 0x0F);
     612:	4798      	blx	r3
     614:	0003      	movs	r3, r0
     616:	0018      	movs	r0, r3
     618:	46bd      	mov	sp, r7
     61a:	bd80      	pop	{r7, pc}
     61c:	20000170 	.word	0x20000170
    spi169_wr8(AX5043_0xF18, 0x06);
     620:	20000134 	.word	0x20000134
     624:	000025dd 	.word	0x000025dd

00000628 <spi169_write>:
    
    //set the freqeuency (169 MHz)
    spi169_wr8(AX5043_FREQA0, 0x01);
     628:	b590      	push	{r4, r7, lr}
     62a:	b085      	sub	sp, #20
     62c:	af00      	add	r7, sp, #0
     62e:	6078      	str	r0, [r7, #4]
    spi169_wr8(AX5043_FREQA1, 0x00);
     630:	000a      	movs	r2, r1
     632:	1cbb      	adds	r3, r7, #2
     634:	801a      	strh	r2, [r3, #0]
     636:	230f      	movs	r3, #15
    spi169_wr8(AX5043_FREQA2, 0x90);
     638:	18fc      	adds	r4, r7, r3
     63a:	1cbb      	adds	r3, r7, #2
     63c:	881a      	ldrh	r2, [r3, #0]
     63e:	6879      	ldr	r1, [r7, #4]
    spi169_wr8(AX5043_FREQA3, 0x0A);
     640:	4b06      	ldr	r3, [pc, #24]	; (65c <spi169_write+0x34>)
     642:	0018      	movs	r0, r3
     644:	4b06      	ldr	r3, [pc, #24]	; (660 <spi169_write+0x38>)
     646:	4798      	blx	r3
    
    // wait for crystal to start
//    while((spi169_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
    
    // autorange the PLL once crystal has settled
    spi169_autorange();
     648:	0003      	movs	r3, r0
     64a:	7023      	strb	r3, [r4, #0]
    
    // clear the FIFO
    spi169_wr8(AX5043_FIFOSTAT, (1 << 7));
     64c:	230f      	movs	r3, #15
     64e:	18fb      	adds	r3, r7, r3
     650:	781b      	ldrb	r3, [r3, #0]
     652:	0018      	movs	r0, r3

    // set to full transmit power mode
    spi169_wr8(AX5043_PWRMODE, 0x60 | AX5043_FULLTX);
     654:	46bd      	mov	sp, r7
     656:	b005      	add	sp, #20
     658:	bd90      	pop	{r4, r7, pc}
     65a:	46c0      	nop			; (mov r8, r8)
    delay_ms(100);
     65c:	20000134 	.word	0x20000134
     660:	000026cd 	.word	0x000026cd

00000664 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     664:	b580      	push	{r7, lr}
     666:	b082      	sub	sp, #8
     668:	af00      	add	r7, sp, #0
     66a:	0002      	movs	r2, r0
     66c:	1dfb      	adds	r3, r7, #7
     66e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <system_interrupt_enable+0x28>)
     672:	1dfa      	adds	r2, r7, #7
     674:	7812      	ldrb	r2, [r2, #0]
     676:	0011      	movs	r1, r2
     678:	221f      	movs	r2, #31
     67a:	400a      	ands	r2, r1
     67c:	2101      	movs	r1, #1
     67e:	4091      	lsls	r1, r2
     680:	000a      	movs	r2, r1
     682:	601a      	str	r2, [r3, #0]
}
     684:	46c0      	nop			; (mov r8, r8)
     686:	46bd      	mov	sp, r7
     688:	b002      	add	sp, #8
     68a:	bd80      	pop	{r7, pc}
     68c:	e000e100 	.word	0xe000e100

00000690 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     690:	b580      	push	{r7, lr}
     692:	b084      	sub	sp, #16
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     698:	687b      	ldr	r3, [r7, #4]
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     69e:	68fb      	ldr	r3, [r7, #12]
     6a0:	69db      	ldr	r3, [r3, #28]
     6a2:	1e5a      	subs	r2, r3, #1
     6a4:	4193      	sbcs	r3, r2
     6a6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     6a8:	0018      	movs	r0, r3
     6aa:	46bd      	mov	sp, r7
     6ac:	b004      	add	sp, #16
     6ae:	bd80      	pop	{r7, pc}

000006b0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     6b8:	46c0      	nop			; (mov r8, r8)
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	0018      	movs	r0, r3
     6be:	4b04      	ldr	r3, [pc, #16]	; (6d0 <_usart_wait_for_sync+0x20>)
     6c0:	4798      	blx	r3
     6c2:	1e03      	subs	r3, r0, #0
     6c4:	d1f9      	bne.n	6ba <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	46bd      	mov	sp, r7
     6ca:	b002      	add	sp, #8
     6cc:	bd80      	pop	{r7, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	00000691 	.word	0x00000691

000006d4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     6d4:	b580      	push	{r7, lr}
     6d6:	b082      	sub	sp, #8
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	2280      	movs	r2, #128	; 0x80
     6e0:	05d2      	lsls	r2, r2, #23
     6e2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	2200      	movs	r2, #0
     6e8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	22ff      	movs	r2, #255	; 0xff
     6ee:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	2200      	movs	r2, #0
     6f4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	2200      	movs	r2, #0
     6fa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	2296      	movs	r2, #150	; 0x96
     700:	0192      	lsls	r2, r2, #6
     702:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     704:	687b      	ldr	r3, [r7, #4]
     706:	2224      	movs	r2, #36	; 0x24
     708:	2101      	movs	r1, #1
     70a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	2225      	movs	r2, #37	; 0x25
     710:	2101      	movs	r1, #1
     712:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     714:	687b      	ldr	r3, [r7, #4]
     716:	2226      	movs	r2, #38	; 0x26
     718:	2100      	movs	r1, #0
     71a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	2227      	movs	r2, #39	; 0x27
     720:	2100      	movs	r1, #0
     722:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     724:	687b      	ldr	r3, [r7, #4]
     726:	2200      	movs	r2, #0
     728:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	2288      	movs	r2, #136	; 0x88
     72e:	0352      	lsls	r2, r2, #13
     730:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     732:	687b      	ldr	r3, [r7, #4]
     734:	222c      	movs	r2, #44	; 0x2c
     736:	2100      	movs	r1, #0
     738:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	222d      	movs	r2, #45	; 0x2d
     73e:	2100      	movs	r1, #0
     740:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     742:	687b      	ldr	r3, [r7, #4]
     744:	2200      	movs	r2, #0
     746:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     748:	687b      	ldr	r3, [r7, #4]
     74a:	2200      	movs	r2, #0
     74c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     74e:	687b      	ldr	r3, [r7, #4]
     750:	2200      	movs	r2, #0
     752:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     754:	687b      	ldr	r3, [r7, #4]
     756:	2200      	movs	r2, #0
     758:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	2200      	movs	r2, #0
     75e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     760:	687b      	ldr	r3, [r7, #4]
     762:	2200      	movs	r2, #0
     764:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     766:	687b      	ldr	r3, [r7, #4]
     768:	2200      	movs	r2, #0
     76a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	2200      	movs	r2, #0
     770:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     772:	687b      	ldr	r3, [r7, #4]
     774:	2200      	movs	r2, #0
     776:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     778:	687b      	ldr	r3, [r7, #4]
     77a:	2200      	movs	r2, #0
     77c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     77e:	687b      	ldr	r3, [r7, #4]
     780:	2213      	movs	r2, #19
     782:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     784:	687b      	ldr	r3, [r7, #4]
     786:	2200      	movs	r2, #0
     788:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	46bd      	mov	sp, r7
     78e:	b002      	add	sp, #8
     790:	bd80      	pop	{r7, pc}
	...

00000794 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     794:	b580      	push	{r7, lr}
     796:	b084      	sub	sp, #16
     798:	af00      	add	r7, sp, #0
     79a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     79c:	687b      	ldr	r3, [r7, #4]
     79e:	681b      	ldr	r3, [r3, #0]
     7a0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	681b      	ldr	r3, [r3, #0]
     7a6:	0018      	movs	r0, r3
     7a8:	4b09      	ldr	r3, [pc, #36]	; (7d0 <usart_enable+0x3c>)
     7aa:	4798      	blx	r3
     7ac:	0003      	movs	r3, r0
     7ae:	0018      	movs	r0, r3
     7b0:	4b08      	ldr	r3, [pc, #32]	; (7d4 <usart_enable+0x40>)
     7b2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	0018      	movs	r0, r3
     7b8:	4b07      	ldr	r3, [pc, #28]	; (7d8 <usart_enable+0x44>)
     7ba:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     7bc:	68fb      	ldr	r3, [r7, #12]
     7be:	681b      	ldr	r3, [r3, #0]
     7c0:	2202      	movs	r2, #2
     7c2:	431a      	orrs	r2, r3
     7c4:	68fb      	ldr	r3, [r7, #12]
     7c6:	601a      	str	r2, [r3, #0]
}
     7c8:	46c0      	nop			; (mov r8, r8)
     7ca:	46bd      	mov	sp, r7
     7cc:	b004      	add	sp, #16
     7ce:	bd80      	pop	{r7, pc}
     7d0:	000032c9 	.word	0x000032c9
     7d4:	00000665 	.word	0x00000665
     7d8:	000006b1 	.word	0x000006b1

000007dc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b082      	sub	sp, #8
     7e0:	af00      	add	r7, sp, #0
     7e2:	6078      	str	r0, [r7, #4]
     7e4:	000a      	movs	r2, r1
     7e6:	1cfb      	adds	r3, r7, #3
     7e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	2231      	movs	r2, #49	; 0x31
     7ee:	5c9b      	ldrb	r3, [r3, r2]
     7f0:	b25a      	sxtb	r2, r3
     7f2:	1cfb      	adds	r3, r7, #3
     7f4:	781b      	ldrb	r3, [r3, #0]
     7f6:	2101      	movs	r1, #1
     7f8:	4099      	lsls	r1, r3
     7fa:	000b      	movs	r3, r1
     7fc:	b25b      	sxtb	r3, r3
     7fe:	4313      	orrs	r3, r2
     800:	b25b      	sxtb	r3, r3
     802:	b2d9      	uxtb	r1, r3
     804:	687b      	ldr	r3, [r7, #4]
     806:	2231      	movs	r2, #49	; 0x31
     808:	5499      	strb	r1, [r3, r2]

}
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	46bd      	mov	sp, r7
     80e:	b002      	add	sp, #8
     810:	bd80      	pop	{r7, pc}
	...

00000814 <uart915_init>:
 * Return Values(s) : void
 * Description      : Initializes the SERCOM UART for communication with the
 *  MTXDOT module.
 */
void uart915_init(void)
{
     814:	b580      	push	{r7, lr}
     816:	b090      	sub	sp, #64	; 0x40
     818:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
     81a:	003b      	movs	r3, r7
     81c:	0018      	movs	r0, r3
     81e:	4b1b      	ldr	r3, [pc, #108]	; (88c <uart915_init+0x78>)
     820:	4798      	blx	r3
    
    // configure the UART
    config_usart.baudrate    = UART915_BAUD;
     822:	003b      	movs	r3, r7
     824:	22e1      	movs	r2, #225	; 0xe1
     826:	0252      	lsls	r2, r2, #9
     828:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = UART915_PINMUX;
     82a:	003b      	movs	r3, r7
     82c:	2290      	movs	r2, #144	; 0x90
     82e:	0352      	lsls	r2, r2, #13
     830:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = UTX915;
     832:	003b      	movs	r3, r7
     834:	4a16      	ldr	r2, [pc, #88]	; (890 <uart915_init+0x7c>)
     836:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = URX915;
     838:	003b      	movs	r3, r7
     83a:	4a16      	ldr	r2, [pc, #88]	; (894 <uart915_init+0x80>)
     83c:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     83e:	003b      	movs	r3, r7
     840:	2201      	movs	r2, #1
     842:	4252      	negs	r2, r2
     844:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     846:	003b      	movs	r3, r7
     848:	2201      	movs	r2, #1
     84a:	4252      	negs	r2, r2
     84c:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.generator_source = UART245_CLK;
     84e:	003b      	movs	r3, r7
     850:	222d      	movs	r2, #45	; 0x2d
     852:	2100      	movs	r1, #0
     854:	5499      	strb	r1, [r3, r2]
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
     856:	003b      	movs	r3, r7
     858:	2200      	movs	r2, #0
     85a:	605a      	str	r2, [r3, #4]
    
    // initialize the uart module until an STATUS_OK is returned
    while (usart_init(&uart915_inst, UART915, &config_usart) != STATUS_OK);
     85c:	46c0      	nop			; (mov r8, r8)
     85e:	003a      	movs	r2, r7
     860:	490d      	ldr	r1, [pc, #52]	; (898 <uart915_init+0x84>)
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <uart915_init+0x88>)
     864:	0018      	movs	r0, r3
     866:	4b0e      	ldr	r3, [pc, #56]	; (8a0 <uart915_init+0x8c>)
     868:	4798      	blx	r3
     86a:	1e03      	subs	r3, r0, #0
     86c:	d1f7      	bne.n	85e <uart915_init+0x4a>
    
    // enable the uart
    usart_enable(&uart915_inst);
     86e:	4b0b      	ldr	r3, [pc, #44]	; (89c <uart915_init+0x88>)
     870:	0018      	movs	r0, r3
     872:	4b0c      	ldr	r3, [pc, #48]	; (8a4 <uart915_init+0x90>)
     874:	4798      	blx	r3
    
    // configure the callback(s) for this module
    configure_uart915_callbacks();
     876:	4b0c      	ldr	r3, [pc, #48]	; (8a8 <uart915_init+0x94>)
     878:	4798      	blx	r3
	

	uart915_preconnect();
     87a:	4b0c      	ldr	r3, [pc, #48]	; (8ac <uart915_init+0x98>)
     87c:	4798      	blx	r3

	 uart915_network_config();
     87e:	4b0c      	ldr	r3, [pc, #48]	; (8b0 <uart915_init+0x9c>)
     880:	4798      	blx	r3
	

}
     882:	46c0      	nop			; (mov r8, r8)
     884:	46bd      	mov	sp, r7
     886:	b010      	add	sp, #64	; 0x40
     888:	bd80      	pop	{r7, pc}
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	000006d5 	.word	0x000006d5
     890:	000c0002 	.word	0x000c0002
     894:	000d0002 	.word	0x000d0002
     898:	42001000 	.word	0x42001000
     89c:	2000003c 	.word	0x2000003c
     8a0:	00001639 	.word	0x00001639
     8a4:	00000795 	.word	0x00000795
     8a8:	000008b5 	.word	0x000008b5
     8ac:	00000b19 	.word	0x00000b19
     8b0:	00000a89 	.word	0x00000a89

000008b4 <configure_uart915_callbacks>:
 *  (depending on which callback is registered) receives/transmits a character.
 *  Kind of like an ISR, but executed in the actual ISR for the UART (handled
 *  by the ASF library).
 */
void configure_uart915_callbacks(void)
{
     8b4:	b580      	push	{r7, lr}
     8b6:	af00      	add	r7, sp, #0
    // register the callback function
    usart_register_callback(&uart915_inst, uart915_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     8b8:	4909      	ldr	r1, [pc, #36]	; (8e0 <configure_uart915_callbacks+0x2c>)
     8ba:	4b0a      	ldr	r3, [pc, #40]	; (8e4 <configure_uart915_callbacks+0x30>)
     8bc:	2201      	movs	r2, #1
     8be:	0018      	movs	r0, r3
     8c0:	4b09      	ldr	r3, [pc, #36]	; (8e8 <configure_uart915_callbacks+0x34>)
     8c2:	4798      	blx	r3
    
    // enable callback for the receiver
    usart_enable_callback(&uart915_inst, USART_CALLBACK_BUFFER_RECEIVED);
     8c4:	4b07      	ldr	r3, [pc, #28]	; (8e4 <configure_uart915_callbacks+0x30>)
     8c6:	2101      	movs	r1, #1
     8c8:	0018      	movs	r0, r3
     8ca:	4b08      	ldr	r3, [pc, #32]	; (8ec <configure_uart915_callbacks+0x38>)
     8cc:	4798      	blx	r3
    
    // start a read buffer job so the receiver is ready
    usart_read_buffer_job(&uart915_inst, &uart915_rx_read, 1);
     8ce:	4908      	ldr	r1, [pc, #32]	; (8f0 <configure_uart915_callbacks+0x3c>)
     8d0:	4b04      	ldr	r3, [pc, #16]	; (8e4 <configure_uart915_callbacks+0x30>)
     8d2:	2201      	movs	r2, #1
     8d4:	0018      	movs	r0, r3
     8d6:	4b07      	ldr	r3, [pc, #28]	; (8f4 <configure_uart915_callbacks+0x40>)
     8d8:	4798      	blx	r3
}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	46bd      	mov	sp, r7
     8de:	bd80      	pop	{r7, pc}
     8e0:	000008f9 	.word	0x000008f9
     8e4:	2000003c 	.word	0x2000003c
     8e8:	00001b21 	.word	0x00001b21
     8ec:	000007dd 	.word	0x000007dd
     8f0:	20000070 	.word	0x20000070
     8f4:	00001b69 	.word	0x00001b69

000008f8 <uart915_read_callback>:
 *  character into a ring buffer and parses the character to find out if the 
 *  character is a part of a "OK\r\n" response from the MTXDOT module. Starts
 *  another UART buffer job (setting up an asynchronous read). 
 */
static void uart915_read_callback(struct usart_module *const usart_module)
{
     8f8:	b580      	push	{r7, lr}
     8fa:	b082      	sub	sp, #8
     8fc:	af00      	add	r7, sp, #0
     8fe:	6078      	str	r0, [r7, #4]
	 usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     900:	490f      	ldr	r1, [pc, #60]	; (940 <uart915_read_callback+0x48>)
     902:	687b      	ldr	r3, [r7, #4]
     904:	2201      	movs	r2, #1
     906:	0018      	movs	r0, r3
     908:	4b0e      	ldr	r3, [pc, #56]	; (944 <uart915_read_callback+0x4c>)
     90a:	4798      	blx	r3
	 
    // put the received byte into the ring buffer
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     90c:	4b0c      	ldr	r3, [pc, #48]	; (940 <uart915_read_callback+0x48>)
     90e:	781a      	ldrb	r2, [r3, #0]
     910:	4b0d      	ldr	r3, [pc, #52]	; (948 <uart915_read_callback+0x50>)
     912:	0011      	movs	r1, r2
     914:	0018      	movs	r0, r3
     916:	4b0d      	ldr	r3, [pc, #52]	; (94c <uart915_read_callback+0x54>)
     918:	4798      	blx	r3
    
    /* parse the character to see if it is an "OK\r\n". Set the flag equal to
     * the response parsing function's return value */
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     91a:	4b09      	ldr	r3, [pc, #36]	; (940 <uart915_read_callback+0x48>)
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	0018      	movs	r0, r3
     920:	4b0b      	ldr	r3, [pc, #44]	; (950 <uart915_read_callback+0x58>)
     922:	4798      	blx	r3
     924:	0003      	movs	r3, r0
     926:	001a      	movs	r2, r3
     928:	4b0a      	ldr	r3, [pc, #40]	; (954 <uart915_read_callback+0x5c>)
     92a:	701a      	strb	r2, [r3, #0]
    
    // start another read buffer job
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     92c:	4904      	ldr	r1, [pc, #16]	; (940 <uart915_read_callback+0x48>)
     92e:	687b      	ldr	r3, [r7, #4]
     930:	2201      	movs	r2, #1
     932:	0018      	movs	r0, r3
     934:	4b03      	ldr	r3, [pc, #12]	; (944 <uart915_read_callback+0x4c>)
     936:	4798      	blx	r3
}
     938:	46c0      	nop			; (mov r8, r8)
     93a:	46bd      	mov	sp, r7
     93c:	b002      	add	sp, #8
     93e:	bd80      	pop	{r7, pc}
     940:	20000070 	.word	0x20000070
     944:	00001b69 	.word	0x00001b69
     948:	20000000 	.word	0x20000000
     94c:	00000179 	.word	0x00000179
     950:	00000959 	.word	0x00000959
     954:	200000f5 	.word	0x200000f5

00000958 <uart915_parse_response>:
 *  MTXDOT received and responded to a command sent by uart915_write_cmd().
 *  Anything else resets the state machine back to its starting state.
 *  Returns true if an "OK\r\n" sequence was found, else false.
 */
static bool uart915_parse_response(uint8_t next_char)
{
     958:	b580      	push	{r7, lr}
     95a:	b082      	sub	sp, #8
     95c:	af00      	add	r7, sp, #0
     95e:	0002      	movs	r2, r0
     960:	1dfb      	adds	r3, r7, #7
     962:	701a      	strb	r2, [r3, #0]
    switch(rx_state)
     964:	4b25      	ldr	r3, [pc, #148]	; (9fc <uart915_parse_response+0xa4>)
     966:	781b      	ldrb	r3, [r3, #0]
     968:	b2db      	uxtb	r3, r3
     96a:	2b01      	cmp	r3, #1
     96c:	d015      	beq.n	99a <uart915_parse_response+0x42>
     96e:	dc02      	bgt.n	976 <uart915_parse_response+0x1e>
     970:	2b00      	cmp	r3, #0
     972:	d005      	beq.n	980 <uart915_parse_response+0x28>
     974:	e039      	b.n	9ea <uart915_parse_response+0x92>
     976:	2b02      	cmp	r3, #2
     978:	d01c      	beq.n	9b4 <uart915_parse_response+0x5c>
     97a:	2b03      	cmp	r3, #3
     97c:	d027      	beq.n	9ce <uart915_parse_response+0x76>
     97e:	e034      	b.n	9ea <uart915_parse_response+0x92>
    {
        case START:
            switch(next_char)
     980:	1dfb      	adds	r3, r7, #7
     982:	781b      	ldrb	r3, [r3, #0]
     984:	2b4f      	cmp	r3, #79	; 0x4f
     986:	d103      	bne.n	990 <uart915_parse_response+0x38>
            {
                case 'O':
                   rx_state = O_RX;
     988:	4b1c      	ldr	r3, [pc, #112]	; (9fc <uart915_parse_response+0xa4>)
     98a:	2201      	movs	r2, #1
     98c:	701a      	strb	r2, [r3, #0]
                   break; //end of 'O' case
     98e:	e003      	b.n	998 <uart915_parse_response+0x40>
            
                default:
                    rx_state = START;
     990:	4b1a      	ldr	r3, [pc, #104]	; (9fc <uart915_parse_response+0xa4>)
     992:	2200      	movs	r2, #0
     994:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     996:	46c0      	nop			; (mov r8, r8)
            }
            break; //end of START case
     998:	e02b      	b.n	9f2 <uart915_parse_response+0x9a>
        
        case O_RX:
            switch(next_char)
     99a:	1dfb      	adds	r3, r7, #7
     99c:	781b      	ldrb	r3, [r3, #0]
     99e:	2b4b      	cmp	r3, #75	; 0x4b
     9a0:	d103      	bne.n	9aa <uart915_parse_response+0x52>
            {
                case 'K':
                    rx_state = K_RX;
     9a2:	4b16      	ldr	r3, [pc, #88]	; (9fc <uart915_parse_response+0xa4>)
     9a4:	2202      	movs	r2, #2
     9a6:	701a      	strb	r2, [r3, #0]
                    break; //end of 'K' case
     9a8:	e003      	b.n	9b2 <uart915_parse_response+0x5a>
            
                default:
                    rx_state = START;
     9aa:	4b14      	ldr	r3, [pc, #80]	; (9fc <uart915_parse_response+0xa4>)
     9ac:	2200      	movs	r2, #0
     9ae:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     9b0:	46c0      	nop			; (mov r8, r8)
            }
            
            break; //end of O_RX case
     9b2:	e01e      	b.n	9f2 <uart915_parse_response+0x9a>
        
        case K_RX:
            switch(next_char)
     9b4:	1dfb      	adds	r3, r7, #7
     9b6:	781b      	ldrb	r3, [r3, #0]
     9b8:	2b0d      	cmp	r3, #13
     9ba:	d103      	bne.n	9c4 <uart915_parse_response+0x6c>
            {
                case '\r':
                    rx_state = CR_RX;
     9bc:	4b0f      	ldr	r3, [pc, #60]	; (9fc <uart915_parse_response+0xa4>)
     9be:	2203      	movs	r2, #3
     9c0:	701a      	strb	r2, [r3, #0]
                    break; //end of '\r' case
     9c2:	e003      	b.n	9cc <uart915_parse_response+0x74>
            
                default:
                    rx_state = START;
     9c4:	4b0d      	ldr	r3, [pc, #52]	; (9fc <uart915_parse_response+0xa4>)
     9c6:	2200      	movs	r2, #0
     9c8:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     9ca:	46c0      	nop			; (mov r8, r8)
            }
            
        break; //end of K_RX case
     9cc:	e011      	b.n	9f2 <uart915_parse_response+0x9a>
        
        case CR_RX:
        switch(next_char)
     9ce:	1dfb      	adds	r3, r7, #7
     9d0:	781b      	ldrb	r3, [r3, #0]
     9d2:	2b0a      	cmp	r3, #10
     9d4:	d104      	bne.n	9e0 <uart915_parse_response+0x88>
        {
            case '\n':
                //reset state
                rx_state = START;
     9d6:	4b09      	ldr	r3, [pc, #36]	; (9fc <uart915_parse_response+0xa4>)
     9d8:	2200      	movs	r2, #0
     9da:	701a      	strb	r2, [r3, #0]
                //return true, because response is OK
                return true;
     9dc:	2301      	movs	r3, #1
     9de:	e009      	b.n	9f4 <uart915_parse_response+0x9c>
                break; //end of '\n' case
            
            default:
                rx_state = START;
     9e0:	4b06      	ldr	r3, [pc, #24]	; (9fc <uart915_parse_response+0xa4>)
     9e2:	2200      	movs	r2, #0
     9e4:	701a      	strb	r2, [r3, #0]
                break; //end of default case
     9e6:	46c0      	nop			; (mov r8, r8)
        }
        break; //end of CR_RX case
     9e8:	e003      	b.n	9f2 <uart915_parse_response+0x9a>
        
        default:
            rx_state = START;
     9ea:	4b04      	ldr	r3, [pc, #16]	; (9fc <uart915_parse_response+0xa4>)
     9ec:	2200      	movs	r2, #0
     9ee:	701a      	strb	r2, [r3, #0]
            break;
     9f0:	46c0      	nop			; (mov r8, r8)
    }
    
    return false;
     9f2:	2300      	movs	r3, #0
}
     9f4:	0018      	movs	r0, r3
     9f6:	46bd      	mov	sp, r7
     9f8:	b002      	add	sp, #8
     9fa:	bd80      	pop	{r7, pc}
     9fc:	200000f4 	.word	0x200000f4

00000a00 <uart915_write_cmd>:
 * Return Values(s) : void
 * Description      : Sends a string to the MTXDOT and waits for an 
 *  "OK\r\n" response.
 */
void uart915_write_cmd(const char* cmd_str)
{
     a00:	b580      	push	{r7, lr}
     a02:	b082      	sub	sp, #8
     a04:	af00      	add	r7, sp, #0
     a06:	6078      	str	r0, [r7, #4]
    // clear the flag
    flag_ok_received = false;
     a08:	4b17      	ldr	r3, [pc, #92]	; (a68 <uart915_write_cmd+0x68>)
     a0a:	2200      	movs	r2, #0
     a0c:	701a      	strb	r2, [r3, #0]
    
    // reset state machine for determining okay_received
    rx_state = START;
     a0e:	4b17      	ldr	r3, [pc, #92]	; (a6c <uart915_write_cmd+0x6c>)
     a10:	2200      	movs	r2, #0
     a12:	701a      	strb	r2, [r3, #0]
    
    // clear the ring buffer
    ringbuff_clear(&uart915_ringbuff);
     a14:	4b16      	ldr	r3, [pc, #88]	; (a70 <uart915_write_cmd+0x70>)
     a16:	0018      	movs	r0, r3
     a18:	4b16      	ldr	r3, [pc, #88]	; (a74 <uart915_write_cmd+0x74>)
     a1a:	4798      	blx	r3
    
    // write the AT command
    usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	0018      	movs	r0, r3
     a20:	4b15      	ldr	r3, [pc, #84]	; (a78 <uart915_write_cmd+0x78>)
     a22:	4798      	blx	r3
     a24:	0003      	movs	r3, r0
     a26:	b29a      	uxth	r2, r3
     a28:	6879      	ldr	r1, [r7, #4]
     a2a:	4b14      	ldr	r3, [pc, #80]	; (a7c <uart915_write_cmd+0x7c>)
     a2c:	0018      	movs	r0, r3
     a2e:	4b14      	ldr	r3, [pc, #80]	; (a80 <uart915_write_cmd+0x80>)
     a30:	4798      	blx	r3
    

    while(!flag_ok_received){
     a32:	e00d      	b.n	a50 <uart915_write_cmd+0x50>
		usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	0018      	movs	r0, r3
     a38:	4b0f      	ldr	r3, [pc, #60]	; (a78 <uart915_write_cmd+0x78>)
     a3a:	4798      	blx	r3
     a3c:	0003      	movs	r3, r0
     a3e:	b29a      	uxth	r2, r3
     a40:	6879      	ldr	r1, [r7, #4]
     a42:	4b0e      	ldr	r3, [pc, #56]	; (a7c <uart915_write_cmd+0x7c>)
     a44:	0018      	movs	r0, r3
     a46:	4b0e      	ldr	r3, [pc, #56]	; (a80 <uart915_write_cmd+0x80>)
     a48:	4798      	blx	r3
		delay_ms(10);
     a4a:	200a      	movs	r0, #10
     a4c:	4b0d      	ldr	r3, [pc, #52]	; (a84 <uart915_write_cmd+0x84>)
     a4e:	4798      	blx	r3
    while(!flag_ok_received){
     a50:	4b05      	ldr	r3, [pc, #20]	; (a68 <uart915_write_cmd+0x68>)
     a52:	781b      	ldrb	r3, [r3, #0]
     a54:	b2db      	uxtb	r3, r3
     a56:	2201      	movs	r2, #1
     a58:	4053      	eors	r3, r2
     a5a:	b2db      	uxtb	r3, r3
     a5c:	2b00      	cmp	r3, #0
     a5e:	d1e9      	bne.n	a34 <uart915_write_cmd+0x34>
		};
}
     a60:	46c0      	nop			; (mov r8, r8)
     a62:	46bd      	mov	sp, r7
     a64:	b002      	add	sp, #8
     a66:	bd80      	pop	{r7, pc}
     a68:	200000f5 	.word	0x200000f5
     a6c:	200000f4 	.word	0x200000f4
     a70:	20000000 	.word	0x20000000
     a74:	0000013d 	.word	0x0000013d
     a78:	0000451d 	.word	0x0000451d
     a7c:	2000003c 	.word	0x2000003c
     a80:	00001911 	.word	0x00001911
     a84:	00000bd9 	.word	0x00000bd9

00000a88 <uart915_network_config>:
 * Description      : Configuration for network between Tx and Rx MTXDOTs
 *  AT command sequence obtained from MTXDOT Developer Guide pg. 121 
 */

void uart915_network_config()
{
     a88:	b580      	push	{r7, lr}
     a8a:	af00      	add	r7, sp, #0
	uart915_write_cmd("AT\r\n");
     a8c:	4b17      	ldr	r3, [pc, #92]	; (aec <uart915_network_config+0x64>)
     a8e:	0018      	movs	r0, r3
     a90:	4b17      	ldr	r3, [pc, #92]	; (af0 <uart915_network_config+0x68>)
     a92:	4798      	blx	r3
	uart915_write_cmd("AT+NJM=3\r\n");
     a94:	4b17      	ldr	r3, [pc, #92]	; (af4 <uart915_network_config+0x6c>)
     a96:	0018      	movs	r0, r3
     a98:	4b15      	ldr	r3, [pc, #84]	; (af0 <uart915_network_config+0x68>)
     a9a:	4798      	blx	r3
	uart915_write_cmd("AT+NA=00112233\r\n");
     a9c:	4b16      	ldr	r3, [pc, #88]	; (af8 <uart915_network_config+0x70>)
     a9e:	0018      	movs	r0, r3
     aa0:	4b13      	ldr	r3, [pc, #76]	; (af0 <uart915_network_config+0x68>)
     aa2:	4798      	blx	r3
	uart915_write_cmd("AT+NSK=00112233001122330011223300112233\r\n");
     aa4:	4b15      	ldr	r3, [pc, #84]	; (afc <uart915_network_config+0x74>)
     aa6:	0018      	movs	r0, r3
     aa8:	4b11      	ldr	r3, [pc, #68]	; (af0 <uart915_network_config+0x68>)
     aaa:	4798      	blx	r3
	uart915_write_cmd("AT+DSK=33221100332211003322110033221100\r\n");
     aac:	4b14      	ldr	r3, [pc, #80]	; (b00 <uart915_network_config+0x78>)
     aae:	0018      	movs	r0, r3
     ab0:	4b0f      	ldr	r3, [pc, #60]	; (af0 <uart915_network_config+0x68>)
     ab2:	4798      	blx	r3
	uart915_write_cmd("AT+TXDR=DR8\r\n");
     ab4:	4b13      	ldr	r3, [pc, #76]	; (b04 <uart915_network_config+0x7c>)
     ab6:	0018      	movs	r0, r3
     ab8:	4b0d      	ldr	r3, [pc, #52]	; (af0 <uart915_network_config+0x68>)
     aba:	4798      	blx	r3
	uart915_write_cmd("AT+TXF=915500000\r\n");
     abc:	4b12      	ldr	r3, [pc, #72]	; (b08 <uart915_network_config+0x80>)
     abe:	0018      	movs	r0, r3
     ac0:	4b0b      	ldr	r3, [pc, #44]	; (af0 <uart915_network_config+0x68>)
     ac2:	4798      	blx	r3
	uart915_write_cmd("AT&W\r\n");
     ac4:	4b11      	ldr	r3, [pc, #68]	; (b0c <uart915_network_config+0x84>)
     ac6:	0018      	movs	r0, r3
     ac8:	4b09      	ldr	r3, [pc, #36]	; (af0 <uart915_network_config+0x68>)
     aca:	4798      	blx	r3
	uart915_write_cmd("ATZ\r\n");
     acc:	4b10      	ldr	r3, [pc, #64]	; (b10 <uart915_network_config+0x88>)
     ace:	0018      	movs	r0, r3
     ad0:	4b07      	ldr	r3, [pc, #28]	; (af0 <uart915_network_config+0x68>)
     ad2:	4798      	blx	r3
	uart915_write_cmd("AT+NJM=3\r\n");
     ad4:	4b07      	ldr	r3, [pc, #28]	; (af4 <uart915_network_config+0x6c>)
     ad6:	0018      	movs	r0, r3
     ad8:	4b05      	ldr	r3, [pc, #20]	; (af0 <uart915_network_config+0x68>)
     ada:	4798      	blx	r3
	uart915_write_cmd("AT+SD\r\n");
     adc:	4b0d      	ldr	r3, [pc, #52]	; (b14 <uart915_network_config+0x8c>)
     ade:	0018      	movs	r0, r3
     ae0:	4b03      	ldr	r3, [pc, #12]	; (af0 <uart915_network_config+0x68>)
     ae2:	4798      	blx	r3
	
}
     ae4:	46c0      	nop			; (mov r8, r8)
     ae6:	46bd      	mov	sp, r7
     ae8:	bd80      	pop	{r7, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	0000452c 	.word	0x0000452c
     af0:	00000a01 	.word	0x00000a01
     af4:	00004534 	.word	0x00004534
     af8:	00004540 	.word	0x00004540
     afc:	00004554 	.word	0x00004554
     b00:	00004580 	.word	0x00004580
     b04:	000045ac 	.word	0x000045ac
     b08:	000045bc 	.word	0x000045bc
     b0c:	000045d0 	.word	0x000045d0
     b10:	000045d8 	.word	0x000045d8
     b14:	000045e0 	.word	0x000045e0

00000b18 <uart915_preconnect>:
    
    // convert the number at the current spot in the string to an int
    return atoi((char*) &rspns_buff[i]);
}

uart915_preconnect(void){
     b18:	b580      	push	{r7, lr}
     b1a:	b082      	sub	sp, #8
     b1c:	af00      	add	r7, sp, #0
    int i = 0;
     b1e:	2300      	movs	r3, #0
     b20:	607b      	str	r3, [r7, #4]
    
    /* send 10 "AT" and "AT+SEND" commands to validate conenction
     * between the receiver and transmitter */
    for(; i < 10; i++)
     b22:	e006      	b.n	b32 <uart915_preconnect+0x1a>
    {
        uart915_write_cmd("AT\r\n");
     b24:	4b07      	ldr	r3, [pc, #28]	; (b44 <uart915_preconnect+0x2c>)
     b26:	0018      	movs	r0, r3
     b28:	4b07      	ldr	r3, [pc, #28]	; (b48 <uart915_preconnect+0x30>)
     b2a:	4798      	blx	r3
    for(; i < 10; i++)
     b2c:	687b      	ldr	r3, [r7, #4]
     b2e:	3301      	adds	r3, #1
     b30:	607b      	str	r3, [r7, #4]
     b32:	687b      	ldr	r3, [r7, #4]
     b34:	2b09      	cmp	r3, #9
     b36:	ddf5      	ble.n	b24 <uart915_preconnect+0xc>
       // uart915_write_cmd("AT+SEND\r\n");  
    }
     b38:	46c0      	nop			; (mov r8, r8)
     b3a:	0018      	movs	r0, r3
     b3c:	46bd      	mov	sp, r7
     b3e:	b002      	add	sp, #8
     b40:	bd80      	pop	{r7, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	0000452c 	.word	0x0000452c
     b48:	00000a01 	.word	0x00000a01

00000b4c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     b4c:	b580      	push	{r7, lr}
     b4e:	b082      	sub	sp, #8
     b50:	af00      	add	r7, sp, #0
     b52:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	2b00      	cmp	r3, #0
     b58:	d00c      	beq.n	b74 <delay_cycles+0x28>
		SysTick->LOAD = n;
     b5a:	4b08      	ldr	r3, [pc, #32]	; (b7c <delay_cycles+0x30>)
     b5c:	687a      	ldr	r2, [r7, #4]
     b5e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     b60:	4b06      	ldr	r3, [pc, #24]	; (b7c <delay_cycles+0x30>)
     b62:	2200      	movs	r2, #0
     b64:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	4b04      	ldr	r3, [pc, #16]	; (b7c <delay_cycles+0x30>)
     b6a:	681a      	ldr	r2, [r3, #0]
     b6c:	2380      	movs	r3, #128	; 0x80
     b6e:	025b      	lsls	r3, r3, #9
     b70:	4013      	ands	r3, r2
     b72:	d0f9      	beq.n	b68 <delay_cycles+0x1c>
		};
	}
}
     b74:	46c0      	nop			; (mov r8, r8)
     b76:	46bd      	mov	sp, r7
     b78:	b002      	add	sp, #8
     b7a:	bd80      	pop	{r7, pc}
     b7c:	e000e010 	.word	0xe000e010

00000b80 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     b80:	b580      	push	{r7, lr}
     b82:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     b84:	2000      	movs	r0, #0
     b86:	4b0f      	ldr	r3, [pc, #60]	; (bc4 <delay_init+0x44>)
     b88:	4798      	blx	r3
     b8a:	0002      	movs	r2, r0
     b8c:	4b0e      	ldr	r3, [pc, #56]	; (bc8 <delay_init+0x48>)
     b8e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     b90:	4b0d      	ldr	r3, [pc, #52]	; (bc8 <delay_init+0x48>)
     b92:	6818      	ldr	r0, [r3, #0]
     b94:	4b0d      	ldr	r3, [pc, #52]	; (bcc <delay_init+0x4c>)
     b96:	22fa      	movs	r2, #250	; 0xfa
     b98:	0091      	lsls	r1, r2, #2
     b9a:	4798      	blx	r3
     b9c:	0003      	movs	r3, r0
     b9e:	001a      	movs	r2, r3
     ba0:	4b09      	ldr	r3, [pc, #36]	; (bc8 <delay_init+0x48>)
     ba2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     ba4:	4b08      	ldr	r3, [pc, #32]	; (bc8 <delay_init+0x48>)
     ba6:	6818      	ldr	r0, [r3, #0]
     ba8:	4b08      	ldr	r3, [pc, #32]	; (bcc <delay_init+0x4c>)
     baa:	22fa      	movs	r2, #250	; 0xfa
     bac:	0091      	lsls	r1, r2, #2
     bae:	4798      	blx	r3
     bb0:	0003      	movs	r3, r0
     bb2:	001a      	movs	r2, r3
     bb4:	4b06      	ldr	r3, [pc, #24]	; (bd0 <delay_init+0x50>)
     bb6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     bb8:	4b06      	ldr	r3, [pc, #24]	; (bd4 <delay_init+0x54>)
     bba:	2205      	movs	r2, #5
     bbc:	601a      	str	r2, [r3, #0]
}
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	46bd      	mov	sp, r7
     bc2:	bd80      	pop	{r7, pc}
     bc4:	00003ad5 	.word	0x00003ad5
     bc8:	20000010 	.word	0x20000010
     bcc:	00004359 	.word	0x00004359
     bd0:	20000014 	.word	0x20000014
     bd4:	e000e010 	.word	0xe000e010

00000bd8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     bd8:	b580      	push	{r7, lr}
     bda:	b082      	sub	sp, #8
     bdc:	af00      	add	r7, sp, #0
     bde:	6078      	str	r0, [r7, #4]
	while (n--) {
     be0:	e004      	b.n	bec <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     be2:	4b07      	ldr	r3, [pc, #28]	; (c00 <delay_cycles_ms+0x28>)
     be4:	681b      	ldr	r3, [r3, #0]
     be6:	0018      	movs	r0, r3
     be8:	4b06      	ldr	r3, [pc, #24]	; (c04 <delay_cycles_ms+0x2c>)
     bea:	4798      	blx	r3
	while (n--) {
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	1e5a      	subs	r2, r3, #1
     bf0:	607a      	str	r2, [r7, #4]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d1f5      	bne.n	be2 <delay_cycles_ms+0xa>
	}
}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	46bd      	mov	sp, r7
     bfa:	b002      	add	sp, #8
     bfc:	bd80      	pop	{r7, pc}
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	20000010 	.word	0x20000010
     c04:	00000b4d 	.word	0x00000b4d

00000c08 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     c08:	b580      	push	{r7, lr}
     c0a:	b082      	sub	sp, #8
     c0c:	af00      	add	r7, sp, #0
     c0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	2280      	movs	r2, #128	; 0x80
     c14:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	2200      	movs	r2, #0
     c1a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	2201      	movs	r2, #1
     c20:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	2200      	movs	r2, #0
     c26:	70da      	strb	r2, [r3, #3]
}
     c28:	46c0      	nop			; (mov r8, r8)
     c2a:	46bd      	mov	sp, r7
     c2c:	b002      	add	sp, #8
     c2e:	bd80      	pop	{r7, pc}

00000c30 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     c30:	b580      	push	{r7, lr}
     c32:	b084      	sub	sp, #16
     c34:	af00      	add	r7, sp, #0
     c36:	0002      	movs	r2, r0
     c38:	6039      	str	r1, [r7, #0]
     c3a:	1dfb      	adds	r3, r7, #7
     c3c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     c3e:	230c      	movs	r3, #12
     c40:	18fb      	adds	r3, r7, r3
     c42:	0018      	movs	r0, r3
     c44:	4b10      	ldr	r3, [pc, #64]	; (c88 <port_pin_set_config+0x58>)
     c46:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     c48:	230c      	movs	r3, #12
     c4a:	18fb      	adds	r3, r7, r3
     c4c:	2280      	movs	r2, #128	; 0x80
     c4e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     c50:	683b      	ldr	r3, [r7, #0]
     c52:	781a      	ldrb	r2, [r3, #0]
     c54:	230c      	movs	r3, #12
     c56:	18fb      	adds	r3, r7, r3
     c58:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     c5a:	683b      	ldr	r3, [r7, #0]
     c5c:	785a      	ldrb	r2, [r3, #1]
     c5e:	230c      	movs	r3, #12
     c60:	18fb      	adds	r3, r7, r3
     c62:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     c64:	683b      	ldr	r3, [r7, #0]
     c66:	789a      	ldrb	r2, [r3, #2]
     c68:	230c      	movs	r3, #12
     c6a:	18fb      	adds	r3, r7, r3
     c6c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     c6e:	230c      	movs	r3, #12
     c70:	18fa      	adds	r2, r7, r3
     c72:	1dfb      	adds	r3, r7, #7
     c74:	781b      	ldrb	r3, [r3, #0]
     c76:	0011      	movs	r1, r2
     c78:	0018      	movs	r0, r3
     c7a:	4b04      	ldr	r3, [pc, #16]	; (c8c <port_pin_set_config+0x5c>)
     c7c:	4798      	blx	r3
}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	46bd      	mov	sp, r7
     c82:	b004      	add	sp, #16
     c84:	bd80      	pop	{r7, pc}
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	00000c09 	.word	0x00000c09
     c8c:	00003e99 	.word	0x00003e99

00000c90 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     c90:	b580      	push	{r7, lr}
     c92:	b082      	sub	sp, #8
     c94:	af00      	add	r7, sp, #0
     c96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     c98:	687b      	ldr	r3, [r7, #4]
     c9a:	2200      	movs	r2, #0
     c9c:	701a      	strb	r2, [r3, #0]
}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	46bd      	mov	sp, r7
     ca2:	b002      	add	sp, #8
     ca4:	bd80      	pop	{r7, pc}

00000ca6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca8:	b08d      	sub	sp, #52	; 0x34
     caa:	af00      	add	r7, sp, #0
     cac:	60b8      	str	r0, [r7, #8]
     cae:	60f9      	str	r1, [r7, #12]
     cb0:	603a      	str	r2, [r7, #0]
     cb2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     cb4:	2300      	movs	r3, #0
     cb6:	2400      	movs	r4, #0
     cb8:	623b      	str	r3, [r7, #32]
     cba:	627c      	str	r4, [r7, #36]	; 0x24
     cbc:	2300      	movs	r3, #0
     cbe:	2400      	movs	r4, #0
     cc0:	61bb      	str	r3, [r7, #24]
     cc2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     cc4:	233f      	movs	r3, #63	; 0x3f
     cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
     cc8:	e053      	b.n	d72 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ccc:	3b20      	subs	r3, #32
     cce:	2b00      	cmp	r3, #0
     cd0:	db04      	blt.n	cdc <long_division+0x36>
     cd2:	2201      	movs	r2, #1
     cd4:	409a      	lsls	r2, r3
     cd6:	0013      	movs	r3, r2
     cd8:	617b      	str	r3, [r7, #20]
     cda:	e00b      	b.n	cf4 <long_division+0x4e>
     cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cde:	2220      	movs	r2, #32
     ce0:	1ad3      	subs	r3, r2, r3
     ce2:	2201      	movs	r2, #1
     ce4:	40da      	lsrs	r2, r3
     ce6:	0013      	movs	r3, r2
     ce8:	2100      	movs	r1, #0
     cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cec:	4091      	lsls	r1, r2
     cee:	000a      	movs	r2, r1
     cf0:	4313      	orrs	r3, r2
     cf2:	617b      	str	r3, [r7, #20]
     cf4:	2201      	movs	r2, #1
     cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cf8:	409a      	lsls	r2, r3
     cfa:	0013      	movs	r3, r2
     cfc:	613b      	str	r3, [r7, #16]

		r = r << 1;
     cfe:	69bb      	ldr	r3, [r7, #24]
     d00:	69fc      	ldr	r4, [r7, #28]
     d02:	18db      	adds	r3, r3, r3
     d04:	4164      	adcs	r4, r4
     d06:	61bb      	str	r3, [r7, #24]
     d08:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     d0a:	68bb      	ldr	r3, [r7, #8]
     d0c:	693a      	ldr	r2, [r7, #16]
     d0e:	401a      	ands	r2, r3
     d10:	0015      	movs	r5, r2
     d12:	68fb      	ldr	r3, [r7, #12]
     d14:	697a      	ldr	r2, [r7, #20]
     d16:	401a      	ands	r2, r3
     d18:	0016      	movs	r6, r2
     d1a:	002b      	movs	r3, r5
     d1c:	4333      	orrs	r3, r6
     d1e:	d007      	beq.n	d30 <long_division+0x8a>
			r |= 0x01;
     d20:	69bb      	ldr	r3, [r7, #24]
     d22:	2201      	movs	r2, #1
     d24:	4313      	orrs	r3, r2
     d26:	61bb      	str	r3, [r7, #24]
     d28:	69fb      	ldr	r3, [r7, #28]
     d2a:	2200      	movs	r2, #0
     d2c:	4313      	orrs	r3, r2
     d2e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     d30:	687a      	ldr	r2, [r7, #4]
     d32:	69fb      	ldr	r3, [r7, #28]
     d34:	429a      	cmp	r2, r3
     d36:	d819      	bhi.n	d6c <long_division+0xc6>
     d38:	687a      	ldr	r2, [r7, #4]
     d3a:	69fb      	ldr	r3, [r7, #28]
     d3c:	429a      	cmp	r2, r3
     d3e:	d103      	bne.n	d48 <long_division+0xa2>
     d40:	683a      	ldr	r2, [r7, #0]
     d42:	69bb      	ldr	r3, [r7, #24]
     d44:	429a      	cmp	r2, r3
     d46:	d811      	bhi.n	d6c <long_division+0xc6>
			r = r - d;
     d48:	69b9      	ldr	r1, [r7, #24]
     d4a:	69fa      	ldr	r2, [r7, #28]
     d4c:	683b      	ldr	r3, [r7, #0]
     d4e:	687c      	ldr	r4, [r7, #4]
     d50:	1ac9      	subs	r1, r1, r3
     d52:	41a2      	sbcs	r2, r4
     d54:	000b      	movs	r3, r1
     d56:	0014      	movs	r4, r2
     d58:	61bb      	str	r3, [r7, #24]
     d5a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     d5c:	6a3a      	ldr	r2, [r7, #32]
     d5e:	693b      	ldr	r3, [r7, #16]
     d60:	4313      	orrs	r3, r2
     d62:	623b      	str	r3, [r7, #32]
     d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d66:	697b      	ldr	r3, [r7, #20]
     d68:	4313      	orrs	r3, r2
     d6a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d6e:	3b01      	subs	r3, #1
     d70:	62fb      	str	r3, [r7, #44]	; 0x2c
     d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d74:	2b00      	cmp	r3, #0
     d76:	daa8      	bge.n	cca <long_division+0x24>
		}
	}

	return q;
     d78:	6a3b      	ldr	r3, [r7, #32]
     d7a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     d7c:	0018      	movs	r0, r3
     d7e:	0021      	movs	r1, r4
     d80:	46bd      	mov	sp, r7
     d82:	b00d      	add	sp, #52	; 0x34
     d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d86 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     d86:	b580      	push	{r7, lr}
     d88:	b086      	sub	sp, #24
     d8a:	af00      	add	r7, sp, #0
     d8c:	60f8      	str	r0, [r7, #12]
     d8e:	60b9      	str	r1, [r7, #8]
     d90:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     d92:	2316      	movs	r3, #22
     d94:	18fb      	adds	r3, r7, r3
     d96:	2200      	movs	r2, #0
     d98:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     d9a:	68bb      	ldr	r3, [r7, #8]
     d9c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d9e:	68bb      	ldr	r3, [r7, #8]
     da0:	085a      	lsrs	r2, r3, #1
     da2:	68fb      	ldr	r3, [r7, #12]
     da4:	429a      	cmp	r2, r3
     da6:	d201      	bcs.n	dac <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     da8:	2340      	movs	r3, #64	; 0x40
     daa:	e026      	b.n	dfa <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     dac:	68bb      	ldr	r3, [r7, #8]
     dae:	085b      	lsrs	r3, r3, #1
     db0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     db2:	e00a      	b.n	dca <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     db4:	693a      	ldr	r2, [r7, #16]
     db6:	68fb      	ldr	r3, [r7, #12]
     db8:	1ad3      	subs	r3, r2, r3
     dba:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     dbc:	2316      	movs	r3, #22
     dbe:	18fb      	adds	r3, r7, r3
     dc0:	881a      	ldrh	r2, [r3, #0]
     dc2:	2316      	movs	r3, #22
     dc4:	18fb      	adds	r3, r7, r3
     dc6:	3201      	adds	r2, #1
     dc8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     dca:	693a      	ldr	r2, [r7, #16]
     dcc:	68fb      	ldr	r3, [r7, #12]
     dce:	429a      	cmp	r2, r3
     dd0:	d2f0      	bcs.n	db4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     dd2:	2316      	movs	r3, #22
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	2216      	movs	r2, #22
     dd8:	18ba      	adds	r2, r7, r2
     dda:	8812      	ldrh	r2, [r2, #0]
     ddc:	3a01      	subs	r2, #1
     dde:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     de0:	2316      	movs	r3, #22
     de2:	18fb      	adds	r3, r7, r3
     de4:	881b      	ldrh	r3, [r3, #0]
     de6:	2bff      	cmp	r3, #255	; 0xff
     de8:	d901      	bls.n	dee <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     dea:	2340      	movs	r3, #64	; 0x40
     dec:	e005      	b.n	dfa <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	2216      	movs	r2, #22
     df2:	18ba      	adds	r2, r7, r2
     df4:	8812      	ldrh	r2, [r2, #0]
     df6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     df8:	2300      	movs	r3, #0
	}
}
     dfa:	0018      	movs	r0, r3
     dfc:	46bd      	mov	sp, r7
     dfe:	b006      	add	sp, #24
     e00:	bd80      	pop	{r7, pc}
	...

00000e04 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     e04:	b5f0      	push	{r4, r5, r6, r7, lr}
     e06:	b0a1      	sub	sp, #132	; 0x84
     e08:	af00      	add	r7, sp, #0
     e0a:	64f8      	str	r0, [r7, #76]	; 0x4c
     e0c:	64b9      	str	r1, [r7, #72]	; 0x48
     e0e:	647a      	str	r2, [r7, #68]	; 0x44
     e10:	2243      	movs	r2, #67	; 0x43
     e12:	18ba      	adds	r2, r7, r2
     e14:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     e16:	2300      	movs	r3, #0
     e18:	2400      	movs	r4, #0
     e1a:	673b      	str	r3, [r7, #112]	; 0x70
     e1c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     e1e:	2300      	movs	r3, #0
     e20:	2400      	movs	r4, #0
     e22:	66bb      	str	r3, [r7, #104]	; 0x68
     e24:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     e26:	2300      	movs	r3, #0
     e28:	2400      	movs	r4, #0
     e2a:	67bb      	str	r3, [r7, #120]	; 0x78
     e2c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     e2e:	2300      	movs	r3, #0
     e30:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     e32:	2358      	movs	r3, #88	; 0x58
     e34:	2240      	movs	r2, #64	; 0x40
     e36:	4694      	mov	ip, r2
     e38:	44bc      	add	ip, r7
     e3a:	4463      	add	r3, ip
     e3c:	781a      	ldrb	r2, [r3, #0]
     e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e40:	435a      	muls	r2, r3
     e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     e44:	429a      	cmp	r2, r3
     e46:	d901      	bls.n	e4c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e48:	2340      	movs	r3, #64	; 0x40
     e4a:	e0b3      	b.n	fb4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     e4c:	2343      	movs	r3, #67	; 0x43
     e4e:	18fb      	adds	r3, r7, r3
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	2b00      	cmp	r3, #0
     e54:	d13d      	bne.n	ed2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     e56:	2358      	movs	r3, #88	; 0x58
     e58:	2240      	movs	r2, #64	; 0x40
     e5a:	4694      	mov	ip, r2
     e5c:	44bc      	add	ip, r7
     e5e:	4463      	add	r3, ip
     e60:	781b      	ldrb	r3, [r3, #0]
     e62:	b2db      	uxtb	r3, r3
     e64:	613b      	str	r3, [r7, #16]
     e66:	2300      	movs	r3, #0
     e68:	617b      	str	r3, [r7, #20]
     e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e6c:	60bb      	str	r3, [r7, #8]
     e6e:	2300      	movs	r3, #0
     e70:	60fb      	str	r3, [r7, #12]
     e72:	4c52      	ldr	r4, [pc, #328]	; (fbc <_sercom_get_async_baud_val+0x1b8>)
     e74:	68ba      	ldr	r2, [r7, #8]
     e76:	68fb      	ldr	r3, [r7, #12]
     e78:	6938      	ldr	r0, [r7, #16]
     e7a:	6979      	ldr	r1, [r7, #20]
     e7c:	47a0      	blx	r4
     e7e:	0003      	movs	r3, r0
     e80:	000c      	movs	r4, r1
     e82:	001b      	movs	r3, r3
     e84:	65fb      	str	r3, [r7, #92]	; 0x5c
     e86:	2300      	movs	r3, #0
     e88:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     e8c:	603b      	str	r3, [r7, #0]
     e8e:	2300      	movs	r3, #0
     e90:	607b      	str	r3, [r7, #4]
     e92:	6db8      	ldr	r0, [r7, #88]	; 0x58
     e94:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     e96:	683a      	ldr	r2, [r7, #0]
     e98:	687b      	ldr	r3, [r7, #4]
     e9a:	4c49      	ldr	r4, [pc, #292]	; (fc0 <_sercom_get_async_baud_val+0x1bc>)
     e9c:	47a0      	blx	r4
     e9e:	0003      	movs	r3, r0
     ea0:	000c      	movs	r4, r1
     ea2:	673b      	str	r3, [r7, #112]	; 0x70
     ea4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ea6:	2100      	movs	r1, #0
     ea8:	2201      	movs	r2, #1
     eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     eac:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     eae:	1ac9      	subs	r1, r1, r3
     eb0:	41a2      	sbcs	r2, r4
     eb2:	000b      	movs	r3, r1
     eb4:	0014      	movs	r4, r2
     eb6:	66bb      	str	r3, [r7, #104]	; 0x68
     eb8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     ebc:	0c1b      	lsrs	r3, r3, #16
     ebe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     ec0:	0416      	lsls	r6, r2, #16
     ec2:	431e      	orrs	r6, r3
     ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     ec6:	041d      	lsls	r5, r3, #16
     ec8:	0033      	movs	r3, r6
     eca:	67bb      	str	r3, [r7, #120]	; 0x78
     ecc:	2300      	movs	r3, #0
     ece:	67fb      	str	r3, [r7, #124]	; 0x7c
     ed0:	e06a      	b.n	fa8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ed2:	2343      	movs	r3, #67	; 0x43
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	781b      	ldrb	r3, [r3, #0]
     ed8:	2b01      	cmp	r3, #1
     eda:	d165      	bne.n	fa8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ede:	633b      	str	r3, [r7, #48]	; 0x30
     ee0:	2300      	movs	r3, #0
     ee2:	637b      	str	r3, [r7, #52]	; 0x34
     ee4:	2358      	movs	r3, #88	; 0x58
     ee6:	2240      	movs	r2, #64	; 0x40
     ee8:	4694      	mov	ip, r2
     eea:	44bc      	add	ip, r7
     eec:	4463      	add	r3, ip
     eee:	781b      	ldrb	r3, [r3, #0]
     ef0:	b2db      	uxtb	r3, r3
     ef2:	62bb      	str	r3, [r7, #40]	; 0x28
     ef4:	2300      	movs	r3, #0
     ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
     ef8:	4c30      	ldr	r4, [pc, #192]	; (fbc <_sercom_get_async_baud_val+0x1b8>)
     efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
     efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
     f00:	6b79      	ldr	r1, [r7, #52]	; 0x34
     f02:	47a0      	blx	r4
     f04:	0003      	movs	r3, r0
     f06:	000c      	movs	r4, r1
     f08:	65bb      	str	r3, [r7, #88]	; 0x58
     f0a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     f0e:	623b      	str	r3, [r7, #32]
     f10:	2300      	movs	r3, #0
     f12:	627b      	str	r3, [r7, #36]	; 0x24
     f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     f16:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     f18:	001a      	movs	r2, r3
     f1a:	0023      	movs	r3, r4
     f1c:	6a38      	ldr	r0, [r7, #32]
     f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
     f20:	4c27      	ldr	r4, [pc, #156]	; (fc0 <_sercom_get_async_baud_val+0x1bc>)
     f22:	47a0      	blx	r4
     f24:	0003      	movs	r3, r0
     f26:	000c      	movs	r4, r1
     f28:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     f2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     f2c:	2380      	movs	r3, #128	; 0x80
     f2e:	019b      	lsls	r3, r3, #6
     f30:	429a      	cmp	r2, r3
     f32:	d901      	bls.n	f38 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f34:	2340      	movs	r3, #64	; 0x40
     f36:	e03d      	b.n	fb4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     f3a:	61bb      	str	r3, [r7, #24]
     f3c:	2300      	movs	r3, #0
     f3e:	61fb      	str	r3, [r7, #28]
     f40:	69b9      	ldr	r1, [r7, #24]
     f42:	69fa      	ldr	r2, [r7, #28]
     f44:	000b      	movs	r3, r1
     f46:	0f5b      	lsrs	r3, r3, #29
     f48:	0010      	movs	r0, r2
     f4a:	00c0      	lsls	r0, r0, #3
     f4c:	63f8      	str	r0, [r7, #60]	; 0x3c
     f4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     f50:	4318      	orrs	r0, r3
     f52:	63f8      	str	r0, [r7, #60]	; 0x3c
     f54:	000b      	movs	r3, r1
     f56:	00db      	lsls	r3, r3, #3
     f58:	63bb      	str	r3, [r7, #56]	; 0x38
     f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     f5c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     f5e:	001a      	movs	r2, r3
     f60:	0023      	movs	r3, r4
     f62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     f66:	4c16      	ldr	r4, [pc, #88]	; (fc0 <_sercom_get_async_baud_val+0x1bc>)
     f68:	47a0      	blx	r4
     f6a:	0003      	movs	r3, r0
     f6c:	000c      	movs	r4, r1
     f6e:	65bb      	str	r3, [r7, #88]	; 0x58
     f70:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     f74:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     f76:	b2d9      	uxtb	r1, r3
     f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     f7a:	b2db      	uxtb	r3, r3
     f7c:	00db      	lsls	r3, r3, #3
     f7e:	b2da      	uxtb	r2, r3
     f80:	2317      	movs	r3, #23
     f82:	2040      	movs	r0, #64	; 0x40
     f84:	4684      	mov	ip, r0
     f86:	44bc      	add	ip, r7
     f88:	4463      	add	r3, ip
     f8a:	1a8a      	subs	r2, r1, r2
     f8c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     f8e:	2317      	movs	r3, #23
     f90:	2240      	movs	r2, #64	; 0x40
     f92:	4694      	mov	ip, r2
     f94:	44bc      	add	ip, r7
     f96:	4463      	add	r3, ip
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	035b      	lsls	r3, r3, #13
     f9c:	001a      	movs	r2, r3
     f9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     fa0:	4313      	orrs	r3, r2
     fa2:	67bb      	str	r3, [r7, #120]	; 0x78
     fa4:	2300      	movs	r3, #0
     fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     faa:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     fac:	b29a      	uxth	r2, r3
     fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     fb0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     fb2:	2300      	movs	r3, #0
}
     fb4:	0018      	movs	r0, r3
     fb6:	46bd      	mov	sp, r7
     fb8:	b021      	add	sp, #132	; 0x84
     fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fbc:	00004471 	.word	0x00004471
     fc0:	00000ca7 	.word	0x00000ca7

00000fc4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     fc4:	b580      	push	{r7, lr}
     fc6:	b084      	sub	sp, #16
     fc8:	af00      	add	r7, sp, #0
     fca:	0002      	movs	r2, r0
     fcc:	1dfb      	adds	r3, r7, #7
     fce:	701a      	strb	r2, [r3, #0]
     fd0:	1dbb      	adds	r3, r7, #6
     fd2:	1c0a      	adds	r2, r1, #0
     fd4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     fd6:	4b1a      	ldr	r3, [pc, #104]	; (1040 <sercom_set_gclk_generator+0x7c>)
     fd8:	781b      	ldrb	r3, [r3, #0]
     fda:	2201      	movs	r2, #1
     fdc:	4053      	eors	r3, r2
     fde:	b2db      	uxtb	r3, r3
     fe0:	2b00      	cmp	r3, #0
     fe2:	d103      	bne.n	fec <sercom_set_gclk_generator+0x28>
     fe4:	1dbb      	adds	r3, r7, #6
     fe6:	781b      	ldrb	r3, [r3, #0]
     fe8:	2b00      	cmp	r3, #0
     fea:	d01b      	beq.n	1024 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     fec:	230c      	movs	r3, #12
     fee:	18fb      	adds	r3, r7, r3
     ff0:	0018      	movs	r0, r3
     ff2:	4b14      	ldr	r3, [pc, #80]	; (1044 <sercom_set_gclk_generator+0x80>)
     ff4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     ff6:	230c      	movs	r3, #12
     ff8:	18fb      	adds	r3, r7, r3
     ffa:	1dfa      	adds	r2, r7, #7
     ffc:	7812      	ldrb	r2, [r2, #0]
     ffe:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1000:	230c      	movs	r3, #12
    1002:	18fb      	adds	r3, r7, r3
    1004:	0019      	movs	r1, r3
    1006:	2013      	movs	r0, #19
    1008:	4b0f      	ldr	r3, [pc, #60]	; (1048 <sercom_set_gclk_generator+0x84>)
    100a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    100c:	2013      	movs	r0, #19
    100e:	4b0f      	ldr	r3, [pc, #60]	; (104c <sercom_set_gclk_generator+0x88>)
    1010:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1012:	4b0b      	ldr	r3, [pc, #44]	; (1040 <sercom_set_gclk_generator+0x7c>)
    1014:	1dfa      	adds	r2, r7, #7
    1016:	7812      	ldrb	r2, [r2, #0]
    1018:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    101a:	4b09      	ldr	r3, [pc, #36]	; (1040 <sercom_set_gclk_generator+0x7c>)
    101c:	2201      	movs	r2, #1
    101e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1020:	2300      	movs	r3, #0
    1022:	e008      	b.n	1036 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    1024:	4b06      	ldr	r3, [pc, #24]	; (1040 <sercom_set_gclk_generator+0x7c>)
    1026:	785b      	ldrb	r3, [r3, #1]
    1028:	1dfa      	adds	r2, r7, #7
    102a:	7812      	ldrb	r2, [r2, #0]
    102c:	429a      	cmp	r2, r3
    102e:	d101      	bne.n	1034 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    1030:	2300      	movs	r3, #0
    1032:	e000      	b.n	1036 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1034:	231d      	movs	r3, #29
}
    1036:	0018      	movs	r0, r3
    1038:	46bd      	mov	sp, r7
    103a:	b004      	add	sp, #16
    103c:	bd80      	pop	{r7, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	200000f8 	.word	0x200000f8
    1044:	00000c91 	.word	0x00000c91
    1048:	00003bad 	.word	0x00003bad
    104c:	00003bf1 	.word	0x00003bf1

00001050 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1050:	b580      	push	{r7, lr}
    1052:	b082      	sub	sp, #8
    1054:	af00      	add	r7, sp, #0
    1056:	6078      	str	r0, [r7, #4]
    1058:	000a      	movs	r2, r1
    105a:	1cfb      	adds	r3, r7, #3
    105c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	4a4d      	ldr	r2, [pc, #308]	; (1198 <_sercom_get_default_pad+0x148>)
    1062:	4293      	cmp	r3, r2
    1064:	d03f      	beq.n	10e6 <_sercom_get_default_pad+0x96>
    1066:	4a4c      	ldr	r2, [pc, #304]	; (1198 <_sercom_get_default_pad+0x148>)
    1068:	4293      	cmp	r3, r2
    106a:	d806      	bhi.n	107a <_sercom_get_default_pad+0x2a>
    106c:	4a4b      	ldr	r2, [pc, #300]	; (119c <_sercom_get_default_pad+0x14c>)
    106e:	4293      	cmp	r3, r2
    1070:	d00f      	beq.n	1092 <_sercom_get_default_pad+0x42>
    1072:	4a4b      	ldr	r2, [pc, #300]	; (11a0 <_sercom_get_default_pad+0x150>)
    1074:	4293      	cmp	r3, r2
    1076:	d021      	beq.n	10bc <_sercom_get_default_pad+0x6c>
    1078:	e089      	b.n	118e <_sercom_get_default_pad+0x13e>
    107a:	4a4a      	ldr	r2, [pc, #296]	; (11a4 <_sercom_get_default_pad+0x154>)
    107c:	4293      	cmp	r3, r2
    107e:	d100      	bne.n	1082 <_sercom_get_default_pad+0x32>
    1080:	e05b      	b.n	113a <_sercom_get_default_pad+0xea>
    1082:	4a49      	ldr	r2, [pc, #292]	; (11a8 <_sercom_get_default_pad+0x158>)
    1084:	4293      	cmp	r3, r2
    1086:	d100      	bne.n	108a <_sercom_get_default_pad+0x3a>
    1088:	e06c      	b.n	1164 <_sercom_get_default_pad+0x114>
    108a:	4a48      	ldr	r2, [pc, #288]	; (11ac <_sercom_get_default_pad+0x15c>)
    108c:	4293      	cmp	r3, r2
    108e:	d03f      	beq.n	1110 <_sercom_get_default_pad+0xc0>
    1090:	e07d      	b.n	118e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1092:	1cfb      	adds	r3, r7, #3
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	2b01      	cmp	r3, #1
    1098:	d00a      	beq.n	10b0 <_sercom_get_default_pad+0x60>
    109a:	dc02      	bgt.n	10a2 <_sercom_get_default_pad+0x52>
    109c:	2b00      	cmp	r3, #0
    109e:	d005      	beq.n	10ac <_sercom_get_default_pad+0x5c>
    10a0:	e075      	b.n	118e <_sercom_get_default_pad+0x13e>
    10a2:	2b02      	cmp	r3, #2
    10a4:	d006      	beq.n	10b4 <_sercom_get_default_pad+0x64>
    10a6:	2b03      	cmp	r3, #3
    10a8:	d006      	beq.n	10b8 <_sercom_get_default_pad+0x68>
    10aa:	e070      	b.n	118e <_sercom_get_default_pad+0x13e>
    10ac:	4b40      	ldr	r3, [pc, #256]	; (11b0 <_sercom_get_default_pad+0x160>)
    10ae:	e06f      	b.n	1190 <_sercom_get_default_pad+0x140>
    10b0:	4b40      	ldr	r3, [pc, #256]	; (11b4 <_sercom_get_default_pad+0x164>)
    10b2:	e06d      	b.n	1190 <_sercom_get_default_pad+0x140>
    10b4:	4b40      	ldr	r3, [pc, #256]	; (11b8 <_sercom_get_default_pad+0x168>)
    10b6:	e06b      	b.n	1190 <_sercom_get_default_pad+0x140>
    10b8:	4b40      	ldr	r3, [pc, #256]	; (11bc <_sercom_get_default_pad+0x16c>)
    10ba:	e069      	b.n	1190 <_sercom_get_default_pad+0x140>
    10bc:	1cfb      	adds	r3, r7, #3
    10be:	781b      	ldrb	r3, [r3, #0]
    10c0:	2b01      	cmp	r3, #1
    10c2:	d00a      	beq.n	10da <_sercom_get_default_pad+0x8a>
    10c4:	dc02      	bgt.n	10cc <_sercom_get_default_pad+0x7c>
    10c6:	2b00      	cmp	r3, #0
    10c8:	d005      	beq.n	10d6 <_sercom_get_default_pad+0x86>
    10ca:	e060      	b.n	118e <_sercom_get_default_pad+0x13e>
    10cc:	2b02      	cmp	r3, #2
    10ce:	d006      	beq.n	10de <_sercom_get_default_pad+0x8e>
    10d0:	2b03      	cmp	r3, #3
    10d2:	d006      	beq.n	10e2 <_sercom_get_default_pad+0x92>
    10d4:	e05b      	b.n	118e <_sercom_get_default_pad+0x13e>
    10d6:	2303      	movs	r3, #3
    10d8:	e05a      	b.n	1190 <_sercom_get_default_pad+0x140>
    10da:	4b39      	ldr	r3, [pc, #228]	; (11c0 <_sercom_get_default_pad+0x170>)
    10dc:	e058      	b.n	1190 <_sercom_get_default_pad+0x140>
    10de:	4b39      	ldr	r3, [pc, #228]	; (11c4 <_sercom_get_default_pad+0x174>)
    10e0:	e056      	b.n	1190 <_sercom_get_default_pad+0x140>
    10e2:	4b39      	ldr	r3, [pc, #228]	; (11c8 <_sercom_get_default_pad+0x178>)
    10e4:	e054      	b.n	1190 <_sercom_get_default_pad+0x140>
    10e6:	1cfb      	adds	r3, r7, #3
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	2b01      	cmp	r3, #1
    10ec:	d00a      	beq.n	1104 <_sercom_get_default_pad+0xb4>
    10ee:	dc02      	bgt.n	10f6 <_sercom_get_default_pad+0xa6>
    10f0:	2b00      	cmp	r3, #0
    10f2:	d005      	beq.n	1100 <_sercom_get_default_pad+0xb0>
    10f4:	e04b      	b.n	118e <_sercom_get_default_pad+0x13e>
    10f6:	2b02      	cmp	r3, #2
    10f8:	d006      	beq.n	1108 <_sercom_get_default_pad+0xb8>
    10fa:	2b03      	cmp	r3, #3
    10fc:	d006      	beq.n	110c <_sercom_get_default_pad+0xbc>
    10fe:	e046      	b.n	118e <_sercom_get_default_pad+0x13e>
    1100:	4b32      	ldr	r3, [pc, #200]	; (11cc <_sercom_get_default_pad+0x17c>)
    1102:	e045      	b.n	1190 <_sercom_get_default_pad+0x140>
    1104:	4b32      	ldr	r3, [pc, #200]	; (11d0 <_sercom_get_default_pad+0x180>)
    1106:	e043      	b.n	1190 <_sercom_get_default_pad+0x140>
    1108:	4b32      	ldr	r3, [pc, #200]	; (11d4 <_sercom_get_default_pad+0x184>)
    110a:	e041      	b.n	1190 <_sercom_get_default_pad+0x140>
    110c:	4b32      	ldr	r3, [pc, #200]	; (11d8 <_sercom_get_default_pad+0x188>)
    110e:	e03f      	b.n	1190 <_sercom_get_default_pad+0x140>
    1110:	1cfb      	adds	r3, r7, #3
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	2b01      	cmp	r3, #1
    1116:	d00a      	beq.n	112e <_sercom_get_default_pad+0xde>
    1118:	dc02      	bgt.n	1120 <_sercom_get_default_pad+0xd0>
    111a:	2b00      	cmp	r3, #0
    111c:	d005      	beq.n	112a <_sercom_get_default_pad+0xda>
    111e:	e036      	b.n	118e <_sercom_get_default_pad+0x13e>
    1120:	2b02      	cmp	r3, #2
    1122:	d006      	beq.n	1132 <_sercom_get_default_pad+0xe2>
    1124:	2b03      	cmp	r3, #3
    1126:	d006      	beq.n	1136 <_sercom_get_default_pad+0xe6>
    1128:	e031      	b.n	118e <_sercom_get_default_pad+0x13e>
    112a:	4b2c      	ldr	r3, [pc, #176]	; (11dc <_sercom_get_default_pad+0x18c>)
    112c:	e030      	b.n	1190 <_sercom_get_default_pad+0x140>
    112e:	4b2c      	ldr	r3, [pc, #176]	; (11e0 <_sercom_get_default_pad+0x190>)
    1130:	e02e      	b.n	1190 <_sercom_get_default_pad+0x140>
    1132:	4b2c      	ldr	r3, [pc, #176]	; (11e4 <_sercom_get_default_pad+0x194>)
    1134:	e02c      	b.n	1190 <_sercom_get_default_pad+0x140>
    1136:	4b2c      	ldr	r3, [pc, #176]	; (11e8 <_sercom_get_default_pad+0x198>)
    1138:	e02a      	b.n	1190 <_sercom_get_default_pad+0x140>
    113a:	1cfb      	adds	r3, r7, #3
    113c:	781b      	ldrb	r3, [r3, #0]
    113e:	2b01      	cmp	r3, #1
    1140:	d00a      	beq.n	1158 <_sercom_get_default_pad+0x108>
    1142:	dc02      	bgt.n	114a <_sercom_get_default_pad+0xfa>
    1144:	2b00      	cmp	r3, #0
    1146:	d005      	beq.n	1154 <_sercom_get_default_pad+0x104>
    1148:	e021      	b.n	118e <_sercom_get_default_pad+0x13e>
    114a:	2b02      	cmp	r3, #2
    114c:	d006      	beq.n	115c <_sercom_get_default_pad+0x10c>
    114e:	2b03      	cmp	r3, #3
    1150:	d006      	beq.n	1160 <_sercom_get_default_pad+0x110>
    1152:	e01c      	b.n	118e <_sercom_get_default_pad+0x13e>
    1154:	4b25      	ldr	r3, [pc, #148]	; (11ec <_sercom_get_default_pad+0x19c>)
    1156:	e01b      	b.n	1190 <_sercom_get_default_pad+0x140>
    1158:	4b25      	ldr	r3, [pc, #148]	; (11f0 <_sercom_get_default_pad+0x1a0>)
    115a:	e019      	b.n	1190 <_sercom_get_default_pad+0x140>
    115c:	4b25      	ldr	r3, [pc, #148]	; (11f4 <_sercom_get_default_pad+0x1a4>)
    115e:	e017      	b.n	1190 <_sercom_get_default_pad+0x140>
    1160:	4b25      	ldr	r3, [pc, #148]	; (11f8 <_sercom_get_default_pad+0x1a8>)
    1162:	e015      	b.n	1190 <_sercom_get_default_pad+0x140>
    1164:	1cfb      	adds	r3, r7, #3
    1166:	781b      	ldrb	r3, [r3, #0]
    1168:	2b01      	cmp	r3, #1
    116a:	d00a      	beq.n	1182 <_sercom_get_default_pad+0x132>
    116c:	dc02      	bgt.n	1174 <_sercom_get_default_pad+0x124>
    116e:	2b00      	cmp	r3, #0
    1170:	d005      	beq.n	117e <_sercom_get_default_pad+0x12e>
    1172:	e00c      	b.n	118e <_sercom_get_default_pad+0x13e>
    1174:	2b02      	cmp	r3, #2
    1176:	d006      	beq.n	1186 <_sercom_get_default_pad+0x136>
    1178:	2b03      	cmp	r3, #3
    117a:	d006      	beq.n	118a <_sercom_get_default_pad+0x13a>
    117c:	e007      	b.n	118e <_sercom_get_default_pad+0x13e>
    117e:	4b1f      	ldr	r3, [pc, #124]	; (11fc <_sercom_get_default_pad+0x1ac>)
    1180:	e006      	b.n	1190 <_sercom_get_default_pad+0x140>
    1182:	4b1f      	ldr	r3, [pc, #124]	; (1200 <_sercom_get_default_pad+0x1b0>)
    1184:	e004      	b.n	1190 <_sercom_get_default_pad+0x140>
    1186:	4b1f      	ldr	r3, [pc, #124]	; (1204 <_sercom_get_default_pad+0x1b4>)
    1188:	e002      	b.n	1190 <_sercom_get_default_pad+0x140>
    118a:	4b1f      	ldr	r3, [pc, #124]	; (1208 <_sercom_get_default_pad+0x1b8>)
    118c:	e000      	b.n	1190 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    118e:	2300      	movs	r3, #0
}
    1190:	0018      	movs	r0, r3
    1192:	46bd      	mov	sp, r7
    1194:	b002      	add	sp, #8
    1196:	bd80      	pop	{r7, pc}
    1198:	42001000 	.word	0x42001000
    119c:	42000800 	.word	0x42000800
    11a0:	42000c00 	.word	0x42000c00
    11a4:	42001800 	.word	0x42001800
    11a8:	42001c00 	.word	0x42001c00
    11ac:	42001400 	.word	0x42001400
    11b0:	00040003 	.word	0x00040003
    11b4:	00050003 	.word	0x00050003
    11b8:	00060003 	.word	0x00060003
    11bc:	00070003 	.word	0x00070003
    11c0:	00010003 	.word	0x00010003
    11c4:	001e0003 	.word	0x001e0003
    11c8:	001f0003 	.word	0x001f0003
    11cc:	00080003 	.word	0x00080003
    11d0:	00090003 	.word	0x00090003
    11d4:	000a0003 	.word	0x000a0003
    11d8:	000b0003 	.word	0x000b0003
    11dc:	00100003 	.word	0x00100003
    11e0:	00110003 	.word	0x00110003
    11e4:	00120003 	.word	0x00120003
    11e8:	00130003 	.word	0x00130003
    11ec:	000c0003 	.word	0x000c0003
    11f0:	000d0003 	.word	0x000d0003
    11f4:	000e0003 	.word	0x000e0003
    11f8:	000f0003 	.word	0x000f0003
    11fc:	00160003 	.word	0x00160003
    1200:	00170003 	.word	0x00170003
    1204:	00180003 	.word	0x00180003
    1208:	00190003 	.word	0x00190003

0000120c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    120c:	b590      	push	{r4, r7, lr}
    120e:	b08b      	sub	sp, #44	; 0x2c
    1210:	af00      	add	r7, sp, #0
    1212:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1214:	230c      	movs	r3, #12
    1216:	18fb      	adds	r3, r7, r3
    1218:	4a0f      	ldr	r2, [pc, #60]	; (1258 <_sercom_get_sercom_inst_index+0x4c>)
    121a:	ca13      	ldmia	r2!, {r0, r1, r4}
    121c:	c313      	stmia	r3!, {r0, r1, r4}
    121e:	ca13      	ldmia	r2!, {r0, r1, r4}
    1220:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1222:	2300      	movs	r3, #0
    1224:	627b      	str	r3, [r7, #36]	; 0x24
    1226:	e00e      	b.n	1246 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1228:	230c      	movs	r3, #12
    122a:	18fb      	adds	r3, r7, r3
    122c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    122e:	0092      	lsls	r2, r2, #2
    1230:	58d3      	ldr	r3, [r2, r3]
    1232:	001a      	movs	r2, r3
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	429a      	cmp	r2, r3
    1238:	d102      	bne.n	1240 <_sercom_get_sercom_inst_index+0x34>
			return i;
    123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    123c:	b2db      	uxtb	r3, r3
    123e:	e006      	b.n	124e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1242:	3301      	adds	r3, #1
    1244:	627b      	str	r3, [r7, #36]	; 0x24
    1246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1248:	2b05      	cmp	r3, #5
    124a:	d9ed      	bls.n	1228 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    124c:	2300      	movs	r3, #0
}
    124e:	0018      	movs	r0, r3
    1250:	46bd      	mov	sp, r7
    1252:	b00b      	add	sp, #44	; 0x2c
    1254:	bd90      	pop	{r4, r7, pc}
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	000045f4 	.word	0x000045f4

0000125c <system_gclk_chan_get_config_defaults>:
{
    125c:	b580      	push	{r7, lr}
    125e:	b082      	sub	sp, #8
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	2200      	movs	r2, #0
    1268:	701a      	strb	r2, [r3, #0]
}
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	46bd      	mov	sp, r7
    126e:	b002      	add	sp, #8
    1270:	bd80      	pop	{r7, pc}
	...

00001274 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1274:	b580      	push	{r7, lr}
    1276:	b082      	sub	sp, #8
    1278:	af00      	add	r7, sp, #0
    127a:	0002      	movs	r2, r0
    127c:	6039      	str	r1, [r7, #0]
    127e:	1dfb      	adds	r3, r7, #7
    1280:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1282:	1dfb      	adds	r3, r7, #7
    1284:	781b      	ldrb	r3, [r3, #0]
    1286:	2b01      	cmp	r3, #1
    1288:	d00a      	beq.n	12a0 <system_apb_clock_set_mask+0x2c>
    128a:	2b02      	cmp	r3, #2
    128c:	d00f      	beq.n	12ae <system_apb_clock_set_mask+0x3a>
    128e:	2b00      	cmp	r3, #0
    1290:	d114      	bne.n	12bc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1292:	4b0e      	ldr	r3, [pc, #56]	; (12cc <system_apb_clock_set_mask+0x58>)
    1294:	4a0d      	ldr	r2, [pc, #52]	; (12cc <system_apb_clock_set_mask+0x58>)
    1296:	6991      	ldr	r1, [r2, #24]
    1298:	683a      	ldr	r2, [r7, #0]
    129a:	430a      	orrs	r2, r1
    129c:	619a      	str	r2, [r3, #24]
			break;
    129e:	e00f      	b.n	12c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    12a0:	4b0a      	ldr	r3, [pc, #40]	; (12cc <system_apb_clock_set_mask+0x58>)
    12a2:	4a0a      	ldr	r2, [pc, #40]	; (12cc <system_apb_clock_set_mask+0x58>)
    12a4:	69d1      	ldr	r1, [r2, #28]
    12a6:	683a      	ldr	r2, [r7, #0]
    12a8:	430a      	orrs	r2, r1
    12aa:	61da      	str	r2, [r3, #28]
			break;
    12ac:	e008      	b.n	12c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    12ae:	4b07      	ldr	r3, [pc, #28]	; (12cc <system_apb_clock_set_mask+0x58>)
    12b0:	4a06      	ldr	r2, [pc, #24]	; (12cc <system_apb_clock_set_mask+0x58>)
    12b2:	6a11      	ldr	r1, [r2, #32]
    12b4:	683a      	ldr	r2, [r7, #0]
    12b6:	430a      	orrs	r2, r1
    12b8:	621a      	str	r2, [r3, #32]
			break;
    12ba:	e001      	b.n	12c0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    12bc:	2317      	movs	r3, #23
    12be:	e000      	b.n	12c2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    12c0:	2300      	movs	r3, #0
}
    12c2:	0018      	movs	r0, r3
    12c4:	46bd      	mov	sp, r7
    12c6:	b002      	add	sp, #8
    12c8:	bd80      	pop	{r7, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	40000400 	.word	0x40000400

000012d0 <system_pinmux_get_config_defaults>:
{
    12d0:	b580      	push	{r7, lr}
    12d2:	b082      	sub	sp, #8
    12d4:	af00      	add	r7, sp, #0
    12d6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	2280      	movs	r2, #128	; 0x80
    12dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	2200      	movs	r2, #0
    12e2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12e4:	687b      	ldr	r3, [r7, #4]
    12e6:	2201      	movs	r2, #1
    12e8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    12ea:	687b      	ldr	r3, [r7, #4]
    12ec:	2200      	movs	r2, #0
    12ee:	70da      	strb	r2, [r3, #3]
}
    12f0:	46c0      	nop			; (mov r8, r8)
    12f2:	46bd      	mov	sp, r7
    12f4:	b002      	add	sp, #8
    12f6:	bd80      	pop	{r7, pc}

000012f8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    12f8:	b580      	push	{r7, lr}
    12fa:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    12fc:	4b05      	ldr	r3, [pc, #20]	; (1314 <system_is_debugger_present+0x1c>)
    12fe:	789b      	ldrb	r3, [r3, #2]
    1300:	b2db      	uxtb	r3, r3
    1302:	001a      	movs	r2, r3
    1304:	2302      	movs	r3, #2
    1306:	4013      	ands	r3, r2
    1308:	1e5a      	subs	r2, r3, #1
    130a:	4193      	sbcs	r3, r2
    130c:	b2db      	uxtb	r3, r3
}
    130e:	0018      	movs	r0, r3
    1310:	46bd      	mov	sp, r7
    1312:	bd80      	pop	{r7, pc}
    1314:	41002000 	.word	0x41002000

00001318 <usart_is_syncing>:
{
    1318:	b580      	push	{r7, lr}
    131a:	b084      	sub	sp, #16
    131c:	af00      	add	r7, sp, #0
    131e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	681b      	ldr	r3, [r3, #0]
    1324:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    1326:	68fb      	ldr	r3, [r7, #12]
    1328:	69db      	ldr	r3, [r3, #28]
    132a:	1e5a      	subs	r2, r3, #1
    132c:	4193      	sbcs	r3, r2
    132e:	b2db      	uxtb	r3, r3
}
    1330:	0018      	movs	r0, r3
    1332:	46bd      	mov	sp, r7
    1334:	b004      	add	sp, #16
    1336:	bd80      	pop	{r7, pc}

00001338 <_usart_wait_for_sync>:
{
    1338:	b580      	push	{r7, lr}
    133a:	b082      	sub	sp, #8
    133c:	af00      	add	r7, sp, #0
    133e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    1340:	46c0      	nop			; (mov r8, r8)
    1342:	687b      	ldr	r3, [r7, #4]
    1344:	0018      	movs	r0, r3
    1346:	4b04      	ldr	r3, [pc, #16]	; (1358 <_usart_wait_for_sync+0x20>)
    1348:	4798      	blx	r3
    134a:	1e03      	subs	r3, r0, #0
    134c:	d1f9      	bne.n	1342 <_usart_wait_for_sync+0xa>
}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	46bd      	mov	sp, r7
    1352:	b002      	add	sp, #8
    1354:	bd80      	pop	{r7, pc}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	00001319 	.word	0x00001319

0000135c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    135c:	b5b0      	push	{r4, r5, r7, lr}
    135e:	b08c      	sub	sp, #48	; 0x30
    1360:	af02      	add	r7, sp, #8
    1362:	6078      	str	r0, [r7, #4]
    1364:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1366:	687b      	ldr	r3, [r7, #4]
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	681b      	ldr	r3, [r3, #0]
    1370:	0018      	movs	r0, r3
    1372:	4bab      	ldr	r3, [pc, #684]	; (1620 <_usart_set_config+0x2c4>)
    1374:	4798      	blx	r3
    1376:	0003      	movs	r3, r0
    1378:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    137a:	697b      	ldr	r3, [r7, #20]
    137c:	3314      	adds	r3, #20
    137e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    1380:	2300      	movs	r3, #0
    1382:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    1384:	2300      	movs	r3, #0
    1386:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1388:	230a      	movs	r3, #10
    138a:	18fb      	adds	r3, r7, r3
    138c:	2200      	movs	r2, #0
    138e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1390:	231f      	movs	r3, #31
    1392:	18fb      	adds	r3, r7, r3
    1394:	2200      	movs	r2, #0
    1396:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1398:	231e      	movs	r3, #30
    139a:	18fb      	adds	r3, r7, r3
    139c:	2210      	movs	r2, #16
    139e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    13a0:	683b      	ldr	r3, [r7, #0]
    13a2:	8a1b      	ldrh	r3, [r3, #16]
    13a4:	2280      	movs	r2, #128	; 0x80
    13a6:	01d2      	lsls	r2, r2, #7
    13a8:	4293      	cmp	r3, r2
    13aa:	d01c      	beq.n	13e6 <_usart_set_config+0x8a>
    13ac:	2280      	movs	r2, #128	; 0x80
    13ae:	01d2      	lsls	r2, r2, #7
    13b0:	4293      	cmp	r3, r2
    13b2:	dc06      	bgt.n	13c2 <_usart_set_config+0x66>
    13b4:	2b00      	cmp	r3, #0
    13b6:	d00d      	beq.n	13d4 <_usart_set_config+0x78>
    13b8:	2280      	movs	r2, #128	; 0x80
    13ba:	0192      	lsls	r2, r2, #6
    13bc:	4293      	cmp	r3, r2
    13be:	d024      	beq.n	140a <_usart_set_config+0xae>
    13c0:	e035      	b.n	142e <_usart_set_config+0xd2>
    13c2:	22c0      	movs	r2, #192	; 0xc0
    13c4:	01d2      	lsls	r2, r2, #7
    13c6:	4293      	cmp	r3, r2
    13c8:	d028      	beq.n	141c <_usart_set_config+0xc0>
    13ca:	2280      	movs	r2, #128	; 0x80
    13cc:	0212      	lsls	r2, r2, #8
    13ce:	4293      	cmp	r3, r2
    13d0:	d012      	beq.n	13f8 <_usart_set_config+0x9c>
    13d2:	e02c      	b.n	142e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13d4:	231f      	movs	r3, #31
    13d6:	18fb      	adds	r3, r7, r3
    13d8:	2200      	movs	r2, #0
    13da:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13dc:	231e      	movs	r3, #30
    13de:	18fb      	adds	r3, r7, r3
    13e0:	2210      	movs	r2, #16
    13e2:	701a      	strb	r2, [r3, #0]
			break;
    13e4:	e023      	b.n	142e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13e6:	231f      	movs	r3, #31
    13e8:	18fb      	adds	r3, r7, r3
    13ea:	2200      	movs	r2, #0
    13ec:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    13ee:	231e      	movs	r3, #30
    13f0:	18fb      	adds	r3, r7, r3
    13f2:	2208      	movs	r2, #8
    13f4:	701a      	strb	r2, [r3, #0]
			break;
    13f6:	e01a      	b.n	142e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13f8:	231f      	movs	r3, #31
    13fa:	18fb      	adds	r3, r7, r3
    13fc:	2200      	movs	r2, #0
    13fe:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1400:	231e      	movs	r3, #30
    1402:	18fb      	adds	r3, r7, r3
    1404:	2203      	movs	r2, #3
    1406:	701a      	strb	r2, [r3, #0]
			break;
    1408:	e011      	b.n	142e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    140a:	231f      	movs	r3, #31
    140c:	18fb      	adds	r3, r7, r3
    140e:	2201      	movs	r2, #1
    1410:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1412:	231e      	movs	r3, #30
    1414:	18fb      	adds	r3, r7, r3
    1416:	2210      	movs	r2, #16
    1418:	701a      	strb	r2, [r3, #0]
			break;
    141a:	e008      	b.n	142e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    141c:	231f      	movs	r3, #31
    141e:	18fb      	adds	r3, r7, r3
    1420:	2201      	movs	r2, #1
    1422:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1424:	231e      	movs	r3, #30
    1426:	18fb      	adds	r3, r7, r3
    1428:	2208      	movs	r2, #8
    142a:	701a      	strb	r2, [r3, #0]
			break;
    142c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    142e:	683b      	ldr	r3, [r7, #0]
    1430:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    1432:	683b      	ldr	r3, [r7, #0]
    1434:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    1436:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1438:	683b      	ldr	r3, [r7, #0]
    143a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    143c:	4313      	orrs	r3, r2
		config->sample_rate |
    143e:	683a      	ldr	r2, [r7, #0]
    1440:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    1442:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1444:	683a      	ldr	r2, [r7, #0]
    1446:	7e12      	ldrb	r2, [r2, #24]
    1448:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    144a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    144c:	683a      	ldr	r2, [r7, #0]
    144e:	2126      	movs	r1, #38	; 0x26
    1450:	5c52      	ldrb	r2, [r2, r1]
    1452:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    1454:	4313      	orrs	r3, r2
    1456:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    1458:	231d      	movs	r3, #29
    145a:	18fb      	adds	r3, r7, r3
    145c:	2200      	movs	r2, #0
    145e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    1460:	683b      	ldr	r3, [r7, #0]
    1462:	685b      	ldr	r3, [r3, #4]
    1464:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1466:	68fb      	ldr	r3, [r7, #12]
    1468:	2b00      	cmp	r3, #0
    146a:	d01e      	beq.n	14aa <_usart_set_config+0x14e>
    146c:	2280      	movs	r2, #128	; 0x80
    146e:	0552      	lsls	r2, r2, #21
    1470:	4293      	cmp	r3, r2
    1472:	d14f      	bne.n	1514 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1474:	683b      	ldr	r3, [r7, #0]
    1476:	2227      	movs	r2, #39	; 0x27
    1478:	5c9b      	ldrb	r3, [r3, r2]
    147a:	2201      	movs	r2, #1
    147c:	4053      	eors	r3, r2
    147e:	b2db      	uxtb	r3, r3
    1480:	2b00      	cmp	r3, #0
    1482:	d046      	beq.n	1512 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1484:	683b      	ldr	r3, [r7, #0]
    1486:	6a1d      	ldr	r5, [r3, #32]
    1488:	693b      	ldr	r3, [r7, #16]
    148a:	b2db      	uxtb	r3, r3
    148c:	0018      	movs	r0, r3
    148e:	4b65      	ldr	r3, [pc, #404]	; (1624 <_usart_set_config+0x2c8>)
    1490:	4798      	blx	r3
    1492:	0001      	movs	r1, r0
    1494:	231d      	movs	r3, #29
    1496:	18fc      	adds	r4, r7, r3
    1498:	230a      	movs	r3, #10
    149a:	18fb      	adds	r3, r7, r3
    149c:	001a      	movs	r2, r3
    149e:	0028      	movs	r0, r5
    14a0:	4b61      	ldr	r3, [pc, #388]	; (1628 <_usart_set_config+0x2cc>)
    14a2:	4798      	blx	r3
    14a4:	0003      	movs	r3, r0
    14a6:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    14a8:	e033      	b.n	1512 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    14aa:	683b      	ldr	r3, [r7, #0]
    14ac:	2227      	movs	r2, #39	; 0x27
    14ae:	5c9b      	ldrb	r3, [r3, r2]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d014      	beq.n	14de <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    14b4:	683b      	ldr	r3, [r7, #0]
    14b6:	6a18      	ldr	r0, [r3, #32]
    14b8:	683b      	ldr	r3, [r7, #0]
    14ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    14bc:	231d      	movs	r3, #29
    14be:	18fc      	adds	r4, r7, r3
    14c0:	231f      	movs	r3, #31
    14c2:	18fb      	adds	r3, r7, r3
    14c4:	781d      	ldrb	r5, [r3, #0]
    14c6:	230a      	movs	r3, #10
    14c8:	18fa      	adds	r2, r7, r3
    14ca:	231e      	movs	r3, #30
    14cc:	18fb      	adds	r3, r7, r3
    14ce:	781b      	ldrb	r3, [r3, #0]
    14d0:	9300      	str	r3, [sp, #0]
    14d2:	002b      	movs	r3, r5
    14d4:	4d55      	ldr	r5, [pc, #340]	; (162c <_usart_set_config+0x2d0>)
    14d6:	47a8      	blx	r5
    14d8:	0003      	movs	r3, r0
    14da:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    14dc:	e01a      	b.n	1514 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    14de:	683b      	ldr	r3, [r7, #0]
    14e0:	6a1d      	ldr	r5, [r3, #32]
    14e2:	693b      	ldr	r3, [r7, #16]
    14e4:	b2db      	uxtb	r3, r3
    14e6:	0018      	movs	r0, r3
    14e8:	4b4e      	ldr	r3, [pc, #312]	; (1624 <_usart_set_config+0x2c8>)
    14ea:	4798      	blx	r3
				status_code =
    14ec:	231d      	movs	r3, #29
    14ee:	18fc      	adds	r4, r7, r3
    14f0:	231f      	movs	r3, #31
    14f2:	18fb      	adds	r3, r7, r3
    14f4:	7819      	ldrb	r1, [r3, #0]
    14f6:	230a      	movs	r3, #10
    14f8:	18fa      	adds	r2, r7, r3
    14fa:	231e      	movs	r3, #30
    14fc:	18fb      	adds	r3, r7, r3
    14fe:	781b      	ldrb	r3, [r3, #0]
    1500:	9300      	str	r3, [sp, #0]
    1502:	000b      	movs	r3, r1
    1504:	0001      	movs	r1, r0
    1506:	0028      	movs	r0, r5
    1508:	4d48      	ldr	r5, [pc, #288]	; (162c <_usart_set_config+0x2d0>)
    150a:	47a8      	blx	r5
    150c:	0003      	movs	r3, r0
    150e:	7023      	strb	r3, [r4, #0]
			break;
    1510:	e000      	b.n	1514 <_usart_set_config+0x1b8>
			break;
    1512:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1514:	231d      	movs	r3, #29
    1516:	18fb      	adds	r3, r7, r3
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	2b00      	cmp	r3, #0
    151c:	d003      	beq.n	1526 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    151e:	231d      	movs	r3, #29
    1520:	18fb      	adds	r3, r7, r3
    1522:	781b      	ldrb	r3, [r3, #0]
    1524:	e077      	b.n	1616 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1526:	683b      	ldr	r3, [r7, #0]
    1528:	7e5b      	ldrb	r3, [r3, #25]
    152a:	2b00      	cmp	r3, #0
    152c:	d003      	beq.n	1536 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    152e:	683b      	ldr	r3, [r7, #0]
    1530:	7e9a      	ldrb	r2, [r3, #26]
    1532:	69bb      	ldr	r3, [r7, #24]
    1534:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1536:	687b      	ldr	r3, [r7, #4]
    1538:	0018      	movs	r0, r3
    153a:	4b3d      	ldr	r3, [pc, #244]	; (1630 <_usart_set_config+0x2d4>)
    153c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    153e:	230a      	movs	r3, #10
    1540:	18fb      	adds	r3, r7, r3
    1542:	881a      	ldrh	r2, [r3, #0]
    1544:	69bb      	ldr	r3, [r7, #24]
    1546:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    154a:	68fb      	ldr	r3, [r7, #12]
    154c:	4313      	orrs	r3, r2
    154e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    1550:	683b      	ldr	r3, [r7, #0]
    1552:	2227      	movs	r2, #39	; 0x27
    1554:	5c9b      	ldrb	r3, [r3, r2]
    1556:	2201      	movs	r2, #1
    1558:	4053      	eors	r3, r2
    155a:	b2db      	uxtb	r3, r3
    155c:	2b00      	cmp	r3, #0
    155e:	d003      	beq.n	1568 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1562:	2204      	movs	r2, #4
    1564:	4313      	orrs	r3, r2
    1566:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1568:	683b      	ldr	r3, [r7, #0]
    156a:	7e5b      	ldrb	r3, [r3, #25]
    156c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    156e:	683b      	ldr	r3, [r7, #0]
    1570:	7f1b      	ldrb	r3, [r3, #28]
    1572:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1574:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1576:	683b      	ldr	r3, [r7, #0]
    1578:	7f5b      	ldrb	r3, [r3, #29]
    157a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    157c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    157e:	683b      	ldr	r3, [r7, #0]
    1580:	2124      	movs	r1, #36	; 0x24
    1582:	5c5b      	ldrb	r3, [r3, r1]
    1584:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1586:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1588:	683b      	ldr	r3, [r7, #0]
    158a:	2125      	movs	r1, #37	; 0x25
    158c:	5c5b      	ldrb	r3, [r3, r1]
    158e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1590:	4313      	orrs	r3, r2
	ctrlb =  
    1592:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1594:	683b      	ldr	r3, [r7, #0]
    1596:	7a9b      	ldrb	r3, [r3, #10]
    1598:	001a      	movs	r2, r3
    159a:	6a3b      	ldr	r3, [r7, #32]
    159c:	4313      	orrs	r3, r2
    159e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    15a0:	683b      	ldr	r3, [r7, #0]
    15a2:	7adb      	ldrb	r3, [r3, #11]
    15a4:	001a      	movs	r2, r3
    15a6:	6a3b      	ldr	r3, [r7, #32]
    15a8:	4313      	orrs	r3, r2
    15aa:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    15ac:	683b      	ldr	r3, [r7, #0]
    15ae:	891b      	ldrh	r3, [r3, #8]
    15b0:	2bff      	cmp	r3, #255	; 0xff
    15b2:	d00b      	beq.n	15cc <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    15b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15b6:	2280      	movs	r2, #128	; 0x80
    15b8:	0452      	lsls	r2, r2, #17
    15ba:	4313      	orrs	r3, r2
    15bc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    15be:	683b      	ldr	r3, [r7, #0]
    15c0:	891b      	ldrh	r3, [r3, #8]
    15c2:	001a      	movs	r2, r3
    15c4:	6a3b      	ldr	r3, [r7, #32]
    15c6:	4313      	orrs	r3, r2
    15c8:	623b      	str	r3, [r7, #32]
    15ca:	e008      	b.n	15de <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    15cc:	683b      	ldr	r3, [r7, #0]
    15ce:	7edb      	ldrb	r3, [r3, #27]
    15d0:	2b00      	cmp	r3, #0
    15d2:	d004      	beq.n	15de <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    15d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15d6:	2280      	movs	r2, #128	; 0x80
    15d8:	04d2      	lsls	r2, r2, #19
    15da:	4313      	orrs	r3, r2
    15dc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    15de:	683b      	ldr	r3, [r7, #0]
    15e0:	222c      	movs	r2, #44	; 0x2c
    15e2:	5c9b      	ldrb	r3, [r3, r2]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d103      	bne.n	15f0 <_usart_set_config+0x294>
    15e8:	4b12      	ldr	r3, [pc, #72]	; (1634 <_usart_set_config+0x2d8>)
    15ea:	4798      	blx	r3
    15ec:	1e03      	subs	r3, r0, #0
    15ee:	d003      	beq.n	15f8 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    15f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15f2:	2280      	movs	r2, #128	; 0x80
    15f4:	4313      	orrs	r3, r2
    15f6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	0018      	movs	r0, r3
    15fc:	4b0c      	ldr	r3, [pc, #48]	; (1630 <_usart_set_config+0x2d4>)
    15fe:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1600:	69bb      	ldr	r3, [r7, #24]
    1602:	6a3a      	ldr	r2, [r7, #32]
    1604:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1606:	687b      	ldr	r3, [r7, #4]
    1608:	0018      	movs	r0, r3
    160a:	4b09      	ldr	r3, [pc, #36]	; (1630 <_usart_set_config+0x2d4>)
    160c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    160e:	69bb      	ldr	r3, [r7, #24]
    1610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1612:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    1614:	2300      	movs	r3, #0
}
    1616:	0018      	movs	r0, r3
    1618:	46bd      	mov	sp, r7
    161a:	b00a      	add	sp, #40	; 0x28
    161c:	bdb0      	pop	{r4, r5, r7, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	0000120d 	.word	0x0000120d
    1624:	00003cd1 	.word	0x00003cd1
    1628:	00000d87 	.word	0x00000d87
    162c:	00000e05 	.word	0x00000e05
    1630:	00001339 	.word	0x00001339
    1634:	000012f9 	.word	0x000012f9

00001638 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1638:	b590      	push	{r4, r7, lr}
    163a:	b093      	sub	sp, #76	; 0x4c
    163c:	af00      	add	r7, sp, #0
    163e:	60f8      	str	r0, [r7, #12]
    1640:	60b9      	str	r1, [r7, #8]
    1642:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1644:	233b      	movs	r3, #59	; 0x3b
    1646:	18fb      	adds	r3, r7, r3
    1648:	2200      	movs	r2, #0
    164a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    164c:	68fb      	ldr	r3, [r7, #12]
    164e:	68ba      	ldr	r2, [r7, #8]
    1650:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1652:	68fb      	ldr	r3, [r7, #12]
    1654:	681b      	ldr	r3, [r3, #0]
    1656:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1658:	68fb      	ldr	r3, [r7, #12]
    165a:	681b      	ldr	r3, [r3, #0]
    165c:	0018      	movs	r0, r3
    165e:	4b86      	ldr	r3, [pc, #536]	; (1878 <usart_init+0x240>)
    1660:	4798      	blx	r3
    1662:	0003      	movs	r3, r0
    1664:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1668:	3302      	adds	r3, #2
    166a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    166e:	3314      	adds	r3, #20
    1670:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1674:	681b      	ldr	r3, [r3, #0]
    1676:	2201      	movs	r2, #1
    1678:	4013      	ands	r3, r2
    167a:	d001      	beq.n	1680 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    167c:	2305      	movs	r3, #5
    167e:	e0f6      	b.n	186e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1682:	681b      	ldr	r3, [r3, #0]
    1684:	2202      	movs	r2, #2
    1686:	4013      	ands	r3, r2
    1688:	d001      	beq.n	168e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    168a:	231c      	movs	r3, #28
    168c:	e0ef      	b.n	186e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    168e:	2201      	movs	r2, #1
    1690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1692:	409a      	lsls	r2, r3
    1694:	0013      	movs	r3, r2
    1696:	0019      	movs	r1, r3
    1698:	2002      	movs	r0, #2
    169a:	4b78      	ldr	r3, [pc, #480]	; (187c <usart_init+0x244>)
    169c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    169e:	2324      	movs	r3, #36	; 0x24
    16a0:	18fb      	adds	r3, r7, r3
    16a2:	0018      	movs	r0, r3
    16a4:	4b76      	ldr	r3, [pc, #472]	; (1880 <usart_init+0x248>)
    16a6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	222d      	movs	r2, #45	; 0x2d
    16ac:	5c9a      	ldrb	r2, [r3, r2]
    16ae:	2324      	movs	r3, #36	; 0x24
    16b0:	18fb      	adds	r3, r7, r3
    16b2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    16b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16b6:	b2db      	uxtb	r3, r3
    16b8:	2224      	movs	r2, #36	; 0x24
    16ba:	18ba      	adds	r2, r7, r2
    16bc:	0011      	movs	r1, r2
    16be:	0018      	movs	r0, r3
    16c0:	4b70      	ldr	r3, [pc, #448]	; (1884 <usart_init+0x24c>)
    16c2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    16c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16c6:	b2db      	uxtb	r3, r3
    16c8:	0018      	movs	r0, r3
    16ca:	4b6f      	ldr	r3, [pc, #444]	; (1888 <usart_init+0x250>)
    16cc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	222d      	movs	r2, #45	; 0x2d
    16d2:	5c9b      	ldrb	r3, [r3, r2]
    16d4:	2100      	movs	r1, #0
    16d6:	0018      	movs	r0, r3
    16d8:	4b6c      	ldr	r3, [pc, #432]	; (188c <usart_init+0x254>)
    16da:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	7ada      	ldrb	r2, [r3, #11]
    16e0:	68fb      	ldr	r3, [r7, #12]
    16e2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	2224      	movs	r2, #36	; 0x24
    16e8:	5c9a      	ldrb	r2, [r3, r2]
    16ea:	68fb      	ldr	r3, [r7, #12]
    16ec:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    16ee:	687b      	ldr	r3, [r7, #4]
    16f0:	2225      	movs	r2, #37	; 0x25
    16f2:	5c9a      	ldrb	r2, [r3, r2]
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	7eda      	ldrb	r2, [r3, #27]
    16fc:	68fb      	ldr	r3, [r7, #12]
    16fe:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1700:	687b      	ldr	r3, [r7, #4]
    1702:	7f1a      	ldrb	r2, [r3, #28]
    1704:	68fb      	ldr	r3, [r7, #12]
    1706:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1708:	233b      	movs	r3, #59	; 0x3b
    170a:	18fc      	adds	r4, r7, r3
    170c:	687a      	ldr	r2, [r7, #4]
    170e:	68fb      	ldr	r3, [r7, #12]
    1710:	0011      	movs	r1, r2
    1712:	0018      	movs	r0, r3
    1714:	4b5e      	ldr	r3, [pc, #376]	; (1890 <usart_init+0x258>)
    1716:	4798      	blx	r3
    1718:	0003      	movs	r3, r0
    171a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    171c:	233b      	movs	r3, #59	; 0x3b
    171e:	18fb      	adds	r3, r7, r3
    1720:	781b      	ldrb	r3, [r3, #0]
    1722:	2b00      	cmp	r3, #0
    1724:	d003      	beq.n	172e <usart_init+0xf6>
		return status_code;
    1726:	233b      	movs	r3, #59	; 0x3b
    1728:	18fb      	adds	r3, r7, r3
    172a:	781b      	ldrb	r3, [r3, #0]
    172c:	e09f      	b.n	186e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    172e:	2320      	movs	r3, #32
    1730:	18fb      	adds	r3, r7, r3
    1732:	0018      	movs	r0, r3
    1734:	4b57      	ldr	r3, [pc, #348]	; (1894 <usart_init+0x25c>)
    1736:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1738:	2320      	movs	r3, #32
    173a:	18fb      	adds	r3, r7, r3
    173c:	2200      	movs	r2, #0
    173e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1740:	2320      	movs	r3, #32
    1742:	18fb      	adds	r3, r7, r3
    1744:	2200      	movs	r2, #0
    1746:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    174c:	2310      	movs	r3, #16
    174e:	18fb      	adds	r3, r7, r3
    1750:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    1756:	2310      	movs	r3, #16
    1758:	18fb      	adds	r3, r7, r3
    175a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    1760:	2310      	movs	r3, #16
    1762:	18fb      	adds	r3, r7, r3
    1764:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    1766:	687b      	ldr	r3, [r7, #4]
    1768:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    176a:	2310      	movs	r3, #16
    176c:	18fb      	adds	r3, r7, r3
    176e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1770:	2347      	movs	r3, #71	; 0x47
    1772:	18fb      	adds	r3, r7, r3
    1774:	2200      	movs	r2, #0
    1776:	701a      	strb	r2, [r3, #0]
    1778:	e02c      	b.n	17d4 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    177a:	2347      	movs	r3, #71	; 0x47
    177c:	18fb      	adds	r3, r7, r3
    177e:	781a      	ldrb	r2, [r3, #0]
    1780:	2310      	movs	r3, #16
    1782:	18fb      	adds	r3, r7, r3
    1784:	0092      	lsls	r2, r2, #2
    1786:	58d3      	ldr	r3, [r2, r3]
    1788:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    178a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    178c:	2b00      	cmp	r3, #0
    178e:	d109      	bne.n	17a4 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1790:	2347      	movs	r3, #71	; 0x47
    1792:	18fb      	adds	r3, r7, r3
    1794:	781a      	ldrb	r2, [r3, #0]
    1796:	68bb      	ldr	r3, [r7, #8]
    1798:	0011      	movs	r1, r2
    179a:	0018      	movs	r0, r3
    179c:	4b3e      	ldr	r3, [pc, #248]	; (1898 <usart_init+0x260>)
    179e:	4798      	blx	r3
    17a0:	0003      	movs	r3, r0
    17a2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    17a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    17a6:	3301      	adds	r3, #1
    17a8:	d00d      	beq.n	17c6 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    17aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    17ac:	b2da      	uxtb	r2, r3
    17ae:	2320      	movs	r3, #32
    17b0:	18fb      	adds	r3, r7, r3
    17b2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    17b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    17b6:	0c1b      	lsrs	r3, r3, #16
    17b8:	b2db      	uxtb	r3, r3
    17ba:	2220      	movs	r2, #32
    17bc:	18ba      	adds	r2, r7, r2
    17be:	0011      	movs	r1, r2
    17c0:	0018      	movs	r0, r3
    17c2:	4b36      	ldr	r3, [pc, #216]	; (189c <usart_init+0x264>)
    17c4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    17c6:	2347      	movs	r3, #71	; 0x47
    17c8:	18fb      	adds	r3, r7, r3
    17ca:	781a      	ldrb	r2, [r3, #0]
    17cc:	2347      	movs	r3, #71	; 0x47
    17ce:	18fb      	adds	r3, r7, r3
    17d0:	3201      	adds	r2, #1
    17d2:	701a      	strb	r2, [r3, #0]
    17d4:	2347      	movs	r3, #71	; 0x47
    17d6:	18fb      	adds	r3, r7, r3
    17d8:	781b      	ldrb	r3, [r3, #0]
    17da:	2b03      	cmp	r3, #3
    17dc:	d9cd      	bls.n	177a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    17de:	2300      	movs	r3, #0
    17e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    17e2:	e00a      	b.n	17fa <usart_init+0x1c2>
		module->callback[i]            = NULL;
    17e4:	68fa      	ldr	r2, [r7, #12]
    17e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17e8:	3302      	adds	r3, #2
    17ea:	009b      	lsls	r3, r3, #2
    17ec:	18d3      	adds	r3, r2, r3
    17ee:	3304      	adds	r3, #4
    17f0:	2200      	movs	r2, #0
    17f2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    17f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17f6:	3301      	adds	r3, #1
    17f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    17fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17fc:	2b05      	cmp	r3, #5
    17fe:	d9f1      	bls.n	17e4 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    1800:	68fb      	ldr	r3, [r7, #12]
    1802:	2200      	movs	r2, #0
    1804:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1806:	68fb      	ldr	r3, [r7, #12]
    1808:	2200      	movs	r2, #0
    180a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    180c:	68fb      	ldr	r3, [r7, #12]
    180e:	2200      	movs	r2, #0
    1810:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	2200      	movs	r2, #0
    1816:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1818:	68fb      	ldr	r3, [r7, #12]
    181a:	2230      	movs	r2, #48	; 0x30
    181c:	2100      	movs	r1, #0
    181e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	2231      	movs	r2, #49	; 0x31
    1824:	2100      	movs	r1, #0
    1826:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    1828:	68fb      	ldr	r3, [r7, #12]
    182a:	2232      	movs	r2, #50	; 0x32
    182c:	2100      	movs	r1, #0
    182e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    1830:	68fb      	ldr	r3, [r7, #12]
    1832:	2233      	movs	r2, #51	; 0x33
    1834:	2100      	movs	r1, #0
    1836:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1838:	68fb      	ldr	r3, [r7, #12]
    183a:	681b      	ldr	r3, [r3, #0]
    183c:	2227      	movs	r2, #39	; 0x27
    183e:	18bc      	adds	r4, r7, r2
    1840:	0018      	movs	r0, r3
    1842:	4b0d      	ldr	r3, [pc, #52]	; (1878 <usart_init+0x240>)
    1844:	4798      	blx	r3
    1846:	0003      	movs	r3, r0
    1848:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    184a:	4a15      	ldr	r2, [pc, #84]	; (18a0 <usart_init+0x268>)
    184c:	2327      	movs	r3, #39	; 0x27
    184e:	18fb      	adds	r3, r7, r3
    1850:	781b      	ldrb	r3, [r3, #0]
    1852:	0011      	movs	r1, r2
    1854:	0018      	movs	r0, r3
    1856:	4b13      	ldr	r3, [pc, #76]	; (18a4 <usart_init+0x26c>)
    1858:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    185a:	2327      	movs	r3, #39	; 0x27
    185c:	18fb      	adds	r3, r7, r3
    185e:	781a      	ldrb	r2, [r3, #0]
    1860:	4b11      	ldr	r3, [pc, #68]	; (18a8 <usart_init+0x270>)
    1862:	0092      	lsls	r2, r2, #2
    1864:	68f9      	ldr	r1, [r7, #12]
    1866:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    1868:	233b      	movs	r3, #59	; 0x3b
    186a:	18fb      	adds	r3, r7, r3
    186c:	781b      	ldrb	r3, [r3, #0]
}
    186e:	0018      	movs	r0, r3
    1870:	46bd      	mov	sp, r7
    1872:	b013      	add	sp, #76	; 0x4c
    1874:	bd90      	pop	{r4, r7, pc}
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	0000120d 	.word	0x0000120d
    187c:	00001275 	.word	0x00001275
    1880:	0000125d 	.word	0x0000125d
    1884:	00003bad 	.word	0x00003bad
    1888:	00003bf1 	.word	0x00003bf1
    188c:	00000fc5 	.word	0x00000fc5
    1890:	0000135d 	.word	0x0000135d
    1894:	000012d1 	.word	0x000012d1
    1898:	00001051 	.word	0x00001051
    189c:	00003e99 	.word	0x00003e99
    18a0:	00001bb1 	.word	0x00001bb1
    18a4:	0000325d 	.word	0x0000325d
    18a8:	20000178 	.word	0x20000178

000018ac <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b084      	sub	sp, #16
    18b0:	af00      	add	r7, sp, #0
    18b2:	6078      	str	r0, [r7, #4]
    18b4:	000a      	movs	r2, r1
    18b6:	1cbb      	adds	r3, r7, #2
    18b8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18ba:	687b      	ldr	r3, [r7, #4]
    18bc:	681b      	ldr	r3, [r3, #0]
    18be:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	79db      	ldrb	r3, [r3, #7]
    18c4:	2201      	movs	r2, #1
    18c6:	4053      	eors	r3, r2
    18c8:	b2db      	uxtb	r3, r3
    18ca:	2b00      	cmp	r3, #0
    18cc:	d001      	beq.n	18d2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    18ce:	231c      	movs	r3, #28
    18d0:	e017      	b.n	1902 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    18d6:	b29b      	uxth	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	d001      	beq.n	18e0 <usart_write_wait+0x34>
		return STATUS_BUSY;
    18dc:	2305      	movs	r3, #5
    18de:	e010      	b.n	1902 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	0018      	movs	r0, r3
    18e4:	4b09      	ldr	r3, [pc, #36]	; (190c <usart_write_wait+0x60>)
    18e6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    18e8:	68fb      	ldr	r3, [r7, #12]
    18ea:	1cba      	adds	r2, r7, #2
    18ec:	8812      	ldrh	r2, [r2, #0]
    18ee:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    18f0:	46c0      	nop			; (mov r8, r8)
    18f2:	68fb      	ldr	r3, [r7, #12]
    18f4:	7e1b      	ldrb	r3, [r3, #24]
    18f6:	b2db      	uxtb	r3, r3
    18f8:	001a      	movs	r2, r3
    18fa:	2302      	movs	r3, #2
    18fc:	4013      	ands	r3, r2
    18fe:	d0f8      	beq.n	18f2 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1900:	2300      	movs	r3, #0
}
    1902:	0018      	movs	r0, r3
    1904:	46bd      	mov	sp, r7
    1906:	b004      	add	sp, #16
    1908:	bd80      	pop	{r7, pc}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	00001339 	.word	0x00001339

00001910 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1910:	b580      	push	{r7, lr}
    1912:	b08a      	sub	sp, #40	; 0x28
    1914:	af00      	add	r7, sp, #0
    1916:	60f8      	str	r0, [r7, #12]
    1918:	60b9      	str	r1, [r7, #8]
    191a:	1dbb      	adds	r3, r7, #6
    191c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    191e:	1dbb      	adds	r3, r7, #6
    1920:	881b      	ldrh	r3, [r3, #0]
    1922:	2b00      	cmp	r3, #0
    1924:	d101      	bne.n	192a <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1926:	2317      	movs	r3, #23
    1928:	e07e      	b.n	1a28 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    192a:	68fb      	ldr	r3, [r7, #12]
    192c:	79db      	ldrb	r3, [r3, #7]
    192e:	2201      	movs	r2, #1
    1930:	4053      	eors	r3, r2
    1932:	b2db      	uxtb	r3, r3
    1934:	2b00      	cmp	r3, #0
    1936:	d001      	beq.n	193c <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    1938:	231c      	movs	r3, #28
    193a:	e075      	b.n	1a28 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    193c:	68fb      	ldr	r3, [r7, #12]
    193e:	681b      	ldr	r3, [r3, #0]
    1940:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1942:	68fb      	ldr	r3, [r7, #12]
    1944:	0018      	movs	r0, r3
    1946:	4b3a      	ldr	r3, [pc, #232]	; (1a30 <usart_write_buffer_wait+0x120>)
    1948:	4798      	blx	r3

	uint16_t tx_pos = 0;
    194a:	2326      	movs	r3, #38	; 0x26
    194c:	18fb      	adds	r3, r7, r3
    194e:	2200      	movs	r2, #0
    1950:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    1952:	e048      	b.n	19e6 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1954:	2300      	movs	r3, #0
    1956:	623b      	str	r3, [r7, #32]
    1958:	e00f      	b.n	197a <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    195a:	697b      	ldr	r3, [r7, #20]
    195c:	7e1b      	ldrb	r3, [r3, #24]
    195e:	b2db      	uxtb	r3, r3
    1960:	001a      	movs	r2, r3
    1962:	2301      	movs	r3, #1
    1964:	4013      	ands	r3, r2
    1966:	d10d      	bne.n	1984 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    1968:	6a3b      	ldr	r3, [r7, #32]
    196a:	4a32      	ldr	r2, [pc, #200]	; (1a34 <usart_write_buffer_wait+0x124>)
    196c:	4293      	cmp	r3, r2
    196e:	d101      	bne.n	1974 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    1970:	2312      	movs	r3, #18
    1972:	e059      	b.n	1a28 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1974:	6a3b      	ldr	r3, [r7, #32]
    1976:	3301      	adds	r3, #1
    1978:	623b      	str	r3, [r7, #32]
    197a:	6a3b      	ldr	r3, [r7, #32]
    197c:	4a2d      	ldr	r2, [pc, #180]	; (1a34 <usart_write_buffer_wait+0x124>)
    197e:	4293      	cmp	r3, r2
    1980:	d9eb      	bls.n	195a <usart_write_buffer_wait+0x4a>
    1982:	e000      	b.n	1986 <usart_write_buffer_wait+0x76>
				break;
    1984:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1986:	2326      	movs	r3, #38	; 0x26
    1988:	18fb      	adds	r3, r7, r3
    198a:	881b      	ldrh	r3, [r3, #0]
    198c:	2226      	movs	r2, #38	; 0x26
    198e:	18ba      	adds	r2, r7, r2
    1990:	1c59      	adds	r1, r3, #1
    1992:	8011      	strh	r1, [r2, #0]
    1994:	001a      	movs	r2, r3
    1996:	68bb      	ldr	r3, [r7, #8]
    1998:	189b      	adds	r3, r3, r2
    199a:	781a      	ldrb	r2, [r3, #0]
    199c:	231e      	movs	r3, #30
    199e:	18fb      	adds	r3, r7, r3
    19a0:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    19a2:	68fb      	ldr	r3, [r7, #12]
    19a4:	795b      	ldrb	r3, [r3, #5]
    19a6:	2b01      	cmp	r3, #1
    19a8:	d115      	bne.n	19d6 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    19aa:	2326      	movs	r3, #38	; 0x26
    19ac:	18fb      	adds	r3, r7, r3
    19ae:	881b      	ldrh	r3, [r3, #0]
    19b0:	2226      	movs	r2, #38	; 0x26
    19b2:	18ba      	adds	r2, r7, r2
    19b4:	1c59      	adds	r1, r3, #1
    19b6:	8011      	strh	r1, [r2, #0]
    19b8:	001a      	movs	r2, r3
    19ba:	68bb      	ldr	r3, [r7, #8]
    19bc:	189b      	adds	r3, r3, r2
    19be:	781b      	ldrb	r3, [r3, #0]
    19c0:	021b      	lsls	r3, r3, #8
    19c2:	b21a      	sxth	r2, r3
    19c4:	231e      	movs	r3, #30
    19c6:	18fb      	adds	r3, r7, r3
    19c8:	2100      	movs	r1, #0
    19ca:	5e5b      	ldrsh	r3, [r3, r1]
    19cc:	4313      	orrs	r3, r2
    19ce:	b21a      	sxth	r2, r3
    19d0:	231e      	movs	r3, #30
    19d2:	18fb      	adds	r3, r7, r3
    19d4:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    19d6:	231e      	movs	r3, #30
    19d8:	18fb      	adds	r3, r7, r3
    19da:	881a      	ldrh	r2, [r3, #0]
    19dc:	68fb      	ldr	r3, [r7, #12]
    19de:	0011      	movs	r1, r2
    19e0:	0018      	movs	r0, r3
    19e2:	4b15      	ldr	r3, [pc, #84]	; (1a38 <usart_write_buffer_wait+0x128>)
    19e4:	4798      	blx	r3
	while (length--) {
    19e6:	1dbb      	adds	r3, r7, #6
    19e8:	881b      	ldrh	r3, [r3, #0]
    19ea:	1dba      	adds	r2, r7, #6
    19ec:	1e59      	subs	r1, r3, #1
    19ee:	8011      	strh	r1, [r2, #0]
    19f0:	2b00      	cmp	r3, #0
    19f2:	d1af      	bne.n	1954 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    19f4:	2300      	movs	r3, #0
    19f6:	61bb      	str	r3, [r7, #24]
    19f8:	e00f      	b.n	1a1a <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	7e1b      	ldrb	r3, [r3, #24]
    19fe:	b2db      	uxtb	r3, r3
    1a00:	001a      	movs	r2, r3
    1a02:	2302      	movs	r3, #2
    1a04:	4013      	ands	r3, r2
    1a06:	d10d      	bne.n	1a24 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    1a08:	69bb      	ldr	r3, [r7, #24]
    1a0a:	4a0a      	ldr	r2, [pc, #40]	; (1a34 <usart_write_buffer_wait+0x124>)
    1a0c:	4293      	cmp	r3, r2
    1a0e:	d101      	bne.n	1a14 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    1a10:	2312      	movs	r3, #18
    1a12:	e009      	b.n	1a28 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1a14:	69bb      	ldr	r3, [r7, #24]
    1a16:	3301      	adds	r3, #1
    1a18:	61bb      	str	r3, [r7, #24]
    1a1a:	69bb      	ldr	r3, [r7, #24]
    1a1c:	4a05      	ldr	r2, [pc, #20]	; (1a34 <usart_write_buffer_wait+0x124>)
    1a1e:	4293      	cmp	r3, r2
    1a20:	d9eb      	bls.n	19fa <usart_write_buffer_wait+0xea>
    1a22:	e000      	b.n	1a26 <usart_write_buffer_wait+0x116>
			break;
    1a24:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    1a26:	2300      	movs	r3, #0
}
    1a28:	0018      	movs	r0, r3
    1a2a:	46bd      	mov	sp, r7
    1a2c:	b00a      	add	sp, #40	; 0x28
    1a2e:	bd80      	pop	{r7, pc}
    1a30:	00001339 	.word	0x00001339
    1a34:	0000ffff 	.word	0x0000ffff
    1a38:	000018ad 	.word	0x000018ad

00001a3c <system_interrupt_enter_critical_section>:
{
    1a3c:	b580      	push	{r7, lr}
    1a3e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1a40:	4b02      	ldr	r3, [pc, #8]	; (1a4c <system_interrupt_enter_critical_section+0x10>)
    1a42:	4798      	blx	r3
}
    1a44:	46c0      	nop			; (mov r8, r8)
    1a46:	46bd      	mov	sp, r7
    1a48:	bd80      	pop	{r7, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	000033a9 	.word	0x000033a9

00001a50 <system_interrupt_leave_critical_section>:
{
    1a50:	b580      	push	{r7, lr}
    1a52:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1a54:	4b02      	ldr	r3, [pc, #8]	; (1a60 <system_interrupt_leave_critical_section+0x10>)
    1a56:	4798      	blx	r3
}
    1a58:	46c0      	nop			; (mov r8, r8)
    1a5a:	46bd      	mov	sp, r7
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	000033fd 	.word	0x000033fd

00001a64 <usart_is_syncing>:
{
    1a64:	b580      	push	{r7, lr}
    1a66:	b084      	sub	sp, #16
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	681b      	ldr	r3, [r3, #0]
    1a70:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    1a72:	68fb      	ldr	r3, [r7, #12]
    1a74:	69db      	ldr	r3, [r3, #28]
    1a76:	1e5a      	subs	r2, r3, #1
    1a78:	4193      	sbcs	r3, r2
    1a7a:	b2db      	uxtb	r3, r3
}
    1a7c:	0018      	movs	r0, r3
    1a7e:	46bd      	mov	sp, r7
    1a80:	b004      	add	sp, #16
    1a82:	bd80      	pop	{r7, pc}

00001a84 <_usart_wait_for_sync>:
{
    1a84:	b580      	push	{r7, lr}
    1a86:	b082      	sub	sp, #8
    1a88:	af00      	add	r7, sp, #0
    1a8a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    1a8c:	46c0      	nop			; (mov r8, r8)
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	0018      	movs	r0, r3
    1a92:	4b04      	ldr	r3, [pc, #16]	; (1aa4 <_usart_wait_for_sync+0x20>)
    1a94:	4798      	blx	r3
    1a96:	1e03      	subs	r3, r0, #0
    1a98:	d1f9      	bne.n	1a8e <_usart_wait_for_sync+0xa>
}
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	46bd      	mov	sp, r7
    1a9e:	b002      	add	sp, #8
    1aa0:	bd80      	pop	{r7, pc}
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	00001a65 	.word	0x00001a65

00001aa8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1aa8:	b580      	push	{r7, lr}
    1aaa:	b086      	sub	sp, #24
    1aac:	af00      	add	r7, sp, #0
    1aae:	60f8      	str	r0, [r7, #12]
    1ab0:	60b9      	str	r1, [r7, #8]
    1ab2:	1dbb      	adds	r3, r7, #6
    1ab4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ab6:	68fb      	ldr	r3, [r7, #12]
    1ab8:	681b      	ldr	r3, [r3, #0]
    1aba:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    1abc:	4b16      	ldr	r3, [pc, #88]	; (1b18 <_usart_read_buffer+0x70>)
    1abe:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1ac0:	68fb      	ldr	r3, [r7, #12]
    1ac2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1ac4:	b29b      	uxth	r3, r3
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d003      	beq.n	1ad2 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    1aca:	4b14      	ldr	r3, [pc, #80]	; (1b1c <_usart_read_buffer+0x74>)
    1acc:	4798      	blx	r3
		return STATUS_BUSY;
    1ace:	2305      	movs	r3, #5
    1ad0:	e01e      	b.n	1b10 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    1ad2:	68fb      	ldr	r3, [r7, #12]
    1ad4:	1dba      	adds	r2, r7, #6
    1ad6:	8812      	ldrh	r2, [r2, #0]
    1ad8:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    1ada:	4b10      	ldr	r3, [pc, #64]	; (1b1c <_usart_read_buffer+0x74>)
    1adc:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    1ade:	68fb      	ldr	r3, [r7, #12]
    1ae0:	68ba      	ldr	r2, [r7, #8]
    1ae2:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1ae4:	68fb      	ldr	r3, [r7, #12]
    1ae6:	2232      	movs	r2, #50	; 0x32
    1ae8:	2105      	movs	r1, #5
    1aea:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1aec:	697b      	ldr	r3, [r7, #20]
    1aee:	2204      	movs	r2, #4
    1af0:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    1af2:	68fb      	ldr	r3, [r7, #12]
    1af4:	7a1b      	ldrb	r3, [r3, #8]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d002      	beq.n	1b00 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1afa:	697b      	ldr	r3, [r7, #20]
    1afc:	2220      	movs	r2, #32
    1afe:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    1b00:	68fb      	ldr	r3, [r7, #12]
    1b02:	7a5b      	ldrb	r3, [r3, #9]
    1b04:	2b00      	cmp	r3, #0
    1b06:	d002      	beq.n	1b0e <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1b08:	697b      	ldr	r3, [r7, #20]
    1b0a:	2208      	movs	r2, #8
    1b0c:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    1b0e:	2300      	movs	r3, #0
}
    1b10:	0018      	movs	r0, r3
    1b12:	46bd      	mov	sp, r7
    1b14:	b006      	add	sp, #24
    1b16:	bd80      	pop	{r7, pc}
    1b18:	00001a3d 	.word	0x00001a3d
    1b1c:	00001a51 	.word	0x00001a51

00001b20 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b084      	sub	sp, #16
    1b24:	af00      	add	r7, sp, #0
    1b26:	60f8      	str	r0, [r7, #12]
    1b28:	60b9      	str	r1, [r7, #8]
    1b2a:	1dfb      	adds	r3, r7, #7
    1b2c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1b2e:	1dfb      	adds	r3, r7, #7
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	68fa      	ldr	r2, [r7, #12]
    1b34:	3302      	adds	r3, #2
    1b36:	009b      	lsls	r3, r3, #2
    1b38:	18d3      	adds	r3, r2, r3
    1b3a:	3304      	adds	r3, #4
    1b3c:	68ba      	ldr	r2, [r7, #8]
    1b3e:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1b40:	68fb      	ldr	r3, [r7, #12]
    1b42:	2230      	movs	r2, #48	; 0x30
    1b44:	5c9b      	ldrb	r3, [r3, r2]
    1b46:	b25a      	sxtb	r2, r3
    1b48:	1dfb      	adds	r3, r7, #7
    1b4a:	781b      	ldrb	r3, [r3, #0]
    1b4c:	2101      	movs	r1, #1
    1b4e:	4099      	lsls	r1, r3
    1b50:	000b      	movs	r3, r1
    1b52:	b25b      	sxtb	r3, r3
    1b54:	4313      	orrs	r3, r2
    1b56:	b25b      	sxtb	r3, r3
    1b58:	b2d9      	uxtb	r1, r3
    1b5a:	68fb      	ldr	r3, [r7, #12]
    1b5c:	2230      	movs	r2, #48	; 0x30
    1b5e:	5499      	strb	r1, [r3, r2]
}
    1b60:	46c0      	nop			; (mov r8, r8)
    1b62:	46bd      	mov	sp, r7
    1b64:	b004      	add	sp, #16
    1b66:	bd80      	pop	{r7, pc}

00001b68 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1b68:	b580      	push	{r7, lr}
    1b6a:	b084      	sub	sp, #16
    1b6c:	af00      	add	r7, sp, #0
    1b6e:	60f8      	str	r0, [r7, #12]
    1b70:	60b9      	str	r1, [r7, #8]
    1b72:	1dbb      	adds	r3, r7, #6
    1b74:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    1b76:	1dbb      	adds	r3, r7, #6
    1b78:	881b      	ldrh	r3, [r3, #0]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d101      	bne.n	1b82 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1b7e:	2317      	movs	r3, #23
    1b80:	e010      	b.n	1ba4 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1b82:	68fb      	ldr	r3, [r7, #12]
    1b84:	799b      	ldrb	r3, [r3, #6]
    1b86:	2201      	movs	r2, #1
    1b88:	4053      	eors	r3, r2
    1b8a:	b2db      	uxtb	r3, r3
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d001      	beq.n	1b94 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    1b90:	231c      	movs	r3, #28
    1b92:	e007      	b.n	1ba4 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    1b94:	1dbb      	adds	r3, r7, #6
    1b96:	881a      	ldrh	r2, [r3, #0]
    1b98:	68b9      	ldr	r1, [r7, #8]
    1b9a:	68fb      	ldr	r3, [r7, #12]
    1b9c:	0018      	movs	r0, r3
    1b9e:	4b03      	ldr	r3, [pc, #12]	; (1bac <usart_read_buffer_job+0x44>)
    1ba0:	4798      	blx	r3
    1ba2:	0003      	movs	r3, r0
}
    1ba4:	0018      	movs	r0, r3
    1ba6:	46bd      	mov	sp, r7
    1ba8:	b004      	add	sp, #16
    1baa:	bd80      	pop	{r7, pc}
    1bac:	00001aa9 	.word	0x00001aa9

00001bb0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1bb0:	b580      	push	{r7, lr}
    1bb2:	b088      	sub	sp, #32
    1bb4:	af00      	add	r7, sp, #0
    1bb6:	0002      	movs	r2, r0
    1bb8:	1dfb      	adds	r3, r7, #7
    1bba:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1bbc:	1dfb      	adds	r3, r7, #7
    1bbe:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    1bc0:	4ba3      	ldr	r3, [pc, #652]	; (1e50 <_usart_interrupt_handler+0x2a0>)
    1bc2:	0092      	lsls	r2, r2, #2
    1bc4:	58d3      	ldr	r3, [r2, r3]
    1bc6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1bc8:	69bb      	ldr	r3, [r7, #24]
    1bca:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    1bcc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    1bce:	69bb      	ldr	r3, [r7, #24]
    1bd0:	0018      	movs	r0, r3
    1bd2:	4ba0      	ldr	r3, [pc, #640]	; (1e54 <_usart_interrupt_handler+0x2a4>)
    1bd4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1bd6:	697b      	ldr	r3, [r7, #20]
    1bd8:	7e1b      	ldrb	r3, [r3, #24]
    1bda:	b2da      	uxtb	r2, r3
    1bdc:	2312      	movs	r3, #18
    1bde:	18fb      	adds	r3, r7, r3
    1be0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    1be2:	697b      	ldr	r3, [r7, #20]
    1be4:	7d9b      	ldrb	r3, [r3, #22]
    1be6:	b2db      	uxtb	r3, r3
    1be8:	b29a      	uxth	r2, r3
    1bea:	2312      	movs	r3, #18
    1bec:	18fb      	adds	r3, r7, r3
    1bee:	2112      	movs	r1, #18
    1bf0:	1879      	adds	r1, r7, r1
    1bf2:	8809      	ldrh	r1, [r1, #0]
    1bf4:	400a      	ands	r2, r1
    1bf6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1bf8:	69bb      	ldr	r3, [r7, #24]
    1bfa:	2230      	movs	r2, #48	; 0x30
    1bfc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    1bfe:	69ba      	ldr	r2, [r7, #24]
    1c00:	2131      	movs	r1, #49	; 0x31
    1c02:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    1c04:	4013      	ands	r3, r2
    1c06:	b2da      	uxtb	r2, r3
    1c08:	2310      	movs	r3, #16
    1c0a:	18fb      	adds	r3, r7, r3
    1c0c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1c0e:	2312      	movs	r3, #18
    1c10:	18fb      	adds	r3, r7, r3
    1c12:	881b      	ldrh	r3, [r3, #0]
    1c14:	2201      	movs	r2, #1
    1c16:	4013      	ands	r3, r2
    1c18:	d044      	beq.n	1ca4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    1c1a:	69bb      	ldr	r3, [r7, #24]
    1c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1c1e:	b29b      	uxth	r3, r3
    1c20:	2b00      	cmp	r3, #0
    1c22:	d03c      	beq.n	1c9e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1c24:	69bb      	ldr	r3, [r7, #24]
    1c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c28:	781b      	ldrb	r3, [r3, #0]
    1c2a:	b2da      	uxtb	r2, r3
    1c2c:	231c      	movs	r3, #28
    1c2e:	18fb      	adds	r3, r7, r3
    1c30:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1c32:	69bb      	ldr	r3, [r7, #24]
    1c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c36:	1c5a      	adds	r2, r3, #1
    1c38:	69bb      	ldr	r3, [r7, #24]
    1c3a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1c3c:	69bb      	ldr	r3, [r7, #24]
    1c3e:	795b      	ldrb	r3, [r3, #5]
    1c40:	2b01      	cmp	r3, #1
    1c42:	d113      	bne.n	1c6c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1c44:	69bb      	ldr	r3, [r7, #24]
    1c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c48:	781b      	ldrb	r3, [r3, #0]
    1c4a:	b2db      	uxtb	r3, r3
    1c4c:	021b      	lsls	r3, r3, #8
    1c4e:	b21a      	sxth	r2, r3
    1c50:	231c      	movs	r3, #28
    1c52:	18fb      	adds	r3, r7, r3
    1c54:	2100      	movs	r1, #0
    1c56:	5e5b      	ldrsh	r3, [r3, r1]
    1c58:	4313      	orrs	r3, r2
    1c5a:	b21a      	sxth	r2, r3
    1c5c:	231c      	movs	r3, #28
    1c5e:	18fb      	adds	r3, r7, r3
    1c60:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1c62:	69bb      	ldr	r3, [r7, #24]
    1c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c66:	1c5a      	adds	r2, r3, #1
    1c68:	69bb      	ldr	r3, [r7, #24]
    1c6a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1c6c:	231c      	movs	r3, #28
    1c6e:	18fb      	adds	r3, r7, r3
    1c70:	881b      	ldrh	r3, [r3, #0]
    1c72:	05db      	lsls	r3, r3, #23
    1c74:	0ddb      	lsrs	r3, r3, #23
    1c76:	b29a      	uxth	r2, r3
    1c78:	697b      	ldr	r3, [r7, #20]
    1c7a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1c7c:	69bb      	ldr	r3, [r7, #24]
    1c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1c80:	b29b      	uxth	r3, r3
    1c82:	3b01      	subs	r3, #1
    1c84:	b29b      	uxth	r3, r3
    1c86:	69ba      	ldr	r2, [r7, #24]
    1c88:	1c19      	adds	r1, r3, #0
    1c8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d109      	bne.n	1ca4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1c90:	697b      	ldr	r3, [r7, #20]
    1c92:	2201      	movs	r2, #1
    1c94:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1c96:	697b      	ldr	r3, [r7, #20]
    1c98:	2202      	movs	r2, #2
    1c9a:	759a      	strb	r2, [r3, #22]
    1c9c:	e002      	b.n	1ca4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1c9e:	697b      	ldr	r3, [r7, #20]
    1ca0:	2201      	movs	r2, #1
    1ca2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1ca4:	2312      	movs	r3, #18
    1ca6:	18fb      	adds	r3, r7, r3
    1ca8:	881b      	ldrh	r3, [r3, #0]
    1caa:	2202      	movs	r2, #2
    1cac:	4013      	ands	r3, r2
    1cae:	d011      	beq.n	1cd4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1cb0:	697b      	ldr	r3, [r7, #20]
    1cb2:	2202      	movs	r2, #2
    1cb4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    1cb6:	69bb      	ldr	r3, [r7, #24]
    1cb8:	2233      	movs	r2, #51	; 0x33
    1cba:	2100      	movs	r1, #0
    1cbc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1cbe:	2310      	movs	r3, #16
    1cc0:	18fb      	adds	r3, r7, r3
    1cc2:	881b      	ldrh	r3, [r3, #0]
    1cc4:	2201      	movs	r2, #1
    1cc6:	4013      	ands	r3, r2
    1cc8:	d004      	beq.n	1cd4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1cca:	69bb      	ldr	r3, [r7, #24]
    1ccc:	68db      	ldr	r3, [r3, #12]
    1cce:	69ba      	ldr	r2, [r7, #24]
    1cd0:	0010      	movs	r0, r2
    1cd2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1cd4:	2312      	movs	r3, #18
    1cd6:	18fb      	adds	r3, r7, r3
    1cd8:	881b      	ldrh	r3, [r3, #0]
    1cda:	2204      	movs	r2, #4
    1cdc:	4013      	ands	r3, r2
    1cde:	d100      	bne.n	1ce2 <_usart_interrupt_handler+0x132>
    1ce0:	e0bd      	b.n	1e5e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    1ce2:	69bb      	ldr	r3, [r7, #24]
    1ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d100      	bne.n	1cee <_usart_interrupt_handler+0x13e>
    1cec:	e0b4      	b.n	1e58 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1cee:	697b      	ldr	r3, [r7, #20]
    1cf0:	8b5b      	ldrh	r3, [r3, #26]
    1cf2:	b29b      	uxth	r3, r3
    1cf4:	b2da      	uxtb	r2, r3
    1cf6:	231f      	movs	r3, #31
    1cf8:	18fb      	adds	r3, r7, r3
    1cfa:	213f      	movs	r1, #63	; 0x3f
    1cfc:	400a      	ands	r2, r1
    1cfe:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1d00:	231f      	movs	r3, #31
    1d02:	18fb      	adds	r3, r7, r3
    1d04:	781b      	ldrb	r3, [r3, #0]
    1d06:	2208      	movs	r2, #8
    1d08:	4013      	ands	r3, r2
    1d0a:	d007      	beq.n	1d1c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1d0c:	231f      	movs	r3, #31
    1d0e:	18fb      	adds	r3, r7, r3
    1d10:	221f      	movs	r2, #31
    1d12:	18ba      	adds	r2, r7, r2
    1d14:	7812      	ldrb	r2, [r2, #0]
    1d16:	2108      	movs	r1, #8
    1d18:	438a      	bics	r2, r1
    1d1a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1d1c:	231f      	movs	r3, #31
    1d1e:	18fb      	adds	r3, r7, r3
    1d20:	781b      	ldrb	r3, [r3, #0]
    1d22:	2b00      	cmp	r3, #0
    1d24:	d050      	beq.n	1dc8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1d26:	231f      	movs	r3, #31
    1d28:	18fb      	adds	r3, r7, r3
    1d2a:	781b      	ldrb	r3, [r3, #0]
    1d2c:	2202      	movs	r2, #2
    1d2e:	4013      	ands	r3, r2
    1d30:	d007      	beq.n	1d42 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1d32:	69bb      	ldr	r3, [r7, #24]
    1d34:	2232      	movs	r2, #50	; 0x32
    1d36:	211a      	movs	r1, #26
    1d38:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1d3a:	697b      	ldr	r3, [r7, #20]
    1d3c:	2202      	movs	r2, #2
    1d3e:	835a      	strh	r2, [r3, #26]
    1d40:	e036      	b.n	1db0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1d42:	231f      	movs	r3, #31
    1d44:	18fb      	adds	r3, r7, r3
    1d46:	781b      	ldrb	r3, [r3, #0]
    1d48:	2204      	movs	r2, #4
    1d4a:	4013      	ands	r3, r2
    1d4c:	d007      	beq.n	1d5e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1d4e:	69bb      	ldr	r3, [r7, #24]
    1d50:	2232      	movs	r2, #50	; 0x32
    1d52:	211e      	movs	r1, #30
    1d54:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1d56:	697b      	ldr	r3, [r7, #20]
    1d58:	2204      	movs	r2, #4
    1d5a:	835a      	strh	r2, [r3, #26]
    1d5c:	e028      	b.n	1db0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1d5e:	231f      	movs	r3, #31
    1d60:	18fb      	adds	r3, r7, r3
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	2201      	movs	r2, #1
    1d66:	4013      	ands	r3, r2
    1d68:	d007      	beq.n	1d7a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1d6a:	69bb      	ldr	r3, [r7, #24]
    1d6c:	2232      	movs	r2, #50	; 0x32
    1d6e:	2113      	movs	r1, #19
    1d70:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1d72:	697b      	ldr	r3, [r7, #20]
    1d74:	2201      	movs	r2, #1
    1d76:	835a      	strh	r2, [r3, #26]
    1d78:	e01a      	b.n	1db0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1d7a:	231f      	movs	r3, #31
    1d7c:	18fb      	adds	r3, r7, r3
    1d7e:	781b      	ldrb	r3, [r3, #0]
    1d80:	2210      	movs	r2, #16
    1d82:	4013      	ands	r3, r2
    1d84:	d007      	beq.n	1d96 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1d86:	69bb      	ldr	r3, [r7, #24]
    1d88:	2232      	movs	r2, #50	; 0x32
    1d8a:	2142      	movs	r1, #66	; 0x42
    1d8c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1d8e:	697b      	ldr	r3, [r7, #20]
    1d90:	2210      	movs	r2, #16
    1d92:	835a      	strh	r2, [r3, #26]
    1d94:	e00c      	b.n	1db0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1d96:	231f      	movs	r3, #31
    1d98:	18fb      	adds	r3, r7, r3
    1d9a:	781b      	ldrb	r3, [r3, #0]
    1d9c:	2220      	movs	r2, #32
    1d9e:	4013      	ands	r3, r2
    1da0:	d006      	beq.n	1db0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1da2:	69bb      	ldr	r3, [r7, #24]
    1da4:	2232      	movs	r2, #50	; 0x32
    1da6:	2141      	movs	r1, #65	; 0x41
    1da8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1daa:	697b      	ldr	r3, [r7, #20]
    1dac:	2220      	movs	r2, #32
    1dae:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1db0:	2310      	movs	r3, #16
    1db2:	18fb      	adds	r3, r7, r3
    1db4:	881b      	ldrh	r3, [r3, #0]
    1db6:	2204      	movs	r2, #4
    1db8:	4013      	ands	r3, r2
				if (callback_status
    1dba:	d050      	beq.n	1e5e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1dbc:	69bb      	ldr	r3, [r7, #24]
    1dbe:	695b      	ldr	r3, [r3, #20]
    1dc0:	69ba      	ldr	r2, [r7, #24]
    1dc2:	0010      	movs	r0, r2
    1dc4:	4798      	blx	r3
    1dc6:	e04a      	b.n	1e5e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1dc8:	697b      	ldr	r3, [r7, #20]
    1dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1dcc:	b29a      	uxth	r2, r3
    1dce:	230e      	movs	r3, #14
    1dd0:	18fb      	adds	r3, r7, r3
    1dd2:	05d2      	lsls	r2, r2, #23
    1dd4:	0dd2      	lsrs	r2, r2, #23
    1dd6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1dd8:	69bb      	ldr	r3, [r7, #24]
    1dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ddc:	220e      	movs	r2, #14
    1dde:	18ba      	adds	r2, r7, r2
    1de0:	8812      	ldrh	r2, [r2, #0]
    1de2:	b2d2      	uxtb	r2, r2
    1de4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1de6:	69bb      	ldr	r3, [r7, #24]
    1de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1dea:	1c5a      	adds	r2, r3, #1
    1dec:	69bb      	ldr	r3, [r7, #24]
    1dee:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1df0:	69bb      	ldr	r3, [r7, #24]
    1df2:	795b      	ldrb	r3, [r3, #5]
    1df4:	2b01      	cmp	r3, #1
    1df6:	d10d      	bne.n	1e14 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1df8:	69bb      	ldr	r3, [r7, #24]
    1dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1dfc:	220e      	movs	r2, #14
    1dfe:	18ba      	adds	r2, r7, r2
    1e00:	8812      	ldrh	r2, [r2, #0]
    1e02:	0a12      	lsrs	r2, r2, #8
    1e04:	b292      	uxth	r2, r2
    1e06:	b2d2      	uxtb	r2, r2
    1e08:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1e0a:	69bb      	ldr	r3, [r7, #24]
    1e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1e0e:	1c5a      	adds	r2, r3, #1
    1e10:	69bb      	ldr	r3, [r7, #24]
    1e12:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1e14:	69bb      	ldr	r3, [r7, #24]
    1e16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1e18:	b29b      	uxth	r3, r3
    1e1a:	3b01      	subs	r3, #1
    1e1c:	b29b      	uxth	r3, r3
    1e1e:	69ba      	ldr	r2, [r7, #24]
    1e20:	1c19      	adds	r1, r3, #0
    1e22:	8591      	strh	r1, [r2, #44]	; 0x2c
    1e24:	2b00      	cmp	r3, #0
    1e26:	d11a      	bne.n	1e5e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1e28:	697b      	ldr	r3, [r7, #20]
    1e2a:	2204      	movs	r2, #4
    1e2c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    1e2e:	69bb      	ldr	r3, [r7, #24]
    1e30:	2232      	movs	r2, #50	; 0x32
    1e32:	2100      	movs	r1, #0
    1e34:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1e36:	2310      	movs	r3, #16
    1e38:	18fb      	adds	r3, r7, r3
    1e3a:	881b      	ldrh	r3, [r3, #0]
    1e3c:	2202      	movs	r2, #2
    1e3e:	4013      	ands	r3, r2
					if (callback_status
    1e40:	d00d      	beq.n	1e5e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1e42:	69bb      	ldr	r3, [r7, #24]
    1e44:	691b      	ldr	r3, [r3, #16]
    1e46:	69ba      	ldr	r2, [r7, #24]
    1e48:	0010      	movs	r0, r2
    1e4a:	4798      	blx	r3
    1e4c:	e007      	b.n	1e5e <_usart_interrupt_handler+0x2ae>
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	20000178 	.word	0x20000178
    1e54:	00001a85 	.word	0x00001a85
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1e58:	697b      	ldr	r3, [r7, #20]
    1e5a:	2204      	movs	r2, #4
    1e5c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1e5e:	2312      	movs	r3, #18
    1e60:	18fb      	adds	r3, r7, r3
    1e62:	881b      	ldrh	r3, [r3, #0]
    1e64:	2210      	movs	r2, #16
    1e66:	4013      	ands	r3, r2
    1e68:	d010      	beq.n	1e8c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1e6a:	697b      	ldr	r3, [r7, #20]
    1e6c:	2210      	movs	r2, #16
    1e6e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1e70:	697b      	ldr	r3, [r7, #20]
    1e72:	2210      	movs	r2, #16
    1e74:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1e76:	2310      	movs	r3, #16
    1e78:	18fb      	adds	r3, r7, r3
    1e7a:	881b      	ldrh	r3, [r3, #0]
    1e7c:	2210      	movs	r2, #16
    1e7e:	4013      	ands	r3, r2
    1e80:	d004      	beq.n	1e8c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1e82:	69bb      	ldr	r3, [r7, #24]
    1e84:	69db      	ldr	r3, [r3, #28]
    1e86:	69ba      	ldr	r2, [r7, #24]
    1e88:	0010      	movs	r0, r2
    1e8a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1e8c:	2312      	movs	r3, #18
    1e8e:	18fb      	adds	r3, r7, r3
    1e90:	881b      	ldrh	r3, [r3, #0]
    1e92:	2220      	movs	r2, #32
    1e94:	4013      	ands	r3, r2
    1e96:	d010      	beq.n	1eba <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1e98:	697b      	ldr	r3, [r7, #20]
    1e9a:	2220      	movs	r2, #32
    1e9c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1e9e:	697b      	ldr	r3, [r7, #20]
    1ea0:	2220      	movs	r2, #32
    1ea2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1ea4:	2310      	movs	r3, #16
    1ea6:	18fb      	adds	r3, r7, r3
    1ea8:	881b      	ldrh	r3, [r3, #0]
    1eaa:	2208      	movs	r2, #8
    1eac:	4013      	ands	r3, r2
    1eae:	d004      	beq.n	1eba <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1eb0:	69bb      	ldr	r3, [r7, #24]
    1eb2:	699b      	ldr	r3, [r3, #24]
    1eb4:	69ba      	ldr	r2, [r7, #24]
    1eb6:	0010      	movs	r0, r2
    1eb8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1eba:	2312      	movs	r3, #18
    1ebc:	18fb      	adds	r3, r7, r3
    1ebe:	881b      	ldrh	r3, [r3, #0]
    1ec0:	2208      	movs	r2, #8
    1ec2:	4013      	ands	r3, r2
    1ec4:	d010      	beq.n	1ee8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1ec6:	697b      	ldr	r3, [r7, #20]
    1ec8:	2208      	movs	r2, #8
    1eca:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1ecc:	697b      	ldr	r3, [r7, #20]
    1ece:	2208      	movs	r2, #8
    1ed0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1ed2:	2310      	movs	r3, #16
    1ed4:	18fb      	adds	r3, r7, r3
    1ed6:	881b      	ldrh	r3, [r3, #0]
    1ed8:	2220      	movs	r2, #32
    1eda:	4013      	ands	r3, r2
    1edc:	d004      	beq.n	1ee8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1ede:	69bb      	ldr	r3, [r7, #24]
    1ee0:	6a1b      	ldr	r3, [r3, #32]
    1ee2:	69ba      	ldr	r2, [r7, #24]
    1ee4:	0010      	movs	r0, r2
    1ee6:	4798      	blx	r3
		}
	}
#endif
}
    1ee8:	46c0      	nop			; (mov r8, r8)
    1eea:	46bd      	mov	sp, r7
    1eec:	b008      	add	sp, #32
    1eee:	bd80      	pop	{r7, pc}

00001ef0 <system_pinmux_get_config_defaults>:
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b082      	sub	sp, #8
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	2280      	movs	r2, #128	; 0x80
    1efc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1efe:	687b      	ldr	r3, [r7, #4]
    1f00:	2200      	movs	r2, #0
    1f02:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	2201      	movs	r2, #1
    1f08:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1f0a:	687b      	ldr	r3, [r7, #4]
    1f0c:	2200      	movs	r2, #0
    1f0e:	70da      	strb	r2, [r3, #3]
}
    1f10:	46c0      	nop			; (mov r8, r8)
    1f12:	46bd      	mov	sp, r7
    1f14:	b002      	add	sp, #8
    1f16:	bd80      	pop	{r7, pc}

00001f18 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1f18:	b580      	push	{r7, lr}
    1f1a:	b084      	sub	sp, #16
    1f1c:	af00      	add	r7, sp, #0
    1f1e:	0002      	movs	r2, r0
    1f20:	1dfb      	adds	r3, r7, #7
    1f22:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1f24:	230f      	movs	r3, #15
    1f26:	18fb      	adds	r3, r7, r3
    1f28:	1dfa      	adds	r2, r7, #7
    1f2a:	7812      	ldrb	r2, [r2, #0]
    1f2c:	09d2      	lsrs	r2, r2, #7
    1f2e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1f30:	230e      	movs	r3, #14
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	1dfa      	adds	r2, r7, #7
    1f36:	7812      	ldrb	r2, [r2, #0]
    1f38:	0952      	lsrs	r2, r2, #5
    1f3a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1f3c:	4b0d      	ldr	r3, [pc, #52]	; (1f74 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1f3e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1f40:	230f      	movs	r3, #15
    1f42:	18fb      	adds	r3, r7, r3
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d10f      	bne.n	1f6a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1f4a:	230f      	movs	r3, #15
    1f4c:	18fb      	adds	r3, r7, r3
    1f4e:	781b      	ldrb	r3, [r3, #0]
    1f50:	009b      	lsls	r3, r3, #2
    1f52:	2210      	movs	r2, #16
    1f54:	4694      	mov	ip, r2
    1f56:	44bc      	add	ip, r7
    1f58:	4463      	add	r3, ip
    1f5a:	3b08      	subs	r3, #8
    1f5c:	681a      	ldr	r2, [r3, #0]
    1f5e:	230e      	movs	r3, #14
    1f60:	18fb      	adds	r3, r7, r3
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	01db      	lsls	r3, r3, #7
    1f66:	18d3      	adds	r3, r2, r3
    1f68:	e000      	b.n	1f6c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1f6a:	2300      	movs	r3, #0
	}
}
    1f6c:	0018      	movs	r0, r3
    1f6e:	46bd      	mov	sp, r7
    1f70:	b004      	add	sp, #16
    1f72:	bd80      	pop	{r7, pc}
    1f74:	41004400 	.word	0x41004400

00001f78 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b082      	sub	sp, #8
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	0002      	movs	r2, r0
    1f80:	1dfb      	adds	r3, r7, #7
    1f82:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1f84:	1dfb      	adds	r3, r7, #7
    1f86:	781b      	ldrb	r3, [r3, #0]
    1f88:	0018      	movs	r0, r3
    1f8a:	4b03      	ldr	r3, [pc, #12]	; (1f98 <port_get_group_from_gpio_pin+0x20>)
    1f8c:	4798      	blx	r3
    1f8e:	0003      	movs	r3, r0
}
    1f90:	0018      	movs	r0, r3
    1f92:	46bd      	mov	sp, r7
    1f94:	b002      	add	sp, #8
    1f96:	bd80      	pop	{r7, pc}
    1f98:	00001f19 	.word	0x00001f19

00001f9c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1f9c:	b580      	push	{r7, lr}
    1f9e:	b084      	sub	sp, #16
    1fa0:	af00      	add	r7, sp, #0
    1fa2:	0002      	movs	r2, r0
    1fa4:	1dfb      	adds	r3, r7, #7
    1fa6:	701a      	strb	r2, [r3, #0]
    1fa8:	1dbb      	adds	r3, r7, #6
    1faa:	1c0a      	adds	r2, r1, #0
    1fac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1fae:	1dfb      	adds	r3, r7, #7
    1fb0:	781b      	ldrb	r3, [r3, #0]
    1fb2:	0018      	movs	r0, r3
    1fb4:	4b0d      	ldr	r3, [pc, #52]	; (1fec <port_pin_set_output_level+0x50>)
    1fb6:	4798      	blx	r3
    1fb8:	0003      	movs	r3, r0
    1fba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1fbc:	1dfb      	adds	r3, r7, #7
    1fbe:	781b      	ldrb	r3, [r3, #0]
    1fc0:	221f      	movs	r2, #31
    1fc2:	4013      	ands	r3, r2
    1fc4:	2201      	movs	r2, #1
    1fc6:	409a      	lsls	r2, r3
    1fc8:	0013      	movs	r3, r2
    1fca:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1fcc:	1dbb      	adds	r3, r7, #6
    1fce:	781b      	ldrb	r3, [r3, #0]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d003      	beq.n	1fdc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1fd4:	68fb      	ldr	r3, [r7, #12]
    1fd6:	68ba      	ldr	r2, [r7, #8]
    1fd8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1fda:	e002      	b.n	1fe2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	68ba      	ldr	r2, [r7, #8]
    1fe0:	615a      	str	r2, [r3, #20]
}
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	46bd      	mov	sp, r7
    1fe6:	b004      	add	sp, #16
    1fe8:	bd80      	pop	{r7, pc}
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	00001f79 	.word	0x00001f79

00001ff0 <system_gclk_chan_get_config_defaults>:
{
    1ff0:	b580      	push	{r7, lr}
    1ff2:	b082      	sub	sp, #8
    1ff4:	af00      	add	r7, sp, #0
    1ff6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	2200      	movs	r2, #0
    1ffc:	701a      	strb	r2, [r3, #0]
}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	46bd      	mov	sp, r7
    2002:	b002      	add	sp, #8
    2004:	bd80      	pop	{r7, pc}
	...

00002008 <system_apb_clock_set_mask>:
{
    2008:	b580      	push	{r7, lr}
    200a:	b082      	sub	sp, #8
    200c:	af00      	add	r7, sp, #0
    200e:	0002      	movs	r2, r0
    2010:	6039      	str	r1, [r7, #0]
    2012:	1dfb      	adds	r3, r7, #7
    2014:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2016:	1dfb      	adds	r3, r7, #7
    2018:	781b      	ldrb	r3, [r3, #0]
    201a:	2b01      	cmp	r3, #1
    201c:	d00a      	beq.n	2034 <system_apb_clock_set_mask+0x2c>
    201e:	2b02      	cmp	r3, #2
    2020:	d00f      	beq.n	2042 <system_apb_clock_set_mask+0x3a>
    2022:	2b00      	cmp	r3, #0
    2024:	d114      	bne.n	2050 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2026:	4b0e      	ldr	r3, [pc, #56]	; (2060 <system_apb_clock_set_mask+0x58>)
    2028:	4a0d      	ldr	r2, [pc, #52]	; (2060 <system_apb_clock_set_mask+0x58>)
    202a:	6991      	ldr	r1, [r2, #24]
    202c:	683a      	ldr	r2, [r7, #0]
    202e:	430a      	orrs	r2, r1
    2030:	619a      	str	r2, [r3, #24]
			break;
    2032:	e00f      	b.n	2054 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2034:	4b0a      	ldr	r3, [pc, #40]	; (2060 <system_apb_clock_set_mask+0x58>)
    2036:	4a0a      	ldr	r2, [pc, #40]	; (2060 <system_apb_clock_set_mask+0x58>)
    2038:	69d1      	ldr	r1, [r2, #28]
    203a:	683a      	ldr	r2, [r7, #0]
    203c:	430a      	orrs	r2, r1
    203e:	61da      	str	r2, [r3, #28]
			break;
    2040:	e008      	b.n	2054 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2042:	4b07      	ldr	r3, [pc, #28]	; (2060 <system_apb_clock_set_mask+0x58>)
    2044:	4a06      	ldr	r2, [pc, #24]	; (2060 <system_apb_clock_set_mask+0x58>)
    2046:	6a11      	ldr	r1, [r2, #32]
    2048:	683a      	ldr	r2, [r7, #0]
    204a:	430a      	orrs	r2, r1
    204c:	621a      	str	r2, [r3, #32]
			break;
    204e:	e001      	b.n	2054 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2050:	2317      	movs	r3, #23
    2052:	e000      	b.n	2056 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2054:	2300      	movs	r3, #0
}
    2056:	0018      	movs	r0, r3
    2058:	46bd      	mov	sp, r7
    205a:	b002      	add	sp, #8
    205c:	bd80      	pop	{r7, pc}
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	40000400 	.word	0x40000400

00002064 <system_is_debugger_present>:
{
    2064:	b580      	push	{r7, lr}
    2066:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2068:	4b05      	ldr	r3, [pc, #20]	; (2080 <system_is_debugger_present+0x1c>)
    206a:	789b      	ldrb	r3, [r3, #2]
    206c:	b2db      	uxtb	r3, r3
    206e:	001a      	movs	r2, r3
    2070:	2302      	movs	r3, #2
    2072:	4013      	ands	r3, r2
    2074:	1e5a      	subs	r2, r3, #1
    2076:	4193      	sbcs	r3, r2
    2078:	b2db      	uxtb	r3, r3
}
    207a:	0018      	movs	r0, r3
    207c:	46bd      	mov	sp, r7
    207e:	bd80      	pop	{r7, pc}
    2080:	41002000 	.word	0x41002000

00002084 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    2084:	b580      	push	{r7, lr}
    2086:	b084      	sub	sp, #16
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2092:	68fb      	ldr	r3, [r7, #12]
    2094:	7e1b      	ldrb	r3, [r3, #24]
    2096:	b2db      	uxtb	r3, r3
    2098:	001a      	movs	r2, r3
    209a:	2302      	movs	r3, #2
    209c:	4013      	ands	r3, r2
    209e:	1e5a      	subs	r2, r3, #1
    20a0:	4193      	sbcs	r3, r2
    20a2:	b2db      	uxtb	r3, r3
}
    20a4:	0018      	movs	r0, r3
    20a6:	46bd      	mov	sp, r7
    20a8:	b004      	add	sp, #16
    20aa:	bd80      	pop	{r7, pc}

000020ac <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b084      	sub	sp, #16
    20b0:	af00      	add	r7, sp, #0
    20b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	681b      	ldr	r3, [r3, #0]
    20b8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    20ba:	68fb      	ldr	r3, [r7, #12]
    20bc:	7e1b      	ldrb	r3, [r3, #24]
    20be:	b2db      	uxtb	r3, r3
    20c0:	001a      	movs	r2, r3
    20c2:	2301      	movs	r3, #1
    20c4:	4013      	ands	r3, r2
    20c6:	1e5a      	subs	r2, r3, #1
    20c8:	4193      	sbcs	r3, r2
    20ca:	b2db      	uxtb	r3, r3
}
    20cc:	0018      	movs	r0, r3
    20ce:	46bd      	mov	sp, r7
    20d0:	b004      	add	sp, #16
    20d2:	bd80      	pop	{r7, pc}

000020d4 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    20d4:	b580      	push	{r7, lr}
    20d6:	b084      	sub	sp, #16
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    20e2:	68fb      	ldr	r3, [r7, #12]
    20e4:	7e1b      	ldrb	r3, [r3, #24]
    20e6:	b2db      	uxtb	r3, r3
    20e8:	001a      	movs	r2, r3
    20ea:	2304      	movs	r3, #4
    20ec:	4013      	ands	r3, r2
    20ee:	1e5a      	subs	r2, r3, #1
    20f0:	4193      	sbcs	r3, r2
    20f2:	b2db      	uxtb	r3, r3
}
    20f4:	0018      	movs	r0, r3
    20f6:	46bd      	mov	sp, r7
    20f8:	b004      	add	sp, #16
    20fa:	bd80      	pop	{r7, pc}

000020fc <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    20fc:	b580      	push	{r7, lr}
    20fe:	b084      	sub	sp, #16
    2100:	af00      	add	r7, sp, #0
    2102:	6078      	str	r0, [r7, #4]
    2104:	000a      	movs	r2, r1
    2106:	1cbb      	adds	r3, r7, #2
    2108:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	681b      	ldr	r3, [r3, #0]
    210e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	0018      	movs	r0, r3
    2114:	4b0a      	ldr	r3, [pc, #40]	; (2140 <spi_write+0x44>)
    2116:	4798      	blx	r3
    2118:	0003      	movs	r3, r0
    211a:	001a      	movs	r2, r3
    211c:	2301      	movs	r3, #1
    211e:	4053      	eors	r3, r2
    2120:	b2db      	uxtb	r3, r3
    2122:	2b00      	cmp	r3, #0
    2124:	d001      	beq.n	212a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    2126:	2305      	movs	r3, #5
    2128:	e006      	b.n	2138 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    212a:	1cbb      	adds	r3, r7, #2
    212c:	881b      	ldrh	r3, [r3, #0]
    212e:	05db      	lsls	r3, r3, #23
    2130:	0dda      	lsrs	r2, r3, #23
    2132:	68fb      	ldr	r3, [r7, #12]
    2134:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    2136:	2300      	movs	r3, #0
}
    2138:	0018      	movs	r0, r3
    213a:	46bd      	mov	sp, r7
    213c:	b004      	add	sp, #16
    213e:	bd80      	pop	{r7, pc}
    2140:	000020ad 	.word	0x000020ad

00002144 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    2144:	b580      	push	{r7, lr}
    2146:	b084      	sub	sp, #16
    2148:	af00      	add	r7, sp, #0
    214a:	6078      	str	r0, [r7, #4]
    214c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	681b      	ldr	r3, [r3, #0]
    2152:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	0018      	movs	r0, r3
    2158:	4b1b      	ldr	r3, [pc, #108]	; (21c8 <spi_read+0x84>)
    215a:	4798      	blx	r3
    215c:	0003      	movs	r3, r0
    215e:	001a      	movs	r2, r3
    2160:	2301      	movs	r3, #1
    2162:	4053      	eors	r3, r2
    2164:	b2db      	uxtb	r3, r3
    2166:	2b00      	cmp	r3, #0
    2168:	d001      	beq.n	216e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    216a:	2310      	movs	r3, #16
    216c:	e027      	b.n	21be <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    216e:	230f      	movs	r3, #15
    2170:	18fb      	adds	r3, r7, r3
    2172:	2200      	movs	r2, #0
    2174:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2176:	68bb      	ldr	r3, [r7, #8]
    2178:	8b5b      	ldrh	r3, [r3, #26]
    217a:	b29b      	uxth	r3, r3
    217c:	001a      	movs	r2, r3
    217e:	2304      	movs	r3, #4
    2180:	4013      	ands	r3, r2
    2182:	d006      	beq.n	2192 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    2184:	230f      	movs	r3, #15
    2186:	18fb      	adds	r3, r7, r3
    2188:	221e      	movs	r2, #30
    218a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    218c:	68bb      	ldr	r3, [r7, #8]
    218e:	2204      	movs	r2, #4
    2190:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2192:	687b      	ldr	r3, [r7, #4]
    2194:	799b      	ldrb	r3, [r3, #6]
    2196:	2b01      	cmp	r3, #1
    2198:	d108      	bne.n	21ac <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    219a:	68bb      	ldr	r3, [r7, #8]
    219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    219e:	b29b      	uxth	r3, r3
    21a0:	05db      	lsls	r3, r3, #23
    21a2:	0ddb      	lsrs	r3, r3, #23
    21a4:	b29a      	uxth	r2, r3
    21a6:	683b      	ldr	r3, [r7, #0]
    21a8:	801a      	strh	r2, [r3, #0]
    21aa:	e005      	b.n	21b8 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    21ac:	68bb      	ldr	r3, [r7, #8]
    21ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21b0:	b2db      	uxtb	r3, r3
    21b2:	b29a      	uxth	r2, r3
    21b4:	683b      	ldr	r3, [r7, #0]
    21b6:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    21b8:	230f      	movs	r3, #15
    21ba:	18fb      	adds	r3, r7, r3
    21bc:	781b      	ldrb	r3, [r3, #0]
}
    21be:	0018      	movs	r0, r3
    21c0:	46bd      	mov	sp, r7
    21c2:	b004      	add	sp, #16
    21c4:	bd80      	pop	{r7, pc}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	000020d5 	.word	0x000020d5

000021cc <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b084      	sub	sp, #16
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	681b      	ldr	r3, [r3, #0]
    21d8:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    21da:	68fb      	ldr	r3, [r7, #12]
    21dc:	2202      	movs	r2, #2
    21de:	761a      	strb	r2, [r3, #24]
}
    21e0:	46c0      	nop			; (mov r8, r8)
    21e2:	46bd      	mov	sp, r7
    21e4:	b004      	add	sp, #16
    21e6:	bd80      	pop	{r7, pc}

000021e8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    21e8:	b590      	push	{r4, r7, lr}
    21ea:	b093      	sub	sp, #76	; 0x4c
    21ec:	af00      	add	r7, sp, #0
    21ee:	6078      	str	r0, [r7, #4]
    21f0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	681b      	ldr	r3, [r3, #0]
    21f6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	681b      	ldr	r3, [r3, #0]
    21fc:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    21fe:	231c      	movs	r3, #28
    2200:	18fb      	adds	r3, r7, r3
    2202:	0018      	movs	r0, r3
    2204:	4b85      	ldr	r3, [pc, #532]	; (241c <_spi_set_config+0x234>)
    2206:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2208:	231c      	movs	r3, #28
    220a:	18fb      	adds	r3, r7, r3
    220c:	2200      	movs	r2, #0
    220e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    2210:	683b      	ldr	r3, [r7, #0]
    2212:	781b      	ldrb	r3, [r3, #0]
    2214:	2b00      	cmp	r3, #0
    2216:	d103      	bne.n	2220 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2218:	231c      	movs	r3, #28
    221a:	18fb      	adds	r3, r7, r3
    221c:	2200      	movs	r2, #0
    221e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2220:	683b      	ldr	r3, [r7, #0]
    2222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    2224:	230c      	movs	r3, #12
    2226:	18fb      	adds	r3, r7, r3
    2228:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    222a:	683b      	ldr	r3, [r7, #0]
    222c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    222e:	230c      	movs	r3, #12
    2230:	18fb      	adds	r3, r7, r3
    2232:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    2234:	683b      	ldr	r3, [r7, #0]
    2236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    2238:	230c      	movs	r3, #12
    223a:	18fb      	adds	r3, r7, r3
    223c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    223e:	683b      	ldr	r3, [r7, #0]
    2240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    2242:	230c      	movs	r3, #12
    2244:	18fb      	adds	r3, r7, r3
    2246:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2248:	2347      	movs	r3, #71	; 0x47
    224a:	18fb      	adds	r3, r7, r3
    224c:	2200      	movs	r2, #0
    224e:	701a      	strb	r2, [r3, #0]
    2250:	e02c      	b.n	22ac <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2252:	2347      	movs	r3, #71	; 0x47
    2254:	18fb      	adds	r3, r7, r3
    2256:	781a      	ldrb	r2, [r3, #0]
    2258:	230c      	movs	r3, #12
    225a:	18fb      	adds	r3, r7, r3
    225c:	0092      	lsls	r2, r2, #2
    225e:	58d3      	ldr	r3, [r2, r3]
    2260:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2264:	2b00      	cmp	r3, #0
    2266:	d109      	bne.n	227c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2268:	2347      	movs	r3, #71	; 0x47
    226a:	18fb      	adds	r3, r7, r3
    226c:	781a      	ldrb	r2, [r3, #0]
    226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2270:	0011      	movs	r1, r2
    2272:	0018      	movs	r0, r3
    2274:	4b6a      	ldr	r3, [pc, #424]	; (2420 <_spi_set_config+0x238>)
    2276:	4798      	blx	r3
    2278:	0003      	movs	r3, r0
    227a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    227c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    227e:	3301      	adds	r3, #1
    2280:	d00d      	beq.n	229e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2284:	b2da      	uxtb	r2, r3
    2286:	231c      	movs	r3, #28
    2288:	18fb      	adds	r3, r7, r3
    228a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    228c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    228e:	0c1b      	lsrs	r3, r3, #16
    2290:	b2db      	uxtb	r3, r3
    2292:	221c      	movs	r2, #28
    2294:	18ba      	adds	r2, r7, r2
    2296:	0011      	movs	r1, r2
    2298:	0018      	movs	r0, r3
    229a:	4b62      	ldr	r3, [pc, #392]	; (2424 <_spi_set_config+0x23c>)
    229c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    229e:	2347      	movs	r3, #71	; 0x47
    22a0:	18fb      	adds	r3, r7, r3
    22a2:	781a      	ldrb	r2, [r3, #0]
    22a4:	2347      	movs	r3, #71	; 0x47
    22a6:	18fb      	adds	r3, r7, r3
    22a8:	3201      	adds	r2, #1
    22aa:	701a      	strb	r2, [r3, #0]
    22ac:	2347      	movs	r3, #71	; 0x47
    22ae:	18fb      	adds	r3, r7, r3
    22b0:	781b      	ldrb	r3, [r3, #0]
    22b2:	2b03      	cmp	r3, #3
    22b4:	d9cd      	bls.n	2252 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    22b6:	683b      	ldr	r3, [r7, #0]
    22b8:	781a      	ldrb	r2, [r3, #0]
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    22be:	683b      	ldr	r3, [r7, #0]
    22c0:	7c1a      	ldrb	r2, [r3, #16]
    22c2:	687b      	ldr	r3, [r7, #4]
    22c4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    22c6:	683b      	ldr	r3, [r7, #0]
    22c8:	7c9a      	ldrb	r2, [r3, #18]
    22ca:	687b      	ldr	r3, [r7, #4]
    22cc:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    22ce:	683b      	ldr	r3, [r7, #0]
    22d0:	7d1a      	ldrb	r2, [r3, #20]
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    22d6:	230a      	movs	r3, #10
    22d8:	18fb      	adds	r3, r7, r3
    22da:	2200      	movs	r2, #0
    22dc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    22de:	2300      	movs	r3, #0
    22e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    22e2:	2300      	movs	r3, #0
    22e4:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    22e6:	683b      	ldr	r3, [r7, #0]
    22e8:	781b      	ldrb	r3, [r3, #0]
    22ea:	2b01      	cmp	r3, #1
    22ec:	d129      	bne.n	2342 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	681b      	ldr	r3, [r3, #0]
    22f2:	0018      	movs	r0, r3
    22f4:	4b4c      	ldr	r3, [pc, #304]	; (2428 <_spi_set_config+0x240>)
    22f6:	4798      	blx	r3
    22f8:	0003      	movs	r3, r0
    22fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    22fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    22fe:	3314      	adds	r3, #20
    2300:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2302:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2304:	b2db      	uxtb	r3, r3
    2306:	0018      	movs	r0, r3
    2308:	4b48      	ldr	r3, [pc, #288]	; (242c <_spi_set_config+0x244>)
    230a:	4798      	blx	r3
    230c:	0003      	movs	r3, r0
    230e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    2310:	683b      	ldr	r3, [r7, #0]
    2312:	699b      	ldr	r3, [r3, #24]
    2314:	2223      	movs	r2, #35	; 0x23
    2316:	18bc      	adds	r4, r7, r2
    2318:	220a      	movs	r2, #10
    231a:	18ba      	adds	r2, r7, r2
    231c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    231e:	0018      	movs	r0, r3
    2320:	4b43      	ldr	r3, [pc, #268]	; (2430 <_spi_set_config+0x248>)
    2322:	4798      	blx	r3
    2324:	0003      	movs	r3, r0
    2326:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    2328:	2323      	movs	r3, #35	; 0x23
    232a:	18fb      	adds	r3, r7, r3
    232c:	781b      	ldrb	r3, [r3, #0]
    232e:	2b00      	cmp	r3, #0
    2330:	d001      	beq.n	2336 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2332:	2317      	movs	r3, #23
    2334:	e06d      	b.n	2412 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    2336:	230a      	movs	r3, #10
    2338:	18fb      	adds	r3, r7, r3
    233a:	881b      	ldrh	r3, [r3, #0]
    233c:	b2da      	uxtb	r2, r3
    233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2340:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2342:	683b      	ldr	r3, [r7, #0]
    2344:	781b      	ldrb	r3, [r3, #0]
    2346:	2b00      	cmp	r3, #0
    2348:	d11a      	bne.n	2380 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    234a:	683b      	ldr	r3, [r7, #0]
    234c:	699b      	ldr	r3, [r3, #24]
    234e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    2350:	683b      	ldr	r3, [r7, #0]
    2352:	8b9b      	ldrh	r3, [r3, #28]
    2354:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    235a:	683a      	ldr	r2, [r7, #0]
    235c:	7f92      	ldrb	r2, [r2, #30]
    235e:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2360:	683a      	ldr	r2, [r7, #0]
    2362:	7fd2      	ldrb	r2, [r2, #31]
    2364:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2366:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    2368:	431a      	orrs	r2, r3
    236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    236c:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    236e:	683b      	ldr	r3, [r7, #0]
    2370:	2220      	movs	r2, #32
    2372:	5c9b      	ldrb	r3, [r3, r2]
    2374:	2b00      	cmp	r3, #0
    2376:	d003      	beq.n	2380 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    2378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    237a:	2240      	movs	r2, #64	; 0x40
    237c:	4313      	orrs	r3, r2
    237e:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    2380:	683b      	ldr	r3, [r7, #0]
    2382:	685b      	ldr	r3, [r3, #4]
    2384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2386:	4313      	orrs	r3, r2
    2388:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    238a:	683b      	ldr	r3, [r7, #0]
    238c:	689b      	ldr	r3, [r3, #8]
    238e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2390:	4313      	orrs	r3, r2
    2392:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2394:	683b      	ldr	r3, [r7, #0]
    2396:	68db      	ldr	r3, [r3, #12]
    2398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    239a:	4313      	orrs	r3, r2
    239c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    239e:	683b      	ldr	r3, [r7, #0]
    23a0:	7c1b      	ldrb	r3, [r3, #16]
    23a2:	001a      	movs	r2, r3
    23a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23a6:	4313      	orrs	r3, r2
    23a8:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    23aa:	683b      	ldr	r3, [r7, #0]
    23ac:	7c5b      	ldrb	r3, [r3, #17]
    23ae:	2b00      	cmp	r3, #0
    23b0:	d103      	bne.n	23ba <_spi_set_config+0x1d2>
    23b2:	4b20      	ldr	r3, [pc, #128]	; (2434 <_spi_set_config+0x24c>)
    23b4:	4798      	blx	r3
    23b6:	1e03      	subs	r3, r0, #0
    23b8:	d003      	beq.n	23c2 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    23ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23bc:	2280      	movs	r2, #128	; 0x80
    23be:	4313      	orrs	r3, r2
    23c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    23c2:	683b      	ldr	r3, [r7, #0]
    23c4:	7c9b      	ldrb	r3, [r3, #18]
    23c6:	2b00      	cmp	r3, #0
    23c8:	d004      	beq.n	23d4 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    23ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23cc:	2280      	movs	r2, #128	; 0x80
    23ce:	0292      	lsls	r2, r2, #10
    23d0:	4313      	orrs	r3, r2
    23d2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    23d4:	683b      	ldr	r3, [r7, #0]
    23d6:	7cdb      	ldrb	r3, [r3, #19]
    23d8:	2b00      	cmp	r3, #0
    23da:	d004      	beq.n	23e6 <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    23dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23de:	2280      	movs	r2, #128	; 0x80
    23e0:	0092      	lsls	r2, r2, #2
    23e2:	4313      	orrs	r3, r2
    23e4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    23e6:	683b      	ldr	r3, [r7, #0]
    23e8:	7d1b      	ldrb	r3, [r3, #20]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d004      	beq.n	23f8 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    23ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23f0:	2280      	movs	r2, #128	; 0x80
    23f2:	0192      	lsls	r2, r2, #6
    23f4:	4313      	orrs	r3, r2
    23f6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    23f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23fa:	681a      	ldr	r2, [r3, #0]
    23fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23fe:	431a      	orrs	r2, r3
    2400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2402:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    2404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2406:	685a      	ldr	r2, [r3, #4]
    2408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    240a:	431a      	orrs	r2, r3
    240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    240e:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2410:	2300      	movs	r3, #0
}
    2412:	0018      	movs	r0, r3
    2414:	46bd      	mov	sp, r7
    2416:	b013      	add	sp, #76	; 0x4c
    2418:	bd90      	pop	{r4, r7, pc}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	00001ef1 	.word	0x00001ef1
    2420:	00001051 	.word	0x00001051
    2424:	00003e99 	.word	0x00003e99
    2428:	0000120d 	.word	0x0000120d
    242c:	00003cd1 	.word	0x00003cd1
    2430:	00000d87 	.word	0x00000d87
    2434:	00002065 	.word	0x00002065

00002438 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2438:	b590      	push	{r4, r7, lr}
    243a:	b08b      	sub	sp, #44	; 0x2c
    243c:	af00      	add	r7, sp, #0
    243e:	60f8      	str	r0, [r7, #12]
    2440:	60b9      	str	r1, [r7, #8]
    2442:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2444:	68fb      	ldr	r3, [r7, #12]
    2446:	68ba      	ldr	r2, [r7, #8]
    2448:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    244a:	68fb      	ldr	r3, [r7, #12]
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2450:	6a3b      	ldr	r3, [r7, #32]
    2452:	681b      	ldr	r3, [r3, #0]
    2454:	2202      	movs	r2, #2
    2456:	4013      	ands	r3, r2
    2458:	d001      	beq.n	245e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    245a:	231c      	movs	r3, #28
    245c:	e0a6      	b.n	25ac <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    245e:	6a3b      	ldr	r3, [r7, #32]
    2460:	681b      	ldr	r3, [r3, #0]
    2462:	2201      	movs	r2, #1
    2464:	4013      	ands	r3, r2
    2466:	d001      	beq.n	246c <spi_init+0x34>
		return STATUS_BUSY;
    2468:	2305      	movs	r3, #5
    246a:	e09f      	b.n	25ac <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    246c:	68fb      	ldr	r3, [r7, #12]
    246e:	681b      	ldr	r3, [r3, #0]
    2470:	0018      	movs	r0, r3
    2472:	4b50      	ldr	r3, [pc, #320]	; (25b4 <spi_init+0x17c>)
    2474:	4798      	blx	r3
    2476:	0003      	movs	r3, r0
    2478:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    247a:	69fb      	ldr	r3, [r7, #28]
    247c:	3302      	adds	r3, #2
    247e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2480:	69fb      	ldr	r3, [r7, #28]
    2482:	3314      	adds	r3, #20
    2484:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2486:	2201      	movs	r2, #1
    2488:	69bb      	ldr	r3, [r7, #24]
    248a:	409a      	lsls	r2, r3
    248c:	0013      	movs	r3, r2
    248e:	0019      	movs	r1, r3
    2490:	2002      	movs	r0, #2
    2492:	4b49      	ldr	r3, [pc, #292]	; (25b8 <spi_init+0x180>)
    2494:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2496:	2310      	movs	r3, #16
    2498:	18fb      	adds	r3, r7, r3
    249a:	0018      	movs	r0, r3
    249c:	4b47      	ldr	r3, [pc, #284]	; (25bc <spi_init+0x184>)
    249e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    24a0:	687b      	ldr	r3, [r7, #4]
    24a2:	2224      	movs	r2, #36	; 0x24
    24a4:	5c9a      	ldrb	r2, [r3, r2]
    24a6:	2310      	movs	r3, #16
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    24ac:	697b      	ldr	r3, [r7, #20]
    24ae:	b2db      	uxtb	r3, r3
    24b0:	2210      	movs	r2, #16
    24b2:	18ba      	adds	r2, r7, r2
    24b4:	0011      	movs	r1, r2
    24b6:	0018      	movs	r0, r3
    24b8:	4b41      	ldr	r3, [pc, #260]	; (25c0 <spi_init+0x188>)
    24ba:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    24bc:	697b      	ldr	r3, [r7, #20]
    24be:	b2db      	uxtb	r3, r3
    24c0:	0018      	movs	r0, r3
    24c2:	4b40      	ldr	r3, [pc, #256]	; (25c4 <spi_init+0x18c>)
    24c4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    24c6:	687b      	ldr	r3, [r7, #4]
    24c8:	2224      	movs	r2, #36	; 0x24
    24ca:	5c9b      	ldrb	r3, [r3, r2]
    24cc:	2100      	movs	r1, #0
    24ce:	0018      	movs	r0, r3
    24d0:	4b3d      	ldr	r3, [pc, #244]	; (25c8 <spi_init+0x190>)
    24d2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    24d4:	687b      	ldr	r3, [r7, #4]
    24d6:	781b      	ldrb	r3, [r3, #0]
    24d8:	2b01      	cmp	r3, #1
    24da:	d105      	bne.n	24e8 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    24dc:	6a3b      	ldr	r3, [r7, #32]
    24de:	681b      	ldr	r3, [r3, #0]
    24e0:	220c      	movs	r2, #12
    24e2:	431a      	orrs	r2, r3
    24e4:	6a3b      	ldr	r3, [r7, #32]
    24e6:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	2b00      	cmp	r3, #0
    24ee:	d105      	bne.n	24fc <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    24f0:	6a3b      	ldr	r3, [r7, #32]
    24f2:	681b      	ldr	r3, [r3, #0]
    24f4:	2208      	movs	r2, #8
    24f6:	431a      	orrs	r2, r3
    24f8:	6a3b      	ldr	r3, [r7, #32]
    24fa:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    24fc:	2327      	movs	r3, #39	; 0x27
    24fe:	18fb      	adds	r3, r7, r3
    2500:	2200      	movs	r2, #0
    2502:	701a      	strb	r2, [r3, #0]
    2504:	e010      	b.n	2528 <spi_init+0xf0>
		module->callback[i]        = NULL;
    2506:	2327      	movs	r3, #39	; 0x27
    2508:	18fb      	adds	r3, r7, r3
    250a:	781b      	ldrb	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	3302      	adds	r3, #2
    2510:	009b      	lsls	r3, r3, #2
    2512:	18d3      	adds	r3, r2, r3
    2514:	3304      	adds	r3, #4
    2516:	2200      	movs	r2, #0
    2518:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    251a:	2327      	movs	r3, #39	; 0x27
    251c:	18fb      	adds	r3, r7, r3
    251e:	781a      	ldrb	r2, [r3, #0]
    2520:	2327      	movs	r3, #39	; 0x27
    2522:	18fb      	adds	r3, r7, r3
    2524:	3201      	adds	r2, #1
    2526:	701a      	strb	r2, [r3, #0]
    2528:	2327      	movs	r3, #39	; 0x27
    252a:	18fb      	adds	r3, r7, r3
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	2b06      	cmp	r3, #6
    2530:	d9e9      	bls.n	2506 <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    2532:	68fb      	ldr	r3, [r7, #12]
    2534:	2200      	movs	r2, #0
    2536:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2538:	68fb      	ldr	r3, [r7, #12]
    253a:	2200      	movs	r2, #0
    253c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    253e:	68fb      	ldr	r3, [r7, #12]
    2540:	2200      	movs	r2, #0
    2542:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    2544:	68fb      	ldr	r3, [r7, #12]
    2546:	2200      	movs	r2, #0
    2548:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    254a:	68fb      	ldr	r3, [r7, #12]
    254c:	2236      	movs	r2, #54	; 0x36
    254e:	2100      	movs	r1, #0
    2550:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    2552:	68fb      	ldr	r3, [r7, #12]
    2554:	2237      	movs	r2, #55	; 0x37
    2556:	2100      	movs	r1, #0
    2558:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    255a:	68fb      	ldr	r3, [r7, #12]
    255c:	2238      	movs	r2, #56	; 0x38
    255e:	2100      	movs	r1, #0
    2560:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    2562:	68fb      	ldr	r3, [r7, #12]
    2564:	2203      	movs	r2, #3
    2566:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    2568:	68fb      	ldr	r3, [r7, #12]
    256a:	2200      	movs	r2, #0
    256c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	681b      	ldr	r3, [r3, #0]
    2572:	2213      	movs	r2, #19
    2574:	18bc      	adds	r4, r7, r2
    2576:	0018      	movs	r0, r3
    2578:	4b0e      	ldr	r3, [pc, #56]	; (25b4 <spi_init+0x17c>)
    257a:	4798      	blx	r3
    257c:	0003      	movs	r3, r0
    257e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    2580:	4a12      	ldr	r2, [pc, #72]	; (25cc <spi_init+0x194>)
    2582:	2313      	movs	r3, #19
    2584:	18fb      	adds	r3, r7, r3
    2586:	781b      	ldrb	r3, [r3, #0]
    2588:	0011      	movs	r1, r2
    258a:	0018      	movs	r0, r3
    258c:	4b10      	ldr	r3, [pc, #64]	; (25d0 <spi_init+0x198>)
    258e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2590:	2313      	movs	r3, #19
    2592:	18fb      	adds	r3, r7, r3
    2594:	781a      	ldrb	r2, [r3, #0]
    2596:	4b0f      	ldr	r3, [pc, #60]	; (25d4 <spi_init+0x19c>)
    2598:	0092      	lsls	r2, r2, #2
    259a:	68f9      	ldr	r1, [r7, #12]
    259c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    259e:	687a      	ldr	r2, [r7, #4]
    25a0:	68fb      	ldr	r3, [r7, #12]
    25a2:	0011      	movs	r1, r2
    25a4:	0018      	movs	r0, r3
    25a6:	4b0c      	ldr	r3, [pc, #48]	; (25d8 <spi_init+0x1a0>)
    25a8:	4798      	blx	r3
    25aa:	0003      	movs	r3, r0
}
    25ac:	0018      	movs	r0, r3
    25ae:	46bd      	mov	sp, r7
    25b0:	b00b      	add	sp, #44	; 0x2c
    25b2:	bd90      	pop	{r4, r7, pc}
    25b4:	0000120d 	.word	0x0000120d
    25b8:	00002009 	.word	0x00002009
    25bc:	00001ff1 	.word	0x00001ff1
    25c0:	00003bad 	.word	0x00003bad
    25c4:	00003bf1 	.word	0x00003bf1
    25c8:	00000fc5 	.word	0x00000fc5
    25cc:	00002f3d 	.word	0x00002f3d
    25d0:	0000325d 	.word	0x0000325d
    25d4:	20000178 	.word	0x20000178
    25d8:	000021e9 	.word	0x000021e9

000025dc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    25dc:	b580      	push	{r7, lr}
    25de:	b086      	sub	sp, #24
    25e0:	af00      	add	r7, sp, #0
    25e2:	60f8      	str	r0, [r7, #12]
    25e4:	60b9      	str	r1, [r7, #8]
    25e6:	1dfb      	adds	r3, r7, #7
    25e8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    25ea:	68fb      	ldr	r3, [r7, #12]
    25ec:	795b      	ldrb	r3, [r3, #5]
    25ee:	2b01      	cmp	r3, #1
    25f0:	d001      	beq.n	25f6 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    25f2:	2315      	movs	r3, #21
    25f4:	e05c      	b.n	26b0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    25f6:	68fb      	ldr	r3, [r7, #12]
    25f8:	7a1b      	ldrb	r3, [r3, #8]
    25fa:	2201      	movs	r2, #1
    25fc:	4053      	eors	r3, r2
    25fe:	b2db      	uxtb	r3, r3
    2600:	2b00      	cmp	r3, #0
    2602:	d054      	beq.n	26ae <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    2604:	1dfb      	adds	r3, r7, #7
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	2b00      	cmp	r3, #0
    260a:	d04a      	beq.n	26a2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    260c:	68bb      	ldr	r3, [r7, #8]
    260e:	785b      	ldrb	r3, [r3, #1]
    2610:	2b00      	cmp	r3, #0
    2612:	d03f      	beq.n	2694 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    2614:	68fb      	ldr	r3, [r7, #12]
    2616:	0018      	movs	r0, r3
    2618:	4b27      	ldr	r3, [pc, #156]	; (26b8 <spi_select_slave+0xdc>)
    261a:	4798      	blx	r3
    261c:	0003      	movs	r3, r0
    261e:	001a      	movs	r2, r3
    2620:	2301      	movs	r3, #1
    2622:	4053      	eors	r3, r2
    2624:	b2db      	uxtb	r3, r3
    2626:	2b00      	cmp	r3, #0
    2628:	d007      	beq.n	263a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    262a:	68bb      	ldr	r3, [r7, #8]
    262c:	781b      	ldrb	r3, [r3, #0]
    262e:	2101      	movs	r1, #1
    2630:	0018      	movs	r0, r3
    2632:	4b22      	ldr	r3, [pc, #136]	; (26bc <spi_select_slave+0xe0>)
    2634:	4798      	blx	r3
					return STATUS_BUSY;
    2636:	2305      	movs	r3, #5
    2638:	e03a      	b.n	26b0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    263a:	68bb      	ldr	r3, [r7, #8]
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	2100      	movs	r1, #0
    2640:	0018      	movs	r0, r3
    2642:	4b1e      	ldr	r3, [pc, #120]	; (26bc <spi_select_slave+0xe0>)
    2644:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    2646:	68bb      	ldr	r3, [r7, #8]
    2648:	789b      	ldrb	r3, [r3, #2]
    264a:	b29a      	uxth	r2, r3
    264c:	68fb      	ldr	r3, [r7, #12]
    264e:	0011      	movs	r1, r2
    2650:	0018      	movs	r0, r3
    2652:	4b1b      	ldr	r3, [pc, #108]	; (26c0 <spi_select_slave+0xe4>)
    2654:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    2656:	68fb      	ldr	r3, [r7, #12]
    2658:	79db      	ldrb	r3, [r3, #7]
    265a:	2201      	movs	r2, #1
    265c:	4053      	eors	r3, r2
    265e:	b2db      	uxtb	r3, r3
    2660:	2b00      	cmp	r3, #0
    2662:	d024      	beq.n	26ae <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    2664:	46c0      	nop			; (mov r8, r8)
    2666:	68fb      	ldr	r3, [r7, #12]
    2668:	0018      	movs	r0, r3
    266a:	4b16      	ldr	r3, [pc, #88]	; (26c4 <spi_select_slave+0xe8>)
    266c:	4798      	blx	r3
    266e:	0003      	movs	r3, r0
    2670:	001a      	movs	r2, r3
    2672:	2301      	movs	r3, #1
    2674:	4053      	eors	r3, r2
    2676:	b2db      	uxtb	r3, r3
    2678:	2b00      	cmp	r3, #0
    267a:	d1f4      	bne.n	2666 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    267c:	2316      	movs	r3, #22
    267e:	18fb      	adds	r3, r7, r3
    2680:	2200      	movs	r2, #0
    2682:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    2684:	2316      	movs	r3, #22
    2686:	18fa      	adds	r2, r7, r3
    2688:	68fb      	ldr	r3, [r7, #12]
    268a:	0011      	movs	r1, r2
    268c:	0018      	movs	r0, r3
    268e:	4b0e      	ldr	r3, [pc, #56]	; (26c8 <spi_select_slave+0xec>)
    2690:	4798      	blx	r3
    2692:	e00c      	b.n	26ae <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2694:	68bb      	ldr	r3, [r7, #8]
    2696:	781b      	ldrb	r3, [r3, #0]
    2698:	2100      	movs	r1, #0
    269a:	0018      	movs	r0, r3
    269c:	4b07      	ldr	r3, [pc, #28]	; (26bc <spi_select_slave+0xe0>)
    269e:	4798      	blx	r3
    26a0:	e005      	b.n	26ae <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    26a2:	68bb      	ldr	r3, [r7, #8]
    26a4:	781b      	ldrb	r3, [r3, #0]
    26a6:	2101      	movs	r1, #1
    26a8:	0018      	movs	r0, r3
    26aa:	4b04      	ldr	r3, [pc, #16]	; (26bc <spi_select_slave+0xe0>)
    26ac:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    26ae:	2300      	movs	r3, #0
}
    26b0:	0018      	movs	r0, r3
    26b2:	46bd      	mov	sp, r7
    26b4:	b006      	add	sp, #24
    26b6:	bd80      	pop	{r7, pc}
    26b8:	000020ad 	.word	0x000020ad
    26bc:	00001f9d 	.word	0x00001f9d
    26c0:	000020fd 	.word	0x000020fd
    26c4:	000020d5 	.word	0x000020d5
    26c8:	00002145 	.word	0x00002145

000026cc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	b08a      	sub	sp, #40	; 0x28
    26d0:	af00      	add	r7, sp, #0
    26d2:	60f8      	str	r0, [r7, #12]
    26d4:	60b9      	str	r1, [r7, #8]
    26d6:	1dbb      	adds	r3, r7, #6
    26d8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    26da:	68fb      	ldr	r3, [r7, #12]
    26dc:	2238      	movs	r2, #56	; 0x38
    26de:	5c9b      	ldrb	r3, [r3, r2]
    26e0:	b2db      	uxtb	r3, r3
    26e2:	2b05      	cmp	r3, #5
    26e4:	d101      	bne.n	26ea <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    26e6:	2305      	movs	r3, #5
    26e8:	e170      	b.n	29cc <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
    26ea:	1dbb      	adds	r3, r7, #6
    26ec:	881b      	ldrh	r3, [r3, #0]
    26ee:	2b00      	cmp	r3, #0
    26f0:	d101      	bne.n	26f6 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    26f2:	2317      	movs	r3, #23
    26f4:	e16a      	b.n	29cc <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    26f6:	68fb      	ldr	r3, [r7, #12]
    26f8:	795b      	ldrb	r3, [r3, #5]
    26fa:	2b00      	cmp	r3, #0
    26fc:	d109      	bne.n	2712 <spi_write_buffer_wait+0x46>
    26fe:	68fb      	ldr	r3, [r7, #12]
    2700:	0018      	movs	r0, r3
    2702:	4bb4      	ldr	r3, [pc, #720]	; (29d4 <spi_write_buffer_wait+0x308>)
    2704:	4798      	blx	r3
    2706:	1e03      	subs	r3, r0, #0
    2708:	d003      	beq.n	2712 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    270a:	68fb      	ldr	r3, [r7, #12]
    270c:	0018      	movs	r0, r3
    270e:	4bb2      	ldr	r3, [pc, #712]	; (29d8 <spi_write_buffer_wait+0x30c>)
    2710:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    2712:	2326      	movs	r3, #38	; 0x26
    2714:	18fb      	adds	r3, r7, r3
    2716:	2200      	movs	r2, #0
    2718:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    271a:	2324      	movs	r3, #36	; 0x24
    271c:	18fb      	adds	r3, r7, r3
    271e:	1dba      	adds	r2, r7, #6
    2720:	8812      	ldrh	r2, [r2, #0]
    2722:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    2724:	e0fe      	b.n	2924 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2726:	68fb      	ldr	r3, [r7, #12]
    2728:	795b      	ldrb	r3, [r3, #5]
    272a:	2b00      	cmp	r3, #0
    272c:	d12a      	bne.n	2784 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    272e:	2300      	movs	r3, #0
    2730:	623b      	str	r3, [r7, #32]
    2732:	e008      	b.n	2746 <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    2734:	68fb      	ldr	r3, [r7, #12]
    2736:	0018      	movs	r0, r3
    2738:	4ba8      	ldr	r3, [pc, #672]	; (29dc <spi_write_buffer_wait+0x310>)
    273a:	4798      	blx	r3
    273c:	1e03      	subs	r3, r0, #0
    273e:	d107      	bne.n	2750 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2740:	6a3b      	ldr	r3, [r7, #32]
    2742:	3301      	adds	r3, #1
    2744:	623b      	str	r3, [r7, #32]
    2746:	6a3b      	ldr	r3, [r7, #32]
    2748:	4aa5      	ldr	r2, [pc, #660]	; (29e0 <spi_write_buffer_wait+0x314>)
    274a:	4293      	cmp	r3, r2
    274c:	d9f2      	bls.n	2734 <spi_write_buffer_wait+0x68>
    274e:	e000      	b.n	2752 <spi_write_buffer_wait+0x86>
					break;
    2750:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2752:	68fb      	ldr	r3, [r7, #12]
    2754:	0018      	movs	r0, r3
    2756:	4b9f      	ldr	r3, [pc, #636]	; (29d4 <spi_write_buffer_wait+0x308>)
    2758:	4798      	blx	r3
    275a:	1e03      	subs	r3, r0, #0
    275c:	d005      	beq.n	276a <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    275e:	68fb      	ldr	r3, [r7, #12]
    2760:	0018      	movs	r0, r3
    2762:	4b9d      	ldr	r3, [pc, #628]	; (29d8 <spi_write_buffer_wait+0x30c>)
    2764:	4798      	blx	r3
				return STATUS_ABORTED;
    2766:	2304      	movs	r3, #4
    2768:	e130      	b.n	29cc <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
    276a:	68fb      	ldr	r3, [r7, #12]
    276c:	0018      	movs	r0, r3
    276e:	4b9b      	ldr	r3, [pc, #620]	; (29dc <spi_write_buffer_wait+0x310>)
    2770:	4798      	blx	r3
    2772:	0003      	movs	r3, r0
    2774:	001a      	movs	r2, r3
    2776:	2301      	movs	r3, #1
    2778:	4053      	eors	r3, r2
    277a:	b2db      	uxtb	r3, r3
    277c:	2b00      	cmp	r3, #0
    277e:	d001      	beq.n	2784 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2780:	2312      	movs	r3, #18
    2782:	e123      	b.n	29cc <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    2784:	46c0      	nop			; (mov r8, r8)
    2786:	68fb      	ldr	r3, [r7, #12]
    2788:	0018      	movs	r0, r3
    278a:	4b94      	ldr	r3, [pc, #592]	; (29dc <spi_write_buffer_wait+0x310>)
    278c:	4798      	blx	r3
    278e:	0003      	movs	r3, r0
    2790:	001a      	movs	r2, r3
    2792:	2301      	movs	r3, #1
    2794:	4053      	eors	r3, r2
    2796:	b2db      	uxtb	r3, r3
    2798:	2b00      	cmp	r3, #0
    279a:	d1f4      	bne.n	2786 <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    279c:	2326      	movs	r3, #38	; 0x26
    279e:	18fb      	adds	r3, r7, r3
    27a0:	881b      	ldrh	r3, [r3, #0]
    27a2:	2226      	movs	r2, #38	; 0x26
    27a4:	18ba      	adds	r2, r7, r2
    27a6:	1c59      	adds	r1, r3, #1
    27a8:	8011      	strh	r1, [r2, #0]
    27aa:	001a      	movs	r2, r3
    27ac:	68bb      	ldr	r3, [r7, #8]
    27ae:	189b      	adds	r3, r3, r2
    27b0:	781a      	ldrb	r2, [r3, #0]
    27b2:	231e      	movs	r3, #30
    27b4:	18fb      	adds	r3, r7, r3
    27b6:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    27b8:	68fb      	ldr	r3, [r7, #12]
    27ba:	799b      	ldrb	r3, [r3, #6]
    27bc:	2b01      	cmp	r3, #1
    27be:	d115      	bne.n	27ec <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    27c0:	2326      	movs	r3, #38	; 0x26
    27c2:	18fb      	adds	r3, r7, r3
    27c4:	881b      	ldrh	r3, [r3, #0]
    27c6:	2226      	movs	r2, #38	; 0x26
    27c8:	18ba      	adds	r2, r7, r2
    27ca:	1c59      	adds	r1, r3, #1
    27cc:	8011      	strh	r1, [r2, #0]
    27ce:	001a      	movs	r2, r3
    27d0:	68bb      	ldr	r3, [r7, #8]
    27d2:	189b      	adds	r3, r3, r2
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	021b      	lsls	r3, r3, #8
    27d8:	b21a      	sxth	r2, r3
    27da:	231e      	movs	r3, #30
    27dc:	18fb      	adds	r3, r7, r3
    27de:	2100      	movs	r1, #0
    27e0:	5e5b      	ldrsh	r3, [r3, r1]
    27e2:	4313      	orrs	r3, r2
    27e4:	b21a      	sxth	r2, r3
    27e6:	231e      	movs	r3, #30
    27e8:	18fb      	adds	r3, r7, r3
    27ea:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    27ec:	231e      	movs	r3, #30
    27ee:	18fb      	adds	r3, r7, r3
    27f0:	881a      	ldrh	r2, [r3, #0]
    27f2:	68fb      	ldr	r3, [r7, #12]
    27f4:	0011      	movs	r1, r2
    27f6:	0018      	movs	r0, r3
    27f8:	4b7a      	ldr	r3, [pc, #488]	; (29e4 <spi_write_buffer_wait+0x318>)
    27fa:	4798      	blx	r3

		if (module->receiver_enabled) {
    27fc:	68fb      	ldr	r3, [r7, #12]
    27fe:	79db      	ldrb	r3, [r3, #7]
    2800:	2224      	movs	r2, #36	; 0x24
    2802:	18ba      	adds	r2, r7, r2
    2804:	2124      	movs	r1, #36	; 0x24
    2806:	1879      	adds	r1, r7, r1
    2808:	8809      	ldrh	r1, [r1, #0]
    280a:	8011      	strh	r1, [r2, #0]
    280c:	2b00      	cmp	r3, #0
    280e:	d100      	bne.n	2812 <spi_write_buffer_wait+0x146>
    2810:	e088      	b.n	2924 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    2812:	68fb      	ldr	r3, [r7, #12]
    2814:	795b      	ldrb	r3, [r3, #5]
    2816:	2b00      	cmp	r3, #0
    2818:	d000      	beq.n	281c <spi_write_buffer_wait+0x150>
    281a:	e069      	b.n	28f0 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    281c:	2300      	movs	r3, #0
    281e:	61bb      	str	r3, [r7, #24]
    2820:	e047      	b.n	28b2 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
    2822:	1dbb      	adds	r3, r7, #6
    2824:	881b      	ldrh	r3, [r3, #0]
    2826:	2b00      	cmp	r3, #0
    2828:	d03a      	beq.n	28a0 <spi_write_buffer_wait+0x1d4>
    282a:	68fb      	ldr	r3, [r7, #12]
    282c:	0018      	movs	r0, r3
    282e:	4b6b      	ldr	r3, [pc, #428]	; (29dc <spi_write_buffer_wait+0x310>)
    2830:	4798      	blx	r3
    2832:	1e03      	subs	r3, r0, #0
    2834:	d034      	beq.n	28a0 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
    2836:	2326      	movs	r3, #38	; 0x26
    2838:	18fb      	adds	r3, r7, r3
    283a:	881b      	ldrh	r3, [r3, #0]
    283c:	2226      	movs	r2, #38	; 0x26
    283e:	18ba      	adds	r2, r7, r2
    2840:	1c59      	adds	r1, r3, #1
    2842:	8011      	strh	r1, [r2, #0]
    2844:	001a      	movs	r2, r3
    2846:	68bb      	ldr	r3, [r7, #8]
    2848:	189b      	adds	r3, r3, r2
    284a:	781a      	ldrb	r2, [r3, #0]
    284c:	231e      	movs	r3, #30
    284e:	18fb      	adds	r3, r7, r3
    2850:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2852:	68fb      	ldr	r3, [r7, #12]
    2854:	799b      	ldrb	r3, [r3, #6]
    2856:	2b01      	cmp	r3, #1
    2858:	d115      	bne.n	2886 <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
    285a:	2326      	movs	r3, #38	; 0x26
    285c:	18fb      	adds	r3, r7, r3
    285e:	881b      	ldrh	r3, [r3, #0]
    2860:	2226      	movs	r2, #38	; 0x26
    2862:	18ba      	adds	r2, r7, r2
    2864:	1c59      	adds	r1, r3, #1
    2866:	8011      	strh	r1, [r2, #0]
    2868:	001a      	movs	r2, r3
    286a:	68bb      	ldr	r3, [r7, #8]
    286c:	189b      	adds	r3, r3, r2
    286e:	781b      	ldrb	r3, [r3, #0]
    2870:	021b      	lsls	r3, r3, #8
    2872:	b21a      	sxth	r2, r3
    2874:	231e      	movs	r3, #30
    2876:	18fb      	adds	r3, r7, r3
    2878:	2100      	movs	r1, #0
    287a:	5e5b      	ldrsh	r3, [r3, r1]
    287c:	4313      	orrs	r3, r2
    287e:	b21a      	sxth	r2, r3
    2880:	231e      	movs	r3, #30
    2882:	18fb      	adds	r3, r7, r3
    2884:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    2886:	231e      	movs	r3, #30
    2888:	18fb      	adds	r3, r7, r3
    288a:	881a      	ldrh	r2, [r3, #0]
    288c:	68fb      	ldr	r3, [r7, #12]
    288e:	0011      	movs	r1, r2
    2890:	0018      	movs	r0, r3
    2892:	4b54      	ldr	r3, [pc, #336]	; (29e4 <spi_write_buffer_wait+0x318>)
    2894:	4798      	blx	r3
						length--;
    2896:	1dbb      	adds	r3, r7, #6
    2898:	881a      	ldrh	r2, [r3, #0]
    289a:	1dbb      	adds	r3, r7, #6
    289c:	3a01      	subs	r2, #1
    289e:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    28a0:	68fb      	ldr	r3, [r7, #12]
    28a2:	0018      	movs	r0, r3
    28a4:	4b50      	ldr	r3, [pc, #320]	; (29e8 <spi_write_buffer_wait+0x31c>)
    28a6:	4798      	blx	r3
    28a8:	1e03      	subs	r3, r0, #0
    28aa:	d107      	bne.n	28bc <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    28ac:	69bb      	ldr	r3, [r7, #24]
    28ae:	3301      	adds	r3, #1
    28b0:	61bb      	str	r3, [r7, #24]
    28b2:	69bb      	ldr	r3, [r7, #24]
    28b4:	4a4a      	ldr	r2, [pc, #296]	; (29e0 <spi_write_buffer_wait+0x314>)
    28b6:	4293      	cmp	r3, r2
    28b8:	d9b3      	bls.n	2822 <spi_write_buffer_wait+0x156>
    28ba:	e000      	b.n	28be <spi_write_buffer_wait+0x1f2>
						break;
    28bc:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    28be:	68fb      	ldr	r3, [r7, #12]
    28c0:	0018      	movs	r0, r3
    28c2:	4b44      	ldr	r3, [pc, #272]	; (29d4 <spi_write_buffer_wait+0x308>)
    28c4:	4798      	blx	r3
    28c6:	1e03      	subs	r3, r0, #0
    28c8:	d005      	beq.n	28d6 <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
    28ca:	68fb      	ldr	r3, [r7, #12]
    28cc:	0018      	movs	r0, r3
    28ce:	4b42      	ldr	r3, [pc, #264]	; (29d8 <spi_write_buffer_wait+0x30c>)
    28d0:	4798      	blx	r3
					return STATUS_ABORTED;
    28d2:	2304      	movs	r3, #4
    28d4:	e07a      	b.n	29cc <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
    28d6:	68fb      	ldr	r3, [r7, #12]
    28d8:	0018      	movs	r0, r3
    28da:	4b43      	ldr	r3, [pc, #268]	; (29e8 <spi_write_buffer_wait+0x31c>)
    28dc:	4798      	blx	r3
    28de:	0003      	movs	r3, r0
    28e0:	001a      	movs	r2, r3
    28e2:	2301      	movs	r3, #1
    28e4:	4053      	eors	r3, r2
    28e6:	b2db      	uxtb	r3, r3
    28e8:	2b00      	cmp	r3, #0
    28ea:	d001      	beq.n	28f0 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    28ec:	2312      	movs	r3, #18
    28ee:	e06d      	b.n	29cc <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    28f0:	46c0      	nop			; (mov r8, r8)
    28f2:	68fb      	ldr	r3, [r7, #12]
    28f4:	0018      	movs	r0, r3
    28f6:	4b3c      	ldr	r3, [pc, #240]	; (29e8 <spi_write_buffer_wait+0x31c>)
    28f8:	4798      	blx	r3
    28fa:	0003      	movs	r3, r0
    28fc:	001a      	movs	r2, r3
    28fe:	2301      	movs	r3, #1
    2900:	4053      	eors	r3, r2
    2902:	b2db      	uxtb	r3, r3
    2904:	2b00      	cmp	r3, #0
    2906:	d1f4      	bne.n	28f2 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    2908:	2312      	movs	r3, #18
    290a:	18fa      	adds	r2, r7, r3
    290c:	68fb      	ldr	r3, [r7, #12]
    290e:	0011      	movs	r1, r2
    2910:	0018      	movs	r0, r3
    2912:	4b36      	ldr	r3, [pc, #216]	; (29ec <spi_write_buffer_wait+0x320>)
    2914:	4798      	blx	r3
			flush_length--;
    2916:	2324      	movs	r3, #36	; 0x24
    2918:	18fb      	adds	r3, r7, r3
    291a:	881a      	ldrh	r2, [r3, #0]
    291c:	2324      	movs	r3, #36	; 0x24
    291e:	18fb      	adds	r3, r7, r3
    2920:	3a01      	subs	r2, #1
    2922:	801a      	strh	r2, [r3, #0]
	while (length--) {
    2924:	1dbb      	adds	r3, r7, #6
    2926:	881b      	ldrh	r3, [r3, #0]
    2928:	1dba      	adds	r2, r7, #6
    292a:	1e59      	subs	r1, r3, #1
    292c:	8011      	strh	r1, [r2, #0]
    292e:	2b00      	cmp	r3, #0
    2930:	d000      	beq.n	2934 <spi_write_buffer_wait+0x268>
    2932:	e6f8      	b.n	2726 <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    2934:	68fb      	ldr	r3, [r7, #12]
    2936:	795b      	ldrb	r3, [r3, #5]
    2938:	2b01      	cmp	r3, #1
    293a:	d10b      	bne.n	2954 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    293c:	46c0      	nop			; (mov r8, r8)
    293e:	68fb      	ldr	r3, [r7, #12]
    2940:	0018      	movs	r0, r3
    2942:	4b24      	ldr	r3, [pc, #144]	; (29d4 <spi_write_buffer_wait+0x308>)
    2944:	4798      	blx	r3
    2946:	0003      	movs	r3, r0
    2948:	001a      	movs	r2, r3
    294a:	2301      	movs	r3, #1
    294c:	4053      	eors	r3, r2
    294e:	b2db      	uxtb	r3, r3
    2950:	2b00      	cmp	r3, #0
    2952:	d1f4      	bne.n	293e <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    2954:	68fb      	ldr	r3, [r7, #12]
    2956:	795b      	ldrb	r3, [r3, #5]
    2958:	2b00      	cmp	r3, #0
    295a:	d136      	bne.n	29ca <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
    295c:	68fb      	ldr	r3, [r7, #12]
    295e:	79db      	ldrb	r3, [r3, #7]
    2960:	2b00      	cmp	r3, #0
    2962:	d032      	beq.n	29ca <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
    2964:	e02c      	b.n	29c0 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2966:	2300      	movs	r3, #0
    2968:	617b      	str	r3, [r7, #20]
    296a:	e008      	b.n	297e <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
    296c:	68fb      	ldr	r3, [r7, #12]
    296e:	0018      	movs	r0, r3
    2970:	4b1d      	ldr	r3, [pc, #116]	; (29e8 <spi_write_buffer_wait+0x31c>)
    2972:	4798      	blx	r3
    2974:	1e03      	subs	r3, r0, #0
    2976:	d107      	bne.n	2988 <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2978:	697b      	ldr	r3, [r7, #20]
    297a:	3301      	adds	r3, #1
    297c:	617b      	str	r3, [r7, #20]
    297e:	697b      	ldr	r3, [r7, #20]
    2980:	4a17      	ldr	r2, [pc, #92]	; (29e0 <spi_write_buffer_wait+0x314>)
    2982:	4293      	cmp	r3, r2
    2984:	d9f2      	bls.n	296c <spi_write_buffer_wait+0x2a0>
    2986:	e000      	b.n	298a <spi_write_buffer_wait+0x2be>
						break;
    2988:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    298a:	68fb      	ldr	r3, [r7, #12]
    298c:	0018      	movs	r0, r3
    298e:	4b16      	ldr	r3, [pc, #88]	; (29e8 <spi_write_buffer_wait+0x31c>)
    2990:	4798      	blx	r3
    2992:	0003      	movs	r3, r0
    2994:	001a      	movs	r2, r3
    2996:	2301      	movs	r3, #1
    2998:	4053      	eors	r3, r2
    299a:	b2db      	uxtb	r3, r3
    299c:	2b00      	cmp	r3, #0
    299e:	d001      	beq.n	29a4 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    29a0:	2312      	movs	r3, #18
    29a2:	e013      	b.n	29cc <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    29a4:	2310      	movs	r3, #16
    29a6:	18fa      	adds	r2, r7, r3
    29a8:	68fb      	ldr	r3, [r7, #12]
    29aa:	0011      	movs	r1, r2
    29ac:	0018      	movs	r0, r3
    29ae:	4b0f      	ldr	r3, [pc, #60]	; (29ec <spi_write_buffer_wait+0x320>)
    29b0:	4798      	blx	r3
				flush_length--;
    29b2:	2324      	movs	r3, #36	; 0x24
    29b4:	18fb      	adds	r3, r7, r3
    29b6:	881a      	ldrh	r2, [r3, #0]
    29b8:	2324      	movs	r3, #36	; 0x24
    29ba:	18fb      	adds	r3, r7, r3
    29bc:	3a01      	subs	r2, #1
    29be:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    29c0:	2324      	movs	r3, #36	; 0x24
    29c2:	18fb      	adds	r3, r7, r3
    29c4:	881b      	ldrh	r3, [r3, #0]
    29c6:	2b00      	cmp	r3, #0
    29c8:	d1cd      	bne.n	2966 <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
    29ca:	2300      	movs	r3, #0
}
    29cc:	0018      	movs	r0, r3
    29ce:	46bd      	mov	sp, r7
    29d0:	b00a      	add	sp, #40	; 0x28
    29d2:	bd80      	pop	{r7, pc}
    29d4:	00002085 	.word	0x00002085
    29d8:	000021cd 	.word	0x000021cd
    29dc:	000020ad 	.word	0x000020ad
    29e0:	00002710 	.word	0x00002710
    29e4:	000020fd 	.word	0x000020fd
    29e8:	000020d5 	.word	0x000020d5
    29ec:	00002145 	.word	0x00002145

000029f0 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    29f0:	b590      	push	{r4, r7, lr}
    29f2:	b08d      	sub	sp, #52	; 0x34
    29f4:	af00      	add	r7, sp, #0
    29f6:	60f8      	str	r0, [r7, #12]
    29f8:	60b9      	str	r1, [r7, #8]
    29fa:	607a      	str	r2, [r7, #4]
    29fc:	001a      	movs	r2, r3
    29fe:	1cbb      	adds	r3, r7, #2
    2a00:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2a02:	68fb      	ldr	r3, [r7, #12]
    2a04:	2238      	movs	r2, #56	; 0x38
    2a06:	5c9b      	ldrb	r3, [r3, r2]
    2a08:	b2db      	uxtb	r3, r3
    2a0a:	2b05      	cmp	r3, #5
    2a0c:	d101      	bne.n	2a12 <spi_transceive_buffer_wait+0x22>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2a0e:	2305      	movs	r3, #5
    2a10:	e1e3      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    2a12:	1cbb      	adds	r3, r7, #2
    2a14:	881b      	ldrh	r3, [r3, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d101      	bne.n	2a1e <spi_transceive_buffer_wait+0x2e>
		return STATUS_ERR_INVALID_ARG;
    2a1a:	2317      	movs	r3, #23
    2a1c:	e1dd      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
	}

	if (!(module->receiver_enabled)) {
    2a1e:	68fb      	ldr	r3, [r7, #12]
    2a20:	79db      	ldrb	r3, [r3, #7]
    2a22:	2201      	movs	r2, #1
    2a24:	4053      	eors	r3, r2
    2a26:	b2db      	uxtb	r3, r3
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d001      	beq.n	2a30 <spi_transceive_buffer_wait+0x40>
		return STATUS_ERR_DENIED;
    2a2c:	231c      	movs	r3, #28
    2a2e:	e1d4      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    2a30:	68fb      	ldr	r3, [r7, #12]
    2a32:	795b      	ldrb	r3, [r3, #5]
    2a34:	2b00      	cmp	r3, #0
    2a36:	d109      	bne.n	2a4c <spi_transceive_buffer_wait+0x5c>
    2a38:	68fb      	ldr	r3, [r7, #12]
    2a3a:	0018      	movs	r0, r3
    2a3c:	4bca      	ldr	r3, [pc, #808]	; (2d68 <spi_transceive_buffer_wait+0x378>)
    2a3e:	4798      	blx	r3
    2a40:	1e03      	subs	r3, r0, #0
    2a42:	d003      	beq.n	2a4c <spi_transceive_buffer_wait+0x5c>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    2a44:	68fb      	ldr	r3, [r7, #12]
    2a46:	0018      	movs	r0, r3
    2a48:	4bc8      	ldr	r3, [pc, #800]	; (2d6c <spi_transceive_buffer_wait+0x37c>)
    2a4a:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    2a4c:	232e      	movs	r3, #46	; 0x2e
    2a4e:	18fb      	adds	r3, r7, r3
    2a50:	2200      	movs	r2, #0
    2a52:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
    2a54:	232c      	movs	r3, #44	; 0x2c
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	2200      	movs	r2, #0
    2a5a:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
    2a5c:	232a      	movs	r3, #42	; 0x2a
    2a5e:	18fb      	adds	r3, r7, r3
    2a60:	1cba      	adds	r2, r7, #2
    2a62:	8812      	ldrh	r2, [r2, #0]
    2a64:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
    2a66:	e123      	b.n	2cb0 <spi_transceive_buffer_wait+0x2c0>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2a68:	68fb      	ldr	r3, [r7, #12]
    2a6a:	795b      	ldrb	r3, [r3, #5]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d12a      	bne.n	2ac6 <spi_transceive_buffer_wait+0xd6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2a70:	2300      	movs	r3, #0
    2a72:	627b      	str	r3, [r7, #36]	; 0x24
    2a74:	e008      	b.n	2a88 <spi_transceive_buffer_wait+0x98>
				if (spi_is_ready_to_write(module)) {
    2a76:	68fb      	ldr	r3, [r7, #12]
    2a78:	0018      	movs	r0, r3
    2a7a:	4bbd      	ldr	r3, [pc, #756]	; (2d70 <spi_transceive_buffer_wait+0x380>)
    2a7c:	4798      	blx	r3
    2a7e:	1e03      	subs	r3, r0, #0
    2a80:	d107      	bne.n	2a92 <spi_transceive_buffer_wait+0xa2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a84:	3301      	adds	r3, #1
    2a86:	627b      	str	r3, [r7, #36]	; 0x24
    2a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a8a:	4aba      	ldr	r2, [pc, #744]	; (2d74 <spi_transceive_buffer_wait+0x384>)
    2a8c:	4293      	cmp	r3, r2
    2a8e:	d9f2      	bls.n	2a76 <spi_transceive_buffer_wait+0x86>
    2a90:	e000      	b.n	2a94 <spi_transceive_buffer_wait+0xa4>
					break;
    2a92:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2a94:	68fb      	ldr	r3, [r7, #12]
    2a96:	0018      	movs	r0, r3
    2a98:	4bb3      	ldr	r3, [pc, #716]	; (2d68 <spi_transceive_buffer_wait+0x378>)
    2a9a:	4798      	blx	r3
    2a9c:	1e03      	subs	r3, r0, #0
    2a9e:	d005      	beq.n	2aac <spi_transceive_buffer_wait+0xbc>
				_spi_clear_tx_complete_flag(module);
    2aa0:	68fb      	ldr	r3, [r7, #12]
    2aa2:	0018      	movs	r0, r3
    2aa4:	4bb1      	ldr	r3, [pc, #708]	; (2d6c <spi_transceive_buffer_wait+0x37c>)
    2aa6:	4798      	blx	r3
				return STATUS_ABORTED;
    2aa8:	2304      	movs	r3, #4
    2aaa:	e196      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
			}

			if (!spi_is_ready_to_write(module)) {
    2aac:	68fb      	ldr	r3, [r7, #12]
    2aae:	0018      	movs	r0, r3
    2ab0:	4baf      	ldr	r3, [pc, #700]	; (2d70 <spi_transceive_buffer_wait+0x380>)
    2ab2:	4798      	blx	r3
    2ab4:	0003      	movs	r3, r0
    2ab6:	001a      	movs	r2, r3
    2ab8:	2301      	movs	r3, #1
    2aba:	4053      	eors	r3, r2
    2abc:	b2db      	uxtb	r3, r3
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d001      	beq.n	2ac6 <spi_transceive_buffer_wait+0xd6>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2ac2:	2312      	movs	r3, #18
    2ac4:	e189      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    2ac6:	46c0      	nop			; (mov r8, r8)
    2ac8:	68fb      	ldr	r3, [r7, #12]
    2aca:	0018      	movs	r0, r3
    2acc:	4ba8      	ldr	r3, [pc, #672]	; (2d70 <spi_transceive_buffer_wait+0x380>)
    2ace:	4798      	blx	r3
    2ad0:	0003      	movs	r3, r0
    2ad2:	001a      	movs	r2, r3
    2ad4:	2301      	movs	r3, #1
    2ad6:	4053      	eors	r3, r2
    2ad8:	b2db      	uxtb	r3, r3
    2ada:	2b00      	cmp	r3, #0
    2adc:	d1f4      	bne.n	2ac8 <spi_transceive_buffer_wait+0xd8>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2ade:	232e      	movs	r3, #46	; 0x2e
    2ae0:	18fb      	adds	r3, r7, r3
    2ae2:	881b      	ldrh	r3, [r3, #0]
    2ae4:	222e      	movs	r2, #46	; 0x2e
    2ae6:	18ba      	adds	r2, r7, r2
    2ae8:	1c59      	adds	r1, r3, #1
    2aea:	8011      	strh	r1, [r2, #0]
    2aec:	001a      	movs	r2, r3
    2aee:	68bb      	ldr	r3, [r7, #8]
    2af0:	189b      	adds	r3, r3, r2
    2af2:	781a      	ldrb	r2, [r3, #0]
    2af4:	2322      	movs	r3, #34	; 0x22
    2af6:	18fb      	adds	r3, r7, r3
    2af8:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2afa:	68fb      	ldr	r3, [r7, #12]
    2afc:	799b      	ldrb	r3, [r3, #6]
    2afe:	2b01      	cmp	r3, #1
    2b00:	d115      	bne.n	2b2e <spi_transceive_buffer_wait+0x13e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2b02:	232e      	movs	r3, #46	; 0x2e
    2b04:	18fb      	adds	r3, r7, r3
    2b06:	881b      	ldrh	r3, [r3, #0]
    2b08:	222e      	movs	r2, #46	; 0x2e
    2b0a:	18ba      	adds	r2, r7, r2
    2b0c:	1c59      	adds	r1, r3, #1
    2b0e:	8011      	strh	r1, [r2, #0]
    2b10:	001a      	movs	r2, r3
    2b12:	68bb      	ldr	r3, [r7, #8]
    2b14:	189b      	adds	r3, r3, r2
    2b16:	781b      	ldrb	r3, [r3, #0]
    2b18:	021b      	lsls	r3, r3, #8
    2b1a:	b21a      	sxth	r2, r3
    2b1c:	2322      	movs	r3, #34	; 0x22
    2b1e:	18fb      	adds	r3, r7, r3
    2b20:	2100      	movs	r1, #0
    2b22:	5e5b      	ldrsh	r3, [r3, r1]
    2b24:	4313      	orrs	r3, r2
    2b26:	b21a      	sxth	r2, r3
    2b28:	2322      	movs	r3, #34	; 0x22
    2b2a:	18fb      	adds	r3, r7, r3
    2b2c:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    2b2e:	2322      	movs	r3, #34	; 0x22
    2b30:	18fb      	adds	r3, r7, r3
    2b32:	881a      	ldrh	r2, [r3, #0]
    2b34:	68fb      	ldr	r3, [r7, #12]
    2b36:	0011      	movs	r1, r2
    2b38:	0018      	movs	r0, r3
    2b3a:	4b8f      	ldr	r3, [pc, #572]	; (2d78 <spi_transceive_buffer_wait+0x388>)
    2b3c:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2b3e:	68fb      	ldr	r3, [r7, #12]
    2b40:	795b      	ldrb	r3, [r3, #5]
    2b42:	2b00      	cmp	r3, #0
    2b44:	d165      	bne.n	2c12 <spi_transceive_buffer_wait+0x222>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2b46:	2300      	movs	r3, #0
    2b48:	61fb      	str	r3, [r7, #28]
    2b4a:	e043      	b.n	2bd4 <spi_transceive_buffer_wait+0x1e4>
				if (spi_is_ready_to_write(module)) {
    2b4c:	68fb      	ldr	r3, [r7, #12]
    2b4e:	0018      	movs	r0, r3
    2b50:	4b87      	ldr	r3, [pc, #540]	; (2d70 <spi_transceive_buffer_wait+0x380>)
    2b52:	4798      	blx	r3
    2b54:	1e03      	subs	r3, r0, #0
    2b56:	d034      	beq.n	2bc2 <spi_transceive_buffer_wait+0x1d2>
					data_to_send = tx_data[tx_pos++];
    2b58:	232e      	movs	r3, #46	; 0x2e
    2b5a:	18fb      	adds	r3, r7, r3
    2b5c:	881b      	ldrh	r3, [r3, #0]
    2b5e:	222e      	movs	r2, #46	; 0x2e
    2b60:	18ba      	adds	r2, r7, r2
    2b62:	1c59      	adds	r1, r3, #1
    2b64:	8011      	strh	r1, [r2, #0]
    2b66:	001a      	movs	r2, r3
    2b68:	68bb      	ldr	r3, [r7, #8]
    2b6a:	189b      	adds	r3, r3, r2
    2b6c:	781a      	ldrb	r2, [r3, #0]
    2b6e:	2322      	movs	r3, #34	; 0x22
    2b70:	18fb      	adds	r3, r7, r3
    2b72:	801a      	strh	r2, [r3, #0]
					/* If 9-bit data, get next byte to send from the buffer */
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2b74:	68fb      	ldr	r3, [r7, #12]
    2b76:	799b      	ldrb	r3, [r3, #6]
    2b78:	2b01      	cmp	r3, #1
    2b7a:	d115      	bne.n	2ba8 <spi_transceive_buffer_wait+0x1b8>
						data_to_send |= (tx_data[tx_pos++] << 8);
    2b7c:	232e      	movs	r3, #46	; 0x2e
    2b7e:	18fb      	adds	r3, r7, r3
    2b80:	881b      	ldrh	r3, [r3, #0]
    2b82:	222e      	movs	r2, #46	; 0x2e
    2b84:	18ba      	adds	r2, r7, r2
    2b86:	1c59      	adds	r1, r3, #1
    2b88:	8011      	strh	r1, [r2, #0]
    2b8a:	001a      	movs	r2, r3
    2b8c:	68bb      	ldr	r3, [r7, #8]
    2b8e:	189b      	adds	r3, r3, r2
    2b90:	781b      	ldrb	r3, [r3, #0]
    2b92:	021b      	lsls	r3, r3, #8
    2b94:	b21a      	sxth	r2, r3
    2b96:	2322      	movs	r3, #34	; 0x22
    2b98:	18fb      	adds	r3, r7, r3
    2b9a:	2100      	movs	r1, #0
    2b9c:	5e5b      	ldrsh	r3, [r3, r1]
    2b9e:	4313      	orrs	r3, r2
    2ba0:	b21a      	sxth	r2, r3
    2ba2:	2322      	movs	r3, #34	; 0x22
    2ba4:	18fb      	adds	r3, r7, r3
    2ba6:	801a      	strh	r2, [r3, #0]
					}

					/* Write the data to send */
					spi_write(module, data_to_send);
    2ba8:	2322      	movs	r3, #34	; 0x22
    2baa:	18fb      	adds	r3, r7, r3
    2bac:	881a      	ldrh	r2, [r3, #0]
    2bae:	68fb      	ldr	r3, [r7, #12]
    2bb0:	0011      	movs	r1, r2
    2bb2:	0018      	movs	r0, r3
    2bb4:	4b70      	ldr	r3, [pc, #448]	; (2d78 <spi_transceive_buffer_wait+0x388>)
    2bb6:	4798      	blx	r3
					length--;
    2bb8:	1cbb      	adds	r3, r7, #2
    2bba:	881a      	ldrh	r2, [r3, #0]
    2bbc:	1cbb      	adds	r3, r7, #2
    2bbe:	3a01      	subs	r2, #1
    2bc0:	801a      	strh	r2, [r3, #0]
				}
				if (spi_is_ready_to_read(module)) {
    2bc2:	68fb      	ldr	r3, [r7, #12]
    2bc4:	0018      	movs	r0, r3
    2bc6:	4b6d      	ldr	r3, [pc, #436]	; (2d7c <spi_transceive_buffer_wait+0x38c>)
    2bc8:	4798      	blx	r3
    2bca:	1e03      	subs	r3, r0, #0
    2bcc:	d107      	bne.n	2bde <spi_transceive_buffer_wait+0x1ee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2bce:	69fb      	ldr	r3, [r7, #28]
    2bd0:	3301      	adds	r3, #1
    2bd2:	61fb      	str	r3, [r7, #28]
    2bd4:	69fb      	ldr	r3, [r7, #28]
    2bd6:	4a67      	ldr	r2, [pc, #412]	; (2d74 <spi_transceive_buffer_wait+0x384>)
    2bd8:	4293      	cmp	r3, r2
    2bda:	d9b7      	bls.n	2b4c <spi_transceive_buffer_wait+0x15c>
    2bdc:	e000      	b.n	2be0 <spi_transceive_buffer_wait+0x1f0>
					break;
    2bde:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2be0:	68fb      	ldr	r3, [r7, #12]
    2be2:	0018      	movs	r0, r3
    2be4:	4b60      	ldr	r3, [pc, #384]	; (2d68 <spi_transceive_buffer_wait+0x378>)
    2be6:	4798      	blx	r3
    2be8:	1e03      	subs	r3, r0, #0
    2bea:	d005      	beq.n	2bf8 <spi_transceive_buffer_wait+0x208>
				_spi_clear_tx_complete_flag(module);
    2bec:	68fb      	ldr	r3, [r7, #12]
    2bee:	0018      	movs	r0, r3
    2bf0:	4b5e      	ldr	r3, [pc, #376]	; (2d6c <spi_transceive_buffer_wait+0x37c>)
    2bf2:	4798      	blx	r3
				return STATUS_ABORTED;
    2bf4:	2304      	movs	r3, #4
    2bf6:	e0f0      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
			}

			if (!spi_is_ready_to_read(module)) {
    2bf8:	68fb      	ldr	r3, [r7, #12]
    2bfa:	0018      	movs	r0, r3
    2bfc:	4b5f      	ldr	r3, [pc, #380]	; (2d7c <spi_transceive_buffer_wait+0x38c>)
    2bfe:	4798      	blx	r3
    2c00:	0003      	movs	r3, r0
    2c02:	001a      	movs	r2, r3
    2c04:	2301      	movs	r3, #1
    2c06:	4053      	eors	r3, r2
    2c08:	b2db      	uxtb	r3, r3
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	d001      	beq.n	2c12 <spi_transceive_buffer_wait+0x222>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2c0e:	2312      	movs	r3, #18
    2c10:	e0e3      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	68fb      	ldr	r3, [r7, #12]
    2c16:	0018      	movs	r0, r3
    2c18:	4b58      	ldr	r3, [pc, #352]	; (2d7c <spi_transceive_buffer_wait+0x38c>)
    2c1a:	4798      	blx	r3
    2c1c:	0003      	movs	r3, r0
    2c1e:	001a      	movs	r2, r3
    2c20:	2301      	movs	r3, #1
    2c22:	4053      	eors	r3, r2
    2c24:	b2db      	uxtb	r3, r3
    2c26:	2b00      	cmp	r3, #0
    2c28:	d1f4      	bne.n	2c14 <spi_transceive_buffer_wait+0x224>
		}

		enum status_code retval;
		uint16_t received_data = 0;
    2c2a:	2314      	movs	r3, #20
    2c2c:	18fb      	adds	r3, r7, r3
    2c2e:	2200      	movs	r2, #0
    2c30:	801a      	strh	r2, [r3, #0]
		rx_length--;
    2c32:	232a      	movs	r3, #42	; 0x2a
    2c34:	18fb      	adds	r3, r7, r3
    2c36:	881a      	ldrh	r2, [r3, #0]
    2c38:	232a      	movs	r3, #42	; 0x2a
    2c3a:	18fb      	adds	r3, r7, r3
    2c3c:	3a01      	subs	r2, #1
    2c3e:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
    2c40:	2317      	movs	r3, #23
    2c42:	18fc      	adds	r4, r7, r3
    2c44:	2314      	movs	r3, #20
    2c46:	18fa      	adds	r2, r7, r3
    2c48:	68fb      	ldr	r3, [r7, #12]
    2c4a:	0011      	movs	r1, r2
    2c4c:	0018      	movs	r0, r3
    2c4e:	4b4c      	ldr	r3, [pc, #304]	; (2d80 <spi_transceive_buffer_wait+0x390>)
    2c50:	4798      	blx	r3
    2c52:	0003      	movs	r3, r0
    2c54:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    2c56:	2317      	movs	r3, #23
    2c58:	18fb      	adds	r3, r7, r3
    2c5a:	781b      	ldrb	r3, [r3, #0]
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d003      	beq.n	2c68 <spi_transceive_buffer_wait+0x278>
			/* Overflow, abort */
			return retval;
    2c60:	2317      	movs	r3, #23
    2c62:	18fb      	adds	r3, r7, r3
    2c64:	781b      	ldrb	r3, [r3, #0]
    2c66:	e0b8      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2c68:	232c      	movs	r3, #44	; 0x2c
    2c6a:	18fb      	adds	r3, r7, r3
    2c6c:	881b      	ldrh	r3, [r3, #0]
    2c6e:	222c      	movs	r2, #44	; 0x2c
    2c70:	18ba      	adds	r2, r7, r2
    2c72:	1c59      	adds	r1, r3, #1
    2c74:	8011      	strh	r1, [r2, #0]
    2c76:	001a      	movs	r2, r3
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	189b      	adds	r3, r3, r2
    2c7c:	2214      	movs	r2, #20
    2c7e:	18ba      	adds	r2, r7, r2
    2c80:	8812      	ldrh	r2, [r2, #0]
    2c82:	b2d2      	uxtb	r2, r2
    2c84:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2c86:	68fb      	ldr	r3, [r7, #12]
    2c88:	799b      	ldrb	r3, [r3, #6]
    2c8a:	2b01      	cmp	r3, #1
    2c8c:	d110      	bne.n	2cb0 <spi_transceive_buffer_wait+0x2c0>
			rx_data[rx_pos++] = (received_data >> 8);
    2c8e:	232c      	movs	r3, #44	; 0x2c
    2c90:	18fb      	adds	r3, r7, r3
    2c92:	881b      	ldrh	r3, [r3, #0]
    2c94:	222c      	movs	r2, #44	; 0x2c
    2c96:	18ba      	adds	r2, r7, r2
    2c98:	1c59      	adds	r1, r3, #1
    2c9a:	8011      	strh	r1, [r2, #0]
    2c9c:	001a      	movs	r2, r3
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	189b      	adds	r3, r3, r2
    2ca2:	2214      	movs	r2, #20
    2ca4:	18ba      	adds	r2, r7, r2
    2ca6:	8812      	ldrh	r2, [r2, #0]
    2ca8:	0a12      	lsrs	r2, r2, #8
    2caa:	b292      	uxth	r2, r2
    2cac:	b2d2      	uxtb	r2, r2
    2cae:	701a      	strb	r2, [r3, #0]
	while (length--) {
    2cb0:	1cbb      	adds	r3, r7, #2
    2cb2:	881b      	ldrh	r3, [r3, #0]
    2cb4:	1cba      	adds	r2, r7, #2
    2cb6:	1e59      	subs	r1, r3, #1
    2cb8:	8011      	strh	r1, [r2, #0]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d000      	beq.n	2cc0 <spi_transceive_buffer_wait+0x2d0>
    2cbe:	e6d3      	b.n	2a68 <spi_transceive_buffer_wait+0x78>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    2cc0:	68fb      	ldr	r3, [r7, #12]
    2cc2:	795b      	ldrb	r3, [r3, #5]
    2cc4:	2b01      	cmp	r3, #1
    2cc6:	d10b      	bne.n	2ce0 <spi_transceive_buffer_wait+0x2f0>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    2cc8:	46c0      	nop			; (mov r8, r8)
    2cca:	68fb      	ldr	r3, [r7, #12]
    2ccc:	0018      	movs	r0, r3
    2cce:	4b26      	ldr	r3, [pc, #152]	; (2d68 <spi_transceive_buffer_wait+0x378>)
    2cd0:	4798      	blx	r3
    2cd2:	0003      	movs	r3, r0
    2cd4:	001a      	movs	r2, r3
    2cd6:	2301      	movs	r3, #1
    2cd8:	4053      	eors	r3, r2
    2cda:	b2db      	uxtb	r3, r3
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d1f4      	bne.n	2cca <spi_transceive_buffer_wait+0x2da>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    2ce0:	68fb      	ldr	r3, [r7, #12]
    2ce2:	795b      	ldrb	r3, [r3, #5]
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	d000      	beq.n	2cea <spi_transceive_buffer_wait+0x2fa>
    2ce8:	e076      	b.n	2dd8 <spi_transceive_buffer_wait+0x3e8>
		while (rx_length) {
    2cea:	e06f      	b.n	2dcc <spi_transceive_buffer_wait+0x3dc>
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2cec:	2300      	movs	r3, #0
    2cee:	61bb      	str	r3, [r7, #24]
    2cf0:	e008      	b.n	2d04 <spi_transceive_buffer_wait+0x314>
				if (spi_is_ready_to_read(module)) {
    2cf2:	68fb      	ldr	r3, [r7, #12]
    2cf4:	0018      	movs	r0, r3
    2cf6:	4b21      	ldr	r3, [pc, #132]	; (2d7c <spi_transceive_buffer_wait+0x38c>)
    2cf8:	4798      	blx	r3
    2cfa:	1e03      	subs	r3, r0, #0
    2cfc:	d107      	bne.n	2d0e <spi_transceive_buffer_wait+0x31e>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2cfe:	69bb      	ldr	r3, [r7, #24]
    2d00:	3301      	adds	r3, #1
    2d02:	61bb      	str	r3, [r7, #24]
    2d04:	69bb      	ldr	r3, [r7, #24]
    2d06:	4a1b      	ldr	r2, [pc, #108]	; (2d74 <spi_transceive_buffer_wait+0x384>)
    2d08:	4293      	cmp	r3, r2
    2d0a:	d9f2      	bls.n	2cf2 <spi_transceive_buffer_wait+0x302>
    2d0c:	e000      	b.n	2d10 <spi_transceive_buffer_wait+0x320>
					break;
    2d0e:	46c0      	nop			; (mov r8, r8)
				}
			}
			if (!spi_is_ready_to_read(module)) {
    2d10:	68fb      	ldr	r3, [r7, #12]
    2d12:	0018      	movs	r0, r3
    2d14:	4b19      	ldr	r3, [pc, #100]	; (2d7c <spi_transceive_buffer_wait+0x38c>)
    2d16:	4798      	blx	r3
    2d18:	0003      	movs	r3, r0
    2d1a:	001a      	movs	r2, r3
    2d1c:	2301      	movs	r3, #1
    2d1e:	4053      	eors	r3, r2
    2d20:	b2db      	uxtb	r3, r3
    2d22:	2b00      	cmp	r3, #0
    2d24:	d001      	beq.n	2d2a <spi_transceive_buffer_wait+0x33a>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2d26:	2312      	movs	r3, #18
    2d28:	e057      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
			}
			enum status_code retval;
			uint16_t received_data = 0;
    2d2a:	2312      	movs	r3, #18
    2d2c:	18fb      	adds	r3, r7, r3
    2d2e:	2200      	movs	r2, #0
    2d30:	801a      	strh	r2, [r3, #0]
			rx_length--;
    2d32:	232a      	movs	r3, #42	; 0x2a
    2d34:	18fb      	adds	r3, r7, r3
    2d36:	881a      	ldrh	r2, [r3, #0]
    2d38:	232a      	movs	r3, #42	; 0x2a
    2d3a:	18fb      	adds	r3, r7, r3
    2d3c:	3a01      	subs	r2, #1
    2d3e:	801a      	strh	r2, [r3, #0]

			retval = spi_read(module, &received_data);
    2d40:	2316      	movs	r3, #22
    2d42:	18fc      	adds	r4, r7, r3
    2d44:	2312      	movs	r3, #18
    2d46:	18fa      	adds	r2, r7, r3
    2d48:	68fb      	ldr	r3, [r7, #12]
    2d4a:	0011      	movs	r1, r2
    2d4c:	0018      	movs	r0, r3
    2d4e:	4b0c      	ldr	r3, [pc, #48]	; (2d80 <spi_transceive_buffer_wait+0x390>)
    2d50:	4798      	blx	r3
    2d52:	0003      	movs	r3, r0
    2d54:	7023      	strb	r3, [r4, #0]

			if (retval != STATUS_OK) {
    2d56:	2316      	movs	r3, #22
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	781b      	ldrb	r3, [r3, #0]
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d011      	beq.n	2d84 <spi_transceive_buffer_wait+0x394>
				/* Overflow, abort */
				return retval;
    2d60:	2316      	movs	r3, #22
    2d62:	18fb      	adds	r3, r7, r3
    2d64:	781b      	ldrb	r3, [r3, #0]
    2d66:	e038      	b.n	2dda <spi_transceive_buffer_wait+0x3ea>
    2d68:	00002085 	.word	0x00002085
    2d6c:	000021cd 	.word	0x000021cd
    2d70:	000020ad 	.word	0x000020ad
    2d74:	00002710 	.word	0x00002710
    2d78:	000020fd 	.word	0x000020fd
    2d7c:	000020d5 	.word	0x000020d5
    2d80:	00002145 	.word	0x00002145
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
    2d84:	232c      	movs	r3, #44	; 0x2c
    2d86:	18fb      	adds	r3, r7, r3
    2d88:	881b      	ldrh	r3, [r3, #0]
    2d8a:	222c      	movs	r2, #44	; 0x2c
    2d8c:	18ba      	adds	r2, r7, r2
    2d8e:	1c59      	adds	r1, r3, #1
    2d90:	8011      	strh	r1, [r2, #0]
    2d92:	001a      	movs	r2, r3
    2d94:	687b      	ldr	r3, [r7, #4]
    2d96:	189b      	adds	r3, r3, r2
    2d98:	2212      	movs	r2, #18
    2d9a:	18ba      	adds	r2, r7, r2
    2d9c:	8812      	ldrh	r2, [r2, #0]
    2d9e:	b2d2      	uxtb	r2, r2
    2da0:	701a      	strb	r2, [r3, #0]

			/* If 9-bit data, write next received byte to the buffer */
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2da2:	68fb      	ldr	r3, [r7, #12]
    2da4:	799b      	ldrb	r3, [r3, #6]
    2da6:	2b01      	cmp	r3, #1
    2da8:	d110      	bne.n	2dcc <spi_transceive_buffer_wait+0x3dc>
				rx_data[rx_pos++] = (received_data >> 8);
    2daa:	232c      	movs	r3, #44	; 0x2c
    2dac:	18fb      	adds	r3, r7, r3
    2dae:	881b      	ldrh	r3, [r3, #0]
    2db0:	222c      	movs	r2, #44	; 0x2c
    2db2:	18ba      	adds	r2, r7, r2
    2db4:	1c59      	adds	r1, r3, #1
    2db6:	8011      	strh	r1, [r2, #0]
    2db8:	001a      	movs	r2, r3
    2dba:	687b      	ldr	r3, [r7, #4]
    2dbc:	189b      	adds	r3, r3, r2
    2dbe:	2212      	movs	r2, #18
    2dc0:	18ba      	adds	r2, r7, r2
    2dc2:	8812      	ldrh	r2, [r2, #0]
    2dc4:	0a12      	lsrs	r2, r2, #8
    2dc6:	b292      	uxth	r2, r2
    2dc8:	b2d2      	uxtb	r2, r2
    2dca:	701a      	strb	r2, [r3, #0]
		while (rx_length) {
    2dcc:	232a      	movs	r3, #42	; 0x2a
    2dce:	18fb      	adds	r3, r7, r3
    2dd0:	881b      	ldrh	r3, [r3, #0]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d000      	beq.n	2dd8 <spi_transceive_buffer_wait+0x3e8>
    2dd6:	e789      	b.n	2cec <spi_transceive_buffer_wait+0x2fc>
			}
		}
	}
#  endif
	return STATUS_OK;
    2dd8:	2300      	movs	r3, #0
}
    2dda:	0018      	movs	r0, r3
    2ddc:	46bd      	mov	sp, r7
    2dde:	b00d      	add	sp, #52	; 0x34
    2de0:	bd90      	pop	{r4, r7, pc}
    2de2:	46c0      	nop			; (mov r8, r8)

00002de4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2dec:	687b      	ldr	r3, [r7, #4]
    2dee:	681b      	ldr	r3, [r3, #0]
    2df0:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2df6:	781b      	ldrb	r3, [r3, #0]
    2df8:	b2da      	uxtb	r2, r3
    2dfa:	230e      	movs	r3, #14
    2dfc:	18fb      	adds	r3, r7, r3
    2dfe:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e04:	1c5a      	adds	r2, r3, #1
    2e06:	687b      	ldr	r3, [r7, #4]
    2e08:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	799b      	ldrb	r3, [r3, #6]
    2e0e:	2b01      	cmp	r3, #1
    2e10:	d113      	bne.n	2e3a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e16:	781b      	ldrb	r3, [r3, #0]
    2e18:	b2db      	uxtb	r3, r3
    2e1a:	021b      	lsls	r3, r3, #8
    2e1c:	b21a      	sxth	r2, r3
    2e1e:	230e      	movs	r3, #14
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	2100      	movs	r1, #0
    2e24:	5e5b      	ldrsh	r3, [r3, r1]
    2e26:	4313      	orrs	r3, r2
    2e28:	b21a      	sxth	r2, r3
    2e2a:	230e      	movs	r3, #14
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e34:	1c5a      	adds	r2, r3, #1
    2e36:	687b      	ldr	r3, [r7, #4]
    2e38:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    2e3a:	230e      	movs	r3, #14
    2e3c:	18fb      	adds	r3, r7, r3
    2e3e:	881b      	ldrh	r3, [r3, #0]
    2e40:	05db      	lsls	r3, r3, #23
    2e42:	0dda      	lsrs	r2, r3, #23
    2e44:	68bb      	ldr	r3, [r7, #8]
    2e46:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    2e48:	687b      	ldr	r3, [r7, #4]
    2e4a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2e4c:	b29b      	uxth	r3, r3
    2e4e:	3b01      	subs	r3, #1
    2e50:	b29a      	uxth	r2, r3
    2e52:	687b      	ldr	r3, [r7, #4]
    2e54:	869a      	strh	r2, [r3, #52]	; 0x34
}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	46bd      	mov	sp, r7
    2e5a:	b004      	add	sp, #16
    2e5c:	bd80      	pop	{r7, pc}
	...

00002e60 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b084      	sub	sp, #16
    2e64:	af00      	add	r7, sp, #0
    2e66:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2e68:	687b      	ldr	r3, [r7, #4]
    2e6a:	681b      	ldr	r3, [r3, #0]
    2e6c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    2e6e:	4b08      	ldr	r3, [pc, #32]	; (2e90 <_spi_write_dummy+0x30>)
    2e70:	881b      	ldrh	r3, [r3, #0]
    2e72:	001a      	movs	r2, r3
    2e74:	68fb      	ldr	r3, [r7, #12]
    2e76:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2e7c:	b29b      	uxth	r3, r3
    2e7e:	3b01      	subs	r3, #1
    2e80:	b29a      	uxth	r2, r3
    2e82:	687b      	ldr	r3, [r7, #4]
    2e84:	865a      	strh	r2, [r3, #50]	; 0x32
}
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	46bd      	mov	sp, r7
    2e8a:	b004      	add	sp, #16
    2e8c:	bd80      	pop	{r7, pc}
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	20000174 	.word	0x20000174

00002e94 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    2e94:	b580      	push	{r7, lr}
    2e96:	b084      	sub	sp, #16
    2e98:	af00      	add	r7, sp, #0
    2e9a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    2ea2:	230a      	movs	r3, #10
    2ea4:	18fb      	adds	r3, r7, r3
    2ea6:	2200      	movs	r2, #0
    2ea8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    2eaa:	68fb      	ldr	r3, [r7, #12]
    2eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2eae:	230a      	movs	r3, #10
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2eb8:	b29b      	uxth	r3, r3
    2eba:	3b01      	subs	r3, #1
    2ebc:	b29a      	uxth	r2, r3
    2ebe:	687b      	ldr	r3, [r7, #4]
    2ec0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	46bd      	mov	sp, r7
    2ec6:	b004      	add	sp, #16
    2ec8:	bd80      	pop	{r7, pc}

00002eca <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    2eca:	b580      	push	{r7, lr}
    2ecc:	b084      	sub	sp, #16
    2ece:	af00      	add	r7, sp, #0
    2ed0:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	681b      	ldr	r3, [r3, #0]
    2ed6:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2ed8:	68fb      	ldr	r3, [r7, #12]
    2eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2edc:	b29a      	uxth	r2, r3
    2ede:	230a      	movs	r3, #10
    2ee0:	18fb      	adds	r3, r7, r3
    2ee2:	05d2      	lsls	r2, r2, #23
    2ee4:	0dd2      	lsrs	r2, r2, #23
    2ee6:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2eec:	220a      	movs	r2, #10
    2eee:	18ba      	adds	r2, r7, r2
    2ef0:	8812      	ldrh	r2, [r2, #0]
    2ef2:	b2d2      	uxtb	r2, r2
    2ef4:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    2ef6:	687b      	ldr	r3, [r7, #4]
    2ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2efa:	1c5a      	adds	r2, r3, #1
    2efc:	687b      	ldr	r3, [r7, #4]
    2efe:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2f00:	687b      	ldr	r3, [r7, #4]
    2f02:	799b      	ldrb	r3, [r3, #6]
    2f04:	2b01      	cmp	r3, #1
    2f06:	d10d      	bne.n	2f24 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f0c:	220a      	movs	r2, #10
    2f0e:	18ba      	adds	r2, r7, r2
    2f10:	8812      	ldrh	r2, [r2, #0]
    2f12:	0a12      	lsrs	r2, r2, #8
    2f14:	b292      	uxth	r2, r2
    2f16:	b2d2      	uxtb	r2, r2
    2f18:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f1e:	1c5a      	adds	r2, r3, #1
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    2f28:	b29b      	uxth	r3, r3
    2f2a:	3b01      	subs	r3, #1
    2f2c:	b29a      	uxth	r2, r3
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	861a      	strh	r2, [r3, #48]	; 0x30
}
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	46bd      	mov	sp, r7
    2f36:	b004      	add	sp, #16
    2f38:	bd80      	pop	{r7, pc}
	...

00002f3c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	b086      	sub	sp, #24
    2f40:	af00      	add	r7, sp, #0
    2f42:	0002      	movs	r2, r0
    2f44:	1dfb      	adds	r3, r7, #7
    2f46:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    2f48:	1dfb      	adds	r3, r7, #7
    2f4a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    2f4c:	4bb9      	ldr	r3, [pc, #740]	; (3234 <_spi_interrupt_handler+0x2f8>)
    2f4e:	0092      	lsls	r2, r2, #2
    2f50:	58d3      	ldr	r3, [r2, r3]
    2f52:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2f54:	697b      	ldr	r3, [r7, #20]
    2f56:	681b      	ldr	r3, [r3, #0]
    2f58:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    2f5a:	697b      	ldr	r3, [r7, #20]
    2f5c:	2237      	movs	r2, #55	; 0x37
    2f5e:	5c9a      	ldrb	r2, [r3, r2]
    2f60:	697b      	ldr	r3, [r7, #20]
    2f62:	2136      	movs	r1, #54	; 0x36
    2f64:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    2f66:	230f      	movs	r3, #15
    2f68:	18fb      	adds	r3, r7, r3
    2f6a:	400a      	ands	r2, r1
    2f6c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2f6e:	693b      	ldr	r3, [r7, #16]
    2f70:	7e1b      	ldrb	r3, [r3, #24]
    2f72:	b2da      	uxtb	r2, r3
    2f74:	230c      	movs	r3, #12
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    2f7a:	693b      	ldr	r3, [r7, #16]
    2f7c:	7d9b      	ldrb	r3, [r3, #22]
    2f7e:	b2db      	uxtb	r3, r3
    2f80:	b29a      	uxth	r2, r3
    2f82:	230c      	movs	r3, #12
    2f84:	18fb      	adds	r3, r7, r3
    2f86:	210c      	movs	r1, #12
    2f88:	1879      	adds	r1, r7, r1
    2f8a:	8809      	ldrh	r1, [r1, #0]
    2f8c:	400a      	ands	r2, r1
    2f8e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    2f90:	230c      	movs	r3, #12
    2f92:	18fb      	adds	r3, r7, r3
    2f94:	881b      	ldrh	r3, [r3, #0]
    2f96:	2201      	movs	r2, #1
    2f98:	4013      	ands	r3, r2
    2f9a:	d041      	beq.n	3020 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2f9c:	697b      	ldr	r3, [r7, #20]
    2f9e:	795b      	ldrb	r3, [r3, #5]
    2fa0:	2b01      	cmp	r3, #1
    2fa2:	d110      	bne.n	2fc6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    2fa4:	697b      	ldr	r3, [r7, #20]
    2fa6:	7a5b      	ldrb	r3, [r3, #9]
    2fa8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    2faa:	2b00      	cmp	r3, #0
    2fac:	d10b      	bne.n	2fc6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    2fae:	697b      	ldr	r3, [r7, #20]
    2fb0:	0018      	movs	r0, r3
    2fb2:	4ba1      	ldr	r3, [pc, #644]	; (3238 <_spi_interrupt_handler+0x2fc>)
    2fb4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    2fb6:	697b      	ldr	r3, [r7, #20]
    2fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2fba:	b29b      	uxth	r3, r3
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d102      	bne.n	2fc6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2fc0:	693b      	ldr	r3, [r7, #16]
    2fc2:	2201      	movs	r2, #1
    2fc4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    2fc6:	697b      	ldr	r3, [r7, #20]
    2fc8:	795b      	ldrb	r3, [r3, #5]
		if (0
    2fca:	2b01      	cmp	r3, #1
    2fcc:	d104      	bne.n	2fd8 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    2fce:	697b      	ldr	r3, [r7, #20]
    2fd0:	7a5b      	ldrb	r3, [r3, #9]
    2fd2:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d108      	bne.n	2fea <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2fd8:	697b      	ldr	r3, [r7, #20]
    2fda:	795b      	ldrb	r3, [r3, #5]
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d11f      	bne.n	3020 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    2fe0:	697b      	ldr	r3, [r7, #20]
    2fe2:	7a5b      	ldrb	r3, [r3, #9]
    2fe4:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d01a      	beq.n	3020 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    2fea:	697b      	ldr	r3, [r7, #20]
    2fec:	0018      	movs	r0, r3
    2fee:	4b93      	ldr	r3, [pc, #588]	; (323c <_spi_interrupt_handler+0x300>)
    2ff0:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    2ff2:	697b      	ldr	r3, [r7, #20]
    2ff4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2ff6:	b29b      	uxth	r3, r3
    2ff8:	2b00      	cmp	r3, #0
    2ffa:	d111      	bne.n	3020 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2ffc:	693b      	ldr	r3, [r7, #16]
    2ffe:	2201      	movs	r2, #1
    3000:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    3002:	697b      	ldr	r3, [r7, #20]
    3004:	7a5b      	ldrb	r3, [r3, #9]
    3006:	b2db      	uxtb	r3, r3
    3008:	2b01      	cmp	r3, #1
    300a:	d109      	bne.n	3020 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    300c:	697b      	ldr	r3, [r7, #20]
    300e:	79db      	ldrb	r3, [r3, #7]
    3010:	2201      	movs	r2, #1
    3012:	4053      	eors	r3, r2
    3014:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    3016:	2b00      	cmp	r3, #0
    3018:	d002      	beq.n	3020 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    301a:	693b      	ldr	r3, [r7, #16]
    301c:	2202      	movs	r2, #2
    301e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3020:	230c      	movs	r3, #12
    3022:	18fb      	adds	r3, r7, r3
    3024:	881b      	ldrh	r3, [r3, #0]
    3026:	2204      	movs	r2, #4
    3028:	4013      	ands	r3, r2
    302a:	d100      	bne.n	302e <_spi_interrupt_handler+0xf2>
    302c:	e07e      	b.n	312c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    302e:	693b      	ldr	r3, [r7, #16]
    3030:	8b5b      	ldrh	r3, [r3, #26]
    3032:	b29b      	uxth	r3, r3
    3034:	001a      	movs	r2, r3
    3036:	2304      	movs	r3, #4
    3038:	4013      	ands	r3, r2
    303a:	d022      	beq.n	3082 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    303c:	697b      	ldr	r3, [r7, #20]
    303e:	7a5b      	ldrb	r3, [r3, #9]
    3040:	b2db      	uxtb	r3, r3
    3042:	2b01      	cmp	r3, #1
    3044:	d014      	beq.n	3070 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3046:	697b      	ldr	r3, [r7, #20]
    3048:	2238      	movs	r2, #56	; 0x38
    304a:	211e      	movs	r1, #30
    304c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    304e:	697b      	ldr	r3, [r7, #20]
    3050:	2203      	movs	r2, #3
    3052:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3054:	693b      	ldr	r3, [r7, #16]
    3056:	2205      	movs	r2, #5
    3058:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    305a:	230f      	movs	r3, #15
    305c:	18fb      	adds	r3, r7, r3
    305e:	781b      	ldrb	r3, [r3, #0]
    3060:	2208      	movs	r2, #8
    3062:	4013      	ands	r3, r2
    3064:	d004      	beq.n	3070 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3066:	697b      	ldr	r3, [r7, #20]
    3068:	699b      	ldr	r3, [r3, #24]
    306a:	697a      	ldr	r2, [r7, #20]
    306c:	0010      	movs	r0, r2
    306e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3070:	693b      	ldr	r3, [r7, #16]
    3072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3074:	230a      	movs	r3, #10
    3076:	18fb      	adds	r3, r7, r3
    3078:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    307a:	693b      	ldr	r3, [r7, #16]
    307c:	2204      	movs	r2, #4
    307e:	835a      	strh	r2, [r3, #26]
    3080:	e054      	b.n	312c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    3082:	697b      	ldr	r3, [r7, #20]
    3084:	7a5b      	ldrb	r3, [r3, #9]
    3086:	b2db      	uxtb	r3, r3
    3088:	2b01      	cmp	r3, #1
    308a:	d11e      	bne.n	30ca <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    308c:	697b      	ldr	r3, [r7, #20]
    308e:	0018      	movs	r0, r3
    3090:	4b6b      	ldr	r3, [pc, #428]	; (3240 <_spi_interrupt_handler+0x304>)
    3092:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    3094:	697b      	ldr	r3, [r7, #20]
    3096:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    3098:	b29b      	uxth	r3, r3
    309a:	2b00      	cmp	r3, #0
    309c:	d146      	bne.n	312c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    309e:	693b      	ldr	r3, [r7, #16]
    30a0:	2204      	movs	r2, #4
    30a2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    30a4:	697b      	ldr	r3, [r7, #20]
    30a6:	2238      	movs	r2, #56	; 0x38
    30a8:	2100      	movs	r1, #0
    30aa:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    30ac:	697b      	ldr	r3, [r7, #20]
    30ae:	2203      	movs	r2, #3
    30b0:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    30b2:	230f      	movs	r3, #15
    30b4:	18fb      	adds	r3, r7, r3
    30b6:	781b      	ldrb	r3, [r3, #0]
    30b8:	2201      	movs	r2, #1
    30ba:	4013      	ands	r3, r2
    30bc:	d036      	beq.n	312c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    30be:	697b      	ldr	r3, [r7, #20]
    30c0:	68db      	ldr	r3, [r3, #12]
    30c2:	697a      	ldr	r2, [r7, #20]
    30c4:	0010      	movs	r0, r2
    30c6:	4798      	blx	r3
    30c8:	e030      	b.n	312c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    30ca:	697b      	ldr	r3, [r7, #20]
    30cc:	0018      	movs	r0, r3
    30ce:	4b5d      	ldr	r3, [pc, #372]	; (3244 <_spi_interrupt_handler+0x308>)
    30d0:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    30d2:	697b      	ldr	r3, [r7, #20]
    30d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    30d6:	b29b      	uxth	r3, r3
    30d8:	2b00      	cmp	r3, #0
    30da:	d127      	bne.n	312c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    30dc:	697b      	ldr	r3, [r7, #20]
    30de:	2238      	movs	r2, #56	; 0x38
    30e0:	2100      	movs	r1, #0
    30e2:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    30e4:	693b      	ldr	r3, [r7, #16]
    30e6:	2204      	movs	r2, #4
    30e8:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    30ea:	697b      	ldr	r3, [r7, #20]
    30ec:	7a5b      	ldrb	r3, [r3, #9]
    30ee:	b2db      	uxtb	r3, r3
    30f0:	2b02      	cmp	r3, #2
    30f2:	d10b      	bne.n	310c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    30f4:	230f      	movs	r3, #15
    30f6:	18fb      	adds	r3, r7, r3
    30f8:	781b      	ldrb	r3, [r3, #0]
    30fa:	2204      	movs	r2, #4
    30fc:	4013      	ands	r3, r2
    30fe:	d015      	beq.n	312c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3100:	697b      	ldr	r3, [r7, #20]
    3102:	695b      	ldr	r3, [r3, #20]
    3104:	697a      	ldr	r2, [r7, #20]
    3106:	0010      	movs	r0, r2
    3108:	4798      	blx	r3
    310a:	e00f      	b.n	312c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    310c:	697b      	ldr	r3, [r7, #20]
    310e:	7a5b      	ldrb	r3, [r3, #9]
    3110:	b2db      	uxtb	r3, r3
    3112:	2b00      	cmp	r3, #0
    3114:	d10a      	bne.n	312c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3116:	230f      	movs	r3, #15
    3118:	18fb      	adds	r3, r7, r3
    311a:	781b      	ldrb	r3, [r3, #0]
    311c:	2202      	movs	r2, #2
    311e:	4013      	ands	r3, r2
    3120:	d004      	beq.n	312c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3122:	697b      	ldr	r3, [r7, #20]
    3124:	691b      	ldr	r3, [r3, #16]
    3126:	697a      	ldr	r2, [r7, #20]
    3128:	0010      	movs	r0, r2
    312a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    312c:	230c      	movs	r3, #12
    312e:	18fb      	adds	r3, r7, r3
    3130:	881b      	ldrh	r3, [r3, #0]
    3132:	2202      	movs	r2, #2
    3134:	4013      	ands	r3, r2
    3136:	d046      	beq.n	31c6 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    3138:	697b      	ldr	r3, [r7, #20]
    313a:	795b      	ldrb	r3, [r3, #5]
    313c:	2b00      	cmp	r3, #0
    313e:	d11d      	bne.n	317c <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    3140:	693b      	ldr	r3, [r7, #16]
    3142:	2207      	movs	r2, #7
    3144:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3146:	693b      	ldr	r3, [r7, #16]
    3148:	2202      	movs	r2, #2
    314a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    314c:	697b      	ldr	r3, [r7, #20]
    314e:	2203      	movs	r2, #3
    3150:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    3152:	697b      	ldr	r3, [r7, #20]
    3154:	2200      	movs	r2, #0
    3156:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    3158:	697b      	ldr	r3, [r7, #20]
    315a:	2200      	movs	r2, #0
    315c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    315e:	697b      	ldr	r3, [r7, #20]
    3160:	2238      	movs	r2, #56	; 0x38
    3162:	2100      	movs	r1, #0
    3164:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    3166:	230f      	movs	r3, #15
    3168:	18fb      	adds	r3, r7, r3
    316a:	781b      	ldrb	r3, [r3, #0]
    316c:	2210      	movs	r2, #16
    316e:	4013      	ands	r3, r2
    3170:	d004      	beq.n	317c <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    3172:	697b      	ldr	r3, [r7, #20]
    3174:	69db      	ldr	r3, [r3, #28]
    3176:	697a      	ldr	r2, [r7, #20]
    3178:	0010      	movs	r0, r2
    317a:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    317c:	697b      	ldr	r3, [r7, #20]
    317e:	795b      	ldrb	r3, [r3, #5]
    3180:	2b01      	cmp	r3, #1
    3182:	d120      	bne.n	31c6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3184:	697b      	ldr	r3, [r7, #20]
    3186:	7a5b      	ldrb	r3, [r3, #9]
    3188:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    318a:	2b01      	cmp	r3, #1
    318c:	d11b      	bne.n	31c6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    318e:	697b      	ldr	r3, [r7, #20]
    3190:	79db      	ldrb	r3, [r3, #7]
    3192:	2201      	movs	r2, #1
    3194:	4053      	eors	r3, r2
    3196:	b2db      	uxtb	r3, r3
    3198:	2b00      	cmp	r3, #0
    319a:	d014      	beq.n	31c6 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    319c:	693b      	ldr	r3, [r7, #16]
    319e:	2202      	movs	r2, #2
    31a0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    31a2:	697b      	ldr	r3, [r7, #20]
    31a4:	2203      	movs	r2, #3
    31a6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    31a8:	697b      	ldr	r3, [r7, #20]
    31aa:	2238      	movs	r2, #56	; 0x38
    31ac:	2100      	movs	r1, #0
    31ae:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    31b0:	230f      	movs	r3, #15
    31b2:	18fb      	adds	r3, r7, r3
    31b4:	781b      	ldrb	r3, [r3, #0]
    31b6:	2201      	movs	r2, #1
    31b8:	4013      	ands	r3, r2
    31ba:	d004      	beq.n	31c6 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    31bc:	697b      	ldr	r3, [r7, #20]
    31be:	68db      	ldr	r3, [r3, #12]
    31c0:	697a      	ldr	r2, [r7, #20]
    31c2:	0010      	movs	r0, r2
    31c4:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    31c6:	230c      	movs	r3, #12
    31c8:	18fb      	adds	r3, r7, r3
    31ca:	881b      	ldrh	r3, [r3, #0]
    31cc:	2208      	movs	r2, #8
    31ce:	4013      	ands	r3, r2
    31d0:	d014      	beq.n	31fc <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    31d2:	697b      	ldr	r3, [r7, #20]
    31d4:	795b      	ldrb	r3, [r3, #5]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d110      	bne.n	31fc <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    31da:	693b      	ldr	r3, [r7, #16]
    31dc:	2208      	movs	r2, #8
    31de:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    31e0:	693b      	ldr	r3, [r7, #16]
    31e2:	2208      	movs	r2, #8
    31e4:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    31e6:	230f      	movs	r3, #15
    31e8:	18fb      	adds	r3, r7, r3
    31ea:	781b      	ldrb	r3, [r3, #0]
    31ec:	2220      	movs	r2, #32
    31ee:	4013      	ands	r3, r2
    31f0:	d004      	beq.n	31fc <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    31f2:	697b      	ldr	r3, [r7, #20]
    31f4:	6a1b      	ldr	r3, [r3, #32]
    31f6:	697a      	ldr	r2, [r7, #20]
    31f8:	0010      	movs	r0, r2
    31fa:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    31fc:	230c      	movs	r3, #12
    31fe:	18fb      	adds	r3, r7, r3
    3200:	881b      	ldrh	r3, [r3, #0]
    3202:	2280      	movs	r2, #128	; 0x80
    3204:	4013      	ands	r3, r2
    3206:	d010      	beq.n	322a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3208:	693b      	ldr	r3, [r7, #16]
    320a:	2280      	movs	r2, #128	; 0x80
    320c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    320e:	693b      	ldr	r3, [r7, #16]
    3210:	2280      	movs	r2, #128	; 0x80
    3212:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3214:	230f      	movs	r3, #15
    3216:	18fb      	adds	r3, r7, r3
    3218:	781b      	ldrb	r3, [r3, #0]
    321a:	2240      	movs	r2, #64	; 0x40
    321c:	4013      	ands	r3, r2
    321e:	d004      	beq.n	322a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3220:	697b      	ldr	r3, [r7, #20]
    3222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3224:	697a      	ldr	r2, [r7, #20]
    3226:	0010      	movs	r0, r2
    3228:	4798      	blx	r3
		}
	}
#  endif
}
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	46bd      	mov	sp, r7
    322e:	b006      	add	sp, #24
    3230:	bd80      	pop	{r7, pc}
    3232:	46c0      	nop			; (mov r8, r8)
    3234:	20000178 	.word	0x20000178
    3238:	00002e61 	.word	0x00002e61
    323c:	00002de5 	.word	0x00002de5
    3240:	00002e95 	.word	0x00002e95
    3244:	00002ecb 	.word	0x00002ecb

00003248 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3248:	b580      	push	{r7, lr}
    324a:	b082      	sub	sp, #8
    324c:	af00      	add	r7, sp, #0
    324e:	0002      	movs	r2, r0
    3250:	1dfb      	adds	r3, r7, #7
    3252:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3254:	46c0      	nop			; (mov r8, r8)
    3256:	46bd      	mov	sp, r7
    3258:	b002      	add	sp, #8
    325a:	bd80      	pop	{r7, pc}

0000325c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    325c:	b580      	push	{r7, lr}
    325e:	b084      	sub	sp, #16
    3260:	af00      	add	r7, sp, #0
    3262:	0002      	movs	r2, r0
    3264:	6039      	str	r1, [r7, #0]
    3266:	1dfb      	adds	r3, r7, #7
    3268:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    326a:	4b13      	ldr	r3, [pc, #76]	; (32b8 <_sercom_set_handler+0x5c>)
    326c:	781b      	ldrb	r3, [r3, #0]
    326e:	2201      	movs	r2, #1
    3270:	4053      	eors	r3, r2
    3272:	b2db      	uxtb	r3, r3
    3274:	2b00      	cmp	r3, #0
    3276:	d015      	beq.n	32a4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3278:	2300      	movs	r3, #0
    327a:	60fb      	str	r3, [r7, #12]
    327c:	e00c      	b.n	3298 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    327e:	4b0f      	ldr	r3, [pc, #60]	; (32bc <_sercom_set_handler+0x60>)
    3280:	68fa      	ldr	r2, [r7, #12]
    3282:	0092      	lsls	r2, r2, #2
    3284:	490e      	ldr	r1, [pc, #56]	; (32c0 <_sercom_set_handler+0x64>)
    3286:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3288:	4b0e      	ldr	r3, [pc, #56]	; (32c4 <_sercom_set_handler+0x68>)
    328a:	68fa      	ldr	r2, [r7, #12]
    328c:	0092      	lsls	r2, r2, #2
    328e:	2100      	movs	r1, #0
    3290:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3292:	68fb      	ldr	r3, [r7, #12]
    3294:	3301      	adds	r3, #1
    3296:	60fb      	str	r3, [r7, #12]
    3298:	68fb      	ldr	r3, [r7, #12]
    329a:	2b05      	cmp	r3, #5
    329c:	d9ef      	bls.n	327e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    329e:	4b06      	ldr	r3, [pc, #24]	; (32b8 <_sercom_set_handler+0x5c>)
    32a0:	2201      	movs	r2, #1
    32a2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    32a4:	1dfb      	adds	r3, r7, #7
    32a6:	781a      	ldrb	r2, [r3, #0]
    32a8:	4b04      	ldr	r3, [pc, #16]	; (32bc <_sercom_set_handler+0x60>)
    32aa:	0092      	lsls	r2, r2, #2
    32ac:	6839      	ldr	r1, [r7, #0]
    32ae:	50d1      	str	r1, [r2, r3]
}
    32b0:	46c0      	nop			; (mov r8, r8)
    32b2:	46bd      	mov	sp, r7
    32b4:	b004      	add	sp, #16
    32b6:	bd80      	pop	{r7, pc}
    32b8:	200000fa 	.word	0x200000fa
    32bc:	200000fc 	.word	0x200000fc
    32c0:	00003249 	.word	0x00003249
    32c4:	20000178 	.word	0x20000178

000032c8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    32c8:	b590      	push	{r4, r7, lr}
    32ca:	b085      	sub	sp, #20
    32cc:	af00      	add	r7, sp, #0
    32ce:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    32d0:	2308      	movs	r3, #8
    32d2:	18fb      	adds	r3, r7, r3
    32d4:	4a0b      	ldr	r2, [pc, #44]	; (3304 <_sercom_get_interrupt_vector+0x3c>)
    32d6:	6811      	ldr	r1, [r2, #0]
    32d8:	6019      	str	r1, [r3, #0]
    32da:	8892      	ldrh	r2, [r2, #4]
    32dc:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    32de:	230f      	movs	r3, #15
    32e0:	18fc      	adds	r4, r7, r3
    32e2:	687b      	ldr	r3, [r7, #4]
    32e4:	0018      	movs	r0, r3
    32e6:	4b08      	ldr	r3, [pc, #32]	; (3308 <_sercom_get_interrupt_vector+0x40>)
    32e8:	4798      	blx	r3
    32ea:	0003      	movs	r3, r0
    32ec:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    32ee:	230f      	movs	r3, #15
    32f0:	18fb      	adds	r3, r7, r3
    32f2:	781b      	ldrb	r3, [r3, #0]
    32f4:	2208      	movs	r2, #8
    32f6:	18ba      	adds	r2, r7, r2
    32f8:	5cd3      	ldrb	r3, [r2, r3]
    32fa:	b25b      	sxtb	r3, r3
}
    32fc:	0018      	movs	r0, r3
    32fe:	46bd      	mov	sp, r7
    3300:	b005      	add	sp, #20
    3302:	bd90      	pop	{r4, r7, pc}
    3304:	0000460c 	.word	0x0000460c
    3308:	0000120d 	.word	0x0000120d

0000330c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    330c:	b580      	push	{r7, lr}
    330e:	af00      	add	r7, sp, #0
    3310:	4b03      	ldr	r3, [pc, #12]	; (3320 <SERCOM0_Handler+0x14>)
    3312:	681b      	ldr	r3, [r3, #0]
    3314:	2000      	movs	r0, #0
    3316:	4798      	blx	r3
    3318:	46c0      	nop			; (mov r8, r8)
    331a:	46bd      	mov	sp, r7
    331c:	bd80      	pop	{r7, pc}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	200000fc 	.word	0x200000fc

00003324 <SERCOM1_Handler>:
    3324:	b580      	push	{r7, lr}
    3326:	af00      	add	r7, sp, #0
    3328:	4b03      	ldr	r3, [pc, #12]	; (3338 <SERCOM1_Handler+0x14>)
    332a:	685b      	ldr	r3, [r3, #4]
    332c:	2001      	movs	r0, #1
    332e:	4798      	blx	r3
    3330:	46c0      	nop			; (mov r8, r8)
    3332:	46bd      	mov	sp, r7
    3334:	bd80      	pop	{r7, pc}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	200000fc 	.word	0x200000fc

0000333c <SERCOM2_Handler>:
    333c:	b580      	push	{r7, lr}
    333e:	af00      	add	r7, sp, #0
    3340:	4b03      	ldr	r3, [pc, #12]	; (3350 <SERCOM2_Handler+0x14>)
    3342:	689b      	ldr	r3, [r3, #8]
    3344:	2002      	movs	r0, #2
    3346:	4798      	blx	r3
    3348:	46c0      	nop			; (mov r8, r8)
    334a:	46bd      	mov	sp, r7
    334c:	bd80      	pop	{r7, pc}
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	200000fc 	.word	0x200000fc

00003354 <SERCOM3_Handler>:
    3354:	b580      	push	{r7, lr}
    3356:	af00      	add	r7, sp, #0
    3358:	4b03      	ldr	r3, [pc, #12]	; (3368 <SERCOM3_Handler+0x14>)
    335a:	68db      	ldr	r3, [r3, #12]
    335c:	2003      	movs	r0, #3
    335e:	4798      	blx	r3
    3360:	46c0      	nop			; (mov r8, r8)
    3362:	46bd      	mov	sp, r7
    3364:	bd80      	pop	{r7, pc}
    3366:	46c0      	nop			; (mov r8, r8)
    3368:	200000fc 	.word	0x200000fc

0000336c <SERCOM4_Handler>:
    336c:	b580      	push	{r7, lr}
    336e:	af00      	add	r7, sp, #0
    3370:	4b03      	ldr	r3, [pc, #12]	; (3380 <SERCOM4_Handler+0x14>)
    3372:	691b      	ldr	r3, [r3, #16]
    3374:	2004      	movs	r0, #4
    3376:	4798      	blx	r3
    3378:	46c0      	nop			; (mov r8, r8)
    337a:	46bd      	mov	sp, r7
    337c:	bd80      	pop	{r7, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	200000fc 	.word	0x200000fc

00003384 <SERCOM5_Handler>:
    3384:	b580      	push	{r7, lr}
    3386:	af00      	add	r7, sp, #0
    3388:	4b03      	ldr	r3, [pc, #12]	; (3398 <SERCOM5_Handler+0x14>)
    338a:	695b      	ldr	r3, [r3, #20]
    338c:	2005      	movs	r0, #5
    338e:	4798      	blx	r3
    3390:	46c0      	nop			; (mov r8, r8)
    3392:	46bd      	mov	sp, r7
    3394:	bd80      	pop	{r7, pc}
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	200000fc 	.word	0x200000fc

0000339c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    339c:	b580      	push	{r7, lr}
    339e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    33a0:	46c0      	nop			; (mov r8, r8)
    33a2:	46bd      	mov	sp, r7
    33a4:	bd80      	pop	{r7, pc}
	...

000033a8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    33a8:	b580      	push	{r7, lr}
    33aa:	b082      	sub	sp, #8
    33ac:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    33ae:	4b10      	ldr	r3, [pc, #64]	; (33f0 <cpu_irq_enter_critical+0x48>)
    33b0:	681b      	ldr	r3, [r3, #0]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d112      	bne.n	33dc <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    33b6:	f3ef 8310 	mrs	r3, PRIMASK
    33ba:	607b      	str	r3, [r7, #4]
  return(result);
    33bc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    33be:	2b00      	cmp	r3, #0
    33c0:	d109      	bne.n	33d6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    33c2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    33c4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    33c8:	4b0a      	ldr	r3, [pc, #40]	; (33f4 <cpu_irq_enter_critical+0x4c>)
    33ca:	2200      	movs	r2, #0
    33cc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    33ce:	4b0a      	ldr	r3, [pc, #40]	; (33f8 <cpu_irq_enter_critical+0x50>)
    33d0:	2201      	movs	r2, #1
    33d2:	701a      	strb	r2, [r3, #0]
    33d4:	e002      	b.n	33dc <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    33d6:	4b08      	ldr	r3, [pc, #32]	; (33f8 <cpu_irq_enter_critical+0x50>)
    33d8:	2200      	movs	r2, #0
    33da:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    33dc:	4b04      	ldr	r3, [pc, #16]	; (33f0 <cpu_irq_enter_critical+0x48>)
    33de:	681b      	ldr	r3, [r3, #0]
    33e0:	1c5a      	adds	r2, r3, #1
    33e2:	4b03      	ldr	r3, [pc, #12]	; (33f0 <cpu_irq_enter_critical+0x48>)
    33e4:	601a      	str	r2, [r3, #0]
}
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	46bd      	mov	sp, r7
    33ea:	b002      	add	sp, #8
    33ec:	bd80      	pop	{r7, pc}
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	20000114 	.word	0x20000114
    33f4:	20000018 	.word	0x20000018
    33f8:	20000118 	.word	0x20000118

000033fc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    33fc:	b580      	push	{r7, lr}
    33fe:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3400:	4b0b      	ldr	r3, [pc, #44]	; (3430 <cpu_irq_leave_critical+0x34>)
    3402:	681b      	ldr	r3, [r3, #0]
    3404:	1e5a      	subs	r2, r3, #1
    3406:	4b0a      	ldr	r3, [pc, #40]	; (3430 <cpu_irq_leave_critical+0x34>)
    3408:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    340a:	4b09      	ldr	r3, [pc, #36]	; (3430 <cpu_irq_leave_critical+0x34>)
    340c:	681b      	ldr	r3, [r3, #0]
    340e:	2b00      	cmp	r3, #0
    3410:	d10a      	bne.n	3428 <cpu_irq_leave_critical+0x2c>
    3412:	4b08      	ldr	r3, [pc, #32]	; (3434 <cpu_irq_leave_critical+0x38>)
    3414:	781b      	ldrb	r3, [r3, #0]
    3416:	b2db      	uxtb	r3, r3
    3418:	2b00      	cmp	r3, #0
    341a:	d005      	beq.n	3428 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    341c:	4b06      	ldr	r3, [pc, #24]	; (3438 <cpu_irq_leave_critical+0x3c>)
    341e:	2201      	movs	r2, #1
    3420:	701a      	strb	r2, [r3, #0]
    3422:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3426:	b662      	cpsie	i
	}
}
    3428:	46c0      	nop			; (mov r8, r8)
    342a:	46bd      	mov	sp, r7
    342c:	bd80      	pop	{r7, pc}
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	20000114 	.word	0x20000114
    3434:	20000118 	.word	0x20000118
    3438:	20000018 	.word	0x20000018

0000343c <system_gclk_gen_get_config_defaults>:
{
    343c:	b580      	push	{r7, lr}
    343e:	b082      	sub	sp, #8
    3440:	af00      	add	r7, sp, #0
    3442:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    3444:	687b      	ldr	r3, [r7, #4]
    3446:	2201      	movs	r2, #1
    3448:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    344a:	687b      	ldr	r3, [r7, #4]
    344c:	2200      	movs	r2, #0
    344e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3450:	687b      	ldr	r3, [r7, #4]
    3452:	2206      	movs	r2, #6
    3454:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    3456:	687b      	ldr	r3, [r7, #4]
    3458:	2200      	movs	r2, #0
    345a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	2200      	movs	r2, #0
    3460:	725a      	strb	r2, [r3, #9]
}
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	46bd      	mov	sp, r7
    3466:	b002      	add	sp, #8
    3468:	bd80      	pop	{r7, pc}

0000346a <system_clock_source_osc8m_get_config_defaults>:
{
    346a:	b580      	push	{r7, lr}
    346c:	b082      	sub	sp, #8
    346e:	af00      	add	r7, sp, #0
    3470:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    3472:	687b      	ldr	r3, [r7, #4]
    3474:	2203      	movs	r2, #3
    3476:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    3478:	687b      	ldr	r3, [r7, #4]
    347a:	2200      	movs	r2, #0
    347c:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	2201      	movs	r2, #1
    3482:	709a      	strb	r2, [r3, #2]
}
    3484:	46c0      	nop			; (mov r8, r8)
    3486:	46bd      	mov	sp, r7
    3488:	b002      	add	sp, #8
    348a:	bd80      	pop	{r7, pc}

0000348c <system_cpu_clock_set_divider>:
{
    348c:	b580      	push	{r7, lr}
    348e:	b082      	sub	sp, #8
    3490:	af00      	add	r7, sp, #0
    3492:	0002      	movs	r2, r0
    3494:	1dfb      	adds	r3, r7, #7
    3496:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    3498:	4a03      	ldr	r2, [pc, #12]	; (34a8 <system_cpu_clock_set_divider+0x1c>)
    349a:	1dfb      	adds	r3, r7, #7
    349c:	781b      	ldrb	r3, [r3, #0]
    349e:	7213      	strb	r3, [r2, #8]
}
    34a0:	46c0      	nop			; (mov r8, r8)
    34a2:	46bd      	mov	sp, r7
    34a4:	b002      	add	sp, #8
    34a6:	bd80      	pop	{r7, pc}
    34a8:	40000400 	.word	0x40000400

000034ac <system_apb_clock_set_divider>:
{
    34ac:	b580      	push	{r7, lr}
    34ae:	b082      	sub	sp, #8
    34b0:	af00      	add	r7, sp, #0
    34b2:	0002      	movs	r2, r0
    34b4:	1dfb      	adds	r3, r7, #7
    34b6:	701a      	strb	r2, [r3, #0]
    34b8:	1dbb      	adds	r3, r7, #6
    34ba:	1c0a      	adds	r2, r1, #0
    34bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    34be:	1dfb      	adds	r3, r7, #7
    34c0:	781b      	ldrb	r3, [r3, #0]
    34c2:	2b01      	cmp	r3, #1
    34c4:	d008      	beq.n	34d8 <system_apb_clock_set_divider+0x2c>
    34c6:	2b02      	cmp	r3, #2
    34c8:	d00b      	beq.n	34e2 <system_apb_clock_set_divider+0x36>
    34ca:	2b00      	cmp	r3, #0
    34cc:	d10e      	bne.n	34ec <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    34ce:	4a0b      	ldr	r2, [pc, #44]	; (34fc <system_apb_clock_set_divider+0x50>)
    34d0:	1dbb      	adds	r3, r7, #6
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	7253      	strb	r3, [r2, #9]
			break;
    34d6:	e00b      	b.n	34f0 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    34d8:	4a08      	ldr	r2, [pc, #32]	; (34fc <system_apb_clock_set_divider+0x50>)
    34da:	1dbb      	adds	r3, r7, #6
    34dc:	781b      	ldrb	r3, [r3, #0]
    34de:	7293      	strb	r3, [r2, #10]
			break;
    34e0:	e006      	b.n	34f0 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    34e2:	4a06      	ldr	r2, [pc, #24]	; (34fc <system_apb_clock_set_divider+0x50>)
    34e4:	1dbb      	adds	r3, r7, #6
    34e6:	781b      	ldrb	r3, [r3, #0]
    34e8:	72d3      	strb	r3, [r2, #11]
			break;
    34ea:	e001      	b.n	34f0 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    34ec:	2317      	movs	r3, #23
    34ee:	e000      	b.n	34f2 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    34f0:	2300      	movs	r3, #0
}
    34f2:	0018      	movs	r0, r3
    34f4:	46bd      	mov	sp, r7
    34f6:	b002      	add	sp, #8
    34f8:	bd80      	pop	{r7, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	40000400 	.word	0x40000400

00003500 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    3500:	b580      	push	{r7, lr}
    3502:	b082      	sub	sp, #8
    3504:	af00      	add	r7, sp, #0
    3506:	0002      	movs	r2, r0
    3508:	1dfb      	adds	r3, r7, #7
    350a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    350c:	4a08      	ldr	r2, [pc, #32]	; (3530 <system_flash_set_waitstates+0x30>)
    350e:	1dfb      	adds	r3, r7, #7
    3510:	781b      	ldrb	r3, [r3, #0]
    3512:	210f      	movs	r1, #15
    3514:	400b      	ands	r3, r1
    3516:	b2d9      	uxtb	r1, r3
    3518:	6853      	ldr	r3, [r2, #4]
    351a:	200f      	movs	r0, #15
    351c:	4001      	ands	r1, r0
    351e:	0049      	lsls	r1, r1, #1
    3520:	201e      	movs	r0, #30
    3522:	4383      	bics	r3, r0
    3524:	430b      	orrs	r3, r1
    3526:	6053      	str	r3, [r2, #4]
}
    3528:	46c0      	nop			; (mov r8, r8)
    352a:	46bd      	mov	sp, r7
    352c:	b002      	add	sp, #8
    352e:	bd80      	pop	{r7, pc}
    3530:	41004000 	.word	0x41004000

00003534 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3534:	b580      	push	{r7, lr}
    3536:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3538:	46c0      	nop			; (mov r8, r8)
    353a:	4b04      	ldr	r3, [pc, #16]	; (354c <_system_dfll_wait_for_sync+0x18>)
    353c:	68db      	ldr	r3, [r3, #12]
    353e:	2210      	movs	r2, #16
    3540:	4013      	ands	r3, r2
    3542:	d0fa      	beq.n	353a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3544:	46c0      	nop			; (mov r8, r8)
    3546:	46bd      	mov	sp, r7
    3548:	bd80      	pop	{r7, pc}
    354a:	46c0      	nop			; (mov r8, r8)
    354c:	40000800 	.word	0x40000800

00003550 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3550:	b580      	push	{r7, lr}
    3552:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3554:	4b0c      	ldr	r3, [pc, #48]	; (3588 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3556:	2202      	movs	r2, #2
    3558:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    355a:	4b0c      	ldr	r3, [pc, #48]	; (358c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    355c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    355e:	4a0a      	ldr	r2, [pc, #40]	; (3588 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3560:	4b0b      	ldr	r3, [pc, #44]	; (3590 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3562:	689b      	ldr	r3, [r3, #8]
    3564:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3566:	4a08      	ldr	r2, [pc, #32]	; (3588 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3568:	4b09      	ldr	r3, [pc, #36]	; (3590 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    356a:	685b      	ldr	r3, [r3, #4]
    356c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    356e:	4b06      	ldr	r3, [pc, #24]	; (3588 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3570:	2200      	movs	r2, #0
    3572:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3574:	4b05      	ldr	r3, [pc, #20]	; (358c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3576:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3578:	4a03      	ldr	r2, [pc, #12]	; (3588 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    357a:	4b05      	ldr	r3, [pc, #20]	; (3590 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    357c:	681b      	ldr	r3, [r3, #0]
    357e:	b29b      	uxth	r3, r3
    3580:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	46bd      	mov	sp, r7
    3586:	bd80      	pop	{r7, pc}
    3588:	40000800 	.word	0x40000800
    358c:	00003535 	.word	0x00003535
    3590:	2000011c 	.word	0x2000011c

00003594 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3594:	b580      	push	{r7, lr}
    3596:	b082      	sub	sp, #8
    3598:	af00      	add	r7, sp, #0
    359a:	0002      	movs	r2, r0
    359c:	1dfb      	adds	r3, r7, #7
    359e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    35a0:	1dfb      	adds	r3, r7, #7
    35a2:	781b      	ldrb	r3, [r3, #0]
    35a4:	2b08      	cmp	r3, #8
    35a6:	d840      	bhi.n	362a <system_clock_source_get_hz+0x96>
    35a8:	009a      	lsls	r2, r3, #2
    35aa:	4b22      	ldr	r3, [pc, #136]	; (3634 <system_clock_source_get_hz+0xa0>)
    35ac:	18d3      	adds	r3, r2, r3
    35ae:	681b      	ldr	r3, [r3, #0]
    35b0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    35b2:	4b21      	ldr	r3, [pc, #132]	; (3638 <system_clock_source_get_hz+0xa4>)
    35b4:	691b      	ldr	r3, [r3, #16]
    35b6:	e039      	b.n	362c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    35b8:	4b20      	ldr	r3, [pc, #128]	; (363c <system_clock_source_get_hz+0xa8>)
    35ba:	6a1b      	ldr	r3, [r3, #32]
    35bc:	059b      	lsls	r3, r3, #22
    35be:	0f9b      	lsrs	r3, r3, #30
    35c0:	b2db      	uxtb	r3, r3
    35c2:	001a      	movs	r2, r3
    35c4:	4b1e      	ldr	r3, [pc, #120]	; (3640 <system_clock_source_get_hz+0xac>)
    35c6:	40d3      	lsrs	r3, r2
    35c8:	e030      	b.n	362c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    35ca:	2380      	movs	r3, #128	; 0x80
    35cc:	021b      	lsls	r3, r3, #8
    35ce:	e02d      	b.n	362c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    35d0:	2380      	movs	r3, #128	; 0x80
    35d2:	021b      	lsls	r3, r3, #8
    35d4:	e02a      	b.n	362c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    35d6:	4b18      	ldr	r3, [pc, #96]	; (3638 <system_clock_source_get_hz+0xa4>)
    35d8:	695b      	ldr	r3, [r3, #20]
    35da:	e027      	b.n	362c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    35dc:	4b16      	ldr	r3, [pc, #88]	; (3638 <system_clock_source_get_hz+0xa4>)
    35de:	681b      	ldr	r3, [r3, #0]
    35e0:	2202      	movs	r2, #2
    35e2:	4013      	ands	r3, r2
    35e4:	d101      	bne.n	35ea <system_clock_source_get_hz+0x56>
			return 0;
    35e6:	2300      	movs	r3, #0
    35e8:	e020      	b.n	362c <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    35ea:	4b16      	ldr	r3, [pc, #88]	; (3644 <system_clock_source_get_hz+0xb0>)
    35ec:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    35ee:	4b12      	ldr	r3, [pc, #72]	; (3638 <system_clock_source_get_hz+0xa4>)
    35f0:	681b      	ldr	r3, [r3, #0]
    35f2:	2204      	movs	r2, #4
    35f4:	4013      	ands	r3, r2
    35f6:	d009      	beq.n	360c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    35f8:	2000      	movs	r0, #0
    35fa:	4b13      	ldr	r3, [pc, #76]	; (3648 <system_clock_source_get_hz+0xb4>)
    35fc:	4798      	blx	r3
    35fe:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    3600:	4b0d      	ldr	r3, [pc, #52]	; (3638 <system_clock_source_get_hz+0xa4>)
    3602:	689b      	ldr	r3, [r3, #8]
    3604:	041b      	lsls	r3, r3, #16
    3606:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3608:	4353      	muls	r3, r2
    360a:	e00f      	b.n	362c <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    360c:	4b0f      	ldr	r3, [pc, #60]	; (364c <system_clock_source_get_hz+0xb8>)
    360e:	e00d      	b.n	362c <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3610:	4a0a      	ldr	r2, [pc, #40]	; (363c <system_clock_source_get_hz+0xa8>)
    3612:	2350      	movs	r3, #80	; 0x50
    3614:	5cd3      	ldrb	r3, [r2, r3]
    3616:	b2db      	uxtb	r3, r3
    3618:	001a      	movs	r2, r3
    361a:	2304      	movs	r3, #4
    361c:	4013      	ands	r3, r2
    361e:	d101      	bne.n	3624 <system_clock_source_get_hz+0x90>
			return 0;
    3620:	2300      	movs	r3, #0
    3622:	e003      	b.n	362c <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    3624:	4b04      	ldr	r3, [pc, #16]	; (3638 <system_clock_source_get_hz+0xa4>)
    3626:	68db      	ldr	r3, [r3, #12]
    3628:	e000      	b.n	362c <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    362a:	2300      	movs	r3, #0
	}
}
    362c:	0018      	movs	r0, r3
    362e:	46bd      	mov	sp, r7
    3630:	b002      	add	sp, #8
    3632:	bd80      	pop	{r7, pc}
    3634:	00004614 	.word	0x00004614
    3638:	2000011c 	.word	0x2000011c
    363c:	40000800 	.word	0x40000800
    3640:	007a1200 	.word	0x007a1200
    3644:	00003535 	.word	0x00003535
    3648:	00003cd1 	.word	0x00003cd1
    364c:	02dc6c00 	.word	0x02dc6c00

00003650 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3650:	b580      	push	{r7, lr}
    3652:	b084      	sub	sp, #16
    3654:	af00      	add	r7, sp, #0
    3656:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3658:	4b1a      	ldr	r3, [pc, #104]	; (36c4 <system_clock_source_osc8m_set_config+0x74>)
    365a:	6a1b      	ldr	r3, [r3, #32]
    365c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	781b      	ldrb	r3, [r3, #0]
    3662:	1c1a      	adds	r2, r3, #0
    3664:	2303      	movs	r3, #3
    3666:	4013      	ands	r3, r2
    3668:	b2da      	uxtb	r2, r3
    366a:	230d      	movs	r3, #13
    366c:	18fb      	adds	r3, r7, r3
    366e:	2103      	movs	r1, #3
    3670:	400a      	ands	r2, r1
    3672:	0010      	movs	r0, r2
    3674:	781a      	ldrb	r2, [r3, #0]
    3676:	2103      	movs	r1, #3
    3678:	438a      	bics	r2, r1
    367a:	1c11      	adds	r1, r2, #0
    367c:	1c02      	adds	r2, r0, #0
    367e:	430a      	orrs	r2, r1
    3680:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3682:	687b      	ldr	r3, [r7, #4]
    3684:	789a      	ldrb	r2, [r3, #2]
    3686:	230c      	movs	r3, #12
    3688:	18fb      	adds	r3, r7, r3
    368a:	01d0      	lsls	r0, r2, #7
    368c:	781a      	ldrb	r2, [r3, #0]
    368e:	217f      	movs	r1, #127	; 0x7f
    3690:	400a      	ands	r2, r1
    3692:	1c11      	adds	r1, r2, #0
    3694:	1c02      	adds	r2, r0, #0
    3696:	430a      	orrs	r2, r1
    3698:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    369a:	687b      	ldr	r3, [r7, #4]
    369c:	785a      	ldrb	r2, [r3, #1]
    369e:	230c      	movs	r3, #12
    36a0:	18fb      	adds	r3, r7, r3
    36a2:	2101      	movs	r1, #1
    36a4:	400a      	ands	r2, r1
    36a6:	0190      	lsls	r0, r2, #6
    36a8:	781a      	ldrb	r2, [r3, #0]
    36aa:	2140      	movs	r1, #64	; 0x40
    36ac:	438a      	bics	r2, r1
    36ae:	1c11      	adds	r1, r2, #0
    36b0:	1c02      	adds	r2, r0, #0
    36b2:	430a      	orrs	r2, r1
    36b4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    36b6:	4b03      	ldr	r3, [pc, #12]	; (36c4 <system_clock_source_osc8m_set_config+0x74>)
    36b8:	68fa      	ldr	r2, [r7, #12]
    36ba:	621a      	str	r2, [r3, #32]
}
    36bc:	46c0      	nop			; (mov r8, r8)
    36be:	46bd      	mov	sp, r7
    36c0:	b004      	add	sp, #16
    36c2:	bd80      	pop	{r7, pc}
    36c4:	40000800 	.word	0x40000800

000036c8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    36c8:	b580      	push	{r7, lr}
    36ca:	b082      	sub	sp, #8
    36cc:	af00      	add	r7, sp, #0
    36ce:	0002      	movs	r2, r0
    36d0:	1dfb      	adds	r3, r7, #7
    36d2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    36d4:	1dfb      	adds	r3, r7, #7
    36d6:	781b      	ldrb	r3, [r3, #0]
    36d8:	2b08      	cmp	r3, #8
    36da:	d83b      	bhi.n	3754 <system_clock_source_enable+0x8c>
    36dc:	009a      	lsls	r2, r3, #2
    36de:	4b21      	ldr	r3, [pc, #132]	; (3764 <system_clock_source_enable+0x9c>)
    36e0:	18d3      	adds	r3, r2, r3
    36e2:	681b      	ldr	r3, [r3, #0]
    36e4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    36e6:	4b20      	ldr	r3, [pc, #128]	; (3768 <system_clock_source_enable+0xa0>)
    36e8:	4a1f      	ldr	r2, [pc, #124]	; (3768 <system_clock_source_enable+0xa0>)
    36ea:	6a12      	ldr	r2, [r2, #32]
    36ec:	2102      	movs	r1, #2
    36ee:	430a      	orrs	r2, r1
    36f0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    36f2:	2300      	movs	r3, #0
    36f4:	e031      	b.n	375a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    36f6:	4b1c      	ldr	r3, [pc, #112]	; (3768 <system_clock_source_enable+0xa0>)
    36f8:	4a1b      	ldr	r2, [pc, #108]	; (3768 <system_clock_source_enable+0xa0>)
    36fa:	6992      	ldr	r2, [r2, #24]
    36fc:	2102      	movs	r1, #2
    36fe:	430a      	orrs	r2, r1
    3700:	619a      	str	r2, [r3, #24]
		break;
    3702:	e029      	b.n	3758 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3704:	4a18      	ldr	r2, [pc, #96]	; (3768 <system_clock_source_enable+0xa0>)
    3706:	4b18      	ldr	r3, [pc, #96]	; (3768 <system_clock_source_enable+0xa0>)
    3708:	8a1b      	ldrh	r3, [r3, #16]
    370a:	b29b      	uxth	r3, r3
    370c:	2102      	movs	r1, #2
    370e:	430b      	orrs	r3, r1
    3710:	b29b      	uxth	r3, r3
    3712:	8213      	strh	r3, [r2, #16]
		break;
    3714:	e020      	b.n	3758 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3716:	4a14      	ldr	r2, [pc, #80]	; (3768 <system_clock_source_enable+0xa0>)
    3718:	4b13      	ldr	r3, [pc, #76]	; (3768 <system_clock_source_enable+0xa0>)
    371a:	8a9b      	ldrh	r3, [r3, #20]
    371c:	b29b      	uxth	r3, r3
    371e:	2102      	movs	r1, #2
    3720:	430b      	orrs	r3, r1
    3722:	b29b      	uxth	r3, r3
    3724:	8293      	strh	r3, [r2, #20]
		break;
    3726:	e017      	b.n	3758 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3728:	4b10      	ldr	r3, [pc, #64]	; (376c <system_clock_source_enable+0xa4>)
    372a:	681b      	ldr	r3, [r3, #0]
    372c:	2202      	movs	r2, #2
    372e:	431a      	orrs	r2, r3
    3730:	4b0e      	ldr	r3, [pc, #56]	; (376c <system_clock_source_enable+0xa4>)
    3732:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    3734:	4b0e      	ldr	r3, [pc, #56]	; (3770 <system_clock_source_enable+0xa8>)
    3736:	4798      	blx	r3
		break;
    3738:	e00e      	b.n	3758 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    373a:	4a0b      	ldr	r2, [pc, #44]	; (3768 <system_clock_source_enable+0xa0>)
    373c:	490a      	ldr	r1, [pc, #40]	; (3768 <system_clock_source_enable+0xa0>)
    373e:	2344      	movs	r3, #68	; 0x44
    3740:	5ccb      	ldrb	r3, [r1, r3]
    3742:	b2db      	uxtb	r3, r3
    3744:	2102      	movs	r1, #2
    3746:	430b      	orrs	r3, r1
    3748:	b2d9      	uxtb	r1, r3
    374a:	2344      	movs	r3, #68	; 0x44
    374c:	54d1      	strb	r1, [r2, r3]
		break;
    374e:	e003      	b.n	3758 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3750:	2300      	movs	r3, #0
    3752:	e002      	b.n	375a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3754:	2317      	movs	r3, #23
    3756:	e000      	b.n	375a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    3758:	2300      	movs	r3, #0
}
    375a:	0018      	movs	r0, r3
    375c:	46bd      	mov	sp, r7
    375e:	b002      	add	sp, #8
    3760:	bd80      	pop	{r7, pc}
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	00004638 	.word	0x00004638
    3768:	40000800 	.word	0x40000800
    376c:	2000011c 	.word	0x2000011c
    3770:	00003551 	.word	0x00003551

00003774 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3774:	b580      	push	{r7, lr}
    3776:	b082      	sub	sp, #8
    3778:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    377a:	003b      	movs	r3, r7
    377c:	2201      	movs	r2, #1
    377e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3780:	2300      	movs	r3, #0
    3782:	607b      	str	r3, [r7, #4]
    3784:	e009      	b.n	379a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3786:	687b      	ldr	r3, [r7, #4]
    3788:	b2db      	uxtb	r3, r3
    378a:	003a      	movs	r2, r7
    378c:	0011      	movs	r1, r2
    378e:	0018      	movs	r0, r3
    3790:	4b05      	ldr	r3, [pc, #20]	; (37a8 <_switch_peripheral_gclk+0x34>)
    3792:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3794:	687b      	ldr	r3, [r7, #4]
    3796:	3301      	adds	r3, #1
    3798:	607b      	str	r3, [r7, #4]
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	2b24      	cmp	r3, #36	; 0x24
    379e:	d9f2      	bls.n	3786 <_switch_peripheral_gclk+0x12>
	}
}
    37a0:	46c0      	nop			; (mov r8, r8)
    37a2:	46bd      	mov	sp, r7
    37a4:	b002      	add	sp, #8
    37a6:	bd80      	pop	{r7, pc}
    37a8:	00003bad 	.word	0x00003bad

000037ac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    37ac:	b580      	push	{r7, lr}
    37ae:	b0a0      	sub	sp, #128	; 0x80
    37b0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    37b2:	4b27      	ldr	r3, [pc, #156]	; (3850 <system_clock_init+0xa4>)
    37b4:	22c2      	movs	r2, #194	; 0xc2
    37b6:	00d2      	lsls	r2, r2, #3
    37b8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    37ba:	2000      	movs	r0, #0
    37bc:	4b25      	ldr	r3, [pc, #148]	; (3854 <system_clock_init+0xa8>)
    37be:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    37c0:	4b25      	ldr	r3, [pc, #148]	; (3858 <system_clock_init+0xac>)
    37c2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    37c4:	237c      	movs	r3, #124	; 0x7c
    37c6:	18fb      	adds	r3, r7, r3
    37c8:	0018      	movs	r0, r3
    37ca:	4b24      	ldr	r3, [pc, #144]	; (385c <system_clock_init+0xb0>)
    37cc:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    37ce:	237c      	movs	r3, #124	; 0x7c
    37d0:	18fb      	adds	r3, r7, r3
    37d2:	2200      	movs	r2, #0
    37d4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    37d6:	237c      	movs	r3, #124	; 0x7c
    37d8:	18fb      	adds	r3, r7, r3
    37da:	2201      	movs	r2, #1
    37dc:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    37de:	237c      	movs	r3, #124	; 0x7c
    37e0:	18fb      	adds	r3, r7, r3
    37e2:	2200      	movs	r2, #0
    37e4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    37e6:	237c      	movs	r3, #124	; 0x7c
    37e8:	18fb      	adds	r3, r7, r3
    37ea:	0018      	movs	r0, r3
    37ec:	4b1c      	ldr	r3, [pc, #112]	; (3860 <system_clock_init+0xb4>)
    37ee:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    37f0:	2006      	movs	r0, #6
    37f2:	4b1c      	ldr	r3, [pc, #112]	; (3864 <system_clock_init+0xb8>)
    37f4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    37f6:	4b1c      	ldr	r3, [pc, #112]	; (3868 <system_clock_init+0xbc>)
    37f8:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    37fa:	2000      	movs	r0, #0
    37fc:	4b1b      	ldr	r3, [pc, #108]	; (386c <system_clock_init+0xc0>)
    37fe:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3800:	2100      	movs	r1, #0
    3802:	2000      	movs	r0, #0
    3804:	4b1a      	ldr	r3, [pc, #104]	; (3870 <system_clock_init+0xc4>)
    3806:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    3808:	2100      	movs	r1, #0
    380a:	2001      	movs	r0, #1
    380c:	4b18      	ldr	r3, [pc, #96]	; (3870 <system_clock_init+0xc4>)
    380e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    3810:	2100      	movs	r1, #0
    3812:	2002      	movs	r0, #2
    3814:	4b16      	ldr	r3, [pc, #88]	; (3870 <system_clock_init+0xc4>)
    3816:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3818:	1d3b      	adds	r3, r7, #4
    381a:	0018      	movs	r0, r3
    381c:	4b15      	ldr	r3, [pc, #84]	; (3874 <system_clock_init+0xc8>)
    381e:	4798      	blx	r3
    3820:	1d3b      	adds	r3, r7, #4
    3822:	2206      	movs	r2, #6
    3824:	701a      	strb	r2, [r3, #0]
    3826:	1d3b      	adds	r3, r7, #4
    3828:	2201      	movs	r2, #1
    382a:	605a      	str	r2, [r3, #4]
    382c:	1d3b      	adds	r3, r7, #4
    382e:	2200      	movs	r2, #0
    3830:	721a      	strb	r2, [r3, #8]
    3832:	1d3b      	adds	r3, r7, #4
    3834:	2200      	movs	r2, #0
    3836:	725a      	strb	r2, [r3, #9]
    3838:	1d3b      	adds	r3, r7, #4
    383a:	0019      	movs	r1, r3
    383c:	2000      	movs	r0, #0
    383e:	4b0e      	ldr	r3, [pc, #56]	; (3878 <system_clock_init+0xcc>)
    3840:	4798      	blx	r3
    3842:	2000      	movs	r0, #0
    3844:	4b0d      	ldr	r3, [pc, #52]	; (387c <system_clock_init+0xd0>)
    3846:	4798      	blx	r3
#endif
}
    3848:	46c0      	nop			; (mov r8, r8)
    384a:	46bd      	mov	sp, r7
    384c:	b020      	add	sp, #128	; 0x80
    384e:	bd80      	pop	{r7, pc}
    3850:	40000800 	.word	0x40000800
    3854:	00003501 	.word	0x00003501
    3858:	00003775 	.word	0x00003775
    385c:	0000346b 	.word	0x0000346b
    3860:	00003651 	.word	0x00003651
    3864:	000036c9 	.word	0x000036c9
    3868:	00003925 	.word	0x00003925
    386c:	0000348d 	.word	0x0000348d
    3870:	000034ad 	.word	0x000034ad
    3874:	0000343d 	.word	0x0000343d
    3878:	00003955 	.word	0x00003955
    387c:	00003a79 	.word	0x00003a79

00003880 <system_apb_clock_set_mask>:
{
    3880:	b580      	push	{r7, lr}
    3882:	b082      	sub	sp, #8
    3884:	af00      	add	r7, sp, #0
    3886:	0002      	movs	r2, r0
    3888:	6039      	str	r1, [r7, #0]
    388a:	1dfb      	adds	r3, r7, #7
    388c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    388e:	1dfb      	adds	r3, r7, #7
    3890:	781b      	ldrb	r3, [r3, #0]
    3892:	2b01      	cmp	r3, #1
    3894:	d00a      	beq.n	38ac <system_apb_clock_set_mask+0x2c>
    3896:	2b02      	cmp	r3, #2
    3898:	d00f      	beq.n	38ba <system_apb_clock_set_mask+0x3a>
    389a:	2b00      	cmp	r3, #0
    389c:	d114      	bne.n	38c8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    389e:	4b0e      	ldr	r3, [pc, #56]	; (38d8 <system_apb_clock_set_mask+0x58>)
    38a0:	4a0d      	ldr	r2, [pc, #52]	; (38d8 <system_apb_clock_set_mask+0x58>)
    38a2:	6991      	ldr	r1, [r2, #24]
    38a4:	683a      	ldr	r2, [r7, #0]
    38a6:	430a      	orrs	r2, r1
    38a8:	619a      	str	r2, [r3, #24]
			break;
    38aa:	e00f      	b.n	38cc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    38ac:	4b0a      	ldr	r3, [pc, #40]	; (38d8 <system_apb_clock_set_mask+0x58>)
    38ae:	4a0a      	ldr	r2, [pc, #40]	; (38d8 <system_apb_clock_set_mask+0x58>)
    38b0:	69d1      	ldr	r1, [r2, #28]
    38b2:	683a      	ldr	r2, [r7, #0]
    38b4:	430a      	orrs	r2, r1
    38b6:	61da      	str	r2, [r3, #28]
			break;
    38b8:	e008      	b.n	38cc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    38ba:	4b07      	ldr	r3, [pc, #28]	; (38d8 <system_apb_clock_set_mask+0x58>)
    38bc:	4a06      	ldr	r2, [pc, #24]	; (38d8 <system_apb_clock_set_mask+0x58>)
    38be:	6a11      	ldr	r1, [r2, #32]
    38c0:	683a      	ldr	r2, [r7, #0]
    38c2:	430a      	orrs	r2, r1
    38c4:	621a      	str	r2, [r3, #32]
			break;
    38c6:	e001      	b.n	38cc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    38c8:	2317      	movs	r3, #23
    38ca:	e000      	b.n	38ce <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    38cc:	2300      	movs	r3, #0
}
    38ce:	0018      	movs	r0, r3
    38d0:	46bd      	mov	sp, r7
    38d2:	b002      	add	sp, #8
    38d4:	bd80      	pop	{r7, pc}
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	40000400 	.word	0x40000400

000038dc <system_interrupt_enter_critical_section>:
{
    38dc:	b580      	push	{r7, lr}
    38de:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    38e0:	4b02      	ldr	r3, [pc, #8]	; (38ec <system_interrupt_enter_critical_section+0x10>)
    38e2:	4798      	blx	r3
}
    38e4:	46c0      	nop			; (mov r8, r8)
    38e6:	46bd      	mov	sp, r7
    38e8:	bd80      	pop	{r7, pc}
    38ea:	46c0      	nop			; (mov r8, r8)
    38ec:	000033a9 	.word	0x000033a9

000038f0 <system_interrupt_leave_critical_section>:
{
    38f0:	b580      	push	{r7, lr}
    38f2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    38f4:	4b02      	ldr	r3, [pc, #8]	; (3900 <system_interrupt_leave_critical_section+0x10>)
    38f6:	4798      	blx	r3
}
    38f8:	46c0      	nop			; (mov r8, r8)
    38fa:	46bd      	mov	sp, r7
    38fc:	bd80      	pop	{r7, pc}
    38fe:	46c0      	nop			; (mov r8, r8)
    3900:	000033fd 	.word	0x000033fd

00003904 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    3904:	b580      	push	{r7, lr}
    3906:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3908:	4b05      	ldr	r3, [pc, #20]	; (3920 <system_gclk_is_syncing+0x1c>)
    390a:	785b      	ldrb	r3, [r3, #1]
    390c:	b2db      	uxtb	r3, r3
    390e:	b25b      	sxtb	r3, r3
    3910:	2b00      	cmp	r3, #0
    3912:	da01      	bge.n	3918 <system_gclk_is_syncing+0x14>
		return true;
    3914:	2301      	movs	r3, #1
    3916:	e000      	b.n	391a <system_gclk_is_syncing+0x16>
	}

	return false;
    3918:	2300      	movs	r3, #0
}
    391a:	0018      	movs	r0, r3
    391c:	46bd      	mov	sp, r7
    391e:	bd80      	pop	{r7, pc}
    3920:	40000c00 	.word	0x40000c00

00003924 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    3924:	b580      	push	{r7, lr}
    3926:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    3928:	2108      	movs	r1, #8
    392a:	2000      	movs	r0, #0
    392c:	4b07      	ldr	r3, [pc, #28]	; (394c <system_gclk_init+0x28>)
    392e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3930:	4b07      	ldr	r3, [pc, #28]	; (3950 <system_gclk_init+0x2c>)
    3932:	2201      	movs	r2, #1
    3934:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	4b05      	ldr	r3, [pc, #20]	; (3950 <system_gclk_init+0x2c>)
    393a:	781b      	ldrb	r3, [r3, #0]
    393c:	b2db      	uxtb	r3, r3
    393e:	001a      	movs	r2, r3
    3940:	2301      	movs	r3, #1
    3942:	4013      	ands	r3, r2
    3944:	d1f8      	bne.n	3938 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	46bd      	mov	sp, r7
    394a:	bd80      	pop	{r7, pc}
    394c:	00003881 	.word	0x00003881
    3950:	40000c00 	.word	0x40000c00

00003954 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3954:	b580      	push	{r7, lr}
    3956:	b086      	sub	sp, #24
    3958:	af00      	add	r7, sp, #0
    395a:	0002      	movs	r2, r0
    395c:	6039      	str	r1, [r7, #0]
    395e:	1dfb      	adds	r3, r7, #7
    3960:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3962:	1dfb      	adds	r3, r7, #7
    3964:	781b      	ldrb	r3, [r3, #0]
    3966:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    3968:	1dfb      	adds	r3, r7, #7
    396a:	781b      	ldrb	r3, [r3, #0]
    396c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    396e:	683b      	ldr	r3, [r7, #0]
    3970:	781b      	ldrb	r3, [r3, #0]
    3972:	021b      	lsls	r3, r3, #8
    3974:	001a      	movs	r2, r3
    3976:	697b      	ldr	r3, [r7, #20]
    3978:	4313      	orrs	r3, r2
    397a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    397c:	683b      	ldr	r3, [r7, #0]
    397e:	785b      	ldrb	r3, [r3, #1]
    3980:	2b00      	cmp	r3, #0
    3982:	d004      	beq.n	398e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3984:	697b      	ldr	r3, [r7, #20]
    3986:	2280      	movs	r2, #128	; 0x80
    3988:	02d2      	lsls	r2, r2, #11
    398a:	4313      	orrs	r3, r2
    398c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    398e:	683b      	ldr	r3, [r7, #0]
    3990:	7a5b      	ldrb	r3, [r3, #9]
    3992:	2b00      	cmp	r3, #0
    3994:	d004      	beq.n	39a0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3996:	697b      	ldr	r3, [r7, #20]
    3998:	2280      	movs	r2, #128	; 0x80
    399a:	0312      	lsls	r2, r2, #12
    399c:	4313      	orrs	r3, r2
    399e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    39a0:	683b      	ldr	r3, [r7, #0]
    39a2:	685b      	ldr	r3, [r3, #4]
    39a4:	2b01      	cmp	r3, #1
    39a6:	d92c      	bls.n	3a02 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    39a8:	683b      	ldr	r3, [r7, #0]
    39aa:	685a      	ldr	r2, [r3, #4]
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	685b      	ldr	r3, [r3, #4]
    39b0:	3b01      	subs	r3, #1
    39b2:	4013      	ands	r3, r2
    39b4:	d11a      	bne.n	39ec <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    39b6:	2300      	movs	r3, #0
    39b8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    39ba:	2302      	movs	r3, #2
    39bc:	60bb      	str	r3, [r7, #8]
    39be:	e005      	b.n	39cc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    39c0:	68fb      	ldr	r3, [r7, #12]
    39c2:	3301      	adds	r3, #1
    39c4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    39c6:	68bb      	ldr	r3, [r7, #8]
    39c8:	005b      	lsls	r3, r3, #1
    39ca:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    39cc:	683b      	ldr	r3, [r7, #0]
    39ce:	685a      	ldr	r2, [r3, #4]
    39d0:	68bb      	ldr	r3, [r7, #8]
    39d2:	429a      	cmp	r2, r3
    39d4:	d8f4      	bhi.n	39c0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	021b      	lsls	r3, r3, #8
    39da:	693a      	ldr	r2, [r7, #16]
    39dc:	4313      	orrs	r3, r2
    39de:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    39e0:	697b      	ldr	r3, [r7, #20]
    39e2:	2280      	movs	r2, #128	; 0x80
    39e4:	0352      	lsls	r2, r2, #13
    39e6:	4313      	orrs	r3, r2
    39e8:	617b      	str	r3, [r7, #20]
    39ea:	e00a      	b.n	3a02 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    39ec:	683b      	ldr	r3, [r7, #0]
    39ee:	685b      	ldr	r3, [r3, #4]
    39f0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    39f2:	693a      	ldr	r2, [r7, #16]
    39f4:	4313      	orrs	r3, r2
    39f6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    39f8:	697b      	ldr	r3, [r7, #20]
    39fa:	2280      	movs	r2, #128	; 0x80
    39fc:	0292      	lsls	r2, r2, #10
    39fe:	4313      	orrs	r3, r2
    3a00:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3a02:	683b      	ldr	r3, [r7, #0]
    3a04:	7a1b      	ldrb	r3, [r3, #8]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d004      	beq.n	3a14 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3a0a:	697b      	ldr	r3, [r7, #20]
    3a0c:	2280      	movs	r2, #128	; 0x80
    3a0e:	0392      	lsls	r2, r2, #14
    3a10:	4313      	orrs	r3, r2
    3a12:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    3a14:	46c0      	nop			; (mov r8, r8)
    3a16:	4b13      	ldr	r3, [pc, #76]	; (3a64 <system_gclk_gen_set_config+0x110>)
    3a18:	4798      	blx	r3
    3a1a:	1e03      	subs	r3, r0, #0
    3a1c:	d1fb      	bne.n	3a16 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3a1e:	4b12      	ldr	r3, [pc, #72]	; (3a68 <system_gclk_gen_set_config+0x114>)
    3a20:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3a22:	4a12      	ldr	r2, [pc, #72]	; (3a6c <system_gclk_gen_set_config+0x118>)
    3a24:	1dfb      	adds	r3, r7, #7
    3a26:	781b      	ldrb	r3, [r3, #0]
    3a28:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3a2a:	46c0      	nop			; (mov r8, r8)
    3a2c:	4b0d      	ldr	r3, [pc, #52]	; (3a64 <system_gclk_gen_set_config+0x110>)
    3a2e:	4798      	blx	r3
    3a30:	1e03      	subs	r3, r0, #0
    3a32:	d1fb      	bne.n	3a2c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3a34:	4b0e      	ldr	r3, [pc, #56]	; (3a70 <system_gclk_gen_set_config+0x11c>)
    3a36:	693a      	ldr	r2, [r7, #16]
    3a38:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    3a3a:	46c0      	nop			; (mov r8, r8)
    3a3c:	4b09      	ldr	r3, [pc, #36]	; (3a64 <system_gclk_gen_set_config+0x110>)
    3a3e:	4798      	blx	r3
    3a40:	1e03      	subs	r3, r0, #0
    3a42:	d1fb      	bne.n	3a3c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3a44:	4b0a      	ldr	r3, [pc, #40]	; (3a70 <system_gclk_gen_set_config+0x11c>)
    3a46:	4a0a      	ldr	r2, [pc, #40]	; (3a70 <system_gclk_gen_set_config+0x11c>)
    3a48:	6851      	ldr	r1, [r2, #4]
    3a4a:	2280      	movs	r2, #128	; 0x80
    3a4c:	0252      	lsls	r2, r2, #9
    3a4e:	4011      	ands	r1, r2
    3a50:	697a      	ldr	r2, [r7, #20]
    3a52:	430a      	orrs	r2, r1
    3a54:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3a56:	4b07      	ldr	r3, [pc, #28]	; (3a74 <system_gclk_gen_set_config+0x120>)
    3a58:	4798      	blx	r3
}
    3a5a:	46c0      	nop			; (mov r8, r8)
    3a5c:	46bd      	mov	sp, r7
    3a5e:	b006      	add	sp, #24
    3a60:	bd80      	pop	{r7, pc}
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	00003905 	.word	0x00003905
    3a68:	000038dd 	.word	0x000038dd
    3a6c:	40000c08 	.word	0x40000c08
    3a70:	40000c00 	.word	0x40000c00
    3a74:	000038f1 	.word	0x000038f1

00003a78 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3a78:	b580      	push	{r7, lr}
    3a7a:	b082      	sub	sp, #8
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	0002      	movs	r2, r0
    3a80:	1dfb      	adds	r3, r7, #7
    3a82:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3a84:	46c0      	nop			; (mov r8, r8)
    3a86:	4b0e      	ldr	r3, [pc, #56]	; (3ac0 <system_gclk_gen_enable+0x48>)
    3a88:	4798      	blx	r3
    3a8a:	1e03      	subs	r3, r0, #0
    3a8c:	d1fb      	bne.n	3a86 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3a8e:	4b0d      	ldr	r3, [pc, #52]	; (3ac4 <system_gclk_gen_enable+0x4c>)
    3a90:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3a92:	4a0d      	ldr	r2, [pc, #52]	; (3ac8 <system_gclk_gen_enable+0x50>)
    3a94:	1dfb      	adds	r3, r7, #7
    3a96:	781b      	ldrb	r3, [r3, #0]
    3a98:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	4b08      	ldr	r3, [pc, #32]	; (3ac0 <system_gclk_gen_enable+0x48>)
    3a9e:	4798      	blx	r3
    3aa0:	1e03      	subs	r3, r0, #0
    3aa2:	d1fb      	bne.n	3a9c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3aa4:	4b09      	ldr	r3, [pc, #36]	; (3acc <system_gclk_gen_enable+0x54>)
    3aa6:	4a09      	ldr	r2, [pc, #36]	; (3acc <system_gclk_gen_enable+0x54>)
    3aa8:	6852      	ldr	r2, [r2, #4]
    3aaa:	2180      	movs	r1, #128	; 0x80
    3aac:	0249      	lsls	r1, r1, #9
    3aae:	430a      	orrs	r2, r1
    3ab0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3ab2:	4b07      	ldr	r3, [pc, #28]	; (3ad0 <system_gclk_gen_enable+0x58>)
    3ab4:	4798      	blx	r3
}
    3ab6:	46c0      	nop			; (mov r8, r8)
    3ab8:	46bd      	mov	sp, r7
    3aba:	b002      	add	sp, #8
    3abc:	bd80      	pop	{r7, pc}
    3abe:	46c0      	nop			; (mov r8, r8)
    3ac0:	00003905 	.word	0x00003905
    3ac4:	000038dd 	.word	0x000038dd
    3ac8:	40000c04 	.word	0x40000c04
    3acc:	40000c00 	.word	0x40000c00
    3ad0:	000038f1 	.word	0x000038f1

00003ad4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	b086      	sub	sp, #24
    3ad8:	af00      	add	r7, sp, #0
    3ada:	0002      	movs	r2, r0
    3adc:	1dfb      	adds	r3, r7, #7
    3ade:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3ae0:	46c0      	nop			; (mov r8, r8)
    3ae2:	4b2a      	ldr	r3, [pc, #168]	; (3b8c <system_gclk_gen_get_hz+0xb8>)
    3ae4:	4798      	blx	r3
    3ae6:	1e03      	subs	r3, r0, #0
    3ae8:	d1fb      	bne.n	3ae2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3aea:	4b29      	ldr	r3, [pc, #164]	; (3b90 <system_gclk_gen_get_hz+0xbc>)
    3aec:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3aee:	4a29      	ldr	r2, [pc, #164]	; (3b94 <system_gclk_gen_get_hz+0xc0>)
    3af0:	1dfb      	adds	r3, r7, #7
    3af2:	781b      	ldrb	r3, [r3, #0]
    3af4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3af6:	46c0      	nop			; (mov r8, r8)
    3af8:	4b24      	ldr	r3, [pc, #144]	; (3b8c <system_gclk_gen_get_hz+0xb8>)
    3afa:	4798      	blx	r3
    3afc:	1e03      	subs	r3, r0, #0
    3afe:	d1fb      	bne.n	3af8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3b00:	4b25      	ldr	r3, [pc, #148]	; (3b98 <system_gclk_gen_get_hz+0xc4>)
    3b02:	685b      	ldr	r3, [r3, #4]
    3b04:	04db      	lsls	r3, r3, #19
    3b06:	0edb      	lsrs	r3, r3, #27
    3b08:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3b0a:	0018      	movs	r0, r3
    3b0c:	4b23      	ldr	r3, [pc, #140]	; (3b9c <system_gclk_gen_get_hz+0xc8>)
    3b0e:	4798      	blx	r3
    3b10:	0003      	movs	r3, r0
    3b12:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3b14:	4a1f      	ldr	r2, [pc, #124]	; (3b94 <system_gclk_gen_get_hz+0xc0>)
    3b16:	1dfb      	adds	r3, r7, #7
    3b18:	781b      	ldrb	r3, [r3, #0]
    3b1a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3b1c:	4b1e      	ldr	r3, [pc, #120]	; (3b98 <system_gclk_gen_get_hz+0xc4>)
    3b1e:	685b      	ldr	r3, [r3, #4]
    3b20:	02db      	lsls	r3, r3, #11
    3b22:	0fdb      	lsrs	r3, r3, #31
    3b24:	b2da      	uxtb	r2, r3
    3b26:	2313      	movs	r3, #19
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3b2c:	4a1c      	ldr	r2, [pc, #112]	; (3ba0 <system_gclk_gen_get_hz+0xcc>)
    3b2e:	1dfb      	adds	r3, r7, #7
    3b30:	781b      	ldrb	r3, [r3, #0]
    3b32:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3b34:	46c0      	nop			; (mov r8, r8)
    3b36:	4b15      	ldr	r3, [pc, #84]	; (3b8c <system_gclk_gen_get_hz+0xb8>)
    3b38:	4798      	blx	r3
    3b3a:	1e03      	subs	r3, r0, #0
    3b3c:	d1fb      	bne.n	3b36 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3b3e:	4b16      	ldr	r3, [pc, #88]	; (3b98 <system_gclk_gen_get_hz+0xc4>)
    3b40:	689b      	ldr	r3, [r3, #8]
    3b42:	021b      	lsls	r3, r3, #8
    3b44:	0c1b      	lsrs	r3, r3, #16
    3b46:	b29b      	uxth	r3, r3
    3b48:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    3b4a:	4b16      	ldr	r3, [pc, #88]	; (3ba4 <system_gclk_gen_get_hz+0xd0>)
    3b4c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3b4e:	2313      	movs	r3, #19
    3b50:	18fb      	adds	r3, r7, r3
    3b52:	781b      	ldrb	r3, [r3, #0]
    3b54:	2b00      	cmp	r3, #0
    3b56:	d109      	bne.n	3b6c <system_gclk_gen_get_hz+0x98>
    3b58:	68fb      	ldr	r3, [r7, #12]
    3b5a:	2b01      	cmp	r3, #1
    3b5c:	d906      	bls.n	3b6c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    3b5e:	4b12      	ldr	r3, [pc, #72]	; (3ba8 <system_gclk_gen_get_hz+0xd4>)
    3b60:	68f9      	ldr	r1, [r7, #12]
    3b62:	6978      	ldr	r0, [r7, #20]
    3b64:	4798      	blx	r3
    3b66:	0003      	movs	r3, r0
    3b68:	617b      	str	r3, [r7, #20]
    3b6a:	e00a      	b.n	3b82 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    3b6c:	2313      	movs	r3, #19
    3b6e:	18fb      	adds	r3, r7, r3
    3b70:	781b      	ldrb	r3, [r3, #0]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d005      	beq.n	3b82 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    3b76:	68fb      	ldr	r3, [r7, #12]
    3b78:	3301      	adds	r3, #1
    3b7a:	697a      	ldr	r2, [r7, #20]
    3b7c:	40da      	lsrs	r2, r3
    3b7e:	0013      	movs	r3, r2
    3b80:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3b82:	697b      	ldr	r3, [r7, #20]
}
    3b84:	0018      	movs	r0, r3
    3b86:	46bd      	mov	sp, r7
    3b88:	b006      	add	sp, #24
    3b8a:	bd80      	pop	{r7, pc}
    3b8c:	00003905 	.word	0x00003905
    3b90:	000038dd 	.word	0x000038dd
    3b94:	40000c04 	.word	0x40000c04
    3b98:	40000c00 	.word	0x40000c00
    3b9c:	00003595 	.word	0x00003595
    3ba0:	40000c08 	.word	0x40000c08
    3ba4:	000038f1 	.word	0x000038f1
    3ba8:	00004359 	.word	0x00004359

00003bac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3bac:	b580      	push	{r7, lr}
    3bae:	b084      	sub	sp, #16
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	0002      	movs	r2, r0
    3bb4:	6039      	str	r1, [r7, #0]
    3bb6:	1dfb      	adds	r3, r7, #7
    3bb8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    3bba:	1dfb      	adds	r3, r7, #7
    3bbc:	781b      	ldrb	r3, [r3, #0]
    3bbe:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3bc0:	683b      	ldr	r3, [r7, #0]
    3bc2:	781b      	ldrb	r3, [r3, #0]
    3bc4:	021b      	lsls	r3, r3, #8
    3bc6:	001a      	movs	r2, r3
    3bc8:	68fb      	ldr	r3, [r7, #12]
    3bca:	4313      	orrs	r3, r2
    3bcc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3bce:	1dfb      	adds	r3, r7, #7
    3bd0:	781b      	ldrb	r3, [r3, #0]
    3bd2:	0018      	movs	r0, r3
    3bd4:	4b04      	ldr	r3, [pc, #16]	; (3be8 <system_gclk_chan_set_config+0x3c>)
    3bd6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3bd8:	4b04      	ldr	r3, [pc, #16]	; (3bec <system_gclk_chan_set_config+0x40>)
    3bda:	68fa      	ldr	r2, [r7, #12]
    3bdc:	b292      	uxth	r2, r2
    3bde:	805a      	strh	r2, [r3, #2]
}
    3be0:	46c0      	nop			; (mov r8, r8)
    3be2:	46bd      	mov	sp, r7
    3be4:	b004      	add	sp, #16
    3be6:	bd80      	pop	{r7, pc}
    3be8:	00003c39 	.word	0x00003c39
    3bec:	40000c00 	.word	0x40000c00

00003bf0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	b082      	sub	sp, #8
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	0002      	movs	r2, r0
    3bf8:	1dfb      	adds	r3, r7, #7
    3bfa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3bfc:	4b0a      	ldr	r3, [pc, #40]	; (3c28 <system_gclk_chan_enable+0x38>)
    3bfe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3c00:	4a0a      	ldr	r2, [pc, #40]	; (3c2c <system_gclk_chan_enable+0x3c>)
    3c02:	1dfb      	adds	r3, r7, #7
    3c04:	781b      	ldrb	r3, [r3, #0]
    3c06:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3c08:	4909      	ldr	r1, [pc, #36]	; (3c30 <system_gclk_chan_enable+0x40>)
    3c0a:	4b09      	ldr	r3, [pc, #36]	; (3c30 <system_gclk_chan_enable+0x40>)
    3c0c:	885b      	ldrh	r3, [r3, #2]
    3c0e:	b29b      	uxth	r3, r3
    3c10:	2280      	movs	r2, #128	; 0x80
    3c12:	01d2      	lsls	r2, r2, #7
    3c14:	4313      	orrs	r3, r2
    3c16:	b29b      	uxth	r3, r3
    3c18:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    3c1a:	4b06      	ldr	r3, [pc, #24]	; (3c34 <system_gclk_chan_enable+0x44>)
    3c1c:	4798      	blx	r3
}
    3c1e:	46c0      	nop			; (mov r8, r8)
    3c20:	46bd      	mov	sp, r7
    3c22:	b002      	add	sp, #8
    3c24:	bd80      	pop	{r7, pc}
    3c26:	46c0      	nop			; (mov r8, r8)
    3c28:	000038dd 	.word	0x000038dd
    3c2c:	40000c02 	.word	0x40000c02
    3c30:	40000c00 	.word	0x40000c00
    3c34:	000038f1 	.word	0x000038f1

00003c38 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b084      	sub	sp, #16
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	0002      	movs	r2, r0
    3c40:	1dfb      	adds	r3, r7, #7
    3c42:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3c44:	4b1c      	ldr	r3, [pc, #112]	; (3cb8 <system_gclk_chan_disable+0x80>)
    3c46:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3c48:	4a1c      	ldr	r2, [pc, #112]	; (3cbc <system_gclk_chan_disable+0x84>)
    3c4a:	1dfb      	adds	r3, r7, #7
    3c4c:	781b      	ldrb	r3, [r3, #0]
    3c4e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3c50:	4b1b      	ldr	r3, [pc, #108]	; (3cc0 <system_gclk_chan_disable+0x88>)
    3c52:	885b      	ldrh	r3, [r3, #2]
    3c54:	051b      	lsls	r3, r3, #20
    3c56:	0f1b      	lsrs	r3, r3, #28
    3c58:	b2db      	uxtb	r3, r3
    3c5a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    3c5c:	4a18      	ldr	r2, [pc, #96]	; (3cc0 <system_gclk_chan_disable+0x88>)
    3c5e:	8853      	ldrh	r3, [r2, #2]
    3c60:	4918      	ldr	r1, [pc, #96]	; (3cc4 <system_gclk_chan_disable+0x8c>)
    3c62:	400b      	ands	r3, r1
    3c64:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3c66:	4a16      	ldr	r2, [pc, #88]	; (3cc0 <system_gclk_chan_disable+0x88>)
    3c68:	4b15      	ldr	r3, [pc, #84]	; (3cc0 <system_gclk_chan_disable+0x88>)
    3c6a:	885b      	ldrh	r3, [r3, #2]
    3c6c:	b29b      	uxth	r3, r3
    3c6e:	4916      	ldr	r1, [pc, #88]	; (3cc8 <system_gclk_chan_disable+0x90>)
    3c70:	400b      	ands	r3, r1
    3c72:	b29b      	uxth	r3, r3
    3c74:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	4b11      	ldr	r3, [pc, #68]	; (3cc0 <system_gclk_chan_disable+0x88>)
    3c7a:	885b      	ldrh	r3, [r3, #2]
    3c7c:	b29b      	uxth	r3, r3
    3c7e:	001a      	movs	r2, r3
    3c80:	2380      	movs	r3, #128	; 0x80
    3c82:	01db      	lsls	r3, r3, #7
    3c84:	4013      	ands	r3, r2
    3c86:	d1f7      	bne.n	3c78 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3c88:	4a0d      	ldr	r2, [pc, #52]	; (3cc0 <system_gclk_chan_disable+0x88>)
    3c8a:	68fb      	ldr	r3, [r7, #12]
    3c8c:	b2db      	uxtb	r3, r3
    3c8e:	1c19      	adds	r1, r3, #0
    3c90:	230f      	movs	r3, #15
    3c92:	400b      	ands	r3, r1
    3c94:	b2d9      	uxtb	r1, r3
    3c96:	8853      	ldrh	r3, [r2, #2]
    3c98:	1c08      	adds	r0, r1, #0
    3c9a:	210f      	movs	r1, #15
    3c9c:	4001      	ands	r1, r0
    3c9e:	0208      	lsls	r0, r1, #8
    3ca0:	4908      	ldr	r1, [pc, #32]	; (3cc4 <system_gclk_chan_disable+0x8c>)
    3ca2:	400b      	ands	r3, r1
    3ca4:	1c19      	adds	r1, r3, #0
    3ca6:	1c03      	adds	r3, r0, #0
    3ca8:	430b      	orrs	r3, r1
    3caa:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3cac:	4b07      	ldr	r3, [pc, #28]	; (3ccc <system_gclk_chan_disable+0x94>)
    3cae:	4798      	blx	r3
}
    3cb0:	46c0      	nop			; (mov r8, r8)
    3cb2:	46bd      	mov	sp, r7
    3cb4:	b004      	add	sp, #16
    3cb6:	bd80      	pop	{r7, pc}
    3cb8:	000038dd 	.word	0x000038dd
    3cbc:	40000c02 	.word	0x40000c02
    3cc0:	40000c00 	.word	0x40000c00
    3cc4:	fffff0ff 	.word	0xfffff0ff
    3cc8:	ffffbfff 	.word	0xffffbfff
    3ccc:	000038f1 	.word	0x000038f1

00003cd0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	b084      	sub	sp, #16
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	0002      	movs	r2, r0
    3cd8:	1dfb      	adds	r3, r7, #7
    3cda:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3cdc:	4b0d      	ldr	r3, [pc, #52]	; (3d14 <system_gclk_chan_get_hz+0x44>)
    3cde:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3ce0:	4a0d      	ldr	r2, [pc, #52]	; (3d18 <system_gclk_chan_get_hz+0x48>)
    3ce2:	1dfb      	adds	r3, r7, #7
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3ce8:	4b0c      	ldr	r3, [pc, #48]	; (3d1c <system_gclk_chan_get_hz+0x4c>)
    3cea:	885b      	ldrh	r3, [r3, #2]
    3cec:	051b      	lsls	r3, r3, #20
    3cee:	0f1b      	lsrs	r3, r3, #28
    3cf0:	b2da      	uxtb	r2, r3
    3cf2:	230f      	movs	r3, #15
    3cf4:	18fb      	adds	r3, r7, r3
    3cf6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    3cf8:	4b09      	ldr	r3, [pc, #36]	; (3d20 <system_gclk_chan_get_hz+0x50>)
    3cfa:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3cfc:	230f      	movs	r3, #15
    3cfe:	18fb      	adds	r3, r7, r3
    3d00:	781b      	ldrb	r3, [r3, #0]
    3d02:	0018      	movs	r0, r3
    3d04:	4b07      	ldr	r3, [pc, #28]	; (3d24 <system_gclk_chan_get_hz+0x54>)
    3d06:	4798      	blx	r3
    3d08:	0003      	movs	r3, r0
}
    3d0a:	0018      	movs	r0, r3
    3d0c:	46bd      	mov	sp, r7
    3d0e:	b004      	add	sp, #16
    3d10:	bd80      	pop	{r7, pc}
    3d12:	46c0      	nop			; (mov r8, r8)
    3d14:	000038dd 	.word	0x000038dd
    3d18:	40000c02 	.word	0x40000c02
    3d1c:	40000c00 	.word	0x40000c00
    3d20:	000038f1 	.word	0x000038f1
    3d24:	00003ad5 	.word	0x00003ad5

00003d28 <system_pinmux_get_group_from_gpio_pin>:
{
    3d28:	b580      	push	{r7, lr}
    3d2a:	b084      	sub	sp, #16
    3d2c:	af00      	add	r7, sp, #0
    3d2e:	0002      	movs	r2, r0
    3d30:	1dfb      	adds	r3, r7, #7
    3d32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3d34:	230f      	movs	r3, #15
    3d36:	18fb      	adds	r3, r7, r3
    3d38:	1dfa      	adds	r2, r7, #7
    3d3a:	7812      	ldrb	r2, [r2, #0]
    3d3c:	09d2      	lsrs	r2, r2, #7
    3d3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3d40:	230e      	movs	r3, #14
    3d42:	18fb      	adds	r3, r7, r3
    3d44:	1dfa      	adds	r2, r7, #7
    3d46:	7812      	ldrb	r2, [r2, #0]
    3d48:	0952      	lsrs	r2, r2, #5
    3d4a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3d4c:	4b0d      	ldr	r3, [pc, #52]	; (3d84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3d4e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3d50:	230f      	movs	r3, #15
    3d52:	18fb      	adds	r3, r7, r3
    3d54:	781b      	ldrb	r3, [r3, #0]
    3d56:	2b00      	cmp	r3, #0
    3d58:	d10f      	bne.n	3d7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3d5a:	230f      	movs	r3, #15
    3d5c:	18fb      	adds	r3, r7, r3
    3d5e:	781b      	ldrb	r3, [r3, #0]
    3d60:	009b      	lsls	r3, r3, #2
    3d62:	2210      	movs	r2, #16
    3d64:	4694      	mov	ip, r2
    3d66:	44bc      	add	ip, r7
    3d68:	4463      	add	r3, ip
    3d6a:	3b08      	subs	r3, #8
    3d6c:	681a      	ldr	r2, [r3, #0]
    3d6e:	230e      	movs	r3, #14
    3d70:	18fb      	adds	r3, r7, r3
    3d72:	781b      	ldrb	r3, [r3, #0]
    3d74:	01db      	lsls	r3, r3, #7
    3d76:	18d3      	adds	r3, r2, r3
    3d78:	e000      	b.n	3d7c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3d7a:	2300      	movs	r3, #0
}
    3d7c:	0018      	movs	r0, r3
    3d7e:	46bd      	mov	sp, r7
    3d80:	b004      	add	sp, #16
    3d82:	bd80      	pop	{r7, pc}
    3d84:	41004400 	.word	0x41004400

00003d88 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b088      	sub	sp, #32
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	60f8      	str	r0, [r7, #12]
    3d90:	60b9      	str	r1, [r7, #8]
    3d92:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3d94:	2300      	movs	r3, #0
    3d96:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3d98:	687b      	ldr	r3, [r7, #4]
    3d9a:	78db      	ldrb	r3, [r3, #3]
    3d9c:	2201      	movs	r2, #1
    3d9e:	4053      	eors	r3, r2
    3da0:	b2db      	uxtb	r3, r3
    3da2:	2b00      	cmp	r3, #0
    3da4:	d035      	beq.n	3e12 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	781b      	ldrb	r3, [r3, #0]
    3daa:	2b80      	cmp	r3, #128	; 0x80
    3dac:	d00b      	beq.n	3dc6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3dae:	69fb      	ldr	r3, [r7, #28]
    3db0:	2280      	movs	r2, #128	; 0x80
    3db2:	0252      	lsls	r2, r2, #9
    3db4:	4313      	orrs	r3, r2
    3db6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	781b      	ldrb	r3, [r3, #0]
    3dbc:	061b      	lsls	r3, r3, #24
    3dbe:	001a      	movs	r2, r3
    3dc0:	69fb      	ldr	r3, [r7, #28]
    3dc2:	4313      	orrs	r3, r2
    3dc4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3dc6:	687b      	ldr	r3, [r7, #4]
    3dc8:	785b      	ldrb	r3, [r3, #1]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d003      	beq.n	3dd6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3dce:	687b      	ldr	r3, [r7, #4]
    3dd0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3dd2:	2b02      	cmp	r3, #2
    3dd4:	d110      	bne.n	3df8 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3dd6:	69fb      	ldr	r3, [r7, #28]
    3dd8:	2280      	movs	r2, #128	; 0x80
    3dda:	0292      	lsls	r2, r2, #10
    3ddc:	4313      	orrs	r3, r2
    3dde:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	789b      	ldrb	r3, [r3, #2]
    3de4:	2b00      	cmp	r3, #0
    3de6:	d004      	beq.n	3df2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3de8:	69fb      	ldr	r3, [r7, #28]
    3dea:	2280      	movs	r2, #128	; 0x80
    3dec:	02d2      	lsls	r2, r2, #11
    3dee:	4313      	orrs	r3, r2
    3df0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3df2:	68fb      	ldr	r3, [r7, #12]
    3df4:	68ba      	ldr	r2, [r7, #8]
    3df6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	785b      	ldrb	r3, [r3, #1]
    3dfc:	2b01      	cmp	r3, #1
    3dfe:	d003      	beq.n	3e08 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3e04:	2b02      	cmp	r3, #2
    3e06:	d107      	bne.n	3e18 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3e08:	69fb      	ldr	r3, [r7, #28]
    3e0a:	4a22      	ldr	r2, [pc, #136]	; (3e94 <_system_pinmux_config+0x10c>)
    3e0c:	4013      	ands	r3, r2
    3e0e:	61fb      	str	r3, [r7, #28]
    3e10:	e002      	b.n	3e18 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3e12:	68fb      	ldr	r3, [r7, #12]
    3e14:	68ba      	ldr	r2, [r7, #8]
    3e16:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3e18:	68bb      	ldr	r3, [r7, #8]
    3e1a:	041b      	lsls	r3, r3, #16
    3e1c:	0c1b      	lsrs	r3, r3, #16
    3e1e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3e20:	68bb      	ldr	r3, [r7, #8]
    3e22:	0c1b      	lsrs	r3, r3, #16
    3e24:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3e26:	69ba      	ldr	r2, [r7, #24]
    3e28:	69fb      	ldr	r3, [r7, #28]
    3e2a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3e2c:	22a0      	movs	r2, #160	; 0xa0
    3e2e:	05d2      	lsls	r2, r2, #23
    3e30:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3e32:	68fb      	ldr	r3, [r7, #12]
    3e34:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3e36:	697a      	ldr	r2, [r7, #20]
    3e38:	69fb      	ldr	r3, [r7, #28]
    3e3a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3e3c:	22d0      	movs	r2, #208	; 0xd0
    3e3e:	0612      	lsls	r2, r2, #24
    3e40:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3e42:	68fb      	ldr	r3, [r7, #12]
    3e44:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	78db      	ldrb	r3, [r3, #3]
    3e4a:	2201      	movs	r2, #1
    3e4c:	4053      	eors	r3, r2
    3e4e:	b2db      	uxtb	r3, r3
    3e50:	2b00      	cmp	r3, #0
    3e52:	d01a      	beq.n	3e8a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3e54:	69fa      	ldr	r2, [r7, #28]
    3e56:	2380      	movs	r3, #128	; 0x80
    3e58:	02db      	lsls	r3, r3, #11
    3e5a:	4013      	ands	r3, r2
    3e5c:	d00a      	beq.n	3e74 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	789b      	ldrb	r3, [r3, #2]
    3e62:	2b01      	cmp	r3, #1
    3e64:	d103      	bne.n	3e6e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3e66:	68fb      	ldr	r3, [r7, #12]
    3e68:	68ba      	ldr	r2, [r7, #8]
    3e6a:	619a      	str	r2, [r3, #24]
    3e6c:	e002      	b.n	3e74 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3e6e:	68fb      	ldr	r3, [r7, #12]
    3e70:	68ba      	ldr	r2, [r7, #8]
    3e72:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	785b      	ldrb	r3, [r3, #1]
    3e78:	2b01      	cmp	r3, #1
    3e7a:	d003      	beq.n	3e84 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3e80:	2b02      	cmp	r3, #2
    3e82:	d102      	bne.n	3e8a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3e84:	68fb      	ldr	r3, [r7, #12]
    3e86:	68ba      	ldr	r2, [r7, #8]
    3e88:	609a      	str	r2, [r3, #8]
		}
	}
}
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	46bd      	mov	sp, r7
    3e8e:	b008      	add	sp, #32
    3e90:	bd80      	pop	{r7, pc}
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	fffbffff 	.word	0xfffbffff

00003e98 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3e98:	b580      	push	{r7, lr}
    3e9a:	b084      	sub	sp, #16
    3e9c:	af00      	add	r7, sp, #0
    3e9e:	0002      	movs	r2, r0
    3ea0:	6039      	str	r1, [r7, #0]
    3ea2:	1dfb      	adds	r3, r7, #7
    3ea4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3ea6:	1dfb      	adds	r3, r7, #7
    3ea8:	781b      	ldrb	r3, [r3, #0]
    3eaa:	0018      	movs	r0, r3
    3eac:	4b0a      	ldr	r3, [pc, #40]	; (3ed8 <system_pinmux_pin_set_config+0x40>)
    3eae:	4798      	blx	r3
    3eb0:	0003      	movs	r3, r0
    3eb2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3eb4:	1dfb      	adds	r3, r7, #7
    3eb6:	781b      	ldrb	r3, [r3, #0]
    3eb8:	221f      	movs	r2, #31
    3eba:	4013      	ands	r3, r2
    3ebc:	2201      	movs	r2, #1
    3ebe:	409a      	lsls	r2, r3
    3ec0:	0013      	movs	r3, r2
    3ec2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3ec4:	683a      	ldr	r2, [r7, #0]
    3ec6:	68b9      	ldr	r1, [r7, #8]
    3ec8:	68fb      	ldr	r3, [r7, #12]
    3eca:	0018      	movs	r0, r3
    3ecc:	4b03      	ldr	r3, [pc, #12]	; (3edc <system_pinmux_pin_set_config+0x44>)
    3ece:	4798      	blx	r3
}
    3ed0:	46c0      	nop			; (mov r8, r8)
    3ed2:	46bd      	mov	sp, r7
    3ed4:	b004      	add	sp, #16
    3ed6:	bd80      	pop	{r7, pc}
    3ed8:	00003d29 	.word	0x00003d29
    3edc:	00003d89 	.word	0x00003d89

00003ee0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3ee0:	b580      	push	{r7, lr}
    3ee2:	af00      	add	r7, sp, #0
	return;
    3ee4:	46c0      	nop			; (mov r8, r8)
}
    3ee6:	46bd      	mov	sp, r7
    3ee8:	bd80      	pop	{r7, pc}
	...

00003eec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3eec:	b580      	push	{r7, lr}
    3eee:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3ef0:	4b06      	ldr	r3, [pc, #24]	; (3f0c <system_init+0x20>)
    3ef2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3ef4:	4b06      	ldr	r3, [pc, #24]	; (3f10 <system_init+0x24>)
    3ef6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3ef8:	4b06      	ldr	r3, [pc, #24]	; (3f14 <system_init+0x28>)
    3efa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3efc:	4b06      	ldr	r3, [pc, #24]	; (3f18 <system_init+0x2c>)
    3efe:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3f00:	4b06      	ldr	r3, [pc, #24]	; (3f1c <system_init+0x30>)
    3f02:	4798      	blx	r3
}
    3f04:	46c0      	nop			; (mov r8, r8)
    3f06:	46bd      	mov	sp, r7
    3f08:	bd80      	pop	{r7, pc}
    3f0a:	46c0      	nop			; (mov r8, r8)
    3f0c:	000037ad 	.word	0x000037ad
    3f10:	0000339d 	.word	0x0000339d
    3f14:	00003ee1 	.word	0x00003ee1
    3f18:	00003ee1 	.word	0x00003ee1
    3f1c:	00003ee1 	.word	0x00003ee1

00003f20 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3f20:	b580      	push	{r7, lr}
    3f22:	b082      	sub	sp, #8
    3f24:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3f26:	4b2f      	ldr	r3, [pc, #188]	; (3fe4 <Reset_Handler+0xc4>)
    3f28:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3f2a:	4b2f      	ldr	r3, [pc, #188]	; (3fe8 <Reset_Handler+0xc8>)
    3f2c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3f2e:	687a      	ldr	r2, [r7, #4]
    3f30:	683b      	ldr	r3, [r7, #0]
    3f32:	429a      	cmp	r2, r3
    3f34:	d00c      	beq.n	3f50 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3f36:	e007      	b.n	3f48 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3f38:	683b      	ldr	r3, [r7, #0]
    3f3a:	1d1a      	adds	r2, r3, #4
    3f3c:	603a      	str	r2, [r7, #0]
    3f3e:	687a      	ldr	r2, [r7, #4]
    3f40:	1d11      	adds	r1, r2, #4
    3f42:	6079      	str	r1, [r7, #4]
    3f44:	6812      	ldr	r2, [r2, #0]
    3f46:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    3f48:	683a      	ldr	r2, [r7, #0]
    3f4a:	4b28      	ldr	r3, [pc, #160]	; (3fec <Reset_Handler+0xcc>)
    3f4c:	429a      	cmp	r2, r3
    3f4e:	d3f3      	bcc.n	3f38 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3f50:	4b27      	ldr	r3, [pc, #156]	; (3ff0 <Reset_Handler+0xd0>)
    3f52:	603b      	str	r3, [r7, #0]
    3f54:	e004      	b.n	3f60 <Reset_Handler+0x40>
                *pDest++ = 0;
    3f56:	683b      	ldr	r3, [r7, #0]
    3f58:	1d1a      	adds	r2, r3, #4
    3f5a:	603a      	str	r2, [r7, #0]
    3f5c:	2200      	movs	r2, #0
    3f5e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    3f60:	683a      	ldr	r2, [r7, #0]
    3f62:	4b24      	ldr	r3, [pc, #144]	; (3ff4 <Reset_Handler+0xd4>)
    3f64:	429a      	cmp	r2, r3
    3f66:	d3f6      	bcc.n	3f56 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3f68:	4b23      	ldr	r3, [pc, #140]	; (3ff8 <Reset_Handler+0xd8>)
    3f6a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3f6c:	4b23      	ldr	r3, [pc, #140]	; (3ffc <Reset_Handler+0xdc>)
    3f6e:	687a      	ldr	r2, [r7, #4]
    3f70:	21ff      	movs	r1, #255	; 0xff
    3f72:	438a      	bics	r2, r1
    3f74:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3f76:	4a22      	ldr	r2, [pc, #136]	; (4000 <Reset_Handler+0xe0>)
    3f78:	2390      	movs	r3, #144	; 0x90
    3f7a:	005b      	lsls	r3, r3, #1
    3f7c:	2102      	movs	r1, #2
    3f7e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3f80:	4a20      	ldr	r2, [pc, #128]	; (4004 <Reset_Handler+0xe4>)
    3f82:	78d3      	ldrb	r3, [r2, #3]
    3f84:	2103      	movs	r1, #3
    3f86:	438b      	bics	r3, r1
    3f88:	1c19      	adds	r1, r3, #0
    3f8a:	2302      	movs	r3, #2
    3f8c:	430b      	orrs	r3, r1
    3f8e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3f90:	4a1c      	ldr	r2, [pc, #112]	; (4004 <Reset_Handler+0xe4>)
    3f92:	78d3      	ldrb	r3, [r2, #3]
    3f94:	210c      	movs	r1, #12
    3f96:	438b      	bics	r3, r1
    3f98:	1c19      	adds	r1, r3, #0
    3f9a:	2308      	movs	r3, #8
    3f9c:	430b      	orrs	r3, r1
    3f9e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3fa0:	4a19      	ldr	r2, [pc, #100]	; (4008 <Reset_Handler+0xe8>)
    3fa2:	7b93      	ldrb	r3, [r2, #14]
    3fa4:	2130      	movs	r1, #48	; 0x30
    3fa6:	438b      	bics	r3, r1
    3fa8:	1c19      	adds	r1, r3, #0
    3faa:	2320      	movs	r3, #32
    3fac:	430b      	orrs	r3, r1
    3fae:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3fb0:	4a15      	ldr	r2, [pc, #84]	; (4008 <Reset_Handler+0xe8>)
    3fb2:	7b93      	ldrb	r3, [r2, #14]
    3fb4:	210c      	movs	r1, #12
    3fb6:	438b      	bics	r3, r1
    3fb8:	1c19      	adds	r1, r3, #0
    3fba:	2308      	movs	r3, #8
    3fbc:	430b      	orrs	r3, r1
    3fbe:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3fc0:	4a11      	ldr	r2, [pc, #68]	; (4008 <Reset_Handler+0xe8>)
    3fc2:	7b93      	ldrb	r3, [r2, #14]
    3fc4:	2103      	movs	r1, #3
    3fc6:	438b      	bics	r3, r1
    3fc8:	1c19      	adds	r1, r3, #0
    3fca:	2302      	movs	r3, #2
    3fcc:	430b      	orrs	r3, r1
    3fce:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3fd0:	4a0e      	ldr	r2, [pc, #56]	; (400c <Reset_Handler+0xec>)
    3fd2:	6853      	ldr	r3, [r2, #4]
    3fd4:	2180      	movs	r1, #128	; 0x80
    3fd6:	430b      	orrs	r3, r1
    3fd8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3fda:	4b0d      	ldr	r3, [pc, #52]	; (4010 <Reset_Handler+0xf0>)
    3fdc:	4798      	blx	r3

        /* Branch to main function */
        main();
    3fde:	4b0d      	ldr	r3, [pc, #52]	; (4014 <Reset_Handler+0xf4>)
    3fe0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3fe2:	e7fe      	b.n	3fe2 <Reset_Handler+0xc2>
    3fe4:	00004690 	.word	0x00004690
    3fe8:	20000000 	.word	0x20000000
    3fec:	2000001c 	.word	0x2000001c
    3ff0:	2000001c 	.word	0x2000001c
    3ff4:	20000190 	.word	0x20000190
    3ff8:	00000000 	.word	0x00000000
    3ffc:	e000ed00 	.word	0xe000ed00
    4000:	41007000 	.word	0x41007000
    4004:	41005000 	.word	0x41005000
    4008:	41004800 	.word	0x41004800
    400c:	41004000 	.word	0x41004000
    4010:	000044c5 	.word	0x000044c5
    4014:	0000413d 	.word	0x0000413d

00004018 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4018:	b580      	push	{r7, lr}
    401a:	af00      	add	r7, sp, #0
        while (1) {
    401c:	e7fe      	b.n	401c <Dummy_Handler+0x4>
	...

00004020 <system_cpu_clock_set_divider>:
{
    4020:	b580      	push	{r7, lr}
    4022:	b082      	sub	sp, #8
    4024:	af00      	add	r7, sp, #0
    4026:	0002      	movs	r2, r0
    4028:	1dfb      	adds	r3, r7, #7
    402a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    402c:	4a03      	ldr	r2, [pc, #12]	; (403c <system_cpu_clock_set_divider+0x1c>)
    402e:	1dfb      	adds	r3, r7, #7
    4030:	781b      	ldrb	r3, [r3, #0]
    4032:	7213      	strb	r3, [r2, #8]
}
    4034:	46c0      	nop			; (mov r8, r8)
    4036:	46bd      	mov	sp, r7
    4038:	b002      	add	sp, #8
    403a:	bd80      	pop	{r7, pc}
    403c:	40000400 	.word	0x40000400

00004040 <system_pinmux_get_group_from_gpio_pin>:
{
    4040:	b580      	push	{r7, lr}
    4042:	b084      	sub	sp, #16
    4044:	af00      	add	r7, sp, #0
    4046:	0002      	movs	r2, r0
    4048:	1dfb      	adds	r3, r7, #7
    404a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    404c:	230f      	movs	r3, #15
    404e:	18fb      	adds	r3, r7, r3
    4050:	1dfa      	adds	r2, r7, #7
    4052:	7812      	ldrb	r2, [r2, #0]
    4054:	09d2      	lsrs	r2, r2, #7
    4056:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4058:	230e      	movs	r3, #14
    405a:	18fb      	adds	r3, r7, r3
    405c:	1dfa      	adds	r2, r7, #7
    405e:	7812      	ldrb	r2, [r2, #0]
    4060:	0952      	lsrs	r2, r2, #5
    4062:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4064:	4b0d      	ldr	r3, [pc, #52]	; (409c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4066:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4068:	230f      	movs	r3, #15
    406a:	18fb      	adds	r3, r7, r3
    406c:	781b      	ldrb	r3, [r3, #0]
    406e:	2b00      	cmp	r3, #0
    4070:	d10f      	bne.n	4092 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4072:	230f      	movs	r3, #15
    4074:	18fb      	adds	r3, r7, r3
    4076:	781b      	ldrb	r3, [r3, #0]
    4078:	009b      	lsls	r3, r3, #2
    407a:	2210      	movs	r2, #16
    407c:	4694      	mov	ip, r2
    407e:	44bc      	add	ip, r7
    4080:	4463      	add	r3, ip
    4082:	3b08      	subs	r3, #8
    4084:	681a      	ldr	r2, [r3, #0]
    4086:	230e      	movs	r3, #14
    4088:	18fb      	adds	r3, r7, r3
    408a:	781b      	ldrb	r3, [r3, #0]
    408c:	01db      	lsls	r3, r3, #7
    408e:	18d3      	adds	r3, r2, r3
    4090:	e000      	b.n	4094 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4092:	2300      	movs	r3, #0
}
    4094:	0018      	movs	r0, r3
    4096:	46bd      	mov	sp, r7
    4098:	b004      	add	sp, #16
    409a:	bd80      	pop	{r7, pc}
    409c:	41004400 	.word	0x41004400

000040a0 <port_get_group_from_gpio_pin>:
{
    40a0:	b580      	push	{r7, lr}
    40a2:	b082      	sub	sp, #8
    40a4:	af00      	add	r7, sp, #0
    40a6:	0002      	movs	r2, r0
    40a8:	1dfb      	adds	r3, r7, #7
    40aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    40ac:	1dfb      	adds	r3, r7, #7
    40ae:	781b      	ldrb	r3, [r3, #0]
    40b0:	0018      	movs	r0, r3
    40b2:	4b03      	ldr	r3, [pc, #12]	; (40c0 <port_get_group_from_gpio_pin+0x20>)
    40b4:	4798      	blx	r3
    40b6:	0003      	movs	r3, r0
}
    40b8:	0018      	movs	r0, r3
    40ba:	46bd      	mov	sp, r7
    40bc:	b002      	add	sp, #8
    40be:	bd80      	pop	{r7, pc}
    40c0:	00004041 	.word	0x00004041

000040c4 <port_get_config_defaults>:
{
    40c4:	b580      	push	{r7, lr}
    40c6:	b082      	sub	sp, #8
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	2200      	movs	r2, #0
    40d0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	2201      	movs	r2, #1
    40d6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	2200      	movs	r2, #0
    40dc:	709a      	strb	r2, [r3, #2]
}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	46bd      	mov	sp, r7
    40e2:	b002      	add	sp, #8
    40e4:	bd80      	pop	{r7, pc}
	...

000040e8 <port_pin_set_output_level>:
{
    40e8:	b580      	push	{r7, lr}
    40ea:	b084      	sub	sp, #16
    40ec:	af00      	add	r7, sp, #0
    40ee:	0002      	movs	r2, r0
    40f0:	1dfb      	adds	r3, r7, #7
    40f2:	701a      	strb	r2, [r3, #0]
    40f4:	1dbb      	adds	r3, r7, #6
    40f6:	1c0a      	adds	r2, r1, #0
    40f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    40fa:	1dfb      	adds	r3, r7, #7
    40fc:	781b      	ldrb	r3, [r3, #0]
    40fe:	0018      	movs	r0, r3
    4100:	4b0d      	ldr	r3, [pc, #52]	; (4138 <port_pin_set_output_level+0x50>)
    4102:	4798      	blx	r3
    4104:	0003      	movs	r3, r0
    4106:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4108:	1dfb      	adds	r3, r7, #7
    410a:	781b      	ldrb	r3, [r3, #0]
    410c:	221f      	movs	r2, #31
    410e:	4013      	ands	r3, r2
    4110:	2201      	movs	r2, #1
    4112:	409a      	lsls	r2, r3
    4114:	0013      	movs	r3, r2
    4116:	60bb      	str	r3, [r7, #8]
	if (level) {
    4118:	1dbb      	adds	r3, r7, #6
    411a:	781b      	ldrb	r3, [r3, #0]
    411c:	2b00      	cmp	r3, #0
    411e:	d003      	beq.n	4128 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4120:	68fb      	ldr	r3, [r7, #12]
    4122:	68ba      	ldr	r2, [r7, #8]
    4124:	619a      	str	r2, [r3, #24]
}
    4126:	e002      	b.n	412e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    4128:	68fb      	ldr	r3, [r7, #12]
    412a:	68ba      	ldr	r2, [r7, #8]
    412c:	615a      	str	r2, [r3, #20]
}
    412e:	46c0      	nop			; (mov r8, r8)
    4130:	46bd      	mov	sp, r7
    4132:	b004      	add	sp, #16
    4134:	bd80      	pop	{r7, pc}
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	000040a1 	.word	0x000040a1

0000413c <main>:

/************************************************************************/
/*                                      Main                            */
/************************************************************************/
int main (void)
{
    413c:	b580      	push	{r7, lr}
    413e:	b082      	sub	sp, #8
    4140:	af00      	add	r7, sp, #0
    uint8_t tx_preamble[4] = {FIFO_REPEATDATA, 0x38, 8, 0xaa};
    4142:	1d3b      	adds	r3, r7, #4
    4144:	4a0a      	ldr	r2, [pc, #40]	; (4170 <main+0x34>)
    4146:	6812      	ldr	r2, [r2, #0]
    4148:	601a      	str	r2, [r3, #0]

    // initialize all the subsystems on the MCU
    simSysInit();
    414a:	4b0a      	ldr	r3, [pc, #40]	; (4174 <main+0x38>)
    414c:	4798      	blx	r3
      //  spi169_write(tx_preamble, 4);

        // stop the SPI transfer to the FIFO
       // spi169_stop_xfer();

       spi169_start_xfer(AX5043_FIFODATA, WRT);
    414e:	2101      	movs	r1, #1
    4150:	2029      	movs	r0, #41	; 0x29
    4152:	4b09      	ldr	r3, [pc, #36]	; (4178 <main+0x3c>)
    4154:	4798      	blx	r3
        
        // write the preamble
       spi169_write(tx_preamble, 4);
    4156:	1d3b      	adds	r3, r7, #4
    4158:	2104      	movs	r1, #4
    415a:	0018      	movs	r0, r3
    415c:	4b07      	ldr	r3, [pc, #28]	; (417c <main+0x40>)
    415e:	4798      	blx	r3

        // stop the SPI transfer to the FIFO
       spi169_stop_xfer();
    4160:	4b07      	ldr	r3, [pc, #28]	; (4180 <main+0x44>)
    4162:	4798      	blx	r3

      
		
	
        // send an AT command to the 915 MHz module
        uart915_write_cmd("AT+SEND=test\r\n");
    4164:	4b07      	ldr	r3, [pc, #28]	; (4184 <main+0x48>)
    4166:	0018      	movs	r0, r3
    4168:	4b07      	ldr	r3, [pc, #28]	; (4188 <main+0x4c>)
    416a:	4798      	blx	r3
       spi169_start_xfer(AX5043_FIFODATA, WRT);
    416c:	e7ef      	b.n	414e <main+0x12>
    416e:	46c0      	nop			; (mov r8, r8)
    4170:	0000466c 	.word	0x0000466c
    4174:	0000418d 	.word	0x0000418d
    4178:	00000559 	.word	0x00000559
    417c:	00000629 	.word	0x00000629
    4180:	00000605 	.word	0x00000605
    4184:	0000465c 	.word	0x0000465c
    4188:	00000a01 	.word	0x00000a01

0000418c <simSysInit>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes all relevant subsystems.
 */
void simSysInit(void)
{
    418c:	b580      	push	{r7, lr}
    418e:	af00      	add	r7, sp, #0
	system_init();
    4190:	4b08      	ldr	r3, [pc, #32]	; (41b4 <simSysInit+0x28>)
    4192:	4798      	blx	r3
	sys_clk_init();	
    4194:	4b08      	ldr	r3, [pc, #32]	; (41b8 <simSysInit+0x2c>)
    4196:	4798      	blx	r3
	conf_port_pin();
    4198:	4b08      	ldr	r3, [pc, #32]	; (41bc <simSysInit+0x30>)
    419a:	4798      	blx	r3
	
	
	
    spi169_init();
    419c:	4b08      	ldr	r3, [pc, #32]	; (41c0 <simSysInit+0x34>)
    419e:	4798      	blx	r3

  //  uart245_init();
    uart915_init();
    41a0:	4b08      	ldr	r3, [pc, #32]	; (41c4 <simSysInit+0x38>)
    41a2:	4798      	blx	r3

	port_pin_set_output_level(CONFIG245, true);
    41a4:	2101      	movs	r1, #1
    41a6:	2006      	movs	r0, #6
    41a8:	4b07      	ldr	r3, [pc, #28]	; (41c8 <simSysInit+0x3c>)
    41aa:	4798      	blx	r3
	
	
	//uart245_init();
//	uart915_init();

}
    41ac:	46c0      	nop			; (mov r8, r8)
    41ae:	46bd      	mov	sp, r7
    41b0:	bd80      	pop	{r7, pc}
    41b2:	46c0      	nop			; (mov r8, r8)
    41b4:	00003eed 	.word	0x00003eed
    41b8:	000041cd 	.word	0x000041cd
    41bc:	000041f1 	.word	0x000041f1
    41c0:	0000048d 	.word	0x0000048d
    41c4:	00000815 	.word	0x00000815
    41c8:	000040e9 	.word	0x000040e9

000041cc <sys_clk_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes the MCU clocks.
 */
void sys_clk_init(void)
{
    41cc:	b580      	push	{r7, lr}
    41ce:	af00      	add	r7, sp, #0
	clk_osc8m_init();
    41d0:	4b04      	ldr	r3, [pc, #16]	; (41e4 <sys_clk_init+0x18>)
    41d2:	4798      	blx	r3
	clk_gclk0_init();
    41d4:	4b04      	ldr	r3, [pc, #16]	; (41e8 <sys_clk_init+0x1c>)
    41d6:	4798      	blx	r3
    delay_init();
    41d8:	4b04      	ldr	r3, [pc, #16]	; (41ec <sys_clk_init+0x20>)
    41da:	4798      	blx	r3
}
    41dc:	46c0      	nop			; (mov r8, r8)
    41de:	46bd      	mov	sp, r7
    41e0:	bd80      	pop	{r7, pc}
    41e2:	46c0      	nop			; (mov r8, r8)
    41e4:	000042d5 	.word	0x000042d5
    41e8:	00004301 	.word	0x00004301
    41ec:	00000b81 	.word	0x00000b81

000041f0 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    41f0:	b580      	push	{r7, lr}
    41f2:	b082      	sub	sp, #8
    41f4:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    41f6:	1d3b      	adds	r3, r7, #4
    41f8:	0018      	movs	r0, r3
    41fa:	4b33      	ldr	r3, [pc, #204]	; (42c8 <conf_port_pin+0xd8>)
    41fc:	4798      	blx	r3
	
	/**************config pin for 245*************/

	
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    41fe:	1d3b      	adds	r3, r7, #4
    4200:	2200      	movs	r2, #0
    4202:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    4204:	1d3b      	adds	r3, r7, #4
    4206:	2201      	movs	r2, #1
    4208:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS245, &config_port_pin);
    420a:	1d3b      	adds	r3, r7, #4
    420c:	0019      	movs	r1, r3
    420e:	200b      	movs	r0, #11
    4210:	4b2e      	ldr	r3, [pc, #184]	; (42cc <conf_port_pin+0xdc>)
    4212:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4214:	1d3b      	adds	r3, r7, #4
    4216:	2201      	movs	r2, #1
    4218:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    421a:	1d3b      	adds	r3, r7, #4
    421c:	0019      	movs	r1, r3
    421e:	200a      	movs	r0, #10
    4220:	4b2a      	ldr	r3, [pc, #168]	; (42cc <conf_port_pin+0xdc>)
    4222:	4798      	blx	r3
	port_pin_set_output_level(RTS245, true);
    4224:	2101      	movs	r1, #1
    4226:	200a      	movs	r0, #10
    4228:	4b29      	ldr	r3, [pc, #164]	; (42d0 <conf_port_pin+0xe0>)
    422a:	4798      	blx	r3
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    422c:	1d3b      	adds	r3, r7, #4
    422e:	0019      	movs	r1, r3
    4230:	2001      	movs	r0, #1
    4232:	4b26      	ldr	r3, [pc, #152]	; (42cc <conf_port_pin+0xdc>)
    4234:	4798      	blx	r3
    port_pin_set_output_level(PAEN245, true);
    4236:	2101      	movs	r1, #1
    4238:	2001      	movs	r0, #1
    423a:	4b25      	ldr	r3, [pc, #148]	; (42d0 <conf_port_pin+0xe0>)
    423c:	4798      	blx	r3
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    423e:	1d3b      	adds	r3, r7, #4
    4240:	0019      	movs	r1, r3
    4242:	2006      	movs	r0, #6
    4244:	4b21      	ldr	r3, [pc, #132]	; (42cc <conf_port_pin+0xdc>)
    4246:	4798      	blx	r3
    port_pin_set_output_level(CONFIG245, true);
    4248:	2101      	movs	r1, #1
    424a:	2006      	movs	r0, #6
    424c:	4b20      	ldr	r3, [pc, #128]	; (42d0 <conf_port_pin+0xe0>)
    424e:	4798      	blx	r3
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    4250:	1d3b      	adds	r3, r7, #4
    4252:	0019      	movs	r1, r3
    4254:	2007      	movs	r0, #7
    4256:	4b1d      	ldr	r3, [pc, #116]	; (42cc <conf_port_pin+0xdc>)
    4258:	4798      	blx	r3
    port_pin_set_output_level(RESET245, true);
    425a:	2101      	movs	r1, #1
    425c:	2007      	movs	r0, #7
    425e:	4b1c      	ldr	r3, [pc, #112]	; (42d0 <conf_port_pin+0xe0>)
    4260:	4798      	blx	r3
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    4262:	1d3b      	adds	r3, r7, #4
    4264:	2200      	movs	r2, #0
    4266:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    4268:	1d3b      	adds	r3, r7, #4
    426a:	2201      	movs	r2, #1
    426c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    426e:	1d3b      	adds	r3, r7, #4
    4270:	0019      	movs	r1, r3
    4272:	200f      	movs	r0, #15
    4274:	4b15      	ldr	r3, [pc, #84]	; (42cc <conf_port_pin+0xdc>)
    4276:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4278:	1d3b      	adds	r3, r7, #4
    427a:	2201      	movs	r2, #1
    427c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    427e:	1d3b      	adds	r3, r7, #4
    4280:	0019      	movs	r1, r3
    4282:	200e      	movs	r0, #14
    4284:	4b11      	ldr	r3, [pc, #68]	; (42cc <conf_port_pin+0xdc>)
    4286:	4798      	blx	r3
    port_pin_set_output_level(RTS915, true);
    4288:	2101      	movs	r1, #1
    428a:	200e      	movs	r0, #14
    428c:	4b10      	ldr	r3, [pc, #64]	; (42d0 <conf_port_pin+0xe0>)
    428e:	4798      	blx	r3
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    4290:	1d3b      	adds	r3, r7, #4
    4292:	2201      	movs	r2, #1
    4294:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    4296:	1d3b      	adds	r3, r7, #4
    4298:	2202      	movs	r2, #2
    429a:	705a      	strb	r2, [r3, #1]

	
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    429c:	1d3b      	adds	r3, r7, #4
    429e:	2201      	movs	r2, #1
    42a0:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    42a2:	1d3b      	adds	r3, r7, #4
    42a4:	2201      	movs	r2, #1
    42a6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(SS169, &config_port_pin);
    42a8:	1d3b      	adds	r3, r7, #4
    42aa:	0019      	movs	r1, r3
    42ac:	2011      	movs	r0, #17
    42ae:	4b07      	ldr	r3, [pc, #28]	; (42cc <conf_port_pin+0xdc>)
    42b0:	4798      	blx	r3
    port_pin_set_output_level(SS169, true);
    42b2:	2101      	movs	r1, #1
    42b4:	2011      	movs	r0, #17
    42b6:	4b06      	ldr	r3, [pc, #24]	; (42d0 <conf_port_pin+0xe0>)
    42b8:	4798      	blx	r3
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    42ba:	1d3b      	adds	r3, r7, #4
    42bc:	2200      	movs	r2, #0
    42be:	701a      	strb	r2, [r3, #0]
	//port_pin_set_config(IRQ169, &config_port_pin);
	
} // end conf_port_pin(void)
    42c0:	46c0      	nop			; (mov r8, r8)
    42c2:	46bd      	mov	sp, r7
    42c4:	b002      	add	sp, #8
    42c6:	bd80      	pop	{r7, pc}
    42c8:	000040c5 	.word	0x000040c5
    42cc:	00000c31 	.word	0x00000c31
    42d0:	000040e9 	.word	0x000040e9

000042d4 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b082      	sub	sp, #8
    42d8:	af00      	add	r7, sp, #0

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    42da:	1d3b      	adds	r3, r7, #4
    42dc:	2200      	movs	r2, #0
    42de:	701a      	strb	r2, [r3, #0]
	osc8_config.on_demand = true;
    42e0:	1d3b      	adds	r3, r7, #4
    42e2:	2201      	movs	r2, #1
    42e4:	709a      	strb	r2, [r3, #2]
	osc8_config.run_in_standby = false;
    42e6:	1d3b      	adds	r3, r7, #4
    42e8:	2200      	movs	r2, #0
    42ea:	705a      	strb	r2, [r3, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    42ec:	1d3b      	adds	r3, r7, #4
    42ee:	0018      	movs	r0, r3
    42f0:	4b02      	ldr	r3, [pc, #8]	; (42fc <clk_osc8m_init+0x28>)
    42f2:	4798      	blx	r3
}
    42f4:	46c0      	nop			; (mov r8, r8)
    42f6:	46bd      	mov	sp, r7
    42f8:	b002      	add	sp, #8
    42fa:	bd80      	pop	{r7, pc}
    42fc:	00003651 	.word	0x00003651

00004300 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    4300:	b580      	push	{r7, lr}
    4302:	b084      	sub	sp, #16
    4304:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    4306:	4b10      	ldr	r3, [pc, #64]	; (4348 <clk_gclk0_init+0x48>)
    4308:	4798      	blx	r3
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
    430a:	2000      	movs	r0, #0
    430c:	4b0f      	ldr	r3, [pc, #60]	; (434c <clk_gclk0_init+0x4c>)
    430e:	4798      	blx	r3
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    4310:	1d3b      	adds	r3, r7, #4
    4312:	2206      	movs	r2, #6
    4314:	701a      	strb	r2, [r3, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    4316:	1d3b      	adds	r3, r7, #4
    4318:	2200      	movs	r2, #0
    431a:	725a      	strb	r2, [r3, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    431c:	1d3b      	adds	r3, r7, #4
    431e:	2200      	movs	r2, #0
    4320:	705a      	strb	r2, [r3, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    4322:	1d3b      	adds	r3, r7, #4
    4324:	2201      	movs	r2, #1
    4326:	605a      	str	r2, [r3, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    4328:	1d3b      	adds	r3, r7, #4
    432a:	2200      	movs	r2, #0
    432c:	721a      	strb	r2, [r3, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    432e:	1d3b      	adds	r3, r7, #4
    4330:	0019      	movs	r1, r3
    4332:	2000      	movs	r0, #0
    4334:	4b06      	ldr	r3, [pc, #24]	; (4350 <clk_gclk0_init+0x50>)
    4336:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    4338:	2000      	movs	r0, #0
    433a:	4b06      	ldr	r3, [pc, #24]	; (4354 <clk_gclk0_init+0x54>)
    433c:	4798      	blx	r3
}
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	46bd      	mov	sp, r7
    4342:	b004      	add	sp, #16
    4344:	bd80      	pop	{r7, pc}
    4346:	46c0      	nop			; (mov r8, r8)
    4348:	00003925 	.word	0x00003925
    434c:	00004021 	.word	0x00004021
    4350:	00003955 	.word	0x00003955
    4354:	00003a79 	.word	0x00003a79

00004358 <__udivsi3>:
    4358:	2200      	movs	r2, #0
    435a:	0843      	lsrs	r3, r0, #1
    435c:	428b      	cmp	r3, r1
    435e:	d374      	bcc.n	444a <__udivsi3+0xf2>
    4360:	0903      	lsrs	r3, r0, #4
    4362:	428b      	cmp	r3, r1
    4364:	d35f      	bcc.n	4426 <__udivsi3+0xce>
    4366:	0a03      	lsrs	r3, r0, #8
    4368:	428b      	cmp	r3, r1
    436a:	d344      	bcc.n	43f6 <__udivsi3+0x9e>
    436c:	0b03      	lsrs	r3, r0, #12
    436e:	428b      	cmp	r3, r1
    4370:	d328      	bcc.n	43c4 <__udivsi3+0x6c>
    4372:	0c03      	lsrs	r3, r0, #16
    4374:	428b      	cmp	r3, r1
    4376:	d30d      	bcc.n	4394 <__udivsi3+0x3c>
    4378:	22ff      	movs	r2, #255	; 0xff
    437a:	0209      	lsls	r1, r1, #8
    437c:	ba12      	rev	r2, r2
    437e:	0c03      	lsrs	r3, r0, #16
    4380:	428b      	cmp	r3, r1
    4382:	d302      	bcc.n	438a <__udivsi3+0x32>
    4384:	1212      	asrs	r2, r2, #8
    4386:	0209      	lsls	r1, r1, #8
    4388:	d065      	beq.n	4456 <__udivsi3+0xfe>
    438a:	0b03      	lsrs	r3, r0, #12
    438c:	428b      	cmp	r3, r1
    438e:	d319      	bcc.n	43c4 <__udivsi3+0x6c>
    4390:	e000      	b.n	4394 <__udivsi3+0x3c>
    4392:	0a09      	lsrs	r1, r1, #8
    4394:	0bc3      	lsrs	r3, r0, #15
    4396:	428b      	cmp	r3, r1
    4398:	d301      	bcc.n	439e <__udivsi3+0x46>
    439a:	03cb      	lsls	r3, r1, #15
    439c:	1ac0      	subs	r0, r0, r3
    439e:	4152      	adcs	r2, r2
    43a0:	0b83      	lsrs	r3, r0, #14
    43a2:	428b      	cmp	r3, r1
    43a4:	d301      	bcc.n	43aa <__udivsi3+0x52>
    43a6:	038b      	lsls	r3, r1, #14
    43a8:	1ac0      	subs	r0, r0, r3
    43aa:	4152      	adcs	r2, r2
    43ac:	0b43      	lsrs	r3, r0, #13
    43ae:	428b      	cmp	r3, r1
    43b0:	d301      	bcc.n	43b6 <__udivsi3+0x5e>
    43b2:	034b      	lsls	r3, r1, #13
    43b4:	1ac0      	subs	r0, r0, r3
    43b6:	4152      	adcs	r2, r2
    43b8:	0b03      	lsrs	r3, r0, #12
    43ba:	428b      	cmp	r3, r1
    43bc:	d301      	bcc.n	43c2 <__udivsi3+0x6a>
    43be:	030b      	lsls	r3, r1, #12
    43c0:	1ac0      	subs	r0, r0, r3
    43c2:	4152      	adcs	r2, r2
    43c4:	0ac3      	lsrs	r3, r0, #11
    43c6:	428b      	cmp	r3, r1
    43c8:	d301      	bcc.n	43ce <__udivsi3+0x76>
    43ca:	02cb      	lsls	r3, r1, #11
    43cc:	1ac0      	subs	r0, r0, r3
    43ce:	4152      	adcs	r2, r2
    43d0:	0a83      	lsrs	r3, r0, #10
    43d2:	428b      	cmp	r3, r1
    43d4:	d301      	bcc.n	43da <__udivsi3+0x82>
    43d6:	028b      	lsls	r3, r1, #10
    43d8:	1ac0      	subs	r0, r0, r3
    43da:	4152      	adcs	r2, r2
    43dc:	0a43      	lsrs	r3, r0, #9
    43de:	428b      	cmp	r3, r1
    43e0:	d301      	bcc.n	43e6 <__udivsi3+0x8e>
    43e2:	024b      	lsls	r3, r1, #9
    43e4:	1ac0      	subs	r0, r0, r3
    43e6:	4152      	adcs	r2, r2
    43e8:	0a03      	lsrs	r3, r0, #8
    43ea:	428b      	cmp	r3, r1
    43ec:	d301      	bcc.n	43f2 <__udivsi3+0x9a>
    43ee:	020b      	lsls	r3, r1, #8
    43f0:	1ac0      	subs	r0, r0, r3
    43f2:	4152      	adcs	r2, r2
    43f4:	d2cd      	bcs.n	4392 <__udivsi3+0x3a>
    43f6:	09c3      	lsrs	r3, r0, #7
    43f8:	428b      	cmp	r3, r1
    43fa:	d301      	bcc.n	4400 <__udivsi3+0xa8>
    43fc:	01cb      	lsls	r3, r1, #7
    43fe:	1ac0      	subs	r0, r0, r3
    4400:	4152      	adcs	r2, r2
    4402:	0983      	lsrs	r3, r0, #6
    4404:	428b      	cmp	r3, r1
    4406:	d301      	bcc.n	440c <__udivsi3+0xb4>
    4408:	018b      	lsls	r3, r1, #6
    440a:	1ac0      	subs	r0, r0, r3
    440c:	4152      	adcs	r2, r2
    440e:	0943      	lsrs	r3, r0, #5
    4410:	428b      	cmp	r3, r1
    4412:	d301      	bcc.n	4418 <__udivsi3+0xc0>
    4414:	014b      	lsls	r3, r1, #5
    4416:	1ac0      	subs	r0, r0, r3
    4418:	4152      	adcs	r2, r2
    441a:	0903      	lsrs	r3, r0, #4
    441c:	428b      	cmp	r3, r1
    441e:	d301      	bcc.n	4424 <__udivsi3+0xcc>
    4420:	010b      	lsls	r3, r1, #4
    4422:	1ac0      	subs	r0, r0, r3
    4424:	4152      	adcs	r2, r2
    4426:	08c3      	lsrs	r3, r0, #3
    4428:	428b      	cmp	r3, r1
    442a:	d301      	bcc.n	4430 <__udivsi3+0xd8>
    442c:	00cb      	lsls	r3, r1, #3
    442e:	1ac0      	subs	r0, r0, r3
    4430:	4152      	adcs	r2, r2
    4432:	0883      	lsrs	r3, r0, #2
    4434:	428b      	cmp	r3, r1
    4436:	d301      	bcc.n	443c <__udivsi3+0xe4>
    4438:	008b      	lsls	r3, r1, #2
    443a:	1ac0      	subs	r0, r0, r3
    443c:	4152      	adcs	r2, r2
    443e:	0843      	lsrs	r3, r0, #1
    4440:	428b      	cmp	r3, r1
    4442:	d301      	bcc.n	4448 <__udivsi3+0xf0>
    4444:	004b      	lsls	r3, r1, #1
    4446:	1ac0      	subs	r0, r0, r3
    4448:	4152      	adcs	r2, r2
    444a:	1a41      	subs	r1, r0, r1
    444c:	d200      	bcs.n	4450 <__udivsi3+0xf8>
    444e:	4601      	mov	r1, r0
    4450:	4152      	adcs	r2, r2
    4452:	4610      	mov	r0, r2
    4454:	4770      	bx	lr
    4456:	e7ff      	b.n	4458 <__udivsi3+0x100>
    4458:	b501      	push	{r0, lr}
    445a:	2000      	movs	r0, #0
    445c:	f000 f806 	bl	446c <__aeabi_idiv0>
    4460:	bd02      	pop	{r1, pc}
    4462:	46c0      	nop			; (mov r8, r8)

00004464 <__aeabi_uidivmod>:
    4464:	2900      	cmp	r1, #0
    4466:	d0f7      	beq.n	4458 <__udivsi3+0x100>
    4468:	e776      	b.n	4358 <__udivsi3>
    446a:	4770      	bx	lr

0000446c <__aeabi_idiv0>:
    446c:	4770      	bx	lr
    446e:	46c0      	nop			; (mov r8, r8)

00004470 <__aeabi_lmul>:
    4470:	b5f0      	push	{r4, r5, r6, r7, lr}
    4472:	46ce      	mov	lr, r9
    4474:	4647      	mov	r7, r8
    4476:	0415      	lsls	r5, r2, #16
    4478:	0c2d      	lsrs	r5, r5, #16
    447a:	002e      	movs	r6, r5
    447c:	b580      	push	{r7, lr}
    447e:	0407      	lsls	r7, r0, #16
    4480:	0c14      	lsrs	r4, r2, #16
    4482:	0c3f      	lsrs	r7, r7, #16
    4484:	4699      	mov	r9, r3
    4486:	0c03      	lsrs	r3, r0, #16
    4488:	437e      	muls	r6, r7
    448a:	435d      	muls	r5, r3
    448c:	4367      	muls	r7, r4
    448e:	4363      	muls	r3, r4
    4490:	197f      	adds	r7, r7, r5
    4492:	0c34      	lsrs	r4, r6, #16
    4494:	19e4      	adds	r4, r4, r7
    4496:	469c      	mov	ip, r3
    4498:	42a5      	cmp	r5, r4
    449a:	d903      	bls.n	44a4 <__aeabi_lmul+0x34>
    449c:	2380      	movs	r3, #128	; 0x80
    449e:	025b      	lsls	r3, r3, #9
    44a0:	4698      	mov	r8, r3
    44a2:	44c4      	add	ip, r8
    44a4:	464b      	mov	r3, r9
    44a6:	4351      	muls	r1, r2
    44a8:	4343      	muls	r3, r0
    44aa:	0436      	lsls	r6, r6, #16
    44ac:	0c36      	lsrs	r6, r6, #16
    44ae:	0c25      	lsrs	r5, r4, #16
    44b0:	0424      	lsls	r4, r4, #16
    44b2:	4465      	add	r5, ip
    44b4:	19a4      	adds	r4, r4, r6
    44b6:	1859      	adds	r1, r3, r1
    44b8:	1949      	adds	r1, r1, r5
    44ba:	0020      	movs	r0, r4
    44bc:	bc0c      	pop	{r2, r3}
    44be:	4690      	mov	r8, r2
    44c0:	4699      	mov	r9, r3
    44c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000044c4 <__libc_init_array>:
    44c4:	b570      	push	{r4, r5, r6, lr}
    44c6:	2600      	movs	r6, #0
    44c8:	4d0c      	ldr	r5, [pc, #48]	; (44fc <__libc_init_array+0x38>)
    44ca:	4c0d      	ldr	r4, [pc, #52]	; (4500 <__libc_init_array+0x3c>)
    44cc:	1b64      	subs	r4, r4, r5
    44ce:	10a4      	asrs	r4, r4, #2
    44d0:	42a6      	cmp	r6, r4
    44d2:	d109      	bne.n	44e8 <__libc_init_array+0x24>
    44d4:	2600      	movs	r6, #0
    44d6:	f000 f8cb 	bl	4670 <_init>
    44da:	4d0a      	ldr	r5, [pc, #40]	; (4504 <__libc_init_array+0x40>)
    44dc:	4c0a      	ldr	r4, [pc, #40]	; (4508 <__libc_init_array+0x44>)
    44de:	1b64      	subs	r4, r4, r5
    44e0:	10a4      	asrs	r4, r4, #2
    44e2:	42a6      	cmp	r6, r4
    44e4:	d105      	bne.n	44f2 <__libc_init_array+0x2e>
    44e6:	bd70      	pop	{r4, r5, r6, pc}
    44e8:	00b3      	lsls	r3, r6, #2
    44ea:	58eb      	ldr	r3, [r5, r3]
    44ec:	4798      	blx	r3
    44ee:	3601      	adds	r6, #1
    44f0:	e7ee      	b.n	44d0 <__libc_init_array+0xc>
    44f2:	00b3      	lsls	r3, r6, #2
    44f4:	58eb      	ldr	r3, [r5, r3]
    44f6:	4798      	blx	r3
    44f8:	3601      	adds	r6, #1
    44fa:	e7f2      	b.n	44e2 <__libc_init_array+0x1e>
    44fc:	0000467c 	.word	0x0000467c
    4500:	0000467c 	.word	0x0000467c
    4504:	0000467c 	.word	0x0000467c
    4508:	00004680 	.word	0x00004680

0000450c <memset>:
    450c:	0003      	movs	r3, r0
    450e:	1882      	adds	r2, r0, r2
    4510:	4293      	cmp	r3, r2
    4512:	d100      	bne.n	4516 <memset+0xa>
    4514:	4770      	bx	lr
    4516:	7019      	strb	r1, [r3, #0]
    4518:	3301      	adds	r3, #1
    451a:	e7f9      	b.n	4510 <memset+0x4>

0000451c <strlen>:
    451c:	2300      	movs	r3, #0
    451e:	5cc2      	ldrb	r2, [r0, r3]
    4520:	3301      	adds	r3, #1
    4522:	2a00      	cmp	r2, #0
    4524:	d1fb      	bne.n	451e <strlen+0x2>
    4526:	1e58      	subs	r0, r3, #1
    4528:	4770      	bx	lr
    452a:	0000      	movs	r0, r0
    452c:	0a0d5441 	.word	0x0a0d5441
    4530:	00000000 	.word	0x00000000
    4534:	4e2b5441 	.word	0x4e2b5441
    4538:	333d4d4a 	.word	0x333d4d4a
    453c:	00000a0d 	.word	0x00000a0d
    4540:	4e2b5441 	.word	0x4e2b5441
    4544:	30303d41 	.word	0x30303d41
    4548:	32323131 	.word	0x32323131
    454c:	0a0d3333 	.word	0x0a0d3333
    4550:	00000000 	.word	0x00000000
    4554:	4e2b5441 	.word	0x4e2b5441
    4558:	303d4b53 	.word	0x303d4b53
    455c:	32313130 	.word	0x32313130
    4560:	30333332 	.word	0x30333332
    4564:	32313130 	.word	0x32313130
    4568:	30333332 	.word	0x30333332
    456c:	32313130 	.word	0x32313130
    4570:	30333332 	.word	0x30333332
    4574:	32313130 	.word	0x32313130
    4578:	0d333332 	.word	0x0d333332
    457c:	0000000a 	.word	0x0000000a
    4580:	442b5441 	.word	0x442b5441
    4584:	333d4b53 	.word	0x333d4b53
    4588:	31323233 	.word	0x31323233
    458c:	33303031 	.word	0x33303031
    4590:	31323233 	.word	0x31323233
    4594:	33303031 	.word	0x33303031
    4598:	31323233 	.word	0x31323233
    459c:	33303031 	.word	0x33303031
    45a0:	31323233 	.word	0x31323233
    45a4:	0d303031 	.word	0x0d303031
    45a8:	0000000a 	.word	0x0000000a
    45ac:	542b5441 	.word	0x542b5441
    45b0:	3d524458 	.word	0x3d524458
    45b4:	0d385244 	.word	0x0d385244
    45b8:	0000000a 	.word	0x0000000a
    45bc:	542b5441 	.word	0x542b5441
    45c0:	393d4658 	.word	0x393d4658
    45c4:	30353531 	.word	0x30353531
    45c8:	30303030 	.word	0x30303030
    45cc:	00000a0d 	.word	0x00000a0d
    45d0:	57265441 	.word	0x57265441
    45d4:	00000a0d 	.word	0x00000a0d
    45d8:	0d5a5441 	.word	0x0d5a5441
    45dc:	0000000a 	.word	0x0000000a
    45e0:	532b5441 	.word	0x532b5441
    45e4:	000a0d44 	.word	0x000a0d44
    45e8:	522b5441 	.word	0x522b5441
    45ec:	0d495353 	.word	0x0d495353
    45f0:	0000000a 	.word	0x0000000a
    45f4:	42000800 	.word	0x42000800
    45f8:	42000c00 	.word	0x42000c00
    45fc:	42001000 	.word	0x42001000
    4600:	42001400 	.word	0x42001400
    4604:	42001800 	.word	0x42001800
    4608:	42001c00 	.word	0x42001c00
    460c:	0c0b0a09 	.word	0x0c0b0a09
    4610:	00000e0d 	.word	0x00000e0d
    4614:	000035b2 	.word	0x000035b2
    4618:	0000362a 	.word	0x0000362a
    461c:	0000362a 	.word	0x0000362a
    4620:	000035d0 	.word	0x000035d0
    4624:	000035ca 	.word	0x000035ca
    4628:	000035d6 	.word	0x000035d6
    462c:	000035b8 	.word	0x000035b8
    4630:	000035dc 	.word	0x000035dc
    4634:	00003610 	.word	0x00003610
    4638:	00003704 	.word	0x00003704
    463c:	00003754 	.word	0x00003754
    4640:	00003754 	.word	0x00003754
    4644:	00003750 	.word	0x00003750
    4648:	000036f6 	.word	0x000036f6
    464c:	00003716 	.word	0x00003716
    4650:	000036e6 	.word	0x000036e6
    4654:	00003728 	.word	0x00003728
    4658:	0000373a 	.word	0x0000373a
    465c:	532b5441 	.word	0x532b5441
    4660:	3d444e45 	.word	0x3d444e45
    4664:	74736574 	.word	0x74736574
    4668:	00000a0d 	.word	0x00000a0d
    466c:	aa083862 	.word	0xaa083862

00004670 <_init>:
    4670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4672:	46c0      	nop			; (mov r8, r8)
    4674:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4676:	bc08      	pop	{r3}
    4678:	469e      	mov	lr, r3
    467a:	4770      	bx	lr

0000467c <__init_array_start>:
    467c:	000000dd 	.word	0x000000dd

00004680 <_fini>:
    4680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4682:	46c0      	nop			; (mov r8, r8)
    4684:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4686:	bc08      	pop	{r3}
    4688:	469e      	mov	lr, r3
    468a:	4770      	bx	lr

0000468c <__fini_array_start>:
    468c:	000000b5 	.word	0x000000b5
