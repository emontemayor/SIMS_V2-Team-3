
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c58  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00002c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012c  2000001c  00002c74  0002001c  2**2
                  ALLOC
  3 .stack        00002000  20000148  00002da0  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002137d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b8c  00000000  00000000  0004141a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001c0d  00000000  00000000  00043fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005b0  00000000  00000000  00045bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004b0  00000000  00000000  00046163  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004669  00000000  00000000  00046613  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005bbd  00000000  00000000  0004ac7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000011dc  00000000  00000000  0005083c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 21 00 20 d9 25 00 00 d1 26 00 00 d1 26 00 00     H!. .%...&...&..
	...
      2c:	d1 26 00 00 00 00 00 00 00 00 00 00 d1 26 00 00     .&...........&..
      3c:	d1 26 00 00 d1 26 00 00 d1 26 00 00 d1 26 00 00     .&...&...&...&..
      4c:	d1 26 00 00 d1 26 00 00 d1 26 00 00 d1 26 00 00     .&...&...&...&..
      5c:	d1 26 00 00 d1 26 00 00 c5 19 00 00 dd 19 00 00     .&...&..........
      6c:	f5 19 00 00 0d 1a 00 00 25 1a 00 00 3d 1a 00 00     ........%...=...
      7c:	d1 26 00 00 d1 26 00 00 d1 26 00 00 d1 26 00 00     .&...&...&...&..
      8c:	d1 26 00 00 d1 26 00 00 d1 26 00 00 d1 26 00 00     .&...&...&...&..
      9c:	d1 26 00 00 d1 26 00 00 d1 26 00 00 d1 26 00 00     .&...&...&...&..
      ac:	d1 26 00 00 00 00 00 00                             .&......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	00002c58 	.word	0x00002c58

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	00002c58 	.word	0x00002c58
     10c:	00002c58 	.word	0x00002c58
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <system_interrupt_enter_critical_section+0x10>)
     11a:	4798      	blx	r3
}
     11c:	46c0      	nop			; (mov r8, r8)
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	00001a61 	.word	0x00001a61

00000128 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     128:	b580      	push	{r7, lr}
     12a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     12c:	4b02      	ldr	r3, [pc, #8]	; (138 <system_interrupt_leave_critical_section+0x10>)
     12e:	4798      	blx	r3
}
     130:	46c0      	nop			; (mov r8, r8)
     132:	46bd      	mov	sp, r7
     134:	bd80      	pop	{r7, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00001ab5 	.word	0x00001ab5

0000013c <ringbuff_clear>:
 * Return Values(s) : int8_t
 * Description      : Clears the ring buffer. Returns 0 if operation was
 *  successful, else returns -1.
 */
int8_t ringbuff_clear(ringbuff_t* pringbuff)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
    uint8_t ret_val = -1;
     144:	230f      	movs	r3, #15
     146:	18fb      	adds	r3, r7, r3
     148:	22ff      	movs	r2, #255	; 0xff
     14a:	701a      	strb	r2, [r3, #0]
    
    // NULL pointer check
    if(pringbuff)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	2b00      	cmp	r3, #0
     150:	d009      	beq.n	166 <ringbuff_clear+0x2a>
    {
        // clear the read/write values
        pringbuff->write = 0;
     152:	687b      	ldr	r3, [r7, #4]
     154:	2200      	movs	r2, #0
     156:	605a      	str	r2, [r3, #4]
        pringbuff->read = 0;
     158:	687b      	ldr	r3, [r7, #4]
     15a:	2200      	movs	r2, #0
     15c:	609a      	str	r2, [r3, #8]
        ret_val = 0;
     15e:	230f      	movs	r3, #15
     160:	18fb      	adds	r3, r7, r3
     162:	2200      	movs	r2, #0
     164:	701a      	strb	r2, [r3, #0]
    }
    
    return ret_val;
     166:	230f      	movs	r3, #15
     168:	18fb      	adds	r3, r7, r3
     16a:	781b      	ldrb	r3, [r3, #0]
     16c:	b25b      	sxtb	r3, r3
}
     16e:	0018      	movs	r0, r3
     170:	46bd      	mov	sp, r7
     172:	b004      	add	sp, #16
     174:	bd80      	pop	{r7, pc}
	...

00000178 <ringbuff_put>:
 * Return Values(s) : int8_t
 * Description      : Puts a byte into the ring buffer. Returns 0 if the 
 *  operation was successful, else it returns -1.
 */
int8_t ringbuff_put(ringbuff_t* pringbuff, uint8_t put_data)
{
     178:	b580      	push	{r7, lr}
     17a:	b084      	sub	sp, #16
     17c:	af00      	add	r7, sp, #0
     17e:	6078      	str	r0, [r7, #4]
     180:	000a      	movs	r2, r1
     182:	1cfb      	adds	r3, r7, #3
     184:	701a      	strb	r2, [r3, #0]
    uint8_t ret_val = -1;
     186:	230f      	movs	r3, #15
     188:	18fb      	adds	r3, r7, r3
     18a:	22ff      	movs	r2, #255	; 0xff
     18c:	701a      	strb	r2, [r3, #0]
    
    // NULL pointer check
    if(pringbuff)
     18e:	687b      	ldr	r3, [r7, #4]
     190:	2b00      	cmp	r3, #0
     192:	d01b      	beq.n	1cc <ringbuff_put+0x54>
    {
        // keep ring buffer operations atomic relative to interrupts   
        system_interrupt_enter_critical_section();
     194:	4b11      	ldr	r3, [pc, #68]	; (1dc <ringbuff_put+0x64>)
     196:	4798      	blx	r3
        
        // write data to the ring buffer
        pringbuff->buff[pringbuff->write] = put_data;
     198:	687b      	ldr	r3, [r7, #4]
     19a:	681a      	ldr	r2, [r3, #0]
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	685b      	ldr	r3, [r3, #4]
     1a0:	18d3      	adds	r3, r2, r3
     1a2:	1cfa      	adds	r2, r7, #3
     1a4:	7812      	ldrb	r2, [r2, #0]
     1a6:	701a      	strb	r2, [r3, #0]

        /* increment the head. This means old data will be overwritten if the
         * user does not check if the buffer is full */
        pringbuff->write = (pringbuff->write + 1) % pringbuff->size;
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	685b      	ldr	r3, [r3, #4]
     1ac:	1c5a      	adds	r2, r3, #1
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	68d9      	ldr	r1, [r3, #12]
     1b2:	4b0b      	ldr	r3, [pc, #44]	; (1e0 <ringbuff_put+0x68>)
     1b4:	0010      	movs	r0, r2
     1b6:	4798      	blx	r3
     1b8:	000b      	movs	r3, r1
     1ba:	001a      	movs	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	605a      	str	r2, [r3, #4]
        
        system_interrupt_leave_critical_section();
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <ringbuff_put+0x6c>)
     1c2:	4798      	blx	r3

        ret_val = 0;
     1c4:	230f      	movs	r3, #15
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	2200      	movs	r2, #0
     1ca:	701a      	strb	r2, [r3, #0]
    }
    
    return ret_val;
     1cc:	230f      	movs	r3, #15
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	b25b      	sxtb	r3, r3
}
     1d4:	0018      	movs	r0, r3
     1d6:	46bd      	mov	sp, r7
     1d8:	b004      	add	sp, #16
     1da:	bd80      	pop	{r7, pc}
     1dc:	00000115 	.word	0x00000115
     1e0:	00002b0d 	.word	0x00002b0d
     1e4:	00000129 	.word	0x00000129

000001e8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b082      	sub	sp, #8
     1ec:	af00      	add	r7, sp, #0
     1ee:	0002      	movs	r2, r0
     1f0:	1dfb      	adds	r3, r7, #7
     1f2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1f4:	4b06      	ldr	r3, [pc, #24]	; (210 <system_interrupt_enable+0x28>)
     1f6:	1dfa      	adds	r2, r7, #7
     1f8:	7812      	ldrb	r2, [r2, #0]
     1fa:	0011      	movs	r1, r2
     1fc:	221f      	movs	r2, #31
     1fe:	400a      	ands	r2, r1
     200:	2101      	movs	r1, #1
     202:	4091      	lsls	r1, r2
     204:	000a      	movs	r2, r1
     206:	601a      	str	r2, [r3, #0]
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	b002      	add	sp, #8
     20e:	bd80      	pop	{r7, pc}
     210:	e000e100 	.word	0xe000e100

00000214 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     214:	b580      	push	{r7, lr}
     216:	b084      	sub	sp, #16
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	681b      	ldr	r3, [r3, #0]
     220:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     222:	68fb      	ldr	r3, [r7, #12]
     224:	69db      	ldr	r3, [r3, #28]
     226:	1e5a      	subs	r2, r3, #1
     228:	4193      	sbcs	r3, r2
     22a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     22c:	0018      	movs	r0, r3
     22e:	46bd      	mov	sp, r7
     230:	b004      	add	sp, #16
     232:	bd80      	pop	{r7, pc}

00000234 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     234:	b580      	push	{r7, lr}
     236:	b082      	sub	sp, #8
     238:	af00      	add	r7, sp, #0
     23a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	687b      	ldr	r3, [r7, #4]
     240:	0018      	movs	r0, r3
     242:	4b04      	ldr	r3, [pc, #16]	; (254 <_usart_wait_for_sync+0x20>)
     244:	4798      	blx	r3
     246:	1e03      	subs	r3, r0, #0
     248:	d1f9      	bne.n	23e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	46bd      	mov	sp, r7
     24e:	b002      	add	sp, #8
     250:	bd80      	pop	{r7, pc}
     252:	46c0      	nop			; (mov r8, r8)
     254:	00000215 	.word	0x00000215

00000258 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     258:	b580      	push	{r7, lr}
     25a:	b082      	sub	sp, #8
     25c:	af00      	add	r7, sp, #0
     25e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     260:	687b      	ldr	r3, [r7, #4]
     262:	2280      	movs	r2, #128	; 0x80
     264:	05d2      	lsls	r2, r2, #23
     266:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     268:	687b      	ldr	r3, [r7, #4]
     26a:	2200      	movs	r2, #0
     26c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	22ff      	movs	r2, #255	; 0xff
     272:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     274:	687b      	ldr	r3, [r7, #4]
     276:	2200      	movs	r2, #0
     278:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	2200      	movs	r2, #0
     27e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     280:	687b      	ldr	r3, [r7, #4]
     282:	2296      	movs	r2, #150	; 0x96
     284:	0192      	lsls	r2, r2, #6
     286:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2224      	movs	r2, #36	; 0x24
     28c:	2101      	movs	r1, #1
     28e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2225      	movs	r2, #37	; 0x25
     294:	2101      	movs	r1, #1
     296:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2226      	movs	r2, #38	; 0x26
     29c:	2100      	movs	r1, #0
     29e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	2227      	movs	r2, #39	; 0x27
     2a4:	2100      	movs	r1, #0
     2a6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	2200      	movs	r2, #0
     2ac:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     2ae:	687b      	ldr	r3, [r7, #4]
     2b0:	2288      	movs	r2, #136	; 0x88
     2b2:	0352      	lsls	r2, r2, #13
     2b4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	222c      	movs	r2, #44	; 0x2c
     2ba:	2100      	movs	r1, #0
     2bc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     2be:	687b      	ldr	r3, [r7, #4]
     2c0:	222d      	movs	r2, #45	; 0x2d
     2c2:	2100      	movs	r1, #0
     2c4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     2c6:	687b      	ldr	r3, [r7, #4]
     2c8:	2200      	movs	r2, #0
     2ca:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	2200      	movs	r2, #0
     2d0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	2200      	movs	r2, #0
     2d6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	2200      	movs	r2, #0
     2dc:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	2200      	movs	r2, #0
     2e2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	2200      	movs	r2, #0
     2e8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     2ea:	687b      	ldr	r3, [r7, #4]
     2ec:	2200      	movs	r2, #0
     2ee:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	2200      	movs	r2, #0
     2f4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	2200      	movs	r2, #0
     2fa:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	2200      	movs	r2, #0
     300:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     302:	687b      	ldr	r3, [r7, #4]
     304:	2213      	movs	r2, #19
     306:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     308:	687b      	ldr	r3, [r7, #4]
     30a:	2200      	movs	r2, #0
     30c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     30e:	46c0      	nop			; (mov r8, r8)
     310:	46bd      	mov	sp, r7
     312:	b002      	add	sp, #8
     314:	bd80      	pop	{r7, pc}
	...

00000318 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     318:	b580      	push	{r7, lr}
     31a:	b084      	sub	sp, #16
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     320:	687b      	ldr	r3, [r7, #4]
     322:	681b      	ldr	r3, [r3, #0]
     324:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     326:	687b      	ldr	r3, [r7, #4]
     328:	681b      	ldr	r3, [r3, #0]
     32a:	0018      	movs	r0, r3
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <usart_enable+0x3c>)
     32e:	4798      	blx	r3
     330:	0003      	movs	r3, r0
     332:	0018      	movs	r0, r3
     334:	4b08      	ldr	r3, [pc, #32]	; (358 <usart_enable+0x40>)
     336:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     338:	687b      	ldr	r3, [r7, #4]
     33a:	0018      	movs	r0, r3
     33c:	4b07      	ldr	r3, [pc, #28]	; (35c <usart_enable+0x44>)
     33e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     340:	68fb      	ldr	r3, [r7, #12]
     342:	681b      	ldr	r3, [r3, #0]
     344:	2202      	movs	r2, #2
     346:	431a      	orrs	r2, r3
     348:	68fb      	ldr	r3, [r7, #12]
     34a:	601a      	str	r2, [r3, #0]
}
     34c:	46c0      	nop			; (mov r8, r8)
     34e:	46bd      	mov	sp, r7
     350:	b004      	add	sp, #16
     352:	bd80      	pop	{r7, pc}
     354:	00001981 	.word	0x00001981
     358:	000001e9 	.word	0x000001e9
     35c:	00000235 	.word	0x00000235

00000360 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     360:	b580      	push	{r7, lr}
     362:	b082      	sub	sp, #8
     364:	af00      	add	r7, sp, #0
     366:	6078      	str	r0, [r7, #4]
     368:	000a      	movs	r2, r1
     36a:	1cfb      	adds	r3, r7, #3
     36c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     36e:	687b      	ldr	r3, [r7, #4]
     370:	2231      	movs	r2, #49	; 0x31
     372:	5c9b      	ldrb	r3, [r3, r2]
     374:	b25a      	sxtb	r2, r3
     376:	1cfb      	adds	r3, r7, #3
     378:	781b      	ldrb	r3, [r3, #0]
     37a:	2101      	movs	r1, #1
     37c:	4099      	lsls	r1, r3
     37e:	000b      	movs	r3, r1
     380:	b25b      	sxtb	r3, r3
     382:	4313      	orrs	r3, r2
     384:	b25b      	sxtb	r3, r3
     386:	b2d9      	uxtb	r1, r3
     388:	687b      	ldr	r3, [r7, #4]
     38a:	2231      	movs	r2, #49	; 0x31
     38c:	5499      	strb	r1, [r3, r2]

}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	46bd      	mov	sp, r7
     392:	b002      	add	sp, #8
     394:	bd80      	pop	{r7, pc}
	...

00000398 <uart915_init>:
 * Return Values(s) : void
 * Description      : Initializes the SERCOM UART for communication with the
 *  MTXDOT module.
 */
void uart915_init(void)
{
     398:	b580      	push	{r7, lr}
     39a:	b090      	sub	sp, #64	; 0x40
     39c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
     39e:	003b      	movs	r3, r7
     3a0:	0018      	movs	r0, r3
     3a2:	4b19      	ldr	r3, [pc, #100]	; (408 <uart915_init+0x70>)
     3a4:	4798      	blx	r3
    
    // configure the UART
    config_usart.baudrate    = UART915_BAUD;
     3a6:	003b      	movs	r3, r7
     3a8:	22e1      	movs	r2, #225	; 0xe1
     3aa:	0252      	lsls	r2, r2, #9
     3ac:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = UART915_PINMUX;
     3ae:	003b      	movs	r3, r7
     3b0:	2290      	movs	r2, #144	; 0x90
     3b2:	0352      	lsls	r2, r2, #13
     3b4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = UTX915;
     3b6:	003b      	movs	r3, r7
     3b8:	4a14      	ldr	r2, [pc, #80]	; (40c <uart915_init+0x74>)
     3ba:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = URX915;
     3bc:	003b      	movs	r3, r7
     3be:	4a14      	ldr	r2, [pc, #80]	; (410 <uart915_init+0x78>)
     3c0:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     3c2:	003b      	movs	r3, r7
     3c4:	2201      	movs	r2, #1
     3c6:	4252      	negs	r2, r2
     3c8:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     3ca:	003b      	movs	r3, r7
     3cc:	2201      	movs	r2, #1
     3ce:	4252      	negs	r2, r2
     3d0:	63da      	str	r2, [r3, #60]	; 0x3c
    config_usart.generator_source = UART245_CLK;
     3d2:	003b      	movs	r3, r7
     3d4:	222d      	movs	r2, #45	; 0x2d
     3d6:	2100      	movs	r1, #0
     3d8:	5499      	strb	r1, [r3, r2]
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
     3da:	003b      	movs	r3, r7
     3dc:	2200      	movs	r2, #0
     3de:	605a      	str	r2, [r3, #4]
    
    // initialize the uart module until an STATUS_OK is returned
    while (usart_init(&uart915_inst, UART915, &config_usart) != STATUS_OK);
     3e0:	46c0      	nop			; (mov r8, r8)
     3e2:	003a      	movs	r2, r7
     3e4:	490b      	ldr	r1, [pc, #44]	; (414 <uart915_init+0x7c>)
     3e6:	4b0c      	ldr	r3, [pc, #48]	; (418 <uart915_init+0x80>)
     3e8:	0018      	movs	r0, r3
     3ea:	4b0c      	ldr	r3, [pc, #48]	; (41c <uart915_init+0x84>)
     3ec:	4798      	blx	r3
     3ee:	1e03      	subs	r3, r0, #0
     3f0:	d1f7      	bne.n	3e2 <uart915_init+0x4a>
    
    // enable the uart
    usart_enable(&uart915_inst);
     3f2:	4b09      	ldr	r3, [pc, #36]	; (418 <uart915_init+0x80>)
     3f4:	0018      	movs	r0, r3
     3f6:	4b0a      	ldr	r3, [pc, #40]	; (420 <uart915_init+0x88>)
     3f8:	4798      	blx	r3
    
    // configure the callback(s) for this module
    configure_uart915_callbacks();
     3fa:	4b0a      	ldr	r3, [pc, #40]	; (424 <uart915_init+0x8c>)
     3fc:	4798      	blx	r3
}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	46bd      	mov	sp, r7
     402:	b010      	add	sp, #64	; 0x40
     404:	bd80      	pop	{r7, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	00000259 	.word	0x00000259
     40c:	000c0002 	.word	0x000c0002
     410:	000d0002 	.word	0x000d0002
     414:	42001000 	.word	0x42001000
     418:	20000038 	.word	0x20000038
     41c:	00001049 	.word	0x00001049
     420:	00000319 	.word	0x00000319
     424:	00000429 	.word	0x00000429

00000428 <configure_uart915_callbacks>:
 *  (depending on which callback is registered) receives/transmits a character.
 *  Kind of like an ISR, but executed in the actual ISR for the UART (handled
 *  by the ASF library).
 */
void configure_uart915_callbacks(void)
{
     428:	b580      	push	{r7, lr}
     42a:	af00      	add	r7, sp, #0
    // register the callback function
    usart_register_callback(&uart915_inst, uart915_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     42c:	4909      	ldr	r1, [pc, #36]	; (454 <configure_uart915_callbacks+0x2c>)
     42e:	4b0a      	ldr	r3, [pc, #40]	; (458 <configure_uart915_callbacks+0x30>)
     430:	2201      	movs	r2, #1
     432:	0018      	movs	r0, r3
     434:	4b09      	ldr	r3, [pc, #36]	; (45c <configure_uart915_callbacks+0x34>)
     436:	4798      	blx	r3
    
    // enable callback for the receiver
    usart_enable_callback(&uart915_inst, USART_CALLBACK_BUFFER_RECEIVED);
     438:	4b07      	ldr	r3, [pc, #28]	; (458 <configure_uart915_callbacks+0x30>)
     43a:	2101      	movs	r1, #1
     43c:	0018      	movs	r0, r3
     43e:	4b08      	ldr	r3, [pc, #32]	; (460 <configure_uart915_callbacks+0x38>)
     440:	4798      	blx	r3
    
    // start a read buffer job so the receiver is ready
    usart_read_buffer_job(&uart915_inst, &uart915_rx_read, 1);
     442:	4908      	ldr	r1, [pc, #32]	; (464 <configure_uart915_callbacks+0x3c>)
     444:	4b04      	ldr	r3, [pc, #16]	; (458 <configure_uart915_callbacks+0x30>)
     446:	2201      	movs	r2, #1
     448:	0018      	movs	r0, r3
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <configure_uart915_callbacks+0x40>)
     44c:	4798      	blx	r3
}
     44e:	46c0      	nop			; (mov r8, r8)
     450:	46bd      	mov	sp, r7
     452:	bd80      	pop	{r7, pc}
     454:	0000046d 	.word	0x0000046d
     458:	20000038 	.word	0x20000038
     45c:	00001531 	.word	0x00001531
     460:	00000361 	.word	0x00000361
     464:	2000006c 	.word	0x2000006c
     468:	00001579 	.word	0x00001579

0000046c <uart915_read_callback>:
 *  character into a ring buffer and parses the character to find out if the 
 *  character is a part of a "OK\r\n" response from the MTXDOT module. Starts
 *  another UART buffer job (setting up an asynchronous read). 
 */
static void uart915_read_callback(struct usart_module *const usart_module)
{
     46c:	b580      	push	{r7, lr}
     46e:	b082      	sub	sp, #8
     470:	af00      	add	r7, sp, #0
     472:	6078      	str	r0, [r7, #4]
    // put the received byte into the ring buffer
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     474:	4b0c      	ldr	r3, [pc, #48]	; (4a8 <uart915_read_callback+0x3c>)
     476:	781a      	ldrb	r2, [r3, #0]
     478:	4b0c      	ldr	r3, [pc, #48]	; (4ac <uart915_read_callback+0x40>)
     47a:	0011      	movs	r1, r2
     47c:	0018      	movs	r0, r3
     47e:	4b0c      	ldr	r3, [pc, #48]	; (4b0 <uart915_read_callback+0x44>)
     480:	4798      	blx	r3
    
    /* parse the character to see if it is an "OK\r\n". Set the flag equal to
     * the response parsing function's return value */
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <uart915_read_callback+0x3c>)
     484:	781b      	ldrb	r3, [r3, #0]
     486:	0018      	movs	r0, r3
     488:	4b0a      	ldr	r3, [pc, #40]	; (4b4 <uart915_read_callback+0x48>)
     48a:	4798      	blx	r3
     48c:	0003      	movs	r3, r0
     48e:	001a      	movs	r2, r3
     490:	4b09      	ldr	r3, [pc, #36]	; (4b8 <uart915_read_callback+0x4c>)
     492:	701a      	strb	r2, [r3, #0]
    
    // start another read buffer job
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     494:	4904      	ldr	r1, [pc, #16]	; (4a8 <uart915_read_callback+0x3c>)
     496:	687b      	ldr	r3, [r7, #4]
     498:	2201      	movs	r2, #1
     49a:	0018      	movs	r0, r3
     49c:	4b07      	ldr	r3, [pc, #28]	; (4bc <uart915_read_callback+0x50>)
     49e:	4798      	blx	r3
}
     4a0:	46c0      	nop			; (mov r8, r8)
     4a2:	46bd      	mov	sp, r7
     4a4:	b002      	add	sp, #8
     4a6:	bd80      	pop	{r7, pc}
     4a8:	2000006c 	.word	0x2000006c
     4ac:	20000000 	.word	0x20000000
     4b0:	00000179 	.word	0x00000179
     4b4:	000004c1 	.word	0x000004c1
     4b8:	200000f1 	.word	0x200000f1
     4bc:	00001579 	.word	0x00001579

000004c0 <uart915_parse_response>:
 *  MTXDOT received and responded to a command sent by uart915_write_cmd().
 *  Anything else resets the state machine back to its starting state.
 *  Returns true if an "OK\r\n" sequence was found, else false.
 */
static bool uart915_parse_response(uint8_t next_char)
{
     4c0:	b580      	push	{r7, lr}
     4c2:	b082      	sub	sp, #8
     4c4:	af00      	add	r7, sp, #0
     4c6:	0002      	movs	r2, r0
     4c8:	1dfb      	adds	r3, r7, #7
     4ca:	701a      	strb	r2, [r3, #0]
    switch(rx_state)
     4cc:	4b25      	ldr	r3, [pc, #148]	; (564 <uart915_parse_response+0xa4>)
     4ce:	781b      	ldrb	r3, [r3, #0]
     4d0:	b2db      	uxtb	r3, r3
     4d2:	2b01      	cmp	r3, #1
     4d4:	d015      	beq.n	502 <uart915_parse_response+0x42>
     4d6:	dc02      	bgt.n	4de <uart915_parse_response+0x1e>
     4d8:	2b00      	cmp	r3, #0
     4da:	d005      	beq.n	4e8 <uart915_parse_response+0x28>
     4dc:	e039      	b.n	552 <uart915_parse_response+0x92>
     4de:	2b02      	cmp	r3, #2
     4e0:	d01c      	beq.n	51c <uart915_parse_response+0x5c>
     4e2:	2b03      	cmp	r3, #3
     4e4:	d027      	beq.n	536 <uart915_parse_response+0x76>
     4e6:	e034      	b.n	552 <uart915_parse_response+0x92>
    {
        case START:
            switch(next_char)
     4e8:	1dfb      	adds	r3, r7, #7
     4ea:	781b      	ldrb	r3, [r3, #0]
     4ec:	2b4f      	cmp	r3, #79	; 0x4f
     4ee:	d103      	bne.n	4f8 <uart915_parse_response+0x38>
            {
                case 'O':
                   rx_state = O_RX;
     4f0:	4b1c      	ldr	r3, [pc, #112]	; (564 <uart915_parse_response+0xa4>)
     4f2:	2201      	movs	r2, #1
     4f4:	701a      	strb	r2, [r3, #0]
                   break; //end of 'O' case
     4f6:	e003      	b.n	500 <uart915_parse_response+0x40>
            
                default:
                    rx_state = START;
     4f8:	4b1a      	ldr	r3, [pc, #104]	; (564 <uart915_parse_response+0xa4>)
     4fa:	2200      	movs	r2, #0
     4fc:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     4fe:	46c0      	nop			; (mov r8, r8)
            }
            break; //end of START case
     500:	e02b      	b.n	55a <uart915_parse_response+0x9a>
        
        case O_RX:
            switch(next_char)
     502:	1dfb      	adds	r3, r7, #7
     504:	781b      	ldrb	r3, [r3, #0]
     506:	2b4b      	cmp	r3, #75	; 0x4b
     508:	d103      	bne.n	512 <uart915_parse_response+0x52>
            {
                case 'K':
                    rx_state = K_RX;
     50a:	4b16      	ldr	r3, [pc, #88]	; (564 <uart915_parse_response+0xa4>)
     50c:	2202      	movs	r2, #2
     50e:	701a      	strb	r2, [r3, #0]
                    break; //end of 'K' case
     510:	e003      	b.n	51a <uart915_parse_response+0x5a>
            
                default:
                    rx_state = START;
     512:	4b14      	ldr	r3, [pc, #80]	; (564 <uart915_parse_response+0xa4>)
     514:	2200      	movs	r2, #0
     516:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     518:	46c0      	nop			; (mov r8, r8)
            }
            
            break; //end of O_RX case
     51a:	e01e      	b.n	55a <uart915_parse_response+0x9a>
        
        case K_RX:
            switch(next_char)
     51c:	1dfb      	adds	r3, r7, #7
     51e:	781b      	ldrb	r3, [r3, #0]
     520:	2b0d      	cmp	r3, #13
     522:	d103      	bne.n	52c <uart915_parse_response+0x6c>
            {
                case '\r':
                    rx_state = CR_RX;
     524:	4b0f      	ldr	r3, [pc, #60]	; (564 <uart915_parse_response+0xa4>)
     526:	2203      	movs	r2, #3
     528:	701a      	strb	r2, [r3, #0]
                    break; //end of '\r' case
     52a:	e003      	b.n	534 <uart915_parse_response+0x74>
            
                default:
                    rx_state = START;
     52c:	4b0d      	ldr	r3, [pc, #52]	; (564 <uart915_parse_response+0xa4>)
     52e:	2200      	movs	r2, #0
     530:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     532:	46c0      	nop			; (mov r8, r8)
            }
            
        break; //end of K_RX case
     534:	e011      	b.n	55a <uart915_parse_response+0x9a>
        
        case CR_RX:
        switch(next_char)
     536:	1dfb      	adds	r3, r7, #7
     538:	781b      	ldrb	r3, [r3, #0]
     53a:	2b0a      	cmp	r3, #10
     53c:	d104      	bne.n	548 <uart915_parse_response+0x88>
        {
            case '\n':
                //reset state
                rx_state = START;
     53e:	4b09      	ldr	r3, [pc, #36]	; (564 <uart915_parse_response+0xa4>)
     540:	2200      	movs	r2, #0
     542:	701a      	strb	r2, [r3, #0]
                //return true, because response is OK
                return true;
     544:	2301      	movs	r3, #1
     546:	e009      	b.n	55c <uart915_parse_response+0x9c>
                break; //end of '\n' case
            
            default:
                rx_state = START;
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <uart915_parse_response+0xa4>)
     54a:	2200      	movs	r2, #0
     54c:	701a      	strb	r2, [r3, #0]
                break; //end of default case
     54e:	46c0      	nop			; (mov r8, r8)
        }
        break; //end of CR_RX case
     550:	e003      	b.n	55a <uart915_parse_response+0x9a>
        
        default:
            rx_state = START;
     552:	4b04      	ldr	r3, [pc, #16]	; (564 <uart915_parse_response+0xa4>)
     554:	2200      	movs	r2, #0
     556:	701a      	strb	r2, [r3, #0]
            break;
     558:	46c0      	nop			; (mov r8, r8)
    }
    
    return false;
     55a:	2300      	movs	r3, #0
}
     55c:	0018      	movs	r0, r3
     55e:	46bd      	mov	sp, r7
     560:	b002      	add	sp, #8
     562:	bd80      	pop	{r7, pc}
     564:	200000f0 	.word	0x200000f0

00000568 <uart915_write_cmd>:
 * Return Values(s) : void
 * Description      : Sends a string to the MTXDOT and waits for an 
 *  "OK\r\n" response.
 */
void uart915_write_cmd(const char* cmd_str)
{
     568:	b580      	push	{r7, lr}
     56a:	b082      	sub	sp, #8
     56c:	af00      	add	r7, sp, #0
     56e:	6078      	str	r0, [r7, #4]
    // clear the flag
    flag_ok_received = false;
     570:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <uart915_write_cmd+0x3c>)
     572:	2200      	movs	r2, #0
     574:	701a      	strb	r2, [r3, #0]
    
    // reset state machine for determining okay_received
    rx_state = START;
     576:	4b0c      	ldr	r3, [pc, #48]	; (5a8 <uart915_write_cmd+0x40>)
     578:	2200      	movs	r2, #0
     57a:	701a      	strb	r2, [r3, #0]
    
    // clear the ring buffer
    ringbuff_clear(&uart915_ringbuff);
     57c:	4b0b      	ldr	r3, [pc, #44]	; (5ac <uart915_write_cmd+0x44>)
     57e:	0018      	movs	r0, r3
     580:	4b0b      	ldr	r3, [pc, #44]	; (5b0 <uart915_write_cmd+0x48>)
     582:	4798      	blx	r3
    
    // write the AT command
    usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     584:	687b      	ldr	r3, [r7, #4]
     586:	0018      	movs	r0, r3
     588:	4b0a      	ldr	r3, [pc, #40]	; (5b4 <uart915_write_cmd+0x4c>)
     58a:	4798      	blx	r3
     58c:	0003      	movs	r3, r0
     58e:	b29a      	uxth	r2, r3
     590:	6879      	ldr	r1, [r7, #4]
     592:	4b09      	ldr	r3, [pc, #36]	; (5b8 <uart915_write_cmd+0x50>)
     594:	0018      	movs	r0, r3
     596:	4b09      	ldr	r3, [pc, #36]	; (5bc <uart915_write_cmd+0x54>)
     598:	4798      	blx	r3
    
	//while(!flag_ok_received);
}
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	46bd      	mov	sp, r7
     59e:	b002      	add	sp, #8
     5a0:	bd80      	pop	{r7, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	200000f1 	.word	0x200000f1
     5a8:	200000f0 	.word	0x200000f0
     5ac:	20000000 	.word	0x20000000
     5b0:	0000013d 	.word	0x0000013d
     5b4:	00002bb5 	.word	0x00002bb5
     5b8:	20000038 	.word	0x20000038
     5bc:	00001321 	.word	0x00001321

000005c0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     5c0:	b580      	push	{r7, lr}
     5c2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     5c4:	2000      	movs	r0, #0
     5c6:	4b0f      	ldr	r3, [pc, #60]	; (604 <delay_init+0x44>)
     5c8:	4798      	blx	r3
     5ca:	0002      	movs	r2, r0
     5cc:	4b0e      	ldr	r3, [pc, #56]	; (608 <delay_init+0x48>)
     5ce:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     5d0:	4b0d      	ldr	r3, [pc, #52]	; (608 <delay_init+0x48>)
     5d2:	6818      	ldr	r0, [r3, #0]
     5d4:	4b0d      	ldr	r3, [pc, #52]	; (60c <delay_init+0x4c>)
     5d6:	22fa      	movs	r2, #250	; 0xfa
     5d8:	0091      	lsls	r1, r2, #2
     5da:	4798      	blx	r3
     5dc:	0003      	movs	r3, r0
     5de:	001a      	movs	r2, r3
     5e0:	4b09      	ldr	r3, [pc, #36]	; (608 <delay_init+0x48>)
     5e2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     5e4:	4b08      	ldr	r3, [pc, #32]	; (608 <delay_init+0x48>)
     5e6:	6818      	ldr	r0, [r3, #0]
     5e8:	4b08      	ldr	r3, [pc, #32]	; (60c <delay_init+0x4c>)
     5ea:	22fa      	movs	r2, #250	; 0xfa
     5ec:	0091      	lsls	r1, r2, #2
     5ee:	4798      	blx	r3
     5f0:	0003      	movs	r3, r0
     5f2:	001a      	movs	r2, r3
     5f4:	4b06      	ldr	r3, [pc, #24]	; (610 <delay_init+0x50>)
     5f6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     5f8:	4b06      	ldr	r3, [pc, #24]	; (614 <delay_init+0x54>)
     5fa:	2205      	movs	r2, #5
     5fc:	601a      	str	r2, [r3, #0]
}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	46bd      	mov	sp, r7
     602:	bd80      	pop	{r7, pc}
     604:	0000218d 	.word	0x0000218d
     608:	20000010 	.word	0x20000010
     60c:	00002a01 	.word	0x00002a01
     610:	20000014 	.word	0x20000014
     614:	e000e010 	.word	0xe000e010

00000618 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     618:	b580      	push	{r7, lr}
     61a:	b082      	sub	sp, #8
     61c:	af00      	add	r7, sp, #0
     61e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     620:	687b      	ldr	r3, [r7, #4]
     622:	2280      	movs	r2, #128	; 0x80
     624:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     626:	687b      	ldr	r3, [r7, #4]
     628:	2200      	movs	r2, #0
     62a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	2201      	movs	r2, #1
     630:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     632:	687b      	ldr	r3, [r7, #4]
     634:	2200      	movs	r2, #0
     636:	70da      	strb	r2, [r3, #3]
}
     638:	46c0      	nop			; (mov r8, r8)
     63a:	46bd      	mov	sp, r7
     63c:	b002      	add	sp, #8
     63e:	bd80      	pop	{r7, pc}

00000640 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     640:	b580      	push	{r7, lr}
     642:	b084      	sub	sp, #16
     644:	af00      	add	r7, sp, #0
     646:	0002      	movs	r2, r0
     648:	6039      	str	r1, [r7, #0]
     64a:	1dfb      	adds	r3, r7, #7
     64c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     64e:	230c      	movs	r3, #12
     650:	18fb      	adds	r3, r7, r3
     652:	0018      	movs	r0, r3
     654:	4b10      	ldr	r3, [pc, #64]	; (698 <port_pin_set_config+0x58>)
     656:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     658:	230c      	movs	r3, #12
     65a:	18fb      	adds	r3, r7, r3
     65c:	2280      	movs	r2, #128	; 0x80
     65e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     660:	683b      	ldr	r3, [r7, #0]
     662:	781a      	ldrb	r2, [r3, #0]
     664:	230c      	movs	r3, #12
     666:	18fb      	adds	r3, r7, r3
     668:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	785a      	ldrb	r2, [r3, #1]
     66e:	230c      	movs	r3, #12
     670:	18fb      	adds	r3, r7, r3
     672:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     674:	683b      	ldr	r3, [r7, #0]
     676:	789a      	ldrb	r2, [r3, #2]
     678:	230c      	movs	r3, #12
     67a:	18fb      	adds	r3, r7, r3
     67c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     67e:	230c      	movs	r3, #12
     680:	18fa      	adds	r2, r7, r3
     682:	1dfb      	adds	r3, r7, #7
     684:	781b      	ldrb	r3, [r3, #0]
     686:	0011      	movs	r1, r2
     688:	0018      	movs	r0, r3
     68a:	4b04      	ldr	r3, [pc, #16]	; (69c <port_pin_set_config+0x5c>)
     68c:	4798      	blx	r3
}
     68e:	46c0      	nop			; (mov r8, r8)
     690:	46bd      	mov	sp, r7
     692:	b004      	add	sp, #16
     694:	bd80      	pop	{r7, pc}
     696:	46c0      	nop			; (mov r8, r8)
     698:	00000619 	.word	0x00000619
     69c:	00002551 	.word	0x00002551

000006a0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     6a0:	b580      	push	{r7, lr}
     6a2:	b082      	sub	sp, #8
     6a4:	af00      	add	r7, sp, #0
     6a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	2200      	movs	r2, #0
     6ac:	701a      	strb	r2, [r3, #0]
}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	46bd      	mov	sp, r7
     6b2:	b002      	add	sp, #8
     6b4:	bd80      	pop	{r7, pc}

000006b6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     6b6:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b8:	b08d      	sub	sp, #52	; 0x34
     6ba:	af00      	add	r7, sp, #0
     6bc:	60b8      	str	r0, [r7, #8]
     6be:	60f9      	str	r1, [r7, #12]
     6c0:	603a      	str	r2, [r7, #0]
     6c2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6c4:	2300      	movs	r3, #0
     6c6:	2400      	movs	r4, #0
     6c8:	623b      	str	r3, [r7, #32]
     6ca:	627c      	str	r4, [r7, #36]	; 0x24
     6cc:	2300      	movs	r3, #0
     6ce:	2400      	movs	r4, #0
     6d0:	61bb      	str	r3, [r7, #24]
     6d2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     6d4:	233f      	movs	r3, #63	; 0x3f
     6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
     6d8:	e053      	b.n	782 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     6dc:	3b20      	subs	r3, #32
     6de:	2b00      	cmp	r3, #0
     6e0:	db04      	blt.n	6ec <long_division+0x36>
     6e2:	2201      	movs	r2, #1
     6e4:	409a      	lsls	r2, r3
     6e6:	0013      	movs	r3, r2
     6e8:	617b      	str	r3, [r7, #20]
     6ea:	e00b      	b.n	704 <long_division+0x4e>
     6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     6ee:	2220      	movs	r2, #32
     6f0:	1ad3      	subs	r3, r2, r3
     6f2:	2201      	movs	r2, #1
     6f4:	40da      	lsrs	r2, r3
     6f6:	0013      	movs	r3, r2
     6f8:	2100      	movs	r1, #0
     6fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     6fc:	4091      	lsls	r1, r2
     6fe:	000a      	movs	r2, r1
     700:	4313      	orrs	r3, r2
     702:	617b      	str	r3, [r7, #20]
     704:	2201      	movs	r2, #1
     706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     708:	409a      	lsls	r2, r3
     70a:	0013      	movs	r3, r2
     70c:	613b      	str	r3, [r7, #16]

		r = r << 1;
     70e:	69bb      	ldr	r3, [r7, #24]
     710:	69fc      	ldr	r4, [r7, #28]
     712:	18db      	adds	r3, r3, r3
     714:	4164      	adcs	r4, r4
     716:	61bb      	str	r3, [r7, #24]
     718:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     71a:	68bb      	ldr	r3, [r7, #8]
     71c:	693a      	ldr	r2, [r7, #16]
     71e:	401a      	ands	r2, r3
     720:	0015      	movs	r5, r2
     722:	68fb      	ldr	r3, [r7, #12]
     724:	697a      	ldr	r2, [r7, #20]
     726:	401a      	ands	r2, r3
     728:	0016      	movs	r6, r2
     72a:	002b      	movs	r3, r5
     72c:	4333      	orrs	r3, r6
     72e:	d007      	beq.n	740 <long_division+0x8a>
			r |= 0x01;
     730:	69bb      	ldr	r3, [r7, #24]
     732:	2201      	movs	r2, #1
     734:	4313      	orrs	r3, r2
     736:	61bb      	str	r3, [r7, #24]
     738:	69fb      	ldr	r3, [r7, #28]
     73a:	2200      	movs	r2, #0
     73c:	4313      	orrs	r3, r2
     73e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     740:	687a      	ldr	r2, [r7, #4]
     742:	69fb      	ldr	r3, [r7, #28]
     744:	429a      	cmp	r2, r3
     746:	d819      	bhi.n	77c <long_division+0xc6>
     748:	687a      	ldr	r2, [r7, #4]
     74a:	69fb      	ldr	r3, [r7, #28]
     74c:	429a      	cmp	r2, r3
     74e:	d103      	bne.n	758 <long_division+0xa2>
     750:	683a      	ldr	r2, [r7, #0]
     752:	69bb      	ldr	r3, [r7, #24]
     754:	429a      	cmp	r2, r3
     756:	d811      	bhi.n	77c <long_division+0xc6>
			r = r - d;
     758:	69b9      	ldr	r1, [r7, #24]
     75a:	69fa      	ldr	r2, [r7, #28]
     75c:	683b      	ldr	r3, [r7, #0]
     75e:	687c      	ldr	r4, [r7, #4]
     760:	1ac9      	subs	r1, r1, r3
     762:	41a2      	sbcs	r2, r4
     764:	000b      	movs	r3, r1
     766:	0014      	movs	r4, r2
     768:	61bb      	str	r3, [r7, #24]
     76a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     76c:	6a3a      	ldr	r2, [r7, #32]
     76e:	693b      	ldr	r3, [r7, #16]
     770:	4313      	orrs	r3, r2
     772:	623b      	str	r3, [r7, #32]
     774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     776:	697b      	ldr	r3, [r7, #20]
     778:	4313      	orrs	r3, r2
     77a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     77e:	3b01      	subs	r3, #1
     780:	62fb      	str	r3, [r7, #44]	; 0x2c
     782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     784:	2b00      	cmp	r3, #0
     786:	daa8      	bge.n	6da <long_division+0x24>
		}
	}

	return q;
     788:	6a3b      	ldr	r3, [r7, #32]
     78a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     78c:	0018      	movs	r0, r3
     78e:	0021      	movs	r1, r4
     790:	46bd      	mov	sp, r7
     792:	b00d      	add	sp, #52	; 0x34
     794:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000796 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     796:	b580      	push	{r7, lr}
     798:	b086      	sub	sp, #24
     79a:	af00      	add	r7, sp, #0
     79c:	60f8      	str	r0, [r7, #12]
     79e:	60b9      	str	r1, [r7, #8]
     7a0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     7a2:	2316      	movs	r3, #22
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	2200      	movs	r2, #0
     7a8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     7aa:	68bb      	ldr	r3, [r7, #8]
     7ac:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     7ae:	68bb      	ldr	r3, [r7, #8]
     7b0:	085a      	lsrs	r2, r3, #1
     7b2:	68fb      	ldr	r3, [r7, #12]
     7b4:	429a      	cmp	r2, r3
     7b6:	d201      	bcs.n	7bc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7b8:	2340      	movs	r3, #64	; 0x40
     7ba:	e026      	b.n	80a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     7bc:	68bb      	ldr	r3, [r7, #8]
     7be:	085b      	lsrs	r3, r3, #1
     7c0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     7c2:	e00a      	b.n	7da <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     7c4:	693a      	ldr	r2, [r7, #16]
     7c6:	68fb      	ldr	r3, [r7, #12]
     7c8:	1ad3      	subs	r3, r2, r3
     7ca:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     7cc:	2316      	movs	r3, #22
     7ce:	18fb      	adds	r3, r7, r3
     7d0:	881a      	ldrh	r2, [r3, #0]
     7d2:	2316      	movs	r3, #22
     7d4:	18fb      	adds	r3, r7, r3
     7d6:	3201      	adds	r2, #1
     7d8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     7da:	693a      	ldr	r2, [r7, #16]
     7dc:	68fb      	ldr	r3, [r7, #12]
     7de:	429a      	cmp	r2, r3
     7e0:	d2f0      	bcs.n	7c4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     7e2:	2316      	movs	r3, #22
     7e4:	18fb      	adds	r3, r7, r3
     7e6:	2216      	movs	r2, #22
     7e8:	18ba      	adds	r2, r7, r2
     7ea:	8812      	ldrh	r2, [r2, #0]
     7ec:	3a01      	subs	r2, #1
     7ee:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     7f0:	2316      	movs	r3, #22
     7f2:	18fb      	adds	r3, r7, r3
     7f4:	881b      	ldrh	r3, [r3, #0]
     7f6:	2bff      	cmp	r3, #255	; 0xff
     7f8:	d901      	bls.n	7fe <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7fa:	2340      	movs	r3, #64	; 0x40
     7fc:	e005      	b.n	80a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     7fe:	687b      	ldr	r3, [r7, #4]
     800:	2216      	movs	r2, #22
     802:	18ba      	adds	r2, r7, r2
     804:	8812      	ldrh	r2, [r2, #0]
     806:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     808:	2300      	movs	r3, #0
	}
}
     80a:	0018      	movs	r0, r3
     80c:	46bd      	mov	sp, r7
     80e:	b006      	add	sp, #24
     810:	bd80      	pop	{r7, pc}
	...

00000814 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     814:	b5f0      	push	{r4, r5, r6, r7, lr}
     816:	b0a1      	sub	sp, #132	; 0x84
     818:	af00      	add	r7, sp, #0
     81a:	64f8      	str	r0, [r7, #76]	; 0x4c
     81c:	64b9      	str	r1, [r7, #72]	; 0x48
     81e:	647a      	str	r2, [r7, #68]	; 0x44
     820:	2243      	movs	r2, #67	; 0x43
     822:	18ba      	adds	r2, r7, r2
     824:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     826:	2300      	movs	r3, #0
     828:	2400      	movs	r4, #0
     82a:	673b      	str	r3, [r7, #112]	; 0x70
     82c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     82e:	2300      	movs	r3, #0
     830:	2400      	movs	r4, #0
     832:	66bb      	str	r3, [r7, #104]	; 0x68
     834:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     836:	2300      	movs	r3, #0
     838:	2400      	movs	r4, #0
     83a:	67bb      	str	r3, [r7, #120]	; 0x78
     83c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     83e:	2300      	movs	r3, #0
     840:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     842:	2358      	movs	r3, #88	; 0x58
     844:	2240      	movs	r2, #64	; 0x40
     846:	4694      	mov	ip, r2
     848:	44bc      	add	ip, r7
     84a:	4463      	add	r3, ip
     84c:	781a      	ldrb	r2, [r3, #0]
     84e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     850:	435a      	muls	r2, r3
     852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     854:	429a      	cmp	r2, r3
     856:	d901      	bls.n	85c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     858:	2340      	movs	r3, #64	; 0x40
     85a:	e0b3      	b.n	9c4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     85c:	2343      	movs	r3, #67	; 0x43
     85e:	18fb      	adds	r3, r7, r3
     860:	781b      	ldrb	r3, [r3, #0]
     862:	2b00      	cmp	r3, #0
     864:	d13d      	bne.n	8e2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     866:	2358      	movs	r3, #88	; 0x58
     868:	2240      	movs	r2, #64	; 0x40
     86a:	4694      	mov	ip, r2
     86c:	44bc      	add	ip, r7
     86e:	4463      	add	r3, ip
     870:	781b      	ldrb	r3, [r3, #0]
     872:	b2db      	uxtb	r3, r3
     874:	613b      	str	r3, [r7, #16]
     876:	2300      	movs	r3, #0
     878:	617b      	str	r3, [r7, #20]
     87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     87c:	60bb      	str	r3, [r7, #8]
     87e:	2300      	movs	r3, #0
     880:	60fb      	str	r3, [r7, #12]
     882:	4c52      	ldr	r4, [pc, #328]	; (9cc <_sercom_get_async_baud_val+0x1b8>)
     884:	68ba      	ldr	r2, [r7, #8]
     886:	68fb      	ldr	r3, [r7, #12]
     888:	6938      	ldr	r0, [r7, #16]
     88a:	6979      	ldr	r1, [r7, #20]
     88c:	47a0      	blx	r4
     88e:	0003      	movs	r3, r0
     890:	000c      	movs	r4, r1
     892:	001b      	movs	r3, r3
     894:	65fb      	str	r3, [r7, #92]	; 0x5c
     896:	2300      	movs	r3, #0
     898:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     89a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     89c:	603b      	str	r3, [r7, #0]
     89e:	2300      	movs	r3, #0
     8a0:	607b      	str	r3, [r7, #4]
     8a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
     8a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     8a6:	683a      	ldr	r2, [r7, #0]
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	4c49      	ldr	r4, [pc, #292]	; (9d0 <_sercom_get_async_baud_val+0x1bc>)
     8ac:	47a0      	blx	r4
     8ae:	0003      	movs	r3, r0
     8b0:	000c      	movs	r4, r1
     8b2:	673b      	str	r3, [r7, #112]	; 0x70
     8b4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     8b6:	2100      	movs	r1, #0
     8b8:	2201      	movs	r2, #1
     8ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     8bc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     8be:	1ac9      	subs	r1, r1, r3
     8c0:	41a2      	sbcs	r2, r4
     8c2:	000b      	movs	r3, r1
     8c4:	0014      	movs	r4, r2
     8c6:	66bb      	str	r3, [r7, #104]	; 0x68
     8c8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     8ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     8cc:	0c1b      	lsrs	r3, r3, #16
     8ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     8d0:	0416      	lsls	r6, r2, #16
     8d2:	431e      	orrs	r6, r3
     8d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     8d6:	041d      	lsls	r5, r3, #16
     8d8:	0033      	movs	r3, r6
     8da:	67bb      	str	r3, [r7, #120]	; 0x78
     8dc:	2300      	movs	r3, #0
     8de:	67fb      	str	r3, [r7, #124]	; 0x7c
     8e0:	e06a      	b.n	9b8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     8e2:	2343      	movs	r3, #67	; 0x43
     8e4:	18fb      	adds	r3, r7, r3
     8e6:	781b      	ldrb	r3, [r3, #0]
     8e8:	2b01      	cmp	r3, #1
     8ea:	d165      	bne.n	9b8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     8ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     8ee:	633b      	str	r3, [r7, #48]	; 0x30
     8f0:	2300      	movs	r3, #0
     8f2:	637b      	str	r3, [r7, #52]	; 0x34
     8f4:	2358      	movs	r3, #88	; 0x58
     8f6:	2240      	movs	r2, #64	; 0x40
     8f8:	4694      	mov	ip, r2
     8fa:	44bc      	add	ip, r7
     8fc:	4463      	add	r3, ip
     8fe:	781b      	ldrb	r3, [r3, #0]
     900:	b2db      	uxtb	r3, r3
     902:	62bb      	str	r3, [r7, #40]	; 0x28
     904:	2300      	movs	r3, #0
     906:	62fb      	str	r3, [r7, #44]	; 0x2c
     908:	4c30      	ldr	r4, [pc, #192]	; (9cc <_sercom_get_async_baud_val+0x1b8>)
     90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     90e:	6b38      	ldr	r0, [r7, #48]	; 0x30
     910:	6b79      	ldr	r1, [r7, #52]	; 0x34
     912:	47a0      	blx	r4
     914:	0003      	movs	r3, r0
     916:	000c      	movs	r4, r1
     918:	65bb      	str	r3, [r7, #88]	; 0x58
     91a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     91c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     91e:	623b      	str	r3, [r7, #32]
     920:	2300      	movs	r3, #0
     922:	627b      	str	r3, [r7, #36]	; 0x24
     924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     926:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     928:	001a      	movs	r2, r3
     92a:	0023      	movs	r3, r4
     92c:	6a38      	ldr	r0, [r7, #32]
     92e:	6a79      	ldr	r1, [r7, #36]	; 0x24
     930:	4c27      	ldr	r4, [pc, #156]	; (9d0 <_sercom_get_async_baud_val+0x1bc>)
     932:	47a0      	blx	r4
     934:	0003      	movs	r3, r0
     936:	000c      	movs	r4, r1
     938:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     93a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     93c:	2380      	movs	r3, #128	; 0x80
     93e:	019b      	lsls	r3, r3, #6
     940:	429a      	cmp	r2, r3
     942:	d901      	bls.n	948 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     944:	2340      	movs	r3, #64	; 0x40
     946:	e03d      	b.n	9c4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     94a:	61bb      	str	r3, [r7, #24]
     94c:	2300      	movs	r3, #0
     94e:	61fb      	str	r3, [r7, #28]
     950:	69b9      	ldr	r1, [r7, #24]
     952:	69fa      	ldr	r2, [r7, #28]
     954:	000b      	movs	r3, r1
     956:	0f5b      	lsrs	r3, r3, #29
     958:	0010      	movs	r0, r2
     95a:	00c0      	lsls	r0, r0, #3
     95c:	63f8      	str	r0, [r7, #60]	; 0x3c
     95e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     960:	4318      	orrs	r0, r3
     962:	63f8      	str	r0, [r7, #60]	; 0x3c
     964:	000b      	movs	r3, r1
     966:	00db      	lsls	r3, r3, #3
     968:	63bb      	str	r3, [r7, #56]	; 0x38
     96a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     96c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     96e:	001a      	movs	r2, r3
     970:	0023      	movs	r3, r4
     972:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     976:	4c16      	ldr	r4, [pc, #88]	; (9d0 <_sercom_get_async_baud_val+0x1bc>)
     978:	47a0      	blx	r4
     97a:	0003      	movs	r3, r0
     97c:	000c      	movs	r4, r1
     97e:	65bb      	str	r3, [r7, #88]	; 0x58
     980:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     984:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     986:	b2d9      	uxtb	r1, r3
     988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     98a:	b2db      	uxtb	r3, r3
     98c:	00db      	lsls	r3, r3, #3
     98e:	b2da      	uxtb	r2, r3
     990:	2317      	movs	r3, #23
     992:	2040      	movs	r0, #64	; 0x40
     994:	4684      	mov	ip, r0
     996:	44bc      	add	ip, r7
     998:	4463      	add	r3, ip
     99a:	1a8a      	subs	r2, r1, r2
     99c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     99e:	2317      	movs	r3, #23
     9a0:	2240      	movs	r2, #64	; 0x40
     9a2:	4694      	mov	ip, r2
     9a4:	44bc      	add	ip, r7
     9a6:	4463      	add	r3, ip
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	035b      	lsls	r3, r3, #13
     9ac:	001a      	movs	r2, r3
     9ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     9b0:	4313      	orrs	r3, r2
     9b2:	67bb      	str	r3, [r7, #120]	; 0x78
     9b4:	2300      	movs	r3, #0
     9b6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     9b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     9ba:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     9bc:	b29a      	uxth	r2, r3
     9be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     9c0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     9c2:	2300      	movs	r3, #0
}
     9c4:	0018      	movs	r0, r3
     9c6:	46bd      	mov	sp, r7
     9c8:	b021      	add	sp, #132	; 0x84
     9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9cc:	00002b19 	.word	0x00002b19
     9d0:	000006b7 	.word	0x000006b7

000009d4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     9d4:	b580      	push	{r7, lr}
     9d6:	b084      	sub	sp, #16
     9d8:	af00      	add	r7, sp, #0
     9da:	0002      	movs	r2, r0
     9dc:	1dfb      	adds	r3, r7, #7
     9de:	701a      	strb	r2, [r3, #0]
     9e0:	1dbb      	adds	r3, r7, #6
     9e2:	1c0a      	adds	r2, r1, #0
     9e4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     9e6:	4b1a      	ldr	r3, [pc, #104]	; (a50 <sercom_set_gclk_generator+0x7c>)
     9e8:	781b      	ldrb	r3, [r3, #0]
     9ea:	2201      	movs	r2, #1
     9ec:	4053      	eors	r3, r2
     9ee:	b2db      	uxtb	r3, r3
     9f0:	2b00      	cmp	r3, #0
     9f2:	d103      	bne.n	9fc <sercom_set_gclk_generator+0x28>
     9f4:	1dbb      	adds	r3, r7, #6
     9f6:	781b      	ldrb	r3, [r3, #0]
     9f8:	2b00      	cmp	r3, #0
     9fa:	d01b      	beq.n	a34 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     9fc:	230c      	movs	r3, #12
     9fe:	18fb      	adds	r3, r7, r3
     a00:	0018      	movs	r0, r3
     a02:	4b14      	ldr	r3, [pc, #80]	; (a54 <sercom_set_gclk_generator+0x80>)
     a04:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     a06:	230c      	movs	r3, #12
     a08:	18fb      	adds	r3, r7, r3
     a0a:	1dfa      	adds	r2, r7, #7
     a0c:	7812      	ldrb	r2, [r2, #0]
     a0e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a10:	230c      	movs	r3, #12
     a12:	18fb      	adds	r3, r7, r3
     a14:	0019      	movs	r1, r3
     a16:	2013      	movs	r0, #19
     a18:	4b0f      	ldr	r3, [pc, #60]	; (a58 <sercom_set_gclk_generator+0x84>)
     a1a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     a1c:	2013      	movs	r0, #19
     a1e:	4b0f      	ldr	r3, [pc, #60]	; (a5c <sercom_set_gclk_generator+0x88>)
     a20:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     a22:	4b0b      	ldr	r3, [pc, #44]	; (a50 <sercom_set_gclk_generator+0x7c>)
     a24:	1dfa      	adds	r2, r7, #7
     a26:	7812      	ldrb	r2, [r2, #0]
     a28:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     a2a:	4b09      	ldr	r3, [pc, #36]	; (a50 <sercom_set_gclk_generator+0x7c>)
     a2c:	2201      	movs	r2, #1
     a2e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     a30:	2300      	movs	r3, #0
     a32:	e008      	b.n	a46 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     a34:	4b06      	ldr	r3, [pc, #24]	; (a50 <sercom_set_gclk_generator+0x7c>)
     a36:	785b      	ldrb	r3, [r3, #1]
     a38:	1dfa      	adds	r2, r7, #7
     a3a:	7812      	ldrb	r2, [r2, #0]
     a3c:	429a      	cmp	r2, r3
     a3e:	d101      	bne.n	a44 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     a40:	2300      	movs	r3, #0
     a42:	e000      	b.n	a46 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     a44:	231d      	movs	r3, #29
}
     a46:	0018      	movs	r0, r3
     a48:	46bd      	mov	sp, r7
     a4a:	b004      	add	sp, #16
     a4c:	bd80      	pop	{r7, pc}
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	200000f4 	.word	0x200000f4
     a54:	000006a1 	.word	0x000006a1
     a58:	00002265 	.word	0x00002265
     a5c:	000022a9 	.word	0x000022a9

00000a60 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     a60:	b580      	push	{r7, lr}
     a62:	b082      	sub	sp, #8
     a64:	af00      	add	r7, sp, #0
     a66:	6078      	str	r0, [r7, #4]
     a68:	000a      	movs	r2, r1
     a6a:	1cfb      	adds	r3, r7, #3
     a6c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	4a4d      	ldr	r2, [pc, #308]	; (ba8 <_sercom_get_default_pad+0x148>)
     a72:	4293      	cmp	r3, r2
     a74:	d03f      	beq.n	af6 <_sercom_get_default_pad+0x96>
     a76:	4a4c      	ldr	r2, [pc, #304]	; (ba8 <_sercom_get_default_pad+0x148>)
     a78:	4293      	cmp	r3, r2
     a7a:	d806      	bhi.n	a8a <_sercom_get_default_pad+0x2a>
     a7c:	4a4b      	ldr	r2, [pc, #300]	; (bac <_sercom_get_default_pad+0x14c>)
     a7e:	4293      	cmp	r3, r2
     a80:	d00f      	beq.n	aa2 <_sercom_get_default_pad+0x42>
     a82:	4a4b      	ldr	r2, [pc, #300]	; (bb0 <_sercom_get_default_pad+0x150>)
     a84:	4293      	cmp	r3, r2
     a86:	d021      	beq.n	acc <_sercom_get_default_pad+0x6c>
     a88:	e089      	b.n	b9e <_sercom_get_default_pad+0x13e>
     a8a:	4a4a      	ldr	r2, [pc, #296]	; (bb4 <_sercom_get_default_pad+0x154>)
     a8c:	4293      	cmp	r3, r2
     a8e:	d100      	bne.n	a92 <_sercom_get_default_pad+0x32>
     a90:	e05b      	b.n	b4a <_sercom_get_default_pad+0xea>
     a92:	4a49      	ldr	r2, [pc, #292]	; (bb8 <_sercom_get_default_pad+0x158>)
     a94:	4293      	cmp	r3, r2
     a96:	d100      	bne.n	a9a <_sercom_get_default_pad+0x3a>
     a98:	e06c      	b.n	b74 <_sercom_get_default_pad+0x114>
     a9a:	4a48      	ldr	r2, [pc, #288]	; (bbc <_sercom_get_default_pad+0x15c>)
     a9c:	4293      	cmp	r3, r2
     a9e:	d03f      	beq.n	b20 <_sercom_get_default_pad+0xc0>
     aa0:	e07d      	b.n	b9e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aa2:	1cfb      	adds	r3, r7, #3
     aa4:	781b      	ldrb	r3, [r3, #0]
     aa6:	2b01      	cmp	r3, #1
     aa8:	d00a      	beq.n	ac0 <_sercom_get_default_pad+0x60>
     aaa:	dc02      	bgt.n	ab2 <_sercom_get_default_pad+0x52>
     aac:	2b00      	cmp	r3, #0
     aae:	d005      	beq.n	abc <_sercom_get_default_pad+0x5c>
     ab0:	e075      	b.n	b9e <_sercom_get_default_pad+0x13e>
     ab2:	2b02      	cmp	r3, #2
     ab4:	d006      	beq.n	ac4 <_sercom_get_default_pad+0x64>
     ab6:	2b03      	cmp	r3, #3
     ab8:	d006      	beq.n	ac8 <_sercom_get_default_pad+0x68>
     aba:	e070      	b.n	b9e <_sercom_get_default_pad+0x13e>
     abc:	4b40      	ldr	r3, [pc, #256]	; (bc0 <_sercom_get_default_pad+0x160>)
     abe:	e06f      	b.n	ba0 <_sercom_get_default_pad+0x140>
     ac0:	4b40      	ldr	r3, [pc, #256]	; (bc4 <_sercom_get_default_pad+0x164>)
     ac2:	e06d      	b.n	ba0 <_sercom_get_default_pad+0x140>
     ac4:	4b40      	ldr	r3, [pc, #256]	; (bc8 <_sercom_get_default_pad+0x168>)
     ac6:	e06b      	b.n	ba0 <_sercom_get_default_pad+0x140>
     ac8:	4b40      	ldr	r3, [pc, #256]	; (bcc <_sercom_get_default_pad+0x16c>)
     aca:	e069      	b.n	ba0 <_sercom_get_default_pad+0x140>
     acc:	1cfb      	adds	r3, r7, #3
     ace:	781b      	ldrb	r3, [r3, #0]
     ad0:	2b01      	cmp	r3, #1
     ad2:	d00a      	beq.n	aea <_sercom_get_default_pad+0x8a>
     ad4:	dc02      	bgt.n	adc <_sercom_get_default_pad+0x7c>
     ad6:	2b00      	cmp	r3, #0
     ad8:	d005      	beq.n	ae6 <_sercom_get_default_pad+0x86>
     ada:	e060      	b.n	b9e <_sercom_get_default_pad+0x13e>
     adc:	2b02      	cmp	r3, #2
     ade:	d006      	beq.n	aee <_sercom_get_default_pad+0x8e>
     ae0:	2b03      	cmp	r3, #3
     ae2:	d006      	beq.n	af2 <_sercom_get_default_pad+0x92>
     ae4:	e05b      	b.n	b9e <_sercom_get_default_pad+0x13e>
     ae6:	2303      	movs	r3, #3
     ae8:	e05a      	b.n	ba0 <_sercom_get_default_pad+0x140>
     aea:	4b39      	ldr	r3, [pc, #228]	; (bd0 <_sercom_get_default_pad+0x170>)
     aec:	e058      	b.n	ba0 <_sercom_get_default_pad+0x140>
     aee:	4b39      	ldr	r3, [pc, #228]	; (bd4 <_sercom_get_default_pad+0x174>)
     af0:	e056      	b.n	ba0 <_sercom_get_default_pad+0x140>
     af2:	4b39      	ldr	r3, [pc, #228]	; (bd8 <_sercom_get_default_pad+0x178>)
     af4:	e054      	b.n	ba0 <_sercom_get_default_pad+0x140>
     af6:	1cfb      	adds	r3, r7, #3
     af8:	781b      	ldrb	r3, [r3, #0]
     afa:	2b01      	cmp	r3, #1
     afc:	d00a      	beq.n	b14 <_sercom_get_default_pad+0xb4>
     afe:	dc02      	bgt.n	b06 <_sercom_get_default_pad+0xa6>
     b00:	2b00      	cmp	r3, #0
     b02:	d005      	beq.n	b10 <_sercom_get_default_pad+0xb0>
     b04:	e04b      	b.n	b9e <_sercom_get_default_pad+0x13e>
     b06:	2b02      	cmp	r3, #2
     b08:	d006      	beq.n	b18 <_sercom_get_default_pad+0xb8>
     b0a:	2b03      	cmp	r3, #3
     b0c:	d006      	beq.n	b1c <_sercom_get_default_pad+0xbc>
     b0e:	e046      	b.n	b9e <_sercom_get_default_pad+0x13e>
     b10:	4b32      	ldr	r3, [pc, #200]	; (bdc <_sercom_get_default_pad+0x17c>)
     b12:	e045      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b14:	4b32      	ldr	r3, [pc, #200]	; (be0 <_sercom_get_default_pad+0x180>)
     b16:	e043      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b18:	4b32      	ldr	r3, [pc, #200]	; (be4 <_sercom_get_default_pad+0x184>)
     b1a:	e041      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b1c:	4b32      	ldr	r3, [pc, #200]	; (be8 <_sercom_get_default_pad+0x188>)
     b1e:	e03f      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b20:	1cfb      	adds	r3, r7, #3
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	2b01      	cmp	r3, #1
     b26:	d00a      	beq.n	b3e <_sercom_get_default_pad+0xde>
     b28:	dc02      	bgt.n	b30 <_sercom_get_default_pad+0xd0>
     b2a:	2b00      	cmp	r3, #0
     b2c:	d005      	beq.n	b3a <_sercom_get_default_pad+0xda>
     b2e:	e036      	b.n	b9e <_sercom_get_default_pad+0x13e>
     b30:	2b02      	cmp	r3, #2
     b32:	d006      	beq.n	b42 <_sercom_get_default_pad+0xe2>
     b34:	2b03      	cmp	r3, #3
     b36:	d006      	beq.n	b46 <_sercom_get_default_pad+0xe6>
     b38:	e031      	b.n	b9e <_sercom_get_default_pad+0x13e>
     b3a:	4b2c      	ldr	r3, [pc, #176]	; (bec <_sercom_get_default_pad+0x18c>)
     b3c:	e030      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b3e:	4b2c      	ldr	r3, [pc, #176]	; (bf0 <_sercom_get_default_pad+0x190>)
     b40:	e02e      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b42:	4b2c      	ldr	r3, [pc, #176]	; (bf4 <_sercom_get_default_pad+0x194>)
     b44:	e02c      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b46:	4b2c      	ldr	r3, [pc, #176]	; (bf8 <_sercom_get_default_pad+0x198>)
     b48:	e02a      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b4a:	1cfb      	adds	r3, r7, #3
     b4c:	781b      	ldrb	r3, [r3, #0]
     b4e:	2b01      	cmp	r3, #1
     b50:	d00a      	beq.n	b68 <_sercom_get_default_pad+0x108>
     b52:	dc02      	bgt.n	b5a <_sercom_get_default_pad+0xfa>
     b54:	2b00      	cmp	r3, #0
     b56:	d005      	beq.n	b64 <_sercom_get_default_pad+0x104>
     b58:	e021      	b.n	b9e <_sercom_get_default_pad+0x13e>
     b5a:	2b02      	cmp	r3, #2
     b5c:	d006      	beq.n	b6c <_sercom_get_default_pad+0x10c>
     b5e:	2b03      	cmp	r3, #3
     b60:	d006      	beq.n	b70 <_sercom_get_default_pad+0x110>
     b62:	e01c      	b.n	b9e <_sercom_get_default_pad+0x13e>
     b64:	4b25      	ldr	r3, [pc, #148]	; (bfc <_sercom_get_default_pad+0x19c>)
     b66:	e01b      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b68:	4b25      	ldr	r3, [pc, #148]	; (c00 <_sercom_get_default_pad+0x1a0>)
     b6a:	e019      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b6c:	4b25      	ldr	r3, [pc, #148]	; (c04 <_sercom_get_default_pad+0x1a4>)
     b6e:	e017      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b70:	4b25      	ldr	r3, [pc, #148]	; (c08 <_sercom_get_default_pad+0x1a8>)
     b72:	e015      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b74:	1cfb      	adds	r3, r7, #3
     b76:	781b      	ldrb	r3, [r3, #0]
     b78:	2b01      	cmp	r3, #1
     b7a:	d00a      	beq.n	b92 <_sercom_get_default_pad+0x132>
     b7c:	dc02      	bgt.n	b84 <_sercom_get_default_pad+0x124>
     b7e:	2b00      	cmp	r3, #0
     b80:	d005      	beq.n	b8e <_sercom_get_default_pad+0x12e>
     b82:	e00c      	b.n	b9e <_sercom_get_default_pad+0x13e>
     b84:	2b02      	cmp	r3, #2
     b86:	d006      	beq.n	b96 <_sercom_get_default_pad+0x136>
     b88:	2b03      	cmp	r3, #3
     b8a:	d006      	beq.n	b9a <_sercom_get_default_pad+0x13a>
     b8c:	e007      	b.n	b9e <_sercom_get_default_pad+0x13e>
     b8e:	4b1f      	ldr	r3, [pc, #124]	; (c0c <_sercom_get_default_pad+0x1ac>)
     b90:	e006      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b92:	4b1f      	ldr	r3, [pc, #124]	; (c10 <_sercom_get_default_pad+0x1b0>)
     b94:	e004      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b96:	4b1f      	ldr	r3, [pc, #124]	; (c14 <_sercom_get_default_pad+0x1b4>)
     b98:	e002      	b.n	ba0 <_sercom_get_default_pad+0x140>
     b9a:	4b1f      	ldr	r3, [pc, #124]	; (c18 <_sercom_get_default_pad+0x1b8>)
     b9c:	e000      	b.n	ba0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     b9e:	2300      	movs	r3, #0
}
     ba0:	0018      	movs	r0, r3
     ba2:	46bd      	mov	sp, r7
     ba4:	b002      	add	sp, #8
     ba6:	bd80      	pop	{r7, pc}
     ba8:	42001000 	.word	0x42001000
     bac:	42000800 	.word	0x42000800
     bb0:	42000c00 	.word	0x42000c00
     bb4:	42001800 	.word	0x42001800
     bb8:	42001c00 	.word	0x42001c00
     bbc:	42001400 	.word	0x42001400
     bc0:	00040003 	.word	0x00040003
     bc4:	00050003 	.word	0x00050003
     bc8:	00060003 	.word	0x00060003
     bcc:	00070003 	.word	0x00070003
     bd0:	00010003 	.word	0x00010003
     bd4:	001e0003 	.word	0x001e0003
     bd8:	001f0003 	.word	0x001f0003
     bdc:	00080003 	.word	0x00080003
     be0:	00090003 	.word	0x00090003
     be4:	000a0003 	.word	0x000a0003
     be8:	000b0003 	.word	0x000b0003
     bec:	00100003 	.word	0x00100003
     bf0:	00110003 	.word	0x00110003
     bf4:	00120003 	.word	0x00120003
     bf8:	00130003 	.word	0x00130003
     bfc:	000c0003 	.word	0x000c0003
     c00:	000d0003 	.word	0x000d0003
     c04:	000e0003 	.word	0x000e0003
     c08:	000f0003 	.word	0x000f0003
     c0c:	00160003 	.word	0x00160003
     c10:	00170003 	.word	0x00170003
     c14:	00180003 	.word	0x00180003
     c18:	00190003 	.word	0x00190003

00000c1c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c1c:	b590      	push	{r4, r7, lr}
     c1e:	b08b      	sub	sp, #44	; 0x2c
     c20:	af00      	add	r7, sp, #0
     c22:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c24:	230c      	movs	r3, #12
     c26:	18fb      	adds	r3, r7, r3
     c28:	4a0f      	ldr	r2, [pc, #60]	; (c68 <_sercom_get_sercom_inst_index+0x4c>)
     c2a:	ca13      	ldmia	r2!, {r0, r1, r4}
     c2c:	c313      	stmia	r3!, {r0, r1, r4}
     c2e:	ca13      	ldmia	r2!, {r0, r1, r4}
     c30:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c32:	2300      	movs	r3, #0
     c34:	627b      	str	r3, [r7, #36]	; 0x24
     c36:	e00e      	b.n	c56 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c38:	230c      	movs	r3, #12
     c3a:	18fb      	adds	r3, r7, r3
     c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     c3e:	0092      	lsls	r2, r2, #2
     c40:	58d3      	ldr	r3, [r2, r3]
     c42:	001a      	movs	r2, r3
     c44:	687b      	ldr	r3, [r7, #4]
     c46:	429a      	cmp	r2, r3
     c48:	d102      	bne.n	c50 <_sercom_get_sercom_inst_index+0x34>
			return i;
     c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c4c:	b2db      	uxtb	r3, r3
     c4e:	e006      	b.n	c5e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c52:	3301      	adds	r3, #1
     c54:	627b      	str	r3, [r7, #36]	; 0x24
     c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c58:	2b05      	cmp	r3, #5
     c5a:	d9ed      	bls.n	c38 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     c5c:	2300      	movs	r3, #0
}
     c5e:	0018      	movs	r0, r3
     c60:	46bd      	mov	sp, r7
     c62:	b00b      	add	sp, #44	; 0x2c
     c64:	bd90      	pop	{r4, r7, pc}
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	00002bc4 	.word	0x00002bc4

00000c6c <system_gclk_chan_get_config_defaults>:
{
     c6c:	b580      	push	{r7, lr}
     c6e:	b082      	sub	sp, #8
     c70:	af00      	add	r7, sp, #0
     c72:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     c74:	687b      	ldr	r3, [r7, #4]
     c76:	2200      	movs	r2, #0
     c78:	701a      	strb	r2, [r3, #0]
}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	46bd      	mov	sp, r7
     c7e:	b002      	add	sp, #8
     c80:	bd80      	pop	{r7, pc}
	...

00000c84 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     c84:	b580      	push	{r7, lr}
     c86:	b082      	sub	sp, #8
     c88:	af00      	add	r7, sp, #0
     c8a:	0002      	movs	r2, r0
     c8c:	6039      	str	r1, [r7, #0]
     c8e:	1dfb      	adds	r3, r7, #7
     c90:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     c92:	1dfb      	adds	r3, r7, #7
     c94:	781b      	ldrb	r3, [r3, #0]
     c96:	2b01      	cmp	r3, #1
     c98:	d00a      	beq.n	cb0 <system_apb_clock_set_mask+0x2c>
     c9a:	2b02      	cmp	r3, #2
     c9c:	d00f      	beq.n	cbe <system_apb_clock_set_mask+0x3a>
     c9e:	2b00      	cmp	r3, #0
     ca0:	d114      	bne.n	ccc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     ca2:	4b0e      	ldr	r3, [pc, #56]	; (cdc <system_apb_clock_set_mask+0x58>)
     ca4:	4a0d      	ldr	r2, [pc, #52]	; (cdc <system_apb_clock_set_mask+0x58>)
     ca6:	6991      	ldr	r1, [r2, #24]
     ca8:	683a      	ldr	r2, [r7, #0]
     caa:	430a      	orrs	r2, r1
     cac:	619a      	str	r2, [r3, #24]
			break;
     cae:	e00f      	b.n	cd0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     cb0:	4b0a      	ldr	r3, [pc, #40]	; (cdc <system_apb_clock_set_mask+0x58>)
     cb2:	4a0a      	ldr	r2, [pc, #40]	; (cdc <system_apb_clock_set_mask+0x58>)
     cb4:	69d1      	ldr	r1, [r2, #28]
     cb6:	683a      	ldr	r2, [r7, #0]
     cb8:	430a      	orrs	r2, r1
     cba:	61da      	str	r2, [r3, #28]
			break;
     cbc:	e008      	b.n	cd0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     cbe:	4b07      	ldr	r3, [pc, #28]	; (cdc <system_apb_clock_set_mask+0x58>)
     cc0:	4a06      	ldr	r2, [pc, #24]	; (cdc <system_apb_clock_set_mask+0x58>)
     cc2:	6a11      	ldr	r1, [r2, #32]
     cc4:	683a      	ldr	r2, [r7, #0]
     cc6:	430a      	orrs	r2, r1
     cc8:	621a      	str	r2, [r3, #32]
			break;
     cca:	e001      	b.n	cd0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     ccc:	2317      	movs	r3, #23
     cce:	e000      	b.n	cd2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     cd0:	2300      	movs	r3, #0
}
     cd2:	0018      	movs	r0, r3
     cd4:	46bd      	mov	sp, r7
     cd6:	b002      	add	sp, #8
     cd8:	bd80      	pop	{r7, pc}
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	40000400 	.word	0x40000400

00000ce0 <system_pinmux_get_config_defaults>:
{
     ce0:	b580      	push	{r7, lr}
     ce2:	b082      	sub	sp, #8
     ce4:	af00      	add	r7, sp, #0
     ce6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	2280      	movs	r2, #128	; 0x80
     cec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	2200      	movs	r2, #0
     cf2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	2201      	movs	r2, #1
     cf8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	2200      	movs	r2, #0
     cfe:	70da      	strb	r2, [r3, #3]
}
     d00:	46c0      	nop			; (mov r8, r8)
     d02:	46bd      	mov	sp, r7
     d04:	b002      	add	sp, #8
     d06:	bd80      	pop	{r7, pc}

00000d08 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     d08:	b580      	push	{r7, lr}
     d0a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     d0c:	4b05      	ldr	r3, [pc, #20]	; (d24 <system_is_debugger_present+0x1c>)
     d0e:	789b      	ldrb	r3, [r3, #2]
     d10:	b2db      	uxtb	r3, r3
     d12:	001a      	movs	r2, r3
     d14:	2302      	movs	r3, #2
     d16:	4013      	ands	r3, r2
     d18:	1e5a      	subs	r2, r3, #1
     d1a:	4193      	sbcs	r3, r2
     d1c:	b2db      	uxtb	r3, r3
}
     d1e:	0018      	movs	r0, r3
     d20:	46bd      	mov	sp, r7
     d22:	bd80      	pop	{r7, pc}
     d24:	41002000 	.word	0x41002000

00000d28 <usart_is_syncing>:
{
     d28:	b580      	push	{r7, lr}
     d2a:	b084      	sub	sp, #16
     d2c:	af00      	add	r7, sp, #0
     d2e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
     d36:	68fb      	ldr	r3, [r7, #12]
     d38:	69db      	ldr	r3, [r3, #28]
     d3a:	1e5a      	subs	r2, r3, #1
     d3c:	4193      	sbcs	r3, r2
     d3e:	b2db      	uxtb	r3, r3
}
     d40:	0018      	movs	r0, r3
     d42:	46bd      	mov	sp, r7
     d44:	b004      	add	sp, #16
     d46:	bd80      	pop	{r7, pc}

00000d48 <_usart_wait_for_sync>:
{
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
     d50:	46c0      	nop			; (mov r8, r8)
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	0018      	movs	r0, r3
     d56:	4b04      	ldr	r3, [pc, #16]	; (d68 <_usart_wait_for_sync+0x20>)
     d58:	4798      	blx	r3
     d5a:	1e03      	subs	r3, r0, #0
     d5c:	d1f9      	bne.n	d52 <_usart_wait_for_sync+0xa>
}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	46bd      	mov	sp, r7
     d62:	b002      	add	sp, #8
     d64:	bd80      	pop	{r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	00000d29 	.word	0x00000d29

00000d6c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     d6c:	b5b0      	push	{r4, r5, r7, lr}
     d6e:	b08c      	sub	sp, #48	; 0x30
     d70:	af02      	add	r7, sp, #8
     d72:	6078      	str	r0, [r7, #4]
     d74:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	681b      	ldr	r3, [r3, #0]
     d7a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	681b      	ldr	r3, [r3, #0]
     d80:	0018      	movs	r0, r3
     d82:	4bab      	ldr	r3, [pc, #684]	; (1030 <_usart_set_config+0x2c4>)
     d84:	4798      	blx	r3
     d86:	0003      	movs	r3, r0
     d88:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d8a:	697b      	ldr	r3, [r7, #20]
     d8c:	3314      	adds	r3, #20
     d8e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     d90:	2300      	movs	r3, #0
     d92:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
     d94:	2300      	movs	r3, #0
     d96:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     d98:	230a      	movs	r3, #10
     d9a:	18fb      	adds	r3, r7, r3
     d9c:	2200      	movs	r2, #0
     d9e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     da0:	231f      	movs	r3, #31
     da2:	18fb      	adds	r3, r7, r3
     da4:	2200      	movs	r2, #0
     da6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     da8:	231e      	movs	r3, #30
     daa:	18fb      	adds	r3, r7, r3
     dac:	2210      	movs	r2, #16
     dae:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     db0:	683b      	ldr	r3, [r7, #0]
     db2:	8a1b      	ldrh	r3, [r3, #16]
     db4:	2280      	movs	r2, #128	; 0x80
     db6:	01d2      	lsls	r2, r2, #7
     db8:	4293      	cmp	r3, r2
     dba:	d01c      	beq.n	df6 <_usart_set_config+0x8a>
     dbc:	2280      	movs	r2, #128	; 0x80
     dbe:	01d2      	lsls	r2, r2, #7
     dc0:	4293      	cmp	r3, r2
     dc2:	dc06      	bgt.n	dd2 <_usart_set_config+0x66>
     dc4:	2b00      	cmp	r3, #0
     dc6:	d00d      	beq.n	de4 <_usart_set_config+0x78>
     dc8:	2280      	movs	r2, #128	; 0x80
     dca:	0192      	lsls	r2, r2, #6
     dcc:	4293      	cmp	r3, r2
     dce:	d024      	beq.n	e1a <_usart_set_config+0xae>
     dd0:	e035      	b.n	e3e <_usart_set_config+0xd2>
     dd2:	22c0      	movs	r2, #192	; 0xc0
     dd4:	01d2      	lsls	r2, r2, #7
     dd6:	4293      	cmp	r3, r2
     dd8:	d028      	beq.n	e2c <_usart_set_config+0xc0>
     dda:	2280      	movs	r2, #128	; 0x80
     ddc:	0212      	lsls	r2, r2, #8
     dde:	4293      	cmp	r3, r2
     de0:	d012      	beq.n	e08 <_usart_set_config+0x9c>
     de2:	e02c      	b.n	e3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     de4:	231f      	movs	r3, #31
     de6:	18fb      	adds	r3, r7, r3
     de8:	2200      	movs	r2, #0
     dea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     dec:	231e      	movs	r3, #30
     dee:	18fb      	adds	r3, r7, r3
     df0:	2210      	movs	r2, #16
     df2:	701a      	strb	r2, [r3, #0]
			break;
     df4:	e023      	b.n	e3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     df6:	231f      	movs	r3, #31
     df8:	18fb      	adds	r3, r7, r3
     dfa:	2200      	movs	r2, #0
     dfc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     dfe:	231e      	movs	r3, #30
     e00:	18fb      	adds	r3, r7, r3
     e02:	2208      	movs	r2, #8
     e04:	701a      	strb	r2, [r3, #0]
			break;
     e06:	e01a      	b.n	e3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e08:	231f      	movs	r3, #31
     e0a:	18fb      	adds	r3, r7, r3
     e0c:	2200      	movs	r2, #0
     e0e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e10:	231e      	movs	r3, #30
     e12:	18fb      	adds	r3, r7, r3
     e14:	2203      	movs	r2, #3
     e16:	701a      	strb	r2, [r3, #0]
			break;
     e18:	e011      	b.n	e3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e1a:	231f      	movs	r3, #31
     e1c:	18fb      	adds	r3, r7, r3
     e1e:	2201      	movs	r2, #1
     e20:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e22:	231e      	movs	r3, #30
     e24:	18fb      	adds	r3, r7, r3
     e26:	2210      	movs	r2, #16
     e28:	701a      	strb	r2, [r3, #0]
			break;
     e2a:	e008      	b.n	e3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e2c:	231f      	movs	r3, #31
     e2e:	18fb      	adds	r3, r7, r3
     e30:	2201      	movs	r2, #1
     e32:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e34:	231e      	movs	r3, #30
     e36:	18fb      	adds	r3, r7, r3
     e38:	2208      	movs	r2, #8
     e3a:	701a      	strb	r2, [r3, #0]
			break;
     e3c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e3e:	683b      	ldr	r3, [r7, #0]
     e40:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
     e42:	683b      	ldr	r3, [r7, #0]
     e44:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
     e46:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e48:	683b      	ldr	r3, [r7, #0]
     e4a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
     e4c:	4313      	orrs	r3, r2
		config->sample_rate |
     e4e:	683a      	ldr	r2, [r7, #0]
     e50:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
     e52:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e54:	683a      	ldr	r2, [r7, #0]
     e56:	7e12      	ldrb	r2, [r2, #24]
     e58:	0212      	lsls	r2, r2, #8
		config->sample_rate |
     e5a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e5c:	683a      	ldr	r2, [r7, #0]
     e5e:	2126      	movs	r1, #38	; 0x26
     e60:	5c52      	ldrb	r2, [r2, r1]
     e62:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
     e64:	4313      	orrs	r3, r2
     e66:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
     e68:	231d      	movs	r3, #29
     e6a:	18fb      	adds	r3, r7, r3
     e6c:	2200      	movs	r2, #0
     e6e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
     e70:	683b      	ldr	r3, [r7, #0]
     e72:	685b      	ldr	r3, [r3, #4]
     e74:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     e76:	68fb      	ldr	r3, [r7, #12]
     e78:	2b00      	cmp	r3, #0
     e7a:	d01e      	beq.n	eba <_usart_set_config+0x14e>
     e7c:	2280      	movs	r2, #128	; 0x80
     e7e:	0552      	lsls	r2, r2, #21
     e80:	4293      	cmp	r3, r2
     e82:	d14f      	bne.n	f24 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     e84:	683b      	ldr	r3, [r7, #0]
     e86:	2227      	movs	r2, #39	; 0x27
     e88:	5c9b      	ldrb	r3, [r3, r2]
     e8a:	2201      	movs	r2, #1
     e8c:	4053      	eors	r3, r2
     e8e:	b2db      	uxtb	r3, r3
     e90:	2b00      	cmp	r3, #0
     e92:	d046      	beq.n	f22 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     e94:	683b      	ldr	r3, [r7, #0]
     e96:	6a1d      	ldr	r5, [r3, #32]
     e98:	693b      	ldr	r3, [r7, #16]
     e9a:	b2db      	uxtb	r3, r3
     e9c:	0018      	movs	r0, r3
     e9e:	4b65      	ldr	r3, [pc, #404]	; (1034 <_usart_set_config+0x2c8>)
     ea0:	4798      	blx	r3
     ea2:	0001      	movs	r1, r0
     ea4:	231d      	movs	r3, #29
     ea6:	18fc      	adds	r4, r7, r3
     ea8:	230a      	movs	r3, #10
     eaa:	18fb      	adds	r3, r7, r3
     eac:	001a      	movs	r2, r3
     eae:	0028      	movs	r0, r5
     eb0:	4b61      	ldr	r3, [pc, #388]	; (1038 <_usart_set_config+0x2cc>)
     eb2:	4798      	blx	r3
     eb4:	0003      	movs	r3, r0
     eb6:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     eb8:	e033      	b.n	f22 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     eba:	683b      	ldr	r3, [r7, #0]
     ebc:	2227      	movs	r2, #39	; 0x27
     ebe:	5c9b      	ldrb	r3, [r3, r2]
     ec0:	2b00      	cmp	r3, #0
     ec2:	d014      	beq.n	eee <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     ec4:	683b      	ldr	r3, [r7, #0]
     ec6:	6a18      	ldr	r0, [r3, #32]
     ec8:	683b      	ldr	r3, [r7, #0]
     eca:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
     ecc:	231d      	movs	r3, #29
     ece:	18fc      	adds	r4, r7, r3
     ed0:	231f      	movs	r3, #31
     ed2:	18fb      	adds	r3, r7, r3
     ed4:	781d      	ldrb	r5, [r3, #0]
     ed6:	230a      	movs	r3, #10
     ed8:	18fa      	adds	r2, r7, r3
     eda:	231e      	movs	r3, #30
     edc:	18fb      	adds	r3, r7, r3
     ede:	781b      	ldrb	r3, [r3, #0]
     ee0:	9300      	str	r3, [sp, #0]
     ee2:	002b      	movs	r3, r5
     ee4:	4d55      	ldr	r5, [pc, #340]	; (103c <_usart_set_config+0x2d0>)
     ee6:	47a8      	blx	r5
     ee8:	0003      	movs	r3, r0
     eea:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     eec:	e01a      	b.n	f24 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
     eee:	683b      	ldr	r3, [r7, #0]
     ef0:	6a1d      	ldr	r5, [r3, #32]
     ef2:	693b      	ldr	r3, [r7, #16]
     ef4:	b2db      	uxtb	r3, r3
     ef6:	0018      	movs	r0, r3
     ef8:	4b4e      	ldr	r3, [pc, #312]	; (1034 <_usart_set_config+0x2c8>)
     efa:	4798      	blx	r3
				status_code =
     efc:	231d      	movs	r3, #29
     efe:	18fc      	adds	r4, r7, r3
     f00:	231f      	movs	r3, #31
     f02:	18fb      	adds	r3, r7, r3
     f04:	7819      	ldrb	r1, [r3, #0]
     f06:	230a      	movs	r3, #10
     f08:	18fa      	adds	r2, r7, r3
     f0a:	231e      	movs	r3, #30
     f0c:	18fb      	adds	r3, r7, r3
     f0e:	781b      	ldrb	r3, [r3, #0]
     f10:	9300      	str	r3, [sp, #0]
     f12:	000b      	movs	r3, r1
     f14:	0001      	movs	r1, r0
     f16:	0028      	movs	r0, r5
     f18:	4d48      	ldr	r5, [pc, #288]	; (103c <_usart_set_config+0x2d0>)
     f1a:	47a8      	blx	r5
     f1c:	0003      	movs	r3, r0
     f1e:	7023      	strb	r3, [r4, #0]
			break;
     f20:	e000      	b.n	f24 <_usart_set_config+0x1b8>
			break;
     f22:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     f24:	231d      	movs	r3, #29
     f26:	18fb      	adds	r3, r7, r3
     f28:	781b      	ldrb	r3, [r3, #0]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d003      	beq.n	f36 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
     f2e:	231d      	movs	r3, #29
     f30:	18fb      	adds	r3, r7, r3
     f32:	781b      	ldrb	r3, [r3, #0]
     f34:	e077      	b.n	1026 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     f36:	683b      	ldr	r3, [r7, #0]
     f38:	7e5b      	ldrb	r3, [r3, #25]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d003      	beq.n	f46 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     f3e:	683b      	ldr	r3, [r7, #0]
     f40:	7e9a      	ldrb	r2, [r3, #26]
     f42:	69bb      	ldr	r3, [r7, #24]
     f44:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	0018      	movs	r0, r3
     f4a:	4b3d      	ldr	r3, [pc, #244]	; (1040 <_usart_set_config+0x2d4>)
     f4c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     f4e:	230a      	movs	r3, #10
     f50:	18fb      	adds	r3, r7, r3
     f52:	881a      	ldrh	r2, [r3, #0]
     f54:	69bb      	ldr	r3, [r7, #24]
     f56:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f5a:	68fb      	ldr	r3, [r7, #12]
     f5c:	4313      	orrs	r3, r2
     f5e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
     f60:	683b      	ldr	r3, [r7, #0]
     f62:	2227      	movs	r2, #39	; 0x27
     f64:	5c9b      	ldrb	r3, [r3, r2]
     f66:	2201      	movs	r2, #1
     f68:	4053      	eors	r3, r2
     f6a:	b2db      	uxtb	r3, r3
     f6c:	2b00      	cmp	r3, #0
     f6e:	d003      	beq.n	f78 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f72:	2204      	movs	r2, #4
     f74:	4313      	orrs	r3, r2
     f76:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f78:	683b      	ldr	r3, [r7, #0]
     f7a:	7e5b      	ldrb	r3, [r3, #25]
     f7c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f7e:	683b      	ldr	r3, [r7, #0]
     f80:	7f1b      	ldrb	r3, [r3, #28]
     f82:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f84:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f86:	683b      	ldr	r3, [r7, #0]
     f88:	7f5b      	ldrb	r3, [r3, #29]
     f8a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f8c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f8e:	683b      	ldr	r3, [r7, #0]
     f90:	2124      	movs	r1, #36	; 0x24
     f92:	5c5b      	ldrb	r3, [r3, r1]
     f94:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f96:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     f98:	683b      	ldr	r3, [r7, #0]
     f9a:	2125      	movs	r1, #37	; 0x25
     f9c:	5c5b      	ldrb	r3, [r3, r1]
     f9e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fa0:	4313      	orrs	r3, r2
	ctrlb =  
     fa2:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     fa4:	683b      	ldr	r3, [r7, #0]
     fa6:	7a9b      	ldrb	r3, [r3, #10]
     fa8:	001a      	movs	r2, r3
     faa:	6a3b      	ldr	r3, [r7, #32]
     fac:	4313      	orrs	r3, r2
     fae:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
     fb0:	683b      	ldr	r3, [r7, #0]
     fb2:	7adb      	ldrb	r3, [r3, #11]
     fb4:	001a      	movs	r2, r3
     fb6:	6a3b      	ldr	r3, [r7, #32]
     fb8:	4313      	orrs	r3, r2
     fba:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     fbc:	683b      	ldr	r3, [r7, #0]
     fbe:	891b      	ldrh	r3, [r3, #8]
     fc0:	2bff      	cmp	r3, #255	; 0xff
     fc2:	d00b      	beq.n	fdc <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fc6:	2280      	movs	r2, #128	; 0x80
     fc8:	0452      	lsls	r2, r2, #17
     fca:	4313      	orrs	r3, r2
     fcc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
     fce:	683b      	ldr	r3, [r7, #0]
     fd0:	891b      	ldrh	r3, [r3, #8]
     fd2:	001a      	movs	r2, r3
     fd4:	6a3b      	ldr	r3, [r7, #32]
     fd6:	4313      	orrs	r3, r2
     fd8:	623b      	str	r3, [r7, #32]
     fda:	e008      	b.n	fee <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     fdc:	683b      	ldr	r3, [r7, #0]
     fde:	7edb      	ldrb	r3, [r3, #27]
     fe0:	2b00      	cmp	r3, #0
     fe2:	d004      	beq.n	fee <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fe6:	2280      	movs	r2, #128	; 0x80
     fe8:	04d2      	lsls	r2, r2, #19
     fea:	4313      	orrs	r3, r2
     fec:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     fee:	683b      	ldr	r3, [r7, #0]
     ff0:	222c      	movs	r2, #44	; 0x2c
     ff2:	5c9b      	ldrb	r3, [r3, r2]
     ff4:	2b00      	cmp	r3, #0
     ff6:	d103      	bne.n	1000 <_usart_set_config+0x294>
     ff8:	4b12      	ldr	r3, [pc, #72]	; (1044 <_usart_set_config+0x2d8>)
     ffa:	4798      	blx	r3
     ffc:	1e03      	subs	r3, r0, #0
     ffe:	d003      	beq.n	1008 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1002:	2280      	movs	r2, #128	; 0x80
    1004:	4313      	orrs	r3, r2
    1006:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	0018      	movs	r0, r3
    100c:	4b0c      	ldr	r3, [pc, #48]	; (1040 <_usart_set_config+0x2d4>)
    100e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1010:	69bb      	ldr	r3, [r7, #24]
    1012:	6a3a      	ldr	r2, [r7, #32]
    1014:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	0018      	movs	r0, r3
    101a:	4b09      	ldr	r3, [pc, #36]	; (1040 <_usart_set_config+0x2d4>)
    101c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    101e:	69bb      	ldr	r3, [r7, #24]
    1020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1022:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    1024:	2300      	movs	r3, #0
}
    1026:	0018      	movs	r0, r3
    1028:	46bd      	mov	sp, r7
    102a:	b00a      	add	sp, #40	; 0x28
    102c:	bdb0      	pop	{r4, r5, r7, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	00000c1d 	.word	0x00000c1d
    1034:	00002389 	.word	0x00002389
    1038:	00000797 	.word	0x00000797
    103c:	00000815 	.word	0x00000815
    1040:	00000d49 	.word	0x00000d49
    1044:	00000d09 	.word	0x00000d09

00001048 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1048:	b590      	push	{r4, r7, lr}
    104a:	b093      	sub	sp, #76	; 0x4c
    104c:	af00      	add	r7, sp, #0
    104e:	60f8      	str	r0, [r7, #12]
    1050:	60b9      	str	r1, [r7, #8]
    1052:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1054:	233b      	movs	r3, #59	; 0x3b
    1056:	18fb      	adds	r3, r7, r3
    1058:	2200      	movs	r2, #0
    105a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    105c:	68fb      	ldr	r3, [r7, #12]
    105e:	68ba      	ldr	r2, [r7, #8]
    1060:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1062:	68fb      	ldr	r3, [r7, #12]
    1064:	681b      	ldr	r3, [r3, #0]
    1066:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1068:	68fb      	ldr	r3, [r7, #12]
    106a:	681b      	ldr	r3, [r3, #0]
    106c:	0018      	movs	r0, r3
    106e:	4b86      	ldr	r3, [pc, #536]	; (1288 <usart_init+0x240>)
    1070:	4798      	blx	r3
    1072:	0003      	movs	r3, r0
    1074:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1078:	3302      	adds	r3, #2
    107a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    107e:	3314      	adds	r3, #20
    1080:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1084:	681b      	ldr	r3, [r3, #0]
    1086:	2201      	movs	r2, #1
    1088:	4013      	ands	r3, r2
    108a:	d001      	beq.n	1090 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    108c:	2305      	movs	r3, #5
    108e:	e0f6      	b.n	127e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1092:	681b      	ldr	r3, [r3, #0]
    1094:	2202      	movs	r2, #2
    1096:	4013      	ands	r3, r2
    1098:	d001      	beq.n	109e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    109a:	231c      	movs	r3, #28
    109c:	e0ef      	b.n	127e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    109e:	2201      	movs	r2, #1
    10a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10a2:	409a      	lsls	r2, r3
    10a4:	0013      	movs	r3, r2
    10a6:	0019      	movs	r1, r3
    10a8:	2002      	movs	r0, #2
    10aa:	4b78      	ldr	r3, [pc, #480]	; (128c <usart_init+0x244>)
    10ac:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    10ae:	2324      	movs	r3, #36	; 0x24
    10b0:	18fb      	adds	r3, r7, r3
    10b2:	0018      	movs	r0, r3
    10b4:	4b76      	ldr	r3, [pc, #472]	; (1290 <usart_init+0x248>)
    10b6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    10b8:	687b      	ldr	r3, [r7, #4]
    10ba:	222d      	movs	r2, #45	; 0x2d
    10bc:	5c9a      	ldrb	r2, [r3, r2]
    10be:	2324      	movs	r3, #36	; 0x24
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10c6:	b2db      	uxtb	r3, r3
    10c8:	2224      	movs	r2, #36	; 0x24
    10ca:	18ba      	adds	r2, r7, r2
    10cc:	0011      	movs	r1, r2
    10ce:	0018      	movs	r0, r3
    10d0:	4b70      	ldr	r3, [pc, #448]	; (1294 <usart_init+0x24c>)
    10d2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10d6:	b2db      	uxtb	r3, r3
    10d8:	0018      	movs	r0, r3
    10da:	4b6f      	ldr	r3, [pc, #444]	; (1298 <usart_init+0x250>)
    10dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	222d      	movs	r2, #45	; 0x2d
    10e2:	5c9b      	ldrb	r3, [r3, r2]
    10e4:	2100      	movs	r1, #0
    10e6:	0018      	movs	r0, r3
    10e8:	4b6c      	ldr	r3, [pc, #432]	; (129c <usart_init+0x254>)
    10ea:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	7ada      	ldrb	r2, [r3, #11]
    10f0:	68fb      	ldr	r3, [r7, #12]
    10f2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	2224      	movs	r2, #36	; 0x24
    10f8:	5c9a      	ldrb	r2, [r3, r2]
    10fa:	68fb      	ldr	r3, [r7, #12]
    10fc:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	2225      	movs	r2, #37	; 0x25
    1102:	5c9a      	ldrb	r2, [r3, r2]
    1104:	68fb      	ldr	r3, [r7, #12]
    1106:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	7eda      	ldrb	r2, [r3, #27]
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1110:	687b      	ldr	r3, [r7, #4]
    1112:	7f1a      	ldrb	r2, [r3, #28]
    1114:	68fb      	ldr	r3, [r7, #12]
    1116:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1118:	233b      	movs	r3, #59	; 0x3b
    111a:	18fc      	adds	r4, r7, r3
    111c:	687a      	ldr	r2, [r7, #4]
    111e:	68fb      	ldr	r3, [r7, #12]
    1120:	0011      	movs	r1, r2
    1122:	0018      	movs	r0, r3
    1124:	4b5e      	ldr	r3, [pc, #376]	; (12a0 <usart_init+0x258>)
    1126:	4798      	blx	r3
    1128:	0003      	movs	r3, r0
    112a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    112c:	233b      	movs	r3, #59	; 0x3b
    112e:	18fb      	adds	r3, r7, r3
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	2b00      	cmp	r3, #0
    1134:	d003      	beq.n	113e <usart_init+0xf6>
		return status_code;
    1136:	233b      	movs	r3, #59	; 0x3b
    1138:	18fb      	adds	r3, r7, r3
    113a:	781b      	ldrb	r3, [r3, #0]
    113c:	e09f      	b.n	127e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    113e:	2320      	movs	r3, #32
    1140:	18fb      	adds	r3, r7, r3
    1142:	0018      	movs	r0, r3
    1144:	4b57      	ldr	r3, [pc, #348]	; (12a4 <usart_init+0x25c>)
    1146:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1148:	2320      	movs	r3, #32
    114a:	18fb      	adds	r3, r7, r3
    114c:	2200      	movs	r2, #0
    114e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1150:	2320      	movs	r3, #32
    1152:	18fb      	adds	r3, r7, r3
    1154:	2200      	movs	r2, #0
    1156:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1158:	687b      	ldr	r3, [r7, #4]
    115a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    115c:	2310      	movs	r3, #16
    115e:	18fb      	adds	r3, r7, r3
    1160:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1162:	687b      	ldr	r3, [r7, #4]
    1164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    1166:	2310      	movs	r3, #16
    1168:	18fb      	adds	r3, r7, r3
    116a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    116c:	687b      	ldr	r3, [r7, #4]
    116e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    1170:	2310      	movs	r3, #16
    1172:	18fb      	adds	r3, r7, r3
    1174:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    1176:	687b      	ldr	r3, [r7, #4]
    1178:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    117a:	2310      	movs	r3, #16
    117c:	18fb      	adds	r3, r7, r3
    117e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1180:	2347      	movs	r3, #71	; 0x47
    1182:	18fb      	adds	r3, r7, r3
    1184:	2200      	movs	r2, #0
    1186:	701a      	strb	r2, [r3, #0]
    1188:	e02c      	b.n	11e4 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    118a:	2347      	movs	r3, #71	; 0x47
    118c:	18fb      	adds	r3, r7, r3
    118e:	781a      	ldrb	r2, [r3, #0]
    1190:	2310      	movs	r3, #16
    1192:	18fb      	adds	r3, r7, r3
    1194:	0092      	lsls	r2, r2, #2
    1196:	58d3      	ldr	r3, [r2, r3]
    1198:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    119a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    119c:	2b00      	cmp	r3, #0
    119e:	d109      	bne.n	11b4 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    11a0:	2347      	movs	r3, #71	; 0x47
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	781a      	ldrb	r2, [r3, #0]
    11a6:	68bb      	ldr	r3, [r7, #8]
    11a8:	0011      	movs	r1, r2
    11aa:	0018      	movs	r0, r3
    11ac:	4b3e      	ldr	r3, [pc, #248]	; (12a8 <usart_init+0x260>)
    11ae:	4798      	blx	r3
    11b0:	0003      	movs	r3, r0
    11b2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    11b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    11b6:	3301      	adds	r3, #1
    11b8:	d00d      	beq.n	11d6 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    11ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    11bc:	b2da      	uxtb	r2, r3
    11be:	2320      	movs	r3, #32
    11c0:	18fb      	adds	r3, r7, r3
    11c2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    11c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    11c6:	0c1b      	lsrs	r3, r3, #16
    11c8:	b2db      	uxtb	r3, r3
    11ca:	2220      	movs	r2, #32
    11cc:	18ba      	adds	r2, r7, r2
    11ce:	0011      	movs	r1, r2
    11d0:	0018      	movs	r0, r3
    11d2:	4b36      	ldr	r3, [pc, #216]	; (12ac <usart_init+0x264>)
    11d4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    11d6:	2347      	movs	r3, #71	; 0x47
    11d8:	18fb      	adds	r3, r7, r3
    11da:	781a      	ldrb	r2, [r3, #0]
    11dc:	2347      	movs	r3, #71	; 0x47
    11de:	18fb      	adds	r3, r7, r3
    11e0:	3201      	adds	r2, #1
    11e2:	701a      	strb	r2, [r3, #0]
    11e4:	2347      	movs	r3, #71	; 0x47
    11e6:	18fb      	adds	r3, r7, r3
    11e8:	781b      	ldrb	r3, [r3, #0]
    11ea:	2b03      	cmp	r3, #3
    11ec:	d9cd      	bls.n	118a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    11ee:	2300      	movs	r3, #0
    11f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    11f2:	e00a      	b.n	120a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    11f4:	68fa      	ldr	r2, [r7, #12]
    11f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11f8:	3302      	adds	r3, #2
    11fa:	009b      	lsls	r3, r3, #2
    11fc:	18d3      	adds	r3, r2, r3
    11fe:	3304      	adds	r3, #4
    1200:	2200      	movs	r2, #0
    1202:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1206:	3301      	adds	r3, #1
    1208:	63fb      	str	r3, [r7, #60]	; 0x3c
    120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    120c:	2b05      	cmp	r3, #5
    120e:	d9f1      	bls.n	11f4 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    1210:	68fb      	ldr	r3, [r7, #12]
    1212:	2200      	movs	r2, #0
    1214:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1216:	68fb      	ldr	r3, [r7, #12]
    1218:	2200      	movs	r2, #0
    121a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    121c:	68fb      	ldr	r3, [r7, #12]
    121e:	2200      	movs	r2, #0
    1220:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1222:	68fb      	ldr	r3, [r7, #12]
    1224:	2200      	movs	r2, #0
    1226:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1228:	68fb      	ldr	r3, [r7, #12]
    122a:	2230      	movs	r2, #48	; 0x30
    122c:	2100      	movs	r1, #0
    122e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    1230:	68fb      	ldr	r3, [r7, #12]
    1232:	2231      	movs	r2, #49	; 0x31
    1234:	2100      	movs	r1, #0
    1236:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    1238:	68fb      	ldr	r3, [r7, #12]
    123a:	2232      	movs	r2, #50	; 0x32
    123c:	2100      	movs	r1, #0
    123e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    1240:	68fb      	ldr	r3, [r7, #12]
    1242:	2233      	movs	r2, #51	; 0x33
    1244:	2100      	movs	r1, #0
    1246:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	2227      	movs	r2, #39	; 0x27
    124e:	18bc      	adds	r4, r7, r2
    1250:	0018      	movs	r0, r3
    1252:	4b0d      	ldr	r3, [pc, #52]	; (1288 <usart_init+0x240>)
    1254:	4798      	blx	r3
    1256:	0003      	movs	r3, r0
    1258:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    125a:	4a15      	ldr	r2, [pc, #84]	; (12b0 <usart_init+0x268>)
    125c:	2327      	movs	r3, #39	; 0x27
    125e:	18fb      	adds	r3, r7, r3
    1260:	781b      	ldrb	r3, [r3, #0]
    1262:	0011      	movs	r1, r2
    1264:	0018      	movs	r0, r3
    1266:	4b13      	ldr	r3, [pc, #76]	; (12b4 <usart_init+0x26c>)
    1268:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    126a:	2327      	movs	r3, #39	; 0x27
    126c:	18fb      	adds	r3, r7, r3
    126e:	781a      	ldrb	r2, [r3, #0]
    1270:	4b11      	ldr	r3, [pc, #68]	; (12b8 <usart_init+0x270>)
    1272:	0092      	lsls	r2, r2, #2
    1274:	68f9      	ldr	r1, [r7, #12]
    1276:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    1278:	233b      	movs	r3, #59	; 0x3b
    127a:	18fb      	adds	r3, r7, r3
    127c:	781b      	ldrb	r3, [r3, #0]
}
    127e:	0018      	movs	r0, r3
    1280:	46bd      	mov	sp, r7
    1282:	b013      	add	sp, #76	; 0x4c
    1284:	bd90      	pop	{r4, r7, pc}
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	00000c1d 	.word	0x00000c1d
    128c:	00000c85 	.word	0x00000c85
    1290:	00000c6d 	.word	0x00000c6d
    1294:	00002265 	.word	0x00002265
    1298:	000022a9 	.word	0x000022a9
    129c:	000009d5 	.word	0x000009d5
    12a0:	00000d6d 	.word	0x00000d6d
    12a4:	00000ce1 	.word	0x00000ce1
    12a8:	00000a61 	.word	0x00000a61
    12ac:	00002551 	.word	0x00002551
    12b0:	000015c1 	.word	0x000015c1
    12b4:	00001915 	.word	0x00001915
    12b8:	20000130 	.word	0x20000130

000012bc <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    12bc:	b580      	push	{r7, lr}
    12be:	b084      	sub	sp, #16
    12c0:	af00      	add	r7, sp, #0
    12c2:	6078      	str	r0, [r7, #4]
    12c4:	000a      	movs	r2, r1
    12c6:	1cbb      	adds	r3, r7, #2
    12c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	681b      	ldr	r3, [r3, #0]
    12ce:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    12d0:	687b      	ldr	r3, [r7, #4]
    12d2:	79db      	ldrb	r3, [r3, #7]
    12d4:	2201      	movs	r2, #1
    12d6:	4053      	eors	r3, r2
    12d8:	b2db      	uxtb	r3, r3
    12da:	2b00      	cmp	r3, #0
    12dc:	d001      	beq.n	12e2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    12de:	231c      	movs	r3, #28
    12e0:	e017      	b.n	1312 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    12e2:	687b      	ldr	r3, [r7, #4]
    12e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    12e6:	b29b      	uxth	r3, r3
    12e8:	2b00      	cmp	r3, #0
    12ea:	d001      	beq.n	12f0 <usart_write_wait+0x34>
		return STATUS_BUSY;
    12ec:	2305      	movs	r3, #5
    12ee:	e010      	b.n	1312 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	0018      	movs	r0, r3
    12f4:	4b09      	ldr	r3, [pc, #36]	; (131c <usart_write_wait+0x60>)
    12f6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    12f8:	68fb      	ldr	r3, [r7, #12]
    12fa:	1cba      	adds	r2, r7, #2
    12fc:	8812      	ldrh	r2, [r2, #0]
    12fe:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1300:	46c0      	nop			; (mov r8, r8)
    1302:	68fb      	ldr	r3, [r7, #12]
    1304:	7e1b      	ldrb	r3, [r3, #24]
    1306:	b2db      	uxtb	r3, r3
    1308:	001a      	movs	r2, r3
    130a:	2302      	movs	r3, #2
    130c:	4013      	ands	r3, r2
    130e:	d0f8      	beq.n	1302 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1310:	2300      	movs	r3, #0
}
    1312:	0018      	movs	r0, r3
    1314:	46bd      	mov	sp, r7
    1316:	b004      	add	sp, #16
    1318:	bd80      	pop	{r7, pc}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	00000d49 	.word	0x00000d49

00001320 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1320:	b580      	push	{r7, lr}
    1322:	b08a      	sub	sp, #40	; 0x28
    1324:	af00      	add	r7, sp, #0
    1326:	60f8      	str	r0, [r7, #12]
    1328:	60b9      	str	r1, [r7, #8]
    132a:	1dbb      	adds	r3, r7, #6
    132c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    132e:	1dbb      	adds	r3, r7, #6
    1330:	881b      	ldrh	r3, [r3, #0]
    1332:	2b00      	cmp	r3, #0
    1334:	d101      	bne.n	133a <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1336:	2317      	movs	r3, #23
    1338:	e07e      	b.n	1438 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    133a:	68fb      	ldr	r3, [r7, #12]
    133c:	79db      	ldrb	r3, [r3, #7]
    133e:	2201      	movs	r2, #1
    1340:	4053      	eors	r3, r2
    1342:	b2db      	uxtb	r3, r3
    1344:	2b00      	cmp	r3, #0
    1346:	d001      	beq.n	134c <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    1348:	231c      	movs	r3, #28
    134a:	e075      	b.n	1438 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	681b      	ldr	r3, [r3, #0]
    1350:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	0018      	movs	r0, r3
    1356:	4b3a      	ldr	r3, [pc, #232]	; (1440 <usart_write_buffer_wait+0x120>)
    1358:	4798      	blx	r3

	uint16_t tx_pos = 0;
    135a:	2326      	movs	r3, #38	; 0x26
    135c:	18fb      	adds	r3, r7, r3
    135e:	2200      	movs	r2, #0
    1360:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    1362:	e048      	b.n	13f6 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1364:	2300      	movs	r3, #0
    1366:	623b      	str	r3, [r7, #32]
    1368:	e00f      	b.n	138a <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    136a:	697b      	ldr	r3, [r7, #20]
    136c:	7e1b      	ldrb	r3, [r3, #24]
    136e:	b2db      	uxtb	r3, r3
    1370:	001a      	movs	r2, r3
    1372:	2301      	movs	r3, #1
    1374:	4013      	ands	r3, r2
    1376:	d10d      	bne.n	1394 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    1378:	6a3b      	ldr	r3, [r7, #32]
    137a:	4a32      	ldr	r2, [pc, #200]	; (1444 <usart_write_buffer_wait+0x124>)
    137c:	4293      	cmp	r3, r2
    137e:	d101      	bne.n	1384 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    1380:	2312      	movs	r3, #18
    1382:	e059      	b.n	1438 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1384:	6a3b      	ldr	r3, [r7, #32]
    1386:	3301      	adds	r3, #1
    1388:	623b      	str	r3, [r7, #32]
    138a:	6a3b      	ldr	r3, [r7, #32]
    138c:	4a2d      	ldr	r2, [pc, #180]	; (1444 <usart_write_buffer_wait+0x124>)
    138e:	4293      	cmp	r3, r2
    1390:	d9eb      	bls.n	136a <usart_write_buffer_wait+0x4a>
    1392:	e000      	b.n	1396 <usart_write_buffer_wait+0x76>
				break;
    1394:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1396:	2326      	movs	r3, #38	; 0x26
    1398:	18fb      	adds	r3, r7, r3
    139a:	881b      	ldrh	r3, [r3, #0]
    139c:	2226      	movs	r2, #38	; 0x26
    139e:	18ba      	adds	r2, r7, r2
    13a0:	1c59      	adds	r1, r3, #1
    13a2:	8011      	strh	r1, [r2, #0]
    13a4:	001a      	movs	r2, r3
    13a6:	68bb      	ldr	r3, [r7, #8]
    13a8:	189b      	adds	r3, r3, r2
    13aa:	781a      	ldrb	r2, [r3, #0]
    13ac:	231e      	movs	r3, #30
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	795b      	ldrb	r3, [r3, #5]
    13b6:	2b01      	cmp	r3, #1
    13b8:	d115      	bne.n	13e6 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    13ba:	2326      	movs	r3, #38	; 0x26
    13bc:	18fb      	adds	r3, r7, r3
    13be:	881b      	ldrh	r3, [r3, #0]
    13c0:	2226      	movs	r2, #38	; 0x26
    13c2:	18ba      	adds	r2, r7, r2
    13c4:	1c59      	adds	r1, r3, #1
    13c6:	8011      	strh	r1, [r2, #0]
    13c8:	001a      	movs	r2, r3
    13ca:	68bb      	ldr	r3, [r7, #8]
    13cc:	189b      	adds	r3, r3, r2
    13ce:	781b      	ldrb	r3, [r3, #0]
    13d0:	021b      	lsls	r3, r3, #8
    13d2:	b21a      	sxth	r2, r3
    13d4:	231e      	movs	r3, #30
    13d6:	18fb      	adds	r3, r7, r3
    13d8:	2100      	movs	r1, #0
    13da:	5e5b      	ldrsh	r3, [r3, r1]
    13dc:	4313      	orrs	r3, r2
    13de:	b21a      	sxth	r2, r3
    13e0:	231e      	movs	r3, #30
    13e2:	18fb      	adds	r3, r7, r3
    13e4:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    13e6:	231e      	movs	r3, #30
    13e8:	18fb      	adds	r3, r7, r3
    13ea:	881a      	ldrh	r2, [r3, #0]
    13ec:	68fb      	ldr	r3, [r7, #12]
    13ee:	0011      	movs	r1, r2
    13f0:	0018      	movs	r0, r3
    13f2:	4b15      	ldr	r3, [pc, #84]	; (1448 <usart_write_buffer_wait+0x128>)
    13f4:	4798      	blx	r3
	while (length--) {
    13f6:	1dbb      	adds	r3, r7, #6
    13f8:	881b      	ldrh	r3, [r3, #0]
    13fa:	1dba      	adds	r2, r7, #6
    13fc:	1e59      	subs	r1, r3, #1
    13fe:	8011      	strh	r1, [r2, #0]
    1400:	2b00      	cmp	r3, #0
    1402:	d1af      	bne.n	1364 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1404:	2300      	movs	r3, #0
    1406:	61bb      	str	r3, [r7, #24]
    1408:	e00f      	b.n	142a <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    140a:	697b      	ldr	r3, [r7, #20]
    140c:	7e1b      	ldrb	r3, [r3, #24]
    140e:	b2db      	uxtb	r3, r3
    1410:	001a      	movs	r2, r3
    1412:	2302      	movs	r3, #2
    1414:	4013      	ands	r3, r2
    1416:	d10d      	bne.n	1434 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    1418:	69bb      	ldr	r3, [r7, #24]
    141a:	4a0a      	ldr	r2, [pc, #40]	; (1444 <usart_write_buffer_wait+0x124>)
    141c:	4293      	cmp	r3, r2
    141e:	d101      	bne.n	1424 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    1420:	2312      	movs	r3, #18
    1422:	e009      	b.n	1438 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1424:	69bb      	ldr	r3, [r7, #24]
    1426:	3301      	adds	r3, #1
    1428:	61bb      	str	r3, [r7, #24]
    142a:	69bb      	ldr	r3, [r7, #24]
    142c:	4a05      	ldr	r2, [pc, #20]	; (1444 <usart_write_buffer_wait+0x124>)
    142e:	4293      	cmp	r3, r2
    1430:	d9eb      	bls.n	140a <usart_write_buffer_wait+0xea>
    1432:	e000      	b.n	1436 <usart_write_buffer_wait+0x116>
			break;
    1434:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    1436:	2300      	movs	r3, #0
}
    1438:	0018      	movs	r0, r3
    143a:	46bd      	mov	sp, r7
    143c:	b00a      	add	sp, #40	; 0x28
    143e:	bd80      	pop	{r7, pc}
    1440:	00000d49 	.word	0x00000d49
    1444:	0000ffff 	.word	0x0000ffff
    1448:	000012bd 	.word	0x000012bd

0000144c <system_interrupt_enter_critical_section>:
{
    144c:	b580      	push	{r7, lr}
    144e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1450:	4b02      	ldr	r3, [pc, #8]	; (145c <system_interrupt_enter_critical_section+0x10>)
    1452:	4798      	blx	r3
}
    1454:	46c0      	nop			; (mov r8, r8)
    1456:	46bd      	mov	sp, r7
    1458:	bd80      	pop	{r7, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	00001a61 	.word	0x00001a61

00001460 <system_interrupt_leave_critical_section>:
{
    1460:	b580      	push	{r7, lr}
    1462:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1464:	4b02      	ldr	r3, [pc, #8]	; (1470 <system_interrupt_leave_critical_section+0x10>)
    1466:	4798      	blx	r3
}
    1468:	46c0      	nop			; (mov r8, r8)
    146a:	46bd      	mov	sp, r7
    146c:	bd80      	pop	{r7, pc}
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	00001ab5 	.word	0x00001ab5

00001474 <usart_is_syncing>:
{
    1474:	b580      	push	{r7, lr}
    1476:	b084      	sub	sp, #16
    1478:	af00      	add	r7, sp, #0
    147a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	681b      	ldr	r3, [r3, #0]
    1480:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    1482:	68fb      	ldr	r3, [r7, #12]
    1484:	69db      	ldr	r3, [r3, #28]
    1486:	1e5a      	subs	r2, r3, #1
    1488:	4193      	sbcs	r3, r2
    148a:	b2db      	uxtb	r3, r3
}
    148c:	0018      	movs	r0, r3
    148e:	46bd      	mov	sp, r7
    1490:	b004      	add	sp, #16
    1492:	bd80      	pop	{r7, pc}

00001494 <_usart_wait_for_sync>:
{
    1494:	b580      	push	{r7, lr}
    1496:	b082      	sub	sp, #8
    1498:	af00      	add	r7, sp, #0
    149a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    149c:	46c0      	nop			; (mov r8, r8)
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	0018      	movs	r0, r3
    14a2:	4b04      	ldr	r3, [pc, #16]	; (14b4 <_usart_wait_for_sync+0x20>)
    14a4:	4798      	blx	r3
    14a6:	1e03      	subs	r3, r0, #0
    14a8:	d1f9      	bne.n	149e <_usart_wait_for_sync+0xa>
}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	46bd      	mov	sp, r7
    14ae:	b002      	add	sp, #8
    14b0:	bd80      	pop	{r7, pc}
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	00001475 	.word	0x00001475

000014b8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    14b8:	b580      	push	{r7, lr}
    14ba:	b086      	sub	sp, #24
    14bc:	af00      	add	r7, sp, #0
    14be:	60f8      	str	r0, [r7, #12]
    14c0:	60b9      	str	r1, [r7, #8]
    14c2:	1dbb      	adds	r3, r7, #6
    14c4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14c6:	68fb      	ldr	r3, [r7, #12]
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    14cc:	4b16      	ldr	r3, [pc, #88]	; (1528 <_usart_read_buffer+0x70>)
    14ce:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    14d0:	68fb      	ldr	r3, [r7, #12]
    14d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    14d4:	b29b      	uxth	r3, r3
    14d6:	2b00      	cmp	r3, #0
    14d8:	d003      	beq.n	14e2 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    14da:	4b14      	ldr	r3, [pc, #80]	; (152c <_usart_read_buffer+0x74>)
    14dc:	4798      	blx	r3
		return STATUS_BUSY;
    14de:	2305      	movs	r3, #5
    14e0:	e01e      	b.n	1520 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    14e2:	68fb      	ldr	r3, [r7, #12]
    14e4:	1dba      	adds	r2, r7, #6
    14e6:	8812      	ldrh	r2, [r2, #0]
    14e8:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    14ea:	4b10      	ldr	r3, [pc, #64]	; (152c <_usart_read_buffer+0x74>)
    14ec:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    14ee:	68fb      	ldr	r3, [r7, #12]
    14f0:	68ba      	ldr	r2, [r7, #8]
    14f2:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    14f4:	68fb      	ldr	r3, [r7, #12]
    14f6:	2232      	movs	r2, #50	; 0x32
    14f8:	2105      	movs	r1, #5
    14fa:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    14fc:	697b      	ldr	r3, [r7, #20]
    14fe:	2204      	movs	r2, #4
    1500:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	7a1b      	ldrb	r3, [r3, #8]
    1506:	2b00      	cmp	r3, #0
    1508:	d002      	beq.n	1510 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    150a:	697b      	ldr	r3, [r7, #20]
    150c:	2220      	movs	r2, #32
    150e:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    1510:	68fb      	ldr	r3, [r7, #12]
    1512:	7a5b      	ldrb	r3, [r3, #9]
    1514:	2b00      	cmp	r3, #0
    1516:	d002      	beq.n	151e <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1518:	697b      	ldr	r3, [r7, #20]
    151a:	2208      	movs	r2, #8
    151c:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    151e:	2300      	movs	r3, #0
}
    1520:	0018      	movs	r0, r3
    1522:	46bd      	mov	sp, r7
    1524:	b006      	add	sp, #24
    1526:	bd80      	pop	{r7, pc}
    1528:	0000144d 	.word	0x0000144d
    152c:	00001461 	.word	0x00001461

00001530 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    1530:	b580      	push	{r7, lr}
    1532:	b084      	sub	sp, #16
    1534:	af00      	add	r7, sp, #0
    1536:	60f8      	str	r0, [r7, #12]
    1538:	60b9      	str	r1, [r7, #8]
    153a:	1dfb      	adds	r3, r7, #7
    153c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    153e:	1dfb      	adds	r3, r7, #7
    1540:	781b      	ldrb	r3, [r3, #0]
    1542:	68fa      	ldr	r2, [r7, #12]
    1544:	3302      	adds	r3, #2
    1546:	009b      	lsls	r3, r3, #2
    1548:	18d3      	adds	r3, r2, r3
    154a:	3304      	adds	r3, #4
    154c:	68ba      	ldr	r2, [r7, #8]
    154e:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1550:	68fb      	ldr	r3, [r7, #12]
    1552:	2230      	movs	r2, #48	; 0x30
    1554:	5c9b      	ldrb	r3, [r3, r2]
    1556:	b25a      	sxtb	r2, r3
    1558:	1dfb      	adds	r3, r7, #7
    155a:	781b      	ldrb	r3, [r3, #0]
    155c:	2101      	movs	r1, #1
    155e:	4099      	lsls	r1, r3
    1560:	000b      	movs	r3, r1
    1562:	b25b      	sxtb	r3, r3
    1564:	4313      	orrs	r3, r2
    1566:	b25b      	sxtb	r3, r3
    1568:	b2d9      	uxtb	r1, r3
    156a:	68fb      	ldr	r3, [r7, #12]
    156c:	2230      	movs	r2, #48	; 0x30
    156e:	5499      	strb	r1, [r3, r2]
}
    1570:	46c0      	nop			; (mov r8, r8)
    1572:	46bd      	mov	sp, r7
    1574:	b004      	add	sp, #16
    1576:	bd80      	pop	{r7, pc}

00001578 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1578:	b580      	push	{r7, lr}
    157a:	b084      	sub	sp, #16
    157c:	af00      	add	r7, sp, #0
    157e:	60f8      	str	r0, [r7, #12]
    1580:	60b9      	str	r1, [r7, #8]
    1582:	1dbb      	adds	r3, r7, #6
    1584:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    1586:	1dbb      	adds	r3, r7, #6
    1588:	881b      	ldrh	r3, [r3, #0]
    158a:	2b00      	cmp	r3, #0
    158c:	d101      	bne.n	1592 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    158e:	2317      	movs	r3, #23
    1590:	e010      	b.n	15b4 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1592:	68fb      	ldr	r3, [r7, #12]
    1594:	799b      	ldrb	r3, [r3, #6]
    1596:	2201      	movs	r2, #1
    1598:	4053      	eors	r3, r2
    159a:	b2db      	uxtb	r3, r3
    159c:	2b00      	cmp	r3, #0
    159e:	d001      	beq.n	15a4 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    15a0:	231c      	movs	r3, #28
    15a2:	e007      	b.n	15b4 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    15a4:	1dbb      	adds	r3, r7, #6
    15a6:	881a      	ldrh	r2, [r3, #0]
    15a8:	68b9      	ldr	r1, [r7, #8]
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	0018      	movs	r0, r3
    15ae:	4b03      	ldr	r3, [pc, #12]	; (15bc <usart_read_buffer_job+0x44>)
    15b0:	4798      	blx	r3
    15b2:	0003      	movs	r3, r0
}
    15b4:	0018      	movs	r0, r3
    15b6:	46bd      	mov	sp, r7
    15b8:	b004      	add	sp, #16
    15ba:	bd80      	pop	{r7, pc}
    15bc:	000014b9 	.word	0x000014b9

000015c0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    15c0:	b580      	push	{r7, lr}
    15c2:	b088      	sub	sp, #32
    15c4:	af00      	add	r7, sp, #0
    15c6:	0002      	movs	r2, r0
    15c8:	1dfb      	adds	r3, r7, #7
    15ca:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    15cc:	1dfb      	adds	r3, r7, #7
    15ce:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    15d0:	4ba3      	ldr	r3, [pc, #652]	; (1860 <_usart_interrupt_handler+0x2a0>)
    15d2:	0092      	lsls	r2, r2, #2
    15d4:	58d3      	ldr	r3, [r2, r3]
    15d6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    15d8:	69bb      	ldr	r3, [r7, #24]
    15da:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    15dc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    15de:	69bb      	ldr	r3, [r7, #24]
    15e0:	0018      	movs	r0, r3
    15e2:	4ba0      	ldr	r3, [pc, #640]	; (1864 <_usart_interrupt_handler+0x2a4>)
    15e4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    15e6:	697b      	ldr	r3, [r7, #20]
    15e8:	7e1b      	ldrb	r3, [r3, #24]
    15ea:	b2da      	uxtb	r2, r3
    15ec:	2312      	movs	r3, #18
    15ee:	18fb      	adds	r3, r7, r3
    15f0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    15f2:	697b      	ldr	r3, [r7, #20]
    15f4:	7d9b      	ldrb	r3, [r3, #22]
    15f6:	b2db      	uxtb	r3, r3
    15f8:	b29a      	uxth	r2, r3
    15fa:	2312      	movs	r3, #18
    15fc:	18fb      	adds	r3, r7, r3
    15fe:	2112      	movs	r1, #18
    1600:	1879      	adds	r1, r7, r1
    1602:	8809      	ldrh	r1, [r1, #0]
    1604:	400a      	ands	r2, r1
    1606:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1608:	69bb      	ldr	r3, [r7, #24]
    160a:	2230      	movs	r2, #48	; 0x30
    160c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    160e:	69ba      	ldr	r2, [r7, #24]
    1610:	2131      	movs	r1, #49	; 0x31
    1612:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    1614:	4013      	ands	r3, r2
    1616:	b2da      	uxtb	r2, r3
    1618:	2310      	movs	r3, #16
    161a:	18fb      	adds	r3, r7, r3
    161c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    161e:	2312      	movs	r3, #18
    1620:	18fb      	adds	r3, r7, r3
    1622:	881b      	ldrh	r3, [r3, #0]
    1624:	2201      	movs	r2, #1
    1626:	4013      	ands	r3, r2
    1628:	d044      	beq.n	16b4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    162a:	69bb      	ldr	r3, [r7, #24]
    162c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    162e:	b29b      	uxth	r3, r3
    1630:	2b00      	cmp	r3, #0
    1632:	d03c      	beq.n	16ae <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1634:	69bb      	ldr	r3, [r7, #24]
    1636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1638:	781b      	ldrb	r3, [r3, #0]
    163a:	b2da      	uxtb	r2, r3
    163c:	231c      	movs	r3, #28
    163e:	18fb      	adds	r3, r7, r3
    1640:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1642:	69bb      	ldr	r3, [r7, #24]
    1644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1646:	1c5a      	adds	r2, r3, #1
    1648:	69bb      	ldr	r3, [r7, #24]
    164a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    164c:	69bb      	ldr	r3, [r7, #24]
    164e:	795b      	ldrb	r3, [r3, #5]
    1650:	2b01      	cmp	r3, #1
    1652:	d113      	bne.n	167c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1654:	69bb      	ldr	r3, [r7, #24]
    1656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1658:	781b      	ldrb	r3, [r3, #0]
    165a:	b2db      	uxtb	r3, r3
    165c:	021b      	lsls	r3, r3, #8
    165e:	b21a      	sxth	r2, r3
    1660:	231c      	movs	r3, #28
    1662:	18fb      	adds	r3, r7, r3
    1664:	2100      	movs	r1, #0
    1666:	5e5b      	ldrsh	r3, [r3, r1]
    1668:	4313      	orrs	r3, r2
    166a:	b21a      	sxth	r2, r3
    166c:	231c      	movs	r3, #28
    166e:	18fb      	adds	r3, r7, r3
    1670:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1672:	69bb      	ldr	r3, [r7, #24]
    1674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1676:	1c5a      	adds	r2, r3, #1
    1678:	69bb      	ldr	r3, [r7, #24]
    167a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    167c:	231c      	movs	r3, #28
    167e:	18fb      	adds	r3, r7, r3
    1680:	881b      	ldrh	r3, [r3, #0]
    1682:	05db      	lsls	r3, r3, #23
    1684:	0ddb      	lsrs	r3, r3, #23
    1686:	b29a      	uxth	r2, r3
    1688:	697b      	ldr	r3, [r7, #20]
    168a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    168c:	69bb      	ldr	r3, [r7, #24]
    168e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1690:	b29b      	uxth	r3, r3
    1692:	3b01      	subs	r3, #1
    1694:	b29b      	uxth	r3, r3
    1696:	69ba      	ldr	r2, [r7, #24]
    1698:	1c19      	adds	r1, r3, #0
    169a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    169c:	2b00      	cmp	r3, #0
    169e:	d109      	bne.n	16b4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    16a0:	697b      	ldr	r3, [r7, #20]
    16a2:	2201      	movs	r2, #1
    16a4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    16a6:	697b      	ldr	r3, [r7, #20]
    16a8:	2202      	movs	r2, #2
    16aa:	759a      	strb	r2, [r3, #22]
    16ac:	e002      	b.n	16b4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    16ae:	697b      	ldr	r3, [r7, #20]
    16b0:	2201      	movs	r2, #1
    16b2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    16b4:	2312      	movs	r3, #18
    16b6:	18fb      	adds	r3, r7, r3
    16b8:	881b      	ldrh	r3, [r3, #0]
    16ba:	2202      	movs	r2, #2
    16bc:	4013      	ands	r3, r2
    16be:	d011      	beq.n	16e4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    16c0:	697b      	ldr	r3, [r7, #20]
    16c2:	2202      	movs	r2, #2
    16c4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    16c6:	69bb      	ldr	r3, [r7, #24]
    16c8:	2233      	movs	r2, #51	; 0x33
    16ca:	2100      	movs	r1, #0
    16cc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    16ce:	2310      	movs	r3, #16
    16d0:	18fb      	adds	r3, r7, r3
    16d2:	881b      	ldrh	r3, [r3, #0]
    16d4:	2201      	movs	r2, #1
    16d6:	4013      	ands	r3, r2
    16d8:	d004      	beq.n	16e4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    16da:	69bb      	ldr	r3, [r7, #24]
    16dc:	68db      	ldr	r3, [r3, #12]
    16de:	69ba      	ldr	r2, [r7, #24]
    16e0:	0010      	movs	r0, r2
    16e2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    16e4:	2312      	movs	r3, #18
    16e6:	18fb      	adds	r3, r7, r3
    16e8:	881b      	ldrh	r3, [r3, #0]
    16ea:	2204      	movs	r2, #4
    16ec:	4013      	ands	r3, r2
    16ee:	d100      	bne.n	16f2 <_usart_interrupt_handler+0x132>
    16f0:	e0bd      	b.n	186e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    16f2:	69bb      	ldr	r3, [r7, #24]
    16f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    16f6:	b29b      	uxth	r3, r3
    16f8:	2b00      	cmp	r3, #0
    16fa:	d100      	bne.n	16fe <_usart_interrupt_handler+0x13e>
    16fc:	e0b4      	b.n	1868 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16fe:	697b      	ldr	r3, [r7, #20]
    1700:	8b5b      	ldrh	r3, [r3, #26]
    1702:	b29b      	uxth	r3, r3
    1704:	b2da      	uxtb	r2, r3
    1706:	231f      	movs	r3, #31
    1708:	18fb      	adds	r3, r7, r3
    170a:	213f      	movs	r1, #63	; 0x3f
    170c:	400a      	ands	r2, r1
    170e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1710:	231f      	movs	r3, #31
    1712:	18fb      	adds	r3, r7, r3
    1714:	781b      	ldrb	r3, [r3, #0]
    1716:	2208      	movs	r2, #8
    1718:	4013      	ands	r3, r2
    171a:	d007      	beq.n	172c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    171c:	231f      	movs	r3, #31
    171e:	18fb      	adds	r3, r7, r3
    1720:	221f      	movs	r2, #31
    1722:	18ba      	adds	r2, r7, r2
    1724:	7812      	ldrb	r2, [r2, #0]
    1726:	2108      	movs	r1, #8
    1728:	438a      	bics	r2, r1
    172a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    172c:	231f      	movs	r3, #31
    172e:	18fb      	adds	r3, r7, r3
    1730:	781b      	ldrb	r3, [r3, #0]
    1732:	2b00      	cmp	r3, #0
    1734:	d050      	beq.n	17d8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1736:	231f      	movs	r3, #31
    1738:	18fb      	adds	r3, r7, r3
    173a:	781b      	ldrb	r3, [r3, #0]
    173c:	2202      	movs	r2, #2
    173e:	4013      	ands	r3, r2
    1740:	d007      	beq.n	1752 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1742:	69bb      	ldr	r3, [r7, #24]
    1744:	2232      	movs	r2, #50	; 0x32
    1746:	211a      	movs	r1, #26
    1748:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    174a:	697b      	ldr	r3, [r7, #20]
    174c:	2202      	movs	r2, #2
    174e:	835a      	strh	r2, [r3, #26]
    1750:	e036      	b.n	17c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1752:	231f      	movs	r3, #31
    1754:	18fb      	adds	r3, r7, r3
    1756:	781b      	ldrb	r3, [r3, #0]
    1758:	2204      	movs	r2, #4
    175a:	4013      	ands	r3, r2
    175c:	d007      	beq.n	176e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    175e:	69bb      	ldr	r3, [r7, #24]
    1760:	2232      	movs	r2, #50	; 0x32
    1762:	211e      	movs	r1, #30
    1764:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1766:	697b      	ldr	r3, [r7, #20]
    1768:	2204      	movs	r2, #4
    176a:	835a      	strh	r2, [r3, #26]
    176c:	e028      	b.n	17c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    176e:	231f      	movs	r3, #31
    1770:	18fb      	adds	r3, r7, r3
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	2201      	movs	r2, #1
    1776:	4013      	ands	r3, r2
    1778:	d007      	beq.n	178a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    177a:	69bb      	ldr	r3, [r7, #24]
    177c:	2232      	movs	r2, #50	; 0x32
    177e:	2113      	movs	r1, #19
    1780:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1782:	697b      	ldr	r3, [r7, #20]
    1784:	2201      	movs	r2, #1
    1786:	835a      	strh	r2, [r3, #26]
    1788:	e01a      	b.n	17c0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    178a:	231f      	movs	r3, #31
    178c:	18fb      	adds	r3, r7, r3
    178e:	781b      	ldrb	r3, [r3, #0]
    1790:	2210      	movs	r2, #16
    1792:	4013      	ands	r3, r2
    1794:	d007      	beq.n	17a6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1796:	69bb      	ldr	r3, [r7, #24]
    1798:	2232      	movs	r2, #50	; 0x32
    179a:	2142      	movs	r1, #66	; 0x42
    179c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    179e:	697b      	ldr	r3, [r7, #20]
    17a0:	2210      	movs	r2, #16
    17a2:	835a      	strh	r2, [r3, #26]
    17a4:	e00c      	b.n	17c0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    17a6:	231f      	movs	r3, #31
    17a8:	18fb      	adds	r3, r7, r3
    17aa:	781b      	ldrb	r3, [r3, #0]
    17ac:	2220      	movs	r2, #32
    17ae:	4013      	ands	r3, r2
    17b0:	d006      	beq.n	17c0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    17b2:	69bb      	ldr	r3, [r7, #24]
    17b4:	2232      	movs	r2, #50	; 0x32
    17b6:	2141      	movs	r1, #65	; 0x41
    17b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    17ba:	697b      	ldr	r3, [r7, #20]
    17bc:	2220      	movs	r2, #32
    17be:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    17c0:	2310      	movs	r3, #16
    17c2:	18fb      	adds	r3, r7, r3
    17c4:	881b      	ldrh	r3, [r3, #0]
    17c6:	2204      	movs	r2, #4
    17c8:	4013      	ands	r3, r2
				if (callback_status
    17ca:	d050      	beq.n	186e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    17cc:	69bb      	ldr	r3, [r7, #24]
    17ce:	695b      	ldr	r3, [r3, #20]
    17d0:	69ba      	ldr	r2, [r7, #24]
    17d2:	0010      	movs	r0, r2
    17d4:	4798      	blx	r3
    17d6:	e04a      	b.n	186e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    17d8:	697b      	ldr	r3, [r7, #20]
    17da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    17dc:	b29a      	uxth	r2, r3
    17de:	230e      	movs	r3, #14
    17e0:	18fb      	adds	r3, r7, r3
    17e2:	05d2      	lsls	r2, r2, #23
    17e4:	0dd2      	lsrs	r2, r2, #23
    17e6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    17e8:	69bb      	ldr	r3, [r7, #24]
    17ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17ec:	220e      	movs	r2, #14
    17ee:	18ba      	adds	r2, r7, r2
    17f0:	8812      	ldrh	r2, [r2, #0]
    17f2:	b2d2      	uxtb	r2, r2
    17f4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    17f6:	69bb      	ldr	r3, [r7, #24]
    17f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17fa:	1c5a      	adds	r2, r3, #1
    17fc:	69bb      	ldr	r3, [r7, #24]
    17fe:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1800:	69bb      	ldr	r3, [r7, #24]
    1802:	795b      	ldrb	r3, [r3, #5]
    1804:	2b01      	cmp	r3, #1
    1806:	d10d      	bne.n	1824 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1808:	69bb      	ldr	r3, [r7, #24]
    180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    180c:	220e      	movs	r2, #14
    180e:	18ba      	adds	r2, r7, r2
    1810:	8812      	ldrh	r2, [r2, #0]
    1812:	0a12      	lsrs	r2, r2, #8
    1814:	b292      	uxth	r2, r2
    1816:	b2d2      	uxtb	r2, r2
    1818:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    181a:	69bb      	ldr	r3, [r7, #24]
    181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    181e:	1c5a      	adds	r2, r3, #1
    1820:	69bb      	ldr	r3, [r7, #24]
    1822:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1824:	69bb      	ldr	r3, [r7, #24]
    1826:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1828:	b29b      	uxth	r3, r3
    182a:	3b01      	subs	r3, #1
    182c:	b29b      	uxth	r3, r3
    182e:	69ba      	ldr	r2, [r7, #24]
    1830:	1c19      	adds	r1, r3, #0
    1832:	8591      	strh	r1, [r2, #44]	; 0x2c
    1834:	2b00      	cmp	r3, #0
    1836:	d11a      	bne.n	186e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1838:	697b      	ldr	r3, [r7, #20]
    183a:	2204      	movs	r2, #4
    183c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    183e:	69bb      	ldr	r3, [r7, #24]
    1840:	2232      	movs	r2, #50	; 0x32
    1842:	2100      	movs	r1, #0
    1844:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1846:	2310      	movs	r3, #16
    1848:	18fb      	adds	r3, r7, r3
    184a:	881b      	ldrh	r3, [r3, #0]
    184c:	2202      	movs	r2, #2
    184e:	4013      	ands	r3, r2
					if (callback_status
    1850:	d00d      	beq.n	186e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1852:	69bb      	ldr	r3, [r7, #24]
    1854:	691b      	ldr	r3, [r3, #16]
    1856:	69ba      	ldr	r2, [r7, #24]
    1858:	0010      	movs	r0, r2
    185a:	4798      	blx	r3
    185c:	e007      	b.n	186e <_usart_interrupt_handler+0x2ae>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	20000130 	.word	0x20000130
    1864:	00001495 	.word	0x00001495
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1868:	697b      	ldr	r3, [r7, #20]
    186a:	2204      	movs	r2, #4
    186c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    186e:	2312      	movs	r3, #18
    1870:	18fb      	adds	r3, r7, r3
    1872:	881b      	ldrh	r3, [r3, #0]
    1874:	2210      	movs	r2, #16
    1876:	4013      	ands	r3, r2
    1878:	d010      	beq.n	189c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    187a:	697b      	ldr	r3, [r7, #20]
    187c:	2210      	movs	r2, #16
    187e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1880:	697b      	ldr	r3, [r7, #20]
    1882:	2210      	movs	r2, #16
    1884:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1886:	2310      	movs	r3, #16
    1888:	18fb      	adds	r3, r7, r3
    188a:	881b      	ldrh	r3, [r3, #0]
    188c:	2210      	movs	r2, #16
    188e:	4013      	ands	r3, r2
    1890:	d004      	beq.n	189c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1892:	69bb      	ldr	r3, [r7, #24]
    1894:	69db      	ldr	r3, [r3, #28]
    1896:	69ba      	ldr	r2, [r7, #24]
    1898:	0010      	movs	r0, r2
    189a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    189c:	2312      	movs	r3, #18
    189e:	18fb      	adds	r3, r7, r3
    18a0:	881b      	ldrh	r3, [r3, #0]
    18a2:	2220      	movs	r2, #32
    18a4:	4013      	ands	r3, r2
    18a6:	d010      	beq.n	18ca <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    18a8:	697b      	ldr	r3, [r7, #20]
    18aa:	2220      	movs	r2, #32
    18ac:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    18ae:	697b      	ldr	r3, [r7, #20]
    18b0:	2220      	movs	r2, #32
    18b2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    18b4:	2310      	movs	r3, #16
    18b6:	18fb      	adds	r3, r7, r3
    18b8:	881b      	ldrh	r3, [r3, #0]
    18ba:	2208      	movs	r2, #8
    18bc:	4013      	ands	r3, r2
    18be:	d004      	beq.n	18ca <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    18c0:	69bb      	ldr	r3, [r7, #24]
    18c2:	699b      	ldr	r3, [r3, #24]
    18c4:	69ba      	ldr	r2, [r7, #24]
    18c6:	0010      	movs	r0, r2
    18c8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    18ca:	2312      	movs	r3, #18
    18cc:	18fb      	adds	r3, r7, r3
    18ce:	881b      	ldrh	r3, [r3, #0]
    18d0:	2208      	movs	r2, #8
    18d2:	4013      	ands	r3, r2
    18d4:	d010      	beq.n	18f8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    18d6:	697b      	ldr	r3, [r7, #20]
    18d8:	2208      	movs	r2, #8
    18da:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    18dc:	697b      	ldr	r3, [r7, #20]
    18de:	2208      	movs	r2, #8
    18e0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    18e2:	2310      	movs	r3, #16
    18e4:	18fb      	adds	r3, r7, r3
    18e6:	881b      	ldrh	r3, [r3, #0]
    18e8:	2220      	movs	r2, #32
    18ea:	4013      	ands	r3, r2
    18ec:	d004      	beq.n	18f8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    18ee:	69bb      	ldr	r3, [r7, #24]
    18f0:	6a1b      	ldr	r3, [r3, #32]
    18f2:	69ba      	ldr	r2, [r7, #24]
    18f4:	0010      	movs	r0, r2
    18f6:	4798      	blx	r3
		}
	}
#endif
}
    18f8:	46c0      	nop			; (mov r8, r8)
    18fa:	46bd      	mov	sp, r7
    18fc:	b008      	add	sp, #32
    18fe:	bd80      	pop	{r7, pc}

00001900 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    1900:	b580      	push	{r7, lr}
    1902:	b082      	sub	sp, #8
    1904:	af00      	add	r7, sp, #0
    1906:	0002      	movs	r2, r0
    1908:	1dfb      	adds	r3, r7, #7
    190a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    190c:	46c0      	nop			; (mov r8, r8)
    190e:	46bd      	mov	sp, r7
    1910:	b002      	add	sp, #8
    1912:	bd80      	pop	{r7, pc}

00001914 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1914:	b580      	push	{r7, lr}
    1916:	b084      	sub	sp, #16
    1918:	af00      	add	r7, sp, #0
    191a:	0002      	movs	r2, r0
    191c:	6039      	str	r1, [r7, #0]
    191e:	1dfb      	adds	r3, r7, #7
    1920:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1922:	4b13      	ldr	r3, [pc, #76]	; (1970 <_sercom_set_handler+0x5c>)
    1924:	781b      	ldrb	r3, [r3, #0]
    1926:	2201      	movs	r2, #1
    1928:	4053      	eors	r3, r2
    192a:	b2db      	uxtb	r3, r3
    192c:	2b00      	cmp	r3, #0
    192e:	d015      	beq.n	195c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1930:	2300      	movs	r3, #0
    1932:	60fb      	str	r3, [r7, #12]
    1934:	e00c      	b.n	1950 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1936:	4b0f      	ldr	r3, [pc, #60]	; (1974 <_sercom_set_handler+0x60>)
    1938:	68fa      	ldr	r2, [r7, #12]
    193a:	0092      	lsls	r2, r2, #2
    193c:	490e      	ldr	r1, [pc, #56]	; (1978 <_sercom_set_handler+0x64>)
    193e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    1940:	4b0e      	ldr	r3, [pc, #56]	; (197c <_sercom_set_handler+0x68>)
    1942:	68fa      	ldr	r2, [r7, #12]
    1944:	0092      	lsls	r2, r2, #2
    1946:	2100      	movs	r1, #0
    1948:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	3301      	adds	r3, #1
    194e:	60fb      	str	r3, [r7, #12]
    1950:	68fb      	ldr	r3, [r7, #12]
    1952:	2b05      	cmp	r3, #5
    1954:	d9ef      	bls.n	1936 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    1956:	4b06      	ldr	r3, [pc, #24]	; (1970 <_sercom_set_handler+0x5c>)
    1958:	2201      	movs	r2, #1
    195a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    195c:	1dfb      	adds	r3, r7, #7
    195e:	781a      	ldrb	r2, [r3, #0]
    1960:	4b04      	ldr	r3, [pc, #16]	; (1974 <_sercom_set_handler+0x60>)
    1962:	0092      	lsls	r2, r2, #2
    1964:	6839      	ldr	r1, [r7, #0]
    1966:	50d1      	str	r1, [r2, r3]
}
    1968:	46c0      	nop			; (mov r8, r8)
    196a:	46bd      	mov	sp, r7
    196c:	b004      	add	sp, #16
    196e:	bd80      	pop	{r7, pc}
    1970:	200000f6 	.word	0x200000f6
    1974:	200000f8 	.word	0x200000f8
    1978:	00001901 	.word	0x00001901
    197c:	20000130 	.word	0x20000130

00001980 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1980:	b590      	push	{r4, r7, lr}
    1982:	b085      	sub	sp, #20
    1984:	af00      	add	r7, sp, #0
    1986:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1988:	2308      	movs	r3, #8
    198a:	18fb      	adds	r3, r7, r3
    198c:	4a0b      	ldr	r2, [pc, #44]	; (19bc <_sercom_get_interrupt_vector+0x3c>)
    198e:	6811      	ldr	r1, [r2, #0]
    1990:	6019      	str	r1, [r3, #0]
    1992:	8892      	ldrh	r2, [r2, #4]
    1994:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1996:	230f      	movs	r3, #15
    1998:	18fc      	adds	r4, r7, r3
    199a:	687b      	ldr	r3, [r7, #4]
    199c:	0018      	movs	r0, r3
    199e:	4b08      	ldr	r3, [pc, #32]	; (19c0 <_sercom_get_interrupt_vector+0x40>)
    19a0:	4798      	blx	r3
    19a2:	0003      	movs	r3, r0
    19a4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    19a6:	230f      	movs	r3, #15
    19a8:	18fb      	adds	r3, r7, r3
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	2208      	movs	r2, #8
    19ae:	18ba      	adds	r2, r7, r2
    19b0:	5cd3      	ldrb	r3, [r2, r3]
    19b2:	b25b      	sxtb	r3, r3
}
    19b4:	0018      	movs	r0, r3
    19b6:	46bd      	mov	sp, r7
    19b8:	b005      	add	sp, #20
    19ba:	bd90      	pop	{r4, r7, pc}
    19bc:	00002bdc 	.word	0x00002bdc
    19c0:	00000c1d 	.word	0x00000c1d

000019c4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    19c4:	b580      	push	{r7, lr}
    19c6:	af00      	add	r7, sp, #0
    19c8:	4b03      	ldr	r3, [pc, #12]	; (19d8 <SERCOM0_Handler+0x14>)
    19ca:	681b      	ldr	r3, [r3, #0]
    19cc:	2000      	movs	r0, #0
    19ce:	4798      	blx	r3
    19d0:	46c0      	nop			; (mov r8, r8)
    19d2:	46bd      	mov	sp, r7
    19d4:	bd80      	pop	{r7, pc}
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	200000f8 	.word	0x200000f8

000019dc <SERCOM1_Handler>:
    19dc:	b580      	push	{r7, lr}
    19de:	af00      	add	r7, sp, #0
    19e0:	4b03      	ldr	r3, [pc, #12]	; (19f0 <SERCOM1_Handler+0x14>)
    19e2:	685b      	ldr	r3, [r3, #4]
    19e4:	2001      	movs	r0, #1
    19e6:	4798      	blx	r3
    19e8:	46c0      	nop			; (mov r8, r8)
    19ea:	46bd      	mov	sp, r7
    19ec:	bd80      	pop	{r7, pc}
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	200000f8 	.word	0x200000f8

000019f4 <SERCOM2_Handler>:
    19f4:	b580      	push	{r7, lr}
    19f6:	af00      	add	r7, sp, #0
    19f8:	4b03      	ldr	r3, [pc, #12]	; (1a08 <SERCOM2_Handler+0x14>)
    19fa:	689b      	ldr	r3, [r3, #8]
    19fc:	2002      	movs	r0, #2
    19fe:	4798      	blx	r3
    1a00:	46c0      	nop			; (mov r8, r8)
    1a02:	46bd      	mov	sp, r7
    1a04:	bd80      	pop	{r7, pc}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	200000f8 	.word	0x200000f8

00001a0c <SERCOM3_Handler>:
    1a0c:	b580      	push	{r7, lr}
    1a0e:	af00      	add	r7, sp, #0
    1a10:	4b03      	ldr	r3, [pc, #12]	; (1a20 <SERCOM3_Handler+0x14>)
    1a12:	68db      	ldr	r3, [r3, #12]
    1a14:	2003      	movs	r0, #3
    1a16:	4798      	blx	r3
    1a18:	46c0      	nop			; (mov r8, r8)
    1a1a:	46bd      	mov	sp, r7
    1a1c:	bd80      	pop	{r7, pc}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	200000f8 	.word	0x200000f8

00001a24 <SERCOM4_Handler>:
    1a24:	b580      	push	{r7, lr}
    1a26:	af00      	add	r7, sp, #0
    1a28:	4b03      	ldr	r3, [pc, #12]	; (1a38 <SERCOM4_Handler+0x14>)
    1a2a:	691b      	ldr	r3, [r3, #16]
    1a2c:	2004      	movs	r0, #4
    1a2e:	4798      	blx	r3
    1a30:	46c0      	nop			; (mov r8, r8)
    1a32:	46bd      	mov	sp, r7
    1a34:	bd80      	pop	{r7, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	200000f8 	.word	0x200000f8

00001a3c <SERCOM5_Handler>:
    1a3c:	b580      	push	{r7, lr}
    1a3e:	af00      	add	r7, sp, #0
    1a40:	4b03      	ldr	r3, [pc, #12]	; (1a50 <SERCOM5_Handler+0x14>)
    1a42:	695b      	ldr	r3, [r3, #20]
    1a44:	2005      	movs	r0, #5
    1a46:	4798      	blx	r3
    1a48:	46c0      	nop			; (mov r8, r8)
    1a4a:	46bd      	mov	sp, r7
    1a4c:	bd80      	pop	{r7, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	200000f8 	.word	0x200000f8

00001a54 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1a54:	b580      	push	{r7, lr}
    1a56:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1a58:	46c0      	nop			; (mov r8, r8)
    1a5a:	46bd      	mov	sp, r7
    1a5c:	bd80      	pop	{r7, pc}
	...

00001a60 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1a60:	b580      	push	{r7, lr}
    1a62:	b082      	sub	sp, #8
    1a64:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    1a66:	4b10      	ldr	r3, [pc, #64]	; (1aa8 <cpu_irq_enter_critical+0x48>)
    1a68:	681b      	ldr	r3, [r3, #0]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d112      	bne.n	1a94 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a6e:	f3ef 8310 	mrs	r3, PRIMASK
    1a72:	607b      	str	r3, [r7, #4]
  return(result);
    1a74:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    1a76:	2b00      	cmp	r3, #0
    1a78:	d109      	bne.n	1a8e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    1a7a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1a7c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1a80:	4b0a      	ldr	r3, [pc, #40]	; (1aac <cpu_irq_enter_critical+0x4c>)
    1a82:	2200      	movs	r2, #0
    1a84:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1a86:	4b0a      	ldr	r3, [pc, #40]	; (1ab0 <cpu_irq_enter_critical+0x50>)
    1a88:	2201      	movs	r2, #1
    1a8a:	701a      	strb	r2, [r3, #0]
    1a8c:	e002      	b.n	1a94 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1a8e:	4b08      	ldr	r3, [pc, #32]	; (1ab0 <cpu_irq_enter_critical+0x50>)
    1a90:	2200      	movs	r2, #0
    1a92:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1a94:	4b04      	ldr	r3, [pc, #16]	; (1aa8 <cpu_irq_enter_critical+0x48>)
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	1c5a      	adds	r2, r3, #1
    1a9a:	4b03      	ldr	r3, [pc, #12]	; (1aa8 <cpu_irq_enter_critical+0x48>)
    1a9c:	601a      	str	r2, [r3, #0]
}
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	46bd      	mov	sp, r7
    1aa2:	b002      	add	sp, #8
    1aa4:	bd80      	pop	{r7, pc}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	20000110 	.word	0x20000110
    1aac:	20000018 	.word	0x20000018
    1ab0:	20000114 	.word	0x20000114

00001ab4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1ab4:	b580      	push	{r7, lr}
    1ab6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1ab8:	4b0b      	ldr	r3, [pc, #44]	; (1ae8 <cpu_irq_leave_critical+0x34>)
    1aba:	681b      	ldr	r3, [r3, #0]
    1abc:	1e5a      	subs	r2, r3, #1
    1abe:	4b0a      	ldr	r3, [pc, #40]	; (1ae8 <cpu_irq_leave_critical+0x34>)
    1ac0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1ac2:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <cpu_irq_leave_critical+0x34>)
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d10a      	bne.n	1ae0 <cpu_irq_leave_critical+0x2c>
    1aca:	4b08      	ldr	r3, [pc, #32]	; (1aec <cpu_irq_leave_critical+0x38>)
    1acc:	781b      	ldrb	r3, [r3, #0]
    1ace:	b2db      	uxtb	r3, r3
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d005      	beq.n	1ae0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    1ad4:	4b06      	ldr	r3, [pc, #24]	; (1af0 <cpu_irq_leave_critical+0x3c>)
    1ad6:	2201      	movs	r2, #1
    1ad8:	701a      	strb	r2, [r3, #0]
    1ada:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1ade:	b662      	cpsie	i
	}
}
    1ae0:	46c0      	nop			; (mov r8, r8)
    1ae2:	46bd      	mov	sp, r7
    1ae4:	bd80      	pop	{r7, pc}
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	20000110 	.word	0x20000110
    1aec:	20000114 	.word	0x20000114
    1af0:	20000018 	.word	0x20000018

00001af4 <system_gclk_gen_get_config_defaults>:
{
    1af4:	b580      	push	{r7, lr}
    1af6:	b082      	sub	sp, #8
    1af8:	af00      	add	r7, sp, #0
    1afa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	2201      	movs	r2, #1
    1b00:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	2200      	movs	r2, #0
    1b06:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b08:	687b      	ldr	r3, [r7, #4]
    1b0a:	2206      	movs	r2, #6
    1b0c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	2200      	movs	r2, #0
    1b12:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	2200      	movs	r2, #0
    1b18:	725a      	strb	r2, [r3, #9]
}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	46bd      	mov	sp, r7
    1b1e:	b002      	add	sp, #8
    1b20:	bd80      	pop	{r7, pc}

00001b22 <system_clock_source_osc8m_get_config_defaults>:
{
    1b22:	b580      	push	{r7, lr}
    1b24:	b082      	sub	sp, #8
    1b26:	af00      	add	r7, sp, #0
    1b28:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	2203      	movs	r2, #3
    1b2e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	2200      	movs	r2, #0
    1b34:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    1b36:	687b      	ldr	r3, [r7, #4]
    1b38:	2201      	movs	r2, #1
    1b3a:	709a      	strb	r2, [r3, #2]
}
    1b3c:	46c0      	nop			; (mov r8, r8)
    1b3e:	46bd      	mov	sp, r7
    1b40:	b002      	add	sp, #8
    1b42:	bd80      	pop	{r7, pc}

00001b44 <system_cpu_clock_set_divider>:
{
    1b44:	b580      	push	{r7, lr}
    1b46:	b082      	sub	sp, #8
    1b48:	af00      	add	r7, sp, #0
    1b4a:	0002      	movs	r2, r0
    1b4c:	1dfb      	adds	r3, r7, #7
    1b4e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    1b50:	4a03      	ldr	r2, [pc, #12]	; (1b60 <system_cpu_clock_set_divider+0x1c>)
    1b52:	1dfb      	adds	r3, r7, #7
    1b54:	781b      	ldrb	r3, [r3, #0]
    1b56:	7213      	strb	r3, [r2, #8]
}
    1b58:	46c0      	nop			; (mov r8, r8)
    1b5a:	46bd      	mov	sp, r7
    1b5c:	b002      	add	sp, #8
    1b5e:	bd80      	pop	{r7, pc}
    1b60:	40000400 	.word	0x40000400

00001b64 <system_apb_clock_set_divider>:
{
    1b64:	b580      	push	{r7, lr}
    1b66:	b082      	sub	sp, #8
    1b68:	af00      	add	r7, sp, #0
    1b6a:	0002      	movs	r2, r0
    1b6c:	1dfb      	adds	r3, r7, #7
    1b6e:	701a      	strb	r2, [r3, #0]
    1b70:	1dbb      	adds	r3, r7, #6
    1b72:	1c0a      	adds	r2, r1, #0
    1b74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1b76:	1dfb      	adds	r3, r7, #7
    1b78:	781b      	ldrb	r3, [r3, #0]
    1b7a:	2b01      	cmp	r3, #1
    1b7c:	d008      	beq.n	1b90 <system_apb_clock_set_divider+0x2c>
    1b7e:	2b02      	cmp	r3, #2
    1b80:	d00b      	beq.n	1b9a <system_apb_clock_set_divider+0x36>
    1b82:	2b00      	cmp	r3, #0
    1b84:	d10e      	bne.n	1ba4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    1b86:	4a0b      	ldr	r2, [pc, #44]	; (1bb4 <system_apb_clock_set_divider+0x50>)
    1b88:	1dbb      	adds	r3, r7, #6
    1b8a:	781b      	ldrb	r3, [r3, #0]
    1b8c:	7253      	strb	r3, [r2, #9]
			break;
    1b8e:	e00b      	b.n	1ba8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    1b90:	4a08      	ldr	r2, [pc, #32]	; (1bb4 <system_apb_clock_set_divider+0x50>)
    1b92:	1dbb      	adds	r3, r7, #6
    1b94:	781b      	ldrb	r3, [r3, #0]
    1b96:	7293      	strb	r3, [r2, #10]
			break;
    1b98:	e006      	b.n	1ba8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    1b9a:	4a06      	ldr	r2, [pc, #24]	; (1bb4 <system_apb_clock_set_divider+0x50>)
    1b9c:	1dbb      	adds	r3, r7, #6
    1b9e:	781b      	ldrb	r3, [r3, #0]
    1ba0:	72d3      	strb	r3, [r2, #11]
			break;
    1ba2:	e001      	b.n	1ba8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    1ba4:	2317      	movs	r3, #23
    1ba6:	e000      	b.n	1baa <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    1ba8:	2300      	movs	r3, #0
}
    1baa:	0018      	movs	r0, r3
    1bac:	46bd      	mov	sp, r7
    1bae:	b002      	add	sp, #8
    1bb0:	bd80      	pop	{r7, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	40000400 	.word	0x40000400

00001bb8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1bb8:	b580      	push	{r7, lr}
    1bba:	b082      	sub	sp, #8
    1bbc:	af00      	add	r7, sp, #0
    1bbe:	0002      	movs	r2, r0
    1bc0:	1dfb      	adds	r3, r7, #7
    1bc2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1bc4:	4a08      	ldr	r2, [pc, #32]	; (1be8 <system_flash_set_waitstates+0x30>)
    1bc6:	1dfb      	adds	r3, r7, #7
    1bc8:	781b      	ldrb	r3, [r3, #0]
    1bca:	210f      	movs	r1, #15
    1bcc:	400b      	ands	r3, r1
    1bce:	b2d9      	uxtb	r1, r3
    1bd0:	6853      	ldr	r3, [r2, #4]
    1bd2:	200f      	movs	r0, #15
    1bd4:	4001      	ands	r1, r0
    1bd6:	0049      	lsls	r1, r1, #1
    1bd8:	201e      	movs	r0, #30
    1bda:	4383      	bics	r3, r0
    1bdc:	430b      	orrs	r3, r1
    1bde:	6053      	str	r3, [r2, #4]
}
    1be0:	46c0      	nop			; (mov r8, r8)
    1be2:	46bd      	mov	sp, r7
    1be4:	b002      	add	sp, #8
    1be6:	bd80      	pop	{r7, pc}
    1be8:	41004000 	.word	0x41004000

00001bec <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1bec:	b580      	push	{r7, lr}
    1bee:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bf0:	46c0      	nop			; (mov r8, r8)
    1bf2:	4b04      	ldr	r3, [pc, #16]	; (1c04 <_system_dfll_wait_for_sync+0x18>)
    1bf4:	68db      	ldr	r3, [r3, #12]
    1bf6:	2210      	movs	r2, #16
    1bf8:	4013      	ands	r3, r2
    1bfa:	d0fa      	beq.n	1bf2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1bfc:	46c0      	nop			; (mov r8, r8)
    1bfe:	46bd      	mov	sp, r7
    1c00:	bd80      	pop	{r7, pc}
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	40000800 	.word	0x40000800

00001c08 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1c0c:	4b0c      	ldr	r3, [pc, #48]	; (1c40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1c0e:	2202      	movs	r2, #2
    1c10:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1c12:	4b0c      	ldr	r3, [pc, #48]	; (1c44 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1c14:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1c16:	4a0a      	ldr	r2, [pc, #40]	; (1c40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1c18:	4b0b      	ldr	r3, [pc, #44]	; (1c48 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1c1a:	689b      	ldr	r3, [r3, #8]
    1c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1c1e:	4a08      	ldr	r2, [pc, #32]	; (1c40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1c20:	4b09      	ldr	r3, [pc, #36]	; (1c48 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1c22:	685b      	ldr	r3, [r3, #4]
    1c24:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1c26:	4b06      	ldr	r3, [pc, #24]	; (1c40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1c28:	2200      	movs	r2, #0
    1c2a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1c2c:	4b05      	ldr	r3, [pc, #20]	; (1c44 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1c2e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1c30:	4a03      	ldr	r2, [pc, #12]	; (1c40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1c32:	4b05      	ldr	r3, [pc, #20]	; (1c48 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1c34:	681b      	ldr	r3, [r3, #0]
    1c36:	b29b      	uxth	r3, r3
    1c38:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	46bd      	mov	sp, r7
    1c3e:	bd80      	pop	{r7, pc}
    1c40:	40000800 	.word	0x40000800
    1c44:	00001bed 	.word	0x00001bed
    1c48:	20000118 	.word	0x20000118

00001c4c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1c4c:	b580      	push	{r7, lr}
    1c4e:	b082      	sub	sp, #8
    1c50:	af00      	add	r7, sp, #0
    1c52:	0002      	movs	r2, r0
    1c54:	1dfb      	adds	r3, r7, #7
    1c56:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1c58:	1dfb      	adds	r3, r7, #7
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	2b08      	cmp	r3, #8
    1c5e:	d840      	bhi.n	1ce2 <system_clock_source_get_hz+0x96>
    1c60:	009a      	lsls	r2, r3, #2
    1c62:	4b22      	ldr	r3, [pc, #136]	; (1cec <system_clock_source_get_hz+0xa0>)
    1c64:	18d3      	adds	r3, r2, r3
    1c66:	681b      	ldr	r3, [r3, #0]
    1c68:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1c6a:	4b21      	ldr	r3, [pc, #132]	; (1cf0 <system_clock_source_get_hz+0xa4>)
    1c6c:	691b      	ldr	r3, [r3, #16]
    1c6e:	e039      	b.n	1ce4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1c70:	4b20      	ldr	r3, [pc, #128]	; (1cf4 <system_clock_source_get_hz+0xa8>)
    1c72:	6a1b      	ldr	r3, [r3, #32]
    1c74:	059b      	lsls	r3, r3, #22
    1c76:	0f9b      	lsrs	r3, r3, #30
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	001a      	movs	r2, r3
    1c7c:	4b1e      	ldr	r3, [pc, #120]	; (1cf8 <system_clock_source_get_hz+0xac>)
    1c7e:	40d3      	lsrs	r3, r2
    1c80:	e030      	b.n	1ce4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1c82:	2380      	movs	r3, #128	; 0x80
    1c84:	021b      	lsls	r3, r3, #8
    1c86:	e02d      	b.n	1ce4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1c88:	2380      	movs	r3, #128	; 0x80
    1c8a:	021b      	lsls	r3, r3, #8
    1c8c:	e02a      	b.n	1ce4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1c8e:	4b18      	ldr	r3, [pc, #96]	; (1cf0 <system_clock_source_get_hz+0xa4>)
    1c90:	695b      	ldr	r3, [r3, #20]
    1c92:	e027      	b.n	1ce4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1c94:	4b16      	ldr	r3, [pc, #88]	; (1cf0 <system_clock_source_get_hz+0xa4>)
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	2202      	movs	r2, #2
    1c9a:	4013      	ands	r3, r2
    1c9c:	d101      	bne.n	1ca2 <system_clock_source_get_hz+0x56>
			return 0;
    1c9e:	2300      	movs	r3, #0
    1ca0:	e020      	b.n	1ce4 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1ca2:	4b16      	ldr	r3, [pc, #88]	; (1cfc <system_clock_source_get_hz+0xb0>)
    1ca4:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1ca6:	4b12      	ldr	r3, [pc, #72]	; (1cf0 <system_clock_source_get_hz+0xa4>)
    1ca8:	681b      	ldr	r3, [r3, #0]
    1caa:	2204      	movs	r2, #4
    1cac:	4013      	ands	r3, r2
    1cae:	d009      	beq.n	1cc4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1cb0:	2000      	movs	r0, #0
    1cb2:	4b13      	ldr	r3, [pc, #76]	; (1d00 <system_clock_source_get_hz+0xb4>)
    1cb4:	4798      	blx	r3
    1cb6:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1cb8:	4b0d      	ldr	r3, [pc, #52]	; (1cf0 <system_clock_source_get_hz+0xa4>)
    1cba:	689b      	ldr	r3, [r3, #8]
    1cbc:	041b      	lsls	r3, r3, #16
    1cbe:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1cc0:	4353      	muls	r3, r2
    1cc2:	e00f      	b.n	1ce4 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    1cc4:	4b0f      	ldr	r3, [pc, #60]	; (1d04 <system_clock_source_get_hz+0xb8>)
    1cc6:	e00d      	b.n	1ce4 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1cc8:	4a0a      	ldr	r2, [pc, #40]	; (1cf4 <system_clock_source_get_hz+0xa8>)
    1cca:	2350      	movs	r3, #80	; 0x50
    1ccc:	5cd3      	ldrb	r3, [r2, r3]
    1cce:	b2db      	uxtb	r3, r3
    1cd0:	001a      	movs	r2, r3
    1cd2:	2304      	movs	r3, #4
    1cd4:	4013      	ands	r3, r2
    1cd6:	d101      	bne.n	1cdc <system_clock_source_get_hz+0x90>
			return 0;
    1cd8:	2300      	movs	r3, #0
    1cda:	e003      	b.n	1ce4 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    1cdc:	4b04      	ldr	r3, [pc, #16]	; (1cf0 <system_clock_source_get_hz+0xa4>)
    1cde:	68db      	ldr	r3, [r3, #12]
    1ce0:	e000      	b.n	1ce4 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    1ce2:	2300      	movs	r3, #0
	}
}
    1ce4:	0018      	movs	r0, r3
    1ce6:	46bd      	mov	sp, r7
    1ce8:	b002      	add	sp, #8
    1cea:	bd80      	pop	{r7, pc}
    1cec:	00002be4 	.word	0x00002be4
    1cf0:	20000118 	.word	0x20000118
    1cf4:	40000800 	.word	0x40000800
    1cf8:	007a1200 	.word	0x007a1200
    1cfc:	00001bed 	.word	0x00001bed
    1d00:	00002389 	.word	0x00002389
    1d04:	02dc6c00 	.word	0x02dc6c00

00001d08 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1d08:	b580      	push	{r7, lr}
    1d0a:	b084      	sub	sp, #16
    1d0c:	af00      	add	r7, sp, #0
    1d0e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1d10:	4b1a      	ldr	r3, [pc, #104]	; (1d7c <system_clock_source_osc8m_set_config+0x74>)
    1d12:	6a1b      	ldr	r3, [r3, #32]
    1d14:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1d16:	687b      	ldr	r3, [r7, #4]
    1d18:	781b      	ldrb	r3, [r3, #0]
    1d1a:	1c1a      	adds	r2, r3, #0
    1d1c:	2303      	movs	r3, #3
    1d1e:	4013      	ands	r3, r2
    1d20:	b2da      	uxtb	r2, r3
    1d22:	230d      	movs	r3, #13
    1d24:	18fb      	adds	r3, r7, r3
    1d26:	2103      	movs	r1, #3
    1d28:	400a      	ands	r2, r1
    1d2a:	0010      	movs	r0, r2
    1d2c:	781a      	ldrb	r2, [r3, #0]
    1d2e:	2103      	movs	r1, #3
    1d30:	438a      	bics	r2, r1
    1d32:	1c11      	adds	r1, r2, #0
    1d34:	1c02      	adds	r2, r0, #0
    1d36:	430a      	orrs	r2, r1
    1d38:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1d3a:	687b      	ldr	r3, [r7, #4]
    1d3c:	789a      	ldrb	r2, [r3, #2]
    1d3e:	230c      	movs	r3, #12
    1d40:	18fb      	adds	r3, r7, r3
    1d42:	01d0      	lsls	r0, r2, #7
    1d44:	781a      	ldrb	r2, [r3, #0]
    1d46:	217f      	movs	r1, #127	; 0x7f
    1d48:	400a      	ands	r2, r1
    1d4a:	1c11      	adds	r1, r2, #0
    1d4c:	1c02      	adds	r2, r0, #0
    1d4e:	430a      	orrs	r2, r1
    1d50:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d52:	687b      	ldr	r3, [r7, #4]
    1d54:	785a      	ldrb	r2, [r3, #1]
    1d56:	230c      	movs	r3, #12
    1d58:	18fb      	adds	r3, r7, r3
    1d5a:	2101      	movs	r1, #1
    1d5c:	400a      	ands	r2, r1
    1d5e:	0190      	lsls	r0, r2, #6
    1d60:	781a      	ldrb	r2, [r3, #0]
    1d62:	2140      	movs	r1, #64	; 0x40
    1d64:	438a      	bics	r2, r1
    1d66:	1c11      	adds	r1, r2, #0
    1d68:	1c02      	adds	r2, r0, #0
    1d6a:	430a      	orrs	r2, r1
    1d6c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1d6e:	4b03      	ldr	r3, [pc, #12]	; (1d7c <system_clock_source_osc8m_set_config+0x74>)
    1d70:	68fa      	ldr	r2, [r7, #12]
    1d72:	621a      	str	r2, [r3, #32]
}
    1d74:	46c0      	nop			; (mov r8, r8)
    1d76:	46bd      	mov	sp, r7
    1d78:	b004      	add	sp, #16
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	40000800 	.word	0x40000800

00001d80 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1d80:	b580      	push	{r7, lr}
    1d82:	b082      	sub	sp, #8
    1d84:	af00      	add	r7, sp, #0
    1d86:	0002      	movs	r2, r0
    1d88:	1dfb      	adds	r3, r7, #7
    1d8a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1d8c:	1dfb      	adds	r3, r7, #7
    1d8e:	781b      	ldrb	r3, [r3, #0]
    1d90:	2b08      	cmp	r3, #8
    1d92:	d83b      	bhi.n	1e0c <system_clock_source_enable+0x8c>
    1d94:	009a      	lsls	r2, r3, #2
    1d96:	4b21      	ldr	r3, [pc, #132]	; (1e1c <system_clock_source_enable+0x9c>)
    1d98:	18d3      	adds	r3, r2, r3
    1d9a:	681b      	ldr	r3, [r3, #0]
    1d9c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d9e:	4b20      	ldr	r3, [pc, #128]	; (1e20 <system_clock_source_enable+0xa0>)
    1da0:	4a1f      	ldr	r2, [pc, #124]	; (1e20 <system_clock_source_enable+0xa0>)
    1da2:	6a12      	ldr	r2, [r2, #32]
    1da4:	2102      	movs	r1, #2
    1da6:	430a      	orrs	r2, r1
    1da8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1daa:	2300      	movs	r3, #0
    1dac:	e031      	b.n	1e12 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1dae:	4b1c      	ldr	r3, [pc, #112]	; (1e20 <system_clock_source_enable+0xa0>)
    1db0:	4a1b      	ldr	r2, [pc, #108]	; (1e20 <system_clock_source_enable+0xa0>)
    1db2:	6992      	ldr	r2, [r2, #24]
    1db4:	2102      	movs	r1, #2
    1db6:	430a      	orrs	r2, r1
    1db8:	619a      	str	r2, [r3, #24]
		break;
    1dba:	e029      	b.n	1e10 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1dbc:	4a18      	ldr	r2, [pc, #96]	; (1e20 <system_clock_source_enable+0xa0>)
    1dbe:	4b18      	ldr	r3, [pc, #96]	; (1e20 <system_clock_source_enable+0xa0>)
    1dc0:	8a1b      	ldrh	r3, [r3, #16]
    1dc2:	b29b      	uxth	r3, r3
    1dc4:	2102      	movs	r1, #2
    1dc6:	430b      	orrs	r3, r1
    1dc8:	b29b      	uxth	r3, r3
    1dca:	8213      	strh	r3, [r2, #16]
		break;
    1dcc:	e020      	b.n	1e10 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1dce:	4a14      	ldr	r2, [pc, #80]	; (1e20 <system_clock_source_enable+0xa0>)
    1dd0:	4b13      	ldr	r3, [pc, #76]	; (1e20 <system_clock_source_enable+0xa0>)
    1dd2:	8a9b      	ldrh	r3, [r3, #20]
    1dd4:	b29b      	uxth	r3, r3
    1dd6:	2102      	movs	r1, #2
    1dd8:	430b      	orrs	r3, r1
    1dda:	b29b      	uxth	r3, r3
    1ddc:	8293      	strh	r3, [r2, #20]
		break;
    1dde:	e017      	b.n	1e10 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1de0:	4b10      	ldr	r3, [pc, #64]	; (1e24 <system_clock_source_enable+0xa4>)
    1de2:	681b      	ldr	r3, [r3, #0]
    1de4:	2202      	movs	r2, #2
    1de6:	431a      	orrs	r2, r3
    1de8:	4b0e      	ldr	r3, [pc, #56]	; (1e24 <system_clock_source_enable+0xa4>)
    1dea:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1dec:	4b0e      	ldr	r3, [pc, #56]	; (1e28 <system_clock_source_enable+0xa8>)
    1dee:	4798      	blx	r3
		break;
    1df0:	e00e      	b.n	1e10 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1df2:	4a0b      	ldr	r2, [pc, #44]	; (1e20 <system_clock_source_enable+0xa0>)
    1df4:	490a      	ldr	r1, [pc, #40]	; (1e20 <system_clock_source_enable+0xa0>)
    1df6:	2344      	movs	r3, #68	; 0x44
    1df8:	5ccb      	ldrb	r3, [r1, r3]
    1dfa:	b2db      	uxtb	r3, r3
    1dfc:	2102      	movs	r1, #2
    1dfe:	430b      	orrs	r3, r1
    1e00:	b2d9      	uxtb	r1, r3
    1e02:	2344      	movs	r3, #68	; 0x44
    1e04:	54d1      	strb	r1, [r2, r3]
		break;
    1e06:	e003      	b.n	1e10 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1e08:	2300      	movs	r3, #0
    1e0a:	e002      	b.n	1e12 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e0c:	2317      	movs	r3, #23
    1e0e:	e000      	b.n	1e12 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1e10:	2300      	movs	r3, #0
}
    1e12:	0018      	movs	r0, r3
    1e14:	46bd      	mov	sp, r7
    1e16:	b002      	add	sp, #8
    1e18:	bd80      	pop	{r7, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	00002c08 	.word	0x00002c08
    1e20:	40000800 	.word	0x40000800
    1e24:	20000118 	.word	0x20000118
    1e28:	00001c09 	.word	0x00001c09

00001e2c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1e32:	003b      	movs	r3, r7
    1e34:	2201      	movs	r2, #1
    1e36:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1e38:	2300      	movs	r3, #0
    1e3a:	607b      	str	r3, [r7, #4]
    1e3c:	e009      	b.n	1e52 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	b2db      	uxtb	r3, r3
    1e42:	003a      	movs	r2, r7
    1e44:	0011      	movs	r1, r2
    1e46:	0018      	movs	r0, r3
    1e48:	4b05      	ldr	r3, [pc, #20]	; (1e60 <_switch_peripheral_gclk+0x34>)
    1e4a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	3301      	adds	r3, #1
    1e50:	607b      	str	r3, [r7, #4]
    1e52:	687b      	ldr	r3, [r7, #4]
    1e54:	2b24      	cmp	r3, #36	; 0x24
    1e56:	d9f2      	bls.n	1e3e <_switch_peripheral_gclk+0x12>
	}
}
    1e58:	46c0      	nop			; (mov r8, r8)
    1e5a:	46bd      	mov	sp, r7
    1e5c:	b002      	add	sp, #8
    1e5e:	bd80      	pop	{r7, pc}
    1e60:	00002265 	.word	0x00002265

00001e64 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1e64:	b580      	push	{r7, lr}
    1e66:	b0a0      	sub	sp, #128	; 0x80
    1e68:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1e6a:	4b27      	ldr	r3, [pc, #156]	; (1f08 <system_clock_init+0xa4>)
    1e6c:	22c2      	movs	r2, #194	; 0xc2
    1e6e:	00d2      	lsls	r2, r2, #3
    1e70:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1e72:	2000      	movs	r0, #0
    1e74:	4b25      	ldr	r3, [pc, #148]	; (1f0c <system_clock_init+0xa8>)
    1e76:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1e78:	4b25      	ldr	r3, [pc, #148]	; (1f10 <system_clock_init+0xac>)
    1e7a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    1e7c:	237c      	movs	r3, #124	; 0x7c
    1e7e:	18fb      	adds	r3, r7, r3
    1e80:	0018      	movs	r0, r3
    1e82:	4b24      	ldr	r3, [pc, #144]	; (1f14 <system_clock_init+0xb0>)
    1e84:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e86:	237c      	movs	r3, #124	; 0x7c
    1e88:	18fb      	adds	r3, r7, r3
    1e8a:	2200      	movs	r2, #0
    1e8c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1e8e:	237c      	movs	r3, #124	; 0x7c
    1e90:	18fb      	adds	r3, r7, r3
    1e92:	2201      	movs	r2, #1
    1e94:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1e96:	237c      	movs	r3, #124	; 0x7c
    1e98:	18fb      	adds	r3, r7, r3
    1e9a:	2200      	movs	r2, #0
    1e9c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e9e:	237c      	movs	r3, #124	; 0x7c
    1ea0:	18fb      	adds	r3, r7, r3
    1ea2:	0018      	movs	r0, r3
    1ea4:	4b1c      	ldr	r3, [pc, #112]	; (1f18 <system_clock_init+0xb4>)
    1ea6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1ea8:	2006      	movs	r0, #6
    1eaa:	4b1c      	ldr	r3, [pc, #112]	; (1f1c <system_clock_init+0xb8>)
    1eac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1eae:	4b1c      	ldr	r3, [pc, #112]	; (1f20 <system_clock_init+0xbc>)
    1eb0:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1eb2:	2000      	movs	r0, #0
    1eb4:	4b1b      	ldr	r3, [pc, #108]	; (1f24 <system_clock_init+0xc0>)
    1eb6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1eb8:	2100      	movs	r1, #0
    1eba:	2000      	movs	r0, #0
    1ebc:	4b1a      	ldr	r3, [pc, #104]	; (1f28 <system_clock_init+0xc4>)
    1ebe:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1ec0:	2100      	movs	r1, #0
    1ec2:	2001      	movs	r0, #1
    1ec4:	4b18      	ldr	r3, [pc, #96]	; (1f28 <system_clock_init+0xc4>)
    1ec6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    1ec8:	2100      	movs	r1, #0
    1eca:	2002      	movs	r0, #2
    1ecc:	4b16      	ldr	r3, [pc, #88]	; (1f28 <system_clock_init+0xc4>)
    1ece:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1ed0:	1d3b      	adds	r3, r7, #4
    1ed2:	0018      	movs	r0, r3
    1ed4:	4b15      	ldr	r3, [pc, #84]	; (1f2c <system_clock_init+0xc8>)
    1ed6:	4798      	blx	r3
    1ed8:	1d3b      	adds	r3, r7, #4
    1eda:	2206      	movs	r2, #6
    1edc:	701a      	strb	r2, [r3, #0]
    1ede:	1d3b      	adds	r3, r7, #4
    1ee0:	2201      	movs	r2, #1
    1ee2:	605a      	str	r2, [r3, #4]
    1ee4:	1d3b      	adds	r3, r7, #4
    1ee6:	2200      	movs	r2, #0
    1ee8:	721a      	strb	r2, [r3, #8]
    1eea:	1d3b      	adds	r3, r7, #4
    1eec:	2200      	movs	r2, #0
    1eee:	725a      	strb	r2, [r3, #9]
    1ef0:	1d3b      	adds	r3, r7, #4
    1ef2:	0019      	movs	r1, r3
    1ef4:	2000      	movs	r0, #0
    1ef6:	4b0e      	ldr	r3, [pc, #56]	; (1f30 <system_clock_init+0xcc>)
    1ef8:	4798      	blx	r3
    1efa:	2000      	movs	r0, #0
    1efc:	4b0d      	ldr	r3, [pc, #52]	; (1f34 <system_clock_init+0xd0>)
    1efe:	4798      	blx	r3
#endif
}
    1f00:	46c0      	nop			; (mov r8, r8)
    1f02:	46bd      	mov	sp, r7
    1f04:	b020      	add	sp, #128	; 0x80
    1f06:	bd80      	pop	{r7, pc}
    1f08:	40000800 	.word	0x40000800
    1f0c:	00001bb9 	.word	0x00001bb9
    1f10:	00001e2d 	.word	0x00001e2d
    1f14:	00001b23 	.word	0x00001b23
    1f18:	00001d09 	.word	0x00001d09
    1f1c:	00001d81 	.word	0x00001d81
    1f20:	00001fdd 	.word	0x00001fdd
    1f24:	00001b45 	.word	0x00001b45
    1f28:	00001b65 	.word	0x00001b65
    1f2c:	00001af5 	.word	0x00001af5
    1f30:	0000200d 	.word	0x0000200d
    1f34:	00002131 	.word	0x00002131

00001f38 <system_apb_clock_set_mask>:
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	b082      	sub	sp, #8
    1f3c:	af00      	add	r7, sp, #0
    1f3e:	0002      	movs	r2, r0
    1f40:	6039      	str	r1, [r7, #0]
    1f42:	1dfb      	adds	r3, r7, #7
    1f44:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1f46:	1dfb      	adds	r3, r7, #7
    1f48:	781b      	ldrb	r3, [r3, #0]
    1f4a:	2b01      	cmp	r3, #1
    1f4c:	d00a      	beq.n	1f64 <system_apb_clock_set_mask+0x2c>
    1f4e:	2b02      	cmp	r3, #2
    1f50:	d00f      	beq.n	1f72 <system_apb_clock_set_mask+0x3a>
    1f52:	2b00      	cmp	r3, #0
    1f54:	d114      	bne.n	1f80 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1f56:	4b0e      	ldr	r3, [pc, #56]	; (1f90 <system_apb_clock_set_mask+0x58>)
    1f58:	4a0d      	ldr	r2, [pc, #52]	; (1f90 <system_apb_clock_set_mask+0x58>)
    1f5a:	6991      	ldr	r1, [r2, #24]
    1f5c:	683a      	ldr	r2, [r7, #0]
    1f5e:	430a      	orrs	r2, r1
    1f60:	619a      	str	r2, [r3, #24]
			break;
    1f62:	e00f      	b.n	1f84 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1f64:	4b0a      	ldr	r3, [pc, #40]	; (1f90 <system_apb_clock_set_mask+0x58>)
    1f66:	4a0a      	ldr	r2, [pc, #40]	; (1f90 <system_apb_clock_set_mask+0x58>)
    1f68:	69d1      	ldr	r1, [r2, #28]
    1f6a:	683a      	ldr	r2, [r7, #0]
    1f6c:	430a      	orrs	r2, r1
    1f6e:	61da      	str	r2, [r3, #28]
			break;
    1f70:	e008      	b.n	1f84 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1f72:	4b07      	ldr	r3, [pc, #28]	; (1f90 <system_apb_clock_set_mask+0x58>)
    1f74:	4a06      	ldr	r2, [pc, #24]	; (1f90 <system_apb_clock_set_mask+0x58>)
    1f76:	6a11      	ldr	r1, [r2, #32]
    1f78:	683a      	ldr	r2, [r7, #0]
    1f7a:	430a      	orrs	r2, r1
    1f7c:	621a      	str	r2, [r3, #32]
			break;
    1f7e:	e001      	b.n	1f84 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1f80:	2317      	movs	r3, #23
    1f82:	e000      	b.n	1f86 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1f84:	2300      	movs	r3, #0
}
    1f86:	0018      	movs	r0, r3
    1f88:	46bd      	mov	sp, r7
    1f8a:	b002      	add	sp, #8
    1f8c:	bd80      	pop	{r7, pc}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	40000400 	.word	0x40000400

00001f94 <system_interrupt_enter_critical_section>:
{
    1f94:	b580      	push	{r7, lr}
    1f96:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1f98:	4b02      	ldr	r3, [pc, #8]	; (1fa4 <system_interrupt_enter_critical_section+0x10>)
    1f9a:	4798      	blx	r3
}
    1f9c:	46c0      	nop			; (mov r8, r8)
    1f9e:	46bd      	mov	sp, r7
    1fa0:	bd80      	pop	{r7, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	00001a61 	.word	0x00001a61

00001fa8 <system_interrupt_leave_critical_section>:
{
    1fa8:	b580      	push	{r7, lr}
    1faa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1fac:	4b02      	ldr	r3, [pc, #8]	; (1fb8 <system_interrupt_leave_critical_section+0x10>)
    1fae:	4798      	blx	r3
}
    1fb0:	46c0      	nop			; (mov r8, r8)
    1fb2:	46bd      	mov	sp, r7
    1fb4:	bd80      	pop	{r7, pc}
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	00001ab5 	.word	0x00001ab5

00001fbc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    1fbc:	b580      	push	{r7, lr}
    1fbe:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fc0:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <system_gclk_is_syncing+0x1c>)
    1fc2:	785b      	ldrb	r3, [r3, #1]
    1fc4:	b2db      	uxtb	r3, r3
    1fc6:	b25b      	sxtb	r3, r3
    1fc8:	2b00      	cmp	r3, #0
    1fca:	da01      	bge.n	1fd0 <system_gclk_is_syncing+0x14>
		return true;
    1fcc:	2301      	movs	r3, #1
    1fce:	e000      	b.n	1fd2 <system_gclk_is_syncing+0x16>
	}

	return false;
    1fd0:	2300      	movs	r3, #0
}
    1fd2:	0018      	movs	r0, r3
    1fd4:	46bd      	mov	sp, r7
    1fd6:	bd80      	pop	{r7, pc}
    1fd8:	40000c00 	.word	0x40000c00

00001fdc <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1fdc:	b580      	push	{r7, lr}
    1fde:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1fe0:	2108      	movs	r1, #8
    1fe2:	2000      	movs	r0, #0
    1fe4:	4b07      	ldr	r3, [pc, #28]	; (2004 <STACK_SIZE+0x4>)
    1fe6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1fe8:	4b07      	ldr	r3, [pc, #28]	; (2008 <STACK_SIZE+0x8>)
    1fea:	2201      	movs	r2, #1
    1fec:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	4b05      	ldr	r3, [pc, #20]	; (2008 <STACK_SIZE+0x8>)
    1ff2:	781b      	ldrb	r3, [r3, #0]
    1ff4:	b2db      	uxtb	r3, r3
    1ff6:	001a      	movs	r2, r3
    1ff8:	2301      	movs	r3, #1
    1ffa:	4013      	ands	r3, r2
    1ffc:	d1f8      	bne.n	1ff0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	46bd      	mov	sp, r7
    2002:	bd80      	pop	{r7, pc}
    2004:	00001f39 	.word	0x00001f39
    2008:	40000c00 	.word	0x40000c00

0000200c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    200c:	b580      	push	{r7, lr}
    200e:	b086      	sub	sp, #24
    2010:	af00      	add	r7, sp, #0
    2012:	0002      	movs	r2, r0
    2014:	6039      	str	r1, [r7, #0]
    2016:	1dfb      	adds	r3, r7, #7
    2018:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    201a:	1dfb      	adds	r3, r7, #7
    201c:	781b      	ldrb	r3, [r3, #0]
    201e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    2020:	1dfb      	adds	r3, r7, #7
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2026:	683b      	ldr	r3, [r7, #0]
    2028:	781b      	ldrb	r3, [r3, #0]
    202a:	021b      	lsls	r3, r3, #8
    202c:	001a      	movs	r2, r3
    202e:	697b      	ldr	r3, [r7, #20]
    2030:	4313      	orrs	r3, r2
    2032:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2034:	683b      	ldr	r3, [r7, #0]
    2036:	785b      	ldrb	r3, [r3, #1]
    2038:	2b00      	cmp	r3, #0
    203a:	d004      	beq.n	2046 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    203c:	697b      	ldr	r3, [r7, #20]
    203e:	2280      	movs	r2, #128	; 0x80
    2040:	02d2      	lsls	r2, r2, #11
    2042:	4313      	orrs	r3, r2
    2044:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2046:	683b      	ldr	r3, [r7, #0]
    2048:	7a5b      	ldrb	r3, [r3, #9]
    204a:	2b00      	cmp	r3, #0
    204c:	d004      	beq.n	2058 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    204e:	697b      	ldr	r3, [r7, #20]
    2050:	2280      	movs	r2, #128	; 0x80
    2052:	0312      	lsls	r2, r2, #12
    2054:	4313      	orrs	r3, r2
    2056:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2058:	683b      	ldr	r3, [r7, #0]
    205a:	685b      	ldr	r3, [r3, #4]
    205c:	2b01      	cmp	r3, #1
    205e:	d92c      	bls.n	20ba <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2060:	683b      	ldr	r3, [r7, #0]
    2062:	685a      	ldr	r2, [r3, #4]
    2064:	683b      	ldr	r3, [r7, #0]
    2066:	685b      	ldr	r3, [r3, #4]
    2068:	3b01      	subs	r3, #1
    206a:	4013      	ands	r3, r2
    206c:	d11a      	bne.n	20a4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    206e:	2300      	movs	r3, #0
    2070:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2072:	2302      	movs	r3, #2
    2074:	60bb      	str	r3, [r7, #8]
    2076:	e005      	b.n	2084 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    2078:	68fb      	ldr	r3, [r7, #12]
    207a:	3301      	adds	r3, #1
    207c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    207e:	68bb      	ldr	r3, [r7, #8]
    2080:	005b      	lsls	r3, r3, #1
    2082:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    2084:	683b      	ldr	r3, [r7, #0]
    2086:	685a      	ldr	r2, [r3, #4]
    2088:	68bb      	ldr	r3, [r7, #8]
    208a:	429a      	cmp	r2, r3
    208c:	d8f4      	bhi.n	2078 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    208e:	68fb      	ldr	r3, [r7, #12]
    2090:	021b      	lsls	r3, r3, #8
    2092:	693a      	ldr	r2, [r7, #16]
    2094:	4313      	orrs	r3, r2
    2096:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2098:	697b      	ldr	r3, [r7, #20]
    209a:	2280      	movs	r2, #128	; 0x80
    209c:	0352      	lsls	r2, r2, #13
    209e:	4313      	orrs	r3, r2
    20a0:	617b      	str	r3, [r7, #20]
    20a2:	e00a      	b.n	20ba <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    20a4:	683b      	ldr	r3, [r7, #0]
    20a6:	685b      	ldr	r3, [r3, #4]
    20a8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    20aa:	693a      	ldr	r2, [r7, #16]
    20ac:	4313      	orrs	r3, r2
    20ae:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    20b0:	697b      	ldr	r3, [r7, #20]
    20b2:	2280      	movs	r2, #128	; 0x80
    20b4:	0292      	lsls	r2, r2, #10
    20b6:	4313      	orrs	r3, r2
    20b8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    20ba:	683b      	ldr	r3, [r7, #0]
    20bc:	7a1b      	ldrb	r3, [r3, #8]
    20be:	2b00      	cmp	r3, #0
    20c0:	d004      	beq.n	20cc <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    20c2:	697b      	ldr	r3, [r7, #20]
    20c4:	2280      	movs	r2, #128	; 0x80
    20c6:	0392      	lsls	r2, r2, #14
    20c8:	4313      	orrs	r3, r2
    20ca:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    20cc:	46c0      	nop			; (mov r8, r8)
    20ce:	4b13      	ldr	r3, [pc, #76]	; (211c <system_gclk_gen_set_config+0x110>)
    20d0:	4798      	blx	r3
    20d2:	1e03      	subs	r3, r0, #0
    20d4:	d1fb      	bne.n	20ce <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    20d6:	4b12      	ldr	r3, [pc, #72]	; (2120 <system_gclk_gen_set_config+0x114>)
    20d8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    20da:	4a12      	ldr	r2, [pc, #72]	; (2124 <system_gclk_gen_set_config+0x118>)
    20dc:	1dfb      	adds	r3, r7, #7
    20de:	781b      	ldrb	r3, [r3, #0]
    20e0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	4b0d      	ldr	r3, [pc, #52]	; (211c <system_gclk_gen_set_config+0x110>)
    20e6:	4798      	blx	r3
    20e8:	1e03      	subs	r3, r0, #0
    20ea:	d1fb      	bne.n	20e4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    20ec:	4b0e      	ldr	r3, [pc, #56]	; (2128 <system_gclk_gen_set_config+0x11c>)
    20ee:	693a      	ldr	r2, [r7, #16]
    20f0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	4b09      	ldr	r3, [pc, #36]	; (211c <system_gclk_gen_set_config+0x110>)
    20f6:	4798      	blx	r3
    20f8:	1e03      	subs	r3, r0, #0
    20fa:	d1fb      	bne.n	20f4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    20fc:	4b0a      	ldr	r3, [pc, #40]	; (2128 <system_gclk_gen_set_config+0x11c>)
    20fe:	4a0a      	ldr	r2, [pc, #40]	; (2128 <system_gclk_gen_set_config+0x11c>)
    2100:	6851      	ldr	r1, [r2, #4]
    2102:	2280      	movs	r2, #128	; 0x80
    2104:	0252      	lsls	r2, r2, #9
    2106:	4011      	ands	r1, r2
    2108:	697a      	ldr	r2, [r7, #20]
    210a:	430a      	orrs	r2, r1
    210c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    210e:	4b07      	ldr	r3, [pc, #28]	; (212c <system_gclk_gen_set_config+0x120>)
    2110:	4798      	blx	r3
}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	46bd      	mov	sp, r7
    2116:	b006      	add	sp, #24
    2118:	bd80      	pop	{r7, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	00001fbd 	.word	0x00001fbd
    2120:	00001f95 	.word	0x00001f95
    2124:	40000c08 	.word	0x40000c08
    2128:	40000c00 	.word	0x40000c00
    212c:	00001fa9 	.word	0x00001fa9

00002130 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2130:	b580      	push	{r7, lr}
    2132:	b082      	sub	sp, #8
    2134:	af00      	add	r7, sp, #0
    2136:	0002      	movs	r2, r0
    2138:	1dfb      	adds	r3, r7, #7
    213a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    213c:	46c0      	nop			; (mov r8, r8)
    213e:	4b0e      	ldr	r3, [pc, #56]	; (2178 <system_gclk_gen_enable+0x48>)
    2140:	4798      	blx	r3
    2142:	1e03      	subs	r3, r0, #0
    2144:	d1fb      	bne.n	213e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2146:	4b0d      	ldr	r3, [pc, #52]	; (217c <system_gclk_gen_enable+0x4c>)
    2148:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    214a:	4a0d      	ldr	r2, [pc, #52]	; (2180 <system_gclk_gen_enable+0x50>)
    214c:	1dfb      	adds	r3, r7, #7
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	4b08      	ldr	r3, [pc, #32]	; (2178 <system_gclk_gen_enable+0x48>)
    2156:	4798      	blx	r3
    2158:	1e03      	subs	r3, r0, #0
    215a:	d1fb      	bne.n	2154 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    215c:	4b09      	ldr	r3, [pc, #36]	; (2184 <system_gclk_gen_enable+0x54>)
    215e:	4a09      	ldr	r2, [pc, #36]	; (2184 <system_gclk_gen_enable+0x54>)
    2160:	6852      	ldr	r2, [r2, #4]
    2162:	2180      	movs	r1, #128	; 0x80
    2164:	0249      	lsls	r1, r1, #9
    2166:	430a      	orrs	r2, r1
    2168:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    216a:	4b07      	ldr	r3, [pc, #28]	; (2188 <system_gclk_gen_enable+0x58>)
    216c:	4798      	blx	r3
}
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	46bd      	mov	sp, r7
    2172:	b002      	add	sp, #8
    2174:	bd80      	pop	{r7, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	00001fbd 	.word	0x00001fbd
    217c:	00001f95 	.word	0x00001f95
    2180:	40000c04 	.word	0x40000c04
    2184:	40000c00 	.word	0x40000c00
    2188:	00001fa9 	.word	0x00001fa9

0000218c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    218c:	b580      	push	{r7, lr}
    218e:	b086      	sub	sp, #24
    2190:	af00      	add	r7, sp, #0
    2192:	0002      	movs	r2, r0
    2194:	1dfb      	adds	r3, r7, #7
    2196:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2198:	46c0      	nop			; (mov r8, r8)
    219a:	4b2a      	ldr	r3, [pc, #168]	; (2244 <system_gclk_gen_get_hz+0xb8>)
    219c:	4798      	blx	r3
    219e:	1e03      	subs	r3, r0, #0
    21a0:	d1fb      	bne.n	219a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    21a2:	4b29      	ldr	r3, [pc, #164]	; (2248 <system_gclk_gen_get_hz+0xbc>)
    21a4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21a6:	4a29      	ldr	r2, [pc, #164]	; (224c <system_gclk_gen_get_hz+0xc0>)
    21a8:	1dfb      	adds	r3, r7, #7
    21aa:	781b      	ldrb	r3, [r3, #0]
    21ac:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	4b24      	ldr	r3, [pc, #144]	; (2244 <system_gclk_gen_get_hz+0xb8>)
    21b2:	4798      	blx	r3
    21b4:	1e03      	subs	r3, r0, #0
    21b6:	d1fb      	bne.n	21b0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    21b8:	4b25      	ldr	r3, [pc, #148]	; (2250 <system_gclk_gen_get_hz+0xc4>)
    21ba:	685b      	ldr	r3, [r3, #4]
    21bc:	04db      	lsls	r3, r3, #19
    21be:	0edb      	lsrs	r3, r3, #27
    21c0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    21c2:	0018      	movs	r0, r3
    21c4:	4b23      	ldr	r3, [pc, #140]	; (2254 <system_gclk_gen_get_hz+0xc8>)
    21c6:	4798      	blx	r3
    21c8:	0003      	movs	r3, r0
    21ca:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21cc:	4a1f      	ldr	r2, [pc, #124]	; (224c <system_gclk_gen_get_hz+0xc0>)
    21ce:	1dfb      	adds	r3, r7, #7
    21d0:	781b      	ldrb	r3, [r3, #0]
    21d2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    21d4:	4b1e      	ldr	r3, [pc, #120]	; (2250 <system_gclk_gen_get_hz+0xc4>)
    21d6:	685b      	ldr	r3, [r3, #4]
    21d8:	02db      	lsls	r3, r3, #11
    21da:	0fdb      	lsrs	r3, r3, #31
    21dc:	b2da      	uxtb	r2, r3
    21de:	2313      	movs	r3, #19
    21e0:	18fb      	adds	r3, r7, r3
    21e2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    21e4:	4a1c      	ldr	r2, [pc, #112]	; (2258 <system_gclk_gen_get_hz+0xcc>)
    21e6:	1dfb      	adds	r3, r7, #7
    21e8:	781b      	ldrb	r3, [r3, #0]
    21ea:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    21ec:	46c0      	nop			; (mov r8, r8)
    21ee:	4b15      	ldr	r3, [pc, #84]	; (2244 <system_gclk_gen_get_hz+0xb8>)
    21f0:	4798      	blx	r3
    21f2:	1e03      	subs	r3, r0, #0
    21f4:	d1fb      	bne.n	21ee <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    21f6:	4b16      	ldr	r3, [pc, #88]	; (2250 <system_gclk_gen_get_hz+0xc4>)
    21f8:	689b      	ldr	r3, [r3, #8]
    21fa:	021b      	lsls	r3, r3, #8
    21fc:	0c1b      	lsrs	r3, r3, #16
    21fe:	b29b      	uxth	r3, r3
    2200:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    2202:	4b16      	ldr	r3, [pc, #88]	; (225c <system_gclk_gen_get_hz+0xd0>)
    2204:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2206:	2313      	movs	r3, #19
    2208:	18fb      	adds	r3, r7, r3
    220a:	781b      	ldrb	r3, [r3, #0]
    220c:	2b00      	cmp	r3, #0
    220e:	d109      	bne.n	2224 <system_gclk_gen_get_hz+0x98>
    2210:	68fb      	ldr	r3, [r7, #12]
    2212:	2b01      	cmp	r3, #1
    2214:	d906      	bls.n	2224 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    2216:	4b12      	ldr	r3, [pc, #72]	; (2260 <system_gclk_gen_get_hz+0xd4>)
    2218:	68f9      	ldr	r1, [r7, #12]
    221a:	6978      	ldr	r0, [r7, #20]
    221c:	4798      	blx	r3
    221e:	0003      	movs	r3, r0
    2220:	617b      	str	r3, [r7, #20]
    2222:	e00a      	b.n	223a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    2224:	2313      	movs	r3, #19
    2226:	18fb      	adds	r3, r7, r3
    2228:	781b      	ldrb	r3, [r3, #0]
    222a:	2b00      	cmp	r3, #0
    222c:	d005      	beq.n	223a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    222e:	68fb      	ldr	r3, [r7, #12]
    2230:	3301      	adds	r3, #1
    2232:	697a      	ldr	r2, [r7, #20]
    2234:	40da      	lsrs	r2, r3
    2236:	0013      	movs	r3, r2
    2238:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    223a:	697b      	ldr	r3, [r7, #20]
}
    223c:	0018      	movs	r0, r3
    223e:	46bd      	mov	sp, r7
    2240:	b006      	add	sp, #24
    2242:	bd80      	pop	{r7, pc}
    2244:	00001fbd 	.word	0x00001fbd
    2248:	00001f95 	.word	0x00001f95
    224c:	40000c04 	.word	0x40000c04
    2250:	40000c00 	.word	0x40000c00
    2254:	00001c4d 	.word	0x00001c4d
    2258:	40000c08 	.word	0x40000c08
    225c:	00001fa9 	.word	0x00001fa9
    2260:	00002a01 	.word	0x00002a01

00002264 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2264:	b580      	push	{r7, lr}
    2266:	b084      	sub	sp, #16
    2268:	af00      	add	r7, sp, #0
    226a:	0002      	movs	r2, r0
    226c:	6039      	str	r1, [r7, #0]
    226e:	1dfb      	adds	r3, r7, #7
    2270:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    2272:	1dfb      	adds	r3, r7, #7
    2274:	781b      	ldrb	r3, [r3, #0]
    2276:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2278:	683b      	ldr	r3, [r7, #0]
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	021b      	lsls	r3, r3, #8
    227e:	001a      	movs	r2, r3
    2280:	68fb      	ldr	r3, [r7, #12]
    2282:	4313      	orrs	r3, r2
    2284:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2286:	1dfb      	adds	r3, r7, #7
    2288:	781b      	ldrb	r3, [r3, #0]
    228a:	0018      	movs	r0, r3
    228c:	4b04      	ldr	r3, [pc, #16]	; (22a0 <system_gclk_chan_set_config+0x3c>)
    228e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2290:	4b04      	ldr	r3, [pc, #16]	; (22a4 <system_gclk_chan_set_config+0x40>)
    2292:	68fa      	ldr	r2, [r7, #12]
    2294:	b292      	uxth	r2, r2
    2296:	805a      	strh	r2, [r3, #2]
}
    2298:	46c0      	nop			; (mov r8, r8)
    229a:	46bd      	mov	sp, r7
    229c:	b004      	add	sp, #16
    229e:	bd80      	pop	{r7, pc}
    22a0:	000022f1 	.word	0x000022f1
    22a4:	40000c00 	.word	0x40000c00

000022a8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    22a8:	b580      	push	{r7, lr}
    22aa:	b082      	sub	sp, #8
    22ac:	af00      	add	r7, sp, #0
    22ae:	0002      	movs	r2, r0
    22b0:	1dfb      	adds	r3, r7, #7
    22b2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    22b4:	4b0a      	ldr	r3, [pc, #40]	; (22e0 <system_gclk_chan_enable+0x38>)
    22b6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22b8:	4a0a      	ldr	r2, [pc, #40]	; (22e4 <system_gclk_chan_enable+0x3c>)
    22ba:	1dfb      	adds	r3, r7, #7
    22bc:	781b      	ldrb	r3, [r3, #0]
    22be:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    22c0:	4909      	ldr	r1, [pc, #36]	; (22e8 <system_gclk_chan_enable+0x40>)
    22c2:	4b09      	ldr	r3, [pc, #36]	; (22e8 <system_gclk_chan_enable+0x40>)
    22c4:	885b      	ldrh	r3, [r3, #2]
    22c6:	b29b      	uxth	r3, r3
    22c8:	2280      	movs	r2, #128	; 0x80
    22ca:	01d2      	lsls	r2, r2, #7
    22cc:	4313      	orrs	r3, r2
    22ce:	b29b      	uxth	r3, r3
    22d0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    22d2:	4b06      	ldr	r3, [pc, #24]	; (22ec <system_gclk_chan_enable+0x44>)
    22d4:	4798      	blx	r3
}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	46bd      	mov	sp, r7
    22da:	b002      	add	sp, #8
    22dc:	bd80      	pop	{r7, pc}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	00001f95 	.word	0x00001f95
    22e4:	40000c02 	.word	0x40000c02
    22e8:	40000c00 	.word	0x40000c00
    22ec:	00001fa9 	.word	0x00001fa9

000022f0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    22f0:	b580      	push	{r7, lr}
    22f2:	b084      	sub	sp, #16
    22f4:	af00      	add	r7, sp, #0
    22f6:	0002      	movs	r2, r0
    22f8:	1dfb      	adds	r3, r7, #7
    22fa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    22fc:	4b1c      	ldr	r3, [pc, #112]	; (2370 <system_gclk_chan_disable+0x80>)
    22fe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2300:	4a1c      	ldr	r2, [pc, #112]	; (2374 <system_gclk_chan_disable+0x84>)
    2302:	1dfb      	adds	r3, r7, #7
    2304:	781b      	ldrb	r3, [r3, #0]
    2306:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2308:	4b1b      	ldr	r3, [pc, #108]	; (2378 <system_gclk_chan_disable+0x88>)
    230a:	885b      	ldrh	r3, [r3, #2]
    230c:	051b      	lsls	r3, r3, #20
    230e:	0f1b      	lsrs	r3, r3, #28
    2310:	b2db      	uxtb	r3, r3
    2312:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    2314:	4a18      	ldr	r2, [pc, #96]	; (2378 <system_gclk_chan_disable+0x88>)
    2316:	8853      	ldrh	r3, [r2, #2]
    2318:	4918      	ldr	r1, [pc, #96]	; (237c <system_gclk_chan_disable+0x8c>)
    231a:	400b      	ands	r3, r1
    231c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    231e:	4a16      	ldr	r2, [pc, #88]	; (2378 <system_gclk_chan_disable+0x88>)
    2320:	4b15      	ldr	r3, [pc, #84]	; (2378 <system_gclk_chan_disable+0x88>)
    2322:	885b      	ldrh	r3, [r3, #2]
    2324:	b29b      	uxth	r3, r3
    2326:	4916      	ldr	r1, [pc, #88]	; (2380 <system_gclk_chan_disable+0x90>)
    2328:	400b      	ands	r3, r1
    232a:	b29b      	uxth	r3, r3
    232c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	4b11      	ldr	r3, [pc, #68]	; (2378 <system_gclk_chan_disable+0x88>)
    2332:	885b      	ldrh	r3, [r3, #2]
    2334:	b29b      	uxth	r3, r3
    2336:	001a      	movs	r2, r3
    2338:	2380      	movs	r3, #128	; 0x80
    233a:	01db      	lsls	r3, r3, #7
    233c:	4013      	ands	r3, r2
    233e:	d1f7      	bne.n	2330 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2340:	4a0d      	ldr	r2, [pc, #52]	; (2378 <system_gclk_chan_disable+0x88>)
    2342:	68fb      	ldr	r3, [r7, #12]
    2344:	b2db      	uxtb	r3, r3
    2346:	1c19      	adds	r1, r3, #0
    2348:	230f      	movs	r3, #15
    234a:	400b      	ands	r3, r1
    234c:	b2d9      	uxtb	r1, r3
    234e:	8853      	ldrh	r3, [r2, #2]
    2350:	1c08      	adds	r0, r1, #0
    2352:	210f      	movs	r1, #15
    2354:	4001      	ands	r1, r0
    2356:	0208      	lsls	r0, r1, #8
    2358:	4908      	ldr	r1, [pc, #32]	; (237c <system_gclk_chan_disable+0x8c>)
    235a:	400b      	ands	r3, r1
    235c:	1c19      	adds	r1, r3, #0
    235e:	1c03      	adds	r3, r0, #0
    2360:	430b      	orrs	r3, r1
    2362:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    2364:	4b07      	ldr	r3, [pc, #28]	; (2384 <system_gclk_chan_disable+0x94>)
    2366:	4798      	blx	r3
}
    2368:	46c0      	nop			; (mov r8, r8)
    236a:	46bd      	mov	sp, r7
    236c:	b004      	add	sp, #16
    236e:	bd80      	pop	{r7, pc}
    2370:	00001f95 	.word	0x00001f95
    2374:	40000c02 	.word	0x40000c02
    2378:	40000c00 	.word	0x40000c00
    237c:	fffff0ff 	.word	0xfffff0ff
    2380:	ffffbfff 	.word	0xffffbfff
    2384:	00001fa9 	.word	0x00001fa9

00002388 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2388:	b580      	push	{r7, lr}
    238a:	b084      	sub	sp, #16
    238c:	af00      	add	r7, sp, #0
    238e:	0002      	movs	r2, r0
    2390:	1dfb      	adds	r3, r7, #7
    2392:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2394:	4b0d      	ldr	r3, [pc, #52]	; (23cc <system_gclk_chan_get_hz+0x44>)
    2396:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2398:	4a0d      	ldr	r2, [pc, #52]	; (23d0 <system_gclk_chan_get_hz+0x48>)
    239a:	1dfb      	adds	r3, r7, #7
    239c:	781b      	ldrb	r3, [r3, #0]
    239e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    23a0:	4b0c      	ldr	r3, [pc, #48]	; (23d4 <system_gclk_chan_get_hz+0x4c>)
    23a2:	885b      	ldrh	r3, [r3, #2]
    23a4:	051b      	lsls	r3, r3, #20
    23a6:	0f1b      	lsrs	r3, r3, #28
    23a8:	b2da      	uxtb	r2, r3
    23aa:	230f      	movs	r3, #15
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    23b0:	4b09      	ldr	r3, [pc, #36]	; (23d8 <system_gclk_chan_get_hz+0x50>)
    23b2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    23b4:	230f      	movs	r3, #15
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	781b      	ldrb	r3, [r3, #0]
    23ba:	0018      	movs	r0, r3
    23bc:	4b07      	ldr	r3, [pc, #28]	; (23dc <system_gclk_chan_get_hz+0x54>)
    23be:	4798      	blx	r3
    23c0:	0003      	movs	r3, r0
}
    23c2:	0018      	movs	r0, r3
    23c4:	46bd      	mov	sp, r7
    23c6:	b004      	add	sp, #16
    23c8:	bd80      	pop	{r7, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	00001f95 	.word	0x00001f95
    23d0:	40000c02 	.word	0x40000c02
    23d4:	40000c00 	.word	0x40000c00
    23d8:	00001fa9 	.word	0x00001fa9
    23dc:	0000218d 	.word	0x0000218d

000023e0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    23e0:	b580      	push	{r7, lr}
    23e2:	b084      	sub	sp, #16
    23e4:	af00      	add	r7, sp, #0
    23e6:	0002      	movs	r2, r0
    23e8:	1dfb      	adds	r3, r7, #7
    23ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    23ec:	230f      	movs	r3, #15
    23ee:	18fb      	adds	r3, r7, r3
    23f0:	1dfa      	adds	r2, r7, #7
    23f2:	7812      	ldrb	r2, [r2, #0]
    23f4:	09d2      	lsrs	r2, r2, #7
    23f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    23f8:	230e      	movs	r3, #14
    23fa:	18fb      	adds	r3, r7, r3
    23fc:	1dfa      	adds	r2, r7, #7
    23fe:	7812      	ldrb	r2, [r2, #0]
    2400:	0952      	lsrs	r2, r2, #5
    2402:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2404:	4b0d      	ldr	r3, [pc, #52]	; (243c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2406:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2408:	230f      	movs	r3, #15
    240a:	18fb      	adds	r3, r7, r3
    240c:	781b      	ldrb	r3, [r3, #0]
    240e:	2b00      	cmp	r3, #0
    2410:	d10f      	bne.n	2432 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2412:	230f      	movs	r3, #15
    2414:	18fb      	adds	r3, r7, r3
    2416:	781b      	ldrb	r3, [r3, #0]
    2418:	009b      	lsls	r3, r3, #2
    241a:	2210      	movs	r2, #16
    241c:	4694      	mov	ip, r2
    241e:	44bc      	add	ip, r7
    2420:	4463      	add	r3, ip
    2422:	3b08      	subs	r3, #8
    2424:	681a      	ldr	r2, [r3, #0]
    2426:	230e      	movs	r3, #14
    2428:	18fb      	adds	r3, r7, r3
    242a:	781b      	ldrb	r3, [r3, #0]
    242c:	01db      	lsls	r3, r3, #7
    242e:	18d3      	adds	r3, r2, r3
    2430:	e000      	b.n	2434 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2432:	2300      	movs	r3, #0
	}
}
    2434:	0018      	movs	r0, r3
    2436:	46bd      	mov	sp, r7
    2438:	b004      	add	sp, #16
    243a:	bd80      	pop	{r7, pc}
    243c:	41004400 	.word	0x41004400

00002440 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2440:	b580      	push	{r7, lr}
    2442:	b088      	sub	sp, #32
    2444:	af00      	add	r7, sp, #0
    2446:	60f8      	str	r0, [r7, #12]
    2448:	60b9      	str	r1, [r7, #8]
    244a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    244c:	2300      	movs	r3, #0
    244e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2450:	687b      	ldr	r3, [r7, #4]
    2452:	78db      	ldrb	r3, [r3, #3]
    2454:	2201      	movs	r2, #1
    2456:	4053      	eors	r3, r2
    2458:	b2db      	uxtb	r3, r3
    245a:	2b00      	cmp	r3, #0
    245c:	d035      	beq.n	24ca <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	2b80      	cmp	r3, #128	; 0x80
    2464:	d00b      	beq.n	247e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    2466:	69fb      	ldr	r3, [r7, #28]
    2468:	2280      	movs	r2, #128	; 0x80
    246a:	0252      	lsls	r2, r2, #9
    246c:	4313      	orrs	r3, r2
    246e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	781b      	ldrb	r3, [r3, #0]
    2474:	061b      	lsls	r3, r3, #24
    2476:	001a      	movs	r2, r3
    2478:	69fb      	ldr	r3, [r7, #28]
    247a:	4313      	orrs	r3, r2
    247c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	785b      	ldrb	r3, [r3, #1]
    2482:	2b00      	cmp	r3, #0
    2484:	d003      	beq.n	248e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    248a:	2b02      	cmp	r3, #2
    248c:	d110      	bne.n	24b0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    248e:	69fb      	ldr	r3, [r7, #28]
    2490:	2280      	movs	r2, #128	; 0x80
    2492:	0292      	lsls	r2, r2, #10
    2494:	4313      	orrs	r3, r2
    2496:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	789b      	ldrb	r3, [r3, #2]
    249c:	2b00      	cmp	r3, #0
    249e:	d004      	beq.n	24aa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    24a0:	69fb      	ldr	r3, [r7, #28]
    24a2:	2280      	movs	r2, #128	; 0x80
    24a4:	02d2      	lsls	r2, r2, #11
    24a6:	4313      	orrs	r3, r2
    24a8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    24aa:	68fb      	ldr	r3, [r7, #12]
    24ac:	68ba      	ldr	r2, [r7, #8]
    24ae:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	785b      	ldrb	r3, [r3, #1]
    24b4:	2b01      	cmp	r3, #1
    24b6:	d003      	beq.n	24c0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24bc:	2b02      	cmp	r3, #2
    24be:	d107      	bne.n	24d0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    24c0:	69fb      	ldr	r3, [r7, #28]
    24c2:	4a22      	ldr	r2, [pc, #136]	; (254c <_system_pinmux_config+0x10c>)
    24c4:	4013      	ands	r3, r2
    24c6:	61fb      	str	r3, [r7, #28]
    24c8:	e002      	b.n	24d0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    24ca:	68fb      	ldr	r3, [r7, #12]
    24cc:	68ba      	ldr	r2, [r7, #8]
    24ce:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    24d0:	68bb      	ldr	r3, [r7, #8]
    24d2:	041b      	lsls	r3, r3, #16
    24d4:	0c1b      	lsrs	r3, r3, #16
    24d6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    24d8:	68bb      	ldr	r3, [r7, #8]
    24da:	0c1b      	lsrs	r3, r3, #16
    24dc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24de:	69ba      	ldr	r2, [r7, #24]
    24e0:	69fb      	ldr	r3, [r7, #28]
    24e2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    24e4:	22a0      	movs	r2, #160	; 0xa0
    24e6:	05d2      	lsls	r2, r2, #23
    24e8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24ea:	68fb      	ldr	r3, [r7, #12]
    24ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24ee:	697a      	ldr	r2, [r7, #20]
    24f0:	69fb      	ldr	r3, [r7, #28]
    24f2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    24f4:	22d0      	movs	r2, #208	; 0xd0
    24f6:	0612      	lsls	r2, r2, #24
    24f8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24fa:	68fb      	ldr	r3, [r7, #12]
    24fc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    24fe:	687b      	ldr	r3, [r7, #4]
    2500:	78db      	ldrb	r3, [r3, #3]
    2502:	2201      	movs	r2, #1
    2504:	4053      	eors	r3, r2
    2506:	b2db      	uxtb	r3, r3
    2508:	2b00      	cmp	r3, #0
    250a:	d01a      	beq.n	2542 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    250c:	69fa      	ldr	r2, [r7, #28]
    250e:	2380      	movs	r3, #128	; 0x80
    2510:	02db      	lsls	r3, r3, #11
    2512:	4013      	ands	r3, r2
    2514:	d00a      	beq.n	252c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	789b      	ldrb	r3, [r3, #2]
    251a:	2b01      	cmp	r3, #1
    251c:	d103      	bne.n	2526 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    251e:	68fb      	ldr	r3, [r7, #12]
    2520:	68ba      	ldr	r2, [r7, #8]
    2522:	619a      	str	r2, [r3, #24]
    2524:	e002      	b.n	252c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    2526:	68fb      	ldr	r3, [r7, #12]
    2528:	68ba      	ldr	r2, [r7, #8]
    252a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	785b      	ldrb	r3, [r3, #1]
    2530:	2b01      	cmp	r3, #1
    2532:	d003      	beq.n	253c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2538:	2b02      	cmp	r3, #2
    253a:	d102      	bne.n	2542 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    253c:	68fb      	ldr	r3, [r7, #12]
    253e:	68ba      	ldr	r2, [r7, #8]
    2540:	609a      	str	r2, [r3, #8]
		}
	}
}
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	46bd      	mov	sp, r7
    2546:	b008      	add	sp, #32
    2548:	bd80      	pop	{r7, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	fffbffff 	.word	0xfffbffff

00002550 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2550:	b580      	push	{r7, lr}
    2552:	b084      	sub	sp, #16
    2554:	af00      	add	r7, sp, #0
    2556:	0002      	movs	r2, r0
    2558:	6039      	str	r1, [r7, #0]
    255a:	1dfb      	adds	r3, r7, #7
    255c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    255e:	1dfb      	adds	r3, r7, #7
    2560:	781b      	ldrb	r3, [r3, #0]
    2562:	0018      	movs	r0, r3
    2564:	4b0a      	ldr	r3, [pc, #40]	; (2590 <system_pinmux_pin_set_config+0x40>)
    2566:	4798      	blx	r3
    2568:	0003      	movs	r3, r0
    256a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    256c:	1dfb      	adds	r3, r7, #7
    256e:	781b      	ldrb	r3, [r3, #0]
    2570:	221f      	movs	r2, #31
    2572:	4013      	ands	r3, r2
    2574:	2201      	movs	r2, #1
    2576:	409a      	lsls	r2, r3
    2578:	0013      	movs	r3, r2
    257a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    257c:	683a      	ldr	r2, [r7, #0]
    257e:	68b9      	ldr	r1, [r7, #8]
    2580:	68fb      	ldr	r3, [r7, #12]
    2582:	0018      	movs	r0, r3
    2584:	4b03      	ldr	r3, [pc, #12]	; (2594 <system_pinmux_pin_set_config+0x44>)
    2586:	4798      	blx	r3
}
    2588:	46c0      	nop			; (mov r8, r8)
    258a:	46bd      	mov	sp, r7
    258c:	b004      	add	sp, #16
    258e:	bd80      	pop	{r7, pc}
    2590:	000023e1 	.word	0x000023e1
    2594:	00002441 	.word	0x00002441

00002598 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2598:	b580      	push	{r7, lr}
    259a:	af00      	add	r7, sp, #0
	return;
    259c:	46c0      	nop			; (mov r8, r8)
}
    259e:	46bd      	mov	sp, r7
    25a0:	bd80      	pop	{r7, pc}
	...

000025a4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    25a4:	b580      	push	{r7, lr}
    25a6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    25a8:	4b06      	ldr	r3, [pc, #24]	; (25c4 <system_init+0x20>)
    25aa:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    25ac:	4b06      	ldr	r3, [pc, #24]	; (25c8 <system_init+0x24>)
    25ae:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    25b0:	4b06      	ldr	r3, [pc, #24]	; (25cc <system_init+0x28>)
    25b2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    25b4:	4b06      	ldr	r3, [pc, #24]	; (25d0 <system_init+0x2c>)
    25b6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    25b8:	4b06      	ldr	r3, [pc, #24]	; (25d4 <system_init+0x30>)
    25ba:	4798      	blx	r3
}
    25bc:	46c0      	nop			; (mov r8, r8)
    25be:	46bd      	mov	sp, r7
    25c0:	bd80      	pop	{r7, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	00001e65 	.word	0x00001e65
    25c8:	00001a55 	.word	0x00001a55
    25cc:	00002599 	.word	0x00002599
    25d0:	00002599 	.word	0x00002599
    25d4:	00002599 	.word	0x00002599

000025d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    25d8:	b580      	push	{r7, lr}
    25da:	b082      	sub	sp, #8
    25dc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    25de:	4b2f      	ldr	r3, [pc, #188]	; (269c <Reset_Handler+0xc4>)
    25e0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    25e2:	4b2f      	ldr	r3, [pc, #188]	; (26a0 <Reset_Handler+0xc8>)
    25e4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    25e6:	687a      	ldr	r2, [r7, #4]
    25e8:	683b      	ldr	r3, [r7, #0]
    25ea:	429a      	cmp	r2, r3
    25ec:	d00c      	beq.n	2608 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    25ee:	e007      	b.n	2600 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    25f0:	683b      	ldr	r3, [r7, #0]
    25f2:	1d1a      	adds	r2, r3, #4
    25f4:	603a      	str	r2, [r7, #0]
    25f6:	687a      	ldr	r2, [r7, #4]
    25f8:	1d11      	adds	r1, r2, #4
    25fa:	6079      	str	r1, [r7, #4]
    25fc:	6812      	ldr	r2, [r2, #0]
    25fe:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    2600:	683a      	ldr	r2, [r7, #0]
    2602:	4b28      	ldr	r3, [pc, #160]	; (26a4 <Reset_Handler+0xcc>)
    2604:	429a      	cmp	r2, r3
    2606:	d3f3      	bcc.n	25f0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2608:	4b27      	ldr	r3, [pc, #156]	; (26a8 <Reset_Handler+0xd0>)
    260a:	603b      	str	r3, [r7, #0]
    260c:	e004      	b.n	2618 <Reset_Handler+0x40>
                *pDest++ = 0;
    260e:	683b      	ldr	r3, [r7, #0]
    2610:	1d1a      	adds	r2, r3, #4
    2612:	603a      	str	r2, [r7, #0]
    2614:	2200      	movs	r2, #0
    2616:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    2618:	683a      	ldr	r2, [r7, #0]
    261a:	4b24      	ldr	r3, [pc, #144]	; (26ac <Reset_Handler+0xd4>)
    261c:	429a      	cmp	r2, r3
    261e:	d3f6      	bcc.n	260e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2620:	4b23      	ldr	r3, [pc, #140]	; (26b0 <Reset_Handler+0xd8>)
    2622:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2624:	4b23      	ldr	r3, [pc, #140]	; (26b4 <Reset_Handler+0xdc>)
    2626:	687a      	ldr	r2, [r7, #4]
    2628:	21ff      	movs	r1, #255	; 0xff
    262a:	438a      	bics	r2, r1
    262c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    262e:	4a22      	ldr	r2, [pc, #136]	; (26b8 <Reset_Handler+0xe0>)
    2630:	2390      	movs	r3, #144	; 0x90
    2632:	005b      	lsls	r3, r3, #1
    2634:	2102      	movs	r1, #2
    2636:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2638:	4a20      	ldr	r2, [pc, #128]	; (26bc <Reset_Handler+0xe4>)
    263a:	78d3      	ldrb	r3, [r2, #3]
    263c:	2103      	movs	r1, #3
    263e:	438b      	bics	r3, r1
    2640:	1c19      	adds	r1, r3, #0
    2642:	2302      	movs	r3, #2
    2644:	430b      	orrs	r3, r1
    2646:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2648:	4a1c      	ldr	r2, [pc, #112]	; (26bc <Reset_Handler+0xe4>)
    264a:	78d3      	ldrb	r3, [r2, #3]
    264c:	210c      	movs	r1, #12
    264e:	438b      	bics	r3, r1
    2650:	1c19      	adds	r1, r3, #0
    2652:	2308      	movs	r3, #8
    2654:	430b      	orrs	r3, r1
    2656:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2658:	4a19      	ldr	r2, [pc, #100]	; (26c0 <Reset_Handler+0xe8>)
    265a:	7b93      	ldrb	r3, [r2, #14]
    265c:	2130      	movs	r1, #48	; 0x30
    265e:	438b      	bics	r3, r1
    2660:	1c19      	adds	r1, r3, #0
    2662:	2320      	movs	r3, #32
    2664:	430b      	orrs	r3, r1
    2666:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2668:	4a15      	ldr	r2, [pc, #84]	; (26c0 <Reset_Handler+0xe8>)
    266a:	7b93      	ldrb	r3, [r2, #14]
    266c:	210c      	movs	r1, #12
    266e:	438b      	bics	r3, r1
    2670:	1c19      	adds	r1, r3, #0
    2672:	2308      	movs	r3, #8
    2674:	430b      	orrs	r3, r1
    2676:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2678:	4a11      	ldr	r2, [pc, #68]	; (26c0 <Reset_Handler+0xe8>)
    267a:	7b93      	ldrb	r3, [r2, #14]
    267c:	2103      	movs	r1, #3
    267e:	438b      	bics	r3, r1
    2680:	1c19      	adds	r1, r3, #0
    2682:	2302      	movs	r3, #2
    2684:	430b      	orrs	r3, r1
    2686:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2688:	4a0e      	ldr	r2, [pc, #56]	; (26c4 <Reset_Handler+0xec>)
    268a:	6853      	ldr	r3, [r2, #4]
    268c:	2180      	movs	r1, #128	; 0x80
    268e:	430b      	orrs	r3, r1
    2690:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    2692:	4b0d      	ldr	r3, [pc, #52]	; (26c8 <Reset_Handler+0xf0>)
    2694:	4798      	blx	r3

        /* Branch to main function */
        main();
    2696:	4b0d      	ldr	r3, [pc, #52]	; (26cc <Reset_Handler+0xf4>)
    2698:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    269a:	e7fe      	b.n	269a <Reset_Handler+0xc2>
    269c:	00002c58 	.word	0x00002c58
    26a0:	20000000 	.word	0x20000000
    26a4:	2000001c 	.word	0x2000001c
    26a8:	2000001c 	.word	0x2000001c
    26ac:	20000148 	.word	0x20000148
    26b0:	00000000 	.word	0x00000000
    26b4:	e000ed00 	.word	0xe000ed00
    26b8:	41007000 	.word	0x41007000
    26bc:	41005000 	.word	0x41005000
    26c0:	41004800 	.word	0x41004800
    26c4:	41004000 	.word	0x41004000
    26c8:	00002b6d 	.word	0x00002b6d
    26cc:	000027f5 	.word	0x000027f5

000026d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    26d0:	b580      	push	{r7, lr}
    26d2:	af00      	add	r7, sp, #0
        while (1) {
    26d4:	e7fe      	b.n	26d4 <Dummy_Handler+0x4>
	...

000026d8 <system_cpu_clock_set_divider>:
{
    26d8:	b580      	push	{r7, lr}
    26da:	b082      	sub	sp, #8
    26dc:	af00      	add	r7, sp, #0
    26de:	0002      	movs	r2, r0
    26e0:	1dfb      	adds	r3, r7, #7
    26e2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    26e4:	4a03      	ldr	r2, [pc, #12]	; (26f4 <system_cpu_clock_set_divider+0x1c>)
    26e6:	1dfb      	adds	r3, r7, #7
    26e8:	781b      	ldrb	r3, [r3, #0]
    26ea:	7213      	strb	r3, [r2, #8]
}
    26ec:	46c0      	nop			; (mov r8, r8)
    26ee:	46bd      	mov	sp, r7
    26f0:	b002      	add	sp, #8
    26f2:	bd80      	pop	{r7, pc}
    26f4:	40000400 	.word	0x40000400

000026f8 <system_pinmux_get_group_from_gpio_pin>:
{
    26f8:	b580      	push	{r7, lr}
    26fa:	b084      	sub	sp, #16
    26fc:	af00      	add	r7, sp, #0
    26fe:	0002      	movs	r2, r0
    2700:	1dfb      	adds	r3, r7, #7
    2702:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2704:	230f      	movs	r3, #15
    2706:	18fb      	adds	r3, r7, r3
    2708:	1dfa      	adds	r2, r7, #7
    270a:	7812      	ldrb	r2, [r2, #0]
    270c:	09d2      	lsrs	r2, r2, #7
    270e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2710:	230e      	movs	r3, #14
    2712:	18fb      	adds	r3, r7, r3
    2714:	1dfa      	adds	r2, r7, #7
    2716:	7812      	ldrb	r2, [r2, #0]
    2718:	0952      	lsrs	r2, r2, #5
    271a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    271c:	4b0d      	ldr	r3, [pc, #52]	; (2754 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    271e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2720:	230f      	movs	r3, #15
    2722:	18fb      	adds	r3, r7, r3
    2724:	781b      	ldrb	r3, [r3, #0]
    2726:	2b00      	cmp	r3, #0
    2728:	d10f      	bne.n	274a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    272a:	230f      	movs	r3, #15
    272c:	18fb      	adds	r3, r7, r3
    272e:	781b      	ldrb	r3, [r3, #0]
    2730:	009b      	lsls	r3, r3, #2
    2732:	2210      	movs	r2, #16
    2734:	4694      	mov	ip, r2
    2736:	44bc      	add	ip, r7
    2738:	4463      	add	r3, ip
    273a:	3b08      	subs	r3, #8
    273c:	681a      	ldr	r2, [r3, #0]
    273e:	230e      	movs	r3, #14
    2740:	18fb      	adds	r3, r7, r3
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	01db      	lsls	r3, r3, #7
    2746:	18d3      	adds	r3, r2, r3
    2748:	e000      	b.n	274c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    274a:	2300      	movs	r3, #0
}
    274c:	0018      	movs	r0, r3
    274e:	46bd      	mov	sp, r7
    2750:	b004      	add	sp, #16
    2752:	bd80      	pop	{r7, pc}
    2754:	41004400 	.word	0x41004400

00002758 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2758:	b580      	push	{r7, lr}
    275a:	b082      	sub	sp, #8
    275c:	af00      	add	r7, sp, #0
    275e:	0002      	movs	r2, r0
    2760:	1dfb      	adds	r3, r7, #7
    2762:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2764:	1dfb      	adds	r3, r7, #7
    2766:	781b      	ldrb	r3, [r3, #0]
    2768:	0018      	movs	r0, r3
    276a:	4b03      	ldr	r3, [pc, #12]	; (2778 <port_get_group_from_gpio_pin+0x20>)
    276c:	4798      	blx	r3
    276e:	0003      	movs	r3, r0
}
    2770:	0018      	movs	r0, r3
    2772:	46bd      	mov	sp, r7
    2774:	b002      	add	sp, #8
    2776:	bd80      	pop	{r7, pc}
    2778:	000026f9 	.word	0x000026f9

0000277c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    277c:	b580      	push	{r7, lr}
    277e:	b082      	sub	sp, #8
    2780:	af00      	add	r7, sp, #0
    2782:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	2200      	movs	r2, #0
    2788:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    278a:	687b      	ldr	r3, [r7, #4]
    278c:	2201      	movs	r2, #1
    278e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	2200      	movs	r2, #0
    2794:	709a      	strb	r2, [r3, #2]
}
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	46bd      	mov	sp, r7
    279a:	b002      	add	sp, #8
    279c:	bd80      	pop	{r7, pc}
	...

000027a0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    27a0:	b580      	push	{r7, lr}
    27a2:	b084      	sub	sp, #16
    27a4:	af00      	add	r7, sp, #0
    27a6:	0002      	movs	r2, r0
    27a8:	1dfb      	adds	r3, r7, #7
    27aa:	701a      	strb	r2, [r3, #0]
    27ac:	1dbb      	adds	r3, r7, #6
    27ae:	1c0a      	adds	r2, r1, #0
    27b0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    27b2:	1dfb      	adds	r3, r7, #7
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	0018      	movs	r0, r3
    27b8:	4b0d      	ldr	r3, [pc, #52]	; (27f0 <port_pin_set_output_level+0x50>)
    27ba:	4798      	blx	r3
    27bc:	0003      	movs	r3, r0
    27be:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    27c0:	1dfb      	adds	r3, r7, #7
    27c2:	781b      	ldrb	r3, [r3, #0]
    27c4:	221f      	movs	r2, #31
    27c6:	4013      	ands	r3, r2
    27c8:	2201      	movs	r2, #1
    27ca:	409a      	lsls	r2, r3
    27cc:	0013      	movs	r3, r2
    27ce:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    27d0:	1dbb      	adds	r3, r7, #6
    27d2:	781b      	ldrb	r3, [r3, #0]
    27d4:	2b00      	cmp	r3, #0
    27d6:	d003      	beq.n	27e0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    27d8:	68fb      	ldr	r3, [r7, #12]
    27da:	68ba      	ldr	r2, [r7, #8]
    27dc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    27de:	e002      	b.n	27e6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    27e0:	68fb      	ldr	r3, [r7, #12]
    27e2:	68ba      	ldr	r2, [r7, #8]
    27e4:	615a      	str	r2, [r3, #20]
}
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	46bd      	mov	sp, r7
    27ea:	b004      	add	sp, #16
    27ec:	bd80      	pop	{r7, pc}
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	00002759 	.word	0x00002759

000027f4 <main>:

/************************************************************************/
/*                                      Main                            */
/************************************************************************/
int main (void)
{
    27f4:	b580      	push	{r7, lr}
    27f6:	b082      	sub	sp, #8
    27f8:	af00      	add	r7, sp, #0
    uint8_t tx_preamble[4] = {FIFO_REPEATDATA, 0x38, 8, 0xaa};
    27fa:	1d3b      	adds	r3, r7, #4
    27fc:	4a04      	ldr	r2, [pc, #16]	; (2810 <main+0x1c>)
    27fe:	6812      	ldr	r2, [r2, #0]
    2800:	601a      	str	r2, [r3, #0]

    // initialize all the subsystems on the MCU
    simSysInit();
    2802:	4b04      	ldr	r3, [pc, #16]	; (2814 <main+0x20>)
    2804:	4798      	blx	r3
 //       spi169_stop_xfer();
        
		
		
        // send an AT command to the 915 MHz module
        uart915_write_cmd("AT\r\n");
    2806:	4b04      	ldr	r3, [pc, #16]	; (2818 <main+0x24>)
    2808:	0018      	movs	r0, r3
    280a:	4b04      	ldr	r3, [pc, #16]	; (281c <main+0x28>)
    280c:	4798      	blx	r3
    280e:	e7fa      	b.n	2806 <main+0x12>
    2810:	00002c34 	.word	0x00002c34
    2814:	00002821 	.word	0x00002821
    2818:	00002c2c 	.word	0x00002c2c
    281c:	00000569 	.word	0x00000569

00002820 <simSysInit>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes all relevant subsystems.
 */
void simSysInit(void)
{
    2820:	b580      	push	{r7, lr}
    2822:	af00      	add	r7, sp, #0
	system_init();
    2824:	4b07      	ldr	r3, [pc, #28]	; (2844 <simSysInit+0x24>)
    2826:	4798      	blx	r3
	sys_clk_init();	
    2828:	4b07      	ldr	r3, [pc, #28]	; (2848 <simSysInit+0x28>)
    282a:	4798      	blx	r3
	conf_port_pin();
    282c:	4b07      	ldr	r3, [pc, #28]	; (284c <simSysInit+0x2c>)
    282e:	4798      	blx	r3
	
	
	
//    spi169_init();
	port_pin_set_output_level(CONFIG245, true);
    2830:	2101      	movs	r1, #1
    2832:	2006      	movs	r0, #6
    2834:	4b06      	ldr	r3, [pc, #24]	; (2850 <simSysInit+0x30>)
    2836:	4798      	blx	r3
    
	
	
	//uart245_init();
	uart915_init();
    2838:	4b06      	ldr	r3, [pc, #24]	; (2854 <simSysInit+0x34>)
    283a:	4798      	blx	r3
}
    283c:	46c0      	nop			; (mov r8, r8)
    283e:	46bd      	mov	sp, r7
    2840:	bd80      	pop	{r7, pc}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	000025a5 	.word	0x000025a5
    2848:	00002859 	.word	0x00002859
    284c:	0000287d 	.word	0x0000287d
    2850:	000027a1 	.word	0x000027a1
    2854:	00000399 	.word	0x00000399

00002858 <sys_clk_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes the MCU clocks.
 */
void sys_clk_init(void)
{
    2858:	b580      	push	{r7, lr}
    285a:	af00      	add	r7, sp, #0
	clk_osc8m_init();
    285c:	4b04      	ldr	r3, [pc, #16]	; (2870 <sys_clk_init+0x18>)
    285e:	4798      	blx	r3
	clk_gclk0_init();
    2860:	4b04      	ldr	r3, [pc, #16]	; (2874 <sys_clk_init+0x1c>)
    2862:	4798      	blx	r3
    delay_init();
    2864:	4b04      	ldr	r3, [pc, #16]	; (2878 <sys_clk_init+0x20>)
    2866:	4798      	blx	r3
}
    2868:	46c0      	nop			; (mov r8, r8)
    286a:	46bd      	mov	sp, r7
    286c:	bd80      	pop	{r7, pc}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	0000297d 	.word	0x0000297d
    2874:	000029a9 	.word	0x000029a9
    2878:	000005c1 	.word	0x000005c1

0000287c <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    287c:	b580      	push	{r7, lr}
    287e:	b082      	sub	sp, #8
    2880:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    2882:	1d3b      	adds	r3, r7, #4
    2884:	0018      	movs	r0, r3
    2886:	4b3a      	ldr	r3, [pc, #232]	; (2970 <conf_port_pin+0xf4>)
    2888:	4798      	blx	r3
	
	/**************config pin for 245*************/

	
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    288a:	1d3b      	adds	r3, r7, #4
    288c:	2200      	movs	r2, #0
    288e:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2890:	1d3b      	adds	r3, r7, #4
    2892:	2201      	movs	r2, #1
    2894:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS245, &config_port_pin);
    2896:	1d3b      	adds	r3, r7, #4
    2898:	0019      	movs	r1, r3
    289a:	200b      	movs	r0, #11
    289c:	4b35      	ldr	r3, [pc, #212]	; (2974 <conf_port_pin+0xf8>)
    289e:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    28a0:	1d3b      	adds	r3, r7, #4
    28a2:	2201      	movs	r2, #1
    28a4:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    28a6:	1d3b      	adds	r3, r7, #4
    28a8:	0019      	movs	r1, r3
    28aa:	200a      	movs	r0, #10
    28ac:	4b31      	ldr	r3, [pc, #196]	; (2974 <conf_port_pin+0xf8>)
    28ae:	4798      	blx	r3
	port_pin_set_output_level(RTS245, true);
    28b0:	2101      	movs	r1, #1
    28b2:	200a      	movs	r0, #10
    28b4:	4b30      	ldr	r3, [pc, #192]	; (2978 <conf_port_pin+0xfc>)
    28b6:	4798      	blx	r3
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    28b8:	1d3b      	adds	r3, r7, #4
    28ba:	0019      	movs	r1, r3
    28bc:	2001      	movs	r0, #1
    28be:	4b2d      	ldr	r3, [pc, #180]	; (2974 <conf_port_pin+0xf8>)
    28c0:	4798      	blx	r3
    port_pin_set_output_level(PAEN245, true);
    28c2:	2101      	movs	r1, #1
    28c4:	2001      	movs	r0, #1
    28c6:	4b2c      	ldr	r3, [pc, #176]	; (2978 <conf_port_pin+0xfc>)
    28c8:	4798      	blx	r3
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    28ca:	1d3b      	adds	r3, r7, #4
    28cc:	0019      	movs	r1, r3
    28ce:	2006      	movs	r0, #6
    28d0:	4b28      	ldr	r3, [pc, #160]	; (2974 <conf_port_pin+0xf8>)
    28d2:	4798      	blx	r3
    port_pin_set_output_level(CONFIG245, true);
    28d4:	2101      	movs	r1, #1
    28d6:	2006      	movs	r0, #6
    28d8:	4b27      	ldr	r3, [pc, #156]	; (2978 <conf_port_pin+0xfc>)
    28da:	4798      	blx	r3
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    28dc:	1d3b      	adds	r3, r7, #4
    28de:	0019      	movs	r1, r3
    28e0:	2007      	movs	r0, #7
    28e2:	4b24      	ldr	r3, [pc, #144]	; (2974 <conf_port_pin+0xf8>)
    28e4:	4798      	blx	r3
    port_pin_set_output_level(RESET245, true);
    28e6:	2101      	movs	r1, #1
    28e8:	2007      	movs	r0, #7
    28ea:	4b23      	ldr	r3, [pc, #140]	; (2978 <conf_port_pin+0xfc>)
    28ec:	4798      	blx	r3
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    28ee:	1d3b      	adds	r3, r7, #4
    28f0:	2200      	movs	r2, #0
    28f2:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    28f4:	1d3b      	adds	r3, r7, #4
    28f6:	2201      	movs	r2, #1
    28f8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    28fa:	1d3b      	adds	r3, r7, #4
    28fc:	0019      	movs	r1, r3
    28fe:	200f      	movs	r0, #15
    2900:	4b1c      	ldr	r3, [pc, #112]	; (2974 <conf_port_pin+0xf8>)
    2902:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2904:	1d3b      	adds	r3, r7, #4
    2906:	2201      	movs	r2, #1
    2908:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    290a:	1d3b      	adds	r3, r7, #4
    290c:	0019      	movs	r1, r3
    290e:	200e      	movs	r0, #14
    2910:	4b18      	ldr	r3, [pc, #96]	; (2974 <conf_port_pin+0xf8>)
    2912:	4798      	blx	r3
    port_pin_set_output_level(RTS915, true);
    2914:	2101      	movs	r1, #1
    2916:	200e      	movs	r0, #14
    2918:	4b17      	ldr	r3, [pc, #92]	; (2978 <conf_port_pin+0xfc>)
    291a:	4798      	blx	r3
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    291c:	1d3b      	adds	r3, r7, #4
    291e:	2201      	movs	r2, #1
    2920:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    2922:	1d3b      	adds	r3, r7, #4
    2924:	2202      	movs	r2, #2
    2926:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    2928:	1d3b      	adds	r3, r7, #4
    292a:	0019      	movs	r1, r3
    292c:	202f      	movs	r0, #47	; 0x2f
    292e:	4b11      	ldr	r3, [pc, #68]	; (2974 <conf_port_pin+0xf8>)
    2930:	4798      	blx	r3
    port_pin_set_output_level(WAKE915, true);
    2932:	2101      	movs	r1, #1
    2934:	202f      	movs	r0, #47	; 0x2f
    2936:	4b10      	ldr	r3, [pc, #64]	; (2978 <conf_port_pin+0xfc>)
    2938:	4798      	blx	r3
	
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    293a:	1d3b      	adds	r3, r7, #4
    293c:	2201      	movs	r2, #1
    293e:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2940:	1d3b      	adds	r3, r7, #4
    2942:	2201      	movs	r2, #1
    2944:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(SS169, &config_port_pin);
    2946:	1d3b      	adds	r3, r7, #4
    2948:	0019      	movs	r1, r3
    294a:	2018      	movs	r0, #24
    294c:	4b09      	ldr	r3, [pc, #36]	; (2974 <conf_port_pin+0xf8>)
    294e:	4798      	blx	r3
    port_pin_set_output_level(SS169, true);
    2950:	2101      	movs	r1, #1
    2952:	2018      	movs	r0, #24
    2954:	4b08      	ldr	r3, [pc, #32]	; (2978 <conf_port_pin+0xfc>)
    2956:	4798      	blx	r3
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    2958:	1d3b      	adds	r3, r7, #4
    295a:	2200      	movs	r2, #0
    295c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(IRQ169, &config_port_pin);
    295e:	1d3b      	adds	r3, r7, #4
    2960:	0019      	movs	r1, r3
    2962:	2011      	movs	r0, #17
    2964:	4b03      	ldr	r3, [pc, #12]	; (2974 <conf_port_pin+0xf8>)
    2966:	4798      	blx	r3
} // end conf_port_pin(void)
    2968:	46c0      	nop			; (mov r8, r8)
    296a:	46bd      	mov	sp, r7
    296c:	b002      	add	sp, #8
    296e:	bd80      	pop	{r7, pc}
    2970:	0000277d 	.word	0x0000277d
    2974:	00000641 	.word	0x00000641
    2978:	000027a1 	.word	0x000027a1

0000297c <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    297c:	b580      	push	{r7, lr}
    297e:	b082      	sub	sp, #8
    2980:	af00      	add	r7, sp, #0

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    2982:	1d3b      	adds	r3, r7, #4
    2984:	2200      	movs	r2, #0
    2986:	701a      	strb	r2, [r3, #0]
	osc8_config.on_demand = true;
    2988:	1d3b      	adds	r3, r7, #4
    298a:	2201      	movs	r2, #1
    298c:	709a      	strb	r2, [r3, #2]
	osc8_config.run_in_standby = false;
    298e:	1d3b      	adds	r3, r7, #4
    2990:	2200      	movs	r2, #0
    2992:	705a      	strb	r2, [r3, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    2994:	1d3b      	adds	r3, r7, #4
    2996:	0018      	movs	r0, r3
    2998:	4b02      	ldr	r3, [pc, #8]	; (29a4 <clk_osc8m_init+0x28>)
    299a:	4798      	blx	r3
}
    299c:	46c0      	nop			; (mov r8, r8)
    299e:	46bd      	mov	sp, r7
    29a0:	b002      	add	sp, #8
    29a2:	bd80      	pop	{r7, pc}
    29a4:	00001d09 	.word	0x00001d09

000029a8 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	b084      	sub	sp, #16
    29ac:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    29ae:	4b10      	ldr	r3, [pc, #64]	; (29f0 <clk_gclk0_init+0x48>)
    29b0:	4798      	blx	r3
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
    29b2:	2000      	movs	r0, #0
    29b4:	4b0f      	ldr	r3, [pc, #60]	; (29f4 <clk_gclk0_init+0x4c>)
    29b6:	4798      	blx	r3
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    29b8:	1d3b      	adds	r3, r7, #4
    29ba:	2206      	movs	r2, #6
    29bc:	701a      	strb	r2, [r3, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    29be:	1d3b      	adds	r3, r7, #4
    29c0:	2200      	movs	r2, #0
    29c2:	725a      	strb	r2, [r3, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    29c4:	1d3b      	adds	r3, r7, #4
    29c6:	2200      	movs	r2, #0
    29c8:	705a      	strb	r2, [r3, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    29ca:	1d3b      	adds	r3, r7, #4
    29cc:	2201      	movs	r2, #1
    29ce:	605a      	str	r2, [r3, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    29d0:	1d3b      	adds	r3, r7, #4
    29d2:	2200      	movs	r2, #0
    29d4:	721a      	strb	r2, [r3, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    29d6:	1d3b      	adds	r3, r7, #4
    29d8:	0019      	movs	r1, r3
    29da:	2000      	movs	r0, #0
    29dc:	4b06      	ldr	r3, [pc, #24]	; (29f8 <clk_gclk0_init+0x50>)
    29de:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    29e0:	2000      	movs	r0, #0
    29e2:	4b06      	ldr	r3, [pc, #24]	; (29fc <clk_gclk0_init+0x54>)
    29e4:	4798      	blx	r3
}
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	46bd      	mov	sp, r7
    29ea:	b004      	add	sp, #16
    29ec:	bd80      	pop	{r7, pc}
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	00001fdd 	.word	0x00001fdd
    29f4:	000026d9 	.word	0x000026d9
    29f8:	0000200d 	.word	0x0000200d
    29fc:	00002131 	.word	0x00002131

00002a00 <__udivsi3>:
    2a00:	2200      	movs	r2, #0
    2a02:	0843      	lsrs	r3, r0, #1
    2a04:	428b      	cmp	r3, r1
    2a06:	d374      	bcc.n	2af2 <__udivsi3+0xf2>
    2a08:	0903      	lsrs	r3, r0, #4
    2a0a:	428b      	cmp	r3, r1
    2a0c:	d35f      	bcc.n	2ace <__udivsi3+0xce>
    2a0e:	0a03      	lsrs	r3, r0, #8
    2a10:	428b      	cmp	r3, r1
    2a12:	d344      	bcc.n	2a9e <__udivsi3+0x9e>
    2a14:	0b03      	lsrs	r3, r0, #12
    2a16:	428b      	cmp	r3, r1
    2a18:	d328      	bcc.n	2a6c <__udivsi3+0x6c>
    2a1a:	0c03      	lsrs	r3, r0, #16
    2a1c:	428b      	cmp	r3, r1
    2a1e:	d30d      	bcc.n	2a3c <__udivsi3+0x3c>
    2a20:	22ff      	movs	r2, #255	; 0xff
    2a22:	0209      	lsls	r1, r1, #8
    2a24:	ba12      	rev	r2, r2
    2a26:	0c03      	lsrs	r3, r0, #16
    2a28:	428b      	cmp	r3, r1
    2a2a:	d302      	bcc.n	2a32 <__udivsi3+0x32>
    2a2c:	1212      	asrs	r2, r2, #8
    2a2e:	0209      	lsls	r1, r1, #8
    2a30:	d065      	beq.n	2afe <__udivsi3+0xfe>
    2a32:	0b03      	lsrs	r3, r0, #12
    2a34:	428b      	cmp	r3, r1
    2a36:	d319      	bcc.n	2a6c <__udivsi3+0x6c>
    2a38:	e000      	b.n	2a3c <__udivsi3+0x3c>
    2a3a:	0a09      	lsrs	r1, r1, #8
    2a3c:	0bc3      	lsrs	r3, r0, #15
    2a3e:	428b      	cmp	r3, r1
    2a40:	d301      	bcc.n	2a46 <__udivsi3+0x46>
    2a42:	03cb      	lsls	r3, r1, #15
    2a44:	1ac0      	subs	r0, r0, r3
    2a46:	4152      	adcs	r2, r2
    2a48:	0b83      	lsrs	r3, r0, #14
    2a4a:	428b      	cmp	r3, r1
    2a4c:	d301      	bcc.n	2a52 <__udivsi3+0x52>
    2a4e:	038b      	lsls	r3, r1, #14
    2a50:	1ac0      	subs	r0, r0, r3
    2a52:	4152      	adcs	r2, r2
    2a54:	0b43      	lsrs	r3, r0, #13
    2a56:	428b      	cmp	r3, r1
    2a58:	d301      	bcc.n	2a5e <__udivsi3+0x5e>
    2a5a:	034b      	lsls	r3, r1, #13
    2a5c:	1ac0      	subs	r0, r0, r3
    2a5e:	4152      	adcs	r2, r2
    2a60:	0b03      	lsrs	r3, r0, #12
    2a62:	428b      	cmp	r3, r1
    2a64:	d301      	bcc.n	2a6a <__udivsi3+0x6a>
    2a66:	030b      	lsls	r3, r1, #12
    2a68:	1ac0      	subs	r0, r0, r3
    2a6a:	4152      	adcs	r2, r2
    2a6c:	0ac3      	lsrs	r3, r0, #11
    2a6e:	428b      	cmp	r3, r1
    2a70:	d301      	bcc.n	2a76 <__udivsi3+0x76>
    2a72:	02cb      	lsls	r3, r1, #11
    2a74:	1ac0      	subs	r0, r0, r3
    2a76:	4152      	adcs	r2, r2
    2a78:	0a83      	lsrs	r3, r0, #10
    2a7a:	428b      	cmp	r3, r1
    2a7c:	d301      	bcc.n	2a82 <__udivsi3+0x82>
    2a7e:	028b      	lsls	r3, r1, #10
    2a80:	1ac0      	subs	r0, r0, r3
    2a82:	4152      	adcs	r2, r2
    2a84:	0a43      	lsrs	r3, r0, #9
    2a86:	428b      	cmp	r3, r1
    2a88:	d301      	bcc.n	2a8e <__udivsi3+0x8e>
    2a8a:	024b      	lsls	r3, r1, #9
    2a8c:	1ac0      	subs	r0, r0, r3
    2a8e:	4152      	adcs	r2, r2
    2a90:	0a03      	lsrs	r3, r0, #8
    2a92:	428b      	cmp	r3, r1
    2a94:	d301      	bcc.n	2a9a <__udivsi3+0x9a>
    2a96:	020b      	lsls	r3, r1, #8
    2a98:	1ac0      	subs	r0, r0, r3
    2a9a:	4152      	adcs	r2, r2
    2a9c:	d2cd      	bcs.n	2a3a <__udivsi3+0x3a>
    2a9e:	09c3      	lsrs	r3, r0, #7
    2aa0:	428b      	cmp	r3, r1
    2aa2:	d301      	bcc.n	2aa8 <__udivsi3+0xa8>
    2aa4:	01cb      	lsls	r3, r1, #7
    2aa6:	1ac0      	subs	r0, r0, r3
    2aa8:	4152      	adcs	r2, r2
    2aaa:	0983      	lsrs	r3, r0, #6
    2aac:	428b      	cmp	r3, r1
    2aae:	d301      	bcc.n	2ab4 <__udivsi3+0xb4>
    2ab0:	018b      	lsls	r3, r1, #6
    2ab2:	1ac0      	subs	r0, r0, r3
    2ab4:	4152      	adcs	r2, r2
    2ab6:	0943      	lsrs	r3, r0, #5
    2ab8:	428b      	cmp	r3, r1
    2aba:	d301      	bcc.n	2ac0 <__udivsi3+0xc0>
    2abc:	014b      	lsls	r3, r1, #5
    2abe:	1ac0      	subs	r0, r0, r3
    2ac0:	4152      	adcs	r2, r2
    2ac2:	0903      	lsrs	r3, r0, #4
    2ac4:	428b      	cmp	r3, r1
    2ac6:	d301      	bcc.n	2acc <__udivsi3+0xcc>
    2ac8:	010b      	lsls	r3, r1, #4
    2aca:	1ac0      	subs	r0, r0, r3
    2acc:	4152      	adcs	r2, r2
    2ace:	08c3      	lsrs	r3, r0, #3
    2ad0:	428b      	cmp	r3, r1
    2ad2:	d301      	bcc.n	2ad8 <__udivsi3+0xd8>
    2ad4:	00cb      	lsls	r3, r1, #3
    2ad6:	1ac0      	subs	r0, r0, r3
    2ad8:	4152      	adcs	r2, r2
    2ada:	0883      	lsrs	r3, r0, #2
    2adc:	428b      	cmp	r3, r1
    2ade:	d301      	bcc.n	2ae4 <__udivsi3+0xe4>
    2ae0:	008b      	lsls	r3, r1, #2
    2ae2:	1ac0      	subs	r0, r0, r3
    2ae4:	4152      	adcs	r2, r2
    2ae6:	0843      	lsrs	r3, r0, #1
    2ae8:	428b      	cmp	r3, r1
    2aea:	d301      	bcc.n	2af0 <__udivsi3+0xf0>
    2aec:	004b      	lsls	r3, r1, #1
    2aee:	1ac0      	subs	r0, r0, r3
    2af0:	4152      	adcs	r2, r2
    2af2:	1a41      	subs	r1, r0, r1
    2af4:	d200      	bcs.n	2af8 <__udivsi3+0xf8>
    2af6:	4601      	mov	r1, r0
    2af8:	4152      	adcs	r2, r2
    2afa:	4610      	mov	r0, r2
    2afc:	4770      	bx	lr
    2afe:	e7ff      	b.n	2b00 <__udivsi3+0x100>
    2b00:	b501      	push	{r0, lr}
    2b02:	2000      	movs	r0, #0
    2b04:	f000 f806 	bl	2b14 <__aeabi_idiv0>
    2b08:	bd02      	pop	{r1, pc}
    2b0a:	46c0      	nop			; (mov r8, r8)

00002b0c <__aeabi_uidivmod>:
    2b0c:	2900      	cmp	r1, #0
    2b0e:	d0f7      	beq.n	2b00 <__udivsi3+0x100>
    2b10:	e776      	b.n	2a00 <__udivsi3>
    2b12:	4770      	bx	lr

00002b14 <__aeabi_idiv0>:
    2b14:	4770      	bx	lr
    2b16:	46c0      	nop			; (mov r8, r8)

00002b18 <__aeabi_lmul>:
    2b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b1a:	46ce      	mov	lr, r9
    2b1c:	4647      	mov	r7, r8
    2b1e:	0415      	lsls	r5, r2, #16
    2b20:	0c2d      	lsrs	r5, r5, #16
    2b22:	002e      	movs	r6, r5
    2b24:	b580      	push	{r7, lr}
    2b26:	0407      	lsls	r7, r0, #16
    2b28:	0c14      	lsrs	r4, r2, #16
    2b2a:	0c3f      	lsrs	r7, r7, #16
    2b2c:	4699      	mov	r9, r3
    2b2e:	0c03      	lsrs	r3, r0, #16
    2b30:	437e      	muls	r6, r7
    2b32:	435d      	muls	r5, r3
    2b34:	4367      	muls	r7, r4
    2b36:	4363      	muls	r3, r4
    2b38:	197f      	adds	r7, r7, r5
    2b3a:	0c34      	lsrs	r4, r6, #16
    2b3c:	19e4      	adds	r4, r4, r7
    2b3e:	469c      	mov	ip, r3
    2b40:	42a5      	cmp	r5, r4
    2b42:	d903      	bls.n	2b4c <__aeabi_lmul+0x34>
    2b44:	2380      	movs	r3, #128	; 0x80
    2b46:	025b      	lsls	r3, r3, #9
    2b48:	4698      	mov	r8, r3
    2b4a:	44c4      	add	ip, r8
    2b4c:	464b      	mov	r3, r9
    2b4e:	4351      	muls	r1, r2
    2b50:	4343      	muls	r3, r0
    2b52:	0436      	lsls	r6, r6, #16
    2b54:	0c36      	lsrs	r6, r6, #16
    2b56:	0c25      	lsrs	r5, r4, #16
    2b58:	0424      	lsls	r4, r4, #16
    2b5a:	4465      	add	r5, ip
    2b5c:	19a4      	adds	r4, r4, r6
    2b5e:	1859      	adds	r1, r3, r1
    2b60:	1949      	adds	r1, r1, r5
    2b62:	0020      	movs	r0, r4
    2b64:	bc0c      	pop	{r2, r3}
    2b66:	4690      	mov	r8, r2
    2b68:	4699      	mov	r9, r3
    2b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002b6c <__libc_init_array>:
    2b6c:	b570      	push	{r4, r5, r6, lr}
    2b6e:	2600      	movs	r6, #0
    2b70:	4d0c      	ldr	r5, [pc, #48]	; (2ba4 <__libc_init_array+0x38>)
    2b72:	4c0d      	ldr	r4, [pc, #52]	; (2ba8 <__libc_init_array+0x3c>)
    2b74:	1b64      	subs	r4, r4, r5
    2b76:	10a4      	asrs	r4, r4, #2
    2b78:	42a6      	cmp	r6, r4
    2b7a:	d109      	bne.n	2b90 <__libc_init_array+0x24>
    2b7c:	2600      	movs	r6, #0
    2b7e:	f000 f85b 	bl	2c38 <_init>
    2b82:	4d0a      	ldr	r5, [pc, #40]	; (2bac <__libc_init_array+0x40>)
    2b84:	4c0a      	ldr	r4, [pc, #40]	; (2bb0 <__libc_init_array+0x44>)
    2b86:	1b64      	subs	r4, r4, r5
    2b88:	10a4      	asrs	r4, r4, #2
    2b8a:	42a6      	cmp	r6, r4
    2b8c:	d105      	bne.n	2b9a <__libc_init_array+0x2e>
    2b8e:	bd70      	pop	{r4, r5, r6, pc}
    2b90:	00b3      	lsls	r3, r6, #2
    2b92:	58eb      	ldr	r3, [r5, r3]
    2b94:	4798      	blx	r3
    2b96:	3601      	adds	r6, #1
    2b98:	e7ee      	b.n	2b78 <__libc_init_array+0xc>
    2b9a:	00b3      	lsls	r3, r6, #2
    2b9c:	58eb      	ldr	r3, [r5, r3]
    2b9e:	4798      	blx	r3
    2ba0:	3601      	adds	r6, #1
    2ba2:	e7f2      	b.n	2b8a <__libc_init_array+0x1e>
    2ba4:	00002c44 	.word	0x00002c44
    2ba8:	00002c44 	.word	0x00002c44
    2bac:	00002c44 	.word	0x00002c44
    2bb0:	00002c48 	.word	0x00002c48

00002bb4 <strlen>:
    2bb4:	2300      	movs	r3, #0
    2bb6:	5cc2      	ldrb	r2, [r0, r3]
    2bb8:	3301      	adds	r3, #1
    2bba:	2a00      	cmp	r2, #0
    2bbc:	d1fb      	bne.n	2bb6 <strlen+0x2>
    2bbe:	1e58      	subs	r0, r3, #1
    2bc0:	4770      	bx	lr
    2bc2:	0000      	movs	r0, r0
    2bc4:	42000800 	.word	0x42000800
    2bc8:	42000c00 	.word	0x42000c00
    2bcc:	42001000 	.word	0x42001000
    2bd0:	42001400 	.word	0x42001400
    2bd4:	42001800 	.word	0x42001800
    2bd8:	42001c00 	.word	0x42001c00
    2bdc:	0c0b0a09 	.word	0x0c0b0a09
    2be0:	00000e0d 	.word	0x00000e0d
    2be4:	00001c6a 	.word	0x00001c6a
    2be8:	00001ce2 	.word	0x00001ce2
    2bec:	00001ce2 	.word	0x00001ce2
    2bf0:	00001c88 	.word	0x00001c88
    2bf4:	00001c82 	.word	0x00001c82
    2bf8:	00001c8e 	.word	0x00001c8e
    2bfc:	00001c70 	.word	0x00001c70
    2c00:	00001c94 	.word	0x00001c94
    2c04:	00001cc8 	.word	0x00001cc8
    2c08:	00001dbc 	.word	0x00001dbc
    2c0c:	00001e0c 	.word	0x00001e0c
    2c10:	00001e0c 	.word	0x00001e0c
    2c14:	00001e08 	.word	0x00001e08
    2c18:	00001dae 	.word	0x00001dae
    2c1c:	00001dce 	.word	0x00001dce
    2c20:	00001d9e 	.word	0x00001d9e
    2c24:	00001de0 	.word	0x00001de0
    2c28:	00001df2 	.word	0x00001df2
    2c2c:	0a0d5441 	.word	0x0a0d5441
    2c30:	00000000 	.word	0x00000000
    2c34:	aa083862 	.word	0xaa083862

00002c38 <_init>:
    2c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c3e:	bc08      	pop	{r3}
    2c40:	469e      	mov	lr, r3
    2c42:	4770      	bx	lr

00002c44 <__init_array_start>:
    2c44:	000000dd 	.word	0x000000dd

00002c48 <_fini>:
    2c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c4e:	bc08      	pop	{r3}
    2c50:	469e      	mov	lr, r3
    2c52:	4770      	bx	lr

00002c54 <__fini_array_start>:
    2c54:	000000b5 	.word	0x000000b5
